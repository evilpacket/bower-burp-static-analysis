{
    "url": "http://localhost:9999/BlueSpire/Durandal-Bower/js/plugins/history.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.href</b> and written to <b>location.replace()</b> via the following statements:<ul><li>var href = location.href.replace(/(javascript:|#).*$/, '');</li><li>location.replace(href + '#' + fragment);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/BlueSpire/Durandal-Bower/js/plugins/history.js",
                "path": "/BlueSpire/Durandal-Bower/js/plugins/history.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9CbHVlU3BpcmUvRHVyYW5kYWwtQm93ZXIvanMvcGx1Z2lucy9oaXN0b3J5LmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTI0NjQNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IFRodSwgMDYgTm92IDIwMTQgMjI6MTc6MjUgR01UDQpMYXN0LU1vZGlmaWVkOiBUaHUsIDA2IE5vdiAyMDE0IDIyOjE3OjI1IEdNVA0KDQovKioKICogRHVyYW5kYWwgMi4xLjAgQ29weXJpZ2h0IChjKSAyMDEyIEJsdWUgU3BpcmUgQ29uc3VsdGluZywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKiBBdmFpbGFibGUgdmlhIHRoZSBNSVQgbGljZW5zZS4KICogc2VlOiBodHRwOi8vZHVyYW5kYWxqcy5jb20gb3IgaHR0cHM6Ly9naXRodWIuY29tL0JsdWVTcGlyZS9EdXJhbmRhbCBmb3IgZGV0YWlscy4KICovCi8qKgogKiBUaGlzIG1vZHVsZSBpcyBiYXNlZCBvbiBCYWNrYm9uZSdzIGNvcmUgaGlzdG9yeSBzdXBwb3J0LiBJdCBhYnN0cmFjdHMgYXdheSB0aGUgbG93IGxldmVsIGRldGFpbHMgb2Ygd29ya2luZyB3aXRoIGJyb3dzZXIgaGlzdG9yeSBhbmQgdXJsIGNoYW5nZXMgaW4gb3JkZXIgdG8gcHJvdmlkZSBhIHNvbGlkIGZvdW5kYXRpb24gZm9yIGEgcm91dGVyLgogKiBAbW9kdWxlIGhpc3RvcnkKICogQHJlcXVpcmVzIHN5c3RlbQogKiBAcmVxdWlyZXMganF1ZXJ5CiAqLwpkZWZpbmUoWydkdXJhbmRhbC9zeXN0ZW0nLCAnanF1ZXJ5J10sIGZ1bmN0aW9uIChzeXN0ZW0sICQpIHsKICAgIC8vIENhY2hlZCByZWdleCBmb3Igc3RyaXBwaW5nIGEgbGVhZGluZyBoYXNoL3NsYXNoIGFuZCB0cmFpbGluZyBzcGFjZS4KICAgIHZhciByb3V0ZVN0cmlwcGVyID0gL15bI1wvXXxccyskL2c7CgogICAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBzdHJpcHBpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcy4KICAgIHZhciByb290U3RyaXBwZXIgPSAvXlwvK3xcLyskL2c7CgogICAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBkZXRlY3RpbmcgTVNJRS4KICAgIHZhciBpc0V4cGxvcmVyID0gL21zaWUgW1x3Ll0rLzsKCiAgICAvLyBDYWNoZWQgcmVnZXggZm9yIHJlbW92aW5nIGEgdHJhaWxpbmcgc2xhc2guCiAgICB2YXIgdHJhaWxpbmdTbGFzaCA9IC9cLyQvOwoKICAgIC8vIFVwZGF0ZSB0aGUgaGFzaCBsb2NhdGlvbiwgZWl0aGVyIHJlcGxhY2luZyB0aGUgY3VycmVudCBlbnRyeSwgb3IgYWRkaW5nCiAgICAvLyBhIG5ldyBvbmUgdG8gdGhlIGJyb3dzZXIgaGlzdG9yeS4KICAgIGZ1bmN0aW9uIHVwZGF0ZUhhc2gobG9jYXRpb24sIGZyYWdtZW50LCByZXBsYWNlKSB7CiAgICAgICAgaWYgKHJlcGxhY2UpIHsKICAgICAgICAgICAgdmFyIGhyZWYgPSBsb2NhdGlvbi5ocmVmLnJlcGxhY2UoLyhqYXZhc2NyaXB0OnwjKS4qJC8sICcnKTsKCiAgICAgICAgICAgIGlmIChoaXN0b3J5Lmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7CiAgICAgICAgICAgICAgICBoaXN0b3J5Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBkb2N1bWVudC50aXRsZSwgaHJlZiArICcjJyArIGZyYWdtZW50KTsgLy8gdXNpbmcgaGlzdG9yeS5yZXBsYWNlU3RhdGUgaW5zdGVhZCBvZiBsb2NhdGlvbi5yZXBsYWNlIHRvIHdvcmsgYXJvdW5kIGNocm9tIGJ1ZwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbG9jYXRpb24ucmVwbGFjZShocmVmICsgJyMnICsgZnJhZ21lbnQpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gU29tZSBicm93c2VycyByZXF1aXJlIHRoYXQgYGhhc2hgIGNvbnRhaW5zIGEgbGVhZGluZyAjLgogICAgICAgICAgICBsb2NhdGlvbi5oYXNoID0gJyMnICsgZnJhZ21lbnQ7CiAgICAgICAgfQogICAgfTsKCiAgICAvKioKICAgICAqIEBjbGFzcyBIaXN0b3J5TW9kdWxlCiAgICAgKiBAc3RhdGljCiAgICAgKi8KICAgIHZhciBoaXN0b3J5ID0gewogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBzZXRUaW1lb3V0IGludGVydmFsIHVzZWQgd2hlbiB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGhhc2ggY2hhbmdlIGV2ZW50cy4KICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gaW50ZXJ2YWwKICAgICAgICAgKiBAZGVmYXVsdCA1MAogICAgICAgICAqLwogICAgICAgIGludGVydmFsOiA1MCwKICAgICAgICAvKioKICAgICAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdGhlIGhpc3RvcnkgbW9kdWxlIGlzIGFjdGl2ZWx5IHRyYWNraW5nIGhpc3RvcnkuCiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGFjdGl2ZQogICAgICAgICAqLwogICAgICAgIGFjdGl2ZTogZmFsc2UKICAgIH07CiAgICAKICAgIC8vIEVuc3VyZSB0aGF0IGBIaXN0b3J5YCBjYW4gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBicm93c2VyLgogICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgaGlzdG9yeS5sb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjsKICAgICAgICBoaXN0b3J5Lmhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldHMgdGhlIHRydWUgaGFzaCB2YWx1ZS4gQ2Fubm90IHVzZSBsb2NhdGlvbi5oYXNoIGRpcmVjdGx5IGR1ZSB0byBhIGJ1ZyBpbiBGaXJlZm94IHdoZXJlIGxvY2F0aW9uLmhhc2ggd2lsbCBhbHdheXMgYmUgZGVjb2RlZC4KICAgICAqIEBtZXRob2QgZ2V0SGFzaAogICAgICogQHBhcmFtIHtzdHJpbmd9IFt3aW5kb3ddIFRoZSBvcHRpb25hbCB3aW5kb3cgaW5zdGFuY2UKICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGhhc2guCiAgICAgKi8KICAgIGhpc3RvcnkuZ2V0SGFzaCA9IGZ1bmN0aW9uKHdpbmRvdykgewogICAgICAgIHZhciBtYXRjaCA9ICh3aW5kb3cgfHwgaGlzdG9yeSkubG9jYXRpb24uaHJlZi5tYXRjaCgvIyguKikkLyk7CiAgICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJzsKICAgIH07CiAgICAKICAgIC8qKgogICAgICogR2V0IHRoZSBjcm9zcy1icm93c2VyIG5vcm1hbGl6ZWQgVVJMIGZyYWdtZW50LCBlaXRoZXIgZnJvbSB0aGUgVVJMLCB0aGUgaGFzaCwgb3IgdGhlIG92ZXJyaWRlLgogICAgICogQG1ldGhvZCBnZXRGcmFnbWVudAogICAgICogQHBhcmFtIHtzdHJpbmd9IGZyYWdtZW50IFRoZSBmcmFnbWVudC4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2VQdXNoU3RhdGUgU2hvdWxkIHdlIGZvcmNlIHB1c2ggc3RhdGU/CiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGhlIGZyYWdtZW50LgogICAgICovCiAgICBoaXN0b3J5LmdldEZyYWdtZW50ID0gZnVuY3Rpb24oZnJhZ21lbnQsIGZvcmNlUHVzaFN0YXRlKSB7CiAgICAgICAgaWYgKGZyYWdtZW50ID09IG51bGwpIHsKICAgICAgICAgICAgaWYgKGhpc3RvcnkuX2hhc1B1c2hTdGF0ZSB8fCAhaGlzdG9yeS5fd2FudHNIYXNoQ2hhbmdlIHx8IGZvcmNlUHVzaFN0YXRlKSB7CiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUgKyBoaXN0b3J5LmxvY2F0aW9uLnNlYXJjaDsKICAgICAgICAgICAgICAgIHZhciByb290ID0gaGlzdG9yeS5yb290LnJlcGxhY2UodHJhaWxpbmdTbGFzaCwgJycpOwogICAgICAgICAgICAgICAgaWYgKCFmcmFnbWVudC5pbmRleE9mKHJvb3QpKSB7CiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBmcmFnbWVudC5zdWJzdHIocm9vdC5sZW5ndGgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBoaXN0b3J5LmdldEhhc2goKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gZnJhZ21lbnQucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7CiAgICB9OwoKICAgIC8qKgogICAgICogQWN0aXZhdGUgdGhlIGhhc2ggY2hhbmdlIGhhbmRsaW5nLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBjdXJyZW50IFVSTCBtYXRjaGVzIGFuIGV4aXN0aW5nIHJvdXRlLCBhbmQgYGZhbHNlYCBvdGhlcndpc2UuCiAgICAgKiBAbWV0aG9kIGFjdGl2YXRlCiAgICAgKiBAcGFyYW0ge0hpc3RvcnlPcHRpb25zfSBvcHRpb25zLgogICAgICogQHJldHVybiB7Ym9vbGVhbnx1bmRlZmluZWR9IFJldHVybnMgdHJ1ZS9mYWxzZSBmcm9tIGxvYWRpbmcgdGhlIHVybCB1bmxlc3MgdGhlIHNpbGVudCBvcHRpb24gd2FzIHNlbGVjdGVkLgogICAgICovCiAgICBoaXN0b3J5LmFjdGl2YXRlID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGlmIChoaXN0b3J5LmFjdGl2ZSkgewogICAgICAgICAgICBzeXN0ZW0uZXJyb3IoIkhpc3RvcnkgaGFzIGFscmVhZHkgYmVlbiBhY3RpdmF0ZWQuIik7CiAgICAgICAgfQoKICAgICAgICBoaXN0b3J5LmFjdGl2ZSA9IHRydWU7CgogICAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIGluaXRpYWwgY29uZmlndXJhdGlvbi4gRG8gd2UgbmVlZCBhbiBpZnJhbWU/CiAgICAgICAgLy8gSXMgcHVzaFN0YXRlIGRlc2lyZWQgLi4uIGlzIGl0IGF2YWlsYWJsZT8KICAgICAgICBoaXN0b3J5Lm9wdGlvbnMgPSBzeXN0ZW0uZXh0ZW5kKHt9LCB7IHJvb3Q6ICcvJyB9LCBoaXN0b3J5Lm9wdGlvbnMsIG9wdGlvbnMpOwogICAgICAgIGhpc3Rvcnkucm9vdCA9IGhpc3Rvcnkub3B0aW9ucy5yb290OwogICAgICAgIGhpc3RvcnkuX3dhbnRzSGFzaENoYW5nZSA9IGhpc3Rvcnkub3B0aW9ucy5oYXNoQ2hhbmdlICE9PSBmYWxzZTsKICAgICAgICBoaXN0b3J5Ll93YW50c1B1c2hTdGF0ZSA9ICEhaGlzdG9yeS5vcHRpb25zLnB1c2hTdGF0ZTsKICAgICAgICBoaXN0b3J5Ll9oYXNQdXNoU3RhdGUgPSAhIShoaXN0b3J5Lm9wdGlvbnMucHVzaFN0YXRlICYmIGhpc3RvcnkuaGlzdG9yeSAmJiBoaXN0b3J5Lmhpc3RvcnkucHVzaFN0YXRlKTsKCiAgICAgICAgdmFyIGZyYWdtZW50ID0gaGlzdG9yeS5nZXRGcmFnbWVudCgpOwogICAgICAgIHZhciBkb2NNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlOwogICAgICAgIHZhciBvbGRJRSA9IChpc0V4cGxvcmVyLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKSAmJiAoIWRvY01vZGUgfHwgZG9jTW9kZSA8PSA3KSk7CgogICAgICAgIC8vIE5vcm1hbGl6ZSByb290IHRvIGFsd2F5cyBpbmNsdWRlIGEgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2guCiAgICAgICAgaGlzdG9yeS5yb290ID0gKCcvJyArIGhpc3Rvcnkucm9vdCArICcvJykucmVwbGFjZShyb290U3RyaXBwZXIsICcvJyk7CgogICAgICAgIGlmIChvbGRJRSAmJiBoaXN0b3J5Ll93YW50c0hhc2hDaGFuZ2UpIHsKICAgICAgICAgICAgaGlzdG9yeS5pZnJhbWUgPSAkKCc8aWZyYW1lIHNyYz0iamF2YXNjcmlwdDowIiB0YWJpbmRleD0iLTEiIC8+JykuaGlkZSgpLmFwcGVuZFRvKCdib2R5JylbMF0uY29udGVudFdpbmRvdzsKICAgICAgICAgICAgaGlzdG9yeS5uYXZpZ2F0ZShmcmFnbWVudCwgZmFsc2UpOwogICAgICAgIH0KCiAgICAgICAgLy8gRGVwZW5kaW5nIG9uIHdoZXRoZXIgd2UncmUgdXNpbmcgcHVzaFN0YXRlIG9yIGhhc2hlcywgYW5kIHdoZXRoZXIKICAgICAgICAvLyAnb25oYXNoY2hhbmdlJyBpcyBzdXBwb3J0ZWQsIGRldGVybWluZSBob3cgd2UgY2hlY2sgdGhlIFVSTCBzdGF0ZS4KICAgICAgICBpZiAoaGlzdG9yeS5faGFzUHVzaFN0YXRlKSB7CiAgICAgICAgICAgICQod2luZG93KS5vbigncG9wc3RhdGUnLCBoaXN0b3J5LmNoZWNrVXJsKTsKICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnkuX3dhbnRzSGFzaENoYW5nZSAmJiAoJ29uaGFzaGNoYW5nZScgaW4gd2luZG93KSAmJiAhb2xkSUUpIHsKICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgaGlzdG9yeS5jaGVja1VybCk7CiAgICAgICAgfSBlbHNlIGlmIChoaXN0b3J5Ll93YW50c0hhc2hDaGFuZ2UpIHsKICAgICAgICAgICAgaGlzdG9yeS5fY2hlY2tVcmxJbnRlcnZhbCA9IHNldEludGVydmFsKGhpc3RvcnkuY2hlY2tVcmwsIGhpc3RvcnkuaW50ZXJ2YWwpOwogICAgICAgIH0KCiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gY2hhbmdlIHRoZSBiYXNlIHVybCwgZm9yIGEgcHVzaFN0YXRlIGxpbmsKICAgICAgICAvLyBvcGVuZWQgYnkgYSBub24tcHVzaFN0YXRlIGJyb3dzZXIuCiAgICAgICAgaGlzdG9yeS5mcmFnbWVudCA9IGZyYWdtZW50OwogICAgICAgIHZhciBsb2MgPSBoaXN0b3J5LmxvY2F0aW9uOwogICAgICAgIHZhciBhdFJvb3QgPSBsb2MucGF0aG5hbWUucmVwbGFjZSgvW15cL10kLywgJyQmLycpID09PSBoaXN0b3J5LnJvb3Q7CgogICAgICAgIC8vIFRyYW5zaXRpb24gZnJvbSBoYXNoQ2hhbmdlIHRvIHB1c2hTdGF0ZSBvciB2aWNlIHZlcnNhIGlmIGJvdGggYXJlIHJlcXVlc3RlZC4KICAgICAgICBpZiAoaGlzdG9yeS5fd2FudHNIYXNoQ2hhbmdlICYmIGhpc3RvcnkuX3dhbnRzUHVzaFN0YXRlKSB7CiAgICAgICAgICAgIC8vIElmIHdlJ3ZlIHN0YXJ0ZWQgb2ZmIHdpdGggYSByb3V0ZSBmcm9tIGEgYHB1c2hTdGF0ZWAtZW5hYmxlZAogICAgICAgICAgICAvLyBicm93c2VyLCBidXQgd2UncmUgY3VycmVudGx5IGluIGEgYnJvd3NlciB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBpdC4uLgogICAgICAgICAgICBpZiAoIWhpc3RvcnkuX2hhc1B1c2hTdGF0ZSAmJiAhYXRSb290KSB7CiAgICAgICAgICAgICAgICBoaXN0b3J5LmZyYWdtZW50ID0gaGlzdG9yeS5nZXRGcmFnbWVudChudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGhpc3RvcnkubG9jYXRpb24ucmVwbGFjZShoaXN0b3J5LnJvb3QgKyBoaXN0b3J5LmxvY2F0aW9uLnNlYXJjaCArICcjJyArIGhpc3RvcnkuZnJhZ21lbnQpOwogICAgICAgICAgICAgICAgLy8gUmV0dXJuIGltbWVkaWF0ZWx5IGFzIGJyb3dzZXIgd2lsbCBkbyByZWRpcmVjdCB0byBuZXcgdXJsCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgICAgIC8vIE9yIGlmIHdlJ3ZlIHN0YXJ0ZWQgb3V0IHdpdGggYSBoYXNoLWJhc2VkIHJvdXRlLCBidXQgd2UncmUgY3VycmVudGx5CiAgICAgICAgICAgIC8vIGluIGEgYnJvd3NlciB3aGVyZSBpdCBjb3VsZCBiZSBgcHVzaFN0YXRlYC1iYXNlZCBpbnN0ZWFkLi4uCiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGlzdG9yeS5faGFzUHVzaFN0YXRlICYmIGF0Um9vdCAmJiBsb2MuaGFzaCkgewogICAgICAgICAgICAgICAgdGhpcy5mcmFnbWVudCA9IGhpc3RvcnkuZ2V0SGFzaCgpLnJlcGxhY2Uocm91dGVTdHJpcHBlciwgJycpOwogICAgICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgZG9jdW1lbnQudGl0bGUsIGhpc3Rvcnkucm9vdCArIGhpc3RvcnkuZnJhZ21lbnQgKyBsb2Muc2VhcmNoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCFoaXN0b3J5Lm9wdGlvbnMuc2lsZW50KSB7CiAgICAgICAgICAgIHJldHVybiBoaXN0b3J5LmxvYWRVcmwob3B0aW9ucy5zdGFydFJvdXRlKTsKICAgICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogRGlzYWJsZSBoaXN0b3J5LCBwZXJoYXBzIHRlbXBvcmFyaWx5LiBOb3QgdXNlZnVsIGluIGEgcmVhbCBhcHAsIGJ1dCBwb3NzaWJseSB1c2VmdWwgZm9yIHVuaXQgdGVzdGluZyBSb3V0ZXJzLgogICAgICogQG1ldGhvZCBkZWFjdGl2YXRlCiAgICAgKi8KICAgIGhpc3RvcnkuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICQod2luZG93KS5vZmYoJ3BvcHN0YXRlJywgaGlzdG9yeS5jaGVja1VybCkub2ZmKCdoYXNoY2hhbmdlJywgaGlzdG9yeS5jaGVja1VybCk7CiAgICAgICAgY2xlYXJJbnRlcnZhbChoaXN0b3J5Ll9jaGVja1VybEludGVydmFsKTsKICAgICAgICBoaXN0b3J5LmFjdGl2ZSA9IGZhbHNlOwogICAgfTsKCiAgICAvKioKICAgICAqIENoZWNrcyB0aGUgY3VycmVudCBVUkwgdG8gc2VlIGlmIGl0IGhhcyBjaGFuZ2VkLCBhbmQgaWYgaXQgaGFzLCBjYWxscyBgbG9hZFVybGAsIG5vcm1hbGl6aW5nIGFjcm9zcyB0aGUgaGlkZGVuIGlmcmFtZS4KICAgICAqIEBtZXRob2QgY2hlY2tVcmwKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZS9mYWxzZSBmcm9tIGxvYWRpbmcgdGhlIHVybC4KICAgICAqLwogICAgaGlzdG9yeS5jaGVja1VybCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBjdXJyZW50ID0gaGlzdG9yeS5nZXRGcmFnbWVudCgpOwogICAgICAgIGlmIChjdXJyZW50ID09PSBoaXN0b3J5LmZyYWdtZW50ICYmIGhpc3RvcnkuaWZyYW1lKSB7CiAgICAgICAgICAgIGN1cnJlbnQgPSBoaXN0b3J5LmdldEZyYWdtZW50KGhpc3RvcnkuZ2V0SGFzaChoaXN0b3J5LmlmcmFtZSkpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGN1cnJlbnQgPT09IGhpc3RvcnkuZnJhZ21lbnQpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgaWYgKGhpc3RvcnkuaWZyYW1lKSB7CiAgICAgICAgICAgIGhpc3RvcnkubmF2aWdhdGUoY3VycmVudCwgZmFsc2UpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBoaXN0b3J5LmxvYWRVcmwoKTsKICAgIH07CiAgICAKICAgIC8qKgogICAgICogQXR0ZW1wdHMgdG8gbG9hZCB0aGUgY3VycmVudCBVUkwgZnJhZ21lbnQuIEEgcGFzcy10aHJvdWdoIHRvIG9wdGlvbnMucm91dGVIYW5kbGVyLgogICAgICogQG1ldGhvZCBsb2FkVXJsCiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUvZmFsc2UgZnJvbSB0aGUgcm91dGUgaGFuZGxlci4KICAgICAqLwogICAgaGlzdG9yeS5sb2FkVXJsID0gZnVuY3Rpb24oZnJhZ21lbnRPdmVycmlkZSkgewogICAgICAgIHZhciBmcmFnbWVudCA9IGhpc3RvcnkuZnJhZ21lbnQgPSBoaXN0b3J5LmdldEZyYWdtZW50KGZyYWdtZW50T3ZlcnJpZGUpOwoKICAgICAgICByZXR1cm4gaGlzdG9yeS5vcHRpb25zLnJvdXRlSGFuZGxlciA/CiAgICAgICAgICAgIGhpc3Rvcnkub3B0aW9ucy5yb3V0ZUhhbmRsZXIoZnJhZ21lbnQpIDoKICAgICAgICAgICAgZmFsc2U7CiAgICB9OwoKICAgIC8qKgogICAgICogU2F2ZSBhIGZyYWdtZW50IGludG8gdGhlIGhhc2ggaGlzdG9yeSwgb3IgcmVwbGFjZSB0aGUgVVJMIHN0YXRlIGlmIHRoZQogICAgICogJ3JlcGxhY2UnIG9wdGlvbiBpcyBwYXNzZWQuIFlvdSBhcmUgcmVzcG9uc2libGUgZm9yIHByb3Blcmx5IFVSTC1lbmNvZGluZwogICAgICogdGhlIGZyYWdtZW50IGluIGFkdmFuY2UuCiAgICAgKiBUaGUgb3B0aW9ucyBvYmplY3QgY2FuIGNvbnRhaW4gYHRyaWdnZXI6IGZhbHNlYCBpZiB5b3Ugd2lzaCB0byBub3QgaGF2ZSB0aGUKICAgICAqIHJvdXRlIGNhbGxiYWNrIGJlIGZpcmVkLCBvciBgcmVwbGFjZTogdHJ1ZWAsIGlmCiAgICAgKiB5b3Ugd2lzaCB0byBtb2RpZnkgdGhlIGN1cnJlbnQgVVJMIHdpdGhvdXQgYWRkaW5nIGFuIGVudHJ5IHRvIHRoZSBoaXN0b3J5LgogICAgICogQG1ldGhvZCBuYXZpZ2F0ZQogICAgICogQHBhcmFtIHtzdHJpbmd9IGZyYWdtZW50IFRoZSB1cmwgZnJhZ21lbnQgdG8gbmF2aWdhdGUgdG8uCiAgICAgKiBAcGFyYW0ge29iamVjdHxib29sZWFufSBvcHRpb25zIEFuIG9wdGlvbnMgb2JqZWN0IHdpdGggb3B0aW9uYWwgdHJpZ2dlciBhbmQgcmVwbGFjZSBmbGFncy4gWW91IGNhbiBhbHNvIHBhc3MgYSBib29sZWFuIGRpcmVjdGx5IHRvIHNldCB0aGUgdHJpZ2dlciBvcHRpb24uIFRyaWdnZXIgaXMgYHRydWVgIGJ5IGRlZmF1bHQuCiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUvZmFsc2UgZnJvbSBsb2FkaW5nIHRoZSB1cmwuCiAgICAgKi8KICAgIGhpc3RvcnkubmF2aWdhdGUgPSBmdW5jdGlvbihmcmFnbWVudCwgb3B0aW9ucykgewogICAgICAgIGlmICghaGlzdG9yeS5hY3RpdmUpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgaWYob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIG9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgICB0cmlnZ2VyOiB0cnVlCiAgICAgICAgICAgIH07CiAgICAgICAgfWVsc2UgaWYoc3lzdGVtLmlzQm9vbGVhbihvcHRpb25zKSkgewogICAgICAgICAgICBvcHRpb25zID0gewogICAgICAgICAgICAgICAgdHJpZ2dlcjogb3B0aW9ucwogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgZnJhZ21lbnQgPSBoaXN0b3J5LmdldEZyYWdtZW50KGZyYWdtZW50IHx8ICcnKTsKCiAgICAgICAgaWYgKGhpc3RvcnkuZnJhZ21lbnQgPT09IGZyYWdtZW50KSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGhpc3RvcnkuZnJhZ21lbnQgPSBmcmFnbWVudDsKCiAgICAgICAgdmFyIHVybCA9IGhpc3Rvcnkucm9vdCArIGZyYWdtZW50OwoKICAgICAgICAvLyBEb24ndCBpbmNsdWRlIGEgdHJhaWxpbmcgc2xhc2ggb24gdGhlIHJvb3QuCiAgICAgICAgaWYoZnJhZ21lbnQgPT09ICcnICYmIHVybCAhPT0gJy8nKSB7CiAgICAgICAgICAgIHVybCA9IHVybC5zbGljZSgwLCAtMSk7CiAgICAgICAgfQoKICAgICAgICAvLyBJZiBwdXNoU3RhdGUgaXMgYXZhaWxhYmxlLCB3ZSB1c2UgaXQgdG8gc2V0IHRoZSBmcmFnbWVudCBhcyBhIHJlYWwgVVJMLgogICAgICAgIGlmIChoaXN0b3J5Ll9oYXNQdXNoU3RhdGUpIHsKICAgICAgICAgICAgaGlzdG9yeS5oaXN0b3J5W29wdGlvbnMucmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSddKHt9LCBkb2N1bWVudC50aXRsZSwgdXJsKTsKCiAgICAgICAgICAgIC8vIElmIGhhc2ggY2hhbmdlcyBoYXZlbid0IGJlZW4gZXhwbGljaXRseSBkaXNhYmxlZCwgdXBkYXRlIHRoZSBoYXNoCiAgICAgICAgICAgIC8vIGZyYWdtZW50IHRvIHN0b3JlIGhpc3RvcnkuCiAgICAgICAgfSBlbHNlIGlmIChoaXN0b3J5Ll93YW50c0hhc2hDaGFuZ2UpIHsKICAgICAgICAgICAgdXBkYXRlSGFzaChoaXN0b3J5LmxvY2F0aW9uLCBmcmFnbWVudCwgb3B0aW9ucy5yZXBsYWNlKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChoaXN0b3J5LmlmcmFtZSAmJiAoZnJhZ21lbnQgIT09IGhpc3RvcnkuZ2V0RnJhZ21lbnQoaGlzdG9yeS5nZXRIYXNoKGhpc3RvcnkuaWZyYW1lKSkpKSB7CiAgICAgICAgICAgICAgICAvLyBPcGVuaW5nIGFuZCBjbG9zaW5nIHRoZSBpZnJhbWUgdHJpY2tzIElFNyBhbmQgZWFybGllciB0byBwdXNoIGEKICAgICAgICAgICAgICAgIC8vIGhpc3RvcnkgZW50cnkgb24gaGFzaC10YWcgY2hhbmdlLiAgV2hlbiByZXBsYWNlIGlzIHRydWUsIHdlIGRvbid0CiAgICAgICAgICAgICAgICAvLyB3YW50IGhpc3RvcnkuCiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMucmVwbGFjZSkgewogICAgICAgICAgICAgICAgICAgIGhpc3RvcnkuaWZyYW1lLmRvY3VtZW50Lm9wZW4oKS5jbG9zZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB1cGRhdGVIYXNoKGhpc3RvcnkuaWZyYW1lLmxvY2F0aW9uLCBmcmFnbWVudCwgb3B0aW9ucy5yZXBsYWNlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSWYgeW91J3ZlIHRvbGQgdXMgdGhhdCB5b3UgZXhwbGljaXRseSBkb24ndCB3YW50IGZhbGxiYWNrIGhhc2hjaGFuZ2UtCiAgICAgICAgICAgIC8vIGJhc2VkIGhpc3RvcnksIHRoZW4gYG5hdmlnYXRlYCBiZWNvbWVzIGEgcGFnZSByZWZyZXNoLgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBoaXN0b3J5LmxvY2F0aW9uLmFzc2lnbih1cmwpOwogICAgICAgIH0KCiAgICAgICAgaWYgKG9wdGlvbnMudHJpZ2dlcikgewogICAgICAgICAgICByZXR1cm4gaGlzdG9yeS5sb2FkVXJsKGZyYWdtZW50KTsKICAgICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogTmF2aWdhdGVzIGJhY2sgaW4gdGhlIGJyb3dzZXIgaGlzdG9yeS4KICAgICAqIEBtZXRob2QgbmF2aWdhdGVCYWNrCiAgICAgKi8KICAgIGhpc3RvcnkubmF2aWdhdGVCYWNrID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaGlzdG9yeS5oaXN0b3J5LmJhY2soKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAY2xhc3MgSGlzdG9yeU9wdGlvbnMKICAgICAqIEBzdGF0aWMKICAgICAqLwoKICAgIC8qKgogICAgICogVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYmFjayB3aGVuIHRoZSBmcmFnbWVudCBjaGFuZ2VzLgogICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gcm91dGVIYW5kbGVyCiAgICAgKi8KCiAgICAvKioKICAgICAqIFRoZSB1cmwgcm9vdCB1c2VkIHRvIGV4dHJhY3QgdGhlIGZyYWdtZW50IHdoZW4gdXNpbmcgcHVzaCBzdGF0ZS4KICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSByb290CiAgICAgKi8KCiAgICAvKioKICAgICAqIFVzZSBoYXNoIGNoYW5nZSB3aGVuIHByZXNlbnQuCiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGhhc2hDaGFuZ2UKICAgICAqIEBkZWZhdWx0IHRydWUKICAgICAqLwoKICAgIC8qKgogICAgICogVXNlIHB1c2ggc3RhdGUgd2hlbiBwcmVzZW50LgogICAgICogQHByb3BlcnR5IHtib29sZWFufSBwdXNoU3RhdGUKICAgICAqIEBkZWZhdWx0IGZhbHNlCiAgICAgKi8KCiAgICAvKioKICAgICAqIFByZXZlbnRzIGxvYWRpbmcgb2YgdGhlIGN1cnJlbnQgdXJsIHdoZW4gYWN0aXZhdGluZyBoaXN0b3J5LgogICAgICogQHByb3BlcnR5IHtib29sZWFufSBzaWxlbnQKICAgICAqIEBkZWZhdWx0IGZhbHNlCiAgICAgKi8KCiAgICByZXR1cm4gaGlzdG9yeTsKfSk7Cg==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 22:17:25 GMT",
                    "Content-Length": "12464",
                    "Date": "Thu, 06 Nov 2014 22:17:25 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}