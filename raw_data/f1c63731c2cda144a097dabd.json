{
    "url": "http://localhost:9999/cowboy/jquery-bbq/jquery.ba-bbq.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.href</b> and written to <b>location.href</b> via the following statement:<ul><li>location.href = location.href.replace( /#.*/, '' ) + history_hash;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/cowboy/jquery-bbq/jquery.ba-bbq.js",
                "path": "/cowboy/jquery-bbq/jquery.ba-bbq.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9jb3dib3kvanF1ZXJ5LWJicS9qcXVlcnkuYmEtYmJxLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNTI2NTENCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMDU6NTI6MzIgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDA1OjUyOjMxIEdNVA0KDQovKiEKICogalF1ZXJ5IEJCUTogQmFjayBCdXR0b24gJiBRdWVyeSBMaWJyYXJ5IC0gdjEuM3ByZSAtIDgvMjYvMjAxMAogKiBodHRwOi8vYmVuYWxtYW4uY29tL3Byb2plY3RzL2pxdWVyeS1iYnEtcGx1Z2luLwogKiAKICogQ29weXJpZ2h0IChjKSAyMDEwICJDb3dib3kiIEJlbiBBbG1hbgogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgYW5kIEdQTCBsaWNlbnNlcy4KICogaHR0cDovL2JlbmFsbWFuLmNvbS9hYm91dC9saWNlbnNlLwogKi8KCi8vIFNjcmlwdDogalF1ZXJ5IEJCUTogQmFjayBCdXR0b24gJiBRdWVyeSBMaWJyYXJ5Ci8vCi8vICpWZXJzaW9uOiAxLjNwcmUsIExhc3QgdXBkYXRlZDogOC8yNi8yMDEwKgovLyAKLy8gUHJvamVjdCBIb21lIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9wcm9qZWN0cy9qcXVlcnktYmJxLXBsdWdpbi8KLy8gR2l0SHViICAgICAgIC0gaHR0cDovL2dpdGh1Yi5jb20vY293Ym95L2pxdWVyeS1iYnEvCi8vIFNvdXJjZSAgICAgICAtIGh0dHA6Ly9naXRodWIuY29tL2Nvd2JveS9qcXVlcnktYmJxL3Jhdy9tYXN0ZXIvanF1ZXJ5LmJhLWJicS5qcwovLyAoTWluaWZpZWQpICAgLSBodHRwOi8vZ2l0aHViLmNvbS9jb3dib3kvanF1ZXJ5LWJicS9yYXcvbWFzdGVyL2pxdWVyeS5iYS1iYnEubWluLmpzICgyLjJrYiBnemlwcGVkKQovLyAKLy8gQWJvdXQ6IExpY2Vuc2UKLy8gCi8vIENvcHlyaWdodCAoYykgMjAxMCAiQ293Ym95IiBCZW4gQWxtYW4sCi8vIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzLgovLyBodHRwOi8vYmVuYWxtYW4uY29tL2Fib3V0L2xpY2Vuc2UvCi8vIAovLyBBYm91dDogRXhhbXBsZXMKLy8gCi8vIFRoZXNlIHdvcmtpbmcgZXhhbXBsZXMsIGNvbXBsZXRlIHdpdGggZnVsbHkgY29tbWVudGVkIGNvZGUsIGlsbHVzdHJhdGUgYSBmZXcKLy8gd2F5cyBpbiB3aGljaCB0aGlzIHBsdWdpbiBjYW4gYmUgdXNlZC4KLy8gCi8vIEJhc2ljIEFKQVggICAgIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1iYnEvZXhhbXBsZXMvZnJhZ21lbnQtYmFzaWMvCi8vIEFkdmFuY2VkIEFKQVggIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1iYnEvZXhhbXBsZXMvZnJhZ21lbnQtYWR2YW5jZWQvCi8vIGpRdWVyeSBVSSBUYWJzIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1iYnEvZXhhbXBsZXMvZnJhZ21lbnQtanF1ZXJ5LXVpLXRhYnMvCi8vIERlcGFyYW0gICAgICAgIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1iYnEvZXhhbXBsZXMvZGVwYXJhbS8KLy8gCi8vIEFib3V0OiBTdXBwb3J0IGFuZCBUZXN0aW5nCi8vIAovLyBJbmZvcm1hdGlvbiBhYm91dCB3aGF0IHZlcnNpb24gb3IgdmVyc2lvbnMgb2YgalF1ZXJ5IHRoaXMgcGx1Z2luIGhhcyBiZWVuCi8vIHRlc3RlZCB3aXRoLCB3aGF0IGJyb3dzZXJzIGl0IGhhcyBiZWVuIHRlc3RlZCBpbiwgYW5kIHdoZXJlIHRoZSB1bml0IHRlc3RzCi8vIHJlc2lkZSAoc28geW91IGNhbiB0ZXN0IGl0IHlvdXJzZWxmKS4KLy8gCi8vIGpRdWVyeSBWZXJzaW9ucyAtIDEuMi42LCAxLjMuMiwgMS40LjEsIDEuNC4yCi8vIEJyb3dzZXJzIFRlc3RlZCAtIEludGVybmV0IEV4cGxvcmVyIDYtOCwgRmlyZWZveCAyLTQsIENocm9tZSA1LTYsIFNhZmFyaSAzLjItNSwKLy8gICAgICAgICAgICAgICAgICAgT3BlcmEgOS42LTEwLjYwLCBpUGhvbmUgMy4xLCBBbmRyb2lkIDEuNi0yLjIsIEJsYWNrQmVycnkgNC42LTUuCi8vIFVuaXQgVGVzdHMgICAgICAtIGh0dHA6Ly9iZW5hbG1hbi5jb20vY29kZS9wcm9qZWN0cy9qcXVlcnktYmJxL3VuaXQvCi8vIAovLyBBYm91dDogUmVsZWFzZSBIaXN0b3J5Ci8vIAovLyAxLjNwcmUgLSAoOC8yNi8yMDEwKSBJbnRlZ3JhdGVkIDxqUXVlcnkgaGFzaGNoYW5nZSBldmVudD4gdjEuMywgd2hpY2ggYWRkcwovLyAgICAgICAgIGRvY3VtZW50LnRpdGxlIGFuZCBkb2N1bWVudC5kb21haW4gc3VwcG9ydCBpbiBJRTYvNywgQmxhY2tCZXJyeQovLyAgICAgICAgIHN1cHBvcnQsIGJldHRlciBJZnJhbWUgaGlkaW5nIGZvciBhY2Nlc3NpYmlsaXR5IHJlYXNvbnMsIGFuZCB0aGUgbmV3Ci8vICAgICAgICAgPGpRdWVyeS5mbi5oYXNoY2hhbmdlPiAic2hvcnRjdXQiIG1ldGhvZC4gQWRkZWQgdGhlCi8vICAgICAgICAgPGpRdWVyeS5wYXJhbS5zb3J0ZWQ+IG1ldGhvZCB3aGljaCByZWR1Y2VzIHRoZSBwb3NzaWJpbGl0eSBvZgovLyAgICAgICAgIGV4dHJhbmVvdXMgaGFzaGNoYW5nZSBldmVudCB0cmlnZ2VyaW5nLiBBZGRlZCB0aGUKLy8gICAgICAgICA8alF1ZXJ5LnBhcmFtLmZyYWdtZW50LmFqYXhDcmF3bGFibGU+IG1ldGhvZCB3aGljaCBjYW4gYmUgdXNlZCB0bwovLyAgICAgICAgIGVuYWJsZSBHb29nbGUgIkFKQVggQ3Jhd2xhYmxlIG1vZGUuIgovLyAxLjIuMSAtICgyLzE3LzIwMTApIEFjdHVhbGx5IGZpeGVkIHRoZSBzdGFsZSB3aW5kb3cubG9jYXRpb24gU2FmYXJpIGJ1ZyBmcm9tCi8vICAgICAgICAgPGpRdWVyeSBoYXNoY2hhbmdlIGV2ZW50PiBpbiBCQlEsIHdoaWNoIHdhcyB0aGUgbWFpbiByZWFzb24gZm9yIHRoZQovLyAgICAgICAgIHByZXZpb3VzIHJlbGVhc2UhCi8vIDEuMiAgIC0gKDIvMTYvMjAxMCkgSW50ZWdyYXRlZCA8alF1ZXJ5IGhhc2hjaGFuZ2UgZXZlbnQ+IHYxLjIsIHdoaWNoIGZpeGVzIGEKLy8gICAgICAgICBTYWZhcmkgYnVnLCB0aGUgZXZlbnQgY2FuIG5vdyBiZSBib3VuZCBiZWZvcmUgRE9NIHJlYWR5LCBhbmQgSUU2LzcKLy8gICAgICAgICBwYWdlIHNob3VsZCBubyBsb25nZXIgc2Nyb2xsIHdoZW4gdGhlIGV2ZW50IGlzIGZpcnN0IGJvdW5kLiBBbHNvCi8vICAgICAgICAgYWRkZWQgdGhlIDxqUXVlcnkucGFyYW0uZnJhZ21lbnQubm9Fc2NhcGU+IG1ldGhvZCwgYW5kIHJld29ya2VkIHRoZQovLyAgICAgICAgIDxoYXNoY2hhbmdlIGV2ZW50IChCQlEpPiBpbnRlcm5hbCAiYWRkIiBtZXRob2QgdG8gYmUgY29tcGF0aWJsZSB3aXRoCi8vICAgICAgICAgY2hhbmdlcyBtYWRlIHRvIHRoZSBqUXVlcnkgMS40LjIgc3BlY2lhbCBldmVudHMgQVBJLgovLyAxLjEuMSAtICgxLzIyLzIwMTApIEludGVncmF0ZWQgPGpRdWVyeSBoYXNoY2hhbmdlIGV2ZW50PiB2MS4xLCB3aGljaCBmaXhlcyBhbgovLyAgICAgICAgIG9ic2N1cmUgSUU4IEVtdWxhdGVJRTcgbWV0YSB0YWcgY29tcGF0aWJpbGl0eSBtb2RlIGJ1Zy4KLy8gMS4xICAgLSAoMS85LzIwMTApIEJyb2tlIG91dCB0aGUgalF1ZXJ5IEJCUSBldmVudC5zcGVjaWFsIDxoYXNoY2hhbmdlIGV2ZW50PgovLyAgICAgICAgIGZ1bmN0aW9uYWxpdHkgaW50byBhIHNlcGFyYXRlIHBsdWdpbiBmb3IgdXNlcnMgd2hvIHdhbnQganVzdCB0aGUKLy8gICAgICAgICBiYXNpYyBldmVudCAmIGJhY2sgYnV0dG9uIHN1cHBvcnQsIHdpdGhvdXQgYWxsIHRoZSBleHRyYSBhd2Vzb21lbmVzcwovLyAgICAgICAgIHRoYXQgQkJRIHByb3ZpZGVzLiBUaGlzIHBsdWdpbiB3aWxsIGJlIGluY2x1ZGVkIGFzIHBhcnQgb2YgalF1ZXJ5IEJCUSwKLy8gICAgICAgICBidXQgYWxzbyBiZSBhdmFpbGFibGUgc2VwYXJhdGVseS4gU2VlIDxqUXVlcnkgaGFzaGNoYW5nZSBldmVudD4KLy8gICAgICAgICBwbHVnaW4gZm9yIG1vcmUgaW5mb3JtYXRpb24uIEFsc28gYWRkZWQgdGhlIDxqUXVlcnkuYmJxLnJlbW92ZVN0YXRlPgovLyAgICAgICAgIG1ldGhvZCBhbmQgYWRkZWQgYWRkaXRpb25hbCA8alF1ZXJ5LmRlcGFyYW0+IGV4YW1wbGVzLgovLyAxLjAuMyAtICgxMi8yLzIwMDkpIEZpeGVkIGFuIGlzc3VlIGluIElFIDYgd2hlcmUgbG9jYXRpb24uc2VhcmNoIGFuZAovLyAgICAgICAgIGxvY2F0aW9uLmhhc2ggd291bGQgcmVwb3J0IGluY29ycmVjdGx5IGlmIHRoZSBoYXNoIGNvbnRhaW5lZCB0aGUgPwovLyAgICAgICAgIGNoYXJhY3Rlci4gQWxzbyA8alF1ZXJ5LnBhcmFtLnF1ZXJ5c3RyaW5nPiBhbmQgPGpRdWVyeS5wYXJhbS5mcmFnbWVudD4KLy8gICAgICAgICB3aWxsIG5vIGxvbmdlciBwYXJzZSBwYXJhbXMgb3V0IG9mIGEgVVJMIHRoYXQgZG9lc24ndCBjb250YWluID8gb3IgIywKLy8gICAgICAgICByZXNwZWN0aXZlbHkuCi8vIDEuMC4yIC0gKDEwLzEwLzIwMDkpIEZpeGVkIGFuIGlzc3VlIGluIElFIDYvNyB3aGVyZSB0aGUgaGlkZGVuIElGUkFNRSBjYXVzZWQKLy8gICAgICAgICBhICJUaGlzIHBhZ2UgY29udGFpbnMgYm90aCBzZWN1cmUgYW5kIG5vbnNlY3VyZSBpdGVtcy4iIHdhcm5pbmcgd2hlbgovLyAgICAgICAgIHVzZWQgb24gYW4gaHR0cHM6Ly8gcGFnZS4KLy8gMS4wLjEgLSAoMTAvNy8yMDA5KSBGaXhlZCBhbiBpc3N1ZSBpbiBJRSA4LiBTaW5jZSBib3RoICJJRTciIGFuZCAiSUU4Ci8vICAgICAgICAgQ29tcGF0aWJpbGl0eSBWaWV3IiBtb2RlcyBlcnJvbmVvdXNseSByZXBvcnQgdGhhdCB0aGUgYnJvd3NlcgovLyAgICAgICAgIHN1cHBvcnRzIHRoZSBuYXRpdmUgd2luZG93Lm9uaGFzaGNoYW5nZSBldmVudCwgYSBzbGlnaHRseSBtb3JlCi8vICAgICAgICAgcm9idXN0IHRlc3QgbmVlZGVkIHRvIGJlIGFkZGVkLgovLyAxLjAgICAtICgxMC8yLzIwMDkpIEluaXRpYWwgcmVsZWFzZQoKKGZ1bmN0aW9uKCQsd2luZG93KXsKICAnJDpub211bmdlJzsgLy8gVXNlZCBieSBZVUkgY29tcHJlc3Nvci4KICAKICAvLyBTb21lIGNvbnZlbmllbnQgc2hvcnRjdXRzLgogIHZhciB1bmRlZmluZWQsCiAgICBhcHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UsCiAgICBkZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQsCiAgICAKICAgIC8vIE1ldGhvZCAvIG9iamVjdCByZWZlcmVuY2VzLgogICAganFfcGFyYW0gPSAkLnBhcmFtLAogICAganFfcGFyYW1fc29ydGVkLAogICAganFfcGFyYW1fZnJhZ21lbnQsCiAgICBqcV9kZXBhcmFtLAogICAganFfZGVwYXJhbV9mcmFnbWVudCwKICAgIGpxX2JicSA9ICQuYmJxID0gJC5iYnEgfHwge30sCiAgICBqcV9iYnFfcHVzaFN0YXRlLAogICAganFfYmJxX2dldFN0YXRlLAogICAganFfZWxlbVVybEF0dHIsCiAgICBzcGVjaWFsID0gJC5ldmVudC5zcGVjaWFsLAogICAgCiAgICAvLyBSZXVzZWQgc3RyaW5ncy4KICAgIHN0cl9oYXNoY2hhbmdlID0gJ2hhc2hjaGFuZ2UnLAogICAgc3RyX3F1ZXJ5c3RyaW5nID0gJ3F1ZXJ5c3RyaW5nJywKICAgIHN0cl9mcmFnbWVudCA9ICdmcmFnbWVudCcsCiAgICBzdHJfZWxlbVVybEF0dHIgPSAnZWxlbVVybEF0dHInLAogICAgc3RyX2hyZWYgPSAnaHJlZicsCiAgICBzdHJfc3JjID0gJ3NyYycsCiAgICAKICAgIC8vIFJldXNlZCBSZWdFeHAuCiAgICByZV9wYXJhbXNfcXVlcnlzdHJpbmcgPSAvXi4qXD98Iy4qJC9nLAogICAgcmVfcGFyYW1zX2ZyYWdtZW50LAogICAgcmVfZnJhZ21lbnQsCiAgICByZV9ub19lc2NhcGUsCiAgICAKICAgIGFqYXhfY3Jhd2xhYmxlLAogICAgZnJhZ21lbnRfcHJlZml4LAogICAgCiAgICAvLyBVc2VkIGJ5IGpRdWVyeS5lbGVtVXJsQXR0ci4KICAgIGVsZW1VcmxBdHRyX2NhY2hlID0ge307CiAgCiAgLy8gQSBmZXcgY29tbW9ubHkgdXNlZCBiaXRzLCBicm9rZW4gb3V0IHRvIGhlbHAgcmVkdWNlIG1pbmlmaWVkIGZpbGUgc2l6ZS4KICAKICBmdW5jdGlvbiBpc19zdHJpbmcoIGFyZyApIHsKICAgIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJzsKICB9OwogIAogIC8vIFdoeSB3cml0ZSB0aGUgc2FtZSBmdW5jdGlvbiB0d2ljZT8gTGV0J3MgY3VycnkhIE1tbW0sIGN1cnJ5Li4KICAKICBmdW5jdGlvbiBjdXJyeSggZnVuYyApIHsKICAgIHZhciBhcmdzID0gYXBzLmNhbGwoIGFyZ3VtZW50cywgMSApOwogICAgCiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBmdW5jLmFwcGx5KCB0aGlzLCBhcmdzLmNvbmNhdCggYXBzLmNhbGwoIGFyZ3VtZW50cyApICkgKTsKICAgIH07CiAgfTsKICAKICAvLyBHZXQgbG9jYXRpb24uaGFzaCAob3Igd2hhdCB5b3UnZCBleHBlY3QgbG9jYXRpb24uaGFzaCB0byBiZSkgc2FucyBhbnkKICAvLyBsZWFkaW5nICMuIFRoYW5rcyBmb3IgbWFraW5nIHRoaXMgbmVjZXNzYXJ5LCBGaXJlZm94IQogIGZ1bmN0aW9uIGdldF9mcmFnbWVudCggdXJsICkgewogICAgcmV0dXJuIHVybC5yZXBsYWNlKCByZV9mcmFnbWVudCwgJyQyJyApOwogIH07CiAgCiAgLy8gR2V0IGxvY2F0aW9uLnNlYXJjaCAob3Igd2hhdCB5b3UnZCBleHBlY3QgbG9jYXRpb24uc2VhcmNoIHRvIGJlKSBzYW5zIGFueQogIC8vIGxlYWRpbmcgIy4gVGhhbmtzIGZvciBtYWtpbmcgdGhpcyBuZWNlc3NhcnksIElFNiEKICBmdW5jdGlvbiBnZXRfcXVlcnlzdHJpbmcoIHVybCApIHsKICAgIHJldHVybiB1cmwucmVwbGFjZSggLyg/Ol5bXj8jXSpcPyhbXiNdKikuKiQpPy4qLywgJyQxJyApOwogIH07CiAgCiAgLy8gU2VjdGlvbjogUGFyYW0gKHRvIHN0cmluZykKICAvLyAKICAvLyBNZXRob2Q6IGpRdWVyeS5wYXJhbS5xdWVyeXN0cmluZwogIC8vIAogIC8vIFJldHJpZXZlIHRoZSBxdWVyeSBzdHJpbmcgZnJvbSBhIFVSTCBvciBpZiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCwgdGhlCiAgLy8gY3VycmVudCB3aW5kb3cubG9jYXRpb24uaHJlZi4KICAvLyAKICAvLyBVc2FnZToKICAvLyAKICAvLyA+IGpRdWVyeS5wYXJhbS5xdWVyeXN0cmluZyggWyB1cmwgXSApOwogIC8vIAogIC8vIEFyZ3VtZW50czoKICAvLyAKICAvLyAgdXJsIC0gKFN0cmluZykgQSBVUkwgY29udGFpbmluZyBxdWVyeSBzdHJpbmcgcGFyYW1zIHRvIGJlIHBhcnNlZC4gSWYgdXJsCiAgLy8gICAgaXMgbm90IHBhc3NlZCwgdGhlIGN1cnJlbnQgd2luZG93LmxvY2F0aW9uLmhyZWYgaXMgdXNlZC4KICAvLyAKICAvLyBSZXR1cm5zOgogIC8vIAogIC8vICAoU3RyaW5nKSBUaGUgcGFyc2VkIHF1ZXJ5IHN0cmluZywgd2l0aCBhbnkgbGVhZGluZyAiPyIgcmVtb3ZlZC4KICAvLwogIAogIC8vIE1ldGhvZDogalF1ZXJ5LnBhcmFtLnF1ZXJ5c3RyaW5nIChidWlsZCB1cmwpCiAgLy8gCiAgLy8gTWVyZ2UgYSBVUkwsIHdpdGggb3Igd2l0aG91dCBwcmUtZXhpc3RpbmcgcXVlcnkgc3RyaW5nIHBhcmFtcywgcGx1cyBhbnkKICAvLyBvYmplY3QsIHBhcmFtcyBzdHJpbmcgb3IgVVJMIGNvbnRhaW5pbmcgcXVlcnkgc3RyaW5nIHBhcmFtcyBpbnRvIGEgbmV3IFVSTC4KICAvLyAKICAvLyBVc2FnZToKICAvLyAKICAvLyA+IGpRdWVyeS5wYXJhbS5xdWVyeXN0cmluZyggdXJsLCBwYXJhbXMgWywgbWVyZ2VfbW9kZSBdICk7CiAgLy8gCiAgLy8gQXJndW1lbnRzOgogIC8vIAogIC8vICB1cmwgLSAoU3RyaW5nKSBBIHZhbGlkIFVSTCBmb3IgcGFyYW1zIHRvIGJlIG1lcmdlZCBpbnRvLiBUaGlzIFVSTCBtYXkKICAvLyAgICBjb250YWluIGEgcXVlcnkgc3RyaW5nIGFuZC9vciBmcmFnbWVudCAoaGFzaCkuCiAgLy8gIHBhcmFtcyAtIChTdHJpbmcpIEEgcGFyYW1zIHN0cmluZyBvciBVUkwgY29udGFpbmluZyBxdWVyeSBzdHJpbmcgcGFyYW1zIHRvCiAgLy8gICAgYmUgbWVyZ2VkIGludG8gdXJsLgogIC8vICBwYXJhbXMgLSAoT2JqZWN0KSBBIHBhcmFtcyBvYmplY3QgdG8gYmUgbWVyZ2VkIGludG8gdXJsLgogIC8vICBtZXJnZV9tb2RlIC0gKE51bWJlcikgTWVyZ2UgYmVoYXZpb3IgZGVmYXVsdHMgdG8gMCBpZiBtZXJnZV9tb2RlIGlzIG5vdAogIC8vICAgIHNwZWNpZmllZCwgYW5kIGlzIGFzLWZvbGxvd3M6CiAgLy8gCiAgLy8gICAgKiAwOiBwYXJhbXMgaW4gdGhlIHBhcmFtcyBhcmd1bWVudCB3aWxsIG92ZXJyaWRlIGFueSBxdWVyeSBzdHJpbmcKICAvLyAgICAgICAgIHBhcmFtcyBpbiB1cmwuCiAgLy8gICAgKiAxOiBhbnkgcXVlcnkgc3RyaW5nIHBhcmFtcyBpbiB1cmwgd2lsbCBvdmVycmlkZSBwYXJhbXMgaW4gdGhlIHBhcmFtcwogIC8vICAgICAgICAgYXJndW1lbnQuCiAgLy8gICAgKiAyOiBwYXJhbXMgYXJndW1lbnQgd2lsbCBjb21wbGV0ZWx5IHJlcGxhY2UgYW55IHF1ZXJ5IHN0cmluZyBpbiB1cmwuCiAgLy8gCiAgLy8gUmV0dXJuczoKICAvLyAKICAvLyAgKFN0cmluZykgQSBVUkwgd2l0aCBhIHVybGVuY29kZWQgcXVlcnkgc3RyaW5nIGluIHRoZSBmb3JtYXQgJz9hPWImYz1kJmU9ZicuCiAgCiAgLy8gTWV0aG9kOiBqUXVlcnkucGFyYW0uZnJhZ21lbnQKICAvLyAKICAvLyBSZXRyaWV2ZSB0aGUgZnJhZ21lbnQgKGhhc2gpIGZyb20gYSBVUkwgb3IgaWYgbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQsIHRoZQogIC8vIGN1cnJlbnQgd2luZG93LmxvY2F0aW9uLmhyZWYuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8gPiBqUXVlcnkucGFyYW0uZnJhZ21lbnQoIFsgdXJsIF0gKTsKICAvLyAKICAvLyBBcmd1bWVudHM6CiAgLy8gCiAgLy8gIHVybCAtIChTdHJpbmcpIEEgVVJMIGNvbnRhaW5pbmcgZnJhZ21lbnQgKGhhc2gpIHBhcmFtcyB0byBiZSBwYXJzZWQuIElmCiAgLy8gICAgdXJsIGlzIG5vdCBwYXNzZWQsIHRoZSBjdXJyZW50IHdpbmRvdy5sb2NhdGlvbi5ocmVmIGlzIHVzZWQuCiAgLy8gCiAgLy8gUmV0dXJuczoKICAvLyAKICAvLyAgKFN0cmluZykgVGhlIHBhcnNlZCBmcmFnbWVudCAoaGFzaCkgc3RyaW5nLCB3aXRoIGFueSBsZWFkaW5nICIjIiByZW1vdmVkLgogIAogIC8vIE1ldGhvZDogalF1ZXJ5LnBhcmFtLmZyYWdtZW50IChidWlsZCB1cmwpCiAgLy8gCiAgLy8gTWVyZ2UgYSBVUkwsIHdpdGggb3Igd2l0aG91dCBwcmUtZXhpc3RpbmcgZnJhZ21lbnQgKGhhc2gpIHBhcmFtcywgcGx1cyBhbnkKICAvLyBvYmplY3QsIHBhcmFtcyBzdHJpbmcgb3IgVVJMIGNvbnRhaW5pbmcgZnJhZ21lbnQgKGhhc2gpIHBhcmFtcyBpbnRvIGEgbmV3CiAgLy8gVVJMLgogIC8vIAogIC8vIFVzYWdlOgogIC8vIAogIC8vID4galF1ZXJ5LnBhcmFtLmZyYWdtZW50KCB1cmwsIHBhcmFtcyBbLCBtZXJnZV9tb2RlIF0gKTsKICAvLyAKICAvLyBBcmd1bWVudHM6CiAgLy8gCiAgLy8gIHVybCAtIChTdHJpbmcpIEEgdmFsaWQgVVJMIGZvciBwYXJhbXMgdG8gYmUgbWVyZ2VkIGludG8uIFRoaXMgVVJMIG1heQogIC8vICAgIGNvbnRhaW4gYSBxdWVyeSBzdHJpbmcgYW5kL29yIGZyYWdtZW50IChoYXNoKS4KICAvLyAgcGFyYW1zIC0gKFN0cmluZykgQSBwYXJhbXMgc3RyaW5nIG9yIFVSTCBjb250YWluaW5nIGZyYWdtZW50IChoYXNoKSBwYXJhbXMKICAvLyAgICB0byBiZSBtZXJnZWQgaW50byB1cmwuCiAgLy8gIHBhcmFtcyAtIChPYmplY3QpIEEgcGFyYW1zIG9iamVjdCB0byBiZSBtZXJnZWQgaW50byB1cmwuCiAgLy8gIG1lcmdlX21vZGUgLSAoTnVtYmVyKSBNZXJnZSBiZWhhdmlvciBkZWZhdWx0cyB0byAwIGlmIG1lcmdlX21vZGUgaXMgbm90CiAgLy8gICAgc3BlY2lmaWVkLCBhbmQgaXMgYXMtZm9sbG93czoKICAvLyAKICAvLyAgICAqIDA6IHBhcmFtcyBpbiB0aGUgcGFyYW1zIGFyZ3VtZW50IHdpbGwgb3ZlcnJpZGUgYW55IGZyYWdtZW50IChoYXNoKQogIC8vICAgICAgICAgcGFyYW1zIGluIHVybC4KICAvLyAgICAqIDE6IGFueSBmcmFnbWVudCAoaGFzaCkgcGFyYW1zIGluIHVybCB3aWxsIG92ZXJyaWRlIHBhcmFtcyBpbiB0aGUKICAvLyAgICAgICAgIHBhcmFtcyBhcmd1bWVudC4KICAvLyAgICAqIDI6IHBhcmFtcyBhcmd1bWVudCB3aWxsIGNvbXBsZXRlbHkgcmVwbGFjZSBhbnkgcXVlcnkgc3RyaW5nIGluIHVybC4KICAvLyAKICAvLyBSZXR1cm5zOgogIC8vIAogIC8vICAoU3RyaW5nKSBBIFVSTCB3aXRoIGEgdXJsZW5jb2RlZCBmcmFnbWVudCAoaGFzaCkgaW4gdGhlIGZvcm1hdCAnI2E9YiZjPWQmZT1mJy4KICAKICBmdW5jdGlvbiBqcV9wYXJhbV9zdWIoIGlzX2ZyYWdtZW50LCBnZXRfZnVuYywgdXJsLCBwYXJhbXMsIG1lcmdlX21vZGUgKSB7CiAgICB2YXIgcmVzdWx0LAogICAgICBxcywKICAgICAgbWF0Y2hlcywKICAgICAgdXJsX3BhcmFtcywKICAgICAgaGFzaDsKICAgIAogICAgaWYgKCBwYXJhbXMgIT09IHVuZGVmaW5lZCApIHsKICAgICAgLy8gQnVpbGQgVVJMIGJ5IG1lcmdpbmcgcGFyYW1zIGludG8gdXJsIHN0cmluZy4KICAgICAgCiAgICAgIC8vIG1hdGNoZXNbMV0gPSB1cmwgcGFydCB0aGF0IHByZWNlZGVzIHBhcmFtcywgbm90IGluY2x1ZGluZyB0cmFpbGluZyA/LyMKICAgICAgLy8gbWF0Y2hlc1syXSA9IHBhcmFtcywgbm90IGluY2x1ZGluZyBsZWFkaW5nID8vIwogICAgICAvLyBtYXRjaGVzWzNdID0gaWYgaW4gJ3F1ZXJ5c3RyaW5nJyBtb2RlLCBoYXNoIGluY2x1ZGluZyBsZWFkaW5nICMsIG90aGVyd2lzZSAnJwogICAgICBtYXRjaGVzID0gdXJsLm1hdGNoKCBpc19mcmFnbWVudCA/IHJlX2ZyYWdtZW50IDogL14oW14jP10qKVw/PyhbXiNdKikoIz8uKikvICk7CiAgICAgIAogICAgICAvLyBHZXQgdGhlIGhhc2ggaWYgaW4gJ3F1ZXJ5c3RyaW5nJyBtb2RlLCBhbmQgaXQgZXhpc3RzLgogICAgICBoYXNoID0gbWF0Y2hlc1szXSB8fCAnJzsKICAgICAgCiAgICAgIGlmICggbWVyZ2VfbW9kZSA9PT0gMiAmJiBpc19zdHJpbmcoIHBhcmFtcyApICkgewogICAgICAgIC8vIElmIG1lcmdlX21vZGUgaXMgMiBhbmQgcGFyYW1zIGlzIGEgc3RyaW5nLCBtZXJnZSB0aGUgZnJhZ21lbnQgLyBxdWVyeQogICAgICAgIC8vIHN0cmluZyBpbnRvIHRoZSBVUkwgd2hvbGVzYWxlLCB3aXRob3V0IGNvbnZlcnRpbmcgaXQgaW50byBhbiBvYmplY3QuCiAgICAgICAgcXMgPSBwYXJhbXMucmVwbGFjZSggaXNfZnJhZ21lbnQgPyByZV9wYXJhbXNfZnJhZ21lbnQgOiByZV9wYXJhbXNfcXVlcnlzdHJpbmcsICcnICk7CiAgICAgICAgCiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gQ29udmVydCByZWxldmFudCBwYXJhbXMgaW4gdXJsIHRvIG9iamVjdC4KICAgICAgICB1cmxfcGFyYW1zID0ganFfZGVwYXJhbSggbWF0Y2hlc1syXSApOwogICAgICAgIAogICAgICAgIHBhcmFtcyA9IGlzX3N0cmluZyggcGFyYW1zICkKICAgICAgICAgIAogICAgICAgICAgLy8gQ29udmVydCBwYXNzZWQgcGFyYW1zIHN0cmluZyBpbnRvIG9iamVjdC4KICAgICAgICAgID8ganFfZGVwYXJhbVsgaXNfZnJhZ21lbnQgPyBzdHJfZnJhZ21lbnQgOiBzdHJfcXVlcnlzdHJpbmcgXSggcGFyYW1zICkKICAgICAgICAgIAogICAgICAgICAgLy8gUGFzc2VkIHBhcmFtcyBvYmplY3QuCiAgICAgICAgICA6IHBhcmFtczsKICAgICAgICAKICAgICAgICBxcyA9IG1lcmdlX21vZGUgPT09IDIgPyBwYXJhbXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwYXNzZWQgcGFyYW1zIHJlcGxhY2UgdXJsIHBhcmFtcwogICAgICAgICAgOiBtZXJnZV9tb2RlID09PSAxICA/ICQuZXh0ZW5kKCB7fSwgcGFyYW1zLCB1cmxfcGFyYW1zICkgIC8vIHVybCBwYXJhbXMgb3ZlcnJpZGUgcGFzc2VkIHBhcmFtcwogICAgICAgICAgOiAkLmV4dGVuZCgge30sIHVybF9wYXJhbXMsIHBhcmFtcyApOyAgICAgICAgICAgICAgICAgICAgIC8vIHBhc3NlZCBwYXJhbXMgb3ZlcnJpZGUgdXJsIHBhcmFtcwogICAgICAgIAogICAgICAgIC8vIENvbnZlcnQgcGFyYW1zIG9iamVjdCBpbnRvIGEgc29ydGVkIHBhcmFtcyBzdHJpbmcuCiAgICAgICAgcXMgPSBqcV9wYXJhbV9zb3J0ZWQoIHFzICk7CiAgICAgICAgCiAgICAgICAgLy8gVW5lc2NhcGUgY2hhcmFjdGVycyBzcGVjaWZpZWQgdmlhICQucGFyYW0ubm9Fc2NhcGUuIFNpbmNlIG9ubHkgaGFzaC0KICAgICAgICAvLyBoaXN0b3J5IHVzZXJzIGhhdmUgcmVxdWVzdGVkIHRoaXMgZmVhdHVyZSwgaXQncyBvbmx5IGVuYWJsZWQgZm9yCiAgICAgICAgLy8gZnJhZ21lbnQtcmVsYXRlZCBwYXJhbXMgc3RyaW5ncy4KICAgICAgICBpZiAoIGlzX2ZyYWdtZW50ICkgewogICAgICAgICAgcXMgPSBxcy5yZXBsYWNlKCByZV9ub19lc2NhcGUsIGRlY29kZSApOwogICAgICAgIH0KICAgICAgfQogICAgICAKICAgICAgLy8gQnVpbGQgVVJMIGZyb20gdGhlIGJhc2UgdXJsLCBxdWVyeXN0cmluZyBhbmQgaGFzaC4gSW4gJ3F1ZXJ5c3RyaW5nJwogICAgICAvLyBtb2RlLCA/IGlzIG9ubHkgYWRkZWQgaWYgYSBxdWVyeSBzdHJpbmcgZXhpc3RzLiBJbiAnZnJhZ21lbnQnIG1vZGUsICMKICAgICAgLy8gaXMgYWx3YXlzIGFkZGVkLgogICAgICByZXN1bHQgPSBtYXRjaGVzWzFdICsgKCBpc19mcmFnbWVudCA/IGZyYWdtZW50X3ByZWZpeCA6IHFzIHx8ICFtYXRjaGVzWzFdID8gJz8nIDogJycgKSArIHFzICsgaGFzaDsKICAgICAgCiAgICB9IGVsc2UgewogICAgICAvLyBJZiBVUkwgd2FzIHBhc3NlZCBpbiwgcGFyc2UgcGFyYW1zIGZyb20gVVJMIHN0cmluZywgb3RoZXJ3aXNlIHBhcnNlCiAgICAgIC8vIHBhcmFtcyBmcm9tIHdpbmRvdy5sb2NhdGlvbi5ocmVmLgogICAgICByZXN1bHQgPSBnZXRfZnVuYyggdXJsICE9PSB1bmRlZmluZWQgPyB1cmwgOiBsb2NhdGlvbi5ocmVmICk7CiAgICB9CiAgICAKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKICAKICBqcV9wYXJhbVsgc3RyX3F1ZXJ5c3RyaW5nIF0gICAgICAgICAgICAgICAgICA9IGN1cnJ5KCBqcV9wYXJhbV9zdWIsIDAsIGdldF9xdWVyeXN0cmluZyApOwogIGpxX3BhcmFtWyBzdHJfZnJhZ21lbnQgXSA9IGpxX3BhcmFtX2ZyYWdtZW50ID0gY3VycnkoIGpxX3BhcmFtX3N1YiwgMSwgZ2V0X2ZyYWdtZW50ICk7CiAgCiAgLy8gTWV0aG9kOiBqUXVlcnkucGFyYW0uc29ydGVkCiAgLy8gCiAgLy8gUmV0dXJucyBhIHBhcmFtcyBzdHJpbmcgZXF1aXZhbGVudCB0byB0aGF0IHJldHVybmVkIGJ5IHRoZSBpbnRlcm5hbAogIC8vIGpRdWVyeS5wYXJhbSBtZXRob2QsIGJ1dCBzb3J0ZWQsIHdoaWNoIG1ha2VzIGl0IHN1aXRhYmxlIGZvciB1c2UgYXMgYQogIC8vIGNhY2hlIGtleS4KICAvLyAKICAvLyBGb3IgZXhhbXBsZSwgaW4gbW9zdCBicm93c2VycyBqUXVlcnkucGFyYW0oe3o6MSxhOjJ9KSByZXR1cm5zICJ6PTEmYT0yIgogIC8vIGFuZCBqUXVlcnkucGFyYW0oe2E6Mix6OjF9KSByZXR1cm5zICJhPTImej0xIi4gRXZlbiB0aG91Z2ggYm90aCB0aGUKICAvLyBvYmplY3RzIGJlaW5nIHNlcmlhbGl6ZWQgYW5kIHRoZSByZXN1bHRpbmcgcGFyYW1zIHN0cmluZ3MgYXJlIGVxdWl2YWxlbnQsCiAgLy8gaWYgdGhlc2UgcGFyYW1zIHN0cmluZ3Mgd2VyZSBzZXQgaW50byB0aGUgbG9jYXRpb24uaGFzaCBmcmFnbWVudAogIC8vIHNlcXVlbnRpYWxseSwgdGhlIGhhc2hjaGFuZ2UgZXZlbnQgd291bGQgYmUgdHJpZ2dlcmVkIHVubmVjZXNzYXJpbHksIHNpbmNlCiAgLy8gdGhlIHN0cmluZ3MgYXJlIGRpZmZlcmVudCAoZXZlbiB0aG91Z2ggdGhlIGRhdGEgZGVzY3JpYmVkIGJ5IHRoZW0gaXMgdGhlCiAgLy8gc2FtZSkuIEJ5IHNvcnRpbmcgdGhlIHBhcmFtcyBzdHJpbmcsIHVuZWNlc3NhcnkgaGFzaGNoYW5nZSBldmVudCB0cmlnZ2VyaW5nCiAgLy8gY2FuIGJlIGF2b2lkZWQuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8gPiBqUXVlcnkucGFyYW0uc29ydGVkKCBvYmogWywgdHJhZGl0aW9uYWwgXSApOwogIC8vIAogIC8vIEFyZ3VtZW50czoKICAvLyAKICAvLyAgb2JqIC0gKE9iamVjdCkgQW4gb2JqZWN0IHRvIGJlIHNlcmlhbGl6ZWQuCiAgLy8gIHRyYWRpdGlvbmFsIC0gKEJvb2xlYW4pIFBhcmFtcyBkZWVwL3NoYWxsb3cgc2VyaWFsaXphdGlvbiBtb2RlLiBTZWUgdGhlCiAgLy8gICAgZG9jdW1lbnRhdGlvbiBhdCBodHRwOi8vYXBpLmpxdWVyeS5jb20valF1ZXJ5LnBhcmFtLyBmb3IgbW9yZSBkZXRhaWwuCiAgLy8gCiAgLy8gUmV0dXJuczoKICAvLyAKICAvLyAgKFN0cmluZykgQSBzb3J0ZWQgcGFyYW1zIHN0cmluZy4KICAKICBqcV9wYXJhbS5zb3J0ZWQgPSBqcV9wYXJhbV9zb3J0ZWQgPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7CiAgICB2YXIgYXJyID0gW10sCiAgICAgIG9iaiA9IHt9OwogICAgCiAgICAkLmVhY2goIGpxX3BhcmFtKCBhLCB0cmFkaXRpb25hbCApLnNwbGl0KCAnJicgKSwgZnVuY3Rpb24oaSx2KXsKICAgICAgdmFyIGtleSA9IHYucmVwbGFjZSggLyg/OiU1Qnw9KS4qJC8sICcnICksCiAgICAgICAga2V5X29iaiA9IG9ialsga2V5IF07CiAgICAgIAogICAgICBpZiAoICFrZXlfb2JqICkgewogICAgICAgIGtleV9vYmogPSBvYmpbIGtleSBdID0gW107CiAgICAgICAgYXJyLnB1c2goIGtleSApOwogICAgICB9CiAgICAgIAogICAgICBrZXlfb2JqLnB1c2goIHYgKTsKICAgIH0pOwogICAgCiAgICByZXR1cm4gJC5tYXAoIGFyci5zb3J0KCksIGZ1bmN0aW9uKHYpewogICAgICByZXR1cm4gb2JqWyB2IF07CiAgICB9KS5qb2luKCAnJicgKTsKICB9OwogIAogIC8vIE1ldGhvZDogalF1ZXJ5LnBhcmFtLmZyYWdtZW50Lm5vRXNjYXBlCiAgLy8gCiAgLy8gU3BlY2lmeSBjaGFyYWN0ZXJzIHRoYXQgd2lsbCBiZSBsZWZ0IHVuZXNjYXBlZCB3aGVuIGZyYWdtZW50cyBhcmUgY3JlYXRlZAogIC8vIG9yIG1lcmdlZCB1c2luZyA8alF1ZXJ5LnBhcmFtLmZyYWdtZW50Piwgb3Igd2hlbiB0aGUgZnJhZ21lbnQgaXMgbW9kaWZpZWQKICAvLyB1c2luZyA8alF1ZXJ5LmJicS5wdXNoU3RhdGU+LiBUaGlzIG9wdGlvbiBvbmx5IGFwcGxpZXMgdG8gc2VyaWFsaXplZCBkYXRhCiAgLy8gb2JqZWN0IGZyYWdtZW50cywgYW5kIG5vdCBzZXQtYXMtc3RyaW5nIGZyYWdtZW50cy4gRG9lcyBub3QgYWZmZWN0IHRoZQogIC8vIHF1ZXJ5IHN0cmluZy4gRGVmYXVsdHMgdG8gIiwvIiAoY29tbWEsIGZvcndhcmQgc2xhc2gpLgogIC8vIAogIC8vIE5vdGUgdGhhdCB0aGlzIGlzIGNvbnNpZGVyZWQgYSBwdXJlbHkgYWVzdGhldGljIG9wdGlvbiwgYW5kIHdpbGwgaGVscCB0bwogIC8vIGNyZWF0ZSBVUkxzIHRoYXQgImxvb2sgcHJldHR5IiBpbiB0aGUgYWRkcmVzcyBiYXIgb3IgYm9va21hcmtzLCB3aXRob3V0CiAgLy8gYWZmZWN0aW5nIGZ1bmN0aW9uYWxpdHkgaW4gYW55IHdheS4gVGhhdCBiZWluZyBzYWlkLCBiZSBjYXJlZnVsIHRvIG5vdAogIC8vIHVuZXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBhcmUgdXNlZCBhcyBkZWxpbWl0ZXJzIG9yIHNlcnZlIGEgc3BlY2lhbAogIC8vIHB1cnBvc2UsIHN1Y2ggYXMgdGhlICIjPyY9KyIgKG9jdG90aG9ycGUsIHF1ZXN0aW9uIG1hcmssIGFtcGVyc2FuZCwKICAvLyBlcXVhbHMsIHBsdXMpIGNoYXJhY3RlcnMuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8gPiBqUXVlcnkucGFyYW0uZnJhZ21lbnQubm9Fc2NhcGUoIFsgY2hhcnMgXSApOwogIC8vIAogIC8vIEFyZ3VtZW50czoKICAvLyAKICAvLyAgY2hhcnMgLSAoU3RyaW5nKSBUaGUgY2hhcmFjdGVycyB0byBub3QgZXNjYXBlIGluIHRoZSBmcmFnbWVudC4gSWYKICAvLyAgICB1bnNwZWNpZmllZCwgZGVmYXVsdHMgdG8gZW1wdHkgc3RyaW5nIChlc2NhcGUgYWxsIGNoYXJhY3RlcnMpLgogIC8vIAogIC8vIFJldHVybnM6CiAgLy8gCiAgLy8gIE5vdGhpbmcuCiAgCiAganFfcGFyYW1fZnJhZ21lbnQubm9Fc2NhcGUgPSBmdW5jdGlvbiggY2hhcnMgKSB7CiAgICBjaGFycyA9IGNoYXJzIHx8ICcnOwogICAgdmFyIGFyciA9ICQubWFwKCBjaGFycy5zcGxpdCgnJyksIGVuY29kZVVSSUNvbXBvbmVudCApOwogICAgcmVfbm9fZXNjYXBlID0gbmV3IFJlZ0V4cCggYXJyLmpvaW4oJ3wnKSwgJ2cnICk7CiAgfTsKICAKICAvLyBBIHNlbnNpYmxlIGRlZmF1bHQuIFRoZXNlIGFyZSB0aGUgY2hhcmFjdGVycyBwZW9wbGUgc2VlbSB0byBjb21wbGFpbiBhYm91dAogIC8vICJ1Z2xpZnlpbmcgdXAgdGhlIFVSTCIgdGhlIG1vc3QuCiAganFfcGFyYW1fZnJhZ21lbnQubm9Fc2NhcGUoICcsLycgKTsKICAKICAvLyBNZXRob2Q6IGpRdWVyeS5wYXJhbS5mcmFnbWVudC5hamF4Q3Jhd2xhYmxlCiAgLy8gCiAgLy8gVE9ETzogREVTQ1JJQkUKICAvLyAKICAvLyBVc2FnZToKICAvLyAKICAvLyA+IGpRdWVyeS5wYXJhbS5mcmFnbWVudC5hamF4Q3Jhd2xhYmxlKCBbIHN0YXRlIF0gKTsKICAvLyAKICAvLyBBcmd1bWVudHM6CiAgLy8gCiAgLy8gIHN0YXRlIC0gKEJvb2xlYW4pIFRPRE86IERFU0NSSUJFCiAgLy8gCiAgLy8gUmV0dXJuczoKICAvLyAKICAvLyAgKEJvb2xlYW4pIFRoZSBjdXJyZW50IGFqYXhDcmF3bGFibGUgc3RhdGUuCiAgCiAganFfcGFyYW1fZnJhZ21lbnQuYWpheENyYXdsYWJsZSA9IGZ1bmN0aW9uKCBzdGF0ZSApIHsKICAgIGlmICggc3RhdGUgIT09IHVuZGVmaW5lZCApIHsKICAgICAgaWYgKCBzdGF0ZSApIHsKICAgICAgICByZV9wYXJhbXNfZnJhZ21lbnQgPSAvXi4qKD86IyF8IykvOwogICAgICAgIHJlX2ZyYWdtZW50ID0gL14oW14jXSopKD86IyF8Iyk/KC4qKSQvOwogICAgICAgIGZyYWdtZW50X3ByZWZpeCA9ICcjISc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVfcGFyYW1zX2ZyYWdtZW50ID0gL14uKiMvOwogICAgICAgIHJlX2ZyYWdtZW50ID0gL14oW14jXSopIz8oLiopJC87CiAgICAgICAgZnJhZ21lbnRfcHJlZml4ID0gJyMnOwogICAgICB9CiAgICAgIGFqYXhfY3Jhd2xhYmxlID0gISFzdGF0ZTsKICAgIH0KICAgIAogICAgcmV0dXJuIGFqYXhfY3Jhd2xhYmxlOwogIH07CiAgCiAganFfcGFyYW1fZnJhZ21lbnQuYWpheENyYXdsYWJsZSggMCApOwogIAogIC8vIFNlY3Rpb246IERlcGFyYW0gKGZyb20gc3RyaW5nKQogIC8vIAogIC8vIE1ldGhvZDogalF1ZXJ5LmRlcGFyYW0KICAvLyAKICAvLyBEZXNlcmlhbGl6ZSBhIHBhcmFtcyBzdHJpbmcgaW50byBhbiBvYmplY3QsIG9wdGlvbmFsbHkgY29lcmNpbmcgbnVtYmVycywKICAvLyBib29sZWFucywgbnVsbCBhbmQgdW5kZWZpbmVkIHZhbHVlczsgdGhpcyBtZXRob2QgaXMgdGhlIGNvdW50ZXJwYXJ0IHRvIHRoZQogIC8vIGludGVybmFsIGpRdWVyeS5wYXJhbSBtZXRob2QuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8gPiBqUXVlcnkuZGVwYXJhbSggcGFyYW1zIFssIGNvZXJjZSBdICk7CiAgLy8gCiAgLy8gQXJndW1lbnRzOgogIC8vIAogIC8vICBwYXJhbXMgLSAoU3RyaW5nKSBBIHBhcmFtcyBzdHJpbmcgdG8gYmUgcGFyc2VkLgogIC8vICBjb2VyY2UgLSAoQm9vbGVhbikgSWYgdHJ1ZSwgY29lcmNlcyBhbnkgbnVtYmVycyBvciB0cnVlLCBmYWxzZSwgbnVsbCwgYW5kCiAgLy8gICAgdW5kZWZpbmVkIHRvIHRoZWlyIGFjdHVhbCB2YWx1ZS4gRGVmYXVsdHMgdG8gZmFsc2UgaWYgb21pdHRlZC4KICAvLyAKICAvLyBSZXR1cm5zOgogIC8vIAogIC8vICAoT2JqZWN0KSBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBkZXNlcmlhbGl6ZWQgcGFyYW1zIHN0cmluZy4KICAKICAkLmRlcGFyYW0gPSBqcV9kZXBhcmFtID0gZnVuY3Rpb24oIHBhcmFtcywgY29lcmNlICkgewogICAgdmFyIG9iaiA9IHt9LAogICAgICBjb2VyY2VfdHlwZXMgPSB7ICd0cnVlJzogITAsICdmYWxzZSc6ICExLCAnbnVsbCc6IG51bGwgfTsKICAgIAogICAgLy8gSXRlcmF0ZSBvdmVyIGFsbCBuYW1lPXZhbHVlIHBhaXJzLgogICAgJC5lYWNoKCBwYXJhbXMucmVwbGFjZSggL1wrL2csICcgJyApLnNwbGl0KCAnJicgKSwgZnVuY3Rpb24oaix2KXsKICAgICAgdmFyIHBhcmFtID0gdi5zcGxpdCggJz0nICksCiAgICAgICAga2V5ID0gZGVjb2RlKCBwYXJhbVswXSApLAogICAgICAgIHZhbCwKICAgICAgICBjdXIgPSBvYmosCiAgICAgICAgaSA9IDAsCiAgICAgICAgCiAgICAgICAgLy8gSWYga2V5IGlzIG1vcmUgY29tcGxleCB0aGFuICdmb28nLCBsaWtlICdhW10nIG9yICdhW2JdW2NdJywgc3BsaXQgaXQKICAgICAgICAvLyBpbnRvIGl0cyBjb21wb25lbnQgcGFydHMuCiAgICAgICAga2V5cyA9IGtleS5zcGxpdCggJ11bJyApLAogICAgICAgIGtleXNfbGFzdCA9IGtleXMubGVuZ3RoIC0gMTsKICAgICAgCiAgICAgIC8vIElmIHRoZSBmaXJzdCBrZXlzIHBhcnQgY29udGFpbnMgWyBhbmQgdGhlIGxhc3QgZW5kcyB3aXRoIF0sIHRoZW4gW10KICAgICAgLy8gYXJlIGNvcnJlY3RseSBiYWxhbmNlZC4KICAgICAgaWYgKCAvXFsvLnRlc3QoIGtleXNbMF0gKSAmJiAvXF0kLy50ZXN0KCBrZXlzWyBrZXlzX2xhc3QgXSApICkgewogICAgICAgIC8vIFJlbW92ZSB0aGUgdHJhaWxpbmcgXSBmcm9tIHRoZSBsYXN0IGtleXMgcGFydC4KICAgICAgICBrZXlzWyBrZXlzX2xhc3QgXSA9IGtleXNbIGtleXNfbGFzdCBdLnJlcGxhY2UoIC9cXSQvLCAnJyApOwogICAgICAgIAogICAgICAgIC8vIFNwbGl0IGZpcnN0IGtleXMgcGFydCBpbnRvIHR3byBwYXJ0cyBvbiB0aGUgWyBhbmQgYWRkIHRoZW0gYmFjayBvbnRvCiAgICAgICAgLy8gdGhlIGJlZ2lubmluZyBvZiB0aGUga2V5cyBhcnJheS4KICAgICAgICBrZXlzID0ga2V5cy5zaGlmdCgpLnNwbGl0KCdbJykuY29uY2F0KCBrZXlzICk7CiAgICAgICAgCiAgICAgICAga2V5c19sYXN0ID0ga2V5cy5sZW5ndGggLSAxOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIEJhc2ljICdmb28nIHN0eWxlIGtleS4KICAgICAgICBrZXlzX2xhc3QgPSAwOwogICAgICB9CiAgICAgIAogICAgICAvLyBBcmUgd2UgZGVhbGluZyB3aXRoIGEgbmFtZT12YWx1ZSBwYWlyLCBvciBqdXN0IGEgbmFtZT8KICAgICAgaWYgKCBwYXJhbS5sZW5ndGggPT09IDIgKSB7CiAgICAgICAgdmFsID0gZGVjb2RlKCBwYXJhbVsxXSApOwogICAgICAgIAogICAgICAgIC8vIENvZXJjZSB2YWx1ZXMuCiAgICAgICAgaWYgKCBjb2VyY2UgKSB7CiAgICAgICAgICB2YWwgPSB2YWwgJiYgIWlzTmFOKHZhbCkgICAgICAgICAgICA/ICt2YWwgICAgICAgICAgICAgIC8vIG51bWJlcgogICAgICAgICAgICA6IHZhbCA9PT0gJ3VuZGVmaW5lZCcgICAgICAgICAgICAgPyB1bmRlZmluZWQgICAgICAgICAvLyB1bmRlZmluZWQKICAgICAgICAgICAgOiBjb2VyY2VfdHlwZXNbdmFsXSAhPT0gdW5kZWZpbmVkID8gY29lcmNlX3R5cGVzW3ZhbF0gLy8gdHJ1ZSwgZmFsc2UsIG51bGwKICAgICAgICAgICAgOiB2YWw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RyaW5nCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmICgga2V5c19sYXN0ICkgewogICAgICAgICAgLy8gQ29tcGxleCBrZXksIGJ1aWxkIGRlZXAgb2JqZWN0IHN0cnVjdHVyZSBiYXNlZCBvbiBhIGZldyBydWxlczoKICAgICAgICAgIC8vICogVGhlICdjdXInIHBvaW50ZXIgc3RhcnRzIGF0IHRoZSBvYmplY3QgdG9wLWxldmVsLgogICAgICAgICAgLy8gKiBbXSA9IGFycmF5IHB1c2ggKG4gaXMgc2V0IHRvIGFycmF5IGxlbmd0aCksIFtuXSA9IGFycmF5IGlmIG4gaXMgCiAgICAgICAgICAvLyAgIG51bWVyaWMsIG90aGVyd2lzZSBvYmplY3QuCiAgICAgICAgICAvLyAqIElmIGF0IHRoZSBsYXN0IGtleXMgcGFydCwgc2V0IHRoZSB2YWx1ZS4KICAgICAgICAgIC8vICogRm9yIGVhY2gga2V5cyBwYXJ0LCBpZiB0aGUgY3VycmVudCBsZXZlbCBpcyB1bmRlZmluZWQgY3JlYXRlIGFuCiAgICAgICAgICAvLyAgIG9iamVjdCBvciBhcnJheSBiYXNlZCBvbiB0aGUgdHlwZSBvZiB0aGUgbmV4dCBrZXlzIHBhcnQuCiAgICAgICAgICAvLyAqIE1vdmUgdGhlICdjdXInIHBvaW50ZXIgdG8gdGhlIG5leHQgbGV2ZWwuCiAgICAgICAgICAvLyAqIFJpbnNlICYgcmVwZWF0LgogICAgICAgICAgZm9yICggOyBpIDw9IGtleXNfbGFzdDsgaSsrICkgewogICAgICAgICAgICBrZXkgPSBrZXlzW2ldID09PSAnJyA/IGN1ci5sZW5ndGggOiBrZXlzW2ldOwogICAgICAgICAgICBjdXIgPSBjdXJba2V5XSA9IGkgPCBrZXlzX2xhc3QKICAgICAgICAgICAgICA/IGN1cltrZXldIHx8ICgga2V5c1tpKzFdICYmIGlzTmFOKCBrZXlzW2krMV0gKSA/IHt9IDogW10gKQogICAgICAgICAgICAgIDogdmFsOwogICAgICAgICAgfQogICAgICAgICAgCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIFNpbXBsZSBrZXksIGV2ZW4gc2ltcGxlciBydWxlcywgc2luY2Ugb25seSBzY2FsYXJzIGFuZCBzaGFsbG93CiAgICAgICAgICAvLyBhcnJheXMgYXJlIGFsbG93ZWQuCiAgICAgICAgICAKICAgICAgICAgIGlmICggJC5pc0FycmF5KCBvYmpba2V5XSApICkgewogICAgICAgICAgICAvLyB2YWwgaXMgYWxyZWFkeSBhbiBhcnJheSwgc28gcHVzaCBvbiB0aGUgbmV4dCB2YWx1ZS4KICAgICAgICAgICAgb2JqW2tleV0ucHVzaCggdmFsICk7CiAgICAgICAgICAgIAogICAgICAgICAgfSBlbHNlIGlmICggb2JqW2tleV0gIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgLy8gdmFsIGlzbid0IGFuIGFycmF5LCBidXQgc2luY2UgYSBzZWNvbmQgdmFsdWUgaGFzIGJlZW4gc3BlY2lmaWVkLAogICAgICAgICAgICAvLyBjb252ZXJ0IHZhbCBpbnRvIGFuIGFycmF5LgogICAgICAgICAgICBvYmpba2V5XSA9IFsgb2JqW2tleV0sIHZhbCBdOwogICAgICAgICAgICAKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIHZhbCBpcyBhIHNjYWxhci4KICAgICAgICAgICAgb2JqW2tleV0gPSB2YWw7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICB9IGVsc2UgaWYgKCBrZXkgKSB7CiAgICAgICAgLy8gTm8gdmFsdWUgd2FzIGRlZmluZWQsIHNvIHNldCBzb21ldGhpbmcgbWVhbmluZ2Z1bC4KICAgICAgICBvYmpba2V5XSA9IGNvZXJjZQogICAgICAgICAgPyB1bmRlZmluZWQKICAgICAgICAgIDogJyc7CiAgICAgIH0KICAgIH0pOwogICAgCiAgICByZXR1cm4gb2JqOwogIH07CiAgCiAgLy8gTWV0aG9kOiBqUXVlcnkuZGVwYXJhbS5xdWVyeXN0cmluZwogIC8vIAogIC8vIFBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgZnJvbSBhIFVSTCBvciB0aGUgY3VycmVudCB3aW5kb3cubG9jYXRpb24uaHJlZiwKICAvLyBkZXNlcmlhbGl6aW5nIGl0IGludG8gYW4gb2JqZWN0LCBvcHRpb25hbGx5IGNvZXJjaW5nIG51bWJlcnMsIGJvb2xlYW5zLAogIC8vIG51bGwgYW5kIHVuZGVmaW5lZCB2YWx1ZXMuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8gPiBqUXVlcnkuZGVwYXJhbS5xdWVyeXN0cmluZyggWyB1cmwgXSBbLCBjb2VyY2UgXSApOwogIC8vIAogIC8vIEFyZ3VtZW50czoKICAvLyAKICAvLyAgdXJsIC0gKFN0cmluZykgQW4gb3B0aW9uYWwgcGFyYW1zIHN0cmluZyBvciBVUkwgY29udGFpbmluZyBxdWVyeSBzdHJpbmcKICAvLyAgICBwYXJhbXMgdG8gYmUgcGFyc2VkLiBJZiB1cmwgaXMgb21pdHRlZCwgdGhlIGN1cnJlbnQKICAvLyAgICB3aW5kb3cubG9jYXRpb24uaHJlZiBpcyB1c2VkLgogIC8vICBjb2VyY2UgLSAoQm9vbGVhbikgSWYgdHJ1ZSwgY29lcmNlcyBhbnkgbnVtYmVycyBvciB0cnVlLCBmYWxzZSwgbnVsbCwgYW5kCiAgLy8gICAgdW5kZWZpbmVkIHRvIHRoZWlyIGFjdHVhbCB2YWx1ZS4gRGVmYXVsdHMgdG8gZmFsc2UgaWYgb21pdHRlZC4KICAvLyAKICAvLyBSZXR1cm5zOgogIC8vIAogIC8vICAoT2JqZWN0KSBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBkZXNlcmlhbGl6ZWQgcGFyYW1zIHN0cmluZy4KICAKICAvLyBNZXRob2Q6IGpRdWVyeS5kZXBhcmFtLmZyYWdtZW50CiAgLy8gCiAgLy8gUGFyc2UgdGhlIGZyYWdtZW50IChoYXNoKSBmcm9tIGEgVVJMIG9yIHRoZSBjdXJyZW50IHdpbmRvdy5sb2NhdGlvbi5ocmVmLAogIC8vIGRlc2VyaWFsaXppbmcgaXQgaW50byBhbiBvYmplY3QsIG9wdGlvbmFsbHkgY29lcmNpbmcgbnVtYmVycywgYm9vbGVhbnMsCiAgLy8gbnVsbCBhbmQgdW5kZWZpbmVkIHZhbHVlcy4KICAvLyAKICAvLyBVc2FnZToKICAvLyAKICAvLyA+IGpRdWVyeS5kZXBhcmFtLmZyYWdtZW50KCBbIHVybCBdIFssIGNvZXJjZSBdICk7CiAgLy8gCiAgLy8gQXJndW1lbnRzOgogIC8vIAogIC8vICB1cmwgLSAoU3RyaW5nKSBBbiBvcHRpb25hbCBwYXJhbXMgc3RyaW5nIG9yIFVSTCBjb250YWluaW5nIGZyYWdtZW50IChoYXNoKQogIC8vICAgIHBhcmFtcyB0byBiZSBwYXJzZWQuIElmIHVybCBpcyBvbWl0dGVkLCB0aGUgY3VycmVudCB3aW5kb3cubG9jYXRpb24uaHJlZgogIC8vICAgIGlzIHVzZWQuCiAgLy8gIGNvZXJjZSAtIChCb29sZWFuKSBJZiB0cnVlLCBjb2VyY2VzIGFueSBudW1iZXJzIG9yIHRydWUsIGZhbHNlLCBudWxsLCBhbmQKICAvLyAgICB1bmRlZmluZWQgdG8gdGhlaXIgYWN0dWFsIHZhbHVlLiBEZWZhdWx0cyB0byBmYWxzZSBpZiBvbWl0dGVkLgogIC8vIAogIC8vIFJldHVybnM6CiAgLy8gCiAgLy8gIChPYmplY3QpIEFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGRlc2VyaWFsaXplZCBwYXJhbXMgc3RyaW5nLgogIAogIGZ1bmN0aW9uIGpxX2RlcGFyYW1fc3ViKCBpc19mcmFnbWVudCwgdXJsX29yX3BhcmFtcywgY29lcmNlICkgewogICAgaWYgKCB1cmxfb3JfcGFyYW1zID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHVybF9vcl9wYXJhbXMgPT09ICdib29sZWFuJyApIHsKICAgICAgLy8gdXJsX29yX3BhcmFtcyBub3Qgc3BlY2lmaWVkLgogICAgICBjb2VyY2UgPSB1cmxfb3JfcGFyYW1zOwogICAgICB1cmxfb3JfcGFyYW1zID0ganFfcGFyYW1bIGlzX2ZyYWdtZW50ID8gc3RyX2ZyYWdtZW50IDogc3RyX3F1ZXJ5c3RyaW5nIF0oKTsKICAgIH0gZWxzZSB7CiAgICAgIHVybF9vcl9wYXJhbXMgPSBpc19zdHJpbmcoIHVybF9vcl9wYXJhbXMgKQogICAgICAgID8gdXJsX29yX3BhcmFtcy5yZXBsYWNlKCBpc19mcmFnbWVudCA/IHJlX3BhcmFtc19mcmFnbWVudCA6IHJlX3BhcmFtc19xdWVyeXN0cmluZywgJycgKQogICAgICAgIDogdXJsX29yX3BhcmFtczsKICAgIH0KICAgIAogICAgcmV0dXJuIGpxX2RlcGFyYW0oIHVybF9vcl9wYXJhbXMsIGNvZXJjZSApOwogIH07CiAgCiAganFfZGVwYXJhbVsgc3RyX3F1ZXJ5c3RyaW5nIF0gICAgICAgICAgICAgICAgICAgID0gY3VycnkoIGpxX2RlcGFyYW1fc3ViLCAwICk7CiAganFfZGVwYXJhbVsgc3RyX2ZyYWdtZW50IF0gPSBqcV9kZXBhcmFtX2ZyYWdtZW50ID0gY3VycnkoIGpxX2RlcGFyYW1fc3ViLCAxICk7CiAgCiAgLy8gU2VjdGlvbjogRWxlbWVudCBtYW5pcHVsYXRpb24KICAvLyAKICAvLyBNZXRob2Q6IGpRdWVyeS5lbGVtVXJsQXR0cgogIC8vIAogIC8vIEdldCB0aGUgaW50ZXJuYWwgIkRlZmF1bHQgVVJMIGF0dHJpYnV0ZSBwZXIgdGFnIiBsaXN0LCBvciBhdWdtZW50IHRoZSBsaXN0CiAgLy8gd2l0aCBhZGRpdGlvbmFsIHRhZy1hdHRyaWJ1dGUgcGFpcnMsIGluIGNhc2UgdGhlIGRlZmF1bHRzIGFyZSBpbnN1ZmZpY2llbnQuCiAgLy8gCiAgLy8gSW4gdGhlIDxqUXVlcnkuZm4ucXVlcnlzdHJpbmc+IGFuZCA8alF1ZXJ5LmZuLmZyYWdtZW50PiBtZXRob2RzLCB0aGlzIGxpc3QKICAvLyBpcyB1c2VkIHRvIGRldGVybWluZSB3aGljaCBhdHRyaWJ1dGUgY29udGFpbnMgdGhlIFVSTCB0byBiZSBtb2RpZmllZCwgaWYKICAvLyBhbiAiYXR0ciIgcGFyYW0gaXMgbm90IHNwZWNpZmllZC4KICAvLyAKICAvLyBEZWZhdWx0IFRhZy1BdHRyaWJ1dGUgTGlzdDoKICAvLyAKICAvLyAgYSAgICAgIC0gaHJlZgogIC8vICBiYXNlICAgLSBocmVmCiAgLy8gIGlmcmFtZSAtIHNyYwogIC8vICBpbWcgICAgLSBzcmMKICAvLyAgaW5wdXQgIC0gc3JjCiAgLy8gIGZvcm0gICAtIGFjdGlvbgogIC8vICBsaW5rICAgLSBocmVmCiAgLy8gIHNjcmlwdCAtIHNyYwogIC8vIAogIC8vIFVzYWdlOgogIC8vIAogIC8vID4galF1ZXJ5LmVsZW1VcmxBdHRyKCBbIHRhZ19hdHRyIF0gKTsKICAvLyAKICAvLyBBcmd1bWVudHM6CiAgLy8gCiAgLy8gIHRhZ19hdHRyIC0gKE9iamVjdCkgQW4gb2JqZWN0IGNvbnRhaW5pbmcgYSBsaXN0IG9mIHRhZyBuYW1lcyBhbmQgdGhlaXIKICAvLyAgICBhc3NvY2lhdGVkIGRlZmF1bHQgYXR0cmlidXRlIG5hbWVzIGluIHRoZSBmb3JtYXQgeyB0YWc6ICdhdHRyJywgLi4uIH0gdG8KICAvLyAgICBiZSBtZXJnZWQgaW50byB0aGUgaW50ZXJuYWwgdGFnLWF0dHJpYnV0ZSBsaXN0LgogIC8vIAogIC8vIFJldHVybnM6CiAgLy8gCiAgLy8gIChPYmplY3QpIEFuIG9iamVjdCBjb250YWluaW5nIGFsbCBzdG9yZWQgdGFnLWF0dHJpYnV0ZSB2YWx1ZXMuCiAgCiAgLy8gT25seSBkZWZpbmUgZnVuY3Rpb24gYW5kIHNldCBkZWZhdWx0cyBpZiBmdW5jdGlvbiBkb2Vzbid0IGFscmVhZHkgZXhpc3QsIGFzCiAgLy8gdGhlIHVybEludGVybmFsIHBsdWdpbiB3aWxsIHByb3ZpZGUgdGhpcyBtZXRob2QgYXMgd2VsbC4KICAkWyBzdHJfZWxlbVVybEF0dHIgXSB8fCAoJFsgc3RyX2VsZW1VcmxBdHRyIF0gPSBmdW5jdGlvbiggb2JqICkgewogICAgcmV0dXJuICQuZXh0ZW5kKCBlbGVtVXJsQXR0cl9jYWNoZSwgb2JqICk7CiAgfSkoewogICAgYTogc3RyX2hyZWYsCiAgICBiYXNlOiBzdHJfaHJlZiwKICAgIGlmcmFtZTogc3RyX3NyYywKICAgIGltZzogc3RyX3NyYywKICAgIGlucHV0OiBzdHJfc3JjLAogICAgZm9ybTogJ2FjdGlvbicsCiAgICBsaW5rOiBzdHJfaHJlZiwKICAgIHNjcmlwdDogc3RyX3NyYwogIH0pOwogIAogIGpxX2VsZW1VcmxBdHRyID0gJFsgc3RyX2VsZW1VcmxBdHRyIF07CiAgCiAgLy8gTWV0aG9kOiBqUXVlcnkuZm4ucXVlcnlzdHJpbmcKICAvLyAKICAvLyBVcGRhdGUgVVJMIGF0dHJpYnV0ZSBpbiBvbmUgb3IgbW9yZSBlbGVtZW50cywgbWVyZ2luZyB0aGUgY3VycmVudCBVUkwgKHdpdGgKICAvLyBvciB3aXRob3V0IHByZS1leGlzdGluZyBxdWVyeSBzdHJpbmcgcGFyYW1zKSBwbHVzIGFueSBwYXJhbXMgb2JqZWN0IG9yCiAgLy8gc3RyaW5nIGludG8gYSBuZXcgVVJMLCB3aGljaCBpcyB0aGVuIHNldCBpbnRvIHRoYXQgYXR0cmlidXRlLiBMaWtlCiAgLy8gPGpRdWVyeS5wYXJhbS5xdWVyeXN0cmluZyAoYnVpbGQgdXJsKT4sIGJ1dCBmb3IgYWxsIGVsZW1lbnRzIGluIGEgalF1ZXJ5CiAgLy8gY29sbGVjdGlvbi4KICAvLyAKICAvLyBVc2FnZToKICAvLyAKICAvLyA+IGpRdWVyeSgnc2VsZWN0b3InKS5xdWVyeXN0cmluZyggWyBhdHRyLCBdIHBhcmFtcyBbLCBtZXJnZV9tb2RlIF0gKTsKICAvLyAKICAvLyBBcmd1bWVudHM6CiAgLy8gCiAgLy8gIGF0dHIgLSAoU3RyaW5nKSBPcHRpb25hbCBuYW1lIG9mIGFuIGF0dHJpYnV0ZSB0aGF0IHdpbGwgY29udGFpbiBhIFVSTCB0bwogIC8vICAgIG1lcmdlIHBhcmFtcyBvciB1cmwgaW50by4gU2VlIDxqUXVlcnkuZWxlbVVybEF0dHI+IGZvciBhIGxpc3Qgb2YgZGVmYXVsdAogIC8vICAgIGF0dHJpYnV0ZXMuCiAgLy8gIHBhcmFtcyAtIChPYmplY3QpIEEgcGFyYW1zIG9iamVjdCB0byBiZSBtZXJnZWQgaW50byB0aGUgVVJMIGF0dHJpYnV0ZS4KICAvLyAgcGFyYW1zIC0gKFN0cmluZykgQSBVUkwgY29udGFpbmluZyBxdWVyeSBzdHJpbmcgcGFyYW1zLCBvciBwYXJhbXMgc3RyaW5nCiAgLy8gICAgdG8gYmUgbWVyZ2VkIGludG8gdGhlIFVSTCBhdHRyaWJ1dGUuCiAgLy8gIG1lcmdlX21vZGUgLSAoTnVtYmVyKSBNZXJnZSBiZWhhdmlvciBkZWZhdWx0cyB0byAwIGlmIG1lcmdlX21vZGUgaXMgbm90CiAgLy8gICAgc3BlY2lmaWVkLCBhbmQgaXMgYXMtZm9sbG93czoKICAvLyAgICAKICAvLyAgICAqIDA6IHBhcmFtcyBpbiB0aGUgcGFyYW1zIGFyZ3VtZW50IHdpbGwgb3ZlcnJpZGUgYW55IHBhcmFtcyBpbiBhdHRyIFVSTC4KICAvLyAgICAqIDE6IGFueSBwYXJhbXMgaW4gYXR0ciBVUkwgd2lsbCBvdmVycmlkZSBwYXJhbXMgaW4gdGhlIHBhcmFtcyBhcmd1bWVudC4KICAvLyAgICAqIDI6IHBhcmFtcyBhcmd1bWVudCB3aWxsIGNvbXBsZXRlbHkgcmVwbGFjZSBhbnkgcXVlcnkgc3RyaW5nIGluIGF0dHIKICAvLyAgICAgICAgIFVSTC4KICAvLyAKICAvLyBSZXR1cm5zOgogIC8vIAogIC8vICAoalF1ZXJ5KSBUaGUgaW5pdGlhbCBqUXVlcnkgY29sbGVjdGlvbiBvZiBlbGVtZW50cywgYnV0IHdpdGggbW9kaWZpZWQgVVJMCiAgLy8gIGF0dHJpYnV0ZSB2YWx1ZXMuCiAgCiAgLy8gTWV0aG9kOiBqUXVlcnkuZm4uZnJhZ21lbnQKICAvLyAKICAvLyBVcGRhdGUgVVJMIGF0dHJpYnV0ZSBpbiBvbmUgb3IgbW9yZSBlbGVtZW50cywgbWVyZ2luZyB0aGUgY3VycmVudCBVUkwgKHdpdGgKICAvLyBvciB3aXRob3V0IHByZS1leGlzdGluZyBmcmFnbWVudC9oYXNoIHBhcmFtcykgcGx1cyBhbnkgcGFyYW1zIG9iamVjdCBvcgogIC8vIHN0cmluZyBpbnRvIGEgbmV3IFVSTCwgd2hpY2ggaXMgdGhlbiBzZXQgaW50byB0aGF0IGF0dHJpYnV0ZS4gTGlrZQogIC8vIDxqUXVlcnkucGFyYW0uZnJhZ21lbnQgKGJ1aWxkIHVybCk+LCBidXQgZm9yIGFsbCBlbGVtZW50cyBpbiBhIGpRdWVyeQogIC8vIGNvbGxlY3Rpb24uCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8gPiBqUXVlcnkoJ3NlbGVjdG9yJykuZnJhZ21lbnQoIFsgYXR0ciwgXSBwYXJhbXMgWywgbWVyZ2VfbW9kZSBdICk7CiAgLy8gCiAgLy8gQXJndW1lbnRzOgogIC8vIAogIC8vICBhdHRyIC0gKFN0cmluZykgT3B0aW9uYWwgbmFtZSBvZiBhbiBhdHRyaWJ1dGUgdGhhdCB3aWxsIGNvbnRhaW4gYSBVUkwgdG8KICAvLyAgICBtZXJnZSBwYXJhbXMgaW50by4gU2VlIDxqUXVlcnkuZWxlbVVybEF0dHI+IGZvciBhIGxpc3Qgb2YgZGVmYXVsdAogIC8vICAgIGF0dHJpYnV0ZXMuCiAgLy8gIHBhcmFtcyAtIChPYmplY3QpIEEgcGFyYW1zIG9iamVjdCB0byBiZSBtZXJnZWQgaW50byB0aGUgVVJMIGF0dHJpYnV0ZS4KICAvLyAgcGFyYW1zIC0gKFN0cmluZykgQSBVUkwgY29udGFpbmluZyBmcmFnbWVudCAoaGFzaCkgcGFyYW1zLCBvciBwYXJhbXMKICAvLyAgICBzdHJpbmcgdG8gYmUgbWVyZ2VkIGludG8gdGhlIFVSTCBhdHRyaWJ1dGUuCiAgLy8gIG1lcmdlX21vZGUgLSAoTnVtYmVyKSBNZXJnZSBiZWhhdmlvciBkZWZhdWx0cyB0byAwIGlmIG1lcmdlX21vZGUgaXMgbm90CiAgLy8gICAgc3BlY2lmaWVkLCBhbmQgaXMgYXMtZm9sbG93czoKICAvLyAgICAKICAvLyAgICAqIDA6IHBhcmFtcyBpbiB0aGUgcGFyYW1zIGFyZ3VtZW50IHdpbGwgb3ZlcnJpZGUgYW55IHBhcmFtcyBpbiBhdHRyIFVSTC4KICAvLyAgICAqIDE6IGFueSBwYXJhbXMgaW4gYXR0ciBVUkwgd2lsbCBvdmVycmlkZSBwYXJhbXMgaW4gdGhlIHBhcmFtcyBhcmd1bWVudC4KICAvLyAgICAqIDI6IHBhcmFtcyBhcmd1bWVudCB3aWxsIGNvbXBsZXRlbHkgcmVwbGFjZSBhbnkgZnJhZ21lbnQgKGhhc2gpIGluIGF0dHIKICAvLyAgICAgICAgIFVSTC4KICAvLyAKICAvLyBSZXR1cm5zOgogIC8vIAogIC8vICAoalF1ZXJ5KSBUaGUgaW5pdGlhbCBqUXVlcnkgY29sbGVjdGlvbiBvZiBlbGVtZW50cywgYnV0IHdpdGggbW9kaWZpZWQgVVJMCiAgLy8gIGF0dHJpYnV0ZSB2YWx1ZXMuCiAgCiAgZnVuY3Rpb24ganFfZm5fc3ViKCBtb2RlLCBmb3JjZV9hdHRyLCBwYXJhbXMsIG1lcmdlX21vZGUgKSB7CiAgICBpZiAoICFpc19zdHJpbmcoIHBhcmFtcyApICYmIHR5cGVvZiBwYXJhbXMgIT09ICdvYmplY3QnICkgewogICAgICAvLyBmb3JjZV9hdHRyIG5vdCBzcGVjaWZpZWQuCiAgICAgIG1lcmdlX21vZGUgPSBwYXJhbXM7CiAgICAgIHBhcmFtcyA9IGZvcmNlX2F0dHI7CiAgICAgIGZvcmNlX2F0dHIgPSB1bmRlZmluZWQ7CiAgICB9CiAgICAKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsKICAgICAgdmFyIHRoYXQgPSAkKHRoaXMpLAogICAgICAgIAogICAgICAgIC8vIEdldCBhdHRyaWJ1dGUgc3BlY2lmaWVkLCBvciBkZWZhdWx0IHNwZWNpZmllZCB2aWEgJC5lbGVtVXJsQXR0ci4KICAgICAgICBhdHRyID0gZm9yY2VfYXR0ciB8fCBqcV9lbGVtVXJsQXR0cigpWyAoIHRoaXMubm9kZU5hbWUgfHwgJycgKS50b0xvd2VyQ2FzZSgpIF0gfHwgJycsCiAgICAgICAgCiAgICAgICAgLy8gR2V0IFVSTCB2YWx1ZS4KICAgICAgICB1cmwgPSBhdHRyICYmIHRoYXQuYXR0ciggYXR0ciApIHx8ICcnOwogICAgICAKICAgICAgLy8gVXBkYXRlIGF0dHJpYnV0ZSB3aXRoIG5ldyBVUkwuCiAgICAgIHRoYXQuYXR0ciggYXR0ciwganFfcGFyYW1bIG1vZGUgXSggdXJsLCBwYXJhbXMsIG1lcmdlX21vZGUgKSApOwogICAgfSk7CiAgICAKICB9OwogIAogICQuZm5bIHN0cl9xdWVyeXN0cmluZyBdID0gY3VycnkoIGpxX2ZuX3N1Yiwgc3RyX3F1ZXJ5c3RyaW5nICk7CiAgJC5mblsgc3RyX2ZyYWdtZW50IF0gICAgPSBjdXJyeSgganFfZm5fc3ViLCBzdHJfZnJhZ21lbnQgKTsKICAKICAvLyBTZWN0aW9uOiBIaXN0b3J5LCBoYXNoY2hhbmdlIGV2ZW50CiAgLy8gCiAgLy8gTWV0aG9kOiBqUXVlcnkuYmJxLnB1c2hTdGF0ZQogIC8vIAogIC8vIEFkZHMgYSAnc3RhdGUnIGludG8gdGhlIGJyb3dzZXIgaGlzdG9yeSBhdCB0aGUgY3VycmVudCBwb3NpdGlvbiwgc2V0dGluZwogIC8vIGxvY2F0aW9uLmhhc2ggYW5kIHRyaWdnZXJpbmcgYW55IGJvdW5kIDxoYXNoY2hhbmdlIGV2ZW50PiBjYWxsYmFja3MKICAvLyAocHJvdmlkZWQgdGhlIG5ldyBzdGF0ZSBpcyBkaWZmZXJlbnQgdGhhbiB0aGUgcHJldmlvdXMgc3RhdGUpLgogIC8vIAogIC8vIElmIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkLCBhbiBlbXB0eSBzdGF0ZSBpcyBjcmVhdGVkLCB3aGljaCBpcyBqdXN0IGEKICAvLyBzaG9ydGN1dCBmb3IgalF1ZXJ5LmJicS5wdXNoU3RhdGUoIHt9LCAyICkuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8gPiBqUXVlcnkuYmJxLnB1c2hTdGF0ZSggWyBwYXJhbXMgWywgbWVyZ2VfbW9kZSBdIF0gKTsKICAvLyAKICAvLyBBcmd1bWVudHM6CiAgLy8gCiAgLy8gIHBhcmFtcyAtIChTdHJpbmcpIEEgc2VyaWFsaXplZCBwYXJhbXMgc3RyaW5nIG9yIGEgaGFzaCBzdHJpbmcgYmVnaW5uaW5nCiAgLy8gICAgd2l0aCAjIHRvIG1lcmdlIGludG8gbG9jYXRpb24uaGFzaC4KICAvLyAgcGFyYW1zIC0gKE9iamVjdCkgQSBwYXJhbXMgb2JqZWN0IHRvIG1lcmdlIGludG8gbG9jYXRpb24uaGFzaC4KICAvLyAgbWVyZ2VfbW9kZSAtIChOdW1iZXIpIE1lcmdlIGJlaGF2aW9yIGRlZmF1bHRzIHRvIDAgaWYgbWVyZ2VfbW9kZSBpcyBub3QKICAvLyAgICBzcGVjaWZpZWQgKHVubGVzcyBhIGhhc2ggc3RyaW5nIGJlZ2lubmluZyB3aXRoICMgaXMgc3BlY2lmaWVkLCBpbiB3aGljaAogIC8vICAgIGNhc2UgbWVyZ2UgYmVoYXZpb3IgZGVmYXVsdHMgdG8gMiksIGFuZCBpcyBhcy1mb2xsb3dzOgogIC8vIAogIC8vICAgICogMDogcGFyYW1zIGluIHRoZSBwYXJhbXMgYXJndW1lbnQgd2lsbCBvdmVycmlkZSBhbnkgcGFyYW1zIGluIHRoZQogIC8vICAgICAgICAgY3VycmVudCBzdGF0ZS4KICAvLyAgICAqIDE6IGFueSBwYXJhbXMgaW4gdGhlIGN1cnJlbnQgc3RhdGUgd2lsbCBvdmVycmlkZSBwYXJhbXMgaW4gdGhlIHBhcmFtcwogIC8vICAgICAgICAgYXJndW1lbnQuCiAgLy8gICAgKiAyOiBwYXJhbXMgYXJndW1lbnQgd2lsbCBjb21wbGV0ZWx5IHJlcGxhY2UgY3VycmVudCBzdGF0ZS4KICAvLyAKICAvLyBSZXR1cm5zOgogIC8vIAogIC8vICBOb3RoaW5nLgogIC8vIAogIC8vIEFkZGl0aW9uYWwgTm90ZXM6CiAgLy8gCiAgLy8gICogU2V0dGluZyBhbiBlbXB0eSBzdGF0ZSBtYXkgY2F1c2UgdGhlIGJyb3dzZXIgdG8gc2Nyb2xsLgogIC8vICAqIFVubGlrZSB0aGUgZnJhZ21lbnQgYW5kIHF1ZXJ5c3RyaW5nIG1ldGhvZHMsIGlmIGEgaGFzaCBzdHJpbmcgYmVnaW5uaW5nCiAgLy8gICAgd2l0aCAjIGlzIHNwZWNpZmllZCBhcyB0aGUgcGFyYW1zIGFncnVtZW50LCBtZXJnZV9tb2RlIGRlZmF1bHRzIHRvIDIuCiAgCiAganFfYmJxLnB1c2hTdGF0ZSA9IGpxX2JicV9wdXNoU3RhdGUgPSBmdW5jdGlvbiggcGFyYW1zLCBtZXJnZV9tb2RlICkgewogICAgaWYgKCBpc19zdHJpbmcoIHBhcmFtcyApICYmIC9eIy8udGVzdCggcGFyYW1zICkgJiYgbWVyZ2VfbW9kZSA9PT0gdW5kZWZpbmVkICkgewogICAgICAvLyBQYXJhbXMgc3RyaW5nIGJlZ2lucyB3aXRoICMgYW5kIG1lcmdlX21vZGUgbm90IHNwZWNpZmllZCwgc28gY29tcGxldGVseQogICAgICAvLyBvdmVyd3JpdGUgd2luZG93LmxvY2F0aW9uLmhhc2guCiAgICAgIG1lcmdlX21vZGUgPSAyOwogICAgfQogICAgCiAgICB2YXIgaGFzX2FyZ3MgPSBwYXJhbXMgIT09IHVuZGVmaW5lZCwKICAgICAgLy8gTWVyZ2UgcGFyYW1zIGludG8gd2luZG93LmxvY2F0aW9uIHVzaW5nICQucGFyYW0uZnJhZ21lbnQuCiAgICAgIHVybCA9IGpxX3BhcmFtX2ZyYWdtZW50KCBsb2NhdGlvbi5ocmVmLAogICAgICAgIGhhc19hcmdzID8gcGFyYW1zIDoge30sIGhhc19hcmdzID8gbWVyZ2VfbW9kZSA6IDIgKTsKICAgIAogICAgLy8gU2V0IG5ldyB3aW5kb3cubG9jYXRpb24uaHJlZi4gTm90ZSB0aGF0IFNhZmFyaSAzICYgQ2hyb21lIGJhcmYgb24KICAgIC8vIGxvY2F0aW9uLmhhc2ggPSAnIycgc28gdGhlIGVudGlyZSBVUkwgaXMgc2V0LgogICAgbG9jYXRpb24uaHJlZiA9IHVybDsKICB9OwogIAogIC8vIE1ldGhvZDogalF1ZXJ5LmJicS5nZXRTdGF0ZQogIC8vIAogIC8vIFJldHJpZXZlcyB0aGUgY3VycmVudCAnc3RhdGUnIGZyb20gdGhlIGJyb3dzZXIgaGlzdG9yeSwgcGFyc2luZwogIC8vIGxvY2F0aW9uLmhhc2ggZm9yIGEgc3BlY2lmaWMga2V5IG9yIHJldHVybmluZyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUKICAvLyBlbnRpcmUgc3RhdGUsIG9wdGlvbmFsbHkgY29lcmNpbmcgbnVtYmVycywgYm9vbGVhbnMsIG51bGwgYW5kIHVuZGVmaW5lZAogIC8vIHZhbHVlcy4KICAvLyAKICAvLyBVc2FnZToKICAvLyAKICAvLyA+IGpRdWVyeS5iYnEuZ2V0U3RhdGUoIFsga2V5IF0gWywgY29lcmNlIF0gKTsKICAvLyAKICAvLyBBcmd1bWVudHM6CiAgLy8gCiAgLy8gIGtleSAtIChTdHJpbmcpIEFuIG9wdGlvbmFsIHN0YXRlIGtleSBmb3Igd2hpY2ggdG8gcmV0dXJuIGEgdmFsdWUuCiAgLy8gIGNvZXJjZSAtIChCb29sZWFuKSBJZiB0cnVlLCBjb2VyY2VzIGFueSBudW1iZXJzIG9yIHRydWUsIGZhbHNlLCBudWxsLCBhbmQKICAvLyAgICB1bmRlZmluZWQgdG8gdGhlaXIgYWN0dWFsIHZhbHVlLiBEZWZhdWx0cyB0byBmYWxzZS4KICAvLyAKICAvLyBSZXR1cm5zOgogIC8vIAogIC8vICAoQW55dGhpbmcpIElmIGtleSBpcyBwYXNzZWQsIHJldHVybnMgdGhlIHZhbHVlIGNvcnJlc3BvbmRpbmcgd2l0aCB0aGF0IGtleQogIC8vICAgIGluIHRoZSBsb2NhdGlvbi5oYXNoICdzdGF0ZScsIG9yIHVuZGVmaW5lZC4gSWYgbm90LCBhbiBvYmplY3QKICAvLyAgICByZXByZXNlbnRpbmcgdGhlIGVudGlyZSAnc3RhdGUnIGlzIHJldHVybmVkLgogIAogIGpxX2JicS5nZXRTdGF0ZSA9IGpxX2JicV9nZXRTdGF0ZSA9IGZ1bmN0aW9uKCBrZXksIGNvZXJjZSApIHsKICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Yga2V5ID09PSAnYm9vbGVhbicKICAgICAgPyBqcV9kZXBhcmFtX2ZyYWdtZW50KCBrZXkgKSAvLyAna2V5JyByZWFsbHkgbWVhbnMgJ2NvZXJjZScgaGVyZQogICAgICA6IGpxX2RlcGFyYW1fZnJhZ21lbnQoIGNvZXJjZSApWyBrZXkgXTsKICB9OwogIAogIC8vIE1ldGhvZDogalF1ZXJ5LmJicS5yZW1vdmVTdGF0ZQogIC8vIAogIC8vIFJlbW92ZSBvbmUgb3IgbW9yZSBrZXlzIGZyb20gdGhlIGN1cnJlbnQgYnJvd3NlciBoaXN0b3J5ICdzdGF0ZScsIGNyZWF0aW5nCiAgLy8gYSBuZXcgc3RhdGUsIHNldHRpbmcgbG9jYXRpb24uaGFzaCBhbmQgdHJpZ2dlcmluZyBhbnkgYm91bmQKICAvLyA8aGFzaGNoYW5nZSBldmVudD4gY2FsbGJhY2tzIChwcm92aWRlZCB0aGUgbmV3IHN0YXRlIGlzIGRpZmZlcmVudCB0aGFuCiAgLy8gdGhlIHByZXZpb3VzIHN0YXRlKS4KICAvLyAKICAvLyBJZiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCwgYW4gZW1wdHkgc3RhdGUgaXMgY3JlYXRlZCwgd2hpY2ggaXMganVzdCBhCiAgLy8gc2hvcnRjdXQgZm9yIGpRdWVyeS5iYnEucHVzaFN0YXRlKCB7fSwgMiApLgogIC8vIAogIC8vIFVzYWdlOgogIC8vIAogIC8vID4galF1ZXJ5LmJicS5yZW1vdmVTdGF0ZSggWyBrZXkgWywga2V5IC4uLiBdIF0gKTsKICAvLyAKICAvLyBBcmd1bWVudHM6CiAgLy8gCiAgLy8gIGtleSAtIChTdHJpbmcpIE9uZSBvciBtb3JlIGtleSB2YWx1ZXMgdG8gcmVtb3ZlIGZyb20gdGhlIGN1cnJlbnQgc3RhdGUsCiAgLy8gICAgcGFzc2VkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzLgogIC8vICBrZXkgLSAoQXJyYXkpIEEgc2luZ2xlIGFycmF5IGFyZ3VtZW50IHRoYXQgY29udGFpbnMgYSBsaXN0IG9mIGtleSB2YWx1ZXMKICAvLyAgICB0byByZW1vdmUgZnJvbSB0aGUgY3VycmVudCBzdGF0ZS4KICAvLyAKICAvLyBSZXR1cm5zOgogIC8vIAogIC8vICBOb3RoaW5nLgogIC8vIAogIC8vIEFkZGl0aW9uYWwgTm90ZXM6CiAgLy8gCiAgLy8gICogU2V0dGluZyBhbiBlbXB0eSBzdGF0ZSBtYXkgY2F1c2UgdGhlIGJyb3dzZXIgdG8gc2Nyb2xsLgogIAogIGpxX2JicS5yZW1vdmVTdGF0ZSA9IGZ1bmN0aW9uKCBhcnIgKSB7CiAgICB2YXIgc3RhdGUgPSB7fTsKICAgIAogICAgLy8gSWYgb25lIG9yIG1vcmUgYXJndW1lbnRzIGlzIHBhc3NlZC4uCiAgICBpZiAoIGFyciAhPT0gdW5kZWZpbmVkICkgewogICAgICAKICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0YXRlLgogICAgICBzdGF0ZSA9IGpxX2JicV9nZXRTdGF0ZSgpOwogICAgICAKICAgICAgLy8gRm9yIGVhY2ggcGFzc2VkIGtleSwgZGVsZXRlIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IGZyb20gdGhlIGN1cnJlbnQKICAgICAgLy8gc3RhdGUuCiAgICAgICQuZWFjaCggJC5pc0FycmF5KCBhcnIgKSA/IGFyciA6IGFyZ3VtZW50cywgZnVuY3Rpb24oaSx2KXsKICAgICAgICBkZWxldGUgc3RhdGVbIHYgXTsKICAgICAgfSk7CiAgICB9CiAgICAKICAgIC8vIFNldCB0aGUgc3RhdGUsIGNvbXBsZXRlbHkgb3ZlcnJpZGluZyBhbnkgZXhpc3Rpbmcgc3RhdGUuCiAgICBqcV9iYnFfcHVzaFN0YXRlKCBzdGF0ZSwgMiApOwogIH07CiAgCiAgLy8gRXZlbnQ6IGhhc2hjaGFuZ2UgZXZlbnQgKEJCUSkKICAvLyAKICAvLyBVc2FnZSBpbiBqUXVlcnkgMS40IGFuZCBuZXdlcjoKICAvLyAKICAvLyBJbiBqUXVlcnkgMS40IGFuZCBuZXdlciwgdGhlIGV2ZW50IG9iamVjdCBwYXNzZWQgaW50byBhbnkgaGFzaGNoYW5nZSBldmVudAogIC8vIGNhbGxiYWNrIGlzIGF1Z21lbnRlZCB3aXRoIGEgY29weSBvZiB0aGUgbG9jYXRpb24uaGFzaCBmcmFnbWVudCBhdCB0aGUgdGltZQogIC8vIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGFzIGl0cyBldmVudC5mcmFnbWVudCBwcm9wZXJ0eS4gSW4gYWRkaXRpb24sIHRoZQogIC8vIGV2ZW50LmdldFN0YXRlIG1ldGhvZCBvcGVyYXRlcyBvbiB0aGlzIHByb3BlcnR5IChpbnN0ZWFkIG9mIGxvY2F0aW9uLmhhc2gpCiAgLy8gd2hpY2ggYWxsb3dzIHRoaXMgZnJhZ21lbnQtYXMtYS1zdGF0ZSB0byBiZSByZWZlcmVuY2VkIGxhdGVyLCBldmVuIGFmdGVyCiAgLy8gd2luZG93LmxvY2F0aW9uIG1heSBoYXZlIGNoYW5nZWQuCiAgLy8gCiAgLy8gTm90ZSB0aGF0IGV2ZW50LmZyYWdtZW50IGFuZCBldmVudC5nZXRTdGF0ZSBhcmUgbm90IGRlZmluZWQgYWNjb3JkaW5nIHRvCiAgLy8gVzNDIChvciBhbnkgb3RoZXIpIHNwZWNpZmljYXRpb24sIGJ1dCB3aWxsIHN0aWxsIGJlIGF2YWlsYWJsZSB3aGV0aGVyIG9yCiAgLy8gbm90IHRoZSBoYXNoY2hhbmdlIGV2ZW50IGV4aXN0cyBuYXRpdmVseSBpbiB0aGUgYnJvd3NlciwgYmVjYXVzZSBvZiB0aGUKICAvLyB1dGlsaXR5IHRoZXkgcHJvdmlkZS4KICAvLyAKICAvLyBUaGUgZXZlbnQuZnJhZ21lbnQgcHJvcGVydHkgY29udGFpbnMgdGhlIG91dHB1dCBvZiA8alF1ZXJ5LnBhcmFtLmZyYWdtZW50PgogIC8vIGFuZCB0aGUgZXZlbnQuZ2V0U3RhdGUgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gdGhlIDxqUXVlcnkuYmJxLmdldFN0YXRlPgogIC8vIG1ldGhvZC4KICAvLyAKICAvLyA+ICQod2luZG93KS5iaW5kKCAnaGFzaGNoYW5nZScsIGZ1bmN0aW9uKCBldmVudCApIHsKICAvLyA+ICAgdmFyIGhhc2hfc3RyID0gZXZlbnQuZnJhZ21lbnQsCiAgLy8gPiAgICAgcGFyYW1fb2JqID0gZXZlbnQuZ2V0U3RhdGUoKSwKICAvLyA+ICAgICBwYXJhbV92YWwgPSBldmVudC5nZXRTdGF0ZSggJ3BhcmFtX25hbWUnICksCiAgLy8gPiAgICAgcGFyYW1fdmFsX2NvZXJjZWQgPSBldmVudC5nZXRTdGF0ZSggJ3BhcmFtX25hbWUnLCB0cnVlICk7CiAgLy8gPiAgIC4uLgogIC8vID4gfSk7CiAgLy8gCiAgLy8gVXNhZ2UgaW4galF1ZXJ5IDEuMy4yOgogIC8vIAogIC8vIEluIGpRdWVyeSAxLjMuMiwgdGhlIGV2ZW50IG9iamVjdCBjYW5ub3QgdG8gYmUgYXVnbWVudGVkIGFzIGluIGpRdWVyeSAxLjQrLAogIC8vIHNvIHRoZSBmcmFnbWVudCBzdGF0ZSBpc24ndCBib3VuZCB0byB0aGUgZXZlbnQgb2JqZWN0IGFuZCBtdXN0IGluc3RlYWQgYmUKICAvLyBwYXJzZWQgdXNpbmcgdGhlIDxqUXVlcnkucGFyYW0uZnJhZ21lbnQ+IGFuZCA8alF1ZXJ5LmJicS5nZXRTdGF0ZT4gbWV0aG9kcy4KICAvLyAKICAvLyA+ICQod2luZG93KS5iaW5kKCAnaGFzaGNoYW5nZScsIGZ1bmN0aW9uKCBldmVudCApIHsKICAvLyA+ICAgdmFyIGhhc2hfc3RyID0gJC5wYXJhbS5mcmFnbWVudCgpLAogIC8vID4gICAgIHBhcmFtX29iaiA9ICQuYmJxLmdldFN0YXRlKCksCiAgLy8gPiAgICAgcGFyYW1fdmFsID0gJC5iYnEuZ2V0U3RhdGUoICdwYXJhbV9uYW1lJyApLAogIC8vID4gICAgIHBhcmFtX3ZhbF9jb2VyY2VkID0gJC5iYnEuZ2V0U3RhdGUoICdwYXJhbV9uYW1lJywgdHJ1ZSApOwogIC8vID4gICAuLi4KICAvLyA+IH0pOwogIC8vIAogIC8vIEFkZGl0aW9uYWwgTm90ZXM6CiAgLy8gCiAgLy8gKiBEdWUgdG8gY2hhbmdlcyBpbiB0aGUgc3BlY2lhbCBldmVudHMgQVBJLCBqUXVlcnkgQkJRIHYxLjIgb3IgbmV3ZXIgaXMKICAvLyAgIHJlcXVpcmVkIHRvIGVuYWJsZSB0aGUgYXVnbWVudGVkIGV2ZW50IG9iamVjdCBpbiBqUXVlcnkgMS40LjIgYW5kIG5ld2VyLgogIC8vICogU2VlIDxqUXVlcnkgaGFzaGNoYW5nZSBldmVudD4gZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24uCiAgCiAgc3BlY2lhbFsgc3RyX2hhc2hjaGFuZ2UgXSA9ICQuZXh0ZW5kKCBzcGVjaWFsWyBzdHJfaGFzaGNoYW5nZSBdLCB7CiAgICAKICAgIC8vIEF1Z21lbnRpbmcgdGhlIGV2ZW50IG9iamVjdCB3aXRoIHRoZSAuZnJhZ21lbnQgcHJvcGVydHkgYW5kIC5nZXRTdGF0ZQogICAgLy8gbWV0aG9kIHJlcXVpcmVzIGpRdWVyeSAxLjQgb3IgbmV3ZXIuIE5vdGU6IHdpdGggMS4zLjIsIGV2ZXJ5dGhpbmcgd2lsbAogICAgLy8gd29yaywgYnV0IHRoZSBldmVudCB3b24ndCBiZSBhdWdtZW50ZWQpCiAgICBhZGQ6IGZ1bmN0aW9uKCBoYW5kbGVPYmogKSB7CiAgICAgIHZhciBvbGRfaGFuZGxlcjsKICAgICAgCiAgICAgIGZ1bmN0aW9uIG5ld19oYW5kbGVyKGUpIHsKICAgICAgICAvLyBlLmZyYWdtZW50IGlzIHNldCB0byB0aGUgdmFsdWUgb2YgbG9jYXRpb24uaGFzaCAod2l0aCBhbnkgbGVhZGluZyAjCiAgICAgICAgLy8gcmVtb3ZlZCkgYXQgdGhlIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC4KICAgICAgICB2YXIgaGFzaCA9IGVbIHN0cl9mcmFnbWVudCBdID0ganFfcGFyYW1fZnJhZ21lbnQoKTsKICAgICAgICAKICAgICAgICAvLyBlLmdldFN0YXRlKCkgd29ya3MganVzdCBsaWtlICQuYmJxLmdldFN0YXRlKCksIGJ1dCB1c2VzIHRoZQogICAgICAgIC8vIGUuZnJhZ21lbnQgcHJvcGVydHkgc3RvcmVkIG9uIHRoZSBldmVudCBvYmplY3QuCiAgICAgICAgZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uKCBrZXksIGNvZXJjZSApIHsKICAgICAgICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Yga2V5ID09PSAnYm9vbGVhbicKICAgICAgICAgICAgPyBqcV9kZXBhcmFtKCBoYXNoLCBrZXkgKSAvLyAna2V5JyByZWFsbHkgbWVhbnMgJ2NvZXJjZScgaGVyZQogICAgICAgICAgICA6IGpxX2RlcGFyYW0oIGhhc2gsIGNvZXJjZSApWyBrZXkgXTsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIG9sZF9oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKICAgICAgfTsKICAgICAgCiAgICAgIC8vIFRoaXMgbWF5IHNlZW0gYSBsaXR0bGUgY29tcGxpY2F0ZWQsIGJ1dCBpdCBub3JtYWxpemVzIHRoZSBzcGVjaWFsIGV2ZW50CiAgICAgIC8vIC5hZGQgbWV0aG9kIGJldHdlZW4galF1ZXJ5IDEuNC8xLjQuMSBhbmQgMS40LjIrCiAgICAgIGlmICggJC5pc0Z1bmN0aW9uKCBoYW5kbGVPYmogKSApIHsKICAgICAgICAvLyAxLjQsIDEuNC4xCiAgICAgICAgb2xkX2hhbmRsZXIgPSBoYW5kbGVPYmo7CiAgICAgICAgcmV0dXJuIG5ld19oYW5kbGVyOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIDEuNC4yKwogICAgICAgIG9sZF9oYW5kbGVyID0gaGFuZGxlT2JqLmhhbmRsZXI7CiAgICAgICAgaGFuZGxlT2JqLmhhbmRsZXIgPSBuZXdfaGFuZGxlcjsKICAgICAgfQogICAgfQogICAgCiAgfSk7CiAgCn0pKGpRdWVyeSx0aGlzKTsKCi8qIQogKiBqUXVlcnkgaGFzaGNoYW5nZSBldmVudCAtIHYxLjMgLSA3LzIxLzIwMTAKICogaHR0cDovL2JlbmFsbWFuLmNvbS9wcm9qZWN0cy9qcXVlcnktaGFzaGNoYW5nZS1wbHVnaW4vCiAqIAogKiBDb3B5cmlnaHQgKGMpIDIwMTAgIkNvd2JveSIgQmVuIEFsbWFuCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzLgogKiBodHRwOi8vYmVuYWxtYW4uY29tL2Fib3V0L2xpY2Vuc2UvCiAqLwoKLy8gU2NyaXB0OiBqUXVlcnkgaGFzaGNoYW5nZSBldmVudAovLwovLyAqVmVyc2lvbjogMS4zLCBMYXN0IHVwZGF0ZWQ6IDcvMjEvMjAxMCoKLy8gCi8vIFByb2plY3QgSG9tZSAtIGh0dHA6Ly9iZW5hbG1hbi5jb20vcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UtcGx1Z2luLwovLyBHaXRIdWIgICAgICAgLSBodHRwOi8vZ2l0aHViLmNvbS9jb3dib3kvanF1ZXJ5LWhhc2hjaGFuZ2UvCi8vIFNvdXJjZSAgICAgICAtIGh0dHA6Ly9naXRodWIuY29tL2Nvd2JveS9qcXVlcnktaGFzaGNoYW5nZS9yYXcvbWFzdGVyL2pxdWVyeS5iYS1oYXNoY2hhbmdlLmpzCi8vIChNaW5pZmllZCkgICAtIGh0dHA6Ly9naXRodWIuY29tL2Nvd2JveS9qcXVlcnktaGFzaGNoYW5nZS9yYXcvbWFzdGVyL2pxdWVyeS5iYS1oYXNoY2hhbmdlLm1pbi5qcyAoMC44a2IgZ3ppcHBlZCkKLy8gCi8vIEFib3V0OiBMaWNlbnNlCi8vIAovLyBDb3B5cmlnaHQgKGMpIDIwMTAgIkNvd2JveSIgQmVuIEFsbWFuLAovLyBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgYW5kIEdQTCBsaWNlbnNlcy4KLy8gaHR0cDovL2JlbmFsbWFuLmNvbS9hYm91dC9saWNlbnNlLwovLyAKLy8gQWJvdXQ6IEV4YW1wbGVzCi8vIAovLyBUaGVzZSB3b3JraW5nIGV4YW1wbGVzLCBjb21wbGV0ZSB3aXRoIGZ1bGx5IGNvbW1lbnRlZCBjb2RlLCBpbGx1c3RyYXRlIGEgZmV3Ci8vIHdheXMgaW4gd2hpY2ggdGhpcyBwbHVnaW4gY2FuIGJlIHVzZWQuCi8vIAovLyBoYXNoY2hhbmdlIGV2ZW50IC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlL2V4YW1wbGVzL2hhc2hjaGFuZ2UvCi8vIGRvY3VtZW50LmRvbWFpbiAtIGh0dHA6Ly9iZW5hbG1hbi5jb20vY29kZS9wcm9qZWN0cy9qcXVlcnktaGFzaGNoYW5nZS9leGFtcGxlcy9kb2N1bWVudF9kb21haW4vCi8vIAovLyBBYm91dDogU3VwcG9ydCBhbmQgVGVzdGluZwovLyAKLy8gSW5mb3JtYXRpb24gYWJvdXQgd2hhdCB2ZXJzaW9uIG9yIHZlcnNpb25zIG9mIGpRdWVyeSB0aGlzIHBsdWdpbiBoYXMgYmVlbgovLyB0ZXN0ZWQgd2l0aCwgd2hhdCBicm93c2VycyBpdCBoYXMgYmVlbiB0ZXN0ZWQgaW4sIGFuZCB3aGVyZSB0aGUgdW5pdCB0ZXN0cwovLyByZXNpZGUgKHNvIHlvdSBjYW4gdGVzdCBpdCB5b3Vyc2VsZikuCi8vIAovLyBqUXVlcnkgVmVyc2lvbnMgLSAxLjIuNiwgMS4zLjIsIDEuNC4xLCAxLjQuMgovLyBCcm93c2VycyBUZXN0ZWQgLSBJbnRlcm5ldCBFeHBsb3JlciA2LTgsIEZpcmVmb3ggMi00LCBDaHJvbWUgNS02LCBTYWZhcmkgMy4yLTUsCi8vICAgICAgICAgICAgICAgICAgIE9wZXJhIDkuNi0xMC42MCwgaVBob25lIDMuMSwgQW5kcm9pZCAxLjYtMi4yLCBCbGFja0JlcnJ5IDQuNi01LgovLyBVbml0IFRlc3RzICAgICAgLSBodHRwOi8vYmVuYWxtYW4uY29tL2NvZGUvcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UvdW5pdC8KLy8gCi8vIEFib3V0OiBLbm93biBpc3N1ZXMKLy8gCi8vIFdoaWxlIHRoaXMgalF1ZXJ5IGhhc2hjaGFuZ2UgZXZlbnQgaW1wbGVtZW50YXRpb24gaXMgcXVpdGUgc3RhYmxlIGFuZAovLyByb2J1c3QsIHRoZXJlIGFyZSBhIGZldyB1bmZvcnR1bmF0ZSBicm93c2VyIGJ1Z3Mgc3Vycm91bmRpbmcgZXhwZWN0ZWQKLy8gaGFzaGNoYW5nZSBldmVudC1iYXNlZCBiZWhhdmlvcnMsIGluZGVwZW5kZW50IG9mIGFueSBKYXZhU2NyaXB0Ci8vIHdpbmRvdy5vbmhhc2hjaGFuZ2UgYWJzdHJhY3Rpb24uIFNlZSB0aGUgZm9sbG93aW5nIGV4YW1wbGVzIGZvciBtb3JlCi8vIGluZm9ybWF0aW9uOgovLyAKLy8gQ2hyb21lOiBCYWNrIEJ1dHRvbiAtIGh0dHA6Ly9iZW5hbG1hbi5jb20vY29kZS9wcm9qZWN0cy9qcXVlcnktaGFzaGNoYW5nZS9leGFtcGxlcy9idWctY2hyb21lLWJhY2stYnV0dG9uLwovLyBGaXJlZm94OiBSZW1vdGUgWE1MSHR0cFJlcXVlc3QgLSBodHRwOi8vYmVuYWxtYW4uY29tL2NvZGUvcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UvZXhhbXBsZXMvYnVnLWZpcmVmb3gtcmVtb3RlLXhoci8KLy8gV2ViS2l0OiBCYWNrIEJ1dHRvbiBpbiBhbiBJZnJhbWUgLSBodHRwOi8vYmVuYWxtYW4uY29tL2NvZGUvcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UvZXhhbXBsZXMvYnVnLXdlYmtpdC1oYXNoLWlmcmFtZS8KLy8gU2FmYXJpOiBCYWNrIEJ1dHRvbiBmcm9tIGEgZGlmZmVyZW50IGRvbWFpbiAtIGh0dHA6Ly9iZW5hbG1hbi5jb20vY29kZS9wcm9qZWN0cy9qcXVlcnktaGFzaGNoYW5nZS9leGFtcGxlcy9idWctc2FmYXJpLWJhY2stZnJvbS1kaWZmLWRvbWFpbi8KLy8gCi8vIEFsc28gbm90ZSB0aGF0IHNob3VsZCBhIGJyb3dzZXIgbmF0aXZlbHkgc3VwcG9ydCB0aGUgd2luZG93Lm9uaGFzaGNoYW5nZSAKLy8gZXZlbnQsIGJ1dCBub3QgcmVwb3J0IHRoYXQgaXQgZG9lcywgdGhlIGZhbGxiYWNrIHBvbGxpbmcgbG9vcCB3aWxsIGJlIHVzZWQuCi8vIAovLyBBYm91dDogUmVsZWFzZSBIaXN0b3J5Ci8vIAovLyAxLjMgICAtICg3LzIxLzIwMTApIFJlb3JnYW5pemVkIElFNi83IElmcmFtZSBjb2RlIHRvIG1ha2UgaXQgbW9yZQovLyAgICAgICAgICJyZW1vdmFibGUiIGZvciBtb2JpbGUtb25seSBkZXZlbG9wbWVudC4gQWRkZWQgSUU2LzcgZG9jdW1lbnQudGl0bGUKLy8gICAgICAgICBzdXBwb3J0LiBBdHRlbXB0ZWQgdG8gbWFrZSBJZnJhbWUgYXMgaGlkZGVuIGFzIHBvc3NpYmxlIGJ5IHVzaW5nCi8vICAgICAgICAgdGVjaG5pcXVlcyBmcm9tIGh0dHA6Ly93d3cucGFjaWVsbG9ncm91cC5jb20vYmxvZy8/cD02MDQuIEFkZGVkIAovLyAgICAgICAgIHN1cHBvcnQgZm9yIHRoZSAic2hvcnRjdXQiIGZvcm1hdCAkKHdpbmRvdykuaGFzaGNoYW5nZSggZm4gKSBhbmQKLy8gICAgICAgICAkKHdpbmRvdykuaGFzaGNoYW5nZSgpIGxpa2UgalF1ZXJ5IHByb3ZpZGVzIGZvciBidWlsdC1pbiBldmVudHMuCi8vICAgICAgICAgUmVuYW1lZCBqUXVlcnkuaGFzaGNoYW5nZURlbGF5IHRvIDxqUXVlcnkuZm4uaGFzaGNoYW5nZS5kZWxheT4gYW5kCi8vICAgICAgICAgbG93ZXJlZCBpdHMgZGVmYXVsdCB2YWx1ZSB0byA1MC4gQWRkZWQgPGpRdWVyeS5mbi5oYXNoY2hhbmdlLmRvbWFpbj4KLy8gICAgICAgICBhbmQgPGpRdWVyeS5mbi5oYXNoY2hhbmdlLnNyYz4gcHJvcGVydGllcyBwbHVzIGRvY3VtZW50LWRvbWFpbi5odG1sCi8vICAgICAgICAgZmlsZSB0byBhZGRyZXNzIGFjY2VzcyBkZW5pZWQgaXNzdWVzIHdoZW4gc2V0dGluZyBkb2N1bWVudC5kb21haW4gaW4KLy8gICAgICAgICBJRTYvNy4KLy8gMS4yICAgLSAoMi8xMS8yMDEwKSBGaXhlZCBhIGJ1ZyB3aGVyZSBjb21pbmcgYmFjayB0byBhIHBhZ2UgdXNpbmcgdGhpcyBwbHVnaW4KLy8gICAgICAgICBmcm9tIGEgcGFnZSBvbiBhbm90aGVyIGRvbWFpbiB3b3VsZCBjYXVzZSBhbiBlcnJvciBpbiBTYWZhcmkgNC4gQWxzbywKLy8gICAgICAgICBJRTYvNyBJZnJhbWUgaXMgbm93IGluc2VydGVkIGFmdGVyIHRoZSBib2R5ICh0aGlzIGFjdHVhbGx5IHdvcmtzKSwKLy8gICAgICAgICB3aGljaCBwcmV2ZW50cyB0aGUgcGFnZSBmcm9tIHNjcm9sbGluZyB3aGVuIHRoZSBldmVudCBpcyBmaXJzdCBib3VuZC4KLy8gICAgICAgICBFdmVudCBjYW4gYWxzbyBub3cgYmUgYm91bmQgYmVmb3JlIERPTSByZWFkeSwgYnV0IGl0IHdvbid0IGJlIHVzYWJsZQovLyAgICAgICAgIGJlZm9yZSB0aGVuIGluIElFNi83LgovLyAxLjEgICAtICgxLzIxLzIwMTApIEluY29ycG9yYXRlZCBkb2N1bWVudC5kb2N1bWVudE1vZGUgdGVzdCB0byBmaXggSUU4IGJ1ZwovLyAgICAgICAgIHdoZXJlIGJyb3dzZXIgdmVyc2lvbiBpcyBpbmNvcnJlY3RseSByZXBvcnRlZCBhcyA4LjAsIGRlc3BpdGUKLy8gICAgICAgICBpbmNsdXNpb24gb2YgdGhlIFgtVUEtQ29tcGF0aWJsZSBJRT1FbXVsYXRlSUU3IG1ldGEgdGFnLgovLyAxLjAgICAtICgxLzkvMjAxMCkgSW5pdGlhbCBSZWxlYXNlLiBCcm9rZSBvdXQgdGhlIGpRdWVyeSBCQlEgZXZlbnQuc3BlY2lhbAovLyAgICAgICAgIHdpbmRvdy5vbmhhc2hjaGFuZ2UgZnVuY3Rpb25hbGl0eSBpbnRvIGEgc2VwYXJhdGUgcGx1Z2luIGZvciB1c2VycwovLyAgICAgICAgIHdobyB3YW50IGp1c3QgdGhlIGJhc2ljIGV2ZW50ICYgYmFjayBidXR0b24gc3VwcG9ydCwgd2l0aG91dCBhbGwgdGhlCi8vICAgICAgICAgZXh0cmEgYXdlc29tZW5lc3MgdGhhdCBCQlEgcHJvdmlkZXMuIFRoaXMgcGx1Z2luIHdpbGwgYmUgaW5jbHVkZWQgYXMKLy8gICAgICAgICBwYXJ0IG9mIGpRdWVyeSBCQlEsIGJ1dCBhbHNvIGJlIGF2YWlsYWJsZSBzZXBhcmF0ZWx5LgoKKGZ1bmN0aW9uKCQsd2luZG93LHVuZGVmaW5lZCl7CiAgJyQ6bm9tdW5nZSc7IC8vIFVzZWQgYnkgWVVJIGNvbXByZXNzb3IuCiAgCiAgLy8gUmV1c2VkIHN0cmluZy4KICB2YXIgc3RyX2hhc2hjaGFuZ2UgPSAnaGFzaGNoYW5nZScsCiAgICAKICAgIC8vIE1ldGhvZCAvIG9iamVjdCByZWZlcmVuY2VzLgogICAgZG9jID0gZG9jdW1lbnQsCiAgICBmYWtlX29uaGFzaGNoYW5nZSwKICAgIHNwZWNpYWwgPSAkLmV2ZW50LnNwZWNpYWwsCiAgICAKICAgIC8vIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCB3aW5kb3cub25oYXNoY2hhbmdlPyBOb3RlIHRoYXQgSUU4IHJ1bm5pbmcgaW4KICAgIC8vIElFNyBjb21wYXRpYmlsaXR5IG1vZGUgcmVwb3J0cyB0cnVlIGZvciAnb25oYXNoY2hhbmdlJyBpbiB3aW5kb3csIGV2ZW4KICAgIC8vIHRob3VnaCB0aGUgZXZlbnQgaXNuJ3Qgc3VwcG9ydGVkLCBzbyBhbHNvIHRlc3QgZG9jdW1lbnQuZG9jdW1lbnRNb2RlLgogICAgZG9jX21vZGUgPSBkb2MuZG9jdW1lbnRNb2RlLAogICAgc3VwcG9ydHNfb25oYXNoY2hhbmdlID0gJ29uJyArIHN0cl9oYXNoY2hhbmdlIGluIHdpbmRvdyAmJiAoIGRvY19tb2RlID09PSB1bmRlZmluZWQgfHwgZG9jX21vZGUgPiA3ICk7CiAgCiAgLy8gR2V0IGxvY2F0aW9uLmhhc2ggKG9yIHdoYXQgeW91J2QgZXhwZWN0IGxvY2F0aW9uLmhhc2ggdG8gYmUpIHNhbnMgYW55CiAgLy8gbGVhZGluZyAjLiBUaGFua3MgZm9yIG1ha2luZyB0aGlzIG5lY2Vzc2FyeSwgRmlyZWZveCEKICBmdW5jdGlvbiBnZXRfZnJhZ21lbnQoIHVybCApIHsKICAgIHVybCA9IHVybCB8fCBsb2NhdGlvbi5ocmVmOwogICAgcmV0dXJuICcjJyArIHVybC5yZXBsYWNlKCAvXlteI10qIz8oLiopJC8sICckMScgKTsKICB9OwogIAogIC8vIE1ldGhvZDogalF1ZXJ5LmZuLmhhc2hjaGFuZ2UKICAvLyAKICAvLyBCaW5kIGEgaGFuZGxlciB0byB0aGUgd2luZG93Lm9uaGFzaGNoYW5nZSBldmVudCBvciB0cmlnZ2VyIGFsbCBib3VuZAogIC8vIHdpbmRvdy5vbmhhc2hjaGFuZ2UgZXZlbnQgaGFuZGxlcnMuIFRoaXMgYmVoYXZpb3IgaXMgY29uc2lzdGVudCB3aXRoCiAgLy8galF1ZXJ5J3MgYnVpbHQtaW4gZXZlbnQgaGFuZGxlcnMuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8gPiBqUXVlcnkod2luZG93KS5oYXNoY2hhbmdlKCBbIGhhbmRsZXIgXSApOwogIC8vIAogIC8vIEFyZ3VtZW50czoKICAvLyAKICAvLyAgaGFuZGxlciAtIChGdW5jdGlvbikgT3B0aW9uYWwgaGFuZGxlciB0byBiZSBib3VuZCB0byB0aGUgaGFzaGNoYW5nZQogIC8vICAgIGV2ZW50LiBUaGlzIGlzIGEgInNob3J0Y3V0IiBmb3IgdGhlIG1vcmUgdmVyYm9zZSBmb3JtOgogIC8vICAgIGpRdWVyeSh3aW5kb3cpLmJpbmQoICdoYXNoY2hhbmdlJywgaGFuZGxlciApLiBJZiBoYW5kbGVyIGlzIG9taXR0ZWQsCiAgLy8gICAgYWxsIGJvdW5kIHdpbmRvdy5vbmhhc2hjaGFuZ2UgZXZlbnQgaGFuZGxlcnMgd2lsbCBiZSB0cmlnZ2VyZWQuIFRoaXMKICAvLyAgICBpcyBhIHNob3J0Y3V0IGZvciB0aGUgbW9yZSB2ZXJib3NlCiAgLy8gICAgalF1ZXJ5KHdpbmRvdykudHJpZ2dlciggJ2hhc2hjaGFuZ2UnICkuIFRoZXNlIGZvcm1zIGFyZSBkZXNjcmliZWQgaW4KICAvLyAgICB0aGUgPGhhc2hjaGFuZ2UgZXZlbnQ+IHNlY3Rpb24uCiAgLy8gCiAgLy8gUmV0dXJuczoKICAvLyAKICAvLyAgKGpRdWVyeSkgVGhlIGluaXRpYWwgalF1ZXJ5IGNvbGxlY3Rpb24gb2YgZWxlbWVudHMuCiAgCiAgLy8gQWxsb3cgdGhlICJzaG9ydGN1dCIgZm9ybWF0ICQoZWxlbSkuaGFzaGNoYW5nZSggZm4gKSBmb3IgYmluZGluZyBhbmQKICAvLyAkKGVsZW0pLmhhc2hjaGFuZ2UoKSBmb3IgdHJpZ2dlcmluZywgbGlrZSBqUXVlcnkgZG9lcyBmb3IgYnVpbHQtaW4gZXZlbnRzLgogICQuZm5bIHN0cl9oYXNoY2hhbmdlIF0gPSBmdW5jdGlvbiggZm4gKSB7CiAgICByZXR1cm4gZm4gPyB0aGlzLmJpbmQoIHN0cl9oYXNoY2hhbmdlLCBmbiApIDogdGhpcy50cmlnZ2VyKCBzdHJfaGFzaGNoYW5nZSApOwogIH07CiAgCiAgLy8gUHJvcGVydHk6IGpRdWVyeS5mbi5oYXNoY2hhbmdlLmRlbGF5CiAgLy8gCiAgLy8gVGhlIG51bWVyaWMgaW50ZXJ2YWwgKGluIG1pbGxpc2Vjb25kcykgYXQgd2hpY2ggdGhlIDxoYXNoY2hhbmdlIGV2ZW50PgogIC8vIHBvbGxpbmcgbG9vcCBleGVjdXRlcy4gRGVmYXVsdHMgdG8gNTAuCiAgCiAgLy8gUHJvcGVydHk6IGpRdWVyeS5mbi5oYXNoY2hhbmdlLmRvbWFpbgogIC8vIAogIC8vIElmIHlvdSdyZSBzZXR0aW5nIGRvY3VtZW50LmRvbWFpbiBpbiB5b3VyIEphdmFTY3JpcHQsIGFuZCB5b3Ugd2FudCBoYXNoCiAgLy8gaGlzdG9yeSB0byB3b3JrIGluIElFNi83LCBub3Qgb25seSBtdXN0IHRoaXMgcHJvcGVydHkgYmUgc2V0LCBidXQgeW91IG11c3QKICAvLyBhbHNvIHNldCBkb2N1bWVudC5kb21haW4gQkVGT1JFIGpRdWVyeSBpcyBsb2FkZWQgaW50byB0aGUgcGFnZS4gVGhpcwogIC8vIHByb3BlcnR5IGlzIG9ubHkgYXBwbGljYWJsZSBpZiB5b3UgYXJlIHN1cHBvcnRpbmcgSUU2LzcgKG9yIElFOCBvcGVyYXRpbmcKICAvLyBpbiAiSUU3IGNvbXBhdGliaWxpdHkiIG1vZGUpLgogIC8vIAogIC8vIEluIGFkZGl0aW9uLCB0aGUgPGpRdWVyeS5mbi5oYXNoY2hhbmdlLnNyYz4gcHJvcGVydHkgbXVzdCBiZSBzZXQgdG8gdGhlCiAgLy8gcGF0aCBvZiB0aGUgaW5jbHVkZWQgImRvY3VtZW50LWRvbWFpbi5odG1sIiBmaWxlLCB3aGljaCBjYW4gYmUgcmVuYW1lZCBvcgogIC8vIG1vZGlmaWVkIGlmIG5lY2Vzc2FyeSAobm90ZSB0aGF0IHRoZSBkb2N1bWVudC5kb21haW4gc3BlY2lmaWVkIG11c3QgYmUgdGhlCiAgLy8gc2FtZSBpbiBib3RoIHlvdXIgbWFpbiBKYXZhU2NyaXB0IGFzIHdlbGwgYXMgaW4gdGhpcyBmaWxlKS4KICAvLyAKICAvLyBVc2FnZToKICAvLyAKICAvLyBqUXVlcnkuZm4uaGFzaGNoYW5nZS5kb21haW4gPSBkb2N1bWVudC5kb21haW47CiAgCiAgLy8gUHJvcGVydHk6IGpRdWVyeS5mbi5oYXNoY2hhbmdlLnNyYwogIC8vIAogIC8vIElmLCBmb3Igc29tZSByZWFzb24sIHlvdSBuZWVkIHRvIHNwZWNpZnkgYW4gSWZyYW1lIHNyYyBmaWxlIChmb3IgZXhhbXBsZSwKICAvLyB3aGVuIHNldHRpbmcgZG9jdW1lbnQuZG9tYWluIGFzIGluIDxqUXVlcnkuZm4uaGFzaGNoYW5nZS5kb21haW4+KSwgeW91IGNhbgogIC8vIGRvIHNvIHVzaW5nIHRoaXMgcHJvcGVydHkuIE5vdGUgdGhhdCB3aGVuIHVzaW5nIHRoaXMgcHJvcGVydHksIGhpc3RvcnkKICAvLyB3b24ndCBiZSByZWNvcmRlZCBpbiBJRTYvNyB1bnRpbCB0aGUgSWZyYW1lIHNyYyBmaWxlIGxvYWRzLiBUaGlzIHByb3BlcnR5CiAgLy8gaXMgb25seSBhcHBsaWNhYmxlIGlmIHlvdSBhcmUgc3VwcG9ydGluZyBJRTYvNyAob3IgSUU4IG9wZXJhdGluZyBpbiAiSUU3CiAgLy8gY29tcGF0aWJpbGl0eSIgbW9kZSkuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8galF1ZXJ5LmZuLmhhc2hjaGFuZ2Uuc3JjID0gJ3BhdGgvdG8vZmlsZS5odG1sJzsKICAKICAkLmZuWyBzdHJfaGFzaGNoYW5nZSBdLmRlbGF5ID0gNTA7CiAgLyoKICAkLmZuWyBzdHJfaGFzaGNoYW5nZSBdLmRvbWFpbiA9IG51bGw7CiAgJC5mblsgc3RyX2hhc2hjaGFuZ2UgXS5zcmMgPSBudWxsOwogICovCiAgCiAgLy8gRXZlbnQ6IGhhc2hjaGFuZ2UgZXZlbnQKICAvLyAKICAvLyBGaXJlZCB3aGVuIGxvY2F0aW9uLmhhc2ggY2hhbmdlcy4gSW4gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IGl0LCB0aGUgbmF0aXZlCiAgLy8gSFRNTDUgd2luZG93Lm9uaGFzaGNoYW5nZSBldmVudCBpcyB1c2VkLCBvdGhlcndpc2UgYSBwb2xsaW5nIGxvb3AgaXMKICAvLyBpbml0aWFsaXplZCwgcnVubmluZyBldmVyeSA8alF1ZXJ5LmZuLmhhc2hjaGFuZ2UuZGVsYXk+IG1pbGxpc2Vjb25kcyB0bwogIC8vIHNlZSBpZiB0aGUgaGFzaCBoYXMgY2hhbmdlZC4gSW4gSUU2LzcgKGFuZCBJRTggb3BlcmF0aW5nIGluICJJRTcKICAvLyBjb21wYXRpYmlsaXR5IiBtb2RlKSwgYSBoaWRkZW4gSWZyYW1lIGlzIGNyZWF0ZWQgdG8gYWxsb3cgdGhlIGJhY2sgYnV0dG9uCiAgLy8gYW5kIGhhc2gtYmFzZWQgaGlzdG9yeSB0byB3b3JrLgogIC8vIAogIC8vIFVzYWdlIGFzIGRlc2NyaWJlZCBpbiA8alF1ZXJ5LmZuLmhhc2hjaGFuZ2U+OgogIC8vIAogIC8vID4gLy8gQmluZCBhbiBldmVudCBoYW5kbGVyLgogIC8vID4galF1ZXJ5KHdpbmRvdykuaGFzaGNoYW5nZSggZnVuY3Rpb24oZSkgewogIC8vID4gICB2YXIgaGFzaCA9IGxvY2F0aW9uLmhhc2g7CiAgLy8gPiAgIC4uLgogIC8vID4gfSk7CiAgLy8gPiAKICAvLyA+IC8vIE1hbnVhbGx5IHRyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIuCiAgLy8gPiBqUXVlcnkod2luZG93KS5oYXNoY2hhbmdlKCk7CiAgLy8gCiAgLy8gQSBtb3JlIHZlcmJvc2UgdXNhZ2UgdGhhdCBhbGxvd3MgZm9yIGV2ZW50IG5hbWVzcGFjaW5nOgogIC8vIAogIC8vID4gLy8gQmluZCBhbiBldmVudCBoYW5kbGVyLgogIC8vID4galF1ZXJ5KHdpbmRvdykuYmluZCggJ2hhc2hjaGFuZ2UnLCBmdW5jdGlvbihlKSB7CiAgLy8gPiAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDsKICAvLyA+ICAgLi4uCiAgLy8gPiB9KTsKICAvLyA+IAogIC8vID4gLy8gTWFudWFsbHkgdHJpZ2dlciB0aGUgZXZlbnQgaGFuZGxlci4KICAvLyA+IGpRdWVyeSh3aW5kb3cpLnRyaWdnZXIoICdoYXNoY2hhbmdlJyApOwogIC8vIAogIC8vIEFkZGl0aW9uYWwgTm90ZXM6CiAgLy8gCiAgLy8gKiBUaGUgcG9sbGluZyBsb29wIGFuZCBJZnJhbWUgYXJlIG5vdCBjcmVhdGVkIHVudGlsIGF0IGxlYXN0IG9uZSBoYW5kbGVyCiAgLy8gICBpcyBhY3R1YWxseSBib3VuZCB0byB0aGUgJ2hhc2hjaGFuZ2UnIGV2ZW50LgogIC8vICogSWYgeW91IG5lZWQgdGhlIGJvdW5kIGhhbmRsZXIocykgdG8gZXhlY3V0ZSBpbW1lZGlhdGVseSwgaW4gY2FzZXMgd2hlcmUKICAvLyAgIGEgbG9jYXRpb24uaGFzaCBleGlzdHMgb24gcGFnZSBsb2FkLCB2aWEgYm9va21hcmsgb3IgcGFnZSByZWZyZXNoIGZvcgogIC8vICAgZXhhbXBsZSwgdXNlIGpRdWVyeSh3aW5kb3cpLmhhc2hjaGFuZ2UoKSBvciB0aGUgbW9yZSB2ZXJib3NlIAogIC8vICAgalF1ZXJ5KHdpbmRvdykudHJpZ2dlciggJ2hhc2hjaGFuZ2UnICkuCiAgLy8gKiBUaGUgZXZlbnQgY2FuIGJlIGJvdW5kIGJlZm9yZSBET00gcmVhZHksIGJ1dCBzaW5jZSBpdCB3b24ndCBiZSB1c2FibGUKICAvLyAgIGJlZm9yZSB0aGVuIGluIElFNi83IChkdWUgdG8gdGhlIG5lY2Vzc2FyeSBJZnJhbWUpLCByZWNvbW1lbmRlZCB1c2FnZSBpcwogIC8vICAgdG8gYmluZCBpdCBpbnNpZGUgYSBET00gcmVhZHkgaGFuZGxlci4KICAKICAvLyBPdmVycmlkZSBleGlzdGluZyAkLmV2ZW50LnNwZWNpYWwuaGFzaGNoYW5nZSBtZXRob2RzIChhbGxvd2luZyB0aGlzIHBsdWdpbgogIC8vIHRvIGJlIGRlZmluZWQgYWZ0ZXIgalF1ZXJ5IEJCUSBpbiBCQlEncyBzb3VyY2UgY29kZSkuCiAgc3BlY2lhbFsgc3RyX2hhc2hjaGFuZ2UgXSA9ICQuZXh0ZW5kKCBzcGVjaWFsWyBzdHJfaGFzaGNoYW5nZSBdLCB7CiAgICAKICAgIC8vIENhbGxlZCBvbmx5IHdoZW4gdGhlIGZpcnN0ICdoYXNoY2hhbmdlJyBldmVudCBpcyBib3VuZCB0byB3aW5kb3cuCiAgICBzZXR1cDogZnVuY3Rpb24oKSB7CiAgICAgIC8vIElmIHdpbmRvdy5vbmhhc2hjaGFuZ2UgaXMgc3VwcG9ydGVkIG5hdGl2ZWx5LCB0aGVyZSdzIG5vdGhpbmcgdG8gZG8uLgogICAgICBpZiAoIHN1cHBvcnRzX29uaGFzaGNoYW5nZSApIHsgcmV0dXJuIGZhbHNlOyB9CiAgICAgIAogICAgICAvLyBPdGhlcndpc2UsIHdlIG5lZWQgdG8gY3JlYXRlIG91ciBvd24uIEFuZCB3ZSBkb24ndCB3YW50IHRvIGNhbGwgdGhpcwogICAgICAvLyB1bnRpbCB0aGUgdXNlciBiaW5kcyB0byB0aGUgZXZlbnQsIGp1c3QgaW4gY2FzZSB0aGV5IG5ldmVyIGRvLCBzaW5jZSBpdAogICAgICAvLyB3aWxsIGNyZWF0ZSBhIHBvbGxpbmcgbG9vcCBhbmQgcG9zc2libHkgZXZlbiBhIGhpZGRlbiBJZnJhbWUuCiAgICAgICQoIGZha2Vfb25oYXNoY2hhbmdlLnN0YXJ0ICk7CiAgICB9LAogICAgCiAgICAvLyBDYWxsZWQgb25seSB3aGVuIHRoZSBsYXN0ICdoYXNoY2hhbmdlJyBldmVudCBpcyB1bmJvdW5kIGZyb20gd2luZG93LgogICAgdGVhcmRvd246IGZ1bmN0aW9uKCkgewogICAgICAvLyBJZiB3aW5kb3cub25oYXNoY2hhbmdlIGlzIHN1cHBvcnRlZCBuYXRpdmVseSwgdGhlcmUncyBub3RoaW5nIHRvIGRvLi4KICAgICAgaWYgKCBzdXBwb3J0c19vbmhhc2hjaGFuZ2UgKSB7IHJldHVybiBmYWxzZTsgfQogICAgICAKICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBuZWVkIHRvIHN0b3Agb3VycyAoaWYgcG9zc2libGUpLgogICAgICAkKCBmYWtlX29uaGFzaGNoYW5nZS5zdG9wICk7CiAgICB9CiAgICAKICB9KTsKICAKICAvLyBmYWtlX29uaGFzaGNoYW5nZSBkb2VzIGFsbCB0aGUgd29yayBvZiB0cmlnZ2VyaW5nIHRoZSB3aW5kb3cub25oYXNoY2hhbmdlCiAgLy8gZXZlbnQgZm9yIGJyb3dzZXJzIHRoYXQgZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdCwgaW5jbHVkaW5nIGNyZWF0aW5nIGEKICAvLyBwb2xsaW5nIGxvb3AgdG8gd2F0Y2ggZm9yIGhhc2ggY2hhbmdlcyBhbmQgaW4gSUUgNi83IGNyZWF0aW5nIGEgaGlkZGVuCiAgLy8gSWZyYW1lIHRvIGVuYWJsZSBiYWNrIGFuZCBmb3J3YXJkLgogIGZha2Vfb25oYXNoY2hhbmdlID0gKGZ1bmN0aW9uKCl7CiAgICB2YXIgc2VsZiA9IHt9LAogICAgICB0aW1lb3V0X2lkLAogICAgICAKICAgICAgLy8gUmVtZW1iZXIgdGhlIGluaXRpYWwgaGFzaCBzbyBpdCBkb2Vzbid0IGdldCB0cmlnZ2VyZWQgaW1tZWRpYXRlbHkuCiAgICAgIGxhc3RfaGFzaCA9IGdldF9mcmFnbWVudCgpLAogICAgICAKICAgICAgZm5fcmV0dmFsID0gZnVuY3Rpb24odmFsKXsgcmV0dXJuIHZhbDsgfSwKICAgICAgaGlzdG9yeV9zZXQgPSBmbl9yZXR2YWwsCiAgICAgIGhpc3RvcnlfZ2V0ID0gZm5fcmV0dmFsOwogICAgCiAgICAvLyBTdGFydCB0aGUgcG9sbGluZyBsb29wLgogICAgc2VsZi5zdGFydCA9IGZ1bmN0aW9uKCkgewogICAgICB0aW1lb3V0X2lkIHx8IHBvbGwoKTsKICAgIH07CiAgICAKICAgIC8vIFN0b3AgdGhlIHBvbGxpbmcgbG9vcC4KICAgIHNlbGYuc3RvcCA9IGZ1bmN0aW9uKCkgewogICAgICB0aW1lb3V0X2lkICYmIGNsZWFyVGltZW91dCggdGltZW91dF9pZCApOwogICAgICB0aW1lb3V0X2lkID0gdW5kZWZpbmVkOwogICAgfTsKICAgIAogICAgLy8gVGhpcyBwb2xsaW5nIGxvb3AgY2hlY2tzIGV2ZXJ5ICQuZm4uaGFzaGNoYW5nZS5kZWxheSBtaWxsaXNlY29uZHMgdG8gc2VlCiAgICAvLyBpZiBsb2NhdGlvbi5oYXNoIGhhcyBjaGFuZ2VkLCBhbmQgdHJpZ2dlcnMgdGhlICdoYXNoY2hhbmdlJyBldmVudCBvbgogICAgLy8gd2luZG93IHdoZW4gbmVjZXNzYXJ5LgogICAgZnVuY3Rpb24gcG9sbCgpIHsKICAgICAgdmFyIGhhc2ggPSBnZXRfZnJhZ21lbnQoKSwKICAgICAgICBoaXN0b3J5X2hhc2ggPSBoaXN0b3J5X2dldCggbGFzdF9oYXNoICk7CiAgICAgIAogICAgICBpZiAoIGhhc2ggIT09IGxhc3RfaGFzaCApIHsKICAgICAgICBoaXN0b3J5X3NldCggbGFzdF9oYXNoID0gaGFzaCwgaGlzdG9yeV9oYXNoICk7CiAgICAgICAgCiAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoIHN0cl9oYXNoY2hhbmdlICk7CiAgICAgICAgCiAgICAgIH0gZWxzZSBpZiAoIGhpc3RvcnlfaGFzaCAhPT0gbGFzdF9oYXNoICkgewogICAgICAgIGxvY2F0aW9uLmhyZWYgPSBsb2NhdGlvbi5ocmVmLnJlcGxhY2UoIC8jLiovLCAnJyApICsgaGlzdG9yeV9oYXNoOwogICAgICB9CiAgICAgIAogICAgICB0aW1lb3V0X2lkID0gc2V0VGltZW91dCggcG9sbCwgJC5mblsgc3RyX2hhc2hjaGFuZ2UgXS5kZWxheSApOwogICAgfTsKICAgIAogICAgLy8gdnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2CiAgICAvLyB2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2IFJFTU9WRSBJRiBOT1QgU1VQUE9SVElORyBJRTYvNy84IHZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnYKICAgIC8vIHZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dgogICAgJC5icm93c2VyLm1zaWUgJiYgIXN1cHBvcnRzX29uaGFzaGNoYW5nZSAmJiAoZnVuY3Rpb24oKXsKICAgICAgLy8gTm90IG9ubHkgZG8gSUU2LzcgbmVlZCB0aGUgIm1hZ2ljYWwiIElmcmFtZSB0cmVhdG1lbnQsIGJ1dCBzbyBkb2VzIElFOAogICAgICAvLyB3aGVuIHJ1bm5pbmcgaW4gIklFNyBjb21wYXRpYmlsaXR5IiBtb2RlLgogICAgICAKICAgICAgdmFyIGlmcmFtZSwKICAgICAgICBpZnJhbWVfc3JjOwogICAgICAKICAgICAgLy8gV2hlbiB0aGUgZXZlbnQgaXMgYm91bmQgYW5kIHBvbGxpbmcgc3RhcnRzIGluIElFIDYvNywgY3JlYXRlIGEgaGlkZGVuCiAgICAgIC8vIElmcmFtZSBmb3IgaGlzdG9yeSBoYW5kbGluZy4KICAgICAgc2VsZi5zdGFydCA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaWYgKCAhaWZyYW1lICkgewogICAgICAgICAgaWZyYW1lX3NyYyA9ICQuZm5bIHN0cl9oYXNoY2hhbmdlIF0uc3JjOwogICAgICAgICAgaWZyYW1lX3NyYyA9IGlmcmFtZV9zcmMgJiYgaWZyYW1lX3NyYyArIGdldF9mcmFnbWVudCgpOwogICAgICAgICAgCiAgICAgICAgICAvLyBDcmVhdGUgaGlkZGVuIElmcmFtZS4gQXR0ZW1wdCB0byBtYWtlIElmcmFtZSBhcyBoaWRkZW4gYXMgcG9zc2libGUKICAgICAgICAgIC8vIGJ5IHVzaW5nIHRlY2huaXF1ZXMgZnJvbSBodHRwOi8vd3d3LnBhY2llbGxvZ3JvdXAuY29tL2Jsb2cvP3A9NjA0LgogICAgICAgICAgaWZyYW1lID0gJCgnPGlmcmFtZSB0YWJpbmRleD0iLTEiIHRpdGxlPSJlbXB0eSIvPicpLmhpZGUoKQogICAgICAgICAgICAKICAgICAgICAgICAgLy8gV2hlbiBJZnJhbWUgaGFzIGNvbXBsZXRlbHkgbG9hZGVkLCBpbml0aWFsaXplIHRoZSBoaXN0b3J5IGFuZAogICAgICAgICAgICAvLyBzdGFydCBwb2xsaW5nLgogICAgICAgICAgICAub25lKCAnbG9hZCcsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgaWZyYW1lX3NyYyB8fCBoaXN0b3J5X3NldCggZ2V0X2ZyYWdtZW50KCkgKTsKICAgICAgICAgICAgICBwb2xsKCk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBMb2FkIElmcmFtZSBzcmMgaWYgc3BlY2lmaWVkLCBvdGhlcndpc2Ugbm90aGluZy4KICAgICAgICAgICAgLmF0dHIoICdzcmMnLCBpZnJhbWVfc3JjIHx8ICdqYXZhc2NyaXB0OjAnICkKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEFwcGVuZCBJZnJhbWUgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgYm9keSB0byBwcmV2ZW50IHVubmVjZXNzYXJ5CiAgICAgICAgICAgIC8vIGluaXRpYWwgcGFnZSBzY3JvbGxpbmcgKHllcywgdGhpcyB3b3JrcykuCiAgICAgICAgICAgIC5pbnNlcnRBZnRlciggJ2JvZHknIClbMF0uY29udGVudFdpbmRvdzsKICAgICAgICAgIAogICAgICAgICAgLy8gV2hlbmV2ZXIgYGRvY3VtZW50LnRpdGxlYCBjaGFuZ2VzLCB1cGRhdGUgdGhlIElmcmFtZSdzIHRpdGxlIHRvCiAgICAgICAgICAvLyBwcmV0dGlmeSB0aGUgYmFjay9uZXh0IGhpc3RvcnkgbWVudSBlbnRyaWVzLiBTaW5jZSBJRSBzb21ldGltZXMKICAgICAgICAgIC8vIGVycm9ycyB3aXRoICJVbnNwZWNpZmllZCBlcnJvciIgdGhlIHZlcnkgZmlyc3QgdGltZSB0aGlzIGlzIHNldAogICAgICAgICAgLy8gKHllcywgdmVyeSB1c2VmdWwpIHdyYXAgdGhpcyB3aXRoIGEgdHJ5L2NhdGNoIGJsb2NrLgogICAgICAgICAgZG9jLm9ucHJvcGVydHljaGFuZ2UgPSBmdW5jdGlvbigpewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGlmICggZXZlbnQucHJvcGVydHlOYW1lID09PSAndGl0bGUnICkgewogICAgICAgICAgICAgICAgaWZyYW1lLmRvY3VtZW50LnRpdGxlID0gZG9jLnRpdGxlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaChlKSB7fQogICAgICAgICAgfTsKICAgICAgICAgIAogICAgICAgIH0KICAgICAgfTsKICAgICAgCiAgICAgIC8vIE92ZXJyaWRlIHRoZSAic3RvcCIgbWV0aG9kIHNpbmNlIGFuIElFNi83IElmcmFtZSB3YXMgY3JlYXRlZC4gRXZlbgogICAgICAvLyBpZiB0aGVyZSBhcmUgbm8gbG9uZ2VyIGFueSBib3VuZCBldmVudCBoYW5kbGVycywgdGhlIHBvbGxpbmcgbG9vcAogICAgICAvLyBpcyBzdGlsbCBuZWNlc3NhcnkgZm9yIGJhY2svbmV4dCB0byB3b3JrIGF0IGFsbCEKICAgICAgc2VsZi5zdG9wID0gZm5fcmV0dmFsOwogICAgICAKICAgICAgLy8gR2V0IGhpc3RvcnkgYnkgbG9va2luZyBhdCB0aGUgaGlkZGVuIElmcmFtZSdzIGxvY2F0aW9uLmhhc2guCiAgICAgIGhpc3RvcnlfZ2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGdldF9mcmFnbWVudCggaWZyYW1lLmxvY2F0aW9uLmhyZWYgKTsKICAgICAgfTsKICAgICAgCiAgICAgIC8vIFNldCBhIG5ldyBoaXN0b3J5IGl0ZW0gYnkgb3BlbmluZyBhbmQgdGhlbiBjbG9zaW5nIHRoZSBJZnJhbWUKICAgICAgLy8gZG9jdW1lbnQsICp0aGVuKiBzZXR0aW5nIGl0cyBsb2NhdGlvbi5oYXNoLiBJZiBkb2N1bWVudC5kb21haW4gaGFzCiAgICAgIC8vIGJlZW4gc2V0LCB1cGRhdGUgdGhhdCBhcyB3ZWxsLgogICAgICBoaXN0b3J5X3NldCA9IGZ1bmN0aW9uKCBoYXNoLCBoaXN0b3J5X2hhc2ggKSB7CiAgICAgICAgdmFyIGlmcmFtZV9kb2MgPSBpZnJhbWUuZG9jdW1lbnQsCiAgICAgICAgICBkb21haW4gPSAkLmZuWyBzdHJfaGFzaGNoYW5nZSBdLmRvbWFpbjsKICAgICAgICAKICAgICAgICBpZiAoIGhhc2ggIT09IGhpc3RvcnlfaGFzaCApIHsKICAgICAgICAgIC8vIFVwZGF0ZSBJZnJhbWUgd2l0aCBhbnkgaW5pdGlhbCBgZG9jdW1lbnQudGl0bGVgIHRoYXQgbWlnaHQgYmUgc2V0LgogICAgICAgICAgaWZyYW1lX2RvYy50aXRsZSA9IGRvYy50aXRsZTsKICAgICAgICAgIAogICAgICAgICAgLy8gT3BlbmluZyB0aGUgSWZyYW1lJ3MgZG9jdW1lbnQgYWZ0ZXIgaXQgaGFzIGJlZW4gY2xvc2VkIGlzIHdoYXQKICAgICAgICAgIC8vIGFjdHVhbGx5IGFkZHMgYSBoaXN0b3J5IGVudHJ5LgogICAgICAgICAgaWZyYW1lX2RvYy5vcGVuKCk7CiAgICAgICAgICAKICAgICAgICAgIC8vIFNldCBkb2N1bWVudC5kb21haW4gZm9yIHRoZSBJZnJhbWUgZG9jdW1lbnQgYXMgd2VsbCwgaWYgbmVjZXNzYXJ5LgogICAgICAgICAgZG9tYWluICYmIGlmcmFtZV9kb2Mud3JpdGUoICc8c2NyaXB0PmRvY3VtZW50LmRvbWFpbj0iJyArIGRvbWFpbiArICciPC9zY3JpcHQ+JyApOwogICAgICAgICAgCiAgICAgICAgICBpZnJhbWVfZG9jLmNsb3NlKCk7CiAgICAgICAgICAKICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgSWZyYW1lJ3MgaGFzaCwgZm9yIGdyZWF0IGp1c3RpY2UuCiAgICAgICAgICBpZnJhbWUubG9jYXRpb24uaGFzaCA9IGhhc2g7CiAgICAgICAgfQogICAgICB9OwogICAgICAKICAgIH0pKCk7CiAgICAvLyBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl4KICAgIC8vIF5eXl5eXl5eXl5eXl5eXl5eXl4gUkVNT1ZFIElGIE5PVCBTVVBQT1JUSU5HIElFNi83LzggXl5eXl5eXl5eXl5eXl5eXl5eXgogICAgLy8gXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eCiAgICAKICAgIHJldHVybiBzZWxmOwogIH0pKCk7CiAgCn0pKGpRdWVyeSx0aGlzKTsK",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 05:52:31 GMT",
                    "Content-Length": "52651",
                    "Date": "Fri, 07 Nov 2014 05:52:32 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}