{
    "url": "http://localhost:9999/Esri/geotriggers-js/geotrigger.min.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Client-side JSON injection (DOM-based)",
    "issueType": 2098032,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based JSON injection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and incorporates this into a string that is parsed as a JSON data structure and then processed by the application. An attacker may be able to use this behavior to construct a URL which, if visited by another application user, will cause arbitrary JSON data to be processed. Depending on the purpose for which this data is used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based JSON injection vulnerabilities is not to parse as JSON any string containing data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the JSON structure in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the JSON when it is parsed.",
    "issueDetail": "The application may be vulnerable to DOM-based client-side JSON injection. Data is read from <b>document.cookie</b> and written to <b>JSON.parse()</b> via the following statements:<ul><li>var b=document.cookie.match(new RegExp(a+\"=[a-zA-Z0-9.()=|%/_]+($|;)\",\"g\"));</li><li>return b&amp;&amp;b[0]?JSON.parse(b[0].substring(a.length+1,b[0].length).replace(\";\",\"\"))||null:null</li></ul>Because the data originates from a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability. ",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/Esri/geotriggers-js/geotrigger.min.js",
                "path": "/Esri/geotriggers-js/geotrigger.min.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9Fc3JpL2dlb3RyaWdnZXJzLWpzL2dlb3RyaWdnZXIubWluLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyohIGdlb3RyaWdnZXItanMgLSB2MS4wLjEgLSAyMDE0LTEwLTEwCiogICBDb3B5cmlnaHQgKGMpIDIwMTQgRW52aXJvbm1lbnRhbCBTeXN0ZW1zIFJlc2VhcmNoIEluc3RpdHV0ZSwgSW5jLgoqICAgQXBhY2hlIExpY2Vuc2UgKi8KCiFmdW5jdGlvbihhLGIpeyJvYmplY3QiPT10eXBlb2YgbW9kdWxlJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZS5leHBvcnRzJiYoWE1MSHR0cFJlcXVlc3Q9cmVxdWlyZSgieG1saHR0cHJlcXVlc3QiKS5YTUxIdHRwUmVxdWVzdCxleHBvcnRzPW1vZHVsZS5leHBvcnRzPWIoKSksIm9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJihhLkdlb3RyaWdnZXI9YigpKX0odGhpcyxmdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSl7dGhpcy5fcXVldWU9W10sdGhpcy5fcmVxdWVzdFF1ZXVlPVtdLHRoaXMuX2V2ZW50cz17fTt2YXIgZT17cHJlZmVyTG9jYWxTdG9yYWdlOiEwLHBlcnNpc3RTZXNzaW9uOiJ1bmRlZmluZWQiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz8hMTohMCxnZW90cmlnZ2Vyc1VybDpiLHRva2VuVXJsOmMscmVnaXN0ZXJEZXZpY2VVcmw6ZCxhdXRvbWF0aWNSZWdpc3RhdGlvbjohMCxwcm94eTohMX07aWYoIWF8fCFhLmNsaWVudElkKXRocm93IG5ldyBFcnJvcigiR2VvdHJpZ2dlci5TZXNzaW9uIHJlcXVpcmVzIGFuIGBjbGllbnRJZGAgb3IgYSBgc2Vzc2lvbmAgcGFyYW1ldGVyLiIpO2lmKCFhLnByb3h5JiYhZil0aHJvdyBuZXcgRXJyb3IoIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IENPUlMgYW5kIGEgcHJveHkgaGFzIG5vdCBiZWVuIHNldC4iKTtnLm1lcmdlKHRoaXMsZy5tZXJnZShlLGEpKSx0aGlzLmF1dGhlbnRpY2F0ZWRBcz10aGlzLmNsaWVudElkJiZ0aGlzLmNsaWVudFNlY3JldD8iYXBwbGljYXRpb24iOiJkZXZpY2UiLHRoaXMua2V5PSJnZW90cmlnZ2Vyc18iK3RoaXMuYXV0aGVudGljYXRlZEFzKyJfIit0aGlzLmNsaWVudElkLHRoaXMucGVyc2lzdFNlc3Npb24mJih0aGlzLnByZWZlckxvY2FsU3RvcmFnZSYmaD9nLm1lcmdlKHRoaXMsai5nZXQodGhpcy5rZXkpKTppJiZnLm1lcmdlKHRoaXMsay5nZXQodGhpcy5rZXkpKSksdGhpcy50b2tlbiYmRGF0ZS5ub3coKT5uZXcgRGF0ZSh0aGlzLmV4cGlyZXNPbikuZ2V0VGltZSgpfHwhdGhpcy50b2tlbj8oZGVsZXRlIHRoaXMudG9rZW4sdGhpcy5yZWZyZXNoKCkpOnRoaXMucGVyc2lzdFNlc3Npb24mJnRoaXMuZW1pdCgiYXV0aGVudGljYXRpb246cmVzdG9yZWQiKX12YXIgYj0iaHR0cHM6Ly9nZW90cmlnZ2VyLmFyY2dpcy5jb20vIixjPSJodHRwczovL3d3dy5hcmNnaXMuY29tL3NoYXJpbmcvb2F1dGgyL3Rva2VuIixkPSJodHRwczovL3d3dy5hcmNnaXMuY29tL3NoYXJpbmcvb2F1dGgyL3JlZ2lzdGVyRGV2aWNlIixlPXt9LGY9ITA7Im9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJihmPSEhKHdpbmRvdy5YTUxIdHRwUmVxdWVzdCYmIndpdGhDcmVkZW50aWFscyJpbiBuZXcgWE1MSHR0cFJlcXVlc3QpKSxGdW5jdGlvbi5wcm90b3R5cGUuYmluZHx8KEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kPWZ1bmN0aW9uKGEpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB0aGlzKXRocm93IG5ldyBUeXBlRXJyb3IoIkZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIC0gd2hhdCBpcyB0cnlpbmcgdG8gYmUgYm91bmQgaXMgbm90IGNhbGxhYmxlIik7dmFyIGI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLGM9dGhpcyxkPWZ1bmN0aW9uKCl7fSxlPWZ1bmN0aW9uKCl7cmV0dXJuIGMuYXBwbHkodGhpcyBpbnN0YW5jZW9mIGQmJmE/dGhpczphLGIuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKX07cmV0dXJuIGQucHJvdG90eXBlPXRoaXMucHJvdG90eXBlLGUucHJvdG90eXBlPW5ldyBkLGV9KSxhLnByb3RvdHlwZS5hdXRoZW50aWNhdGVkPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLnRva2VufSxhLnByb3RvdHlwZS5yZWZyZXNoPWZ1bmN0aW9uKCl7aWYoIXRoaXMucmVmcmVzaGluZyl7dGhpcy5yZWZyZXNoaW5nPSEwO3ZhciBhPXRoaXMudG9rZW5VcmwsYj17Y2xpZW50X2lkOnRoaXMuY2xpZW50SWQsZjoianNvbiJ9O3RoaXMuY2xpZW50U2VjcmV0PyhiLmNsaWVudF9zZWNyZXQ9dGhpcy5jbGllbnRTZWNyZXQsYi5ncmFudF90eXBlPSJjbGllbnRfY3JlZGVudGlhbHMiKTp0aGlzLnJlZnJlc2hUb2tlbj8oYi5yZWZyZXNoX3Rva2VuPXRoaXMucmVmcmVzaFRva2VuLGIuZ3JhbnRfdHlwZT0icmVmcmVzaF90b2tlbiIpOnRoaXMuYXV0b21hdGljUmVnaXN0YXRpb24mJihhPXRoaXMucmVnaXN0ZXJEZXZpY2VVcmwpLHRoaXMucmVxdWVzdChhLGIsZnVuY3Rpb24oYSxiLGMpe2lmKHRoaXMucmVmcmVzaGluZz0hMSxhKXJldHVybiB2b2lkIHRoaXMuZW1pdCgiYXV0aGVudGljYXRpb246ZXJyb3IiLGEsYixjKTtmb3IodGhpcy5leHBpcmVzT249bmV3IERhdGUoKG5ldyBEYXRlKS5nZXRUaW1lKCkrMWUzKihiLmV4cGlyZXNfaW4tMzAwKSksYi5kZXZpY2VUb2tlbj8odGhpcy5yZWZyZXNoVG9rZW49Yi5kZXZpY2VUb2tlbi5yZWZyZXNoX3Rva2VuLHRoaXMudG9rZW49Yi5kZXZpY2VUb2tlbi5hY2Nlc3NfdG9rZW4sdGhpcy5kZXZpY2VJZD1iLmRldmljZS5kZXZpY2VJZCk6dGhpcy50b2tlbj1iLmFjY2Vzc190b2tlbix0aGlzLnBlcnNpc3RTZXNzaW9uJiZ0aGlzLnBlcnNpc3QoKTt0aGlzLl9xdWV1ZS5sZW5ndGg7KXRoaXMuX3F1ZXVlLnNoaWZ0KCkuYXBwbHkodGhpcyk7Zm9yKHRoaXMuZW1pdCgiYXV0aGVudGljYXRpb246c3VjY2VzcyIpO3RoaXMuX3JlcXVlc3RRdWV1ZS5sZW5ndGg7KXRoaXMucmVxdWVzdC5hcHBseSh0aGlzLHRoaXMuX3JlcXVlc3RRdWV1ZS5zaGlmdCgpKX0uYmluZCh0aGlzKSl9fSxhLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT17fTtmb3IodmFyIGIgaW4gdGhpcyl0aGlzLmhhc093blByb3BlcnR5KGIpJiZ0aGlzW2JdJiYhYi5tYXRjaCgvXl8uKy8pJiYoYVtiXT10aGlzW2JdKTtyZXR1cm4gYX0sYS5wcm90b3R5cGUub249ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9YS5zcGxpdCgiICIpLGQ9MDtkPGMubGVuZ3RoO2QrKykidW5kZWZpbmVkIj09dHlwZW9mIHRoaXMuX2V2ZW50c1tjW2RdXSYmKHRoaXMuX2V2ZW50c1tjW2RdXT1bXSksdGhpcy5fZXZlbnRzW2NbZF1dLnB1c2goYil9LGEucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24oYSl7dmFyIGI9W10uc3BsaWNlLmNhbGwoYXJndW1lbnRzLDEpO2lmKHRoaXMuX2V2ZW50c1thXWluc3RhbmNlb2YgQXJyYXkpZm9yKHZhciBjPXRoaXMuX2V2ZW50c1thXSxkPTAsZT1jLmxlbmd0aDtlPmQ7ZCsrKWNbZF0uYXBwbHkodGhpcyxiKX0sYS5wcm90b3R5cGUub2ZmPWZ1bmN0aW9uKGEsYil7aWYodGhpcy5fZXZlbnRzW2FdaW5zdGFuY2VvZiBBcnJheSlmb3IodmFyIGM9dGhpcy5fZXZlbnRzW2FdLGQ9MCxlPWMubGVuZ3RoO2U+ZDtkKyspaWYoY1tkXT09PWIpe2Muc3BsaWNlKGQsMSk7YnJlYWt9fSxhLnByb3RvdHlwZS5xdWV1ZT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy50b2tlbj92b2lkIGEuYXBwbHkodGhpcyk6KHRoaXMuX3F1ZXVlLnB1c2goYSksdm9pZCB0aGlzLnJlZnJlc2goKSl9LGEucHJvdG90eXBlLnJlcXVlc3Q9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixoLGk9QXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cyksaj0hYS5tYXRjaCgvXmh0dHBzPzpcL1wvLyksaz1qP3RoaXMuZ2VvdHJpZ2dlcnNVcmwrYTphO2lmKHRoaXMucHJveHkmJihrPXRoaXMucHJveHkrayksImZ1bmN0aW9uIj09dHlwZW9mIGImJihjPWIsYj17fSksaiYmIXRoaXMudG9rZW4pcmV0dXJuIHRoaXMuX3JlcXVlc3RRdWV1ZS5wdXNoKGkpLHZvaWQgdGhpcy5yZWZyZXNoKCk7dmFyIGw9ZnVuY3Rpb24oKXt0cnl7ZD1KU09OLnBhcnNlKGgucmVzcG9uc2VUZXh0KSxmPWQuZXJyb3I/bnVsbDpkLGU9ZC5lcnJvcj9kLmVycm9yOm51bGx9Y2F0Y2goYSl7Zj1udWxsLGU9e3R5cGU6InBhcnNlX2Vycm9yIixtZXNzYWdlOiJjb3VuZCBub3QgcGFyc2UgcmVzcG9uc2UgYXMgSlNPTiJ9fWlmKGUmJiJpbnZhbGlkSGVhZGVyIj09PWUudHlwZSYmZS5oZWFkZXJzLkF1dGhvcml6YXRpb24pdGhpcy5fcmVxdWVzdFF1ZXVlLnB1c2goaSksdGhpcy5yZWZyZXNoKCk7ZWxzZSBpZihlKWlmKGUpYyhlLG51bGwsaCk7ZWxzZXt2YXIgYj17dHlwZToidW5leHBlY3RlZF9yZXNwb25zZSIsbWVzc2FnZToidGhlIGFwaSByZXR1cm5lZCBhIG5vbiBKU09OIG9yIHVuZXhwZWN0ZWQgZGF0YSJ9O2MoYixudWxsLGgpfWVsc2UgYyhudWxsLGYsaCl9LmJpbmQodGhpcyksbT1mdW5jdGlvbigpe3ZhciBhPXt0eXBlOiJodHRwX2Vycm9yIn07dHJ5e2EubWVzc2FnZT1KU09OLnBhcnNlKGgucmVzcG9uc2VUZXh0KX1jYXRjaChiKXthLm1lc3NhZ2U9Imh0dHAgZXJyb3IgYW5kIGNvdW5kIG5vdCBwYXJzZSByZXNwb25zZSBhcyBKU09OIn1jKGEsbnVsbCxoKX0uYmluZCh0aGlzKSxuPWZ1bmN0aW9uKCl7ND09PWgucmVhZHlTdGF0ZSYmaC5zdGF0dXM8NDAwP2woKTo0PT09aC5yZWFkeVN0YXRlJiZoLnN0YXR1cz49NDAwJiZtKCl9LmJpbmQodGhpcyk7aD1uZXcgWE1MSHR0cFJlcXVlc3QsaC5vbnJlYWR5c3RhdGVjaGFuZ2U9bjt2YXIgbztqPyhiLnRva2VuPXRoaXMudG9rZW4sbz1KU09OLnN0cmluZ2lmeShiKSk6bz1nLnNlcmlhbGl6ZShiKSxoLm9wZW4oIlBPU1QiLGspLGguc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1UeXBlIixqPyJhcHBsaWNhdGlvbi9qc29uIjoiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiksaiYmKGguc2V0UmVxdWVzdEhlYWRlcigiWC1HVC1DbGllbnQtTmFtZSIsImdlb3RyaWdnZXItanMiKSxoLnNldFJlcXVlc3RIZWFkZXIoIlgtR1QtQ2xpZW50LVZlcnNpb24iLCIxLjAuMCIpKSxoLnNlbmQobyl9LGEucHJvdG90eXBlLnBlcnNpc3Q9ZnVuY3Rpb24oKXt2YXIgYT17fTt0aGlzLmNsaWVudElkJiYoYS5jbGllbnRJZD10aGlzLmNsaWVudElkKSx0aGlzLmNsaWVudFNlY3JldCYmKGEuY2xpZW50U2VjcmV0PXRoaXMuY2xpZW50U2VjcmV0KSx0aGlzLnRva2VuJiYoYS50b2tlbj10aGlzLnRva2VuKSx0aGlzLnJlZnJlc2hUb2tlbiYmKGEucmVmcmVzaFRva2VuPXRoaXMucmVmcmVzaFRva2VuKSx0aGlzLmRldmljZUlkJiYoYS5kZXZpY2VJZD10aGlzLmRldmljZUlkKSx0aGlzLnByZWZlckxvY2FsU3RvcmFnZSYmaD9qLnNldCh0aGlzLmtleSxhKTppJiZrLnNldCh0aGlzLmtleSxhKX0sYS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMucHJlZmVyTG9jYWxTdG9yYWdlJiZoP2ouZXJhc2UodGhpcy5rZXkpOmkmJmsuZXJhc2UodGhpcy5rZXkpfSxlLlNlc3Npb249YTt2YXIgZz17bWVyZ2U6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMgaW4gYiliLmhhc093blByb3BlcnR5KGMpJiYoYVtjXT1iW2NdKTtyZXR1cm4gYX0saXNPYmplY3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIltvYmplY3QgT2JqZWN0XSI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSl9LHNlcmlhbGl6ZTpmdW5jdGlvbihhLGIpe3ZhciBjPWVuY29kZVVSSUNvbXBvbmVudCxkPVtdO2Zvcih2YXIgZSBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoZSkpe3ZhciBmLGg9Yj9iKyJbIitlKyJdIjplLGk9YVtlXTtmPWcuaXNPYmplY3QoaSk/Zy5zZXJpYWxpemUoaSxoKTpjKGgpKyI9IitjKGkpLGQucHVzaChmKX1yZXR1cm4gZC5qb2luKCImIil9fSxoPSJvYmplY3QiPT10eXBlb2Ygd2luZG93JiYib2JqZWN0Ij09dHlwZW9mIHdpbmRvdy5sb2NhbFN0b3JhZ2U/ITA6ITEsaT0ib2JqZWN0Ij09dHlwZW9mIGRvY3VtZW50JiYic3RyaW5nIj09dHlwZW9mIGRvY3VtZW50LmNvb2tpZT8hMDohMSxqPXtzZXQ6ZnVuY3Rpb24oYSxiKXt3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oYSxKU09OLnN0cmluZ2lmeShiKSl9LGdldDpmdW5jdGlvbihhKXtyZXR1cm4gSlNPTi5wYXJzZSh3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oYSkpfSxlcmFzZTpmdW5jdGlvbihhKXt3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oYSl9fSxrPXtnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9ZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoYSsiPVthLXpBLVowLTkuKCk9fCUvX10rKCR8OykiLCJnIikpO3JldHVybiBiJiZiWzBdP0pTT04ucGFyc2UoYlswXS5zdWJzdHJpbmcoYS5sZW5ndGgrMSxiWzBdLmxlbmd0aCkucmVwbGFjZSgiOyIsIiIpKXx8bnVsbDpudWxsfSxzZXQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVthKyI9IitKU09OLnN0cmluZ2lmeShiKSwicGF0aD0vIiwiZG9tYWluPSIrd2luZG93LmxvY2F0aW9uLmhvc3RdLGU9bmV3IERhdGU7cmV0dXJuIGUuc2V0RnVsbFllYXIoZS5nZXRGdWxsWWVhcigpKzEpLGQucHVzaChlLnRvR01UU3RyaW5nKCkpLGMmJmQucHVzaCgic2VjdXJlIiksZG9jdW1lbnQuY29va2llPWQuam9pbigiOyAiKX0sZXJhc2U6ZnVuY3Rpb24oYSl7ZG9jdW1lbnQuY29va2llPWErIjsgIituZXcgRGF0ZSgwKS50b1VUQ1N0cmluZygpfX07cmV0dXJuIGV9KTs=",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 02:16:39 GMT",
                    "Content-Length": "6548",
                    "Date": "Fri, 07 Nov 2014 02:16:39 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}