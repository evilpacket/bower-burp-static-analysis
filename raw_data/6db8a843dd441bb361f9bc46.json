{
    "url": "http://localhost:9999/firebug/firebug-lite/docs/beta/retweet.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>window.location</b> and written to <b>the 'href' property of a DOM element</b> via the following statement:<ul><li>elem.href = window.location;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/firebug/firebug-lite/docs/beta/retweet.js",
                "path": "/firebug/firebug-lite/docs/beta/retweet.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9maXJlYnVnL2ZpcmVidWctbGl0ZS9kb2NzL2JldGEvcmV0d2VldC5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNDc1Mw0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KRGF0ZTogRnJpLCAwNyBOb3YgMjAxNCAwMDoyMDo0NiBHTVQNCkxhc3QtTW9kaWZpZWQ6IEZyaSwgMDcgTm92IDIwMTQgMDA6MjA6NDQgR01UDQoNCi8qCiAqIEVhc3kgUmV0d2VldCBCdXR0b24KICogaHR0cDovL2Vqb2huLm9yZy9ibG9nL3JldHdlZXQvCiAqICAgYnkgSm9obiBSZXNpZyAoZWpvaG4ub3JnKQogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2U6CiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCiAqLwoKKGZ1bmN0aW9uKCl7Cgp3aW5kb3cuUmV0d2VldEpTID0gewoJLy8gWW91ciBCaXQubHkgVXNlcm5hbWUKCWJpdGx5X3VzZXI6ICJyZXR3ZWV0anMiLAoKCS8vIFlvdXIgQml0Lmx5IEFQSSBLZXkKCS8vIEZvdW5kIGhlcmU6IGh0dHA6Ly9iaXQubHkvYWNjb3VudAoJYml0bHlfa2V5OiAiUl82Mjg3YzkyZWNhZjllZmM2ZjM5ZTRmMzNiZGJmODBiMSIsCgoJLy8gVGhlIHRleHQgdG8gcmVwbGFjZSB0aGUgbGlua3Mgd2l0aAoJbGlua190ZXh0OiAoL3dpbmRvd3MvaS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50KSA/ICImIzk2NTg7IiA6ICImIzk4NTE7IikgKwoJCSImbmJzcDtSZXR3ZWV0IiwKCgkvLyBXaGF0ICMgdG8gc2hvdyAoVXNlICJjbGlja3MiIGZvciAjIG9mIGNsaWNrcyBvciAibm9uZSIgZm9yIG5vdGhpbmcpCgljb3VudF90eXBlOiAiY2xpY2tzIiwKCgkvLyBUd2VldCBQcmVmaXggdGV4dAoJLy8gIlJUIEBqZXJlc2lnICIgd291bGQgcmVzdWx0IGluOiAiUlQgQGplcmVzaWcgTGluayBUaXRsZSBodHRwOi8vYml0Lmx5L2FzZGYiCglwcmVmaXg6ICIiLAoKCS8vIFN0eWxlIGluZm9ybWF0aW9uCglzdHlsaW5nOiAiYS5yZXR3ZWV0IHsgZm9udDogMTJweCBIZWx2ZXRpY2EsQXJpYWw7IGNvbG9yOiAjMDAwOyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IGJvcmRlcjogMHB4OyB9IiArCgkJImEucmV0d2VldCBzcGFuIHsgY29sb3I6ICNGRkY7IGJhY2tncm91bmQ6ICM5NENDM0Q7IG1hcmdpbi1sZWZ0OiAycHg7IGJvcmRlcjogMXB4IHNvbGlkICM0M0E1MkE7IC1tb3otYm9yZGVyLXJhZGl1czogM3B4OyAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDNweDsgYm9yZGVyLXJhZGl1czogM3B4OyBwYWRkaW5nOiAzcHg7IH0iICsKCQkiYS52ZXJ0IHsgZGlzcGxheTogYmxvY2s7IHRleHQtYWxpZ246IGNlbnRlcjsgZm9udC1zaXplOiAxNnB4OyBmbG9hdDogbGVmdDsgbWFyZ2luOiA0cHg7IH0iICsKCQkiYS5yZXR3ZWV0IHN0cm9uZy52ZXJ0IHsgZGlzcGxheTogYmxvY2s7IG1hcmdpbi1ib3R0b206IDRweDsgYmFja2dyb3VuZDogI0Y1RjVGNTsgYm9yZGVyOiAxcHggc29saWQgI0VFRTsgLW1vei1ib3JkZXItcmFkaXVzOiAzcHg7IC13ZWJraXQtYm9yZGVyLXJhZGl1czogM3B4OyBib3JkZXItcmFkaXVzOiAzcHg7IHBhZGRpbmc6IDNweDsgfSIgKwoJCSJhLnJldHdlZXQgc3Bhbi52ZXJ0IHsgZGlzcGxheTogYmxvY2s7IGZvbnQtc2l6ZTogMTJweDsgbWFyZ2luLWxlZnQ6IDBweDsgfSIKfTsKCi8vLy8vLy8vLy8vLy8vLy8gTm8gTmVlZCB0byBDb25maWd1cmUgQmVsb3cgSGVyZSAvLy8vLy8vLy8vLy8vLy8vCgp2YXIgbG9hZENvdW50ID0gMTsKCi8vIEFzeW5jaHJvbm91c2x5IGxvYWQgdGhlIEJpdC5seSBKYXZhU2NyaXB0IEFQSQovLyBJZiBpdCBoYXNuJ3QgYmVlbiBsb2FkZWQgYWxyZWFkeQppZiAoIHR5cGVvZiBCaXRseUNsaWVudCA9PT0gInVuZGVmaW5lZCIgKSB7Cgl2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF0gfHwKCQlkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7Cgl2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CglzY3JpcHQuc3JjID0gImh0dHA6Ly9iaXQubHkvamF2YXNjcmlwdC1hcGkuanM/dmVyc2lvbj1sYXRlc3QmbG9naW49IiArCgkJUmV0d2VldEpTLmJpdGx5X3VzZXIgKyAiJmFwaUtleT0iICsgUmV0d2VldEpTLmJpdGx5X2tleTsKCXNjcmlwdC5jaGFyU2V0ID0gInV0Zi04IjsKCWhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApOwoKCXZhciBjaGVjayA9IHNldEludGVydmFsKGZ1bmN0aW9uKCl7CgkJaWYgKCB0eXBlb2YgQml0bHlDQiAhPT0gInVuZGVmaW5lZCIgKSB7CgkJCWNsZWFySW50ZXJ2YWwoIGNoZWNrICk7CgkJCWhlYWQucmVtb3ZlQ2hpbGQoIHNjcmlwdCApOwoJCQlsb2FkZWQoKTsKCQl9Cgl9LCAxMCk7CgoJbG9hZENvdW50ID0gMDsKfQoKaWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICkgewoJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGxvYWRlZCwgZmFsc2UpOwoKfSBlbHNlIGlmICggd2luZG93LmF0dGFjaEV2ZW50ICkgewoJd2luZG93LmF0dGFjaEV2ZW50KCJvbmxvYWQiLCBsb2FkZWQpOwp9CgpmdW5jdGlvbiBsb2FkZWQoKXsKCS8vIE5lZWQgdG8gd2FpdCBmb3IgZG9jIHJlYWR5IGFuZCBqcyByZWFkeQoJaWYgKCArK2xvYWRDb3VudCA8IDIgKSB7CgkJcmV0dXJuOwoJfQoKCXZhciBlbGVtcyA9IFtdLCB1cmxFbGVtID0ge30sIGhhc2hVUkwgPSB7fTsKCglCaXRseUNCLnNob3J0ZW5SZXNwb25zZSA9IGZ1bmN0aW9uKGRhdGEpIHsKCQlmb3IgKCB2YXIgdXJsIGluIGRhdGEucmVzdWx0cyApIHsKCQkJdmFyIGhhc2ggPSBkYXRhLnJlc3VsdHNbdXJsXS51c2VySGFzaDsKCQkJaGFzaFVSTFtoYXNoXSA9IHVybDsKCgkJCXZhciBlbGVtcyA9IHVybEVsZW1bIHVybCBdOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgZWxlbXMubGVuZ3RoOyBpKysgKSB7CgkJCQllbGVtc1tpXS5ocmVmICs9IGhhc2g7CgkJCX0KCgkJCWlmICggUmV0d2VldEpTLmNvdW50X3R5cGUgPT09ICJjbGlja3MiICkgewoJCQkJQml0bHlDbGllbnQuc3RhdHMoaGFzaCwgJ0JpdGx5Q0Iuc3RhdHNSZXNwb25zZScpOwoJCQl9CgkJfQoJfTsKCglCaXRseUNCLnN0YXRzUmVzcG9uc2UgPSBmdW5jdGlvbihkYXRhKSB7CgkJdmFyIGNsaWNrcyA9IGRhdGEucmVzdWx0cy5jbGlja3MsIGhhc2ggPSBkYXRhLnJlc3VsdHMudXNlckhhc2g7CgkJdmFyIHVybCA9IGhhc2hVUkxbIGhhc2ggXSwgZWxlbXMgPSB1cmxFbGVtWyB1cmwgXTsKCgkJaWYgKCBjbGlja3MgPiAwICkgewoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBlbGVtcy5sZW5ndGg7IGkrKyApIHsKCQkJCXZhciBzdHJvbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHJvbmciKTsKCQkJCXN0cm9uZy5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIGNsaWNrcyArICIgIiApICk7CgkJCQllbGVtc1tpXS5pbnNlcnRCZWZvcmUoc3Ryb25nLCBlbGVtc1tpXS5maXJzdENoaWxkKTsKCgkJCQlpZiAoIC8oXnxccyl2ZXJ0KFxzfCQpLy50ZXN0KCBlbGVtc1tpXS5jbGFzc05hbWUgKSApIHsKCQkJCQllbGVtc1tpXS5maXJzdENoaWxkLmNsYXNzTmFtZSA9IGVsZW1zW2ldLmxhc3RDaGlsZC5jbGFzc05hbWUgPSAidmVydCI7CgkJCQl9CgkJCX0KCQl9CgoJCWhhc2hVUkxbIGhhc2ggXSA9IHVybEVsZW1bIHVybCBdID0gbnVsbDsKCX07CgoJaWYgKCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkgewoJCWVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgicmV0d2VldCIpOwoJfSBlbHNlIHsKCQl2YXIgdG1wID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImEiKTsKCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCB0bXAubGVuZ3RoOyBpKysgKSB7CgkJCWlmICggLyhefFxzKXJldHdlZXQoXHN8JCkvLnRlc3QoIHRtcFtpXS5jbGFzc05hbWUgKSApIHsKCQkJCWVsZW1zLnB1c2goIHRtcFtpXSApOwoJCQl9CgkJfQoJfQoKCWlmICggZWxlbXMubGVuZ3RoICYmIFJldHdlZXRKUy5zdHlsaW5nICkgewoJCXZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7CgkJc3R5bGUudHlwZSA9ICJ0ZXh0L2NzcyI7CgoJCXRyeSB7CgkJCXN0eWxlLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSggUmV0d2VldEpTLnN0eWxpbmcgKSApOwoJCX0gY2F0Y2ggKGUpIHsKCQkJaWYgKCBzdHlsZS5zdHlsZVNoZWV0ICkgewoJCQkJc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gUmV0d2VldEpTLnN0eWxpbmc7CgkJCX0KCQl9CgoJCWRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoIHN0eWxlICk7Cgl9CgoJZm9yICggdmFyIGkgPSAwOyBpIDwgZWxlbXMubGVuZ3RoOyBpKysgKSB7CgkJdmFyIGVsZW0gPSBlbGVtc1tpXTsKCgkJaWYgKCAvKF58XHMpc2VsZihcc3wkKS8udGVzdCggZWxlbS5jbGFzc05hbWUgKSApIHsKCQkJZWxlbS5ocmVmID0gd2luZG93LmxvY2F0aW9uOwoJCQllbGVtLnRpdGxlID0gZG9jdW1lbnQudGl0bGU7CgkJfQoKCQl2YXIgb3JpZ1RleHQgPSBlbGVtLnRpdGxlIHx8IGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQsCgkJCWhyZWYgPSBlbGVtLmhyZWY7CgoJCWVsZW0uaW5uZXJIVE1MID0gIjxzcGFuPiIgKyBSZXR3ZWV0SlMubGlua190ZXh0ICsgIjwvc3Bhbj4iOwoJCWVsZW0udGl0bGUgPSAiIjsKCQllbGVtLmhyZWYgPSAiaHR0cDovL3R3aXR0ZXIuY29tL2hvbWU/c3RhdHVzPSIgKwoJCQllbmNvZGVVUklDb21wb25lbnQoUmV0d2VldEpTLnByZWZpeCArIG9yaWdUZXh0ICsgIiBodHRwOi8vYml0Lmx5LyIpOwoKCQlpZiAoIHVybEVsZW1bIGhyZWYgXSApIHsKCQkJdXJsRWxlbVsgaHJlZiBdLnB1c2goIGVsZW0gKTsKCQl9IGVsc2UgewoJCQl1cmxFbGVtWyBocmVmIF0gPSBbIGVsZW0gXTsKCQkJQml0bHlDbGllbnQuc2hvcnRlbihocmVmLCAnQml0bHlDQi5zaG9ydGVuUmVzcG9uc2UnKTsKCQl9Cgl9Cgp9Cgp9KSgpOwo=",
                "body": "LyoKICogRWFzeSBSZXR3ZWV0IEJ1dHRvbgogKiBodHRwOi8vZWpvaG4ub3JnL2Jsb2cvcmV0d2VldC8KICogICBieSBKb2huIFJlc2lnIChlam9obi5vcmcpCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZToKICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAKICovCgooZnVuY3Rpb24oKXsKCndpbmRvdy5SZXR3ZWV0SlMgPSB7CgkvLyBZb3VyIEJpdC5seSBVc2VybmFtZQoJYml0bHlfdXNlcjogInJldHdlZXRqcyIsCgoJLy8gWW91ciBCaXQubHkgQVBJIEtleQoJLy8gRm91bmQgaGVyZTogaHR0cDovL2JpdC5seS9hY2NvdW50CgliaXRseV9rZXk6ICJSXzYyODdjOTJlY2FmOWVmYzZmMzllNGYzM2JkYmY4MGIxIiwKCgkvLyBUaGUgdGV4dCB0byByZXBsYWNlIHRoZSBsaW5rcyB3aXRoCglsaW5rX3RleHQ6ICgvd2luZG93cy9pLnRlc3QoIG5hdmlnYXRvci51c2VyQWdlbnQpID8gIiYjOTY1ODsiIDogIiYjOTg1MTsiKSArCgkJIiZuYnNwO1JldHdlZXQiLAoKCS8vIFdoYXQgIyB0byBzaG93IChVc2UgImNsaWNrcyIgZm9yICMgb2YgY2xpY2tzIG9yICJub25lIiBmb3Igbm90aGluZykKCWNvdW50X3R5cGU6ICJjbGlja3MiLAoKCS8vIFR3ZWV0IFByZWZpeCB0ZXh0CgkvLyAiUlQgQGplcmVzaWcgIiB3b3VsZCByZXN1bHQgaW46ICJSVCBAamVyZXNpZyBMaW5rIFRpdGxlIGh0dHA6Ly9iaXQubHkvYXNkZiIKCXByZWZpeDogIiIsCgoJLy8gU3R5bGUgaW5mb3JtYXRpb24KCXN0eWxpbmc6ICJhLnJldHdlZXQgeyBmb250OiAxMnB4IEhlbHZldGljYSxBcmlhbDsgY29sb3I6ICMwMDA7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgYm9yZGVyOiAwcHg7IH0iICsKCQkiYS5yZXR3ZWV0IHNwYW4geyBjb2xvcjogI0ZGRjsgYmFja2dyb3VuZDogIzk0Q0MzRDsgbWFyZ2luLWxlZnQ6IDJweDsgYm9yZGVyOiAxcHggc29saWQgIzQzQTUyQTsgLW1vei1ib3JkZXItcmFkaXVzOiAzcHg7IC13ZWJraXQtYm9yZGVyLXJhZGl1czogM3B4OyBib3JkZXItcmFkaXVzOiAzcHg7IHBhZGRpbmc6IDNweDsgfSIgKwoJCSJhLnZlcnQgeyBkaXNwbGF5OiBibG9jazsgdGV4dC1hbGlnbjogY2VudGVyOyBmb250LXNpemU6IDE2cHg7IGZsb2F0OiBsZWZ0OyBtYXJnaW46IDRweDsgfSIgKwoJCSJhLnJldHdlZXQgc3Ryb25nLnZlcnQgeyBkaXNwbGF5OiBibG9jazsgbWFyZ2luLWJvdHRvbTogNHB4OyBiYWNrZ3JvdW5kOiAjRjVGNUY1OyBib3JkZXI6IDFweCBzb2xpZCAjRUVFOyAtbW96LWJvcmRlci1yYWRpdXM6IDNweDsgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAzcHg7IGJvcmRlci1yYWRpdXM6IDNweDsgcGFkZGluZzogM3B4OyB9IiArCgkJImEucmV0d2VldCBzcGFuLnZlcnQgeyBkaXNwbGF5OiBibG9jazsgZm9udC1zaXplOiAxMnB4OyBtYXJnaW4tbGVmdDogMHB4OyB9Igp9OwoKLy8vLy8vLy8vLy8vLy8vLyBObyBOZWVkIHRvIENvbmZpZ3VyZSBCZWxvdyBIZXJlIC8vLy8vLy8vLy8vLy8vLy8KCnZhciBsb2FkQ291bnQgPSAxOwoKLy8gQXN5bmNocm9ub3VzbHkgbG9hZCB0aGUgQml0Lmx5IEphdmFTY3JpcHQgQVBJCi8vIElmIGl0IGhhc24ndCBiZWVuIGxvYWRlZCBhbHJlYWR5CmlmICggdHlwZW9mIEJpdGx5Q2xpZW50ID09PSAidW5kZWZpbmVkIiApIHsKCXZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXSB8fAoJCWRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKCXZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKCXNjcmlwdC5zcmMgPSAiaHR0cDovL2JpdC5seS9qYXZhc2NyaXB0LWFwaS5qcz92ZXJzaW9uPWxhdGVzdCZsb2dpbj0iICsKCQlSZXR3ZWV0SlMuYml0bHlfdXNlciArICImYXBpS2V5PSIgKyBSZXR3ZWV0SlMuYml0bHlfa2V5OwoJc2NyaXB0LmNoYXJTZXQgPSAidXRmLTgiOwoJaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICk7CgoJdmFyIGNoZWNrID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXsKCQlpZiAoIHR5cGVvZiBCaXRseUNCICE9PSAidW5kZWZpbmVkIiApIHsKCQkJY2xlYXJJbnRlcnZhbCggY2hlY2sgKTsKCQkJaGVhZC5yZW1vdmVDaGlsZCggc2NyaXB0ICk7CgkJCWxvYWRlZCgpOwoJCX0KCX0sIDEwKTsKCglsb2FkQ291bnQgPSAwOwp9CgppZiAoIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7Cglkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgbG9hZGVkLCBmYWxzZSk7Cgp9IGVsc2UgaWYgKCB3aW5kb3cuYXR0YWNoRXZlbnQgKSB7Cgl3aW5kb3cuYXR0YWNoRXZlbnQoIm9ubG9hZCIsIGxvYWRlZCk7Cn0KCmZ1bmN0aW9uIGxvYWRlZCgpewoJLy8gTmVlZCB0byB3YWl0IGZvciBkb2MgcmVhZHkgYW5kIGpzIHJlYWR5CglpZiAoICsrbG9hZENvdW50IDwgMiApIHsKCQlyZXR1cm47Cgl9CgoJdmFyIGVsZW1zID0gW10sIHVybEVsZW0gPSB7fSwgaGFzaFVSTCA9IHt9OwoKCUJpdGx5Q0Iuc2hvcnRlblJlc3BvbnNlID0gZnVuY3Rpb24oZGF0YSkgewoJCWZvciAoIHZhciB1cmwgaW4gZGF0YS5yZXN1bHRzICkgewoJCQl2YXIgaGFzaCA9IGRhdGEucmVzdWx0c1t1cmxdLnVzZXJIYXNoOwoJCQloYXNoVVJMW2hhc2hdID0gdXJsOwoKCQkJdmFyIGVsZW1zID0gdXJsRWxlbVsgdXJsIF07CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBlbGVtcy5sZW5ndGg7IGkrKyApIHsKCQkJCWVsZW1zW2ldLmhyZWYgKz0gaGFzaDsKCQkJfQoKCQkJaWYgKCBSZXR3ZWV0SlMuY291bnRfdHlwZSA9PT0gImNsaWNrcyIgKSB7CgkJCQlCaXRseUNsaWVudC5zdGF0cyhoYXNoLCAnQml0bHlDQi5zdGF0c1Jlc3BvbnNlJyk7CgkJCX0KCQl9Cgl9OwoKCUJpdGx5Q0Iuc3RhdHNSZXNwb25zZSA9IGZ1bmN0aW9uKGRhdGEpIHsKCQl2YXIgY2xpY2tzID0gZGF0YS5yZXN1bHRzLmNsaWNrcywgaGFzaCA9IGRhdGEucmVzdWx0cy51c2VySGFzaDsKCQl2YXIgdXJsID0gaGFzaFVSTFsgaGFzaCBdLCBlbGVtcyA9IHVybEVsZW1bIHVybCBdOwoKCQlpZiAoIGNsaWNrcyA+IDAgKSB7CgkJCWZvciAoIHZhciBpID0gMDsgaSA8IGVsZW1zLmxlbmd0aDsgaSsrICkgewoJCQkJdmFyIHN0cm9uZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0cm9uZyIpOwoJCQkJc3Ryb25nLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSggY2xpY2tzICsgIiAiICkgKTsKCQkJCWVsZW1zW2ldLmluc2VydEJlZm9yZShzdHJvbmcsIGVsZW1zW2ldLmZpcnN0Q2hpbGQpOwoKCQkJCWlmICggLyhefFxzKXZlcnQoXHN8JCkvLnRlc3QoIGVsZW1zW2ldLmNsYXNzTmFtZSApICkgewoJCQkJCWVsZW1zW2ldLmZpcnN0Q2hpbGQuY2xhc3NOYW1lID0gZWxlbXNbaV0ubGFzdENoaWxkLmNsYXNzTmFtZSA9ICJ2ZXJ0IjsKCQkJCX0KCQkJfQoJCX0KCgkJaGFzaFVSTFsgaGFzaCBdID0gdXJsRWxlbVsgdXJsIF0gPSBudWxsOwoJfTsKCglpZiAoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7CgkJZWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJyZXR3ZWV0Iik7Cgl9IGVsc2UgewoJCXZhciB0bXAgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYSIpOwoJCWZvciAoIHZhciBpID0gMDsgaSA8IHRtcC5sZW5ndGg7IGkrKyApIHsKCQkJaWYgKCAvKF58XHMpcmV0d2VldChcc3wkKS8udGVzdCggdG1wW2ldLmNsYXNzTmFtZSApICkgewoJCQkJZWxlbXMucHVzaCggdG1wW2ldICk7CgkJCX0KCQl9Cgl9CgoJaWYgKCBlbGVtcy5sZW5ndGggJiYgUmV0d2VldEpTLnN0eWxpbmcgKSB7CgkJdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3R5bGUiKTsKCQlzdHlsZS50eXBlID0gInRleHQvY3NzIjsKCgkJdHJ5IHsKCQkJc3R5bGUuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCBSZXR3ZWV0SlMuc3R5bGluZyApICk7CgkJfSBjYXRjaCAoZSkgewoJCQlpZiAoIHN0eWxlLnN0eWxlU2hlZXQgKSB7CgkJCQlzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBSZXR3ZWV0SlMuc3R5bGluZzsKCQkJfQoJCX0KCgkJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggc3R5bGUgKTsKCX0KCglmb3IgKCB2YXIgaSA9IDA7IGkgPCBlbGVtcy5sZW5ndGg7IGkrKyApIHsKCQl2YXIgZWxlbSA9IGVsZW1zW2ldOwoKCQlpZiAoIC8oXnxccylzZWxmKFxzfCQpLy50ZXN0KCBlbGVtLmNsYXNzTmFtZSApICkgewoJCQllbGVtLmhyZWYgPSB3aW5kb3cubG9jYXRpb247CgkJCWVsZW0udGl0bGUgPSBkb2N1bWVudC50aXRsZTsKCQl9CgoJCXZhciBvcmlnVGV4dCA9IGVsZW0udGl0bGUgfHwgZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCwKCQkJaHJlZiA9IGVsZW0uaHJlZjsKCgkJZWxlbS5pbm5lckhUTUwgPSAiPHNwYW4+IiArIFJldHdlZXRKUy5saW5rX3RleHQgKyAiPC9zcGFuPiI7CgkJZWxlbS50aXRsZSA9ICIiOwoJCWVsZW0uaHJlZiA9ICJodHRwOi8vdHdpdHRlci5jb20vaG9tZT9zdGF0dXM9IiArCgkJCWVuY29kZVVSSUNvbXBvbmVudChSZXR3ZWV0SlMucHJlZml4ICsgb3JpZ1RleHQgKyAiIGh0dHA6Ly9iaXQubHkvIik7CgoJCWlmICggdXJsRWxlbVsgaHJlZiBdICkgewoJCQl1cmxFbGVtWyBocmVmIF0ucHVzaCggZWxlbSApOwoJCX0gZWxzZSB7CgkJCXVybEVsZW1bIGhyZWYgXSA9IFsgZWxlbSBdOwoJCQlCaXRseUNsaWVudC5zaG9ydGVuKGhyZWYsICdCaXRseUNCLnNob3J0ZW5SZXNwb25zZScpOwoJCX0KCX0KCn0KCn0pKCk7Cg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 00:20:44 GMT",
                    "Content-Length": "4753",
                    "Date": "Fri, 07 Nov 2014 00:20:46 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}