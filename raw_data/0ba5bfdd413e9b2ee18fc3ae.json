{
    "url": "http://localhost:9999/keboola/storage-api-console/test/lib/angular/angular-scenario.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.location.href</b> and written to <b>the 'text()' function of JQuery</b> via the following statements:<ul><li>var href = window.location.href;</li><li>body.find('#system-error').tex...' ) .text('Scenario runner mus...' + href.split(':' ) [0 ] + ':// is not supporte...' );</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/keboola/storage-api-console/test/lib/angular/angular-scenario.js",
                "path": "/keboola/storage-api-console/test/lib/angular/angular-scenario.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9rZWJvb2xhL3N0b3JhZ2UtYXBpLWNvbnNvbGUvdGVzdC9saWIvYW5ndWxhci9hbmd1bGFyLXNjZW5hcmlvLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNzk0MDEwDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0DQpEYXRlOiBTYXQsIDA4IE5vdiAyMDE0IDE0OjUyOjAwIEdNVA0KTGFzdC1Nb2RpZmllZDogU2F0LCAwOCBOb3YgMjAxNCAxNDo1MjowMCBHTVQNCg0KLyohCiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjEuNy4yCiAqIGh0dHA6Ly9qcXVlcnkuY29tLwogKgogKiBDb3B5cmlnaHQgMjAxMSwgSm9obiBSZXNpZwogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgb3IgR1BMIFZlcnNpb24gMiBsaWNlbnNlcy4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKgogKiBJbmNsdWRlcyBTaXp6bGUuanMKICogaHR0cDovL3NpenpsZWpzLmNvbS8KICogQ29weXJpZ2h0IDIwMTEsIFRoZSBEb2pvIEZvdW5kYXRpb24KICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCwgQlNELCBhbmQgR1BMIExpY2Vuc2VzLgogKgogKiBEYXRlOiBXZWQgTWFyIDIxIDEyOjQ2OjM0IDIwMTIgLTA3MDAKICovCihmdW5jdGlvbiggd2luZG93LCB1bmRlZmluZWQgKSB7Cid1c2Ugc3RyaWN0JzsKCi8vIFVzZSB0aGUgY29ycmVjdCBkb2N1bWVudCBhY2NvcmRpbmdseSB3aXRoIHdpbmRvdyBhcmd1bWVudCAoc2FuZGJveCkKdmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LAoJbmF2aWdhdG9yID0gd2luZG93Lm5hdmlnYXRvciwKCWxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uOwp2YXIgalF1ZXJ5ID0gKGZ1bmN0aW9uKCkgewoKLy8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnkKdmFyIGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHsKCQkvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCcKCQlyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCwgcm9vdGpRdWVyeSApOwoJfSwKCgkvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGUKCV9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LAoKCS8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlCglfJCA9IHdpbmRvdy4kLAoKCS8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KQoJcm9vdGpRdWVyeSwKCgkvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5ncyBvciBJRCBzdHJpbmdzCgkvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpCglxdWlja0V4cHIgPSAvXig/OlteIzxdKig8W1x3XFddKz4pW14+XSokfCMoW1x3XC1dKikkKS8sCgoJLy8gQ2hlY2sgaWYgYSBzdHJpbmcgaGFzIGEgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyIGluIGl0Cglybm90d2hpdGUgPSAvXFMvLAoKCS8vIFVzZWQgZm9yIHRyaW1taW5nIHdoaXRlc3BhY2UKCXRyaW1MZWZ0ID0gL15ccysvLAoJdHJpbVJpZ2h0ID0gL1xzKyQvLAoKCS8vIE1hdGNoIGEgc3RhbmRhbG9uZSB0YWcKCXJzaW5nbGVUYWcgPSAvXjwoXHcrKVxzKlwvPz4oPzo8XC9cMT4pPyQvLAoKCS8vIEpTT04gUmVnRXhwCglydmFsaWRjaGFycyA9IC9eW1xdLDp7fVxzXSokLywKCXJ2YWxpZGVzY2FwZSA9IC9cXCg/OlsiXFxcL2JmbnJ0XXx1WzAtOWEtZkEtRl17NH0pL2csCglydmFsaWR0b2tlbnMgPSAvIlteIlxcXG5ccl0qInx0cnVlfGZhbHNlfG51bGx8LT9cZCsoPzpcLlxkKik/KD86W2VFXVsrXC1dP1xkKyk/L2csCglydmFsaWRicmFjZXMgPSAvKD86Xnw6fCwpKD86XHMqXFspKy9nLAoKCS8vIFVzZXJhZ2VudCBSZWdFeHAKCXJ3ZWJraXQgPSAvKHdlYmtpdClbIFwvXShbXHcuXSspLywKCXJvcGVyYSA9IC8ob3BlcmEpKD86Lip2ZXJzaW9uKT9bIFwvXShbXHcuXSspLywKCXJtc2llID0gLyhtc2llKSAoW1x3Ll0rKS8sCglybW96aWxsYSA9IC8obW96aWxsYSkoPzouKj8gcnY6KFtcdy5dKykpPy8sCgoJLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nCglyZGFzaEFscGhhID0gLy0oW2Etel18WzAtOV0pL2lnLAoJcm1zUHJlZml4ID0gL14tbXMtLywKCgkvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpCglmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkgewoJCXJldHVybiAoIGxldHRlciArICIiICkudG9VcHBlckNhc2UoKTsKCX0sCgoJLy8gS2VlcCBhIFVzZXJBZ2VudCBzdHJpbmcgZm9yIHVzZSB3aXRoIGpRdWVyeS5icm93c2VyCgl1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LAoKCS8vIEZvciBtYXRjaGluZyB0aGUgZW5naW5lIGFuZCB2ZXJzaW9uIG9mIHRoZSBicm93c2VyCglicm93c2VyTWF0Y2gsCgoJLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5CglyZWFkeUxpc3QsCgoJLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIKCURPTUNvbnRlbnRMb2FkZWQsCgoJLy8gU2F2ZSBhIHJlZmVyZW5jZSB0byBzb21lIGNvcmUgbWV0aG9kcwoJdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLAoJaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSwKCXB1c2ggPSBBcnJheS5wcm90b3R5cGUucHVzaCwKCXNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLAoJdHJpbSA9IFN0cmluZy5wcm90b3R5cGUudHJpbSwKCWluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiwKCgkvLyBbW0NsYXNzXV0gLT4gdHlwZSBwYWlycwoJY2xhc3MydHlwZSA9IHt9OwoKalF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHsKCWNvbnN0cnVjdG9yOiBqUXVlcnksCglpbml0OiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3RqUXVlcnkgKSB7CgkJdmFyIG1hdGNoLCBlbGVtLCByZXQsIGRvYzsKCgkJLy8gSGFuZGxlICQoIiIpLCAkKG51bGwpLCBvciAkKHVuZGVmaW5lZCkKCQlpZiAoICFzZWxlY3RvciApIHsKCQkJcmV0dXJuIHRoaXM7CgkJfQoKCQkvLyBIYW5kbGUgJChET01FbGVtZW50KQoJCWlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7CgkJCXRoaXMuY29udGV4dCA9IHRoaXNbMF0gPSBzZWxlY3RvcjsKCQkJdGhpcy5sZW5ndGggPSAxOwoJCQlyZXR1cm4gdGhpczsKCQl9CgoJCS8vIFRoZSBib2R5IGVsZW1lbnQgb25seSBleGlzdHMgb25jZSwgb3B0aW1pemUgZmluZGluZyBpdAoJCWlmICggc2VsZWN0b3IgPT09ICJib2R5IiAmJiAhY29udGV4dCAmJiBkb2N1bWVudC5ib2R5ICkgewoJCQl0aGlzLmNvbnRleHQgPSBkb2N1bWVudDsKCQkJdGhpc1swXSA9IGRvY3VtZW50LmJvZHk7CgkJCXRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjsKCQkJdGhpcy5sZW5ndGggPSAxOwoJCQlyZXR1cm4gdGhpczsKCQl9CgoJCS8vIEhhbmRsZSBIVE1MIHN0cmluZ3MKCQlpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gInN0cmluZyIgKSB7CgkJCS8vIEFyZSB3ZSBkZWFsaW5nIHdpdGggSFRNTCBzdHJpbmcgb3IgYW4gSUQ/CgkJCWlmICggc2VsZWN0b3IuY2hhckF0KDApID09PSAiPCIgJiYgc2VsZWN0b3IuY2hhckF0KCBzZWxlY3Rvci5sZW5ndGggLSAxICkgPT09ICI+IiAmJiBzZWxlY3Rvci5sZW5ndGggPj0gMyApIHsKCQkJCS8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrCgkJCQltYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTsKCgkJCX0gZWxzZSB7CgkJCQltYXRjaCA9IHF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApOwoJCQl9CgoJCQkvLyBWZXJpZnkgYSBtYXRjaCwgYW5kIHRoYXQgbm8gY29udGV4dCB3YXMgc3BlY2lmaWVkIGZvciAjaWQKCQkJaWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkgewoKCQkJCS8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KQoJCQkJaWYgKCBtYXRjaFsxXSApIHsKCQkJCQljb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbMF0gOiBjb250ZXh0OwoJCQkJCWRvYyA9ICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQgKTsKCgkJCQkJLy8gSWYgYSBzaW5nbGUgc3RyaW5nIGlzIHBhc3NlZCBpbiBhbmQgaXQncyBhIHNpbmdsZSB0YWcKCQkJCQkvLyBqdXN0IGRvIGEgY3JlYXRlRWxlbWVudCBhbmQgc2tpcCB0aGUgcmVzdAoJCQkJCXJldCA9IHJzaW5nbGVUYWcuZXhlYyggc2VsZWN0b3IgKTsKCgkJCQkJaWYgKCByZXQgKSB7CgkJCQkJCWlmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHsKCQkJCQkJCXNlbGVjdG9yID0gWyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCByZXRbMV0gKSBdOwoJCQkJCQkJalF1ZXJ5LmZuLmF0dHIuY2FsbCggc2VsZWN0b3IsIGNvbnRleHQsIHRydWUgKTsKCgkJCQkJCX0gZWxzZSB7CgkJCQkJCQlzZWxlY3RvciA9IFsgZG9jLmNyZWF0ZUVsZW1lbnQoIHJldFsxXSApIF07CgkJCQkJCX0KCgkJCQkJfSBlbHNlIHsKCQkJCQkJcmV0ID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIFsgbWF0Y2hbMV0gXSwgWyBkb2MgXSApOwoJCQkJCQlzZWxlY3RvciA9ICggcmV0LmNhY2hlYWJsZSA/IGpRdWVyeS5jbG9uZShyZXQuZnJhZ21lbnQpIDogcmV0LmZyYWdtZW50ICkuY2hpbGROb2RlczsKCQkJCQl9CgoJCQkJCXJldHVybiBqUXVlcnkubWVyZ2UoIHRoaXMsIHNlbGVjdG9yICk7CgoJCQkJLy8gSEFORExFOiAkKCIjaWQiKQoJCQkJfSBlbHNlIHsKCQkJCQllbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWzJdICk7CgoJCQkJCS8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zCgkJCQkJLy8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2MwoJCQkJCWlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7CgkJCQkJCS8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBJRSBhbmQgT3BlcmEgcmV0dXJuIGl0ZW1zCgkJCQkJCS8vIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRAoJCQkJCQlpZiAoIGVsZW0uaWQgIT09IG1hdGNoWzJdICkgewoJCQkJCQkJcmV0dXJuIHJvb3RqUXVlcnkuZmluZCggc2VsZWN0b3IgKTsKCQkJCQkJfQoKCQkJCQkJLy8gT3RoZXJ3aXNlLCB3ZSBpbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdAoJCQkJCQl0aGlzLmxlbmd0aCA9IDE7CgkJCQkJCXRoaXNbMF0gPSBlbGVtOwoJCQkJCX0KCgkJCQkJdGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7CgkJCQkJdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yOwoJCQkJCXJldHVybiB0aGlzOwoJCQkJfQoKCQkJLy8gSEFORExFOiAkKGV4cHIsICQoLi4uKSkKCQkJfSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7CgkJCQlyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3RqUXVlcnkgKS5maW5kKCBzZWxlY3RvciApOwoKCQkJLy8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpCgkJCS8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKQoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApOwoJCQl9CgoJCS8vIEhBTkRMRTogJChmdW5jdGlvbikKCQkvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHkKCQl9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHsKCQkJcmV0dXJuIHJvb3RqUXVlcnkucmVhZHkoIHNlbGVjdG9yICk7CgkJfQoKCQlpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7CgkJCXRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvci5zZWxlY3RvcjsKCQkJdGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDsKCQl9CgoJCXJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApOwoJfSwKCgkvLyBTdGFydCB3aXRoIGFuIGVtcHR5IHNlbGVjdG9yCglzZWxlY3RvcjogIiIsCgoJLy8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZAoJanF1ZXJ5OiAiMS43LjIiLAoKCS8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMAoJbGVuZ3RoOiAwLAoKCS8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0CglzaXplOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5sZW5ndGg7Cgl9LAoKCXRvQXJyYXk6IGZ1bmN0aW9uKCkgewoJCXJldHVybiBzbGljZS5jYWxsKCB0aGlzLCAwICk7Cgl9LAoKCS8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1IKCS8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5CglnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7CgkJcmV0dXJuIG51bSA9PSBudWxsID8KCgkJCS8vIFJldHVybiBhICdjbGVhbicgYXJyYXkKCQkJdGhpcy50b0FycmF5KCkgOgoKCQkJLy8gUmV0dXJuIGp1c3QgdGhlIG9iamVjdAoJCQkoIG51bSA8IDAgPyB0aGlzWyB0aGlzLmxlbmd0aCArIG51bSBdIDogdGhpc1sgbnVtIF0gKTsKCX0sCgoJLy8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFjawoJLy8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpCglwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcywgbmFtZSwgc2VsZWN0b3IgKSB7CgkJLy8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXQKCQl2YXIgcmV0ID0gdGhpcy5jb25zdHJ1Y3RvcigpOwoKCQlpZiAoIGpRdWVyeS5pc0FycmF5KCBlbGVtcyApICkgewoJCQlwdXNoLmFwcGx5KCByZXQsIGVsZW1zICk7CgoJCX0gZWxzZSB7CgkJCWpRdWVyeS5tZXJnZSggcmV0LCBlbGVtcyApOwoJCX0KCgkJLy8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSkKCQlyZXQucHJldk9iamVjdCA9IHRoaXM7CgoJCXJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0OwoKCQlpZiAoIG5hbWUgPT09ICJmaW5kIiApIHsKCQkJcmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciArICggdGhpcy5zZWxlY3RvciA/ICIgIiA6ICIiICkgKyBzZWxlY3RvcjsKCQl9IGVsc2UgaWYgKCBuYW1lICkgewoJCQlyZXQuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yICsgIi4iICsgbmFtZSArICIoIiArIHNlbGVjdG9yICsgIikiOwoJCX0KCgkJLy8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXQKCQlyZXR1cm4gcmV0OwoJfSwKCgkvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LgoJLy8gKFlvdSBjYW4gc2VlZCB0aGUgYXJndW1lbnRzIHdpdGggYW4gYXJyYXkgb2YgYXJncywgYnV0IHRoaXMgaXMKCS8vIG9ubHkgdXNlZCBpbnRlcm5hbGx5LikKCWVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjaywgYXJncyApIHsKCQlyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrLCBhcmdzICk7Cgl9LAoKCXJlYWR5OiBmdW5jdGlvbiggZm4gKSB7CgkJLy8gQXR0YWNoIHRoZSBsaXN0ZW5lcnMKCQlqUXVlcnkuYmluZFJlYWR5KCk7CgoJCS8vIEFkZCB0aGUgY2FsbGJhY2sKCQlyZWFkeUxpc3QuYWRkKCBmbiApOwoKCQlyZXR1cm4gdGhpczsKCX0sCgoJZXE6IGZ1bmN0aW9uKCBpICkgewoJCWkgPSAraTsKCQlyZXR1cm4gaSA9PT0gLTEgPwoJCQl0aGlzLnNsaWNlKCBpICkgOgoJCQl0aGlzLnNsaWNlKCBpLCBpICsgMSApOwoJfSwKCglmaXJzdDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZXEoIDAgKTsKCX0sCgoJbGFzdDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZXEoIC0xICk7Cgl9LAoKCXNsaWNlOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSwKCQkJInNsaWNlIiwgc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oIiwiKSApOwoJfSwKCgltYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHsKCQlyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAodGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7CgkJCXJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7CgkJfSkpOwoJfSwKCgllbmQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcihudWxsKTsKCX0sCgoJLy8gRm9yIGludGVybmFsIHVzZSBvbmx5LgoJLy8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuCglwdXNoOiBwdXNoLAoJc29ydDogW10uc29ydCwKCXNwbGljZTogW10uc3BsaWNlCn07CgovLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uCmpRdWVyeS5mbi5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjsKCmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7Cgl2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsCgkJdGFyZ2V0ID0gYXJndW1lbnRzWzBdIHx8IHt9LAoJCWkgPSAxLAoJCWxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsCgkJZGVlcCA9IGZhbHNlOwoKCS8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb24KCWlmICggdHlwZW9mIHRhcmdldCA9PT0gImJvb2xlYW4iICkgewoJCWRlZXAgPSB0YXJnZXQ7CgkJdGFyZ2V0ID0gYXJndW1lbnRzWzFdIHx8IHt9OwoJCS8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXQKCQlpID0gMjsKCX0KCgkvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSkKCWlmICggdHlwZW9mIHRhcmdldCAhPT0gIm9iamVjdCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKHRhcmdldCkgKSB7CgkJdGFyZ2V0ID0ge307Cgl9CgoJLy8gZXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkCglpZiAoIGxlbmd0aCA9PT0gaSApIHsKCQl0YXJnZXQgPSB0aGlzOwoJCS0taTsKCX0KCglmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHsKCQkvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzCgkJaWYgKCAob3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdKSAhPSBudWxsICkgewoJCQkvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0CgkJCWZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHsKCQkJCXNyYyA9IHRhcmdldFsgbmFtZSBdOwoJCQkJY29weSA9IG9wdGlvbnNbIG5hbWUgXTsKCgkJCQkvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wCgkJCQlpZiAoIHRhcmdldCA9PT0gY29weSApIHsKCQkJCQljb250aW51ZTsKCQkJCX0KCgkJCQkvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXMKCQkJCWlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoY29weSkpICkgKSB7CgkJCQkJaWYgKCBjb3B5SXNBcnJheSApIHsKCQkJCQkJY29weUlzQXJyYXkgPSBmYWxzZTsKCQkJCQkJY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdOwoKCQkJCQl9IGVsc2UgewoJCQkJCQljbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307CgkJCQkJfQoKCQkJCQkvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW0KCQkJCQl0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7CgoJCQkJLy8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlcwoJCQkJfSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkgewoJCQkJCXRhcmdldFsgbmFtZSBdID0gY29weTsKCQkJCX0KCQkJfQoJCX0KCX0KCgkvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdAoJcmV0dXJuIHRhcmdldDsKfTsKCmpRdWVyeS5leHRlbmQoewoJbm9Db25mbGljdDogZnVuY3Rpb24oIGRlZXAgKSB7CgkJaWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkgewoJCQl3aW5kb3cuJCA9IF8kOwoJCX0KCgkJaWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHsKCQkJd2luZG93LmpRdWVyeSA9IF9qUXVlcnk7CgkJfQoKCQlyZXR1cm4galF1ZXJ5OwoJfSwKCgkvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLgoJaXNSZWFkeTogZmFsc2UsCgoJLy8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZQoJLy8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODEKCXJlYWR5V2FpdDogMSwKCgkvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnQKCWhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7CgkJaWYgKCBob2xkICkgewoJCQlqUXVlcnkucmVhZHlXYWl0Kys7CgkJfSBlbHNlIHsKCQkJalF1ZXJ5LnJlYWR5KCB0cnVlICk7CgkJfQoJfSwKCgkvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5CglyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7CgkJLy8gRWl0aGVyIGEgcmVsZWFzZWQgaG9sZCBvciBhbiBET01yZWFkeS9sb2FkIGV2ZW50IGFuZCBub3QgeWV0IHJlYWR5CgkJaWYgKCAod2FpdCA9PT0gdHJ1ZSAmJiAhLS1qUXVlcnkucmVhZHlXYWl0KSB8fCAod2FpdCAhPT0gdHJ1ZSAmJiAhalF1ZXJ5LmlzUmVhZHkpICkgewoJCQkvLyBNYWtlIHN1cmUgYm9keSBleGlzdHMsIGF0IGxlYXN0LCBpbiBjYXNlIElFIGdldHMgYSBsaXR0bGUgb3ZlcnplYWxvdXMgKHRpY2tldCAjNTQ0MykuCgkJCWlmICggIWRvY3VtZW50LmJvZHkgKSB7CgkJCQlyZXR1cm4gc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5LCAxICk7CgkJCX0KCgkJCS8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeQoJCQlqUXVlcnkuaXNSZWFkeSA9IHRydWU7CgoJCQkvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZQoJCQlpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZQoJCQlyZWFkeUxpc3QuZmlyZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7CgoJCQkvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHMKCQkJaWYgKCBqUXVlcnkuZm4udHJpZ2dlciApIHsKCQkJCWpRdWVyeSggZG9jdW1lbnQgKS50cmlnZ2VyKCAicmVhZHkiICkub2ZmKCAicmVhZHkiICk7CgkJCX0KCQl9Cgl9LAoKCWJpbmRSZWFkeTogZnVuY3Rpb24oKSB7CgkJaWYgKCByZWFkeUxpc3QgKSB7CgkJCXJldHVybjsKCQl9CgoJCXJlYWR5TGlzdCA9IGpRdWVyeS5DYWxsYmFja3MoICJvbmNlIG1lbW9yeSIgKTsKCgkJLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWQgYWZ0ZXIgdGhlCgkJLy8gYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC4KCQlpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIgKSB7CgkJCS8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeQoJCQlyZXR1cm4gc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5LCAxICk7CgkJfQoKCQkvLyBNb3ppbGxhLCBPcGVyYSBhbmQgd2Via2l0IG5pZ2h0bGllcyBjdXJyZW50bHkgc3VwcG9ydCB0aGlzIGV2ZW50CgkJaWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICkgewoJCQkvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrCgkJCWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICJET01Db250ZW50TG9hZGVkIiwgRE9NQ29udGVudExvYWRlZCwgZmFsc2UgKTsKCgkJCS8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrCgkJCXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAibG9hZCIsIGpRdWVyeS5yZWFkeSwgZmFsc2UgKTsKCgkJLy8gSWYgSUUgZXZlbnQgbW9kZWwgaXMgdXNlZAoJCX0gZWxzZSBpZiAoIGRvY3VtZW50LmF0dGFjaEV2ZW50ICkgewoJCQkvLyBlbnN1cmUgZmlyaW5nIGJlZm9yZSBvbmxvYWQsCgkJCS8vIG1heWJlIGxhdGUgYnV0IHNhZmUgYWxzbyBmb3IgaWZyYW1lcwoJCQlkb2N1bWVudC5hdHRhY2hFdmVudCggIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIERPTUNvbnRlbnRMb2FkZWQgKTsKCgkJCS8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrCgkJCXdpbmRvdy5hdHRhY2hFdmVudCggIm9ubG9hZCIsIGpRdWVyeS5yZWFkeSApOwoKCQkJLy8gSWYgSUUgYW5kIG5vdCBhIGZyYW1lCgkJCS8vIGNvbnRpbnVhbGx5IGNoZWNrIHRvIHNlZSBpZiB0aGUgZG9jdW1lbnQgaXMgcmVhZHkKCQkJdmFyIHRvcGxldmVsID0gZmFsc2U7CgoJCQl0cnkgewoJCQkJdG9wbGV2ZWwgPSB3aW5kb3cuZnJhbWVFbGVtZW50ID09IG51bGw7CgkJCX0gY2F0Y2goZSkge30KCgkJCWlmICggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICYmIHRvcGxldmVsICkgewoJCQkJZG9TY3JvbGxDaGVjaygpOwoJCQl9CgkJfQoJfSwKCgkvLyBTZWUgdGVzdC91bml0L2NvcmUuanMgZm9yIGRldGFpbHMgY29uY2VybmluZyBpc0Z1bmN0aW9uLgoJLy8gU2luY2UgdmVyc2lvbiAxLjMsIERPTSBtZXRob2RzIGFuZCBmdW5jdGlvbnMgbGlrZSBhbGVydAoJLy8gYXJlbid0IHN1cHBvcnRlZC4gVGhleSByZXR1cm4gZmFsc2Ugb24gSUUgKCMyOTY4KS4KCWlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7CgkJcmV0dXJuIGpRdWVyeS50eXBlKG9iaikgPT09ICJmdW5jdGlvbiI7Cgl9LAoKCWlzQXJyYXk6IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24oIG9iaiApIHsKCQlyZXR1cm4galF1ZXJ5LnR5cGUob2JqKSA9PT0gImFycmF5IjsKCX0sCgoJaXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7CgkJcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PSBvYmoud2luZG93OwoJfSwKCglpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7CgkJcmV0dXJuICFpc05hTiggcGFyc2VGbG9hdChvYmopICkgJiYgaXNGaW5pdGUoIG9iaiApOwoJfSwKCgl0eXBlOiBmdW5jdGlvbiggb2JqICkgewoJCXJldHVybiBvYmogPT0gbnVsbCA/CgkJCVN0cmluZyggb2JqICkgOgoJCQljbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKG9iaikgXSB8fCAib2JqZWN0IjsKCX0sCgoJaXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHsKCQkvLyBNdXN0IGJlIGFuIE9iamVjdC4KCQkvLyBCZWNhdXNlIG9mIElFLCB3ZSBhbHNvIGhhdmUgdG8gY2hlY2sgdGhlIHByZXNlbmNlIG9mIHRoZSBjb25zdHJ1Y3RvciBwcm9wZXJ0eS4KCQkvLyBNYWtlIHN1cmUgdGhhdCBET00gbm9kZXMgYW5kIHdpbmRvdyBvYmplY3RzIGRvbid0IHBhc3MgdGhyb3VnaCwgYXMgd2VsbAoJCWlmICggIW9iaiB8fCBqUXVlcnkudHlwZShvYmopICE9PSAib2JqZWN0IiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJdHJ5IHsKCQkJLy8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdAoJCQlpZiAoIG9iai5jb25zdHJ1Y3RvciAmJgoJCQkJIWhhc093bi5jYWxsKG9iaiwgImNvbnN0cnVjdG9yIikgJiYKCQkJCSFoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCAiaXNQcm90b3R5cGVPZiIpICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfSBjYXRjaCAoIGUgKSB7CgkJCS8vIElFOCw5IFdpbGwgdGhyb3cgZXhjZXB0aW9ucyBvbiBjZXJ0YWluIGhvc3Qgb2JqZWN0cyAjOTg5NwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCwKCQkvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93bi4KCgkJdmFyIGtleTsKCQlmb3IgKCBrZXkgaW4gb2JqICkge30KCgkJcmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkIHx8IGhhc093bi5jYWxsKCBvYmosIGtleSApOwoJfSwKCglpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkgewoJCWZvciAoIHZhciBuYW1lIGluIG9iaiApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQlyZXR1cm4gdHJ1ZTsKCX0sCgoJZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7CgkJdGhyb3cgbmV3IEVycm9yKCBtc2cgKTsKCX0sCgoJcGFyc2VKU09OOiBmdW5jdGlvbiggZGF0YSApIHsKCQlpZiAoIHR5cGVvZiBkYXRhICE9PSAic3RyaW5nIiB8fCAhZGF0YSApIHsKCQkJcmV0dXJuIG51bGw7CgkJfQoKCQkvLyBNYWtlIHN1cmUgbGVhZGluZy90cmFpbGluZyB3aGl0ZXNwYWNlIGlzIHJlbW92ZWQgKElFIGNhbid0IGhhbmRsZSBpdCkKCQlkYXRhID0galF1ZXJ5LnRyaW0oIGRhdGEgKTsKCgkJLy8gQXR0ZW1wdCB0byBwYXJzZSB1c2luZyB0aGUgbmF0aXZlIEpTT04gcGFyc2VyIGZpcnN0CgkJaWYgKCB3aW5kb3cuSlNPTiAmJiB3aW5kb3cuSlNPTi5wYXJzZSApIHsKCQkJcmV0dXJuIHdpbmRvdy5KU09OLnBhcnNlKCBkYXRhICk7CgkJfQoKCQkvLyBNYWtlIHN1cmUgdGhlIGluY29taW5nIGRhdGEgaXMgYWN0dWFsIEpTT04KCQkvLyBMb2dpYyBib3Jyb3dlZCBmcm9tIGh0dHA6Ly9qc29uLm9yZy9qc29uMi5qcwoJCWlmICggcnZhbGlkY2hhcnMudGVzdCggZGF0YS5yZXBsYWNlKCBydmFsaWRlc2NhcGUsICJAIiApCgkJCS5yZXBsYWNlKCBydmFsaWR0b2tlbnMsICJdIiApCgkJCS5yZXBsYWNlKCBydmFsaWRicmFjZXMsICIiKSkgKSB7CgoJCQlyZXR1cm4gKCBuZXcgRnVuY3Rpb24oICJyZXR1cm4gIiArIGRhdGEgKSApKCk7CgoJCX0KCQlqUXVlcnkuZXJyb3IoICJJbnZhbGlkIEpTT046ICIgKyBkYXRhICk7Cgl9LAoKCS8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmcKCXBhcnNlWE1MOiBmdW5jdGlvbiggZGF0YSApIHsKCQlpZiAoIHR5cGVvZiBkYXRhICE9PSAic3RyaW5nIiB8fCAhZGF0YSApIHsKCQkJcmV0dXJuIG51bGw7CgkJfQoJCXZhciB4bWwsIHRtcDsKCQl0cnkgewoJCQlpZiAoIHdpbmRvdy5ET01QYXJzZXIgKSB7IC8vIFN0YW5kYXJkCgkJCQl0bXAgPSBuZXcgRE9NUGFyc2VyKCk7CgkJCQl4bWwgPSB0bXAucGFyc2VGcm9tU3RyaW5nKCBkYXRhICwgInRleHQveG1sIiApOwoJCQl9IGVsc2UgeyAvLyBJRQoJCQkJeG1sID0gbmV3IEFjdGl2ZVhPYmplY3QoICJNaWNyb3NvZnQuWE1MRE9NIiApOwoJCQkJeG1sLmFzeW5jID0gImZhbHNlIjsKCQkJCXhtbC5sb2FkWE1MKCBkYXRhICk7CgkJCX0KCQl9IGNhdGNoKCBlICkgewoJCQl4bWwgPSB1bmRlZmluZWQ7CgkJfQoJCWlmICggIXhtbCB8fCAheG1sLmRvY3VtZW50RWxlbWVudCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJwYXJzZXJlcnJvciIgKS5sZW5ndGggKSB7CgkJCWpRdWVyeS5lcnJvciggIkludmFsaWQgWE1MOiAiICsgZGF0YSApOwoJCX0KCQlyZXR1cm4geG1sOwoJfSwKCglub29wOiBmdW5jdGlvbigpIHt9LAoKCS8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0CgkvLyBXb3JrYXJvdW5kcyBiYXNlZCBvbiBmaW5kaW5ncyBieSBKaW0gRHJpc2NvbGwKCS8vIGh0dHA6Ly93ZWJsb2dzLmphdmEubmV0L2Jsb2cvZHJpc2NvbGwvYXJjaGl2ZS8yMDA5LzA5LzA4L2V2YWwtamF2YXNjcmlwdC1nbG9iYWwtY29udGV4dAoJZ2xvYmFsRXZhbDogZnVuY3Rpb24oIGRhdGEgKSB7CgkJaWYgKCBkYXRhICYmIHJub3R3aGl0ZS50ZXN0KCBkYXRhICkgKSB7CgkJCS8vIFdlIHVzZSBleGVjU2NyaXB0IG9uIEludGVybmV0IEV4cGxvcmVyCgkJCS8vIFdlIHVzZSBhbiBhbm9ueW1vdXMgZnVuY3Rpb24gc28gdGhhdCBjb250ZXh0IGlzIHdpbmRvdwoJCQkvLyByYXRoZXIgdGhhbiBqUXVlcnkgaW4gRmlyZWZveAoJCQkoIHdpbmRvdy5leGVjU2NyaXB0IHx8IGZ1bmN0aW9uKCBkYXRhICkgewoJCQkJd2luZG93WyAiZXZhbCIgXS5jYWxsKCB3aW5kb3csIGRhdGEgKTsKCQkJfSApKCBkYXRhICk7CgkJfQoJfSwKCgkvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzCgkvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpCgljYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7CgkJcmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsICJtcy0iICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApOwoJfSwKCglub2RlTmFtZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7CgkJcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSBuYW1lLnRvVXBwZXJDYXNlKCk7Cgl9LAoKCS8vIGFyZ3MgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHkKCWVhY2g6IGZ1bmN0aW9uKCBvYmplY3QsIGNhbGxiYWNrLCBhcmdzICkgewoJCXZhciBuYW1lLCBpID0gMCwKCQkJbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aCwKCQkJaXNPYmogPSBsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNGdW5jdGlvbiggb2JqZWN0ICk7CgoJCWlmICggYXJncyApIHsKCQkJaWYgKCBpc09iaiApIHsKCQkJCWZvciAoIG5hbWUgaW4gb2JqZWN0ICkgewoJCQkJCWlmICggY2FsbGJhY2suYXBwbHkoIG9iamVjdFsgbmFtZSBdLCBhcmdzICkgPT09IGZhbHNlICkgewoJCQkJCQlicmVhazsKCQkJCQl9CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQlmb3IgKCA7IGkgPCBsZW5ndGg7ICkgewoJCQkJCWlmICggY2FsbGJhY2suYXBwbHkoIG9iamVjdFsgaSsrIF0sIGFyZ3MgKSA9PT0gZmFsc2UgKSB7CgkJCQkJCWJyZWFrOwoJCQkJCX0KCQkJCX0KCQkJfQoKCQkvLyBBIHNwZWNpYWwsIGZhc3QsIGNhc2UgZm9yIHRoZSBtb3N0IGNvbW1vbiB1c2Ugb2YgZWFjaAoJCX0gZWxzZSB7CgkJCWlmICggaXNPYmogKSB7CgkJCQlmb3IgKCBuYW1lIGluIG9iamVjdCApIHsKCQkJCQlpZiAoIGNhbGxiYWNrLmNhbGwoIG9iamVjdFsgbmFtZSBdLCBuYW1lLCBvYmplY3RbIG5hbWUgXSApID09PSBmYWxzZSApIHsKCQkJCQkJYnJlYWs7CgkJCQkJfQoJCQkJfQoJCQl9IGVsc2UgewoJCQkJZm9yICggOyBpIDwgbGVuZ3RoOyApIHsKCQkJCQlpZiAoIGNhbGxiYWNrLmNhbGwoIG9iamVjdFsgaSBdLCBpLCBvYmplY3RbIGkrKyBdICkgPT09IGZhbHNlICkgewoJCQkJCQlicmVhazsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgoJCXJldHVybiBvYmplY3Q7Cgl9LAoKCS8vIFVzZSBuYXRpdmUgU3RyaW5nLnRyaW0gZnVuY3Rpb24gd2hlcmV2ZXIgcG9zc2libGUKCXRyaW06IHRyaW0gPwoJCWZ1bmN0aW9uKCB0ZXh0ICkgewoJCQlyZXR1cm4gdGV4dCA9PSBudWxsID8KCQkJCSIiIDoKCQkJCXRyaW0uY2FsbCggdGV4dCApOwoJCX0gOgoKCQkvLyBPdGhlcndpc2UgdXNlIG91ciBvd24gdHJpbW1pbmcgZnVuY3Rpb25hbGl0eQoJCWZ1bmN0aW9uKCB0ZXh0ICkgewoJCQlyZXR1cm4gdGV4dCA9PSBudWxsID8KCQkJCSIiIDoKCQkJCXRleHQudG9TdHJpbmcoKS5yZXBsYWNlKCB0cmltTGVmdCwgIiIgKS5yZXBsYWNlKCB0cmltUmlnaHQsICIiICk7CgkJfSwKCgkvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5CgltYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnJheSwgcmVzdWx0cyApIHsKCQl2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTsKCgkJaWYgKCBhcnJheSAhPSBudWxsICkgewoJCQkvLyBUaGUgd2luZG93LCBzdHJpbmdzIChhbmQgZnVuY3Rpb25zKSBhbHNvIGhhdmUgJ2xlbmd0aCcKCQkJLy8gVHdlYWtlZCBsb2dpYyBzbGlnaHRseSB0byBoYW5kbGUgQmxhY2tiZXJyeSA0LjcgUmVnRXhwIGlzc3VlcyAjNjkzMAoJCQl2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBhcnJheSApOwoKCQkJaWYgKCBhcnJheS5sZW5ndGggPT0gbnVsbCB8fCB0eXBlID09PSAic3RyaW5nIiB8fCB0eXBlID09PSAiZnVuY3Rpb24iIHx8IHR5cGUgPT09ICJyZWdleHAiIHx8IGpRdWVyeS5pc1dpbmRvdyggYXJyYXkgKSApIHsKCQkJCXB1c2guY2FsbCggcmV0LCBhcnJheSApOwoJCQl9IGVsc2UgewoJCQkJalF1ZXJ5Lm1lcmdlKCByZXQsIGFycmF5ICk7CgkJCX0KCQl9CgoJCXJldHVybiByZXQ7Cgl9LAoKCWluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnJheSwgaSApIHsKCQl2YXIgbGVuOwoKCQlpZiAoIGFycmF5ICkgewoJCQlpZiAoIGluZGV4T2YgKSB7CgkJCQlyZXR1cm4gaW5kZXhPZi5jYWxsKCBhcnJheSwgZWxlbSwgaSApOwoJCQl9CgoJCQlsZW4gPSBhcnJheS5sZW5ndGg7CgkJCWkgPSBpID8gaSA8IDAgPyBNYXRoLm1heCggMCwgbGVuICsgaSApIDogaSA6IDA7CgoJCQlmb3IgKCA7IGkgPCBsZW47IGkrKyApIHsKCQkJCS8vIFNraXAgYWNjZXNzaW5nIGluIHNwYXJzZSBhcnJheXMKCQkJCWlmICggaSBpbiBhcnJheSAmJiBhcnJheVsgaSBdID09PSBlbGVtICkgewoJCQkJCXJldHVybiBpOwoJCQkJfQoJCQl9CgkJfQoKCQlyZXR1cm4gLTE7Cgl9LAoKCW1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHsKCQl2YXIgaSA9IGZpcnN0Lmxlbmd0aCwKCQkJaiA9IDA7CgoJCWlmICggdHlwZW9mIHNlY29uZC5sZW5ndGggPT09ICJudW1iZXIiICkgewoJCQlmb3IgKCB2YXIgbCA9IHNlY29uZC5sZW5ndGg7IGogPCBsOyBqKysgKSB7CgkJCQlmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTsKCQkJfQoKCQl9IGVsc2UgewoJCQl3aGlsZSAoIHNlY29uZFtqXSAhPT0gdW5kZWZpbmVkICkgewoJCQkJZmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqKysgXTsKCQkJfQoJCX0KCgkJZmlyc3QubGVuZ3RoID0gaTsKCgkJcmV0dXJuIGZpcnN0OwoJfSwKCglncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnYgKSB7CgkJdmFyIHJldCA9IFtdLCByZXRWYWw7CgkJaW52ID0gISFpbnY7CgoJCS8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXMKCQkvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvbgoJCWZvciAoIHZhciBpID0gMCwgbGVuZ3RoID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJCXJldFZhbCA9ICEhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTsKCQkJaWYgKCBpbnYgIT09IHJldFZhbCApIHsKCQkJCXJldC5wdXNoKCBlbGVtc1sgaSBdICk7CgkJCX0KCQl9CgoJCXJldHVybiByZXQ7Cgl9LAoKCS8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seQoJbWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7CgkJdmFyIHZhbHVlLCBrZXksIHJldCA9IFtdLAoJCQlpID0gMCwKCQkJbGVuZ3RoID0gZWxlbXMubGVuZ3RoLAoJCQkvLyBqcXVlcnkgb2JqZWN0cyBhcmUgdHJlYXRlZCBhcyBhcnJheXMKCQkJaXNBcnJheSA9IGVsZW1zIGluc3RhbmNlb2YgalF1ZXJ5IHx8IGxlbmd0aCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBsZW5ndGggPT09ICJudW1iZXIiICYmICggKCBsZW5ndGggPiAwICYmIGVsZW1zWyAwIF0gJiYgZWxlbXNbIGxlbmd0aCAtMSBdICkgfHwgbGVuZ3RoID09PSAwIHx8IGpRdWVyeS5pc0FycmF5KCBlbGVtcyApICkgOwoKCQkvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIKCQlpZiAoIGlzQXJyYXkgKSB7CgkJCWZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkgewoJCQkJdmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7CgoJCQkJaWYgKCB2YWx1ZSAhPSBudWxsICkgewoJCQkJCXJldFsgcmV0Lmxlbmd0aCBdID0gdmFsdWU7CgkJCQl9CgkJCX0KCgkJLy8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCwKCQl9IGVsc2UgewoJCQlmb3IgKCBrZXkgaW4gZWxlbXMgKSB7CgkJCQl2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sga2V5IF0sIGtleSwgYXJnICk7CgoJCQkJaWYgKCB2YWx1ZSAhPSBudWxsICkgewoJCQkJCXJldFsgcmV0Lmxlbmd0aCBdID0gdmFsdWU7CgkJCQl9CgkJCX0KCQl9CgoJCS8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXMKCQlyZXR1cm4gcmV0LmNvbmNhdC5hcHBseSggW10sIHJldCApOwoJfSwKCgkvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHMKCWd1aWQ6IDEsCgoJLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55CgkvLyBhcmd1bWVudHMuCglwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkgewoJCWlmICggdHlwZW9mIGNvbnRleHQgPT09ICJzdHJpbmciICkgewoJCQl2YXIgdG1wID0gZm5bIGNvbnRleHQgXTsKCQkJY29udGV4dCA9IGZuOwoJCQlmbiA9IHRtcDsKCQl9CgoJCS8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjCgkJLy8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC4KCQlpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHsKCQkJcmV0dXJuIHVuZGVmaW5lZDsKCQl9CgoJCS8vIFNpbXVsYXRlZCBiaW5kCgkJdmFyIGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKSwKCQkJcHJveHkgPSBmdW5jdGlvbigpIHsKCQkJCXJldHVybiBmbi5hcHBseSggY29udGV4dCwgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTsKCQkJfTsKCgkJLy8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkCgkJcHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IHByb3h5Lmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKzsKCgkJcmV0dXJuIHByb3h5OwoJfSwKCgkvLyBNdXRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIHRvIGEgY29sbGVjdGlvbgoJLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uCglhY2Nlc3M6IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHBhc3MgKSB7CgkJdmFyIGV4ZWMsCgkJCWJ1bGsgPSBrZXkgPT0gbnVsbCwKCQkJaSA9IDAsCgkJCWxlbmd0aCA9IGVsZW1zLmxlbmd0aDsKCgkJLy8gU2V0cyBtYW55IHZhbHVlcwoJCWlmICgga2V5ICYmIHR5cGVvZiBrZXkgPT09ICJvYmplY3QiICkgewoJCQlmb3IgKCBpIGluIGtleSApIHsKCQkJCWpRdWVyeS5hY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5W2ldLCAxLCBlbXB0eUdldCwgdmFsdWUgKTsKCQkJfQoJCQljaGFpbmFibGUgPSAxOwoKCQkvLyBTZXRzIG9uZSB2YWx1ZQoJCX0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgkJCS8vIE9wdGlvbmFsbHksIGZ1bmN0aW9uIHZhbHVlcyBnZXQgZXhlY3V0ZWQgaWYgZXhlYyBpcyB0cnVlCgkJCWV4ZWMgPSBwYXNzID09PSB1bmRlZmluZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7CgoJCQlpZiAoIGJ1bGsgKSB7CgkJCQkvLyBCdWxrIG9wZXJhdGlvbnMgb25seSBpdGVyYXRlIHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlcwoJCQkJaWYgKCBleGVjICkgewoJCQkJCWV4ZWMgPSBmbjsKCQkJCQlmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkgewoJCQkJCQlyZXR1cm4gZXhlYy5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTsKCQkJCQl9OwoKCQkJCS8vIE90aGVyd2lzZSB0aGV5IHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0CgkJCQl9IGVsc2UgewoJCQkJCWZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApOwoJCQkJCWZuID0gbnVsbDsKCQkJCX0KCQkJfQoKCQkJaWYgKCBmbiApIHsKCQkJCWZvciAoOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJCQkJZm4oIGVsZW1zW2ldLCBrZXksIGV4ZWMgPyB2YWx1ZS5jYWxsKCBlbGVtc1tpXSwgaSwgZm4oIGVsZW1zW2ldLCBrZXkgKSApIDogdmFsdWUsIHBhc3MgKTsKCQkJCX0KCQkJfQoKCQkJY2hhaW5hYmxlID0gMTsKCQl9CgoJCXJldHVybiBjaGFpbmFibGUgPwoJCQllbGVtcyA6CgoJCQkvLyBHZXRzCgkJCWJ1bGsgPwoJCQkJZm4uY2FsbCggZWxlbXMgKSA6CgkJCQlsZW5ndGggPyBmbiggZWxlbXNbMF0sIGtleSApIDogZW1wdHlHZXQ7Cgl9LAoKCW5vdzogZnVuY3Rpb24oKSB7CgkJcmV0dXJuICggbmV3IERhdGUoKSApLmdldFRpbWUoKTsKCX0sCgoJLy8gVXNlIG9mIGpRdWVyeS5icm93c2VyIGlzIGZyb3duZWQgdXBvbi4KCS8vIE1vcmUgZGV0YWlsczogaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9VdGlsaXRpZXMvalF1ZXJ5LmJyb3dzZXIKCXVhTWF0Y2g6IGZ1bmN0aW9uKCB1YSApIHsKCQl1YSA9IHVhLnRvTG93ZXJDYXNlKCk7CgoJCXZhciBtYXRjaCA9IHJ3ZWJraXQuZXhlYyggdWEgKSB8fAoJCQlyb3BlcmEuZXhlYyggdWEgKSB8fAoJCQlybXNpZS5leGVjKCB1YSApIHx8CgkJCXVhLmluZGV4T2YoImNvbXBhdGlibGUiKSA8IDAgJiYgcm1vemlsbGEuZXhlYyggdWEgKSB8fAoJCQlbXTsKCgkJcmV0dXJuIHsgYnJvd3NlcjogbWF0Y2hbMV0gfHwgIiIsIHZlcnNpb246IG1hdGNoWzJdIHx8ICIwIiB9OwoJfSwKCglzdWI6IGZ1bmN0aW9uKCkgewoJCWZ1bmN0aW9uIGpRdWVyeVN1Yiggc2VsZWN0b3IsIGNvbnRleHQgKSB7CgkJCXJldHVybiBuZXcgalF1ZXJ5U3ViLmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7CgkJfQoJCWpRdWVyeS5leHRlbmQoIHRydWUsIGpRdWVyeVN1YiwgdGhpcyApOwoJCWpRdWVyeVN1Yi5zdXBlcmNsYXNzID0gdGhpczsKCQlqUXVlcnlTdWIuZm4gPSBqUXVlcnlTdWIucHJvdG90eXBlID0gdGhpcygpOwoJCWpRdWVyeVN1Yi5mbi5jb25zdHJ1Y3RvciA9IGpRdWVyeVN1YjsKCQlqUXVlcnlTdWIuc3ViID0gdGhpcy5zdWI7CgkJalF1ZXJ5U3ViLmZuLmluaXQgPSBmdW5jdGlvbiBpbml0KCBzZWxlY3RvciwgY29udGV4dCApIHsKCQkJaWYgKCBjb250ZXh0ICYmIGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgJiYgIShjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5U3ViKSApIHsKCQkJCWNvbnRleHQgPSBqUXVlcnlTdWIoIGNvbnRleHQgKTsKCQkJfQoKCQkJcmV0dXJuIGpRdWVyeS5mbi5pbml0LmNhbGwoIHRoaXMsIHNlbGVjdG9yLCBjb250ZXh0LCByb290alF1ZXJ5U3ViICk7CgkJfTsKCQlqUXVlcnlTdWIuZm4uaW5pdC5wcm90b3R5cGUgPSBqUXVlcnlTdWIuZm47CgkJdmFyIHJvb3RqUXVlcnlTdWIgPSBqUXVlcnlTdWIoZG9jdW1lbnQpOwoJCXJldHVybiBqUXVlcnlTdWI7Cgl9LAoKCWJyb3dzZXI6IHt9Cn0pOwoKLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwCmpRdWVyeS5lYWNoKCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0Ii5zcGxpdCgiICIpLCBmdW5jdGlvbihpLCBuYW1lKSB7CgljbGFzczJ0eXBlWyAiW29iamVjdCAiICsgbmFtZSArICJdIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpOwp9KTsKCmJyb3dzZXJNYXRjaCA9IGpRdWVyeS51YU1hdGNoKCB1c2VyQWdlbnQgKTsKaWYgKCBicm93c2VyTWF0Y2guYnJvd3NlciApIHsKCWpRdWVyeS5icm93c2VyWyBicm93c2VyTWF0Y2guYnJvd3NlciBdID0gdHJ1ZTsKCWpRdWVyeS5icm93c2VyLnZlcnNpb24gPSBicm93c2VyTWF0Y2gudmVyc2lvbjsKfQoKLy8gRGVwcmVjYXRlZCwgdXNlIGpRdWVyeS5icm93c2VyLndlYmtpdCBpbnN0ZWFkCmlmICggalF1ZXJ5LmJyb3dzZXIud2Via2l0ICkgewoJalF1ZXJ5LmJyb3dzZXIuc2FmYXJpID0gdHJ1ZTsKfQoKLy8gSUUgZG9lc24ndCBtYXRjaCBub24tYnJlYWtpbmcgc3BhY2VzIHdpdGggXHMKaWYgKCBybm90d2hpdGUudGVzdCggIlx4QTAiICkgKSB7Cgl0cmltTGVmdCA9IC9eW1xzXHhBMF0rLzsKCXRyaW1SaWdodCA9IC9bXHNceEEwXSskLzsKfQoKLy8gQWxsIGpRdWVyeSBvYmplY3RzIHNob3VsZCBwb2ludCBiYWNrIHRvIHRoZXNlCnJvb3RqUXVlcnkgPSBqUXVlcnkoZG9jdW1lbnQpOwoKLy8gQ2xlYW51cCBmdW5jdGlvbnMgZm9yIHRoZSBkb2N1bWVudCByZWFkeSBtZXRob2QKaWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICkgewoJRE9NQ29udGVudExvYWRlZCA9IGZ1bmN0aW9uKCkgewoJCWRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICJET01Db250ZW50TG9hZGVkIiwgRE9NQ29udGVudExvYWRlZCwgZmFsc2UgKTsKCQlqUXVlcnkucmVhZHkoKTsKCX07Cgp9IGVsc2UgaWYgKCBkb2N1bWVudC5hdHRhY2hFdmVudCApIHsKCURPTUNvbnRlbnRMb2FkZWQgPSBmdW5jdGlvbigpIHsKCQkvLyBNYWtlIHN1cmUgYm9keSBleGlzdHMsIGF0IGxlYXN0LCBpbiBjYXNlIElFIGdldHMgYSBsaXR0bGUgb3ZlcnplYWxvdXMgKHRpY2tldCAjNTQ0MykuCgkJaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAiY29tcGxldGUiICkgewoJCQlkb2N1bWVudC5kZXRhY2hFdmVudCggIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIERPTUNvbnRlbnRMb2FkZWQgKTsKCQkJalF1ZXJ5LnJlYWR5KCk7CgkJfQoJfTsKfQoKLy8gVGhlIERPTSByZWFkeSBjaGVjayBmb3IgSW50ZXJuZXQgRXhwbG9yZXIKZnVuY3Rpb24gZG9TY3JvbGxDaGVjaygpIHsKCWlmICggalF1ZXJ5LmlzUmVhZHkgKSB7CgkJcmV0dXJuOwoJfQoKCXRyeSB7CgkJLy8gSWYgSUUgaXMgdXNlZCwgdXNlIHRoZSB0cmljayBieSBEaWVnbyBQZXJpbmkKCQkvLyBodHRwOi8vamF2YXNjcmlwdC5ud2JveC5jb20vSUVDb250ZW50TG9hZGVkLwoJCWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCgibGVmdCIpOwoJfSBjYXRjaChlKSB7CgkJc2V0VGltZW91dCggZG9TY3JvbGxDaGVjaywgMSApOwoJCXJldHVybjsKCX0KCgkvLyBhbmQgZXhlY3V0ZSBhbnkgd2FpdGluZyBmdW5jdGlvbnMKCWpRdWVyeS5yZWFkeSgpOwp9CgpyZXR1cm4galF1ZXJ5OwoKfSkoKTsKCgovLyBTdHJpbmcgdG8gT2JqZWN0IGZsYWdzIGZvcm1hdCBjYWNoZQp2YXIgZmxhZ3NDYWNoZSA9IHt9OwoKLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIGZsYWdzIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzIGFuZCBzdG9yZSBpbiBjYWNoZQpmdW5jdGlvbiBjcmVhdGVGbGFncyggZmxhZ3MgKSB7Cgl2YXIgb2JqZWN0ID0gZmxhZ3NDYWNoZVsgZmxhZ3MgXSA9IHt9LAoJCWksIGxlbmd0aDsKCWZsYWdzID0gZmxhZ3Muc3BsaXQoIC9ccysvICk7Cglmb3IgKCBpID0gMCwgbGVuZ3RoID0gZmxhZ3MubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJb2JqZWN0WyBmbGFnc1tpXSBdID0gdHJ1ZTsKCX0KCXJldHVybiBvYmplY3Q7Cn0KCi8qCiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOgogKgogKglmbGFnczoJYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgZmxhZ3MgdGhhdCB3aWxsIGNoYW5nZSBob3cKICoJCQl0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzCiAqCiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlCiAqICJmaXJlZCIgbXVsdGlwbGUgdGltZXMuCiAqCiAqIFBvc3NpYmxlIGZsYWdzOgogKgogKglvbmNlOgkJCXdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZCkKICoKICoJbWVtb3J5OgkJCXdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWQKICoJCQkJCWFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0ICJtZW1vcml6ZWQiCiAqCQkJCQl2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZCkKICoKICoJdW5pcXVlOgkJCXdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KQogKgogKglzdG9wT25GYWxzZToJaW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlCiAqCiAqLwpqUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIGZsYWdzICkgewoKCS8vIENvbnZlcnQgZmxhZ3MgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQKCS8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdCkKCWZsYWdzID0gZmxhZ3MgPyAoIGZsYWdzQ2FjaGVbIGZsYWdzIF0gfHwgY3JlYXRlRmxhZ3MoIGZsYWdzICkgKSA6IHt9OwoKCXZhciAvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdAoJCWxpc3QgPSBbXSwKCQkvLyBTdGFjayBvZiBmaXJlIGNhbGxzIGZvciByZXBlYXRhYmxlIGxpc3RzCgkJc3RhY2sgPSBbXSwKCQkvLyBMYXN0IGZpcmUgdmFsdWUgKGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHMpCgkJbWVtb3J5LAoJCS8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkCgkJZmlyZWQsCgkJLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZwoJCWZpcmluZywKCQkvLyBGaXJzdCBjYWxsYmFjayB0byBmaXJlICh1c2VkIGludGVybmFsbHkgYnkgYWRkIGFuZCBmaXJlV2l0aCkKCQlmaXJpbmdTdGFydCwKCQkvLyBFbmQgb2YgdGhlIGxvb3Agd2hlbiBmaXJpbmcKCQlmaXJpbmdMZW5ndGgsCgkJLy8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgcmVtb3ZlIGlmIG5lZWRlZCkKCQlmaXJpbmdJbmRleCwKCQkvLyBBZGQgb25lIG9yIHNldmVyYWwgY2FsbGJhY2tzIHRvIHRoZSBsaXN0CgkJYWRkID0gZnVuY3Rpb24oIGFyZ3MgKSB7CgkJCXZhciBpLAoJCQkJbGVuZ3RoLAoJCQkJZWxlbSwKCQkJCXR5cGUsCgkJCQlhY3R1YWw7CgkJCWZvciAoIGkgPSAwLCBsZW5ndGggPSBhcmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrICkgewoJCQkJZWxlbSA9IGFyZ3NbIGkgXTsKCQkJCXR5cGUgPSBqUXVlcnkudHlwZSggZWxlbSApOwoJCQkJaWYgKCB0eXBlID09PSAiYXJyYXkiICkgewoJCQkJCS8vIEluc3BlY3QgcmVjdXJzaXZlbHkKCQkJCQlhZGQoIGVsZW0gKTsKCQkJCX0gZWxzZSBpZiAoIHR5cGUgPT09ICJmdW5jdGlvbiIgKSB7CgkJCQkJLy8gQWRkIGlmIG5vdCBpbiB1bmlxdWUgbW9kZSBhbmQgY2FsbGJhY2sgaXMgbm90IGluCgkJCQkJaWYgKCAhZmxhZ3MudW5pcXVlIHx8ICFzZWxmLmhhcyggZWxlbSApICkgewoJCQkJCQlsaXN0LnB1c2goIGVsZW0gKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9LAoJCS8vIEZpcmUgY2FsbGJhY2tzCgkJZmlyZSA9IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkgewoJCQlhcmdzID0gYXJncyB8fCBbXTsKCQkJbWVtb3J5ID0gIWZsYWdzLm1lbW9yeSB8fCBbIGNvbnRleHQsIGFyZ3MgXTsKCQkJZmlyZWQgPSB0cnVlOwoJCQlmaXJpbmcgPSB0cnVlOwoJCQlmaXJpbmdJbmRleCA9IGZpcmluZ1N0YXJ0IHx8IDA7CgkJCWZpcmluZ1N0YXJ0ID0gMDsKCQkJZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7CgkJCWZvciAoIDsgbGlzdCAmJiBmaXJpbmdJbmRleCA8IGZpcmluZ0xlbmd0aDsgZmlyaW5nSW5kZXgrKyApIHsKCQkJCWlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggY29udGV4dCwgYXJncyApID09PSBmYWxzZSAmJiBmbGFncy5zdG9wT25GYWxzZSApIHsKCQkJCQltZW1vcnkgPSB0cnVlOyAvLyBNYXJrIGFzIGhhbHRlZAoJCQkJCWJyZWFrOwoJCQkJfQoJCQl9CgkJCWZpcmluZyA9IGZhbHNlOwoJCQlpZiAoIGxpc3QgKSB7CgkJCQlpZiAoICFmbGFncy5vbmNlICkgewoJCQkJCWlmICggc3RhY2sgJiYgc3RhY2subGVuZ3RoICkgewoJCQkJCQltZW1vcnkgPSBzdGFjay5zaGlmdCgpOwoJCQkJCQlzZWxmLmZpcmVXaXRoKCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKTsKCQkJCQl9CgkJCQl9IGVsc2UgaWYgKCBtZW1vcnkgPT09IHRydWUgKSB7CgkJCQkJc2VsZi5kaXNhYmxlKCk7CgkJCQl9IGVsc2UgewoJCQkJCWxpc3QgPSBbXTsKCQkJCX0KCQkJfQoJCX0sCgkJLy8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3QKCQlzZWxmID0gewoJCQkvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0CgkJCWFkZDogZnVuY3Rpb24oKSB7CgkJCQlpZiAoIGxpc3QgKSB7CgkJCQkJdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoOwoJCQkJCWFkZCggYXJndW1lbnRzICk7CgkJCQkJLy8gRG8gd2UgbmVlZCB0byBhZGQgdGhlIGNhbGxiYWNrcyB0byB0aGUKCQkJCQkvLyBjdXJyZW50IGZpcmluZyBiYXRjaD8KCQkJCQlpZiAoIGZpcmluZyApIHsKCQkJCQkJZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7CgkJCQkJLy8gV2l0aCBtZW1vcnksIGlmIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbgoJCQkJCS8vIHdlIHNob3VsZCBjYWxsIHJpZ2h0IGF3YXksIHVubGVzcyBwcmV2aW91cwoJCQkJCS8vIGZpcmluZyB3YXMgaGFsdGVkIChzdG9wT25GYWxzZSkKCQkJCQl9IGVsc2UgaWYgKCBtZW1vcnkgJiYgbWVtb3J5ICE9PSB0cnVlICkgewoJCQkJCQlmaXJpbmdTdGFydCA9IGxlbmd0aDsKCQkJCQkJZmlyZSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICk7CgkJCQkJfQoJCQkJfQoJCQkJcmV0dXJuIHRoaXM7CgkJCX0sCgkJCS8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3QKCQkJcmVtb3ZlOiBmdW5jdGlvbigpIHsKCQkJCWlmICggbGlzdCApIHsKCQkJCQl2YXIgYXJncyA9IGFyZ3VtZW50cywKCQkJCQkJYXJnSW5kZXggPSAwLAoJCQkJCQlhcmdMZW5ndGggPSBhcmdzLmxlbmd0aDsKCQkJCQlmb3IgKCA7IGFyZ0luZGV4IDwgYXJnTGVuZ3RoIDsgYXJnSW5kZXgrKyApIHsKCQkJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKyApIHsKCQkJCQkJCWlmICggYXJnc1sgYXJnSW5kZXggXSA9PT0gbGlzdFsgaSBdICkgewoJCQkJCQkJCS8vIEhhbmRsZSBmaXJpbmdJbmRleCBhbmQgZmlyaW5nTGVuZ3RoCgkJCQkJCQkJaWYgKCBmaXJpbmcgKSB7CgkJCQkJCQkJCWlmICggaSA8PSBmaXJpbmdMZW5ndGggKSB7CgkJCQkJCQkJCQlmaXJpbmdMZW5ndGgtLTsKCQkJCQkJCQkJCWlmICggaSA8PSBmaXJpbmdJbmRleCApIHsKCQkJCQkJCQkJCQlmaXJpbmdJbmRleC0tOwoJCQkJCQkJCQkJfQoJCQkJCQkJCQl9CgkJCQkJCQkJfQoJCQkJCQkJCS8vIFJlbW92ZSB0aGUgZWxlbWVudAoJCQkJCQkJCWxpc3Quc3BsaWNlKCBpLS0sIDEgKTsKCQkJCQkJCQkvLyBJZiB3ZSBoYXZlIHNvbWUgdW5pY2l0eSBwcm9wZXJ0eSB0aGVuCgkJCQkJCQkJLy8gd2Ugb25seSBuZWVkIHRvIGRvIHRoaXMgb25jZQoJCQkJCQkJCWlmICggZmxhZ3MudW5pcXVlICkgewoJCQkJCQkJCQlicmVhazsKCQkJCQkJCQl9CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCQlyZXR1cm4gdGhpczsKCQkJfSwKCQkJLy8gQ29udHJvbCBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0CgkJCWhhczogZnVuY3Rpb24oIGZuICkgewoJCQkJaWYgKCBsaXN0ICkgewoJCQkJCXZhciBpID0gMCwKCQkJCQkJbGVuZ3RoID0gbGlzdC5sZW5ndGg7CgkJCQkJZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJCQkJCWlmICggZm4gPT09IGxpc3RbIGkgXSApIHsKCQkJCQkJCXJldHVybiB0cnVlOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9LAoJCQkvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0CgkJCWVtcHR5OiBmdW5jdGlvbigpIHsKCQkJCWxpc3QgPSBbXTsKCQkJCXJldHVybiB0aGlzOwoJCQl9LAoJCQkvLyBIYXZlIHRoZSBsaXN0IGRvIG5vdGhpbmcgYW55bW9yZQoJCQlkaXNhYmxlOiBmdW5jdGlvbigpIHsKCQkJCWxpc3QgPSBzdGFjayA9IG1lbW9yeSA9IHVuZGVmaW5lZDsKCQkJCXJldHVybiB0aGlzOwoJCQl9LAoJCQkvLyBJcyBpdCBkaXNhYmxlZD8KCQkJZGlzYWJsZWQ6IGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICFsaXN0OwoJCQl9LAoJCQkvLyBMb2NrIHRoZSBsaXN0IGluIGl0cyBjdXJyZW50IHN0YXRlCgkJCWxvY2s6IGZ1bmN0aW9uKCkgewoJCQkJc3RhY2sgPSB1bmRlZmluZWQ7CgkJCQlpZiAoICFtZW1vcnkgfHwgbWVtb3J5ID09PSB0cnVlICkgewoJCQkJCXNlbGYuZGlzYWJsZSgpOwoJCQkJfQoJCQkJcmV0dXJuIHRoaXM7CgkJCX0sCgkJCS8vIElzIGl0IGxvY2tlZD8KCQkJbG9ja2VkOiBmdW5jdGlvbigpIHsKCQkJCXJldHVybiAhc3RhY2s7CgkJCX0sCgkJCS8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHMKCQkJZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkgewoJCQkJaWYgKCBzdGFjayApIHsKCQkJCQlpZiAoIGZpcmluZyApIHsKCQkJCQkJaWYgKCAhZmxhZ3Mub25jZSApIHsKCQkJCQkJCXN0YWNrLnB1c2goIFsgY29udGV4dCwgYXJncyBdICk7CgkJCQkJCX0KCQkJCQl9IGVsc2UgaWYgKCAhKCBmbGFncy5vbmNlICYmIG1lbW9yeSApICkgewoJCQkJCQlmaXJlKCBjb250ZXh0LCBhcmdzICk7CgkJCQkJfQoJCQkJfQoJCQkJcmV0dXJuIHRoaXM7CgkJCX0sCgkJCS8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzCgkJCWZpcmU6IGZ1bmN0aW9uKCkgewoJCQkJc2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7CgkJCQlyZXR1cm4gdGhpczsKCQkJfSwKCQkJLy8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlCgkJCWZpcmVkOiBmdW5jdGlvbigpIHsKCQkJCXJldHVybiAhIWZpcmVkOwoJCQl9CgkJfTsKCglyZXR1cm4gc2VsZjsKfTsKCgoKCnZhciAvLyBTdGF0aWMgcmVmZXJlbmNlIHRvIHNsaWNlCglzbGljZURlZmVycmVkID0gW10uc2xpY2U7CgpqUXVlcnkuZXh0ZW5kKHsKCglEZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7CgkJdmFyIGRvbmVMaXN0ID0galF1ZXJ5LkNhbGxiYWNrcyggIm9uY2UgbWVtb3J5IiApLAoJCQlmYWlsTGlzdCA9IGpRdWVyeS5DYWxsYmFja3MoICJvbmNlIG1lbW9yeSIgKSwKCQkJcHJvZ3Jlc3NMaXN0ID0galF1ZXJ5LkNhbGxiYWNrcyggIm1lbW9yeSIgKSwKCQkJc3RhdGUgPSAicGVuZGluZyIsCgkJCWxpc3RzID0gewoJCQkJcmVzb2x2ZTogZG9uZUxpc3QsCgkJCQlyZWplY3Q6IGZhaWxMaXN0LAoJCQkJbm90aWZ5OiBwcm9ncmVzc0xpc3QKCQkJfSwKCQkJcHJvbWlzZSA9IHsKCQkJCWRvbmU6IGRvbmVMaXN0LmFkZCwKCQkJCWZhaWw6IGZhaWxMaXN0LmFkZCwKCQkJCXByb2dyZXNzOiBwcm9ncmVzc0xpc3QuYWRkLAoKCQkJCXN0YXRlOiBmdW5jdGlvbigpIHsKCQkJCQlyZXR1cm4gc3RhdGU7CgkJCQl9LAoKCQkJCS8vIERlcHJlY2F0ZWQKCQkJCWlzUmVzb2x2ZWQ6IGRvbmVMaXN0LmZpcmVkLAoJCQkJaXNSZWplY3RlZDogZmFpbExpc3QuZmlyZWQsCgoJCQkJdGhlbjogZnVuY3Rpb24oIGRvbmVDYWxsYmFja3MsIGZhaWxDYWxsYmFja3MsIHByb2dyZXNzQ2FsbGJhY2tzICkgewoJCQkJCWRlZmVycmVkLmRvbmUoIGRvbmVDYWxsYmFja3MgKS5mYWlsKCBmYWlsQ2FsbGJhY2tzICkucHJvZ3Jlc3MoIHByb2dyZXNzQ2FsbGJhY2tzICk7CgkJCQkJcmV0dXJuIHRoaXM7CgkJCQl9LAoJCQkJYWx3YXlzOiBmdW5jdGlvbigpIHsKCQkJCQlkZWZlcnJlZC5kb25lLmFwcGx5KCBkZWZlcnJlZCwgYXJndW1lbnRzICkuZmFpbC5hcHBseSggZGVmZXJyZWQsIGFyZ3VtZW50cyApOwoJCQkJCXJldHVybiB0aGlzOwoJCQkJfSwKCQkJCXBpcGU6IGZ1bmN0aW9uKCBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyApIHsKCQkJCQlyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uKCBuZXdEZWZlciApIHsKCQkJCQkJalF1ZXJ5LmVhY2goIHsKCQkJCQkJCWRvbmU6IFsgZm5Eb25lLCAicmVzb2x2ZSIgXSwKCQkJCQkJCWZhaWw6IFsgZm5GYWlsLCAicmVqZWN0IiBdLAoJCQkJCQkJcHJvZ3Jlc3M6IFsgZm5Qcm9ncmVzcywgIm5vdGlmeSIgXQoJCQkJCQl9LCBmdW5jdGlvbiggaGFuZGxlciwgZGF0YSApIHsKCQkJCQkJCXZhciBmbiA9IGRhdGFbIDAgXSwKCQkJCQkJCQlhY3Rpb24gPSBkYXRhWyAxIF0sCgkJCQkJCQkJcmV0dXJuZWQ7CgkJCQkJCQlpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkgewoJCQkJCQkJCWRlZmVycmVkWyBoYW5kbGVyIF0oZnVuY3Rpb24oKSB7CgkJCQkJCQkJCXJldHVybmVkID0gZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQkJCQkJCQlpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7CgkJCQkJCQkJCQlyZXR1cm5lZC5wcm9taXNlKCkudGhlbiggbmV3RGVmZXIucmVzb2x2ZSwgbmV3RGVmZXIucmVqZWN0LCBuZXdEZWZlci5ub3RpZnkgKTsKCQkJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQkJCW5ld0RlZmVyWyBhY3Rpb24gKyAiV2l0aCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyBuZXdEZWZlciA6IHRoaXMsIFsgcmV0dXJuZWQgXSApOwoJCQkJCQkJCQl9CgkJCQkJCQkJfSk7CgkJCQkJCQl9IGVsc2UgewoJCQkJCQkJCWRlZmVycmVkWyBoYW5kbGVyIF0oIG5ld0RlZmVyWyBhY3Rpb24gXSApOwoJCQkJCQkJfQoJCQkJCQl9KTsKCQkJCQl9KS5wcm9taXNlKCk7CgkJCQl9LAoJCQkJLy8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZAoJCQkJLy8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdAoJCQkJcHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHsKCQkJCQlpZiAoIG9iaiA9PSBudWxsICkgewoJCQkJCQlvYmogPSBwcm9taXNlOwoJCQkJCX0gZWxzZSB7CgkJCQkJCWZvciAoIHZhciBrZXkgaW4gcHJvbWlzZSApIHsKCQkJCQkJCW9ialsga2V5IF0gPSBwcm9taXNlWyBrZXkgXTsKCQkJCQkJfQoJCQkJCX0KCQkJCQlyZXR1cm4gb2JqOwoJCQkJfQoJCQl9LAoJCQlkZWZlcnJlZCA9IHByb21pc2UucHJvbWlzZSh7fSksCgkJCWtleTsKCgkJZm9yICgga2V5IGluIGxpc3RzICkgewoJCQlkZWZlcnJlZFsga2V5IF0gPSBsaXN0c1sga2V5IF0uZmlyZTsKCQkJZGVmZXJyZWRbIGtleSArICJXaXRoIiBdID0gbGlzdHNbIGtleSBdLmZpcmVXaXRoOwoJCX0KCgkJLy8gSGFuZGxlIHN0YXRlCgkJZGVmZXJyZWQuZG9uZSggZnVuY3Rpb24oKSB7CgkJCXN0YXRlID0gInJlc29sdmVkIjsKCQl9LCBmYWlsTGlzdC5kaXNhYmxlLCBwcm9ncmVzc0xpc3QubG9jayApLmZhaWwoIGZ1bmN0aW9uKCkgewoJCQlzdGF0ZSA9ICJyZWplY3RlZCI7CgkJfSwgZG9uZUxpc3QuZGlzYWJsZSwgcHJvZ3Jlc3NMaXN0LmxvY2sgKTsKCgkJLy8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueQoJCWlmICggZnVuYyApIHsKCQkJZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTsKCQl9CgoJCS8vIEFsbCBkb25lIQoJCXJldHVybiBkZWZlcnJlZDsKCX0sCgoJLy8gRGVmZXJyZWQgaGVscGVyCgl3aGVuOiBmdW5jdGlvbiggZmlyc3RQYXJhbSApIHsKCQl2YXIgYXJncyA9IHNsaWNlRGVmZXJyZWQuY2FsbCggYXJndW1lbnRzLCAwICksCgkJCWkgPSAwLAoJCQlsZW5ndGggPSBhcmdzLmxlbmd0aCwKCQkJcFZhbHVlcyA9IG5ldyBBcnJheSggbGVuZ3RoICksCgkJCWNvdW50ID0gbGVuZ3RoLAoJCQlwQ291bnQgPSBsZW5ndGgsCgkJCWRlZmVycmVkID0gbGVuZ3RoIDw9IDEgJiYgZmlyc3RQYXJhbSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZmlyc3RQYXJhbS5wcm9taXNlICkgPwoJCQkJZmlyc3RQYXJhbSA6CgkJCQlqUXVlcnkuRGVmZXJyZWQoKSwKCQkJcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2UoKTsKCQlmdW5jdGlvbiByZXNvbHZlRnVuYyggaSApIHsKCQkJcmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQkJCWFyZ3NbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2VEZWZlcnJlZC5jYWxsKCBhcmd1bWVudHMsIDAgKSA6IHZhbHVlOwoJCQkJaWYgKCAhKCAtLWNvdW50ICkgKSB7CgkJCQkJZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGRlZmVycmVkLCBhcmdzICk7CgkJCQl9CgkJCX07CgkJfQoJCWZ1bmN0aW9uIHByb2dyZXNzRnVuYyggaSApIHsKCQkJcmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQkJCXBWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2VEZWZlcnJlZC5jYWxsKCBhcmd1bWVudHMsIDAgKSA6IHZhbHVlOwoJCQkJZGVmZXJyZWQubm90aWZ5V2l0aCggcHJvbWlzZSwgcFZhbHVlcyApOwoJCQl9OwoJCX0KCQlpZiAoIGxlbmd0aCA+IDEgKSB7CgkJCWZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkgewoJCQkJaWYgKCBhcmdzWyBpIF0gJiYgYXJnc1sgaSBdLnByb21pc2UgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZ3NbIGkgXS5wcm9taXNlICkgKSB7CgkJCQkJYXJnc1sgaSBdLnByb21pc2UoKS50aGVuKCByZXNvbHZlRnVuYyhpKSwgZGVmZXJyZWQucmVqZWN0LCBwcm9ncmVzc0Z1bmMoaSkgKTsKCQkJCX0gZWxzZSB7CgkJCQkJLS1jb3VudDsKCQkJCX0KCQkJfQoJCQlpZiAoICFjb3VudCApIHsKCQkJCWRlZmVycmVkLnJlc29sdmVXaXRoKCBkZWZlcnJlZCwgYXJncyApOwoJCQl9CgkJfSBlbHNlIGlmICggZGVmZXJyZWQgIT09IGZpcnN0UGFyYW0gKSB7CgkJCWRlZmVycmVkLnJlc29sdmVXaXRoKCBkZWZlcnJlZCwgbGVuZ3RoID8gWyBmaXJzdFBhcmFtIF0gOiBbXSApOwoJCX0KCQlyZXR1cm4gcHJvbWlzZTsKCX0KfSk7CgoKCgpqUXVlcnkuc3VwcG9ydCA9IChmdW5jdGlvbigpIHsKCgl2YXIgc3VwcG9ydCwKCQlhbGwsCgkJYSwKCQlzZWxlY3QsCgkJb3B0LAoJCWlucHV0LAoJCWZyYWdtZW50LAoJCXRkcywKCQlldmVudHMsCgkJZXZlbnROYW1lLAoJCWksCgkJaXNTdXBwb3J0ZWQsCgkJZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKSwKCQlkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CgoJLy8gUHJlbGltaW5hcnkgdGVzdHMKCWRpdi5zZXRBdHRyaWJ1dGUoImNsYXNzTmFtZSIsICJ0Iik7CglkaXYuaW5uZXJIVE1MID0gIiAgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYScgc3R5bGU9J3RvcDoxcHg7ZmxvYXQ6bGVmdDtvcGFjaXR5Oi41NTsnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+IjsKCglhbGwgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICIqIiApOwoJYSA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggImEiIClbIDAgXTsKCgkvLyBDYW4ndCBnZXQgYmFzaWMgdGVzdCBzdXBwb3J0CglpZiAoICFhbGwgfHwgIWFsbC5sZW5ndGggfHwgIWEgKSB7CgkJcmV0dXJuIHt9OwoJfQoKCS8vIEZpcnN0IGJhdGNoIG9mIHN1cHBvcnRzIHRlc3RzCglzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAic2VsZWN0IiApOwoJb3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKSApOwoJaW5wdXQgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJpbnB1dCIgKVsgMCBdOwoKCXN1cHBvcnQgPSB7CgkJLy8gSUUgc3RyaXBzIGxlYWRpbmcgd2hpdGVzcGFjZSB3aGVuIC5pbm5lckhUTUwgaXMgdXNlZAoJCWxlYWRpbmdXaGl0ZXNwYWNlOiAoIGRpdi5maXJzdENoaWxkLm5vZGVUeXBlID09PSAzICksCgoJCS8vIE1ha2Ugc3VyZSB0aGF0IHRib2R5IGVsZW1lbnRzIGFyZW4ndCBhdXRvbWF0aWNhbGx5IGluc2VydGVkCgkJLy8gSUUgd2lsbCBpbnNlcnQgdGhlbSBpbnRvIGVtcHR5IHRhYmxlcwoJCXRib2R5OiAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJ0Ym9keSIpLmxlbmd0aCwKCgkJLy8gTWFrZSBzdXJlIHRoYXQgbGluayBlbGVtZW50cyBnZXQgc2VyaWFsaXplZCBjb3JyZWN0bHkgYnkgaW5uZXJIVE1MCgkJLy8gVGhpcyByZXF1aXJlcyBhIHdyYXBwZXIgZWxlbWVudCBpbiBJRQoJCWh0bWxTZXJpYWxpemU6ICEhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJsaW5rIikubGVuZ3RoLAoKCQkvLyBHZXQgdGhlIHN0eWxlIGluZm9ybWF0aW9uIGZyb20gZ2V0QXR0cmlidXRlCgkJLy8gKElFIHVzZXMgLmNzc1RleHQgaW5zdGVhZCkKCQlzdHlsZTogL3RvcC8udGVzdCggYS5nZXRBdHRyaWJ1dGUoInN0eWxlIikgKSwKCgkJLy8gTWFrZSBzdXJlIHRoYXQgVVJMcyBhcmVuJ3QgbWFuaXB1bGF0ZWQKCQkvLyAoSUUgbm9ybWFsaXplcyBpdCBieSBkZWZhdWx0KQoJCWhyZWZOb3JtYWxpemVkOiAoIGEuZ2V0QXR0cmlidXRlKCJocmVmIikgPT09ICIvYSIgKSwKCgkJLy8gTWFrZSBzdXJlIHRoYXQgZWxlbWVudCBvcGFjaXR5IGV4aXN0cwoJCS8vIChJRSB1c2VzIGZpbHRlciBpbnN0ZWFkKQoJCS8vIFVzZSBhIHJlZ2V4IHRvIHdvcmsgYXJvdW5kIGEgV2ViS2l0IGlzc3VlLiBTZWUgIzUxNDUKCQlvcGFjaXR5OiAvXjAuNTUvLnRlc3QoIGEuc3R5bGUub3BhY2l0eSApLAoKCQkvLyBWZXJpZnkgc3R5bGUgZmxvYXQgZXhpc3RlbmNlCgkJLy8gKElFIHVzZXMgc3R5bGVGbG9hdCBpbnN0ZWFkIG9mIGNzc0Zsb2F0KQoJCWNzc0Zsb2F0OiAhIWEuc3R5bGUuY3NzRmxvYXQsCgoJCS8vIE1ha2Ugc3VyZSB0aGF0IGlmIG5vIHZhbHVlIGlzIHNwZWNpZmllZCBmb3IgYSBjaGVja2JveAoJCS8vIHRoYXQgaXQgZGVmYXVsdHMgdG8gIm9uIi4KCQkvLyAoV2ViS2l0IGRlZmF1bHRzIHRvICIiIGluc3RlYWQpCgkJY2hlY2tPbjogKCBpbnB1dC52YWx1ZSA9PT0gIm9uIiApLAoKCQkvLyBNYWtlIHN1cmUgdGhhdCBhIHNlbGVjdGVkLWJ5LWRlZmF1bHQgb3B0aW9uIGhhcyBhIHdvcmtpbmcgc2VsZWN0ZWQgcHJvcGVydHkuCgkJLy8gKFdlYktpdCBkZWZhdWx0cyB0byBmYWxzZSBpbnN0ZWFkIG9mIHRydWUsIElFIHRvbywgaWYgaXQncyBpbiBhbiBvcHRncm91cCkKCQlvcHRTZWxlY3RlZDogb3B0LnNlbGVjdGVkLAoKCQkvLyBUZXN0IHNldEF0dHJpYnV0ZSBvbiBjYW1lbENhc2UgY2xhc3MuIElmIGl0IHdvcmtzLCB3ZSBuZWVkIGF0dHJGaXhlcyB3aGVuIGRvaW5nIGdldC9zZXRBdHRyaWJ1dGUgKGllNi83KQoJCWdldFNldEF0dHJpYnV0ZTogZGl2LmNsYXNzTmFtZSAhPT0gInQiLAoKCQkvLyBUZXN0cyBmb3IgZW5jdHlwZSBzdXBwb3J0IG9uIGEgZm9ybSgjNjc0MykKCQllbmN0eXBlOiAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImZvcm0iKS5lbmN0eXBlLAoKCQkvLyBNYWtlcyBzdXJlIGNsb25pbmcgYW4gaHRtbDUgZWxlbWVudCBkb2VzIG5vdCBjYXVzZSBwcm9ibGVtcwoJCS8vIFdoZXJlIG91dGVySFRNTCBpcyB1bmRlZmluZWQsIHRoaXMgc3RpbGwgd29ya3MKCQlodG1sNUNsb25lOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJuYXYiKS5jbG9uZU5vZGUoIHRydWUgKS5vdXRlckhUTUwgIT09ICI8Om5hdj48LzpuYXY+IiwKCgkJLy8gV2lsbCBiZSBkZWZpbmVkIGxhdGVyCgkJc3VibWl0QnViYmxlczogdHJ1ZSwKCQljaGFuZ2VCdWJibGVzOiB0cnVlLAoJCWZvY3VzaW5CdWJibGVzOiBmYWxzZSwKCQlkZWxldGVFeHBhbmRvOiB0cnVlLAoJCW5vQ2xvbmVFdmVudDogdHJ1ZSwKCQlpbmxpbmVCbG9ja05lZWRzTGF5b3V0OiBmYWxzZSwKCQlzaHJpbmtXcmFwQmxvY2tzOiBmYWxzZSwKCQlyZWxpYWJsZU1hcmdpblJpZ2h0OiB0cnVlLAoJCXBpeGVsTWFyZ2luOiB0cnVlCgl9OwoKCS8vIGpRdWVyeS5ib3hNb2RlbCBERVBSRUNBVEVEIGluIDEuMywgdXNlIGpRdWVyeS5zdXBwb3J0LmJveE1vZGVsIGluc3RlYWQKCWpRdWVyeS5ib3hNb2RlbCA9IHN1cHBvcnQuYm94TW9kZWwgPSAoZG9jdW1lbnQuY29tcGF0TW9kZSA9PT0gIkNTUzFDb21wYXQiKTsKCgkvLyBNYWtlIHN1cmUgY2hlY2tlZCBzdGF0dXMgaXMgcHJvcGVybHkgY2xvbmVkCglpbnB1dC5jaGVja2VkID0gdHJ1ZTsKCXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSBpbnB1dC5jbG9uZU5vZGUoIHRydWUgKS5jaGVja2VkOwoKCS8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBvcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZW4ndCBtYXJrZWQgYXMgZGlzYWJsZWQKCS8vIChXZWJLaXQgbWFya3MgdGhlbSBhcyBkaXNhYmxlZCkKCXNlbGVjdC5kaXNhYmxlZCA9IHRydWU7CglzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDsKCgkvLyBUZXN0IHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRlbGV0ZSBhbiBleHBhbmRvIGZyb20gYW4gZWxlbWVudAoJLy8gRmFpbHMgaW4gSW50ZXJuZXQgRXhwbG9yZXIKCXRyeSB7CgkJZGVsZXRlIGRpdi50ZXN0OwoJfSBjYXRjaCggZSApIHsKCQlzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gPSBmYWxzZTsKCX0KCglpZiAoICFkaXYuYWRkRXZlbnRMaXN0ZW5lciAmJiBkaXYuYXR0YWNoRXZlbnQgJiYgZGl2LmZpcmVFdmVudCApIHsKCQlkaXYuYXR0YWNoRXZlbnQoICJvbmNsaWNrIiwgZnVuY3Rpb24oKSB7CgkJCS8vIENsb25pbmcgYSBub2RlIHNob3VsZG4ndCBjb3B5IG92ZXIgYW55CgkJCS8vIGJvdW5kIGV2ZW50IGhhbmRsZXJzIChJRSBkb2VzIHRoaXMpCgkJCXN1cHBvcnQubm9DbG9uZUV2ZW50ID0gZmFsc2U7CgkJfSk7CgkJZGl2LmNsb25lTm9kZSggdHJ1ZSApLmZpcmVFdmVudCggIm9uY2xpY2siICk7Cgl9CgoJLy8gQ2hlY2sgaWYgYSByYWRpbyBtYWludGFpbnMgaXRzIHZhbHVlCgkvLyBhZnRlciBiZWluZyBhcHBlbmRlZCB0byB0aGUgRE9NCglpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7CglpbnB1dC52YWx1ZSA9ICJ0IjsKCWlucHV0LnNldEF0dHJpYnV0ZSgidHlwZSIsICJyYWRpbyIpOwoJc3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09ICJ0IjsKCglpbnB1dC5zZXRBdHRyaWJ1dGUoImNoZWNrZWQiLCAiY2hlY2tlZCIpOwoKCS8vICMxMTIxNyAtIFdlYktpdCBsb3NlcyBjaGVjayB3aGVuIHRoZSBuYW1lIGlzIGFmdGVyIHRoZSBjaGVja2VkIGF0dHJpYnV0ZQoJaW5wdXQuc2V0QXR0cmlidXRlKCAibmFtZSIsICJ0IiApOwoKCWRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTsKCWZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwoJZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRpdi5sYXN0Q2hpbGQgKTsKCgkvLyBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHMKCXN1cHBvcnQuY2hlY2tDbG9uZSA9IGZyYWdtZW50LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkOwoKCS8vIENoZWNrIGlmIGEgZGlzY29ubmVjdGVkIGNoZWNrYm94IHdpbGwgcmV0YWluIGl0cyBjaGVja2VkCgkvLyB2YWx1ZSBvZiB0cnVlIGFmdGVyIGFwcGVuZGVkIHRvIHRoZSBET00gKElFNi83KQoJc3VwcG9ydC5hcHBlbmRDaGVja2VkID0gaW5wdXQuY2hlY2tlZDsKCglmcmFnbWVudC5yZW1vdmVDaGlsZCggaW5wdXQgKTsKCWZyYWdtZW50LmFwcGVuZENoaWxkKCBkaXYgKTsKCgkvLyBUZWNobmlxdWUgZnJvbSBKdXJpeSBaYXl0c2V2CgkvLyBodHRwOi8vcGVyZmVjdGlvbmtpbGxzLmNvbS9kZXRlY3RpbmctZXZlbnQtc3VwcG9ydC13aXRob3V0LWJyb3dzZXItc25pZmZpbmcvCgkvLyBXZSBvbmx5IGNhcmUgYWJvdXQgdGhlIGNhc2Ugd2hlcmUgbm9uLXN0YW5kYXJkIGV2ZW50IHN5c3RlbXMKCS8vIGFyZSB1c2VkLCBuYW1lbHkgaW4gSUUuIFNob3J0LWNpcmN1aXRpbmcgaGVyZSBoZWxwcyB1cyB0bwoJLy8gYXZvaWQgYW4gZXZhbCBjYWxsIChpbiBzZXRBdHRyaWJ1dGUpIHdoaWNoIGNhbiBjYXVzZSBDU1AKCS8vIHRvIGdvIGhheXdpcmUuIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQCglpZiAoIGRpdi5hdHRhY2hFdmVudCApIHsKCQlmb3IgKCBpIGluIHsKCQkJc3VibWl0OiAxLAoJCQljaGFuZ2U6IDEsCgkJCWZvY3VzaW46IDEKCQl9KSB7CgkJCWV2ZW50TmFtZSA9ICJvbiIgKyBpOwoJCQlpc1N1cHBvcnRlZCA9ICggZXZlbnROYW1lIGluIGRpdiApOwoJCQlpZiAoICFpc1N1cHBvcnRlZCApIHsKCQkJCWRpdi5zZXRBdHRyaWJ1dGUoIGV2ZW50TmFtZSwgInJldHVybjsiICk7CgkJCQlpc1N1cHBvcnRlZCA9ICggdHlwZW9mIGRpdlsgZXZlbnROYW1lIF0gPT09ICJmdW5jdGlvbiIgKTsKCQkJfQoJCQlzdXBwb3J0WyBpICsgIkJ1YmJsZXMiIF0gPSBpc1N1cHBvcnRlZDsKCQl9Cgl9CgoJZnJhZ21lbnQucmVtb3ZlQ2hpbGQoIGRpdiApOwoKCS8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUKCWZyYWdtZW50ID0gc2VsZWN0ID0gb3B0ID0gZGl2ID0gaW5wdXQgPSBudWxsOwoKCS8vIFJ1biB0ZXN0cyB0aGF0IG5lZWQgYSBib2R5IGF0IGRvYyByZWFkeQoJalF1ZXJ5KGZ1bmN0aW9uKCkgewoJCXZhciBjb250YWluZXIsIG91dGVyLCBpbm5lciwgdGFibGUsIHRkLCBvZmZzZXRTdXBwb3J0LAoJCQltYXJnaW5EaXYsIGNvbk1hcmdpblRvcCwgc3R5bGUsIGh0bWwsIHBvc2l0aW9uVG9wTGVmdFdpZHRoSGVpZ2h0LAoJCQlwYWRkaW5nTWFyZ2luQm9yZGVyVmlzaWJpbGl0eSwgcGFkZGluZ01hcmdpbkJvcmRlciwKCQkJYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF07CgoJCWlmICggIWJvZHkgKSB7CgkJCS8vIFJldHVybiBmb3IgZnJhbWVzZXQgZG9jcyB0aGF0IGRvbid0IGhhdmUgYSBib2R5CgkJCXJldHVybjsKCQl9CgoJCWNvbk1hcmdpblRvcCA9IDE7CgkJcGFkZGluZ01hcmdpbkJvcmRlciA9ICJwYWRkaW5nOjA7bWFyZ2luOjA7Ym9yZGVyOiI7CgkJcG9zaXRpb25Ub3BMZWZ0V2lkdGhIZWlnaHQgPSAicG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOjFweDtoZWlnaHQ6MXB4OyI7CgkJcGFkZGluZ01hcmdpbkJvcmRlclZpc2liaWxpdHkgPSBwYWRkaW5nTWFyZ2luQm9yZGVyICsgIjA7dmlzaWJpbGl0eTpoaWRkZW47IjsKCQlzdHlsZSA9ICJzdHlsZT0nIiArIHBvc2l0aW9uVG9wTGVmdFdpZHRoSGVpZ2h0ICsgcGFkZGluZ01hcmdpbkJvcmRlciArICI1cHggc29saWQgIzAwMDsiOwoJCWh0bWwgPSAiPGRpdiAiICsgc3R5bGUgKyAiZGlzcGxheTpibG9jazsnPjxkaXYgc3R5bGU9JyIgKyBwYWRkaW5nTWFyZ2luQm9yZGVyICsgIjA7ZGlzcGxheTpibG9jaztvdmVyZmxvdzpoaWRkZW47Jz48L2Rpdj48L2Rpdj4iICsKCQkJIjx0YWJsZSAiICsgc3R5bGUgKyAiJyBjZWxscGFkZGluZz0nMCcgY2VsbHNwYWNpbmc9JzAnPiIgKwoJCQkiPHRyPjx0ZD48L3RkPjwvdHI+PC90YWJsZT4iOwoKCQljb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKCQljb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IHBhZGRpbmdNYXJnaW5Cb3JkZXJWaXNpYmlsaXR5ICsgIndpZHRoOjA7aGVpZ2h0OjA7cG9zaXRpb246c3RhdGljO3RvcDowO21hcmdpbi10b3A6IiArIGNvbk1hcmdpblRvcCArICJweCI7CgkJYm9keS5pbnNlcnRCZWZvcmUoIGNvbnRhaW5lciwgYm9keS5maXJzdENoaWxkICk7CgoJCS8vIENvbnN0cnVjdCB0aGUgdGVzdCBlbGVtZW50CgkJZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CgkJY29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTsKCgkJLy8gQ2hlY2sgaWYgdGFibGUgY2VsbHMgc3RpbGwgaGF2ZSBvZmZzZXRXaWR0aC9IZWlnaHQgd2hlbiB0aGV5IGFyZSBzZXQKCQkvLyB0byBkaXNwbGF5Om5vbmUgYW5kIHRoZXJlIGFyZSBzdGlsbCBvdGhlciB2aXNpYmxlIHRhYmxlIGNlbGxzIGluIGEKCQkvLyB0YWJsZSByb3c7IGlmIHNvLCBvZmZzZXRXaWR0aC9IZWlnaHQgYXJlIG5vdCByZWxpYWJsZSBmb3IgdXNlIHdoZW4KCQkvLyBkZXRlcm1pbmluZyBpZiBhbiBlbGVtZW50IGhhcyBiZWVuIGhpZGRlbiBkaXJlY3RseSB1c2luZwoJCS8vIGRpc3BsYXk6bm9uZSAoaXQgaXMgc3RpbGwgc2FmZSB0byB1c2Ugb2Zmc2V0cyBpZiBhIHBhcmVudCBlbGVtZW50IGlzCgkJLy8gaGlkZGVuOyBkb24gc2FmZXR5IGdvZ2dsZXMgYW5kIHNlZSBidWcgIzQ1MTIgZm9yIG1vcmUgaW5mb3JtYXRpb24pLgoJCS8vIChvbmx5IElFIDggZmFpbHMgdGhpcyB0ZXN0KQoJCWRpdi5pbm5lckhUTUwgPSAiPHRhYmxlPjx0cj48dGQgc3R5bGU9JyIgKyBwYWRkaW5nTWFyZ2luQm9yZGVyICsgIjA7ZGlzcGxheTpub25lJz48L3RkPjx0ZD50PC90ZD48L3RyPjwvdGFibGU+IjsKCQl0ZHMgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJ0ZCIgKTsKCQlpc1N1cHBvcnRlZCA9ICggdGRzWyAwIF0ub2Zmc2V0SGVpZ2h0ID09PSAwICk7CgoJCXRkc1sgMCBdLnN0eWxlLmRpc3BsYXkgPSAiIjsKCQl0ZHNbIDEgXS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoKCQkvLyBDaGVjayBpZiBlbXB0eSB0YWJsZSBjZWxscyBzdGlsbCBoYXZlIG9mZnNldFdpZHRoL0hlaWdodAoJCS8vIChJRSA8PSA4IGZhaWwgdGhpcyB0ZXN0KQoJCXN1cHBvcnQucmVsaWFibGVIaWRkZW5PZmZzZXRzID0gaXNTdXBwb3J0ZWQgJiYgKCB0ZHNbIDAgXS5vZmZzZXRIZWlnaHQgPT09IDAgKTsKCgkJLy8gQ2hlY2sgaWYgZGl2IHdpdGggZXhwbGljaXQgd2lkdGggYW5kIG5vIG1hcmdpbi1yaWdodCBpbmNvcnJlY3RseQoJCS8vIGdldHMgY29tcHV0ZWQgbWFyZ2luLXJpZ2h0IGJhc2VkIG9uIHdpZHRoIG9mIGNvbnRhaW5lci4gRm9yIG1vcmUKCQkvLyBpbmZvIHNlZSBidWcgIzMzMzMKCQkvLyBGYWlscyBpbiBXZWJLaXQgYmVmb3JlIEZlYiAyMDExIG5pZ2h0bGllcwoJCS8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodAoJCWlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7CgkJCWRpdi5pbm5lckhUTUwgPSAiIjsKCQkJbWFyZ2luRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKTsKCQkJbWFyZ2luRGl2LnN0eWxlLndpZHRoID0gIjAiOwoJCQltYXJnaW5EaXYuc3R5bGUubWFyZ2luUmlnaHQgPSAiMCI7CgkJCWRpdi5zdHlsZS53aWR0aCA9ICIycHgiOwoJCQlkaXYuYXBwZW5kQ2hpbGQoIG1hcmdpbkRpdiApOwoJCQlzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQgPQoJCQkJKCBwYXJzZUludCggKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggbWFyZ2luRGl2LCBudWxsICkgfHwgeyBtYXJnaW5SaWdodDogMCB9ICkubWFyZ2luUmlnaHQsIDEwICkgfHwgMCApID09PSAwOwoJCX0KCgkJaWYgKCB0eXBlb2YgZGl2LnN0eWxlLnpvb20gIT09ICJ1bmRlZmluZWQiICkgewoJCQkvLyBDaGVjayBpZiBuYXRpdmVseSBibG9jay1sZXZlbCBlbGVtZW50cyBhY3QgbGlrZSBpbmxpbmUtYmxvY2sKCQkJLy8gZWxlbWVudHMgd2hlbiBzZXR0aW5nIHRoZWlyIGRpc3BsYXkgdG8gJ2lubGluZScgYW5kIGdpdmluZwoJCQkvLyB0aGVtIGxheW91dAoJCQkvLyAoSUUgPCA4IGRvZXMgdGhpcykKCQkJZGl2LmlubmVySFRNTCA9ICIiOwoJCQlkaXYuc3R5bGUud2lkdGggPSBkaXYuc3R5bGUucGFkZGluZyA9ICIxcHgiOwoJCQlkaXYuc3R5bGUuYm9yZGVyID0gMDsKCQkJZGl2LnN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CgkJCWRpdi5zdHlsZS5kaXNwbGF5ID0gImlubGluZSI7CgkJCWRpdi5zdHlsZS56b29tID0gMTsKCQkJc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0ID0gKCBkaXYub2Zmc2V0V2lkdGggPT09IDMgKTsKCgkJCS8vIENoZWNrIGlmIGVsZW1lbnRzIHdpdGggbGF5b3V0IHNocmluay13cmFwIHRoZWlyIGNoaWxkcmVuCgkJCS8vIChJRSA2IGRvZXMgdGhpcykKCQkJZGl2LnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwoJCQlkaXYuc3R5bGUub3ZlcmZsb3cgPSAidmlzaWJsZSI7CgkJCWRpdi5pbm5lckhUTUwgPSAiPGRpdiBzdHlsZT0nd2lkdGg6NXB4Oyc+PC9kaXY+IjsKCQkJc3VwcG9ydC5zaHJpbmtXcmFwQmxvY2tzID0gKCBkaXYub2Zmc2V0V2lkdGggIT09IDMgKTsKCQl9CgoJCWRpdi5zdHlsZS5jc3NUZXh0ID0gcG9zaXRpb25Ub3BMZWZ0V2lkdGhIZWlnaHQgKyBwYWRkaW5nTWFyZ2luQm9yZGVyVmlzaWJpbGl0eTsKCQlkaXYuaW5uZXJIVE1MID0gaHRtbDsKCgkJb3V0ZXIgPSBkaXYuZmlyc3RDaGlsZDsKCQlpbm5lciA9IG91dGVyLmZpcnN0Q2hpbGQ7CgkJdGQgPSBvdXRlci5uZXh0U2libGluZy5maXJzdENoaWxkLmZpcnN0Q2hpbGQ7CgoJCW9mZnNldFN1cHBvcnQgPSB7CgkJCWRvZXNOb3RBZGRCb3JkZXI6ICggaW5uZXIub2Zmc2V0VG9wICE9PSA1ICksCgkJCWRvZXNBZGRCb3JkZXJGb3JUYWJsZUFuZENlbGxzOiAoIHRkLm9mZnNldFRvcCA9PT0gNSApCgkJfTsKCgkJaW5uZXIuc3R5bGUucG9zaXRpb24gPSAiZml4ZWQiOwoJCWlubmVyLnN0eWxlLnRvcCA9ICIyMHB4IjsKCgkJLy8gc2FmYXJpIHN1YnRyYWN0cyBwYXJlbnQgYm9yZGVyIHdpZHRoIGhlcmUgd2hpY2ggaXMgNXB4CgkJb2Zmc2V0U3VwcG9ydC5maXhlZFBvc2l0aW9uID0gKCBpbm5lci5vZmZzZXRUb3AgPT09IDIwIHx8IGlubmVyLm9mZnNldFRvcCA9PT0gMTUgKTsKCQlpbm5lci5zdHlsZS5wb3NpdGlvbiA9IGlubmVyLnN0eWxlLnRvcCA9ICIiOwoKCQlvdXRlci5zdHlsZS5vdmVyZmxvdyA9ICJoaWRkZW4iOwoJCW91dGVyLnN0eWxlLnBvc2l0aW9uID0gInJlbGF0aXZlIjsKCgkJb2Zmc2V0U3VwcG9ydC5zdWJ0cmFjdHNCb3JkZXJGb3JPdmVyZmxvd05vdFZpc2libGUgPSAoIGlubmVyLm9mZnNldFRvcCA9PT0gLTUgKTsKCQlvZmZzZXRTdXBwb3J0LmRvZXNOb3RJbmNsdWRlTWFyZ2luSW5Cb2R5T2Zmc2V0ID0gKCBib2R5Lm9mZnNldFRvcCAhPT0gY29uTWFyZ2luVG9wICk7CgoJCWlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7CgkJCWRpdi5zdHlsZS5tYXJnaW5Ub3AgPSAiMSUiOwoJCQlzdXBwb3J0LnBpeGVsTWFyZ2luID0gKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2LCBudWxsICkgfHwgeyBtYXJnaW5Ub3A6IDAgfSApLm1hcmdpblRvcCAhPT0gIjElIjsKCQl9CgoJCWlmICggdHlwZW9mIGNvbnRhaW5lci5zdHlsZS56b29tICE9PSAidW5kZWZpbmVkIiApIHsKCQkJY29udGFpbmVyLnN0eWxlLnpvb20gPSAxOwoJCX0KCgkJYm9keS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7CgkJbWFyZ2luRGl2ID0gZGl2ID0gY29udGFpbmVyID0gbnVsbDsKCgkJalF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwgb2Zmc2V0U3VwcG9ydCApOwoJfSk7CgoJcmV0dXJuIHN1cHBvcnQ7Cn0pKCk7CgoKCgp2YXIgcmJyYWNlID0gL14oPzpcey4qXH18XFsuKlxdKSQvLAoJcm11bHRpRGFzaCA9IC8oW0EtWl0pL2c7CgpqUXVlcnkuZXh0ZW5kKHsKCWNhY2hlOiB7fSwKCgkvLyBQbGVhc2UgdXNlIHdpdGggY2F1dGlvbgoJdXVpZDogMCwKCgkvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2UKCS8vIE5vbi1kaWdpdHMgcmVtb3ZlZCB0byBtYXRjaCByaW5saW5lalF1ZXJ5CglleHBhbmRvOiAialF1ZXJ5IiArICggalF1ZXJ5LmZuLmpxdWVyeSArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXEQvZywgIiIgKSwKCgkvLyBUaGUgZm9sbG93aW5nIGVsZW1lbnRzIHRocm93IHVuY2F0Y2hhYmxlIGV4Y2VwdGlvbnMgaWYgeW91CgkvLyBhdHRlbXB0IHRvIGFkZCBleHBhbmRvIHByb3BlcnRpZXMgdG8gdGhlbS4KCW5vRGF0YTogewoJCSJlbWJlZCI6IHRydWUsCgkJLy8gQmFuIGFsbCBvYmplY3RzIGV4Y2VwdCBmb3IgRmxhc2ggKHdoaWNoIGhhbmRsZSBleHBhbmRvcykKCQkib2JqZWN0IjogImNsc2lkOkQyN0NEQjZFLUFFNkQtMTFjZi05NkI4LTQ0NDU1MzU0MDAwMCIsCgkJImFwcGxldCI6IHRydWUKCX0sCgoJaGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7CgkJZWxlbSA9IGVsZW0ubm9kZVR5cGUgPyBqUXVlcnkuY2FjaGVbIGVsZW1balF1ZXJ5LmV4cGFuZG9dIF0gOiBlbGVtWyBqUXVlcnkuZXhwYW5kbyBdOwoJCXJldHVybiAhIWVsZW0gJiYgIWlzRW1wdHlEYXRhT2JqZWN0KCBlbGVtICk7Cgl9LAoKCWRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhLCBwdnQgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7CgkJaWYgKCAhalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJdmFyIHByaXZhdGVDYWNoZSwgdGhpc0NhY2hlLCByZXQsCgkJCWludGVybmFsS2V5ID0galF1ZXJ5LmV4cGFuZG8sCgkJCWdldEJ5TmFtZSA9IHR5cGVvZiBuYW1lID09PSAic3RyaW5nIiwKCgkJCS8vIFdlIGhhdmUgdG8gaGFuZGxlIERPTSBub2RlcyBhbmQgSlMgb2JqZWN0cyBkaWZmZXJlbnRseSBiZWNhdXNlIElFNi03CgkJCS8vIGNhbid0IEdDIG9iamVjdCByZWZlcmVuY2VzIHByb3Blcmx5IGFjcm9zcyB0aGUgRE9NLUpTIGJvdW5kYXJ5CgkJCWlzTm9kZSA9IGVsZW0ubm9kZVR5cGUsCgoJCQkvLyBPbmx5IERPTSBub2RlcyBuZWVkIHRoZSBnbG9iYWwgalF1ZXJ5IGNhY2hlOyBKUyBvYmplY3QgZGF0YSBpcwoJCQkvLyBhdHRhY2hlZCBkaXJlY3RseSB0byB0aGUgb2JqZWN0IHNvIEdDIGNhbiBvY2N1ciBhdXRvbWF0aWNhbGx5CgkJCWNhY2hlID0gaXNOb2RlID8galF1ZXJ5LmNhY2hlIDogZWxlbSwKCgkJCS8vIE9ubHkgZGVmaW5pbmcgYW4gSUQgZm9yIEpTIG9iamVjdHMgaWYgaXRzIGNhY2hlIGFscmVhZHkgZXhpc3RzIGFsbG93cwoJCQkvLyB0aGUgY29kZSB0byBzaG9ydGN1dCBvbiB0aGUgc2FtZSBwYXRoIGFzIGEgRE9NIG5vZGUgd2l0aCBubyBjYWNoZQoJCQlpZCA9IGlzTm9kZSA/IGVsZW1bIGludGVybmFsS2V5IF0gOiBlbGVtWyBpbnRlcm5hbEtleSBdICYmIGludGVybmFsS2V5LAoJCQlpc0V2ZW50cyA9IG5hbWUgPT09ICJldmVudHMiOwoKCQkvLyBBdm9pZCBkb2luZyBhbnkgbW9yZSB3b3JrIHRoYW4gd2UgbmVlZCB0byB3aGVuIHRyeWluZyB0byBnZXQgZGF0YSBvbiBhbgoJCS8vIG9iamVjdCB0aGF0IGhhcyBubyBkYXRhIGF0IGFsbAoJCWlmICggKCFpZCB8fCAhY2FjaGVbaWRdIHx8ICghaXNFdmVudHMgJiYgIXB2dCAmJiAhY2FjaGVbaWRdLmRhdGEpKSAmJiBnZXRCeU5hbWUgJiYgZGF0YSA9PT0gdW5kZWZpbmVkICkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAoICFpZCApIHsKCQkJLy8gT25seSBET00gbm9kZXMgbmVlZCBhIG5ldyB1bmlxdWUgSUQgZm9yIGVhY2ggZWxlbWVudCBzaW5jZSB0aGVpciBkYXRhCgkJCS8vIGVuZHMgdXAgaW4gdGhlIGdsb2JhbCBjYWNoZQoJCQlpZiAoIGlzTm9kZSApIHsKCQkJCWVsZW1bIGludGVybmFsS2V5IF0gPSBpZCA9ICsralF1ZXJ5LnV1aWQ7CgkJCX0gZWxzZSB7CgkJCQlpZCA9IGludGVybmFsS2V5OwoJCQl9CgkJfQoKCQlpZiAoICFjYWNoZVsgaWQgXSApIHsKCQkJY2FjaGVbIGlkIF0gPSB7fTsKCgkJCS8vIEF2b2lkcyBleHBvc2luZyBqUXVlcnkgbWV0YWRhdGEgb24gcGxhaW4gSlMgb2JqZWN0cyB3aGVuIHRoZSBvYmplY3QKCQkJLy8gaXMgc2VyaWFsaXplZCB1c2luZyBKU09OLnN0cmluZ2lmeQoJCQlpZiAoICFpc05vZGUgKSB7CgkJCQljYWNoZVsgaWQgXS50b0pTT04gPSBqUXVlcnkubm9vcDsKCQkJfQoJCX0KCgkJLy8gQW4gb2JqZWN0IGNhbiBiZSBwYXNzZWQgdG8galF1ZXJ5LmRhdGEgaW5zdGVhZCBvZiBhIGtleS92YWx1ZSBwYWlyOyB0aGlzIGdldHMKCQkvLyBzaGFsbG93IGNvcGllZCBvdmVyIG9udG8gdGhlIGV4aXN0aW5nIGNhY2hlCgkJaWYgKCB0eXBlb2YgbmFtZSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIG5hbWUgPT09ICJmdW5jdGlvbiIgKSB7CgkJCWlmICggcHZ0ICkgewoJCQkJY2FjaGVbIGlkIF0gPSBqUXVlcnkuZXh0ZW5kKCBjYWNoZVsgaWQgXSwgbmFtZSApOwoJCQl9IGVsc2UgewoJCQkJY2FjaGVbIGlkIF0uZGF0YSA9IGpRdWVyeS5leHRlbmQoIGNhY2hlWyBpZCBdLmRhdGEsIG5hbWUgKTsKCQkJfQoJCX0KCgkJcHJpdmF0ZUNhY2hlID0gdGhpc0NhY2hlID0gY2FjaGVbIGlkIF07CgoJCS8vIGpRdWVyeSBkYXRhKCkgaXMgc3RvcmVkIGluIGEgc2VwYXJhdGUgb2JqZWN0IGluc2lkZSB0aGUgb2JqZWN0J3MgaW50ZXJuYWwgZGF0YQoJCS8vIGNhY2hlIGluIG9yZGVyIHRvIGF2b2lkIGtleSBjb2xsaXNpb25zIGJldHdlZW4gaW50ZXJuYWwgZGF0YSBhbmQgdXNlci1kZWZpbmVkCgkJLy8gZGF0YS4KCQlpZiAoICFwdnQgKSB7CgkJCWlmICggIXRoaXNDYWNoZS5kYXRhICkgewoJCQkJdGhpc0NhY2hlLmRhdGEgPSB7fTsKCQkJfQoKCQkJdGhpc0NhY2hlID0gdGhpc0NhY2hlLmRhdGE7CgkJfQoKCQlpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHsKCQkJdGhpc0NhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICkgXSA9IGRhdGE7CgkJfQoKCQkvLyBVc2VycyBzaG91bGQgbm90IGF0dGVtcHQgdG8gaW5zcGVjdCB0aGUgaW50ZXJuYWwgZXZlbnRzIG9iamVjdCB1c2luZyBqUXVlcnkuZGF0YSwKCQkvLyBpdCBpcyB1bmRvY3VtZW50ZWQgYW5kIHN1YmplY3QgdG8gY2hhbmdlLiBCdXQgZG9lcyBhbnlvbmUgbGlzdGVuPyBOby4KCQlpZiAoIGlzRXZlbnRzICYmICF0aGlzQ2FjaGVbIG5hbWUgXSApIHsKCQkJcmV0dXJuIHByaXZhdGVDYWNoZS5ldmVudHM7CgkJfQoKCQkvLyBDaGVjayBmb3IgYm90aCBjb252ZXJ0ZWQtdG8tY2FtZWwgYW5kIG5vbi1jb252ZXJ0ZWQgZGF0YSBwcm9wZXJ0eSBuYW1lcwoJCS8vIElmIGEgZGF0YSBwcm9wZXJ0eSB3YXMgc3BlY2lmaWVkCgkJaWYgKCBnZXRCeU5hbWUgKSB7CgoJCQkvLyBGaXJzdCBUcnkgdG8gZmluZCBhcy1pcyBwcm9wZXJ0eSBkYXRhCgkJCXJldCA9IHRoaXNDYWNoZVsgbmFtZSBdOwoKCQkJLy8gVGVzdCBmb3IgbnVsbHx1bmRlZmluZWQgcHJvcGVydHkgZGF0YQoJCQlpZiAoIHJldCA9PSBudWxsICkgewoKCQkJCS8vIFRyeSB0byBmaW5kIHRoZSBjYW1lbENhc2VkIHByb3BlcnR5CgkJCQlyZXQgPSB0aGlzQ2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSBdOwoJCQl9CgkJfSBlbHNlIHsKCQkJcmV0ID0gdGhpc0NhY2hlOwoJCX0KCgkJcmV0dXJuIHJldDsKCX0sCgoJcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHB2dCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHsKCQlpZiAoICFqUXVlcnkuYWNjZXB0RGF0YSggZWxlbSApICkgewoJCQlyZXR1cm47CgkJfQoKCQl2YXIgdGhpc0NhY2hlLCBpLCBsLAoKCQkJLy8gUmVmZXJlbmNlIHRvIGludGVybmFsIGRhdGEgY2FjaGUga2V5CgkJCWludGVybmFsS2V5ID0galF1ZXJ5LmV4cGFuZG8sCgoJCQlpc05vZGUgPSBlbGVtLm5vZGVUeXBlLAoKCQkJLy8gU2VlIGpRdWVyeS5kYXRhIGZvciBtb3JlIGluZm9ybWF0aW9uCgkJCWNhY2hlID0gaXNOb2RlID8galF1ZXJ5LmNhY2hlIDogZWxlbSwKCgkJCS8vIFNlZSBqUXVlcnkuZGF0YSBmb3IgbW9yZSBpbmZvcm1hdGlvbgoJCQlpZCA9IGlzTm9kZSA/IGVsZW1bIGludGVybmFsS2V5IF0gOiBpbnRlcm5hbEtleTsKCgkJLy8gSWYgdGhlcmUgaXMgYWxyZWFkeSBubyBjYWNoZSBlbnRyeSBmb3IgdGhpcyBvYmplY3QsIHRoZXJlIGlzIG5vCgkJLy8gcHVycG9zZSBpbiBjb250aW51aW5nCgkJaWYgKCAhY2FjaGVbIGlkIF0gKSB7CgkJCXJldHVybjsKCQl9CgoJCWlmICggbmFtZSApIHsKCgkJCXRoaXNDYWNoZSA9IHB2dCA/IGNhY2hlWyBpZCBdIDogY2FjaGVbIGlkIF0uZGF0YTsKCgkJCWlmICggdGhpc0NhY2hlICkgewoKCQkJCS8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBuYW1lcyBmb3IgZGF0YSBrZXlzCgkJCQlpZiAoICFqUXVlcnkuaXNBcnJheSggbmFtZSApICkgewoKCQkJCQkvLyB0cnkgdGhlIHN0cmluZyBhcyBhIGtleSBiZWZvcmUgYW55IG1hbmlwdWxhdGlvbgoJCQkJCWlmICggbmFtZSBpbiB0aGlzQ2FjaGUgKSB7CgkJCQkJCW5hbWUgPSBbIG5hbWUgXTsKCQkJCQl9IGVsc2UgewoKCQkJCQkJLy8gc3BsaXQgdGhlIGNhbWVsIGNhc2VkIHZlcnNpb24gYnkgc3BhY2VzIHVubGVzcyBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzCgkJCQkJCW5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7CgkJCQkJCWlmICggbmFtZSBpbiB0aGlzQ2FjaGUgKSB7CgkJCQkJCQluYW1lID0gWyBuYW1lIF07CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQluYW1lID0gbmFtZS5zcGxpdCggIiAiICk7CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgoJCQkJZm9yICggaSA9IDAsIGwgPSBuYW1lLmxlbmd0aDsgaSA8IGw7IGkrKyApIHsKCQkJCQlkZWxldGUgdGhpc0NhY2hlWyBuYW1lW2ldIF07CgkJCQl9CgoJCQkJLy8gSWYgdGhlcmUgaXMgbm8gZGF0YSBsZWZ0IGluIHRoZSBjYWNoZSwgd2Ugd2FudCB0byBjb250aW51ZQoJCQkJLy8gYW5kIGxldCB0aGUgY2FjaGUgb2JqZWN0IGl0c2VsZiBnZXQgZGVzdHJveWVkCgkJCQlpZiAoICEoIHB2dCA/IGlzRW1wdHlEYXRhT2JqZWN0IDogalF1ZXJ5LmlzRW1wdHlPYmplY3QgKSggdGhpc0NhY2hlICkgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoJCQl9CgkJfQoKCQkvLyBTZWUgalF1ZXJ5LmRhdGEgZm9yIG1vcmUgaW5mb3JtYXRpb24KCQlpZiAoICFwdnQgKSB7CgkJCWRlbGV0ZSBjYWNoZVsgaWQgXS5kYXRhOwoKCQkJLy8gRG9uJ3QgZGVzdHJveSB0aGUgcGFyZW50IGNhY2hlIHVubGVzcyB0aGUgaW50ZXJuYWwgZGF0YSBvYmplY3QKCQkJLy8gaGFkIGJlZW4gdGhlIG9ubHkgdGhpbmcgbGVmdCBpbiBpdAoJCQlpZiAoICFpc0VtcHR5RGF0YU9iamVjdChjYWNoZVsgaWQgXSkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCQl9CgoJCS8vIEJyb3dzZXJzIHRoYXQgZmFpbCBleHBhbmRvIGRlbGV0aW9uIGFsc28gcmVmdXNlIHRvIGRlbGV0ZSBleHBhbmRvcyBvbgoJCS8vIHRoZSB3aW5kb3csIGJ1dCBpdCB3aWxsIGFsbG93IGl0IG9uIGFsbCBvdGhlciBKUyBvYmplY3RzOyBvdGhlciBicm93c2VycwoJCS8vIGRvbid0IGNhcmUKCQkvLyBFbnN1cmUgdGhhdCBgY2FjaGVgIGlzIG5vdCBhIHdpbmRvdyBvYmplY3QgIzEwMDgwCgkJaWYgKCBqUXVlcnkuc3VwcG9ydC5kZWxldGVFeHBhbmRvIHx8ICFjYWNoZS5zZXRJbnRlcnZhbCApIHsKCQkJZGVsZXRlIGNhY2hlWyBpZCBdOwoJCX0gZWxzZSB7CgkJCWNhY2hlWyBpZCBdID0gbnVsbDsKCQl9CgoJCS8vIFdlIGRlc3Ryb3llZCB0aGUgY2FjaGUgYW5kIG5lZWQgdG8gZWxpbWluYXRlIHRoZSBleHBhbmRvIG9uIHRoZSBub2RlIHRvIGF2b2lkCgkJLy8gZmFsc2UgbG9va3VwcyBpbiB0aGUgY2FjaGUgZm9yIGVudHJpZXMgdGhhdCBubyBsb25nZXIgZXhpc3QKCQlpZiAoIGlzTm9kZSApIHsKCQkJLy8gSUUgZG9lcyBub3QgYWxsb3cgdXMgdG8gZGVsZXRlIGV4cGFuZG8gcHJvcGVydGllcyBmcm9tIG5vZGVzLAoJCQkvLyBub3IgZG9lcyBpdCBoYXZlIGEgcmVtb3ZlQXR0cmlidXRlIGZ1bmN0aW9uIG9uIERvY3VtZW50IG5vZGVzOwoJCQkvLyB3ZSBtdXN0IGhhbmRsZSBhbGwgb2YgdGhlc2UgY2FzZXMKCQkJaWYgKCBqUXVlcnkuc3VwcG9ydC5kZWxldGVFeHBhbmRvICkgewoJCQkJZGVsZXRlIGVsZW1bIGludGVybmFsS2V5IF07CgkJCX0gZWxzZSBpZiAoIGVsZW0ucmVtb3ZlQXR0cmlidXRlICkgewoJCQkJZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIGludGVybmFsS2V5ICk7CgkJCX0gZWxzZSB7CgkJCQllbGVtWyBpbnRlcm5hbEtleSBdID0gbnVsbDsKCQkJfQoJCX0KCX0sCgoJLy8gRm9yIGludGVybmFsIHVzZSBvbmx5LgoJX2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkgewoJCXJldHVybiBqUXVlcnkuZGF0YSggZWxlbSwgbmFtZSwgZGF0YSwgdHJ1ZSApOwoJfSwKCgkvLyBBIG1ldGhvZCBmb3IgZGV0ZXJtaW5pbmcgaWYgYSBET00gbm9kZSBjYW4gaGFuZGxlIHRoZSBkYXRhIGV4cGFuZG8KCWFjY2VwdERhdGE6IGZ1bmN0aW9uKCBlbGVtICkgewoJCWlmICggZWxlbS5ub2RlTmFtZSApIHsKCQkJdmFyIG1hdGNoID0galF1ZXJ5Lm5vRGF0YVsgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07CgoJCQlpZiAoIG1hdGNoICkgewoJCQkJcmV0dXJuICEobWF0Y2ggPT09IHRydWUgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoImNsYXNzaWQiKSAhPT0gbWF0Y2gpOwoJCQl9CgkJfQoKCQlyZXR1cm4gdHJ1ZTsKCX0KfSk7CgpqUXVlcnkuZm4uZXh0ZW5kKHsKCWRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCXZhciBwYXJ0cywgcGFydCwgYXR0ciwgbmFtZSwgbCwKCQkJZWxlbSA9IHRoaXNbMF0sCgkJCWkgPSAwLAoJCQlkYXRhID0gbnVsbDsKCgkJLy8gR2V0cyBhbGwgdmFsdWVzCgkJaWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHsKCQkJaWYgKCB0aGlzLmxlbmd0aCApIHsKCQkJCWRhdGEgPSBqUXVlcnkuZGF0YSggZWxlbSApOwoKCQkJCWlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhalF1ZXJ5Ll9kYXRhKCBlbGVtLCAicGFyc2VkQXR0cnMiICkgKSB7CgkJCQkJYXR0ciA9IGVsZW0uYXR0cmlidXRlczsKCQkJCQlmb3IgKCBsID0gYXR0ci5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CgkJCQkJCW5hbWUgPSBhdHRyW2ldLm5hbWU7CgoJCQkJCQlpZiAoIG5hbWUuaW5kZXhPZiggImRhdGEtIiApID09PSAwICkgewoJCQkJCQkJbmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc3Vic3RyaW5nKDUpICk7CgoJCQkJCQkJZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApOwoJCQkJCQl9CgkJCQkJfQoJCQkJCWpRdWVyeS5fZGF0YSggZWxlbSwgInBhcnNlZEF0dHJzIiwgdHJ1ZSApOwoJCQkJfQoJCQl9CgoJCQlyZXR1cm4gZGF0YTsKCQl9CgoJCS8vIFNldHMgbXVsdGlwbGUgdmFsdWVzCgkJaWYgKCB0eXBlb2Yga2V5ID09PSAib2JqZWN0IiApIHsKCQkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCWpRdWVyeS5kYXRhKCB0aGlzLCBrZXkgKTsKCQkJfSk7CgkJfQoKCQlwYXJ0cyA9IGtleS5zcGxpdCggIi4iLCAyICk7CgkJcGFydHNbMV0gPSBwYXJ0c1sxXSA/ICIuIiArIHBhcnRzWzFdIDogIiI7CgkJcGFydCA9IHBhcnRzWzFdICsgIiEiOwoKCQlyZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkgewoKCQkJaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewoJCQkJZGF0YSA9IHRoaXMudHJpZ2dlckhhbmRsZXIoICJnZXREYXRhIiArIHBhcnQsIFsgcGFydHNbMF0gXSApOwoKCQkJCS8vIFRyeSB0byBmZXRjaCBhbnkgaW50ZXJuYWxseSBzdG9yZWQgZGF0YSBmaXJzdAoJCQkJaWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbSApIHsKCQkJCQlkYXRhID0galF1ZXJ5LmRhdGEoIGVsZW0sIGtleSApOwoJCQkJCWRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICk7CgkJCQl9CgoJCQkJcmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBwYXJ0c1sxXSA/CgkJCQkJdGhpcy5kYXRhKCBwYXJ0c1swXSApIDoKCQkJCQlkYXRhOwoJCQl9CgoJCQlwYXJ0c1sxXSA9IHZhbHVlOwoJCQl0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQl2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApOwoKCQkJCXNlbGYudHJpZ2dlckhhbmRsZXIoICJzZXREYXRhIiArIHBhcnQsIHBhcnRzICk7CgkJCQlqUXVlcnkuZGF0YSggdGhpcywga2V5LCB2YWx1ZSApOwoJCQkJc2VsZi50cmlnZ2VySGFuZGxlciggImNoYW5nZURhdGEiICsgcGFydCwgcGFydHMgKTsKCQkJfSk7CgkJfSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCBmYWxzZSApOwoJfSwKCglyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkgewoJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCWpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLCBrZXkgKTsKCQl9KTsKCX0KfSk7CgpmdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkgewoJLy8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueQoJLy8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlCglpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkgewoKCQl2YXIgbmFtZSA9ICJkYXRhLSIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgIi0kMSIgKS50b0xvd2VyQ2FzZSgpOwoKCQlkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTsKCgkJaWYgKCB0eXBlb2YgZGF0YSA9PT0gInN0cmluZyIgKSB7CgkJCXRyeSB7CgkJCQlkYXRhID0gZGF0YSA9PT0gInRydWUiID8gdHJ1ZSA6CgkJCQlkYXRhID09PSAiZmFsc2UiID8gZmFsc2UgOgoJCQkJZGF0YSA9PT0gIm51bGwiID8gbnVsbCA6CgkJCQlqUXVlcnkuaXNOdW1lcmljKCBkYXRhICkgPyArZGF0YSA6CgkJCQkJcmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6CgkJCQkJZGF0YTsKCQkJfSBjYXRjaCggZSApIHt9CgoJCQkvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXIKCQkJalF1ZXJ5LmRhdGEoIGVsZW0sIGtleSwgZGF0YSApOwoKCQl9IGVsc2UgewoJCQlkYXRhID0gdW5kZWZpbmVkOwoJCX0KCX0KCglyZXR1cm4gZGF0YTsKfQoKLy8gY2hlY2tzIGEgY2FjaGUgb2JqZWN0IGZvciBlbXB0aW5lc3MKZnVuY3Rpb24gaXNFbXB0eURhdGFPYmplY3QoIG9iaiApIHsKCWZvciAoIHZhciBuYW1lIGluIG9iaiApIHsKCgkJLy8gaWYgdGhlIHB1YmxpYyBkYXRhIG9iamVjdCBpcyBlbXB0eSwgdGhlIHByaXZhdGUgaXMgc3RpbGwgZW1wdHkKCQlpZiAoIG5hbWUgPT09ICJkYXRhIiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb2JqW25hbWVdICkgKSB7CgkJCWNvbnRpbnVlOwoJCX0KCQlpZiAoIG5hbWUgIT09ICJ0b0pTT04iICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJfQoKCXJldHVybiB0cnVlOwp9CgoKCgpmdW5jdGlvbiBoYW5kbGVRdWV1ZU1hcmtEZWZlciggZWxlbSwgdHlwZSwgc3JjICkgewoJdmFyIGRlZmVyRGF0YUtleSA9IHR5cGUgKyAiZGVmZXIiLAoJCXF1ZXVlRGF0YUtleSA9IHR5cGUgKyAicXVldWUiLAoJCW1hcmtEYXRhS2V5ID0gdHlwZSArICJtYXJrIiwKCQlkZWZlciA9IGpRdWVyeS5fZGF0YSggZWxlbSwgZGVmZXJEYXRhS2V5ICk7CglpZiAoIGRlZmVyICYmCgkJKCBzcmMgPT09ICJxdWV1ZSIgfHwgIWpRdWVyeS5fZGF0YShlbGVtLCBxdWV1ZURhdGFLZXkpICkgJiYKCQkoIHNyYyA9PT0gIm1hcmsiIHx8ICFqUXVlcnkuX2RhdGEoZWxlbSwgbWFya0RhdGFLZXkpICkgKSB7CgkJLy8gR2l2ZSByb29tIGZvciBoYXJkLWNvZGVkIGNhbGxiYWNrcyB0byBmaXJlIGZpcnN0CgkJLy8gYW5kIGV2ZW50dWFsbHkgbWFyay9xdWV1ZSBzb21ldGhpbmcgZWxzZSBvbiB0aGUgZWxlbWVudAoJCXNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgewoJCQlpZiAoICFqUXVlcnkuX2RhdGEoIGVsZW0sIHF1ZXVlRGF0YUtleSApICYmCgkJCQkhalF1ZXJ5Ll9kYXRhKCBlbGVtLCBtYXJrRGF0YUtleSApICkgewoJCQkJalF1ZXJ5LnJlbW92ZURhdGEoIGVsZW0sIGRlZmVyRGF0YUtleSwgdHJ1ZSApOwoJCQkJZGVmZXIuZmlyZSgpOwoJCQl9CgkJfSwgMCApOwoJfQp9CgpqUXVlcnkuZXh0ZW5kKHsKCglfbWFyazogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7CgkJaWYgKCBlbGVtICkgewoJCQl0eXBlID0gKCB0eXBlIHx8ICJmeCIgKSArICJtYXJrIjsKCQkJalF1ZXJ5Ll9kYXRhKCBlbGVtLCB0eXBlLCAoalF1ZXJ5Ll9kYXRhKCBlbGVtLCB0eXBlICkgfHwgMCkgKyAxICk7CgkJfQoJfSwKCglfdW5tYXJrOiBmdW5jdGlvbiggZm9yY2UsIGVsZW0sIHR5cGUgKSB7CgkJaWYgKCBmb3JjZSAhPT0gdHJ1ZSApIHsKCQkJdHlwZSA9IGVsZW07CgkJCWVsZW0gPSBmb3JjZTsKCQkJZm9yY2UgPSBmYWxzZTsKCQl9CgkJaWYgKCBlbGVtICkgewoJCQl0eXBlID0gdHlwZSB8fCAiZngiOwoJCQl2YXIga2V5ID0gdHlwZSArICJtYXJrIiwKCQkJCWNvdW50ID0gZm9yY2UgPyAwIDogKCAoalF1ZXJ5Ll9kYXRhKCBlbGVtLCBrZXkgKSB8fCAxKSAtIDEgKTsKCQkJaWYgKCBjb3VudCApIHsKCQkJCWpRdWVyeS5fZGF0YSggZWxlbSwga2V5LCBjb3VudCApOwoJCQl9IGVsc2UgewoJCQkJalF1ZXJ5LnJlbW92ZURhdGEoIGVsZW0sIGtleSwgdHJ1ZSApOwoJCQkJaGFuZGxlUXVldWVNYXJrRGVmZXIoIGVsZW0sIHR5cGUsICJtYXJrIiApOwoJCQl9CgkJfQoJfSwKCglxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7CgkJdmFyIHE7CgkJaWYgKCBlbGVtICkgewoJCQl0eXBlID0gKCB0eXBlIHx8ICJmeCIgKSArICJxdWV1ZSI7CgkJCXEgPSBqUXVlcnkuX2RhdGEoIGVsZW0sIHR5cGUgKTsKCgkJCS8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXAKCQkJaWYgKCBkYXRhICkgewoJCQkJaWYgKCAhcSB8fCBqUXVlcnkuaXNBcnJheShkYXRhKSApIHsKCQkJCQlxID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpICk7CgkJCQl9IGVsc2UgewoJCQkJCXEucHVzaCggZGF0YSApOwoJCQkJfQoJCQl9CgkJCXJldHVybiBxIHx8IFtdOwoJCX0KCX0sCgoJZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7CgkJdHlwZSA9IHR5cGUgfHwgImZ4IjsKCgkJdmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksCgkJCWZuID0gcXVldWUuc2hpZnQoKSwKCQkJaG9va3MgPSB7fTsKCgkJLy8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbAoJCWlmICggZm4gPT09ICJpbnByb2dyZXNzIiApIHsKCQkJZm4gPSBxdWV1ZS5zaGlmdCgpOwoJCX0KCgkJaWYgKCBmbiApIHsKCQkJLy8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZwoJCQkvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkCgkJCWlmICggdHlwZSA9PT0gImZ4IiApIHsKCQkJCXF1ZXVlLnVuc2hpZnQoICJpbnByb2dyZXNzIiApOwoJCQl9CgoJCQlqUXVlcnkuX2RhdGEoIGVsZW0sIHR5cGUgKyAiLnJ1biIsIGhvb2tzICk7CgkJCWZuLmNhbGwoIGVsZW0sIGZ1bmN0aW9uKCkgewoJCQkJalF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTsKCQkJfSwgaG9va3MgKTsKCQl9CgoJCWlmICggIXF1ZXVlLmxlbmd0aCApIHsKCQkJalF1ZXJ5LnJlbW92ZURhdGEoIGVsZW0sIHR5cGUgKyAicXVldWUgIiArIHR5cGUgKyAiLnJ1biIsIHRydWUgKTsKCQkJaGFuZGxlUXVldWVNYXJrRGVmZXIoIGVsZW0sIHR5cGUsICJxdWV1ZSIgKTsKCQl9Cgl9Cn0pOwoKalF1ZXJ5LmZuLmV4dGVuZCh7CglxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7CgkJdmFyIHNldHRlciA9IDI7CgoJCWlmICggdHlwZW9mIHR5cGUgIT09ICJzdHJpbmciICkgewoJCQlkYXRhID0gdHlwZTsKCQkJdHlwZSA9ICJmeCI7CgkJCXNldHRlci0tOwoJCX0KCgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkgewoJCQlyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWzBdLCB0eXBlICk7CgkJfQoKCQlyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID8KCQkJdGhpcyA6CgkJCXRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApOwoKCQkJCWlmICggdHlwZSA9PT0gImZ4IiAmJiBxdWV1ZVswXSAhPT0gImlucHJvZ3Jlc3MiICkgewoJCQkJCWpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7CgkJCQl9CgkJCX0pOwoJfSwKCWRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkgewoJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCWpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7CgkJfSk7Cgl9LAoJLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLgoJLy8gaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5LwoJZGVsYXk6IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkgewoJCXRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7CgkJdHlwZSA9IHR5cGUgfHwgImZ4IjsKCgkJcmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHsKCQkJdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7CgkJCWhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHsKCQkJCWNsZWFyVGltZW91dCggdGltZW91dCApOwoJCQl9OwoJCX0pOwoJfSwKCWNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkgewoJCXJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8ICJmeCIsIFtdICk7Cgl9LAoJLy8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZQoJLy8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpCglwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqZWN0ICkgewoJCWlmICggdHlwZW9mIHR5cGUgIT09ICJzdHJpbmciICkgewoJCQlvYmplY3QgPSB0eXBlOwoJCQl0eXBlID0gdW5kZWZpbmVkOwoJCX0KCQl0eXBlID0gdHlwZSB8fCAiZngiOwoJCXZhciBkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLAoJCQllbGVtZW50cyA9IHRoaXMsCgkJCWkgPSBlbGVtZW50cy5sZW5ndGgsCgkJCWNvdW50ID0gMSwKCQkJZGVmZXJEYXRhS2V5ID0gdHlwZSArICJkZWZlciIsCgkJCXF1ZXVlRGF0YUtleSA9IHR5cGUgKyAicXVldWUiLAoJCQltYXJrRGF0YUtleSA9IHR5cGUgKyAibWFyayIsCgkJCXRtcDsKCQlmdW5jdGlvbiByZXNvbHZlKCkgewoJCQlpZiAoICEoIC0tY291bnQgKSApIHsKCQkJCWRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7CgkJCX0KCQl9CgkJd2hpbGUoIGktLSApIHsKCQkJaWYgKCggdG1wID0galF1ZXJ5LmRhdGEoIGVsZW1lbnRzWyBpIF0sIGRlZmVyRGF0YUtleSwgdW5kZWZpbmVkLCB0cnVlICkgfHwKCQkJCQkoIGpRdWVyeS5kYXRhKCBlbGVtZW50c1sgaSBdLCBxdWV1ZURhdGFLZXksIHVuZGVmaW5lZCwgdHJ1ZSApIHx8CgkJCQkJCWpRdWVyeS5kYXRhKCBlbGVtZW50c1sgaSBdLCBtYXJrRGF0YUtleSwgdW5kZWZpbmVkLCB0cnVlICkgKSAmJgoJCQkJCWpRdWVyeS5kYXRhKCBlbGVtZW50c1sgaSBdLCBkZWZlckRhdGFLZXksIGpRdWVyeS5DYWxsYmFja3MoICJvbmNlIG1lbW9yeSIgKSwgdHJ1ZSApICkpIHsKCQkJCWNvdW50Kys7CgkJCQl0bXAuYWRkKCByZXNvbHZlICk7CgkJCX0KCQl9CgkJcmVzb2x2ZSgpOwoJCXJldHVybiBkZWZlci5wcm9taXNlKCBvYmplY3QgKTsKCX0KfSk7CgoKCgp2YXIgcmNsYXNzID0gL1tcblx0XHJdL2csCglyc3BhY2UgPSAvXHMrLywKCXJyZXR1cm4gPSAvXHIvZywKCXJ0eXBlID0gL14oPzpidXR0b258aW5wdXQpJC9pLAoJcmZvY3VzYWJsZSA9IC9eKD86YnV0dG9ufGlucHV0fG9iamVjdHxzZWxlY3R8dGV4dGFyZWEpJC9pLAoJcmNsaWNrYWJsZSA9IC9eYSg/OnJlYSk/JC9pLAoJcmJvb2xlYW4gPSAvXig/OmF1dG9mb2N1c3xhdXRvcGxheXxhc3luY3xjaGVja2VkfGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkfHNlbGVjdGVkKSQvaSwKCWdldFNldEF0dHJpYnV0ZSA9IGpRdWVyeS5zdXBwb3J0LmdldFNldEF0dHJpYnV0ZSwKCW5vZGVIb29rLCBib29sSG9vaywgZml4U3BlY2lmaWVkOwoKalF1ZXJ5LmZuLmV4dGVuZCh7CglhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7CgkJcmV0dXJuIGpRdWVyeS5hY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTsKCX0sCgoJcmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7CgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJalF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTsKCQl9KTsKCX0sCgoJcHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkgewoJCXJldHVybiBqUXVlcnkuYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7Cgl9LAoKCXJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkgewoJCW5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7CgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJLy8gdHJ5L2NhdGNoIGhhbmRsZXMgY2FzZXMgd2hlcmUgSUUgYmFsa3MgKHN1Y2ggYXMgcmVtb3ZpbmcgYSBwcm9wZXJ0eSBvbiB3aW5kb3cpCgkJCXRyeSB7CgkJCQl0aGlzWyBuYW1lIF0gPSB1bmRlZmluZWQ7CgkJCQlkZWxldGUgdGhpc1sgbmFtZSBdOwoJCQl9IGNhdGNoKCBlICkge30KCQl9KTsKCX0sCgoJYWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl2YXIgY2xhc3NOYW1lcywgaSwgbCwgZWxlbSwKCQkJc2V0Q2xhc3MsIGMsIGNsOwoKCQlpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkgewoJCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkgewoJCQkJalF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwodGhpcywgaiwgdGhpcy5jbGFzc05hbWUpICk7CgkJCX0pOwoJCX0KCgkJaWYgKCB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciICkgewoJCQljbGFzc05hbWVzID0gdmFsdWUuc3BsaXQoIHJzcGFjZSApOwoKCQkJZm9yICggaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHsKCQkJCWVsZW0gPSB0aGlzWyBpIF07CgoJCQkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkgewoJCQkJCWlmICggIWVsZW0uY2xhc3NOYW1lICYmIGNsYXNzTmFtZXMubGVuZ3RoID09PSAxICkgewoJCQkJCQllbGVtLmNsYXNzTmFtZSA9IHZhbHVlOwoKCQkJCQl9IGVsc2UgewoJCQkJCQlzZXRDbGFzcyA9ICIgIiArIGVsZW0uY2xhc3NOYW1lICsgIiAiOwoKCQkJCQkJZm9yICggYyA9IDAsIGNsID0gY2xhc3NOYW1lcy5sZW5ndGg7IGMgPCBjbDsgYysrICkgewoJCQkJCQkJaWYgKCAhfnNldENsYXNzLmluZGV4T2YoICIgIiArIGNsYXNzTmFtZXNbIGMgXSArICIgIiApICkgewoJCQkJCQkJCXNldENsYXNzICs9IGNsYXNzTmFtZXNbIGMgXSArICIgIjsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCQllbGVtLmNsYXNzTmFtZSA9IGpRdWVyeS50cmltKCBzZXRDbGFzcyApOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJdmFyIGNsYXNzTmFtZXMsIGksIGwsIGVsZW0sIGNsYXNzTmFtZSwgYywgY2w7CgoJCWlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7CgkJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7CgkJCQlqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCh0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSkgKTsKCQkJfSk7CgkJfQoKCQlpZiAoICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciKSB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewoJCQljbGFzc05hbWVzID0gKCB2YWx1ZSB8fCAiIiApLnNwbGl0KCByc3BhY2UgKTsKCgkJCWZvciAoIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CgkJCQllbGVtID0gdGhpc1sgaSBdOwoKCQkJCWlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiBlbGVtLmNsYXNzTmFtZSApIHsKCQkJCQlpZiAoIHZhbHVlICkgewoJCQkJCQljbGFzc05hbWUgPSAoIiAiICsgZWxlbS5jbGFzc05hbWUgKyAiICIpLnJlcGxhY2UoIHJjbGFzcywgIiAiICk7CgkJCQkJCWZvciAoIGMgPSAwLCBjbCA9IGNsYXNzTmFtZXMubGVuZ3RoOyBjIDwgY2w7IGMrKyApIHsKCQkJCQkJCWNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKCIgIiArIGNsYXNzTmFtZXNbIGMgXSArICIgIiwgIiAiKTsKCQkJCQkJfQoJCQkJCQllbGVtLmNsYXNzTmFtZSA9IGpRdWVyeS50cmltKCBjbGFzc05hbWUgKTsKCgkJCQkJfSBlbHNlIHsKCQkJCQkJZWxlbS5jbGFzc05hbWUgPSAiIjsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgoJCXJldHVybiB0aGlzOwoJfSwKCgl0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHsKCQl2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSwKCQkJaXNCb29sID0gdHlwZW9mIHN0YXRlVmFsID09PSAiYm9vbGVhbiI7CgoJCWlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7CgkJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7CgkJCQlqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyggdmFsdWUuY2FsbCh0aGlzLCBpLCB0aGlzLmNsYXNzTmFtZSwgc3RhdGVWYWwpLCBzdGF0ZVZhbCApOwoJCQl9KTsKCQl9CgoJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCWlmICggdHlwZSA9PT0gInN0cmluZyIgKSB7CgkJCQkvLyB0b2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lcwoJCQkJdmFyIGNsYXNzTmFtZSwKCQkJCQlpID0gMCwKCQkJCQlzZWxmID0galF1ZXJ5KCB0aGlzICksCgkJCQkJc3RhdGUgPSBzdGF0ZVZhbCwKCQkJCQljbGFzc05hbWVzID0gdmFsdWUuc3BsaXQoIHJzcGFjZSApOwoKCQkJCXdoaWxlICggKGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdKSApIHsKCQkJCQkvLyBjaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwZXJhdGVkIGxpc3QKCQkJCQlzdGF0ZSA9IGlzQm9vbCA/IHN0YXRlIDogIXNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApOwoJCQkJCXNlbGZbIHN0YXRlID8gImFkZENsYXNzIiA6ICJyZW1vdmVDbGFzcyIgXSggY2xhc3NOYW1lICk7CgkJCQl9CgoJCQl9IGVsc2UgaWYgKCB0eXBlID09PSAidW5kZWZpbmVkIiB8fCB0eXBlID09PSAiYm9vbGVhbiIgKSB7CgkJCQlpZiAoIHRoaXMuY2xhc3NOYW1lICkgewoJCQkJCS8vIHN0b3JlIGNsYXNzTmFtZSBpZiBzZXQKCQkJCQlqUXVlcnkuX2RhdGEoIHRoaXMsICJfX2NsYXNzTmFtZV9fIiwgdGhpcy5jbGFzc05hbWUgKTsKCQkJCX0KCgkJCQkvLyB0b2dnbGUgd2hvbGUgY2xhc3NOYW1lCgkJCQl0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/ICIiIDogalF1ZXJ5Ll9kYXRhKCB0aGlzLCAiX19jbGFzc05hbWVfXyIgKSB8fCAiIjsKCQkJfQoJCX0pOwoJfSwKCgloYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkgewoJCXZhciBjbGFzc05hbWUgPSAiICIgKyBzZWxlY3RvciArICIgIiwKCQkJaSA9IDAsCgkJCWwgPSB0aGlzLmxlbmd0aDsKCQlmb3IgKCA7IGkgPCBsOyBpKysgKSB7CgkJCWlmICggdGhpc1tpXS5ub2RlVHlwZSA9PT0gMSAmJiAoIiAiICsgdGhpc1tpXS5jbGFzc05hbWUgKyAiICIpLnJlcGxhY2UocmNsYXNzLCAiICIpLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoJCX0KCgkJcmV0dXJuIGZhbHNlOwoJfSwKCgl2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbiwKCQkJZWxlbSA9IHRoaXNbMF07CgoJCWlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7CgkJCWlmICggZWxlbSApIHsKCQkJCWhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdOwoKCQkJCWlmICggaG9va3MgJiYgImdldCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgInZhbHVlIiApKSAhPT0gdW5kZWZpbmVkICkgewoJCQkJCXJldHVybiByZXQ7CgkJCQl9CgoJCQkJcmV0ID0gZWxlbS52YWx1ZTsKCgkJCQlyZXR1cm4gdHlwZW9mIHJldCA9PT0gInN0cmluZyIgPwoJCQkJCS8vIGhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXMKCQkJCQlyZXQucmVwbGFjZShycmV0dXJuLCAiIikgOgoJCQkJCS8vIGhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlcgoJCQkJCXJldCA9PSBudWxsID8gIiIgOiByZXQ7CgkJCX0KCgkJCXJldHVybjsKCQl9CgoJCWlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTsKCgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHsKCQkJdmFyIHNlbGYgPSBqUXVlcnkodGhpcyksIHZhbDsKCgkJCWlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJaWYgKCBpc0Z1bmN0aW9uICkgewoJCQkJdmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgc2VsZi52YWwoKSApOwoJCQl9IGVsc2UgewoJCQkJdmFsID0gdmFsdWU7CgkJCX0KCgkJCS8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzICIiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nCgkJCWlmICggdmFsID09IG51bGwgKSB7CgkJCQl2YWwgPSAiIjsKCQkJfSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gIm51bWJlciIgKSB7CgkJCQl2YWwgKz0gIiI7CgkJCX0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHsKCQkJCXZhbCA9IGpRdWVyeS5tYXAodmFsLCBmdW5jdGlvbiAoIHZhbHVlICkgewoJCQkJCXJldHVybiB2YWx1ZSA9PSBudWxsID8gIiIgOiB2YWx1ZSArICIiOwoJCQkJfSk7CgkJCX0KCgkJCWhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdOwoKCQkJLy8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmcKCQkJaWYgKCAhaG9va3MgfHwgISgic2V0IiBpbiBob29rcykgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsICJ2YWx1ZSIgKSA9PT0gdW5kZWZpbmVkICkgewoJCQkJdGhpcy52YWx1ZSA9IHZhbDsKCQkJfQoJCX0pOwoJfQp9KTsKCmpRdWVyeS5leHRlbmQoewoJdmFsSG9va3M6IHsKCQlvcHRpb246IHsKCQkJZ2V0OiBmdW5jdGlvbiggZWxlbSApIHsKCQkJCS8vIGF0dHJpYnV0ZXMudmFsdWUgaXMgdW5kZWZpbmVkIGluIEJsYWNrYmVycnkgNC43IGJ1dAoJCQkJLy8gdXNlcyAudmFsdWUuIFNlZSAjNjkzMgoJCQkJdmFyIHZhbCA9IGVsZW0uYXR0cmlidXRlcy52YWx1ZTsKCQkJCXJldHVybiAhdmFsIHx8IHZhbC5zcGVjaWZpZWQgPyBlbGVtLnZhbHVlIDogZWxlbS50ZXh0OwoJCQl9CgkJfSwKCQlzZWxlY3Q6IHsKCQkJZ2V0OiBmdW5jdGlvbiggZWxlbSApIHsKCQkJCXZhciB2YWx1ZSwgaSwgbWF4LCBvcHRpb24sCgkJCQkJaW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsCgkJCQkJdmFsdWVzID0gW10sCgkJCQkJb3B0aW9ucyA9IGVsZW0ub3B0aW9ucywKCQkJCQlvbmUgPSBlbGVtLnR5cGUgPT09ICJzZWxlY3Qtb25lIjsKCgkJCQkvLyBOb3RoaW5nIHdhcyBzZWxlY3RlZAoJCQkJaWYgKCBpbmRleCA8IDAgKSB7CgkJCQkJcmV0dXJuIG51bGw7CgkJCQl9CgoJCQkJLy8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9ucwoJCQkJaSA9IG9uZSA/IGluZGV4IDogMDsKCQkJCW1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoOwoJCQkJZm9yICggOyBpIDwgbWF4OyBpKysgKSB7CgkJCQkJb3B0aW9uID0gb3B0aW9uc1sgaSBdOwoKCQkJCQkvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwCgkJCQkJaWYgKCBvcHRpb24uc2VsZWN0ZWQgJiYgKGpRdWVyeS5zdXBwb3J0Lm9wdERpc2FibGVkID8gIW9wdGlvbi5kaXNhYmxlZCA6IG9wdGlvbi5nZXRBdHRyaWJ1dGUoImRpc2FibGVkIikgPT09IG51bGwpICYmCgkJCQkJCQkoIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8ICFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCAib3B0Z3JvdXAiICkpICkgewoKCQkJCQkJLy8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvbgoJCQkJCQl2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7CgoJCQkJCQkvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0cwoJCQkJCQlpZiAoIG9uZSApIHsKCQkJCQkJCXJldHVybiB2YWx1ZTsKCQkJCQkJfQoKCQkJCQkJLy8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXkKCQkJCQkJdmFsdWVzLnB1c2goIHZhbHVlICk7CgkJCQkJfQoJCQkJfQoKCQkJCS8vIEZpeGVzIEJ1ZyAjMjU1MSAtLSBzZWxlY3QudmFsKCkgYnJva2VuIGluIElFIGFmdGVyIGZvcm0ucmVzZXQoKQoJCQkJaWYgKCBvbmUgJiYgIXZhbHVlcy5sZW5ndGggJiYgb3B0aW9ucy5sZW5ndGggKSB7CgkJCQkJcmV0dXJuIGpRdWVyeSggb3B0aW9uc1sgaW5kZXggXSApLnZhbCgpOwoJCQkJfQoKCQkJCXJldHVybiB2YWx1ZXM7CgkJCX0sCgoJCQlzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKCQkJCXZhciB2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApOwoKCQkJCWpRdWVyeShlbGVtKS5maW5kKCJvcHRpb24iKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJCXRoaXMuc2VsZWN0ZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KHRoaXMpLnZhbCgpLCB2YWx1ZXMgKSA+PSAwOwoJCQkJfSk7CgoJCQkJaWYgKCAhdmFsdWVzLmxlbmd0aCApIHsKCQkJCQllbGVtLnNlbGVjdGVkSW5kZXggPSAtMTsKCQkJCX0KCQkJCXJldHVybiB2YWx1ZXM7CgkJCX0KCQl9Cgl9LAoKCWF0dHJGbjogewoJCXZhbDogdHJ1ZSwKCQljc3M6IHRydWUsCgkJaHRtbDogdHJ1ZSwKCQl0ZXh0OiB0cnVlLAoJCWRhdGE6IHRydWUsCgkJd2lkdGg6IHRydWUsCgkJaGVpZ2h0OiB0cnVlLAoJCW9mZnNldDogdHJ1ZQoJfSwKCglhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIHBhc3MgKSB7CgkJdmFyIHJldCwgaG9va3MsIG5vdHhtbCwKCQkJblR5cGUgPSBlbGVtLm5vZGVUeXBlOwoKCQkvLyBkb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzCgkJaWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCBwYXNzICYmIG5hbWUgaW4galF1ZXJ5LmF0dHJGbiApIHsKCQkJcmV0dXJuIGpRdWVyeSggZWxlbSApWyBuYW1lIF0oIHZhbHVlICk7CgkJfQoKCQkvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZAoJCWlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSAidW5kZWZpbmVkIiApIHsKCQkJcmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApOwoJCX0KCgkJbm90eG1sID0gblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApOwoKCQkvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlCgkJLy8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZAoJCWlmICggbm90eG1sICkgewoJCQluYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpOwoJCQlob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSB8fCAoIHJib29sZWFuLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogbm9kZUhvb2sgKTsKCQl9CgoJCWlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHsKCgkJCWlmICggdmFsdWUgPT09IG51bGwgKSB7CgkJCQlqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApOwoJCQkJcmV0dXJuOwoKCQkJfSBlbHNlIGlmICggaG9va3MgJiYgInNldCIgaW4gaG9va3MgJiYgbm90eG1sICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgKSB7CgkJCQlyZXR1cm4gcmV0OwoKCQkJfSBlbHNlIHsKCQkJCWVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCAiIiArIHZhbHVlICk7CgkJCQlyZXR1cm4gdmFsdWU7CgkJCX0KCgkJfSBlbHNlIGlmICggaG9va3MgJiYgImdldCIgaW4gaG9va3MgJiYgbm90eG1sICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSkgIT09IG51bGwgKSB7CgkJCXJldHVybiByZXQ7CgoJCX0gZWxzZSB7CgoJCQlyZXQgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApOwoKCQkJLy8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWQKCQkJcmV0dXJuIHJldCA9PT0gbnVsbCA/CgkJCQl1bmRlZmluZWQgOgoJCQkJcmV0OwoJCX0KCX0sCgoJcmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewoJCXZhciBwcm9wTmFtZSwgYXR0ck5hbWVzLCBuYW1lLCBsLCBpc0Jvb2wsCgkJCWkgPSAwOwoKCQlpZiAoIHZhbHVlICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7CgkJCWF0dHJOYW1lcyA9IHZhbHVlLnRvTG93ZXJDYXNlKCkuc3BsaXQoIHJzcGFjZSApOwoJCQlsID0gYXR0ck5hbWVzLmxlbmd0aDsKCgkJCWZvciAoIDsgaSA8IGw7IGkrKyApIHsKCQkJCW5hbWUgPSBhdHRyTmFtZXNbIGkgXTsKCgkJCQlpZiAoIG5hbWUgKSB7CgkJCQkJcHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7CgkJCQkJaXNCb29sID0gcmJvb2xlYW4udGVzdCggbmFtZSApOwoKCQkJCQkvLyBTZWUgIzk2OTkgZm9yIGV4cGxhbmF0aW9uIG9mIHRoaXMgYXBwcm9hY2ggKHNldHRpbmcgZmlyc3QsIHRoZW4gcmVtb3ZhbCkKCQkJCQkvLyBEbyBub3QgZG8gdGhpcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzIChzZWUgIzEwODcwKQoJCQkJCWlmICggIWlzQm9vbCApIHsKCQkJCQkJalF1ZXJ5LmF0dHIoIGVsZW0sIG5hbWUsICIiICk7CgkJCQkJfQoJCQkJCWVsZW0ucmVtb3ZlQXR0cmlidXRlKCBnZXRTZXRBdHRyaWJ1dGUgPyBuYW1lIDogcHJvcE5hbWUgKTsKCgkJCQkJLy8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2UgZm9yIGJvb2xlYW4gYXR0cmlidXRlcwoJCQkJCWlmICggaXNCb29sICYmIHByb3BOYW1lIGluIGVsZW0gKSB7CgkJCQkJCWVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9Cgl9LAoKCWF0dHJIb29rczogewoJCXR5cGU6IHsKCQkJc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7CgkJCQkvLyBXZSBjYW4ndCBhbGxvdyB0aGUgdHlwZSBwcm9wZXJ0eSB0byBiZSBjaGFuZ2VkIChzaW5jZSBpdCBjYXVzZXMgcHJvYmxlbXMgaW4gSUUpCgkJCQlpZiAoIHJ0eXBlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7CgkJCQkJalF1ZXJ5LmVycm9yKCAidHlwZSBwcm9wZXJ0eSBjYW4ndCBiZSBjaGFuZ2VkIiApOwoJCQkJfSBlbHNlIGlmICggIWpRdWVyeS5zdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09ICJyYWRpbyIgJiYgalF1ZXJ5Lm5vZGVOYW1lKGVsZW0sICJpbnB1dCIpICkgewoJCQkJCS8vIFNldHRpbmcgdGhlIHR5cGUgb24gYSByYWRpbyBidXR0b24gYWZ0ZXIgdGhlIHZhbHVlIHJlc2V0cyB0aGUgdmFsdWUgaW4gSUU2LTkKCQkJCQkvLyBSZXNldCB2YWx1ZSB0byBpdCdzIGRlZmF1bHQgaW4gY2FzZSB0eXBlIGlzIHNldCBhZnRlciB2YWx1ZQoJCQkJCS8vIFRoaXMgaXMgZm9yIGVsZW1lbnQgY3JlYXRpb24KCQkJCQl2YXIgdmFsID0gZWxlbS52YWx1ZTsKCQkJCQllbGVtLnNldEF0dHJpYnV0ZSggInR5cGUiLCB2YWx1ZSApOwoJCQkJCWlmICggdmFsICkgewoJCQkJCQllbGVtLnZhbHVlID0gdmFsOwoJCQkJCX0KCQkJCQlyZXR1cm4gdmFsdWU7CgkJCQl9CgkJCX0KCQl9LAoJCS8vIFVzZSB0aGUgdmFsdWUgcHJvcGVydHkgZm9yIGJhY2sgY29tcGF0CgkJLy8gVXNlIHRoZSBub2RlSG9vayBmb3IgYnV0dG9uIGVsZW1lbnRzIGluIElFNi83ICgjMTk1NCkKCQl2YWx1ZTogewoJCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkgewoJCQkJaWYgKCBub2RlSG9vayAmJiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sICJidXR0b24iICkgKSB7CgkJCQkJcmV0dXJuIG5vZGVIb29rLmdldCggZWxlbSwgbmFtZSApOwoJCQkJfQoJCQkJcmV0dXJuIG5hbWUgaW4gZWxlbSA/CgkJCQkJZWxlbS52YWx1ZSA6CgkJCQkJbnVsbDsKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7CgkJCQlpZiAoIG5vZGVIb29rICYmIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgImJ1dHRvbiIgKSApIHsKCQkJCQlyZXR1cm4gbm9kZUhvb2suc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApOwoJCQkJfQoJCQkJLy8gRG9lcyBub3QgcmV0dXJuIHNvIHRoYXQgc2V0QXR0cmlidXRlIGlzIGFsc28gdXNlZAoJCQkJZWxlbS52YWx1ZSA9IHZhbHVlOwoJCQl9CgkJfQoJfSwKCglwcm9wRml4OiB7CgkJdGFiaW5kZXg6ICJ0YWJJbmRleCIsCgkJcmVhZG9ubHk6ICJyZWFkT25seSIsCgkJImZvciI6ICJodG1sRm9yIiwKCQkiY2xhc3MiOiAiY2xhc3NOYW1lIiwKCQltYXhsZW5ndGg6ICJtYXhMZW5ndGgiLAoJCWNlbGxzcGFjaW5nOiAiY2VsbFNwYWNpbmciLAoJCWNlbGxwYWRkaW5nOiAiY2VsbFBhZGRpbmciLAoJCXJvd3NwYW46ICJyb3dTcGFuIiwKCQljb2xzcGFuOiAiY29sU3BhbiIsCgkJdXNlbWFwOiAidXNlTWFwIiwKCQlmcmFtZWJvcmRlcjogImZyYW1lQm9yZGVyIiwKCQljb250ZW50ZWRpdGFibGU6ICJjb250ZW50RWRpdGFibGUiCgl9LAoKCXByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHsKCQl2YXIgcmV0LCBob29rcywgbm90eG1sLAoJCQluVHlwZSA9IGVsZW0ubm9kZVR5cGU7CgoJCS8vIGRvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXMKCQlpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkgewoJCQlyZXR1cm47CgkJfQoKCQlub3R4bWwgPSBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICk7CgoJCWlmICggbm90eG1sICkgewoJCQkvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzCgkJCW5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7CgkJCWhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdOwoJCX0KCgkJaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewoJCQlpZiAoIGhvb2tzICYmICJzZXQiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgKSB7CgkJCQlyZXR1cm4gcmV0OwoKCQkJfSBlbHNlIHsKCQkJCXJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7CgkJCX0KCgkJfSBlbHNlIHsKCQkJaWYgKCBob29rcyAmJiAiZ2V0IiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsICkgewoJCQkJcmV0dXJuIHJldDsKCgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gZWxlbVsgbmFtZSBdOwoJCQl9CgkJfQoJfSwKCglwcm9wSG9va3M6IHsKCQl0YWJJbmRleDogewoJCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJLy8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldAoJCQkJLy8gaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC8KCQkJCXZhciBhdHRyaWJ1dGVOb2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCJ0YWJpbmRleCIpOwoKCQkJCXJldHVybiBhdHRyaWJ1dGVOb2RlICYmIGF0dHJpYnV0ZU5vZGUuc3BlY2lmaWVkID8KCQkJCQlwYXJzZUludCggYXR0cmlidXRlTm9kZS52YWx1ZSwgMTAgKSA6CgkJCQkJcmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHwgcmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgZWxlbS5ocmVmID8KCQkJCQkJMCA6CgkJCQkJCXVuZGVmaW5lZDsKCQkJfQoJCX0KCX0KfSk7CgovLyBBZGQgdGhlIHRhYkluZGV4IHByb3BIb29rIHRvIGF0dHJIb29rcyBmb3IgYmFjay1jb21wYXQgKGRpZmZlcmVudCBjYXNlIGlzIGludGVudGlvbmFsKQpqUXVlcnkuYXR0ckhvb2tzLnRhYmluZGV4ID0galF1ZXJ5LnByb3BIb29rcy50YWJJbmRleDsKCi8vIEhvb2sgZm9yIGJvb2xlYW4gYXR0cmlidXRlcwpib29sSG9vayA9IHsKCWdldDogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7CgkJLy8gQWxpZ24gYm9vbGVhbiBhdHRyaWJ1dGVzIHdpdGggY29ycmVzcG9uZGluZyBwcm9wZXJ0aWVzCgkJLy8gRmFsbCBiYWNrIHRvIGF0dHJpYnV0ZSBwcmVzZW5jZSB3aGVyZSBzb21lIGJvb2xlYW5zIGFyZSBub3Qgc3VwcG9ydGVkCgkJdmFyIGF0dHJOb2RlLAoJCQlwcm9wZXJ0eSA9IGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lICk7CgkJcmV0dXJuIHByb3BlcnR5ID09PSB0cnVlIHx8IHR5cGVvZiBwcm9wZXJ0eSAhPT0gImJvb2xlYW4iICYmICggYXR0ck5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkgKSAmJiBhdHRyTm9kZS5ub2RlVmFsdWUgIT09IGZhbHNlID8KCQkJbmFtZS50b0xvd2VyQ2FzZSgpIDoKCQkJdW5kZWZpbmVkOwoJfSwKCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkgewoJCXZhciBwcm9wTmFtZTsKCQlpZiAoIHZhbHVlID09PSBmYWxzZSApIHsKCQkJLy8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZQoJCQlqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApOwoJCX0gZWxzZSB7CgkJCS8vIHZhbHVlIGlzIHRydWUgc2luY2Ugd2Uga25vdyBhdCB0aGlzIHBvaW50IGl0J3MgdHlwZSBib29sZWFuIGFuZCBub3QgZmFsc2UKCQkJLy8gU2V0IGJvb2xlYW4gYXR0cmlidXRlcyB0byB0aGUgc2FtZSBuYW1lIGFuZCBzZXQgdGhlIERPTSBwcm9wZXJ0eQoJCQlwcm9wTmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTsKCQkJaWYgKCBwcm9wTmFtZSBpbiBlbGVtICkgewoJCQkJLy8gT25seSBzZXQgdGhlIElETCBzcGVjaWZpY2FsbHkgaWYgaXQgYWxyZWFkeSBleGlzdHMgb24gdGhlIGVsZW1lbnQKCQkJCWVsZW1bIHByb3BOYW1lIF0gPSB0cnVlOwoJCQl9CgoJCQllbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpICk7CgkJfQoJCXJldHVybiBuYW1lOwoJfQp9OwoKLy8gSUU2LzcgZG8gbm90IHN1cHBvcnQgZ2V0dGluZy9zZXR0aW5nIHNvbWUgYXR0cmlidXRlcyB3aXRoIGdldC9zZXRBdHRyaWJ1dGUKaWYgKCAhZ2V0U2V0QXR0cmlidXRlICkgewoKCWZpeFNwZWNpZmllZCA9IHsKCQluYW1lOiB0cnVlLAoJCWlkOiB0cnVlLAoJCWNvb3JkczogdHJ1ZQoJfTsKCgkvLyBVc2UgdGhpcyBmb3IgYW55IGF0dHJpYnV0ZSBpbiBJRTYvNwoJLy8gVGhpcyBmaXhlcyBhbG1vc3QgZXZlcnkgSUU2LzcgaXNzdWUKCW5vZGVIb29rID0galF1ZXJ5LnZhbEhvb2tzLmJ1dHRvbiA9IHsKCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkgewoJCQl2YXIgcmV0OwoJCQlyZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTsKCQkJcmV0dXJuIHJldCAmJiAoIGZpeFNwZWNpZmllZFsgbmFtZSBdID8gcmV0Lm5vZGVWYWx1ZSAhPT0gIiIgOiByZXQuc3BlY2lmaWVkICkgPwoJCQkJcmV0Lm5vZGVWYWx1ZSA6CgkJCQl1bmRlZmluZWQ7CgkJfSwKCQlzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHsKCQkJLy8gU2V0IHRoZSBleGlzdGluZyBvciBjcmVhdGUgYSBuZXcgYXR0cmlidXRlIG5vZGUKCQkJdmFyIHJldCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApOwoJCQlpZiAoICFyZXQgKSB7CgkJCQlyZXQgPSBkb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoIG5hbWUgKTsKCQkJCWVsZW0uc2V0QXR0cmlidXRlTm9kZSggcmV0ICk7CgkJCX0KCQkJcmV0dXJuICggcmV0Lm5vZGVWYWx1ZSA9IHZhbHVlICsgIiIgKTsKCQl9Cgl9OwoKCS8vIEFwcGx5IHRoZSBub2RlSG9vayB0byB0YWJpbmRleAoJalF1ZXJ5LmF0dHJIb29rcy50YWJpbmRleC5zZXQgPSBub2RlSG9vay5zZXQ7CgoJLy8gU2V0IHdpZHRoIGFuZCBoZWlnaHQgdG8gYXV0byBpbnN0ZWFkIG9mIDAgb24gZW1wdHkgc3RyaW5nKCBCdWcgIzgxNTAgKQoJLy8gVGhpcyBpcyBmb3IgcmVtb3ZhbHMKCWpRdWVyeS5lYWNoKFsgIndpZHRoIiwgImhlaWdodCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7CgkJalF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdLCB7CgkJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewoJCQkJaWYgKCB2YWx1ZSA9PT0gIiIgKSB7CgkJCQkJZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsICJhdXRvIiApOwoJCQkJCXJldHVybiB2YWx1ZTsKCQkJCX0KCQkJfQoJCX0pOwoJfSk7CgoJLy8gU2V0IGNvbnRlbnRlZGl0YWJsZSB0byBmYWxzZSBvbiByZW1vdmFscygjMTA0MjkpCgkvLyBTZXR0aW5nIHRvIGVtcHR5IHN0cmluZyB0aHJvd3MgYW4gZXJyb3IgYXMgYW4gaW52YWxpZCB2YWx1ZQoJalF1ZXJ5LmF0dHJIb29rcy5jb250ZW50ZWRpdGFibGUgPSB7CgkJZ2V0OiBub2RlSG9vay5nZXQsCgkJc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7CgkJCWlmICggdmFsdWUgPT09ICIiICkgewoJCQkJdmFsdWUgPSAiZmFsc2UiOwoJCQl9CgkJCW5vZGVIb29rLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKTsKCQl9Cgl9Owp9CgoKLy8gU29tZSBhdHRyaWJ1dGVzIHJlcXVpcmUgYSBzcGVjaWFsIGNhbGwgb24gSUUKaWYgKCAhalF1ZXJ5LnN1cHBvcnQuaHJlZk5vcm1hbGl6ZWQgKSB7CglqUXVlcnkuZWFjaChbICJocmVmIiwgInNyYyIsICJ3aWR0aCIsICJoZWlnaHQiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkgewoJCWpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSwgewoJCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJdmFyIHJldCA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCAyICk7CgkJCQlyZXR1cm4gcmV0ID09PSBudWxsID8gdW5kZWZpbmVkIDogcmV0OwoJCQl9CgkJfSk7Cgl9KTsKfQoKaWYgKCAhalF1ZXJ5LnN1cHBvcnQuc3R5bGUgKSB7CglqUXVlcnkuYXR0ckhvb2tzLnN0eWxlID0gewoJCWdldDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCS8vIFJldHVybiB1bmRlZmluZWQgaW4gdGhlIGNhc2Ugb2YgZW1wdHkgc3RyaW5nCgkJCS8vIE5vcm1hbGl6ZSB0byBsb3dlcmNhc2Ugc2luY2UgSUUgdXBwZXJjYXNlcyBjc3MgcHJvcGVydHkgbmFtZXMKCQkJcmV0dXJuIGVsZW0uc3R5bGUuY3NzVGV4dC50b0xvd2VyQ2FzZSgpIHx8IHVuZGVmaW5lZDsKCQl9LAoJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewoJCQlyZXR1cm4gKCBlbGVtLnN0eWxlLmNzc1RleHQgPSAiIiArIHZhbHVlICk7CgkJfQoJfTsKfQoKLy8gU2FmYXJpIG1pcy1yZXBvcnRzIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHByb3BlcnR5IG9mIGFuIG9wdGlvbgovLyBBY2Nlc3NpbmcgdGhlIHBhcmVudCdzIHNlbGVjdGVkSW5kZXggcHJvcGVydHkgZml4ZXMgaXQKaWYgKCAhalF1ZXJ5LnN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7CglqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0galF1ZXJ5LmV4dGVuZCggalF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCwgewoJCWdldDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7CgoJCQlpZiAoIHBhcmVudCApIHsKCQkJCXBhcmVudC5zZWxlY3RlZEluZGV4OwoKCQkJCS8vIE1ha2Ugc3VyZSB0aGF0IGl0IGFsc28gd29ya3Mgd2l0aCBvcHRncm91cHMsIHNlZSAjNTcwMQoJCQkJaWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHsKCQkJCQlwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4OwoJCQkJfQoJCQl9CgkJCXJldHVybiBudWxsOwoJCX0KCX0pOwp9CgovLyBJRTYvNyBjYWxsIGVuY3R5cGUgZW5jb2RpbmcKaWYgKCAhalF1ZXJ5LnN1cHBvcnQuZW5jdHlwZSApIHsKCWpRdWVyeS5wcm9wRml4LmVuY3R5cGUgPSAiZW5jb2RpbmciOwp9CgovLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlcgppZiAoICFqUXVlcnkuc3VwcG9ydC5jaGVja09uICkgewoJalF1ZXJ5LmVhY2goWyAicmFkaW8iLCAiY2hlY2tib3giIF0sIGZ1bmN0aW9uKCkgewoJCWpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0gewoJCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIGluIFdlYmtpdCAiIiBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mICJvbiIgaWYgYSB2YWx1ZSBpc24ndCBzcGVjaWZpZWQKCQkJCXJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSgidmFsdWUiKSA9PT0gbnVsbCA/ICJvbiIgOiBlbGVtLnZhbHVlOwoJCQl9CgkJfTsKCX0pOwp9CmpRdWVyeS5lYWNoKFsgInJhZGlvIiwgImNoZWNrYm94IiBdLCBmdW5jdGlvbigpIHsKCWpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0galF1ZXJ5LmV4dGVuZCggalF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0sIHsKCQlzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKCQkJaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHsKCQkJCXJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlICkgPj0gMCApOwoJCQl9CgkJfQoJfSk7Cn0pOwoKCgoKdmFyIHJmb3JtRWxlbXMgPSAvXig/OnRleHRhcmVhfGlucHV0fHNlbGVjdCkkL2ksCglydHlwZW5hbWVzcGFjZSA9IC9eKFteXC5dKik/KD86XC4oLispKT8kLywKCXJob3ZlckhhY2sgPSAvKD86Xnxccylob3ZlcihcLlxTKyk/XGIvLAoJcmtleUV2ZW50ID0gL15rZXkvLAoJcm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfGNvbnRleHRtZW51KXxjbGljay8sCglyZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLywKCXJxdWlja0lzID0gL14oXHcqKSg/OiMoW1x3XC1dKykpPyg/OlwuKFtcd1wtXSspKT8kLywKCXF1aWNrUGFyc2UgPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CgkJdmFyIHF1aWNrID0gcnF1aWNrSXMuZXhlYyggc2VsZWN0b3IgKTsKCQlpZiAoIHF1aWNrICkgewoJCQkvLyAgIDAgIDEgICAgMiAgIDMKCQkJLy8gWyBfLCB0YWcsIGlkLCBjbGFzcyBdCgkJCXF1aWNrWzFdID0gKCBxdWlja1sxXSB8fCAiIiApLnRvTG93ZXJDYXNlKCk7CgkJCXF1aWNrWzNdID0gcXVpY2tbM10gJiYgbmV3IFJlZ0V4cCggIig/Ol58XFxzKSIgKyBxdWlja1szXSArICIoPzpcXHN8JCkiICk7CgkJfQoJCXJldHVybiBxdWljazsKCX0sCglxdWlja0lzID0gZnVuY3Rpb24oIGVsZW0sIG0gKSB7CgkJdmFyIGF0dHJzID0gZWxlbS5hdHRyaWJ1dGVzIHx8IHt9OwoJCXJldHVybiAoCgkJCSghbVsxXSB8fCBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG1bMV0pICYmCgkJCSghbVsyXSB8fCAoYXR0cnMuaWQgfHwge30pLnZhbHVlID09PSBtWzJdKSAmJgoJCQkoIW1bM10gfHwgbVszXS50ZXN0KCAoYXR0cnNbICJjbGFzcyIgXSB8fCB7fSkudmFsdWUgKSkKCQkpOwoJfSwKCWhvdmVySGFjayA9IGZ1bmN0aW9uKCBldmVudHMgKSB7CgkJcmV0dXJuIGpRdWVyeS5ldmVudC5zcGVjaWFsLmhvdmVyID8gZXZlbnRzIDogZXZlbnRzLnJlcGxhY2UoIHJob3ZlckhhY2ssICJtb3VzZWVudGVyJDEgbW91c2VsZWF2ZSQxIiApOwoJfTsKCi8qCiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS4KICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy4KICovCmpRdWVyeS5ldmVudCA9IHsKCglhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7CgoJCXZhciBlbGVtRGF0YSwgZXZlbnRIYW5kbGUsIGV2ZW50cywKCQkJdCwgdG5zLCB0eXBlLCBuYW1lc3BhY2VzLCBoYW5kbGVPYmosCgkJCWhhbmRsZU9iakluLCBxdWljaywgaGFuZGxlcnMsIHNwZWNpYWw7CgoJCS8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYWxsb3cgcGxhaW4gb2JqZWN0cyB0aG8pCgkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIXR5cGVzIHx8ICFoYW5kbGVyIHx8ICEoZWxlbURhdGEgPSBqUXVlcnkuX2RhdGEoIGVsZW0gKSkgKSB7CgkJCXJldHVybjsKCQl9CgoJCS8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlcgoJCWlmICggaGFuZGxlci5oYW5kbGVyICkgewoJCQloYW5kbGVPYmpJbiA9IGhhbmRsZXI7CgkJCWhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyOwoJCQlzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yOwoJCX0KCgkJLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyCgkJaWYgKCAhaGFuZGxlci5ndWlkICkgewoJCQloYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrOwoJCX0KCgkJLy8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdAoJCWV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50czsKCQlpZiAoICFldmVudHMgKSB7CgkJCWVsZW1EYXRhLmV2ZW50cyA9IGV2ZW50cyA9IHt9OwoJCX0KCQlldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZTsKCQlpZiAoICFldmVudEhhbmRsZSApIHsKCQkJZWxlbURhdGEuaGFuZGxlID0gZXZlbnRIYW5kbGUgPSBmdW5jdGlvbiggZSApIHsKCQkJCS8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kCgkJCQkvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkCgkJCQlyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gInVuZGVmaW5lZCIgJiYgKCFlIHx8IGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSkgPwoJCQkJCWpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZXZlbnRIYW5kbGUuZWxlbSwgYXJndW1lbnRzICkgOgoJCQkJCXVuZGVmaW5lZDsKCQkJfTsKCQkJLy8gQWRkIGVsZW0gYXMgYSBwcm9wZXJ0eSBvZiB0aGUgaGFuZGxlIGZuIHRvIHByZXZlbnQgYSBtZW1vcnkgbGVhayB3aXRoIElFIG5vbi1uYXRpdmUgZXZlbnRzCgkJCWV2ZW50SGFuZGxlLmVsZW0gPSBlbGVtOwoJCX0KCgkJLy8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZQoJCS8vIGpRdWVyeSguLi4pLmJpbmQoIm1vdXNlb3ZlciBtb3VzZW91dCIsIGZuKTsKCQl0eXBlcyA9IGpRdWVyeS50cmltKCBob3ZlckhhY2sodHlwZXMpICkuc3BsaXQoICIgIiApOwoJCWZvciAoIHQgPSAwOyB0IDwgdHlwZXMubGVuZ3RoOyB0KysgKSB7CgoJCQl0bnMgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdOwoJCQl0eXBlID0gdG5zWzFdOwoJCQluYW1lc3BhY2VzID0gKCB0bnNbMl0gfHwgIiIgKS5zcGxpdCggIi4iICkuc29ydCgpOwoKCQkJLy8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlCgkJCXNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9OwoKCQkJLy8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlCgkJCXR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTsKCgkJCS8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGUKCQkJc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307CgoJCQkvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVycwoJCQloYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKHsKCQkJCXR5cGU6IHR5cGUsCgkJCQlvcmlnVHlwZTogdG5zWzFdLAoJCQkJZGF0YTogZGF0YSwKCQkJCWhhbmRsZXI6IGhhbmRsZXIsCgkJCQlndWlkOiBoYW5kbGVyLmd1aWQsCgkJCQlzZWxlY3Rvcjogc2VsZWN0b3IsCgkJCQlxdWljazogc2VsZWN0b3IgJiYgcXVpY2tQYXJzZSggc2VsZWN0b3IgKSwKCQkJCW5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCIuIikKCQkJfSwgaGFuZGxlT2JqSW4gKTsKCgkJCS8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0CgkJCWhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF07CgkJCWlmICggIWhhbmRsZXJzICkgewoJCQkJaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdOwoJCQkJaGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7CgoJCQkJLy8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lci9hdHRhY2hFdmVudCBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlCgkJCQlpZiAoICFzcGVjaWFsLnNldHVwIHx8IHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7CgkJCQkJLy8gQmluZCB0aGUgZ2xvYmFsIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGVsZW1lbnQKCQkJCQlpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHsKCQkJCQkJZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSwgZmFsc2UgKTsKCgkJCQkJfSBlbHNlIGlmICggZWxlbS5hdHRhY2hFdmVudCApIHsKCQkJCQkJZWxlbS5hdHRhY2hFdmVudCggIm9uIiArIHR5cGUsIGV2ZW50SGFuZGxlICk7CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQlpZiAoIHNwZWNpYWwuYWRkICkgewoJCQkJc3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7CgoJCQkJaWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHsKCQkJCQloYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkOwoJCQkJfQoJCQl9CgoJCQkvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udAoJCQlpZiAoIHNlbGVjdG9yICkgewoJCQkJaGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApOwoJCQl9IGVsc2UgewoJCQkJaGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7CgkJCX0KCgkJCS8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb24KCQkJalF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTsKCQl9CgoJCS8vIE51bGxpZnkgZWxlbSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcyBpbiBJRQoJCWVsZW0gPSBudWxsOwoJfSwKCglnbG9iYWw6IHt9LAoKCS8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudAoJcmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHsKCgkJdmFyIGVsZW1EYXRhID0galF1ZXJ5Lmhhc0RhdGEoIGVsZW0gKSAmJiBqUXVlcnkuX2RhdGEoIGVsZW0gKSwKCQkJdCwgdG5zLCB0eXBlLCBvcmlnVHlwZSwgbmFtZXNwYWNlcywgb3JpZ0NvdW50LAoJCQlqLCBldmVudHMsIHNwZWNpYWwsIGhhbmRsZSwgZXZlbnRUeXBlLCBoYW5kbGVPYmo7CgoJCWlmICggIWVsZW1EYXRhIHx8ICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJLy8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZAoJCXR5cGVzID0galF1ZXJ5LnRyaW0oIGhvdmVySGFjayggdHlwZXMgfHwgIiIgKSApLnNwbGl0KCIgIik7CgkJZm9yICggdCA9IDA7IHQgPCB0eXBlcy5sZW5ndGg7IHQrKyApIHsKCQkJdG5zID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbdF0gKSB8fCBbXTsKCQkJdHlwZSA9IG9yaWdUeXBlID0gdG5zWzFdOwoJCQluYW1lc3BhY2VzID0gdG5zWzJdOwoKCQkJLy8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50CgkJCWlmICggIXR5cGUgKSB7CgkJCQlmb3IgKCB0eXBlIGluIGV2ZW50cyApIHsKCQkJCQlqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTsKCQkJCX0KCQkJCWNvbnRpbnVlOwoJCQl9CgoJCQlzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTsKCQkJdHlwZSA9ICggc2VsZWN0b3I/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7CgkJCWV2ZW50VHlwZSA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdOwoJCQlvcmlnQ291bnQgPSBldmVudFR5cGUubGVuZ3RoOwoJCQluYW1lc3BhY2VzID0gbmFtZXNwYWNlcyA/IG5ldyBSZWdFeHAoIihefFxcLikiICsgbmFtZXNwYWNlcy5zcGxpdCgiLiIpLnNvcnQoKS5qb2luKCJcXC4oPzouKlxcLik/IikgKyAiKFxcLnwkKSIpIDogbnVsbDsKCgkJCS8vIFJlbW92ZSBtYXRjaGluZyBldmVudHMKCQkJZm9yICggaiA9IDA7IGogPCBldmVudFR5cGUubGVuZ3RoOyBqKysgKSB7CgkJCQloYW5kbGVPYmogPSBldmVudFR5cGVbIGogXTsKCgkJCQlpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmCgkJCQkJICggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmCgkJCQkJICggIW5hbWVzcGFjZXMgfHwgbmFtZXNwYWNlcy50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJgoJCQkJCSAoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSAiKioiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkgewoJCQkJCWV2ZW50VHlwZS5zcGxpY2UoIGotLSwgMSApOwoKCQkJCQlpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHsKCQkJCQkJZXZlbnRUeXBlLmRlbGVnYXRlQ291bnQtLTsKCQkJCQl9CgkJCQkJaWYgKCBzcGVjaWFsLnJlbW92ZSApIHsKCQkJCQkJc3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQkvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0CgkJCS8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKQoJCQlpZiAoIGV2ZW50VHlwZS5sZW5ndGggPT09IDAgJiYgb3JpZ0NvdW50ICE9PSBldmVudFR5cGUubGVuZ3RoICkgewoJCQkJaWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fCBzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMgKSA9PT0gZmFsc2UgKSB7CgkJCQkJalF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTsKCQkJCX0KCgkJCQlkZWxldGUgZXZlbnRzWyB0eXBlIF07CgkJCX0KCQl9CgoJCS8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkCgkJaWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7CgkJCWhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZTsKCQkJaWYgKCBoYW5kbGUgKSB7CgkJCQloYW5kbGUuZWxlbSA9IG51bGw7CgkJCX0KCgkJCS8vIHJlbW92ZURhdGEgYWxzbyBjaGVja3MgZm9yIGVtcHRpbmVzcyBhbmQgY2xlYXJzIHRoZSBleHBhbmRvIGlmIGVtcHR5CgkJCS8vIHNvIHVzZSBpdCBpbnN0ZWFkIG9mIGRlbGV0ZQoJCQlqUXVlcnkucmVtb3ZlRGF0YSggZWxlbSwgWyAiZXZlbnRzIiwgImhhbmRsZSIgXSwgdHJ1ZSApOwoJCX0KCX0sCgoJLy8gRXZlbnRzIHRoYXQgYXJlIHNhZmUgdG8gc2hvcnQtY2lyY3VpdCBpZiBubyBoYW5kbGVycyBhcmUgYXR0YWNoZWQuCgkvLyBOYXRpdmUgRE9NIGV2ZW50cyBzaG91bGQgbm90IGJlIGFkZGVkLCB0aGV5IG1heSBoYXZlIGlubGluZSBoYW5kbGVycy4KCWN1c3RvbUV2ZW50OiB7CgkJImdldERhdGEiOiB0cnVlLAoJCSJzZXREYXRhIjogdHJ1ZSwKCQkiY2hhbmdlRGF0YSI6IHRydWUKCX0sCgoJdHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7CgkJLy8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXMKCQlpZiAoIGVsZW0gJiYgKGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCkgKSB7CgkJCXJldHVybjsKCQl9CgoJCS8vIEV2ZW50IG9iamVjdCBvciBldmVudCB0eXBlCgkJdmFyIHR5cGUgPSBldmVudC50eXBlIHx8IGV2ZW50LAoJCQluYW1lc3BhY2VzID0gW10sCgkJCWNhY2hlLCBleGNsdXNpdmUsIGksIGN1ciwgb2xkLCBvbnR5cGUsIHNwZWNpYWwsIGhhbmRsZSwgZXZlbnRQYXRoLCBidWJibGVUeXBlOwoKCQkvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3cKCQlpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7CgkJCXJldHVybjsKCQl9CgoJCWlmICggdHlwZS5pbmRleE9mKCAiISIgKSA+PSAwICkgewoJCQkvLyBFeGNsdXNpdmUgZXZlbnRzIHRyaWdnZXIgb25seSBmb3IgdGhlIGV4YWN0IGV2ZW50IChubyBuYW1lc3BhY2VzKQoJCQl0eXBlID0gdHlwZS5zbGljZSgwLCAtMSk7CgkJCWV4Y2x1c2l2ZSA9IHRydWU7CgkJfQoKCQlpZiAoIHR5cGUuaW5kZXhPZiggIi4iICkgPj0gMCApIHsKCQkJLy8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKQoJCQluYW1lc3BhY2VzID0gdHlwZS5zcGxpdCgiLiIpOwoJCQl0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpOwoJCQluYW1lc3BhY2VzLnNvcnQoKTsKCQl9CgoJCWlmICggKCFlbGVtIHx8IGpRdWVyeS5ldmVudC5jdXN0b21FdmVudFsgdHlwZSBdKSAmJiAhalF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdICkgewoJCQkvLyBObyBqUXVlcnkgaGFuZGxlcnMgZm9yIHRoaXMgZXZlbnQgdHlwZSwgYW5kIGl0IGNhbid0IGhhdmUgaW5saW5lIGhhbmRsZXJzCgkJCXJldHVybjsKCQl9CgoJCS8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBFdmVudCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nCgkJZXZlbnQgPSB0eXBlb2YgZXZlbnQgPT09ICJvYmplY3QiID8KCQkJLy8galF1ZXJ5LkV2ZW50IG9iamVjdAoJCQlldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/IGV2ZW50IDoKCQkJLy8gT2JqZWN0IGxpdGVyYWwKCQkJbmV3IGpRdWVyeS5FdmVudCggdHlwZSwgZXZlbnQgKSA6CgkJCS8vIEp1c3QgdGhlIGV2ZW50IHR5cGUgKHN0cmluZykKCQkJbmV3IGpRdWVyeS5FdmVudCggdHlwZSApOwoKCQlldmVudC50eXBlID0gdHlwZTsKCQlldmVudC5pc1RyaWdnZXIgPSB0cnVlOwoJCWV2ZW50LmV4Y2x1c2l2ZSA9IGV4Y2x1c2l2ZTsKCQlldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oICIuIiApOwoJCWV2ZW50Lm5hbWVzcGFjZV9yZSA9IGV2ZW50Lm5hbWVzcGFjZT8gbmV3IFJlZ0V4cCgiKF58XFwuKSIgKyBuYW1lc3BhY2VzLmpvaW4oIlxcLig/Oi4qXFwuKT8iKSArICIoXFwufCQpIikgOiBudWxsOwoJCW9udHlwZSA9IHR5cGUuaW5kZXhPZiggIjoiICkgPCAwID8gIm9uIiArIHR5cGUgOiAiIjsKCgkJLy8gSGFuZGxlIGEgZ2xvYmFsIHRyaWdnZXIKCQlpZiAoICFlbGVtICkgewoKCQkJLy8gVE9ETzogU3RvcCB0YXVudGluZyB0aGUgZGF0YSBjYWNoZTsgcmVtb3ZlIGdsb2JhbCBldmVudHMgYW5kIGFsd2F5cyBhdHRhY2ggdG8gZG9jdW1lbnQKCQkJY2FjaGUgPSBqUXVlcnkuY2FjaGU7CgkJCWZvciAoIGkgaW4gY2FjaGUgKSB7CgkJCQlpZiAoIGNhY2hlWyBpIF0uZXZlbnRzICYmIGNhY2hlWyBpIF0uZXZlbnRzWyB0eXBlIF0gKSB7CgkJCQkJalF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGV2ZW50LCBkYXRhLCBjYWNoZVsgaSBdLmhhbmRsZS5lbGVtLCB0cnVlICk7CgkJCQl9CgkJCX0KCQkJcmV0dXJuOwoJCX0KCgkJLy8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkCgkJZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkOwoJCWlmICggIWV2ZW50LnRhcmdldCApIHsKCQkJZXZlbnQudGFyZ2V0ID0gZWxlbTsKCQl9CgoJCS8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3QKCQlkYXRhID0gZGF0YSAhPSBudWxsID8galF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApIDogW107CgkJZGF0YS51bnNoaWZ0KCBldmVudCApOwoKCQkvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzCgkJc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307CgkJaWYgKCBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSkKCQkvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KQoJCWV2ZW50UGF0aCA9IFtbIGVsZW0sIHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZSBdXTsKCQlpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkgewoKCQkJYnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7CgkJCWN1ciA9IHJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgPyBlbGVtIDogZWxlbS5wYXJlbnROb2RlOwoJCQlvbGQgPSBudWxsOwoJCQlmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7CgkJCQlldmVudFBhdGgucHVzaChbIGN1ciwgYnViYmxlVHlwZSBdKTsKCQkJCW9sZCA9IGN1cjsKCQkJfQoKCQkJLy8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pCgkJCWlmICggb2xkICYmIG9sZCA9PT0gZWxlbS5vd25lckRvY3VtZW50ICkgewoJCQkJZXZlbnRQYXRoLnB1c2goWyBvbGQuZGVmYXVsdFZpZXcgfHwgb2xkLnBhcmVudFdpbmRvdyB8fCB3aW5kb3csIGJ1YmJsZVR5cGUgXSk7CgkJCX0KCQl9CgoJCS8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGgKCQlmb3IgKCBpID0gMDsgaSA8IGV2ZW50UGF0aC5sZW5ndGggJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7IGkrKyApIHsKCgkJCWN1ciA9IGV2ZW50UGF0aFtpXVswXTsKCQkJZXZlbnQudHlwZSA9IGV2ZW50UGF0aFtpXVsxXTsKCgkJCWhhbmRsZSA9ICggalF1ZXJ5Ll9kYXRhKCBjdXIsICJldmVudHMiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmIGpRdWVyeS5fZGF0YSggY3VyLCAiaGFuZGxlIiApOwoJCQlpZiAoIGhhbmRsZSApIHsKCQkJCWhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7CgkJCX0KCQkJLy8gTm90ZSB0aGF0IHRoaXMgaXMgYSBiYXJlIEpTIGZ1bmN0aW9uIGFuZCBub3QgYSBqUXVlcnkgaGFuZGxlcgoJCQloYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTsKCQkJaWYgKCBoYW5kbGUgJiYgalF1ZXJ5LmFjY2VwdERhdGEoIGN1ciApICYmIGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICkgPT09IGZhbHNlICkgewoJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJfQoJCX0KCQlldmVudC50eXBlID0gdHlwZTsKCgkJLy8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vdwoJCWlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgoJCQlpZiAoICghc3BlY2lhbC5fZGVmYXVsdCB8fCBzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBlbGVtLm93bmVyRG9jdW1lbnQsIGRhdGEgKSA9PT0gZmFsc2UpICYmCgkJCQkhKHR5cGUgPT09ICJjbGljayIgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCAiYSIgKSkgJiYgalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHsKCgkJCQkvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuCgkJCQkvLyBDYW4ndCB1c2UgYW4gLmlzRnVuY3Rpb24oKSBjaGVjayBoZXJlIGJlY2F1c2UgSUU2LzcgZmFpbHMgdGhhdCB0ZXN0LgoJCQkJLy8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKQoJCQkJLy8gSUU8OSBkaWVzIG9uIGZvY3VzL2JsdXIgdG8gaGlkZGVuIGVsZW1lbnQgKCMxNDg2KQoJCQkJaWYgKCBvbnR5cGUgJiYgZWxlbVsgdHlwZSBdICYmICgodHlwZSAhPT0gImZvY3VzIiAmJiB0eXBlICE9PSAiYmx1ciIpIHx8IGV2ZW50LnRhcmdldC5vZmZzZXRXaWR0aCAhPT0gMCkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkgewoKCQkJCQkvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kCgkJCQkJb2xkID0gZWxlbVsgb250eXBlIF07CgoJCQkJCWlmICggb2xkICkgewoJCQkJCQllbGVtWyBvbnR5cGUgXSA9IG51bGw7CgkJCQkJfQoKCQkJCQkvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZQoJCQkJCWpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlOwoJCQkJCWVsZW1bIHR5cGUgXSgpOwoJCQkJCWpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7CgoJCQkJCWlmICggb2xkICkgewoJCQkJCQllbGVtWyBvbnR5cGUgXSA9IG9sZDsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgoJCXJldHVybiBldmVudC5yZXN1bHQ7Cgl9LAoKCWRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7CgoJCS8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdAoJCWV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgfHwgd2luZG93LmV2ZW50ICk7CgoJCXZhciBoYW5kbGVycyA9ICggKGpRdWVyeS5fZGF0YSggdGhpcywgImV2ZW50cyIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10pLAoJCQlkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCwKCQkJYXJncyA9IFtdLnNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMCApLAoJCQlydW5fYWxsID0gIWV2ZW50LmV4Y2x1c2l2ZSAmJiAhZXZlbnQubmFtZXNwYWNlLAoJCQlzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fSwKCQkJaGFuZGxlclF1ZXVlID0gW10sCgkJCWksIGosIGN1ciwganFjdXIsIHJldCwgc2VsTWF0Y2gsIG1hdGNoZWQsIG1hdGNoZXMsIGhhbmRsZU9iaiwgc2VsLCByZWxhdGVkOwoKCQkvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudAoJCWFyZ3NbMF0gPSBldmVudDsKCQlldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7CgoJCS8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWQKCQlpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJLy8gRGV0ZXJtaW5lIGhhbmRsZXJzIHRoYXQgc2hvdWxkIHJ1biBpZiB0aGVyZSBhcmUgZGVsZWdhdGVkIGV2ZW50cwoJCS8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGJ1YmJsaW5nIGluIEZpcmVmb3ggKCMzODYxKQoJCWlmICggZGVsZWdhdGVDb3VudCAmJiAhKGV2ZW50LmJ1dHRvbiAmJiBldmVudC50eXBlID09PSAiY2xpY2siKSApIHsKCgkJCS8vIFByZWdlbmVyYXRlIGEgc2luZ2xlIGpRdWVyeSBvYmplY3QgZm9yIHJldXNlIHdpdGggLmlzKCkKCQkJanFjdXIgPSBqUXVlcnkodGhpcyk7CgkJCWpxY3VyLmNvbnRleHQgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpczsKCgkJCWZvciAoIGN1ciA9IGV2ZW50LnRhcmdldDsgY3VyICE9IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7CgoJCQkJLy8gRG9uJ3QgcHJvY2VzcyBldmVudHMgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSkKCQkJCWlmICggY3VyLmRpc2FibGVkICE9PSB0cnVlICkgewoJCQkJCXNlbE1hdGNoID0ge307CgkJCQkJbWF0Y2hlcyA9IFtdOwoJCQkJCWpxY3VyWzBdID0gY3VyOwoJCQkJCWZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkgewoJCQkJCQloYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdOwoJCQkJCQlzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3I7CgoJCQkJCQlpZiAoIHNlbE1hdGNoWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCQkJc2VsTWF0Y2hbIHNlbCBdID0gKAoJCQkJCQkJCWhhbmRsZU9iai5xdWljayA/IHF1aWNrSXMoIGN1ciwgaGFuZGxlT2JqLnF1aWNrICkgOiBqcWN1ci5pcyggc2VsICkKCQkJCQkJCSk7CgkJCQkJCX0KCQkJCQkJaWYgKCBzZWxNYXRjaFsgc2VsIF0gKSB7CgkJCQkJCQltYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApOwoJCQkJCQl9CgkJCQkJfQoJCQkJCWlmICggbWF0Y2hlcy5sZW5ndGggKSB7CgkJCQkJCWhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBtYXRjaGVzOiBtYXRjaGVzIH0pOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJLy8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVycwoJCWlmICggaGFuZGxlcnMubGVuZ3RoID4gZGVsZWdhdGVDb3VudCApIHsKCQkJaGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiB0aGlzLCBtYXRjaGVzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0pOwoJCX0KCgkJLy8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXMKCQlmb3IgKCBpID0gMDsgaSA8IGhhbmRsZXJRdWV1ZS5sZW5ndGggJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7IGkrKyApIHsKCQkJbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSBdOwoJCQlldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtOwoKCQkJZm9yICggaiA9IDA7IGogPCBtYXRjaGVkLm1hdGNoZXMubGVuZ3RoICYmICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpOyBqKysgKSB7CgkJCQloYW5kbGVPYmogPSBtYXRjaGVkLm1hdGNoZXNbIGogXTsKCgkJCQkvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgYmUgbm9uLWV4Y2x1c2l2ZSBhbmQgaGF2ZSBubyBuYW1lc3BhY2UsIG9yCgkJCQkvLyAyKSBoYXZlIG5hbWVzcGFjZShzKSBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS4KCQkJCWlmICggcnVuX2FsbCB8fCAoIWV2ZW50Lm5hbWVzcGFjZSAmJiAhaGFuZGxlT2JqLm5hbWVzcGFjZSkgfHwgZXZlbnQubmFtZXNwYWNlX3JlICYmIGV2ZW50Lm5hbWVzcGFjZV9yZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7CgoJCQkJCWV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTsKCQkJCQlldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7CgoJCQkJCXJldCA9ICggKGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSkuaGFuZGxlIHx8IGhhbmRsZU9iai5oYW5kbGVyICkKCQkJCQkJCS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7CgoJCQkJCWlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJCWV2ZW50LnJlc3VsdCA9IHJldDsKCQkJCQkJaWYgKCByZXQgPT09IGZhbHNlICkgewoJCQkJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCQkJCWV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoKCQkvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlCgkJaWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHsKCQkJc3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTsKCQl9CgoJCXJldHVybiBldmVudC5yZXN1bHQ7Cgl9LAoKCS8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50CgkvLyAqKiogYXR0ckNoYW5nZSBhdHRyTmFtZSByZWxhdGVkTm9kZSBzcmNFbGVtZW50ICBhcmUgbm90IG5vcm1hbGl6ZWQsIG5vbi1XM0MsIGRlcHJlY2F0ZWQsIHdpbGwgYmUgcmVtb3ZlZCBpbiAxLjggKioqCglwcm9wczogImF0dHJDaGFuZ2UgYXR0ck5hbWUgcmVsYXRlZE5vZGUgc3JjRWxlbWVudCBhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBldmVudFBoYXNlIG1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2giLnNwbGl0KCIgIiksCgoJZml4SG9va3M6IHt9LAoKCWtleUhvb2tzOiB7CgkJcHJvcHM6ICJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlIi5zcGxpdCgiICIpLAoJCWZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHsKCgkJCS8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50cwoJCQlpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7CgkJCQlldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7CgkJCX0KCgkJCXJldHVybiBldmVudDsKCQl9Cgl9LAoKCW1vdXNlSG9va3M6IHsKCQlwcm9wczogImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBmcm9tRWxlbWVudCBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudCIuc3BsaXQoIiAiKSwKCQlmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7CgkJCXZhciBldmVudERvYywgZG9jLCBib2R5LAoJCQkJYnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uLAoJCQkJZnJvbUVsZW1lbnQgPSBvcmlnaW5hbC5mcm9tRWxlbWVudDsKCgkJCS8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGUKCQkJaWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHsKCQkJCWV2ZW50RG9jID0gZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7CgkJCQlkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7CgkJCQlib2R5ID0gZXZlbnREb2MuYm9keTsKCgkJCQlldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggKyAoIGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7CgkJCQlldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgKyAoIGRvYyAmJiBkb2Muc2Nyb2xsVG9wICB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsVG9wICB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7CgkJCX0KCgkJCS8vIEFkZCByZWxhdGVkVGFyZ2V0LCBpZiBuZWNlc3NhcnkKCQkJaWYgKCAhZXZlbnQucmVsYXRlZFRhcmdldCAmJiBmcm9tRWxlbWVudCApIHsKCQkJCWV2ZW50LnJlbGF0ZWRUYXJnZXQgPSBmcm9tRWxlbWVudCA9PT0gZXZlbnQudGFyZ2V0ID8gb3JpZ2luYWwudG9FbGVtZW50IDogZnJvbUVsZW1lbnQ7CgkJCX0KCgkJCS8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHQKCQkJLy8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXQKCQkJaWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7CgkJCQlldmVudC53aGljaCA9ICggYnV0dG9uICYgMSA/IDEgOiAoIGJ1dHRvbiAmIDIgPyAzIDogKCBidXR0b24gJiA0ID8gMiA6IDAgKSApICk7CgkJCX0KCgkJCXJldHVybiBldmVudDsKCQl9Cgl9LAoKCWZpeDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCWlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7CgkJCXJldHVybiBldmVudDsKCQl9CgoJCS8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllcwoJCXZhciBpLCBwcm9wLAoJCQlvcmlnaW5hbEV2ZW50ID0gZXZlbnQsCgkJCWZpeEhvb2sgPSBqUXVlcnkuZXZlbnQuZml4SG9va3NbIGV2ZW50LnR5cGUgXSB8fCB7fSwKCQkJY29weSA9IGZpeEhvb2sucHJvcHMgPyB0aGlzLnByb3BzLmNvbmNhdCggZml4SG9vay5wcm9wcyApIDogdGhpcy5wcm9wczsKCgkJZXZlbnQgPSBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTsKCgkJZm9yICggaSA9IGNvcHkubGVuZ3RoOyBpOyApIHsKCQkJcHJvcCA9IGNvcHlbIC0taSBdOwoJCQlldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdOwoJCX0KCgkJLy8gRml4IHRhcmdldCBwcm9wZXJ0eSwgaWYgbmVjZXNzYXJ5ICgjMTkyNSwgSUUgNi83LzggJiBTYWZhcmkyKQoJCWlmICggIWV2ZW50LnRhcmdldCApIHsKCQkJZXZlbnQudGFyZ2V0ID0gb3JpZ2luYWxFdmVudC5zcmNFbGVtZW50IHx8IGRvY3VtZW50OwoJCX0KCgkJLy8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsIFNhZmFyaSkKCQlpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHsKCQkJZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7CgkJfQoKCQkvLyBGb3IgbW91c2Uva2V5IGV2ZW50czsgYWRkIG1ldGFLZXkgaWYgaXQncyBub3QgdGhlcmUgKCMzMzY4LCBJRTYvNy84KQoJCWlmICggZXZlbnQubWV0YUtleSA9PT0gdW5kZWZpbmVkICkgewoJCQlldmVudC5tZXRhS2V5ID0gZXZlbnQuY3RybEtleTsKCQl9CgoJCXJldHVybiBmaXhIb29rLmZpbHRlcj8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDsKCX0sCgoJc3BlY2lhbDogewoJCXJlYWR5OiB7CgkJCS8vIE1ha2Ugc3VyZSB0aGUgcmVhZHkgZXZlbnQgaXMgc2V0dXAKCQkJc2V0dXA6IGpRdWVyeS5iaW5kUmVhZHkKCQl9LAoKCQlsb2FkOiB7CgkJCS8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWQKCQkJbm9CdWJibGU6IHRydWUKCQl9LAoKCQlmb2N1czogewoJCQlkZWxlZ2F0ZVR5cGU6ICJmb2N1c2luIgoJCX0sCgkJYmx1cjogewoJCQlkZWxlZ2F0ZVR5cGU6ICJmb2N1c291dCIKCQl9LAoKCQliZWZvcmV1bmxvYWQ6IHsKCQkJc2V0dXA6IGZ1bmN0aW9uKCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApIHsKCQkJCS8vIFdlIG9ubHkgd2FudCB0byBkbyB0aGlzIHNwZWNpYWwgY2FzZSBvbiB3aW5kb3dzCgkJCQlpZiAoIGpRdWVyeS5pc1dpbmRvdyggdGhpcyApICkgewoJCQkJCXRoaXMub25iZWZvcmV1bmxvYWQgPSBldmVudEhhbmRsZTsKCQkJCX0KCQkJfSwKCgkJCXRlYXJkb3duOiBmdW5jdGlvbiggbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSB7CgkJCQlpZiAoIHRoaXMub25iZWZvcmV1bmxvYWQgPT09IGV2ZW50SGFuZGxlICkgewoJCQkJCXRoaXMub25iZWZvcmV1bmxvYWQgPSBudWxsOwoJCQkJfQoJCQl9CgkJfQoJfSwKCglzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50LCBidWJibGUgKSB7CgkJLy8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lLgoJCS8vIEZha2Ugb3JpZ2luYWxFdmVudCB0byBhdm9pZCBkb25vcidzIHN0b3BQcm9wYWdhdGlvbiwgYnV0IGlmIHRoZQoJCS8vIHNpbXVsYXRlZCBldmVudCBwcmV2ZW50cyBkZWZhdWx0IHRoZW4gd2UgZG8gdGhlIHNhbWUgb24gdGhlIGRvbm9yLgoJCXZhciBlID0galF1ZXJ5LmV4dGVuZCgKCQkJbmV3IGpRdWVyeS5FdmVudCgpLAoJCQlldmVudCwKCQkJeyB0eXBlOiB0eXBlLAoJCQkJaXNTaW11bGF0ZWQ6IHRydWUsCgkJCQlvcmlnaW5hbEV2ZW50OiB7fQoJCQl9CgkJKTsKCQlpZiAoIGJ1YmJsZSApIHsKCQkJalF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTsKCQl9IGVsc2UgewoJCQlqUXVlcnkuZXZlbnQuZGlzcGF0Y2guY2FsbCggZWxlbSwgZSApOwoJCX0KCQlpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJfQoJfQp9OwoKLy8gU29tZSBwbHVnaW5zIGFyZSB1c2luZywgYnV0IGl0J3MgdW5kb2N1bWVudGVkL2RlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZC4KLy8gVGhlIDEuNyBzcGVjaWFsIGV2ZW50IGludGVyZmFjZSBzaG91bGQgcHJvdmlkZSBhbGwgdGhlIGhvb2tzIG5lZWRlZCBub3cuCmpRdWVyeS5ldmVudC5oYW5kbGUgPSBqUXVlcnkuZXZlbnQuZGlzcGF0Y2g7CgpqUXVlcnkucmVtb3ZlRXZlbnQgPSBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyID8KCWZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7CgkJaWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7CgkJCWVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlLCBmYWxzZSApOwoJCX0KCX0gOgoJZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHsKCQlpZiAoIGVsZW0uZGV0YWNoRXZlbnQgKSB7CgkJCWVsZW0uZGV0YWNoRXZlbnQoICJvbiIgKyB0eXBlLCBoYW5kbGUgKTsKCQl9Cgl9OwoKalF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7CgkvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmQKCWlmICggISh0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50KSApIHsKCQlyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApOwoJfQoKCS8vIEV2ZW50IG9iamVjdAoJaWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7CgkJdGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjOwoJCXRoaXMudHlwZSA9IHNyYy50eXBlOwoKCQkvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZAoJCS8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLgoJCXRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gKCBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fCBzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlIHx8CgkJCXNyYy5nZXRQcmV2ZW50RGVmYXVsdCAmJiBzcmMuZ2V0UHJldmVudERlZmF1bHQoKSApID8gcmV0dXJuVHJ1ZSA6IHJldHVybkZhbHNlOwoKCS8vIEV2ZW50IHR5cGUKCX0gZWxzZSB7CgkJdGhpcy50eXBlID0gc3JjOwoJfQoKCS8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0CglpZiAoIHByb3BzICkgewoJCWpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7Cgl9CgoJLy8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmUKCXRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpOwoKCS8vIE1hcmsgaXQgYXMgZml4ZWQKCXRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlOwp9OwoKZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7CglyZXR1cm4gZmFsc2U7Cn0KZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHsKCXJldHVybiB0cnVlOwp9CgovLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmcKLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sCmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7CglwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7CgkJdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlOwoKCQl2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDsKCQlpZiAoICFlICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBpZiBwcmV2ZW50RGVmYXVsdCBleGlzdHMgcnVuIGl0IG9uIHRoZSBvcmlnaW5hbCBldmVudAoJCWlmICggZS5wcmV2ZW50RGVmYXVsdCApIHsKCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoKCQkvLyBvdGhlcndpc2Ugc2V0IHRoZSByZXR1cm5WYWx1ZSBwcm9wZXJ0eSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gZmFsc2UgKElFKQoJCX0gZWxzZSB7CgkJCWUucmV0dXJuVmFsdWUgPSBmYWxzZTsKCQl9Cgl9LAoJc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHsKCQl0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTsKCgkJdmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7CgkJaWYgKCAhZSApIHsKCQkJcmV0dXJuOwoJCX0KCQkvLyBpZiBzdG9wUHJvcGFnYXRpb24gZXhpc3RzIHJ1biBpdCBvbiB0aGUgb3JpZ2luYWwgZXZlbnQKCQlpZiAoIGUuc3RvcFByb3BhZ2F0aW9uICkgewoJCQllLnN0b3BQcm9wYWdhdGlvbigpOwoJCX0KCQkvLyBvdGhlcndpc2Ugc2V0IHRoZSBjYW5jZWxCdWJibGUgcHJvcGVydHkgb2YgdGhlIG9yaWdpbmFsIGV2ZW50IHRvIHRydWUgKElFKQoJCWUuY2FuY2VsQnViYmxlID0gdHJ1ZTsKCX0sCglzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkgewoJCXRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlOwoJCXRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7Cgl9LAoJaXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSwKCWlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSwKCWlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZQp9OwoKLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzCmpRdWVyeS5lYWNoKHsKCW1vdXNlZW50ZXI6ICJtb3VzZW92ZXIiLAoJbW91c2VsZWF2ZTogIm1vdXNlb3V0Igp9LCBmdW5jdGlvbiggb3JpZywgZml4ICkgewoJalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHsKCQlkZWxlZ2F0ZVR5cGU6IGZpeCwKCQliaW5kVHlwZTogZml4LAoKCQloYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyIHRhcmdldCA9IHRoaXMsCgkJCQlyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCwKCQkJCWhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iaiwKCQkJCXNlbGVjdG9yID0gaGFuZGxlT2JqLnNlbGVjdG9yLAoJCQkJcmV0OwoKCQkJLy8gRm9yIG1vdXNlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LgoJCQkvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvdwoJCQlpZiAoICFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkpICkgewoJCQkJZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTsKCQkJCXJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJCWV2ZW50LnR5cGUgPSBmaXg7CgkJCX0KCQkJcmV0dXJuIHJldDsKCQl9Cgl9Owp9KTsKCi8vIElFIHN1Ym1pdCBkZWxlZ2F0aW9uCmlmICggIWpRdWVyeS5zdXBwb3J0LnN1Ym1pdEJ1YmJsZXMgKSB7CgoJalF1ZXJ5LmV2ZW50LnNwZWNpYWwuc3VibWl0ID0gewoJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJLy8gT25seSBuZWVkIHRoaXMgZm9yIGRlbGVnYXRlZCBmb3JtIHN1Ym1pdCBldmVudHMKCQkJaWYgKCBqUXVlcnkubm9kZU5hbWUoIHRoaXMsICJmb3JtIiApICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQkvLyBMYXp5LWFkZCBhIHN1Ym1pdCBoYW5kbGVyIHdoZW4gYSBkZXNjZW5kYW50IGZvcm0gbWF5IHBvdGVudGlhbGx5IGJlIHN1Ym1pdHRlZAoJCQlqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCAiY2xpY2suX3N1Ym1pdCBrZXlwcmVzcy5fc3VibWl0IiwgZnVuY3Rpb24oIGUgKSB7CgkJCQkvLyBOb2RlIG5hbWUgY2hlY2sgYXZvaWRzIGEgVk1MLXJlbGF0ZWQgY3Jhc2ggaW4gSUUgKCM5ODA3KQoJCQkJdmFyIGVsZW0gPSBlLnRhcmdldCwKCQkJCQlmb3JtID0galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCAiaW5wdXQiICkgfHwgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCAiYnV0dG9uIiApID8gZWxlbS5mb3JtIDogdW5kZWZpbmVkOwoJCQkJaWYgKCBmb3JtICYmICFmb3JtLl9zdWJtaXRfYXR0YWNoZWQgKSB7CgkJCQkJalF1ZXJ5LmV2ZW50LmFkZCggZm9ybSwgInN1Ym1pdC5fc3VibWl0IiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCQlldmVudC5fc3VibWl0X2J1YmJsZSA9IHRydWU7CgkJCQkJfSk7CgkJCQkJZm9ybS5fc3VibWl0X2F0dGFjaGVkID0gdHJ1ZTsKCQkJCX0KCQkJfSk7CgkJCS8vIHJldHVybiB1bmRlZmluZWQgc2luY2Ugd2UgZG9uJ3QgbmVlZCBhbiBldmVudCBsaXN0ZW5lcgoJCX0sCgkJCgkJcG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCS8vIElmIGZvcm0gd2FzIHN1Ym1pdHRlZCBieSB0aGUgdXNlciwgYnViYmxlIHRoZSBldmVudCB1cCB0aGUgdHJlZQoJCQlpZiAoIGV2ZW50Ll9zdWJtaXRfYnViYmxlICkgewoJCQkJZGVsZXRlIGV2ZW50Ll9zdWJtaXRfYnViYmxlOwoJCQkJaWYgKCB0aGlzLnBhcmVudE5vZGUgJiYgIWV2ZW50LmlzVHJpZ2dlciApIHsKCQkJCQlqUXVlcnkuZXZlbnQuc2ltdWxhdGUoICJzdWJtaXQiLCB0aGlzLnBhcmVudE5vZGUsIGV2ZW50LCB0cnVlICk7CgkJCQl9CgkJCX0KCQl9LAoKCQl0ZWFyZG93bjogZnVuY3Rpb24oKSB7CgkJCS8vIE9ubHkgbmVlZCB0aGlzIGZvciBkZWxlZ2F0ZWQgZm9ybSBzdWJtaXQgZXZlbnRzCgkJCWlmICggalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCAiZm9ybSIgKSApIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJLy8gUmVtb3ZlIGRlbGVnYXRlZCBoYW5kbGVyczsgY2xlYW5EYXRhIGV2ZW50dWFsbHkgcmVhcHMgc3VibWl0IGhhbmRsZXJzIGF0dGFjaGVkIGFib3ZlCgkJCWpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsICIuX3N1Ym1pdCIgKTsKCQl9Cgl9Owp9CgovLyBJRSBjaGFuZ2UgZGVsZWdhdGlvbiBhbmQgY2hlY2tib3gvcmFkaW8gZml4CmlmICggIWpRdWVyeS5zdXBwb3J0LmNoYW5nZUJ1YmJsZXMgKSB7CgoJalF1ZXJ5LmV2ZW50LnNwZWNpYWwuY2hhbmdlID0gewoKCQlzZXR1cDogZnVuY3Rpb24oKSB7CgoJCQlpZiAoIHJmb3JtRWxlbXMudGVzdCggdGhpcy5ub2RlTmFtZSApICkgewoJCQkJLy8gSUUgZG9lc24ndCBmaXJlIGNoYW5nZSBvbiBhIGNoZWNrL3JhZGlvIHVudGlsIGJsdXI7IHRyaWdnZXIgaXQgb24gY2xpY2sKCQkJCS8vIGFmdGVyIGEgcHJvcGVydHljaGFuZ2UuIEVhdCB0aGUgYmx1ci1jaGFuZ2UgaW4gc3BlY2lhbC5jaGFuZ2UuaGFuZGxlLgoJCQkJLy8gVGhpcyBzdGlsbCBmaXJlcyBvbmNoYW5nZSBhIHNlY29uZCB0aW1lIGZvciBjaGVjay9yYWRpbyBhZnRlciBibHVyLgoJCQkJaWYgKCB0aGlzLnR5cGUgPT09ICJjaGVja2JveCIgfHwgdGhpcy50eXBlID09PSAicmFkaW8iICkgewoJCQkJCWpRdWVyeS5ldmVudC5hZGQoIHRoaXMsICJwcm9wZXJ0eWNoYW5nZS5fY2hhbmdlIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCQlpZiAoIGV2ZW50Lm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lID09PSAiY2hlY2tlZCIgKSB7CgkJCQkJCQl0aGlzLl9qdXN0X2NoYW5nZWQgPSB0cnVlOwoJCQkJCQl9CgkJCQkJfSk7CgkJCQkJalF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgImNsaWNrLl9jaGFuZ2UiLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJCWlmICggdGhpcy5fanVzdF9jaGFuZ2VkICYmICFldmVudC5pc1RyaWdnZXIgKSB7CgkJCQkJCQl0aGlzLl9qdXN0X2NoYW5nZWQgPSBmYWxzZTsKCQkJCQkJCWpRdWVyeS5ldmVudC5zaW11bGF0ZSggImNoYW5nZSIsIHRoaXMsIGV2ZW50LCB0cnVlICk7CgkJCQkJCX0KCQkJCQl9KTsKCQkJCX0KCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCQkvLyBEZWxlZ2F0ZWQgZXZlbnQ7IGxhenktYWRkIGEgY2hhbmdlIGhhbmRsZXIgb24gZGVzY2VuZGFudCBpbnB1dHMKCQkJalF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgImJlZm9yZWFjdGl2YXRlLl9jaGFuZ2UiLCBmdW5jdGlvbiggZSApIHsKCQkJCXZhciBlbGVtID0gZS50YXJnZXQ7CgoJCQkJaWYgKCByZm9ybUVsZW1zLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiAhZWxlbS5fY2hhbmdlX2F0dGFjaGVkICkgewoJCQkJCWpRdWVyeS5ldmVudC5hZGQoIGVsZW0sICJjaGFuZ2UuX2NoYW5nZSIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQkJaWYgKCB0aGlzLnBhcmVudE5vZGUgJiYgIWV2ZW50LmlzU2ltdWxhdGVkICYmICFldmVudC5pc1RyaWdnZXIgKSB7CgkJCQkJCQlqUXVlcnkuZXZlbnQuc2ltdWxhdGUoICJjaGFuZ2UiLCB0aGlzLnBhcmVudE5vZGUsIGV2ZW50LCB0cnVlICk7CgkJCQkJCX0KCQkJCQl9KTsKCQkJCQllbGVtLl9jaGFuZ2VfYXR0YWNoZWQgPSB0cnVlOwoJCQkJfQoJCQl9KTsKCQl9LAoKCQloYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyIGVsZW0gPSBldmVudC50YXJnZXQ7CgoJCQkvLyBTd2FsbG93IG5hdGl2ZSBjaGFuZ2UgZXZlbnRzIGZyb20gY2hlY2tib3gvcmFkaW8sIHdlIGFscmVhZHkgdHJpZ2dlcmVkIHRoZW0gYWJvdmUKCQkJaWYgKCB0aGlzICE9PSBlbGVtIHx8IGV2ZW50LmlzU2ltdWxhdGVkIHx8IGV2ZW50LmlzVHJpZ2dlciB8fCAoZWxlbS50eXBlICE9PSAicmFkaW8iICYmIGVsZW0udHlwZSAhPT0gImNoZWNrYm94IikgKSB7CgkJCQlyZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQl9CgkJfSwKCgkJdGVhcmRvd246IGZ1bmN0aW9uKCkgewoJCQlqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCAiLl9jaGFuZ2UiICk7CgoJCQlyZXR1cm4gcmZvcm1FbGVtcy50ZXN0KCB0aGlzLm5vZGVOYW1lICk7CgkJfQoJfTsKfQoKLy8gQ3JlYXRlICJidWJibGluZyIgZm9jdXMgYW5kIGJsdXIgZXZlbnRzCmlmICggIWpRdWVyeS5zdXBwb3J0LmZvY3VzaW5CdWJibGVzICkgewoJalF1ZXJ5LmVhY2goeyBmb2N1czogImZvY3VzaW4iLCBibHVyOiAiZm9jdXNvdXQiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7CgoJCS8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXQKCQl2YXIgYXR0YWNoZXMgPSAwLAoJCQloYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJalF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSwgdHJ1ZSApOwoJCQl9OwoKCQlqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7CgkJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJCWlmICggYXR0YWNoZXMrKyA9PT0gMCApIHsKCQkJCQlkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7CgkJCQl9CgkJCX0sCgkJCXRlYXJkb3duOiBmdW5jdGlvbigpIHsKCQkJCWlmICggLS1hdHRhY2hlcyA9PT0gMCApIHsKCQkJCQlkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7CgkJCQl9CgkJCX0KCQl9OwoJfSk7Cn0KCmpRdWVyeS5mbi5leHRlbmQoewoKCW9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgLypJTlRFUk5BTCovIG9uZSApIHsKCQl2YXIgb3JpZ0ZuLCB0eXBlOwoKCQkvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnMKCQlpZiAoIHR5cGVvZiB0eXBlcyA9PT0gIm9iamVjdCIgKSB7CgkJCS8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApCgkJCWlmICggdHlwZW9mIHNlbGVjdG9yICE9PSAic3RyaW5nIiApIHsgLy8gJiYgc2VsZWN0b3IgIT0gbnVsbAoJCQkJLy8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKQoJCQkJZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7CgkJCQlzZWxlY3RvciA9IHVuZGVmaW5lZDsKCQkJfQoJCQlmb3IgKCB0eXBlIGluIHR5cGVzICkgewoJCQkJdGhpcy5vbiggdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApOwoJCQl9CgkJCXJldHVybiB0aGlzOwoJCX0KCgkJaWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHsKCQkJLy8gKCB0eXBlcywgZm4gKQoJCQlmbiA9IHNlbGVjdG9yOwoJCQlkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7CgkJfSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHsKCQkJaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09ICJzdHJpbmciICkgewoJCQkJLy8gKCB0eXBlcywgc2VsZWN0b3IsIGZuICkKCQkJCWZuID0gZGF0YTsKCQkJCWRhdGEgPSB1bmRlZmluZWQ7CgkJCX0gZWxzZSB7CgkJCQkvLyAoIHR5cGVzLCBkYXRhLCBmbiApCgkJCQlmbiA9IGRhdGE7CgkJCQlkYXRhID0gc2VsZWN0b3I7CgkJCQlzZWxlY3RvciA9IHVuZGVmaW5lZDsKCQkJfQoJCX0KCQlpZiAoIGZuID09PSBmYWxzZSApIHsKCQkJZm4gPSByZXR1cm5GYWxzZTsKCQl9IGVsc2UgaWYgKCAhZm4gKSB7CgkJCXJldHVybiB0aGlzOwoJCX0KCgkJaWYgKCBvbmUgPT09IDEgKSB7CgkJCW9yaWdGbiA9IGZuOwoJCQlmbiA9IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCS8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mbwoJCQkJalF1ZXJ5KCkub2ZmKCBldmVudCApOwoJCQkJcmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCX07CgkJCS8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuCgkJCWZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApOwoJCX0KCQlyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHsKCQkJalF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApOwoJCX0pOwoJfSwKCW9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7CgkJcmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTsKCX0sCglvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkgewoJCWlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkgewoJCQkvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50CgkJCXZhciBoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7CgkJCWpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoCgkJCQloYW5kbGVPYmoubmFtZXNwYWNlID8gaGFuZGxlT2JqLm9yaWdUeXBlICsgIi4iICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6IGhhbmRsZU9iai5vcmlnVHlwZSwKCQkJCWhhbmRsZU9iai5zZWxlY3RvciwKCQkJCWhhbmRsZU9iai5oYW5kbGVyCgkJCSk7CgkJCXJldHVybiB0aGlzOwoJCX0KCQlpZiAoIHR5cGVvZiB0eXBlcyA9PT0gIm9iamVjdCIgKSB7CgkJCS8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApCgkJCWZvciAoIHZhciB0eXBlIGluIHR5cGVzICkgewoJCQkJdGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7CgkJCX0KCQkJcmV0dXJuIHRoaXM7CgkJfQoJCWlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gImZ1bmN0aW9uIiApIHsKCQkJLy8gKCB0eXBlcyBbLCBmbl0gKQoJCQlmbiA9IHNlbGVjdG9yOwoJCQlzZWxlY3RvciA9IHVuZGVmaW5lZDsKCQl9CgkJaWYgKCBmbiA9PT0gZmFsc2UgKSB7CgkJCWZuID0gcmV0dXJuRmFsc2U7CgkJfQoJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCWpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTsKCQl9KTsKCX0sCgoJYmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHsKCQlyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7Cgl9LAoJdW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkgewoJCXJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7Cgl9LAoKCWxpdmU6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7CgkJalF1ZXJ5KCB0aGlzLmNvbnRleHQgKS5vbiggdHlwZXMsIHRoaXMuc2VsZWN0b3IsIGRhdGEsIGZuICk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoJZGllOiBmdW5jdGlvbiggdHlwZXMsIGZuICkgewoJCWpRdWVyeSggdGhpcy5jb250ZXh0ICkub2ZmKCB0eXBlcywgdGhpcy5zZWxlY3RvciB8fCAiKioiLCBmbiApOwoJCXJldHVybiB0aGlzOwoJfSwKCglkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7CgkJcmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTsKCX0sCgl1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHsKCQkvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApCgkJcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT0gMT8gdGhpcy5vZmYoIHNlbGVjdG9yLCAiKioiICkgOiB0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yLCBmbiApOwoJfSwKCgl0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHsKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQlqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApOwoJCX0pOwoJfSwKCXRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHsKCQlpZiAoIHRoaXNbMF0gKSB7CgkJCXJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpc1swXSwgdHJ1ZSApOwoJCX0KCX0sCgoJdG9nZ2xlOiBmdW5jdGlvbiggZm4gKSB7CgkJLy8gU2F2ZSByZWZlcmVuY2UgdG8gYXJndW1lbnRzIGZvciBhY2Nlc3MgaW4gY2xvc3VyZQoJCXZhciBhcmdzID0gYXJndW1lbnRzLAoJCQlndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrLAoJCQlpID0gMCwKCQkJdG9nZ2xlciA9IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCS8vIEZpZ3VyZSBvdXQgd2hpY2ggZnVuY3Rpb24gdG8gZXhlY3V0ZQoJCQkJdmFyIGxhc3RUb2dnbGUgPSAoIGpRdWVyeS5fZGF0YSggdGhpcywgImxhc3RUb2dnbGUiICsgZm4uZ3VpZCApIHx8IDAgKSAlIGk7CgkJCQlqUXVlcnkuX2RhdGEoIHRoaXMsICJsYXN0VG9nZ2xlIiArIGZuLmd1aWQsIGxhc3RUb2dnbGUgKyAxICk7CgoJCQkJLy8gTWFrZSBzdXJlIHRoYXQgY2xpY2tzIHN0b3AKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgoJCQkJLy8gYW5kIGV4ZWN1dGUgdGhlIGZ1bmN0aW9uCgkJCQlyZXR1cm4gYXJnc1sgbGFzdFRvZ2dsZSBdLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB8fCBmYWxzZTsKCQkJfTsKCgkJLy8gbGluayBhbGwgdGhlIGZ1bmN0aW9ucywgc28gYW55IG9mIHRoZW0gY2FuIHVuYmluZCB0aGlzIGNsaWNrIGhhbmRsZXIKCQl0b2dnbGVyLmd1aWQgPSBndWlkOwoJCXdoaWxlICggaSA8IGFyZ3MubGVuZ3RoICkgewoJCQlhcmdzWyBpKysgXS5ndWlkID0gZ3VpZDsKCQl9CgoJCXJldHVybiB0aGlzLmNsaWNrKCB0b2dnbGVyICk7Cgl9LAoKCWhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHsKCQlyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTsKCX0KfSk7CgpqUXVlcnkuZWFjaCggKCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayAiICsKCSJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSAiICsKCSJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51Iikuc3BsaXQoIiAiKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7CgoJLy8gSGFuZGxlIGV2ZW50IGJpbmRpbmcKCWpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkgewoJCWlmICggZm4gPT0gbnVsbCApIHsKCQkJZm4gPSBkYXRhOwoJCQlkYXRhID0gbnVsbDsKCQl9CgoJCXJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/CgkJCXRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOgoJCQl0aGlzLnRyaWdnZXIoIG5hbWUgKTsKCX07CgoJaWYgKCBqUXVlcnkuYXR0ckZuICkgewoJCWpRdWVyeS5hdHRyRm5bIG5hbWUgXSA9IHRydWU7Cgl9CgoJaWYgKCBya2V5RXZlbnQudGVzdCggbmFtZSApICkgewoJCWpRdWVyeS5ldmVudC5maXhIb29rc1sgbmFtZSBdID0galF1ZXJ5LmV2ZW50LmtleUhvb2tzOwoJfQoKCWlmICggcm1vdXNlRXZlbnQudGVzdCggbmFtZSApICkgewoJCWpRdWVyeS5ldmVudC5maXhIb29rc1sgbmFtZSBdID0galF1ZXJ5LmV2ZW50Lm1vdXNlSG9va3M7Cgl9Cn0pOwoKCgovKiEKICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUKICogIENvcHlyaWdodCAyMDExLCBUaGUgRG9qbyBGb3VuZGF0aW9uCiAqICBSZWxlYXNlZCB1bmRlciB0aGUgTUlULCBCU0QsIGFuZCBHUEwgTGljZW5zZXMuCiAqICBNb3JlIGluZm9ybWF0aW9uOiBodHRwOi8vc2l6emxlanMuY29tLwogKi8KKGZ1bmN0aW9uKCl7Cgp2YXIgY2h1bmtlciA9IC8oKD86XCgoPzpcKFteKCldK1wpfFteKCldKykrXCl8XFsoPzpcW1teXFtcXV0qXF18WyciXVteJyJdKlsnIl18W15cW1xdJyJdKykrXF18XFwufFteID4rfiwoXFtcXF0rKSt8Wz4rfl0pKFxzKixccyopPygoPzoufFxyfFxuKSopL2csCglleHBhbmRvID0gInNpemNhY2hlIiArIChNYXRoLnJhbmRvbSgpICsgJycpLnJlcGxhY2UoJy4nLCAnJyksCglkb25lID0gMCwKCXRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZywKCWhhc0R1cGxpY2F0ZSA9IGZhbHNlLAoJYmFzZUhhc0R1cGxpY2F0ZSA9IHRydWUsCglyQmFja3NsYXNoID0gL1xcL2csCglyUmV0dXJuID0gL1xyXG4vZywKCXJOb25Xb3JkID0gL1xXLzsKCi8vIEhlcmUgd2UgY2hlY2sgaWYgdGhlIEphdmFTY3JpcHQgZW5naW5lIGlzIHVzaW5nIHNvbWUgc29ydCBvZgovLyBvcHRpbWl6YXRpb24gd2hlcmUgaXQgZG9lcyBub3QgYWx3YXlzIGNhbGwgb3VyIGNvbXBhcmlzaW9uCi8vIGZ1bmN0aW9uLiBJZiB0aGF0IGlzIHRoZSBjYXNlLCBkaXNjYXJkIHRoZSBoYXNEdXBsaWNhdGUgdmFsdWUuCi8vICAgVGh1cyBmYXIgdGhhdCBpbmNsdWRlcyBHb29nbGUgQ2hyb21lLgpbMCwgMF0uc29ydChmdW5jdGlvbigpIHsKCWJhc2VIYXNEdXBsaWNhdGUgPSBmYWxzZTsKCXJldHVybiAwOwp9KTsKCnZhciBTaXp6bGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7CglyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTsKCWNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50OwoKCXZhciBvcmlnQ29udGV4dCA9IGNvbnRleHQ7CgoJaWYgKCBjb250ZXh0Lm5vZGVUeXBlICE9PSAxICYmIGNvbnRleHQubm9kZVR5cGUgIT09IDkgKSB7CgkJcmV0dXJuIFtdOwoJfQoKCWlmICggIXNlbGVjdG9yIHx8IHR5cGVvZiBzZWxlY3RvciAhPT0gInN0cmluZyIgKSB7CgkJcmV0dXJuIHJlc3VsdHM7Cgl9CgoJdmFyIG0sIHNldCwgY2hlY2tTZXQsIGV4dHJhLCByZXQsIGN1ciwgcG9wLCBpLAoJCXBydW5lID0gdHJ1ZSwKCQljb250ZXh0WE1MID0gU2l6emxlLmlzWE1MKCBjb250ZXh0ICksCgkJcGFydHMgPSBbXSwKCQlzb0ZhciA9IHNlbGVjdG9yOwoKCS8vIFJlc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgY2h1bmtlciByZWdleHAgKHN0YXJ0IGZyb20gaGVhZCkKCWRvIHsKCQljaHVua2VyLmV4ZWMoICIiICk7CgkJbSA9IGNodW5rZXIuZXhlYyggc29GYXIgKTsKCgkJaWYgKCBtICkgewoJCQlzb0ZhciA9IG1bM107CgoJCQlwYXJ0cy5wdXNoKCBtWzFdICk7CgoJCQlpZiAoIG1bMl0gKSB7CgkJCQlleHRyYSA9IG1bM107CgkJCQlicmVhazsKCQkJfQoJCX0KCX0gd2hpbGUgKCBtICk7CgoJaWYgKCBwYXJ0cy5sZW5ndGggPiAxICYmIG9yaWdQT1MuZXhlYyggc2VsZWN0b3IgKSApIHsKCgkJaWYgKCBwYXJ0cy5sZW5ndGggPT09IDIgJiYgRXhwci5yZWxhdGl2ZVsgcGFydHNbMF0gXSApIHsKCQkJc2V0ID0gcG9zUHJvY2VzcyggcGFydHNbMF0gKyBwYXJ0c1sxXSwgY29udGV4dCwgc2VlZCApOwoKCQl9IGVsc2UgewoJCQlzZXQgPSBFeHByLnJlbGF0aXZlWyBwYXJ0c1swXSBdID8KCQkJCVsgY29udGV4dCBdIDoKCQkJCVNpenpsZSggcGFydHMuc2hpZnQoKSwgY29udGV4dCApOwoKCQkJd2hpbGUgKCBwYXJ0cy5sZW5ndGggKSB7CgkJCQlzZWxlY3RvciA9IHBhcnRzLnNoaWZ0KCk7CgoJCQkJaWYgKCBFeHByLnJlbGF0aXZlWyBzZWxlY3RvciBdICkgewoJCQkJCXNlbGVjdG9yICs9IHBhcnRzLnNoaWZ0KCk7CgkJCQl9CgoJCQkJc2V0ID0gcG9zUHJvY2Vzcyggc2VsZWN0b3IsIHNldCwgc2VlZCApOwoJCQl9CgkJfQoKCX0gZWxzZSB7CgkJLy8gVGFrZSBhIHNob3J0Y3V0IGFuZCBzZXQgdGhlIGNvbnRleHQgaWYgdGhlIHJvb3Qgc2VsZWN0b3IgaXMgYW4gSUQKCQkvLyAoYnV0IG5vdCBpZiBpdCdsbCBiZSBmYXN0ZXIgaWYgdGhlIGlubmVyIHNlbGVjdG9yIGlzIGFuIElEKQoJCWlmICggIXNlZWQgJiYgcGFydHMubGVuZ3RoID4gMSAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmICFjb250ZXh0WE1MICYmCgkJCQlFeHByLm1hdGNoLklELnRlc3QocGFydHNbMF0pICYmICFFeHByLm1hdGNoLklELnRlc3QocGFydHNbcGFydHMubGVuZ3RoIC0gMV0pICkgewoKCQkJcmV0ID0gU2l6emxlLmZpbmQoIHBhcnRzLnNoaWZ0KCksIGNvbnRleHQsIGNvbnRleHRYTUwgKTsKCQkJY29udGV4dCA9IHJldC5leHByID8KCQkJCVNpenpsZS5maWx0ZXIoIHJldC5leHByLCByZXQuc2V0IClbMF0gOgoJCQkJcmV0LnNldFswXTsKCQl9CgoJCWlmICggY29udGV4dCApIHsKCQkJcmV0ID0gc2VlZCA/CgkJCQl7IGV4cHI6IHBhcnRzLnBvcCgpLCBzZXQ6IG1ha2VBcnJheShzZWVkKSB9IDoKCQkJCVNpenpsZS5maW5kKCBwYXJ0cy5wb3AoKSwgcGFydHMubGVuZ3RoID09PSAxICYmIChwYXJ0c1swXSA9PT0gIn4iIHx8IHBhcnRzWzBdID09PSAiKyIpICYmIGNvbnRleHQucGFyZW50Tm9kZSA/IGNvbnRleHQucGFyZW50Tm9kZSA6IGNvbnRleHQsIGNvbnRleHRYTUwgKTsKCgkJCXNldCA9IHJldC5leHByID8KCQkJCVNpenpsZS5maWx0ZXIoIHJldC5leHByLCByZXQuc2V0ICkgOgoJCQkJcmV0LnNldDsKCgkJCWlmICggcGFydHMubGVuZ3RoID4gMCApIHsKCQkJCWNoZWNrU2V0ID0gbWFrZUFycmF5KCBzZXQgKTsKCgkJCX0gZWxzZSB7CgkJCQlwcnVuZSA9IGZhbHNlOwoJCQl9CgoJCQl3aGlsZSAoIHBhcnRzLmxlbmd0aCApIHsKCQkJCWN1ciA9IHBhcnRzLnBvcCgpOwoJCQkJcG9wID0gY3VyOwoKCQkJCWlmICggIUV4cHIucmVsYXRpdmVbIGN1ciBdICkgewoJCQkJCWN1ciA9ICIiOwoJCQkJfSBlbHNlIHsKCQkJCQlwb3AgPSBwYXJ0cy5wb3AoKTsKCQkJCX0KCgkJCQlpZiAoIHBvcCA9PSBudWxsICkgewoJCQkJCXBvcCA9IGNvbnRleHQ7CgkJCQl9CgoJCQkJRXhwci5yZWxhdGl2ZVsgY3VyIF0oIGNoZWNrU2V0LCBwb3AsIGNvbnRleHRYTUwgKTsKCQkJfQoKCQl9IGVsc2UgewoJCQljaGVja1NldCA9IHBhcnRzID0gW107CgkJfQoJfQoKCWlmICggIWNoZWNrU2V0ICkgewoJCWNoZWNrU2V0ID0gc2V0OwoJfQoKCWlmICggIWNoZWNrU2V0ICkgewoJCVNpenpsZS5lcnJvciggY3VyIHx8IHNlbGVjdG9yICk7Cgl9CgoJaWYgKCB0b1N0cmluZy5jYWxsKGNoZWNrU2V0KSA9PT0gIltvYmplY3QgQXJyYXldIiApIHsKCQlpZiAoICFwcnVuZSApIHsKCQkJcmVzdWx0cy5wdXNoLmFwcGx5KCByZXN1bHRzLCBjaGVja1NldCApOwoKCQl9IGVsc2UgaWYgKCBjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDEgKSB7CgkJCWZvciAoIGkgPSAwOyBjaGVja1NldFtpXSAhPSBudWxsOyBpKysgKSB7CgkJCQlpZiAoIGNoZWNrU2V0W2ldICYmIChjaGVja1NldFtpXSA9PT0gdHJ1ZSB8fCBjaGVja1NldFtpXS5ub2RlVHlwZSA9PT0gMSAmJiBTaXp6bGUuY29udGFpbnMoY29udGV4dCwgY2hlY2tTZXRbaV0pKSApIHsKCQkJCQlyZXN1bHRzLnB1c2goIHNldFtpXSApOwoJCQkJfQoJCQl9CgoJCX0gZWxzZSB7CgkJCWZvciAoIGkgPSAwOyBjaGVja1NldFtpXSAhPSBudWxsOyBpKysgKSB7CgkJCQlpZiAoIGNoZWNrU2V0W2ldICYmIGNoZWNrU2V0W2ldLm5vZGVUeXBlID09PSAxICkgewoJCQkJCXJlc3VsdHMucHVzaCggc2V0W2ldICk7CgkJCQl9CgkJCX0KCQl9CgoJfSBlbHNlIHsKCQltYWtlQXJyYXkoIGNoZWNrU2V0LCByZXN1bHRzICk7Cgl9CgoJaWYgKCBleHRyYSApIHsKCQlTaXp6bGUoIGV4dHJhLCBvcmlnQ29udGV4dCwgcmVzdWx0cywgc2VlZCApOwoJCVNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7Cgl9CgoJcmV0dXJuIHJlc3VsdHM7Cn07CgpTaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkgewoJaWYgKCBzb3J0T3JkZXIgKSB7CgkJaGFzRHVwbGljYXRlID0gYmFzZUhhc0R1cGxpY2F0ZTsKCQlyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApOwoKCQlpZiAoIGhhc0R1cGxpY2F0ZSApIHsKCQkJZm9yICggdmFyIGkgPSAxOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKyApIHsKCQkJCWlmICggcmVzdWx0c1tpXSA9PT0gcmVzdWx0c1sgaSAtIDEgXSApIHsKCQkJCQlyZXN1bHRzLnNwbGljZSggaS0tLCAxICk7CgkJCQl9CgkJCX0KCQl9Cgl9CgoJcmV0dXJuIHJlc3VsdHM7Cn07CgpTaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBzZXQgKSB7CglyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBzZXQgKTsKfTsKClNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggbm9kZSwgZXhwciApIHsKCXJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIFtub2RlXSApLmxlbmd0aCA+IDA7Cn07CgpTaXp6bGUuZmluZCA9IGZ1bmN0aW9uKCBleHByLCBjb250ZXh0LCBpc1hNTCApIHsKCXZhciBzZXQsIGksIGxlbiwgbWF0Y2gsIHR5cGUsIGxlZnQ7CgoJaWYgKCAhZXhwciApIHsKCQlyZXR1cm4gW107Cgl9CgoJZm9yICggaSA9IDAsIGxlbiA9IEV4cHIub3JkZXIubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7CgkJdHlwZSA9IEV4cHIub3JkZXJbaV07CgoJCWlmICggKG1hdGNoID0gRXhwci5sZWZ0TWF0Y2hbIHR5cGUgXS5leGVjKCBleHByICkpICkgewoJCQlsZWZ0ID0gbWF0Y2hbMV07CgkJCW1hdGNoLnNwbGljZSggMSwgMSApOwoKCQkJaWYgKCBsZWZ0LnN1YnN0ciggbGVmdC5sZW5ndGggLSAxICkgIT09ICJcXCIgKSB7CgkJCQltYXRjaFsxXSA9IChtYXRjaFsxXSB8fCAiIikucmVwbGFjZSggckJhY2tzbGFzaCwgIiIgKTsKCQkJCXNldCA9IEV4cHIuZmluZFsgdHlwZSBdKCBtYXRjaCwgY29udGV4dCwgaXNYTUwgKTsKCgkJCQlpZiAoIHNldCAhPSBudWxsICkgewoJCQkJCWV4cHIgPSBleHByLnJlcGxhY2UoIEV4cHIubWF0Y2hbIHR5cGUgXSwgIiIgKTsKCQkJCQlicmVhazsKCQkJCX0KCQkJfQoJCX0KCX0KCglpZiAoICFzZXQgKSB7CgkJc2V0ID0gdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09ICJ1bmRlZmluZWQiID8KCQkJY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggIioiICkgOgoJCQlbXTsKCX0KCglyZXR1cm4geyBzZXQ6IHNldCwgZXhwcjogZXhwciB9Owp9OwoKU2l6emxlLmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBzZXQsIGlucGxhY2UsIG5vdCApIHsKCXZhciBtYXRjaCwgYW55Rm91bmQsCgkJdHlwZSwgZm91bmQsIGl0ZW0sIGZpbHRlciwgbGVmdCwKCQlpLCBwYXNzLAoJCW9sZCA9IGV4cHIsCgkJcmVzdWx0ID0gW10sCgkJY3VyTG9vcCA9IHNldCwKCQlpc1hNTEZpbHRlciA9IHNldCAmJiBzZXRbMF0gJiYgU2l6emxlLmlzWE1MKCBzZXRbMF0gKTsKCgl3aGlsZSAoIGV4cHIgJiYgc2V0Lmxlbmd0aCApIHsKCQlmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkgewoJCQlpZiAoIChtYXRjaCA9IEV4cHIubGVmdE1hdGNoWyB0eXBlIF0uZXhlYyggZXhwciApKSAhPSBudWxsICYmIG1hdGNoWzJdICkgewoJCQkJZmlsdGVyID0gRXhwci5maWx0ZXJbIHR5cGUgXTsKCQkJCWxlZnQgPSBtYXRjaFsxXTsKCgkJCQlhbnlGb3VuZCA9IGZhbHNlOwoKCQkJCW1hdGNoLnNwbGljZSgxLDEpOwoKCQkJCWlmICggbGVmdC5zdWJzdHIoIGxlZnQubGVuZ3RoIC0gMSApID09PSAiXFwiICkgewoJCQkJCWNvbnRpbnVlOwoJCQkJfQoKCQkJCWlmICggY3VyTG9vcCA9PT0gcmVzdWx0ICkgewoJCQkJCXJlc3VsdCA9IFtdOwoJCQkJfQoKCQkJCWlmICggRXhwci5wcmVGaWx0ZXJbIHR5cGUgXSApIHsKCQkJCQltYXRjaCA9IEV4cHIucHJlRmlsdGVyWyB0eXBlIF0oIG1hdGNoLCBjdXJMb29wLCBpbnBsYWNlLCByZXN1bHQsIG5vdCwgaXNYTUxGaWx0ZXIgKTsKCgkJCQkJaWYgKCAhbWF0Y2ggKSB7CgkJCQkJCWFueUZvdW5kID0gZm91bmQgPSB0cnVlOwoKCQkJCQl9IGVsc2UgaWYgKCBtYXRjaCA9PT0gdHJ1ZSApIHsKCQkJCQkJY29udGludWU7CgkJCQkJfQoJCQkJfQoKCQkJCWlmICggbWF0Y2ggKSB7CgkJCQkJZm9yICggaSA9IDA7IChpdGVtID0gY3VyTG9vcFtpXSkgIT0gbnVsbDsgaSsrICkgewoJCQkJCQlpZiAoIGl0ZW0gKSB7CgkJCQkJCQlmb3VuZCA9IGZpbHRlciggaXRlbSwgbWF0Y2gsIGksIGN1ckxvb3AgKTsKCQkJCQkJCXBhc3MgPSBub3QgXiBmb3VuZDsKCgkJCQkJCQlpZiAoIGlucGxhY2UgJiYgZm91bmQgIT0gbnVsbCApIHsKCQkJCQkJCQlpZiAoIHBhc3MgKSB7CgkJCQkJCQkJCWFueUZvdW5kID0gdHJ1ZTsKCgkJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQkJY3VyTG9vcFtpXSA9IGZhbHNlOwoJCQkJCQkJCX0KCgkJCQkJCQl9IGVsc2UgaWYgKCBwYXNzICkgewoJCQkJCQkJCXJlc3VsdC5wdXNoKCBpdGVtICk7CgkJCQkJCQkJYW55Rm91bmQgPSB0cnVlOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfQoJCQkJfQoKCQkJCWlmICggZm91bmQgIT09IHVuZGVmaW5lZCApIHsKCQkJCQlpZiAoICFpbnBsYWNlICkgewoJCQkJCQljdXJMb29wID0gcmVzdWx0OwoJCQkJCX0KCgkJCQkJZXhwciA9IGV4cHIucmVwbGFjZSggRXhwci5tYXRjaFsgdHlwZSBdLCAiIiApOwoKCQkJCQlpZiAoICFhbnlGb3VuZCApIHsKCQkJCQkJcmV0dXJuIFtdOwoJCQkJCX0KCgkJCQkJYnJlYWs7CgkJCQl9CgkJCX0KCQl9CgoJCS8vIEltcHJvcGVyIGV4cHJlc3Npb24KCQlpZiAoIGV4cHIgPT09IG9sZCApIHsKCQkJaWYgKCBhbnlGb3VuZCA9PSBudWxsICkgewoJCQkJU2l6emxlLmVycm9yKCBleHByICk7CgoJCQl9IGVsc2UgewoJCQkJYnJlYWs7CgkJCX0KCQl9CgoJCW9sZCA9IGV4cHI7Cgl9CgoJcmV0dXJuIGN1ckxvb3A7Cn07CgpTaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkgewoJdGhyb3cgbmV3IEVycm9yKCAiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogIiArIG1zZyApOwp9OwoKLyoqCiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJlaXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzCiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbQogKi8KdmFyIGdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkgewogICAgdmFyIGksIG5vZGUsCgkJbm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlLAoJCXJldCA9ICIiOwoKCWlmICggbm9kZVR5cGUgKSB7CgkJaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7CgkJCS8vIFVzZSB0ZXh0Q29udGVudCB8fCBpbm5lclRleHQgZm9yIGVsZW1lbnRzCgkJCWlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09ICdzdHJpbmcnICkgewoJCQkJcmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7CgkJCX0gZWxzZSBpZiAoIHR5cGVvZiBlbGVtLmlubmVyVGV4dCA9PT0gJ3N0cmluZycgKSB7CgkJCQkvLyBSZXBsYWNlIElFJ3MgY2FycmlhZ2UgcmV0dXJucwoJCQkJcmV0dXJuIGVsZW0uaW5uZXJUZXh0LnJlcGxhY2UoIHJSZXR1cm4sICcnICk7CgkJCX0gZWxzZSB7CgkJCQkvLyBUcmF2ZXJzZSBpdCdzIGNoaWxkcmVuCgkJCQlmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZykgewoJCQkJCXJldCArPSBnZXRUZXh0KCBlbGVtICk7CgkJCQl9CgkJCX0KCQl9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHsKCQkJcmV0dXJuIGVsZW0ubm9kZVZhbHVlOwoJCX0KCX0gZWxzZSB7CgoJCS8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5CgkJZm9yICggaSA9IDA7IChub2RlID0gZWxlbVtpXSk7IGkrKyApIHsKCQkJLy8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXMKCQkJaWYgKCBub2RlLm5vZGVUeXBlICE9PSA4ICkgewoJCQkJcmV0ICs9IGdldFRleHQoIG5vZGUgKTsKCQkJfQoJCX0KCX0KCXJldHVybiByZXQ7Cn07Cgp2YXIgRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7CglvcmRlcjogWyAiSUQiLCAiTkFNRSIsICJUQUciIF0sCgoJbWF0Y2g6IHsKCQlJRDogLyMoKD86W1x3XHUwMGMwLVx1RkZGRlwtXXxcXC4pKykvLAoJCUNMQVNTOiAvXC4oKD86W1x3XHUwMGMwLVx1RkZGRlwtXXxcXC4pKykvLAoJCU5BTUU6IC9cW25hbWU9WyciXSooKD86W1x3XHUwMGMwLVx1RkZGRlwtXXxcXC4pKylbJyJdKlxdLywKCQlBVFRSOiAvXFtccyooKD86W1x3XHUwMGMwLVx1RkZGRlwtXXxcXC4pKylccyooPzooXFM/PSlccyooPzooWyciXSkoLio/KVwzfCgjPyg/Oltcd1x1MDBjMC1cdUZGRkZcLV18XFwuKSopfCl8KVxzKlxdLywKCQlUQUc6IC9eKCg/Oltcd1x1MDBjMC1cdUZGRkZcKlwtXXxcXC4pKykvLAoJCUNISUxEOiAvOihvbmx5fG50aHxsYXN0fGZpcnN0KS1jaGlsZCg/OlwoXHMqKGV2ZW58b2RkfCg/OlsrXC1dP1xkK3woPzpbK1wtXT9cZCopP25ccyooPzpbK1wtXVxzKlxkKyk/KSlccypcKSk/LywKCQlQT1M6IC86KG50aHxlcXxndHxsdHxmaXJzdHxsYXN0fGV2ZW58b2RkKSg/OlwoKFxkKilcKSk/KD89W15cLV18JCkvLAoJCVBTRVVETzogLzooKD86W1x3XHUwMGMwLVx1RkZGRlwtXXxcXC4pKykoPzpcKChbJyJdPykoKD86XChbXlwpXStcKXxbXlwoXCldKikrKVwyXCkpPy8KCX0sCgoJbGVmdE1hdGNoOiB7fSwKCglhdHRyTWFwOiB7CgkJImNsYXNzIjogImNsYXNzTmFtZSIsCgkJImZvciI6ICJodG1sRm9yIgoJfSwKCglhdHRySGFuZGxlOiB7CgkJaHJlZjogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggImhyZWYiICk7CgkJfSwKCQl0eXBlOiBmdW5jdGlvbiggZWxlbSApIHsKCQkJcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCAidHlwZSIgKTsKCQl9Cgl9LAoKCXJlbGF0aXZlOiB7CgkJIisiOiBmdW5jdGlvbihjaGVja1NldCwgcGFydCl7CgkJCXZhciBpc1BhcnRTdHIgPSB0eXBlb2YgcGFydCA9PT0gInN0cmluZyIsCgkJCQlpc1RhZyA9IGlzUGFydFN0ciAmJiAhck5vbldvcmQudGVzdCggcGFydCApLAoJCQkJaXNQYXJ0U3RyTm90VGFnID0gaXNQYXJ0U3RyICYmICFpc1RhZzsKCgkJCWlmICggaXNUYWcgKSB7CgkJCQlwYXJ0ID0gcGFydC50b0xvd2VyQ2FzZSgpOwoJCQl9CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGVja1NldC5sZW5ndGgsIGVsZW07IGkgPCBsOyBpKysgKSB7CgkJCQlpZiAoIChlbGVtID0gY2hlY2tTZXRbaV0pICkgewoJCQkJCXdoaWxlICggKGVsZW0gPSBlbGVtLnByZXZpb3VzU2libGluZykgJiYgZWxlbS5ub2RlVHlwZSAhPT0gMSApIHt9CgoJCQkJCWNoZWNrU2V0W2ldID0gaXNQYXJ0U3RyTm90VGFnIHx8IGVsZW0gJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBwYXJ0ID8KCQkJCQkJZWxlbSB8fCBmYWxzZSA6CgkJCQkJCWVsZW0gPT09IHBhcnQ7CgkJCQl9CgkJCX0KCgkJCWlmICggaXNQYXJ0U3RyTm90VGFnICkgewoJCQkJU2l6emxlLmZpbHRlciggcGFydCwgY2hlY2tTZXQsIHRydWUgKTsKCQkJfQoJCX0sCgoJCSI+IjogZnVuY3Rpb24oIGNoZWNrU2V0LCBwYXJ0ICkgewoJCQl2YXIgZWxlbSwKCQkJCWlzUGFydFN0ciA9IHR5cGVvZiBwYXJ0ID09PSAic3RyaW5nIiwKCQkJCWkgPSAwLAoJCQkJbCA9IGNoZWNrU2V0Lmxlbmd0aDsKCgkJCWlmICggaXNQYXJ0U3RyICYmICFyTm9uV29yZC50ZXN0KCBwYXJ0ICkgKSB7CgkJCQlwYXJ0ID0gcGFydC50b0xvd2VyQ2FzZSgpOwoKCQkJCWZvciAoIDsgaSA8IGw7IGkrKyApIHsKCQkJCQllbGVtID0gY2hlY2tTZXRbaV07CgoJCQkJCWlmICggZWxlbSApIHsKCQkJCQkJdmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTsKCQkJCQkJY2hlY2tTZXRbaV0gPSBwYXJlbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gcGFydCA/IHBhcmVudCA6IGZhbHNlOwoJCQkJCX0KCQkJCX0KCgkJCX0gZWxzZSB7CgkJCQlmb3IgKCA7IGkgPCBsOyBpKysgKSB7CgkJCQkJZWxlbSA9IGNoZWNrU2V0W2ldOwoKCQkJCQlpZiAoIGVsZW0gKSB7CgkJCQkJCWNoZWNrU2V0W2ldID0gaXNQYXJ0U3RyID8KCQkJCQkJCWVsZW0ucGFyZW50Tm9kZSA6CgkJCQkJCQllbGVtLnBhcmVudE5vZGUgPT09IHBhcnQ7CgkJCQkJfQoJCQkJfQoKCQkJCWlmICggaXNQYXJ0U3RyICkgewoJCQkJCVNpenpsZS5maWx0ZXIoIHBhcnQsIGNoZWNrU2V0LCB0cnVlICk7CgkJCQl9CgkJCX0KCQl9LAoKCQkiIjogZnVuY3Rpb24oY2hlY2tTZXQsIHBhcnQsIGlzWE1MKXsKCQkJdmFyIG5vZGVDaGVjaywKCQkJCWRvbmVOYW1lID0gZG9uZSsrLAoJCQkJY2hlY2tGbiA9IGRpckNoZWNrOwoKCQkJaWYgKCB0eXBlb2YgcGFydCA9PT0gInN0cmluZyIgJiYgIXJOb25Xb3JkLnRlc3QoIHBhcnQgKSApIHsKCQkJCXBhcnQgPSBwYXJ0LnRvTG93ZXJDYXNlKCk7CgkJCQlub2RlQ2hlY2sgPSBwYXJ0OwoJCQkJY2hlY2tGbiA9IGRpck5vZGVDaGVjazsKCQkJfQoKCQkJY2hlY2tGbiggInBhcmVudE5vZGUiLCBwYXJ0LCBkb25lTmFtZSwgY2hlY2tTZXQsIG5vZGVDaGVjaywgaXNYTUwgKTsKCQl9LAoKCQkifiI6IGZ1bmN0aW9uKCBjaGVja1NldCwgcGFydCwgaXNYTUwgKSB7CgkJCXZhciBub2RlQ2hlY2ssCgkJCQlkb25lTmFtZSA9IGRvbmUrKywKCQkJCWNoZWNrRm4gPSBkaXJDaGVjazsKCgkJCWlmICggdHlwZW9mIHBhcnQgPT09ICJzdHJpbmciICYmICFyTm9uV29yZC50ZXN0KCBwYXJ0ICkgKSB7CgkJCQlwYXJ0ID0gcGFydC50b0xvd2VyQ2FzZSgpOwoJCQkJbm9kZUNoZWNrID0gcGFydDsKCQkJCWNoZWNrRm4gPSBkaXJOb2RlQ2hlY2s7CgkJCX0KCgkJCWNoZWNrRm4oICJwcmV2aW91c1NpYmxpbmciLCBwYXJ0LCBkb25lTmFtZSwgY2hlY2tTZXQsIG5vZGVDaGVjaywgaXNYTUwgKTsKCQl9Cgl9LAoKCWZpbmQ6IHsKCQlJRDogZnVuY3Rpb24oIG1hdGNoLCBjb250ZXh0LCBpc1hNTCApIHsKCQkJaWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gInVuZGVmaW5lZCIgJiYgIWlzWE1MICkgewoJCQkJdmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKG1hdGNoWzFdKTsKCQkJCS8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zCgkJCQkvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzCgkJCQlyZXR1cm4gbSAmJiBtLnBhcmVudE5vZGUgPyBbbV0gOiBbXTsKCQkJfQoJCX0sCgoJCU5BTUU6IGZ1bmN0aW9uKCBtYXRjaCwgY29udGV4dCApIHsKCQkJaWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSAhPT0gInVuZGVmaW5lZCIgKSB7CgkJCQl2YXIgcmV0ID0gW10sCgkJCQkJcmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIG1hdGNoWzFdICk7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBsID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CgkJCQkJaWYgKCByZXN1bHRzW2ldLmdldEF0dHJpYnV0ZSgibmFtZSIpID09PSBtYXRjaFsxXSApIHsKCQkJCQkJcmV0LnB1c2goIHJlc3VsdHNbaV0gKTsKCQkJCQl9CgkJCQl9CgoJCQkJcmV0dXJuIHJldC5sZW5ndGggPT09IDAgPyBudWxsIDogcmV0OwoJCQl9CgkJfSwKCgkJVEFHOiBmdW5jdGlvbiggbWF0Y2gsIGNvbnRleHQgKSB7CgkJCWlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09ICJ1bmRlZmluZWQiICkgewoJCQkJcmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIG1hdGNoWzFdICk7CgkJCX0KCQl9Cgl9LAoJcHJlRmlsdGVyOiB7CgkJQ0xBU1M6IGZ1bmN0aW9uKCBtYXRjaCwgY3VyTG9vcCwgaW5wbGFjZSwgcmVzdWx0LCBub3QsIGlzWE1MICkgewoJCQltYXRjaCA9ICIgIiArIG1hdGNoWzFdLnJlcGxhY2UoIHJCYWNrc2xhc2gsICIiICkgKyAiICI7CgoJCQlpZiAoIGlzWE1MICkgewoJCQkJcmV0dXJuIG1hdGNoOwoJCQl9CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGVsZW07IChlbGVtID0gY3VyTG9vcFtpXSkgIT0gbnVsbDsgaSsrICkgewoJCQkJaWYgKCBlbGVtICkgewoJCQkJCWlmICggbm90IF4gKGVsZW0uY2xhc3NOYW1lICYmICgiICIgKyBlbGVtLmNsYXNzTmFtZSArICIgIikucmVwbGFjZSgvW1x0XG5ccl0vZywgIiAiKS5pbmRleE9mKG1hdGNoKSA+PSAwKSApIHsKCQkJCQkJaWYgKCAhaW5wbGFjZSApIHsKCQkJCQkJCXJlc3VsdC5wdXNoKCBlbGVtICk7CgkJCQkJCX0KCgkJCQkJfSBlbHNlIGlmICggaW5wbGFjZSApIHsKCQkJCQkJY3VyTG9vcFtpXSA9IGZhbHNlOwoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJcmV0dXJuIGZhbHNlOwoJCX0sCgoJCUlEOiBmdW5jdGlvbiggbWF0Y2ggKSB7CgkJCXJldHVybiBtYXRjaFsxXS5yZXBsYWNlKCByQmFja3NsYXNoLCAiIiApOwoJCX0sCgoJCVRBRzogZnVuY3Rpb24oIG1hdGNoLCBjdXJMb29wICkgewoJCQlyZXR1cm4gbWF0Y2hbMV0ucmVwbGFjZSggckJhY2tzbGFzaCwgIiIgKS50b0xvd2VyQ2FzZSgpOwoJCX0sCgoJCUNISUxEOiBmdW5jdGlvbiggbWF0Y2ggKSB7CgkJCWlmICggbWF0Y2hbMV0gPT09ICJudGgiICkgewoJCQkJaWYgKCAhbWF0Y2hbMl0gKSB7CgkJCQkJU2l6emxlLmVycm9yKCBtYXRjaFswXSApOwoJCQkJfQoKCQkJCW1hdGNoWzJdID0gbWF0Y2hbMl0ucmVwbGFjZSgvXlwrfFxzKi9nLCAnJyk7CgoJCQkJLy8gcGFyc2UgZXF1YXRpb25zIGxpa2UgJ2V2ZW4nLCAnb2RkJywgJzUnLCAnMm4nLCAnM24rMicsICc0bi0xJywgJy1uKzYnCgkJCQl2YXIgdGVzdCA9IC8oLT8pKFxkKikoPzpuKFsrXC1dP1xkKikpPy8uZXhlYygKCQkJCQltYXRjaFsyXSA9PT0gImV2ZW4iICYmICIybiIgfHwgbWF0Y2hbMl0gPT09ICJvZGQiICYmICIybisxIiB8fAoJCQkJCSEvXEQvLnRlc3QoIG1hdGNoWzJdICkgJiYgIjBuKyIgKyBtYXRjaFsyXSB8fCBtYXRjaFsyXSk7CgoJCQkJLy8gY2FsY3VsYXRlIHRoZSBudW1iZXJzIChmaXJzdCluKyhsYXN0KSBpbmNsdWRpbmcgaWYgdGhleSBhcmUgbmVnYXRpdmUKCQkJCW1hdGNoWzJdID0gKHRlc3RbMV0gKyAodGVzdFsyXSB8fCAxKSkgLSAwOwoJCQkJbWF0Y2hbM10gPSB0ZXN0WzNdIC0gMDsKCQkJfQoJCQllbHNlIGlmICggbWF0Y2hbMl0gKSB7CgkJCQlTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7CgkJCX0KCgkJCS8vIFRPRE86IE1vdmUgdG8gbm9ybWFsIGNhY2hpbmcgc3lzdGVtCgkJCW1hdGNoWzBdID0gZG9uZSsrOwoKCQkJcmV0dXJuIG1hdGNoOwoJCX0sCgoJCUFUVFI6IGZ1bmN0aW9uKCBtYXRjaCwgY3VyTG9vcCwgaW5wbGFjZSwgcmVzdWx0LCBub3QsIGlzWE1MICkgewoJCQl2YXIgbmFtZSA9IG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggckJhY2tzbGFzaCwgIiIgKTsKCgkJCWlmICggIWlzWE1MICYmIEV4cHIuYXR0ck1hcFtuYW1lXSApIHsKCQkJCW1hdGNoWzFdID0gRXhwci5hdHRyTWFwW25hbWVdOwoJCQl9CgoJCQkvLyBIYW5kbGUgaWYgYW4gdW4tcXVvdGVkIHZhbHVlIHdhcyB1c2VkCgkJCW1hdGNoWzRdID0gKCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCAiIiApLnJlcGxhY2UoIHJCYWNrc2xhc2gsICIiICk7CgoJCQlpZiAoIG1hdGNoWzJdID09PSAifj0iICkgewoJCQkJbWF0Y2hbNF0gPSAiICIgKyBtYXRjaFs0XSArICIgIjsKCQkJfQoKCQkJcmV0dXJuIG1hdGNoOwoJCX0sCgoJCVBTRVVETzogZnVuY3Rpb24oIG1hdGNoLCBjdXJMb29wLCBpbnBsYWNlLCByZXN1bHQsIG5vdCApIHsKCQkJaWYgKCBtYXRjaFsxXSA9PT0gIm5vdCIgKSB7CgkJCQkvLyBJZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBjb21wbGV4IGV4cHJlc3Npb24sIG9yIGEgc2ltcGxlIG9uZQoJCQkJaWYgKCAoIGNodW5rZXIuZXhlYyhtYXRjaFszXSkgfHwgIiIgKS5sZW5ndGggPiAxIHx8IC9eXHcvLnRlc3QobWF0Y2hbM10pICkgewoJCQkJCW1hdGNoWzNdID0gU2l6emxlKG1hdGNoWzNdLCBudWxsLCBudWxsLCBjdXJMb29wKTsKCgkJCQl9IGVsc2UgewoJCQkJCXZhciByZXQgPSBTaXp6bGUuZmlsdGVyKG1hdGNoWzNdLCBjdXJMb29wLCBpbnBsYWNlLCB0cnVlIF4gbm90KTsKCgkJCQkJaWYgKCAhaW5wbGFjZSApIHsKCQkJCQkJcmVzdWx0LnB1c2guYXBwbHkoIHJlc3VsdCwgcmV0ICk7CgkJCQkJfQoKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgoJCQl9IGVsc2UgaWYgKCBFeHByLm1hdGNoLlBPUy50ZXN0KCBtYXRjaFswXSApIHx8IEV4cHIubWF0Y2guQ0hJTEQudGVzdCggbWF0Y2hbMF0gKSApIHsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgoJCQlyZXR1cm4gbWF0Y2g7CgkJfSwKCgkJUE9TOiBmdW5jdGlvbiggbWF0Y2ggKSB7CgkJCW1hdGNoLnVuc2hpZnQoIHRydWUgKTsKCgkJCXJldHVybiBtYXRjaDsKCQl9Cgl9LAoKCWZpbHRlcnM6IHsKCQllbmFibGVkOiBmdW5jdGlvbiggZWxlbSApIHsKCQkJcmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICYmIGVsZW0udHlwZSAhPT0gImhpZGRlbiI7CgkJfSwKCgkJZGlzYWJsZWQ6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQlyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTsKCQl9LAoKCQljaGVja2VkOiBmdW5jdGlvbiggZWxlbSApIHsKCQkJcmV0dXJuIGVsZW0uY2hlY2tlZCA9PT0gdHJ1ZTsKCQl9LAoKCQlzZWxlY3RlZDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCS8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHQKCQkJLy8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseQoJCQlpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHsKCQkJCWVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4OwoJCQl9CgoJCQlyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTsKCQl9LAoKCQlwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQlyZXR1cm4gISFlbGVtLmZpcnN0Q2hpbGQ7CgkJfSwKCgkJZW1wdHk6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQlyZXR1cm4gIWVsZW0uZmlyc3RDaGlsZDsKCQl9LAoKCQloYXM6IGZ1bmN0aW9uKCBlbGVtLCBpLCBtYXRjaCApIHsKCQkJcmV0dXJuICEhU2l6emxlKCBtYXRjaFszXSwgZWxlbSApLmxlbmd0aDsKCQl9LAoKCQloZWFkZXI6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQlyZXR1cm4gKC9oXGQvaSkudGVzdCggZWxlbS5ub2RlTmFtZSApOwoJCX0sCgoJCXRleHQ6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQl2YXIgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCAidHlwZSIgKSwgdHlwZSA9IGVsZW0udHlwZTsKCQkJLy8gSUU2IGFuZCA3IHdpbGwgbWFwIGVsZW0udHlwZSB0byAndGV4dCcgZm9yIG5ldyBIVE1MNSB0eXBlcyAoc2VhcmNoLCBldGMpCgkJCS8vIHVzZSBnZXRBdHRyaWJ1dGUgaW5zdGVhZCB0byB0ZXN0IHRoaXMgY2FzZQoJCQlyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAiaW5wdXQiICYmICJ0ZXh0IiA9PT0gdHlwZSAmJiAoIGF0dHIgPT09IHR5cGUgfHwgYXR0ciA9PT0gbnVsbCApOwoJCX0sCgoJCXJhZGlvOiBmdW5jdGlvbiggZWxlbSApIHsKCQkJcmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gImlucHV0IiAmJiAicmFkaW8iID09PSBlbGVtLnR5cGU7CgkJfSwKCgkJY2hlY2tib3g6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQlyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAiaW5wdXQiICYmICJjaGVja2JveCIgPT09IGVsZW0udHlwZTsKCQl9LAoKCQlmaWxlOiBmdW5jdGlvbiggZWxlbSApIHsKCQkJcmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gImlucHV0IiAmJiAiZmlsZSIgPT09IGVsZW0udHlwZTsKCQl9LAoKCQlwYXNzd29yZDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJpbnB1dCIgJiYgInBhc3N3b3JkIiA9PT0gZWxlbS50eXBlOwoJCX0sCgoJCXN1Ym1pdDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwoJCQlyZXR1cm4gKG5hbWUgPT09ICJpbnB1dCIgfHwgbmFtZSA9PT0gImJ1dHRvbiIpICYmICJzdWJtaXQiID09PSBlbGVtLnR5cGU7CgkJfSwKCgkJaW1hZ2U6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQlyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAiaW5wdXQiICYmICJpbWFnZSIgPT09IGVsZW0udHlwZTsKCQl9LAoKCQlyZXNldDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwoJCQlyZXR1cm4gKG5hbWUgPT09ICJpbnB1dCIgfHwgbmFtZSA9PT0gImJ1dHRvbiIpICYmICJyZXNldCIgPT09IGVsZW0udHlwZTsKCQl9LAoKCQlidXR0b246IGZ1bmN0aW9uKCBlbGVtICkgewoJCQl2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCQkJcmV0dXJuIG5hbWUgPT09ICJpbnB1dCIgJiYgImJ1dHRvbiIgPT09IGVsZW0udHlwZSB8fCBuYW1lID09PSAiYnV0dG9uIjsKCQl9LAoKCQlpbnB1dDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXJldHVybiAoL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24vaSkudGVzdCggZWxlbS5ub2RlTmFtZSApOwoJCX0sCgoJCWZvY3VzOiBmdW5jdGlvbiggZWxlbSApIHsKCQkJcmV0dXJuIGVsZW0gPT09IGVsZW0ub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50OwoJCX0KCX0sCglzZXRGaWx0ZXJzOiB7CgkJZmlyc3Q6IGZ1bmN0aW9uKCBlbGVtLCBpICkgewoJCQlyZXR1cm4gaSA9PT0gMDsKCQl9LAoKCQlsYXN0OiBmdW5jdGlvbiggZWxlbSwgaSwgbWF0Y2gsIGFycmF5ICkgewoJCQlyZXR1cm4gaSA9PT0gYXJyYXkubGVuZ3RoIC0gMTsKCQl9LAoKCQlldmVuOiBmdW5jdGlvbiggZWxlbSwgaSApIHsKCQkJcmV0dXJuIGkgJSAyID09PSAwOwoJCX0sCgoJCW9kZDogZnVuY3Rpb24oIGVsZW0sIGkgKSB7CgkJCXJldHVybiBpICUgMiA9PT0gMTsKCQl9LAoKCQlsdDogZnVuY3Rpb24oIGVsZW0sIGksIG1hdGNoICkgewoJCQlyZXR1cm4gaSA8IG1hdGNoWzNdIC0gMDsKCQl9LAoKCQlndDogZnVuY3Rpb24oIGVsZW0sIGksIG1hdGNoICkgewoJCQlyZXR1cm4gaSA+IG1hdGNoWzNdIC0gMDsKCQl9LAoKCQludGg6IGZ1bmN0aW9uKCBlbGVtLCBpLCBtYXRjaCApIHsKCQkJcmV0dXJuIG1hdGNoWzNdIC0gMCA9PT0gaTsKCQl9LAoKCQllcTogZnVuY3Rpb24oIGVsZW0sIGksIG1hdGNoICkgewoJCQlyZXR1cm4gbWF0Y2hbM10gLSAwID09PSBpOwoJCX0KCX0sCglmaWx0ZXI6IHsKCQlQU0VVRE86IGZ1bmN0aW9uKCBlbGVtLCBtYXRjaCwgaSwgYXJyYXkgKSB7CgkJCXZhciBuYW1lID0gbWF0Y2hbMV0sCgkJCQlmaWx0ZXIgPSBFeHByLmZpbHRlcnNbIG5hbWUgXTsKCgkJCWlmICggZmlsdGVyICkgewoJCQkJcmV0dXJuIGZpbHRlciggZWxlbSwgaSwgbWF0Y2gsIGFycmF5ICk7CgoJCQl9IGVsc2UgaWYgKCBuYW1lID09PSAiY29udGFpbnMiICkgewoJCQkJcmV0dXJuIChlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoWyBlbGVtIF0pIHx8ICIiKS5pbmRleE9mKG1hdGNoWzNdKSA+PSAwOwoKCQkJfSBlbHNlIGlmICggbmFtZSA9PT0gIm5vdCIgKSB7CgkJCQl2YXIgbm90ID0gbWF0Y2hbM107CgoJCQkJZm9yICggdmFyIGogPSAwLCBsID0gbm90Lmxlbmd0aDsgaiA8IGw7IGorKyApIHsKCQkJCQlpZiAoIG5vdFtqXSA9PT0gZWxlbSApIHsKCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCX0KCQkJCX0KCgkJCQlyZXR1cm4gdHJ1ZTsKCgkJCX0gZWxzZSB7CgkJCQlTaXp6bGUuZXJyb3IoIG5hbWUgKTsKCQkJfQoJCX0sCgoJCUNISUxEOiBmdW5jdGlvbiggZWxlbSwgbWF0Y2ggKSB7CgkJCXZhciBmaXJzdCwgbGFzdCwKCQkJCWRvbmVOYW1lLCBwYXJlbnQsIGNhY2hlLAoJCQkJY291bnQsIGRpZmYsCgkJCQl0eXBlID0gbWF0Y2hbMV0sCgkJCQlub2RlID0gZWxlbTsKCgkJCXN3aXRjaCAoIHR5cGUgKSB7CgkJCQljYXNlICJvbmx5IjoKCQkJCWNhc2UgImZpcnN0IjoKCQkJCQl3aGlsZSAoIChub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmcpICkgewoJCQkJCQlpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7CgkJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCWlmICggdHlwZSA9PT0gImZpcnN0IiApIHsKCQkJCQkJcmV0dXJuIHRydWU7CgkJCQkJfQoKCQkJCQlub2RlID0gZWxlbTsKCgkJCQkJLyogZmFsbHMgdGhyb3VnaCAqLwoJCQkJY2FzZSAibGFzdCI6CgkJCQkJd2hpbGUgKCAobm9kZSA9IG5vZGUubmV4dFNpYmxpbmcpICkgewoJCQkJCQlpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7CgkJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCXJldHVybiB0cnVlOwoKCQkJCWNhc2UgIm50aCI6CgkJCQkJZmlyc3QgPSBtYXRjaFsyXTsKCQkJCQlsYXN0ID0gbWF0Y2hbM107CgoJCQkJCWlmICggZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCApIHsKCQkJCQkJcmV0dXJuIHRydWU7CgkJCQkJfQoKCQkJCQlkb25lTmFtZSA9IG1hdGNoWzBdOwoJCQkJCXBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTsKCgkJCQkJaWYgKCBwYXJlbnQgJiYgKHBhcmVudFsgZXhwYW5kbyBdICE9PSBkb25lTmFtZSB8fCAhZWxlbS5ub2RlSW5kZXgpICkgewoJCQkJCQljb3VudCA9IDA7CgoJCQkJCQlmb3IgKCBub2RlID0gcGFyZW50LmZpcnN0Q2hpbGQ7IG5vZGU7IG5vZGUgPSBub2RlLm5leHRTaWJsaW5nICkgewoJCQkJCQkJaWYgKCBub2RlLm5vZGVUeXBlID09PSAxICkgewoJCQkJCQkJCW5vZGUubm9kZUluZGV4ID0gKytjb3VudDsKCQkJCQkJCX0KCQkJCQkJfQoKCQkJCQkJcGFyZW50WyBleHBhbmRvIF0gPSBkb25lTmFtZTsKCQkJCQl9CgoJCQkJCWRpZmYgPSBlbGVtLm5vZGVJbmRleCAtIGxhc3Q7CgoJCQkJCWlmICggZmlyc3QgPT09IDAgKSB7CgkJCQkJCXJldHVybiBkaWZmID09PSAwOwoKCQkJCQl9IGVsc2UgewoJCQkJCQlyZXR1cm4gKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTsKCQkJCQl9CgkJCX0KCQl9LAoKCQlJRDogZnVuY3Rpb24oIGVsZW0sIG1hdGNoICkgewoJCQlyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiBlbGVtLmdldEF0dHJpYnV0ZSgiaWQiKSA9PT0gbWF0Y2g7CgkJfSwKCgkJVEFHOiBmdW5jdGlvbiggZWxlbSwgbWF0Y2ggKSB7CgkJCXJldHVybiAobWF0Y2ggPT09ICIqIiAmJiBlbGVtLm5vZGVUeXBlID09PSAxKSB8fCAhIWVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBtYXRjaDsKCQl9LAoKCQlDTEFTUzogZnVuY3Rpb24oIGVsZW0sIG1hdGNoICkgewoJCQlyZXR1cm4gKCIgIiArIChlbGVtLmNsYXNzTmFtZSB8fCBlbGVtLmdldEF0dHJpYnV0ZSgiY2xhc3MiKSkgKyAiICIpCgkJCQkuaW5kZXhPZiggbWF0Y2ggKSA+IC0xOwoJCX0sCgoJCUFUVFI6IGZ1bmN0aW9uKCBlbGVtLCBtYXRjaCApIHsKCQkJdmFyIG5hbWUgPSBtYXRjaFsxXSwKCQkJCXJlc3VsdCA9IFNpenpsZS5hdHRyID8KCQkJCQlTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApIDoKCQkJCQlFeHByLmF0dHJIYW5kbGVbIG5hbWUgXSA/CgkJCQkJRXhwci5hdHRySGFuZGxlWyBuYW1lIF0oIGVsZW0gKSA6CgkJCQkJZWxlbVsgbmFtZSBdICE9IG51bGwgPwoJCQkJCQllbGVtWyBuYW1lIF0gOgoJCQkJCQllbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApLAoJCQkJdmFsdWUgPSByZXN1bHQgKyAiIiwKCQkJCXR5cGUgPSBtYXRjaFsyXSwKCQkJCWNoZWNrID0gbWF0Y2hbNF07CgoJCQlyZXR1cm4gcmVzdWx0ID09IG51bGwgPwoJCQkJdHlwZSA9PT0gIiE9IiA6CgkJCQkhdHlwZSAmJiBTaXp6bGUuYXR0ciA/CgkJCQlyZXN1bHQgIT0gbnVsbCA6CgkJCQl0eXBlID09PSAiPSIgPwoJCQkJdmFsdWUgPT09IGNoZWNrIDoKCQkJCXR5cGUgPT09ICIqPSIgPwoJCQkJdmFsdWUuaW5kZXhPZihjaGVjaykgPj0gMCA6CgkJCQl0eXBlID09PSAifj0iID8KCQkJCSgiICIgKyB2YWx1ZSArICIgIikuaW5kZXhPZihjaGVjaykgPj0gMCA6CgkJCQkhY2hlY2sgPwoJCQkJdmFsdWUgJiYgcmVzdWx0ICE9PSBmYWxzZSA6CgkJCQl0eXBlID09PSAiIT0iID8KCQkJCXZhbHVlICE9PSBjaGVjayA6CgkJCQl0eXBlID09PSAiXj0iID8KCQkJCXZhbHVlLmluZGV4T2YoY2hlY2spID09PSAwIDoKCQkJCXR5cGUgPT09ICIkPSIgPwoJCQkJdmFsdWUuc3Vic3RyKHZhbHVlLmxlbmd0aCAtIGNoZWNrLmxlbmd0aCkgPT09IGNoZWNrIDoKCQkJCXR5cGUgPT09ICJ8PSIgPwoJCQkJdmFsdWUgPT09IGNoZWNrIHx8IHZhbHVlLnN1YnN0cigwLCBjaGVjay5sZW5ndGggKyAxKSA9PT0gY2hlY2sgKyAiLSIgOgoJCQkJZmFsc2U7CgkJfSwKCgkJUE9TOiBmdW5jdGlvbiggZWxlbSwgbWF0Y2gsIGksIGFycmF5ICkgewoJCQl2YXIgbmFtZSA9IG1hdGNoWzJdLAoJCQkJZmlsdGVyID0gRXhwci5zZXRGaWx0ZXJzWyBuYW1lIF07CgoJCQlpZiAoIGZpbHRlciApIHsKCQkJCXJldHVybiBmaWx0ZXIoIGVsZW0sIGksIG1hdGNoLCBhcnJheSApOwoJCQl9CgkJfQoJfQp9OwoKdmFyIG9yaWdQT1MgPSBFeHByLm1hdGNoLlBPUywKCWZlc2NhcGUgPSBmdW5jdGlvbihhbGwsIG51bSl7CgkJcmV0dXJuICJcXCIgKyAobnVtIC0gMCArIDEpOwoJfTsKCmZvciAoIHZhciB0eXBlIGluIEV4cHIubWF0Y2ggKSB7CglFeHByLm1hdGNoWyB0eXBlIF0gPSBuZXcgUmVnRXhwKCBFeHByLm1hdGNoWyB0eXBlIF0uc291cmNlICsgKC8oPyFbXlxbXSpcXSkoPyFbXlwoXSpcKSkvLnNvdXJjZSkgKTsKCUV4cHIubGVmdE1hdGNoWyB0eXBlIF0gPSBuZXcgUmVnRXhwKCAvKF4oPzoufFxyfFxuKSo/KS8uc291cmNlICsgRXhwci5tYXRjaFsgdHlwZSBdLnNvdXJjZS5yZXBsYWNlKC9cXChcZCspL2csIGZlc2NhcGUpICk7Cn0KLy8gRXhwb3NlIG9yaWdQT1MKLy8gImdsb2JhbCIgYXMgaW4gcmVnYXJkbGVzcyBvZiByZWxhdGlvbiB0byBicmFja2V0cy9wYXJlbnMKRXhwci5tYXRjaC5nbG9iYWxQT1MgPSBvcmlnUE9TOwoKdmFyIG1ha2VBcnJheSA9IGZ1bmN0aW9uKCBhcnJheSwgcmVzdWx0cyApIHsKCWFycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFycmF5LCAwICk7CgoJaWYgKCByZXN1bHRzICkgewoJCXJlc3VsdHMucHVzaC5hcHBseSggcmVzdWx0cywgYXJyYXkgKTsKCQlyZXR1cm4gcmVzdWx0czsKCX0KCglyZXR1cm4gYXJyYXk7Cn07CgovLyBQZXJmb3JtIGEgc2ltcGxlIGNoZWNrIHRvIGRldGVybWluZSBpZiB0aGUgYnJvd3NlciBpcyBjYXBhYmxlIG9mCi8vIGNvbnZlcnRpbmcgYSBOb2RlTGlzdCB0byBhbiBhcnJheSB1c2luZyBidWlsdGluIG1ldGhvZHMuCi8vIEFsc28gdmVyaWZpZXMgdGhhdCB0aGUgcmV0dXJuZWQgYXJyYXkgaG9sZHMgRE9NIG5vZGVzCi8vICh3aGljaCBpcyBub3QgdGhlIGNhc2UgaW4gdGhlIEJsYWNrYmVycnkgYnJvd3NlcikKdHJ5IHsKCUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2hpbGROb2RlcywgMCApWzBdLm5vZGVUeXBlOwoKLy8gUHJvdmlkZSBhIGZhbGxiYWNrIG1ldGhvZCBpZiBpdCBkb2VzIG5vdCB3b3JrCn0gY2F0Y2goIGUgKSB7CgltYWtlQXJyYXkgPSBmdW5jdGlvbiggYXJyYXksIHJlc3VsdHMgKSB7CgkJdmFyIGkgPSAwLAoJCQlyZXQgPSByZXN1bHRzIHx8IFtdOwoKCQlpZiAoIHRvU3RyaW5nLmNhbGwoYXJyYXkpID09PSAiW29iamVjdCBBcnJheV0iICkgewoJCQlBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSggcmV0LCBhcnJheSApOwoKCQl9IGVsc2UgewoJCQlpZiAoIHR5cGVvZiBhcnJheS5sZW5ndGggPT09ICJudW1iZXIiICkgewoJCQkJZm9yICggdmFyIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CgkJCQkJcmV0LnB1c2goIGFycmF5W2ldICk7CgkJCQl9CgoJCQl9IGVsc2UgewoJCQkJZm9yICggOyBhcnJheVtpXTsgaSsrICkgewoJCQkJCXJldC5wdXNoKCBhcnJheVtpXSApOwoJCQkJfQoJCQl9CgkJfQoKCQlyZXR1cm4gcmV0OwoJfTsKfQoKdmFyIHNvcnRPcmRlciwgc2libGluZ0NoZWNrOwoKaWYgKCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24gKSB7Cglzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHsKCQlpZiAoIGEgPT09IGIgKSB7CgkJCWhhc0R1cGxpY2F0ZSA9IHRydWU7CgkJCXJldHVybiAwOwoJCX0KCgkJaWYgKCAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiB8fCAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApIHsKCQkJcmV0dXJuIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPyAtMSA6IDE7CgkJfQoKCQlyZXR1cm4gYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSAmIDQgPyAtMSA6IDE7Cgl9OwoKfSBlbHNlIHsKCXNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkgewoJCS8vIFRoZSBub2RlcyBhcmUgaWRlbnRpY2FsLCB3ZSBjYW4gZXhpdCBlYXJseQoJCWlmICggYSA9PT0gYiApIHsKCQkJaGFzRHVwbGljYXRlID0gdHJ1ZTsKCQkJcmV0dXJuIDA7CgoJCS8vIEZhbGxiYWNrIHRvIHVzaW5nIHNvdXJjZUluZGV4IChpbiBJRSkgaWYgaXQncyBhdmFpbGFibGUgb24gYm90aCBub2RlcwoJCX0gZWxzZSBpZiAoIGEuc291cmNlSW5kZXggJiYgYi5zb3VyY2VJbmRleCApIHsKCQkJcmV0dXJuIGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4OwoJCX0KCgkJdmFyIGFsLCBibCwKCQkJYXAgPSBbXSwKCQkJYnAgPSBbXSwKCQkJYXVwID0gYS5wYXJlbnROb2RlLAoJCQlidXAgPSBiLnBhcmVudE5vZGUsCgkJCWN1ciA9IGF1cDsKCgkJLy8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncyAob3IgaWRlbnRpY2FsKSB3ZSBjYW4gZG8gYSBxdWljayBjaGVjawoJCWlmICggYXVwID09PSBidXAgKSB7CgkJCXJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTsKCgkJLy8gSWYgbm8gcGFyZW50cyB3ZXJlIGZvdW5kIHRoZW4gdGhlIG5vZGVzIGFyZSBkaXNjb25uZWN0ZWQKCQl9IGVsc2UgaWYgKCAhYXVwICkgewoJCQlyZXR1cm4gLTE7CgoJCX0gZWxzZSBpZiAoICFidXAgKSB7CgkJCXJldHVybiAxOwoJCX0KCgkJLy8gT3RoZXJ3aXNlIHRoZXkncmUgc29tZXdoZXJlIGVsc2UgaW4gdGhlIHRyZWUgc28gd2UgbmVlZAoJCS8vIHRvIGJ1aWxkIHVwIGEgZnVsbCBsaXN0IG9mIHRoZSBwYXJlbnROb2RlcyBmb3IgY29tcGFyaXNvbgoJCXdoaWxlICggY3VyICkgewoJCQlhcC51bnNoaWZ0KCBjdXIgKTsKCQkJY3VyID0gY3VyLnBhcmVudE5vZGU7CgkJfQoKCQljdXIgPSBidXA7CgoJCXdoaWxlICggY3VyICkgewoJCQlicC51bnNoaWZ0KCBjdXIgKTsKCQkJY3VyID0gY3VyLnBhcmVudE5vZGU7CgkJfQoKCQlhbCA9IGFwLmxlbmd0aDsKCQlibCA9IGJwLmxlbmd0aDsKCgkJLy8gU3RhcnQgd2Fsa2luZyBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3kKCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBhbCAmJiBpIDwgYmw7IGkrKyApIHsKCQkJaWYgKCBhcFtpXSAhPT0gYnBbaV0gKSB7CgkJCQlyZXR1cm4gc2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKTsKCQkJfQoJCX0KCgkJLy8gV2UgZW5kZWQgc29tZXBsYWNlIHVwIHRoZSB0cmVlIHNvIGRvIGEgc2libGluZyBjaGVjawoJCXJldHVybiBpID09PSBhbCA/CgkJCXNpYmxpbmdDaGVjayggYSwgYnBbaV0sIC0xICkgOgoJCQlzaWJsaW5nQ2hlY2soIGFwW2ldLCBiLCAxICk7Cgl9OwoKCXNpYmxpbmdDaGVjayA9IGZ1bmN0aW9uKCBhLCBiLCByZXQgKSB7CgkJaWYgKCBhID09PSBiICkgewoJCQlyZXR1cm4gcmV0OwoJCX0KCgkJdmFyIGN1ciA9IGEubmV4dFNpYmxpbmc7CgoJCXdoaWxlICggY3VyICkgewoJCQlpZiAoIGN1ciA9PT0gYiApIHsKCQkJCXJldHVybiAtMTsKCQkJfQoKCQkJY3VyID0gY3VyLm5leHRTaWJsaW5nOwoJCX0KCgkJcmV0dXJuIDE7Cgl9Owp9CgovLyBDaGVjayB0byBzZWUgaWYgdGhlIGJyb3dzZXIgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lIHdoZW4KLy8gcXVlcnlpbmcgYnkgZ2V0RWxlbWVudEJ5SWQgKGFuZCBwcm92aWRlIGEgd29ya2Fyb3VuZCkKKGZ1bmN0aW9uKCl7CgkvLyBXZSdyZSBnb2luZyB0byBpbmplY3QgYSBmYWtlIGlucHV0IGVsZW1lbnQgd2l0aCBhIHNwZWNpZmllZCBuYW1lCgl2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLAoJCWlkID0gInNjcmlwdCIgKyAobmV3IERhdGUoKSkuZ2V0VGltZSgpLAoJCXJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CgoJZm9ybS5pbm5lckhUTUwgPSAiPGEgbmFtZT0nIiArIGlkICsgIicvPiI7CgoJLy8gSW5qZWN0IGl0IGludG8gdGhlIHJvb3QgZWxlbWVudCwgY2hlY2sgaXRzIHN0YXR1cywgYW5kIHJlbW92ZSBpdCBxdWlja2x5Cglyb290Lmluc2VydEJlZm9yZSggZm9ybSwgcm9vdC5maXJzdENoaWxkICk7CgoJLy8gVGhlIHdvcmthcm91bmQgaGFzIHRvIGRvIGFkZGl0aW9uYWwgY2hlY2tzIGFmdGVyIGEgZ2V0RWxlbWVudEJ5SWQKCS8vIFdoaWNoIHNsb3dzIHRoaW5ncyBkb3duIGZvciBvdGhlciBicm93c2VycyAoaGVuY2UgdGhlIGJyYW5jaGluZykKCWlmICggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGlkICkgKSB7CgkJRXhwci5maW5kLklEID0gZnVuY3Rpb24oIG1hdGNoLCBjb250ZXh0LCBpc1hNTCApIHsKCQkJaWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gInVuZGVmaW5lZCIgJiYgIWlzWE1MICkgewoJCQkJdmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKG1hdGNoWzFdKTsKCgkJCQlyZXR1cm4gbSA/CgkJCQkJbS5pZCA9PT0gbWF0Y2hbMV0gfHwgdHlwZW9mIG0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gInVuZGVmaW5lZCIgJiYgbS5nZXRBdHRyaWJ1dGVOb2RlKCJpZCIpLm5vZGVWYWx1ZSA9PT0gbWF0Y2hbMV0gPwoJCQkJCQlbbV0gOgoJCQkJCQl1bmRlZmluZWQgOgoJCQkJCVtdOwoJCQl9CgkJfTsKCgkJRXhwci5maWx0ZXIuSUQgPSBmdW5jdGlvbiggZWxlbSwgbWF0Y2ggKSB7CgkJCXZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gInVuZGVmaW5lZCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCJpZCIpOwoKCQkJcmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgbm9kZSAmJiBub2RlLm5vZGVWYWx1ZSA9PT0gbWF0Y2g7CgkJfTsKCX0KCglyb290LnJlbW92ZUNoaWxkKCBmb3JtICk7CgoJLy8gcmVsZWFzZSBtZW1vcnkgaW4gSUUKCXJvb3QgPSBmb3JtID0gbnVsbDsKfSkoKTsKCihmdW5jdGlvbigpewoJLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBicm93c2VyIHJldHVybnMgb25seSBlbGVtZW50cwoJLy8gd2hlbiBkb2luZyBnZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpCgoJLy8gQ3JlYXRlIGEgZmFrZSBlbGVtZW50Cgl2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CglkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIiIpICk7CgoJLy8gTWFrZSBzdXJlIG5vIGNvbW1lbnRzIGFyZSBmb3VuZAoJaWYgKCBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIioiKS5sZW5ndGggPiAwICkgewoJCUV4cHIuZmluZC5UQUcgPSBmdW5jdGlvbiggbWF0Y2gsIGNvbnRleHQgKSB7CgkJCXZhciByZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggbWF0Y2hbMV0gKTsKCgkJCS8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHMKCQkJaWYgKCBtYXRjaFsxXSA9PT0gIioiICkgewoJCQkJdmFyIHRtcCA9IFtdOwoKCQkJCWZvciAoIHZhciBpID0gMDsgcmVzdWx0c1tpXTsgaSsrICkgewoJCQkJCWlmICggcmVzdWx0c1tpXS5ub2RlVHlwZSA9PT0gMSApIHsKCQkJCQkJdG1wLnB1c2goIHJlc3VsdHNbaV0gKTsKCQkJCQl9CgkJCQl9CgoJCQkJcmVzdWx0cyA9IHRtcDsKCQkJfQoKCQkJcmV0dXJuIHJlc3VsdHM7CgkJfTsKCX0KCgkvLyBDaGVjayB0byBzZWUgaWYgYW4gYXR0cmlidXRlIHJldHVybnMgbm9ybWFsaXplZCBocmVmIGF0dHJpYnV0ZXMKCWRpdi5pbm5lckhUTUwgPSAiPGEgaHJlZj0nIyc+PC9hPiI7CgoJaWYgKCBkaXYuZmlyc3RDaGlsZCAmJiB0eXBlb2YgZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlICE9PSAidW5kZWZpbmVkIiAmJgoJCQlkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoImhyZWYiKSAhPT0gIiMiICkgewoKCQlFeHByLmF0dHJIYW5kbGUuaHJlZiA9IGZ1bmN0aW9uKCBlbGVtICkgewoJCQlyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoICJocmVmIiwgMiApOwoJCX07Cgl9CgoJLy8gcmVsZWFzZSBtZW1vcnkgaW4gSUUKCWRpdiA9IG51bGw7Cn0pKCk7CgppZiAoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSB7CgkoZnVuY3Rpb24oKXsKCQl2YXIgb2xkU2l6emxlID0gU2l6emxlLAoJCQlkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwKCQkJaWQgPSAiX19zaXp6bGVfXyI7CgoJCWRpdi5pbm5lckhUTUwgPSAiPHAgY2xhc3M9J1RFU1QnPjwvcD4iOwoKCQkvLyBTYWZhcmkgY2FuJ3QgaGFuZGxlIHVwcGVyY2FzZSBvciB1bmljb2RlIGNoYXJhY3RlcnMgd2hlbgoJCS8vIGluIHF1aXJrcyBtb2RlLgoJCWlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwgJiYgZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIi5URVNUIikubGVuZ3RoID09PSAwICkgewoJCQlyZXR1cm47CgkJfQoKCQlTaXp6bGUgPSBmdW5jdGlvbiggcXVlcnksIGNvbnRleHQsIGV4dHJhLCBzZWVkICkgewoJCQljb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDsKCgkJCS8vIE9ubHkgdXNlIHF1ZXJ5U2VsZWN0b3JBbGwgb24gbm9uLVhNTCBkb2N1bWVudHMKCQkJLy8gKElEIHNlbGVjdG9ycyBkb24ndCB3b3JrIGluIG5vbi1IVE1MIGRvY3VtZW50cykKCQkJaWYgKCAhc2VlZCAmJiAhU2l6emxlLmlzWE1MKGNvbnRleHQpICkgewoJCQkJLy8gU2VlIGlmIHdlIGZpbmQgYSBzZWxlY3RvciB0byBzcGVlZCB1cAoJCQkJdmFyIG1hdGNoID0gL14oXHcrJCl8XlwuKFtcd1wtXSskKXxeIyhbXHdcLV0rJCkvLmV4ZWMoIHF1ZXJ5ICk7CgoJCQkJaWYgKCBtYXRjaCAmJiAoY29udGV4dC5ub2RlVHlwZSA9PT0gMSB8fCBjb250ZXh0Lm5vZGVUeXBlID09PSA5KSApIHsKCQkJCQkvLyBTcGVlZC11cDogU2l6emxlKCJUQUciKQoJCQkJCWlmICggbWF0Y2hbMV0gKSB7CgkJCQkJCXJldHVybiBtYWtlQXJyYXkoIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHF1ZXJ5ICksIGV4dHJhICk7CgoJCQkJCS8vIFNwZWVkLXVwOiBTaXp6bGUoIi5DTEFTUyIpCgkJCQkJfSBlbHNlIGlmICggbWF0Y2hbMl0gJiYgRXhwci5maW5kLkNMQVNTICYmIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHsKCQkJCQkJcmV0dXJuIG1ha2VBcnJheSggY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtYXRjaFsyXSApLCBleHRyYSApOwoJCQkJCX0KCQkJCX0KCgkJCQlpZiAoIGNvbnRleHQubm9kZVR5cGUgPT09IDkgKSB7CgkJCQkJLy8gU3BlZWQtdXA6IFNpenpsZSgiYm9keSIpCgkJCQkJLy8gVGhlIGJvZHkgZWxlbWVudCBvbmx5IGV4aXN0cyBvbmNlLCBvcHRpbWl6ZSBmaW5kaW5nIGl0CgkJCQkJaWYgKCBxdWVyeSA9PT0gImJvZHkiICYmIGNvbnRleHQuYm9keSApIHsKCQkJCQkJcmV0dXJuIG1ha2VBcnJheSggWyBjb250ZXh0LmJvZHkgXSwgZXh0cmEgKTsKCgkJCQkJLy8gU3BlZWQtdXA6IFNpenpsZSgiI0lEIikKCQkJCQl9IGVsc2UgaWYgKCBtYXRjaCAmJiBtYXRjaFszXSApIHsKCQkJCQkJdmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtYXRjaFszXSApOwoKCQkJCQkJLy8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnMKCQkJCQkJLy8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2MwoJCQkJCQlpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkgewoJCQkJCQkJLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFIGFuZCBPcGVyYSByZXR1cm4gaXRlbXMKCQkJCQkJCS8vIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRAoJCQkJCQkJaWYgKCBlbGVtLmlkID09PSBtYXRjaFszXSApIHsKCQkJCQkJCQlyZXR1cm4gbWFrZUFycmF5KCBbIGVsZW0gXSwgZXh0cmEgKTsKCQkJCQkJCX0KCgkJCQkJCX0gZWxzZSB7CgkJCQkJCQlyZXR1cm4gbWFrZUFycmF5KCBbXSwgZXh0cmEgKTsKCQkJCQkJfQoJCQkJCX0KCgkJCQkJdHJ5IHsKCQkJCQkJcmV0dXJuIG1ha2VBcnJheSggY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSwgZXh0cmEgKTsKCQkJCQl9IGNhdGNoKHFzYUVycm9yKSB7fQoKCQkJCS8vIHFTQSB3b3JrcyBzdHJhbmdlbHkgb24gRWxlbWVudC1yb290ZWQgcXVlcmllcwoJCQkJLy8gV2UgY2FuIHdvcmsgYXJvdW5kIHRoaXMgYnkgc3BlY2lmeWluZyBhbiBleHRyYSBJRCBvbiB0aGUgcm9vdAoJCQkJLy8gYW5kIHdvcmtpbmcgdXAgZnJvbSB0aGVyZSAoVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoZSB0ZWNobmlxdWUpCgkJCQkvLyBJRSA4IGRvZXNuJ3Qgd29yayBvbiBvYmplY3QgZWxlbWVudHMKCQkJCX0gZWxzZSBpZiAoIGNvbnRleHQubm9kZVR5cGUgPT09IDEgJiYgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAib2JqZWN0IiApIHsKCQkJCQl2YXIgb2xkQ29udGV4dCA9IGNvbnRleHQsCgkJCQkJCW9sZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCAiaWQiICksCgkJCQkJCW5pZCA9IG9sZCB8fCBpZCwKCQkJCQkJaGFzUGFyZW50ID0gY29udGV4dC5wYXJlbnROb2RlLAoJCQkJCQlyZWxhdGl2ZUhpZXJhcmNoeVNlbGVjdG9yID0gL15ccypbK35dLy50ZXN0KCBxdWVyeSApOwoKCQkJCQlpZiAoICFvbGQgKSB7CgkJCQkJCWNvbnRleHQuc2V0QXR0cmlidXRlKCAiaWQiLCBuaWQgKTsKCQkJCQl9IGVsc2UgewoJCQkJCQluaWQgPSBuaWQucmVwbGFjZSggLycvZywgIlxcJCYiICk7CgkJCQkJfQoJCQkJCWlmICggcmVsYXRpdmVIaWVyYXJjaHlTZWxlY3RvciAmJiBoYXNQYXJlbnQgKSB7CgkJCQkJCWNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7CgkJCQkJfQoKCQkJCQl0cnkgewoJCQkJCQlpZiAoICFyZWxhdGl2ZUhpZXJhcmNoeVNlbGVjdG9yIHx8IGhhc1BhcmVudCApIHsKCQkJCQkJCXJldHVybiBtYWtlQXJyYXkoIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggIltpZD0nIiArIG5pZCArICInXSAiICsgcXVlcnkgKSwgZXh0cmEgKTsKCQkJCQkJfQoKCQkJCQl9IGNhdGNoKHBzZXVkb0Vycm9yKSB7CgkJCQkJfSBmaW5hbGx5IHsKCQkJCQkJaWYgKCAhb2xkICkgewoJCQkJCQkJb2xkQ29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoICJpZCIgKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJcmV0dXJuIG9sZFNpenpsZShxdWVyeSwgY29udGV4dCwgZXh0cmEsIHNlZWQpOwoJCX07CgoJCWZvciAoIHZhciBwcm9wIGluIG9sZFNpenpsZSApIHsKCQkJU2l6emxlWyBwcm9wIF0gPSBvbGRTaXp6bGVbIHByb3AgXTsKCQl9CgoJCS8vIHJlbGVhc2UgbWVtb3J5IGluIElFCgkJZGl2ID0gbnVsbDsKCX0pKCk7Cn0KCihmdW5jdGlvbigpewoJdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsCgkJbWF0Y2hlcyA9IGh0bWwubWF0Y2hlc1NlbGVjdG9yIHx8IGh0bWwubW96TWF0Y2hlc1NlbGVjdG9yIHx8IGh0bWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGh0bWwubXNNYXRjaGVzU2VsZWN0b3I7CgoJaWYgKCBtYXRjaGVzICkgewoJCS8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvcgoJCS8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkgZmFpbHMgdGhpcykKCQl2YXIgZGlzY29ubmVjdGVkTWF0Y2ggPSAhbWF0Y2hlcy5jYWxsKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApLCAiZGl2IiApLAoJCQlwc2V1ZG9Xb3JrcyA9IGZhbHNlOwoKCQl0cnkgewoJCQkvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uCgkJCS8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWQKCQkJbWF0Y2hlcy5jYWxsKCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICJbdGVzdCE9JyddOnNpenpsZSIgKTsKCgkJfSBjYXRjaCggcHNldWRvRXJyb3IgKSB7CgkJCXBzZXVkb1dvcmtzID0gdHJ1ZTsKCQl9CgoJCVNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggbm9kZSwgZXhwciApIHsKCQkJLy8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkCgkJCWV4cHIgPSBleHByLnJlcGxhY2UoL1w9XHMqKFteJyJcXV0qKVxzKlxdL2csICI9JyQxJ10iKTsKCgkJCWlmICggIVNpenpsZS5pc1hNTCggbm9kZSApICkgewoJCQkJdHJ5IHsKCQkJCQlpZiAoIHBzZXVkb1dvcmtzIHx8ICFFeHByLm1hdGNoLlBTRVVETy50ZXN0KCBleHByICkgJiYgIS8hPS8udGVzdCggZXhwciApICkgewoJCQkJCQl2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBub2RlLCBleHByICk7CgoJCQkJCQkvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzCgkJCQkJCWlmICggcmV0IHx8ICFkaXNjb25uZWN0ZWRNYXRjaCB8fAoJCQkJCQkJCS8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50CgkJCQkJCQkJLy8gZnJhZ21lbnQgaW4gSUUgOSwgc28gY2hlY2sgZm9yIHRoYXQKCQkJCQkJCQlub2RlLmRvY3VtZW50ICYmIG5vZGUuZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkgewoJCQkJCQkJcmV0dXJuIHJldDsKCQkJCQkJfQoJCQkJCX0KCQkJCX0gY2F0Y2goZSkge30KCQkJfQoKCQkJcmV0dXJuIFNpenpsZShleHByLCBudWxsLCBudWxsLCBbbm9kZV0pLmxlbmd0aCA+IDA7CgkJfTsKCX0KfSkoKTsKCihmdW5jdGlvbigpewoJdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwoKCWRpdi5pbm5lckhUTUwgPSAiPGRpdiBjbGFzcz0ndGVzdCBlJz48L2Rpdj48ZGl2IGNsYXNzPSd0ZXN0Jz48L2Rpdj4iOwoKCS8vIE9wZXJhIGNhbid0IGZpbmQgYSBzZWNvbmQgY2xhc3NuYW1lIChpbiA5LjYpCgkvLyBBbHNvLCBtYWtlIHN1cmUgdGhhdCBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIGFjdHVhbGx5IGV4aXN0cwoJaWYgKCAhZGl2LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgfHwgZGl2LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImUiKS5sZW5ndGggPT09IDAgKSB7CgkJcmV0dXJuOwoJfQoKCS8vIFNhZmFyaSBjYWNoZXMgY2xhc3MgYXR0cmlidXRlcywgZG9lc24ndCBjYXRjaCBjaGFuZ2VzIChpbiAzLjIpCglkaXYubGFzdENoaWxkLmNsYXNzTmFtZSA9ICJlIjsKCglpZiAoIGRpdi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJlIikubGVuZ3RoID09PSAxICkgewoJCXJldHVybjsKCX0KCglFeHByLm9yZGVyLnNwbGljZSgxLCAwLCAiQ0xBU1MiKTsKCUV4cHIuZmluZC5DTEFTUyA9IGZ1bmN0aW9uKCBtYXRjaCwgY29udGV4dCwgaXNYTUwgKSB7CgkJaWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSAidW5kZWZpbmVkIiAmJiAhaXNYTUwgKSB7CgkJCXJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobWF0Y2hbMV0pOwoJCX0KCX07CgoJLy8gcmVsZWFzZSBtZW1vcnkgaW4gSUUKCWRpdiA9IG51bGw7Cn0pKCk7CgpmdW5jdGlvbiBkaXJOb2RlQ2hlY2soIGRpciwgY3VyLCBkb25lTmFtZSwgY2hlY2tTZXQsIG5vZGVDaGVjaywgaXNYTUwgKSB7Cglmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGVja1NldC5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CgkJdmFyIGVsZW0gPSBjaGVja1NldFtpXTsKCgkJaWYgKCBlbGVtICkgewoJCQl2YXIgbWF0Y2ggPSBmYWxzZTsKCgkJCWVsZW0gPSBlbGVtW2Rpcl07CgoJCQl3aGlsZSAoIGVsZW0gKSB7CgkJCQlpZiAoIGVsZW1bIGV4cGFuZG8gXSA9PT0gZG9uZU5hbWUgKSB7CgkJCQkJbWF0Y2ggPSBjaGVja1NldFtlbGVtLnNpenNldF07CgkJCQkJYnJlYWs7CgkJCQl9CgoJCQkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFpc1hNTCApewoJCQkJCWVsZW1bIGV4cGFuZG8gXSA9IGRvbmVOYW1lOwoJCQkJCWVsZW0uc2l6c2V0ID0gaTsKCQkJCX0KCgkJCQlpZiAoIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gY3VyICkgewoJCQkJCW1hdGNoID0gZWxlbTsKCQkJCQlicmVhazsKCQkJCX0KCgkJCQllbGVtID0gZWxlbVtkaXJdOwoJCQl9CgoJCQljaGVja1NldFtpXSA9IG1hdGNoOwoJCX0KCX0KfQoKZnVuY3Rpb24gZGlyQ2hlY2soIGRpciwgY3VyLCBkb25lTmFtZSwgY2hlY2tTZXQsIG5vZGVDaGVjaywgaXNYTUwgKSB7Cglmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGVja1NldC5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CgkJdmFyIGVsZW0gPSBjaGVja1NldFtpXTsKCgkJaWYgKCBlbGVtICkgewoJCQl2YXIgbWF0Y2ggPSBmYWxzZTsKCgkJCWVsZW0gPSBlbGVtW2Rpcl07CgoJCQl3aGlsZSAoIGVsZW0gKSB7CgkJCQlpZiAoIGVsZW1bIGV4cGFuZG8gXSA9PT0gZG9uZU5hbWUgKSB7CgkJCQkJbWF0Y2ggPSBjaGVja1NldFtlbGVtLnNpenNldF07CgkJCQkJYnJlYWs7CgkJCQl9CgoJCQkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkgewoJCQkJCWlmICggIWlzWE1MICkgewoJCQkJCQllbGVtWyBleHBhbmRvIF0gPSBkb25lTmFtZTsKCQkJCQkJZWxlbS5zaXpzZXQgPSBpOwoJCQkJCX0KCgkJCQkJaWYgKCB0eXBlb2YgY3VyICE9PSAic3RyaW5nIiApIHsKCQkJCQkJaWYgKCBlbGVtID09PSBjdXIgKSB7CgkJCQkJCQltYXRjaCA9IHRydWU7CgkJCQkJCQlicmVhazsKCQkJCQkJfQoKCQkJCQl9IGVsc2UgaWYgKCBTaXp6bGUuZmlsdGVyKCBjdXIsIFtlbGVtXSApLmxlbmd0aCA+IDAgKSB7CgkJCQkJCW1hdGNoID0gZWxlbTsKCQkJCQkJYnJlYWs7CgkJCQkJfQoJCQkJfQoKCQkJCWVsZW0gPSBlbGVtW2Rpcl07CgkJCX0KCgkJCWNoZWNrU2V0W2ldID0gbWF0Y2g7CgkJfQoJfQp9CgppZiAoIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyApIHsKCVNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBhLCBiICkgewoJCXJldHVybiBhICE9PSBiICYmIChhLmNvbnRhaW5zID8gYS5jb250YWlucyhiKSA6IHRydWUpOwoJfTsKCn0gZWxzZSBpZiAoIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApIHsKCVNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBhLCBiICkgewoJCXJldHVybiAhIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpICYgMTYpOwoJfTsKCn0gZWxzZSB7CglTaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbigpIHsKCQlyZXR1cm4gZmFsc2U7Cgl9Owp9CgpTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHsKCS8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3QKCS8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKQoJdmFyIGRvY3VtZW50RWxlbWVudCA9IChlbGVtID8gZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gOiAwKS5kb2N1bWVudEVsZW1lbnQ7CgoJcmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gIkhUTUwiIDogZmFsc2U7Cn07Cgp2YXIgcG9zUHJvY2VzcyA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgc2VlZCApIHsKCXZhciBtYXRjaCwKCQl0bXBTZXQgPSBbXSwKCQlsYXRlciA9ICIiLAoJCXJvb3QgPSBjb250ZXh0Lm5vZGVUeXBlID8gW2NvbnRleHRdIDogY29udGV4dDsKCgkvLyBQb3NpdGlvbiBzZWxlY3RvcnMgbXVzdCBiZSBkb25lIGFmdGVyIHRoZSBmaWx0ZXIKCS8vIEFuZCBzbyBtdXN0IDpub3QocG9zaXRpb25hbCkgc28gd2UgbW92ZSBhbGwgUFNFVURPcyB0byB0aGUgZW5kCgl3aGlsZSAoIChtYXRjaCA9IEV4cHIubWF0Y2guUFNFVURPLmV4ZWMoIHNlbGVjdG9yICkpICkgewoJCWxhdGVyICs9IG1hdGNoWzBdOwoJCXNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZSggRXhwci5tYXRjaC5QU0VVRE8sICIiICk7Cgl9CgoJc2VsZWN0b3IgPSBFeHByLnJlbGF0aXZlW3NlbGVjdG9yXSA/IHNlbGVjdG9yICsgIioiIDogc2VsZWN0b3I7CgoJZm9yICggdmFyIGkgPSAwLCBsID0gcm9vdC5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CgkJU2l6emxlKCBzZWxlY3Rvciwgcm9vdFtpXSwgdG1wU2V0LCBzZWVkICk7Cgl9CgoJcmV0dXJuIFNpenpsZS5maWx0ZXIoIGxhdGVyLCB0bXBTZXQgKTsKfTsKCi8vIEVYUE9TRQovLyBPdmVycmlkZSBzaXp6bGUgYXR0cmlidXRlIHJldHJpZXZhbApTaXp6bGUuYXR0ciA9IGpRdWVyeS5hdHRyOwpTaXp6bGUuc2VsZWN0b3JzLmF0dHJNYXAgPSB7fTsKalF1ZXJ5LmZpbmQgPSBTaXp6bGU7CmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9yczsKalF1ZXJ5LmV4cHJbIjoiXSA9IGpRdWVyeS5leHByLmZpbHRlcnM7CmpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDsKalF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDsKalF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MOwpqUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7CgoKfSkoKTsKCgp2YXIgcnVudGlsID0gL1VudGlsJC8sCglycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldlVudGlsfHByZXZBbGwpLywKCS8vIE5vdGU6IFRoaXMgUmVnRXhwIHNob3VsZCBiZSBpbXByb3ZlZCwgb3IgbGlrZWx5IHB1bGxlZCBmcm9tIFNpenpsZQoJcm11bHRpc2VsZWN0b3IgPSAvLC8sCglpc1NpbXBsZSA9IC9eLlteOiNcW1wuLF0qJC8sCglzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZSwKCVBPUyA9IGpRdWVyeS5leHByLm1hdGNoLmdsb2JhbFBPUywKCS8vIG1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0CglndWFyYW50ZWVkVW5pcXVlID0gewoJCWNoaWxkcmVuOiB0cnVlLAoJCWNvbnRlbnRzOiB0cnVlLAoJCW5leHQ6IHRydWUsCgkJcHJldjogdHJ1ZQoJfTsKCmpRdWVyeS5mbi5leHRlbmQoewoJZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkgewoJCXZhciBzZWxmID0gdGhpcywKCQkJaSwgbDsKCgkJaWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09ICJzdHJpbmciICkgewoJCQlyZXR1cm4galF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlcihmdW5jdGlvbigpIHsKCQkJCWZvciAoIGkgPSAwLCBsID0gc2VsZi5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CgkJCQkJaWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkgewoJCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQl9CgkJCQl9CgkJCX0pOwoJCX0KCgkJdmFyIHJldCA9IHRoaXMucHVzaFN0YWNrKCAiIiwgImZpbmQiLCBzZWxlY3RvciApLAoJCQlsZW5ndGgsIG4sIHI7CgoJCWZvciAoIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CgkJCWxlbmd0aCA9IHJldC5sZW5ndGg7CgkJCWpRdWVyeS5maW5kKCBzZWxlY3RvciwgdGhpc1tpXSwgcmV0ICk7CgoJCQlpZiAoIGkgPiAwICkgewoJCQkJLy8gTWFrZSBzdXJlIHRoYXQgdGhlIHJlc3VsdHMgYXJlIHVuaXF1ZQoJCQkJZm9yICggbiA9IGxlbmd0aDsgbiA8IHJldC5sZW5ndGg7IG4rKyApIHsKCQkJCQlmb3IgKCByID0gMDsgciA8IGxlbmd0aDsgcisrICkgewoJCQkJCQlpZiAoIHJldFtyXSA9PT0gcmV0W25dICkgewoJCQkJCQkJcmV0LnNwbGljZShuLS0sIDEpOwoJCQkJCQkJYnJlYWs7CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgoJCXJldHVybiByZXQ7Cgl9LAoKCWhhczogZnVuY3Rpb24oIHRhcmdldCApIHsKCQl2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0ICk7CgkJcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCkgewoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSB0YXJnZXRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHsKCQkJCWlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzW2ldICkgKSB7CgkJCQkJcmV0dXJuIHRydWU7CgkJCQl9CgkJCX0KCQl9KTsKCX0sCgoJbm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CgkJcmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IsIGZhbHNlKSwgIm5vdCIsIHNlbGVjdG9yKTsKCX0sCgoJZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CgkJcmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IsIHRydWUpLCAiZmlsdGVyIiwgc2VsZWN0b3IgKTsKCX0sCgoJaXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKCQlyZXR1cm4gISFzZWxlY3RvciAmJiAoCgkJCXR5cGVvZiBzZWxlY3RvciA9PT0gInN0cmluZyIgPwoJCQkJLy8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldAoJCQkJLy8gc28gJCgicDpmaXJzdCIpLmlzKCJwOmxhc3QiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gInAiLgoJCQkJUE9TLnRlc3QoIHNlbGVjdG9yICkgPwoJCQkJCWpRdWVyeSggc2VsZWN0b3IsIHRoaXMuY29udGV4dCApLmluZGV4KCB0aGlzWzBdICkgPj0gMCA6CgkJCQkJalF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHRoaXMgKS5sZW5ndGggPiAwIDoKCQkJCXRoaXMuZmlsdGVyKCBzZWxlY3RvciApLmxlbmd0aCA+IDAgKTsKCX0sCgoJY2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHsKCQl2YXIgcmV0ID0gW10sIGksIGwsIGN1ciA9IHRoaXNbMF07CgoJCS8vIEFycmF5IChkZXByZWNhdGVkIGFzIG9mIGpRdWVyeSAxLjcpCgkJaWYgKCBqUXVlcnkuaXNBcnJheSggc2VsZWN0b3JzICkgKSB7CgkJCXZhciBsZXZlbCA9IDE7CgoJCQl3aGlsZSAoIGN1ciAmJiBjdXIub3duZXJEb2N1bWVudCAmJiBjdXIgIT09IGNvbnRleHQgKSB7CgkJCQlmb3IgKCBpID0gMDsgaSA8IHNlbGVjdG9ycy5sZW5ndGg7IGkrKyApIHsKCgkJCQkJaWYgKCBqUXVlcnkoIGN1ciApLmlzKCBzZWxlY3RvcnNbIGkgXSApICkgewoJCQkJCQlyZXQucHVzaCh7IHNlbGVjdG9yOiBzZWxlY3RvcnNbIGkgXSwgZWxlbTogY3VyLCBsZXZlbDogbGV2ZWwgfSk7CgkJCQkJfQoJCQkJfQoKCQkJCWN1ciA9IGN1ci5wYXJlbnROb2RlOwoJCQkJbGV2ZWwrKzsKCQkJfQoKCQkJcmV0dXJuIHJldDsKCQl9CgoJCS8vIFN0cmluZwoJCXZhciBwb3MgPSBQT1MudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gInN0cmluZyIgPwoJCQkJalF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOgoJCQkJMDsKCgkJZm9yICggaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHsKCQkJY3VyID0gdGhpc1tpXTsKCgkJCXdoaWxlICggY3VyICkgewoJCQkJaWYgKCBwb3MgPyBwb3MuaW5kZXgoY3VyKSA+IC0xIDogalF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKGN1ciwgc2VsZWN0b3JzKSApIHsKCQkJCQlyZXQucHVzaCggY3VyICk7CgkJCQkJYnJlYWs7CgoJCQkJfSBlbHNlIHsKCQkJCQljdXIgPSBjdXIucGFyZW50Tm9kZTsKCQkJCQlpZiAoICFjdXIgfHwgIWN1ci5vd25lckRvY3VtZW50IHx8IGN1ciA9PT0gY29udGV4dCB8fCBjdXIubm9kZVR5cGUgPT09IDExICkgewoJCQkJCQlicmVhazsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgoJCXJldCA9IHJldC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQ7CgoJCXJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0LCAiY2xvc2VzdCIsIHNlbGVjdG9ycyApOwoJfSwKCgkvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluCgkvLyB0aGUgbWF0Y2hlZCBzZXQgb2YgZWxlbWVudHMKCWluZGV4OiBmdW5jdGlvbiggZWxlbSApIHsKCgkJLy8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnQKCQlpZiAoICFlbGVtICkgewoJCQlyZXR1cm4gKCB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZSApID8gdGhpcy5wcmV2QWxsKCkubGVuZ3RoIDogLTE7CgkJfQoKCQkvLyBpbmRleCBpbiBzZWxlY3RvcgoJCWlmICggdHlwZW9mIGVsZW0gPT09ICJzdHJpbmciICkgewoJCQlyZXR1cm4galF1ZXJ5LmluQXJyYXkoIHRoaXNbMF0sIGpRdWVyeSggZWxlbSApICk7CgkJfQoKCQkvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnQKCQlyZXR1cm4galF1ZXJ5LmluQXJyYXkoCgkJCS8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZAoJCQllbGVtLmpxdWVyeSA/IGVsZW1bMF0gOiBlbGVtLCB0aGlzICk7Cgl9LAoKCWFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkgewoJCXZhciBzZXQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09ICJzdHJpbmciID8KCQkJCWpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSA6CgkJCQlqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciAmJiBzZWxlY3Rvci5ub2RlVHlwZSA/IFsgc2VsZWN0b3IgXSA6IHNlbGVjdG9yICksCgkJCWFsbCA9IGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgc2V0ICk7CgoJCXJldHVybiB0aGlzLnB1c2hTdGFjayggaXNEaXNjb25uZWN0ZWQoIHNldFswXSApIHx8IGlzRGlzY29ubmVjdGVkKCBhbGxbMF0gKSA/CgkJCWFsbCA6CgkJCWpRdWVyeS51bmlxdWUoIGFsbCApICk7Cgl9LAoKCWFuZFNlbGY6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLmFkZCggdGhpcy5wcmV2T2JqZWN0ICk7Cgl9Cn0pOwoKLy8gQSBwYWluZnVsbHkgc2ltcGxlIGNoZWNrIHRvIHNlZSBpZiBhbiBlbGVtZW50IGlzIGRpc2Nvbm5lY3RlZAovLyBmcm9tIGEgZG9jdW1lbnQgKHNob3VsZCBiZSBpbXByb3ZlZCwgd2hlcmUgZmVhc2libGUpLgpmdW5jdGlvbiBpc0Rpc2Nvbm5lY3RlZCggbm9kZSApIHsKCXJldHVybiAhbm9kZSB8fCAhbm9kZS5wYXJlbnROb2RlIHx8IG5vZGUucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gMTE7Cn0KCmpRdWVyeS5lYWNoKHsKCXBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJdmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTsKCQlyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsOwoJfSwKCXBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCAicGFyZW50Tm9kZSIgKTsKCX0sCglwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHsKCQlyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgInBhcmVudE5vZGUiLCB1bnRpbCApOwoJfSwKCW5leHQ6IGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiBqUXVlcnkubnRoKCBlbGVtLCAyLCAibmV4dFNpYmxpbmciICk7Cgl9LAoJcHJldjogZnVuY3Rpb24oIGVsZW0gKSB7CgkJcmV0dXJuIGpRdWVyeS5udGgoIGVsZW0sIDIsICJwcmV2aW91c1NpYmxpbmciICk7Cgl9LAoJbmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJcmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sICJuZXh0U2libGluZyIgKTsKCX0sCglwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHsKCQlyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgInByZXZpb3VzU2libGluZyIgKTsKCX0sCgluZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHsKCQlyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgIm5leHRTaWJsaW5nIiwgdW50aWwgKTsKCX0sCglwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHsKCQlyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgInByZXZpb3VzU2libGluZyIsIHVudGlsICk7Cgl9LAoJc2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiBqUXVlcnkuc2libGluZyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7Cgl9LAoJY2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiBqUXVlcnkuc2libGluZyggZWxlbS5maXJzdENoaWxkICk7Cgl9LAoJY29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sICJpZnJhbWUiICkgPwoJCQllbGVtLmNvbnRlbnREb2N1bWVudCB8fCBlbGVtLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQgOgoJCQlqUXVlcnkubWFrZUFycmF5KCBlbGVtLmNoaWxkTm9kZXMgKTsKCX0KfSwgZnVuY3Rpb24oIG5hbWUsIGZuICkgewoJalF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkgewoJCXZhciByZXQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTsKCgkJaWYgKCAhcnVudGlsLnRlc3QoIG5hbWUgKSApIHsKCQkJc2VsZWN0b3IgPSB1bnRpbDsKCQl9CgoJCWlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSAic3RyaW5nIiApIHsKCQkJcmV0ID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHJldCApOwoJCX0KCgkJcmV0ID0gdGhpcy5sZW5ndGggPiAxICYmICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldDsKCgkJaWYgKCAodGhpcy5sZW5ndGggPiAxIHx8IHJtdWx0aXNlbGVjdG9yLnRlc3QoIHNlbGVjdG9yICkpICYmIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7CgkJCXJldCA9IHJldC5yZXZlcnNlKCk7CgkJfQoKCQlyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCwgbmFtZSwgc2xpY2UuY2FsbCggYXJndW1lbnRzICkuam9pbigiLCIpICk7Cgl9Owp9KTsKCmpRdWVyeS5leHRlbmQoewoJZmlsdGVyOiBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHsKCQlpZiAoIG5vdCApIHsKCQkJZXhwciA9ICI6bm90KCIgKyBleHByICsgIikiOwoJCX0KCgkJcmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSA/CgkJCWpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihlbGVtc1swXSwgZXhwcikgPyBbIGVsZW1zWzBdIF0gOiBbXSA6CgkJCWpRdWVyeS5maW5kLm1hdGNoZXMoZXhwciwgZWxlbXMpOwoJfSwKCglkaXI6IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkgewoJCXZhciBtYXRjaGVkID0gW10sCgkJCWN1ciA9IGVsZW1bIGRpciBdOwoKCQl3aGlsZSAoIGN1ciAmJiBjdXIubm9kZVR5cGUgIT09IDkgJiYgKHVudGlsID09PSB1bmRlZmluZWQgfHwgY3VyLm5vZGVUeXBlICE9PSAxIHx8ICFqUXVlcnkoIGN1ciApLmlzKCB1bnRpbCApKSApIHsKCQkJaWYgKCBjdXIubm9kZVR5cGUgPT09IDEgKSB7CgkJCQltYXRjaGVkLnB1c2goIGN1ciApOwoJCQl9CgkJCWN1ciA9IGN1cltkaXJdOwoJCX0KCQlyZXR1cm4gbWF0Y2hlZDsKCX0sCgoJbnRoOiBmdW5jdGlvbiggY3VyLCByZXN1bHQsIGRpciwgZWxlbSApIHsKCQlyZXN1bHQgPSByZXN1bHQgfHwgMTsKCQl2YXIgbnVtID0gMDsKCgkJZm9yICggOyBjdXI7IGN1ciA9IGN1cltkaXJdICkgewoJCQlpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiArK251bSA9PT0gcmVzdWx0ICkgewoJCQkJYnJlYWs7CgkJCX0KCQl9CgoJCXJldHVybiBjdXI7Cgl9LAoKCXNpYmxpbmc6IGZ1bmN0aW9uKCBuLCBlbGVtICkgewoJCXZhciByID0gW107CgoJCWZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7CgkJCWlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkgewoJCQkJci5wdXNoKCBuICk7CgkJCX0KCQl9CgoJCXJldHVybiByOwoJfQp9KTsKCi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90CmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwga2VlcCApIHsKCgkvLyBDYW4ndCBwYXNzIG51bGwgb3IgdW5kZWZpbmVkIHRvIGluZGV4T2YgaW4gRmlyZWZveCA0CgkvLyBTZXQgdG8gMCB0byBza2lwIHN0cmluZyBjaGVjawoJcXVhbGlmaWVyID0gcXVhbGlmaWVyIHx8IDA7CgoJaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7CgkJcmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHsKCQkJdmFyIHJldFZhbCA9ICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKTsKCQkJcmV0dXJuIHJldFZhbCA9PT0ga2VlcDsKCQl9KTsKCgl9IGVsc2UgaWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7CgkJcmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHsKCQkJcmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgPT09IGtlZXA7CgkJfSk7CgoJfSBlbHNlIGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gInN0cmluZyIgKSB7CgkJdmFyIGZpbHRlcmVkID0galF1ZXJ5LmdyZXAoZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkgewoJCQlyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTsKCQl9KTsKCgkJaWYgKCBpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHsKCQkJcmV0dXJuIGpRdWVyeS5maWx0ZXIocXVhbGlmaWVyLCBmaWx0ZXJlZCwgIWtlZXApOwoJCX0gZWxzZSB7CgkJCXF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZmlsdGVyZWQgKTsKCQl9Cgl9CgoJcmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHsKCQlyZXR1cm4gKCBqUXVlcnkuaW5BcnJheSggZWxlbSwgcXVhbGlmaWVyICkgPj0gMCApID09PSBrZWVwOwoJfSk7Cn0KCgoKCmZ1bmN0aW9uIGNyZWF0ZVNhZmVGcmFnbWVudCggZG9jdW1lbnQgKSB7Cgl2YXIgbGlzdCA9IG5vZGVOYW1lcy5zcGxpdCggInwiICksCglzYWZlRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKCglpZiAoIHNhZmVGcmFnLmNyZWF0ZUVsZW1lbnQgKSB7CgkJd2hpbGUgKCBsaXN0Lmxlbmd0aCApIHsKCQkJc2FmZUZyYWcuY3JlYXRlRWxlbWVudCgKCQkJCWxpc3QucG9wKCkKCQkJKTsKCQl9Cgl9CglyZXR1cm4gc2FmZUZyYWc7Cn0KCnZhciBub2RlTmFtZXMgPSAiYWJicnxhcnRpY2xlfGFzaWRlfGF1ZGlvfGJkaXxjYW52YXN8ZGF0YXxkYXRhbGlzdHxkZXRhaWxzfGZpZ2NhcHRpb258ZmlndXJlfGZvb3RlcnwiICsKCQkiaGVhZGVyfGhncm91cHxtYXJrfG1ldGVyfG5hdnxvdXRwdXR8cHJvZ3Jlc3N8c2VjdGlvbnxzdW1tYXJ5fHRpbWV8dmlkZW8iLAoJcmlubGluZWpRdWVyeSA9IC8galF1ZXJ5XGQrPSIoPzpcZCt8bnVsbCkiL2csCglybGVhZGluZ1doaXRlc3BhY2UgPSAvXlxzKy8sCglyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXHc6XSspW14+XSopXC8+L2lnLAoJcnRhZ05hbWUgPSAvPChbXHc6XSspLywKCXJ0Ym9keSA9IC88dGJvZHkvaSwKCXJodG1sID0gLzx8JiM/XHcrOy8sCglybm9Jbm5lcmh0bWwgPSAvPCg/OnNjcmlwdHxzdHlsZSkvaSwKCXJub2NhY2hlID0gLzwoPzpzY3JpcHR8b2JqZWN0fGVtYmVkfG9wdGlvbnxzdHlsZSkvaSwKCXJub3NoaW1jYWNoZSA9IG5ldyBSZWdFeHAoIjwoPzoiICsgbm9kZU5hbWVzICsgIilbXFxzLz5dIiwgImkiKSwKCS8vIGNoZWNrZWQ9ImNoZWNrZWQiIG9yIGNoZWNrZWQKCXJjaGVja2VkID0gL2NoZWNrZWRccyooPzpbXj1dfD1ccyouY2hlY2tlZC4pL2ksCglyc2NyaXB0VHlwZSA9IC9cLyhqYXZhfGVjbWEpc2NyaXB0L2ksCglyY2xlYW5TY3JpcHQgPSAvXlxzKjwhKD86XFtDREFUQVxbfFwtXC0pLywKCXdyYXBNYXAgPSB7CgkJb3B0aW9uOiBbIDEsICI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+IiwgIjwvc2VsZWN0PiIgXSwKCQlsZWdlbmQ6IFsgMSwgIjxmaWVsZHNldD4iLCAiPC9maWVsZHNldD4iIF0sCgkJdGhlYWQ6IFsgMSwgIjx0YWJsZT4iLCAiPC90YWJsZT4iIF0sCgkJdHI6IFsgMiwgIjx0YWJsZT48dGJvZHk+IiwgIjwvdGJvZHk+PC90YWJsZT4iIF0sCgkJdGQ6IFsgMywgIjx0YWJsZT48dGJvZHk+PHRyPiIsICI8L3RyPjwvdGJvZHk+PC90YWJsZT4iIF0sCgkJY29sOiBbIDIsICI8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPiIsICI8L2NvbGdyb3VwPjwvdGFibGU+IiBdLAoJCWFyZWE6IFsgMSwgIjxtYXA+IiwgIjwvbWFwPiIgXSwKCQlfZGVmYXVsdDogWyAwLCAiIiwgIiIgXQoJfSwKCXNhZmVGcmFnbWVudCA9IGNyZWF0ZVNhZmVGcmFnbWVudCggZG9jdW1lbnQgKTsKCndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjsKd3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDsKd3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7CgovLyBJRSBjYW4ndCBzZXJpYWxpemUgPGxpbms+IGFuZCA8c2NyaXB0PiB0YWdzIG5vcm1hbGx5CmlmICggIWpRdWVyeS5zdXBwb3J0Lmh0bWxTZXJpYWxpemUgKSB7Cgl3cmFwTWFwLl9kZWZhdWx0ID0gWyAxLCAiZGl2PGRpdj4iLCAiPC9kaXY+IiBdOwp9CgpqUXVlcnkuZm4uZXh0ZW5kKHsKCXRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQlyZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkgewoJCQlyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/CgkJCQlqUXVlcnkudGV4dCggdGhpcyApIDoKCQkJCXRoaXMuZW1wdHkoKS5hcHBlbmQoICggdGhpc1swXSAmJiB0aGlzWzBdLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKS5jcmVhdGVUZXh0Tm9kZSggdmFsdWUgKSApOwoJCX0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7Cgl9LAoKCXdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkgewoJCWlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHsKCQkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKSB7CgkJCQlqUXVlcnkodGhpcykud3JhcEFsbCggaHRtbC5jYWxsKHRoaXMsIGkpICk7CgkJCX0pOwoJCX0KCgkJaWYgKCB0aGlzWzBdICkgewoJCQkvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZAoJCQl2YXIgd3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1swXS5vd25lckRvY3VtZW50ICkuZXEoMCkuY2xvbmUodHJ1ZSk7CgoJCQlpZiAoIHRoaXNbMF0ucGFyZW50Tm9kZSApIHsKCQkJCXdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWzBdICk7CgkJCX0KCgkJCXdyYXAubWFwKGZ1bmN0aW9uKCkgewoJCQkJdmFyIGVsZW0gPSB0aGlzOwoKCQkJCXdoaWxlICggZWxlbS5maXJzdENoaWxkICYmIGVsZW0uZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gMSApIHsKCQkJCQllbGVtID0gZWxlbS5maXJzdENoaWxkOwoJCQkJfQoKCQkJCXJldHVybiBlbGVtOwoJCQl9KS5hcHBlbmQoIHRoaXMgKTsKCQl9CgoJCXJldHVybiB0aGlzOwoJfSwKCgl3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkgewoJCWlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHsKCQkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKSB7CgkJCQlqUXVlcnkodGhpcykud3JhcElubmVyKCBodG1sLmNhbGwodGhpcywgaSkgKTsKCQkJfSk7CgkJfQoKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLAoJCQkJY29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7CgoJCQlpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHsKCQkJCWNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTsKCgkJCX0gZWxzZSB7CgkJCQlzZWxmLmFwcGVuZCggaHRtbCApOwoJCQl9CgkJfSk7Cgl9LAoKCXdyYXA6IGZ1bmN0aW9uKCBodG1sICkgewoJCXZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTsKCgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKSB7CgkJCWpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwodGhpcywgaSkgOiBodG1sICk7CgkJfSk7Cgl9LAoKCXVud3JhcDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpIHsKCQkJaWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCAiYm9keSIgKSApIHsKCQkJCWpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTsKCQkJfQoJCX0pLmVuZCgpOwoJfSwKCglhcHBlbmQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cywgdHJ1ZSwgZnVuY3Rpb24oIGVsZW0gKSB7CgkJCWlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSApIHsKCQkJCXRoaXMuYXBwZW5kQ2hpbGQoIGVsZW0gKTsKCQkJfQoJCX0pOwoJfSwKCglwcmVwZW5kOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsIHRydWUsIGZ1bmN0aW9uKCBlbGVtICkgewoJCQlpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgKSB7CgkJCQl0aGlzLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5maXJzdENoaWxkICk7CgkJCX0KCQl9KTsKCX0sCgoJYmVmb3JlOiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXNbMF0gJiYgdGhpc1swXS5wYXJlbnROb2RlICkgewoJCQlyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsIGZhbHNlLCBmdW5jdGlvbiggZWxlbSApIHsKCQkJCXRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTsKCQkJfSk7CgkJfSBlbHNlIGlmICggYXJndW1lbnRzLmxlbmd0aCApIHsKCQkJdmFyIHNldCA9IGpRdWVyeS5jbGVhbiggYXJndW1lbnRzICk7CgkJCXNldC5wdXNoLmFwcGx5KCBzZXQsIHRoaXMudG9BcnJheSgpICk7CgkJCXJldHVybiB0aGlzLnB1c2hTdGFjayggc2V0LCAiYmVmb3JlIiwgYXJndW1lbnRzICk7CgkJfQoJfSwKCglhZnRlcjogZnVuY3Rpb24oKSB7CgkJaWYgKCB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZSApIHsKCQkJcmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLCBmYWxzZSwgZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQl0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7CgkJCX0pOwoJCX0gZWxzZSBpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7CgkJCXZhciBzZXQgPSB0aGlzLnB1c2hTdGFjayggdGhpcywgImFmdGVyIiwgYXJndW1lbnRzICk7CgkJCXNldC5wdXNoLmFwcGx5KCBzZXQsIGpRdWVyeS5jbGVhbihhcmd1bWVudHMpICk7CgkJCXJldHVybiBzZXQ7CgkJfQoJfSwKCgkvLyBrZWVwRGF0YSBpcyBmb3IgaW50ZXJuYWwgdXNlIG9ubHktLWRvIG5vdCBkb2N1bWVudAoJcmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IsIGtlZXBEYXRhICkgewoJCWZvciAoIHZhciBpID0gMCwgZWxlbTsgKGVsZW0gPSB0aGlzW2ldKSAhPSBudWxsOyBpKysgKSB7CgkJCWlmICggIXNlbGVjdG9yIHx8IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBbIGVsZW0gXSApLmxlbmd0aCApIHsKCQkJCWlmICggIWtlZXBEYXRhICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7CgkJCQkJalF1ZXJ5LmNsZWFuRGF0YSggZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpICk7CgkJCQkJalF1ZXJ5LmNsZWFuRGF0YSggWyBlbGVtIF0gKTsKCQkJCX0KCgkJCQlpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHsKCQkJCQllbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsZW0gKTsKCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWVtcHR5OiBmdW5jdGlvbigpIHsKCQlmb3IgKCB2YXIgaSA9IDAsIGVsZW07IChlbGVtID0gdGhpc1tpXSkgIT0gbnVsbDsgaSsrICkgewoJCQkvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3MKCQkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkgewoJCQkJalF1ZXJ5LmNsZWFuRGF0YSggZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpICk7CgkJCX0KCgkJCS8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzCgkJCXdoaWxlICggZWxlbS5maXJzdENoaWxkICkgewoJCQkJZWxlbS5yZW1vdmVDaGlsZCggZWxlbS5maXJzdENoaWxkICk7CgkJCX0KCQl9CgoJCXJldHVybiB0aGlzOwoJfSwKCgljbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkgewoJCWRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7CgkJZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzOwoKCQlyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTsKCQl9KTsKCX0sCgoJaHRtbDogZnVuY3Rpb24oIHZhbHVlICkgewoJCXJldHVybiBqUXVlcnkuYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCXZhciBlbGVtID0gdGhpc1swXSB8fCB7fSwKCQkJCWkgPSAwLAoJCQkJbCA9IHRoaXMubGVuZ3RoOwoKCQkJaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewoJCQkJcmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDEgPwoJCQkJCWVsZW0uaW5uZXJIVE1MLnJlcGxhY2UoIHJpbmxpbmVqUXVlcnksICIiICkgOgoJCQkJCW51bGw7CgkJCX0KCgoJCQlpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmCgkJCQkoIGpRdWVyeS5zdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlIHx8ICFybGVhZGluZ1doaXRlc3BhY2UudGVzdCggdmFsdWUgKSApICYmCgkJCQkhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsiIiwgIiJdIClbMV0udG9Mb3dlckNhc2UoKSBdICkgewoKCQkJCXZhbHVlID0gdmFsdWUucmVwbGFjZSggcnhodG1sVGFnLCAiPCQxPjwvJDI+IiApOwoKCQkJCXRyeSB7CgkJCQkJZm9yICg7IGkgPCBsOyBpKysgKSB7CgkJCQkJCS8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrcwoJCQkJCQllbGVtID0gdGhpc1tpXSB8fCB7fTsKCQkJCQkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkgewoJCQkJCQkJalF1ZXJ5LmNsZWFuRGF0YSggZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSggIioiICkgKTsKCQkJCQkJCWVsZW0uaW5uZXJIVE1MID0gdmFsdWU7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCWVsZW0gPSAwOwoKCQkJCS8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZAoJCQkJfSBjYXRjaChlKSB7fQoJCQl9CgoJCQlpZiAoIGVsZW0gKSB7CgkJCQl0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApOwoJCQl9CgkJfSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTsKCX0sCgoJcmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQlpZiAoIHRoaXNbMF0gJiYgdGhpc1swXS5wYXJlbnROb2RlICkgewoJCQkvLyBNYWtlIHN1cmUgdGhhdCB0aGUgZWxlbWVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NIGJlZm9yZSB0aGV5IGFyZSBpbnNlcnRlZAoJCQkvLyB0aGlzIGNhbiBoZWxwIGZpeCByZXBsYWNpbmcgYSBwYXJlbnQgd2l0aCBjaGlsZCBlbGVtZW50cwoJCQlpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkgewoJCQkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKSB7CgkJCQkJdmFyIHNlbGYgPSBqUXVlcnkodGhpcyksIG9sZCA9IHNlbGYuaHRtbCgpOwoJCQkJCXNlbGYucmVwbGFjZVdpdGgoIHZhbHVlLmNhbGwoIHRoaXMsIGksIG9sZCApICk7CgkJCQl9KTsKCQkJfQoKCQkJaWYgKCB0eXBlb2YgdmFsdWUgIT09ICJzdHJpbmciICkgewoJCQkJdmFsdWUgPSBqUXVlcnkoIHZhbHVlICkuZGV0YWNoKCk7CgkJCX0KCgkJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQl2YXIgbmV4dCA9IHRoaXMubmV4dFNpYmxpbmcsCgkJCQkJcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlOwoKCQkJCWpRdWVyeSggdGhpcyApLnJlbW92ZSgpOwoKCQkJCWlmICggbmV4dCApIHsKCQkJCQlqUXVlcnkobmV4dCkuYmVmb3JlKCB2YWx1ZSApOwoJCQkJfSBlbHNlIHsKCQkJCQlqUXVlcnkocGFyZW50KS5hcHBlbmQoIHZhbHVlICk7CgkJCQl9CgkJCX0pOwoJCX0gZWxzZSB7CgkJCXJldHVybiB0aGlzLmxlbmd0aCA/CgkJCQl0aGlzLnB1c2hTdGFjayggalF1ZXJ5KGpRdWVyeS5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlKCkgOiB2YWx1ZSksICJyZXBsYWNlV2l0aCIsIHZhbHVlICkgOgoJCQkJdGhpczsKCQl9Cgl9LAoKCWRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkgewoJCXJldHVybiB0aGlzLnJlbW92ZSggc2VsZWN0b3IsIHRydWUgKTsKCX0sCgoJZG9tTWFuaXA6IGZ1bmN0aW9uKCBhcmdzLCB0YWJsZSwgY2FsbGJhY2sgKSB7CgkJdmFyIHJlc3VsdHMsIGZpcnN0LCBmcmFnbWVudCwgcGFyZW50LAoJCQl2YWx1ZSA9IGFyZ3NbMF0sCgkJCXNjcmlwdHMgPSBbXTsKCgkJLy8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0CgkJaWYgKCAhalF1ZXJ5LnN1cHBvcnQuY2hlY2tDbG9uZSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApIHsKCQkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCWpRdWVyeSh0aGlzKS5kb21NYW5pcCggYXJncywgdGFibGUsIGNhbGxiYWNrLCB0cnVlICk7CgkJCX0pOwoJCX0KCgkJaWYgKCBqUXVlcnkuaXNGdW5jdGlvbih2YWx1ZSkgKSB7CgkJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSkgewoJCQkJdmFyIHNlbGYgPSBqUXVlcnkodGhpcyk7CgkJCQlhcmdzWzBdID0gdmFsdWUuY2FsbCh0aGlzLCBpLCB0YWJsZSA/IHNlbGYuaHRtbCgpIDogdW5kZWZpbmVkKTsKCQkJCXNlbGYuZG9tTWFuaXAoIGFyZ3MsIHRhYmxlLCBjYWxsYmFjayApOwoJCQl9KTsKCQl9CgoJCWlmICggdGhpc1swXSApIHsKCQkJcGFyZW50ID0gdmFsdWUgJiYgdmFsdWUucGFyZW50Tm9kZTsKCgkJCS8vIElmIHdlJ3JlIGluIGEgZnJhZ21lbnQsIGp1c3QgdXNlIHRoYXQgaW5zdGVhZCBvZiBidWlsZGluZyBhIG5ldyBvbmUKCQkJaWYgKCBqUXVlcnkuc3VwcG9ydC5wYXJlbnROb2RlICYmIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgPT09IDExICYmIHBhcmVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gdGhpcy5sZW5ndGggKSB7CgkJCQlyZXN1bHRzID0geyBmcmFnbWVudDogcGFyZW50IH07CgoJCQl9IGVsc2UgewoJCQkJcmVzdWx0cyA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBhcmdzLCB0aGlzLCBzY3JpcHRzICk7CgkJCX0KCgkJCWZyYWdtZW50ID0gcmVzdWx0cy5mcmFnbWVudDsKCgkJCWlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7CgkJCQlmaXJzdCA9IGZyYWdtZW50ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDsKCQkJfSBlbHNlIHsKCQkJCWZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDsKCQkJfQoKCQkJaWYgKCBmaXJzdCApIHsKCQkJCXRhYmxlID0gdGFibGUgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBmaXJzdCwgInRyIiApOwoKCQkJCWZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoLCBsYXN0SW5kZXggPSBsIC0gMTsgaSA8IGw7IGkrKyApIHsKCQkJCQljYWxsYmFjay5jYWxsKAoJCQkJCQl0YWJsZSA/CgkJCQkJCQlyb290KHRoaXNbaV0sIGZpcnN0KSA6CgkJCQkJCQl0aGlzW2ldLAoJCQkJCQkvLyBNYWtlIHN1cmUgdGhhdCB3ZSBkbyBub3QgbGVhayBtZW1vcnkgYnkgaW5hZHZlcnRlbnRseSBkaXNjYXJkaW5nCgkJCQkJCS8vIHRoZSBvcmlnaW5hbCBmcmFnbWVudCAod2hpY2ggbWlnaHQgaGF2ZSBhdHRhY2hlZCBkYXRhKSBpbnN0ZWFkIG9mCgkJCQkJCS8vIHVzaW5nIGl0OyBpbiBhZGRpdGlvbiwgdXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBvYmplY3QgZm9yIHRoZSBsYXN0CgkJCQkJCS8vIGl0ZW0gaW5zdGVhZCBvZiBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXAgYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseQoJCQkJCQkvLyBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKEJ1ZyAjODA3MCkuCgkJCQkJCS8vIEZyYWdtZW50cyBmcm9tIHRoZSBmcmFnbWVudCBjYWNoZSBtdXN0IGFsd2F5cyBiZSBjbG9uZWQgYW5kIG5ldmVyIHVzZWQKCQkJCQkJLy8gaW4gcGxhY2UuCgkJCQkJCXJlc3VsdHMuY2FjaGVhYmxlIHx8ICggbCA+IDEgJiYgaSA8IGxhc3RJbmRleCApID8KCQkJCQkJCWpRdWVyeS5jbG9uZSggZnJhZ21lbnQsIHRydWUsIHRydWUgKSA6CgkJCQkJCQlmcmFnbWVudAoJCQkJCSk7CgkJCQl9CgkJCX0KCgkJCWlmICggc2NyaXB0cy5sZW5ndGggKSB7CgkJCQlqUXVlcnkuZWFjaCggc2NyaXB0cywgZnVuY3Rpb24oIGksIGVsZW0gKSB7CgkJCQkJaWYgKCBlbGVtLnNyYyApIHsKCQkJCQkJalF1ZXJ5LmFqYXgoewoJCQkJCQkJdHlwZTogIkdFVCIsCgkJCQkJCQlnbG9iYWw6IGZhbHNlLAoJCQkJCQkJdXJsOiBlbGVtLnNyYywKCQkJCQkJCWFzeW5jOiBmYWxzZSwKCQkJCQkJCWRhdGFUeXBlOiAic2NyaXB0IgoJCQkJCQl9KTsKCQkJCQl9IGVsc2UgewoJCQkJCQlqUXVlcnkuZ2xvYmFsRXZhbCggKCBlbGVtLnRleHQgfHwgZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVySFRNTCB8fCAiIiApLnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgIi8qJDAqLyIgKSApOwoJCQkJCX0KCgkJCQkJaWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7CgkJCQkJCWVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApOwoJCQkJCX0KCQkJCX0pOwoJCQl9CgkJfQoKCQlyZXR1cm4gdGhpczsKCX0KfSk7CgpmdW5jdGlvbiByb290KCBlbGVtLCBjdXIgKSB7CglyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKGVsZW0sICJ0YWJsZSIpID8KCQkoZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgidGJvZHkiKVswXSB8fAoJCWVsZW0uYXBwZW5kQ2hpbGQoZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRib2R5IikpKSA6CgkJZWxlbTsKfQoKZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHsKCglpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgfHwgIWpRdWVyeS5oYXNEYXRhKCBzcmMgKSApIHsKCQlyZXR1cm47Cgl9CgoJdmFyIHR5cGUsIGksIGwsCgkJb2xkRGF0YSA9IGpRdWVyeS5fZGF0YSggc3JjICksCgkJY3VyRGF0YSA9IGpRdWVyeS5fZGF0YSggZGVzdCwgb2xkRGF0YSApLAoJCWV2ZW50cyA9IG9sZERhdGEuZXZlbnRzOwoKCWlmICggZXZlbnRzICkgewoJCWRlbGV0ZSBjdXJEYXRhLmhhbmRsZTsKCQljdXJEYXRhLmV2ZW50cyA9IHt9OwoKCQlmb3IgKCB0eXBlIGluIGV2ZW50cyApIHsKCQkJZm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CgkJCQlqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7CgkJCX0KCQl9Cgl9CgoJLy8gbWFrZSB0aGUgY2xvbmVkIHB1YmxpYyBkYXRhIG9iamVjdCBhIGNvcHkgZnJvbSB0aGUgb3JpZ2luYWwKCWlmICggY3VyRGF0YS5kYXRhICkgewoJCWN1ckRhdGEuZGF0YSA9IGpRdWVyeS5leHRlbmQoIHt9LCBjdXJEYXRhLmRhdGEgKTsKCX0KfQoKZnVuY3Rpb24gY2xvbmVGaXhBdHRyaWJ1dGVzKCBzcmMsIGRlc3QgKSB7Cgl2YXIgbm9kZU5hbWU7CgoJLy8gV2UgZG8gbm90IG5lZWQgdG8gZG8gYW55dGhpbmcgZm9yIG5vbi1FbGVtZW50cwoJaWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkgewoJCXJldHVybjsKCX0KCgkvLyBjbGVhckF0dHJpYnV0ZXMgcmVtb3ZlcyB0aGUgYXR0cmlidXRlcywgd2hpY2ggd2UgZG9uJ3Qgd2FudCwKCS8vIGJ1dCBhbHNvIHJlbW92ZXMgdGhlIGF0dGFjaEV2ZW50IGV2ZW50cywgd2hpY2ggd2UgKmRvKiB3YW50CglpZiAoIGRlc3QuY2xlYXJBdHRyaWJ1dGVzICkgewoJCWRlc3QuY2xlYXJBdHRyaWJ1dGVzKCk7Cgl9CgoJLy8gbWVyZ2VBdHRyaWJ1dGVzLCBpbiBjb250cmFzdCwgb25seSBtZXJnZXMgYmFjayBvbiB0aGUKCS8vIG9yaWdpbmFsIGF0dHJpYnV0ZXMsIG5vdCB0aGUgZXZlbnRzCglpZiAoIGRlc3QubWVyZ2VBdHRyaWJ1dGVzICkgewoJCWRlc3QubWVyZ2VBdHRyaWJ1dGVzKCBzcmMgKTsKCX0KCglub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCgkvLyBJRTYtOCBmYWlsIHRvIGNsb25lIGNoaWxkcmVuIGluc2lkZSBvYmplY3QgZWxlbWVudHMgdGhhdCB1c2UKCS8vIHRoZSBwcm9wcmlldGFyeSBjbGFzc2lkIGF0dHJpYnV0ZSB2YWx1ZSAocmF0aGVyIHRoYW4gdGhlIHR5cGUKCS8vIGF0dHJpYnV0ZSkgdG8gaWRlbnRpZnkgdGhlIHR5cGUgb2YgY29udGVudCB0byBkaXNwbGF5CglpZiAoIG5vZGVOYW1lID09PSAib2JqZWN0IiApIHsKCQlkZXN0Lm91dGVySFRNTCA9IHNyYy5vdXRlckhUTUw7CgoJfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJpbnB1dCIgJiYgKHNyYy50eXBlID09PSAiY2hlY2tib3giIHx8IHNyYy50eXBlID09PSAicmFkaW8iKSApIHsKCQkvLyBJRTYtOCBmYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94CgkJLy8gb3IgcmFkaW8gYnV0dG9uLiBXb3JzZSwgSUU2LTcgZmFpbCB0byBnaXZlIHRoZSBjbG9uZWQgZWxlbWVudAoJCS8vIGEgY2hlY2tlZCBhcHBlYXJhbmNlIGlmIHRoZSBkZWZhdWx0Q2hlY2tlZCB2YWx1ZSBpc24ndCBhbHNvIHNldAoJCWlmICggc3JjLmNoZWNrZWQgKSB7CgkJCWRlc3QuZGVmYXVsdENoZWNrZWQgPSBkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDsKCQl9CgoJCS8vIElFNi03IGdldCBjb25mdXNlZCBhbmQgZW5kIHVwIHNldHRpbmcgdGhlIHZhbHVlIG9mIGEgY2xvbmVkCgkJLy8gY2hlY2tib3gvcmFkaW8gYnV0dG9uIHRvIGFuIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mICJvbiIKCQlpZiAoIGRlc3QudmFsdWUgIT09IHNyYy52YWx1ZSApIHsKCQkJZGVzdC52YWx1ZSA9IHNyYy52YWx1ZTsKCQl9CgoJLy8gSUU2LTggZmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQKCS8vIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zCgl9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gIm9wdGlvbiIgKSB7CgkJZGVzdC5zZWxlY3RlZCA9IHNyYy5kZWZhdWx0U2VsZWN0ZWQ7CgoJLy8gSUU2LTggZmFpbHMgdG8gc2V0IHRoZSBkZWZhdWx0VmFsdWUgdG8gdGhlIGNvcnJlY3QgdmFsdWUgd2hlbgoJLy8gY2xvbmluZyBvdGhlciB0eXBlcyBvZiBpbnB1dCBmaWVsZHMKCX0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSAiaW5wdXQiIHx8IG5vZGVOYW1lID09PSAidGV4dGFyZWEiICkgewoJCWRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTsKCgkvLyBJRSBibGFua3MgY29udGVudHMgd2hlbiBjbG9uaW5nIHNjcmlwdHMKCX0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSAic2NyaXB0IiAmJiBkZXN0LnRleHQgIT09IHNyYy50ZXh0ICkgewoJCWRlc3QudGV4dCA9IHNyYy50ZXh0OwoJfQoKCS8vIEV2ZW50IGRhdGEgZ2V0cyByZWZlcmVuY2VkIGluc3RlYWQgb2YgY29waWVkIGlmIHRoZSBleHBhbmRvCgkvLyBnZXRzIGNvcGllZCB0b28KCWRlc3QucmVtb3ZlQXR0cmlidXRlKCBqUXVlcnkuZXhwYW5kbyApOwoKCS8vIENsZWFyIGZsYWdzIGZvciBidWJibGluZyBzcGVjaWFsIGNoYW5nZS9zdWJtaXQgZXZlbnRzLCB0aGV5IG11c3QKCS8vIGJlIHJlYXR0YWNoZWQgd2hlbiB0aGUgbmV3bHkgY2xvbmVkIGV2ZW50cyBhcmUgZmlyc3QgYWN0aXZhdGVkCglkZXN0LnJlbW92ZUF0dHJpYnV0ZSggIl9zdWJtaXRfYXR0YWNoZWQiICk7CglkZXN0LnJlbW92ZUF0dHJpYnV0ZSggIl9jaGFuZ2VfYXR0YWNoZWQiICk7Cn0KCmpRdWVyeS5idWlsZEZyYWdtZW50ID0gZnVuY3Rpb24oIGFyZ3MsIG5vZGVzLCBzY3JpcHRzICkgewoJdmFyIGZyYWdtZW50LCBjYWNoZWFibGUsIGNhY2hlcmVzdWx0cywgZG9jLAoJZmlyc3QgPSBhcmdzWyAwIF07CgoJLy8gbm9kZXMgbWF5IGNvbnRhaW4gZWl0aGVyIGFuIGV4cGxpY2l0IGRvY3VtZW50IG9iamVjdCwKCS8vIGEgalF1ZXJ5IGNvbGxlY3Rpb24gb3IgY29udGV4dCBvYmplY3QuCgkvLyBJZiBub2Rlc1swXSBjb250YWlucyBhIHZhbGlkIG9iamVjdCB0byBhc3NpZ24gdG8gZG9jCglpZiAoIG5vZGVzICYmIG5vZGVzWzBdICkgewoJCWRvYyA9IG5vZGVzWzBdLm93bmVyRG9jdW1lbnQgfHwgbm9kZXNbMF07Cgl9CgoJLy8gRW5zdXJlIHRoYXQgYW4gYXR0ciBvYmplY3QgZG9lc24ndCBpbmNvcnJlY3RseSBzdGFuZCBpbiBhcyBhIGRvY3VtZW50IG9iamVjdAoJLy8gQ2hyb21lIGFuZCBGaXJlZm94IHNlZW0gdG8gYWxsb3cgdGhpcyB0byBvY2N1ciBhbmQgd2lsbCB0aHJvdyBleGNlcHRpb24KCS8vIEZpeGVzICM4OTUwCglpZiAoICFkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCApIHsKCQlkb2MgPSBkb2N1bWVudDsKCX0KCgkvLyBPbmx5IGNhY2hlICJzbWFsbCIgKDEvMiBLQikgSFRNTCBzdHJpbmdzIHRoYXQgYXJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWFpbiBkb2N1bWVudAoJLy8gQ2xvbmluZyBvcHRpb25zIGxvc2VzIHRoZSBzZWxlY3RlZCBzdGF0ZSwgc28gZG9uJ3QgY2FjaGUgdGhlbQoJLy8gSUUgNiBkb2Vzbid0IGxpa2UgaXQgd2hlbiB5b3UgcHV0IDxvYmplY3Q+IG9yIDxlbWJlZD4gZWxlbWVudHMgaW4gYSBmcmFnbWVudAoJLy8gQWxzbywgV2ViS2l0IGRvZXMgbm90IGNsb25lICdjaGVja2VkJyBhdHRyaWJ1dGVzIG9uIGNsb25lTm9kZSwgc28gZG9uJ3QgY2FjaGUKCS8vIExhc3RseSwgSUU2LDcsOCB3aWxsIG5vdCBjb3JyZWN0bHkgcmV1c2UgY2FjaGVkIGZyYWdtZW50cyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIHVua25vd24gZWxlbXMgIzEwNTAxCglpZiAoIGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGVvZiBmaXJzdCA9PT0gInN0cmluZyIgJiYgZmlyc3QubGVuZ3RoIDwgNTEyICYmIGRvYyA9PT0gZG9jdW1lbnQgJiYKCQlmaXJzdC5jaGFyQXQoMCkgPT09ICI8IiAmJiAhcm5vY2FjaGUudGVzdCggZmlyc3QgKSAmJgoJCShqUXVlcnkuc3VwcG9ydC5jaGVja0Nsb25lIHx8ICFyY2hlY2tlZC50ZXN0KCBmaXJzdCApKSAmJgoJCShqUXVlcnkuc3VwcG9ydC5odG1sNUNsb25lIHx8ICFybm9zaGltY2FjaGUudGVzdCggZmlyc3QgKSkgKSB7CgoJCWNhY2hlYWJsZSA9IHRydWU7CgoJCWNhY2hlcmVzdWx0cyA9IGpRdWVyeS5mcmFnbWVudHNbIGZpcnN0IF07CgkJaWYgKCBjYWNoZXJlc3VsdHMgJiYgY2FjaGVyZXN1bHRzICE9PSAxICkgewoJCQlmcmFnbWVudCA9IGNhY2hlcmVzdWx0czsKCQl9Cgl9CgoJaWYgKCAhZnJhZ21lbnQgKSB7CgkJZnJhZ21lbnQgPSBkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwoJCWpRdWVyeS5jbGVhbiggYXJncywgZG9jLCBmcmFnbWVudCwgc2NyaXB0cyApOwoJfQoKCWlmICggY2FjaGVhYmxlICkgewoJCWpRdWVyeS5mcmFnbWVudHNbIGZpcnN0IF0gPSBjYWNoZXJlc3VsdHMgPyBmcmFnbWVudCA6IDE7Cgl9CgoJcmV0dXJuIHsgZnJhZ21lbnQ6IGZyYWdtZW50LCBjYWNoZWFibGU6IGNhY2hlYWJsZSB9Owp9OwoKalF1ZXJ5LmZyYWdtZW50cyA9IHt9OwoKalF1ZXJ5LmVhY2goewoJYXBwZW5kVG86ICJhcHBlbmQiLAoJcHJlcGVuZFRvOiAicHJlcGVuZCIsCglpbnNlcnRCZWZvcmU6ICJiZWZvcmUiLAoJaW5zZXJ0QWZ0ZXI6ICJhZnRlciIsCglyZXBsYWNlQWxsOiAicmVwbGFjZVdpdGgiCn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHsKCWpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkgewoJCXZhciByZXQgPSBbXSwKCQkJaW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLAoJCQlwYXJlbnQgPSB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzWzBdLnBhcmVudE5vZGU7CgoJCWlmICggcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSA9PT0gMTEgJiYgcGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICYmIGluc2VydC5sZW5ndGggPT09IDEgKSB7CgkJCWluc2VydFsgb3JpZ2luYWwgXSggdGhpc1swXSApOwoJCQlyZXR1cm4gdGhpczsKCgkJfSBlbHNlIHsKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gaW5zZXJ0Lmxlbmd0aDsgaSA8IGw7IGkrKyApIHsKCQkJCXZhciBlbGVtcyA9ICggaSA+IDAgPyB0aGlzLmNsb25lKHRydWUpIDogdGhpcyApLmdldCgpOwoJCQkJalF1ZXJ5KCBpbnNlcnRbaV0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTsKCQkJCXJldCA9IHJldC5jb25jYXQoIGVsZW1zICk7CgkJCX0KCgkJCXJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0LCBuYW1lLCBpbnNlcnQuc2VsZWN0b3IgKTsKCQl9Cgl9Owp9KTsKCmZ1bmN0aW9uIGdldEFsbCggZWxlbSApIHsKCWlmICggdHlwZW9mIGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09ICJ1bmRlZmluZWQiICkgewoJCXJldHVybiBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAiKiIgKTsKCgl9IGVsc2UgaWYgKCB0eXBlb2YgZWxlbS5xdWVyeVNlbGVjdG9yQWxsICE9PSAidW5kZWZpbmVkIiApIHsKCQlyZXR1cm4gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCAiKiIgKTsKCgl9IGVsc2UgewoJCXJldHVybiBbXTsKCX0KfQoKLy8gVXNlZCBpbiBjbGVhbiwgZml4ZXMgdGhlIGRlZmF1bHRDaGVja2VkIHByb3BlcnR5CmZ1bmN0aW9uIGZpeERlZmF1bHRDaGVja2VkKCBlbGVtICkgewoJaWYgKCBlbGVtLnR5cGUgPT09ICJjaGVja2JveCIgfHwgZWxlbS50eXBlID09PSAicmFkaW8iICkgewoJCWVsZW0uZGVmYXVsdENoZWNrZWQgPSBlbGVtLmNoZWNrZWQ7Cgl9Cn0KLy8gRmluZHMgYWxsIGlucHV0cyBhbmQgcGFzc2VzIHRoZW0gdG8gZml4RGVmYXVsdENoZWNrZWQKZnVuY3Rpb24gZmluZElucHV0cyggZWxlbSApIHsKCXZhciBub2RlTmFtZSA9ICggZWxlbS5ub2RlTmFtZSB8fCAiIiApLnRvTG93ZXJDYXNlKCk7CglpZiAoIG5vZGVOYW1lID09PSAiaW5wdXQiICkgewoJCWZpeERlZmF1bHRDaGVja2VkKCBlbGVtICk7CgkvLyBTa2lwIHNjcmlwdHMsIGdldCBvdGhlciBjaGlsZHJlbgoJfSBlbHNlIGlmICggbm9kZU5hbWUgIT09ICJzY3JpcHQiICYmIHR5cGVvZiBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSAidW5kZWZpbmVkIiApIHsKCQlqUXVlcnkuZ3JlcCggZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaW5wdXQiKSwgZml4RGVmYXVsdENoZWNrZWQgKTsKCX0KfQoKLy8gRGVyaXZlZCBGcm9tOiBodHRwOi8vd3d3LmllY3NzLmNvbS9zaGltcHJvdmUvamF2YXNjcmlwdC9zaGltcHJvdmUuMS0wLTEuanMKZnVuY3Rpb24gc2hpbUNsb25lTm9kZSggZWxlbSApIHsKCXZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApOwoJc2FmZUZyYWdtZW50LmFwcGVuZENoaWxkKCBkaXYgKTsKCglkaXYuaW5uZXJIVE1MID0gZWxlbS5vdXRlckhUTUw7CglyZXR1cm4gZGl2LmZpcnN0Q2hpbGQ7Cn0KCmpRdWVyeS5leHRlbmQoewoJY2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHsKCQl2YXIgc3JjRWxlbWVudHMsCgkJCWRlc3RFbGVtZW50cywKCQkJaSwKCQkJLy8gSUU8PTggZG9lcyBub3QgcHJvcGVybHkgY2xvbmUgZGV0YWNoZWQsIHVua25vd24gZWxlbWVudCBub2RlcwoJCQljbG9uZSA9IGpRdWVyeS5zdXBwb3J0Lmh0bWw1Q2xvbmUgfHwgalF1ZXJ5LmlzWE1MRG9jKGVsZW0pIHx8ICFybm9zaGltY2FjaGUudGVzdCggIjwiICsgZWxlbS5ub2RlTmFtZSArICI+IiApID8KCQkJCWVsZW0uY2xvbmVOb2RlKCB0cnVlICkgOgoJCQkJc2hpbUNsb25lTm9kZSggZWxlbSApOwoKCQlpZiAoICghalF1ZXJ5LnN1cHBvcnQubm9DbG9uZUV2ZW50IHx8ICFqUXVlcnkuc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCkgJiYKCQkJCShlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExKSAmJiAhalF1ZXJ5LmlzWE1MRG9jKGVsZW0pICkgewoJCQkvLyBJRSBjb3BpZXMgZXZlbnRzIGJvdW5kIHZpYSBhdHRhY2hFdmVudCB3aGVuIHVzaW5nIGNsb25lTm9kZS4KCQkJLy8gQ2FsbGluZyBkZXRhY2hFdmVudCBvbiB0aGUgY2xvbmUgd2lsbCBhbHNvIHJlbW92ZSB0aGUgZXZlbnRzCgkJCS8vIGZyb20gdGhlIG9yaWdpbmFsLiBJbiBvcmRlciB0byBnZXQgYXJvdW5kIHRoaXMsIHdlIHVzZSBzb21lCgkJCS8vIHByb3ByaWV0YXJ5IG1ldGhvZHMgdG8gY2xlYXIgdGhlIGV2ZW50cy4gVGhhbmtzIHRvIE1vb1Rvb2xzCgkJCS8vIGd1eXMgZm9yIHRoaXMgaG90bmVzcy4KCgkJCWNsb25lRml4QXR0cmlidXRlcyggZWxlbSwgY2xvbmUgKTsKCgkJCS8vIFVzaW5nIFNpenpsZSBoZXJlIGlzIGNyYXp5IHNsb3csIHNvIHdlIHVzZSBnZXRFbGVtZW50c0J5VGFnTmFtZSBpbnN0ZWFkCgkJCXNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7CgkJCWRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTsKCgkJCS8vIFdlaXJkIGl0ZXJhdGlvbiBiZWNhdXNlIElFIHdpbGwgcmVwbGFjZSB0aGUgbGVuZ3RoIHByb3BlcnR5CgkJCS8vIHdpdGggYW4gZWxlbWVudCBpZiB5b3UgYXJlIGNsb25pbmcgdGhlIGJvZHkgYW5kIG9uZSBvZiB0aGUKCQkJLy8gZWxlbWVudHMgb24gdGhlIHBhZ2UgaGFzIGEgbmFtZSBvciBpZCBvZiAibGVuZ3RoIgoJCQlmb3IgKCBpID0gMDsgc3JjRWxlbWVudHNbaV07ICsraSApIHsKCQkJCS8vIEVuc3VyZSB0aGF0IHRoZSBkZXN0aW5hdGlvbiBub2RlIGlzIG5vdCBudWxsOyBGaXhlcyAjOTU4NwoJCQkJaWYgKCBkZXN0RWxlbWVudHNbaV0gKSB7CgkJCQkJY2xvbmVGaXhBdHRyaWJ1dGVzKCBzcmNFbGVtZW50c1tpXSwgZGVzdEVsZW1lbnRzW2ldICk7CgkJCQl9CgkJCX0KCQl9CgoJCS8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmUKCQlpZiAoIGRhdGFBbmRFdmVudHMgKSB7CgkJCWNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApOwoKCQkJaWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHsKCQkJCXNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7CgkJCQlkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7CgoJCQkJZm9yICggaSA9IDA7IHNyY0VsZW1lbnRzW2ldOyArK2kgKSB7CgkJCQkJY2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzW2ldLCBkZXN0RWxlbWVudHNbaV0gKTsKCQkJCX0KCQkJfQoJCX0KCgkJc3JjRWxlbWVudHMgPSBkZXN0RWxlbWVudHMgPSBudWxsOwoKCQkvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXQKCQlyZXR1cm4gY2xvbmU7Cgl9LAoKCWNsZWFuOiBmdW5jdGlvbiggZWxlbXMsIGNvbnRleHQsIGZyYWdtZW50LCBzY3JpcHRzICkgewoJCXZhciBjaGVja1NjcmlwdFR5cGUsIHNjcmlwdCwgaiwKCQkJCXJldCA9IFtdOwoKCQljb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDsKCgkJLy8gIWNvbnRleHQuY3JlYXRlRWxlbWVudCBmYWlscyBpbiBJRSB3aXRoIGFuIGVycm9yIGJ1dCByZXR1cm5zIHR5cGVvZiAnb2JqZWN0JwoJCWlmICggdHlwZW9mIGNvbnRleHQuY3JlYXRlRWxlbWVudCA9PT0gInVuZGVmaW5lZCIgKSB7CgkJCWNvbnRleHQgPSBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dFswXSAmJiBjb250ZXh0WzBdLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7CgkJfQoKCQlmb3IgKCB2YXIgaSA9IDAsIGVsZW07IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHsKCQkJaWYgKCB0eXBlb2YgZWxlbSA9PT0gIm51bWJlciIgKSB7CgkJCQllbGVtICs9ICIiOwoJCQl9CgoJCQlpZiAoICFlbGVtICkgewoJCQkJY29udGludWU7CgkJCX0KCgkJCS8vIENvbnZlcnQgaHRtbCBzdHJpbmcgaW50byBET00gbm9kZXMKCQkJaWYgKCB0eXBlb2YgZWxlbSA9PT0gInN0cmluZyIgKSB7CgkJCQlpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7CgkJCQkJZWxlbSA9IGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKTsKCQkJCX0gZWxzZSB7CgkJCQkJLy8gRml4ICJYSFRNTCItc3R5bGUgdGFncyBpbiBhbGwgYnJvd3NlcnMKCQkJCQllbGVtID0gZWxlbS5yZXBsYWNlKHJ4aHRtbFRhZywgIjwkMT48LyQyPiIpOwoKCQkJCQkvLyBUcmltIHdoaXRlc3BhY2UsIG90aGVyd2lzZSBpbmRleE9mIHdvbid0IHdvcmsgYXMgZXhwZWN0ZWQKCQkJCQl2YXIgdGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyIiLCAiIl0gKVsxXS50b0xvd2VyQ2FzZSgpLAoJCQkJCQl3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdCwKCQkJCQkJZGVwdGggPSB3cmFwWzBdLAoJCQkJCQlkaXYgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoImRpdiIpLAoJCQkJCQlzYWZlQ2hpbGROb2RlcyA9IHNhZmVGcmFnbWVudC5jaGlsZE5vZGVzLAoJCQkJCQlyZW1vdmU7CgoJCQkJCS8vIEFwcGVuZCB3cmFwcGVyIGVsZW1lbnQgdG8gdW5rbm93biBlbGVtZW50IHNhZmUgZG9jIGZyYWdtZW50CgkJCQkJaWYgKCBjb250ZXh0ID09PSBkb2N1bWVudCApIHsKCQkJCQkJLy8gVXNlIHRoZSBmcmFnbWVudCB3ZSd2ZSBhbHJlYWR5IGNyZWF0ZWQgZm9yIHRoaXMgZG9jdW1lbnQKCQkJCQkJc2FmZUZyYWdtZW50LmFwcGVuZENoaWxkKCBkaXYgKTsKCQkJCQl9IGVsc2UgewoJCQkJCQkvLyBVc2UgYSBmcmFnbWVudCBjcmVhdGVkIHdpdGggdGhlIG93bmVyIGRvY3VtZW50CgkJCQkJCWNyZWF0ZVNhZmVGcmFnbWVudCggY29udGV4dCApLmFwcGVuZENoaWxkKCBkaXYgKTsKCQkJCQl9CgoJCQkJCS8vIEdvIHRvIGh0bWwgYW5kIGJhY2ssIHRoZW4gcGVlbCBvZmYgZXh0cmEgd3JhcHBlcnMKCQkJCQlkaXYuaW5uZXJIVE1MID0gd3JhcFsxXSArIGVsZW0gKyB3cmFwWzJdOwoKCQkJCQkvLyBNb3ZlIHRvIHRoZSByaWdodCBkZXB0aAoJCQkJCXdoaWxlICggZGVwdGgtLSApIHsKCQkJCQkJZGl2ID0gZGl2Lmxhc3RDaGlsZDsKCQkJCQl9CgoJCQkJCS8vIFJlbW92ZSBJRSdzIGF1dG9pbnNlcnRlZCA8dGJvZHk+IGZyb20gdGFibGUgZnJhZ21lbnRzCgkJCQkJaWYgKCAhalF1ZXJ5LnN1cHBvcnQudGJvZHkgKSB7CgoJCQkJCQkvLyBTdHJpbmcgd2FzIGEgPHRhYmxlPiwgKm1heSogaGF2ZSBzcHVyaW91cyA8dGJvZHk+CgkJCQkJCXZhciBoYXNCb2R5ID0gcnRib2R5LnRlc3QoZWxlbSksCgkJCQkJCQl0Ym9keSA9IHRhZyA9PT0gInRhYmxlIiAmJiAhaGFzQm9keSA/CgkJCQkJCQkJZGl2LmZpcnN0Q2hpbGQgJiYgZGl2LmZpcnN0Q2hpbGQuY2hpbGROb2RlcyA6CgoJCQkJCQkJCS8vIFN0cmluZyB3YXMgYSBiYXJlIDx0aGVhZD4gb3IgPHRmb290PgoJCQkJCQkJCXdyYXBbMV0gPT09ICI8dGFibGU+IiAmJiAhaGFzQm9keSA/CgkJCQkJCQkJCWRpdi5jaGlsZE5vZGVzIDoKCQkJCQkJCQkJW107CgoJCQkJCQlmb3IgKCBqID0gdGJvZHkubGVuZ3RoIC0gMTsgaiA+PSAwIDsgLS1qICkgewoJCQkJCQkJaWYgKCBqUXVlcnkubm9kZU5hbWUoIHRib2R5WyBqIF0sICJ0Ym9keSIgKSAmJiAhdGJvZHlbIGogXS5jaGlsZE5vZGVzLmxlbmd0aCApIHsKCQkJCQkJCQl0Ym9keVsgaiBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRib2R5WyBqIF0gKTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCgkJCQkJLy8gSUUgY29tcGxldGVseSBraWxscyBsZWFkaW5nIHdoaXRlc3BhY2Ugd2hlbiBpbm5lckhUTUwgaXMgdXNlZAoJCQkJCWlmICggIWpRdWVyeS5zdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlICYmIHJsZWFkaW5nV2hpdGVzcGFjZS50ZXN0KCBlbGVtICkgKSB7CgkJCQkJCWRpdi5pbnNlcnRCZWZvcmUoIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIHJsZWFkaW5nV2hpdGVzcGFjZS5leGVjKGVsZW0pWzBdICksIGRpdi5maXJzdENoaWxkICk7CgkJCQkJfQoKCQkJCQllbGVtID0gZGl2LmNoaWxkTm9kZXM7CgoJCQkJCS8vIENsZWFyIGVsZW1lbnRzIGZyb20gRG9jdW1lbnRGcmFnbWVudCAoc2FmZUZyYWdtZW50IG9yIG90aGVyd2lzZSkKCQkJCQkvLyB0byBhdm9pZCBob2FyZGluZyBlbGVtZW50cy4gRml4ZXMgIzExMzU2CgkJCQkJaWYgKCBkaXYgKSB7CgkJCQkJCWRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTsKCgkJCQkJCS8vIEd1YXJkIGFnYWluc3QgLTEgaW5kZXggZXhjZXB0aW9ucyBpbiBGRjMuNgoJCQkJCQlpZiAoIHNhZmVDaGlsZE5vZGVzLmxlbmd0aCA+IDAgKSB7CgkJCQkJCQlyZW1vdmUgPSBzYWZlQ2hpbGROb2Rlc1sgc2FmZUNoaWxkTm9kZXMubGVuZ3RoIC0gMSBdOwoKCQkJCQkJCWlmICggcmVtb3ZlICYmIHJlbW92ZS5wYXJlbnROb2RlICkgewoJCQkJCQkJCXJlbW92ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCByZW1vdmUgKTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJLy8gUmVzZXRzIGRlZmF1bHRDaGVja2VkIGZvciBhbnkgcmFkaW9zIGFuZCBjaGVja2JveGVzCgkJCS8vIGFib3V0IHRvIGJlIGFwcGVuZGVkIHRvIHRoZSBET00gaW4gSUUgNi83ICgjODA2MCkKCQkJdmFyIGxlbjsKCQkJaWYgKCAhalF1ZXJ5LnN1cHBvcnQuYXBwZW5kQ2hlY2tlZCApIHsKCQkJCWlmICggZWxlbVswXSAmJiB0eXBlb2YgKGxlbiA9IGVsZW0ubGVuZ3RoKSA9PT0gIm51bWJlciIgKSB7CgkJCQkJZm9yICggaiA9IDA7IGogPCBsZW47IGorKyApIHsKCQkJCQkJZmluZElucHV0cyggZWxlbVtqXSApOwoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJZmluZElucHV0cyggZWxlbSApOwoJCQkJfQoJCQl9CgoJCQlpZiAoIGVsZW0ubm9kZVR5cGUgKSB7CgkJCQlyZXQucHVzaCggZWxlbSApOwoJCQl9IGVsc2UgewoJCQkJcmV0ID0galF1ZXJ5Lm1lcmdlKCByZXQsIGVsZW0gKTsKCQkJfQoJCX0KCgkJaWYgKCBmcmFnbWVudCApIHsKCQkJY2hlY2tTY3JpcHRUeXBlID0gZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQlyZXR1cm4gIWVsZW0udHlwZSB8fCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgKTsKCQkJfTsKCQkJZm9yICggaSA9IDA7IHJldFtpXTsgaSsrICkgewoJCQkJc2NyaXB0ID0gcmV0W2ldOwoJCQkJaWYgKCBzY3JpcHRzICYmIGpRdWVyeS5ub2RlTmFtZSggc2NyaXB0LCAic2NyaXB0IiApICYmICghc2NyaXB0LnR5cGUgfHwgcnNjcmlwdFR5cGUudGVzdCggc2NyaXB0LnR5cGUgKSkgKSB7CgkJCQkJc2NyaXB0cy5wdXNoKCBzY3JpcHQucGFyZW50Tm9kZSA/IHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKSA6IHNjcmlwdCApOwoKCQkJCX0gZWxzZSB7CgkJCQkJaWYgKCBzY3JpcHQubm9kZVR5cGUgPT09IDEgKSB7CgkJCQkJCXZhciBqc1RhZ3MgPSBqUXVlcnkuZ3JlcCggc2NyaXB0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAic2NyaXB0IiApLCBjaGVja1NjcmlwdFR5cGUgKTsKCgkJCQkJCXJldC5zcGxpY2UuYXBwbHkoIHJldCwgW2kgKyAxLCAwXS5jb25jYXQoIGpzVGFncyApICk7CgkJCQkJfQoJCQkJCWZyYWdtZW50LmFwcGVuZENoaWxkKCBzY3JpcHQgKTsKCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIHJldDsKCX0sCgoJY2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7CgkJdmFyIGRhdGEsIGlkLAoJCQljYWNoZSA9IGpRdWVyeS5jYWNoZSwKCQkJc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLAoJCQlkZWxldGVFeHBhbmRvID0galF1ZXJ5LnN1cHBvcnQuZGVsZXRlRXhwYW5kbzsKCgkJZm9yICggdmFyIGkgPSAwLCBlbGVtOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7CgkJCWlmICggZWxlbS5ub2RlTmFtZSAmJiBqUXVlcnkubm9EYXRhW2VsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0gKSB7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJaWQgPSBlbGVtWyBqUXVlcnkuZXhwYW5kbyBdOwoKCQkJaWYgKCBpZCApIHsKCQkJCWRhdGEgPSBjYWNoZVsgaWQgXTsKCgkJCQlpZiAoIGRhdGEgJiYgZGF0YS5ldmVudHMgKSB7CgkJCQkJZm9yICggdmFyIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7CgkJCQkJCWlmICggc3BlY2lhbFsgdHlwZSBdICkgewoJCQkJCQkJalF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApOwoKCQkJCQkJLy8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZAoJCQkJCQl9IGVsc2UgewoJCQkJCQkJalF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApOwoJCQkJCQl9CgkJCQkJfQoKCQkJCQkvLyBOdWxsIHRoZSBET00gcmVmZXJlbmNlIHRvIGF2b2lkIElFNi83LzggbGVhayAoIzcwNTQpCgkJCQkJaWYgKCBkYXRhLmhhbmRsZSApIHsKCQkJCQkJZGF0YS5oYW5kbGUuZWxlbSA9IG51bGw7CgkJCQkJfQoJCQkJfQoKCQkJCWlmICggZGVsZXRlRXhwYW5kbyApIHsKCQkJCQlkZWxldGUgZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXTsKCgkJCQl9IGVsc2UgaWYgKCBlbGVtLnJlbW92ZUF0dHJpYnV0ZSApIHsKCQkJCQllbGVtLnJlbW92ZUF0dHJpYnV0ZSggalF1ZXJ5LmV4cGFuZG8gKTsKCQkJCX0KCgkJCQlkZWxldGUgY2FjaGVbIGlkIF07CgkJCX0KCQl9Cgl9Cn0pOwoKCgoKdmFyIHJhbHBoYSA9IC9hbHBoYVwoW14pXSpcKS9pLAoJcm9wYWNpdHkgPSAvb3BhY2l0eT0oW14pXSopLywKCS8vIGZpeGVkIGZvciBJRTksIHNlZSAjODM0NgoJcnVwcGVyID0gLyhbQS1aXXxebXMpL2csCglybnVtID0gL15bXC0rXT8oPzpcZCpcLik/XGQrJC9pLAoJcm51bW5vbnB4ID0gL14tPyg/OlxkKlwuKT9cZCsoPyFweClbXlxkXHNdKyQvaSwKCXJyZWxOdW0gPSAvXihbXC0rXSk9KFtcLSsuXGRlXSspLywKCXJtYXJnaW4gPSAvXm1hcmdpbi8sCgoJY3NzU2hvdyA9IHsgcG9zaXRpb246ICJhYnNvbHV0ZSIsIHZpc2liaWxpdHk6ICJoaWRkZW4iLCBkaXNwbGF5OiAiYmxvY2siIH0sCgoJLy8gb3JkZXIgaXMgaW1wb3J0YW50IQoJY3NzRXhwYW5kID0gWyAiVG9wIiwgIlJpZ2h0IiwgIkJvdHRvbSIsICJMZWZ0IiBdLAoKCWN1ckNTUywKCglnZXRDb21wdXRlZFN0eWxlLAoJY3VycmVudFN0eWxlOwoKalF1ZXJ5LmZuLmNzcyA9IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHsKCXJldHVybiBqUXVlcnkuYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7CgkJcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPwoJCQlqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOgoJCQlqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7Cgl9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTsKfTsKCmpRdWVyeS5leHRlbmQoewoJLy8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0CgkvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHkKCWNzc0hvb2tzOiB7CgkJb3BhY2l0eTogewoJCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHsKCQkJCWlmICggY29tcHV0ZWQgKSB7CgkJCQkJLy8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHkKCQkJCQl2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCAib3BhY2l0eSIgKTsKCQkJCQlyZXR1cm4gcmV0ID09PSAiIiA/ICIxIiA6IHJldDsKCgkJCQl9IGVsc2UgewoJCQkJCXJldHVybiBlbGVtLnN0eWxlLm9wYWNpdHk7CgkJCQl9CgkJCX0KCQl9Cgl9LAoKCS8vIEV4Y2x1ZGUgdGhlIGZvbGxvd2luZyBjc3MgcHJvcGVydGllcyB0byBhZGQgcHgKCWNzc051bWJlcjogewoJCSJmaWxsT3BhY2l0eSI6IHRydWUsCgkJImZvbnRXZWlnaHQiOiB0cnVlLAoJCSJsaW5lSGVpZ2h0IjogdHJ1ZSwKCQkib3BhY2l0eSI6IHRydWUsCgkJIm9ycGhhbnMiOiB0cnVlLAoJCSJ3aWRvd3MiOiB0cnVlLAoJCSJ6SW5kZXgiOiB0cnVlLAoJCSJ6b29tIjogdHJ1ZQoJfSwKCgkvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlCgkvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlCgljc3NQcm9wczogewoJCS8vIG5vcm1hbGl6ZSBmbG9hdCBjc3MgcHJvcGVydHkKCQkiZmxvYXQiOiBqUXVlcnkuc3VwcG9ydC5jc3NGbG9hdCA/ICJjc3NGbG9hdCIgOiAic3R5bGVGbG9hdCIKCX0sCgoJLy8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGUKCXN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkgewoJCS8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2RlcwoJCWlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUKCQl2YXIgcmV0LCB0eXBlLCBvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSwKCQkJc3R5bGUgPSBlbGVtLnN0eWxlLCBob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTsKCgkJbmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCBvcmlnTmFtZTsKCgkJLy8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlCgkJaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewoJCQl0eXBlID0gdHlwZW9mIHZhbHVlOwoKCQkJLy8gY29udmVydCByZWxhdGl2ZSBudW1iZXIgc3RyaW5ncyAoKz0gb3IgLT0pIHRvIHJlbGF0aXZlIG51bWJlcnMuICM3MzQ1CgkJCWlmICggdHlwZSA9PT0gInN0cmluZyIgJiYgKHJldCA9IHJyZWxOdW0uZXhlYyggdmFsdWUgKSkgKSB7CgkJCQl2YWx1ZSA9ICggKyggcmV0WzFdICsgMSkgKiArcmV0WzJdICkgKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTsKCQkJCS8vIEZpeGVzIGJ1ZyAjOTIzNwoJCQkJdHlwZSA9ICJudW1iZXIiOwoJCQl9CgoJCQkvLyBNYWtlIHN1cmUgdGhhdCBOYU4gYW5kIG51bGwgdmFsdWVzIGFyZW4ndCBzZXQuIFNlZTogIzcxMTYKCQkJaWYgKCB2YWx1ZSA9PSBudWxsIHx8IHR5cGUgPT09ICJudW1iZXIiICYmIGlzTmFOKCB2YWx1ZSApICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgJ3B4JyB0byB0aGUgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcykKCQkJaWYgKCB0eXBlID09PSAibnVtYmVyIiAmJiAhalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSApIHsKCQkJCXZhbHVlICs9ICJweCI7CgkJCX0KCgkJCS8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZQoJCQlpZiAoICFob29rcyB8fCAhKCJzZXQiIGluIGhvb2tzKSB8fCAodmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlICkpICE9PSB1bmRlZmluZWQgKSB7CgkJCQkvLyBXcmFwcGVkIHRvIHByZXZlbnQgSUUgZnJvbSB0aHJvd2luZyBlcnJvcnMgd2hlbiAnaW52YWxpZCcgdmFsdWVzIGFyZSBwcm92aWRlZAoJCQkJLy8gRml4ZXMgYnVnICM1NTA5CgkJCQl0cnkgewoJCQkJCXN0eWxlWyBuYW1lIF0gPSB2YWx1ZTsKCQkJCX0gY2F0Y2goZSkge30KCQkJfQoKCQl9IGVsc2UgewoJCQkvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmUKCQkJaWYgKCBob29rcyAmJiAiZ2V0IiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHsKCQkJCXJldHVybiByZXQ7CgkJCX0KCgkJCS8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0CgkJCXJldHVybiBzdHlsZVsgbmFtZSBdOwoJCX0KCX0sCgoJY3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEgKSB7CgkJdmFyIHJldCwgaG9va3M7CgoJCS8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZQoJCW5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7CgkJaG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTsKCQluYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgbmFtZTsKCgkJLy8gY3NzRmxvYXQgbmVlZHMgYSBzcGVjaWFsIHRyZWF0bWVudAoJCWlmICggbmFtZSA9PT0gImNzc0Zsb2F0IiApIHsKCQkJbmFtZSA9ICJmbG9hdCI7CgkJfQoKCQkvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZQoJCWlmICggaG9va3MgJiYgImdldCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHsKCQkJcmV0dXJuIHJldDsKCgkJLy8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXQKCQl9IGVsc2UgaWYgKCBjdXJDU1MgKSB7CgkJCXJldHVybiBjdXJDU1MoIGVsZW0sIG5hbWUgKTsKCQl9Cgl9LAoKCS8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMKCXN3YXA6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHsKCQl2YXIgb2xkID0ge30sCgkJCXJldCwgbmFtZTsKCgkJLy8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzCgkJZm9yICggbmFtZSBpbiBvcHRpb25zICkgewoJCQlvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTsKCQkJZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdOwoJCX0KCgkJcmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApOwoKCQkvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXMKCQlmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7CgkJCWVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdOwoJCX0KCgkJcmV0dXJuIHJldDsKCX0KfSk7CgovLyBERVBSRUNBVEVEIGluIDEuMywgVXNlIGpRdWVyeS5jc3MoKSBpbnN0ZWFkCmpRdWVyeS5jdXJDU1MgPSBqUXVlcnkuY3NzOwoKaWYgKCBkb2N1bWVudC5kZWZhdWx0VmlldyAmJiBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlICkgewoJZ2V0Q29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkgewoJCXZhciByZXQsIGRlZmF1bHRWaWV3LCBjb21wdXRlZFN0eWxlLCB3aWR0aCwKCQkJc3R5bGUgPSBlbGVtLnN0eWxlOwoKCQluYW1lID0gbmFtZS5yZXBsYWNlKCBydXBwZXIsICItJDEiICkudG9Mb3dlckNhc2UoKTsKCgkJaWYgKCAoZGVmYXVsdFZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmCgkJCQkoY29tcHV0ZWRTdHlsZSA9IGRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKSkgKSB7CgoJCQlyZXQgPSBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKTsKCQkJaWYgKCByZXQgPT09ICIiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGVsZW0gKSApIHsKCQkJCXJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApOwoJCQl9CgkJfQoKCQkvLyBBIHRyaWJ1dGUgdG8gdGhlICJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzIgoJCS8vIFdlYktpdCB1c2VzICJjb21wdXRlZCB2YWx1ZSAocGVyY2VudGFnZSBpZiBzcGVjaWZpZWQpIiBpbnN0ZWFkIG9mICJ1c2VkIHZhbHVlIiBmb3IgbWFyZ2lucwoJCS8vIHdoaWNoIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6IGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXMKCQlpZiAoICFqUXVlcnkuc3VwcG9ydC5waXhlbE1hcmdpbiAmJiBjb21wdXRlZFN0eWxlICYmIHJtYXJnaW4udGVzdCggbmFtZSApICYmIHJudW1ub25weC50ZXN0KCByZXQgKSApIHsKCQkJd2lkdGggPSBzdHlsZS53aWR0aDsKCQkJc3R5bGUud2lkdGggPSByZXQ7CgkJCXJldCA9IGNvbXB1dGVkU3R5bGUud2lkdGg7CgkJCXN0eWxlLndpZHRoID0gd2lkdGg7CgkJfQoKCQlyZXR1cm4gcmV0OwoJfTsKfQoKaWYgKCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY3VycmVudFN0eWxlICkgewoJY3VycmVudFN0eWxlID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7CgkJdmFyIGxlZnQsIHJzTGVmdCwgdW5jb21wdXRlZCwKCQkJcmV0ID0gZWxlbS5jdXJyZW50U3R5bGUgJiYgZWxlbS5jdXJyZW50U3R5bGVbIG5hbWUgXSwKCQkJc3R5bGUgPSBlbGVtLnN0eWxlOwoKCQkvLyBBdm9pZCBzZXR0aW5nIHJldCB0byBlbXB0eSBzdHJpbmcgaGVyZQoJCS8vIHNvIHdlIGRvbid0IGRlZmF1bHQgdG8gYXV0bwoJCWlmICggcmV0ID09IG51bGwgJiYgc3R5bGUgJiYgKHVuY29tcHV0ZWQgPSBzdHlsZVsgbmFtZSBdKSApIHsKCQkJcmV0ID0gdW5jb21wdXRlZDsKCQl9CgoJCS8vIEZyb20gdGhlIGF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHMKCQkvLyBodHRwOi8vZXJpay5lYWUubmV0L2FyY2hpdmVzLzIwMDcvMDcvMjcvMTguNTQuMTUvI2NvbW1lbnQtMTAyMjkxCgoJCS8vIElmIHdlJ3JlIG5vdCBkZWFsaW5nIHdpdGggYSByZWd1bGFyIHBpeGVsIG51bWJlcgoJCS8vIGJ1dCBhIG51bWJlciB0aGF0IGhhcyBhIHdlaXJkIGVuZGluZywgd2UgbmVlZCB0byBjb252ZXJ0IGl0IHRvIHBpeGVscwoJCWlmICggcm51bW5vbnB4LnRlc3QoIHJldCApICkgewoKCQkJLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlcwoJCQlsZWZ0ID0gc3R5bGUubGVmdDsKCQkJcnNMZWZ0ID0gZWxlbS5ydW50aW1lU3R5bGUgJiYgZWxlbS5ydW50aW1lU3R5bGUubGVmdDsKCgkJCS8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXQKCQkJaWYgKCByc0xlZnQgKSB7CgkJCQllbGVtLnJ1bnRpbWVTdHlsZS5sZWZ0ID0gZWxlbS5jdXJyZW50U3R5bGUubGVmdDsKCQkJfQoJCQlzdHlsZS5sZWZ0ID0gbmFtZSA9PT0gImZvbnRTaXplIiA/ICIxZW0iIDogcmV0OwoJCQlyZXQgPSBzdHlsZS5waXhlbExlZnQgKyAicHgiOwoKCQkJLy8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlcwoJCQlzdHlsZS5sZWZ0ID0gbGVmdDsKCQkJaWYgKCByc0xlZnQgKSB7CgkJCQllbGVtLnJ1bnRpbWVTdHlsZS5sZWZ0ID0gcnNMZWZ0OwoJCQl9CgkJfQoKCQlyZXR1cm4gcmV0ID09PSAiIiA/ICJhdXRvIiA6IHJldDsKCX07Cn0KCmN1ckNTUyA9IGdldENvbXB1dGVkU3R5bGUgfHwgY3VycmVudFN0eWxlOwoKZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7CgoJLy8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHkKCXZhciB2YWwgPSBuYW1lID09PSAid2lkdGgiID8gZWxlbS5vZmZzZXRXaWR0aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0LAoJCWkgPSBuYW1lID09PSAid2lkdGgiID8gMSA6IDAsCgkJbGVuID0gNDsKCglpZiAoIHZhbCA+IDAgKSB7CgkJaWYgKCBleHRyYSAhPT0gImJvcmRlciIgKSB7CgkJCWZvciAoIDsgaSA8IGxlbjsgaSArPSAyICkgewoJCQkJaWYgKCAhZXh0cmEgKSB7CgkJCQkJdmFsIC09IHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoIGVsZW0sICJwYWRkaW5nIiArIGNzc0V4cGFuZFsgaSBdICkgKSB8fCAwOwoJCQkJfQoJCQkJaWYgKCBleHRyYSA9PT0gIm1hcmdpbiIgKSB7CgkJCQkJdmFsICs9IHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0gKSApIHx8IDA7CgkJCQl9IGVsc2UgewoJCQkJCXZhbCAtPSBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCAiYm9yZGVyIiArIGNzc0V4cGFuZFsgaSBdICsgIldpZHRoIiApICkgfHwgMDsKCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIHZhbCArICJweCI7Cgl9CgoJLy8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5Cgl2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUgKTsKCWlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHsKCQl2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07Cgl9CgoJLy8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi4KCWlmICggcm51bW5vbnB4LnRlc3QodmFsKSApIHsKCQlyZXR1cm4gdmFsOwoJfQoKCS8vIE5vcm1hbGl6ZSAiIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhCgl2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwOwoKCS8vIEFkZCBwYWRkaW5nLCBib3JkZXIsIG1hcmdpbgoJaWYgKCBleHRyYSApIHsKCQlmb3IgKCA7IGkgPCBsZW47IGkgKz0gMiApIHsKCQkJdmFsICs9IHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoIGVsZW0sICJwYWRkaW5nIiArIGNzc0V4cGFuZFsgaSBdICkgKSB8fCAwOwoJCQlpZiAoIGV4dHJhICE9PSAicGFkZGluZyIgKSB7CgkJCQl2YWwgKz0gcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgImJvcmRlciIgKyBjc3NFeHBhbmRbIGkgXSArICJXaWR0aCIgKSApIHx8IDA7CgkJCX0KCQkJaWYgKCBleHRyYSA9PT0gIm1hcmdpbiIgKSB7CgkJCQl2YWwgKz0gcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSkgKSB8fCAwOwoJCQl9CgkJfQoJfQoKCXJldHVybiB2YWwgKyAicHgiOwp9CgpqUXVlcnkuZWFjaChbICJoZWlnaHQiLCAid2lkdGgiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkgewoJalF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7CgkJZ2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkgewoJCQlpZiAoIGNvbXB1dGVkICkgewoJCQkJaWYgKCBlbGVtLm9mZnNldFdpZHRoICE9PSAwICkgewoJCQkJCXJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApOwoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4galF1ZXJ5LnN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkgewoJCQkJCQlyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTsKCQkJCQl9KTsKCQkJCX0KCQkJfQoJCX0sCgoJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewoJCQlyZXR1cm4gcm51bS50ZXN0KCB2YWx1ZSApID8KCQkJCXZhbHVlICsgInB4IiA6CgkJCQl2YWx1ZTsKCQl9Cgl9Owp9KTsKCmlmICggIWpRdWVyeS5zdXBwb3J0Lm9wYWNpdHkgKSB7CglqUXVlcnkuY3NzSG9va3Mub3BhY2l0eSA9IHsKCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHsKCQkJLy8gSUUgdXNlcyBmaWx0ZXJzIGZvciBvcGFjaXR5CgkJCXJldHVybiByb3BhY2l0eS50ZXN0KCAoY29tcHV0ZWQgJiYgZWxlbS5jdXJyZW50U3R5bGUgPyBlbGVtLmN1cnJlbnRTdHlsZS5maWx0ZXIgOiBlbGVtLnN0eWxlLmZpbHRlcikgfHwgIiIgKSA/CgkJCQkoIHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApIC8gMTAwICkgKyAiIiA6CgkJCQljb21wdXRlZCA/ICIxIiA6ICIiOwoJCX0sCgoJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewoJCQl2YXIgc3R5bGUgPSBlbGVtLnN0eWxlLAoJCQkJY3VycmVudFN0eWxlID0gZWxlbS5jdXJyZW50U3R5bGUsCgkJCQlvcGFjaXR5ID0galF1ZXJ5LmlzTnVtZXJpYyggdmFsdWUgKSA/ICJhbHBoYShvcGFjaXR5PSIgKyB2YWx1ZSAqIDEwMCArICIpIiA6ICIiLAoJCQkJZmlsdGVyID0gY3VycmVudFN0eWxlICYmIGN1cnJlbnRTdHlsZS5maWx0ZXIgfHwgc3R5bGUuZmlsdGVyIHx8ICIiOwoKCQkJLy8gSUUgaGFzIHRyb3VibGUgd2l0aCBvcGFjaXR5IGlmIGl0IGRvZXMgbm90IGhhdmUgbGF5b3V0CgkJCS8vIEZvcmNlIGl0IGJ5IHNldHRpbmcgdGhlIHpvb20gbGV2ZWwKCQkJc3R5bGUuem9vbSA9IDE7CgoJCQkvLyBpZiBzZXR0aW5nIG9wYWNpdHkgdG8gMSwgYW5kIG5vIG90aGVyIGZpbHRlcnMgZXhpc3QgLSBhdHRlbXB0IHRvIHJlbW92ZSBmaWx0ZXIgYXR0cmlidXRlICM2NjUyCgkJCWlmICggdmFsdWUgPj0gMSAmJiBqUXVlcnkudHJpbSggZmlsdGVyLnJlcGxhY2UoIHJhbHBoYSwgIiIgKSApID09PSAiIiApIHsKCgkJCQkvLyBTZXR0aW5nIHN0eWxlLmZpbHRlciB0byBudWxsLCAiIiAmICIgIiBzdGlsbCBsZWF2ZSAiZmlsdGVyOiIgaW4gdGhlIGNzc1RleHQKCQkJCS8vIGlmICJmaWx0ZXI6IiBpcyBwcmVzZW50IGF0IGFsbCwgY2xlYXJUeXBlIGlzIGRpc2FibGVkLCB3ZSB3YW50IHRvIGF2b2lkIHRoaXMKCQkJCS8vIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSBpcyBJRSBPbmx5LCBidXQgc28gYXBwYXJlbnRseSBpcyB0aGlzIGNvZGUgcGF0aC4uLgoJCQkJc3R5bGUucmVtb3ZlQXR0cmlidXRlKCAiZmlsdGVyIiApOwoKCQkJCS8vIGlmIHRoZXJlIHRoZXJlIGlzIG5vIGZpbHRlciBzdHlsZSBhcHBsaWVkIGluIGEgY3NzIHJ1bGUsIHdlIGFyZSBkb25lCgkJCQlpZiAoIGN1cnJlbnRTdHlsZSAmJiAhY3VycmVudFN0eWxlLmZpbHRlciApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgkJCX0KCgkJCS8vIG90aGVyd2lzZSwgc2V0IG5ldyBmaWx0ZXIgdmFsdWVzCgkJCXN0eWxlLmZpbHRlciA9IHJhbHBoYS50ZXN0KCBmaWx0ZXIgKSA/CgkJCQlmaWx0ZXIucmVwbGFjZSggcmFscGhhLCBvcGFjaXR5ICkgOgoJCQkJZmlsdGVyICsgIiAiICsgb3BhY2l0eTsKCQl9Cgl9Owp9CgpqUXVlcnkoZnVuY3Rpb24oKSB7CgkvLyBUaGlzIGhvb2sgY2Fubm90IGJlIGFkZGVkIHVudGlsIERPTSByZWFkeSBiZWNhdXNlIHRoZSBzdXBwb3J0IHRlc3QKCS8vIGZvciBpdCBpcyBub3QgcnVuIHVudGlsIGFmdGVyIERPTSByZWFkeQoJaWYgKCAhalF1ZXJ5LnN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCApIHsKCQlqUXVlcnkuY3NzSG9va3MubWFyZ2luUmlnaHQgPSB7CgkJCWdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkgewoJCQkJLy8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0CgkJCQkvLyBXb3JrIGFyb3VuZCBieSB0ZW1wb3JhcmlseSBzZXR0aW5nIGVsZW1lbnQgZGlzcGxheSB0byBpbmxpbmUtYmxvY2sKCQkJCXJldHVybiBqUXVlcnkuc3dhcCggZWxlbSwgeyAiZGlzcGxheSI6ICJpbmxpbmUtYmxvY2siIH0sIGZ1bmN0aW9uKCkgewoJCQkJCWlmICggY29tcHV0ZWQgKSB7CgkJCQkJCXJldHVybiBjdXJDU1MoIGVsZW0sICJtYXJnaW4tcmlnaHQiICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJcmV0dXJuIGVsZW0uc3R5bGUubWFyZ2luUmlnaHQ7CgkJCQkJfQoJCQkJfSk7CgkJCX0KCQl9OwoJfQp9KTsKCmlmICggalF1ZXJ5LmV4cHIgJiYgalF1ZXJ5LmV4cHIuZmlsdGVycyApIHsKCWpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7CgkJdmFyIHdpZHRoID0gZWxlbS5vZmZzZXRXaWR0aCwKCQkJaGVpZ2h0ID0gZWxlbS5vZmZzZXRIZWlnaHQ7CgoJCXJldHVybiAoIHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMCApIHx8ICghalF1ZXJ5LnN1cHBvcnQucmVsaWFibGVIaWRkZW5PZmZzZXRzICYmICgoZWxlbS5zdHlsZSAmJiBlbGVtLnN0eWxlLmRpc3BsYXkpIHx8IGpRdWVyeS5jc3MoIGVsZW0sICJkaXNwbGF5IiApKSA9PT0gIm5vbmUiKTsKCX07CgoJalF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7CgkJcmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiggZWxlbSApOwoJfTsKfQoKLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllcwpqUXVlcnkuZWFjaCh7CgltYXJnaW46ICIiLAoJcGFkZGluZzogIiIsCglib3JkZXI6ICJXaWR0aCIKfSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkgewoKCWpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7CgkJZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCXZhciBpLAoKCQkJCS8vIGFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZwoJCQkJcGFydHMgPSB0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciID8gdmFsdWUuc3BsaXQoIiAiKSA6IFsgdmFsdWUgXSwKCQkJCWV4cGFuZGVkID0ge307CgoJCQlmb3IgKCBpID0gMDsgaSA8IDQ7IGkrKyApIHsKCQkJCWV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID0KCQkJCQlwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07CgkJCX0KCgkJCXJldHVybiBleHBhbmRlZDsKCQl9Cgl9Owp9KTsKCgoKCnZhciByMjAgPSAvJTIwL2csCglyYnJhY2tldCA9IC9cW1xdJC8sCglyQ1JMRiA9IC9ccj9cbi9nLAoJcmhhc2ggPSAvIy4qJC8sCglyaGVhZGVycyA9IC9eKC4qPyk6WyBcdF0qKFteXHJcbl0qKVxyPyQvbWcsIC8vIElFIGxlYXZlcyBhbiBcciBjaGFyYWN0ZXIgYXQgRU9MCglyaW5wdXQgPSAvXig/OmNvbG9yfGRhdGV8ZGF0ZXRpbWV8ZGF0ZXRpbWUtbG9jYWx8ZW1haWx8aGlkZGVufG1vbnRofG51bWJlcnxwYXNzd29yZHxyYW5nZXxzZWFyY2h8dGVsfHRleHR8dGltZXx1cmx8d2VlaykkL2ksCgkvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb24KCXJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwXC1zdG9yYWdlfC4rXC1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLywKCXJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLAoJcnByb3RvY29sID0gL15cL1wvLywKCXJxdWVyeSA9IC9cPy8sCglyc2NyaXB0ID0gLzxzY3JpcHRcYltePF0qKD86KD8hPFwvc2NyaXB0Pik8W148XSopKjxcL3NjcmlwdD4vZ2ksCglyc2VsZWN0VGV4dGFyZWEgPSAvXig/OnNlbGVjdHx0ZXh0YXJlYSkvaSwKCXJzcGFjZXNBamF4ID0gL1xzKy8sCglydHMgPSAvKFs/Jl0pXz1bXiZdKi8sCglydXJsID0gL14oW1x3XCtcLlwtXSs6KSg/OlwvXC8oW15cLz8jOl0qKSg/OjooXGQrKSk/KT8vLAoKCS8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2QKCV9sb2FkID0galF1ZXJ5LmZuLmxvYWQsCgoJLyogUHJlZmlsdGVycwoJICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSkKCSAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6CgkgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0CgkgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpCgkgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlCgkgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sICIqIiBjYW4gYmUgdXNlZAoJICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byAiKiIgaWYgbmVlZGVkCgkgKi8KCXByZWZpbHRlcnMgPSB7fSwKCgkvKiBUcmFuc3BvcnRzIGJpbmRpbmdzCgkgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlCgkgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sICIqIiBjYW4gYmUgdXNlZAoJICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gIioiIGlmIG5lZWRlZAoJICovCgl0cmFuc3BvcnRzID0ge30sCgoJLy8gRG9jdW1lbnQgbG9jYXRpb24KCWFqYXhMb2NhdGlvbiwKCgkvLyBEb2N1bWVudCBsb2NhdGlvbiBzZWdtZW50cwoJYWpheExvY1BhcnRzLAoKCS8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvbgoJYWxsVHlwZXMgPSBbIiovIl0gKyBbIioiXTsKCi8vICM4MTM4LCBJRSBtYXkgdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gYWNjZXNzaW5nCi8vIGEgZmllbGQgZnJvbSB3aW5kb3cubG9jYXRpb24gaWYgZG9jdW1lbnQuZG9tYWluIGhhcyBiZWVuIHNldAp0cnkgewoJYWpheExvY2F0aW9uID0gbG9jYXRpb24uaHJlZjsKfSBjYXRjaCggZSApIHsKCS8vIFVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUgb2YgYW4gQSBlbGVtZW50CgkvLyBzaW5jZSBJRSB3aWxsIG1vZGlmeSBpdCBnaXZlbiBkb2N1bWVudC5sb2NhdGlvbgoJYWpheExvY2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImEiICk7CglhamF4TG9jYXRpb24uaHJlZiA9ICIiOwoJYWpheExvY2F0aW9uID0gYWpheExvY2F0aW9uLmhyZWY7Cn0KCi8vIFNlZ21lbnQgbG9jYXRpb24gaW50byBwYXJ0cwphamF4TG9jUGFydHMgPSBydXJsLmV4ZWMoIGFqYXhMb2NhdGlvbi50b0xvd2VyQ2FzZSgpICkgfHwgW107CgovLyBCYXNlICJjb25zdHJ1Y3RvciIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydApmdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHsKCgkvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvICIqIgoJcmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7CgoJCWlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gInN0cmluZyIgKSB7CgkJCWZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247CgkJCWRhdGFUeXBlRXhwcmVzc2lvbiA9ICIqIjsKCQl9CgoJCWlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHsKCQkJdmFyIGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLnNwbGl0KCByc3BhY2VzQWpheCApLAoJCQkJaSA9IDAsCgkJCQlsZW5ndGggPSBkYXRhVHlwZXMubGVuZ3RoLAoJCQkJZGF0YVR5cGUsCgkJCQlsaXN0LAoJCQkJcGxhY2VCZWZvcmU7CgoJCQkvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uCgkJCWZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkgewoJCQkJZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkgXTsKCQkJCS8vIFdlIGNvbnRyb2wgaWYgd2UncmUgYXNrZWQgdG8gYWRkIGJlZm9yZQoJCQkJLy8gYW55IGV4aXN0aW5nIGVsZW1lbnQKCQkJCXBsYWNlQmVmb3JlID0gL15cKy8udGVzdCggZGF0YVR5cGUgKTsKCQkJCWlmICggcGxhY2VCZWZvcmUgKSB7CgkJCQkJZGF0YVR5cGUgPSBkYXRhVHlwZS5zdWJzdHIoIDEgKSB8fCAiKiI7CgkJCQl9CgkJCQlsaXN0ID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdOwoJCQkJLy8gdGhlbiB3ZSBhZGQgdG8gdGhlIHN0cnVjdHVyZSBhY2NvcmRpbmdseQoJCQkJbGlzdFsgcGxhY2VCZWZvcmUgPyAidW5zaGlmdCIgOiAicHVzaCIgXSggZnVuYyApOwoJCQl9CgkJfQoJfTsKfQoKLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzCmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIsCgkJZGF0YVR5cGUgLyogaW50ZXJuYWwgKi8sIGluc3BlY3RlZCAvKiBpbnRlcm5hbCAqLyApIHsKCglkYXRhVHlwZSA9IGRhdGFUeXBlIHx8IG9wdGlvbnMuZGF0YVR5cGVzWyAwIF07CglpbnNwZWN0ZWQgPSBpbnNwZWN0ZWQgfHwge307CgoJaW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTsKCgl2YXIgbGlzdCA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSwKCQlpID0gMCwKCQlsZW5ndGggPSBsaXN0ID8gbGlzdC5sZW5ndGggOiAwLAoJCWV4ZWN1dGVPbmx5ID0gKCBzdHJ1Y3R1cmUgPT09IHByZWZpbHRlcnMgKSwKCQlzZWxlY3Rpb247CgoJZm9yICggOyBpIDwgbGVuZ3RoICYmICggZXhlY3V0ZU9ubHkgfHwgIXNlbGVjdGlvbiApOyBpKysgKSB7CgkJc2VsZWN0aW9uID0gbGlzdFsgaSBdKCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7CgkJLy8gSWYgd2UgZ290IHJlZGlyZWN0ZWQgdG8gYW5vdGhlciBkYXRhVHlwZQoJCS8vIHdlIHRyeSB0aGVyZSBpZiBleGVjdXRpbmcgb25seSBhbmQgbm90IGRvbmUgYWxyZWFkeQoJCWlmICggdHlwZW9mIHNlbGVjdGlvbiA9PT0gInN0cmluZyIgKSB7CgkJCWlmICggIWV4ZWN1dGVPbmx5IHx8IGluc3BlY3RlZFsgc2VsZWN0aW9uIF0gKSB7CgkJCQlzZWxlY3Rpb24gPSB1bmRlZmluZWQ7CgkJCX0gZWxzZSB7CgkJCQlvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBzZWxlY3Rpb24gKTsKCQkJCXNlbGVjdGlvbiA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKAoJCQkJCQlzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIsIHNlbGVjdGlvbiwgaW5zcGVjdGVkICk7CgkJCX0KCQl9Cgl9CgkvLyBJZiB3ZSdyZSBvbmx5IGV4ZWN1dGluZyBvciBub3RoaW5nIHdhcyBzZWxlY3RlZAoJLy8gd2UgdHJ5IHRoZSBjYXRjaGFsbCBkYXRhVHlwZSBpZiBub3QgZG9uZSBhbHJlYWR5CglpZiAoICggZXhlY3V0ZU9ubHkgfHwgIXNlbGVjdGlvbiApICYmICFpbnNwZWN0ZWRbICIqIiBdICkgewoJCXNlbGVjdGlvbiA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKAoJCQkJc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSLCAiKiIsIGluc3BlY3RlZCApOwoJfQoJLy8gdW5uZWNlc3Nhcnkgd2hlbiBvbmx5IGV4ZWN1dGluZyAocHJlZmlsdGVycykKCS8vIGJ1dCBpdCdsbCBiZSBpZ25vcmVkIGJ5IHRoZSBjYWxsZXIgaW4gdGhhdCBjYXNlCglyZXR1cm4gc2VsZWN0aW9uOwp9CgovLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnMKLy8gdGhhdCB0YWtlcyAiZmxhdCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpCi8vIEZpeGVzICM5ODg3CmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkgewoJdmFyIGtleSwgZGVlcCwKCQlmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307Cglmb3IgKCBrZXkgaW4gc3JjICkgewoJCWlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkgewoJCQkoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdOwoJCX0KCX0KCWlmICggZGVlcCApIHsKCQlqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTsKCX0KfQoKalF1ZXJ5LmZuLmV4dGVuZCh7Cglsb2FkOiBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkgewoJCWlmICggdHlwZW9mIHVybCAhPT0gInN0cmluZyIgJiYgX2xvYWQgKSB7CgkJCXJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgoJCS8vIERvbid0IGRvIGEgcmVxdWVzdCBpZiBubyBlbGVtZW50cyBhcmUgYmVpbmcgcmVxdWVzdGVkCgkJfSBlbHNlIGlmICggIXRoaXMubGVuZ3RoICkgewoJCQlyZXR1cm4gdGhpczsKCQl9CgoJCXZhciBvZmYgPSB1cmwuaW5kZXhPZiggIiAiICk7CgkJaWYgKCBvZmYgPj0gMCApIHsKCQkJdmFyIHNlbGVjdG9yID0gdXJsLnNsaWNlKCBvZmYsIHVybC5sZW5ndGggKTsKCQkJdXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTsKCQl9CgoJCS8vIERlZmF1bHQgdG8gYSBHRVQgcmVxdWVzdAoJCXZhciB0eXBlID0gIkdFVCI7CgoJCS8vIElmIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHdhcyBwcm92aWRlZAoJCWlmICggcGFyYW1zICkgewoJCQkvLyBJZiBpdCdzIGEgZnVuY3Rpb24KCQkJaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7CgkJCQkvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFjawoJCQkJY2FsbGJhY2sgPSBwYXJhbXM7CgkJCQlwYXJhbXMgPSB1bmRlZmluZWQ7CgoJCQkvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nCgkJCX0gZWxzZSBpZiAoIHR5cGVvZiBwYXJhbXMgPT09ICJvYmplY3QiICkgewoJCQkJcGFyYW1zID0galF1ZXJ5LnBhcmFtKCBwYXJhbXMsIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWwgKTsKCQkJCXR5cGUgPSAiUE9TVCI7CgkJCX0KCQl9CgoJCXZhciBzZWxmID0gdGhpczsKCgkJLy8gUmVxdWVzdCB0aGUgcmVtb3RlIGRvY3VtZW50CgkJalF1ZXJ5LmFqYXgoewoJCQl1cmw6IHVybCwKCQkJdHlwZTogdHlwZSwKCQkJZGF0YVR5cGU6ICJodG1sIiwKCQkJZGF0YTogcGFyYW1zLAoJCQkvLyBDb21wbGV0ZSBjYWxsYmFjayAocmVzcG9uc2VUZXh0IGlzIHVzZWQgaW50ZXJuYWxseSkKCQkJY29tcGxldGU6IGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzLCByZXNwb25zZVRleHQgKSB7CgkJCQkvLyBTdG9yZSB0aGUgcmVzcG9uc2UgYXMgc3BlY2lmaWVkIGJ5IHRoZSBqcVhIUiBvYmplY3QKCQkJCXJlc3BvbnNlVGV4dCA9IGpxWEhSLnJlc3BvbnNlVGV4dDsKCQkJCS8vIElmIHN1Y2Nlc3NmdWwsIGluamVjdCB0aGUgSFRNTCBpbnRvIGFsbCB0aGUgbWF0Y2hlZCBlbGVtZW50cwoJCQkJaWYgKCBqcVhIUi5pc1Jlc29sdmVkKCkgKSB7CgkJCQkJLy8gIzQ4MjU6IEdldCB0aGUgYWN0dWFsIHJlc3BvbnNlIGluIGNhc2UKCQkJCQkvLyBhIGRhdGFGaWx0ZXIgaXMgcHJlc2VudCBpbiBhamF4U2V0dGluZ3MKCQkJCQlqcVhIUi5kb25lKGZ1bmN0aW9uKCByICkgewoJCQkJCQlyZXNwb25zZVRleHQgPSByOwoJCQkJCX0pOwoJCQkJCS8vIFNlZSBpZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQKCQkJCQlzZWxmLmh0bWwoIHNlbGVjdG9yID8KCQkJCQkJLy8gQ3JlYXRlIGEgZHVtbXkgZGl2IHRvIGhvbGQgdGhlIHJlc3VsdHMKCQkJCQkJalF1ZXJ5KCI8ZGl2PiIpCgkJCQkJCQkvLyBpbmplY3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBkb2N1bWVudCBpbiwgcmVtb3ZpbmcgdGhlIHNjcmlwdHMKCQkJCQkJCS8vIHRvIGF2b2lkIGFueSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9ycyBpbiBJRQoJCQkJCQkJLmFwcGVuZChyZXNwb25zZVRleHQucmVwbGFjZShyc2NyaXB0LCAiIikpCgoJCQkJCQkJLy8gTG9jYXRlIHRoZSBzcGVjaWZpZWQgZWxlbWVudHMKCQkJCQkJCS5maW5kKHNlbGVjdG9yKSA6CgoJCQkJCQkvLyBJZiBub3QsIGp1c3QgaW5qZWN0IHRoZSBmdWxsIHJlc3VsdAoJCQkJCQlyZXNwb25zZVRleHQgKTsKCQkJCX0KCgkJCQlpZiAoIGNhbGxiYWNrICkgewoJCQkJCXNlbGYuZWFjaCggY2FsbGJhY2ssIFsgcmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTsKCQkJCX0KCQkJfQoJCX0pOwoKCQlyZXR1cm4gdGhpczsKCX0sCgoJc2VyaWFsaXplOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTsKCX0sCgoJc2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpewoJCQlyZXR1cm4gdGhpcy5lbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIHRoaXMuZWxlbWVudHMgKSA6IHRoaXM7CgkJfSkKCQkuZmlsdGVyKGZ1bmN0aW9uKCl7CgkJCXJldHVybiB0aGlzLm5hbWUgJiYgIXRoaXMuZGlzYWJsZWQgJiYKCQkJCSggdGhpcy5jaGVja2VkIHx8IHJzZWxlY3RUZXh0YXJlYS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgfHwKCQkJCQlyaW5wdXQudGVzdCggdGhpcy50eXBlICkgKTsKCQl9KQoJCS5tYXAoZnVuY3Rpb24oIGksIGVsZW0gKXsKCQkJdmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpOwoKCQkJcmV0dXJuIHZhbCA9PSBudWxsID8KCQkJCW51bGwgOgoJCQkJalF1ZXJ5LmlzQXJyYXkoIHZhbCApID8KCQkJCQlqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwsIGkgKXsKCQkJCQkJcmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCAiXHJcbiIgKSB9OwoJCQkJCX0pIDoKCQkJCQl7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgIlxyXG4iICkgfTsKCQl9KS5nZXQoKTsKCX0KfSk7CgovLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50cwpqUXVlcnkuZWFjaCggImFqYXhTdGFydCBhamF4U3RvcCBhamF4Q29tcGxldGUgYWpheEVycm9yIGFqYXhTdWNjZXNzIGFqYXhTZW5kIi5zcGxpdCggIiAiICksIGZ1bmN0aW9uKCBpLCBvICl7CglqUXVlcnkuZm5bIG8gXSA9IGZ1bmN0aW9uKCBmICl7CgkJcmV0dXJuIHRoaXMub24oIG8sIGYgKTsKCX07Cn0pOwoKalF1ZXJ5LmVhY2goIFsgImdldCIsICJwb3N0IiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkgewoJalF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkgewoJCS8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkCgkJaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkgewoJCQl0eXBlID0gdHlwZSB8fCBjYWxsYmFjazsKCQkJY2FsbGJhY2sgPSBkYXRhOwoJCQlkYXRhID0gdW5kZWZpbmVkOwoJCX0KCgkJcmV0dXJuIGpRdWVyeS5hamF4KHsKCQkJdHlwZTogbWV0aG9kLAoJCQl1cmw6IHVybCwKCQkJZGF0YTogZGF0YSwKCQkJc3VjY2VzczogY2FsbGJhY2ssCgkJCWRhdGFUeXBlOiB0eXBlCgkJfSk7Cgl9Owp9KTsKCmpRdWVyeS5leHRlbmQoewoKCWdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7CgkJcmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgInNjcmlwdCIgKTsKCX0sCgoJZ2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7CgkJcmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssICJqc29uIiApOwoJfSwKCgkvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldAoJLy8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLgoJLy8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy4KCWFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7CgkJaWYgKCBzZXR0aW5ncyApIHsKCQkJLy8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3QKCQkJYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICk7CgkJfSBlbHNlIHsKCQkJLy8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5ncwoJCQlzZXR0aW5ncyA9IHRhcmdldDsKCQkJdGFyZ2V0ID0galF1ZXJ5LmFqYXhTZXR0aW5nczsKCQl9CgkJYWpheEV4dGVuZCggdGFyZ2V0LCBzZXR0aW5ncyApOwoJCXJldHVybiB0YXJnZXQ7Cgl9LAoKCWFqYXhTZXR0aW5nczogewoJCXVybDogYWpheExvY2F0aW9uLAoJCWlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGFqYXhMb2NQYXJ0c1sgMSBdICksCgkJZ2xvYmFsOiB0cnVlLAoJCXR5cGU6ICJHRVQiLAoJCWNvbnRlbnRUeXBlOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IiwKCQlwcm9jZXNzRGF0YTogdHJ1ZSwKCQlhc3luYzogdHJ1ZSwKCQkvKgoJCXRpbWVvdXQ6IDAsCgkJZGF0YTogbnVsbCwKCQlkYXRhVHlwZTogbnVsbCwKCQl1c2VybmFtZTogbnVsbCwKCQlwYXNzd29yZDogbnVsbCwKCQljYWNoZTogbnVsbCwKCQl0cmFkaXRpb25hbDogZmFsc2UsCgkJaGVhZGVyczoge30sCgkJKi8KCgkJYWNjZXB0czogewoJCQl4bWw6ICJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sIiwKCQkJaHRtbDogInRleHQvaHRtbCIsCgkJCXRleHQ6ICJ0ZXh0L3BsYWluIiwKCQkJanNvbjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCIsCgkJCSIqIjogYWxsVHlwZXMKCQl9LAoKCQljb250ZW50czogewoJCQl4bWw6IC94bWwvLAoJCQlodG1sOiAvaHRtbC8sCgkJCWpzb246IC9qc29uLwoJCX0sCgoJCXJlc3BvbnNlRmllbGRzOiB7CgkJCXhtbDogInJlc3BvbnNlWE1MIiwKCQkJdGV4dDogInJlc3BvbnNlVGV4dCIKCQl9LAoKCQkvLyBMaXN0IG9mIGRhdGEgY29udmVydGVycwoJCS8vIDEpIGtleSBmb3JtYXQgaXMgInNvdXJjZV90eXBlIGRlc3RpbmF0aW9uX3R5cGUiIChhIHNpbmdsZSBzcGFjZSBpbi1iZXR3ZWVuKQoJCS8vIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgIioiIGNhbiBiZSB1c2VkIGZvciBzb3VyY2VfdHlwZQoJCWNvbnZlcnRlcnM6IHsKCgkJCS8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dAoJCQkiKiB0ZXh0Ijogd2luZG93LlN0cmluZywKCgkJCS8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKQoJCQkidGV4dCBodG1sIjogdHJ1ZSwKCgkJCS8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb24KCQkJInRleHQganNvbiI6IGpRdWVyeS5wYXJzZUpTT04sCgoJCQkvLyBQYXJzZSB0ZXh0IGFzIHhtbAoJCQkidGV4dCB4bWwiOiBqUXVlcnkucGFyc2VYTUwKCQl9LAoKCQkvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOgoJCS8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWYKCQkvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZQoJCS8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKQoJCWZsYXRPcHRpb25zOiB7CgkJCWNvbnRleHQ6IHRydWUsCgkJCXVybDogdHJ1ZQoJCX0KCX0sCgoJYWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksCglhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSwKCgkvLyBNYWluIG1ldGhvZAoJYWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHsKCgkJLy8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmUKCQlpZiAoIHR5cGVvZiB1cmwgPT09ICJvYmplY3QiICkgewoJCQlvcHRpb25zID0gdXJsOwoJCQl1cmwgPSB1bmRlZmluZWQ7CgkJfQoKCQkvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdAoJCW9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKCQl2YXIgLy8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdAoJCQlzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSwKCQkJLy8gQ2FsbGJhY2tzIGNvbnRleHQKCQkJY2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsCgkJCS8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMKCQkJLy8gSXQncyB0aGUgY2FsbGJhY2tDb250ZXh0IGlmIG9uZSB3YXMgcHJvdmlkZWQgaW4gdGhlIG9wdGlvbnMKCQkJLy8gYW5kIGlmIGl0J3MgYSBET00gbm9kZSBvciBhIGpRdWVyeSBjb2xsZWN0aW9uCgkJCWdsb2JhbEV2ZW50Q29udGV4dCA9IGNhbGxiYWNrQ29udGV4dCAhPT0gcyAmJgoJCQkJKCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ICkgPwoJCQkJCQlqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDogalF1ZXJ5LmV2ZW50LAoJCQkvLyBEZWZlcnJlZHMKCQkJZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSwKCQkJY29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoICJvbmNlIG1lbW9yeSIgKSwKCQkJLy8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3MKCQkJc3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSwKCQkJLy8gaWZNb2RpZmllZCBrZXkKCQkJaWZNb2RpZmllZEtleSwKCQkJLy8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSkKCQkJcmVxdWVzdEhlYWRlcnMgPSB7fSwKCQkJcmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LAoJCQkvLyBSZXNwb25zZSBoZWFkZXJzCgkJCXJlc3BvbnNlSGVhZGVyc1N0cmluZywKCQkJcmVzcG9uc2VIZWFkZXJzLAoJCQkvLyB0cmFuc3BvcnQKCQkJdHJhbnNwb3J0LAoJCQkvLyB0aW1lb3V0IGhhbmRsZQoJCQl0aW1lb3V0VGltZXIsCgkJCS8vIENyb3NzLWRvbWFpbiBkZXRlY3Rpb24gdmFycwoJCQlwYXJ0cywKCQkJLy8gVGhlIGpxWEhSIHN0YXRlCgkJCXN0YXRlID0gMCwKCQkJLy8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkCgkJCWZpcmVHbG9iYWxzLAoJCQkvLyBMb29wIHZhcmlhYmxlCgkJCWksCgkJCS8vIEZha2UgeGhyCgkJCWpxWEhSID0gewoKCQkJCXJlYWR5U3RhdGU6IDAsCgoJCQkJLy8gQ2FjaGVzIHRoZSBoZWFkZXIKCQkJCXNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHsKCQkJCQlpZiAoICFzdGF0ZSApIHsKCQkJCQkJdmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpOwoJCQkJCQluYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gfHwgbmFtZTsKCQkJCQkJcmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlOwoJCQkJCX0KCQkJCQlyZXR1cm4gdGhpczsKCQkJCX0sCgoJCQkJLy8gUmF3IHN0cmluZwoJCQkJZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHsKCQkJCQlyZXR1cm4gc3RhdGUgPT09IDIgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsOwoJCQkJfSwKCgkJCQkvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkCgkJCQlnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHsKCQkJCQl2YXIgbWF0Y2g7CgkJCQkJaWYgKCBzdGF0ZSA9PT0gMiApIHsKCQkJCQkJaWYgKCAhcmVzcG9uc2VIZWFkZXJzICkgewoJCQkJCQkJcmVzcG9uc2VIZWFkZXJzID0ge307CgkJCQkJCQl3aGlsZSggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7CgkJCQkJCQkJcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJCW1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdOwoJCQkJCX0KCQkJCQlyZXR1cm4gbWF0Y2ggPT09IHVuZGVmaW5lZCA/IG51bGwgOiBtYXRjaDsKCQkJCX0sCgoJCQkJLy8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXIKCQkJCW92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkgewoJCQkJCWlmICggIXN0YXRlICkgewoJCQkJCQlzLm1pbWVUeXBlID0gdHlwZTsKCQkJCQl9CgkJCQkJcmV0dXJuIHRoaXM7CgkJCQl9LAoKCQkJCS8vIENhbmNlbCB0aGUgcmVxdWVzdAoJCQkJYWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkgewoJCQkJCXN0YXR1c1RleHQgPSBzdGF0dXNUZXh0IHx8ICJhYm9ydCI7CgkJCQkJaWYgKCB0cmFuc3BvcnQgKSB7CgkJCQkJCXRyYW5zcG9ydC5hYm9ydCggc3RhdHVzVGV4dCApOwoJCQkJCX0KCQkJCQlkb25lKCAwLCBzdGF0dXNUZXh0ICk7CgkJCQkJcmV0dXJuIHRoaXM7CgkJCQl9CgkJCX07CgoJCS8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZQoJCS8vIEl0IGlzIGRlZmluZWQgaGVyZSBiZWNhdXNlIGpzbGludCBjb21wbGFpbnMgaWYgaXQgaXMgZGVjbGFyZWQKCQkvLyBhdCB0aGUgZW5kIG9mIHRoZSBmdW5jdGlvbiAod2hpY2ggd291bGQgYmUgbW9yZSBsb2dpY2FsIGFuZCByZWFkYWJsZSkKCQlmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHsKCgkJCS8vIENhbGxlZCBvbmNlCgkJCWlmICggc3RhdGUgPT09IDIgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIFN0YXRlIGlzICJkb25lIiBub3cKCQkJc3RhdGUgPSAyOwoKCQkJLy8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHMKCQkJaWYgKCB0aW1lb3V0VGltZXIgKSB7CgkJCQljbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApOwoJCQl9CgoJCQkvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvbgoJCQkvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKQoJCQl0cmFuc3BvcnQgPSB1bmRlZmluZWQ7CgoJCQkvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzCgkJCXJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgIiI7CgoJCQkvLyBTZXQgcmVhZHlTdGF0ZQoJCQlqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwOwoKCQkJdmFyIGlzU3VjY2VzcywKCQkJCXN1Y2Nlc3MsCgkJCQllcnJvciwKCQkJCXN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0LAoJCQkJcmVzcG9uc2UgPSByZXNwb25zZXMgPyBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkgOiB1bmRlZmluZWQsCgkJCQlsYXN0TW9kaWZpZWQsCgkJCQlldGFnOwoKCQkJLy8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmcKCQkJaWYgKCBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNCApIHsKCgkJCQkvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLgoJCQkJaWYgKCBzLmlmTW9kaWZpZWQgKSB7CgoJCQkJCWlmICggKCBsYXN0TW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggIkxhc3QtTW9kaWZpZWQiICkgKSApIHsKCQkJCQkJalF1ZXJ5Lmxhc3RNb2RpZmllZFsgaWZNb2RpZmllZEtleSBdID0gbGFzdE1vZGlmaWVkOwoJCQkJCX0KCQkJCQlpZiAoICggZXRhZyA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCAiRXRhZyIgKSApICkgewoJCQkJCQlqUXVlcnkuZXRhZ1sgaWZNb2RpZmllZEtleSBdID0gZXRhZzsKCQkJCQl9CgkJCQl9CgoJCQkJLy8gSWYgbm90IG1vZGlmaWVkCgkJCQlpZiAoIHN0YXR1cyA9PT0gMzA0ICkgewoKCQkJCQlzdGF0dXNUZXh0ID0gIm5vdG1vZGlmaWVkIjsKCQkJCQlpc1N1Y2Nlc3MgPSB0cnVlOwoKCQkJCS8vIElmIHdlIGhhdmUgZGF0YQoJCQkJfSBlbHNlIHsKCgkJCQkJdHJ5IHsKCQkJCQkJc3VjY2VzcyA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSApOwoJCQkJCQlzdGF0dXNUZXh0ID0gInN1Y2Nlc3MiOwoJCQkJCQlpc1N1Y2Nlc3MgPSB0cnVlOwoJCQkJCX0gY2F0Y2goZSkgewoJCQkJCQkvLyBXZSBoYXZlIGEgcGFyc2VyZXJyb3IKCQkJCQkJc3RhdHVzVGV4dCA9ICJwYXJzZXJlcnJvciI7CgkJCQkJCWVycm9yID0gZTsKCQkJCQl9CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQkvLyBXZSBleHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dAoJCQkJLy8gdGhlbiBub3JtYWxpemUgc3RhdHVzVGV4dCBhbmQgc3RhdHVzIGZvciBub24tYWJvcnRzCgkJCQllcnJvciA9IHN0YXR1c1RleHQ7CgkJCQlpZiAoICFzdGF0dXNUZXh0IHx8IHN0YXR1cyApIHsKCQkJCQlzdGF0dXNUZXh0ID0gImVycm9yIjsKCQkJCQlpZiAoIHN0YXR1cyA8IDAgKSB7CgkJCQkJCXN0YXR1cyA9IDA7CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQkvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdAoJCQlqcVhIUi5zdGF0dXMgPSBzdGF0dXM7CgkJCWpxWEhSLnN0YXR1c1RleHQgPSAiIiArICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICk7CgoJCQkvLyBTdWNjZXNzL0Vycm9yCgkJCWlmICggaXNTdWNjZXNzICkgewoJCQkJZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7CgkJCX0gZWxzZSB7CgkJCQlkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTsKCQkJfQoKCQkJLy8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3MKCQkJanFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApOwoJCQlzdGF0dXNDb2RlID0gdW5kZWZpbmVkOwoKCQkJaWYgKCBmaXJlR2xvYmFscyApIHsKCQkJCWdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCAiYWpheCIgKyAoIGlzU3VjY2VzcyA/ICJTdWNjZXNzIiA6ICJFcnJvciIgKSwKCQkJCQkJWyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTsKCQkJfQoKCQkJLy8gQ29tcGxldGUKCQkJY29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTsKCgkJCWlmICggZmlyZUdsb2JhbHMgKSB7CgkJCQlnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggImFqYXhDb21wbGV0ZSIsIFsganFYSFIsIHMgXSApOwoJCQkJLy8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyCgkJCQlpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkgewoJCQkJCWpRdWVyeS5ldmVudC50cmlnZ2VyKCAiYWpheFN0b3AiICk7CgkJCQl9CgkJCX0KCQl9CgoJCS8vIEF0dGFjaCBkZWZlcnJlZHMKCQlkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApOwoJCWpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lOwoJCWpxWEhSLmVycm9yID0ganFYSFIuZmFpbDsKCQlqcVhIUi5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkOwoKCQkvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrcwoJCWpxWEhSLnN0YXR1c0NvZGUgPSBmdW5jdGlvbiggbWFwICkgewoJCQlpZiAoIG1hcCApIHsKCQkJCXZhciB0bXA7CgkJCQlpZiAoIHN0YXRlIDwgMiApIHsKCQkJCQlmb3IgKCB0bXAgaW4gbWFwICkgewoJCQkJCQlzdGF0dXNDb2RlWyB0bXAgXSA9IFsgc3RhdHVzQ29kZVt0bXBdLCBtYXBbdG1wXSBdOwoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJdG1wID0gbWFwWyBqcVhIUi5zdGF0dXMgXTsKCQkJCQlqcVhIUi50aGVuKCB0bXAsIHRtcCApOwoJCQkJfQoJCQl9CgkJCXJldHVybiB0aGlzOwoJCX07CgoJCS8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKQoJCS8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKCM1ODY2OiBJRTcgaXNzdWUgd2l0aCBwcm90b2NvbC1sZXNzIHVybHMpCgkJLy8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlCgkJcy51cmwgPSAoICggdXJsIHx8IHMudXJsICkgKyAiIiApLnJlcGxhY2UoIHJoYXNoLCAiIiApLnJlcGxhY2UoIHJwcm90b2NvbCwgYWpheExvY1BhcnRzWyAxIF0gKyAiLy8iICk7CgoJCS8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3QKCQlzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8ICIqIiApLnRvTG93ZXJDYXNlKCkuc3BsaXQoIHJzcGFjZXNBamF4ICk7CgoJCS8vIERldGVybWluZSBpZiBhIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyCgkJaWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7CgkJCXBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7CgkJCXMuY3Jvc3NEb21haW4gPSAhISggcGFydHMgJiYKCQkJCSggcGFydHNbIDEgXSAhPSBhamF4TG9jUGFydHNbIDEgXSB8fCBwYXJ0c1sgMiBdICE9IGFqYXhMb2NQYXJ0c1sgMiBdIHx8CgkJCQkJKCBwYXJ0c1sgMyBdIHx8ICggcGFydHNbIDEgXSA9PT0gImh0dHA6IiA/IDgwIDogNDQzICkgKSAhPQoJCQkJCQkoIGFqYXhMb2NQYXJ0c1sgMyBdIHx8ICggYWpheExvY1BhcnRzWyAxIF0gPT09ICJodHRwOiIgPyA4MCA6IDQ0MyApICkgKQoJCQkpOwoJCX0KCgkJLy8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nCgkJaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSAic3RyaW5nIiApIHsKCQkJcy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTsKCQl9CgoJCS8vIEFwcGx5IHByZWZpbHRlcnMKCQlpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTsKCgkJLy8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmUKCQlpZiAoIHN0YXRlID09PSAyICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0bwoJCWZpcmVHbG9iYWxzID0gcy5nbG9iYWw7CgoJCS8vIFVwcGVyY2FzZSB0aGUgdHlwZQoJCXMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpOwoKCQkvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudAoJCXMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApOwoKCQkvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzCgkJaWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7CgkJCWpRdWVyeS5ldmVudC50cmlnZ2VyKCAiYWpheFN0YXJ0IiApOwoJCX0KCgkJLy8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnQKCQlpZiAoICFzLmhhc0NvbnRlbnQgKSB7CgoJCQkvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsCgkJCWlmICggcy5kYXRhICkgewoJCQkJcy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/ICImIiA6ICI/IiApICsgcy5kYXRhOwoJCQkJLy8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeQoJCQkJZGVsZXRlIHMuZGF0YTsKCQkJfQoKCQkJLy8gR2V0IGlmTW9kaWZpZWRLZXkgYmVmb3JlIGFkZGluZyB0aGUgYW50aS1jYWNoZSBwYXJhbWV0ZXIKCQkJaWZNb2RpZmllZEtleSA9IHMudXJsOwoKCQkJLy8gQWRkIGFudGktY2FjaGUgaW4gdXJsIGlmIG5lZWRlZAoJCQlpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkgewoKCQkJCXZhciB0cyA9IGpRdWVyeS5ub3coKSwKCQkJCQkvLyB0cnkgcmVwbGFjaW5nIF89IGlmIGl0IGlzIHRoZXJlCgkJCQkJcmV0ID0gcy51cmwucmVwbGFjZSggcnRzLCAiJDFfPSIgKyB0cyApOwoKCQkJCS8vIGlmIG5vdGhpbmcgd2FzIHJlcGxhY2VkLCBhZGQgdGltZXN0YW1wIHRvIHRoZSBlbmQKCQkJCXMudXJsID0gcmV0ICsgKCAoIHJldCA9PT0gcy51cmwgKSA/ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyAiJiIgOiAiPyIgKSArICJfPSIgKyB0cyA6ICIiICk7CgkJCX0KCQl9CgoJCS8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudAoJCWlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkgewoJCQlqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCAiQ29udGVudC1UeXBlIiwgcy5jb250ZW50VHlwZSApOwoJCX0KCgkJLy8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS4KCQlpZiAoIHMuaWZNb2RpZmllZCApIHsKCQkJaWZNb2RpZmllZEtleSA9IGlmTW9kaWZpZWRLZXkgfHwgcy51cmw7CgkJCWlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgaWZNb2RpZmllZEtleSBdICkgewoJCQkJanFYSFIuc2V0UmVxdWVzdEhlYWRlciggIklmLU1vZGlmaWVkLVNpbmNlIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgaWZNb2RpZmllZEtleSBdICk7CgkJCX0KCQkJaWYgKCBqUXVlcnkuZXRhZ1sgaWZNb2RpZmllZEtleSBdICkgewoJCQkJanFYSFIuc2V0UmVxdWVzdEhlYWRlciggIklmLU5vbmUtTWF0Y2giLCBqUXVlcnkuZXRhZ1sgaWZNb2RpZmllZEtleSBdICk7CgkJCX0KCQl9CgoJCS8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGUKCQlqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKAoJCQkiQWNjZXB0IiwKCQkJcy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gPwoJCQkJcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdICsgKCBzLmRhdGFUeXBlc1sgMCBdICE9PSAiKiIgPyAiLCAiICsgYWxsVHlwZXMgKyAiOyBxPTAuMDEiIDogIiIgKSA6CgkJCQlzLmFjY2VwdHNbICIqIiBdCgkJKTsKCgkJLy8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uCgkJZm9yICggaSBpbiBzLmhlYWRlcnMgKSB7CgkJCWpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7CgkJfQoKCQkvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0CgkJaWYgKCBzLmJlZm9yZVNlbmQgJiYgKCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBzdGF0ZSA9PT0gMiApICkgewoJCQkJLy8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeQoJCQkJanFYSFIuYWJvcnQoKTsKCQkJCXJldHVybiBmYWxzZTsKCgkJfQoKCQkvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHMKCQlmb3IgKCBpIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0gKSB7CgkJCWpxWEhSWyBpIF0oIHNbIGkgXSApOwoJCX0KCgkJLy8gR2V0IHRyYW5zcG9ydAoJCXRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApOwoKCQkvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnQKCQlpZiAoICF0cmFuc3BvcnQgKSB7CgkJCWRvbmUoIC0xLCAiTm8gVHJhbnNwb3J0IiApOwoJCX0gZWxzZSB7CgkJCWpxWEhSLnJlYWR5U3RhdGUgPSAxOwoJCQkvLyBTZW5kIGdsb2JhbCBldmVudAoJCQlpZiAoIGZpcmVHbG9iYWxzICkgewoJCQkJZ2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoICJhamF4U2VuZCIsIFsganFYSFIsIHMgXSApOwoJCQl9CgkJCS8vIFRpbWVvdXQKCQkJaWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7CgkJCQl0aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpewoJCQkJCWpxWEhSLmFib3J0KCAidGltZW91dCIgKTsKCQkJCX0sIHMudGltZW91dCApOwoJCQl9CgoJCQl0cnkgewoJCQkJc3RhdGUgPSAxOwoJCQkJdHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7CgkJCX0gY2F0Y2ggKGUpIHsKCQkJCS8vIFByb3BhZ2F0ZSBleGNlcHRpb24gYXMgZXJyb3IgaWYgbm90IGRvbmUKCQkJCWlmICggc3RhdGUgPCAyICkgewoJCQkJCWRvbmUoIC0xLCBlICk7CgkJCQkvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2UKCQkJCX0gZWxzZSB7CgkJCQkJdGhyb3cgZTsKCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIGpxWEhSOwoJfSwKCgkvLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZgoJLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nCglwYXJhbTogZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkgewoJCXZhciBzID0gW10sCgkJCWFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCQkJLy8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlCgkJCQl2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6IHZhbHVlOwoJCQkJc1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7CgkJCX07CgoJCS8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuCgkJaWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkgewoJCQl0cmFkaXRpb25hbCA9IGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7CgkJfQoKCQkvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLgoJCWlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7CgkJCS8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50cwoJCQlqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7CgkJCQlhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApOwoJCQl9KTsKCgkJfSBlbHNlIHsKCQkJLy8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgIm9sZCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyCgkJCS8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LgoJCQlmb3IgKCB2YXIgcHJlZml4IGluIGEgKSB7CgkJCQlidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApOwoJCQl9CgkJfQoKCQkvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uCgkJcmV0dXJuIHMuam9pbiggIiYiICkucmVwbGFjZSggcjIwLCAiKyIgKTsKCX0KfSk7CgpmdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7CglpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHsKCQkvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS4KCQlqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHsKCQkJaWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHsKCQkJCS8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci4KCQkJCWFkZCggcHJlZml4LCB2ICk7CgoJCQl9IGVsc2UgewoJCQkJLy8gSWYgYXJyYXkgaXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzCgkJCQkvLyBudW1lcmljIGluZGV4IHRvIHJlc29sdmUgZGVzZXJpYWxpemF0aW9uIGFtYmlndWl0eSBpc3N1ZXMuCgkJCQkvLyBOb3RlIHRoYXQgcmFjayAoYXMgb2YgMS4wLjApIGNhbid0IGN1cnJlbnRseSBkZXNlcmlhbGl6ZQoJCQkJLy8gbmVzdGVkIGFycmF5cyBwcm9wZXJseSwgYW5kIGF0dGVtcHRpbmcgdG8gZG8gc28gbWF5IGNhdXNlCgkJCQkvLyBhIHNlcnZlciBlcnJvci4gUG9zc2libGUgZml4ZXMgYXJlIHRvIG1vZGlmeSByYWNrJ3MKCQkJCS8vIGRlc2VyaWFsaXphdGlvbiBhbGdvcml0aG0gb3IgdG8gcHJvdmlkZSBhbiBvcHRpb24gb3IgZmxhZwoJCQkJLy8gdG8gZm9yY2UgYXJyYXkgc2VyaWFsaXphdGlvbiB0byBiZSBzaGFsbG93LgoJCQkJYnVpbGRQYXJhbXMoIHByZWZpeCArICJbIiArICggdHlwZW9mIHYgPT09ICJvYmplY3QiID8gaSA6ICIiICkgKyAiXSIsIHYsIHRyYWRpdGlvbmFsLCBhZGQgKTsKCQkJfQoJCX0pOwoKCX0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09ICJvYmplY3QiICkgewoJCS8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS4KCQlmb3IgKCB2YXIgbmFtZSBpbiBvYmogKSB7CgkJCWJ1aWxkUGFyYW1zKCBwcmVmaXggKyAiWyIgKyBuYW1lICsgIl0iLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApOwoJCX0KCgl9IGVsc2UgewoJCS8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS4KCQlhZGQoIHByZWZpeCwgb2JqICk7Cgl9Cn0KCi8vIFRoaXMgaXMgc3RpbGwgb24gdGhlIGpRdWVyeSBvYmplY3QuLi4gZm9yIG5vdwovLyBXYW50IHRvIG1vdmUgdGhpcyB0byBqUXVlcnkuYWpheCBzb21lIGRheQpqUXVlcnkuZXh0ZW5kKHsKCgkvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXMKCWFjdGl2ZTogMCwKCgkvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0CglsYXN0TW9kaWZpZWQ6IHt9LAoJZXRhZzoge30KCn0pOwoKLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OgogKiAtIHNldHMgYWxsIHJlc3BvbnNlWFhYIGZpZWxkcyBhY2NvcmRpbmdseQogKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKQogKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2UKICovCmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7CgoJdmFyIGNvbnRlbnRzID0gcy5jb250ZW50cywKCQlkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcywKCQlyZXNwb25zZUZpZWxkcyA9IHMucmVzcG9uc2VGaWVsZHMsCgkJY3QsCgkJdHlwZSwKCQlmaW5hbERhdGFUeXBlLAoJCWZpcnN0RGF0YVR5cGU7CgoJLy8gRmlsbCByZXNwb25zZVhYWCBmaWVsZHMKCWZvciAoIHR5cGUgaW4gcmVzcG9uc2VGaWVsZHMgKSB7CgkJaWYgKCB0eXBlIGluIHJlc3BvbnNlcyApIHsKCQkJanFYSFJbIHJlc3BvbnNlRmllbGRzW3R5cGVdIF0gPSByZXNwb25zZXNbIHR5cGUgXTsKCQl9Cgl9CgoJLy8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3MKCXdoaWxlKCBkYXRhVHlwZXNbIDAgXSA9PT0gIioiICkgewoJCWRhdGFUeXBlcy5zaGlmdCgpOwoJCWlmICggY3QgPT09IHVuZGVmaW5lZCApIHsKCQkJY3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCAiY29udGVudC10eXBlIiApOwoJCX0KCX0KCgkvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGUKCWlmICggY3QgKSB7CgkJZm9yICggdHlwZSBpbiBjb250ZW50cyApIHsKCQkJaWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHsKCQkJCWRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7CgkJCQlicmVhazsKCQkJfQoJCX0KCX0KCgkvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGUKCWlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkgewoJCWZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTsKCX0gZWxzZSB7CgkJLy8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlcwoJCWZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkgewoJCQlpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyAiICIgKyBkYXRhVHlwZXNbMF0gXSApIHsKCQkJCWZpbmFsRGF0YVR5cGUgPSB0eXBlOwoJCQkJYnJlYWs7CgkJCX0KCQkJaWYgKCAhZmlyc3REYXRhVHlwZSApIHsKCQkJCWZpcnN0RGF0YVR5cGUgPSB0eXBlOwoJCQl9CgkJfQoJCS8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZQoJCWZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7Cgl9CgoJLy8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZQoJLy8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWQKCS8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2UKCWlmICggZmluYWxEYXRhVHlwZSApIHsKCQlpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkgewoJCQlkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApOwoJCX0KCQlyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07Cgl9Cn0KCi8vIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2UKZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlICkgewoKCS8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkCglpZiAoIHMuZGF0YUZpbHRlciApIHsKCQlyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTsKCX0KCgl2YXIgZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMsCgkJY29udmVydGVycyA9IHt9LAoJCWksCgkJa2V5LAoJCWxlbmd0aCA9IGRhdGFUeXBlcy5sZW5ndGgsCgkJdG1wLAoJCS8vIEN1cnJlbnQgYW5kIHByZXZpb3VzIGRhdGFUeXBlcwoJCWN1cnJlbnQgPSBkYXRhVHlwZXNbIDAgXSwKCQlwcmV2LAoJCS8vIENvbnZlcnNpb24gZXhwcmVzc2lvbgoJCWNvbnZlcnNpb24sCgkJLy8gQ29udmVyc2lvbiBmdW5jdGlvbgoJCWNvbnYsCgkJLy8gQ29udmVyc2lvbiBmdW5jdGlvbnMgKHRyYW5zaXRpdmUgY29udmVyc2lvbikKCQljb252MSwKCQljb252MjsKCgkvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgY2hhaW4KCWZvciAoIGkgPSAxOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgoJCS8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcAoJCS8vIHdpdGggbG93ZXJjYXNlZCBrZXlzCgkJaWYgKCBpID09PSAxICkgewoJCQlmb3IgKCBrZXkgaW4gcy5jb252ZXJ0ZXJzICkgewoJCQkJaWYgKCB0eXBlb2Yga2V5ID09PSAic3RyaW5nIiApIHsKCQkJCQljb252ZXJ0ZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBrZXkgXTsKCQkJCX0KCQkJfQoJCX0KCgkJLy8gR2V0IHRoZSBkYXRhVHlwZXMKCQlwcmV2ID0gY3VycmVudDsKCQljdXJyZW50ID0gZGF0YVR5cGVzWyBpIF07CgoJCS8vIElmIGN1cnJlbnQgaXMgYXV0byBkYXRhVHlwZSwgdXBkYXRlIGl0IHRvIHByZXYKCQlpZiAoIGN1cnJlbnQgPT09ICIqIiApIHsKCQkJY3VycmVudCA9IHByZXY7CgkJLy8gSWYgbm8gYXV0byBhbmQgZGF0YVR5cGVzIGFyZSBhY3R1YWxseSBkaWZmZXJlbnQKCQl9IGVsc2UgaWYgKCBwcmV2ICE9PSAiKiIgJiYgcHJldiAhPT0gY3VycmVudCApIHsKCgkJCS8vIEdldCB0aGUgY29udmVydGVyCgkJCWNvbnZlcnNpb24gPSBwcmV2ICsgIiAiICsgY3VycmVudDsKCQkJY29udiA9IGNvbnZlcnRlcnNbIGNvbnZlcnNpb24gXSB8fCBjb252ZXJ0ZXJzWyAiKiAiICsgY3VycmVudCBdOwoKCQkJLy8gSWYgdGhlcmUgaXMgbm8gZGlyZWN0IGNvbnZlcnRlciwgc2VhcmNoIHRyYW5zaXRpdmVseQoJCQlpZiAoICFjb252ICkgewoJCQkJY29udjIgPSB1bmRlZmluZWQ7CgkJCQlmb3IgKCBjb252MSBpbiBjb252ZXJ0ZXJzICkgewoJCQkJCXRtcCA9IGNvbnYxLnNwbGl0KCAiICIgKTsKCQkJCQlpZiAoIHRtcFsgMCBdID09PSBwcmV2IHx8IHRtcFsgMCBdID09PSAiKiIgKSB7CgkJCQkJCWNvbnYyID0gY29udmVydGVyc1sgdG1wWzFdICsgIiAiICsgY3VycmVudCBdOwoJCQkJCQlpZiAoIGNvbnYyICkgewoJCQkJCQkJY29udjEgPSBjb252ZXJ0ZXJzWyBjb252MSBdOwoJCQkJCQkJaWYgKCBjb252MSA9PT0gdHJ1ZSApIHsKCQkJCQkJCQljb252ID0gY29udjI7CgkJCQkJCQl9IGVsc2UgaWYgKCBjb252MiA9PT0gdHJ1ZSApIHsKCQkJCQkJCQljb252ID0gY29udjE7CgkJCQkJCQl9CgkJCQkJCQlicmVhazsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoJCQkvLyBJZiB3ZSBmb3VuZCBubyBjb252ZXJ0ZXIsIGRpc3BhdGNoIGFuIGVycm9yCgkJCWlmICggISggY29udiB8fCBjb252MiApICkgewoJCQkJalF1ZXJ5LmVycm9yKCAiTm8gY29udmVyc2lvbiBmcm9tICIgKyBjb252ZXJzaW9uLnJlcGxhY2UoIiAiLCIgdG8gIikgKTsKCQkJfQoJCQkvLyBJZiBmb3VuZCBjb252ZXJ0ZXIgaXMgbm90IGFuIGVxdWl2YWxlbmNlCgkJCWlmICggY29udiAhPT0gdHJ1ZSApIHsKCQkJCS8vIENvbnZlcnQgd2l0aCAxIG9yIDIgY29udmVydGVycyBhY2NvcmRpbmdseQoJCQkJcmVzcG9uc2UgPSBjb252ID8gY29udiggcmVzcG9uc2UgKSA6IGNvbnYyKCBjb252MShyZXNwb25zZSkgKTsKCQkJfQoJCX0KCX0KCXJldHVybiByZXNwb25zZTsKfQoKCgoKdmFyIGpzYyA9IGpRdWVyeS5ub3coKSwKCWpzcmUgPSAvKFw9KVw/KCZ8JCl8XD9cPy9pOwoKLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5ncwpqUXVlcnkuYWpheFNldHVwKHsKCWpzb25wOiAiY2FsbGJhY2siLAoJanNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIGpRdWVyeS5leHBhbmRvICsgIl8iICsgKCBqc2MrKyApOwoJfQp9KTsKCi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0cwpqUXVlcnkuYWpheFByZWZpbHRlciggImpzb24ganNvbnAiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7CgoJdmFyIGluc3BlY3REYXRhID0gKCB0eXBlb2Ygcy5kYXRhID09PSAic3RyaW5nIiApICYmIC9eYXBwbGljYXRpb25cL3hcLXd3d1wtZm9ybVwtdXJsZW5jb2RlZC8udGVzdCggcy5jb250ZW50VHlwZSApOwoKCWlmICggcy5kYXRhVHlwZXNbIDAgXSA9PT0gImpzb25wIiB8fAoJCXMuanNvbnAgIT09IGZhbHNlICYmICgganNyZS50ZXN0KCBzLnVybCApIHx8CgkJCQlpbnNwZWN0RGF0YSAmJiBqc3JlLnRlc3QoIHMuZGF0YSApICkgKSB7CgoJCXZhciByZXNwb25zZUNvbnRhaW5lciwKCQkJanNvbnBDYWxsYmFjayA9IHMuanNvbnBDYWxsYmFjayA9CgkJCQlqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgPyBzLmpzb25wQ2FsbGJhY2soKSA6IHMuanNvbnBDYWxsYmFjaywKCQkJcHJldmlvdXMgPSB3aW5kb3dbIGpzb25wQ2FsbGJhY2sgXSwKCQkJdXJsID0gcy51cmwsCgkJCWRhdGEgPSBzLmRhdGEsCgkJCXJlcGxhY2UgPSAiJDEiICsganNvbnBDYWxsYmFjayArICIkMiI7CgoJCWlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7CgkJCXVybCA9IHVybC5yZXBsYWNlKCBqc3JlLCByZXBsYWNlICk7CgkJCWlmICggcy51cmwgPT09IHVybCApIHsKCQkJCWlmICggaW5zcGVjdERhdGEgKSB7CgkJCQkJZGF0YSA9IGRhdGEucmVwbGFjZSgganNyZSwgcmVwbGFjZSApOwoJCQkJfQoJCQkJaWYgKCBzLmRhdGEgPT09IGRhdGEgKSB7CgkJCQkJLy8gQWRkIGNhbGxiYWNrIG1hbnVhbGx5CgkJCQkJdXJsICs9ICgvXD8vLnRlc3QoIHVybCApID8gIiYiIDogIj8iKSArIHMuanNvbnAgKyAiPSIgKyBqc29ucENhbGxiYWNrOwoJCQkJfQoJCQl9CgkJfQoKCQlzLnVybCA9IHVybDsKCQlzLmRhdGEgPSBkYXRhOwoKCQkvLyBJbnN0YWxsIGNhbGxiYWNrCgkJd2luZG93WyBqc29ucENhbGxiYWNrIF0gPSBmdW5jdGlvbiggcmVzcG9uc2UgKSB7CgkJCXJlc3BvbnNlQ29udGFpbmVyID0gWyByZXNwb25zZSBdOwoJCX07CgoJCS8vIENsZWFuLXVwIGZ1bmN0aW9uCgkJanFYSFIuYWx3YXlzKGZ1bmN0aW9uKCkgewoJCQkvLyBTZXQgY2FsbGJhY2sgYmFjayB0byBwcmV2aW91cyB2YWx1ZQoJCQl3aW5kb3dbIGpzb25wQ2FsbGJhY2sgXSA9IHByZXZpb3VzOwoJCQkvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2UKCQkJaWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcHJldmlvdXMgKSApIHsKCQkJCXdpbmRvd1sganNvbnBDYWxsYmFjayBdKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7CgkJCX0KCQl9KTsKCgkJLy8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvbgoJCXMuY29udmVydGVyc1sic2NyaXB0IGpzb24iXSA9IGZ1bmN0aW9uKCkgewoJCQlpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHsKCQkJCWpRdWVyeS5lcnJvcigganNvbnBDYWxsYmFjayArICIgd2FzIG5vdCBjYWxsZWQiICk7CgkJCX0KCQkJcmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07CgkJfTsKCgkJLy8gZm9yY2UganNvbiBkYXRhVHlwZQoJCXMuZGF0YVR5cGVzWyAwIF0gPSAianNvbiI7CgoJCS8vIERlbGVnYXRlIHRvIHNjcmlwdAoJCXJldHVybiAic2NyaXB0IjsKCX0KfSk7CgoKCgovLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZQpqUXVlcnkuYWpheFNldHVwKHsKCWFjY2VwdHM6IHsKCQlzY3JpcHQ6ICJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdCIKCX0sCgljb250ZW50czogewoJCXNjcmlwdDogL2phdmFzY3JpcHR8ZWNtYXNjcmlwdC8KCX0sCgljb252ZXJ0ZXJzOiB7CgkJInRleHQgc2NyaXB0IjogZnVuY3Rpb24oIHRleHQgKSB7CgkJCWpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7CgkJCXJldHVybiB0ZXh0OwoJCX0KCX0KfSk7CgovLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGdsb2JhbApqUXVlcnkuYWpheFByZWZpbHRlciggInNjcmlwdCIsIGZ1bmN0aW9uKCBzICkgewoJaWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7CgkJcy5jYWNoZSA9IGZhbHNlOwoJfQoJaWYgKCBzLmNyb3NzRG9tYWluICkgewoJCXMudHlwZSA9ICJHRVQiOwoJCXMuZ2xvYmFsID0gZmFsc2U7Cgl9Cn0pOwoKLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0CmpRdWVyeS5hamF4VHJhbnNwb3J0KCAic2NyaXB0IiwgZnVuY3Rpb24ocykgewoKCS8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHMKCWlmICggcy5jcm9zc0RvbWFpbiApIHsKCgkJdmFyIHNjcmlwdCwKCQkJaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJoZWFkIiApWzBdIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKCgkJcmV0dXJuIHsKCgkJCXNlbmQ6IGZ1bmN0aW9uKCBfLCBjYWxsYmFjayApIHsKCgkJCQlzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAic2NyaXB0IiApOwoKCQkJCXNjcmlwdC5hc3luYyA9ICJhc3luYyI7CgoJCQkJaWYgKCBzLnNjcmlwdENoYXJzZXQgKSB7CgkJCQkJc2NyaXB0LmNoYXJzZXQgPSBzLnNjcmlwdENoYXJzZXQ7CgkJCQl9CgoJCQkJc2NyaXB0LnNyYyA9IHMudXJsOwoKCQkJCS8vIEF0dGFjaCBoYW5kbGVycyBmb3IgYWxsIGJyb3dzZXJzCgkJCQlzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCBfLCBpc0Fib3J0ICkgewoKCQkJCQlpZiAoIGlzQWJvcnQgfHwgIXNjcmlwdC5yZWFkeVN0YXRlIHx8IC9sb2FkZWR8Y29tcGxldGUvLnRlc3QoIHNjcmlwdC5yZWFkeVN0YXRlICkgKSB7CgoJCQkJCQkvLyBIYW5kbGUgbWVtb3J5IGxlYWsgaW4gSUUKCQkJCQkJc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsOwoKCQkJCQkJLy8gUmVtb3ZlIHRoZSBzY3JpcHQKCQkJCQkJaWYgKCBoZWFkICYmIHNjcmlwdC5wYXJlbnROb2RlICkgewoJCQkJCQkJaGVhZC5yZW1vdmVDaGlsZCggc2NyaXB0ICk7CgkJCQkJCX0KCgkJCQkJCS8vIERlcmVmZXJlbmNlIHRoZSBzY3JpcHQKCQkJCQkJc2NyaXB0ID0gdW5kZWZpbmVkOwoKCQkJCQkJLy8gQ2FsbGJhY2sgaWYgbm90IGFib3J0CgkJCQkJCWlmICggIWlzQWJvcnQgKSB7CgkJCQkJCQljYWxsYmFjayggMjAwLCAic3VjY2VzcyIgKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX07CgkJCQkvLyBVc2UgaW5zZXJ0QmVmb3JlIGluc3RlYWQgb2YgYXBwZW5kQ2hpbGQgIHRvIGNpcmN1bXZlbnQgYW4gSUU2IGJ1Zy4KCQkJCS8vIFRoaXMgYXJpc2VzIHdoZW4gYSBiYXNlIG5vZGUgaXMgdXNlZCAoIzI3MDkgYW5kICM0Mzc4KS4KCQkJCWhlYWQuaW5zZXJ0QmVmb3JlKCBzY3JpcHQsIGhlYWQuZmlyc3RDaGlsZCApOwoJCQl9LAoKCQkJYWJvcnQ6IGZ1bmN0aW9uKCkgewoJCQkJaWYgKCBzY3JpcHQgKSB7CgkJCQkJc2NyaXB0Lm9ubG9hZCggMCwgMSApOwoJCQkJfQoJCQl9CgkJfTsKCX0KfSk7CgoKCgp2YXIgLy8gIzUyODA6IEludGVybmV0IEV4cGxvcmVyIHdpbGwga2VlcCBjb25uZWN0aW9ucyBhbGl2ZSBpZiB3ZSBkb24ndCBhYm9ydCBvbiB1bmxvYWQKCXhock9uVW5sb2FkQWJvcnQgPSB3aW5kb3cuQWN0aXZlWE9iamVjdCA/IGZ1bmN0aW9uKCkgewoJCS8vIEFib3J0IGFsbCBwZW5kaW5nIHJlcXVlc3RzCgkJZm9yICggdmFyIGtleSBpbiB4aHJDYWxsYmFja3MgKSB7CgkJCXhockNhbGxiYWNrc1sga2V5IF0oIDAsIDEgKTsKCQl9Cgl9IDogZmFsc2UsCgl4aHJJZCA9IDAsCgl4aHJDYWxsYmFja3M7CgovLyBGdW5jdGlvbnMgdG8gY3JlYXRlIHhocnMKZnVuY3Rpb24gY3JlYXRlU3RhbmRhcmRYSFIoKSB7Cgl0cnkgewoJCXJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7Cgl9IGNhdGNoKCBlICkge30KfQoKZnVuY3Rpb24gY3JlYXRlQWN0aXZlWEhSKCkgewoJdHJ5IHsKCQlyZXR1cm4gbmV3IHdpbmRvdy5BY3RpdmVYT2JqZWN0KCAiTWljcm9zb2Z0LlhNTEhUVFAiICk7Cgl9IGNhdGNoKCBlICkge30KfQoKLy8gQ3JlYXRlIHRoZSByZXF1ZXN0IG9iamVjdAovLyAoVGhpcyBpcyBzdGlsbCBhdHRhY2hlZCB0byBhamF4U2V0dGluZ3MgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkpCmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gd2luZG93LkFjdGl2ZVhPYmplY3QgPwoJLyogTWljcm9zb2Z0IGZhaWxlZCB0byBwcm9wZXJseQoJICogaW1wbGVtZW50IHRoZSBYTUxIdHRwUmVxdWVzdCBpbiBJRTcgKGNhbid0IHJlcXVlc3QgbG9jYWwgZmlsZXMpLAoJICogc28gd2UgdXNlIHRoZSBBY3RpdmVYT2JqZWN0IHdoZW4gaXQgaXMgYXZhaWxhYmxlCgkgKiBBZGRpdGlvbmFsbHkgWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIGluIElFNy9JRTggc28KCSAqIHdlIG5lZWQgYSBmYWxsYmFjay4KCSAqLwoJZnVuY3Rpb24oKSB7CgkJcmV0dXJuICF0aGlzLmlzTG9jYWwgJiYgY3JlYXRlU3RhbmRhcmRYSFIoKSB8fCBjcmVhdGVBY3RpdmVYSFIoKTsKCX0gOgoJLy8gRm9yIGFsbCBvdGhlciBicm93c2VycywgdXNlIHRoZSBzdGFuZGFyZCBYTUxIdHRwUmVxdWVzdCBvYmplY3QKCWNyZWF0ZVN0YW5kYXJkWEhSOwoKLy8gRGV0ZXJtaW5lIHN1cHBvcnQgcHJvcGVydGllcwooZnVuY3Rpb24oIHhociApIHsKCWpRdWVyeS5leHRlbmQoIGpRdWVyeS5zdXBwb3J0LCB7CgkJYWpheDogISF4aHIsCgkJY29yczogISF4aHIgJiYgKCAid2l0aENyZWRlbnRpYWxzIiBpbiB4aHIgKQoJfSk7Cn0pKCBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpICk7CgovLyBDcmVhdGUgdHJhbnNwb3J0IGlmIHRoZSBicm93c2VyIGNhbiBwcm92aWRlIGFuIHhocgppZiAoIGpRdWVyeS5zdXBwb3J0LmFqYXggKSB7CgoJalF1ZXJ5LmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24oIHMgKSB7CgkJLy8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdAoJCWlmICggIXMuY3Jvc3NEb21haW4gfHwgalF1ZXJ5LnN1cHBvcnQuY29ycyApIHsKCgkJCXZhciBjYWxsYmFjazsKCgkJCXJldHVybiB7CgkJCQlzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7CgoJCQkJCS8vIEdldCBhIG5ldyB4aHIKCQkJCQl2YXIgeGhyID0gcy54aHIoKSwKCQkJCQkJaGFuZGxlLAoJCQkJCQlpOwoKCQkJCQkvLyBPcGVuIHRoZSBzb2NrZXQKCQkJCQkvLyBQYXNzaW5nIG51bGwgdXNlcm5hbWUsIGdlbmVyYXRlcyBhIGxvZ2luIHBvcHVwIG9uIE9wZXJhICgjMjg2NSkKCQkJCQlpZiAoIHMudXNlcm5hbWUgKSB7CgkJCQkJCXhoci5vcGVuKCBzLnR5cGUsIHMudXJsLCBzLmFzeW5jLCBzLnVzZXJuYW1lLCBzLnBhc3N3b3JkICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJeGhyLm9wZW4oIHMudHlwZSwgcy51cmwsIHMuYXN5bmMgKTsKCQkJCQl9CgoJCQkJCS8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWQKCQkJCQlpZiAoIHMueGhyRmllbGRzICkgewoJCQkJCQlmb3IgKCBpIGluIHMueGhyRmllbGRzICkgewoJCQkJCQkJeGhyWyBpIF0gPSBzLnhockZpZWxkc1sgaSBdOwoJCQkJCQl9CgkJCQkJfQoKCQkJCQkvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkCgkJCQkJaWYgKCBzLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkgewoJCQkJCQl4aHIub3ZlcnJpZGVNaW1lVHlwZSggcy5taW1lVHlwZSApOwoJCQkJCX0KCgkJCQkJLy8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXIKCQkJCQkvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlCgkJCQkJLy8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS4KCQkJCQkvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cCkKCQkJCQkvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC4KCQkJCQlpZiAoICFzLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyJYLVJlcXVlc3RlZC1XaXRoIl0gKSB7CgkJCQkJCWhlYWRlcnNbICJYLVJlcXVlc3RlZC1XaXRoIiBdID0gIlhNTEh0dHBSZXF1ZXN0IjsKCQkJCQl9CgoJCQkJCS8vIE5lZWQgYW4gZXh0cmEgdHJ5L2NhdGNoIGZvciBjcm9zcyBkb21haW4gcmVxdWVzdHMgaW4gRmlyZWZveCAzCgkJCQkJdHJ5IHsKCQkJCQkJZm9yICggaSBpbiBoZWFkZXJzICkgewoJCQkJCQkJeGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApOwoJCQkJCQl9CgkJCQkJfSBjYXRjaCggXyApIHt9CgoJCQkJCS8vIERvIHNlbmQgdGhlIHJlcXVlc3QKCQkJCQkvLyBUaGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24gd2hpY2ggaXMgYWN0dWFsbHkKCQkJCQkvLyBoYW5kbGVkIGluIGpRdWVyeS5hamF4IChzbyBubyB0cnkvY2F0Y2ggaGVyZSkKCQkJCQl4aHIuc2VuZCggKCBzLmhhc0NvbnRlbnQgJiYgcy5kYXRhICkgfHwgbnVsbCApOwoKCQkJCQkvLyBMaXN0ZW5lcgoJCQkJCWNhbGxiYWNrID0gZnVuY3Rpb24oIF8sIGlzQWJvcnQgKSB7CgoJCQkJCQl2YXIgc3RhdHVzLAoJCQkJCQkJc3RhdHVzVGV4dCwKCQkJCQkJCXJlc3BvbnNlSGVhZGVycywKCQkJCQkJCXJlc3BvbnNlcywKCQkJCQkJCXhtbDsKCgkJCQkJCS8vIEZpcmVmb3ggdGhyb3dzIGV4Y2VwdGlvbnMgd2hlbiBhY2Nlc3NpbmcgcHJvcGVydGllcwoJCQkJCQkvLyBvZiBhbiB4aHIgd2hlbiBhIG5ldHdvcmsgZXJyb3Igb2NjdXJlZAoJCQkJCQkvLyBodHRwOi8vaGVscGZ1bC5rbm9icy1kaWFscy5jb20vaW5kZXgucGhwL0NvbXBvbmVudF9yZXR1cm5lZF9mYWlsdXJlX2NvZGU6XzB4ODAwNDAxMTFfKE5TX0VSUk9SX05PVF9BVkFJTEFCTEUpCgkJCQkJCXRyeSB7CgoJCQkJCQkJLy8gV2FzIG5ldmVyIGNhbGxlZCBhbmQgaXMgYWJvcnRlZCBvciBjb21wbGV0ZQoJCQkJCQkJaWYgKCBjYWxsYmFjayAmJiAoIGlzQWJvcnQgfHwgeGhyLnJlYWR5U3RhdGUgPT09IDQgKSApIHsKCgkJCQkJCQkJLy8gT25seSBjYWxsZWQgb25jZQoJCQkJCQkJCWNhbGxiYWNrID0gdW5kZWZpbmVkOwoKCQkJCQkJCQkvLyBEbyBub3Qga2VlcCBhcyBhY3RpdmUgYW55bW9yZQoJCQkJCQkJCWlmICggaGFuZGxlICkgewoJCQkJCQkJCQl4aHIub25yZWFkeXN0YXRlY2hhbmdlID0galF1ZXJ5Lm5vb3A7CgkJCQkJCQkJCWlmICggeGhyT25VbmxvYWRBYm9ydCApIHsKCQkJCQkJCQkJCWRlbGV0ZSB4aHJDYWxsYmFja3NbIGhhbmRsZSBdOwoJCQkJCQkJCQl9CgkJCQkJCQkJfQoKCQkJCQkJCQkvLyBJZiBpdCdzIGFuIGFib3J0CgkJCQkJCQkJaWYgKCBpc0Fib3J0ICkgewoJCQkJCQkJCQkvLyBBYm9ydCBpdCBtYW51YWxseSBpZiBuZWVkZWQKCQkJCQkJCQkJaWYgKCB4aHIucmVhZHlTdGF0ZSAhPT0gNCApIHsKCQkJCQkJCQkJCXhoci5hYm9ydCgpOwoJCQkJCQkJCQl9CgkJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQkJc3RhdHVzID0geGhyLnN0YXR1czsKCQkJCQkJCQkJcmVzcG9uc2VIZWFkZXJzID0geGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpOwoJCQkJCQkJCQlyZXNwb25zZXMgPSB7fTsKCQkJCQkJCQkJeG1sID0geGhyLnJlc3BvbnNlWE1MOwoKCQkJCQkJCQkJLy8gQ29uc3RydWN0IHJlc3BvbnNlIGxpc3QKCQkJCQkJCQkJaWYgKCB4bWwgJiYgeG1sLmRvY3VtZW50RWxlbWVudCAvKiAjNDk1OCAqLyApIHsKCQkJCQkJCQkJCXJlc3BvbnNlcy54bWwgPSB4bWw7CgkJCQkJCQkJCX0KCgkJCQkJCQkJCS8vIFdoZW4gcmVxdWVzdGluZyBiaW5hcnkgZGF0YSwgSUU2LTkgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24KCQkJCQkJCQkJLy8gb24gYW55IGF0dGVtcHQgdG8gYWNjZXNzIHJlc3BvbnNlVGV4dCAoIzExNDI2KQoJCQkJCQkJCQl0cnkgewoJCQkJCQkJCQkJcmVzcG9uc2VzLnRleHQgPSB4aHIucmVzcG9uc2VUZXh0OwoJCQkJCQkJCQl9IGNhdGNoKCBfICkgewoJCQkJCQkJCQl9CgoJCQkJCQkJCQkvLyBGaXJlZm94IHRocm93cyBhbiBleGNlcHRpb24gd2hlbiBhY2Nlc3NpbmcKCQkJCQkJCQkJLy8gc3RhdHVzVGV4dCBmb3IgZmF1bHR5IGNyb3NzLWRvbWFpbiByZXF1ZXN0cwoJCQkJCQkJCQl0cnkgewoJCQkJCQkJCQkJc3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0OwoJCQkJCQkJCQl9IGNhdGNoKCBlICkgewoJCQkJCQkJCQkJLy8gV2Ugbm9ybWFsaXplIHdpdGggV2Via2l0IGdpdmluZyBhbiBlbXB0eSBzdGF0dXNUZXh0CgkJCQkJCQkJCQlzdGF0dXNUZXh0ID0gIiI7CgkJCQkJCQkJCX0KCgkJCQkJCQkJCS8vIEZpbHRlciBzdGF0dXMgZm9yIG5vbiBzdGFuZGFyZCBiZWhhdmlvcnMKCgkJCQkJCQkJCS8vIElmIHRoZSByZXF1ZXN0IGlzIGxvY2FsIGFuZCB3ZSBoYXZlIGRhdGE6IGFzc3VtZSBhIHN1Y2Nlc3MKCQkJCQkJCQkJLy8gKHN1Y2Nlc3Mgd2l0aCBubyBkYXRhIHdvbid0IGdldCBub3RpZmllZCwgdGhhdCdzIHRoZSBiZXN0IHdlCgkJCQkJCQkJCS8vIGNhbiBkbyBnaXZlbiBjdXJyZW50IGltcGxlbWVudGF0aW9ucykKCQkJCQkJCQkJaWYgKCAhc3RhdHVzICYmIHMuaXNMb2NhbCAmJiAhcy5jcm9zc0RvbWFpbiApIHsKCQkJCQkJCQkJCXN0YXR1cyA9IHJlc3BvbnNlcy50ZXh0ID8gMjAwIDogNDA0OwoJCQkJCQkJCQkvLyBJRSAtICMxNDUwOiBzb21ldGltZXMgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNAoJCQkJCQkJCQl9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDEyMjMgKSB7CgkJCQkJCQkJCQlzdGF0dXMgPSAyMDQ7CgkJCQkJCQkJCX0KCQkJCQkJCQl9CgkJCQkJCQl9CgkJCQkJCX0gY2F0Y2goIGZpcmVmb3hBY2Nlc3NFeGNlcHRpb24gKSB7CgkJCQkJCQlpZiAoICFpc0Fib3J0ICkgewoJCQkJCQkJCWNvbXBsZXRlKCAtMSwgZmlyZWZveEFjY2Vzc0V4Y2VwdGlvbiApOwoJCQkJCQkJfQoJCQkJCQl9CgoJCQkJCQkvLyBDYWxsIGNvbXBsZXRlIGlmIG5lZWRlZAoJCQkJCQlpZiAoIHJlc3BvbnNlcyApIHsKCQkJCQkJCWNvbXBsZXRlKCBzdGF0dXMsIHN0YXR1c1RleHQsIHJlc3BvbnNlcywgcmVzcG9uc2VIZWFkZXJzICk7CgkJCQkJCX0KCQkJCQl9OwoKCQkJCQkvLyBpZiB3ZSdyZSBpbiBzeW5jIG1vZGUgb3IgaXQncyBpbiBjYWNoZQoJCQkJCS8vIGFuZCBoYXMgYmVlbiByZXRyaWV2ZWQgZGlyZWN0bHkgKElFNiAmIElFNykKCQkJCQkvLyB3ZSBuZWVkIHRvIG1hbnVhbGx5IGZpcmUgdGhlIGNhbGxiYWNrCgkJCQkJaWYgKCAhcy5hc3luYyB8fCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHsKCQkJCQkJY2FsbGJhY2soKTsKCQkJCQl9IGVsc2UgewoJCQkJCQloYW5kbGUgPSArK3hocklkOwoJCQkJCQlpZiAoIHhock9uVW5sb2FkQWJvcnQgKSB7CgkJCQkJCQkvLyBDcmVhdGUgdGhlIGFjdGl2ZSB4aHJzIGNhbGxiYWNrcyBsaXN0IGlmIG5lZWRlZAoJCQkJCQkJLy8gYW5kIGF0dGFjaCB0aGUgdW5sb2FkIGhhbmRsZXIKCQkJCQkJCWlmICggIXhockNhbGxiYWNrcyApIHsKCQkJCQkJCQl4aHJDYWxsYmFja3MgPSB7fTsKCQkJCQkJCQlqUXVlcnkoIHdpbmRvdyApLnVubG9hZCggeGhyT25VbmxvYWRBYm9ydCApOwoJCQkJCQkJfQoJCQkJCQkJLy8gQWRkIHRvIGxpc3Qgb2YgYWN0aXZlIHhocnMgY2FsbGJhY2tzCgkJCQkJCQl4aHJDYWxsYmFja3NbIGhhbmRsZSBdID0gY2FsbGJhY2s7CgkJCQkJCX0KCQkJCQkJeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGNhbGxiYWNrOwoJCQkJCX0KCQkJCX0sCgoJCQkJYWJvcnQ6IGZ1bmN0aW9uKCkgewoJCQkJCWlmICggY2FsbGJhY2sgKSB7CgkJCQkJCWNhbGxiYWNrKDAsMSk7CgkJCQkJfQoJCQkJfQoJCQl9OwoJCX0KCX0pOwp9CgoKCgp2YXIgZWxlbWRpc3BsYXkgPSB7fSwKCWlmcmFtZSwgaWZyYW1lRG9jLAoJcmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sCglyZnhudW0gPSAvXihbK1wtXT0pPyhbXGQrLlwtXSspKFthLXolXSopJC9pLAoJdGltZXJJZCwKCWZ4QXR0cnMgPSBbCgkJLy8gaGVpZ2h0IGFuaW1hdGlvbnMKCQlbICJoZWlnaHQiLCAibWFyZ2luVG9wIiwgIm1hcmdpbkJvdHRvbSIsICJwYWRkaW5nVG9wIiwgInBhZGRpbmdCb3R0b20iIF0sCgkJLy8gd2lkdGggYW5pbWF0aW9ucwoJCVsgIndpZHRoIiwgIm1hcmdpbkxlZnQiLCAibWFyZ2luUmlnaHQiLCAicGFkZGluZ0xlZnQiLCAicGFkZGluZ1JpZ2h0IiBdLAoJCS8vIG9wYWNpdHkgYW5pbWF0aW9ucwoJCVsgIm9wYWNpdHkiIF0KCV0sCglmeE5vdzsKCmpRdWVyeS5mbi5leHRlbmQoewoJc2hvdzogZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkgewoJCXZhciBlbGVtLCBkaXNwbGF5OwoKCQlpZiAoIHNwZWVkIHx8IHNwZWVkID09PSAwICkgewoJCQlyZXR1cm4gdGhpcy5hbmltYXRlKCBnZW5GeCgic2hvdyIsIDMpLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApOwoKCQl9IGVsc2UgewoJCQlmb3IgKCB2YXIgaSA9IDAsIGogPSB0aGlzLmxlbmd0aDsgaSA8IGo7IGkrKyApIHsKCQkJCWVsZW0gPSB0aGlzWyBpIF07CgoJCQkJaWYgKCBlbGVtLnN0eWxlICkgewoJCQkJCWRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7CgoJCQkJCS8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXMKCQkJCQkvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90CgkJCQkJaWYgKCAhalF1ZXJ5Ll9kYXRhKGVsZW0sICJvbGRkaXNwbGF5IikgJiYgZGlzcGxheSA9PT0gIm5vbmUiICkgewoJCQkJCQlkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5ID0gIiI7CgkJCQkJfQoKCQkJCQkvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lCgkJCQkJLy8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXMKCQkJCQkvLyBmb3Igc3VjaCBhbiBlbGVtZW50CgkJCQkJaWYgKCAoZGlzcGxheSA9PT0gIiIgJiYgalF1ZXJ5LmNzcyhlbGVtLCAiZGlzcGxheSIpID09PSAibm9uZSIpIHx8CgkJCQkJCSFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGVsZW0gKSApIHsKCQkJCQkJalF1ZXJ5Ll9kYXRhKCBlbGVtLCAib2xkZGlzcGxheSIsIGRlZmF1bHREaXNwbGF5KGVsZW0ubm9kZU5hbWUpICk7CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQkvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcAoJCQkvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93CgkJCWZvciAoIGkgPSAwOyBpIDwgajsgaSsrICkgewoJCQkJZWxlbSA9IHRoaXNbIGkgXTsKCgkJCQlpZiAoIGVsZW0uc3R5bGUgKSB7CgkJCQkJZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTsKCgkJCQkJaWYgKCBkaXNwbGF5ID09PSAiIiB8fCBkaXNwbGF5ID09PSAibm9uZSIgKSB7CgkJCQkJCWVsZW0uc3R5bGUuZGlzcGxheSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgIm9sZGRpc3BsYXkiICkgfHwgIiI7CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCQl9Cgl9LAoKCWhpZGU6IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHsKCQlpZiAoIHNwZWVkIHx8IHNwZWVkID09PSAwICkgewoJCQlyZXR1cm4gdGhpcy5hbmltYXRlKCBnZW5GeCgiaGlkZSIsIDMpLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayk7CgoJCX0gZWxzZSB7CgkJCXZhciBlbGVtLCBkaXNwbGF5LAoJCQkJaSA9IDAsCgkJCQlqID0gdGhpcy5sZW5ndGg7CgoJCQlmb3IgKCA7IGkgPCBqOyBpKysgKSB7CgkJCQllbGVtID0gdGhpc1tpXTsKCQkJCWlmICggZWxlbS5zdHlsZSApIHsKCQkJCQlkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgImRpc3BsYXkiICk7CgoJCQkJCWlmICggZGlzcGxheSAhPT0gIm5vbmUiICYmICFqUXVlcnkuX2RhdGEoIGVsZW0sICJvbGRkaXNwbGF5IiApICkgewoJCQkJCQlqUXVlcnkuX2RhdGEoIGVsZW0sICJvbGRkaXNwbGF5IiwgZGlzcGxheSApOwoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJLy8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wCgkJCS8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3cKCQkJZm9yICggaSA9IDA7IGkgPCBqOyBpKysgKSB7CgkJCQlpZiAoIHRoaXNbaV0uc3R5bGUgKSB7CgkJCQkJdGhpc1tpXS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQkJfQoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCQl9Cgl9LAoKCS8vIFNhdmUgdGhlIG9sZCB0b2dnbGUgZnVuY3Rpb24KCV90b2dnbGU6IGpRdWVyeS5mbi50b2dnbGUsCgoJdG9nZ2xlOiBmdW5jdGlvbiggZm4sIGZuMiwgY2FsbGJhY2sgKSB7CgkJdmFyIGJvb2wgPSB0eXBlb2YgZm4gPT09ICJib29sZWFuIjsKCgkJaWYgKCBqUXVlcnkuaXNGdW5jdGlvbihmbikgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oZm4yKSApIHsKCQkJdGhpcy5fdG9nZ2xlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCgkJfSBlbHNlIGlmICggZm4gPT0gbnVsbCB8fCBib29sICkgewoJCQl0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQl2YXIgc3RhdGUgPSBib29sID8gZm4gOiBqUXVlcnkodGhpcykuaXMoIjpoaWRkZW4iKTsKCQkJCWpRdWVyeSh0aGlzKVsgc3RhdGUgPyAic2hvdyIgOiAiaGlkZSIgXSgpOwoJCQl9KTsKCgkJfSBlbHNlIHsKCQkJdGhpcy5hbmltYXRlKGdlbkZ4KCJ0b2dnbGUiLCAzKSwgZm4sIGZuMiwgY2FsbGJhY2spOwoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHsKCQlyZXR1cm4gdGhpcy5maWx0ZXIoIjpoaWRkZW4iKS5jc3MoIm9wYWNpdHkiLCAwKS5zaG93KCkuZW5kKCkKCQkJCQkuYW5pbWF0ZSh7b3BhY2l0eTogdG99LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayk7Cgl9LAoKCWFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHsKCQl2YXIgb3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApOwoKCQlpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICkgKSB7CgkJCXJldHVybiB0aGlzLmVhY2goIG9wdGFsbC5jb21wbGV0ZSwgWyBmYWxzZSBdICk7CgkJfQoKCQkvLyBEbyBub3QgY2hhbmdlIHJlZmVyZW5jZWQgcHJvcGVydGllcyBhcyBwZXItcHJvcGVydHkgZWFzaW5nIHdpbGwgYmUgbG9zdAoJCXByb3AgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApOwoKCQlmdW5jdGlvbiBkb0FuaW1hdGlvbigpIHsKCQkJLy8gWFhYICd0aGlzJyBkb2VzIG5vdCBhbHdheXMgaGF2ZSBhIG5vZGVOYW1lIHdoZW4gcnVubmluZyB0aGUKCQkJLy8gdGVzdCBzdWl0ZQoKCQkJaWYgKCBvcHRhbGwucXVldWUgPT09IGZhbHNlICkgewoJCQkJalF1ZXJ5Ll9tYXJrKCB0aGlzICk7CgkJCX0KCgkJCXZhciBvcHQgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0YWxsICksCgkJCQlpc0VsZW1lbnQgPSB0aGlzLm5vZGVUeXBlID09PSAxLAoJCQkJaGlkZGVuID0gaXNFbGVtZW50ICYmIGpRdWVyeSh0aGlzKS5pcygiOmhpZGRlbiIpLAoJCQkJbmFtZSwgdmFsLCBwLCBlLCBob29rcywgcmVwbGFjZSwKCQkJCXBhcnRzLCBzdGFydCwgZW5kLCB1bml0LAoJCQkJbWV0aG9kOwoKCQkJLy8gd2lsbCBzdG9yZSBwZXIgcHJvcGVydHkgZWFzaW5nIGFuZCBiZSB1c2VkIHRvIGRldGVybWluZSB3aGVuIGFuIGFuaW1hdGlvbiBpcyBjb21wbGV0ZQoJCQlvcHQuYW5pbWF0ZWRQcm9wZXJ0aWVzID0ge307CgoJCQkvLyBmaXJzdCBwYXNzIG92ZXIgcHJvcGVydHlzIHRvIGV4cGFuZCAvIG5vcm1hbGl6ZQoJCQlmb3IgKCBwIGluIHByb3AgKSB7CgkJCQluYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggcCApOwoJCQkJaWYgKCBwICE9PSBuYW1lICkgewoJCQkJCXByb3BbIG5hbWUgXSA9IHByb3BbIHAgXTsKCQkJCQlkZWxldGUgcHJvcFsgcCBdOwoJCQkJfQoKCQkJCWlmICggKCBob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdICkgJiYgImV4cGFuZCIgaW4gaG9va3MgKSB7CgkJCQkJcmVwbGFjZSA9IGhvb2tzLmV4cGFuZCggcHJvcFsgbmFtZSBdICk7CgkJCQkJZGVsZXRlIHByb3BbIG5hbWUgXTsKCgkJCQkJLy8gbm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbnQgb3ZlcndyaXRlIGtleXMgYWxyZWFkeSBwcmVzZW50LgoJCQkJCS8vIGFsc28gLSByZXVzaW5nICdwJyBmcm9tIGFib3ZlIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCAibmFtZSIKCQkJCQlmb3IgKCBwIGluIHJlcGxhY2UgKSB7CgkJCQkJCWlmICggISAoIHAgaW4gcHJvcCApICkgewoJCQkJCQkJcHJvcFsgcCBdID0gcmVwbGFjZVsgcCBdOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQlmb3IgKCBuYW1lIGluIHByb3AgKSB7CgkJCQl2YWwgPSBwcm9wWyBuYW1lIF07CgkJCQkvLyBlYXNpbmcgcmVzb2x1dGlvbjogcGVyIHByb3BlcnR5ID4gb3B0LnNwZWNpYWxFYXNpbmcgPiBvcHQuZWFzaW5nID4gJ3N3aW5nJyAoZGVmYXVsdCkKCQkJCWlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkgewoJCQkJCW9wdC5hbmltYXRlZFByb3BlcnRpZXNbIG5hbWUgXSA9IHZhbFsgMSBdOwoJCQkJCXZhbCA9IHByb3BbIG5hbWUgXSA9IHZhbFsgMCBdOwoJCQkJfSBlbHNlIHsKCQkJCQlvcHQuYW5pbWF0ZWRQcm9wZXJ0aWVzWyBuYW1lIF0gPSBvcHQuc3BlY2lhbEVhc2luZyAmJiBvcHQuc3BlY2lhbEVhc2luZ1sgbmFtZSBdIHx8IG9wdC5lYXNpbmcgfHwgJ3N3aW5nJzsKCQkJCX0KCgkJCQlpZiAoIHZhbCA9PT0gImhpZGUiICYmIGhpZGRlbiB8fCB2YWwgPT09ICJzaG93IiAmJiAhaGlkZGVuICkgewoJCQkJCXJldHVybiBvcHQuY29tcGxldGUuY2FsbCggdGhpcyApOwoJCQkJfQoKCQkJCWlmICggaXNFbGVtZW50ICYmICggbmFtZSA9PT0gImhlaWdodCIgfHwgbmFtZSA9PT0gIndpZHRoIiApICkgewoJCQkJCS8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dAoJCQkJCS8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QKCQkJCQkvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmQKCQkJCQkvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZQoJCQkJCW9wdC5vdmVyZmxvdyA9IFsgdGhpcy5zdHlsZS5vdmVyZmxvdywgdGhpcy5zdHlsZS5vdmVyZmxvd1gsIHRoaXMuc3R5bGUub3ZlcmZsb3dZIF07CgoJCQkJCS8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoCgkJCQkJLy8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZAoJCQkJCWlmICggalF1ZXJ5LmNzcyggdGhpcywgImRpc3BsYXkiICkgPT09ICJpbmxpbmUiICYmCgkJCQkJCQlqUXVlcnkuY3NzKCB0aGlzLCAiZmxvYXQiICkgPT09ICJub25lIiApIHsKCgkJCQkJCS8vIGlubGluZS1sZXZlbCBlbGVtZW50cyBhY2NlcHQgaW5saW5lLWJsb2NrOwoJCQkJCQkvLyBibG9jay1sZXZlbCBlbGVtZW50cyBuZWVkIHRvIGJlIGlubGluZSB3aXRoIGxheW91dAoJCQkJCQlpZiAoICFqUXVlcnkuc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0IHx8IGRlZmF1bHREaXNwbGF5KCB0aGlzLm5vZGVOYW1lICkgPT09ICJpbmxpbmUiICkgewoJCQkJCQkJdGhpcy5zdHlsZS5kaXNwbGF5ID0gImlubGluZS1ibG9jayI7CgoJCQkJCQl9IGVsc2UgewoJCQkJCQkJdGhpcy5zdHlsZS56b29tID0gMTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJaWYgKCBvcHQub3ZlcmZsb3cgIT0gbnVsbCApIHsKCQkJCXRoaXMuc3R5bGUub3ZlcmZsb3cgPSAiaGlkZGVuIjsKCQkJfQoKCQkJZm9yICggcCBpbiBwcm9wICkgewoJCQkJZSA9IG5ldyBqUXVlcnkuZngoIHRoaXMsIG9wdCwgcCApOwoJCQkJdmFsID0gcHJvcFsgcCBdOwoKCQkJCWlmICggcmZ4dHlwZXMudGVzdCggdmFsICkgKSB7CgoJCQkJCS8vIFRyYWNrcyB3aGV0aGVyIHRvIHNob3cgb3IgaGlkZSBiYXNlZCBvbiBwcml2YXRlCgkJCQkJLy8gZGF0YSBhdHRhY2hlZCB0byB0aGUgZWxlbWVudAoJCQkJCW1ldGhvZCA9IGpRdWVyeS5fZGF0YSggdGhpcywgInRvZ2dsZSIgKyBwICkgfHwgKCB2YWwgPT09ICJ0b2dnbGUiID8gaGlkZGVuID8gInNob3ciIDogImhpZGUiIDogMCApOwoJCQkJCWlmICggbWV0aG9kICkgewoJCQkJCQlqUXVlcnkuX2RhdGEoIHRoaXMsICJ0b2dnbGUiICsgcCwgbWV0aG9kID09PSAic2hvdyIgPyAiaGlkZSIgOiAic2hvdyIgKTsKCQkJCQkJZVsgbWV0aG9kIF0oKTsKCQkJCQl9IGVsc2UgewoJCQkJCQllWyB2YWwgXSgpOwoJCQkJCX0KCgkJCQl9IGVsc2UgewoJCQkJCXBhcnRzID0gcmZ4bnVtLmV4ZWMoIHZhbCApOwoJCQkJCXN0YXJ0ID0gZS5jdXIoKTsKCgkJCQkJaWYgKCBwYXJ0cyApIHsKCQkJCQkJZW5kID0gcGFyc2VGbG9hdCggcGFydHNbMl0gKTsKCQkJCQkJdW5pdCA9IHBhcnRzWzNdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcCBdID8gIiIgOiAicHgiICk7CgoJCQkJCQkvLyBXZSBuZWVkIHRvIGNvbXB1dGUgc3RhcnRpbmcgdmFsdWUKCQkJCQkJaWYgKCB1bml0ICE9PSAicHgiICkgewoJCQkJCQkJalF1ZXJ5LnN0eWxlKCB0aGlzLCBwLCAoZW5kIHx8IDEpICsgdW5pdCk7CgkJCQkJCQlzdGFydCA9ICggKGVuZCB8fCAxKSAvIGUuY3VyKCkgKSAqIHN0YXJ0OwoJCQkJCQkJalF1ZXJ5LnN0eWxlKCB0aGlzLCBwLCBzdGFydCArIHVuaXQpOwoJCQkJCQl9CgoJCQkJCQkvLyBJZiBhICs9Ly09IHRva2VuIHdhcyBwcm92aWRlZCwgd2UncmUgZG9pbmcgYSByZWxhdGl2ZSBhbmltYXRpb24KCQkJCQkJaWYgKCBwYXJ0c1sxXSApIHsKCQkJCQkJCWVuZCA9ICggKHBhcnRzWyAxIF0gPT09ICItPSIgPyAtMSA6IDEpICogZW5kICkgKyBzdGFydDsKCQkJCQkJfQoKCQkJCQkJZS5jdXN0b20oIHN0YXJ0LCBlbmQsIHVuaXQgKTsKCgkJCQkJfSBlbHNlIHsKCQkJCQkJZS5jdXN0b20oIHN0YXJ0LCB2YWwsICIiICk7CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQkvLyBGb3IgSlMgc3RyaWN0IGNvbXBsaWFuY2UKCQkJcmV0dXJuIHRydWU7CgkJfQoKCQlyZXR1cm4gb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/CgkJCXRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6CgkJCXRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTsKCX0sCgoJc3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7CgkJaWYgKCB0eXBlb2YgdHlwZSAhPT0gInN0cmluZyIgKSB7CgkJCWdvdG9FbmQgPSBjbGVhclF1ZXVlOwoJCQljbGVhclF1ZXVlID0gdHlwZTsKCQkJdHlwZSA9IHVuZGVmaW5lZDsKCQl9CgkJaWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkgewoJCQl0aGlzLnF1ZXVlKCB0eXBlIHx8ICJmeCIsIFtdICk7CgkJfQoKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgaW5kZXgsCgkJCQloYWRUaW1lcnMgPSBmYWxzZSwKCQkJCXRpbWVycyA9IGpRdWVyeS50aW1lcnMsCgkJCQlkYXRhID0galF1ZXJ5Ll9kYXRhKCB0aGlzICk7CgoJCQkvLyBjbGVhciBtYXJrZXIgY291bnRlcnMgaWYgd2Uga25vdyB0aGV5IHdvbid0IGJlCgkJCWlmICggIWdvdG9FbmQgKSB7CgkJCQlqUXVlcnkuX3VubWFyayggdHJ1ZSwgdGhpcyApOwoJCQl9CgoJCQlmdW5jdGlvbiBzdG9wUXVldWUoIGVsZW0sIGRhdGEsIGluZGV4ICkgewoJCQkJdmFyIGhvb2tzID0gZGF0YVsgaW5kZXggXTsKCQkJCWpRdWVyeS5yZW1vdmVEYXRhKCBlbGVtLCBpbmRleCwgdHJ1ZSApOwoJCQkJaG9va3Muc3RvcCggZ290b0VuZCApOwoJCQl9CgoJCQlpZiAoIHR5cGUgPT0gbnVsbCApIHsKCQkJCWZvciAoIGluZGV4IGluIGRhdGEgKSB7CgkJCQkJaWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBpbmRleC5pbmRleE9mKCIucnVuIikgPT09IGluZGV4Lmxlbmd0aCAtIDQgKSB7CgkJCQkJCXN0b3BRdWV1ZSggdGhpcywgZGF0YSwgaW5kZXggKTsKCQkJCQl9CgkJCQl9CgkJCX0gZWxzZSBpZiAoIGRhdGFbIGluZGV4ID0gdHlwZSArICIucnVuIiBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApewoJCQkJc3RvcFF1ZXVlKCB0aGlzLCBkYXRhLCBpbmRleCApOwoJCQl9CgoJCQlmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkgewoJCQkJaWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiAodHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSkgKSB7CgkJCQkJaWYgKCBnb3RvRW5kICkgewoKCQkJCQkJLy8gZm9yY2UgdGhlIG5leHQgc3RlcCB0byBiZSB0aGUgbGFzdAoJCQkJCQl0aW1lcnNbIGluZGV4IF0oIHRydWUgKTsKCQkJCQl9IGVsc2UgewoJCQkJCQl0aW1lcnNbIGluZGV4IF0uc2F2ZVN0YXRlKCk7CgkJCQkJfQoJCQkJCWhhZFRpbWVycyA9IHRydWU7CgkJCQkJdGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTsKCQkJCX0KCQkJfQoKCQkJLy8gc3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZAoJCQkvLyB0aW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoIHdpbGwgZGVxdWV1ZQoJCQkvLyBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZAoJCQlpZiAoICEoIGdvdG9FbmQgJiYgaGFkVGltZXJzICkgKSB7CgkJCQlqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApOwoJCQl9CgkJfSk7Cgl9Cgp9KTsKCi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHkKZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7CglzZXRUaW1lb3V0KCBjbGVhckZ4Tm93LCAwICk7CglyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApOwp9CgpmdW5jdGlvbiBjbGVhckZ4Tm93KCkgewoJZnhOb3cgPSB1bmRlZmluZWQ7Cn0KCi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uCmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBudW0gKSB7Cgl2YXIgb2JqID0ge307CgoJalF1ZXJ5LmVhY2goIGZ4QXR0cnMuY29uY2F0LmFwcGx5KFtdLCBmeEF0dHJzLnNsaWNlKCAwLCBudW0gKSksIGZ1bmN0aW9uKCkgewoJCW9ialsgdGhpcyBdID0gdHlwZTsKCX0pOwoKCXJldHVybiBvYmo7Cn0KCi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnMKalF1ZXJ5LmVhY2goewoJc2xpZGVEb3duOiBnZW5GeCggInNob3ciLCAxICksCglzbGlkZVVwOiBnZW5GeCggImhpZGUiLCAxICksCglzbGlkZVRvZ2dsZTogZ2VuRngoICJ0b2dnbGUiLCAxICksCglmYWRlSW46IHsgb3BhY2l0eTogInNob3ciIH0sCglmYWRlT3V0OiB7IG9wYWNpdHk6ICJoaWRlIiB9LAoJZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiAidG9nZ2xlIiB9Cn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHsKCWpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkgewoJCXJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApOwoJfTsKfSk7CgpqUXVlcnkuZXh0ZW5kKHsKCXNwZWVkOiBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7CgkJdmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gIm9iamVjdCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHsKCQkJY29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHwKCQkJCWpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLAoJCQlkdXJhdGlvbjogc3BlZWQsCgkJCWVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZwoJCX07CgoJCW9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gIm51bWJlciIgPyBvcHQuZHVyYXRpb24gOgoJCQlvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdIDogalF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDsKCgkJLy8gbm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gImZ4IgoJCWlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkgewoJCQlvcHQucXVldWUgPSAiZngiOwoJCX0KCgkJLy8gUXVldWVpbmcKCQlvcHQub2xkID0gb3B0LmNvbXBsZXRlOwoKCQlvcHQuY29tcGxldGUgPSBmdW5jdGlvbiggbm9Vbm1hcmsgKSB7CgkJCWlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHsKCQkJCW9wdC5vbGQuY2FsbCggdGhpcyApOwoJCQl9CgoJCQlpZiAoIG9wdC5xdWV1ZSApIHsKCQkJCWpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTsKCQkJfSBlbHNlIGlmICggbm9Vbm1hcmsgIT09IGZhbHNlICkgewoJCQkJalF1ZXJ5Ll91bm1hcmsoIHRoaXMgKTsKCQkJfQoJCX07CgoJCXJldHVybiBvcHQ7Cgl9LAoKCWVhc2luZzogewoJCWxpbmVhcjogZnVuY3Rpb24oIHAgKSB7CgkJCXJldHVybiBwOwoJCX0sCgkJc3dpbmc6IGZ1bmN0aW9uKCBwICkgewoJCQlyZXR1cm4gKCAtTWF0aC5jb3MoIHAqTWF0aC5QSSApIC8gMiApICsgMC41OwoJCX0KCX0sCgoJdGltZXJzOiBbXSwKCglmeDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AgKSB7CgkJdGhpcy5vcHRpb25zID0gb3B0aW9uczsKCQl0aGlzLmVsZW0gPSBlbGVtOwoJCXRoaXMucHJvcCA9IHByb3A7CgoJCW9wdGlvbnMub3JpZyA9IG9wdGlvbnMub3JpZyB8fCB7fTsKCX0KCn0pOwoKalF1ZXJ5LmZ4LnByb3RvdHlwZSA9IHsKCS8vIFNpbXBsZSBmdW5jdGlvbiBmb3Igc2V0dGluZyBhIHN0eWxlIHZhbHVlCgl1cGRhdGU6IGZ1bmN0aW9uKCkgewoJCWlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7CgkJCXRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTsKCQl9CgoJCSggalF1ZXJ5LmZ4LnN0ZXBbIHRoaXMucHJvcCBdIHx8IGpRdWVyeS5meC5zdGVwLl9kZWZhdWx0ICkoIHRoaXMgKTsKCX0sCgoJLy8gR2V0IHRoZSBjdXJyZW50IHNpemUKCWN1cjogZnVuY3Rpb24oKSB7CgkJaWYgKCB0aGlzLmVsZW1bIHRoaXMucHJvcCBdICE9IG51bGwgJiYgKCF0aGlzLmVsZW0uc3R5bGUgfHwgdGhpcy5lbGVtLnN0eWxlWyB0aGlzLnByb3AgXSA9PSBudWxsKSApIHsKCQkJcmV0dXJuIHRoaXMuZWxlbVsgdGhpcy5wcm9wIF07CgkJfQoKCQl2YXIgcGFyc2VkLAoJCQlyID0galF1ZXJ5LmNzcyggdGhpcy5lbGVtLCB0aGlzLnByb3AgKTsKCQkvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kICJhdXRvIiBhcmUgY29udmVydGVkIHRvIDAsCgkJLy8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyAicm90YXRlKDFyYWQpIiBhcmUgcmV0dXJuZWQgYXMgaXMsCgkJLy8gc2ltcGxlIHZhbHVlcyBzdWNoIGFzICIxMHB4IiBhcmUgcGFyc2VkIHRvIEZsb2F0LgoJCXJldHVybiBpc05hTiggcGFyc2VkID0gcGFyc2VGbG9hdCggciApICkgPyAhciB8fCByID09PSAiYXV0byIgPyAwIDogciA6IHBhcnNlZDsKCX0sCgoJLy8gU3RhcnQgYW4gYW5pbWF0aW9uIGZyb20gb25lIG51bWJlciB0byBhbm90aGVyCgljdXN0b206IGZ1bmN0aW9uKCBmcm9tLCB0bywgdW5pdCApIHsKCQl2YXIgc2VsZiA9IHRoaXMsCgkJCWZ4ID0galF1ZXJ5LmZ4OwoKCQl0aGlzLnN0YXJ0VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCk7CgkJdGhpcy5lbmQgPSB0bzsKCQl0aGlzLm5vdyA9IHRoaXMuc3RhcnQgPSBmcm9tOwoJCXRoaXMucG9zID0gdGhpcy5zdGF0ZSA9IDA7CgkJdGhpcy51bml0ID0gdW5pdCB8fCB0aGlzLnVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyB0aGlzLnByb3AgXSA/ICIiIDogInB4IiApOwoKCQlmdW5jdGlvbiB0KCBnb3RvRW5kICkgewoJCQlyZXR1cm4gc2VsZi5zdGVwKCBnb3RvRW5kICk7CgkJfQoKCQl0LnF1ZXVlID0gdGhpcy5vcHRpb25zLnF1ZXVlOwoJCXQuZWxlbSA9IHRoaXMuZWxlbTsKCQl0LnNhdmVTdGF0ZSA9IGZ1bmN0aW9uKCkgewoJCQlpZiAoIGpRdWVyeS5fZGF0YSggc2VsZi5lbGVtLCAiZnhzaG93IiArIHNlbGYucHJvcCApID09PSB1bmRlZmluZWQgKSB7CgkJCQlpZiAoIHNlbGYub3B0aW9ucy5oaWRlICkgewoJCQkJCWpRdWVyeS5fZGF0YSggc2VsZi5lbGVtLCAiZnhzaG93IiArIHNlbGYucHJvcCwgc2VsZi5zdGFydCApOwoJCQkJfSBlbHNlIGlmICggc2VsZi5vcHRpb25zLnNob3cgKSB7CgkJCQkJalF1ZXJ5Ll9kYXRhKCBzZWxmLmVsZW0sICJmeHNob3ciICsgc2VsZi5wcm9wLCBzZWxmLmVuZCApOwoJCQkJfQoJCQl9CgkJfTsKCgkJaWYgKCB0KCkgJiYgalF1ZXJ5LnRpbWVycy5wdXNoKHQpICYmICF0aW1lcklkICkgewoJCQl0aW1lcklkID0gc2V0SW50ZXJ2YWwoIGZ4LnRpY2ssIGZ4LmludGVydmFsICk7CgkJfQoJfSwKCgkvLyBTaW1wbGUgJ3Nob3cnIGZ1bmN0aW9uCglzaG93OiBmdW5jdGlvbigpIHsKCQl2YXIgZGF0YVNob3cgPSBqUXVlcnkuX2RhdGEoIHRoaXMuZWxlbSwgImZ4c2hvdyIgKyB0aGlzLnByb3AgKTsKCgkJLy8gUmVtZW1iZXIgd2hlcmUgd2Ugc3RhcnRlZCwgc28gdGhhdCB3ZSBjYW4gZ28gYmFjayB0byBpdCBsYXRlcgoJCXRoaXMub3B0aW9ucy5vcmlnWyB0aGlzLnByb3AgXSA9IGRhdGFTaG93IHx8IGpRdWVyeS5zdHlsZSggdGhpcy5lbGVtLCB0aGlzLnByb3AgKTsKCQl0aGlzLm9wdGlvbnMuc2hvdyA9IHRydWU7CgoJCS8vIEJlZ2luIHRoZSBhbmltYXRpb24KCQkvLyBNYWtlIHN1cmUgdGhhdCB3ZSBzdGFydCBhdCBhIHNtYWxsIHdpZHRoL2hlaWdodCB0byBhdm9pZCBhbnkgZmxhc2ggb2YgY29udGVudAoJCWlmICggZGF0YVNob3cgIT09IHVuZGVmaW5lZCApIHsKCQkJLy8gVGhpcyBzaG93IGlzIHBpY2tpbmcgdXAgd2hlcmUgYSBwcmV2aW91cyBoaWRlIG9yIHNob3cgbGVmdCBvZmYKCQkJdGhpcy5jdXN0b20oIHRoaXMuY3VyKCksIGRhdGFTaG93ICk7CgkJfSBlbHNlIHsKCQkJdGhpcy5jdXN0b20oIHRoaXMucHJvcCA9PT0gIndpZHRoIiB8fCB0aGlzLnByb3AgPT09ICJoZWlnaHQiID8gMSA6IDAsIHRoaXMuY3VyKCkgKTsKCQl9CgoJCS8vIFN0YXJ0IGJ5IHNob3dpbmcgdGhlIGVsZW1lbnQKCQlqUXVlcnkoIHRoaXMuZWxlbSApLnNob3coKTsKCX0sCgoJLy8gU2ltcGxlICdoaWRlJyBmdW5jdGlvbgoJaGlkZTogZnVuY3Rpb24oKSB7CgkJLy8gUmVtZW1iZXIgd2hlcmUgd2Ugc3RhcnRlZCwgc28gdGhhdCB3ZSBjYW4gZ28gYmFjayB0byBpdCBsYXRlcgoJCXRoaXMub3B0aW9ucy5vcmlnWyB0aGlzLnByb3AgXSA9IGpRdWVyeS5fZGF0YSggdGhpcy5lbGVtLCAiZnhzaG93IiArIHRoaXMucHJvcCApIHx8IGpRdWVyeS5zdHlsZSggdGhpcy5lbGVtLCB0aGlzLnByb3AgKTsKCQl0aGlzLm9wdGlvbnMuaGlkZSA9IHRydWU7CgoJCS8vIEJlZ2luIHRoZSBhbmltYXRpb24KCQl0aGlzLmN1c3RvbSggdGhpcy5jdXIoKSwgMCApOwoJfSwKCgkvLyBFYWNoIHN0ZXAgb2YgYW4gYW5pbWF0aW9uCglzdGVwOiBmdW5jdGlvbiggZ290b0VuZCApIHsKCQl2YXIgcCwgbiwgY29tcGxldGUsCgkJCXQgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLAoJCQlkb25lID0gdHJ1ZSwKCQkJZWxlbSA9IHRoaXMuZWxlbSwKCQkJb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCgkJaWYgKCBnb3RvRW5kIHx8IHQgPj0gb3B0aW9ucy5kdXJhdGlvbiArIHRoaXMuc3RhcnRUaW1lICkgewoJCQl0aGlzLm5vdyA9IHRoaXMuZW5kOwoJCQl0aGlzLnBvcyA9IHRoaXMuc3RhdGUgPSAxOwoJCQl0aGlzLnVwZGF0ZSgpOwoKCQkJb3B0aW9ucy5hbmltYXRlZFByb3BlcnRpZXNbIHRoaXMucHJvcCBdID0gdHJ1ZTsKCgkJCWZvciAoIHAgaW4gb3B0aW9ucy5hbmltYXRlZFByb3BlcnRpZXMgKSB7CgkJCQlpZiAoIG9wdGlvbnMuYW5pbWF0ZWRQcm9wZXJ0aWVzWyBwIF0gIT09IHRydWUgKSB7CgkJCQkJZG9uZSA9IGZhbHNlOwoJCQkJfQoJCQl9CgoJCQlpZiAoIGRvbmUgKSB7CgkJCQkvLyBSZXNldCB0aGUgb3ZlcmZsb3cKCQkJCWlmICggb3B0aW9ucy5vdmVyZmxvdyAhPSBudWxsICYmICFqUXVlcnkuc3VwcG9ydC5zaHJpbmtXcmFwQmxvY2tzICkgewoKCQkJCQlqUXVlcnkuZWFjaCggWyAiIiwgIlgiLCAiWSIgXSwgZnVuY3Rpb24oIGluZGV4LCB2YWx1ZSApIHsKCQkJCQkJZWxlbS5zdHlsZVsgIm92ZXJmbG93IiArIHZhbHVlIF0gPSBvcHRpb25zLm92ZXJmbG93WyBpbmRleCBdOwoJCQkJCX0pOwoJCQkJfQoKCQkJCS8vIEhpZGUgdGhlIGVsZW1lbnQgaWYgdGhlICJoaWRlIiBvcGVyYXRpb24gd2FzIGRvbmUKCQkJCWlmICggb3B0aW9ucy5oaWRlICkgewoJCQkJCWpRdWVyeSggZWxlbSApLmhpZGUoKTsKCQkJCX0KCgkJCQkvLyBSZXNldCB0aGUgcHJvcGVydGllcywgaWYgdGhlIGl0ZW0gaGFzIGJlZW4gaGlkZGVuIG9yIHNob3duCgkJCQlpZiAoIG9wdGlvbnMuaGlkZSB8fCBvcHRpb25zLnNob3cgKSB7CgkJCQkJZm9yICggcCBpbiBvcHRpb25zLmFuaW1hdGVkUHJvcGVydGllcyApIHsKCQkJCQkJalF1ZXJ5LnN0eWxlKCBlbGVtLCBwLCBvcHRpb25zLm9yaWdbIHAgXSApOwoJCQkJCQlqUXVlcnkucmVtb3ZlRGF0YSggZWxlbSwgImZ4c2hvdyIgKyBwLCB0cnVlICk7CgkJCQkJCS8vIFRvZ2dsZSBkYXRhIGlzIG5vIGxvbmdlciBuZWVkZWQKCQkJCQkJalF1ZXJ5LnJlbW92ZURhdGEoIGVsZW0sICJ0b2dnbGUiICsgcCwgdHJ1ZSApOwoJCQkJCX0KCQkJCX0KCgkJCQkvLyBFeGVjdXRlIHRoZSBjb21wbGV0ZSBmdW5jdGlvbgoJCQkJLy8gaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGNvbXBsZXRlIGZ1bmN0aW9uIHRocm93cyBhbiBleGNlcHRpb24KCQkJCS8vIHdlIG11c3QgZW5zdXJlIGl0IHdvbid0IGJlIGNhbGxlZCB0d2ljZS4gIzU2ODQKCgkJCQljb21wbGV0ZSA9IG9wdGlvbnMuY29tcGxldGU7CgkJCQlpZiAoIGNvbXBsZXRlICkgewoKCQkJCQlvcHRpb25zLmNvbXBsZXRlID0gZmFsc2U7CgkJCQkJY29tcGxldGUuY2FsbCggZWxlbSApOwoJCQkJfQoJCQl9CgoJCQlyZXR1cm4gZmFsc2U7CgoJCX0gZWxzZSB7CgkJCS8vIGNsYXNzaWNhbCBlYXNpbmcgY2Fubm90IGJlIHVzZWQgd2l0aCBhbiBJbmZpbml0eSBkdXJhdGlvbgoJCQlpZiAoIG9wdGlvbnMuZHVyYXRpb24gPT0gSW5maW5pdHkgKSB7CgkJCQl0aGlzLm5vdyA9IHQ7CgkJCX0gZWxzZSB7CgkJCQluID0gdCAtIHRoaXMuc3RhcnRUaW1lOwoJCQkJdGhpcy5zdGF0ZSA9IG4gLyBvcHRpb25zLmR1cmF0aW9uOwoKCQkJCS8vIFBlcmZvcm0gdGhlIGVhc2luZyBmdW5jdGlvbiwgZGVmYXVsdHMgdG8gc3dpbmcKCQkJCXRoaXMucG9zID0galF1ZXJ5LmVhc2luZ1sgb3B0aW9ucy5hbmltYXRlZFByb3BlcnRpZXNbdGhpcy5wcm9wXSBdKCB0aGlzLnN0YXRlLCBuLCAwLCAxLCBvcHRpb25zLmR1cmF0aW9uICk7CgkJCQl0aGlzLm5vdyA9IHRoaXMuc3RhcnQgKyAoICh0aGlzLmVuZCAtIHRoaXMuc3RhcnQpICogdGhpcy5wb3MgKTsKCQkJfQoJCQkvLyBQZXJmb3JtIHRoZSBuZXh0IHN0ZXAgb2YgdGhlIGFuaW1hdGlvbgoJCQl0aGlzLnVwZGF0ZSgpOwoJCX0KCgkJcmV0dXJuIHRydWU7Cgl9Cn07CgpqUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZngsIHsKCXRpY2s6IGZ1bmN0aW9uKCkgewoJCXZhciB0aW1lciwKCQkJdGltZXJzID0galF1ZXJ5LnRpbWVycywKCQkJaSA9IDA7CgoJCWZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHsKCQkJdGltZXIgPSB0aW1lcnNbIGkgXTsKCQkJLy8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkCgkJCWlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkgewoJCQkJdGltZXJzLnNwbGljZSggaS0tLCAxICk7CgkJCX0KCQl9CgoJCWlmICggIXRpbWVycy5sZW5ndGggKSB7CgkJCWpRdWVyeS5meC5zdG9wKCk7CgkJfQoJfSwKCglpbnRlcnZhbDogMTMsCgoJc3RvcDogZnVuY3Rpb24oKSB7CgkJY2xlYXJJbnRlcnZhbCggdGltZXJJZCApOwoJCXRpbWVySWQgPSBudWxsOwoJfSwKCglzcGVlZHM6IHsKCQlzbG93OiA2MDAsCgkJZmFzdDogMjAwLAoJCS8vIERlZmF1bHQgc3BlZWQKCQlfZGVmYXVsdDogNDAwCgl9LAoKCXN0ZXA6IHsKCQlvcGFjaXR5OiBmdW5jdGlvbiggZnggKSB7CgkJCWpRdWVyeS5zdHlsZSggZnguZWxlbSwgIm9wYWNpdHkiLCBmeC5ub3cgKTsKCQl9LAoKCQlfZGVmYXVsdDogZnVuY3Rpb24oIGZ4ICkgewoJCQlpZiAoIGZ4LmVsZW0uc3R5bGUgJiYgZnguZWxlbS5zdHlsZVsgZngucHJvcCBdICE9IG51bGwgKSB7CgkJCQlmeC5lbGVtLnN0eWxlWyBmeC5wcm9wIF0gPSBmeC5ub3cgKyBmeC51bml0OwoJCQl9IGVsc2UgewoJCQkJZnguZWxlbVsgZngucHJvcCBdID0gZngubm93OwoJCQl9CgkJfQoJfQp9KTsKCi8vIEVuc3VyZSBwcm9wcyB0aGF0IGNhbid0IGJlIG5lZ2F0aXZlIGRvbid0IGdvIHRoZXJlIG9uIHVuZGVyc2hvb3QgZWFzaW5nCmpRdWVyeS5lYWNoKCBmeEF0dHJzLmNvbmNhdC5hcHBseSggW10sIGZ4QXR0cnMgKSwgZnVuY3Rpb24oIGksIHByb3AgKSB7CgkvLyBleGNsdWRlIG1hcmdpblRvcCwgbWFyZ2luTGVmdCwgbWFyZ2luQm90dG9tIGFuZCBtYXJnaW5SaWdodCBmcm9tIHRoaXMgbGlzdAoJaWYgKCBwcm9wLmluZGV4T2YoICJtYXJnaW4iICkgKSB7CgkJalF1ZXJ5LmZ4LnN0ZXBbIHByb3AgXSA9IGZ1bmN0aW9uKCBmeCApIHsKCQkJalF1ZXJ5LnN0eWxlKCBmeC5lbGVtLCBwcm9wLCBNYXRoLm1heCgwLCBmeC5ub3cpICsgZngudW5pdCApOwoJCX07Cgl9Cn0pOwoKaWYgKCBqUXVlcnkuZXhwciAmJiBqUXVlcnkuZXhwci5maWx0ZXJzICkgewoJalF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiBqUXVlcnkuZ3JlcChqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7CgkJCXJldHVybiBlbGVtID09PSBmbi5lbGVtOwoJCX0pLmxlbmd0aDsKCX07Cn0KCi8vIFRyeSB0byByZXN0b3JlIHRoZSBkZWZhdWx0IGRpc3BsYXkgdmFsdWUgb2YgYW4gZWxlbWVudApmdW5jdGlvbiBkZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7CgoJaWYgKCAhZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gKSB7CgoJCXZhciBib2R5ID0gZG9jdW1lbnQuYm9keSwKCQkJZWxlbSA9IGpRdWVyeSggIjwiICsgbm9kZU5hbWUgKyAiPiIgKS5hcHBlbmRUbyggYm9keSApLAoJCQlkaXNwbGF5ID0gZWxlbS5jc3MoICJkaXNwbGF5IiApOwoJCWVsZW0ucmVtb3ZlKCk7CgoJCS8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLAoJCS8vIGdldCBlbGVtZW50J3MgcmVhbCBkZWZhdWx0IGRpc3BsYXkgYnkgYXR0YWNoaW5nIGl0IHRvIGEgdGVtcCBpZnJhbWUKCQlpZiAoIGRpc3BsYXkgPT09ICJub25lIiB8fCBkaXNwbGF5ID09PSAiIiApIHsKCQkJLy8gTm8gaWZyYW1lIHRvIHVzZSB5ZXQsIHNvIGNyZWF0ZSBpdAoJCQlpZiAoICFpZnJhbWUgKSB7CgkJCQlpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiaWZyYW1lIiApOwoJCQkJaWZyYW1lLmZyYW1lQm9yZGVyID0gaWZyYW1lLndpZHRoID0gaWZyYW1lLmhlaWdodCA9IDA7CgkJCX0KCgkJCWJvZHkuYXBwZW5kQ2hpbGQoIGlmcmFtZSApOwoKCQkJLy8gQ3JlYXRlIGEgY2FjaGVhYmxlIGNvcHkgb2YgdGhlIGlmcmFtZSBkb2N1bWVudCBvbiBmaXJzdCBjYWxsLgoJCQkvLyBJRSBhbmQgT3BlcmEgd2lsbCBhbGxvdyB1cyB0byByZXVzZSB0aGUgaWZyYW1lRG9jIHdpdGhvdXQgcmUtd3JpdGluZyB0aGUgZmFrZSBIVE1MCgkJCS8vIGRvY3VtZW50IHRvIGl0OyBXZWJLaXQgJiBGaXJlZm94IHdvbid0IGFsbG93IHJldXNpbmcgdGhlIGlmcmFtZSBkb2N1bWVudC4KCQkJaWYgKCAhaWZyYW1lRG9jIHx8ICFpZnJhbWUuY3JlYXRlRWxlbWVudCApIHsKCQkJCWlmcmFtZURvYyA9ICggaWZyYW1lLmNvbnRlbnRXaW5kb3cgfHwgaWZyYW1lLmNvbnRlbnREb2N1bWVudCApLmRvY3VtZW50OwoJCQkJaWZyYW1lRG9jLndyaXRlKCAoIGpRdWVyeS5zdXBwb3J0LmJveE1vZGVsID8gIjwhZG9jdHlwZSBodG1sPiIgOiAiIiApICsgIjxodG1sPjxib2R5PiIgKTsKCQkJCWlmcmFtZURvYy5jbG9zZSgpOwoJCQl9CgoJCQllbGVtID0gaWZyYW1lRG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICk7CgoJCQlpZnJhbWVEb2MuYm9keS5hcHBlbmRDaGlsZCggZWxlbSApOwoKCQkJZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sICJkaXNwbGF5IiApOwoJCQlib2R5LnJlbW92ZUNoaWxkKCBpZnJhbWUgKTsKCQl9CgoJCS8vIFN0b3JlIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGlzcGxheQoJCWVsZW1kaXNwbGF5WyBub2RlTmFtZSBdID0gZGlzcGxheTsKCX0KCglyZXR1cm4gZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF07Cn0KCgoKCnZhciBnZXRPZmZzZXQsCglydGFibGUgPSAvXnQoPzphYmxlfGR8aCkkL2ksCglycm9vdCA9IC9eKD86Ym9keXxodG1sKSQvaTsKCmlmICggImdldEJvdW5kaW5nQ2xpZW50UmVjdCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICkgewoJZ2V0T2Zmc2V0ID0gZnVuY3Rpb24oIGVsZW0sIGRvYywgZG9jRWxlbSwgYm94ICkgewoJCXRyeSB7CgkJCWJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CgkJfSBjYXRjaChlKSB7fQoKCQkvLyBNYWtlIHN1cmUgd2UncmUgbm90IGRlYWxpbmcgd2l0aCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZQoJCWlmICggIWJveCB8fCAhalF1ZXJ5LmNvbnRhaW5zKCBkb2NFbGVtLCBlbGVtICkgKSB7CgkJCXJldHVybiBib3ggPyB7IHRvcDogYm94LnRvcCwgbGVmdDogYm94LmxlZnQgfSA6IHsgdG9wOiAwLCBsZWZ0OiAwIH07CgkJfQoKCQl2YXIgYm9keSA9IGRvYy5ib2R5LAoJCQl3aW4gPSBnZXRXaW5kb3coIGRvYyApLAoJCQljbGllbnRUb3AgID0gZG9jRWxlbS5jbGllbnRUb3AgIHx8IGJvZHkuY2xpZW50VG9wICB8fCAwLAoJCQljbGllbnRMZWZ0ID0gZG9jRWxlbS5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwLAoJCQlzY3JvbGxUb3AgID0gd2luLnBhZ2VZT2Zmc2V0IHx8IGpRdWVyeS5zdXBwb3J0LmJveE1vZGVsICYmIGRvY0VsZW0uc2Nyb2xsVG9wICB8fCBib2R5LnNjcm9sbFRvcCwKCQkJc2Nyb2xsTGVmdCA9IHdpbi5wYWdlWE9mZnNldCB8fCBqUXVlcnkuc3VwcG9ydC5ib3hNb2RlbCAmJiBkb2NFbGVtLnNjcm9sbExlZnQgfHwgYm9keS5zY3JvbGxMZWZ0LAoJCQl0b3AgID0gYm94LnRvcCAgKyBzY3JvbGxUb3AgIC0gY2xpZW50VG9wLAoJCQlsZWZ0ID0gYm94LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdDsKCgkJcmV0dXJuIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfTsKCX07Cgp9IGVsc2UgewoJZ2V0T2Zmc2V0ID0gZnVuY3Rpb24oIGVsZW0sIGRvYywgZG9jRWxlbSApIHsKCQl2YXIgY29tcHV0ZWRTdHlsZSwKCQkJb2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQsCgkJCXByZXZPZmZzZXRQYXJlbnQgPSBlbGVtLAoJCQlib2R5ID0gZG9jLmJvZHksCgkJCWRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3LAoJCQlwcmV2Q29tcHV0ZWRTdHlsZSA9IGRlZmF1bHRWaWV3ID8gZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApIDogZWxlbS5jdXJyZW50U3R5bGUsCgkJCXRvcCA9IGVsZW0ub2Zmc2V0VG9wLAoJCQlsZWZ0ID0gZWxlbS5vZmZzZXRMZWZ0OwoKCQl3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtICE9PSBib2R5ICYmIGVsZW0gIT09IGRvY0VsZW0gKSB7CgkJCWlmICggalF1ZXJ5LnN1cHBvcnQuZml4ZWRQb3NpdGlvbiAmJiBwcmV2Q29tcHV0ZWRTdHlsZS5wb3NpdGlvbiA9PT0gImZpeGVkIiApIHsKCQkJCWJyZWFrOwoJCQl9CgoJCQljb21wdXRlZFN0eWxlID0gZGVmYXVsdFZpZXcgPyBkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW0sIG51bGwpIDogZWxlbS5jdXJyZW50U3R5bGU7CgkJCXRvcCAgLT0gZWxlbS5zY3JvbGxUb3A7CgkJCWxlZnQgLT0gZWxlbS5zY3JvbGxMZWZ0OwoKCQkJaWYgKCBlbGVtID09PSBvZmZzZXRQYXJlbnQgKSB7CgkJCQl0b3AgICs9IGVsZW0ub2Zmc2V0VG9wOwoJCQkJbGVmdCArPSBlbGVtLm9mZnNldExlZnQ7CgoJCQkJaWYgKCBqUXVlcnkuc3VwcG9ydC5kb2VzTm90QWRkQm9yZGVyICYmICEoalF1ZXJ5LnN1cHBvcnQuZG9lc0FkZEJvcmRlckZvclRhYmxlQW5kQ2VsbHMgJiYgcnRhYmxlLnRlc3QoZWxlbS5ub2RlTmFtZSkpICkgewoJCQkJCXRvcCAgKz0gcGFyc2VGbG9hdCggY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCAgKSB8fCAwOwoJCQkJCWxlZnQgKz0gcGFyc2VGbG9hdCggY29tcHV0ZWRTdHlsZS5ib3JkZXJMZWZ0V2lkdGggKSB8fCAwOwoJCQkJfQoKCQkJCXByZXZPZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7CgkJCQlvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudDsKCQkJfQoKCQkJaWYgKCBqUXVlcnkuc3VwcG9ydC5zdWJ0cmFjdHNCb3JkZXJGb3JPdmVyZmxvd05vdFZpc2libGUgJiYgY29tcHV0ZWRTdHlsZS5vdmVyZmxvdyAhPT0gInZpc2libGUiICkgewoJCQkJdG9wICArPSBwYXJzZUZsb2F0KCBjb21wdXRlZFN0eWxlLmJvcmRlclRvcFdpZHRoICApIHx8IDA7CgkJCQlsZWZ0ICs9IHBhcnNlRmxvYXQoIGNvbXB1dGVkU3R5bGUuYm9yZGVyTGVmdFdpZHRoICkgfHwgMDsKCQkJfQoKCQkJcHJldkNvbXB1dGVkU3R5bGUgPSBjb21wdXRlZFN0eWxlOwoJCX0KCgkJaWYgKCBwcmV2Q29tcHV0ZWRTdHlsZS5wb3NpdGlvbiA9PT0gInJlbGF0aXZlIiB8fCBwcmV2Q29tcHV0ZWRTdHlsZS5wb3NpdGlvbiA9PT0gInN0YXRpYyIgKSB7CgkJCXRvcCAgKz0gYm9keS5vZmZzZXRUb3A7CgkJCWxlZnQgKz0gYm9keS5vZmZzZXRMZWZ0OwoJCX0KCgkJaWYgKCBqUXVlcnkuc3VwcG9ydC5maXhlZFBvc2l0aW9uICYmIHByZXZDb21wdXRlZFN0eWxlLnBvc2l0aW9uID09PSAiZml4ZWQiICkgewoJCQl0b3AgICs9IE1hdGgubWF4KCBkb2NFbGVtLnNjcm9sbFRvcCwgYm9keS5zY3JvbGxUb3AgKTsKCQkJbGVmdCArPSBNYXRoLm1heCggZG9jRWxlbS5zY3JvbGxMZWZ0LCBib2R5LnNjcm9sbExlZnQgKTsKCQl9CgoJCXJldHVybiB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0IH07Cgl9Owp9CgpqUXVlcnkuZm4ub2Zmc2V0ID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7CglpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7CgkJcmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/CgkJCXRoaXMgOgoJCQl0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7CgkJCQlqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApOwoJCQl9KTsKCX0KCgl2YXIgZWxlbSA9IHRoaXNbMF0sCgkJZG9jID0gZWxlbSAmJiBlbGVtLm93bmVyRG9jdW1lbnQ7CgoJaWYgKCAhZG9jICkgewoJCXJldHVybiBudWxsOwoJfQoKCWlmICggZWxlbSA9PT0gZG9jLmJvZHkgKSB7CgkJcmV0dXJuIGpRdWVyeS5vZmZzZXQuYm9keU9mZnNldCggZWxlbSApOwoJfQoKCXJldHVybiBnZXRPZmZzZXQoIGVsZW0sIGRvYywgZG9jLmRvY3VtZW50RWxlbWVudCApOwp9OwoKalF1ZXJ5Lm9mZnNldCA9IHsKCglib2R5T2Zmc2V0OiBmdW5jdGlvbiggYm9keSApIHsKCQl2YXIgdG9wID0gYm9keS5vZmZzZXRUb3AsCgkJCWxlZnQgPSBib2R5Lm9mZnNldExlZnQ7CgoJCWlmICggalF1ZXJ5LnN1cHBvcnQuZG9lc05vdEluY2x1ZGVNYXJnaW5JbkJvZHlPZmZzZXQgKSB7CgkJCXRvcCAgKz0gcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyhib2R5LCAibWFyZ2luVG9wIikgKSB8fCAwOwoJCQlsZWZ0ICs9IHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoYm9keSwgIm1hcmdpbkxlZnQiKSApIHx8IDA7CgkJfQoKCQlyZXR1cm4geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9OwoJfSwKCglzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkgewoJCXZhciBwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sICJwb3NpdGlvbiIgKTsKCgkJLy8gc2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbQoJCWlmICggcG9zaXRpb24gPT09ICJzdGF0aWMiICkgewoJCQllbGVtLnN0eWxlLnBvc2l0aW9uID0gInJlbGF0aXZlIjsKCQl9CgoJCXZhciBjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksCgkJCWN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCksCgkJCWN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sICJ0b3AiICksCgkJCWN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCAibGVmdCIgKSwKCQkJY2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSAiYWJzb2x1dGUiIHx8IHBvc2l0aW9uID09PSAiZml4ZWQiICkgJiYgalF1ZXJ5LmluQXJyYXkoImF1dG8iLCBbY3VyQ1NTVG9wLCBjdXJDU1NMZWZ0XSkgPiAtMSwKCQkJcHJvcHMgPSB7fSwgY3VyUG9zaXRpb24gPSB7fSwgY3VyVG9wLCBjdXJMZWZ0OwoKCQkvLyBuZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlciB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWQKCQlpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkgewoJCQljdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTsKCQkJY3VyVG9wID0gY3VyUG9zaXRpb24udG9wOwoJCQljdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDsKCQl9IGVsc2UgewoJCQljdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwOwoJCQljdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7CgkJfQoKCQlpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7CgkJCW9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGN1ck9mZnNldCApOwoJCX0KCgkJaWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkgewoJCQlwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wOwoJCX0KCQlpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkgewoJCQlwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDsKCQl9CgoJCWlmICggInVzaW5nIiBpbiBvcHRpb25zICkgewoJCQlvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7CgkJfSBlbHNlIHsKCQkJY3VyRWxlbS5jc3MoIHByb3BzICk7CgkJfQoJfQp9OwoKCmpRdWVyeS5mbi5leHRlbmQoewoKCXBvc2l0aW9uOiBmdW5jdGlvbigpIHsKCQlpZiAoICF0aGlzWzBdICkgewoJCQlyZXR1cm4gbnVsbDsKCQl9CgoJCXZhciBlbGVtID0gdGhpc1swXSwKCgkJLy8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnQKCQlvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpLAoKCQkvLyBHZXQgY29ycmVjdCBvZmZzZXRzCgkJb2Zmc2V0ICAgICAgID0gdGhpcy5vZmZzZXQoKSwKCQlwYXJlbnRPZmZzZXQgPSBycm9vdC50ZXN0KG9mZnNldFBhcmVudFswXS5ub2RlTmFtZSkgPyB7IHRvcDogMCwgbGVmdDogMCB9IDogb2Zmc2V0UGFyZW50Lm9mZnNldCgpOwoKCQkvLyBTdWJ0cmFjdCBlbGVtZW50IG1hcmdpbnMKCQkvLyBub3RlOiB3aGVuIGFuIGVsZW1lbnQgaGFzIG1hcmdpbjogYXV0byB0aGUgb2Zmc2V0TGVmdCBhbmQgbWFyZ2luTGVmdAoJCS8vIGFyZSB0aGUgc2FtZSBpbiBTYWZhcmkgY2F1c2luZyBvZmZzZXQubGVmdCB0byBpbmNvcnJlY3RseSBiZSAwCgkJb2Zmc2V0LnRvcCAgLT0gcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyhlbGVtLCAibWFyZ2luVG9wIikgKSB8fCAwOwoJCW9mZnNldC5sZWZ0IC09IHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoZWxlbSwgIm1hcmdpbkxlZnQiKSApIHx8IDA7CgoJCS8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVycwoJCXBhcmVudE9mZnNldC50b3AgICs9IHBhcnNlRmxvYXQoIGpRdWVyeS5jc3Mob2Zmc2V0UGFyZW50WzBdLCAiYm9yZGVyVG9wV2lkdGgiKSApIHx8IDA7CgkJcGFyZW50T2Zmc2V0LmxlZnQgKz0gcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyhvZmZzZXRQYXJlbnRbMF0sICJib3JkZXJMZWZ0V2lkdGgiKSApIHx8IDA7CgoJCS8vIFN1YnRyYWN0IHRoZSB0d28gb2Zmc2V0cwoJCXJldHVybiB7CgkJCXRvcDogIG9mZnNldC50b3AgIC0gcGFyZW50T2Zmc2V0LnRvcCwKCQkJbGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdAoJCX07Cgl9LAoKCW9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkgewoJCQl2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnQuYm9keTsKCQkJd2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgKCFycm9vdC50ZXN0KG9mZnNldFBhcmVudC5ub2RlTmFtZSkgJiYgalF1ZXJ5LmNzcyhvZmZzZXRQYXJlbnQsICJwb3NpdGlvbiIpID09PSAic3RhdGljIikgKSB7CgkJCQlvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50OwoJCQl9CgkJCXJldHVybiBvZmZzZXRQYXJlbnQ7CgkJfSk7Cgl9Cn0pOwoKCi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kcwpqUXVlcnkuZWFjaCgge3Njcm9sbExlZnQ6ICJwYWdlWE9mZnNldCIsIHNjcm9sbFRvcDogInBhZ2VZT2Zmc2V0In0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7Cgl2YXIgdG9wID0gL1kvLnRlc3QoIHByb3AgKTsKCglqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHsKCQlyZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkgewoJCQl2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7CgoJCQlpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkgewoJCQkJcmV0dXJuIHdpbiA/IChwcm9wIGluIHdpbikgPyB3aW5bIHByb3AgXSA6CgkJCQkJalF1ZXJ5LnN1cHBvcnQuYm94TW9kZWwgJiYgd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgbWV0aG9kIF0gfHwKCQkJCQkJd2luLmRvY3VtZW50LmJvZHlbIG1ldGhvZCBdIDoKCQkJCQllbGVtWyBtZXRob2QgXTsKCQkJfQoKCQkJaWYgKCB3aW4gKSB7CgkJCQl3aW4uc2Nyb2xsVG8oCgkJCQkJIXRvcCA/IHZhbCA6IGpRdWVyeSggd2luICkuc2Nyb2xsTGVmdCgpLAoJCQkJCSB0b3AgPyB2YWwgOiBqUXVlcnkoIHdpbiApLnNjcm9sbFRvcCgpCgkJCQkpOwoKCQkJfSBlbHNlIHsKCQkJCWVsZW1bIG1ldGhvZCBdID0gdmFsOwoJCQl9CgkJfSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGgsIG51bGwgKTsKCX07Cn0pOwoKZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkgewoJcmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8KCQllbGVtIDoKCQllbGVtLm5vZGVUeXBlID09PSA5ID8KCQkJZWxlbS5kZWZhdWx0VmlldyB8fCBlbGVtLnBhcmVudFdpbmRvdyA6CgkJCWZhbHNlOwp9CgoKCgovLyBDcmVhdGUgd2lkdGgsIGhlaWdodCwgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHMKalF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiAiaGVpZ2h0IiwgV2lkdGg6ICJ3aWR0aCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7Cgl2YXIgY2xpZW50UHJvcCA9ICJjbGllbnQiICsgbmFtZSwKCQlzY3JvbGxQcm9wID0gInNjcm9sbCIgKyBuYW1lLAoJCW9mZnNldFByb3AgPSAib2Zmc2V0IiArIG5hbWU7CgoJLy8gaW5uZXJIZWlnaHQgYW5kIGlubmVyV2lkdGgKCWpRdWVyeS5mblsgImlubmVyIiArIG5hbWUgXSA9IGZ1bmN0aW9uKCkgewoJCXZhciBlbGVtID0gdGhpc1swXTsKCQlyZXR1cm4gZWxlbSA/CgkJCWVsZW0uc3R5bGUgPwoJCQlwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCAicGFkZGluZyIgKSApIDoKCQkJdGhpc1sgdHlwZSBdKCkgOgoJCQludWxsOwoJfTsKCgkvLyBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aAoJalF1ZXJ5LmZuWyAib3V0ZXIiICsgbmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiApIHsKCQl2YXIgZWxlbSA9IHRoaXNbMF07CgkJcmV0dXJuIGVsZW0gPwoJCQllbGVtLnN0eWxlID8KCQkJcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgbWFyZ2luID8gIm1hcmdpbiIgOiAiYm9yZGVyIiApICkgOgoJCQl0aGlzWyB0eXBlIF0oKSA6CgkJCW51bGw7Cgl9OwoKCWpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIHZhbHVlICkgewoJCXJldHVybiBqUXVlcnkuYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7CgkJCXZhciBkb2MsIGRvY0VsZW1Qcm9wLCBvcmlnLCByZXQ7CgoJCQlpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkgewoJCQkJLy8gM3JkIGNvbmRpdGlvbiBhbGxvd3MgTm9raWEgc3VwcG9ydCwgYXMgaXQgc3VwcG9ydHMgdGhlIGRvY0VsZW0gcHJvcCBidXQgbm90IENTUzFDb21wYXQKCQkJCWRvYyA9IGVsZW0uZG9jdW1lbnQ7CgkJCQlkb2NFbGVtUHJvcCA9IGRvYy5kb2N1bWVudEVsZW1lbnRbIGNsaWVudFByb3AgXTsKCQkJCXJldHVybiBqUXVlcnkuc3VwcG9ydC5ib3hNb2RlbCAmJiBkb2NFbGVtUHJvcCB8fAoJCQkJCWRvYy5ib2R5ICYmIGRvYy5ib2R5WyBjbGllbnRQcm9wIF0gfHwgZG9jRWxlbVByb3A7CgkJCX0KCgkJCS8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHQKCQkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkgewoJCQkJLy8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdLCB3aGljaGV2ZXIgaXMgZ3JlYXRlcgoJCQkJZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7CgoJCQkJLy8gd2hlbiBhIHdpbmRvdyA+IGRvY3VtZW50LCBJRTYgcmVwb3J0cyBhIG9mZnNldFtXaWR0aC9IZWlnaHRdID4gY2xpZW50W1dpZHRoL0hlaWdodF0KCQkJCS8vIHNvIHdlIGNhbid0IHVzZSBtYXgsIGFzIGl0J2xsIGNob29zZSB0aGUgaW5jb3JyZWN0IG9mZnNldFtXaWR0aC9IZWlnaHRdCgkJCQkvLyBpbnN0ZWFkIHdlIHVzZSB0aGUgY29ycmVjdCBjbGllbnRbV2lkdGgvSGVpZ2h0XQoJCQkJLy8gc3VwcG9ydDpJRTYKCQkJCWlmICggZG9jWyBjbGllbnRQcm9wIF0gPj0gZG9jWyBzY3JvbGxQcm9wIF0gKSB7CgkJCQkJcmV0dXJuIGRvY1sgY2xpZW50UHJvcCBdOwoJCQkJfQoKCQkJCXJldHVybiBNYXRoLm1heCgKCQkJCQllbGVtLmJvZHlbIHNjcm9sbFByb3AgXSwgZG9jWyBzY3JvbGxQcm9wIF0sCgkJCQkJZWxlbS5ib2R5WyBvZmZzZXRQcm9wIF0sIGRvY1sgb2Zmc2V0UHJvcCBdCgkJCQkpOwoJCQl9CgoJCQkvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50CgkJCWlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHsKCQkJCW9yaWcgPSBqUXVlcnkuY3NzKCBlbGVtLCB0eXBlICk7CgkJCQlyZXQgPSBwYXJzZUZsb2F0KCBvcmlnICk7CgkJCQlyZXR1cm4galF1ZXJ5LmlzTnVtZXJpYyggcmV0ICkgPyByZXQgOiBvcmlnOwoJCQl9CgoJCQkvLyBTZXQgdGhlIHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudAoJCQlqUXVlcnkoIGVsZW0gKS5jc3MoIHR5cGUsIHZhbHVlICk7CgkJfSwgdHlwZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGgsIG51bGwgKTsKCX07Cn0pOwoKCgoKLy8gRXhwb3NlIGpRdWVyeSB0byB0aGUgZ2xvYmFsIG9iamVjdAp3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7CgovLyBFeHBvc2UgalF1ZXJ5IGFzIGFuIEFNRCBtb2R1bGUsIGJ1dCBvbmx5IGZvciBBTUQgbG9hZGVycyB0aGF0Ci8vIHVuZGVyc3RhbmQgdGhlIGlzc3VlcyB3aXRoIGxvYWRpbmcgbXVsdGlwbGUgdmVyc2lvbnMgb2YgalF1ZXJ5Ci8vIGluIGEgcGFnZSB0aGF0IGFsbCBtaWdodCBjYWxsIGRlZmluZSgpLiBUaGUgbG9hZGVyIHdpbGwgaW5kaWNhdGUKLy8gdGhleSBoYXZlIHNwZWNpYWwgYWxsb3dhbmNlcyBmb3IgbXVsdGlwbGUgalF1ZXJ5IHZlcnNpb25zIGJ5Ci8vIHNwZWNpZnlpbmcgZGVmaW5lLmFtZC5qUXVlcnkgPSB0cnVlLiBSZWdpc3RlciBhcyBhIG5hbWVkIG1vZHVsZSwKLy8gc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlciBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLAovLyBidXQgbm90IHVzZSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0IHVuZGVyc3RhbmRzIGFub255bW91cwovLyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdCB3YXkgdG8gcmVnaXN0ZXIuCi8vIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlIGRlcml2ZWQgZnJvbQovLyBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZSBmaWxlIG5hbWUuCi8vIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHMgdG8gY2FsbAovLyBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLgppZiAoIHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCAmJiBkZWZpbmUuYW1kLmpRdWVyeSApIHsKCWRlZmluZSggImpxdWVyeSIsIFtdLCBmdW5jdGlvbiAoKSB7IHJldHVybiBqUXVlcnk7IH0gKTsKfQoKCgp9KSggd2luZG93ICk7Ci8qKgogKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuMC4xCiAqIChjKSAyMDEwLTIwMTIgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnCiAqIExpY2Vuc2U6IE1JVAogKi8KKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQpewogIHZhciBfalF1ZXJ5ID0gd2luZG93LmpRdWVyeS5ub0NvbmZsaWN0KHRydWUpOwoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIubG93ZXJjYXNlCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gbG93ZXJjYXNlLgogKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlLgogKiBAcmV0dXJucyB7c3RyaW5nfSBMb3dlcmNhc2VkIHN0cmluZy4KICovCnZhciBsb3dlcmNhc2UgPSBmdW5jdGlvbihzdHJpbmcpe3JldHVybiBpc1N0cmluZyhzdHJpbmcpID8gc3RyaW5nLnRvTG93ZXJDYXNlKCkgOiBzdHJpbmc7fTsKCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIudXBwZXJjYXNlCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gdXBwZXJjYXNlLgogKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gdXBwZXJjYXNlLgogKiBAcmV0dXJucyB7c3RyaW5nfSBVcHBlcmNhc2VkIHN0cmluZy4KICovCnZhciB1cHBlcmNhc2UgPSBmdW5jdGlvbihzdHJpbmcpe3JldHVybiBpc1N0cmluZyhzdHJpbmcpID8gc3RyaW5nLnRvVXBwZXJDYXNlKCkgOiBzdHJpbmc7fTsKCgp2YXIgbWFudWFsTG93ZXJjYXNlID0gZnVuY3Rpb24ocykgewogIHJldHVybiBpc1N0cmluZyhzKQogICAgICA/IHMucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24oY2gpIHtyZXR1cm4gZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgfCAzMik7fSkKICAgICAgOiBzOwp9Owp2YXIgbWFudWFsVXBwZXJjYXNlID0gZnVuY3Rpb24ocykgewogIHJldHVybiBpc1N0cmluZyhzKQogICAgICA/IHMucmVwbGFjZSgvW2Etel0vZywgZnVuY3Rpb24oY2gpIHtyZXR1cm4gZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgJiB+MzIpO30pCiAgICAgIDogczsKfTsKCgovLyBTdHJpbmcjdG9Mb3dlckNhc2UgYW5kIFN0cmluZyN0b1VwcGVyQ2FzZSBkb24ndCBwcm9kdWNlIGNvcnJlY3QgcmVzdWx0cyBpbiBicm93c2VycyB3aXRoIFR1cmtpc2gKLy8gbG9jYWxlLCBmb3IgdGhpcyByZWFzb24gd2UgbmVlZCB0byBkZXRlY3QgdGhpcyBjYXNlIGFuZCByZWRlZmluZSBsb3dlcmNhc2UvdXBwZXJjYXNlIG1ldGhvZHMKLy8gd2l0aCBjb3JyZWN0IGJ1dCBzbG93ZXIgYWx0ZXJuYXRpdmVzLgppZiAoJ2knICE9PSAnSScudG9Mb3dlckNhc2UoKSkgewogIGxvd2VyY2FzZSA9IG1hbnVhbExvd2VyY2FzZTsKICB1cHBlcmNhc2UgPSBtYW51YWxVcHBlcmNhc2U7Cn0KCmZ1bmN0aW9uIGZyb21DaGFyQ29kZShjb2RlKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7fQoKCnZhciBFcnJvciAgICAgICAgICAgICA9IHdpbmRvdy5FcnJvciwKICAgIC8qKiBob2xkcyBtYWpvciB2ZXJzaW9uIG51bWJlciBmb3IgSUUgb3IgTmFOIGZvciByZWFsIGJyb3dzZXJzICovCiAgICBtc2llICAgICAgICAgICAgICA9IGludCgoL21zaWUgKFxkKykvLmV4ZWMobG93ZXJjYXNlKG5hdmlnYXRvci51c2VyQWdlbnQpKSB8fCBbXSlbMV0pLAogICAganFMaXRlLCAgICAgICAgICAgLy8gZGVsYXkgYmluZGluZyBzaW5jZSBqUXVlcnkgY291bGQgYmUgbG9hZGVkIGFmdGVyIHVzLgogICAgalF1ZXJ5LCAgICAgICAgICAgLy8gZGVsYXkgYmluZGluZwogICAgc2xpY2UgICAgICAgICAgICAgPSBbXS5zbGljZSwKICAgIHB1c2ggICAgICAgICAgICAgID0gW10ucHVzaCwKICAgIHRvU3RyaW5nICAgICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZywKCiAgICAvKiogQG5hbWUgYW5ndWxhciAqLwogICAgYW5ndWxhciAgICAgICAgICAgPSB3aW5kb3cuYW5ndWxhciB8fCAod2luZG93LmFuZ3VsYXIgPSB7fSksCiAgICBhbmd1bGFyTW9kdWxlLAogICAgbm9kZU5hbWVfLAogICAgdWlkICAgICAgICAgICAgICAgPSBbJzAnLCAnMCcsICcwJ107CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuZm9yRWFjaAogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIEludm9rZXMgdGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gb25jZSBmb3IgZWFjaCBpdGVtIGluIGBvYmpgIGNvbGxlY3Rpb24sIHdoaWNoIGNhbiBiZSBlaXRoZXIgYW4KICogb2JqZWN0IG9yIGFuIGFycmF5LiBUaGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggYGl0ZXJhdG9yKHZhbHVlLCBrZXkpYCwgd2hlcmUgYHZhbHVlYAogKiBpcyB0aGUgdmFsdWUgb2YgYW4gb2JqZWN0IHByb3BlcnR5IG9yIGFuIGFycmF5IGVsZW1lbnQgYW5kIGBrZXlgIGlzIHRoZSBvYmplY3QgcHJvcGVydHkga2V5IG9yCiAqIGFycmF5IGVsZW1lbnQgaW5kZXguIFNwZWNpZnlpbmcgYSBgY29udGV4dGAgZm9yIHRoZSBmdW5jdGlvbiBpcyBvcHRpb25hbC4KICoKICogTm90ZTogdGhpcyBmdW5jdGlvbiB3YXMgcHJldmlvdXNseSBrbm93biBhcyBgYW5ndWxhci5mb3JlYWNoYC4KICoKICAgPHByZT4KICAgICB2YXIgdmFsdWVzID0ge25hbWU6ICdtaXNrbycsIGdlbmRlcjogJ21hbGUnfTsKICAgICB2YXIgbG9nID0gW107CiAgICAgYW5ndWxhci5mb3JFYWNoKHZhbHVlcywgZnVuY3Rpb24odmFsdWUsIGtleSl7CiAgICAgICB0aGlzLnB1c2goa2V5ICsgJzogJyArIHZhbHVlKTsKICAgICB9LCBsb2cpOwogICAgIGV4cGVjdChsb2cpLnRvRXF1YWwoWyduYW1lOiBtaXNrbycsICdnZW5kZXI6bWFsZSddKTsKICAgPC9wcmU+CiAqCiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogT2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci4KICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0b3IgSXRlcmF0b3IgZnVuY3Rpb24uCiAqIEBwYXJhbSB7T2JqZWN0PX0gY29udGV4dCBPYmplY3QgdG8gYmVjb21lIGNvbnRleHQgKGB0aGlzYCkgZm9yIHRoZSBpdGVyYXRvciBmdW5jdGlvbi4KICogQHJldHVybnMge09iamVjdHxBcnJheX0gUmVmZXJlbmNlIHRvIGBvYmpgLgogKi8KZnVuY3Rpb24gZm9yRWFjaChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgdmFyIGtleTsKICBpZiAob2JqKSB7CiAgICBpZiAoaXNGdW5jdGlvbihvYmopKXsKICAgICAgZm9yIChrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKGtleSAhPSAncHJvdG90eXBlJyAmJiBrZXkgIT0gJ2xlbmd0aCcgJiYga2V5ICE9ICduYW1lJyAmJiBvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSBpZiAob2JqLmZvckVhY2ggJiYgb2JqLmZvckVhY2ggIT09IGZvckVhY2gpIHsKICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQpOwogICAgfSBlbHNlIGlmIChpc09iamVjdChvYmopICYmIGlzTnVtYmVyKG9iai5sZW5ndGgpKSB7CiAgICAgIGZvciAoa2V5ID0gMDsga2V5IDwgb2JqLmxlbmd0aDsga2V5KyspCiAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5KTsKICAgIH0gZWxzZSB7CiAgICAgIGZvciAoa2V5IGluIG9iaikgewogICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gc29ydGVkS2V5cyhvYmopIHsKICB2YXIga2V5cyA9IFtdOwogIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICBrZXlzLnB1c2goa2V5KTsKICAgIH0KICB9CiAgcmV0dXJuIGtleXMuc29ydCgpOwp9CgpmdW5jdGlvbiBmb3JFYWNoU29ydGVkKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICB2YXIga2V5cyA9IHNvcnRlZEtleXMob2JqKTsKICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7CiAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXlzW2ldXSwga2V5c1tpXSk7CiAgfQogIHJldHVybiBrZXlzOwp9CgoKLyoqCiAqIHdoZW4gdXNpbmcgZm9yRWFjaCB0aGUgcGFyYW1zIGFyZSB2YWx1ZSwga2V5LCBidXQgaXQgaXMgb2Z0ZW4gdXNlZnVsIHRvIGhhdmUga2V5LCB2YWx1ZS4KICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcsICopfSBpdGVyYXRvckZuCiAqIEByZXR1cm5zIHtmdW5jdGlvbigqLCBzdHJpbmcpfQogKi8KZnVuY3Rpb24gcmV2ZXJzZVBhcmFtcyhpdGVyYXRvckZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgaXRlcmF0b3JGbihrZXksIHZhbHVlKSB9Owp9CgovKioKICogQSBjb25zaXN0ZW50IHdheSBvZiBjcmVhdGluZyB1bmlxdWUgSURzIGluIGFuZ3VsYXIuIFRoZSBJRCBpcyBhIHNlcXVlbmNlIG9mIGFscGhhIG51bWVyaWMKICogY2hhcmFjdGVycyBzdWNoIGFzICcwMTJBQkMnLiBUaGUgcmVhc29uIHdoeSB3ZSBhcmUgbm90IHVzaW5nIHNpbXBseSBhIG51bWJlciBjb3VudGVyIGlzIHRoYXQKICogdGhlIG51bWJlciBzdHJpbmcgZ2V0cyBsb25nZXIgb3ZlciB0aW1lLCBhbmQgaXQgY2FuIGFsc28gb3ZlcmZsb3csIHdoZXJlIGFzIHRoZSB0aGUgbmV4dElkCiAqIHdpbGwgZ3JvdyBtdWNoIHNsb3dlciwgaXQgaXMgYSBzdHJpbmcsIGFuZCBpdCB3aWxsIG5ldmVyIG92ZXJmbG93LgogKgogKiBAcmV0dXJucyBhbiB1bmlxdWUgYWxwaGEtbnVtZXJpYyBzdHJpbmcKICovCmZ1bmN0aW9uIG5leHRVaWQoKSB7CiAgdmFyIGluZGV4ID0gdWlkLmxlbmd0aDsKICB2YXIgZGlnaXQ7CgogIHdoaWxlKGluZGV4KSB7CiAgICBpbmRleC0tOwogICAgZGlnaXQgPSB1aWRbaW5kZXhdLmNoYXJDb2RlQXQoMCk7CiAgICBpZiAoZGlnaXQgPT0gNTcgLyonOScqLykgewogICAgICB1aWRbaW5kZXhdID0gJ0EnOwogICAgICByZXR1cm4gdWlkLmpvaW4oJycpOwogICAgfQogICAgaWYgKGRpZ2l0ID09IDkwICAvKidaJyovKSB7CiAgICAgIHVpZFtpbmRleF0gPSAnMCc7CiAgICB9IGVsc2UgewogICAgICB1aWRbaW5kZXhdID0gU3RyaW5nLmZyb21DaGFyQ29kZShkaWdpdCArIDEpOwogICAgICByZXR1cm4gdWlkLmpvaW4oJycpOwogICAgfQogIH0KICB1aWQudW5zaGlmdCgnMCcpOwogIHJldHVybiB1aWQuam9pbignJyk7Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5leHRlbmQKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBFeHRlbmRzIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgYGRzdGAgYnkgY29weWluZyBhbGwgb2YgdGhlIHByb3BlcnRpZXMgZnJvbSB0aGUgYHNyY2Agb2JqZWN0KHMpCiAqIHRvIGBkc3RgLiBZb3UgY2FuIHNwZWNpZnkgbXVsdGlwbGUgYHNyY2Agb2JqZWN0cy4KICoKICogQHBhcmFtIHtPYmplY3R9IGRzdCBEZXN0aW5hdGlvbiBvYmplY3QuCiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzcmMgU291cmNlIG9iamVjdChzKS4KICovCmZ1bmN0aW9uIGV4dGVuZChkc3QpIHsKICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24ob2JqKXsKICAgIGlmIChvYmogIT09IGRzdCkgewogICAgICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSl7CiAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTsKICAgICAgfSk7CiAgICB9CiAgfSk7CiAgcmV0dXJuIGRzdDsKfQoKZnVuY3Rpb24gaW50KHN0cikgewogIHJldHVybiBwYXJzZUludChzdHIsIDEwKTsKfQoKCmZ1bmN0aW9uIGluaGVyaXQocGFyZW50LCBleHRyYSkgewogIHJldHVybiBleHRlbmQobmV3IChleHRlbmQoZnVuY3Rpb24oKSB7fSwge3Byb3RvdHlwZTpwYXJlbnR9KSkoKSwgZXh0cmEpOwp9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLm5vb3AKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgbm8gb3BlcmF0aW9ucy4gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZnVsIHdoZW4gd3JpdGluZyBjb2RlIGluIHRoZQogKiBmdW5jdGlvbmFsIHN0eWxlLgogICA8cHJlPgogICAgIGZ1bmN0aW9uIGZvbyhjYWxsYmFjaykgewogICAgICAgdmFyIHJlc3VsdCA9IGNhbGN1bGF0ZVJlc3VsdCgpOwogICAgICAgKGNhbGxiYWNrIHx8IGFuZ3VsYXIubm9vcCkocmVzdWx0KTsKICAgICB9CiAgIDwvcHJlPgogKi8KZnVuY3Rpb24gbm9vcCgpIHt9Cm5vb3AuJGluamVjdCA9IFtdOwoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pZGVudGl0eQogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGl0cyBmaXJzdCBhcmd1bWVudC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlCiAqIGZ1bmN0aW9uYWwgc3R5bGUuCiAqCiAgIDxwcmU+CiAgICAgZnVuY3Rpb24gdHJhbnNmb3JtZXIodHJhbnNmb3JtYXRpb25GbiwgdmFsdWUpIHsKICAgICAgIHJldHVybiAodHJhbnNmb3JtYXRpb25GbiB8fCBpZGVudGl0eSkodmFsdWUpOwogICAgIH07CiAgIDwvcHJlPgogKi8KZnVuY3Rpb24gaWRlbnRpdHkoJCkge3JldHVybiAkO30KaWRlbnRpdHkuJGluamVjdCA9IFtdOwoKCmZ1bmN0aW9uIHZhbHVlRm4odmFsdWUpIHtyZXR1cm4gZnVuY3Rpb24oKSB7cmV0dXJuIHZhbHVlO307fQoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmlzVW5kZWZpbmVkCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyB1bmRlZmluZWQuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIHVuZGVmaW5lZC4KICovCmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlID09ICd1bmRlZmluZWQnO30KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNEZWZpbmVkCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBkZWZpbmVkLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBkZWZpbmVkLgogKi8KZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlICE9ICd1bmRlZmluZWQnO30KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNPYmplY3QKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBPYmplY3RgLiBVbmxpa2UgYHR5cGVvZmAgaW4gSmF2YVNjcmlwdCwgYG51bGxgcyBhcmUgbm90CiAqIGNvbnNpZGVyZWQgdG8gYmUgb2JqZWN0cy4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYE9iamVjdGAgYnV0IG5vdCBgbnVsbGAuCiAqLwpmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSl7cmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO30KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNTdHJpbmcKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYFN0cmluZ2AuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFN0cmluZ2AuCiAqLwpmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJzt9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmlzTnVtYmVyCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBOdW1iZXJgLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBOdW1iZXJgLgogKi8KZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcic7fQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0RhdGUKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBkYXRlLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBEYXRlYC4KICovCmZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSl7CiAgcmV0dXJuIHRvU3RyaW5nLmFwcGx5KHZhbHVlKSA9PSAnW29iamVjdCBEYXRlXSc7Cn0KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNBcnJheQogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYW4gYEFycmF5YC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYEFycmF5YC4KICovCmZ1bmN0aW9uIGlzQXJyYXkodmFsdWUpIHsKICByZXR1cm4gdG9TdHJpbmcuYXBwbHkodmFsdWUpID09ICdbb2JqZWN0IEFycmF5XSc7Cn0KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNGdW5jdGlvbgogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgRnVuY3Rpb25gLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBGdW5jdGlvbmAuCiAqLwpmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbic7fQoKCi8qKgogKiBDaGVja3MgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqZWN0LgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IG9iaiBPYmplY3QgdG8gY2hlY2sKICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqLgogKi8KZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouZG9jdW1lbnQgJiYgb2JqLmxvY2F0aW9uICYmIG9iai5hbGVydCAmJiBvYmouc2V0SW50ZXJ2YWw7Cn0KCgpmdW5jdGlvbiBpc1Njb3BlKG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLiRldmFsQXN5bmMgJiYgb2JqLiR3YXRjaDsKfQoKCmZ1bmN0aW9uIGlzRmlsZShvYmopIHsKICByZXR1cm4gdG9TdHJpbmcuYXBwbHkob2JqKSA9PT0gJ1tvYmplY3QgRmlsZV0nOwp9CgoKZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7CiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnYm9vbGVhbic7Cn0KCgpmdW5jdGlvbiB0cmltKHZhbHVlKSB7CiAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnJlcGxhY2UoL15ccyovLCAnJykucmVwbGFjZSgvXHMqJC8sICcnKSA6IHZhbHVlOwp9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNFbGVtZW50CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIERPTSBlbGVtZW50IChvciB3cmFwcGVkIGpRdWVyeSBlbGVtZW50KS4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuCiAqLwpmdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkgewogIHJldHVybiBub2RlICYmCiAgICAobm9kZS5ub2RlTmFtZSAgLy8gd2UgYXJlIGEgZGlyZWN0IGVsZW1lbnQKICAgIHx8IChub2RlLmJpbmQgJiYgbm9kZS5maW5kKSk7ICAvLyB3ZSBoYXZlIGEgYmluZCBhbmQgZmluZCBtZXRob2QgcGFydCBvZiBqUXVlcnkgQVBJCn0KCi8qKgogKiBAcGFyYW0gc3RyICdrZXkxLGtleTIsLi4uJwogKiBAcmV0dXJucyB7b2JqZWN0fSBpbiB0aGUgZm9ybSBvZiB7a2V5MTp0cnVlLCBrZXkyOnRydWUsIC4uLn0KICovCmZ1bmN0aW9uIG1ha2VNYXAoc3RyKXsKICB2YXIgb2JqID0ge30sIGl0ZW1zID0gc3RyLnNwbGl0KCIsIiksIGk7CiAgZm9yICggaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKyApCiAgICBvYmpbIGl0ZW1zW2ldIF0gPSB0cnVlOwogIHJldHVybiBvYmo7Cn0KCgppZiAobXNpZSA8IDkpIHsKICBub2RlTmFtZV8gPSBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBlbGVtZW50ID0gZWxlbWVudC5ub2RlTmFtZSA/IGVsZW1lbnQgOiBlbGVtZW50WzBdOwogICAgcmV0dXJuIChlbGVtZW50LnNjb3BlTmFtZSAmJiBlbGVtZW50LnNjb3BlTmFtZSAhPSAnSFRNTCcpCiAgICAgID8gdXBwZXJjYXNlKGVsZW1lbnQuc2NvcGVOYW1lICsgJzonICsgZWxlbWVudC5ub2RlTmFtZSkgOiBlbGVtZW50Lm5vZGVOYW1lOwogIH07Cn0gZWxzZSB7CiAgbm9kZU5hbWVfID0gZnVuY3Rpb24oZWxlbWVudCkgewogICAgcmV0dXJuIGVsZW1lbnQubm9kZU5hbWUgPyBlbGVtZW50Lm5vZGVOYW1lIDogZWxlbWVudFswXS5ub2RlTmFtZTsKICB9Owp9CgoKZnVuY3Rpb24gbWFwKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICB2YXIgcmVzdWx0cyA9IFtdOwogIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgIHJlc3VsdHMucHVzaChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpOwogIH0pOwogIHJldHVybiByZXN1bHRzOwp9CgoKLyoqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gYXJyYXksIHRoZSBudW1iZXIgb2YgcHJvcGVydGllcyBhbiBvYmplY3QgaGFzLCBvcgogKiB0aGUgbGVuZ3RoIG9mIGEgc3RyaW5nLgogKgogKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gYXVnbWVudCB0aGUgT2JqZWN0IHR5cGUgaW4gQW5ndWxhciBleHByZXNzaW9ucy4gU2VlCiAqIHtAbGluayBhbmd1bGFyLk9iamVjdH0gZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgQW5ndWxhciBhcnJheXMuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fHN0cmluZ30gb2JqIE9iamVjdCwgYXJyYXksIG9yIHN0cmluZyB0byBpbnNwZWN0LgogKiBAcGFyYW0ge2Jvb2xlYW59IFtvd25Qcm9wc09ubHk9ZmFsc2VdIENvdW50IG9ubHkgIm93biIgcHJvcGVydGllcyBpbiBhbiBvYmplY3QKICogQHJldHVybnMge251bWJlcn0gVGhlIHNpemUgb2YgYG9iamAgb3IgYDBgIGlmIGBvYmpgIGlzIG5laXRoZXIgYW4gb2JqZWN0IG5vciBhbiBhcnJheS4KICovCmZ1bmN0aW9uIHNpemUob2JqLCBvd25Qcm9wc09ubHkpIHsKICB2YXIgc2l6ZSA9IDAsIGtleTsKCiAgaWYgKGlzQXJyYXkob2JqKSB8fCBpc1N0cmluZyhvYmopKSB7CiAgICByZXR1cm4gb2JqLmxlbmd0aDsKICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9iaikpewogICAgZm9yIChrZXkgaW4gb2JqKQogICAgICBpZiAoIW93blByb3BzT25seSB8fCBvYmouaGFzT3duUHJvcGVydHkoa2V5KSkKICAgICAgICBzaXplKys7CiAgfQoKICByZXR1cm4gc2l6ZTsKfQoKCmZ1bmN0aW9uIGluY2x1ZGVzKGFycmF5LCBvYmopIHsKICByZXR1cm4gaW5kZXhPZihhcnJheSwgb2JqKSAhPSAtMTsKfQoKZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgb2JqKSB7CiAgaWYgKGFycmF5LmluZGV4T2YpIHJldHVybiBhcnJheS5pbmRleE9mKG9iaik7CgogIGZvciAoIHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICBpZiAob2JqID09PSBhcnJheVtpXSkgcmV0dXJuIGk7CiAgfQogIHJldHVybiAtMTsKfQoKZnVuY3Rpb24gYXJyYXlSZW1vdmUoYXJyYXksIHZhbHVlKSB7CiAgdmFyIGluZGV4ID0gaW5kZXhPZihhcnJheSwgdmFsdWUpOwogIGlmIChpbmRleCA+PTApCiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpOwogIHJldHVybiB2YWx1ZTsKfQoKZnVuY3Rpb24gaXNMZWFmTm9kZSAobm9kZSkgewogIGlmIChub2RlKSB7CiAgICBzd2l0Y2ggKG5vZGUubm9kZU5hbWUpIHsKICAgIGNhc2UgIk9QVElPTiI6CiAgICBjYXNlICJQUkUiOgogICAgY2FzZSAiVElUTEUiOgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CiAgcmV0dXJuIGZhbHNlOwp9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuY29weQogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgYHNvdXJjZWAsIHdoaWNoIHNob3VsZCBiZSBhbiBvYmplY3Qgb3IgYW4gYXJyYXkuCiAqCiAqICogSWYgbm8gZGVzdGluYXRpb24gaXMgc3VwcGxpZWQsIGEgY29weSBvZiB0aGUgb2JqZWN0IG9yIGFycmF5IGlzIGNyZWF0ZWQuCiAqICogSWYgYSBkZXN0aW5hdGlvbiBpcyBwcm92aWRlZCwgYWxsIG9mIGl0cyBlbGVtZW50cyAoZm9yIGFycmF5KSBvciBwcm9wZXJ0aWVzIChmb3Igb2JqZWN0cykKICogICBhcmUgZGVsZXRlZCBhbmQgdGhlbiBhbGwgZWxlbWVudHMvcHJvcGVydGllcyBmcm9tIHRoZSBzb3VyY2UgYXJlIGNvcGllZCB0byBpdC4KICogKiBJZiAgYHNvdXJjZWAgaXMgbm90IGFuIG9iamVjdCBvciBhcnJheSwgYHNvdXJjZWAgaXMgcmV0dXJuZWQuCiAqCiAqIE5vdGU6IHRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBhdWdtZW50IHRoZSBPYmplY3QgdHlwZSBpbiBBbmd1bGFyIGV4cHJlc3Npb25zLiBTZWUKICoge0BsaW5rIG5nLiRmaWx0ZXJ9IGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IEFuZ3VsYXIgYXJyYXlzLgogKgogKiBAcGFyYW0geyp9IHNvdXJjZSBUaGUgc291cmNlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1ha2UgYSBjb3B5LgogKiAgICAgICAgICAgICAgICAgICBDYW4gYmUgYW55IHR5cGUsIGluY2x1ZGluZyBwcmltaXRpdmVzLCBgbnVsbGAsIGFuZCBgdW5kZWZpbmVkYC4KICogQHBhcmFtIHsoT2JqZWN0fEFycmF5KT19IGRlc3RpbmF0aW9uIERlc3RpbmF0aW9uIGludG8gd2hpY2ggdGhlIHNvdXJjZSBpcyBjb3BpZWQuIElmCiAqICAgICBwcm92aWRlZCwgbXVzdCBiZSBvZiB0aGUgc2FtZSB0eXBlIGFzIGBzb3VyY2VgLgogKiBAcmV0dXJucyB7Kn0gVGhlIGNvcHkgb3IgdXBkYXRlZCBgZGVzdGluYXRpb25gLCBpZiBgZGVzdGluYXRpb25gIHdhcyBzcGVjaWZpZWQuCiAqLwpmdW5jdGlvbiBjb3B5KHNvdXJjZSwgZGVzdGluYXRpb24pewogIGlmIChpc1dpbmRvdyhzb3VyY2UpIHx8IGlzU2NvcGUoc291cmNlKSkgdGhyb3cgRXJyb3IoIkNhbid0IGNvcHkgV2luZG93IG9yIFNjb3BlIik7CiAgaWYgKCFkZXN0aW5hdGlvbikgewogICAgZGVzdGluYXRpb24gPSBzb3VyY2U7CiAgICBpZiAoc291cmNlKSB7CiAgICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHsKICAgICAgICBkZXN0aW5hdGlvbiA9IGNvcHkoc291cmNlLCBbXSk7CiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKHNvdXJjZSkpIHsKICAgICAgICBkZXN0aW5hdGlvbiA9IG5ldyBEYXRlKHNvdXJjZS5nZXRUaW1lKCkpOwogICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHsKICAgICAgICBkZXN0aW5hdGlvbiA9IGNvcHkoc291cmNlLCB7fSk7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgaWYgKHNvdXJjZSA9PT0gZGVzdGluYXRpb24pIHRocm93IEVycm9yKCJDYW4ndCBjb3B5IGVxdWl2YWxlbnQgb2JqZWN0cyBvciBhcnJheXMiKTsKICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHsKICAgICAgd2hpbGUoZGVzdGluYXRpb24ubGVuZ3RoKSB7CiAgICAgICAgZGVzdGluYXRpb24ucG9wKCk7CiAgICAgIH0KICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgZGVzdGluYXRpb24ucHVzaChjb3B5KHNvdXJjZVtpXSkpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmb3JFYWNoKGRlc3RpbmF0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5KXsKICAgICAgICBkZWxldGUgZGVzdGluYXRpb25ba2V5XTsKICAgICAgfSk7CiAgICAgIGZvciAoIHZhciBrZXkgaW4gc291cmNlKSB7CiAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNvcHkoc291cmNlW2tleV0pOwogICAgICB9CiAgICB9CiAgfQogIHJldHVybiBkZXN0aW5hdGlvbjsKfQoKLyoqCiAqIENyZWF0ZSBhIHNoYWxsb3cgY29weSBvZiBhbiBvYmplY3QKICovCmZ1bmN0aW9uIHNoYWxsb3dDb3B5KHNyYywgZHN0KSB7CiAgZHN0ID0gZHN0IHx8IHt9OwoKICBmb3IodmFyIGtleSBpbiBzcmMpIHsKICAgIGlmIChzcmMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkuc3Vic3RyKDAsIDIpICE9PSAnJCQnKSB7CiAgICAgIGRzdFtrZXldID0gc3JjW2tleV07CiAgICB9CiAgfQoKICByZXR1cm4gZHN0Owp9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmVxdWFscwogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgdHdvIG9iamVjdHMgb3IgdHdvIHZhbHVlcyBhcmUgZXF1aXZhbGVudC4gU3VwcG9ydHMgdmFsdWUgdHlwZXMsIGFycmF5cyBhbmQKICogb2JqZWN0cy4KICoKICogVHdvIG9iamVjdHMgb3IgdmFsdWVzIGFyZSBjb25zaWRlcmVkIGVxdWl2YWxlbnQgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcgaXMgdHJ1ZToKICoKICogKiBCb3RoIG9iamVjdHMgb3IgdmFsdWVzIHBhc3MgYD09PWAgY29tcGFyaXNvbi4KICogKiBCb3RoIG9iamVjdHMgb3IgdmFsdWVzIGFyZSBvZiB0aGUgc2FtZSB0eXBlIGFuZCBhbGwgb2YgdGhlaXIgcHJvcGVydGllcyBwYXNzIGA9PT1gIGNvbXBhcmlzb24uCiAqICogQm90aCB2YWx1ZXMgYXJlIE5hTi4gKEluIEphdmFzU2NyaXB0LCBOYU4gPT0gTmFOID0+IGZhbHNlLiBCdXQgd2UgY29uc2lkZXIgdHdvIE5hTiBhcyBlcXVhbCkKICoKICogRHVyaW5nIGEgcHJvcGVydHkgY29tcGFyaXNpb24sIHByb3BlcnRpZXMgb2YgYGZ1bmN0aW9uYCB0eXBlIGFuZCBwcm9wZXJ0aWVzIHdpdGggbmFtZXMKICogdGhhdCBiZWdpbiB3aXRoIGAkYCBhcmUgaWdub3JlZC4KICoKICogU2NvcGUgYW5kIERPTVdpbmRvdyBvYmplY3RzIGFyZSBiZWluZyBjb21wYXJlZCBvbmx5IGJlIGlkZW50aWZ5IChgPT09YCkuCiAqCiAqIEBwYXJhbSB7Kn0gbzEgT2JqZWN0IG9yIHZhbHVlIHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7Kn0gbzIgT2JqZWN0IG9yIHZhbHVlIHRvIGNvbXBhcmUuCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGFyZ3VtZW50cyBhcmUgZXF1YWwuCiAqLwpmdW5jdGlvbiBlcXVhbHMobzEsIG8yKSB7CiAgaWYgKG8xID09PSBvMikgcmV0dXJuIHRydWU7CiAgaWYgKG8xID09PSBudWxsIHx8IG8yID09PSBudWxsKSByZXR1cm4gZmFsc2U7CiAgaWYgKG8xICE9PSBvMSAmJiBvMiAhPT0gbzIpIHJldHVybiB0cnVlOyAvLyBOYU4gPT09IE5hTgogIHZhciB0MSA9IHR5cGVvZiBvMSwgdDIgPSB0eXBlb2YgbzIsIGxlbmd0aCwga2V5LCBrZXlTZXQ7CiAgaWYgKHQxID09IHQyKSB7CiAgICBpZiAodDEgPT0gJ29iamVjdCcpIHsKICAgICAgaWYgKGlzQXJyYXkobzEpKSB7CiAgICAgICAgaWYgKChsZW5ndGggPSBvMS5sZW5ndGgpID09IG8yLmxlbmd0aCkgewogICAgICAgICAgZm9yKGtleT0wOyBrZXk8bGVuZ3RoOyBrZXkrKykgewogICAgICAgICAgICBpZiAoIWVxdWFscyhvMVtrZXldLCBvMltrZXldKSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGlzRGF0ZShvMSkpIHsKICAgICAgICByZXR1cm4gaXNEYXRlKG8yKSAmJiBvMS5nZXRUaW1lKCkgPT0gbzIuZ2V0VGltZSgpOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChpc1Njb3BlKG8xKSB8fCBpc1Njb3BlKG8yKSB8fCBpc1dpbmRvdyhvMSkgfHwgaXNXaW5kb3cobzIpKSByZXR1cm4gZmFsc2U7CiAgICAgICAga2V5U2V0ID0ge307CiAgICAgICAgZm9yKGtleSBpbiBvMSkgewogICAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgIT09ICckJyAmJiAhaXNGdW5jdGlvbihvMVtrZXldKSAmJiAhZXF1YWxzKG8xW2tleV0sIG8yW2tleV0pKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIGtleVNldFtrZXldID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgZm9yKGtleSBpbiBvMikgewogICAgICAgICAgaWYgKCFrZXlTZXRba2V5XSAmJiBrZXkuY2hhckF0KDApICE9PSAnJCcgJiYgIWlzRnVuY3Rpb24obzJba2V5XSkpIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIGZhbHNlOwp9CgoKZnVuY3Rpb24gY29uY2F0KGFycmF5MSwgYXJyYXkyLCBpbmRleCkgewogIHJldHVybiBhcnJheTEuY29uY2F0KHNsaWNlLmNhbGwoYXJyYXkyLCBpbmRleCkpOwp9CgpmdW5jdGlvbiBzbGljZUFyZ3MoYXJncywgc3RhcnRJbmRleCkgewogIHJldHVybiBzbGljZS5jYWxsKGFyZ3MsIHN0YXJ0SW5kZXggfHwgMCk7Cn0KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuYmluZAogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBjYWxscyBmdW5jdGlvbiBgZm5gIGJvdW5kIHRvIGBzZWxmYCAoYHNlbGZgIGJlY29tZXMgdGhlIGB0aGlzYCBmb3IKICogYGZuYCkuIFlvdSBjYW4gc3VwcGx5IG9wdGlvbmFsIGBhcmdzYCB0aGF0IGFyZSBhcmUgcHJlYm91bmQgdG8gdGhlIGZ1bmN0aW9uLiBUaGlzIGZlYXR1cmUgaXMgYWxzbwogKiBrbm93biBhcyBbZnVuY3Rpb24gY3VycnlpbmddKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3VycnlpbmcpLgogKgogKiBAcGFyYW0ge09iamVjdH0gc2VsZiBDb250ZXh0IHdoaWNoIGBmbmAgc2hvdWxkIGJlIGV2YWx1YXRlZCBpbi4KICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBGdW5jdGlvbiB0byBiZSBib3VuZC4KICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIGFyZ3VtZW50cyB0byBiZSBwcmVib3VuZCB0byB0aGUgYGZuYCBmdW5jdGlvbiBjYWxsLgogKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gRnVuY3Rpb24gdGhhdCB3cmFwcyB0aGUgYGZuYCB3aXRoIGFsbCB0aGUgc3BlY2lmaWVkIGJpbmRpbmdzLgogKi8KZnVuY3Rpb24gYmluZChzZWxmLCBmbikgewogIHZhciBjdXJyeUFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDIpIDogW107CiAgaWYgKGlzRnVuY3Rpb24oZm4pICYmICEoZm4gaW5zdGFuY2VvZiBSZWdFeHApKSB7CiAgICByZXR1cm4gY3VycnlBcmdzLmxlbmd0aAogICAgICA/IGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGgKICAgICAgICAgICAgPyBmbi5hcHBseShzZWxmLCBjdXJyeUFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSkpCiAgICAgICAgICAgIDogZm4uYXBwbHkoc2VsZiwgY3VycnlBcmdzKTsKICAgICAgICB9CiAgICAgIDogZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aAogICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cykKICAgICAgICAgICAgOiBmbi5jYWxsKHNlbGYpOwogICAgICAgIH07CiAgfSBlbHNlIHsKICAgIC8vIGluIElFLCBuYXRpdmUgbWV0aG9kcyBhcmUgbm90IGZ1bmN0aW9ucyBzbyB0aGV5IGNhbm5vdCBiZSBib3VuZCAobm90ZTogdGhleSBkb24ndCBuZWVkIHRvIGJlKQogICAgcmV0dXJuIGZuOwogIH0KfQoKCmZ1bmN0aW9uIHRvSnNvblJlcGxhY2VyKGtleSwgdmFsdWUpIHsKICB2YXIgdmFsID0gdmFsdWU7CgogIGlmICgvXlwkKy8udGVzdChrZXkpKSB7CiAgICB2YWwgPSB1bmRlZmluZWQ7CiAgfSBlbHNlIGlmIChpc1dpbmRvdyh2YWx1ZSkpIHsKICAgIHZhbCA9ICckV0lORE9XJzsKICB9IGVsc2UgaWYgKHZhbHVlICYmICBkb2N1bWVudCA9PT0gdmFsdWUpIHsKICAgIHZhbCA9ICckRE9DVU1FTlQnOwogIH0gZWxzZSBpZiAoaXNTY29wZSh2YWx1ZSkpIHsKICAgIHZhbCA9ICckU0NPUEUnOwogIH0KCiAgcmV0dXJuIHZhbDsKfQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci50b0pzb24KICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTZXJpYWxpemVzIGlucHV0IGludG8gYSBKU09OLWZvcm1hdHRlZCBzdHJpbmcuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fERhdGV8c3RyaW5nfG51bWJlcn0gb2JqIElucHV0IHRvIGJlIHNlcmlhbGl6ZWQgaW50byBKU09OLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBwcmV0dHkgSWYgc2V0IHRvIHRydWUsIHRoZSBKU09OIG91dHB1dCB3aWxsIGNvbnRhaW4gbmV3bGluZXMgYW5kIHdoaXRlc3BhY2UuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEpzb25pZmllZCBzdHJpbmcgcmVwcmVzZW50aW5nIGBvYmpgLgogKi8KZnVuY3Rpb24gdG9Kc29uKG9iaiwgcHJldHR5KSB7CiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgdG9Kc29uUmVwbGFjZXIsIHByZXR0eSA/ICcgICcgOiBudWxsKTsKfQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5mcm9tSnNvbgogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERlc2VyaWFsaXplcyBhIEpTT04gc3RyaW5nLgogKgogKiBAcGFyYW0ge3N0cmluZ30ganNvbiBKU09OIHN0cmluZyB0byBkZXNlcmlhbGl6ZS4KICogQHJldHVybnMge09iamVjdHxBcnJheXxEYXRlfHN0cmluZ3xudW1iZXJ9IERlc2VyaWFsaXplZCB0aGluZ3kuCiAqLwpmdW5jdGlvbiBmcm9tSnNvbihqc29uKSB7CiAgcmV0dXJuIGlzU3RyaW5nKGpzb24pCiAgICAgID8gSlNPTi5wYXJzZShqc29uKQogICAgICA6IGpzb247Cn0KCgpmdW5jdGlvbiB0b0Jvb2xlYW4odmFsdWUpIHsKICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoICE9PSAwKSB7CiAgICB2YXIgdiA9IGxvd2VyY2FzZSgiIiArIHZhbHVlKTsKICAgIHZhbHVlID0gISh2ID09ICdmJyB8fCB2ID09ICcwJyB8fCB2ID09ICdmYWxzZScgfHwgdiA9PSAnbm8nIHx8IHYgPT0gJ24nIHx8IHYgPT0gJ1tdJyk7CiAgfSBlbHNlIHsKICAgIHZhbHVlID0gZmFsc2U7CiAgfQogIHJldHVybiB2YWx1ZTsKfQoKLyoqCiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZWxlbWVudC4KICovCmZ1bmN0aW9uIHN0YXJ0aW5nVGFnKGVsZW1lbnQpIHsKICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpLmNsb25lKCk7CiAgdHJ5IHsKICAgIC8vIHR1cm5zIG91dCBJRSBkb2VzIG5vdCBsZXQgeW91IHNldCAuaHRtbCgpIG9uIGVsZW1lbnRzIHdoaWNoCiAgICAvLyBhcmUgbm90IGFsbG93ZWQgdG8gaGF2ZSBjaGlsZHJlbi4gU28gd2UganVzdCBpZ25vcmUgaXQuCiAgICBlbGVtZW50Lmh0bWwoJycpOwogIH0gY2F0Y2goZSkge30KICByZXR1cm4ganFMaXRlKCc8ZGl2PicpLmFwcGVuZChlbGVtZW50KS5odG1sKCkuCiAgICAgIG1hdGNoKC9eKDxbXj5dKz4pLylbMV0uCiAgICAgIHJlcGxhY2UoL148KFtcd1wtXSspLywgZnVuY3Rpb24obWF0Y2gsIG5vZGVOYW1lKSB7IHJldHVybiAnPCcgKyBsb3dlcmNhc2Uobm9kZU5hbWUpOyB9KTsKfQoKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBQYXJzZXMgYW4gZXNjYXBlZCB1cmwgcXVlcnkgc3RyaW5nIGludG8ga2V5LXZhbHVlIHBhaXJzLgogKiBAcmV0dXJucyBPYmplY3QuPChzdHJpbmd8Ym9vbGVhbik+CiAqLwpmdW5jdGlvbiBwYXJzZUtleVZhbHVlKC8qKnN0cmluZyova2V5VmFsdWUpIHsKICB2YXIgb2JqID0ge30sIGtleV92YWx1ZSwga2V5OwogIGZvckVhY2goKGtleVZhbHVlIHx8ICIiKS5zcGxpdCgnJicpLCBmdW5jdGlvbihrZXlWYWx1ZSl7CiAgICBpZiAoa2V5VmFsdWUpIHsKICAgICAga2V5X3ZhbHVlID0ga2V5VmFsdWUuc3BsaXQoJz0nKTsKICAgICAga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleV92YWx1ZVswXSk7CiAgICAgIG9ialtrZXldID0gaXNEZWZpbmVkKGtleV92YWx1ZVsxXSkgPyBkZWNvZGVVUklDb21wb25lbnQoa2V5X3ZhbHVlWzFdKSA6IHRydWU7CiAgICB9CiAgfSk7CiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gdG9LZXlWYWx1ZShvYmopIHsKICB2YXIgcGFydHMgPSBbXTsKICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXksIHRydWUpICsgKHZhbHVlID09PSB0cnVlID8gJycgOiAnPScgKyBlbmNvZGVVcmlRdWVyeSh2YWx1ZSwgdHJ1ZSkpKTsKICB9KTsKICByZXR1cm4gcGFydHMubGVuZ3RoID8gcGFydHMuam9pbignJicpIDogJyc7Cn0KCgovKioKICogV2UgbmVlZCBvdXIgY3VzdG9tIG1laHRvZCBiZWNhdXNlIGVuY29kZVVSSUNvbXBvbmVudCBpcyB0b28gYWdyZXNzaXZlIGFuZCBkb2Vzbid0IGZvbGxvdwogKiBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCB3aXRoIHJlZ2FyZHMgdG8gdGhlIGNoYXJhY3RlciBzZXQgKHBjaGFyKSBhbGxvd2VkIGluIHBhdGgKICogc2VnbWVudHM6CiAqICAgIHNlZ21lbnQgICAgICAgPSAqcGNoYXIKICogICAgcGNoYXIgICAgICAgICA9IHVucmVzZXJ2ZWQgLyBwY3QtZW5jb2RlZCAvIHN1Yi1kZWxpbXMgLyAiOiIgLyAiQCIKICogICAgcGN0LWVuY29kZWQgICA9ICIlIiBIRVhESUcgSEVYRElHCiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gIi0iIC8gIi4iIC8gIl8iIC8gIn4iCiAqICAgIHN1Yi1kZWxpbXMgICAgPSAiISIgLyAiJCIgLyAiJiIgLyAiJyIgLyAiKCIgLyAiKSIKICogICAgICAgICAgICAgICAgICAgICAvICIqIiAvICIrIiAvICIsIiAvICI7IiAvICI9IgogKi8KZnVuY3Rpb24gZW5jb2RlVXJpU2VnbWVudCh2YWwpIHsKICByZXR1cm4gZW5jb2RlVXJpUXVlcnkodmFsLCB0cnVlKS4KICAgICAgICAgICAgIHJlcGxhY2UoLyUyNi9naSwgJyYnKS4KICAgICAgICAgICAgIHJlcGxhY2UoLyUzRC9naSwgJz0nKS4KICAgICAgICAgICAgIHJlcGxhY2UoLyUyQi9naSwgJysnKTsKfQoKCi8qKgogKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZW5jb2RpbmcgKmtleSogb3IgKnZhbHVlKiBwYXJ0cyBvZiBxdWVyeSBjb21wb25lbnQuIFdlIG5lZWQgYSBjdXN0b20KICogbWV0aG9kIGJlY3Vhc2UgZW5jb2RlVVJJQ29tcG9uZW50IGlzIHRvbyBhZ3Jlc3NpdmUgYW5kIGVuY29kZXMgc3R1ZmYgdGhhdCBkb2Vzbid0IGhhdmUgdG8gYmUKICogZW5jb2RlZCBwZXIgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NjoKICogICAgcXVlcnkgICAgICAgPSAqKCBwY2hhciAvICIvIiAvICI/IiApCiAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gIjoiIC8gIkAiCiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gIi0iIC8gIi4iIC8gIl8iIC8gIn4iCiAqICAgIHBjdC1lbmNvZGVkICAgPSAiJSIgSEVYRElHIEhFWERJRwogKiAgICBzdWItZGVsaW1zICAgID0gIiEiIC8gIiQiIC8gIiYiIC8gIiciIC8gIigiIC8gIikiCiAqICAgICAgICAgICAgICAgICAgICAgLyAiKiIgLyAiKyIgLyAiLCIgLyAiOyIgLyAiPSIKICovCmZ1bmN0aW9uIGVuY29kZVVyaVF1ZXJ5KHZhbCwgcGN0RW5jb2RlU3BhY2VzKSB7CiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTI0L2csICckJykuCiAgICAgICAgICAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuCiAgICAgICAgICAgICByZXBsYWNlKChwY3RFbmNvZGVTcGFjZXMgPyBudWxsIDogLyUyMC9nKSwgJysnKTsKfQoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0FwcAogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHthbmd1bGFyLk1vZHVsZX0gbmdBcHAgb24gb3B0aW9uYWwgYXBwbGljYXRpb24KICogICB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlfSBuYW1lIHRvIGxvYWQuCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBVc2UgdGhpcyBkaXJlY3RpdmUgdG8gYXV0by1ib290c3RyYXAgb24gYXBwbGljYXRpb24uIE9ubHkKICogb25lIGRpcmVjdGl2ZSBjYW4gYmUgdXNlZCBwZXIgSFRNTCBkb2N1bWVudC4gVGhlIGRpcmVjdGl2ZQogKiBkZXNpZ25hdGVzIHRoZSByb290IG9mIHRoZSBhcHBsaWNhdGlvbiBhbmQgaXMgdHlwaWNhbGx5IHBsYWNlZAogKiBvdCB0aGUgcm9vdCBvZiB0aGUgcGFnZS4KICoKICogSW4gdGhlIGV4YW1wbGUgYmVsb3cgaWYgdGhlIGBuZ0FwcGAgZGlyZWN0aXZlIHdvdWxkIG5vdCBiZSBwbGFjZWQKICogb24gdGhlIGBodG1sYCBlbGVtZW50IHRoZW4gdGhlIGRvY3VtZW50IHdvdWxkIG5vdCBiZSBjb21waWxlZAogKiBhbmQgdGhlIGB7eyAxKzIgfX1gIHdvdWxkIG5vdCBiZSByZXNvbHZlZCB0byBgM2AuCiAqCiAqIGBuZ0FwcGAgaXMgdGhlIGVhc2llc3Qgd2F5IHRvIGJvb3RzdHJhcCBhbiBhcHBsaWNhdGlvbi4KICoKIDxkb2M6ZXhhbXBsZT4KICAgPGRvYzpzb3VyY2U+CiAgICBJIGNhbiBhZGQ6IDEgKyAyID0gIHt7IDErMiB9fQogICA8L2RvYzpzb3VyY2U+CiA8L2RvYzpleGFtcGxlPgogKgogKi8KZnVuY3Rpb24gYW5ndWxhckluaXQoZWxlbWVudCwgYm9vdHN0cmFwKSB7CiAgdmFyIGVsZW1lbnRzID0gW2VsZW1lbnRdLAogICAgICBhcHBFbGVtZW50LAogICAgICBtb2R1bGUsCiAgICAgIG5hbWVzID0gWyduZzphcHAnLCAnbmctYXBwJywgJ3gtbmctYXBwJywgJ2RhdGEtbmctYXBwJ10sCiAgICAgIE5HX0FQUF9DTEFTU19SRUdFWFAgPSAvXHNuZ1s6XC1dYXBwKDpccyooW1x3XGRfXSspOz8pP1xzLzsKCiAgZnVuY3Rpb24gYXBwZW5kKGVsZW1lbnQpIHsKICAgIGVsZW1lbnQgJiYgZWxlbWVudHMucHVzaChlbGVtZW50KTsKICB9CgogIGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uKG5hbWUpIHsKICAgIG5hbWVzW25hbWVdID0gdHJ1ZTsKICAgIGFwcGVuZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChuYW1lKSk7CiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKCc6JywgJ1xcOicpOwogICAgaWYgKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCkgewogICAgICBmb3JFYWNoKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBuYW1lKSwgYXBwZW5kKTsKICAgICAgZm9yRWFjaChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgbmFtZSArICdcXDonKSwgYXBwZW5kKTsKICAgICAgZm9yRWFjaChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1snICsgbmFtZSArICddJyksIGFwcGVuZCk7CiAgICB9CiAgfSk7CgogIGZvckVhY2goZWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGlmICghYXBwRWxlbWVudCkgewogICAgICB2YXIgY2xhc3NOYW1lID0gJyAnICsgZWxlbWVudC5jbGFzc05hbWUgKyAnICc7CiAgICAgIHZhciBtYXRjaCA9IE5HX0FQUF9DTEFTU19SRUdFWFAuZXhlYyhjbGFzc05hbWUpOwogICAgICBpZiAobWF0Y2gpIHsKICAgICAgICBhcHBFbGVtZW50ID0gZWxlbWVudDsKICAgICAgICBtb2R1bGUgPSAobWF0Y2hbMl0gfHwgJycpLnJlcGxhY2UoL1xzKy9nLCAnLCcpOwogICAgICB9IGVsc2UgewogICAgICAgIGZvckVhY2goZWxlbWVudC5hdHRyaWJ1dGVzLCBmdW5jdGlvbihhdHRyKSB7CiAgICAgICAgICBpZiAoIWFwcEVsZW1lbnQgJiYgbmFtZXNbYXR0ci5uYW1lXSkgewogICAgICAgICAgICBhcHBFbGVtZW50ID0gZWxlbWVudDsKICAgICAgICAgICAgbW9kdWxlID0gYXR0ci52YWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0pOwogIGlmIChhcHBFbGVtZW50KSB7CiAgICBib290c3RyYXAoYXBwRWxlbWVudCwgbW9kdWxlID8gW21vZHVsZV0gOiBbXSk7CiAgfQp9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuYm9vdHN0cmFwCiAqIEBkZXNjcmlwdGlvbgogKiBVc2UgdGhpcyBmdW5jdGlvbiB0byBtYW51YWxseSBzdGFydCB1cCBhbmd1bGFyIGFwcGxpY2F0aW9uLgogKgogKiBTZWU6IHtAbGluayBndWlkZS9ib290c3RyYXAgQm9vdHN0cmFwfQogKgogKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRE9NIGVsZW1lbnQgd2hpY2ggaXMgdGhlIHJvb3Qgb2YgYW5ndWxhciBhcHBsaWNhdGlvbi4KICogQHBhcmFtIHtBcnJheTxTdHJpbmd8RnVuY3Rpb24+PX0gbW9kdWxlcyBhbiBhcnJheSBvZiBtb2R1bGUgZGVjbGFyYXRpb25zLiBTZWU6IHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfQogKiBAcmV0dXJucyB7QVVUTy4kaW5qZWN0b3J9IFJldHVybnMgdGhlIG5ld2x5IGNyZWF0ZWQgaW5qZWN0b3IgZm9yIHRoaXMgYXBwLgogKi8KZnVuY3Rpb24gYm9vdHN0cmFwKGVsZW1lbnQsIG1vZHVsZXMpIHsKICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpOwogIG1vZHVsZXMgPSBtb2R1bGVzIHx8IFtdOwogIG1vZHVsZXMudW5zaGlmdChbJyRwcm92aWRlJywgZnVuY3Rpb24oJHByb3ZpZGUpIHsKICAgICRwcm92aWRlLnZhbHVlKCckcm9vdEVsZW1lbnQnLCBlbGVtZW50KTsKICB9XSk7CiAgbW9kdWxlcy51bnNoaWZ0KCduZycpOwogIHZhciBpbmplY3RvciA9IGNyZWF0ZUluamVjdG9yKG1vZHVsZXMpOwogIGluamVjdG9yLmludm9rZSgKICAgIFsnJHJvb3RTY29wZScsICckcm9vdEVsZW1lbnQnLCAnJGNvbXBpbGUnLCAnJGluamVjdG9yJywgZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGNvbXBpbGUsIGluamVjdG9yKXsKICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgIGVsZW1lbnQuZGF0YSgnJGluamVjdG9yJywgaW5qZWN0b3IpOwogICAgICAgIGNvbXBpbGUoZWxlbWVudCkoc2NvcGUpOwogICAgICB9KTsKICAgIH1dCiAgKTsKICByZXR1cm4gaW5qZWN0b3I7Cn0KCnZhciBTTkFLRV9DQVNFX1JFR0VYUCA9IC9bQS1aXS9nOwpmdW5jdGlvbiBzbmFrZV9jYXNlKG5hbWUsIHNlcGFyYXRvcil7CiAgc2VwYXJhdG9yID0gc2VwYXJhdG9yIHx8ICdfJzsKICByZXR1cm4gbmFtZS5yZXBsYWNlKFNOQUtFX0NBU0VfUkVHRVhQLCBmdW5jdGlvbihsZXR0ZXIsIHBvcykgewogICAgcmV0dXJuIChwb3MgPyBzZXBhcmF0b3IgOiAnJykgKyBsZXR0ZXIudG9Mb3dlckNhc2UoKTsKICB9KTsKfQoKZnVuY3Rpb24gYmluZEpRdWVyeSgpIHsKICAvLyBiaW5kIHRvIGpRdWVyeSBpZiBwcmVzZW50OwogIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7CiAgLy8gcmVzZXQgdG8galF1ZXJ5IG9yIGRlZmF1bHQgdG8gdXMuCiAgaWYgKGpRdWVyeSkgewogICAganFMaXRlID0galF1ZXJ5OwogICAgZXh0ZW5kKGpRdWVyeS5mbiwgewogICAgICBzY29wZTogSlFMaXRlUHJvdG90eXBlLnNjb3BlLAogICAgICBjb250cm9sbGVyOiBKUUxpdGVQcm90b3R5cGUuY29udHJvbGxlciwKICAgICAgaW5qZWN0b3I6IEpRTGl0ZVByb3RvdHlwZS5pbmplY3RvciwKICAgICAgaW5oZXJpdGVkRGF0YTogSlFMaXRlUHJvdG90eXBlLmluaGVyaXRlZERhdGEKICAgIH0pOwogICAgSlFMaXRlUGF0Y2hKUXVlcnlSZW1vdmUoJ3JlbW92ZScsIHRydWUpOwogICAgSlFMaXRlUGF0Y2hKUXVlcnlSZW1vdmUoJ2VtcHR5Jyk7CiAgICBKUUxpdGVQYXRjaEpRdWVyeVJlbW92ZSgnaHRtbCcpOwogIH0gZWxzZSB7CiAgICBqcUxpdGUgPSBKUUxpdGU7CiAgfQogIGFuZ3VsYXIuZWxlbWVudCA9IGpxTGl0ZTsKfQoKLyoqCiAqIHRocm93IGVycm9yIG9mIHRoZSBhcmd1bWVudCBpcyBmYWxzeS4KICovCmZ1bmN0aW9uIGFzc2VydEFyZyhhcmcsIG5hbWUsIHJlYXNvbikgewogIGlmICghYXJnKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIkFyZ3VtZW50ICciICsgKG5hbWUgfHwgJz8nKSArICInIGlzICIgKyAocmVhc29uIHx8ICJyZXF1aXJlZCIpKTsKICB9CiAgcmV0dXJuIGFyZzsKfQoKZnVuY3Rpb24gYXNzZXJ0QXJnRm4oYXJnLCBuYW1lLCBhY2NlcHRBcnJheUFubm90YXRpb24pIHsKICBpZiAoYWNjZXB0QXJyYXlBbm5vdGF0aW9uICYmIGlzQXJyYXkoYXJnKSkgewogICAgICBhcmcgPSBhcmdbYXJnLmxlbmd0aCAtIDFdOwogIH0KCiAgYXNzZXJ0QXJnKGlzRnVuY3Rpb24oYXJnKSwgbmFtZSwgJ25vdCBhIGZ1bmN0aW9uLCBnb3QgJyArCiAgICAgIChhcmcgJiYgdHlwZW9mIGFyZyA9PSAnb2JqZWN0JyA/IGFyZy5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnIDogdHlwZW9mIGFyZykpOwogIHJldHVybiBhcmc7Cn0KCi8qKgogKiBAbmdkb2MgaW50ZXJmYWNlCiAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlCiAqIEBkZXNjcmlwdGlvbgogKgogKiBJbnRlcmZhY2UgZm9yIGNvbmZpZ3VyaW5nIGFuZ3VsYXIge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9LgogKi8KCmZ1bmN0aW9uIHNldHVwTW9kdWxlTG9hZGVyKHdpbmRvdykgewoKICBmdW5jdGlvbiBlbnN1cmUob2JqLCBuYW1lLCBmYWN0b3J5KSB7CiAgICByZXR1cm4gb2JqW25hbWVdIHx8IChvYmpbbmFtZV0gPSBmYWN0b3J5KCkpOwogIH0KCiAgcmV0dXJuIGVuc3VyZShlbnN1cmUod2luZG93LCAnYW5ndWxhcicsIE9iamVjdCksICdtb2R1bGUnLCBmdW5jdGlvbigpIHsKICAgIC8qKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIGFuZ3VsYXIuTW9kdWxlPn0gKi8KICAgIHZhciBtb2R1bGVzID0ge307CgogICAgLyoqCiAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAqIEBuYW1lIGFuZ3VsYXIubW9kdWxlCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqCiAgICAgKiBUaGUgYGFuZ3VsYXIubW9kdWxlYCBpcyBhIGdsb2JhbCBwbGFjZSBmb3IgY3JlYXRpbmcgYW5kIHJlZ2lzdGVyaW5nIEFuZ3VsYXIgbW9kdWxlcy4gQWxsCiAgICAgKiBtb2R1bGVzIChhbmd1bGFyIGNvcmUgb3IgM3JkIHBhcnR5KSB0aGF0IHNob3VsZCBiZSBhdmFpbGFibGUgdG8gYW4gYXBwbGljYXRpb24gbXVzdCBiZQogICAgICogcmVnaXN0ZXJlZCB1c2luZyB0aGlzIG1lY2hhbmlzbS4KICAgICAqCiAgICAgKgogICAgICogIyBNb2R1bGUKICAgICAqCiAgICAgKiBBIG1vZHVsZSBpcyBhIGNvbGxvY2F0aW9uIG9mIHNlcnZpY2VzLCBkaXJlY3RpdmVzLCBmaWx0ZXJzLCBhbmQgY29uZmlndXJlIGluZm9ybWF0aW9uLiBNb2R1bGUKICAgICAqIGlzIHVzZWQgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfS4KICAgICAqCiAgICAgKiA8cHJlPgogICAgICogLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZQogICAgICogdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ215TW9kdWxlJywgW10pOwogICAgICoKICAgICAqIC8vIHJlZ2lzdGVyIGEgbmV3IHNlcnZpY2UKICAgICAqIG15TW9kdWxlLnZhbHVlKCdhcHBOYW1lJywgJ015Q29vbEFwcCcpOwogICAgICoKICAgICAqIC8vIGNvbmZpZ3VyZSBleGlzdGluZyBzZXJ2aWNlcyBpbnNpZGUgaW5pdGlhbGl6YXRpb24gYmxvY2tzLgogICAgICogbXlNb2R1bGUuY29uZmlnKGZ1bmN0aW9uKCRsb2NhdGlvblByb3ZpZGVyKSB7CiAgICAgKiAgIC8vIENvbmZpZ3VyZSBleGlzdGluZyBwcm92aWRlcnMKICAgICAqICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnIScpOwogICAgICogfSk7CiAgICAgKiA8L3ByZT4KICAgICAqCiAgICAgKiBUaGVuIHlvdSBjYW4gY3JlYXRlIGFuIGluamVjdG9yIGFuZCBsb2FkIHlvdXIgbW9kdWxlcyBsaWtlIHRoaXM6CiAgICAgKgogICAgICogPHByZT4KICAgICAqIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZycsICdNeU1vZHVsZSddKQogICAgICogPC9wcmU+CiAgICAgKgogICAgICogSG93ZXZlciBpdCdzIG1vcmUgbGlrZWx5IHRoYXQgeW91J2xsIGp1c3QgdXNlCiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfSBvcgogICAgICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfSB0byBzaW1wbGlmeSB0aGlzIHByb2Nlc3MgZm9yIHlvdS4KICAgICAqCiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB0byBjcmVhdGUgb3IgcmV0cmlldmUuCiAgICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+PX0gcmVxdWlyZXMgSWYgc3BlY2lmaWVkIHRoZW4gbmV3IG1vZHVsZSBpcyBiZWluZyBjcmVhdGVkLiBJZiB1bnNwZWNpZmllZCB0aGVuIHRoZQogICAgICogICAgICAgIHRoZSBtb2R1bGUgaXMgYmVpbmcgcmV0cmlldmVkIGZvciBmdXJ0aGVyIGNvbmZpZ3VyYXRpb24uCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWdGbiBPcHRpb24gY29uZmlndXJhdGlvbiBmdW5jdGlvbiBmb3IgdGhlIG1vZHVsZS4gU2FtZSBhcwogICAgICogICAgICAgIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWcgTW9kdWxlI2NvbmZpZygpfS4KICAgICAqIEByZXR1cm5zIHttb2R1bGV9IG5ldyBtb2R1bGUgd2l0aCB0aGUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfSBhcGkuCiAgICAgKi8KICAgIHJldHVybiBmdW5jdGlvbiBtb2R1bGUobmFtZSwgcmVxdWlyZXMsIGNvbmZpZ0ZuKSB7CiAgICAgIGlmIChyZXF1aXJlcyAmJiBtb2R1bGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgbW9kdWxlc1tuYW1lXSA9IG51bGw7CiAgICAgIH0KICAgICAgcmV0dXJuIGVuc3VyZShtb2R1bGVzLCBuYW1lLCBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoIXJlcXVpcmVzKSB7CiAgICAgICAgICB0aHJvdyBFcnJvcignTm8gbW9kdWxlOiAnICsgbmFtZSk7CiAgICAgICAgfQoKICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48QXJyYXkuPCo+Pn0gKi8KICAgICAgICB2YXIgaW52b2tlUXVldWUgPSBbXTsKCiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEZ1bmN0aW9uPn0gKi8KICAgICAgICB2YXIgcnVuQmxvY2tzID0gW107CgogICAgICAgIHZhciBjb25maWcgPSBpbnZva2VMYXRlcignJGluamVjdG9yJywgJ2ludm9rZScpOwoKICAgICAgICAvKiogQHR5cGUge2FuZ3VsYXIuTW9kdWxlfSAqLwogICAgICAgIHZhciBtb2R1bGVJbnN0YW5jZSA9IHsKICAgICAgICAgIC8vIFByaXZhdGUgc3RhdGUKICAgICAgICAgIF9pbnZva2VRdWV1ZTogaW52b2tlUXVldWUsCiAgICAgICAgICBfcnVuQmxvY2tzOiBydW5CbG9ja3MsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHkKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3JlcXVpcmVzCiAgICAgICAgICAgKiBAcHJvcGVydHlPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBMaXN0IG9mIG1vZHVsZSBuYW1lcyB3aGljaCBtdXN0IGJlIGxvYWRlZCBiZWZvcmUgdGhpcyBtb2R1bGUuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIEhvbGRzIHRoZSBsaXN0IG9mIG1vZHVsZXMgd2hpY2ggdGhlIGluamVjdG9yIHdpbGwgbG9hZCBiZWZvcmUgdGhlIGN1cnJlbnQgbW9kdWxlIGlzIGxvYWRlZC4KICAgICAgICAgICAqLwogICAgICAgICAgcmVxdWlyZXM6IHJlcXVpcmVzLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5CiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNuYW1lCiAgICAgICAgICAgKiBAcHJvcGVydHlPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gTmFtZSBvZiB0aGUgbW9kdWxlLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKi8KICAgICAgICAgIG5hbWU6IG5hbWUsCgoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcHJvdmlkZXIKICAgICAgICAgICAqIEBtZXRob2RPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm92aWRlclR5cGUgQ29uc3RydWN0aW9uIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgQVVUTy4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS4KICAgICAgICAgICAqLwogICAgICAgICAgcHJvdmlkZXI6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdwcm92aWRlcicpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZmFjdG9yeQogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWUKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyRnVuY3Rpb24gRnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGUgc2VydmljZS4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBBVVRPLiRwcm92aWRlI2ZhY3RvcnkgJHByb3ZpZGUuZmFjdG9yeSgpfS4KICAgICAgICAgICAqLwogICAgICAgICAgZmFjdG9yeTogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ2ZhY3RvcnknKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3NlcnZpY2UKICAgICAgICAgICAqIEBtZXRob2RPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBBIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnN0YW50aWF0ZWQuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgQVVUTy4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoKX0uCiAgICAgICAgICAgKi8KICAgICAgICAgIHNlcnZpY2U6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdzZXJ2aWNlJyksCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSN2YWx1ZQogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWUKICAgICAgICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFNlcnZpY2UgaW5zdGFuY2Ugb2JqZWN0LgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBTZWUge0BsaW5rIEFVVE8uJHByb3ZpZGUjdmFsdWUgJHByb3ZpZGUudmFsdWUoKX0uCiAgICAgICAgICAgKi8KICAgICAgICAgIHZhbHVlOiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAndmFsdWUnKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnN0YW50CiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGUKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGNvbnN0YW50IG5hbWUKICAgICAgICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IENvbnN0YW50IHZhbHVlLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBCZWNhdXNlIHRoZSBjb25zdGFudCBhcmUgZml4ZWQsIHRoZXkgZ2V0IGFwcGxpZWQgYmVmb3JlIG90aGVyIHByb3ZpZGUgbWV0aG9kcy4KICAgICAgICAgICAqIFNlZSB7QGxpbmsgQVVUTy4kcHJvdmlkZSNjb25zdGFudCAkcHJvdmlkZS5jb25zdGFudCgpfS4KICAgICAgICAgICAqLwogICAgICAgICAgY29uc3RhbnQ6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdjb25zdGFudCcsICd1bnNoaWZ0JyksCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmaWx0ZXIKICAgICAgICAgICAqIEBtZXRob2RPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmlsdGVyIG5hbWUuCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaWx0ZXJGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBmaWx0ZXIuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcigpfS4KICAgICAgICAgICAqLwogICAgICAgICAgZmlsdGVyOiBpbnZva2VMYXRlcignJGZpbHRlclByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb250cm9sbGVyCiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGUKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENvbnRyb2xsZXIgbmFtZS4KICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciAkY29udHJvbGxlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LgogICAgICAgICAgICovCiAgICAgICAgICBjb250cm9sbGVyOiBpbnZva2VMYXRlcignJGNvbnRyb2xsZXJQcm92aWRlcicsICdyZWdpc3RlcicpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZGlyZWN0aXZlCiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGUKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGRpcmVjdGl2ZSBuYW1lCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXJlY3RpdmVGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZgogICAgICAgICAgICogZGlyZWN0aXZlcy4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS4KICAgICAgICAgICAqLwogICAgICAgICAgZGlyZWN0aXZlOiBpbnZva2VMYXRlcignJGNvbXBpbGVQcm92aWRlcicsICdkaXJlY3RpdmUnKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZwogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWdGbiBFeGVjdXRlIHRoaXMgZnVuY3Rpb24gb24gbW9kdWxlIGxvYWQuIFVzZWZ1bCBmb3Igc2VydmljZQogICAgICAgICAgICogICAgY29uZmlndXJhdGlvbi4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggbmVlZHMgdG8gYmUgcGVyZm9ybWVkIG9uIG1vZHVsZSBsb2FkaW5nLgogICAgICAgICAgICovCiAgICAgICAgICBjb25maWc6IGNvbmZpZywKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3J1bgogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbml0aWFsaXphdGlvbkZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBhZnRlciBpbmplY3RvciBjcmVhdGlvbi4KICAgICAgICAgICAqICAgIFVzZWZ1bCBmb3IgYXBwbGljYXRpb24gaW5pdGlhbGl6YXRpb24uCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIG5lZWRzIHRvIGJlIHBlcmZvcm1lZCB3aGVuIHRoZSBpbmplY3RvciB3aXRoCiAgICAgICAgICAgKiB3aXRoIHRoZSBjdXJyZW50IG1vZHVsZSBpcyBmaW5pc2hlZCBsb2FkaW5nLgogICAgICAgICAgICovCiAgICAgICAgICBydW46IGZ1bmN0aW9uKGJsb2NrKSB7CiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKGJsb2NrKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgaWYgKGNvbmZpZ0ZuKSB7CiAgICAgICAgICBjb25maWcoY29uZmlnRm4pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICBtb2R1bGVJbnN0YW5jZTsKCiAgICAgICAgLyoqCiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3ZpZGVyCiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZAogICAgICAgICAqIEBwYXJhbSB7U3RyaW5nPX0gaW5zZXJ0TWV0aG9kCiAgICAgICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGludm9rZUxhdGVyKHByb3ZpZGVyLCBtZXRob2QsIGluc2VydE1ldGhvZCkgewogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnZva2VRdWV1ZVtpbnNlcnRNZXRob2QgfHwgJ3B1c2gnXShbcHJvdmlkZXIsIG1ldGhvZCwgYXJndW1lbnRzXSk7CiAgICAgICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKICB9KTsKCn0KCi8qKgogKiBAbmdkb2MgcHJvcGVydHkKICogQG5hbWUgYW5ndWxhci52ZXJzaW9uCiAqIEBkZXNjcmlwdGlvbgogKiBBbiBvYmplY3QgdGhhdCBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBBbmd1bGFySlMgdmVyc2lvbi4gVGhpcyBvYmplY3QgaGFzIHRoZQogKiBmb2xsb3dpbmcgcHJvcGVydGllczoKICoKICogLSBgZnVsbGAg4oCTIGB7c3RyaW5nfWAg4oCTIEZ1bGwgdmVyc2lvbiBzdHJpbmcsIHN1Y2ggYXMgIjAuOS4xOCIuCiAqIC0gYG1ham9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWFqb3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgIjAiLgogKiAtIGBtaW5vcmAg4oCTIGB7bnVtYmVyfWAg4oCTIE1pbm9yIHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzICI5Ii4KICogLSBgZG90YCDigJMgYHtudW1iZXJ9YCDigJMgRG90IHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzICIxOCIuCiAqIC0gYGNvZGVOYW1lYCDigJMgYHtzdHJpbmd9YCDigJMgQ29kZSBuYW1lIG9mIHRoZSByZWxlYXNlLCBzdWNoIGFzICJqaWdnbGluZy1hcm1mYXQiLgogKi8KdmFyIHZlcnNpb24gPSB7CiAgZnVsbDogJzEuMC4xJywgICAgLy8gYWxsIG9mIHRoZXNlIHBsYWNlaG9sZGVyIHN0cmluZ3Mgd2lsbCBiZSByZXBsYWNlZCBieSByYWtlJ3MKICBtYWpvcjogMSwgICAgLy8gY29tcGlsZSB0YXNrCiAgbWlub3I6IDAsCiAgZG90OiAxLAogIGNvZGVOYW1lOiAndGhvcml1bS1zaGllbGRpbmcnCn07CgoKZnVuY3Rpb24gcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpewogIGV4dGVuZChhbmd1bGFyLCB7CiAgICAnYm9vdHN0cmFwJzogYm9vdHN0cmFwLAogICAgJ2NvcHknOiBjb3B5LAogICAgJ2V4dGVuZCc6IGV4dGVuZCwKICAgICdlcXVhbHMnOiBlcXVhbHMsCiAgICAnZWxlbWVudCc6IGpxTGl0ZSwKICAgICdmb3JFYWNoJzogZm9yRWFjaCwKICAgICdpbmplY3Rvcic6IGNyZWF0ZUluamVjdG9yLAogICAgJ25vb3AnOm5vb3AsCiAgICAnYmluZCc6YmluZCwKICAgICd0b0pzb24nOiB0b0pzb24sCiAgICAnZnJvbUpzb24nOiBmcm9tSnNvbiwKICAgICdpZGVudGl0eSc6aWRlbnRpdHksCiAgICAnaXNVbmRlZmluZWQnOiBpc1VuZGVmaW5lZCwKICAgICdpc0RlZmluZWQnOiBpc0RlZmluZWQsCiAgICAnaXNTdHJpbmcnOiBpc1N0cmluZywKICAgICdpc0Z1bmN0aW9uJzogaXNGdW5jdGlvbiwKICAgICdpc09iamVjdCc6IGlzT2JqZWN0LAogICAgJ2lzTnVtYmVyJzogaXNOdW1iZXIsCiAgICAnaXNFbGVtZW50JzogaXNFbGVtZW50LAogICAgJ2lzQXJyYXknOiBpc0FycmF5LAogICAgJ3ZlcnNpb24nOiB2ZXJzaW9uLAogICAgJ2lzRGF0ZSc6IGlzRGF0ZSwKICAgICdsb3dlcmNhc2UnOiBsb3dlcmNhc2UsCiAgICAndXBwZXJjYXNlJzogdXBwZXJjYXNlLAogICAgJ2NhbGxiYWNrcyc6IHtjb3VudGVyOiAwfQogIH0pOwoKICBhbmd1bGFyTW9kdWxlID0gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KTsKICB0cnkgewogICAgYW5ndWxhck1vZHVsZSgnbmdMb2NhbGUnKTsKICB9IGNhdGNoIChlKSB7CiAgICBhbmd1bGFyTW9kdWxlKCduZ0xvY2FsZScsIFtdKS5wcm92aWRlcignJGxvY2FsZScsICRMb2NhbGVQcm92aWRlcik7CiAgfQoKICBhbmd1bGFyTW9kdWxlKCduZycsIFsnbmdMb2NhbGUnXSwgWyckcHJvdmlkZScsCiAgICBmdW5jdGlvbiBuZ01vZHVsZSgkcHJvdmlkZSkgewogICAgICAkcHJvdmlkZS5wcm92aWRlcignJGNvbXBpbGUnLCAkQ29tcGlsZVByb3ZpZGVyKS4KICAgICAgICBkaXJlY3RpdmUoewogICAgICAgICAgICBhOiBodG1sQW5jaG9yRGlyZWN0aXZlLAogICAgICAgICAgICBpbnB1dDogaW5wdXREaXJlY3RpdmUsCiAgICAgICAgICAgIHRleHRhcmVhOiBpbnB1dERpcmVjdGl2ZSwKICAgICAgICAgICAgZm9ybTogZm9ybURpcmVjdGl2ZSwKICAgICAgICAgICAgc2NyaXB0OiBzY3JpcHREaXJlY3RpdmUsCiAgICAgICAgICAgIHNlbGVjdDogc2VsZWN0RGlyZWN0aXZlLAogICAgICAgICAgICBzdHlsZTogc3R5bGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG9wdGlvbjogb3B0aW9uRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0JpbmQ6IG5nQmluZERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdCaW5kSHRtbFVuc2FmZTogbmdCaW5kSHRtbFVuc2FmZURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdCaW5kVGVtcGxhdGU6IG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0NsYXNzOiBuZ0NsYXNzRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0NsYXNzRXZlbjogbmdDbGFzc0V2ZW5EaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ2xhc3NPZGQ6IG5nQ2xhc3NPZGREaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ3NwOiBuZ0NzcERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdDbG9hazogbmdDbG9ha0RpcmVjdGl2ZSwKICAgICAgICAgICAgbmdDb250cm9sbGVyOiBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nRm9ybTogbmdGb3JtRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0hpZGU6IG5nSGlkZURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nSW5pdDogbmdJbml0RGlyZWN0aXZlLAogICAgICAgICAgICBuZ05vbkJpbmRhYmxlOiBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1BsdXJhbGl6ZTogbmdQbHVyYWxpemVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nUmVwZWF0OiBuZ1JlcGVhdERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdTaG93OiBuZ1Nob3dEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nU3VibWl0OiBuZ1N1Ym1pdERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdTdHlsZTogbmdTdHlsZURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdTd2l0Y2g6IG5nU3dpdGNoRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1N3aXRjaFdoZW46IG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSwKICAgICAgICAgICAgbmdTd2l0Y2hEZWZhdWx0OiBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsCiAgICAgICAgICAgIG5nT3B0aW9uczogbmdPcHRpb25zRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1ZpZXc6IG5nVmlld0RpcmVjdGl2ZSwKICAgICAgICAgICAgbmdUcmFuc2NsdWRlOiBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nTW9kZWw6IG5nTW9kZWxEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nTGlzdDogbmdMaXN0RGlyZWN0aXZlLAogICAgICAgICAgICBuZ0NoYW5nZTogbmdDaGFuZ2VEaXJlY3RpdmUsCiAgICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdSZXF1aXJlZDogcmVxdWlyZWREaXJlY3RpdmUsCiAgICAgICAgICAgIG5nVmFsdWU6IG5nVmFsdWVEaXJlY3RpdmUKICAgICAgICB9KS4KICAgICAgICBkaXJlY3RpdmUobmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMpLgogICAgICAgIGRpcmVjdGl2ZShuZ0V2ZW50RGlyZWN0aXZlcyk7CiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHsKICAgICAgICAkYW5jaG9yU2Nyb2xsOiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsCiAgICAgICAgJGJyb3dzZXI6ICRCcm93c2VyUHJvdmlkZXIsCiAgICAgICAgJGNhY2hlRmFjdG9yeTogJENhY2hlRmFjdG9yeVByb3ZpZGVyLAogICAgICAgICRjb250cm9sbGVyOiAkQ29udHJvbGxlclByb3ZpZGVyLAogICAgICAgICRkb2N1bWVudDogJERvY3VtZW50UHJvdmlkZXIsCiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXI6ICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIsCiAgICAgICAgJGZpbHRlcjogJEZpbHRlclByb3ZpZGVyLAogICAgICAgICRpbnRlcnBvbGF0ZTogJEludGVycG9sYXRlUHJvdmlkZXIsCiAgICAgICAgJGh0dHA6ICRIdHRwUHJvdmlkZXIsCiAgICAgICAgJGh0dHBCYWNrZW5kOiAkSHR0cEJhY2tlbmRQcm92aWRlciwKICAgICAgICAkbG9jYXRpb246ICRMb2NhdGlvblByb3ZpZGVyLAogICAgICAgICRsb2c6ICRMb2dQcm92aWRlciwKICAgICAgICAkcGFyc2U6ICRQYXJzZVByb3ZpZGVyLAogICAgICAgICRyb3V0ZTogJFJvdXRlUHJvdmlkZXIsCiAgICAgICAgJHJvdXRlUGFyYW1zOiAkUm91dGVQYXJhbXNQcm92aWRlciwKICAgICAgICAkcm9vdFNjb3BlOiAkUm9vdFNjb3BlUHJvdmlkZXIsCiAgICAgICAgJHE6ICRRUHJvdmlkZXIsCiAgICAgICAgJHNuaWZmZXI6ICRTbmlmZmVyUHJvdmlkZXIsCiAgICAgICAgJHRlbXBsYXRlQ2FjaGU6ICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsCiAgICAgICAgJHRpbWVvdXQ6ICRUaW1lb3V0UHJvdmlkZXIsCiAgICAgICAgJHdpbmRvdzogJFdpbmRvd1Byb3ZpZGVyCiAgICAgIH0pOwogICAgfQogIF0pOwp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vSlFMaXRlCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5lbGVtZW50CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogV3JhcHMgYSByYXcgRE9NIGVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgYXMgYSBbalF1ZXJ5XShodHRwOi8vanF1ZXJ5LmNvbSkgZWxlbWVudC4KICogYGFuZ3VsYXIuZWxlbWVudGAgY2FuIGJlIGVpdGhlciBhbiBhbGlhcyBmb3IgW2pRdWVyeV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pRdWVyeS8pIGZ1bmN0aW9uLCBpZgogKiBqUXVlcnkgaXMgYXZhaWxhYmxlLCBvciBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgdGhlIGVsZW1lbnQgb3Igc3RyaW5nIGluIEFuZ3VsYXIncyBqUXVlcnkgbGl0ZQogKiBpbXBsZW1lbnRhdGlvbiAoY29tbW9ubHkgcmVmZXJyZWQgdG8gYXMganFMaXRlKS4KICoKICogUmVhbCBqUXVlcnkgYWx3YXlzIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBqcUxpdGUsIHByb3ZpZGVkIGl0IHdhcyBsb2FkZWQgYmVmb3JlIGBET01Db250ZW50TG9hZGVkYAogKiBldmVudCBmaXJlZC4KICoKICoganFMaXRlIGlzIGEgdGlueSwgQVBJLWNvbXBhdGlibGUgc3Vic2V0IG9mIGpRdWVyeSB0aGF0IGFsbG93cwogKiBBbmd1bGFyIHRvIG1hbmlwdWxhdGUgdGhlIERPTS4ganFMaXRlIGltcGxlbWVudHMgb25seSB0aGUgbW9zdCBjb21tb25seSBuZWVkZWQgZnVuY3Rpb25hbGl0eQogKiB3aXRoaW4gYSB2ZXJ5IHNtYWxsIGZvb3RwcmludCwgc28gb25seSBhIHN1YnNldCBvZiB0aGUgalF1ZXJ5IEFQSSAtIG1ldGhvZHMsIGFyZ3VtZW50cyBhbmQKICogaW52b2NhdGlvbiBzdHlsZXMgLSBhcmUgc3VwcG9ydGVkLgogKgogKiBOb3RlOiBBbGwgZWxlbWVudCByZWZlcmVuY2VzIGluIEFuZ3VsYXIgYXJlIGFsd2F5cyB3cmFwcGVkIHdpdGggalF1ZXJ5IG9yIGpxTGl0ZTsgdGhleSBhcmUgbmV2ZXIKICogcmF3IERPTSByZWZlcmVuY2VzLgogKgogKiAjIyBBbmd1bGFyJ3MgalF1ZXJ5IGxpdGUgcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBtZXRob2RzOgogKgogKiAtIFthZGRDbGFzcygpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWRkQ2xhc3MvKQogKiAtIFthZnRlcigpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWZ0ZXIvKQogKiAtIFthcHBlbmQoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FwcGVuZC8pCiAqIC0gW2F0dHIoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2F0dHIvKQogKiAtIFtiaW5kKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9iaW5kLykKICogLSBbY2hpbGRyZW4oKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NoaWxkcmVuLykKICogLSBbY2xvbmUoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nsb25lLykKICogLSBbY29udGVudHMoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NvbnRlbnRzLykKICogLSBbY3NzKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jc3MvKQogKiAtIFtkYXRhKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kYXRhLykKICogLSBbZXEoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2VxLykKICogLSBbZmluZCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZmluZC8pIC0gTGltaXRlZCB0byBsb29rdXBzIGJ5IHRhZyBuYW1lLgogKiAtIFtoYXNDbGFzcygpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaGFzQ2xhc3MvKQogKiAtIFtodG1sKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9odG1sLykKICogLSBbbmV4dCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vbmV4dC8pCiAqIC0gW3BhcmVudCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcGFyZW50LykKICogLSBbcHJlcGVuZCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcHJlcGVuZC8pCiAqIC0gW3Byb3AoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3Byb3AvKQogKiAtIFtyZWFkeSgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVhZHkvKQogKiAtIFtyZW1vdmUoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZS8pCiAqIC0gW3JlbW92ZUF0dHIoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUF0dHIvKQogKiAtIFtyZW1vdmVDbGFzcygpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQ2xhc3MvKQogKiAtIFtyZW1vdmVEYXRhKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVEYXRhLykKICogLSBbcmVwbGFjZVdpdGgoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlcGxhY2VXaXRoLykKICogLSBbdGV4dCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdGV4dC8pCiAqIC0gW3RvZ2dsZUNsYXNzKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90b2dnbGVDbGFzcy8pCiAqIC0gW3VuYmluZCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdW5iaW5kLykKICogLSBbdmFsKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS92YWwvKQogKiAtIFt3cmFwKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS93cmFwLykKICoKICogIyMgSW4gYWRkdGlvbiB0byB0aGUgYWJvdmUsIEFuZ3VsYXIgcHJpdmlkZXMgYW4gYWRkaXRpb25hbCBtZXRob2QgdG8gYm90aCBqUXVlcnkgYW5kIGpRdWVyeSBsaXRlOgogKgogKiAtIGBjb250cm9sbGVyKG5hbWUpYCAtIHJldHJpZXZlcyB0aGUgY29udHJvbGxlciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIEJ5IGRlZmF1bHQKICogICByZXRyaWV2ZXMgY29udHJvbGxlciBhc3NvY2lhdGVkIHdpdGggdGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZS4gSWYgYG5hbWVgIGlzIHByb3ZpZGVkIGFzCiAqICAgY2FtZWxDYXNlIGRpcmVjdGl2ZSBuYW1lLCB0aGVuIHRoZSBjb250cm9sbGVyIGZvciB0aGlzIGRpcmVjdGl2ZSB3aWxsIGJlIHJldHJpZXZlZCAoZS5nLgogKiAgIGAnbmdNb2RlbCdgKS4KICogLSBgaW5qZWN0b3IoKWAgLSByZXRyaWV2ZXMgdGhlIGluamVjdG9yIG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgb3IgaXRzIHBhcmVudC4KICogLSBgc2NvcGUoKWAgLSByZXRyaWV2ZXMgdGhlIHtAbGluayBhcGkvbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0gb2YgdGhlIGN1cnJlbnQKICogICBlbGVtZW50IG9yIGl0cyBwYXJlbnQuCiAqIC0gYGluaGVyaXRlZERhdGEoKWAgLSBzYW1lIGFzIGBkYXRhKClgLCBidXQgd2Fsa3MgdXAgdGhlIERPTSB1bnRpbCBhIHZhbHVlIGlzIGZvdW5kIG9yIHRoZSB0b3AKICogICBwYXJlbnQgZWxlbWVudCBpcyByZWFjaGVkLgogKgogKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEhUTUwgc3RyaW5nIG9yIERPTUVsZW1lbnQgdG8gYmUgd3JhcHBlZCBpbnRvIGpRdWVyeS4KICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC4KICovCgp2YXIganFDYWNoZSA9IEpRTGl0ZS5jYWNoZSA9IHt9LAogICAganFOYW1lID0gSlFMaXRlLmV4cGFuZG8gPSAnbmctJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpLAogICAganFJZCA9IDEsCiAgICBhZGRFdmVudExpc3RlbmVyRm4gPSAod2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIKICAgICAgPyBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikge2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO30KICAgICAgOiBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikge2VsZW1lbnQuYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGZuKTt9KSwKICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbiA9ICh3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcgogICAgICA/IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZuKSB7ZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBmYWxzZSk7IH0KICAgICAgOiBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikge2VsZW1lbnQuZGV0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGZuKTsgfSk7CgpmdW5jdGlvbiBqcU5leHRJZCgpIHsgcmV0dXJuICsranFJZDsgfQoKCnZhciBTUEVDSUFMX0NIQVJTX1JFR0VYUCA9IC8oW1w6XC1cX10rKC4pKS9nOwp2YXIgTU9aX0hBQ0tfUkVHRVhQID0gL15tb3ooW0EtWl0pLzsKCi8qKgogKiBDb252ZXJ0cyBzbmFrZV9jYXNlIHRvIGNhbWVsQ2FzZS4KICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci4KICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemUKICovCmZ1bmN0aW9uIGNhbWVsQ2FzZShuYW1lKSB7CiAgcmV0dXJuIG5hbWUuCiAgICByZXBsYWNlKFNQRUNJQUxfQ0hBUlNfUkVHRVhQLCBmdW5jdGlvbihfLCBzZXBhcmF0b3IsIGxldHRlciwgb2Zmc2V0KSB7CiAgICAgIHJldHVybiBvZmZzZXQgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjsKICAgIH0pLgogICAgcmVwbGFjZShNT1pfSEFDS19SRUdFWFAsICdNb3okMScpOwp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KLy8galF1ZXJ5IG11dGF0aW9uIHBhdGNoCi8vCi8vICBJbiBjb25qdW5jdGlvbiB3aXRoIGJpbmRKUXVlcnkgaW50ZXJjZXB0cyBhbGwgalF1ZXJ5J3MgRE9NIGRlc3RydWN0aW9uIGFwaXMgYW5kIGZpcmVzIGEKLy8gJGRlc3Ryb3kgZXZlbnQgb24gYWxsIERPTSBub2RlcyBiZWluZyByZW1vdmVkLgovLwovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCmZ1bmN0aW9uIEpRTGl0ZVBhdGNoSlF1ZXJ5UmVtb3ZlKG5hbWUsIGRpc3BhdGNoVGhpcykgewogIHZhciBvcmlnaW5hbEpxRm4gPSBqUXVlcnkuZm5bbmFtZV07CiAgb3JpZ2luYWxKcUZuID0gb3JpZ2luYWxKcUZuLiRvcmlnaW5hbCB8fCBvcmlnaW5hbEpxRm47CiAgcmVtb3ZlUGF0Y2guJG9yaWdpbmFsID0gb3JpZ2luYWxKcUZuOwogIGpRdWVyeS5mbltuYW1lXSA9IHJlbW92ZVBhdGNoOwoKICBmdW5jdGlvbiByZW1vdmVQYXRjaCgpIHsKICAgIHZhciBsaXN0ID0gW3RoaXNdLAogICAgICAgIGZpcmVFdmVudCA9IGRpc3BhdGNoVGhpcywKICAgICAgICBzZXQsIHNldEluZGV4LCBzZXRMZW5ndGgsCiAgICAgICAgZWxlbWVudCwgY2hpbGRJbmRleCwgY2hpbGRMZW5ndGgsIGNoaWxkcmVuLAogICAgICAgIGZucywgZXZlbnRzOwoKICAgIHdoaWxlKGxpc3QubGVuZ3RoKSB7CiAgICAgIHNldCA9IGxpc3Quc2hpZnQoKTsKICAgICAgZm9yKHNldEluZGV4ID0gMCwgc2V0TGVuZ3RoID0gc2V0Lmxlbmd0aDsgc2V0SW5kZXggPCBzZXRMZW5ndGg7IHNldEluZGV4KyspIHsKICAgICAgICBlbGVtZW50ID0ganFMaXRlKHNldFtzZXRJbmRleF0pOwogICAgICAgIGlmIChmaXJlRXZlbnQpIHsKICAgICAgICAgIGV2ZW50cyA9IGVsZW1lbnQuZGF0YSgnZXZlbnRzJyk7CiAgICAgICAgICBpZiAoIChmbnMgPSBldmVudHMgJiYgZXZlbnRzLiRkZXN0cm95KSApIHsKICAgICAgICAgICAgZm9yRWFjaChmbnMsIGZ1bmN0aW9uKGZuKXsKICAgICAgICAgICAgICBmbi5oYW5kbGVyKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmaXJlRXZlbnQgPSAhZmlyZUV2ZW50OwogICAgICAgIH0KICAgICAgICBmb3IoY2hpbGRJbmRleCA9IDAsIGNoaWxkTGVuZ3RoID0gKGNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbigpKS5sZW5ndGg7CiAgICAgICAgICAgIGNoaWxkSW5kZXggPCBjaGlsZExlbmd0aDsKICAgICAgICAgICAgY2hpbGRJbmRleCsrKSB7CiAgICAgICAgICBsaXN0LnB1c2goalF1ZXJ5KGNoaWxkcmVuW2NoaWxkSW5kZXhdKSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gb3JpZ2luYWxKcUZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KZnVuY3Rpb24gSlFMaXRlKGVsZW1lbnQpIHsKICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEpRTGl0ZSkgewogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfQogIGlmICghKHRoaXMgaW5zdGFuY2VvZiBKUUxpdGUpKSB7CiAgICBpZiAoaXNTdHJpbmcoZWxlbWVudCkgJiYgZWxlbWVudC5jaGFyQXQoMCkgIT0gJzwnKSB7CiAgICAgIHRocm93IEVycm9yKCdzZWxlY3RvcnMgbm90IGltcGxlbWVudGVkJyk7CiAgICB9CiAgICByZXR1cm4gbmV3IEpRTGl0ZShlbGVtZW50KTsKICB9CgogIGlmIChpc1N0cmluZyhlbGVtZW50KSkgewogICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgLy8gUmVhZCBhYm91dCB0aGUgTm9TY29wZSBlbGVtZW50cyBoZXJlOgogICAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTMzODk3KFZTLjg1KS5hc3B4CiAgICBkaXYuaW5uZXJIVE1MID0gJzxkaXY+Jm5ic3A7PC9kaXY+JyArIGVsZW1lbnQ7IC8vIElFIGluc2FuaXR5IHRvIG1ha2UgTm9TY29wZSBlbGVtZW50cyB3b3JrIQogICAgZGl2LnJlbW92ZUNoaWxkKGRpdi5maXJzdENoaWxkKTsgLy8gcmVtb3ZlIHRoZSBzdXBlcmZsdW91cyBkaXYKICAgIEpRTGl0ZUFkZE5vZGVzKHRoaXMsIGRpdi5jaGlsZE5vZGVzKTsKICAgIHRoaXMucmVtb3ZlKCk7IC8vIGRldGFjaCB0aGUgZWxlbWVudHMgZnJvbSB0aGUgdGVtcG9yYXJ5IERPTSBkaXYuCiAgfSBlbHNlIHsKICAgIEpRTGl0ZUFkZE5vZGVzKHRoaXMsIGVsZW1lbnQpOwogIH0KfQoKZnVuY3Rpb24gSlFMaXRlQ2xvbmUoZWxlbWVudCkgewogIHJldHVybiBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTsKfQoKZnVuY3Rpb24gSlFMaXRlRGVhbG9jKGVsZW1lbnQpewogIEpRTGl0ZVJlbW92ZURhdGEoZWxlbWVudCk7CiAgZm9yICggdmFyIGkgPSAwLCBjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGROb2RlcyB8fCBbXTsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7CiAgICBKUUxpdGVEZWFsb2MoY2hpbGRyZW5baV0pOwogIH0KfQoKZnVuY3Rpb24gSlFMaXRlVW5iaW5kKGVsZW1lbnQsIHR5cGUsIGZuKSB7CiAgdmFyIGV2ZW50cyA9IEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnZXZlbnRzJyksCiAgICAgIGhhbmRsZSA9IEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnaGFuZGxlJyk7CgogIGlmICghaGFuZGxlKSByZXR1cm47IC8vbm8gbGlzdGVuZXJzIHJlZ2lzdGVyZWQKCiAgaWYgKGlzVW5kZWZpbmVkKHR5cGUpKSB7CiAgICBmb3JFYWNoKGV2ZW50cywgZnVuY3Rpb24oZXZlbnRIYW5kbGVyLCB0eXBlKSB7CiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBldmVudEhhbmRsZXIpOwogICAgICBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgfSk7CiAgfSBlbHNlIHsKICAgIGlmIChpc1VuZGVmaW5lZChmbikpIHsKICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGV2ZW50c1t0eXBlXSk7CiAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07CiAgICB9IGVsc2UgewogICAgICBhcnJheVJlbW92ZShldmVudHNbdHlwZV0sIGZuKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZVJlbW92ZURhdGEoZWxlbWVudCkgewogIHZhciBleHBhbmRvSWQgPSBlbGVtZW50W2pxTmFtZV0sCiAgICAgIGV4cGFuZG9TdG9yZSA9IGpxQ2FjaGVbZXhwYW5kb0lkXTsKCiAgaWYgKGV4cGFuZG9TdG9yZSkgewogICAgaWYgKGV4cGFuZG9TdG9yZS5oYW5kbGUpIHsKICAgICAgZXhwYW5kb1N0b3JlLmV2ZW50cy4kZGVzdHJveSAmJiBleHBhbmRvU3RvcmUuaGFuZGxlKHt9LCAnJGRlc3Ryb3knKTsKICAgICAgSlFMaXRlVW5iaW5kKGVsZW1lbnQpOwogICAgfQogICAgZGVsZXRlIGpxQ2FjaGVbZXhwYW5kb0lkXTsKICAgIGVsZW1lbnRbanFOYW1lXSA9IHVuZGVmaW5lZDsgLy8gaWUgZG9lcyBub3QgYWxsb3cgZGVsZXRpb24gb2YgYXR0cmlidXRlcyBvbiBlbGVtZW50cy4KICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCBrZXksIHZhbHVlKSB7CiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnRbanFOYW1lXSwKICAgICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWQgfHwgLTFdOwoKICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkgewogICAgaWYgKCFleHBhbmRvU3RvcmUpIHsKICAgICAgZWxlbWVudFtqcU5hbWVdID0gZXhwYW5kb0lkID0ganFOZXh0SWQoKTsKICAgICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWRdID0ge307CiAgICB9CiAgICBleHBhbmRvU3RvcmVba2V5XSA9IHZhbHVlOwogIH0gZWxzZSB7CiAgICByZXR1cm4gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZVtrZXldOwogIH0KfQoKZnVuY3Rpb24gSlFMaXRlRGF0YShlbGVtZW50LCBrZXksIHZhbHVlKSB7CiAgdmFyIGRhdGEgPSBKUUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2RhdGEnKSwKICAgICAgaXNTZXR0ZXIgPSBpc0RlZmluZWQodmFsdWUpLAogICAgICBrZXlEZWZpbmVkID0gIWlzU2V0dGVyICYmIGlzRGVmaW5lZChrZXkpLAogICAgICBpc1NpbXBsZUdldHRlciA9IGtleURlZmluZWQgJiYgIWlzT2JqZWN0KGtleSk7CgogIGlmICghZGF0YSAmJiAhaXNTaW1wbGVHZXR0ZXIpIHsKICAgIEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnZGF0YScsIGRhdGEgPSB7fSk7CiAgfQoKICBpZiAoaXNTZXR0ZXIpIHsKICAgIGRhdGFba2V5XSA9IHZhbHVlOwogIH0gZWxzZSB7CiAgICBpZiAoa2V5RGVmaW5lZCkgewogICAgICBpZiAoaXNTaW1wbGVHZXR0ZXIpIHsKICAgICAgICAvLyBkb24ndCBjcmVhdGUgZGF0YSBpbiB0aGlzIGNhc2UuCiAgICAgICAgcmV0dXJuIGRhdGEgJiYgZGF0YVtrZXldOwogICAgICB9IGVsc2UgewogICAgICAgIGV4dGVuZChkYXRhLCBrZXkpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZGF0YTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZUhhc0NsYXNzKGVsZW1lbnQsIHNlbGVjdG9yKSB7CiAgcmV0dXJuICgoIiAiICsgZWxlbWVudC5jbGFzc05hbWUgKyAiICIpLnJlcGxhY2UoL1tcblx0XS9nLCAiICIpLgogICAgICBpbmRleE9mKCAiICIgKyBzZWxlY3RvciArICIgIiApID4gLTEpOwp9CgpmdW5jdGlvbiBKUUxpdGVSZW1vdmVDbGFzcyhlbGVtZW50LCBzZWxlY3RvcikgewogIGlmIChzZWxlY3RvcikgewogICAgZm9yRWFjaChzZWxlY3Rvci5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykgewogICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IHRyaW0oCiAgICAgICAgICAoIiAiICsgZWxlbWVudC5jbGFzc05hbWUgKyAiICIpCiAgICAgICAgICAucmVwbGFjZSgvW1xuXHRdL2csICIgIikKICAgICAgICAgIC5yZXBsYWNlKCIgIiArIHRyaW0oY3NzQ2xhc3MpICsgIiAiLCAiICIpCiAgICAgICk7CiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZUFkZENsYXNzKGVsZW1lbnQsIHNlbGVjdG9yKSB7CiAgaWYgKHNlbGVjdG9yKSB7CiAgICBmb3JFYWNoKHNlbGVjdG9yLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNzc0NsYXNzKSB7CiAgICAgIGlmICghSlFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgY3NzQ2xhc3MpKSB7CiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSB0cmltKGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnICsgdHJpbShjc3NDbGFzcykpOwogICAgICB9CiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZUFkZE5vZGVzKHJvb3QsIGVsZW1lbnRzKSB7CiAgaWYgKGVsZW1lbnRzKSB7CiAgICBlbGVtZW50cyA9ICghZWxlbWVudHMubm9kZU5hbWUgJiYgaXNEZWZpbmVkKGVsZW1lbnRzLmxlbmd0aCkgJiYgIWlzV2luZG93KGVsZW1lbnRzKSkKICAgICAgPyBlbGVtZW50cwogICAgICA6IFsgZWxlbWVudHMgXTsKICAgIGZvcih2YXIgaT0wOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgcm9vdC5wdXNoKGVsZW1lbnRzW2ldKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZUNvbnRyb2xsZXIoZWxlbWVudCwgbmFtZSkgewogIHJldHVybiBKUUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckJyArIChuYW1lIHx8ICduZ0NvbnRyb2xsZXInICkgKyAnQ29udHJvbGxlcicpOwp9CgpmdW5jdGlvbiBKUUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7CiAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTsKCiAgLy8gaWYgZWxlbWVudCBpcyB0aGUgZG9jdW1lbnQgb2JqZWN0IHdvcmsgd2l0aCB0aGUgaHRtbCBlbGVtZW50IGluc3RlYWQKICAvLyB0aGlzIG1ha2VzICQoZG9jdW1lbnQpLnNjb3BlKCkgcG9zc2libGUKICBpZihlbGVtZW50WzBdLm5vZGVUeXBlID09IDkpIHsKICAgIGVsZW1lbnQgPSBlbGVtZW50LmZpbmQoJ2h0bWwnKTsKICB9CgogIHdoaWxlIChlbGVtZW50Lmxlbmd0aCkgewogICAgaWYgKHZhbHVlID0gZWxlbWVudC5kYXRhKG5hbWUpKSByZXR1cm4gdmFsdWU7CiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnQoKTsKICB9Cn0KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBGdW5jdGlvbnMgd2hpY2ggYXJlIGRlY2xhcmVkIGRpcmVjdGx5LgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KdmFyIEpRTGl0ZVByb3RvdHlwZSA9IEpRTGl0ZS5wcm90b3R5cGUgPSB7CiAgcmVhZHk6IGZ1bmN0aW9uKGZuKSB7CiAgICB2YXIgZmlyZWQgPSBmYWxzZTsKCiAgICBmdW5jdGlvbiB0cmlnZ2VyKCkgewogICAgICBpZiAoZmlyZWQpIHJldHVybjsKICAgICAgZmlyZWQgPSB0cnVlOwogICAgICBmbigpOwogICAgfQoKICAgIHRoaXMuYmluZCgnRE9NQ29udGVudExvYWRlZCcsIHRyaWdnZXIpOyAvLyB3b3JrcyBmb3IgbW9kZXJuIGJyb3dzZXJzIGFuZCBJRTkKICAgIC8vIHdlIGNhbiBub3QgdXNlIGpxTGl0ZSBzaW5jZSB3ZSBhcmUgbm90IGRvbmUgbG9hZGluZyBhbmQgalF1ZXJ5IGNvdWxkIGJlIGxvYWRlZCBsYXRlci4KICAgIEpRTGl0ZSh3aW5kb3cpLmJpbmQoJ2xvYWQnLCB0cmlnZ2VyKTsgLy8gZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCBmb3Igb3RoZXJzCiAgfSwKICB0b1N0cmluZzogZnVuY3Rpb24oKSB7CiAgICB2YXIgdmFsdWUgPSBbXTsKICAgIGZvckVhY2godGhpcywgZnVuY3Rpb24oZSl7IHZhbHVlLnB1c2goJycgKyBlKTt9KTsKICAgIHJldHVybiAnWycgKyB2YWx1ZS5qb2luKCcsICcpICsgJ10nOwogIH0sCgogIGVxOiBmdW5jdGlvbihpbmRleCkgewogICAgICByZXR1cm4gKGluZGV4ID49IDApID8ganFMaXRlKHRoaXNbaW5kZXhdKSA6IGpxTGl0ZSh0aGlzW3RoaXMubGVuZ3RoICsgaW5kZXhdKTsKICB9LAoKICBsZW5ndGg6IDAsCiAgcHVzaDogcHVzaCwKICBzb3J0OiBbXS5zb3J0LAogIHNwbGljZTogW10uc3BsaWNlCn07CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyBnZXR0ZXIvc2V0dGVycy4KLy8gdGhlc2UgZnVuY3Rpb25zIHJldHVybiBzZWxmIG9uIHNldHRlciBhbmQKLy8gdmFsdWUgb24gZ2V0LgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KdmFyIEJPT0xFQU5fQVRUUiA9IHt9Owpmb3JFYWNoKCdtdWx0aXBsZSxzZWxlY3RlZCxjaGVja2VkLGRpc2FibGVkLHJlYWRPbmx5LHJlcXVpcmVkJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkgewogIEJPT0xFQU5fQVRUUltsb3dlcmNhc2UodmFsdWUpXSA9IHZhbHVlOwp9KTsKdmFyIEJPT0xFQU5fRUxFTUVOVFMgPSB7fTsKZm9yRWFjaCgnaW5wdXQsc2VsZWN0LG9wdGlvbix0ZXh0YXJlYSxidXR0b24sZm9ybScuc3BsaXQoJywnKSwgZnVuY3Rpb24odmFsdWUpIHsKICBCT09MRUFOX0VMRU1FTlRTW3VwcGVyY2FzZSh2YWx1ZSldID0gdHJ1ZTsKfSk7CgpmdW5jdGlvbiBnZXRCb29sZWFuQXR0ck5hbWUoZWxlbWVudCwgbmFtZSkgewogIC8vIGNoZWNrIGRvbSBsYXN0IHNpbmNlIHdlIHdpbGwgbW9zdCBsaWtlbHkgZmFpbCBvbiBuYW1lCiAgdmFyIGJvb2xlYW5BdHRyID0gQk9PTEVBTl9BVFRSW25hbWUudG9Mb3dlckNhc2UoKV07CgogIC8vIGJvb2xlYW5BdHRyIGlzIGhlcmUgdHdpY2UgdG8gbWluaW1pemUgRE9NIGFjY2VzcwogIHJldHVybiBib29sZWFuQXR0ciAmJiBCT09MRUFOX0VMRU1FTlRTW2VsZW1lbnQubm9kZU5hbWVdICYmIGJvb2xlYW5BdHRyOwp9Cgpmb3JFYWNoKHsKICBkYXRhOiBKUUxpdGVEYXRhLAogIGluaGVyaXRlZERhdGE6IEpRTGl0ZUluaGVyaXRlZERhdGEsCgogIHNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gSlFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJHNjb3BlJyk7CiAgfSwKCiAgY29udHJvbGxlcjogSlFMaXRlQ29udHJvbGxlciAsCgogIGluamVjdG9yOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gSlFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJGluamVjdG9yJyk7CiAgfSwKCiAgcmVtb3ZlQXR0cjogZnVuY3Rpb24oZWxlbWVudCxuYW1lKSB7CiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsKICB9LAoKICBoYXNDbGFzczogSlFMaXRlSGFzQ2xhc3MsCgogIGNzczogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHsKICAgIG5hbWUgPSBjYW1lbENhc2UobmFtZSk7CgogICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudC5zdHlsZVtuYW1lXSA9IHZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgdmFyIHZhbDsKCiAgICAgIGlmIChtc2llIDw9IDgpIHsKICAgICAgICAvLyB0aGlzIGlzIHNvbWUgSUUgc3BlY2lmaWMgd2VpcmRuZXNzIHRoYXQgalF1ZXJ5IDEuNi40IGRvZXMgbm90IHN1cmUgd2h5CiAgICAgICAgdmFsID0gZWxlbWVudC5jdXJyZW50U3R5bGUgJiYgZWxlbWVudC5jdXJyZW50U3R5bGVbbmFtZV07CiAgICAgICAgaWYgKHZhbCA9PT0gJycpIHZhbCA9ICdhdXRvJzsKICAgICAgfQoKICAgICAgdmFsID0gdmFsIHx8IGVsZW1lbnQuc3R5bGVbbmFtZV07CgogICAgICBpZiAobXNpZSA8PSA4KSB7CiAgICAgICAgLy8ganF1ZXJ5IHdlaXJkbmVzcyA6LS8KICAgICAgICB2YWwgPSAodmFsID09PSAnJykgPyB1bmRlZmluZWQgOiB2YWw7CiAgICAgIH0KCiAgICAgIHJldHVybiAgdmFsOwogICAgfQogIH0sCgogIGF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKXsKICAgIHZhciBsb3dlcmNhc2VkTmFtZSA9IGxvd2VyY2FzZShuYW1lKTsKICAgIGlmIChCT09MRUFOX0FUVFJbbG93ZXJjYXNlZE5hbWVdKSB7CiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7CiAgICAgICAgaWYgKCEhdmFsdWUpIHsKICAgICAgICAgIGVsZW1lbnRbbmFtZV0gPSB0cnVlOwogICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgbG93ZXJjYXNlZE5hbWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBlbGVtZW50W25hbWVdID0gZmFsc2U7CiAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShsb3dlcmNhc2VkTmFtZSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAoZWxlbWVudFtuYW1lXSB8fAogICAgICAgICAgICAgICAgIChlbGVtZW50LmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKG5hbWUpfHwgbm9vcCkuc3BlY2lmaWVkKQogICAgICAgICAgICAgICA/IGxvd2VyY2FzZWROYW1lCiAgICAgICAgICAgICAgIDogdW5kZWZpbmVkOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpOwogICAgfSBlbHNlIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSkgewogICAgICAvLyB0aGUgZXh0cmEgYXJndW1lbnQgIjIiIGlzIHRvIGdldCB0aGUgcmlnaHQgdGhpbmcgZm9yIGEuaHJlZiBpbiBJRSwgc2VlIGpRdWVyeSBjb2RlCiAgICAgIC8vIHNvbWUgZWxlbWVudHMgKGUuZy4gRG9jdW1lbnQpIGRvbid0IGhhdmUgZ2V0IGF0dHJpYnV0ZSwgc28gcmV0dXJuIHVuZGVmaW5lZAogICAgICB2YXIgcmV0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSwgMik7CiAgICAgIC8vIG5vcm1hbGl6ZSBub24tZXhpc3RpbmcgYXR0cmlidXRlcyB0byB1bmRlZmluZWQgKGFzIGpRdWVyeSkKICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDsKICAgIH0KICB9LAoKICBwcm9wOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCB2YWx1ZSkgewogICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudFtuYW1lXSA9IHZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGVsZW1lbnRbbmFtZV07CiAgICB9CiAgfSwKCiAgdGV4dDogZXh0ZW5kKChtc2llIDwgOSkKICAgICAgPyBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkgewogICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09IDEgLyoqIEVsZW1lbnQgKi8pIHsKICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpCiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmlubmVyVGV4dDsKICAgICAgICAgIGVsZW1lbnQuaW5uZXJUZXh0ID0gdmFsdWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpCiAgICAgICAgICAgIHJldHVybiBlbGVtZW50Lm5vZGVWYWx1ZTsKICAgICAgICAgIGVsZW1lbnQubm9kZVZhbHVlID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9CiAgICAgIDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHsKICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7CiAgICAgICAgICByZXR1cm4gZWxlbWVudC50ZXh0Q29udGVudDsKICAgICAgICB9CiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlOwogICAgICB9LCB7JGR2OicnfSksCgogIHZhbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHsKICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIGVsZW1lbnQudmFsdWU7CiAgICB9CiAgICBlbGVtZW50LnZhbHVlID0gdmFsdWU7CiAgfSwKCiAgaHRtbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHsKICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIGVsZW1lbnQuaW5uZXJIVE1MOwogICAgfQogICAgZm9yICh2YXIgaSA9IDAsIGNoaWxkTm9kZXMgPSBlbGVtZW50LmNoaWxkTm9kZXM7IGkgPCBjaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgIEpRTGl0ZURlYWxvYyhjaGlsZE5vZGVzW2ldKTsKICAgIH0KICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7CiAgfQp9LCBmdW5jdGlvbihmbiwgbmFtZSl7CiAgLyoqCiAgICogUHJvcGVydGllczogd3JpdGVzIHJldHVybiBzZWxlY3Rpb24sIHJlYWRzIHJldHVybiBmaXJzdCB2YWx1ZQogICAqLwogIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyKSB7CiAgICB2YXIgaSwga2V5OwoKICAgIC8vIEpRTGl0ZUhhc0NsYXNzIGhhcyBvbmx5IHR3byBhcmd1bWVudHMsIGJ1dCBpcyBhIGdldHRlci1vbmx5IGZuLCBzbyB3ZSBuZWVkIHRvIHNwZWNpYWwtY2FzZSBpdAogICAgLy8gaW4gYSB3YXkgdGhhdCBzdXJ2aXZlcyBtaW5pZmljYXRpb24uCiAgICBpZiAoKChmbi5sZW5ndGggPT0gMiAmJiAoZm4gIT09IEpRTGl0ZUhhc0NsYXNzICYmIGZuICE9PSBKUUxpdGVDb250cm9sbGVyKSkgPyBhcmcxIDogYXJnMikgPT09IHVuZGVmaW5lZCkgewogICAgICBpZiAoaXNPYmplY3QoYXJnMSkpIHsKCiAgICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIGJ1dCB0aGUgb2JqZWN0IHByb3BlcnRpZXMgYXJlIHRoZSBrZXkvdmFsdWVzCiAgICAgICAgZm9yKGk9MDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmIChmbiA9PT0gSlFMaXRlRGF0YSkgewogICAgICAgICAgICAvLyBkYXRhKCkgdGFrZXMgdGhlIHdob2xlIG9iamVjdCBpbiBqUXVlcnkKICAgICAgICAgICAgZm4odGhpc1tpXSwgYXJnMSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmb3IgKGtleSBpbiBhcmcxKSB7CiAgICAgICAgICAgICAgZm4odGhpc1tpXSwga2V5LCBhcmcxW2tleV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHdlIGFyZSBhIHJlYWQsIHNvIHJlYWQgdGhlIGZpcnN0IGNoaWxkLgogICAgICAgIGlmICh0aGlzLmxlbmd0aCkKICAgICAgICAgIHJldHVybiBmbih0aGlzWzBdLCBhcmcxLCBhcmcyKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIHNvIGFwcGx5IHRvIGFsbCBjaGlsZHJlbgogICAgICBmb3IoaT0wOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykgewogICAgICAgIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIpOwogICAgICB9CiAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIHJldHVybiBmbi4kZHY7CiAgfTsKfSk7CgpmdW5jdGlvbiBjcmVhdGVFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnRzKSB7CiAgdmFyIGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCwgdHlwZSkgewogICAgaWYgKCFldmVudC5wcmV2ZW50RGVmYXVsdCkgewogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7IC8vaWUKICAgICAgfTsKICAgIH0KCiAgICBpZiAoIWV2ZW50LnN0b3BQcm9wYWdhdGlvbikgewogICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHsKICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlOyAvL2llCiAgICAgIH07CiAgICB9CgogICAgaWYgKCFldmVudC50YXJnZXQpIHsKICAgICAgZXZlbnQudGFyZ2V0ID0gZXZlbnQuc3JjRWxlbWVudCB8fCBkb2N1bWVudDsKICAgIH0KCiAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkpIHsKICAgICAgdmFyIHByZXZlbnQgPSBldmVudC5wcmV2ZW50RGVmYXVsdDsKICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHsKICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsKICAgICAgICBwcmV2ZW50LmNhbGwoZXZlbnQpOwogICAgICB9OwogICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7CiAgICB9CgogICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBldmVudC5kZWZhdWx0UHJldmVudGVkOwogICAgfTsKCiAgICBmb3JFYWNoKGV2ZW50c1t0eXBlIHx8IGV2ZW50LnR5cGVdLCBmdW5jdGlvbihmbikgewogICAgICBmbi5jYWxsKGVsZW1lbnQsIGV2ZW50KTsKICAgIH0pOwoKICAgIC8vIFJlbW92ZSBtb25rZXktcGF0Y2hlZCBtZXRob2RzIChJRSksCiAgICAvLyBhcyB0aGV5IHdvdWxkIGNhdXNlIG1lbW9yeSBsZWFrcyBpbiBJRTguCiAgICBpZiAobXNpZSA8PSA4KSB7CiAgICAgIC8vIElFNy84IGRvZXMgbm90IGFsbG93IHRvIGRlbGV0ZSBwcm9wZXJ0eSBvbiBuYXRpdmUgb2JqZWN0CiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gbnVsbDsKICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gbnVsbDsKICAgICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gbnVsbDsKICAgIH0gZWxzZSB7CiAgICAgIC8vIEl0IHNob3VsZG4ndCBhZmZlY3Qgbm9ybWFsIGJyb3dzZXJzIChuYXRpdmUgbWV0aG9kcyBhcmUgZGVmaW5lZCBvbiBwcm90b3R5cGUpLgogICAgICBkZWxldGUgZXZlbnQucHJldmVudERlZmF1bHQ7CiAgICAgIGRlbGV0ZSBldmVudC5zdG9wUHJvcGFnYXRpb247CiAgICAgIGRlbGV0ZSBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQ7CiAgICB9CiAgfTsKICBldmVudEhhbmRsZXIuZWxlbSA9IGVsZW1lbnQ7CiAgcmV0dXJuIGV2ZW50SGFuZGxlcjsKfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vIEZ1bmN0aW9ucyBpdGVyYXRpbmcgdHJhdmVyc2FsLgovLyBUaGVzZSBmdW5jdGlvbnMgY2hhaW4gcmVzdWx0cyBpbnRvIGEgc2luZ2xlCi8vIHNlbGVjdG9yLgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KZm9yRWFjaCh7CiAgcmVtb3ZlRGF0YTogSlFMaXRlUmVtb3ZlRGF0YSwKCiAgZGVhbG9jOiBKUUxpdGVEZWFsb2MsCgogIGJpbmQ6IGZ1bmN0aW9uIGJpbmRGbihlbGVtZW50LCB0eXBlLCBmbil7CiAgICB2YXIgZXZlbnRzID0gSlFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsICdldmVudHMnKSwKICAgICAgICBoYW5kbGUgPSBKUUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2hhbmRsZScpOwoKICAgIGlmICghZXZlbnRzKSBKUUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2V2ZW50cycsIGV2ZW50cyA9IHt9KTsKICAgIGlmICghaGFuZGxlKSBKUUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2hhbmRsZScsIGhhbmRsZSA9IGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpKTsKCiAgICBmb3JFYWNoKHR5cGUuc3BsaXQoJyAnKSwgZnVuY3Rpb24odHlwZSl7CiAgICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlXTsKCiAgICAgIGlmICghZXZlbnRGbnMpIHsKICAgICAgICBpZiAodHlwZSA9PSAnbW91c2VlbnRlcicgfHwgdHlwZSA9PSAnbW91c2VsZWF2ZScpIHsKICAgICAgICAgIHZhciBjb3VudGVyID0gMDsKCiAgICAgICAgICBldmVudHMubW91c2VlbnRlciA9IFtdOwogICAgICAgICAgZXZlbnRzLm1vdXNlbGVhdmUgPSBbXTsKCiAgICAgICAgICBiaW5kRm4oZWxlbWVudCwgJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgIGNvdW50ZXIrKzsKICAgICAgICAgICAgaWYgKGNvdW50ZXIgPT0gMSkgewogICAgICAgICAgICAgIGhhbmRsZShldmVudCwgJ21vdXNlZW50ZXInKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICBiaW5kRm4oZWxlbWVudCwgJ21vdXNlb3V0JywgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgY291bnRlciAtLTsKICAgICAgICAgICAgaWYgKGNvdW50ZXIgPT0gMCkgewogICAgICAgICAgICAgIGhhbmRsZShldmVudCwgJ21vdXNlbGVhdmUnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBoYW5kbGUpOwogICAgICAgICAgZXZlbnRzW3R5cGVdID0gW107CiAgICAgICAgfQogICAgICAgIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGVdCiAgICAgIH0KICAgICAgZXZlbnRGbnMucHVzaChmbik7CiAgICB9KTsKICB9LAoKICB1bmJpbmQ6IEpRTGl0ZVVuYmluZCwKCiAgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uKGVsZW1lbnQsIHJlcGxhY2VOb2RlKSB7CiAgICB2YXIgaW5kZXgsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgIEpRTGl0ZURlYWxvYyhlbGVtZW50KTsKICAgIGZvckVhY2gobmV3IEpRTGl0ZShyZXBsYWNlTm9kZSksIGZ1bmN0aW9uKG5vZGUpewogICAgICBpZiAoaW5kZXgpIHsKICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5vZGUsIGVsZW1lbnQpOwogICAgICB9CiAgICAgIGluZGV4ID0gbm9kZTsKICAgIH0pOwogIH0sCgogIGNoaWxkcmVuOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICB2YXIgY2hpbGRyZW4gPSBbXTsKICAgIGZvckVhY2goZWxlbWVudC5jaGlsZE5vZGVzLCBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgaWYgKGVsZW1lbnQubm9kZU5hbWUgIT0gJyN0ZXh0JykKICAgICAgICBjaGlsZHJlbi5wdXNoKGVsZW1lbnQpOwogICAgfSk7CiAgICByZXR1cm4gY2hpbGRyZW47CiAgfSwKCiAgY29udGVudHM6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHJldHVybiBlbGVtZW50LmNoaWxkTm9kZXM7CiAgfSwKCiAgYXBwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7CiAgICBmb3JFYWNoKG5ldyBKUUxpdGUobm9kZSksIGZ1bmN0aW9uKGNoaWxkKXsKICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IDEpCiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7CiAgICB9KTsKICB9LAoKICBwcmVwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7CiAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gMSkgewogICAgICB2YXIgaW5kZXggPSBlbGVtZW50LmZpcnN0Q2hpbGQ7CiAgICAgIGZvckVhY2gobmV3IEpRTGl0ZShub2RlKSwgZnVuY3Rpb24oY2hpbGQpewogICAgICAgIGlmIChpbmRleCkgewogICAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGluZGV4KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7CiAgICAgICAgICBpbmRleCA9IGNoaWxkOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwKCiAgd3JhcDogZnVuY3Rpb24oZWxlbWVudCwgd3JhcE5vZGUpIHsKICAgIHdyYXBOb2RlID0ganFMaXRlKHdyYXBOb2RlKVswXTsKICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CiAgICBpZiAocGFyZW50KSB7CiAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQod3JhcE5vZGUsIGVsZW1lbnQpOwogICAgfQogICAgd3JhcE5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudCk7CiAgfSwKCiAgcmVtb3ZlOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBKUUxpdGVEZWFsb2MoZWxlbWVudCk7CiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpOwogIH0sCgogIGFmdGVyOiBmdW5jdGlvbihlbGVtZW50LCBuZXdFbGVtZW50KSB7CiAgICB2YXIgaW5kZXggPSBlbGVtZW50LCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CiAgICBmb3JFYWNoKG5ldyBKUUxpdGUobmV3RWxlbWVudCksIGZ1bmN0aW9uKG5vZGUpewogICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTsKICAgICAgaW5kZXggPSBub2RlOwogICAgfSk7CiAgfSwKCiAgYWRkQ2xhc3M6IEpRTGl0ZUFkZENsYXNzLAogIHJlbW92ZUNsYXNzOiBKUUxpdGVSZW1vdmVDbGFzcywKCiAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yLCBjb25kaXRpb24pIHsKICAgIGlmIChpc1VuZGVmaW5lZChjb25kaXRpb24pKSB7CiAgICAgIGNvbmRpdGlvbiA9ICFKUUxpdGVIYXNDbGFzcyhlbGVtZW50LCBzZWxlY3Rvcik7CiAgICB9CiAgICAoY29uZGl0aW9uID8gSlFMaXRlQWRkQ2xhc3MgOiBKUUxpdGVSZW1vdmVDbGFzcykoZWxlbWVudCwgc2VsZWN0b3IpOwogIH0sCgogIHBhcmVudDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7CiAgfSwKCiAgbmV4dDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgcmV0dXJuIGVsZW1lbnQubmV4dFNpYmxpbmc7CiAgfSwKCiAgZmluZDogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IpIHsKICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKTsKICB9LAoKICBjbG9uZTogSlFMaXRlQ2xvbmUKfSwgZnVuY3Rpb24oZm4sIG5hbWUpewogIC8qKgogICAqIGNoYWluaW5nIGZ1bmN0aW9ucwogICAqLwogIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyKSB7CiAgICB2YXIgdmFsdWU7CiAgICBmb3IodmFyIGk9MDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKHZhbHVlID09IHVuZGVmaW5lZCkgewogICAgICAgIHZhbHVlID0gZm4odGhpc1tpXSwgYXJnMSwgYXJnMik7CiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIC8vIGFueSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgbmVlZHMgdG8gYmUgd3JhcHBlZAogICAgICAgICAgdmFsdWUgPSBqcUxpdGUodmFsdWUpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBKUUxpdGVBZGROb2Rlcyh2YWx1ZSwgZm4odGhpc1tpXSwgYXJnMSwgYXJnMikpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gdmFsdWUgPT0gdW5kZWZpbmVkID8gdGhpcyA6IHZhbHVlOwogIH07Cn0pOwoKLyoqCiAqIENvbXB1dGVzIGEgaGFzaCBvZiBhbiAnb2JqJy4KICogSGFzaCBvZiBhOgogKiAgc3RyaW5nIGlzIHN0cmluZwogKiAgbnVtYmVyIGlzIG51bWJlciBhcyBzdHJpbmcKICogIG9iamVjdCBpcyBlaXRoZXIgcmVzdWx0IG9mIGNhbGxpbmcgJCRoYXNoS2V5IGZ1bmN0aW9uIG9uIHRoZSBvYmplY3Qgb3IgdW5pcXVlbHkgZ2VuZXJhdGVkIGlkLAogKiAgICAgICAgIHRoYXQgaXMgYWxzbyBhc3NpZ25lZCB0byB0aGUgJCRoYXNoS2V5IHByb3BlcnR5IG9mIHRoZSBvYmplY3QuCiAqCiAqIEBwYXJhbSBvYmoKICogQHJldHVybnMge3N0cmluZ30gaGFzaCBzdHJpbmcgc3VjaCB0aGF0IHRoZSBzYW1lIGlucHV0IHdpbGwgaGF2ZSB0aGUgc2FtZSBoYXNoIHN0cmluZy4KICogICAgICAgICBUaGUgcmVzdWx0aW5nIHN0cmluZyBrZXkgaXMgaW4gJ3R5cGU6aGFzaEtleScgZm9ybWF0LgogKi8KZnVuY3Rpb24gaGFzaEtleShvYmopIHsKICB2YXIgb2JqVHlwZSA9IHR5cGVvZiBvYmosCiAgICAgIGtleTsKCiAgaWYgKG9ialR5cGUgPT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsKSB7CiAgICBpZiAodHlwZW9mIChrZXkgPSBvYmouJCRoYXNoS2V5KSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgIC8vIG11c3QgaW52b2tlIG9uIG9iamVjdCB0byBrZWVwIHRoZSByaWdodCB0aGlzCiAgICAgIGtleSA9IG9iai4kJGhhc2hLZXkoKTsKICAgIH0gZWxzZSBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHsKICAgICAga2V5ID0gb2JqLiQkaGFzaEtleSA9IG5leHRVaWQoKTsKICAgIH0KICB9IGVsc2UgewogICAga2V5ID0gb2JqOwogIH0KCiAgcmV0dXJuIG9ialR5cGUgKyAnOicgKyBrZXk7Cn0KCi8qKgogKiBIYXNoTWFwIHdoaWNoIGNhbiB1c2Ugb2JqZWN0cyBhcyBrZXlzCiAqLwpmdW5jdGlvbiBIYXNoTWFwKGFycmF5KXsKICBmb3JFYWNoKGFycmF5LCB0aGlzLnB1dCwgdGhpcyk7Cn0KSGFzaE1hcC5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogU3RvcmUga2V5IHZhbHVlIHBhaXIKICAgKiBAcGFyYW0ga2V5IGtleSB0byBzdG9yZSBjYW4gYmUgYW55IHR5cGUKICAgKiBAcGFyYW0gdmFsdWUgdmFsdWUgdG8gc3RvcmUgY2FuIGJlIGFueSB0eXBlCiAgICovCiAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICB0aGlzW2hhc2hLZXkoa2V5KV0gPSB2YWx1ZTsKICB9LAoKICAvKioKICAgKiBAcGFyYW0ga2V5CiAgICogQHJldHVybnMgdGhlIHZhbHVlIGZvciB0aGUga2V5CiAgICovCiAgZ2V0OiBmdW5jdGlvbihrZXkpIHsKICAgIHJldHVybiB0aGlzW2hhc2hLZXkoa2V5KV07CiAgfSwKCiAgLyoqCiAgICogUmVtb3ZlIHRoZSBrZXkvdmFsdWUgcGFpcgogICAqIEBwYXJhbSBrZXkKICAgKi8KICByZW1vdmU6IGZ1bmN0aW9uKGtleSkgewogICAgdmFyIHZhbHVlID0gdGhpc1trZXkgPSBoYXNoS2V5KGtleSldOwogICAgZGVsZXRlIHRoaXNba2V5XTsKICAgIHJldHVybiB2YWx1ZTsKICB9Cn07CgovKioKICogQSBtYXAgd2hlcmUgbXVsdGlwbGUgdmFsdWVzIGNhbiBiZSBhZGRlZCB0byB0aGUgc2FtZSBrZXkgc3VjaCB0aGF0IHRoZXkgZm9ybSBhIHF1ZXVlLgogKiBAcmV0dXJucyB7SGFzaFF1ZXVlTWFwfQogKi8KZnVuY3Rpb24gSGFzaFF1ZXVlTWFwKCkge30KSGFzaFF1ZXVlTWFwLnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBTYW1lIGFzIGFycmF5IHB1c2gsIGJ1dCB1c2luZyBhbiBhcnJheSBhcyB0aGUgdmFsdWUgZm9yIHRoZSBoYXNoCiAgICovCiAgcHVzaDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgdmFyIGFycmF5ID0gdGhpc1trZXkgPSBoYXNoS2V5KGtleSldOwogICAgaWYgKCFhcnJheSkgewogICAgICB0aGlzW2tleV0gPSBbdmFsdWVdOwogICAgfSBlbHNlIHsKICAgICAgYXJyYXkucHVzaCh2YWx1ZSk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogU2FtZSBhcyBhcnJheSBzaGlmdCwgYnV0IHVzaW5nIGFuIGFycmF5IGFzIHRoZSB2YWx1ZSBmb3IgdGhlIGhhc2gKICAgKi8KICBzaGlmdDogZnVuY3Rpb24oa2V5KSB7CiAgICB2YXIgYXJyYXkgPSB0aGlzW2tleSA9IGhhc2hLZXkoa2V5KV07CiAgICBpZiAoYXJyYXkpIHsKICAgICAgaWYgKGFycmF5Lmxlbmd0aCA9PSAxKSB7CiAgICAgICAgZGVsZXRlIHRoaXNba2V5XTsKICAgICAgICByZXR1cm4gYXJyYXlbMF07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGFycmF5LnNoaWZ0KCk7CiAgICAgIH0KICAgIH0KICB9Cn07CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaW5qZWN0b3IKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBDcmVhdGVzIGFuIGluamVjdG9yIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgZm9yIHJldHJpZXZpbmcgc2VydmljZXMgYXMgd2VsbCBhcyBmb3IKICogZGVwZW5kZW5jeSBpbmplY3Rpb24gKHNlZSB7QGxpbmsgZ3VpZGUvZGkgZGVwZW5kZW5jeSBpbmplY3Rpb259KS4KICoKCiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IG1vZHVsZXMgQSBsaXN0IG9mIG1vZHVsZSBmdW5jdGlvbnMgb3IgdGhlaXIgYWxpYXNlcy4gU2VlCiAqICAgICAgICB7QGxpbmsgYW5ndWxhci5tb2R1bGV9LiBUaGUgYG5nYCBtb2R1bGUgbXVzdCBiZSBleHBsaWNpdGx5IGFkZGVkLgogKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gSW5qZWN0b3IgZnVuY3Rpb24uIFNlZSB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfS4KICoKICogQGV4YW1wbGUKICogVHlwaWNhbCB1c2FnZQogKiA8cHJlPgogKiAgIC8vIGNyZWF0ZSBhbiBpbmplY3RvcgogKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKFsnbmcnXSk7CiAqCiAqICAgLy8gdXNlIHRoZSBpbmplY3RvciB0byBraWNrIG9mIHlvdXIgYXBwbGljYXRpb24KICogICAvLyB1c2UgdGhlIHR5cGUgaW5mZXJlbmNlIHRvIGF1dG8gaW5qZWN0IGFyZ3VtZW50cywgb3IgdXNlIGltcGxpY2l0IGluamVjdGlvbgogKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJHJvb3RTY29wZSwgJGNvbXBpbGUsICRkb2N1bWVudCl7CiAqICAgICAkY29tcGlsZSgkZG9jdW1lbnQpKCRyb290U2NvcGUpOwogKiAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7CiAqICAgfSk7CiAqIDwvcHJlPgogKi8KCgovKioKICogQG5nZG9jIG92ZXJ2aWV3CiAqIEBuYW1lIEFVVE8KICogQGRlc2NyaXB0aW9uCiAqCiAqIEltcGxpY2l0IG1vZHVsZSB3aGljaCBnZXRzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gZWFjaCB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfS4KICovCgp2YXIgRk5fQVJHUyA9IC9eZnVuY3Rpb25ccypbXlwoXSpcKFxzKihbXlwpXSopXCkvbTsKdmFyIEZOX0FSR19TUExJVCA9IC8sLzsKdmFyIEZOX0FSRyA9IC9eXHMqKF8/KSguKz8pXDFccyokLzsKdmFyIFNUUklQX0NPTU1FTlRTID0gLygoXC9cLy4qJCl8KFwvXCpbXHNcU10qP1wqXC8pKS9tZzsKZnVuY3Rpb24gYW5ub3RhdGUoZm4pIHsKICB2YXIgJGluamVjdCwKICAgICAgZm5UZXh0LAogICAgICBhcmdEZWNsLAogICAgICBsYXN0OwoKICBpZiAodHlwZW9mIGZuID09ICdmdW5jdGlvbicpIHsKICAgIGlmICghKCRpbmplY3QgPSBmbi4kaW5qZWN0KSkgewogICAgICAkaW5qZWN0ID0gW107CiAgICAgIGZuVGV4dCA9IGZuLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgJycpOwogICAgICBhcmdEZWNsID0gZm5UZXh0Lm1hdGNoKEZOX0FSR1MpOwogICAgICBmb3JFYWNoKGFyZ0RlY2xbMV0uc3BsaXQoRk5fQVJHX1NQTElUKSwgZnVuY3Rpb24oYXJnKXsKICAgICAgICBhcmcucmVwbGFjZShGTl9BUkcsIGZ1bmN0aW9uKGFsbCwgdW5kZXJzY29yZSwgbmFtZSl7CiAgICAgICAgICAkaW5qZWN0LnB1c2gobmFtZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICBmbi4kaW5qZWN0ID0gJGluamVjdDsKICAgIH0KICB9IGVsc2UgaWYgKGlzQXJyYXkoZm4pKSB7CiAgICBsYXN0ID0gZm4ubGVuZ3RoIC0gMTsKICAgIGFzc2VydEFyZ0ZuKGZuW2xhc3RdLCAnZm4nKQogICAgJGluamVjdCA9IGZuLnNsaWNlKDAsIGxhc3QpOwogIH0gZWxzZSB7CiAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJywgdHJ1ZSk7CiAgfQogIHJldHVybiAkaW5qZWN0Owp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIEFVVE8uJGluamVjdG9yCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICoKICogYCRpbmplY3RvcmAgaXMgdXNlZCB0byByZXRyaWV2ZSBvYmplY3QgaW5zdGFuY2VzIGFzIGRlZmluZWQgYnkKICoge0BsaW5rIEFVVE8uJHByb3ZpZGUgcHJvdmlkZXJ9LCBpbnN0YW50aWF0ZSB0eXBlcywgaW52b2tlIG1ldGhvZHMsCiAqIGFuZCBsb2FkIG1vZHVsZXMuCiAqCiAqIFRoZSBmb2xsb3dpbmcgYWx3YXlzIGhvbGRzIHRydWU6CiAqCiAqIDxwcmU+CiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoKTsKICogICBleHBlY3QoJGluamVjdG9yLmdldCgnJGluamVjdG9yJykpLnRvQmUoJGluamVjdG9yKTsKICogICBleHBlY3QoJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkaW5qZWN0b3IpewogKiAgICAgcmV0dXJuICRpbmplY3RvcjsKICogICB9KS50b0JlKCRpbmplY3Rvcik7CiAqIDwvcHJlPgogKgogKiAjIEluamVjdGlvbiBGdW5jdGlvbiBBbm5vdGF0aW9uCiAqCiAqIEphdmFTY3JpcHQgZG9lcyBub3QgaGF2ZSBhbm5vdGF0aW9ucywgYW5kIGFubm90YXRpb25zIGFyZSBuZWVkZWQgZm9yIGRlcGVuZGVuY3kgaW5qZWN0aW9uLiBUaGUKICogZm9sbG93aW5nIHdheXMgYXJlIGFsbCB2YWxpZCB3YXkgb2YgYW5ub3RhdGluZyBmdW5jdGlvbiB3aXRoIGluamVjdGlvbiBhcmd1bWVudHMgYW5kIGFyZSBlcXVpdmFsZW50LgogKgogKiA8cHJlPgogKiAgIC8vIGluZmVycmVkIChvbmx5IHdvcmtzIGlmIGNvZGUgbm90IG1pbmlmaWVkL29iZnVzY2F0ZWQpCiAqICAgJGluamVjdC5pbnZva2UoZnVuY3Rpb24oc2VydmljZUEpe30pOwogKgogKiAgIC8vIGFubm90YXRlZAogKiAgIGZ1bmN0aW9uIGV4cGxpY2l0KHNlcnZpY2VBKSB7fTsKICogICBleHBsaWNpdC4kaW5qZWN0ID0gWydzZXJ2aWNlQSddOwogKiAgICRpbmplY3QuaW52b2tlKGV4cGxpY2l0KTsKICoKICogICAvLyBpbmxpbmUKICogICAkaW5qZWN0Lmludm9rZShbJ3NlcnZpY2VBJywgZnVuY3Rpb24oc2VydmljZUEpe31dKTsKICogPC9wcmU+CiAqCiAqICMjIEluZmVyZW5jZQogKgogKiBJbiBKYXZhU2NyaXB0IGNhbGxpbmcgYHRvU3RyaW5nKClgIG9uIGEgZnVuY3Rpb24gcmV0dXJucyB0aGUgZnVuY3Rpb24gZGVmaW5pdGlvbi4gVGhlIGRlZmluaXRpb24gY2FuIHRoZW4gYmUKICogcGFyc2VkIGFuZCB0aGUgZnVuY3Rpb24gYXJndW1lbnRzIGNhbiBiZSBleHRyYWN0ZWQuICpOT1RFOiogVGhpcyBkb2VzIG5vdCB3b3JrIHdpdGggbWluaWZpY2F0aW9uLCBhbmQgb2JmdXNjYXRpb24KICogdG9vbHMgc2luY2UgdGhlc2UgdG9vbHMgY2hhbmdlIHRoZSBhcmd1bWVudCBuYW1lcy4KICoKICogIyMgYCRpbmplY3RgIEFubm90YXRpb24KICogQnkgYWRkaW5nIGEgYCRpbmplY3RgIHByb3BlcnR5IG9udG8gYSBmdW5jdGlvbiB0aGUgaW5qZWN0aW9uIHBhcmFtZXRlcnMgY2FuIGJlIHNwZWNpZmllZC4KICoKICogIyMgSW5saW5lCiAqIEFzIGFuIGFycmF5IG9mIGluamVjdGlvbiBuYW1lcywgd2hlcmUgdGhlIGxhc3QgaXRlbSBpbiB0aGUgYXJyYXkgaXMgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuCiAqLwoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgQVVUTy4kaW5qZWN0b3IjZ2V0CiAqIEBtZXRob2RPZiBBVVRPLiRpbmplY3RvcgogKgogKiBAZGVzY3JpcHRpb24KICogUmV0dXJuIGFuIGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UgdG8gcmV0cmlldmUuCiAqIEByZXR1cm4geyp9IFRoZSBpbnN0YW5jZS4KICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRpbmplY3RvciNpbnZva2UKICogQG1ldGhvZE9mIEFVVE8uJGluamVjdG9yCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBJbnZva2UgdGhlIG1ldGhvZCBhbmQgc3VwcGx5IHRoZSBtZXRob2QgYXJndW1lbnRzIGZyb20gdGhlIGAkaW5qZWN0b3JgLgogKgogKiBAcGFyYW0geyFmdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGludm9rZS4gVGhlIGZ1bmN0aW9uIGFyZ3VtZW50cyBjb21lIGZvcm0gdGhlIGZ1bmN0aW9uIGFubm90YXRpb24uCiAqIEBwYXJhbSB7T2JqZWN0PX0gc2VsZiBUaGUgYHRoaXNgIGZvciB0aGUgaW52b2tlZCBtZXRob2QuCiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpcyBvYmplY3QgZmlyc3QsIGJlZm9yZQogKiAgIHRoZSBgJGluamVjdG9yYCBpcyBjb25zdWx0ZWQuCiAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgcmV0dXJuZWQgYnkgdGhlIGludm9rZWQgYGZuYCBmdW5jdGlvbi4KICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRpbmplY3RvciNpbnN0YW50aWF0ZQogKiBAbWV0aG9kT2YgQVVUTy4kaW5qZWN0b3IKICogQGRlc2NyaXB0aW9uCiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBKUyB0eXBlLiBUaGUgbWV0aG9kIHRha2VzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gaW52b2tlcyB0aGUgbmV3IG9wZXJhdG9yIGFuZCBzdXBwbGllcwogKiBhbGwgb2YgdGhlIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gYXMgc3BlY2lmaWVkIGJ5IHRoZSBjb25zdHJ1Y3RvciBhbm5vdGF0aW9uLgogKgogKiBAcGFyYW0ge2Z1bmN0aW9ufSBUeXBlIEFubm90YXRlZCBjb25zdHJ1Y3RvciBmdW5jdGlvbi4KICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzIG9iamVjdCBmaXJzdCwgYmVmb3JlCiAqICAgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC4KICogQHJldHVybnMge09iamVjdH0gbmV3IGluc3RhbmNlIG9mIGBUeXBlYC4KICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRpbmplY3RvciNhbm5vdGF0ZQogKiBAbWV0aG9kT2YgQVVUTy4kaW5qZWN0b3IKICoKICogQGRlc2NyaXB0aW9uCiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VydmljZSBuYW1lcyB3aGljaCB0aGUgZnVuY3Rpb24gaXMgcmVxdWVzdGluZyBmb3IgaW5qZWN0aW9uLiBUaGlzIEFQSSBpcyB1c2VkIGJ5IHRoZSBpbmplY3RvcgogKiB0byBkZXRlcm1pbmUgd2hpY2ggc2VydmljZXMgbmVlZCB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBmdW5jdGlvbiB3aGVuIHRoZSBmdW5jdGlvbiBpcyBpbnZva2VkLiBUaGVyZSBhcmUgdGhyZWUKICogd2F5cyBpbiB3aGljaCB0aGUgZnVuY3Rpb24gY2FuIGJlIGFubm90YXRlZCB3aXRoIHRoZSBuZWVkZWQgZGVwZW5kZW5jaWVzLgogKgogKiAjIEFyZ3VtZW50IG5hbWVzCiAqCiAqIFRoZSBzaW1wbGVzdCBmb3JtIGlzIHRvIGV4dHJhY3QgdGhlIGRlcGVuZGVuY2llcyBmcm9tIHRoZSBhcmd1bWVudHMgb2YgdGhlIGZ1bmN0aW9uLiBUaGlzIGlzIGRvbmUgYnkgY29udmVydGluZwogKiB0aGUgZnVuY3Rpb24gaW50byBhIHN0cmluZyB1c2luZyBgdG9TdHJpbmcoKWAgbWV0aG9kIGFuZCBleHRyYWN0aW5nIHRoZSBhcmd1bWVudCBuYW1lcy4KICogPHByZT4KICogICAvLyBHaXZlbgogKiAgIGZ1bmN0aW9uIE15Q29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSkgewogKiAgICAgLy8gLi4uCiAqICAgfQogKgogKiAgIC8vIFRoZW4KICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7CiAqIDwvcHJlPgogKgogKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCB3b3JrIHdpdGggY29kZSBtaW5maWNhdGlvbiAvIG9iZnVzY2F0aW9uLiBGb3IgdGhpcyByZWFzb24gdGhlIGZvbGxvd2luZyBhbm5vdGF0aW9uIHN0cmF0ZWdpZXMKICogYXJlIHN1cHBvcnRlZC4KICoKICogIyBUaGUgYCRpbmplY3RvcmAgcHJvcGVydHkKICoKICogSWYgYSBmdW5jdGlvbiBoYXMgYW4gYCRpbmplY3RgIHByb3BlcnR5IGFuZCBpdHMgdmFsdWUgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgdGhlbiB0aGUgc3RyaW5ncyByZXByZXNlbnQgbmFtZXMgb2YKICogc2VydmljZXMgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24uCiAqIDxwcmU+CiAqICAgLy8gR2l2ZW4KICogICB2YXIgTXlDb250cm9sbGVyID0gZnVuY3Rpb24ob2JmdXNjYXRlZFNjb3BlLCBvYmZ1c2NhdGVkUm91dGUpIHsKICogICAgIC8vIC4uLgogKiAgIH0KICogICAvLyBEZWZpbmUgZnVuY3Rpb24gZGVwZW5kZW5jaWVzCiAqICAgTXlDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckcm91dGUnXTsKICoKICogICAvLyBUaGVuCiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKE15Q29udHJvbGxlcikpLnRvRXF1YWwoWyckc2NvcGUnLCAnJHJvdXRlJ10pOwogKiA8L3ByZT4KICoKICogIyBUaGUgYXJyYXkgbm90YXRpb24KICoKICogSXQgaXMgb2Z0ZW4gZGVzaXJhYmxlIHRvIGlubGluZSBJbmplY3RlZCBmdW5jdGlvbnMgYW5kIHRoYXQncyB3aGVuIHNldHRpbmcgdGhlIGAkaW5qZWN0YCBwcm9wZXJ0eSBpcyB2ZXJ5CiAqIGluY29udmVuaWVudC4gSW4gdGhlc2Ugc2l0dWF0aW9ucyB1c2luZyB0aGUgYXJyYXkgbm90YXRpb24gdG8gc3BlY2lmeSB0aGUgZGVwZW5kZW5jaWVzIGluIGEgd2F5IHRoYXQgc3Vydml2ZXMKICogbWluaWZpY2F0aW9uIGlzIGEgYmV0dGVyIGNob2ljZToKICoKICogPHByZT4KICogICAvLyBXZSB3aXNoIHRvIHdyaXRlIHRoaXMgKG5vdCBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbiBzYWZlKQogKiAgIGluamVjdG9yLmludm9rZShmdW5jdGlvbigkY29tcGlsZSwgJHJvb3RTY29wZSkgewogKiAgICAgLy8gLi4uCiAqICAgfSk7CiAqCiAqICAgLy8gV2UgYXJlIGZvcmNlZCB0byB3cml0ZSBicmVhayBpbmxpbmluZwogKiAgIHZhciB0bXBGbiA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRDb21waWxlLCBvYmZ1c2NhdGVkUm9vdFNjb3BlKSB7CiAqICAgICAvLyAuLi4KICogICB9OwogKiAgIHRtcEZuLiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRyb290U2NvcGUnXTsKICogICBpbmplY3Rvci5pbnZva2UodGVtcEZuKTsKICoKICogICAvLyBUbyBiZXR0ZXIgc3VwcG9ydCBpbmxpbmUgZnVuY3Rpb24gdGhlIGlubGluZSBhbm5vdGF0aW9uIGlzIHN1cHBvcnRlZAogKiAgIGluamVjdG9yLmludm9rZShbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZDb21waWxlLCBvYmZSb290U2NvcGUpIHsKICogICAgIC8vIC4uLgogKiAgIH1dKTsKICoKICogICAvLyBUaGVyZWZvcmUKICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoCiAqICAgICAgWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmdXNfJGNvbXBpbGUsIG9iZnVzXyRyb290U2NvcGUpIHt9XSkKICogICAgKS50b0VxdWFsKFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZSddKTsKICogPC9wcmU+CiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IGZuIEZ1bmN0aW9uIGZvciB3aGljaCBkZXBlbmRlbnQgc2VydmljZSBuYW1lcyBuZWVkIHRvIGJlIHJldHJpZXZlZCBhcyBkZXNjcmliZWQKICogICBhYm92ZS4KICoKICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBUaGUgbmFtZXMgb2YgdGhlIHNlcnZpY2VzIHdoaWNoIHRoZSBmdW5jdGlvbiByZXF1aXJlcy4KICovCgoKCgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBBVVRPLiRwcm92aWRlCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBVc2UgYCRwcm92aWRlYCB0byByZWdpc3RlciBuZXcgcHJvdmlkZXJzIHdpdGggdGhlIGAkaW5qZWN0b3JgLiBUaGUgcHJvdmlkZXJzIGFyZSB0aGUgZmFjdG9yaWVzIGZvciB0aGUgaW5zdGFuY2UuCiAqIFRoZSBwcm92aWRlcnMgc2hhcmUgdGhlIHNhbWUgbmFtZSBhcyB0aGUgaW5zdGFuY2UgdGhleSBjcmVhdGUgd2l0aCB0aGUgYFByb3ZpZGVyYCBzdWZmaXhlZCB0byB0aGVtLgogKgogKiBBIHByb3ZpZGVyIGlzIGFuIG9iamVjdCB3aXRoIGEgYCRnZXQoKWAgbWV0aG9kLiBUaGUgaW5qZWN0b3IgY2FsbHMgdGhlIGAkZ2V0YCBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mCiAqIGEgc2VydmljZS4gVGhlIFByb3ZpZGVyIGNhbiBoYXZlIGFkZGl0aW9uYWwgbWV0aG9kcyB3aGljaCB3b3VsZCBhbGxvdyBmb3IgY29uZmlndXJhdGlvbiBvZiB0aGUgcHJvdmlkZXIuCiAqCiAqIDxwcmU+CiAqICAgZnVuY3Rpb24gR3JlZXRQcm92aWRlcigpIHsKICogICAgIHZhciBzYWx1dGF0aW9uID0gJ0hlbGxvJzsKICoKICogICAgIHRoaXMuc2FsdXRhdGlvbiA9IGZ1bmN0aW9uKHRleHQpIHsKICogICAgICAgc2FsdXRhdGlvbiA9IHRleHQ7CiAqICAgICB9OwogKgogKiAgICAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7CiAqICAgICAgIHJldHVybiBmdW5jdGlvbiAobmFtZSkgewogKiAgICAgICAgIHJldHVybiBzYWx1dGF0aW9uICsgJyAnICsgbmFtZSArICchJzsKICogICAgICAgfTsKICogICAgIH07CiAqICAgfQogKgogKiAgIGRlc2NyaWJlKCdHcmVldGVyJywgZnVuY3Rpb24oKXsKICoKICogICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKCRwcm92aWRlKSB7CiAqICAgICAgICRwcm92aWRlLnByb3ZpZGVyKCdncmVldCcsIEdyZWV0UHJvdmlkZXIpOwogKiAgICAgfSk7CiAqCiAqICAgICBpdCgnc2hvdWxkIGdyZWV0JywgaW5qZWN0KGZ1bmN0aW9uKGdyZWV0KSB7CiAqICAgICAgIGV4cGVjdChncmVldCgnYW5ndWxhcicpKS50b0VxdWFsKCdIZWxsbyBhbmd1bGFyIScpOwogKiAgICAgfSkpOwogKgogKiAgICAgaXQoJ3Nob3VsZCBhbGxvdyBjb25maWd1cmF0aW9uIG9mIHNhbHV0YXRpb24nLCBmdW5jdGlvbigpIHsKICogICAgICAgbW9kdWxlKGZ1bmN0aW9uKGdyZWV0UHJvdmlkZXIpIHsKICogICAgICAgICBncmVldFByb3ZpZGVyLnNhbHV0YXRpb24oJ0Fob2onKTsKICogICAgICAgfSk7CiAqICAgICAgIGluamVjdChmdW5jdGlvbihncmVldCkgewogKiAgICAgICAgIGV4cGVjdChncmVldCgnYW5ndWxhcicpKS50b0VxdWFsKCdBaG9qIGFuZ3VsYXIhJyk7CiAqICAgICAgIH0pOwogKiAgICAgKX07CiAqCiAqICAgfSk7CiAqIDwvcHJlPgogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIEFVVE8uJHByb3ZpZGUjcHJvdmlkZXIKICogQG1ldGhvZE9mIEFVVE8uJHByb3ZpZGUKICogQGRlc2NyaXB0aW9uCiAqCiAqIFJlZ2lzdGVyIGEgcHJvdmlkZXIgZm9yIGEgc2VydmljZS4gVGhlIHByb3ZpZGVycyBjYW4gYmUgcmV0cmlldmVkIGFuZCBjYW4gaGF2ZSBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gbWV0aG9kcy4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLiBOT1RFOiB0aGUgcHJvdmlkZXIgd2lsbCBiZSBhdmFpbGFibGUgdW5kZXIgYG5hbWUgKyAnUHJvdmlkZXInYCBrZXkuCiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbigpKX0gcHJvdmlkZXIgSWYgdGhlIHByb3ZpZGVyIGlzOgogKgogKiAgIC0gYE9iamVjdGA6IHRoZW4gaXQgc2hvdWxkIGhhdmUgYSBgJGdldGAgbWV0aG9kLiBUaGUgYCRnZXRgIG1ldGhvZCB3aWxsIGJlIGludm9rZWQgdXNpbmcKICogICAgICAgICAgICAgICB7QGxpbmsgQVVUTy4kaW5qZWN0b3IjaW52b2tlICRpbmplY3Rvci5pbnZva2UoKX0gd2hlbiBhbiBpbnN0YW5jZSBuZWVkcyB0byBiZSBjcmVhdGVkLgogKiAgIC0gYENvbnN0cnVjdG9yYDogYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHByb3ZpZGVyIHdpbGwgYmUgY3JlYXRlZCB1c2luZwogKiAgICAgICAgICAgICAgIHtAbGluayBBVVRPLiRpbmplY3RvciNpbnN0YW50aWF0ZSAkaW5qZWN0b3IuaW5zdGFudGlhdGUoKX0sIHRoZW4gdHJlYXRlZCBhcyBgb2JqZWN0YC4KICoKICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZQogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIEFVVE8uJHByb3ZpZGUjZmFjdG9yeQogKiBAbWV0aG9kT2YgQVVUTy4kcHJvdmlkZQogKiBAZGVzY3JpcHRpb24KICoKICogQSBzaG9ydCBoYW5kIGZvciBjb25maWd1cmluZyBzZXJ2aWNlcyBpZiBvbmx5IGAkZ2V0YCBtZXRob2QgaXMgcmVxdWlyZWQuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS4KICogQHBhcmFtIHtmdW5jdGlvbigpfSAkZ2V0Rm4gVGhlICRnZXRGbiBmb3IgdGhlIGluc3RhbmNlIGNyZWF0aW9uLiBJbnRlcm5hbGx5IHRoaXMgaXMgYSBzaG9ydCBoYW5kIGZvcgogKiBgJHByb3ZpZGUucHJvdmlkZXIobmFtZSwgeyRnZXQ6ICRnZXRGbn0pYC4KICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZQogKi8KCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRwcm92aWRlI3NlcnZpY2UKICogQG1ldGhvZE9mIEFVVE8uJHByb3ZpZGUKICogQGRlc2NyaXB0aW9uCiAqCiAqIEEgc2hvcnQgaGFuZCBmb3IgcmVnaXN0ZXJpbmcgc2VydmljZSBvZiBnaXZlbiBjbGFzcy4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBBIGNsYXNzIChjb25zdHJ1Y3RvciBmdW5jdGlvbikgdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC4KICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZQogKi8KCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRwcm92aWRlI3ZhbHVlCiAqIEBtZXRob2RPZiBBVVRPLiRwcm92aWRlCiAqIEBkZXNjcmlwdGlvbgogKgogKiBBIHNob3J0IGhhbmQgZm9yIGNvbmZpZ3VyaW5nIHNlcnZpY2VzIGlmIHRoZSBgJGdldGAgbWV0aG9kIGlzIGEgY29uc3RhbnQuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS4KICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUuCiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2UKICovCgoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgQVVUTy4kcHJvdmlkZSNjb25zdGFudAogKiBAbWV0aG9kT2YgQVVUTy4kcHJvdmlkZQogKiBAZGVzY3JpcHRpb24KICoKICogQSBjb25zdGFudCB2YWx1ZSwgYnV0IHVubGlrZSB7QGxpbmsgQVVUTy4kcHJvdmlkZSN2YWx1ZSB2YWx1ZX0gaXQgY2FuIGJlIGluamVjdGVkCiAqIGludG8gY29uZmlndXJhdGlvbiBmdW5jdGlvbiAob3RoZXIgbW9kdWxlcykgYW5kIGl0IGlzIG5vdCBpbnRlcmNlcHRhYmxlIGJ5CiAqIHtAbGluayBBVVRPLiRwcm92aWRlI2RlY29yYXRvciBkZWNvcmF0b3J9LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgY29uc3RhbnQuCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIGNvbnN0YW50IHZhbHVlLgogKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIGluc3RhbmNlCiAqLwoKCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIEFVVE8uJHByb3ZpZGUjZGVjb3JhdG9yCiAqIEBtZXRob2RPZiBBVVRPLiRwcm92aWRlCiAqIEBkZXNjcmlwdGlvbgogKgogKiBEZWNvcmF0aW9uIG9mIHNlcnZpY2UsIGFsbG93cyB0aGUgZGVjb3JhdG9yIHRvIGludGVyY2VwdCB0aGUgc2VydmljZSBpbnN0YW5jZSBjcmVhdGlvbi4gVGhlCiAqIHJldHVybmVkIGluc3RhbmNlIG1heSBiZSB0aGUgb3JpZ2luYWwgaW5zdGFuY2UsIG9yIGEgbmV3IGluc3RhbmNlIHdoaWNoIGRlbGVnYXRlcyB0byB0aGUKICogb3JpZ2luYWwgaW5zdGFuY2UuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIGRlY29yYXRlLgogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGRlY29yYXRvciBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBzZXJ2aWNlIG5lZWRzIHRvIGJlCiAqICAgIGluc3RhbmNpYXRlZC4gVGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCB1c2luZyB0aGUge0BsaW5rIEFVVE8uJGluamVjdG9yI2ludm9rZQogKiAgICBpbmplY3Rvci5pbnZva2V9IG1ldGhvZCBhbmQgaXMgdGhlcmVmb3JlIGZ1bGx5IGluamVjdGFibGUuIExvY2FsIGluamVjdGlvbiBhcmd1bWVudHM6CiAqCiAqICAgICogYCRkZWxlZ2F0ZWAgLSBUaGUgb3JpZ2luYWwgc2VydmljZSBpbnN0YW5jZSwgd2hpY2ggY2FuIGJlIG1vbmtleSBwYXRjaGVkLCBjb25maWd1cmVkLAogKiAgICAgIGRlY29yYXRlZCBvciBkZWxlZ2F0ZWQgdG8uCiAqLwoKCmZ1bmN0aW9uIGNyZWF0ZUluamVjdG9yKG1vZHVsZXNUb0xvYWQpIHsKICB2YXIgSU5TVEFOVElBVElORyA9IHt9LAogICAgICBwcm92aWRlclN1ZmZpeCA9ICdQcm92aWRlcicsCiAgICAgIHBhdGggPSBbXSwKICAgICAgbG9hZGVkTW9kdWxlcyA9IG5ldyBIYXNoTWFwKCksCiAgICAgIHByb3ZpZGVyQ2FjaGUgPSB7CiAgICAgICAgJHByb3ZpZGU6IHsKICAgICAgICAgICAgcHJvdmlkZXI6IHN1cHBvcnRPYmplY3QocHJvdmlkZXIpLAogICAgICAgICAgICBmYWN0b3J5OiBzdXBwb3J0T2JqZWN0KGZhY3RvcnkpLAogICAgICAgICAgICBzZXJ2aWNlOiBzdXBwb3J0T2JqZWN0KHNlcnZpY2UpLAogICAgICAgICAgICB2YWx1ZTogc3VwcG9ydE9iamVjdCh2YWx1ZSksCiAgICAgICAgICAgIGNvbnN0YW50OiBzdXBwb3J0T2JqZWN0KGNvbnN0YW50KSwKICAgICAgICAgICAgZGVjb3JhdG9yOiBkZWNvcmF0b3IKICAgICAgICAgIH0KICAgICAgfSwKICAgICAgcHJvdmlkZXJJbmplY3RvciA9IGNyZWF0ZUludGVybmFsSW5qZWN0b3IocHJvdmlkZXJDYWNoZSwgZnVuY3Rpb24oKSB7CiAgICAgICAgdGhyb3cgRXJyb3IoIlVua25vd24gcHJvdmlkZXI6ICIgKyBwYXRoLmpvaW4oJyA8LSAnKSk7CiAgICAgIH0pLAogICAgICBpbnN0YW5jZUNhY2hlID0ge30sCiAgICAgIGluc3RhbmNlSW5qZWN0b3IgPSAoaW5zdGFuY2VDYWNoZS4kaW5qZWN0b3IgPQogICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3RvcihpbnN0YW5jZUNhY2hlLCBmdW5jdGlvbihzZXJ2aWNlbmFtZSkgewogICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlbmFtZSArIHByb3ZpZGVyU3VmZml4KTsKICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKHByb3ZpZGVyLiRnZXQsIHByb3ZpZGVyKTsKICAgICAgICAgIH0pKTsKCgogIGZvckVhY2gobG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCksIGZ1bmN0aW9uKGZuKSB7IGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGZuIHx8IG5vb3ApOyB9KTsKCiAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3I7CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vICRwcm92aWRlcgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICBmdW5jdGlvbiBzdXBwb3J0T2JqZWN0KGRlbGVnYXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgICBpZiAoaXNPYmplY3Qoa2V5KSkgewogICAgICAgIGZvckVhY2goa2V5LCByZXZlcnNlUGFyYW1zKGRlbGVnYXRlKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGRlbGVnYXRlKGtleSwgdmFsdWUpOwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBwcm92aWRlcihuYW1lLCBwcm92aWRlcl8pIHsKICAgIGlmIChpc0Z1bmN0aW9uKHByb3ZpZGVyXykpIHsKICAgICAgcHJvdmlkZXJfID0gcHJvdmlkZXJJbmplY3Rvci5pbnN0YW50aWF0ZShwcm92aWRlcl8pOwogICAgfQogICAgaWYgKCFwcm92aWRlcl8uJGdldCkgewogICAgICB0aHJvdyBFcnJvcignUHJvdmlkZXIgJyArIG5hbWUgKyAnIG11c3QgZGVmaW5lICRnZXQgZmFjdG9yeSBtZXRob2QuJyk7CiAgICB9CiAgICByZXR1cm4gcHJvdmlkZXJDYWNoZVtuYW1lICsgcHJvdmlkZXJTdWZmaXhdID0gcHJvdmlkZXJfOwogIH0KCiAgZnVuY3Rpb24gZmFjdG9yeShuYW1lLCBmYWN0b3J5Rm4pIHsgcmV0dXJuIHByb3ZpZGVyKG5hbWUsIHsgJGdldDogZmFjdG9yeUZuIH0pOyB9CgogIGZ1bmN0aW9uIHNlcnZpY2UobmFtZSwgY29uc3RydWN0b3IpIHsKICAgIHJldHVybiBmYWN0b3J5KG5hbWUsIFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7CiAgICAgIHJldHVybiAkaW5qZWN0b3IuaW5zdGFudGlhdGUoY29uc3RydWN0b3IpOwogICAgfV0pOwogIH0KCiAgZnVuY3Rpb24gdmFsdWUobmFtZSwgdmFsdWUpIHsgcmV0dXJuIGZhY3RvcnkobmFtZSwgdmFsdWVGbih2YWx1ZSkpOyB9CgogIGZ1bmN0aW9uIGNvbnN0YW50KG5hbWUsIHZhbHVlKSB7CiAgICBwcm92aWRlckNhY2hlW25hbWVdID0gdmFsdWU7CiAgICBpbnN0YW5jZUNhY2hlW25hbWVdID0gdmFsdWU7CiAgfQoKICBmdW5jdGlvbiBkZWNvcmF0b3Ioc2VydmljZU5hbWUsIGRlY29yRm4pIHsKICAgIHZhciBvcmlnUHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4KSwKICAgICAgICBvcmlnJGdldCA9IG9yaWdQcm92aWRlci4kZ2V0OwoKICAgIG9yaWdQcm92aWRlci4kZ2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBvcmlnSW5zdGFuY2UgPSBpbnN0YW5jZUluamVjdG9yLmludm9rZShvcmlnJGdldCwgb3JpZ1Byb3ZpZGVyKTsKICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGRlY29yRm4sIG51bGwsIHskZGVsZWdhdGU6IG9yaWdJbnN0YW5jZX0pOwogICAgfTsKICB9CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIE1vZHVsZSBMb2FkaW5nCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgZnVuY3Rpb24gbG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCl7CiAgICB2YXIgcnVuQmxvY2tzID0gW107CiAgICBmb3JFYWNoKG1vZHVsZXNUb0xvYWQsIGZ1bmN0aW9uKG1vZHVsZSkgewogICAgICBpZiAobG9hZGVkTW9kdWxlcy5nZXQobW9kdWxlKSkgcmV0dXJuOwogICAgICBsb2FkZWRNb2R1bGVzLnB1dChtb2R1bGUsIHRydWUpOwogICAgICBpZiAoaXNTdHJpbmcobW9kdWxlKSkgewogICAgICAgIHZhciBtb2R1bGVGbiA9IGFuZ3VsYXJNb2R1bGUobW9kdWxlKTsKICAgICAgICBydW5CbG9ja3MgPSBydW5CbG9ja3MuY29uY2F0KGxvYWRNb2R1bGVzKG1vZHVsZUZuLnJlcXVpcmVzKSkuY29uY2F0KG1vZHVsZUZuLl9ydW5CbG9ja3MpOwoKICAgICAgICB0cnkgewogICAgICAgICAgZm9yKHZhciBpbnZva2VRdWV1ZSA9IG1vZHVsZUZuLl9pbnZva2VRdWV1ZSwgaSA9IDAsIGlpID0gaW52b2tlUXVldWUubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgICB2YXIgaW52b2tlQXJncyA9IGludm9rZVF1ZXVlW2ldLAogICAgICAgICAgICAgICAgcHJvdmlkZXIgPSBpbnZva2VBcmdzWzBdID09ICckaW5qZWN0b3InCiAgICAgICAgICAgICAgICAgICAgPyBwcm92aWRlckluamVjdG9yCiAgICAgICAgICAgICAgICAgICAgOiBwcm92aWRlckluamVjdG9yLmdldChpbnZva2VBcmdzWzBdKTsKCiAgICAgICAgICAgIHByb3ZpZGVyW2ludm9rZUFyZ3NbMV1dLmFwcGx5KHByb3ZpZGVyLCBpbnZva2VBcmdzWzJdKTsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBpZiAoZS5tZXNzYWdlKSBlLm1lc3NhZ2UgKz0gJyBmcm9tICcgKyBtb2R1bGU7CiAgICAgICAgICB0aHJvdyBlOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKG1vZHVsZSkpIHsKICAgICAgICB0cnkgewogICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgaWYgKGUubWVzc2FnZSkgZS5tZXNzYWdlICs9ICcgZnJvbSAnICsgbW9kdWxlOwogICAgICAgICAgdGhyb3cgZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShtb2R1bGUpKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGlmIChlLm1lc3NhZ2UpIGUubWVzc2FnZSArPSAnIGZyb20gJyArIFN0cmluZyhtb2R1bGVbbW9kdWxlLmxlbmd0aCAtIDFdKTsKICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGFzc2VydEFyZ0ZuKG1vZHVsZSwgJ21vZHVsZScpOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBydW5CbG9ja3M7CiAgfQoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAvLyBpbnRlcm5hbCBJbmplY3RvcgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICBmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbEluamVjdG9yKGNhY2hlLCBmYWN0b3J5KSB7CgogICAgZnVuY3Rpb24gZ2V0U2VydmljZShzZXJ2aWNlTmFtZSkgewogICAgICBpZiAodHlwZW9mIHNlcnZpY2VOYW1lICE9PSAnc3RyaW5nJykgewogICAgICAgIHRocm93IEVycm9yKCdTZXJ2aWNlIG5hbWUgZXhwZWN0ZWQnKTsKICAgICAgfQogICAgICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkoc2VydmljZU5hbWUpKSB7CiAgICAgICAgaWYgKGNhY2hlW3NlcnZpY2VOYW1lXSA9PT0gSU5TVEFOVElBVElORykgewogICAgICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIGRlcGVuZGVuY3k6ICcgKyBwYXRoLmpvaW4oJyA8LSAnKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHBhdGgudW5zaGlmdChzZXJ2aWNlTmFtZSk7CiAgICAgICAgICBjYWNoZVtzZXJ2aWNlTmFtZV0gPSBJTlNUQU5USUFUSU5HOwogICAgICAgICAgcmV0dXJuIGNhY2hlW3NlcnZpY2VOYW1lXSA9IGZhY3Rvcnkoc2VydmljZU5hbWUpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBwYXRoLnNoaWZ0KCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaW52b2tlKGZuLCBzZWxmLCBsb2NhbHMpewogICAgICB2YXIgYXJncyA9IFtdLAogICAgICAgICAgJGluamVjdCA9IGFubm90YXRlKGZuKSwKICAgICAgICAgIGxlbmd0aCwgaSwKICAgICAgICAgIGtleTsKCiAgICAgIGZvcihpID0gMCwgbGVuZ3RoID0gJGluamVjdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgIGtleSA9ICRpbmplY3RbaV07CiAgICAgICAgYXJncy5wdXNoKAogICAgICAgICAgbG9jYWxzICYmIGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShrZXkpCiAgICAgICAgICA/IGxvY2Fsc1trZXldCiAgICAgICAgICA6IGdldFNlcnZpY2Uoa2V5LCBwYXRoKQogICAgICAgICk7CiAgICAgIH0KICAgICAgaWYgKCFmbi4kaW5qZWN0KSB7CiAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IHdlIG11c3QgYmUgYW4gYXJyYXkuCiAgICAgICAgZm4gPSBmbltsZW5ndGhdOwogICAgICB9CgoKICAgICAgLy8gUGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uOiBodHRwOi8vanNwZXJmLmNvbS9hcHBseS12cy1jYWxsLXZzLWludm9rZQogICAgICBzd2l0Y2ggKHNlbGYgPyAtMSA6IGFyZ3MubGVuZ3RoKSB7CiAgICAgICAgY2FzZSAgMDogcmV0dXJuIGZuKCk7CiAgICAgICAgY2FzZSAgMTogcmV0dXJuIGZuKGFyZ3NbMF0pOwogICAgICAgIGNhc2UgIDI6IHJldHVybiBmbihhcmdzWzBdLCBhcmdzWzFdKTsKICAgICAgICBjYXNlICAzOiByZXR1cm4gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7CiAgICAgICAgY2FzZSAgNDogcmV0dXJuIGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pOwogICAgICAgIGNhc2UgIDU6IHJldHVybiBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTsKICAgICAgICBjYXNlICA2OiByZXR1cm4gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7CiAgICAgICAgY2FzZSAgNzogcmV0dXJuIGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pOwogICAgICAgIGNhc2UgIDg6IHJldHVybiBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdLCBhcmdzWzddKTsKICAgICAgICBjYXNlICA5OiByZXR1cm4gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSwgYXJnc1s3XSwgYXJnc1s4XSk7CiAgICAgICAgY2FzZSAxMDogcmV0dXJuIGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0sIGFyZ3NbN10sIGFyZ3NbOF0sIGFyZ3NbOV0pOwogICAgICAgIGRlZmF1bHQ6IHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGluc3RhbnRpYXRlKFR5cGUsIGxvY2FscykgewogICAgICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbigpIHt9LAogICAgICAgICAgaW5zdGFuY2UsIHJldHVybmVkVmFsdWU7CgogICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSAoaXNBcnJheShUeXBlKSA/IFR5cGVbVHlwZS5sZW5ndGggLSAxXSA6IFR5cGUpLnByb3RvdHlwZTsKICAgICAgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsKICAgICAgcmV0dXJuZWRWYWx1ZSA9IGludm9rZShUeXBlLCBpbnN0YW5jZSwgbG9jYWxzKTsKCiAgICAgIHJldHVybiBpc09iamVjdChyZXR1cm5lZFZhbHVlKSA/IHJldHVybmVkVmFsdWUgOiBpbnN0YW5jZTsKICAgIH0KCiAgICByZXR1cm4gewogICAgICBpbnZva2U6IGludm9rZSwKICAgICAgaW5zdGFudGlhdGU6IGluc3RhbnRpYXRlLAogICAgICBnZXQ6IGdldFNlcnZpY2UsCiAgICAgIGFubm90YXRlOiBhbm5vdGF0ZQogICAgfTsKICB9Cn0KLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBuZy4kYW5jaG9yU2Nyb2xsCiAqIEByZXF1aXJlcyAkd2luZG93CiAqIEByZXF1aXJlcyAkbG9jYXRpb24KICogQHJlcXVpcmVzICRyb290U2NvcGUKICoKICogQGRlc2NyaXB0aW9uCiAqIFdoZW4gY2FsbGVkLCBpdCBjaGVja3MgY3VycmVudCB2YWx1ZSBvZiBgJGxvY2F0aW9uLmhhc2goKWAgYW5kIHNjcm9sbCB0byByZWxhdGVkIGVsZW1lbnQsCiAqIGFjY29yZGluZyB0byBydWxlcyBzcGVjaWZpZWQgaW4KICoge0BsaW5rIGh0dHA6Ly9kZXYudzMub3JnL2h0bWw1L3NwZWMvT3ZlcnZpZXcuaHRtbCN0aGUtaW5kaWNhdGVkLXBhcnQtb2YtdGhlLWRvY3VtZW50IEh0bWw1IHNwZWN9LgogKgogKiBJdCBhbHNvIHdhdGNoZXMgdGhlIGAkbG9jYXRpb24uaGFzaCgpYCBhbmQgc2Nyb2xsIHdoZW5ldmVyIGl0IGNoYW5nZXMgdG8gbWF0Y2ggYW55IGFuY2hvci4KICogVGhpcyBjYW4gYmUgZGlzYWJsZWQgYnkgY2FsbGluZyBgJGFuY2hvclNjcm9sbFByb3ZpZGVyLmRpc2FibGVBdXRvU2Nyb2xsaW5nKClgLgogKi8KZnVuY3Rpb24gJEFuY2hvclNjcm9sbFByb3ZpZGVyKCkgewoKICB2YXIgYXV0b1Njcm9sbGluZ0VuYWJsZWQgPSB0cnVlOwoKICB0aGlzLmRpc2FibGVBdXRvU2Nyb2xsaW5nID0gZnVuY3Rpb24oKSB7CiAgICBhdXRvU2Nyb2xsaW5nRW5hYmxlZCA9IGZhbHNlOwogIH07CgogIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCR3aW5kb3csICRsb2NhdGlvbiwgJHJvb3RTY29wZSkgewogICAgdmFyIGRvY3VtZW50ID0gJHdpbmRvdy5kb2N1bWVudDsKCiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGZpcnN0IGFuY2hvciBmcm9tIGEgTm9kZUxpc3QKICAgIC8vIGNhbid0IHVzZSBmaWx0ZXIuZmlsdGVyLCBhcyBpdCBhY2NlcHRzIG9ubHkgaW5zdGFuY2VzIG9mIEFycmF5CiAgICAvLyBhbmQgSUUgY2FuJ3QgY29udmVydCBOb2RlTGlzdCB0byBhbiBhcnJheSB1c2luZyBbXS5zbGljZQogICAgLy8gVE9ETyh2b2p0YSk6IHVzZSBmaWx0ZXIgaWYgd2UgY2hhbmdlIGl0IHRvIGFjY2VwdCBsaXN0cyBhcyB3ZWxsCiAgICBmdW5jdGlvbiBnZXRGaXJzdEFuY2hvcihsaXN0KSB7CiAgICAgIHZhciByZXN1bHQgPSBudWxsOwogICAgICBmb3JFYWNoKGxpc3QsIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICBpZiAoIXJlc3VsdCAmJiBsb3dlcmNhc2UoZWxlbWVudC5ub2RlTmFtZSkgPT09ICdhJykgcmVzdWx0ID0gZWxlbWVudDsKICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgZnVuY3Rpb24gc2Nyb2xsKCkgewogICAgICB2YXIgaGFzaCA9ICRsb2NhdGlvbi5oYXNoKCksIGVsbTsKCiAgICAgIC8vIGVtcHR5IGhhc2gsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlCiAgICAgIGlmICghaGFzaCkgJHdpbmRvdy5zY3JvbGxUbygwLCAwKTsKCiAgICAgIC8vIGVsZW1lbnQgd2l0aCBnaXZlbiBpZAogICAgICBlbHNlIGlmICgoZWxtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaCkpKSBlbG0uc2Nyb2xsSW50b1ZpZXcoKTsKCiAgICAgIC8vIGZpcnN0IGFuY2hvciB3aXRoIGdpdmVuIG5hbWUgOi1ECiAgICAgIGVsc2UgaWYgKChlbG0gPSBnZXRGaXJzdEFuY2hvcihkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShoYXNoKSkpKSBlbG0uc2Nyb2xsSW50b1ZpZXcoKTsKCiAgICAgIC8vIG5vIGVsZW1lbnQgYW5kIGhhc2ggPT0gJ3RvcCcsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlCiAgICAgIGVsc2UgaWYgKGhhc2ggPT09ICd0b3AnKSAkd2luZG93LnNjcm9sbFRvKDAsIDApOwogICAgfQoKICAgIC8vIGRvZXMgbm90IHNjcm9sbCB3aGVuIHVzZXIgY2xpY2tzIG9uIGFuY2hvciBsaW5rIHRoYXQgaXMgY3VycmVudGx5IG9uCiAgICAvLyAobm8gdXJsIGNoYW5nZSwgbm8gJGxvY2FpdG9uLmhhc2goKSBjaGFuZ2UpLCBicm93c2VyIG5hdGl2ZSBkb2VzIHNjcm9sbAogICAgaWYgKGF1dG9TY3JvbGxpbmdFbmFibGVkKSB7CiAgICAgICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkge3JldHVybiAkbG9jYXRpb24uaGFzaCgpO30sIGZ1bmN0aW9uKCkgewogICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhzY3JvbGwpOwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gc2Nyb2xsOwogIH1dOwp9CgovKioKICogISBUaGlzIGlzIGEgcHJpdmF0ZSB1bmRvY3VtZW50ZWQgc2VydmljZSAhCiAqCiAqIEBuYW1lIG5nLiRicm93c2VyCiAqIEByZXF1aXJlcyAkbG9nCiAqIEBkZXNjcmlwdGlvbgogKiBUaGlzIG9iamVjdCBoYXMgdHdvIGdvYWxzOgogKgogKiAtIGhpZGUgYWxsIHRoZSBnbG9iYWwgc3RhdGUgaW4gdGhlIGJyb3dzZXIgY2F1c2VkIGJ5IHRoZSB3aW5kb3cgb2JqZWN0CiAqIC0gYWJzdHJhY3QgYXdheSBhbGwgdGhlIGJyb3dzZXIgc3BlY2lmaWMgZmVhdHVyZXMgYW5kIGluY29uc2lzdGVuY2llcwogKgogKiBGb3IgdGVzdHMgd2UgcHJvdmlkZSB7QGxpbmsgbmdNb2NrLiRicm93c2VyIG1vY2sgaW1wbGVtZW50YXRpb259IG9mIHRoZSBgJGJyb3dzZXJgCiAqIHNlcnZpY2UsIHdoaWNoIGNhbiBiZSB1c2VkIGZvciBjb252ZW5pZW50IHRlc3Rpbmcgb2YgdGhlIGFwcGxpY2F0aW9uIHdpdGhvdXQgdGhlIGludGVyYWN0aW9uIHdpdGgKICogdGhlIHJlYWwgYnJvd3NlciBhcGlzLgogKi8KLyoqCiAqIEBwYXJhbSB7b2JqZWN0fSB3aW5kb3cgVGhlIGdsb2JhbCB3aW5kb3cgb2JqZWN0LgogKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgalF1ZXJ5IHdyYXBwZWQgZG9jdW1lbnQuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gWEhSIFhNTEh0dHBSZXF1ZXN0IGNvbnN0cnVjdG9yLgogKiBAcGFyYW0ge29iamVjdH0gJGxvZyBjb25zb2xlLmxvZyBvciBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBpbnRlcmZhY2UuCiAqIEBwYXJhbSB7b2JqZWN0fSAkc25pZmZlciAkc25pZmZlciBzZXJ2aWNlCiAqLwpmdW5jdGlvbiBCcm93c2VyKHdpbmRvdywgZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKSB7CiAgdmFyIHNlbGYgPSB0aGlzLAogICAgICByYXdEb2N1bWVudCA9IGRvY3VtZW50WzBdLAogICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbiwKICAgICAgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5LAogICAgICBzZXRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQsCiAgICAgIGNsZWFyVGltZW91dCA9IHdpbmRvdy5jbGVhclRpbWVvdXQsCiAgICAgIHBlbmRpbmdEZWZlcklkcyA9IHt9OwoKICBzZWxmLmlzTW9jayA9IGZhbHNlOwoKICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSAwOwogIHZhciBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MgPSBbXTsKCiAgLy8gVE9ETyh2b2p0YSk6IHJlbW92ZSB0aGlzIHRlbXBvcmFyeSBhcGkKICBzZWxmLiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QgPSBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdDsKICBzZWxmLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSBmdW5jdGlvbigpIHsgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKzsgfTsKCiAgLyoqCiAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24oc3VwcG9ydHMgY3VycnlpbmcpIGFuZCBkZWNyZW1lbnRzIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYAogICAqIGNvdW50ZXIuIElmIHRoZSBjb3VudGVyIHJlYWNoZXMgMCwgYWxsIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYCBhcmUgZXhlY3V0ZWQuCiAgICovCiAgZnVuY3Rpb24gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pIHsKICAgIHRyeSB7CiAgICAgIGZuLmFwcGx5KG51bGwsIHNsaWNlQXJncyhhcmd1bWVudHMsIDEpKTsKICAgIH0gZmluYWxseSB7CiAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50LS07CiAgICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkgewogICAgICAgIHdoaWxlKG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5sZW5ndGgpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5wb3AoKSgpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAkbG9nLmVycm9yKGUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgLyoqCiAgICogQHByaXZhdGUKICAgKiBOb3RlOiB0aGlzIG1ldGhvZCBpcyB1c2VkIG9ubHkgYnkgc2NlbmFyaW8gcnVubmVyCiAgICogVE9ETyh2b2p0YSk6IHByZWZpeCB0aGlzIG1ldGhvZCB3aXRoICQkID8KICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiBubyBvdXRzdGFuZGluZyByZXF1ZXN0CiAgICovCiAgc2VsZi5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzID0gZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgIC8vIGZvcmNlIGJyb3dzZXIgdG8gZXhlY3V0ZSBhbGwgcG9sbEZucyAtIHRoaXMgaXMgbmVlZGVkIHNvIHRoYXQgY29va2llcyBhbmQgb3RoZXIgcG9sbGVycyBmaXJlCiAgICAvLyBhdCBzb21lIGRldGVybWluaXN0aWMgdGltZSBpbiByZXNwZWN0IHRvIHRoZSB0ZXN0IHJ1bm5lcidzIGFjdGlvbnMuIExlYXZpbmcgdGhpbmdzIHVwIHRvIHRoZQogICAgLy8gcmVndWxhciBwb2xsZXIgd291bGQgcmVzdWx0IGluIGZsYWt5IHRlc3RzLgogICAgZm9yRWFjaChwb2xsRm5zLCBmdW5jdGlvbihwb2xsRm4peyBwb2xsRm4oKTsgfSk7CgogICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7CiAgICAgIGNhbGxiYWNrKCk7CiAgICB9IGVsc2UgewogICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucHVzaChjYWxsYmFjayk7CiAgICB9CiAgfTsKCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAvLyBQb2xsIFdhdGNoZXIgQVBJCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICB2YXIgcG9sbEZucyA9IFtdLAogICAgICBwb2xsVGltZW91dDsKCiAgLyoqCiAgICogQG5hbWUgbmcuJGJyb3dzZXIjYWRkUG9sbEZuCiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyCiAgICoKICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIFBvbGwgZnVuY3Rpb24gdG8gYWRkCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBBZGRzIGEgZnVuY3Rpb24gdG8gdGhlIGxpc3Qgb2YgZnVuY3Rpb25zIHRoYXQgcG9sbGVyIHBlcmlvZGljYWxseSBleGVjdXRlcywKICAgKiBhbmQgc3RhcnRzIHBvbGxpbmcgaWYgbm90IHN0YXJ0ZWQgeWV0LgogICAqCiAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IHRoZSBhZGRlZCBmdW5jdGlvbgogICAqLwogIHNlbGYuYWRkUG9sbEZuID0gZnVuY3Rpb24oZm4pIHsKICAgIGlmIChpc1VuZGVmaW5lZChwb2xsVGltZW91dCkpIHN0YXJ0UG9sbGVyKDEwMCwgc2V0VGltZW91dCk7CiAgICBwb2xsRm5zLnB1c2goZm4pOwogICAgcmV0dXJuIGZuOwogIH07CgogIC8qKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbCBIb3cgb2Z0ZW4gc2hvdWxkIGJyb3dzZXIgY2FsbCBwb2xsIGZ1bmN0aW9ucyAobXMpCiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBzZXRUaW1lb3V0IFJlZmVyZW5jZSB0byBhIHJlYWwgb3IgZmFrZSBgc2V0VGltZW91dGAgZnVuY3Rpb24uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDb25maWd1cmVzIHRoZSBwb2xsZXIgdG8gcnVuIGluIHRoZSBzcGVjaWZpZWQgaW50ZXJ2YWxzLCB1c2luZyB0aGUgc3BlY2lmaWVkCiAgICogc2V0VGltZW91dCBmbiBhbmQga2lja3MgaXQgb2ZmLgogICAqLwogIGZ1bmN0aW9uIHN0YXJ0UG9sbGVyKGludGVydmFsLCBzZXRUaW1lb3V0KSB7CiAgICAoZnVuY3Rpb24gY2hlY2soKSB7CiAgICAgIGZvckVhY2gocG9sbEZucywgZnVuY3Rpb24ocG9sbEZuKXsgcG9sbEZuKCk7IH0pOwogICAgICBwb2xsVGltZW91dCA9IHNldFRpbWVvdXQoY2hlY2ssIGludGVydmFsKTsKICAgIH0pKCk7CiAgfQoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIFVSTCBBUEkKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICB2YXIgbGFzdEJyb3dzZXJVcmwgPSBsb2NhdGlvbi5ocmVmLAogICAgICBiYXNlRWxlbWVudCA9IGRvY3VtZW50LmZpbmQoJ2Jhc2UnKTsKCiAgLyoqCiAgICogQG5hbWUgbmcuJGJyb3dzZXIjdXJsCiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBHRVRURVI6CiAgICogV2l0aG91dCBhbnkgYXJndW1lbnQsIHRoaXMgbWV0aG9kIGp1c3QgcmV0dXJucyBjdXJyZW50IHZhbHVlIG9mIGxvY2F0aW9uLmhyZWYuCiAgICoKICAgKiBTRVRURVI6CiAgICogV2l0aCBhdCBsZWFzdCBvbmUgYXJndW1lbnQsIHRoaXMgbWV0aG9kIHNldHMgdXJsIHRvIG5ldyB2YWx1ZS4KICAgKiBJZiBodG1sNSBoaXN0b3J5IGFwaSBzdXBwb3J0ZWQsIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUgaXMgdXNlZCwgb3RoZXJ3aXNlCiAgICogbG9jYXRpb24uaHJlZi9sb2NhdGlvbi5yZXBsYWNlIGlzIHVzZWQuCiAgICogUmV0dXJucyBpdHMgb3duIGluc3RhbmNlIHRvIGFsbG93IGNoYWluaW5nCiAgICoKICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZQogICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9uIHNlcnZpY2V9IHRvIGNoYW5nZSB1cmwuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIE5ldyB1cmwgKHdoZW4gdXNlZCBhcyBzZXR0ZXIpCiAgICogQHBhcmFtIHtib29sZWFuPX0gcmVwbGFjZSBTaG91bGQgbmV3IHVybCByZXBsYWNlIGN1cnJlbnQgaGlzdG9yeSByZWNvcmQgPwogICAqLwogIHNlbGYudXJsID0gZnVuY3Rpb24odXJsLCByZXBsYWNlKSB7CiAgICAvLyBzZXR0ZXIKICAgIGlmICh1cmwpIHsKICAgICAgaWYgKGxhc3RCcm93c2VyVXJsID09IHVybCkgcmV0dXJuOwogICAgICBsYXN0QnJvd3NlclVybCA9IHVybDsKICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIHsKICAgICAgICBpZiAocmVwbGFjZSkgaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgJycsIHVybCk7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCAnJywgdXJsKTsKICAgICAgICAgIC8vIENyYXp5IE9wZXJhIEJ1ZzogaHR0cDovL215Lm9wZXJhLmNvbS9jb21tdW5pdHkvZm9ydW1zL3RvcGljLmRtbD9pZD0xMTg1NDYyCiAgICAgICAgICBiYXNlRWxlbWVudC5hdHRyKCdocmVmJywgYmFzZUVsZW1lbnQuYXR0cignaHJlZicpKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHJlcGxhY2UpIGxvY2F0aW9uLnJlcGxhY2UodXJsKTsKICAgICAgICBlbHNlIGxvY2F0aW9uLmhyZWYgPSB1cmw7CiAgICAgIH0KICAgICAgcmV0dXJuIHNlbGY7CiAgICAvLyBnZXR0ZXIKICAgIH0gZWxzZSB7CiAgICAgIC8vIHRoZSByZXBsYWNlbWVudCBpcyBhIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQwNzE3MgogICAgICByZXR1cm4gbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8lMjcvZywiJyIpOwogICAgfQogIH07CgogIHZhciB1cmxDaGFuZ2VMaXN0ZW5lcnMgPSBbXSwKICAgICAgdXJsQ2hhbmdlSW5pdCA9IGZhbHNlOwoKICBmdW5jdGlvbiBmaXJlVXJsQ2hhbmdlKCkgewogICAgaWYgKGxhc3RCcm93c2VyVXJsID09IHNlbGYudXJsKCkpIHJldHVybjsKCiAgICBsYXN0QnJvd3NlclVybCA9IHNlbGYudXJsKCk7CiAgICBmb3JFYWNoKHVybENoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHsKICAgICAgbGlzdGVuZXIoc2VsZi51cmwoKSk7CiAgICB9KTsKICB9CgogIC8qKgogICAqIEBuYW1lIG5nLiRicm93c2VyI29uVXJsQ2hhbmdlCiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyCiAgICogQFRPRE8odm9qdGEpOiByZWZhY3RvciB0byB1c2Ugbm9kZSdzIHN5bnRheCBmb3IgZXZlbnRzCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBSZWdpc3RlciBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkLCB3aGVuIHVybCBjaGFuZ2VzLgogICAqCiAgICogSXQncyBvbmx5IGNhbGxlZCB3aGVuIHRoZSB1cmwgaXMgY2hhbmdlZCBieSBvdXRzaWRlIG9mIGFuZ3VsYXI6CiAgICogLSB1c2VyIHR5cGVzIGRpZmZlcmVudCB1cmwgaW50byBhZGRyZXNzIGJhcgogICAqIC0gdXNlciBjbGlja3Mgb24gaGlzdG9yeSAoZm9yd2FyZC9iYWNrKSBidXR0b24KICAgKiAtIHVzZXIgY2xpY2tzIG9uIGEgbGluawogICAqCiAgICogSXQncyBub3QgY2FsbGVkIHdoZW4gdXJsIGlzIGNoYW5nZWQgYnkgJGJyb3dzZXIudXJsKCkgbWV0aG9kCiAgICoKICAgKiBUaGUgbGlzdGVuZXIgZ2V0cyBjYWxsZWQgd2l0aCBuZXcgdXJsIGFzIHBhcmFtZXRlci4KICAgKgogICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSB0aGUgJGxvY2F0aW9uIHNlcnZpY2UuIFBsZWFzZSB1c2UgdGhlCiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb24gc2VydmljZX0gdG8gbW9uaXRvciB1cmwgY2hhbmdlcyBpbiBhbmd1bGFyIGFwcHMuCiAgICoKICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IGxpc3RlbmVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHVybCBjaGFuZ2VzLgogICAqIEByZXR1cm4ge2Z1bmN0aW9uKHN0cmluZyl9IFJldHVybnMgdGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXIgZm4gLSBoYW5keSBpZiB0aGUgZm4gaXMgYW5vbnltb3VzLgogICAqLwogIHNlbGYub25VcmxDaGFuZ2UgPSBmdW5jdGlvbihjYWxsYmFjaykgewogICAgaWYgKCF1cmxDaGFuZ2VJbml0KSB7CiAgICAgIC8vIFdlIGxpc3RlbiBvbiBib3RoIChoYXNoY2hhbmdlL3BvcHN0YXRlKSB3aGVuIGF2YWlsYWJsZSwgYXMgc29tZSBicm93c2VycyAoZS5nLiBPcGVyYSkKICAgICAgLy8gZG9uJ3QgZmlyZSBwb3BzdGF0ZSB3aGVuIHVzZXIgY2hhbmdlIHRoZSBhZGRyZXNzIGJhciBhbmQgZG9uJ3QgZmlyZSBoYXNoY2hhbmdlIHdoZW4gdXJsCiAgICAgIC8vIGNoYW5nZWQgYnkgcHVzaC9yZXBsYWNlU3RhdGUKCiAgICAgIC8vIGh0bWw1IGhpc3RvcnkgYXBpIC0gcG9wc3RhdGUgZXZlbnQKICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIGpxTGl0ZSh3aW5kb3cpLmJpbmQoJ3BvcHN0YXRlJywgZmlyZVVybENoYW5nZSk7CiAgICAgIC8vIGhhc2hjaGFuZ2UgZXZlbnQKICAgICAgaWYgKCRzbmlmZmVyLmhhc2hjaGFuZ2UpIGpxTGl0ZSh3aW5kb3cpLmJpbmQoJ2hhc2hjaGFuZ2UnLCBmaXJlVXJsQ2hhbmdlKTsKICAgICAgLy8gcG9sbGluZwogICAgICBlbHNlIHNlbGYuYWRkUG9sbEZuKGZpcmVVcmxDaGFuZ2UpOwoKICAgICAgdXJsQ2hhbmdlSW5pdCA9IHRydWU7CiAgICB9CgogICAgdXJsQ2hhbmdlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spOwogICAgcmV0dXJuIGNhbGxiYWNrOwogIH07CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgLy8gTWlzYyBBUEkKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAvKioKICAgKiBSZXR1cm5zIGN1cnJlbnQgPGJhc2UgaHJlZj4KICAgKiAoYWx3YXlzIHJlbGF0aXZlIC0gd2l0aG91dCBkb21haW4pCiAgICoKICAgKiBAcmV0dXJucyB7c3RyaW5nPX0KICAgKi8KICBzZWxmLmJhc2VIcmVmID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgaHJlZiA9IGJhc2VFbGVtZW50LmF0dHIoJ2hyZWYnKTsKICAgIHJldHVybiBocmVmID8gaHJlZi5yZXBsYWNlKC9eaHR0cHM/XDpcL1wvW15cL10qLywgJycpIDogaHJlZjsKICB9OwoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIENvb2tpZXMgQVBJCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICB2YXIgbGFzdENvb2tpZXMgPSB7fTsKICB2YXIgbGFzdENvb2tpZVN0cmluZyA9ICcnOwogIHZhciBjb29raWVQYXRoID0gc2VsZi5iYXNlSHJlZigpOwoKICAvKioKICAgKiBAbmFtZSBuZy4kYnJvd3NlciNjb29raWVzCiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgQ29va2llIG5hbWUKICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIENva2tpZSB2YWx1ZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhlIGNvb2tpZXMgbWV0aG9kIHByb3ZpZGVzIGEgJ3ByaXZhdGUnIGxvdyBsZXZlbCBhY2Nlc3MgdG8gYnJvd3NlciBjb29raWVzLgogICAqIEl0IGlzIG5vdCBtZWFudCB0byBiZSB1c2VkIGRpcmVjdGx5LCB1c2UgdGhlICRjb29raWUgc2VydmljZSBpbnN0ZWFkLgogICAqCiAgICogVGhlIHJldHVybiB2YWx1ZXMgdmFyeSBkZXBlbmRpbmcgb24gdGhlIGFyZ3VtZW50cyB0aGF0IHRoZSBtZXRob2Qgd2FzIGNhbGxlZCB3aXRoIGFzIGZvbGxvd3M6CiAgICogPHVsPgogICAqICAgPGxpPmNvb2tpZXMoKSAtPiBoYXNoIG9mIGFsbCBjb29raWVzLCB0aGlzIGlzIE5PVCBhIGNvcHkgb2YgdGhlIGludGVybmFsIHN0YXRlLCBzbyBkbyBub3QgbW9kaWZ5IGl0PC9saT4KICAgKiAgIDxsaT5jb29raWVzKG5hbWUsIHZhbHVlKSAtPiBzZXQgbmFtZSB0byB2YWx1ZSwgaWYgdmFsdWUgaXMgdW5kZWZpbmVkIGRlbGV0ZSB0aGUgY29va2llPC9saT4KICAgKiAgIDxsaT5jb29raWVzKG5hbWUpIC0+IHRoZSBzYW1lIGFzIChuYW1lLCB1bmRlZmluZWQpID09IERFTEVURVMgKG5vIG9uZSBjYWxscyBpdCByaWdodCBub3cgdGhhdCB3YXkpPC9saT4KICAgKiA8L3VsPgogICAqCiAgICogQHJldHVybnMge09iamVjdH0gSGFzaCBvZiBhbGwgY29va2llcyAoaWYgY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlcikKICAgKi8KICBzZWxmLmNvb2tpZXMgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkgewogICAgdmFyIGNvb2tpZUxlbmd0aCwgY29va2llQXJyYXksIGNvb2tpZSwgaSwgaW5kZXg7CgogICAgaWYgKG5hbWUpIHsKICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgICByYXdEb2N1bWVudC5jb29raWUgPSBlc2NhcGUobmFtZSkgKyAiPTtwYXRoPSIgKyBjb29raWVQYXRoICsgIjtleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UIjsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7CiAgICAgICAgICBjb29raWVMZW5ndGggPSAocmF3RG9jdW1lbnQuY29va2llID0gZXNjYXBlKG5hbWUpICsgJz0nICsgZXNjYXBlKHZhbHVlKSArICc7cGF0aD0nICsgY29va2llUGF0aCkubGVuZ3RoICsgMTsKICAgICAgICAgIGlmIChjb29raWVMZW5ndGggPiA0MDk2KSB7CiAgICAgICAgICAgICRsb2cud2FybigiQ29va2llICciKyBuYW1lICsiJyBwb3NzaWJseSBub3Qgc2V0IG9yIG92ZXJmbG93ZWQgYmVjYXVzZSBpdCB3YXMgdG9vIGxhcmdlICgiKwogICAgICAgICAgICAgIGNvb2tpZUxlbmd0aCArICIgPiA0MDk2IGJ5dGVzKSEiKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChsYXN0Q29va2llcy5sZW5ndGggPiAyMCkgewogICAgICAgICAgICAkbG9nLndhcm4oIkNvb2tpZSAnIisgbmFtZSArIicgcG9zc2libHkgbm90IHNldCBvciBvdmVyZmxvd2VkIGJlY2F1c2UgdG9vIG1hbnkgY29va2llcyAiICsKICAgICAgICAgICAgICAid2VyZSBhbHJlYWR5IHNldCAoIiArIGxhc3RDb29raWVzLmxlbmd0aCArICIgPiAyMCApIik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZiAocmF3RG9jdW1lbnQuY29va2llICE9PSBsYXN0Q29va2llU3RyaW5nKSB7CiAgICAgICAgbGFzdENvb2tpZVN0cmluZyA9IHJhd0RvY3VtZW50LmNvb2tpZTsKICAgICAgICBjb29raWVBcnJheSA9IGxhc3RDb29raWVTdHJpbmcuc3BsaXQoIjsgIik7CiAgICAgICAgbGFzdENvb2tpZXMgPSB7fTsKCiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvb2tpZUFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb29raWUgPSBjb29raWVBcnJheVtpXTsKICAgICAgICAgIGluZGV4ID0gY29va2llLmluZGV4T2YoJz0nKTsKICAgICAgICAgIGlmIChpbmRleCA+IDApIHsgLy9pZ25vcmUgbmFtZWxlc3MgY29va2llcwogICAgICAgICAgICBsYXN0Q29va2llc1t1bmVzY2FwZShjb29raWUuc3Vic3RyaW5nKDAsIGluZGV4KSldID0gdW5lc2NhcGUoY29va2llLnN1YnN0cmluZyhpbmRleCArIDEpKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGxhc3RDb29raWVzOwogICAgfQogIH07CgoKICAvKioKICAgKiBAbmFtZSBuZy4kYnJvd3NlciNkZWZlcgogICAqIEBtZXRob2RPZiBuZy4kYnJvd3NlcgogICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiwgd2hvJ3MgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWZlcmVkLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gW2RlbGF5PTBdIG9mIG1pbGxpc2Vjb25kcyB0byBkZWZlciB0aGUgZnVuY3Rpb24gZXhlY3V0aW9uLgogICAqIEByZXR1cm5zIHsqfSBEZWZlcklkIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2FuY2VsIHRoZSB0YXNrIHZpYSBgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKClgLgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogRXhlY3V0ZXMgYSBmbiBhc3luY2hyb25pb3VzbHkgdmlhIGBzZXRUaW1lb3V0KGZuLCBkZWxheSlgLgogICAqCiAgICogVW5saWtlIHdoZW4gY2FsbGluZyBgc2V0VGltZW91dGAgZGlyZWN0bHksIGluIHRlc3QgdGhpcyBmdW5jdGlvbiBpcyBtb2NrZWQgYW5kIGluc3RlYWQgb2YgdXNpbmcKICAgKiBgc2V0VGltZW91dGAgaW4gdGVzdHMsIHRoZSBmbnMgYXJlIHF1ZXVlZCBpbiBhbiBhcnJheSwgd2hpY2ggY2FuIGJlIHByb2dyYW1tYXRpY2FsbHkgZmx1c2hlZAogICAqIHZpYSBgJGJyb3dzZXIuZGVmZXIuZmx1c2goKWAuCiAgICoKICAgKi8KICBzZWxmLmRlZmVyID0gZnVuY3Rpb24oZm4sIGRlbGF5KSB7CiAgICB2YXIgdGltZW91dElkOwogICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKzsKICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgIGRlbGV0ZSBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXTsKICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pOwogICAgfSwgZGVsYXkgfHwgMCk7CiAgICBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXSA9IHRydWU7CiAgICByZXR1cm4gdGltZW91dElkOwogIH07CgoKICAvKioKICAgKiBAbmFtZSBuZy4kYnJvd3NlciNkZWZlci5jYW5jZWwKICAgKiBAbWV0aG9kT2YgbmcuJGJyb3dzZXIuZGVmZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIENhbmNlbHMgYSBkZWZlcmVkIHRhc2sgaWRlbnRpZmllZCB3aXRoIGBkZWZlcklkYC4KICAgKgogICAqIEBwYXJhbSB7Kn0gZGVmZXJJZCBUb2tlbiByZXR1cm5lZCBieSB0aGUgYCRicm93c2VyLmRlZmVyYCBmdW5jdGlvbi4KICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWx5IGNhbmNlbGVkLgogICAqLwogIHNlbGYuZGVmZXIuY2FuY2VsID0gZnVuY3Rpb24oZGVmZXJJZCkgewogICAgaWYgKHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXSkgewogICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW2RlZmVySWRdOwogICAgICBjbGVhclRpbWVvdXQoZGVmZXJJZCk7CiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9OwoKfQoKZnVuY3Rpb24gJEJyb3dzZXJQcm92aWRlcigpewogIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9nJywgJyRzbmlmZmVyJywgJyRkb2N1bWVudCcsCiAgICAgIGZ1bmN0aW9uKCAkd2luZG93LCAgICRsb2csICAgJHNuaWZmZXIsICAgJGRvY3VtZW50KXsKICAgICAgICByZXR1cm4gbmV3IEJyb3dzZXIoJHdpbmRvdywgJGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcik7CiAgICAgIH1dOwp9Ci8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRjYWNoZUZhY3RvcnkKICoKICogQGRlc2NyaXB0aW9uCiAqIEZhY3RvcnkgdGhhdCBjb25zdHJ1Y3RzIGNhY2hlIG9iamVjdHMuCiAqCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBjYWNoZUlkIE5hbWUgb3IgaWQgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgY2FjaGUuCiAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgY2FjaGUgYmVoYXZpb3IuIFByb3BlcnRpZXM6CiAqCiAqICAgLSBge251bWJlcj19YCBgY2FwYWNpdHlgIOKAlCB0dXJucyB0aGUgY2FjaGUgaW50byBMUlUgY2FjaGUuCiAqCiAqIEByZXR1cm5zIHtvYmplY3R9IE5ld2x5IGNyZWF0ZWQgY2FjaGUgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzZXQgb2YgbWV0aG9kczoKICoKICogLSBge29iamVjdH1gIGBpbmZvKClgIOKAlCBSZXR1cm5zIGlkLCBzaXplLCBhbmQgb3B0aW9ucyBvZiBjYWNoZS4KICogLSBge3ZvaWR9YCBgcHV0KHtzdHJpbmd9IGtleSwgeyp9IHZhbHVlKWAg4oCUIFB1dHMgYSBuZXcga2V5LXZhbHVlIHBhaXIgaW50byB0aGUgY2FjaGUuCiAqIC0gYHt7Kn19IGBnZXQoe3N0cmluZ30ga2V5KSDigJQgUmV0dXJucyBjYWNoZWQgdmFsdWUgZm9yIGBrZXlgIG9yIHVuZGVmaW5lZCBmb3IgY2FjaGUgbWlzcy4KICogLSBge3ZvaWR9YCBgcmVtb3ZlKHtzdHJpbmd9IGtleSkg4oCUIFJlbW92ZXMgYSBrZXktdmFsdWUgcGFpciBmcm9tIHRoZSBjYWNoZS4KICogLSBge3ZvaWR9YCBgcmVtb3ZlQWxsKCkg4oCUIFJlbW92ZXMgYWxsIGNhY2hlZCB2YWx1ZXMuCiAqIC0gYHt2b2lkfWAgYGRlc3Ryb3koKSDigJQgUmVtb3ZlcyByZWZlcmVuY2VzIHRvIHRoaXMgY2FjaGUgZnJvbSAkY2FjaGVGYWN0b3J5LgogKgogKi8KZnVuY3Rpb24gJENhY2hlRmFjdG9yeVByb3ZpZGVyKCkgewoKICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHsKICAgIHZhciBjYWNoZXMgPSB7fTsKCiAgICBmdW5jdGlvbiBjYWNoZUZhY3RvcnkoY2FjaGVJZCwgb3B0aW9ucykgewogICAgICBpZiAoY2FjaGVJZCBpbiBjYWNoZXMpIHsKICAgICAgICB0aHJvdyBFcnJvcignY2FjaGVJZCAnICsgY2FjaGVJZCArICcgdGFrZW4nKTsKICAgICAgfQoKICAgICAgdmFyIHNpemUgPSAwLAogICAgICAgICAgc3RhdHMgPSBleHRlbmQoe30sIG9wdGlvbnMsIHtpZDogY2FjaGVJZH0pLAogICAgICAgICAgZGF0YSA9IHt9LAogICAgICAgICAgY2FwYWNpdHkgPSAob3B0aW9ucyAmJiBvcHRpb25zLmNhcGFjaXR5KSB8fCBOdW1iZXIuTUFYX1ZBTFVFLAogICAgICAgICAgbHJ1SGFzaCA9IHt9LAogICAgICAgICAgZnJlc2hFbmQgPSBudWxsLAogICAgICAgICAgc3RhbGVFbmQgPSBudWxsOwoKICAgICAgcmV0dXJuIGNhY2hlc1tjYWNoZUlkXSA9IHsKCiAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV0gfHwgKGxydUhhc2hba2V5XSA9IHtrZXk6IGtleX0pOwoKICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpOwoKICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjsKICAgICAgICAgIGlmICghKGtleSBpbiBkYXRhKSkgc2l6ZSsrOwogICAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7CgogICAgICAgICAgaWYgKHNpemUgPiBjYXBhY2l0eSkgewogICAgICAgICAgICB0aGlzLnJlbW92ZShzdGFsZUVuZC5rZXkpOwogICAgICAgICAgfQogICAgICAgIH0sCgoKICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldOwoKICAgICAgICAgIGlmICghbHJ1RW50cnkpIHJldHVybjsKCiAgICAgICAgICByZWZyZXNoKGxydUVudHJ5KTsKCiAgICAgICAgICByZXR1cm4gZGF0YVtrZXldOwogICAgICAgIH0sCgoKICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldOwoKICAgICAgICAgIGlmIChscnVFbnRyeSA9PSBmcmVzaEVuZCkgZnJlc2hFbmQgPSBscnVFbnRyeS5wOwogICAgICAgICAgaWYgKGxydUVudHJ5ID09IHN0YWxlRW5kKSBzdGFsZUVuZCA9IGxydUVudHJ5Lm47CiAgICAgICAgICBsaW5rKGxydUVudHJ5Lm4sbHJ1RW50cnkucCk7CgogICAgICAgICAgZGVsZXRlIGxydUhhc2hba2V5XTsKICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07CiAgICAgICAgICBzaXplLS07CiAgICAgICAgfSwKCgogICAgICAgIHJlbW92ZUFsbDogZnVuY3Rpb24oKSB7CiAgICAgICAgICBkYXRhID0ge307CiAgICAgICAgICBzaXplID0gMDsKICAgICAgICAgIGxydUhhc2ggPSB7fTsKICAgICAgICAgIGZyZXNoRW5kID0gc3RhbGVFbmQgPSBudWxsOwogICAgICAgIH0sCgoKICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHsKICAgICAgICAgIGRhdGEgPSBudWxsOwogICAgICAgICAgc3RhdHMgPSBudWxsOwogICAgICAgICAgbHJ1SGFzaCA9IG51bGw7CiAgICAgICAgICBkZWxldGUgY2FjaGVzW2NhY2hlSWRdOwogICAgICAgIH0sCgoKICAgICAgICBpbmZvOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBleHRlbmQoe30sIHN0YXRzLCB7c2l6ZTogc2l6ZX0pOwogICAgICAgIH0KICAgICAgfTsKCgogICAgICAvKioKICAgICAgICogbWFrZXMgdGhlIGBlbnRyeWAgdGhlIGZyZXNoRW5kIG9mIHRoZSBMUlUgbGlua2VkIGxpc3QKICAgICAgICovCiAgICAgIGZ1bmN0aW9uIHJlZnJlc2goZW50cnkpIHsKICAgICAgICBpZiAoZW50cnkgIT0gZnJlc2hFbmQpIHsKICAgICAgICAgIGlmICghc3RhbGVFbmQpIHsKICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeTsKICAgICAgICAgIH0gZWxzZSBpZiAoc3RhbGVFbmQgPT0gZW50cnkpIHsKICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeS5uOwogICAgICAgICAgfQoKICAgICAgICAgIGxpbmsoZW50cnkubiwgZW50cnkucCk7CiAgICAgICAgICBsaW5rKGVudHJ5LCBmcmVzaEVuZCk7CiAgICAgICAgICBmcmVzaEVuZCA9IGVudHJ5OwogICAgICAgICAgZnJlc2hFbmQubiA9IG51bGw7CiAgICAgICAgfQogICAgICB9CgoKICAgICAgLyoqCiAgICAgICAqIGJpZGlyZWN0aW9uYWxseSBsaW5rcyB0d28gZW50cmllcyBvZiB0aGUgTFJVIGxpbmtlZCBsaXN0CiAgICAgICAqLwogICAgICBmdW5jdGlvbiBsaW5rKG5leHRFbnRyeSwgcHJldkVudHJ5KSB7CiAgICAgICAgaWYgKG5leHRFbnRyeSAhPSBwcmV2RW50cnkpIHsKICAgICAgICAgIGlmIChuZXh0RW50cnkpIG5leHRFbnRyeS5wID0gcHJldkVudHJ5OyAvL3Agc3RhbmRzIGZvciBwcmV2aW91cywgJ3ByZXYnIGRpZG4ndCBtaW5pZnkKICAgICAgICAgIGlmIChwcmV2RW50cnkpIHByZXZFbnRyeS5uID0gbmV4dEVudHJ5OyAvL24gc3RhbmRzIGZvciBuZXh0LCAnbmV4dCcgZGlkbid0IG1pbmlmeQogICAgICAgIH0KICAgICAgfQogICAgfQoKCiAgICBjYWNoZUZhY3RvcnkuaW5mbyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgaW5mbyA9IHt9OwogICAgICBmb3JFYWNoKGNhY2hlcywgZnVuY3Rpb24oY2FjaGUsIGNhY2hlSWQpIHsKICAgICAgICBpbmZvW2NhY2hlSWRdID0gY2FjaGUuaW5mbygpOwogICAgICB9KTsKICAgICAgcmV0dXJuIGluZm87CiAgICB9OwoKCiAgICBjYWNoZUZhY3RvcnkuZ2V0ID0gZnVuY3Rpb24oY2FjaGVJZCkgewogICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdOwogICAgfTsKCgogICAgcmV0dXJuIGNhY2hlRmFjdG9yeTsKICB9Owp9CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kdGVtcGxhdGVDYWNoZQogKgogKiBAZGVzY3JpcHRpb24KICogQ2FjaGUgdXNlZCBmb3Igc3RvcmluZyBodG1sIHRlbXBsYXRlcy4KICoKICogU2VlIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LgogKgogKi8KZnVuY3Rpb24gJFRlbXBsYXRlQ2FjaGVQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSBbJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkY2FjaGVGYWN0b3J5KSB7CiAgICByZXR1cm4gJGNhY2hlRmFjdG9yeSgndGVtcGxhdGVzJyk7CiAgfV07Cn0KCi8qICEgVkFSSUFCTEUvRlVOQ1RJT04gTkFNSU5HIENPTlZFTlRJT05TIFRIQVQgQVBQTFkgVE8gVEhJUyBGSUxFIQogKgogKiBET00tcmVsYXRlZCB2YXJpYWJsZXM6CiAqCiAqIC0gIm5vZGUiIC0gRE9NIE5vZGUKICogLSAiZWxlbWVudCIgLSBET00gRWxlbWVudCBvciBOb2RlCiAqIC0gIiRub2RlIiBvciAiJGVsZW1lbnQiIC0ganFMaXRlLXdyYXBwZWQgbm9kZSBvciBlbGVtZW50CiAqCiAqCiAqIENvbXBpbGVyIHJlbGF0ZWQgc3R1ZmY6CiAqCiAqIC0gImxpbmtGbiIgLSBsaW5raW5nIGZuIG9mIGEgc2luZ2xlIGRpcmVjdGl2ZQogKiAtICJub2RlTGlua0ZuIiAtIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGEgcGFydGljdWxhciBub2RlCiAqIC0gImNoaWxkTGlua0ZuIiAtICBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBjaGlsZCBub2RlcyBvZiBhIHBhcnRpY3VsYXIgbm9kZQogKiAtICJjb21wb3NpdGVMaW5rRm4iIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBjb21waWxhdGlvbiByb290IChub2RlTGlzdCkKICovCgoKdmFyIE5PTl9BU1NJR05BQkxFX01PREVMX0VYUFJFU1NJT04gPSAnTm9uLWFzc2lnbmFibGUgbW9kZWwgZXhwcmVzc2lvbjogJzsKCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIG5nLiRjb21waWxlCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQ29tcGlsZXMgYSBwaWVjZSBvZiBIVE1MIHN0cmluZyBvciBET00gaW50byBhIHRlbXBsYXRlIGFuZCBwcm9kdWNlcyBhIHRlbXBsYXRlIGZ1bmN0aW9uLCB3aGljaAogKiBjYW4gdGhlbiBiZSB1c2VkIHRvIGxpbmsge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9IGFuZCB0aGUgdGVtcGxhdGUgdG9nZXRoZXIuCiAqCiAqIFRoZSBjb21waWxhdGlvbiBpcyBhIHByb2Nlc3Mgb2Ygd2Fsa2luZyB0aGUgRE9NIHRyZWUgYW5kIHRyeWluZyB0byBtYXRjaCBET00gZWxlbWVudHMgdG8KICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LiBGb3IgZWFjaCBtYXRjaCBpdAogKiBleGVjdXRlcyBjb3JyZXNwb25kaW5nIHRlbXBsYXRlIGZ1bmN0aW9uIGFuZCBjb2xsZWN0cyB0aGUKICogaW5zdGFuY2UgZnVuY3Rpb25zIGludG8gYSBzaW5nbGUgdGVtcGxhdGUgZnVuY3Rpb24gd2hpY2ggaXMgdGhlbiByZXR1cm5lZC4KICoKICogVGhlIHRlbXBsYXRlIGZ1bmN0aW9uIGNhbiB0aGVuIGJlIHVzZWQgb25jZSB0byBwcm9kdWNlIHRoZSB2aWV3IG9yIGFzIGl0IGlzIHRoZSBjYXNlIHdpdGgKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCByZXBlYXRlcn0gbWFueS10aW1lcywgaW4gd2hpY2gKICogY2FzZSBlYWNoIGNhbGwgcmVzdWx0cyBpbiBhIHZpZXcgdGhhdCBpcyBhIERPTSBjbG9uZSBvZiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUuCiAqCiA8ZG9jOmV4YW1wbGUgbW9kdWxlPSJjb21waWxlIj4KICAgPGRvYzpzb3VyY2U+CiAgICA8c2NyaXB0PgogICAgICAvLyBkZWNsYXJlIGEgbmV3IG1vZHVsZSwgYW5kIGluamVjdCB0aGUgJGNvbXBpbGVQcm92aWRlcgogICAgICBhbmd1bGFyLm1vZHVsZSgnY29tcGlsZScsIFtdLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7CiAgICAgICAgLy8gY29uZmlndXJlIG5ldyAnY29tcGlsZScgZGlyZWN0aXZlIGJ5IHBhc3NpbmcgYSBkaXJlY3RpdmUKICAgICAgICAvLyBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBpbmplY3RzIHRoZSAnJGNvbXBpbGUnCiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoJ2NvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkgewogICAgICAgICAgLy8gZGlyZWN0aXZlIGZhY3RvcnkgY3JlYXRlcyBhIGxpbmsgZnVuY3Rpb24KICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHsKICAgICAgICAgICAgc2NvcGUuJHdhdGNoKAogICAgICAgICAgICAgIGZ1bmN0aW9uKHNjb3BlKSB7CiAgICAgICAgICAgICAgICAgLy8gd2F0Y2ggdGhlICdjb21waWxlJyBleHByZXNzaW9uIGZvciBjaGFuZ2VzCiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGV2YWwoYXR0cnMuY29tcGlsZSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gY2hhbmdlcwogICAgICAgICAgICAgICAgLy8gYXNzaWduIGl0IGludG8gdGhlIGN1cnJlbnQgRE9NCiAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwodmFsdWUpOwoKICAgICAgICAgICAgICAgIC8vIGNvbXBpbGUgdGhlIG5ldyBET00gYW5kIGxpbmsgaXQgdG8gdGhlIGN1cnJlbnQKICAgICAgICAgICAgICAgIC8vIHNjb3BlLgogICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugb25seSBjb21waWxlIC5jaGlsZE5vZGVzIHNvIHRoYXQKICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IGdldCBpbnRvIGluZmluaXRlIGxvb3AgY29tcGlsaW5nIG91cnNlbHZlcwogICAgICAgICAgICAgICAgJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKShzY29wZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICApOwogICAgICAgICAgfTsKICAgICAgICB9KQogICAgICB9KTsKCiAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgJHNjb3BlLm5hbWUgPSAnQW5ndWxhcic7CiAgICAgICAgJHNjb3BlLmh0bWwgPSAnSGVsbG8ge3tuYW1lfX0nOwogICAgICB9CiAgICA8L3NjcmlwdD4KICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgIDxpbnB1dCBuZy1tb2RlbD0ibmFtZSI+IDxicj4KICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPSJodG1sIj48L3RleHRhcmVhPiA8YnI+CiAgICAgIDxkaXYgY29tcGlsZT0iaHRtbCI+PC9kaXY+CiAgICA8L2Rpdj4KICAgPC9kb2M6c291cmNlPgogICA8ZG9jOnNjZW5hcmlvPgogICAgIGl0KCdzaG91bGQgYXV0byBjb21waWxlJywgZnVuY3Rpb24oKSB7CiAgICAgICBleHBlY3QoZWxlbWVudCgnZGl2W2NvbXBpbGVdJykudGV4dCgpKS50b0JlKCdIZWxsbyBBbmd1bGFyJyk7CiAgICAgICBpbnB1dCgnaHRtbCcpLmVudGVyKCd7e25hbWV9fSEnKTsKICAgICAgIGV4cGVjdChlbGVtZW50KCdkaXZbY29tcGlsZV0nKS50ZXh0KCkpLnRvQmUoJ0FuZ3VsYXIhJyk7CiAgICAgfSk7CiAgIDwvZG9jOnNjZW5hcmlvPgogPC9kb2M6ZXhhbXBsZT4KCiAqCiAqCiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCBvciBIVE1MIHN0cmluZyB0byBjb21waWxlIGludG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbi4KICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlWywgY2xvbmVBdHRhY2hGbl19IHRyYW5zY2x1ZGUgZnVuY3Rpb24gYXZhaWxhYmxlIHRvIGRpcmVjdGl2ZXMuCiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhQcmlvcml0eSBvbmx5IGFwcGx5IGRpcmVjdGl2ZXMgbG93ZXIgdGhlbiBnaXZlbiBwcmlvcml0eSAoT25seSBlZmZlY3RzIHRoZQogKiAgICAgICAgICAgICAgICAgcm9vdCBlbGVtZW50KHMpLCBub3QgdGhlaXIgY2hpbGRyZW4pCiAqIEByZXR1cm5zIHtmdW5jdGlvbihzY29wZVssIGNsb25lQXR0YWNoRm5dKX0gYSBsaW5rIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gYmluZCB0ZW1wbGF0ZQogKiAoYSBET00gZWxlbWVudC90cmVlKSB0byBhIHNjb3BlLiBXaGVyZToKICoKICogICogYHNjb3BlYCAtIEEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgU2NvcGV9IHRvIGJpbmQgdG8uCiAqICAqIGBjbG9uZUF0dGFjaEZuYCAtIElmIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgbGluayBmdW5jdGlvbiB3aWxsIGNsb25lIHRoZQogKiAgICAgICAgICAgICAgIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGUKICogICAgICAgICAgICAgICBjbG9uZWQgZWxlbWVudHMgdG8gdGhlIERPTSBkb2N1bWVudCBhdCB0aGUgYXBwcm9wcmlhdGUgcGxhY2UuIFRoZSBgY2xvbmVBdHRhY2hGbmAgaXMKICogICAgICAgICAgICAgICBjYWxsZWQgYXM6IDxicj4gYGNsb25lQXR0YWNoRm4oY2xvbmVkRWxlbWVudCwgc2NvcGUpYCB3aGVyZToKICoKICogICAgICAqIGBjbG9uZWRFbGVtZW50YCAtIGlzIGEgY2xvbmUgb2YgdGhlIG9yaWdpbmFsIGBlbGVtZW50YCBwYXNzZWQgaW50byB0aGUgY29tcGlsZXIuCiAqICAgICAgKiBgc2NvcGVgIC0gaXMgdGhlIGN1cnJlbnQgc2NvcGUgd2l0aCB3aGljaCB0aGUgbGlua2luZyBmdW5jdGlvbiBpcyB3b3JraW5nIHdpdGguCiAqCiAqIENhbGxpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gcmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgdGVtcGxhdGUuIEl0IGlzIGVpdGhlciB0aGUgb3JpZ2luYWwgZWxlbWVudAogKiBwYXNzZWQgaW4sIG9yIHRoZSBjbG9uZSBvZiB0aGUgZWxlbWVudCBpZiB0aGUgYGNsb25lQXR0YWNoRm5gIGlzIHByb3ZpZGVkLgogKgogKiBBZnRlciBsaW5raW5nIHRoZSB2aWV3IGlzIG5vdCB1cGRhdGVkIHVudGlsIGFmdGVyIGEgY2FsbCB0byAkZGlnZXN0IHdoaWNoIHR5cGljYWxseSBpcyBkb25lIGJ5CiAqIEFuZ3VsYXIgYXV0b21hdGljYWxseS4KICoKICogSWYgeW91IG5lZWQgYWNjZXNzIHRvIHRoZSBib3VuZCB2aWV3LCB0aGVyZSBhcmUgdHdvIHdheXMgdG8gZG8gaXQ6CiAqCiAqIC0gSWYgeW91IGFyZSBub3QgYXNraW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHRvIGNsb25lIHRoZSB0ZW1wbGF0ZSwgY3JlYXRlIHRoZSBET00gZWxlbWVudChzKQogKiAgIGJlZm9yZSB5b3Ugc2VuZCB0aGVtIHRvIHRoZSBjb21waWxlciBhbmQga2VlcCB0aGlzIHJlZmVyZW5jZSBhcm91bmQuCiAqICAgPHByZT4KICogICAgIHZhciBlbGVtZW50ID0gJGNvbXBpbGUoJzxwPnt7dG90YWx9fTwvcD4nKShzY29wZSk7CiAqICAgPC9wcmU+CiAqCiAqIC0gaWYgb24gdGhlIG90aGVyIGhhbmQsIHlvdSBuZWVkIHRoZSBlbGVtZW50IHRvIGJlIGNsb25lZCwgdGhlIHZpZXcgcmVmZXJlbmNlIGZyb20gdGhlIG9yaWdpbmFsCiAqICAgZXhhbXBsZSB3b3VsZCBub3QgcG9pbnQgdG8gdGhlIGNsb25lLCBidXQgcmF0aGVyIHRvIHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSB0aGF0IHdhcyBjbG9uZWQuIEluCiAqICAgdGhpcyBjYXNlLCB5b3UgY2FuIGFjY2VzcyB0aGUgY2xvbmUgdmlhIHRoZSBjbG9uZUF0dGFjaEZuOgogKiAgIDxwcmU+CiAqICAgICB2YXIgdGVtcGxhdGVIVE1MID0gYW5ndWxhci5lbGVtZW50KCc8cD57e3RvdGFsfX08L3A+JyksCiAqICAgICAgICAgc2NvcGUgPSAuLi4uOwogKgogKiAgICAgdmFyIGNsb25lZEVsZW1lbnQgPSAkY29tcGlsZSh0ZW1wbGF0ZUhUTUwpKHNjb3BlLCBmdW5jdGlvbihjbG9uZWRFbGVtZW50LCBzY29wZSkgewogKiAgICAgICAvL2F0dGFjaCB0aGUgY2xvbmUgdG8gRE9NIGRvY3VtZW50IGF0IHRoZSByaWdodCBwbGFjZQogKiAgICAgfSk7CiAqCiAqICAgICAvL25vdyB3ZSBoYXZlIHJlZmVyZW5jZSB0byB0aGUgY2xvbmVkIERPTSB2aWEgYGNsb25lYAogKiAgIDwvcHJlPgogKgogKgogKiBGb3IgaW5mb3JtYXRpb24gb24gaG93IHRoZSBjb21waWxlciB3b3Jrcywgc2VlIHRoZQogKiB7QGxpbmsgZ3VpZGUvY29tcGlsZXIgQW5ndWxhciBIVE1MIENvbXBpbGVyfSBzZWN0aW9uIG9mIHRoZSBEZXZlbG9wZXIgR3VpZGUuCiAqLwoKCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSBuZy4kY29tcGlsZVByb3ZpZGVyCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICovCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlCiAqIEBtZXRob2RPZiBuZy4kY29tcGlsZVByb3ZpZGVyCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogUmVnaXN0ZXIgYSBuZXcgZGlyZWN0aXZlIHdpdGggY29tcGlsZXIKICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgZGlyZWN0aXZlLgogKiBAcGFyYW0ge2Z1bmN0aW9ufSBkaXJlY3RpdmVGYWN0b3J5IEFuIGluamVjdGFibGUgZGlyZWN0aXZlIGZhY3RvcnkgZnVuY3Rpb24uCiAqIEByZXR1cm5zIHtuZy4kY29tcGlsZVByb3ZpZGVyfSBTZWxmIGZvciBjaGFpbmluZy4KICovCiRDb21waWxlUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnXTsKZnVuY3Rpb24gJENvbXBpbGVQcm92aWRlcigkcHJvdmlkZSkgewogIHZhciBoYXNEaXJlY3RpdmVzID0ge30sCiAgICAgIFN1ZmZpeCA9ICdEaXJlY3RpdmUnLAogICAgICBDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAgPSAvXlxzKmRpcmVjdGl2ZVw6XHMqKFtcZFx3XC1fXSspXHMrKC4qKSQvLAogICAgICBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQID0gLygoW1xkXHdcLV9dKykoPzpcOihbXjtdKykpPzs/KS8sCiAgICAgIE1VTFRJX1JPT1RfVEVNUExBVEVfRVJST1IgPSAnVGVtcGxhdGUgbXVzdCBoYXZlIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gd2FzOiAnOwoKCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUKICAgKiBAbWV0aG9kT2YgbmcuJGNvbXBpbGVQcm92aWRlcgogICAqIEBmdW5jdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmVnaXN0ZXIgZGlyZWN0aXZlcyB3aXRoIHRoZSBjb21waWxlci4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGRpcmVjdGl2ZSBpbiBjYW1lbC1jYXNlLiAoaWUgPGNvZGU+bmdCaW5kPC9jb2RlPiB3aGljaCB3aWxsIG1hdGNoIGFzCiAgICogICAgICAgICAgICAgICAgPGNvZGU+bmctYmluZDwvY29kZT4pLgogICAqIEBwYXJhbSB7ZnVuY3Rpb259IGRpcmVjdGl2ZUZhY3RvcnkgQW4gaW5qZWN0YWJsZSBkaXJlY3RpdmUgZmFjdHJveSBmdW5jdGlvbi4gU2VlIHtAbGluayBndWlkZS9kaXJlY3RpdmV9IGZvciBtb3JlCiAgICogICAgICAgICAgICAgICAgaW5mby4KICAgKi8KICAgdGhpcy5kaXJlY3RpdmUgPSBmdW5jdGlvbiByZWdpc3RlckRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmVGYWN0b3J5KSB7CiAgICBpZiAoaXNTdHJpbmcobmFtZSkpIHsKICAgICAgYXNzZXJ0QXJnKGRpcmVjdGl2ZUZhY3RvcnksICdkaXJlY3RpdmUnKTsKICAgICAgaWYgKCFoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXSA9IFtdOwogICAgICAgICRwcm92aWRlLmZhY3RvcnkobmFtZSArIFN1ZmZpeCwgWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLAogICAgICAgICAgZnVuY3Rpb24oJGluamVjdG9yLCAkZXhjZXB0aW9uSGFuZGxlcikgewogICAgICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IFtdOwogICAgICAgICAgICBmb3JFYWNoKGhhc0RpcmVjdGl2ZXNbbmFtZV0sIGZ1bmN0aW9uKGRpcmVjdGl2ZUZhY3RvcnkpIHsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZSA9ICRpbmplY3Rvci5pbnZva2UoZGlyZWN0aXZlRmFjdG9yeSk7CiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZSA9IHsgY29tcGlsZTogdmFsdWVGbihkaXJlY3RpdmUpIH07CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFkaXJlY3RpdmUuY29tcGlsZSAmJiBkaXJlY3RpdmUubGluaykgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmUuY29tcGlsZSA9IHZhbHVlRm4oZGlyZWN0aXZlLmxpbmspOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGlyZWN0aXZlLnByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5IHx8IDA7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmUubmFtZSA9IGRpcmVjdGl2ZS5uYW1lIHx8IG5hbWU7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlIHx8IChkaXJlY3RpdmUuY29udHJvbGxlciAmJiBkaXJlY3RpdmUubmFtZSk7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0EnOwogICAgICAgICAgICAgICAgZGlyZWN0aXZlcy5wdXNoKGRpcmVjdGl2ZSk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7CiAgICAgICAgICB9XSk7CiAgICAgIH0KICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXS5wdXNoKGRpcmVjdGl2ZUZhY3RvcnkpOwogICAgfSBlbHNlIHsKICAgICAgZm9yRWFjaChuYW1lLCByZXZlcnNlUGFyYW1zKHJlZ2lzdGVyRGlyZWN0aXZlKSk7CiAgICB9CiAgICByZXR1cm4gdGhpczsKICB9OwoKCiAgdGhpcy4kZ2V0ID0gWwogICAgICAgICAgICAnJGluamVjdG9yJywgJyRpbnRlcnBvbGF0ZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckcGFyc2UnLAogICAgICAgICAgICAnJGNvbnRyb2xsZXInLCAnJHJvb3RTY29wZScsCiAgICBmdW5jdGlvbigkaW5qZWN0b3IsICAgJGludGVycG9sYXRlLCAgICRleGNlcHRpb25IYW5kbGVyLCAgICRodHRwLCAgICR0ZW1wbGF0ZUNhY2hlLCAgICRwYXJzZSwKICAgICAgICAgICAgICRjb250cm9sbGVyLCAgICRyb290U2NvcGUpIHsKCiAgICB2YXIgQXR0cmlidXRlcyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHsKICAgICAgdGhpcy4kJGVsZW1lbnQgPSBlbGVtZW50OwogICAgICB0aGlzLiRhdHRyID0gYXR0ciB8fCB7fTsKICAgIH07CgogICAgQXR0cmlidXRlcy5wcm90b3R5cGUgPSB7CiAgICAgICRub3JtYWxpemU6IGRpcmVjdGl2ZU5vcm1hbGl6ZSwKCgogICAgICAvKioKICAgICAgICogU2V0IGEgbm9ybWFsaXplZCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaW4gYSB3YXkgc3VjaCB0aGF0IGFsbCBkaXJlY3RpdmVzCiAgICAgICAqIGNhbiBzaGFyZSB0aGUgYXR0cmlidXRlLiBUaGlzIGZ1bmN0aW9uIHByb3Blcmx5IGhhbmRsZXMgYm9vbGVhbiBhdHRyaWJ1dGVzLgogICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW59IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuIElmIGBudWxsYCBhdHRyaWJ1dGUgd2lsbCBiZSBkZWxldGVkLgogICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB3cml0ZUF0dHIgSWYgZmFsc2UsIGRvZXMgbm90IHdyaXRlIHRoZSB2YWx1ZSB0byBET00gZWxlbWVudCBhdHRyaWJ1dGUuCiAgICAgICAqICAgICBEZWZhdWx0cyB0byB0cnVlLgogICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGF0dHJOYW1lIE9wdGlvbmFsIG5vbmUgbm9ybWFsaXplZCBuYW1lLiBEZWZhdWx0cyB0byBrZXkuCiAgICAgICAqLwogICAgICAkc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlLCB3cml0ZUF0dHIsIGF0dHJOYW1lKSB7CiAgICAgICAgdmFyIGJvb2xlYW5LZXkgPSBnZXRCb29sZWFuQXR0ck5hbWUodGhpcy4kJGVsZW1lbnRbMF0sIGtleSksCiAgICAgICAgICAgICQkb2JzZXJ2ZXJzID0gdGhpcy4kJG9ic2VydmVyczsKCiAgICAgICAgaWYgKGJvb2xlYW5LZXkpIHsKICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnByb3Aoa2V5LCB2YWx1ZSk7CiAgICAgICAgICBhdHRyTmFtZSA9IGJvb2xlYW5LZXk7CiAgICAgICAgfQoKICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTsKCiAgICAgICAgLy8gdHJhbnNsYXRlIG5vcm1hbGl6ZWQga2V5IHRvIGFjdHVhbCBrZXkKICAgICAgICBpZiAoYXR0ck5hbWUpIHsKICAgICAgICAgIHRoaXMuJGF0dHJba2V5XSA9IGF0dHJOYW1lOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhdHRyTmFtZSA9IHRoaXMuJGF0dHJba2V5XTsKICAgICAgICAgIGlmICghYXR0ck5hbWUpIHsKICAgICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWUgPSBzbmFrZV9jYXNlKGtleSwgJy0nKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICh3cml0ZUF0dHIgIT09IGZhbHNlKSB7CiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5yZW1vdmVBdHRyKGF0dHJOYW1lKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LmF0dHIoYXR0ck5hbWUsIHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIGZpcmUgb2JzZXJ2ZXJzCiAgICAgICAgJCRvYnNlcnZlcnMgJiYgZm9yRWFjaCgkJG9ic2VydmVyc1trZXldLCBmdW5jdGlvbihmbikgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZm4odmFsdWUpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSwKCgogICAgICAvKioKICAgICAgICogT2JzZXJ2ZSBhbiBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlLgogICAgICAgKiBUaGUgb2JzZXJ2ZXIgd2lsbCBuZXZlciBiZSBjYWxsZWQsIGlmIGdpdmVuIGF0dHJpYnV0ZSBpcyBub3QgaW50ZXJwb2xhdGVkLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpIC4KICAgICAgICogQHBhcmFtIHtmdW5jdGlvbigqKX0gZm4gRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciB0aGUgYXR0cmlidXRlIHZhbHVlIGNoYW5nZXMuCiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigqKX0gdGhlIGBmbmAgRnVuY3Rpb24gcGFzc2VkIGluLgogICAgICAgKi8KICAgICAgJG9ic2VydmU6IGZ1bmN0aW9uKGtleSwgZm4pIHsKICAgICAgICB2YXIgYXR0cnMgPSB0aGlzLAogICAgICAgICAgICAkJG9ic2VydmVycyA9IChhdHRycy4kJG9ic2VydmVycyB8fCAoYXR0cnMuJCRvYnNlcnZlcnMgPSB7fSkpLAogICAgICAgICAgICBsaXN0ZW5lcnMgPSAoJCRvYnNlcnZlcnNba2V5XSB8fCAoJCRvYnNlcnZlcnNba2V5XSA9IFtdKSk7CgogICAgICAgIGxpc3RlbmVycy5wdXNoKGZuKTsKICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAoIWxpc3RlbmVycy4kJGludGVyKSB7CiAgICAgICAgICAgIC8vIG5vIG9uZSByZWdpc3RlcmVkIGF0dHJpYnV0ZSBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLCBzbyBsZXRzIGNhbGwgaXQgbWFudWFsbHkKICAgICAgICAgICAgZm4oYXR0cnNba2V5XSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGZuOwogICAgICB9CiAgICB9OwoKICAgIHJldHVybiBjb21waWxlOwoKICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCiAgICBmdW5jdGlvbiBjb21waWxlKCRjb21waWxlTm9kZSwgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSkgewogICAgICBpZiAoISgkY29tcGlsZU5vZGUgaW5zdGFuY2VvZiBqcUxpdGUpKSB7CiAgICAgICAgLy8ganF1ZXJ5IGFsd2F5cyByZXdyYXBzLCB3aGVyZSBhcyB3ZSBuZWVkIHRvIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBzZWxlY3RvciBzbyB0aGF0IHdlIGNhbiBtb2RpZnkgaXQuCiAgICAgICAgJGNvbXBpbGVOb2RlID0ganFMaXRlKCRjb21waWxlTm9kZSk7CiAgICAgIH0KICAgICAgLy8gV2UgY2FuIG5vdCBjb21waWxlIHRvcCBsZXZlbCB0ZXh0IGVsZW1lbnRzIHNpbmNlIHRleHQgbm9kZXMgY2FuIGJlIG1lcmdlZCBhbmQgd2Ugd2lsbAogICAgICAvLyBub3QgYmUgYWJsZSB0byBhdHRhY2ggc2NvcGUgZGF0YSB0byB0aGVtLCBzbyB3ZSB3aWxsIHdyYXAgdGhlbSBpbiA8c3Bhbj4KICAgICAgZm9yRWFjaCgkY29tcGlsZU5vZGUsIGZ1bmN0aW9uKG5vZGUsIGluZGV4KXsKICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzIC8qIHRleHQgbm9kZSAqLykgewogICAgICAgICAgJGNvbXBpbGVOb2RlW2luZGV4XSA9IGpxTGl0ZShub2RlKS53cmFwKCc8c3Bhbj4nKS5wYXJlbnQoKVswXTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICB2YXIgY29tcG9zaXRlTGlua0ZuID0gY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZSwgdHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGUsIG1heFByaW9yaXR5KTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBjbG9uZUNvbm5lY3RGbil7CiAgICAgICAgYXNzZXJ0QXJnKHNjb3BlLCAnc2NvcGUnKTsKICAgICAgICAvLyBpbXBvcnRhbnQhITogd2UgbXVzdCBjYWxsIG91ciBqcUxpdGUuY2xvbmUoKSBzaW5jZSB0aGUgalF1ZXJ5IG9uZSBpcyB0cnlpbmcgdG8gYmUgc21hcnQKICAgICAgICAvLyBhbmQgc29tZXRpbWVzIGNoYW5nZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgRE9NLgogICAgICAgIHZhciAkbGlua05vZGUgPSBjbG9uZUNvbm5lY3RGbgogICAgICAgICAgPyBKUUxpdGVQcm90b3R5cGUuY2xvbmUuY2FsbCgkY29tcGlsZU5vZGUpIC8vIElNUE9SVEFOVCEhIQogICAgICAgICAgOiAkY29tcGlsZU5vZGU7CiAgICAgICAgJGxpbmtOb2RlLmRhdGEoJyRzY29wZScsIHNjb3BlKTsKICAgICAgICBzYWZlQWRkQ2xhc3MoJGxpbmtOb2RlLCAnbmctc2NvcGUnKTsKICAgICAgICBpZiAoY2xvbmVDb25uZWN0Rm4pIGNsb25lQ29ubmVjdEZuKCRsaW5rTm9kZSwgc2NvcGUpOwogICAgICAgIGlmIChjb21wb3NpdGVMaW5rRm4pIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgJGxpbmtOb2RlLCAkbGlua05vZGUpOwogICAgICAgIHJldHVybiAkbGlua05vZGU7CiAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gd3JvbmdNb2RlKGxvY2FsTmFtZSwgbW9kZSkgewogICAgICB0aHJvdyBFcnJvcigiVW5zdXBwb3J0ZWQgJyIgKyBtb2RlICsgIicgZm9yICciICsgbG9jYWxOYW1lICsgIicuIik7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZUFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpIHsKICAgICAgdHJ5IHsKICAgICAgICAkZWxlbWVudC5hZGRDbGFzcyhjbGFzc05hbWUpOwogICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAvLyBpZ25vcmUsIHNpbmNlIGl0IG1lYW5zIHRoYXQgd2UgYXJlIHRyeWluZyB0byBzZXQgY2xhc3Mgb24KICAgICAgICAvLyBTVkcgZWxlbWVudCwgd2hlcmUgY2xhc3MgbmFtZSBpcyByZWFkLW9ubHkuCiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIENvbXBpbGUgZnVuY3Rpb24gbWF0Y2hlcyBlYWNoIG5vZGUgaW4gbm9kZUxpc3QgYWdhaW5zdCB0aGUgZGlyZWN0aXZlcy4gT25jZSBhbGwgZGlyZWN0aXZlcwogICAgICogZm9yIGEgcGFydGljdWxhciBub2RlIGFyZSBjb2xsZWN0ZWQgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGUgY29tcGlsZQogICAgICogZnVuY3Rpb25zIHJldHVybiB2YWx1ZXMgLSB0aGUgbGlua2luZyBmdW5jdGlvbnMgLSBhcmUgY29tYmluZWQgaW50byBhIGNvbXBvc2l0ZSBsaW5raW5nCiAgICAgKiBmdW5jdGlvbiwgd2hpY2ggaXMgdGhlIGEgbGlua2luZyBmdW5jdGlvbiBmb3IgdGhlIG5vZGUuCiAgICAgKgogICAgICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZUxpc3QgYW4gYXJyYXkgb2Ygbm9kZXMgdG8gY29tcGlsZQogICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlWywgY2xvbmVBdHRhY2hGbl19IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZQogICAgICogICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS4KICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19ICRyb290RWxlbWVudCBJZiB0aGUgbm9kZUxpc3QgaXMgdGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGF0aW9uIHRyZWUgdGhlbiB0aGUKICAgICAqICAgICAgICByb290RWxlbWVudCBtdXN0IGJlIHNldCB0aGUganFMaXRlIGNvbGxlY3Rpb24gb2YgdGhlIGNvbXBpbGUgcm9vdC4gVGhpcyBpcwogICAgICogICAgICAgIG5lZWRlZCBzbyB0aGF0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBpdGVtcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCB3aWRnZXRzLgogICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXggZGlyZWN0aXZlIHByaW9yaXR5CiAgICAgKiBAcmV0dXJucyB7P2Z1bmN0aW9ufSBBIGNvbXBvc2l0ZSBsaW5raW5nIGZ1bmN0aW9uIG9mIGFsbCBvZiB0aGUgbWF0Y2hlZCBkaXJlY3RpdmVzIG9yIG51bGwuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbXBpbGVOb2Rlcyhub2RlTGlzdCwgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsIG1heFByaW9yaXR5KSB7CiAgICAgdmFyIGxpbmtGbnMgPSBbXSwKICAgICAgICAgbm9kZUxpbmtGbiwgY2hpbGRMaW5rRm4sIGRpcmVjdGl2ZXMsIGF0dHJzLCBsaW5rRm5Gb3VuZDsKCiAgICAgZm9yKHZhciBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICBhdHRycyA9IG5ldyBBdHRyaWJ1dGVzKCk7CgogICAgICAgLy8gd2UgbXVzdCBhbHdheXMgcmVmZXIgdG8gbm9kZUxpc3RbaV0gc2luY2UgdGhlIG5vZGVzIGNhbiBiZSByZXBsYWNlZCB1bmRlcm5lYXRoIHVzLgogICAgICAgZGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKG5vZGVMaXN0W2ldLCBbXSwgYXR0cnMsIG1heFByaW9yaXR5KTsKCiAgICAgICBub2RlTGlua0ZuID0gKGRpcmVjdGl2ZXMubGVuZ3RoKQogICAgICAgICAgID8gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIG5vZGVMaXN0W2ldLCBhdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQpCiAgICAgICAgICAgOiBudWxsOwoKICAgICAgIGNoaWxkTGlua0ZuID0gKG5vZGVMaW5rRm4gJiYgbm9kZUxpbmtGbi50ZXJtaW5hbCkKICAgICAgICAgICA/IG51bGwKICAgICAgICAgICA6IGNvbXBpbGVOb2Rlcyhub2RlTGlzdFtpXS5jaGlsZE5vZGVzLAogICAgICAgICAgICAgICAgbm9kZUxpbmtGbiA/IG5vZGVMaW5rRm4udHJhbnNjbHVkZSA6IHRyYW5zY2x1ZGVGbik7CgogICAgICAgbGlua0Zucy5wdXNoKG5vZGVMaW5rRm4pOwogICAgICAgbGlua0Zucy5wdXNoKGNoaWxkTGlua0ZuKTsKICAgICAgIGxpbmtGbkZvdW5kID0gKGxpbmtGbkZvdW5kIHx8IG5vZGVMaW5rRm4gfHwgY2hpbGRMaW5rRm4pOwogICAgIH0KCiAgICAgLy8gcmV0dXJuIGEgbGlua2luZyBmdW5jdGlvbiBpZiB3ZSBoYXZlIGZvdW5kIGFueXRoaW5nLCBudWxsIG90aGVyd2lzZQogICAgIHJldHVybiBsaW5rRm5Gb3VuZCA/IGNvbXBvc2l0ZUxpbmtGbiA6IG51bGw7CgogICAgIGZ1bmN0aW9uIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgbm9kZUxpc3QsICRyb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHsKICAgICAgIHZhciBub2RlTGlua0ZuLCBjaGlsZExpbmtGbiwgbm9kZSwgY2hpbGRTY29wZSwgY2hpbGRUcmFuc2NsdWRlRm47CgogICAgICAgZm9yKHZhciBpID0gMCwgbiA9IDAsIGlpID0gbGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgbisrKSB7CiAgICAgICAgIG5vZGUgPSBub2RlTGlzdFtuXTsKICAgICAgICAgbm9kZUxpbmtGbiA9IGxpbmtGbnNbaSsrXTsKICAgICAgICAgY2hpbGRMaW5rRm4gPSBsaW5rRm5zW2krK107CgogICAgICAgICBpZiAobm9kZUxpbmtGbikgewogICAgICAgICAgIGlmIChub2RlTGlua0ZuLnNjb3BlKSB7CiAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGUuJG5ldyhpc09iamVjdChub2RlTGlua0ZuLnNjb3BlKSk7CiAgICAgICAgICAgICBqcUxpdGUobm9kZSkuZGF0YSgnJHNjb3BlJywgY2hpbGRTY29wZSk7CiAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBzY29wZTsKICAgICAgICAgICB9CiAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBub2RlTGlua0ZuLnRyYW5zY2x1ZGU7CiAgICAgICAgICAgaWYgKGNoaWxkVHJhbnNjbHVkZUZuIHx8ICghYm91bmRUcmFuc2NsdWRlRm4gJiYgdHJhbnNjbHVkZUZuKSkgewogICAgICAgICAgICAgbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgY2hpbGRTY29wZSwgbm9kZSwgJHJvb3RFbGVtZW50LAogICAgICAgICAgICAgICAgIChmdW5jdGlvbih0cmFuc2NsdWRlRm4pIHsKICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjbG9uZUZuKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2NsdWRlU2NvcGUgPSBzY29wZS4kbmV3KCk7CgogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVTY29wZSwgY2xvbmVGbikuCiAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kKCckZGVzdHJveScsIGJpbmQodHJhbnNjbHVkZVNjb3BlLCB0cmFuc2NsdWRlU2NvcGUuJGRlc3Ryb3kpKTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICB9KShjaGlsZFRyYW5zY2x1ZGVGbiB8fCB0cmFuc2NsdWRlRm4pCiAgICAgICAgICAgICApOwogICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBjaGlsZFNjb3BlLCBub2RlLCB1bmRlZmluZWQsIGJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICAgICB9CiAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRMaW5rRm4pIHsKICAgICAgICAgICBjaGlsZExpbmtGbihzY29wZSwgbm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIGJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICAgfQogICAgICAgfQogICAgIH0KICAgfQoKCiAgICAvKioKICAgICAqIExvb2tzIGZvciBkaXJlY3RpdmVzIG9uIHRoZSBnaXZlbiBub2RlIGFuZHMgdGhlbSB0byB0aGUgZGlyZWN0aXZlIGNvbGxlY3Rpb24gd2hpY2ggaXMgc29ydGVkLgogICAgICoKICAgICAqIEBwYXJhbSBub2RlIG5vZGUgdG8gc2VhcmNoCiAgICAgKiBAcGFyYW0gZGlyZWN0aXZlcyBhbiBhcnJheSB0byB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYWRkZWQgdG8uIFRoaXMgYXJyYXkgaXMgc29ydGVkIGJlZm9yZQogICAgICogICAgICAgIHRoZSBmdW5jdGlvbiByZXR1cm5zLgogICAgICogQHBhcmFtIGF0dHJzIHRoZSBzaGFyZWQgYXR0cnMgb2JqZWN0IHdoaWNoIGlzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIG5vcm1hbGl6ZWQgYXR0cmlidXRlcy4KICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4IGRpcmVjdGl2ZSBwcmlvcml0eQogICAgICovCiAgICBmdW5jdGlvbiBjb2xsZWN0RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHkpIHsKICAgICAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZSwKICAgICAgICAgIGF0dHJzTWFwID0gYXR0cnMuJGF0dHIsCiAgICAgICAgICBtYXRjaCwKICAgICAgICAgIGNsYXNzTmFtZTsKCiAgICAgIHN3aXRjaChub2RlVHlwZSkgewogICAgICAgIGNhc2UgMTogLyogRWxlbWVudCAqLwogICAgICAgICAgLy8gdXNlIHRoZSBub2RlIG5hbWU6IDxkaXJlY3RpdmU+CiAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywKICAgICAgICAgICAgICBkaXJlY3RpdmVOb3JtYWxpemUobm9kZU5hbWVfKG5vZGUpLnRvTG93ZXJDYXNlKCkpLCAnRScsIG1heFByaW9yaXR5KTsKCiAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgdGhlIGF0dHJpYnV0ZXMKICAgICAgICAgIGZvciAodmFyIGF0dHIsIG5hbWUsIG5OYW1lLCB2YWx1ZSwgbkF0dHJzID0gbm9kZS5hdHRyaWJ1dGVzLAogICAgICAgICAgICAgICAgICAgaiA9IDAsIGpqID0gbkF0dHJzICYmIG5BdHRycy5sZW5ndGg7IGogPCBqajsgaisrKSB7CiAgICAgICAgICAgIGF0dHIgPSBuQXR0cnNbal07CiAgICAgICAgICAgIGlmIChhdHRyLnNwZWNpZmllZCkgewogICAgICAgICAgICAgIG5hbWUgPSBhdHRyLm5hbWU7CiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobmFtZS50b0xvd2VyQ2FzZSgpKTsKICAgICAgICAgICAgICBhdHRyc01hcFtuTmFtZV0gPSBuYW1lOwogICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHZhbHVlID0gdHJpbSgobXNpZSAmJiBuYW1lID09ICdocmVmJykKICAgICAgICAgICAgICAgID8gZGVjb2RlVVJJQ29tcG9uZW50KG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUsIDIpKQogICAgICAgICAgICAgICAgOiBhdHRyLnZhbHVlKTsKICAgICAgICAgICAgICBpZiAoZ2V0Qm9vbGVhbkF0dHJOYW1lKG5vZGUsIG5OYW1lKSkgewogICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJ1ZTsgLy8gcHJlc2VuY2UgbWVhbnMgdHJ1ZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUobm9kZSwgZGlyZWN0aXZlcywgdmFsdWUsIG5OYW1lKTsKICAgICAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdBJywgbWF4UHJpb3JpdHkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8gdXNlIGNsYXNzIGFzIGRpcmVjdGl2ZQogICAgICAgICAgY2xhc3NOYW1lID0gbm9kZS5jbGFzc05hbWU7CiAgICAgICAgICBpZiAoaXNTdHJpbmcoY2xhc3NOYW1lKSkgewogICAgICAgICAgICB3aGlsZSAobWF0Y2ggPSBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMoY2xhc3NOYW1lKSkgewogICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzJdKTsKICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQycsIG1heFByaW9yaXR5KSkgewogICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFszXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zdWJzdHIobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDM6IC8qIFRleHQgTm9kZSAqLwogICAgICAgICAgYWRkVGV4dEludGVycG9sYXRlRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5vZGUubm9kZVZhbHVlKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgODogLyogQ29tbWVudCAqLwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgbWF0Y2ggPSBDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAuZXhlYyhub2RlLm5vZGVWYWx1ZSk7CiAgICAgICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzFdKTsKICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnTScsIG1heFByaW9yaXR5KSkgewogICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFsyXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIC8vIHR1cm5zIG91dCB0aGF0IHVuZGVyIHNvbWUgY2lyY3Vtc3RhbmNlcyBJRTkgdGhyb3dzIGVycm9ycyB3aGVuIG9uZSBhdHRlbXB0cyB0byByZWFkIGNvbW1lbnQncyBub2RlIHZhbHVlLgogICAgICAgICAgICAvLyBKdXN0IGlnbm9yZSBpdCBhbmQgY29udGludWUuIChDYW4ndCBzZWVtIHRvIHJlcHJvZHVjZSBpbiB0ZXN0IGNhc2UuKQogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGRpcmVjdGl2ZXMuc29ydChieVByaW9yaXR5KTsKICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7CiAgICB9CgoKICAgIC8qKgogICAgICogT25jZSB0aGUgZGlyZWN0aXZlcyBoYXZlIGJlZW4gY29sbGVjdGVkIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb25zIGlzIGV4ZWN1dGVkLiBUaGlzIG1ldGhvZAogICAgICogaXMgcmVzcG9uc2libGUgZm9yIGlubGluaW5nIGRpcmVjdGl2ZSB0ZW1wbGF0ZXMgYXMgd2VsbCBhcyB0ZXJtaW5hdGluZyB0aGUgYXBwbGljYXRpb24KICAgICAqIG9mIHRoZSBkaXJlY3RpdmVzIGlmIHRoZSB0ZXJtaW5hbCBkaXJlY3RpdmUgaGFzIGJlZW4gcmVhY2hlZC4uCiAgICAgKgogICAgICogQHBhcmFtIHtBcnJheX0gZGlyZWN0aXZlcyBBcnJheSBvZiBjb2xsZWN0ZWQgZGlyZWN0aXZlcyB0byBleGVjdXRlIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb24uCiAgICAgKiAgICAgICAgdGhpcyBuZWVkcyB0byBiZSBwcmUtc29ydGVkIGJ5IHByaW9yaXR5IG9yZGVyLgogICAgICogQHBhcmFtIHtOb2RlfSBjb21waWxlTm9kZSBUaGUgcmF3IERPTSBub2RlIHRvIGFwcGx5IHRoZSBjb21waWxlIGZ1bmN0aW9ucyB0bwogICAgICogQHBhcmFtIHtPYmplY3R9IHRlbXBsYXRlQXR0cnMgVGhlIHNoYXJlZCBhdHRyaWJ1dGUgZnVuY3Rpb24KICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZVssIGNsb25lQXR0YWNoRm5dfSB0cmFuc2NsdWRlRm4gQSBsaW5raW5nIGZ1bmN0aW9uLCB3aGVyZSB0aGUKICAgICAqICAgICAgICBzY29wZSBhcmd1bWVudCBpcyBhdXRvLWdlbmVyYXRlZCB0byB0aGUgbmV3IGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuCiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9ICRyb290RWxlbWVudCBJZiB3ZSBhcmUgd29ya2luZyBvbiB0aGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlIHRoZW4gdGhpcwogICAgICogICAgICAgIGFyZ3VtZW50IGhhcyB0aGUgcm9vdCBqcUxpdGUgYXJyYXkgc28gdGhhdCB3ZSBjYW4gcmVwbGFjZSB3aWRnZXRzIG9uIGl0LgogICAgICogQHJldHVybnMgbGlua0ZuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQpIHsKICAgICAgdmFyIHRlcm1pbmFsUHJpb3JpdHkgPSAtTnVtYmVyLk1BWF9WQUxVRSwKICAgICAgICAgIHByZUxpbmtGbnMgPSBbXSwKICAgICAgICAgIHBvc3RMaW5rRm5zID0gW10sCiAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZSA9IG51bGwsCiAgICAgICAgICBuZXdJc29sYXRlZFNjb3BlRGlyZWN0aXZlID0gbnVsbCwKICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gbnVsbCwKICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0ganFMaXRlKGNvbXBpbGVOb2RlKSwKICAgICAgICAgIGRpcmVjdGl2ZSwKICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsCiAgICAgICAgICAkdGVtcGxhdGUsCiAgICAgICAgICB0cmFuc2NsdWRlRGlyZWN0aXZlLAogICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSB0cmFuc2NsdWRlRm4sCiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcywKICAgICAgICAgIGxpbmtGbiwKICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlOwoKICAgICAgLy8gZXhlY3V0ZXMgYWxsIGRpcmVjdGl2ZXMgb24gdGhlIGN1cnJlbnQgZWxlbWVudAogICAgICBmb3IodmFyIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07CiAgICAgICAgJHRlbXBsYXRlID0gdW5kZWZpbmVkOwoKICAgICAgICBpZiAodGVybWluYWxQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkgewogICAgICAgICAgYnJlYWs7IC8vIHByZXZlbnQgZnVydGhlciBwcm9jZXNzaW5nIG9mIGRpcmVjdGl2ZXMKICAgICAgICB9CgogICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS5zY29wZSkgewogICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ2lzb2xhdGVkIHNjb3BlJywgbmV3SXNvbGF0ZWRTY29wZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpOwogICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkgewogICAgICAgICAgICBzYWZlQWRkQ2xhc3MoJGNvbXBpbGVOb2RlLCAnbmctaXNvbGF0ZS1zY29wZScpOwogICAgICAgICAgICBuZXdJc29sYXRlZFNjb3BlRGlyZWN0aXZlID0gZGlyZWN0aXZlOwogICAgICAgICAgfQogICAgICAgICAgc2FmZUFkZENsYXNzKCRjb21waWxlTm9kZSwgJ25nLXNjb3BlJyk7CiAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZSA9IG5ld1Njb3BlRGlyZWN0aXZlIHx8IGRpcmVjdGl2ZTsKICAgICAgICB9CgogICAgICAgIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmUubmFtZTsKCiAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHsKICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gY29udHJvbGxlckRpcmVjdGl2ZXMgfHwge307CiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgiJyIgKyBkaXJlY3RpdmVOYW1lICsgIicgY29udHJvbGxlciIsCiAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0sIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTsKICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gZGlyZWN0aXZlOwogICAgICAgIH0KCiAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLnRyYW5zY2x1ZGUpIHsKICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0cmFuc2NsdXNpb24nLCB0cmFuc2NsdWRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7CiAgICAgICAgICB0cmFuc2NsdWRlRGlyZWN0aXZlID0gZGlyZWN0aXZlOwogICAgICAgICAgdGVybWluYWxQcmlvcml0eSA9IGRpcmVjdGl2ZS5wcmlvcml0eTsKICAgICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9PSAnZWxlbWVudCcpIHsKICAgICAgICAgICAgJHRlbXBsYXRlID0ganFMaXRlKGNvbXBpbGVOb2RlKTsKICAgICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPQogICAgICAgICAgICAgICAganFMaXRlKCc8IS0tICcgKyBkaXJlY3RpdmVOYW1lICsgJzogJyArIHRlbXBsYXRlQXR0cnNbZGlyZWN0aXZlTmFtZV0gICsgJyAtLT4nKTsKICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkY29tcGlsZU5vZGVbMF07CiAgICAgICAgICAgIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwganFMaXRlKCR0ZW1wbGF0ZVswXSksIGNvbXBpbGVOb2RlKTsKICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuLCB0ZXJtaW5hbFByaW9yaXR5KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICR0ZW1wbGF0ZSA9IGpxTGl0ZShKUUxpdGVDbG9uZShjb21waWxlTm9kZSkpLmNvbnRlbnRzKCk7CiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKCcnKTsgLy8gY2xlYXIgY29udGVudHMKICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS50ZW1wbGF0ZSkgewogICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RlbXBsYXRlJywgdGVtcGxhdGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTsKICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlOwoKICAgICAgICAgICR0ZW1wbGF0ZSA9IGpxTGl0ZSgnPGRpdj4nICsgdHJpbShkaXJlY3RpdmVWYWx1ZSkgKyAnPC9kaXY+JykuY29udGVudHMoKTsKICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdOwoKICAgICAgICAgIGlmIChkaXJlY3RpdmUucmVwbGFjZSkgewogICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSAxKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1VTFRJX1JPT1RfVEVNUExBVEVfRVJST1IgKyBkaXJlY3RpdmVWYWx1ZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwgJGNvbXBpbGVOb2RlLCBjb21waWxlTm9kZSk7CgogICAgICAgICAgICB2YXIgbmV3VGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319OwoKICAgICAgICAgICAgLy8gY29tYmluZSBkaXJlY3RpdmVzIGZyb20gdGhlIG9yaWdpbmFsIG5vZGUgYW5kIGZyb20gdGhlIHRlbXBsYXRlOgogICAgICAgICAgICAvLyAtIHRha2UgdGhlIGFycmF5IG9mIGRpcmVjdGl2ZXMgZm9yIHRoaXMgZWxlbWVudAogICAgICAgICAgICAvLyAtIHNwbGl0IGl0IGludG8gdHdvIHBhcnRzLCB0aG9zZSB0aGF0IHdlcmUgYWxyZWFkeSBhcHBsaWVkIGFuZCB0aG9zZSB0aGF0IHdlcmVuJ3QKICAgICAgICAgICAgLy8gLSBjb2xsZWN0IGRpcmVjdGl2ZXMgZnJvbSB0aGUgdGVtcGxhdGUsIGFkZCB0aGVtIHRvIHRoZSBzZWNvbmQgZ3JvdXAgYW5kIHNvcnQgdGhlbQogICAgICAgICAgICAvLyAtIGFwcGVuZCB0aGUgc2Vjb25kIGdyb3VwIHdpdGggbmV3IGRpcmVjdGl2ZXMgdG8gdGhlIGZpcnN0IGdyb3VwCiAgICAgICAgICAgIGRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLmNvbmNhdCgKICAgICAgICAgICAgICAgIGNvbGxlY3REaXJlY3RpdmVzKAogICAgICAgICAgICAgICAgICAgIGNvbXBpbGVOb2RlLAogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXMuc3BsaWNlKGkgKyAxLCBkaXJlY3RpdmVzLmxlbmd0aCAtIChpICsgMSkpLAogICAgICAgICAgICAgICAgICAgIG5ld1RlbXBsYXRlQXR0cnMKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgKTsKICAgICAgICAgICAgbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXModGVtcGxhdGVBdHRycywgbmV3VGVtcGxhdGVBdHRycyk7CgogICAgICAgICAgICBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmh0bWwoZGlyZWN0aXZlVmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkgewogICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RlbXBsYXRlJywgdGVtcGxhdGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTsKICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlOwogICAgICAgICAgbm9kZUxpbmtGbiA9IGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLnNwbGljZShpLCBkaXJlY3RpdmVzLmxlbmd0aCAtIGkpLAogICAgICAgICAgICAgIG5vZGVMaW5rRm4sICRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgJHJvb3RFbGVtZW50LCBkaXJlY3RpdmUucmVwbGFjZSwKICAgICAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbik7CiAgICAgICAgICBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOwogICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aXZlLmNvbXBpbGUpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGxpbmtGbiA9IGRpcmVjdGl2ZS5jb21waWxlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgY2hpbGRUcmFuc2NsdWRlRm4pOwogICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihsaW5rRm4pKSB7CiAgICAgICAgICAgICAgYWRkTGlua0ZucyhudWxsLCBsaW5rRm4pOwogICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmtGbikgewogICAgICAgICAgICAgIGFkZExpbmtGbnMobGlua0ZuLnByZSwgbGlua0ZuLnBvc3QpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRjb21waWxlTm9kZSkpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZXJtaW5hbCkgewogICAgICAgICAgbm9kZUxpbmtGbi50ZXJtaW5hbCA9IHRydWU7CiAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gTWF0aC5tYXgodGVybWluYWxQcmlvcml0eSwgZGlyZWN0aXZlLnByaW9yaXR5KTsKICAgICAgICB9CgogICAgICB9CgogICAgICBub2RlTGlua0ZuLnNjb3BlID0gbmV3U2NvcGVEaXJlY3RpdmUgJiYgbmV3U2NvcGVEaXJlY3RpdmUuc2NvcGU7CiAgICAgIG5vZGVMaW5rRm4udHJhbnNjbHVkZSA9IHRyYW5zY2x1ZGVEaXJlY3RpdmUgJiYgY2hpbGRUcmFuc2NsdWRlRm47CgogICAgICAvLyBtaWdodCBiZSBub3JtYWwgb3IgZGVsYXllZCBub2RlTGlua0ZuIGRlcGVuZGluZyBvbiBpZiB0ZW1wbGF0ZVVybCBpcyBwcmVzZW50CiAgICAgIHJldHVybiBub2RlTGlua0ZuOwoKICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAgIGZ1bmN0aW9uIGFkZExpbmtGbnMocHJlLCBwb3N0KSB7CiAgICAgICAgaWYgKHByZSkgewogICAgICAgICAgcHJlLnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZTsKICAgICAgICAgIHByZUxpbmtGbnMucHVzaChwcmUpOwogICAgICAgIH0KICAgICAgICBpZiAocG9zdCkgewogICAgICAgICAgcG9zdC5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7CiAgICAgICAgICBwb3N0TGlua0Zucy5wdXNoKHBvc3QpOwogICAgICAgIH0KICAgICAgfQoKCiAgICAgIGZ1bmN0aW9uIGdldENvbnRyb2xsZXJzKHJlcXVpcmUsICRlbGVtZW50KSB7CiAgICAgICAgdmFyIHZhbHVlLCByZXRyaWV2YWxNZXRob2QgPSAnZGF0YScsIG9wdGlvbmFsID0gZmFsc2U7CiAgICAgICAgaWYgKGlzU3RyaW5nKHJlcXVpcmUpKSB7CiAgICAgICAgICB3aGlsZSgodmFsdWUgPSByZXF1aXJlLmNoYXJBdCgwKSkgPT0gJ14nIHx8IHZhbHVlID09ICc/JykgewogICAgICAgICAgICByZXF1aXJlID0gcmVxdWlyZS5zdWJzdHIoMSk7CiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAnXicpIHsKICAgICAgICAgICAgICByZXRyaWV2YWxNZXRob2QgPSAnaW5oZXJpdGVkRGF0YSc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3B0aW9uYWwgPSBvcHRpb25hbCB8fCB2YWx1ZSA9PSAnPyc7CiAgICAgICAgICB9CiAgICAgICAgICB2YWx1ZSA9ICRlbGVtZW50W3JldHJpZXZhbE1ldGhvZF0oJyQnICsgcmVxdWlyZSArICdDb250cm9sbGVyJyk7CiAgICAgICAgICBpZiAoIXZhbHVlICYmICFvcHRpb25hbCkgewogICAgICAgICAgICB0aHJvdyBFcnJvcigiTm8gY29udHJvbGxlcjogIiArIHJlcXVpcmUpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShyZXF1aXJlKSkgewogICAgICAgICAgdmFsdWUgPSBbXTsKICAgICAgICAgIGZvckVhY2gocmVxdWlyZSwgZnVuY3Rpb24ocmVxdWlyZSkgewogICAgICAgICAgICB2YWx1ZS5wdXNoKGdldENvbnRyb2xsZXJzKHJlcXVpcmUsICRlbGVtZW50KSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9CgoKICAgICAgZnVuY3Rpb24gbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7CiAgICAgICAgdmFyIGF0dHJzLCAkZWxlbWVudCwgaSwgaWksIGxpbmtGbiwgY29udHJvbGxlcjsKCiAgICAgICAgaWYgKGNvbXBpbGVOb2RlID09PSBsaW5rTm9kZSkgewogICAgICAgICAgYXR0cnMgPSB0ZW1wbGF0ZUF0dHJzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhdHRycyA9IHNoYWxsb3dDb3B5KHRlbXBsYXRlQXR0cnMsIG5ldyBBdHRyaWJ1dGVzKGpxTGl0ZShsaW5rTm9kZSksIHRlbXBsYXRlQXR0cnMuJGF0dHIpKTsKICAgICAgICB9CiAgICAgICAgJGVsZW1lbnQgPSBhdHRycy4kJGVsZW1lbnQ7CgogICAgICAgIGlmIChuZXdTY29wZURpcmVjdGl2ZSAmJiBpc09iamVjdChuZXdTY29wZURpcmVjdGl2ZS5zY29wZSkpIHsKICAgICAgICAgIHZhciBMT0NBTF9SRUdFWFAgPSAvXlxzKihbQD0mXSlccyooXHcqKVxzKiQvOwoKICAgICAgICAgIHZhciBwYXJlbnRTY29wZSA9IHNjb3BlLiRwYXJlbnQgfHwgc2NvcGU7CgogICAgICAgICAgZm9yRWFjaChuZXdTY29wZURpcmVjdGl2ZS5zY29wZSwgZnVuY3Rpb24oZGVmaW5pdG9uLCBzY29wZU5hbWUpIHsKICAgICAgICAgICAgdmFyIG1hdGNoID0gZGVmaW5pdG9uLm1hdGNoKExPQ0FMX1JFR0VYUCkgfHwgW10sCiAgICAgICAgICAgICAgICBhdHRyTmFtZSA9IG1hdGNoWzJdfHwgc2NvcGVOYW1lLAogICAgICAgICAgICAgICAgbW9kZSA9IG1hdGNoWzFdLCAvLyBALCA9LCBvciAmCiAgICAgICAgICAgICAgICBsYXN0VmFsdWUsCiAgICAgICAgICAgICAgICBwYXJlbnRHZXQsIHBhcmVudFNldDsKCiAgICAgICAgICAgIHN3aXRjaCAobW9kZSkgewoKICAgICAgICAgICAgICBjYXNlICdAJzogewogICAgICAgICAgICAgICAgYXR0cnMuJG9ic2VydmUoYXR0ck5hbWUsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgIHNjb3BlW3Njb3BlTmFtZV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgYXR0cnMuJCRvYnNlcnZlcnNbYXR0ck5hbWVdLiQkc2NvcGUgPSBwYXJlbnRTY29wZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSAnPSc6IHsKICAgICAgICAgICAgICAgIHBhcmVudEdldCA9ICRwYXJzZShhdHRyc1thdHRyTmFtZV0pOwogICAgICAgICAgICAgICAgcGFyZW50U2V0ID0gcGFyZW50R2V0LmFzc2lnbiB8fCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGNoYW5nZSwgb3Igd2Ugd2lsbCB0aHJvdyB0aGlzIGV4Y2VwdGlvbiBvbiBldmVyeSAkZGlnZXN0CiAgICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHNjb3BlW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQocGFyZW50U2NvcGUpOwogICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihOT05fQVNTSUdOQUJMRV9NT0RFTF9FWFBSRVNTSU9OICsgYXR0cnNbYXR0ck5hbWVdICsKICAgICAgICAgICAgICAgICAgICAgICcgKGRpcmVjdGl2ZTogJyArIG5ld1Njb3BlRGlyZWN0aXZlLm5hbWUgKyAnKScpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHNjb3BlW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQocGFyZW50U2NvcGUpOwogICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICB2YXIgcGFyZW50VmFsdWUgPSBwYXJlbnRHZXQocGFyZW50U2NvcGUpOwoKICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudFZhbHVlICE9PSBzY29wZVtzY29wZU5hbWVdKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIG91dCBvZiBzeW5jIGFuZCBuZWVkIHRvIGNvcHkKICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50VmFsdWUgIT09IGxhc3RWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgLy8gcGFyZW50IGNoYW5nZWQgYW5kIGl0IGhhcyBwcmVjZWRlbmNlCiAgICAgICAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBzY29wZVtzY29wZU5hbWVdID0gcGFyZW50VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgY2FuIGJlIGFzc2lnbmVkIHRoZW4gZG8gc28KICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFNldChwYXJlbnRTY29wZSwgbGFzdFZhbHVlID0gc2NvcGVbc2NvcGVOYW1lXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRWYWx1ZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlICcmJzogewogICAgICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7CiAgICAgICAgICAgICAgICBzY29wZVtzY29wZU5hbWVdID0gZnVuY3Rpb24obG9jYWxzKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRHZXQocGFyZW50U2NvcGUsIGxvY2Fscyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGRlZmF1bHQ6IHsKICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIGlzb2xhdGUgc2NvcGUgZGVmaW5pdGlvbiBmb3IgZGlyZWN0aXZlICcgKwogICAgICAgICAgICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlLm5hbWUgKyAnOiAnICsgZGVmaW5pdG9uKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKGNvbnRyb2xsZXJEaXJlY3RpdmVzKSB7CiAgICAgICAgICBmb3JFYWNoKGNvbnRyb2xsZXJEaXJlY3RpdmVzLCBmdW5jdGlvbihkaXJlY3RpdmUpIHsKICAgICAgICAgICAgdmFyIGxvY2FscyA9IHsKICAgICAgICAgICAgICAkc2NvcGU6IHNjb3BlLAogICAgICAgICAgICAgICRlbGVtZW50OiAkZWxlbWVudCwKICAgICAgICAgICAgICAkYXR0cnM6IGF0dHJzLAogICAgICAgICAgICAgICR0cmFuc2NsdWRlOiBib3VuZFRyYW5zY2x1ZGVGbgogICAgICAgICAgICB9OwoKICAgICAgICAgICAgY29udHJvbGxlciA9IGRpcmVjdGl2ZS5jb250cm9sbGVyOwogICAgICAgICAgICBpZiAoY29udHJvbGxlciA9PSAnQCcpIHsKICAgICAgICAgICAgICBjb250cm9sbGVyID0gYXR0cnNbZGlyZWN0aXZlLm5hbWVdOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkZWxlbWVudC5kYXRhKAogICAgICAgICAgICAgICAgJyQnICsgZGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsCiAgICAgICAgICAgICAgICAkY29udHJvbGxlcihjb250cm9sbGVyLCBsb2NhbHMpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy8gUFJFTElOS0lORwogICAgICAgIGZvcihpID0gMCwgaWkgPSBwcmVMaW5rRm5zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGxpbmtGbiA9IHByZUxpbmtGbnNbaV07CiAgICAgICAgICAgIGxpbmtGbihzY29wZSwgJGVsZW1lbnQsIGF0dHJzLAogICAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLnJlcXVpcmUsICRlbGVtZW50KSk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBSRUNVUlNJT04KICAgICAgICBjaGlsZExpbmtGbiAmJiBjaGlsZExpbmtGbihzY29wZSwgbGlua05vZGUuY2hpbGROb2RlcywgdW5kZWZpbmVkLCBib3VuZFRyYW5zY2x1ZGVGbik7CgogICAgICAgIC8vIFBPU1RMSU5LSU5HCiAgICAgICAgZm9yKGkgPSAwLCBpaSA9IHBvc3RMaW5rRm5zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGxpbmtGbiA9IHBvc3RMaW5rRm5zW2ldOwogICAgICAgICAgICBsaW5rRm4oc2NvcGUsICRlbGVtZW50LCBhdHRycywKICAgICAgICAgICAgICAgIGxpbmtGbi5yZXF1aXJlICYmIGdldENvbnRyb2xsZXJzKGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCkpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlLCBzdGFydGluZ1RhZygkZWxlbWVudCkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKCiAgICAvKioKICAgICAqIGxvb2tzIHVwIHRoZSBkaXJlY3RpdmUgYW5kIGRlY29yYXRlcyBpdCB3aXRoIGV4Y2VwdGlvbiBoYW5kbGluZyBhbmQgcHJvcGVyIHBhcmFtZXRlcnMuIFdlCiAgICAgKiBjYWxsIHRoaXMgdGhlIGJvdW5kRGlyZWN0aXZlLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLgogICAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIFRoZSBkaXJlY3RpdmUgbXVzdCBiZSBmb3VuZCBpbiBzcGVjaWZpYyBmb3JtYXQuCiAgICAgKiAgIFN0cmluZyBjb250YWluaW5nIGFueSBvZiB0aGVzZXMgY2hhcmFjdGVyczoKICAgICAqCiAgICAgKiAgICogYEVgOiBlbGVtZW50IG5hbWUKICAgICAqICAgKiBgQSc6IGF0dHJpYnV0ZQogICAgICogICAqIGBDYDogY2xhc3MKICAgICAqICAgKiBgTWA6IGNvbW1lbnQKICAgICAqIEByZXR1cm5zIHRydWUgaWYgZGlyZWN0aXZlIHdhcyBhZGRlZC4KICAgICAqLwogICAgZnVuY3Rpb24gYWRkRGlyZWN0aXZlKHREaXJlY3RpdmVzLCBuYW1lLCBsb2NhdGlvbiwgbWF4UHJpb3JpdHkpIHsKICAgICAgdmFyIG1hdGNoID0gZmFsc2U7CiAgICAgIGlmIChoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgZm9yKHZhciBkaXJlY3RpdmUsIGRpcmVjdGl2ZXMgPSAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBTdWZmaXgpLAogICAgICAgICAgICBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaTxpaTsgaSsrKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldOwogICAgICAgICAgICBpZiAoIChtYXhQcmlvcml0eSA9PT0gdW5kZWZpbmVkIHx8IG1heFByaW9yaXR5ID4gZGlyZWN0aXZlLnByaW9yaXR5KSAmJgogICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5yZXN0cmljdC5pbmRleE9mKGxvY2F0aW9uKSAhPSAtMSkgewogICAgICAgICAgICAgIHREaXJlY3RpdmVzLnB1c2goZGlyZWN0aXZlKTsKICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2goZSkgeyAkZXhjZXB0aW9uSGFuZGxlcihlKTsgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gbWF0Y2g7CiAgICB9CgoKICAgIC8qKgogICAgICogV2hlbiB0aGUgZWxlbWVudCBpcyByZXBsYWNlZCB3aXRoIEhUTUwgdGVtcGxhdGUgdGhlbiB0aGUgbmV3IGF0dHJpYnV0ZXMKICAgICAqIG9uIHRoZSB0ZW1wbGF0ZSBuZWVkIHRvIGJlIG1lcmdlZCB3aXRoIHRoZSBleGlzdGluZyBhdHRyaWJ1dGVzIGluIHRoZSBET00uCiAgICAgKiBUaGUgZGVzaXJlZCBlZmZlY3QgaXMgdG8gaGF2ZSBib3RoIG9mIHRoZSBhdHRyaWJ1dGVzIHByZXNlbnQuCiAgICAgKgogICAgICogQHBhcmFtIHtvYmplY3R9IGRzdCBkZXN0aW5hdGlvbiBhdHRyaWJ1dGVzIChvcmlnaW5hbCBET00pCiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3JjIHNvdXJjZSBhdHRyaWJ1dGVzIChmcm9tIHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUpCiAgICAgKi8KICAgIGZ1bmN0aW9uIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKGRzdCwgc3JjKSB7CiAgICAgIHZhciBzcmNBdHRyID0gc3JjLiRhdHRyLAogICAgICAgICAgZHN0QXR0ciA9IGRzdC4kYXR0ciwKICAgICAgICAgICRlbGVtZW50ID0gZHN0LiQkZWxlbWVudDsKCiAgICAgIC8vIHJlYXBwbHkgdGhlIG9sZCBhdHRyaWJ1dGVzIHRvIHRoZSBuZXcgZWxlbWVudAogICAgICBmb3JFYWNoKGRzdCwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgIGlmIChrZXkuY2hhckF0KDApICE9ICckJykgewogICAgICAgICAgaWYgKHNyY1trZXldKSB7CiAgICAgICAgICAgIHZhbHVlICs9IChrZXkgPT09ICdzdHlsZScgPyAnOycgOiAnICcpICsgc3JjW2tleV07CiAgICAgICAgICB9CiAgICAgICAgICBkc3QuJHNldChrZXksIHZhbHVlLCB0cnVlLCBzcmNBdHRyW2tleV0pOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICAvLyBjb3B5IHRoZSBuZXcgYXR0cmlidXRlcyBvbiB0aGUgb2xkIGF0dHJzIG9iamVjdAogICAgICBmb3JFYWNoKHNyYywgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgIGlmIChrZXkgPT0gJ2NsYXNzJykgewogICAgICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCB2YWx1ZSk7CiAgICAgICAgICBkc3RbJ2NsYXNzJ10gPSAoZHN0WydjbGFzcyddID8gZHN0WydjbGFzcyddICsgJyAnIDogJycpICsgdmFsdWU7CiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gJ3N0eWxlJykgewogICAgICAgICAgJGVsZW1lbnQuYXR0cignc3R5bGUnLCAkZWxlbWVudC5hdHRyKCdzdHlsZScpICsgJzsnICsgdmFsdWUpOwogICAgICAgIH0gZWxzZSBpZiAoa2V5LmNoYXJBdCgwKSAhPSAnJCcgJiYgIWRzdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICBkc3Rba2V5XSA9IHZhbHVlOwogICAgICAgICAgZHN0QXR0cltrZXldID0gc3JjQXR0cltrZXldOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLCBiZWZvcmVUZW1wbGF0ZU5vZGVMaW5rRm4sICRjb21waWxlTm9kZSwgdEF0dHJzLAogICAgICAgICRyb290RWxlbWVudCwgcmVwbGFjZSwgY2hpbGRUcmFuc2NsdWRlRm4pIHsKICAgICAgdmFyIGxpbmtRdWV1ZSA9IFtdLAogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4sCiAgICAgICAgICBhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sCiAgICAgICAgICBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlID0gJGNvbXBpbGVOb2RlWzBdLAogICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlID0gZGlyZWN0aXZlcy5zaGlmdCgpLAogICAgICAgICAgLy8gVGhlIGZhY3QgdGhhdCB3ZSBoYXZlIHRvIGNvcHkgYW5kIHBhdGNoIHRoZSBkaXJlY3RpdmUgc2VlbXMgd3JvbmchCiAgICAgICAgICBkZXJpdmVkU3luY0RpcmVjdGl2ZSA9IGV4dGVuZCh7fSwgb3JpZ0FzeW5jRGlyZWN0aXZlLCB7CiAgICAgICAgICAgIGNvbnRyb2xsZXI6IG51bGwsIHRlbXBsYXRlVXJsOiBudWxsLCB0cmFuc2NsdWRlOiBudWxsCiAgICAgICAgICB9KTsKCiAgICAgICRjb21waWxlTm9kZS5odG1sKCcnKTsKCiAgICAgICRodHRwLmdldChvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS4KICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uKGNvbnRlbnQpIHsKICAgICAgICAgIHZhciBjb21waWxlTm9kZSwgdGVtcFRlbXBsYXRlQXR0cnMsICR0ZW1wbGF0ZTsKCiAgICAgICAgICBpZiAocmVwbGFjZSkgewogICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUoJzxkaXY+JyArIHRyaW0oY29udGVudCkgKyAnPC9kaXY+JykuY29udGVudHMoKTsKICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkdGVtcGxhdGVbMF07CgogICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSAxKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1VTFRJX1JPT1RfVEVNUExBVEVfRVJST1IgKyBjb250ZW50KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGVtcFRlbXBsYXRlQXR0cnMgPSB7JGF0dHI6IHt9fTsKICAgICAgICAgICAgcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCAkY29tcGlsZU5vZGUsIGNvbXBpbGVOb2RlKTsKICAgICAgICAgICAgY29sbGVjdERpcmVjdGl2ZXMoY29tcGlsZU5vZGUsIGRpcmVjdGl2ZXMsIHRlbXBUZW1wbGF0ZUF0dHJzKTsKICAgICAgICAgICAgbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXModEF0dHJzLCB0ZW1wVGVtcGxhdGVBdHRycyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb21waWxlTm9kZSA9IGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGU7CiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKGNvbnRlbnQpOwogICAgICAgICAgfQoKICAgICAgICAgIGRpcmVjdGl2ZXMudW5zaGlmdChkZXJpdmVkU3luY0RpcmVjdGl2ZSk7CiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbiA9IGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCAkY29tcGlsZU5vZGUsIHRBdHRycywgY2hpbGRUcmFuc2NsdWRlRm4pOwogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuID0gY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZS5jb250ZW50cygpLCBjaGlsZFRyYW5zY2x1ZGVGbik7CgoKICAgICAgICAgIHdoaWxlKGxpbmtRdWV1ZS5sZW5ndGgpIHsKICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBsaW5rUXVldWUucG9wKCksCiAgICAgICAgICAgICAgICBsaW5rUm9vdEVsZW1lbnQgPSBsaW5rUXVldWUucG9wKCksCiAgICAgICAgICAgICAgICBiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlID0gbGlua1F1ZXVlLnBvcCgpLAogICAgICAgICAgICAgICAgc2NvcGUgPSBsaW5rUXVldWUucG9wKCksCiAgICAgICAgICAgICAgICBsaW5rTm9kZSA9IGNvbXBpbGVOb2RlOwoKICAgICAgICAgICAgaWYgKGJlZm9yZVRlbXBsYXRlTGlua05vZGUgIT09IGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGUpIHsKICAgICAgICAgICAgICAvLyBpdCB3YXMgY2xvbmVkIHRoZXJlZm9yZSB3ZSBoYXZlIHRvIGNsb25lIGFzIHdlbGwuCiAgICAgICAgICAgICAgbGlua05vZGUgPSBKUUxpdGVDbG9uZShjb21waWxlTm9kZSk7CiAgICAgICAgICAgICAgcmVwbGFjZVdpdGgobGlua1Jvb3RFbGVtZW50LCBqcUxpdGUoYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSksIGxpbmtOb2RlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsIGNvbnRyb2xsZXIpOwogICAgICAgICAgICB9LCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCwgY29udHJvbGxlcik7CiAgICAgICAgICB9CiAgICAgICAgICBsaW5rUXVldWUgPSBudWxsOwogICAgICAgIH0pLgogICAgICAgIGVycm9yKGZ1bmN0aW9uKHJlc3BvbnNlLCBjb2RlLCBoZWFkZXJzLCBjb25maWcpIHsKICAgICAgICAgIHRocm93IEVycm9yKCdGYWlsZWQgdG8gbG9hZCB0ZW1wbGF0ZTogJyArIGNvbmZpZy51cmwpOwogICAgICAgIH0pOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5ZWROb2RlTGlua0ZuKGlnbm9yZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGNvbnRyb2xsZXIpIHsKICAgICAgICBpZiAobGlua1F1ZXVlKSB7CiAgICAgICAgICBsaW5rUXVldWUucHVzaChzY29wZSk7CiAgICAgICAgICBsaW5rUXVldWUucHVzaChub2RlKTsKICAgICAgICAgIGxpbmtRdWV1ZS5wdXNoKHJvb3RFbGVtZW50KTsKICAgICAgICAgIGxpbmtRdWV1ZS5wdXNoKGNvbnRyb2xsZXIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIG5vZGUsIHJvb3RFbGVtZW50LCBjb250cm9sbGVyKTsKICAgICAgICAgIH0sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgY29udHJvbGxlcik7CiAgICAgICAgfQogICAgICB9OwogICAgfQoKCiAgICAvKioKICAgICAqIFNvcnRpbmcgZnVuY3Rpb24gZm9yIGJvdW5kIGRpcmVjdGl2ZXMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJ5UHJpb3JpdHkoYSwgYikgewogICAgICByZXR1cm4gYi5wcmlvcml0eSAtIGEucHJpb3JpdHk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGFzc2VydE5vRHVwbGljYXRlKHdoYXQsIHByZXZpb3VzRGlyZWN0aXZlLCBkaXJlY3RpdmUsIGVsZW1lbnQpIHsKICAgICAgaWYgKHByZXZpb3VzRGlyZWN0aXZlKSB7CiAgICAgICAgdGhyb3cgRXJyb3IoJ011bHRpcGxlIGRpcmVjdGl2ZXMgWycgKyBwcmV2aW91c0RpcmVjdGl2ZS5uYW1lICsgJywgJyArCiAgICAgICAgICBkaXJlY3RpdmUubmFtZSArICddIGFza2luZyBmb3IgJyArIHdoYXQgKyAnIG9uOiAnICsgIHN0YXJ0aW5nVGFnKGVsZW1lbnQpKTsKICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgdGV4dCkgewogICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh0ZXh0LCB0cnVlKTsKICAgICAgaWYgKGludGVycG9sYXRlRm4pIHsKICAgICAgICBkaXJlY3RpdmVzLnB1c2goewogICAgICAgICAgcHJpb3JpdHk6IDAsCiAgICAgICAgICBjb21waWxlOiB2YWx1ZUZuKGZ1bmN0aW9uKHNjb3BlLCBub2RlKSB7CiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCgpLAogICAgICAgICAgICAgICAgYmluZGluZ3MgPSBwYXJlbnQuZGF0YSgnJGJpbmRpbmcnKSB8fCBbXTsKICAgICAgICAgICAgYmluZGluZ3MucHVzaChpbnRlcnBvbGF0ZUZuKTsKICAgICAgICAgICAgc2FmZUFkZENsYXNzKHBhcmVudC5kYXRhKCckYmluZGluZycsIGJpbmRpbmdzKSwgJ25nLWJpbmRpbmcnKTsKICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgbm9kZVswXS5ub2RlVmFsdWUgPSB2YWx1ZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KQogICAgICAgIH0pOwogICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIGFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZShub2RlLCBkaXJlY3RpdmVzLCB2YWx1ZSwgbmFtZSkgewogICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh2YWx1ZSwgdHJ1ZSk7CgoKICAgICAgLy8gbm8gaW50ZXJwb2xhdGlvbiBmb3VuZCAtPiBpZ25vcmUKICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47CgogICAgICBkaXJlY3RpdmVzLnB1c2goewogICAgICAgIHByaW9yaXR5OiAxMDAsCiAgICAgICAgY29tcGlsZTogdmFsdWVGbihmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gKGF0dHIuJCRvYnNlcnZlcnMgfHwgKGF0dHIuJCRvYnNlcnZlcnMgPSB7fSkpOwoKICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnKSB7CiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gaW50ZXJwb2xhdGUgY2xhc3NlcyBhZ2FpbiwgaW4gdGhlIGNhc2UgdGhlIGVsZW1lbnQgd2FzIHJlcGxhY2VkCiAgICAgICAgICAgIC8vIGFuZCB0aGVyZWZvcmUgdGhlIHR3byBjbGFzcyBhdHRycyBnb3QgbWVyZ2VkIC0gd2Ugd2FudCB0byBpbnRlcnBvbGF0ZSB0aGUgcmVzdWx0CiAgICAgICAgICAgIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUoYXR0cltuYW1lXSwgdHJ1ZSk7CiAgICAgICAgICB9CgogICAgICAgICAgYXR0cltuYW1lXSA9IHVuZGVmaW5lZDsKICAgICAgICAgICgkJG9ic2VydmVyc1tuYW1lXSB8fCAoJCRvYnNlcnZlcnNbbmFtZV0gPSBbXSkpLiQkaW50ZXIgPSB0cnVlOwogICAgICAgICAgKGF0dHIuJCRvYnNlcnZlcnMgJiYgYXR0ci4kJG9ic2VydmVyc1tuYW1lXS4kJHNjb3BlIHx8IHNjb3BlKS4KICAgICAgICAgICAgJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIHZhbHVlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSkKICAgICAgfSk7CiAgICB9CgoKICAgIC8qKgogICAgICogVGhpcyBpcyBhIHNwZWNpYWwganFMaXRlLnJlcGxhY2VXaXRoLCB3aGljaCBjYW4gcmVwbGFjZSBpdGVtcyB3aGljaAogICAgICogaGF2ZSBubyBwYXJlbnRzLCBwcm92aWRlZCB0aGF0IHRoZSBjb250YWluaW5nIGpxTGl0ZSBjb2xsZWN0aW9uIGlzIHByb3ZpZGVkLgogICAgICoKICAgICAqIEBwYXJhbSB7SnFMaXRlPX0gJHJvb3RFbGVtZW50IFRoZSByb290IG9mIHRoZSBjb21waWxlIHRyZWUuIFVzZWQgc28gdGhhdCB3ZSBjYW4gcmVwbGFjZSBub2RlcwogICAgICogICAgaW4gdGhlIHJvb3Qgb2YgdGhlIHRyZWUuCiAgICAgKiBAcGFyYW0ge0pxTGl0ZX0gJGVsZW1lbnQgVGhlIGpxTGl0ZSBlbGVtZW50IHdoaWNoIHdlIGFyZSBnb2luZyB0byByZXBsYWNlLiBXZSBrZWVwIHRoZSBzaGVsbCwKICAgICAqICAgIGJ1dCByZXBsYWNlIGl0cyBET00gbm9kZSByZWZlcmVuY2UuCiAgICAgKiBAcGFyYW0ge05vZGV9IG5ld05vZGUgVGhlIG5ldyBET00gbm9kZS4KICAgICAqLwogICAgZnVuY3Rpb24gcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCAkZWxlbWVudCwgbmV3Tm9kZSkgewogICAgICB2YXIgb2xkTm9kZSA9ICRlbGVtZW50WzBdLAogICAgICAgICAgcGFyZW50ID0gb2xkTm9kZS5wYXJlbnROb2RlLAogICAgICAgICAgaSwgaWk7CgogICAgICBpZiAoJHJvb3RFbGVtZW50KSB7CiAgICAgICAgZm9yKGkgPSAwLCBpaSA9ICRyb290RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICBpZiAoJHJvb3RFbGVtZW50W2ldID09IG9sZE5vZGUpIHsKICAgICAgICAgICAgJHJvb3RFbGVtZW50W2ldID0gbmV3Tm9kZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAocGFyZW50KSB7CiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChuZXdOb2RlLCBvbGROb2RlKTsKICAgICAgfQoKICAgICAgbmV3Tm9kZVtqcUxpdGUuZXhwYW5kb10gPSBvbGROb2RlW2pxTGl0ZS5leHBhbmRvXTsKICAgICAgJGVsZW1lbnRbMF0gPSBuZXdOb2RlOwogICAgfQogIH1dOwp9Cgp2YXIgUFJFRklYX1JFR0VYUCA9IC9eKHhbXDpcLV9dfGRhdGFbXDpcLV9dKS9pOwovKioKICogQ29udmVydHMgYWxsIGFjY2VwdGVkIGRpcmVjdGl2ZXMgZm9ybWF0IGludG8gcHJvcGVyIGRpcmVjdGl2ZSBuYW1lLgogKiBBbGwgb2YgdGhlc2Ugd2lsbCBiZWNvbWUgJ215RGlyZWN0aXZlJzoKICogICBteTpEaVJlY3RpdmUKICogICBteS1kaXJlY3RpdmUKICogICB4LW15LWRpcmVjdGl2ZQogKiAgIGRhdGEtbXk6ZGlyZWN0aXZlCiAqCiAqIEFsc28gdGhlcmUgaXMgc3BlY2lhbCBjYXNlIGZvciBNb3ogcHJlZml4IHN0YXJ0aW5nIHdpdGggdXBwZXIgY2FzZSBsZXR0ZXIuCiAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplCiAqLwpmdW5jdGlvbiBkaXJlY3RpdmVOb3JtYWxpemUobmFtZSkgewogIHJldHVybiBjYW1lbENhc2UobmFtZS5yZXBsYWNlKFBSRUZJWF9SRUdFWFAsICcnKSk7Cn0KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzCiAqIEBkZXNjcmlwdGlvbgogKgogKiBBIHNoYXJlZCBvYmplY3QgYmV0d2VlbiBkaXJlY3RpdmUgY29tcGlsZSAvIGxpbmtpbmcgZnVuY3Rpb25zIHdoaWNoIGNvbnRhaW5zIG5vcm1hbGl6ZWQgRE9NIGVsZW1lbnQKICogYXR0cmlidXRlcy4gVGhlIHRoZSB2YWx1ZXMgcmVmbGVjdCBjdXJyZW50IGJpbmRpbmcgc3RhdGUgYHt7IH19YC4gVGhlIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkCiAqIHNpbmNlIGFsbCBvZiB0aGVzZSBhcmUgdHJlYXRlZCBhcyBlcXVpdmFsZW50IGluIEFuZ3VsYXI6CiAqCiAqICAgICAgICAgIDxzcGFuIG5nOmJpbmQ9ImEiIG5nLWJpbmQ9ImEiIGRhdGEtbmctYmluZD0iYSIgeC1uZy1iaW5kPSJhIj4KICovCgovKioKICogQG5nZG9jIHByb3BlcnR5CiAqIEBuYW1lIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhdHRyCiAqIEBwcm9wZXJ0eU9mIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzCiAqIEByZXR1cm5zIHtvYmplY3R9IEEgbWFwIG9mIERPTSBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lcyB0byB0aGUgbm9ybWFsaXplZCBuYW1lLiBUaGlzIGlzCiAqICAgICAgICAgIG5lZWRlZCB0byBkbyByZXZlcnNlIGxvb2t1cCBmcm9tIG5vcm1hbGl6ZWQgbmFtZSBiYWNrIHRvIGFjdHVhbCBuYW1lLgogKi8KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRzZXQKICogQG1ldGhvZE9mIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogU2V0IERPTSBlbGVtZW50IGF0dHJpYnV0ZSB2YWx1ZS4KICoKICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9ybWFsaXplZCBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBtb2RpZnkuIFRoZSBuYW1lIGlzCiAqICAgICAgICAgIHJldmVycyB0cmFuc2xhdGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGF0dHIgJGF0dHJ9CiAqICAgICAgICAgIHByb3BlcnR5IHRvIHRoZSBvcmlnaW5hbCBuYW1lLgogKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gc2V0IHRoZSBhdHRyaWJ1dGUgdG8uCiAqLwoKCgovKioKICogQ2xvc3VyZSBjb21waWxlciB0eXBlIGluZm9ybWF0aW9uCiAqLwoKZnVuY3Rpb24gbm9kZXNldExpbmtpbmdGbigKICAvKiBhbmd1bGFyLlNjb3BlICovIHNjb3BlLAogIC8qIE5vZGVMaXN0ICovIG5vZGVMaXN0LAogIC8qIEVsZW1lbnQgKi8gcm9vdEVsZW1lbnQsCiAgLyogZnVuY3Rpb24oRnVuY3Rpb24pICovIGJvdW5kVHJhbnNjbHVkZUZuCil7fQoKZnVuY3Rpb24gZGlyZWN0aXZlTGlua2luZ0ZuKAogIC8qIG5vZGVzZXRMaW5raW5nRm4gKi8gbm9kZXNldExpbmtpbmdGbiwKICAvKiBhbmd1bGFyLlNjb3BlICovIHNjb3BlLAogIC8qIE5vZGUgKi8gbm9kZSwKICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LAogIC8qIGZ1bmN0aW9uKEZ1bmN0aW9uKSAqLyBib3VuZFRyYW5zY2x1ZGVGbgope30KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRjb250cm9sbGVyUHJvdmlkZXIKICogQGRlc2NyaXB0aW9uCiAqIFRoZSB7QGxpbmsgbmcuJGNvbnRyb2xsZXIgJGNvbnRyb2xsZXIgc2VydmljZX0gaXMgdXNlZCBieSBBbmd1bGFyIHRvIGNyZWF0ZSBuZXcKICogY29udHJvbGxlcnMuCiAqCiAqIFRoaXMgcHJvdmlkZXIgYWxsb3dzIGNvbnRyb2xsZXIgcmVnaXN0cmF0aW9uIHZpYSB0aGUKICoge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIgcmVnaXN0ZXJ9IG1ldGhvZC4KICovCmZ1bmN0aW9uICRDb250cm9sbGVyUHJvdmlkZXIoKSB7CiAgdmFyIGNvbnRyb2xsZXJzID0ge307CgoKICAvKioKICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgKiBAbmFtZSBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyCiAgICogQG1ldGhvZE9mIG5nLiRjb250cm9sbGVyUHJvdmlkZXIKICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBDb250cm9sbGVyIG5hbWUKICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBjb25zdHJ1Y3RvciBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZuIChvcHRpb25hbGx5IGRlY29yYXRlZCB3aXRoIERJCiAgICogICAgYW5ub3RhdGlvbnMgaW4gdGhlIGFycmF5IG5vdGF0aW9uKS4KICAgKi8KICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZSwgY29uc3RydWN0b3IpIHsKICAgIGlmIChpc09iamVjdChuYW1lKSkgewogICAgICBleHRlbmQoY29udHJvbGxlcnMsIG5hbWUpCiAgICB9IGVsc2UgewogICAgICBjb250cm9sbGVyc1tuYW1lXSA9IGNvbnN0cnVjdG9yOwogICAgfQogIH07CgoKICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckd2luZG93JywgZnVuY3Rpb24oJGluamVjdG9yLCAkd2luZG93KSB7CgogICAgLyoqCiAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAqIEBuYW1lIG5nLiRjb250cm9sbGVyCiAgICAgKiBAcmVxdWlyZXMgJGluamVjdG9yCiAgICAgKgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGNvbnN0cnVjdG9yIElmIGNhbGxlZCB3aXRoIGEgZnVuY3Rpb24gdGhlbiBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgdGhlCiAgICAgKiAgICBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBPdGhlcndpc2UgaXQncyBjb25zaWRlcmVkIHRvIGJlIGEgc3RyaW5nIHdoaWNoIGlzIHVzZWQKICAgICAqICAgIHRvIHJldHJpZXZlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIHVzaW5nIHRoZSBmb2xsb3dpbmcgc3RlcHM6CiAgICAgKgogICAgICogICAgKiBjaGVjayBpZiBhIGNvbnRyb2xsZXIgd2l0aCBnaXZlbiBuYW1lIGlzIHJlZ2lzdGVyZWQgdmlhIGAkY29udHJvbGxlclByb3ZpZGVyYAogICAgICogICAgKiBjaGVjayBpZiBldmFsdWF0aW5nIHRoZSBzdHJpbmcgb24gdGhlIGN1cnJlbnQgc2NvcGUgcmV0dXJucyBhIGNvbnN0cnVjdG9yCiAgICAgKiAgICAqIGNoZWNrIGB3aW5kb3dbY29uc3RydWN0b3JdYCBvbiB0aGUgZ2xvYmFsIGB3aW5kb3dgIG9iamVjdAogICAgICoKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbHMgSW5qZWN0aW9uIGxvY2FscyBmb3IgQ29udHJvbGxlci4KICAgICAqIEByZXR1cm4ge09iamVjdH0gSW5zdGFuY2Ugb2YgZ2l2ZW4gY29udHJvbGxlci4KICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIGAkY29udHJvbGxlcmAgc2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgaW5zdGFudGlhdGluZyBjb250cm9sbGVycy4KICAgICAqCiAgICAgKiBJdCdzIGp1c3Qgc2ltcGxlIGNhbGwgdG8ge0BsaW5rIEFVVE8uJGluamVjdG9yICRpbmplY3Rvcn0sIGJ1dCBleHRyYWN0ZWQgaW50bwogICAgICogYSBzZXJ2aWNlLCBzbyB0aGF0IG9uZSBjYW4gb3ZlcnJpZGUgdGhpcyBzZXJ2aWNlIHdpdGgge0BsaW5rIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzE2NDk3ODgKICAgICAqIEJDIHZlcnNpb259LgogICAgICovCiAgICByZXR1cm4gZnVuY3Rpb24oY29uc3RydWN0b3IsIGxvY2FscykgewogICAgICBpZihpc1N0cmluZyhjb25zdHJ1Y3RvcikpIHsKICAgICAgICB2YXIgbmFtZSA9IGNvbnN0cnVjdG9yOwogICAgICAgIGNvbnN0cnVjdG9yID0gY29udHJvbGxlcnMuaGFzT3duUHJvcGVydHkobmFtZSkKICAgICAgICAgICAgPyBjb250cm9sbGVyc1tuYW1lXQogICAgICAgICAgICA6IGdldHRlcihsb2NhbHMuJHNjb3BlLCBuYW1lLCB0cnVlKSB8fCBnZXR0ZXIoJHdpbmRvdywgbmFtZSwgdHJ1ZSk7CgogICAgICAgIGFzc2VydEFyZ0ZuKGNvbnN0cnVjdG9yLCBuYW1lLCB0cnVlKTsKICAgICAgfQoKICAgICAgcmV0dXJuICRpbmplY3Rvci5pbnN0YW50aWF0ZShjb25zdHJ1Y3RvciwgbG9jYWxzKTsKICAgIH07CiAgfV07Cn0KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRkb2N1bWVudAogKiBAcmVxdWlyZXMgJHdpbmRvdwogKgogKiBAZGVzY3JpcHRpb24KICogQSB7QGxpbmsgYW5ndWxhci5lbGVtZW50IGpRdWVyeSAobGl0ZSl9LXdyYXBwZWQgcmVmZXJlbmNlIHRvIHRoZSBicm93c2VyJ3MgYHdpbmRvdy5kb2N1bWVudGAKICogZWxlbWVudC4KICovCmZ1bmN0aW9uICREb2N1bWVudFByb3ZpZGVyKCl7CiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgZnVuY3Rpb24od2luZG93KXsKICAgIHJldHVybiBqcUxpdGUod2luZG93LmRvY3VtZW50KTsKICB9XTsKfQoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBuZy4kZXhjZXB0aW9uSGFuZGxlcgogKiBAcmVxdWlyZXMgJGxvZwogKgogKiBAZGVzY3JpcHRpb24KICogQW55IHVuY2F1Z2h0IGV4Y2VwdGlvbiBpbiBhbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRlbGVnYXRlZCB0byB0aGlzIHNlcnZpY2UuCiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseSBkZWxlZ2F0ZXMgdG8gYCRsb2cuZXJyb3JgIHdoaWNoIGxvZ3MgaXQgaW50bwogKiB0aGUgYnJvd3NlciBjb25zb2xlLgogKgogKiBJbiB1bml0IHRlc3RzLCBpZiBgYW5ndWxhci1tb2Nrcy5qc2AgaXMgbG9hZGVkLCB0aGlzIHNlcnZpY2UgaXMgb3ZlcnJpZGRlbiBieQogKiB7QGxpbmsgbmdNb2NrLiRleGNlcHRpb25IYW5kbGVyIG1vY2sgJGV4Y2VwdGlvbkhhbmRsZXJ9CiAqCiAqIEBwYXJhbSB7RXJyb3J9IGV4Y2VwdGlvbiBFeGNlcHRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBlcnJvci4KICogQHBhcmFtIHtzdHJpbmc9fSBjYXVzZSBvcHRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29udGV4dCBpbiB3aGljaAogKiAgICAgICB0aGUgZXJyb3Igd2FzIHRocm93bi4KICovCmZ1bmN0aW9uICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckbG9nJywgZnVuY3Rpb24oJGxvZyl7CiAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkgewogICAgICAkbG9nLmVycm9yLmFwcGx5KCRsb2csIGFyZ3VtZW50cyk7CiAgICB9OwogIH1dOwp9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICoKICogVXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGludGVycG9sYXRpb24gbWFya3VwLiBEZWFmdWx0cyB0byBge3tgIGFuZCBgfX1gLgogKi8KZnVuY3Rpb24gJEludGVycG9sYXRlUHJvdmlkZXIoKSB7CiAgdmFyIHN0YXJ0U3ltYm9sID0gJ3t7JzsKICB2YXIgZW5kU3ltYm9sID0gJ319JzsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI3N0YXJ0U3ltYm9sCiAgICogQG1ldGhvZE9mIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyCiAgICogQGRlc2NyaXB0aW9uCiAgICogU3ltYm9sIHRvIGRlbm90ZSBzdGFydCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBge3tgLgogICAqCiAgICogQHByb3Age3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIHN0YXJ0aW5nIHN5bWJvbCB0by4KICAgKi8KICB0aGlzLnN0YXJ0U3ltYm9sID0gZnVuY3Rpb24odmFsdWUpewogICAgaWYgKHZhbHVlKSB7CiAgICAgIHN0YXJ0U3ltYm9sID0gdmFsdWU7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sOwogICAgfQogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2wKICAgKiBAbWV0aG9kT2YgbmcuJGludGVycG9sYXRlUHJvdmlkZXIKICAgKiBAZGVzY3JpcHRpb24KICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBlbmQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYH19YC4KICAgKgogICAqIEBwcm9wIHtzdHJpbmc9fSB2YWx1ZSBuZXcgdmFsdWUgdG8gc2V0IHRoZSBlbmRpbmcgc3ltYm9sIHRvLgogICAqLwogIHRoaXMuZW5kU3ltYm9sID0gZnVuY3Rpb24odmFsdWUpewogICAgaWYgKHZhbHVlKSB7CiAgICAgIGVuZFN5bWJvbCA9IHZhbHVlOwogICAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBzdGFydFN5bWJvbDsKICAgIH0KICB9OwoKCiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCBmdW5jdGlvbigkcGFyc2UpIHsKICAgIHZhciBzdGFydFN5bWJvbExlbmd0aCA9IHN0YXJ0U3ltYm9sLmxlbmd0aCwKICAgICAgICBlbmRTeW1ib2xMZW5ndGggPSBlbmRTeW1ib2wubGVuZ3RoOwoKICAgIC8qKgogICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgKiBAbmFtZSBuZy4kaW50ZXJwb2xhdGUKICAgICAqIEBmdW5jdGlvbgogICAgICoKICAgICAqIEByZXF1aXJlcyAkcGFyc2UKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqCiAgICAgKiBDb21waWxlcyBhIHN0cmluZyB3aXRoIG1hcmt1cCBpbnRvIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFRoaXMgc2VydmljZSBpcyB1c2VkIGJ5IHRoZQogICAgICogSFRNTCB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9IHNlcnZpY2UgZm9yIGRhdGEgYmluZGluZy4gU2VlCiAgICAgKiB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIgJGludGVycG9sYXRlUHJvdmlkZXJ9IGZvciBjb25maWd1cmluZyB0aGUKICAgICAqIGludGVycG9sYXRpb24gbWFya3VwLgogICAgICoKICAgICAqCiAgICAgICA8cHJlPgogICAgICAgICB2YXIgJGludGVycG9sYXRlID0gLi4uOyAvLyBpbmplY3RlZAogICAgICAgICB2YXIgZXhwID0gJGludGVycG9sYXRlKCdIZWxsbyB7e25hbWV9fSEnKTsKICAgICAgICAgZXhwZWN0KGV4cCh7bmFtZTonQW5ndWxhcid9KS50b0VxdWFsKCdIZWxsbyBBbmd1bGFyIScpOwogICAgICAgPC9wcmU+CiAgICAgKgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHdpdGggbWFya3VwIHRvIGludGVycG9sYXRlLgogICAgICogQHBhcmFtIHtib29sZWFuPX0gbXVzdEhhdmVFeHByZXNzaW9uIGlmIHNldCB0byB0cnVlIHRoZW4gdGhlIGludGVycG9sYXRpb24gc3RyaW5nIG11c3QgaGF2ZQogICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiBpbiBvcmRlciB0byByZXR1cm4gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4gU3RyaW5ncyB3aXRoIG5vCiAgICAgKiAgICBlbWJlZGRlZCBleHByZXNzaW9uIHdpbGwgcmV0dXJuIG51bGwgZm9yIHRoZSBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLgogICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQpfSBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGUgaW50ZXJwb2xhdGVkCiAgICAgKiAgICBzdHJpbmcuIFRoZSBmdW5jdGlvbiBoYXMgdGhlc2UgcGFyYW1ldGVyczoKICAgICAqCiAgICAgKiAgICAqIGBjb250ZXh0YDogYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzIGFyZSBldmFsdWF0ZWQKICAgICAqICAgICAgYWdhaW5zdC4KICAgICAqCiAgICAgKi8KICAgIHJldHVybiBmdW5jdGlvbih0ZXh0LCBtdXN0SGF2ZUV4cHJlc3Npb24pIHsKICAgICAgdmFyIHN0YXJ0SW5kZXgsCiAgICAgICAgICBlbmRJbmRleCwKICAgICAgICAgIGluZGV4ID0gMCwKICAgICAgICAgIHBhcnRzID0gW10sCiAgICAgICAgICBsZW5ndGggPSB0ZXh0Lmxlbmd0aCwKICAgICAgICAgIGhhc0ludGVycG9sYXRpb24gPSBmYWxzZSwKICAgICAgICAgIGZuLAogICAgICAgICAgZXhwLAogICAgICAgICAgY29uY2F0ID0gW107CgogICAgICB3aGlsZShpbmRleCA8IGxlbmd0aCkgewogICAgICAgIGlmICggKChzdGFydEluZGV4ID0gdGV4dC5pbmRleE9mKHN0YXJ0U3ltYm9sLCBpbmRleCkpICE9IC0xKSAmJgogICAgICAgICAgICAgKChlbmRJbmRleCA9IHRleHQuaW5kZXhPZihlbmRTeW1ib2wsIHN0YXJ0SW5kZXggKyBzdGFydFN5bWJvbExlbmd0aCkpICE9IC0xKSApIHsKICAgICAgICAgIChpbmRleCAhPSBzdGFydEluZGV4KSAmJiBwYXJ0cy5wdXNoKHRleHQuc3Vic3RyaW5nKGluZGV4LCBzdGFydEluZGV4KSk7CiAgICAgICAgICBwYXJ0cy5wdXNoKGZuID0gJHBhcnNlKGV4cCA9IHRleHQuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyBzdGFydFN5bWJvbExlbmd0aCwgZW5kSW5kZXgpKSk7CiAgICAgICAgICBmbi5leHAgPSBleHA7CiAgICAgICAgICBpbmRleCA9IGVuZEluZGV4ICsgZW5kU3ltYm9sTGVuZ3RoOwogICAgICAgICAgaGFzSW50ZXJwb2xhdGlvbiA9IHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIHdlIGRpZCBub3QgZmluZCBhbnl0aGluZywgc28gd2UgaGF2ZSB0byBhZGQgdGhlIHJlbWFpbmRlciB0byB0aGUgcGFydHMgYXJyYXkKICAgICAgICAgIChpbmRleCAhPSBsZW5ndGgpICYmIHBhcnRzLnB1c2godGV4dC5zdWJzdHJpbmcoaW5kZXgpKTsKICAgICAgICAgIGluZGV4ID0gbGVuZ3RoOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKCEobGVuZ3RoID0gcGFydHMubGVuZ3RoKSkgewogICAgICAgIC8vIHdlIGFkZGVkLCBub3RoaW5nLCBtdXN0IGhhdmUgYmVlbiBhbiBlbXB0eSBzdHJpbmcuCiAgICAgICAgcGFydHMucHVzaCgnJyk7CiAgICAgICAgbGVuZ3RoID0gMTsKICAgICAgfQoKICAgICAgaWYgKCFtdXN0SGF2ZUV4cHJlc3Npb24gIHx8IGhhc0ludGVycG9sYXRpb24pIHsKICAgICAgICBjb25jYXQubGVuZ3RoID0gbGVuZ3RoOwogICAgICAgIGZuID0gZnVuY3Rpb24oY29udGV4dCkgewogICAgICAgICAgZm9yKHZhciBpID0gMCwgaWkgPSBsZW5ndGgsIHBhcnQ7IGk8aWk7IGkrKykgewogICAgICAgICAgICBpZiAodHlwZW9mIChwYXJ0ID0gcGFydHNbaV0pID09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICBwYXJ0ID0gcGFydChjb250ZXh0KTsKICAgICAgICAgICAgICBpZiAocGFydCA9PSBudWxsIHx8IHBhcnQgPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBwYXJ0ID0gJyc7CiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGFydCAhPSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgcGFydCA9IHRvSnNvbihwYXJ0KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uY2F0W2ldID0gcGFydDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBjb25jYXQuam9pbignJyk7CiAgICAgICAgfTsKICAgICAgICBmbi5leHAgPSB0ZXh0OwogICAgICAgIGZuLnBhcnRzID0gcGFydHM7CiAgICAgICAgcmV0dXJuIGZuOwogICAgICB9CiAgICB9OwogIH1dOwp9Cgp2YXIgVVJMX01BVENIID0gL14oW146XSspOlwvXC8oXHcrOnswLDF9XHcqQCk/KFtcd1wuLV0qKSg6KFswLTldKykpPyhcL1teXD8jXSopPyhcPyhbXiNdKikpPygjKC4qKSk/JC8sCiAgICBQQVRIX01BVENIID0gL14oW15cPyNdKik/KFw/KFteI10qKSk/KCMoLiopKT8kLywKICAgIEhBU0hfTUFUQ0ggPSBQQVRIX01BVENILAogICAgREVGQVVMVF9QT1JUUyA9IHsnaHR0cCc6IDgwLCAnaHR0cHMnOiA0NDMsICdmdHAnOiAyMX07CgoKLyoqCiAqIEVuY29kZSBwYXRoIHVzaW5nIGVuY29kZVVyaVNlZ21lbnQsIGlnbm9yaW5nIGZvcndhcmQgc2xhc2hlcwogKgogKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIGVuY29kZQogKiBAcmV0dXJucyB7c3RyaW5nfQogKi8KZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7CiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLycpLAogICAgICBpID0gc2VnbWVudHMubGVuZ3RoOwoKICB3aGlsZSAoaS0tKSB7CiAgICBzZWdtZW50c1tpXSA9IGVuY29kZVVyaVNlZ21lbnQoc2VnbWVudHNbaV0pOwogIH0KCiAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJy8nKTsKfQoKZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkgewogIHJldHVybiB1cmwuc3BsaXQoJyMnKVswXTsKfQoKCmZ1bmN0aW9uIG1hdGNoVXJsKHVybCwgb2JqKSB7CiAgdmFyIG1hdGNoID0gVVJMX01BVENILmV4ZWModXJsKTsKCiAgbWF0Y2ggPSB7CiAgICAgIHByb3RvY29sOiBtYXRjaFsxXSwKICAgICAgaG9zdDogbWF0Y2hbM10sCiAgICAgIHBvcnQ6IGludChtYXRjaFs1XSkgfHwgREVGQVVMVF9QT1JUU1ttYXRjaFsxXV0gfHwgbnVsbCwKICAgICAgcGF0aDogbWF0Y2hbNl0gfHwgJy8nLAogICAgICBzZWFyY2g6IG1hdGNoWzhdLAogICAgICBoYXNoOiBtYXRjaFsxMF0KICAgIH07CgogIGlmIChvYmopIHsKICAgIG9iai4kJHByb3RvY29sID0gbWF0Y2gucHJvdG9jb2w7CiAgICBvYmouJCRob3N0ID0gbWF0Y2guaG9zdDsKICAgIG9iai4kJHBvcnQgPSBtYXRjaC5wb3J0OwogIH0KCiAgcmV0dXJuIG1hdGNoOwp9CgoKZnVuY3Rpb24gY29tcG9zZVByb3RvY29sSG9zdFBvcnQocHJvdG9jb2wsIGhvc3QsIHBvcnQpIHsKICByZXR1cm4gcHJvdG9jb2wgKyAnOi8vJyArIGhvc3QgKyAocG9ydCA9PSBERUZBVUxUX1BPUlRTW3Byb3RvY29sXSA/ICcnIDogJzonICsgcG9ydCk7Cn0KCgpmdW5jdGlvbiBwYXRoUHJlZml4RnJvbUJhc2UoYmFzZVBhdGgpIHsKICByZXR1cm4gYmFzZVBhdGguc3Vic3RyKDAsIGJhc2VQYXRoLmxhc3RJbmRleE9mKCcvJykpOwp9CgoKZnVuY3Rpb24gY29udmVydFRvSHRtbDVVcmwodXJsLCBiYXNlUGF0aCwgaGFzaFByZWZpeCkgewogIHZhciBtYXRjaCA9IG1hdGNoVXJsKHVybCk7CgogIC8vIGFscmVhZHkgaHRtbDUgdXJsCiAgaWYgKGRlY29kZVVSSUNvbXBvbmVudChtYXRjaC5wYXRoKSAhPSBiYXNlUGF0aCB8fCBpc1VuZGVmaW5lZChtYXRjaC5oYXNoKSB8fAogICAgICBtYXRjaC5oYXNoLmluZGV4T2YoaGFzaFByZWZpeCkgIT09IDApIHsKICAgIHJldHVybiB1cmw7CiAgLy8gY29udmVydCBoYXNoYmFuZyB1cmwgLT4gaHRtbDUgdXJsCiAgfSBlbHNlIHsKICAgIHJldHVybiBjb21wb3NlUHJvdG9jb2xIb3N0UG9ydChtYXRjaC5wcm90b2NvbCwgbWF0Y2guaG9zdCwgbWF0Y2gucG9ydCkgKwogICAgICAgICAgIHBhdGhQcmVmaXhGcm9tQmFzZShiYXNlUGF0aCkgKyBtYXRjaC5oYXNoLnN1YnN0cihoYXNoUHJlZml4Lmxlbmd0aCk7CiAgfQp9CgoKZnVuY3Rpb24gY29udmVydFRvSGFzaGJhbmdVcmwodXJsLCBiYXNlUGF0aCwgaGFzaFByZWZpeCkgewogIHZhciBtYXRjaCA9IG1hdGNoVXJsKHVybCk7CgogIC8vIGFscmVhZHkgaGFzaGJhbmcgdXJsCiAgaWYgKGRlY29kZVVSSUNvbXBvbmVudChtYXRjaC5wYXRoKSA9PSBiYXNlUGF0aCkgewogICAgcmV0dXJuIHVybDsKICAvLyBjb252ZXJ0IGh0bWw1IHVybCAtPiBoYXNoYmFuZyB1cmwKICB9IGVsc2UgewogICAgdmFyIHNlYXJjaCA9IG1hdGNoLnNlYXJjaCAmJiAnPycgKyBtYXRjaC5zZWFyY2ggfHwgJycsCiAgICAgICAgaGFzaCA9IG1hdGNoLmhhc2ggJiYgJyMnICsgbWF0Y2guaGFzaCB8fCAnJywKICAgICAgICBwYXRoUHJlZml4ID0gcGF0aFByZWZpeEZyb21CYXNlKGJhc2VQYXRoKSwKICAgICAgICBwYXRoID0gbWF0Y2gucGF0aC5zdWJzdHIocGF0aFByZWZpeC5sZW5ndGgpOwoKICAgIGlmIChtYXRjaC5wYXRoLmluZGV4T2YocGF0aFByZWZpeCkgIT09IDApIHsKICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgdXJsICInICsgdXJsICsgJyIsIG1pc3NpbmcgcGF0aCBwcmVmaXggIicgKyBwYXRoUHJlZml4ICsgJyIgIScpOwogICAgfQoKICAgIHJldHVybiBjb21wb3NlUHJvdG9jb2xIb3N0UG9ydChtYXRjaC5wcm90b2NvbCwgbWF0Y2guaG9zdCwgbWF0Y2gucG9ydCkgKyBiYXNlUGF0aCArCiAgICAgICAgICAgJyMnICsgaGFzaFByZWZpeCArIHBhdGggKyBzZWFyY2ggKyBoYXNoOwogIH0KfQoKCi8qKgogKiBMb2NhdGlvblVybCByZXByZXNlbnRzIGFuIHVybAogKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gSFRNTDUgbW9kZSBpcyBlbmFibGVkIGFuZCBzdXBwb3J0ZWQKICoKICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSFRNTDUgdXJsCiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoUHJlZml4CiAqLwpmdW5jdGlvbiBMb2NhdGlvblVybCh1cmwsIHBhdGhQcmVmaXgsIGFwcEJhc2VVcmwpIHsKICBwYXRoUHJlZml4ID0gcGF0aFByZWZpeCB8fCAnJzsKCiAgLyoqCiAgICogUGFyc2UgZ2l2ZW4gaHRtbDUgKHJlZ3VsYXIpIHVybCBzdHJpbmcgaW50byBwcm9wZXJ0aWVzCiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0Fic29sdXRlVXJsIEhUTUw1IHVybAogICAqIEBwcml2YXRlCiAgICovCiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24obmV3QWJzb2x1dGVVcmwpIHsKICAgIHZhciBtYXRjaCA9IG1hdGNoVXJsKG5ld0Fic29sdXRlVXJsLCB0aGlzKTsKCiAgICBpZiAobWF0Y2gucGF0aC5pbmRleE9mKHBhdGhQcmVmaXgpICE9PSAwKSB7CiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIHVybCAiJyArIG5ld0Fic29sdXRlVXJsICsgJyIsIG1pc3NpbmcgcGF0aCBwcmVmaXggIicgKyBwYXRoUHJlZml4ICsgJyIgIScpOwogICAgfQoKICAgIHRoaXMuJCRwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoLnBhdGguc3Vic3RyKHBhdGhQcmVmaXgubGVuZ3RoKSk7CiAgICB0aGlzLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShtYXRjaC5zZWFyY2gpOwogICAgdGhpcy4kJGhhc2ggPSBtYXRjaC5oYXNoICYmIGRlY29kZVVSSUNvbXBvbmVudChtYXRjaC5oYXNoKSB8fCAnJzsKCiAgICB0aGlzLiQkY29tcG9zZSgpOwogIH07CgogIC8qKgogICAqIENvbXBvc2UgdXJsIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHkKICAgKiBAcHJpdmF0ZQogICAqLwogIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSwKICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnOwoKICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoOwogICAgdGhpcy4kJGFic1VybCA9IGNvbXBvc2VQcm90b2NvbEhvc3RQb3J0KHRoaXMuJCRwcm90b2NvbCwgdGhpcy4kJGhvc3QsIHRoaXMuJCRwb3J0KSArCiAgICAgICAgICAgICAgICAgICAgcGF0aFByZWZpeCArIHRoaXMuJCR1cmw7CiAgfTsKCgogIHRoaXMuJCRyZXdyaXRlQXBwVXJsID0gZnVuY3Rpb24oYWJzb2x1dGVMaW5rVXJsKSB7CiAgICBpZihhYnNvbHV0ZUxpbmtVcmwuaW5kZXhPZihhcHBCYXNlVXJsKSA9PSAwKSB7CiAgICAgIHJldHVybiBhYnNvbHV0ZUxpbmtVcmw7CiAgICB9CiAgfQoKCiAgdGhpcy4kJHBhcnNlKHVybCk7Cn0KCgovKioKICogTG9jYXRpb25IYXNoYmFuZ1VybCByZXByZXNlbnRzIHVybAogKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gaHRtbDUgaGlzdG9yeSBhcGkgaXMgZGlzYWJsZWQgb3Igbm90IHN1cHBvcnRlZAogKgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtzdHJpbmd9IHVybCBMZWdhY3kgdXJsCiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoUHJlZml4IFByZWZpeCBmb3IgaGFzaCBwYXJ0IChjb250YWluaW5nIHBhdGggYW5kIHNlYXJjaCkKICovCmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdVcmwodXJsLCBoYXNoUHJlZml4LCBhcHBCYXNlVXJsKSB7CiAgdmFyIGJhc2VQYXRoOwoKICAvKioKICAgKiBQYXJzZSBnaXZlbiBoYXNoYmFuZyB1cmwgaW50byBwcm9wZXJ0aWVzCiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIYXNoYmFuZyB1cmwKICAgKiBAcHJpdmF0ZQogICAqLwogIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkgewogICAgdmFyIG1hdGNoID0gbWF0Y2hVcmwodXJsLCB0aGlzKTsKCgogICAgaWYgKG1hdGNoLmhhc2ggJiYgbWF0Y2guaGFzaC5pbmRleE9mKGhhc2hQcmVmaXgpICE9PSAwKSB7CiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIHVybCAiJyArIHVybCArICciLCBtaXNzaW5nIGhhc2ggcHJlZml4ICInICsgaGFzaFByZWZpeCArICciICEnKTsKICAgIH0KCiAgICBiYXNlUGF0aCA9IG1hdGNoLnBhdGggKyAobWF0Y2guc2VhcmNoID8gJz8nICsgbWF0Y2guc2VhcmNoIDogJycpOwogICAgbWF0Y2ggPSBIQVNIX01BVENILmV4ZWMoKG1hdGNoLmhhc2ggfHwgJycpLnN1YnN0cihoYXNoUHJlZml4Lmxlbmd0aCkpOwogICAgaWYgKG1hdGNoWzFdKSB7CiAgICAgIHRoaXMuJCRwYXRoID0gKG1hdGNoWzFdLmNoYXJBdCgwKSA9PSAnLycgPyAnJyA6ICcvJykgKyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy4kJHBhdGggPSAnJzsKICAgIH0KCiAgICB0aGlzLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShtYXRjaFszXSk7CiAgICB0aGlzLiQkaGFzaCA9IG1hdGNoWzVdICYmIGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFs1XSkgfHwgJyc7CgogICAgdGhpcy4kJGNvbXBvc2UoKTsKICB9OwoKICAvKioKICAgKiBDb21wb3NlIGhhc2hiYW5nIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5CiAgICogQHByaXZhdGUKICAgKi8KICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksCiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJzsKCiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDsKICAgIHRoaXMuJCRhYnNVcmwgPSBjb21wb3NlUHJvdG9jb2xIb3N0UG9ydCh0aGlzLiQkcHJvdG9jb2wsIHRoaXMuJCRob3N0LCB0aGlzLiQkcG9ydCkgKwogICAgICAgICAgICAgICAgICAgIGJhc2VQYXRoICsgKHRoaXMuJCR1cmwgPyAnIycgKyBoYXNoUHJlZml4ICsgdGhpcy4kJHVybCA6ICcnKTsKICB9OwoKICB0aGlzLiQkcmV3cml0ZUFwcFVybCA9IGZ1bmN0aW9uKGFic29sdXRlTGlua1VybCkgewogICAgaWYoYWJzb2x1dGVMaW5rVXJsLmluZGV4T2YoYXBwQmFzZVVybCkgPT0gMCkgewogICAgICByZXR1cm4gYWJzb2x1dGVMaW5rVXJsOwogICAgfQogIH0KCgogIHRoaXMuJCRwYXJzZSh1cmwpOwp9CgoKTG9jYXRpb25VcmwucHJvdG90eXBlID0gewoKICAvKioKICAgKiBIYXMgYW55IGNoYW5nZSBiZWVuIHJlcGxhY2luZyA/CiAgICogQHByaXZhdGUKICAgKi8KICAkJHJlcGxhY2U6IGZhbHNlLAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI2Fic1VybAogICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LgogICAqCiAgICogUmV0dXJuIGZ1bGwgdXJsIHJlcHJlc2VudGF0aW9uIHdpdGggYWxsIHNlZ21lbnRzIGVuY29kZWQgYWNjb3JkaW5nIHRvIHJ1bGVzIHNwZWNpZmllZCBpbgogICAqIHtAbGluayBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCBSRkMgMzk4Nn0uCiAgICoKICAgKiBAcmV0dXJuIHtzdHJpbmd9IGZ1bGwgdXJsCiAgICovCiAgYWJzVXJsOiBsb2NhdGlvbkdldHRlcignJCRhYnNVcmwnKSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRsb2NhdGlvbiN1cmwKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuCiAgICoKICAgKiBSZXR1cm4gdXJsIChlLmcuIGAvcGF0aD9hPWIjaGFzaGApIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci4KICAgKgogICAqIENoYW5nZSBwYXRoLCBzZWFyY2ggYW5kIGhhc2gsIHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZz19IHVybCBOZXcgdXJsIHdpdGhvdXQgYmFzZSBwcmVmaXggKGUuZy4gYC9wYXRoP2E9YiNoYXNoYCkKICAgKiBAcmV0dXJuIHtzdHJpbmd9IHVybAogICAqLwogIHVybDogZnVuY3Rpb24odXJsLCByZXBsYWNlKSB7CiAgICBpZiAoaXNVbmRlZmluZWQodXJsKSkKICAgICAgcmV0dXJuIHRoaXMuJCR1cmw7CgogICAgdmFyIG1hdGNoID0gUEFUSF9NQVRDSC5leGVjKHVybCk7CiAgICBpZiAobWF0Y2hbMV0pIHRoaXMucGF0aChkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pKTsKICAgIGlmIChtYXRjaFsyXSB8fCBtYXRjaFsxXSkgdGhpcy5zZWFyY2gobWF0Y2hbM10gfHwgJycpOwogICAgdGhpcy5oYXNoKG1hdGNoWzVdIHx8ICcnLCByZXBsYWNlKTsKCiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI3Byb3RvY29sCiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuCiAgICoKICAgKiBSZXR1cm4gcHJvdG9jb2wgb2YgY3VycmVudCB1cmwuCiAgICoKICAgKiBAcmV0dXJuIHtzdHJpbmd9IHByb3RvY29sIG9mIGN1cnJlbnQgdXJsCiAgICovCiAgcHJvdG9jb2w6IGxvY2F0aW9uR2V0dGVyKCckJHByb3RvY29sJyksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jaG9zdAogICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LgogICAqCiAgICogUmV0dXJuIGhvc3Qgb2YgY3VycmVudCB1cmwuCiAgICoKICAgKiBAcmV0dXJuIHtzdHJpbmd9IGhvc3Qgb2YgY3VycmVudCB1cmwuCiAgICovCiAgaG9zdDogbG9jYXRpb25HZXR0ZXIoJyQkaG9zdCcpLAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI3BvcnQKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS4KICAgKgogICAqIFJldHVybiBwb3J0IG9mIGN1cnJlbnQgdXJsLgogICAqCiAgICogQHJldHVybiB7TnVtYmVyfSBwb3J0CiAgICovCiAgcG9ydDogbG9jYXRpb25HZXR0ZXIoJyQkcG9ydCcpLAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI3BhdGgKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuCiAgICoKICAgKiBSZXR1cm4gcGF0aCBvZiBjdXJyZW50IHVybCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuCiAgICoKICAgKiBDaGFuZ2UgcGF0aCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLgogICAqCiAgICogTm90ZTogUGF0aCBzaG91bGQgYWx3YXlzIGJlZ2luIHdpdGggZm9yd2FyZCBzbGFzaCAoLyksIHRoaXMgbWV0aG9kIHdpbGwgYWRkIHRoZSBmb3J3YXJkIHNsYXNoCiAgICogaWYgaXQgaXMgbWlzc2luZy4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0aCBOZXcgcGF0aAogICAqIEByZXR1cm4ge3N0cmluZ30gcGF0aAogICAqLwogIHBhdGg6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJHBhdGgnLCBmdW5jdGlvbihwYXRoKSB7CiAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7CiAgfSksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jc2VhcmNoCiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLgogICAqCiAgICogUmV0dXJuIHNlYXJjaCBwYXJ0IChhcyBvYmplY3QpIG9mIGN1cnJlbnQgdXJsIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci4KICAgKgogICAqIENoYW5nZSBzZWFyY2ggcGFydCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0PHN0cmluZyxzdHJpbmc+PX0gc2VhcmNoIE5ldyBzZWFyY2ggcGFyYW1zIC0gc3RyaW5nIG9yIGhhc2ggb2JqZWN0CiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbVZhbHVlIElmIGBzZWFyY2hgIGlzIGEgc3RyaW5nLCB0aGVuIGBwYXJhbVZhbHVlYCB3aWxsIG92ZXJyaWRlIG9ubHkgYQogICAqICAgIHNpbmdsZSBzZWFyY2ggcGFyYW1ldGVyLiBJZiB0aGUgdmFsdWUgaXMgYG51bGxgLCB0aGUgcGFyYW1ldGVyIHdpbGwgYmUgZGVsZXRlZC4KICAgKgogICAqIEByZXR1cm4ge3N0cmluZ30gc2VhcmNoCiAgICovCiAgc2VhcmNoOiBmdW5jdGlvbihzZWFyY2gsIHBhcmFtVmFsdWUpIHsKICAgIGlmIChpc1VuZGVmaW5lZChzZWFyY2gpKQogICAgICByZXR1cm4gdGhpcy4kJHNlYXJjaDsKCiAgICBpZiAoaXNEZWZpbmVkKHBhcmFtVmFsdWUpKSB7CiAgICAgIGlmIChwYXJhbVZhbHVlID09PSBudWxsKSB7CiAgICAgICAgZGVsZXRlIHRoaXMuJCRzZWFyY2hbc2VhcmNoXTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLiQkc2VhcmNoW3NlYXJjaF0gPSBwYXJhbVZhbHVlOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aGlzLiQkc2VhcmNoID0gaXNTdHJpbmcoc2VhcmNoKSA/IHBhcnNlS2V5VmFsdWUoc2VhcmNoKSA6IHNlYXJjaDsKICAgIH0KCiAgICB0aGlzLiQkY29tcG9zZSgpOwogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRsb2NhdGlvbiNoYXNoCiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLgogICAqCiAgICogUmV0dXJuIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLgogICAqCiAgICogQ2hhbmdlIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nPX0gaGFzaCBOZXcgaGFzaCBmcmFnbWVudAogICAqIEByZXR1cm4ge3N0cmluZ30gaGFzaAogICAqLwogIGhhc2g6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJGhhc2gnLCBpZGVudGl0eSksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jcmVwbGFjZQogICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIElmIGNhbGxlZCwgYWxsIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGR1cmluZyBjdXJyZW50IGAkZGlnZXN0YCB3aWxsIGJlIHJlcGxhY2luZyBjdXJyZW50IGhpc3RvcnkKICAgKiByZWNvcmQsIGluc3RlYWQgb2YgYWRkaW5nIG5ldyBvbmUuCiAgICovCiAgcmVwbGFjZTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLiQkcmVwbGFjZSA9IHRydWU7CiAgICByZXR1cm4gdGhpczsKICB9Cn07CgpMb2NhdGlvbkhhc2hiYW5nVXJsLnByb3RvdHlwZSA9IGluaGVyaXQoTG9jYXRpb25VcmwucHJvdG90eXBlKTsKCmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsKHVybCwgaGFzaFByZWZpeCwgYXBwQmFzZVVybCwgYmFzZUV4dHJhKSB7CiAgTG9jYXRpb25IYXNoYmFuZ1VybC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoKCiAgdGhpcy4kJHJld3JpdGVBcHBVcmwgPSBmdW5jdGlvbihhYnNvbHV0ZUxpbmtVcmwpIHsKICAgIGlmIChhYnNvbHV0ZUxpbmtVcmwuaW5kZXhPZihhcHBCYXNlVXJsKSA9PSAwKSB7CiAgICAgIHJldHVybiBhcHBCYXNlVXJsICsgYmFzZUV4dHJhICsgJyMnICsgaGFzaFByZWZpeCAgKyBhYnNvbHV0ZUxpbmtVcmwuc3Vic3RyKGFwcEJhc2VVcmwubGVuZ3RoKTsKICAgIH0KICB9Cn0KCkxvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsLnByb3RvdHlwZSA9IGluaGVyaXQoTG9jYXRpb25IYXNoYmFuZ1VybC5wcm90b3R5cGUpOwoKZnVuY3Rpb24gbG9jYXRpb25HZXR0ZXIocHJvcGVydHkpIHsKICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07CiAgfTsKfQoKCmZ1bmN0aW9uIGxvY2F0aW9uR2V0dGVyU2V0dGVyKHByb3BlcnR5LCBwcmVwcm9jZXNzKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKQogICAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07CgogICAgdGhpc1twcm9wZXJ0eV0gPSBwcmVwcm9jZXNzKHZhbHVlKTsKICAgIHRoaXMuJCRjb21wb3NlKCk7CgogICAgcmV0dXJuIHRoaXM7CiAgfTsKfQoKCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRsb2NhdGlvbgogKgogKiBAcmVxdWlyZXMgJGJyb3dzZXIKICogQHJlcXVpcmVzICRzbmlmZmVyCiAqIEByZXF1aXJlcyAkcm9vdEVsZW1lbnQKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSAkbG9jYXRpb24gc2VydmljZSBwYXJzZXMgdGhlIFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciAoYmFzZWQgb24gdGhlCiAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi93aW5kb3cubG9jYXRpb24gd2luZG93LmxvY2F0aW9ufSkgYW5kIG1ha2VzIHRoZSBVUkwKICogYXZhaWxhYmxlIHRvIHlvdXIgYXBwbGljYXRpb24uIENoYW5nZXMgdG8gdGhlIFVSTCBpbiB0aGUgYWRkcmVzcyBiYXIgYXJlIHJlZmxlY3RlZCBpbnRvCiAqICRsb2NhdGlvbiBzZXJ2aWNlIGFuZCBjaGFuZ2VzIHRvICRsb2NhdGlvbiBhcmUgcmVmbGVjdGVkIGludG8gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIuCiAqCiAqICoqVGhlICRsb2NhdGlvbiBzZXJ2aWNlOioqCiAqCiAqIC0gRXhwb3NlcyB0aGUgY3VycmVudCBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIsIHNvIHlvdSBjYW4KICogICAtIFdhdGNoIGFuZCBvYnNlcnZlIHRoZSBVUkwuCiAqICAgLSBDaGFuZ2UgdGhlIFVSTC4KICogLSBTeW5jaHJvbml6ZXMgdGhlIFVSTCB3aXRoIHRoZSBicm93c2VyIHdoZW4gdGhlIHVzZXIKICogICAtIENoYW5nZXMgdGhlIGFkZHJlc3MgYmFyLgogKiAgIC0gQ2xpY2tzIHRoZSBiYWNrIG9yIGZvcndhcmQgYnV0dG9uIChvciBjbGlja3MgYSBIaXN0b3J5IGxpbmspLgogKiAgIC0gQ2xpY2tzIG9uIGEgbGluay4KICogLSBSZXByZXNlbnRzIHRoZSBVUkwgb2JqZWN0IGFzIGEgc2V0IG9mIG1ldGhvZHMgKHByb3RvY29sLCBob3N0LCBwb3J0LCBwYXRoLCBzZWFyY2gsIGhhc2gpLgogKgogKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUge0BsaW5rIGd1aWRlL2Rldl9ndWlkZS5zZXJ2aWNlcy4kbG9jYXRpb24gRGV2ZWxvcGVyIEd1aWRlOiBBbmd1bGFyCiAqIFNlcnZpY2VzOiBVc2luZyAkbG9jYXRpb259CiAqLwoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJGxvY2F0aW9uUHJvdmlkZXIKICogQGRlc2NyaXB0aW9uCiAqIFVzZSB0aGUgYCRsb2NhdGlvblByb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBkZWVwIGxpbmtpbmcgcGF0aHMgYXJlIHN0b3JlZC4KICovCmZ1bmN0aW9uICRMb2NhdGlvblByb3ZpZGVyKCl7CiAgdmFyIGhhc2hQcmVmaXggPSAnJywKICAgICAgaHRtbDVNb2RlID0gZmFsc2U7CgogIC8qKgogICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAqIEBuYW1lIG5nLiRsb2NhdGlvblByb3ZpZGVyI2hhc2hQcmVmaXgKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uUHJvdmlkZXIKICAgKiBAZGVzY3JpcHRpb24KICAgKiBAcGFyYW0ge3N0cmluZz19IHByZWZpeCBQcmVmaXggZm9yIGhhc2ggcGFydCAoY29udGFpbmluZyBwYXRoIGFuZCBzZWFyY2gpCiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXIKICAgKi8KICB0aGlzLmhhc2hQcmVmaXggPSBmdW5jdGlvbihwcmVmaXgpIHsKICAgIGlmIChpc0RlZmluZWQocHJlZml4KSkgewogICAgICBoYXNoUHJlZml4ID0gcHJlZml4OwogICAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBoYXNoUHJlZml4OwogICAgfQogIH07CgogIC8qKgogICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAqIEBuYW1lIG5nLiRsb2NhdGlvblByb3ZpZGVyI2h0bWw1TW9kZQogICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb25Qcm92aWRlcgogICAqIEBkZXNjcmlwdGlvbgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbW9kZSBVc2UgSFRNTDUgc3RyYXRlZ3kgaWYgYXZhaWxhYmxlLgogICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyCiAgICovCiAgdGhpcy5odG1sNU1vZGUgPSBmdW5jdGlvbihtb2RlKSB7CiAgICBpZiAoaXNEZWZpbmVkKG1vZGUpKSB7CiAgICAgIGh0bWw1TW9kZSA9IG1vZGU7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGh0bWw1TW9kZTsKICAgIH0KICB9OwoKICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJHNuaWZmZXInLCAnJHJvb3RFbGVtZW50JywKICAgICAgZnVuY3Rpb24oICRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJHNuaWZmZXIsICAgJHJvb3RFbGVtZW50KSB7CiAgICB2YXIgJGxvY2F0aW9uLAogICAgICAgIGJhc2VQYXRoLAogICAgICAgIHBhdGhQcmVmaXgsCiAgICAgICAgaW5pdFVybCA9ICRicm93c2VyLnVybCgpLAogICAgICAgIGluaXRVcmxQYXJ0cyA9IG1hdGNoVXJsKGluaXRVcmwpLAogICAgICAgIGFwcEJhc2VVcmw7CgogICAgaWYgKGh0bWw1TW9kZSkgewogICAgICBiYXNlUGF0aCA9ICRicm93c2VyLmJhc2VIcmVmKCkgfHwgJy8nOwogICAgICBwYXRoUHJlZml4ID0gcGF0aFByZWZpeEZyb21CYXNlKGJhc2VQYXRoKTsKICAgICAgYXBwQmFzZVVybCA9CiAgICAgICAgICBjb21wb3NlUHJvdG9jb2xIb3N0UG9ydChpbml0VXJsUGFydHMucHJvdG9jb2wsIGluaXRVcmxQYXJ0cy5ob3N0LCBpbml0VXJsUGFydHMucG9ydCkgKwogICAgICAgICAgcGF0aFByZWZpeCArICcvJzsKCiAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5KSB7CiAgICAgICAgJGxvY2F0aW9uID0gbmV3IExvY2F0aW9uVXJsKAogICAgICAgICAgY29udmVydFRvSHRtbDVVcmwoaW5pdFVybCwgYmFzZVBhdGgsIGhhc2hQcmVmaXgpLAogICAgICAgICAgcGF0aFByZWZpeCwgYXBwQmFzZVVybCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgJGxvY2F0aW9uID0gbmV3IExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsKAogICAgICAgICAgY29udmVydFRvSGFzaGJhbmdVcmwoaW5pdFVybCwgYmFzZVBhdGgsIGhhc2hQcmVmaXgpLAogICAgICAgICAgaGFzaFByZWZpeCwgYXBwQmFzZVVybCwgYmFzZVBhdGguc3Vic3RyKHBhdGhQcmVmaXgubGVuZ3RoICsgMSkpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBhcHBCYXNlVXJsID0KICAgICAgICAgIGNvbXBvc2VQcm90b2NvbEhvc3RQb3J0KGluaXRVcmxQYXJ0cy5wcm90b2NvbCwgaW5pdFVybFBhcnRzLmhvc3QsIGluaXRVcmxQYXJ0cy5wb3J0KSArCiAgICAgICAgICAoaW5pdFVybFBhcnRzLnBhdGggfHwgJycpICsKICAgICAgICAgIChpbml0VXJsUGFydHMuc2VhcmNoID8gKCc/JyArIGluaXRVcmxQYXJ0cy5zZWFyY2gpIDogJycpICsKICAgICAgICAgICcjJyArIGhhc2hQcmVmaXggKyAnLyc7CgogICAgICAkbG9jYXRpb24gPSBuZXcgTG9jYXRpb25IYXNoYmFuZ1VybChpbml0VXJsLCBoYXNoUHJlZml4LCBhcHBCYXNlVXJsKTsKICAgIH0KCiAgICAkcm9vdEVsZW1lbnQuYmluZCgnY2xpY2snLCBmdW5jdGlvbihldmVudCkgewogICAgICAvLyBUT0RPKHZvanRhKTogcmV3cml0ZSBsaW5rIHdoZW4gb3BlbmluZyBpbiBuZXcgdGFiL3dpbmRvdyAoaW4gbGVnYWN5IGJyb3dzZXIpCiAgICAgIC8vIGN1cnJlbnRseSB3ZSBvcGVuIG5pY2UgdXJsIGxpbmsgYW5kIHJlZGlyZWN0IHRoZW4KCiAgICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQud2hpY2ggPT0gMikgcmV0dXJuOwoKICAgICAgdmFyIGVsbSA9IGpxTGl0ZShldmVudC50YXJnZXQpOwoKICAgICAgLy8gdHJhdmVyc2UgdGhlIERPTSB1cCB0byBmaW5kIGZpcnN0IEEgdGFnCiAgICAgIHdoaWxlIChsb3dlcmNhc2UoZWxtWzBdLm5vZGVOYW1lKSAhPT0gJ2EnKSB7CiAgICAgICAgLy8gaWdub3JlIHJld3JpdGluZyBpZiBubyBBIHRhZyAocmVhY2hlZCByb290IGVsZW1lbnQsIG9yIG5vIHBhcmVudCAtIHJlbW92ZWQgZnJvbSBkb2N1bWVudCkKICAgICAgICBpZiAoZWxtWzBdID09PSAkcm9vdEVsZW1lbnRbMF0gfHwgIShlbG0gPSBlbG0ucGFyZW50KCkpWzBdKSByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBhYnNIcmVmID0gZWxtLnByb3AoJ2hyZWYnKSwKICAgICAgICAgIHJld3JpdHRlblVybCA9ICRsb2NhdGlvbi4kJHJld3JpdGVBcHBVcmwoYWJzSHJlZik7CgogICAgICBpZiAoYWJzSHJlZiAmJiAhZWxtLmF0dHIoJ3RhcmdldCcpICYmIHJld3JpdHRlblVybCkgewogICAgICAgIC8vIHVwZGF0ZSBsb2NhdGlvbiBtYW51YWxseQogICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKHJld3JpdHRlblVybCk7CiAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoKTsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIC8vIGhhY2sgdG8gd29yayBhcm91bmQgRkY2IGJ1ZyA2ODQyMDggd2hlbiBzY2VuYXJpbyBydW5uZXIgY2xpY2tzIG9uIGxpbmtzCiAgICAgICAgd2luZG93LmFuZ3VsYXJbJ2ZmLTY4NDIwOC1wcmV2ZW50RGVmYXVsdCddID0gdHJ1ZTsKICAgICAgfQogICAgfSk7CgoKICAgIC8vIHJld3JpdGUgaGFzaGJhbmcgdXJsIDw+IGh0bWw1IHVybAogICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPSBpbml0VXJsKSB7CiAgICAgICRicm93c2VyLnVybCgkbG9jYXRpb24uYWJzVXJsKCksIHRydWUpOwogICAgfQoKICAgIC8vIHVwZGF0ZSAkbG9jYXRpb24gd2hlbiAkYnJvd3NlciB1cmwgY2hhbmdlcwogICAgJGJyb3dzZXIub25VcmxDaGFuZ2UoZnVuY3Rpb24obmV3VXJsKSB7CiAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT0gbmV3VXJsKSB7CiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIG9sZFVybCA9ICRsb2NhdGlvbi5hYnNVcmwoKTsKCiAgICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShuZXdVcmwpOwogICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwpOwogICAgICAgIH0pOwogICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRkaWdlc3QoKTsKICAgICAgfQogICAgfSk7CgogICAgLy8gdXBkYXRlIGJyb3dzZXIKICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMDsKICAgICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uICRsb2NhdGlvbldhdGNoKCkgewogICAgICB2YXIgb2xkVXJsID0gJGJyb3dzZXIudXJsKCk7CgogICAgICBpZiAoIWNoYW5nZUNvdW50ZXIgfHwgb2xkVXJsICE9ICRsb2NhdGlvbi5hYnNVcmwoKSkgewogICAgICAgIGNoYW5nZUNvdW50ZXIrKzsKICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAoJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdGFydCcsICRsb2NhdGlvbi5hYnNVcmwoKSwgb2xkVXJsKS4KICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkKSB7CiAgICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkYnJvd3Nlci51cmwoJGxvY2F0aW9uLmFic1VybCgpLCAkbG9jYXRpb24uJCRyZXBsYWNlKTsKICAgICAgICAgICAgJGxvY2F0aW9uLiQkcmVwbGFjZSA9IGZhbHNlOwogICAgICAgICAgICBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjaGFuZ2VDb3VudGVyOwogICAgfSk7CgogICAgcmV0dXJuICRsb2NhdGlvbjsKCiAgICBmdW5jdGlvbiBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCkgewogICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCAkbG9jYXRpb24uYWJzVXJsKCksIG9sZFVybCk7CiAgICB9Cn1dOwp9CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kbG9nCiAqIEByZXF1aXJlcyAkd2luZG93CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTaW1wbGUgc2VydmljZSBmb3IgbG9nZ2luZy4gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB3cml0ZXMgdGhlIG1lc3NhZ2UKICogaW50byB0aGUgYnJvd3NlcidzIGNvbnNvbGUgKGlmIHByZXNlbnQpLgogKgogKiBUaGUgbWFpbiBwdXJwb3NlIG9mIHRoaXMgc2VydmljZSBpcyB0byBzaW1wbGlmeSBkZWJ1Z2dpbmcgYW5kIHRyb3VibGVzaG9vdGluZy4KICoKICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgZnVuY3Rpb24gTG9nQ3RybCgkbG9nKSB7CiAgICAgICAgICAgICB0aGlzLiRsb2cgPSAkbG9nOwogICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gJ0hlbGxvIFdvcmxkISc7CiAgICAgICAgICAgfQogICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJMb2dDdHJsIj4KICAgICAgICAgICA8cD5SZWxvYWQgdGhpcyBwYWdlIHdpdGggb3BlbiBjb25zb2xlLCBlbnRlciB0ZXh0IGFuZCBoaXQgdGhlIGxvZyBidXR0b24uLi48L3A+CiAgICAgICAgICAgTWVzc2FnZToKICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9Im1lc3NhZ2UiLz4KICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSIkbG9nLmxvZyhtZXNzYWdlKSI+bG9nPC9idXR0b24+CiAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iJGxvZy53YXJuKG1lc3NhZ2UpIj53YXJuPC9idXR0b24+CiAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iJGxvZy5pbmZvKG1lc3NhZ2UpIj5pbmZvPC9idXR0b24+CiAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iJGxvZy5lcnJvcihtZXNzYWdlKSI+ZXJyb3I8L2J1dHRvbj4KICAgICAgICAgPC9kaXY+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKi8KCmZ1bmN0aW9uICRMb2dQcm92aWRlcigpewogIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpewogICAgcmV0dXJuIHsKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgbmcuJGxvZyNsb2cKICAgICAgICogQG1ldGhvZE9mIG5nLiRsb2cKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGEgbG9nIG1lc3NhZ2UKICAgICAgICovCiAgICAgIGxvZzogY29uc29sZUxvZygnbG9nJyksCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSBuZy4kbG9nI3dhcm4KICAgICAgICogQG1ldGhvZE9mIG5nLiRsb2cKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGEgd2FybmluZyBtZXNzYWdlCiAgICAgICAqLwogICAgICB3YXJuOiBjb25zb2xlTG9nKCd3YXJuJyksCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSBuZy4kbG9nI2luZm8KICAgICAgICogQG1ldGhvZE9mIG5nLiRsb2cKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2UKICAgICAgICovCiAgICAgIGluZm86IGNvbnNvbGVMb2coJ2luZm8nKSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lIG5nLiRsb2cjZXJyb3IKICAgICAgICogQG1ldGhvZE9mIG5nLiRsb2cKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGFuIGVycm9yIG1lc3NhZ2UKICAgICAgICovCiAgICAgIGVycm9yOiBjb25zb2xlTG9nKCdlcnJvcicpCiAgICB9OwoKICAgIGZ1bmN0aW9uIGZvcm1hdEVycm9yKGFyZykgewogICAgICBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHsKICAgICAgICBpZiAoYXJnLnN0YWNrKSB7CiAgICAgICAgICBhcmcgPSAoYXJnLm1lc3NhZ2UgJiYgYXJnLnN0YWNrLmluZGV4T2YoYXJnLm1lc3NhZ2UpID09PSAtMSkKICAgICAgICAgICAgICA/ICdFcnJvcjogJyArIGFyZy5tZXNzYWdlICsgJ1xuJyArIGFyZy5zdGFjawogICAgICAgICAgICAgIDogYXJnLnN0YWNrOwogICAgICAgIH0gZWxzZSBpZiAoYXJnLnNvdXJjZVVSTCkgewogICAgICAgICAgYXJnID0gYXJnLm1lc3NhZ2UgKyAnXG4nICsgYXJnLnNvdXJjZVVSTCArICc6JyArIGFyZy5saW5lOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gYXJnOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnNvbGVMb2codHlwZSkgewogICAgICB2YXIgY29uc29sZSA9ICR3aW5kb3cuY29uc29sZSB8fCB7fSwKICAgICAgICAgIGxvZ0ZuID0gY29uc29sZVt0eXBlXSB8fCBjb25zb2xlLmxvZyB8fCBub29wOwoKICAgICAgaWYgKGxvZ0ZuLmFwcGx5KSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGFyZ3MgPSBbXTsKICAgICAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihhcmcpIHsKICAgICAgICAgICAgYXJncy5wdXNoKGZvcm1hdEVycm9yKGFyZykpOwogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gbG9nRm4uYXBwbHkoY29uc29sZSwgYXJncyk7CiAgICAgICAgfTsKICAgICAgfQoKICAgICAgLy8gd2UgYXJlIElFIHdoaWNoIGVpdGhlciBkb2Vzbid0IGhhdmUgd2luZG93LmNvbnNvbGUgPT4gdGhpcyBpcyBub29wIGFuZCB3ZSBkbyBub3RoaW5nLAogICAgICAvLyBvciB3ZSBhcmUgSUUgd2hlcmUgY29uc29sZS5sb2cgZG9lc24ndCBoYXZlIGFwcGx5IHNvIHdlIGxvZyBhdCBsZWFzdCBmaXJzdCAyIGFyZ3MKICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHsKICAgICAgICBsb2dGbihhcmcxLCBhcmcyKTsKICAgICAgfQogICAgfQogIH1dOwp9Cgp2YXIgT1BFUkFUT1JTID0gewogICAgJ251bGwnOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw7fSwKICAgICd0cnVlJzpmdW5jdGlvbigpe3JldHVybiB0cnVlO30sCiAgICAnZmFsc2UnOmZ1bmN0aW9uKCl7cmV0dXJuIGZhbHNlO30sCiAgICB1bmRlZmluZWQ6bm9vcCwKICAgICcrJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7YT1hKHNlbGYsIGxvY2Fscyk7IGI9YihzZWxmLCBsb2NhbHMpOyByZXR1cm4gKGlzRGVmaW5lZChhKT9hOjApKyhpc0RlZmluZWQoYik/YjowKTt9LAogICAgJy0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXthPWEoc2VsZiwgbG9jYWxzKTsgYj1iKHNlbGYsIGxvY2Fscyk7IHJldHVybiAoaXNEZWZpbmVkKGEpP2E6MCktKGlzRGVmaW5lZChiKT9iOjApO30sCiAgICAnKic6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2FscykqYihzZWxmLCBsb2NhbHMpO30sCiAgICAnLyc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2FscykvYihzZWxmLCBsb2NhbHMpO30sCiAgICAnJSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2FscyklYihzZWxmLCBsb2NhbHMpO30sCiAgICAnXic6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2FscyleYihzZWxmLCBsb2NhbHMpO30sCiAgICAnPSc6bm9vcCwKICAgICc9PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk9PWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJyE9JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSE9YihzZWxmLCBsb2NhbHMpO30sCiAgICAnPCc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk8YihzZWxmLCBsb2NhbHMpO30sCiAgICAnPic6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk+YihzZWxmLCBsb2NhbHMpO30sCiAgICAnPD0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpPD1iKHNlbGYsIGxvY2Fscyk7fSwKICAgICc+PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk+PWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJyYmJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSYmYihzZWxmLCBsb2NhbHMpO30sCiAgICAnfHwnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpfHxiKHNlbGYsIGxvY2Fscyk7fSwKICAgICcmJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSZiKHNlbGYsIGxvY2Fscyk7fSwKLy8gICAgJ3wnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYXxiO30sCiAgICAnfCc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBiKHNlbGYsIGxvY2Fscykoc2VsZiwgbG9jYWxzLCBhKHNlbGYsIGxvY2FscykpO30sCiAgICAnISc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhKXtyZXR1cm4gIWEoc2VsZiwgbG9jYWxzKTt9Cn07CnZhciBFU0NBUEUgPSB7Im4iOiJcbiIsICJmIjoiXGYiLCAiciI6IlxyIiwgInQiOiJcdCIsICJ2IjoiXHYiLCAiJyI6IiciLCAnIic6JyInfTsKCmZ1bmN0aW9uIGxleCh0ZXh0LCBjc3ApewogIHZhciB0b2tlbnMgPSBbXSwKICAgICAgdG9rZW4sCiAgICAgIGluZGV4ID0gMCwKICAgICAganNvbiA9IFtdLAogICAgICBjaCwKICAgICAgbGFzdENoID0gJzonOyAvLyBjYW4gc3RhcnQgcmVnZXhwCgogIHdoaWxlIChpbmRleCA8IHRleHQubGVuZ3RoKSB7CiAgICBjaCA9IHRleHQuY2hhckF0KGluZGV4KTsKICAgIGlmIChpcygnIlwnJykpIHsKICAgICAgcmVhZFN0cmluZyhjaCk7CiAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGNoKSB8fCBpcygnLicpICYmIGlzTnVtYmVyKHBlZWsoKSkpIHsKICAgICAgcmVhZE51bWJlcigpOwogICAgfSBlbHNlIGlmIChpc0lkZW50KGNoKSkgewogICAgICByZWFkSWRlbnQoKTsKICAgICAgLy8gaWRlbnRpZmllcnMgY2FuIG9ubHkgYmUgaWYgdGhlIHByZWNlZGluZyBjaGFyIHdhcyBhIHsgb3IgLAogICAgICBpZiAod2FzKCd7LCcpICYmIGpzb25bMF09PSd7JyAmJgogICAgICAgICAodG9rZW49dG9rZW5zW3Rva2Vucy5sZW5ndGgtMV0pKSB7CiAgICAgICAgdG9rZW4uanNvbiA9IHRva2VuLnRleHQuaW5kZXhPZignLicpID09IC0xOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGlzKCcoKXt9W10uLDs6JykpIHsKICAgICAgdG9rZW5zLnB1c2goewogICAgICAgIGluZGV4OmluZGV4LAogICAgICAgIHRleHQ6Y2gsCiAgICAgICAganNvbjood2FzKCc6WywnKSAmJiBpcygne1snKSkgfHwgaXMoJ31dOiwnKQogICAgICB9KTsKICAgICAgaWYgKGlzKCd7WycpKSBqc29uLnVuc2hpZnQoY2gpOwogICAgICBpZiAoaXMoJ31dJykpIGpzb24uc2hpZnQoKTsKICAgICAgaW5kZXgrKzsKICAgIH0gZWxzZSBpZiAoaXNXaGl0ZXNwYWNlKGNoKSkgewogICAgICBpbmRleCsrOwogICAgICBjb250aW51ZTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBjaDIgPSBjaCArIHBlZWsoKSwKICAgICAgICAgIGZuID0gT1BFUkFUT1JTW2NoXSwKICAgICAgICAgIGZuMiA9IE9QRVJBVE9SU1tjaDJdOwogICAgICBpZiAoZm4yKSB7CiAgICAgICAgdG9rZW5zLnB1c2goe2luZGV4OmluZGV4LCB0ZXh0OmNoMiwgZm46Zm4yfSk7CiAgICAgICAgaW5kZXggKz0gMjsKICAgICAgfSBlbHNlIGlmIChmbikgewogICAgICAgIHRva2Vucy5wdXNoKHtpbmRleDppbmRleCwgdGV4dDpjaCwgZm46Zm4sIGpzb246IHdhcygnWyw6JykgJiYgaXMoJystJyl9KTsKICAgICAgICBpbmRleCArPSAxOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93RXJyb3IoIlVuZXhwZWN0ZWQgbmV4dCBjaGFyYWN0ZXIgIiwgaW5kZXgsIGluZGV4KzEpOwogICAgICB9CiAgICB9CiAgICBsYXN0Q2ggPSBjaDsKICB9CiAgcmV0dXJuIHRva2VuczsKCiAgZnVuY3Rpb24gaXMoY2hhcnMpIHsKICAgIHJldHVybiBjaGFycy5pbmRleE9mKGNoKSAhPSAtMTsKICB9CgogIGZ1bmN0aW9uIHdhcyhjaGFycykgewogICAgcmV0dXJuIGNoYXJzLmluZGV4T2YobGFzdENoKSAhPSAtMTsKICB9CgogIGZ1bmN0aW9uIHBlZWsoKSB7CiAgICByZXR1cm4gaW5kZXggKyAxIDwgdGV4dC5sZW5ndGggPyB0ZXh0LmNoYXJBdChpbmRleCArIDEpIDogZmFsc2U7CiAgfQogIGZ1bmN0aW9uIGlzTnVtYmVyKGNoKSB7CiAgICByZXR1cm4gJzAnIDw9IGNoICYmIGNoIDw9ICc5JzsKICB9CiAgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKGNoKSB7CiAgICByZXR1cm4gY2ggPT0gJyAnIHx8IGNoID09ICdccicgfHwgY2ggPT0gJ1x0JyB8fAogICAgICAgICAgIGNoID09ICdcbicgfHwgY2ggPT0gJ1x2JyB8fCBjaCA9PSAnXHUwMEEwJzsgLy8gSUUgdHJlYXRzIG5vbi1icmVha2luZyBzcGFjZSBhcyBcdTAwQTAKICB9CiAgZnVuY3Rpb24gaXNJZGVudChjaCkgewogICAgcmV0dXJuICdhJyA8PSBjaCAmJiBjaCA8PSAneicgfHwKICAgICAgICAgICAnQScgPD0gY2ggJiYgY2ggPD0gJ1onIHx8CiAgICAgICAgICAgJ18nID09IGNoIHx8IGNoID09ICckJzsKICB9CiAgZnVuY3Rpb24gaXNFeHBPcGVyYXRvcihjaCkgewogICAgcmV0dXJuIGNoID09ICctJyB8fCBjaCA9PSAnKycgfHwgaXNOdW1iZXIoY2gpOwogIH0KCiAgZnVuY3Rpb24gdGhyb3dFcnJvcihlcnJvciwgc3RhcnQsIGVuZCkgewogICAgZW5kID0gZW5kIHx8IGluZGV4OwogICAgdGhyb3cgRXJyb3IoIkxleGVyIEVycm9yOiAiICsgZXJyb3IgKyAiIGF0IGNvbHVtbiIgKwogICAgICAgIChpc0RlZmluZWQoc3RhcnQpCiAgICAgICAgICAgID8gInMgIiArIHN0YXJ0ICsgICItIiArIGluZGV4ICsgIiBbIiArIHRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpICsgIl0iCiAgICAgICAgICAgIDogIiAiICsgZW5kKSArCiAgICAgICAgIiBpbiBleHByZXNzaW9uIFsiICsgdGV4dCArICJdLiIpOwogIH0KCiAgZnVuY3Rpb24gcmVhZE51bWJlcigpIHsKICAgIHZhciBudW1iZXIgPSAiIjsKICAgIHZhciBzdGFydCA9IGluZGV4OwogICAgd2hpbGUgKGluZGV4IDwgdGV4dC5sZW5ndGgpIHsKICAgICAgdmFyIGNoID0gbG93ZXJjYXNlKHRleHQuY2hhckF0KGluZGV4KSk7CiAgICAgIGlmIChjaCA9PSAnLicgfHwgaXNOdW1iZXIoY2gpKSB7CiAgICAgICAgbnVtYmVyICs9IGNoOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBwZWVrQ2ggPSBwZWVrKCk7CiAgICAgICAgaWYgKGNoID09ICdlJyAmJiBpc0V4cE9wZXJhdG9yKHBlZWtDaCkpIHsKICAgICAgICAgIG51bWJlciArPSBjaDsKICAgICAgICB9IGVsc2UgaWYgKGlzRXhwT3BlcmF0b3IoY2gpICYmCiAgICAgICAgICAgIHBlZWtDaCAmJiBpc051bWJlcihwZWVrQ2gpICYmCiAgICAgICAgICAgIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09ICdlJykgewogICAgICAgICAgbnVtYmVyICs9IGNoOwogICAgICAgIH0gZWxzZSBpZiAoaXNFeHBPcGVyYXRvcihjaCkgJiYKICAgICAgICAgICAgKCFwZWVrQ2ggfHwgIWlzTnVtYmVyKHBlZWtDaCkpICYmCiAgICAgICAgICAgIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09ICdlJykgewogICAgICAgICAgdGhyb3dFcnJvcignSW52YWxpZCBleHBvbmVudCcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgaW5kZXgrKzsKICAgIH0KICAgIG51bWJlciA9IDEgKiBudW1iZXI7CiAgICB0b2tlbnMucHVzaCh7aW5kZXg6c3RhcnQsIHRleHQ6bnVtYmVyLCBqc29uOnRydWUsCiAgICAgIGZuOmZ1bmN0aW9uKCkge3JldHVybiBudW1iZXI7fX0pOwogIH0KICBmdW5jdGlvbiByZWFkSWRlbnQoKSB7CiAgICB2YXIgaWRlbnQgPSAiIiwKICAgICAgICBzdGFydCA9IGluZGV4LAogICAgICAgIGxhc3REb3QsIHBlZWtJbmRleCwgbWV0aG9kTmFtZTsKCiAgICB3aGlsZSAoaW5kZXggPCB0ZXh0Lmxlbmd0aCkgewogICAgICB2YXIgY2ggPSB0ZXh0LmNoYXJBdChpbmRleCk7CiAgICAgIGlmIChjaCA9PSAnLicgfHwgaXNJZGVudChjaCkgfHwgaXNOdW1iZXIoY2gpKSB7CiAgICAgICAgaWYgKGNoID09ICcuJykgbGFzdERvdCA9IGluZGV4OwogICAgICAgIGlkZW50ICs9IGNoOwogICAgICB9IGVsc2UgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGluZGV4Kys7CiAgICB9CgogICAgLy9jaGVjayBpZiB0aGlzIGlzIG5vdCBhIG1ldGhvZCBpbnZvY2F0aW9uIGFuZCBpZiBpdCBpcyBiYWNrIG91dCB0byBsYXN0IGRvdAogICAgaWYgKGxhc3REb3QpIHsKICAgICAgcGVla0luZGV4ID0gaW5kZXg7CiAgICAgIHdoaWxlKHBlZWtJbmRleCA8IHRleHQubGVuZ3RoKSB7CiAgICAgICAgdmFyIGNoID0gdGV4dC5jaGFyQXQocGVla0luZGV4KTsKICAgICAgICBpZiAoY2ggPT0gJygnKSB7CiAgICAgICAgICBtZXRob2ROYW1lID0gaWRlbnQuc3Vic3RyKGxhc3REb3QgLSBzdGFydCArIDEpOwogICAgICAgICAgaWRlbnQgPSBpZGVudC5zdWJzdHIoMCwgbGFzdERvdCAtIHN0YXJ0KTsKICAgICAgICAgIGluZGV4ID0gcGVla0luZGV4OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmKGlzV2hpdGVzcGFjZShjaCkpIHsKICAgICAgICAgIHBlZWtJbmRleCsrOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCgogICAgdmFyIHRva2VuID0gewogICAgICBpbmRleDpzdGFydCwKICAgICAgdGV4dDppZGVudAogICAgfTsKCiAgICBpZiAoT1BFUkFUT1JTLmhhc093blByb3BlcnR5KGlkZW50KSkgewogICAgICB0b2tlbi5mbiA9IHRva2VuLmpzb24gPSBPUEVSQVRPUlNbaWRlbnRdOwogICAgfSBlbHNlIHsKICAgICAgdmFyIGdldHRlciA9IGdldHRlckZuKGlkZW50LCBjc3ApOwogICAgICB0b2tlbi5mbiA9IGV4dGVuZChmdW5jdGlvbihzZWxmLCBsb2NhbHMpIHsKICAgICAgICByZXR1cm4gKGdldHRlcihzZWxmLCBsb2NhbHMpKTsKICAgICAgfSwgewogICAgICAgIGFzc2lnbjogZnVuY3Rpb24oc2VsZiwgdmFsdWUpIHsKICAgICAgICAgIHJldHVybiBzZXR0ZXIoc2VsZiwgaWRlbnQsIHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIHRva2Vucy5wdXNoKHRva2VuKTsKCiAgICBpZiAobWV0aG9kTmFtZSkgewogICAgICB0b2tlbnMucHVzaCh7CiAgICAgICAgaW5kZXg6bGFzdERvdCwKICAgICAgICB0ZXh0OiAnLicsCiAgICAgICAganNvbjogZmFsc2UKICAgICAgfSk7CiAgICAgIHRva2Vucy5wdXNoKHsKICAgICAgICBpbmRleDogbGFzdERvdCArIDEsCiAgICAgICAgdGV4dDogbWV0aG9kTmFtZSwKICAgICAgICBqc29uOiBmYWxzZQogICAgICB9KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHJlYWRTdHJpbmcocXVvdGUpIHsKICAgIHZhciBzdGFydCA9IGluZGV4OwogICAgaW5kZXgrKzsKICAgIHZhciBzdHJpbmcgPSAiIjsKICAgIHZhciByYXdTdHJpbmcgPSBxdW90ZTsKICAgIHZhciBlc2NhcGUgPSBmYWxzZTsKICAgIHdoaWxlIChpbmRleCA8IHRleHQubGVuZ3RoKSB7CiAgICAgIHZhciBjaCA9IHRleHQuY2hhckF0KGluZGV4KTsKICAgICAgcmF3U3RyaW5nICs9IGNoOwogICAgICBpZiAoZXNjYXBlKSB7CiAgICAgICAgaWYgKGNoID09ICd1JykgewogICAgICAgICAgdmFyIGhleCA9IHRleHQuc3Vic3RyaW5nKGluZGV4ICsgMSwgaW5kZXggKyA1KTsKICAgICAgICAgIGlmICghaGV4Lm1hdGNoKC9bXGRhLWZdezR9L2kpKQogICAgICAgICAgICB0aHJvd0Vycm9yKCAiSW52YWxpZCB1bmljb2RlIGVzY2FwZSBbXFx1IiArIGhleCArICJdIik7CiAgICAgICAgICBpbmRleCArPSA0OwogICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgcmVwID0gRVNDQVBFW2NoXTsKICAgICAgICAgIGlmIChyZXApIHsKICAgICAgICAgICAgc3RyaW5nICs9IHJlcDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0cmluZyArPSBjaDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZXNjYXBlID0gZmFsc2U7CiAgICAgIH0gZWxzZSBpZiAoY2ggPT0gJ1xcJykgewogICAgICAgIGVzY2FwZSA9IHRydWU7CiAgICAgIH0gZWxzZSBpZiAoY2ggPT0gcXVvdGUpIHsKICAgICAgICBpbmRleCsrOwogICAgICAgIHRva2Vucy5wdXNoKHsKICAgICAgICAgIGluZGV4OnN0YXJ0LAogICAgICAgICAgdGV4dDpyYXdTdHJpbmcsCiAgICAgICAgICBzdHJpbmc6c3RyaW5nLAogICAgICAgICAganNvbjp0cnVlLAogICAgICAgICAgZm46ZnVuY3Rpb24oKSB7IHJldHVybiBzdHJpbmc7IH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RyaW5nICs9IGNoOwogICAgICB9CiAgICAgIGluZGV4Kys7CiAgICB9CiAgICB0aHJvd0Vycm9yKCJVbnRlcm1pbmF0ZWQgcXVvdGUiLCBzdGFydCk7CiAgfQp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKZnVuY3Rpb24gcGFyc2VyKHRleHQsIGpzb24sICRmaWx0ZXIsIGNzcCl7CiAgdmFyIFpFUk8gPSB2YWx1ZUZuKDApLAogICAgICB2YWx1ZSwKICAgICAgdG9rZW5zID0gbGV4KHRleHQsIGNzcCksCiAgICAgIGFzc2lnbm1lbnQgPSBfYXNzaWdubWVudCwKICAgICAgZnVuY3Rpb25DYWxsID0gX2Z1bmN0aW9uQ2FsbCwKICAgICAgZmllbGRBY2Nlc3MgPSBfZmllbGRBY2Nlc3MsCiAgICAgIG9iamVjdEluZGV4ID0gX29iamVjdEluZGV4LAogICAgICBmaWx0ZXJDaGFpbiA9IF9maWx0ZXJDaGFpbjsKCiAgaWYoanNvbil7CiAgICAvLyBUaGUgZXh0cmEgbGV2ZWwgb2YgYWxpYXNpbmcgaXMgaGVyZSwganVzdCBpbiBjYXNlIHRoZSBsZXhlciBtaXNzZXMgc29tZXRoaW5nLCBzbyB0aGF0CiAgICAvLyB3ZSBwcmV2ZW50IGFueSBhY2NpZGVudGFsIGV4ZWN1dGlvbiBpbiBKU09OLgogICAgYXNzaWdubWVudCA9IGxvZ2ljYWxPUjsKICAgIGZ1bmN0aW9uQ2FsbCA9CiAgICAgIGZpZWxkQWNjZXNzID0KICAgICAgb2JqZWN0SW5kZXggPQogICAgICBmaWx0ZXJDaGFpbiA9CiAgICAgICAgZnVuY3Rpb24oKSB7IHRocm93RXJyb3IoImlzIG5vdCB2YWxpZCBqc29uIiwge3RleHQ6dGV4dCwgaW5kZXg6MH0pOyB9OwogICAgdmFsdWUgPSBwcmltYXJ5KCk7CiAgfSBlbHNlIHsKICAgIHZhbHVlID0gc3RhdGVtZW50cygpOwogIH0KICBpZiAodG9rZW5zLmxlbmd0aCAhPT0gMCkgewogICAgdGhyb3dFcnJvcigiaXMgYW4gdW5leHBlY3RlZCB0b2tlbiIsIHRva2Vuc1swXSk7CiAgfQogIHJldHVybiB2YWx1ZTsKCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICBmdW5jdGlvbiB0aHJvd0Vycm9yKG1zZywgdG9rZW4pIHsKICAgIHRocm93IEVycm9yKCJTeW50YXggRXJyb3I6IFRva2VuICciICsgdG9rZW4udGV4dCArCiAgICAgICInICIgKyBtc2cgKyAiIGF0IGNvbHVtbiAiICsKICAgICAgKHRva2VuLmluZGV4ICsgMSkgKyAiIG9mIHRoZSBleHByZXNzaW9uIFsiICsKICAgICAgdGV4dCArICJdIHN0YXJ0aW5nIGF0IFsiICsgdGV4dC5zdWJzdHJpbmcodG9rZW4uaW5kZXgpICsgIl0uIik7CiAgfQoKICBmdW5jdGlvbiBwZWVrVG9rZW4oKSB7CiAgICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMCkKICAgICAgdGhyb3cgRXJyb3IoIlVuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246ICIgKyB0ZXh0KTsKICAgIHJldHVybiB0b2tlbnNbMF07CiAgfQoKICBmdW5jdGlvbiBwZWVrKGUxLCBlMiwgZTMsIGU0KSB7CiAgICBpZiAodG9rZW5zLmxlbmd0aCA+IDApIHsKICAgICAgdmFyIHRva2VuID0gdG9rZW5zWzBdOwogICAgICB2YXIgdCA9IHRva2VuLnRleHQ7CiAgICAgIGlmICh0PT1lMSB8fCB0PT1lMiB8fCB0PT1lMyB8fCB0PT1lNCB8fAogICAgICAgICAgKCFlMSAmJiAhZTIgJiYgIWUzICYmICFlNCkpIHsKICAgICAgICByZXR1cm4gdG9rZW47CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CgogIGZ1bmN0aW9uIGV4cGVjdChlMSwgZTIsIGUzLCBlNCl7CiAgICB2YXIgdG9rZW4gPSBwZWVrKGUxLCBlMiwgZTMsIGU0KTsKICAgIGlmICh0b2tlbikgewogICAgICBpZiAoanNvbiAmJiAhdG9rZW4uanNvbikgewogICAgICAgIHRocm93RXJyb3IoImlzIG5vdCB2YWxpZCBqc29uIiwgdG9rZW4pOwogICAgICB9CiAgICAgIHRva2Vucy5zaGlmdCgpOwogICAgICByZXR1cm4gdG9rZW47CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBmdW5jdGlvbiBjb25zdW1lKGUxKXsKICAgIGlmICghZXhwZWN0KGUxKSkgewogICAgICB0aHJvd0Vycm9yKCJpcyB1bmV4cGVjdGVkLCBleHBlY3RpbmcgWyIgKyBlMSArICJdIiwgcGVlaygpKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHVuYXJ5Rm4oZm4sIHJpZ2h0KSB7CiAgICByZXR1cm4gZnVuY3Rpb24oc2VsZiwgbG9jYWxzKSB7CiAgICAgIHJldHVybiBmbihzZWxmLCBsb2NhbHMsIHJpZ2h0KTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBiaW5hcnlGbihsZWZ0LCBmbiwgcmlnaHQpIHsKICAgIHJldHVybiBmdW5jdGlvbihzZWxmLCBsb2NhbHMpIHsKICAgICAgcmV0dXJuIGZuKHNlbGYsIGxvY2FscywgbGVmdCwgcmlnaHQpOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIHN0YXRlbWVudHMoKSB7CiAgICB2YXIgc3RhdGVtZW50cyA9IFtdOwogICAgd2hpbGUodHJ1ZSkgewogICAgICBpZiAodG9rZW5zLmxlbmd0aCA+IDAgJiYgIXBlZWsoJ30nLCAnKScsICc7JywgJ10nKSkKICAgICAgICBzdGF0ZW1lbnRzLnB1c2goZmlsdGVyQ2hhaW4oKSk7CiAgICAgIGlmICghZXhwZWN0KCc7JykpIHsKICAgICAgICAvLyBvcHRpbWl6ZSBmb3IgdGhlIGNvbW1vbiBjYXNlIHdoZXJlIHRoZXJlIGlzIG9ubHkgb25lIHN0YXRlbWVudC4KICAgICAgICAvLyBUT0RPKHNpemUpOiBtYXliZSB3ZSBzaG91bGQgbm90IHN1cHBvcnQgbXVsdGlwbGUgc3RhdGVtZW50cz8KICAgICAgICByZXR1cm4gc3RhdGVtZW50cy5sZW5ndGggPT0gMQogICAgICAgICAgPyBzdGF0ZW1lbnRzWzBdCiAgICAgICAgICA6IGZ1bmN0aW9uKHNlbGYsIGxvY2Fscyl7CiAgICAgICAgICAgIHZhciB2YWx1ZTsKICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc3RhdGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIHZhciBzdGF0ZW1lbnQgPSBzdGF0ZW1lbnRzW2ldOwogICAgICAgICAgICAgIGlmIChzdGF0ZW1lbnQpCiAgICAgICAgICAgICAgICB2YWx1ZSA9IHN0YXRlbWVudChzZWxmLCBsb2NhbHMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgIH07CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIF9maWx0ZXJDaGFpbigpIHsKICAgIHZhciBsZWZ0ID0gZXhwcmVzc2lvbigpOwogICAgdmFyIHRva2VuOwogICAgd2hpbGUodHJ1ZSkgewogICAgICBpZiAoKHRva2VuID0gZXhwZWN0KCd8JykpKSB7CiAgICAgICAgbGVmdCA9IGJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCBmaWx0ZXIoKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGxlZnQ7CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGZpbHRlcigpIHsKICAgIHZhciB0b2tlbiA9IGV4cGVjdCgpOwogICAgdmFyIGZuID0gJGZpbHRlcih0b2tlbi50ZXh0KTsKICAgIHZhciBhcmdzRm4gPSBbXTsKICAgIHdoaWxlKHRydWUpIHsKICAgICAgaWYgKCh0b2tlbiA9IGV4cGVjdCgnOicpKSkgewogICAgICAgIGFyZ3NGbi5wdXNoKGV4cHJlc3Npb24oKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGZuSW52b2tlID0gZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBpbnB1dCl7CiAgICAgICAgICB2YXIgYXJncyA9IFtpbnB1dF07CiAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmdzRm4ubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgYXJncy5wdXNoKGFyZ3NGbltpXShzZWxmLCBsb2NhbHMpKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTsKICAgICAgICB9OwogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBmbkludm9rZTsKICAgICAgICB9OwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBleHByZXNzaW9uKCkgewogICAgcmV0dXJuIGFzc2lnbm1lbnQoKTsKICB9CgogIGZ1bmN0aW9uIF9hc3NpZ25tZW50KCkgewogICAgdmFyIGxlZnQgPSBsb2dpY2FsT1IoKTsKICAgIHZhciByaWdodDsKICAgIHZhciB0b2tlbjsKICAgIGlmICgodG9rZW4gPSBleHBlY3QoJz0nKSkpIHsKICAgICAgaWYgKCFsZWZ0LmFzc2lnbikgewogICAgICAgIHRocm93RXJyb3IoImltcGxpZXMgYXNzaWdubWVudCBidXQgWyIgKwogICAgICAgICAgdGV4dC5zdWJzdHJpbmcoMCwgdG9rZW4uaW5kZXgpICsgIl0gY2FuIG5vdCBiZSBhc3NpZ25lZCB0byIsIHRva2VuKTsKICAgICAgfQogICAgICByaWdodCA9IGxvZ2ljYWxPUigpOwogICAgICByZXR1cm4gZnVuY3Rpb24oc2VsZiwgbG9jYWxzKXsKICAgICAgICByZXR1cm4gbGVmdC5hc3NpZ24oc2VsZiwgcmlnaHQoc2VsZiwgbG9jYWxzKSwgbG9jYWxzKTsKICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBsZWZ0OwogICAgfQogIH0KCiAgZnVuY3Rpb24gbG9naWNhbE9SKCkgewogICAgdmFyIGxlZnQgPSBsb2dpY2FsQU5EKCk7CiAgICB2YXIgdG9rZW47CiAgICB3aGlsZSh0cnVlKSB7CiAgICAgIGlmICgodG9rZW4gPSBleHBlY3QoJ3x8JykpKSB7CiAgICAgICAgbGVmdCA9IGJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCBsb2dpY2FsQU5EKCkpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBsZWZ0OwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBsb2dpY2FsQU5EKCkgewogICAgdmFyIGxlZnQgPSBlcXVhbGl0eSgpOwogICAgdmFyIHRva2VuOwogICAgaWYgKCh0b2tlbiA9IGV4cGVjdCgnJiYnKSkpIHsKICAgICAgbGVmdCA9IGJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCBsb2dpY2FsQU5EKCkpOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfQoKICBmdW5jdGlvbiBlcXVhbGl0eSgpIHsKICAgIHZhciBsZWZ0ID0gcmVsYXRpb25hbCgpOwogICAgdmFyIHRva2VuOwogICAgaWYgKCh0b2tlbiA9IGV4cGVjdCgnPT0nLCchPScpKSkgewogICAgICBsZWZ0ID0gYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIGVxdWFsaXR5KCkpOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfQoKICBmdW5jdGlvbiByZWxhdGlvbmFsKCkgewogICAgdmFyIGxlZnQgPSBhZGRpdGl2ZSgpOwogICAgdmFyIHRva2VuOwogICAgaWYgKCh0b2tlbiA9IGV4cGVjdCgnPCcsICc+JywgJzw9JywgJz49JykpKSB7CiAgICAgIGxlZnQgPSBiaW5hcnlGbihsZWZ0LCB0b2tlbi5mbiwgcmVsYXRpb25hbCgpKTsKICAgIH0KICAgIHJldHVybiBsZWZ0OwogIH0KCiAgZnVuY3Rpb24gYWRkaXRpdmUoKSB7CiAgICB2YXIgbGVmdCA9IG11bHRpcGxpY2F0aXZlKCk7CiAgICB2YXIgdG9rZW47CiAgICB3aGlsZSAoKHRva2VuID0gZXhwZWN0KCcrJywnLScpKSkgewogICAgICBsZWZ0ID0gYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIG11bHRpcGxpY2F0aXZlKCkpOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfQoKICBmdW5jdGlvbiBtdWx0aXBsaWNhdGl2ZSgpIHsKICAgIHZhciBsZWZ0ID0gdW5hcnkoKTsKICAgIHZhciB0b2tlbjsKICAgIHdoaWxlICgodG9rZW4gPSBleHBlY3QoJyonLCcvJywnJScpKSkgewogICAgICBsZWZ0ID0gYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHVuYXJ5KCkpOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfQoKICBmdW5jdGlvbiB1bmFyeSgpIHsKICAgIHZhciB0b2tlbjsKICAgIGlmIChleHBlY3QoJysnKSkgewogICAgICByZXR1cm4gcHJpbWFyeSgpOwogICAgfSBlbHNlIGlmICgodG9rZW4gPSBleHBlY3QoJy0nKSkpIHsKICAgICAgcmV0dXJuIGJpbmFyeUZuKFpFUk8sIHRva2VuLmZuLCB1bmFyeSgpKTsKICAgIH0gZWxzZSBpZiAoKHRva2VuID0gZXhwZWN0KCchJykpKSB7CiAgICAgIHJldHVybiB1bmFyeUZuKHRva2VuLmZuLCB1bmFyeSgpKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBwcmltYXJ5KCk7CiAgICB9CiAgfQoKCiAgZnVuY3Rpb24gcHJpbWFyeSgpIHsKICAgIHZhciBwcmltYXJ5OwogICAgaWYgKGV4cGVjdCgnKCcpKSB7CiAgICAgIHByaW1hcnkgPSBmaWx0ZXJDaGFpbigpOwogICAgICBjb25zdW1lKCcpJyk7CiAgICB9IGVsc2UgaWYgKGV4cGVjdCgnWycpKSB7CiAgICAgIHByaW1hcnkgPSBhcnJheURlY2xhcmF0aW9uKCk7CiAgICB9IGVsc2UgaWYgKGV4cGVjdCgneycpKSB7CiAgICAgIHByaW1hcnkgPSBvYmplY3QoKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciB0b2tlbiA9IGV4cGVjdCgpOwogICAgICBwcmltYXJ5ID0gdG9rZW4uZm47CiAgICAgIGlmICghcHJpbWFyeSkgewogICAgICAgIHRocm93RXJyb3IoIm5vdCBhIHByaW1hcnkgZXhwcmVzc2lvbiIsIHRva2VuKTsKICAgICAgfQogICAgfQoKICAgIHZhciBuZXh0LCBjb250ZXh0OwogICAgd2hpbGUgKChuZXh0ID0gZXhwZWN0KCcoJywgJ1snLCAnLicpKSkgewogICAgICBpZiAobmV4dC50ZXh0ID09PSAnKCcpIHsKICAgICAgICBwcmltYXJ5ID0gZnVuY3Rpb25DYWxsKHByaW1hcnksIGNvbnRleHQpOwogICAgICAgIGNvbnRleHQgPSBudWxsOwogICAgICB9IGVsc2UgaWYgKG5leHQudGV4dCA9PT0gJ1snKSB7CiAgICAgICAgY29udGV4dCA9IHByaW1hcnk7CiAgICAgICAgcHJpbWFyeSA9IG9iamVjdEluZGV4KHByaW1hcnkpOwogICAgICB9IGVsc2UgaWYgKG5leHQudGV4dCA9PT0gJy4nKSB7CiAgICAgICAgY29udGV4dCA9IHByaW1hcnk7CiAgICAgICAgcHJpbWFyeSA9IGZpZWxkQWNjZXNzKHByaW1hcnkpOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93RXJyb3IoIklNUE9TU0lCTEUiKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHByaW1hcnk7CiAgfQoKICBmdW5jdGlvbiBfZmllbGRBY2Nlc3Mob2JqZWN0KSB7CiAgICB2YXIgZmllbGQgPSBleHBlY3QoKS50ZXh0OwogICAgdmFyIGdldHRlciA9IGdldHRlckZuKGZpZWxkLCBjc3ApOwogICAgcmV0dXJuIGV4dGVuZCgKICAgICAgICBmdW5jdGlvbihzZWxmLCBsb2NhbHMpIHsKICAgICAgICAgIHJldHVybiBnZXR0ZXIob2JqZWN0KHNlbGYsIGxvY2FscyksIGxvY2Fscyk7CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBhc3NpZ246ZnVuY3Rpb24oc2VsZiwgdmFsdWUsIGxvY2FscykgewogICAgICAgICAgICByZXR1cm4gc2V0dGVyKG9iamVjdChzZWxmLCBsb2NhbHMpLCBmaWVsZCwgdmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICk7CiAgfQoKICBmdW5jdGlvbiBfb2JqZWN0SW5kZXgob2JqKSB7CiAgICB2YXIgaW5kZXhGbiA9IGV4cHJlc3Npb24oKTsKICAgIGNvbnN1bWUoJ10nKTsKICAgIHJldHVybiBleHRlbmQoCiAgICAgIGZ1bmN0aW9uKHNlbGYsIGxvY2Fscyl7CiAgICAgICAgdmFyIG8gPSBvYmooc2VsZiwgbG9jYWxzKSwKICAgICAgICAgICAgaSA9IGluZGV4Rm4oc2VsZiwgbG9jYWxzKSwKICAgICAgICAgICAgdiwgcDsKCiAgICAgICAgaWYgKCFvKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgIHYgPSBvW2ldOwogICAgICAgIGlmICh2ICYmIHYudGhlbikgewogICAgICAgICAgcCA9IHY7CiAgICAgICAgICBpZiAoISgnJCR2JyBpbiB2KSkgewogICAgICAgICAgICBwLiQkdiA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgcC50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwLiQkdiA9IHZhbDsgfSk7CiAgICAgICAgICB9CiAgICAgICAgICB2ID0gdi4kJHY7CiAgICAgICAgfQogICAgICAgIHJldHVybiB2OwogICAgICB9LCB7CiAgICAgICAgYXNzaWduOmZ1bmN0aW9uKHNlbGYsIHZhbHVlLCBsb2NhbHMpewogICAgICAgICAgcmV0dXJuIG9iaihzZWxmLCBsb2NhbHMpW2luZGV4Rm4oc2VsZiwgbG9jYWxzKV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gX2Z1bmN0aW9uQ2FsbChmbiwgY29udGV4dEdldHRlcikgewogICAgdmFyIGFyZ3NGbiA9IFtdOwogICAgaWYgKHBlZWtUb2tlbigpLnRleHQgIT0gJyknKSB7CiAgICAgIGRvIHsKICAgICAgICBhcmdzRm4ucHVzaChleHByZXNzaW9uKCkpOwogICAgICB9IHdoaWxlIChleHBlY3QoJywnKSk7CiAgICB9CiAgICBjb25zdW1lKCcpJyk7CiAgICByZXR1cm4gZnVuY3Rpb24oc2VsZiwgbG9jYWxzKXsKICAgICAgdmFyIGFyZ3MgPSBbXSwKICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0R2V0dGVyID8gY29udGV4dEdldHRlcihzZWxmLCBsb2NhbHMpIDogc2VsZjsKCiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGFyZ3NGbi5sZW5ndGg7IGkrKykgewogICAgICAgIGFyZ3MucHVzaChhcmdzRm5baV0oc2VsZiwgbG9jYWxzKSk7CiAgICAgIH0KICAgICAgdmFyIGZuUHRyID0gZm4oc2VsZiwgbG9jYWxzKSB8fCBub29wOwogICAgICAvLyBJRSBzdHVwaWRpdHkhCiAgICAgIHJldHVybiBmblB0ci5hcHBseQogICAgICAgICAgPyBmblB0ci5hcHBseShjb250ZXh0LCBhcmdzKQogICAgICAgICAgOiBmblB0cihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTsKICAgIH07CiAgfQoKICAvLyBUaGlzIGlzIHVzZWQgd2l0aCBqc29uIGFycmF5IGRlY2xhcmF0aW9uCiAgZnVuY3Rpb24gYXJyYXlEZWNsYXJhdGlvbiAoKSB7CiAgICB2YXIgZWxlbWVudEZucyA9IFtdOwogICAgaWYgKHBlZWtUb2tlbigpLnRleHQgIT0gJ10nKSB7CiAgICAgIGRvIHsKICAgICAgICBlbGVtZW50Rm5zLnB1c2goZXhwcmVzc2lvbigpKTsKICAgICAgfSB3aGlsZSAoZXhwZWN0KCcsJykpOwogICAgfQogICAgY29uc3VtZSgnXScpOwogICAgcmV0dXJuIGZ1bmN0aW9uKHNlbGYsIGxvY2Fscyl7CiAgICAgIHZhciBhcnJheSA9IFtdOwogICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBlbGVtZW50Rm5zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgYXJyYXkucHVzaChlbGVtZW50Rm5zW2ldKHNlbGYsIGxvY2FscykpOwogICAgICB9CiAgICAgIHJldHVybiBhcnJheTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBvYmplY3QgKCkgewogICAgdmFyIGtleVZhbHVlcyA9IFtdOwogICAgaWYgKHBlZWtUb2tlbigpLnRleHQgIT0gJ30nKSB7CiAgICAgIGRvIHsKICAgICAgICB2YXIgdG9rZW4gPSBleHBlY3QoKSwKICAgICAgICBrZXkgPSB0b2tlbi5zdHJpbmcgfHwgdG9rZW4udGV4dDsKICAgICAgICBjb25zdW1lKCI6Iik7CiAgICAgICAgdmFyIHZhbHVlID0gZXhwcmVzc2lvbigpOwogICAgICAgIGtleVZhbHVlcy5wdXNoKHtrZXk6a2V5LCB2YWx1ZTp2YWx1ZX0pOwogICAgICB9IHdoaWxlIChleHBlY3QoJywnKSk7CiAgICB9CiAgICBjb25zdW1lKCd9Jyk7CiAgICByZXR1cm4gZnVuY3Rpb24oc2VsZiwgbG9jYWxzKXsKICAgICAgdmFyIG9iamVjdCA9IHt9OwogICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBrZXlWYWx1ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIga2V5VmFsdWUgPSBrZXlWYWx1ZXNbaV07CiAgICAgICAgdmFyIHZhbHVlID0ga2V5VmFsdWUudmFsdWUoc2VsZiwgbG9jYWxzKTsKICAgICAgICBvYmplY3Rba2V5VmFsdWUua2V5XSA9IHZhbHVlOwogICAgICB9CiAgICAgIHJldHVybiBvYmplY3Q7CiAgICB9OwogIH0KfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KLy8gUGFyc2VyIGhlbHBlciBmdW5jdGlvbnMKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCmZ1bmN0aW9uIHNldHRlcihvYmosIHBhdGgsIHNldFZhbHVlKSB7CiAgdmFyIGVsZW1lbnQgPSBwYXRoLnNwbGl0KCcuJyk7CiAgZm9yICh2YXIgaSA9IDA7IGVsZW1lbnQubGVuZ3RoID4gMTsgaSsrKSB7CiAgICB2YXIga2V5ID0gZWxlbWVudC5zaGlmdCgpOwogICAgdmFyIHByb3BlcnR5T2JqID0gb2JqW2tleV07CiAgICBpZiAoIXByb3BlcnR5T2JqKSB7CiAgICAgIHByb3BlcnR5T2JqID0ge307CiAgICAgIG9ialtrZXldID0gcHJvcGVydHlPYmo7CiAgICB9CiAgICBvYmogPSBwcm9wZXJ0eU9iajsKICB9CiAgb2JqW2VsZW1lbnQuc2hpZnQoKV0gPSBzZXRWYWx1ZTsKICByZXR1cm4gc2V0VmFsdWU7Cn0KCi8qKgogKiBSZXR1cm4gdGhlIHZhbHVlIGFjY2VzaWJsZSBmcm9tIHRoZSBvYmplY3QgYnkgcGF0aC4gQW55IHVuZGVmaW5lZCB0cmF2ZXJzYWxzIGFyZSBpZ25vcmVkCiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogc3RhcnRpbmcgb2JqZWN0CiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIHBhdGggdG8gdHJhdmVyc2UKICogQHBhcmFtIHtib29sZWFuPXRydWV9IGJpbmRGblRvU2NvcGUKICogQHJldHVybnMgdmFsdWUgYXMgYWNjZXNiaWxlIGJ5IHBhdGgKICovCi8vVE9ETyhtaXNrbyk6IHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmVtb3ZlZApmdW5jdGlvbiBnZXR0ZXIob2JqLCBwYXRoLCBiaW5kRm5Ub1Njb3BlKSB7CiAgaWYgKCFwYXRoKSByZXR1cm4gb2JqOwogIHZhciBrZXlzID0gcGF0aC5zcGxpdCgnLicpOwogIHZhciBrZXk7CiAgdmFyIGxhc3RJbnN0YW5jZSA9IG9iajsKICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgIGtleSA9IGtleXNbaV07CiAgICBpZiAob2JqKSB7CiAgICAgIG9iaiA9IChsYXN0SW5zdGFuY2UgPSBvYmopW2tleV07CiAgICB9CiAgfQogIGlmICghYmluZEZuVG9TY29wZSAmJiBpc0Z1bmN0aW9uKG9iaikpIHsKICAgIHJldHVybiBiaW5kKGxhc3RJbnN0YW5jZSwgb2JqKTsKICB9CiAgcmV0dXJuIG9iajsKfQoKdmFyIGdldHRlckZuQ2FjaGUgPSB7fTsKCi8qKgogKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgIkJsYWNrIEhvbGUiIHZhcmlhbnQgZnJvbToKICogLSBodHRwOi8vanNwZXJmLmNvbS9hbmd1bGFyanMtcGFyc2UtZ2V0dGVyLzQKICogLSBodHRwOi8vanNwZXJmLmNvbS9wYXRoLWV2YWx1YXRpb24tc2ltcGxpZmllZC83CiAqLwpmdW5jdGlvbiBjc3BTYWZlR2V0dGVyRm4oa2V5MCwga2V5MSwga2V5Miwga2V5Mywga2V5NCkgewogIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzKSB7CiAgICB2YXIgcGF0aFZhbCA9IChsb2NhbHMgJiYgbG9jYWxzLmhhc093blByb3BlcnR5KGtleTApKSA/IGxvY2FscyA6IHNjb3BlLAogICAgICAgIHByb21pc2U7CgogICAgaWYgKHBhdGhWYWwgPT09IG51bGwgfHwgcGF0aFZhbCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gcGF0aFZhbDsKCiAgICBwYXRoVmFsID0gcGF0aFZhbFtrZXkwXTsKICAgIGlmIChwYXRoVmFsICYmIHBhdGhWYWwudGhlbikgewogICAgICBpZiAoISgiJCR2IiBpbiBwYXRoVmFsKSkgewogICAgICAgIHByb21pc2UgPSBwYXRoVmFsOwogICAgICAgIHByb21pc2UuJCR2ID0gdW5kZWZpbmVkOwogICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWwpIHsgcHJvbWlzZS4kJHYgPSB2YWw7IH0pOwogICAgICB9CiAgICAgIHBhdGhWYWwgPSBwYXRoVmFsLiQkdjsKICAgIH0KICAgIGlmICgha2V5MSB8fCBwYXRoVmFsID09PSBudWxsIHx8IHBhdGhWYWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHBhdGhWYWw7CgogICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5MV07CiAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHsKICAgICAgaWYgKCEoIiQkdiIgaW4gcGF0aFZhbCkpIHsKICAgICAgICBwcm9taXNlID0gcGF0aFZhbDsKICAgICAgICBwcm9taXNlLiQkdiA9IHVuZGVmaW5lZDsKICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsKSB7IHByb21pc2UuJCR2ID0gdmFsOyB9KTsKICAgICAgfQogICAgICBwYXRoVmFsID0gcGF0aFZhbC4kJHY7CiAgICB9CiAgICBpZiAoIWtleTIgfHwgcGF0aFZhbCA9PT0gbnVsbCB8fCBwYXRoVmFsID09PSB1bmRlZmluZWQpIHJldHVybiBwYXRoVmFsOwoKICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTJdOwogICAgaWYgKHBhdGhWYWwgJiYgcGF0aFZhbC50aGVuKSB7CiAgICAgIGlmICghKCIkJHYiIGluIHBhdGhWYWwpKSB7CiAgICAgICAgcHJvbWlzZSA9IHBhdGhWYWw7CiAgICAgICAgcHJvbWlzZS4kJHYgPSB1bmRlZmluZWQ7CiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwcm9taXNlLiQkdiA9IHZhbDsgfSk7CiAgICAgIH0KICAgICAgcGF0aFZhbCA9IHBhdGhWYWwuJCR2OwogICAgfQogICAgaWYgKCFrZXkzIHx8IHBhdGhWYWwgPT09IG51bGwgfHwgcGF0aFZhbCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gcGF0aFZhbDsKCiAgICBwYXRoVmFsID0gcGF0aFZhbFtrZXkzXTsKICAgIGlmIChwYXRoVmFsICYmIHBhdGhWYWwudGhlbikgewogICAgICBpZiAoISgiJCR2IiBpbiBwYXRoVmFsKSkgewogICAgICAgIHByb21pc2UgPSBwYXRoVmFsOwogICAgICAgIHByb21pc2UuJCR2ID0gdW5kZWZpbmVkOwogICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWwpIHsgcHJvbWlzZS4kJHYgPSB2YWw7IH0pOwogICAgICB9CiAgICAgIHBhdGhWYWwgPSBwYXRoVmFsLiQkdjsKICAgIH0KICAgIGlmICgha2V5NCB8fCBwYXRoVmFsID09PSBudWxsIHx8IHBhdGhWYWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHBhdGhWYWw7CgogICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5NF07CiAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHsKICAgICAgaWYgKCEoIiQkdiIgaW4gcGF0aFZhbCkpIHsKICAgICAgICBwcm9taXNlID0gcGF0aFZhbDsKICAgICAgICBwcm9taXNlLiQkdiA9IHVuZGVmaW5lZDsKICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsKSB7IHByb21pc2UuJCR2ID0gdmFsOyB9KTsKICAgICAgfQogICAgICBwYXRoVmFsID0gcGF0aFZhbC4kJHY7CiAgICB9CiAgICByZXR1cm4gcGF0aFZhbDsKICB9Owp9OwoKZnVuY3Rpb24gZ2V0dGVyRm4ocGF0aCwgY3NwKSB7CiAgaWYgKGdldHRlckZuQ2FjaGUuaGFzT3duUHJvcGVydHkocGF0aCkpIHsKICAgIHJldHVybiBnZXR0ZXJGbkNhY2hlW3BhdGhdOwogIH0KCiAgdmFyIHBhdGhLZXlzID0gcGF0aC5zcGxpdCgnLicpLAogICAgICBwYXRoS2V5c0xlbmd0aCA9IHBhdGhLZXlzLmxlbmd0aCwKICAgICAgZm47CgogIGlmIChjc3ApIHsKICAgIGZuID0gKHBhdGhLZXlzTGVuZ3RoIDwgNikKICAgICAgICA/IGNzcFNhZmVHZXR0ZXJGbihwYXRoS2V5c1swXSwgcGF0aEtleXNbMV0sIHBhdGhLZXlzWzJdLCBwYXRoS2V5c1szXSwgcGF0aEtleXNbNF0pCiAgICAgICAgOiBmdW5jdGlvbihzY29wZSwgbG9jYWxzKSB7CiAgICAgICAgICB2YXIgaSA9IDAsIHZhbAogICAgICAgICAgZG8gewogICAgICAgICAgICB2YWwgPSBjc3BTYWZlR2V0dGVyRm4oCiAgICAgICAgICAgICAgICAgICAgcGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXQogICAgICAgICAgICAgICAgICApKHNjb3BlLCBsb2NhbHMpOwoKICAgICAgICAgICAgbG9jYWxzID0gdW5kZWZpbmVkOyAvLyBjbGVhciBhZnRlciBmaXJzdCBpdGVyYXRpb24KICAgICAgICAgICAgc2NvcGUgPSB2YWw7CiAgICAgICAgICB9IHdoaWxlIChpIDwgcGF0aEtleXNMZW5ndGgpOwogICAgICAgICAgcmV0dXJuIHZhbDsKICAgICAgICB9CiAgfSBlbHNlIHsKICAgIHZhciBjb2RlID0gJ3ZhciBsLCBmbiwgcDtcbic7CiAgICBmb3JFYWNoKHBhdGhLZXlzLCBmdW5jdGlvbihrZXksIGluZGV4KSB7CiAgICAgIGNvZGUgKz0gJ2lmKHMgPT09IG51bGwgfHwgcyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gcztcbicgKwogICAgICAgICAgICAgICdsPXM7XG4nICsKICAgICAgICAgICAgICAncz0nKyAoaW5kZXgKICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHNpbXBseSBkZXJlZmVyZW5jZSAncycgb24gYW55IC5kb3Qgbm90YXRpb24KICAgICAgICAgICAgICAgICAgICAgID8gJ3MnCiAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgaWYgd2UgYXJlIGZpcnN0IHRoZW4gd2UgY2hlY2sgbG9jYWxzIGZpcnN0LCBhbmQgaWYgc28gcmVhZCBpdCBmaXJzdAogICAgICAgICAgICAgICAgICAgICAgOiAnKChrJiZrLmhhc093blByb3BlcnR5KCInICsga2V5ICsgJyIpKT9rOnMpJykgKyAnWyInICsga2V5ICsgJyJdJyArICc7XG4nICsKICAgICAgICAgICAgICAnaWYgKHMgJiYgcy50aGVuKSB7XG4nICsKICAgICAgICAgICAgICAgICcgaWYgKCEoIiQkdiIgaW4gcykpIHtcbicgKwogICAgICAgICAgICAgICAgICAnIHA9cztcbicgKwogICAgICAgICAgICAgICAgICAnIHAuJCR2ID0gdW5kZWZpbmVkO1xuJyArCiAgICAgICAgICAgICAgICAgICcgcC50aGVuKGZ1bmN0aW9uKHYpIHtwLiQkdj12O30pO1xuJyArCiAgICAgICAgICAgICAgICAgICd9XG4nICsKICAgICAgICAgICAgICAgICcgcz1zLiQkdlxuJyArCiAgICAgICAgICAgICAgJ31cbic7CiAgICB9KTsKICAgIGNvZGUgKz0gJ3JldHVybiBzOyc7CiAgICBmbiA9IEZ1bmN0aW9uKCdzJywgJ2snLCBjb2RlKTsgLy8gcz1zY29wZSwgaz1sb2NhbHMKICAgIGZuLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb2RlOyB9OwogIH0KCiAgcmV0dXJuIGdldHRlckZuQ2FjaGVbcGF0aF0gPSBmbjsKfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgbmcuJHBhcnNlCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICoKICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uCiAqCiAqIDxwcmU+CiAqICAgdmFyIGdldHRlciA9ICRwYXJzZSgndXNlci5uYW1lJyk7CiAqICAgdmFyIHNldHRlciA9IGdldHRlci5hc3NpZ247CiAqICAgdmFyIGNvbnRleHQgPSB7dXNlcjp7bmFtZTonYW5ndWxhcid9fTsKICogICB2YXIgbG9jYWxzID0ge3VzZXI6e25hbWU6J2xvY2FsJ319OwogKgogKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCkpLnRvRXF1YWwoJ2FuZ3VsYXInKTsKICogICBzZXR0ZXIoY29udGV4dCwgJ25ld1ZhbHVlJyk7CiAqICAgZXhwZWN0KGNvbnRleHQudXNlci5uYW1lKS50b0VxdWFsKCduZXdWYWx1ZScpOwogKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCwgbG9jYWxzKSkudG9FcXVhbCgnbG9jYWwnKTsKICogPC9wcmU+CiAqCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuCiAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246CiAqCiAqICAgICogYGNvbnRleHRgOiBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3MgYXJlIGV2YWx1YXRlZAogKiAgICAgIGFnYWluc3QgKFRvcGljYWxseSBhIHNjb3BlIG9iamVjdCkuCiAqICAgICogYGxvY2Fsc2A6IGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbiBgY29udGV4dGAuCiAqCiAqICAgIFRoZSByZXR1cm4gZnVuY3Rpb24gYWxzbyBoYXMgYW4gYGFzc2lnbmAgcHJvcGVydHksIGlmIHRoZSBleHByZXNzaW9uIGlzIGFzc2lnbmFibGUsIHdoaWNoCiAqICAgIGFsbG93cyBvbmUgdG8gc2V0IHZhbHVlcyB0byBleHByZXNzaW9ucy4KICoKICovCmZ1bmN0aW9uICRQYXJzZVByb3ZpZGVyKCkgewogIHZhciBjYWNoZSA9IHt9OwogIHRoaXMuJGdldCA9IFsnJGZpbHRlcicsICckc25pZmZlcicsIGZ1bmN0aW9uKCRmaWx0ZXIsICRzbmlmZmVyKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oZXhwKSB7CiAgICAgIHN3aXRjaCh0eXBlb2YgZXhwKSB7CiAgICAgICAgY2FzZSAnc3RyaW5nJzoKICAgICAgICAgIHJldHVybiBjYWNoZS5oYXNPd25Qcm9wZXJ0eShleHApCiAgICAgICAgICAgID8gY2FjaGVbZXhwXQogICAgICAgICAgICA6IGNhY2hlW2V4cF0gPSAgcGFyc2VyKGV4cCwgZmFsc2UsICRmaWx0ZXIsICRzbmlmZmVyLmNzcCk7CiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOgogICAgICAgICAgcmV0dXJuIGV4cDsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIG5vb3A7CiAgICAgIH0KICAgIH07CiAgfV07Cn0KCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSBuZy4kcQogKiBAcmVxdWlyZXMgJHJvb3RTY29wZQogKgogKiBAZGVzY3JpcHRpb24KICogQSBwcm9taXNlL2RlZmVycmVkIGltcGxlbWVudGF0aW9uIGluc3BpcmVkIGJ5IFtLcmlzIEtvd2FsJ3MgUV0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xKS4KICoKICogW1RoZSBDb21tb25KUyBQcm9taXNlIHByb3Bvc2FsXShodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Qcm9taXNlcykgZGVzY3JpYmVzIGEgcHJvbWlzZSBhcyBhbgogKiBpbnRlcmZhY2UgZm9yIGludGVyYWN0aW5nIHdpdGggYW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcmVzdWx0IG9mIGFuIGFjdGlvbiB0aGF0IGlzCiAqIHBlcmZvcm1lZCBhc3luY2hyb25vdXNseSwgYW5kIG1heSBvciBtYXkgbm90IGJlIGZpbmlzaGVkIGF0IGFueSBnaXZlbiBwb2ludCBpbiB0aW1lLgogKgogKiBGcm9tIHRoZSBwZXJzcGVjdGl2ZSBvZiBkZWFsaW5nIHdpdGggZXJyb3IgaGFuZGxpbmcsIGRlZmVycmVkIGFuZCBwcm9taXNlIGFwaXMgYXJlIHRvCiAqIGFzeW5jaHJvbm91cyBwcm9ncmFtaW5nIHdoYXQgYHRyeWAsIGBjYXRjaGAgYW5kIGB0aHJvd2Aga2V5d29yZHMgYXJlIHRvIHN5bmNocm9ub3VzIHByb2dyYW1pbmcuCiAqCiAqIDxwcmU+CiAqICAgLy8gZm9yIHRoZSBwdXJwb3NlIG9mIHRoaXMgZXhhbXBsZSBsZXQncyBhc3N1bWUgdGhhdCB2YXJpYWJsZXMgYCRxYCBhbmQgYHNjb3BlYCBhcmUKICogICAvLyBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZSAodGhleSBjb3VsZCBoYXZlIGJlZW4gaW5qZWN0ZWQgb3IgcGFzc2VkIGluKS4KICoKICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHsKICogICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7CiAqCiAqICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogKiAgICAgICAvLyBzaW5jZSB0aGlzIGZuIGV4ZWN1dGVzIGFzeW5jIGluIGEgZnV0dXJlIHR1cm4gb2YgdGhlIGV2ZW50IGxvb3AsIHdlIG5lZWQgdG8gd3JhcAogKiAgICAgICAvLyBvdXIgY29kZSBpbnRvIGFuICRhcHBseSBjYWxsIHNvIHRoYXQgdGhlIG1vZGVsIGNoYW5nZXMgYXJlIHByb3Blcmx5IG9ic2VydmVkLgogKiAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAqICAgICAgICAgaWYgKG9rVG9HcmVldChuYW1lKSkgewogKiAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTsKICogICAgICAgICB9IGVsc2UgewogKiAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCdHcmVldGluZyAnICsgbmFtZSArICcgaXMgbm90IGFsbG93ZWQuJyk7CiAqICAgICAgICAgfQogKiAgICAgICB9KTsKICogICAgIH0sIDEwMDApOwogKgogKiAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7CiAqICAgfQogKgogKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpOwogKiAgIHByb21pc2UudGhlbihmdW5jdGlvbihncmVldGluZykgewogKiAgICAgYWxlcnQoJ1N1Y2Nlc3M6ICcgKyBncmVldGluZyk7CiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7CiAqICAgICBhbGVydCgnRmFpbGVkOiAnICsgcmVhc29uKTsKICogICApOwogKiA8L3ByZT4KICoKICogQXQgZmlyc3QgaXQgbWlnaHQgbm90IGJlIG9idmlvdXMgd2h5IHRoaXMgZXh0cmEgY29tcGxleGl0eSBpcyB3b3J0aCB0aGUgdHJvdWJsZS4gVGhlIHBheW9mZgogKiBjb21lcyBpbiB0aGUgd2F5IG9mCiAqIFtndWFyYW50ZWVzIHRoYXQgcHJvbWlzZSBhbmQgZGVmZXJyZWQgYXBpcyBtYWtlXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3VuY29tbW9uanMvYmxvYi9tYXN0ZXIvcHJvbWlzZXMvc3BlY2lmaWNhdGlvbi5tZCkuCiAqCiAqIEFkZGl0aW9uYWxseSB0aGUgcHJvbWlzZSBhcGkgYWxsb3dzIGZvciBjb21wb3NpdGlvbiB0aGF0IGlzIHZlcnkgaGFyZCB0byBkbyB3aXRoIHRoZQogKiB0cmFkaXRpb25hbCBjYWxsYmFjayAoW0NQU10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db250aW51YXRpb24tcGFzc2luZ19zdHlsZSkpIGFwcHJvYWNoLgogKiBGb3IgbW9yZSBvbiB0aGlzIHBsZWFzZSBzZWUgdGhlIFtRIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkgZXNwZWNpYWxseSB0aGUKICogc2VjdGlvbiBvbiBzZXJpYWwgb3IgcGFyYWxsZWwgam9pbmluZyBvZiBwcm9taXNlcy4KICoKICoKICogIyBUaGUgRGVmZXJyZWQgQVBJCiAqCiAqIEEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkIGlzIGNvbnN0cnVjdGVkIGJ5IGNhbGxpbmcgYCRxLmRlZmVyKClgLgogKgogKiBUaGUgcHVycG9zZSBvZiB0aGUgZGVmZXJyZWQgb2JqZWN0IGlzIHRvIGV4cG9zZSB0aGUgYXNzb2NpYXRlZCBQcm9taXNlIGluc3RhbmNlIGFzIHdlbGwgYXMgYXBpcwogKiB0aGF0IGNhbiBiZSB1c2VkIGZvciBzaWduYWxpbmcgdGhlIHN1Y2Nlc3NmdWwgb3IgdW5zdWNjZXNzZnVsIGNvbXBsZXRpb24gb2YgdGhlIHRhc2suCiAqCiAqICoqTWV0aG9kcyoqCiAqCiAqIC0gYHJlc29sdmUodmFsdWUpYCDigJMgcmVzb2x2ZXMgdGhlIGRlcml2ZWQgcHJvbWlzZSB3aXRoIHRoZSBgdmFsdWVgLiBJZiB0aGUgdmFsdWUgaXMgYSByZWplY3Rpb24KICogICBjb25zdHJ1Y3RlZCB2aWEgYCRxLnJlamVjdGAsIHRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgaW5zdGVhZC4KICogLSBgcmVqZWN0KHJlYXNvbilgIOKAkyByZWplY3RzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHJlYXNvbmAuIFRoaXMgaXMgZXF1aXZhbGVudCB0bwogKiAgIHJlc29sdmluZyBpdCB3aXRoIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YC4KICoKICogKipQcm9wZXJ0aWVzKioKICoKICogLSBwcm9taXNlIOKAkyBge1Byb21pc2V9YCDigJMgcHJvbWlzZSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZGVmZXJyZWQuCiAqCiAqCiAqICMgVGhlIFByb21pc2UgQVBJCiAqCiAqIEEgbmV3IHByb21pc2UgaW5zdGFuY2UgaXMgY3JlYXRlZCB3aGVuIGEgZGVmZXJyZWQgaW5zdGFuY2UgaXMgY3JlYXRlZCBhbmQgY2FuIGJlIHJldHJpZXZlZCBieQogKiBjYWxsaW5nIGBkZWZlcnJlZC5wcm9taXNlYC4KICoKICogVGhlIHB1cnBvc2Ugb2YgdGhlIHByb21pc2Ugb2JqZWN0IGlzIHRvIGFsbG93IGZvciBpbnRlcmVzdGVkIHBhcnRpZXMgdG8gZ2V0IGFjY2VzcyB0byB0aGUgcmVzdWx0CiAqIG9mIHRoZSBkZWZlcnJlZCB0YXNrIHdoZW4gaXQgY29tcGxldGVzLgogKgogKiAqKk1ldGhvZHMqKgogKgogKiAtIGB0aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaylgIOKAkyByZWdhcmRsZXNzIG9mIHdoZW4gdGhlIHByb21pc2Ugd2FzIG9yIHdpbGwgYmUgcmVzb2x2ZWQKICogICBvciByZWplY3RlZCBjYWxscyBvbmUgb2YgdGhlIHN1Y2Nlc3Mgb3IgZXJyb3IgY2FsbGJhY2tzIGFzeW5jaHJvbm91c2x5IGFzIHNvb24gYXMgdGhlIHJlc3VsdAogKiAgIGlzIGF2YWlsYWJsZS4gVGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgdGhlIHJlc3VsdCBvciByZWplY3Rpb24gcmVhc29uLgogKgogKiAgIFRoaXMgbWV0aG9kICpyZXR1cm5zIGEgbmV3IHByb21pc2UqIHdoaWNoIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZQogKiAgIGBzdWNjZXNzQ2FsbGJhY2tgIG9yIGBlcnJvckNhbGxiYWNrYC4KICoKICoKICogIyBDaGFpbmluZyBwcm9taXNlcwogKgogKiBCZWNhdXNlIGNhbGxpbmcgYHRoZW5gIGFwaSBvZiBhIHByb21pc2UgcmV0dXJucyBhIG5ldyBkZXJpdmVkIHByb21pc2UsIGl0IGlzIGVhc2lseSBwb3NzaWJsZQogKiB0byBjcmVhdGUgYSBjaGFpbiBvZiBwcm9taXNlczoKICoKICogPHByZT4KICogICBwcm9taXNlQiA9IHByb21pc2VBLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7CiAqICAgICByZXR1cm4gcmVzdWx0ICsgMTsKICogICB9KTsKICoKICogICAvLyBwcm9taXNlQiB3aWxsIGJlIHJlc29sdmVkIGltbWVkaWF0ZWx5IGFmdGVyIHByb21pc2VBIGlzIHJlc29sdmVkIGFuZCBpdCdzIHZhbHVlIHdpbGwgYmUKICogICAvLyB0aGUgcmVzdWx0IG9mIHByb21pc2VBIGluY3JlbWVudGVkIGJ5IDEKICogPC9wcmU+CiAqCiAqIEl0IGlzIHBvc3NpYmxlIHRvIGNyZWF0ZSBjaGFpbnMgb2YgYW55IGxlbmd0aCBhbmQgc2luY2UgYSBwcm9taXNlIGNhbiBiZSByZXNvbHZlZCB3aXRoIGFub3RoZXIKICogcHJvbWlzZSAod2hpY2ggd2lsbCBkZWZlciBpdHMgcmVzb2x1dGlvbiBmdXJ0aGVyKSwgaXQgaXMgcG9zc2libGUgdG8gcGF1c2UvZGVmZXIgcmVzb2x1dGlvbiBvZgogKiB0aGUgcHJvbWlzZXMgYXQgYW55IHBvaW50IGluIHRoZSBjaGFpbi4gVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSB0byBpbXBsZW1lbnQgcG93ZXJmdWwgYXBpcyBsaWtlCiAqICRodHRwJ3MgcmVzcG9uc2UgaW50ZXJjZXB0b3JzLgogKgogKgogKiAjIERpZmZlcmVuY2VzIGJldHdlZW4gS3JpcyBLb3dhbCdzIFEgYW5kICRxCiAqCiAqICBUaGVyZSBhcmUgdGhyZWUgbWFpbiBkaWZmZXJlbmNlczoKICoKICogLSAkcSBpcyBpbnRlZ3JhdGVkIHdpdGggdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlfSBTY29wZSBtb2RlbCBvYnNlcnZhdGlvbgogKiAgIG1lY2hhbmlzbSBpbiBhbmd1bGFyLCB3aGljaCBtZWFucyBmYXN0ZXIgcHJvcGFnYXRpb24gb2YgcmVzb2x1dGlvbiBvciByZWplY3Rpb24gaW50byB5b3VyCiAqICAgbW9kZWxzIGFuZCBhdm9pZGluZyB1bm5lY2Vzc2FyeSBicm93c2VyIHJlcGFpbnRzLCB3aGljaCB3b3VsZCByZXN1bHQgaW4gZmxpY2tlcmluZyBVSS4KICogLSAkcSBwcm9taXNlcyBhcmUgcmVjb2duaXplZCBieSB0aGUgdGVtcGxhdGluZyBlbmdpbmUgaW4gYW5ndWxhciwgd2hpY2ggbWVhbnMgdGhhdCBpbiB0ZW1wbGF0ZXMKICogICB5b3UgY2FuIHRyZWF0IHByb21pc2VzIGF0dGFjaGVkIHRvIGEgc2NvcGUgYXMgaWYgdGhleSB3ZXJlIHRoZSByZXN1bHRpbmcgdmFsdWVzLgogKiAtIFEgaGFzIG1hbnkgbW9yZSBmZWF0dXJlcyB0aGF0ICRxLCBidXQgdGhhdCBjb21lcyBhdCBhIGNvc3Qgb2YgYnl0ZXMuICRxIGlzIHRpbnksIGJ1dCBjb250YWlucwogKiAgIGFsbCB0aGUgaW1wb3J0YW50IGZ1bmN0aW9uYWxpdHkgbmVlZGVkIGZvciBjb21tb24gYXN5bmMgdGFza3MuCiAqLwpmdW5jdGlvbiAkUVByb3ZpZGVyKCkgewoKICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlcikgewogICAgcmV0dXJuIHFGYWN0b3J5KGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhjYWxsYmFjayk7CiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlcik7CiAgfV07Cn0KCgovKioKICogQ29uc3RydWN0cyBhIHByb21pc2UgbWFuYWdlci4KICoKICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbil9IG5leHRUaWNrIEZ1bmN0aW9uIGZvciBleGVjdXRpbmcgZnVuY3Rpb25zIGluIHRoZSBuZXh0IHR1cm4uCiAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uKil9IGV4Y2VwdGlvbkhhbmRsZXIgRnVuY3Rpb24gaW50byB3aGljaCB1bmV4cGVjdGVkIGV4Y2VwdGlvbnMgYXJlIHBhc3NlZCBmb3IKICogICAgIGRlYnVnZ2luZyBwdXJwb3Nlcy4KICogQHJldHVybnMge29iamVjdH0gUHJvbWlzZSBtYW5hZ2VyLgogKi8KZnVuY3Rpb24gcUZhY3RvcnkobmV4dFRpY2ssIGV4Y2VwdGlvbkhhbmRsZXIpIHsKCiAgLyoqCiAgICogQG5nZG9jCiAgICogQG5hbWUgbmcuJHEjZGVmZXIKICAgKiBAbWV0aG9kT2YgbmcuJHEKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDcmVhdGVzIGEgYERlZmVycmVkYCBvYmplY3Qgd2hpY2ggcmVwcmVzZW50cyBhIHRhc2sgd2hpY2ggd2lsbCBmaW5pc2ggaW4gdGhlIGZ1dHVyZS4KICAgKgogICAqIEByZXR1cm5zIHtEZWZlcnJlZH0gUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiBkZWZlcnJlZC4KICAgKi8KICB2YXIgZGVmZXIgPSBmdW5jdGlvbigpIHsKICAgIHZhciBwZW5kaW5nID0gW10sCiAgICAgICAgdmFsdWUsIGRlZmVycmVkOwoKICAgIGRlZmVycmVkID0gewoKICAgICAgcmVzb2x2ZTogZnVuY3Rpb24odmFsKSB7CiAgICAgICAgaWYgKHBlbmRpbmcpIHsKICAgICAgICAgIHZhciBjYWxsYmFja3MgPSBwZW5kaW5nOwogICAgICAgICAgcGVuZGluZyA9IHVuZGVmaW5lZDsKICAgICAgICAgIHZhbHVlID0gcmVmKHZhbCk7CgogICAgICAgICAgaWYgKGNhbGxiYWNrcy5sZW5ndGgpIHsKICAgICAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrOwogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXTsKICAgICAgICAgICAgICAgIHZhbHVlLnRoZW4oY2FsbGJhY2tbMF0sIGNhbGxiYWNrWzFdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKCgogICAgICByZWplY3Q6IGZ1bmN0aW9uKHJlYXNvbikgewogICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVqZWN0KHJlYXNvbikpOwogICAgICB9LAoKCiAgICAgIHByb21pc2U6IHsKICAgICAgICB0aGVuOiBmdW5jdGlvbihjYWxsYmFjaywgZXJyYmFjaykgewogICAgICAgICAgdmFyIHJlc3VsdCA9IGRlZmVyKCk7CgogICAgICAgICAgdmFyIHdyYXBwZWRDYWxsYmFjayA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgcmVzdWx0LnJlc29sdmUoKGNhbGxiYWNrIHx8IGRlZmF1bHRDYWxsYmFjaykodmFsdWUpKTsKICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgICByZXN1bHQucmVqZWN0KGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwoKICAgICAgICAgIHZhciB3cmFwcGVkRXJyYmFjayA9IGZ1bmN0aW9uKHJlYXNvbikgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIHJlc3VsdC5yZXNvbHZlKChlcnJiYWNrIHx8IGRlZmF1bHRFcnJiYWNrKShyZWFzb24pKTsKICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgICByZXN1bHQucmVqZWN0KGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwoKICAgICAgICAgIGlmIChwZW5kaW5nKSB7CiAgICAgICAgICAgIHBlbmRpbmcucHVzaChbd3JhcHBlZENhbGxiYWNrLCB3cmFwcGVkRXJyYmFja10pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFsdWUudGhlbih3cmFwcGVkQ2FsbGJhY2ssIHdyYXBwZWRFcnJiYWNrKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIHJldHVybiBkZWZlcnJlZDsKICB9OwoKCiAgdmFyIHJlZiA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICBpZiAodmFsdWUgJiYgdmFsdWUudGhlbikgcmV0dXJuIHZhbHVlOwogICAgcmV0dXJuIHsKICAgICAgdGhlbjogZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgICAgICB2YXIgcmVzdWx0ID0gZGVmZXIoKTsKICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgIHJlc3VsdC5yZXNvbHZlKGNhbGxiYWNrKHZhbHVlKSk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlOwogICAgICB9CiAgICB9OwogIH07CgoKICAvKioKICAgKiBAbmdkb2MKICAgKiBAbmFtZSBuZy4kcSNyZWplY3QKICAgKiBAbWV0aG9kT2YgbmcuJHEKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDcmVhdGVzIGEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIGFzIHJlamVjdGVkIHdpdGggdGhlIHNwZWNpZmllZCBgcmVhc29uYC4gVGhpcyBhcGkgc2hvdWxkIGJlCiAgICogdXNlZCB0byBmb3J3YXJkIHJlamVjdGlvbiBpbiBhIGNoYWluIG9mIHByb21pc2VzLiBJZiB5b3UgYXJlIGRlYWxpbmcgd2l0aCB0aGUgbGFzdCBwcm9taXNlIGluCiAgICogYSBwcm9taXNlIGNoYWluLCB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCBpdC4KICAgKgogICAqIFdoZW4gY29tcGFyaW5nIGRlZmVycmVkcy9wcm9taXNlcyB0byB0aGUgZmFtaWxpYXIgYmVoYXZpb3Igb2YgdHJ5L2NhdGNoL3Rocm93LCB0aGluayBvZgogICAqIGByZWplY3RgIGFzIHRoZSBgdGhyb3dgIGtleXdvcmQgaW4gSmF2YVNjcmlwdC4gVGhpcyBhbHNvIG1lYW5zIHRoYXQgaWYgeW91ICJjYXRjaCIgYW4gZXJyb3IgdmlhCiAgICogYSBwcm9taXNlIGVycm9yIGNhbGxiYWNrIGFuZCB5b3Ugd2FudCB0byBmb3J3YXJkIHRoZSBlcnJvciB0byB0aGUgcHJvbWlzZSBkZXJpdmVkIGZyb20gdGhlCiAgICogY3VycmVudCBwcm9taXNlLCB5b3UgaGF2ZSB0byAicmV0aHJvdyIgdGhlIGVycm9yIGJ5IHJldHVybmluZyBhIHJlamVjdGlvbiBjb25zdHJ1Y3RlZCB2aWEKICAgKiBgcmVqZWN0YC4KICAgKgogICAqIDxwcmU+CiAgICogICBwcm9taXNlQiA9IHByb21pc2VBLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7CiAgICogICAgIC8vIHN1Y2Nlc3M6IGRvIHNvbWV0aGluZyBhbmQgcmVzb2x2ZSBwcm9taXNlQgogICAqICAgICAvLyAgICAgICAgICB3aXRoIHRoZSBvbGQgb3IgYSBuZXcgcmVzdWx0CiAgICogICAgIHJldHVybiByZXN1bHQ7CiAgICogICB9LCBmdW5jdGlvbihyZWFzb24pIHsKICAgKiAgICAgLy8gZXJyb3I6IGhhbmRsZSB0aGUgZXJyb3IgaWYgcG9zc2libGUgYW5kCiAgICogICAgIC8vICAgICAgICByZXNvbHZlIHByb21pc2VCIHdpdGggbmV3UHJvbWlzZU9yVmFsdWUsCiAgICogICAgIC8vICAgICAgICBvdGhlcndpc2UgZm9yd2FyZCB0aGUgcmVqZWN0aW9uIHRvIHByb21pc2VCCiAgICogICAgIGlmIChjYW5IYW5kbGUocmVhc29uKSkgewogICAqICAgICAgLy8gaGFuZGxlIHRoZSBlcnJvciBhbmQgcmVjb3ZlcgogICAqICAgICAgcmV0dXJuIG5ld1Byb21pc2VPclZhbHVlOwogICAqICAgICB9CiAgICogICAgIHJldHVybiAkcS5yZWplY3QocmVhc29uKTsKICAgKiAgIH0pOwogICAqIDwvcHJlPgogICAqCiAgICogQHBhcmFtIHsqfSByZWFzb24gQ29uc3RhbnQsIG1lc3NhZ2UsIGV4Y2VwdGlvbiBvciBhbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByZWplY3Rpb24gcmVhc29uLgogICAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdhcyBhbHJlYWR5IHJlc29sdmVkIGFzIHJlamVjdGVkIHdpdGggdGhlIGByZWFzb25gLgogICAqLwogIHZhciByZWplY3QgPSBmdW5jdGlvbihyZWFzb24pIHsKICAgIHJldHVybiB7CiAgICAgIHRoZW46IGZ1bmN0aW9uKGNhbGxiYWNrLCBlcnJiYWNrKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IGRlZmVyKCk7CiAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXN1bHQucmVzb2x2ZSgoZXJyYmFjayB8fCBkZWZhdWx0RXJyYmFjaykocmVhc29uKSk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlOwogICAgICB9CiAgICB9OwogIH07CgoKICAvKioKICAgKiBAbmdkb2MKICAgKiBAbmFtZSBuZy4kcSN3aGVuCiAgICogQG1ldGhvZE9mIG5nLiRxCiAgICogQGRlc2NyaXB0aW9uCiAgICogV3JhcHMgYW4gb2JqZWN0IHRoYXQgbWlnaHQgYmUgYSB2YWx1ZSBvciBhICgzcmQgcGFydHkpIHRoZW4tYWJsZSBwcm9taXNlIGludG8gYSAkcSBwcm9taXNlLgogICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IGFyZSBkZWFsaW5nIHdpdGggb24gb2JqZWN0IHRoYXQgbWlnaHQgb3IgbWlnaHQgbm90IGJlIGEgcHJvbWlzZSwgb3IgaWYKICAgKiB0aGUgcHJvbWlzZSBjb21lcyBmcm9tIGEgc291cmNlIHRoYXQgY2FuJ3QgYmUgdHJ1c3RlZC4KICAgKgogICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgb3IgYSBwcm9taXNlCiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBzaW5nbGUgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBhbiBhcnJheSBvZiB2YWx1ZXMsCiAgICogICBlYWNoIHZhbHVlIGNvcmVzcG9uZGluZyB0byB0aGUgcHJvbWlzZSBhdCB0aGUgc2FtZSBpbmRleCBpbiB0aGUgYHByb21pc2VzYCBhcnJheS4gSWYgYW55IG9mCiAgICogICB0aGUgcHJvbWlzZXMgaXMgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbiwgdGhpcyByZXN1bHRpbmcgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGggdGhlCiAgICogICBzYW1lIHJlamVjdGlvbi4KICAgKi8KICB2YXIgd2hlbiA9IGZ1bmN0aW9uKHZhbHVlLCBjYWxsYmFjaywgZXJyYmFjaykgewogICAgdmFyIHJlc3VsdCA9IGRlZmVyKCksCiAgICAgICAgZG9uZTsKCiAgICB2YXIgd3JhcHBlZENhbGxiYWNrID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgdHJ5IHsKICAgICAgICByZXR1cm4gKGNhbGxiYWNrIHx8IGRlZmF1bHRDYWxsYmFjaykodmFsdWUpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICByZXR1cm4gcmVqZWN0KGUpOwogICAgICB9CiAgICB9OwoKICAgIHZhciB3cmFwcGVkRXJyYmFjayA9IGZ1bmN0aW9uKHJlYXNvbikgewogICAgICB0cnkgewogICAgICAgIHJldHVybiAoZXJyYmFjayB8fCBkZWZhdWx0RXJyYmFjaykocmVhc29uKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgcmV0dXJuIHJlamVjdChlKTsKICAgICAgfQogICAgfTsKCiAgICBuZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgcmVmKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKGRvbmUpIHJldHVybjsKICAgICAgICBkb25lID0gdHJ1ZTsKICAgICAgICByZXN1bHQucmVzb2x2ZShyZWYodmFsdWUpLnRoZW4od3JhcHBlZENhbGxiYWNrLCB3cmFwcGVkRXJyYmFjaykpOwogICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHsKICAgICAgICBpZiAoZG9uZSkgcmV0dXJuOwogICAgICAgIGRvbmUgPSB0cnVlOwogICAgICAgIHJlc3VsdC5yZXNvbHZlKHdyYXBwZWRFcnJiYWNrKHJlYXNvbikpOwogICAgICB9KTsKICAgIH0pOwoKICAgIHJldHVybiByZXN1bHQucHJvbWlzZTsKICB9OwoKCiAgZnVuY3Rpb24gZGVmYXVsdENhbGxiYWNrKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWU7CiAgfQoKCiAgZnVuY3Rpb24gZGVmYXVsdEVycmJhY2socmVhc29uKSB7CiAgICByZXR1cm4gcmVqZWN0KHJlYXNvbik7CiAgfQoKCiAgLyoqCiAgICogQG5nZG9jCiAgICogQG5hbWUgbmcuJHEjYWxsCiAgICogQG1ldGhvZE9mIG5nLiRxCiAgICogQGRlc2NyaXB0aW9uCiAgICogQ29tYmluZXMgbXVsdGlwbGUgcHJvbWlzZXMgaW50byBhIHNpbmdsZSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiBhbGwgb2YgdGhlIGlucHV0CiAgICogcHJvbWlzZXMgYXJlIHJlc29sdmVkLgogICAqCiAgICogQHBhcmFtIHtBcnJheS48UHJvbWlzZT59IHByb21pc2VzIEFuIGFycmF5IG9mIHByb21pc2VzLgogICAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgc2luZ2xlIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdpdGggYW4gYXJyYXkgb2YgdmFsdWVzLAogICAqICAgZWFjaCB2YWx1ZSBjb3Jlc3BvbmRpbmcgdG8gdGhlIHByb21pc2UgYXQgdGhlIHNhbWUgaW5kZXggaW4gdGhlIGBwcm9taXNlc2AgYXJyYXkuIElmIGFueSBvZgogICAqICAgdGhlIHByb21pc2VzIGlzIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24sIHRoaXMgcmVzdWx0aW5nIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoIHRoZQogICAqICAgc2FtZSByZWplY3Rpb24uCiAgICovCiAgZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7CiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpLAogICAgICAgIGNvdW50ZXIgPSBwcm9taXNlcy5sZW5ndGgsCiAgICAgICAgcmVzdWx0cyA9IFtdOwoKICAgIGlmIChjb3VudGVyKSB7CiAgICAgIGZvckVhY2gocHJvbWlzZXMsIGZ1bmN0aW9uKHByb21pc2UsIGluZGV4KSB7CiAgICAgICAgcmVmKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgIGlmIChpbmRleCBpbiByZXN1bHRzKSByZXR1cm47CiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHZhbHVlOwogICAgICAgICAgaWYgKCEoLS1jb3VudGVyKSkgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzKTsKICAgICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHsKICAgICAgICAgIGlmIChpbmRleCBpbiByZXN1bHRzKSByZXR1cm47CiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVhc29uKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpOwogICAgfQoKICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlOwogIH0KCiAgcmV0dXJuIHsKICAgIGRlZmVyOiBkZWZlciwKICAgIHJlamVjdDogcmVqZWN0LAogICAgd2hlbjogd2hlbiwKICAgIGFsbDogYWxsCiAgfTsKfQoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJHJvdXRlUHJvdmlkZXIKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBVc2VkIGZvciBjb25maWd1cmluZyByb3V0ZXMuIFNlZSB7QGxpbmsgbmcuJHJvdXRlICRyb3V0ZX0gZm9yIGFuIGV4YW1wbGUuCiAqLwpmdW5jdGlvbiAkUm91dGVQcm92aWRlcigpewogIHZhciByb3V0ZXMgPSB7fTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRyb3V0ZVByb3ZpZGVyI3doZW4KICAgKiBAbWV0aG9kT2YgbmcuJHJvdXRlUHJvdmlkZXIKICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFJvdXRlIHBhdGggKG1hdGNoZWQgYWdhaW5zdCBgJGxvY2F0aW9uLnBhdGhgKS4gSWYgYCRsb2NhdGlvbi5wYXRoYAogICAqICAgIGNvbnRhaW5zIHJlZHVuZGFudCB0cmFpbGluZyBzbGFzaCBvciBpcyBtaXNzaW5nIG9uZSwgdGhlIHJvdXRlIHdpbGwgc3RpbGwgbWF0Y2ggYW5kIHRoZQogICAqICAgIGAkbG9jYXRpb24ucGF0aGAgd2lsbCBiZSB1cGRhdGVkIHRvIGFkZCBvciBkcm9wIHRoZSB0cmFpbGluZyBzbGFzaCB0byBleGFjbHkgbWF0Y2ggdGhlCiAgICogICAgcm91dGUgZGVmaW5pdGlvbi4KICAgKiBAcGFyYW0ge09iamVjdH0gcm91dGUgTWFwcGluZyBpbmZvcm1hdGlvbiB0byBiZSBhc3NpZ25lZCB0byBgJHJvdXRlLmN1cnJlbnRgIG9uIHJvdXRlCiAgICogICAgbWF0Y2guCiAgICoKICAgKiAgICBPYmplY3QgcHJvcGVydGllczoKICAgKgogICAqICAgIC0gYGNvbnRyb2xsZXJgIOKAkyBge2Z1bmN0aW9uKCk9fWAg4oCTIENvbnRyb2xsZXIgZm4gdGhhdCBzaG91bGQgYmUgYXNzb2NpYXRlZCB3aXRoIG5ld2x5CiAgICogICAgICBjcmVhdGVkIHNjb3BlLgogICAqICAgIC0gYHRlbXBsYXRlYCDigJMgYHtzdHJpbmc9fWAg4oCTICBodG1sIHRlbXBsYXRlIGFzIGEgc3RyaW5nIHRoYXQgc2hvdWxkIGJlIHVzZWQgYnkKICAgKiAgICAgIHtAbGluayBuZy5kaXJlY3RpdmU6bmdWaWV3IG5nVmlld30gb3IKICAgKiAgICAgIHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIG5nSW5jbHVkZX0gZGlyZWN0aXZlcy4KICAgKiAgICAgIHRoaXMgcHJvcGVydHkgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGB0ZW1wbGF0ZVVybGAuCiAgICogICAgLSBgdGVtcGxhdGVVcmxgIOKAkyBge3N0cmluZz19YCDigJMgcGF0aCB0byBhbiBodG1sIHRlbXBsYXRlIHRoYXQgc2hvdWxkIGJlIHVzZWQgYnkKICAgKiAgICAgIHtAbGluayBuZy5kaXJlY3RpdmU6bmdWaWV3IG5nVmlld30uCiAgICogICAgLSBgcmVzb2x2ZWAgLSBge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj49fWAgLSBBbiBvcHRpb25hbCBtYXAgb2YgZGVwZW5kZW5jaWVzIHdoaWNoIHNob3VsZAogICAqICAgICAgYmUgaW5qZWN0ZWQgaW50byB0aGUgY29udHJvbGxlci4gSWYgYW55IG9mIHRoZXNlIGRlcGVuZGVuY2llcyBhcmUgcHJvbWlzZXMsIHRoZXkgd2lsbCBiZQogICAqICAgICAgcmVzb2x2ZWQgYW5kIGNvbnZlcnRlZCB0byBhIHZhbHVlIGJlZm9yZSB0aGUgY29udHJvbGxlciBpcyBpbnN0YW50aWF0ZWQgYW5kIHRoZQogICAqICAgICAgYCRhZnRyZVJvdXRlQ2hhbmdlYCBldmVudCBpcyBmaXJlZC4gVGhlIG1hcCBvYmplY3QgaXM6CiAgICoKICAgKiAgICAgIC0gYGtleWAg4oCTIGB7c3RyaW5nfWA6IGEgbmFtZSBvZiBhIGRlcGVuZGVuY3kgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgY29udHJvbGxlci4KICAgKiAgICAgIC0gYGZhY3RvcnlgIC0gYHtzdHJpbmd8ZnVuY3Rpb259YDogSWYgYHN0cmluZ2AgdGhlbiBpdCBpcyBhbiBhbGlhcyBmb3IgYSBzZXJ2aWNlLgogICAqICAgICAgICBPdGhlcndpc2UgaWYgZnVuY3Rpb24sIHRoZW4gaXQgaXMge0BsaW5rIGFwaS9BVVRPLiRpbmplY3RvciNpbnZva2UgaW5qZWN0ZWR9CiAgICogICAgICAgIGFuZCB0aGUgcmV0dXJuIHZhbHVlIGlzIHRyZWF0ZWQgYXMgdGhlIGRlcGVuZGVuY3kuIElmIHRoZSByZXN1bHQgaXMgYSBwcm9taXNlLCBpdCBpcyByZXNvbHZlZAogICAqICAgICAgICBiZWZvcmUgaXRzIHZhbHVlIGlzIGluamVjdGVkIGludG8gdGhlIGNvbnRyb2xsZXIuCiAgICoKICAgKiAgICAtIGByZWRpcmVjdFRvYCDigJMgeyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSDigJMgdmFsdWUgdG8gdXBkYXRlCiAgICogICAgICB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbn0gcGF0aCB3aXRoIGFuZCB0cmlnZ2VyIHJvdXRlIHJlZGlyZWN0aW9uLgogICAqCiAgICogICAgICBJZiBgcmVkaXJlY3RUb2AgaXMgYSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6CiAgICoKICAgKiAgICAgIC0gYHtPYmplY3QuPHN0cmluZz59YCAtIHJvdXRlIHBhcmFtZXRlcnMgZXh0cmFjdGVkIGZyb20gdGhlIGN1cnJlbnQKICAgKiAgICAgICAgYCRsb2NhdGlvbi5wYXRoKClgIGJ5IGFwcGx5aW5nIHRoZSBjdXJyZW50IHJvdXRlIHRlbXBsYXRlVXJsLgogICAqICAgICAgLSBge3N0cmluZ31gIC0gY3VycmVudCBgJGxvY2F0aW9uLnBhdGgoKWAKICAgKiAgICAgIC0gYHtPYmplY3R9YCAtIGN1cnJlbnQgYCRsb2NhdGlvbi5zZWFyY2goKWAKICAgKgogICAqICAgICAgVGhlIGN1c3RvbSBgcmVkaXJlY3RUb2AgZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgc3RyaW5nIHdoaWNoIHdpbGwgYmUgdXNlZAogICAqICAgICAgdG8gdXBkYXRlIGAkbG9jYXRpb24ucGF0aCgpYCBhbmQgYCRsb2NhdGlvbi5zZWFyY2goKWAuCiAgICoKICAgKiAgICAtIGBbcmVsb2FkT25TZWFyY2g9dHJ1ZV1gIC0ge2Jvb2xlYW49fSAtIHJlbG9hZCByb3V0ZSB3aGVuIG9ubHkgJGxvY2F0aW9uLnNlYXJjaCgpCiAgICogICAgY2hhbmdlcy4KICAgKgogICAqICAgICAgSWYgdGhlIG9wdGlvbiBpcyBzZXQgdG8gYGZhbHNlYCBhbmQgdXJsIGluIHRoZSBicm93c2VyIGNoYW5nZXMsIHRoZW4KICAgKiAgICAgIGAkcm91dGVVcGRhdGVgIGV2ZW50IGlzIGJyb2FkY2FzdGVkIG9uIHRoZSByb290IHNjb3BlLgogICAqCiAgICogQHJldHVybnMge09iamVjdH0gc2VsZgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogQWRkcyBhIG5ldyByb3V0ZSBkZWZpbml0aW9uIHRvIHRoZSBgJHJvdXRlYCBzZXJ2aWNlLgogICAqLwogIHRoaXMud2hlbiA9IGZ1bmN0aW9uKHBhdGgsIHJvdXRlKSB7CiAgICByb3V0ZXNbcGF0aF0gPSBleHRlbmQoe3JlbG9hZE9uU2VhcmNoOiB0cnVlfSwgcm91dGUpOwoKICAgIC8vIGNyZWF0ZSByZWRpcmVjdGlvbiBmb3IgdHJhaWxpbmcgc2xhc2hlcwogICAgaWYgKHBhdGgpIHsKICAgICAgdmFyIHJlZGlyZWN0UGF0aCA9IChwYXRoW3BhdGgubGVuZ3RoLTFdID09ICcvJykKICAgICAgICAgID8gcGF0aC5zdWJzdHIoMCwgcGF0aC5sZW5ndGgtMSkKICAgICAgICAgIDogcGF0aCArJy8nOwoKICAgICAgcm91dGVzW3JlZGlyZWN0UGF0aF0gPSB7cmVkaXJlY3RUbzogcGF0aH07CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRyb3V0ZVByb3ZpZGVyI290aGVyd2lzZQogICAqIEBtZXRob2RPZiBuZy4kcm91dGVQcm92aWRlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cyByb3V0ZSBkZWZpbml0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIG9uIHJvdXRlIGNoYW5nZSB3aGVuIG5vIG90aGVyIHJvdXRlIGRlZmluaXRpb24KICAgKiBpcyBtYXRjaGVkLgogICAqCiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBNYXBwaW5nIGluZm9ybWF0aW9uIHRvIGJlIGFzc2lnbmVkIHRvIGAkcm91dGUuY3VycmVudGAuCiAgICogQHJldHVybnMge09iamVjdH0gc2VsZgogICAqLwogIHRoaXMub3RoZXJ3aXNlID0gZnVuY3Rpb24ocGFyYW1zKSB7CiAgICB0aGlzLndoZW4obnVsbCwgcGFyYW1zKTsKICAgIHJldHVybiB0aGlzOwogIH07CgoKICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZVBhcmFtcycsICckcScsICckaW5qZWN0b3InLCAnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLAogICAgICBmdW5jdGlvbiggJHJvb3RTY29wZSwgICAkbG9jYXRpb24sICAgJHJvdXRlUGFyYW1zLCAgICRxLCAgICRpbmplY3RvciwgICAkaHR0cCwgICAkdGVtcGxhdGVDYWNoZSkgewoKICAgIC8qKgogICAgICogQG5nZG9jIG9iamVjdAogICAgICogQG5hbWUgbmcuJHJvdXRlCiAgICAgKiBAcmVxdWlyZXMgJGxvY2F0aW9uCiAgICAgKiBAcmVxdWlyZXMgJHJvdXRlUGFyYW1zCiAgICAgKgogICAgICogQHByb3BlcnR5IHtPYmplY3R9IGN1cnJlbnQgUmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHJvdXRlIGRlZmluaXRpb24uCiAgICAgKiBUaGUgcm91dGUgZGVmaW5pdGlvbiBjb250YWluczoKICAgICAqCiAgICAgKiAgIC0gYGNvbnRyb2xsZXJgOiBUaGUgY29udHJvbGxlciBjb25zdHJ1Y3RvciBhcyBkZWZpbmUgaW4gcm91dGUgZGVmaW5pdGlvbi4KICAgICAqICAgLSBgbG9jYWxzYDogQSBtYXAgb2YgbG9jYWxzIHdoaWNoIGlzIHVzZWQgYnkge0BsaW5rIG5nLiRjb250cm9sbGVyICRjb250cm9sbGVyfSBzZXJ2aWNlIGZvcgogICAgICogICAgIGNvbnRyb2xsZXIgaW5zdGFudGlhdGlvbi4gVGhlIGBsb2NhbHNgIGNvbnRhaW4KICAgICAqICAgICB0aGUgcmVzb2x2ZWQgdmFsdWVzIG9mIHRoZSBgcmVzb2x2ZWAgbWFwLiBBZGRpdGlvbmFsbHkgdGhlIGBsb2NhbHNgIGFsc28gY29udGFpbjoKICAgICAqCiAgICAgKiAgICAgLSBgJHNjb3BlYCAtIFRoZSBjdXJyZW50IHJvdXRlIHNjb3BlLgogICAgICogICAgIC0gYCR0ZW1wbGF0ZWAgLSBUaGUgY3VycmVudCByb3V0ZSB0ZW1wbGF0ZSBIVE1MLgogICAgICoKICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPE9iamVjdD59IHJvdXRlcyBBcnJheSBvZiBhbGwgY29uZmlndXJlZCByb3V0ZXMuCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBJcyB1c2VkIGZvciBkZWVwLWxpbmtpbmcgVVJMcyB0byBjb250cm9sbGVycyBhbmQgdmlld3MgKEhUTUwgcGFydGlhbHMpLgogICAgICogSXQgd2F0Y2hlcyBgJGxvY2F0aW9uLnVybCgpYCBhbmQgdHJpZXMgdG8gbWFwIHRoZSBwYXRoIHRvIGFuIGV4aXN0aW5nIHJvdXRlIGRlZmluaXRpb24uCiAgICAgKgogICAgICogWW91IGNhbiBkZWZpbmUgcm91dGVzIHRocm91Z2gge0BsaW5rIG5nLiRyb3V0ZVByb3ZpZGVyICRyb3V0ZVByb3ZpZGVyfSdzIEFQSS4KICAgICAqCiAgICAgKiBUaGUgYCRyb3V0ZWAgc2VydmljZSBpcyB0eXBpY2FsbHkgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHtAbGluayBuZy5kaXJlY3RpdmU6bmdWaWV3IG5nVmlld30KICAgICAqIGRpcmVjdGl2ZSBhbmQgdGhlIHtAbGluayBuZy4kcm91dGVQYXJhbXMgJHJvdXRlUGFyYW1zfSBzZXJ2aWNlLgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgICBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IGNoYW5naW5nIHRoZSBVUkwgaGFzaCBjYXVzZXMgdGhlIGAkcm91dGVgIHRvIG1hdGNoIGEgcm91dGUgYWdhaW5zdCB0aGUKICAgICAgIFVSTCwgYW5kIHRoZSBgbmdWaWV3YCBwdWxscyBpbiB0aGUgcGFydGlhbC4KCiAgICAgICBOb3RlIHRoYXQgdGhpcyBleGFtcGxlIGlzIHVzaW5nIHtAbGluayBuZy5kaXJlY3RpdmU6c2NyaXB0IGlubGluZWQgdGVtcGxhdGVzfQogICAgICAgdG8gZ2V0IGl0IHdvcmtpbmcgb24ganNmaWRkbGUgYXMgd2VsbC4KCiAgICAgPGV4YW1wbGUgbW9kdWxlPSJuZ1ZpZXciPgogICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iTWFpbkNudGwiPgogICAgICAgICAgIENob29zZToKICAgICAgICAgICA8YSBocmVmPSJCb29rL01vYnkiPk1vYnk8L2E+IHwKICAgICAgICAgICA8YSBocmVmPSJCb29rL01vYnkvY2gvMSI+TW9ieTogQ2gxPC9hPiB8CiAgICAgICAgICAgPGEgaHJlZj0iQm9vay9HYXRzYnkiPkdhdHNieTwvYT4gfAogICAgICAgICAgIDxhIGhyZWY9IkJvb2svR2F0c2J5L2NoLzQ/a2V5PXZhbHVlIj5HYXRzYnk6IENoNDwvYT4gfAogICAgICAgICAgIDxhIGhyZWY9IkJvb2svU2NhcmxldCI+U2NhcmxldCBMZXR0ZXI8L2E+PGJyLz4KCiAgICAgICAgICAgPGRpdiBuZy12aWV3PjwvZGl2PgogICAgICAgICAgIDxociAvPgoKICAgICAgICAgICA8cHJlPiRsb2NhdGlvbi5wYXRoKCkgPSB7eyRsb2NhdGlvbi5wYXRoKCl9fTwvcHJlPgogICAgICAgICAgIDxwcmU+JHJvdXRlLmN1cnJlbnQudGVtcGxhdGVVcmwgPSB7eyRyb3V0ZS5jdXJyZW50LnRlbXBsYXRlVXJsfX08L3ByZT4KICAgICAgICAgICA8cHJlPiRyb3V0ZS5jdXJyZW50LnBhcmFtcyA9IHt7JHJvdXRlLmN1cnJlbnQucGFyYW1zfX08L3ByZT4KICAgICAgICAgICA8cHJlPiRyb3V0ZS5jdXJyZW50LnNjb3BlLm5hbWUgPSB7eyRyb3V0ZS5jdXJyZW50LnNjb3BlLm5hbWV9fTwvcHJlPgogICAgICAgICAgIDxwcmU+JHJvdXRlUGFyYW1zID0ge3skcm91dGVQYXJhbXN9fTwvcHJlPgogICAgICAgICA8L2Rpdj4KICAgICAgIDwvZmlsZT4KCiAgICAgICA8ZmlsZSBuYW1lPSJib29rLmh0bWwiPgogICAgICAgICBjb250cm9sbGVyOiB7e25hbWV9fTxiciAvPgogICAgICAgICBCb29rIElkOiB7e3BhcmFtcy5ib29rSWR9fTxiciAvPgogICAgICAgPC9maWxlPgoKICAgICAgIDxmaWxlIG5hbWU9ImNoYXB0ZXIuaHRtbCI+CiAgICAgICAgIGNvbnRyb2xsZXI6IHt7bmFtZX19PGJyIC8+CiAgICAgICAgIEJvb2sgSWQ6IHt7cGFyYW1zLmJvb2tJZH19PGJyIC8+CiAgICAgICAgIENoYXB0ZXIgSWQ6IHt7cGFyYW1zLmNoYXB0ZXJJZH19CiAgICAgICA8L2ZpbGU+CgogICAgICAgPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ25nVmlldycsIFtdLCBmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHsKICAgICAgICAgICAkcm91dGVQcm92aWRlci53aGVuKCcvQm9vay86Ym9va0lkJywgewogICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdib29rLmh0bWwnLAogICAgICAgICAgICAgY29udHJvbGxlcjogQm9va0NudGwsCiAgICAgICAgICAgICByZXNvbHZlOiB7CiAgICAgICAgICAgICAgIC8vIEkgd2lsbCBjYXVzZSBhIDEgc2Vjb25kIGRlbGF5CiAgICAgICAgICAgICAgIGRlbGF5OiBmdW5jdGlvbigkcSwgJHRpbWVvdXQpIHsKICAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSAkcS5kZWZlcigpOwogICAgICAgICAgICAgICAgICR0aW1lb3V0KGRlbGF5LnJlc29sdmUsIDEwMDApOwogICAgICAgICAgICAgICAgIHJldHVybiBkZWxheS5wcm9taXNlOwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9CiAgICAgICAgICAgfSk7CiAgICAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignL0Jvb2svOmJvb2tJZC9jaC86Y2hhcHRlcklkJywgewogICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjaGFwdGVyLmh0bWwnLAogICAgICAgICAgICAgY29udHJvbGxlcjogQ2hhcHRlckNudGwKICAgICAgICAgICB9KTsKCiAgICAgICAgICAgLy8gY29uZmlndXJlIGh0bWw1IHRvIGdldCBsaW5rcyB3b3JraW5nIG9uIGpzZmlkZGxlCiAgICAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpOwogICAgICAgICB9KTsKCiAgICAgICAgIGZ1bmN0aW9uIE1haW5DbnRsKCRzY29wZSwgJHJvdXRlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbikgewogICAgICAgICAgICRzY29wZS4kcm91dGUgPSAkcm91dGU7CiAgICAgICAgICAgJHNjb3BlLiRsb2NhdGlvbiA9ICRsb2NhdGlvbjsKICAgICAgICAgICAkc2NvcGUuJHJvdXRlUGFyYW1zID0gJHJvdXRlUGFyYW1zOwogICAgICAgICB9CgogICAgICAgICBmdW5jdGlvbiBCb29rQ250bCgkc2NvcGUsICRyb3V0ZVBhcmFtcykgewogICAgICAgICAgICRzY29wZS5uYW1lID0gIkJvb2tDbnRsIjsKICAgICAgICAgICAkc2NvcGUucGFyYW1zID0gJHJvdXRlUGFyYW1zOwogICAgICAgICB9CgogICAgICAgICBmdW5jdGlvbiBDaGFwdGVyQ250bCgkc2NvcGUsICRyb3V0ZVBhcmFtcykgewogICAgICAgICAgICRzY29wZS5uYW1lID0gIkNoYXB0ZXJDbnRsIjsKICAgICAgICAgICAkc2NvcGUucGFyYW1zID0gJHJvdXRlUGFyYW1zOwogICAgICAgICB9CiAgICAgICA8L2ZpbGU+CgogICAgICAgPGZpbGUgbmFtZT0ic2NlbmFyaW8uanMiPgogICAgICAgICBpdCgnc2hvdWxkIGxvYWQgYW5kIGNvbXBpbGUgY29ycmVjdCB0ZW1wbGF0ZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgIGVsZW1lbnQoJ2E6Y29udGFpbnMoIk1vYnk6IENoMSIpJykuY2xpY2soKTsKICAgICAgICAgICB2YXIgY29udGVudCA9IGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy12aWV3XScpLnRleHQoKTsKICAgICAgICAgICBleHBlY3QoY29udGVudCkudG9NYXRjaCgvY29udHJvbGxlclw6IENoYXB0ZXJDbnRsLyk7CiAgICAgICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL0Jvb2sgSWRcOiBNb2J5Lyk7CiAgICAgICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL0NoYXB0ZXIgSWRcOiAxLyk7CgogICAgICAgICAgIGVsZW1lbnQoJ2E6Y29udGFpbnMoIlNjYXJsZXQiKScpLmNsaWNrKCk7CiAgICAgICAgICAgc2xlZXAoMik7IC8vIHByb21pc2VzIGFyZSBub3QgcGFydCBvZiBzY2VuYXJpbyB3YWl0aW5nCiAgICAgICAgICAgY29udGVudCA9IGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy12aWV3XScpLnRleHQoKTsKICAgICAgICAgICBleHBlY3QoY29udGVudCkudG9NYXRjaCgvY29udHJvbGxlclw6IEJvb2tDbnRsLyk7CiAgICAgICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL0Jvb2sgSWRcOiBTY2FybGV0Lyk7CiAgICAgICAgIH0pOwogICAgICAgPC9maWxlPgogICAgIDwvZXhhbXBsZT4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIGV2ZW50CiAgICAgKiBAbmFtZSBuZy4kcm91dGUjJHJvdXRlQ2hhbmdlU3RhcnQKICAgICAqIEBldmVudE9mIG5nLiRyb3V0ZQogICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZQogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBCcm9hZGNhc3RlZCBiZWZvcmUgYSByb3V0ZSBjaGFuZ2UuIEF0IHRoaXMgIHBvaW50IHRoZSByb3V0ZSBzZXJ2aWNlcyBzdGFydHMKICAgICAqIHJlc29sdmluZyBhbGwgb2YgdGhlIGRlcGVuZGVuY2llcyBuZWVkZWQgZm9yIHRoZSByb3V0ZSBjaGFuZ2UgdG8gb2NjdXJzLgogICAgICogVHlwaWNhbGx5IHRoaXMgaW52b2x2ZXMgZmV0Y2hpbmcgdGhlIHZpZXcgdGVtcGxhdGUgYXMgd2VsbCBhcyBhbnkgZGVwZW5kZW5jaWVzCiAgICAgKiBkZWZpbmVkIGluIGByZXNvbHZlYCByb3V0ZSBwcm9wZXJ0eS4gT25jZSAgYWxsIG9mIHRoZSBkZXBlbmRlbmNpZXMgYXJlIHJlc29sdmVkCiAgICAgKiBgJHJvdXRlQ2hhbmdlU3VjY2Vzc2AgaXMgZmlyZWQuCiAgICAgKgogICAgICogQHBhcmFtIHtSb3V0ZX0gbmV4dCBGdXR1cmUgcm91dGUgaW5mb3JtYXRpb24uCiAgICAgKiBAcGFyYW0ge1JvdXRlfSBjdXJyZW50IEN1cnJlbnQgcm91dGUgaW5mb3JtYXRpb24uCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBldmVudAogICAgICogQG5hbWUgbmcuJHJvdXRlIyRyb3V0ZUNoYW5nZVN1Y2Nlc3MKICAgICAqIEBldmVudE9mIG5nLiRyb3V0ZQogICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZQogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBCcm9hZGNhc3RlZCBhZnRlciBhIHJvdXRlIGRlcGVuZGVuY2llcyBhcmUgcmVzb2x2ZWQuCiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nVmlldyBuZ1ZpZXd9IGxpc3RlbnMgZm9yIHRoZSBkaXJlY3RpdmUKICAgICAqIHRvIGluc3RhbnRpYXRlIHRoZSBjb250cm9sbGVyIGFuZCByZW5kZXIgdGhlIHZpZXcuCiAgICAgKgogICAgICogQHBhcmFtIHtSb3V0ZX0gY3VycmVudCBDdXJyZW50IHJvdXRlIGluZm9ybWF0aW9uLgogICAgICogQHBhcmFtIHtSb3V0ZX0gcHJldmlvdXMgUHJldmlvdXMgcm91dGUgaW5mb3JtYXRpb24uCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBldmVudAogICAgICogQG5hbWUgbmcuJHJvdXRlIyRyb3V0ZUNoYW5nZUVycm9yCiAgICAgKiBAZXZlbnRPZiBuZy4kcm91dGUKICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGUKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogQnJvYWRjYXN0ZWQgaWYgYW55IG9mIHRoZSByZXNvbHZlIHByb21pc2VzIGFyZSByZWplY3RlZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge1JvdXRlfSBjdXJyZW50IEN1cnJlbnQgcm91dGUgaW5mb3JtYXRpb24uCiAgICAgKiBAcGFyYW0ge1JvdXRlfSBwcmV2aW91cyBQcmV2aW91cyByb3V0ZSBpbmZvcm1hdGlvbi4KICAgICAqIEBwYXJhbSB7Um91dGV9IHJlamVjdGlvbiBSZWplY3Rpb24gb2YgdGhlIHByb21pc2UuIFVzdWFsbHkgdGhlIGVycm9yIG9mIHRoZSBmYWlsZWQgcHJvbWlzZS4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIGV2ZW50CiAgICAgKiBAbmFtZSBuZy4kcm91dGUjJHJvdXRlVXBkYXRlCiAgICAgKiBAZXZlbnRPZiBuZy4kcm91dGUKICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGUKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICoKICAgICAqIFRoZSBgcmVsb2FkT25TZWFyY2hgIHByb3BlcnR5IGhhcyBiZWVuIHNldCB0byBmYWxzZSwgYW5kIHdlIGFyZSByZXVzaW5nIHRoZSBzYW1lCiAgICAgKiBpbnN0YW5jZSBvZiB0aGUgQ29udHJvbGxlci4KICAgICAqLwoKICAgIHZhciBtYXRjaGVyID0gc3dpdGNoUm91dGVNYXRjaGVyLAogICAgICAgIGZvcmNlUmVsb2FkID0gZmFsc2UsCiAgICAgICAgJHJvdXRlID0gewogICAgICAgICAgcm91dGVzOiByb3V0ZXMsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBuZy4kcm91dGUjcmVsb2FkCiAgICAgICAgICAgKiBAbWV0aG9kT2YgbmcuJHJvdXRlCiAgICAgICAgICAgKgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBDYXVzZXMgYCRyb3V0ZWAgc2VydmljZSB0byByZWxvYWQgdGhlIGN1cnJlbnQgcm91dGUgZXZlbiBpZgogICAgICAgICAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb259IGhhc24ndCBjaGFuZ2VkLgogICAgICAgICAgICoKICAgICAgICAgICAqIEFzIGEgcmVzdWx0IG9mIHRoYXQsIHtAbGluayBuZy5kaXJlY3RpdmU6bmdWaWV3IG5nVmlld30KICAgICAgICAgICAqIGNyZWF0ZXMgbmV3IHNjb3BlLCByZWluc3RhbnRpYXRlcyB0aGUgY29udHJvbGxlci4KICAgICAgICAgICAqLwogICAgICAgICAgcmVsb2FkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZm9yY2VSZWxvYWQgPSB0cnVlOwogICAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmModXBkYXRlUm91dGUpOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCB1cGRhdGVSb3V0ZSk7CgogICAgcmV0dXJuICRyb3V0ZTsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIGZ1bmN0aW9uIHN3aXRjaFJvdXRlTWF0Y2hlcihvbiwgd2hlbikgewogICAgICAvLyBUT0RPKGkpOiB0aGlzIGNvZGUgaXMgY29udm9sdXRlZCBhbmQgaW5lZmZpY2llbnQsIHdlIHNob3VsZCBjb25zdHJ1Y3QgdGhlIHJvdXRlIG1hdGNoaW5nCiAgICAgIC8vICAgcmVnZXggb25seSBvbmNlIGFuZCB0aGVuIHJldXNlIGl0CiAgICAgIHZhciByZWdleCA9ICdeJyArIHdoZW4ucmVwbGFjZSgvKFtcLlxcXChcKVxeXCRdKS9nLCAiXFwkMSIpICsgJyQnLAogICAgICAgICAgcGFyYW1zID0gW10sCiAgICAgICAgICBkc3QgPSB7fTsKICAgICAgZm9yRWFjaCh3aGVuLnNwbGl0KC9cVy8pLCBmdW5jdGlvbihwYXJhbSkgewogICAgICAgIGlmIChwYXJhbSkgewogICAgICAgICAgdmFyIHBhcmFtUmVnRXhwID0gbmV3IFJlZ0V4cCgiOiIgKyBwYXJhbSArICIoW1xcV10pIik7CiAgICAgICAgICBpZiAocmVnZXgubWF0Y2gocGFyYW1SZWdFeHApKSB7CiAgICAgICAgICAgIHJlZ2V4ID0gcmVnZXgucmVwbGFjZShwYXJhbVJlZ0V4cCwgIihbXlxcL10qKSQxIik7CiAgICAgICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICB2YXIgbWF0Y2ggPSBvbi5tYXRjaChuZXcgUmVnRXhwKHJlZ2V4KSk7CiAgICAgIGlmIChtYXRjaCkgewogICAgICAgIGZvckVhY2gocGFyYW1zLCBmdW5jdGlvbihuYW1lLCBpbmRleCkgewogICAgICAgICAgZHN0W25hbWVdID0gbWF0Y2hbaW5kZXggKyAxXTsKICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gbWF0Y2ggPyBkc3QgOiBudWxsOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZVJvdXRlKCkgewogICAgICB2YXIgbmV4dCA9IHBhcnNlUm91dGUoKSwKICAgICAgICAgIGxhc3QgPSAkcm91dGUuY3VycmVudDsKCiAgICAgIGlmIChuZXh0ICYmIGxhc3QgJiYgbmV4dC4kcm91dGUgPT09IGxhc3QuJHJvdXRlCiAgICAgICAgICAmJiBlcXVhbHMobmV4dC5wYXRoUGFyYW1zLCBsYXN0LnBhdGhQYXJhbXMpICYmICFuZXh0LnJlbG9hZE9uU2VhcmNoICYmICFmb3JjZVJlbG9hZCkgewogICAgICAgIGxhc3QucGFyYW1zID0gbmV4dC5wYXJhbXM7CiAgICAgICAgY29weShsYXN0LnBhcmFtcywgJHJvdXRlUGFyYW1zKTsKICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRyb3V0ZVVwZGF0ZScsIGxhc3QpOwogICAgICB9IGVsc2UgaWYgKG5leHQgfHwgbGFzdCkgewogICAgICAgIGZvcmNlUmVsb2FkID0gZmFsc2U7CiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckcm91dGVDaGFuZ2VTdGFydCcsIG5leHQsIGxhc3QpOwogICAgICAgICRyb3V0ZS5jdXJyZW50ID0gbmV4dDsKICAgICAgICBpZiAobmV4dCkgewogICAgICAgICAgaWYgKG5leHQucmVkaXJlY3RUbykgewogICAgICAgICAgICBpZiAoaXNTdHJpbmcobmV4dC5yZWRpcmVjdFRvKSkgewogICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKGludGVycG9sYXRlKG5leHQucmVkaXJlY3RUbywgbmV4dC5wYXJhbXMpKS5zZWFyY2gobmV4dC5wYXJhbXMpCiAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAkbG9jYXRpb24udXJsKG5leHQucmVkaXJlY3RUbyhuZXh0LnBhdGhQYXJhbXMsICRsb2NhdGlvbi5wYXRoKCksICRsb2NhdGlvbi5zZWFyY2goKSkpCiAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJHEud2hlbihuZXh0KS4KICAgICAgICAgIHRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmIChuZXh0KSB7CiAgICAgICAgICAgICAgdmFyIGtleXMgPSBbXSwKICAgICAgICAgICAgICAgICAgdmFsdWVzID0gW10sCiAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOwoKICAgICAgICAgICAgICBmb3JFYWNoKG5leHQucmVzb2x2ZSB8fCB7fSwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7CiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChpc0Z1bmN0aW9uKHZhbHVlKSA/ICRpbmplY3Rvci5pbnZva2UodmFsdWUpIDogJGluamVjdG9yLmdldCh2YWx1ZSkpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlmIChpc0RlZmluZWQodGVtcGxhdGUgPSBuZXh0LnRlbXBsYXRlKSkgewogICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKHRlbXBsYXRlID0gbmV4dC50ZW1wbGF0ZVVybCkpIHsKICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJGh0dHAuZ2V0KHRlbXBsYXRlLCB7Y2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuCiAgICAgICAgICAgICAgICAgICAgdGhlbihmdW5jdGlvbihyZXNwb25zZSkgeyByZXR1cm4gcmVzcG9uc2UuZGF0YTsgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChpc0RlZmluZWQodGVtcGxhdGUpKSB7CiAgICAgICAgICAgICAgICBrZXlzLnB1c2goJyR0ZW1wbGF0ZScpOwogICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godGVtcGxhdGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gJHEuYWxsKHZhbHVlcykudGhlbihmdW5jdGlvbih2YWx1ZXMpIHsKICAgICAgICAgICAgICAgIHZhciBsb2NhbHMgPSB7fTsKICAgICAgICAgICAgICAgIGZvckVhY2godmFsdWVzLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgbG9jYWxzW2tleXNbaW5kZXhdXSA9IHZhbHVlOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxzOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KS4KICAgICAgICAgIC8vIGFmdGVyIHJvdXRlIGNoYW5nZQogICAgICAgICAgdGhlbihmdW5jdGlvbihsb2NhbHMpIHsKICAgICAgICAgICAgaWYgKG5leHQgPT0gJHJvdXRlLmN1cnJlbnQpIHsKICAgICAgICAgICAgICBpZiAobmV4dCkgewogICAgICAgICAgICAgICAgbmV4dC5sb2NhbHMgPSBsb2NhbHM7CiAgICAgICAgICAgICAgICBjb3B5KG5leHQucGFyYW1zLCAkcm91dGVQYXJhbXMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRyb3V0ZUNoYW5nZVN1Y2Nlc3MnLCBuZXh0LCBsYXN0KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICAgICAgaWYgKG5leHQgPT0gJHJvdXRlLmN1cnJlbnQpIHsKICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRyb3V0ZUNoYW5nZUVycm9yJywgbmV4dCwgbGFzdCwgZXJyb3IpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgfQogICAgfQoKCiAgICAvKioKICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IGFjdGl2ZSByb3V0ZSwgYnkgbWF0Y2hpbmcgaXQgYWdhaW5zdCB0aGUgVVJMCiAgICAgKi8KICAgIGZ1bmN0aW9uIHBhcnNlUm91dGUoKSB7CiAgICAgIC8vIE1hdGNoIGEgcm91dGUKICAgICAgdmFyIHBhcmFtcywgbWF0Y2g7CiAgICAgIGZvckVhY2gocm91dGVzLCBmdW5jdGlvbihyb3V0ZSwgcGF0aCkgewogICAgICAgIGlmICghbWF0Y2ggJiYgKHBhcmFtcyA9IG1hdGNoZXIoJGxvY2F0aW9uLnBhdGgoKSwgcGF0aCkpKSB7CiAgICAgICAgICBtYXRjaCA9IGluaGVyaXQocm91dGUsIHsKICAgICAgICAgICAgcGFyYW1zOiBleHRlbmQoe30sICRsb2NhdGlvbi5zZWFyY2goKSwgcGFyYW1zKSwKICAgICAgICAgICAgcGF0aFBhcmFtczogcGFyYW1zfSk7CiAgICAgICAgICBtYXRjaC4kcm91dGUgPSByb3V0ZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICAvLyBObyByb3V0ZSBtYXRjaGVkOyBmYWxsYmFjayB0byAib3RoZXJ3aXNlIiByb3V0ZQogICAgICByZXR1cm4gbWF0Y2ggfHwgcm91dGVzW251bGxdICYmIGluaGVyaXQocm91dGVzW251bGxdLCB7cGFyYW1zOiB7fSwgcGF0aFBhcmFtczp7fX0pOwogICAgfQoKICAgIC8qKgogICAgICogQHJldHVybnMgaW50ZXJwb2xhdGlvbiBvZiB0aGUgcmVkaXJlY3QgcGF0aCB3aXRoIHRoZSBwYXJhbWV0cnMKICAgICAqLwogICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RyaW5nLCBwYXJhbXMpIHsKICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICBmb3JFYWNoKChzdHJpbmd8fCcnKS5zcGxpdCgnOicpLCBmdW5jdGlvbihzZWdtZW50LCBpKSB7CiAgICAgICAgaWYgKGkgPT0gMCkgewogICAgICAgICAgcmVzdWx0LnB1c2goc2VnbWVudCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBzZWdtZW50TWF0Y2ggPSBzZWdtZW50Lm1hdGNoKC8oXHcrKSguKikvKTsKICAgICAgICAgIHZhciBrZXkgPSBzZWdtZW50TWF0Y2hbMV07CiAgICAgICAgICByZXN1bHQucHVzaChwYXJhbXNba2V5XSk7CiAgICAgICAgICByZXN1bHQucHVzaChzZWdtZW50TWF0Y2hbMl0gfHwgJycpOwogICAgICAgICAgZGVsZXRlIHBhcmFtc1trZXldOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7CiAgICB9CiAgfV07Cn0KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRyb3V0ZVBhcmFtcwogKiBAcmVxdWlyZXMgJHJvdXRlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBDdXJyZW50IHNldCBvZiByb3V0ZSBwYXJhbWV0ZXJzLiBUaGUgcm91dGUgcGFyYW1ldGVycyBhcmUgYSBjb21iaW5hdGlvbiBvZiB0aGUKICoge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb259IGBzZWFyY2goKWAsIGFuZCBgcGF0aCgpYC4gVGhlIGBwYXRoYCBwYXJhbWV0ZXJzCiAqIGFyZSBleHRyYWN0ZWQgd2hlbiB0aGUge0BsaW5rIG5nLiRyb3V0ZSAkcm91dGV9IHBhdGggaXMgbWF0Y2hlZC4KICoKICogSW4gY2FzZSBvZiBwYXJhbWV0ZXIgbmFtZSBjb2xsaXNpb24sIGBwYXRoYCBwYXJhbXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgYHNlYXJjaGAgcGFyYW1zLgogKgogKiBUaGUgc2VydmljZSBndWFyYW50ZWVzIHRoYXQgdGhlIGlkZW50aXR5IG9mIHRoZSBgJHJvdXRlUGFyYW1zYCBvYmplY3Qgd2lsbCByZW1haW4gdW5jaGFuZ2VkCiAqIChidXQgaXRzIHByb3BlcnRpZXMgd2lsbCBsaWtlbHkgY2hhbmdlKSBldmVuIHdoZW4gYSByb3V0ZSBjaGFuZ2Ugb2NjdXJzLgogKgogKiBAZXhhbXBsZQogKiA8cHJlPgogKiAgLy8gR2l2ZW46CiAqICAvLyBVUkw6IGh0dHA6Ly9zZXJ2ZXIuY29tL2luZGV4Lmh0bWwjL0NoYXB0ZXIvMS9TZWN0aW9uLzI/c2VhcmNoPW1vYnkKICogIC8vIFJvdXRlOiAvQ2hhcHRlci86Y2hhcHRlcklkL1NlY3Rpb24vOnNlY3Rpb25JZAogKiAgLy8KICogIC8vIFRoZW4KICogICRyb3V0ZVBhcmFtcyA9PT4ge2NoYXB0ZXJJZDoxLCBzZWN0aW9uSWQ6Miwgc2VhcmNoOidtb2J5J30KICogPC9wcmU+CiAqLwpmdW5jdGlvbiAkUm91dGVQYXJhbXNQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSB2YWx1ZUZuKHt9KTsKfQoKLyoqCiAqIERFU0lHTiBOT1RFUwogKgogKiBUaGUgZGVzaWduIGRlY2lzaW9ucyBiZWhpbmQgdGhlIHNjb3BlIHdhcmUgaGVhdmlseSBmYXZvcmVkIGZvciBzcGVlZCBhbmQgbWVtb3J5IGNvbnN1bXB0aW9uLgogKgogKiBUaGUgdHlwaWNhbCB1c2Ugb2Ygc2NvcGUgaXMgdG8gd2F0Y2ggdGhlIGV4cHJlc3Npb25zLCB3aGljaCBtb3N0IG9mIHRoZSB0aW1lIHJldHVybiB0aGUgc2FtZQogKiB2YWx1ZSBhcyBsYXN0IHRpbWUgc28gd2Ugb3B0aW1pemUgdGhlIG9wZXJhdGlvbi4KICoKICogQ2xvc3VyZXMgY29uc3RydWN0aW9uIGlzIGV4cGVuc2l2ZSBmcm9tIHNwZWVkIGFzIHdlbGwgYXMgbWVtb3J5OgogKiAgIC0gbm8gY2xvc3VyZXMsIGluc3RlYWQgdXBzIHByb3RvdHlwaWNhbCBpbmhlcml0YW5jZSBmb3IgQVBJCiAqICAgLSBJbnRlcm5hbCBzdGF0ZSBuZWVkcyB0byBiZSBzdG9yZWQgb24gc2NvcGUgZGlyZWN0bHksIHdoaWNoIG1lYW5zIHRoYXQgcHJpdmF0ZSBzdGF0ZSBpcwogKiAgICAgZXhwb3NlZCBhcyAkJF9fX18gcHJvcGVydGllcwogKgogKiBMb29wIG9wZXJhdGlvbnMgYXJlIG9wdGltaXplZCBieSB1c2luZyB3aGlsZShjb3VudC0tKSB7IC4uLiB9CiAqICAgLSB0aGlzIG1lYW5zIHRoYXQgaW4gb3JkZXIgdG8ga2VlcCB0aGUgc2FtZSBvcmRlciBvZiBleGVjdXRpb24gYXMgYWRkaXRpb24gd2UgaGF2ZSB0byBhZGQKICogICAgIGl0ZW1zIHRvIHRoZSBhcnJheSBhdCB0aGUgYmVnZ2luZyAoc2hpZnQpIGluc3RlYWQgb2YgYXQgdGhlIGVuZCAocHVzaCkKICoKICogQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIGFuZCByZW1vdmVkIG9mdGVuCiAqICAgLSBVc2luZyBhcnJheSB3b3VsZCBiZSBzbG93IHNpbmNlIGluc2VydHMgaW4gbWVkZGxlIGFyZSBleHBlbnNpdmUgc28gd2UgdXNlIGxpbmtlZCBsaXN0CiAqCiAqIFRoZXJlIGFyZSBmZXcgd2F0Y2hlcyB0aGVuIGEgbG90IG9mIG9ic2VydmVycy4gVGhpcyBpcyB3aHkgeW91IGRvbid0IHdhbnQgdGhlIG9ic2VydmVyIHRvIGJlCiAqIGltcGxlbWVudGVkIGluIHRoZSBzYW1lIHdheSBhcyB3YXRjaC4gV2F0Y2ggcmVxdWlyZXMgcmV0dXJuIG9mIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHdoaWNoCiAqIGFyZSBleHBlbnNpdmUgdG8gY29uc3RydWN0LgogKi8KCgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kcm9vdFNjb3BlUHJvdmlkZXIKICogQGRlc2NyaXB0aW9uCiAqCiAqIFByb3ZpZGVyIGZvciB0aGUgJHJvb3RTY29wZSBzZXJ2aWNlLgogKi8KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgbmcuJHJvb3RTY29wZVByb3ZpZGVyI2RpZ2VzdFR0bAogKiBAbWV0aG9kT2YgbmcuJHJvb3RTY29wZVByb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKgogKiBTZXRzIHRoZSBudW1iZXIgb2YgZGlnZXN0IGl0ZXJhdGlvbiB0aGUgc2NvcGUgc2hvdWxkIGF0dGVtcHQgdG8gZXhlY3V0ZSBiZWZvcmUgZ2l2aW5nIHVwIGFuZAogKiBhc3N1bWluZyB0aGF0IHRoZSBtb2RlbCBpcyB1bnN0YWJsZS4KICoKICogVGhlIGN1cnJlbnQgZGVmYXVsdCBpcyAxMCBpdGVyYXRpb25zLgogKgogKiBAcGFyYW0ge251bWJlcn0gbGltaXQgVGhlIG51bWJlciBvZiBkaWdlc3QgaXRlcmF0aW9ucy4KICovCgoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJHJvb3RTY29wZQogKiBAZGVzY3JpcHRpb24KICoKICogRXZlcnkgYXBwbGljYXRpb24gaGFzIGEgc2luZ2xlIHJvb3Qge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LgogKiBBbGwgb3RoZXIgc2NvcGVzIGFyZSBjaGlsZCBzY29wZXMgb2YgdGhlIHJvb3Qgc2NvcGUuIFNjb3BlcyBwcm92aWRlIG1lY2hhbmlzbSBmb3Igd2F0Y2hpbmcgdGhlIG1vZGVsIGFuZCBwcm92aWRlCiAqIGV2ZW50IHByb2Nlc3NpbmcgbGlmZS1jeWNsZS4gU2VlIHtAbGluayBndWlkZS9zY29wZSBkZXZlbG9wZXIgZ3VpZGUgb24gc2NvcGVzfS4KICovCmZ1bmN0aW9uICRSb290U2NvcGVQcm92aWRlcigpewogIHZhciBUVEwgPSAxMDsKCiAgdGhpcy5kaWdlc3RUdGwgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHsKICAgICAgVFRMID0gdmFsdWU7CiAgICB9CiAgICByZXR1cm4gVFRMOwogIH07CgogIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRwYXJzZScsCiAgICAgIGZ1bmN0aW9uKCAkaW5qZWN0b3IsICAgJGV4Y2VwdGlvbkhhbmRsZXIsICAgJHBhcnNlKSB7CgogICAgLyoqCiAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIEEgcm9vdCBzY29wZSBjYW4gYmUgcmV0cmlldmVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZSAkcm9vdFNjb3BlfSBrZXkgZnJvbSB0aGUKICAgICAqIHtAbGluayBBVVRPLiRpbmplY3RvciAkaW5qZWN0b3J9LiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgdXNpbmcgdGhlCiAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkbmV3ICRuZXcoKX0gbWV0aG9kLiAoTW9zdCBzY29wZXMgYXJlIGNyZWF0ZWQgYXV0b21hdGljYWxseSB3aGVuCiAgICAgKiBjb21waWxlZCBIVE1MIHRlbXBsYXRlIGlzIGV4ZWN1dGVkLikKICAgICAqCiAgICAgKiBIZXJlIGlzIGEgc2ltcGxlIHNjb3BlIHNuaXBwZXQgdG8gc2hvdyBob3cgeW91IGNhbiBpbnRlcmFjdCB3aXRoIHRoZSBzY29wZS4KICAgICAqIDxwcmU+CiAgICAgICAgYW5ndWxhci5pbmplY3RvcihbJ25nJ10pLmludm9rZShmdW5jdGlvbigkcm9vdFNjb3BlKSB7CiAgICAgICAgICAgdmFyIHNjb3BlID0gJHJvb3RTY29wZS4kbmV3KCk7CiAgICAgICAgICAgc2NvcGUuc2FsdXRhdGlvbiA9ICdIZWxsbyc7CiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdXb3JsZCc7CgogICAgICAgICAgIGV4cGVjdChzY29wZS5ncmVldGluZykudG9FcXVhbCh1bmRlZmluZWQpOwoKICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25hbWUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgIHRoaXMuZ3JlZXRpbmcgPSB0aGlzLnNhbHV0YXRpb24gKyAnICcgKyB0aGlzLm5hbWUgKyAnISc7CiAgICAgICAgICAgfSk7IC8vIGluaXRpYWxpemUgdGhlIHdhdGNoCgogICAgICAgICAgIGV4cGVjdChzY29wZS5ncmVldGluZykudG9FcXVhbCh1bmRlZmluZWQpOwogICAgICAgICAgIHNjb3BlLm5hbWUgPSAnTWlza28nOwogICAgICAgICAgIC8vIHN0aWxsIG9sZCB2YWx1ZSwgc2luY2Ugd2F0Y2hlcyBoYXZlIG5vdCBiZWVuIGNhbGxlZCB5ZXQKICAgICAgICAgICBleHBlY3Qoc2NvcGUuZ3JlZXRpbmcpLnRvRXF1YWwodW5kZWZpbmVkKTsKCiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOyAvLyBmaXJlIGFsbCAgdGhlIHdhdGNoZXMKICAgICAgICAgICBleHBlY3Qoc2NvcGUuZ3JlZXRpbmcpLnRvRXF1YWwoJ0hlbGxvIE1pc2tvIScpOwogICAgICAgIH0pOwogICAgICogPC9wcmU+CiAgICAgKgogICAgICogIyBJbmhlcml0YW5jZQogICAgICogQSBzY29wZSBjYW4gaW5oZXJpdCBmcm9tIGEgcGFyZW50IHNjb3BlLCBhcyBpbiB0aGlzIGV4YW1wbGU6CiAgICAgKiA8cHJlPgogICAgICAgICB2YXIgcGFyZW50ID0gJHJvb3RTY29wZTsKICAgICAgICAgdmFyIGNoaWxkID0gcGFyZW50LiRuZXcoKTsKCiAgICAgICAgIHBhcmVudC5zYWx1dGF0aW9uID0gIkhlbGxvIjsKICAgICAgICAgY2hpbGQubmFtZSA9ICJXb3JsZCI7CiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdIZWxsbycpOwoKICAgICAgICAgY2hpbGQuc2FsdXRhdGlvbiA9ICJXZWxjb21lIjsKICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ1dlbGNvbWUnKTsKICAgICAgICAgZXhwZWN0KHBhcmVudC5zYWx1dGF0aW9uKS50b0VxdWFsKCdIZWxsbycpOwogICAgICogPC9wcmU+CiAgICAgKgogICAgICoKICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uKCk+PX0gcHJvdmlkZXJzIE1hcCBvZiBzZXJ2aWNlIGZhY3Rvcnkgd2hpY2ggbmVlZCB0byBiZSBwcm92aWRlZAogICAgICogICAgIGZvciB0aGUgY3VycmVudCBzY29wZS4gRGVmYXVsdHMgdG8ge0BsaW5rIG5nfS4KICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsICo+PX0gaW5zdGFuY2VDYWNoZSBQcm92aWRlcyBwcmUtaW5zdGFudGlhdGVkIHNlcnZpY2VzIHdoaWNoIHNob3VsZAogICAgICogICAgIGFwcGVuZC9vdmVycmlkZSBzZXJ2aWNlcyBwcm92aWRlZCBieSBgcHJvdmlkZXJzYC4gVGhpcyBpcyBoYW5keSB3aGVuIHVuaXQtdGVzdGluZyBhbmQgaGF2aW5nCiAgICAgKiAgICAgdGhlIG5lZWQgdG8gb3ZlcnJpZGUgYSBkZWZhdWx0IHNlcnZpY2UuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBOZXdseSBjcmVhdGVkIHNjb3BlLgogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gU2NvcGUoKSB7CiAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpOwogICAgICB0aGlzLiQkcGhhc2UgPSB0aGlzLiRwYXJlbnQgPSB0aGlzLiQkd2F0Y2hlcnMgPQogICAgICAgICAgICAgICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPQogICAgICAgICAgICAgICAgICAgICB0aGlzLiQkY2hpbGRIZWFkID0gdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7CiAgICAgIHRoaXNbJ3RoaXMnXSA9IHRoaXMuJHJvb3QgPSAgdGhpczsKICAgICAgdGhpcy4kJGFzeW5jUXVldWUgPSBbXTsKICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9OwogICAgfQoKICAgIC8qKgogICAgICogQG5nZG9jIHByb3BlcnR5CiAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlIyRpZAogICAgICogQHByb3BlcnR5T2YgbmcuJHJvb3RTY29wZS5TY29wZQogICAgICogQHJldHVybnMge251bWJlcn0gVW5pcXVlIHNjb3BlIElEIChtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcgYWxwaGFudW1lcmljIHNlcXVlbmNlKSB1c2VmdWwgZm9yCiAgICAgKiAgIGRlYnVnZ2luZy4KICAgICAqLwoKCiAgICBTY29wZS5wcm90b3R5cGUgPSB7CiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkbmV3CiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogQ3JlYXRlcyBhIG5ldyBjaGlsZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0uCiAgICAgICAqCiAgICAgICAqIFRoZSBwYXJlbnQgc2NvcGUgd2lsbCBwcm9wYWdhdGUgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSBhbmQKICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IGV2ZW50cy4gVGhlIHNjb3BlIGNhbiBiZSByZW1vdmVkIGZyb20gdGhlIHNjb3BlCiAgICAgICAqIGhpZXJhcmNoeSB1c2luZyB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveSAkZGVzdHJveSgpfS4KICAgICAgICoKICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0gbXVzdCBiZSBjYWxsZWQgb24gYSBzY29wZSB3aGVuIGl0IGlzIGRlc2lyZWQgZm9yCiAgICAgICAqIHRoZSBzY29wZSBhbmQgaXRzIGNoaWxkIHNjb3BlcyB0byBiZSBwZXJtYW5lbnRseSBkZXRhY2hlZCBmcm9tIHRoZSBwYXJlbnQgYW5kIHRodXMgc3RvcAogICAgICAgKiBwYXJ0aWNpcGF0aW5nIGluIG1vZGVsIGNoYW5nZSBkZXRlY3Rpb24gYW5kIGxpc3RlbmVyIG5vdGlmaWNhdGlvbiBieSBpbnZva2luZy4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc29sYXRlIGlmIHRydWUgdGhlbiB0aGUgc2NvcGVkIGRvZXMgbm90IHByb3RvdHlwaWNhbGx5IGluaGVyaXQgZnJvbSB0aGUKICAgICAgICogICAgICAgICBwYXJlbnQgc2NvcGUuIFRoZSBzY29wZSBpcyBpc29sYXRlZCwgYXMgaXQgY2FuIG5vdCBzZSBwYXJlbnQgc2NvcGUgcHJvcGVydGllcy4KICAgICAgICogICAgICAgICBXaGVuIGNyZWF0aW5nIHdpZGdldHMgaXQgaXMgdXNlZnVsIGZvciB0aGUgd2lkZ2V0IHRvIG5vdCBhY2NpZGVudGx5IHJlYWQgcGFyZW50CiAgICAgICAqICAgICAgICAgc3RhdGUuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBuZXdseSBjcmVhdGVkIGNoaWxkIHNjb3BlLgogICAgICAgKgogICAgICAgKi8KICAgICAgJG5ldzogZnVuY3Rpb24oaXNvbGF0ZSkgewogICAgICAgIHZhciBDaGlsZCwKICAgICAgICAgICAgY2hpbGQ7CgogICAgICAgIGlmIChpc0Z1bmN0aW9uKGlzb2xhdGUpKSB7CiAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgYXQgc29tZSBwb2ludAogICAgICAgICAgdGhyb3cgRXJyb3IoJ0FQSS1DSEFOR0U6IFVzZSAkY29udHJvbGxlciB0byBpbnN0YW50aWF0ZSBjb250cm9sbGVycy4nKTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzb2xhdGUpIHsKICAgICAgICAgIGNoaWxkID0gbmV3IFNjb3BlKCk7CiAgICAgICAgICBjaGlsZC4kcm9vdCA9IHRoaXMuJHJvb3Q7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIENoaWxkID0gZnVuY3Rpb24oKSB7fTsgLy8gc2hvdWxkIGJlIGFub255bW91czsgVGhpcyBpcyBzbyB0aGF0IHdoZW4gdGhlIG1pbmlmaWVyIG11bmdlcwogICAgICAgICAgICAvLyB0aGUgbmFtZSBpdCBkb2VzIG5vdCBiZWNvbWUgcmFuZG9tIHNldCBvZiBjaGFycy4gVGhlc2Ugd2lsbCB0aGVuIHNob3cgdXAgYXMgY2xhc3MKICAgICAgICAgICAgLy8gbmFtZSBpbiB0aGUgZGVidWdnZXIuCiAgICAgICAgICBDaGlsZC5wcm90b3R5cGUgPSB0aGlzOwogICAgICAgICAgY2hpbGQgPSBuZXcgQ2hpbGQoKTsKICAgICAgICAgIGNoaWxkLiRpZCA9IG5leHRVaWQoKTsKICAgICAgICB9CiAgICAgICAgY2hpbGRbJ3RoaXMnXSA9IGNoaWxkOwogICAgICAgIGNoaWxkLiQkbGlzdGVuZXJzID0ge307CiAgICAgICAgY2hpbGQuJHBhcmVudCA9IHRoaXM7CiAgICAgICAgY2hpbGQuJCRhc3luY1F1ZXVlID0gW107CiAgICAgICAgY2hpbGQuJCR3YXRjaGVycyA9IGNoaWxkLiQkbmV4dFNpYmxpbmcgPSBjaGlsZC4kJGNoaWxkSGVhZCA9IGNoaWxkLiQkY2hpbGRUYWlsID0gbnVsbDsKICAgICAgICBjaGlsZC4kJHByZXZTaWJsaW5nID0gdGhpcy4kJGNoaWxkVGFpbDsKICAgICAgICBpZiAodGhpcy4kJGNoaWxkSGVhZCkgewogICAgICAgICAgdGhpcy4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7CiAgICAgICAgICB0aGlzLiQkY2hpbGRUYWlsID0gY2hpbGQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJCRjaGlsZEhlYWQgPSB0aGlzLiQkY2hpbGRUYWlsID0gY2hpbGQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjaGlsZDsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2gKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBSZWdpc3RlcnMgYSBgbGlzdGVuZXJgIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW5ldmVyIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLgogICAgICAgKgogICAgICAgKiAtIFRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBjYWxsZWQgb24gZXZlcnkgY2FsbCB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gYW5kCiAgICAgICAqICAgc2hvdWxkIHJldHVybiB0aGUgdmFsdWUgd2hpY2ggd2lsbCBiZSB3YXRjaGVkLiAoU2luY2Uge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9CiAgICAgICAqICAgcmVydW5zIHdoZW4gaXQgZGV0ZWN0cyBjaGFuZ2VzIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjYW4gZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBwZXIKICAgICAgICogICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gYW5kIHNob3VsZCBiZSBpZGVtcG90ZW50LikKICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgb25seSB3aGVuIHRoZSB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGB3YXRjaEV4cHJlc3Npb25gIGFuZCB0aGUKICAgICAgICogICBwcmV2aW91cyBjYWxsIHRvIGB3YXRjaEV4cHJlc3Npb24nIGFyZSBub3QgZXF1YWwgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgaW5pdGlhbCBydW4KICAgICAgICogICBzZWUgYmVsb3cpLiBUaGUgaW5lcXVhbGl0eSBpcyBkZXRlcm1pbmVkIGFjY29yZGluZyB0bwogICAgICAgKiAgIHtAbGluayBhbmd1bGFyLmVxdWFsc30gZnVuY3Rpb24uIFRvIHNhdmUgdGhlIHZhbHVlIG9mIHRoZSBvYmplY3QgZm9yIGxhdGVyIGNvbXBhcmlzb24KICAgICAgICogICB7QGxpbmsgYW5ndWxhci5jb3B5fSBmdW5jdGlvbiBpcyB1c2VkLiBJdCBhbHNvIG1lYW5zIHRoYXQgd2F0Y2hpbmcgY29tcGxleCBvcHRpb25zIHdpbGwKICAgICAgICogICBoYXZlIGFkdmVyc2UgbWVtb3J5IGFuZCBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMuCiAgICAgICAqIC0gVGhlIHdhdGNoIGBsaXN0ZW5lcmAgbWF5IGNoYW5nZSB0aGUgbW9kZWwsIHdoaWNoIG1heSB0cmlnZ2VyIG90aGVyIGBsaXN0ZW5lcmBzIHRvIGZpcmUuIFRoaXMKICAgICAgICogICBpcyBhY2hpZXZlZCBieSByZXJ1bm5pbmcgdGhlIHdhdGNoZXJzIHVudGlsIG5vIGNoYW5nZXMgYXJlIGRldGVjdGVkLiBUaGUgcmVydW4gaXRlcmF0aW9uCiAgICAgICAqICAgbGltaXQgaXMgMTAwIHRvIHByZXZlbnQgaW5maW5pdHkgbG9vcCBkZWFkbG9jay4KICAgICAgICoKICAgICAgICoKICAgICAgICogSWYgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQgd2hlbmV2ZXIge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBpcyBjYWxsZWQsCiAgICAgICAqIHlvdSBjYW4gcmVnaXN0ZXIgYW4gYHdhdGNoRXhwcmVzc2lvbmAgZnVuY3Rpb24gd2l0aCBubyBgbGlzdGVuZXJgLiAoU2luY2UgYHdhdGNoRXhwcmVzc2lvbmAsCiAgICAgICAqIGNhbiBleGVjdXRlIG11bHRpcGxlIHRpbWVzIHBlciB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlIHdoZW4gYSBjaGFuZ2UgaXMKICAgICAgICogZGV0ZWN0ZWQsIGJlIHByZXBhcmVkIGZvciBtdWx0aXBsZSBjYWxscyB0byB5b3VyIGxpc3RlbmVyLikKICAgICAgICoKICAgICAgICogQWZ0ZXIgYSB3YXRjaGVyIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc2NvcGUsIHRoZSBgbGlzdGVuZXJgIGZuIGlzIGNhbGxlZCBhc3luY2hyb25vdXNseQogICAgICAgKiAodmlhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmMgJGV2YWxBc3luY30pIHRvIGluaXRpYWxpemUgdGhlCiAgICAgICAqIHdhdGNoZXIuIEluIHJhcmUgY2FzZXMsIHRoaXMgaXMgdW5kZXNpcmFibGUgYmVjYXVzZSB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkIHdoZW4gdGhlIHJlc3VsdAogICAgICAgKiBvZiBgd2F0Y2hFeHByZXNzaW9uYCBkaWRuJ3QgY2hhbmdlLiBUbyBkZXRlY3QgdGhpcyBzY2VuYXJpbyB3aXRoaW4gdGhlIGBsaXN0ZW5lcmAgZm4sIHlvdQogICAgICAgKiBjYW4gY29tcGFyZSB0aGUgYG5ld1ZhbGAgYW5kIGBvbGRWYWxgLiBJZiB0aGVzZSB0d28gdmFsdWVzIGFyZSBpZGVudGljYWwgKGA9PT1gKSB0aGVuIHRoZQogICAgICAgKiBsaXN0ZW5lciB3YXMgY2FsbGVkIGR1ZSB0byBpbml0aWFsaXphdGlvbi4KICAgICAgICoKICAgICAgICoKICAgICAgICogIyBFeGFtcGxlCiAgICAgICAqIDxwcmU+CiAgICAgICAgICAgLy8gbGV0J3MgYXNzdW1lIHRoYXQgc2NvcGUgd2FzIGRlcGVuZGVuY3kgaW5qZWN0ZWQgYXMgdGhlICRyb290U2NvcGUKICAgICAgICAgICB2YXIgc2NvcGUgPSAkcm9vdFNjb3BlOwogICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nOwogICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwOwoKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTsKICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsgY291bnRlciA9IGNvdW50ZXIgKyAxOyB9KTsKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTsKCiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgIC8vIG5vIHZhcmlhYmxlIGNoYW5nZQogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApOwoKICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nOwogICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTsKICAgICAgICogPC9wcmU+CiAgICAgICAqCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7KGZ1bmN0aW9uKCl8c3RyaW5nKX0gd2F0Y2hFeHByZXNzaW9uIEV4cHJlc3Npb24gdGhhdCBpcyBldmFsdWF0ZWQgb24gZWFjaAogICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlLiBBIGNoYW5nZSBpbiB0aGUgcmV0dXJuIHZhbHVlIHRyaWdnZXJzIGEKICAgICAgICogICAgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC4KICAgICAgICoKICAgICAgICogICAgLSBgc3RyaW5nYDogRXZhbHVhdGVkIGFzIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259CiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGNhbGxlZCB3aXRoIGN1cnJlbnQgYHNjb3BlYCBhcyBhIHBhcmFtZXRlci4KICAgICAgICogQHBhcmFtIHsoZnVuY3Rpb24oKXxzdHJpbmcpPX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSByZXR1cm4gdmFsdWUgb2YKICAgICAgICogICB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy4KICAgICAgICoKICAgICAgICogICAgLSBgc3RyaW5nYDogRXZhbHVhdGVkIGFzIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259CiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSwgc2NvcGUpYDogY2FsbGVkIHdpdGggY3VycmVudCBhbmQgcHJldmlvdXMgdmFsdWVzIGFzIHBhcmFtZXRlcnMuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9iamVjdEVxdWFsaXR5IENvbXBhcmUgb2JqZWN0IGZvciBlcXVhbGl0eSByYXRoZXIgdGhlbiBmb3IgcmVmZmVyZW5jZS4KICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci4KICAgICAgICovCiAgICAgICR3YXRjaDogZnVuY3Rpb24od2F0Y2hFeHAsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSkgewogICAgICAgIHZhciBzY29wZSA9IHRoaXMsCiAgICAgICAgICAgIGdldCA9IGNvbXBpbGVUb0ZuKHdhdGNoRXhwLCAnd2F0Y2gnKSwKICAgICAgICAgICAgYXJyYXkgPSBzY29wZS4kJHdhdGNoZXJzLAogICAgICAgICAgICB3YXRjaGVyID0gewogICAgICAgICAgICAgIGZuOiBsaXN0ZW5lciwKICAgICAgICAgICAgICBsYXN0OiBpbml0V2F0Y2hWYWwsCiAgICAgICAgICAgICAgZ2V0OiBnZXQsCiAgICAgICAgICAgICAgZXhwOiB3YXRjaEV4cCwKICAgICAgICAgICAgICBlcTogISFvYmplY3RFcXVhbGl0eQogICAgICAgICAgICB9OwoKICAgICAgICAvLyBpbiB0aGUgY2FzZSB1c2VyIHBhc3Mgc3RyaW5nLCB3ZSBuZWVkIHRvIGNvbXBpbGUgaXQsIGRvIHdlIHJlYWxseSBuZWVkIHRoaXMgPwogICAgICAgIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpIHsKICAgICAgICAgIHZhciBsaXN0ZW5GbiA9IGNvbXBpbGVUb0ZuKGxpc3RlbmVyIHx8IG5vb3AsICdsaXN0ZW5lcicpOwogICAgICAgICAgd2F0Y2hlci5mbiA9IGZ1bmN0aW9uKG5ld1ZhbCwgb2xkVmFsLCBzY29wZSkge2xpc3RlbkZuKHNjb3BlKTt9OwogICAgICAgIH0KCiAgICAgICAgaWYgKCFhcnJheSkgewogICAgICAgICAgYXJyYXkgPSBzY29wZS4kJHdhdGNoZXJzID0gW107CiAgICAgICAgfQogICAgICAgIC8vIHdlIHVzZSB1bnNoaWZ0IHNpbmNlIHdlIHVzZSBhIHdoaWxlIGxvb3AgaW4gJGRpZ2VzdCBmb3Igc3BlZWQuCiAgICAgICAgLy8gdGhlIHdoaWxlIGxvb3AgcmVhZHMgaW4gcmV2ZXJzZSBvcmRlci4KICAgICAgICBhcnJheS51bnNoaWZ0KHdhdGNoZXIpOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICBhcnJheVJlbW92ZShhcnJheSwgd2F0Y2hlcik7CiAgICAgICAgfTsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0CiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogUHJvY2VzcyBhbGwgb2YgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyc30gb2YgdGhlIGN1cnJlbnQgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbi4KICAgICAgICogQmVjYXVzZSBhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyfSdzIGxpc3RlbmVyIGNhbiBjaGFuZ2UgdGhlIG1vZGVsLCB0aGUKICAgICAgICogYCRkaWdlc3QoKWAga2VlcHMgY2FsbGluZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJzfSB1bnRpbCBubyBtb3JlIGxpc3RlbmVycyBhcmUKICAgICAgICogZmlyaW5nLiBUaGlzIG1lYW5zIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gZ2V0IGludG8gYW4gaW5maW5pdGUgbG9vcC4gVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93CiAgICAgICAqIGAnTWF4aW11bSBpdGVyYXRpb24gbGltaXQgZXhjZWVkZWQuJ2AgaWYgdGhlIG51bWJlciBvZiBpdGVyYXRpb25zIGV4Y2VlZHMgMTAuCiAgICAgICAqCiAgICAgICAqIFVzdWFsbHkgeW91IGRvbid0IGNhbGwgYCRkaWdlc3QoKWAgZGlyZWN0bHkgaW4KICAgICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NvbnRyb2xsZXIgY29udHJvbGxlcnN9IG9yIGluCiAgICAgICAqIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSBkaXJlY3RpdmVzfS4KICAgICAgICogSW5zdGVhZCBhIGNhbGwgdG8ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseSgpfSAodHlwaWNhbGx5IGZyb20gd2l0aGluIGEKICAgICAgICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlIGRpcmVjdGl2ZXN9KSB3aWxsIGZvcmNlIGEgYCRkaWdlc3QoKWAuCiAgICAgICAqCiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIGAkZGlnZXN0KClgIGlzIGNhbGxlZCwKICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uICB3aXRoIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCAkd2F0Y2goKX0KICAgICAgICogd2l0aCBubyBgbGlzdGVuZXJgLgogICAgICAgKgogICAgICAgKiBZb3UgbWF5IGhhdmUgYSBuZWVkIHRvIGNhbGwgYCRkaWdlc3QoKWAgZnJvbSB3aXRoaW4gdW5pdC10ZXN0cywgdG8gc2ltdWxhdGUgdGhlIHNjb3BlCiAgICAgICAqIGxpZmUtY3ljbGUuCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiA8cHJlPgogICAgICAgICAgIHZhciBzY29wZSA9IC4uLjsKICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJzsKICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDsKCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICAgICBjb3VudGVyID0gY291bnRlciArIDE7CiAgICAgICAgICAgfSk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CgogICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgICAvLyBubyB2YXJpYWJsZSBjaGFuZ2UKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTsKCiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdhZGFtJzsKICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7CiAgICAgICAqIDwvcHJlPgogICAgICAgKgogICAgICAgKi8KICAgICAgJGRpZ2VzdDogZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHdhdGNoLCB2YWx1ZSwgbGFzdCwKICAgICAgICAgICAgd2F0Y2hlcnMsCiAgICAgICAgICAgIGFzeW5jUXVldWUsCiAgICAgICAgICAgIGxlbmd0aCwKICAgICAgICAgICAgZGlydHksIHR0bCA9IFRUTCwKICAgICAgICAgICAgbmV4dCwgY3VycmVudCwgdGFyZ2V0ID0gdGhpcywKICAgICAgICAgICAgd2F0Y2hMb2cgPSBbXSwKICAgICAgICAgICAgbG9nSWR4LCBsb2dNc2c7CgogICAgICAgIGJlZ2luUGhhc2UoJyRkaWdlc3QnKTsKCiAgICAgICAgZG8gewogICAgICAgICAgZGlydHkgPSBmYWxzZTsKICAgICAgICAgIGN1cnJlbnQgPSB0YXJnZXQ7CiAgICAgICAgICBkbyB7CiAgICAgICAgICAgIGFzeW5jUXVldWUgPSBjdXJyZW50LiQkYXN5bmNRdWV1ZTsKICAgICAgICAgICAgd2hpbGUoYXN5bmNRdWV1ZS5sZW5ndGgpIHsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgY3VycmVudC4kZXZhbChhc3luY1F1ZXVlLnNoaWZ0KCkpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoKHdhdGNoZXJzID0gY3VycmVudC4kJHdhdGNoZXJzKSkgewogICAgICAgICAgICAgIC8vIHByb2Nlc3Mgb3VyIHdhdGNoZXMKICAgICAgICAgICAgICBsZW5ndGggPSB3YXRjaGVycy5sZW5ndGg7CiAgICAgICAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICB3YXRjaCA9IHdhdGNoZXJzW2xlbmd0aF07CiAgICAgICAgICAgICAgICAgIC8vIE1vc3QgY29tbW9uIHdhdGNoZXMgYXJlIG9uIHByaW1pdGl2ZXMsIGluIHdoaWNoIGNhc2Ugd2UgY2FuIHNob3J0CiAgICAgICAgICAgICAgICAgIC8vIGNpcmN1aXQgaXQgd2l0aCA9PT0gb3BlcmF0b3IsIG9ubHkgd2hlbiA9PT0gZmFpbHMgZG8gd2UgdXNlIC5lcXVhbHMKICAgICAgICAgICAgICAgICAgaWYgKCh2YWx1ZSA9IHdhdGNoLmdldChjdXJyZW50KSkgIT09IChsYXN0ID0gd2F0Y2gubGFzdCkgJiYKICAgICAgICAgICAgICAgICAgICAgICEod2F0Y2guZXEKICAgICAgICAgICAgICAgICAgICAgICAgICA/IGVxdWFscyh2YWx1ZSwgbGFzdCkKICAgICAgICAgICAgICAgICAgICAgICAgICA6ICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdHlwZW9mIGxhc3QgPT0gJ251bWJlcicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBpc05hTih2YWx1ZSkgJiYgaXNOYU4obGFzdCkpKSkgewogICAgICAgICAgICAgICAgICAgIGRpcnR5ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB3YXRjaC5sYXN0ID0gd2F0Y2guZXEgPyBjb3B5KHZhbHVlKSA6IHZhbHVlOwogICAgICAgICAgICAgICAgICAgIHdhdGNoLmZuKHZhbHVlLCAoKGxhc3QgPT09IGluaXRXYXRjaFZhbCkgPyB2YWx1ZSA6IGxhc3QpLCBjdXJyZW50KTsKICAgICAgICAgICAgICAgICAgICBpZiAodHRsIDwgNSkgewogICAgICAgICAgICAgICAgICAgICAgbG9nSWR4ID0gNCAtIHR0bDsKICAgICAgICAgICAgICAgICAgICAgIGlmICghd2F0Y2hMb2dbbG9nSWR4XSkgd2F0Y2hMb2dbbG9nSWR4XSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgbG9nTXNnID0gKGlzRnVuY3Rpb24od2F0Y2guZXhwKSkKICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdmbjogJyArICh3YXRjaC5leHAubmFtZSB8fCB3YXRjaC5leHAudG9TdHJpbmcoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICA6IHdhdGNoLmV4cDsKICAgICAgICAgICAgICAgICAgICAgIGxvZ01zZyArPSAnOyBuZXdWYWw6ICcgKyB0b0pzb24odmFsdWUpICsgJzsgb2xkVmFsOiAnICsgdG9Kc29uKGxhc3QpOwogICAgICAgICAgICAgICAgICAgICAgd2F0Y2hMb2dbbG9nSWR4XS5wdXNoKGxvZ01zZyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSW5zYW5pdHkgV2FybmluZzogc2NvcGUgZGVwdGgtZmlyc3QgdHJhdmVyc2FsCiAgICAgICAgICAgIC8vIHllcywgdGhpcyBjb2RlIGlzIGEgYml0IGNyYXp5LCBidXQgaXQgd29ya3MgYW5kIHdlIGhhdmUgdGVzdHMgdG8gcHJvdmUgaXQhCiAgICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGJyb2FkY2FzdAogICAgICAgICAgICBpZiAoIShuZXh0ID0gKGN1cnJlbnQuJCRjaGlsZEhlYWQgfHwgKGN1cnJlbnQgIT09IHRhcmdldCAmJiBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSkpIHsKICAgICAgICAgICAgICB3aGlsZShjdXJyZW50ICE9PSB0YXJnZXQgJiYgIShuZXh0ID0gY3VycmVudC4kJG5leHRTaWJsaW5nKSkgewogICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gbmV4dCkpOwoKICAgICAgICAgIGlmKGRpcnR5ICYmICEodHRsLS0pKSB7CiAgICAgICAgICAgIGNsZWFyUGhhc2UoKTsKICAgICAgICAgICAgdGhyb3cgRXJyb3IoVFRMICsgJyAkZGlnZXN0KCkgaXRlcmF0aW9ucyByZWFjaGVkLiBBYm9ydGluZyFcbicgKwogICAgICAgICAgICAgICAgJ1dhdGNoZXJzIGZpcmVkIGluIHRoZSBsYXN0IDUgaXRlcmF0aW9uczogJyArIHRvSnNvbih3YXRjaExvZykpOwogICAgICAgICAgfQogICAgICAgIH0gd2hpbGUgKGRpcnR5IHx8IGFzeW5jUXVldWUubGVuZ3RoKTsKCiAgICAgICAgY2xlYXJQaGFzZSgpOwogICAgICB9LAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZXZlbnQKICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveQogICAgICAgKiBAZXZlbnRPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHNjb3BlIGJlaW5nIGRlc3Ryb3llZAogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogQnJvYWRjYXN0ZWQgd2hlbiBhIHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4gYXJlIGJlaW5nIGRlc3Ryb3llZC4KICAgICAgICovCgogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBSZW1vdmUgdGhlIGN1cnJlbnQgc2NvcGUgKGFuZCBhbGwgb2YgaXRzIGNoaWxkcmVuKSBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuIFJlbW92YWwgaW1wbGllcwogICAgICAgKiB0aGF0IGNhbGxzIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSB3aWxsIG5vIGxvbmdlcgogICAgICAgKiBwcm9wYWdhdGUgdG8gdGhlIGN1cnJlbnQgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbi4gUmVtb3ZhbCBhbHNvIGltcGxpZXMgdGhhdCB0aGUgY3VycmVudAogICAgICAgKiBzY29wZSBpcyBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLgogICAgICAgKgogICAgICAgKiBUaGUgYCRkZXN0cm95KClgIGlzIHVzdWFsbHkgdXNlZCBieSBkaXJlY3RpdmVzIHN1Y2ggYXMKICAgICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0gZm9yIG1hbmFnaW5nIHRoZQogICAgICAgKiB1bnJvbGxpbmcgb2YgdGhlIGxvb3AuCiAgICAgICAqCiAgICAgICAqIEp1c3QgYmVmb3JlIGEgc2NvcGUgaXMgZGVzdHJveWVkIGEgYCRkZXN0cm95YCBldmVudCBpcyBicm9hZGNhc3RlZCBvbiB0aGlzIHNjb3BlLgogICAgICAgKiBBcHBsaWNhdGlvbiBjb2RlIGNhbiByZWdpc3RlciBhIGAkZGVzdHJveWAgZXZlbnQgaGFuZGxlciB0aGF0IHdpbGwgZ2l2ZSBpdCBjaGFuY2UgdG8KICAgICAgICogcGVyZm9ybSBhbnkgbmVjZXNzYXJ5IGNsZWFudXAuCiAgICAgICAqLwogICAgICAkZGVzdHJveTogZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCRyb290U2NvcGUgPT0gdGhpcykgcmV0dXJuOyAvLyB3ZSBjYW4ndCByZW1vdmUgdGhlIHJvb3Qgbm9kZTsKICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy4kcGFyZW50OwoKICAgICAgICB0aGlzLiRicm9hZGNhc3QoJyRkZXN0cm95Jyk7CgogICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZEhlYWQgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRIZWFkID0gdGhpcy4kJG5leHRTaWJsaW5nOwogICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZFRhaWwgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nOwogICAgICAgIGlmICh0aGlzLiQkcHJldlNpYmxpbmcpIHRoaXMuJCRwcmV2U2libGluZy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJG5leHRTaWJsaW5nOwogICAgICAgIGlmICh0aGlzLiQkbmV4dFNpYmxpbmcpIHRoaXMuJCRuZXh0U2libGluZy4kJHByZXZTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsCiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogRXhlY3V0ZXMgdGhlIGBleHByZXNzaW9uYCBvbiB0aGUgY3VycmVudCBzY29wZSByZXR1cm5pbmcgdGhlIHJlc3VsdC4gQW55IGV4Y2VwdGlvbnMgaW4gdGhlCiAgICAgICAqIGV4cHJlc3Npb24gYXJlIHByb3BhZ2F0ZWQgKHVuY2F1Z2h0KS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBldmFsdWF0aW5nIGVuZ3VsYXIgZXhwcmVzc2lvbnMuCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiA8cHJlPgogICAgICAgICAgIHZhciBzY29wZSA9IG5nLiRyb290U2NvcGUuU2NvcGUoKTsKICAgICAgICAgICBzY29wZS5hID0gMTsKICAgICAgICAgICBzY29wZS5iID0gMjsKCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLiRldmFsKCdhK2InKSkudG9FcXVhbCgzKTsKICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoZnVuY3Rpb24oc2NvcGUpeyByZXR1cm4gc2NvcGUuYSArIHNjb3BlLmI7IH0pKS50b0VxdWFsKDMpOwogICAgICAgKiA8L3ByZT4KICAgICAgICoKICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuCiAgICAgICAqCiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4gIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LgogICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLgogICAgICAgKgogICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uLgogICAgICAgKi8KICAgICAgJGV2YWw6IGZ1bmN0aW9uKGV4cHIsIGxvY2FscykgewogICAgICAgIHJldHVybiAkcGFyc2UoZXhwcikodGhpcywgbG9jYWxzKTsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jCiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogRXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gb24gdGhlIGN1cnJlbnQgc2NvcGUgYXQgYSBsYXRlciBwb2ludCBpbiB0aW1lLgogICAgICAgKgogICAgICAgKiBUaGUgYCRldmFsQXN5bmNgIG1ha2VzIG5vIGd1YXJhbnRlZXMgYXMgdG8gd2hlbiB0aGUgYGV4cHJlc3Npb25gIHdpbGwgYmUgZXhlY3V0ZWQsIG9ubHkgdGhhdDoKICAgICAgICoKICAgICAgICogICAtIGl0IHdpbGwgZXhlY3V0ZSBpbiB0aGUgY3VycmVudCBzY3JpcHQgZXhlY3V0aW9uIGNvbnRleHQgKGJlZm9yZSBhbnkgRE9NIHJlbmRlcmluZykuCiAgICAgICAqICAgLSBhdCBsZWFzdCBvbmUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0IGN5Y2xlfSB3aWxsIGJlIHBlcmZvcm1lZCBhZnRlcgogICAgICAgKiAgICAgYGV4cHJlc3Npb25gIGV4ZWN1dGlvbi4KICAgICAgICoKICAgICAgICogQW55IGV4Y2VwdGlvbnMgZnJvbSB0aGUgZXhlY3V0aW9uIG9mIHRoZSBleHByZXNzaW9uIGFyZSBmb3J3YXJkZWQgdG8gdGhlCiAgICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuCiAgICAgICAqCiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4gIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LgogICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLgogICAgICAgKgogICAgICAgKi8KICAgICAgJGV2YWxBc3luYzogZnVuY3Rpb24oZXhwcikgewogICAgICAgIHRoaXMuJCRhc3luY1F1ZXVlLnB1c2goZXhwcik7CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5CiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogYCRhcHBseSgpYCBpcyB1c2VkIHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiBhbmd1bGFyIGZyb20gb3V0c2lkZSBvZiB0aGUgYW5ndWxhciBmcmFtZXdvcmsuCiAgICAgICAqIChGb3IgZXhhbXBsZSBmcm9tIGJyb3dzZXIgRE9NIGV2ZW50cywgc2V0VGltZW91dCwgWEhSIG9yIHRoaXJkIHBhcnR5IGxpYnJhcmllcykuCiAgICAgICAqIEJlY2F1c2Ugd2UgYXJlIGNhbGxpbmcgaW50byB0aGUgYW5ndWxhciBmcmFtZXdvcmsgd2UgbmVlZCB0byBwZXJmb3JtIHByb3BlciBzY29wZSBsaWZlLWN5Y2xlCiAgICAgICAqIG9mIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciBleGNlcHRpb24gaGFuZGxpbmd9LAogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0IGV4ZWN1dGluZyB3YXRjaGVzfS4KICAgICAgICoKICAgICAgICogIyMgTGlmZSBjeWNsZQogICAgICAgKgogICAgICAgKiAjIFBzZXVkby1Db2RlIG9mIGAkYXBwbHkoKWAKICAgICAgICogPHByZT4KICAgICAgICAgICBmdW5jdGlvbiAkYXBwbHkoZXhwcikgewogICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgcmV0dXJuICRldmFsKGV4cHIpOwogICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICRyb290LiRkaWdlc3QoKTsKICAgICAgICAgICAgIH0KICAgICAgICAgICB9CiAgICAgICAqIDwvcHJlPgogICAgICAgKgogICAgICAgKgogICAgICAgKiBTY29wZSdzIGAkYXBwbHkoKWAgbWV0aG9kIHRyYW5zaXRpb25zIHRocm91Z2ggdGhlIGZvbGxvd2luZyBzdGFnZXM6CiAgICAgICAqCiAgICAgICAqIDEuIFRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBleGVjdXRlZCB1c2luZyB0aGUKICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGV2YWwgJGV2YWwoKX0gbWV0aG9kLgogICAgICAgKiAyLiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGUKICAgICAgICogICAge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLgogICAgICAgKiAzLiBUaGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNofSBsaXN0ZW5lcnMgYXJlIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBleHByZXNzaW9uCiAgICAgICAqICAgIHdhcyBleGVjdXRlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IG1ldGhvZC4KICAgICAgICoKICAgICAgICoKICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC4KICAgICAgICoKICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS4KICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLgogICAgICAgKgogICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uLgogICAgICAgKi8KICAgICAgJGFwcGx5OiBmdW5jdGlvbihleHByKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGJlZ2luUGhhc2UoJyRhcHBseScpOwogICAgICAgICAgcmV0dXJuIHRoaXMuJGV2YWwoZXhwcik7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIGNsZWFyUGhhc2UoKTsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgdGhyb3cgZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uCiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogTGlzdGVuIG9uIGV2ZW50cyBvZiBhIGdpdmVuIHR5cGUuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZW1pdCAkZW1pdH0gZm9yIGRpc2N1c3Npb24gb2YKICAgICAgICogZXZlbnQgbGlmZSBjeWNsZS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBsaXN0ZW4gb24uCiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQpfSBsaXN0ZW5lciBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuCiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuCiAgICAgICAqCiAgICAgICAqIFRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBmb3JtYXQgaXM6IGBmdW5jdGlvbihldmVudClgLiBUaGUgYGV2ZW50YCBvYmplY3QgcGFzc2VkIGludG8gdGhlCiAgICAgICAqIGxpc3RlbmVyIGhhcyB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXMKICAgICAgICoKICAgICAgICogICAtIGB0YXJnZXRTY29wZWAgLSB7U2NvcGV9OiB0aGUgc2NvcGUgb24gd2hpY2ggdGhlIGV2ZW50IHdhcyBgJGVtaXRgLWVkIG9yIGAkYnJvYWRjYXN0YC1lZC4KICAgICAgICogICAtIGBjdXJyZW50U2NvcGVgIC0ge1Njb3BlfTogdGhlIGN1cnJlbnQgc2NvcGUgd2hpY2ggaXMgaGFuZGxpbmcgdGhlIGV2ZW50LgogICAgICAgKiAgIC0gYG5hbWVgIC0ge3N0cmluZ306IE5hbWUgb2YgdGhlIGV2ZW50LgogICAgICAgKiAgIC0gYHN0b3BQcm9wYWdhdGlvbmAgLSB7ZnVuY3Rpb249fTogY2FsbGluZyBgc3RvcFByb3BhZ2F0aW9uYCBmdW5jdGlvbiB3aWxsIGNhbmNlbCBmdXJ0aGVyIGV2ZW50IHByb3BhZ2F0aW9uCiAgICAgICAqICAgICAoYXZhaWxhYmxlIG9ubHkgZm9yIGV2ZW50cyB0aGF0IHdlcmUgYCRlbWl0YC1lZCkuCiAgICAgICAqICAgLSBgcHJldmVudERlZmF1bHRgIC0ge2Z1bmN0aW9ufTogY2FsbGluZyBgcHJldmVudERlZmF1bHRgIHNldHMgYGRlZmF1bHRQcmV2ZW50ZWRgIGZsYWcgdG8gdHJ1ZS4KICAgICAgICogICAtIGBkZWZhdWx0UHJldmVudGVkYCAtIHtib29sZWFufTogdHJ1ZSBpZiBgcHJldmVudERlZmF1bHRgIHdhcyBjYWxsZWQuCiAgICAgICAqLwogICAgICAkb246IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7CiAgICAgICAgdmFyIG5hbWVkTGlzdGVuZXJzID0gdGhpcy4kJGxpc3RlbmVyc1tuYW1lXTsKICAgICAgICBpZiAoIW5hbWVkTGlzdGVuZXJzKSB7CiAgICAgICAgICB0aGlzLiQkbGlzdGVuZXJzW25hbWVdID0gbmFtZWRMaXN0ZW5lcnMgPSBbXTsKICAgICAgICB9CiAgICAgICAgbmFtZWRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7CgogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgIGFycmF5UmVtb3ZlKG5hbWVkTGlzdGVuZXJzLCBsaXN0ZW5lcik7CiAgICAgICAgfTsKICAgICAgfSwKCgogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGVtaXQKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCB1cHdhcmRzIHRocm91Z2ggdGhlIHNjb3BlIGhpZXJhcmNoeSBub3RpZnlpbmcgdGhlCiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuCiAgICAgICAqCiAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRlbWl0YCB3YXMgY2FsbGVkLiBBbGwKICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXQgbm90aWZpZWQuCiAgICAgICAqIEFmdGVyd2FyZHMsIHRoZSBldmVudCB0cmF2ZXJzZXMgdXB3YXJkcyB0b3dhcmQgdGhlIHJvb3Qgc2NvcGUgYW5kIGNhbGxzIGFsbCByZWdpc3RlcmVkCiAgICAgICAqIGxpc3RlbmVycyBhbG9uZyB0aGUgd2F5LiBUaGUgZXZlbnQgd2lsbCBzdG9wIHByb3BhZ2F0aW5nIGlmIG9uZSBvZiB0aGUgbGlzdGVuZXJzIGNhbmNlbHMgaXQuCiAgICAgICAqCiAgICAgICAqIEFueSBleGNlcHRpb24gZW1taXRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSB3aWxsIGJlIHBhc3NlZAogICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gZW1pdC4KICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIHNldCBvZiBhcmd1bWVudHMgd2hpY2ggd2lsbCBiZSBwYXNzZWQgb250byB0aGUgZXZlbnQgbGlzdGVuZXJzLgogICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEV2ZW50IG9iamVjdCwgc2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0KICAgICAgICovCiAgICAgICRlbWl0OiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7CiAgICAgICAgdmFyIGVtcHR5ID0gW10sCiAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLAogICAgICAgICAgICBzY29wZSA9IHRoaXMsCiAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbiA9IGZhbHNlLAogICAgICAgICAgICBldmVudCA9IHsKICAgICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICAgIHRhcmdldFNjb3BlOiBzY29wZSwKICAgICAgICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge3N0b3BQcm9wYWdhdGlvbiA9IHRydWU7fSwKICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGxpc3RlbmVyQXJncyA9IGNvbmNhdChbZXZlbnRdLCBhcmd1bWVudHMsIDEpLAogICAgICAgICAgICBpLCBsZW5ndGg7CgogICAgICAgIGRvIHsKICAgICAgICAgIG5hbWVkTGlzdGVuZXJzID0gc2NvcGUuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgZW1wdHk7CiAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBzY29wZTsKICAgICAgICAgIGZvciAoaT0wLCBsZW5ndGg9bmFtZWRMaXN0ZW5lcnMubGVuZ3RoOyBpPGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnNbaV0uYXBwbHkobnVsbCwgbGlzdGVuZXJBcmdzKTsKICAgICAgICAgICAgICBpZiAoc3RvcFByb3BhZ2F0aW9uKSByZXR1cm4gZXZlbnQ7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLy90cmF2ZXJzZSB1cHdhcmRzCiAgICAgICAgICBzY29wZSA9IHNjb3BlLiRwYXJlbnQ7CiAgICAgICAgfSB3aGlsZSAoc2NvcGUpOwoKICAgICAgICByZXR1cm4gZXZlbnQ7CiAgICAgIH0sCgoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlIyRicm9hZGNhc3QKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCBkb3dud2FyZHMgdG8gYWxsIGNoaWxkIHNjb3BlcyAoYW5kIHRoZWlyIGNoaWxkcmVuKSBub3RpZnlpbmcgdGhlCiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuCiAgICAgICAqCiAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRicm9hZGNhc3RgIHdhcyBjYWxsZWQuIEFsbAogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldCBub3RpZmllZC4KICAgICAgICogQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHByb3BhZ2F0ZXMgdG8gYWxsIGRpcmVjdCBhbmQgaW5kaXJlY3Qgc2NvcGVzIG9mIHRoZSBjdXJyZW50IHNjb3BlIGFuZAogICAgICAgKiBjYWxscyBhbGwgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgYWxvbmcgdGhlIHdheS4gVGhlIGV2ZW50IGNhbm5vdCBiZSBjYW5jZWxlZC4KICAgICAgICoKICAgICAgICogQW55IGV4Y2VwdGlvbiBlbW1pdGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkCiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBlbWl0LgogICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgc2V0IG9mIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuCiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0LCBzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufQogICAgICAgKi8KICAgICAgJGJyb2FkY2FzdDogZnVuY3Rpb24obmFtZSwgYXJncykgewogICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLAogICAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0LAogICAgICAgICAgICBuZXh0ID0gdGFyZ2V0LAogICAgICAgICAgICBldmVudCA9IHsKICAgICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICAgIHRhcmdldFNjb3BlOiB0YXJnZXQsCiAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkOiBmYWxzZQogICAgICAgICAgICB9LAogICAgICAgICAgICBsaXN0ZW5lckFyZ3MgPSBjb25jYXQoW2V2ZW50XSwgYXJndW1lbnRzLCAxKTsKCiAgICAgICAgLy9kb3duIHdoaWxlIHlvdSBjYW4sIHRoZW4gdXAgYW5kIG5leHQgc2libGluZyBvciB1cCBhbmQgbmV4dCBzaWJsaW5nIHVudGlsIGJhY2sgYXQgcm9vdAogICAgICAgIGRvIHsKICAgICAgICAgIGN1cnJlbnQgPSBuZXh0OwogICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gY3VycmVudDsKICAgICAgICAgIGZvckVhY2goY3VycmVudC4kJGxpc3RlbmVyc1tuYW1lXSwgZnVuY3Rpb24obGlzdGVuZXIpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBsaXN0ZW5lci5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpOwogICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CgogICAgICAgICAgLy8gSW5zYW5pdHkgV2FybmluZzogc2NvcGUgZGVwdGgtZmlyc3QgdHJhdmVyc2FsCiAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IQogICAgICAgICAgLy8gdGhpcyBwaWVjZSBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIHRyYXZlcnNhbCBpbiAkZGlnZXN0CiAgICAgICAgICBpZiAoIShuZXh0ID0gKGN1cnJlbnQuJCRjaGlsZEhlYWQgfHwgKGN1cnJlbnQgIT09IHRhcmdldCAmJiBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSkpIHsKICAgICAgICAgICAgd2hpbGUoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHsKICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSk7CgogICAgICAgIHJldHVybiBldmVudDsKICAgICAgfQogICAgfTsKCiAgICB2YXIgJHJvb3RTY29wZSA9IG5ldyBTY29wZSgpOwoKICAgIHJldHVybiAkcm9vdFNjb3BlOwoKCiAgICBmdW5jdGlvbiBiZWdpblBoYXNlKHBoYXNlKSB7CiAgICAgIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHsKICAgICAgICB0aHJvdyBFcnJvcigkcm9vdFNjb3BlLiQkcGhhc2UgKyAnIGFscmVhZHkgaW4gcHJvZ3Jlc3MnKTsKICAgICAgfQoKICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gcGhhc2U7CiAgICB9CgogICAgZnVuY3Rpb24gY2xlYXJQaGFzZSgpIHsKICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gbnVsbDsKICAgIH0KCiAgICBmdW5jdGlvbiBjb21waWxlVG9GbihleHAsIG5hbWUpIHsKICAgICAgdmFyIGZuID0gJHBhcnNlKGV4cCk7CiAgICAgIGFzc2VydEFyZ0ZuKGZuLCBuYW1lKTsKICAgICAgcmV0dXJuIGZuOwogICAgfQoKICAgIC8qKgogICAgICogZnVuY3Rpb24gdXNlZCBhcyBhbiBpbml0aWFsIHZhbHVlIGZvciB3YXRjaGVycy4KICAgICAqIGJlY2F1c2UgaXQncyB1bmlxdWV1ZSB3ZSBjYW4gZWFzaWx5IHRlbGwgaXQgYXBhcnQgZnJvbSBvdGhlciB2YWx1ZXMKICAgICAqLwogICAgZnVuY3Rpb24gaW5pdFdhdGNoVmFsKCkge30KICB9XTsKfQoKLyoqCiAqICEhISBUaGlzIGlzIGFuIHVuZG9jdW1lbnRlZCAicHJpdmF0ZSIgc2VydmljZSAhISEKICoKICogQG5hbWUgbmcuJHNuaWZmZXIKICogQHJlcXVpcmVzICR3aW5kb3cKICoKICogQHByb3BlcnR5IHtib29sZWFufSBoaXN0b3J5IERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBodG1sNSBoaXN0b3J5IGFwaSA/CiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaGFzaGNoYW5nZSBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgaGFzaGNoYW5nZSBldmVudCA/CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGlzIGlzIHZlcnkgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIHRlc3RpbmcgYnJvd3NlcidzIGZlYXR1cmVzLgogKi8KZnVuY3Rpb24gJFNuaWZmZXJQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbigkd2luZG93KSB7CiAgICB2YXIgZXZlbnRTdXBwb3J0ID0ge30sCiAgICAgICAgYW5kcm9pZCA9IGludCgoL2FuZHJvaWQgKFxkKykvLmV4ZWMobG93ZXJjYXNlKCR3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkpIHx8IFtdKVsxXSk7CgogICAgcmV0dXJuIHsKICAgICAgLy8gQW5kcm9pZCBoYXMgaGlzdG9yeS5wdXNoU3RhdGUsIGJ1dCBpdCBkb2VzIG5vdCB1cGRhdGUgbG9jYXRpb24gY29ycmVjdGx5CiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGF0IGFsbC4KICAgICAgLy8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2FuZHJvaWQvaXNzdWVzL2RldGFpbD9pZD0xNzQ3MQogICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MDQKICAgICAgaGlzdG9yeTogISEoJHdpbmRvdy5oaXN0b3J5ICYmICR3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgJiYgIShhbmRyb2lkIDwgNCkpLAogICAgICBoYXNoY2hhbmdlOiAnb25oYXNoY2hhbmdlJyBpbiAkd2luZG93ICYmCiAgICAgICAgICAgICAgICAgIC8vIElFOCBjb21wYXRpYmxlIG1vZGUgbGllcwogICAgICAgICAgICAgICAgICAoISR3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRNb2RlIHx8ICR3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gNyksCiAgICAgIGhhc0V2ZW50OiBmdW5jdGlvbihldmVudCkgewogICAgICAgIC8vIElFOSBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgaXQncyBzbyBmdWJhcmVkIHRoYXQgd2UgcmF0aGVyIHByZXRlbmQgdGhhdCBpdCBkb2Vzbid0IGhhdmUKICAgICAgICAvLyBpdC4gSW4gcGFydGljdWxhciB0aGUgZXZlbnQgaXMgbm90IGZpcmVkIHdoZW4gYmFja3NwYWNlIG9yIGRlbGV0ZSBrZXkgYXJlIHByZXNzZWQgb3IKICAgICAgICAvLyB3aGVuIGN1dCBvcGVyYXRpb24gaXMgcGVyZm9ybWVkLgogICAgICAgIGlmIChldmVudCA9PSAnaW5wdXQnICYmIG1zaWUgPT0gOSkgcmV0dXJuIGZhbHNlOwoKICAgICAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnRTdXBwb3J0W2V2ZW50XSkpIHsKICAgICAgICAgIHZhciBkaXZFbG0gPSAkd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgZXZlbnRTdXBwb3J0W2V2ZW50XSA9ICdvbicgKyBldmVudCBpbiBkaXZFbG07CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZXZlbnRTdXBwb3J0W2V2ZW50XTsKICAgICAgfSwKICAgICAgLy8gVE9ETyhpKTogY3VycmVudGx5IHRoZXJlIGlzIG5vIHdheSB0byBmZWF0dXJlIGRldGVjdCBDU1Agd2l0aG91dCB0cmlnZ2VyaW5nIGFsZXJ0cwogICAgICBjc3A6IGZhbHNlCiAgICB9OwogIH1dOwp9CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kd2luZG93CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBIHJlZmVyZW5jZSB0byB0aGUgYnJvd3NlcidzIGB3aW5kb3dgIG9iamVjdC4gV2hpbGUgYHdpbmRvd2AKICogaXMgZ2xvYmFsbHkgYXZhaWxhYmxlIGluIEphdmFTY3JpcHQsIGl0IGNhdXNlcyB0ZXN0YWJpbGl0eSBwcm9ibGVtcywgYmVjYXVzZQogKiBpdCBpcyBhIGdsb2JhbCB2YXJpYWJsZS4gSW4gYW5ndWxhciB3ZSBhbHdheXMgcmVmZXIgdG8gaXQgdGhyb3VnaCB0aGUKICogYCR3aW5kb3dgIHNlcnZpY2UsIHNvIGl0IG1heSBiZSBvdmVycmlkZW4sIHJlbW92ZWQgb3IgbW9ja2VkIGZvciB0ZXN0aW5nLgogKgogKiBBbGwgZXhwcmVzc2lvbnMgYXJlIGV2YWx1YXRlZCB3aXRoIHJlc3BlY3QgdG8gY3VycmVudCBzY29wZSBzbyB0aGV5IGRvbid0CiAqIHN1ZmZlciBmcm9tIHdpbmRvdyBnbG9iYWxpdHkuCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxpbnB1dCBuZy1pbml0PSIkd2luZG93ID0gJHNlcnZpY2UoJyR3aW5kb3cnKTsgZ3JlZXRpbmc9J0hlbGxvIFdvcmxkISciIHR5cGU9InRleHQiIG5nLW1vZGVsPSJncmVldGluZyIgLz4KICAgICAgIDxidXR0b24gbmctY2xpY2s9IiR3aW5kb3cuYWxlcnQoZ3JlZXRpbmcpIj5BTEVSVDwvYnV0dG9uPgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KZnVuY3Rpb24gJFdpbmRvd1Byb3ZpZGVyKCl7CiAgdGhpcy4kZ2V0ID0gdmFsdWVGbih3aW5kb3cpOwp9CgovKioKICogUGFyc2UgaGVhZGVycyBpbnRvIGtleSB2YWx1ZSBvYmplY3QKICoKICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlcnMgUmF3IGhlYWRlcnMgYXMgYSBzdHJpbmcKICogQHJldHVybnMge09iamVjdH0gUGFyc2VkIGhlYWRlcnMgYXMga2V5IHZhbHVlIG9iamVjdAogKi8KZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHsKICB2YXIgcGFyc2VkID0ge30sIGtleSwgdmFsLCBpOwoKICBpZiAoIWhlYWRlcnMpIHJldHVybiBwYXJzZWQ7CgogIGZvckVhY2goaGVhZGVycy5zcGxpdCgnXG4nKSwgZnVuY3Rpb24obGluZSkgewogICAgaSA9IGxpbmUuaW5kZXhPZignOicpOwogICAga2V5ID0gbG93ZXJjYXNlKHRyaW0obGluZS5zdWJzdHIoMCwgaSkpKTsKICAgIHZhbCA9IHRyaW0obGluZS5zdWJzdHIoaSArIDEpKTsKCiAgICBpZiAoa2V5KSB7CiAgICAgIGlmIChwYXJzZWRba2V5XSkgewogICAgICAgIHBhcnNlZFtrZXldICs9ICcsICcgKyB2YWw7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcGFyc2VkW2tleV0gPSB2YWw7CiAgICAgIH0KICAgIH0KICB9KTsKCiAgcmV0dXJuIHBhcnNlZDsKfQoKCi8qKgogKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gcGFyc2VkIGhlYWRlcnMuCiAqCiAqIEhlYWRlcnMgYXJlIGxhenkgcGFyc2VkIHdoZW4gZmlyc3QgcmVxdWVzdGVkLgogKiBAc2VlIHBhcnNlSGVhZGVycwogKgogKiBAcGFyYW0geyhzdHJpbmd8T2JqZWN0KX0gaGVhZGVycyBIZWFkZXJzIHRvIHByb3ZpZGUgYWNjZXNzIHRvLgogKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nPSl9IFJldHVybnMgYSBnZXR0ZXIgZnVuY3Rpb24gd2hpY2ggaWYgY2FsbGVkIHdpdGg6CiAqCiAqICAgLSBpZiBjYWxsZWQgd2l0aCBzaW5nbGUgYW4gYXJndW1lbnQgcmV0dXJucyBhIHNpbmdsZSBoZWFkZXIgdmFsdWUgb3IgbnVsbAogKiAgIC0gaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGhlYWRlcnMuCiAqLwpmdW5jdGlvbiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpIHsKICB2YXIgaGVhZGVyc09iaiA9IGlzT2JqZWN0KGhlYWRlcnMpID8gaGVhZGVycyA6IHVuZGVmaW5lZDsKCiAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHsKICAgIGlmICghaGVhZGVyc09iaikgaGVhZGVyc09iaiA9ICBwYXJzZUhlYWRlcnMoaGVhZGVycyk7CgogICAgaWYgKG5hbWUpIHsKICAgICAgcmV0dXJuIGhlYWRlcnNPYmpbbG93ZXJjYXNlKG5hbWUpXSB8fCBudWxsOwogICAgfQoKICAgIHJldHVybiBoZWFkZXJzT2JqOwogIH07Cn0KCgovKioKICogQ2hhaW4gYWxsIGdpdmVuIGZ1bmN0aW9ucwogKgogKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgZm9yIGJvdGggcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtaW5nCiAqCiAqIEBwYXJhbSB7Kn0gZGF0YSBEYXRhIHRvIHRyYW5zZm9ybS4KICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmc9KX0gaGVhZGVycyBIdHRwIGhlYWRlcnMgZ2V0dGVyIGZuLgogKiBAcGFyYW0geyhmdW5jdGlvbnxBcnJheS48ZnVuY3Rpb24+KX0gZm5zIEZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIGZ1bmN0aW9ucy4KICogQHJldHVybnMgeyp9IFRyYW5zZm9ybWVkIGRhdGEuCiAqLwpmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykgewogIGlmIChpc0Z1bmN0aW9uKGZucykpCiAgICByZXR1cm4gZm5zKGRhdGEsIGhlYWRlcnMpOwoKICBmb3JFYWNoKGZucywgZnVuY3Rpb24oZm4pIHsKICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTsKICB9KTsKCiAgcmV0dXJuIGRhdGE7Cn0KCgpmdW5jdGlvbiBpc1N1Y2Nlc3Moc3RhdHVzKSB7CiAgcmV0dXJuIDIwMCA8PSBzdGF0dXMgJiYgc3RhdHVzIDwgMzAwOwp9CgoKZnVuY3Rpb24gJEh0dHBQcm92aWRlcigpIHsKICB2YXIgSlNPTl9TVEFSVCA9IC9eXHMqKFxbfFx7W15ce10pLywKICAgICAgSlNPTl9FTkQgPSAvW1x9XF1dXHMqJC8sCiAgICAgIFBST1RFQ1RJT05fUFJFRklYID0gL15cKVxdXH0nLD9cbi87CgogIHZhciAkY29uZmlnID0gdGhpcy5kZWZhdWx0cyA9IHsKICAgIC8vIHRyYW5zZm9ybSBpbmNvbWluZyByZXNwb25zZSBkYXRhCiAgICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uKGRhdGEpIHsKICAgICAgaWYgKGlzU3RyaW5nKGRhdGEpKSB7CiAgICAgICAgLy8gc3RyaXAganNvbiB2dWxuZXJhYmlsaXR5IHByb3RlY3Rpb24gcHJlZml4CiAgICAgICAgZGF0YSA9IGRhdGEucmVwbGFjZShQUk9URUNUSU9OX1BSRUZJWCwgJycpOwogICAgICAgIGlmIChKU09OX1NUQVJULnRlc3QoZGF0YSkgJiYgSlNPTl9FTkQudGVzdChkYXRhKSkKICAgICAgICAgIGRhdGEgPSBmcm9tSnNvbihkYXRhLCB0cnVlKTsKICAgICAgfQogICAgICByZXR1cm4gZGF0YTsKICAgIH1dLAoKICAgIC8vIHRyYW5zZm9ybSBvdXRnb2luZyByZXF1ZXN0IGRhdGEKICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbihkKSB7CiAgICAgIHJldHVybiBpc09iamVjdChkKSAmJiAhaXNGaWxlKGQpID8gdG9Kc29uKGQpIDogZDsKICAgIH1dLAoKICAgIC8vIGRlZmF1bHQgaGVhZGVycwogICAgaGVhZGVyczogewogICAgICBjb21tb246IHsKICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsCiAgICAgICAgJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnCiAgICAgIH0sCiAgICAgIHBvc3Q6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCd9LAogICAgICBwdXQ6ICB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnfQogICAgfQogIH07CgogIHZhciBwcm92aWRlclJlc3BvbnNlSW50ZXJjZXB0b3JzID0gdGhpcy5yZXNwb25zZUludGVyY2VwdG9ycyA9IFtdOwoKICB0aGlzLiRnZXQgPSBbJyRodHRwQmFja2VuZCcsICckYnJvd3NlcicsICckY2FjaGVGYWN0b3J5JywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGluamVjdG9yJywKICAgICAgZnVuY3Rpb24oJGh0dHBCYWNrZW5kLCAkYnJvd3NlciwgJGNhY2hlRmFjdG9yeSwgJHJvb3RTY29wZSwgJHEsICRpbmplY3RvcikgewoKICAgIHZhciBkZWZhdWx0Q2FjaGUgPSAkY2FjaGVGYWN0b3J5KCckaHR0cCcpLAogICAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JzID0gW107CgogICAgZm9yRWFjaChwcm92aWRlclJlc3BvbnNlSW50ZXJjZXB0b3JzLCBmdW5jdGlvbihpbnRlcmNlcHRvcikgewogICAgICByZXNwb25zZUludGVyY2VwdG9ycy5wdXNoKAogICAgICAgICAgaXNTdHJpbmcoaW50ZXJjZXB0b3IpCiAgICAgICAgICAgICAgPyAkaW5qZWN0b3IuZ2V0KGludGVyY2VwdG9yKQogICAgICAgICAgICAgIDogJGluamVjdG9yLmludm9rZShpbnRlcmNlcHRvcikKICAgICAgKTsKICAgIH0pOwoKCiAgICAvKioKICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICogQG5hbWUgbmcuJGh0dHAKICAgICAqIEByZXF1aXJlcyAkaHR0cEJhY2tlZAogICAgICogQHJlcXVpcmVzICRicm93c2VyCiAgICAgKiBAcmVxdWlyZXMgJGNhY2hlRmFjdG9yeQogICAgICogQHJlcXVpcmVzICRyb290U2NvcGUKICAgICAqIEByZXF1aXJlcyAkcQogICAgICogQHJlcXVpcmVzICRpbmplY3RvcgogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGNvcmUgQW5ndWxhciBzZXJ2aWNlIHRoYXQgZmFjaWxpdGF0ZXMgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSByZW1vdGUKICAgICAqIEhUVFAgc2VydmVycyB2aWEgYnJvd3NlcidzIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi94bWxodHRwcmVxdWVzdAogICAgICogWE1MSHR0cFJlcXVlc3R9IG9iamVjdCBvciB2aWEge0BsaW5rIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlAgSlNPTlB9LgogICAgICoKICAgICAqIEZvciB1bml0IHRlc3RpbmcgYXBwbGljYXRpb25zIHRoYXQgdXNlIGAkaHR0cGAgc2VydmljZSwgc2VlCiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCAkaHR0cEJhY2tlbmQgbW9ja30uCiAgICAgKgogICAgICogRm9yIGEgaGlnaGVyIGxldmVsIG9mIGFic3RyYWN0aW9uLCBwbGVhc2UgY2hlY2sgb3V0IHRoZSB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2UKICAgICAqICRyZXNvdXJjZX0gc2VydmljZS4KICAgICAqCiAgICAgKiBUaGUgJGh0dHAgQVBJIGlzIGJhc2VkIG9uIHRoZSB7QGxpbmsgbmcuJHEgZGVmZXJyZWQvcHJvbWlzZSBBUElzfSBleHBvc2VkIGJ5CiAgICAgKiB0aGUgJHEgc2VydmljZS4gV2hpbGUgZm9yIHNpbXBsZSB1c2FnZSBwYXR0ZXJzIHRoaXMgZG9lc24ndCBtYXR0ZXIgbXVjaCwgZm9yIGFkdmFuY2VkIHVzYWdlLAogICAgICogaXQgaXMgaW1wb3J0YW50IHRvIGZhbWlsaWFyaXplIHlvdXJzZWxmIHdpdGggdGhlc2UgYXBpcyBhbmQgZ3VhcmFudGVlcyB0aGV5IHByb3ZpZGUuCiAgICAgKgogICAgICoKICAgICAqICMgR2VuZXJhbCB1c2FnZQogICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGEgc2luZ2xlIGFyZ3VtZW50IOKAlCBhIGNvbmZpZ3VyYXRpb24gb2JqZWN0IOKAlAogICAgICogdGhhdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGFuIGh0dHAgcmVxdWVzdCBhbmQgcmV0dXJucyAgYSB7QGxpbmsgbmcuJHEgcHJvbWlzZX0KICAgICAqIHdpdGggdHdvICRodHRwIHNwZWNpZmljIG1ldGhvZHM6IGBzdWNjZXNzYCBhbmQgYGVycm9yYC4KICAgICAqCiAgICAgKiA8cHJlPgogICAgICogICAkaHR0cCh7bWV0aG9kOiAnR0VUJywgdXJsOiAnL3NvbWVVcmwnfSkuCiAgICAgKiAgICAgc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykgewogICAgICogICAgICAgLy8gdGhpcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBhc3luY2hyb25vdXNseQogICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlCiAgICAgKiAgICAgfSkuCiAgICAgKiAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHsKICAgICAqICAgICAgIC8vIGNhbGxlZCBhc3luY2hyb25vdXNseSBpZiBhbiBlcnJvciBvY2N1cnMKICAgICAqICAgICAgIC8vIG9yIHNlcnZlciByZXR1cm5zIHJlc3BvbnNlIHdpdGggc3RhdHVzCiAgICAgKiAgICAgICAvLyBjb2RlIG91dHNpZGUgb2YgdGhlIDwyMDAsIDQwMCkgcmFuZ2UKICAgICAqICAgICB9KTsKICAgICAqIDwvcHJlPgogICAgICoKICAgICAqIFNpbmNlIHRoZSByZXR1cm5lZCB2YWx1ZSBvZiBjYWxsaW5nIHRoZSAkaHR0cCBmdW5jdGlvbiBpcyBhIFByb21pc2Ugb2JqZWN0LCB5b3UgY2FuIGFsc28gdXNlCiAgICAgKiB0aGUgYHRoZW5gIG1ldGhvZCB0byByZWdpc3RlciBjYWxsYmFja3MsIGFuZCB0aGVzZSBjYWxsYmFja3Mgd2lsbCByZWNlaXZlIGEgc2luZ2xlIGFyZ3VtZW50IOKAkwogICAgICogYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmVzcG9uc2UuIFNlZSB0aGUgYXBpIHNpZ25hdHVyZSBhbmQgdHlwZSBpbmZvIGJlbG93IGZvciBtb3JlCiAgICAgKiBkZXRhaWxzLgogICAgICoKICAgICAqCiAgICAgKiAjIFNob3J0Y3V0IG1ldGhvZHMKICAgICAqCiAgICAgKiBTaW5jZSBhbGwgaW52b2NhdGlvbiBvZiB0aGUgJGh0dHAgc2VydmljZSByZXF1aXJlIGRlZmluaXRpb24gb2YgdGhlIGh0dHAgbWV0aG9kIGFuZCB1cmwgYW5kCiAgICAgKiBQT1NUIGFuZCBQVVQgcmVxdWVzdHMgcmVxdWlyZSByZXNwb25zZSBib2R5L2RhdGEgdG8gYmUgcHJvdmlkZWQgYXMgd2VsbCwgc2hvcnRjdXQgbWV0aG9kcwogICAgICogd2VyZSBjcmVhdGVkIHRvIHNpbXBsaWZ5IHVzaW5nIHRoZSBhcGk6CiAgICAgKgogICAgICogPHByZT4KICAgICAqICAgJGh0dHAuZ2V0KCcvc29tZVVybCcpLnN1Y2Nlc3Moc3VjY2Vzc0NhbGxiYWNrKTsKICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCBkYXRhKS5zdWNjZXNzKHN1Y2Nlc3NDYWxsYmFjayk7CiAgICAgKiA8L3ByZT4KICAgICAqCiAgICAgKiBDb21wbGV0ZSBsaXN0IG9mIHNob3J0Y3V0IG1ldGhvZHM6CiAgICAgKgogICAgICogLSB7QGxpbmsgbmcuJGh0dHAjZ2V0ICRodHRwLmdldH0KICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2hlYWQgJGh0dHAuaGVhZH0KICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3Bvc3QgJGh0dHAucG9zdH0KICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3B1dCAkaHR0cC5wdXR9CiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNkZWxldGUgJGh0dHAuZGVsZXRlfQogICAgICogLSB7QGxpbmsgbmcuJGh0dHAjanNvbnAgJGh0dHAuanNvbnB9CiAgICAgKgogICAgICoKICAgICAqICMgU2V0dGluZyBIVFRQIEhlYWRlcnMKICAgICAqCiAgICAgKiBUaGUgJGh0dHAgc2VydmljZSB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGNlcnRhaW4gaHR0cCBoZWFkZXJzIHRvIGFsbCByZXF1ZXN0cy4gVGhlc2UgZGVmYXVsdHMKICAgICAqIGNhbiBiZSBmdWxseSBjb25maWd1cmVkIGJ5IGFjY2Vzc2luZyB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVyc2AgY29uZmlndXJhdGlvbgogICAgICogb2JqZWN0LCB3aGljaCBjdXJyZW50bHkgY29udGFpbnMgdGhpcyBkZWZhdWx0IGNvbmZpZ3VyYXRpb246CiAgICAgKgogICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbmAgKGhlYWRlcnMgdGhhdCBhcmUgY29tbW9uIGZvciBhbGwgcmVxdWVzdHMpOgogICAgICogICAtIGBBY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICogLyAqYAogICAgICogICAtIGBYLVJlcXVlc3RlZC1XaXRoOiBYTUxIdHRwUmVxdWVzdGAKICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgSFRUUCBQT1NUIHJlcXVlc3RzKQogICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gCiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucHV0YCAoaGVhZGVyIGRlZmF1bHRzIGZvciBIVFRQIFBVVCByZXF1ZXN0cykKICAgICAqICAgLSBgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uYAogICAgICoKICAgICAqIFRvIGFkZCBvciBvdmVyd3JpdGUgdGhlc2UgZGVmYXVsdHMsIHNpbXBseSBhZGQgb3IgcmVtb3ZlIGEgcHJvcGVydHkgZnJvbSB0aGlzIGNvbmZpZ3VyYXRpb24KICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdAogICAgICogd2l0aCBuYW1lIGVxdWFsIHRvIHRoZSBsb3dlci1jYXNlZCBodHRwIG1ldGhvZCBuYW1lLCBlLmcuCiAgICAgKiBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldFsnTXktSGVhZGVyJ109J3ZhbHVlJ2AuCiAgICAgKgogICAgICogQWRkaXRpb25hbGx5LCB0aGUgZGVmYXVsdHMgY2FuIGJlIHNldCBhdCBydW50aW1lIHZpYSB0aGUgYCRodHRwLmRlZmF1bHRzYCBvYmplY3QgaW4gYSBzaW1pbGFyCiAgICAgKiBmYXNzaW9uIGFzIGRlc2NyaWJlZCBhYm92ZS4KICAgICAqCiAgICAgKgogICAgICogIyBUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlcwogICAgICoKICAgICAqIEJvdGggcmVxdWVzdHMgYW5kIHJlc3BvbnNlcyBjYW4gYmUgdHJhbnNmb3JtZWQgdXNpbmcgdHJhbnNmb3JtIGZ1bmN0aW9ucy4gQnkgZGVmYXVsdCwgQW5ndWxhcgogICAgICogYXBwbGllcyB0aGVzZSB0cmFuc2Zvcm1hdGlvbnM6CiAgICAgKgogICAgICogUmVxdWVzdCB0cmFuc2Zvcm1hdGlvbnM6CiAgICAgKgogICAgICogLSBpZiB0aGUgYGRhdGFgIHByb3BlcnR5IG9mIHRoZSByZXF1ZXN0IGNvbmZpZyBvYmplY3QgY29udGFpbnMgYW4gb2JqZWN0LCBzZXJpYWxpemUgaXQgaW50bwogICAgICogICBKU09OIGZvcm1hdC4KICAgICAqCiAgICAgKiBSZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnM6CiAgICAgKgogICAgICogIC0gaWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0IChzZWUgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgc2VjdGlvbiBiZWxvdykKICAgICAqICAtIGlmIGpzb24gcmVzcG9uc2UgaXMgZGV0ZWN0ZWQsIGRlc2VyaWFsaXplIGl0IHVzaW5nIGEgSlNPTiBwYXJzZXIKICAgICAqCiAgICAgKiBUbyBvdmVycmlkZSB0aGVzZSB0cmFuc2Zvcm1hdGlvbiBsb2NhbGx5LCBzcGVjaWZ5IHRyYW5zZm9ybSBmdW5jdGlvbnMgYXMgYHRyYW5zZm9ybVJlcXVlc3RgCiAgICAgKiBhbmQvb3IgYHRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzIG9mIHRoZSBjb25maWcgb2JqZWN0LiBUbyBnbG9iYWxseSBvdmVycmlkZSB0aGUgZGVmYXVsdAogICAgICogdHJhbnNmb3Jtcywgb3ZlcnJpZGUgdGhlIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZAogICAgICogYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgIHByb3BlcnRpZXMgb2YgdGhlIGAkaHR0cFByb3ZpZGVyYC4KICAgICAqCiAgICAgKgogICAgICogIyBDYWNoaW5nCiAgICAgKgogICAgICogVG8gZW5hYmxlIGNhY2hpbmcgc2V0IHRoZSBjb25maWd1cmF0aW9uIHByb3BlcnR5IGBjYWNoZWAgdG8gYHRydWVgLiBXaGVuIHRoZSBjYWNoZSBpcwogICAgICogZW5hYmxlZCwgYCRodHRwYCBzdG9yZXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBpbiBsb2NhbCBjYWNoZS4gTmV4dCB0aW1lIHRoZQogICAgICogcmVzcG9uc2UgaXMgc2VydmVkIGZyb20gdGhlIGNhY2hlIHdpdGhvdXQgc2VuZGluZyBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci4KICAgICAqCiAgICAgKiBOb3RlIHRoYXQgZXZlbiBpZiB0aGUgcmVzcG9uc2UgaXMgc2VydmVkIGZyb20gY2FjaGUsIGRlbGl2ZXJ5IG9mIHRoZSBkYXRhIGlzIGFzeW5jaHJvbm91cyBpbgogICAgICogdGhlIHNhbWUgd2F5IHRoYXQgcmVhbCByZXF1ZXN0cyBhcmUuCiAgICAgKgogICAgICogSWYgdGhlcmUgYXJlIG11bHRpcGxlIEdFVCByZXF1ZXN0cyBmb3IgdGhlIHNhbWUgdXJsIHRoYXQgc2hvdWxkIGJlIGNhY2hlZCB1c2luZyB0aGUgc2FtZQogICAgICogY2FjaGUsIGJ1dCB0aGUgY2FjaGUgaXMgbm90IHBvcHVsYXRlZCB5ZXQsIG9ubHkgb25lIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB3aWxsIGJlIG1hZGUgYW5kCiAgICAgKiB0aGUgcmVtYWluaW5nIHJlcXVlc3RzIHdpbGwgYmUgZnVsZmlsbGVkIHVzaW5nIHRoZSByZXNwb25zZSBmb3IgdGhlIGZpcnN0IHJlcXVlc3QuCiAgICAgKgogICAgICoKICAgICAqICMgUmVzcG9uc2UgaW50ZXJjZXB0b3JzCiAgICAgKgogICAgICogQmVmb3JlIHlvdSBzdGFydCBjcmVhdGluZyBpbnRlcmNlcHRvcnMsIGJlIHN1cmUgdG8gdW5kZXJzdGFuZCB0aGUKICAgICAqIHtAbGluayBuZy4kcSAkcSBhbmQgZGVmZXJyZWQvcHJvbWlzZSBBUElzfS4KICAgICAqCiAgICAgKiBGb3IgcHVycG9zZXMgb2YgZ2xvYmFsIGVycm9yIGhhbmRsaW5nLCBhdXRoZW50aWNhdGlvbiBvciBhbnkga2luZCBvZiBzeW5jaHJvbm91cyBvcgogICAgICogYXN5bmNocm9ub3VzIHByZXByb2Nlc3Npbmcgb2YgcmVjZWl2ZWQgcmVzcG9uc2VzLCBpdCBpcyBkZXNpcmFibGUgdG8gYmUgYWJsZSB0byBpbnRlcmNlcHQKICAgICAqIHJlc3BvbnNlcyBmb3IgaHR0cCByZXF1ZXN0cyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUgdGhhdAogICAgICogaW5pdGlhdGVkIHRoZXNlIHJlcXVlc3RzLiBUaGUgcmVzcG9uc2UgaW50ZXJjZXB0b3JzIGxldmVyYWdlIHRoZSB7QGxpbmsgbmcuJHEKICAgICAqIHByb21pc2UgYXBpc30gdG8gZnVsZmlsIHRoaXMgbmVlZCBmb3IgYm90aCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHByZXByb2Nlc3NpbmcuCiAgICAgKgogICAgICogVGhlIGludGVyY2VwdG9ycyBhcmUgc2VydmljZSBmYWN0b3JpZXMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSAkaHR0cFByb3ZpZGVyIGJ5CiAgICAgKiBhZGRpbmcgdGhlbSB0byB0aGUgYCRodHRwUHJvdmlkZXIucmVzcG9uc2VJbnRlcmNlcHRvcnNgIGFycmF5LiBUaGUgZmFjdG9yeSBpcyBjYWxsZWQgYW5kCiAgICAgKiBpbmplY3RlZCB3aXRoIGRlcGVuZGVuY2llcyAoaWYgc3BlY2lmaWVkKSBhbmQgcmV0dXJucyB0aGUgaW50ZXJjZXB0b3IgIOKAlCBhIGZ1bmN0aW9uIHRoYXQKICAgICAqIHRha2VzIGEge0BsaW5rIG5nLiRxIHByb21pc2V9IGFuZCByZXR1cm5zIHRoZSBvcmlnaW5hbCBvciBhIG5ldyBwcm9taXNlLgogICAgICoKICAgICAqIDxwcmU+CiAgICAgKiAgIC8vIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciBhcyBhIHNlcnZpY2UKICAgICAqICAgJHByb3ZpZGUuZmFjdG9yeSgnbXlIdHRwSW50ZXJjZXB0b3InLCBmdW5jdGlvbigkcSwgZGVwZW5kZW5jeTEsIGRlcGVuZGVuY3kyKSB7CiAgICAgKiAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb21pc2UpIHsKICAgICAqICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3MKICAgICAqICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBlcnJvcgogICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZXNwb25zZSkpIHsKICAgICAqICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VPck5ld1Byb21pc2UKICAgICAqICAgICAgICAgfQogICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTsKICAgICAqICAgICAgIH0pOwogICAgICogICAgIH0KICAgICAqICAgfSk7CiAgICAgKgogICAgICogICAkaHR0cFByb3ZpZGVyLnJlc3BvbnNlSW50ZXJjZXB0b3JzLnB1c2goJ215SHR0cEludGVyY2VwdG9yJyk7CiAgICAgKgogICAgICoKICAgICAqICAgLy8gcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9yIHZpYSBhbiBhbm9ueW1vdXMgZmFjdG9yeQogICAgICogICAkaHR0cFByb3ZpZGVyLnJlc3BvbnNlSW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5MikgewogICAgICogICAgIHJldHVybiBmdW5jdGlvbihwcm9taXNlKSB7CiAgICAgKiAgICAgICAvLyBzYW1lIGFzIGFib3ZlCiAgICAgKiAgICAgfQogICAgICogICB9KTsKICAgICAqIDwvcHJlPgogICAgICoKICAgICAqCiAgICAgKiAjIFNlY3VyaXR5IENvbnNpZGVyYXRpb25zCiAgICAgKgogICAgICogV2hlbiBkZXNpZ25pbmcgd2ViIGFwcGxpY2F0aW9ucywgY29uc2lkZXIgc2VjdXJpdHkgdGhyZWF0cyBmcm9tOgogICAgICoKICAgICAqIC0ge0BsaW5rIGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweAogICAgICogICBKU09OIFZ1bG5lcmFiaWxpdHl9CiAgICAgKiAtIHtAbGluayBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5IFhTUkZ9CiAgICAgKgogICAgICogQm90aCBzZXJ2ZXIgYW5kIHRoZSBjbGllbnQgbXVzdCBjb29wZXJhdGUgaW4gb3JkZXIgdG8gZWxpbWluYXRlIHRoZXNlIHRocmVhdHMuIEFuZ3VsYXIgY29tZXMKICAgICAqIHByZS1jb25maWd1cmVkIHdpdGggc3RyYXRlZ2llcyB0aGF0IGFkZHJlc3MgdGhlc2UgaXNzdWVzLCBidXQgZm9yIHRoaXMgdG8gd29yayBiYWNrZW5kIHNlcnZlcgogICAgICogY29vcGVyYXRpb24gaXMgcmVxdWlyZWQuCiAgICAgKgogICAgICogIyMgSlNPTiBWdWxuZXJhYmlsaXR5IFByb3RlY3Rpb24KICAgICAqCiAgICAgKiBBIHtAbGluayBodHRwOi8vaGFhY2tlZC5jb20vYXJjaGl2ZS8yMDA4LzExLzIwL2FuYXRvbXktb2YtYS1zdWJ0bGUtanNvbi12dWxuZXJhYmlsaXR5LmFzcHgKICAgICAqIEpTT04gVnVsbmVyYWJpbGl0eX0gYWxsb3dzIHRoaXJkIHBhcnR5IHdlYi1zaXRlIHRvIHR1cm4geW91ciBKU09OIHJlc291cmNlIFVSTCBpbnRvCiAgICAgKiB7QGxpbmsgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OI0pTT05QIEpTT05QfSByZXF1ZXN0IHVuZGVyIHNvbWUgY29uZGl0aW9ucy4gVG8KICAgICAqIGNvdW50ZXIgdGhpcyB5b3VyIHNlcnZlciBjYW4gcHJlZml4IGFsbCBKU09OIHJlcXVlc3RzIHdpdGggZm9sbG93aW5nIHN0cmluZyBgIildfScsXG4iYC4KICAgICAqIEFuZ3VsYXIgd2lsbCBhdXRvbWF0aWNhbGx5IHN0cmlwIHRoZSBwcmVmaXggYmVmb3JlIHByb2Nlc3NpbmcgaXQgYXMgSlNPTi4KICAgICAqCiAgICAgKiBGb3IgZXhhbXBsZSBpZiB5b3VyIHNlcnZlciBuZWVkcyB0byByZXR1cm46CiAgICAgKiA8cHJlPgogICAgICogWydvbmUnLCd0d28nXQogICAgICogPC9wcmU+CiAgICAgKgogICAgICogd2hpY2ggaXMgdnVsbmVyYWJsZSB0byBhdHRhY2ssIHlvdXIgc2VydmVyIGNhbiByZXR1cm46CiAgICAgKiA8cHJlPgogICAgICogKV19JywKICAgICAqIFsnb25lJywndHdvJ10KICAgICAqIDwvcHJlPgogICAgICoKICAgICAqIEFuZ3VsYXIgd2lsbCBzdHJpcCB0aGUgcHJlZml4LCBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgSlNPTi4KICAgICAqCiAgICAgKgogICAgICogIyMgQ3Jvc3MgU2l0ZSBSZXF1ZXN0IEZvcmdlcnkgKFhTUkYpIFByb3RlY3Rpb24KICAgICAqCiAgICAgKiB7QGxpbmsgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3JlcXVlc3RfZm9yZ2VyeSBYU1JGfSBpcyBhIHRlY2huaXF1ZSBieSB3aGljaAogICAgICogYW4gdW5hdXRob3JpemVkIHNpdGUgY2FuIGdhaW4geW91ciB1c2VyJ3MgcHJpdmF0ZSBkYXRhLiBBbmd1bGFyIHByb3ZpZGVzIGZvbGxvd2luZyBtZWNoYW5pc20KICAgICAqIHRvIGNvdW50ZXIgWFNSRi4gV2hlbiBwZXJmb3JtaW5nIFhIUiByZXF1ZXN0cywgdGhlICRodHRwIHNlcnZpY2UgcmVhZHMgYSB0b2tlbiBmcm9tIGEgY29va2llCiAgICAgKiBjYWxsZWQgYFhTUkYtVE9LRU5gIGFuZCBzZXRzIGl0IGFzIHRoZSBIVFRQIGhlYWRlciBgWC1YU1JGLVRPS0VOYC4gU2luY2Ugb25seSBKYXZhU2NyaXB0IHRoYXQKICAgICAqIHJ1bnMgb24geW91ciBkb21haW4gY291bGQgcmVhZCB0aGUgY29va2llLCB5b3VyIHNlcnZlciBjYW4gYmUgYXNzdXJlZCB0aGF0IHRoZSBYSFIgY2FtZSBmcm9tCiAgICAgKiBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4uCiAgICAgKgogICAgICogVG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhpcywgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gc2V0IGEgdG9rZW4gaW4gYSBKYXZhU2NyaXB0IHJlYWRhYmxlIHNlc3Npb24KICAgICAqIGNvb2tpZSBjYWxsZWQgYFhTUkYtVE9LRU5gIG9uIGZpcnN0IEhUVFAgR0VUIHJlcXVlc3QuIE9uIHN1YnNlcXVlbnQgbm9uLUdFVCByZXF1ZXN0cyB0aGUKICAgICAqIHNlcnZlciBjYW4gdmVyaWZ5IHRoYXQgdGhlIGNvb2tpZSBtYXRjaGVzIGBYLVhTUkYtVE9LRU5gIEhUVFAgaGVhZGVyLCBhbmQgdGhlcmVmb3JlIGJlIHN1cmUKICAgICAqIHRoYXQgb25seSBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4gY291bGQgaGF2ZSByZWFkIHRoZSB0b2tlbi4gVGhlIHRva2VuIG11c3QgYmUKICAgICAqIHVuaXF1ZSBmb3IgZWFjaCB1c2VyIGFuZCBtdXN0IGJlIHZlcmlmaWFibGUgYnkgdGhlIHNlcnZlciAodG8gcHJldmVudCB0aGUgSmF2YVNjcmlwdCBtYWtpbmcKICAgICAqIHVwIGl0cyBvd24gdG9rZW5zKS4gV2UgcmVjb21tZW5kIHRoYXQgdGhlIHRva2VuIGlzIGEgZGlnZXN0IG9mIHlvdXIgc2l0ZSdzIGF1dGhlbnRpY2F0aW9uCiAgICAgKiBjb29raWUgd2l0aCB7QGxpbmsgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9SYWluYm93X3RhYmxlIHNhbHQgZm9yIGFkZGVkIHNlY3VyaXR5fS4KICAgICAqCiAgICAgKgogICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBPYmplY3QgZGVzY3JpYmluZyB0aGUgcmVxdWVzdCB0byBiZSBtYWRlIGFuZCBob3cgaXQgc2hvdWxkIGJlCiAgICAgKiAgICBwcm9jZXNzZWQuIFRoZSBvYmplY3QgaGFzIGZvbGxvd2luZyBwcm9wZXJ0aWVzOgogICAgICoKICAgICAqICAgIC0gKiptZXRob2QqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBtZXRob2QgKGUuZy4gJ0dFVCcsICdQT1NUJywgZXRjKQogICAgICogICAgLSAqKnVybCoqIOKAkyBge3N0cmluZ31gIOKAkyBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkLgogICAgICogICAgLSAqKnBhcmFtcyoqIOKAkyBge09iamVjdC48c3RyaW5nfE9iamVjdD59YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB3aGljaCB3aWxsIGJlIHR1cm5lZCB0bwogICAgICogICAgICBgP2tleTE9dmFsdWUxJmtleTI9dmFsdWUyYCBhZnRlciB0aGUgdXJsLiBJZiB0aGUgdmFsdWUgaXMgbm90IGEgc3RyaW5nLCBpdCB3aWxsIGJlIEpTT05pZmllZC4KICAgICAqICAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBEYXRhIHRvIGJlIHNlbnQgYXMgdGhlIHJlcXVlc3QgbWVzc2FnZSBkYXRhLgogICAgICogICAgLSAqKmhlYWRlcnMqKiDigJMgYHtPYmplY3R9YCDigJMgTWFwIG9mIHN0cmluZ3MgcmVwcmVzZW50aW5nIEhUVFAgaGVhZGVycyB0byBzZW5kIHRvIHRoZSBzZXJ2ZXIuCiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVxdWVzdCoqIOKAkyBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT59YCDigJMKICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwCiAgICAgKiAgICAgIHJlcXVlc3QgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBzZXJpYWxpemVkKSB2ZXJzaW9uLgogICAgICogICAgLSAqKnRyYW5zZm9ybVJlc3BvbnNlKiog4oCTIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcil8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpPn1gIOKAkwogICAgICogICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHAKICAgICAqICAgICAgcmVzcG9uc2UgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBkZXNlcmlhbGl6ZWQpIHZlcnNpb24uCiAgICAgKiAgICAtICoqY2FjaGUqKiDigJMgYHtib29sZWFufENhY2hlfWAg4oCTIElmIHRydWUsIGEgZGVmYXVsdCAkaHR0cCBjYWNoZSB3aWxsIGJlIHVzZWQgdG8gY2FjaGUgdGhlCiAgICAgKiAgICAgIEdFVCByZXF1ZXN0LCBvdGhlcndpc2UgaWYgYSBjYWNoZSBpbnN0YW5jZSBidWlsdCB3aXRoCiAgICAgKiAgICAgIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LCB0aGlzIGNhY2hlIHdpbGwgYmUgdXNlZCBmb3IKICAgICAqICAgICAgY2FjaGluZy4KICAgICAqICAgIC0gKip0aW1lb3V0Kiog4oCTIGB7bnVtYmVyfWAg4oCTIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLgogICAgICogICAgLSAqKndpdGhDcmVkZW50aWFscyoqIC0gYHtib29sZWFufWAgLSB3aGV0aGVyIHRvIHRvIHNldCB0aGUgYHdpdGhDcmVkZW50aWFsc2AgZmxhZyBvbiB0aGUKICAgICAqICAgICAgWEhSIG9iamVjdC4gU2VlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9odHRwX2FjY2Vzc19jb250cm9sI3NlY3Rpb25fNQogICAgICogICAgICByZXF1ZXN0cyB3aXRoIGNyZWRlbnRpYWxzfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IFJldHVybnMgYSB7QGxpbmsgbmcuJHEgcHJvbWlzZX0gb2JqZWN0IHdpdGggdGhlCiAgICAgKiAgIHN0YW5kYXJkIGB0aGVuYCBtZXRob2QgYW5kIHR3byBodHRwIHNwZWNpZmljIG1ldGhvZHM6IGBzdWNjZXNzYCBhbmQgYGVycm9yYC4gVGhlIGB0aGVuYAogICAgICogICBtZXRob2QgdGFrZXMgdHdvIGFyZ3VtZW50cyBhIHN1Y2Nlc3MgYW5kIGFuIGVycm9yIGNhbGxiYWNrIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdpdGggYQogICAgICogICByZXNwb25zZSBvYmplY3QuIFRoZSBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAgbWV0aG9kcyB0YWtlIGEgc2luZ2xlIGFyZ3VtZW50IC0gYSBmdW5jdGlvbiB0aGF0CiAgICAgKiAgIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZHMgb3IgZmFpbHMgcmVzcGVjdGl2ZWx5LiBUaGUgYXJndW1lbnRzIHBhc3NlZCBpbnRvCiAgICAgKiAgIHRoZXNlIGZ1bmN0aW9ucyBhcmUgZGVzdHJ1Y3R1cmVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZXNwb25zZSBvYmplY3QgcGFzc2VkIGludG8gdGhlCiAgICAgKiAgIGB0aGVuYCBtZXRob2QuIFRoZSByZXNwb25zZSBvYmplY3QgaGFzIHRoZXNlIHByb3BlcnRpZXM6CiAgICAgKgogICAgICogICAtICoqZGF0YSoqIOKAkyBge3N0cmluZ3xPYmplY3R9YCDigJMgVGhlIHJlc3BvbnNlIGJvZHkgdHJhbnNmb3JtZWQgd2l0aCB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9ucy4KICAgICAqICAgLSAqKnN0YXR1cyoqIOKAkyBge251bWJlcn1gIOKAkyBIVFRQIHN0YXR1cyBjb2RlIG9mIHRoZSByZXNwb25zZS4KICAgICAqICAgLSAqKmhlYWRlcnMqKiDigJMgYHtmdW5jdGlvbihbaGVhZGVyTmFtZV0pfWAg4oCTIEhlYWRlciBnZXR0ZXIgZnVuY3Rpb24uCiAgICAgKiAgIC0gKipjb25maWcqKiDigJMgYHtPYmplY3R9YCDigJMgVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHJlcXVlc3QuCiAgICAgKgogICAgICogQHByb3BlcnR5IHtBcnJheS48T2JqZWN0Pn0gcGVuZGluZ1JlcXVlc3RzIEFycmF5IG9mIGNvbmZpZyBvYmplY3RzIGZvciBjdXJyZW50bHkgcGVuZGluZwogICAgICogICByZXF1ZXN0cy4gVGhpcyBpcyBwcmltYXJpbHkgbWVhbnQgdG8gYmUgdXNlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLgogICAgICoKICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICA8ZXhhbXBsZT4KICAgICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iRmV0Y2hDdHJsIj4KICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD0ibWV0aG9kIj4KICAgICAgICAgICAgICA8b3B0aW9uPkdFVDwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24+SlNPTlA8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0idXJsIiBzaXplPSI4MCIvPgogICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSJmZXRjaCgpIj5mZXRjaDwvYnV0dG9uPjxicj4KICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0idXBkYXRlTW9kZWwoJ0dFVCcsICdodHRwLWhlbGxvLmh0bWwnKSI+U2FtcGxlIEdFVDwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSJ1cGRhdGVNb2RlbCgnSlNPTlAnLCAnaHR0cDovL2FuZ3VsYXJqcy5vcmcvZ3JlZXQucGhwP2NhbGxiYWNrPUpTT05fQ0FMTEJBQ0smbmFtZT1TdXBlciUyMEhlcm8nKSI+U2FtcGxlIEpTT05QPC9idXR0b24+CiAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9InVwZGF0ZU1vZGVsKCdKU09OUCcsICdodHRwOi8vYW5ndWxhcmpzLm9yZy9kb2VzbnRleGlzdCZjYWxsYmFjaz1KU09OX0NBTExCQUNLJykiPkludmFsaWQgSlNPTlA8L2J1dHRvbj4KICAgICAgICAgICAgPHByZT5odHRwIHN0YXR1cyBjb2RlOiB7e3N0YXR1c319PC9wcmU+CiAgICAgICAgICAgIDxwcmU+aHR0cCByZXNwb25zZSBkYXRhOiB7e2RhdGF9fTwvcHJlPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgICAgICBmdW5jdGlvbiBGZXRjaEN0cmwoJHNjb3BlLCAkaHR0cCwgJHRlbXBsYXRlQ2FjaGUpIHsKICAgICAgICAgICAgJHNjb3BlLm1ldGhvZCA9ICdHRVQnOwogICAgICAgICAgICAkc2NvcGUudXJsID0gJ2h0dHAtaGVsbG8uaHRtbCc7CgogICAgICAgICAgICAkc2NvcGUuZmV0Y2ggPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAkc2NvcGUuY29kZSA9IG51bGw7CiAgICAgICAgICAgICAgJHNjb3BlLnJlc3BvbnNlID0gbnVsbDsKCiAgICAgICAgICAgICAgJGh0dHAoe21ldGhvZDogJHNjb3BlLm1ldGhvZCwgdXJsOiAkc2NvcGUudXJsLCBjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS4KICAgICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSBzdGF0dXM7CiAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YTsKICAgICAgICAgICAgICAgIH0pLgogICAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YSB8fCAiUmVxdWVzdCBmYWlsZWQiOwogICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gc3RhdHVzOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZU1vZGVsID0gZnVuY3Rpb24obWV0aG9kLCB1cmwpIHsKICAgICAgICAgICAgICAkc2NvcGUubWV0aG9kID0gbWV0aG9kOwogICAgICAgICAgICAgICRzY29wZS51cmwgPSB1cmw7CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9Imh0dHAtaGVsbG8uaHRtbCI+CiAgICAgICAgICBIZWxsbywgJGh0dHAhCiAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgICAgIGl0KCdzaG91bGQgbWFrZSBhbiB4aHIgR0VUIHJlcXVlc3QnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucygiU2FtcGxlIEdFVCIpJykuY2xpY2soKTsKICAgICAgICAgICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucygiZmV0Y2giKScpLmNsaWNrKCk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdzdGF0dXMnKSkudG9CZSgnMjAwJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdkYXRhJykpLnRvTWF0Y2goL0hlbGxvLCBcJGh0dHAhLyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIG1ha2UgYSBKU09OUCByZXF1ZXN0IHRvIGFuZ3VsYXJqcy5vcmcnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucygiU2FtcGxlIEpTT05QIiknKS5jbGljaygpOwogICAgICAgICAgICBlbGVtZW50KCc6YnV0dG9uOmNvbnRhaW5zKCJmZXRjaCIpJykuY2xpY2soKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3N0YXR1cycpKS50b0JlKCcyMDAnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2RhdGEnKSkudG9NYXRjaCgvU3VwZXIgSGVybyEvKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgbWFrZSBKU09OUCByZXF1ZXN0IHRvIGludmFsaWQgVVJMIGFuZCBpbnZva2UgdGhlIGVycm9yIGhhbmRsZXInLAogICAgICAgICAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBlbGVtZW50KCc6YnV0dG9uOmNvbnRhaW5zKCJJbnZhbGlkIEpTT05QIiknKS5jbGljaygpOwogICAgICAgICAgICBlbGVtZW50KCc6YnV0dG9uOmNvbnRhaW5zKCJmZXRjaCIpJykuY2xpY2soKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3N0YXR1cycpKS50b0JlKCcwJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdkYXRhJykpLnRvQmUoJ1JlcXVlc3QgZmFpbGVkJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2ZpbGU+CiAgICAgIDwvZXhhbXBsZT4KICAgICAqLwogICAgZnVuY3Rpb24gJGh0dHAoY29uZmlnKSB7CiAgICAgIGNvbmZpZy5tZXRob2QgPSB1cHBlcmNhc2UoY29uZmlnLm1ldGhvZCk7CgogICAgICB2YXIgcmVxVHJhbnNmb3JtRm4gPSBjb25maWcudHJhbnNmb3JtUmVxdWVzdCB8fCAkY29uZmlnLnRyYW5zZm9ybVJlcXVlc3QsCiAgICAgICAgICByZXNwVHJhbnNmb3JtRm4gPSBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UgfHwgJGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSwKICAgICAgICAgIGRlZkhlYWRlcnMgPSAkY29uZmlnLmhlYWRlcnMsCiAgICAgICAgICByZXFIZWFkZXJzID0gZXh0ZW5kKHsnWC1YU1JGLVRPS0VOJzogJGJyb3dzZXIuY29va2llcygpWydYU1JGLVRPS0VOJ119LAogICAgICAgICAgICAgIGRlZkhlYWRlcnMuY29tbW9uLCBkZWZIZWFkZXJzW2xvd2VyY2FzZShjb25maWcubWV0aG9kKV0sIGNvbmZpZy5oZWFkZXJzKSwKICAgICAgICAgIHJlcURhdGEgPSB0cmFuc2Zvcm1EYXRhKGNvbmZpZy5kYXRhLCBoZWFkZXJzR2V0dGVyKHJlcUhlYWRlcnMpLCByZXFUcmFuc2Zvcm1GbiksCiAgICAgICAgICBwcm9taXNlOwoKICAgICAgLy8gc3RyaXAgY29udGVudC10eXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkCiAgICAgIGlmIChpc1VuZGVmaW5lZChjb25maWcuZGF0YSkpIHsKICAgICAgICBkZWxldGUgcmVxSGVhZGVyc1snQ29udGVudC1UeXBlJ107CiAgICAgIH0KCiAgICAgIC8vIHNlbmQgcmVxdWVzdAogICAgICBwcm9taXNlID0gc2VuZFJlcShjb25maWcsIHJlcURhdGEsIHJlcUhlYWRlcnMpOwoKCiAgICAgIC8vIHRyYW5zZm9ybSBmdXR1cmUgcmVzcG9uc2UKICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbih0cmFuc2Zvcm1SZXNwb25zZSwgdHJhbnNmb3JtUmVzcG9uc2UpOwoKICAgICAgLy8gYXBwbHkgaW50ZXJjZXB0b3JzCiAgICAgIGZvckVhY2gocmVzcG9uc2VJbnRlcmNlcHRvcnMsIGZ1bmN0aW9uKGludGVyY2VwdG9yKSB7CiAgICAgICAgcHJvbWlzZSA9IGludGVyY2VwdG9yKHByb21pc2UpOwogICAgICB9KTsKCiAgICAgIHByb21pc2Uuc3VjY2VzcyA9IGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICBmbihyZXNwb25zZS5kYXRhLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLmhlYWRlcnMsIGNvbmZpZyk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHByb21pc2U7CiAgICAgIH07CgogICAgICBwcm9taXNlLmVycm9yID0gZnVuY3Rpb24oZm4pIHsKICAgICAgICBwcm9taXNlLnRoZW4obnVsbCwgZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgIGZuKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UuaGVhZGVycywgY29uZmlnKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcHJvbWlzZTsKICAgICAgfTsKCiAgICAgIHJldHVybiBwcm9taXNlOwoKICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UocmVzcG9uc2UpIHsKICAgICAgICAvLyBtYWtlIGEgY29weSBzaW5jZSB0aGUgcmVzcG9uc2UgbXVzdCBiZSBjYWNoZWFibGUKICAgICAgICB2YXIgcmVzcCA9IGV4dGVuZCh7fSwgcmVzcG9uc2UsIHsKICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybURhdGEocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuaGVhZGVycywgcmVzcFRyYW5zZm9ybUZuKQogICAgICAgIH0pOwogICAgICAgIHJldHVybiAoaXNTdWNjZXNzKHJlc3BvbnNlLnN0YXR1cykpCiAgICAgICAgICA/IHJlc3AKICAgICAgICAgIDogJHEucmVqZWN0KHJlc3ApOwogICAgICB9CiAgICB9CgogICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzID0gW107CgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSBuZy4kaHR0cCNnZXQKICAgICAqIEBtZXRob2RPZiBuZy4kaHR0cAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEdFVGAgcmVxdWVzdAogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRodHRwI2RlbGV0ZQogICAgICogQG1ldGhvZE9mIG5nLiRodHRwCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgREVMRVRFYCByZXF1ZXN0CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QKICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0CiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3QKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJGh0dHAjaGVhZAogICAgICogQG1ldGhvZE9mIG5nLiRodHRwCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSEVBRGAgcmVxdWVzdAogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRodHRwI2pzb25wCiAgICAgKiBAbWV0aG9kT2YgbmcuJGh0dHAKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBKU09OUGAgcmVxdWVzdAogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0LgogICAgICogICAgICAgICAgICAgICAgICAgICBTaG91bGQgY29udGFpbiBgSlNPTl9DQUxMQkFDS2Agc3RyaW5nLgogICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QKICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdAogICAgICovCiAgICBjcmVhdGVTaG9ydE1ldGhvZHMoJ2dldCcsICdkZWxldGUnLCAnaGVhZCcsICdqc29ucCcpOwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJGh0dHAjcG9zdAogICAgICogQG1ldGhvZE9mIG5nLiRodHRwCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUE9TVGAgcmVxdWVzdAogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRodHRwI3B1dAogICAgICogQG1ldGhvZE9mIG5nLiRodHRwCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUFVUYCByZXF1ZXN0CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QKICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnQKICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0CiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3QKICAgICAqLwogICAgY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEoJ3Bvc3QnLCAncHV0Jyk7CgogICAgICAgIC8qKgogICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAgICAgICAqIEBuYW1lIG5nLiRodHRwI2RlZmF1bHRzCiAgICAgICAgICogQHByb3BlcnR5T2YgbmcuJGh0dHAKICAgICAgICAgKgogICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAqIFJ1bnRpbWUgZXF1aXZhbGVudCBvZiB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHNgIHByb3BlcnR5LiBBbGxvd3MgY29uZmlndXJhdGlvbiBvZgogICAgICAgICAqIGRlZmF1bHQgaGVhZGVycyBhcyB3ZWxsIGFzIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucy4KICAgICAgICAgKgogICAgICAgICAqIFNlZSAiU2V0dGluZyBIVFRQIEhlYWRlcnMiIGFuZCAiVHJhbnNmb3JtaW5nIFJlcXVlc3RzIGFuZCBSZXNwb25zZXMiIHNlY3Rpb25zIGFib3ZlLgogICAgICAgICAqLwogICAgJGh0dHAuZGVmYXVsdHMgPSAkY29uZmlnOwoKCiAgICByZXR1cm4gJGh0dHA7CgoKICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kcyhuYW1lcykgewogICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkgewogICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHsKICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoY29uZmlnIHx8IHt9LCB7CiAgICAgICAgICAgIG1ldGhvZDogbmFtZSwKICAgICAgICAgICAgdXJsOiB1cmwKICAgICAgICAgIH0pKTsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCgogICAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEobmFtZSkgewogICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkgewogICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHsKICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoY29uZmlnIHx8IHt9LCB7CiAgICAgICAgICAgIG1ldGhvZDogbmFtZSwKICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgIH0pKTsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBNYWtlcyB0aGUgcmVxdWVzdAogICAgICoKICAgICAqICEhISBBQ0NFU1NFUyBDTE9TVVJFIFZBUlM6CiAgICAgKiAkaHR0cEJhY2tlbmQsICRjb25maWcsICRsb2csICRyb290U2NvcGUsIGRlZmF1bHRDYWNoZSwgJGh0dHAucGVuZGluZ1JlcXVlc3RzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhLCByZXFIZWFkZXJzKSB7CiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCksCiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSwKICAgICAgICAgIGNhY2hlLAogICAgICAgICAgY2FjaGVkUmVzcCwKICAgICAgICAgIHVybCA9IGJ1aWxkVXJsKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMpOwoKICAgICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzLnB1c2goY29uZmlnKTsKICAgICAgcHJvbWlzZS50aGVuKHJlbW92ZVBlbmRpbmdSZXEsIHJlbW92ZVBlbmRpbmdSZXEpOwoKCiAgICAgIGlmIChjb25maWcuY2FjaGUgJiYgY29uZmlnLm1ldGhvZCA9PSAnR0VUJykgewogICAgICAgIGNhY2hlID0gaXNPYmplY3QoY29uZmlnLmNhY2hlKSA/IGNvbmZpZy5jYWNoZSA6IGRlZmF1bHRDYWNoZTsKICAgICAgfQoKICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgY2FjaGVkUmVzcCA9IGNhY2hlLmdldCh1cmwpOwogICAgICAgIGlmIChjYWNoZWRSZXNwKSB7CiAgICAgICAgICBpZiAoY2FjaGVkUmVzcC50aGVuKSB7CiAgICAgICAgICAgIC8vIGNhY2hlZCByZXF1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCwgYnV0IHRoZXJlIGlzIG5vIHJlc3BvbnNlIHlldAogICAgICAgICAgICBjYWNoZWRSZXNwLnRoZW4ocmVtb3ZlUGVuZGluZ1JlcSwgcmVtb3ZlUGVuZGluZ1JlcSk7CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRSZXNwOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gc2VydmluZyBmcm9tIGNhY2hlCiAgICAgICAgICAgIGlmIChpc0FycmF5KGNhY2hlZFJlc3ApKSB7CiAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UoY2FjaGVkUmVzcFsxXSwgY2FjaGVkUmVzcFswXSwgY29weShjYWNoZWRSZXNwWzJdKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UoY2FjaGVkUmVzcCwgMjAwLCB7fSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gcHV0IHRoZSBwcm9taXNlIGZvciB0aGUgbm9uLXRyYW5zZm9ybWVkIHJlc3BvbnNlIGludG8gY2FjaGUgYXMgYSBwbGFjZWhvbGRlcgogICAgICAgICAgY2FjaGUucHV0KHVybCwgcHJvbWlzZSk7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBpZiB3ZSB3b24ndCBoYXZlIHRoZSByZXNwb25zZSBpbiBjYWNoZSwgc2VuZCB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZAogICAgICBpZiAoIWNhY2hlZFJlc3ApIHsKICAgICAgICAkaHR0cEJhY2tlbmQoY29uZmlnLm1ldGhvZCwgdXJsLCByZXFEYXRhLCBkb25lLCByZXFIZWFkZXJzLCBjb25maWcudGltZW91dCwKICAgICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBwcm9taXNlOwoKCiAgICAgIC8qKgogICAgICAgKiBDYWxsYmFjayByZWdpc3RlcmVkIHRvICRodHRwQmFja2VuZCgpOgogICAgICAgKiAgLSBjYWNoZXMgdGhlIHJlc3BvbnNlIGlmIGRlc2lyZWQKICAgICAgICogIC0gcmVzb2x2ZXMgdGhlIHJhdyAkaHR0cCBwcm9taXNlCiAgICAgICAqICAtIGNhbGxzICRhcHBseQogICAgICAgKi8KICAgICAgZnVuY3Rpb24gZG9uZShzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nKSB7CiAgICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgICBpZiAoaXNTdWNjZXNzKHN0YXR1cykpIHsKICAgICAgICAgICAgY2FjaGUucHV0KHVybCwgW3N0YXR1cywgcmVzcG9uc2UsIHBhcnNlSGVhZGVycyhoZWFkZXJzU3RyaW5nKV0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gcmVtb3ZlIHByb21pc2UgZnJvbSB0aGUgY2FjaGUKICAgICAgICAgICAgY2FjaGUucmVtb3ZlKHVybCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzU3RyaW5nKTsKICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSgpOwogICAgICB9CgoKICAgICAgLyoqCiAgICAgICAqIFJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZS4KICAgICAgICovCiAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHsKICAgICAgICAvLyBub3JtYWxpemUgaW50ZXJuYWwgc3RhdHVzZXMgdG8gMAogICAgICAgIHN0YXR1cyA9IE1hdGgubWF4KHN0YXR1cywgMCk7CgogICAgICAgIChpc1N1Y2Nlc3Moc3RhdHVzKSA/IGRlZmVycmVkLnJlc29sdmUgOiBkZWZlcnJlZC5yZWplY3QpKHsKICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLAogICAgICAgICAgc3RhdHVzOiBzdGF0dXMsCiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLAogICAgICAgICAgY29uZmlnOiBjb25maWcKICAgICAgICB9KTsKICAgICAgfQoKCiAgICAgIGZ1bmN0aW9uIHJlbW92ZVBlbmRpbmdSZXEoKSB7CiAgICAgICAgdmFyIGlkeCA9IGluZGV4T2YoJGh0dHAucGVuZGluZ1JlcXVlc3RzLCBjb25maWcpOwogICAgICAgIGlmIChpZHggIT09IC0xKSAkaHR0cC5wZW5kaW5nUmVxdWVzdHMuc3BsaWNlKGlkeCwgMSk7CiAgICAgIH0KICAgIH0KCgogICAgZnVuY3Rpb24gYnVpbGRVcmwodXJsLCBwYXJhbXMpIHsKICAgICAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gdXJsOwogICAgICAgICAgdmFyIHBhcnRzID0gW107CiAgICAgICAgICBmb3JFYWNoU29ydGVkKHBhcmFtcywgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PSB1bmRlZmluZWQpIHJldHVybjsKICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkgewogICAgICAgICAgICAgIHZhbHVlID0gdG9Kc29uKHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiB1cmwgKyAoKHVybC5pbmRleE9mKCc/JykgPT0gLTEpID8gJz8nIDogJyYnKSArIHBhcnRzLmpvaW4oJyYnKTsKICAgICAgICB9CgoKICB9XTsKfQp2YXIgWEhSID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0IHx8IGZ1bmN0aW9uKCkgewogIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTXN4bWwyLlhNTEhUVFAuNi4wIik7IH0gY2F0Y2ggKGUxKSB7fQogIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTXN4bWwyLlhNTEhUVFAuMy4wIik7IH0gY2F0Y2ggKGUyKSB7fQogIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTXN4bWwyLlhNTEhUVFAiKTsgfSBjYXRjaCAoZTMpIHt9CiAgdGhyb3cgbmV3IEVycm9yKCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdC4iKTsKfTsKCgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kaHR0cEJhY2tlbmQKICogQHJlcXVpcmVzICRicm93c2VyCiAqIEByZXF1aXJlcyAkd2luZG93CiAqIEByZXF1aXJlcyAkZG9jdW1lbnQKICoKICogQGRlc2NyaXB0aW9uCiAqIEhUVFAgYmFja2VuZCB1c2VkIGJ5IHRoZSB7QGxpbmsgbmcuJGh0dHAgc2VydmljZX0gdGhhdCBkZWxlZ2F0ZXMgdG8KICogWE1MSHR0cFJlcXVlc3Qgb2JqZWN0IG9yIEpTT05QIGFuZCBkZWFscyB3aXRoIGJyb3dzZXIgaW5jb21wYXRpYmlsaXRpZXMuCiAqCiAqIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byB1c2UgdGhpcyBzZXJ2aWNlIGRpcmVjdGx5LCBpbnN0ZWFkIHVzZSB0aGUgaGlnaGVyLWxldmVsIGFic3RyYWN0aW9uczoKICoge0BsaW5rIG5nLiRodHRwICRodHRwfSBvciB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2UgJHJlc291cmNlfS4KICoKICogRHVyaW5nIHRlc3RpbmcgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBzd2FwcGVkIHdpdGgge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgbW9jawogKiAkaHR0cEJhY2tlbmR9IHdoaWNoIGNhbiBiZSB0cmFpbmVkIHdpdGggcmVzcG9uc2VzLgogKi8KZnVuY3Rpb24gJEh0dHBCYWNrZW5kUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckd2luZG93JywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRicm93c2VyLCAkd2luZG93LCAkZG9jdW1lbnQpIHsKICAgIHJldHVybiBjcmVhdGVIdHRwQmFja2VuZCgkYnJvd3NlciwgWEhSLCAkYnJvd3Nlci5kZWZlciwgJHdpbmRvdy5hbmd1bGFyLmNhbGxiYWNrcywKICAgICAgICAkZG9jdW1lbnRbMF0sICR3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wucmVwbGFjZSgnOicsICcnKSk7CiAgfV07Cn0KCmZ1bmN0aW9uIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCBYSFIsICRicm93c2VyRGVmZXIsIGNhbGxiYWNrcywgcmF3RG9jdW1lbnQsIGxvY2F0aW9uUHJvdG9jb2wpIHsKICAvLyBUT0RPKHZvanRhKTogZml4IHRoZSBzaWduYXR1cmUKICByZXR1cm4gZnVuY3Rpb24obWV0aG9kLCB1cmwsIHBvc3QsIGNhbGxiYWNrLCBoZWFkZXJzLCB0aW1lb3V0LCB3aXRoQ3JlZGVudGlhbHMpIHsKICAgICRicm93c2VyLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQoKTsKICAgIHVybCA9IHVybCB8fCAkYnJvd3Nlci51cmwoKTsKCiAgICBpZiAobG93ZXJjYXNlKG1ldGhvZCkgPT0gJ2pzb25wJykgewogICAgICB2YXIgY2FsbGJhY2tJZCA9ICdfJyArIChjYWxsYmFja3MuY291bnRlcisrKS50b1N0cmluZygzNik7CiAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXSA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSA9IGRhdGE7CiAgICAgIH07CgogICAgICBqc29ucFJlcSh1cmwucmVwbGFjZSgnSlNPTl9DQUxMQkFDSycsICdhbmd1bGFyLmNhbGxiYWNrcy4nICsgY2FsbGJhY2tJZCksCiAgICAgICAgICBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmRhdGEpIHsKICAgICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgMjAwLCBjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTIpOwogICAgICAgIH0KICAgICAgICBkZWxldGUgY2FsbGJhY2tzW2NhbGxiYWNrSWRdOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciB4aHIgPSBuZXcgWEhSKCk7CiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTsKICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgICAgaWYgKHZhbHVlKSB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTsKICAgICAgfSk7CgogICAgICB2YXIgc3RhdHVzOwoKICAgICAgLy8gSW4gSUU2IGFuZCA3LCB0aGlzIG1pZ2h0IGJlIGNhbGxlZCBzeW5jaHJvbm91c2x5IHdoZW4geGhyLnNlbmQgYmVsb3cgaXMgY2FsbGVkIGFuZCB0aGUKICAgICAgLy8gcmVzcG9uc2UgaXMgaW4gdGhlIGNhY2hlLiB0aGUgcHJvbWlzZSBhcGkgd2lsbCBlbnN1cmUgdGhhdCB0byB0aGUgYXBwIGNvZGUgdGhlIGFwaSBpcwogICAgICAvLyBhbHdheXMgYXN5bmMKICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PSA0KSB7CiAgICAgICAgICBjb21wbGV0ZVJlcXVlc3QoCiAgICAgICAgICAgICAgY2FsbGJhY2ssIHN0YXR1cyB8fCB4aHIuc3RhdHVzLCB4aHIucmVzcG9uc2VUZXh0LCB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHsKICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTsKICAgICAgfQoKICAgICAgeGhyLnNlbmQocG9zdCB8fCAnJyk7CgogICAgICBpZiAodGltZW91dCA+IDApIHsKICAgICAgICAkYnJvd3NlckRlZmVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgc3RhdHVzID0gLTE7CiAgICAgICAgICB4aHIuYWJvcnQoKTsKICAgICAgICB9LCB0aW1lb3V0KTsKICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcpIHsKICAgICAgLy8gVVJMX01BVENIIGlzIGRlZmluZWQgaW4gc3JjL3NlcnZpY2UvbG9jYXRpb24uanMKICAgICAgdmFyIHByb3RvY29sID0gKHVybC5tYXRjaChVUkxfTUFUQ0gpIHx8IFsnJywgbG9jYXRpb25Qcm90b2NvbF0pWzFdOwoKICAgICAgLy8gZml4IHN0YXR1cyBjb2RlIGZvciBmaWxlIHByb3RvY29sIChpdCdzIGFsd2F5cyAwKQogICAgICBzdGF0dXMgPSAocHJvdG9jb2wgPT0gJ2ZpbGUnKSA/IChyZXNwb25zZSA/IDIwMCA6IDQwNCkgOiBzdGF0dXM7CgogICAgICAvLyBub3JtYWxpemUgSUUgYnVnIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwKQogICAgICBzdGF0dXMgPSBzdGF0dXMgPT0gMTIyMyA/IDIwNCA6IHN0YXR1czsKCiAgICAgIGNhbGxiYWNrKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcpOwogICAgICAkYnJvd3Nlci4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApOwogICAgfQogIH07CgogIGZ1bmN0aW9uIGpzb25wUmVxKHVybCwgZG9uZSkgewogICAgLy8gd2UgY2FuJ3QgdXNlIGpRdWVyeS9qcUxpdGUgaGVyZSBiZWNhdXNlIGpRdWVyeSBkb2VzIGNyYXp5IHNoaXQgd2l0aCBzY3JpcHQgZWxlbWVudHMsIGUuZy46CiAgICAvLyAtIGZldGNoZXMgbG9jYWwgc2NyaXB0cyB2aWEgWEhSIGFuZCBldmFscyB0aGVtCiAgICAvLyAtIGFkZHMgYW5kIGltbWVkaWF0ZWx5IHJlbW92ZXMgc2NyaXB0IGVsZW1lbnRzIGZyb20gdGhlIGRvY3VtZW50CiAgICB2YXIgc2NyaXB0ID0gcmF3RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksCiAgICAgICAgZG9uZVdyYXBwZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHJhd0RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2NyaXB0KTsKICAgICAgICAgIGlmIChkb25lKSBkb25lKCk7CiAgICAgICAgfTsKCiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgc2NyaXB0LnNyYyA9IHVybDsKCiAgICBpZiAobXNpZSkgewogICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKC9sb2FkZWR8Y29tcGxldGUvLnRlc3Qoc2NyaXB0LnJlYWR5U3RhdGUpKSBkb25lV3JhcHBlcigpOwogICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbmVycm9yID0gZG9uZVdyYXBwZXI7CiAgICB9CgogICAgcmF3RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOwogIH0KfQoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJGxvY2FsZQogKgogKiBAZGVzY3JpcHRpb24KICogJGxvY2FsZSBzZXJ2aWNlIHByb3ZpZGVzIGxvY2FsaXphdGlvbiBydWxlcyBmb3IgdmFyaW91cyBBbmd1bGFyIGNvbXBvbmVudHMuIEFzIG9mIHJpZ2h0IG5vdyB0aGUKICogb25seSBwdWJsaWMgYXBpIGlzOgogKgogKiAqIGBpZGAg4oCTIGB7c3RyaW5nfWAg4oCTIGxvY2FsZSBpZCBmb3JtYXR0ZWQgYXMgYGxhbmd1YWdlSWQtY291bnRyeUlkYCAoZS5nLiBgZW4tdXNgKQogKi8KZnVuY3Rpb24gJExvY2FsZVByb3ZpZGVyKCl7CiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBpZDogJ2VuLXVzJywKCiAgICAgIE5VTUJFUl9GT1JNQVRTOiB7CiAgICAgICAgREVDSU1BTF9TRVA6ICcuJywKICAgICAgICBHUk9VUF9TRVA6ICcsJywKICAgICAgICBQQVRURVJOUzogWwogICAgICAgICAgeyAvLyBEZWNpbWFsIFBhdHRlcm4KICAgICAgICAgICAgbWluSW50OiAxLAogICAgICAgICAgICBtaW5GcmFjOiAwLAogICAgICAgICAgICBtYXhGcmFjOiAzLAogICAgICAgICAgICBwb3NQcmU6ICcnLAogICAgICAgICAgICBwb3NTdWY6ICcnLAogICAgICAgICAgICBuZWdQcmU6ICctJywKICAgICAgICAgICAgbmVnU3VmOiAnJywKICAgICAgICAgICAgZ1NpemU6IDMsCiAgICAgICAgICAgIGxnU2l6ZTogMwogICAgICAgICAgfSx7IC8vQ3VycmVuY3kgUGF0dGVybgogICAgICAgICAgICBtaW5JbnQ6IDEsCiAgICAgICAgICAgIG1pbkZyYWM6IDIsCiAgICAgICAgICAgIG1heEZyYWM6IDIsCiAgICAgICAgICAgIHBvc1ByZTogJ1x1MDBBNCcsCiAgICAgICAgICAgIHBvc1N1ZjogJycsCiAgICAgICAgICAgIG5lZ1ByZTogJyhcdTAwQTQnLAogICAgICAgICAgICBuZWdTdWY6ICcpJywKICAgICAgICAgICAgZ1NpemU6IDMsCiAgICAgICAgICAgIGxnU2l6ZTogMwogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgQ1VSUkVOQ1lfU1lNOiAnJCcKICAgICAgfSwKCiAgICAgIERBVEVUSU1FX0ZPUk1BVFM6IHsKICAgICAgICBNT05USDogJ0phbnVhcnksRmVicnVhcnksTWFyY2gsQXByaWwsTWF5LEp1bmUsSnVseSxBdWd1c3QsU2VwdGVtYmVyLE9jdG9iZXIsTm92ZW1iZXIsRGVjZW1iZXInCiAgICAgICAgICAgICAgICAuc3BsaXQoJywnKSwKICAgICAgICBTSE9SVE1PTlRIOiAgJ0phbixGZWIsTWFyLEFwcixNYXksSnVuLEp1bCxBdWcsU2VwLE9jdCxOb3YsRGVjJy5zcGxpdCgnLCcpLAogICAgICAgIERBWTogJ1N1bmRheSxNb25kYXksVHVlc2RheSxXZWRuZXNkYXksVGh1cnNkYXksRnJpZGF5LFNhdHVyZGF5Jy5zcGxpdCgnLCcpLAogICAgICAgIFNIT1JUREFZOiAnU3VuLE1vbixUdWUsV2VkLFRodSxGcmksU2F0Jy5zcGxpdCgnLCcpLAogICAgICAgIEFNUE1TOiBbJ0FNJywnUE0nXSwKICAgICAgICBtZWRpdW06ICdNTU0gZCwgeSBoOm1tOnNzIGEnLAogICAgICAgIHNob3J0OiAnTS9kL3l5IGg6bW0gYScsCiAgICAgICAgZnVsbERhdGU6ICdFRUVFLCBNTU1NIGQsIHknLAogICAgICAgIGxvbmdEYXRlOiAnTU1NTSBkLCB5JywKICAgICAgICBtZWRpdW1EYXRlOiAnTU1NIGQsIHknLAogICAgICAgIHNob3J0RGF0ZTogJ00vZC95eScsCiAgICAgICAgbWVkaXVtVGltZTogJ2g6bW06c3MgYScsCiAgICAgICAgc2hvcnRUaW1lOiAnaDptbSBhJwogICAgICB9LAoKICAgICAgcGx1cmFsQ2F0OiBmdW5jdGlvbihudW0pIHsKICAgICAgICBpZiAobnVtID09PSAxKSB7CiAgICAgICAgICByZXR1cm4gJ29uZSc7CiAgICAgICAgfQogICAgICAgIHJldHVybiAnb3RoZXInOwogICAgICB9CiAgICB9OwogIH07Cn0KCmZ1bmN0aW9uICRUaW1lb3V0UHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRxJywgJyRleGNlcHRpb25IYW5kbGVyJywKICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJHEsICAgJGV4Y2VwdGlvbkhhbmRsZXIpIHsKICAgIHZhciBkZWZlcnJlZHMgPSB7fTsKCgogICAgIC8qKgogICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAqIEBuYW1lIG5nLiR0aW1lb3V0CiAgICAgICogQHJlcXVpcmVzICRicm93c2VyCiAgICAgICoKICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgKiBBbmd1bGFyJ3Mgd3JhcHBlciBmb3IgYHdpbmRvdy5zZXRUaW1lb3V0YC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgd3JhcHBlZCBpbnRvIGEgdHJ5L2NhdGNoCiAgICAgICogYmxvY2sgYW5kIGRlbGVnYXRlcyBhbnkgZXhjZXB0aW9ucyB0bwogICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS4KICAgICAgKgogICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYSB0aW1lb3V0IGZ1bmN0aW9uIGlzIGEgcHJvbWlzZSB3aGljaCB3aWxsIGJlIHJlc29sdmVkIHdoZW4KICAgICAgKiB0aGUgdGltZW91dCBpcyByZWFjaGVkIGFuZCB0aGUgdGltZW91dCBmdW5jdGlvbiBpcyBleGVjdXRlZC4KICAgICAgKgogICAgICAqIFRvIGNhbmNlbCBhIHRoZSB0aW1lb3V0IHJlcXVlc3QsIGNhbGwgYCR0aW1lb3V0LmNhbmNlbChwcm9taXNlKWAuCiAgICAgICoKICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiR0aW1lb3V0IGAkdGltZW91dC5mbHVzaCgpYH0gdG8KICAgICAgKiBzeW5jaHJvbm91c2x5IGZsdXNoIHRoZSBxdWV1ZSBvZiBkZWZlcnJlZCBmdW5jdGlvbnMuCiAgICAgICoKICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdobydzIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVsYXllZC4KICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBEZWxheSBpbiBtaWxsaXNlY29uZHMuCiAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBmYWxzZSBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlCiAgICAgICogICB3aWxsIGludm9rZSBgZm5gIHdpdGhpbiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseX0gYmxvY2suCiAgICAgICogQHJldHVybnMgeyp9IFByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdoZW4gdGhlIHRpbWVvdXQgaXMgcmVhY2hlZC4gVGhlIHZhbHVlIHRoaXMKICAgICAgKiAgIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoIGlzIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBmbmAgZnVuY3Rpb24uCiAgICAgICovCiAgICBmdW5jdGlvbiB0aW1lb3V0KGZuLCBkZWxheSwgaW52b2tlQXBwbHkpIHsKICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKSwKICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLAogICAgICAgICAgc2tpcEFwcGx5ID0gKGlzRGVmaW5lZChpbnZva2VBcHBseSkgJiYgIWludm9rZUFwcGx5KSwKICAgICAgICAgIHRpbWVvdXRJZCwgY2xlYW51cDsKCiAgICAgIHRpbWVvdXRJZCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGZuKCkpOwogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpOwogICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTsKICAgICAgfSwgZGVsYXkpOwoKICAgICAgY2xlYW51cCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07CiAgICAgIH07CgogICAgICBwcm9taXNlLiQkdGltZW91dElkID0gdGltZW91dElkOwogICAgICBkZWZlcnJlZHNbdGltZW91dElkXSA9IGRlZmVycmVkOwogICAgICBwcm9taXNlLnRoZW4oY2xlYW51cCwgY2xlYW51cCk7CgogICAgICByZXR1cm4gcHJvbWlzZTsKICAgIH0KCgogICAgIC8qKgogICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAqIEBuYW1lIG5nLiR0aW1lb3V0I2NhbmNlbAogICAgICAqIEBtZXRob2RPZiBuZy4kdGltZW91dAogICAgICAqCiAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuIEFzIGEgcmVzdWx0IG9mIHRoaXMgdGhlIHByb21pc2Ugd2lsbCBiZQogICAgICAqIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uCiAgICAgICoKICAgICAgKiBAcGFyYW0ge1Byb21pc2U9fSBwcm9taXNlIFByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGAkdGltZW91dGAgZnVuY3Rpb24uCiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHkKICAgICAgKiAgIGNhbmNlbGVkLgogICAgICAqLwogICAgdGltZW91dC5jYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlKSB7CiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCR0aW1lb3V0SWQgaW4gZGVmZXJyZWRzKSB7CiAgICAgICAgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdLnJlamVjdCgnY2FuY2VsZWQnKTsKICAgICAgICByZXR1cm4gJGJyb3dzZXIuZGVmZXIuY2FuY2VsKHByb21pc2UuJCR0aW1lb3V0SWQpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH07CgogICAgcmV0dXJuIHRpbWVvdXQ7CiAgfV07Cn0KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRmaWx0ZXJQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICoKICogRmlsdGVycyBhcmUganVzdCBmdW5jdGlvbnMgd2hpY2ggdHJhbnNmb3JtIGlucHV0IHRvIGFuIG91dHB1dC4gSG93ZXZlciBmaWx0ZXJzIG5lZWQgdG8gYmUgRGVwZW5kZW5jeSBJbmplY3RlZC4gVG8KICogYWNoaWV2ZSB0aGlzIGEgZmlsdGVyIGRlZmluaXRpb24gY29uc2lzdHMgb2YgYSBmYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIGlzIGFubm90YXRlZCB3aXRoIGRlcGVuZGVuY2llcyBhbmQgaXMKICogcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIGEgdGhlIGZpbHRlciBmdW5jdGlvbi4KICoKICogPHByZT4KICogICAvLyBGaWx0ZXIgcmVnaXN0cmF0aW9uCiAqICAgZnVuY3Rpb24gTXlNb2R1bGUoJHByb3ZpZGUsICRmaWx0ZXJQcm92aWRlcikgewogKiAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBpbmplY3Rpb24gKG5vdCBhbHdheXMgbmVlZGVkKQogKiAgICAgJHByb3ZpZGUudmFsdWUoJ2dyZWV0JywgZnVuY3Rpb24obmFtZSl7CiAqICAgICAgIHJldHVybiAnSGVsbG8gJyArIG5hbWUgKyAnISc7CiAqICAgICB9KTsKICoKICogICAgIC8vIHJlZ2lzdGVyIGEgZmlsdGVyIGZhY3Rvcnkgd2hpY2ggdXNlcyB0aGUKICogICAgIC8vIGdyZWV0IHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgREkuCiAqICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ2dyZWV0JywgZnVuY3Rpb24oZ3JlZXQpewogKiAgICAgICAvLyByZXR1cm4gdGhlIGZpbHRlciBmdW5jdGlvbiB3aGljaCB1c2VzIHRoZSBncmVldCBzZXJ2aWNlCiAqICAgICAgIC8vIHRvIGdlbmVyYXRlIHNhbHV0YXRpb24KICogICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRleHQpIHsKICogICAgICAgICAvLyBmaWx0ZXJzIG5lZWQgdG8gYmUgZm9yZ2l2aW5nIHNvIGNoZWNrIGlucHV0IHZhbGlkaXR5CiAqICAgICAgICAgcmV0dXJuIHRleHQgJiYgZ3JlZXQodGV4dCkgfHwgdGV4dDsKICogICAgICAgfTsKICogICAgIH0pOwogKiAgIH0KICogPC9wcmU+CiAqCiAqIFRoZSBmaWx0ZXIgZnVuY3Rpb24gaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGluamVjdG9yYCB1bmRlciB0aGUgZmlsdGVyIG5hbWUgc3VmZml4ZSB3aXRoIGBGaWx0ZXJgLgogKiA8cHJlPgogKiAgIGl0KCdzaG91bGQgYmUgdGhlIHNhbWUgaW5zdGFuY2UnLCBpbmplY3QoCiAqICAgICBmdW5jdGlvbigkZmlsdGVyUHJvdmlkZXIpIHsKICogICAgICAgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCdyZXZlcnNlJywgZnVuY3Rpb24oKXsKICogICAgICAgICByZXR1cm4gLi4uOwogKiAgICAgICB9KTsKICogICAgIH0sCiAqICAgICBmdW5jdGlvbigkZmlsdGVyLCByZXZlcnNlRmlsdGVyKSB7CiAqICAgICAgIGV4cGVjdCgkZmlsdGVyKCdyZXZlcnNlJykpLnRvQmUocmV2ZXJzZUZpbHRlcik7CiAqICAgICB9KTsKICogPC9wcmU+CiAqCiAqCiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGhvdyBhbmd1bGFyIGZpbHRlcnMgd29yaywgYW5kIGhvdyB0byBjcmVhdGUgeW91ciBvd24gZmlsdGVycywgc2VlCiAqIHtAbGluayBndWlkZS9kZXZfZ3VpZGUudGVtcGxhdGVzLmZpbHRlcnMgVW5kZXJzdGFuZGluZyBBbmd1bGFyIEZpbHRlcnN9IGluIHRoZSBhbmd1bGFyIERldmVsb3BlcgogKiBHdWlkZS4KICovCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIG5nLiRmaWx0ZXJQcm92aWRlciNyZWdpc3RlcgogKiBAbWV0aG9kT2YgbmcuJGZpbHRlclByb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKiBSZWdpc3RlciBmaWx0ZXIgZmFjdG9yeSBmdW5jdGlvbi4KICoKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyLgogKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBUaGUgZmlsdGVyIGZhY3RvcnkgZnVuY3Rpb24gd2hpY2ggaXMgaW5qZWN0YWJsZS4KICovCgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBuZy4kZmlsdGVyCiAqIEBmdW5jdGlvbgogKiBAZGVzY3JpcHRpb24KICogRmlsdGVycyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyBkYXRhIGRpc3BsYXllZCB0byB0aGUgdXNlci4KICoKICogVGhlIGdlbmVyYWwgc3ludGF4IGluIHRlbXBsYXRlcyBpcyBhcyBmb2xsb3dzOgogKgogKiAgICAgICAgIHt7IGV4cHJlc3Npb24gfCBbIGZpbHRlcl9uYW1lIF0gfX0KICoKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyIGZ1bmN0aW9uIHRvIHJldHJpZXZlCiAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgZmlsdGVyIGZ1bmN0aW9uCiAqLwokRmlsdGVyUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnXTsKZnVuY3Rpb24gJEZpbHRlclByb3ZpZGVyKCRwcm92aWRlKSB7CiAgdmFyIHN1ZmZpeCA9ICdGaWx0ZXInOwoKICBmdW5jdGlvbiByZWdpc3RlcihuYW1lLCBmYWN0b3J5KSB7CiAgICByZXR1cm4gJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgc3VmZml4LCBmYWN0b3J5KTsKICB9CiAgdGhpcy5yZWdpc3RlciA9IHJlZ2lzdGVyOwoKICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3RvcikgewogICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgcmV0dXJuICRpbmplY3Rvci5nZXQobmFtZSArIHN1ZmZpeCk7CiAgICB9CiAgfV07CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgcmVnaXN0ZXIoJ2N1cnJlbmN5JywgY3VycmVuY3lGaWx0ZXIpOwogIHJlZ2lzdGVyKCdkYXRlJywgZGF0ZUZpbHRlcik7CiAgcmVnaXN0ZXIoJ2ZpbHRlcicsIGZpbHRlckZpbHRlcik7CiAgcmVnaXN0ZXIoJ2pzb24nLCBqc29uRmlsdGVyKTsKICByZWdpc3RlcignbGltaXRUbycsIGxpbWl0VG9GaWx0ZXIpOwogIHJlZ2lzdGVyKCdsb3dlcmNhc2UnLCBsb3dlcmNhc2VGaWx0ZXIpOwogIHJlZ2lzdGVyKCdudW1iZXInLCBudW1iZXJGaWx0ZXIpOwogIHJlZ2lzdGVyKCdvcmRlckJ5Jywgb3JkZXJCeUZpbHRlcik7CiAgcmVnaXN0ZXIoJ3VwcGVyY2FzZScsIHVwcGVyY2FzZUZpbHRlcik7Cn0KCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG5nLmZpbHRlcjpmaWx0ZXIKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTZWxlY3RzIGEgc3Vic2V0IG9mIGl0ZW1zIGZyb20gYGFycmF5YCBhbmQgcmV0dXJucyBpdCBhcyBhIG5ldyBhcnJheS4KICoKICogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGF1Z21lbnQgdGhlIGBBcnJheWAgdHlwZSBpbiBBbmd1bGFyIGV4cHJlc3Npb25zLiBTZWUKICoge0BsaW5rIG5nLiRmaWx0ZXJ9IGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IEFuZ3VsYXIgYXJyYXlzLgogKgogKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc291cmNlIGFycmF5LgogKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R8ZnVuY3Rpb24oKX0gZXhwcmVzc2lvbiBUaGUgcHJlZGljYXRlIHRvIGJlIHVzZWQgZm9yIHNlbGVjdGluZyBpdGVtcyBmcm9tCiAqICAgYGFycmF5YC4KICoKICogICBDYW4gYmUgb25lIG9mOgogKgogKiAgIC0gYHN0cmluZ2A6IFByZWRpY2F0ZSB0aGF0IHJlc3VsdHMgaW4gYSBzdWJzdHJpbmcgbWF0Y2ggdXNpbmcgdGhlIHZhbHVlIG9mIGBleHByZXNzaW9uYAogKiAgICAgc3RyaW5nLiBBbGwgc3RyaW5ncyBvciBvYmplY3RzIHdpdGggc3RyaW5nIHByb3BlcnRpZXMgaW4gYGFycmF5YCB0aGF0IGNvbnRhaW4gdGhpcyBzdHJpbmcKICogICAgIHdpbGwgYmUgcmV0dXJuZWQuIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nIHRoZSBzdHJpbmcgd2l0aCBgIWAuCiAqCiAqICAgLSBgT2JqZWN0YDogQSBwYXR0ZXJuIG9iamVjdCBjYW4gYmUgdXNlZCB0byBmaWx0ZXIgc3BlY2lmaWMgcHJvcGVydGllcyBvbiBvYmplY3RzIGNvbnRhaW5lZAogKiAgICAgYnkgYGFycmF5YC4gRm9yIGV4YW1wbGUgYHtuYW1lOiJNIiwgcGhvbmU6IjEifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zCiAqICAgICB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYCBjb250YWluaW5nICJNIiBhbmQgcHJvcGVydHkgYHBob25lYCBjb250YWluaW5nICIxIi4gQSBzcGVjaWFsCiAqICAgICBwcm9wZXJ0eSBuYW1lIGAkYCBjYW4gYmUgdXNlZCAoYXMgaW4gYHskOiJ0ZXh0In1gKSB0byBhY2NlcHQgYSBtYXRjaCBhZ2FpbnN0IGFueQogKiAgICAgcHJvcGVydHkgb2YgdGhlIG9iamVjdC4gVGhhdCdzIGVxdWl2YWxlbnQgdG8gdGhlIHNpbXBsZSBzdWJzdHJpbmcgbWF0Y2ggd2l0aCBhIGBzdHJpbmdgCiAqICAgICBhcyBkZXNjcmliZWQgYWJvdmUuCiAqCiAqICAgLSBgZnVuY3Rpb25gOiBBIHByZWRpY2F0ZSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byB3cml0ZSBhcmJpdHJhcnkgZmlsdGVycy4gVGhlIGZ1bmN0aW9uIGlzCiAqICAgICBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgLiBUaGUgZmluYWwgcmVzdWx0IGlzIGFuIGFycmF5IG9mIHRob3NlIGVsZW1lbnRzIHRoYXQKICogICAgIHRoZSBwcmVkaWNhdGUgcmV0dXJuZWQgdHJ1ZSBmb3IuCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxkaXYgbmctaW5pdD0iZnJpZW5kcyA9IFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTI3Nid9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzgwMC1CSUctTUFSWSd9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJ30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0FkYW0nLCBwaG9uZTonNTU1LTU2NzgnfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnfV0iPjwvZGl2PgoKICAgICAgIFNlYXJjaDogPGlucHV0IG5nLW1vZGVsPSJzZWFyY2hUZXh0Ij4KICAgICAgIDx0YWJsZSBpZD0ic2VhcmNoVGV4dFJlc3VsdHMiPgogICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PHRyPgogICAgICAgICA8dHIgbmctcmVwZWF0PSJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2hUZXh0Ij4KICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD4KICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+CiAgICAgICAgIDx0cj4KICAgICAgIDwvdGFibGU+CiAgICAgICA8aHI+CiAgICAgICBBbnk6IDxpbnB1dCBuZy1tb2RlbD0ic2VhcmNoLiQiPiA8YnI+CiAgICAgICBOYW1lIG9ubHkgPGlucHV0IG5nLW1vZGVsPSJzZWFyY2gubmFtZSI+PGJyPgogICAgICAgUGhvbmUgb25seSA8aW5wdXQgbmctbW9kZWw9InNlYXJjaC5waG9uZSLDpT48YnI+CiAgICAgICA8dGFibGUgaWQ9InNlYXJjaE9ialJlc3VsdHMiPgogICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PHRyPgogICAgICAgICA8dHIgbmctcmVwZWF0PSJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2giPgogICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPgogICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD4KICAgICAgICAgPHRyPgogICAgICAgPC90YWJsZT4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgc2VhcmNoIGFjcm9zcyBhbGwgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBzdHJpbmcnLCBmdW5jdGlvbigpIHsKICAgICAgICAgaW5wdXQoJ3NlYXJjaFRleHQnKS5lbnRlcignbScpOwogICAgICAgICBleHBlY3QocmVwZWF0ZXIoJyNzZWFyY2hUZXh0UmVzdWx0cyB0cicsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJ01hcnknLCAnTWlrZScsICdBZGFtJ10pOwoKICAgICAgICAgaW5wdXQoJ3NlYXJjaFRleHQnKS5lbnRlcignNzYnKTsKICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCcjc2VhcmNoVGV4dFJlc3VsdHMgdHInLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLgogICAgICAgICAgIHRvRXF1YWwoWydKb2huJywgJ0p1bGllJ10pOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggaW4gc3BlY2lmaWMgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBwcmVkaWNhdGUgb2JqZWN0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGlucHV0KCdzZWFyY2guJCcpLmVudGVyKCdpJyk7CiAgICAgICAgIGV4cGVjdChyZXBlYXRlcignI3NlYXJjaE9ialJlc3VsdHMgdHInLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLgogICAgICAgICAgIHRvRXF1YWwoWydNYXJ5JywgJ01pa2UnLCAnSnVsaWUnXSk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCmZ1bmN0aW9uIGZpbHRlckZpbHRlcigpIHsKICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGV4cHJlc3Npb24pIHsKICAgIGlmICghKGFycmF5IGluc3RhbmNlb2YgQXJyYXkpKSByZXR1cm4gYXJyYXk7CiAgICB2YXIgcHJlZGljYXRlcyA9IFtdOwogICAgcHJlZGljYXRlcy5jaGVjayA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcHJlZGljYXRlcy5sZW5ndGg7IGorKykgewogICAgICAgIGlmKCFwcmVkaWNhdGVzW2pdKHZhbHVlKSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH07CiAgICB2YXIgc2VhcmNoID0gZnVuY3Rpb24ob2JqLCB0ZXh0KXsKICAgICAgaWYgKHRleHQuY2hhckF0KDApID09PSAnIScpIHsKICAgICAgICByZXR1cm4gIXNlYXJjaChvYmosIHRleHQuc3Vic3RyKDEpKTsKICAgICAgfQogICAgICBzd2l0Y2ggKHR5cGVvZiBvYmopIHsKICAgICAgICBjYXNlICJib29sZWFuIjoKICAgICAgICBjYXNlICJudW1iZXIiOgogICAgICAgIGNhc2UgInN0cmluZyI6CiAgICAgICAgICByZXR1cm4gKCcnICsgb2JqKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGV4dCkgPiAtMTsKICAgICAgICBjYXNlICJvYmplY3QiOgogICAgICAgICAgZm9yICggdmFyIG9iaktleSBpbiBvYmopIHsKICAgICAgICAgICAgaWYgKG9iaktleS5jaGFyQXQoMCkgIT09ICckJyAmJiBzZWFyY2gob2JqW29iaktleV0sIHRleHQpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICBjYXNlICJhcnJheSI6CiAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKHNlYXJjaChvYmpbaV0sIHRleHQpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9OwogICAgc3dpdGNoICh0eXBlb2YgZXhwcmVzc2lvbikgewogICAgICBjYXNlICJib29sZWFuIjoKICAgICAgY2FzZSAibnVtYmVyIjoKICAgICAgY2FzZSAic3RyaW5nIjoKICAgICAgICBleHByZXNzaW9uID0geyQ6ZXhwcmVzc2lvbn07CiAgICAgIGNhc2UgIm9iamVjdCI6CiAgICAgICAgZm9yICh2YXIga2V5IGluIGV4cHJlc3Npb24pIHsKICAgICAgICAgIGlmIChrZXkgPT0gJyQnKSB7CiAgICAgICAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB2YXIgdGV4dCA9ICgnJytleHByZXNzaW9uW2tleV0pLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgaWYgKCF0ZXh0KSByZXR1cm47CiAgICAgICAgICAgICAgcHJlZGljYXRlcy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VhcmNoKHZhbHVlLCB0ZXh0KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSkoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB2YXIgcGF0aCA9IGtleTsKICAgICAgICAgICAgICB2YXIgdGV4dCA9ICgnJytleHByZXNzaW9uW2tleV0pLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgaWYgKCF0ZXh0KSByZXR1cm47CiAgICAgICAgICAgICAgcHJlZGljYXRlcy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VhcmNoKGdldHRlcih2YWx1ZSwgcGF0aCksIHRleHQpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KSgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgY2FzZSAnZnVuY3Rpb24nOgogICAgICAgIHByZWRpY2F0ZXMucHVzaChleHByZXNzaW9uKTsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICB9CiAgICB2YXIgZmlsdGVyZWQgPSBbXTsKICAgIGZvciAoIHZhciBqID0gMDsgaiA8IGFycmF5Lmxlbmd0aDsgaisrKSB7CiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2pdOwogICAgICBpZiAocHJlZGljYXRlcy5jaGVjayh2YWx1ZSkpIHsKICAgICAgICBmaWx0ZXJlZC5wdXNoKHZhbHVlKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGZpbHRlcmVkOwogIH0KfQoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUgbmcuZmlsdGVyOmN1cnJlbmN5CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdAogKiBzeW1ib2wgZm9yIGN1cnJlbnQgbG9jYWxlIGlzIHVzZWQuCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLgogKiBAcGFyYW0ge3N0cmluZz19IHN5bWJvbCBDdXJyZW5jeSBzeW1ib2wgb3IgaWRlbnRpZmllciB0byBiZSBkaXNwbGF5ZWQuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBudW1iZXIuCiAqCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLmFtb3VudCA9IDEyMzQuNTY7CiAgICAgICAgIH0KICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgbmctbW9kZWw9ImFtb3VudCI+IDxicj4KICAgICAgICAgZGVmYXVsdCBjdXJyZW5jeSBzeW1ib2wgKCQpOiB7e2Ftb3VudCB8IGN1cnJlbmN5fX08YnI+CiAgICAgICAgIGN1c3RvbSBjdXJyZW5jeSBpZGVudGlmaWVyIChVU0QkKToge3thbW91bnQgfCBjdXJyZW5jeToiVVNEJCJ9fQogICAgICAgPC9kaXY+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGluaXQgd2l0aCAxMjM0LjU2JywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdhbW91bnQgfCBjdXJyZW5jeScpKS50b0JlKCckMSwyMzQuNTYnKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2Ftb3VudCB8IGN1cnJlbmN5OiJVU0QkIicpKS50b0JlKCdVU0QkMSwyMzQuNTYnKTsKICAgICAgIH0pOwogICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgaW5wdXQoJ2Ftb3VudCcpLmVudGVyKCctMTIzNCcpOwogICAgICAgICBleHBlY3QoYmluZGluZygnYW1vdW50IHwgY3VycmVuY3knKSkudG9CZSgnKCQxLDIzNC4wMCknKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2Ftb3VudCB8IGN1cnJlbmN5OiJVU0QkIicpKS50b0JlKCcoVVNEJDEsMjM0LjAwKScpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwpjdXJyZW5jeUZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107CmZ1bmN0aW9uIGN1cnJlbmN5RmlsdGVyKCRsb2NhbGUpIHsKICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7CiAgcmV0dXJuIGZ1bmN0aW9uKGFtb3VudCwgY3VycmVuY3lTeW1ib2wpewogICAgaWYgKGlzVW5kZWZpbmVkKGN1cnJlbmN5U3ltYm9sKSkgY3VycmVuY3lTeW1ib2wgPSBmb3JtYXRzLkNVUlJFTkNZX1NZTTsKICAgIHJldHVybiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgMikuCiAgICAgICAgICAgICAgICByZXBsYWNlKC9cdTAwQTQvZywgY3VycmVuY3lTeW1ib2wpOwogIH07Cn0KCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG5nLmZpbHRlcjpudW1iZXIKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBGb3JtYXRzIGEgbnVtYmVyIGFzIHRleHQuCiAqCiAqIElmIHRoZSBpbnB1dCBpcyBub3QgYSBudW1iZXIgYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLgogKgogKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG51bWJlciBOdW1iZXIgdG8gZm9ybWF0LgogKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKT19IFtmcmFjdGlvblNpemU9Ml0gTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBudW1iZXIgdG8uCiAqIEByZXR1cm5zIHtzdHJpbmd9IE51bWJlciByb3VuZGVkIHRvIGRlY2ltYWxQbGFjZXMgYW5kIHBsYWNlcyBhIOKAnCzigJ0gYWZ0ZXIgZWFjaCB0aGlyZCBkaWdpdC4KICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUudmFsID0gMTIzNC41Njc4OTsKICAgICAgICAgfQogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICBFbnRlciBudW1iZXI6IDxpbnB1dCBuZy1tb2RlbD0ndmFsJz48YnI+CiAgICAgICAgIERlZmF1bHQgZm9ybWF0dGluZzoge3t2YWwgfCBudW1iZXJ9fTxicj4KICAgICAgICAgTm8gZnJhY3Rpb25zOiB7e3ZhbCB8IG51bWJlcjowfX08YnI+CiAgICAgICAgIE5lZ2F0aXZlIG51bWJlcjoge3stdmFsIHwgbnVtYmVyOjR9fQogICAgICAgPC9kaXY+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGZvcm1hdCBudW1iZXJzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWwgfCBudW1iZXInKSkudG9CZSgnMSwyMzQuNTY4Jyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS50b0JlKCcxLDIzNScpOwogICAgICAgICBleHBlY3QoYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLnRvQmUoJy0xLDIzNC41Njc5Jyk7CiAgICAgICB9KTsKCiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZScsIGZ1bmN0aW9uKCkgewogICAgICAgICBpbnB1dCgndmFsJykuZW50ZXIoJzMzNzQuMzMzJyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWwgfCBudW1iZXInKSkudG9CZSgnMywzNzQuMzMzJyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS50b0JlKCczLDM3NCcpOwogICAgICAgICBleHBlY3QoYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLnRvQmUoJy0zLDM3NC4zMzMwJyk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCgoKbnVtYmVyRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTsKZnVuY3Rpb24gbnVtYmVyRmlsdGVyKCRsb2NhbGUpIHsKICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7CiAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgZnJhY3Rpb25TaXplKSB7CiAgICByZXR1cm4gZm9ybWF0TnVtYmVyKG51bWJlciwgZm9ybWF0cy5QQVRURVJOU1swXSwgZm9ybWF0cy5HUk9VUF9TRVAsIGZvcm1hdHMuREVDSU1BTF9TRVAsCiAgICAgIGZyYWN0aW9uU2l6ZSk7CiAgfTsKfQoKdmFyIERFQ0lNQUxfU0VQID0gJy4nOwpmdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtYmVyLCBwYXR0ZXJuLCBncm91cFNlcCwgZGVjaW1hbFNlcCwgZnJhY3Rpb25TaXplKSB7CiAgaWYgKGlzTmFOKG51bWJlcikgfHwgIWlzRmluaXRlKG51bWJlcikpIHJldHVybiAnJzsKCiAgdmFyIGlzTmVnYXRpdmUgPSBudW1iZXIgPCAwOwogIG51bWJlciA9IE1hdGguYWJzKG51bWJlcik7CiAgdmFyIG51bVN0ciA9IG51bWJlciArICcnLAogICAgICBmb3JtYXRlZFRleHQgPSAnJywKICAgICAgcGFydHMgPSBbXTsKCiAgaWYgKG51bVN0ci5pbmRleE9mKCdlJykgIT09IC0xKSB7CiAgICBmb3JtYXRlZFRleHQgPSBudW1TdHI7CiAgfSBlbHNlIHsKICAgIHZhciBmcmFjdGlvbkxlbiA9IChudW1TdHIuc3BsaXQoREVDSU1BTF9TRVApWzFdIHx8ICcnKS5sZW5ndGg7CgogICAgLy8gZGV0ZXJtaW5lIGZyYWN0aW9uU2l6ZSBpZiBpdCBpcyBub3Qgc3BlY2lmaWVkCiAgICBpZiAoaXNVbmRlZmluZWQoZnJhY3Rpb25TaXplKSkgewogICAgICBmcmFjdGlvblNpemUgPSBNYXRoLm1pbihNYXRoLm1heChwYXR0ZXJuLm1pbkZyYWMsIGZyYWN0aW9uTGVuKSwgcGF0dGVybi5tYXhGcmFjKTsKICAgIH0KCiAgICB2YXIgcG93ID0gTWF0aC5wb3coMTAsIGZyYWN0aW9uU2l6ZSk7CiAgICBudW1iZXIgPSBNYXRoLnJvdW5kKG51bWJlciAqIHBvdykgLyBwb3c7CiAgICB2YXIgZnJhY3Rpb24gPSAoJycgKyBudW1iZXIpLnNwbGl0KERFQ0lNQUxfU0VQKTsKICAgIHZhciB3aG9sZSA9IGZyYWN0aW9uWzBdOwogICAgZnJhY3Rpb24gPSBmcmFjdGlvblsxXSB8fCAnJzsKCiAgICB2YXIgcG9zID0gMCwKICAgICAgICBsZ3JvdXAgPSBwYXR0ZXJuLmxnU2l6ZSwKICAgICAgICBncm91cCA9IHBhdHRlcm4uZ1NpemU7CgogICAgaWYgKHdob2xlLmxlbmd0aCA+PSAobGdyb3VwICsgZ3JvdXApKSB7CiAgICAgIHBvcyA9IHdob2xlLmxlbmd0aCAtIGxncm91cDsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3M7IGkrKykgewogICAgICAgIGlmICgocG9zIC0gaSklZ3JvdXAgPT09IDAgJiYgaSAhPT0gMCkgewogICAgICAgICAgZm9ybWF0ZWRUZXh0ICs9IGdyb3VwU2VwOwogICAgICAgIH0KICAgICAgICBmb3JtYXRlZFRleHQgKz0gd2hvbGUuY2hhckF0KGkpOwogICAgICB9CiAgICB9CgogICAgZm9yIChpID0gcG9zOyBpIDwgd2hvbGUubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKCh3aG9sZS5sZW5ndGggLSBpKSVsZ3JvdXAgPT09IDAgJiYgaSAhPT0gMCkgewogICAgICAgIGZvcm1hdGVkVGV4dCArPSBncm91cFNlcDsKICAgICAgfQogICAgICBmb3JtYXRlZFRleHQgKz0gd2hvbGUuY2hhckF0KGkpOwogICAgfQoKICAgIC8vIGZvcm1hdCBmcmFjdGlvbiBwYXJ0LgogICAgd2hpbGUoZnJhY3Rpb24ubGVuZ3RoIDwgZnJhY3Rpb25TaXplKSB7CiAgICAgIGZyYWN0aW9uICs9ICcwJzsKICAgIH0KCiAgICBpZiAoZnJhY3Rpb25TaXplKSBmb3JtYXRlZFRleHQgKz0gZGVjaW1hbFNlcCArIGZyYWN0aW9uLnN1YnN0cigwLCBmcmFjdGlvblNpemUpOwogIH0KCiAgcGFydHMucHVzaChpc05lZ2F0aXZlID8gcGF0dGVybi5uZWdQcmUgOiBwYXR0ZXJuLnBvc1ByZSk7CiAgcGFydHMucHVzaChmb3JtYXRlZFRleHQpOwogIHBhcnRzLnB1c2goaXNOZWdhdGl2ZSA/IHBhdHRlcm4ubmVnU3VmIDogcGF0dGVybi5wb3NTdWYpOwogIHJldHVybiBwYXJ0cy5qb2luKCcnKTsKfQoKZnVuY3Rpb24gcGFkTnVtYmVyKG51bSwgZGlnaXRzLCB0cmltKSB7CiAgdmFyIG5lZyA9ICcnOwogIGlmIChudW0gPCAwKSB7CiAgICBuZWcgPSAgJy0nOwogICAgbnVtID0gLW51bTsKICB9CiAgbnVtID0gJycgKyBudW07CiAgd2hpbGUobnVtLmxlbmd0aCA8IGRpZ2l0cykgbnVtID0gJzAnICsgbnVtOwogIGlmICh0cmltKQogICAgbnVtID0gbnVtLnN1YnN0cihudW0ubGVuZ3RoIC0gZGlnaXRzKTsKICByZXR1cm4gbmVnICsgbnVtOwp9CgoKZnVuY3Rpb24gZGF0ZUdldHRlcihuYW1lLCBzaXplLCBvZmZzZXQsIHRyaW0pIHsKICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkgewogICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7CiAgICBpZiAob2Zmc2V0ID4gMCB8fCB2YWx1ZSA+IC1vZmZzZXQpCiAgICAgIHZhbHVlICs9IG9mZnNldDsKICAgIGlmICh2YWx1ZSA9PT0gMCAmJiBvZmZzZXQgPT0gLTEyICkgdmFsdWUgPSAxMjsKICAgIHJldHVybiBwYWROdW1iZXIodmFsdWUsIHNpemUsIHRyaW0pOwogIH07Cn0KCmZ1bmN0aW9uIGRhdGVTdHJHZXR0ZXIobmFtZSwgc2hvcnRGb3JtKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdHMpIHsKICAgIHZhciB2YWx1ZSA9IGRhdGVbJ2dldCcgKyBuYW1lXSgpOwogICAgdmFyIGdldCA9IHVwcGVyY2FzZShzaG9ydEZvcm0gPyAoJ1NIT1JUJyArIG5hbWUpIDogbmFtZSk7CgogICAgcmV0dXJuIGZvcm1hdHNbZ2V0XVt2YWx1ZV07CiAgfTsKfQoKZnVuY3Rpb24gdGltZVpvbmVHZXR0ZXIoZGF0ZSkgewogIHZhciBvZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7CiAgcmV0dXJuIHBhZE51bWJlcihvZmZzZXQgLyA2MCwgMikgKyBwYWROdW1iZXIoTWF0aC5hYnMob2Zmc2V0ICUgNjApLCAyKTsKfQoKZnVuY3Rpb24gYW1wbUdldHRlcihkYXRlLCBmb3JtYXRzKSB7CiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKSA8IDEyID8gZm9ybWF0cy5BTVBNU1swXSA6IGZvcm1hdHMuQU1QTVNbMV07Cn0KCnZhciBEQVRFX0ZPUk1BVFMgPSB7CiAgeXl5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCA0KSwKICAgIHl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDIsIDAsIHRydWUpLAogICAgIHk6IGRhdGVHZXR0ZXIoJ0Z1bGxZZWFyJywgMSksCiAgTU1NTTogZGF0ZVN0ckdldHRlcignTW9udGgnKSwKICAgTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcsIHRydWUpLAogICAgTU06IGRhdGVHZXR0ZXIoJ01vbnRoJywgMiwgMSksCiAgICAgTTogZGF0ZUdldHRlcignTW9udGgnLCAxLCAxKSwKICAgIGRkOiBkYXRlR2V0dGVyKCdEYXRlJywgMiksCiAgICAgZDogZGF0ZUdldHRlcignRGF0ZScsIDEpLAogICAgSEg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiksCiAgICAgSDogZGF0ZUdldHRlcignSG91cnMnLCAxKSwKICAgIGhoOiBkYXRlR2V0dGVyKCdIb3VycycsIDIsIC0xMiksCiAgICAgaDogZGF0ZUdldHRlcignSG91cnMnLCAxLCAtMTIpLAogICAgbW06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAyKSwKICAgICBtOiBkYXRlR2V0dGVyKCdNaW51dGVzJywgMSksCiAgICBzczogZGF0ZUdldHRlcignU2Vjb25kcycsIDIpLAogICAgIHM6IGRhdGVHZXR0ZXIoJ1NlY29uZHMnLCAxKSwKICBFRUVFOiBkYXRlU3RyR2V0dGVyKCdEYXknKSwKICAgRUVFOiBkYXRlU3RyR2V0dGVyKCdEYXknLCB0cnVlKSwKICAgICBhOiBhbXBtR2V0dGVyLAogICAgIFo6IHRpbWVab25lR2V0dGVyCn07Cgp2YXIgREFURV9GT1JNQVRTX1NQTElUID0gLygoPzpbXnlNZEhobXNhWkUnXSspfCg/OicoPzpbXiddfCcnKSonKXwoPzpFK3x5K3xNK3xkK3xIK3xoK3xtK3xzK3xhfFopKSguKikvLAogICAgTlVNQkVSX1NUUklORyA9IC9eXGQrJC87CgovKioKICogQG5nZG9jIGZpbHRlcgogKiBAbmFtZSBuZy5maWx0ZXI6ZGF0ZQogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqICAgRm9ybWF0cyBgZGF0ZWAgdG8gYSBzdHJpbmcgYmFzZWQgb24gdGhlIHJlcXVlc3RlZCBgZm9ybWF0YC4KICoKICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGJlIGNvbXBvc2VkIG9mIHRoZSBmb2xsb3dpbmcgZWxlbWVudHM6CiAqCiAqICAgKiBgJ3l5eXknYDogNCBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyIChlLmcuIEFEIDEgPT4gMDAwMSwgQUQgMjAxMCA9PiAyMDEwKQogKiAgICogYCd5eSdgOiAyIGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIsIHBhZGRlZCAoMDAtOTkpLiAoZS5nLiBBRCAyMDAxID0+IDAxLCBBRCAyMDEwID0+IDEwKQogKiAgICogYCd5J2A6IDEgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgZS5nLiAoQUQgMSA9PiAxLCBBRCAxOTkgPT4gMTk5KQogKiAgICogYCdNTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbnVhcnktRGVjZW1iZXIpCiAqICAgKiBgJ01NTSdgOiBNb250aCBpbiB5ZWFyIChKYW4tRGVjKQogKiAgICogYCdNTSdgOiBNb250aCBpbiB5ZWFyLCBwYWRkZWQgKDAxLTEyKQogKiAgICogYCdNJ2A6IE1vbnRoIGluIHllYXIgKDEtMTIpCiAqICAgKiBgJ2RkJ2A6IERheSBpbiBtb250aCwgcGFkZGVkICgwMS0zMSkKICogICAqIGAnZCdgOiBEYXkgaW4gbW9udGggKDEtMzEpCiAqICAgKiBgJ0VFRUUnYDogRGF5IGluIFdlZWssKFN1bmRheS1TYXR1cmRheSkKICogICAqIGAnRUVFJ2A6IERheSBpbiBXZWVrLCAoU3VuLVNhdCkKICogICAqIGAnSEgnYDogSG91ciBpbiBkYXksIHBhZGRlZCAoMDAtMjMpCiAqICAgKiBgJ0gnYDogSG91ciBpbiBkYXkgKDAtMjMpCiAqICAgKiBgJ2hoJ2A6IEhvdXIgaW4gYW0vcG0sIHBhZGRlZCAoMDEtMTIpCiAqICAgKiBgJ2gnYDogSG91ciBpbiBhbS9wbSwgKDEtMTIpCiAqICAgKiBgJ21tJ2A6IE1pbnV0ZSBpbiBob3VyLCBwYWRkZWQgKDAwLTU5KQogKiAgICogYCdtJ2A6IE1pbnV0ZSBpbiBob3VyICgwLTU5KQogKiAgICogYCdzcydgOiBTZWNvbmQgaW4gbWludXRlLCBwYWRkZWQgKDAwLTU5KQogKiAgICogYCdzJ2A6IFNlY29uZCBpbiBtaW51dGUgKDAtNTkpCiAqICAgKiBgJ2EnYDogYW0vcG0gbWFya2VyCiAqICAgKiBgJ1onYDogNCBkaWdpdCAoK3NpZ24pIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aW1lem9uZSBvZmZzZXQgKC0xMjAwLTEyMDApCiAqCiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBhbHNvIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHByZWRlZmluZWQKICogICB7QGxpbmsgZ3VpZGUvaTE4biBsb2NhbGl6YWJsZSBmb3JtYXRzfToKICoKICogICAqIGAnbWVkaXVtJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSBoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlCiAqICAgICAoZS5nLiBTZXAgMywgMjAxMCAxMjowNTowOCBwbSkKICogICAqIGAnc2hvcnQnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSBoOm1tIGEnYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiA5LzMvMTAgMTI6MDUgcG0pCiAqICAgKiBgJ2Z1bGxEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdFRUVFLCBNTU1NIGQseSdgIGZvciBlbl9VUyAgbG9jYWxlCiAqICAgICAoZS5nLiBGcmlkYXksIFNlcHRlbWJlciAzLCAyMDEwKQogKiAgICogYCdsb25nRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gU2VwdGVtYmVyIDMsIDIwMTAKICogICAqIGAnbWVkaXVtRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiBTZXAgMywgMjAxMCkKICogICAqIGAnc2hvcnREYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNL2QveXknYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDkvMy8xMCkKICogICAqIGAnbWVkaXVtVGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbTpzcyBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNTowOCBwbSkKICogICAqIGAnc2hvcnRUaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1IHBtKQogKgogKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gY29udGFpbiBsaXRlcmFsIHZhbHVlcy4gVGhlc2UgbmVlZCB0byBiZSBxdW90ZWQgd2l0aCBzaW5nbGUgcXVvdGVzIChlLmcuCiAqICAgYCJoICdpbiB0aGUgbW9ybmluZyciYCkuIEluIG9yZGVyIHRvIG91dHB1dCBzaW5nbGUgcXVvdGUsIHVzZSB0d28gc2luZ2xlIHF1b3RlcyBpbiBhIHNlcXVlbmNlCiAqICAgKGUuZy4gYCJoIG8nJ2Nsb2NrImApLgogKgogKiBAcGFyYW0geyhEYXRlfG51bWJlcnxzdHJpbmcpfSBkYXRlIERhdGUgdG8gZm9ybWF0IGVpdGhlciBhcyBEYXRlIG9iamVjdCwgbWlsbGlzZWNvbmRzIChzdHJpbmcgb3IKICogICAgbnVtYmVyKSBvciB2YXJpb3VzIElTTyA4NjAxIGRhdGV0aW1lIHN0cmluZyBmb3JtYXRzIChlLmcuIHl5eXktTU0tZGRUSEg6bW06c3MuU1NTWiBhbmQgaXQncwogKiAgICBzaG9ydGVyIHZlcnNpb25zIGxpa2UgeXl5eS1NTS1kZFRISDptbVosIHl5eXktTU0tZGQgb3IgeXl5eU1NZGRUSEhtbXNzWikuCiAqIEBwYXJhbSB7c3RyaW5nPX0gZm9ybWF0IEZvcm1hdHRpbmcgcnVsZXMgKHNlZSBEZXNjcmlwdGlvbikuIElmIG5vdCBzcGVjaWZpZWQsCiAqICAgIGBtZWRpdW1EYXRlYCBpcyB1c2VkLgogKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgc3RyaW5nIG9yIHRoZSBpbnB1dCBpZiBpbnB1dCBpcyBub3QgcmVjb2duaXplZCBhcyBkYXRlL21pbGxpcy4KICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSd9fTwvc3Bhbj46CiAgICAgICAgICAge3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PGJyPgogICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWid9fTwvc3Bhbj46CiAgICAgICAgICB7ezEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonfX08YnI+CiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjoKICAgICAgICAgIHt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PGJyPgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBmb3JtYXQgZGF0ZScsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoYmluZGluZygiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSciKSkuCiAgICAgICAgICAgIHRvTWF0Y2goL09jdCAyXGQsIDIwMTAgXGR7MSwyfTpcZHsyfTpcZHsyfSAoQU18UE0pLyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCIxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJyIpKS4KICAgICAgICAgICAgdG9NYXRjaCgvMjAxMFwtMTBcLTJcZCBcZHsyfTpcZHsyfTpcZHsyfSBcLT9cZHs0fS8pOwogICAgICAgICBleHBlY3QoYmluZGluZygiJzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJyIpKS4KICAgICAgICAgICAgdG9NYXRjaCgvMTBcLzJcZFwvMjAxMCBAIFxkezEsMn06XGR7Mn0oQU18UE0pLyk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCmRhdGVGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddOwpmdW5jdGlvbiBkYXRlRmlsdGVyKCRsb2NhbGUpIHsKCgogIHZhciBSX0lTTzg2MDFfU1RSID0gL14oXGR7NH0pLT8oXGRcZCktPyhcZFxkKSg/OlQoXGRcZCkoPzo6PyhcZFxkKSg/Ojo/KFxkXGQpKD86XC4oXGR7M30pKT8pPyk/KFp8KFsrLV0pKFxkXGQpOj8oXGRcZCkpKT8kLzsKICBmdW5jdGlvbiBqc29uU3RyaW5nVG9EYXRlKHN0cmluZyl7CiAgICB2YXIgbWF0Y2g7CiAgICBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2goUl9JU084NjAxX1NUUikpIHsKICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKSwKICAgICAgICAgIHR6SG91ciA9IDAsCiAgICAgICAgICB0ek1pbiAgPSAwOwogICAgICBpZiAobWF0Y2hbOV0pIHsKICAgICAgICB0ekhvdXIgPSBpbnQobWF0Y2hbOV0gKyBtYXRjaFsxMF0pOwogICAgICAgIHR6TWluID0gaW50KG1hdGNoWzldICsgbWF0Y2hbMTFdKTsKICAgICAgfQogICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGludChtYXRjaFsxXSksIGludChtYXRjaFsyXSkgLSAxLCBpbnQobWF0Y2hbM10pKTsKICAgICAgZGF0ZS5zZXRVVENIb3VycyhpbnQobWF0Y2hbNF18fDApIC0gdHpIb3VyLCBpbnQobWF0Y2hbNV18fDApIC0gdHpNaW4sIGludChtYXRjaFs2XXx8MCksIGludChtYXRjaFs3XXx8MCkpOwogICAgICByZXR1cm4gZGF0ZTsKICAgIH0KICAgIHJldHVybiBzdHJpbmc7CiAgfQoKCiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCkgewogICAgdmFyIHRleHQgPSAnJywKICAgICAgICBwYXJ0cyA9IFtdLAogICAgICAgIGZuLCBtYXRjaDsKCiAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJ21lZGl1bURhdGUnOwogICAgZm9ybWF0ID0gJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTW2Zvcm1hdF0gfHwgZm9ybWF0OwogICAgaWYgKGlzU3RyaW5nKGRhdGUpKSB7CiAgICAgIGlmIChOVU1CRVJfU1RSSU5HLnRlc3QoZGF0ZSkpIHsKICAgICAgICBkYXRlID0gaW50KGRhdGUpOwogICAgICB9IGVsc2UgewogICAgICAgIGRhdGUgPSBqc29uU3RyaW5nVG9EYXRlKGRhdGUpOwogICAgICB9CiAgICB9CgogICAgaWYgKGlzTnVtYmVyKGRhdGUpKSB7CiAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTsKICAgIH0KCiAgICBpZiAoIWlzRGF0ZShkYXRlKSkgewogICAgICByZXR1cm4gZGF0ZTsKICAgIH0KCiAgICB3aGlsZShmb3JtYXQpIHsKICAgICAgbWF0Y2ggPSBEQVRFX0ZPUk1BVFNfU1BMSVQuZXhlYyhmb3JtYXQpOwogICAgICBpZiAobWF0Y2gpIHsKICAgICAgICBwYXJ0cyA9IGNvbmNhdChwYXJ0cywgbWF0Y2gsIDEpOwogICAgICAgIGZvcm1hdCA9IHBhcnRzLnBvcCgpOwogICAgICB9IGVsc2UgewogICAgICAgIHBhcnRzLnB1c2goZm9ybWF0KTsKICAgICAgICBmb3JtYXQgPSBudWxsOwogICAgICB9CiAgICB9CgogICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24odmFsdWUpewogICAgICBmbiA9IERBVEVfRk9STUFUU1t2YWx1ZV07CiAgICAgIHRleHQgKz0gZm4gPyBmbihkYXRlLCAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMpCiAgICAgICAgICAgICAgICAgOiB2YWx1ZS5yZXBsYWNlKC8oXid8JyQpL2csICcnKS5yZXBsYWNlKC8nJy9nLCAiJyIpOwogICAgfSk7CgogICAgcmV0dXJuIHRleHQ7CiAgfTsKfQoKCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG5nLmZpbHRlcjpqc29uCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogICBBbGxvd3MgeW91IHRvIGNvbnZlcnQgYSBKYXZhU2NyaXB0IG9iamVjdCBpbnRvIEpTT04gc3RyaW5nLgogKgogKiAgIFRoaXMgZmlsdGVyIGlzIG1vc3RseSB1c2VmdWwgZm9yIGRlYnVnZ2luZy4gV2hlbiB1c2luZyB0aGUgZG91YmxlIGN1cmx5IHt7dmFsdWV9fSBub3RhdGlvbgogKiAgIHRoZSBiaW5kaW5nIGlzIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIEpTT04uCiAqCiAqIEBwYXJhbSB7Kn0gb2JqZWN0IEFueSBKYXZhU2NyaXB0IG9iamVjdCAoaW5jbHVkaW5nIGFycmF5cyBhbmQgcHJpbWl0aXZlIHR5cGVzKSB0byBmaWx0ZXIuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEpTT04gc3RyaW5nLgogKgogKgogKiBAZXhhbXBsZToKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICAgPHByZT57eyB7J25hbWUnOid2YWx1ZSd9IHwganNvbiB9fTwvcHJlPgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBqc29uaWZ5IGZpbHRlcmVkIG9iamVjdHMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoInsnbmFtZSc6J3ZhbHVlJ30iKSkudG9NYXRjaCgvXHtcbiAgIm5hbWUiOiA/InZhbHVlIlxufS8pOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqCiAqLwpmdW5jdGlvbiBqc29uRmlsdGVyKCkgewogIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHsKICAgIHJldHVybiB0b0pzb24ob2JqZWN0LCB0cnVlKTsKICB9Owp9CgoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUgbmcuZmlsdGVyOmxvd2VyY2FzZQogKiBAZnVuY3Rpb24KICogQGRlc2NyaXB0aW9uCiAqIENvbnZlcnRzIHN0cmluZyB0byBsb3dlcmNhc2UuCiAqIEBzZWUgYW5ndWxhci5sb3dlcmNhc2UKICovCnZhciBsb3dlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKGxvd2VyY2FzZSk7CgoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUgbmcuZmlsdGVyOnVwcGVyY2FzZQogKiBAZnVuY3Rpb24KICogQGRlc2NyaXB0aW9uCiAqIENvbnZlcnRzIHN0cmluZyB0byB1cHBlcmNhc2UuCiAqIEBzZWUgYW5ndWxhci51cHBlcmNhc2UKICovCnZhciB1cHBlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKHVwcGVyY2FzZSk7CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIG5nLmZpbHRlcjpsaW1pdFRvCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb250YWluaW5nIG9ubHkgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIGFycmF5LiBUaGUgZWxlbWVudHMKICogYXJlIHRha2VuIGZyb20gZWl0aGVyIHRoZSBiZWdpbm5pbmcgb3IgdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5LCBhcyBzcGVjaWZpZWQgYnkgdGhlCiAqIHZhbHVlIGFuZCBzaWduIChwb3NpdGl2ZSBvciBuZWdhdGl2ZSkgb2YgYGxpbWl0YC4KICoKICogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGF1Z21lbnQgdGhlIGBBcnJheWAgdHlwZSBpbiBBbmd1bGFyIGV4cHJlc3Npb25zLiBTZWUKICoge0BsaW5rIG5nLiRmaWx0ZXJ9IGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IEFuZ3VsYXIgYXJyYXlzLgogKgogKiBAcGFyYW0ge0FycmF5fSBhcnJheSBTb3VyY2UgYXJyYXkgdG8gYmUgbGltaXRlZC4KICogQHBhcmFtIHtzdHJpbmd8TnVtYmVyfSBsaW1pdCBUaGUgbGVuZ3RoIG9mIHRoZSByZXR1cm5lZCBhcnJheS4gSWYgdGhlIGBsaW1pdGAgbnVtYmVyIGlzCiAqICAgICBwb3NpdGl2ZSwgYGxpbWl0YCBudW1iZXIgb2YgaXRlbXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzb3VyY2UgYXJyYXkgYXJlIGNvcGllZC4KICogICAgIElmIHRoZSBudW1iZXIgaXMgbmVnYXRpdmUsIGBsaW1pdGAgbnVtYmVyICBvZiBpdGVtcyBmcm9tIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheSBhcmUKICogICAgIGNvcGllZC4gVGhlIGBsaW1pdGAgd2lsbCBiZSB0cmltbWVkIGlmIGl0IGV4Y2VlZHMgYGFycmF5Lmxlbmd0aGAKICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdWItYXJyYXkgb2YgbGVuZ3RoIGBsaW1pdGAgb3IgbGVzcyBpZiBpbnB1dCBhcnJheSBoYWQgbGVzcyB0aGFuIGBsaW1pdGAKICogICAgIGVsZW1lbnRzLgogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICRzY29wZS5udW1iZXJzID0gWzEsMiwzLDQsNSw2LDcsOCw5XTsKICAgICAgICAgICAkc2NvcGUubGltaXQgPSAzOwogICAgICAgICB9CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgIExpbWl0IHt7bnVtYmVyc319IHRvOiA8aW5wdXQgdHlwZT0iaW50ZWdlciIgbmctbW9kZWw9ImxpbWl0Ij4KICAgICAgICAgPHA+T3V0cHV0OiB7eyBudW1iZXJzIHwgbGltaXRUbzpsaW1pdCB9fTwvcD4KICAgICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBsaW1pdCB0aGUgbnVtZXIgYXJyYXkgdG8gZmlyc3QgdGhyZWUgaXRlbXMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGlucHV0W25nLW1vZGVsPWxpbWl0XScpLnZhbCgpKS50b0JlKCczJyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpsaW1pdCcpKS50b0VxdWFsKCdbMSwyLDNdJyk7CiAgICAgICB9KTsKCiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgb3V0cHV0IHdoZW4gLTMgaXMgZW50ZXJlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICBpbnB1dCgnbGltaXQnKS5lbnRlcigtMyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpsaW1pdCcpKS50b0VxdWFsKCdbNyw4LDldJyk7CiAgICAgICB9KTsKCiAgICAgICBpdCgnc2hvdWxkIG5vdCBleGNlZWQgdGhlIG1heGltdW0gc2l6ZSBvZiBpbnB1dCBhcnJheScsIGZ1bmN0aW9uKCkgewogICAgICAgICBpbnB1dCgnbGltaXQnKS5lbnRlcigxMDApOwogICAgICAgICBleHBlY3QoYmluZGluZygnbnVtYmVycyB8IGxpbWl0VG86bGltaXQnKSkudG9FcXVhbCgnWzEsMiwzLDQsNSw2LDcsOCw5XScpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwpmdW5jdGlvbiBsaW1pdFRvRmlsdGVyKCl7CiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBsaW1pdCkgewogICAgaWYgKCEoYXJyYXkgaW5zdGFuY2VvZiBBcnJheSkpIHJldHVybiBhcnJheTsKICAgIGxpbWl0ID0gaW50KGxpbWl0KTsKICAgIHZhciBvdXQgPSBbXSwKICAgICAgaSwgbjsKCiAgICAvLyBjaGVjayB0aGF0IGFycmF5IGlzIGl0ZXJhYmxlCiAgICBpZiAoIWFycmF5IHx8ICEoYXJyYXkgaW5zdGFuY2VvZiBBcnJheSkpCiAgICAgIHJldHVybiBvdXQ7CgogICAgLy8gaWYgYWJzKGxpbWl0KSBleGNlZWRzIG1heGltdW0gbGVuZ3RoLCB0cmltIGl0CiAgICBpZiAobGltaXQgPiBhcnJheS5sZW5ndGgpCiAgICAgIGxpbWl0ID0gYXJyYXkubGVuZ3RoOwogICAgZWxzZSBpZiAobGltaXQgPCAtYXJyYXkubGVuZ3RoKQogICAgICBsaW1pdCA9IC1hcnJheS5sZW5ndGg7CgogICAgaWYgKGxpbWl0ID4gMCkgewogICAgICBpID0gMDsKICAgICAgbiA9IGxpbWl0OwogICAgfSBlbHNlIHsKICAgICAgaSA9IGFycmF5Lmxlbmd0aCArIGxpbWl0OwogICAgICBuID0gYXJyYXkubGVuZ3RoOwogICAgfQoKICAgIGZvciAoOyBpPG47IGkrKykgewogICAgICBvdXQucHVzaChhcnJheVtpXSk7CiAgICB9CgogICAgcmV0dXJuIG91dDsKICB9Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgbmcuZmlsdGVyOm9yZGVyQnkKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBPcmRlcnMgYSBzcGVjaWZpZWQgYGFycmF5YCBieSB0aGUgYGV4cHJlc3Npb25gIHByZWRpY2F0ZS4KICoKICogTm90ZTogdGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGF1Z21lbnQgdGhlIGBBcnJheWAgdHlwZSBpbiBBbmd1bGFyIGV4cHJlc3Npb25zLiBTZWUKICoge0BsaW5rIG5nLiRmaWx0ZXJ9IGZvciBtb3JlIGluZm9ybWF0b24gYWJvdXQgQW5ndWxhciBhcnJheXMuCiAqCiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LgogKiBAcGFyYW0ge2Z1bmN0aW9uKCopfHN0cmluZ3xBcnJheS48KGZ1bmN0aW9uKCopfHN0cmluZyk+fSBleHByZXNzaW9uIEEgcHJlZGljYXRlIHRvIGJlCiAqICAgIHVzZWQgYnkgdGhlIGNvbXBhcmF0b3IgdG8gZGV0ZXJtaW5lIHRoZSBvcmRlciBvZiBlbGVtZW50cy4KICoKICogICAgQ2FuIGJlIG9uZSBvZjoKICoKICogICAgLSBgZnVuY3Rpb25gOiBHZXR0ZXIgZnVuY3Rpb24uIFRoZSByZXN1bHQgb2YgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIHNvcnRlZCB1c2luZyB0aGUKICogICAgICBgPGAsIGA9YCwgYD5gIG9wZXJhdG9yLgogKiAgICAtIGBzdHJpbmdgOiBBbiBBbmd1bGFyIGV4cHJlc3Npb24gd2hpY2ggZXZhbHVhdGVzIHRvIGFuIG9iamVjdCB0byBvcmRlciBieSwgc3VjaCBhcyAnbmFtZScKICogICAgICB0byBzb3J0IGJ5IGEgcHJvcGVydHkgY2FsbGVkICduYW1lJy4gT3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGArYCBvciBgLWAgdG8gY29udHJvbAogKiAgICAgIGFzY2VuZGluZyBvciBkZXNjZW5kaW5nIHNvcnQgb3JkZXIgKGZvciBleGFtcGxlLCArbmFtZSBvciAtbmFtZSkuCiAqICAgIC0gYEFycmF5YDogQW4gYXJyYXkgb2YgZnVuY3Rpb24gb3Igc3RyaW5nIHByZWRpY2F0ZXMuIFRoZSBmaXJzdCBwcmVkaWNhdGUgaW4gdGhlIGFycmF5CiAqICAgICAgaXMgdXNlZCBmb3Igc29ydGluZywgYnV0IHdoZW4gdHdvIGl0ZW1zIGFyZSBlcXVpdmFsZW50LCB0aGUgbmV4dCBwcmVkaWNhdGUgaXMgdXNlZC4KICoKICogQHBhcmFtIHtib29sZWFuPX0gcmV2ZXJzZSBSZXZlcnNlIHRoZSBvcmRlciB0aGUgYXJyYXkuCiAqIEByZXR1cm5zIHtBcnJheX0gU29ydGVkIGNvcHkgb2YgdGhlIHNvdXJjZSBhcnJheS4KICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9CiAgICAgICAgICAgICAgIFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTIxMicsIGFnZToxMH0sCiAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic1NTUtOTg3NicsIGFnZToxOX0sCiAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMScsIGFnZToyMX0sCiAgICAgICAgICAgICAgICB7bmFtZTonQWRhbScsIHBob25lOic1NTUtNTY3OCcsIGFnZTozNX0sCiAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnLCBhZ2U6Mjl9XQogICAgICAgICAgICRzY29wZS5wcmVkaWNhdGUgPSAnLWFnZSc7CiAgICAgICAgIH0KICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgPHByZT5Tb3J0aW5nIHByZWRpY2F0ZSA9IHt7cHJlZGljYXRlfX07IHJldmVyc2UgPSB7e3JldmVyc2V9fTwvcHJlPgogICAgICAgICA8aHIvPgogICAgICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9InByZWRpY2F0ZT0nJyI+dW5zb3J0ZWQ8L2E+IF0KICAgICAgICAgPHRhYmxlIGNsYXNzPSJmcmllbmQiPgogICAgICAgICAgIDx0cj4KICAgICAgICAgICAgIDx0aD48YSBocmVmPSIiIG5nLWNsaWNrPSJwcmVkaWNhdGUgPSAnbmFtZSc7IHJldmVyc2U9ZmFsc2UiPk5hbWU8L2E+CiAgICAgICAgICAgICAgICAgKDxhIGhyZWYgbmctY2xpY2s9InByZWRpY2F0ZSA9ICctbmFtZSc7IHJldmVyc2U9ZmFsc2UiPl48L2E+KTwvdGg+CiAgICAgICAgICAgICA8dGg+PGEgaHJlZj0iIiBuZy1jbGljaz0icHJlZGljYXRlID0gJ3Bob25lJzsgcmV2ZXJzZT0hcmV2ZXJzZSI+UGhvbmUgTnVtYmVyPC9hPjwvdGg+CiAgICAgICAgICAgICA8dGg+PGEgaHJlZj0iIiBuZy1jbGljaz0icHJlZGljYXRlID0gJ2FnZSc7IHJldmVyc2U9IXJldmVyc2UiPkFnZTwvYT48L3RoPgogICAgICAgICAgIDx0cj4KICAgICAgICAgICA8dHIgbmctcmVwZWF0PSJmcmllbmQgaW4gZnJpZW5kcyB8IG9yZGVyQnk6cHJlZGljYXRlOnJldmVyc2UiPgogICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+CiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+CiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPgogICAgICAgICAgIDx0cj4KICAgICAgICAgPC90YWJsZT4KICAgICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBiZSByZXZlcnNlIG9yZGVyZWQgYnkgYWdlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoYmluZGluZygncHJlZGljYXRlJykpLnRvQmUoJy1hZ2UnKTsKICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCd0YWJsZS5mcmllbmQnLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5hZ2UnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJzM1JywgJzI5JywgJzIxJywgJzE5JywgJzEwJ10pOwogICAgICAgICBleHBlY3QocmVwZWF0ZXIoJ3RhYmxlLmZyaWVuZCcsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJ0FkYW0nLCAnSnVsaWUnLCAnTWlrZScsICdNYXJ5JywgJ0pvaG4nXSk7CiAgICAgICB9KTsKCiAgICAgICBpdCgnc2hvdWxkIHJlb3JkZXIgdGhlIHRhYmxlIHdoZW4gdXNlciBzZWxlY3RzIGRpZmZlcmVudCBwcmVkaWNhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgYTpjb250YWlucygiTmFtZSIpJykuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCd0YWJsZS5mcmllbmQnLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLgogICAgICAgICAgIHRvRXF1YWwoWydBZGFtJywgJ0pvaG4nLCAnSnVsaWUnLCAnTWFyeScsICdNaWtlJ10pOwogICAgICAgICBleHBlY3QocmVwZWF0ZXIoJ3RhYmxlLmZyaWVuZCcsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLmFnZScpKS4KICAgICAgICAgICB0b0VxdWFsKFsnMzUnLCAnMTAnLCAnMjknLCAnMTknLCAnMjEnXSk7CgogICAgICAgICBlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBhOmNvbnRhaW5zKCJQaG9uZSIpJykuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCd0YWJsZS5mcmllbmQnLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5waG9uZScpKS4KICAgICAgICAgICB0b0VxdWFsKFsnNTU1LTk4NzYnLCAnNTU1LTg3NjUnLCAnNTU1LTU2NzgnLCAnNTU1LTQzMjEnLCAnNTU1LTEyMTInXSk7CiAgICAgICAgIGV4cGVjdChyZXBlYXRlcigndGFibGUuZnJpZW5kJywgJ2ZyaWVuZCBpbiBmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKS4KICAgICAgICAgICB0b0VxdWFsKFsnTWFyeScsICdKdWxpZScsICdBZGFtJywgJ01pa2UnLCAnSm9obiddKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8Kb3JkZXJCeUZpbHRlci4kaW5qZWN0ID0gWyckcGFyc2UnXTsKZnVuY3Rpb24gb3JkZXJCeUZpbHRlcigkcGFyc2UpewogIHJldHVybiBmdW5jdGlvbihhcnJheSwgc29ydFByZWRpY2F0ZSwgcmV2ZXJzZU9yZGVyKSB7CiAgICBpZiAoIShhcnJheSBpbnN0YW5jZW9mIEFycmF5KSkgcmV0dXJuIGFycmF5OwogICAgaWYgKCFzb3J0UHJlZGljYXRlKSByZXR1cm4gYXJyYXk7CiAgICBzb3J0UHJlZGljYXRlID0gaXNBcnJheShzb3J0UHJlZGljYXRlKSA/IHNvcnRQcmVkaWNhdGU6IFtzb3J0UHJlZGljYXRlXTsKICAgIHNvcnRQcmVkaWNhdGUgPSBtYXAoc29ydFByZWRpY2F0ZSwgZnVuY3Rpb24ocHJlZGljYXRlKXsKICAgICAgdmFyIGRlc2NlbmRpbmcgPSBmYWxzZSwgZ2V0ID0gcHJlZGljYXRlIHx8IGlkZW50aXR5OwogICAgICBpZiAoaXNTdHJpbmcocHJlZGljYXRlKSkgewogICAgICAgIGlmICgocHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnKycgfHwgcHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnLScpKSB7CiAgICAgICAgICBkZXNjZW5kaW5nID0gcHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnLSc7CiAgICAgICAgICBwcmVkaWNhdGUgPSBwcmVkaWNhdGUuc3Vic3RyaW5nKDEpOwogICAgICAgIH0KICAgICAgICBnZXQgPSAkcGFyc2UocHJlZGljYXRlKTsKICAgICAgfQogICAgICByZXR1cm4gcmV2ZXJzZUNvbXBhcmF0b3IoZnVuY3Rpb24oYSxiKXsKICAgICAgICByZXR1cm4gY29tcGFyZShnZXQoYSksZ2V0KGIpKTsKICAgICAgfSwgZGVzY2VuZGluZyk7CiAgICB9KTsKICAgIHZhciBhcnJheUNvcHkgPSBbXTsKICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7IGFycmF5Q29weS5wdXNoKGFycmF5W2ldKTsgfQogICAgcmV0dXJuIGFycmF5Q29weS5zb3J0KHJldmVyc2VDb21wYXJhdG9yKGNvbXBhcmF0b3IsIHJldmVyc2VPcmRlcikpOwoKICAgIGZ1bmN0aW9uIGNvbXBhcmF0b3IobzEsIG8yKXsKICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc29ydFByZWRpY2F0ZS5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBjb21wID0gc29ydFByZWRpY2F0ZVtpXShvMSwgbzIpOwogICAgICAgIGlmIChjb21wICE9PSAwKSByZXR1cm4gY29tcDsKICAgICAgfQogICAgICByZXR1cm4gMDsKICAgIH0KICAgIGZ1bmN0aW9uIHJldmVyc2VDb21wYXJhdG9yKGNvbXAsIGRlc2NlbmRpbmcpIHsKICAgICAgcmV0dXJuIHRvQm9vbGVhbihkZXNjZW5kaW5nKQogICAgICAgICAgPyBmdW5jdGlvbihhLGIpe3JldHVybiBjb21wKGIsYSk7fQogICAgICAgICAgOiBjb21wOwogICAgfQogICAgZnVuY3Rpb24gY29tcGFyZSh2MSwgdjIpewogICAgICB2YXIgdDEgPSB0eXBlb2YgdjE7CiAgICAgIHZhciB0MiA9IHR5cGVvZiB2MjsKICAgICAgaWYgKHQxID09IHQyKSB7CiAgICAgICAgaWYgKHQxID09ICJzdHJpbmciKSB2MSA9IHYxLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgaWYgKHQxID09ICJzdHJpbmciKSB2MiA9IHYyLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgaWYgKHYxID09PSB2MikgcmV0dXJuIDA7CiAgICAgICAgcmV0dXJuIHYxIDwgdjIgPyAtMSA6IDE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHQxIDwgdDIgPyAtMSA6IDE7CiAgICAgIH0KICAgIH0KICB9Cn0KCmZ1bmN0aW9uIG5nRGlyZWN0aXZlKGRpcmVjdGl2ZSkgewogIGlmIChpc0Z1bmN0aW9uKGRpcmVjdGl2ZSkpIHsKICAgIGRpcmVjdGl2ZSA9IHsKICAgICAgbGluazogZGlyZWN0aXZlCiAgICB9CiAgfQogIGRpcmVjdGl2ZS5yZXN0cmljdCA9IGRpcmVjdGl2ZS5yZXN0cmljdCB8fCAnQUMnOwogIHJldHVybiB2YWx1ZUZuKGRpcmVjdGl2ZSk7Cn0KCi8qCiAqIE1vZGlmaWVzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIGh0bWwgQSB0YWcsIHNvIHRoYXQgdGhlIGRlZmF1bHQgYWN0aW9uIGlzIHByZXZlbnRlZCB3aGVuIGhyZWYKICogYXR0cmlidXRlIGlzIGVtcHR5LgogKgogKiBUaGUgcmVhc29uaW5nIGZvciB0aGlzIGNoYW5nZSBpcyB0byBhbGxvdyBlYXN5IGNyZWF0aW9uIG9mIGFjdGlvbiBsaW5rcyB3aXRoIGBuZ0NsaWNrYCBkaXJlY3RpdmUKICogd2l0aG91dCBjaGFuZ2luZyB0aGUgbG9jYXRpb24gb3IgY2F1c2luZyBwYWdlIHJlbG9hZHMsIGUuZy46CiAqIDxhIGhyZWY9IiIgbmctY2xpY2s9Im1vZGVsLiRzYXZlKCkiPlNhdmU8L2E+CiAqLwp2YXIgaHRtbEFuY2hvckRpcmVjdGl2ZSA9IHZhbHVlRm4oewogIHJlc3RyaWN0OiAnRScsCiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikgewogICAgLy8gdHVybiA8YSBocmVmIG5nLWNsaWNrPSIuLiI+bGluazwvYT4gaW50byBhIGxpbmsgaW4gSUUKICAgIC8vIGJ1dCBvbmx5IGlmIGl0IGRvZXNuJ3QgaGF2ZSBuYW1lIGF0dHJpYnV0ZSwgaW4gd2hpY2ggY2FzZSBpdCdzIGFuIGFuY2hvcgogICAgaWYgKCFhdHRyLmhyZWYpIHsKICAgICAgYXR0ci4kc2V0KCdocmVmJywgJycpOwogICAgfQoKICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCkgewogICAgICBlbGVtZW50LmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpewogICAgICAgIC8vIGlmIHdlIGhhdmUgbm8gaHJlZiB1cmwsIHRoZW4gZG9uJ3QgbmF2aWdhdGUgYW55d2hlcmUuCiAgICAgICAgaWYgKCFlbGVtZW50LmF0dHIoJ2hyZWYnKSkgewogICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0KfSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdIcmVmCiAqIEByZXN0cmljdCBBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIHt7aGFzaH19IGluIGFuIGhyZWYgYXR0cmlidXRlIG1ha2VzCiAqIHRoZSBwYWdlIG9wZW4gdG8gYSB3cm9uZyBVUkwsIGlmIHRoZSB1c2VyIGNsaWNrcyB0aGF0IGxpbmsgYmVmb3JlCiAqIGFuZ3VsYXIgaGFzIGEgY2hhbmNlIHRvIHJlcGxhY2UgdGhlIHt7aGFzaH19IHdpdGggYWN0dWFsIFVSTCwgdGhlCiAqIGxpbmsgd2lsbCBiZSBicm9rZW4gYW5kIHdpbGwgbW9zdCBsaWtlbHkgcmV0dXJuIGEgNDA0IGVycm9yLgogKiBUaGUgYG5nSHJlZmAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uCiAqCiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6CiAqIDxwcmU+CiAqIDxhIGhyZWY9Imh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSIvPgogKiA8L3ByZT4KICoKICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OgogKiA8cHJlPgogKiA8YSBuZy1ocmVmPSJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0iLz4KICogPC9wcmU+CiAqCiAqIEBlbGVtZW50IEEKICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdIcmVmIGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC4KICoKICogQGV4YW1wbGUKICogVGhpcyBleGFtcGxlIHVzZXMgYGxpbmtgIHZhcmlhYmxlIGluc2lkZSBgaHJlZmAgYXR0cmlidXRlOgogICAgPGRvYzpleGFtcGxlPgogICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICA8aW5wdXQgbmctbW9kZWw9InZhbHVlIiAvPjxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTEiIGhyZWYgbmctY2xpY2s9InZhbHVlID0gMSI+bGluayAxPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTIiIGhyZWY9IiIgbmctY2xpY2s9InZhbHVlID0gMiI+bGluayAyPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTMiIG5nLWhyZWY9Ii97eycxMjMnfX0iPmxpbmsgMzwvYT4gKGxpbmssIHJlbG9hZCEpPGJyIC8+CiAgICAgICAgPGEgaWQ9ImxpbmstNCIgaHJlZj0iIiBuYW1lPSJ4eCIgbmctY2xpY2s9InZhbHVlID0gNCI+YW5jaG9yPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTUiIG5hbWU9Inh4eCIgbmctY2xpY2s9InZhbHVlID0gNSI+YW5jaG9yPC9hPiAobm8gbGluayk8YnIgLz4KICAgICAgICA8YSBpZD0ibGluay02IiBuZy1ocmVmPSJ7e3ZhbHVlfX0iPmxpbms8L2E+IChsaW5rLCBjaGFuZ2UgbG9jYXRpb24pCiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIHdpdGhvdXQgdmFsdWUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGVsZW1lbnQoJyNsaW5rLTEnKS5jbGljaygpOwogICAgICAgICAgZXhwZWN0KGlucHV0KCd2YWx1ZScpLnZhbCgpKS50b0VxdWFsKCcxJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnI2xpbmstMScpLmF0dHIoJ2hyZWYnKSkudG9CZSgiIik7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgZW1wdHkgc3RyaW5nJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBlbGVtZW50KCcjbGluay0yJykuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChpbnB1dCgndmFsdWUnKS52YWwoKSkudG9FcXVhbCgnMicpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNsaW5rLTInKS5hdHRyKCdocmVmJykpLnRvQmUoIiIpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYW5kIGNoYW5nZSB1cmwgd2hlbiBuZy1ocmVmIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNsaW5rLTMnKS5hdHRyKCdocmVmJykpLnRvQmUoIi8xMjMiKTsKCiAgICAgICAgICBlbGVtZW50KCcjbGluay0zJykuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChicm93c2VyKCkud2luZG93KCkucGF0aCgpKS50b0VxdWFsKCcvMTIzJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgZW1wdHkgc3RyaW5nIGFuZCBuYW1lIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZWxlbWVudCgnI2xpbmstNCcpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoaW5wdXQoJ3ZhbHVlJykudmFsKCkpLnRvRXF1YWwoJzQnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjbGluay00JykuYXR0cignaHJlZicpKS50b0JlKCcnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gbm8gaHJlZiBidXQgbmFtZSBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGVsZW1lbnQoJyNsaW5rLTUnKS5jbGljaygpOwogICAgICAgICAgZXhwZWN0KGlucHV0KCd2YWx1ZScpLnZhbCgpKS50b0VxdWFsKCc1Jyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnI2xpbmstNScpLmF0dHIoJ2hyZWYnKSkudG9CZSgnJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgb25seSBjaGFuZ2UgdXJsIHdoZW4gb25seSBuZy1ocmVmJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBpbnB1dCgndmFsdWUnKS5lbnRlcignNicpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNsaW5rLTYnKS5hdHRyKCdocmVmJykpLnRvQmUoJzYnKTsKCiAgICAgICAgICBlbGVtZW50KCcjbGluay02JykuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChicm93c2VyKCkubG9jYXRpb24oKS51cmwoKSkudG9FcXVhbCgnLzYnKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1NyYwogKiBAcmVzdHJpY3QgQQogKgogKiBAZGVzY3JpcHRpb24KICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGEgYHNyY2AgYXR0cmlidXRlIGRvZXNuJ3QKICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbAogKiB0ZXh0IGB7e2hhc2h9fWAgdW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgZXhwcmVzc2lvbiBpbnNpZGUKICogYHt7aGFzaH19YC4gVGhlIGBuZ1NyY2AgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uCiAqCiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6CiAqIDxwcmU+CiAqIDxpbWcgc3JjPSJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0iLz4KICogPC9wcmU+CiAqCiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDoKICogPHByZT4KICogPGltZyBuZy1zcmM9Imh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSIvPgogKiA8L3ByZT4KICoKICogQGVsZW1lbnQgSU1HCiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nU3JjIGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC4KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdEaXNhYmxlZAogKiBAcmVzdHJpY3QgQQogKgogKiBAZGVzY3JpcHRpb24KICoKICogVGhlIGZvbGxvd2luZyBtYXJrdXAgd2lsbCBtYWtlIHRoZSBidXR0b24gZW5hYmxlZCBvbiBDaHJvbWUvRmlyZWZveCBidXQgbm90IG9uIElFOCBhbmQgb2xkZXIgSUVzOgogKiA8cHJlPgogKiA8ZGl2IG5nLWluaXQ9InNjb3BlID0geyBpc0Rpc2FibGVkOiBmYWxzZSB9Ij4KICogIDxidXR0b24gZGlzYWJsZWQ9Int7c2NvcGUuaXNEaXNhYmxlZH19Ij5EaXNhYmxlZDwvYnV0dG9uPgogKiA8L2Rpdj4KICogPC9wcmU+CiAqCiAqIFRoZSBIVE1MIHNwZWNzIGRvIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSBzcGVjaWFsIGF0dHJpYnV0ZXMgc3VjaCBhcyBkaXNhYmxlZC4KICogKFRoZSBwcmVzZW5jZSBvZiB0aGVtIG1lYW5zIHRydWUgYW5kIGFic2VuY2UgbWVhbnMgZmFsc2UpCiAqIFRoaXMgcHJldmVudHMgdGhlIGFuZ3VsYXIgY29tcGlsZXIgZnJvbSBjb3JyZWN0bHkgcmV0cmlldmluZyB0aGUgYmluZGluZyBleHByZXNzaW9uLgogKiBUbyBzb2x2ZSB0aGlzIHByb2JsZW0sIHdlIGludHJvZHVjZSB0aGUgYG5nRGlzYWJsZWRgIGRpcmVjdGl2ZS4KICoKICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgQ2xpY2sgbWUgdG8gdG9nZ2xlOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIj48YnIvPgogICAgICAgIDxidXR0b24gbmctbW9kZWw9ImJ1dHRvbiIgbmctZGlzYWJsZWQ9ImNoZWNrZWQiPkJ1dHRvbjwvYnV0dG9uPgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgYnV0dG9uJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgOmJ1dHRvbicpLnByb3AoJ2Rpc2FibGVkJykpLnRvQmVGYWxzeSgpOwogICAgICAgICAgaW5wdXQoJ2NoZWNrZWQnKS5jaGVjaygpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIDpidXR0b24nKS5wcm9wKCdkaXNhYmxlZCcpKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICoKICogQGVsZW1lbnQgSU5QVVQKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0Rpc2FibGVkIEFuZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IHdpbGwgYmUgZXZhbHVhdGVkLgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDaGVja2VkCiAqIEByZXN0cmljdCBBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgSFRNTCBzcGVjcyBkbyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgc3BlY2lhbCBhdHRyaWJ1dGVzIHN1Y2ggYXMgY2hlY2tlZC4KICogKFRoZSBwcmVzZW5jZSBvZiB0aGVtIG1lYW5zIHRydWUgYW5kIGFic2VuY2UgbWVhbnMgZmFsc2UpCiAqIFRoaXMgcHJldmVudHMgdGhlIGFuZ3VsYXIgY29tcGlsZXIgZnJvbSBjb3JyZWN0bHkgcmV0cmlldmluZyB0aGUgYmluZGluZyBleHByZXNzaW9uLgogKiBUbyBzb2x2ZSB0aGlzIHByb2JsZW0sIHdlIGludHJvZHVjZSB0aGUgYG5nQ2hlY2tlZGAgZGlyZWN0aXZlLgogKiBAZXhhbXBsZQogICAgPGRvYzpleGFtcGxlPgogICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICBDaGVjayBtZSB0byBjaGVjayBib3RoOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJtYXN0ZXIiPjxici8+CiAgICAgICAgPGlucHV0IGlkPSJjaGVja1NsYXZlIiB0eXBlPSJjaGVja2JveCIgbmctY2hlY2tlZD0ibWFzdGVyIj4KICAgICAgPC9kb2M6c291cmNlPgogICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgIGl0KCdzaG91bGQgY2hlY2sgYm90aCBjaGVja0JveGVzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI2NoZWNrU2xhdmUnKS5wcm9wKCdjaGVja2VkJykpLnRvQmVGYWxzeSgpOwogICAgICAgICAgaW5wdXQoJ21hc3RlcicpLmNoZWNrKCk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI2NoZWNrU2xhdmUnKS5wcm9wKCdjaGVja2VkJykpLnRvQmVUcnV0aHkoKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKgogKiBAZWxlbWVudCBJTlBVVAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2hlY2tlZCBBbmd1bGFyIGV4cHJlc3Npb24gdGhhdCB3aWxsIGJlIGV2YWx1YXRlZC4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTXVsdGlwbGUKICogQHJlc3RyaWN0IEEKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBIVE1MIHNwZWNzIGRvIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSBzcGVjaWFsIGF0dHJpYnV0ZXMgc3VjaCBhcyBtdWx0aXBsZS4KICogKFRoZSBwcmVzZW5jZSBvZiB0aGVtIG1lYW5zIHRydWUgYW5kIGFic2VuY2UgbWVhbnMgZmFsc2UpCiAqIFRoaXMgcHJldmVudHMgdGhlIGFuZ3VsYXIgY29tcGlsZXIgZnJvbSBjb3JyZWN0bHkgcmV0cmlldmluZyB0aGUgYmluZGluZyBleHByZXNzaW9uLgogKiBUbyBzb2x2ZSB0aGlzIHByb2JsZW0sIHdlIGludHJvZHVjZSB0aGUgYG5nTXVsdGlwbGVgIGRpcmVjdGl2ZS4KICoKICogQGV4YW1wbGUKICAgICA8ZG9jOmV4YW1wbGU+CiAgICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICAgQ2hlY2sgbWUgY2hlY2sgbXVsdGlwbGU6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9ImNoZWNrZWQiPjxici8+CiAgICAgICAgIDxzZWxlY3QgaWQ9InNlbGVjdCIgbmctbXVsdGlwbGU9ImNoZWNrZWQiPgogICAgICAgICAgIDxvcHRpb24+TWlza288L29wdGlvbj4KICAgICAgICAgICA8b3B0aW9uPklnb3I8L29wdGlvbj4KICAgICAgICAgICA8b3B0aW9uPlZvanRhPC9vcHRpb24+CiAgICAgICAgICAgPG9wdGlvbj5EaTwvb3B0aW9uPgogICAgICAgICA8L3NlbGVjdD4KICAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIG11bHRpcGxlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNzZWxlY3QnKS5wcm9wKCdtdWx0aXBsZScpKS50b0JlRmFsc3koKTsKICAgICAgICAgICBpbnB1dCgnY2hlY2tlZCcpLmNoZWNrKCk7CiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNzZWxlY3QnKS5wcm9wKCdtdWx0aXBsZScpKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgIH0pOwogICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICAgPC9kb2M6ZXhhbXBsZT4KICoKICogQGVsZW1lbnQgU0VMRUNUCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNdWx0aXBsZSBBbmd1bGFyIGV4cHJlc3Npb24gdGhhdCB3aWxsIGJlIGV2YWx1YXRlZC4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nUmVhZG9ubHkKICogQHJlc3RyaWN0IEEKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBIVE1MIHNwZWNzIGRvIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSBzcGVjaWFsIGF0dHJpYnV0ZXMgc3VjaCBhcyByZWFkb25seS4KICogKFRoZSBwcmVzZW5jZSBvZiB0aGVtIG1lYW5zIHRydWUgYW5kIGFic2VuY2UgbWVhbnMgZmFsc2UpCiAqIFRoaXMgcHJldmVudHMgdGhlIGFuZ3VsYXIgY29tcGlsZXIgZnJvbSBjb3JyZWN0bHkgcmV0cmlldmluZyB0aGUgYmluZGluZyBleHByZXNzaW9uLgogKiBUbyBzb2x2ZSB0aGlzIHByb2JsZW0sIHdlIGludHJvZHVjZSB0aGUgYG5nUmVhZG9ubHlgIGRpcmVjdGl2ZS4KICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgQ2hlY2sgbWUgdG8gbWFrZSB0ZXh0IHJlYWRvbmx5OiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIj48YnIvPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1yZWFkb25seT0iY2hlY2tlZCIgdmFsdWU9IkknbSBBbmd1bGFyIi8+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSByZWFkb25seSBhdHRyJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgOnRleHQnKS5wcm9wKCdyZWFkb25seScpKS50b0JlRmFsc3koKTsKICAgICAgICAgIGlucHV0KCdjaGVja2VkJykuY2hlY2soKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSA6dGV4dCcpLnByb3AoJ3JlYWRvbmx5JykpLnRvQmVUcnV0aHkoKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKgogKiBAZWxlbWVudCBJTlBVVAogKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBBbmd1bGFyIGV4cHJlc3Npb24gdGhhdCB3aWxsIGJlIGV2YWx1YXRlZC4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nU2VsZWN0ZWQKICogQHJlc3RyaWN0IEEKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBIVE1MIHNwZWNzIGRvIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSBzcGVjaWFsIGF0dHJpYnV0ZXMgc3VjaCBhcyBzZWxlY3RlZC4KICogKFRoZSBwcmVzZW5jZSBvZiB0aGVtIG1lYW5zIHRydWUgYW5kIGFic2VuY2UgbWVhbnMgZmFsc2UpCiAqIFRoaXMgcHJldmVudHMgdGhlIGFuZ3VsYXIgY29tcGlsZXIgZnJvbSBjb3JyZWN0bHkgcmV0cmlldmluZyB0aGUgYmluZGluZyBleHByZXNzaW9uLgogKiBUbyBzb2x2ZSB0aGlzIHByb2JsZW0sIHdlIGludHJvZHVjZWQgdGhlIGBuZ1NlbGVjdGVkYCBkaXJlY3RpdmUuCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgIENoZWNrIG1lIHRvIHNlbGVjdDogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0ic2VsZWN0ZWQiPjxici8+CiAgICAgICAgPHNlbGVjdD4KICAgICAgICAgIDxvcHRpb24+SGVsbG8hPC9vcHRpb24+CiAgICAgICAgICA8b3B0aW9uIGlkPSJncmVldCIgbmctc2VsZWN0ZWQ9InNlbGVjdGVkIj5HcmVldGluZ3MhPC9vcHRpb24+CiAgICAgICAgPC9zZWxlY3Q+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIHNlbGVjdCBHcmVldGluZ3MhJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI2dyZWV0JykucHJvcCgnc2VsZWN0ZWQnKSkudG9CZUZhbHN5KCk7CiAgICAgICAgICBpbnB1dCgnc2VsZWN0ZWQnKS5jaGVjaygpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNncmVldCcpLnByb3AoJ3NlbGVjdGVkJykpLnRvQmVUcnV0aHkoKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKgogKiBAZWxlbWVudCBPUFRJT04KICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gQW5ndWxhciBleHByZXNzaW9uIHRoYXQgd2lsbCBiZSBldmFsdWF0ZWQuCiAqLwoKCnZhciBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyA9IHt9OwoKCi8vIGJvb2xlYW4gYXR0cnMgYXJlIGV2YWx1YXRlZApmb3JFYWNoKEJPT0xFQU5fQVRUUiwgZnVuY3Rpb24ocHJvcE5hbWUsIGF0dHJOYW1lKSB7CiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7CiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB7CiAgICAgIHByaW9yaXR5OiAxMDAsCiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbm9ybWFsaXplZF0sIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIGF0dHIuJHNldChhdHRyTmFtZSwgISF2YWx1ZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICB9CiAgICB9OwogIH07Cn0pOwoKCi8vIG5nLXNyYywgbmctaHJlZiBhcmUgaW50ZXJwb2xhdGVkCmZvckVhY2goWydzcmMnLCAnaHJlZiddLCBmdW5jdGlvbihhdHRyTmFtZSkgewogIHZhciBub3JtYWxpemVkID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgYXR0ck5hbWUpOwogIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBwcmlvcml0eTogOTksIC8vIGl0IG5lZWRzIHRvIHJ1biBhZnRlciB0aGUgYXR0cmlidXRlcyBhcmUgaW50ZXJwb2xhdGVkCiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgYXR0ci4kb2JzZXJ2ZShub3JtYWxpemVkLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgYXR0ci4kc2V0KGF0dHJOYW1lLCB2YWx1ZSk7CgogICAgICAgICAgLy8gb24gSUUsIGlmICJuZzpzcmMiIGRpcmVjdGl2ZSBkZWNsYXJhdGlvbiBpcyB1c2VkIGFuZCAic3JjIiBhdHRyaWJ1dGUgZG9lc24ndCBleGlzdAogICAgICAgICAgLy8gdGhlbiBjYWxsaW5nIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzcmMnLCAnZm9vJykgZG9lc24ndCBkbyBhbnl0aGluZywgc28gd2UgbmVlZAogICAgICAgICAgLy8gdG8gc2V0IHRoZSBwcm9wZXJ0eSBhcyB3ZWxsIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0CiAgICAgICAgICBpZiAobXNpZSkgZWxlbWVudC5wcm9wKGF0dHJOYW1lLCB2YWx1ZSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CiAgfTsKfSk7Cgp2YXIgbnVsbEZvcm1DdHJsID0gewogICRhZGRDb250cm9sOiBub29wLAogICRyZW1vdmVDb250cm9sOiBub29wLAogICRzZXRWYWxpZGl0eTogbm9vcCwKICAkc2V0RGlydHk6IG5vb3AKfTsKCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyCiAqCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybSB5ZXQuCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGZvcm0uCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHZhbGlkIFRydWUgaWYgYWxsIG9mIHRoZSBjb250YWluZyBmb3JtcyBhbmQgY29udHJvbHMgYXJlIHZhbGlkLgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICRpbnZhbGlkIFRydWUgaWYgYXQgbGVhc3Qgb25lIGNvbnRhaW5pbmcgY29udHJvbCBvciBmb3JtIGlzIGludmFsaWQuCiAqCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgSXMgYW4gb2JqZWN0IGhhc2gsIGNvbnRhaW5pbmcgcmVmZXJlbmNlcyB0byBhbGwgaW52YWxpZCBjb250cm9scyBvcgogKiAgZm9ybXMsIHdoZXJlOgogKgogKiAgLSBrZXlzIGFyZSB2YWxpZGF0aW9uIHRva2VucyAoZXJyb3IgbmFtZXMpIOKAlCBzdWNoIGFzIGBSRVFVSVJFRGAsIGBVUkxgIG9yIGBFTUFJTGApLAogKiAgLSB2YWx1ZXMgYXJlIGFycmF5cyBvZiBjb250cm9scyBvciBmb3JtcyB0aGF0IGFyZSBpbnZhbGlkIHdpdGggZ2l2ZW4gZXJyb3IuCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBgRm9ybUNvbnRyb2xsZXJgIGtlZXBzIHRyYWNrIG9mIGFsbCBpdHMgY29udHJvbHMgYW5kIG5lc3RlZCBmb3JtcyBhcyB3ZWxsIGFzIHN0YXRlIG9mIHRoZW0sCiAqIHN1Y2ggYXMgYmVpbmcgdmFsaWQvaW52YWxpZCBvciBkaXJ0eS9wcmlzdGluZS4KICoKICogRWFjaCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0gZGlyZWN0aXZlIGNyZWF0ZXMgYW4gaW5zdGFuY2UKICogb2YgYEZvcm1Db250cm9sbGVyYC4KICoKICovCi8vYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlCkZvcm1Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJyRhdHRycycsICckc2NvcGUnXTsKZnVuY3Rpb24gRm9ybUNvbnRyb2xsZXIoZWxlbWVudCwgYXR0cnMpIHsKICB2YXIgZm9ybSA9IHRoaXMsCiAgICAgIHBhcmVudEZvcm0gPSBlbGVtZW50LnBhcmVudCgpLmNvbnRyb2xsZXIoJ2Zvcm0nKSB8fCBudWxsRm9ybUN0cmwsCiAgICAgIGludmFsaWRDb3VudCA9IDAsIC8vIHVzZWQgdG8gZWFzaWx5IGRldGVybWluZSBpZiB3ZSBhcmUgdmFsaWQKICAgICAgZXJyb3JzID0gZm9ybS4kZXJyb3IgPSB7fTsKCiAgLy8gaW5pdCBzdGF0ZQogIGZvcm0uJG5hbWUgPSBhdHRycy5uYW1lOwogIGZvcm0uJGRpcnR5ID0gZmFsc2U7CiAgZm9ybS4kcHJpc3RpbmUgPSB0cnVlOwogIGZvcm0uJHZhbGlkID0gdHJ1ZTsKICBmb3JtLiRpbnZhbGlkID0gZmFsc2U7CgogIHBhcmVudEZvcm0uJGFkZENvbnRyb2woZm9ybSk7CgogIC8vIFNldHVwIGluaXRpYWwgc3RhdGUgb2YgdGhlIGNvbnRyb2wKICBlbGVtZW50LmFkZENsYXNzKFBSSVNUSU5FX0NMQVNTKTsKICB0b2dnbGVWYWxpZENzcyh0cnVlKTsKCiAgLy8gY29udmVuaWVuY2UgbWV0aG9kIGZvciBlYXN5IHRvZ2dsaW5nIG9mIGNsYXNzZXMKICBmdW5jdGlvbiB0b2dnbGVWYWxpZENzcyhpc1ZhbGlkLCB2YWxpZGF0aW9uRXJyb3JLZXkpIHsKICAgIHZhbGlkYXRpb25FcnJvcktleSA9IHZhbGlkYXRpb25FcnJvcktleSA/ICctJyArIHNuYWtlX2Nhc2UodmFsaWRhdGlvbkVycm9yS2V5LCAnLScpIDogJyc7CiAgICBlbGVtZW50LgogICAgICByZW1vdmVDbGFzcygoaXNWYWxpZCA/IElOVkFMSURfQ0xBU1MgOiBWQUxJRF9DTEFTUykgKyB2YWxpZGF0aW9uRXJyb3JLZXkpLgogICAgICBhZGRDbGFzcygoaXNWYWxpZCA/IFZBTElEX0NMQVNTIDogSU5WQUxJRF9DTEFTUykgKyB2YWxpZGF0aW9uRXJyb3JLZXkpOwogIH0KCiAgZm9ybS4kYWRkQ29udHJvbCA9IGZ1bmN0aW9uKGNvbnRyb2wpIHsKICAgIGlmIChjb250cm9sLiRuYW1lICYmICFmb3JtLmhhc093blByb3BlcnR5KGNvbnRyb2wuJG5hbWUpKSB7CiAgICAgIGZvcm1bY29udHJvbC4kbmFtZV0gPSBjb250cm9sOwogICAgfQogIH07CgogIGZvcm0uJHJlbW92ZUNvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sKSB7CiAgICBpZiAoY29udHJvbC4kbmFtZSAmJiBmb3JtW2NvbnRyb2wuJG5hbWVdID09PSBjb250cm9sKSB7CiAgICAgIGRlbGV0ZSBmb3JtW2NvbnRyb2wuJG5hbWVdOwogICAgfQogICAgZm9yRWFjaChlcnJvcnMsIGZ1bmN0aW9uKHF1ZXVlLCB2YWxpZGF0aW9uVG9rZW4pIHsKICAgICAgZm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvblRva2VuLCB0cnVlLCBjb250cm9sKTsKICAgIH0pOwogIH07CgogIGZvcm0uJHNldFZhbGlkaXR5ID0gZnVuY3Rpb24odmFsaWRhdGlvblRva2VuLCBpc1ZhbGlkLCBjb250cm9sKSB7CiAgICB2YXIgcXVldWUgPSBlcnJvcnNbdmFsaWRhdGlvblRva2VuXTsKCiAgICBpZiAoaXNWYWxpZCkgewogICAgICBpZiAocXVldWUpIHsKICAgICAgICBhcnJheVJlbW92ZShxdWV1ZSwgY29udHJvbCk7CiAgICAgICAgaWYgKCFxdWV1ZS5sZW5ndGgpIHsKICAgICAgICAgIGludmFsaWRDb3VudC0tOwogICAgICAgICAgaWYgKCFpbnZhbGlkQ291bnQpIHsKICAgICAgICAgICAgdG9nZ2xlVmFsaWRDc3MoaXNWYWxpZCk7CiAgICAgICAgICAgIGZvcm0uJHZhbGlkID0gdHJ1ZTsKICAgICAgICAgICAgZm9ybS4kaW52YWxpZCA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgZXJyb3JzW3ZhbGlkYXRpb25Ub2tlbl0gPSBmYWxzZTsKICAgICAgICAgIHRvZ2dsZVZhbGlkQ3NzKHRydWUsIHZhbGlkYXRpb25Ub2tlbik7CiAgICAgICAgICBwYXJlbnRGb3JtLiRzZXRWYWxpZGl0eSh2YWxpZGF0aW9uVG9rZW4sIHRydWUsIGZvcm0pOwogICAgICAgIH0KICAgICAgfQoKICAgIH0gZWxzZSB7CiAgICAgIGlmICghaW52YWxpZENvdW50KSB7CiAgICAgICAgdG9nZ2xlVmFsaWRDc3MoaXNWYWxpZCk7CiAgICAgIH0KICAgICAgaWYgKHF1ZXVlKSB7CiAgICAgICAgaWYgKGluY2x1ZGVzKHF1ZXVlLCBjb250cm9sKSkgcmV0dXJuOwogICAgICB9IGVsc2UgewogICAgICAgIGVycm9yc1t2YWxpZGF0aW9uVG9rZW5dID0gcXVldWUgPSBbXTsKICAgICAgICBpbnZhbGlkQ291bnQrKzsKICAgICAgICB0b2dnbGVWYWxpZENzcyhmYWxzZSwgdmFsaWRhdGlvblRva2VuKTsKICAgICAgICBwYXJlbnRGb3JtLiRzZXRWYWxpZGl0eSh2YWxpZGF0aW9uVG9rZW4sIGZhbHNlLCBmb3JtKTsKICAgICAgfQogICAgICBxdWV1ZS5wdXNoKGNvbnRyb2wpOwoKICAgICAgZm9ybS4kdmFsaWQgPSBmYWxzZTsKICAgICAgZm9ybS4kaW52YWxpZCA9IHRydWU7CiAgICB9CiAgfTsKCiAgZm9ybS4kc2V0RGlydHkgPSBmdW5jdGlvbigpIHsKICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpLmFkZENsYXNzKERJUlRZX0NMQVNTKTsKICAgIGZvcm0uJGRpcnR5ID0gdHJ1ZTsKICAgIGZvcm0uJHByaXN0aW5lID0gZmFsc2U7CiAgfTsKCn0KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdGb3JtCiAqIEByZXN0cmljdCBFQUMKICoKICogQGRlc2NyaXB0aW9uCiAqIE5lc3RhYmxlIGFsaWFzIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBgZm9ybWB9IGRpcmVjdGl2ZS4gSFRNTAogKiBkb2VzIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGZvcm0gZWxlbWVudHMuIEl0IGlzIHVzZWZ1bCB0byBuZXN0IGZvcm1zLCBmb3IgZXhhbXBsZSBpZiB0aGUgdmFsaWRpdHkgb2YgYQogKiBzdWItZ3JvdXAgb2YgY29udHJvbHMgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZC4KICoKICogQHBhcmFtIHtzdHJpbmc9fSBuZ0Zvcm18bmFtZSBOYW1lIG9mIHRoZSBmb3JtLiBJZiBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgaW50bwogKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLgogKgogKi8KCiAvKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6Zm9ybQogKiBAcmVzdHJpY3QgRQogKgogKiBAZGVzY3JpcHRpb24KICogRGlyZWN0aXZlIHRoYXQgaW5zdGFudGlhdGVzCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybS5Gb3JtQ29udHJvbGxlciBGb3JtQ29udHJvbGxlcn0uCiAqCiAqIElmIGBuYW1lYCBhdHRyaWJ1dGUgaXMgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIGlzIHB1Ymxpc2hlZCBvbnRvIHRoZSBjdXJyZW50IHNjb3BlIHVuZGVyCiAqIHRoaXMgbmFtZS4KICoKICogIyBBbGlhczoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9CiAqCiAqIEluIGFuZ3VsYXIgZm9ybXMgY2FuIGJlIG5lc3RlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBvdXRlciBmb3JtIGlzIHZhbGlkIHdoZW4gYWxsIG9mIHRoZSBjaGlsZAogKiBmb3JtcyBhcmUgdmFsaWQgYXMgd2VsbC4gSG93ZXZlciBicm93c2VycyBkbyBub3QgYWxsb3cgbmVzdGluZyBvZiBgPGZvcm0+YCBlbGVtZW50cywgZm9yIHRoaXMKICogcmVhc29uIGFuZ3VsYXIgcHJvdmlkZXMge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9IGFsaWFzCiAqIHdoaWNoIGJlaGF2ZXMgaWRlbnRpY2FsIHRvIGA8Zm9ybT5gIGJ1dCBhbGxvd3MgZm9ybSBuZXN0aW5nLgogKgogKgogKiAjIENTUyBjbGFzc2VzCiAqICAtIGBuZy12YWxpZGAgSXMgc2V0IGlmIHRoZSBmb3JtIGlzIHZhbGlkLgogKiAgLSBgbmctaW52YWxpZGAgSXMgc2V0IGlmIHRoZSBmb3JtIGlzIGludmFsaWQuCiAqICAtIGBuZy1wcmlzdGluZWAgSXMgc2V0IGlmIHRoZSBmb3JtIGlzIHByaXN0aW5lLgogKiAgLSBgbmctZGlydHlgIElzIHNldCBpZiB0aGUgZm9ybSBpcyBkaXJ0eS4KICoKICoKICogIyBTdWJtaXR0aW5nIGEgZm9ybSBhbmQgcHJldmVudGluZyBkZWZhdWx0IGFjdGlvbgogKgogKiBTaW5jZSB0aGUgcm9sZSBvZiBmb3JtcyBpbiBjbGllbnQtc2lkZSBBbmd1bGFyIGFwcGxpY2F0aW9ucyBpcyBkaWZmZXJlbnQgdGhhbiBpbiBjbGFzc2ljYWwKICogcm91bmR0cmlwIGFwcHMsIGl0IGlzIGRlc2lyYWJsZSBmb3IgdGhlIGJyb3dzZXIgbm90IHRvIHRyYW5zbGF0ZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGludG8gYSBmdWxsCiAqIHBhZ2UgcmVsb2FkIHRoYXQgc2VuZHMgdGhlIGRhdGEgdG8gdGhlIHNlcnZlci4gSW5zdGVhZCBzb21lIGphdmFzY3JpcHQgbG9naWMgc2hvdWxkIGJlIHRyaWdnZXJlZAogKiB0byBoYW5kbGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbiBhcHBsaWNhdGlvbiBzcGVjaWZpYyB3YXkuCiAqCiAqIEZvciB0aGlzIHJlYXNvbiwgQW5ndWxhciBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKGZvcm0gc3VibWlzc2lvbiB0byB0aGUgc2VydmVyKSB1bmxlc3MgdGhlCiAqIGA8Zm9ybT5gIGVsZW1lbnQgaGFzIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBzcGVjaWZpZWQuCiAqCiAqIFlvdSBjYW4gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHR3byB3YXlzIHRvIHNwZWNpZnkgd2hhdCBqYXZhc2NyaXB0IG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4KICogYSBmb3JtIGlzIHN1Ym1pdHRlZDoKICoKICogLSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3VibWl0IG5nU3VibWl0fSBkaXJlY3RpdmUgb24gdGhlIGZvcm0gZWxlbWVudAogKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSBkaXJlY3RpdmUgb24gdGhlIGZpcnN0CiAgKiAgYnV0dG9uIG9yIGlucHV0IGZpZWxkIG9mIHR5cGUgc3VibWl0IChpbnB1dFt0eXBlPXN1Ym1pdF0pCiAqCiAqIFRvIHByZXZlbnQgZG91YmxlIGV4ZWN1dGlvbiBvZiB0aGUgaGFuZGxlciwgdXNlIG9ubHkgb25lIG9mIG5nU3VibWl0IG9yIG5nQ2xpY2sgZGlyZWN0aXZlcy4gVGhpcwogKiBpcyBiZWNhdXNlIG9mIHRoZSBmb2xsb3dpbmcgZm9ybSBzdWJtaXNzaW9uIHJ1bGVzIGNvbWluZyBmcm9tIHRoZSBodG1sIHNwZWM6CiAqCiAqIC0gSWYgYSBmb3JtIGhhcyBvbmx5IG9uZSBpbnB1dCBmaWVsZCB0aGVuIGhpdHRpbmcgZW50ZXIgaW4gdGhpcyBmaWVsZCB0cmlnZ2VycyBmb3JtIHN1Ym1pdAogKiAoYG5nU3VibWl0YCkKICogLSBpZiBhIGZvcm0gaGFzIGhhcyAyKyBpbnB1dCBmaWVsZHMgYW5kIG5vIGJ1dHRvbnMgb3IgaW5wdXRbdHlwZT1zdWJtaXRdIHRoZW4gaGl0dGluZyBlbnRlcgogKiBkb2Vzbid0IHRyaWdnZXIgc3VibWl0CiAqIC0gaWYgYSBmb3JtIGhhcyBvbmUgb3IgbW9yZSBpbnB1dCBmaWVsZHMgYW5kIG9uZSBvciBtb3JlIGJ1dHRvbnMgb3IgaW5wdXRbdHlwZT1zdWJtaXRdIHRoZW4KICogaGl0dGluZyBlbnRlciBpbiBhbnkgb2YgdGhlIGlucHV0IGZpZWxkcyB3aWxsIHRyaWdnZXIgdGhlIGNsaWNrIGhhbmRsZXIgb24gdGhlICpmaXJzdCogYnV0dG9uIG9yCiAqIGlucHV0W3R5cGU9c3VibWl0XSAoYG5nQ2xpY2tgKSAqYW5kKiBhIHN1Ym1pdCBoYW5kbGVyIG9uIHRoZSBlbmNsb3NpbmcgZm9ybSAoYG5nU3VibWl0YCkKICoKICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvCiAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuCiAqCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUudXNlclR5cGUgPSAnZ3Vlc3QnOwogICAgICAgICB9CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgIHVzZXJUeXBlOiA8aW5wdXQgbmFtZT0iaW5wdXQiIG5nLW1vZGVsPSJ1c2VyVHlwZSIgcmVxdWlyZWQ+CiAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5SRVFVSVJFRCI+UmVxdWlyZWQhPC9zcGFuPjxicj4KICAgICAgICAgPHR0PnVzZXJUeXBlID0ge3t1c2VyVHlwZX19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLlJFUVVJUkVEID0ge3shIW15Rm9ybS4kZXJyb3IuUkVRVUlSRUR9fTwvdHQ+PGJyPgogICAgICAgIDwvZm9ybT4KICAgICAgPC9kb2M6c291cmNlPgogICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoYmluZGluZygndXNlclR5cGUnKSkudG9FcXVhbCgnZ3Vlc3QnKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHsKICAgICAgICAgaW5wdXQoJ3VzZXJUeXBlJykuZW50ZXIoJycpOwogICAgICAgICBleHBlY3QoYmluZGluZygndXNlclR5cGUnKSkudG9FcXVhbCgnJyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICovCnZhciBmb3JtRGlyZWN0aXZlRGlyID0gewogIG5hbWU6ICdmb3JtJywKICByZXN0cmljdDogJ0UnLAogIGNvbnRyb2xsZXI6IEZvcm1Db250cm9sbGVyLAogIGNvbXBpbGU6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZm9ybUVsZW1lbnQsIGF0dHIsIGNvbnRyb2xsZXIpIHsKICAgICAgICBpZiAoIWF0dHIuYWN0aW9uKSB7CiAgICAgICAgICBmb3JtRWxlbWVudC5iaW5kKCdzdWJtaXQnLCBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgcGFyZW50Rm9ybUN0cmwgPSBmb3JtRWxlbWVudC5wYXJlbnQoKS5jb250cm9sbGVyKCdmb3JtJyksCiAgICAgICAgICAgIGFsaWFzID0gYXR0ci5uYW1lIHx8IGF0dHIubmdGb3JtOwoKICAgICAgICBpZiAoYWxpYXMpIHsKICAgICAgICAgIHNjb3BlW2FsaWFzXSA9IGNvbnRyb2xsZXI7CiAgICAgICAgfQogICAgICAgIGlmIChwYXJlbnRGb3JtQ3RybCkgewogICAgICAgICAgZm9ybUVsZW1lbnQuYmluZCgnJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcGFyZW50Rm9ybUN0cmwuJHJlbW92ZUNvbnRyb2woY29udHJvbGxlcik7CiAgICAgICAgICAgIGlmIChhbGlhcykgewogICAgICAgICAgICAgIHNjb3BlW2FsaWFzXSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgfQogICAgICAgICAgICBleHRlbmQoY29udHJvbGxlciwgbnVsbEZvcm1DdHJsKTsgLy9zdG9wIHByb3BhZ2F0aW5nIGNoaWxkIGRlc3RydWN0aW9uIGhhbmRsZXJzIHVwd2FyZHMKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfTsKICB9Cn07Cgp2YXIgZm9ybURpcmVjdGl2ZSA9IHZhbHVlRm4oZm9ybURpcmVjdGl2ZURpcik7CnZhciBuZ0Zvcm1EaXJlY3RpdmUgPSB2YWx1ZUZuKGV4dGVuZChjb3B5KGZvcm1EaXJlY3RpdmVEaXIpLCB7cmVzdHJpY3Q6ICdFQUMnfSkpOwoKdmFyIFVSTF9SRUdFWFAgPSAvXihmdHB8aHR0cHxodHRwcyk6XC9cLyhcdys6ezAsMX1cdypAKT8oXFMrKSg6WzAtOV0rKT8oXC98XC8oW1x3IyE6Lj8rPSYlQCFcLVwvXSkpPyQvOwp2YXIgRU1BSUxfUkVHRVhQID0gL15bQS1aYS16MC05Ll8lKy1dK0BbQS1aYS16MC05Li1dK1wuW0EtWmEtel17Miw0fSQvOwp2YXIgTlVNQkVSX1JFR0VYUCA9IC9eXHMqKFwtfFwrKT8oXGQrfChcZCooXC5cZCopKSlccyokLzsKCnZhciBpbnB1dFR5cGUgPSB7CgogIC8qKgogICAqIEBuZ2RvYyBpbnB1dFR5cGUKICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6aW5wdXQudGV4dAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU3RhbmRhcmQgSFRNTCB0ZXh0IGlucHV0IHdpdGggYW5ndWxhciBkYXRhIGJpbmRpbmcuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogICAqICAgIG1pbmxlbmd0aC4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuCiAgICogICAgbWF4bGVuZ3RoLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yCiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgICAgPGRvYzpleGFtcGxlPgogICAgICAgIDxkb2M6c291cmNlPgogICAgICAgICA8c2NyaXB0PgogICAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdndWVzdCc7CiAgICAgICAgICAgICAkc2NvcGUud29yZCA9IC9eXHcqJC87CiAgICAgICAgICAgfQogICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgICBTaW5nbGUgd29yZDogPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nLXBhdHRlcm49IndvcmQiIHJlcXVpcmVkPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnBhdHRlcm4iPgogICAgICAgICAgICAgU2luZ2xlIHdvcmQgb25seSE8L3NwYW4+CgogICAgICAgICAgIDx0dD50ZXh0ID0ge3t0ZXh0fX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd0ZXh0JykpLnRvRXF1YWwoJ2d1ZXN0Jyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dCgndGV4dCcpLmVudGVyKCcnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RleHQnKSkudG9FcXVhbCgnJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbXVsdGkgd29yZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dCgndGV4dCcpLmVudGVyKCdoZWxsbyB3b3JsZCcpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgfSk7CiAgICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICAgIDwvZG9jOmV4YW1wbGU+CiAgICovCiAgJ3RleHQnOiB0ZXh0SW5wdXRUeXBlLAoKCiAgLyoqCiAgICogQG5nZG9jIGlucHV0VHlwZQogICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTppbnB1dC5udW1iZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRleHQgaW5wdXQgd2l0aCBudW1iZXIgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIFNldHMgdGhlIGBudW1iZXJgIHZhbGlkYXRpb24KICAgKiBlcnJvciBpZiBub3QgYSB2YWxpZCBudW1iZXIuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhlbiBgbWluYC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoZW4gYG1pbmAuCiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuCiAgICogICAgbWlubGVuZ3RoLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW4KICAgKiAgICBtYXhsZW5ndGguCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZQogICAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3IKICAgKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlcgogICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAgICoKICAgKiBAZXhhbXBsZQogICAgICA8ZG9jOmV4YW1wbGU+CiAgICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS52YWx1ZSA9IDEyOwogICAgICAgICAgIH0KICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICAgTnVtYmVyOiA8aW5wdXQgdHlwZT0ibnVtYmVyIiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InZhbHVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIG1pbj0iMCIgbWF4PSI5OSIgcmVxdWlyZWQ+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0ubGlzdC4kZXJyb3IucmVxdWlyZWQiPgogICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmxpc3QuJGVycm9yLm51bWJlciI+CiAgICAgICAgICAgICBOb3QgdmFsaWQgbnVtYmVyITwvc3Bhbj4KICAgICAgICAgICA8dHQ+dmFsdWUgPSB7e3ZhbHVlfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3ZhbHVlJykpLnRvRXF1YWwoJzEyJyk7CiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgaW5wdXQoJ3ZhbHVlJykuZW50ZXIoJycpOwogICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZScpKS50b0VxdWFsKCcnKTsKICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgaW5wdXQoJ3ZhbHVlJykuZW50ZXIoJzEyMycpOwogICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZScpKS50b0VxdWFsKCcnKTsKICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgfSk7CiAgICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICAgIDwvZG9jOmV4YW1wbGU+CiAgICovCiAgJ251bWJlcic6IG51bWJlcklucHV0VHlwZSwKCgogIC8qKgogICAqIEBuZ2RvYyBpbnB1dFR5cGUKICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6aW5wdXQudXJsCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUZXh0IGlucHV0IHdpdGggVVJMIHZhbGlkYXRpb24uIFNldHMgdGhlIGB1cmxgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBjb250ZW50IGlzIG5vdCBhCiAgICogdmFsaWQgVVJMLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW4KICAgKiAgICBtaW5sZW5ndGguCiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhbgogICAqICAgIG1heGxlbmd0aC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlCiAgICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvcgogICAqICAgIHBhdHRlcm5zIGRlZmluZWQgYXMgc2NvcGUgZXhwcmVzc2lvbnMuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgKgogICAqIEBleGFtcGxlCiAgICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnaHR0cDovL2dvb2dsZS5jb20nOwogICAgICAgICAgIH0KICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICAgVVJMOiA8aW5wdXQgdHlwZT0idXJsIiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InRleHQiIHJlcXVpcmVkPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnVybCI+CiAgICAgICAgICAgICBOb3QgdmFsaWQgdXJsITwvc3Bhbj4KICAgICAgICAgICA8dHQ+dGV4dCA9IHt7dGV4dH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci51cmwgPSB7eyEhbXlGb3JtLiRlcnJvci51cmx9fTwvdHQ+PGJyLz4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2RvYzpzb3VyY2U+CiAgICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBleHBlY3QoYmluZGluZygndGV4dCcpKS50b0VxdWFsKCdodHRwOi8vZ29vZ2xlLmNvbScpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW5wdXQoJ3RleHQnKS5lbnRlcignJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd0ZXh0JykpLnRvRXF1YWwoJycpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCB1cmwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW5wdXQoJ3RleHQnKS5lbnRlcigneHh4Jyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2RvYzpzY2VuYXJpbz4KICAgICAgPC9kb2M6ZXhhbXBsZT4KICAgKi8KICAndXJsJzogdXJsSW5wdXRUeXBlLAoKCiAgLyoqCiAgICogQG5nZG9jIGlucHV0VHlwZQogICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTppbnB1dC5lbWFpbAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGV4dCBpbnB1dCB3aXRoIGVtYWlsIHZhbGlkYXRpb24uIFNldHMgdGhlIGBlbWFpbGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgbm90IGEgdmFsaWQgZW1haWwKICAgKiBhZGRyZXNzLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW4KICAgKiAgICBtaW5sZW5ndGguCiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhbgogICAqICAgIG1heGxlbmd0aC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlCiAgICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvcgogICAqICAgIHBhdHRlcm5zIGRlZmluZWQgYXMgc2NvcGUgZXhwcmVzc2lvbnMuCiAgICoKICAgKiBAZXhhbXBsZQogICAgICA8ZG9jOmV4YW1wbGU+CiAgICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ21lQGV4YW1wbGUuY29tJzsKICAgICAgICAgICB9CiAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICAgICBFbWFpbDogPGlucHV0IHR5cGU9ImVtYWlsIiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InRleHQiIHJlcXVpcmVkPgogICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPgogICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLmVtYWlsIj4KICAgICAgICAgICAgICAgTm90IHZhbGlkIGVtYWlsITwvc3Bhbj4KICAgICAgICAgICAgIDx0dD50ZXh0ID0ge3t0ZXh0fX08L3R0Pjxici8+CiAgICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+CiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5lbWFpbCA9IHt7ISFteUZvcm0uJGVycm9yLmVtYWlsfX08L3R0Pjxici8+CiAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd0ZXh0JykpLnRvRXF1YWwoJ21lQGV4YW1wbGUuY29tJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dCgndGV4dCcpLmVudGVyKCcnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RleHQnKSkudG9FcXVhbCgnJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbm90IGVtYWlsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJ3h4eCcpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgfSk7CiAgICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICAgIDwvZG9jOmV4YW1wbGU+CiAgICovCiAgJ2VtYWlsJzogZW1haWxJbnB1dFR5cGUsCgoKICAvKioKICAgKiBAbmdkb2MgaW5wdXRUeXBlCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmlucHV0LnJhZGlvCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBIVE1MIHJhZGlvIGJ1dHRvbi4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgKgogICAqIEBleGFtcGxlCiAgICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICAgJHNjb3BlLmNvbG9yID0gJ2JsdWUnOwogICAgICAgICAgIH0KICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuZy1tb2RlbD0iY29sb3IiIHZhbHVlPSJyZWQiPiAgUmVkIDxici8+CiAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuZy1tb2RlbD0iY29sb3IiIHZhbHVlPSJncmVlbiI+IEdyZWVuIDxici8+CiAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuZy1tb2RlbD0iY29sb3IiIHZhbHVlPSJibHVlIj4gQmx1ZSA8YnIvPgogICAgICAgICAgIDx0dD5jb2xvciA9IHt7Y29sb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2RvYzpzb3VyY2U+CiAgICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdjb2xvcicpKS50b0VxdWFsKCdibHVlJyk7CgogICAgICAgICAgICBpbnB1dCgnY29sb3InKS5zZWxlY3QoJ3JlZCcpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygnY29sb3InKSkudG9FcXVhbCgncmVkJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2RvYzpzY2VuYXJpbz4KICAgICAgPC9kb2M6ZXhhbXBsZT4KICAgKi8KICAncmFkaW8nOiByYWRpb0lucHV0VHlwZSwKCgogIC8qKgogICAqIEBuZ2RvYyBpbnB1dFR5cGUKICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6aW5wdXQuY2hlY2tib3gKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIEhUTUwgY2hlY2tib3guCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdUcnVlVmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nRmFsc2VWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIG5vdCBzZWxlY3RlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgICAgPGRvYzpleGFtcGxlPgogICAgICAgIDxkb2M6c291cmNlPgogICAgICAgICA8c2NyaXB0PgogICAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgICAkc2NvcGUudmFsdWUxID0gdHJ1ZTsKICAgICAgICAgICAgICRzY29wZS52YWx1ZTIgPSAnWUVTJwogICAgICAgICAgIH0KICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICAgVmFsdWUxOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJ2YWx1ZTEiPiA8YnIvPgogICAgICAgICAgIFZhbHVlMjogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0idmFsdWUyIgogICAgICAgICAgICAgICAgICAgICAgICAgIG5nLXRydWUtdmFsdWU9IllFUyIgbmctZmFsc2UtdmFsdWU9Ik5PIj4gPGJyLz4KICAgICAgICAgICA8dHQ+dmFsdWUxID0ge3t2YWx1ZTF9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+dmFsdWUyID0ge3t2YWx1ZTJ9fTwvdHQ+PGJyLz4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2RvYzpzb3VyY2U+CiAgICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZTEnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygndmFsdWUyJykpLnRvRXF1YWwoJ1lFUycpOwoKICAgICAgICAgICAgaW5wdXQoJ3ZhbHVlMScpLmNoZWNrKCk7CiAgICAgICAgICAgIGlucHV0KCd2YWx1ZTInKS5jaGVjaygpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygndmFsdWUxJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZTInKSkudG9FcXVhbCgnTk8nKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgICA8L2RvYzpleGFtcGxlPgogICAqLwogICdjaGVja2JveCc6IGNoZWNrYm94SW5wdXRUeXBlLAoKICAnaGlkZGVuJzogbm9vcCwKICAnYnV0dG9uJzogbm9vcCwKICAnc3VibWl0Jzogbm9vcCwKICAncmVzZXQnOiBub29wCn07CgoKZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkgewogIHJldHVybiBpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZTsKfQoKCmZ1bmN0aW9uIHRleHRJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlcikgewoKICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbigpIHsKICAgIHZhciB2YWx1ZSA9IHRyaW0oZWxlbWVudC52YWwoKSk7CgogICAgaWYgKGN0cmwuJHZpZXdWYWx1ZSAhPT0gdmFsdWUpIHsKICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2YWx1ZSk7CiAgICAgIH0pOwogICAgfQogIH07CgogIC8vIGlmIHRoZSBicm93c2VyIGRvZXMgc3VwcG9ydCAiaW5wdXQiIGV2ZW50LCB3ZSBhcmUgZmluZSAtIGV4Y2VwdCBvbiBJRTkgd2hpY2ggZG9lc24ndCBmaXJlIHRoZQogIC8vIGlucHV0IGV2ZW50IG9uIGJhY2tzcGFjZSwgZGVsZXRlIG9yIGN1dAogIGlmICgkc25pZmZlci5oYXNFdmVudCgnaW5wdXQnKSkgewogICAgZWxlbWVudC5iaW5kKCdpbnB1dCcsIGxpc3RlbmVyKTsKICB9IGVsc2UgewogICAgdmFyIHRpbWVvdXQ7CgogICAgZWxlbWVudC5iaW5kKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgdmFyIGtleSA9IGV2ZW50LmtleUNvZGU7CgogICAgICAvLyBpZ25vcmUKICAgICAgLy8gICAgY29tbWFuZCAgICAgICAgICAgIG1vZGlmaWVycyAgICAgICAgICAgICAgICAgICBhcnJvd3MKICAgICAgaWYgKGtleSA9PT0gOTEgfHwgKDE1IDwga2V5ICYmIGtleSA8IDE5KSB8fCAoMzcgPD0ga2V5ICYmIGtleSA8PSA0MCkpIHJldHVybjsKCiAgICAgIGlmICghdGltZW91dCkgewogICAgICAgIHRpbWVvdXQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHsKICAgICAgICAgIGxpc3RlbmVyKCk7CiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CgogICAgLy8gaWYgdXNlciBwYXN0ZSBpbnRvIGlucHV0IHVzaW5nIG1vdXNlLCB3ZSBuZWVkICJjaGFuZ2UiIGV2ZW50IHRvIGNhdGNoIGl0CiAgICBlbGVtZW50LmJpbmQoJ2NoYW5nZScsIGxpc3RlbmVyKTsKICB9CgoKICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgIGVsZW1lbnQudmFsKGlzRW1wdHkoY3RybC4kdmlld1ZhbHVlKSA/ICcnIDogY3RybC4kdmlld1ZhbHVlKTsKICB9OwoKICAvLyBwYXR0ZXJuIHZhbGlkYXRvcgogIHZhciBwYXR0ZXJuID0gYXR0ci5uZ1BhdHRlcm4sCiAgICAgIHBhdHRlcm5WYWxpZGF0b3I7CgogIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uKHJlZ2V4cCwgdmFsdWUpIHsKICAgIGlmIChpc0VtcHR5KHZhbHVlKSB8fCByZWdleHAudGVzdCh2YWx1ZSkpIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ3BhdHRlcm4nLCB0cnVlKTsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ3BhdHRlcm4nLCBmYWxzZSk7CiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CiAgfTsKCiAgaWYgKHBhdHRlcm4pIHsKICAgIGlmIChwYXR0ZXJuLm1hdGNoKC9eXC8oLiopXC8kLykpIHsKICAgICAgcGF0dGVybiA9IG5ldyBSZWdFeHAocGF0dGVybi5zdWJzdHIoMSwgcGF0dGVybi5sZW5ndGggLSAyKSk7CiAgICAgIHBhdHRlcm5WYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJldHVybiB2YWxpZGF0ZShwYXR0ZXJuLCB2YWx1ZSkKICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIHBhdHRlcm5WYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHZhciBwYXR0ZXJuT2JqID0gc2NvcGUuJGV2YWwocGF0dGVybik7CgogICAgICAgIGlmICghcGF0dGVybk9iaiB8fCAhcGF0dGVybk9iai50ZXN0KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkICcgKyBwYXR0ZXJuICsgJyB0byBiZSBhIFJlZ0V4cCBidXQgd2FzICcgKyBwYXR0ZXJuT2JqKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHBhdHRlcm5PYmosIHZhbHVlKTsKICAgICAgfTsKICAgIH0KCiAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2gocGF0dGVyblZhbGlkYXRvcik7CiAgICBjdHJsLiRwYXJzZXJzLnB1c2gocGF0dGVyblZhbGlkYXRvcik7CiAgfQoKICAvLyBtaW4gbGVuZ3RoIHZhbGlkYXRvcgogIGlmIChhdHRyLm5nTWlubGVuZ3RoKSB7CiAgICB2YXIgbWlubGVuZ3RoID0gaW50KGF0dHIubmdNaW5sZW5ndGgpOwogICAgdmFyIG1pbkxlbmd0aFZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGlmICghaXNFbXB0eSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoIDwgbWlubGVuZ3RoKSB7CiAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ21pbmxlbmd0aCcsIGZhbHNlKTsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICB9IGVsc2UgewogICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdtaW5sZW5ndGgnLCB0cnVlKTsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0KICAgIH07CgogICAgY3RybC4kcGFyc2Vycy5wdXNoKG1pbkxlbmd0aFZhbGlkYXRvcik7CiAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2gobWluTGVuZ3RoVmFsaWRhdG9yKTsKICB9CgogIC8vIG1heCBsZW5ndGggdmFsaWRhdG9yCiAgaWYgKGF0dHIubmdNYXhsZW5ndGgpIHsKICAgIHZhciBtYXhsZW5ndGggPSBpbnQoYXR0ci5uZ01heGxlbmd0aCk7CiAgICB2YXIgbWF4TGVuZ3RoVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgaWYgKCFpc0VtcHR5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPiBtYXhsZW5ndGgpIHsKICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbWF4bGVuZ3RoJywgZmFsc2UpOwogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ21heGxlbmd0aCcsIHRydWUpOwogICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgfQogICAgfTsKCiAgICBjdHJsLiRwYXJzZXJzLnB1c2gobWF4TGVuZ3RoVmFsaWRhdG9yKTsKICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChtYXhMZW5ndGhWYWxpZGF0b3IpOwogIH0KfQoKZnVuY3Rpb24gbnVtYmVySW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHsKICB0ZXh0SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpOwoKICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgIHZhciBlbXB0eSA9IGlzRW1wdHkodmFsdWUpOwogICAgaWYgKGVtcHR5IHx8IE5VTUJFUl9SRUdFWFAudGVzdCh2YWx1ZSkpIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ251bWJlcicsIHRydWUpOwogICAgICByZXR1cm4gdmFsdWUgPT09ICcnID8gbnVsbCA6IChlbXB0eSA/IHZhbHVlIDogcGFyc2VGbG9hdCh2YWx1ZSkpOwogICAgfSBlbHNlIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ251bWJlcicsIGZhbHNlKTsKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9KTsKCiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gaXNFbXB0eSh2YWx1ZSkgPyAnJyA6ICcnICsgdmFsdWU7CiAgfSk7CgogIGlmIChhdHRyLm1pbikgewogICAgdmFyIG1pbiA9IHBhcnNlRmxvYXQoYXR0ci5taW4pOwogICAgdmFyIG1pblZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGlmICghaXNFbXB0eSh2YWx1ZSkgJiYgdmFsdWUgPCBtaW4pIHsKICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbWluJywgZmFsc2UpOwogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ21pbicsIHRydWUpOwogICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgfQogICAgfTsKCiAgICBjdHJsLiRwYXJzZXJzLnB1c2gobWluVmFsaWRhdG9yKTsKICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChtaW5WYWxpZGF0b3IpOwogIH0KCiAgaWYgKGF0dHIubWF4KSB7CiAgICB2YXIgbWF4ID0gcGFyc2VGbG9hdChhdHRyLm1heCk7CiAgICB2YXIgbWF4VmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgaWYgKCFpc0VtcHR5KHZhbHVlKSAmJiB2YWx1ZSA+IG1heCkgewogICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdtYXgnLCBmYWxzZSk7CiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgfSBlbHNlIHsKICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbWF4JywgdHJ1ZSk7CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9CiAgICB9OwoKICAgIGN0cmwuJHBhcnNlcnMucHVzaChtYXhWYWxpZGF0b3IpOwogICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKG1heFZhbGlkYXRvcik7CiAgfQoKICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKCiAgICBpZiAoaXNFbXB0eSh2YWx1ZSkgfHwgaXNOdW1iZXIodmFsdWUpKSB7CiAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdudW1iZXInLCB0cnVlKTsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ251bWJlcicsIGZhbHNlKTsKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9KTsKfQoKZnVuY3Rpb24gdXJsSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHsKICB0ZXh0SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpOwoKICB2YXIgdXJsVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIGlmIChpc0VtcHR5KHZhbHVlKSB8fCBVUkxfUkVHRVhQLnRlc3QodmFsdWUpKSB7CiAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCd1cmwnLCB0cnVlKTsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ3VybCcsIGZhbHNlKTsKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9OwoKICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2godXJsVmFsaWRhdG9yKTsKICBjdHJsLiRwYXJzZXJzLnB1c2godXJsVmFsaWRhdG9yKTsKfQoKZnVuY3Rpb24gZW1haWxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlcikgewogIHRleHRJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7CgogIHZhciBlbWFpbFZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICBpZiAoaXNFbXB0eSh2YWx1ZSkgfHwgRU1BSUxfUkVHRVhQLnRlc3QodmFsdWUpKSB7CiAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdlbWFpbCcsIHRydWUpOwogICAgICByZXR1cm4gdmFsdWU7CiAgICB9IGVsc2UgewogICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnZW1haWwnLCBmYWxzZSk7CiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CiAgfTsKCiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGVtYWlsVmFsaWRhdG9yKTsKICBjdHJsLiRwYXJzZXJzLnB1c2goZW1haWxWYWxpZGF0b3IpOwp9CgpmdW5jdGlvbiByYWRpb0lucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkgewogIC8vIG1ha2UgdGhlIG5hbWUgdW5pcXVlLCBpZiBub3QgZGVmaW5lZAogIGlmIChpc1VuZGVmaW5lZChhdHRyLm5hbWUpKSB7CiAgICBlbGVtZW50LmF0dHIoJ25hbWUnLCBuZXh0VWlkKCkpOwogIH0KCiAgZWxlbWVudC5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgaWYgKGVsZW1lbnRbMF0uY2hlY2tlZCkgewogICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGF0dHIudmFsdWUpOwogICAgICB9KTsKICAgIH0KICB9KTsKCiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgdmFsdWUgPSBhdHRyLnZhbHVlOwogICAgZWxlbWVudFswXS5jaGVja2VkID0gKHZhbHVlID09IGN0cmwuJHZpZXdWYWx1ZSk7CiAgfTsKCiAgYXR0ci4kb2JzZXJ2ZSgndmFsdWUnLCBjdHJsLiRyZW5kZXIpOwp9CgpmdW5jdGlvbiBjaGVja2JveElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkgewogIHZhciB0cnVlVmFsdWUgPSBhdHRyLm5nVHJ1ZVZhbHVlLAogICAgICBmYWxzZVZhbHVlID0gYXR0ci5uZ0ZhbHNlVmFsdWU7CgogIGlmICghaXNTdHJpbmcodHJ1ZVZhbHVlKSkgdHJ1ZVZhbHVlID0gdHJ1ZTsKICBpZiAoIWlzU3RyaW5nKGZhbHNlVmFsdWUpKSBmYWxzZVZhbHVlID0gZmFsc2U7CgogIGVsZW1lbnQuYmluZCgnY2xpY2snLCBmdW5jdGlvbigpIHsKICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnRbMF0uY2hlY2tlZCk7CiAgICB9KTsKICB9KTsKCiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7CiAgICBlbGVtZW50WzBdLmNoZWNrZWQgPSBjdHJsLiR2aWV3VmFsdWU7CiAgfTsKCiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUgPT09IHRydWVWYWx1ZTsKICB9KTsKCiAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUgPyB0cnVlVmFsdWUgOiBmYWxzZVZhbHVlOwogIH0pOwp9CgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOnRleHRhcmVhCiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBIVE1MIHRleHRhcmVhIGVsZW1lbnQgY29udHJvbCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLiBUaGUgZGF0YS1iaW5kaW5nIGFuZCB2YWxpZGF0aW9uCiAqIHByb3BlcnRpZXMgb2YgdGhpcyBlbGVtZW50IGFyZSBleGFjdGx5IHRoZSBzYW1lIGFzIHRob3NlIG9mIHRoZQogKiB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0IGVsZW1lbnR9LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLgogKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogKiAgICBtaW5sZW5ndGguCiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW4KICogICAgbWF4bGVuZ3RoLgogKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlCiAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3IKICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTppbnB1dAogKiBAcmVzdHJpY3QgRQogKgogKiBAZGVzY3JpcHRpb24KICogSFRNTCBpbnB1dCBlbGVtZW50IGNvbnRyb2wgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy4gSW5wdXQgY29udHJvbCBmb2xsb3dzIEhUTUw1IGlucHV0IHR5cGVzCiAqIGFuZCBwb2x5ZmlsbHMgdGhlIEhUTUw1IHZhbGlkYXRpb24gYmVoYXZpb3IgZm9yIG9sZGVyIGJyb3dzZXJzLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLgogKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogKiAgICBtaW5sZW5ndGguCiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW4KICogICAgbWF4bGVuZ3RoLgogKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlCiAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3IKICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAqCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUudXNlciA9IHtuYW1lOiAnZ3Vlc3QnLCBsYXN0OiAndmlzaXRvcid9OwogICAgICAgICB9CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSI+CiAgICAgICAgICAgVXNlciBuYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0idXNlck5hbWUiIG5nLW1vZGVsPSJ1c2VyLm5hbWUiIHJlcXVpcmVkPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLnVzZXJOYW1lLiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+PGJyPgogICAgICAgICAgIExhc3QgbmFtZTogPGlucHV0IHR5cGU9InRleHQiIG5hbWU9Imxhc3ROYW1lIiBuZy1tb2RlbD0idXNlci5sYXN0IgogICAgICAgICAgICAgbmctbWlubGVuZ3RoPSIzIiBuZy1tYXhsZW5ndGg9IjEwIj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWlubGVuZ3RoIj4KICAgICAgICAgICAgIFRvbyBzaG9ydCE8L3NwYW4+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0ubGFzdE5hbWUuJGVycm9yLm1heGxlbmd0aCI+CiAgICAgICAgICAgICBUb28gbG9uZyE8L3NwYW4+PGJyPgogICAgICAgICA8L2Zvcm0+CiAgICAgICAgIDxocj4KICAgICAgICAgPHR0PnVzZXIgPSB7e3VzZXJ9fTwvdHQ+PGJyLz4KICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kdmFsaWQgPSB7e215Rm9ybS51c2VyTmFtZS4kdmFsaWR9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiRlcnJvciA9IHt7bXlGb3JtLnVzZXJOYW1lLiRlcnJvcn19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJHZhbGlkID0ge3tteUZvcm0ubGFzdE5hbWUuJHZhbGlkfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kZXJyb3IgPSB7e215Rm9ybS5sYXN0TmFtZS4kZXJyb3J9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5taW5sZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5taW5sZW5ndGh9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5tYXhsZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5tYXhsZW5ndGh9fTwvdHQ+PGJyPgogICAgICAgPC9kaXY+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd1c2VyJykpLnRvRXF1YWwoJ3sibmFtZSI6Imd1ZXN0IiwibGFzdCI6InZpc2l0b3IifScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS51c2VyTmFtZS4kdmFsaWQnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHkgd2hlbiByZXF1aXJlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ3VzZXIubmFtZScpLmVudGVyKCcnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd1c2VyJykpLnRvRXF1YWwoJ3sibGFzdCI6InZpc2l0b3IifScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS51c2VyTmFtZS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgaWYgZW1wdHkgd2hlbiBtaW4gbGVuZ3RoIGlzIHNldCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ3VzZXIubGFzdCcpLmVudGVyKCcnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd1c2VyJykpLnRvRXF1YWwoJ3sibmFtZSI6Imd1ZXN0IiwibGFzdCI6IiJ9Jyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmxhc3ROYW1lLiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsZXNzIHRoYW4gcmVxdWlyZWQgbWluIGxlbmd0aCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ3VzZXIubGFzdCcpLmVudGVyKCd4eCcpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3VzZXInKSkudG9FcXVhbCgneyJuYW1lIjoiZ3Vlc3QifScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJGVycm9yJykpLnRvTWF0Y2goL21pbmxlbmd0aC8pOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGxvbmdlciB0aGFuIG1heCBsZW5ndGgnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGlucHV0KCd1c2VyLmxhc3QnKS5lbnRlcignc29tZSByaWRpY3Vsb3VzbHkgbG9uZyBuYW1lJyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygndXNlcicpKQogICAgICAgICAgICAudG9FcXVhbCgneyJuYW1lIjoiZ3Vlc3QifScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJGVycm9yJykpLnRvTWF0Y2goL21heGxlbmd0aC8pOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIGlucHV0RGlyZWN0aXZlID0gWyckYnJvd3NlcicsICckc25pZmZlcicsIGZ1bmN0aW9uKCRicm93c2VyLCAkc25pZmZlcikgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0UnLAogICAgcmVxdWlyZTogJz9uZ01vZGVsJywKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7CiAgICAgIGlmIChjdHJsKSB7CiAgICAgICAgKGlucHV0VHlwZVtsb3dlcmNhc2UoYXR0ci50eXBlKV0gfHwgaW5wdXRUeXBlLnRleHQpKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJyb3dzZXIpOwogICAgICB9CiAgICB9CiAgfTsKfV07Cgp2YXIgVkFMSURfQ0xBU1MgPSAnbmctdmFsaWQnLAogICAgSU5WQUxJRF9DTEFTUyA9ICduZy1pbnZhbGlkJywKICAgIFBSSVNUSU5FX0NMQVNTID0gJ25nLXByaXN0aW5lJywKICAgIERJUlRZX0NMQVNTID0gJ25nLWRpcnR5JzsKCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyCiAqCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAkdmlld1ZhbHVlIEFjdHVhbCBzdHJpbmcgdmFsdWUgaW4gdGhlIHZpZXcuCiAqIEBwcm9wZXJ0eSB7Kn0gJG1vZGVsVmFsdWUgVGhlIHZhbHVlIGluIHRoZSBtb2RlbCwgdGhhdCB0aGUgY29udHJvbCBpcyBib3VuZCB0by4KICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkcGFyc2VycyBXaGVuZXZlciB0aGUgY29udHJvbCByZWFkcyB2YWx1ZSBmcm9tIHRoZSBET00sIGl0IGV4ZWN1dGVzCiAqICAgICBhbGwgb2YgdGhlc2UgZnVuY3Rpb25zIHRvIHNhbml0aXplIC8gY29udmVydCB0aGUgdmFsdWUgYXMgd2VsbCBhcyB2YWxpZGF0ZS4KICoKICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkZm9ybWF0dGVycyBXaGVuZXZlciB0aGUgbW9kZWwgdmFsdWUgY2hhbmdlcywgaXQgZXhlY3V0ZXMgYWxsIG9mCiAqICAgICB0aGVzZSBmdW5jdGlvbnMgdG8gY29udmVydCB0aGUgdmFsdWUgYXMgd2VsbCBhcyB2YWxpZGF0ZS4KICoKICogQHByb3BlcnR5IHtPYmplY3R9ICRlcnJvciBBbiBiamVjdCBoYXNoIHdpdGggYWxsIGVycm9ycyBhcyBrZXlzLgogKgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICRwcmlzdGluZSBUcnVlIGlmIHVzZXIgaGFzIG5vdCBpbnRlcmFjdGVkIHdpdGggdGhlIGNvbnRyb2wgeWV0LgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICRkaXJ0eSBUcnVlIGlmIHVzZXIgaGFzIGFscmVhZHkgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sLgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICR2YWxpZCBUcnVlIGlmIHRoZXJlIGlzIG5vIGVycm9yLgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICRpbnZhbGlkIFRydWUgaWYgYXQgbGVhc3Qgb25lIGVycm9yIG9uIHRoZSBjb250cm9sLgogKgogKiBAZGVzY3JpcHRpb24KICoKICogYE5nTW9kZWxDb250cm9sbGVyYCBwcm92aWRlcyBBUEkgZm9yIHRoZSBgbmctbW9kZWxgIGRpcmVjdGl2ZS4gVGhlIGNvbnRyb2xsZXIgY29udGFpbnMKICogc2VydmljZXMgZm9yIGRhdGEtYmluZGluZywgdmFsaWRhdGlvbiwgQ1NTIHVwZGF0ZSwgdmFsdWUgZm9ybWF0dGluZyBhbmQgcGFyc2luZy4gSXQKICogc3BlY2lmaWNhbGx5IGRvZXMgbm90IGNvbnRhaW4gYW55IGxvZ2ljIHdoaWNoIGRlYWxzIHdpdGggRE9NIHJlbmRlcmluZyBvciBsaXN0ZW5pbmcgdG8KICogRE9NIGV2ZW50cy4gVGhlIGBOZ01vZGVsQ29udHJvbGxlcmAgaXMgbWVhbnQgdG8gYmUgZXh0ZW5kZWQgYnkgb3RoZXIgZGlyZWN0aXZlcyB3aGVyZSwgdGhlCiAqIGRpcmVjdGl2ZSBwcm92aWRlcyBET00gbWFuaXB1bGF0aW9uIGFuZCB0aGUgYE5nTW9kZWxDb250cm9sbGVyYCBwcm92aWRlcyB0aGUgZGF0YS1iaW5kaW5nLgogKgogKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBgTmdNb2RlbENvbnRyb2xsZXJgIHdpdGggYSBjdXN0b20gY29udHJvbCB0byBhY2hpZXZlCiAqIGRhdGEtYmluZGluZy4gTm90aWNlIGhvdyBkaWZmZXJlbnQgZGlyZWN0aXZlcyAoYGNvbnRlbnRlZGl0YWJsZWAsIGBuZy1tb2RlbGAsIGFuZCBgcmVxdWlyZWRgKQogKiBjb2xsYWJvcmF0ZSB0b2dldGhlciB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIHJlc3VsdC4KICoKICogPGV4YW1wbGUgbW9kdWxlPSJjdXN0b21Db250cm9sIj4KICAgIDxmaWxlIG5hbWU9InN0eWxlLmNzcyI+CiAgICAgIFtjb250ZW50ZWRpdGFibGVdIHsKICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjazsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICAgICAgICBtaW4taGVpZ2h0OiAyMHB4OwogICAgICB9CgogICAgICAubmctaW52YWxpZCB7CiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmVkOwogICAgICB9CgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICAgICAgYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUNvbnRyb2wnLCBbXSkuCiAgICAgICAgZGlyZWN0aXZlKCdjb250ZW50ZWRpdGFibGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsIC8vIG9ubHkgYWN0aXZhdGUgb24gZWxlbWVudCBhdHRyaWJ1dGUKICAgICAgICAgICAgcmVxdWlyZTogJz9uZ01vZGVsJywgLy8gZ2V0IGEgaG9sZCBvZiBOZ01vZGVsQ29udHJvbGxlcgogICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHsKICAgICAgICAgICAgICBpZighbmdNb2RlbCkgcmV0dXJuOyAvLyBkbyBub3RoaW5nIGlmIG5vIG5nLW1vZGVsCgogICAgICAgICAgICAgIC8vIFNwZWNpZnkgaG93IFVJIHNob3VsZCBiZSB1cGRhdGVkCiAgICAgICAgICAgICAgbmdNb2RlbC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwobmdNb2RlbC4kdmlld1ZhbHVlIHx8ICcnKTsKICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIGNoYW5nZSBldmVudHMgdG8gZW5hYmxlIGJpbmRpbmcKICAgICAgICAgICAgICBlbGVtZW50LmJpbmQoJ2JsdXIga2V5dXAgY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkocmVhZCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgcmVhZCgpOyAvLyBpbml0aWFsaXplCgogICAgICAgICAgICAgIC8vIFdyaXRlIGRhdGEgdG8gdGhlIG1vZGVsCiAgICAgICAgICAgICAgZnVuY3Rpb24gcmVhZCgpIHsKICAgICAgICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShlbGVtZW50Lmh0bWwoKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0pOwogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSI+CiAgICAgICA8ZGl2IGNvbnRlbnRlZGl0YWJsZQogICAgICAgICAgICBuYW1lPSJteVdpZGdldCIgbmctbW9kZWw9InVzZXJDb250ZW50IgogICAgICAgICAgICByZXF1aXJlZD5DaGFuZ2UgbWUhPC9kaXY+CiAgICAgICAgPHNwYW4gbmctc2hvdz0ibXlGb3JtLm15V2lkZ2V0LiRlcnJvci5yZXF1aXJlZCI+UmVxdWlyZWQhPC9zcGFuPgogICAgICAgPGhyPgogICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPSJ1c2VyQ29udGVudCI+PC90ZXh0YXJlYT4KICAgICAgPC9mb3JtPgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0ic2NlbmFyaW8uanMiPgogICAgICBpdCgnc2hvdWxkIGRhdGEtYmluZCBhbmQgYmVjb21lIGludmFsaWQnLCBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgY29udGVudEVkaXRhYmxlID0gZWxlbWVudCgnW2NvbnRlbnRlZGl0YWJsZV0nKTsKCiAgICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS50ZXh0KCkpLnRvRXF1YWwoJ0NoYW5nZSBtZSEnKTsKICAgICAgICBpbnB1dCgndXNlckNvbnRlbnQnKS5lbnRlcignJyk7CiAgICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS50ZXh0KCkpLnRvRXF1YWwoJycpOwogICAgICAgIGV4cGVjdChjb250ZW50RWRpdGFibGUucHJvcCgnY2xhc3NOYW1lJykpLnRvTWF0Y2goL25nLWludmFsaWQtcmVxdWlyZWQvKTsKICAgICAgfSk7CiAgICA8L2ZpbGU+CiAqIDwvZXhhbXBsZT4KICoKICovCnZhciBOZ01vZGVsQ29udHJvbGxlciA9IFsnJHNjb3BlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRhdHRycycsICckZWxlbWVudCcsICckcGFyc2UnLAogICAgZnVuY3Rpb24oJHNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlciwgJGF0dHIsICRlbGVtZW50LCAkcGFyc2UpIHsKICB0aGlzLiR2aWV3VmFsdWUgPSBOdW1iZXIuTmFOOwogIHRoaXMuJG1vZGVsVmFsdWUgPSBOdW1iZXIuTmFOOwogIHRoaXMuJHBhcnNlcnMgPSBbXTsKICB0aGlzLiRmb3JtYXR0ZXJzID0gW107CiAgdGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycyA9IFtdOwogIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTsKICB0aGlzLiRkaXJ0eSA9IGZhbHNlOwogIHRoaXMuJHZhbGlkID0gdHJ1ZTsKICB0aGlzLiRpbnZhbGlkID0gZmFsc2U7CiAgdGhpcy4kbmFtZSA9ICRhdHRyLm5hbWU7CgogIHZhciBuZ01vZGVsR2V0ID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwpLAogICAgICBuZ01vZGVsU2V0ID0gbmdNb2RlbEdldC5hc3NpZ247CgogIGlmICghbmdNb2RlbFNldCkgewogICAgdGhyb3cgRXJyb3IoTk9OX0FTU0lHTkFCTEVfTU9ERUxfRVhQUkVTU0lPTiArICRhdHRyLm5nTW9kZWwgKwogICAgICAgICcgKCcgKyBzdGFydGluZ1RhZygkZWxlbWVudCkgKyAnKScpOwogIH0KCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJlbmRlcgogICAqIEBtZXRob2RPZiBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogQ2FsbGVkIHdoZW4gdGhlIHZpZXcgbmVlZHMgdG8gYmUgdXBkYXRlZC4gSXQgaXMgZXhwZWN0ZWQgdGhhdCB0aGUgdXNlciBvZiB0aGUgbmctbW9kZWwKICAgKiBkaXJlY3RpdmUgd2lsbCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuCiAgICovCiAgdGhpcy4kcmVuZGVyID0gbm9vcDsKCiAgdmFyIHBhcmVudEZvcm0gPSAkZWxlbWVudC5pbmhlcml0ZWREYXRhKCckZm9ybUNvbnRyb2xsZXInKSB8fCBudWxsRm9ybUN0cmwsCiAgICAgIGludmFsaWRDb3VudCA9IDAsIC8vIHVzZWQgdG8gZWFzaWx5IGRldGVybWluZSBpZiB3ZSBhcmUgdmFsaWQKICAgICAgJGVycm9yID0gdGhpcy4kZXJyb3IgPSB7fTsgLy8ga2VlcCBpbnZhbGlkIGtleXMgaGVyZQoKCiAgLy8gU2V0dXAgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgY29udHJvbAogICRlbGVtZW50LmFkZENsYXNzKFBSSVNUSU5FX0NMQVNTKTsKICB0b2dnbGVWYWxpZENzcyh0cnVlKTsKCiAgLy8gY29udmVuaWVuY2UgbWV0aG9kIGZvciBlYXN5IHRvZ2dsaW5nIG9mIGNsYXNzZXMKICBmdW5jdGlvbiB0b2dnbGVWYWxpZENzcyhpc1ZhbGlkLCB2YWxpZGF0aW9uRXJyb3JLZXkpIHsKICAgIHZhbGlkYXRpb25FcnJvcktleSA9IHZhbGlkYXRpb25FcnJvcktleSA/ICctJyArIHNuYWtlX2Nhc2UodmFsaWRhdGlvbkVycm9yS2V5LCAnLScpIDogJyc7CiAgICAkZWxlbWVudC4KICAgICAgcmVtb3ZlQ2xhc3MoKGlzVmFsaWQgPyBJTlZBTElEX0NMQVNTIDogVkFMSURfQ0xBU1MpICsgdmFsaWRhdGlvbkVycm9yS2V5KS4KICAgICAgYWRkQ2xhc3MoKGlzVmFsaWQgPyBWQUxJRF9DTEFTUyA6IElOVkFMSURfQ0xBU1MpICsgdmFsaWRhdGlvbkVycm9yS2V5KTsKICB9CgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWYWxpZGl0eQogICAqIEBtZXRob2RPZiBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogQ2hhbmdlIHRoZSB2YWxpZGl0eSBzdGF0ZSwgYW5kIG5vdGlmaWVzIHRoZSBmb3JtIHdoZW4gdGhlIGNvbnRyb2wgY2hhbmdlcyB2YWxpZGl0eS4gKGkuZS4gaXQKICAgKiBkb2VzIG5vdCBub3RpZnkgZm9ybSBpZiBnaXZlbiB2YWxpZGF0b3IgaXMgYWxyZWFkeSBtYXJrZWQgYXMgaW52YWxpZCkuCiAgICoKICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJ5IHZhbGlkYXRvcnMgLSBpLmUuIHRoZSBwYXJzZXIgb3IgZm9ybWF0dGVyIGZ1bmN0aW9ucy4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSB2YWxpZGF0aW9uRXJyb3JLZXkgTmFtZSBvZiB0aGUgdmFsaWRhdG9yLiB0aGUgYHZhbGlkYXRpb25FcnJvcktleWAgd2lsbCBhc3NpZ24KICAgKiAgICAgICAgdG8gYCRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldPWlzVmFsaWRgIHNvIHRoYXQgaXQgaXMgYXZhaWxhYmxlIGZvciBkYXRhLWJpbmRpbmcuCiAgICogICAgICAgIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCBzaG91bGQgYmUgaW4gY2FtZWxDYXNlIGFuZCB3aWxsIGdldCBjb252ZXJ0ZWQgaW50byBkYXNoLWNhc2UKICAgKiAgICAgICAgZm9yIGNsYXNzIG5hbWUuIEV4YW1wbGU6IGBteUVycm9yYCB3aWxsIHJlc3VsdCBpbiBgbmctdmFsaWQtbXktZXJyb3JgIGFuZCBgbmctaW52YWxpZC1teS1lcnJvcmAKICAgKiAgICAgICAgY2xhc3MgYW5kIGNhbiBiZSBib3VuZCB0byBhcyAgYHt7c29tZUZvcm0uc29tZUNvbnRyb2wuJGVycm9yLm15RXJyb3J9fWAgLgogICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWYWxpZCBXaGV0aGVyIHRoZSBjdXJyZW50IHN0YXRlIGlzIHZhbGlkICh0cnVlKSBvciBpbnZhbGlkIChmYWxzZSkuCiAgICovCiAgdGhpcy4kc2V0VmFsaWRpdHkgPSBmdW5jdGlvbih2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQpIHsKICAgIGlmICgkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSA9PT0gIWlzVmFsaWQpIHJldHVybjsKCiAgICBpZiAoaXNWYWxpZCkgewogICAgICBpZiAoJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV0pIGludmFsaWRDb3VudC0tOwogICAgICBpZiAoIWludmFsaWRDb3VudCkgewogICAgICAgIHRvZ2dsZVZhbGlkQ3NzKHRydWUpOwogICAgICAgIHRoaXMuJHZhbGlkID0gdHJ1ZTsKICAgICAgICB0aGlzLiRpbnZhbGlkID0gZmFsc2U7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRvZ2dsZVZhbGlkQ3NzKGZhbHNlKTsKICAgICAgdGhpcy4kaW52YWxpZCA9IHRydWU7CiAgICAgIHRoaXMuJHZhbGlkID0gZmFsc2U7CiAgICAgIGludmFsaWRDb3VudCsrOwogICAgfQoKICAgICRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldID0gIWlzVmFsaWQ7CiAgICB0b2dnbGVWYWxpZENzcyhpc1ZhbGlkLCB2YWxpZGF0aW9uRXJyb3JLZXkpOwoKICAgIHBhcmVudEZvcm0uJHNldFZhbGlkaXR5KHZhbGlkYXRpb25FcnJvcktleSwgaXNWYWxpZCwgdGhpcyk7CiAgfTsKCgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWaWV3VmFsdWUKICAgKiBAbWV0aG9kT2YgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJlYWQgYSB2YWx1ZSBmcm9tIHZpZXcuCiAgICoKICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGZyb20gd2l0aGluIGEgRE9NIGV2ZW50IGhhbmRsZXIuCiAgICogRm9yIGV4YW1wbGUge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dH0gb3IKICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOnNlbGVjdCBzZWxlY3R9IGRpcmVjdGl2ZXMgY2FsbCBpdC4KICAgKgogICAqIEl0IGludGVybmFsbHkgY2FsbHMgYWxsIGBmb3JtYXR0ZXJzYCBhbmQgaWYgcmVzdWx0ZWQgdmFsdWUgaXMgdmFsaWQsIHVwZGF0ZXMgdGhlIG1vZGVsIGFuZAogICAqIGNhbGxzIGFsbCByZWdpc3RlcmVkIGNoYW5nZSBsaXN0ZW5lcnMuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgZnJvbSB0aGUgdmlldy4KICAgKi8KICB0aGlzLiRzZXRWaWV3VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgdGhpcy4kdmlld1ZhbHVlID0gdmFsdWU7CgogICAgLy8gY2hhbmdlIHRvIGRpcnR5CiAgICBpZiAodGhpcy4kcHJpc3RpbmUpIHsKICAgICAgdGhpcy4kZGlydHkgPSB0cnVlOwogICAgICB0aGlzLiRwcmlzdGluZSA9IGZhbHNlOwogICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoRElSVFlfQ0xBU1MpOwogICAgICBwYXJlbnRGb3JtLiRzZXREaXJ0eSgpOwogICAgfQoKICAgIGZvckVhY2godGhpcy4kcGFyc2VycywgZnVuY3Rpb24oZm4pIHsKICAgICAgdmFsdWUgPSBmbih2YWx1ZSk7CiAgICB9KTsKCiAgICBpZiAodGhpcy4kbW9kZWxWYWx1ZSAhPT0gdmFsdWUpIHsKICAgICAgdGhpcy4kbW9kZWxWYWx1ZSA9IHZhbHVlOwogICAgICBuZ01vZGVsU2V0KCRzY29wZSwgdmFsdWUpOwogICAgICBmb3JFYWNoKHRoaXMuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGxpc3RlbmVyKCk7CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICB9CiAgICAgIH0pCiAgICB9CiAgfTsKCiAgLy8gbW9kZWwgLT4gdmFsdWUKICB2YXIgY3RybCA9IHRoaXM7CiAgJHNjb3BlLiR3YXRjaChuZ01vZGVsR2V0LCBmdW5jdGlvbih2YWx1ZSkgewoKICAgIC8vIGlnbm9yZSBjaGFuZ2UgZnJvbSB2aWV3CiAgICBpZiAoY3RybC4kbW9kZWxWYWx1ZSA9PT0gdmFsdWUpIHJldHVybjsKCiAgICB2YXIgZm9ybWF0dGVycyA9IGN0cmwuJGZvcm1hdHRlcnMsCiAgICAgICAgaWR4ID0gZm9ybWF0dGVycy5sZW5ndGg7CgogICAgY3RybC4kbW9kZWxWYWx1ZSA9IHZhbHVlOwogICAgd2hpbGUoaWR4LS0pIHsKICAgICAgdmFsdWUgPSBmb3JtYXR0ZXJzW2lkeF0odmFsdWUpOwogICAgfQoKICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZhbHVlKSB7CiAgICAgIGN0cmwuJHZpZXdWYWx1ZSA9IHZhbHVlOwogICAgICBjdHJsLiRyZW5kZXIoKTsKICAgIH0KICB9KTsKfV07CgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW9kZWwKICoKICogQGVsZW1lbnQgaW5wdXQKICoKICogQGRlc2NyaXB0aW9uCiAqIElzIGRpcmVjdGl2ZSB0aGF0IHRlbGxzIEFuZ3VsYXIgdG8gZG8gdHdvLXdheSBkYXRhIGJpbmRpbmcuIEl0IHdvcmtzIHRvZ2V0aGVyIHdpdGggYGlucHV0YCwKICogYHNlbGVjdGAsIGB0ZXh0YXJlYWAuIFlvdSBjYW4gZWFzaWx5IHdyaXRlIHlvdXIgb3duIGRpcmVjdGl2ZXMgdG8gdXNlIGBuZ01vZGVsYCBhcyB3ZWxsLgogKgogKiBgbmdNb2RlbGAgaXMgcmVzcG9uc2libGUgZm9yOgogKgogKiAtIGJpbmRpbmcgdGhlIHZpZXcgaW50byB0aGUgbW9kZWwsIHdoaWNoIG90aGVyIGRpcmVjdGl2ZXMgc3VjaCBhcyBgaW5wdXRgLCBgdGV4dGFyZWFgIG9yIGBzZWxlY3RgCiAqICAgcmVxdWlyZSwKICogLSBwcm92aWRpbmcgdmFsaWRhdGlvbiBiZWhhdmlvciAoaS5lLiByZXF1aXJlZCwgbnVtYmVyLCBlbWFpbCwgdXJsKSwKICogLSBrZWVwaW5nIHN0YXRlIG9mIHRoZSBjb250cm9sICh2YWxpZC9pbnZhbGlkLCBkaXJ0eS9wcmlzdGluZSwgdmFsaWRhdGlvbiBlcnJvcnMpLAogKiAtIHNldHRpbmcgcmVsYXRlZCBjc3MgY2xhc3Mgb250byB0aGUgZWxlbWVudCAoYG5nLXZhbGlkYCwgYG5nLWludmFsaWRgLCBgbmctZGlydHlgLCBgbmctcHJpc3RpbmVgKSwKICogLSByZWdpc3RlciB0aGUgY29udHJvbCB3aXRoIHBhcmVudCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0uCiAqCiAqIEZvciBiYXNpYyBleGFtcGxlcywgaG93IHRvIHVzZSBgbmdNb2RlbGAsIHNlZToKICoKICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dH0KICogICAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0LnRleHQgdGV4dH0KICogICAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0LmNoZWNrYm94IGNoZWNrYm94fQogKiAgICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQucmFkaW8gcmFkaW99CiAqICAgIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dC5udW1iZXIgbnVtYmVyfQogKiAgICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQuZW1haWwgZW1haWx9CiAqICAgIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dC51cmwgdXJsfQogKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOnNlbGVjdCBzZWxlY3R9CiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6dGV4dGFyZWEgdGV4dGFyZWF9CiAqCiAqLwp2YXIgbmdNb2RlbERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAnXj9mb3JtJ10sCiAgICBjb250cm9sbGVyOiBOZ01vZGVsQ29udHJvbGxlciwKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykgewogICAgICAvLyBub3RpZnkgb3RoZXJzLCBlc3BlY2lhbGx5IHBhcmVudCBmb3JtcwoKICAgICAgdmFyIG1vZGVsQ3RybCA9IGN0cmxzWzBdLAogICAgICAgICAgZm9ybUN0cmwgPSBjdHJsc1sxXSB8fCBudWxsRm9ybUN0cmw7CgogICAgICBmb3JtQ3RybC4kYWRkQ29udHJvbChtb2RlbEN0cmwpOwoKICAgICAgZWxlbWVudC5iaW5kKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgIGZvcm1DdHJsLiRyZW1vdmVDb250cm9sKG1vZGVsQ3RybCk7CiAgICAgIH0pOwogICAgfQogIH07Cn07CgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ2hhbmdlCiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBFdmFsdWF0ZSBnaXZlbiBleHByZXNzaW9uIHdoZW4gdXNlciBjaGFuZ2VzIHRoZSBpbnB1dC4KICogVGhlIGV4cHJlc3Npb24gaXMgbm90IGV2YWx1YXRlZCB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2UgaXMgY29taW5nIGZyb20gdGhlIG1vZGVsLgogKgogKiBOb3RlLCB0aGlzIGRpcmVjdGl2ZSByZXF1aXJlcyBgbmdNb2RlbGAgdG8gYmUgcHJlc2VudC4KICoKICogQGVsZW1lbnQgaW5wdXQKICoKICogQGV4YW1wbGUKICogPGRvYzpleGFtcGxlPgogKiAgIDxkb2M6c291cmNlPgogKiAgICAgPHNjcmlwdD4KICogICAgICAgZnVuY3Rpb24gQ29udHJvbGxlcigkc2NvcGUpIHsKICogICAgICAgICAkc2NvcGUuY291bnRlciA9IDA7CiAqICAgICAgICAgJHNjb3BlLmNoYW5nZSA9IGZ1bmN0aW9uKCkgewogKiAgICAgICAgICAgJHNjb3BlLmNvdW50ZXIrKzsKICogICAgICAgICB9OwogKiAgICAgICB9CiAqICAgICA8L3NjcmlwdD4KICogICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ29udHJvbGxlciI+CiAqICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9ImNvbmZpcm1lZCIgbmctY2hhbmdlPSJjaGFuZ2UoKSIgaWQ9Im5nLWNoYW5nZS1leGFtcGxlMSIgLz4KICogICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iY29uZmlybWVkIiBpZD0ibmctY2hhbmdlLWV4YW1wbGUyIiAvPgogKiAgICAgICA8bGFiZWwgZm9yPSJuZy1jaGFuZ2UtZXhhbXBsZTIiPkNvbmZpcm1lZDwvbGFiZWw+PGJyIC8+CiAqICAgICAgIGRlYnVnID0ge3tjb25maXJtZWR9fTxiciAvPgogKiAgICAgICBjb3VudGVyID0ge3tjb3VudGVyfX0KICogICAgIDwvZGl2PgogKiAgIDwvZG9jOnNvdXJjZT4KICogICA8ZG9jOnNjZW5hcmlvPgogKiAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIHZpZXcnLCBmdW5jdGlvbigpIHsKICogICAgICAgZXhwZWN0KGJpbmRpbmcoJ2NvdW50ZXInKSkudG9FcXVhbCgnMCcpOwogKiAgICAgICBlbGVtZW50KCcjbmctY2hhbmdlLWV4YW1wbGUxJykuY2xpY2soKTsKICogICAgICAgZXhwZWN0KGJpbmRpbmcoJ2NvdW50ZXInKSkudG9FcXVhbCgnMScpOwogKiAgICAgICBleHBlY3QoYmluZGluZygnY29uZmlybWVkJykpLnRvRXF1YWwoJ3RydWUnKTsKICogICAgIH0pOwogKgogKiAgICAgaXQoJ3Nob3VsZCBub3QgZXZhbHVhdGUgdGhlIGV4cHJlc3Npb24gaWYgY2hhbmdpbmcgZnJvbSBtb2RlbCcsIGZ1bmN0aW9uKCkgewogKiAgICAgICBlbGVtZW50KCcjbmctY2hhbmdlLWV4YW1wbGUyJykuY2xpY2soKTsKICogICAgICAgZXhwZWN0KGJpbmRpbmcoJ2NvdW50ZXInKSkudG9FcXVhbCgnMCcpOwogKiAgICAgICBleHBlY3QoYmluZGluZygnY29uZmlybWVkJykpLnRvRXF1YWwoJ3RydWUnKTsKICogICAgIH0pOwogKiAgIDwvZG9jOnNjZW5hcmlvPgogKiA8L2RvYzpleGFtcGxlPgogKi8KdmFyIG5nQ2hhbmdlRGlyZWN0aXZlID0gdmFsdWVGbih7CiAgcmVxdWlyZTogJ25nTW9kZWwnLAogIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7CiAgICBjdHJsLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oKSB7CiAgICAgIHNjb3BlLiRldmFsKGF0dHIubmdDaGFuZ2UpOwogICAgfSk7CiAgfQp9KTsKCgp2YXIgcmVxdWlyZWREaXJlY3RpdmUgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgcmVxdWlyZTogJz9uZ01vZGVsJywKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHsKICAgICAgaWYgKCFjdHJsKSByZXR1cm47CiAgICAgIGF0dHIucmVxdWlyZWQgPSB0cnVlOyAvLyBmb3JjZSB0cnV0aHkgaW4gY2FzZSB3ZSBhcmUgb24gbm9uIGlucHV0IGVsZW1lbnQKCiAgICAgIHZhciB2YWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIGlmIChhdHRyLnJlcXVpcmVkICYmIChpc0VtcHR5KHZhbHVlKSB8fCB2YWx1ZSA9PT0gZmFsc2UpKSB7CiAgICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgncmVxdWlyZWQnLCBmYWxzZSk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdyZXF1aXJlZCcsIHRydWUpOwogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaCh2YWxpZGF0b3IpOwogICAgICBjdHJsLiRwYXJzZXJzLnVuc2hpZnQodmFsaWRhdG9yKTsKCiAgICAgIGF0dHIuJG9ic2VydmUoJ3JlcXVpcmVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgdmFsaWRhdG9yKGN0cmwuJHZpZXdWYWx1ZSk7CiAgICAgIH0pOwogICAgfQogIH07Cn07CgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTGlzdAogKgogKiBAZGVzY3JpcHRpb24KICogVGV4dCBpbnB1dCB0aGF0IGNvbnZlcnRzIGJldHdlZW4gY29tbWEtc2VwZXJhdGVkIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIHN0cmluZ3MuCiAqCiAqIEBlbGVtZW50IGlucHV0CiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdMaXN0IG9wdGlvbmFsIGRlbGltaXRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHNwbGl0IHRoZSB2YWx1ZS4gSWYKICogICBzcGVjaWZpZWQgaW4gZm9ybSBgL3NvbWV0aGluZy9gIHRoZW4gdGhlIHZhbHVlIHdpbGwgYmUgY29udmVydGVkIGludG8gYSByZWd1bGFyIGV4cHJlc3Npb24uCiAqCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ2lnb3InLCAnbWlza28nLCAndm9qdGEnXTsKICAgICAgICAgfQogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICBMaXN0OiA8aW5wdXQgbmFtZT0ibmFtZXNJbnB1dCIgbmctbW9kZWw9Im5hbWVzIiBuZy1saXN0IHJlcXVpcmVkPgogICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5saXN0LiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPgogICAgICAgICA8dHQ+bmFtZXMgPSB7e25hbWVzfX08L3R0Pjxici8+CiAgICAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICA8dHQ+bXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yID0ge3tteUZvcm0ubmFtZXNJbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgICAgIDwvZm9ybT4KICAgICAgPC9kb2M6c291cmNlPgogICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ25hbWVzJykpLnRvRXF1YWwoJ1siaWdvciIsIm1pc2tvIiwidm9qdGEiXScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ25hbWVzJykuZW50ZXIoJycpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ25hbWVzJykpLnRvRXF1YWwoJ1tdJyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICovCnZhciBuZ0xpc3REaXJlY3RpdmUgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgcmVxdWlyZTogJ25nTW9kZWwnLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHsKICAgICAgdmFyIG1hdGNoID0gL1wvKC4qKVwvLy5leGVjKGF0dHIubmdMaXN0KSwKICAgICAgICAgIHNlcGFyYXRvciA9IG1hdGNoICYmIG5ldyBSZWdFeHAobWF0Y2hbMV0pIHx8IGF0dHIubmdMaXN0IHx8ICcsJzsKCiAgICAgIHZhciBwYXJzZSA9IGZ1bmN0aW9uKHZpZXdWYWx1ZSkgewogICAgICAgIHZhciBsaXN0ID0gW107CgogICAgICAgIGlmICh2aWV3VmFsdWUpIHsKICAgICAgICAgIGZvckVhY2godmlld1ZhbHVlLnNwbGl0KHNlcGFyYXRvciksIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZSkgbGlzdC5wdXNoKHRyaW0odmFsdWUpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGxpc3Q7CiAgICAgIH07CgogICAgICBjdHJsLiRwYXJzZXJzLnB1c2gocGFyc2UpOwogICAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgIWVxdWFscyhwYXJzZShjdHJsLiR2aWV3VmFsdWUpLCB2YWx1ZSkpIHsKICAgICAgICAgIHJldHVybiB2YWx1ZS5qb2luKCcsICcpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgfSk7CiAgICB9CiAgfTsKfTsKCgp2YXIgQ09OU1RBTlRfVkFMVUVfUkVHRVhQID0gL14odHJ1ZXxmYWxzZXxcZCspJC87Cgp2YXIgbmdWYWx1ZURpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICBwcmlvcml0eTogMTAwLAogICAgY29tcGlsZTogZnVuY3Rpb24odHBsLCB0cGxBdHRyKSB7CiAgICAgIGlmIChDT05TVEFOVF9WQUxVRV9SRUdFWFAudGVzdCh0cGxBdHRyLm5nVmFsdWUpKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIpIHsKICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBzY29wZS4kZXZhbChhdHRyLm5nVmFsdWUpKTsKICAgICAgICB9OwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyKSB7CiAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ1ZhbHVlLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgdmFsdWUsIGZhbHNlKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgIH0KICAgIH0KICB9Owp9OwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQmluZAogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0JpbmRgIGF0dHJpYnV0ZSB0ZWxscyBBbmd1bGFyIHRvIHJlcGxhY2UgdGhlIHRleHQgY29udGVudCBvZiB0aGUgc3BlY2lmaWVkIEhUTUwgZWxlbWVudAogKiB3aXRoIHRoZSB2YWx1ZSBvZiBhIGdpdmVuIGV4cHJlc3Npb24sIGFuZCB0byB1cGRhdGUgdGhlIHRleHQgY29udGVudCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGF0CiAqIGV4cHJlc3Npb24gY2hhbmdlcy4KICoKICogVHlwaWNhbGx5LCB5b3UgZG9uJ3QgdXNlIGBuZ0JpbmRgIGRpcmVjdGx5LCBidXQgaW5zdGVhZCB5b3UgdXNlIHRoZSBkb3VibGUgY3VybHkgbWFya3VwIGxpa2UKICogYHt7IGV4cHJlc3Npb24gfX1gIHdoaWNoIGlzIHNpbWlsYXIgYnV0IGxlc3MgdmVyYm9zZS4KICoKICogT25jZSBzY2VuYXJpbyBpbiB3aGljaCB0aGUgdXNlIG9mIGBuZ0JpbmRgIGlzIHByZWZlcmVkIG92ZXIgYHt7IGV4cHJlc3Npb24gfX1gIGJpbmRpbmcgaXMgd2hlbgogKiBpdCdzIGRlc2lyYWJsZSB0byBwdXQgYmluZGluZ3MgaW50byB0ZW1wbGF0ZSB0aGF0IGlzIG1vbWVudGFyaWx5IGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMKICogcmF3IHN0YXRlIGJlZm9yZSBBbmd1bGFyIGNvbXBpbGVzIGl0LiBTaW5jZSBgbmdCaW5kYCBpcyBhbiBlbGVtZW50IGF0dHJpYnV0ZSwgaXQgbWFrZXMgdGhlCiAqIGJpbmRpbmdzIGludmlzaWJsZSB0byB0aGUgdXNlciB3aGlsZSB0aGUgcGFnZSBpcyBsb2FkaW5nLgogKgogKiBBbiBhbHRlcm5hdGl2ZSBzb2x1dGlvbiB0byB0aGlzIHByb2JsZW0gd291bGQgYmUgdXNpbmcgdGhlCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbG9hayBuZ0Nsb2FrfSBkaXJlY3RpdmUuCiAqCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS4KICoKICogQGV4YW1wbGUKICogRW50ZXIgYSBuYW1lIGluIHRoZSBMaXZlIFByZXZpZXcgdGV4dCBib3g7IHRoZSBncmVldGluZyBiZWxvdyB0aGUgdGV4dCBib3ggY2hhbmdlcyBpbnN0YW50bHkuCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV2hpcmxlZCc7CiAgICAgICAgIH0KICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgRW50ZXIgbmFtZTogPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJuYW1lIj48YnI+CiAgICAgICAgIEhlbGxvIDxzcGFuIG5nLWJpbmQ9Im5hbWUiPjwvc3Bhbj4hCiAgICAgICA8L2Rpdj4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctYmluZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QodXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuYmluZGluZygnbmFtZScpKS50b0JlKCdXaGlybGVkJyk7CiAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmlucHV0KCduYW1lJykuZW50ZXIoJ3dvcmxkJyk7CiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCduYW1lJykpLnRvQmUoJ3dvcmxkJyk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCnZhciBuZ0JpbmREaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZShmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogIGVsZW1lbnQuYWRkQ2xhc3MoJ25nLWJpbmRpbmcnKS5kYXRhKCckYmluZGluZycsIGF0dHIubmdCaW5kKTsKICBzY29wZS4kd2F0Y2goYXR0ci5uZ0JpbmQsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICBlbGVtZW50LnRleHQodmFsdWUgPT0gdW5kZWZpbmVkID8gJycgOiB2YWx1ZSk7CiAgfSk7Cn0pOwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0JpbmRUZW1wbGF0ZQogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0JpbmRUZW1wbGF0ZWAgZGlyZWN0aXZlIHNwZWNpZmllcyB0aGF0IHRoZSBlbGVtZW50CiAqIHRleHQgc2hvdWxkIGJlIHJlcGxhY2VkIHdpdGggdGhlIHRlbXBsYXRlIGluIG5nQmluZFRlbXBsYXRlLgogKiBVbmxpa2UgbmdCaW5kIHRoZSBuZ0JpbmRUZW1wbGF0ZSBjYW4gY29udGFpbiBtdWx0aXBsZSBge3tgIGB9fWAKICogZXhwcmVzc2lvbnMuIChUaGlzIGlzIHJlcXVpcmVkIHNpbmNlIHNvbWUgSFRNTCBlbGVtZW50cwogKiBjYW4gbm90IGhhdmUgU1BBTiBlbGVtZW50cyBzdWNoIGFzIFRJVExFLCBvciBPUFRJT04gdG8gbmFtZSBhIGZldy4pCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge3N0cmluZ30gbmdCaW5kVGVtcGxhdGUgdGVtcGxhdGUgb2YgZm9ybQogKiAgIDx0dD57ezwvdHQ+IDx0dD5leHByZXNzaW9uPC90dD4gPHR0Pn19PC90dD4gdG8gZXZhbC4KICoKICogQGV4YW1wbGUKICogVHJ5IGl0IGhlcmU6IGVudGVyIHRleHQgaW4gdGV4dCBib3ggYW5kIHdhdGNoIHRoZSBncmVldGluZyBjaGFuZ2UuCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLnNhbHV0YXRpb24gPSAnSGVsbG8nOwogICAgICAgICAgICRzY29wZS5uYW1lID0gJ1dvcmxkJzsKICAgICAgICAgfQogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgIFNhbHV0YXRpb246IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0ic2FsdXRhdGlvbiI+PGJyPgogICAgICAgIE5hbWU6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0ibmFtZSI+PGJyPgogICAgICAgIDxwcmUgbmctYmluZC10ZW1wbGF0ZT0ie3tzYWx1dGF0aW9ufX0ge3tuYW1lfX0hIj48L3ByZT4KICAgICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCdzYWx1dGF0aW9uJykpLgogICAgICAgICAgIHRvQmUoJ0hlbGxvJyk7CiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCduYW1lJykpLgogICAgICAgICAgIHRvQmUoJ1dvcmxkJyk7CiAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmlucHV0KCdzYWx1dGF0aW9uJykuZW50ZXIoJ0dyZWV0aW5ncycpOwogICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgnbmFtZScpLmVudGVyKCd1c2VyJyk7CiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCdzYWx1dGF0aW9uJykpLgogICAgICAgICAgIHRvQmUoJ0dyZWV0aW5ncycpOwogICAgICAgICBleHBlY3QodXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuYmluZGluZygnbmFtZScpKS4KICAgICAgICAgICB0b0JlKCd1c2VyJyk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCnZhciBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgZnVuY3Rpb24oJGludGVycG9sYXRlKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAvLyBUT0RPOiBtb3ZlIHRoaXMgdG8gc2NlbmFyaW8gcnVubmVyCiAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci5uZ0JpbmRUZW1wbGF0ZSkpOwogICAgZWxlbWVudC5hZGRDbGFzcygnbmctYmluZGluZycpLmRhdGEoJyRiaW5kaW5nJywgaW50ZXJwb2xhdGVGbik7CiAgICBhdHRyLiRvYnNlcnZlKCduZ0JpbmRUZW1wbGF0ZScsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGVsZW1lbnQudGV4dCh2YWx1ZSk7CiAgICB9KTsKICB9Cn1dOwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0JpbmRIdG1sVW5zYWZlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBDcmVhdGVzIGEgYmluZGluZyB0aGF0IHdpbGwgaW5uZXJIVE1MIHRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgYGV4cHJlc3Npb25gIGludG8gdGhlIGN1cnJlbnQKICogZWxlbWVudC4gKlRoZSBpbm5lckhUTUwtZWQgY29udGVudCB3aWxsIG5vdCBiZSBzYW5pdGl6ZWQhKiBZb3Ugc2hvdWxkIHVzZSB0aGlzIGRpcmVjdGl2ZSBvbmx5IGlmCiAqIHtAbGluayBuZ1Nhbml0aXplLmRpcmVjdGl2ZTpuZ0JpbmRIdG1sIG5nQmluZEh0bWx9IGRpcmVjdGl2ZSBpcyB0b28KICogcmVzdHJpY3RpdmUgYW5kIHdoZW4geW91IGFic29sdXRlbHkgdHJ1c3QgdGhlIHNvdXJjZSBvZiB0aGUgY29udGVudCB5b3UgYXJlIGJpbmRpbmcgdG8uCiAqCiAqIFNlZSB7QGxpbmsgbmdTYW5pdGl6ZS4kc2FuaXRpemUgJHNhbml0aXplfSBkb2NzIGZvciBleGFtcGxlcy4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCaW5kSHRtbFVuc2FmZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS4KICovCnZhciBuZ0JpbmRIdG1sVW5zYWZlRGlyZWN0aXZlID0gW2Z1bmN0aW9uKCkgewogIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgZWxlbWVudC5hZGRDbGFzcygnbmctYmluZGluZycpLmRhdGEoJyRiaW5kaW5nJywgYXR0ci5uZ0JpbmRIdG1sVW5zYWZlKTsKICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nQmluZEh0bWxVbnNhZmUsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSB8fCAnJyk7CiAgICB9KTsKICB9Owp9XTsKCmZ1bmN0aW9uIGNsYXNzRGlyZWN0aXZlKG5hbWUsIHNlbGVjdG9yKSB7CiAgbmFtZSA9ICduZ0NsYXNzJyArIG5hbWU7CiAgcmV0dXJuIG5nRGlyZWN0aXZlKGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICBzY29wZS4kd2F0Y2goYXR0cltuYW1lXSwgZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwpIHsKICAgICAgaWYgKHNlbGVjdG9yID09PSB0cnVlIHx8IHNjb3BlLiRpbmRleCAlIDIgPT09IHNlbGVjdG9yKSB7CiAgICAgICAgaWYgKG9sZFZhbCAmJiAobmV3VmFsICE9PSBvbGRWYWwpKSB7CiAgICAgICAgICAgaWYgKGlzT2JqZWN0KG9sZFZhbCkgJiYgIWlzQXJyYXkob2xkVmFsKSkKICAgICAgICAgICAgIG9sZFZhbCA9IG1hcChvbGRWYWwsIGZ1bmN0aW9uKHYsIGspIHsgaWYgKHYpIHJldHVybiBrIH0pOwogICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoaXNBcnJheShvbGRWYWwpID8gb2xkVmFsLmpvaW4oJyAnKSA6IG9sZFZhbCk7CiAgICAgICAgIH0KICAgICAgICAgaWYgKGlzT2JqZWN0KG5ld1ZhbCkgJiYgIWlzQXJyYXkobmV3VmFsKSkKICAgICAgICAgICAgbmV3VmFsID0gbWFwKG5ld1ZhbCwgZnVuY3Rpb24odiwgaykgeyBpZiAodikgcmV0dXJuIGsgfSk7CiAgICAgICAgIGlmIChuZXdWYWwpIGVsZW1lbnQuYWRkQ2xhc3MoaXNBcnJheShuZXdWYWwpID8gbmV3VmFsLmpvaW4oJyAnKSA6IG5ld1ZhbCk7ICAgICAgfQogICAgfSwgdHJ1ZSk7CiAgfSk7Cn0KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nQ2xhc3NgIGFsbG93cyB5b3UgdG8gc2V0IENTUyBjbGFzcyBvbiBIVE1MIGVsZW1lbnQgZHluYW1pY2FsbHkgYnkgZGF0YWJpbmRpbmcgYW4KICogZXhwcmVzc2lvbiB0aGF0IHJlcHJlc2VudHMgYWxsIGNsYXNzZXMgdG8gYmUgYWRkZWQuCiAqCiAqIFRoZSBkaXJlY3RpdmUgd29uJ3QgYWRkIGR1cGxpY2F0ZSBjbGFzc2VzIGlmIGEgcGFydGljdWxhciBjbGFzcyB3YXMgYWxyZWFkeSBzZXQuCiAqCiAqIFdoZW4gdGhlIGV4cHJlc3Npb24gY2hhbmdlcywgdGhlIHByZXZpb3VzbHkgYWRkZWQgY2xhc3NlcyBhcmUgcmVtb3ZlZCBhbmQgb25seSB0aGVuIHRoZSBjbGFzc2VzCiAqIG5ldyBjbGFzc2VzIGFyZSBhZGRlZC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLiBUaGUgcmVzdWx0CiAqICAgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3MKICogICBuYW1lcywgYW4gYXJyYXksIG9yIGEgbWFwIG9mIGNsYXNzIG5hbWVzIHRvIGJvb2xlYW4gdmFsdWVzLgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGlucHV0IHR5cGU9ImJ1dHRvbiIgdmFsdWU9InNldCIgbmctY2xpY2s9Im15VmFyPSdteS1jbGFzcyciPgogICAgICA8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0iY2xlYXIiIG5nLWNsaWNrPSJteVZhcj0nJyI+CiAgICAgIDxicj4KICAgICAgPHNwYW4gbmctY2xhc3M9Im15VmFyIj5TYW1wbGUgVGV4dDwvc3Bhbj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic3R5bGUuY3NzIj4KICAgICAgIC5teS1jbGFzcyB7CiAgICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3MnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW4nKS5wcm9wKCdjbGFzc05hbWUnKSkubm90KCkuCiAgICAgICAgICAgdG9NYXRjaCgvbXktY2xhc3MvKTsKCiAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmVsZW1lbnQoJzpidXR0b246Zmlyc3QnKS5jbGljaygpOwoKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW4nKS5wcm9wKCdjbGFzc05hbWUnKSkuCiAgICAgICAgICAgdG9NYXRjaCgvbXktY2xhc3MvKTsKCiAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmVsZW1lbnQoJzpidXR0b246bGFzdCcpLmNsaWNrKCk7CgogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbicpLnByb3AoJ2NsYXNzTmFtZScpKS5ub3QoKS4KICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdDbGFzc0RpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCcnLCB0cnVlKTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzT2RkCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGFzcyBuZ0NsYXNzfSwgZXhjZXB0IGl0IHdvcmtzIGluCiAqIGNvbmp1bmN0aW9uIHdpdGggYG5nUmVwZWF0YCBhbmQgdGFrZXMgYWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLgogKgogKiBUaGlzIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCBvbmx5IHdpdGhpbiBhIHNjb3BlIG9mIGFuCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9LgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzT2RkIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHQKICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPG9sIG5nLWluaXQ9Im5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J10iPgogICAgICAgICAgPGxpIG5nLXJlcGVhdD0ibmFtZSBpbiBuYW1lcyI+CiAgICAgICAgICAgPHNwYW4gbmctY2xhc3Mtb2RkPSInb2RkJyIgbmctY2xhc3MtZXZlbj0iJ2V2ZW4nIj4KICAgICAgICAgICAgIHt7bmFtZX19CiAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPC9saT4KICAgICAgICA8L29sPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgLm9kZCB7CiAgICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICB9CiAgICAgICAuZXZlbiB7CiAgICAgICAgIGNvbG9yOiBibHVlOwogICAgICAgfQogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzY2VuYXJpby5qcyI+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsYXNzLW9kZCBhbmQgbmctY2xhc3MtZXZlbicsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbGk6Zmlyc3Qgc3BhbicpLnByb3AoJ2NsYXNzTmFtZScpKS4KICAgICAgICAgICB0b01hdGNoKC9vZGQvKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGxpOmxhc3Qgc3BhbicpLnByb3AoJ2NsYXNzTmFtZScpKS4KICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCnZhciBuZ0NsYXNzT2RkRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ09kZCcsIDApOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ2xhc3NFdmVuCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIHdvcmtzIGV4YWN0bHkgYXMKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgaXQgd29ya3MgaW4KICogY29uanVuY3Rpb24gd2l0aCBgbmdSZXBlYXRgIGFuZCB0YWtlcyBhZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuCiAqCiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIGEgc2NvcGUgb2YgYW4KICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZQogKiAgIHJlc3VsdCBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPG9sIG5nLWluaXQ9Im5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J10iPgogICAgICAgICAgPGxpIG5nLXJlcGVhdD0ibmFtZSBpbiBuYW1lcyI+CiAgICAgICAgICAgPHNwYW4gbmctY2xhc3Mtb2RkPSInb2RkJyIgbmctY2xhc3MtZXZlbj0iJ2V2ZW4nIj4KICAgICAgICAgICAgIHt7bmFtZX19ICZuYnNwOyAmbmJzcDsgJm5ic3A7CiAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPC9saT4KICAgICAgICA8L29sPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgLm9kZCB7CiAgICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICB9CiAgICAgICAuZXZlbiB7CiAgICAgICAgIGNvbG9yOiBibHVlOwogICAgICAgfQogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzY2VuYXJpby5qcyI+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsYXNzLW9kZCBhbmQgbmctY2xhc3MtZXZlbicsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbGk6Zmlyc3Qgc3BhbicpLnByb3AoJ2NsYXNzTmFtZScpKS4KICAgICAgICAgICB0b01hdGNoKC9vZGQvKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGxpOmxhc3Qgc3BhbicpLnByb3AoJ2NsYXNzTmFtZScpKS4KICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCnZhciBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdFdmVuJywgMSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDbG9hawogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0Nsb2FrYCBkaXJlY3RpdmUgaXMgdXNlZCB0byBwcmV2ZW50IHRoZSBBbmd1bGFyIGh0bWwgdGVtcGxhdGUgZnJvbSBiZWluZyBicmllZmx5CiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3ICh1bmNvbXBpbGVkKSBmb3JtIHdoaWxlIHlvdXIgYXBwbGljYXRpb24gaXMgbG9hZGluZy4gVXNlIHRoaXMKICogZGlyZWN0aXZlIHRvIGF2b2lkIHRoZSB1bmRlc2lyYWJsZSBmbGlja2VyIGVmZmVjdCBjYXVzZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGUgZGlzcGxheS4KICoKICogVGhlIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCB0byB0aGUgYDxib2R5PmAgZWxlbWVudCwgYnV0IHR5cGljYWxseSBhIGZpbmUtZ3JhaW5lZCBhcHBsaWNhdGlvbiBpcwogKiBwcmVmZXJlZCBpbiBvcmRlciB0byBiZW5lZml0IGZyb20gcHJvZ3Jlc3NpdmUgcmVuZGVyaW5nIG9mIHRoZSBicm93c2VyIHZpZXcuCiAqCiAqIGBuZ0Nsb2FrYCB3b3JrcyBpbiBjb29wZXJhdGlvbiB3aXRoIGEgY3NzIHJ1bGUgdGhhdCBpcyBlbWJlZGRlZCB3aXRoaW4gYGFuZ3VsYXIuanNgIGFuZAogKiAgYGFuZ3VsYXIubWluLmpzYCBmaWxlcy4gRm9sbG93aW5nIGlzIHRoZSBjc3MgcnVsZToKICoKICogPHByZT4KICogW25nXDpjbG9ha10sIFtuZy1jbG9ha10sIC5uZy1jbG9hayB7CiAqICAgZGlzcGxheTogbm9uZTsKICogfQogKiA8L3ByZT4KICoKICogV2hlbiB0aGlzIGNzcyBydWxlIGlzIGxvYWRlZCBieSB0aGUgYnJvd3NlciwgYWxsIGh0bWwgZWxlbWVudHMgKGluY2x1ZGluZyB0aGVpciBjaGlsZHJlbikgdGhhdAogKiBhcmUgdGFnZ2VkIHdpdGggdGhlIGBuZy1jbG9ha2AgZGlyZWN0aXZlIGFyZSBoaWRkZW4uIFdoZW4gQW5ndWxhciBjb21lcyBhY3Jvc3MgdGhpcyBkaXJlY3RpdmUKICogZHVyaW5nIHRoZSBjb21waWxhdGlvbiBvZiB0aGUgdGVtcGxhdGUgaXQgZGVsZXRlcyB0aGUgYG5nQ2xvYWtgIGVsZW1lbnQgYXR0cmlidXRlLCB3aGljaAogKiBtYWtlcyB0aGUgY29tcGlsZWQgZWxlbWVudCB2aXNpYmxlLgogKgogKiBGb3IgdGhlIGJlc3QgcmVzdWx0LCBgYW5ndWxhci5qc2Agc2NyaXB0IG11c3QgYmUgbG9hZGVkIGluIHRoZSBoZWFkIHNlY3Rpb24gb2YgdGhlIGh0bWwgZmlsZTsKICogYWx0ZXJuYXRpdmVseSwgdGhlIGNzcyBydWxlIChhYm92ZSkgbXVzdCBiZSBpbmNsdWRlZCBpbiB0aGUgZXh0ZXJuYWwgc3R5bGVzaGVldCBvZiB0aGUKICogYXBwbGljYXRpb24uCiAqCiAqIExlZ2FjeSBicm93c2VycywgbGlrZSBJRTcsIGRvIG5vdCBwcm92aWRlIGF0dHJpYnV0ZSBzZWxlY3RvciBzdXBwb3J0IChhZGRlZCBpbiBDU1MgMi4xKSBzbyB0aGV5CiAqIGNhbm5vdCBtYXRjaCB0aGUgYFtuZ1w6Y2xvYWtdYCBzZWxlY3Rvci4gVG8gd29yayBhcm91bmQgdGhpcyBsaW1pdGF0aW9uLCB5b3UgbXVzdCBhZGQgdGhlIGNzcwogKiBjbGFzcyBgbmdDbG9ha2AgaW4gYWRkaXRpb24gdG8gYG5nQ2xvYWtgIGRpcmVjdGl2ZSBhcyBzaG93biBpbiB0aGUgZXhhbXBsZSBiZWxvdy4KICoKICogQGVsZW1lbnQgQU5ZCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICA8ZGl2IGlkPSJ0ZW1wbGF0ZTEiIG5nLWNsb2FrPnt7ICdoZWxsbycgfX08L2Rpdj4KICAgICAgICA8ZGl2IGlkPSJ0ZW1wbGF0ZTIiIG5nLWNsb2FrIGNsYXNzPSJuZy1jbG9hayI+e3sgJ2hlbGxvIElFNycgfX08L2Rpdj4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgcmVtb3ZlIHRoZSB0ZW1wbGF0ZSBkaXJlY3RpdmUgYW5kIGNzcyBjbGFzcycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI3RlbXBsYXRlMScpLmF0dHIoJ25nLWNsb2FrJykpLgogICAgICAgICAgIG5vdCgpLnRvQmVEZWZpbmVkKCk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAjdGVtcGxhdGUyJykuYXR0cignbmctY2xvYWsnKSkuCiAgICAgICAgICAgbm90KCkudG9CZURlZmluZWQoKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKgogKi8KdmFyIG5nQ2xvYWtEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7CiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikgewogICAgYXR0ci4kc2V0KCduZ0Nsb2FrJywgdW5kZWZpbmVkKTsKICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ25nLWNsb2FrJyk7CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0NvbnRyb2xsZXIKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgYXNzaWducyBiZWhhdmlvciB0byBhIHNjb3BlLiBUaGlzIGlzIGEga2V5IGFzcGVjdCBvZiBob3cgYW5ndWxhcgogKiBzdXBwb3J0cyB0aGUgcHJpbmNpcGxlcyBiZWhpbmQgdGhlIE1vZGVsLVZpZXctQ29udHJvbGxlciBkZXNpZ24gcGF0dGVybi4KICoKICogTVZDIGNvbXBvbmVudHMgaW4gYW5ndWxhcjoKICoKICogKiBNb2RlbCDigJQgVGhlIE1vZGVsIGlzIGRhdGEgaW4gc2NvcGUgcHJvcGVydGllczsgc2NvcGVzIGFyZSBhdHRhY2hlZCB0byB0aGUgRE9NLgogKiAqIFZpZXcg4oCUIFRoZSB0ZW1wbGF0ZSAoSFRNTCB3aXRoIGRhdGEgYmluZGluZ3MpIGlzIHJlbmRlcmVkIGludG8gdGhlIFZpZXcuCiAqICogQ29udHJvbGxlciDigJQgVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgYSBDb250cm9sbGVyIGNsYXNzOyB0aGUgY2xhc3MgaGFzCiAqICAgbWV0aG9kcyB0aGF0IHR5cGljYWxseSBleHByZXNzIHRoZSBidXNpbmVzcyBsb2dpYyBiZWhpbmQgdGhlIGFwcGxpY2F0aW9uLgogKgogKiBOb3RlIHRoYXQgYW4gYWx0ZXJuYXRpdmUgd2F5IHRvIGRlZmluZSBjb250cm9sbGVycyBpcyB2aWEgdGhlIGB7QGxpbmsgbmcuJHJvdXRlfWAKICogc2VydmljZS4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBzY29wZQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29udHJvbGxlciBOYW1lIG9mIGEgZ2xvYmFsbHkgYWNjZXNzaWJsZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBvciBhbgogKiAgICAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gdGhhdCBvbiB0aGUgY3VycmVudCBzY29wZSBldmFsdWF0ZXMgdG8gYQogKiAgICAgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAqCiAqIEBleGFtcGxlCiAqIEhlcmUgaXMgYSBzaW1wbGUgZm9ybSBmb3IgZWRpdGluZyB1c2VyIGNvbnRhY3QgaW5mb3JtYXRpb24uIEFkZGluZywgcmVtb3ZpbmcsIGNsZWFyaW5nLCBhbmQKICogZ3JlZXRpbmcgYXJlIG1ldGhvZHMgZGVjbGFyZWQgb24gdGhlIGNvbnRyb2xsZXIgKHNlZSBzb3VyY2UgdGFiKS4gVGhlc2UgbWV0aG9kcyBjYW4KICogZWFzaWx5IGJlIGNhbGxlZCBmcm9tIHRoZSBhbmd1bGFyIG1hcmt1cC4gTm90aWNlIHRoYXQgdGhlIHNjb3BlIGJlY29tZXMgdGhlIGB0aGlzYCBmb3IgdGhlCiAqIGNvbnRyb2xsZXIncyBpbnN0YW5jZS4gVGhpcyBhbGxvd3MgZm9yIGVhc3kgYWNjZXNzIHRvIHRoZSB2aWV3IGRhdGEgZnJvbSB0aGUgY29udHJvbGxlci4gQWxzbwogKiBub3RpY2UgdGhhdCBhbnkgY2hhbmdlcyB0byB0aGUgZGF0YSBhcmUgYXV0b21hdGljYWxseSByZWZsZWN0ZWQgaW4gdGhlIFZpZXcgd2l0aG91dCB0aGUgbmVlZAogKiBmb3IgYSBtYW51YWwgdXBkYXRlLgogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgIDxzY3JpcHQ+CiAgICAgICAgZnVuY3Rpb24gU2V0dGluZ3NDb250cm9sbGVyKCRzY29wZSkgewogICAgICAgICAgJHNjb3BlLm5hbWUgPSAiSm9obiBTbWl0aCI7CiAgICAgICAgICAkc2NvcGUuY29udGFjdHMgPSBbCiAgICAgICAgICAgIHt0eXBlOidwaG9uZScsIHZhbHVlOic0MDggNTU1IDEyMTInfSwKICAgICAgICAgICAge3R5cGU6J2VtYWlsJywgdmFsdWU6J2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnfSBdOwoKICAgICAgICAgICRzY29wZS5ncmVldCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgIGFsZXJ0KHRoaXMubmFtZSk7CiAgICAgICAgICB9OwoKICAgICAgICAgICRzY29wZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgdGhpcy5jb250YWN0cy5wdXNoKHt0eXBlOidlbWFpbCcsIHZhbHVlOid5b3VybmFtZUBleGFtcGxlLm9yZyd9KTsKICAgICAgICAgIH07CgogICAgICAgICAgJHNjb3BlLnJlbW92ZUNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0VG9SZW1vdmUpIHsKICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRhY3RzLmluZGV4T2YoY29udGFjdFRvUmVtb3ZlKTsKICAgICAgICAgICB0aGlzLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICB9OwoKICAgICAgICAgICRzY29wZS5jbGVhckNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0KSB7CiAgICAgICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJzsKICAgICAgICAgICBjb250YWN0LnZhbHVlID0gJyc7CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgPC9zY3JpcHQ+CiAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iU2V0dGluZ3NDb250cm9sbGVyIj4KICAgICAgICBOYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9Im5hbWUiLz4KICAgICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9ImdyZWV0KCkiPmdyZWV0PC9hPiBdPGJyLz4KICAgICAgICBDb250YWN0OgogICAgICAgIDx1bD4KICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9ImNvbnRhY3QgaW4gY29udGFjdHMiPgogICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJjb250YWN0LnR5cGUiPgogICAgICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+CiAgICAgICAgICAgICAgIDxvcHRpb24+ZW1haWw8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0iY29udGFjdC52YWx1ZSIvPgogICAgICAgICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9ImNsZWFyQ29udGFjdChjb250YWN0KSI+Y2xlYXI8L2E+CiAgICAgICAgICAgIHwgPGEgaHJlZj0iIiBuZy1jbGljaz0icmVtb3ZlQ29udGFjdChjb250YWN0KSI+WDwvYT4gXQogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaT5bIDxhIGhyZWY9IiIgbmctY2xpY2s9ImFkZENvbnRhY3QoKSI+YWRkPC9hPiBdPC9saT4KICAgICAgIDwvdWw+CiAgICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBkaXY+OmlucHV0JykudmFsKCkpLnRvQmUoJ0pvaG4gU21pdGgnKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGxpOm50aC1jaGlsZCgxKSBpbnB1dCcpLnZhbCgpKQogICAgICAgICAgIC50b0JlKCc0MDggNTU1IDEyMTInKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGxpOm50aC1jaGlsZCgyKSBpbnB1dCcpLnZhbCgpKQogICAgICAgICAgIC50b0JlKCdqb2huLnNtaXRoQGV4YW1wbGUub3JnJyk7CgogICAgICAgICBlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBsaTpmaXJzdCBhOmNvbnRhaW5zKCJjbGVhciIpJykuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGxpOmZpcnN0IGlucHV0JykudmFsKCkpLnRvQmUoJycpOwoKICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbGk6bGFzdCBhOmNvbnRhaW5zKCJhZGQiKScpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBsaTpudGgtY2hpbGQoMykgaW5wdXQnKS52YWwoKSkKICAgICAgICAgICAudG9CZSgneW91cm5hbWVAZXhhbXBsZS5vcmcnKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIG5nQ29udHJvbGxlckRpcmVjdGl2ZSA9IFtmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgc2NvcGU6IHRydWUsCiAgICBjb250cm9sbGVyOiAnQCcKICB9Owp9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0NzcAogKiBAcHJpb3JpdHkgMTAwMAogKgogKiBAZGVzY3JpcHRpb24KICogRW5hYmxlcyBbQ1NQIChDb250ZW50IFNlY3VyaXR5IFBvbGljeSldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1NlY3VyaXR5L0NTUCkgc3VwcG9ydC4KICogVGhpcyBkaXJlY3RpdmUgc2hvdWxkIGJlIHVzZWQgb24gdGhlIHJvb3QgZWxlbWVudCBvZiB0aGUgYXBwbGljYXRpb24gKHR5cGljYWxseSB0aGUgYDxodG1sPmAKICogZWxlbWVudCBvciBvdGhlciBlbGVtZW50IHdpdGggdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9CiAqIGRpcmVjdGl2ZSkuCiAqCiAqIElmIGVuYWJsZWQgdGhlIHBlcmZvcm1hbmNlIG9mIHRlbXBsYXRlIGV4cHJlc3Npb24gZXZhbHVhdG9yIHdpbGwgc3VmZmVyIHNsaWdodGx5LCBzbyBkb24ndCBlbmFibGUKICogdGhpcyBtb2RlIHVubGVzcyB5b3UgbmVlZCBpdC4KICoKICogQGVsZW1lbnQgaHRtbAogKi8KCnZhciBuZ0NzcERpcmVjdGl2ZSA9IFsnJHNuaWZmZXInLCBmdW5jdGlvbigkc25pZmZlcikgewogIHJldHVybiB7CiAgICBwcmlvcml0eTogMTAwMCwKICAgIGNvbXBpbGU6IGZ1bmN0aW9uKCkgewogICAgICAkc25pZmZlci5jc3AgPSB0cnVlOwogICAgfQogIH07Cn1dOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ2xpY2sKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBuZ0NsaWNrIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igd2hlbgogKiBlbGVtZW50IGlzIGNsaWNrZWQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xpY2sge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBjbGljay4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iY291bnQgPSBjb3VudCArIDEiIG5nLWluaXQ9ImNvdW50PTAiPgogICAgICAgIEluY3JlbWVudAogICAgICA8L2J1dHRvbj4KICAgICAgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoYmluZGluZygnY291bnQnKSkudG9CZSgnMCcpOwogICAgICAgICBlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSA6YnV0dG9uJykuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2NvdW50JykpLnRvQmUoJzEnKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KLyoKICogQSBkaXJlY3RpdmUgdGhhdCBhbGxvd3MgY3JlYXRpb24gb2YgY3VzdG9tIG9uY2xpY2sgaGFuZGxlcnMgdGhhdCBhcmUgZGVmaW5lZCBhcyBhbmd1bGFyCiAqIGV4cHJlc3Npb25zIGFuZCBhcmUgY29tcGlsZWQgYW5kIGV4ZWN1dGVkIHdpdGhpbiB0aGUgY3VycmVudCBzY29wZS4KICoKICogRXZlbnRzIHRoYXQgYXJlIGhhbmRsZWQgdmlhIHRoZXNlIGhhbmRsZXIgYXJlIGFsd2F5cyBjb25maWd1cmVkIG5vdCB0byBwcm9wYWdhdGUgZnVydGhlci4KICovCnZhciBuZ0V2ZW50RGlyZWN0aXZlcyA9IHt9Owpmb3JFYWNoKAogICdjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2Vtb3ZlIG1vdXNlZW50ZXIgbW91c2VsZWF2ZScuc3BsaXQoJyAnKSwKICBmdW5jdGlvbihuYW1lKSB7CiAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIG5hbWUpOwogICAgbmdFdmVudERpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0cltkaXJlY3RpdmVOYW1lXSk7CiAgICAgICAgZWxlbWVudC5iaW5kKGxvd2VyY2FzZShuYW1lKSwgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgZm4oc2NvcGUsIHskZXZlbnQ6ZXZlbnR9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9OwogICAgfV07CiAgfQopOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nRGJsY2xpY2sKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdEYmxjbGlja2AgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gZGJsY2xpY2sgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRGJsY2xpY2sge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBkYmxjbGljay4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW91c2Vkb3duCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgbmdNb3VzZWRvd24gZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2Vkb3duIGV2ZW50LgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIG1vdXNlZG93bi4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW91c2V1cAogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2V1cCBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZXVwIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2V1cC4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb3VzZW92ZXIKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlb3ZlciBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZW92ZXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBtb3VzZW92ZXIuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKQogKgogKiBAZXhhbXBsZQogKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vdXNlZW50ZXIKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlZW50ZXIgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VlbnRlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIG1vdXNlZW50ZXIuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKQogKgogKiBAZXhhbXBsZQogKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vdXNlbGVhdmUKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbGVhdmUgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VsZWF2ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIG1vdXNlbGVhdmUuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKQogKgogKiBAZXhhbXBsZQogKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vdXNlbW92ZQogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2Vtb3ZlIGV2ZW50LgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlbW92ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIG1vdXNlbW92ZS4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nU3VibWl0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBFbmFibGVzIGJpbmRpbmcgYW5ndWxhciBleHByZXNzaW9ucyB0byBvbnN1Ym1pdCBldmVudHMuCiAqCiAqIEFkZGl0aW9uYWxseSBpdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKHdoaWNoIGZvciBmb3JtIG1lYW5zIHNlbmRpbmcgdGhlIHJlcXVlc3QgdG8gdGhlCiAqIHNlcnZlciBhbmQgcmVsb2FkaW5nIHRoZSBjdXJyZW50IHBhZ2UpLgogKgogKiBAZWxlbWVudCBmb3JtCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTdWJtaXQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4KICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICA8c2NyaXB0PgogICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAkc2NvcGUubGlzdCA9IFtdOwogICAgICAgICAgJHNjb3BlLnRleHQgPSAnaGVsbG8nOwogICAgICAgICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAodGhpcy50ZXh0KSB7CiAgICAgICAgICAgICAgdGhpcy5saXN0LnB1c2godGhpcy50ZXh0KTsKICAgICAgICAgICAgICB0aGlzLnRleHQgPSAnJzsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIDwvc2NyaXB0PgogICAgICA8Zm9ybSBuZy1zdWJtaXQ9InN1Ym1pdCgpIiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICBFbnRlciB0ZXh0IGFuZCBoaXQgZW50ZXI6CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJ0ZXh0IiBuYW1lPSJ0ZXh0IiAvPgogICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIGlkPSJzdWJtaXQiIHZhbHVlPSJTdWJtaXQiIC8+CiAgICAgICAgPHByZT5saXN0PXt7bGlzdH19PC9wcmU+CiAgICAgIDwvZm9ybT4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3VibWl0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdsaXN0JykpLnRvQmUoJ1tdJyk7CiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNzdWJtaXQnKS5jbGljaygpOwogICAgICAgICBleHBlY3QoYmluZGluZygnbGlzdCcpKS50b0JlKCdbImhlbGxvIl0nKTsKICAgICAgICAgZXhwZWN0KGlucHV0KCd0ZXh0JykudmFsKCkpLnRvQmUoJycpOwogICAgICAgfSk7CiAgICAgICBpdCgnc2hvdWxkIGlnbm9yZSBlbXB0eSBzdHJpbmdzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdsaXN0JykpLnRvQmUoJ1tdJyk7CiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNzdWJtaXQnKS5jbGljaygpOwogICAgICAgICBlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAjc3VibWl0JykuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2xpc3QnKSkudG9CZSgnWyJoZWxsbyJdJyk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCnZhciBuZ1N1Ym1pdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykgewogIGVsZW1lbnQuYmluZCgnc3VibWl0JywgZnVuY3Rpb24oKSB7CiAgICBzY29wZS4kYXBwbHkoYXR0cnMubmdTdWJtaXQpOwogIH0pOwp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUKICogQHJlc3RyaWN0IEVDQQogKgogKiBAZGVzY3JpcHRpb24KICogRmV0Y2hlcywgY29tcGlsZXMgYW5kIGluY2x1ZGVzIGFuIGV4dGVybmFsIEhUTUwgZnJhZ21lbnQuCiAqCiAqIEtlZXAgaW4gbWluZCB0aGF0IFNhbWUgT3JpZ2luIFBvbGljeSBhcHBsaWVzIHRvIGluY2x1ZGVkIHJlc291cmNlcwogKiAoZS5nLiBuZ0luY2x1ZGUgd29uJ3Qgd29yayBmb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzIG9uIGFsbCBicm93c2VycyBhbmQgZm9yCiAqICBmaWxlOi8vIGFjY2VzcyBvbiBzb21lIGJyb3dzZXJzKS4KICoKICogQHNjb3BlCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0luY2x1ZGV8c3JjIGFuZ3VsYXIgZXhwcmVzc2lvbiBldmFsdWF0aW5nIHRvIFVSTC4gSWYgdGhlIHNvdXJjZSBpcyBhIHN0cmluZyBjb25zdGFudCwKICogICAgICAgICAgICAgICAgIG1ha2Ugc3VyZSB5b3Ugd3JhcCBpdCBpbiBxdW90ZXMsIGUuZy4gYHNyYz0iJ215UGFydGlhbFRlbXBsYXRlLmh0bWwnImAuCiAqIEBwYXJhbSB7c3RyaW5nPX0gb25sb2FkIEV4cHJlc3Npb24gdG8gZXZhbHVhdGUgd2hlbiBhIG5ldyBwYXJ0aWFsIGlzIGxvYWRlZC4KICoKICogQHBhcmFtIHtzdHJpbmc9fSBhdXRvc2Nyb2xsIFdoZXRoZXIgYG5nSW5jbHVkZWAgc2hvdWxkIGNhbGwge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwKICogICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsfSB0byBzY3JvbGwgdGhlIHZpZXdwb3J0IGFmdGVyIHRoZSBjb250ZW50IGlzIGxvYWRlZC4KICoKICogICAgICAgICAgICAgICAgICAtIElmIHRoZSBhdHRyaWJ1dGUgaXMgbm90IHNldCwgZGlzYWJsZSBzY3JvbGxpbmcuCiAqICAgICAgICAgICAgICAgICAgLSBJZiB0aGUgYXR0cmlidXRlIGlzIHNldCB3aXRob3V0IHZhbHVlLCBlbmFibGUgc2Nyb2xsaW5nLgogKiAgICAgICAgICAgICAgICAgIC0gT3RoZXJ3aXNlIGVuYWJsZSBzY3JvbGxpbmcgb25seSBpZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1dGh5IHZhbHVlLgogKgogKiBAZXhhbXBsZQogIDxleGFtcGxlPgogICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgIDxzZWxlY3QgbmctbW9kZWw9InRlbXBsYXRlIiBuZy1vcHRpb25zPSJ0Lm5hbWUgZm9yIHQgaW4gdGVtcGxhdGVzIj4KICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPihibGFuayk8L29wdGlvbj4KICAgICAgIDwvc2VsZWN0PgogICAgICAgdXJsIG9mIHRoZSB0ZW1wbGF0ZTogPHR0Pnt7dGVtcGxhdGUudXJsfX08L3R0PgogICAgICAgPGhyLz4KICAgICAgIDxkaXYgbmctaW5jbHVkZSBzcmM9InRlbXBsYXRlLnVybCI+PC9kaXY+CiAgICAgPC9kaXY+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICRzY29wZS50ZW1wbGF0ZXMgPQogICAgICAgICAgWyB7IG5hbWU6ICd0ZW1wbGF0ZTEuaHRtbCcsIHVybDogJ3RlbXBsYXRlMS5odG1sJ30KICAgICAgICAgICwgeyBuYW1lOiAndGVtcGxhdGUyLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTIuaHRtbCd9IF07CiAgICAgICAgJHNjb3BlLnRlbXBsYXRlID0gJHNjb3BlLnRlbXBsYXRlc1swXTsKICAgICAgfQogICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InRlbXBsYXRlMS5odG1sIj4KICAgICAgQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbAogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0idGVtcGxhdGUyLmh0bWwiPgogICAgICBDb250ZW50IG9mIHRlbXBsYXRlMi5odG1sCiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJzY2VuYXJpby5qcyI+CiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZTEuaHRtbCcsIGZ1bmN0aW9uKCkgewogICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy1pbmNsdWRlXScpLnRleHQoKSkuCiAgICAgICAgIHRvTWF0Y2goL0NvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWwvKTsKICAgICAgfSk7CiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZTIuaHRtbCcsIGZ1bmN0aW9uKCkgewogICAgICAgc2VsZWN0KCd0ZW1wbGF0ZScpLm9wdGlvbignMScpOwogICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy1pbmNsdWRlXScpLnRleHQoKSkuCiAgICAgICAgIHRvTWF0Y2goL0NvbnRlbnQgb2YgdGVtcGxhdGUyLmh0bWwvKTsKICAgICAgfSk7CiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIGJsYW5rJywgZnVuY3Rpb24oKSB7CiAgICAgICBzZWxlY3QoJ3RlbXBsYXRlJykub3B0aW9uKCcnKTsKICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBbbmctaW5jbHVkZV0nKS50ZXh0KCkpLnRvRXF1YWwoJycpOwogICAgICB9KTsKICAgIDwvZmlsZT4KICA8L2V4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZXZlbnQKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRMb2FkZWQKICogQGV2ZW50T2YgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZQogKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIGN1cnJlbnQgbmdJbmNsdWRlIHNjb3BlCiAqIEBkZXNjcmlwdGlvbgogKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nSW5jbHVkZSBjb250ZW50IGlzIHJlbG9hZGVkLgogKi8KdmFyIG5nSW5jbHVkZURpcmVjdGl2ZSA9IFsnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJGFuY2hvclNjcm9sbCcsICckY29tcGlsZScsCiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCRodHRwLCAgICR0ZW1wbGF0ZUNhY2hlLCAgICRhbmNob3JTY3JvbGwsICAgJGNvbXBpbGUpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdFQ0EnLAogICAgdGVybWluYWw6IHRydWUsCiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICAgIHZhciBzcmNFeHAgPSBhdHRyLm5nSW5jbHVkZSB8fCBhdHRyLnNyYywKICAgICAgICAgIG9ubG9hZEV4cCA9IGF0dHIub25sb2FkIHx8ICcnLAogICAgICAgICAgYXV0b1Njcm9sbEV4cCA9IGF0dHIuYXV0b3Njcm9sbDsKCiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCkgewogICAgICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMCwKICAgICAgICAgICAgY2hpbGRTY29wZTsKCiAgICAgICAgdmFyIGNsZWFyQ29udGVudCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKGNoaWxkU2NvcGUpIHsKICAgICAgICAgICAgY2hpbGRTY29wZS4kZGVzdHJveSgpOwogICAgICAgICAgICBjaGlsZFNjb3BlID0gbnVsbDsKICAgICAgICAgIH0KCiAgICAgICAgICBlbGVtZW50Lmh0bWwoJycpOwogICAgICAgIH07CgogICAgICAgIHNjb3BlLiR3YXRjaChzcmNFeHAsIGZ1bmN0aW9uKHNyYykgewogICAgICAgICAgdmFyIHRoaXNDaGFuZ2VJZCA9ICsrY2hhbmdlQ291bnRlcjsKCiAgICAgICAgICBpZiAoc3JjKSB7CiAgICAgICAgICAgICRodHRwLmdldChzcmMsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCAhPT0gY2hhbmdlQ291bnRlcikgcmV0dXJuOwoKICAgICAgICAgICAgICBpZiAoY2hpbGRTY29wZSkgY2hpbGRTY29wZS4kZGVzdHJveSgpOwogICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBzY29wZS4kbmV3KCk7CgogICAgICAgICAgICAgIGVsZW1lbnQuaHRtbChyZXNwb25zZSk7CiAgICAgICAgICAgICAgJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKShjaGlsZFNjb3BlKTsKCiAgICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChhdXRvU2Nyb2xsRXhwKSAmJiAoIWF1dG9TY3JvbGxFeHAgfHwgc2NvcGUuJGV2YWwoYXV0b1Njcm9sbEV4cCkpKSB7CiAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjaGlsZFNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnKTsKICAgICAgICAgICAgICBzY29wZS4kZXZhbChvbmxvYWRFeHApOwogICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkID09PSBjaGFuZ2VDb3VudGVyKSBjbGVhckNvbnRlbnQoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgY2xlYXJDb250ZW50KCk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfTsKfV07CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdJbml0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nSW5pdGAgZGlyZWN0aXZlIHNwZWNpZmllcyBpbml0aWFsaXphdGlvbiB0YXNrcyB0byBiZSBleGVjdXRlZAogKiAgYmVmb3JlIHRoZSB0ZW1wbGF0ZSBlbnRlcnMgZXhlY3V0aW9uIG1vZGUgZHVyaW5nIGJvb3RzdHJhcC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJbml0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgIDxkaXYgbmctaW5pdD0iZ3JlZXRpbmc9J0hlbGxvJzsgcGVyc29uPSdXb3JsZCciPgogICAgICB7e2dyZWV0aW5nfX0ge3twZXJzb259fSEKICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBncmVldGluZycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoYmluZGluZygnZ3JlZXRpbmcnKSkudG9CZSgnSGVsbG8nKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3BlcnNvbicpKS50b0JlKCdXb3JsZCcpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdJbml0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoewogIGNvbXBpbGU6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHsKICAgICAgICBzY29wZS4kZXZhbChhdHRycy5uZ0luaXQpOwogICAgICB9CiAgICB9CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ05vbkJpbmRhYmxlCiAqIEBwcmlvcml0eSAxMDAwCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTb21ldGltZXMgaXQgaXMgbmVjZXNzYXJ5IHRvIHdyaXRlIGNvZGUgd2hpY2ggbG9va3MgbGlrZSBiaW5kaW5ncyBidXQgd2hpY2ggc2hvdWxkIGJlIGxlZnQgYWxvbmUKICogYnkgYW5ndWxhci4gVXNlIGBuZ05vbkJpbmRhYmxlYCB0byBtYWtlIGFuZ3VsYXIgaWdub3JlIGEgY2h1bmsgb2YgSFRNTC4KICoKICogQGVsZW1lbnQgQU5ZCiAqCiAqIEBleGFtcGxlCiAqIEluIHRoaXMgZXhhbXBsZSB0aGVyZSBhcmUgdHdvIGxvY2F0aW9uIHdoZXJlIGEgc2ltcGxlIGJpbmRpbmcgKGB7e319YCkgaXMgcHJlc2VudCwgYnV0IHRoZSBvbmUKICogd3JhcHBlZCBpbiBgbmdOb25CaW5kYWJsZWAgaXMgbGVmdCBhbG9uZS4KICoKICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgPGRpdj5Ob3JtYWw6IHt7MSArIDJ9fTwvZGl2PgogICAgICAgIDxkaXYgbmctbm9uLWJpbmRhYmxlPklnbm9yZWQ6IHt7MSArIDJ9fTwvZGl2PgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLW5vbi1iaW5kYWJsZScsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QodXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuYmluZGluZygnMSArIDInKSkudG9CZSgnMycpOwogICAgICAgICBleHBlY3QodXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuZWxlbWVudCgnZGl2Omxhc3QnKS50ZXh0KCkpLgogICAgICAgICAgIHRvTWF0Y2goLzEgXCsgMi8pOwogICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICovCnZhciBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoeyB0ZXJtaW5hbDogdHJ1ZSwgcHJpb3JpdHk6IDEwMDAgfSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdQbHVyYWxpemUKICogQHJlc3RyaWN0IEVBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiAjIE92ZXJ2aWV3CiAqIGBuZ1BsdXJhbGl6ZWAgaXMgYSBkaXJlY3RpdmUgdGhhdCBkaXNwbGF5cyBtZXNzYWdlcyBhY2NvcmRpbmcgdG8gZW4tVVMgbG9jYWxpemF0aW9uIHJ1bGVzLgogKiBUaGVzZSBydWxlcyBhcmUgYnVuZGxlZCB3aXRoIGFuZ3VsYXIuanMgYW5kIHRoZSBydWxlcyBjYW4gYmUgb3ZlcnJpZGRlbgogKiAoc2VlIHtAbGluayBndWlkZS9pMThuIEFuZ3VsYXIgaTE4bn0gZGV2IGd1aWRlKS4gWW91IGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZSBkaXJlY3RpdmUKICogYnkgc3BlY2lmeWluZyB0aGUgbWFwcGluZ3MgYmV0d2VlbgogKiB7QGxpbmsgaHR0cDovL3VuaWNvZGUub3JnL3JlcG9zL2NsZHItdG1wL3RydW5rL2RpZmYvc3VwcGxlbWVudGFsL2xhbmd1YWdlX3BsdXJhbF9ydWxlcy5odG1sCiAqIHBsdXJhbCBjYXRlZ29yaWVzfSBhbmQgdGhlIHN0cmluZ3MgdG8gYmUgZGlzcGxheWVkLgogKgogKiAjIFBsdXJhbCBjYXRlZ29yaWVzIGFuZCBleHBsaWNpdCBudW1iZXIgcnVsZXMKICogVGhlcmUgYXJlIHR3bwogKiB7QGxpbmsgaHR0cDovL3VuaWNvZGUub3JnL3JlcG9zL2NsZHItdG1wL3RydW5rL2RpZmYvc3VwcGxlbWVudGFsL2xhbmd1YWdlX3BsdXJhbF9ydWxlcy5odG1sCiAqIHBsdXJhbCBjYXRlZ29yaWVzfSBpbiBBbmd1bGFyJ3MgZGVmYXVsdCBlbi1VUyBsb2NhbGU6ICJvbmUiIGFuZCAib3RoZXIiLgogKgogKiBXaGlsZSBhIHB1cmFsIGNhdGVnb3J5IG1heSBtYXRjaCBtYW55IG51bWJlcnMgKGZvciBleGFtcGxlLCBpbiBlbi1VUyBsb2NhbGUsICJvdGhlciIgY2FuIG1hdGNoCiAqIGFueSBudW1iZXIgdGhhdCBpcyBub3QgMSksIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGNhbiBvbmx5IG1hdGNoIG9uZSBudW1iZXIuIEZvciBleGFtcGxlLCB0aGUKICogZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yICIzIiBtYXRjaGVzIHRoZSBudW1iZXIgMy4gWW91IHdpbGwgc2VlIHRoZSB1c2Ugb2YgcGx1cmFsIGNhdGVnb3JpZXMKICogYW5kIGV4cGxpY2l0IG51bWJlciBydWxlcyB0aHJvdWdob3V0IGxhdGVyIHBhcnRzIG9mIHRoaXMgZG9jdW1lbnRhdGlvbi4KICoKICogIyBDb25maWd1cmluZyBuZ1BsdXJhbGl6ZQogKiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGJ5IHByb3ZpZGluZyAyIGF0dHJpYnV0ZXM6IGBjb3VudGAgYW5kIGB3aGVuYC4KICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gb3B0aW9uYWwgYXR0cmlidXRlLCBgb2Zmc2V0YC4KICoKICogVGhlIHZhbHVlIG9mIHRoZSBgY291bnRgIGF0dHJpYnV0ZSBjYW4gYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uCiAqIEFuZ3VsYXIgZXhwcmVzc2lvbn07IHRoZXNlIGFyZSBldmFsdWF0ZWQgb24gdGhlIGN1cnJlbnQgc2NvcGUgZm9yIGl0cyBib3VuZCB2YWx1ZS4KICoKICogVGhlIGB3aGVuYCBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBtYXBwaW5ncyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yaWVzIGFuZCB0aGUgYWN0dWFsCiAqIHN0cmluZyB0byBiZSBkaXNwbGF5ZWQuIFRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIHNob3VsZCBiZSBhIEpTT04gb2JqZWN0IHNvIHRoYXQgQW5ndWxhcgogKiBjYW4gaW50ZXJwcmV0IGl0IGNvcnJlY3RseS4KICoKICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBjb25maWd1cmUgbmdQbHVyYWxpemU6CiAqCiAqIDxwcmU+CiAqIDxuZy1wbHVyYWxpemUgY291bnQ9InBlcnNvbkNvdW50IgogICAgICAgICAgICAgICAgIHdoZW49InsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLAogKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJywKICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t9IHBlb3BsZSBhcmUgdmlld2luZy4nfSI+CiAqIDwvbmctcGx1cmFsaXplPgogKjwvcHJlPgogKgogKiBJbiB0aGUgZXhhbXBsZSwgYCIwOiBOb2JvZHkgaXMgdmlld2luZy4iYCBpcyBhbiBleHBsaWNpdCBudW1iZXIgcnVsZS4gSWYgeW91IGRpZCBub3QKICogc3BlY2lmeSB0aGlzIHJ1bGUsIDAgd291bGQgYmUgbWF0Y2hlZCB0byB0aGUgIm90aGVyIiBjYXRlZ29yeSBhbmQgIjAgcGVvcGxlIGFyZSB2aWV3aW5nIgogKiB3b3VsZCBiZSBzaG93biBpbnN0ZWFkIG9mICJOb2JvZHkgaXMgdmlld2luZyIuIFlvdSBjYW4gc3BlY2lmeSBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3IKICogb3RoZXIgbnVtYmVycywgZm9yIGV4YW1wbGUgMTIsIHNvIHRoYXQgaW5zdGVhZCBvZiBzaG93aW5nICIxMiBwZW9wbGUgYXJlIHZpZXdpbmciLCB5b3UgY2FuCiAqIHNob3cgImEgZG96ZW4gcGVvcGxlIGFyZSB2aWV3aW5nIi4KICoKICogWW91IGNhbiB1c2UgYSBzZXQgb2YgY2xvc2VkIGJyYWNlcyhge31gKSBhcyBhIHBsYWNlaG9sZGVyIGZvciB0aGUgbnVtYmVyIHRoYXQgeW91IHdhbnQgc3Vic3RpdHV0ZWQKICogaW50byBwbHVyYWxpemVkIHN0cmluZ3MuIEluIHRoZSBwcmV2aW91cyBleGFtcGxlLCBBbmd1bGFyIHdpbGwgcmVwbGFjZSBge31gIHdpdGgKICogPHNwYW4gbmctbm9uLWJpbmRhYmxlPmB7e3BlcnNvbkNvdW50fX1gPC9zcGFuPi4gVGhlIGNsb3NlZCBicmFjZXMgYHt9YCBpcyBhIHBsYWNlaG9sZGVyCiAqIGZvciA8c3BhbiBuZy1ub24tYmluZGFibGU+e3tudW1iZXJFeHByZXNzaW9ufX08L3NwYW4+LgogKgogKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplIHdpdGggb2Zmc2V0CiAqIFRoZSBgb2Zmc2V0YCBhdHRyaWJ1dGUgYWxsb3dzIGZ1cnRoZXIgY3VzdG9taXphdGlvbiBvZiBwbHVyYWxpemVkIHRleHQsIHdoaWNoIGNhbiByZXN1bHQgaW4KICogYSBiZXR0ZXIgdXNlciBleHBlcmllbmNlLiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZiB0aGUgbWVzc2FnZSAiNCBwZW9wbGUgYXJlIHZpZXdpbmcgdGhpcyBkb2N1bWVudCIsCiAqIHlvdSBtaWdodCBkaXNwbGF5ICJKb2huLCBLYXRlIGFuZCAyIG90aGVycyBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50Ii4KICogVGhlIG9mZnNldCBhdHRyaWJ1dGUgYWxsb3dzIHlvdSB0byBvZmZzZXQgYSBudW1iZXIgYnkgYW55IGRlc2lyZWQgdmFsdWUuCiAqIExldCdzIHRha2UgYSBsb29rIGF0IGFuIGV4YW1wbGU6CiAqCiAqIDxwcmU+CiAqIDxuZy1wbHVyYWxpemUgY291bnQ9InBlcnNvbkNvdW50IiBvZmZzZXQ9MgogKiAgICAgICAgICAgICAgIHdoZW49InsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLAogKiAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICcyJzogJ3t7cGVyc29uMX19IGFuZCB7e3BlcnNvbjJ9fSBhcmUgdmlld2luZy4nLAogKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nLAogKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ30iPgogKiA8L25nLXBsdXJhbGl6ZT4KICogPC9wcmU+CiAqCiAqIE5vdGljZSB0aGF0IHdlIGFyZSBzdGlsbCB1c2luZyB0d28gcGx1cmFsIGNhdGVnb3JpZXMob25lLCBvdGhlciksIGJ1dCB3ZSBhZGRlZAogKiB0aHJlZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgMCwgMSBhbmQgMi4KICogV2hlbiBvbmUgcGVyc29uLCBwZXJoYXBzIEpvaG4sIHZpZXdzIHRoZSBkb2N1bWVudCwgIkpvaG4gaXMgdmlld2luZyIgd2lsbCBiZSBzaG93bi4KICogV2hlbiB0aHJlZSBwZW9wbGUgdmlldyB0aGUgZG9jdW1lbnQsIG5vIGV4cGxpY2l0IG51bWJlciBydWxlIGlzIGZvdW5kLCBzbwogKiBhbiBvZmZzZXQgb2YgMiBpcyB0YWtlbiBvZmYgMywgYW5kIEFuZ3VsYXIgdXNlcyAxIHRvIGRlY2lkZSB0aGUgcGx1cmFsIGNhdGVnb3J5LgogKiBJbiB0aGlzIGNhc2UsIHBsdXJhbCBjYXRlZ29yeSAnb25lJyBpcyBtYXRjaGVkIGFuZCAiSm9obiwgTWFycnkgYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmciCiAqIGlzIHNob3duLgogKgogKiBOb3RlIHRoYXQgd2hlbiB5b3Ugc3BlY2lmeSBvZmZzZXRzLCB5b3UgbXVzdCBwcm92aWRlIGV4cGxpY2l0IG51bWJlciBydWxlcyBmb3IKICogbnVtYmVycyBmcm9tIDAgdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgb2Zmc2V0LiBJZiB5b3UgdXNlIGFuIG9mZnNldCBvZiAzLCBmb3IgZXhhbXBsZSwKICogeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yIDAsIDEsIDIgYW5kIDMuIFlvdSBtdXN0IGFsc28gcHJvdmlkZSBwbHVyYWwgc3RyaW5ncyBmb3IKICogcGx1cmFsIGNhdGVnb3JpZXMgIm9uZSIgYW5kICJvdGhlciIuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfGV4cHJlc3Npb259IGNvdW50IFRoZSB2YXJpYWJsZSB0byBiZSBib3VuZGVkIHRvLgogKiBAcGFyYW0ge3N0cmluZ30gd2hlbiBUaGUgbWFwcGluZyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yeSB0byBpdHMgY29ycmVzcG9kaW5nIHN0cmluZ3MuCiAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBkZWR1Y3QgZnJvbSB0aGUgdG90YWwgbnVtYmVyLgogKgogKiBAZXhhbXBsZQogICAgPGRvYzpleGFtcGxlPgogICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICA8c2NyaXB0PgogICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjEgPSAnSWdvcic7CiAgICAgICAgICAgICRzY29wZS5wZXJzb24yID0gJ01pc2tvJzsKICAgICAgICAgICAgJHNjb3BlLnBlcnNvbkNvdW50ID0gMTsKICAgICAgICAgIH0KICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICAgUGVyc29uIDE6PGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJwZXJzb24xIiB2YWx1ZT0iSWdvciIgLz48YnIvPgogICAgICAgICAgUGVyc29uIDI6PGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJwZXJzb24yIiB2YWx1ZT0iTWlza28iIC8+PGJyLz4KICAgICAgICAgIE51bWJlciBvZiBQZW9wbGU6PGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJwZXJzb25Db3VudCIgdmFsdWU9IjEiIC8+PGJyLz4KCiAgICAgICAgICA8IS0tLSBFeGFtcGxlIHdpdGggc2ltcGxlIHBsdXJhbGl6YXRpb24gcnVsZXMgZm9yIGVuIGxvY2FsZSAtLS0+CiAgICAgICAgICBXaXRob3V0IE9mZnNldDoKICAgICAgICAgIDxuZy1wbHVyYWxpemUgY291bnQ9InBlcnNvbkNvdW50IgogICAgICAgICAgICAgICAgICAgICAgICB3aGVuPSJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAnMSBwZXJzb24gaXMgdmlld2luZy4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t9IHBlb3BsZSBhcmUgdmlld2luZy4nfSI+CiAgICAgICAgICA8L25nLXBsdXJhbGl6ZT48YnI+CgogICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIG9mZnNldCAtLS0+CiAgICAgICAgICBXaXRoIE9mZnNldCgyKToKICAgICAgICAgIDxuZy1wbHVyYWxpemUgY291bnQ9InBlcnNvbkNvdW50IiBvZmZzZXQ9MgogICAgICAgICAgICAgICAgICAgICAgICB3aGVuPSJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcxJzogJ3t7cGVyc29uMX19IGlzIHZpZXdpbmcuJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcyJzogJ3t7cGVyc29uMX19IGFuZCB7e3BlcnNvbjJ9fSBhcmUgdmlld2luZy4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIHt9IG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nfSI+CiAgICAgICAgICA8L25nLXBsdXJhbGl6ZT4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kb2M6c291cmNlPgogICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgIGl0KCdzaG91bGQgc2hvdyBjb3JyZWN0IHBsdXJhbGl6ZWQgc3RyaW5nJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmZpcnN0JykudGV4dCgpKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnMSBwZXJzb24gaXMgdmlld2luZy4nKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6bGFzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvQmUoJ0lnb3IgaXMgdmlld2luZy4nKTsKCiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uQ291bnQnKS5lbnRlcignMCcpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpmaXJzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnTm9ib2R5IGlzIHZpZXdpbmcuJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmxhc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnTm9ib2R5IGlzIHZpZXdpbmcuJyk7CgogICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ3BlcnNvbkNvdW50JykuZW50ZXIoJzInKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6Zmlyc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvQmUoJzIgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpsYXN0JykudGV4dCgpKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnSWdvciBhbmQgTWlza28gYXJlIHZpZXdpbmcuJyk7CgogICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ3BlcnNvbkNvdW50JykuZW50ZXIoJzMnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6Zmlyc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvQmUoJzMgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpsYXN0JykudGV4dCgpKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnSWdvciwgTWlza28gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyk7CgogICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ3BlcnNvbkNvdW50JykuZW50ZXIoJzQnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6Zmlyc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvQmUoJzQgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpsYXN0JykudGV4dCgpKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnSWdvciwgTWlza28gYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIHNob3cgZGF0YS1iaW5kZWQgbmFtZXMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmlucHV0KCdwZXJzb25Db3VudCcpLmVudGVyKCc0Jyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmxhc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgIHRvQmUoJ0lnb3IsIE1pc2tvIGFuZCAyIG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nKTsKCiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uMScpLmVudGVyKCdEaScpOwogICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ3BlcnNvbjInKS5lbnRlcignVm9qdGEnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6bGFzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgdG9CZSgnRGksIFZvanRhIGFuZCAyIG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIG5nUGx1cmFsaXplRGlyZWN0aXZlID0gWyckbG9jYWxlJywgJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRsb2NhbGUsICRpbnRlcnBvbGF0ZSkgewogIHZhciBCUkFDRSA9IC97fS9nOwogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0VBJywKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgIHZhciBudW1iZXJFeHAgPSBhdHRyLmNvdW50LAogICAgICAgICAgd2hlbkV4cCA9IGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLndoZW4pLCAvLyB0aGlzIGlzIGJlY2F1c2Ugd2UgaGF2ZSB7e319IGluIGF0dHJzCiAgICAgICAgICBvZmZzZXQgPSBhdHRyLm9mZnNldCB8fCAwLAogICAgICAgICAgd2hlbnMgPSBzY29wZS4kZXZhbCh3aGVuRXhwKSwKICAgICAgICAgIHdoZW5zRXhwRm5zID0ge307CgogICAgICBmb3JFYWNoKHdoZW5zLCBmdW5jdGlvbihleHByZXNzaW9uLCBrZXkpIHsKICAgICAgICB3aGVuc0V4cEZuc1trZXldID0KICAgICAgICAgICRpbnRlcnBvbGF0ZShleHByZXNzaW9uLnJlcGxhY2UoQlJBQ0UsICd7eycgKyBudW1iZXJFeHAgKyAnLScgKyBvZmZzZXQgKyAnfX0nKSk7CiAgICAgIH0pOwoKICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlRmxvYXQoc2NvcGUuJGV2YWwobnVtYmVyRXhwKSk7CgogICAgICAgIGlmICghaXNOYU4odmFsdWUpKSB7CiAgICAgICAgICAvL2lmIGV4cGxpY2l0IG51bWJlciBydWxlIHN1Y2ggYXMgMSwgMiwgMy4uLiBpcyBkZWZpbmVkLCBqdXN0IHVzZSBpdC4gT3RoZXJ3aXNlLAogICAgICAgICAgLy9jaGVjayBpdCBhZ2FpbnN0IHBsdXJhbGl6YXRpb24gcnVsZXMgaW4gJGxvY2FsZSBzZXJ2aWNlCiAgICAgICAgICBpZiAoIXdoZW5zW3ZhbHVlXSkgdmFsdWUgPSAkbG9jYWxlLnBsdXJhbENhdCh2YWx1ZSAtIG9mZnNldCk7CiAgICAgICAgICAgcmV0dXJuIHdoZW5zRXhwRm5zW3ZhbHVlXShzY29wZSwgZWxlbWVudCwgdHJ1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uKG5ld1ZhbCkgewogICAgICAgIGVsZW1lbnQudGV4dChuZXdWYWwpOwogICAgICB9KTsKICAgIH0KICB9Owp9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdAogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ1JlcGVhdGAgZGlyZWN0aXZlIGluc3RhbnRpYXRlcyBhIHRlbXBsYXRlIG9uY2UgcGVyIGl0ZW0gZnJvbSBhIGNvbGxlY3Rpb24uIEVhY2ggdGVtcGxhdGUKICogaW5zdGFuY2UgZ2V0cyBpdHMgb3duIHNjb3BlLCB3aGVyZSB0aGUgZ2l2ZW4gbG9vcCB2YXJpYWJsZSBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgY29sbGVjdGlvbiBpdGVtLAogKiBhbmQgYCRpbmRleGAgaXMgc2V0IHRvIHRoZSBpdGVtIGluZGV4IG9yIGtleS4KICoKICogU3BlY2lhbCBwcm9wZXJ0aWVzIGFyZSBleHBvc2VkIG9uIHRoZSBsb2NhbCBzY29wZSBvZiBlYWNoIHRlbXBsYXRlIGluc3RhbmNlLCBpbmNsdWRpbmc6CiAqCiAqICAgKiBgJGluZGV4YCDigJMgYHtudW1iZXJ9YCDigJMgaXRlcmF0b3Igb2Zmc2V0IG9mIHRoZSByZXBlYXRlZCBlbGVtZW50ICgwLi5sZW5ndGgtMSkKICogICAqIGAkZmlyc3RgIOKAkyBge2Jvb2xlYW59YCDigJMgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBmaXJzdCBpbiB0aGUgaXRlcmF0b3IuCiAqICAgKiBgJG1pZGRsZWAg4oCTIGB7Ym9vbGVhbn1gIOKAkyB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBsYXN0IGluIHRoZSBpdGVyYXRvci4KICogICAqIGAkbGFzdGAg4oCTIGB7Ym9vbGVhbn1gIOKAkyB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGxhc3QgaW4gdGhlIGl0ZXJhdG9yLgogKgogKgogKiBAZWxlbWVudCBBTlkKICogQHNjb3BlCiAqIEBwcmlvcml0eSAxMDAwCiAqIEBwYXJhbSB7cmVwZWF0X2V4cHJlc3Npb259IG5nUmVwZWF0IFRoZSBleHByZXNzaW9uIGluZGljYXRpbmcgaG93IHRvIGVudW1lcmF0ZSBhIGNvbGxlY3Rpb24uIFR3bwogKiAgIGZvcm1hdHMgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQ6CiAqCiAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbmAg4oCTIHdoZXJlIHZhcmlhYmxlIGlzIHRoZSB1c2VyIGRlZmluZWQgbG9vcCB2YXJpYWJsZSBhbmQgYGV4cHJlc3Npb25gCiAqICAgICBpcyBhIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS4KICoKICogICAgIEZvciBleGFtcGxlOiBgdHJhY2sgaW4gY2QudHJhY2tzYC4KICoKICogICAqIGAoa2V5LCB2YWx1ZSkgaW4gZXhwcmVzc2lvbmAg4oCTIHdoZXJlIGBrZXlgIGFuZCBgdmFsdWVgIGNhbiBiZSBhbnkgdXNlciBkZWZpbmVkIGlkZW50aWZpZXJzLAogKiAgICAgYW5kIGBleHByZXNzaW9uYCBpcyB0aGUgc2NvcGUgZXhwcmVzc2lvbiBnaXZpbmcgdGhlIGNvbGxlY3Rpb24gdG8gZW51bWVyYXRlLgogKgogKiAgICAgRm9yIGV4YW1wbGU6IGAobmFtZSwgYWdlKSBpbiB7J2FkYW0nOjEwLCAnYW1hbGllJzoxMn1gLgogKgogKiBAZXhhbXBsZQogKiBUaGlzIGV4YW1wbGUgaW5pdGlhbGl6ZXMgdGhlIHNjb3BlIHRvIGEgbGlzdCBvZiBuYW1lcyBhbmQKICogdGhlbiB1c2VzIGBuZ1JlcGVhdGAgdG8gZGlzcGxheSBldmVyeSBwZXJzb246CiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgIDxkaXYgbmctaW5pdD0iZnJpZW5kcyA9IFt7bmFtZTonSm9obicsIGFnZToyNX0sIHtuYW1lOidNYXJ5JywgYWdlOjI4fV0iPgogICAgICAgICAgSSBoYXZlIHt7ZnJpZW5kcy5sZW5ndGh9fSBmcmllbmRzLiBUaGV5IGFyZToKICAgICAgICAgIDx1bD4KICAgICAgICAgICAgPGxpIG5nLXJlcGVhdD0iZnJpZW5kIGluIGZyaWVuZHMiPgogICAgICAgICAgICAgIFt7eyRpbmRleCArIDF9fV0ge3tmcmllbmQubmFtZX19IHdobyBpcyB7e2ZyaWVuZC5hZ2V9fSB5ZWFycyBvbGQuCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctcmVwZWF0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgdmFyIHIgPSB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5yZXBlYXRlcigndWwgbGknKTsKICAgICAgICAgICBleHBlY3Qoci5jb3VudCgpKS50b0JlKDIpOwogICAgICAgICAgIGV4cGVjdChyLnJvdygwKSkudG9FcXVhbChbIjEiLCJKb2huIiwiMjUiXSk7CiAgICAgICAgICAgZXhwZWN0KHIucm93KDEpKS50b0VxdWFsKFsiMiIsIk1hcnkiLCIyOCJdKTsKICAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICovCnZhciBuZ1JlcGVhdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsKICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsCiAgcHJpb3JpdHk6IDEwMDAsCiAgdGVybWluYWw6IHRydWUsCiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0ciwgbGlua2VyKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGl0ZXJTdGFydEVsZW1lbnQsIGF0dHIpewogICAgICB2YXIgZXhwcmVzc2lvbiA9IGF0dHIubmdSZXBlYXQ7CiAgICAgIHZhciBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goL15ccyooLispXHMraW5ccysoLiopXHMqJC8pLAogICAgICAgIGxocywgcmhzLCB2YWx1ZUlkZW50LCBrZXlJZGVudDsKICAgICAgaWYgKCEgbWF0Y2gpIHsKICAgICAgICB0aHJvdyBFcnJvcigiRXhwZWN0ZWQgbmdSZXBlYXQgaW4gZm9ybSBvZiAnX2l0ZW1fIGluIF9jb2xsZWN0aW9uXycgYnV0IGdvdCAnIiArCiAgICAgICAgICBleHByZXNzaW9uICsgIicuIik7CiAgICAgIH0KICAgICAgbGhzID0gbWF0Y2hbMV07CiAgICAgIHJocyA9IG1hdGNoWzJdOwogICAgICBtYXRjaCA9IGxocy5tYXRjaCgvXig/OihbXCRcd10rKXxcKChbXCRcd10rKVxzKixccyooW1wkXHddKylcKSkkLyk7CiAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICB0aHJvdyBFcnJvcigiJ2l0ZW0nIGluICdpdGVtIGluIGNvbGxlY3Rpb24nIHNob3VsZCBiZSBpZGVudGlmaWVyIG9yIChrZXksIHZhbHVlKSBidXQgZ290ICciICsKICAgICAgICAgICAgbGhzICsgIicuIik7CiAgICAgIH0KICAgICAgdmFsdWVJZGVudCA9IG1hdGNoWzNdIHx8IG1hdGNoWzFdOwogICAgICBrZXlJZGVudCA9IG1hdGNoWzJdOwoKICAgICAgLy8gU3RvcmUgYSBsaXN0IG9mIGVsZW1lbnRzIGZyb20gcHJldmlvdXMgcnVuLiBUaGlzIGlzIGEgaGFzaCB3aGVyZSBrZXkgaXMgdGhlIGl0ZW0gZnJvbSB0aGUKICAgICAgLy8gaXRlcmF0b3IsIGFuZCB0aGUgdmFsdWUgaXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aXRoIGZvbGxvd2luZyBwcm9wZXJ0aWVzLgogICAgICAvLyAgIC0gc2NvcGU6IGJvdW5kIHNjb3BlCiAgICAgIC8vICAgLSBlbGVtZW50OiBwcmV2aW91cyBlbGVtZW50LgogICAgICAvLyAgIC0gaW5kZXg6IHBvc2l0aW9uCiAgICAgIC8vIFdlIG5lZWQgYW4gYXJyYXkgb2YgdGhlc2Ugb2JqZWN0cyBzaW5jZSB0aGUgc2FtZSBvYmplY3QgY2FuIGJlIHJldHVybmVkIGZyb20gdGhlIGl0ZXJhdG9yLgogICAgICAvLyBXZSBleHBlY3QgdGhpcyB0byBiZSBhIHJhcmUgY2FzZS4KICAgICAgdmFyIGxhc3RPcmRlciA9IG5ldyBIYXNoUXVldWVNYXAoKTsKICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKHNjb3BlKXsKICAgICAgICB2YXIgaW5kZXgsIGxlbmd0aCwKICAgICAgICAgICAgY29sbGVjdGlvbiA9IHNjb3BlLiRldmFsKHJocyksCiAgICAgICAgICAgIGNvbGxlY3Rpb25MZW5ndGggPSBzaXplKGNvbGxlY3Rpb24sIHRydWUpLAogICAgICAgICAgICBjaGlsZFNjb3BlLAogICAgICAgICAgICAvLyBTYW1lIGFzIGxhc3RPcmRlciBidXQgaXQgaGFzIHRoZSBjdXJyZW50IHN0YXRlLiBJdCB3aWxsIGJlY29tZSB0aGUKICAgICAgICAgICAgLy8gbGFzdE9yZGVyIG9uIHRoZSBuZXh0IGl0ZXJhdGlvbi4KICAgICAgICAgICAgbmV4dE9yZGVyID0gbmV3IEhhc2hRdWV1ZU1hcCgpLAogICAgICAgICAgICBrZXksIHZhbHVlLCAvLyBrZXkvdmFsdWUgb2YgaXRlcmF0aW9uCiAgICAgICAgICAgIGFycmF5LCBsYXN0LCAgICAgICAvLyBsYXN0IG9iamVjdCBpbmZvcm1hdGlvbiB7c2NvcGUsIGVsZW1lbnQsIGluZGV4fQogICAgICAgICAgICBjdXJzb3IgPSBpdGVyU3RhcnRFbGVtZW50OyAgICAgLy8gY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgbm9kZQoKICAgICAgICBpZiAoIWlzQXJyYXkoY29sbGVjdGlvbikpIHsKICAgICAgICAgIC8vIGlmIG9iamVjdCwgZXh0cmFjdCBrZXlzLCBzb3J0IHRoZW0gYW5kIHVzZSB0byBkZXRlcm1pbmUgb3JkZXIgb2YgaXRlcmF0aW9uIG92ZXIgb2JqIHByb3BzCiAgICAgICAgICBhcnJheSA9IFtdOwogICAgICAgICAgZm9yKGtleSBpbiBjb2xsZWN0aW9uKSB7CiAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uLmhhc093blByb3BlcnR5KGtleSkgJiYga2V5LmNoYXJBdCgwKSAhPSAnJCcpIHsKICAgICAgICAgICAgICBhcnJheS5wdXNoKGtleSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGFycmF5LnNvcnQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYXJyYXkgPSBjb2xsZWN0aW9uIHx8IFtdOwogICAgICAgIH0KCiAgICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBmb3JFYWNoIGZvciBwZXJmIHJlYXNvbnMgKHRyeWluZyB0byBhdm9pZCAjY2FsbCkKICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGFycmF5KSA/IGluZGV4IDogYXJyYXlbaW5kZXhdOwogICAgICAgICAgdmFsdWUgPSBjb2xsZWN0aW9uW2tleV07CiAgICAgICAgICBsYXN0ID0gbGFzdE9yZGVyLnNoaWZ0KHZhbHVlKTsKICAgICAgICAgIGlmIChsYXN0KSB7CiAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYWxyZWFkeSBzZWVuIHRoaXMgb2JqZWN0LCB0aGVuIHdlIG5lZWQgdG8gcmV1c2UgdGhlCiAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgc2NvcGUvZWxlbWVudAogICAgICAgICAgICBjaGlsZFNjb3BlID0gbGFzdC5zY29wZTsKICAgICAgICAgICAgbmV4dE9yZGVyLnB1c2godmFsdWUsIGxhc3QpOwoKICAgICAgICAgICAgaWYgKGluZGV4ID09PSBsYXN0LmluZGV4KSB7CiAgICAgICAgICAgICAgLy8gZG8gbm90aGluZwogICAgICAgICAgICAgIGN1cnNvciA9IGxhc3QuZWxlbWVudDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBleGlzdGluZyBpdGVtIHdoaWNoIGdvdCBtb3ZlZAogICAgICAgICAgICAgIGxhc3QuaW5kZXggPSBpbmRleDsKICAgICAgICAgICAgICAvLyBUaGlzIG1heSBiZSBhIG5vb3AsIGlmIHRoZSBlbGVtZW50IGlzIG5leHQsIGJ1dCBJIGRvbid0IGtub3cgb2YgYSBnb29kIHdheSB0bwogICAgICAgICAgICAgIC8vIGZpZ3VyZSB0aGlzIG91dCwgIHNpbmNlIGl0IHdvdWxkIHJlcXVpcmUgZXh0cmEgRE9NIGFjY2Vzcywgc28gbGV0J3MganVzdCBob3BlIHRoYXQKICAgICAgICAgICAgICAvLyB0aGUgYnJvd3NlcnMgcmVhbGl6ZXMgdGhhdCBpdCBpcyBub29wLCBhbmQgdHJlYXRzIGl0IGFzIHN1Y2guCiAgICAgICAgICAgICAgY3Vyc29yLmFmdGVyKGxhc3QuZWxlbWVudCk7CiAgICAgICAgICAgICAgY3Vyc29yID0gbGFzdC5lbGVtZW50OwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBuZXcgaXRlbSB3aGljaCB3ZSBkb24ndCBrbm93IGFib3V0CiAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBzY29wZS4kbmV3KCk7CiAgICAgICAgICB9CgogICAgICAgICAgY2hpbGRTY29wZVt2YWx1ZUlkZW50XSA9IHZhbHVlOwogICAgICAgICAgaWYgKGtleUlkZW50KSBjaGlsZFNjb3BlW2tleUlkZW50XSA9IGtleTsKICAgICAgICAgIGNoaWxkU2NvcGUuJGluZGV4ID0gaW5kZXg7CgogICAgICAgICAgY2hpbGRTY29wZS4kZmlyc3QgPSAoaW5kZXggPT09IDApOwogICAgICAgICAgY2hpbGRTY29wZS4kbGFzdCA9IChpbmRleCA9PT0gKGNvbGxlY3Rpb25MZW5ndGggLSAxKSk7CiAgICAgICAgICBjaGlsZFNjb3BlLiRtaWRkbGUgPSAhKGNoaWxkU2NvcGUuJGZpcnN0IHx8IGNoaWxkU2NvcGUuJGxhc3QpOwoKICAgICAgICAgIGlmICghbGFzdCkgewogICAgICAgICAgICBsaW5rZXIoY2hpbGRTY29wZSwgZnVuY3Rpb24oY2xvbmUpewogICAgICAgICAgICAgIGN1cnNvci5hZnRlcihjbG9uZSk7CiAgICAgICAgICAgICAgbGFzdCA9IHsKICAgICAgICAgICAgICAgICAgc2NvcGU6IGNoaWxkU2NvcGUsCiAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IChjdXJzb3IgPSBjbG9uZSksCiAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBuZXh0T3JkZXIucHVzaCh2YWx1ZSwgbGFzdCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy9zaHJpbmsgY2hpbGRyZW4KICAgICAgICBmb3IgKGtleSBpbiBsYXN0T3JkZXIpIHsKICAgICAgICAgIGlmIChsYXN0T3JkZXIuaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICBhcnJheSA9IGxhc3RPcmRlcltrZXldOwogICAgICAgICAgICB3aGlsZShhcnJheS5sZW5ndGgpIHsKICAgICAgICAgICAgICB2YWx1ZSA9IGFycmF5LnBvcCgpOwogICAgICAgICAgICAgIHZhbHVlLmVsZW1lbnQucmVtb3ZlKCk7CiAgICAgICAgICAgICAgdmFsdWUuc2NvcGUuJGRlc3Ryb3koKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgbGFzdE9yZGVyID0gbmV4dE9yZGVyOwogICAgICB9KTsKICAgIH07CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1Nob3cKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdTaG93YCBhbmQgYG5nSGlkZWAgZGlyZWN0aXZlcyBzaG93IG9yIGhpZGUgYSBwb3J0aW9uIG9mIHRoZSBET00gdHJlZSAoSFRNTCkKICogY29uZGl0aW9uYWxseS4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTaG93IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHkKICogICAgIHRoZW4gdGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIHJlc3BlY3RpdmVseS4KICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIj48YnIvPgogICAgICAgIFNob3c6IDxzcGFuIG5nLXNob3c9ImNoZWNrZWQiPkkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC48L3NwYW4+IDxici8+CiAgICAgICAgSGlkZTogPHNwYW4gbmctaGlkZT0iY2hlY2tlZCI+SSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLjwvc3Bhbj4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc2hvdyAvIG5nLWhpZGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW46Zmlyc3Q6aGlkZGVuJykuY291bnQoKSkudG9FcXVhbCgxKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW46bGFzdDp2aXNpYmxlJykuY291bnQoKSkudG9FcXVhbCgxKTsKCiAgICAgICAgIGlucHV0KCdjaGVja2VkJykuY2hlY2soKTsKCiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuOmZpcnN0OnZpc2libGUnKS5jb3VudCgpKS50b0VxdWFsKDEpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbjpsYXN0OmhpZGRlbicpLmNvdW50KCkpLnRvRXF1YWwoMSk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCi8vVE9ETyhtaXNrbyk6IHJlZmFjdG9yIHRvIHJlbW92ZSBlbGVtZW50IGZyb20gdGhlIERPTQp2YXIgbmdTaG93RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpewogIHNjb3BlLiR3YXRjaChhdHRyLm5nU2hvdywgZnVuY3Rpb24odmFsdWUpewogICAgZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCB0b0Jvb2xlYW4odmFsdWUpID8gJycgOiAnbm9uZScpOwogIH0pOwp9KTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdIaWRlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nSGlkZWAgYW5kIGBuZ1Nob3dgIGRpcmVjdGl2ZXMgaGlkZSBvciBzaG93IGEgcG9ydGlvbgogKiBvZiB0aGUgSFRNTCBjb25kaXRpb25hbGx5LgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0hpZGUgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IHRydXRoeSB0aGVuCiAqICAgICB0aGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gcmVzcGVjdGl2ZWx5LgogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgQ2xpY2sgbWU6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9ImNoZWNrZWQiPjxici8+CiAgICAgICAgU2hvdzogPHNwYW4gbmctc2hvdz0iY2hlY2tlZCI+SSBzaG93IHVwIHdoZW4geW91IGNoZWNrYm94IGlzIGNoZWNrZWQ/PC9zcGFuPiA8YnIvPgogICAgICAgIEhpZGU6IDxzcGFuIG5nLWhpZGU9ImNoZWNrZWQiPkkgaGlkZSB3aGVuIHlvdSBjaGVja2JveCBpcyBjaGVja2VkPzwvc3Bhbj4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc2hvdyAvIG5nLWhpZGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW46Zmlyc3Q6aGlkZGVuJykuY291bnQoKSkudG9FcXVhbCgxKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW46bGFzdDp2aXNpYmxlJykuY291bnQoKSkudG9FcXVhbCgxKTsKCiAgICAgICAgIGlucHV0KCdjaGVja2VkJykuY2hlY2soKTsKCiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuOmZpcnN0OnZpc2libGUnKS5jb3VudCgpKS50b0VxdWFsKDEpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbjpsYXN0OmhpZGRlbicpLmNvdW50KCkpLnRvRXF1YWwoMSk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCi8vVE9ETyhtaXNrbyk6IHJlZmFjdG9yIHRvIHJlbW92ZSBlbGVtZW50IGZyb20gdGhlIERPTQp2YXIgbmdIaWRlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpewogIHNjb3BlLiR3YXRjaChhdHRyLm5nSGlkZSwgZnVuY3Rpb24odmFsdWUpewogICAgZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCB0b0Jvb2xlYW4odmFsdWUpID8gJ25vbmUnIDogJycpOwogIH0pOwp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1N0eWxlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nU3R5bGVgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNldCBDU1Mgc3R5bGUgb24gYW4gSFRNTCBlbGVtZW50IGNvbmRpdGlvbmFsbHkuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3R5bGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gd2hpY2ggZXZhbHMgdG8gYW4KICogICAgICBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgQ1NTIHN0eWxlIG5hbWVzIGFuZCB2YWx1ZXMgYXJlIGNvcnJlc3BvbmRpbmcgdmFsdWVzIGZvciB0aG9zZSBDU1MKICogICAgICBrZXlzLgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICA8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0ic2V0IiBuZy1jbGljaz0ibXlTdHlsZT17Y29sb3I6J3JlZCd9Ij4KICAgICAgICA8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0iY2xlYXIiIG5nLWNsaWNrPSJteVN0eWxlPXt9Ij4KICAgICAgICA8YnIvPgogICAgICAgIDxzcGFuIG5nLXN0eWxlPSJteVN0eWxlIj5TYW1wbGUgVGV4dDwvc3Bhbj4KICAgICAgICA8cHJlPm15U3R5bGU9e3tteVN0eWxlfX08L3ByZT4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic3R5bGUuY3NzIj4KICAgICAgIHNwYW4gewogICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3R5bGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW4nKS5jc3MoJ2NvbG9yJykpLnRvQmUoJ3JnYigwLCAwLCAwKScpOwogICAgICAgICBlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSA6YnV0dG9uW3ZhbHVlPXNldF0nKS5jbGljaygpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbicpLmNzcygnY29sb3InKSkudG9CZSgncmdiKDI1NSwgMCwgMCknKTsKICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgOmJ1dHRvblt2YWx1ZT1jbGVhcl0nKS5jbGljaygpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbicpLmNzcygnY29sb3InKSkudG9CZSgncmdiKDAsIDAsIDApJyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCnZhciBuZ1N0eWxlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICBzY29wZS4kd2F0Y2goYXR0ci5uZ1N0eWxlLCBmdW5jdGlvbihuZXdTdHlsZXMsIG9sZFN0eWxlcykgewogICAgaWYgKG9sZFN0eWxlcyAmJiAobmV3U3R5bGVzICE9PSBvbGRTdHlsZXMpKSB7CiAgICAgIGZvckVhY2gob2xkU3R5bGVzLCBmdW5jdGlvbih2YWwsIHN0eWxlKSB7IGVsZW1lbnQuY3NzKHN0eWxlLCAnJyk7fSk7CiAgICB9CiAgICBpZiAobmV3U3R5bGVzKSBlbGVtZW50LmNzcyhuZXdTdHlsZXMpOwogIH0sIHRydWUpOwp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1N3aXRjaAogKiBAcmVzdHJpY3QgRUEKICoKICogQGRlc2NyaXB0aW9uCiAqIENvbmRpdGlvbmFsbHkgY2hhbmdlIHRoZSBET00gc3RydWN0dXJlLgogKgogKiBAdXNhZ2VDb250ZW50CiAqIDxBTlkgbmctc3dpdGNoLXdoZW49Im1hdGNoVmFsdWUxIj4uLi48L0FOWT4KICogICA8QU5ZIG5nLXN3aXRjaC13aGVuPSJtYXRjaFZhbHVlMiI+Li4uPC9BTlk+CiAqICAgLi4uCiAqICAgPEFOWSBuZy1zd2l0Y2gtZGVmYXVsdD4uLi48L0FOWT4KICoKICogQHNjb3BlCiAqIEBwYXJhbSB7Kn0gbmdTd2l0Y2h8b24gZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0IDx0dD5uZy1zd2l0Y2gtd2hlbjwvdHQ+LgogKiBAcGFyYW1EZXNjcmlwdGlvbgogKiBPbiBjaGlsZCBlbG1lbnRzIGFkZDoKICoKICogKiBgbmdTd2l0Y2hXaGVuYDogdGhlIGNhc2Ugc3RhdGVtZW50IHRvIG1hdGNoIGFnYWluc3QuIElmIG1hdGNoIHRoZW4gdGhpcwogKiAgIGNhc2Ugd2lsbCBiZSBkaXNwbGF5ZWQuCiAqICogYG5nU3dpdGNoRGVmYXVsdGA6IHRoZSBkZWZhdWx0IGNhc2Ugd2hlbiBubyBvdGhlciBjYXNzZXMgbWF0Y2guCiAqCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICAkc2NvcGUuaXRlbXMgPSBbJ3NldHRpbmdzJywgJ2hvbWUnLCAnb3RoZXInXTsKICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGlvbiA9ICRzY29wZS5pdGVtc1swXTsKICAgICAgICAgIH0KICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD0ic2VsZWN0aW9uIiBuZy1vcHRpb25zPSJpdGVtIGZvciBpdGVtIGluIGl0ZW1zIj4KICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgPHR0PnNlbGVjdGlvbj17e3NlbGVjdGlvbn19PC90dD4KICAgICAgICAgIDxoci8+CiAgICAgICAgICA8ZGl2IG5nLXN3aXRjaCBvbj0ic2VsZWN0aW9uIiA+CiAgICAgICAgICAgIDxkaXYgbmctc3dpdGNoLXdoZW49InNldHRpbmdzIj5TZXR0aW5ncyBEaXY8L2Rpdj4KICAgICAgICAgICAgPHNwYW4gbmctc3dpdGNoLXdoZW49ImhvbWUiPkhvbWUgU3Bhbjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gbmctc3dpdGNoLWRlZmF1bHQ+ZGVmYXVsdDwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCBzdGFydCBpbiBzZXR0aW5ncycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLXN3aXRjaF0nKS50ZXh0KCkpLnRvTWF0Y2goL1NldHRpbmdzIERpdi8pOwogICAgICAgIH0pOwogICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIGhvbWUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgc2VsZWN0KCdzZWxlY3Rpb24nKS5vcHRpb24oJ2hvbWUnKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy1zd2l0Y2hdJykudGV4dCgpKS50b01hdGNoKC9Ib21lIFNwYW4vKTsKICAgICAgICB9KTsKICAgICAgICBpdCgnc2hvdWxkIHNlbGVjdCBkZWFmYXVsdCcsIGZ1bmN0aW9uKCkgewogICAgICAgICBzZWxlY3QoJ3NlbGVjdGlvbicpLm9wdGlvbignb3RoZXInKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy1zd2l0Y2hdJykudGV4dCgpKS50b01hdGNoKC9kZWZhdWx0Lyk7CiAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICovCnZhciBOR19TV0lUQ0ggPSAnbmctc3dpdGNoJzsKdmFyIG5nU3dpdGNoRGlyZWN0aXZlID0gdmFsdWVGbih7CiAgcmVzdHJpY3Q6ICdFQScsCiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikgewogICAgdmFyIHdhdGNoRXhwciA9IGF0dHIubmdTd2l0Y2ggfHwgYXR0ci5vbiwKICAgICAgICBjYXNlcyA9IHt9OwoKICAgIGVsZW1lbnQuZGF0YShOR19TV0lUQ0gsIGNhc2VzKTsKICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCl7CiAgICAgIHZhciBzZWxlY3RlZFRyYW5zY2x1ZGUsCiAgICAgICAgICBzZWxlY3RlZEVsZW1lbnQsCiAgICAgICAgICBzZWxlY3RlZFNjb3BlOwoKICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoRXhwciwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBpZiAoc2VsZWN0ZWRFbGVtZW50KSB7CiAgICAgICAgICBzZWxlY3RlZFNjb3BlLiRkZXN0cm95KCk7CiAgICAgICAgICBzZWxlY3RlZEVsZW1lbnQucmVtb3ZlKCk7CiAgICAgICAgICBzZWxlY3RlZEVsZW1lbnQgPSBzZWxlY3RlZFNjb3BlID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgaWYgKChzZWxlY3RlZFRyYW5zY2x1ZGUgPSBjYXNlc1snIScgKyB2YWx1ZV0gfHwgY2FzZXNbJz8nXSkpIHsKICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHIuY2hhbmdlKTsKICAgICAgICAgIHNlbGVjdGVkU2NvcGUgPSBzY29wZS4kbmV3KCk7CiAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGUoc2VsZWN0ZWRTY29wZSwgZnVuY3Rpb24oY2FzZUVsZW1lbnQpIHsKICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50ID0gY2FzZUVsZW1lbnQ7CiAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKGNhc2VFbGVtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9OwogIH0KfSk7Cgp2YXIgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoewogIHRyYW5zY2x1ZGU6ICdlbGVtZW50JywKICBwcmlvcml0eTogNTAwLAogIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzLCB0cmFuc2NsdWRlKSB7CiAgICB2YXIgY2FzZXMgPSBlbGVtZW50LmluaGVyaXRlZERhdGEoTkdfU1dJVENIKTsKICAgIGFzc2VydEFyZyhjYXNlcyk7CiAgICBjYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dID0gdHJhbnNjbHVkZTsKICB9Cn0pOwoKdmFyIG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsKICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsCiAgcHJpb3JpdHk6IDUwMCwKICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycywgdHJhbnNjbHVkZSkgewogICAgdmFyIGNhc2VzID0gZWxlbWVudC5pbmhlcml0ZWREYXRhKE5HX1NXSVRDSCk7CiAgICBhc3NlcnRBcmcoY2FzZXMpOwogICAgY2FzZXNbJz8nXSA9IHRyYW5zY2x1ZGU7CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1RyYW5zY2x1ZGUKICoKICogQGRlc2NyaXB0aW9uCiAqIEluc2VydCB0aGUgdHJhbnNjbHVkZWQgRE9NIGhlcmUuCiAqCiAqIEBlbGVtZW50IEFOWQogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGUgbW9kdWxlPSJ0cmFuc2NsdWRlIj4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJ0xvcmVtIElwc3VtJzsKICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdOZXF1ZSBwb3JybyBxdWlzcXVhbSBlc3QgcXVpIGRvbG9yZW0gaXBzdW0gcXVpYSBkb2xvci4uLic7CiAgICAgICAgIH0KCiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd0cmFuc2NsdWRlJywgW10pCiAgICAgICAgICAuZGlyZWN0aXZlKCdwYW5lJywgZnVuY3Rpb24oKXsKICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsCiAgICAgICAgICAgICAgIHNjb3BlOiAnaXNvbGF0ZScsCiAgICAgICAgICAgICAgIGxvY2FsczogeyB0aXRsZTonYmluZCcgfSwKICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPSJib3JkZXI6IDFweCBzb2xpZCBibGFjazsiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogZ3JheSI+e3t0aXRsZX19PC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IG5nLXRyYW5zY2x1ZGU+PC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JwogICAgICAgICAgICAgfTsKICAgICAgICAgfSk7CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD0idGl0bGUiPjxicj4KICAgICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPSJ0ZXh0Ij48L3RleHRhcmVhPiA8YnIvPgogICAgICAgICA8cGFuZSB0aXRsZT0ie3t0aXRsZX19Ij57e3RleHR9fTwvcGFuZT4KICAgICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgIGl0KCdzaG91bGQgaGF2ZSB0cmFuc2NsdWRlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ3RpdGxlJykuZW50ZXIoJ1RJVExFJyk7CiAgICAgICAgICBpbnB1dCgndGV4dCcpLmVudGVyKCdURVhUJyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygndGl0bGUnKSkudG9FcXVhbCgnVElUTEUnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd0ZXh0JykpLnRvRXF1YWwoJ1RFWFQnKTsKICAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICoKICovCnZhciBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7CiAgY29udHJvbGxlcjogWyckdHJhbnNjbHVkZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCR0cmFuc2NsdWRlLCAkZWxlbWVudCkgewogICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUpIHsKICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTsKICAgIH0pOwogIH1dCn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nVmlldwogKiBAcmVzdHJpY3QgRUNBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiAjIE92ZXJ2aWV3CiAqIGBuZ1ZpZXdgIGlzIGEgZGlyZWN0aXZlIHRoYXQgY29tcGxlbWVudHMgdGhlIHtAbGluayBuZy4kcm91dGUgJHJvdXRlfSBzZXJ2aWNlIGJ5CiAqIGluY2x1ZGluZyB0aGUgcmVuZGVyZWQgdGVtcGxhdGUgb2YgdGhlIGN1cnJlbnQgcm91dGUgaW50byB0aGUgbWFpbiBsYXlvdXQgKGBpbmRleC5odG1sYCkgZmlsZS4KICogRXZlcnkgdGltZSB0aGUgY3VycmVudCByb3V0ZSBjaGFuZ2VzLCB0aGUgaW5jbHVkZWQgdmlldyBjaGFuZ2VzIHdpdGggaXQgYWNjb3JkaW5nIHRvIHRoZQogKiBjb25maWd1cmF0aW9uIG9mIHRoZSBgJHJvdXRlYCBzZXJ2aWNlLgogKgogKiBAc2NvcGUKICogQGV4YW1wbGUKICAgIDxleGFtcGxlIG1vZHVsZT0ibmdWaWV3Ij4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJNYWluQ250bCI+CiAgICAgICAgICBDaG9vc2U6CiAgICAgICAgICA8YSBocmVmPSJCb29rL01vYnkiPk1vYnk8L2E+IHwKICAgICAgICAgIDxhIGhyZWY9IkJvb2svTW9ieS9jaC8xIj5Nb2J5OiBDaDE8L2E+IHwKICAgICAgICAgIDxhIGhyZWY9IkJvb2svR2F0c2J5Ij5HYXRzYnk8L2E+IHwKICAgICAgICAgIDxhIGhyZWY9IkJvb2svR2F0c2J5L2NoLzQ/a2V5PXZhbHVlIj5HYXRzYnk6IENoNDwvYT4gfAogICAgICAgICAgPGEgaHJlZj0iQm9vay9TY2FybGV0Ij5TY2FybGV0IExldHRlcjwvYT48YnIvPgoKICAgICAgICAgIDxkaXYgbmctdmlldz48L2Rpdj4KICAgICAgICAgIDxociAvPgoKICAgICAgICAgIDxwcmU+JGxvY2F0aW9uLnBhdGgoKSA9IHt7JGxvY2F0aW9uLnBhdGgoKX19PC9wcmU+CiAgICAgICAgICA8cHJlPiRyb3V0ZS5jdXJyZW50LnRlbXBsYXRlID0ge3skcm91dGUuY3VycmVudC50ZW1wbGF0ZX19PC9wcmU+CiAgICAgICAgICA8cHJlPiRyb3V0ZS5jdXJyZW50LnBhcmFtcyA9IHt7JHJvdXRlLmN1cnJlbnQucGFyYW1zfX08L3ByZT4KICAgICAgICAgIDxwcmU+JHJvdXRlLmN1cnJlbnQuc2NvcGUubmFtZSA9IHt7JHJvdXRlLmN1cnJlbnQuc2NvcGUubmFtZX19PC9wcmU+CiAgICAgICAgICA8cHJlPiRyb3V0ZVBhcmFtcyA9IHt7JHJvdXRlUGFyYW1zfX08L3ByZT4KICAgICAgICA8L2Rpdj4KICAgICAgPC9maWxlPgoKICAgICAgPGZpbGUgbmFtZT0iYm9vay5odG1sIj4KICAgICAgICBjb250cm9sbGVyOiB7e25hbWV9fTxiciAvPgogICAgICAgIEJvb2sgSWQ6IHt7cGFyYW1zLmJvb2tJZH19PGJyIC8+CiAgICAgIDwvZmlsZT4KCiAgICAgIDxmaWxlIG5hbWU9ImNoYXB0ZXIuaHRtbCI+CiAgICAgICAgY29udHJvbGxlcjoge3tuYW1lfX08YnIgLz4KICAgICAgICBCb29rIElkOiB7e3BhcmFtcy5ib29rSWR9fTxiciAvPgogICAgICAgIENoYXB0ZXIgSWQ6IHt7cGFyYW1zLmNoYXB0ZXJJZH19CiAgICAgIDwvZmlsZT4KCiAgICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ25nVmlldycsIFtdLCBmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHsKICAgICAgICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9Cb29rLzpib29rSWQnLCB7CiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYm9vay5odG1sJywKICAgICAgICAgICAgY29udHJvbGxlcjogQm9va0NudGwKICAgICAgICAgIH0pOwogICAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignL0Jvb2svOmJvb2tJZC9jaC86Y2hhcHRlcklkJywgewogICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NoYXB0ZXIuaHRtbCcsCiAgICAgICAgICAgIGNvbnRyb2xsZXI6IENoYXB0ZXJDbnRsCiAgICAgICAgICB9KTsKCiAgICAgICAgICAvLyBjb25maWd1cmUgaHRtbDUgdG8gZ2V0IGxpbmtzIHdvcmtpbmcgb24ganNmaWRkbGUKICAgICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTsKICAgICAgICB9KTsKCiAgICAgICAgZnVuY3Rpb24gTWFpbkNudGwoJHNjb3BlLCAkcm91dGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKSB7CiAgICAgICAgICAkc2NvcGUuJHJvdXRlID0gJHJvdXRlOwogICAgICAgICAgJHNjb3BlLiRsb2NhdGlvbiA9ICRsb2NhdGlvbjsKICAgICAgICAgICRzY29wZS4kcm91dGVQYXJhbXMgPSAkcm91dGVQYXJhbXM7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBCb29rQ250bCgkc2NvcGUsICRyb3V0ZVBhcmFtcykgewogICAgICAgICAgJHNjb3BlLm5hbWUgPSAiQm9va0NudGwiOwogICAgICAgICAgJHNjb3BlLnBhcmFtcyA9ICRyb3V0ZVBhcmFtczsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIENoYXB0ZXJDbnRsKCRzY29wZSwgJHJvdXRlUGFyYW1zKSB7CiAgICAgICAgICAkc2NvcGUubmFtZSA9ICJDaGFwdGVyQ250bCI7CiAgICAgICAgICAkc2NvcGUucGFyYW1zID0gJHJvdXRlUGFyYW1zOwogICAgICAgIH0KICAgICAgPC9maWxlPgoKICAgICAgPGZpbGUgbmFtZT0ic2NlbmFyaW8uanMiPgogICAgICAgIGl0KCdzaG91bGQgbG9hZCBhbmQgY29tcGlsZSBjb3JyZWN0IHRlbXBsYXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBlbGVtZW50KCdhOmNvbnRhaW5zKCJNb2J5OiBDaDEiKScpLmNsaWNrKCk7CiAgICAgICAgICB2YXIgY29udGVudCA9IGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy12aWV3XScpLnRleHQoKTsKICAgICAgICAgIGV4cGVjdChjb250ZW50KS50b01hdGNoKC9jb250cm9sbGVyXDogQ2hhcHRlckNudGwvKTsKICAgICAgICAgIGV4cGVjdChjb250ZW50KS50b01hdGNoKC9Cb29rIElkXDogTW9ieS8pOwogICAgICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL0NoYXB0ZXIgSWRcOiAxLyk7CgogICAgICAgICAgZWxlbWVudCgnYTpjb250YWlucygiU2NhcmxldCIpJykuY2xpY2soKTsKICAgICAgICAgIGNvbnRlbnQgPSBlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBbbmctdmlld10nKS50ZXh0KCk7CiAgICAgICAgICBleHBlY3QoY29udGVudCkudG9NYXRjaCgvY29udHJvbGxlclw6IEJvb2tDbnRsLyk7CiAgICAgICAgICBleHBlY3QoY29udGVudCkudG9NYXRjaCgvQm9vayBJZFw6IFNjYXJsZXQvKTsKICAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKi8KCgovKioKICogQG5nZG9jIGV2ZW50CiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1ZpZXcjJHZpZXdDb250ZW50TG9hZGVkCiAqIEBldmVudE9mIG5nLmRpcmVjdGl2ZTpuZ1ZpZXcKICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBjdXJyZW50IG5nVmlldyBzY29wZQogKiBAZGVzY3JpcHRpb24KICogRW1pdHRlZCBldmVyeSB0aW1lIHRoZSBuZ1ZpZXcgY29udGVudCBpcyByZWxvYWRlZC4KICovCnZhciBuZ1ZpZXdEaXJlY3RpdmUgPSBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRyb3V0ZScsICckYW5jaG9yU2Nyb2xsJywgJyRjb21waWxlJywKICAgICAgICAgICAgICAgICAgICAgICAnJGNvbnRyb2xsZXInLAogICAgICAgICAgICAgICBmdW5jdGlvbigkaHR0cCwgICAkdGVtcGxhdGVDYWNoZSwgICAkcm91dGUsICAgJGFuY2hvclNjcm9sbCwgICAkY29tcGlsZSwKICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRyb2xsZXIpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdFQ0EnLAogICAgdGVybWluYWw6IHRydWUsCiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICB2YXIgbGFzdFNjb3BlLAogICAgICAgICAgb25sb2FkRXhwID0gYXR0ci5vbmxvYWQgfHwgJyc7CgogICAgICBzY29wZS4kb24oJyRyb3V0ZUNoYW5nZVN1Y2Nlc3MnLCB1cGRhdGUpOwogICAgICB1cGRhdGUoKTsKCgogICAgICBmdW5jdGlvbiBkZXN0cm95TGFzdFNjb3BlKCkgewogICAgICAgIGlmIChsYXN0U2NvcGUpIHsKICAgICAgICAgIGxhc3RTY29wZS4kZGVzdHJveSgpOwogICAgICAgICAgbGFzdFNjb3BlID0gbnVsbDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGNsZWFyQ29udGVudCgpIHsKICAgICAgICBlbGVtZW50Lmh0bWwoJycpOwogICAgICAgIGRlc3Ryb3lMYXN0U2NvcGUoKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gdXBkYXRlKCkgewogICAgICAgIHZhciBsb2NhbHMgPSAkcm91dGUuY3VycmVudCAmJiAkcm91dGUuY3VycmVudC5sb2NhbHMsCiAgICAgICAgICAgIHRlbXBsYXRlID0gbG9jYWxzICYmIGxvY2Fscy4kdGVtcGxhdGU7CgogICAgICAgIGlmICh0ZW1wbGF0ZSkgewogICAgICAgICAgZWxlbWVudC5odG1sKHRlbXBsYXRlKTsKICAgICAgICAgIGRlc3Ryb3lMYXN0U2NvcGUoKTsKCiAgICAgICAgICB2YXIgbGluayA9ICRjb21waWxlKGVsZW1lbnQuY29udGVudHMoKSksCiAgICAgICAgICAgICAgY3VycmVudCA9ICRyb3V0ZS5jdXJyZW50LAogICAgICAgICAgICAgIGNvbnRyb2xsZXI7CgogICAgICAgICAgbGFzdFNjb3BlID0gY3VycmVudC5zY29wZSA9IHNjb3BlLiRuZXcoKTsKICAgICAgICAgIGlmIChjdXJyZW50LmNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgbG9jYWxzLiRzY29wZSA9IGxhc3RTY29wZTsKICAgICAgICAgICAgY29udHJvbGxlciA9ICRjb250cm9sbGVyKGN1cnJlbnQuY29udHJvbGxlciwgbG9jYWxzKTsKICAgICAgICAgICAgZWxlbWVudC5jb250ZW50cygpLmRhdGEoJyRuZ0NvbnRyb2xsZXJDb250cm9sbGVyJywgY29udHJvbGxlcik7CiAgICAgICAgICB9CgogICAgICAgICAgbGluayhsYXN0U2NvcGUpOwogICAgICAgICAgbGFzdFNjb3BlLiRlbWl0KCckdmlld0NvbnRlbnRMb2FkZWQnKTsKICAgICAgICAgIGxhc3RTY29wZS4kZXZhbChvbmxvYWRFeHApOwoKICAgICAgICAgIC8vICRhbmNob3JTY3JvbGwgbWlnaHQgbGlzdGVuIG9uIGV2ZW50Li4uCiAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNsZWFyQ29udGVudCgpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH07Cn1dOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOnNjcmlwdAogKgogKiBAZGVzY3JpcHRpb24KICogTG9hZCBjb250ZW50IG9mIGEgc2NyaXB0IHRhZywgd2l0aCB0eXBlIGB0ZXh0L25nLXRlbXBsYXRlYCwgaW50byBgJHRlbXBsYXRlQ2FjaGVgLCBzbyB0aGF0IHRoZQogKiB0ZW1wbGF0ZSBjYW4gYmUgdXNlZCBieSBgbmdJbmNsdWRlYCwgYG5nVmlld2Agb3IgZGlyZWN0aXZlIHRlbXBsYXRlcy4KICoKICogQHJlc3RyaWN0IEUKICogQHBhcmFtIHsndGV4dC9uZy10ZW1wbGF0ZSd9IHR5cGUgbXVzdCBiZSBzZXQgdG8gYCd0ZXh0L25nLXRlbXBsYXRlJ2AKICoKICogQGV4YW1wbGUKICA8ZG9jOmV4YW1wbGU+CiAgICA8ZG9jOnNvdXJjZT4KICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L25nLXRlbXBsYXRlIiBpZD0iL3RwbC5odG1sIj4KICAgICAgICBDb250ZW50IG9mIHRoZSB0ZW1wbGF0ZS4KICAgICAgPC9zY3JpcHQ+CgogICAgICA8YSBuZy1jbGljaz0iY3VycmVudFRwbD0nL3RwbC5odG1sJyIgaWQ9InRwbC1saW5rIj5Mb2FkIGlubGluZWQgdGVtcGxhdGU8L2E+CiAgICAgIDxkaXYgaWQ9InRwbC1jb250ZW50IiBuZy1pbmNsdWRlIHNyYz0iY3VycmVudFRwbCI+PC9kaXY+CiAgICA8L2RvYzpzb3VyY2U+CiAgICA8ZG9jOnNjZW5hcmlvPgogICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUgZGVmaW5lZCBpbnNpZGUgc2NyaXB0IHRhZycsIGZ1bmN0aW9uKCkgewogICAgICAgIGVsZW1lbnQoJyN0cGwtbGluaycpLmNsaWNrKCk7CiAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyN0cGwtY29udGVudCcpLnRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0aGUgdGVtcGxhdGUvKTsKICAgICAgfSk7CiAgICA8L2RvYzpzY2VuYXJpbz4KICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIHNjcmlwdERpcmVjdGl2ZSA9IFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0UnLAogICAgdGVybWluYWw6IHRydWUsCiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICAgIGlmIChhdHRyLnR5cGUgPT0gJ3RleHQvbmctdGVtcGxhdGUnKSB7CiAgICAgICAgdmFyIHRlbXBsYXRlVXJsID0gYXR0ci5pZCwKICAgICAgICAgICAgLy8gSUUgaXMgbm90IGNvbnNpc3RlbnQsIGluIHNjcmlwdHMgd2UgaGF2ZSB0byByZWFkIC50ZXh0IGJ1dCBpbiBvdGhlciBub2RlcyB3ZSBoYXZlIHRvIHJlYWQgLnRleHRDb250ZW50CiAgICAgICAgICAgIHRleHQgPSBlbGVtZW50WzBdLnRleHQ7CgogICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCh0ZW1wbGF0ZVVybCwgdGV4dCk7CiAgICAgIH0KICAgIH0KICB9Owp9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpzZWxlY3QKICogQHJlc3RyaWN0IEUKICoKICogQGRlc2NyaXB0aW9uCiAqIEhUTUwgYFNFTEVDVGAgZWxlbWVudCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLgogKgogKiAjIGBuZ09wdGlvbnNgCiAqCiAqIE9wdGlvbmFsbHkgYG5nT3B0aW9uc2AgYXR0cmlidXRlIGNhbiBiZSB1c2VkIHRvIGR5bmFtaWNhbGx5IGdlbmVyYXRlIGEgbGlzdCBvZiBgPG9wdGlvbj5gCiAqIGVsZW1lbnRzIGZvciBhIGA8c2VsZWN0PmAgZWxlbWVudCB1c2luZyBhbiBhcnJheSBvciBhbiBvYmplY3Qgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGUKICogYG5nT3B0aW9uc2AgZXhwcmVzc2lvbi4KICrLncudCiAqIFdoZW4gYW4gaXRlbSBpbiB0aGUgc2VsZWN0IG1lbnUgaXMgc2VsZWN0LCB0aGUgdmFsdWUgb2YgYXJyYXkgZWxlbWVudCBvciBvYmplY3QgcHJvcGVydHkKICogcmVwcmVzZW50ZWQgYnkgdGhlIHNlbGVjdGVkIG9wdGlvbiB3aWxsIGJlIGJvdW5kIHRvIHRoZSBtb2RlbCBpZGVudGlmaWVkIGJ5IHRoZSBgbmdNb2RlbGAKICogZGlyZWN0aXZlIG9mIHRoZSBwYXJlbnQgc2VsZWN0IGVsZW1lbnQuCiAqCiAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW4KICogYmUgbmVzdGVkIGludG8gdGhlIGA8c2VsZWN0PmAgZWxlbWVudC4gVGhpcyBlbGVtZW50IHdpbGwgdGhlbiByZXByZXNlbnQgYG51bGxgIG9yICJub3Qgc2VsZWN0ZWQiCiAqIG9wdGlvbi4gU2VlIGV4YW1wbGUgYmVsb3cgZm9yIGRlbW9uc3RyYXRpb24uCiAqCiAqIE5vdGU6IGBuZ09wdGlvbnNgIHByb3ZpZGVzIGl0ZXJhdG9yIGZhY2lsaXR5IGZvciBgPG9wdGlvbj5gIGVsZW1lbnQgd2hpY2ggc2hvdWxkIGJlIHVzZWQgaW5zdGVhZAogKiBvZiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fSB3aGVuIHlvdSB3YW50IHRoZQogKiBgc2VsZWN0YCBtb2RlbCB0byBiZSBib3VuZCB0byBhIG5vbi1zdHJpbmcgdmFsdWUuIFRoaXMgaXMgYmVjYXVzZSBhbiBvcHRpb24gZWxlbWVudCBjYW4gY3VycmVudGx5CiAqIGJlIGJvdW5kIHRvIHN0cmluZyB2YWx1ZXMgb25seS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgYXNzaWduYWJsZSBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBUaGUgY29udHJvbCBpcyBjb25zaWRlcmVkIHZhbGlkIG9ubHkgaWYgdmFsdWUgaXMgZW50ZXJlZC4KICogQHBhcmFtIHtjb21wcmVoZW5zaW9uX2V4cHJlc3Npb249fSBuZ09wdGlvbnMgaW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybXM6CiAqCiAqICAgKiBmb3IgYXJyYXkgZGF0YSBzb3VyY2VzOgogKiAgICAgKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAKICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgCiAqICAgICAqIGBsYWJlbGAgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YAogKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YAogKiAgICogZm9yIG9iamVjdCBkYXRhIHNvdXJjZXM6CiAqICAgICAqIGBsYWJlbGAgKipgZm9yIChgKipga2V5YCAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgCiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yIChgKipga2V5YCAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgCiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YAogKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAKICogICAgICAgICAqKmBmb3JgIGAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgCiAqCiAqIFdoZXJlOgogKgogKiAgICogYGFycmF5YCAvIGBvYmplY3RgOiBhbiBleHByZXNzaW9uIHdoaWNoIGV2YWx1YXRlcyB0byBhbiBhcnJheSAvIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuCiAqICAgKiBgdmFsdWVgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGVhY2ggaXRlbSBpbiB0aGUgYGFycmF5YCBvciBlYWNoIHByb3BlcnR5IHZhbHVlCiAqICAgICAgb2YgYG9iamVjdGAgZHVyaW5nIGl0ZXJhdGlvbi4KICogICAqIGBrZXlgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGEgcHJvcGVydHkgbmFtZSBpbiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLgogKiAgICogYGxhYmVsYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB0aGUgbGFiZWwgZm9yIGA8b3B0aW9uPmAgZWxlbWVudC4gVGhlCiAqICAgICBgZXhwcmVzc2lvbmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGUgYHZhbHVlYCB2YXJpYWJsZSAoZS5nLiBgdmFsdWUucHJvcGVydHlOYW1lYCkuCiAqICAgKiBgc2VsZWN0YDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgb2YgdGhlIHBhcmVudCBgPHNlbGVjdD5gCiAqICAgICAgZWxlbWVudC4gSWYgbm90IHNwZWNpZmllZCwgYHNlbGVjdGAgZXhwcmVzc2lvbiB3aWxsIGRlZmF1bHQgdG8gYHZhbHVlYC4KICogICAqIGBncm91cGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdXNlZCB0byBncm91cCBvcHRpb25zIHVzaW5nIHRoZSBgPG9wdGdyb3VwPmAKICogICAgICBET00gZWxlbWVudC4KICoKICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgPHNjcmlwdD4KICAgICAgICBmdW5jdGlvbiBNeUNudHJsKCRzY29wZSkgewogICAgICAgICAgJHNjb3BlLmNvbG9ycyA9IFsKICAgICAgICAgICAge25hbWU6J2JsYWNrJywgc2hhZGU6J2RhcmsnfSwKICAgICAgICAgICAge25hbWU6J3doaXRlJywgc2hhZGU6J2xpZ2h0J30sCiAgICAgICAgICAgIHtuYW1lOidyZWQnLCBzaGFkZTonZGFyayd9LAogICAgICAgICAgICB7bmFtZTonYmx1ZScsIHNoYWRlOidkYXJrJ30sCiAgICAgICAgICAgIHtuYW1lOid5ZWxsb3cnLCBzaGFkZTonbGlnaHQnfQogICAgICAgICAgXTsKICAgICAgICAgICRzY29wZS5jb2xvciA9ICRzY29wZS5jb2xvcnNbMl07IC8vIHJlZAogICAgICAgIH0KICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9Ik15Q250cmwiPgogICAgICAgICAgPHVsPgogICAgICAgICAgICA8bGkgbmctcmVwZWF0PSJjb2xvciBpbiBjb2xvcnMiPgogICAgICAgICAgICAgIE5hbWU6IDxpbnB1dCBuZy1tb2RlbD0iY29sb3IubmFtZSI+CiAgICAgICAgICAgICAgWzxhIGhyZWYgbmctY2xpY2s9ImNvbG9ycy5zcGxpY2UoJGluZGV4LCAxKSI+WDwvYT5dCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICBbPGEgaHJlZiBuZy1jbGljaz0iY29sb3JzLnB1c2goe30pIj5hZGQ8L2E+XQogICAgICAgICAgICA8L2xpPgogICAgICAgICAgPC91bD4KICAgICAgICAgIDxoci8+CiAgICAgICAgICBDb2xvciAobnVsbCBub3QgYWxsb3dlZCk6CiAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJjb2xvciIgbmctb3B0aW9ucz0iYy5uYW1lIGZvciBjIGluIGNvbG9ycyI+PC9zZWxlY3Q+PGJyPgoKICAgICAgICAgIENvbG9yIChudWxsIGFsbG93ZWQpOgogICAgICAgICAgPHNwYW4gIGNsYXNzPSJudWxsYWJsZSI+CiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9ImNvbG9yIiBuZy1vcHRpb25zPSJjLm5hbWUgZm9yIGMgaW4gY29sb3JzIj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPi0tIGNob3NlIGNvbG9yIC0tPC9vcHRpb24+CiAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgPC9zcGFuPjxici8+CgogICAgICAgICAgQ29sb3IgZ3JvdXBlZCBieSBzaGFkZToKICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9ImNvbG9yIiBuZy1vcHRpb25zPSJjLm5hbWUgZ3JvdXAgYnkgYy5zaGFkZSBmb3IgYyBpbiBjb2xvcnMiPgogICAgICAgICAgPC9zZWxlY3Q+PGJyLz4KCgogICAgICAgICAgU2VsZWN0IDxhIGhyZWYgbmctY2xpY2s9ImNvbG9yPXtuYW1lOidub3QgaW4gbGlzdCd9Ij5ib2d1czwvYT4uPGJyPgogICAgICAgICAgPGhyLz4KICAgICAgICAgIEN1cnJlbnRseSBzZWxlY3RlZDoge3sge3NlbGVjdGVkX2NvbG9yOmNvbG9yfSAgfX0KICAgICAgICAgIDxkaXYgc3R5bGU9ImJvcmRlcjpzb2xpZCAxcHggYmxhY2s7IGhlaWdodDoyMHB4IgogICAgICAgICAgICAgICBuZy1zdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzpjb2xvci5uYW1lfSI+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kb2M6c291cmNlPgogICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLW9wdGlvbnMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICBleHBlY3QoYmluZGluZygne3NlbGVjdGVkX2NvbG9yOmNvbG9yfScpKS50b01hdGNoKCdyZWQnKTsKICAgICAgICAgICBzZWxlY3QoJ2NvbG9yJykub3B0aW9uKCcwJyk7CiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpjb2xvcn0nKSkudG9NYXRjaCgnYmxhY2snKTsKICAgICAgICAgICB1c2luZygnLm51bGxhYmxlJykuc2VsZWN0KCdjb2xvcicpLm9wdGlvbignJyk7CiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpjb2xvcn0nKSkudG9NYXRjaCgnbnVsbCcpOwogICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKi8KCnZhciBuZ09wdGlvbnNEaXJlY3RpdmUgPSB2YWx1ZUZuKHsgdGVybWluYWw6IHRydWUgfSk7CnZhciBzZWxlY3REaXJlY3RpdmUgPSBbJyRjb21waWxlJywgJyRwYXJzZScsIGZ1bmN0aW9uKCRjb21waWxlLCAgICRwYXJzZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgLy8wMDAwMTExMTEwMDAwMDAwMDAwMDIyMjIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzMzMzAwMDAwMDAwMDAwMDA0NDQ0NDQ0NDQ0NDQ0NDQ0NDAwMDAwMDAwMDU1NTU1NTU1NTU1NTU1NTU1MDAwMDAwMDY2NjY2NjY2NjY2NjY2NjY2MDAwMDAwMDAwMDAwMDAwNzc3NwogIHZhciBOR19PUFRJT05TX1JFR0VYUCA9IC9eXHMqKC4qPykoPzpccythc1xzKyguKj8pKT8oPzpccytncm91cFxzK2J5XHMrKC4qKSk/XHMrZm9yXHMrKD86KFtcJFx3XVtcJFx3XGRdKil8KD86XChccyooW1wkXHddW1wkXHdcZF0qKVxzKixccyooW1wkXHddW1wkXHdcZF0qKVxzKlwpKSlccytpblxzKyguKikkLywKICAgICAgbnVsbE1vZGVsQ3RybCA9IHskc2V0Vmlld1ZhbHVlOiBub29wfTsKCiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRScsCiAgICByZXF1aXJlOiBbJ3NlbGVjdCcsICc/bmdNb2RlbCddLAogICAgY29udHJvbGxlcjogWyckZWxlbWVudCcsICckc2NvcGUnLCAnJGF0dHJzJywgZnVuY3Rpb24oJGVsZW1lbnQsICRzY29wZSwgJGF0dHJzKSB7CiAgICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICAgIG9wdGlvbnNNYXAgPSB7fSwKICAgICAgICAgIG5nTW9kZWxDdHJsID0gbnVsbE1vZGVsQ3RybCwKICAgICAgICAgIG51bGxPcHRpb24sCiAgICAgICAgICB1bmtub3duT3B0aW9uOwoKCiAgICAgIHNlbGYuZGF0YWJvdW5kID0gJGF0dHJzLm5nTW9kZWw7CgoKICAgICAgc2VsZi5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmxfLCBudWxsT3B0aW9uXywgdW5rbm93bk9wdGlvbl8pIHsKICAgICAgICBuZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsXzsKICAgICAgICBudWxsT3B0aW9uID0gbnVsbE9wdGlvbl87CiAgICAgICAgdW5rbm93bk9wdGlvbiA9IHVua25vd25PcHRpb25fOwogICAgICB9CgoKICAgICAgc2VsZi5hZGRPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIG9wdGlvbnNNYXBbdmFsdWVdID0gdHJ1ZTsKCiAgICAgICAgaWYgKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPT0gdmFsdWUpIHsKICAgICAgICAgICRlbGVtZW50LnZhbCh2YWx1ZSk7CiAgICAgICAgICBpZiAodW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgdW5rbm93bk9wdGlvbi5yZW1vdmUoKTsKICAgICAgICB9CiAgICAgIH07CgoKICAgICAgc2VsZi5yZW1vdmVPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIGlmICh0aGlzLmhhc09wdGlvbih2YWx1ZSkpIHsKICAgICAgICAgIGRlbGV0ZSBvcHRpb25zTWFwW3ZhbHVlXTsKICAgICAgICAgIGlmIChuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID09IHZhbHVlKSB7CiAgICAgICAgICAgIHRoaXMucmVuZGVyVW5rbm93bk9wdGlvbih2YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwoKCiAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKHZhbCkgewogICAgICAgIHZhciB1bmtub3duVmFsID0gJz8gJyArIGhhc2hLZXkodmFsKSArICcgPyc7CiAgICAgICAgdW5rbm93bk9wdGlvbi52YWwodW5rbm93blZhbCk7CiAgICAgICAgJGVsZW1lbnQucHJlcGVuZCh1bmtub3duT3B0aW9uKTsKICAgICAgICAkZWxlbWVudC52YWwodW5rbm93blZhbCk7CiAgICAgICAgdW5rbm93bk9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAvLyBuZWVkZWQgZm9yIElFCiAgICAgIH0KCgogICAgICBzZWxmLmhhc09wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIG9wdGlvbnNNYXAuaGFzT3duUHJvcGVydHkodmFsdWUpOwogICAgICB9CgogICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgIC8vIGRpc2FibGUgdW5rbm93biBvcHRpb24gc28gdGhhdCB3ZSBkb24ndCBkbyB3b3JrIHdoZW4gdGhlIHdob2xlIHNlbGVjdCBpcyBiZWluZyBkZXN0cm95ZWQKICAgICAgICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBub29wOwogICAgICB9KTsKICAgIH1dLAoKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykgewogICAgICAvLyBpZiBuZ01vZGVsIGlzIG5vdCBkZWZpbmVkLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nCiAgICAgIGlmICghY3RybHNbMV0pIHJldHVybjsKCiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF0sCiAgICAgICAgICBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdLAogICAgICAgICAgbXVsdGlwbGUgPSBhdHRyLm11bHRpcGxlLAogICAgICAgICAgb3B0aW9uc0V4cCA9IGF0dHIubmdPcHRpb25zLAogICAgICAgICAgbnVsbE9wdGlvbiA9IGZhbHNlLCAvLyBpZiBmYWxzZSwgdXNlciB3aWxsIG5vdCBiZSBhYmxlIHRvIHNlbGVjdCBpdCAodXNlZCBieSBuZ09wdGlvbnMpCiAgICAgICAgICBlbXB0eU9wdGlvbiwKICAgICAgICAgIC8vIHdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoCiAgICAgICAgICAvLyB0byBjcmVhdGUgaXQgaW4gPHNlbGVjdD4gYW5kIElFIGJhcmZzIG90aGVyd2lzZS4KICAgICAgICAgIG9wdGlvblRlbXBsYXRlID0ganFMaXRlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpKSwKICAgICAgICAgIG9wdEdyb3VwVGVtcGxhdGUgPWpxTGl0ZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRncm91cCcpKSwKICAgICAgICAgIHVua25vd25PcHRpb24gPSBvcHRpb25UZW1wbGF0ZS5jbG9uZSgpOwoKICAgICAgLy8gZmluZCAibnVsbCIgb3B0aW9uCiAgICAgIGZvcih2YXIgaSA9IDAsIGNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbigpLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBpZiAoY2hpbGRyZW5baV0udmFsdWUgPT0gJycpIHsKICAgICAgICAgIGVtcHR5T3B0aW9uID0gbnVsbE9wdGlvbiA9IGNoaWxkcmVuLmVxKGkpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICBzZWxlY3RDdHJsLmluaXQobmdNb2RlbEN0cmwsIG51bGxPcHRpb24sIHVua25vd25PcHRpb24pOwoKICAgICAgLy8gcmVxdWlyZWQgdmFsaWRhdG9yCiAgICAgIGlmIChtdWx0aXBsZSAmJiAoYXR0ci5yZXF1aXJlZCB8fCBhdHRyLm5nUmVxdWlyZWQpKSB7CiAgICAgICAgdmFyIHJlcXVpcmVkVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgncmVxdWlyZWQnLCAhYXR0ci5yZXF1aXJlZCB8fCAodmFsdWUgJiYgdmFsdWUubGVuZ3RoKSk7CiAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgfTsKCiAgICAgICAgbmdNb2RlbEN0cmwuJHBhcnNlcnMucHVzaChyZXF1aXJlZFZhbGlkYXRvcik7CiAgICAgICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMudW5zaGlmdChyZXF1aXJlZFZhbGlkYXRvcik7CgogICAgICAgIGF0dHIuJG9ic2VydmUoJ3JlcXVpcmVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXF1aXJlZFZhbGlkYXRvcihuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgaWYgKG9wdGlvbnNFeHApIE9wdGlvbnMoc2NvcGUsIGVsZW1lbnQsIG5nTW9kZWxDdHJsKTsKICAgICAgZWxzZSBpZiAobXVsdGlwbGUpIE11bHRpcGxlKHNjb3BlLCBlbGVtZW50LCBuZ01vZGVsQ3RybCk7CiAgICAgIGVsc2UgU2luZ2xlKHNjb3BlLCBlbGVtZW50LCBuZ01vZGVsQ3RybCwgc2VsZWN0Q3RybCk7CgoKICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKCgogICAgICBmdW5jdGlvbiBTaW5nbGUoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIG5nTW9kZWxDdHJsLCBzZWxlY3RDdHJsKSB7CiAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIHZpZXdWYWx1ZSA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7CgogICAgICAgICAgaWYgKHNlbGVjdEN0cmwuaGFzT3B0aW9uKHZpZXdWYWx1ZSkpIHsKICAgICAgICAgICAgaWYgKHVua25vd25PcHRpb24ucGFyZW50KCkpIHVua25vd25PcHRpb24ucmVtb3ZlKCk7CiAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQudmFsKHZpZXdWYWx1ZSk7CiAgICAgICAgICAgIGlmICh2aWV3VmFsdWUgPT09ICcnKSBlbXB0eU9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAvLyB0byBtYWtlIElFOSBoYXBweQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZpZXdWYWx1ZSkgJiYgZW1wdHlPcHRpb24pIHsKICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LnZhbCgnJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW5kZXJVbmtub3duT3B0aW9uKHZpZXdWYWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBzZWxlY3RFbGVtZW50LmJpbmQoJ2NoYW5nZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAodW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgdW5rbm93bk9wdGlvbi5yZW1vdmUoKTsKICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShzZWxlY3RFbGVtZW50LnZhbCgpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBmdW5jdGlvbiBNdWx0aXBsZShzY29wZSwgc2VsZWN0RWxlbWVudCwgY3RybCkgewogICAgICAgIHZhciBsYXN0VmlldzsKICAgICAgICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBpdGVtcyA9IG5ldyBIYXNoTWFwKGN0cmwuJHZpZXdWYWx1ZSk7CiAgICAgICAgICBmb3JFYWNoKHNlbGVjdEVsZW1lbnQuY2hpbGRyZW4oKSwgZnVuY3Rpb24ob3B0aW9uKSB7CiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGlzRGVmaW5lZChpdGVtcy5nZXQob3B0aW9uLnZhbHVlKSk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICAvLyB3ZSBoYXZlIHRvIGRvIGl0IG9uIGVhY2ggd2F0Y2ggc2luY2UgbmdNb2RlbCB3YXRjaGVzIHJlZmVyZW5jZSwgYnV0CiAgICAgICAgLy8gd2UgbmVlZCB0byB3b3JrIG9mIGFuIGFycmF5LCBzbyB3ZSBuZWVkIHRvIHNlZSBpZiBhbnl0aGluZyB3YXMgaW5zZXJ0ZWQvcmVtb3ZlZAogICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHsKICAgICAgICAgIGlmICghZXF1YWxzKGxhc3RWaWV3LCBjdHJsLiR2aWV3VmFsdWUpKSB7CiAgICAgICAgICAgIGxhc3RWaWV3ID0gY29weShjdHJsLiR2aWV3VmFsdWUpOwogICAgICAgICAgICBjdHJsLiRyZW5kZXIoKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgc2VsZWN0RWxlbWVudC5iaW5kKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGFycmF5ID0gW107CiAgICAgICAgICAgIGZvckVhY2goc2VsZWN0RWxlbWVudC5jaGlsZHJlbigpLCBmdW5jdGlvbihvcHRpb24pIHsKICAgICAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7CiAgICAgICAgICAgICAgICBhcnJheS5wdXNoKG9wdGlvbi52YWx1ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGFycmF5KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBmdW5jdGlvbiBPcHRpb25zKHNjb3BlLCBzZWxlY3RFbGVtZW50LCBjdHJsKSB7CiAgICAgICAgdmFyIG1hdGNoOwoKICAgICAgICBpZiAoISAobWF0Y2ggPSBvcHRpb25zRXhwLm1hdGNoKE5HX09QVElPTlNfUkVHRVhQKSkpIHsKICAgICAgICAgIHRocm93IEVycm9yKAogICAgICAgICAgICAiRXhwZWN0ZWQgbmdPcHRpb25zIGluIGZvcm0gb2YgJ19zZWxlY3RfIChhcyBfbGFiZWxfKT8gZm9yIChfa2V5XywpP192YWx1ZV8gaW4gX2NvbGxlY3Rpb25fJyIgKwogICAgICAgICAgICAiIGJ1dCBnb3QgJyIgKyBvcHRpb25zRXhwICsgIicuIik7CiAgICAgICAgfQoKICAgICAgICB2YXIgZGlzcGxheUZuID0gJHBhcnNlKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSwKICAgICAgICAgICAgdmFsdWVOYW1lID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNl0sCiAgICAgICAgICAgIGtleU5hbWUgPSBtYXRjaFs1XSwKICAgICAgICAgICAgZ3JvdXBCeUZuID0gJHBhcnNlKG1hdGNoWzNdIHx8ICcnKSwKICAgICAgICAgICAgdmFsdWVGbiA9ICRwYXJzZShtYXRjaFsyXSA/IG1hdGNoWzFdIDogdmFsdWVOYW1lKSwKICAgICAgICAgICAgdmFsdWVzRm4gPSAkcGFyc2UobWF0Y2hbN10pLAogICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFycmF5IG9mIGFycmF5IG9mIGV4aXN0aW5nIG9wdGlvbiBncm91cHMgaW4gRE9NLiBXZSB0cnkgdG8gcmV1c2UgdGhlc2UgaWYgcG9zc2libGUKICAgICAgICAgICAgLy8gb3B0aW9uR3JvdXBzQ2FjaGVbMF0gaXMgdGhlIG9wdGlvbnMgd2l0aCBubyBvcHRpb24gZ3JvdXAKICAgICAgICAgICAgLy8gb3B0aW9uR3JvdXBzQ2FjaGVbP11bMF0gaXMgdGhlIHBhcmVudDogZWl0aGVyIHRoZSBTRUxFQ1Qgb3IgT1BUR1JPVVAgZWxlbWVudAogICAgICAgICAgICBvcHRpb25Hcm91cHNDYWNoZSA9IFtbe2VsZW1lbnQ6IHNlbGVjdEVsZW1lbnQsIGxhYmVsOicnfV1dOwoKICAgICAgICBpZiAobnVsbE9wdGlvbikgewogICAgICAgICAgLy8gY29tcGlsZSB0aGUgZWxlbWVudCBzaW5jZSB0aGVyZSBtaWdodCBiZSBiaW5kaW5ncyBpbiBpdAogICAgICAgICAgJGNvbXBpbGUobnVsbE9wdGlvbikoc2NvcGUpOwoKICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2xhc3MsIHdoaWNoIGlzIGFkZGVkIGF1dG9tYXRpY2FsbHkgYmVjYXVzZSB3ZSByZWNvbXBpbGUgdGhlIGVsZW1lbnQgYW5kIGl0CiAgICAgICAgICAvLyBiZWNvbWVzIHRoZSBjb21waWxhdGlvbiByb290CiAgICAgICAgICBudWxsT3B0aW9uLnJlbW92ZUNsYXNzKCduZy1zY29wZScpOwoKICAgICAgICAgIC8vIHdlIG5lZWQgdG8gcmVtb3ZlIGl0IGJlZm9yZSBjYWxsaW5nIHNlbGVjdEVsZW1lbnQuaHRtbCgnJykgYmVjYXVzZSBvdGhlcndpc2UgSUUgd2lsbAogICAgICAgICAgLy8gcmVtb3ZlIHRoZSBsYWJlbCBmcm9tIHRoZSBlbGVtZW50LiB3dGY/CiAgICAgICAgICBudWxsT3B0aW9uLnJlbW92ZSgpOwogICAgICAgIH0KCiAgICAgICAgLy8gY2xlYXIgY29udGVudHMsIHdlJ2xsIGFkZCB3aGF0J3MgbmVlZGVkIGJhc2VkIG9uIHRoZSBtb2RlbAogICAgICAgIHNlbGVjdEVsZW1lbnQuaHRtbCgnJyk7CgogICAgICAgIHNlbGVjdEVsZW1lbnQuYmluZCgnY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBvcHRpb25Hcm91cCwKICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24gPSB2YWx1ZXNGbihzY29wZSkgfHwgW10sCiAgICAgICAgICAgICAgICBsb2NhbHMgPSB7fSwKICAgICAgICAgICAgICAgIGtleSwgdmFsdWUsIG9wdGlvbkVsZW1lbnQsIGluZGV4LCBncm91cEluZGV4LCBsZW5ndGgsIGdyb3VwTGVuZ3RoOwoKICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7CiAgICAgICAgICAgICAgdmFsdWUgPSBbXTsKICAgICAgICAgICAgICBmb3IgKGdyb3VwSW5kZXggPSAwLCBncm91cExlbmd0aCA9IG9wdGlvbkdyb3Vwc0NhY2hlLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgIGdyb3VwSW5kZXggPCBncm91cExlbmd0aDsKICAgICAgICAgICAgICAgICAgIGdyb3VwSW5kZXgrKykgewogICAgICAgICAgICAgICAgLy8gbGlzdCBvZiBvcHRpb25zIGZvciB0aGF0IGdyb3VwLiAoZmlyc3QgaXRlbSBoYXMgdGhlIHBhcmVudCkKICAgICAgICAgICAgICAgIG9wdGlvbkdyb3VwID0gb3B0aW9uR3JvdXBzQ2FjaGVbZ3JvdXBJbmRleF07CgogICAgICAgICAgICAgICAgZm9yKGluZGV4ID0gMSwgbGVuZ3RoID0gb3B0aW9uR3JvdXAubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgICAgICAgICBpZiAoKG9wdGlvbkVsZW1lbnQgPSBvcHRpb25Hcm91cFtpbmRleF0uZWxlbWVudClbMF0uc2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgICAgICBrZXkgPSBvcHRpb25FbGVtZW50LnZhbCgpOwogICAgICAgICAgICAgICAgICAgIGlmIChrZXlOYW1lKSBsb2NhbHNba2V5TmFtZV0gPSBrZXk7CiAgICAgICAgICAgICAgICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSBjb2xsZWN0aW9uW2tleV07CiAgICAgICAgICAgICAgICAgICAgdmFsdWUucHVzaCh2YWx1ZUZuKHNjb3BlLCBsb2NhbHMpKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBrZXkgPSBzZWxlY3RFbGVtZW50LnZhbCgpOwogICAgICAgICAgICAgIGlmIChrZXkgPT0gJz8nKSB7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSAnJyl7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gY29sbGVjdGlvbltrZXldOwogICAgICAgICAgICAgICAgaWYgKGtleU5hbWUpIGxvY2Fsc1trZXlOYW1lXSA9IGtleTsKICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVGbihzY29wZSwgbG9jYWxzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgICAgICBjdHJsLiRyZW5kZXIgPSByZW5kZXI7CgogICAgICAgIC8vIFRPRE8odm9qdGEpOiBjYW4ndCB3ZSBvcHRpbWl6ZSB0aGlzID8KICAgICAgICBzY29wZS4kd2F0Y2gocmVuZGVyKTsKCiAgICAgICAgZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICAgICAgdmFyIG9wdGlvbkdyb3VwcyA9IHsnJzpbXX0sIC8vIFRlbXBvcmFyeSBsb2NhdGlvbiBmb3IgdGhlIG9wdGlvbiBncm91cHMgYmVmb3JlIHdlIHJlbmRlciB0aGVtCiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lcyA9IFsnJ10sCiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lLAogICAgICAgICAgICAgIG9wdGlvbkdyb3VwLAogICAgICAgICAgICAgIG9wdGlvbiwKICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCwgZXhpc3RpbmdPcHRpb25zLCBleGlzdGluZ09wdGlvbiwKICAgICAgICAgICAgICBtb2RlbFZhbHVlID0gY3RybC4kbW9kZWxWYWx1ZSwKICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXNGbihzY29wZSkgfHwgW10sCiAgICAgICAgICAgICAga2V5cyA9IGtleU5hbWUgPyBzb3J0ZWRLZXlzKHZhbHVlcykgOiB2YWx1ZXMsCiAgICAgICAgICAgICAgZ3JvdXBMZW5ndGgsIGxlbmd0aCwKICAgICAgICAgICAgICBncm91cEluZGV4LCBpbmRleCwKICAgICAgICAgICAgICBsb2NhbHMgPSB7fSwKICAgICAgICAgICAgICBzZWxlY3RlZCwKICAgICAgICAgICAgICBzZWxlY3RlZFNldCA9IGZhbHNlLCAvLyBub3RoaW5nIGlzIHNlbGVjdGVkIHlldAogICAgICAgICAgICAgIGxhc3RFbGVtZW50LAogICAgICAgICAgICAgIGVsZW1lbnQ7CgogICAgICAgICAgaWYgKG11bHRpcGxlKSB7CiAgICAgICAgICAgIHNlbGVjdGVkU2V0ID0gbmV3IEhhc2hNYXAobW9kZWxWYWx1ZSk7CiAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsVmFsdWUgPT09IG51bGwgfHwgbnVsbE9wdGlvbikgewogICAgICAgICAgICAvLyBpZiB3ZSBhcmUgbm90IG11bHRpc2VsZWN0LCBhbmQgd2UgYXJlIG51bGwgdGhlbiB3ZSBoYXZlIHRvIGFkZCB0aGUgbnVsbE9wdGlvbgogICAgICAgICAgICBvcHRpb25Hcm91cHNbJyddLnB1c2goe3NlbGVjdGVkOm1vZGVsVmFsdWUgPT09IG51bGwsIGlkOicnLCBsYWJlbDonJ30pOwogICAgICAgICAgICBzZWxlY3RlZFNldCA9IHRydWU7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gV2Ugbm93IGJ1aWxkIHVwIHRoZSBsaXN0IG9mIG9wdGlvbnMgd2UgbmVlZCAod2UgbWVyZ2UgbGF0ZXIpCiAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWVzW2tleU5hbWUgPyBsb2NhbHNba2V5TmFtZV09a2V5c1tpbmRleF06aW5kZXhdOwogICAgICAgICAgICAgICBvcHRpb25Hcm91cE5hbWUgPSBncm91cEJ5Rm4oc2NvcGUsIGxvY2FscykgfHwgJyc7CiAgICAgICAgICAgIGlmICghKG9wdGlvbkdyb3VwID0gb3B0aW9uR3JvdXBzW29wdGlvbkdyb3VwTmFtZV0pKSB7CiAgICAgICAgICAgICAgb3B0aW9uR3JvdXAgPSBvcHRpb25Hcm91cHNbb3B0aW9uR3JvdXBOYW1lXSA9IFtdOwogICAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZXMucHVzaChvcHRpb25Hcm91cE5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkgewogICAgICAgICAgICAgIHNlbGVjdGVkID0gc2VsZWN0ZWRTZXQucmVtb3ZlKHZhbHVlRm4oc2NvcGUsIGxvY2FscykpICE9IHVuZGVmaW5lZDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzZWxlY3RlZCA9IG1vZGVsVmFsdWUgPT09IHZhbHVlRm4oc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQgPSBzZWxlY3RlZFNldCB8fCBzZWxlY3RlZDsgLy8gc2VlIGlmIGF0IGxlYXN0IG9uZSBpdGVtIGlzIHNlbGVjdGVkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3B0aW9uR3JvdXAucHVzaCh7CiAgICAgICAgICAgICAgaWQ6IGtleU5hbWUgPyBrZXlzW2luZGV4XSA6IGluZGV4LCAgIC8vIGVpdGhlciB0aGUgaW5kZXggaW50byBhcnJheSBvciBrZXkgZnJvbSBvYmplY3QKICAgICAgICAgICAgICBsYWJlbDogZGlzcGxheUZuKHNjb3BlLCBsb2NhbHMpIHx8ICcnLCAvLyB3aGF0IHdpbGwgYmUgc2VlbiBieSB0aGUgdXNlcgogICAgICAgICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZCAgICAgICAgICAgICAgICAgICAvLyBkZXRlcm1pbmUgaWYgd2Ugc2hvdWxkIGJlIHNlbGVjdGVkCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFtdWx0aXBsZSAmJiAhc2VsZWN0ZWRTZXQpIHsKICAgICAgICAgICAgLy8gbm90aGluZyB3YXMgc2VsZWN0ZWQsIHdlIGhhdmUgdG8gaW5zZXJ0IHRoZSB1bmRlZmluZWQgaXRlbQogICAgICAgICAgICBvcHRpb25Hcm91cHNbJyddLnVuc2hpZnQoe2lkOic/JywgbGFiZWw6JycsIHNlbGVjdGVkOnRydWV9KTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBOb3cgd2UgbmVlZCB0byB1cGRhdGUgdGhlIGxpc3Qgb2YgRE9NIG5vZGVzIHRvIG1hdGNoIHRoZSBvcHRpb25Hcm91cHMgd2UgY29tcHV0ZWQgYWJvdmUKICAgICAgICAgIGZvciAoZ3JvdXBJbmRleCA9IDAsIGdyb3VwTGVuZ3RoID0gb3B0aW9uR3JvdXBOYW1lcy5sZW5ndGg7CiAgICAgICAgICAgICAgIGdyb3VwSW5kZXggPCBncm91cExlbmd0aDsKICAgICAgICAgICAgICAgZ3JvdXBJbmRleCsrKSB7CiAgICAgICAgICAgIC8vIGN1cnJlbnQgb3B0aW9uIGdyb3VwIG5hbWUgb3IgJycgaWYgbm8gZ3JvdXAKICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lID0gb3B0aW9uR3JvdXBOYW1lc1tncm91cEluZGV4XTsKCiAgICAgICAgICAgIC8vIGxpc3Qgb2Ygb3B0aW9ucyBmb3IgdGhhdCBncm91cC4gKGZpcnN0IGl0ZW0gaGFzIHRoZSBwYXJlbnQpCiAgICAgICAgICAgIG9wdGlvbkdyb3VwID0gb3B0aW9uR3JvdXBzW29wdGlvbkdyb3VwTmFtZV07CgogICAgICAgICAgICBpZiAob3B0aW9uR3JvdXBzQ2FjaGUubGVuZ3RoIDw9IGdyb3VwSW5kZXgpIHsKICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGdyb3cgdGhlIG9wdGlvbkdyb3VwcwogICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50ID0gewogICAgICAgICAgICAgICAgZWxlbWVudDogb3B0R3JvdXBUZW1wbGF0ZS5jbG9uZSgpLmF0dHIoJ2xhYmVsJywgb3B0aW9uR3JvdXBOYW1lKSwKICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRpb25Hcm91cC5sYWJlbAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgZXhpc3RpbmdPcHRpb25zID0gW2V4aXN0aW5nUGFyZW50XTsKICAgICAgICAgICAgICBvcHRpb25Hcm91cHNDYWNoZS5wdXNoKGV4aXN0aW5nT3B0aW9ucyk7CiAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5hcHBlbmQoZXhpc3RpbmdQYXJlbnQuZWxlbWVudCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZXhpc3RpbmdPcHRpb25zID0gb3B0aW9uR3JvdXBzQ2FjaGVbZ3JvdXBJbmRleF07CiAgICAgICAgICAgICAgZXhpc3RpbmdQYXJlbnQgPSBleGlzdGluZ09wdGlvbnNbMF07ICAvLyBlaXRoZXIgU0VMRUNUIChubyBncm91cCkgb3IgT1BUR1JPVVAgZWxlbWVudAoKICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIE9QVEdST1VQIGxhYmVsIGlmIG5vdCB0aGUgc2FtZS4KICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdQYXJlbnQubGFiZWwgIT0gb3B0aW9uR3JvdXBOYW1lKSB7CiAgICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudC5lbGVtZW50LmF0dHIoJ2xhYmVsJywgZXhpc3RpbmdQYXJlbnQubGFiZWwgPSBvcHRpb25Hcm91cE5hbWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBudWxsOyAgLy8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZwogICAgICAgICAgICBmb3IoaW5kZXggPSAwLCBsZW5ndGggPSBvcHRpb25Hcm91cC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgb3B0aW9uID0gb3B0aW9uR3JvdXBbaW5kZXhdOwogICAgICAgICAgICAgIGlmICgoZXhpc3RpbmdPcHRpb24gPSBleGlzdGluZ09wdGlvbnNbaW5kZXgrMV0pKSB7CiAgICAgICAgICAgICAgICAvLyByZXVzZSBlbGVtZW50cwogICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBleGlzdGluZ09wdGlvbi5lbGVtZW50OwogICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nT3B0aW9uLmxhYmVsICE9PSBvcHRpb24ubGFiZWwpIHsKICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQudGV4dChleGlzdGluZ09wdGlvbi5sYWJlbCA9IG9wdGlvbi5sYWJlbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdPcHRpb24uaWQgIT09IG9wdGlvbi5pZCkgewogICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC52YWwoZXhpc3RpbmdPcHRpb24uaWQgPSBvcHRpb24uaWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nT3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgIT09IG9wdGlvbi5zZWxlY3RlZCkgewogICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5wcm9wKCdzZWxlY3RlZCcsIChleGlzdGluZ09wdGlvbi5zZWxlY3RlZCA9IG9wdGlvbi5zZWxlY3RlZCkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBncm93IGVsZW1lbnRzCgogICAgICAgICAgICAgICAgLy8gaWYgaXQncyBhIG51bGwgb3B0aW9uCiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmlkID09PSAnJyAmJiBudWxsT3B0aW9uKSB7CiAgICAgICAgICAgICAgICAgIC8vIHB1dCBiYWNrIHRoZSBwcmUtY29tcGlsZWQgZWxlbWVudAogICAgICAgICAgICAgICAgICBlbGVtZW50ID0gbnVsbE9wdGlvbjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIC8vIGpRdWVyeSh2MS40LjIpIEJ1ZzogV2Ugc2hvdWxkIGJlIGFibGUgdG8gY2hhaW4gdGhlIG1ldGhvZCBjYWxscywgYnV0CiAgICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnkgb24gc29tZSBicm93c2VyIHRoZSAudGV4dCgpIHJldHVybnMgYSBzdHJpbmcKICAgICAgICAgICAgICAgICAgLy8gcmF0aGVyIHRoZW4gdGhlIGVsZW1lbnQuCiAgICAgICAgICAgICAgICAgIChlbGVtZW50ID0gb3B0aW9uVGVtcGxhdGUuY2xvbmUoKSkKICAgICAgICAgICAgICAgICAgICAgIC52YWwob3B0aW9uLmlkKQogICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NlbGVjdGVkJywgb3B0aW9uLnNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgICAgLnRleHQob3B0aW9uLmxhYmVsKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMucHVzaChleGlzdGluZ09wdGlvbiA9IHsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRpb24ubGFiZWwsCiAgICAgICAgICAgICAgICAgICAgaWQ6IG9wdGlvbi5pZCwKICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogb3B0aW9uLnNlbGVjdGVkCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChsYXN0RWxlbWVudCkgewogICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5hZnRlcihlbGVtZW50KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50LmVsZW1lbnQuYXBwZW5kKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLyByZW1vdmUgYW55IGV4Y2Vzc2l2ZSBPUFRJT05zIGluIGEgZ3JvdXAKICAgICAgICAgICAgaW5kZXgrKzsgLy8gaW5jcmVtZW50IHNpbmNlIHRoZSBleGlzdGluZ09wdGlvbnNbMF0gaXMgcGFyZW50IGVsZW1lbnQgbm90IE9QVElPTgogICAgICAgICAgICB3aGlsZShleGlzdGluZ09wdGlvbnMubGVuZ3RoID4gaW5kZXgpIHsKICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMucG9wKCkuZWxlbWVudC5yZW1vdmUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLy8gcmVtb3ZlIGFueSBleGNlc3NpdmUgT1BUR1JPVVBzIGZyb20gc2VsZWN0CiAgICAgICAgICB3aGlsZShvcHRpb25Hcm91cHNDYWNoZS5sZW5ndGggPiBncm91cEluZGV4KSB7CiAgICAgICAgICAgIG9wdGlvbkdyb3Vwc0NhY2hlLnBvcCgpWzBdLmVsZW1lbnQucmVtb3ZlKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9XTsKCnZhciBvcHRpb25EaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSkgewogIHZhciBudWxsU2VsZWN0Q3RybCA9IHsKICAgIGFkZE9wdGlvbjogbm9vcCwKICAgIHJlbW92ZU9wdGlvbjogbm9vcAogIH07CgogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0UnLAogICAgcHJpb3JpdHk6IDEwMCwKICAgIHJlcXVpcmU6ICdec2VsZWN0JywKICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHsKICAgICAgaWYgKGlzVW5kZWZpbmVkKGF0dHIudmFsdWUpKSB7CiAgICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC50ZXh0KCksIHRydWUpOwogICAgICAgIGlmICghaW50ZXJwb2xhdGVGbikgewogICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIGVsZW1lbnQudGV4dCgpKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIHNlbGVjdEN0cmwpIHsKICAgICAgICBpZiAoc2VsZWN0Q3RybC5kYXRhYm91bmQpIHsKICAgICAgICAgIC8vIEZvciBzb21lIHJlYXNvbiBPcGVyYSBkZWZhdWx0cyB0byB0cnVlIGFuZCBpZiBub3Qgb3ZlcnJpZGRlbiB0aGlzIG1lc3NlcyB1cCB0aGUgcmVwZWF0ZXIuCiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRoZSB2aWV3IHRvIGRyaXZlIHRoZSBpbml0aWFsaXphdGlvbiBvZiB0aGUgbW9kZWwgYW55d2F5LgogICAgICAgICAgZWxlbWVudC5wcm9wKCdzZWxlY3RlZCcsIGZhbHNlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2VsZWN0Q3RybCA9IG51bGxTZWxlY3RDdHJsOwogICAgICAgIH0KCiAgICAgICAgaWYgKGludGVycG9sYXRlRm4pIHsKICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkgewogICAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgbmV3VmFsKTsKICAgICAgICAgICAgaWYgKG5ld1ZhbCAhPT0gb2xkVmFsKSBzZWxlY3RDdHJsLnJlbW92ZU9wdGlvbihvbGRWYWwpOwogICAgICAgICAgICBzZWxlY3RDdHJsLmFkZE9wdGlvbihuZXdWYWwpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNlbGVjdEN0cmwuYWRkT3B0aW9uKGF0dHIudmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgZWxlbWVudC5iaW5kKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVPcHRpb24oYXR0ci52YWx1ZSk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfQp9XTsKCnZhciBzdHlsZURpcmVjdGl2ZSA9IHZhbHVlRm4oewogIHJlc3RyaWN0OiAnRScsCiAgdGVybWluYWw6IHRydWUKfSk7CgovKioKICogU2V0dXAgZmlsZSBmb3IgdGhlIFNjZW5hcmlvLgogKiBNdXN0IGJlIGZpcnN0IGluIHRoZSBjb21waWxhdGlvbi9ib290c3RyYXAgbGlzdC4KICovCgovLyBQdWJsaWMgbmFtZXNwYWNlCmFuZ3VsYXIuc2NlbmFyaW8gPSBhbmd1bGFyLnNjZW5hcmlvIHx8IHt9OwoKLyoqCiAqIERlZmluZXMgYSBuZXcgb3V0cHV0IGZvcm1hdC4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIG5hbWUgb2YgdGhlIG5ldyBvdXRwdXQgZm9ybWF0CiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gZnVuY3Rpb24oY29udGV4dCwgcnVubmVyKSB0aGF0IGdlbmVyYXRlcyB0aGUgb3V0cHV0CiAqLwphbmd1bGFyLnNjZW5hcmlvLm91dHB1dCA9IGFuZ3VsYXIuc2NlbmFyaW8ub3V0cHV0IHx8IGZ1bmN0aW9uKG5hbWUsIGZuKSB7CiAgYW5ndWxhci5zY2VuYXJpby5vdXRwdXRbbmFtZV0gPSBmbjsKfTsKCi8qKgogKiBEZWZpbmVzIGEgbmV3IERTTCBzdGF0ZW1lbnQuIElmIHlvdXIgZmFjdG9yeSBmdW5jdGlvbiByZXR1cm5zIGEgRnV0dXJlCiAqIGl0J3MgcmV0dXJuZWQsIG90aGVyd2lzZSB0aGUgcmVzdWx0IGlzIGFzc3VtZWQgdG8gYmUgYSBtYXAgb2YgZnVuY3Rpb25zCiAqIGZvciBjaGFpbmluZy4gQ2hhaW5lZCBmdW5jdGlvbnMgYXJlIHN1YmplY3QgdG8gdGhlIHNhbWUgcnVsZXMuCiAqCiAqIE5vdGU6IEFsbCBmdW5jdGlvbnMgb24gdGhlIGNoYWluIGFyZSBib3VuZCB0byB0aGUgY2hhaW4gc2NvcGUgc28gdmFsdWVzCiAqICAgc2V0IG9uICJ0aGlzIiBpbiB5b3VyIHN0YXRlbWVudCBmdW5jdGlvbiBhcmUgYXZhaWxhYmxlIGluIHRoZSBjaGFpbmVkCiAqICAgZnVuY3Rpb25zLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc3RhdGVtZW50CiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gRmFjdG9yeSBmdW5jdGlvbigpLCByZXR1cm4gYSBmdW5jdGlvbiBmb3IKICogIHRoZSBzdGF0ZW1lbnQuCiAqLwphbmd1bGFyLnNjZW5hcmlvLmRzbCA9IGFuZ3VsYXIuc2NlbmFyaW8uZHNsIHx8IGZ1bmN0aW9uKG5hbWUsIGZuKSB7CiAgYW5ndWxhci5zY2VuYXJpby5kc2xbbmFtZV0gPSBmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIGV4ZWN1dGVTdGF0ZW1lbnQoc3RhdGVtZW50LCBhcmdzKSB7CiAgICAgIHZhciByZXN1bHQgPSBzdGF0ZW1lbnQuYXBwbHkodGhpcywgYXJncyk7CiAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24ocmVzdWx0KSB8fCByZXN1bHQgaW5zdGFuY2VvZiBhbmd1bGFyLnNjZW5hcmlvLkZ1dHVyZSkKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHZhciBjaGFpbiA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCByZXN1bHQpOwogICAgICBhbmd1bGFyLmZvckVhY2goY2hhaW4sIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7CiAgICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbih2YWx1ZSkpIHsKICAgICAgICAgIGNoYWluW25hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBleGVjdXRlU3RhdGVtZW50LmNhbGwoc2VsZiwgdmFsdWUsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjaGFpbltuYW1lXSA9IHZhbHVlOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBjaGFpbjsKICAgIH0KICAgIHZhciBzdGF0ZW1lbnQgPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZXhlY3V0ZVN0YXRlbWVudC5jYWxsKHRoaXMsIHN0YXRlbWVudCwgYXJndW1lbnRzKTsKICAgIH07CiAgfTsKfTsKCi8qKgogKiBEZWZpbmVzIGEgbmV3IG1hdGNoZXIgZm9yIHVzZSB3aXRoIHRoZSBleHBlY3RzKCkgc3RhdGVtZW50LiBUaGUgdmFsdWUKICogdGhpcy5hY3R1YWwgKGxpa2UgaW4gSmFzbWluZSkgaXMgYXZhaWxhYmxlIGluIHlvdXIgbWF0Y2hlciB0byBjb21wYXJlCiAqIGFnYWluc3QuIFlvdXIgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGJvb2xlYW4uIFRoZSBmdXR1cmUgaXMgYXV0b21hdGljYWxseQogKiBjcmVhdGVkIGZvciB5b3UuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBtYXRjaGVyCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gVGhlIG1hdGNoaW5nIGZ1bmN0aW9uKGV4cGVjdGVkKS4KICovCmFuZ3VsYXIuc2NlbmFyaW8ubWF0Y2hlciA9IGFuZ3VsYXIuc2NlbmFyaW8ubWF0Y2hlciB8fCBmdW5jdGlvbihuYW1lLCBmbikgewogIGFuZ3VsYXIuc2NlbmFyaW8ubWF0Y2hlcltuYW1lXSA9IGZ1bmN0aW9uKGV4cGVjdGVkKSB7CiAgICB2YXIgcHJlZml4ID0gJ2V4cGVjdCAnICsgdGhpcy5mdXR1cmUubmFtZSArICcgJzsKICAgIGlmICh0aGlzLmludmVyc2UpIHsKICAgICAgcHJlZml4ICs9ICdub3QgJzsKICAgIH0KICAgIHZhciBzZWxmID0gdGhpczsKICAgIHRoaXMuYWRkRnV0dXJlKHByZWZpeCArIG5hbWUgKyAnICcgKyBhbmd1bGFyLnRvSnNvbihleHBlY3RlZCksCiAgICAgIGZ1bmN0aW9uKGRvbmUpIHsKICAgICAgICB2YXIgZXJyb3I7CiAgICAgICAgc2VsZi5hY3R1YWwgPSBzZWxmLmZ1dHVyZS52YWx1ZTsKICAgICAgICBpZiAoKHNlbGYuaW52ZXJzZSAmJiBmbi5jYWxsKHNlbGYsIGV4cGVjdGVkKSkgfHwKICAgICAgICAgICAgKCFzZWxmLmludmVyc2UgJiYgIWZuLmNhbGwoc2VsZiwgZXhwZWN0ZWQpKSkgewogICAgICAgICAgZXJyb3IgPSAnZXhwZWN0ZWQgJyArIGFuZ3VsYXIudG9Kc29uKGV4cGVjdGVkKSArCiAgICAgICAgICAgICcgYnV0IHdhcyAnICsgYW5ndWxhci50b0pzb24oc2VsZi5hY3R1YWwpOwogICAgICAgIH0KICAgICAgICBkb25lKGVycm9yKTsKICAgIH0pOwogIH07Cn07CgovKioKICogSW5pdGlhbGl6ZSB0aGUgc2NlbmFyaW8gcnVubmVyIGFuZCBydW4gIQogKgogKiBBY2Nlc3MgZ2xvYmFsIHdpbmRvdyBhbmQgZG9jdW1lbnQgb2JqZWN0CiAqIEFjY2VzcyAkcnVubmVyIHRocm91Z2ggY2xvc3VyZQogKgogKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBDb25maWcgb3B0aW9ucwogKi8KYW5ndWxhci5zY2VuYXJpby5zZXRVcEFuZFJ1biA9IGZ1bmN0aW9uKGNvbmZpZykgewogIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgdmFyIGJvZHkgPSBfalF1ZXJ5KGRvY3VtZW50LmJvZHkpOwogIHZhciBvdXRwdXQgPSBbXTsKICB2YXIgb2JqTW9kZWwgPSBuZXcgYW5ndWxhci5zY2VuYXJpby5PYmplY3RNb2RlbCgkcnVubmVyKTsKCiAgaWYgKGNvbmZpZyAmJiBjb25maWcuc2NlbmFyaW9fb3V0cHV0KSB7CiAgICBvdXRwdXQgPSBjb25maWcuc2NlbmFyaW9fb3V0cHV0LnNwbGl0KCcsJyk7CiAgfQoKICBhbmd1bGFyLmZvckVhY2goYW5ndWxhci5zY2VuYXJpby5vdXRwdXQsIGZ1bmN0aW9uKGZuLCBuYW1lKSB7CiAgICBpZiAoIW91dHB1dC5sZW5ndGggfHwgaW5kZXhPZihvdXRwdXQsbmFtZSkgIT0gLTEpIHsKICAgICAgdmFyIGNvbnRleHQgPSBib2R5LmFwcGVuZCgnPGRpdj48L2Rpdj4nKS5maW5kKCdkaXY6bGFzdCcpOwogICAgICBjb250ZXh0LmF0dHIoJ2lkJywgbmFtZSk7CiAgICAgIGZuLmNhbGwoe30sIGNvbnRleHQsICRydW5uZXIsIG9iak1vZGVsKTsKICAgIH0KICB9KTsKCiAgaWYgKCEvXmh0dHAvLnRlc3QoaHJlZikgJiYgIS9eaHR0cHMvLnRlc3QoaHJlZikpIHsKICAgIGJvZHkuYXBwZW5kKCc8cCBpZD0ic3lzdGVtLWVycm9yIj48L3A+Jyk7CiAgICBib2R5LmZpbmQoJyNzeXN0ZW0tZXJyb3InKS50ZXh0KAogICAgICAnU2NlbmFyaW8gcnVubmVyIG11c3QgYmUgcnVuIHVzaW5nIGh0dHAgb3IgaHR0cHMuIFRoZSBwcm90b2NvbCAnICsKICAgICAgaHJlZi5zcGxpdCgnOicpWzBdICsgJzovLyBpcyBub3Qgc3VwcG9ydGVkLicKICAgICk7CiAgICByZXR1cm47CiAgfQoKICB2YXIgYXBwRnJhbWUgPSBib2R5LmFwcGVuZCgnPGRpdiBpZD0iYXBwbGljYXRpb24iPjwvZGl2PicpLmZpbmQoJyNhcHBsaWNhdGlvbicpOwogIHZhciBhcHBsaWNhdGlvbiA9IG5ldyBhbmd1bGFyLnNjZW5hcmlvLkFwcGxpY2F0aW9uKGFwcEZyYW1lKTsKCiAgJHJ1bm5lci5vbignUnVubmVyRW5kJywgZnVuY3Rpb24oKSB7CiAgICBhcHBGcmFtZS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpOwogICAgYXBwRnJhbWUuZmluZCgnaWZyYW1lJykuYXR0cignc3JjJywgJ2Fib3V0OmJsYW5rJyk7CiAgfSk7CgogICRydW5uZXIub24oJ1J1bm5lckVycm9yJywgZnVuY3Rpb24oZXJyb3IpIHsKICAgIGlmICh3aW5kb3cuY29uc29sZSkgewogICAgICBjb25zb2xlLmxvZyhmb3JtYXRFeGNlcHRpb24oZXJyb3IpKTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIERvIHNvbWV0aGluZyBmb3IgSUUKICAgICAgYWxlcnQoZXJyb3IpOwogICAgfQogIH0pOwoKICAkcnVubmVyLnJ1bihhcHBsaWNhdGlvbik7Cn07CgovKioKICogSXRlcmF0ZXMgdGhyb3VnaCBsaXN0IHdpdGggaXRlcmF0b3IgZnVuY3Rpb24gdGhhdCBtdXN0IGNhbGwgdGhlCiAqIGNvbnRpbnVlRnVuY3Rpb24gdG8gY29udGludXRlIGl0ZXJhdGluZy4KICoKICogQHBhcmFtIHtBcnJheX0gbGlzdCBsaXN0IHRvIGl0ZXJhdGUgb3ZlcgogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGl0ZXJhdG9yIENhbGxiYWNrIGZ1bmN0aW9uKHZhbHVlLCBjb250aW51ZUZ1bmN0aW9uKQogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGRvbmUgQ2FsbGJhY2sgZnVuY3Rpb24oZXJyb3IsIHJlc3VsdCkgY2FsbGVkIHdoZW4KICogICBpdGVyYXRpb24gZmluaXNoZXMgb3IgYW4gZXJyb3Igb2NjdXJzLgogKi8KZnVuY3Rpb24gYXN5bmNGb3JFYWNoKGxpc3QsIGl0ZXJhdG9yLCBkb25lKSB7CiAgdmFyIGkgPSAwOwogIGZ1bmN0aW9uIGxvb3AoZXJyb3IsIGluZGV4KSB7CiAgICBpZiAoaW5kZXggJiYgaW5kZXggPiBpKSB7CiAgICAgIGkgPSBpbmRleDsKICAgIH0KICAgIGlmIChlcnJvciB8fCBpID49IGxpc3QubGVuZ3RoKSB7CiAgICAgIGRvbmUoZXJyb3IpOwogICAgfSBlbHNlIHsKICAgICAgdHJ5IHsKICAgICAgICBpdGVyYXRvcihsaXN0W2krK10sIGxvb3ApOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgZG9uZShlKTsKICAgICAgfQogICAgfQogIH0KICBsb29wKCk7Cn0KCi8qKgogKiBGb3JtYXRzIGFuIGV4Y2VwdGlvbiBpbnRvIGEgc3RyaW5nIHdpdGggdGhlIHN0YWNrIHRyYWNlLCBidXQgbGltaXRzCiAqIHRvIGEgc3BlY2lmaWMgbGluZSBsZW5ndGguCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBlcnJvciBUaGUgZXhjZXB0aW9uIHRvIGZvcm1hdCwgY2FuIGJlIGFueXRoaW5nIHRocm93YWJsZQogKiBAcGFyYW0ge051bWJlcj19IFttYXhTdGFja0xpbmVzPTVdIG1heCBsaW5lcyBvZiB0aGUgc3RhY2sgdHJhY2UgdG8gaW5jbHVkZQogKiAgZGVmYXVsdCBpcyA1LgogKi8KZnVuY3Rpb24gZm9ybWF0RXhjZXB0aW9uKGVycm9yLCBtYXhTdGFja0xpbmVzKSB7CiAgbWF4U3RhY2tMaW5lcyA9IG1heFN0YWNrTGluZXMgfHwgNTsKICB2YXIgbWVzc2FnZSA9IGVycm9yLnRvU3RyaW5nKCk7CiAgaWYgKGVycm9yLnN0YWNrKSB7CiAgICB2YXIgc3RhY2sgPSBlcnJvci5zdGFjay5zcGxpdCgnXG4nKTsKICAgIGlmIChzdGFja1swXS5pbmRleE9mKG1lc3NhZ2UpID09PSAtMSkgewogICAgICBtYXhTdGFja0xpbmVzKys7CiAgICAgIHN0YWNrLnVuc2hpZnQoZXJyb3IubWVzc2FnZSk7CiAgICB9CiAgICBtZXNzYWdlID0gc3RhY2suc2xpY2UoMCwgbWF4U3RhY2tMaW5lcykuam9pbignXG4nKTsKICB9CiAgcmV0dXJuIG1lc3NhZ2U7Cn0KCi8qKgogKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBmaWxlIG5hbWUgYW5kIGxpbmUgbnVtYmVyIGZyb20gYQogKiBsb2NhdGlvbiBpbiB0aGUgc3RhY2sgaWYgYXZhaWxhYmxlIGJhc2VkIG9uIHRoZSBjYWxsIHNpdGUuCiAqCiAqIE5vdGU6IHRoaXMgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uIGJlY2F1c2UgYWNjZXNzaW5nIC5zdGFjayBpcyB2ZXJ5CiAqIGV4cGVuc2l2ZSBpbiBDaHJvbWUuCiAqCiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIHN0YWNrIGxpbmVzIHRvIHNraXAKICovCmZ1bmN0aW9uIGNhbGxlckZpbGUob2Zmc2V0KSB7CiAgdmFyIGVycm9yID0gbmV3IEVycm9yKCk7CgogIHJldHVybiBmdW5jdGlvbigpIHsKICAgIHZhciBsaW5lID0gKGVycm9yLnN0YWNrIHx8ICcnKS5zcGxpdCgnXG4nKVtvZmZzZXRdOwoKICAgIC8vIENsZWFuIHVwIHRoZSBzdGFjayB0cmFjZSBsaW5lCiAgICBpZiAobGluZSkgewogICAgICBpZiAobGluZS5pbmRleE9mKCdAJykgIT09IC0xKSB7CiAgICAgICAgLy8gRmlyZWZveAogICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZyhsaW5lLmluZGV4T2YoJ0AnKSsxKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBDaHJvbWUKICAgICAgICBsaW5lID0gbGluZS5zdWJzdHJpbmcobGluZS5pbmRleE9mKCcoJykrMSkucmVwbGFjZSgnKScsICcnKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBsaW5lIHx8ICcnOwogIH07Cn0KCi8qKgogKiBUcmlnZ2VycyBhIGJyb3dzZXIgZXZlbnQuIEF0dGVtcHRzIHRvIGNob29zZSB0aGUgcmlnaHQgZXZlbnQgaWYgb25lIGlzCiAqIG5vdCBzcGVjaWZpZWQuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IEVpdGhlciBhIHdyYXBwZWQgalF1ZXJ5L2pxTGl0ZSBub2RlIG9yIGEgRE9NRWxlbWVudAogKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBPcHRpb25hbCBldmVudCB0eXBlLgogKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+PX0ga2V5cyBPcHRpb25hbCBsaXN0IG9mIHByZXNzZWQga2V5cwogKiAgICAgICAgKHZhbGlkIHZhbHVlczogJ2FsdCcsICdtZXRhJywgJ3NoaWZ0JywgJ2N0cmwnKQogKi8KZnVuY3Rpb24gYnJvd3NlclRyaWdnZXIoZWxlbWVudCwgdHlwZSwga2V5cykgewogIGlmIChlbGVtZW50ICYmICFlbGVtZW50Lm5vZGVOYW1lKSBlbGVtZW50ID0gZWxlbWVudFswXTsKICBpZiAoIWVsZW1lbnQpIHJldHVybjsKICBpZiAoIXR5cGUpIHsKICAgIHR5cGUgPSB7CiAgICAgICAgJ3RleHQnOiAgICAgICAgICAgICdjaGFuZ2UnLAogICAgICAgICd0ZXh0YXJlYSc6ICAgICAgICAnY2hhbmdlJywKICAgICAgICAnaGlkZGVuJzogICAgICAgICAgJ2NoYW5nZScsCiAgICAgICAgJ3Bhc3N3b3JkJzogICAgICAgICdjaGFuZ2UnLAogICAgICAgICdidXR0b24nOiAgICAgICAgICAnY2xpY2snLAogICAgICAgICdzdWJtaXQnOiAgICAgICAgICAnY2xpY2snLAogICAgICAgICdyZXNldCc6ICAgICAgICAgICAnY2xpY2snLAogICAgICAgICdpbWFnZSc6ICAgICAgICAgICAnY2xpY2snLAogICAgICAgICdjaGVja2JveCc6ICAgICAgICAnY2xpY2snLAogICAgICAgICdyYWRpbyc6ICAgICAgICAgICAnY2xpY2snLAogICAgICAgICdzZWxlY3Qtb25lJzogICAgICAnY2hhbmdlJywKICAgICAgICAnc2VsZWN0LW11bHRpcGxlJzogJ2NoYW5nZScKICAgIH1bbG93ZXJjYXNlKGVsZW1lbnQudHlwZSldIHx8ICdjbGljayc7CiAgfQogIGlmIChsb3dlcmNhc2Uobm9kZU5hbWVfKGVsZW1lbnQpKSA9PSAnb3B0aW9uJykgewogICAgZWxlbWVudC5wYXJlbnROb2RlLnZhbHVlID0gZWxlbWVudC52YWx1ZTsKICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CiAgICB0eXBlID0gJ2NoYW5nZSc7CiAgfQoKICBrZXlzID0ga2V5cyB8fCBbXTsKICBmdW5jdGlvbiBwcmVzc2VkKGtleSkgewogICAgcmV0dXJuIGluZGV4T2Yoa2V5cywga2V5KSAhPT0gLTE7CiAgfQoKICBpZiAobXNpZSA8IDkpIHsKICAgIHN3aXRjaChlbGVtZW50LnR5cGUpIHsKICAgICAgY2FzZSAncmFkaW8nOgogICAgICBjYXNlICdjaGVja2JveCc6CiAgICAgICAgZWxlbWVudC5jaGVja2VkID0gIWVsZW1lbnQuY2hlY2tlZDsKICAgICAgICBicmVhazsKICAgIH0KICAgIC8vIFdURiEhISBFcnJvcjogVW5zcGVjaWZpZWQgZXJyb3IuCiAgICAvLyBEb24ndCBrbm93IHdoeSwgYnV0IHNvbWUgZWxlbWVudHMgd2hlbiBkZXRhY2hlZCBzZWVtIHRvIGJlIGluIGluY29uc2lzdGVudCBzdGF0ZSBhbmQKICAgIC8vIGNhbGxpbmcgLmZpcmVFdmVudCgpIG9uIHRoZW0gd2lsbCByZXN1bHQgaW4gdmVyeSB1bmhlbHBmdWwgZXJyb3IgKEVycm9yOiBVbnNwZWNpZmllZCBlcnJvcikKICAgIC8vIGZvcmNpbmcgdGhlIGJyb3dzZXIgdG8gY29tcHV0ZSB0aGUgZWxlbWVudCBwb3NpdGlvbiAoYnkgcmVhZGluZyBpdHMgQ1NTKQogICAgLy8gcHV0cyB0aGUgZWxlbWVudCBpbiBjb25zaXN0ZW50IHN0YXRlLgogICAgZWxlbWVudC5zdHlsZS5wb3NMZWZ0OwoKICAgIC8vIFRPRE8odm9qdGEpOiBjcmVhdGUgZXZlbnQgb2JqZWN0cyB3aXRoIHByZXNzZWQga2V5cyB0byBnZXQgaXQgd29ya2luZyBvbiBJRTw5CiAgICB2YXIgcmV0ID0gZWxlbWVudC5maXJlRXZlbnQoJ29uJyArIHR5cGUpOwogICAgaWYgKGxvd2VyY2FzZShlbGVtZW50LnR5cGUpID09ICdzdWJtaXQnKSB7CiAgICAgIHdoaWxlKGVsZW1lbnQpIHsKICAgICAgICBpZiAobG93ZXJjYXNlKGVsZW1lbnQubm9kZU5hbWUpID09ICdmb3JtJykgewogICAgICAgICAgZWxlbWVudC5maXJlRXZlbnQoJ29uc3VibWl0Jyk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHJldDsKICB9IGVsc2UgewogICAgdmFyIGV2bnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudHMnKSwKICAgICAgICBvcmlnaW5hbFByZXZlbnREZWZhdWx0ID0gZXZudC5wcmV2ZW50RGVmYXVsdCwKICAgICAgICBpZnJhbWUgPSBfalF1ZXJ5KCcjYXBwbGljYXRpb24gaWZyYW1lJylbMF0sCiAgICAgICAgYXBwV2luZG93ID0gaWZyYW1lID8gaWZyYW1lLmNvbnRlbnRXaW5kb3cgOiB3aW5kb3csCiAgICAgICAgZmFrZVByb2Nlc3NEZWZhdWx0ID0gdHJ1ZSwKICAgICAgICBmaW5hbFByb2Nlc3NEZWZhdWx0OwoKICAgIC8vIGlnb3I6IHRlbXBvcmFyeSBmaXggZm9yIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4NDIwOAogICAgYXBwV2luZG93LmFuZ3VsYXJbJ2ZmLTY4NDIwOC1wcmV2ZW50RGVmYXVsdCddID0gZmFsc2U7CiAgICBldm50LnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7CiAgICAgIGZha2VQcm9jZXNzRGVmYXVsdCA9IGZhbHNlOwogICAgICByZXR1cm4gb3JpZ2luYWxQcmV2ZW50RGVmYXVsdC5hcHBseShldm50LCBhcmd1bWVudHMpOwogICAgfTsKCiAgICBldm50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMCwgMCwgMCwgMCwgMCwgcHJlc3NlZCgnY3RybCcpLCBwcmVzc2VkKCdhbHQnKSwKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc3NlZCgnc2hpZnQnKSwgcHJlc3NlZCgnbWV0YScpLCAwLCBlbGVtZW50KTsKCiAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZudCk7CiAgICBmaW5hbFByb2Nlc3NEZWZhdWx0ID0gIShhcHBXaW5kb3cuYW5ndWxhclsnZmYtNjg0MjA4LXByZXZlbnREZWZhdWx0J10gfHwgIWZha2VQcm9jZXNzRGVmYXVsdCk7CgogICAgZGVsZXRlIGFwcFdpbmRvdy5hbmd1bGFyWydmZi02ODQyMDgtcHJldmVudERlZmF1bHQnXTsKCiAgICByZXR1cm4gZmluYWxQcm9jZXNzRGVmYXVsdDsKICB9Cn0KCi8qKgogKiBEb24ndCB1c2UgdGhlIGpRdWVyeSB0cmlnZ2VyIG1ldGhvZCBzaW5jZSBpdCB3b3JrcyBpbmNvcnJlY3RseS4KICoKICogalF1ZXJ5IG5vdGlmaWVzIGxpc3RlbmVycyBhbmQgdGhlbiBjaGFuZ2VzIHRoZSBzdGF0ZSBvZiBhIGNoZWNrYm94IGFuZAogKiBkb2VzIG5vdCBjcmVhdGUgYSByZWFsIGJyb3dzZXIgZXZlbnQuIEEgcmVhbCBjbGljayBjaGFuZ2VzIHRoZSBzdGF0ZSBvZgogKiB0aGUgY2hlY2tib3ggYW5kIHRoZW4gbm90aWZpZXMgbGlzdGVuZXJzLgogKgogKiBUbyB3b3JrIGFyb3VuZCB0aGlzIHdlIGluc3RlYWQgdXNlIG91ciBvd24gaGFuZGxlciB0aGF0IGZpcmVzIGEgcmVhbCBldmVudC4KICovCihmdW5jdGlvbihmbil7CiAgdmFyIHBhcmVudFRyaWdnZXIgPSBmbi50cmlnZ2VyOwogIGZuLnRyaWdnZXIgPSBmdW5jdGlvbih0eXBlKSB7CiAgICBpZiAoLyhjbGlja3xjaGFuZ2V8a2V5ZG93bnxibHVyfGlucHV0KS8udGVzdCh0eXBlKSkgewogICAgICB2YXIgcHJvY2Vzc0RlZmF1bHRzID0gW107CiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpbmRleCwgbm9kZSkgewogICAgICAgIHByb2Nlc3NEZWZhdWx0cy5wdXNoKGJyb3dzZXJUcmlnZ2VyKG5vZGUsIHR5cGUpKTsKICAgICAgfSk7CgogICAgICAvLyB0aGlzIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggalF1ZXJ5IC0gd2UgcmV0dXJuIGFuIGFycmF5IG9mIHJldHVybmVkIHZhbHVlcywKICAgICAgLy8gc28gdGhhdCBzY2VuYXJpbyBydW5uZXIga25vdyB3aGV0aGVyIEpTIGNvZGUgaGFzIHByZXZlbnREZWZhdWx0KCkgb2YgdGhlIGV2ZW50IG9yIG5vdC4uLgogICAgICByZXR1cm4gcHJvY2Vzc0RlZmF1bHRzOwogICAgfQogICAgcmV0dXJuIHBhcmVudFRyaWdnZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KShfalF1ZXJ5LmZuKTsKCi8qKgogKiBGaW5kcyBhbGwgYmluZGluZ3Mgd2l0aCB0aGUgc3Vic3RyaW5nIG1hdGNoIG9mIG5hbWUgYW5kIHJldHVybnMgYW4KICogYXJyYXkgb2YgdGhlaXIgdmFsdWVzLgogKgogKiBAcGFyYW0ge3N0cmluZ30gYmluZEV4cCBUaGUgbmFtZSB0byBtYXRjaAogKiBAcmV0dXJuIHtBcnJheS48c3RyaW5nPn0gU3RyaW5nIG9mIGJpbmRpbmcgdmFsdWVzCiAqLwpfalF1ZXJ5LmZuLmJpbmRpbmdzID0gZnVuY3Rpb24od2luZG93SnF1ZXJ5LCBiaW5kRXhwKSB7CiAgdmFyIHJlc3VsdCA9IFtdLCBtYXRjaCwKICAgICAgYmluZFNlbGVjdG9yID0gJy5uZy1iaW5kaW5nOnZpc2libGUnOwogIGlmIChhbmd1bGFyLmlzU3RyaW5nKGJpbmRFeHApKSB7CiAgICBiaW5kRXhwID0gYmluZEV4cC5yZXBsYWNlKC9ccy9nLCAnJyk7CiAgICBtYXRjaCA9IGZ1bmN0aW9uIChhY3R1YWxFeHApIHsKICAgICAgaWYgKGFjdHVhbEV4cCkgewogICAgICAgIGFjdHVhbEV4cCA9IGFjdHVhbEV4cC5yZXBsYWNlKC9ccy9nLCAnJyk7CiAgICAgICAgaWYgKGFjdHVhbEV4cCA9PSBiaW5kRXhwKSByZXR1cm4gdHJ1ZTsKICAgICAgICBpZiAoYWN0dWFsRXhwLmluZGV4T2YoYmluZEV4cCkgPT0gMCkgewogICAgICAgICAgcmV0dXJuIGFjdHVhbEV4cC5jaGFyQXQoYmluZEV4cC5sZW5ndGgpID09ICd8JzsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9IGVsc2UgaWYgKGJpbmRFeHApIHsKICAgIG1hdGNoID0gZnVuY3Rpb24oYWN0dWFsRXhwKSB7CiAgICAgIHJldHVybiBhY3R1YWxFeHAgJiYgYmluZEV4cC5leGVjKGFjdHVhbEV4cCk7CiAgICB9CiAgfSBlbHNlIHsKICAgIG1hdGNoID0gZnVuY3Rpb24oYWN0dWFsRXhwKSB7CiAgICAgIHJldHVybiAhIWFjdHVhbEV4cDsKICAgIH07CiAgfQogIHZhciBzZWxlY3Rpb24gPSB0aGlzLmZpbmQoYmluZFNlbGVjdG9yKTsKICBpZiAodGhpcy5pcyhiaW5kU2VsZWN0b3IpKSB7CiAgICBzZWxlY3Rpb24gPSBzZWxlY3Rpb24uYWRkKHRoaXMpOwogIH0KCiAgZnVuY3Rpb24gcHVzaCh2YWx1ZSkgewogICAgaWYgKHZhbHVlID09IHVuZGVmaW5lZCkgewogICAgICB2YWx1ZSA9ICcnOwogICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHsKICAgICAgdmFsdWUgPSBhbmd1bGFyLnRvSnNvbih2YWx1ZSk7CiAgICB9CiAgICByZXN1bHQucHVzaCgnJyArIHZhbHVlKTsKICB9CgogIHNlbGVjdGlvbi5lYWNoKGZ1bmN0aW9uKCkgewogICAgdmFyIGVsZW1lbnQgPSB3aW5kb3dKcXVlcnkodGhpcyksCiAgICAgICAgYmluZGluZzsKICAgIGlmIChiaW5kaW5nID0gZWxlbWVudC5kYXRhKCckYmluZGluZycpKSB7CiAgICAgIGlmICh0eXBlb2YgYmluZGluZyA9PSAnc3RyaW5nJykgewogICAgICAgIGlmIChtYXRjaChiaW5kaW5nKSkgewogICAgICAgICAgcHVzaChlbGVtZW50LnNjb3BlKCkuJGV2YWwoYmluZGluZykpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoIWFuZ3VsYXIuaXNBcnJheShiaW5kaW5nKSkgewogICAgICAgICAgYmluZGluZyA9IFtiaW5kaW5nXTsKICAgICAgICB9CiAgICAgICAgZm9yKHZhciBmbnMsIGo9MCwgamo9YmluZGluZy5sZW5ndGg7ICBqPGpqOyBqKyspIHsKICAgICAgICAgIGZucyA9IGJpbmRpbmdbal07CiAgICAgICAgICBpZiAoZm5zLnBhcnRzKSB7CiAgICAgICAgICAgIGZucyA9IGZucy5wYXJ0czsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZucyA9IFtmbnNdOwogICAgICAgICAgfQogICAgICAgICAgZm9yICh2YXIgc2NvcGUsIGZuLCBpID0gMCwgaWkgPSBmbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgICBpZihtYXRjaCgoZm4gPSBmbnNbaV0pLmV4cCkpIHsKICAgICAgICAgICAgICBwdXNoKGZuKHNjb3BlID0gc2NvcGUgfHwgZWxlbWVudC5zY29wZSgpKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9KTsKICByZXR1cm4gcmVzdWx0Owp9OwoKLyoqCiAqIFJlcHJlc2VudHMgdGhlIGFwcGxpY2F0aW9uIGN1cnJlbnRseSBiZWluZyB0ZXN0ZWQgYW5kIGFic3RyYWN0cyB1c2FnZQogKiBvZiBpZnJhbWVzIG9yIHNlcGFyYXRlIHdpbmRvd3MuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0IGpRdWVyeSB3cmFwcGVyIGFyb3VuZCBIVE1MIGNvbnRleHQuCiAqLwphbmd1bGFyLnNjZW5hcmlvLkFwcGxpY2F0aW9uID0gZnVuY3Rpb24oY29udGV4dCkgewogIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7CiAgY29udGV4dC5hcHBlbmQoCiAgICAnPGgyPkN1cnJlbnQgVVJMOiA8YSBocmVmPSJhYm91dDpibGFuayI+Tm9uZTwvYT48L2gyPicgKwogICAgJzxkaXYgaWQ9InRlc3QtZnJhbWVzIj48L2Rpdj4nCiAgKTsKfTsKCi8qKgogKiBHZXRzIHRoZSBqUXVlcnkgY29sbGVjdGlvbiBvZiBmcmFtZXMuIERvbid0IHVzZSB0aGlzIGRpcmVjdGx5IGJlY2F1c2UKICogZnJhbWVzIG1heSBnbyBzdGFsZS4KICoKICogQHByaXZhdGUKICogQHJldHVybiB7T2JqZWN0fSBqUXVlcnkgY29sbGVjdGlvbgogKi8KYW5ndWxhci5zY2VuYXJpby5BcHBsaWNhdGlvbi5wcm90b3R5cGUuZ2V0RnJhbWVfID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHRoaXMuY29udGV4dC5maW5kKCcjdGVzdC1mcmFtZXMgaWZyYW1lOmxhc3QnKTsKfTsKCi8qKgogKiBHZXRzIHRoZSB3aW5kb3cgb2YgdGhlIHRlc3QgcnVubmVyIGZyYW1lLiBBbHdheXMgZmF2b3IgZXhlY3V0ZUFjdGlvbigpCiAqIGluc3RlYWQgb2YgdGhpcyBtZXRob2Qgc2luY2UgaXQgcHJldmVudHMgeW91IGZyb20gZ2V0dGluZyBhIHN0YWxlIHdpbmRvdy4KICoKICogQHByaXZhdGUKICogQHJldHVybiB7T2JqZWN0fSB0aGUgd2luZG93IG9mIHRoZSBmcmFtZQogKi8KYW5ndWxhci5zY2VuYXJpby5BcHBsaWNhdGlvbi5wcm90b3R5cGUuZ2V0V2luZG93XyA9IGZ1bmN0aW9uKCkgewogIHZhciBjb250ZW50V2luZG93ID0gdGhpcy5nZXRGcmFtZV8oKS5wcm9wKCdjb250ZW50V2luZG93Jyk7CiAgaWYgKCFjb250ZW50V2luZG93KQogICAgdGhyb3cgJ0ZyYW1lIHdpbmRvdyBpcyBub3QgYWNjZXNzaWJsZS4nOwogIHJldHVybiBjb250ZW50V2luZG93Owp9OwoKLyoqCiAqIENoYW5nZXMgdGhlIGxvY2F0aW9uIG9mIHRoZSBmcmFtZS4KICoKICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMLiBJZiBpdCBiZWdpbnMgd2l0aCBhICMgdGhlbiBvbmx5IHRoZQogKiAgIGhhc2ggb2YgdGhlIHBhZ2UgaXMgY2hhbmdlZC4KICogQHBhcmFtIHtmdW5jdGlvbigpfSBsb2FkRm4gZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50KSBDYWxsZWQgd2hlbiBmcmFtZSBsb2Fkcy4KICogQHBhcmFtIHtmdW5jdGlvbigpfSBlcnJvckZuIGZ1bmN0aW9uKGVycm9yKSBDYWxsZWQgaWYgYW55IGVycm9yIHdoZW4gbG9hZGluZy4KICovCmFuZ3VsYXIuc2NlbmFyaW8uQXBwbGljYXRpb24ucHJvdG90eXBlLm5hdmlnYXRlVG8gPSBmdW5jdGlvbih1cmwsIGxvYWRGbiwgZXJyb3JGbikgewogIHZhciBzZWxmID0gdGhpczsKICB2YXIgZnJhbWUgPSB0aGlzLmdldEZyYW1lXygpOwogIC8vVE9ETyhlc3ByZWhuKTogUmVmYWN0b3IgdG8gdXNlIHJldGhyb3coKQogIGVycm9yRm4gPSBlcnJvckZuIHx8IGZ1bmN0aW9uKGUpIHsgdGhyb3cgZTsgfTsKICBpZiAodXJsID09PSAnYWJvdXQ6YmxhbmsnKSB7CiAgICBlcnJvckZuKCdTYW5kYm94IEVycm9yOiBOYXZpZ2F0aW5nIHRvIGFib3V0OmJsYW5rIGlzIG5vdCBhbGxvd2VkLicpOwogIH0gZWxzZSBpZiAodXJsLmNoYXJBdCgwKSA9PT0gJyMnKSB7CiAgICB1cmwgPSBmcmFtZS5hdHRyKCdzcmMnKS5zcGxpdCgnIycpWzBdICsgdXJsOwogICAgZnJhbWUuYXR0cignc3JjJywgdXJsKTsKICAgIHRoaXMuZXhlY3V0ZUFjdGlvbihsb2FkRm4pOwogIH0gZWxzZSB7CiAgICBmcmFtZS5yZW1vdmUoKTsKICAgIHRoaXMuY29udGV4dC5maW5kKCcjdGVzdC1mcmFtZXMnKS5hcHBlbmQoJzxpZnJhbWU+Jyk7CiAgICBmcmFtZSA9IHRoaXMuZ2V0RnJhbWVfKCk7CiAgICBmcmFtZS5sb2FkKGZ1bmN0aW9uKCkgewogICAgICBmcmFtZS51bmJpbmQoKTsKICAgICAgdHJ5IHsKICAgICAgICBzZWxmLmV4ZWN1dGVBY3Rpb24obG9hZEZuKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGVycm9yRm4oZSk7CiAgICAgIH0KICAgIH0pLmF0dHIoJ3NyYycsIHVybCk7CiAgfQogIHRoaXMuY29udGV4dC5maW5kKCc+IGgyIGEnKS5hdHRyKCdocmVmJywgdXJsKS50ZXh0KHVybCk7Cn07CgovKioKICogRXhlY3V0ZXMgYSBmdW5jdGlvbiBpbiB0aGUgY29udGV4dCBvZiB0aGUgdGVzdGVkIGFwcGxpY2F0aW9uLiBXaWxsIHdhaXQKICogZm9yIGFsbCBwZW5kaW5nIGFuZ3VsYXIgeGhyIHJlcXVlc3RzIGJlZm9yZSBleGVjdXRpbmcuCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gYWN0aW9uIFRoZSBjYWxsYmFjayB0byBleGVjdXRlLiBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQpCiAqICAkZG9jdW1lbnQgaXMgYSBqUXVlcnkgd3JhcHBlZCBkb2N1bWVudC4KICovCmFuZ3VsYXIuc2NlbmFyaW8uQXBwbGljYXRpb24ucHJvdG90eXBlLmV4ZWN1dGVBY3Rpb24gPSBmdW5jdGlvbihhY3Rpb24pIHsKICB2YXIgc2VsZiA9IHRoaXM7CiAgdmFyICR3aW5kb3cgPSB0aGlzLmdldFdpbmRvd18oKTsKICBpZiAoISR3aW5kb3cuZG9jdW1lbnQpIHsKICAgIHRocm93ICdTYW5kYm94IEVycm9yOiBBcHBsaWNhdGlvbiBkb2N1bWVudCBub3QgYWNjZXNzaWJsZS4nOwogIH0KICBpZiAoISR3aW5kb3cuYW5ndWxhcikgewogICAgcmV0dXJuIGFjdGlvbi5jYWxsKHRoaXMsICR3aW5kb3csIF9qUXVlcnkoJHdpbmRvdy5kb2N1bWVudCkpOwogIH0KICBhbmd1bGFySW5pdCgkd2luZG93LmRvY3VtZW50LCBmdW5jdGlvbihlbGVtZW50KSB7CiAgICB2YXIgJGluamVjdG9yID0gJHdpbmRvdy5hbmd1bGFyLmVsZW1lbnQoZWxlbWVudCkuaW5qZWN0b3IoKTsKICAgIHZhciAkZWxlbWVudCA9IF9qUXVlcnkoZWxlbWVudCk7CgogICAgJGVsZW1lbnQuaW5qZWN0b3IgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuICRpbmplY3RvcjsKICAgIH07CgogICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkYnJvd3Nlcil7CiAgICAgICRicm93c2VyLm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHMoZnVuY3Rpb24oKSB7CiAgICAgICAgYWN0aW9uLmNhbGwoc2VsZiwgJHdpbmRvdywgJGVsZW1lbnQpOwogICAgICB9KTsKICAgIH0pOwogIH0pOwp9OwoKLyoqCiAqIFRoZSByZXByZXNlbnRhdGlvbiBvZiBkZWZpbmUgYmxvY2tzLiBEb24ndCB1c2VkIGRpcmVjdGx5LCBpbnN0ZWFkIHVzZQogKiBkZWZpbmUoKSBpbiB5b3VyIHRlc3RzLgogKgogKiBAcGFyYW0ge3N0cmluZ30gZGVzY05hbWUgTmFtZSBvZiB0aGUgYmxvY2sKICogQHBhcmFtIHtPYmplY3R9IHBhcmVudCBkZXNjcmliZSBvciB1bmRlZmluZWQgaWYgdGhlIHJvb3QuCiAqLwphbmd1bGFyLnNjZW5hcmlvLkRlc2NyaWJlID0gZnVuY3Rpb24oZGVzY05hbWUsIHBhcmVudCkgewogIHRoaXMub25seSA9IHBhcmVudCAmJiBwYXJlbnQub25seTsKICB0aGlzLmJlZm9yZUVhY2hGbnMgPSBbXTsKICB0aGlzLmFmdGVyRWFjaEZucyA9IFtdOwogIHRoaXMuaXRzID0gW107CiAgdGhpcy5jaGlsZHJlbiA9IFtdOwogIHRoaXMubmFtZSA9IGRlc2NOYW1lOwogIHRoaXMucGFyZW50ID0gcGFyZW50OwogIHRoaXMuaWQgPSBhbmd1bGFyLnNjZW5hcmlvLkRlc2NyaWJlLmlkKys7CgogIC8qKgogICAqIENhbGxzIGFsbCBiZWZvcmUgZnVuY3Rpb25zLgogICAqLwogIHZhciBiZWZvcmVFYWNoRm5zID0gdGhpcy5iZWZvcmVFYWNoRm5zOwogIHRoaXMuc2V0dXBCZWZvcmUgPSBmdW5jdGlvbigpIHsKICAgIGlmIChwYXJlbnQpIHBhcmVudC5zZXR1cEJlZm9yZS5jYWxsKHRoaXMpOwogICAgYW5ndWxhci5mb3JFYWNoKGJlZm9yZUVhY2hGbnMsIGZ1bmN0aW9uKGZuKSB7IGZuLmNhbGwodGhpcyk7IH0sIHRoaXMpOwogIH07CgogIC8qKgogICAqIENhbGxzIGFsbCBhZnRlciBmdW5jdGlvbnMuCiAgICovCiAgdmFyIGFmdGVyRWFjaEZucyA9IHRoaXMuYWZ0ZXJFYWNoRm5zOwogIHRoaXMuc2V0dXBBZnRlciAgPSBmdW5jdGlvbigpIHsKICAgIGFuZ3VsYXIuZm9yRWFjaChhZnRlckVhY2hGbnMsIGZ1bmN0aW9uKGZuKSB7IGZuLmNhbGwodGhpcyk7IH0sIHRoaXMpOwogICAgaWYgKHBhcmVudCkgcGFyZW50LnNldHVwQWZ0ZXIuY2FsbCh0aGlzKTsKICB9Owp9OwoKLy8gU2hhcmVkIFVuaXF1ZSBJRCBnZW5lcmF0b3IgZm9yIGV2ZXJ5IGRlc2NyaWJlIGJsb2NrCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUuaWQgPSAwOwoKLy8gU2hhcmVkIFVuaXF1ZSBJRCBnZW5lcmF0b3IgZm9yIGV2ZXJ5IGl0IChzcGVjKQphbmd1bGFyLnNjZW5hcmlvLkRlc2NyaWJlLnNwZWNJZCA9IDA7CgovKioKICogRGVmaW5lcyBhIGJsb2NrIHRvIGV4ZWN1dGUgYmVmb3JlIGVhY2ggaXQgb3IgbmVzdGVkIGRlc2NyaWJlLgogKgogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGJvZHkgQm9keSBvZiB0aGUgYmxvY2suCiAqLwphbmd1bGFyLnNjZW5hcmlvLkRlc2NyaWJlLnByb3RvdHlwZS5iZWZvcmVFYWNoID0gZnVuY3Rpb24oYm9keSkgewogIHRoaXMuYmVmb3JlRWFjaEZucy5wdXNoKGJvZHkpOwp9OwoKLyoqCiAqIERlZmluZXMgYSBibG9jayB0byBleGVjdXRlIGFmdGVyIGVhY2ggaXQgb3IgbmVzdGVkIGRlc2NyaWJlLgogKgogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGJvZHkgQm9keSBvZiB0aGUgYmxvY2suCiAqLwphbmd1bGFyLnNjZW5hcmlvLkRlc2NyaWJlLnByb3RvdHlwZS5hZnRlckVhY2ggPSBmdW5jdGlvbihib2R5KSB7CiAgdGhpcy5hZnRlckVhY2hGbnMucHVzaChib2R5KTsKfTsKCi8qKgogKiBDcmVhdGVzIGEgbmV3IGRlc2NyaWJlIGJsb2NrIHRoYXQncyBhIGNoaWxkIG9mIHRoaXMgb25lLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBibG9jay4gQXBwZW5kZWQgdG8gdGhlIHBhcmVudCBibG9jaydzIG5hbWUuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gYm9keSBCb2R5IG9mIHRoZSBibG9jay4KICovCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUucHJvdG90eXBlLmRlc2NyaWJlID0gZnVuY3Rpb24obmFtZSwgYm9keSkgewogIHZhciBjaGlsZCA9IG5ldyBhbmd1bGFyLnNjZW5hcmlvLkRlc2NyaWJlKG5hbWUsIHRoaXMpOwogIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7CiAgYm9keS5jYWxsKGNoaWxkKTsKfTsKCi8qKgogKiBTYW1lIGFzIGRlc2NyaWJlKCkgYnV0IG1ha2VzIGRkZXNjcmliZSBibG9ja3MgdGhlIG9ubHkgdG8gcnVuLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSB0ZXN0LgogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGJvZHkgQm9keSBvZiB0aGUgYmxvY2suCiAqLwphbmd1bGFyLnNjZW5hcmlvLkRlc2NyaWJlLnByb3RvdHlwZS5kZGVzY3JpYmUgPSBmdW5jdGlvbihuYW1lLCBib2R5KSB7CiAgdmFyIGNoaWxkID0gbmV3IGFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUobmFtZSwgdGhpcyk7CiAgY2hpbGQub25seSA9IHRydWU7CiAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTsKICBib2R5LmNhbGwoY2hpbGQpOwp9OwoKLyoqCiAqIFVzZSB0byBkaXNhYmxlIGEgZGVzY3JpYmUgYmxvY2suCiAqLwphbmd1bGFyLnNjZW5hcmlvLkRlc2NyaWJlLnByb3RvdHlwZS54ZGVzY3JpYmUgPSBhbmd1bGFyLm5vb3A7CgovKioKICogRGVmaW5lcyBhIHRlc3QuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHRlc3QuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gdm9keSBCb2R5IG9mIHRoZSBibG9jay4KICovCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUucHJvdG90eXBlLml0ID0gZnVuY3Rpb24obmFtZSwgYm9keSkgewogIHRoaXMuaXRzLnB1c2goewogICAgaWQ6IGFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUuc3BlY0lkKyssCiAgICBkZWZpbml0aW9uOiB0aGlzLAogICAgb25seTogdGhpcy5vbmx5LAogICAgbmFtZTogbmFtZSwKICAgIGJlZm9yZTogdGhpcy5zZXR1cEJlZm9yZSwKICAgIGJvZHk6IGJvZHksCiAgICBhZnRlcjogdGhpcy5zZXR1cEFmdGVyCiAgfSk7Cn07CgovKioKICogU2FtZSBhcyBpdCgpIGJ1dCBtYWtlcyBpaXQgdGVzdHMgdGhlIG9ubHkgdGVzdCB0byBydW4uCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHRlc3QuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gYm9keSBCb2R5IG9mIHRoZSBibG9jay4KICovCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUucHJvdG90eXBlLmlpdCA9IGZ1bmN0aW9uKG5hbWUsIGJvZHkpIHsKICB0aGlzLml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgdGhpcy5pdHNbdGhpcy5pdHMubGVuZ3RoLTFdLm9ubHkgPSB0cnVlOwp9OwoKLyoqCiAqIFVzZSB0byBkaXNhYmxlIGEgdGVzdCBibG9jay4KICovCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUucHJvdG90eXBlLnhpdCA9IGFuZ3VsYXIubm9vcDsKCi8qKgogKiBHZXRzIGFuIGFycmF5IG9mIGZ1bmN0aW9ucyByZXByZXNlbnRpbmcgYWxsIHRoZSB0ZXN0cyAocmVjdXJzaXZlbHkpLgogKiB0aGF0IGNhbiBiZSBleGVjdXRlZCB3aXRoIFNwZWNSdW5uZXIncy4KICoKICogQHJldHVybiB7QXJyYXk8T2JqZWN0Pn0gQXJyYXkgb2YgaXQgYmxvY2tzIHsKICogICBkZWZpbml0aW9uIDogT2JqZWN0IC8vIHBhcmVudCBEZXNjcmliZQogKiAgIG9ubHk6IGJvb2xlYW4KICogICBuYW1lOiBzdHJpbmcKICogICBiZWZvcmU6IEZ1bmN0aW9uCiAqICAgYm9keTogRnVuY3Rpb24KICogICBhZnRlcjogRnVuY3Rpb24KICogIH0KICovCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUucHJvdG90eXBlLmdldFNwZWNzID0gZnVuY3Rpb24oKSB7CiAgdmFyIHNwZWNzID0gYXJndW1lbnRzWzBdIHx8IFtdOwogIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCkgewogICAgY2hpbGQuZ2V0U3BlY3Moc3BlY3MpOwogIH0pOwogIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLml0cywgZnVuY3Rpb24oaXQpIHsKICAgIHNwZWNzLnB1c2goaXQpOwogIH0pOwogIHZhciBvbmx5ID0gW107CiAgYW5ndWxhci5mb3JFYWNoKHNwZWNzLCBmdW5jdGlvbihpdCkgewogICAgaWYgKGl0Lm9ubHkpIHsKICAgICAgb25seS5wdXNoKGl0KTsKICAgIH0KICB9KTsKICByZXR1cm4gKG9ubHkubGVuZ3RoICYmIG9ubHkpIHx8IHNwZWNzOwp9OwoKLyoqCiAqIEEgZnV0dXJlIGFjdGlvbiBpbiBhIHNwZWMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG9mIHRoZSBmdXR1cmUgYWN0aW9uCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZnV0dXJlIGNhbGxiYWNrKGVycm9yLCByZXN1bHQpCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gT3B0aW9uYWwuIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgZmlsZS9saW5lIG51bWJlci4KICovCmFuZ3VsYXIuc2NlbmFyaW8uRnV0dXJlID0gZnVuY3Rpb24obmFtZSwgYmVoYXZpb3IsIGxpbmUpIHsKICB0aGlzLm5hbWUgPSBuYW1lOwogIHRoaXMuYmVoYXZpb3IgPSBiZWhhdmlvcjsKICB0aGlzLmZ1bGZpbGxlZCA9IGZhbHNlOwogIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7CiAgdGhpcy5wYXJzZXIgPSBhbmd1bGFyLmlkZW50aXR5OwogIHRoaXMubGluZSA9IGxpbmUgfHwgZnVuY3Rpb24oKSB7IHJldHVybiAnJzsgfTsKfTsKCi8qKgogKiBFeGVjdXRlcyB0aGUgYmVoYXZpb3Igb2YgdGhlIGNsb3N1cmUuCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZG9uZUZuIENhbGxiYWNrIGZ1bmN0aW9uKGVycm9yLCByZXN1bHQpCiAqLwphbmd1bGFyLnNjZW5hcmlvLkZ1dHVyZS5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uKGRvbmVGbikgewogIHZhciBzZWxmID0gdGhpczsKICB0aGlzLmJlaGF2aW9yKGZ1bmN0aW9uKGVycm9yLCByZXN1bHQpIHsKICAgIHNlbGYuZnVsZmlsbGVkID0gdHJ1ZTsKICAgIGlmIChyZXN1bHQpIHsKICAgICAgdHJ5IHsKICAgICAgICByZXN1bHQgPSBzZWxmLnBhcnNlcihyZXN1bHQpOwogICAgICB9IGNhdGNoKGUpIHsKICAgICAgICBlcnJvciA9IGU7CiAgICAgIH0KICAgIH0KICAgIHNlbGYudmFsdWUgPSBlcnJvciB8fCByZXN1bHQ7CiAgICBkb25lRm4oZXJyb3IsIHJlc3VsdCk7CiAgfSk7Cn07CgovKioKICogQ29uZmlndXJlcyB0aGUgZnV0dXJlIHRvIGNvbnZlcnQgaXQncyBmaW5hbCB3aXRoIGEgZnVuY3Rpb24gZm4odmFsdWUpCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gZnVuY3Rpb24odmFsdWUpIHRoYXQgcmV0dXJucyB0aGUgcGFyc2VkIHZhbHVlCiAqLwphbmd1bGFyLnNjZW5hcmlvLkZ1dHVyZS5wcm90b3R5cGUucGFyc2VkV2l0aCA9IGZ1bmN0aW9uKGZuKSB7CiAgdGhpcy5wYXJzZXIgPSBmbjsKICByZXR1cm4gdGhpczsKfTsKCi8qKgogKiBDb25maWd1cmVzIHRoZSBmdXR1cmUgdG8gcGFyc2UgaXQncyBmaW5hbCB2YWx1ZSBmcm9tIEpTT04KICogaW50byBvYmplY3RzLgogKi8KYW5ndWxhci5zY2VuYXJpby5GdXR1cmUucHJvdG90eXBlLmZyb21Kc29uID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHRoaXMucGFyc2VkV2l0aChhbmd1bGFyLmZyb21Kc29uKTsKfTsKCi8qKgogKiBDb25maWd1cmVzIHRoZSBmdXR1cmUgdG8gY29udmVydCBpdCdzIGZpbmFsIHZhbHVlIGZyb20gb2JqZWN0cwogKiBpbnRvIEpTT04uCiAqLwphbmd1bGFyLnNjZW5hcmlvLkZ1dHVyZS5wcm90b3R5cGUudG9Kc29uID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHRoaXMucGFyc2VkV2l0aChhbmd1bGFyLnRvSnNvbik7Cn07CgovKioKICogTWFpbnRhaW5zIGFuIG9iamVjdCB0cmVlIGZyb20gdGhlIHJ1bm5lciBldmVudHMuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBydW5uZXIgVGhlIHNjZW5hcmlvIFJ1bm5lciBpbnN0YW5jZSB0byBjb25uZWN0IHRvLgogKgogKiBUT0RPKGVzcHJlaG4pOiBFdmVyeSBvdXRwdXQgdHlwZSBjcmVhdGVzIG9uZSBvZiB0aGVzZSwgYnV0IHdlIHByb2JhYmx5CiAqICB3YW50IG9uZSBnbG9iYWwgc2hhcmVkIGluc3RhbmNlLiBOZWVkIHRvIGhhbmRsZSBldmVudHMgYmV0dGVyIHRvbwogKiAgc28gdGhlIEhUTUwgb3V0cHV0IGRvZXNuJ3QgbmVlZCB0byBkbyBzcGVjIG1vZGVsLmdldFNwZWMoc3BlYy5pZCkKICogIHNpbGxpbmVzcy4KICoKICogVE9ETyh2b2p0YSkgcmVmYWN0b3Igb24sIGVtaXQgbWV0aG9kcyAoZnJvbSBhbGwgb2JqZWN0cykgLSB1c2UgaW5oZXJpdGFuY2UKICovCmFuZ3VsYXIuc2NlbmFyaW8uT2JqZWN0TW9kZWwgPSBmdW5jdGlvbihydW5uZXIpIHsKICB2YXIgc2VsZiA9IHRoaXM7CgogIHRoaXMuc3BlY01hcCA9IHt9OwogIHRoaXMubGlzdGVuZXJzID0gW107CiAgdGhpcy52YWx1ZSA9IHsKICAgIG5hbWU6ICcnLAogICAgY2hpbGRyZW46IHt9CiAgfTsKCiAgcnVubmVyLm9uKCdTcGVjQmVnaW4nLCBmdW5jdGlvbihzcGVjKSB7CiAgICB2YXIgYmxvY2sgPSBzZWxmLnZhbHVlLAogICAgICAgIGRlZmluaXRpb25zID0gW107CgogICAgYW5ndWxhci5mb3JFYWNoKHNlbGYuZ2V0RGVmaW5pdGlvblBhdGgoc3BlYyksIGZ1bmN0aW9uKGRlZikgewogICAgICBpZiAoIWJsb2NrLmNoaWxkcmVuW2RlZi5uYW1lXSkgewogICAgICAgIGJsb2NrLmNoaWxkcmVuW2RlZi5uYW1lXSA9IHsKICAgICAgICAgIGlkOiBkZWYuaWQsCiAgICAgICAgICBuYW1lOiBkZWYubmFtZSwKICAgICAgICAgIGNoaWxkcmVuOiB7fSwKICAgICAgICAgIHNwZWNzOiB7fQogICAgICAgIH07CiAgICAgIH0KICAgICAgYmxvY2sgPSBibG9jay5jaGlsZHJlbltkZWYubmFtZV07CiAgICAgIGRlZmluaXRpb25zLnB1c2goZGVmLm5hbWUpOwogICAgfSk7CgogICAgdmFyIGl0ID0gc2VsZi5zcGVjTWFwW3NwZWMuaWRdID0KICAgICAgICAgICAgIGJsb2NrLnNwZWNzW3NwZWMubmFtZV0gPQogICAgICAgICAgICAgbmV3IGFuZ3VsYXIuc2NlbmFyaW8uT2JqZWN0TW9kZWwuU3BlYyhzcGVjLmlkLCBzcGVjLm5hbWUsIGRlZmluaXRpb25zKTsKCiAgICAvLyBmb3J3YXJkIHRoZSBldmVudAogICAgc2VsZi5lbWl0KCdTcGVjQmVnaW4nLCBpdCk7CiAgfSk7CgogIHJ1bm5lci5vbignU3BlY0Vycm9yJywgZnVuY3Rpb24oc3BlYywgZXJyb3IpIHsKICAgIHZhciBpdCA9IHNlbGYuZ2V0U3BlYyhzcGVjLmlkKTsKICAgIGl0LnN0YXR1cyA9ICdlcnJvcic7CiAgICBpdC5lcnJvciA9IGVycm9yOwoKICAgIC8vIGZvcndhcmQgdGhlIGV2ZW50CiAgICBzZWxmLmVtaXQoJ1NwZWNFcnJvcicsIGl0LCBlcnJvcik7CiAgfSk7CgogIHJ1bm5lci5vbignU3BlY0VuZCcsIGZ1bmN0aW9uKHNwZWMpIHsKICAgIHZhciBpdCA9IHNlbGYuZ2V0U3BlYyhzcGVjLmlkKTsKICAgIGNvbXBsZXRlKGl0KTsKCiAgICAvLyBmb3J3YXJkIHRoZSBldmVudAogICAgc2VsZi5lbWl0KCdTcGVjRW5kJywgaXQpOwogIH0pOwoKICBydW5uZXIub24oJ1N0ZXBCZWdpbicsIGZ1bmN0aW9uKHNwZWMsIHN0ZXApIHsKICAgIHZhciBpdCA9IHNlbGYuZ2V0U3BlYyhzcGVjLmlkKTsKICAgIHZhciBzdGVwID0gbmV3IGFuZ3VsYXIuc2NlbmFyaW8uT2JqZWN0TW9kZWwuU3RlcChzdGVwLm5hbWUpOwogICAgaXQuc3RlcHMucHVzaChzdGVwKTsKCiAgICAvLyBmb3J3YXJkIHRoZSBldmVudAogICAgc2VsZi5lbWl0KCdTdGVwQmVnaW4nLCBpdCwgc3RlcCk7CiAgfSk7CgogIHJ1bm5lci5vbignU3RlcEVuZCcsIGZ1bmN0aW9uKHNwZWMpIHsKICAgIHZhciBpdCA9IHNlbGYuZ2V0U3BlYyhzcGVjLmlkKTsKICAgIHZhciBzdGVwID0gaXQuZ2V0TGFzdFN0ZXAoKTsKICAgIGlmIChzdGVwLm5hbWUgIT09IHN0ZXAubmFtZSkKICAgICAgdGhyb3cgJ0V2ZW50cyBmaXJlZCBpbiB0aGUgd3Jvbmcgb3JkZXIuIFN0ZXAgbmFtZXMgZG9uXCd0IG1hdGNoLic7CiAgICBjb21wbGV0ZShzdGVwKTsKCiAgICAvLyBmb3J3YXJkIHRoZSBldmVudAogICAgc2VsZi5lbWl0KCdTdGVwRW5kJywgaXQsIHN0ZXApOwogIH0pOwoKICBydW5uZXIub24oJ1N0ZXBGYWlsdXJlJywgZnVuY3Rpb24oc3BlYywgc3RlcCwgZXJyb3IpIHsKICAgIHZhciBpdCA9IHNlbGYuZ2V0U3BlYyhzcGVjLmlkKSwKICAgICAgICBtb2RlbFN0ZXAgPSBpdC5nZXRMYXN0U3RlcCgpOwoKICAgIG1vZGVsU3RlcC5zZXRFcnJvclN0YXR1cygnZmFpbHVyZScsIGVycm9yLCBzdGVwLmxpbmUoKSk7CiAgICBpdC5zZXRTdGF0dXNGcm9tU3RlcChtb2RlbFN0ZXApOwoKICAgIC8vIGZvcndhcmQgdGhlIGV2ZW50CiAgICBzZWxmLmVtaXQoJ1N0ZXBGYWlsdXJlJywgaXQsIG1vZGVsU3RlcCwgZXJyb3IpOwogIH0pOwoKICBydW5uZXIub24oJ1N0ZXBFcnJvcicsIGZ1bmN0aW9uKHNwZWMsIHN0ZXAsIGVycm9yKSB7CiAgICB2YXIgaXQgPSBzZWxmLmdldFNwZWMoc3BlYy5pZCksCiAgICAgICAgbW9kZWxTdGVwID0gaXQuZ2V0TGFzdFN0ZXAoKTsKCiAgICBtb2RlbFN0ZXAuc2V0RXJyb3JTdGF0dXMoJ2Vycm9yJywgZXJyb3IsIHN0ZXAubGluZSgpKTsKICAgIGl0LnNldFN0YXR1c0Zyb21TdGVwKG1vZGVsU3RlcCk7CgogICAgLy8gZm9yd2FyZCB0aGUgZXZlbnQKICAgIHNlbGYuZW1pdCgnU3RlcEVycm9yJywgaXQsIG1vZGVsU3RlcCwgZXJyb3IpOwogIH0pOwoKICBydW5uZXIub24oJ1J1bm5lckVuZCcsIGZ1bmN0aW9uKCkgewogICAgc2VsZi5lbWl0KCdSdW5uZXJFbmQnKTsKICB9KTsKCiAgZnVuY3Rpb24gY29tcGxldGUoaXRlbSkgewogICAgaXRlbS5lbmRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICBpdGVtLmR1cmF0aW9uID0gaXRlbS5lbmRUaW1lIC0gaXRlbS5zdGFydFRpbWU7CiAgICBpdGVtLnN0YXR1cyA9IGl0ZW0uc3RhdHVzIHx8ICdzdWNjZXNzJzsKICB9Cn07CgovKioKICogQWRkcyBhIGxpc3RlbmVyIGZvciBhbiBldmVudC4KICoKICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIHRoZSBldmVudCB0byBhZGQgYSBoYW5kbGVyIGZvcgogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGxpc3RlbmVyIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiBldmVudCBpcyBmaXJlZAogKi8KYW5ndWxhci5zY2VuYXJpby5PYmplY3RNb2RlbC5wcm90b3R5cGUub24gPSBmdW5jdGlvbihldmVudE5hbWUsIGxpc3RlbmVyKSB7CiAgZXZlbnROYW1lID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7CiAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0gfHwgW107CiAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXS5wdXNoKGxpc3RlbmVyKTsKfTsKCi8qKgogKiBFbWl0cyBhbiBldmVudCB3aGljaCBub3RpZmllcyBsaXN0ZW5lcnMgYW5kIHBhc3NlcyBleHRyYQogKiBhcmd1bWVudHMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiB0aGUgZXZlbnQgdG8gZmlyZS4KICovCmFuZ3VsYXIuc2NlbmFyaW8uT2JqZWN0TW9kZWwucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudE5hbWUpIHsKICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLAogICAgICBldmVudE5hbWUgPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTsKCiAgaWYgKHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0pIHsKICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdLCBmdW5jdGlvbihsaXN0ZW5lcikgewogICAgICBsaXN0ZW5lci5hcHBseShzZWxmLCBhcmdzKTsKICAgIH0pOwogIH0KfTsKCi8qKgogKiBDb21wdXRlcyB0aGUgcGF0aCBvZiBkZWZpbml0aW9uIGRlc2NyaWJlIGJsb2NrcyB0aGF0IHdyYXAgYXJvdW5kCiAqIHRoaXMgc3BlYy4KICoKICogQHBhcmFtIHNwZWMgU3BlYyB0byBjb21wdXRlIHRoZSBwYXRoIGZvci4KICogQHJldHVybiB7QXJyYXk8RGVzY3JpYmU+fSBUaGUgZGVzY3JpYmUgYmxvY2sgcGF0aAogKi8KYW5ndWxhci5zY2VuYXJpby5PYmplY3RNb2RlbC5wcm90b3R5cGUuZ2V0RGVmaW5pdGlvblBhdGggPSBmdW5jdGlvbihzcGVjKSB7CiAgdmFyIHBhdGggPSBbXTsKICB2YXIgY3VycmVudERlZmluaXRpb24gPSBzcGVjLmRlZmluaXRpb247CiAgd2hpbGUgKGN1cnJlbnREZWZpbml0aW9uICYmIGN1cnJlbnREZWZpbml0aW9uLm5hbWUpIHsKICAgIHBhdGgudW5zaGlmdChjdXJyZW50RGVmaW5pdGlvbik7CiAgICBjdXJyZW50RGVmaW5pdGlvbiA9IGN1cnJlbnREZWZpbml0aW9uLnBhcmVudDsKICB9CiAgcmV0dXJuIHBhdGg7Cn07CgovKioKICogR2V0cyBhIHNwZWMgYnkgaWQuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgaWQgb2YgdGhlIHNwZWMgdG8gZ2V0IHRoZSBvYmplY3QgZm9yLgogKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBTcGVjIGluc3RhbmNlCiAqLwphbmd1bGFyLnNjZW5hcmlvLk9iamVjdE1vZGVsLnByb3RvdHlwZS5nZXRTcGVjID0gZnVuY3Rpb24oaWQpIHsKICByZXR1cm4gdGhpcy5zcGVjTWFwW2lkXTsKfTsKCi8qKgogKiBBIHNpbmdsZSBpdCBibG9jay4KICoKICogQHBhcmFtIHtzdHJpbmd9IGlkIElkIG9mIHRoZSBzcGVjCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHNwZWMKICogQHBhcmFtIHtBcnJheTxzdHJpbmc+PX0gZGVmaW5pdGlvbk5hbWVzIExpc3Qgb2YgYWxsIGRlc2NyaWJlIGJsb2NrIG5hbWVzIHRoYXQgd3JhcCB0aGlzIHNwZWMKICovCmFuZ3VsYXIuc2NlbmFyaW8uT2JqZWN0TW9kZWwuU3BlYyA9IGZ1bmN0aW9uKGlkLCBuYW1lLCBkZWZpbml0aW9uTmFtZXMpIHsKICB0aGlzLmlkID0gaWQ7CiAgdGhpcy5uYW1lID0gbmFtZTsKICB0aGlzLnN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogIHRoaXMuc3RlcHMgPSBbXTsKICB0aGlzLmZ1bGxEZWZpbml0aW9uTmFtZSA9IChkZWZpbml0aW9uTmFtZXMgfHwgW10pLmpvaW4oJyAnKTsKfTsKCi8qKgogKiBBZGRzIGEgbmV3IHN0ZXAgdG8gdGhlIFNwZWMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBzdGVwIE5hbWUgb2YgdGhlIHN0ZXAgKHJlYWxseSBuYW1lIG9mIHRoZSBmdXR1cmUpCiAqIEByZXR1cm4ge09iamVjdH0gdGhlIGFkZGVkIHN0ZXAKICovCmFuZ3VsYXIuc2NlbmFyaW8uT2JqZWN0TW9kZWwuU3BlYy5wcm90b3R5cGUuYWRkU3RlcCA9IGZ1bmN0aW9uKG5hbWUpIHsKICB2YXIgc3RlcCA9IG5ldyBhbmd1bGFyLnNjZW5hcmlvLk9iamVjdE1vZGVsLlN0ZXAobmFtZSk7CiAgdGhpcy5zdGVwcy5wdXNoKHN0ZXApOwogIHJldHVybiBzdGVwOwp9OwoKLyoqCiAqIEdldHMgdGhlIG1vc3QgcmVjZW50IHN0ZXAuCiAqCiAqIEByZXR1cm4ge09iamVjdH0gdGhlIHN0ZXAKICovCmFuZ3VsYXIuc2NlbmFyaW8uT2JqZWN0TW9kZWwuU3BlYy5wcm90b3R5cGUuZ2V0TGFzdFN0ZXAgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gdGhpcy5zdGVwc1t0aGlzLnN0ZXBzLmxlbmd0aC0xXTsKfTsKCi8qKgogKiBTZXQgc3RhdHVzIG9mIHRoZSBTcGVjIGZyb20gZ2l2ZW4gU3RlcAogKgogKiBAcGFyYW0ge2FuZ3VsYXIuc2NlbmFyaW8uT2JqZWN0TW9kZWwuU3RlcH0gc3RlcAogKi8KYW5ndWxhci5zY2VuYXJpby5PYmplY3RNb2RlbC5TcGVjLnByb3RvdHlwZS5zZXRTdGF0dXNGcm9tU3RlcCA9IGZ1bmN0aW9uKHN0ZXApIHsKICBpZiAoIXRoaXMuc3RhdHVzIHx8IHN0ZXAuc3RhdHVzID09ICdlcnJvcicpIHsKICAgIHRoaXMuc3RhdHVzID0gc3RlcC5zdGF0dXM7CiAgICB0aGlzLmVycm9yID0gc3RlcC5lcnJvcjsKICAgIHRoaXMubGluZSA9IHN0ZXAubGluZTsKICB9Cn07CgovKioKICogQSBzaW5nbGUgc3RlcCBpbnNpZGUgYSBTcGVjLgogKgogKiBAcGFyYW0ge3N0cmluZ30gc3RlcCBOYW1lIG9mIHRoZSBzdGVwCiAqLwphbmd1bGFyLnNjZW5hcmlvLk9iamVjdE1vZGVsLlN0ZXAgPSBmdW5jdGlvbihuYW1lKSB7CiAgdGhpcy5uYW1lID0gbmFtZTsKICB0aGlzLnN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwp9OwoKLyoqCiAqIEhlbHBlciBtZXRob2QgZm9yIHNldHRpbmcgYWxsIGVycm9yIHN0YXR1cyByZWxhdGVkIHByb3BlcnRpZXMKICoKICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1cwogKiBAcGFyYW0ge3N0cmluZ30gZXJyb3IKICogQHBhcmFtIHtzdHJpbmd9IGxpbmUKICovCmFuZ3VsYXIuc2NlbmFyaW8uT2JqZWN0TW9kZWwuU3RlcC5wcm90b3R5cGUuc2V0RXJyb3JTdGF0dXMgPSBmdW5jdGlvbihzdGF0dXMsIGVycm9yLCBsaW5lKSB7CiAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7CiAgdGhpcy5lcnJvciA9IGVycm9yOwogIHRoaXMubGluZSA9IGxpbmU7Cn07CgovKioKICogVGhlIHJlcHJlc2VudGF0aW9uIG9mIGRlZmluZSBibG9ja3MuIERvbid0IHVzZWQgZGlyZWN0bHksIGluc3RlYWQgdXNlCiAqIGRlZmluZSgpIGluIHlvdXIgdGVzdHMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBkZXNjTmFtZSBOYW1lIG9mIHRoZSBibG9jawogKiBAcGFyYW0ge09iamVjdH0gcGFyZW50IGRlc2NyaWJlIG9yIHVuZGVmaW5lZCBpZiB0aGUgcm9vdC4KICovCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUgPSBmdW5jdGlvbihkZXNjTmFtZSwgcGFyZW50KSB7CiAgdGhpcy5vbmx5ID0gcGFyZW50ICYmIHBhcmVudC5vbmx5OwogIHRoaXMuYmVmb3JlRWFjaEZucyA9IFtdOwogIHRoaXMuYWZ0ZXJFYWNoRm5zID0gW107CiAgdGhpcy5pdHMgPSBbXTsKICB0aGlzLmNoaWxkcmVuID0gW107CiAgdGhpcy5uYW1lID0gZGVzY05hbWU7CiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7CiAgdGhpcy5pZCA9IGFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUuaWQrKzsKCiAgLyoqCiAgICogQ2FsbHMgYWxsIGJlZm9yZSBmdW5jdGlvbnMuCiAgICovCiAgdmFyIGJlZm9yZUVhY2hGbnMgPSB0aGlzLmJlZm9yZUVhY2hGbnM7CiAgdGhpcy5zZXR1cEJlZm9yZSA9IGZ1bmN0aW9uKCkgewogICAgaWYgKHBhcmVudCkgcGFyZW50LnNldHVwQmVmb3JlLmNhbGwodGhpcyk7CiAgICBhbmd1bGFyLmZvckVhY2goYmVmb3JlRWFjaEZucywgZnVuY3Rpb24oZm4pIHsgZm4uY2FsbCh0aGlzKTsgfSwgdGhpcyk7CiAgfTsKCiAgLyoqCiAgICogQ2FsbHMgYWxsIGFmdGVyIGZ1bmN0aW9ucy4KICAgKi8KICB2YXIgYWZ0ZXJFYWNoRm5zID0gdGhpcy5hZnRlckVhY2hGbnM7CiAgdGhpcy5zZXR1cEFmdGVyICA9IGZ1bmN0aW9uKCkgewogICAgYW5ndWxhci5mb3JFYWNoKGFmdGVyRWFjaEZucywgZnVuY3Rpb24oZm4pIHsgZm4uY2FsbCh0aGlzKTsgfSwgdGhpcyk7CiAgICBpZiAocGFyZW50KSBwYXJlbnQuc2V0dXBBZnRlci5jYWxsKHRoaXMpOwogIH07Cn07CgovLyBTaGFyZWQgVW5pcXVlIElEIGdlbmVyYXRvciBmb3IgZXZlcnkgZGVzY3JpYmUgYmxvY2sKYW5ndWxhci5zY2VuYXJpby5EZXNjcmliZS5pZCA9IDA7CgovLyBTaGFyZWQgVW5pcXVlIElEIGdlbmVyYXRvciBmb3IgZXZlcnkgaXQgKHNwZWMpCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUuc3BlY0lkID0gMDsKCi8qKgogKiBEZWZpbmVzIGEgYmxvY2sgdG8gZXhlY3V0ZSBiZWZvcmUgZWFjaCBpdCBvciBuZXN0ZWQgZGVzY3JpYmUuCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gYm9keSBCb2R5IG9mIHRoZSBibG9jay4KICovCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUucHJvdG90eXBlLmJlZm9yZUVhY2ggPSBmdW5jdGlvbihib2R5KSB7CiAgdGhpcy5iZWZvcmVFYWNoRm5zLnB1c2goYm9keSk7Cn07CgovKioKICogRGVmaW5lcyBhIGJsb2NrIHRvIGV4ZWN1dGUgYWZ0ZXIgZWFjaCBpdCBvciBuZXN0ZWQgZGVzY3JpYmUuCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gYm9keSBCb2R5IG9mIHRoZSBibG9jay4KICovCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUucHJvdG90eXBlLmFmdGVyRWFjaCA9IGZ1bmN0aW9uKGJvZHkpIHsKICB0aGlzLmFmdGVyRWFjaEZucy5wdXNoKGJvZHkpOwp9OwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgZGVzY3JpYmUgYmxvY2sgdGhhdCdzIGEgY2hpbGQgb2YgdGhpcyBvbmUuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGJsb2NrLiBBcHBlbmRlZCB0byB0aGUgcGFyZW50IGJsb2NrJ3MgbmFtZS4KICogQHBhcmFtIHtmdW5jdGlvbigpfSBib2R5IEJvZHkgb2YgdGhlIGJsb2NrLgogKi8KYW5ndWxhci5zY2VuYXJpby5EZXNjcmliZS5wcm90b3R5cGUuZGVzY3JpYmUgPSBmdW5jdGlvbihuYW1lLCBib2R5KSB7CiAgdmFyIGNoaWxkID0gbmV3IGFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUobmFtZSwgdGhpcyk7CiAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTsKICBib2R5LmNhbGwoY2hpbGQpOwp9OwoKLyoqCiAqIFNhbWUgYXMgZGVzY3JpYmUoKSBidXQgbWFrZXMgZGRlc2NyaWJlIGJsb2NrcyB0aGUgb25seSB0byBydW4uCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHRlc3QuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gYm9keSBCb2R5IG9mIHRoZSBibG9jay4KICovCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUucHJvdG90eXBlLmRkZXNjcmliZSA9IGZ1bmN0aW9uKG5hbWUsIGJvZHkpIHsKICB2YXIgY2hpbGQgPSBuZXcgYW5ndWxhci5zY2VuYXJpby5EZXNjcmliZShuYW1lLCB0aGlzKTsKICBjaGlsZC5vbmx5ID0gdHJ1ZTsKICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpOwogIGJvZHkuY2FsbChjaGlsZCk7Cn07CgovKioKICogVXNlIHRvIGRpc2FibGUgYSBkZXNjcmliZSBibG9jay4KICovCmFuZ3VsYXIuc2NlbmFyaW8uRGVzY3JpYmUucHJvdG90eXBlLnhkZXNjcmliZSA9IGFuZ3VsYXIubm9vcDsKCi8qKgogKiBEZWZpbmVzIGEgdGVzdC4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgdGVzdC4KICogQHBhcmFtIHtmdW5jdGlvbigpfSB2b2R5IEJvZHkgb2YgdGhlIGJsb2NrLgogKi8KYW5ndWxhci5zY2VuYXJpby5EZXNjcmliZS5wcm90b3R5cGUuaXQgPSBmdW5jdGlvbihuYW1lLCBib2R5KSB7CiAgdGhpcy5pdHMucHVzaCh7CiAgICBpZDogYW5ndWxhci5zY2VuYXJpby5EZXNjcmliZS5zcGVjSWQrKywKICAgIGRlZmluaXRpb246IHRoaXMsCiAgICBvbmx5OiB0aGlzLm9ubHksCiAgICBuYW1lOiBuYW1lLAogICAgYmVmb3JlOiB0aGlzLnNldHVwQmVmb3JlLAogICAgYm9keTogYm9keSwKICAgIGFmdGVyOiB0aGlzLnNldHVwQWZ0ZXIKICB9KTsKfTsKCi8qKgogKiBTYW1lIGFzIGl0KCkgYnV0IG1ha2VzIGlpdCB0ZXN0cyB0aGUgb25seSB0ZXN0IHRvIHJ1bi4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgdGVzdC4KICogQHBhcmFtIHtmdW5jdGlvbigpfSBib2R5IEJvZHkgb2YgdGhlIGJsb2NrLgogKi8KYW5ndWxhci5zY2VuYXJpby5EZXNjcmliZS5wcm90b3R5cGUuaWl0ID0gZnVuY3Rpb24obmFtZSwgYm9keSkgewogIHRoaXMuaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB0aGlzLml0c1t0aGlzLml0cy5sZW5ndGgtMV0ub25seSA9IHRydWU7Cn07CgovKioKICogVXNlIHRvIGRpc2FibGUgYSB0ZXN0IGJsb2NrLgogKi8KYW5ndWxhci5zY2VuYXJpby5EZXNjcmliZS5wcm90b3R5cGUueGl0ID0gYW5ndWxhci5ub29wOwoKLyoqCiAqIEdldHMgYW4gYXJyYXkgb2YgZnVuY3Rpb25zIHJlcHJlc2VudGluZyBhbGwgdGhlIHRlc3RzIChyZWN1cnNpdmVseSkuCiAqIHRoYXQgY2FuIGJlIGV4ZWN1dGVkIHdpdGggU3BlY1J1bm5lcidzLgogKgogKiBAcmV0dXJuIHtBcnJheTxPYmplY3Q+fSBBcnJheSBvZiBpdCBibG9ja3MgewogKiAgIGRlZmluaXRpb24gOiBPYmplY3QgLy8gcGFyZW50IERlc2NyaWJlCiAqICAgb25seTogYm9vbGVhbgogKiAgIG5hbWU6IHN0cmluZwogKiAgIGJlZm9yZTogRnVuY3Rpb24KICogICBib2R5OiBGdW5jdGlvbgogKiAgIGFmdGVyOiBGdW5jdGlvbgogKiAgfQogKi8KYW5ndWxhci5zY2VuYXJpby5EZXNjcmliZS5wcm90b3R5cGUuZ2V0U3BlY3MgPSBmdW5jdGlvbigpIHsKICB2YXIgc3BlY3MgPSBhcmd1bWVudHNbMF0gfHwgW107CiAgYW5ndWxhci5mb3JFYWNoKHRoaXMuY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7CiAgICBjaGlsZC5nZXRTcGVjcyhzcGVjcyk7CiAgfSk7CiAgYW5ndWxhci5mb3JFYWNoKHRoaXMuaXRzLCBmdW5jdGlvbihpdCkgewogICAgc3BlY3MucHVzaChpdCk7CiAgfSk7CiAgdmFyIG9ubHkgPSBbXTsKICBhbmd1bGFyLmZvckVhY2goc3BlY3MsIGZ1bmN0aW9uKGl0KSB7CiAgICBpZiAoaXQub25seSkgewogICAgICBvbmx5LnB1c2goaXQpOwogICAgfQogIH0pOwogIHJldHVybiAob25seS5sZW5ndGggJiYgb25seSkgfHwgc3BlY3M7Cn07CgovKioKICogUnVubmVyIGZvciBzY2VuYXJpb3MKICoKICogSGFzIHRvIGJlIGluaXRpYWxpemVkIGJlZm9yZSBhbnkgdGVzdCBpcyBsb2FkZWQsCiAqIGJlY2F1c2UgaXQgcHVibGlzaGVzIHRoZSBBUEkgaW50byB3aW5kb3cgKGdsb2JhbCBzcGFjZSkuCiAqLwphbmd1bGFyLnNjZW5hcmlvLlJ1bm5lciA9IGZ1bmN0aW9uKCR3aW5kb3cpIHsKICB0aGlzLmxpc3RlbmVycyA9IFtdOwogIHRoaXMuJHdpbmRvdyA9ICR3aW5kb3c7CiAgdGhpcy5yb290RGVzY3JpYmUgPSBuZXcgYW5ndWxhci5zY2VuYXJpby5EZXNjcmliZSgpOwogIHRoaXMuY3VycmVudERlc2NyaWJlID0gdGhpcy5yb290RGVzY3JpYmU7CiAgdGhpcy5hcGkgPSB7CiAgICBpdDogdGhpcy5pdCwKICAgIGlpdDogdGhpcy5paXQsCiAgICB4aXQ6IGFuZ3VsYXIubm9vcCwKICAgIGRlc2NyaWJlOiB0aGlzLmRlc2NyaWJlLAogICAgZGRlc2NyaWJlOiB0aGlzLmRkZXNjcmliZSwKICAgIHhkZXNjcmliZTogYW5ndWxhci5ub29wLAogICAgYmVmb3JlRWFjaDogdGhpcy5iZWZvcmVFYWNoLAogICAgYWZ0ZXJFYWNoOiB0aGlzLmFmdGVyRWFjaAogIH07CiAgYW5ndWxhci5mb3JFYWNoKHRoaXMuYXBpLCBhbmd1bGFyLmJpbmQodGhpcywgZnVuY3Rpb24oZm4sIGtleSkgewogICAgdGhpcy4kd2luZG93W2tleV0gPSBhbmd1bGFyLmJpbmQodGhpcywgZm4pOwogIH0pKTsKfTsKCi8qKgogKiBFbWl0cyBhbiBldmVudCB3aGljaCBub3RpZmllcyBsaXN0ZW5lcnMgYW5kIHBhc3NlcyBleHRyYQogKiBhcmd1bWVudHMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiB0aGUgZXZlbnQgdG8gZmlyZS4KICovCmFuZ3VsYXIuc2NlbmFyaW8uUnVubmVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7CiAgdmFyIHNlbGYgPSB0aGlzOwogIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICBldmVudE5hbWUgPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTsKICBpZiAoIXRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0pCiAgICByZXR1cm47CiAgYW5ndWxhci5mb3JFYWNoKHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0sIGZ1bmN0aW9uKGxpc3RlbmVyKSB7CiAgICBsaXN0ZW5lci5hcHBseShzZWxmLCBhcmdzKTsKICB9KTsKfTsKCi8qKgogKiBBZGRzIGEgbGlzdGVuZXIgZm9yIGFuIGV2ZW50LgogKgogKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBhZGQgYSBoYW5kbGVyIGZvcgogKiBAcGFyYW0ge3N0cmluZ30gbGlzdGVuZXIgVGhlIGZuKC4uLikgdGhhdCB0YWtlcyB0aGUgZXh0cmEgYXJndW1lbnRzIGZyb20gZW1pdCgpCiAqLwphbmd1bGFyLnNjZW5hcmlvLlJ1bm5lci5wcm90b3R5cGUub24gPSBmdW5jdGlvbihldmVudE5hbWUsIGxpc3RlbmVyKSB7CiAgZXZlbnROYW1lID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7CiAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0gfHwgW107CiAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXS5wdXNoKGxpc3RlbmVyKTsKfTsKCi8qKgogKiBEZWZpbmVzIGEgZGVzY3JpYmUgYmxvY2sgb2YgYSBzcGVjLgogKgogKiBAc2VlIERlc2NyaWJlLmpzCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGJsb2NrCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gYm9keSBCb2R5IG9mIHRoZSBibG9jawogKi8KYW5ndWxhci5zY2VuYXJpby5SdW5uZXIucHJvdG90eXBlLmRlc2NyaWJlID0gZnVuY3Rpb24obmFtZSwgYm9keSkgewogIHZhciBzZWxmID0gdGhpczsKICB0aGlzLmN1cnJlbnREZXNjcmliZS5kZXNjcmliZShuYW1lLCBmdW5jdGlvbigpIHsKICAgIHZhciBwYXJlbnREZXNjcmliZSA9IHNlbGYuY3VycmVudERlc2NyaWJlOwogICAgc2VsZi5jdXJyZW50RGVzY3JpYmUgPSB0aGlzOwogICAgdHJ5IHsKICAgICAgYm9keS5jYWxsKHRoaXMpOwogICAgfSBmaW5hbGx5IHsKICAgICAgc2VsZi5jdXJyZW50RGVzY3JpYmUgPSBwYXJlbnREZXNjcmliZTsKICAgIH0KICB9KTsKfTsKCi8qKgogKiBTYW1lIGFzIGRlc2NyaWJlLCBidXQgbWFrZXMgZGRlc2NyaWJlIHRoZSBvbmx5IGJsb2NrcyB0byBydW4uCiAqCiAqIEBzZWUgRGVzY3JpYmUuanMKICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgYmxvY2sKICogQHBhcmFtIHtmdW5jdGlvbigpfSBib2R5IEJvZHkgb2YgdGhlIGJsb2NrCiAqLwphbmd1bGFyLnNjZW5hcmlvLlJ1bm5lci5wcm90b3R5cGUuZGRlc2NyaWJlID0gZnVuY3Rpb24obmFtZSwgYm9keSkgewogIHZhciBzZWxmID0gdGhpczsKICB0aGlzLmN1cnJlbnREZXNjcmliZS5kZGVzY3JpYmUobmFtZSwgZnVuY3Rpb24oKSB7CiAgICB2YXIgcGFyZW50RGVzY3JpYmUgPSBzZWxmLmN1cnJlbnREZXNjcmliZTsKICAgIHNlbGYuY3VycmVudERlc2NyaWJlID0gdGhpczsKICAgIHRyeSB7CiAgICAgIGJvZHkuY2FsbCh0aGlzKTsKICAgIH0gZmluYWxseSB7CiAgICAgIHNlbGYuY3VycmVudERlc2NyaWJlID0gcGFyZW50RGVzY3JpYmU7CiAgICB9CiAgfSk7Cn07CgovKioKICogRGVmaW5lcyBhIHRlc3QgaW4gYSBkZXNjcmliZSBibG9jayBvZiBhIHNwZWMuCiAqCiAqIEBzZWUgRGVzY3JpYmUuanMKICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgYmxvY2sKICogQHBhcmFtIHtmdW5jdGlvbigpfSBib2R5IEJvZHkgb2YgdGhlIGJsb2NrCiAqLwphbmd1bGFyLnNjZW5hcmlvLlJ1bm5lci5wcm90b3R5cGUuaXQgPSBmdW5jdGlvbihuYW1lLCBib2R5KSB7CiAgdGhpcy5jdXJyZW50RGVzY3JpYmUuaXQobmFtZSwgYm9keSk7Cn07CgovKioKICogU2FtZSBhcyBpdCwgYnV0IG1ha2VzIGlpdCB0ZXN0cyB0aGUgb25seSB0ZXN0cyB0byBydW4uCiAqCiAqIEBzZWUgRGVzY3JpYmUuanMKICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgYmxvY2sKICogQHBhcmFtIHtmdW5jdGlvbigpfSBib2R5IEJvZHkgb2YgdGhlIGJsb2NrCiAqLwphbmd1bGFyLnNjZW5hcmlvLlJ1bm5lci5wcm90b3R5cGUuaWl0ID0gZnVuY3Rpb24obmFtZSwgYm9keSkgewogIHRoaXMuY3VycmVudERlc2NyaWJlLmlpdChuYW1lLCBib2R5KTsKfTsKCi8qKgogKiBEZWZpbmVzIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGJlZm9yZSBlYWNoIGl0IGJsb2NrIGluIHRoZSBkZXNjcmliZQogKiAoYW5kIGJlZm9yZSBhbGwgbmVzdGVkIGRlc2NyaWJlcykuCiAqCiAqIEBzZWUgRGVzY3JpYmUuanMKICoKICogQHBhcmFtIHtmdW5jdGlvbigpfSBDYWxsYmFjayB0byBleGVjdXRlCiAqLwphbmd1bGFyLnNjZW5hcmlvLlJ1bm5lci5wcm90b3R5cGUuYmVmb3JlRWFjaCA9IGZ1bmN0aW9uKGJvZHkpIHsKICB0aGlzLmN1cnJlbnREZXNjcmliZS5iZWZvcmVFYWNoKGJvZHkpOwp9OwoKLyoqCiAqIERlZmluZXMgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgZWFjaCBpdCBibG9jayBpbiB0aGUgZGVzY3JpYmUKICogKGFuZCBiZWZvcmUgYWxsIG5lc3RlZCBkZXNjcmliZXMpLgogKgogKiBAc2VlIERlc2NyaWJlLmpzCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gQ2FsbGJhY2sgdG8gZXhlY3V0ZQogKi8KYW5ndWxhci5zY2VuYXJpby5SdW5uZXIucHJvdG90eXBlLmFmdGVyRWFjaCA9IGZ1bmN0aW9uKGJvZHkpIHsKICB0aGlzLmN1cnJlbnREZXNjcmliZS5hZnRlckVhY2goYm9keSk7Cn07CgovKioKICogQ3JlYXRlcyBhIG5ldyBzcGVjIHJ1bm5lci4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IHNjb3BlIHBhcmVudCBzY29wZQogKi8KYW5ndWxhci5zY2VuYXJpby5SdW5uZXIucHJvdG90eXBlLmNyZWF0ZVNwZWNSdW5uZXJfID0gZnVuY3Rpb24oc2NvcGUpIHsKICB2YXIgY2hpbGQgPSBzY29wZS4kbmV3KCk7CiAgdmFyIENscyA9IGFuZ3VsYXIuc2NlbmFyaW8uU3BlY1J1bm5lcjsKCiAgLy8gRXhwb3J0IGFsbCB0aGUgbWV0aG9kcyB0byBjaGlsZCBzY29wZSBtYW51YWxseSBhcyBub3cgd2UgZG9uJ3QgbWVzcyBjb250cm9sbGVycyB3aXRoIHNjb3BlcwogIC8vIFRPRE8odm9qdGEpOiByZWZhY3RvciBzY2VuYXJpbyBydW5uZXIgc28gdGhhdCB0aGVzZSBvYmplY3RzIGFyZSBub3QgdGlnaHRseSBjb3VwbGVkIGFzIGN1cnJlbnQKICBmb3IgKHZhciBuYW1lIGluIENscy5wcm90b3R5cGUpCiAgICBjaGlsZFtuYW1lXSA9IGFuZ3VsYXIuYmluZChjaGlsZCwgQ2xzLnByb3RvdHlwZVtuYW1lXSk7CgogIENscy5jYWxsKGNoaWxkKTsKICByZXR1cm4gY2hpbGQ7Cn07CgovKioKICogUnVucyBhbGwgdGhlIGxvYWRlZCB0ZXN0cyB3aXRoIHRoZSBzcGVjaWZpZWQgcnVubmVyIGNsYXNzIG9uIHRoZQogKiBwcm92aWRlZCBhcHBsaWNhdGlvbi4KICoKICogQHBhcmFtIHthbmd1bGFyLnNjZW5hcmlvLkFwcGxpY2F0aW9ufSBhcHBsaWNhdGlvbiBBcHAgdG8gcmVtb3RlIGNvbnRyb2wuCiAqLwphbmd1bGFyLnNjZW5hcmlvLlJ1bm5lci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oYXBwbGljYXRpb24pIHsKICB2YXIgc2VsZiA9IHRoaXM7CiAgdmFyICRyb290ID0gYW5ndWxhci5pbmplY3RvcihbJ25nJ10pLmdldCgnJHJvb3RTY29wZScpOwogIGFuZ3VsYXIuZXh0ZW5kKCRyb290LCB0aGlzKTsKICBhbmd1bGFyLmZvckVhY2goYW5ndWxhci5zY2VuYXJpby5SdW5uZXIucHJvdG90eXBlLCBmdW5jdGlvbihmbiwgbmFtZSkgewogICAgJHJvb3RbbmFtZV0gPSBhbmd1bGFyLmJpbmQoc2VsZiwgZm4pOwogIH0pOwogICRyb290LmFwcGxpY2F0aW9uID0gYXBwbGljYXRpb247CiAgJHJvb3QuZW1pdCgnUnVubmVyQmVnaW4nKTsKICBhc3luY0ZvckVhY2godGhpcy5yb290RGVzY3JpYmUuZ2V0U3BlY3MoKSwgZnVuY3Rpb24oc3BlYywgc3BlY0RvbmUpIHsKICAgIHZhciBkc2xDYWNoZSA9IHt9OwogICAgdmFyIHJ1bm5lciA9IHNlbGYuY3JlYXRlU3BlY1J1bm5lcl8oJHJvb3QpOwogICAgYW5ndWxhci5mb3JFYWNoKGFuZ3VsYXIuc2NlbmFyaW8uZHNsLCBmdW5jdGlvbihmbiwga2V5KSB7CiAgICAgIGRzbENhY2hlW2tleV0gPSBmbi5jYWxsKCRyb290KTsKICAgIH0pOwogICAgYW5ndWxhci5mb3JFYWNoKGFuZ3VsYXIuc2NlbmFyaW8uZHNsLCBmdW5jdGlvbihmbiwga2V5KSB7CiAgICAgIHNlbGYuJHdpbmRvd1trZXldID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGxpbmUgPSBjYWxsZXJGaWxlKDMpOwogICAgICAgIHZhciBzY29wZSA9IHJ1bm5lci4kbmV3KCk7CgogICAgICAgIC8vIE1ha2UgdGhlIGRzbCBhY2Nlc3NpYmxlIG9uIHRoZSBjdXJyZW50IGNoYWluCiAgICAgICAgc2NvcGUuZHNsID0ge307CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGRzbENhY2hlLCBmdW5jdGlvbihmbiwga2V5KSB7CiAgICAgICAgICBzY29wZS5kc2xba2V5XSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gZHNsQ2FjaGVba2V5XS5hcHBseShzY29wZSwgYXJndW1lbnRzKTsKICAgICAgICAgIH07CiAgICAgICAgfSk7CgogICAgICAgIC8vIE1ha2UgdGhlc2UgbWV0aG9kcyB3b3JrIG9uIHRoZSBjdXJyZW50IGNoYWluCiAgICAgICAgc2NvcGUuYWRkRnV0dXJlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5jYWxsKGFyZ3VtZW50cywgbGluZSk7CiAgICAgICAgICByZXR1cm4gYW5ndWxhci5zY2VuYXJpby5TcGVjUnVubmVyLgogICAgICAgICAgICBwcm90b3R5cGUuYWRkRnV0dXJlLmFwcGx5KHNjb3BlLCBhcmd1bWVudHMpOwogICAgICAgIH07CiAgICAgICAgc2NvcGUuYWRkRnV0dXJlQWN0aW9uID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5jYWxsKGFyZ3VtZW50cywgbGluZSk7CiAgICAgICAgICByZXR1cm4gYW5ndWxhci5zY2VuYXJpby5TcGVjUnVubmVyLgogICAgICAgICAgICBwcm90b3R5cGUuYWRkRnV0dXJlQWN0aW9uLmFwcGx5KHNjb3BlLCBhcmd1bWVudHMpOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBzY29wZS5kc2xba2V5XS5hcHBseShzY29wZSwgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH0pOwogICAgcnVubmVyLnJ1bihzcGVjLCBmdW5jdGlvbigpIHsKICAgICAgcnVubmVyLiRkZXN0cm95KCk7CiAgICAgIHNwZWNEb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9KTsKICB9LAogIGZ1bmN0aW9uKGVycm9yKSB7CiAgICBpZiAoZXJyb3IpIHsKICAgICAgc2VsZi5lbWl0KCdSdW5uZXJFcnJvcicsIGVycm9yKTsKICAgIH0KICAgIHNlbGYuZW1pdCgnUnVubmVyRW5kJyk7CiAgfSk7Cn07CgovKioKICogVGhpcyBjbGFzcyBpcyB0aGUgInRoaXMiIG9mIHRoZSBpdC9iZWZvcmVFYWNoL2FmdGVyRWFjaCBtZXRob2QuCiAqIFJlc3BvbnNpYmlsaXRpZXM6CiAqICAgLSAidGhpcyIgZm9yIGl0L2JlZm9yZUVhY2gvYWZ0ZXJFYWNoCiAqICAgLSBrZWVwIHN0YXRlIGZvciBzaW5nbGUgaXQvYmVmb3JlRWFjaC9hZnRlckVhY2ggZXhlY3V0aW9uCiAqICAgLSBrZWVwIHRyYWNrIG9mIGFsbCBvZiB0aGUgZnV0dXJlcyB0byBleGVjdXRlCiAqICAgLSBydW4gc2luZ2xlIHNwZWMgKGV4ZWN1dGUgZWFjaCBmdXR1cmUpCiAqLwphbmd1bGFyLnNjZW5hcmlvLlNwZWNSdW5uZXIgPSBmdW5jdGlvbigpIHsKICB0aGlzLmZ1dHVyZXMgPSBbXTsKICB0aGlzLmFmdGVySW5kZXggPSAwOwp9OwoKLyoqCiAqIEV4ZWN1dGVzIGEgc3BlYyB3aGljaCBpcyBhbiBpdCBibG9jayB3aXRoIGFzc29jaWF0ZWQgYmVmb3JlL2FmdGVyIGZ1bmN0aW9ucwogKiBiYXNlZCBvbiB0aGUgZGVzY3JpYmUgbmVzdGluZy4KICoKICogQHBhcmFtIHtPYmplY3R9IHNwZWMgQSBzcGVjIG9iamVjdAogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IHNwZWNEb25lIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHNwZWMgZmluc2hlcy4gRnVuY3Rpb24oZXJyb3IsIGluZGV4KQogKi8KYW5ndWxhci5zY2VuYXJpby5TcGVjUnVubmVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbihzcGVjLCBzcGVjRG9uZSkgewogIHZhciBzZWxmID0gdGhpczsKICB0aGlzLnNwZWMgPSBzcGVjOwoKICB0aGlzLmVtaXQoJ1NwZWNCZWdpbicsIHNwZWMpOwoKICB0cnkgewogICAgc3BlYy5iZWZvcmUuY2FsbCh0aGlzKTsKICAgIHNwZWMuYm9keS5jYWxsKHRoaXMpOwogICAgdGhpcy5hZnRlckluZGV4ID0gdGhpcy5mdXR1cmVzLmxlbmd0aDsKICAgIHNwZWMuYWZ0ZXIuY2FsbCh0aGlzKTsKICB9IGNhdGNoIChlKSB7CiAgICB0aGlzLmVtaXQoJ1NwZWNFcnJvcicsIHNwZWMsIGUpOwogICAgdGhpcy5lbWl0KCdTcGVjRW5kJywgc3BlYyk7CiAgICBzcGVjRG9uZSgpOwogICAgcmV0dXJuOwogIH0KCiAgdmFyIGhhbmRsZUVycm9yID0gZnVuY3Rpb24oZXJyb3IsIGRvbmUpIHsKICAgIGlmIChzZWxmLmVycm9yKSB7CiAgICAgIHJldHVybiBkb25lKCk7CiAgICB9CiAgICBzZWxmLmVycm9yID0gdHJ1ZTsKICAgIGRvbmUobnVsbCwgc2VsZi5hZnRlckluZGV4KTsKICB9OwoKICBhc3luY0ZvckVhY2goCiAgICB0aGlzLmZ1dHVyZXMsCiAgICBmdW5jdGlvbihmdXR1cmUsIGZ1dHVyZURvbmUpIHsKICAgICAgc2VsZi5zdGVwID0gZnV0dXJlOwogICAgICBzZWxmLmVtaXQoJ1N0ZXBCZWdpbicsIHNwZWMsIGZ1dHVyZSk7CiAgICAgIHRyeSB7CiAgICAgICAgZnV0dXJlLmV4ZWN1dGUoZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICAgIGlmIChlcnJvcikgewogICAgICAgICAgICBzZWxmLmVtaXQoJ1N0ZXBGYWlsdXJlJywgc3BlYywgZnV0dXJlLCBlcnJvcik7CiAgICAgICAgICAgIHNlbGYuZW1pdCgnU3RlcEVuZCcsIHNwZWMsIGZ1dHVyZSk7CiAgICAgICAgICAgIHJldHVybiBoYW5kbGVFcnJvcihlcnJvciwgZnV0dXJlRG9uZSk7CiAgICAgICAgICB9CiAgICAgICAgICBzZWxmLmVtaXQoJ1N0ZXBFbmQnLCBzcGVjLCBmdXR1cmUpOwogICAgICAgICAgc2VsZi4kd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1dHVyZURvbmUoKTsgfSwgMCk7CiAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBzZWxmLmVtaXQoJ1N0ZXBFcnJvcicsIHNwZWMsIGZ1dHVyZSwgZSk7CiAgICAgICAgc2VsZi5lbWl0KCdTdGVwRW5kJywgc3BlYywgZnV0dXJlKTsKICAgICAgICBoYW5kbGVFcnJvcihlLCBmdXR1cmVEb25lKTsKICAgICAgfQogICAgfSwKICAgIGZ1bmN0aW9uKGUpIHsKICAgICAgaWYgKGUpIHsKICAgICAgICBzZWxmLmVtaXQoJ1NwZWNFcnJvcicsIHNwZWMsIGUpOwogICAgICB9CiAgICAgIHNlbGYuZW1pdCgnU3BlY0VuZCcsIHNwZWMpOwogICAgICAvLyBDYWxsIGRvbmUgaW4gYSB0aW1lb3V0IHNvIGV4Y2VwdGlvbnMgZG9uJ3QgcmVjdXJzaXZlbHkKICAgICAgLy8gY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAgIHNlbGYuJHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzcGVjRG9uZSgpOyB9LCAwKTsKICAgIH0KICApOwp9OwoKLyoqCiAqIEFkZHMgYSBuZXcgZnV0dXJlIGFjdGlvbi4KICoKICogTm90ZTogRG8gbm90IHBhc3MgbGluZSBtYW51YWxseS4gSXQgaGFwcGVucyBhdXRvbWF0aWNhbGx5LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBmdXR1cmUKICogQHBhcmFtIHtmdW5jdGlvbigpfSBiZWhhdmlvciBCZWhhdmlvciBvZiB0aGUgZnV0dXJlCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gbGluZSBmbigpIHRoYXQgcmV0dXJucyBmaWxlL2xpbmUgbnVtYmVyCiAqLwphbmd1bGFyLnNjZW5hcmlvLlNwZWNSdW5uZXIucHJvdG90eXBlLmFkZEZ1dHVyZSA9IGZ1bmN0aW9uKG5hbWUsIGJlaGF2aW9yLCBsaW5lKSB7CiAgdmFyIGZ1dHVyZSA9IG5ldyBhbmd1bGFyLnNjZW5hcmlvLkZ1dHVyZShuYW1lLCBhbmd1bGFyLmJpbmQodGhpcywgYmVoYXZpb3IpLCBsaW5lKTsKICB0aGlzLmZ1dHVyZXMucHVzaChmdXR1cmUpOwogIHJldHVybiBmdXR1cmU7Cn07CgovKioKICogQWRkcyBhIG5ldyBmdXR1cmUgYWN0aW9uIHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBhcHBsaWNhdGlvbiB3aW5kb3cuCiAqCiAqIE5vdGU6IERvIG5vdCBwYXNzIGxpbmUgbWFudWFsbHkuIEl0IGhhcHBlbnMgYXV0b21hdGljYWxseS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZnV0dXJlCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gYmVoYXZpb3IgQmVoYXZpb3Igb2YgdGhlIGZ1dHVyZQogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGxpbmUgZm4oKSB0aGF0IHJldHVybnMgZmlsZS9saW5lIG51bWJlcgogKi8KYW5ndWxhci5zY2VuYXJpby5TcGVjUnVubmVyLnByb3RvdHlwZS5hZGRGdXR1cmVBY3Rpb24gPSBmdW5jdGlvbihuYW1lLCBiZWhhdmlvciwgbGluZSkgewogIHZhciBzZWxmID0gdGhpczsKICB2YXIgTkcgPSAvXFtuZ1xcXDovOwogIHJldHVybiB0aGlzLmFkZEZ1dHVyZShuYW1lLCBmdW5jdGlvbihkb25lKSB7CiAgICB0aGlzLmFwcGxpY2F0aW9uLmV4ZWN1dGVBY3Rpb24oZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50KSB7CgogICAgICAvL1RPRE8oZXNwcmVobik6IFJlZmFjdG9yIHRoaXMgc28gaXQgZG9lc24ndCBuZWVkIHRvIGJlIGluIGhlcmUuCiAgICAgICRkb2N1bWVudC5lbGVtZW50cyA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgICAgIHNlbGVjdG9yID0gKHNlbGYuc2VsZWN0b3IgfHwgJycpICsgJyAnICsgKHNlbGVjdG9yIHx8ICcnKTsKICAgICAgICBzZWxlY3RvciA9IF9qUXVlcnkudHJpbShzZWxlY3RvcikgfHwgJyonOwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChhcmdzLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZSgnJCcgKyAoaW5kZXggKyAxKSwgdmFsdWUpOwogICAgICAgIH0pOwogICAgICAgIHZhciByZXN1bHQgPSAkZG9jdW1lbnQuZmluZChzZWxlY3Rvcik7CiAgICAgICAgaWYgKHNlbGVjdG9yLm1hdGNoKE5HKSkgewogICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmFkZChzZWxlY3Rvci5yZXBsYWNlKE5HLCAnW25nLScpLCAkZG9jdW1lbnQpOwogICAgICAgIH0KICAgICAgICBpZiAoIXJlc3VsdC5sZW5ndGgpIHsKICAgICAgICAgIHRocm93IHsKICAgICAgICAgICAgdHlwZTogJ3NlbGVjdG9yJywKICAgICAgICAgICAgbWVzc2FnZTogJ1NlbGVjdG9yICcgKyBzZWxlY3RvciArICcgZGlkIG5vdCBtYXRjaCBhbnkgZWxlbWVudHMuJwogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CgogICAgICB0cnkgewogICAgICAgIGJlaGF2aW9yLmNhbGwoc2VsZiwgJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKTsKICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgaWYgKGUudHlwZSAmJiBlLnR5cGUgPT09ICdzZWxlY3RvcicpIHsKICAgICAgICAgIGRvbmUoZS5tZXNzYWdlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0sIGxpbmUpOwp9OwoKLyoqCiAqIFNoYXJlZCBEU0wgc3RhdGVtZW50cyB0aGF0IGFyZSB1c2VmdWwgdG8gYWxsIHNjZW5hcmlvcy4KICovCgogLyoqCiAqIFVzYWdlOgogKiAgICBwYXVzZSgpIHBhdXNlcyB1bnRpbCB5b3UgY2FsbCByZXN1bWUoKSBpbiB0aGUgY29uc29sZQogKi8KYW5ndWxhci5zY2VuYXJpby5kc2woJ3BhdXNlJywgZnVuY3Rpb24oKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuYWRkRnV0dXJlKCdwYXVzaW5nIGZvciB5b3UgdG8gcmVzdW1lJywgZnVuY3Rpb24oZG9uZSkgewogICAgICB0aGlzLmVtaXQoJ0ludGVyYWN0aXZlUGF1c2UnLCB0aGlzLnNwZWMsIHRoaXMuc3RlcCk7CiAgICAgIHRoaXMuJHdpbmRvdy5yZXN1bWUgPSBmdW5jdGlvbigpIHsgZG9uZSgpOyB9OwogICAgfSk7CiAgfTsKfSk7CgovKioKICogVXNhZ2U6CiAqICAgIHNsZWVwKHNlY29uZHMpIHBhdXNlcyB0aGUgdGVzdCBmb3Igc3BlY2lmaWVkIG51bWJlciBvZiBzZWNvbmRzCiAqLwphbmd1bGFyLnNjZW5hcmlvLmRzbCgnc2xlZXAnLCBmdW5jdGlvbigpIHsKICByZXR1cm4gZnVuY3Rpb24odGltZSkgewogICAgcmV0dXJuIHRoaXMuYWRkRnV0dXJlKCdzbGVlcCBmb3IgJyArIHRpbWUgKyAnIHNlY29uZHMnLCBmdW5jdGlvbihkb25lKSB7CiAgICAgIHRoaXMuJHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBkb25lKG51bGwsIHRpbWUgKiAxMDAwKTsgfSwgdGltZSAqIDEwMDApOwogICAgfSk7CiAgfTsKfSk7CgovKioKICogVXNhZ2U6CiAqICAgIGJyb3dzZXIoKS5uYXZpZ2F0ZVRvKHVybCkgTG9hZHMgdGhlIHVybCBpbnRvIHRoZSBmcmFtZQogKiAgICBicm93c2VyKCkubmF2aWdhdGVUbyh1cmwsIGZuKSB3aGVyZSBmbih1cmwpIGlzIGNhbGxlZCBhbmQgcmV0dXJucyB0aGUgVVJMIHRvIG5hdmlnYXRlIHRvCiAqICAgIGJyb3dzZXIoKS5yZWxvYWQoKSByZWZyZXNoIHRoZSBwYWdlIChyZWxvYWQgdGhlIHNhbWUgVVJMKQogKiAgICBicm93c2VyKCkud2luZG93LmhyZWYoKSB3aW5kb3cubG9jYXRpb24uaHJlZgogKiAgICBicm93c2VyKCkud2luZG93LnBhdGgoKSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUKICogICAgYnJvd3NlcigpLndpbmRvdy5zZWFyY2goKSB3aW5kb3cubG9jYXRpb24uc2VhcmNoCiAqICAgIGJyb3dzZXIoKS53aW5kb3cuaGFzaCgpIHdpbmRvdy5sb2NhdGlvbi5oYXNoIHdpdGhvdXQgIyBwcmVmaXgKICogICAgYnJvd3NlcigpLmxvY2F0aW9uKCkudXJsKCkgc2VlIG5nLiRsb2NhdGlvbiN1cmwKICogICAgYnJvd3NlcigpLmxvY2F0aW9uKCkucGF0aCgpIHNlZSBuZy4kbG9jYXRpb24jcGF0aAogKiAgICBicm93c2VyKCkubG9jYXRpb24oKS5zZWFyY2goKSBzZWUgbmcuJGxvY2F0aW9uI3NlYXJjaAogKiAgICBicm93c2VyKCkubG9jYXRpb24oKS5oYXNoKCkgc2VlIG5nLiRsb2NhdGlvbiNoYXNoCiAqLwphbmd1bGFyLnNjZW5hcmlvLmRzbCgnYnJvd3NlcicsIGZ1bmN0aW9uKCkgewogIHZhciBjaGFpbiA9IHt9OwoKICBjaGFpbi5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24odXJsLCBkZWxlZ2F0ZSkgewogICAgdmFyIGFwcGxpY2F0aW9uID0gdGhpcy5hcHBsaWNhdGlvbjsKICAgIHJldHVybiB0aGlzLmFkZEZ1dHVyZSgiYnJvd3NlciBuYXZpZ2F0ZSB0byAnIiArIHVybCArICInIiwgZnVuY3Rpb24oZG9uZSkgewogICAgICBpZiAoZGVsZWdhdGUpIHsKICAgICAgICB1cmwgPSBkZWxlZ2F0ZS5jYWxsKHRoaXMsIHVybCk7CiAgICAgIH0KICAgICAgYXBwbGljYXRpb24ubmF2aWdhdGVUbyh1cmwsIGZ1bmN0aW9uKCkgewogICAgICAgIGRvbmUobnVsbCwgdXJsKTsKICAgICAgfSwgZG9uZSk7CiAgICB9KTsKICB9OwoKICBjaGFpbi5yZWxvYWQgPSBmdW5jdGlvbigpIHsKICAgIHZhciBhcHBsaWNhdGlvbiA9IHRoaXMuYXBwbGljYXRpb247CiAgICByZXR1cm4gdGhpcy5hZGRGdXR1cmVBY3Rpb24oJ2Jyb3dzZXIgcmVsb2FkJywgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKSB7CiAgICAgIHZhciBocmVmID0gJHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgICBhcHBsaWNhdGlvbi5uYXZpZ2F0ZVRvKGhyZWYsIGZ1bmN0aW9uKCkgewogICAgICAgIGRvbmUobnVsbCwgaHJlZik7CiAgICAgIH0sIGRvbmUpOwogICAgfSk7CiAgfTsKCiAgY2hhaW4ud2luZG93ID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgYXBpID0ge307CgogICAgYXBpLmhyZWYgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuYWRkRnV0dXJlQWN0aW9uKCd3aW5kb3cubG9jYXRpb24uaHJlZicsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCwgZG9uZSkgewogICAgICAgIGRvbmUobnVsbCwgJHdpbmRvdy5sb2NhdGlvbi5ocmVmKTsKICAgICAgfSk7CiAgICB9OwoKICAgIGFwaS5wYXRoID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmFkZEZ1dHVyZUFjdGlvbignd2luZG93LmxvY2F0aW9uLnBhdGgnLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQsIGRvbmUpIHsKICAgICAgICBkb25lKG51bGwsICR3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpOwogICAgICB9KTsKICAgIH07CgogICAgYXBpLnNlYXJjaCA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5hZGRGdXR1cmVBY3Rpb24oJ3dpbmRvdy5sb2NhdGlvbi5zZWFyY2gnLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQsIGRvbmUpIHsKICAgICAgICBkb25lKG51bGwsICR3aW5kb3cubG9jYXRpb24uc2VhcmNoKTsKICAgICAgfSk7CiAgICB9OwoKICAgIGFwaS5oYXNoID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmFkZEZ1dHVyZUFjdGlvbignd2luZG93LmxvY2F0aW9uLmhhc2gnLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQsIGRvbmUpIHsKICAgICAgICBkb25lKG51bGwsICR3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpKTsKICAgICAgfSk7CiAgICB9OwoKICAgIHJldHVybiBhcGk7CiAgfTsKCiAgY2hhaW4ubG9jYXRpb24gPSBmdW5jdGlvbigpIHsKICAgIHZhciBhcGkgPSB7fTsKCiAgICBhcGkudXJsID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmFkZEZ1dHVyZUFjdGlvbignJGxvY2F0aW9uLnVybCgpJywgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKSB7CiAgICAgICAgZG9uZShudWxsLCAkZG9jdW1lbnQuaW5qZWN0b3IoKS5nZXQoJyRsb2NhdGlvbicpLnVybCgpKTsKICAgICAgfSk7CiAgICB9OwoKICAgIGFwaS5wYXRoID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmFkZEZ1dHVyZUFjdGlvbignJGxvY2F0aW9uLnBhdGgoKScsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCwgZG9uZSkgewogICAgICAgIGRvbmUobnVsbCwgJGRvY3VtZW50LmluamVjdG9yKCkuZ2V0KCckbG9jYXRpb24nKS5wYXRoKCkpOwogICAgICB9KTsKICAgIH07CgogICAgYXBpLnNlYXJjaCA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5hZGRGdXR1cmVBY3Rpb24oJyRsb2NhdGlvbi5zZWFyY2goKScsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCwgZG9uZSkgewogICAgICAgIGRvbmUobnVsbCwgJGRvY3VtZW50LmluamVjdG9yKCkuZ2V0KCckbG9jYXRpb24nKS5zZWFyY2goKSk7CiAgICAgIH0pOwogICAgfTsKCiAgICBhcGkuaGFzaCA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5hZGRGdXR1cmVBY3Rpb24oJyRsb2NhdGlvbi5oYXNoKCknLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQsIGRvbmUpIHsKICAgICAgICBkb25lKG51bGwsICRkb2N1bWVudC5pbmplY3RvcigpLmdldCgnJGxvY2F0aW9uJykuaGFzaCgpKTsKICAgICAgfSk7CiAgICB9OwoKICAgIHJldHVybiBhcGk7CiAgfTsKCiAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGNoYWluOwogIH07Cn0pOwoKLyoqCiAqIFVzYWdlOgogKiAgICBleHBlY3QoZnV0dXJlKS57bWF0Y2hlcn0gd2hlcmUgbWF0Y2hlciBpcyBvbmUgb2YgdGhlIG1hdGNoZXJzIGRlZmluZWQKICogICAgd2l0aCBhbmd1bGFyLnNjZW5hcmlvLm1hdGNoZXIKICoKICogZXguIGV4cGVjdChiaW5kaW5nKCJuYW1lIikpLnRvRXF1YWwoIkVsbGlvdHQiKQogKi8KYW5ndWxhci5zY2VuYXJpby5kc2woJ2V4cGVjdCcsIGZ1bmN0aW9uKCkgewogIHZhciBjaGFpbiA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBhbmd1bGFyLnNjZW5hcmlvLm1hdGNoZXIpOwoKICBjaGFpbi5ub3QgPSBmdW5jdGlvbigpIHsKICAgIHRoaXMuaW52ZXJzZSA9IHRydWU7CiAgICByZXR1cm4gY2hhaW47CiAgfTsKCiAgcmV0dXJuIGZ1bmN0aW9uKGZ1dHVyZSkgewogICAgdGhpcy5mdXR1cmUgPSBmdXR1cmU7CiAgICByZXR1cm4gY2hhaW47CiAgfTsKfSk7CgovKioKICogVXNhZ2U6CiAqICAgIHVzaW5nKHNlbGVjdG9yLCBsYWJlbCkgc2NvcGVzIHRoZSBuZXh0IERTTCBlbGVtZW50IHNlbGVjdGlvbgogKgogKiBleC4KICogICB1c2luZygnI2ZvbycsICInRm9vJyB0ZXh0IGZpZWxkIikuaW5wdXQoJ2JhcicpCiAqLwphbmd1bGFyLnNjZW5hcmlvLmRzbCgndXNpbmcnLCBmdW5jdGlvbigpIHsKICByZXR1cm4gZnVuY3Rpb24oc2VsZWN0b3IsIGxhYmVsKSB7CiAgICB0aGlzLnNlbGVjdG9yID0gX2pRdWVyeS50cmltKCh0aGlzLnNlbGVjdG9yfHwnJykgKyAnICcgKyBzZWxlY3Rvcik7CiAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhsYWJlbCkgJiYgbGFiZWwubGVuZ3RoKSB7CiAgICAgIHRoaXMubGFiZWwgPSBsYWJlbCArICcgKCAnICsgdGhpcy5zZWxlY3RvciArICcgKSc7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmxhYmVsID0gdGhpcy5zZWxlY3RvcjsKICAgIH0KICAgIHJldHVybiB0aGlzLmRzbDsKICB9Owp9KTsKCi8qKgogKiBVc2FnZToKICogICAgYmluZGluZyhuYW1lKSByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgbWF0Y2hpbmcgYmluZGluZwogKi8KYW5ndWxhci5zY2VuYXJpby5kc2woJ2JpbmRpbmcnLCBmdW5jdGlvbigpIHsKICByZXR1cm4gZnVuY3Rpb24obmFtZSkgewogICAgcmV0dXJuIHRoaXMuYWRkRnV0dXJlQWN0aW9uKCJzZWxlY3QgYmluZGluZyAnIiArIG5hbWUgKyAiJyIsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCwgZG9uZSkgewogICAgICB2YXIgdmFsdWVzID0gJGRvY3VtZW50LmVsZW1lbnRzKCkuYmluZGluZ3MoJHdpbmRvdy5hbmd1bGFyLmVsZW1lbnQsIG5hbWUpOwogICAgICBpZiAoIXZhbHVlcy5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gZG9uZSgiQmluZGluZyBzZWxlY3RvciAnIiArIG5hbWUgKyAiJyBkaWQgbm90IG1hdGNoLiIpOwogICAgICB9CiAgICAgIGRvbmUobnVsbCwgdmFsdWVzWzBdKTsKICAgIH0pOwogIH07Cn0pOwoKLyoqCiAqIFVzYWdlOgogKiAgICBpbnB1dChuYW1lKS5lbnRlcih2YWx1ZSkgZW50ZXJzIHZhbHVlIGluIGlucHV0IHdpdGggc3BlY2lmaWVkIG5hbWUKICogICAgaW5wdXQobmFtZSkuY2hlY2soKSBjaGVja3MgY2hlY2tib3gKICogICAgaW5wdXQobmFtZSkuc2VsZWN0KHZhbHVlKSBzZWxlY3RzIHRoZSByYWRpbyBidXR0b24gd2l0aCBzcGVjaWZpZWQgbmFtZS92YWx1ZQogKiAgICBpbnB1dChuYW1lKS52YWwoKSByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQuCiAqLwphbmd1bGFyLnNjZW5hcmlvLmRzbCgnaW5wdXQnLCBmdW5jdGlvbigpIHsKICB2YXIgY2hhaW4gPSB7fTsKICB2YXIgc3VwcG9ydElucHV0RXZlbnQgPSAnb25pbnB1dCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgogIGNoYWluLmVudGVyID0gZnVuY3Rpb24odmFsdWUsIGV2ZW50KSB7CiAgICByZXR1cm4gdGhpcy5hZGRGdXR1cmVBY3Rpb24oImlucHV0ICciICsgdGhpcy5uYW1lICsgIicgZW50ZXIgJyIgKyB2YWx1ZSArICInIiwgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKSB7CiAgICAgIHZhciBpbnB1dCA9ICRkb2N1bWVudC5lbGVtZW50cygnW25nXFw6bW9kZWw9IiQxIl0nLCB0aGlzLm5hbWUpLmZpbHRlcignOmlucHV0Jyk7CiAgICAgIGlucHV0LnZhbCh2YWx1ZSk7CiAgICAgIGlucHV0LnRyaWdnZXIoZXZlbnQgfHwgc3VwcG9ydElucHV0RXZlbnQgJiYgJ2lucHV0JyB8fCAnY2hhbmdlJyk7CiAgICAgIGRvbmUoKTsKICAgIH0pOwogIH07CgogIGNoYWluLmNoZWNrID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5hZGRGdXR1cmVBY3Rpb24oImNoZWNrYm94ICciICsgdGhpcy5uYW1lICsgIicgdG9nZ2xlIiwgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKSB7CiAgICAgIHZhciBpbnB1dCA9ICRkb2N1bWVudC5lbGVtZW50cygnW25nXFw6bW9kZWw9IiQxIl0nLCB0aGlzLm5hbWUpLmZpbHRlcignOmNoZWNrYm94Jyk7CiAgICAgIGlucHV0LnRyaWdnZXIoJ2NsaWNrJyk7CiAgICAgIGRvbmUoKTsKICAgIH0pOwogIH07CgogIGNoYWluLnNlbGVjdCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdGhpcy5hZGRGdXR1cmVBY3Rpb24oInJhZGlvIGJ1dHRvbiAnIiArIHRoaXMubmFtZSArICInIHRvZ2dsZSAnIiArIHZhbHVlICsgIiciLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQsIGRvbmUpIHsKICAgICAgdmFyIGlucHV0ID0gJGRvY3VtZW50LgogICAgICAgIGVsZW1lbnRzKCdbbmdcXDptb2RlbD0iJDEiXVt2YWx1ZT0iJDIiXScsIHRoaXMubmFtZSwgdmFsdWUpLmZpbHRlcignOnJhZGlvJyk7CiAgICAgIGlucHV0LnRyaWdnZXIoJ2NsaWNrJyk7CiAgICAgIGRvbmUoKTsKICAgIH0pOwogIH07CgogIGNoYWluLnZhbCA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuYWRkRnV0dXJlQWN0aW9uKCJyZXR1cm4gaW5wdXQgdmFsIiwgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKSB7CiAgICAgIHZhciBpbnB1dCA9ICRkb2N1bWVudC5lbGVtZW50cygnW25nXFw6bW9kZWw9IiQxIl0nLCB0aGlzLm5hbWUpLmZpbHRlcignOmlucHV0Jyk7CiAgICAgIGRvbmUobnVsbCxpbnB1dC52YWwoKSk7CiAgICB9KTsKICB9OwoKICByZXR1cm4gZnVuY3Rpb24obmFtZSkgewogICAgdGhpcy5uYW1lID0gbmFtZTsKICAgIHJldHVybiBjaGFpbjsKICB9Owp9KTsKCgovKioKICogVXNhZ2U6CiAqICAgIHJlcGVhdGVyKCcjcHJvZHVjdHMgdGFibGUnLCAnUHJvZHVjdCBMaXN0JykuY291bnQoKSBudW1iZXIgb2Ygcm93cwogKiAgICByZXBlYXRlcignI3Byb2R1Y3RzIHRhYmxlJywgJ1Byb2R1Y3QgTGlzdCcpLnJvdygxKSBhbGwgYmluZGluZ3MgaW4gcm93IGFzIGFuIGFycmF5CiAqICAgIHJlcGVhdGVyKCcjcHJvZHVjdHMgdGFibGUnLCAnUHJvZHVjdCBMaXN0JykuY29sdW1uKCdwcm9kdWN0Lm5hbWUnKSBhbGwgdmFsdWVzIGFjcm9zcyBhbGwgcm93cyBpbiBhbiBhcnJheQogKi8KYW5ndWxhci5zY2VuYXJpby5kc2woJ3JlcGVhdGVyJywgZnVuY3Rpb24oKSB7CiAgdmFyIGNoYWluID0ge307CgogIGNoYWluLmNvdW50ID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5hZGRGdXR1cmVBY3Rpb24oInJlcGVhdGVyICciICsgdGhpcy5sYWJlbCArICInIGNvdW50IiwgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKSB7CiAgICAgIHRyeSB7CiAgICAgICAgZG9uZShudWxsLCAkZG9jdW1lbnQuZWxlbWVudHMoKS5sZW5ndGgpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgZG9uZShudWxsLCAwKTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgY2hhaW4uY29sdW1uID0gZnVuY3Rpb24oYmluZGluZykgewogICAgcmV0dXJuIHRoaXMuYWRkRnV0dXJlQWN0aW9uKCJyZXBlYXRlciAnIiArIHRoaXMubGFiZWwgKyAiJyBjb2x1bW4gJyIgKyBiaW5kaW5nICsgIiciLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQsIGRvbmUpIHsKICAgICAgZG9uZShudWxsLCAkZG9jdW1lbnQuZWxlbWVudHMoKS5iaW5kaW5ncygkd2luZG93LmFuZ3VsYXIuZWxlbWVudCwgYmluZGluZykpOwogICAgfSk7CiAgfTsKCiAgY2hhaW4ucm93ID0gZnVuY3Rpb24oaW5kZXgpIHsKICAgIHJldHVybiB0aGlzLmFkZEZ1dHVyZUFjdGlvbigicmVwZWF0ZXIgJyIgKyB0aGlzLmxhYmVsICsgIicgcm93ICciICsgaW5kZXggKyAiJyIsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCwgZG9uZSkgewogICAgICB2YXIgbWF0Y2hlcyA9ICRkb2N1bWVudC5lbGVtZW50cygpLnNsaWNlKGluZGV4LCBpbmRleCArIDEpOwogICAgICBpZiAoIW1hdGNoZXMubGVuZ3RoKQogICAgICAgIHJldHVybiBkb25lKCdyb3cgJyArIGluZGV4ICsgJyBvdXQgb2YgYm91bmRzJyk7CiAgICAgIGRvbmUobnVsbCwgbWF0Y2hlcy5iaW5kaW5ncygkd2luZG93LmFuZ3VsYXIuZWxlbWVudCkpOwogICAgfSk7CiAgfTsKCiAgcmV0dXJuIGZ1bmN0aW9uKHNlbGVjdG9yLCBsYWJlbCkgewogICAgdGhpcy5kc2wudXNpbmcoc2VsZWN0b3IsIGxhYmVsKTsKICAgIHJldHVybiBjaGFpbjsKICB9Owp9KTsKCi8qKgogKiBVc2FnZToKICogICAgc2VsZWN0KG5hbWUpLm9wdGlvbigndmFsdWUnKSBzZWxlY3Qgb25lIG9wdGlvbgogKiAgICBzZWxlY3QobmFtZSkub3B0aW9ucygndmFsdWUxJywgJ3ZhbHVlMicsIC4uLikgc2VsZWN0IG9wdGlvbnMgZnJvbSBhIG11bHRpIHNlbGVjdAogKi8KYW5ndWxhci5zY2VuYXJpby5kc2woJ3NlbGVjdCcsIGZ1bmN0aW9uKCkgewogIHZhciBjaGFpbiA9IHt9OwoKICBjaGFpbi5vcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIHRoaXMuYWRkRnV0dXJlQWN0aW9uKCJzZWxlY3QgJyIgKyB0aGlzLm5hbWUgKyAiJyBvcHRpb24gJyIgKyB2YWx1ZSArICInIiwgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKSB7CiAgICAgIHZhciBzZWxlY3QgPSAkZG9jdW1lbnQuZWxlbWVudHMoJ3NlbGVjdFtuZ1xcOm1vZGVsPSIkMSJdJywgdGhpcy5uYW1lKTsKICAgICAgdmFyIG9wdGlvbiA9IHNlbGVjdC5maW5kKCdvcHRpb25bdmFsdWU9IicgKyB2YWx1ZSArICciXScpOwogICAgICBpZiAob3B0aW9uLmxlbmd0aCkgewogICAgICAgIHNlbGVjdC52YWwodmFsdWUpOwogICAgICB9IGVsc2UgewogICAgICAgIG9wdGlvbiA9IHNlbGVjdC5maW5kKCdvcHRpb246Y29udGFpbnMoIicgKyB2YWx1ZSArICciKScpOwogICAgICAgIGlmIChvcHRpb24ubGVuZ3RoKSB7CiAgICAgICAgICBzZWxlY3QudmFsKG9wdGlvbi52YWwoKSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHNlbGVjdC50cmlnZ2VyKCdjaGFuZ2UnKTsKICAgICAgZG9uZSgpOwogICAgfSk7CiAgfTsKCiAgY2hhaW4ub3B0aW9ucyA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHZhbHVlcyA9IGFyZ3VtZW50czsKICAgIHJldHVybiB0aGlzLmFkZEZ1dHVyZUFjdGlvbigic2VsZWN0ICciICsgdGhpcy5uYW1lICsgIicgb3B0aW9ucyAnIiArIHZhbHVlcyArICInIiwgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKSB7CiAgICAgIHZhciBzZWxlY3QgPSAkZG9jdW1lbnQuZWxlbWVudHMoJ3NlbGVjdFttdWx0aXBsZV1bbmdcXDptb2RlbD0iJDEiXScsIHRoaXMubmFtZSk7CiAgICAgIHNlbGVjdC52YWwodmFsdWVzKTsKICAgICAgc2VsZWN0LnRyaWdnZXIoJ2NoYW5nZScpOwogICAgICBkb25lKCk7CiAgICB9KTsKICB9OwoKICByZXR1cm4gZnVuY3Rpb24obmFtZSkgewogICAgdGhpcy5uYW1lID0gbmFtZTsKICAgIHJldHVybiBjaGFpbjsKICB9Owp9KTsKCi8qKgogKiBVc2FnZToKICogICAgZWxlbWVudChzZWxlY3RvciwgbGFiZWwpLmNvdW50KCkgZ2V0IHRoZSBudW1iZXIgb2YgZWxlbWVudHMgdGhhdCBtYXRjaCBzZWxlY3RvcgogKiAgICBlbGVtZW50KHNlbGVjdG9yLCBsYWJlbCkuY2xpY2soKSBjbGlja3MgYW4gZWxlbWVudAogKiAgICBlbGVtZW50KHNlbGVjdG9yLCBsYWJlbCkucXVlcnkoZm4pIGV4ZWN1dGVzIGZuKHNlbGVjdGVkRWxlbWVudHMsIGRvbmUpCiAqICAgIGVsZW1lbnQoc2VsZWN0b3IsIGxhYmVsKS57bWV0aG9kfSgpIGdldHMgdGhlIHZhbHVlIChhcyBkZWZpbmVkIGJ5IGpRdWVyeSwgZXguIHZhbCkKICogICAgZWxlbWVudChzZWxlY3RvciwgbGFiZWwpLnttZXRob2R9KHZhbHVlKSBzZXRzIHRoZSB2YWx1ZSAoYXMgZGVmaW5lZCBieSBqUXVlcnksIGV4LiB2YWwpCiAqICAgIGVsZW1lbnQoc2VsZWN0b3IsIGxhYmVsKS57bWV0aG9kfShrZXkpIGdldHMgdGhlIHZhbHVlIChhcyBkZWZpbmVkIGJ5IGpRdWVyeSwgZXguIGF0dHIpCiAqICAgIGVsZW1lbnQoc2VsZWN0b3IsIGxhYmVsKS57bWV0aG9kfShrZXksIHZhbHVlKSBzZXRzIHRoZSB2YWx1ZSAoYXMgZGVmaW5lZCBieSBqUXVlcnksIGV4LiBhdHRyKQogKi8KYW5ndWxhci5zY2VuYXJpby5kc2woJ2VsZW1lbnQnLCBmdW5jdGlvbigpIHsKICB2YXIgS0VZX1ZBTFVFX01FVEhPRFMgPSBbJ2F0dHInLCAnY3NzJywgJ3Byb3AnXTsKICB2YXIgVkFMVUVfTUVUSE9EUyA9IFsKICAgICd2YWwnLCAndGV4dCcsICdodG1sJywgJ2hlaWdodCcsICdpbm5lckhlaWdodCcsICdvdXRlckhlaWdodCcsICd3aWR0aCcsCiAgICAnaW5uZXJXaWR0aCcsICdvdXRlcldpZHRoJywgJ3Bvc2l0aW9uJywgJ3Njcm9sbExlZnQnLCAnc2Nyb2xsVG9wJywgJ29mZnNldCcKICBdOwogIHZhciBjaGFpbiA9IHt9OwoKICBjaGFpbi5jb3VudCA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuYWRkRnV0dXJlQWN0aW9uKCJlbGVtZW50ICciICsgdGhpcy5sYWJlbCArICInIGNvdW50IiwgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKSB7CiAgICAgIHRyeSB7CiAgICAgICAgZG9uZShudWxsLCAkZG9jdW1lbnQuZWxlbWVudHMoKS5sZW5ndGgpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgZG9uZShudWxsLCAwKTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgY2hhaW4uY2xpY2sgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmFkZEZ1dHVyZUFjdGlvbigiZWxlbWVudCAnIiArIHRoaXMubGFiZWwgKyAiJyBjbGljayIsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCwgZG9uZSkgewogICAgICB2YXIgZWxlbWVudHMgPSAkZG9jdW1lbnQuZWxlbWVudHMoKTsKICAgICAgdmFyIGhyZWYgPSBlbGVtZW50cy5hdHRyKCdocmVmJyk7CiAgICAgIHZhciBldmVudFByb2Nlc3NEZWZhdWx0ID0gZWxlbWVudHMudHJpZ2dlcignY2xpY2snKVswXTsKCiAgICAgIGlmIChocmVmICYmIGVsZW1lbnRzWzBdLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdBJyAmJiBldmVudFByb2Nlc3NEZWZhdWx0KSB7CiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbi5uYXZpZ2F0ZVRvKGhyZWYsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZG9uZSgpOwogICAgICAgIH0sIGRvbmUpOwogICAgICB9IGVsc2UgewogICAgICAgIGRvbmUoKTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgY2hhaW4ucXVlcnkgPSBmdW5jdGlvbihmbikgewogICAgcmV0dXJuIHRoaXMuYWRkRnV0dXJlQWN0aW9uKCdlbGVtZW50ICcgKyB0aGlzLmxhYmVsICsgJyBjdXN0b20gcXVlcnknLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQsIGRvbmUpIHsKICAgICAgZm4uY2FsbCh0aGlzLCAkZG9jdW1lbnQuZWxlbWVudHMoKSwgZG9uZSk7CiAgICB9KTsKICB9OwoKICBhbmd1bGFyLmZvckVhY2goS0VZX1ZBTFVFX01FVEhPRFMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHsKICAgIGNoYWluW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsKICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsCiAgICAgICAgICBmdXR1cmVOYW1lID0gKGFyZ3MubGVuZ3RoID09IDEpCiAgICAgICAgICAgICAgPyAiZWxlbWVudCAnIiArIHRoaXMubGFiZWwgKyAiJyBnZXQgIiArIG1ldGhvZE5hbWUgKyAiICciICsgbmFtZSArICInIgogICAgICAgICAgICAgIDogImVsZW1lbnQgJyIgKyB0aGlzLmxhYmVsICsgIicgc2V0ICIgKyBtZXRob2ROYW1lICsgIiAnIiArIG5hbWUgKyAiJyB0byAiICsgIiciICsgdmFsdWUgKyAiJyI7CgogICAgICByZXR1cm4gdGhpcy5hZGRGdXR1cmVBY3Rpb24oZnV0dXJlTmFtZSwgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKSB7CiAgICAgICAgdmFyIGVsZW1lbnQgPSAkZG9jdW1lbnQuZWxlbWVudHMoKTsKICAgICAgICBkb25lKG51bGwsIGVsZW1lbnRbbWV0aG9kTmFtZV0uYXBwbHkoZWxlbWVudCwgYXJncykpOwogICAgICB9KTsKICAgIH07CiAgfSk7CgogIGFuZ3VsYXIuZm9yRWFjaChWQUxVRV9NRVRIT0RTLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7CiAgICBjaGFpblttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLAogICAgICAgICAgZnV0dXJlTmFtZSA9IChhcmdzLmxlbmd0aCA9PSAwKQogICAgICAgICAgICAgID8gImVsZW1lbnQgJyIgKyB0aGlzLmxhYmVsICsgIicgIiArIG1ldGhvZE5hbWUKICAgICAgICAgICAgICA6IGZ1dHVyZU5hbWUgPSAiZWxlbWVudCAnIiArIHRoaXMubGFiZWwgKyAiJyBzZXQgIiArIG1ldGhvZE5hbWUgKyAiIHRvICciICsgdmFsdWUgKyAiJyI7CgogICAgICByZXR1cm4gdGhpcy5hZGRGdXR1cmVBY3Rpb24oZnV0dXJlTmFtZSwgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCBkb25lKSB7CiAgICAgICAgdmFyIGVsZW1lbnQgPSAkZG9jdW1lbnQuZWxlbWVudHMoKTsKICAgICAgICBkb25lKG51bGwsIGVsZW1lbnRbbWV0aG9kTmFtZV0uYXBwbHkoZWxlbWVudCwgYXJncykpOwogICAgICB9KTsKICAgIH07CiAgfSk7CgogIHJldHVybiBmdW5jdGlvbihzZWxlY3RvciwgbGFiZWwpIHsKICAgIHRoaXMuZHNsLnVzaW5nKHNlbGVjdG9yLCBsYWJlbCk7CiAgICByZXR1cm4gY2hhaW47CiAgfTsKfSk7CgovKioKICogTWF0Y2hlcnMgZm9yIGltcGxlbWVudGluZyBzcGVjcy4gRm9sbG93cyB0aGUgSmFzbWluZSBzcGVjIGNvbnZlbnRpb25zLgogKi8KCmFuZ3VsYXIuc2NlbmFyaW8ubWF0Y2hlcigndG9FcXVhbCcsIGZ1bmN0aW9uKGV4cGVjdGVkKSB7CiAgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKHRoaXMuYWN0dWFsLCBleHBlY3RlZCk7Cn0pOwoKYW5ndWxhci5zY2VuYXJpby5tYXRjaGVyKCd0b0JlJywgZnVuY3Rpb24oZXhwZWN0ZWQpIHsKICByZXR1cm4gdGhpcy5hY3R1YWwgPT09IGV4cGVjdGVkOwp9KTsKCmFuZ3VsYXIuc2NlbmFyaW8ubWF0Y2hlcigndG9CZURlZmluZWQnLCBmdW5jdGlvbigpIHsKICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQodGhpcy5hY3R1YWwpOwp9KTsKCmFuZ3VsYXIuc2NlbmFyaW8ubWF0Y2hlcigndG9CZVRydXRoeScsIGZ1bmN0aW9uKCkgewogIHJldHVybiB0aGlzLmFjdHVhbDsKfSk7Cgphbmd1bGFyLnNjZW5hcmlvLm1hdGNoZXIoJ3RvQmVGYWxzeScsIGZ1bmN0aW9uKCkgewogIHJldHVybiAhdGhpcy5hY3R1YWw7Cn0pOwoKYW5ndWxhci5zY2VuYXJpby5tYXRjaGVyKCd0b01hdGNoJywgZnVuY3Rpb24oZXhwZWN0ZWQpIHsKICByZXR1cm4gbmV3IFJlZ0V4cChleHBlY3RlZCkudGVzdCh0aGlzLmFjdHVhbCk7Cn0pOwoKYW5ndWxhci5zY2VuYXJpby5tYXRjaGVyKCd0b0JlTnVsbCcsIGZ1bmN0aW9uKCkgewogIHJldHVybiB0aGlzLmFjdHVhbCA9PT0gbnVsbDsKfSk7Cgphbmd1bGFyLnNjZW5hcmlvLm1hdGNoZXIoJ3RvQ29udGFpbicsIGZ1bmN0aW9uKGV4cGVjdGVkKSB7CiAgcmV0dXJuIGluY2x1ZGVzKHRoaXMuYWN0dWFsLCBleHBlY3RlZCk7Cn0pOwoKYW5ndWxhci5zY2VuYXJpby5tYXRjaGVyKCd0b0JlTGVzc1RoYW4nLCBmdW5jdGlvbihleHBlY3RlZCkgewogIHJldHVybiB0aGlzLmFjdHVhbCA8IGV4cGVjdGVkOwp9KTsKCmFuZ3VsYXIuc2NlbmFyaW8ubWF0Y2hlcigndG9CZUdyZWF0ZXJUaGFuJywgZnVuY3Rpb24oZXhwZWN0ZWQpIHsKICByZXR1cm4gdGhpcy5hY3R1YWwgPiBleHBlY3RlZDsKfSk7CgovKioKICogVXNlciBJbnRlcmZhY2UgZm9yIHRoZSBTY2VuYXJpbyBSdW5uZXIuCiAqCiAqIFRPRE8oZXNwcmVobik6IFRoaXMgc2hvdWxkIGJlIHJlZmFjdG9yZWQgbm93IHRoYXQgT2JqZWN0TW9kZWwgZXhpc3RzCiAqICB0byB1c2UgYW5ndWxhciBiaW5kaW5ncyBmb3IgdGhlIFVJLgogKi8KYW5ndWxhci5zY2VuYXJpby5vdXRwdXQoJ2h0bWwnLCBmdW5jdGlvbihjb250ZXh0LCBydW5uZXIsIG1vZGVsKSB7CiAgdmFyIHNwZWNVaU1hcCA9IHt9LAogICAgICBsYXN0U3RlcFVpTWFwID0ge307CgogIGNvbnRleHQuYXBwZW5kKAogICAgJzxkaXYgaWQ9ImhlYWRlciI+JyArCiAgICAnICA8aDE+PHNwYW4gY2xhc3M9ImFuZ3VsYXIiPkFuZ3VsYXJKUzwvc3Bhbj46IFNjZW5hcmlvIFRlc3QgUnVubmVyPC9oMT4nICsKICAgICcgIDx1bCBpZD0ic3RhdHVzLWxlZ2VuZCIgY2xhc3M9InN0YXR1cy1kaXNwbGF5Ij4nICsKICAgICcgICAgPGxpIGNsYXNzPSJzdGF0dXMtZXJyb3IiPjAgRXJyb3JzPC9saT4nICsKICAgICcgICAgPGxpIGNsYXNzPSJzdGF0dXMtZmFpbHVyZSI+MCBGYWlsdXJlczwvbGk+JyArCiAgICAnICAgIDxsaSBjbGFzcz0ic3RhdHVzLXN1Y2Nlc3MiPjAgUGFzc2VkPC9saT4nICsKICAgICcgIDwvdWw+JyArCiAgICAnPC9kaXY+JyArCiAgICAnPGRpdiBpZD0ic3BlY3MiPicgKwogICAgJyAgPGRpdiBjbGFzcz0idGVzdC1jaGlsZHJlbiI+PC9kaXY+JyArCiAgICAnPC9kaXY+JwogICk7CgogIHJ1bm5lci5vbignSW50ZXJhY3RpdmVQYXVzZScsIGZ1bmN0aW9uKHNwZWMpIHsKICAgIHZhciB1aSA9IGxhc3RTdGVwVWlNYXBbc3BlYy5pZF07CiAgICB1aS5maW5kKCcudGVzdC10aXRsZScpLgogICAgICBodG1sKCdwYXVzZWQuLi4gPGEgaHJlZj0iamF2YXNjcmlwdDpyZXN1bWUoKSI+cmVzdW1lPC9hPiB3aGVuIHJlYWR5LicpOwogIH0pOwoKICBydW5uZXIub24oJ1NwZWNCZWdpbicsIGZ1bmN0aW9uKHNwZWMpIHsKICAgIHZhciB1aSA9IGZpbmRDb250ZXh0KHNwZWMpOwogICAgdWkuZmluZCgnPiAudGVzdHMnKS5hcHBlbmQoCiAgICAgICc8bGkgY2xhc3M9InN0YXR1cy1wZW5kaW5nIHRlc3QtaXQiPjwvbGk+JwogICAgKTsKICAgIHVpID0gdWkuZmluZCgnPiAudGVzdHMgbGk6bGFzdCcpOwogICAgdWkuYXBwZW5kKAogICAgICAnPGRpdiBjbGFzcz0idGVzdC1pbmZvIj4nICsKICAgICAgJyAgPHAgY2xhc3M9InRlc3QtdGl0bGUiPicgKwogICAgICAnICAgIDxzcGFuIGNsYXNzPSJ0aW1lci1yZXN1bHQiPjwvc3Bhbj4nICsKICAgICAgJyAgICA8c3BhbiBjbGFzcz0idGVzdC1uYW1lIj48L3NwYW4+JyArCiAgICAgICcgIDwvcD4nICsKICAgICAgJzwvZGl2PicgKwogICAgICAnPGRpdiBjbGFzcz0ic2Nyb2xscGFuZSI+JyArCiAgICAgICcgIDxvbCBjbGFzcz0idGVzdC1hY3Rpb25zIj48L29sPicgKwogICAgICAnPC9kaXY+JwogICAgKTsKICAgIHVpLmZpbmQoJz4gLnRlc3QtaW5mbyAudGVzdC1uYW1lJykudGV4dChzcGVjLm5hbWUpOwogICAgdWkuZmluZCgnPiAudGVzdC1pbmZvJykuY2xpY2soZnVuY3Rpb24oKSB7CiAgICAgIHZhciBzY3JvbGxwYW5lID0gdWkuZmluZCgnPiAuc2Nyb2xscGFuZScpOwogICAgICB2YXIgYWN0aW9ucyA9IHNjcm9sbHBhbmUuZmluZCgnPiAudGVzdC1hY3Rpb25zJyk7CiAgICAgIHZhciBuYW1lID0gY29udGV4dC5maW5kKCc+IC50ZXN0LWluZm8gLnRlc3QtbmFtZScpOwogICAgICBpZiAoYWN0aW9ucy5maW5kKCc6dmlzaWJsZScpLmxlbmd0aCkgewogICAgICAgIGFjdGlvbnMuaGlkZSgpOwogICAgICAgIG5hbWUucmVtb3ZlQ2xhc3MoJ29wZW4nKS5hZGRDbGFzcygnY2xvc2VkJyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWN0aW9ucy5zaG93KCk7CiAgICAgICAgc2Nyb2xscGFuZS5hdHRyKCdzY3JvbGxUb3AnLCBzY3JvbGxwYW5lLmF0dHIoJ3Njcm9sbEhlaWdodCcpKTsKICAgICAgICBuYW1lLnJlbW92ZUNsYXNzKCdjbG9zZWQnKS5hZGRDbGFzcygnb3BlbicpOwogICAgICB9CiAgICB9KTsKCiAgICBzcGVjVWlNYXBbc3BlYy5pZF0gPSB1aTsKICB9KTsKCiAgcnVubmVyLm9uKCdTcGVjRXJyb3InLCBmdW5jdGlvbihzcGVjLCBlcnJvcikgewogICAgdmFyIHVpID0gc3BlY1VpTWFwW3NwZWMuaWRdOwogICAgdWkuYXBwZW5kKCc8cHJlPjwvcHJlPicpOwogICAgdWkuZmluZCgnPiBwcmUnKS50ZXh0KGZvcm1hdEV4Y2VwdGlvbihlcnJvcikpOwogIH0pOwoKICBydW5uZXIub24oJ1NwZWNFbmQnLCBmdW5jdGlvbihzcGVjKSB7CiAgICB2YXIgdWkgPSBzcGVjVWlNYXBbc3BlYy5pZF07CiAgICBzcGVjID0gbW9kZWwuZ2V0U3BlYyhzcGVjLmlkKTsKICAgIHVpLnJlbW92ZUNsYXNzKCdzdGF0dXMtcGVuZGluZycpOwogICAgdWkuYWRkQ2xhc3MoJ3N0YXR1cy0nICsgc3BlYy5zdGF0dXMpOwogICAgdWkuZmluZCgiPiAudGVzdC1pbmZvIC50aW1lci1yZXN1bHQiKS50ZXh0KHNwZWMuZHVyYXRpb24gKyAibXMiKTsKICAgIGlmIChzcGVjLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7CiAgICAgIHVpLmZpbmQoJz4gLnRlc3QtaW5mbyAudGVzdC1uYW1lJykuYWRkQ2xhc3MoJ2Nsb3NlZCcpOwogICAgICB1aS5maW5kKCc+IC5zY3JvbGxwYW5lIC50ZXN0LWFjdGlvbnMnKS5oaWRlKCk7CiAgICB9CiAgICB1cGRhdGVUb3RhbHMoc3BlYy5zdGF0dXMpOwogIH0pOwoKICBydW5uZXIub24oJ1N0ZXBCZWdpbicsIGZ1bmN0aW9uKHNwZWMsIHN0ZXApIHsKICAgIHZhciB1aSA9IHNwZWNVaU1hcFtzcGVjLmlkXTsKICAgIHNwZWMgPSBtb2RlbC5nZXRTcGVjKHNwZWMuaWQpOwogICAgc3RlcCA9IHNwZWMuZ2V0TGFzdFN0ZXAoKTsKICAgIHVpLmZpbmQoJz4gLnNjcm9sbHBhbmUgLnRlc3QtYWN0aW9ucycpLmFwcGVuZCgnPGxpIGNsYXNzPSJzdGF0dXMtcGVuZGluZyI+PC9saT4nKTsKICAgIHZhciBzdGVwVWkgPSBsYXN0U3RlcFVpTWFwW3NwZWMuaWRdID0gdWkuZmluZCgnPiAuc2Nyb2xscGFuZSAudGVzdC1hY3Rpb25zIGxpOmxhc3QnKTsKICAgIHN0ZXBVaS5hcHBlbmQoCiAgICAgICc8ZGl2IGNsYXNzPSJ0aW1lci1yZXN1bHQiPjwvZGl2PicgKwogICAgICAnPGRpdiBjbGFzcz0idGVzdC10aXRsZSI+PC9kaXY+JwogICAgKTsKICAgIHN0ZXBVaS5maW5kKCc+IC50ZXN0LXRpdGxlJykudGV4dChzdGVwLm5hbWUpOwogICAgdmFyIHNjcm9sbHBhbmUgPSBzdGVwVWkucGFyZW50cygnLnNjcm9sbHBhbmUnKTsKICAgIHNjcm9sbHBhbmUuYXR0cignc2Nyb2xsVG9wJywgc2Nyb2xscGFuZS5hdHRyKCdzY3JvbGxIZWlnaHQnKSk7CiAgfSk7CgogIHJ1bm5lci5vbignU3RlcEZhaWx1cmUnLCBmdW5jdGlvbihzcGVjLCBzdGVwLCBlcnJvcikgewogICAgdmFyIHVpID0gbGFzdFN0ZXBVaU1hcFtzcGVjLmlkXTsKICAgIGFkZEVycm9yKHVpLCBzdGVwLmxpbmUsIGVycm9yKTsKICB9KTsKCiAgcnVubmVyLm9uKCdTdGVwRXJyb3InLCBmdW5jdGlvbihzcGVjLCBzdGVwLCBlcnJvcikgewogICAgdmFyIHVpID0gbGFzdFN0ZXBVaU1hcFtzcGVjLmlkXTsKICAgIGFkZEVycm9yKHVpLCBzdGVwLmxpbmUsIGVycm9yKTsKICB9KTsKCiAgcnVubmVyLm9uKCdTdGVwRW5kJywgZnVuY3Rpb24oc3BlYywgc3RlcCkgewogICAgdmFyIHN0ZXBVaSA9IGxhc3RTdGVwVWlNYXBbc3BlYy5pZF07CiAgICBzcGVjID0gbW9kZWwuZ2V0U3BlYyhzcGVjLmlkKTsKICAgIHN0ZXAgPSBzcGVjLmdldExhc3RTdGVwKCk7CiAgICBzdGVwVWkuZmluZCgnLnRpbWVyLXJlc3VsdCcpLnRleHQoc3RlcC5kdXJhdGlvbiArICdtcycpOwogICAgc3RlcFVpLnJlbW92ZUNsYXNzKCdzdGF0dXMtcGVuZGluZycpOwogICAgc3RlcFVpLmFkZENsYXNzKCdzdGF0dXMtJyArIHN0ZXAuc3RhdHVzKTsKICAgIHZhciBzY3JvbGxwYW5lID0gc3BlY1VpTWFwW3NwZWMuaWRdLmZpbmQoJz4gLnNjcm9sbHBhbmUnKTsKICAgIHNjcm9sbHBhbmUuYXR0cignc2Nyb2xsVG9wJywgc2Nyb2xscGFuZS5hdHRyKCdzY3JvbGxIZWlnaHQnKSk7CiAgfSk7CgogIC8qKgogICAqIEZpbmRzIHRoZSBjb250ZXh0IG9mIGEgc3BlYyBibG9jayBkZWZpbmVkIGJ5IHRoZSBwYXNzZWQgZGVmaW5pdGlvbi4KICAgKgogICAqIEBwYXJhbSB7T2JqZWN0fSBUaGUgZGVmaW5pdGlvbiBjcmVhdGVkIGJ5IHRoZSBEZXNjcmliZSBvYmplY3QuCiAgICovCiAgZnVuY3Rpb24gZmluZENvbnRleHQoc3BlYykgewogICAgdmFyIGN1cnJlbnRDb250ZXh0ID0gY29udGV4dC5maW5kKCcjc3BlY3MnKTsKICAgIGFuZ3VsYXIuZm9yRWFjaChtb2RlbC5nZXREZWZpbml0aW9uUGF0aChzcGVjKSwgZnVuY3Rpb24oZGVmbikgewogICAgICB2YXIgaWQgPSAnZGVzY3JpYmUtJyArIGRlZm4uaWQ7CiAgICAgIGlmICghY29udGV4dC5maW5kKCcjJyArIGlkKS5sZW5ndGgpIHsKICAgICAgICBjdXJyZW50Q29udGV4dC5maW5kKCc+IC50ZXN0LWNoaWxkcmVuJykuYXBwZW5kKAogICAgICAgICAgJzxkaXYgY2xhc3M9InRlc3QtZGVzY3JpYmUiIGlkPSInICsgaWQgKyAnIj4nICsKICAgICAgICAgICcgIDxoMj48L2gyPicgKwogICAgICAgICAgJyAgPGRpdiBjbGFzcz0idGVzdC1jaGlsZHJlbiI+PC9kaXY+JyArCiAgICAgICAgICAnICA8dWwgY2xhc3M9InRlc3RzIj48L3VsPicgKwogICAgICAgICAgJzwvZGl2PicKICAgICAgICApOwogICAgICAgIGNvbnRleHQuZmluZCgnIycgKyBpZCkuZmluZCgnPiBoMicpLnRleHQoJ2Rlc2NyaWJlOiAnICsgZGVmbi5uYW1lKTsKICAgICAgfQogICAgICBjdXJyZW50Q29udGV4dCA9IGNvbnRleHQuZmluZCgnIycgKyBpZCk7CiAgICB9KTsKICAgIHJldHVybiBjb250ZXh0LmZpbmQoJyNkZXNjcmliZS0nICsgc3BlYy5kZWZpbml0aW9uLmlkKTsKICB9CgogIC8qKgogICAqIFVwZGF0ZXMgdGhlIHRlc3QgY291bnRlciBmb3IgdGhlIHN0YXR1cy4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSB0aGUgc3RhdHVzLgogICAqLwogIGZ1bmN0aW9uIHVwZGF0ZVRvdGFscyhzdGF0dXMpIHsKICAgIHZhciBsZWdlbmQgPSBjb250ZXh0LmZpbmQoJyNzdGF0dXMtbGVnZW5kIC5zdGF0dXMtJyArIHN0YXR1cyk7CiAgICB2YXIgcGFydHMgPSBsZWdlbmQudGV4dCgpLnNwbGl0KCcgJyk7CiAgICB2YXIgdmFsdWUgPSAocGFydHNbMF0gKiAxKSArIDE7CiAgICBsZWdlbmQudGV4dCh2YWx1ZSArICcgJyArIHBhcnRzWzFdKTsKICB9CgogIC8qKgogICAqIEFkZCBhbiBlcnJvciB0byBhIHN0ZXAuCiAgICoKICAgKiBAcGFyYW0ge09iamVjdH0gVGhlIEpRdWVyeSB3cmFwcGVkIGNvbnRleHQKICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuKCkgdGhhdCBzaG91bGQgcmV0dXJuIHRoZSBmaWxlL2xpbmUgbnVtYmVyIG9mIHRoZSBlcnJvcgogICAqIEBwYXJhbSB7T2JqZWN0fSB0aGUgZXJyb3IuCiAgICovCiAgZnVuY3Rpb24gYWRkRXJyb3IoY29udGV4dCwgbGluZSwgZXJyb3IpIHsKICAgIGNvbnRleHQuZmluZCgnLnRlc3QtdGl0bGUnKS5hcHBlbmQoJzxwcmU+PC9wcmU+Jyk7CiAgICB2YXIgbWVzc2FnZSA9IF9qUXVlcnkudHJpbShsaW5lKCkgKyAnXG5cbicgKyBmb3JtYXRFeGNlcHRpb24oZXJyb3IpKTsKICAgIGNvbnRleHQuZmluZCgnLnRlc3QtdGl0bGUgcHJlOmxhc3QnKS50ZXh0KG1lc3NhZ2UpOwogIH0KfSk7CgovKioKICogR2VuZXJhdGVzIEpTT04gb3V0cHV0IGludG8gYSBjb250ZXh0LgogKi8KYW5ndWxhci5zY2VuYXJpby5vdXRwdXQoJ2pzb24nLCBmdW5jdGlvbihjb250ZXh0LCBydW5uZXIsIG1vZGVsKSB7CiAgbW9kZWwub24oJ1J1bm5lckVuZCcsIGZ1bmN0aW9uKCkgewogICAgY29udGV4dC50ZXh0KGFuZ3VsYXIudG9Kc29uKG1vZGVsLnZhbHVlKSk7CiAgfSk7Cn0pOwoKLyoqCiAqIEdlbmVyYXRlcyBYTUwgb3V0cHV0IGludG8gYSBjb250ZXh0LgogKi8KYW5ndWxhci5zY2VuYXJpby5vdXRwdXQoJ3htbCcsIGZ1bmN0aW9uKGNvbnRleHQsIHJ1bm5lciwgbW9kZWwpIHsKICB2YXIgJCA9IGZ1bmN0aW9uKGFyZ3MpIHtyZXR1cm4gbmV3IGNvbnRleHQuaW5pdChhcmdzKTt9OwogIG1vZGVsLm9uKCdSdW5uZXJFbmQnLCBmdW5jdGlvbigpIHsKICAgIHZhciBzY2VuYXJpbyA9ICQoJzxzY2VuYXJpbz48L3NjZW5hcmlvPicpOwogICAgY29udGV4dC5hcHBlbmQoc2NlbmFyaW8pOwogICAgc2VyaWFsaXplWG1sKHNjZW5hcmlvLCBtb2RlbC52YWx1ZSk7CiAgfSk7CgogIC8qKgogICAqIENvbnZlcnQgdGhlIHRyZWUgaW50byBYTUwuCiAgICoKICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dCBqUXVlcnkgY29udGV4dCB0byBhZGQgdGhlIFhNTCB0by4KICAgKiBAcGFyYW0ge09iamVjdH0gdHJlZSBub2RlIHRvIHNlcmlhbGl6ZQogICAqLwogIGZ1bmN0aW9uIHNlcmlhbGl6ZVhtbChjb250ZXh0LCB0cmVlKSB7CiAgICAgYW5ndWxhci5mb3JFYWNoKHRyZWUuY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7CiAgICAgICB2YXIgZGVzY3JpYmVDb250ZXh0ID0gJCgnPGRlc2NyaWJlPjwvZGVzY3JpYmU+Jyk7CiAgICAgICBkZXNjcmliZUNvbnRleHQuYXR0cignaWQnLCBjaGlsZC5pZCk7CiAgICAgICBkZXNjcmliZUNvbnRleHQuYXR0cignbmFtZScsIGNoaWxkLm5hbWUpOwogICAgICAgY29udGV4dC5hcHBlbmQoZGVzY3JpYmVDb250ZXh0KTsKICAgICAgIHNlcmlhbGl6ZVhtbChkZXNjcmliZUNvbnRleHQsIGNoaWxkKTsKICAgICB9KTsKICAgICB2YXIgaXRzID0gJCgnPGl0cz48L2l0cz4nKTsKICAgICBjb250ZXh0LmFwcGVuZChpdHMpOwogICAgIGFuZ3VsYXIuZm9yRWFjaCh0cmVlLnNwZWNzLCBmdW5jdGlvbihzcGVjKSB7CiAgICAgICB2YXIgaXQgPSAkKCc8aXQ+PC9pdD4nKTsKICAgICAgIGl0LmF0dHIoJ2lkJywgc3BlYy5pZCk7CiAgICAgICBpdC5hdHRyKCduYW1lJywgc3BlYy5uYW1lKTsKICAgICAgIGl0LmF0dHIoJ2R1cmF0aW9uJywgc3BlYy5kdXJhdGlvbik7CiAgICAgICBpdC5hdHRyKCdzdGF0dXMnLCBzcGVjLnN0YXR1cyk7CiAgICAgICBpdHMuYXBwZW5kKGl0KTsKICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzcGVjLnN0ZXBzLCBmdW5jdGlvbihzdGVwKSB7CiAgICAgICAgIHZhciBzdGVwQ29udGV4dCA9ICQoJzxzdGVwPjwvc3RlcD4nKTsKICAgICAgICAgc3RlcENvbnRleHQuYXR0cignbmFtZScsIHN0ZXAubmFtZSk7CiAgICAgICAgIHN0ZXBDb250ZXh0LmF0dHIoJ2R1cmF0aW9uJywgc3RlcC5kdXJhdGlvbik7CiAgICAgICAgIHN0ZXBDb250ZXh0LmF0dHIoJ3N0YXR1cycsIHN0ZXAuc3RhdHVzKTsKICAgICAgICAgaXQuYXBwZW5kKHN0ZXBDb250ZXh0KTsKICAgICAgICAgaWYgKHN0ZXAuZXJyb3IpIHsKICAgICAgICAgICB2YXIgZXJyb3IgPSAkKCc8ZXJyb3I+PC9lcnJvcj4nKTsKICAgICAgICAgICBzdGVwQ29udGV4dC5hcHBlbmQoZXJyb3IpOwogICAgICAgICAgIGVycm9yLnRleHQoZm9ybWF0RXhjZXB0aW9uKHN0ZXBDb250ZXh0LmVycm9yKSk7CiAgICAgICAgIH0KICAgICAgIH0pOwogICAgIH0pOwogICB9Cn0pOwoKLyoqCiAqIENyZWF0ZXMgYSBnbG9iYWwgdmFsdWUgJHJlc3VsdCB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIHJ1bm5lci4KICovCmFuZ3VsYXIuc2NlbmFyaW8ub3V0cHV0KCdvYmplY3QnLCBmdW5jdGlvbihjb250ZXh0LCBydW5uZXIsIG1vZGVsKSB7CiAgcnVubmVyLiR3aW5kb3cuJHJlc3VsdCA9IG1vZGVsLnZhbHVlOwp9KTsKYmluZEpRdWVyeSgpOwpwdWJsaXNoRXh0ZXJuYWxBUEkoYW5ndWxhcik7Cgp2YXIgJHJ1bm5lciA9IG5ldyBhbmd1bGFyLnNjZW5hcmlvLlJ1bm5lcih3aW5kb3cpLAogICAgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKSwKICAgIHNjcmlwdCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXSwKICAgIGNvbmZpZyA9IHt9OwoKYW5ndWxhci5mb3JFYWNoKHNjcmlwdC5hdHRyaWJ1dGVzLCBmdW5jdGlvbihhdHRyKSB7CiAgdmFyIG1hdGNoID0gYXR0ci5uYW1lLm1hdGNoKC9uZ1s6XC1dKC4qKS8pOwogIGlmIChtYXRjaCkgewogICAgY29uZmlnW21hdGNoWzFdXSA9IGF0dHIudmFsdWUgfHwgdHJ1ZTsKICB9Cn0pOwoKaWYgKGNvbmZpZy5hdXRvdGVzdCkgewogIEpRTGl0ZShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CiAgICBhbmd1bGFyLnNjZW5hcmlvLnNldFVwQW5kUnVuKGNvbmZpZyk7CiAgfSk7Cn0KfSkod2luZG93LCBkb2N1bWVudCk7Cgphbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5hcHBlbmQoJzxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+QGNoYXJzZXQgIlVURi04IjtcblxuW25nXFw6Y2xvYWtdLCBbbmctY2xvYWtdLCBbZGF0YS1uZy1jbG9ha10sIFt4LW5nLWNsb2FrXSxcbi5uZy1jbG9haywgLngtbmctY2xvYWsge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG5uZ1xcOmZvcm0ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cbjwvc3R5bGU+Jyk7CmFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCgnaGVhZCcpLmFwcGVuZCgnPHN0eWxlIHR5cGU9InRleHQvY3NzIj5AY2hhcnNldCAiVVRGLTgiO1xuLyogQ1NTIERvY3VtZW50ICovXG5cbi8qKiBTdHJ1Y3R1cmUgKi9cbmJvZHkge1xuICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7XG4gIG1hcmdpbjogMDtcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuXG4jc3lzdGVtLWVycm9yIHtcbiAgZm9udC1zaXplOiAxLjVlbTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4janNvbiwgI3htbCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbiNoZWFkZXIge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4jc3BlY3Mge1xuICBwYWRkaW5nLXRvcDogNTBweDtcbn1cblxuI2hlYWRlciAuYW5ndWxhciB7XG4gIGZvbnQtZmFtaWx5OiBDb3VyaWVyIE5ldywgbW9ub3NwYWNlO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuI2hlYWRlciBoMSB7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZsb2F0OiBsZWZ0O1xuICBmb250LXNpemU6IDMwcHg7XG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDEwcHggMTBweDtcbiAgaGVpZ2h0OiAzMHB4O1xufVxuXG4jYXBwbGljYXRpb24gaDIsXG4jc3BlY3MgaDIge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDAuNWVtO1xuICBmb250LXNpemU6IDEuMWVtO1xufVxuXG4jc3RhdHVzLWxlZ2VuZCB7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbn1cblxuI2hlYWRlcixcbiNhcHBsaWNhdGlvbixcbi50ZXN0LWluZm8sXG4udGVzdC1hY3Rpb25zIGxpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuI2FwcGxpY2F0aW9uIHtcbiAgbWFyZ2luOiAxMHB4O1xufVxuXG4jYXBwbGljYXRpb24gaWZyYW1lIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogNzU4cHg7XG59XG5cbiNhcHBsaWNhdGlvbiAucG9wb3V0IHtcbiAgZmxvYXQ6IHJpZ2h0O1xufVxuXG4jYXBwbGljYXRpb24gaWZyYW1lIHtcbiAgYm9yZGVyOiBub25lO1xufVxuXG4udGVzdHMgbGksXG4udGVzdC1hY3Rpb25zIGxpLFxuLnRlc3QtaXQgbGksXG4udGVzdC1pdCBvbCxcbi5zdGF0dXMtZGlzcGxheSB7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbn1cblxuLnRlc3RzLFxuLnRlc3QtaXQgb2wsXG4uc3RhdHVzLWRpc3BsYXkge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi50ZXN0LWluZm8ge1xuICBtYXJnaW4tbGVmdDogMWVtO1xuICBtYXJnaW4tdG9wOiAwLjVlbTtcbiAgYm9yZGVyLXJhZGl1czogOHB4IDAgMCA4cHg7XG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogOHB4IDAgMCA4cHg7XG4gIC1tb3otYm9yZGVyLXJhZGl1czogOHB4IDAgMCA4cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLnRlc3QtaW5mbzpob3ZlciAudGVzdC1uYW1lIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG59XG5cbi50ZXN0LWluZm8gLmNsb3NlZDpiZWZvcmUge1xuICBjb250ZW50OiBcJ1xcMjViOFxcMDBBMFwnO1xufVxuXG4udGVzdC1pbmZvIC5vcGVuOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwnXFwyNWJlXFwwMEEwXCc7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4udGVzdC1pdCBvbCB7XG4gIG1hcmdpbi1sZWZ0OiAyLjVlbTtcbn1cblxuLnN0YXR1cy1kaXNwbGF5LFxuLnN0YXR1cy1kaXNwbGF5IGxpIHtcbiAgZmxvYXQ6IHJpZ2h0O1xufVxuXG4uc3RhdHVzLWRpc3BsYXkgbGkge1xuICBwYWRkaW5nOiA1cHggMTBweDtcbn1cblxuLnRpbWVyLXJlc3VsdCxcbi50ZXN0LXRpdGxlIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDRweDtcbn1cblxuLnRlc3QtYWN0aW9ucyAudGVzdC10aXRsZSxcbi50ZXN0LWFjdGlvbnMgLnRlc3QtcmVzdWx0IHtcbiAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgcGFkZGluZy1sZWZ0OiAwLjVlbTtcbiAgcGFkZGluZy1yaWdodDogMC41ZW07XG59XG5cbi50ZXN0LWFjdGlvbnMge1xuICBkaXNwbGF5OiB0YWJsZTtcbn1cblxuLnRlc3QtYWN0aW9ucyBsaSB7XG4gIGRpc3BsYXk6IHRhYmxlLXJvdztcbn1cblxuLnRpbWVyLXJlc3VsdCB7XG4gIHdpZHRoOiA0ZW07XG4gIHBhZGRpbmc6IDAgMTBweDtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XG59XG5cbi50ZXN0LWl0IHByZSxcbi50ZXN0LWFjdGlvbnMgcHJlIHtcbiAgY2xlYXI6IGxlZnQ7XG4gIGNvbG9yOiBibGFjaztcbiAgbWFyZ2luLWxlZnQ6IDZlbTtcbn1cblxuLnRlc3QtZGVzY3JpYmUge1xuICBwYWRkaW5nLWJvdHRvbTogMC41ZW07XG59XG5cbi50ZXN0LWRlc2NyaWJlIC50ZXN0LWRlc2NyaWJlIHtcbiAgbWFyZ2luOiA1cHggNXB4IDEwcHggMmVtO1xufVxuXG4udGVzdC1hY3Rpb25zIC5zdGF0dXMtcGVuZGluZyAudGVzdC10aXRsZTpiZWZvcmUge1xuICBjb250ZW50OiBcJ1xcMDBiYlxcMDBBMFwnO1xufVxuXG4uc2Nyb2xscGFuZSB7XG4gICBtYXgtaGVpZ2h0OiAyMGVtO1xuICAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKiBDb2xvcnMgKi9cblxuI2hlYWRlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGMkMyMDA7XG59XG5cbiNzcGVjcyBoMiB7XG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCAjQkFCQUQxO1xufVxuXG4jc3BlY3MgaDIsXG4jYXBwbGljYXRpb24gaDIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZlZmVmO1xufVxuXG4jYXBwbGljYXRpb24ge1xuICBib3JkZXI6IDFweCBzb2xpZCAjQkFCQUQxO1xufVxuXG4udGVzdC1kZXNjcmliZSAudGVzdC1kZXNjcmliZSB7XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI0JBQkFEMTtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI0JBQkFEMTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNCQUJBRDE7XG59XG5cbi5zdGF0dXMtZGlzcGxheSB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICM3Nzc7XG59XG5cbi5zdGF0dXMtZGlzcGxheSAuc3RhdHVzLXBlbmRpbmcsXG4uc3RhdHVzLXBlbmRpbmcgLnRlc3QtaW5mbyB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGOUVFQkM7XG59XG5cbi5zdGF0dXMtZGlzcGxheSAuc3RhdHVzLXN1Y2Nlc3MsXG4uc3RhdHVzLXN1Y2Nlc3MgLnRlc3QtaW5mbyB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNCMUQ3QTE7XG59XG5cbi5zdGF0dXMtZGlzcGxheSAuc3RhdHVzLWZhaWx1cmUsXG4uc3RhdHVzLWZhaWx1cmUgLnRlc3QtaW5mbyB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGRjgyODY7XG59XG5cbi5zdGF0dXMtZGlzcGxheSAuc3RhdHVzLWVycm9yLFxuLnN0YXR1cy1lcnJvciAudGVzdC1pbmZvIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XG4gIGNvbG9yOiB3aGl0ZTtcbn1cblxuLnRlc3QtYWN0aW9ucyAuc3RhdHVzLXN1Y2Nlc3MgLnRlc3QtdGl0bGUge1xuICBjb2xvcjogIzMwQjMwQTtcbn1cblxuLnRlc3QtYWN0aW9ucyAuc3RhdHVzLWZhaWx1cmUgLnRlc3QtdGl0bGUge1xuICBjb2xvcjogI0RGMDAwMDtcbn1cblxuLnRlc3QtYWN0aW9ucyAuc3RhdHVzLWVycm9yIC50ZXN0LXRpdGxlIHtcbiAgY29sb3I6IGJsYWNrO1xufVxuXG4udGVzdC1hY3Rpb25zIC50aW1lci1yZXN1bHQge1xuICBjb2xvcjogIzg4ODtcbn1cbjwvc3R5bGU+Jyk7",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 14:52:00 GMT",
                    "Content-Length": "794010",
                    "Date": "Sat, 08 Nov 2014 14:52:00 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}