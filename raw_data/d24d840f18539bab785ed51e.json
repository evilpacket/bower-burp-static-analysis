{
    "url": "http://localhost:9999/jcbrand/converse.js/builds/converse-no-locales-no-otr.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.href</b> and written to <b>location.replace()</b> via the following statements:<ul><li>var href = location.href.replace(/(javascript:|#).*$/, '');</li><li>location.replace(href + '#' + fragment);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/jcbrand/converse.js/builds/converse-no-locales-no-otr.js",
                "path": "/jcbrand/converse.js/builds/converse-no-locales-no-otr.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9qY2JyYW5kL2NvbnZlcnNlLmpzL2J1aWxkcy9jb252ZXJzZS1uby1sb2NhbGVzLW5vLW90ci5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyoqCiAqIEBsaWNlbnNlIGFsbW9uZCAwLjIuOSBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxNCwgVGhlIERvam8gRm91bmRhdGlvbiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKiBBdmFpbGFibGUgdmlhIHRoZSBNSVQgb3IgbmV3IEJTRCBsaWNlbnNlLgogKiBzZWU6IGh0dHA6Ly9naXRodWIuY29tL2pyYnVya2UvYWxtb25kIGZvciBkZXRhaWxzCiAqLwovL0dvaW5nIHNsb3BweSB0byBhdm9pZCAndXNlIHN0cmljdCcgc3RyaW5nIGNvc3QsIGJ1dCBzdHJpY3QgcHJhY3RpY2VzIHNob3VsZAovL2JlIGZvbGxvd2VkLgovKmpzbGludCBzbG9wcHk6IHRydWUgKi8KLypnbG9iYWwgc2V0VGltZW91dDogZmFsc2UgKi8KCnZhciByZXF1aXJlanMsIHJlcXVpcmUsIGRlZmluZTsKKGZ1bmN0aW9uICh1bmRlZikgewogICAgdmFyIG1haW4sIHJlcSwgbWFrZU1hcCwgaGFuZGxlcnMsCiAgICAgICAgZGVmaW5lZCA9IHt9LAogICAgICAgIHdhaXRpbmcgPSB7fSwKICAgICAgICBjb25maWcgPSB7fSwKICAgICAgICBkZWZpbmluZyA9IHt9LAogICAgICAgIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksCiAgICAgICAgYXBzID0gW10uc2xpY2UsCiAgICAgICAganNTdWZmaXhSZWdFeHAgPSAvXC5qcyQvOwoKICAgIGZ1bmN0aW9uIGhhc1Byb3Aob2JqLCBwcm9wKSB7CiAgICAgICAgcmV0dXJuIGhhc093bi5jYWxsKG9iaiwgcHJvcCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHaXZlbiBhIHJlbGF0aXZlIG1vZHVsZSBuYW1lLCBsaWtlIC4vc29tZXRoaW5nLCBub3JtYWxpemUgaXQgdG8KICAgICAqIGEgcmVhbCBuYW1lIHRoYXQgY2FuIGJlIG1hcHBlZCB0byBhIHBhdGguCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSB0aGUgcmVsYXRpdmUgbmFtZQogICAgICogQHBhcmFtIHtTdHJpbmd9IGJhc2VOYW1lIGEgcmVhbCBuYW1lIHRoYXQgdGhlIG5hbWUgYXJnIGlzIHJlbGF0aXZlCiAgICAgKiB0by4KICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IG5vcm1hbGl6ZWQgbmFtZQogICAgICovCiAgICBmdW5jdGlvbiBub3JtYWxpemUobmFtZSwgYmFzZU5hbWUpIHsKICAgICAgICB2YXIgbmFtZVBhcnRzLCBuYW1lU2VnbWVudCwgbWFwVmFsdWUsIGZvdW5kTWFwLCBsYXN0SW5kZXgsCiAgICAgICAgICAgIGZvdW5kSSwgZm91bmRTdGFyTWFwLCBzdGFySSwgaSwgaiwgcGFydCwKICAgICAgICAgICAgYmFzZVBhcnRzID0gYmFzZU5hbWUgJiYgYmFzZU5hbWUuc3BsaXQoIi8iKSwKICAgICAgICAgICAgbWFwID0gY29uZmlnLm1hcCwKICAgICAgICAgICAgc3Rhck1hcCA9IChtYXAgJiYgbWFwWycqJ10pIHx8IHt9OwoKICAgICAgICAvL0FkanVzdCBhbnkgcmVsYXRpdmUgcGF0aHMuCiAgICAgICAgaWYgKG5hbWUgJiYgbmFtZS5jaGFyQXQoMCkgPT09ICIuIikgewogICAgICAgICAgICAvL0lmIGhhdmUgYSBiYXNlIG5hbWUsIHRyeSB0byBub3JtYWxpemUgYWdhaW5zdCBpdCwKICAgICAgICAgICAgLy9vdGhlcndpc2UsIGFzc3VtZSBpdCBpcyBhIHRvcC1sZXZlbCByZXF1aXJlIHRoYXQgd2lsbAogICAgICAgICAgICAvL2JlIHJlbGF0aXZlIHRvIGJhc2VVcmwgaW4gdGhlIGVuZC4KICAgICAgICAgICAgaWYgKGJhc2VOYW1lKSB7CiAgICAgICAgICAgICAgICAvL0NvbnZlcnQgYmFzZU5hbWUgdG8gYXJyYXksIGFuZCBsb3Agb2ZmIHRoZSBsYXN0IHBhcnQsCiAgICAgICAgICAgICAgICAvL3NvIHRoYXQgLiBtYXRjaGVzIHRoYXQgImRpcmVjdG9yeSIgYW5kIG5vdCBuYW1lIG9mIHRoZSBiYXNlTmFtZSdzCiAgICAgICAgICAgICAgICAvL21vZHVsZS4gRm9yIGluc3RhbmNlLCBiYXNlTmFtZSBvZiAib25lL3R3by90aHJlZSIsIG1hcHMgdG8KICAgICAgICAgICAgICAgIC8vIm9uZS90d28vdGhyZWUuanMiLCBidXQgd2Ugd2FudCB0aGUgZGlyZWN0b3J5LCAib25lL3R3byIgZm9yCiAgICAgICAgICAgICAgICAvL3RoaXMgbm9ybWFsaXphdGlvbi4KICAgICAgICAgICAgICAgIGJhc2VQYXJ0cyA9IGJhc2VQYXJ0cy5zbGljZSgwLCBiYXNlUGFydHMubGVuZ3RoIC0gMSk7CiAgICAgICAgICAgICAgICBuYW1lID0gbmFtZS5zcGxpdCgnLycpOwogICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gbmFtZS5sZW5ndGggLSAxOwoKICAgICAgICAgICAgICAgIC8vIE5vZGUgLmpzIGFsbG93YW5jZToKICAgICAgICAgICAgICAgIGlmIChjb25maWcubm9kZUlkQ29tcGF0ICYmIGpzU3VmZml4UmVnRXhwLnRlc3QobmFtZVtsYXN0SW5kZXhdKSkgewogICAgICAgICAgICAgICAgICAgIG5hbWVbbGFzdEluZGV4XSA9IG5hbWVbbGFzdEluZGV4XS5yZXBsYWNlKGpzU3VmZml4UmVnRXhwLCAnJyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbmFtZSA9IGJhc2VQYXJ0cy5jb25jYXQobmFtZSk7CgogICAgICAgICAgICAgICAgLy9zdGFydCB0cmltRG90cwogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gbmFtZVtpXTsKICAgICAgICAgICAgICAgICAgICBpZiAocGFydCA9PT0gIi4iKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUuc3BsaWNlKGksIDEpOwogICAgICAgICAgICAgICAgICAgICAgICBpIC09IDE7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0ID09PSAiLi4iKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAxICYmIChuYW1lWzJdID09PSAnLi4nIHx8IG5hbWVbMF0gPT09ICcuLicpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0VuZCBvZiB0aGUgbGluZS4gS2VlcCBhdCBsZWFzdCBvbmUgbm9uLWRvdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wYXRoIHNlZ21lbnQgYXQgdGhlIGZyb250IHNvIGl0IGNhbiBiZSBtYXBwZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29ycmVjdGx5IHRvIGRpc2suIE90aGVyd2lzZSwgdGhlcmUgaXMgbGlrZWx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vIHBhdGggbWFwcGluZyBmb3IgYSBwYXRoIHN0YXJ0aW5nIHdpdGggJy4uJy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVGhpcyBjYW4gc3RpbGwgZmFpbCwgYnV0IGNhdGNoZXMgdGhlIG1vc3QgcmVhc29uYWJsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy91c2VzIG9mIC4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZS5zcGxpY2UoaSAtIDEsIDIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAtPSAyOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy9lbmQgdHJpbURvdHMKCiAgICAgICAgICAgICAgICBuYW1lID0gbmFtZS5qb2luKCIvIik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAobmFtZS5pbmRleE9mKCcuLycpID09PSAwKSB7CiAgICAgICAgICAgICAgICAvLyBObyBiYXNlTmFtZSwgc28gdGhpcyBpcyBJRCBpcyByZXNvbHZlZCByZWxhdGl2ZQogICAgICAgICAgICAgICAgLy8gdG8gYmFzZVVybCwgcHVsbCBvZmYgdGhlIGxlYWRpbmcgZG90LgogICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyaW5nKDIpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvL0FwcGx5IG1hcCBjb25maWcgaWYgYXZhaWxhYmxlLgogICAgICAgIGlmICgoYmFzZVBhcnRzIHx8IHN0YXJNYXApICYmIG1hcCkgewogICAgICAgICAgICBuYW1lUGFydHMgPSBuYW1lLnNwbGl0KCcvJyk7CgogICAgICAgICAgICBmb3IgKGkgPSBuYW1lUGFydHMubGVuZ3RoOyBpID4gMDsgaSAtPSAxKSB7CiAgICAgICAgICAgICAgICBuYW1lU2VnbWVudCA9IG5hbWVQYXJ0cy5zbGljZSgwLCBpKS5qb2luKCIvIik7CgogICAgICAgICAgICAgICAgaWYgKGJhc2VQYXJ0cykgewogICAgICAgICAgICAgICAgICAgIC8vRmluZCB0aGUgbG9uZ2VzdCBiYXNlTmFtZSBzZWdtZW50IG1hdGNoIGluIHRoZSBjb25maWcuCiAgICAgICAgICAgICAgICAgICAgLy9TbywgZG8gam9pbnMgb24gdGhlIGJpZ2dlc3QgdG8gc21hbGxlc3QgbGVuZ3RocyBvZiBiYXNlUGFydHMuCiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gYmFzZVBhcnRzLmxlbmd0aDsgaiA+IDA7IGogLT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICBtYXBWYWx1ZSA9IG1hcFtiYXNlUGFydHMuc2xpY2UoMCwgaikuam9pbignLycpXTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vYmFzZU5hbWUgc2VnbWVudCBoYXMgIGNvbmZpZywgZmluZCBpZiBpdCBoYXMgb25lIGZvcgogICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMgbmFtZS4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcFZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBWYWx1ZSA9IG1hcFZhbHVlW25hbWVTZWdtZW50XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXBWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vTWF0Y2gsIHVwZGF0ZSBuYW1lIHRvIHRoZSBuZXcgdmFsdWUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRNYXAgPSBtYXBWYWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZEkgPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChmb3VuZE1hcCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vQ2hlY2sgZm9yIGEgc3RhciBtYXAgbWF0Y2gsIGJ1dCBqdXN0IGhvbGQgb24gdG8gaXQsCiAgICAgICAgICAgICAgICAvL2lmIHRoZXJlIGlzIGEgc2hvcnRlciBzZWdtZW50IG1hdGNoIGxhdGVyIGluIGEgbWF0Y2hpbmcKICAgICAgICAgICAgICAgIC8vY29uZmlnLCB0aGVuIGZhdm9yIG92ZXIgdGhpcyBzdGFyIG1hcC4KICAgICAgICAgICAgICAgIGlmICghZm91bmRTdGFyTWFwICYmIHN0YXJNYXAgJiYgc3Rhck1hcFtuYW1lU2VnbWVudF0pIHsKICAgICAgICAgICAgICAgICAgICBmb3VuZFN0YXJNYXAgPSBzdGFyTWFwW25hbWVTZWdtZW50XTsKICAgICAgICAgICAgICAgICAgICBzdGFySSA9IGk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghZm91bmRNYXAgJiYgZm91bmRTdGFyTWFwKSB7CiAgICAgICAgICAgICAgICBmb3VuZE1hcCA9IGZvdW5kU3Rhck1hcDsKICAgICAgICAgICAgICAgIGZvdW5kSSA9IHN0YXJJOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZm91bmRNYXApIHsKICAgICAgICAgICAgICAgIG5hbWVQYXJ0cy5zcGxpY2UoMCwgZm91bmRJLCBmb3VuZE1hcCk7CiAgICAgICAgICAgICAgICBuYW1lID0gbmFtZVBhcnRzLmpvaW4oJy8nKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG5hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gbWFrZVJlcXVpcmUocmVsTmFtZSwgZm9yY2VTeW5jKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgLy9BIHZlcnNpb24gb2YgYSByZXF1aXJlIGZ1bmN0aW9uIHRoYXQgcGFzc2VzIGEgbW9kdWxlTmFtZQogICAgICAgICAgICAvL3ZhbHVlIGZvciBpdGVtcyB0aGF0IG1heSBuZWVkIHRvCiAgICAgICAgICAgIC8vbG9vayB1cCBwYXRocyByZWxhdGl2ZSB0byB0aGUgbW9kdWxlTmFtZQogICAgICAgICAgICByZXR1cm4gcmVxLmFwcGx5KHVuZGVmLCBhcHMuY2FsbChhcmd1bWVudHMsIDApLmNvbmNhdChbcmVsTmFtZSwgZm9yY2VTeW5jXSkpOwogICAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gbWFrZU5vcm1hbGl6ZShyZWxOYW1lKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIHJldHVybiBub3JtYWxpemUobmFtZSwgcmVsTmFtZSk7CiAgICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBtYWtlTG9hZChkZXBOYW1lKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICBkZWZpbmVkW2RlcE5hbWVdID0gdmFsdWU7CiAgICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBjYWxsRGVwKG5hbWUpIHsKICAgICAgICBpZiAoaGFzUHJvcCh3YWl0aW5nLCBuYW1lKSkgewogICAgICAgICAgICB2YXIgYXJncyA9IHdhaXRpbmdbbmFtZV07CiAgICAgICAgICAgIGRlbGV0ZSB3YWl0aW5nW25hbWVdOwogICAgICAgICAgICBkZWZpbmluZ1tuYW1lXSA9IHRydWU7CiAgICAgICAgICAgIG1haW4uYXBwbHkodW5kZWYsIGFyZ3MpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFoYXNQcm9wKGRlZmluZWQsIG5hbWUpICYmICFoYXNQcm9wKGRlZmluaW5nLCBuYW1lKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vICcgKyBuYW1lKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGRlZmluZWRbbmFtZV07CiAgICB9CgogICAgLy9UdXJucyBhIHBsdWdpbiFyZXNvdXJjZSB0byBbcGx1Z2luLCByZXNvdXJjZV0KICAgIC8vd2l0aCB0aGUgcGx1Z2luIGJlaW5nIHVuZGVmaW5lZCBpZiB0aGUgbmFtZQogICAgLy9kaWQgbm90IGhhdmUgYSBwbHVnaW4gcHJlZml4LgogICAgZnVuY3Rpb24gc3BsaXRQcmVmaXgobmFtZSkgewogICAgICAgIHZhciBwcmVmaXgsCiAgICAgICAgICAgIGluZGV4ID0gbmFtZSA/IG5hbWUuaW5kZXhPZignIScpIDogLTE7CiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHsKICAgICAgICAgICAgcHJlZml4ID0gbmFtZS5zdWJzdHJpbmcoMCwgaW5kZXgpOwogICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHJpbmcoaW5kZXggKyAxLCBuYW1lLmxlbmd0aCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBbcHJlZml4LCBuYW1lXTsKICAgIH0KCiAgICAvKioKICAgICAqIE1ha2VzIGEgbmFtZSBtYXAsIG5vcm1hbGl6aW5nIHRoZSBuYW1lLCBhbmQgdXNpbmcgYSBwbHVnaW4KICAgICAqIGZvciBub3JtYWxpemF0aW9uIGlmIG5lY2Vzc2FyeS4gR3JhYnMgYSByZWYgdG8gcGx1Z2luCiAgICAgKiB0b28sIGFzIGFuIG9wdGltaXphdGlvbi4KICAgICAqLwogICAgbWFrZU1hcCA9IGZ1bmN0aW9uIChuYW1lLCByZWxOYW1lKSB7CiAgICAgICAgdmFyIHBsdWdpbiwKICAgICAgICAgICAgcGFydHMgPSBzcGxpdFByZWZpeChuYW1lKSwKICAgICAgICAgICAgcHJlZml4ID0gcGFydHNbMF07CgogICAgICAgIG5hbWUgPSBwYXJ0c1sxXTsKCiAgICAgICAgaWYgKHByZWZpeCkgewogICAgICAgICAgICBwcmVmaXggPSBub3JtYWxpemUocHJlZml4LCByZWxOYW1lKTsKICAgICAgICAgICAgcGx1Z2luID0gY2FsbERlcChwcmVmaXgpOwogICAgICAgIH0KCiAgICAgICAgLy9Ob3JtYWxpemUgYWNjb3JkaW5nCiAgICAgICAgaWYgKHByZWZpeCkgewogICAgICAgICAgICBpZiAocGx1Z2luICYmIHBsdWdpbi5ub3JtYWxpemUpIHsKICAgICAgICAgICAgICAgIG5hbWUgPSBwbHVnaW4ubm9ybWFsaXplKG5hbWUsIG1ha2VOb3JtYWxpemUocmVsTmFtZSkpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbmFtZSA9IG5vcm1hbGl6ZShuYW1lLCByZWxOYW1lKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5hbWUgPSBub3JtYWxpemUobmFtZSwgcmVsTmFtZSk7CiAgICAgICAgICAgIHBhcnRzID0gc3BsaXRQcmVmaXgobmFtZSk7CiAgICAgICAgICAgIHByZWZpeCA9IHBhcnRzWzBdOwogICAgICAgICAgICBuYW1lID0gcGFydHNbMV07CiAgICAgICAgICAgIGlmIChwcmVmaXgpIHsKICAgICAgICAgICAgICAgIHBsdWdpbiA9IGNhbGxEZXAocHJlZml4KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy9Vc2luZyByaWRpY3Vsb3VzIHByb3BlcnR5IG5hbWVzIGZvciBzcGFjZSByZWFzb25zCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgZjogcHJlZml4ID8gcHJlZml4ICsgJyEnICsgbmFtZSA6IG5hbWUsIC8vZnVsbE5hbWUKICAgICAgICAgICAgbjogbmFtZSwKICAgICAgICAgICAgcHI6IHByZWZpeCwKICAgICAgICAgICAgcDogcGx1Z2luCiAgICAgICAgfTsKICAgIH07CgogICAgZnVuY3Rpb24gbWFrZUNvbmZpZyhuYW1lKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIChjb25maWcgJiYgY29uZmlnLmNvbmZpZyAmJiBjb25maWcuY29uZmlnW25hbWVdKSB8fCB7fTsKICAgICAgICB9OwogICAgfQoKICAgIGhhbmRsZXJzID0gewogICAgICAgIHJlcXVpcmU6IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIHJldHVybiBtYWtlUmVxdWlyZShuYW1lKTsKICAgICAgICB9LAogICAgICAgIGV4cG9ydHM6IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIHZhciBlID0gZGVmaW5lZFtuYW1lXTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBlICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKGRlZmluZWRbbmFtZV0gPSB7fSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIG1vZHVsZTogZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGlkOiBuYW1lLAogICAgICAgICAgICAgICAgdXJpOiAnJywKICAgICAgICAgICAgICAgIGV4cG9ydHM6IGRlZmluZWRbbmFtZV0sCiAgICAgICAgICAgICAgICBjb25maWc6IG1ha2VDb25maWcobmFtZSkKICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICB9OwoKICAgIG1haW4gPSBmdW5jdGlvbiAobmFtZSwgZGVwcywgY2FsbGJhY2ssIHJlbE5hbWUpIHsKICAgICAgICB2YXIgY2pzTW9kdWxlLCBkZXBOYW1lLCByZXQsIG1hcCwgaSwKICAgICAgICAgICAgYXJncyA9IFtdLAogICAgICAgICAgICBjYWxsYmFja1R5cGUgPSB0eXBlb2YgY2FsbGJhY2ssCiAgICAgICAgICAgIHVzaW5nRXhwb3J0czsKCiAgICAgICAgLy9Vc2UgbmFtZSBpZiBubyByZWxOYW1lCiAgICAgICAgcmVsTmFtZSA9IHJlbE5hbWUgfHwgbmFtZTsKCiAgICAgICAgLy9DYWxsIHRoZSBjYWxsYmFjayB0byBkZWZpbmUgdGhlIG1vZHVsZSwgaWYgbmVjZXNzYXJ5LgogICAgICAgIGlmIChjYWxsYmFja1R5cGUgPT09ICd1bmRlZmluZWQnIHx8IGNhbGxiYWNrVHlwZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAvL1B1bGwgb3V0IHRoZSBkZWZpbmVkIGRlcGVuZGVuY2llcyBhbmQgcGFzcyB0aGUgb3JkZXJlZAogICAgICAgICAgICAvL3ZhbHVlcyB0byB0aGUgY2FsbGJhY2suCiAgICAgICAgICAgIC8vRGVmYXVsdCB0byBbcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlXSBpZiBubyBkZXBzCiAgICAgICAgICAgIGRlcHMgPSAhZGVwcy5sZW5ndGggJiYgY2FsbGJhY2subGVuZ3RoID8gWydyZXF1aXJlJywgJ2V4cG9ydHMnLCAnbW9kdWxlJ10gOiBkZXBzOwogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgbWFwID0gbWFrZU1hcChkZXBzW2ldLCByZWxOYW1lKTsKICAgICAgICAgICAgICAgIGRlcE5hbWUgPSBtYXAuZjsKCiAgICAgICAgICAgICAgICAvL0Zhc3QgcGF0aCBDb21tb25KUyBzdGFuZGFyZCBkZXBlbmRlbmNpZXMuCiAgICAgICAgICAgICAgICBpZiAoZGVwTmFtZSA9PT0gInJlcXVpcmUiKSB7CiAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSA9IGhhbmRsZXJzLnJlcXVpcmUobmFtZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRlcE5hbWUgPT09ICJleHBvcnRzIikgewogICAgICAgICAgICAgICAgICAgIC8vQ29tbW9uSlMgbW9kdWxlIHNwZWMgMS4xCiAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSA9IGhhbmRsZXJzLmV4cG9ydHMobmFtZSk7CiAgICAgICAgICAgICAgICAgICAgdXNpbmdFeHBvcnRzID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVwTmFtZSA9PT0gIm1vZHVsZSIpIHsKICAgICAgICAgICAgICAgICAgICAvL0NvbW1vbkpTIG1vZHVsZSBzcGVjIDEuMQogICAgICAgICAgICAgICAgICAgIGNqc01vZHVsZSA9IGFyZ3NbaV0gPSBoYW5kbGVycy5tb2R1bGUobmFtZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc1Byb3AoZGVmaW5lZCwgZGVwTmFtZSkgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzUHJvcCh3YWl0aW5nLCBkZXBOYW1lKSB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNQcm9wKGRlZmluaW5nLCBkZXBOYW1lKSkgewogICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBjYWxsRGVwKGRlcE5hbWUpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXAucCkgewogICAgICAgICAgICAgICAgICAgIG1hcC5wLmxvYWQobWFwLm4sIG1ha2VSZXF1aXJlKHJlbE5hbWUsIHRydWUpLCBtYWtlTG9hZChkZXBOYW1lKSwge30pOwogICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBkZWZpbmVkW2RlcE5hbWVdOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobmFtZSArICcgbWlzc2luZyAnICsgZGVwTmFtZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldCA9IGNhbGxiYWNrID8gY2FsbGJhY2suYXBwbHkoZGVmaW5lZFtuYW1lXSwgYXJncykgOiB1bmRlZmluZWQ7CgogICAgICAgICAgICBpZiAobmFtZSkgewogICAgICAgICAgICAgICAgLy9JZiBzZXR0aW5nIGV4cG9ydHMgdmlhICJtb2R1bGUiIGlzIGluIHBsYXksCiAgICAgICAgICAgICAgICAvL2Zhdm9yIHRoYXQgb3ZlciByZXR1cm4gdmFsdWUgYW5kIGV4cG9ydHMuIEFmdGVyIHRoYXQsCiAgICAgICAgICAgICAgICAvL2Zhdm9yIGEgbm9uLXVuZGVmaW5lZCByZXR1cm4gdmFsdWUgb3ZlciBleHBvcnRzIHVzZS4KICAgICAgICAgICAgICAgIGlmIChjanNNb2R1bGUgJiYgY2pzTW9kdWxlLmV4cG9ydHMgIT09IHVuZGVmICYmCiAgICAgICAgICAgICAgICAgICAgICAgIGNqc01vZHVsZS5leHBvcnRzICE9PSBkZWZpbmVkW25hbWVdKSB7CiAgICAgICAgICAgICAgICAgICAgZGVmaW5lZFtuYW1lXSA9IGNqc01vZHVsZS5leHBvcnRzOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXQgIT09IHVuZGVmIHx8ICF1c2luZ0V4cG9ydHMpIHsKICAgICAgICAgICAgICAgICAgICAvL1VzZSB0aGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIGZ1bmN0aW9uLgogICAgICAgICAgICAgICAgICAgIGRlZmluZWRbbmFtZV0gPSByZXQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKG5hbWUpIHsKICAgICAgICAgICAgLy9NYXkganVzdCBiZSBhbiBvYmplY3QgZGVmaW5pdGlvbiBmb3IgdGhlIG1vZHVsZS4gT25seQogICAgICAgICAgICAvL3dvcnJ5IGFib3V0IGRlZmluaW5nIGlmIGhhdmUgYSBtb2R1bGUgbmFtZS4KICAgICAgICAgICAgZGVmaW5lZFtuYW1lXSA9IGNhbGxiYWNrOwogICAgICAgIH0KICAgIH07CgogICAgcmVxdWlyZWpzID0gcmVxdWlyZSA9IHJlcSA9IGZ1bmN0aW9uIChkZXBzLCBjYWxsYmFjaywgcmVsTmFtZSwgZm9yY2VTeW5jLCBhbHQpIHsKICAgICAgICBpZiAodHlwZW9mIGRlcHMgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGlmIChoYW5kbGVyc1tkZXBzXSkgewogICAgICAgICAgICAgICAgLy9jYWxsYmFjayBpbiB0aGlzIGNhc2UgaXMgcmVhbGx5IHJlbE5hbWUKICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyc1tkZXBzXShjYWxsYmFjayk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9KdXN0IHJldHVybiB0aGUgbW9kdWxlIHdhbnRlZC4gSW4gdGhpcyBzY2VuYXJpbywgdGhlCiAgICAgICAgICAgIC8vZGVwcyBhcmcgaXMgdGhlIG1vZHVsZSBuYW1lLCBhbmQgc2Vjb25kIGFyZyAoaWYgcGFzc2VkKQogICAgICAgICAgICAvL2lzIGp1c3QgdGhlIHJlbE5hbWUuCiAgICAgICAgICAgIC8vTm9ybWFsaXplIG1vZHVsZSBuYW1lLCBpZiBpdCBjb250YWlucyAuIG9yIC4uCiAgICAgICAgICAgIHJldHVybiBjYWxsRGVwKG1ha2VNYXAoZGVwcywgY2FsbGJhY2spLmYpOwogICAgICAgIH0gZWxzZSBpZiAoIWRlcHMuc3BsaWNlKSB7CiAgICAgICAgICAgIC8vZGVwcyBpcyBhIGNvbmZpZyBvYmplY3QsIG5vdCBhbiBhcnJheS4KICAgICAgICAgICAgY29uZmlnID0gZGVwczsKICAgICAgICAgICAgaWYgKGNvbmZpZy5kZXBzKSB7CiAgICAgICAgICAgICAgICByZXEoY29uZmlnLmRlcHMsIGNvbmZpZy5jYWxsYmFjayk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFjYWxsYmFjaykgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoY2FsbGJhY2suc3BsaWNlKSB7CiAgICAgICAgICAgICAgICAvL2NhbGxiYWNrIGlzIGFuIGFycmF5LCB3aGljaCBtZWFucyBpdCBpcyBhIGRlcGVuZGVuY3kgbGlzdC4KICAgICAgICAgICAgICAgIC8vQWRqdXN0IGFyZ3MgaWYgdGhlcmUgYXJlIGRlcGVuZGVuY2llcwogICAgICAgICAgICAgICAgZGVwcyA9IGNhbGxiYWNrOwogICAgICAgICAgICAgICAgY2FsbGJhY2sgPSByZWxOYW1lOwogICAgICAgICAgICAgICAgcmVsTmFtZSA9IG51bGw7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkZXBzID0gdW5kZWY7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vU3VwcG9ydCByZXF1aXJlKFsnYSddKQogICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307CgogICAgICAgIC8vSWYgcmVsTmFtZSBpcyBhIGZ1bmN0aW9uLCBpdCBpcyBhbiBlcnJiYWNrIGhhbmRsZXIsCiAgICAgICAgLy9zbyByZW1vdmUgaXQuCiAgICAgICAgaWYgKHR5cGVvZiByZWxOYW1lID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIHJlbE5hbWUgPSBmb3JjZVN5bmM7CiAgICAgICAgICAgIGZvcmNlU3luYyA9IGFsdDsKICAgICAgICB9CgogICAgICAgIC8vU2ltdWxhdGUgYXN5bmMgY2FsbGJhY2s7CiAgICAgICAgaWYgKGZvcmNlU3luYykgewogICAgICAgICAgICBtYWluKHVuZGVmLCBkZXBzLCBjYWxsYmFjaywgcmVsTmFtZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9Vc2luZyBhIG5vbi16ZXJvIHZhbHVlIGJlY2F1c2Ugb2YgY29uY2VybiBmb3Igd2hhdCBvbGQgYnJvd3NlcnMKICAgICAgICAgICAgLy9kbywgYW5kIGxhdGVzdCBicm93c2VycyAidXBncmFkZSIgdG8gNCBpZiBsb3dlciB2YWx1ZSBpcyB1c2VkOgogICAgICAgICAgICAvL2h0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RpbWVycy5odG1sI2RvbS13aW5kb3d0aW1lcnMtc2V0dGltZW91dDoKICAgICAgICAgICAgLy9JZiB3YW50IGEgdmFsdWUgaW1tZWRpYXRlbHksIHVzZSByZXF1aXJlKCdpZCcpIGluc3RlYWQgLS0gc29tZXRoaW5nCiAgICAgICAgICAgIC8vdGhhdCB3b3JrcyBpbiBhbG1vbmQgb24gdGhlIGdsb2JhbCBsZXZlbCwgYnV0IG5vdCBndWFyYW50ZWVkIGFuZAogICAgICAgICAgICAvL3VubGlrZWx5IHRvIHdvcmsgaW4gb3RoZXIgQU1EIGltcGxlbWVudGF0aW9ucy4KICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBtYWluKHVuZGVmLCBkZXBzLCBjYWxsYmFjaywgcmVsTmFtZSk7CiAgICAgICAgICAgIH0sIDQpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJlcTsKICAgIH07CgogICAgLyoqCiAgICAgKiBKdXN0IGRyb3BzIHRoZSBjb25maWcgb24gdGhlIGZsb29yLCBidXQgcmV0dXJucyByZXEgaW4gY2FzZQogICAgICogdGhlIGNvbmZpZyByZXR1cm4gdmFsdWUgaXMgdXNlZC4KICAgICAqLwogICAgcmVxLmNvbmZpZyA9IGZ1bmN0aW9uIChjZmcpIHsKICAgICAgICByZXR1cm4gcmVxKGNmZyk7CiAgICB9OwoKICAgIC8qKgogICAgICogRXhwb3NlIG1vZHVsZSByZWdpc3RyeSBmb3IgZGVidWdnaW5nIGFuZCB0b29saW5nCiAgICAgKi8KICAgIHJlcXVpcmVqcy5fZGVmaW5lZCA9IGRlZmluZWQ7CgogICAgZGVmaW5lID0gZnVuY3Rpb24gKG5hbWUsIGRlcHMsIGNhbGxiYWNrKSB7CgogICAgICAgIC8vVGhpcyBtb2R1bGUgbWF5IG5vdCBoYXZlIGRlcGVuZGVuY2llcwogICAgICAgIGlmICghZGVwcy5zcGxpY2UpIHsKICAgICAgICAgICAgLy9kZXBzIGlzIG5vdCBhbiBhcnJheSwgc28gcHJvYmFibHkgbWVhbnMKICAgICAgICAgICAgLy9hbiBvYmplY3QgbGl0ZXJhbCBvciBmYWN0b3J5IGZ1bmN0aW9uIGZvcgogICAgICAgICAgICAvL3RoZSB2YWx1ZS4gQWRqdXN0IGFyZ3MuCiAgICAgICAgICAgIGNhbGxiYWNrID0gZGVwczsKICAgICAgICAgICAgZGVwcyA9IFtdOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFoYXNQcm9wKGRlZmluZWQsIG5hbWUpICYmICFoYXNQcm9wKHdhaXRpbmcsIG5hbWUpKSB7CiAgICAgICAgICAgIHdhaXRpbmdbbmFtZV0gPSBbbmFtZSwgZGVwcywgY2FsbGJhY2tdOwogICAgICAgIH0KICAgIH07CgogICAgZGVmaW5lLmFtZCA9IHsKICAgICAgICBqUXVlcnk6IHRydWUKICAgIH07Cn0oKSk7CgpkZWZpbmUoImNvbXBvbmVudHMvYWxtb25kL2FsbW9uZC5qcyIsIGZ1bmN0aW9uKCl7fSk7CgovKiEKICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2MS4xMS4wCiAqIGh0dHA6Ly9qcXVlcnkuY29tLwogKgogKiBJbmNsdWRlcyBTaXp6bGUuanMKICogaHR0cDovL3NpenpsZWpzLmNvbS8KICoKICogQ29weXJpZ2h0IDIwMDUsIDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UKICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKgogKiBEYXRlOiAyMDE0LTAxLTIzVDIxOjAyWgogKi8KCihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkgewoKCWlmICggdHlwZW9mIG1vZHVsZSA9PT0gIm9iamVjdCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAib2JqZWN0IiApIHsKCQkvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIHdpbmRvdyBpcyBwcmVzZW50LAoJCS8vIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkKCQkvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGluaGVyZW50bHkgcG9zc2VzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudAoJCS8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBqUXVlcnktbWFraW5nIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMKCQkvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIHdpbmRvdwoJCS8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoImpxdWVyeSIpKHdpbmRvdyk7CgkJLy8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mbwoJCW1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID8KCQkJZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOgoJCQlmdW5jdGlvbiggdyApIHsKCQkJCWlmICggIXcuZG9jdW1lbnQgKSB7CgkJCQkJdGhyb3cgbmV3IEVycm9yKCAialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCIgKTsKCQkJCX0KCQkJCXJldHVybiBmYWN0b3J5KCB3ICk7CgkJCX07Cgl9IGVsc2UgewoJCWZhY3RvcnkoIGdsb2JhbCApOwoJfQoKLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXQKfSh0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkgewoKLy8gQ2FuJ3QgZG8gdGhpcyBiZWNhdXNlIHNldmVyYWwgYXBwcyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZQovLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWYKLy8geW91IHRyeSB0byB0cmFjZSB0aHJvdWdoICJ1c2Ugc3RyaWN0IiBjYWxsIGNoYWlucy4gKCMxMzMzNSkKLy8gU3VwcG9ydDogRmlyZWZveCAxOCsKLy8KCnZhciBkZWxldGVkSWRzID0gW107Cgp2YXIgc2xpY2UgPSBkZWxldGVkSWRzLnNsaWNlOwoKdmFyIGNvbmNhdCA9IGRlbGV0ZWRJZHMuY29uY2F0OwoKdmFyIHB1c2ggPSBkZWxldGVkSWRzLnB1c2g7Cgp2YXIgaW5kZXhPZiA9IGRlbGV0ZWRJZHMuaW5kZXhPZjsKCnZhciBjbGFzczJ0eXBlID0ge307Cgp2YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nOwoKdmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7Cgp2YXIgdHJpbSA9ICIiLnRyaW07Cgp2YXIgc3VwcG9ydCA9IHt9OwoKCgp2YXIKCXZlcnNpb24gPSAiMS4xMS4wIiwKCgkvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeQoJalF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkgewoJCS8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJwoJCS8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpCgkJcmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTsKCX0sCgoJLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQIChoZXJlJ3MgbG9va2luZyBhdCB5b3UsIFNhZmFyaSA1LjAgYW5kIElFKQoJcnRyaW0gPSAvXltcc1x1RkVGRlx4QTBdK3xbXHNcdUZFRkZceEEwXSskL2csCgoJLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nCglybXNQcmVmaXggPSAvXi1tcy0vLAoJcmRhc2hBbHBoYSA9IC8tKFtcZGEtel0pL2dpLAoKCS8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKCkKCWZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7CgkJcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpOwoJfTsKCmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7CgkvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkCglqcXVlcnk6IHZlcnNpb24sCgoJY29uc3RydWN0b3I6IGpRdWVyeSwKCgkvLyBTdGFydCB3aXRoIGFuIGVtcHR5IHNlbGVjdG9yCglzZWxlY3RvcjogIiIsCgoJLy8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwCglsZW5ndGg6IDAsCgoJdG9BcnJheTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTsKCX0sCgoJLy8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUgoJLy8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXkKCWdldDogZnVuY3Rpb24oIG51bSApIHsKCQlyZXR1cm4gbnVtICE9IG51bGwgPwoKCQkJLy8gUmV0dXJuIGEgJ2NsZWFuJyBhcnJheQoJCQkoIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF0gKSA6CgoJCQkvLyBSZXR1cm4ganVzdCB0aGUgb2JqZWN0CgkJCXNsaWNlLmNhbGwoIHRoaXMgKTsKCX0sCgoJLy8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFjawoJLy8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpCglwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHsKCgkJLy8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXQKCQl2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7CgoJCS8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpCgkJcmV0LnByZXZPYmplY3QgPSB0aGlzOwoJCXJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0OwoKCQkvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldAoJCXJldHVybiByZXQ7Cgl9LAoKCS8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuCgkvLyAoWW91IGNhbiBzZWVkIHRoZSBhcmd1bWVudHMgd2l0aCBhbiBhcnJheSBvZiBhcmdzLCBidXQgdGhpcyBpcwoJLy8gb25seSB1c2VkIGludGVybmFsbHkuKQoJZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrLCBhcmdzICkgewoJCXJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2ssIGFyZ3MgKTsKCX0sCgoJbWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7CgkJcmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkgewoJCQlyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApOwoJCX0pKTsKCX0sCgoJc2xpY2U6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7Cgl9LAoKCWZpcnN0OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5lcSggMCApOwoJfSwKCglsYXN0OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5lcSggLTEgKTsKCX0sCgoJZXE6IGZ1bmN0aW9uKCBpICkgewoJCXZhciBsZW4gPSB0aGlzLmxlbmd0aCwKCQkJaiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTsKCQlyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzW2pdIF0gOiBbXSApOwoJfSwKCgllbmQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcihudWxsKTsKCX0sCgoJLy8gRm9yIGludGVybmFsIHVzZSBvbmx5LgoJLy8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuCglwdXNoOiBwdXNoLAoJc29ydDogZGVsZXRlZElkcy5zb3J0LAoJc3BsaWNlOiBkZWxldGVkSWRzLnNwbGljZQp9OwoKalF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHsKCXZhciBzcmMsIGNvcHlJc0FycmF5LCBjb3B5LCBuYW1lLCBvcHRpb25zLCBjbG9uZSwKCQl0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sCgkJaSA9IDEsCgkJbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCwKCQlkZWVwID0gZmFsc2U7CgoJLy8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvbgoJaWYgKCB0eXBlb2YgdGFyZ2V0ID09PSAiYm9vbGVhbiIgKSB7CgkJZGVlcCA9IHRhcmdldDsKCgkJLy8gc2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldAoJCXRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9OwoJCWkrKzsKCX0KCgkvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSkKCWlmICggdHlwZW9mIHRhcmdldCAhPT0gIm9iamVjdCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKHRhcmdldCkgKSB7CgkJdGFyZ2V0ID0ge307Cgl9CgoJLy8gZXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkCglpZiAoIGkgPT09IGxlbmd0aCApIHsKCQl0YXJnZXQgPSB0aGlzOwoJCWktLTsKCX0KCglmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHsKCQkvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzCgkJaWYgKCAob3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdKSAhPSBudWxsICkgewoJCQkvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0CgkJCWZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHsKCQkJCXNyYyA9IHRhcmdldFsgbmFtZSBdOwoJCQkJY29weSA9IG9wdGlvbnNbIG5hbWUgXTsKCgkJCQkvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wCgkJCQlpZiAoIHRhcmdldCA9PT0gY29weSApIHsKCQkJCQljb250aW51ZTsKCQkJCX0KCgkJCQkvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXMKCQkJCWlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoY29weSkpICkgKSB7CgkJCQkJaWYgKCBjb3B5SXNBcnJheSApIHsKCQkJCQkJY29weUlzQXJyYXkgPSBmYWxzZTsKCQkJCQkJY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdOwoKCQkJCQl9IGVsc2UgewoJCQkJCQljbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307CgkJCQkJfQoKCQkJCQkvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW0KCQkJCQl0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7CgoJCQkJLy8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlcwoJCQkJfSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkgewoJCQkJCXRhcmdldFsgbmFtZSBdID0gY29weTsKCQkJCX0KCQkJfQoJCX0KCX0KCgkvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdAoJcmV0dXJuIHRhcmdldDsKfTsKCmpRdWVyeS5leHRlbmQoewoJLy8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlCglleHBhbmRvOiAialF1ZXJ5IiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXEQvZywgIiIgKSwKCgkvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZQoJaXNSZWFkeTogdHJ1ZSwKCgllcnJvcjogZnVuY3Rpb24oIG1zZyApIHsKCQl0aHJvdyBuZXcgRXJyb3IoIG1zZyApOwoJfSwKCglub29wOiBmdW5jdGlvbigpIHt9LAoKCS8vIFNlZSB0ZXN0L3VuaXQvY29yZS5qcyBmb3IgZGV0YWlscyBjb25jZXJuaW5nIGlzRnVuY3Rpb24uCgkvLyBTaW5jZSB2ZXJzaW9uIDEuMywgRE9NIG1ldGhvZHMgYW5kIGZ1bmN0aW9ucyBsaWtlIGFsZXJ0CgkvLyBhcmVuJ3Qgc3VwcG9ydGVkLiBUaGV5IHJldHVybiBmYWxzZSBvbiBJRSAoIzI5NjgpLgoJaXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHsKCQlyZXR1cm4galF1ZXJ5LnR5cGUob2JqKSA9PT0gImZ1bmN0aW9uIjsKCX0sCgoJaXNBcnJheTogQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiggb2JqICkgewoJCXJldHVybiBqUXVlcnkudHlwZShvYmopID09PSAiYXJyYXkiOwoJfSwKCglpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHsKCQkvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqLwoJCXJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT0gb2JqLndpbmRvdzsKCX0sCgoJaXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkgewoJCS8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8IiIpCgkJLy8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoIjB4Li4uIikKCQkvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU4KCQlyZXR1cm4gb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgPj0gMDsKCX0sCgoJaXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHsKCQl2YXIgbmFtZTsKCQlmb3IgKCBuYW1lIGluIG9iaiApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQlyZXR1cm4gdHJ1ZTsKCX0sCgoJaXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHsKCQl2YXIga2V5OwoKCQkvLyBNdXN0IGJlIGFuIE9iamVjdC4KCQkvLyBCZWNhdXNlIG9mIElFLCB3ZSBhbHNvIGhhdmUgdG8gY2hlY2sgdGhlIHByZXNlbmNlIG9mIHRoZSBjb25zdHJ1Y3RvciBwcm9wZXJ0eS4KCQkvLyBNYWtlIHN1cmUgdGhhdCBET00gbm9kZXMgYW5kIHdpbmRvdyBvYmplY3RzIGRvbid0IHBhc3MgdGhyb3VnaCwgYXMgd2VsbAoJCWlmICggIW9iaiB8fCBqUXVlcnkudHlwZShvYmopICE9PSAib2JqZWN0IiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJdHJ5IHsKCQkJLy8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdAoJCQlpZiAoIG9iai5jb25zdHJ1Y3RvciAmJgoJCQkJIWhhc093bi5jYWxsKG9iaiwgImNvbnN0cnVjdG9yIikgJiYKCQkJCSFoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCAiaXNQcm90b3R5cGVPZiIpICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfSBjYXRjaCAoIGUgKSB7CgkJCS8vIElFOCw5IFdpbGwgdGhyb3cgZXhjZXB0aW9ucyBvbiBjZXJ0YWluIGhvc3Qgb2JqZWN0cyAjOTg5NwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBTdXBwb3J0OiBJRTw5CgkJLy8gSGFuZGxlIGl0ZXJhdGlvbiBvdmVyIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlZm9yZSBvd24gcHJvcGVydGllcy4KCQlpZiAoIHN1cHBvcnQub3duTGFzdCApIHsKCQkJZm9yICgga2V5IGluIG9iaiApIHsKCQkJCXJldHVybiBoYXNPd24uY2FsbCggb2JqLCBrZXkgKTsKCQkJfQoJCX0KCgkJLy8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsCgkJLy8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uCgkJZm9yICgga2V5IGluIG9iaiApIHt9CgoJCXJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCBoYXNPd24uY2FsbCggb2JqLCBrZXkgKTsKCX0sCgoJdHlwZTogZnVuY3Rpb24oIG9iaiApIHsKCQlpZiAoIG9iaiA9PSBudWxsICkgewoJCQlyZXR1cm4gb2JqICsgIiI7CgkJfQoJCXJldHVybiB0eXBlb2Ygb2JqID09PSAib2JqZWN0IiB8fCB0eXBlb2Ygb2JqID09PSAiZnVuY3Rpb24iID8KCQkJY2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgIm9iamVjdCIgOgoJCQl0eXBlb2Ygb2JqOwoJfSwKCgkvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dAoJLy8gV29ya2Fyb3VuZHMgYmFzZWQgb24gZmluZGluZ3MgYnkgSmltIERyaXNjb2xsCgkvLyBodHRwOi8vd2VibG9ncy5qYXZhLm5ldC9ibG9nL2RyaXNjb2xsL2FyY2hpdmUvMjAwOS8wOS8wOC9ldmFsLWphdmFzY3JpcHQtZ2xvYmFsLWNvbnRleHQKCWdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBkYXRhICkgewoJCWlmICggZGF0YSAmJiBqUXVlcnkudHJpbSggZGF0YSApICkgewoJCQkvLyBXZSB1c2UgZXhlY1NjcmlwdCBvbiBJbnRlcm5ldCBFeHBsb3JlcgoJCQkvLyBXZSB1c2UgYW4gYW5vbnltb3VzIGZ1bmN0aW9uIHNvIHRoYXQgY29udGV4dCBpcyB3aW5kb3cKCQkJLy8gcmF0aGVyIHRoYW4galF1ZXJ5IGluIEZpcmVmb3gKCQkJKCB3aW5kb3cuZXhlY1NjcmlwdCB8fCBmdW5jdGlvbiggZGF0YSApIHsKCQkJCXdpbmRvd1sgImV2YWwiIF0uY2FsbCggd2luZG93LCBkYXRhICk7CgkJCX0gKSggZGF0YSApOwoJCX0KCX0sCgoJLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlcwoJLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKQoJY2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkgewoJCXJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCAibXMtIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTsKCX0sCgoJbm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkgewoJCXJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpOwoJfSwKCgkvLyBhcmdzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5CgllYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjaywgYXJncyApIHsKCQl2YXIgdmFsdWUsCgkJCWkgPSAwLAoJCQlsZW5ndGggPSBvYmoubGVuZ3RoLAoJCQlpc0FycmF5ID0gaXNBcnJheWxpa2UoIG9iaiApOwoKCQlpZiAoIGFyZ3MgKSB7CgkJCWlmICggaXNBcnJheSApIHsKCQkJCWZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkgewoJCQkJCXZhbHVlID0gY2FsbGJhY2suYXBwbHkoIG9ialsgaSBdLCBhcmdzICk7CgoJCQkJCWlmICggdmFsdWUgPT09IGZhbHNlICkgewoJCQkJCQlicmVhazsKCQkJCQl9CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQlmb3IgKCBpIGluIG9iaiApIHsKCQkJCQl2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApOwoKCQkJCQlpZiAoIHZhbHVlID09PSBmYWxzZSApIHsKCQkJCQkJYnJlYWs7CgkJCQkJfQoJCQkJfQoJCQl9CgoJCS8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoCgkJfSBlbHNlIHsKCQkJaWYgKCBpc0FycmF5ICkgewoJCQkJZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJCQkJdmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTsKCgkJCQkJaWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7CgkJCQkJCWJyZWFrOwoJCQkJCX0KCQkJCX0KCQkJfSBlbHNlIHsKCQkJCWZvciAoIGkgaW4gb2JqICkgewoJCQkJCXZhbHVlID0gY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICk7CgoJCQkJCWlmICggdmFsdWUgPT09IGZhbHNlICkgewoJCQkJCQlicmVhazsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgoJCXJldHVybiBvYmo7Cgl9LAoKCS8vIFVzZSBuYXRpdmUgU3RyaW5nLnRyaW0gZnVuY3Rpb24gd2hlcmV2ZXIgcG9zc2libGUKCXRyaW06IHRyaW0gJiYgIXRyaW0uY2FsbCgiXHVGRUZGXHhBMCIpID8KCQlmdW5jdGlvbiggdGV4dCApIHsKCQkJcmV0dXJuIHRleHQgPT0gbnVsbCA/CgkJCQkiIiA6CgkJCQl0cmltLmNhbGwoIHRleHQgKTsKCQl9IDoKCgkJLy8gT3RoZXJ3aXNlIHVzZSBvdXIgb3duIHRyaW1taW5nIGZ1bmN0aW9uYWxpdHkKCQlmdW5jdGlvbiggdGV4dCApIHsKCQkJcmV0dXJuIHRleHQgPT0gbnVsbCA/CgkJCQkiIiA6CgkJCQkoIHRleHQgKyAiIiApLnJlcGxhY2UoIHJ0cmltLCAiIiApOwoJCX0sCgoJLy8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seQoJbWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkgewoJCXZhciByZXQgPSByZXN1bHRzIHx8IFtdOwoKCQlpZiAoIGFyciAhPSBudWxsICkgewoJCQlpZiAoIGlzQXJyYXlsaWtlKCBPYmplY3QoYXJyKSApICkgewoJCQkJalF1ZXJ5Lm1lcmdlKCByZXQsCgkJCQkJdHlwZW9mIGFyciA9PT0gInN0cmluZyIgPwoJCQkJCVsgYXJyIF0gOiBhcnIKCQkJCSk7CgkJCX0gZWxzZSB7CgkJCQlwdXNoLmNhbGwoIHJldCwgYXJyICk7CgkJCX0KCQl9CgoJCXJldHVybiByZXQ7Cgl9LAoKCWluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7CgkJdmFyIGxlbjsKCgkJaWYgKCBhcnIgKSB7CgkJCWlmICggaW5kZXhPZiApIHsKCQkJCXJldHVybiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApOwoJCQl9CgoJCQlsZW4gPSBhcnIubGVuZ3RoOwoJCQlpID0gaSA/IGkgPCAwID8gTWF0aC5tYXgoIDAsIGxlbiArIGkgKSA6IGkgOiAwOwoKCQkJZm9yICggOyBpIDwgbGVuOyBpKysgKSB7CgkJCQkvLyBTa2lwIGFjY2Vzc2luZyBpbiBzcGFyc2UgYXJyYXlzCgkJCQlpZiAoIGkgaW4gYXJyICYmIGFyclsgaSBdID09PSBlbGVtICkgewoJCQkJCXJldHVybiBpOwoJCQkJfQoJCQl9CgkJfQoKCQlyZXR1cm4gLTE7Cgl9LAoKCW1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHsKCQl2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsCgkJCWogPSAwLAoJCQlpID0gZmlyc3QubGVuZ3RoOwoKCQl3aGlsZSAoIGogPCBsZW4gKSB7CgkJCWZpcnN0WyBpKysgXSA9IHNlY29uZFsgaisrIF07CgkJfQoKCQkvLyBTdXBwb3J0OiBJRTw5CgkJLy8gV29ya2Fyb3VuZCBjYXN0aW5nIG9mIC5sZW5ndGggdG8gTmFOIG9uIG90aGVyd2lzZSBhcnJheWxpa2Ugb2JqZWN0cyAoZS5nLiwgTm9kZUxpc3RzKQoJCWlmICggbGVuICE9PSBsZW4gKSB7CgkJCXdoaWxlICggc2Vjb25kW2pdICE9PSB1bmRlZmluZWQgKSB7CgkJCQlmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGorKyBdOwoJCQl9CgkJfQoKCQlmaXJzdC5sZW5ndGggPSBpOwoKCQlyZXR1cm4gZmlyc3Q7Cgl9LAoKCWdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHsKCQl2YXIgY2FsbGJhY2tJbnZlcnNlLAoJCQltYXRjaGVzID0gW10sCgkJCWkgPSAwLAoJCQlsZW5ndGggPSBlbGVtcy5sZW5ndGgsCgkJCWNhbGxiYWNrRXhwZWN0ID0gIWludmVydDsKCgkJLy8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtcwoJCS8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uCgkJZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJCWNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApOwoJCQlpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7CgkJCQltYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTsKCQkJfQoJCX0KCgkJcmV0dXJuIG1hdGNoZXM7Cgl9LAoKCS8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seQoJbWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7CgkJdmFyIHZhbHVlLAoJCQlpID0gMCwKCQkJbGVuZ3RoID0gZWxlbXMubGVuZ3RoLAoJCQlpc0FycmF5ID0gaXNBcnJheWxpa2UoIGVsZW1zICksCgkJCXJldCA9IFtdOwoKCQkvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlcwoJCWlmICggaXNBcnJheSApIHsKCQkJZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJCQl2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTsKCgkJCQlpZiAoIHZhbHVlICE9IG51bGwgKSB7CgkJCQkJcmV0LnB1c2goIHZhbHVlICk7CgkJCQl9CgkJCX0KCgkJLy8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCwKCQl9IGVsc2UgewoJCQlmb3IgKCBpIGluIGVsZW1zICkgewoJCQkJdmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7CgoJCQkJaWYgKCB2YWx1ZSAhPSBudWxsICkgewoJCQkJCXJldC5wdXNoKCB2YWx1ZSApOwoJCQkJfQoJCQl9CgkJfQoKCQkvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzCgkJcmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApOwoJfSwKCgkvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHMKCWd1aWQ6IDEsCgoJLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55CgkvLyBhcmd1bWVudHMuCglwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkgewoJCXZhciBhcmdzLCBwcm94eSwgdG1wOwoKCQlpZiAoIHR5cGVvZiBjb250ZXh0ID09PSAic3RyaW5nIiApIHsKCQkJdG1wID0gZm5bIGNvbnRleHQgXTsKCQkJY29udGV4dCA9IGZuOwoJCQlmbiA9IHRtcDsKCQl9CgoJCS8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjCgkJLy8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC4KCQlpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHsKCQkJcmV0dXJuIHVuZGVmaW5lZDsKCQl9CgoJCS8vIFNpbXVsYXRlZCBiaW5kCgkJYXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApOwoJCXByb3h5ID0gZnVuY3Rpb24oKSB7CgkJCXJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApOwoJCX07CgoJCS8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZAoJCXByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrOwoKCQlyZXR1cm4gcHJveHk7Cgl9LAoKCW5vdzogZnVuY3Rpb24oKSB7CgkJcmV0dXJuICsoIG5ldyBEYXRlKCkgKTsKCX0sCgoJLy8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyCgkvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LgoJc3VwcG9ydDogc3VwcG9ydAp9KTsKCi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcApqUXVlcnkuZWFjaCgiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciIuc3BsaXQoIiAiKSwgZnVuY3Rpb24oaSwgbmFtZSkgewoJY2xhc3MydHlwZVsgIltvYmplY3QgIiArIG5hbWUgKyAiXSIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTsKfSk7CgpmdW5jdGlvbiBpc0FycmF5bGlrZSggb2JqICkgewoJdmFyIGxlbmd0aCA9IG9iai5sZW5ndGgsCgkJdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTsKCglpZiAoIHR5cGUgPT09ICJmdW5jdGlvbiIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHsKCQlyZXR1cm4gZmFsc2U7Cgl9CgoJaWYgKCBvYmoubm9kZVR5cGUgPT09IDEgJiYgbGVuZ3RoICkgewoJCXJldHVybiB0cnVlOwoJfQoKCXJldHVybiB0eXBlID09PSAiYXJyYXkiIHx8IGxlbmd0aCA9PT0gMCB8fAoJCXR5cGVvZiBsZW5ndGggPT09ICJudW1iZXIiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqOwp9CnZhciBTaXp6bGUgPQovKiEKICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjEuMTAuMTYKICogaHR0cDovL3NpenpsZWpzLmNvbS8KICoKICogQ29weXJpZ2h0IDIwMTMgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UKICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKgogKiBEYXRlOiAyMDE0LTAxLTEzCiAqLwooZnVuY3Rpb24oIHdpbmRvdyApIHsKCnZhciBpLAoJc3VwcG9ydCwKCUV4cHIsCglnZXRUZXh0LAoJaXNYTUwsCgljb21waWxlLAoJb3V0ZXJtb3N0Q29udGV4dCwKCXNvcnRJbnB1dCwKCWhhc0R1cGxpY2F0ZSwKCgkvLyBMb2NhbCBkb2N1bWVudCB2YXJzCglzZXREb2N1bWVudCwKCWRvY3VtZW50LAoJZG9jRWxlbSwKCWRvY3VtZW50SXNIVE1MLAoJcmJ1Z2d5UVNBLAoJcmJ1Z2d5TWF0Y2hlcywKCW1hdGNoZXMsCgljb250YWlucywKCgkvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhCglleHBhbmRvID0gInNpenpsZSIgKyAtKG5ldyBEYXRlKCkpLAoJcHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LAoJZGlycnVucyA9IDAsCglkb25lID0gMCwKCWNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLAoJdG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksCgljb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSwKCXNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkgewoJCWlmICggYSA9PT0gYiApIHsKCQkJaGFzRHVwbGljYXRlID0gdHJ1ZTsKCQl9CgkJcmV0dXJuIDA7Cgl9LAoKCS8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHMKCXN0cnVuZGVmaW5lZCA9IHR5cGVvZiB1bmRlZmluZWQsCglNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLAoKCS8vIEluc3RhbmNlIG1ldGhvZHMKCWhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksCglhcnIgPSBbXSwKCXBvcCA9IGFyci5wb3AsCglwdXNoX25hdGl2ZSA9IGFyci5wdXNoLAoJcHVzaCA9IGFyci5wdXNoLAoJc2xpY2UgPSBhcnIuc2xpY2UsCgkvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgaWYgd2UgY2FuJ3QgdXNlIGEgbmF0aXZlIG9uZQoJaW5kZXhPZiA9IGFyci5pbmRleE9mIHx8IGZ1bmN0aW9uKCBlbGVtICkgewoJCXZhciBpID0gMCwKCQkJbGVuID0gdGhpcy5sZW5ndGg7CgkJZm9yICggOyBpIDwgbGVuOyBpKysgKSB7CgkJCWlmICggdGhpc1tpXSA9PT0gZWxlbSApIHsKCQkJCXJldHVybiBpOwoJCQl9CgkJfQoJCXJldHVybiAtMTsKCX0sCgoJYm9vbGVhbnMgPSAiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWQiLAoKCS8vIFJlZ3VsYXIgZXhwcmVzc2lvbnMKCgkvLyBXaGl0ZXNwYWNlIGNoYXJhY3RlcnMgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2UKCXdoaXRlc3BhY2UgPSAiW1xceDIwXFx0XFxyXFxuXFxmXSIsCgkvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXN5bnRheC8jY2hhcmFjdGVycwoJY2hhcmFjdGVyRW5jb2RpbmcgPSAiKD86XFxcXC58W1xcdy1dfFteXFx4MDAtXFx4YTBdKSsiLAoKCS8vIExvb3NlbHkgbW9kZWxlZCBvbiBDU1MgaWRlbnRpZmllciBjaGFyYWN0ZXJzCgkvLyBBbiB1bnF1b3RlZCB2YWx1ZSBzaG91bGQgYmUgYSBDU1MgaWRlbnRpZmllciBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9ycwoJLy8gUHJvcGVyIHN5bnRheDogaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyCglpZGVudGlmaWVyID0gY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggInciLCAidyMiICksCgoJLy8gQWNjZXB0YWJsZSBvcGVyYXRvcnMgaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzCglhdHRyaWJ1dGVzID0gIlxcWyIgKyB3aGl0ZXNwYWNlICsgIiooIiArIGNoYXJhY3RlckVuY29kaW5nICsgIikiICsgd2hpdGVzcGFjZSArCgkJIiooPzooWypeJHwhfl0/PSkiICsgd2hpdGVzcGFjZSArICIqKD86KFsnXCJdKSgoPzpcXFxcLnxbXlxcXFxdKSo/KVxcM3woIiArIGlkZW50aWZpZXIgKyAiKXwpfCkiICsgd2hpdGVzcGFjZSArICIqXFxdIiwKCgkvLyBQcmVmZXIgYXJndW1lbnRzIHF1b3RlZCwKCS8vICAgdGhlbiBub3QgY29udGFpbmluZyBwc2V1ZG9zL2JyYWNrZXRzLAoJLy8gICB0aGVuIGF0dHJpYnV0ZSBzZWxlY3RvcnMvbm9uLXBhcmVudGhldGljYWwgZXhwcmVzc2lvbnMsCgkvLyAgIHRoZW4gYW55dGhpbmcgZWxzZQoJLy8gVGhlc2UgcHJlZmVyZW5jZXMgYXJlIGhlcmUgdG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzCgkvLyAgIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIFBTRVVETyBwcmVGaWx0ZXIKCXBzZXVkb3MgPSAiOigiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyAiKSg/OlxcKCgoWydcIl0pKCg/OlxcXFwufFteXFxcXF0pKj8pXFwzfCgoPzpcXFxcLnxbXlxcXFwoKVtcXF1dfCIgKyBhdHRyaWJ1dGVzLnJlcGxhY2UoIDMsIDggKSArICIpKil8LiopXFwpfCkiLAoKCS8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXIKCXJ0cmltID0gbmV3IFJlZ0V4cCggIl4iICsgd2hpdGVzcGFjZSArICIrfCgoPzpefFteXFxcXF0pKD86XFxcXC4pKikiICsgd2hpdGVzcGFjZSArICIrJCIsICJnIiApLAoKCXJjb21tYSA9IG5ldyBSZWdFeHAoICJeIiArIHdoaXRlc3BhY2UgKyAiKiwiICsgd2hpdGVzcGFjZSArICIqIiApLAoJcmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggIl4iICsgd2hpdGVzcGFjZSArICIqKFs+K35dfCIgKyB3aGl0ZXNwYWNlICsgIikiICsgd2hpdGVzcGFjZSArICIqIiApLAoKCXJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCAiPSIgKyB3aGl0ZXNwYWNlICsgIiooW15cXF0nXCJdKj8pIiArIHdoaXRlc3BhY2UgKyAiKlxcXSIsICJnIiApLAoKCXJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksCglyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoICJeIiArIGlkZW50aWZpZXIgKyAiJCIgKSwKCgltYXRjaEV4cHIgPSB7CgkJIklEIjogbmV3IFJlZ0V4cCggIl4jKCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArICIpIiApLAoJCSJDTEFTUyI6IG5ldyBSZWdFeHAoICJeXFwuKCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArICIpIiApLAoJCSJUQUciOiBuZXcgUmVnRXhwKCAiXigiICsgY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggInciLCAidyoiICkgKyAiKSIgKSwKCQkiQVRUUiI6IG5ldyBSZWdFeHAoICJeIiArIGF0dHJpYnV0ZXMgKSwKCQkiUFNFVURPIjogbmV3IFJlZ0V4cCggIl4iICsgcHNldWRvcyApLAoJCSJDSElMRCI6IG5ldyBSZWdFeHAoICJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXCgiICsgd2hpdGVzcGFjZSArCgkJCSIqKGV2ZW58b2RkfCgoWystXXwpKFxcZCopbnwpIiArIHdoaXRlc3BhY2UgKyAiKig/OihbKy1dfCkiICsgd2hpdGVzcGFjZSArCgkJCSIqKFxcZCspfCkpIiArIHdoaXRlc3BhY2UgKyAiKlxcKXwpIiwgImkiICksCgkJImJvb2wiOiBuZXcgUmVnRXhwKCAiXig/OiIgKyBib29sZWFucyArICIpJCIsICJpIiApLAoJCS8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKQoJCS8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGAKCQkibmVlZHNDb250ZXh0IjogbmV3IFJlZ0V4cCggIl4iICsgd2hpdGVzcGFjZSArICIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXCgiICsKCQkJd2hpdGVzcGFjZSArICIqKCg/Oi1cXGQpP1xcZCopIiArIHdoaXRlc3BhY2UgKyAiKlxcKXwpKD89W14tXXwkKSIsICJpIiApCgl9LAoKCXJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLAoJcmhlYWRlciA9IC9eaFxkJC9pLAoKCXJuYXRpdmUgPSAvXltee10rXHtccypcW25hdGl2ZSBcdy8sCgoJLy8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzCglycXVpY2tFeHByID0gL14oPzojKFtcdy1dKyl8KFx3Kyl8XC4oW1x3LV0rKSkkLywKCglyc2libGluZyA9IC9bK35dLywKCXJlc2NhcGUgPSAvJ3xcXC9nLAoKCS8vIENTUyBlc2NhcGVzIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnMKCXJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoICJcXFxcKFtcXGRhLWZdezEsNn0iICsgd2hpdGVzcGFjZSArICI/fCgiICsgd2hpdGVzcGFjZSArICIpfC4pIiwgImlnIiApLAoJZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkgewoJCXZhciBoaWdoID0gIjB4IiArIGVzY2FwZWQgLSAweDEwMDAwOwoJCS8vIE5hTiBtZWFucyBub24tY29kZXBvaW50CgkJLy8gU3VwcG9ydDogRmlyZWZveAoJCS8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgKyIweCIKCQlyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/CgkJCWVzY2FwZWQgOgoJCQloaWdoIDwgMCA/CgkJCQkvLyBCTVAgY29kZXBvaW50CgkJCQlTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDoKCQkJCS8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKQoJCQkJU3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7Cgl9OwoKLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0ICkKdHJ5IHsKCXB1c2guYXBwbHkoCgkJKGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLAoJCXByZWZlcnJlZERvYy5jaGlsZE5vZGVzCgkpOwoJLy8gU3VwcG9ydDogQW5kcm9pZDw0LjAKCS8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHkKCWFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7Cn0gY2F0Y2ggKCBlICkgewoJcHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggPwoKCQkvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZQoJCWZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHsKCQkJcHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7CgkJfSA6CgoJCS8vIFN1cHBvcnQ6IElFPDkKCQkvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5CgkJZnVuY3Rpb24oIHRhcmdldCwgZWxzICkgewoJCQl2YXIgaiA9IHRhcmdldC5sZW5ndGgsCgkJCQlpID0gMDsKCQkJLy8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoCgkJCXdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge30KCQkJdGFyZ2V0Lmxlbmd0aCA9IGogLSAxOwoJCX0KCX07Cn0KCmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7Cgl2YXIgbWF0Y2gsIGVsZW0sIG0sIG5vZGVUeXBlLAoJCS8vIFFTQSB2YXJzCgkJaSwgZ3JvdXBzLCBvbGQsIG5pZCwgbmV3Q29udGV4dCwgbmV3U2VsZWN0b3I7CgoJaWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHsKCQlzZXREb2N1bWVudCggY29udGV4dCApOwoJfQoKCWNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50OwoJcmVzdWx0cyA9IHJlc3VsdHMgfHwgW107CgoJaWYgKCAhc2VsZWN0b3IgfHwgdHlwZW9mIHNlbGVjdG9yICE9PSAic3RyaW5nIiApIHsKCQlyZXR1cm4gcmVzdWx0czsKCX0KCglpZiAoIChub2RlVHlwZSA9IGNvbnRleHQubm9kZVR5cGUpICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICkgewoJCXJldHVybiBbXTsKCX0KCglpZiAoIGRvY3VtZW50SXNIVE1MICYmICFzZWVkICkgewoKCQkvLyBTaG9ydGN1dHMKCQlpZiAoIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7CgkJCS8vIFNwZWVkLXVwOiBTaXp6bGUoIiNJRCIpCgkJCWlmICggKG0gPSBtYXRjaFsxXSkgKSB7CgkJCQlpZiAoIG5vZGVUeXBlID09PSA5ICkgewoJCQkJCWVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICk7CgkJCQkJLy8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnMKCQkJCQkvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50IChqUXVlcnkgIzY5NjMpCgkJCQkJaWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHsKCQkJCQkJLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFLCBPcGVyYSwgYW5kIFdlYmtpdCByZXR1cm4gaXRlbXMKCQkJCQkJLy8gYnkgbmFtZSBpbnN0ZWFkIG9mIElECgkJCQkJCWlmICggZWxlbS5pZCA9PT0gbSApIHsKCQkJCQkJCXJlc3VsdHMucHVzaCggZWxlbSApOwoJCQkJCQkJcmV0dXJuIHJlc3VsdHM7CgkJCQkJCX0KCQkJCQl9IGVsc2UgewoJCQkJCQlyZXR1cm4gcmVzdWx0czsKCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCS8vIENvbnRleHQgaXMgbm90IGEgZG9jdW1lbnQKCQkJCQlpZiAoIGNvbnRleHQub3duZXJEb2N1bWVudCAmJiAoZWxlbSA9IGNvbnRleHQub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbSApKSAmJgoJCQkJCQljb250YWlucyggY29udGV4dCwgZWxlbSApICYmIGVsZW0uaWQgPT09IG0gKSB7CgkJCQkJCXJlc3VsdHMucHVzaCggZWxlbSApOwoJCQkJCQlyZXR1cm4gcmVzdWx0czsKCQkJCQl9CgkJCQl9CgoJCQkvLyBTcGVlZC11cDogU2l6emxlKCJUQUciKQoJCQl9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHsKCQkJCXB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTsKCQkJCXJldHVybiByZXN1bHRzOwoKCQkJLy8gU3BlZWQtdXA6IFNpenpsZSgiLkNMQVNTIikKCQkJfSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHsKCQkJCXB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7CgkJCQlyZXR1cm4gcmVzdWx0czsKCQkJfQoJCX0KCgkJLy8gUVNBIHBhdGgKCQlpZiAoIHN1cHBvcnQucXNhICYmICghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7CgkJCW5pZCA9IG9sZCA9IGV4cGFuZG87CgkJCW5ld0NvbnRleHQgPSBjb250ZXh0OwoJCQluZXdTZWxlY3RvciA9IG5vZGVUeXBlID09PSA5ICYmIHNlbGVjdG9yOwoKCQkJLy8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzCgkJCS8vIFdlIGNhbiB3b3JrIGFyb3VuZCB0aGlzIGJ5IHNwZWNpZnlpbmcgYW4gZXh0cmEgSUQgb24gdGhlIHJvb3QKCQkJLy8gYW5kIHdvcmtpbmcgdXAgZnJvbSB0aGVyZSAoVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoZSB0ZWNobmlxdWUpCgkJCS8vIElFIDggZG9lc24ndCB3b3JrIG9uIG9iamVjdCBlbGVtZW50cwoJCQlpZiAoIG5vZGVUeXBlID09PSAxICYmIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gIm9iamVjdCIgKSB7CgkJCQlncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTsKCgkJCQlpZiAoIChvbGQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSgiaWQiKSkgKSB7CgkJCQkJbmlkID0gb2xkLnJlcGxhY2UoIHJlc2NhcGUsICJcXCQmIiApOwoJCQkJfSBlbHNlIHsKCQkJCQljb250ZXh0LnNldEF0dHJpYnV0ZSggImlkIiwgbmlkICk7CgkJCQl9CgkJCQluaWQgPSAiW2lkPSciICsgbmlkICsgIiddICI7CgoJCQkJaSA9IGdyb3Vwcy5sZW5ndGg7CgkJCQl3aGlsZSAoIGktLSApIHsKCQkJCQlncm91cHNbaV0gPSBuaWQgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTsKCQkJCX0KCQkJCW5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0OwoJCQkJbmV3U2VsZWN0b3IgPSBncm91cHMuam9pbigiLCIpOwoJCQl9CgoJCQlpZiAoIG5ld1NlbGVjdG9yICkgewoJCQkJdHJ5IHsKCQkJCQlwdXNoLmFwcGx5KCByZXN1bHRzLAoJCQkJCQluZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yICkKCQkJCQkpOwoJCQkJCXJldHVybiByZXN1bHRzOwoJCQkJfSBjYXRjaChxc2FFcnJvcikgewoJCQkJfSBmaW5hbGx5IHsKCQkJCQlpZiAoICFvbGQgKSB7CgkJCQkJCWNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCJpZCIpOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCX0KCgkvLyBBbGwgb3RoZXJzCglyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgIiQxIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7Cn0KCi8qKgogKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemUKICogQHJldHVybnMge0Z1bmN0aW9uKHN0cmluZywgT2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aAogKglwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKQogKglkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5CiAqLwpmdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHsKCXZhciBrZXlzID0gW107CgoJZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7CgkJLy8gVXNlIChrZXkgKyAiICIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpCgkJaWYgKCBrZXlzLnB1c2goIGtleSArICIgIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHsKCQkJLy8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzCgkJCWRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07CgkJfQoJCXJldHVybiAoY2FjaGVbIGtleSArICIgIiBdID0gdmFsdWUpOwoJfQoJcmV0dXJuIGNhY2hlOwp9CgovKioKICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGUKICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmsKICovCmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7CglmblsgZXhwYW5kbyBdID0gdHJ1ZTsKCXJldHVybiBmbjsKfQoKLyoqCiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50CiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdAogKi8KZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHsKCXZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKCgl0cnkgewoJCXJldHVybiAhIWZuKCBkaXYgKTsKCX0gY2F0Y2ggKGUpIHsKCQlyZXR1cm4gZmFsc2U7Cgl9IGZpbmFsbHkgewoJCS8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdAoJCWlmICggZGl2LnBhcmVudE5vZGUgKSB7CgkJCWRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTsKCQl9CgkJLy8gcmVsZWFzZSBtZW1vcnkgaW4gSUUKCQlkaXYgPSBudWxsOwoJfQp9CgovKioKICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRycwogKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzCiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZAogKi8KZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHsKCXZhciBhcnIgPSBhdHRycy5zcGxpdCgifCIpLAoJCWkgPSBhdHRycy5sZW5ndGg7CgoJd2hpbGUgKCBpLS0gKSB7CgkJRXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7Cgl9Cn0KCi8qKgogKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzCiAqIEBwYXJhbSB7RWxlbWVudH0gYQogKiBAcGFyYW0ge0VsZW1lbnR9IGIKICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiCiAqLwpmdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7Cgl2YXIgY3VyID0gYiAmJiBhLAoJCWRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmCgkJCSggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLQoJCQkoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApOwoKCS8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2RlcwoJaWYgKCBkaWZmICkgewoJCXJldHVybiBkaWZmOwoJfQoKCS8vIENoZWNrIGlmIGIgZm9sbG93cyBhCglpZiAoIGN1ciApIHsKCQl3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkgewoJCQlpZiAoIGN1ciA9PT0gYiApIHsKCQkJCXJldHVybiAtMTsKCQkJfQoJCX0KCX0KCglyZXR1cm4gYSA/IDEgOiAtMTsKfQoKLyoqCiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXMKICogQHBhcmFtIHtTdHJpbmd9IHR5cGUKICovCmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkgewoJcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkgewoJCXZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwoJCXJldHVybiBuYW1lID09PSAiaW5wdXQiICYmIGVsZW0udHlwZSA9PT0gdHlwZTsKCX07Cn0KCi8qKgogKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnMKICogQHBhcmFtIHtTdHJpbmd9IHR5cGUKICovCmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHsKCXJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKCQl2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCQlyZXR1cm4gKG5hbWUgPT09ICJpbnB1dCIgfHwgbmFtZSA9PT0gImJ1dHRvbiIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTsKCX07Cn0KCi8qKgogKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzCiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuCiAqLwpmdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHsKCXJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkgewoJCWFyZ3VtZW50ID0gK2FyZ3VtZW50OwoJCXJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7CgkJCXZhciBqLAoJCQkJbWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSwKCQkJCWkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoOwoKCQkJLy8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzCgkJCXdoaWxlICggaS0tICkgewoJCQkJaWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHsKCQkJCQlzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7CgkJCQl9CgkJCX0KCQl9KTsKCX0pOwp9CgovKioKICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dAogKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dAogKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWUKICovCmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkgewoJcmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IHN0cnVuZGVmaW5lZCAmJiBjb250ZXh0Owp9CgovLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZQpzdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTsKCi8qKgogKiBEZXRlY3RzIFhNTCBub2RlcwogKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudAogKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlCiAqLwppc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkgewoJLy8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdAoJLy8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpCgl2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDsKCXJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09ICJIVE1MIiA6IGZhbHNlOwp9OwoKLyoqCiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudAogKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudAogKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50CiAqLwpzZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkgewoJdmFyIGhhc0NvbXBhcmUsCgkJZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jLAoJCXBhcmVudCA9IGRvYy5kZWZhdWx0VmlldzsKCgkvLyBJZiBubyBkb2N1bWVudCBhbmQgZG9jdW1lbnRFbGVtZW50IGlzIGF2YWlsYWJsZSwgcmV0dXJuCglpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkgewoJCXJldHVybiBkb2N1bWVudDsKCX0KCgkvLyBTZXQgb3VyIGRvY3VtZW50Cglkb2N1bWVudCA9IGRvYzsKCWRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50OwoKCS8vIFN1cHBvcnQgdGVzdHMKCWRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2MgKTsKCgkvLyBTdXBwb3J0OiBJRT44CgkvLyBJZiBpZnJhbWUgZG9jdW1lbnQgaXMgYXNzaWduZWQgdG8gImRvY3VtZW50IiB2YXJpYWJsZSBhbmQgaWYgaWZyYW1lIGhhcyBiZWVuIHJlbG9hZGVkLAoJLy8gSUUgd2lsbCB0aHJvdyAicGVybWlzc2lvbiBkZW5pZWQiIGVycm9yIHdoZW4gYWNjZXNzaW5nICJkb2N1bWVudCIgdmFyaWFibGUsIHNlZSBqUXVlcnkgIzEzOTM2CgkvLyBJRTYtOCBkbyBub3Qgc3VwcG9ydCB0aGUgZGVmYXVsdFZpZXcgcHJvcGVydHkgc28gcGFyZW50IHdpbGwgYmUgdW5kZWZpbmVkCglpZiAoIHBhcmVudCAmJiBwYXJlbnQgIT09IHBhcmVudC50b3AgKSB7CgkJLy8gSUUxMSBkb2VzIG5vdCBoYXZlIGF0dGFjaEV2ZW50LCBzbyBhbGwgbXVzdCBzdWZmZXIKCQlpZiAoIHBhcmVudC5hZGRFdmVudExpc3RlbmVyICkgewoJCQlwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggInVubG9hZCIsIGZ1bmN0aW9uKCkgewoJCQkJc2V0RG9jdW1lbnQoKTsKCQkJfSwgZmFsc2UgKTsKCQl9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7CgkJCXBhcmVudC5hdHRhY2hFdmVudCggIm9udW5sb2FkIiwgZnVuY3Rpb24oKSB7CgkJCQlzZXREb2N1bWVudCgpOwoJCQl9KTsKCQl9Cgl9CgoJLyogQXR0cmlidXRlcwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwoKCS8vIFN1cHBvcnQ6IElFPDgKCS8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllcyAoZXhjZXB0aW5nIElFOCBib29sZWFucykKCXN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkgewoJCWRpdi5jbGFzc05hbWUgPSAiaSI7CgkJcmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKCJjbGFzc05hbWUiKTsKCX0pOwoKCS8qIGdldEVsZW1lbnQocylCeSoKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KCgkvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpIHJldHVybnMgb25seSBlbGVtZW50cwoJc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkgewoJCWRpdi5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUNvbW1lbnQoIiIpICk7CgkJcmV0dXJuICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIioiKS5sZW5ndGg7Cgl9KTsKCgkvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIGNhbiBiZSB0cnVzdGVkCglzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkgJiYgYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7CgkJZGl2LmlubmVySFRNTCA9ICI8ZGl2IGNsYXNzPSdhJz48L2Rpdj48ZGl2IGNsYXNzPSdhIGknPjwvZGl2PiI7CgoJCS8vIFN1cHBvcnQ6IFNhZmFyaTw0CgkJLy8gQ2F0Y2ggY2xhc3Mgb3Zlci1jYWNoaW5nCgkJZGl2LmZpcnN0Q2hpbGQuY2xhc3NOYW1lID0gImkiOwoJCS8vIFN1cHBvcnQ6IE9wZXJhPDEwCgkJLy8gQ2F0Y2ggZ0VCQ04gZmFpbHVyZSB0byBmaW5kIG5vbi1sZWFkaW5nIGNsYXNzZXMKCQlyZXR1cm4gZGl2LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImkiKS5sZW5ndGggPT09IDI7Cgl9KTsKCgkvLyBTdXBwb3J0OiBJRTwxMAoJLy8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lCgkvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLAoJLy8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0CglzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHsKCQlkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pZCA9IGV4cGFuZG87CgkJcmV0dXJuICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvYy5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDsKCX0pOwoKCS8vIElEIGZpbmQgYW5kIGZpbHRlcgoJaWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7CgkJRXhwci5maW5kWyJJRCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkgewoJCQlpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBzdHJ1bmRlZmluZWQgJiYgZG9jdW1lbnRJc0hUTUwgKSB7CgkJCQl2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7CgkJCQkvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJucwoJCQkJLy8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2MwoJCQkJcmV0dXJuIG0gJiYgbS5wYXJlbnROb2RlID8gW21dIDogW107CgkJCX0KCQl9OwoJCUV4cHIuZmlsdGVyWyJJRCJdID0gZnVuY3Rpb24oIGlkICkgewoJCQl2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTsKCQkJcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCJpZCIpID09PSBhdHRySWQ7CgkJCX07CgkJfTsKCX0gZWxzZSB7CgkJLy8gU3VwcG9ydDogSUU2LzcKCQkvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0CgkJZGVsZXRlIEV4cHIuZmluZFsiSUQiXTsKCgkJRXhwci5maWx0ZXJbIklEIl0gPSAgZnVuY3Rpb24oIGlkICkgewoJCQl2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTsKCQkJcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJdmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBzdHJ1bmRlZmluZWQgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCJpZCIpOwoJCQkJcmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkOwoJCQl9OwoJCX07Cgl9CgoJLy8gVGFnCglFeHByLmZpbmRbIlRBRyJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/CgkJZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHsKCQkJaWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gc3RydW5kZWZpbmVkICkgewoJCQkJcmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApOwoJCQl9CgkJfSA6CgkJZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHsKCQkJdmFyIGVsZW0sCgkJCQl0bXAgPSBbXSwKCQkJCWkgPSAwLAoJCQkJcmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApOwoKCQkJLy8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50cwoJCQlpZiAoIHRhZyA9PT0gIioiICkgewoJCQkJd2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7CgkJCQkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkgewoJCQkJCQl0bXAucHVzaCggZWxlbSApOwoJCQkJCX0KCQkJCX0KCgkJCQlyZXR1cm4gdG1wOwoJCQl9CgkJCXJldHVybiByZXN1bHRzOwoJCX07CgoJLy8gQ2xhc3MKCUV4cHIuZmluZFsiQ0xBU1MiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkgewoJCWlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gc3RydW5kZWZpbmVkICYmIGRvY3VtZW50SXNIVE1MICkgewoJCQlyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTsKCQl9Cgl9OwoKCS8qIFFTQS9tYXRjaGVzU2VsZWN0b3IKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KCgkvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0CgoJLy8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSkKCXJidWdneU1hdGNoZXMgPSBbXTsKCgkvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKQoJLy8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yCgkvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lCgkvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvcgoJLy8gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4CglyYnVnZ3lRU0EgPSBbXTsKCglpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jLnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7CgkJLy8gQnVpbGQgUVNBIHJlZ2V4CgkJLy8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaQoJCWFzc2VydChmdW5jdGlvbiggZGl2ICkgewoJCQkvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlCgkJCS8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseQoJCQkvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSwKCQkJLy8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2gKCQkJLy8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTkKCQkJZGl2LmlubmVySFRNTCA9ICI8c2VsZWN0IHQ9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD4iOwoKCQkJLy8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMC0xMgoJCQkvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9CgkJCWlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIlt0Xj0nJ10iKS5sZW5ndGggKSB7CgkJCQlyYnVnZ3lRU0EucHVzaCggIlsqXiRdPSIgKyB3aGl0ZXNwYWNlICsgIiooPzonJ3xcIlwiKSIgKTsKCQkJfQoKCQkJLy8gU3VwcG9ydDogSUU4CgkJCS8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgInZhbHVlIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5CgkJCWlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCJbc2VsZWN0ZWRdIikubGVuZ3RoICkgewoJCQkJcmJ1Z2d5UVNBLnB1c2goICJcXFsiICsgd2hpdGVzcGFjZSArICIqKD86dmFsdWV8IiArIGJvb2xlYW5zICsgIikiICk7CgkJCX0KCgkJCS8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzCgkJCS8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkCgkJCS8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzCgkJCWlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCI6Y2hlY2tlZCIpLmxlbmd0aCApIHsKCQkJCXJidWdneVFTQS5wdXNoKCI6Y2hlY2tlZCIpOwoJCQl9CgkJfSk7CgoJCWFzc2VydChmdW5jdGlvbiggZGl2ICkgewoJCQkvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHMKCQkJLy8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50CgkJCXZhciBpbnB1dCA9IGRvYy5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwoJCQlpbnB1dC5zZXRBdHRyaWJ1dGUoICJ0eXBlIiwgImhpZGRlbiIgKTsKCQkJZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggIm5hbWUiLCAiRCIgKTsKCgkJCS8vIFN1cHBvcnQ6IElFOAoJCQkvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGUKCQkJaWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbCgiW25hbWU9ZF0iKS5sZW5ndGggKSB7CgkJCQlyYnVnZ3lRU0EucHVzaCggIm5hbWUiICsgd2hpdGVzcGFjZSArICIqWypeJHwhfl0/PSIgKTsKCQkJfQoKCQkJLy8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZCkKCQkJLy8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHMKCQkJaWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIjplbmFibGVkIikubGVuZ3RoICkgewoJCQkJcmJ1Z2d5UVNBLnB1c2goICI6ZW5hYmxlZCIsICI6ZGlzYWJsZWQiICk7CgkJCX0KCgkJCS8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zCgkJCWRpdi5xdWVyeVNlbGVjdG9yQWxsKCIqLDp4Iik7CgkJCXJidWdneVFTQS5wdXNoKCIsLio6Iik7CgkJfSk7Cgl9CgoJaWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwKCQlkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fAoJCWRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fAoJCWRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkgewoKCQlhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHsKCQkJLy8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yCgkJCS8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpCgkJCXN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGRpdiwgImRpdiIgKTsKCgkJCS8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb24KCQkJLy8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZAoJCQltYXRjaGVzLmNhbGwoIGRpdiwgIltzIT0nJ106eCIgKTsKCQkJcmJ1Z2d5TWF0Y2hlcy5wdXNoKCAiIT0iLCBwc2V1ZG9zICk7CgkJfSk7Cgl9CgoJcmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbigifCIpICk7CglyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCJ8IikgKTsKCgkvKiBDb250YWlucwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwoJaGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApOwoKCS8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlcgoJLy8gUHVycG9zZWZ1bGx5IGRvZXMgbm90IGltcGxlbWVudCBpbmNsdXNpdmUgZGVzY2VuZGVudAoJLy8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGYKCWNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/CgkJZnVuY3Rpb24oIGEsIGIgKSB7CgkJCXZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsCgkJCQlidXAgPSBiICYmIGIucGFyZW50Tm9kZTsKCQkJcmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoCgkJCQlhZG93bi5jb250YWlucyA/CgkJCQkJYWRvd24uY29udGFpbnMoIGJ1cCApIDoKCQkJCQlhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTYKCQkJKSk7CgkJfSA6CgkJZnVuY3Rpb24oIGEsIGIgKSB7CgkJCWlmICggYiApIHsKCQkJCXdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkgewoJCQkJCWlmICggYiA9PT0gYSApIHsKCQkJCQkJcmV0dXJuIHRydWU7CgkJCQkJfQoJCQkJfQoJCQl9CgkJCXJldHVybiBmYWxzZTsKCQl9OwoKCS8qIFNvcnRpbmcKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KCgkvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nCglzb3J0T3JkZXIgPSBoYXNDb21wYXJlID8KCWZ1bmN0aW9uKCBhLCBiICkgewoKCQkvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbAoJCWlmICggYSA9PT0gYiApIHsKCQkJaGFzRHVwbGljYXRlID0gdHJ1ZTsKCQkJcmV0dXJuIDA7CgkJfQoKCQkvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uCgkJdmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uOwoJCWlmICggY29tcGFyZSApIHsKCQkJcmV0dXJuIGNvbXBhcmU7CgkJfQoKCQkvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50CgkJY29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID8KCQkJYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDoKCgkJCS8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZAoJCQkxOwoKCQkvLyBEaXNjb25uZWN0ZWQgbm9kZXMKCQlpZiAoIGNvbXBhcmUgJiAxIHx8CgkJCSghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHsKCgkJCS8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudAoJCQlpZiAoIGEgPT09IGRvYyB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkgewoJCQkJcmV0dXJuIC0xOwoJCQl9CgkJCWlmICggYiA9PT0gZG9jIHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7CgkJCQlyZXR1cm4gMTsKCQkJfQoKCQkJLy8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXIKCQkJcmV0dXJuIHNvcnRJbnB1dCA/CgkJCQkoIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBhICkgLSBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYiApICkgOgoJCQkJMDsKCQl9CgoJCXJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTsKCX0gOgoJZnVuY3Rpb24oIGEsIGIgKSB7CgkJLy8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbAoJCWlmICggYSA9PT0gYiApIHsKCQkJaGFzRHVwbGljYXRlID0gdHJ1ZTsKCQkJcmV0dXJuIDA7CgkJfQoKCQl2YXIgY3VyLAoJCQlpID0gMCwKCQkJYXVwID0gYS5wYXJlbnROb2RlLAoJCQlidXAgPSBiLnBhcmVudE5vZGUsCgkJCWFwID0gWyBhIF0sCgkJCWJwID0gWyBiIF07CgoJCS8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkCgkJaWYgKCAhYXVwIHx8ICFidXAgKSB7CgkJCXJldHVybiBhID09PSBkb2MgPyAtMSA6CgkJCQliID09PSBkb2MgPyAxIDoKCQkJCWF1cCA/IC0xIDoKCQkJCWJ1cCA/IDEgOgoJCQkJc29ydElucHV0ID8KCQkJCSggaW5kZXhPZi5jYWxsKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBiICkgKSA6CgkJCQkwOwoKCQkvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVjawoJCX0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkgewoJCQlyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7CgkJfQoKCQkvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvbgoJCWN1ciA9IGE7CgkJd2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkgewoJCQlhcC51bnNoaWZ0KCBjdXIgKTsKCQl9CgkJY3VyID0gYjsKCQl3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7CgkJCWJwLnVuc2hpZnQoIGN1ciApOwoJCX0KCgkJLy8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3kKCQl3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHsKCQkJaSsrOwoJCX0KCgkJcmV0dXJuIGkgPwoJCQkvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3IKCQkJc2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6CgoJCQkvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3QKCQkJYXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDoKCQkJYnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOgoJCQkwOwoJfTsKCglyZXR1cm4gZG9jOwp9OwoKU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7CglyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApOwp9OwoKU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkgewoJLy8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkCglpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7CgkJc2V0RG9jdW1lbnQoIGVsZW0gKTsKCX0KCgkvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWQKCWV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsICI9JyQxJ10iICk7CgoJaWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJgoJCSggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiYKCQkoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7CgoJCXRyeSB7CgkJCXZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTsKCgkJCS8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXMKCQkJaWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fAoJCQkJCS8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50CgkJCQkJLy8gZnJhZ21lbnQgaW4gSUUgOQoJCQkJCWVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7CgkJCQlyZXR1cm4gcmV0OwoJCQl9CgkJfSBjYXRjaChlKSB7fQoJfQoKCXJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbZWxlbV0gKS5sZW5ndGggPiAwOwp9OwoKU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7CgkvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWQKCWlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHsKCQlzZXREb2N1bWVudCggY29udGV4dCApOwoJfQoJcmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7Cn07CgpTaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkgewoJLy8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkCglpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7CgkJc2V0RG9jdW1lbnQoIGVsZW0gKTsKCX0KCgl2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLAoJCS8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KQoJCXZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID8KCQkJZm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDoKCQkJdW5kZWZpbmVkOwoKCXJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/CgkJdmFsIDoKCQlzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID8KCQkJZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6CgkJCSh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgPwoJCQkJdmFsLnZhbHVlIDoKCQkJCW51bGw7Cn07CgpTaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkgewoJdGhyb3cgbmV3IEVycm9yKCAiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogIiArIG1zZyApOwp9OwoKLyoqCiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXMKICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHMKICovClNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7Cgl2YXIgZWxlbSwKCQlkdXBsaWNhdGVzID0gW10sCgkJaiA9IDAsCgkJaSA9IDA7CgoJLy8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZQoJaGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlczsKCXNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApOwoJcmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTsKCglpZiAoIGhhc0R1cGxpY2F0ZSApIHsKCQl3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHsKCQkJaWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7CgkJCQlqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7CgkJCX0KCQl9CgkJd2hpbGUgKCBqLS0gKSB7CgkJCXJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTsKCQl9Cgl9CgoJLy8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHMKCS8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNQoJc29ydElucHV0ID0gbnVsbDsKCglyZXR1cm4gcmVzdWx0czsKfTsKCi8qKgogKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2RlcwogKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW0KICovCmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkgewoJdmFyIG5vZGUsCgkJcmV0ID0gIiIsCgkJaSA9IDAsCgkJbm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlOwoKCWlmICggIW5vZGVUeXBlICkgewoJCS8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5CgkJd2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7CgkJCS8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzCgkJCXJldCArPSBnZXRUZXh0KCBub2RlICk7CgkJfQoJfSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkgewoJCS8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHMKCQkvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKQoJCWlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09ICJzdHJpbmciICkgewoJCQlyZXR1cm4gZWxlbS50ZXh0Q29udGVudDsKCQl9IGVsc2UgewoJCQkvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW4KCQkJZm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7CgkJCQlyZXQgKz0gZ2V0VGV4dCggZWxlbSApOwoJCQl9CgkJfQoJfSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7CgkJcmV0dXJuIGVsZW0ubm9kZVZhbHVlOwoJfQoJLy8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzCgoJcmV0dXJuIHJldDsKfTsKCkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0gewoKCS8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlcgoJY2FjaGVMZW5ndGg6IDUwLAoKCWNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLAoKCW1hdGNoOiBtYXRjaEV4cHIsCgoJYXR0ckhhbmRsZToge30sCgoJZmluZDoge30sCgoJcmVsYXRpdmU6IHsKCQkiPiI6IHsgZGlyOiAicGFyZW50Tm9kZSIsIGZpcnN0OiB0cnVlIH0sCgkJIiAiOiB7IGRpcjogInBhcmVudE5vZGUiIH0sCgkJIisiOiB7IGRpcjogInByZXZpb3VzU2libGluZyIsIGZpcnN0OiB0cnVlIH0sCgkJIn4iOiB7IGRpcjogInByZXZpb3VzU2libGluZyIgfQoJfSwKCglwcmVGaWx0ZXI6IHsKCQkiQVRUUiI6IGZ1bmN0aW9uKCBtYXRjaCApIHsKCQkJbWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApOwoKCQkJLy8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWQKCQkJbWF0Y2hbM10gPSAoIG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8ICIiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTsKCgkJCWlmICggbWF0Y2hbMl0gPT09ICJ+PSIgKSB7CgkJCQltYXRjaFszXSA9ICIgIiArIG1hdGNoWzNdICsgIiAiOwoJCQl9CgoJCQlyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTsKCQl9LAoKCQkiQ0hJTEQiOiBmdW5jdGlvbiggbWF0Y2ggKSB7CgkJCS8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbIkNISUxEIl0KCQkJCTEgdHlwZSAob25seXxudGh8Li4uKQoJCQkJMiB3aGF0IChjaGlsZHxvZi10eXBlKQoJCQkJMyBhcmd1bWVudCAoZXZlbnxvZGR8XGQqfFxkKm4oWystXVxkKyk/fC4uLikKCQkJCTQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XGQqbnwpCgkJCQk1IHNpZ24gb2YgeG4tY29tcG9uZW50CgkJCQk2IHggb2YgeG4tY29tcG9uZW50CgkJCQk3IHNpZ24gb2YgeS1jb21wb25lbnQKCQkJCTggeSBvZiB5LWNvbXBvbmVudAoJCQkqLwoJCQltYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7CgoJCQlpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09ICJudGgiICkgewoJCQkJLy8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnQKCQkJCWlmICggIW1hdGNoWzNdICkgewoJCQkJCVNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTsKCQkJCX0KCgkJCQkvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTEQKCQkJCS8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzEKCQkJCW1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSAiZXZlbiIgfHwgbWF0Y2hbM10gPT09ICJvZGQiICkgKTsKCQkJCW1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09ICJvZGQiICk7CgoJCQkvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHMKCQkJfSBlbHNlIGlmICggbWF0Y2hbM10gKSB7CgkJCQlTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7CgkJCX0KCgkJCXJldHVybiBtYXRjaDsKCQl9LAoKCQkiUFNFVURPIjogZnVuY3Rpb24oIG1hdGNoICkgewoJCQl2YXIgZXhjZXNzLAoJCQkJdW5xdW90ZWQgPSAhbWF0Y2hbNV0gJiYgbWF0Y2hbMl07CgoJCQlpZiAoIG1hdGNoRXhwclsiQ0hJTEQiXS50ZXN0KCBtYXRjaFswXSApICkgewoJCQkJcmV0dXJuIG51bGw7CgkJCX0KCgkJCS8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzCgkJCWlmICggbWF0Y2hbM10gJiYgbWF0Y2hbNF0gIT09IHVuZGVmaW5lZCApIHsKCQkJCW1hdGNoWzJdID0gbWF0Y2hbNF07CgoJCQkvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50cwoJCQl9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiYKCQkJCS8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpCgkJCQkoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmCgkJCQkvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXMKCQkJCShleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCAiKSIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHsKCgkJCQkvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleAoJCQkJbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7CgkJCQltYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTsKCQkJfQoKCQkJLy8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpCgkJCXJldHVybiBtYXRjaC5zbGljZSggMCwgMyApOwoJCX0KCX0sCgoJZmlsdGVyOiB7CgoJCSJUQUciOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHsKCQkJdmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7CgkJCXJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSAiKiIgPwoJCQkJZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDoKCQkJCWZ1bmN0aW9uKCBlbGVtICkgewoJCQkJCXJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7CgkJCQl9OwoJCX0sCgoJCSJDTEFTUyI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7CgkJCXZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgIiAiIF07CgoJCQlyZXR1cm4gcGF0dGVybiB8fAoJCQkJKHBhdHRlcm4gPSBuZXcgUmVnRXhwKCAiKF58IiArIHdoaXRlc3BhY2UgKyAiKSIgKyBjbGFzc05hbWUgKyAiKCIgKyB3aGl0ZXNwYWNlICsgInwkKSIgKSkgJiYKCQkJCWNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQkJcmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSAic3RyaW5nIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IHN0cnVuZGVmaW5lZCAmJiBlbGVtLmdldEF0dHJpYnV0ZSgiY2xhc3MiKSB8fCAiIiApOwoJCQkJfSk7CgkJfSwKCgkJIkFUVFIiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkgewoJCQlyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQl2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTsKCgkJCQlpZiAoIHJlc3VsdCA9PSBudWxsICkgewoJCQkJCXJldHVybiBvcGVyYXRvciA9PT0gIiE9IjsKCQkJCX0KCQkJCWlmICggIW9wZXJhdG9yICkgewoJCQkJCXJldHVybiB0cnVlOwoJCQkJfQoKCQkJCXJlc3VsdCArPSAiIjsKCgkJCQlyZXR1cm4gb3BlcmF0b3IgPT09ICI9IiA/IHJlc3VsdCA9PT0gY2hlY2sgOgoJCQkJCW9wZXJhdG9yID09PSAiIT0iID8gcmVzdWx0ICE9PSBjaGVjayA6CgkJCQkJb3BlcmF0b3IgPT09ICJePSIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6CgkJCQkJb3BlcmF0b3IgPT09ICIqPSIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDoKCQkJCQlvcGVyYXRvciA9PT0gIiQ9IiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6CgkJCQkJb3BlcmF0b3IgPT09ICJ+PSIgPyAoICIgIiArIHJlc3VsdCArICIgIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6CgkJCQkJb3BlcmF0b3IgPT09ICJ8PSIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArICItIiA6CgkJCQkJZmFsc2U7CgkJCX07CgkJfSwKCgkJIkNISUxEIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHsKCQkJdmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gIm50aCIsCgkJCQlmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gImxhc3QiLAoJCQkJb2ZUeXBlID0gd2hhdCA9PT0gIm9mLXR5cGUiOwoKCQkJcmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgPwoKCQkJCS8vIFNob3J0Y3V0IGZvciA6bnRoLSoobikKCQkJCWZ1bmN0aW9uKCBlbGVtICkgewoJCQkJCXJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTsKCQkJCX0gOgoKCQkJCWZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7CgkJCQkJdmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBkaWZmLCBub2RlSW5kZXgsIHN0YXJ0LAoJCQkJCQlkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyAibmV4dFNpYmxpbmciIDogInByZXZpb3VzU2libGluZyIsCgkJCQkJCXBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSwKCQkJCQkJbmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksCgkJCQkJCXVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlOwoKCQkJCQlpZiAoIHBhcmVudCApIHsKCgkJCQkJCS8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSkKCQkJCQkJaWYgKCBzaW1wbGUgKSB7CgkJCQkJCQl3aGlsZSAoIGRpciApIHsKCQkJCQkJCQlub2RlID0gZWxlbTsKCQkJCQkJCQl3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkgewoJCQkJCQkJCQlpZiAoIG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEgKSB7CgkJCQkJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJCQkJCX0KCQkJCQkJCQl9CgkJCQkJCQkJLy8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pCgkJCQkJCQkJc3RhcnQgPSBkaXIgPSB0eXBlID09PSAib25seSIgJiYgIXN0YXJ0ICYmICJuZXh0U2libGluZyI7CgkJCQkJCQl9CgkJCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQkJfQoKCQkJCQkJc3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTsKCgkJCQkJCS8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgCgkJCQkJCWlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHsKCQkJCQkJCS8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleAoJCQkJCQkJb3V0ZXJDYWNoZSA9IHBhcmVudFsgZXhwYW5kbyBdIHx8IChwYXJlbnRbIGV4cGFuZG8gXSA9IHt9KTsKCQkJCQkJCWNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdOwoJCQkJCQkJbm9kZUluZGV4ID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMV07CgkJCQkJCQlkaWZmID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMl07CgkJCQkJCQlub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTsKCgkJCQkJCQl3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fAoKCQkJCQkJCQkvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydAoJCQkJCQkJCShkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkgewoKCQkJCQkJCQkvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVhawoJCQkJCQkJCWlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHsKCQkJCQkJCQkJb3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTsKCQkJCQkJCQkJYnJlYWs7CgkJCQkJCQkJfQoJCQkJCQkJfQoKCQkJCQkJLy8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlCgkJCQkJCX0gZWxzZSBpZiAoIHVzZUNhY2hlICYmIChjYWNoZSA9IChlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KSlbIHR5cGUgXSkgJiYgY2FjaGVbMF0gPT09IGRpcnJ1bnMgKSB7CgkJCQkJCQlkaWZmID0gY2FjaGVbMV07CgoJCQkJCQkvLyB4bWwgOm50aC1jaGlsZCguLi4pIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLikKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCS8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0CgkJCQkJCQl3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fAoJCQkJCQkJCShkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkgewoKCQkJCQkJCQlpZiAoICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApICYmICsrZGlmZiApIHsKCQkJCQkJCQkJLy8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudAoJCQkJCQkJCQlpZiAoIHVzZUNhY2hlICkgewoJCQkJCQkJCQkJKG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07CgkJCQkJCQkJCX0KCgkJCQkJCQkJCWlmICggbm9kZSA9PT0gZWxlbSApIHsKCQkJCQkJCQkJCWJyZWFrOwoJCQkJCQkJCQl9CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9CgoJCQkJCQkvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZQoJCQkJCQlkaWZmIC09IGxhc3Q7CgkJCQkJCXJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApOwoJCQkJCX0KCQkJCX07CgkJfSwKCgkJIlBTRVVETyI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkgewoJCQkvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUKCQkJLy8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3NlcwoJCQkvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVycwoJCQkvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zCgkJCXZhciBhcmdzLAoJCQkJZm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fAoJCQkJCVNpenpsZS5lcnJvciggInVuc3VwcG9ydGVkIHBzZXVkbzogIiArIHBzZXVkbyApOwoKCQkJLy8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdAoJCQkvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvbgoJCQkvLyBqdXN0IGFzIFNpenpsZSBkb2VzCgkJCWlmICggZm5bIGV4cGFuZG8gXSApIHsKCQkJCXJldHVybiBmbiggYXJndW1lbnQgKTsKCQkJfQoKCQkJLy8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzCgkJCWlmICggZm4ubGVuZ3RoID4gMSApIHsKCQkJCWFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCAiIiwgYXJndW1lbnQgXTsKCQkJCXJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgPwoJCQkJCW1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHsKCQkJCQkJdmFyIGlkeCwKCQkJCQkJCW1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSwKCQkJCQkJCWkgPSBtYXRjaGVkLmxlbmd0aDsKCQkJCQkJd2hpbGUgKCBpLS0gKSB7CgkJCQkJCQlpZHggPSBpbmRleE9mLmNhbGwoIHNlZWQsIG1hdGNoZWRbaV0gKTsKCQkJCQkJCXNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7CgkJCQkJCX0KCQkJCQl9KSA6CgkJCQkJZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQkJCXJldHVybiBmbiggZWxlbSwgMCwgYXJncyApOwoJCQkJCX07CgkJCX0KCgkJCXJldHVybiBmbjsKCQl9Cgl9LAoKCXBzZXVkb3M6IHsKCQkvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3MKCQkibm90IjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKCQkJLy8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGUKCQkJLy8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmcKCQkJLy8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzCgkJCXZhciBpbnB1dCA9IFtdLAoJCQkJcmVzdWx0cyA9IFtdLAoJCQkJbWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCAiJDEiICkgKTsKCgkJCXJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gPwoJCQkJbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7CgkJCQkJdmFyIGVsZW0sCgkJCQkJCXVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSwKCQkJCQkJaSA9IHNlZWQubGVuZ3RoOwoKCQkJCQkvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgCgkJCQkJd2hpbGUgKCBpLS0gKSB7CgkJCQkJCWlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkgewoJCQkJCQkJc2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pOwoJCQkJCQl9CgkJCQkJfQoJCQkJfSkgOgoJCQkJZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHsKCQkJCQlpbnB1dFswXSA9IGVsZW07CgkJCQkJbWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApOwoJCQkJCXJldHVybiAhcmVzdWx0cy5wb3AoKTsKCQkJCX07CgkJfSksCgoJCSJoYXMiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkgewoJCQlyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQlyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7CgkJCX07CgkJfSksCgoJCSJjb250YWlucyI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHsKCQkJcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJcmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTsKCQkJfTsKCQl9KSwKCgkJLy8gIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3IKCQkvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZQoJCS8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsCgkJLy8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSAiLSIuCgkJLy8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuCgkJLy8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS4iCgkJLy8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkbwoJCSJsYW5nIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHsKCQkJLy8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllcgoJCQlpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgIiIpICkgewoJCQkJU2l6emxlLmVycm9yKCAidW5zdXBwb3J0ZWQgbGFuZzogIiArIGxhbmcgKTsKCQkJfQoJCQlsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7CgkJCXJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKCQkJCXZhciBlbGVtTGFuZzsKCQkJCWRvIHsKCQkJCQlpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID8KCQkJCQkJZWxlbS5sYW5nIDoKCQkJCQkJZWxlbS5nZXRBdHRyaWJ1dGUoInhtbDpsYW5nIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoImxhbmciKSkgKSB7CgoJCQkJCQllbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7CgkJCQkJCXJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgIi0iICkgPT09IDA7CgkJCQkJfQoJCQkJfSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX07CgkJfSksCgoJCS8vIE1pc2NlbGxhbmVvdXMKCQkidGFyZ2V0IjogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoOwoJCQlyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7CgkJfSwKCgkJInJvb3QiOiBmdW5jdGlvbiggZWxlbSApIHsKCQkJcmV0dXJuIGVsZW0gPT09IGRvY0VsZW07CgkJfSwKCgkJImZvY3VzIjogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7CgkJfSwKCgkJLy8gQm9vbGVhbiBwcm9wZXJ0aWVzCgkJImVuYWJsZWQiOiBmdW5jdGlvbiggZWxlbSApIHsKCQkJcmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlOwoJCX0sCgoJCSJkaXNhYmxlZCI6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQlyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTsKCQl9LAoKCQkiY2hlY2tlZCI6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQkvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHMKCQkJLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWQKCQkJdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwoJCQlyZXR1cm4gKG5vZGVOYW1lID09PSAiaW5wdXQiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09ICJvcHRpb24iICYmICEhZWxlbS5zZWxlY3RlZCk7CgkJfSwKCgkJInNlbGVjdGVkIjogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCS8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHQKCQkJLy8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseQoJCQlpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHsKCQkJCWVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4OwoJCQl9CgoJCQlyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTsKCQl9LAoKCQkvLyBDb250ZW50cwoJCSJlbXB0eSI6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQkvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkbwoJCQkvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksCgkJCS8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pCgkJCS8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW4KCQkJZm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7CgkJCQlpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkgewoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfQoJCQlyZXR1cm4gdHJ1ZTsKCQl9LAoKCQkicGFyZW50IjogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXJldHVybiAhRXhwci5wc2V1ZG9zWyJlbXB0eSJdKCBlbGVtICk7CgkJfSwKCgkJLy8gRWxlbWVudC9pbnB1dCB0eXBlcwoJCSJoZWFkZXIiOiBmdW5jdGlvbiggZWxlbSApIHsKCQkJcmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApOwoJCX0sCgoJCSJpbnB1dCI6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQlyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7CgkJfSwKCgkJImJ1dHRvbiI6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQl2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCQkJcmV0dXJuIG5hbWUgPT09ICJpbnB1dCIgJiYgZWxlbS50eXBlID09PSAiYnV0dG9uIiB8fCBuYW1lID09PSAiYnV0dG9uIjsKCQl9LAoKCQkidGV4dCI6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQl2YXIgYXR0cjsKCQkJcmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gImlucHV0IiAmJgoJCQkJZWxlbS50eXBlID09PSAidGV4dCIgJiYKCgkJCQkvLyBTdXBwb3J0OiBJRTw4CgkJCQkvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgInNlYXJjaCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gInRleHQiCgkJCQkoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoInR5cGUiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09ICJ0ZXh0IiApOwoJCX0sCgoJCS8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb24KCQkiZmlyc3QiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gWyAwIF07CgkJfSksCgoJCSJsYXN0IjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7CgkJCXJldHVybiBbIGxlbmd0aCAtIDEgXTsKCQl9KSwKCgkJImVxIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkgewoJCQlyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07CgkJfSksCgoJCSJldmVuIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7CgkJCXZhciBpID0gMDsKCQkJZm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7CgkJCQltYXRjaEluZGV4ZXMucHVzaCggaSApOwoJCQl9CgkJCXJldHVybiBtYXRjaEluZGV4ZXM7CgkJfSksCgoJCSJvZGQiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHsKCQkJdmFyIGkgPSAxOwoJCQlmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHsKCQkJCW1hdGNoSW5kZXhlcy5wdXNoKCBpICk7CgkJCX0KCQkJcmV0dXJuIG1hdGNoSW5kZXhlczsKCQl9KSwKCgkJImx0IjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkgewoJCQl2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7CgkJCWZvciAoIDsgLS1pID49IDA7ICkgewoJCQkJbWF0Y2hJbmRleGVzLnB1c2goIGkgKTsKCQkJfQoJCQlyZXR1cm4gbWF0Y2hJbmRleGVzOwoJCX0pLAoKCQkiZ3QiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7CgkJCXZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDsKCQkJZm9yICggOyArK2kgPCBsZW5ndGg7ICkgewoJCQkJbWF0Y2hJbmRleGVzLnB1c2goIGkgKTsKCQkJfQoJCQlyZXR1cm4gbWF0Y2hJbmRleGVzOwoJCX0pCgl9Cn07CgpFeHByLnBzZXVkb3NbIm50aCJdID0gRXhwci5wc2V1ZG9zWyJlcSJdOwoKLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3MKZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7CglFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7Cn0KZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHsKCUV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7Cn0KCi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVycwpmdW5jdGlvbiBzZXRGaWx0ZXJzKCkge30Kc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7CkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7CgpmdW5jdGlvbiB0b2tlbml6ZSggc2VsZWN0b3IsIHBhcnNlT25seSApIHsKCXZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLAoJCXNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsCgkJY2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyAiICIgXTsKCglpZiAoIGNhY2hlZCApIHsKCQlyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApOwoJfQoKCXNvRmFyID0gc2VsZWN0b3I7Cglncm91cHMgPSBbXTsKCXByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjsKCgl3aGlsZSAoIHNvRmFyICkgewoKCQkvLyBDb21tYSBhbmQgZmlyc3QgcnVuCgkJaWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7CgkJCWlmICggbWF0Y2ggKSB7CgkJCQkvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZAoJCQkJc29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7CgkJCX0KCQkJZ3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTsKCQl9CgoJCW1hdGNoZWQgPSBmYWxzZTsKCgkJLy8gQ29tYmluYXRvcnMKCQlpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHsKCQkJbWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7CgkJCXRva2Vucy5wdXNoKHsKCQkJCXZhbHVlOiBtYXRjaGVkLAoJCQkJLy8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlCgkJCQl0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgIiAiICkKCQkJfSk7CgkJCXNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7CgkJfQoKCQkvLyBGaWx0ZXJzCgkJZm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHsKCQkJaWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fAoJCQkJKG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7CgkJCQltYXRjaGVkID0gbWF0Y2guc2hpZnQoKTsKCQkJCXRva2Vucy5wdXNoKHsKCQkJCQl2YWx1ZTogbWF0Y2hlZCwKCQkJCQl0eXBlOiB0eXBlLAoJCQkJCW1hdGNoZXM6IG1hdGNoCgkJCQl9KTsKCQkJCXNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7CgkJCX0KCQl9CgoJCWlmICggIW1hdGNoZWQgKSB7CgkJCWJyZWFrOwoJCX0KCX0KCgkvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3MKCS8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZwoJLy8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zCglyZXR1cm4gcGFyc2VPbmx5ID8KCQlzb0Zhci5sZW5ndGggOgoJCXNvRmFyID8KCQkJU2l6emxlLmVycm9yKCBzZWxlY3RvciApIDoKCQkJLy8gQ2FjaGUgdGhlIHRva2VucwoJCQl0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTsKfQoKZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkgewoJdmFyIGkgPSAwLAoJCWxlbiA9IHRva2Vucy5sZW5ndGgsCgkJc2VsZWN0b3IgPSAiIjsKCWZvciAoIDsgaSA8IGxlbjsgaSsrICkgewoJCXNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTsKCX0KCXJldHVybiBzZWxlY3RvcjsKfQoKZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHsKCXZhciBkaXIgPSBjb21iaW5hdG9yLmRpciwKCQljaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09ICJwYXJlbnROb2RlIiwKCQlkb25lTmFtZSA9IGRvbmUrKzsKCglyZXR1cm4gY29tYmluYXRvci5maXJzdCA/CgkJLy8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50CgkJZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHsKCQkJd2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHsKCQkJCWlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkgewoJCQkJCXJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTsKCQkJCX0KCQkJfQoJCX0gOgoKCQkvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHMKCQlmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkgewoJCQl2YXIgb2xkQ2FjaGUsIG91dGVyQ2FjaGUsCgkJCQluZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTsKCgkJCS8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGRpciBjYWNoaW5nCgkJCWlmICggeG1sICkgewoJCQkJd2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHsKCQkJCQlpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHsKCQkJCQkJaWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHsKCQkJCQkJCXJldHVybiB0cnVlOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9IGVsc2UgewoJCQkJd2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHsKCQkJCQlpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHsKCQkJCQkJb3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pOwoJCQkJCQlpZiAoIChvbGRDYWNoZSA9IG91dGVyQ2FjaGVbIGRpciBdKSAmJgoJCQkJCQkJb2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHsKCgkJCQkJCQkvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50cwoJCQkJCQkJcmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQkvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzCgkJCQkJCQlvdXRlckNhY2hlWyBkaXIgXSA9IG5ld0NhY2hlOwoKCQkJCQkJCS8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZwoJCQkJCQkJaWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHsKCQkJCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoJCX07Cn0KCmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHsKCXJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID8KCQlmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkgewoJCQl2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDsKCQkJd2hpbGUgKCBpLS0gKSB7CgkJCQlpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQl9CgkJCXJldHVybiB0cnVlOwoJCX0gOgoJCW1hdGNoZXJzWzBdOwp9CgpmdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkgewoJdmFyIGVsZW0sCgkJbmV3VW5tYXRjaGVkID0gW10sCgkJaSA9IDAsCgkJbGVuID0gdW5tYXRjaGVkLmxlbmd0aCwKCQltYXBwZWQgPSBtYXAgIT0gbnVsbDsKCglmb3IgKCA7IGkgPCBsZW47IGkrKyApIHsKCQlpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHsKCQkJaWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7CgkJCQluZXdVbm1hdGNoZWQucHVzaCggZWxlbSApOwoJCQkJaWYgKCBtYXBwZWQgKSB7CgkJCQkJbWFwLnB1c2goIGkgKTsKCQkJCX0KCQkJfQoJCX0KCX0KCglyZXR1cm4gbmV3VW5tYXRjaGVkOwp9CgpmdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7CglpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHsKCQlwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApOwoJfQoJaWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7CgkJcG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApOwoJfQoJcmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkgewoJCXZhciB0ZW1wLCBpLCBlbGVtLAoJCQlwcmVNYXAgPSBbXSwKCQkJcG9zdE1hcCA9IFtdLAoJCQlwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLAoKCQkJLy8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHQKCQkJZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8ICIqIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSwKCgkJCS8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvbgoJCQltYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID8KCQkJCWNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDoKCQkJCWVsZW1zLAoKCQkJbWF0Y2hlck91dCA9IG1hdGNoZXIgPwoJCQkJLy8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cywKCQkJCXBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID8KCgkJCQkJLy8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5CgkJCQkJW10gOgoKCQkJCQkvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHkKCQkJCQlyZXN1bHRzIDoKCQkJCW1hdGNoZXJJbjsKCgkJLy8gRmluZCBwcmltYXJ5IG1hdGNoZXMKCQlpZiAoIG1hdGNoZXIgKSB7CgkJCW1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7CgkJfQoKCQkvLyBBcHBseSBwb3N0RmlsdGVyCgkJaWYgKCBwb3N0RmlsdGVyICkgewoJCQl0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTsKCQkJcG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApOwoKCQkJLy8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJbgoJCQlpID0gdGVtcC5sZW5ndGg7CgkJCXdoaWxlICggaS0tICkgewoJCQkJaWYgKCAoZWxlbSA9IHRlbXBbaV0pICkgewoJCQkJCW1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTsKCQkJCX0KCQkJfQoJCX0KCgkJaWYgKCBzZWVkICkgewoJCQlpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkgewoJCQkJaWYgKCBwb3N0RmluZGVyICkgewoJCQkJCS8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0cwoJCQkJCXRlbXAgPSBbXTsKCQkJCQlpID0gbWF0Y2hlck91dC5sZW5ndGg7CgkJCQkJd2hpbGUgKCBpLS0gKSB7CgkJCQkJCWlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHsKCQkJCQkJCS8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoCgkJCQkJCQl0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApOwoJCQkJCQl9CgkJCQkJfQoJCQkJCXBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTsKCQkJCX0KCgkJCQkvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZAoJCQkJaSA9IG1hdGNoZXJPdXQubGVuZ3RoOwoJCQkJd2hpbGUgKCBpLS0gKSB7CgkJCQkJaWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmCgkJCQkJCSh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YuY2FsbCggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkgewoKCQkJCQkJc2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pOwoJCQkJCX0KCQkJCX0KCQkJfQoKCQkvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWQKCQl9IGVsc2UgewoJCQltYXRjaGVyT3V0ID0gY29uZGVuc2UoCgkJCQltYXRjaGVyT3V0ID09PSByZXN1bHRzID8KCQkJCQltYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOgoJCQkJCW1hdGNoZXJPdXQKCQkJKTsKCQkJaWYgKCBwb3N0RmluZGVyICkgewoJCQkJcG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7CgkJCX0gZWxzZSB7CgkJCQlwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7CgkJCX0KCQl9Cgl9KTsKfQoKZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHsKCXZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosCgkJbGVuID0gdG9rZW5zLmxlbmd0aCwKCQlsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLAoJCWltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsiICJdLAoJCWkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCwKCgkJLy8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocykKCQltYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHsKCQkJcmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDsKCQl9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksCgkJbWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXJldHVybiBpbmRleE9mLmNhbGwoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7CgkJfSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLAoJCW1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkgewoJCQlyZXR1cm4gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8ICgKCQkJCShjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/CgkJCQkJbWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6CgkJCQkJbWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApOwoJCX0gXTsKCglmb3IgKCA7IGkgPCBsZW47IGkrKyApIHsKCQlpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7CgkJCW1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdOwoJCX0gZWxzZSB7CgkJCW1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTsKCgkJCS8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyCgkJCWlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkgewoJCQkJLy8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nCgkJCQlqID0gKytpOwoJCQkJZm9yICggOyBqIDwgbGVuOyBqKysgKSB7CgkJCQkJaWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkgewoJCQkJCQlicmVhazsKCQkJCQl9CgkJCQl9CgkJCQlyZXR1cm4gc2V0TWF0Y2hlcigKCQkJCQlpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwKCQkJCQlpID4gMSAmJiB0b1NlbGVjdG9yKAoJCQkJCQkvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYAoJCQkJCQl0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSAiICIgPyAiKiIgOiAiIiB9KQoJCQkJCSkucmVwbGFjZSggcnRyaW0sICIkMSIgKSwKCQkJCQltYXRjaGVyLAoJCQkJCWkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLAoJCQkJCWogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSwKCQkJCQlqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApCgkJCQkpOwoJCQl9CgkJCW1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTsKCQl9Cgl9CgoJcmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApOwp9CgpmdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7Cgl2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLAoJCWJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLAoJCXN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHsKCQkJdmFyIGVsZW0sIGosIG1hdGNoZXIsCgkJCQltYXRjaGVkQ291bnQgPSAwLAoJCQkJaSA9ICIwIiwKCQkJCXVubWF0Y2hlZCA9IHNlZWQgJiYgW10sCgkJCQlzZXRNYXRjaGVkID0gW10sCgkJCQljb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCwKCQkJCS8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHQKCQkJCWVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kWyJUQUciXSggIioiLCBvdXRlcm1vc3QgKSwKCQkJCS8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyCgkJCQlkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSwKCQkJCWxlbiA9IGVsZW1zLmxlbmd0aDsKCgkJCWlmICggb3V0ZXJtb3N0ICkgewoJCQkJb3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgIT09IGRvY3VtZW50ICYmIGNvbnRleHQ7CgkJCX0KCgkJCS8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzCgkJCS8vIEtlZXAgYGlgIGEgc3RyaW5nIGlmIHRoZXJlIGFyZSBubyBlbGVtZW50cyBzbyBgbWF0Y2hlZENvdW50YCB3aWxsIGJlICIwMCIgYmVsb3cKCQkJLy8gU3VwcG9ydDogSUU8OSwgU2FmYXJpCgkJCS8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiAibGVuZ3RoIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWQKCQkJZm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkgewoJCQkJaWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHsKCQkJCQlqID0gMDsKCQkJCQl3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkgewoJCQkJCQlpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgewoJCQkJCQkJcmVzdWx0cy5wdXNoKCBlbGVtICk7CgkJCQkJCQlicmVhazsKCQkJCQkJfQoJCQkJCX0KCQkJCQlpZiAoIG91dGVybW9zdCApIHsKCQkJCQkJZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7CgkJCQkJfQoJCQkJfQoKCQkJCS8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnMKCQkJCWlmICggYnlTZXQgKSB7CgkJCQkJLy8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVycwoJCQkJCWlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHsKCQkJCQkJbWF0Y2hlZENvdW50LS07CgkJCQkJfQoKCQkJCQkvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90CgkJCQkJaWYgKCBzZWVkICkgewoJCQkJCQl1bm1hdGNoZWQucHVzaCggZWxlbSApOwoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJLy8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzCgkJCW1hdGNoZWRDb3VudCArPSBpOwoJCQlpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHsKCQkJCWogPSAwOwoJCQkJd2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkgewoJCQkJCW1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7CgkJCQl9CgoJCQkJaWYgKCBzZWVkICkgewoJCQkJCS8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmcKCQkJCQlpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7CgkJCQkJCXdoaWxlICggaS0tICkgewoJCQkJCQkJaWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHsKCQkJCQkJCQlzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCgkJCQkJLy8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXMKCQkJCQlzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTsKCQkJCX0KCgkJCQkvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzCgkJCQlwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7CgoJCQkJLy8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nCgkJCQlpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiYKCQkJCQkoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHsKCgkJCQkJU2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTsKCQkJCX0KCQkJfQoKCQkJLy8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzCgkJCWlmICggb3V0ZXJtb3N0ICkgewoJCQkJZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7CgkJCQlvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDsKCQkJfQoKCQkJcmV0dXJuIHVubWF0Y2hlZDsKCQl9OwoKCXJldHVybiBieVNldCA/CgkJbWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6CgkJc3VwZXJNYXRjaGVyOwp9Cgpjb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGdyb3VwIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkgewoJdmFyIGksCgkJc2V0TWF0Y2hlcnMgPSBbXSwKCQllbGVtZW50TWF0Y2hlcnMgPSBbXSwKCQljYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArICIgIiBdOwoKCWlmICggIWNhY2hlZCApIHsKCQkvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnQKCQlpZiAoICFncm91cCApIHsKCQkJZ3JvdXAgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTsKCQl9CgkJaSA9IGdyb3VwLmxlbmd0aDsKCQl3aGlsZSAoIGktLSApIHsKCQkJY2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIGdyb3VwW2ldICk7CgkJCWlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7CgkJCQlzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTsKCQkJfSBlbHNlIHsKCQkJCWVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTsKCQkJfQoJCX0KCgkJLy8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uCgkJY2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7Cgl9CglyZXR1cm4gY2FjaGVkOwp9OwoKZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkgewoJdmFyIGkgPSAwLAoJCWxlbiA9IGNvbnRleHRzLmxlbmd0aDsKCWZvciAoIDsgaSA8IGxlbjsgaSsrICkgewoJCVNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7Cgl9CglyZXR1cm4gcmVzdWx0czsKfQoKZnVuY3Rpb24gc2VsZWN0KCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHsKCXZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLAoJCW1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7CgoJaWYgKCAhc2VlZCApIHsKCQkvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBncm91cAoJCWlmICggbWF0Y2gubGVuZ3RoID09PSAxICkgewoKCQkJLy8gVGFrZSBhIHNob3J0Y3V0IGFuZCBzZXQgdGhlIGNvbnRleHQgaWYgdGhlIHJvb3Qgc2VsZWN0b3IgaXMgYW4gSUQKCQkJdG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApOwoJCQlpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gIklEIiAmJgoJCQkJCXN1cHBvcnQuZ2V0QnlJZCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmCgkJCQkJRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHsKCgkJCQljb250ZXh0ID0gKCBFeHByLmZpbmRbIklEIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdOwoJCQkJaWYgKCAhY29udGV4dCApIHsKCQkJCQlyZXR1cm4gcmVzdWx0czsKCQkJCX0KCQkJCXNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApOwoJCQl9CgoJCQkvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nCgkJCWkgPSBtYXRjaEV4cHJbIm5lZWRzQ29udGV4dCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDsKCQkJd2hpbGUgKCBpLS0gKSB7CgkJCQl0b2tlbiA9IHRva2Vuc1tpXTsKCgkJCQkvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yCgkJCQlpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHsKCQkJCQlicmVhazsKCQkJCX0KCQkJCWlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7CgkJCQkJLy8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzCgkJCQkJaWYgKCAoc2VlZCA9IGZpbmQoCgkJCQkJCXRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSwKCQkJCQkJcnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dAoJCQkJCSkpICkgewoKCQkJCQkJLy8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5CgkJCQkJCXRva2Vucy5zcGxpY2UoIGksIDEgKTsKCQkJCQkJc2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTsKCQkJCQkJaWYgKCAhc2VsZWN0b3IgKSB7CgkJCQkJCQlwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7CgkJCQkJCQlyZXR1cm4gcmVzdWx0czsKCQkJCQkJfQoKCQkJCQkJYnJlYWs7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJfQoKCS8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24KCS8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmUKCWNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApKAoJCXNlZWQsCgkJY29udGV4dCwKCQkhZG9jdW1lbnRJc0hUTUwsCgkJcmVzdWx0cywKCQlyc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0CgkpOwoJcmV0dXJuIHJlc3VsdHM7Cn0KCi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzCgovLyBTb3J0IHN0YWJpbGl0eQpzdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCIiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCIiKSA9PT0gZXhwYW5kbzsKCi8vIFN1cHBvcnQ6IENocm9tZTwxNAovLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uCnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlOwoKLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50CnNldERvY3VtZW50KCk7CgovLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KQovLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcioKc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7CgkvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZykKCXJldHVybiBkaXYxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSApICYgMTsKfSk7CgovLyBTdXBwb3J0OiBJRTw4Ci8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5ICJpbnRlcnBvbGF0aW9uIgovLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4CmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkgewoJZGl2LmlubmVySFRNTCA9ICI8YSBocmVmPScjJz48L2E+IjsKCXJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoImhyZWYiKSA9PT0gIiMiIDsKfSkgKSB7CglhZGRIYW5kbGUoICJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkgewoJCWlmICggIWlzWE1MICkgewoJCQlyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gInR5cGUiID8gMSA6IDIgKTsKCQl9Cgl9KTsKfQoKLy8gU3VwcG9ydDogSUU8OQovLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZSgidmFsdWUiKQppZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkgewoJZGl2LmlubmVySFRNTCA9ICI8aW5wdXQvPiI7CglkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoICJ2YWx1ZSIsICIiICk7CglyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCAidmFsdWUiICkgPT09ICIiOwp9KSApIHsKCWFkZEhhbmRsZSggInZhbHVlIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkgewoJCWlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gImlucHV0IiApIHsKCQkJcmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlOwoJCX0KCX0pOwp9CgovLyBTdXBwb3J0OiBJRTw5Ci8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXMKaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7CglyZXR1cm4gZGl2LmdldEF0dHJpYnV0ZSgiZGlzYWJsZWQiKSA9PSBudWxsOwp9KSApIHsKCWFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHsKCQl2YXIgdmFsOwoJCWlmICggIWlzWE1MICkgewoJCQlyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDoKCQkJCQkodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgPwoJCQkJCXZhbC52YWx1ZSA6CgkJCQludWxsOwoJCX0KCX0pOwp9CgpyZXR1cm4gU2l6emxlOwoKfSkoIHdpbmRvdyApOwoKCgpqUXVlcnkuZmluZCA9IFNpenpsZTsKalF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzOwpqUXVlcnkuZXhwclsiOiJdID0galF1ZXJ5LmV4cHIucHNldWRvczsKalF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0OwpqUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0OwpqUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7CmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWluczsKCgoKdmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7Cgp2YXIgcnNpbmdsZVRhZyA9ICgvXjwoXHcrKVxzKlwvPz4oPzo8XC9cMT58KSQvKTsKCgoKdmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcW1wuLF0qJC87CgovLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdApmdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHsKCWlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkgewoJCXJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkgewoJCQkvKiBqc2hpbnQgLVcwMTggKi8KCQkJcmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90OwoJCX0pOwoKCX0KCglpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHsKCQlyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHsKCQkJcmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDsKCQl9KTsKCgl9CgoJaWYgKCB0eXBlb2YgcXVhbGlmaWVyID09PSAic3RyaW5nIiApIHsKCQlpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHsKCQkJcmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApOwoJCX0KCgkJcXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApOwoJfQoKCXJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiAoIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBxdWFsaWZpZXIgKSA+PSAwICkgIT09IG5vdDsKCX0pOwp9CgpqUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7Cgl2YXIgZWxlbSA9IGVsZW1zWyAwIF07CgoJaWYgKCBub3QgKSB7CgkJZXhwciA9ICI6bm90KCIgKyBleHByICsgIikiOwoJfQoKCXJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/CgkJalF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDoKCQlqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkgewoJCQlyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTsKCQl9KSk7Cn07CgpqUXVlcnkuZm4uZXh0ZW5kKHsKCWZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKCQl2YXIgaSwKCQkJcmV0ID0gW10sCgkJCXNlbGYgPSB0aGlzLAoJCQlsZW4gPSBzZWxmLmxlbmd0aDsKCgkJaWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09ICJzdHJpbmciICkgewoJCQlyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoZnVuY3Rpb24oKSB7CgkJCQlmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkgewoJCQkJCWlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHsKCQkJCQkJcmV0dXJuIHRydWU7CgkJCQkJfQoJCQkJfQoJCQl9KSApOwoJCX0KCgkJZm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHsKCQkJalF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApOwoJCX0KCgkJLy8gTmVlZGVkIGJlY2F1c2UgJCggc2VsZWN0b3IsIGNvbnRleHQgKSBiZWNvbWVzICQoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApCgkJcmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApOwoJCXJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgIiAiICsgc2VsZWN0b3IgOiBzZWxlY3RvcjsKCQlyZXR1cm4gcmV0OwoJfSwKCWZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkgewoJCXJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSkgKTsKCX0sCglub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKCQlyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSkgKTsKCX0sCglpczogZnVuY3Rpb24oIHNlbGVjdG9yICkgewoJCXJldHVybiAhIXdpbm5vdygKCQkJdGhpcywKCgkJCS8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXQKCQkJLy8gc28gJCgicDpmaXJzdCIpLmlzKCJwOmxhc3QiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gInAiLgoJCQl0eXBlb2Ygc2VsZWN0b3IgPT09ICJzdHJpbmciICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/CgkJCQlqUXVlcnkoIHNlbGVjdG9yICkgOgoJCQkJc2VsZWN0b3IgfHwgW10sCgkJCWZhbHNlCgkJKS5sZW5ndGg7Cgl9Cn0pOwoKCi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0CgoKLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpCnZhciByb290alF1ZXJ5LAoKCS8vIFVzZSB0aGUgY29ycmVjdCBkb2N1bWVudCBhY2NvcmRpbmdseSB3aXRoIHdpbmRvdyBhcmd1bWVudCAoc2FuZGJveCkKCWRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LAoKCS8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzCgkvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpCgkvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPCkKCXJxdWlja0V4cHIgPSAvXig/OlxzKig8W1x3XFddKz4pW14+XSp8IyhbXHctXSopKSQvLAoKCWluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHsKCQl2YXIgbWF0Y2gsIGVsZW07CgoJCS8vIEhBTkRMRTogJCgiIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSkKCQlpZiAoICFzZWxlY3RvciApIHsKCQkJcmV0dXJuIHRoaXM7CgkJfQoKCQkvLyBIYW5kbGUgSFRNTCBzdHJpbmdzCgkJaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09ICJzdHJpbmciICkgewoJCQlpZiAoIHNlbGVjdG9yLmNoYXJBdCgwKSA9PT0gIjwiICYmIHNlbGVjdG9yLmNoYXJBdCggc2VsZWN0b3IubGVuZ3RoIC0gMSApID09PSAiPiIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMgKSB7CgkJCQkvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVjawoJCQkJbWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07CgoJCQl9IGVsc2UgewoJCQkJbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7CgkJCX0KCgkJCS8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWQKCQkJaWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkgewoKCQkJCS8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KQoJCQkJaWYgKCBtYXRjaFsxXSApIHsKCQkJCQljb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbMF0gOiBjb250ZXh0OwoKCQkJCQkvLyBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0CgkJCQkJLy8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnQKCQkJCQlqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoCgkJCQkJCW1hdGNoWzFdLAoJCQkJCQljb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LAoJCQkJCQl0cnVlCgkJCQkJKSApOwoKCQkJCQkvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpCgkJCQkJaWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWzFdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHsKCQkJCQkJZm9yICggbWF0Y2ggaW4gY29udGV4dCApIHsKCQkJCQkJCS8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGUKCQkJCQkJCWlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHsKCQkJCQkJCQl0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7CgoJCQkJCQkJLy8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlcwoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQl0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgoJCQkJCXJldHVybiB0aGlzOwoKCQkJCS8vIEhBTkRMRTogJCgjaWQpCgkJCQl9IGVsc2UgewoJCQkJCWVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbMl0gKTsKCgkJCQkJLy8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnMKCQkJCQkvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzCgkJCQkJaWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHsKCQkJCQkJLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFIGFuZCBPcGVyYSByZXR1cm4gaXRlbXMKCQkJCQkJLy8gYnkgbmFtZSBpbnN0ZWFkIG9mIElECgkJCQkJCWlmICggZWxlbS5pZCAhPT0gbWF0Y2hbMl0gKSB7CgkJCQkJCQlyZXR1cm4gcm9vdGpRdWVyeS5maW5kKCBzZWxlY3RvciApOwoJCQkJCQl9CgoJCQkJCQkvLyBPdGhlcndpc2UsIHdlIGluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0CgkJCQkJCXRoaXMubGVuZ3RoID0gMTsKCQkJCQkJdGhpc1swXSA9IGVsZW07CgkJCQkJfQoKCQkJCQl0aGlzLmNvbnRleHQgPSBkb2N1bWVudDsKCQkJCQl0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7CgkJCQkJcmV0dXJuIHRoaXM7CgkJCQl9CgoJCQkvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKQoJCQl9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHsKCQkJCXJldHVybiAoIGNvbnRleHQgfHwgcm9vdGpRdWVyeSApLmZpbmQoIHNlbGVjdG9yICk7CgoJCQkvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dCkKCQkJLy8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpCgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7CgkJCX0KCgkJLy8gSEFORExFOiAkKERPTUVsZW1lbnQpCgkJfSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7CgkJCXRoaXMuY29udGV4dCA9IHRoaXNbMF0gPSBzZWxlY3RvcjsKCQkJdGhpcy5sZW5ndGggPSAxOwoJCQlyZXR1cm4gdGhpczsKCgkJLy8gSEFORExFOiAkKGZ1bmN0aW9uKQoJCS8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeQoJCX0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkgewoJCQlyZXR1cm4gdHlwZW9mIHJvb3RqUXVlcnkucmVhZHkgIT09ICJ1bmRlZmluZWQiID8KCQkJCXJvb3RqUXVlcnkucmVhZHkoIHNlbGVjdG9yICkgOgoJCQkJLy8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudAoJCQkJc2VsZWN0b3IoIGpRdWVyeSApOwoJCX0KCgkJaWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7CgkJCXRoaXMuY29udGV4dCA9IHNlbGVjdG9yLmNvbnRleHQ7CgkJfQoKCQlyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTsKCX07CgovLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uCmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuOwoKLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZQpyb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApOwoKCnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLywKCS8vIG1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0CglndWFyYW50ZWVkVW5pcXVlID0gewoJCWNoaWxkcmVuOiB0cnVlLAoJCWNvbnRlbnRzOiB0cnVlLAoJCW5leHQ6IHRydWUsCgkJcHJldjogdHJ1ZQoJfTsKCmpRdWVyeS5leHRlbmQoewoJZGlyOiBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHsKCQl2YXIgbWF0Y2hlZCA9IFtdLAoJCQljdXIgPSBlbGVtWyBkaXIgXTsKCgkJd2hpbGUgKCBjdXIgJiYgY3VyLm5vZGVUeXBlICE9PSA5ICYmICh1bnRpbCA9PT0gdW5kZWZpbmVkIHx8IGN1ci5ub2RlVHlwZSAhPT0gMSB8fCAhalF1ZXJ5KCBjdXIgKS5pcyggdW50aWwgKSkgKSB7CgkJCWlmICggY3VyLm5vZGVUeXBlID09PSAxICkgewoJCQkJbWF0Y2hlZC5wdXNoKCBjdXIgKTsKCQkJfQoJCQljdXIgPSBjdXJbZGlyXTsKCQl9CgkJcmV0dXJuIG1hdGNoZWQ7Cgl9LAoKCXNpYmxpbmc6IGZ1bmN0aW9uKCBuLCBlbGVtICkgewoJCXZhciByID0gW107CgoJCWZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7CgkJCWlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkgewoJCQkJci5wdXNoKCBuICk7CgkJCX0KCQl9CgoJCXJldHVybiByOwoJfQp9KTsKCmpRdWVyeS5mbi5leHRlbmQoewoJaGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkgewoJCXZhciBpLAoJCQl0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSwKCQkJbGVuID0gdGFyZ2V0cy5sZW5ndGg7CgoJCXJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpIHsKCQkJZm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHsKCQkJCWlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzW2ldICkgKSB7CgkJCQkJcmV0dXJuIHRydWU7CgkJCQl9CgkJCX0KCQl9KTsKCX0sCgoJY2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHsKCQl2YXIgY3VyLAoJCQlpID0gMCwKCQkJbCA9IHRoaXMubGVuZ3RoLAoJCQltYXRjaGVkID0gW10sCgkJCXBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gInN0cmluZyIgPwoJCQkJalF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOgoJCQkJMDsKCgkJZm9yICggOyBpIDwgbDsgaSsrICkgewoJCQlmb3IgKCBjdXIgPSB0aGlzW2ldOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHsKCQkJCS8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50cwoJCQkJaWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAocG9zID8KCQkJCQlwb3MuaW5kZXgoY3VyKSA+IC0xIDoKCgkJCQkJLy8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlCgkJCQkJY3VyLm5vZGVUeXBlID09PSAxICYmCgkJCQkJCWpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihjdXIsIHNlbGVjdG9ycykpICkgewoKCQkJCQltYXRjaGVkLnB1c2goIGN1ciApOwoJCQkJCWJyZWFrOwoJCQkJfQoJCQl9CgkJfQoKCQlyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWUoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTsKCX0sCgoJLy8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbgoJLy8gdGhlIG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzCglpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7CgoJCS8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50CgkJaWYgKCAhZWxlbSApIHsKCQkJcmV0dXJuICggdGhpc1swXSAmJiB0aGlzWzBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7CgkJfQoKCQkvLyBpbmRleCBpbiBzZWxlY3RvcgoJCWlmICggdHlwZW9mIGVsZW0gPT09ICJzdHJpbmciICkgewoJCQlyZXR1cm4galF1ZXJ5LmluQXJyYXkoIHRoaXNbMF0sIGpRdWVyeSggZWxlbSApICk7CgkJfQoKCQkvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnQKCQlyZXR1cm4galF1ZXJ5LmluQXJyYXkoCgkJCS8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZAoJCQllbGVtLmpxdWVyeSA/IGVsZW1bMF0gOiBlbGVtLCB0aGlzICk7Cgl9LAoKCWFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkgewoJCXJldHVybiB0aGlzLnB1c2hTdGFjaygKCQkJalF1ZXJ5LnVuaXF1ZSgKCQkJCWpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApICkKCQkJKQoJCSk7Cgl9LAoKCWFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKCQlyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgPwoJCQl0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKHNlbGVjdG9yKQoJCSk7Cgl9Cn0pOwoKZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7CglkbyB7CgkJY3VyID0gY3VyWyBkaXIgXTsKCX0gd2hpbGUgKCBjdXIgJiYgY3VyLm5vZGVUeXBlICE9PSAxICk7CgoJcmV0dXJuIGN1cjsKfQoKalF1ZXJ5LmVhY2goewoJcGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHsKCQl2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlOwoJCXJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7Cgl9LAoJcGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7CgkJcmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sICJwYXJlbnROb2RlIiApOwoJfSwKCXBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkgewoJCXJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCAicGFyZW50Tm9kZSIsIHVudGlsICk7Cgl9LAoJbmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJcmV0dXJuIHNpYmxpbmcoIGVsZW0sICJuZXh0U2libGluZyIgKTsKCX0sCglwcmV2OiBmdW5jdGlvbiggZWxlbSApIHsKCQlyZXR1cm4gc2libGluZyggZWxlbSwgInByZXZpb3VzU2libGluZyIgKTsKCX0sCgluZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHsKCQlyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgIm5leHRTaWJsaW5nIiApOwoJfSwKCXByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCAicHJldmlvdXNTaWJsaW5nIiApOwoJfSwKCW5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkgewoJCXJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCAibmV4dFNpYmxpbmciLCB1bnRpbCApOwoJfSwKCXByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkgewoJCXJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCAicHJldmlvdXNTaWJsaW5nIiwgdW50aWwgKTsKCX0sCglzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7CgkJcmV0dXJuIGpRdWVyeS5zaWJsaW5nKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTsKCX0sCgljaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7CgkJcmV0dXJuIGpRdWVyeS5zaWJsaW5nKCBlbGVtLmZpcnN0Q2hpbGQgKTsKCX0sCgljb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7CgkJcmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgImlmcmFtZSIgKSA/CgkJCWVsZW0uY29udGVudERvY3VtZW50IHx8IGVsZW0uY29udGVudFdpbmRvdy5kb2N1bWVudCA6CgkJCWpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApOwoJfQp9LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7CglqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7CgkJdmFyIHJldCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApOwoKCQlpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09ICJVbnRpbCIgKSB7CgkJCXNlbGVjdG9yID0gdW50aWw7CgkJfQoKCQlpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gInN0cmluZyIgKSB7CgkJCXJldCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCByZXQgKTsKCQl9CgoJCWlmICggdGhpcy5sZW5ndGggPiAxICkgewoJCQkvLyBSZW1vdmUgZHVwbGljYXRlcwoJCQlpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7CgkJCQlyZXQgPSBqUXVlcnkudW5pcXVlKCByZXQgKTsKCQkJfQoKCQkJLy8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXMKCQkJaWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkgewoJCQkJcmV0ID0gcmV0LnJldmVyc2UoKTsKCQkJfQoJCX0KCgkJcmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTsKCX07Cn0pOwp2YXIgcm5vdHdoaXRlID0gKC9cUysvZyk7CgoKCi8vIFN0cmluZyB0byBPYmplY3Qgb3B0aW9ucyBmb3JtYXQgY2FjaGUKdmFyIG9wdGlvbnNDYWNoZSA9IHt9OwoKLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXMgYW5kIHN0b3JlIGluIGNhY2hlCmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7Cgl2YXIgb2JqZWN0ID0gb3B0aW9uc0NhY2hlWyBvcHRpb25zIF0gPSB7fTsKCWpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7CgkJb2JqZWN0WyBmbGFnIF0gPSB0cnVlOwoJfSk7CglyZXR1cm4gb2JqZWN0Owp9CgovKgogKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczoKICoKICoJb3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvdwogKgkJCXRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3QKICoKICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmUKICogImZpcmVkIiBtdWx0aXBsZSB0aW1lcy4KICoKICogUG9zc2libGUgb3B0aW9uczoKICoKICoJb25jZToJCQl3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpCiAqCiAqCW1lbW9yeToJCQl3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkCiAqCQkJCQlhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCAibWVtb3JpemVkIgogKgkJCQkJdmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpCiAqCiAqCXVuaXF1ZToJCQl3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdCkKICoKICoJc3RvcE9uRmFsc2U6CWludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZQogKgogKi8KalF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkgewoKCS8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWQKCS8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdCkKCW9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gInN0cmluZyIgPwoJCSggb3B0aW9uc0NhY2hlWyBvcHRpb25zIF0gfHwgY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApICkgOgoJCWpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7CgoJdmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmcKCQlmaXJpbmcsCgkJLy8gTGFzdCBmaXJlIHZhbHVlIChmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzKQoJCW1lbW9yeSwKCQkvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZAoJCWZpcmVkLAoJCS8vIEVuZCBvZiB0aGUgbG9vcCB3aGVuIGZpcmluZwoJCWZpcmluZ0xlbmd0aCwKCQkvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSByZW1vdmUgaWYgbmVlZGVkKQoJCWZpcmluZ0luZGV4LAoJCS8vIEZpcnN0IGNhbGxiYWNrIHRvIGZpcmUgKHVzZWQgaW50ZXJuYWxseSBieSBhZGQgYW5kIGZpcmVXaXRoKQoJCWZpcmluZ1N0YXJ0LAoJCS8vIEFjdHVhbCBjYWxsYmFjayBsaXN0CgkJbGlzdCA9IFtdLAoJCS8vIFN0YWNrIG9mIGZpcmUgY2FsbHMgZm9yIHJlcGVhdGFibGUgbGlzdHMKCQlzdGFjayA9ICFvcHRpb25zLm9uY2UgJiYgW10sCgkJLy8gRmlyZSBjYWxsYmFja3MKCQlmaXJlID0gZnVuY3Rpb24oIGRhdGEgKSB7CgkJCW1lbW9yeSA9IG9wdGlvbnMubWVtb3J5ICYmIGRhdGE7CgkJCWZpcmVkID0gdHJ1ZTsKCQkJZmlyaW5nSW5kZXggPSBmaXJpbmdTdGFydCB8fCAwOwoJCQlmaXJpbmdTdGFydCA9IDA7CgkJCWZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoOwoJCQlmaXJpbmcgPSB0cnVlOwoJCQlmb3IgKCA7IGxpc3QgJiYgZmlyaW5nSW5kZXggPCBmaXJpbmdMZW5ndGg7IGZpcmluZ0luZGV4KysgKSB7CgkJCQlpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIGRhdGFbIDAgXSwgZGF0YVsgMSBdICkgPT09IGZhbHNlICYmIG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7CgkJCQkJbWVtb3J5ID0gZmFsc2U7IC8vIFRvIHByZXZlbnQgZnVydGhlciBjYWxscyB1c2luZyBhZGQKCQkJCQlicmVhazsKCQkJCX0KCQkJfQoJCQlmaXJpbmcgPSBmYWxzZTsKCQkJaWYgKCBsaXN0ICkgewoJCQkJaWYgKCBzdGFjayApIHsKCQkJCQlpZiAoIHN0YWNrLmxlbmd0aCApIHsKCQkJCQkJZmlyZSggc3RhY2suc2hpZnQoKSApOwoJCQkJCX0KCQkJCX0gZWxzZSBpZiAoIG1lbW9yeSApIHsKCQkJCQlsaXN0ID0gW107CgkJCQl9IGVsc2UgewoJCQkJCXNlbGYuZGlzYWJsZSgpOwoJCQkJfQoJCQl9CgkJfSwKCQkvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdAoJCXNlbGYgPSB7CgkJCS8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3QKCQkJYWRkOiBmdW5jdGlvbigpIHsKCQkJCWlmICggbGlzdCApIHsKCQkJCQkvLyBGaXJzdCwgd2Ugc2F2ZSB0aGUgY3VycmVudCBsZW5ndGgKCQkJCQl2YXIgc3RhcnQgPSBsaXN0Lmxlbmd0aDsKCQkJCQkoZnVuY3Rpb24gYWRkKCBhcmdzICkgewoJCQkJCQlqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHsKCQkJCQkJCXZhciB0eXBlID0galF1ZXJ5LnR5cGUoIGFyZyApOwoJCQkJCQkJaWYgKCB0eXBlID09PSAiZnVuY3Rpb24iICkgewoJCQkJCQkJCWlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7CgkJCQkJCQkJCWxpc3QucHVzaCggYXJnICk7CgkJCQkJCQkJfQoJCQkJCQkJfSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdHlwZSAhPT0gInN0cmluZyIgKSB7CgkJCQkJCQkJLy8gSW5zcGVjdCByZWN1cnNpdmVseQoJCQkJCQkJCWFkZCggYXJnICk7CgkJCQkJCQl9CgkJCQkJCX0pOwoJCQkJCX0pKCBhcmd1bWVudHMgKTsKCQkJCQkvLyBEbyB3ZSBuZWVkIHRvIGFkZCB0aGUgY2FsbGJhY2tzIHRvIHRoZQoJCQkJCS8vIGN1cnJlbnQgZmlyaW5nIGJhdGNoPwoJCQkJCWlmICggZmlyaW5nICkgewoJCQkJCQlmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDsKCQkJCQkvLyBXaXRoIG1lbW9yeSwgaWYgd2UncmUgbm90IGZpcmluZyB0aGVuCgkJCQkJLy8gd2Ugc2hvdWxkIGNhbGwgcmlnaHQgYXdheQoJCQkJCX0gZWxzZSBpZiAoIG1lbW9yeSApIHsKCQkJCQkJZmlyaW5nU3RhcnQgPSBzdGFydDsKCQkJCQkJZmlyZSggbWVtb3J5ICk7CgkJCQkJfQoJCQkJfQoJCQkJcmV0dXJuIHRoaXM7CgkJCX0sCgkJCS8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3QKCQkJcmVtb3ZlOiBmdW5jdGlvbigpIHsKCQkJCWlmICggbGlzdCApIHsKCQkJCQlqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkgewoJCQkJCQl2YXIgaW5kZXg7CgkJCQkJCXdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkgewoJCQkJCQkJbGlzdC5zcGxpY2UoIGluZGV4LCAxICk7CgkJCQkJCQkvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXMKCQkJCQkJCWlmICggZmlyaW5nICkgewoJCQkJCQkJCWlmICggaW5kZXggPD0gZmlyaW5nTGVuZ3RoICkgewoJCQkJCQkJCQlmaXJpbmdMZW5ndGgtLTsKCQkJCQkJCQl9CgkJCQkJCQkJaWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHsKCQkJCQkJCQkJZmlyaW5nSW5kZXgtLTsKCQkJCQkJCQl9CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9KTsKCQkJCX0KCQkJCXJldHVybiB0aGlzOwoJCQl9LAoJCQkvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LgoJCQkvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC4KCQkJaGFzOiBmdW5jdGlvbiggZm4gKSB7CgkJCQlyZXR1cm4gZm4gPyBqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDogISEoIGxpc3QgJiYgbGlzdC5sZW5ndGggKTsKCQkJfSwKCQkJLy8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdAoJCQllbXB0eTogZnVuY3Rpb24oKSB7CgkJCQlsaXN0ID0gW107CgkJCQlmaXJpbmdMZW5ndGggPSAwOwoJCQkJcmV0dXJuIHRoaXM7CgkJCX0sCgkJCS8vIEhhdmUgdGhlIGxpc3QgZG8gbm90aGluZyBhbnltb3JlCgkJCWRpc2FibGU6IGZ1bmN0aW9uKCkgewoJCQkJbGlzdCA9IHN0YWNrID0gbWVtb3J5ID0gdW5kZWZpbmVkOwoJCQkJcmV0dXJuIHRoaXM7CgkJCX0sCgkJCS8vIElzIGl0IGRpc2FibGVkPwoJCQlkaXNhYmxlZDogZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gIWxpc3Q7CgkJCX0sCgkJCS8vIExvY2sgdGhlIGxpc3QgaW4gaXRzIGN1cnJlbnQgc3RhdGUKCQkJbG9jazogZnVuY3Rpb24oKSB7CgkJCQlzdGFjayA9IHVuZGVmaW5lZDsKCQkJCWlmICggIW1lbW9yeSApIHsKCQkJCQlzZWxmLmRpc2FibGUoKTsKCQkJCX0KCQkJCXJldHVybiB0aGlzOwoJCQl9LAoJCQkvLyBJcyBpdCBsb2NrZWQ/CgkJCWxvY2tlZDogZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gIXN0YWNrOwoJCQl9LAoJCQkvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzCgkJCWZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHsKCQkJCWlmICggbGlzdCAmJiAoICFmaXJlZCB8fCBzdGFjayApICkgewoJCQkJCWFyZ3MgPSBhcmdzIHx8IFtdOwoJCQkJCWFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07CgkJCQkJaWYgKCBmaXJpbmcgKSB7CgkJCQkJCXN0YWNrLnB1c2goIGFyZ3MgKTsKCQkJCQl9IGVsc2UgewoJCQkJCQlmaXJlKCBhcmdzICk7CgkJCQkJfQoJCQkJfQoJCQkJcmV0dXJuIHRoaXM7CgkJCX0sCgkJCS8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzCgkJCWZpcmU6IGZ1bmN0aW9uKCkgewoJCQkJc2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7CgkJCQlyZXR1cm4gdGhpczsKCQkJfSwKCQkJLy8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlCgkJCWZpcmVkOiBmdW5jdGlvbigpIHsKCQkJCXJldHVybiAhIWZpcmVkOwoJCQl9CgkJfTsKCglyZXR1cm4gc2VsZjsKfTsKCgpqUXVlcnkuZXh0ZW5kKHsKCglEZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7CgkJdmFyIHR1cGxlcyA9IFsKCQkJCS8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZQoJCQkJWyAicmVzb2x2ZSIsICJkb25lIiwgalF1ZXJ5LkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSwgInJlc29sdmVkIiBdLAoJCQkJWyAicmVqZWN0IiwgImZhaWwiLCBqUXVlcnkuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLCAicmVqZWN0ZWQiIF0sCgkJCQlbICJub3RpZnkiLCAicHJvZ3Jlc3MiLCBqUXVlcnkuQ2FsbGJhY2tzKCJtZW1vcnkiKSBdCgkJCV0sCgkJCXN0YXRlID0gInBlbmRpbmciLAoJCQlwcm9taXNlID0gewoJCQkJc3RhdGU6IGZ1bmN0aW9uKCkgewoJCQkJCXJldHVybiBzdGF0ZTsKCQkJCX0sCgkJCQlhbHdheXM6IGZ1bmN0aW9uKCkgewoJCQkJCWRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApOwoJCQkJCXJldHVybiB0aGlzOwoJCQkJfSwKCQkJCXRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHsKCQkJCQl2YXIgZm5zID0gYXJndW1lbnRzOwoJCQkJCXJldHVybiBqUXVlcnkuRGVmZXJyZWQoZnVuY3Rpb24oIG5ld0RlZmVyICkgewoJCQkJCQlqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7CgkJCQkJCQl2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTsKCQkJCQkJCS8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlcgoJCQkJCQkJZGVmZXJyZWRbIHR1cGxlWzFdIF0oZnVuY3Rpb24oKSB7CgkJCQkJCQkJdmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQkJCQkJCWlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHsKCQkJCQkJCQkJcmV0dXJuZWQucHJvbWlzZSgpCgkJCQkJCQkJCQkuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApCgkJCQkJCQkJCQkuZmFpbCggbmV3RGVmZXIucmVqZWN0ICkKCQkJCQkJCQkJCS5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5ICk7CgkJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQkJbmV3RGVmZXJbIHR1cGxlWyAwIF0gKyAiV2l0aCIgXSggdGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsIGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzICk7CgkJCQkJCQkJfQoJCQkJCQkJfSk7CgkJCQkJCX0pOwoJCQkJCQlmbnMgPSBudWxsOwoJCQkJCX0pLnByb21pc2UoKTsKCQkJCX0sCgkJCQkvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkCgkJCQkvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0CgkJCQlwcm9taXNlOiBmdW5jdGlvbiggb2JqICkgewoJCQkJCXJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTsKCQkJCX0KCQkJfSwKCQkJZGVmZXJyZWQgPSB7fTsKCgkJLy8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdAoJCXByb21pc2UucGlwZSA9IHByb21pc2UudGhlbjsKCgkJLy8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kcwoJCWpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHsKCQkJdmFyIGxpc3QgPSB0dXBsZVsgMiBdLAoJCQkJc3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdOwoKCQkJLy8gcHJvbWlzZVsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdID0gbGlzdC5hZGQKCQkJcHJvbWlzZVsgdHVwbGVbMV0gXSA9IGxpc3QuYWRkOwoKCQkJLy8gSGFuZGxlIHN0YXRlCgkJCWlmICggc3RhdGVTdHJpbmcgKSB7CgkJCQlsaXN0LmFkZChmdW5jdGlvbigpIHsKCQkJCQkvLyBzdGF0ZSA9IFsgcmVzb2x2ZWQgfCByZWplY3RlZCBdCgkJCQkJc3RhdGUgPSBzdGF0ZVN0cmluZzsKCgkJCQkvLyBbIHJlamVjdF9saXN0IHwgcmVzb2x2ZV9saXN0IF0uZGlzYWJsZTsgcHJvZ3Jlc3NfbGlzdC5sb2NrCgkJCQl9LCB0dXBsZXNbIGkgXiAxIF1bIDIgXS5kaXNhYmxlLCB0dXBsZXNbIDIgXVsgMiBdLmxvY2sgKTsKCQkJfQoKCQkJLy8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXQoJCQlkZWZlcnJlZFsgdHVwbGVbMF0gXSA9IGZ1bmN0aW9uKCkgewoJCQkJZGVmZXJyZWRbIHR1cGxlWzBdICsgIldpdGgiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApOwoJCQkJcmV0dXJuIHRoaXM7CgkJCX07CgkJCWRlZmVycmVkWyB0dXBsZVswXSArICJXaXRoIiBdID0gbGlzdC5maXJlV2l0aDsKCQl9KTsKCgkJLy8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlCgkJcHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApOwoKCQkvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55CgkJaWYgKCBmdW5jICkgewoJCQlmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApOwoJCX0KCgkJLy8gQWxsIGRvbmUhCgkJcmV0dXJuIGRlZmVycmVkOwoJfSwKCgkvLyBEZWZlcnJlZCBoZWxwZXIKCXdoZW46IGZ1bmN0aW9uKCBzdWJvcmRpbmF0ZSAvKiAsIC4uLiwgc3Vib3JkaW5hdGVOICovICkgewoJCXZhciBpID0gMCwKCQkJcmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLAoJCQlsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCwKCgkJCS8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXMKCQkJcmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8ICggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCwKCgkJCS8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LgoJCQlkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksCgoJCQkvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzCgkJCXVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHsKCQkJCXJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCQkJY29udGV4dHNbIGkgXSA9IHRoaXM7CgkJCQkJdmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7CgkJCQkJaWYgKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkgewoJCQkJCQlkZWZlcnJlZC5ub3RpZnlXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7CgoJCQkJCX0gZWxzZSBpZiAoICEoLS1yZW1haW5pbmcpICkgewoJCQkJCQlkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApOwoJCQkJCX0KCQkJCX07CgkJCX0sCgoJCQlwcm9ncmVzc1ZhbHVlcywgcHJvZ3Jlc3NDb250ZXh0cywgcmVzb2x2ZUNvbnRleHRzOwoKCQkvLyBhZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkCgkJaWYgKCBsZW5ndGggPiAxICkgewoJCQlwcm9ncmVzc1ZhbHVlcyA9IG5ldyBBcnJheSggbGVuZ3RoICk7CgkJCXByb2dyZXNzQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApOwoJCQlyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApOwoJCQlmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHsKCQkJCWlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkgewoJCQkJCXJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKCkKCQkJCQkJLmRvbmUoIHVwZGF0ZUZ1bmMoIGksIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApICkKCQkJCQkJLmZhaWwoIGRlZmVycmVkLnJlamVjdCApCgkJCQkJCS5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApOwoJCQkJfSBlbHNlIHsKCQkJCQktLXJlbWFpbmluZzsKCQkJCX0KCQkJfQoJCX0KCgkJLy8gaWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlcgoJCWlmICggIXJlbWFpbmluZyApIHsKCQkJZGVmZXJyZWQucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApOwoJCX0KCgkJcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTsKCX0KfSk7CgoKLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5CnZhciByZWFkeUxpc3Q7CgpqUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7CgkvLyBBZGQgdGhlIGNhbGxiYWNrCglqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7CgoJcmV0dXJuIHRoaXM7Cn07CgpqUXVlcnkuZXh0ZW5kKHsKCS8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuCglpc1JlYWR5OiBmYWxzZSwKCgkvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlCgkvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MQoJcmVhZHlXYWl0OiAxLAoKCS8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudAoJaG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHsKCQlpZiAoIGhvbGQgKSB7CgkJCWpRdWVyeS5yZWFkeVdhaXQrKzsKCQl9IGVsc2UgewoJCQlqUXVlcnkucmVhZHkoIHRydWUgKTsKCQl9Cgl9LAoKCS8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHkKCXJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHsKCgkJLy8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeQoJCWlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBNYWtlIHN1cmUgYm9keSBleGlzdHMsIGF0IGxlYXN0LCBpbiBjYXNlIElFIGdldHMgYSBsaXR0bGUgb3ZlcnplYWxvdXMgKHRpY2tldCAjNTQ0MykuCgkJaWYgKCAhZG9jdW1lbnQuYm9keSApIHsKCQkJcmV0dXJuIHNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApOwoJCX0KCgkJLy8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5CgkJalF1ZXJ5LmlzUmVhZHkgPSB0cnVlOwoKCQkvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZQoJCWlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlCgkJcmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApOwoKCQkvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHMKCQlpZiAoIGpRdWVyeS5mbi50cmlnZ2VyICkgewoJCQlqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlcigicmVhZHkiKS5vZmYoInJlYWR5Iik7CgkJfQoJfQp9KTsKCi8qKgogKiBDbGVhbi11cCBtZXRob2QgZm9yIGRvbSByZWFkeSBldmVudHMKICovCmZ1bmN0aW9uIGRldGFjaCgpIHsKCWlmICggZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciApIHsKCQlkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAiRE9NQ29udGVudExvYWRlZCIsIGNvbXBsZXRlZCwgZmFsc2UgKTsKCQl3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggImxvYWQiLCBjb21wbGV0ZWQsIGZhbHNlICk7CgoJfSBlbHNlIHsKCQlkb2N1bWVudC5kZXRhY2hFdmVudCggIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIGNvbXBsZXRlZCApOwoJCXdpbmRvdy5kZXRhY2hFdmVudCggIm9ubG9hZCIsIGNvbXBsZXRlZCApOwoJfQp9CgovKioKICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2QKICovCmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHsKCS8vIHJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIgaXMgZ29vZCBlbm91Z2ggZm9yIHVzIHRvIGNhbGwgdGhlIGRvbSByZWFkeSBpbiBvbGRJRQoJaWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyIHx8IGV2ZW50LnR5cGUgPT09ICJsb2FkIiB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAiY29tcGxldGUiICkgewoJCWRldGFjaCgpOwoJCWpRdWVyeS5yZWFkeSgpOwoJfQp9CgpqUXVlcnkucmVhZHkucHJvbWlzZSA9IGZ1bmN0aW9uKCBvYmogKSB7CglpZiAoICFyZWFkeUxpc3QgKSB7CgoJCXJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpOwoKCQkvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZCBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC4KCQkvLyB3ZSBvbmNlIHRyaWVkIHRvIHVzZSByZWFkeVN0YXRlICJpbnRlcmFjdGl2ZSIgaGVyZSwgYnV0IGl0IGNhdXNlZCBpc3N1ZXMgbGlrZSB0aGUgb25lCgkJLy8gZGlzY292ZXJlZCBieSBDaHJpc1MgaGVyZTogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIyODIjY29tbWVudDoxNQoJCWlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gImNvbXBsZXRlIiApIHsKCQkJLy8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5CgkJCXNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApOwoKCQkvLyBTdGFuZGFyZHMtYmFzZWQgYnJvd3NlcnMgc3VwcG9ydCBET01Db250ZW50TG9hZGVkCgkJfSBlbHNlIGlmICggZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciApIHsKCQkJLy8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFjawoJCQlkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAiRE9NQ29udGVudExvYWRlZCIsIGNvbXBsZXRlZCwgZmFsc2UgKTsKCgkJCS8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrCgkJCXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAibG9hZCIsIGNvbXBsZXRlZCwgZmFsc2UgKTsKCgkJLy8gSWYgSUUgZXZlbnQgbW9kZWwgaXMgdXNlZAoJCX0gZWxzZSB7CgkJCS8vIEVuc3VyZSBmaXJpbmcgYmVmb3JlIG9ubG9hZCwgbWF5YmUgbGF0ZSBidXQgc2FmZSBhbHNvIGZvciBpZnJhbWVzCgkJCWRvY3VtZW50LmF0dGFjaEV2ZW50KCAib25yZWFkeXN0YXRlY2hhbmdlIiwgY29tcGxldGVkICk7CgoJCQkvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29yawoJCQl3aW5kb3cuYXR0YWNoRXZlbnQoICJvbmxvYWQiLCBjb21wbGV0ZWQgKTsKCgkJCS8vIElmIElFIGFuZCBub3QgYSBmcmFtZQoJCQkvLyBjb250aW51YWxseSBjaGVjayB0byBzZWUgaWYgdGhlIGRvY3VtZW50IGlzIHJlYWR5CgkJCXZhciB0b3AgPSBmYWxzZTsKCgkJCXRyeSB7CgkJCQl0b3AgPSB3aW5kb3cuZnJhbWVFbGVtZW50ID09IG51bGwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwoJCQl9IGNhdGNoKGUpIHt9CgoJCQlpZiAoIHRvcCAmJiB0b3AuZG9TY3JvbGwgKSB7CgkJCQkoZnVuY3Rpb24gZG9TY3JvbGxDaGVjaygpIHsKCQkJCQlpZiAoICFqUXVlcnkuaXNSZWFkeSApIHsKCgkJCQkJCXRyeSB7CgkJCQkJCQkvLyBVc2UgdGhlIHRyaWNrIGJ5IERpZWdvIFBlcmluaQoJCQkJCQkJLy8gaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0lFQ29udGVudExvYWRlZC8KCQkJCQkJCXRvcC5kb1Njcm9sbCgibGVmdCIpOwoJCQkJCQl9IGNhdGNoKGUpIHsKCQkJCQkJCXJldHVybiBzZXRUaW1lb3V0KCBkb1Njcm9sbENoZWNrLCA1MCApOwoJCQkJCQl9CgoJCQkJCQkvLyBkZXRhY2ggYWxsIGRvbSByZWFkeSBldmVudHMKCQkJCQkJZGV0YWNoKCk7CgoJCQkJCQkvLyBhbmQgZXhlY3V0ZSBhbnkgd2FpdGluZyBmdW5jdGlvbnMKCQkJCQkJalF1ZXJ5LnJlYWR5KCk7CgkJCQkJfQoJCQkJfSkoKTsKCQkJfQoJCX0KCX0KCXJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7Cn07CgoKdmFyIHN0cnVuZGVmaW5lZCA9IHR5cGVvZiB1bmRlZmluZWQ7CgoKCi8vIFN1cHBvcnQ6IElFPDkKLy8gSXRlcmF0aW9uIG92ZXIgb2JqZWN0J3MgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIGl0cyBvd24KdmFyIGk7CmZvciAoIGkgaW4galF1ZXJ5KCBzdXBwb3J0ICkgKSB7CglicmVhazsKfQpzdXBwb3J0Lm93bkxhc3QgPSBpICE9PSAiMCI7CgovLyBOb3RlOiBtb3N0IHN1cHBvcnQgdGVzdHMgYXJlIGRlZmluZWQgaW4gdGhlaXIgcmVzcGVjdGl2ZSBtb2R1bGVzLgovLyBmYWxzZSB1bnRpbCB0aGUgdGVzdCBpcyBydW4Kc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0ID0gZmFsc2U7CgpqUXVlcnkoZnVuY3Rpb24oKSB7CgkvLyBXZSBuZWVkIHRvIGV4ZWN1dGUgdGhpcyBvbmUgc3VwcG9ydCB0ZXN0IEFTQVAgYmVjYXVzZSB3ZSBuZWVkIHRvIGtub3cKCS8vIGlmIGJvZHkuc3R5bGUuem9vbSBuZWVkcyB0byBiZSBzZXQuCgoJdmFyIGNvbnRhaW5lciwgZGl2LAoJCWJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdOwoKCWlmICggIWJvZHkgKSB7CgkJLy8gUmV0dXJuIGZvciBmcmFtZXNldCBkb2NzIHRoYXQgZG9uJ3QgaGF2ZSBhIGJvZHkKCQlyZXR1cm47Cgl9CgoJLy8gU2V0dXAKCWNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7Cgljb250YWluZXIuc3R5bGUuY3NzVGV4dCA9ICJib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6LTk5OTlweDttYXJnaW4tdG9wOjFweCI7CgoJZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKTsKCWJvZHkuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTsKCglpZiAoIHR5cGVvZiBkaXYuc3R5bGUuem9vbSAhPT0gc3RydW5kZWZpbmVkICkgewoJCS8vIFN1cHBvcnQ6IElFPDgKCQkvLyBDaGVjayBpZiBuYXRpdmVseSBibG9jay1sZXZlbCBlbGVtZW50cyBhY3QgbGlrZSBpbmxpbmUtYmxvY2sKCQkvLyBlbGVtZW50cyB3aGVuIHNldHRpbmcgdGhlaXIgZGlzcGxheSB0byAnaW5saW5lJyBhbmQgZ2l2aW5nCgkJLy8gdGhlbSBsYXlvdXQKCQlkaXYuc3R5bGUuY3NzVGV4dCA9ICJib3JkZXI6MDttYXJnaW46MDt3aWR0aDoxcHg7cGFkZGluZzoxcHg7ZGlzcGxheTppbmxpbmU7em9vbToxIjsKCgkJaWYgKCAoc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0ID0gKCBkaXYub2Zmc2V0V2lkdGggPT09IDMgKSkgKSB7CgkJCS8vIFByZXZlbnQgSUUgNiBmcm9tIGFmZmVjdGluZyBsYXlvdXQgZm9yIHBvc2l0aW9uZWQgZWxlbWVudHMgIzExMDQ4CgkJCS8vIFByZXZlbnQgSUUgZnJvbSBzaHJpbmtpbmcgdGhlIGJvZHkgaW4gSUUgNyBtb2RlICMxMjg2OQoJCQkvLyBTdXBwb3J0OiBJRTw4CgkJCWJvZHkuc3R5bGUuem9vbSA9IDE7CgkJfQoJfQoKCWJvZHkucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApOwoKCS8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUKCWNvbnRhaW5lciA9IGRpdiA9IG51bGw7Cn0pOwoKCgoKKGZ1bmN0aW9uKCkgewoJdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7CgoJLy8gRXhlY3V0ZSB0aGUgdGVzdCBvbmx5IGlmIG5vdCBhbHJlYWR5IGV4ZWN1dGVkIGluIGFub3RoZXIgbW9kdWxlLgoJaWYgKHN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9PSBudWxsKSB7CgkJLy8gU3VwcG9ydDogSUU8OQoJCXN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9IHRydWU7CgkJdHJ5IHsKCQkJZGVsZXRlIGRpdi50ZXN0OwoJCX0gY2F0Y2goIGUgKSB7CgkJCXN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9IGZhbHNlOwoJCX0KCX0KCgkvLyBOdWxsIGVsZW1lbnRzIHRvIGF2b2lkIGxlYWtzIGluIElFLgoJZGl2ID0gbnVsbDsKfSkoKTsKCgovKioKICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIG9iamVjdCBjYW4gaGF2ZSBkYXRhCiAqLwpqUXVlcnkuYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBlbGVtICkgewoJdmFyIG5vRGF0YSA9IGpRdWVyeS5ub0RhdGFbIChlbGVtLm5vZGVOYW1lICsgIiAiKS50b0xvd2VyQ2FzZSgpIF0sCgkJbm9kZVR5cGUgPSArZWxlbS5ub2RlVHlwZSB8fCAxOwoKCS8vIERvIG5vdCBzZXQgZGF0YSBvbiBub24tZWxlbWVudCBET00gbm9kZXMgYmVjYXVzZSBpdCB3aWxsIG5vdCBiZSBjbGVhcmVkICgjODMzNSkuCglyZXR1cm4gbm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgPwoJCWZhbHNlIDoKCgkJLy8gTm9kZXMgYWNjZXB0IGRhdGEgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQ7IHJlamVjdGlvbiBjYW4gYmUgY29uZGl0aW9uYWwKCQkhbm9EYXRhIHx8IG5vRGF0YSAhPT0gdHJ1ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSgiY2xhc3NpZCIpID09PSBub0RhdGE7Cn07CgoKdmFyIHJicmFjZSA9IC9eKD86XHtbXHdcV10qXH18XFtbXHdcV10qXF0pJC8sCglybXVsdGlEYXNoID0gLyhbQS1aXSkvZzsKCmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7CgkvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55CgkvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUKCWlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7CgoJCXZhciBuYW1lID0gImRhdGEtIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCAiLSQxIiApLnRvTG93ZXJDYXNlKCk7CgoJCWRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApOwoKCQlpZiAoIHR5cGVvZiBkYXRhID09PSAic3RyaW5nIiApIHsKCQkJdHJ5IHsKCQkJCWRhdGEgPSBkYXRhID09PSAidHJ1ZSIgPyB0cnVlIDoKCQkJCQlkYXRhID09PSAiZmFsc2UiID8gZmFsc2UgOgoJCQkJCWRhdGEgPT09ICJudWxsIiA/IG51bGwgOgoJCQkJCS8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nCgkJCQkJK2RhdGEgKyAiIiA9PT0gZGF0YSA/ICtkYXRhIDoKCQkJCQlyYnJhY2UudGVzdCggZGF0YSApID8galF1ZXJ5LnBhcnNlSlNPTiggZGF0YSApIDoKCQkJCQlkYXRhOwoJCQl9IGNhdGNoKCBlICkge30KCgkJCS8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlcgoJCQlqUXVlcnkuZGF0YSggZWxlbSwga2V5LCBkYXRhICk7CgoJCX0gZWxzZSB7CgkJCWRhdGEgPSB1bmRlZmluZWQ7CgkJfQoJfQoKCXJldHVybiBkYXRhOwp9CgovLyBjaGVja3MgYSBjYWNoZSBvYmplY3QgZm9yIGVtcHRpbmVzcwpmdW5jdGlvbiBpc0VtcHR5RGF0YU9iamVjdCggb2JqICkgewoJdmFyIG5hbWU7Cglmb3IgKCBuYW1lIGluIG9iaiApIHsKCgkJLy8gaWYgdGhlIHB1YmxpYyBkYXRhIG9iamVjdCBpcyBlbXB0eSwgdGhlIHByaXZhdGUgaXMgc3RpbGwgZW1wdHkKCQlpZiAoIG5hbWUgPT09ICJkYXRhIiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb2JqW25hbWVdICkgKSB7CgkJCWNvbnRpbnVlOwoJCX0KCQlpZiAoIG5hbWUgIT09ICJ0b0pTT04iICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJfQoKCXJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEsIHB2dCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHsKCWlmICggIWpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7CgkJcmV0dXJuOwoJfQoKCXZhciByZXQsIHRoaXNDYWNoZSwKCQlpbnRlcm5hbEtleSA9IGpRdWVyeS5leHBhbmRvLAoKCQkvLyBXZSBoYXZlIHRvIGhhbmRsZSBET00gbm9kZXMgYW5kIEpTIG9iamVjdHMgZGlmZmVyZW50bHkgYmVjYXVzZSBJRTYtNwoJCS8vIGNhbid0IEdDIG9iamVjdCByZWZlcmVuY2VzIHByb3Blcmx5IGFjcm9zcyB0aGUgRE9NLUpTIGJvdW5kYXJ5CgkJaXNOb2RlID0gZWxlbS5ub2RlVHlwZSwKCgkJLy8gT25seSBET00gbm9kZXMgbmVlZCB0aGUgZ2xvYmFsIGpRdWVyeSBjYWNoZTsgSlMgb2JqZWN0IGRhdGEgaXMKCQkvLyBhdHRhY2hlZCBkaXJlY3RseSB0byB0aGUgb2JqZWN0IHNvIEdDIGNhbiBvY2N1ciBhdXRvbWF0aWNhbGx5CgkJY2FjaGUgPSBpc05vZGUgPyBqUXVlcnkuY2FjaGUgOiBlbGVtLAoKCQkvLyBPbmx5IGRlZmluaW5nIGFuIElEIGZvciBKUyBvYmplY3RzIGlmIGl0cyBjYWNoZSBhbHJlYWR5IGV4aXN0cyBhbGxvd3MKCQkvLyB0aGUgY29kZSB0byBzaG9ydGN1dCBvbiB0aGUgc2FtZSBwYXRoIGFzIGEgRE9NIG5vZGUgd2l0aCBubyBjYWNoZQoJCWlkID0gaXNOb2RlID8gZWxlbVsgaW50ZXJuYWxLZXkgXSA6IGVsZW1bIGludGVybmFsS2V5IF0gJiYgaW50ZXJuYWxLZXk7CgoJLy8gQXZvaWQgZG9pbmcgYW55IG1vcmUgd29yayB0aGFuIHdlIG5lZWQgdG8gd2hlbiB0cnlpbmcgdG8gZ2V0IGRhdGEgb24gYW4KCS8vIG9iamVjdCB0aGF0IGhhcyBubyBkYXRhIGF0IGFsbAoJaWYgKCAoIWlkIHx8ICFjYWNoZVtpZF0gfHwgKCFwdnQgJiYgIWNhY2hlW2lkXS5kYXRhKSkgJiYgZGF0YSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBuYW1lID09PSAic3RyaW5nIiApIHsKCQlyZXR1cm47Cgl9CgoJaWYgKCAhaWQgKSB7CgkJLy8gT25seSBET00gbm9kZXMgbmVlZCBhIG5ldyB1bmlxdWUgSUQgZm9yIGVhY2ggZWxlbWVudCBzaW5jZSB0aGVpciBkYXRhCgkJLy8gZW5kcyB1cCBpbiB0aGUgZ2xvYmFsIGNhY2hlCgkJaWYgKCBpc05vZGUgKSB7CgkJCWlkID0gZWxlbVsgaW50ZXJuYWxLZXkgXSA9IGRlbGV0ZWRJZHMucG9wKCkgfHwgalF1ZXJ5Lmd1aWQrKzsKCQl9IGVsc2UgewoJCQlpZCA9IGludGVybmFsS2V5OwoJCX0KCX0KCglpZiAoICFjYWNoZVsgaWQgXSApIHsKCQkvLyBBdm9pZCBleHBvc2luZyBqUXVlcnkgbWV0YWRhdGEgb24gcGxhaW4gSlMgb2JqZWN0cyB3aGVuIHRoZSBvYmplY3QKCQkvLyBpcyBzZXJpYWxpemVkIHVzaW5nIEpTT04uc3RyaW5naWZ5CgkJY2FjaGVbIGlkIF0gPSBpc05vZGUgPyB7fSA6IHsgdG9KU09OOiBqUXVlcnkubm9vcCB9OwoJfQoKCS8vIEFuIG9iamVjdCBjYW4gYmUgcGFzc2VkIHRvIGpRdWVyeS5kYXRhIGluc3RlYWQgb2YgYSBrZXkvdmFsdWUgcGFpcjsgdGhpcyBnZXRzCgkvLyBzaGFsbG93IGNvcGllZCBvdmVyIG9udG8gdGhlIGV4aXN0aW5nIGNhY2hlCglpZiAoIHR5cGVvZiBuYW1lID09PSAib2JqZWN0IiB8fCB0eXBlb2YgbmFtZSA9PT0gImZ1bmN0aW9uIiApIHsKCQlpZiAoIHB2dCApIHsKCQkJY2FjaGVbIGlkIF0gPSBqUXVlcnkuZXh0ZW5kKCBjYWNoZVsgaWQgXSwgbmFtZSApOwoJCX0gZWxzZSB7CgkJCWNhY2hlWyBpZCBdLmRhdGEgPSBqUXVlcnkuZXh0ZW5kKCBjYWNoZVsgaWQgXS5kYXRhLCBuYW1lICk7CgkJfQoJfQoKCXRoaXNDYWNoZSA9IGNhY2hlWyBpZCBdOwoKCS8vIGpRdWVyeSBkYXRhKCkgaXMgc3RvcmVkIGluIGEgc2VwYXJhdGUgb2JqZWN0IGluc2lkZSB0aGUgb2JqZWN0J3MgaW50ZXJuYWwgZGF0YQoJLy8gY2FjaGUgaW4gb3JkZXIgdG8gYXZvaWQga2V5IGNvbGxpc2lvbnMgYmV0d2VlbiBpbnRlcm5hbCBkYXRhIGFuZCB1c2VyLWRlZmluZWQKCS8vIGRhdGEuCglpZiAoICFwdnQgKSB7CgkJaWYgKCAhdGhpc0NhY2hlLmRhdGEgKSB7CgkJCXRoaXNDYWNoZS5kYXRhID0ge307CgkJfQoKCQl0aGlzQ2FjaGUgPSB0aGlzQ2FjaGUuZGF0YTsKCX0KCglpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHsKCQl0aGlzQ2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSBdID0gZGF0YTsKCX0KCgkvLyBDaGVjayBmb3IgYm90aCBjb252ZXJ0ZWQtdG8tY2FtZWwgYW5kIG5vbi1jb252ZXJ0ZWQgZGF0YSBwcm9wZXJ0eSBuYW1lcwoJLy8gSWYgYSBkYXRhIHByb3BlcnR5IHdhcyBzcGVjaWZpZWQKCWlmICggdHlwZW9mIG5hbWUgPT09ICJzdHJpbmciICkgewoKCQkvLyBGaXJzdCBUcnkgdG8gZmluZCBhcy1pcyBwcm9wZXJ0eSBkYXRhCgkJcmV0ID0gdGhpc0NhY2hlWyBuYW1lIF07CgoJCS8vIFRlc3QgZm9yIG51bGx8dW5kZWZpbmVkIHByb3BlcnR5IGRhdGEKCQlpZiAoIHJldCA9PSBudWxsICkgewoKCQkJLy8gVHJ5IHRvIGZpbmQgdGhlIGNhbWVsQ2FzZWQgcHJvcGVydHkKCQkJcmV0ID0gdGhpc0NhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICkgXTsKCQl9Cgl9IGVsc2UgewoJCXJldCA9IHRoaXNDYWNoZTsKCX0KCglyZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBpbnRlcm5hbFJlbW92ZURhdGEoIGVsZW0sIG5hbWUsIHB2dCApIHsKCWlmICggIWpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7CgkJcmV0dXJuOwoJfQoKCXZhciB0aGlzQ2FjaGUsIGksCgkJaXNOb2RlID0gZWxlbS5ub2RlVHlwZSwKCgkJLy8gU2VlIGpRdWVyeS5kYXRhIGZvciBtb3JlIGluZm9ybWF0aW9uCgkJY2FjaGUgPSBpc05vZGUgPyBqUXVlcnkuY2FjaGUgOiBlbGVtLAoJCWlkID0gaXNOb2RlID8gZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXSA6IGpRdWVyeS5leHBhbmRvOwoKCS8vIElmIHRoZXJlIGlzIGFscmVhZHkgbm8gY2FjaGUgZW50cnkgZm9yIHRoaXMgb2JqZWN0LCB0aGVyZSBpcyBubwoJLy8gcHVycG9zZSBpbiBjb250aW51aW5nCglpZiAoICFjYWNoZVsgaWQgXSApIHsKCQlyZXR1cm47Cgl9CgoJaWYgKCBuYW1lICkgewoKCQl0aGlzQ2FjaGUgPSBwdnQgPyBjYWNoZVsgaWQgXSA6IGNhY2hlWyBpZCBdLmRhdGE7CgoJCWlmICggdGhpc0NhY2hlICkgewoKCQkJLy8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG5hbWVzIGZvciBkYXRhIGtleXMKCQkJaWYgKCAhalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHsKCgkJCQkvLyB0cnkgdGhlIHN0cmluZyBhcyBhIGtleSBiZWZvcmUgYW55IG1hbmlwdWxhdGlvbgoJCQkJaWYgKCBuYW1lIGluIHRoaXNDYWNoZSApIHsKCQkJCQluYW1lID0gWyBuYW1lIF07CgkJCQl9IGVsc2UgewoKCQkJCQkvLyBzcGxpdCB0aGUgY2FtZWwgY2FzZWQgdmVyc2lvbiBieSBzcGFjZXMgdW5sZXNzIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMKCQkJCQluYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApOwoJCQkJCWlmICggbmFtZSBpbiB0aGlzQ2FjaGUgKSB7CgkJCQkJCW5hbWUgPSBbIG5hbWUgXTsKCQkJCQl9IGVsc2UgewoJCQkJCQluYW1lID0gbmFtZS5zcGxpdCgiICIpOwoJCQkJCX0KCQkJCX0KCQkJfSBlbHNlIHsKCQkJCS8vIElmICJuYW1lIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uCgkJCQkvLyBXaGVuIGRhdGEgaXMgaW5pdGlhbGx5IGNyZWF0ZWQsIHZpYSAoImtleSIsICJ2YWwiKSBzaWduYXR1cmUsCgkJCQkvLyBrZXlzIHdpbGwgYmUgY29udmVydGVkIHRvIGNhbWVsQ2FzZS4KCQkJCS8vIFNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIF9ob3dfIGEga2V5IHdhcyBhZGRlZCwgcmVtb3ZlCgkJCQkvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2CgkJCQkvLyBUaGlzIHdpbGwgb25seSBwZW5hbGl6ZSB0aGUgYXJyYXkgYXJndW1lbnQgcGF0aC4KCQkJCW5hbWUgPSBuYW1lLmNvbmNhdCggalF1ZXJ5Lm1hcCggbmFtZSwgalF1ZXJ5LmNhbWVsQ2FzZSApICk7CgkJCX0KCgkJCWkgPSBuYW1lLmxlbmd0aDsKCQkJd2hpbGUgKCBpLS0gKSB7CgkJCQlkZWxldGUgdGhpc0NhY2hlWyBuYW1lW2ldIF07CgkJCX0KCgkJCS8vIElmIHRoZXJlIGlzIG5vIGRhdGEgbGVmdCBpbiB0aGUgY2FjaGUsIHdlIHdhbnQgdG8gY29udGludWUKCQkJLy8gYW5kIGxldCB0aGUgY2FjaGUgb2JqZWN0IGl0c2VsZiBnZXQgZGVzdHJveWVkCgkJCWlmICggcHZ0ID8gIWlzRW1wdHlEYXRhT2JqZWN0KHRoaXNDYWNoZSkgOiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QodGhpc0NhY2hlKSApIHsKCQkJCXJldHVybjsKCQkJfQoJCX0KCX0KCgkvLyBTZWUgalF1ZXJ5LmRhdGEgZm9yIG1vcmUgaW5mb3JtYXRpb24KCWlmICggIXB2dCApIHsKCQlkZWxldGUgY2FjaGVbIGlkIF0uZGF0YTsKCgkJLy8gRG9uJ3QgZGVzdHJveSB0aGUgcGFyZW50IGNhY2hlIHVubGVzcyB0aGUgaW50ZXJuYWwgZGF0YSBvYmplY3QKCQkvLyBoYWQgYmVlbiB0aGUgb25seSB0aGluZyBsZWZ0IGluIGl0CgkJaWYgKCAhaXNFbXB0eURhdGFPYmplY3QoIGNhY2hlWyBpZCBdICkgKSB7CgkJCXJldHVybjsKCQl9Cgl9CgoJLy8gRGVzdHJveSB0aGUgY2FjaGUKCWlmICggaXNOb2RlICkgewoJCWpRdWVyeS5jbGVhbkRhdGEoIFsgZWxlbSBdLCB0cnVlICk7CgoJLy8gVXNlIGRlbGV0ZSB3aGVuIHN1cHBvcnRlZCBmb3IgZXhwYW5kb3Mgb3IgYGNhY2hlYCBpcyBub3QgYSB3aW5kb3cgcGVyIGlzV2luZG93ICgjMTAwODApCgkvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqLwoJfSBlbHNlIGlmICggc3VwcG9ydC5kZWxldGVFeHBhbmRvIHx8IGNhY2hlICE9IGNhY2hlLndpbmRvdyApIHsKCQkvKiBqc2hpbnQgZXFlcWVxOiB0cnVlICovCgkJZGVsZXRlIGNhY2hlWyBpZCBdOwoKCS8vIFdoZW4gYWxsIGVsc2UgZmFpbHMsIG51bGwKCX0gZWxzZSB7CgkJY2FjaGVbIGlkIF0gPSBudWxsOwoJfQp9CgpqUXVlcnkuZXh0ZW5kKHsKCWNhY2hlOiB7fSwKCgkvLyBUaGUgZm9sbG93aW5nIGVsZW1lbnRzIChzcGFjZS1zdWZmaXhlZCB0byBhdm9pZCBPYmplY3QucHJvdG90eXBlIGNvbGxpc2lvbnMpCgkvLyB0aHJvdyB1bmNhdGNoYWJsZSBleGNlcHRpb25zIGlmIHlvdSBhdHRlbXB0IHRvIHNldCBleHBhbmRvIHByb3BlcnRpZXMKCW5vRGF0YTogewoJCSJhcHBsZXQgIjogdHJ1ZSwKCQkiZW1iZWQgIjogdHJ1ZSwKCQkvLyAuLi5idXQgRmxhc2ggb2JqZWN0cyAod2hpY2ggaGF2ZSB0aGlzIGNsYXNzaWQpICpjYW4qIGhhbmRsZSBleHBhbmRvcwoJCSJvYmplY3QgIjogImNsc2lkOkQyN0NEQjZFLUFFNkQtMTFjZi05NkI4LTQ0NDU1MzU0MDAwMCIKCX0sCgoJaGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7CgkJZWxlbSA9IGVsZW0ubm9kZVR5cGUgPyBqUXVlcnkuY2FjaGVbIGVsZW1balF1ZXJ5LmV4cGFuZG9dIF0gOiBlbGVtWyBqUXVlcnkuZXhwYW5kbyBdOwoJCXJldHVybiAhIWVsZW0gJiYgIWlzRW1wdHlEYXRhT2JqZWN0KCBlbGVtICk7Cgl9LAoKCWRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkgewoJCXJldHVybiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEgKTsKCX0sCgoJcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7CgkJcmV0dXJuIGludGVybmFsUmVtb3ZlRGF0YSggZWxlbSwgbmFtZSApOwoJfSwKCgkvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuCglfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7CgkJcmV0dXJuIGludGVybmFsRGF0YSggZWxlbSwgbmFtZSwgZGF0YSwgdHJ1ZSApOwoJfSwKCglfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7CgkJcmV0dXJuIGludGVybmFsUmVtb3ZlRGF0YSggZWxlbSwgbmFtZSwgdHJ1ZSApOwoJfQp9KTsKCmpRdWVyeS5mbi5leHRlbmQoewoJZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJdmFyIGksIG5hbWUsIGRhdGEsCgkJCWVsZW0gPSB0aGlzWzBdLAoJCQlhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzOwoKCQkvLyBTcGVjaWFsIGV4cGVjdGlvbnMgb2YgLmRhdGEgYmFzaWNhbGx5IHRod2FydCBqUXVlcnkuYWNjZXNzLAoJCS8vIHNvIGltcGxlbWVudCB0aGUgcmVsZXZhbnQgYmVoYXZpb3Igb3Vyc2VsdmVzCgoJCS8vIEdldHMgYWxsIHZhbHVlcwoJCWlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7CgkJCWlmICggdGhpcy5sZW5ndGggKSB7CgkJCQlkYXRhID0galF1ZXJ5LmRhdGEoIGVsZW0gKTsKCgkJCQlpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWpRdWVyeS5fZGF0YSggZWxlbSwgInBhcnNlZEF0dHJzIiApICkgewoJCQkJCWkgPSBhdHRycy5sZW5ndGg7CgkJCQkJd2hpbGUgKCBpLS0gKSB7CgkJCQkJCW5hbWUgPSBhdHRyc1tpXS5uYW1lOwoKCQkJCQkJaWYgKCBuYW1lLmluZGV4T2YoImRhdGEtIikgPT09IDAgKSB7CgkJCQkJCQluYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSg1KSApOwoKCQkJCQkJCWRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTsKCQkJCQkJfQoJCQkJCX0KCQkJCQlqUXVlcnkuX2RhdGEoIGVsZW0sICJwYXJzZWRBdHRycyIsIHRydWUgKTsKCQkJCX0KCQkJfQoKCQkJcmV0dXJuIGRhdGE7CgkJfQoKCQkvLyBTZXRzIG11bHRpcGxlIHZhbHVlcwoJCWlmICggdHlwZW9mIGtleSA9PT0gIm9iamVjdCIgKSB7CgkJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQlqUXVlcnkuZGF0YSggdGhpcywga2V5ICk7CgkJCX0pOwoJCX0KCgkJcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8KCgkJCS8vIFNldHMgb25lIHZhbHVlCgkJCXRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCWpRdWVyeS5kYXRhKCB0aGlzLCBrZXksIHZhbHVlICk7CgkJCX0pIDoKCgkJCS8vIEdldHMgb25lIHZhbHVlCgkJCS8vIFRyeSB0byBmZXRjaCBhbnkgaW50ZXJuYWxseSBzdG9yZWQgZGF0YSBmaXJzdAoJCQllbGVtID8gZGF0YUF0dHIoIGVsZW0sIGtleSwgalF1ZXJ5LmRhdGEoIGVsZW0sIGtleSApICkgOiB1bmRlZmluZWQ7Cgl9LAoKCXJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7CgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJalF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMsIGtleSApOwoJCX0pOwoJfQp9KTsKCgpqUXVlcnkuZXh0ZW5kKHsKCXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHsKCQl2YXIgcXVldWU7CgoJCWlmICggZWxlbSApIHsKCQkJdHlwZSA9ICggdHlwZSB8fCAiZngiICkgKyAicXVldWUiOwoJCQlxdWV1ZSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSApOwoKCQkJLy8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cAoJCQlpZiAoIGRhdGEgKSB7CgkJCQlpZiAoICFxdWV1ZSB8fCBqUXVlcnkuaXNBcnJheShkYXRhKSApIHsKCQkJCQlxdWV1ZSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheShkYXRhKSApOwoJCQkJfSBlbHNlIHsKCQkJCQlxdWV1ZS5wdXNoKCBkYXRhICk7CgkJCQl9CgkJCX0KCQkJcmV0dXJuIHF1ZXVlIHx8IFtdOwoJCX0KCX0sCgoJZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7CgkJdHlwZSA9IHR5cGUgfHwgImZ4IjsKCgkJdmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksCgkJCXN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLAoJCQlmbiA9IHF1ZXVlLnNoaWZ0KCksCgkJCWhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksCgkJCW5leHQgPSBmdW5jdGlvbigpIHsKCQkJCWpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7CgkJCX07CgoJCS8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWwKCQlpZiAoIGZuID09PSAiaW5wcm9ncmVzcyIgKSB7CgkJCWZuID0gcXVldWUuc2hpZnQoKTsKCQkJc3RhcnRMZW5ndGgtLTsKCQl9CgoJCWlmICggZm4gKSB7CgoJCQkvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nCgkJCS8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWQKCQkJaWYgKCB0eXBlID09PSAiZngiICkgewoJCQkJcXVldWUudW5zaGlmdCggImlucHJvZ3Jlc3MiICk7CgkJCX0KCgkJCS8vIGNsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb24KCQkJZGVsZXRlIGhvb2tzLnN0b3A7CgkJCWZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7CgkJfQoKCQlpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHsKCQkJaG9va3MuZW1wdHkuZmlyZSgpOwoJCX0KCX0sCgoJLy8gbm90IGludGVuZGVkIGZvciBwdWJsaWMgY29uc3VtcHRpb24gLSBnZW5lcmF0ZXMgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJucyB0aGUgY3VycmVudCBvbmUKCV9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHsKCQl2YXIga2V5ID0gdHlwZSArICJxdWV1ZUhvb2tzIjsKCQlyZXR1cm4galF1ZXJ5Ll9kYXRhKCBlbGVtLCBrZXkgKSB8fCBqUXVlcnkuX2RhdGEoIGVsZW0sIGtleSwgewoJCQllbXB0eTogalF1ZXJ5LkNhbGxiYWNrcygib25jZSBtZW1vcnkiKS5hZGQoZnVuY3Rpb24oKSB7CgkJCQlqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIHR5cGUgKyAicXVldWUiICk7CgkJCQlqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIGtleSApOwoJCQl9KQoJCX0pOwoJfQp9KTsKCmpRdWVyeS5mbi5leHRlbmQoewoJcXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkgewoJCXZhciBzZXR0ZXIgPSAyOwoKCQlpZiAoIHR5cGVvZiB0eXBlICE9PSAic3RyaW5nIiApIHsKCQkJZGF0YSA9IHR5cGU7CgkJCXR5cGUgPSAiZngiOwoJCQlzZXR0ZXItLTsKCQl9CgoJCWlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHsKCQkJcmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1swXSwgdHlwZSApOwoJCX0KCgkJcmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/CgkJCXRoaXMgOgoJCQl0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQl2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTsKCgkJCQkvLyBlbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZQoJCQkJalF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7CgoJCQkJaWYgKCB0eXBlID09PSAiZngiICYmIHF1ZXVlWzBdICE9PSAiaW5wcm9ncmVzcyIgKSB7CgkJCQkJalF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTsKCQkJCX0KCQkJfSk7Cgl9LAoJZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7CgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJalF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTsKCQl9KTsKCX0sCgljbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHsKCQlyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCAiZngiLCBbXSApOwoJfSwKCS8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGUKCS8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KQoJcHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHsKCQl2YXIgdG1wLAoJCQljb3VudCA9IDEsCgkJCWRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksCgkJCWVsZW1lbnRzID0gdGhpcywKCQkJaSA9IHRoaXMubGVuZ3RoLAoJCQlyZXNvbHZlID0gZnVuY3Rpb24oKSB7CgkJCQlpZiAoICEoIC0tY291bnQgKSApIHsKCQkJCQlkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApOwoJCQkJfQoJCQl9OwoKCQlpZiAoIHR5cGVvZiB0eXBlICE9PSAic3RyaW5nIiApIHsKCQkJb2JqID0gdHlwZTsKCQkJdHlwZSA9IHVuZGVmaW5lZDsKCQl9CgkJdHlwZSA9IHR5cGUgfHwgImZ4IjsKCgkJd2hpbGUgKCBpLS0gKSB7CgkJCXRtcCA9IGpRdWVyeS5fZGF0YSggZWxlbWVudHNbIGkgXSwgdHlwZSArICJxdWV1ZUhvb2tzIiApOwoJCQlpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7CgkJCQljb3VudCsrOwoJCQkJdG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApOwoJCQl9CgkJfQoJCXJlc29sdmUoKTsKCQlyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7Cgl9Cn0pOwp2YXIgcG51bSA9ICgvWystXT8oPzpcZCpcLnwpXGQrKD86W2VFXVsrLV0/XGQrfCkvKS5zb3VyY2U7Cgp2YXIgY3NzRXhwYW5kID0gWyAiVG9wIiwgIlJpZ2h0IiwgIkJvdHRvbSIsICJMZWZ0IiBdOwoKdmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkgewoJCS8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247CgkJLy8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50CgkJZWxlbSA9IGVsIHx8IGVsZW07CgkJcmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sICJkaXNwbGF5IiApID09PSAibm9uZSIgfHwgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7Cgl9OwoKCgovLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb24KLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uCnZhciBhY2Nlc3MgPSBqUXVlcnkuYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkgewoJdmFyIGkgPSAwLAoJCWxlbmd0aCA9IGVsZW1zLmxlbmd0aCwKCQlidWxrID0ga2V5ID09IG51bGw7CgoJLy8gU2V0cyBtYW55IHZhbHVlcwoJaWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09ICJvYmplY3QiICkgewoJCWNoYWluYWJsZSA9IHRydWU7CgkJZm9yICggaSBpbiBrZXkgKSB7CgkJCWpRdWVyeS5hY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5W2ldLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7CgkJfQoKCS8vIFNldHMgb25lIHZhbHVlCgl9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewoJCWNoYWluYWJsZSA9IHRydWU7CgoJCWlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkgewoJCQlyYXcgPSB0cnVlOwoJCX0KCgkJaWYgKCBidWxrICkgewoJCQkvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXQKCQkJaWYgKCByYXcgKSB7CgkJCQlmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTsKCQkJCWZuID0gbnVsbDsKCgkJCS8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXMKCQkJfSBlbHNlIHsKCQkJCWJ1bGsgPSBmbjsKCQkJCWZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7CgkJCQkJcmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7CgkJCQl9OwoJCQl9CgkJfQoKCQlpZiAoIGZuICkgewoJCQlmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHsKCQkJCWZuKCBlbGVtc1tpXSwga2V5LCByYXcgPyB2YWx1ZSA6IHZhbHVlLmNhbGwoIGVsZW1zW2ldLCBpLCBmbiggZWxlbXNbaV0sIGtleSApICkgKTsKCQkJfQoJCX0KCX0KCglyZXR1cm4gY2hhaW5hYmxlID8KCQllbGVtcyA6CgoJCS8vIEdldHMKCQlidWxrID8KCQkJZm4uY2FsbCggZWxlbXMgKSA6CgkJCWxlbmd0aCA/IGZuKCBlbGVtc1swXSwga2V5ICkgOiBlbXB0eUdldDsKfTsKdmFyIHJjaGVja2FibGVUeXBlID0gKC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pKTsKCgoKKGZ1bmN0aW9uKCkgewoJdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLAoJCWRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLAoJCWlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKTsKCgkvLyBTZXR1cAoJZGl2LnNldEF0dHJpYnV0ZSggImNsYXNzTmFtZSIsICJ0IiApOwoJZGl2LmlubmVySFRNTCA9ICIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT4iOwoKCS8vIElFIHN0cmlwcyBsZWFkaW5nIHdoaXRlc3BhY2Ugd2hlbiAuaW5uZXJIVE1MIGlzIHVzZWQKCXN1cHBvcnQubGVhZGluZ1doaXRlc3BhY2UgPSBkaXYuZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gMzsKCgkvLyBNYWtlIHN1cmUgdGhhdCB0Ym9keSBlbGVtZW50cyBhcmVuJ3QgYXV0b21hdGljYWxseSBpbnNlcnRlZAoJLy8gSUUgd2lsbCBpbnNlcnQgdGhlbSBpbnRvIGVtcHR5IHRhYmxlcwoJc3VwcG9ydC50Ym9keSA9ICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJ0Ym9keSIgKS5sZW5ndGg7CgoJLy8gTWFrZSBzdXJlIHRoYXQgbGluayBlbGVtZW50cyBnZXQgc2VyaWFsaXplZCBjb3JyZWN0bHkgYnkgaW5uZXJIVE1MCgkvLyBUaGlzIHJlcXVpcmVzIGEgd3JhcHBlciBlbGVtZW50IGluIElFCglzdXBwb3J0Lmh0bWxTZXJpYWxpemUgPSAhIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggImxpbmsiICkubGVuZ3RoOwoKCS8vIE1ha2VzIHN1cmUgY2xvbmluZyBhbiBodG1sNSBlbGVtZW50IGRvZXMgbm90IGNhdXNlIHByb2JsZW1zCgkvLyBXaGVyZSBvdXRlckhUTUwgaXMgdW5kZWZpbmVkLCB0aGlzIHN0aWxsIHdvcmtzCglzdXBwb3J0Lmh0bWw1Q2xvbmUgPQoJCWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJuYXYiICkuY2xvbmVOb2RlKCB0cnVlICkub3V0ZXJIVE1MICE9PSAiPDpuYXY+PC86bmF2PiI7CgoJLy8gQ2hlY2sgaWYgYSBkaXNjb25uZWN0ZWQgY2hlY2tib3ggd2lsbCByZXRhaW4gaXRzIGNoZWNrZWQKCS8vIHZhbHVlIG9mIHRydWUgYWZ0ZXIgYXBwZW5kZWQgdG8gdGhlIERPTSAoSUU2LzcpCglpbnB1dC50eXBlID0gImNoZWNrYm94IjsKCWlucHV0LmNoZWNrZWQgPSB0cnVlOwoJZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGlucHV0ICk7CglzdXBwb3J0LmFwcGVuZENoZWNrZWQgPSBpbnB1dC5jaGVja2VkOwoKCS8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkCgkvLyBTdXBwb3J0OiBJRTYtSUUxMSsKCWRpdi5pbm5lckhUTUwgPSAiPHRleHRhcmVhPng8L3RleHRhcmVhPiI7CglzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTsKCgkvLyAjMTEyMTcgLSBXZWJLaXQgbG9zZXMgY2hlY2sgd2hlbiB0aGUgbmFtZSBpcyBhZnRlciB0aGUgY2hlY2tlZCBhdHRyaWJ1dGUKCWZyYWdtZW50LmFwcGVuZENoaWxkKCBkaXYgKTsKCWRpdi5pbm5lckhUTUwgPSAiPGlucHV0IHR5cGU9J3JhZGlvJyBjaGVja2VkPSdjaGVja2VkJyBuYW1lPSd0Jy8+IjsKCgkvLyBTdXBwb3J0OiBTYWZhcmkgNS4xLCBpT1MgNS4xLCBBbmRyb2lkIDQueCwgQW5kcm9pZCAyLjMKCS8vIG9sZCBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHMKCXN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDsKCgkvLyBTdXBwb3J0OiBJRTw5CgkvLyBPcGVyYSBkb2VzIG5vdCBjbG9uZSBldmVudHMgKGFuZCB0eXBlb2YgZGl2LmF0dGFjaEV2ZW50ID09PSB1bmRlZmluZWQpLgoJLy8gSUU5LTEwIGNsb25lcyBldmVudHMgYm91bmQgdmlhIGF0dGFjaEV2ZW50LCBidXQgdGhleSBkb24ndCB0cmlnZ2VyIHdpdGggLmNsaWNrKCkKCXN1cHBvcnQubm9DbG9uZUV2ZW50ID0gdHJ1ZTsKCWlmICggZGl2LmF0dGFjaEV2ZW50ICkgewoJCWRpdi5hdHRhY2hFdmVudCggIm9uY2xpY2siLCBmdW5jdGlvbigpIHsKCQkJc3VwcG9ydC5ub0Nsb25lRXZlbnQgPSBmYWxzZTsKCQl9KTsKCgkJZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsaWNrKCk7Cgl9CgoJLy8gRXhlY3V0ZSB0aGUgdGVzdCBvbmx5IGlmIG5vdCBhbHJlYWR5IGV4ZWN1dGVkIGluIGFub3RoZXIgbW9kdWxlLgoJaWYgKHN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9PSBudWxsKSB7CgkJLy8gU3VwcG9ydDogSUU8OQoJCXN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9IHRydWU7CgkJdHJ5IHsKCQkJZGVsZXRlIGRpdi50ZXN0OwoJCX0gY2F0Y2goIGUgKSB7CgkJCXN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9IGZhbHNlOwoJCX0KCX0KCgkvLyBOdWxsIGVsZW1lbnRzIHRvIGF2b2lkIGxlYWtzIGluIElFLgoJZnJhZ21lbnQgPSBkaXYgPSBpbnB1dCA9IG51bGw7Cn0pKCk7CgoKKGZ1bmN0aW9uKCkgewoJdmFyIGksIGV2ZW50TmFtZSwKCQlkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApOwoKCS8vIFN1cHBvcnQ6IElFPDkgKGxhY2sgc3VibWl0L2NoYW5nZSBidWJibGUpLCBGaXJlZm94IDIzKyAobGFjayBmb2N1c2luIGV2ZW50KQoJZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgY2hhbmdlOiB0cnVlLCBmb2N1c2luOiB0cnVlIH0pIHsKCQlldmVudE5hbWUgPSAib24iICsgaTsKCgkJaWYgKCAhKHN1cHBvcnRbIGkgKyAiQnViYmxlcyIgXSA9IGV2ZW50TmFtZSBpbiB3aW5kb3cpICkgewoJCQkvLyBCZXdhcmUgb2YgQ1NQIHJlc3RyaWN0aW9ucyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKQoJCQlkaXYuc2V0QXR0cmlidXRlKCBldmVudE5hbWUsICJ0IiApOwoJCQlzdXBwb3J0WyBpICsgIkJ1YmJsZXMiIF0gPSBkaXYuYXR0cmlidXRlc1sgZXZlbnROYW1lIF0uZXhwYW5kbyA9PT0gZmFsc2U7CgkJfQoJfQoKCS8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUuCglkaXYgPSBudWxsOwp9KSgpOwoKCnZhciByZm9ybUVsZW1zID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWEpJC9pLAoJcmtleUV2ZW50ID0gL15rZXkvLAoJcm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfGNvbnRleHRtZW51KXxjbGljay8sCglyZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLywKCXJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XC4oLispfCkkLzsKCmZ1bmN0aW9uIHJldHVyblRydWUoKSB7CglyZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7CglyZXR1cm4gZmFsc2U7Cn0KCmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkgewoJdHJ5IHsKCQlyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDsKCX0gY2F0Y2ggKCBlcnIgKSB7IH0KfQoKLyoKICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLgogKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLgogKi8KalF1ZXJ5LmV2ZW50ID0gewoKCWdsb2JhbDoge30sCgoJYWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkgewoJCXZhciB0bXAsIGV2ZW50cywgdCwgaGFuZGxlT2JqSW4sCgkJCXNwZWNpYWwsIGV2ZW50SGFuZGxlLCBoYW5kbGVPYmosCgkJCWhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSwKCQkJZWxlbURhdGEgPSBqUXVlcnkuX2RhdGEoIGVsZW0gKTsKCgkJLy8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cykKCQlpZiAoICFlbGVtRGF0YSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJLy8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyCgkJaWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7CgkJCWhhbmRsZU9iakluID0gaGFuZGxlcjsKCQkJaGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7CgkJCXNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7CgkJfQoKCQkvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXIKCQlpZiAoICFoYW5kbGVyLmd1aWQgKSB7CgkJCWhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7CgkJfQoKCQkvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0CgkJaWYgKCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7CgkJCWV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9OwoJCX0KCQlpZiAoICEoZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUpICkgewoJCQlldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkgewoJCQkJLy8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmQKCQkJCS8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWQKCQkJCXJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBzdHJ1bmRlZmluZWQgJiYgKCFlIHx8IGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSkgPwoJCQkJCWpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZXZlbnRIYW5kbGUuZWxlbSwgYXJndW1lbnRzICkgOgoJCQkJCXVuZGVmaW5lZDsKCQkJfTsKCQkJLy8gQWRkIGVsZW0gYXMgYSBwcm9wZXJ0eSBvZiB0aGUgaGFuZGxlIGZuIHRvIHByZXZlbnQgYSBtZW1vcnkgbGVhayB3aXRoIElFIG5vbi1uYXRpdmUgZXZlbnRzCgkJCWV2ZW50SGFuZGxlLmVsZW0gPSBlbGVtOwoJCX0KCgkJLy8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZQoJCXR5cGVzID0gKCB0eXBlcyB8fCAiIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbICIiIF07CgkJdCA9IHR5cGVzLmxlbmd0aDsKCQl3aGlsZSAoIHQtLSApIHsKCQkJdG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbdF0gKSB8fCBbXTsKCQkJdHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdOwoJCQluYW1lc3BhY2VzID0gKCB0bXBbMl0gfHwgIiIgKS5zcGxpdCggIi4iICkuc29ydCgpOwoKCQkJLy8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzCgkJCWlmICggIXR5cGUgKSB7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJLy8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlCgkJCXNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9OwoKCQkJLy8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlCgkJCXR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTsKCgkJCS8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGUKCQkJc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307CgoJCQkvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVycwoJCQloYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKHsKCQkJCXR5cGU6IHR5cGUsCgkJCQlvcmlnVHlwZTogb3JpZ1R5cGUsCgkJCQlkYXRhOiBkYXRhLAoJCQkJaGFuZGxlcjogaGFuZGxlciwKCQkJCWd1aWQ6IGhhbmRsZXIuZ3VpZCwKCQkJCXNlbGVjdG9yOiBzZWxlY3RvciwKCQkJCW5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksCgkJCQluYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbigiLiIpCgkJCX0sIGhhbmRsZU9iakluICk7CgoJCQkvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdAoJCQlpZiAoICEoaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSkgKSB7CgkJCQloYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107CgkJCQloYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDsKCgkJCQkvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyL2F0dGFjaEV2ZW50IGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2UKCQkJCWlmICggIXNwZWNpYWwuc2V0dXAgfHwgc3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHsKCQkJCQkvLyBCaW5kIHRoZSBnbG9iYWwgZXZlbnQgaGFuZGxlciB0byB0aGUgZWxlbWVudAoJCQkJCWlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkgewoJCQkJCQllbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlLCBmYWxzZSApOwoKCQkJCQl9IGVsc2UgaWYgKCBlbGVtLmF0dGFjaEV2ZW50ICkgewoJCQkJCQllbGVtLmF0dGFjaEV2ZW50KCAib24iICsgdHlwZSwgZXZlbnRIYW5kbGUgKTsKCQkJCQl9CgkJCQl9CgkJCX0KCgkJCWlmICggc3BlY2lhbC5hZGQgKSB7CgkJCQlzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTsKCgkJCQlpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkgewoJCQkJCWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7CgkJCQl9CgkJCX0KCgkJCS8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250CgkJCWlmICggc2VsZWN0b3IgKSB7CgkJCQloYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7CgkJCX0gZWxzZSB7CgkJCQloYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTsKCQkJfQoKCQkJLy8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvbgoJCQlqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlOwoJCX0KCgkJLy8gTnVsbGlmeSBlbGVtIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzIGluIElFCgkJZWxlbSA9IG51bGw7Cgl9LAoKCS8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudAoJcmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHsKCQl2YXIgaiwgaGFuZGxlT2JqLCB0bXAsCgkJCW9yaWdDb3VudCwgdCwgZXZlbnRzLAoJCQlzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwKCQkJbmFtZXNwYWNlcywgb3JpZ1R5cGUsCgkJCWVsZW1EYXRhID0galF1ZXJ5Lmhhc0RhdGEoIGVsZW0gKSAmJiBqUXVlcnkuX2RhdGEoIGVsZW0gKTsKCgkJaWYgKCAhZWxlbURhdGEgfHwgIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkCgkJdHlwZXMgPSAoIHR5cGVzIHx8ICIiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgIiIgXTsKCQl0ID0gdHlwZXMubGVuZ3RoOwoJCXdoaWxlICggdC0tICkgewoJCQl0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdOwoJCQl0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07CgkJCW5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCAiIiApLnNwbGl0KCAiLiIgKS5zb3J0KCk7CgoJCQkvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnQKCQkJaWYgKCAhdHlwZSApIHsKCQkJCWZvciAoIHR5cGUgaW4gZXZlbnRzICkgewoJCQkJCWpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApOwoJCQkJfQoJCQkJY29udGludWU7CgkJCX0KCgkJCXNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9OwoJCQl0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7CgkJCWhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107CgkJCXRtcCA9IHRtcFsyXSAmJiBuZXcgUmVnRXhwKCAiKF58XFwuKSIgKyBuYW1lc3BhY2VzLmpvaW4oIlxcLig/Oi4qXFwufCkiKSArICIoXFwufCQpIiApOwoKCQkJLy8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50cwoJCQlvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoOwoJCQl3aGlsZSAoIGotLSApIHsKCQkJCWhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07CgoJCQkJaWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJgoJCQkJCSggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmCgkJCQkJKCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJgoJCQkJCSggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICIqKiIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7CgkJCQkJaGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7CgoJCQkJCWlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkgewoJCQkJCQloYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07CgkJCQkJfQoJCQkJCWlmICggc3BlY2lhbC5yZW1vdmUgKSB7CgkJCQkJCXNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApOwoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJLy8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdAoJCQkvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycykKCQkJaWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHsKCQkJCWlmICggIXNwZWNpYWwudGVhcmRvd24gfHwgc3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7CgkJCQkJalF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTsKCQkJCX0KCgkJCQlkZWxldGUgZXZlbnRzWyB0eXBlIF07CgkJCX0KCQl9CgoJCS8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkCgkJaWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7CgkJCWRlbGV0ZSBlbGVtRGF0YS5oYW5kbGU7CgoJCQkvLyByZW1vdmVEYXRhIGFsc28gY2hlY2tzIGZvciBlbXB0aW5lc3MgYW5kIGNsZWFycyB0aGUgZXhwYW5kbyBpZiBlbXB0eQoJCQkvLyBzbyB1c2UgaXQgaW5zdGVhZCBvZiBkZWxldGUKCQkJalF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCAiZXZlbnRzIiApOwoJCX0KCX0sCgoJdHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7CgkJdmFyIGhhbmRsZSwgb250eXBlLCBjdXIsCgkJCWJ1YmJsZVR5cGUsIHNwZWNpYWwsIHRtcCwgaSwKCQkJZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sCgkJCXR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsICJ0eXBlIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LAoJCQluYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCAibmFtZXNwYWNlIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCIuIikgOiBbXTsKCgkJY3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7CgoJCS8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzCgkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7CgkJCXJldHVybjsKCQl9CgoJCS8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vdwoJCWlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCB0eXBlLmluZGV4T2YoIi4iKSA+PSAwICkgewoJCQkvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpCgkJCW5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCIuIik7CgkJCXR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7CgkJCW5hbWVzcGFjZXMuc29ydCgpOwoJCX0KCQlvbnR5cGUgPSB0eXBlLmluZGV4T2YoIjoiKSA8IDAgJiYgIm9uIiArIHR5cGU7CgoJCS8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZwoJCWV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gPwoJCQlldmVudCA6CgkJCW5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gIm9iamVjdCIgJiYgZXZlbnQgKTsKCgkJLy8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKQoJCWV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzOwoJCWV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbigiLiIpOwoJCWV2ZW50Lm5hbWVzcGFjZV9yZSA9IGV2ZW50Lm5hbWVzcGFjZSA/CgkJCW5ldyBSZWdFeHAoICIoXnxcXC4pIiArIG5hbWVzcGFjZXMuam9pbigiXFwuKD86LipcXC58KSIpICsgIihcXC58JCkiICkgOgoJCQludWxsOwoKCQkvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWQKCQlldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7CgkJaWYgKCAhZXZlbnQudGFyZ2V0ICkgewoJCQlldmVudC50YXJnZXQgPSBlbGVtOwoJCX0KCgkJLy8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdAoJCWRhdGEgPSBkYXRhID09IG51bGwgPwoJCQlbIGV2ZW50IF0gOgoJCQlqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTsKCgkJLy8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lcwoJCXNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9OwoJCWlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSkKCQkvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KQoJCWlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7CgoJCQlidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTsKCQkJaWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHsKCQkJCWN1ciA9IGN1ci5wYXJlbnROb2RlOwoJCQl9CgkJCWZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHsKCQkJCWV2ZW50UGF0aC5wdXNoKCBjdXIgKTsKCQkJCXRtcCA9IGN1cjsKCQkJfQoKCQkJLy8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pCgkJCWlmICggdG1wID09PSAoZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KSApIHsKCQkJCWV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTsKCQkJfQoJCX0KCgkJLy8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aAoJCWkgPSAwOwoJCXdoaWxlICggKGN1ciA9IGV2ZW50UGF0aFtpKytdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHsKCgkJCWV2ZW50LnR5cGUgPSBpID4gMSA/CgkJCQlidWJibGVUeXBlIDoKCQkJCXNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTsKCgkJCS8vIGpRdWVyeSBoYW5kbGVyCgkJCWhhbmRsZSA9ICggalF1ZXJ5Ll9kYXRhKCBjdXIsICJldmVudHMiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmIGpRdWVyeS5fZGF0YSggY3VyLCAiaGFuZGxlIiApOwoJCQlpZiAoIGhhbmRsZSApIHsKCQkJCWhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7CgkJCX0KCgkJCS8vIE5hdGl2ZSBoYW5kbGVyCgkJCWhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdOwoJCQlpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgalF1ZXJ5LmFjY2VwdERhdGEoIGN1ciApICkgewoJCQkJZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTsKCQkJCWlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHsKCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJfQoJCQl9CgkJfQoJCWV2ZW50LnR5cGUgPSB0eXBlOwoKCQkvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93CgkJaWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHsKCgkJCWlmICggKCFzcGVjaWFsLl9kZWZhdWx0IHx8IHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSkgJiYKCQkJCWpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7CgoJCQkJLy8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIG5hbWUgYXMgdGhlIGV2ZW50LgoJCQkJLy8gQ2FuJ3QgdXNlIGFuIC5pc0Z1bmN0aW9uKCkgY2hlY2sgaGVyZSBiZWNhdXNlIElFNi83IGZhaWxzIHRoYXQgdGVzdC4KCQkJCS8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MCkKCQkJCWlmICggb250eXBlICYmIGVsZW1bIHR5cGUgXSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7CgoJCQkJCS8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2QKCQkJCQl0bXAgPSBlbGVtWyBvbnR5cGUgXTsKCgkJCQkJaWYgKCB0bXAgKSB7CgkJCQkJCWVsZW1bIG9udHlwZSBdID0gbnVsbDsKCQkJCQl9CgoJCQkJCS8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlCgkJCQkJalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7CgkJCQkJdHJ5IHsKCQkJCQkJZWxlbVsgdHlwZSBdKCk7CgkJCQkJfSBjYXRjaCAoIGUgKSB7CgkJCQkJCS8vIElFPDkgZGllcyBvbiBmb2N1cy9ibHVyIHRvIGhpZGRlbiBlbGVtZW50ICgjMTQ4NiwjMTI1MTgpCgkJCQkJCS8vIG9ubHkgcmVwcm9kdWNpYmxlIG9uIHdpblhQIElFOCBuYXRpdmUsIG5vdCBJRTkgaW4gSUU4IG1vZGUKCQkJCQl9CgkJCQkJalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDsKCgkJCQkJaWYgKCB0bXAgKSB7CgkJCQkJCWVsZW1bIG9udHlwZSBdID0gdG1wOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIGV2ZW50LnJlc3VsdDsKCX0sCgoJZGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHsKCgkJLy8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0CgkJZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApOwoKCQl2YXIgaSwgcmV0LCBoYW5kbGVPYmosIG1hdGNoZWQsIGosCgkJCWhhbmRsZXJRdWV1ZSA9IFtdLAoJCQlhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksCgkJCWhhbmRsZXJzID0gKCBqUXVlcnkuX2RhdGEoIHRoaXMsICJldmVudHMiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLAoJCQlzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTsKCgkJLy8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnQKCQlhcmdzWzBdID0gZXZlbnQ7CgkJZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzOwoKCQkvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkCgkJaWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7CgkJCXJldHVybjsKCQl9CgoJCS8vIERldGVybWluZSBoYW5kbGVycwoJCWhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTsKCgkJLy8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXMKCQlpID0gMDsKCQl3aGlsZSAoIChtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7CgkJCWV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07CgoJCQlqID0gMDsKCQkJd2hpbGUgKCAoaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0pICYmICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkgewoKCQkJCS8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IKCQkJCS8vIDIpIGhhdmUgbmFtZXNwYWNlKHMpIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLgoJCQkJaWYgKCAhZXZlbnQubmFtZXNwYWNlX3JlIHx8IGV2ZW50Lm5hbWVzcGFjZV9yZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7CgoJCQkJCWV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajsKCQkJCQlldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7CgoJCQkJCXJldCA9ICggKGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSkuaGFuZGxlIHx8IGhhbmRsZU9iai5oYW5kbGVyICkKCQkJCQkJCS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7CgoJCQkJCWlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJCWlmICggKGV2ZW50LnJlc3VsdCA9IHJldCkgPT09IGZhbHNlICkgewoJCQkJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCQkJCWV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoKCQkvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlCgkJaWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHsKCQkJc3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTsKCQl9CgoJCXJldHVybiBldmVudC5yZXN1bHQ7Cgl9LAoKCWhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkgewoJCXZhciBzZWwsIGhhbmRsZU9iaiwgbWF0Y2hlcywgaSwKCQkJaGFuZGxlclF1ZXVlID0gW10sCgkJCWRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LAoJCQljdXIgPSBldmVudC50YXJnZXQ7CgoJCS8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnMKCQkvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAoIzEzMTgwKQoJCS8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGJ1YmJsaW5nIGluIEZpcmVmb3ggKCMzODYxKQoJCWlmICggZGVsZWdhdGVDb3VudCAmJiBjdXIubm9kZVR5cGUgJiYgKCFldmVudC5idXR0b24gfHwgZXZlbnQudHlwZSAhPT0gImNsaWNrIikgKSB7CgoJCQkvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqLwoJCQlmb3IgKCA7IGN1ciAhPSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkgewoJCQkJLyoganNoaW50IGVxZXFlcTogdHJ1ZSAqLwoKCQkJCS8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KQoJCQkJLy8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpCgkJCQlpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAoY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09ICJjbGljayIpICkgewoJCQkJCW1hdGNoZXMgPSBbXTsKCQkJCQlmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHsKCQkJCQkJaGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTsKCgkJCQkJCS8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpCgkJCQkJCXNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArICIgIjsKCgkJCQkJCWlmICggbWF0Y2hlc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHsKCQkJCQkJCW1hdGNoZXNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/CgkJCQkJCQkJalF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPj0gMCA6CgkJCQkJCQkJalF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDsKCQkJCQkJfQoJCQkJCQlpZiAoIG1hdGNoZXNbIHNlbCBdICkgewoJCQkJCQkJbWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTsKCQkJCQkJfQoJCQkJCX0KCQkJCQlpZiAoIG1hdGNoZXMubGVuZ3RoICkgewoJCQkJCQloYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSk7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoKCQkvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzCgkJaWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkgewoJCQloYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0pOwoJCX0KCgkJcmV0dXJuIGhhbmRsZXJRdWV1ZTsKCX0sCgoJZml4OiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJaWYgKCBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSApIHsKCQkJcmV0dXJuIGV2ZW50OwoJCX0KCgkJLy8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzCgkJdmFyIGksIHByb3AsIGNvcHksCgkJCXR5cGUgPSBldmVudC50eXBlLAoJCQlvcmlnaW5hbEV2ZW50ID0gZXZlbnQsCgkJCWZpeEhvb2sgPSB0aGlzLmZpeEhvb2tzWyB0eXBlIF07CgoJCWlmICggIWZpeEhvb2sgKSB7CgkJCXRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPQoJCQkJcm1vdXNlRXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5tb3VzZUhvb2tzIDoKCQkJCXJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDoKCQkJCXt9OwoJCX0KCQljb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzOwoKCQlldmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTsKCgkJaSA9IGNvcHkubGVuZ3RoOwoJCXdoaWxlICggaS0tICkgewoJCQlwcm9wID0gY29weVsgaSBdOwoJCQlldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdOwoJCX0KCgkJLy8gU3VwcG9ydDogSUU8OQoJCS8vIEZpeCB0YXJnZXQgcHJvcGVydHkgKCMxOTI1KQoJCWlmICggIWV2ZW50LnRhcmdldCApIHsKCQkJZXZlbnQudGFyZ2V0ID0gb3JpZ2luYWxFdmVudC5zcmNFbGVtZW50IHx8IGRvY3VtZW50OwoJCX0KCgkJLy8gU3VwcG9ydDogQ2hyb21lIDIzKywgU2FmYXJpPwoJCS8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpCgkJaWYgKCBldmVudC50YXJnZXQubm9kZVR5cGUgPT09IDMgKSB7CgkJCWV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlOwoJCX0KCgkJLy8gU3VwcG9ydDogSUU8OQoJCS8vIEZvciBtb3VzZS9rZXkgZXZlbnRzLCBtZXRhS2V5PT1mYWxzZSBpZiBpdCdzIHVuZGVmaW5lZCAoIzMzNjgsICMxMTMyOCkKCQlldmVudC5tZXRhS2V5ID0gISFldmVudC5tZXRhS2V5OwoKCQlyZXR1cm4gZml4SG9vay5maWx0ZXIgPyBmaXhIb29rLmZpbHRlciggZXZlbnQsIG9yaWdpbmFsRXZlbnQgKSA6IGV2ZW50OwoJfSwKCgkvLyBJbmNsdWRlcyBzb21lIGV2ZW50IHByb3BzIHNoYXJlZCBieSBLZXlFdmVudCBhbmQgTW91c2VFdmVudAoJcHJvcHM6ICJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBldmVudFBoYXNlIG1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2giLnNwbGl0KCIgIiksCgoJZml4SG9va3M6IHt9LAoKCWtleUhvb2tzOiB7CgkJcHJvcHM6ICJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlIi5zcGxpdCgiICIpLAoJCWZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHsKCgkJCS8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50cwoJCQlpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7CgkJCQlldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7CgkJCX0KCgkJCXJldHVybiBldmVudDsKCQl9Cgl9LAoKCW1vdXNlSG9va3M6IHsKCQlwcm9wczogImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBmcm9tRWxlbWVudCBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudCIuc3BsaXQoIiAiKSwKCQlmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7CgkJCXZhciBib2R5LCBldmVudERvYywgZG9jLAoJCQkJYnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uLAoJCQkJZnJvbUVsZW1lbnQgPSBvcmlnaW5hbC5mcm9tRWxlbWVudDsKCgkJCS8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGUKCQkJaWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHsKCQkJCWV2ZW50RG9jID0gZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7CgkJCQlkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7CgkJCQlib2R5ID0gZXZlbnREb2MuYm9keTsKCgkJCQlldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggKyAoIGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7CgkJCQlldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgKyAoIGRvYyAmJiBkb2Muc2Nyb2xsVG9wICB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsVG9wICB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7CgkJCX0KCgkJCS8vIEFkZCByZWxhdGVkVGFyZ2V0LCBpZiBuZWNlc3NhcnkKCQkJaWYgKCAhZXZlbnQucmVsYXRlZFRhcmdldCAmJiBmcm9tRWxlbWVudCApIHsKCQkJCWV2ZW50LnJlbGF0ZWRUYXJnZXQgPSBmcm9tRWxlbWVudCA9PT0gZXZlbnQudGFyZ2V0ID8gb3JpZ2luYWwudG9FbGVtZW50IDogZnJvbUVsZW1lbnQ7CgkJCX0KCgkJCS8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHQKCQkJLy8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXQKCQkJaWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7CgkJCQlldmVudC53aGljaCA9ICggYnV0dG9uICYgMSA/IDEgOiAoIGJ1dHRvbiAmIDIgPyAzIDogKCBidXR0b24gJiA0ID8gMiA6IDAgKSApICk7CgkJCX0KCgkJCXJldHVybiBldmVudDsKCQl9Cgl9LAoKCXNwZWNpYWw6IHsKCQlsb2FkOiB7CgkJCS8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWQKCQkJbm9CdWJibGU6IHRydWUKCQl9LAoJCWZvY3VzOiB7CgkJCS8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdAoJCQl0cmlnZ2VyOiBmdW5jdGlvbigpIHsKCQkJCWlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkgewoJCQkJCXRyeSB7CgkJCQkJCXRoaXMuZm9jdXMoKTsKCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCX0gY2F0Y2ggKCBlICkgewoJCQkJCQkvLyBTdXBwb3J0OiBJRTw5CgkJCQkJCS8vIElmIHdlIGVycm9yIG9uIGZvY3VzIHRvIGhpZGRlbiBlbGVtZW50ICgjMTQ4NiwgIzEyNTE4KSwKCQkJCQkJLy8gbGV0IC50cmlnZ2VyKCkgcnVuIHRoZSBoYW5kbGVycwoJCQkJCX0KCQkJCX0KCQkJfSwKCQkJZGVsZWdhdGVUeXBlOiAiZm9jdXNpbiIKCQl9LAoJCWJsdXI6IHsKCQkJdHJpZ2dlcjogZnVuY3Rpb24oKSB7CgkJCQlpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkgewoJCQkJCXRoaXMuYmx1cigpOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfSwKCQkJZGVsZWdhdGVUeXBlOiAiZm9jdXNvdXQiCgkJfSwKCQljbGljazogewoJCQkvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodAoJCQl0cmlnZ2VyOiBmdW5jdGlvbigpIHsKCQkJCWlmICggalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCAiaW5wdXQiICkgJiYgdGhpcy50eXBlID09PSAiY2hlY2tib3giICYmIHRoaXMuY2xpY2sgKSB7CgkJCQkJdGhpcy5jbGljaygpOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfSwKCgkJCS8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rcwoJCQlfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJcmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCAiYSIgKTsKCQkJfQoJCX0sCgoJCWJlZm9yZXVubG9hZDogewoJCQlwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHsKCgkJCQkvLyBFdmVuIHdoZW4gcmV0dXJuVmFsdWUgZXF1YWxzIHRvIHVuZGVmaW5lZCBGaXJlZm94IHdpbGwgc3RpbGwgc2hvdyBhbGVydAoJCQkJaWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCApIHsKCQkJCQlldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0OwoJCQkJfQoJCQl9CgkJfQoJfSwKCglzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50LCBidWJibGUgKSB7CgkJLy8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lLgoJCS8vIEZha2Ugb3JpZ2luYWxFdmVudCB0byBhdm9pZCBkb25vcidzIHN0b3BQcm9wYWdhdGlvbiwgYnV0IGlmIHRoZQoJCS8vIHNpbXVsYXRlZCBldmVudCBwcmV2ZW50cyBkZWZhdWx0IHRoZW4gd2UgZG8gdGhlIHNhbWUgb24gdGhlIGRvbm9yLgoJCXZhciBlID0galF1ZXJ5LmV4dGVuZCgKCQkJbmV3IGpRdWVyeS5FdmVudCgpLAoJCQlldmVudCwKCQkJewoJCQkJdHlwZTogdHlwZSwKCQkJCWlzU2ltdWxhdGVkOiB0cnVlLAoJCQkJb3JpZ2luYWxFdmVudDoge30KCQkJfQoJCSk7CgkJaWYgKCBidWJibGUgKSB7CgkJCWpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7CgkJfSBlbHNlIHsKCQkJalF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmNhbGwoIGVsZW0sIGUgKTsKCQl9CgkJaWYgKCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpICkgewoJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCX0KCX0KfTsKCmpRdWVyeS5yZW1vdmVFdmVudCA9IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIgPwoJZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHsKCQlpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHsKCQkJZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUsIGZhbHNlICk7CgkJfQoJfSA6CglmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkgewoJCXZhciBuYW1lID0gIm9uIiArIHR5cGU7CgoJCWlmICggZWxlbS5kZXRhY2hFdmVudCApIHsKCgkJCS8vICM4NTQ1LCAjNzA1NCwgcHJldmVudGluZyBtZW1vcnkgbGVha3MgZm9yIGN1c3RvbSBldmVudHMgaW4gSUU2LTgKCQkJLy8gZGV0YWNoRXZlbnQgbmVlZGVkIHByb3BlcnR5IG9uIGVsZW1lbnQsIGJ5IG5hbWUgb2YgdGhhdCBldmVudCwgdG8gcHJvcGVybHkgZXhwb3NlIGl0IHRvIEdDCgkJCWlmICggdHlwZW9mIGVsZW1bIG5hbWUgXSA9PT0gc3RydW5kZWZpbmVkICkgewoJCQkJZWxlbVsgbmFtZSBdID0gbnVsbDsKCQkJfQoKCQkJZWxlbS5kZXRhY2hFdmVudCggbmFtZSwgaGFuZGxlICk7CgkJfQoJfTsKCmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkgewoJLy8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkCglpZiAoICEodGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCkgKSB7CgkJcmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTsKCX0KCgkvLyBFdmVudCBvYmplY3QKCWlmICggc3JjICYmIHNyYy50eXBlICkgewoJCXRoaXMub3JpZ2luYWxFdmVudCA9IHNyYzsKCQl0aGlzLnR5cGUgPSBzcmMudHlwZTsKCgkJLy8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWQKCQkvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS4KCQl0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8CgkJCQlzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmICgKCQkJCS8vIFN1cHBvcnQ6IElFIDwgOQoJCQkJc3JjLnJldHVyblZhbHVlID09PSBmYWxzZSB8fAoJCQkJLy8gU3VwcG9ydDogQW5kcm9pZCA8IDQuMAoJCQkJc3JjLmdldFByZXZlbnREZWZhdWx0ICYmIHNyYy5nZXRQcmV2ZW50RGVmYXVsdCgpICkgPwoJCQlyZXR1cm5UcnVlIDoKCQkJcmV0dXJuRmFsc2U7CgoJLy8gRXZlbnQgdHlwZQoJfSBlbHNlIHsKCQl0aGlzLnR5cGUgPSBzcmM7Cgl9CgoJLy8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3QKCWlmICggcHJvcHMgKSB7CgkJalF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTsKCX0KCgkvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZQoJdGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7CgoJLy8gTWFyayBpdCBhcyBmaXhlZAoJdGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7Cn07CgovLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmcKLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sCmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7Cglpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLAoJaXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLAoJaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLAoKCXByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsKCQl2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDsKCgkJdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlOwoJCWlmICggIWUgKSB7CgkJCXJldHVybjsKCQl9CgoJCS8vIElmIHByZXZlbnREZWZhdWx0IGV4aXN0cywgcnVuIGl0IG9uIHRoZSBvcmlnaW5hbCBldmVudAoJCWlmICggZS5wcmV2ZW50RGVmYXVsdCApIHsKCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoKCQkvLyBTdXBwb3J0OiBJRQoJCS8vIE90aGVyd2lzZSBzZXQgdGhlIHJldHVyblZhbHVlIHByb3BlcnR5IG9mIHRoZSBvcmlnaW5hbCBldmVudCB0byBmYWxzZQoJCX0gZWxzZSB7CgkJCWUucmV0dXJuVmFsdWUgPSBmYWxzZTsKCQl9Cgl9LAoJc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHsKCQl2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDsKCgkJdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7CgkJaWYgKCAhZSApIHsKCQkJcmV0dXJuOwoJCX0KCQkvLyBJZiBzdG9wUHJvcGFnYXRpb24gZXhpc3RzLCBydW4gaXQgb24gdGhlIG9yaWdpbmFsIGV2ZW50CgkJaWYgKCBlLnN0b3BQcm9wYWdhdGlvbiApIHsKCQkJZS5zdG9wUHJvcGFnYXRpb24oKTsKCQl9CgoJCS8vIFN1cHBvcnQ6IElFCgkJLy8gU2V0IHRoZSBjYW5jZWxCdWJibGUgcHJvcGVydHkgb2YgdGhlIG9yaWdpbmFsIGV2ZW50IHRvIHRydWUKCQllLmNhbmNlbEJ1YmJsZSA9IHRydWU7Cgl9LAoJc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHsKCQl0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTsKCQl0aGlzLnN0b3BQcm9wYWdhdGlvbigpOwoJfQp9OwoKLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzCmpRdWVyeS5lYWNoKHsKCW1vdXNlZW50ZXI6ICJtb3VzZW92ZXIiLAoJbW91c2VsZWF2ZTogIm1vdXNlb3V0Igp9LCBmdW5jdGlvbiggb3JpZywgZml4ICkgewoJalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHsKCQlkZWxlZ2F0ZVR5cGU6IGZpeCwKCQliaW5kVHlwZTogZml4LAoKCQloYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyIHJldCwKCQkJCXRhcmdldCA9IHRoaXMsCgkJCQlyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCwKCQkJCWhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajsKCgkJCS8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC4KCQkJLy8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3cKCQkJaWYgKCAhcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApKSApIHsKCQkJCWV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7CgkJCQlyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCQlldmVudC50eXBlID0gZml4OwoJCQl9CgkJCXJldHVybiByZXQ7CgkJfQoJfTsKfSk7CgovLyBJRSBzdWJtaXQgZGVsZWdhdGlvbgppZiAoICFzdXBwb3J0LnN1Ym1pdEJ1YmJsZXMgKSB7CgoJalF1ZXJ5LmV2ZW50LnNwZWNpYWwuc3VibWl0ID0gewoJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJLy8gT25seSBuZWVkIHRoaXMgZm9yIGRlbGVnYXRlZCBmb3JtIHN1Ym1pdCBldmVudHMKCQkJaWYgKCBqUXVlcnkubm9kZU5hbWUoIHRoaXMsICJmb3JtIiApICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQkvLyBMYXp5LWFkZCBhIHN1Ym1pdCBoYW5kbGVyIHdoZW4gYSBkZXNjZW5kYW50IGZvcm0gbWF5IHBvdGVudGlhbGx5IGJlIHN1Ym1pdHRlZAoJCQlqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCAiY2xpY2suX3N1Ym1pdCBrZXlwcmVzcy5fc3VibWl0IiwgZnVuY3Rpb24oIGUgKSB7CgkJCQkvLyBOb2RlIG5hbWUgY2hlY2sgYXZvaWRzIGEgVk1MLXJlbGF0ZWQgY3Jhc2ggaW4gSUUgKCM5ODA3KQoJCQkJdmFyIGVsZW0gPSBlLnRhcmdldCwKCQkJCQlmb3JtID0galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCAiaW5wdXQiICkgfHwgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCAiYnV0dG9uIiApID8gZWxlbS5mb3JtIDogdW5kZWZpbmVkOwoJCQkJaWYgKCBmb3JtICYmICFqUXVlcnkuX2RhdGEoIGZvcm0sICJzdWJtaXRCdWJibGVzIiApICkgewoJCQkJCWpRdWVyeS5ldmVudC5hZGQoIGZvcm0sICJzdWJtaXQuX3N1Ym1pdCIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQkJZXZlbnQuX3N1Ym1pdF9idWJibGUgPSB0cnVlOwoJCQkJCX0pOwoJCQkJCWpRdWVyeS5fZGF0YSggZm9ybSwgInN1Ym1pdEJ1YmJsZXMiLCB0cnVlICk7CgkJCQl9CgkJCX0pOwoJCQkvLyByZXR1cm4gdW5kZWZpbmVkIHNpbmNlIHdlIGRvbid0IG5lZWQgYW4gZXZlbnQgbGlzdGVuZXIKCQl9LAoKCQlwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJLy8gSWYgZm9ybSB3YXMgc3VibWl0dGVkIGJ5IHRoZSB1c2VyLCBidWJibGUgdGhlIGV2ZW50IHVwIHRoZSB0cmVlCgkJCWlmICggZXZlbnQuX3N1Ym1pdF9idWJibGUgKSB7CgkJCQlkZWxldGUgZXZlbnQuX3N1Ym1pdF9idWJibGU7CgkJCQlpZiAoIHRoaXMucGFyZW50Tm9kZSAmJiAhZXZlbnQuaXNUcmlnZ2VyICkgewoJCQkJCWpRdWVyeS5ldmVudC5zaW11bGF0ZSggInN1Ym1pdCIsIHRoaXMucGFyZW50Tm9kZSwgZXZlbnQsIHRydWUgKTsKCQkJCX0KCQkJfQoJCX0sCgoJCXRlYXJkb3duOiBmdW5jdGlvbigpIHsKCQkJLy8gT25seSBuZWVkIHRoaXMgZm9yIGRlbGVnYXRlZCBmb3JtIHN1Ym1pdCBldmVudHMKCQkJaWYgKCBqUXVlcnkubm9kZU5hbWUoIHRoaXMsICJmb3JtIiApICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQkvLyBSZW1vdmUgZGVsZWdhdGVkIGhhbmRsZXJzOyBjbGVhbkRhdGEgZXZlbnR1YWxseSByZWFwcyBzdWJtaXQgaGFuZGxlcnMgYXR0YWNoZWQgYWJvdmUKCQkJalF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgIi5fc3VibWl0IiApOwoJCX0KCX07Cn0KCi8vIElFIGNoYW5nZSBkZWxlZ2F0aW9uIGFuZCBjaGVja2JveC9yYWRpbyBmaXgKaWYgKCAhc3VwcG9ydC5jaGFuZ2VCdWJibGVzICkgewoKCWpRdWVyeS5ldmVudC5zcGVjaWFsLmNoYW5nZSA9IHsKCgkJc2V0dXA6IGZ1bmN0aW9uKCkgewoKCQkJaWYgKCByZm9ybUVsZW1zLnRlc3QoIHRoaXMubm9kZU5hbWUgKSApIHsKCQkJCS8vIElFIGRvZXNuJ3QgZmlyZSBjaGFuZ2Ugb24gYSBjaGVjay9yYWRpbyB1bnRpbCBibHVyOyB0cmlnZ2VyIGl0IG9uIGNsaWNrCgkJCQkvLyBhZnRlciBhIHByb3BlcnR5Y2hhbmdlLiBFYXQgdGhlIGJsdXItY2hhbmdlIGluIHNwZWNpYWwuY2hhbmdlLmhhbmRsZS4KCQkJCS8vIFRoaXMgc3RpbGwgZmlyZXMgb25jaGFuZ2UgYSBzZWNvbmQgdGltZSBmb3IgY2hlY2svcmFkaW8gYWZ0ZXIgYmx1ci4KCQkJCWlmICggdGhpcy50eXBlID09PSAiY2hlY2tib3giIHx8IHRoaXMudHlwZSA9PT0gInJhZGlvIiApIHsKCQkJCQlqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCAicHJvcGVydHljaGFuZ2UuX2NoYW5nZSIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQkJaWYgKCBldmVudC5vcmlnaW5hbEV2ZW50LnByb3BlcnR5TmFtZSA9PT0gImNoZWNrZWQiICkgewoJCQkJCQkJdGhpcy5fanVzdF9jaGFuZ2VkID0gdHJ1ZTsKCQkJCQkJfQoJCQkJCX0pOwoJCQkJCWpRdWVyeS5ldmVudC5hZGQoIHRoaXMsICJjbGljay5fY2hhbmdlIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCQlpZiAoIHRoaXMuX2p1c3RfY2hhbmdlZCAmJiAhZXZlbnQuaXNUcmlnZ2VyICkgewoJCQkJCQkJdGhpcy5fanVzdF9jaGFuZ2VkID0gZmFsc2U7CgkJCQkJCX0KCQkJCQkJLy8gQWxsb3cgdHJpZ2dlcmVkLCBzaW11bGF0ZWQgY2hhbmdlIGV2ZW50cyAoIzExNTAwKQoJCQkJCQlqUXVlcnkuZXZlbnQuc2ltdWxhdGUoICJjaGFuZ2UiLCB0aGlzLCBldmVudCwgdHJ1ZSApOwoJCQkJCX0pOwoJCQkJfQoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJCS8vIERlbGVnYXRlZCBldmVudDsgbGF6eS1hZGQgYSBjaGFuZ2UgaGFuZGxlciBvbiBkZXNjZW5kYW50IGlucHV0cwoJCQlqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCAiYmVmb3JlYWN0aXZhdGUuX2NoYW5nZSIsIGZ1bmN0aW9uKCBlICkgewoJCQkJdmFyIGVsZW0gPSBlLnRhcmdldDsKCgkJCQlpZiAoIHJmb3JtRWxlbXMudGVzdCggZWxlbS5ub2RlTmFtZSApICYmICFqUXVlcnkuX2RhdGEoIGVsZW0sICJjaGFuZ2VCdWJibGVzIiApICkgewoJCQkJCWpRdWVyeS5ldmVudC5hZGQoIGVsZW0sICJjaGFuZ2UuX2NoYW5nZSIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQkJaWYgKCB0aGlzLnBhcmVudE5vZGUgJiYgIWV2ZW50LmlzU2ltdWxhdGVkICYmICFldmVudC5pc1RyaWdnZXIgKSB7CgkJCQkJCQlqUXVlcnkuZXZlbnQuc2ltdWxhdGUoICJjaGFuZ2UiLCB0aGlzLnBhcmVudE5vZGUsIGV2ZW50LCB0cnVlICk7CgkJCQkJCX0KCQkJCQl9KTsKCQkJCQlqUXVlcnkuX2RhdGEoIGVsZW0sICJjaGFuZ2VCdWJibGVzIiwgdHJ1ZSApOwoJCQkJfQoJCQl9KTsKCQl9LAoKCQloYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyIGVsZW0gPSBldmVudC50YXJnZXQ7CgoJCQkvLyBTd2FsbG93IG5hdGl2ZSBjaGFuZ2UgZXZlbnRzIGZyb20gY2hlY2tib3gvcmFkaW8sIHdlIGFscmVhZHkgdHJpZ2dlcmVkIHRoZW0gYWJvdmUKCQkJaWYgKCB0aGlzICE9PSBlbGVtIHx8IGV2ZW50LmlzU2ltdWxhdGVkIHx8IGV2ZW50LmlzVHJpZ2dlciB8fCAoZWxlbS50eXBlICE9PSAicmFkaW8iICYmIGVsZW0udHlwZSAhPT0gImNoZWNrYm94IikgKSB7CgkJCQlyZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQl9CgkJfSwKCgkJdGVhcmRvd246IGZ1bmN0aW9uKCkgewoJCQlqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCAiLl9jaGFuZ2UiICk7CgoJCQlyZXR1cm4gIXJmb3JtRWxlbXMudGVzdCggdGhpcy5ub2RlTmFtZSApOwoJCX0KCX07Cn0KCi8vIENyZWF0ZSAiYnViYmxpbmciIGZvY3VzIGFuZCBibHVyIGV2ZW50cwppZiAoICFzdXBwb3J0LmZvY3VzaW5CdWJibGVzICkgewoJalF1ZXJ5LmVhY2goeyBmb2N1czogImZvY3VzaW4iLCBibHVyOiAiZm9jdXNvdXQiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7CgoJCS8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0CgkJdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQlqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApLCB0cnVlICk7CgkJCX07CgoJCWpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHsKCQkJc2V0dXA6IGZ1bmN0aW9uKCkgewoJCQkJdmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLAoJCQkJCWF0dGFjaGVzID0galF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCApOwoKCQkJCWlmICggIWF0dGFjaGVzICkgewoJCQkJCWRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7CgkJCQl9CgkJCQlqUXVlcnkuX2RhdGEoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTsKCQkJfSwKCQkJdGVhcmRvd246IGZ1bmN0aW9uKCkgewoJCQkJdmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLAoJCQkJCWF0dGFjaGVzID0galF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCApIC0gMTsKCgkJCQlpZiAoICFhdHRhY2hlcyApIHsKCQkJCQlkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApOwoJCQkJCWpRdWVyeS5fcmVtb3ZlRGF0YSggZG9jLCBmaXggKTsKCQkJCX0gZWxzZSB7CgkJCQkJalF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTsKCQkJCX0KCQkJfQoJCX07Cgl9KTsKfQoKalF1ZXJ5LmZuLmV4dGVuZCh7CgoJb246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAvKklOVEVSTkFMKi8gb25lICkgewoJCXZhciB0eXBlLCBvcmlnRm47CgoJCS8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVycwoJCWlmICggdHlwZW9mIHR5cGVzID09PSAib2JqZWN0IiApIHsKCQkJLy8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhICkKCQkJaWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09ICJzdHJpbmciICkgewoJCQkJLy8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKQoJCQkJZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7CgkJCQlzZWxlY3RvciA9IHVuZGVmaW5lZDsKCQkJfQoJCQlmb3IgKCB0eXBlIGluIHR5cGVzICkgewoJCQkJdGhpcy5vbiggdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApOwoJCQl9CgkJCXJldHVybiB0aGlzOwoJCX0KCgkJaWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHsKCQkJLy8gKCB0eXBlcywgZm4gKQoJCQlmbiA9IHNlbGVjdG9yOwoJCQlkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7CgkJfSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHsKCQkJaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09ICJzdHJpbmciICkgewoJCQkJLy8gKCB0eXBlcywgc2VsZWN0b3IsIGZuICkKCQkJCWZuID0gZGF0YTsKCQkJCWRhdGEgPSB1bmRlZmluZWQ7CgkJCX0gZWxzZSB7CgkJCQkvLyAoIHR5cGVzLCBkYXRhLCBmbiApCgkJCQlmbiA9IGRhdGE7CgkJCQlkYXRhID0gc2VsZWN0b3I7CgkJCQlzZWxlY3RvciA9IHVuZGVmaW5lZDsKCQkJfQoJCX0KCQlpZiAoIGZuID09PSBmYWxzZSApIHsKCQkJZm4gPSByZXR1cm5GYWxzZTsKCQl9IGVsc2UgaWYgKCAhZm4gKSB7CgkJCXJldHVybiB0aGlzOwoJCX0KCgkJaWYgKCBvbmUgPT09IDEgKSB7CgkJCW9yaWdGbiA9IGZuOwoJCQlmbiA9IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCS8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mbwoJCQkJalF1ZXJ5KCkub2ZmKCBldmVudCApOwoJCQkJcmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCX07CgkJCS8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuCgkJCWZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApOwoJCX0KCQlyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHsKCQkJalF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApOwoJCX0pOwoJfSwKCW9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7CgkJcmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTsKCX0sCglvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkgewoJCXZhciBoYW5kbGVPYmosIHR5cGU7CgkJaWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7CgkJCS8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnQKCQkJaGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqOwoJCQlqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKAoJCQkJaGFuZGxlT2JqLm5hbWVzcGFjZSA/IGhhbmRsZU9iai5vcmlnVHlwZSArICIuIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOiBoYW5kbGVPYmoub3JpZ1R5cGUsCgkJCQloYW5kbGVPYmouc2VsZWN0b3IsCgkJCQloYW5kbGVPYmouaGFuZGxlcgoJCQkpOwoJCQlyZXR1cm4gdGhpczsKCQl9CgkJaWYgKCB0eXBlb2YgdHlwZXMgPT09ICJvYmplY3QiICkgewoJCQkvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKQoJCQlmb3IgKCB0eXBlIGluIHR5cGVzICkgewoJCQkJdGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7CgkJCX0KCQkJcmV0dXJuIHRoaXM7CgkJfQoJCWlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gImZ1bmN0aW9uIiApIHsKCQkJLy8gKCB0eXBlcyBbLCBmbl0gKQoJCQlmbiA9IHNlbGVjdG9yOwoJCQlzZWxlY3RvciA9IHVuZGVmaW5lZDsKCQl9CgkJaWYgKCBmbiA9PT0gZmFsc2UgKSB7CgkJCWZuID0gcmV0dXJuRmFsc2U7CgkJfQoJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCWpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTsKCQl9KTsKCX0sCgoJdHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7CgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJalF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTsKCQl9KTsKCX0sCgl0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7CgkJdmFyIGVsZW0gPSB0aGlzWzBdOwoJCWlmICggZWxlbSApIHsKCQkJcmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7CgkJfQoJfQp9KTsKCgpmdW5jdGlvbiBjcmVhdGVTYWZlRnJhZ21lbnQoIGRvY3VtZW50ICkgewoJdmFyIGxpc3QgPSBub2RlTmFtZXMuc3BsaXQoICJ8IiApLAoJCXNhZmVGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwoKCWlmICggc2FmZUZyYWcuY3JlYXRlRWxlbWVudCApIHsKCQl3aGlsZSAoIGxpc3QubGVuZ3RoICkgewoJCQlzYWZlRnJhZy5jcmVhdGVFbGVtZW50KAoJCQkJbGlzdC5wb3AoKQoJCQkpOwoJCX0KCX0KCXJldHVybiBzYWZlRnJhZzsKfQoKdmFyIG5vZGVOYW1lcyA9ICJhYmJyfGFydGljbGV8YXNpZGV8YXVkaW98YmRpfGNhbnZhc3xkYXRhfGRhdGFsaXN0fGRldGFpbHN8ZmlnY2FwdGlvbnxmaWd1cmV8Zm9vdGVyfCIgKwoJCSJoZWFkZXJ8aGdyb3VwfG1hcmt8bWV0ZXJ8bmF2fG91dHB1dHxwcm9ncmVzc3xzZWN0aW9ufHN1bW1hcnl8dGltZXx2aWRlbyIsCglyaW5saW5lalF1ZXJ5ID0gLyBqUXVlcnlcZCs9Iig/Om51bGx8XGQrKSIvZywKCXJub3NoaW1jYWNoZSA9IG5ldyBSZWdFeHAoIjwoPzoiICsgbm9kZU5hbWVzICsgIilbXFxzLz5dIiwgImkiKSwKCXJsZWFkaW5nV2hpdGVzcGFjZSA9IC9eXHMrLywKCXJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcdzpdKylbXj5dKilcLz4vZ2ksCglydGFnTmFtZSA9IC88KFtcdzpdKykvLAoJcnRib2R5ID0gLzx0Ym9keS9pLAoJcmh0bWwgPSAvPHwmIz9cdys7LywKCXJub0lubmVyaHRtbCA9IC88KD86c2NyaXB0fHN0eWxlfGxpbmspL2ksCgkvLyBjaGVja2VkPSJjaGVja2VkIiBvciBjaGVja2VkCglyY2hlY2tlZCA9IC9jaGVja2VkXHMqKD86W149XXw9XHMqLmNoZWNrZWQuKS9pLAoJcnNjcmlwdFR5cGUgPSAvXiR8XC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksCglyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVwvKC4qKS8sCglyY2xlYW5TY3JpcHQgPSAvXlxzKjwhKD86XFtDREFUQVxbfC0tKXwoPzpcXVxdfC0tKT5ccyokL2csCgoJLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMCkKCXdyYXBNYXAgPSB7CgkJb3B0aW9uOiBbIDEsICI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+IiwgIjwvc2VsZWN0PiIgXSwKCQlsZWdlbmQ6IFsgMSwgIjxmaWVsZHNldD4iLCAiPC9maWVsZHNldD4iIF0sCgkJYXJlYTogWyAxLCAiPG1hcD4iLCAiPC9tYXA+IiBdLAoJCXBhcmFtOiBbIDEsICI8b2JqZWN0PiIsICI8L29iamVjdD4iIF0sCgkJdGhlYWQ6IFsgMSwgIjx0YWJsZT4iLCAiPC90YWJsZT4iIF0sCgkJdHI6IFsgMiwgIjx0YWJsZT48dGJvZHk+IiwgIjwvdGJvZHk+PC90YWJsZT4iIF0sCgkJY29sOiBbIDIsICI8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPiIsICI8L2NvbGdyb3VwPjwvdGFibGU+IiBdLAoJCXRkOiBbIDMsICI8dGFibGU+PHRib2R5Pjx0cj4iLCAiPC90cj48L3Rib2R5PjwvdGFibGU+IiBdLAoKCQkvLyBJRTYtOCBjYW4ndCBzZXJpYWxpemUgbGluaywgc2NyaXB0LCBzdHlsZSwgb3IgYW55IGh0bWw1IChOb1Njb3BlKSB0YWdzLAoJCS8vIHVubGVzcyB3cmFwcGVkIGluIGEgZGl2IHdpdGggbm9uLWJyZWFraW5nIGNoYXJhY3RlcnMgaW4gZnJvbnQgb2YgaXQuCgkJX2RlZmF1bHQ6IHN1cHBvcnQuaHRtbFNlcmlhbGl6ZSA/IFsgMCwgIiIsICIiIF0gOiBbIDEsICJYPGRpdj4iLCAiPC9kaXY+IiAgXQoJfSwKCXNhZmVGcmFnbWVudCA9IGNyZWF0ZVNhZmVGcmFnbWVudCggZG9jdW1lbnQgKSwKCWZyYWdtZW50RGl2ID0gc2FmZUZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSApOwoKd3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uOwp3cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkOwp3cmFwTWFwLnRoID0gd3JhcE1hcC50ZDsKCmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkgewoJdmFyIGVsZW1zLCBlbGVtLAoJCWkgPSAwLAoJCWZvdW5kID0gdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IHN0cnVuZGVmaW5lZCA/IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCAiKiIgKSA6CgkJCXR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IHN0cnVuZGVmaW5lZCA/IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8ICIqIiApIDoKCQkJdW5kZWZpbmVkOwoKCWlmICggIWZvdW5kICkgewoJCWZvciAoIGZvdW5kID0gW10sIGVsZW1zID0gY29udGV4dC5jaGlsZE5vZGVzIHx8IGNvbnRleHQ7IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHsKCQkJaWYgKCAhdGFnIHx8IGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgdGFnICkgKSB7CgkJCQlmb3VuZC5wdXNoKCBlbGVtICk7CgkJCX0gZWxzZSB7CgkJCQlqUXVlcnkubWVyZ2UoIGZvdW5kLCBnZXRBbGwoIGVsZW0sIHRhZyApICk7CgkJCX0KCQl9Cgl9CgoJcmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID8KCQlqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCBmb3VuZCApIDoKCQlmb3VuZDsKfQoKLy8gVXNlZCBpbiBidWlsZEZyYWdtZW50LCBmaXhlcyB0aGUgZGVmYXVsdENoZWNrZWQgcHJvcGVydHkKZnVuY3Rpb24gZml4RGVmYXVsdENoZWNrZWQoIGVsZW0gKSB7CglpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsZW0udHlwZSApICkgewoJCWVsZW0uZGVmYXVsdENoZWNrZWQgPSBlbGVtLmNoZWNrZWQ7Cgl9Cn0KCi8vIFN1cHBvcnQ6IElFPDgKLy8gTWFuaXB1bGF0aW5nIHRhYmxlcyByZXF1aXJlcyBhIHRib2R5CmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHsKCXJldHVybiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sICJ0YWJsZSIgKSAmJgoJCWpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCAidHIiICkgPwoKCQllbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJ0Ym9keSIpWzBdIHx8CgkJCWVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0Ym9keSIpICkgOgoJCWVsZW07Cn0KCi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb24KZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHsKCWVsZW0udHlwZSA9IChqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCAidHlwZSIgKSAhPT0gbnVsbCkgKyAiLyIgKyBlbGVtLnR5cGU7CglyZXR1cm4gZWxlbTsKfQpmdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkgewoJdmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7CglpZiAoIG1hdGNoICkgewoJCWVsZW0udHlwZSA9IG1hdGNoWzFdOwoJfSBlbHNlIHsKCQllbGVtLnJlbW92ZUF0dHJpYnV0ZSgidHlwZSIpOwoJfQoJcmV0dXJuIGVsZW07Cn0KCi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZApmdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7Cgl2YXIgZWxlbSwKCQlpID0gMDsKCWZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkgewoJCWpRdWVyeS5fZGF0YSggZWxlbSwgImdsb2JhbEV2YWwiLCAhcmVmRWxlbWVudHMgfHwgalF1ZXJ5Ll9kYXRhKCByZWZFbGVtZW50c1tpXSwgImdsb2JhbEV2YWwiICkgKTsKCX0KfQoKZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHsKCglpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgfHwgIWpRdWVyeS5oYXNEYXRhKCBzcmMgKSApIHsKCQlyZXR1cm47Cgl9CgoJdmFyIHR5cGUsIGksIGwsCgkJb2xkRGF0YSA9IGpRdWVyeS5fZGF0YSggc3JjICksCgkJY3VyRGF0YSA9IGpRdWVyeS5fZGF0YSggZGVzdCwgb2xkRGF0YSApLAoJCWV2ZW50cyA9IG9sZERhdGEuZXZlbnRzOwoKCWlmICggZXZlbnRzICkgewoJCWRlbGV0ZSBjdXJEYXRhLmhhbmRsZTsKCQljdXJEYXRhLmV2ZW50cyA9IHt9OwoKCQlmb3IgKCB0eXBlIGluIGV2ZW50cyApIHsKCQkJZm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CgkJCQlqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7CgkJCX0KCQl9Cgl9CgoJLy8gbWFrZSB0aGUgY2xvbmVkIHB1YmxpYyBkYXRhIG9iamVjdCBhIGNvcHkgZnJvbSB0aGUgb3JpZ2luYWwKCWlmICggY3VyRGF0YS5kYXRhICkgewoJCWN1ckRhdGEuZGF0YSA9IGpRdWVyeS5leHRlbmQoIHt9LCBjdXJEYXRhLmRhdGEgKTsKCX0KfQoKZnVuY3Rpb24gZml4Q2xvbmVOb2RlSXNzdWVzKCBzcmMsIGRlc3QgKSB7Cgl2YXIgbm9kZU5hbWUsIGUsIGRhdGE7CgoJLy8gV2UgZG8gbm90IG5lZWQgdG8gZG8gYW55dGhpbmcgZm9yIG5vbi1FbGVtZW50cwoJaWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkgewoJCXJldHVybjsKCX0KCglub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCgkvLyBJRTYtOCBjb3BpZXMgZXZlbnRzIGJvdW5kIHZpYSBhdHRhY2hFdmVudCB3aGVuIHVzaW5nIGNsb25lTm9kZS4KCWlmICggIXN1cHBvcnQubm9DbG9uZUV2ZW50ICYmIGRlc3RbIGpRdWVyeS5leHBhbmRvIF0gKSB7CgkJZGF0YSA9IGpRdWVyeS5fZGF0YSggZGVzdCApOwoKCQlmb3IgKCBlIGluIGRhdGEuZXZlbnRzICkgewoJCQlqUXVlcnkucmVtb3ZlRXZlbnQoIGRlc3QsIGUsIGRhdGEuaGFuZGxlICk7CgkJfQoKCQkvLyBFdmVudCBkYXRhIGdldHMgcmVmZXJlbmNlZCBpbnN0ZWFkIG9mIGNvcGllZCBpZiB0aGUgZXhwYW5kbyBnZXRzIGNvcGllZCB0b28KCQlkZXN0LnJlbW92ZUF0dHJpYnV0ZSggalF1ZXJ5LmV4cGFuZG8gKTsKCX0KCgkvLyBJRSBibGFua3MgY29udGVudHMgd2hlbiBjbG9uaW5nIHNjcmlwdHMsIGFuZCB0cmllcyB0byBldmFsdWF0ZSBuZXdseS1zZXQgdGV4dAoJaWYgKCBub2RlTmFtZSA9PT0gInNjcmlwdCIgJiYgZGVzdC50ZXh0ICE9PSBzcmMudGV4dCApIHsKCQlkaXNhYmxlU2NyaXB0KCBkZXN0ICkudGV4dCA9IHNyYy50ZXh0OwoJCXJlc3RvcmVTY3JpcHQoIGRlc3QgKTsKCgkvLyBJRTYtMTAgaW1wcm9wZXJseSBjbG9uZXMgY2hpbGRyZW4gb2Ygb2JqZWN0IGVsZW1lbnRzIHVzaW5nIGNsYXNzaWQuCgkvLyBJRTEwIHRocm93cyBOb01vZGlmaWNhdGlvbkFsbG93ZWRFcnJvciBpZiBwYXJlbnQgaXMgbnVsbCwgIzEyMTMyLgoJfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJvYmplY3QiICkgewoJCWlmICggZGVzdC5wYXJlbnROb2RlICkgewoJCQlkZXN0Lm91dGVySFRNTCA9IHNyYy5vdXRlckhUTUw7CgkJfQoKCQkvLyBUaGlzIHBhdGggYXBwZWFycyB1bmF2b2lkYWJsZSBmb3IgSUU5LiBXaGVuIGNsb25pbmcgYW4gb2JqZWN0CgkJLy8gZWxlbWVudCBpbiBJRTksIHRoZSBvdXRlckhUTUwgc3RyYXRlZ3kgYWJvdmUgaXMgbm90IHN1ZmZpY2llbnQuCgkJLy8gSWYgdGhlIHNyYyBoYXMgaW5uZXJIVE1MIGFuZCB0aGUgZGVzdGluYXRpb24gZG9lcyBub3QsCgkJLy8gY29weSB0aGUgc3JjLmlubmVySFRNTCBpbnRvIHRoZSBkZXN0LmlubmVySFRNTC4gIzEwMzI0CgkJaWYgKCBzdXBwb3J0Lmh0bWw1Q2xvbmUgJiYgKCBzcmMuaW5uZXJIVE1MICYmICFqUXVlcnkudHJpbShkZXN0LmlubmVySFRNTCkgKSApIHsKCQkJZGVzdC5pbm5lckhUTUwgPSBzcmMuaW5uZXJIVE1MOwoJCX0KCgl9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gImlucHV0IiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkgewoJCS8vIElFNi04IGZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3gKCQkvLyBvciByYWRpbyBidXR0b24uIFdvcnNlLCBJRTYtNyBmYWlsIHRvIGdpdmUgdGhlIGNsb25lZCBlbGVtZW50CgkJLy8gYSBjaGVja2VkIGFwcGVhcmFuY2UgaWYgdGhlIGRlZmF1bHRDaGVja2VkIHZhbHVlIGlzbid0IGFsc28gc2V0CgoJCWRlc3QuZGVmYXVsdENoZWNrZWQgPSBkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDsKCgkJLy8gSUU2LTcgZ2V0IGNvbmZ1c2VkIGFuZCBlbmQgdXAgc2V0dGluZyB0aGUgdmFsdWUgb2YgYSBjbG9uZWQKCQkvLyBjaGVja2JveC9yYWRpbyBidXR0b24gdG8gYW4gZW1wdHkgc3RyaW5nIGluc3RlYWQgb2YgIm9uIgoJCWlmICggZGVzdC52YWx1ZSAhPT0gc3JjLnZhbHVlICkgewoJCQlkZXN0LnZhbHVlID0gc3JjLnZhbHVlOwoJCX0KCgkvLyBJRTYtOCBmYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZAoJLy8gc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnMKCX0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSAib3B0aW9uIiApIHsKCQlkZXN0LmRlZmF1bHRTZWxlY3RlZCA9IGRlc3Quc2VsZWN0ZWQgPSBzcmMuZGVmYXVsdFNlbGVjdGVkOwoKCS8vIElFNi04IGZhaWxzIHRvIHNldCB0aGUgZGVmYXVsdFZhbHVlIHRvIHRoZSBjb3JyZWN0IHZhbHVlIHdoZW4KCS8vIGNsb25pbmcgb3RoZXIgdHlwZXMgb2YgaW5wdXQgZmllbGRzCgl9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gImlucHV0IiB8fCBub2RlTmFtZSA9PT0gInRleHRhcmVhIiApIHsKCQlkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7Cgl9Cn0KCmpRdWVyeS5leHRlbmQoewoJY2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHsKCQl2YXIgZGVzdEVsZW1lbnRzLCBub2RlLCBjbG9uZSwgaSwgc3JjRWxlbWVudHMsCgkJCWluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7CgoJCWlmICggc3VwcG9ydC5odG1sNUNsb25lIHx8IGpRdWVyeS5pc1hNTERvYyhlbGVtKSB8fCAhcm5vc2hpbWNhY2hlLnRlc3QoICI8IiArIGVsZW0ubm9kZU5hbWUgKyAiPiIgKSApIHsKCQkJY2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApOwoKCQkvLyBJRTw9OCBkb2VzIG5vdCBwcm9wZXJseSBjbG9uZSBkZXRhY2hlZCwgdW5rbm93biBlbGVtZW50IG5vZGVzCgkJfSBlbHNlIHsKCQkJZnJhZ21lbnREaXYuaW5uZXJIVE1MID0gZWxlbS5vdXRlckhUTUw7CgkJCWZyYWdtZW50RGl2LnJlbW92ZUNoaWxkKCBjbG9uZSA9IGZyYWdtZW50RGl2LmZpcnN0Q2hpbGQgKTsKCQl9CgoJCWlmICggKCFzdXBwb3J0Lm5vQ2xvbmVFdmVudCB8fCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCkgJiYKCQkJCShlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExKSAmJiAhalF1ZXJ5LmlzWE1MRG9jKGVsZW0pICkgewoKCQkJLy8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzIKCQkJZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApOwoJCQlzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApOwoKCQkJLy8gRml4IGFsbCBJRSBjbG9uaW5nIGlzc3VlcwoJCQlmb3IgKCBpID0gMDsgKG5vZGUgPSBzcmNFbGVtZW50c1tpXSkgIT0gbnVsbDsgKytpICkgewoJCQkJLy8gRW5zdXJlIHRoYXQgdGhlIGRlc3RpbmF0aW9uIG5vZGUgaXMgbm90IG51bGw7IEZpeGVzICM5NTg3CgkJCQlpZiAoIGRlc3RFbGVtZW50c1tpXSApIHsKCQkJCQlmaXhDbG9uZU5vZGVJc3N1ZXMoIG5vZGUsIGRlc3RFbGVtZW50c1tpXSApOwoJCQkJfQoJCQl9CgkJfQoKCQkvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lCgkJaWYgKCBkYXRhQW5kRXZlbnRzICkgewoJCQlpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkgewoJCQkJc3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTsKCQkJCWRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7CgoJCQkJZm9yICggaSA9IDA7IChub2RlID0gc3JjRWxlbWVudHNbaV0pICE9IG51bGw7IGkrKyApIHsKCQkJCQljbG9uZUNvcHlFdmVudCggbm9kZSwgZGVzdEVsZW1lbnRzW2ldICk7CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQljbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTsKCQkJfQoJCX0KCgkJLy8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeQoJCWRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsICJzY3JpcHQiICk7CgkJaWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHsKCQkJc2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgInNjcmlwdCIgKSApOwoJCX0KCgkJZGVzdEVsZW1lbnRzID0gc3JjRWxlbWVudHMgPSBub2RlID0gbnVsbDsKCgkJLy8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0CgkJcmV0dXJuIGNsb25lOwoJfSwKCglidWlsZEZyYWdtZW50OiBmdW5jdGlvbiggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiApIHsKCQl2YXIgaiwgZWxlbSwgY29udGFpbnMsCgkJCXRtcCwgdGFnLCB0Ym9keSwgd3JhcCwKCQkJbCA9IGVsZW1zLmxlbmd0aCwKCgkJCS8vIEVuc3VyZSBhIHNhZmUgZnJhZ21lbnQKCQkJc2FmZSA9IGNyZWF0ZVNhZmVGcmFnbWVudCggY29udGV4dCApLAoKCQkJbm9kZXMgPSBbXSwKCQkJaSA9IDA7CgoJCWZvciAoIDsgaSA8IGw7IGkrKyApIHsKCQkJZWxlbSA9IGVsZW1zWyBpIF07CgoJCQlpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHsKCgkJCQkvLyBBZGQgbm9kZXMgZGlyZWN0bHkKCQkJCWlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gIm9iamVjdCIgKSB7CgkJCQkJalF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApOwoKCQkJCS8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZQoJCQkJfSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHsKCQkJCQlub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTsKCgkJCQkvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXMKCQkJCX0gZWxzZSB7CgkJCQkJdG1wID0gdG1wIHx8IHNhZmUuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCgiZGl2IikgKTsKCgkJCQkJLy8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvbgoJCQkJCXRhZyA9IChydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyAiIiwgIiIgXSlbIDEgXS50b0xvd2VyQ2FzZSgpOwoJCQkJCXdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0OwoKCQkJCQl0bXAuaW5uZXJIVE1MID0gd3JhcFsxXSArIGVsZW0ucmVwbGFjZSggcnhodG1sVGFnLCAiPCQxPjwvJDI+IiApICsgd3JhcFsyXTsKCgkJCQkJLy8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50CgkJCQkJaiA9IHdyYXBbMF07CgkJCQkJd2hpbGUgKCBqLS0gKSB7CgkJCQkJCXRtcCA9IHRtcC5sYXN0Q2hpbGQ7CgkJCQkJfQoKCQkJCQkvLyBNYW51YWxseSBhZGQgbGVhZGluZyB3aGl0ZXNwYWNlIHJlbW92ZWQgYnkgSUUKCQkJCQlpZiAoICFzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlICYmIHJsZWFkaW5nV2hpdGVzcGFjZS50ZXN0KCBlbGVtICkgKSB7CgkJCQkJCW5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIHJsZWFkaW5nV2hpdGVzcGFjZS5leGVjKCBlbGVtIClbMF0gKSApOwoJCQkJCX0KCgkJCQkJLy8gUmVtb3ZlIElFJ3MgYXV0b2luc2VydGVkIDx0Ym9keT4gZnJvbSB0YWJsZSBmcmFnbWVudHMKCQkJCQlpZiAoICFzdXBwb3J0LnRib2R5ICkgewoKCQkJCQkJLy8gU3RyaW5nIHdhcyBhIDx0YWJsZT4sICptYXkqIGhhdmUgc3B1cmlvdXMgPHRib2R5PgoJCQkJCQllbGVtID0gdGFnID09PSAidGFibGUiICYmICFydGJvZHkudGVzdCggZWxlbSApID8KCQkJCQkJCXRtcC5maXJzdENoaWxkIDoKCgkJCQkJCQkvLyBTdHJpbmcgd2FzIGEgYmFyZSA8dGhlYWQ+IG9yIDx0Zm9vdD4KCQkJCQkJCXdyYXBbMV0gPT09ICI8dGFibGU+IiAmJiAhcnRib2R5LnRlc3QoIGVsZW0gKSA/CgkJCQkJCQkJdG1wIDoKCQkJCQkJCQkwOwoKCQkJCQkJaiA9IGVsZW0gJiYgZWxlbS5jaGlsZE5vZGVzLmxlbmd0aDsKCQkJCQkJd2hpbGUgKCBqLS0gKSB7CgkJCQkJCQlpZiAoIGpRdWVyeS5ub2RlTmFtZSggKHRib2R5ID0gZWxlbS5jaGlsZE5vZGVzW2pdKSwgInRib2R5IiApICYmICF0Ym9keS5jaGlsZE5vZGVzLmxlbmd0aCApIHsKCQkJCQkJCQllbGVtLnJlbW92ZUNoaWxkKCB0Ym9keSApOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfQoKCQkJCQlqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApOwoKCQkJCQkvLyBGaXggIzEyMzkyIGZvciBXZWJLaXQgYW5kIElFID4gOQoJCQkJCXRtcC50ZXh0Q29udGVudCA9ICIiOwoKCQkJCQkvLyBGaXggIzEyMzkyIGZvciBvbGRJRQoJCQkJCXdoaWxlICggdG1wLmZpcnN0Q2hpbGQgKSB7CgkJCQkJCXRtcC5yZW1vdmVDaGlsZCggdG1wLmZpcnN0Q2hpbGQgKTsKCQkJCQl9CgoJCQkJCS8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciBwcm9wZXIgY2xlYW51cAoJCQkJCXRtcCA9IHNhZmUubGFzdENoaWxkOwoJCQkJfQoJCQl9CgkJfQoKCQkvLyBGaXggIzExMzU2OiBDbGVhciBlbGVtZW50cyBmcm9tIGZyYWdtZW50CgkJaWYgKCB0bXAgKSB7CgkJCXNhZmUucmVtb3ZlQ2hpbGQoIHRtcCApOwoJCX0KCgkJLy8gUmVzZXQgZGVmYXVsdENoZWNrZWQgZm9yIGFueSByYWRpb3MgYW5kIGNoZWNrYm94ZXMKCQkvLyBhYm91dCB0byBiZSBhcHBlbmRlZCB0byB0aGUgRE9NIGluIElFIDYvNyAoIzgwNjApCgkJaWYgKCAhc3VwcG9ydC5hcHBlbmRDaGVja2VkICkgewoJCQlqUXVlcnkuZ3JlcCggZ2V0QWxsKCBub2RlcywgImlucHV0IiApLCBmaXhEZWZhdWx0Q2hlY2tlZCApOwoJCX0KCgkJaSA9IDA7CgkJd2hpbGUgKCAoZWxlbSA9IG5vZGVzWyBpKysgXSkgKSB7CgoJCQkvLyAjNDA4NyAtIElmIG9yaWdpbiBhbmQgZGVzdGluYXRpb24gZWxlbWVudHMgYXJlIHRoZSBzYW1lLCBhbmQgdGhpcyBpcwoJCQkvLyB0aGF0IGVsZW1lbnQsIGRvIG5vdCBkbyBhbnl0aGluZwoJCQlpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgIT09IC0xICkgewoJCQkJY29udGludWU7CgkJCX0KCgkJCWNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTsKCgkJCS8vIEFwcGVuZCB0byBmcmFnbWVudAoJCQl0bXAgPSBnZXRBbGwoIHNhZmUuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgInNjcmlwdCIgKTsKCgkJCS8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3RvcnkKCQkJaWYgKCBjb250YWlucyApIHsKCQkJCXNldEdsb2JhbEV2YWwoIHRtcCApOwoJCQl9CgoJCQkvLyBDYXB0dXJlIGV4ZWN1dGFibGVzCgkJCWlmICggc2NyaXB0cyApIHsKCQkJCWogPSAwOwoJCQkJd2hpbGUgKCAoZWxlbSA9IHRtcFsgaisrIF0pICkgewoJCQkJCWlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8ICIiICkgKSB7CgkJCQkJCXNjcmlwdHMucHVzaCggZWxlbSApOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJdG1wID0gbnVsbDsKCgkJcmV0dXJuIHNhZmU7Cgl9LAoKCWNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zLCAvKiBpbnRlcm5hbCAqLyBhY2NlcHREYXRhICkgewoJCXZhciBlbGVtLCB0eXBlLCBpZCwgZGF0YSwKCQkJaSA9IDAsCgkJCWludGVybmFsS2V5ID0galF1ZXJ5LmV4cGFuZG8sCgkJCWNhY2hlID0galF1ZXJ5LmNhY2hlLAoJCQlkZWxldGVFeHBhbmRvID0gc3VwcG9ydC5kZWxldGVFeHBhbmRvLAoJCQlzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWw7CgoJCWZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkgewoJCQlpZiAoIGFjY2VwdERhdGEgfHwgalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHsKCgkJCQlpZCA9IGVsZW1bIGludGVybmFsS2V5IF07CgkJCQlkYXRhID0gaWQgJiYgY2FjaGVbIGlkIF07CgoJCQkJaWYgKCBkYXRhICkgewoJCQkJCWlmICggZGF0YS5ldmVudHMgKSB7CgkJCQkJCWZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7CgkJCQkJCQlpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHsKCQkJCQkJCQlqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7CgoJCQkJCQkJLy8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZAoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQlqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgoJCQkJCS8vIFJlbW92ZSBjYWNoZSBvbmx5IGlmIGl0IHdhcyBub3QgYWxyZWFkeSByZW1vdmVkIGJ5IGpRdWVyeS5ldmVudC5yZW1vdmUKCQkJCQlpZiAoIGNhY2hlWyBpZCBdICkgewoKCQkJCQkJZGVsZXRlIGNhY2hlWyBpZCBdOwoKCQkJCQkJLy8gSUUgZG9lcyBub3QgYWxsb3cgdXMgdG8gZGVsZXRlIGV4cGFuZG8gcHJvcGVydGllcyBmcm9tIG5vZGVzLAoJCQkJCQkvLyBub3IgZG9lcyBpdCBoYXZlIGEgcmVtb3ZlQXR0cmlidXRlIGZ1bmN0aW9uIG9uIERvY3VtZW50IG5vZGVzOwoJCQkJCQkvLyB3ZSBtdXN0IGhhbmRsZSBhbGwgb2YgdGhlc2UgY2FzZXMKCQkJCQkJaWYgKCBkZWxldGVFeHBhbmRvICkgewoJCQkJCQkJZGVsZXRlIGVsZW1bIGludGVybmFsS2V5IF07CgoJCQkJCQl9IGVsc2UgaWYgKCB0eXBlb2YgZWxlbS5yZW1vdmVBdHRyaWJ1dGUgIT09IHN0cnVuZGVmaW5lZCApIHsKCQkJCQkJCWVsZW0ucmVtb3ZlQXR0cmlidXRlKCBpbnRlcm5hbEtleSApOwoKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCWVsZW1bIGludGVybmFsS2V5IF0gPSBudWxsOwoJCQkJCQl9CgoJCQkJCQlkZWxldGVkSWRzLnB1c2goIGlkICk7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJfQp9KTsKCmpRdWVyeS5mbi5leHRlbmQoewoJdGV4dDogZnVuY3Rpb24oIHZhbHVlICkgewoJCXJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQkJcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPwoJCQkJalF1ZXJ5LnRleHQoIHRoaXMgKSA6CgkJCQl0aGlzLmVtcHR5KCkuYXBwZW5kKCAoIHRoaXNbMF0gJiYgdGhpc1swXS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkuY3JlYXRlVGV4dE5vZGUoIHZhbHVlICkgKTsKCQl9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApOwoJfSwKCglhcHBlbmQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkgewoJCQlpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHsKCQkJCXZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTsKCQkJCXRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApOwoJCQl9CgkJfSk7Cgl9LAoKCXByZXBlbmQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkgewoJCQlpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHsKCQkJCXZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTsKCQkJCXRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7CgkJCX0KCQl9KTsKCX0sCgoJYmVmb3JlOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHsKCQkJaWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7CgkJCQl0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7CgkJCX0KCQl9KTsKCX0sCgoJYWZ0ZXI6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkgewoJCQlpZiAoIHRoaXMucGFyZW50Tm9kZSApIHsKCQkJCXRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTsKCQkJfQoJCX0pOwoJfSwKCglyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3Rvciwga2VlcERhdGEgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7CgkJdmFyIGVsZW0sCgkJCWVsZW1zID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgdGhpcyApIDogdGhpcywKCQkJaSA9IDA7CgoJCWZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkgewoKCQkJaWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHsKCQkJCWpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSApICk7CgkJCX0KCgkJCWlmICggZWxlbS5wYXJlbnROb2RlICkgewoJCQkJaWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkgewoJCQkJCXNldEdsb2JhbEV2YWwoIGdldEFsbCggZWxlbSwgInNjcmlwdCIgKSApOwoJCQkJfQoJCQkJZWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbGVtICk7CgkJCX0KCQl9CgoJCXJldHVybiB0aGlzOwoJfSwKCgllbXB0eTogZnVuY3Rpb24oKSB7CgkJdmFyIGVsZW0sCgkJCWkgPSAwOwoKCQlmb3IgKCA7IChlbGVtID0gdGhpc1tpXSkgIT0gbnVsbDsgaSsrICkgewoJCQkvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3MKCQkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkgewoJCQkJalF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7CgkJCX0KCgkJCS8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzCgkJCXdoaWxlICggZWxlbS5maXJzdENoaWxkICkgewoJCQkJZWxlbS5yZW1vdmVDaGlsZCggZWxlbS5maXJzdENoaWxkICk7CgkJCX0KCgkJCS8vIElmIHRoaXMgaXMgYSBzZWxlY3QsIGVuc3VyZSB0aGF0IGl0IGRpc3BsYXlzIGVtcHR5ICgjMTIzMzYpCgkJCS8vIFN1cHBvcnQ6IElFPDkKCQkJaWYgKCBlbGVtLm9wdGlvbnMgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCAic2VsZWN0IiApICkgewoJCQkJZWxlbS5vcHRpb25zLmxlbmd0aCA9IDA7CgkJCX0KCQl9CgoJCXJldHVybiB0aGlzOwoJfSwKCgljbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkgewoJCWRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7CgkJZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzOwoKCQlyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7CgkJCXJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7CgkJfSk7Cgl9LAoKCWh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQlyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCXZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LAoJCQkJaSA9IDAsCgkJCQlsID0gdGhpcy5sZW5ndGg7CgoJCQlpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7CgkJCQlyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMSA/CgkJCQkJZWxlbS5pbm5lckhUTUwucmVwbGFjZSggcmlubGluZWpRdWVyeSwgIiIgKSA6CgkJCQkJdW5kZWZpbmVkOwoJCQl9CgoJCQkvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MCgkJCWlmICggdHlwZW9mIHZhbHVlID09PSAic3RyaW5nIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiYKCQkJCSggc3VwcG9ydC5odG1sU2VyaWFsaXplIHx8ICFybm9zaGltY2FjaGUudGVzdCggdmFsdWUgKSAgKSAmJgoJCQkJKCBzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlIHx8ICFybGVhZGluZ1doaXRlc3BhY2UudGVzdCggdmFsdWUgKSApICYmCgkJCQkhd3JhcE1hcFsgKHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyAiIiwgIiIgXSlbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7CgoJCQkJdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCByeGh0bWxUYWcsICI8JDE+PC8kMj4iICk7CgoJCQkJdHJ5IHsKCQkJCQlmb3IgKDsgaSA8IGw7IGkrKyApIHsKCQkJCQkJLy8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzCgkJCQkJCWVsZW0gPSB0aGlzW2ldIHx8IHt9OwoJCQkJCQlpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7CgkJCQkJCQlqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTsKCQkJCQkJCWVsZW0uaW5uZXJIVE1MID0gdmFsdWU7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCWVsZW0gPSAwOwoKCQkJCS8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZAoJCQkJfSBjYXRjaChlKSB7fQoJCQl9CgoJCQlpZiAoIGVsZW0gKSB7CgkJCQl0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApOwoJCQl9CgkJfSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTsKCX0sCgoJcmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkgewoJCXZhciBhcmcgPSBhcmd1bWVudHNbIDAgXTsKCgkJLy8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50CgkJdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHsKCQkJYXJnID0gdGhpcy5wYXJlbnROb2RlOwoKCQkJalF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTsKCgkJCWlmICggYXJnICkgewoJCQkJYXJnLnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApOwoJCQl9CgkJfSk7CgoJCS8vIEZvcmNlIHJlbW92YWwgaWYgdGhlcmUgd2FzIG5vIG5ldyBjb250ZW50IChlLmcuLCBmcm9tIGVtcHR5IGFyZ3VtZW50cykKCQlyZXR1cm4gYXJnICYmIChhcmcubGVuZ3RoIHx8IGFyZy5ub2RlVHlwZSkgPyB0aGlzIDogdGhpcy5yZW1vdmUoKTsKCX0sCgoJZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CgkJcmV0dXJuIHRoaXMucmVtb3ZlKCBzZWxlY3RvciwgdHJ1ZSApOwoJfSwKCglkb21NYW5pcDogZnVuY3Rpb24oIGFyZ3MsIGNhbGxiYWNrICkgewoKCQkvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzCgkJYXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTsKCgkJdmFyIGZpcnN0LCBub2RlLCBoYXNTY3JpcHRzLAoJCQlzY3JpcHRzLCBkb2MsIGZyYWdtZW50LAoJCQlpID0gMCwKCQkJbCA9IHRoaXMubGVuZ3RoLAoJCQlzZXQgPSB0aGlzLAoJCQlpTm9DbG9uZSA9IGwgLSAxLAoJCQl2YWx1ZSA9IGFyZ3NbMF0sCgkJCWlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTsKCgkJLy8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0CgkJaWYgKCBpc0Z1bmN0aW9uIHx8CgkJCQkoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIgJiYKCQkJCQkhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHsKCQkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaW5kZXggKSB7CgkJCQl2YXIgc2VsZiA9IHNldC5lcSggaW5kZXggKTsKCQkJCWlmICggaXNGdW5jdGlvbiApIHsKCQkJCQlhcmdzWzBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7CgkJCQl9CgkJCQlzZWxmLmRvbU1hbmlwKCBhcmdzLCBjYWxsYmFjayApOwoJCQl9KTsKCQl9CgoJCWlmICggbCApIHsKCQkJZnJhZ21lbnQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggYXJncywgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCB0aGlzICk7CgkJCWZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDsKCgkJCWlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7CgkJCQlmcmFnbWVudCA9IGZpcnN0OwoJCQl9CgoJCQlpZiAoIGZpcnN0ICkgewoJCQkJc2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsICJzY3JpcHQiICksIGRpc2FibGVTY3JpcHQgKTsKCQkJCWhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDsKCgkJCQkvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cAoJCQkJLy8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS4KCQkJCWZvciAoIDsgaSA8IGw7IGkrKyApIHsKCQkJCQlub2RlID0gZnJhZ21lbnQ7CgoJCQkJCWlmICggaSAhPT0gaU5vQ2xvbmUgKSB7CgkJCQkJCW5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTsKCgkJCQkJCS8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb24KCQkJCQkJaWYgKCBoYXNTY3JpcHRzICkgewoJCQkJCQkJalF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsICJzY3JpcHQiICkgKTsKCQkJCQkJfQoJCQkJCX0KCgkJCQkJY2FsbGJhY2suY2FsbCggdGhpc1tpXSwgbm9kZSwgaSApOwoJCQkJfQoKCQkJCWlmICggaGFzU2NyaXB0cyApIHsKCQkJCQlkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50OwoKCQkJCQkvLyBSZWVuYWJsZSBzY3JpcHRzCgkJCQkJalF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApOwoKCQkJCQkvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uCgkJCQkJZm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7CgkJCQkJCW5vZGUgPSBzY3JpcHRzWyBpIF07CgkJCQkJCWlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8ICIiICkgJiYKCQkJCQkJCSFqUXVlcnkuX2RhdGEoIG5vZGUsICJnbG9iYWxFdmFsIiApICYmIGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7CgoJCQkJCQkJaWYgKCBub2RlLnNyYyApIHsKCQkJCQkJCQkvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudAoJCQkJCQkJCWlmICggalF1ZXJ5Ll9ldmFsVXJsICkgewoJCQkJCQkJCQlqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7CgkJCQkJCQkJfQoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQlqUXVlcnkuZ2xvYmFsRXZhbCggKCBub2RlLnRleHQgfHwgbm9kZS50ZXh0Q29udGVudCB8fCBub2RlLmlubmVySFRNTCB8fCAiIiApLnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgIiIgKSApOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfQoJCQkJfQoKCQkJCS8vIEZpeCAjMTE4MDk6IEF2b2lkIGxlYWtpbmcgbWVtb3J5CgkJCQlmcmFnbWVudCA9IGZpcnN0ID0gbnVsbDsKCQkJfQoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9Cn0pOwoKalF1ZXJ5LmVhY2goewoJYXBwZW5kVG86ICJhcHBlbmQiLAoJcHJlcGVuZFRvOiAicHJlcGVuZCIsCglpbnNlcnRCZWZvcmU6ICJiZWZvcmUiLAoJaW5zZXJ0QWZ0ZXI6ICJhZnRlciIsCglyZXBsYWNlQWxsOiAicmVwbGFjZVdpdGgiCn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHsKCWpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkgewoJCXZhciBlbGVtcywKCQkJaSA9IDAsCgkJCXJldCA9IFtdLAoJCQlpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksCgkJCWxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMTsKCgkJZm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHsKCQkJZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUodHJ1ZSk7CgkJCWpRdWVyeSggaW5zZXJ0W2ldIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7CgoJCQkvLyBNb2Rlcm4gYnJvd3NlcnMgY2FuIGFwcGx5IGpRdWVyeSBjb2xsZWN0aW9ucyBhcyBhcnJheXMsIGJ1dCBvbGRJRSBuZWVkcyBhIC5nZXQoKQoJCQlwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7CgkJfQoKCQlyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApOwoJfTsKfSk7CgoKdmFyIGlmcmFtZSwKCWVsZW1kaXNwbGF5ID0ge307CgovKioKICogUmV0cmlldmUgdGhlIGFjdHVhbCBkaXNwbGF5IG9mIGEgZWxlbWVudAogKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBub2RlTmFtZSBvZiB0aGUgZWxlbWVudAogKiBAcGFyYW0ge09iamVjdH0gZG9jIERvY3VtZW50IG9iamVjdAogKi8KLy8gQ2FsbGVkIG9ubHkgZnJvbSB3aXRoaW4gZGVmYXVsdERpc3BsYXkKZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkgewoJdmFyIGVsZW0gPSBqUXVlcnkoIGRvYy5jcmVhdGVFbGVtZW50KCBuYW1lICkgKS5hcHBlbmRUbyggZG9jLmJvZHkgKSwKCgkJLy8gZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgbWlnaHQgYmUgcmVsaWFibHkgdXNlZCBvbmx5IG9uIGF0dGFjaGVkIGVsZW1lbnQKCQlkaXNwbGF5ID0gd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlID8KCgkJCS8vIFVzZSBvZiB0aGlzIG1ldGhvZCBpcyBhIHRlbXBvcmFyeSBmaXggKG1vcmUgbGlrZSBvcHRtaXphdGlvbikgdW50aWwgc29tZXRoaW5nIGJldHRlciBjb21lcyBhbG9uZywKCQkJLy8gc2luY2UgaXQgd2FzIHJlbW92ZWQgZnJvbSBzcGVjaWZpY2F0aW9uIGFuZCBzdXBwb3J0ZWQgb25seSBpbiBGRgoJCQl3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUoIGVsZW1bIDAgXSApLmRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtWyAwIF0sICJkaXNwbGF5IiApOwoKCS8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LAoJLy8gc28gdXNlICJkZXRhY2giIG1ldGhvZCBhcyBmYXN0IHdheSB0byBnZXQgcmlkIG9mIHRoZSBlbGVtZW50CgllbGVtLmRldGFjaCgpOwoKCXJldHVybiBkaXNwbGF5Owp9CgovKioKICogVHJ5IHRvIGRldGVybWluZSB0aGUgZGVmYXVsdCBkaXNwbGF5IHZhbHVlIG9mIGFuIGVsZW1lbnQKICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lCiAqLwpmdW5jdGlvbiBkZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7Cgl2YXIgZG9jID0gZG9jdW1lbnQsCgkJZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdOwoKCWlmICggIWRpc3BsYXkgKSB7CgkJZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTsKCgkJLy8gSWYgdGhlIHNpbXBsZSB3YXkgZmFpbHMsIHJlYWQgZnJvbSBpbnNpZGUgYW4gaWZyYW1lCgkJaWYgKCBkaXNwbGF5ID09PSAibm9uZSIgfHwgIWRpc3BsYXkgKSB7CgoJCQkvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGUKCQkJaWZyYW1lID0gKGlmcmFtZSB8fCBqUXVlcnkoICI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+IiApKS5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApOwoKCQkJLy8gQWx3YXlzIHdyaXRlIGEgbmV3IEhUTUwgc2tlbGV0b24gc28gV2Via2l0IGFuZCBGaXJlZm94IGRvbid0IGNob2tlIG9uIHJldXNlCgkJCWRvYyA9ICggaWZyYW1lWyAwIF0uY29udGVudFdpbmRvdyB8fCBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQgKS5kb2N1bWVudDsKCgkJCS8vIFN1cHBvcnQ6IElFCgkJCWRvYy53cml0ZSgpOwoJCQlkb2MuY2xvc2UoKTsKCgkJCWRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7CgkJCWlmcmFtZS5kZXRhY2goKTsKCQl9CgoJCS8vIFN0b3JlIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGlzcGxheQoJCWVsZW1kaXNwbGF5WyBub2RlTmFtZSBdID0gZGlzcGxheTsKCX0KCglyZXR1cm4gZGlzcGxheTsKfQoKCihmdW5jdGlvbigpIHsKCXZhciBhLCBzaHJpbmtXcmFwQmxvY2tzVmFsLAoJCWRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICksCgkJZGl2UmVzZXQgPQoJCQkiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94OyIgKwoJCQkiZGlzcGxheTpibG9jaztwYWRkaW5nOjA7bWFyZ2luOjA7Ym9yZGVyOjAiOwoKCS8vIFNldHVwCglkaXYuaW5uZXJIVE1MID0gIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPiI7CglhID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAiYSIgKVsgMCBdOwoKCWEuc3R5bGUuY3NzVGV4dCA9ICJmbG9hdDpsZWZ0O29wYWNpdHk6LjUiOwoKCS8vIE1ha2Ugc3VyZSB0aGF0IGVsZW1lbnQgb3BhY2l0eSBleGlzdHMKCS8vIChJRSB1c2VzIGZpbHRlciBpbnN0ZWFkKQoJLy8gVXNlIGEgcmVnZXggdG8gd29yayBhcm91bmQgYSBXZWJLaXQgaXNzdWUuIFNlZSAjNTE0NQoJc3VwcG9ydC5vcGFjaXR5ID0gL14wLjUvLnRlc3QoIGEuc3R5bGUub3BhY2l0eSApOwoKCS8vIFZlcmlmeSBzdHlsZSBmbG9hdCBleGlzdGVuY2UKCS8vIChJRSB1c2VzIHN0eWxlRmxvYXQgaW5zdGVhZCBvZiBjc3NGbG9hdCkKCXN1cHBvcnQuY3NzRmxvYXQgPSAhIWEuc3R5bGUuY3NzRmxvYXQ7CgoJZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gImNvbnRlbnQtYm94IjsKCWRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9ICIiOwoJc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09ICJjb250ZW50LWJveCI7CgoJLy8gTnVsbCBlbGVtZW50cyB0byBhdm9pZCBsZWFrcyBpbiBJRS4KCWEgPSBkaXYgPSBudWxsOwoKCXN1cHBvcnQuc2hyaW5rV3JhcEJsb2NrcyA9IGZ1bmN0aW9uKCkgewoJCXZhciBib2R5LCBjb250YWluZXIsIGRpdiwgY29udGFpbmVyU3R5bGVzOwoKCQlpZiAoIHNocmlua1dyYXBCbG9ja3NWYWwgPT0gbnVsbCApIHsKCQkJYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAiYm9keSIgKVsgMCBdOwoJCQlpZiAoICFib2R5ICkgewoJCQkJLy8gVGVzdCBmaXJlZCB0b28gZWFybHkgb3IgaW4gYW4gdW5zdXBwb3J0ZWQgZW52aXJvbm1lbnQsIGV4aXQuCgkJCQlyZXR1cm47CgkJCX0KCgkJCWNvbnRhaW5lclN0eWxlcyA9ICJib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6LTk5OTlweCI7CgkJCWNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7CgkJCWRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7CgoJCQlib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7CgoJCQkvLyBXaWxsIGJlIGNoYW5nZWQgbGF0ZXIgaWYgbmVlZGVkLgoJCQlzaHJpbmtXcmFwQmxvY2tzVmFsID0gZmFsc2U7CgoJCQlpZiAoIHR5cGVvZiBkaXYuc3R5bGUuem9vbSAhPT0gc3RydW5kZWZpbmVkICkgewoJCQkJLy8gU3VwcG9ydDogSUU2CgkJCQkvLyBDaGVjayBpZiBlbGVtZW50cyB3aXRoIGxheW91dCBzaHJpbmstd3JhcCB0aGVpciBjaGlsZHJlbgoJCQkJZGl2LnN0eWxlLmNzc1RleHQgPSBkaXZSZXNldCArICI7d2lkdGg6MXB4O3BhZGRpbmc6MXB4O3pvb206MSI7CgkJCQlkaXYuaW5uZXJIVE1MID0gIjxkaXY+PC9kaXY+IjsKCQkJCWRpdi5maXJzdENoaWxkLnN0eWxlLndpZHRoID0gIjVweCI7CgkJCQlzaHJpbmtXcmFwQmxvY2tzVmFsID0gZGl2Lm9mZnNldFdpZHRoICE9PSAzOwoJCQl9CgoJCQlib2R5LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTsKCgkJCS8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUuCgkJCWJvZHkgPSBjb250YWluZXIgPSBkaXYgPSBudWxsOwoJCX0KCgkJcmV0dXJuIHNocmlua1dyYXBCbG9ja3NWYWw7Cgl9OwoKfSkoKTsKdmFyIHJtYXJnaW4gPSAoL15tYXJnaW4vKTsKCnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCAiXigiICsgcG51bSArICIpKD8hcHgpW2EteiVdKyQiLCAiaSIgKTsKCgoKdmFyIGdldFN0eWxlcywgY3VyQ1NTLAoJcnBvc2l0aW9uID0gL14odG9wfHJpZ2h0fGJvdHRvbXxsZWZ0KSQvOwoKaWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHsKCWdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApOwoJfTsKCgljdXJDU1MgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7CgkJdmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCwKCQkJc3R5bGUgPSBlbGVtLnN0eWxlOwoKCQljb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApOwoKCQkvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSBpbiBJRTksIHNlZSAjMTI1MzcKCQlyZXQgPSBjb21wdXRlZCA/IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdIDogdW5kZWZpbmVkOwoKCQlpZiAoIGNvbXB1dGVkICkgewoKCQkJaWYgKCByZXQgPT09ICIiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkgewoJCQkJcmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7CgkJCX0KCgkJCS8vIEEgdHJpYnV0ZSB0byB0aGUgImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHMiCgkJCS8vIENocm9tZSA8IDE3IGFuZCBTYWZhcmkgNS4wIHVzZXMgImNvbXB1dGVkIHZhbHVlIiBpbnN0ZWFkIG9mICJ1c2VkIHZhbHVlIiBmb3IgbWFyZ2luLXJpZ2h0CgkJCS8vIFNhZmFyaSA1LjEuNyAoYXQgbGVhc3QpIHJldHVybnMgcGVyY2VudGFnZSBmb3IgYSBsYXJnZXIgc2V0IG9mIHZhbHVlcywgYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscwoJCQkvLyB0aGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6IGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXMKCQkJaWYgKCBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7CgoJCQkJLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlcwoJCQkJd2lkdGggPSBzdHlsZS53aWR0aDsKCQkJCW1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7CgkJCQltYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoOwoKCQkJCS8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXQKCQkJCXN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDsKCQkJCXJldCA9IGNvbXB1dGVkLndpZHRoOwoKCQkJCS8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXMKCQkJCXN0eWxlLndpZHRoID0gd2lkdGg7CgkJCQlzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoOwoJCQkJc3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDsKCQkJfQoJCX0KCgkJLy8gU3VwcG9ydDogSUUKCQkvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLgoJCXJldHVybiByZXQgPT09IHVuZGVmaW5lZCA/CgkJCXJldCA6CgkJCXJldCArICIiOwoJfTsKfSBlbHNlIGlmICggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmN1cnJlbnRTdHlsZSApIHsKCWdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiBlbGVtLmN1cnJlbnRTdHlsZTsKCX07CgoJY3VyQ1NTID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkgewoJCXZhciBsZWZ0LCBycywgcnNMZWZ0LCByZXQsCgkJCXN0eWxlID0gZWxlbS5zdHlsZTsKCgkJY29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTsKCQlyZXQgPSBjb21wdXRlZCA/IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQ7CgoJCS8vIEF2b2lkIHNldHRpbmcgcmV0IHRvIGVtcHR5IHN0cmluZyBoZXJlCgkJLy8gc28gd2UgZG9uJ3QgZGVmYXVsdCB0byBhdXRvCgkJaWYgKCByZXQgPT0gbnVsbCAmJiBzdHlsZSAmJiBzdHlsZVsgbmFtZSBdICkgewoJCQlyZXQgPSBzdHlsZVsgbmFtZSBdOwoJCX0KCgkJLy8gRnJvbSB0aGUgYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkcwoJCS8vIGh0dHA6Ly9lcmlrLmVhZS5uZXQvYXJjaGl2ZXMvMjAwNy8wNy8yNy8xOC41NC4xNS8jY29tbWVudC0xMDIyOTEKCgkJLy8gSWYgd2UncmUgbm90IGRlYWxpbmcgd2l0aCBhIHJlZ3VsYXIgcGl4ZWwgbnVtYmVyCgkJLy8gYnV0IGEgbnVtYmVyIHRoYXQgaGFzIGEgd2VpcmQgZW5kaW5nLCB3ZSBuZWVkIHRvIGNvbnZlcnQgaXQgdG8gcGl4ZWxzCgkJLy8gYnV0IG5vdCBwb3NpdGlvbiBjc3MgYXR0cmlidXRlcywgYXMgdGhvc2UgYXJlIHByb3BvcnRpb25hbCB0byB0aGUgcGFyZW50IGVsZW1lbnQgaW5zdGVhZAoJCS8vIGFuZCB3ZSBjYW4ndCBtZWFzdXJlIHRoZSBwYXJlbnQgaW5zdGVhZCBiZWNhdXNlIGl0IG1pZ2h0IHRyaWdnZXIgYSAic3RhY2tpbmcgZG9sbHMiIHByb2JsZW0KCQlpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiAhcnBvc2l0aW9uLnRlc3QoIG5hbWUgKSApIHsKCgkJCS8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXMKCQkJbGVmdCA9IHN0eWxlLmxlZnQ7CgkJCXJzID0gZWxlbS5ydW50aW1lU3R5bGU7CgkJCXJzTGVmdCA9IHJzICYmIHJzLmxlZnQ7CgoJCQkvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0CgkJCWlmICggcnNMZWZ0ICkgewoJCQkJcnMubGVmdCA9IGVsZW0uY3VycmVudFN0eWxlLmxlZnQ7CgkJCX0KCQkJc3R5bGUubGVmdCA9IG5hbWUgPT09ICJmb250U2l6ZSIgPyAiMWVtIiA6IHJldDsKCQkJcmV0ID0gc3R5bGUucGl4ZWxMZWZ0ICsgInB4IjsKCgkJCS8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXMKCQkJc3R5bGUubGVmdCA9IGxlZnQ7CgkJCWlmICggcnNMZWZ0ICkgewoJCQkJcnMubGVmdCA9IHJzTGVmdDsKCQkJfQoJCX0KCgkJLy8gU3VwcG9ydDogSUUKCQkvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLgoJCXJldHVybiByZXQgPT09IHVuZGVmaW5lZCA/CgkJCXJldCA6CgkJCXJldCArICIiIHx8ICJhdXRvIjsKCX07Cn0KCgoKCmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHsKCS8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuCglyZXR1cm4gewoJCWdldDogZnVuY3Rpb24oKSB7CgkJCXZhciBjb25kaXRpb24gPSBjb25kaXRpb25GbigpOwoKCQkJaWYgKCBjb25kaXRpb24gPT0gbnVsbCApIHsKCQkJCS8vIFRoZSB0ZXN0IHdhcyBub3QgcmVhZHkgYXQgdGhpcyBwb2ludDsgc2NyZXcgdGhlIGhvb2sgdGhpcyB0aW1lCgkJCQkvLyBidXQgY2hlY2sgYWdhaW4gd2hlbiBuZWVkZWQgbmV4dCB0aW1lLgoJCQkJcmV0dXJuOwoJCQl9CgoJCQlpZiAoIGNvbmRpdGlvbiApIHsKCQkJCS8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZSB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLAoJCQkJLy8gcmVtb3ZlIGl0LgoJCQkJLy8gU2luY2UgdGhlcmUgYXJlIG5vIG90aGVyIGhvb2tzIGZvciBtYXJnaW5SaWdodCwgcmVtb3ZlIHRoZSB3aG9sZSBvYmplY3QuCgkJCQlkZWxldGUgdGhpcy5nZXQ7CgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLgoKCQkJcmV0dXJuICh0aGlzLmdldCA9IGhvb2tGbikuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCX0KCX07Cn0KCgooZnVuY3Rpb24oKSB7Cgl2YXIgYSwgcmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsLCBib3hTaXppbmdWYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLAoJCXBpeGVsUG9zaXRpb25WYWwsIHJlbGlhYmxlTWFyZ2luUmlnaHRWYWwsCgkJZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKSwKCQljb250YWluZXJTdHlsZXMgPSAiYm9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0Oi05OTk5cHgiLAoJCWRpdlJlc2V0ID0KCQkJIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDsiICsKCQkJImRpc3BsYXk6YmxvY2s7cGFkZGluZzowO21hcmdpbjowO2JvcmRlcjowIjsKCgkvLyBTZXR1cAoJZGl2LmlubmVySFRNTCA9ICIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz4iOwoJYSA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggImEiIClbIDAgXTsKCglhLnN0eWxlLmNzc1RleHQgPSAiZmxvYXQ6bGVmdDtvcGFjaXR5Oi41IjsKCgkvLyBNYWtlIHN1cmUgdGhhdCBlbGVtZW50IG9wYWNpdHkgZXhpc3RzCgkvLyAoSUUgdXNlcyBmaWx0ZXIgaW5zdGVhZCkKCS8vIFVzZSBhIHJlZ2V4IHRvIHdvcmsgYXJvdW5kIGEgV2ViS2l0IGlzc3VlLiBTZWUgIzUxNDUKCXN1cHBvcnQub3BhY2l0eSA9IC9eMC41Ly50ZXN0KCBhLnN0eWxlLm9wYWNpdHkgKTsKCgkvLyBWZXJpZnkgc3R5bGUgZmxvYXQgZXhpc3RlbmNlCgkvLyAoSUUgdXNlcyBzdHlsZUZsb2F0IGluc3RlYWQgb2YgY3NzRmxvYXQpCglzdXBwb3J0LmNzc0Zsb2F0ID0gISFhLnN0eWxlLmNzc0Zsb2F0OwoKCWRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9ICJjb250ZW50LWJveCI7CglkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSAiIjsKCXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSAiY29udGVudC1ib3giOwoKCS8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUuCglhID0gZGl2ID0gbnVsbDsKCglqUXVlcnkuZXh0ZW5kKHN1cHBvcnQsIHsKCQlyZWxpYWJsZUhpZGRlbk9mZnNldHM6IGZ1bmN0aW9uKCkgewoJCQlpZiAoIHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCAhPSBudWxsICkgewoJCQkJcmV0dXJuIHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbDsKCQkJfQoKCQkJdmFyIGNvbnRhaW5lciwgdGRzLCBpc1N1cHBvcnRlZCwKCQkJCWRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICksCgkJCQlib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJib2R5IiApWyAwIF07CgoJCQlpZiAoICFib2R5ICkgewoJCQkJLy8gUmV0dXJuIGZvciBmcmFtZXNldCBkb2NzIHRoYXQgZG9uJ3QgaGF2ZSBhIGJvZHkKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gU2V0dXAKCQkJZGl2LnNldEF0dHJpYnV0ZSggImNsYXNzTmFtZSIsICJ0IiApOwoJCQlkaXYuaW5uZXJIVE1MID0gIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPiI7CgoJCQljb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApOwoJCQljb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IGNvbnRhaW5lclN0eWxlczsKCgkJCWJvZHkuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTsKCgkJCS8vIFN1cHBvcnQ6IElFOAoJCQkvLyBDaGVjayBpZiB0YWJsZSBjZWxscyBzdGlsbCBoYXZlIG9mZnNldFdpZHRoL0hlaWdodCB3aGVuIHRoZXkgYXJlIHNldAoJCQkvLyB0byBkaXNwbGF5Om5vbmUgYW5kIHRoZXJlIGFyZSBzdGlsbCBvdGhlciB2aXNpYmxlIHRhYmxlIGNlbGxzIGluIGEKCQkJLy8gdGFibGUgcm93OyBpZiBzbywgb2Zmc2V0V2lkdGgvSGVpZ2h0IGFyZSBub3QgcmVsaWFibGUgZm9yIHVzZSB3aGVuCgkJCS8vIGRldGVybWluaW5nIGlmIGFuIGVsZW1lbnQgaGFzIGJlZW4gaGlkZGVuIGRpcmVjdGx5IHVzaW5nCgkJCS8vIGRpc3BsYXk6bm9uZSAoaXQgaXMgc3RpbGwgc2FmZSB0byB1c2Ugb2Zmc2V0cyBpZiBhIHBhcmVudCBlbGVtZW50IGlzCgkJCS8vIGhpZGRlbjsgZG9uIHNhZmV0eSBnb2dnbGVzIGFuZCBzZWUgYnVnICM0NTEyIGZvciBtb3JlIGluZm9ybWF0aW9uKS4KCQkJZGl2LmlubmVySFRNTCA9ICI8dGFibGU+PHRyPjx0ZD48L3RkPjx0ZD50PC90ZD48L3RyPjwvdGFibGU+IjsKCQkJdGRzID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAidGQiICk7CgkJCXRkc1sgMCBdLnN0eWxlLmNzc1RleHQgPSAicGFkZGluZzowO21hcmdpbjowO2JvcmRlcjowO2Rpc3BsYXk6bm9uZSI7CgkJCWlzU3VwcG9ydGVkID0gKCB0ZHNbIDAgXS5vZmZzZXRIZWlnaHQgPT09IDAgKTsKCgkJCXRkc1sgMCBdLnN0eWxlLmRpc3BsYXkgPSAiIjsKCQkJdGRzWyAxIF0uc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCgkJCS8vIFN1cHBvcnQ6IElFOAoJCQkvLyBDaGVjayBpZiBlbXB0eSB0YWJsZSBjZWxscyBzdGlsbCBoYXZlIG9mZnNldFdpZHRoL0hlaWdodAoJCQlyZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgPSBpc1N1cHBvcnRlZCAmJiAoIHRkc1sgMCBdLm9mZnNldEhlaWdodCA9PT0gMCApOwoKCQkJYm9keS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7CgoJCQkvLyBOdWxsIGVsZW1lbnRzIHRvIGF2b2lkIGxlYWtzIGluIElFLgoJCQlkaXYgPSBib2R5ID0gbnVsbDsKCgkJCXJldHVybiByZWxpYWJsZUhpZGRlbk9mZnNldHNWYWw7CgkJfSwKCgkJYm94U2l6aW5nOiBmdW5jdGlvbigpIHsKCQkJaWYgKCBib3hTaXppbmdWYWwgPT0gbnVsbCApIHsKCQkJCWNvbXB1dGVTdHlsZVRlc3RzKCk7CgkJCX0KCQkJcmV0dXJuIGJveFNpemluZ1ZhbDsKCQl9LAoKCQlib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7CgkJCWlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHsKCQkJCWNvbXB1dGVTdHlsZVRlc3RzKCk7CgkJCX0KCQkJcmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsOwoJCX0sCgoJCXBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkgewoJCQlpZiAoIHBpeGVsUG9zaXRpb25WYWwgPT0gbnVsbCApIHsKCQkJCWNvbXB1dGVTdHlsZVRlc3RzKCk7CgkJCX0KCQkJcmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7CgkJfSwKCgkJcmVsaWFibGVNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7CgkJCXZhciBib2R5LCBjb250YWluZXIsIGRpdiwgbWFyZ2luRGl2OwoKCQkJLy8gVXNlIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlIGJlY2F1c2UganNkb20gb24gbm9kZS5qcyB3aWxsIGJyZWFrIHdpdGhvdXQgaXQuCgkJCWlmICggcmVsaWFibGVNYXJnaW5SaWdodFZhbCA9PSBudWxsICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICkgewoJCQkJYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAiYm9keSIgKVsgMCBdOwoJCQkJaWYgKCAhYm9keSApIHsKCQkJCQkvLyBUZXN0IGZpcmVkIHRvbyBlYXJseSBvciBpbiBhbiB1bnN1cHBvcnRlZCBlbnZpcm9ubWVudCwgZXhpdC4KCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKTsKCQkJCWRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7CgkJCQljb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IGNvbnRhaW5lclN0eWxlczsKCgkJCQlib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7CgoJCQkJLy8gQ2hlY2sgaWYgZGl2IHdpdGggZXhwbGljaXQgd2lkdGggYW5kIG5vIG1hcmdpbi1yaWdodCBpbmNvcnJlY3RseQoJCQkJLy8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpCgkJCQkvLyBGYWlscyBpbiBXZWJLaXQgYmVmb3JlIEZlYiAyMDExIG5pZ2h0bGllcwoJCQkJLy8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0CgkJCQltYXJnaW5EaXYgPSBkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICkgKTsKCQkJCW1hcmdpbkRpdi5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPSBkaXZSZXNldDsKCQkJCW1hcmdpbkRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IG1hcmdpbkRpdi5zdHlsZS53aWR0aCA9ICIwIjsKCQkJCWRpdi5zdHlsZS53aWR0aCA9ICIxcHgiOwoKCQkJCXJlbGlhYmxlTWFyZ2luUmlnaHRWYWwgPQoJCQkJCSFwYXJzZUZsb2F0KCAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBtYXJnaW5EaXYsIG51bGwgKSB8fCB7fSApLm1hcmdpblJpZ2h0ICk7CgoJCQkJYm9keS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7CgkJCX0KCgkJCXJldHVybiByZWxpYWJsZU1hcmdpblJpZ2h0VmFsOwoJCX0KCX0pOwoKCWZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkgewoJCXZhciBjb250YWluZXIsIGRpdiwKCQkJYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAiYm9keSIgKVsgMCBdOwoKCQlpZiAoICFib2R5ICkgewoJCQkvLyBUZXN0IGZpcmVkIHRvbyBlYXJseSBvciBpbiBhbiB1bnN1cHBvcnRlZCBlbnZpcm9ubWVudCwgZXhpdC4KCQkJcmV0dXJuOwoJCX0KCgkJY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKTsKCQlkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApOwoJCWNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gY29udGFpbmVyU3R5bGVzOwoKCQlib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7CgoJCWRpdi5zdHlsZS5jc3NUZXh0ID0KCQkJIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDsiICsKCQkJCSJwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MXB4O2JvcmRlcjoxcHg7d2lkdGg6NHB4OyIgKwoJCQkJIm1hcmdpbi10b3A6MSU7dG9wOjElIjsKCgkJLy8gV29ya2Fyb3VuZCBmYWlsaW5nIGJveFNpemluZyB0ZXN0IGR1ZSB0byBvZmZzZXRXaWR0aCByZXR1cm5pbmcgd3JvbmcgdmFsdWUKCQkvLyB3aXRoIHNvbWUgbm9uLTEgdmFsdWVzIG9mIGJvZHkgem9vbSwgdGlja2V0ICMxMzU0MwoJCWpRdWVyeS5zd2FwKCBib2R5LCBib2R5LnN0eWxlLnpvb20gIT0gbnVsbCA/IHsgem9vbTogMSB9IDoge30sIGZ1bmN0aW9uKCkgewoJCQlib3hTaXppbmdWYWwgPSBkaXYub2Zmc2V0V2lkdGggPT09IDQ7CgkJfSk7CgoJCS8vIFdpbGwgYmUgY2hhbmdlZCBsYXRlciBpZiBuZWVkZWQuCgkJYm94U2l6aW5nUmVsaWFibGVWYWwgPSB0cnVlOwoJCXBpeGVsUG9zaXRpb25WYWwgPSBmYWxzZTsKCQlyZWxpYWJsZU1hcmdpblJpZ2h0VmFsID0gdHJ1ZTsKCgkJLy8gVXNlIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlIGJlY2F1c2UganNkb20gb24gbm9kZS5qcyB3aWxsIGJyZWFrIHdpdGhvdXQgaXQuCgkJaWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHsKCQkJcGl4ZWxQb3NpdGlvblZhbCA9ICggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiwgbnVsbCApIHx8IHt9ICkudG9wICE9PSAiMSUiOwoJCQlib3hTaXppbmdSZWxpYWJsZVZhbCA9CgkJCQkoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYsIG51bGwgKSB8fCB7IHdpZHRoOiAiNHB4IiB9ICkud2lkdGggPT09ICI0cHgiOwoJCX0KCgkJYm9keS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7CgoJCS8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUuCgkJZGl2ID0gYm9keSA9IG51bGw7Cgl9Cgp9KSgpOwoKCi8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMuCmpRdWVyeS5zd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkgewoJdmFyIHJldCwgbmFtZSwKCQlvbGQgPSB7fTsKCgkvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXMKCWZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHsKCQlvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTsKCQllbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07Cgl9CgoJcmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTsKCgkvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXMKCWZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHsKCQllbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTsKCX0KCglyZXR1cm4gcmV0Owp9OwoKCnZhcgoJCXJhbHBoYSA9IC9hbHBoYVwoW14pXSpcKS9pLAoJcm9wYWNpdHkgPSAvb3BhY2l0eVxzKj1ccyooW14pXSopLywKCgkvLyBzd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlIGV4Y2VwdCAidGFibGUiLCAidGFibGUtY2VsbCIsIG9yICJ0YWJsZS1jYXB0aW9uIgoJLy8gc2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5CglyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sCglybnVtc3BsaXQgPSBuZXcgUmVnRXhwKCAiXigiICsgcG51bSArICIpKC4qKSQiLCAiaSIgKSwKCXJyZWxOdW0gPSBuZXcgUmVnRXhwKCAiXihbKy1dKT0oIiArIHBudW0gKyAiKSIsICJpIiApLAoKCWNzc1Nob3cgPSB7IHBvc2l0aW9uOiAiYWJzb2x1dGUiLCB2aXNpYmlsaXR5OiAiaGlkZGVuIiwgZGlzcGxheTogImJsb2NrIiB9LAoJY3NzTm9ybWFsVHJhbnNmb3JtID0gewoJCWxldHRlclNwYWNpbmc6IDAsCgkJZm9udFdlaWdodDogNDAwCgl9LAoKCWNzc1ByZWZpeGVzID0gWyAiV2Via2l0IiwgIk8iLCAiTW96IiwgIm1zIiBdOwoKCi8vIHJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkKZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBuYW1lICkgewoKCS8vIHNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkCglpZiAoIG5hbWUgaW4gc3R5bGUgKSB7CgkJcmV0dXJuIG5hbWU7Cgl9CgoJLy8gY2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lcwoJdmFyIGNhcE5hbWUgPSBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSwKCQlvcmlnTmFtZSA9IG5hbWUsCgkJaSA9IGNzc1ByZWZpeGVzLmxlbmd0aDsKCgl3aGlsZSAoIGktLSApIHsKCQluYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7CgkJaWYgKCBuYW1lIGluIHN0eWxlICkgewoJCQlyZXR1cm4gbmFtZTsKCQl9Cgl9CgoJcmV0dXJuIG9yaWdOYW1lOwp9CgpmdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7Cgl2YXIgZGlzcGxheSwgZWxlbSwgaGlkZGVuLAoJCXZhbHVlcyA9IFtdLAoJCWluZGV4ID0gMCwKCQlsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7CgoJZm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHsKCQllbGVtID0gZWxlbWVudHNbIGluZGV4IF07CgkJaWYgKCAhZWxlbS5zdHlsZSApIHsKCQkJY29udGludWU7CgkJfQoKCQl2YWx1ZXNbIGluZGV4IF0gPSBqUXVlcnkuX2RhdGEoIGVsZW0sICJvbGRkaXNwbGF5IiApOwoJCWRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7CgkJaWYgKCBzaG93ICkgewoJCQkvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzCgkJCS8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3QKCQkJaWYgKCAhdmFsdWVzWyBpbmRleCBdICYmIGRpc3BsYXkgPT09ICJub25lIiApIHsKCQkJCWVsZW0uc3R5bGUuZGlzcGxheSA9ICIiOwoJCQl9CgoJCQkvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lCgkJCS8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzCgkJCS8vIGZvciBzdWNoIGFuIGVsZW1lbnQKCQkJaWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09ICIiICYmIGlzSGlkZGVuKCBlbGVtICkgKSB7CgkJCQl2YWx1ZXNbIGluZGV4IF0gPSBqUXVlcnkuX2RhdGEoIGVsZW0sICJvbGRkaXNwbGF5IiwgZGVmYXVsdERpc3BsYXkoZWxlbS5ub2RlTmFtZSkgKTsKCQkJfQoJCX0gZWxzZSB7CgoJCQlpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7CgkJCQloaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApOwoKCQkJCWlmICggZGlzcGxheSAmJiBkaXNwbGF5ICE9PSAibm9uZSIgfHwgIWhpZGRlbiApIHsKCQkJCQlqUXVlcnkuX2RhdGEoIGVsZW0sICJvbGRkaXNwbGF5IiwgaGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sICJkaXNwbGF5IiApICk7CgkJCQl9CgkJCX0KCQl9Cgl9CgoJLy8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AKCS8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3cKCWZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7CgkJZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdOwoJCWlmICggIWVsZW0uc3R5bGUgKSB7CgkJCWNvbnRpbnVlOwoJCX0KCQlpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gIm5vbmUiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gIiIgKSB7CgkJCWVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgIiIgOiAibm9uZSI7CgkJfQoJfQoKCXJldHVybiBlbGVtZW50czsKfQoKZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHsKCXZhciBtYXRjaGVzID0gcm51bXNwbGl0LmV4ZWMoIHZhbHVlICk7CglyZXR1cm4gbWF0Y2hlcyA/CgkJLy8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgInN1YnRyYWN0IiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzCgkJTWF0aC5tYXgoIDAsIG1hdGNoZXNbIDEgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDIgXSB8fCAicHgiICkgOgoJCXZhbHVlOwp9CgpmdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7Cgl2YXIgaSA9IGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gImJvcmRlciIgOiAiY29udGVudCIgKSA/CgkJLy8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uCgkJNCA6CgkJLy8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllcwoJCW5hbWUgPT09ICJ3aWR0aCIgPyAxIDogMCwKCgkJdmFsID0gMDsKCglmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7CgkJLy8gYm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdAoJCWlmICggZXh0cmEgPT09ICJtYXJnaW4iICkgewoJCQl2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7CgkJfQoKCQlpZiAoIGlzQm9yZGVyQm94ICkgewoJCQkvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnQKCQkJaWYgKCBleHRyYSA9PT0gImNvbnRlbnQiICkgewoJCQkJdmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sICJwYWRkaW5nIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTsKCQkJfQoKCQkJLy8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXIKCQkJaWYgKCBleHRyYSAhPT0gIm1hcmdpbiIgKSB7CgkJCQl2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgImJvcmRlciIgKyBjc3NFeHBhbmRbIGkgXSArICJXaWR0aCIsIHRydWUsIHN0eWxlcyApOwoJCQl9CgkJfSBlbHNlIHsKCQkJLy8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmcKCQkJdmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sICJwYWRkaW5nIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTsKCgkJCS8vIGF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXIKCQkJaWYgKCBleHRyYSAhPT0gInBhZGRpbmciICkgewoJCQkJdmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sICJib3JkZXIiICsgY3NzRXhwYW5kWyBpIF0gKyAiV2lkdGgiLCB0cnVlLCBzdHlsZXMgKTsKCQkJfQoJCX0KCX0KCglyZXR1cm4gdmFsOwp9CgpmdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHsKCgkvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZQoJdmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLAoJCXZhbCA9IG5hbWUgPT09ICJ3aWR0aCIgPyBlbGVtLm9mZnNldFdpZHRoIDogZWxlbS5vZmZzZXRIZWlnaHQsCgkJc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksCgkJaXNCb3JkZXJCb3ggPSBzdXBwb3J0LmJveFNpemluZygpICYmIGpRdWVyeS5jc3MoIGVsZW0sICJib3hTaXppbmciLCBmYWxzZSwgc3R5bGVzICkgPT09ICJib3JkZXItYm94IjsKCgkvLyBzb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWQKCS8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NQoJLy8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4CglpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkgewoJCS8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeQoJCXZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7CgkJaWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkgewoJCQl2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07CgkJfQoKCQkvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLgoJCWlmICggcm51bW5vbnB4LnRlc3QodmFsKSApIHsKCQkJcmV0dXJuIHZhbDsKCQl9CgoJCS8vIHdlIG5lZWQgdGhlIGNoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzCgkJLy8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZQoJCXZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJiAoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApOwoKCQkvLyBOb3JtYWxpemUgIiIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYQoJCXZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7Cgl9CgoJLy8gdXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXMKCXJldHVybiAoIHZhbCArCgkJYXVnbWVudFdpZHRoT3JIZWlnaHQoCgkJCWVsZW0sCgkJCW5hbWUsCgkJCWV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyAiYm9yZGVyIiA6ICJjb250ZW50IiApLAoJCQl2YWx1ZUlzQm9yZGVyQm94LAoJCQlzdHlsZXMKCQkpCgkpICsgInB4IjsKfQoKalF1ZXJ5LmV4dGVuZCh7CgkvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHQKCS8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eQoJY3NzSG9va3M6IHsKCQlvcGFjaXR5OiB7CgkJCWdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkgewoJCQkJaWYgKCBjb21wdXRlZCApIHsKCQkJCQkvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eQoJCQkJCXZhciByZXQgPSBjdXJDU1MoIGVsZW0sICJvcGFjaXR5IiApOwoJCQkJCXJldHVybiByZXQgPT09ICIiID8gIjEiIDogcmV0OwoJCQkJfQoJCQl9CgkJfQoJfSwKCgkvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCAicHgiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXMKCWNzc051bWJlcjogewoJCSJjb2x1bW5Db3VudCI6IHRydWUsCgkJImZpbGxPcGFjaXR5IjogdHJ1ZSwKCQkiZm9udFdlaWdodCI6IHRydWUsCgkJImxpbmVIZWlnaHQiOiB0cnVlLAoJCSJvcGFjaXR5IjogdHJ1ZSwKCQkib3JkZXIiOiB0cnVlLAoJCSJvcnBoYW5zIjogdHJ1ZSwKCQkid2lkb3dzIjogdHJ1ZSwKCQkiekluZGV4IjogdHJ1ZSwKCQkiem9vbSI6IHRydWUKCX0sCgoJLy8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZQoJLy8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZQoJY3NzUHJvcHM6IHsKCQkvLyBub3JtYWxpemUgZmxvYXQgY3NzIHByb3BlcnR5CgkJImZsb2F0Ijogc3VwcG9ydC5jc3NGbG9hdCA/ICJjc3NGbG9hdCIgOiAic3R5bGVGbG9hdCIKCX0sCgoJLy8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGUKCXN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkgewoJCS8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2RlcwoJCWlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUKCQl2YXIgcmV0LCB0eXBlLCBob29rcywKCQkJb3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksCgkJCXN0eWxlID0gZWxlbS5zdHlsZTsKCgkJbmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBzdHlsZSwgb3JpZ05hbWUgKSApOwoKCQkvLyBnZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uCgkJLy8gZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgdmVyc2lvbgoJCWhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdOwoKCQkvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWUKCQlpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgkJCXR5cGUgPSB0eXBlb2YgdmFsdWU7CgoJCQkvLyBjb252ZXJ0IHJlbGF0aXZlIG51bWJlciBzdHJpbmdzICgrPSBvciAtPSkgdG8gcmVsYXRpdmUgbnVtYmVycy4gIzczNDUKCQkJaWYgKCB0eXBlID09PSAic3RyaW5nIiAmJiAocmV0ID0gcnJlbE51bS5leGVjKCB2YWx1ZSApKSApIHsKCQkJCXZhbHVlID0gKCByZXRbMV0gKyAxICkgKiByZXRbMl0gKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTsKCQkJCS8vIEZpeGVzIGJ1ZyAjOTIzNwoJCQkJdHlwZSA9ICJudW1iZXIiOwoJCQl9CgoJCQkvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQuIFNlZTogIzcxMTYKCQkJaWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkICdweCcgdG8gdGhlIChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpCgkJCWlmICggdHlwZSA9PT0gIm51bWJlciIgJiYgIWpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gKSB7CgkJCQl2YWx1ZSArPSAicHgiOwoJCQl9CgoJCQkvLyBGaXhlcyAjODkwOCwgaXQgY2FuIGJlIGRvbmUgbW9yZSBjb3JyZWN0bHkgYnkgc3BlY2lmaW5nIHNldHRlcnMgaW4gY3NzSG9va3MsCgkJCS8vIGJ1dCBpdCB3b3VsZCBtZWFuIHRvIGRlZmluZSBlaWdodCAoZm9yIGV2ZXJ5IHByb2JsZW1hdGljIHByb3BlcnR5KSBpZGVudGljYWwgZnVuY3Rpb25zCgkJCWlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSAiIiAmJiBuYW1lLmluZGV4T2YoImJhY2tncm91bmQiKSA9PT0gMCApIHsKCQkJCXN0eWxlWyBuYW1lIF0gPSAiaW5oZXJpdCI7CgkJCX0KCgkJCS8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZQoJCQlpZiAoICFob29rcyB8fCAhKCJzZXQiIGluIGhvb2tzKSB8fCAodmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApKSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCS8vIFN1cHBvcnQ6IElFCgkJCQkvLyBTd2FsbG93IGVycm9ycyBmcm9tICdpbnZhbGlkJyBDU1MgdmFsdWVzICgjNTUwOSkKCQkJCXRyeSB7CgkJCQkJLy8gU3VwcG9ydDogQ2hyb21lLCBTYWZhcmkKCQkJCQkvLyBTZXR0aW5nIHN0eWxlIHRvIGJsYW5rIHN0cmluZyByZXF1aXJlZCB0byBkZWxldGUgInN0eWxlOiB4ICFpbXBvcnRhbnQ7IgoJCQkJCXN0eWxlWyBuYW1lIF0gPSAiIjsKCQkJCQlzdHlsZVsgbmFtZSBdID0gdmFsdWU7CgkJCQl9IGNhdGNoKGUpIHt9CgkJCX0KCgkJfSBlbHNlIHsKCQkJLy8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlCgkJCWlmICggaG9va3MgJiYgImdldCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7CgkJCQlyZXR1cm4gcmV0OwoJCQl9CgoJCQkvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdAoJCQlyZXR1cm4gc3R5bGVbIG5hbWUgXTsKCQl9Cgl9LAoKCWNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7CgkJdmFyIG51bSwgdmFsLCBob29rcywKCQkJb3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7CgoJCS8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZQoJCW5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggZWxlbS5zdHlsZSwgb3JpZ05hbWUgKSApOwoKCQkvLyBnZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uCgkJLy8gZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgdmVyc2lvbgoJCWhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdOwoKCQkvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZQoJCWlmICggaG9va3MgJiYgImdldCIgaW4gaG9va3MgKSB7CgkJCXZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTsKCQl9CgoJCS8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0CgkJaWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHsKCQkJdmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTsKCQl9CgoJCS8vY29udmVydCAibm9ybWFsIiB0byBjb21wdXRlZCB2YWx1ZQoJCWlmICggdmFsID09PSAibm9ybWFsIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHsKCQkJdmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07CgkJfQoKCQkvLyBSZXR1cm4sIGNvbnZlcnRpbmcgdG8gbnVtYmVyIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljCgkJaWYgKCBleHRyYSA9PT0gIiIgfHwgZXh0cmEgKSB7CgkJCW51bSA9IHBhcnNlRmxvYXQoIHZhbCApOwoJCQlyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgalF1ZXJ5LmlzTnVtZXJpYyggbnVtICkgPyBudW0gfHwgMCA6IHZhbDsKCQl9CgkJcmV0dXJuIHZhbDsKCX0KfSk7CgpqUXVlcnkuZWFjaChbICJoZWlnaHQiLCAid2lkdGgiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkgewoJalF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7CgkJZ2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkgewoJCQlpZiAoIGNvbXB1dGVkICkgewoJCQkJLy8gY2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtCgkJCQkvLyBob3dldmVyLCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0IGZyb20gdGhpcwoJCQkJcmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPT09IDAgJiYgcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sICJkaXNwbGF5IiApICkgPwoJCQkJCWpRdWVyeS5zd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHsKCQkJCQkJcmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7CgkJCQkJfSkgOgoJCQkJCWdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7CgkJCX0KCQl9LAoKCQlzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7CgkJCXZhciBzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKTsKCQkJcmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgZXh0cmEgPwoJCQkJYXVnbWVudFdpZHRoT3JIZWlnaHQoCgkJCQkJZWxlbSwKCQkJCQluYW1lLAoJCQkJCWV4dHJhLAoJCQkJCXN1cHBvcnQuYm94U2l6aW5nKCkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgImJveFNpemluZyIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gImJvcmRlci1ib3giLAoJCQkJCXN0eWxlcwoJCQkJKSA6IDAKCQkJKTsKCQl9Cgl9Owp9KTsKCmlmICggIXN1cHBvcnQub3BhY2l0eSApIHsKCWpRdWVyeS5jc3NIb29rcy5vcGFjaXR5ID0gewoJCWdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkgewoJCQkvLyBJRSB1c2VzIGZpbHRlcnMgZm9yIG9wYWNpdHkKCQkJcmV0dXJuIHJvcGFjaXR5LnRlc3QoIChjb21wdXRlZCAmJiBlbGVtLmN1cnJlbnRTdHlsZSA/IGVsZW0uY3VycmVudFN0eWxlLmZpbHRlciA6IGVsZW0uc3R5bGUuZmlsdGVyKSB8fCAiIiApID8KCQkJCSggMC4wMSAqIHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApICkgKyAiIiA6CgkJCQljb21wdXRlZCA/ICIxIiA6ICIiOwoJCX0sCgoJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewoJCQl2YXIgc3R5bGUgPSBlbGVtLnN0eWxlLAoJCQkJY3VycmVudFN0eWxlID0gZWxlbS5jdXJyZW50U3R5bGUsCgkJCQlvcGFjaXR5ID0galF1ZXJ5LmlzTnVtZXJpYyggdmFsdWUgKSA/ICJhbHBoYShvcGFjaXR5PSIgKyB2YWx1ZSAqIDEwMCArICIpIiA6ICIiLAoJCQkJZmlsdGVyID0gY3VycmVudFN0eWxlICYmIGN1cnJlbnRTdHlsZS5maWx0ZXIgfHwgc3R5bGUuZmlsdGVyIHx8ICIiOwoKCQkJLy8gSUUgaGFzIHRyb3VibGUgd2l0aCBvcGFjaXR5IGlmIGl0IGRvZXMgbm90IGhhdmUgbGF5b3V0CgkJCS8vIEZvcmNlIGl0IGJ5IHNldHRpbmcgdGhlIHpvb20gbGV2ZWwKCQkJc3R5bGUuem9vbSA9IDE7CgoJCQkvLyBpZiBzZXR0aW5nIG9wYWNpdHkgdG8gMSwgYW5kIG5vIG90aGVyIGZpbHRlcnMgZXhpc3QgLSBhdHRlbXB0IHRvIHJlbW92ZSBmaWx0ZXIgYXR0cmlidXRlICM2NjUyCgkJCS8vIGlmIHZhbHVlID09PSAiIiwgdGhlbiByZW1vdmUgaW5saW5lIG9wYWNpdHkgIzEyNjg1CgkJCWlmICggKCB2YWx1ZSA+PSAxIHx8IHZhbHVlID09PSAiIiApICYmCgkJCQkJalF1ZXJ5LnRyaW0oIGZpbHRlci5yZXBsYWNlKCByYWxwaGEsICIiICkgKSA9PT0gIiIgJiYKCQkJCQlzdHlsZS5yZW1vdmVBdHRyaWJ1dGUgKSB7CgoJCQkJLy8gU2V0dGluZyBzdHlsZS5maWx0ZXIgdG8gbnVsbCwgIiIgJiAiICIgc3RpbGwgbGVhdmUgImZpbHRlcjoiIGluIHRoZSBjc3NUZXh0CgkJCQkvLyBpZiAiZmlsdGVyOiIgaXMgcHJlc2VudCBhdCBhbGwsIGNsZWFyVHlwZSBpcyBkaXNhYmxlZCwgd2Ugd2FudCB0byBhdm9pZCB0aGlzCgkJCQkvLyBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUgaXMgSUUgT25seSwgYnV0IHNvIGFwcGFyZW50bHkgaXMgdGhpcyBjb2RlIHBhdGguLi4KCQkJCXN0eWxlLnJlbW92ZUF0dHJpYnV0ZSggImZpbHRlciIgKTsKCgkJCQkvLyBpZiB0aGVyZSBpcyBubyBmaWx0ZXIgc3R5bGUgYXBwbGllZCBpbiBhIGNzcyBydWxlIG9yIHVuc2V0IGlubGluZSBvcGFjaXR5LCB3ZSBhcmUgZG9uZQoJCQkJaWYgKCB2YWx1ZSA9PT0gIiIgfHwgY3VycmVudFN0eWxlICYmICFjdXJyZW50U3R5bGUuZmlsdGVyICkgewoJCQkJCXJldHVybjsKCQkJCX0KCQkJfQoKCQkJLy8gb3RoZXJ3aXNlLCBzZXQgbmV3IGZpbHRlciB2YWx1ZXMKCQkJc3R5bGUuZmlsdGVyID0gcmFscGhhLnRlc3QoIGZpbHRlciApID8KCQkJCWZpbHRlci5yZXBsYWNlKCByYWxwaGEsIG9wYWNpdHkgKSA6CgkJCQlmaWx0ZXIgKyAiICIgKyBvcGFjaXR5OwoJCX0KCX07Cn0KCmpRdWVyeS5jc3NIb29rcy5tYXJnaW5SaWdodCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpblJpZ2h0LAoJZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkgewoJCWlmICggY29tcHV0ZWQgKSB7CgkJCS8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodAoJCQkvLyBXb3JrIGFyb3VuZCBieSB0ZW1wb3JhcmlseSBzZXR0aW5nIGVsZW1lbnQgZGlzcGxheSB0byBpbmxpbmUtYmxvY2sKCQkJcmV0dXJuIGpRdWVyeS5zd2FwKCBlbGVtLCB7ICJkaXNwbGF5IjogImlubGluZS1ibG9jayIgfSwKCQkJCWN1ckNTUywgWyBlbGVtLCAibWFyZ2luUmlnaHQiIF0gKTsKCQl9Cgl9Cik7CgovLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzCmpRdWVyeS5lYWNoKHsKCW1hcmdpbjogIiIsCglwYWRkaW5nOiAiIiwKCWJvcmRlcjogIldpZHRoIgp9LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7CglqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0gewoJCWV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkgewoJCQl2YXIgaSA9IDAsCgkJCQlleHBhbmRlZCA9IHt9LAoKCQkJCS8vIGFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZwoJCQkJcGFydHMgPSB0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciID8gdmFsdWUuc3BsaXQoIiAiKSA6IFsgdmFsdWUgXTsKCgkJCWZvciAoIDsgaSA8IDQ7IGkrKyApIHsKCQkJCWV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID0KCQkJCQlwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07CgkJCX0KCgkJCXJldHVybiBleHBhbmRlZDsKCQl9Cgl9OwoKCWlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7CgkJalF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjsKCX0KfSk7CgpqUXVlcnkuZm4uZXh0ZW5kKHsKCWNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkgewoJCXJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHsKCQkJdmFyIHN0eWxlcywgbGVuLAoJCQkJbWFwID0ge30sCgkJCQlpID0gMDsKCgkJCWlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHsKCQkJCXN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApOwoJCQkJbGVuID0gbmFtZS5sZW5ndGg7CgoJCQkJZm9yICggOyBpIDwgbGVuOyBpKysgKSB7CgkJCQkJbWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApOwoJCQkJfQoKCQkJCXJldHVybiBtYXA7CgkJCX0KCgkJCXJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8KCQkJCWpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6CgkJCQlqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7CgkJfSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7Cgl9LAoJc2hvdzogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7Cgl9LAoJaGlkZTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHNob3dIaWRlKCB0aGlzICk7Cgl9LAoJdG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7CgkJaWYgKCB0eXBlb2Ygc3RhdGUgPT09ICJib29sZWFuIiApIHsKCQkJcmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTsKCQl9CgoJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCWlmICggaXNIaWRkZW4oIHRoaXMgKSApIHsKCQkJCWpRdWVyeSggdGhpcyApLnNob3coKTsKCQkJfSBlbHNlIHsKCQkJCWpRdWVyeSggdGhpcyApLmhpZGUoKTsKCQkJfQoJCX0pOwoJfQp9KTsKCgpmdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7CglyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApOwp9CmpRdWVyeS5Ud2VlbiA9IFR3ZWVuOwoKVHdlZW4ucHJvdG90eXBlID0gewoJY29uc3RydWN0b3I6IFR3ZWVuLAoJaW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkgewoJCXRoaXMuZWxlbSA9IGVsZW07CgkJdGhpcy5wcm9wID0gcHJvcDsKCQl0aGlzLmVhc2luZyA9IGVhc2luZyB8fCAic3dpbmciOwoJCXRoaXMub3B0aW9ucyA9IG9wdGlvbnM7CgkJdGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTsKCQl0aGlzLmVuZCA9IGVuZDsKCQl0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gIiIgOiAicHgiICk7Cgl9LAoJY3VyOiBmdW5jdGlvbigpIHsKCQl2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdOwoKCQlyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID8KCQkJaG9va3MuZ2V0KCB0aGlzICkgOgoJCQlUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7Cgl9LAoJcnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHsKCQl2YXIgZWFzZWQsCgkJCWhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTsKCgkJaWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7CgkJCXRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKAoJCQkJcGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uCgkJCSk7CgkJfSBlbHNlIHsKCQkJdGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7CgkJfQoJCXRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDsKCgkJaWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHsKCQkJdGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApOwoJCX0KCgkJaWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7CgkJCWhvb2tzLnNldCggdGhpcyApOwoJCX0gZWxzZSB7CgkJCVR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTsKCQl9CgkJcmV0dXJuIHRoaXM7Cgl9Cn07CgpUd2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7CgpUd2Vlbi5wcm9wSG9va3MgPSB7CglfZGVmYXVsdDogewoJCWdldDogZnVuY3Rpb24oIHR3ZWVuICkgewoJCQl2YXIgcmVzdWx0OwoKCQkJaWYgKCB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJgoJCQkJKCF0d2Vlbi5lbGVtLnN0eWxlIHx8IHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsKSApIHsKCQkJCXJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07CgkJCX0KCgkJCS8vIHBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseQoJCQkvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzCgkJCS8vIHNvLCBzaW1wbGUgdmFsdWVzIHN1Y2ggYXMgIjEwcHgiIGFyZSBwYXJzZWQgdG8gRmxvYXQuCgkJCS8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgInJvdGF0ZSgxcmFkKSIgYXJlIHJldHVybmVkIGFzIGlzLgoJCQlyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCAiIiApOwoJCQkvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kICJhdXRvIiBhcmUgY29udmVydGVkIHRvIDAuCgkJCXJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gImF1dG8iID8gMCA6IHJlc3VsdDsKCQl9LAoJCXNldDogZnVuY3Rpb24oIHR3ZWVuICkgewoJCQkvLyB1c2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdCAtIHVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZSAtIHVzZSAuc3R5bGUgaWYgaXRzCgkJCS8vIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlCgkJCWlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHsKCQkJCWpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7CgkJCX0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0uc3R5bGUgJiYgKCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHwgalF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHsKCQkJCWpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApOwoJCQl9IGVsc2UgewoJCQkJdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93OwoJCQl9CgkJfQoJfQp9OwoKLy8gU3VwcG9ydDogSUUgPD05Ci8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2RlcwoKVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0gewoJc2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7CgkJaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHsKCQkJdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93OwoJCX0KCX0KfTsKCmpRdWVyeS5lYXNpbmcgPSB7CglsaW5lYXI6IGZ1bmN0aW9uKCBwICkgewoJCXJldHVybiBwOwoJfSwKCXN3aW5nOiBmdW5jdGlvbiggcCApIHsKCQlyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyOwoJfQp9OwoKalF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7CgovLyBCYWNrIENvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludApqUXVlcnkuZnguc3RlcCA9IHt9OwoKCgoKdmFyCglmeE5vdywgdGltZXJJZCwKCXJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLAoJcmZ4bnVtID0gbmV3IFJlZ0V4cCggIl4oPzooWystXSk9fCkoIiArIHBudW0gKyAiKShbYS16JV0qKSQiLCAiaSIgKSwKCXJydW4gPSAvcXVldWVIb29rcyQvLAoJYW5pbWF0aW9uUHJlZmlsdGVycyA9IFsgZGVmYXVsdFByZWZpbHRlciBdLAoJdHdlZW5lcnMgPSB7CgkJIioiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHsKCQkJdmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKSwKCQkJCXRhcmdldCA9IHR3ZWVuLmN1cigpLAoJCQkJcGFydHMgPSByZnhudW0uZXhlYyggdmFsdWUgKSwKCQkJCXVuaXQgPSBwYXJ0cyAmJiBwYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gIiIgOiAicHgiICksCgoJCQkJLy8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXMKCQkJCXN0YXJ0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gInB4IiAmJiArdGFyZ2V0ICkgJiYKCQkJCQlyZnhudW0uZXhlYyggalF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgcHJvcCApICksCgkJCQlzY2FsZSA9IDEsCgkJCQltYXhJdGVyYXRpb25zID0gMjA7CgoJCQlpZiAoIHN0YXJ0ICYmIHN0YXJ0WyAzIF0gIT09IHVuaXQgKSB7CgkJCQkvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzCgkJCQl1bml0ID0gdW5pdCB8fCBzdGFydFsgMyBdOwoKCQkJCS8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb24KCQkJCXBhcnRzID0gcGFydHMgfHwgW107CgoJCQkJLy8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnQKCQkJCXN0YXJ0ID0gK3RhcmdldCB8fCAxOwoKCQkJCWRvIHsKCQkJCQkvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKgoJCQkJCS8vIFVzZSBhIHN0cmluZyBmb3IgZG91YmxpbmcgZmFjdG9yIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93CgkJCQkJc2NhbGUgPSBzY2FsZSB8fCAiLjUiOwoKCQkJCQkvLyBBZGp1c3QgYW5kIGFwcGx5CgkJCQkJc3RhcnQgPSBzdGFydCAvIHNjYWxlOwoJCQkJCWpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgcHJvcCwgc3RhcnQgKyB1bml0ICk7CgoJCQkJLy8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKCkKCQkJCS8vIEFuZCBicmVha2luZyB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoCgkJCQl9IHdoaWxlICggc2NhbGUgIT09IChzY2FsZSA9IHR3ZWVuLmN1cigpIC8gdGFyZ2V0KSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnMgKTsKCQkJfQoKCQkJLy8gVXBkYXRlIHR3ZWVuIHByb3BlcnRpZXMKCQkJaWYgKCBwYXJ0cyApIHsKCQkJCXN0YXJ0ID0gdHdlZW4uc3RhcnQgPSArc3RhcnQgfHwgK3RhcmdldCB8fCAwOwoJCQkJdHdlZW4udW5pdCA9IHVuaXQ7CgkJCQkvLyBJZiBhICs9Ly09IHRva2VuIHdhcyBwcm92aWRlZCwgd2UncmUgZG9pbmcgYSByZWxhdGl2ZSBhbmltYXRpb24KCQkJCXR3ZWVuLmVuZCA9IHBhcnRzWyAxIF0gPwoJCQkJCXN0YXJ0ICsgKCBwYXJ0c1sgMSBdICsgMSApICogcGFydHNbIDIgXSA6CgkJCQkJK3BhcnRzWyAyIF07CgkJCX0KCgkJCXJldHVybiB0d2VlbjsKCQl9IF0KCX07CgovLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5CmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkgewoJc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQlmeE5vdyA9IHVuZGVmaW5lZDsKCX0pOwoJcmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTsKfQoKLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb24KZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHsKCXZhciB3aGljaCwKCQlhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH0sCgkJaSA9IDA7CgoJLy8gaWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLAoJLy8gaWYgd2UgZG9uJ3QgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodAoJaW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7Cglmb3IgKCA7IGkgPCA0IDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkgewoJCXdoaWNoID0gY3NzRXhwYW5kWyBpIF07CgkJYXR0cnNbICJtYXJnaW4iICsgd2hpY2ggXSA9IGF0dHJzWyAicGFkZGluZyIgKyB3aGljaCBdID0gdHlwZTsKCX0KCglpZiAoIGluY2x1ZGVXaWR0aCApIHsKCQlhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlOwoJfQoKCXJldHVybiBhdHRyczsKfQoKZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7Cgl2YXIgdHdlZW4sCgkJY29sbGVjdGlvbiA9ICggdHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggdHdlZW5lcnNbICIqIiBdICksCgkJaW5kZXggPSAwLAoJCWxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoOwoJZm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHsKCQlpZiAoICh0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApKSApIHsKCgkJCS8vIHdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5CgkJCXJldHVybiB0d2VlbjsKCQl9Cgl9Cn0KCmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkgewoJLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqLwoJdmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIHR3ZWVuLCBob29rcywgb2xkZmlyZSwgZGlzcGxheSwgZERpc3BsYXksCgkJYW5pbSA9IHRoaXMsCgkJb3JpZyA9IHt9LAoJCXN0eWxlID0gZWxlbS5zdHlsZSwKCQloaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksCgkJZGF0YVNob3cgPSBqUXVlcnkuX2RhdGEoIGVsZW0sICJmeHNob3ciICk7CgoJLy8gaGFuZGxlIHF1ZXVlOiBmYWxzZSBwcm9taXNlcwoJaWYgKCAhb3B0cy5xdWV1ZSApIHsKCQlob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgImZ4IiApOwoJCWlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHsKCQkJaG9va3MudW5xdWV1ZWQgPSAwOwoJCQlvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTsKCQkJaG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkgewoJCQkJaWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7CgkJCQkJb2xkZmlyZSgpOwoJCQkJfQoJCQl9OwoJCX0KCQlob29rcy51bnF1ZXVlZCsrOwoKCQlhbmltLmFsd2F5cyhmdW5jdGlvbigpIHsKCQkJLy8gZG9pbmcgdGhpcyBtYWtlcyBzdXJlIHRoYXQgdGhlIGNvbXBsZXRlIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWQKCQkJLy8gYmVmb3JlIHRoaXMgY29tcGxldGVzCgkJCWFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkgewoJCQkJaG9va3MudW5xdWV1ZWQtLTsKCQkJCWlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgImZ4IiApLmxlbmd0aCApIHsKCQkJCQlob29rcy5lbXB0eS5maXJlKCk7CgkJCQl9CgkJCX0pOwoJCX0pOwoJfQoKCS8vIGhlaWdodC93aWR0aCBvdmVyZmxvdyBwYXNzCglpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCAiaGVpZ2h0IiBpbiBwcm9wcyB8fCAid2lkdGgiIGluIHByb3BzICkgKSB7CgkJLy8gTWFrZSBzdXJlIHRoYXQgbm90aGluZyBzbmVha3Mgb3V0CgkJLy8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdAoJCS8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZAoJCS8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlCgkJb3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07CgoJCS8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoCgkJLy8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZAoJCWRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCAiZGlzcGxheSIgKTsKCQlkRGlzcGxheSA9IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICk7CgkJaWYgKCBkaXNwbGF5ID09PSAibm9uZSIgKSB7CgkJCWRpc3BsYXkgPSBkRGlzcGxheTsKCQl9CgkJaWYgKCBkaXNwbGF5ID09PSAiaW5saW5lIiAmJgoJCQkJalF1ZXJ5LmNzcyggZWxlbSwgImZsb2F0IiApID09PSAibm9uZSIgKSB7CgoJCQkvLyBpbmxpbmUtbGV2ZWwgZWxlbWVudHMgYWNjZXB0IGlubGluZS1ibG9jazsKCQkJLy8gYmxvY2stbGV2ZWwgZWxlbWVudHMgbmVlZCB0byBiZSBpbmxpbmUgd2l0aCBsYXlvdXQKCQkJaWYgKCAhc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0IHx8IGREaXNwbGF5ID09PSAiaW5saW5lIiApIHsKCQkJCXN0eWxlLmRpc3BsYXkgPSAiaW5saW5lLWJsb2NrIjsKCQkJfSBlbHNlIHsKCQkJCXN0eWxlLnpvb20gPSAxOwoJCQl9CgkJfQoJfQoKCWlmICggb3B0cy5vdmVyZmxvdyApIHsKCQlzdHlsZS5vdmVyZmxvdyA9ICJoaWRkZW4iOwoJCWlmICggIXN1cHBvcnQuc2hyaW5rV3JhcEJsb2NrcygpICkgewoJCQlhbmltLmFsd2F5cyhmdW5jdGlvbigpIHsKCQkJCXN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdOwoJCQkJc3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdOwoJCQkJc3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdOwoJCQl9KTsKCQl9Cgl9CgoJLy8gc2hvdy9oaWRlIHBhc3MKCWZvciAoIHByb3AgaW4gcHJvcHMgKSB7CgkJdmFsdWUgPSBwcm9wc1sgcHJvcCBdOwoJCWlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHsKCQkJZGVsZXRlIHByb3BzWyBwcm9wIF07CgkJCXRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gInRvZ2dsZSI7CgkJCWlmICggdmFsdWUgPT09ICggaGlkZGVuID8gImhpZGUiIDogInNob3ciICkgKSB7CgoJCQkJLy8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvdyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW4KCQkJCWlmICggdmFsdWUgPT09ICJzaG93IiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJaGlkZGVuID0gdHJ1ZTsKCQkJCX0gZWxzZSB7CgkJCQkJY29udGludWU7CgkJCQl9CgkJCX0KCQkJb3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTsKCQl9Cgl9CgoJaWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHsKCQlpZiAoIGRhdGFTaG93ICkgewoJCQlpZiAoICJoaWRkZW4iIGluIGRhdGFTaG93ICkgewoJCQkJaGlkZGVuID0gZGF0YVNob3cuaGlkZGVuOwoJCQl9CgkJfSBlbHNlIHsKCQkJZGF0YVNob3cgPSBqUXVlcnkuX2RhdGEoIGVsZW0sICJmeHNob3ciLCB7fSApOwoJCX0KCgkJLy8gc3RvcmUgc3RhdGUgaWYgaXRzIHRvZ2dsZSAtIGVuYWJsZXMgLnN0b3AoKS50b2dnbGUoKSB0byAicmV2ZXJzZSIKCQlpZiAoIHRvZ2dsZSApIHsKCQkJZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjsKCQl9CgkJaWYgKCBoaWRkZW4gKSB7CgkJCWpRdWVyeSggZWxlbSApLnNob3coKTsKCQl9IGVsc2UgewoJCQlhbmltLmRvbmUoZnVuY3Rpb24oKSB7CgkJCQlqUXVlcnkoIGVsZW0gKS5oaWRlKCk7CgkJCX0pOwoJCX0KCQlhbmltLmRvbmUoZnVuY3Rpb24oKSB7CgkJCXZhciBwcm9wOwoJCQlqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sICJmeHNob3ciICk7CgkJCWZvciAoIHByb3AgaW4gb3JpZyApIHsKCQkJCWpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7CgkJCX0KCQl9KTsKCQlmb3IgKCBwcm9wIGluIG9yaWcgKSB7CgkJCXR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7CgoJCQlpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHsKCQkJCWRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDsKCQkJCWlmICggaGlkZGVuICkgewoJCQkJCXR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0OwoJCQkJCXR3ZWVuLnN0YXJ0ID0gcHJvcCA9PT0gIndpZHRoIiB8fCBwcm9wID09PSAiaGVpZ2h0IiA/IDEgOiAwOwoJCQkJfQoJCQl9CgkJfQoJfQp9CgpmdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHsKCXZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7CgoJLy8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzCglmb3IgKCBpbmRleCBpbiBwcm9wcyApIHsKCQluYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTsKCQllYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07CgkJdmFsdWUgPSBwcm9wc1sgaW5kZXggXTsKCQlpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkgewoJCQllYXNpbmcgPSB2YWx1ZVsgMSBdOwoJCQl2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTsKCQl9CgoJCWlmICggaW5kZXggIT09IG5hbWUgKSB7CgkJCXByb3BzWyBuYW1lIF0gPSB2YWx1ZTsKCQkJZGVsZXRlIHByb3BzWyBpbmRleCBdOwoJCX0KCgkJaG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTsKCQlpZiAoIGhvb2tzICYmICJleHBhbmQiIGluIGhvb2tzICkgewoJCQl2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTsKCQkJZGVsZXRlIHByb3BzWyBuYW1lIF07CgoJCQkvLyBub3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29udCBvdmVyd3JpdGUga2V5cyBhbHJlYWR5IHByZXNlbnQuCgkJCS8vIGFsc28gLSByZXVzaW5nICdpbmRleCcgZnJvbSBhYm92ZSBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgIm5hbWUiCgkJCWZvciAoIGluZGV4IGluIHZhbHVlICkgewoJCQkJaWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkgewoJCQkJCXByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07CgkJCQkJc3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZzsKCQkJCX0KCQkJfQoJCX0gZWxzZSB7CgkJCXNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZzsKCQl9Cgl9Cn0KCmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHsKCXZhciByZXN1bHQsCgkJc3RvcHBlZCwKCQlpbmRleCA9IDAsCgkJbGVuZ3RoID0gYW5pbWF0aW9uUHJlZmlsdGVycy5sZW5ndGgsCgkJZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkgewoJCQkvLyBkb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3IKCQkJZGVsZXRlIHRpY2suZWxlbTsKCQl9KSwKCQl0aWNrID0gZnVuY3Rpb24oKSB7CgkJCWlmICggc3RvcHBlZCApIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCQl2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLAoJCQkJcmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLAoJCQkJLy8gYXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIDEgLSAoIDAuNSB8fCAwICkgKCMxMjQ5NykKCQkJCXRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCwKCQkJCXBlcmNlbnQgPSAxIC0gdGVtcCwKCQkJCWluZGV4ID0gMCwKCQkJCWxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoOwoKCQkJZm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7CgkJCQlhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApOwoJCQl9CgoJCQlkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0pOwoKCQkJaWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7CgkJCQlyZXR1cm4gcmVtYWluaW5nOwoJCQl9IGVsc2UgewoJCQkJZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX0sCgkJYW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSh7CgkJCWVsZW06IGVsZW0sCgkJCXByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLAoJCQlvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7IHNwZWNpYWxFYXNpbmc6IHt9IH0sIG9wdGlvbnMgKSwKCQkJb3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLAoJCQlvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsCgkJCXN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSwKCQkJZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sCgkJCXR3ZWVuczogW10sCgkJCWNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkgewoJCQkJdmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLAoJCQkJCQlhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7CgkJCQlhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7CgkJCQlyZXR1cm4gdHdlZW47CgkJCX0sCgkJCXN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkgewoJCQkJdmFyIGluZGV4ID0gMCwKCQkJCQkvLyBpZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnMKCQkJCQkvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnQKCQkJCQlsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwOwoJCQkJaWYgKCBzdG9wcGVkICkgewoJCQkJCXJldHVybiB0aGlzOwoJCQkJfQoJCQkJc3RvcHBlZCA9IHRydWU7CgkJCQlmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHsKCQkJCQlhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApOwoJCQkJfQoKCQkJCS8vIHJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWUKCQkJCS8vIG90aGVyd2lzZSwgcmVqZWN0CgkJCQlpZiAoIGdvdG9FbmQgKSB7CgkJCQkJZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTsKCQkJCX0gZWxzZSB7CgkJCQkJZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApOwoJCQkJfQoJCQkJcmV0dXJuIHRoaXM7CgkJCX0KCQl9KSwKCQlwcm9wcyA9IGFuaW1hdGlvbi5wcm9wczsKCglwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApOwoKCWZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkgewoJCXJlc3VsdCA9IGFuaW1hdGlvblByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTsKCQlpZiAoIHJlc3VsdCApIHsKCQkJcmV0dXJuIHJlc3VsdDsKCQl9Cgl9CgoJalF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTsKCglpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkgewoJCWFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApOwoJfQoKCWpRdWVyeS5meC50aW1lcigKCQlqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7CgkJCWVsZW06IGVsZW0sCgkJCWFuaW06IGFuaW1hdGlvbiwKCQkJcXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlCgkJfSkKCSk7CgoJLy8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnMKCXJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzICkKCQkuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKQoJCS5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsICkKCQkuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTsKfQoKalF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwgewoJdHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHsKCQlpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkgewoJCQljYWxsYmFjayA9IHByb3BzOwoJCQlwcm9wcyA9IFsgIioiIF07CgkJfSBlbHNlIHsKCQkJcHJvcHMgPSBwcm9wcy5zcGxpdCgiICIpOwoJCX0KCgkJdmFyIHByb3AsCgkJCWluZGV4ID0gMCwKCQkJbGVuZ3RoID0gcHJvcHMubGVuZ3RoOwoKCQlmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHsKCQkJcHJvcCA9IHByb3BzWyBpbmRleCBdOwoJCQl0d2VlbmVyc1sgcHJvcCBdID0gdHdlZW5lcnNbIHByb3AgXSB8fCBbXTsKCQkJdHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApOwoJCX0KCX0sCgoJcHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7CgkJaWYgKCBwcmVwZW5kICkgewoJCQlhbmltYXRpb25QcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7CgkJfSBlbHNlIHsKCQkJYW5pbWF0aW9uUHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApOwoJCX0KCX0KfSk7CgpqUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7Cgl2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSAib2JqZWN0IiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDogewoJCWNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8CgkJCWpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLAoJCWR1cmF0aW9uOiBzcGVlZCwKCQllYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmcKCX07CgoJb3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4Lm9mZiA/IDAgOiB0eXBlb2Ygb3B0LmR1cmF0aW9uID09PSAibnVtYmVyIiA/IG9wdC5kdXJhdGlvbiA6CgkJb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgPyBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7CgoJLy8gbm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gImZ4IgoJaWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7CgkJb3B0LnF1ZXVlID0gImZ4IjsKCX0KCgkvLyBRdWV1ZWluZwoJb3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTsKCglvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHsKCQlpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7CgkJCW9wdC5vbGQuY2FsbCggdGhpcyApOwoJCX0KCgkJaWYgKCBvcHQucXVldWUgKSB7CgkJCWpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTsKCQl9Cgl9OwoKCXJldHVybiBvcHQ7Cn07CgpqUXVlcnkuZm4uZXh0ZW5kKHsKCWZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHsKCgkJLy8gc2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwCgkJcmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbiApLmNzcyggIm9wYWNpdHkiLCAwICkuc2hvdygpCgoJCQkvLyBhbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWQKCQkJLmVuZCgpLmFuaW1hdGUoeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApOwoJfSwKCWFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHsKCQl2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLAoJCQlvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksCgkJCWRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7CgkJCQkvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdAoJCQkJdmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApOwoKCQkJCS8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseQoJCQkJaWYgKCBlbXB0eSB8fCBqUXVlcnkuX2RhdGEoIHRoaXMsICJmaW5pc2giICkgKSB7CgkJCQkJYW5pbS5zdG9wKCB0cnVlICk7CgkJCQl9CgkJCX07CgkJCWRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uOwoKCQlyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/CgkJCXRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6CgkJCXRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTsKCX0sCglzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHsKCQl2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkgewoJCQl2YXIgc3RvcCA9IGhvb2tzLnN0b3A7CgkJCWRlbGV0ZSBob29rcy5zdG9wOwoJCQlzdG9wKCBnb3RvRW5kICk7CgkJfTsKCgkJaWYgKCB0eXBlb2YgdHlwZSAhPT0gInN0cmluZyIgKSB7CgkJCWdvdG9FbmQgPSBjbGVhclF1ZXVlOwoJCQljbGVhclF1ZXVlID0gdHlwZTsKCQkJdHlwZSA9IHVuZGVmaW5lZDsKCQl9CgkJaWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkgewoJCQl0aGlzLnF1ZXVlKCB0eXBlIHx8ICJmeCIsIFtdICk7CgkJfQoKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgZGVxdWV1ZSA9IHRydWUsCgkJCQlpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgInF1ZXVlSG9va3MiLAoJCQkJdGltZXJzID0galF1ZXJ5LnRpbWVycywKCQkJCWRhdGEgPSBqUXVlcnkuX2RhdGEoIHRoaXMgKTsKCgkJCWlmICggaW5kZXggKSB7CgkJCQlpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkgewoJCQkJCXN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApOwoJCQkJfQoJCQl9IGVsc2UgewoJCQkJZm9yICggaW5kZXggaW4gZGF0YSApIHsKCQkJCQlpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHsKCQkJCQkJc3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQlmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkgewoJCQkJaWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiAodHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSkgKSB7CgkJCQkJdGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApOwoJCQkJCWRlcXVldWUgPSBmYWxzZTsKCQkJCQl0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApOwoJCQkJfQoJCQl9CgoJCQkvLyBzdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkCgkJCS8vIHRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2ggd2lsbCBkZXF1ZXVlCgkJCS8vIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kCgkJCWlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHsKCQkJCWpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7CgkJCX0KCQl9KTsKCX0sCglmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkgewoJCWlmICggdHlwZSAhPT0gZmFsc2UgKSB7CgkJCXR5cGUgPSB0eXBlIHx8ICJmeCI7CgkJfQoJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCXZhciBpbmRleCwKCQkJCWRhdGEgPSBqUXVlcnkuX2RhdGEoIHRoaXMgKSwKCQkJCXF1ZXVlID0gZGF0YVsgdHlwZSArICJxdWV1ZSIgXSwKCQkJCWhvb2tzID0gZGF0YVsgdHlwZSArICJxdWV1ZUhvb2tzIiBdLAoJCQkJdGltZXJzID0galF1ZXJ5LnRpbWVycywKCQkJCWxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDsKCgkJCS8vIGVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGEKCQkJZGF0YS5maW5pc2ggPSB0cnVlOwoKCQkJLy8gZW1wdHkgdGhlIHF1ZXVlIGZpcnN0CgkJCWpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTsKCgkJCWlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHsKCQkJCWhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApOwoJCQl9CgoJCQkvLyBsb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbQoJCQlmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkgewoJCQkJaWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7CgkJCQkJdGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApOwoJCQkJCXRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7CgkJCQl9CgkJCX0KCgkJCS8vIGxvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtCgkJCWZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7CgkJCQlpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHsKCQkJCQlxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApOwoJCQkJfQoJCQl9CgoJCQkvLyB0dXJuIG9mZiBmaW5pc2hpbmcgZmxhZwoJCQlkZWxldGUgZGF0YS5maW5pc2g7CgkJfSk7Cgl9Cn0pOwoKalF1ZXJ5LmVhY2goWyAidG9nZ2xlIiwgInNob3ciLCAiaGlkZSIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7Cgl2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTsKCWpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkgewoJCXJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gImJvb2xlYW4iID8KCQkJY3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDoKCQkJdGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApOwoJfTsKfSk7CgovLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zCmpRdWVyeS5lYWNoKHsKCXNsaWRlRG93bjogZ2VuRngoInNob3ciKSwKCXNsaWRlVXA6IGdlbkZ4KCJoaWRlIiksCglzbGlkZVRvZ2dsZTogZ2VuRngoInRvZ2dsZSIpLAoJZmFkZUluOiB7IG9wYWNpdHk6ICJzaG93IiB9LAoJZmFkZU91dDogeyBvcGFjaXR5OiAiaGlkZSIgfSwKCWZhZGVUb2dnbGU6IHsgb3BhY2l0eTogInRvZ2dsZSIgfQp9LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7CglqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHsKCQlyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTsKCX07Cn0pOwoKalF1ZXJ5LnRpbWVycyA9IFtdOwpqUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkgewoJdmFyIHRpbWVyLAoJCXRpbWVycyA9IGpRdWVyeS50aW1lcnMsCgkJaSA9IDA7CgoJZnhOb3cgPSBqUXVlcnkubm93KCk7CgoJZm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkgewoJCXRpbWVyID0gdGltZXJzWyBpIF07CgkJLy8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkCgkJaWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7CgkJCXRpbWVycy5zcGxpY2UoIGktLSwgMSApOwoJCX0KCX0KCglpZiAoICF0aW1lcnMubGVuZ3RoICkgewoJCWpRdWVyeS5meC5zdG9wKCk7Cgl9CglmeE5vdyA9IHVuZGVmaW5lZDsKfTsKCmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHsKCWpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTsKCWlmICggdGltZXIoKSApIHsKCQlqUXVlcnkuZnguc3RhcnQoKTsKCX0gZWxzZSB7CgkJalF1ZXJ5LnRpbWVycy5wb3AoKTsKCX0KfTsKCmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzOwoKalF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7CglpZiAoICF0aW1lcklkICkgewoJCXRpbWVySWQgPSBzZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApOwoJfQp9OwoKalF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHsKCWNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTsKCXRpbWVySWQgPSBudWxsOwp9OwoKalF1ZXJ5LmZ4LnNwZWVkcyA9IHsKCXNsb3c6IDYwMCwKCWZhc3Q6IDIwMCwKCS8vIERlZmF1bHQgc3BlZWQKCV9kZWZhdWx0OiA0MDAKfTsKCgovLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uCi8vIGh0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS8KalF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7Cgl0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lOwoJdHlwZSA9IHR5cGUgfHwgImZ4IjsKCglyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkgewoJCXZhciB0aW1lb3V0ID0gc2V0VGltZW91dCggbmV4dCwgdGltZSApOwoJCWhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHsKCQkJY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7CgkJfTsKCX0pOwp9OwoKCihmdW5jdGlvbigpIHsKCXZhciBhLCBpbnB1dCwgc2VsZWN0LCBvcHQsCgkJZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IiApOwoKCS8vIFNldHVwCglkaXYuc2V0QXR0cmlidXRlKCAiY2xhc3NOYW1lIiwgInQiICk7CglkaXYuaW5uZXJIVE1MID0gIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPiI7CglhID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJhIilbIDAgXTsKCgkvLyBGaXJzdCBiYXRjaCBvZiB0ZXN0cy4KCXNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNlbGVjdCIpOwoJb3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKSApOwoJaW5wdXQgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImlucHV0IilbIDAgXTsKCglhLnN0eWxlLmNzc1RleHQgPSAidG9wOjFweCI7CgoJLy8gVGVzdCBzZXRBdHRyaWJ1dGUgb24gY2FtZWxDYXNlIGNsYXNzLiBJZiBpdCB3b3Jrcywgd2UgbmVlZCBhdHRyRml4ZXMgd2hlbiBkb2luZyBnZXQvc2V0QXR0cmlidXRlIChpZTYvNykKCXN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlID0gZGl2LmNsYXNzTmFtZSAhPT0gInQiOwoKCS8vIEdldCB0aGUgc3R5bGUgaW5mb3JtYXRpb24gZnJvbSBnZXRBdHRyaWJ1dGUKCS8vIChJRSB1c2VzIC5jc3NUZXh0IGluc3RlYWQpCglzdXBwb3J0LnN0eWxlID0gL3RvcC8udGVzdCggYS5nZXRBdHRyaWJ1dGUoInN0eWxlIikgKTsKCgkvLyBNYWtlIHN1cmUgdGhhdCBVUkxzIGFyZW4ndCBtYW5pcHVsYXRlZAoJLy8gKElFIG5vcm1hbGl6ZXMgaXQgYnkgZGVmYXVsdCkKCXN1cHBvcnQuaHJlZk5vcm1hbGl6ZWQgPSBhLmdldEF0dHJpYnV0ZSgiaHJlZiIpID09PSAiL2EiOwoKCS8vIENoZWNrIHRoZSBkZWZhdWx0IGNoZWNrYm94L3JhZGlvIHZhbHVlICgiIiBvbiBXZWJLaXQ7ICJvbiIgZWxzZXdoZXJlKQoJc3VwcG9ydC5jaGVja09uID0gISFpbnB1dC52YWx1ZTsKCgkvLyBNYWtlIHN1cmUgdGhhdCBhIHNlbGVjdGVkLWJ5LWRlZmF1bHQgb3B0aW9uIGhhcyBhIHdvcmtpbmcgc2VsZWN0ZWQgcHJvcGVydHkuCgkvLyAoV2ViS2l0IGRlZmF1bHRzIHRvIGZhbHNlIGluc3RlYWQgb2YgdHJ1ZSwgSUUgdG9vLCBpZiBpdCdzIGluIGFuIG9wdGdyb3VwKQoJc3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDsKCgkvLyBUZXN0cyBmb3IgZW5jdHlwZSBzdXBwb3J0IG9uIGEgZm9ybSAoIzY3NDMpCglzdXBwb3J0LmVuY3R5cGUgPSAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImZvcm0iKS5lbmN0eXBlOwoKCS8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBvcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZW4ndCBtYXJrZWQgYXMgZGlzYWJsZWQKCS8vIChXZWJLaXQgbWFya3MgdGhlbSBhcyBkaXNhYmxlZCkKCXNlbGVjdC5kaXNhYmxlZCA9IHRydWU7CglzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDsKCgkvLyBTdXBwb3J0OiBJRTggb25seQoJLy8gQ2hlY2sgaWYgd2UgY2FuIHRydXN0IGdldEF0dHJpYnV0ZSgidmFsdWUiKQoJaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiaW5wdXQiICk7CglpbnB1dC5zZXRBdHRyaWJ1dGUoICJ2YWx1ZSIsICIiICk7CglzdXBwb3J0LmlucHV0ID0gaW5wdXQuZ2V0QXR0cmlidXRlKCAidmFsdWUiICkgPT09ICIiOwoKCS8vIENoZWNrIGlmIGFuIGlucHV0IG1haW50YWlucyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpbwoJaW5wdXQudmFsdWUgPSAidCI7CglpbnB1dC5zZXRBdHRyaWJ1dGUoICJ0eXBlIiwgInJhZGlvIiApOwoJc3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09ICJ0IjsKCgkvLyBOdWxsIGVsZW1lbnRzIHRvIGF2b2lkIGxlYWtzIGluIElFLgoJYSA9IGlucHV0ID0gc2VsZWN0ID0gb3B0ID0gZGl2ID0gbnVsbDsKfSkoKTsKCgp2YXIgcnJldHVybiA9IC9cci9nOwoKalF1ZXJ5LmZuLmV4dGVuZCh7Cgl2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbiwKCQkJZWxlbSA9IHRoaXNbMF07CgoJCWlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7CgkJCWlmICggZWxlbSApIHsKCQkJCWhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdOwoKCQkJCWlmICggaG9va3MgJiYgImdldCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgInZhbHVlIiApKSAhPT0gdW5kZWZpbmVkICkgewoJCQkJCXJldHVybiByZXQ7CgkJCQl9CgoJCQkJcmV0ID0gZWxlbS52YWx1ZTsKCgkJCQlyZXR1cm4gdHlwZW9mIHJldCA9PT0gInN0cmluZyIgPwoJCQkJCS8vIGhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXMKCQkJCQlyZXQucmVwbGFjZShycmV0dXJuLCAiIikgOgoJCQkJCS8vIGhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlcgoJCQkJCXJldCA9PSBudWxsID8gIiIgOiByZXQ7CgkJCX0KCgkJCXJldHVybjsKCQl9CgoJCWlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTsKCgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHsKCQkJdmFyIHZhbDsKCgkJCWlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJaWYgKCBpc0Z1bmN0aW9uICkgewoJCQkJdmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTsKCQkJfSBlbHNlIHsKCQkJCXZhbCA9IHZhbHVlOwoJCQl9CgoJCQkvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyAiIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZwoJCQlpZiAoIHZhbCA9PSBudWxsICkgewoJCQkJdmFsID0gIiI7CgkJCX0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09ICJudW1iZXIiICkgewoJCQkJdmFsICs9ICIiOwoJCQl9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7CgkJCQl2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQkJCQlyZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICIiIDogdmFsdWUgKyAiIjsKCQkJCX0pOwoJCQl9CgoJCQlob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTsKCgkJCS8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nCgkJCWlmICggIWhvb2tzIHx8ICEoInNldCIgaW4gaG9va3MpIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCAidmFsdWUiICkgPT09IHVuZGVmaW5lZCApIHsKCQkJCXRoaXMudmFsdWUgPSB2YWw7CgkJCX0KCQl9KTsKCX0KfSk7CgpqUXVlcnkuZXh0ZW5kKHsKCXZhbEhvb2tzOiB7CgkJb3B0aW9uOiB7CgkJCWdldDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQl2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgInZhbHVlIiApOwoJCQkJcmV0dXJuIHZhbCAhPSBudWxsID8KCQkJCQl2YWwgOgoJCQkJCWpRdWVyeS50ZXh0KCBlbGVtICk7CgkJCX0KCQl9LAoJCXNlbGVjdDogewoJCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJdmFyIHZhbHVlLCBvcHRpb24sCgkJCQkJb3B0aW9ucyA9IGVsZW0ub3B0aW9ucywKCQkJCQlpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCwKCQkJCQlvbmUgPSBlbGVtLnR5cGUgPT09ICJzZWxlY3Qtb25lIiB8fCBpbmRleCA8IDAsCgkJCQkJdmFsdWVzID0gb25lID8gbnVsbCA6IFtdLAoJCQkJCW1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLAoJCQkJCWkgPSBpbmRleCA8IDAgPwoJCQkJCQltYXggOgoJCQkJCQlvbmUgPyBpbmRleCA6IDA7CgoJCQkJLy8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9ucwoJCQkJZm9yICggOyBpIDwgbWF4OyBpKysgKSB7CgkJCQkJb3B0aW9uID0gb3B0aW9uc1sgaSBdOwoKCQkJCQkvLyBvbGRJRSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSkKCQkJCQlpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiYKCQkJCQkJCS8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXAKCQkJCQkJCSggc3VwcG9ydC5vcHREaXNhYmxlZCA/ICFvcHRpb24uZGlzYWJsZWQgOiBvcHRpb24uZ2V0QXR0cmlidXRlKCJkaXNhYmxlZCIpID09PSBudWxsICkgJiYKCQkJCQkJCSggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8ICFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCAib3B0Z3JvdXAiICkgKSApIHsKCgkJCQkJCS8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb24KCQkJCQkJdmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpOwoKCQkJCQkJLy8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHMKCQkJCQkJaWYgKCBvbmUgKSB7CgkJCQkJCQlyZXR1cm4gdmFsdWU7CgkJCQkJCX0KCgkJCQkJCS8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5CgkJCQkJCXZhbHVlcy5wdXNoKCB2YWx1ZSApOwoJCQkJCX0KCQkJCX0KCgkJCQlyZXR1cm4gdmFsdWVzOwoJCQl9LAoKCQkJc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7CgkJCQl2YXIgb3B0aW9uU2V0LCBvcHRpb24sCgkJCQkJb3B0aW9ucyA9IGVsZW0ub3B0aW9ucywKCQkJCQl2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLAoJCQkJCWkgPSBvcHRpb25zLmxlbmd0aDsKCgkJCQl3aGlsZSAoIGktLSApIHsKCQkJCQlvcHRpb24gPSBvcHRpb25zWyBpIF07CgoJCQkJCWlmICggalF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPj0gMCApIHsKCgkJCQkJCS8vIFN1cHBvcnQ6IElFNgoJCQkJCQkvLyBXaGVuIG5ldyBvcHRpb24gZWxlbWVudCBpcyBhZGRlZCB0byBzZWxlY3QgYm94IHdlIG5lZWQgdG8KCQkJCQkJLy8gZm9yY2UgcmVmbG93IG9mIG5ld2x5IGFkZGVkIG5vZGUgaW4gb3JkZXIgdG8gd29ya2Fyb3VuZCBkZWxheQoJCQkJCQkvLyBvZiBpbml0aWFsaXphdGlvbiBwcm9wZXJ0aWVzCgkJCQkJCXRyeSB7CgkJCQkJCQlvcHRpb24uc2VsZWN0ZWQgPSBvcHRpb25TZXQgPSB0cnVlOwoKCQkJCQkJfSBjYXRjaCAoIF8gKSB7CgoJCQkJCQkJLy8gV2lsbCBiZSBleGVjdXRlZCBvbmx5IGluIElFNgoJCQkJCQkJb3B0aW9uLnNjcm9sbEhlaWdodDsKCQkJCQkJfQoKCQkJCQl9IGVsc2UgewoJCQkJCQlvcHRpb24uc2VsZWN0ZWQgPSBmYWxzZTsKCQkJCQl9CgkJCQl9CgoJCQkJLy8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXQKCQkJCWlmICggIW9wdGlvblNldCApIHsKCQkJCQllbGVtLnNlbGVjdGVkSW5kZXggPSAtMTsKCQkJCX0KCgkJCQlyZXR1cm4gb3B0aW9uczsKCQkJfQoJCX0KCX0KfSk7CgovLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlcgpqUXVlcnkuZWFjaChbICJyYWRpbyIsICJjaGVja2JveCIgXSwgZnVuY3Rpb24oKSB7CglqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHsKCQlzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKCQkJaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHsKCQkJCXJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlICkgPj0gMCApOwoJCQl9CgkJfQoJfTsKCWlmICggIXN1cHBvcnQuY2hlY2tPbiApIHsKCQlqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHsKCQkJLy8gU3VwcG9ydDogV2Via2l0CgkJCS8vICIiIGlzIHJldHVybmVkIGluc3RlYWQgb2YgIm9uIiBpZiBhIHZhbHVlIGlzbid0IHNwZWNpZmllZAoJCQlyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoInZhbHVlIikgPT09IG51bGwgPyAib24iIDogZWxlbS52YWx1ZTsKCQl9OwoJfQp9KTsKCgoKCnZhciBub2RlSG9vaywgYm9vbEhvb2ssCglhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZSwKCXJ1c2VEZWZhdWx0ID0gL14oPzpjaGVja2VkfHNlbGVjdGVkKSQvaSwKCWdldFNldEF0dHJpYnV0ZSA9IHN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlLAoJZ2V0U2V0SW5wdXQgPSBzdXBwb3J0LmlucHV0OwoKalF1ZXJ5LmZuLmV4dGVuZCh7CglhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7CgkJcmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApOwoJfSwKCglyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHsKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQlqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApOwoJCX0pOwoJfQp9KTsKCmpRdWVyeS5leHRlbmQoewoJYXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkgewoJCXZhciBob29rcywgcmV0LAoJCQluVHlwZSA9IGVsZW0ubm9kZVR5cGU7CgoJCS8vIGRvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXMKCQlpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZAoJCWlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBzdHJ1bmRlZmluZWQgKSB7CgkJCXJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTsKCQl9CgoJCS8vIEFsbCBhdHRyaWJ1dGVzIGFyZSBsb3dlcmNhc2UKCQkvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkCgkJaWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7CgkJCW5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7CgkJCWhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8CgkJCQkoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiBub2RlSG9vayApOwoJCX0KCgkJaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJaWYgKCB2YWx1ZSA9PT0gbnVsbCApIHsKCQkJCWpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7CgoJCQl9IGVsc2UgaWYgKCBob29rcyAmJiAic2V0IiBpbiBob29rcyAmJiAocmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApKSAhPT0gdW5kZWZpbmVkICkgewoJCQkJcmV0dXJuIHJldDsKCgkJCX0gZWxzZSB7CgkJCQllbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyAiIiApOwoJCQkJcmV0dXJuIHZhbHVlOwoJCQl9CgoJCX0gZWxzZSBpZiAoIGhvb2tzICYmICJnZXQiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSkgIT09IG51bGwgKSB7CgkJCXJldHVybiByZXQ7CgoJCX0gZWxzZSB7CgkJCXJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTsKCgkJCS8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkCgkJCXJldHVybiByZXQgPT0gbnVsbCA/CgkJCQl1bmRlZmluZWQgOgoJCQkJcmV0OwoJCX0KCX0sCgoJcmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewoJCXZhciBuYW1lLCBwcm9wTmFtZSwKCQkJaSA9IDAsCgkJCWF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTsKCgkJaWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHsKCQkJd2hpbGUgKCAobmFtZSA9IGF0dHJOYW1lc1tpKytdKSApIHsKCQkJCXByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lOwoKCQkJCS8vIEJvb2xlYW4gYXR0cmlidXRlcyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgKCMxMDg3MCkKCQkJCWlmICggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgKSB7CgkJCQkJLy8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2UKCQkJCQlpZiAoIGdldFNldElucHV0ICYmIGdldFNldEF0dHJpYnV0ZSB8fCAhcnVzZURlZmF1bHQudGVzdCggbmFtZSApICkgewoJCQkJCQllbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7CgkJCQkJLy8gU3VwcG9ydDogSUU8OQoJCQkJCS8vIEFsc28gY2xlYXIgZGVmYXVsdENoZWNrZWQvZGVmYXVsdFNlbGVjdGVkIChpZiBhcHByb3ByaWF0ZSkKCQkJCQl9IGVsc2UgewoJCQkJCQllbGVtWyBqUXVlcnkuY2FtZWxDYXNlKCAiZGVmYXVsdC0iICsgbmFtZSApIF0gPQoJCQkJCQkJZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlOwoJCQkJCX0KCgkJCQkvLyBTZWUgIzk2OTkgZm9yIGV4cGxhbmF0aW9uIG9mIHRoaXMgYXBwcm9hY2ggKHNldHRpbmcgZmlyc3QsIHRoZW4gcmVtb3ZhbCkKCQkJCX0gZWxzZSB7CgkJCQkJalF1ZXJ5LmF0dHIoIGVsZW0sIG5hbWUsICIiICk7CgkJCQl9CgoJCQkJZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIGdldFNldEF0dHJpYnV0ZSA/IG5hbWUgOiBwcm9wTmFtZSApOwoJCQl9CgkJfQoJfSwKCglhdHRySG9va3M6IHsKCQl0eXBlOiB7CgkJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewoJCQkJaWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSAicmFkaW8iICYmIGpRdWVyeS5ub2RlTmFtZShlbGVtLCAiaW5wdXQiKSApIHsKCQkJCQkvLyBTZXR0aW5nIHRoZSB0eXBlIG9uIGEgcmFkaW8gYnV0dG9uIGFmdGVyIHRoZSB2YWx1ZSByZXNldHMgdGhlIHZhbHVlIGluIElFNi05CgkJCQkJLy8gUmVzZXQgdmFsdWUgdG8gZGVmYXVsdCBpbiBjYXNlIHR5cGUgaXMgc2V0IGFmdGVyIHZhbHVlIGR1cmluZyBjcmVhdGlvbgoJCQkJCXZhciB2YWwgPSBlbGVtLnZhbHVlOwoJCQkJCWVsZW0uc2V0QXR0cmlidXRlKCAidHlwZSIsIHZhbHVlICk7CgkJCQkJaWYgKCB2YWwgKSB7CgkJCQkJCWVsZW0udmFsdWUgPSB2YWw7CgkJCQkJfQoJCQkJCXJldHVybiB2YWx1ZTsKCQkJCX0KCQkJfQoJCX0KCX0KfSk7CgovLyBIb29rIGZvciBib29sZWFuIGF0dHJpYnV0ZXMKYm9vbEhvb2sgPSB7CglzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHsKCQlpZiAoIHZhbHVlID09PSBmYWxzZSApIHsKCQkJLy8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZQoJCQlqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApOwoJCX0gZWxzZSBpZiAoIGdldFNldElucHV0ICYmIGdldFNldEF0dHJpYnV0ZSB8fCAhcnVzZURlZmF1bHQudGVzdCggbmFtZSApICkgewoJCQkvLyBJRTw4IG5lZWRzIHRoZSAqcHJvcGVydHkqIG5hbWUKCQkJZWxlbS5zZXRBdHRyaWJ1dGUoICFnZXRTZXRBdHRyaWJ1dGUgJiYgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lLCBuYW1lICk7CgoJCS8vIFVzZSBkZWZhdWx0Q2hlY2tlZCBhbmQgZGVmYXVsdFNlbGVjdGVkIGZvciBvbGRJRQoJCX0gZWxzZSB7CgkJCWVsZW1bIGpRdWVyeS5jYW1lbENhc2UoICJkZWZhdWx0LSIgKyBuYW1lICkgXSA9IGVsZW1bIG5hbWUgXSA9IHRydWU7CgkJfQoKCQlyZXR1cm4gbmFtZTsKCX0KfTsKCi8vIFJldHJpZXZlIGJvb2xlYW5zIHNwZWNpYWxseQpqUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKCgl2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7CgoJYXR0ckhhbmRsZVsgbmFtZSBdID0gZ2V0U2V0SW5wdXQgJiYgZ2V0U2V0QXR0cmlidXRlIHx8ICFydXNlRGVmYXVsdC50ZXN0KCBuYW1lICkgPwoJCWZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHsKCQkJdmFyIHJldCwgaGFuZGxlOwoJCQlpZiAoICFpc1hNTCApIHsKCQkJCS8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXIKCQkJCWhhbmRsZSA9IGF0dHJIYW5kbGVbIG5hbWUgXTsKCQkJCWF0dHJIYW5kbGVbIG5hbWUgXSA9IHJldDsKCQkJCXJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID8KCQkJCQluYW1lLnRvTG93ZXJDYXNlKCkgOgoJCQkJCW51bGw7CgkJCQlhdHRySGFuZGxlWyBuYW1lIF0gPSBoYW5kbGU7CgkJCX0KCQkJcmV0dXJuIHJldDsKCQl9IDoKCQlmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7CgkJCWlmICggIWlzWE1MICkgewoJCQkJcmV0dXJuIGVsZW1bIGpRdWVyeS5jYW1lbENhc2UoICJkZWZhdWx0LSIgKyBuYW1lICkgXSA/CgkJCQkJbmFtZS50b0xvd2VyQ2FzZSgpIDoKCQkJCQludWxsOwoJCQl9CgkJfTsKfSk7CgovLyBmaXggb2xkSUUgYXR0cm9wZXJ0aWVzCmlmICggIWdldFNldElucHV0IHx8ICFnZXRTZXRBdHRyaWJ1dGUgKSB7CglqUXVlcnkuYXR0ckhvb2tzLnZhbHVlID0gewoJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkgewoJCQlpZiAoIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgImlucHV0IiApICkgewoJCQkJLy8gRG9lcyBub3QgcmV0dXJuIHNvIHRoYXQgc2V0QXR0cmlidXRlIGlzIGFsc28gdXNlZAoJCQkJZWxlbS5kZWZhdWx0VmFsdWUgPSB2YWx1ZTsKCQkJfSBlbHNlIHsKCQkJCS8vIFVzZSBub2RlSG9vayBpZiBkZWZpbmVkICgjMTk1NCk7IG90aGVyd2lzZSBzZXRBdHRyaWJ1dGUgaXMgZmluZQoJCQkJcmV0dXJuIG5vZGVIb29rICYmIG5vZGVIb29rLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKTsKCQkJfQoJCX0KCX07Cn0KCi8vIElFNi83IGRvIG5vdCBzdXBwb3J0IGdldHRpbmcvc2V0dGluZyBzb21lIGF0dHJpYnV0ZXMgd2l0aCBnZXQvc2V0QXR0cmlidXRlCmlmICggIWdldFNldEF0dHJpYnV0ZSApIHsKCgkvLyBVc2UgdGhpcyBmb3IgYW55IGF0dHJpYnV0ZSBpbiBJRTYvNwoJLy8gVGhpcyBmaXhlcyBhbG1vc3QgZXZlcnkgSUU2LzcgaXNzdWUKCW5vZGVIb29rID0gewoJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkgewoJCQkvLyBTZXQgdGhlIGV4aXN0aW5nIG9yIGNyZWF0ZSBhIG5ldyBhdHRyaWJ1dGUgbm9kZQoJCQl2YXIgcmV0ID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICk7CgkJCWlmICggIXJldCApIHsKCQkJCWVsZW0uc2V0QXR0cmlidXRlTm9kZSgKCQkJCQkocmV0ID0gZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSggbmFtZSApKQoJCQkJKTsKCQkJfQoKCQkJcmV0LnZhbHVlID0gdmFsdWUgKz0gIiI7CgoJCQkvLyBCcmVhayBhc3NvY2lhdGlvbiB3aXRoIGNsb25lZCBlbGVtZW50cyBieSBhbHNvIHVzaW5nIHNldEF0dHJpYnV0ZSAoIzk2NDYpCgkJCWlmICggbmFtZSA9PT0gInZhbHVlIiB8fCB2YWx1ZSA9PT0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSApIHsKCQkJCXJldHVybiB2YWx1ZTsKCQkJfQoJCX0KCX07CgoJLy8gU29tZSBhdHRyaWJ1dGVzIGFyZSBjb25zdHJ1Y3RlZCB3aXRoIGVtcHR5LXN0cmluZyB2YWx1ZXMgd2hlbiBub3QgZGVmaW5lZAoJYXR0ckhhbmRsZS5pZCA9IGF0dHJIYW5kbGUubmFtZSA9IGF0dHJIYW5kbGUuY29vcmRzID0KCQlmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7CgkJCXZhciByZXQ7CgkJCWlmICggIWlzWE1MICkgewoJCQkJcmV0dXJuIChyZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgcmV0LnZhbHVlICE9PSAiIiA/CgkJCQkJcmV0LnZhbHVlIDoKCQkJCQludWxsOwoJCQl9CgkJfTsKCgkvLyBGaXhpbmcgdmFsdWUgcmV0cmlldmFsIG9uIGEgYnV0dG9uIHJlcXVpcmVzIHRoaXMgbW9kdWxlCglqUXVlcnkudmFsSG9va3MuYnV0dG9uID0gewoJCWdldDogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7CgkJCXZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTsKCQkJaWYgKCByZXQgJiYgcmV0LnNwZWNpZmllZCApIHsKCQkJCXJldHVybiByZXQudmFsdWU7CgkJCX0KCQl9LAoJCXNldDogbm9kZUhvb2suc2V0Cgl9OwoKCS8vIFNldCBjb250ZW50ZWRpdGFibGUgdG8gZmFsc2Ugb24gcmVtb3ZhbHMoIzEwNDI5KQoJLy8gU2V0dGluZyB0byBlbXB0eSBzdHJpbmcgdGhyb3dzIGFuIGVycm9yIGFzIGFuIGludmFsaWQgdmFsdWUKCWpRdWVyeS5hdHRySG9va3MuY29udGVudGVkaXRhYmxlID0gewoJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkgewoJCQlub2RlSG9vay5zZXQoIGVsZW0sIHZhbHVlID09PSAiIiA/IGZhbHNlIDogdmFsdWUsIG5hbWUgKTsKCQl9Cgl9OwoKCS8vIFNldCB3aWR0aCBhbmQgaGVpZ2h0IHRvIGF1dG8gaW5zdGVhZCBvZiAwIG9uIGVtcHR5IHN0cmluZyggQnVnICM4MTUwICkKCS8vIFRoaXMgaXMgZm9yIHJlbW92YWxzCglqUXVlcnkuZWFjaChbICJ3aWR0aCIsICJoZWlnaHQiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkgewoJCWpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSA9IHsKCQkJc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7CgkJCQlpZiAoIHZhbHVlID09PSAiIiApIHsKCQkJCQllbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgImF1dG8iICk7CgkJCQkJcmV0dXJuIHZhbHVlOwoJCQkJfQoJCQl9CgkJfTsKCX0pOwp9CgppZiAoICFzdXBwb3J0LnN0eWxlICkgewoJalF1ZXJ5LmF0dHJIb29rcy5zdHlsZSA9IHsKCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQkvLyBSZXR1cm4gdW5kZWZpbmVkIGluIHRoZSBjYXNlIG9mIGVtcHR5IHN0cmluZwoJCQkvLyBOb3RlOiBJRSB1cHBlcmNhc2VzIGNzcyBwcm9wZXJ0eSBuYW1lcywgYnV0IGlmIHdlIHdlcmUgdG8gLnRvTG93ZXJDYXNlKCkKCQkJLy8gLmNzc1RleHQsIHRoYXQgd291bGQgZGVzdHJveSBjYXNlIHNlbnN0aXRpdml0eSBpbiBVUkwncywgbGlrZSBpbiAiYmFja2dyb3VuZCIKCQkJcmV0dXJuIGVsZW0uc3R5bGUuY3NzVGV4dCB8fCB1bmRlZmluZWQ7CgkJfSwKCQlzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKCQkJcmV0dXJuICggZWxlbS5zdHlsZS5jc3NUZXh0ID0gdmFsdWUgKyAiIiApOwoJCX0KCX07Cn0KCgoKCnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9ufG9iamVjdCkkL2ksCglyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pOwoKalF1ZXJ5LmZuLmV4dGVuZCh7Cglwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7CgkJcmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApOwoJfSwKCglyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHsKCQluYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lOwoJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCS8vIHRyeS9jYXRjaCBoYW5kbGVzIGNhc2VzIHdoZXJlIElFIGJhbGtzIChzdWNoIGFzIHJlbW92aW5nIGEgcHJvcGVydHkgb24gd2luZG93KQoJCQl0cnkgewoJCQkJdGhpc1sgbmFtZSBdID0gdW5kZWZpbmVkOwoJCQkJZGVsZXRlIHRoaXNbIG5hbWUgXTsKCQkJfSBjYXRjaCggZSApIHt9CgkJfSk7Cgl9Cn0pOwoKalF1ZXJ5LmV4dGVuZCh7Cglwcm9wRml4OiB7CgkJImZvciI6ICJodG1sRm9yIiwKCQkiY2xhc3MiOiAiY2xhc3NOYW1lIgoJfSwKCglwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7CgkJdmFyIHJldCwgaG9va3MsIG5vdHhtbCwKCQkJblR5cGUgPSBlbGVtLm5vZGVUeXBlOwoKCQkvLyBkb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzCgkJaWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHsKCQkJcmV0dXJuOwoJCX0KCgkJbm90eG1sID0gblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApOwoKCQlpZiAoIG5vdHhtbCApIHsKCQkJLy8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rcwoJCQluYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lOwoJCQlob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTsKCQl9CgoJCWlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHsKCQkJcmV0dXJuIGhvb2tzICYmICJzZXQiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgPwoJCQkJcmV0IDoKCQkJCSggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTsKCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGhvb2tzICYmICJnZXQiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSkgIT09IG51bGwgPwoJCQkJcmV0IDoKCQkJCWVsZW1bIG5hbWUgXTsKCQl9Cgl9LAoKCXByb3BIb29rczogewoJCXRhYkluZGV4OiB7CgkJCWdldDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQkvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0CgkJCQkvLyBodHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0LwoJCQkJLy8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3MikKCQkJCXZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sICJ0YWJpbmRleCIgKTsKCgkJCQlyZXR1cm4gdGFiaW5kZXggPwoJCQkJCXBhcnNlSW50KCB0YWJpbmRleCwgMTAgKSA6CgkJCQkJcmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHwgcmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgZWxlbS5ocmVmID8KCQkJCQkJMCA6CgkJCQkJCS0xOwoJCQl9CgkJfQoJfQp9KTsKCi8vIFNvbWUgYXR0cmlidXRlcyByZXF1aXJlIGEgc3BlY2lhbCBjYWxsIG9uIElFCi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHgKaWYgKCAhc3VwcG9ydC5ocmVmTm9ybWFsaXplZCApIHsKCS8vIGhyZWYvc3JjIHByb3BlcnR5IHNob3VsZCBnZXQgdGhlIGZ1bGwgbm9ybWFsaXplZCBVUkwgKCMxMDI5OS8jMTI5MTUpCglqUXVlcnkuZWFjaChbICJocmVmIiwgInNyYyIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7CgkJalF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdID0gewoJCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCA0ICk7CgkJCX0KCQl9OwoJfSk7Cn0KCi8vIFN1cHBvcnQ6IFNhZmFyaSwgSUU5KwovLyBtaXMtcmVwb3J0cyB0aGUgZGVmYXVsdCBzZWxlY3RlZCBwcm9wZXJ0eSBvZiBhbiBvcHRpb24KLy8gQWNjZXNzaW5nIHRoZSBwYXJlbnQncyBzZWxlY3RlZEluZGV4IHByb3BlcnR5IGZpeGVzIGl0CmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7CglqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0gewoJCWdldDogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7CgoJCQlpZiAoIHBhcmVudCApIHsKCQkJCXBhcmVudC5zZWxlY3RlZEluZGV4OwoKCQkJCS8vIE1ha2Ugc3VyZSB0aGF0IGl0IGFsc28gd29ya3Mgd2l0aCBvcHRncm91cHMsIHNlZSAjNTcwMQoJCQkJaWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHsKCQkJCQlwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4OwoJCQkJfQoJCQl9CgkJCXJldHVybiBudWxsOwoJCX0KCX07Cn0KCmpRdWVyeS5lYWNoKFsKCSJ0YWJJbmRleCIsCgkicmVhZE9ubHkiLAoJIm1heExlbmd0aCIsCgkiY2VsbFNwYWNpbmciLAoJImNlbGxQYWRkaW5nIiwKCSJyb3dTcGFuIiwKCSJjb2xTcGFuIiwKCSJ1c2VNYXAiLAoJImZyYW1lQm9yZGVyIiwKCSJjb250ZW50RWRpdGFibGUiCl0sIGZ1bmN0aW9uKCkgewoJalF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpczsKfSk7CgovLyBJRTYvNyBjYWxsIGVuY3R5cGUgZW5jb2RpbmcKaWYgKCAhc3VwcG9ydC5lbmN0eXBlICkgewoJalF1ZXJ5LnByb3BGaXguZW5jdHlwZSA9ICJlbmNvZGluZyI7Cn0KCgoKCnZhciByY2xhc3MgPSAvW1x0XHJcblxmXS9nOwoKalF1ZXJ5LmZuLmV4dGVuZCh7CglhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkgewoJCXZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLAoJCQlpID0gMCwKCQkJbGVuID0gdGhpcy5sZW5ndGgsCgkJCXByb2NlZWQgPSB0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciICYmIHZhbHVlOwoKCQlpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkgewoJCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkgewoJCQkJalF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTsKCQkJfSk7CgkJfQoKCQlpZiAoIHByb2NlZWQgKSB7CgkJCS8vIFRoZSBkaXNqdW5jdGlvbiBoZXJlIGlzIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgcmVtb3ZlQ2xhc3MpCgkJCWNsYXNzZXMgPSAoIHZhbHVlIHx8ICIiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdOwoKCQkJZm9yICggOyBpIDwgbGVuOyBpKysgKSB7CgkJCQllbGVtID0gdGhpc1sgaSBdOwoJCQkJY3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID8KCQkJCQkoICIgIiArIGVsZW0uY2xhc3NOYW1lICsgIiAiICkucmVwbGFjZSggcmNsYXNzLCAiICIgKSA6CgkJCQkJIiAiCgkJCQkpOwoKCQkJCWlmICggY3VyICkgewoJCQkJCWogPSAwOwoJCQkJCXdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHsKCQkJCQkJaWYgKCBjdXIuaW5kZXhPZiggIiAiICsgY2xhenogKyAiICIgKSA8IDAgKSB7CgkJCQkJCQljdXIgKz0gY2xhenogKyAiICI7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCS8vIG9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuCgkJCQkJZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTsKCQkJCQlpZiAoIGVsZW0uY2xhc3NOYW1lICE9PSBmaW5hbFZhbHVlICkgewoJCQkJCQllbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoKCQlyZXR1cm4gdGhpczsKCX0sCgoJcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSwKCQkJaSA9IDAsCgkJCWxlbiA9IHRoaXMubGVuZ3RoLAoJCQlwcm9jZWVkID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciICYmIHZhbHVlOwoKCQlpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkgewoJCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkgewoJCQkJalF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTsKCQkJfSk7CgkJfQoJCWlmICggcHJvY2VlZCApIHsKCQkJY2xhc3NlcyA9ICggdmFsdWUgfHwgIiIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107CgoJCQlmb3IgKCA7IGkgPCBsZW47IGkrKyApIHsKCQkJCWVsZW0gPSB0aGlzWyBpIF07CgkJCQkvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKQoJCQkJY3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID8KCQkJCQkoICIgIiArIGVsZW0uY2xhc3NOYW1lICsgIiAiICkucmVwbGFjZSggcmNsYXNzLCAiICIgKSA6CgkJCQkJIiIKCQkJCSk7CgoJCQkJaWYgKCBjdXIgKSB7CgkJCQkJaiA9IDA7CgkJCQkJd2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkgewoJCQkJCQkvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzCgkJCQkJCXdoaWxlICggY3VyLmluZGV4T2YoICIgIiArIGNsYXp6ICsgIiAiICkgPj0gMCApIHsKCQkJCQkJCWN1ciA9IGN1ci5yZXBsYWNlKCAiICIgKyBjbGF6eiArICIgIiwgIiAiICk7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCS8vIG9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuCgkJCQkJZmluYWxWYWx1ZSA9IHZhbHVlID8galF1ZXJ5LnRyaW0oIGN1ciApIDogIiI7CgkJCQkJaWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHsKCQkJCQkJZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkgewoJCXZhciB0eXBlID0gdHlwZW9mIHZhbHVlOwoKCQlpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gImJvb2xlYW4iICYmIHR5cGUgPT09ICJzdHJpbmciICkgewoJCQlyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTsKCQl9CgoJCWlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7CgkJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7CgkJCQlqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyggdmFsdWUuY2FsbCh0aGlzLCBpLCB0aGlzLmNsYXNzTmFtZSwgc3RhdGVWYWwpLCBzdGF0ZVZhbCApOwoJCQl9KTsKCQl9CgoJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCWlmICggdHlwZSA9PT0gInN0cmluZyIgKSB7CgkJCQkvLyB0b2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lcwoJCQkJdmFyIGNsYXNzTmFtZSwKCQkJCQlpID0gMCwKCQkJCQlzZWxmID0galF1ZXJ5KCB0aGlzICksCgkJCQkJY2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTsKCgkJCQl3aGlsZSAoIChjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSkgKSB7CgkJCQkJLy8gY2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0CgkJCQkJaWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHsKCQkJCQkJc2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJc2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7CgkJCQkJfQoJCQkJfQoKCQkJLy8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWUKCQkJfSBlbHNlIGlmICggdHlwZSA9PT0gc3RydW5kZWZpbmVkIHx8IHR5cGUgPT09ICJib29sZWFuIiApIHsKCQkJCWlmICggdGhpcy5jbGFzc05hbWUgKSB7CgkJCQkJLy8gc3RvcmUgY2xhc3NOYW1lIGlmIHNldAoJCQkJCWpRdWVyeS5fZGF0YSggdGhpcywgIl9fY2xhc3NOYW1lX18iLCB0aGlzLmNsYXNzTmFtZSApOwoJCQkJfQoKCQkJCS8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkICJmYWxzZSIsCgkJCQkvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLgoJCQkJLy8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSwKCQkJCS8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC4KCQkJCXRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID8gIiIgOiBqUXVlcnkuX2RhdGEoIHRoaXMsICJfX2NsYXNzTmFtZV9fIiApIHx8ICIiOwoJCQl9CgkJfSk7Cgl9LAoKCWhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CgkJdmFyIGNsYXNzTmFtZSA9ICIgIiArIHNlbGVjdG9yICsgIiAiLAoJCQlpID0gMCwKCQkJbCA9IHRoaXMubGVuZ3RoOwoJCWZvciAoIDsgaSA8IGw7IGkrKyApIHsKCQkJaWYgKCB0aGlzW2ldLm5vZGVUeXBlID09PSAxICYmICgiICIgKyB0aGlzW2ldLmNsYXNzTmFtZSArICIgIikucmVwbGFjZShyY2xhc3MsICIgIikuaW5kZXhPZiggY2xhc3NOYW1lICkgPj0gMCApIHsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJfQoKCQlyZXR1cm4gZmFsc2U7Cgl9Cn0pOwoKCgoKLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvbgoKCmpRdWVyeS5lYWNoKCAoImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrICIgKwoJIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlICIgKwoJImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnUiKS5zcGxpdCgiICIpLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKCgkvLyBIYW5kbGUgZXZlbnQgYmluZGluZwoJalF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7CgkJcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID8KCQkJdGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6CgkJCXRoaXMudHJpZ2dlciggbmFtZSApOwoJfTsKfSk7CgpqUXVlcnkuZm4uZXh0ZW5kKHsKCWhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHsKCQlyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTsKCX0sCgoJYmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHsKCQlyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7Cgl9LAoJdW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkgewoJCXJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7Cgl9LAoKCWRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHsKCQlyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApOwoJfSwKCXVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkgewoJCS8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dICkKCQlyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHRoaXMub2ZmKCBzZWxlY3RvciwgIioqIiApIDogdGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCAiKioiLCBmbiApOwoJfQp9KTsKCgp2YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7Cgp2YXIgcnF1ZXJ5ID0gKC9cPy8pOwoKCgp2YXIgcnZhbGlkdG9rZW5zID0gLygsKXwoXFt8eyl8KH18XSl8Iig/OlteIlxcXHJcbl18XFxbIlxcXC9iZm5ydF18XFx1W1xkYS1mQS1GXXs0fSkqIlxzKjo/fHRydWV8ZmFsc2V8bnVsbHwtPyg/ITBcZClcZCsoPzpcLlxkK3wpKD86W2VFXVsrLV0/XGQrfCkvZzsKCmpRdWVyeS5wYXJzZUpTT04gPSBmdW5jdGlvbiggZGF0YSApIHsKCS8vIEF0dGVtcHQgdG8gcGFyc2UgdXNpbmcgdGhlIG5hdGl2ZSBKU09OIHBhcnNlciBmaXJzdAoJaWYgKCB3aW5kb3cuSlNPTiAmJiB3aW5kb3cuSlNPTi5wYXJzZSApIHsKCQkvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMwoJCS8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0CgkJcmV0dXJuIHdpbmRvdy5KU09OLnBhcnNlKCBkYXRhICsgIiIgKTsKCX0KCgl2YXIgcmVxdWlyZU5vbkNvbW1hLAoJCWRlcHRoID0gbnVsbCwKCQlzdHIgPSBqUXVlcnkudHJpbSggZGF0YSArICIiICk7CgoJLy8gR3VhcmQgYWdhaW5zdCBpbnZhbGlkIChhbmQgcG9zc2libHkgZGFuZ2Vyb3VzKSBpbnB1dCBieSBlbnN1cmluZyB0aGF0IG5vdGhpbmcgcmVtYWlucwoJLy8gYWZ0ZXIgcmVtb3ZpbmcgdmFsaWQgdG9rZW5zCglyZXR1cm4gc3RyICYmICFqUXVlcnkudHJpbSggc3RyLnJlcGxhY2UoIHJ2YWxpZHRva2VucywgZnVuY3Rpb24oIHRva2VuLCBjb21tYSwgb3BlbiwgY2xvc2UgKSB7CgoJCS8vIEZvcmNlIHRlcm1pbmF0aW9uIGlmIHdlIHNlZSBhIG1pc3BsYWNlZCBjb21tYQoJCWlmICggcmVxdWlyZU5vbkNvbW1hICYmIGNvbW1hICkgewoJCQlkZXB0aCA9IDA7CgkJfQoKCQkvLyBQZXJmb3JtIG5vIG1vcmUgcmVwbGFjZW1lbnRzIGFmdGVyIHJldHVybmluZyB0byBvdXRlcm1vc3QgZGVwdGgKCQlpZiAoIGRlcHRoID09PSAwICkgewoJCQlyZXR1cm4gdG9rZW47CgkJfQoKCQkvLyBDb21tYXMgbXVzdCBub3QgZm9sbG93ICJbIiwgInsiLCBvciAiLCIKCQlyZXF1aXJlTm9uQ29tbWEgPSBvcGVuIHx8IGNvbW1hOwoKCQkvLyBEZXRlcm1pbmUgbmV3IGRlcHRoCgkJLy8gYXJyYXkvb2JqZWN0IG9wZW4gKCJbIiBvciAieyIpOiBkZXB0aCArPSB0cnVlIC0gZmFsc2UgKGluY3JlbWVudCkKCQkvLyBhcnJheS9vYmplY3QgY2xvc2UgKCJdIiBvciAifSIpOiBkZXB0aCArPSBmYWxzZSAtIHRydWUgKGRlY3JlbWVudCkKCQkvLyBvdGhlciBjYXNlcyAoIiwiIG9yIHByaW1pdGl2ZSk6IGRlcHRoICs9IHRydWUgLSB0cnVlIChudW1lcmljIGNhc3QpCgkJZGVwdGggKz0gIWNsb3NlIC0gIW9wZW47CgoJCS8vIFJlbW92ZSB0aGlzIHRva2VuCgkJcmV0dXJuICIiOwoJfSkgKSA/CgkJKCBGdW5jdGlvbiggInJldHVybiAiICsgc3RyICkgKSgpIDoKCQlqUXVlcnkuZXJyb3IoICJJbnZhbGlkIEpTT046ICIgKyBkYXRhICk7Cn07CgoKLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZwpqUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHsKCXZhciB4bWwsIHRtcDsKCWlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09ICJzdHJpbmciICkgewoJCXJldHVybiBudWxsOwoJfQoJdHJ5IHsKCQlpZiAoIHdpbmRvdy5ET01QYXJzZXIgKSB7IC8vIFN0YW5kYXJkCgkJCXRtcCA9IG5ldyBET01QYXJzZXIoKTsKCQkJeG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgInRleHQveG1sIiApOwoJCX0gZWxzZSB7IC8vIElFCgkJCXhtbCA9IG5ldyBBY3RpdmVYT2JqZWN0KCAiTWljcm9zb2Z0LlhNTERPTSIgKTsKCQkJeG1sLmFzeW5jID0gImZhbHNlIjsKCQkJeG1sLmxvYWRYTUwoIGRhdGEgKTsKCQl9Cgl9IGNhdGNoKCBlICkgewoJCXhtbCA9IHVuZGVmaW5lZDsKCX0KCWlmICggIXhtbCB8fCAheG1sLmRvY3VtZW50RWxlbWVudCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJwYXJzZXJlcnJvciIgKS5sZW5ndGggKSB7CgkJalF1ZXJ5LmVycm9yKCAiSW52YWxpZCBYTUw6ICIgKyBkYXRhICk7Cgl9CglyZXR1cm4geG1sOwp9OwoKCnZhcgoJLy8gRG9jdW1lbnQgbG9jYXRpb24KCWFqYXhMb2NQYXJ0cywKCWFqYXhMb2NhdGlvbiwKCglyaGFzaCA9IC8jLiokLywKCXJ0cyA9IC8oWz8mXSlfPVteJl0qLywKCXJoZWFkZXJzID0gL14oLio/KTpbIFx0XSooW15cclxuXSopXHI/JC9tZywgLy8gSUUgbGVhdmVzIGFuIFxyIGNoYXJhY3RlciBhdCBFT0wKCS8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvbgoJcmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLywKCXJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLAoJcnByb3RvY29sID0gL15cL1wvLywKCXJ1cmwgPSAvXihbXHcuKy1dKzopKD86XC9cLyg/OlteXC8/I10qQHwpKFteXC8/IzpdKikoPzo6KFxkKyl8KXwpLywKCgkvKiBQcmVmaWx0ZXJzCgkgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKQoJICogMikgVGhlc2UgYXJlIGNhbGxlZDoKCSAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnQKCSAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSkKCSAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGUKCSAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgIioiIGNhbiBiZSB1c2VkCgkgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvICIqIiBpZiBuZWVkZWQKCSAqLwoJcHJlZmlsdGVycyA9IHt9LAoKCS8qIFRyYW5zcG9ydHMgYmluZGluZ3MKCSAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGUKCSAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgIioiIGNhbiBiZSB1c2VkCgkgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byAiKiIgaWYgbmVlZGVkCgkgKi8KCXRyYW5zcG9ydHMgPSB7fSwKCgkvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb24KCWFsbFR5cGVzID0gIiovIi5jb25jYXQoIioiKTsKCi8vICM4MTM4LCBJRSBtYXkgdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gYWNjZXNzaW5nCi8vIGEgZmllbGQgZnJvbSB3aW5kb3cubG9jYXRpb24gaWYgZG9jdW1lbnQuZG9tYWluIGhhcyBiZWVuIHNldAp0cnkgewoJYWpheExvY2F0aW9uID0gbG9jYXRpb24uaHJlZjsKfSBjYXRjaCggZSApIHsKCS8vIFVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUgb2YgYW4gQSBlbGVtZW50CgkvLyBzaW5jZSBJRSB3aWxsIG1vZGlmeSBpdCBnaXZlbiBkb2N1bWVudC5sb2NhdGlvbgoJYWpheExvY2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImEiICk7CglhamF4TG9jYXRpb24uaHJlZiA9ICIiOwoJYWpheExvY2F0aW9uID0gYWpheExvY2F0aW9uLmhyZWY7Cn0KCi8vIFNlZ21lbnQgbG9jYXRpb24gaW50byBwYXJ0cwphamF4TG9jUGFydHMgPSBydXJsLmV4ZWMoIGFqYXhMb2NhdGlvbi50b0xvd2VyQ2FzZSgpICkgfHwgW107CgovLyBCYXNlICJjb25zdHJ1Y3RvciIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydApmdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHsKCgkvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvICIqIgoJcmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7CgoJCWlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gInN0cmluZyIgKSB7CgkJCWZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247CgkJCWRhdGFUeXBlRXhwcmVzc2lvbiA9ICIqIjsKCQl9CgoJCXZhciBkYXRhVHlwZSwKCQkJaSA9IDAsCgkJCWRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTsKCgkJaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkgewoJCQkvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uCgkJCXdoaWxlICggKGRhdGFUeXBlID0gZGF0YVR5cGVzW2krK10pICkgewoJCQkJLy8gUHJlcGVuZCBpZiByZXF1ZXN0ZWQKCQkJCWlmICggZGF0YVR5cGUuY2hhckF0KCAwICkgPT09ICIrIiApIHsKCQkJCQlkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgIioiOwoJCQkJCShzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnVuc2hpZnQoIGZ1bmMgKTsKCgkJCQkvLyBPdGhlcndpc2UgYXBwZW5kCgkJCQl9IGVsc2UgewoJCQkJCShzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnB1c2goIGZ1bmMgKTsKCQkJCX0KCQkJfQoJCX0KCX07Cn0KCi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0cwpmdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkgewoKCXZhciBpbnNwZWN0ZWQgPSB7fSwKCQlzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTsKCglmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHsKCQl2YXIgc2VsZWN0ZWQ7CgkJaW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTsKCQlqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkgewoJCQl2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApOwoJCQlpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSAic3RyaW5nIiAmJiAhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7CgkJCQlvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7CgkJCQlpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7CgkJCQlyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7CgkJCX0KCQl9KTsKCQlyZXR1cm4gc2VsZWN0ZWQ7Cgl9CgoJcmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyAiKiIgXSAmJiBpbnNwZWN0KCAiKiIgKTsKfQoKLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zCi8vIHRoYXQgdGFrZXMgImZsYXQiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKQovLyBGaXhlcyAjOTg4NwpmdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHsKCXZhciBkZWVwLCBrZXksCgkJZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9OwoKCWZvciAoIGtleSBpbiBzcmMgKSB7CgkJaWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7CgkJCSggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8IChkZWVwID0ge30pICkgKVsga2V5IF0gPSBzcmNbIGtleSBdOwoJCX0KCX0KCWlmICggZGVlcCApIHsKCQlqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTsKCX0KCglyZXR1cm4gdGFyZ2V0Owp9CgovKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6CiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpCiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZQogKi8KZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHsKCXZhciBmaXJzdERhdGFUeXBlLCBjdCwgZmluYWxEYXRhVHlwZSwgdHlwZSwKCQljb250ZW50cyA9IHMuY29udGVudHMsCgkJZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7CgoJLy8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3MKCXdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09ICIqIiApIHsKCQlkYXRhVHlwZXMuc2hpZnQoKTsKCQlpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7CgkJCWN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcigiQ29udGVudC1UeXBlIik7CgkJfQoJfQoKCS8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZQoJaWYgKCBjdCApIHsKCQlmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkgewoJCQlpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkgewoJCQkJZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTsKCQkJCWJyZWFrOwoJCQl9CgkJfQoJfQoKCS8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZQoJaWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7CgkJZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdOwoJfSBlbHNlIHsKCQkvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzCgkJZm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7CgkJCWlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArICIgIiArIGRhdGFUeXBlc1swXSBdICkgewoJCQkJZmluYWxEYXRhVHlwZSA9IHR5cGU7CgkJCQlicmVhazsKCQkJfQoJCQlpZiAoICFmaXJzdERhdGFUeXBlICkgewoJCQkJZmlyc3REYXRhVHlwZSA9IHR5cGU7CgkJCX0KCQl9CgkJLy8gT3IganVzdCB1c2UgZmlyc3Qgb25lCgkJZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTsKCX0KCgkvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlCgkvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZAoJLy8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZQoJaWYgKCBmaW5hbERhdGFUeXBlICkgewoJCWlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7CgkJCWRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7CgkJfQoJCXJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTsKCX0KfQoKLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZQogKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2UKICovCmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHsKCXZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LAoJCWNvbnZlcnRlcnMgPSB7fSwKCQkvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uCgkJZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTsKCgkvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXMKCWlmICggZGF0YVR5cGVzWyAxIF0gKSB7CgkJZm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7CgkJCWNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07CgkJfQoJfQoKCWN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTsKCgkvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZQoJd2hpbGUgKCBjdXJyZW50ICkgewoKCQlpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHsKCQkJanFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7CgkJfQoKCQkvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZAoJCWlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHsKCQkJcmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7CgkJfQoKCQlwcmV2ID0gY3VycmVudDsKCQljdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7CgoJCWlmICggY3VycmVudCApIHsKCgkJCS8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG8KCQkJaWYgKCBjdXJyZW50ID09PSAiKiIgKSB7CgoJCQkJY3VycmVudCA9IHByZXY7CgoJCQkvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50CgkJCX0gZWxzZSBpZiAoIHByZXYgIT09ICIqIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkgewoKCQkJCS8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyCgkJCQljb252ID0gY29udmVydGVyc1sgcHJldiArICIgIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyAiKiAiICsgY3VycmVudCBdOwoKCQkJCS8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyCgkJCQlpZiAoICFjb252ICkgewoJCQkJCWZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7CgoJCQkJCQkvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnQKCQkJCQkJdG1wID0gY29udjIuc3BsaXQoICIgIiApOwoJCQkJCQlpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkgewoKCQkJCQkJCS8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dAoJCQkJCQkJY29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyAiICIgKyB0bXBbIDAgXSBdIHx8CgkJCQkJCQkJY29udmVydGVyc1sgIiogIiArIHRtcFsgMCBdIF07CgkJCQkJCQlpZiAoIGNvbnYgKSB7CgkJCQkJCQkJLy8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVycwoJCQkJCQkJCWlmICggY29udiA9PT0gdHJ1ZSApIHsKCQkJCQkJCQkJY29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07CgoJCQkJCQkJCS8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGUKCQkJCQkJCQl9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkgewoJCQkJCQkJCQljdXJyZW50ID0gdG1wWyAwIF07CgkJCQkJCQkJCWRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApOwoJCQkJCQkJCX0KCQkJCQkJCQlicmVhazsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCQkJCX0KCgkJCQkvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSkKCQkJCWlmICggY29udiAhPT0gdHJ1ZSApIHsKCgkJCQkJLy8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbQoJCQkJCWlmICggY29udiAmJiBzWyAidGhyb3dzIiBdICkgewoJCQkJCQlyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJdHJ5IHsKCQkJCQkJCXJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTsKCQkJCQkJfSBjYXRjaCAoIGUgKSB7CgkJCQkJCQlyZXR1cm4geyBzdGF0ZTogInBhcnNlcmVycm9yIiwgZXJyb3I6IGNvbnYgPyBlIDogIk5vIGNvbnZlcnNpb24gZnJvbSAiICsgcHJldiArICIgdG8gIiArIGN1cnJlbnQgfTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCX0KCglyZXR1cm4geyBzdGF0ZTogInN1Y2Nlc3MiLCBkYXRhOiByZXNwb25zZSB9Owp9CgpqUXVlcnkuZXh0ZW5kKHsKCgkvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXMKCWFjdGl2ZTogMCwKCgkvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0CglsYXN0TW9kaWZpZWQ6IHt9LAoJZXRhZzoge30sCgoJYWpheFNldHRpbmdzOiB7CgkJdXJsOiBhamF4TG9jYXRpb24sCgkJdHlwZTogIkdFVCIsCgkJaXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggYWpheExvY1BhcnRzWyAxIF0gKSwKCQlnbG9iYWw6IHRydWUsCgkJcHJvY2Vzc0RhdGE6IHRydWUsCgkJYXN5bmM6IHRydWUsCgkJY29udGVudFR5cGU6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLAoJCS8qCgkJdGltZW91dDogMCwKCQlkYXRhOiBudWxsLAoJCWRhdGFUeXBlOiBudWxsLAoJCXVzZXJuYW1lOiBudWxsLAoJCXBhc3N3b3JkOiBudWxsLAoJCWNhY2hlOiBudWxsLAoJCXRocm93czogZmFsc2UsCgkJdHJhZGl0aW9uYWw6IGZhbHNlLAoJCWhlYWRlcnM6IHt9LAoJCSovCgoJCWFjY2VwdHM6IHsKCQkJIioiOiBhbGxUeXBlcywKCQkJdGV4dDogInRleHQvcGxhaW4iLAoJCQlodG1sOiAidGV4dC9odG1sIiwKCQkJeG1sOiAiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCIsCgkJCWpzb246ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQiCgkJfSwKCgkJY29udGVudHM6IHsKCQkJeG1sOiAveG1sLywKCQkJaHRtbDogL2h0bWwvLAoJCQlqc29uOiAvanNvbi8KCQl9LAoKCQlyZXNwb25zZUZpZWxkczogewoJCQl4bWw6ICJyZXNwb25zZVhNTCIsCgkJCXRleHQ6ICJyZXNwb25zZVRleHQiLAoJCQlqc29uOiAicmVzcG9uc2VKU09OIgoJCX0sCgoJCS8vIERhdGEgY29udmVydGVycwoJCS8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCAiKiIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlCgkJY29udmVydGVyczogewoKCQkJLy8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0CgkJCSIqIHRleHQiOiBTdHJpbmcsCgoJCQkvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbikKCQkJInRleHQgaHRtbCI6IHRydWUsCgoJCQkvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uCgkJCSJ0ZXh0IGpzb24iOiBqUXVlcnkucGFyc2VKU09OLAoKCQkJLy8gUGFyc2UgdGV4dCBhcyB4bWwKCQkJInRleHQgeG1sIjogalF1ZXJ5LnBhcnNlWE1MCgkJfSwKCgkJLy8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDoKCQkvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmCgkJLy8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmUKCQkvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZCkKCQlmbGF0T3B0aW9uczogewoJCQl1cmw6IHRydWUsCgkJCWNvbnRleHQ6IHRydWUKCQl9Cgl9LAoKCS8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0CgkvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuCgkvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLgoJYWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHsKCQlyZXR1cm4gc2V0dGluZ3MgPwoKCQkJLy8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3QKCQkJYWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOgoKCQkJLy8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5ncwoJCQlhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTsKCX0sCgoJYWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksCglhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSwKCgkvLyBNYWluIG1ldGhvZAoJYWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHsKCgkJLy8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmUKCQlpZiAoIHR5cGVvZiB1cmwgPT09ICJvYmplY3QiICkgewoJCQlvcHRpb25zID0gdXJsOwoJCQl1cmwgPSB1bmRlZmluZWQ7CgkJfQoKCQkvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdAoJCW9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKCQl2YXIgLy8gQ3Jvc3MtZG9tYWluIGRldGVjdGlvbiB2YXJzCgkJCXBhcnRzLAoJCQkvLyBMb29wIHZhcmlhYmxlCgkJCWksCgkJCS8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW0KCQkJY2FjaGVVUkwsCgkJCS8vIFJlc3BvbnNlIGhlYWRlcnMgYXMgc3RyaW5nCgkJCXJlc3BvbnNlSGVhZGVyc1N0cmluZywKCQkJLy8gdGltZW91dCBoYW5kbGUKCQkJdGltZW91dFRpbWVyLAoKCQkJLy8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkCgkJCWZpcmVHbG9iYWxzLAoKCQkJdHJhbnNwb3J0LAoJCQkvLyBSZXNwb25zZSBoZWFkZXJzCgkJCXJlc3BvbnNlSGVhZGVycywKCQkJLy8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdAoJCQlzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSwKCQkJLy8gQ2FsbGJhY2tzIGNvbnRleHQKCQkJY2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsCgkJCS8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb24KCQkJZ2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmICggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/CgkJCQlqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDoKCQkJCWpRdWVyeS5ldmVudCwKCQkJLy8gRGVmZXJyZWRzCgkJCWRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksCgkJCWNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLAoJCQkvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrcwoJCQlzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LAoJCQkvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKQoJCQlyZXF1ZXN0SGVhZGVycyA9IHt9LAoJCQlyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sCgkJCS8vIFRoZSBqcVhIUiBzdGF0ZQoJCQlzdGF0ZSA9IDAsCgkJCS8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZQoJCQlzdHJBYm9ydCA9ICJjYW5jZWxlZCIsCgkJCS8vIEZha2UgeGhyCgkJCWpxWEhSID0gewoJCQkJcmVhZHlTdGF0ZTogMCwKCgkJCQkvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkCgkJCQlnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHsKCQkJCQl2YXIgbWF0Y2g7CgkJCQkJaWYgKCBzdGF0ZSA9PT0gMiApIHsKCQkJCQkJaWYgKCAhcmVzcG9uc2VIZWFkZXJzICkgewoJCQkJCQkJcmVzcG9uc2VIZWFkZXJzID0ge307CgkJCQkJCQl3aGlsZSAoIChtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApKSApIHsKCQkJCQkJCQlyZXNwb25zZUhlYWRlcnNbIG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQkJbWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07CgkJCQkJfQoJCQkJCXJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoOwoJCQkJfSwKCgkJCQkvLyBSYXcgc3RyaW5nCgkJCQlnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkgewoJCQkJCXJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7CgkJCQl9LAoKCQkJCS8vIENhY2hlcyB0aGUgaGVhZGVyCgkJCQlzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7CgkJCQkJdmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpOwoJCQkJCWlmICggIXN0YXRlICkgewoJCQkJCQluYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gfHwgbmFtZTsKCQkJCQkJcmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlOwoJCQkJCX0KCQkJCQlyZXR1cm4gdGhpczsKCQkJCX0sCgoJCQkJLy8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXIKCQkJCW92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkgewoJCQkJCWlmICggIXN0YXRlICkgewoJCQkJCQlzLm1pbWVUeXBlID0gdHlwZTsKCQkJCQl9CgkJCQkJcmV0dXJuIHRoaXM7CgkJCQl9LAoKCQkJCS8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzCgkJCQlzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkgewoJCQkJCXZhciBjb2RlOwoJCQkJCWlmICggbWFwICkgewoJCQkJCQlpZiAoIHN0YXRlIDwgMiApIHsKCQkJCQkJCWZvciAoIGNvZGUgaW4gbWFwICkgewoJCQkJCQkJCS8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXMKCQkJCQkJCQlzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTsKCQkJCQkJCX0KCQkJCQkJfSBlbHNlIHsKCQkJCQkJCS8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrcwoJCQkJCQkJanFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7CgkJCQkJCX0KCQkJCQl9CgkJCQkJcmV0dXJuIHRoaXM7CgkJCQl9LAoKCQkJCS8vIENhbmNlbCB0aGUgcmVxdWVzdAoJCQkJYWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkgewoJCQkJCXZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0OwoJCQkJCWlmICggdHJhbnNwb3J0ICkgewoJCQkJCQl0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApOwoJCQkJCX0KCQkJCQlkb25lKCAwLCBmaW5hbFRleHQgKTsKCQkJCQlyZXR1cm4gdGhpczsKCQkJCX0KCQkJfTsKCgkJLy8gQXR0YWNoIGRlZmVycmVkcwoJCWRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDsKCQlqcVhIUi5zdWNjZXNzID0ganFYSFIuZG9uZTsKCQlqcVhIUi5lcnJvciA9IGpxWEhSLmZhaWw7CgoJCS8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKQoJCS8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKCM1ODY2OiBJRTcgaXNzdWUgd2l0aCBwcm90b2NvbC1sZXNzIHVybHMpCgkJLy8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSkKCQkvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGUKCQlzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgYWpheExvY2F0aW9uICkgKyAiIiApLnJlcGxhY2UoIHJoYXNoLCAiIiApLnJlcGxhY2UoIHJwcm90b2NvbCwgYWpheExvY1BhcnRzWyAxIF0gKyAiLy8iICk7CgoJCS8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNAoJCXMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7CgoJCS8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3QKCQlzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8ICIqIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgIiIgXTsKCgkJLy8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHdlIGhhdmUgYSBwcm90b2NvbDpob3N0OnBvcnQgbWlzbWF0Y2gKCQlpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHsKCQkJcGFydHMgPSBydXJsLmV4ZWMoIHMudXJsLnRvTG93ZXJDYXNlKCkgKTsKCQkJcy5jcm9zc0RvbWFpbiA9ICEhKCBwYXJ0cyAmJgoJCQkJKCBwYXJ0c1sgMSBdICE9PSBhamF4TG9jUGFydHNbIDEgXSB8fCBwYXJ0c1sgMiBdICE9PSBhamF4TG9jUGFydHNbIDIgXSB8fAoJCQkJCSggcGFydHNbIDMgXSB8fCAoIHBhcnRzWyAxIF0gPT09ICJodHRwOiIgPyAiODAiIDogIjQ0MyIgKSApICE9PQoJCQkJCQkoIGFqYXhMb2NQYXJ0c1sgMyBdIHx8ICggYWpheExvY1BhcnRzWyAxIF0gPT09ICJodHRwOiIgPyAiODAiIDogIjQ0MyIgKSApICkKCQkJKTsKCQl9CgoJCS8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZwoJCWlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gInN0cmluZyIgKSB7CgkJCXMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7CgkJfQoKCQkvLyBBcHBseSBwcmVmaWx0ZXJzCgkJaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7CgoJCS8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlCgkJaWYgKCBzdGF0ZSA9PT0gMiApIHsKCQkJcmV0dXJuIGpxWEhSOwoJCX0KCgkJLy8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG8KCQlmaXJlR2xvYmFscyA9IHMuZ2xvYmFsOwoKCQkvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzCgkJaWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7CgkJCWpRdWVyeS5ldmVudC50cmlnZ2VyKCJhamF4U3RhcnQiKTsKCQl9CgoJCS8vIFVwcGVyY2FzZSB0aGUgdHlwZQoJCXMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpOwoKCQkvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudAoJCXMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApOwoKCQkvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2UKCQkvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb24KCQljYWNoZVVSTCA9IHMudXJsOwoKCQkvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudAoJCWlmICggIXMuaGFzQ29udGVudCApIHsKCgkJCS8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmwKCQkJaWYgKCBzLmRhdGEgKSB7CgkJCQljYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/ICImIiA6ICI/IiApICsgcy5kYXRhICk7CgkJCQkvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5CgkJCQlkZWxldGUgcy5kYXRhOwoJCQl9CgoJCQkvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkCgkJCWlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7CgkJCQlzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID8KCgkJCQkJLy8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWUKCQkJCQljYWNoZVVSTC5yZXBsYWNlKCBydHMsICIkMV89IiArIG5vbmNlKysgKSA6CgoJCQkJCS8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmQKCQkJCQljYWNoZVVSTCArICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyAiJiIgOiAiPyIgKSArICJfPSIgKyBub25jZSsrOwoJCQl9CgkJfQoKCQkvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLgoJCWlmICggcy5pZk1vZGlmaWVkICkgewoJCQlpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7CgkJCQlqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCAiSWYtTW9kaWZpZWQtU2luY2UiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7CgkJCX0KCQkJaWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHsKCQkJCWpxWEhSLnNldFJlcXVlc3RIZWFkZXIoICJJZi1Ob25lLU1hdGNoIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTsKCQkJfQoJCX0KCgkJLy8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50CgkJaWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7CgkJCWpxWEhSLnNldFJlcXVlc3RIZWFkZXIoICJDb250ZW50LVR5cGUiLCBzLmNvbnRlbnRUeXBlICk7CgkJfQoKCQkvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlCgkJanFYSFIuc2V0UmVxdWVzdEhlYWRlcigKCQkJIkFjY2VwdCIsCgkJCXMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdID8KCQkJCXMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbMF0gXSArICggcy5kYXRhVHlwZXNbIDAgXSAhPT0gIioiID8gIiwgIiArIGFsbFR5cGVzICsgIjsgcT0wLjAxIiA6ICIiICkgOgoJCQkJcy5hY2NlcHRzWyAiKiIgXQoJCSk7CgoJCS8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvbgoJCWZvciAoIGkgaW4gcy5oZWFkZXJzICkgewoJCQlqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApOwoJCX0KCgkJLy8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydAoJCWlmICggcy5iZWZvcmVTZW5kICYmICggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHsKCQkJLy8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuCgkJCXJldHVybiBqcVhIUi5hYm9ydCgpOwoJCX0KCgkJLy8gYWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uCgkJc3RyQWJvcnQgPSAiYWJvcnQiOwoKCQkvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHMKCQlmb3IgKCBpIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0gKSB7CgkJCWpxWEhSWyBpIF0oIHNbIGkgXSApOwoJCX0KCgkJLy8gR2V0IHRyYW5zcG9ydAoJCXRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApOwoKCQkvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnQKCQlpZiAoICF0cmFuc3BvcnQgKSB7CgkJCWRvbmUoIC0xLCAiTm8gVHJhbnNwb3J0IiApOwoJCX0gZWxzZSB7CgkJCWpxWEhSLnJlYWR5U3RhdGUgPSAxOwoKCQkJLy8gU2VuZCBnbG9iYWwgZXZlbnQKCQkJaWYgKCBmaXJlR2xvYmFscyApIHsKCQkJCWdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCAiYWpheFNlbmQiLCBbIGpxWEhSLCBzIF0gKTsKCQkJfQoJCQkvLyBUaW1lb3V0CgkJCWlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkgewoJCQkJdGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCQlqcVhIUi5hYm9ydCgidGltZW91dCIpOwoJCQkJfSwgcy50aW1lb3V0ICk7CgkJCX0KCgkJCXRyeSB7CgkJCQlzdGF0ZSA9IDE7CgkJCQl0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTsKCQkJfSBjYXRjaCAoIGUgKSB7CgkJCQkvLyBQcm9wYWdhdGUgZXhjZXB0aW9uIGFzIGVycm9yIGlmIG5vdCBkb25lCgkJCQlpZiAoIHN0YXRlIDwgMiApIHsKCQkJCQlkb25lKCAtMSwgZSApOwoJCQkJLy8gU2ltcGx5IHJldGhyb3cgb3RoZXJ3aXNlCgkJCQl9IGVsc2UgewoJCQkJCXRocm93IGU7CgkJCQl9CgkJCX0KCQl9CgoJCS8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZQoJCWZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkgewoJCQl2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLAoJCQkJc3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7CgoJCQkvLyBDYWxsZWQgb25jZQoJCQlpZiAoIHN0YXRlID09PSAyICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBTdGF0ZSBpcyAiZG9uZSIgbm93CgkJCXN0YXRlID0gMjsKCgkJCS8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzCgkJCWlmICggdGltZW91dFRpbWVyICkgewoJCQkJY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTsKCQkJfQoKCQkJLy8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb24KCQkJLy8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZCkKCQkJdHJhbnNwb3J0ID0gdW5kZWZpbmVkOwoKCQkJLy8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVycwoJCQlyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8ICIiOwoKCQkJLy8gU2V0IHJlYWR5U3RhdGUKCQkJanFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDsKCgkJCS8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsCgkJCWlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0OwoKCQkJLy8gR2V0IHJlc3BvbnNlIGRhdGEKCQkJaWYgKCByZXNwb25zZXMgKSB7CgkJCQlyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTsKCQkJfQoKCQkJLy8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KQoJCQlyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApOwoKCQkJLy8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmcKCQkJaWYgKCBpc1N1Y2Nlc3MgKSB7CgoJCQkJLy8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS4KCQkJCWlmICggcy5pZk1vZGlmaWVkICkgewoJCQkJCW1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIkxhc3QtTW9kaWZpZWQiKTsKCQkJCQlpZiAoIG1vZGlmaWVkICkgewoJCQkJCQlqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7CgkJCQkJfQoJCQkJCW1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoImV0YWciKTsKCQkJCQlpZiAoIG1vZGlmaWVkICkgewoJCQkJCQlqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkOwoJCQkJCX0KCQkJCX0KCgkJCQkvLyBpZiBubyBjb250ZW50CgkJCQlpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gIkhFQUQiICkgewoJCQkJCXN0YXR1c1RleHQgPSAibm9jb250ZW50IjsKCgkJCQkvLyBpZiBub3QgbW9kaWZpZWQKCQkJCX0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkgewoJCQkJCXN0YXR1c1RleHQgPSAibm90bW9kaWZpZWQiOwoKCQkJCS8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdAoJCQkJfSBlbHNlIHsKCQkJCQlzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7CgkJCQkJc3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7CgkJCQkJZXJyb3IgPSByZXNwb25zZS5lcnJvcjsKCQkJCQlpc1N1Y2Nlc3MgPSAhZXJyb3I7CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQkvLyBXZSBleHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dAoJCQkJLy8gdGhlbiBub3JtYWxpemUgc3RhdHVzVGV4dCBhbmQgc3RhdHVzIGZvciBub24tYWJvcnRzCgkJCQllcnJvciA9IHN0YXR1c1RleHQ7CgkJCQlpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHsKCQkJCQlzdGF0dXNUZXh0ID0gImVycm9yIjsKCQkJCQlpZiAoIHN0YXR1cyA8IDAgKSB7CgkJCQkJCXN0YXR1cyA9IDA7CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQkvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdAoJCQlqcVhIUi5zdGF0dXMgPSBzdGF0dXM7CgkJCWpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgIiI7CgoJCQkvLyBTdWNjZXNzL0Vycm9yCgkJCWlmICggaXNTdWNjZXNzICkgewoJCQkJZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7CgkJCX0gZWxzZSB7CgkJCQlkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTsKCQkJfQoKCQkJLy8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3MKCQkJanFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApOwoJCQlzdGF0dXNDb2RlID0gdW5kZWZpbmVkOwoKCQkJaWYgKCBmaXJlR2xvYmFscyApIHsKCQkJCWdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyAiYWpheFN1Y2Nlc3MiIDogImFqYXhFcnJvciIsCgkJCQkJWyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTsKCQkJfQoKCQkJLy8gQ29tcGxldGUKCQkJY29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTsKCgkJCWlmICggZmlyZUdsb2JhbHMgKSB7CgkJCQlnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggImFqYXhDb21wbGV0ZSIsIFsganFYSFIsIHMgXSApOwoJCQkJLy8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyCgkJCQlpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkgewoJCQkJCWpRdWVyeS5ldmVudC50cmlnZ2VyKCJhamF4U3RvcCIpOwoJCQkJfQoJCQl9CgkJfQoKCQlyZXR1cm4ganFYSFI7Cgl9LAoKCWdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkgewoJCXJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCAianNvbiIgKTsKCX0sCgoJZ2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHsKCQlyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCAic2NyaXB0IiApOwoJfQp9KTsKCmpRdWVyeS5lYWNoKCBbICJnZXQiLCAicG9zdCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHsKCWpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHsKCQkvLyBzaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZAoJCWlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHsKCQkJdHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7CgkJCWNhbGxiYWNrID0gZGF0YTsKCQkJZGF0YSA9IHVuZGVmaW5lZDsKCQl9CgoJCXJldHVybiBqUXVlcnkuYWpheCh7CgkJCXVybDogdXJsLAoJCQl0eXBlOiBtZXRob2QsCgkJCWRhdGFUeXBlOiB0eXBlLAoJCQlkYXRhOiBkYXRhLAoJCQlzdWNjZXNzOiBjYWxsYmFjawoJCX0pOwoJfTsKfSk7CgovLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50cwpqUXVlcnkuZWFjaCggWyAiYWpheFN0YXJ0IiwgImFqYXhTdG9wIiwgImFqYXhDb21wbGV0ZSIsICJhamF4RXJyb3IiLCAiYWpheFN1Y2Nlc3MiLCAiYWpheFNlbmQiIF0sIGZ1bmN0aW9uKCBpLCB0eXBlICkgewoJalF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7CgkJcmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7Cgl9Owp9KTsKCgpqUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkgewoJcmV0dXJuIGpRdWVyeS5hamF4KHsKCQl1cmw6IHVybCwKCQl0eXBlOiAiR0VUIiwKCQlkYXRhVHlwZTogInNjcmlwdCIsCgkJYXN5bmM6IGZhbHNlLAoJCWdsb2JhbDogZmFsc2UsCgkJInRocm93cyI6IHRydWUKCX0pOwp9OwoKCmpRdWVyeS5mbi5leHRlbmQoewoJd3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7CgkJaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkgewoJCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGkpIHsKCQkJCWpRdWVyeSh0aGlzKS53cmFwQWxsKCBodG1sLmNhbGwodGhpcywgaSkgKTsKCQkJfSk7CgkJfQoKCQlpZiAoIHRoaXNbMF0gKSB7CgkJCS8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kCgkJCXZhciB3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWzBdLm93bmVyRG9jdW1lbnQgKS5lcSgwKS5jbG9uZSh0cnVlKTsKCgkJCWlmICggdGhpc1swXS5wYXJlbnROb2RlICkgewoJCQkJd3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbMF0gKTsKCQkJfQoKCQkJd3JhcC5tYXAoZnVuY3Rpb24oKSB7CgkJCQl2YXIgZWxlbSA9IHRoaXM7CgoJCQkJd2hpbGUgKCBlbGVtLmZpcnN0Q2hpbGQgJiYgZWxlbS5maXJzdENoaWxkLm5vZGVUeXBlID09PSAxICkgewoJCQkJCWVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7CgkJCQl9CgoJCQkJcmV0dXJuIGVsZW07CgkJCX0pLmFwcGVuZCggdGhpcyApOwoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7CgkJaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkgewoJCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGkpIHsKCQkJCWpRdWVyeSh0aGlzKS53cmFwSW5uZXIoIGh0bWwuY2FsbCh0aGlzLCBpKSApOwoJCQl9KTsKCQl9CgoJCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCXZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksCgkJCQljb250ZW50cyA9IHNlbGYuY29udGVudHMoKTsKCgkJCWlmICggY29udGVudHMubGVuZ3RoICkgewoJCQkJY29udGVudHMud3JhcEFsbCggaHRtbCApOwoKCQkJfSBlbHNlIHsKCQkJCXNlbGYuYXBwZW5kKCBodG1sICk7CgkJCX0KCQl9KTsKCX0sCgoJd3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7CgkJdmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApOwoKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGkpIHsKCQkJalF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCh0aGlzLCBpKSA6IGh0bWwgKTsKCQl9KTsKCX0sCgoJdW53cmFwOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQlpZiAoICFqUXVlcnkubm9kZU5hbWUoIHRoaXMsICJib2R5IiApICkgewoJCQkJalF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApOwoJCQl9CgkJfSkuZW5kKCk7Cgl9Cn0pOwoKCmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7CgkvLyBTdXBwb3J0OiBPcGVyYSA8PSAxMi4xMgoJLy8gT3BlcmEgcmVwb3J0cyBvZmZzZXRXaWR0aHMgYW5kIG9mZnNldEhlaWdodHMgbGVzcyB0aGFuIHplcm8gb24gc29tZSBlbGVtZW50cwoJcmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPD0gMCAmJiBlbGVtLm9mZnNldEhlaWdodCA8PSAwIHx8CgkJKCFzdXBwb3J0LnJlbGlhYmxlSGlkZGVuT2Zmc2V0cygpICYmCgkJCSgoZWxlbS5zdHlsZSAmJiBlbGVtLnN0eWxlLmRpc3BsYXkpIHx8IGpRdWVyeS5jc3MoIGVsZW0sICJkaXNwbGF5IiApKSA9PT0gIm5vbmUiKTsKfTsKCmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkgewoJcmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiggZWxlbSApOwp9OwoKCgoKdmFyIHIyMCA9IC8lMjAvZywKCXJicmFja2V0ID0gL1xbXF0kLywKCXJDUkxGID0gL1xyP1xuL2csCglyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksCglyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7CgpmdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7Cgl2YXIgbmFtZTsKCglpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHsKCQkvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS4KCQlqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHsKCQkJaWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHsKCQkJCS8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci4KCQkJCWFkZCggcHJlZml4LCB2ICk7CgoJCQl9IGVsc2UgewoJCQkJLy8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguCgkJCQlidWlsZFBhcmFtcyggcHJlZml4ICsgIlsiICsgKCB0eXBlb2YgdiA9PT0gIm9iamVjdCIgPyBpIDogIiIgKSArICJdIiwgdiwgdHJhZGl0aW9uYWwsIGFkZCApOwoJCQl9CgkJfSk7CgoJfSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gIm9iamVjdCIgKSB7CgkJLy8gU2VyaWFsaXplIG9iamVjdCBpdGVtLgoJCWZvciAoIG5hbWUgaW4gb2JqICkgewoJCQlidWlsZFBhcmFtcyggcHJlZml4ICsgIlsiICsgbmFtZSArICJdIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTsKCQl9CgoJfSBlbHNlIHsKCQkvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uCgkJYWRkKCBwcmVmaXgsIG9iaiApOwoJfQp9CgovLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZgovLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmcKalF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkgewoJdmFyIHByZWZpeCwKCQlzID0gW10sCgkJYWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJCS8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgcmV0dXJuIGl0cyB2YWx1ZQoJCQl2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6ICggdmFsdWUgPT0gbnVsbCA/ICIiIDogdmFsdWUgKTsKCQkJc1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7CgkJfTsKCgkvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLgoJaWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkgewoJCXRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsOwoJfQoKCS8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuCglpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkgewoJCS8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50cwoJCWpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHsKCQkJYWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTsKCQl9KTsKCgl9IGVsc2UgewoJCS8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlICJvbGQiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlcgoJCS8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LgoJCWZvciAoIHByZWZpeCBpbiBhICkgewoJCQlidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApOwoJCX0KCX0KCgkvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uCglyZXR1cm4gcy5qb2luKCAiJiIgKS5yZXBsYWNlKCByMjAsICIrIiApOwp9OwoKalF1ZXJ5LmZuLmV4dGVuZCh7CglzZXJpYWxpemU6IGZ1bmN0aW9uKCkgewoJCXJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApOwoJfSwKCXNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7CgkJCS8vIENhbiBhZGQgcHJvcEhvb2sgZm9yICJlbGVtZW50cyIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzCgkJCXZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCAiZWxlbWVudHMiICk7CgkJCXJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzOwoJCX0pCgkJLmZpbHRlcihmdW5jdGlvbigpIHsKCQkJdmFyIHR5cGUgPSB0aGlzLnR5cGU7CgkJCS8vIFVzZSAuaXMoIjpkaXNhYmxlZCIpIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzCgkJCXJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCAiOmRpc2FibGVkIiApICYmCgkJCQlyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmCgkJCQkoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7CgkJfSkKCQkubWFwKGZ1bmN0aW9uKCBpLCBlbGVtICkgewoJCQl2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7CgoJCQlyZXR1cm4gdmFsID09IG51bGwgPwoJCQkJbnVsbCA6CgkJCQlqUXVlcnkuaXNBcnJheSggdmFsICkgPwoJCQkJCWpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHsKCQkJCQkJcmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCAiXHJcbiIgKSB9OwoJCQkJCX0pIDoKCQkJCQl7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgIlxyXG4iICkgfTsKCQl9KS5nZXQoKTsKCX0KfSk7CgoKLy8gQ3JlYXRlIHRoZSByZXF1ZXN0IG9iamVjdAovLyAoVGhpcyBpcyBzdGlsbCBhdHRhY2hlZCB0byBhamF4U2V0dGluZ3MgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkpCmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gd2luZG93LkFjdGl2ZVhPYmplY3QgIT09IHVuZGVmaW5lZCA/CgkvLyBTdXBwb3J0OiBJRTYrCglmdW5jdGlvbigpIHsKCgkJLy8gWEhSIGNhbm5vdCBhY2Nlc3MgbG9jYWwgZmlsZXMsIGFsd2F5cyB1c2UgQWN0aXZlWCBmb3IgdGhhdCBjYXNlCgkJcmV0dXJuICF0aGlzLmlzTG9jYWwgJiYKCgkJCS8vIFN1cHBvcnQ6IElFNy04CgkJCS8vIG9sZElFIFhIUiBkb2VzIG5vdCBzdXBwb3J0IG5vbi1SRkMyNjE2IG1ldGhvZHMgKCMxMzI0MCkKCQkJLy8gU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9tczUzNjY0OCh2PXZzLjg1KS5hc3B4CgkJCS8vIGFuZCBodHRwOi8vd3d3LnczLm9yZy9Qcm90b2NvbHMvcmZjMjYxNi9yZmMyNjE2LXNlYzkuaHRtbCNzZWM5CgkJCS8vIEFsdGhvdWdoIHRoaXMgY2hlY2sgZm9yIHNpeCBtZXRob2RzIGluc3RlYWQgb2YgZWlnaHQKCQkJLy8gc2luY2UgSUUgYWxzbyBkb2VzIG5vdCBzdXBwb3J0ICJ0cmFjZSIgYW5kICJjb25uZWN0IgoJCQkvXihnZXR8cG9zdHxoZWFkfHB1dHxkZWxldGV8b3B0aW9ucykkL2kudGVzdCggdGhpcy50eXBlICkgJiYKCgkJCWNyZWF0ZVN0YW5kYXJkWEhSKCkgfHwgY3JlYXRlQWN0aXZlWEhSKCk7Cgl9IDoKCS8vIEZvciBhbGwgb3RoZXIgYnJvd3NlcnMsIHVzZSB0aGUgc3RhbmRhcmQgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0CgljcmVhdGVTdGFuZGFyZFhIUjsKCnZhciB4aHJJZCA9IDAsCgl4aHJDYWxsYmFja3MgPSB7fSwKCXhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7CgovLyBTdXBwb3J0OiBJRTwxMAovLyBPcGVuIHJlcXVlc3RzIG11c3QgYmUgbWFudWFsbHkgYWJvcnRlZCBvbiB1bmxvYWQgKCM1MjgwKQppZiAoIHdpbmRvdy5BY3RpdmVYT2JqZWN0ICkgewoJalF1ZXJ5KCB3aW5kb3cgKS5vbiggInVubG9hZCIsIGZ1bmN0aW9uKCkgewoJCWZvciAoIHZhciBrZXkgaW4geGhyQ2FsbGJhY2tzICkgewoJCQl4aHJDYWxsYmFja3NbIGtleSBdKCB1bmRlZmluZWQsIHRydWUgKTsKCQl9Cgl9KTsKfQoKLy8gRGV0ZXJtaW5lIHN1cHBvcnQgcHJvcGVydGllcwpzdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoICJ3aXRoQ3JlZGVudGlhbHMiIGluIHhoclN1cHBvcnRlZCApOwp4aHJTdXBwb3J0ZWQgPSBzdXBwb3J0LmFqYXggPSAhIXhoclN1cHBvcnRlZDsKCi8vIENyZWF0ZSB0cmFuc3BvcnQgaWYgdGhlIGJyb3dzZXIgY2FuIHByb3ZpZGUgYW4geGhyCmlmICggeGhyU3VwcG9ydGVkICkgewoKCWpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCS8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3QKCQlpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluIHx8IHN1cHBvcnQuY29ycyApIHsKCgkJCXZhciBjYWxsYmFjazsKCgkJCXJldHVybiB7CgkJCQlzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7CgkJCQkJdmFyIGksCgkJCQkJCXhociA9IG9wdGlvbnMueGhyKCksCgkJCQkJCWlkID0gKyt4aHJJZDsKCgkJCQkJLy8gT3BlbiB0aGUgc29ja2V0CgkJCQkJeGhyLm9wZW4oIG9wdGlvbnMudHlwZSwgb3B0aW9ucy51cmwsIG9wdGlvbnMuYXN5bmMsIG9wdGlvbnMudXNlcm5hbWUsIG9wdGlvbnMucGFzc3dvcmQgKTsKCgkJCQkJLy8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZAoJCQkJCWlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7CgkJCQkJCWZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7CgkJCQkJCQl4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07CgkJCQkJCX0KCQkJCQl9CgoJCQkJCS8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWQKCQkJCQlpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7CgkJCQkJCXhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7CgkJCQkJfQoKCQkJCQkvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlcgoJCQkJCS8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmUKCQkJCQkvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLgoJCQkJCS8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKQoJCQkJCS8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLgoJCQkJCWlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIlgtUmVxdWVzdGVkLVdpdGgiXSApIHsKCQkJCQkJaGVhZGVyc1siWC1SZXF1ZXN0ZWQtV2l0aCJdID0gIlhNTEh0dHBSZXF1ZXN0IjsKCQkJCQl9CgoJCQkJCS8vIFNldCBoZWFkZXJzCgkJCQkJZm9yICggaSBpbiBoZWFkZXJzICkgewoJCQkJCQkvLyBTdXBwb3J0OiBJRTw5CgkJCQkJCS8vIElFJ3MgQWN0aXZlWE9iamVjdCB0aHJvd3MgYSAnVHlwZSBNaXNtYXRjaCcgZXhjZXB0aW9uIHdoZW4gc2V0dGluZwoJCQkJCQkvLyByZXF1ZXN0IGhlYWRlciB0byBhIG51bGwtdmFsdWUuCgkJCQkJCS8vCgkJCQkJCS8vIFRvIGtlZXAgY29uc2lzdGVudCB3aXRoIG90aGVyIFhIUiBpbXBsZW1lbnRhdGlvbnMsIGNhc3QgdGhlIHZhbHVlCgkJCQkJCS8vIHRvIHN0cmluZyBhbmQgaWdub3JlIGB1bmRlZmluZWRgLgoJCQkJCQlpZiAoIGhlYWRlcnNbIGkgXSAhPT0gdW5kZWZpbmVkICkgewoJCQkJCQkJeGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSArICIiICk7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCS8vIERvIHNlbmQgdGhlIHJlcXVlc3QKCQkJCQkvLyBUaGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24gd2hpY2ggaXMgYWN0dWFsbHkKCQkJCQkvLyBoYW5kbGVkIGluIGpRdWVyeS5hamF4IChzbyBubyB0cnkvY2F0Y2ggaGVyZSkKCQkJCQl4aHIuc2VuZCggKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhICkgfHwgbnVsbCApOwoKCQkJCQkvLyBMaXN0ZW5lcgoJCQkJCWNhbGxiYWNrID0gZnVuY3Rpb24oIF8sIGlzQWJvcnQgKSB7CgkJCQkJCXZhciBzdGF0dXMsIHN0YXR1c1RleHQsIHJlc3BvbnNlczsKCgkJCQkJCS8vIFdhcyBuZXZlciBjYWxsZWQgYW5kIGlzIGFib3J0ZWQgb3IgY29tcGxldGUKCQkJCQkJaWYgKCBjYWxsYmFjayAmJiAoIGlzQWJvcnQgfHwgeGhyLnJlYWR5U3RhdGUgPT09IDQgKSApIHsKCQkJCQkJCS8vIENsZWFuIHVwCgkJCQkJCQlkZWxldGUgeGhyQ2FsbGJhY2tzWyBpZCBdOwoJCQkJCQkJY2FsbGJhY2sgPSB1bmRlZmluZWQ7CgkJCQkJCQl4aHIub25yZWFkeXN0YXRlY2hhbmdlID0galF1ZXJ5Lm5vb3A7CgoJCQkJCQkJLy8gQWJvcnQgbWFudWFsbHkgaWYgbmVlZGVkCgkJCQkJCQlpZiAoIGlzQWJvcnQgKSB7CgkJCQkJCQkJaWYgKCB4aHIucmVhZHlTdGF0ZSAhPT0gNCApIHsKCQkJCQkJCQkJeGhyLmFib3J0KCk7CgkJCQkJCQkJfQoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQlyZXNwb25zZXMgPSB7fTsKCQkJCQkJCQlzdGF0dXMgPSB4aHIuc3RhdHVzOwoKCQkJCQkJCQkvLyBTdXBwb3J0OiBJRTwxMAoJCQkJCQkJCS8vIEFjY2Vzc2luZyBiaW5hcnktZGF0YSByZXNwb25zZVRleHQgdGhyb3dzIGFuIGV4Y2VwdGlvbgoJCQkJCQkJCS8vICgjMTE0MjYpCgkJCQkJCQkJaWYgKCB0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCA9PT0gInN0cmluZyIgKSB7CgkJCQkJCQkJCXJlc3BvbnNlcy50ZXh0ID0geGhyLnJlc3BvbnNlVGV4dDsKCQkJCQkJCQl9CgoJCQkJCQkJCS8vIEZpcmVmb3ggdGhyb3dzIGFuIGV4Y2VwdGlvbiB3aGVuIGFjY2Vzc2luZwoJCQkJCQkJCS8vIHN0YXR1c1RleHQgZm9yIGZhdWx0eSBjcm9zcy1kb21haW4gcmVxdWVzdHMKCQkJCQkJCQl0cnkgewoJCQkJCQkJCQlzdGF0dXNUZXh0ID0geGhyLnN0YXR1c1RleHQ7CgkJCQkJCQkJfSBjYXRjaCggZSApIHsKCQkJCQkJCQkJLy8gV2Ugbm9ybWFsaXplIHdpdGggV2Via2l0IGdpdmluZyBhbiBlbXB0eSBzdGF0dXNUZXh0CgkJCQkJCQkJCXN0YXR1c1RleHQgPSAiIjsKCQkJCQkJCQl9CgoJCQkJCQkJCS8vIEZpbHRlciBzdGF0dXMgZm9yIG5vbiBzdGFuZGFyZCBiZWhhdmlvcnMKCgkJCQkJCQkJLy8gSWYgdGhlIHJlcXVlc3QgaXMgbG9jYWwgYW5kIHdlIGhhdmUgZGF0YTogYXNzdW1lIGEgc3VjY2VzcwoJCQkJCQkJCS8vIChzdWNjZXNzIHdpdGggbm8gZGF0YSB3b24ndCBnZXQgbm90aWZpZWQsIHRoYXQncyB0aGUgYmVzdCB3ZQoJCQkJCQkJCS8vIGNhbiBkbyBnaXZlbiBjdXJyZW50IGltcGxlbWVudGF0aW9ucykKCQkJCQkJCQlpZiAoICFzdGF0dXMgJiYgb3B0aW9ucy5pc0xvY2FsICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkgewoJCQkJCQkJCQlzdGF0dXMgPSByZXNwb25zZXMudGV4dCA/IDIwMCA6IDQwNDsKCQkJCQkJCQkvLyBJRSAtICMxNDUwOiBzb21ldGltZXMgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNAoJCQkJCQkJCX0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMTIyMyApIHsKCQkJCQkJCQkJc3RhdHVzID0gMjA0OwoJCQkJCQkJCX0KCQkJCQkJCX0KCQkJCQkJfQoKCQkJCQkJLy8gQ2FsbCBjb21wbGV0ZSBpZiBuZWVkZWQKCQkJCQkJaWYgKCByZXNwb25zZXMgKSB7CgkJCQkJCQljb21wbGV0ZSggc3RhdHVzLCBzdGF0dXNUZXh0LCByZXNwb25zZXMsIHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSApOwoJCQkJCQl9CgkJCQkJfTsKCgkJCQkJaWYgKCAhb3B0aW9ucy5hc3luYyApIHsKCQkJCQkJLy8gaWYgd2UncmUgaW4gc3luYyBtb2RlIHdlIGZpcmUgdGhlIGNhbGxiYWNrCgkJCQkJCWNhbGxiYWNrKCk7CgkJCQkJfSBlbHNlIGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7CgkJCQkJCS8vIChJRTYgJiBJRTcpIGlmIGl0J3MgaW4gY2FjaGUgYW5kIGhhcyBiZWVuCgkJCQkJCS8vIHJldHJpZXZlZCBkaXJlY3RseSB3ZSBuZWVkIHRvIGZpcmUgdGhlIGNhbGxiYWNrCgkJCQkJCXNldFRpbWVvdXQoIGNhbGxiYWNrICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJLy8gQWRkIHRvIHRoZSBsaXN0IG9mIGFjdGl2ZSB4aHIgY2FsbGJhY2tzCgkJCQkJCXhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB4aHJDYWxsYmFja3NbIGlkIF0gPSBjYWxsYmFjazsKCQkJCQl9CgkJCQl9LAoKCQkJCWFib3J0OiBmdW5jdGlvbigpIHsKCQkJCQlpZiAoIGNhbGxiYWNrICkgewoJCQkJCQljYWxsYmFjayggdW5kZWZpbmVkLCB0cnVlICk7CgkJCQkJfQoJCQkJfQoJCQl9OwoJCX0KCX0pOwp9CgovLyBGdW5jdGlvbnMgdG8gY3JlYXRlIHhocnMKZnVuY3Rpb24gY3JlYXRlU3RhbmRhcmRYSFIoKSB7Cgl0cnkgewoJCXJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7Cgl9IGNhdGNoKCBlICkge30KfQoKZnVuY3Rpb24gY3JlYXRlQWN0aXZlWEhSKCkgewoJdHJ5IHsKCQlyZXR1cm4gbmV3IHdpbmRvdy5BY3RpdmVYT2JqZWN0KCAiTWljcm9zb2Z0LlhNTEhUVFAiICk7Cgl9IGNhdGNoKCBlICkge30KfQoKCgoKLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGUKalF1ZXJ5LmFqYXhTZXR1cCh7CglhY2NlcHRzOiB7CgkJc2NyaXB0OiAidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHQiCgl9LAoJY29udGVudHM6IHsKCQlzY3JpcHQ6IC8oPzpqYXZhfGVjbWEpc2NyaXB0LwoJfSwKCWNvbnZlcnRlcnM6IHsKCQkidGV4dCBzY3JpcHQiOiBmdW5jdGlvbiggdGV4dCApIHsKCQkJalF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTsKCQkJcmV0dXJuIHRleHQ7CgkJfQoJfQp9KTsKCi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgZ2xvYmFsCmpRdWVyeS5hamF4UHJlZmlsdGVyKCAic2NyaXB0IiwgZnVuY3Rpb24oIHMgKSB7CglpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHsKCQlzLmNhY2hlID0gZmFsc2U7Cgl9CglpZiAoIHMuY3Jvc3NEb21haW4gKSB7CgkJcy50eXBlID0gIkdFVCI7CgkJcy5nbG9iYWwgPSBmYWxzZTsKCX0KfSk7CgovLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnQKalF1ZXJ5LmFqYXhUcmFuc3BvcnQoICJzY3JpcHQiLCBmdW5jdGlvbihzKSB7CgoJLy8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0cwoJaWYgKCBzLmNyb3NzRG9tYWluICkgewoKCQl2YXIgc2NyaXB0LAoJCQloZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBqUXVlcnkoImhlYWQiKVswXSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CgoJCXJldHVybiB7CgoJCQlzZW5kOiBmdW5jdGlvbiggXywgY2FsbGJhY2sgKSB7CgoJCQkJc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CgoJCQkJc2NyaXB0LmFzeW5jID0gdHJ1ZTsKCgkJCQlpZiAoIHMuc2NyaXB0Q2hhcnNldCApIHsKCQkJCQlzY3JpcHQuY2hhcnNldCA9IHMuc2NyaXB0Q2hhcnNldDsKCQkJCX0KCgkJCQlzY3JpcHQuc3JjID0gcy51cmw7CgoJCQkJLy8gQXR0YWNoIGhhbmRsZXJzIGZvciBhbGwgYnJvd3NlcnMKCQkJCXNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oIF8sIGlzQWJvcnQgKSB7CgoJCQkJCWlmICggaXNBYm9ydCB8fCAhc2NyaXB0LnJlYWR5U3RhdGUgfHwgL2xvYWRlZHxjb21wbGV0ZS8udGVzdCggc2NyaXB0LnJlYWR5U3RhdGUgKSApIHsKCgkJCQkJCS8vIEhhbmRsZSBtZW1vcnkgbGVhayBpbiBJRQoJCQkJCQlzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7CgoJCQkJCQkvLyBSZW1vdmUgdGhlIHNjcmlwdAoJCQkJCQlpZiAoIHNjcmlwdC5wYXJlbnROb2RlICkgewoJCQkJCQkJc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApOwoJCQkJCQl9CgoJCQkJCQkvLyBEZXJlZmVyZW5jZSB0aGUgc2NyaXB0CgkJCQkJCXNjcmlwdCA9IG51bGw7CgoJCQkJCQkvLyBDYWxsYmFjayBpZiBub3QgYWJvcnQKCQkJCQkJaWYgKCAhaXNBYm9ydCApIHsKCQkJCQkJCWNhbGxiYWNrKCAyMDAsICJzdWNjZXNzIiApOwoJCQkJCQl9CgkJCQkJfQoJCQkJfTsKCgkJCQkvLyBDaXJjdW12ZW50IElFNiBidWdzIHdpdGggYmFzZSBlbGVtZW50cyAoIzI3MDkgYW5kICM0Mzc4KSBieSBwcmVwZW5kaW5nCgkJCQkvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnkKCQkJCWhlYWQuaW5zZXJ0QmVmb3JlKCBzY3JpcHQsIGhlYWQuZmlyc3RDaGlsZCApOwoJCQl9LAoKCQkJYWJvcnQ6IGZ1bmN0aW9uKCkgewoJCQkJaWYgKCBzY3JpcHQgKSB7CgkJCQkJc2NyaXB0Lm9ubG9hZCggdW5kZWZpbmVkLCB0cnVlICk7CgkJCQl9CgkJCX0KCQl9OwoJfQp9KTsKCgoKCnZhciBvbGRDYWxsYmFja3MgPSBbXSwKCXJqc29ucCA9IC8oPSlcPyg/PSZ8JCl8XD9cPy87CgovLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzCmpRdWVyeS5hamF4U2V0dXAoewoJanNvbnA6ICJjYWxsYmFjayIsCglqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHsKCQl2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArICJfIiArICggbm9uY2UrKyApICk7CgkJdGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7CgkJcmV0dXJuIGNhbGxiYWNrOwoJfQp9KTsKCi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0cwpqUXVlcnkuYWpheFByZWZpbHRlciggImpzb24ganNvbnAiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7CgoJdmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLAoJCWpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/CgkJCSJ1cmwiIDoKCQkJdHlwZW9mIHMuZGF0YSA9PT0gInN0cmluZyIgJiYgISggcy5jb250ZW50VHlwZSB8fCAiIiApLmluZGV4T2YoImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIpICYmIHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiAiZGF0YSIKCQkpOwoKCS8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyAianNvbnAiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0CglpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09ICJqc29ucCIgKSB7CgoJCS8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXQKCQljYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgPwoJCQlzLmpzb25wQ2FsbGJhY2soKSA6CgkJCXMuanNvbnBDYWxsYmFjazsKCgkJLy8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YQoJCWlmICgganNvblByb3AgKSB7CgkJCXNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgIiQxIiArIGNhbGxiYWNrTmFtZSApOwoJCX0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkgewoJCQlzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gIiYiIDogIj8iICkgKyBzLmpzb25wICsgIj0iICsgY2FsbGJhY2tOYW1lOwoJCX0KCgkJLy8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvbgoJCXMuY29udmVydGVyc1sic2NyaXB0IGpzb24iXSA9IGZ1bmN0aW9uKCkgewoJCQlpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHsKCQkJCWpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgIiB3YXMgbm90IGNhbGxlZCIgKTsKCQkJfQoJCQlyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTsKCQl9OwoKCQkvLyBmb3JjZSBqc29uIGRhdGFUeXBlCgkJcy5kYXRhVHlwZXNbIDAgXSA9ICJqc29uIjsKCgkJLy8gSW5zdGFsbCBjYWxsYmFjawoJCW92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTsKCQl3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7CgkJCXJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzOwoJCX07CgoJCS8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKQoJCWpxWEhSLmFsd2F5cyhmdW5jdGlvbigpIHsKCQkJLy8gUmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZQoJCQl3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47CgoJCQkvLyBTYXZlIGJhY2sgYXMgZnJlZQoJCQlpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkgewoJCQkJLy8gbWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kCgkJCQlzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7CgoJCQkJLy8gc2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZQoJCQkJb2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApOwoJCQl9CgoJCQkvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2UKCQkJaWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHsKCQkJCW92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7CgkJCX0KCgkJCXJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7CgkJfSk7CgoJCS8vIERlbGVnYXRlIHRvIHNjcmlwdAoJCXJldHVybiAic2NyaXB0IjsKCX0KfSk7CgoKCgovLyBkYXRhOiBzdHJpbmcgb2YgaHRtbAovLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsIGRlZmF1bHRzIHRvIGRvY3VtZW50Ci8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmcKalF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHsKCWlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09ICJzdHJpbmciICkgewoJCXJldHVybiBudWxsOwoJfQoJaWYgKCB0eXBlb2YgY29udGV4dCA9PT0gImJvb2xlYW4iICkgewoJCWtlZXBTY3JpcHRzID0gY29udGV4dDsKCQljb250ZXh0ID0gZmFsc2U7Cgl9Cgljb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDsKCgl2YXIgcGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICksCgkJc2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTsKCgkvLyBTaW5nbGUgdGFnCglpZiAoIHBhcnNlZCApIHsKCQlyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsxXSApIF07Cgl9CgoJcGFyc2VkID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7CgoJaWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkgewoJCWpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpOwoJfQoKCXJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApOwp9OwoKCi8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2QKdmFyIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQ7CgovKioKICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZQogKi8KalF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkgewoJaWYgKCB0eXBlb2YgdXJsICE9PSAic3RyaW5nIiAmJiBfbG9hZCApIHsKCQlyZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJfQoKCXZhciBzZWxlY3RvciwgcmVzcG9uc2UsIHR5cGUsCgkJc2VsZiA9IHRoaXMsCgkJb2ZmID0gdXJsLmluZGV4T2YoIiAiKTsKCglpZiAoIG9mZiA+PSAwICkgewoJCXNlbGVjdG9yID0gdXJsLnNsaWNlKCBvZmYsIHVybC5sZW5ndGggKTsKCQl1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApOwoJfQoKCS8vIElmIGl0J3MgYSBmdW5jdGlvbgoJaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7CgoJCS8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrCgkJY2FsbGJhY2sgPSBwYXJhbXM7CgkJcGFyYW1zID0gdW5kZWZpbmVkOwoKCS8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmcKCX0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSAib2JqZWN0IiApIHsKCQl0eXBlID0gIlBPU1QiOwoJfQoKCS8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0CglpZiAoIHNlbGYubGVuZ3RoID4gMCApIHsKCQlqUXVlcnkuYWpheCh7CgkJCXVybDogdXJsLAoKCQkJLy8gaWYgInR5cGUiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiAiR0VUIiBtZXRob2Qgd2lsbCBiZSB1c2VkCgkJCXR5cGU6IHR5cGUsCgkJCWRhdGFUeXBlOiAiaHRtbCIsCgkJCWRhdGE6IHBhcmFtcwoJCX0pLmRvbmUoZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHsKCgkJCS8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFjawoJCQlyZXNwb25zZSA9IGFyZ3VtZW50czsKCgkJCXNlbGYuaHRtbCggc2VsZWN0b3IgPwoKCQkJCS8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdgoJCQkJLy8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzCgkJCQlqUXVlcnkoIjxkaXY+IikuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOgoKCQkJCS8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0CgkJCQlyZXNwb25zZVRleHQgKTsKCgkJfSkuY29tcGxldGUoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkgewoJCQlzZWxmLmVhY2goIGNhbGxiYWNrLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7CgkJfSk7Cgl9CgoJcmV0dXJuIHRoaXM7Cn07CgoKCgpqUXVlcnkuZXhwci5maWx0ZXJzLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7CglyZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkgewoJCXJldHVybiBlbGVtID09PSBmbi5lbGVtOwoJfSkubGVuZ3RoOwp9OwoKCgoKCnZhciBkb2NFbGVtID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKCi8qKgogKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudAogKi8KZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkgewoJcmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8KCQllbGVtIDoKCQllbGVtLm5vZGVUeXBlID09PSA5ID8KCQkJZWxlbS5kZWZhdWx0VmlldyB8fCBlbGVtLnBhcmVudFdpbmRvdyA6CgkJCWZhbHNlOwp9CgpqUXVlcnkub2Zmc2V0ID0gewoJc2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHsKCQl2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLAoJCQlwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sICJwb3NpdGlvbiIgKSwKCQkJY3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLAoJCQlwcm9wcyA9IHt9OwoKCQkvLyBzZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtCgkJaWYgKCBwb3NpdGlvbiA9PT0gInN0YXRpYyIgKSB7CgkJCWVsZW0uc3R5bGUucG9zaXRpb24gPSAicmVsYXRpdmUiOwoJCX0KCgkJY3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTsKCQljdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCAidG9wIiApOwoJCWN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCAibGVmdCIgKTsKCQljYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09ICJhYnNvbHV0ZSIgfHwgcG9zaXRpb24gPT09ICJmaXhlZCIgKSAmJgoJCQlqUXVlcnkuaW5BcnJheSgiYXV0byIsIFsgY3VyQ1NTVG9wLCBjdXJDU1NMZWZ0IF0gKSA+IC0xOwoKCQkvLyBuZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlciB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWQKCQlpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkgewoJCQljdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTsKCQkJY3VyVG9wID0gY3VyUG9zaXRpb24udG9wOwoJCQljdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDsKCQl9IGVsc2UgewoJCQljdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwOwoJCQljdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7CgkJfQoKCQlpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7CgkJCW9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGN1ck9mZnNldCApOwoJCX0KCgkJaWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkgewoJCQlwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wOwoJCX0KCQlpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkgewoJCQlwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDsKCQl9CgoJCWlmICggInVzaW5nIiBpbiBvcHRpb25zICkgewoJCQlvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7CgkJfSBlbHNlIHsKCQkJY3VyRWxlbS5jc3MoIHByb3BzICk7CgkJfQoJfQp9OwoKalF1ZXJ5LmZuLmV4dGVuZCh7CglvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCWlmICggYXJndW1lbnRzLmxlbmd0aCApIHsKCQkJcmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/CgkJCQl0aGlzIDoKCQkJCXRoaXMuZWFjaChmdW5jdGlvbiggaSApIHsKCQkJCQlqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApOwoJCQkJfSk7CgkJfQoKCQl2YXIgZG9jRWxlbSwgd2luLAoJCQlib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LAoJCQllbGVtID0gdGhpc1sgMCBdLAoJCQlkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDsKCgkJaWYgKCAhZG9jICkgewoJCQlyZXR1cm47CgkJfQoKCQlkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDsKCgkJLy8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlCgkJaWYgKCAhalF1ZXJ5LmNvbnRhaW5zKCBkb2NFbGVtLCBlbGVtICkgKSB7CgkJCXJldHVybiBib3g7CgkJfQoKCQkvLyBJZiB3ZSBkb24ndCBoYXZlIGdCQ1IsIGp1c3QgdXNlIDAsMCByYXRoZXIgdGhhbiBlcnJvcgoJCS8vIEJsYWNrQmVycnkgNSwgaU9TIDMgKG9yaWdpbmFsIGlQaG9uZSkKCQlpZiAoIHR5cGVvZiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gc3RydW5kZWZpbmVkICkgewoJCQlib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwoJCX0KCQl3aW4gPSBnZXRXaW5kb3coIGRvYyApOwoJCXJldHVybiB7CgkJCXRvcDogYm94LnRvcCAgKyAoIHdpbi5wYWdlWU9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbFRvcCApICAtICggZG9jRWxlbS5jbGllbnRUb3AgIHx8IDAgKSwKCQkJbGVmdDogYm94LmxlZnQgKyAoIHdpbi5wYWdlWE9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbExlZnQgKSAtICggZG9jRWxlbS5jbGllbnRMZWZ0IHx8IDAgKQoJCX07Cgl9LAoKCXBvc2l0aW9uOiBmdW5jdGlvbigpIHsKCQlpZiAoICF0aGlzWyAwIF0gKSB7CgkJCXJldHVybjsKCQl9CgoJCXZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwKCQkJcGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSwKCQkJZWxlbSA9IHRoaXNbIDAgXTsKCgkJLy8gZml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSwgYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50CgkJaWYgKCBqUXVlcnkuY3NzKCBlbGVtLCAicG9zaXRpb24iICkgPT09ICJmaXhlZCIgKSB7CgkJCS8vIHdlIGFzc3VtZSB0aGF0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyBhdmFpbGFibGUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZAoJCQlvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwoJCX0gZWxzZSB7CgkJCS8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50CgkJCW9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7CgoJCQkvLyBHZXQgY29ycmVjdCBvZmZzZXRzCgkJCW9mZnNldCA9IHRoaXMub2Zmc2V0KCk7CgkJCWlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sICJodG1sIiApICkgewoJCQkJcGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpOwoJCQl9CgoJCQkvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnMKCQkJcGFyZW50T2Zmc2V0LnRvcCAgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sICJib3JkZXJUb3BXaWR0aCIsIHRydWUgKTsKCQkJcGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sICJib3JkZXJMZWZ0V2lkdGgiLCB0cnVlICk7CgkJfQoKCQkvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zCgkJLy8gbm90ZTogd2hlbiBhbiBlbGVtZW50IGhhcyBtYXJnaW46IGF1dG8gdGhlIG9mZnNldExlZnQgYW5kIG1hcmdpbkxlZnQKCQkvLyBhcmUgdGhlIHNhbWUgaW4gU2FmYXJpIGNhdXNpbmcgb2Zmc2V0LmxlZnQgdG8gaW5jb3JyZWN0bHkgYmUgMAoJCXJldHVybiB7CgkJCXRvcDogIG9mZnNldC50b3AgIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sICJtYXJnaW5Ub3AiLCB0cnVlICksCgkJCWxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCAibWFyZ2luTGVmdCIsIHRydWUpCgkJfTsKCX0sCgoJb2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7CgkJCXZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCB8fCBkb2NFbGVtOwoKCQkJd2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnQsICJodG1sIiApICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgInBvc2l0aW9uIiApID09PSAic3RhdGljIiApICkgewoJCQkJb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDsKCQkJfQoJCQlyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY0VsZW07CgkJfSk7Cgl9Cn0pOwoKLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzCmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6ICJwYWdlWE9mZnNldCIsIHNjcm9sbFRvcDogInBhZ2VZT2Zmc2V0IiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkgewoJdmFyIHRvcCA9IC9ZLy50ZXN0KCBwcm9wICk7CgoJalF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7CgkJcmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkgewoJCQl2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7CgoJCQlpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkgewoJCQkJcmV0dXJuIHdpbiA/IChwcm9wIGluIHdpbikgPyB3aW5bIHByb3AgXSA6CgkJCQkJd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgbWV0aG9kIF0gOgoJCQkJCWVsZW1bIG1ldGhvZCBdOwoJCQl9CgoJCQlpZiAoIHdpbiApIHsKCQkJCXdpbi5zY3JvbGxUbygKCQkJCQkhdG9wID8gdmFsIDogalF1ZXJ5KCB3aW4gKS5zY3JvbGxMZWZ0KCksCgkJCQkJdG9wID8gdmFsIDogalF1ZXJ5KCB3aW4gKS5zY3JvbGxUb3AoKQoJCQkJKTsKCgkJCX0gZWxzZSB7CgkJCQllbGVtWyBtZXRob2QgXSA9IHZhbDsKCQkJfQoJCX0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoLCBudWxsICk7Cgl9Owp9KTsKCi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uCi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NAovLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0Ci8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCB3ZSBqdXN0IGNoZWNrIGZvciBpdCBoZXJlCmpRdWVyeS5lYWNoKCBbICJ0b3AiLCAibGVmdCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7CglqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLAoJCWZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHsKCQkJaWYgKCBjb21wdXRlZCApIHsKCQkJCWNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7CgkJCQkvLyBpZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXQKCQkJCXJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/CgkJCQkJalF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgInB4IiA6CgkJCQkJY29tcHV0ZWQ7CgkJCX0KCQl9CgkpOwp9KTsKCgovLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHMKalF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiAiaGVpZ2h0IiwgV2lkdGg6ICJ3aWR0aCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7CglqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiAiaW5uZXIiICsgbmFtZSwgY29udGVudDogdHlwZSwgIiI6ICJvdXRlciIgKyBuYW1lIH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkgewoJCS8vIG1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aAoJCWpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkgewoJCQl2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSAiYm9vbGVhbiIgKSwKCQkJCWV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gIm1hcmdpbiIgOiAiYm9yZGVyIiApOwoKCQkJcmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkgewoJCQkJdmFyIGRvYzsKCgkJCQlpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkgewoJCQkJCS8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlCgkJCQkJLy8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOgoJCQkJCS8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0CgkJCQkJcmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyAiY2xpZW50IiArIG5hbWUgXTsKCQkJCX0KCgkJCQkvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0CgkJCQlpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7CgkJCQkJZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7CgoJCQkJCS8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSwgd2hpY2hldmVyIGlzIGdyZWF0ZXN0CgkJCQkJLy8gdW5mb3J0dW5hdGVseSwgdGhpcyBjYXVzZXMgYnVnICMzODM4IGluIElFNi84IG9ubHksIGJ1dCB0aGVyZSBpcyBjdXJyZW50bHkgbm8gZ29vZCwgc21hbGwgd2F5IHRvIGZpeCBpdC4KCQkJCQlyZXR1cm4gTWF0aC5tYXgoCgkJCQkJCWVsZW0uYm9keVsgInNjcm9sbCIgKyBuYW1lIF0sIGRvY1sgInNjcm9sbCIgKyBuYW1lIF0sCgkJCQkJCWVsZW0uYm9keVsgIm9mZnNldCIgKyBuYW1lIF0sIGRvY1sgIm9mZnNldCIgKyBuYW1lIF0sCgkJCQkJCWRvY1sgImNsaWVudCIgKyBuYW1lIF0KCQkJCQkpOwoJCQkJfQoKCQkJCXJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8KCQkJCQkvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0CgkJCQkJalF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6CgoJCQkJCS8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQKCQkJCQlqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApOwoJCQl9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApOwoJCX07Cgl9KTsKfSk7CgoKLy8gVGhlIG51bWJlciBvZiBlbGVtZW50cyBjb250YWluZWQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQKalF1ZXJ5LmZuLnNpemUgPSBmdW5jdGlvbigpIHsKCXJldHVybiB0aGlzLmxlbmd0aDsKfTsKCmpRdWVyeS5mbi5hbmRTZWxmID0galF1ZXJ5LmZuLmFkZEJhY2s7CgoKCgovLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXIKLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdAovLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3QKLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZQovLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2UKLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzCi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay4KaWYgKCB0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQgKSB7CglkZWZpbmUoICJqcXVlcnkiLCBbXSwgZnVuY3Rpb24oKSB7CgkJcmV0dXJuIGpRdWVyeTsKCX0pOwp9CgoKCgp2YXIKCS8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZQoJX2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksCgoJLy8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGUKCV8kID0gd2luZG93LiQ7CgpqUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkgewoJaWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkgewoJCXdpbmRvdy4kID0gXyQ7Cgl9CgoJaWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHsKCQl3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTsKCX0KCglyZXR1cm4galF1ZXJ5Owp9OwoKLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbgovLyBBTUQgKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KQovLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpCmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBzdHJ1bmRlZmluZWQgKSB7Cgl3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7Cn0KCgoKCnJldHVybiBqUXVlcnk7Cgp9KSk7CgpkZWZpbmUoJ2pxdWVyeS1wcml2YXRlJyxbJ2pxdWVyeSddLCBmdW5jdGlvbiAoanEpIHsKICAgIHJldHVybiBqcS5ub0NvbmZsaWN0KCB0cnVlICk7Cn0pOwoKZGVmaW5lKCd1dGlscycsWyJqcXVlcnkiXSwgZnVuY3Rpb24gKCQpIHsKICAgICQuZm4uaGFzU2Nyb2xsQmFyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCEkLmNvbnRhaW5zKGRvY3VtZW50LCB0aGlzLmdldCgwKSkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZih0aGlzLnBhcmVudCgpLmhlaWdodCgpIDwgdGhpcy5nZXQoMCkuc2Nyb2xsSGVpZ2h0KSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9OwoKICAgICQuZm4uYWRkSHlwZXJsaW5rcyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgb2JqKSB7CiAgICAgICAgICAgICAgICB2YXIgeCA9ICQob2JqKS5odG1sKCk7CiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHgubWF0Y2goL1xiKGh0dHBzPzpcL1wvfHd3d1wufGh0dHBzPzpcL1wvd3d3XC4pW15cczxdezIsMjAwfVxiL2cgKTsKICAgICAgICAgICAgICAgIGlmIChsaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpPTA7IGk8bGlzdC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvdCA9IGxpc3RbaV0uaW5kZXhPZignaHR0cDovLycpID09PSAwIHx8IGxpc3RbaV0uaW5kZXhPZignaHR0cHM6Ly8nKSA9PT0gMCA/ICcnIDogJ2h0dHA6Ly8nOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZF91cmwgPSBlbmNvZGVVUkkoZGVjb2RlVVJJKGxpc3RbaV0pKS5yZXBsYWNlKC9bIScoKV0vZywgZXNjYXBlKS5yZXBsYWNlKC9cKi9nLCAiJTJBIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHggPSB4LnJlcGxhY2UobGlzdFtpXSwgIjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPSciICsgcHJvdCArIGVzY2FwZWRfdXJsICsgIic+IisgbGlzdFtpXSArICI8L2E+IiApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICQob2JqKS5odG1sKHgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwoKICAgIHZhciB1dGlscyA9IHsKICAgICAgICAvLyBUcmFuc2xhdGlvbiBtYWNoaW5lcnkKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICBfXzogZnVuY3Rpb24gKHN0cikgewogICAgICAgICAgICAvLyBUcmFuc2xhdGlvbiBmYWN0b3J5CiAgICAgICAgICAgIGlmICh0aGlzLmkxOG4gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdGhpcy5pMThuID0gbG9jYWxlcy5lbjsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgdCA9IHRoaXMuaTE4bi50cmFuc2xhdGUoc3RyKTsKICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGg+MSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHQuZmV0Y2guYXBwbHkodCwgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHQuZmV0Y2goKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIF9fXzogZnVuY3Rpb24gKHN0cikgewogICAgICAgICAgICAvKiBYWFg6IFRoaXMgaXMgcGFydCBvZiBhIGhhY2sgdG8gZ2V0IGdldHRleHQgdG8gc2NhbiBzdHJpbmdzIHRvIGJlCiAgICAgICAgICAgICAgICAqIHRyYW5zbGF0ZWQuIFN0cmluZ3Mgd2UgY2Fubm90IHNlbmQgdG8gdGhlIGZ1bmN0aW9uIGFib3ZlIGJlY2F1c2UKICAgICAgICAgICAgICAgICogdGhleSByZXF1aXJlIHZhcmlhYmxlIGludGVycG9sYXRpb24gYW5kIHdlIGRvbid0IHlldCBoYXZlIHRoZQogICAgICAgICAgICAgICAgKiB2YXJpYWJsZXMgYXQgc2NhbiB0aW1lLgogICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgKiBTZWUgYWN0aW9uSW5mb01lc3NhZ2VzCiAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICByZXR1cm4gc3RyOwogICAgICAgIH0KICAgIH07CiAgICByZXR1cm4gdXRpbHM7Cn0pOwoKLy8hIG1vbWVudC5qcwovLyEgdmVyc2lvbiA6IDIuNi4wCi8vISBhdXRob3JzIDogVGltIFdvb2QsIElza3JlbiBDaGVybmV2LCBNb21lbnQuanMgY29udHJpYnV0b3JzCi8vISBsaWNlbnNlIDogTUlUCi8vISBtb21lbnRqcy5jb20KCihmdW5jdGlvbiAodW5kZWZpbmVkKSB7CgogICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgICAgIENvbnN0YW50cwogICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKICAgIHZhciBtb21lbnQsCiAgICAgICAgVkVSU0lPTiA9ICIyLjYuMCIsCiAgICAgICAgLy8gdGhlIGdsb2JhbC1zY29wZSB0aGlzIGlzIE5PVCB0aGUgZ2xvYmFsIG9iamVjdCBpbiBOb2RlLmpzCiAgICAgICAgZ2xvYmFsU2NvcGUgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHRoaXMsCiAgICAgICAgb2xkR2xvYmFsTW9tZW50LAogICAgICAgIHJvdW5kID0gTWF0aC5yb3VuZCwKICAgICAgICBpLAoKICAgICAgICBZRUFSID0gMCwKICAgICAgICBNT05USCA9IDEsCiAgICAgICAgREFURSA9IDIsCiAgICAgICAgSE9VUiA9IDMsCiAgICAgICAgTUlOVVRFID0gNCwKICAgICAgICBTRUNPTkQgPSA1LAogICAgICAgIE1JTExJU0VDT05EID0gNiwKCiAgICAgICAgLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbGFuZ3VhZ2UgY29uZmlnIGZpbGVzCiAgICAgICAgbGFuZ3VhZ2VzID0ge30sCgogICAgICAgIC8vIG1vbWVudCBpbnRlcm5hbCBwcm9wZXJ0aWVzCiAgICAgICAgbW9tZW50UHJvcGVydGllcyA9IHsKICAgICAgICAgICAgX2lzQU1vbWVudE9iamVjdDogbnVsbCwKICAgICAgICAgICAgX2kgOiBudWxsLAogICAgICAgICAgICBfZiA6IG51bGwsCiAgICAgICAgICAgIF9sIDogbnVsbCwKICAgICAgICAgICAgX3N0cmljdCA6IG51bGwsCiAgICAgICAgICAgIF9pc1VUQyA6IG51bGwsCiAgICAgICAgICAgIF9vZmZzZXQgOiBudWxsLCAgLy8gb3B0aW9uYWwuIENvbWJpbmUgd2l0aCBfaXNVVEMKICAgICAgICAgICAgX3BmIDogbnVsbCwKICAgICAgICAgICAgX2xhbmcgOiBudWxsICAvLyBvcHRpb25hbAogICAgICAgIH0sCgogICAgICAgIC8vIGNoZWNrIGZvciBub2RlSlMKICAgICAgICBoYXNNb2R1bGUgPSAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpLAoKICAgICAgICAvLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXgKICAgICAgICBhc3BOZXRKc29uUmVnZXggPSAvXlwvP0RhdGVcKChcLT9cZCspL2ksCiAgICAgICAgYXNwTmV0VGltZVNwYW5Kc29uUmVnZXggPSAvKFwtKT8oPzooXGQqKVwuKT8oXGQrKVw6KFxkKykoPzpcOihcZCspXC4/KFxkezN9KT8pPy8sCgogICAgICAgIC8vIGZyb20gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfZGF0ZV9kYXRlLmpzLnNvdXJjZS5odG1sCiAgICAgICAgLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZQogICAgICAgIGlzb0R1cmF0aW9uUmVnZXggPSAvXigtKT9QKD86KD86KFswLTksLl0qKVkpPyg/OihbMC05LC5dKilNKT8oPzooWzAtOSwuXSopRCk/KD86VCg/OihbMC05LC5dKilIKT8oPzooWzAtOSwuXSopTSk/KD86KFswLTksLl0qKVMpPyk/fChbMC05LC5dKilXKSQvLAoKICAgICAgICAvLyBmb3JtYXQgdG9rZW5zCiAgICAgICAgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFtbXlxbXSpcXSl8KFxcKT8oTW98TU0/TT9NP3xEb3xERERvfEREP0Q/RD98ZGRkP2Q/fGRvP3x3W298d10/fFdbb3xXXT98UXxZWVlZWVl8WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xtbT98c3M/fFN7MSw0fXxYfHp6P3xaWj98LikvZywKICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxbW15cW10qXF0pfChcXCk/KExUfExMP0w/TD98bHsxLDR9KS9nLAoKICAgICAgICAvLyBwYXJzaW5nIHRva2VuIHJlZ2V4ZXMKICAgICAgICBwYXJzZVRva2VuT25lT3JUd29EaWdpdHMgPSAvXGRcZD8vLCAvLyAwIC0gOTkKICAgICAgICBwYXJzZVRva2VuT25lVG9UaHJlZURpZ2l0cyA9IC9cZHsxLDN9LywgLy8gMCAtIDk5OQogICAgICAgIHBhcnNlVG9rZW5PbmVUb0ZvdXJEaWdpdHMgPSAvXGR7MSw0fS8sIC8vIDAgLSA5OTk5CiAgICAgICAgcGFyc2VUb2tlbk9uZVRvU2l4RGlnaXRzID0gL1srXC1dP1xkezEsNn0vLCAvLyAtOTk5LDk5OSAtIDk5OSw5OTkKICAgICAgICBwYXJzZVRva2VuRGlnaXRzID0gL1xkKy8sIC8vIG5vbnplcm8gbnVtYmVyIG9mIGRpZ2l0cwogICAgICAgIHBhcnNlVG9rZW5Xb3JkID0gL1swLTldKlsnYS16XHUwMEEwLVx1MDVGRlx1MDcwMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0rfFtcdTA2MDAtXHUwNkZGXC9dKyhccyo/W1x1MDYwMC1cdTA2RkZdKyl7MSwyfS9pLCAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy4KICAgICAgICBwYXJzZVRva2VuVGltZXpvbmUgPSAvWnxbXCtcLV1cZFxkOj9cZFxkL2dpLCAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFoKICAgICAgICBwYXJzZVRva2VuVCA9IC9UL2ksIC8vIFQgKElTTyBzZXBhcmF0b3IpCiAgICAgICAgcGFyc2VUb2tlblRpbWVzdGFtcE1zID0gL1tcK1wtXT9cZCsoXC5cZHsxLDN9KT8vLCAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyMwogICAgICAgIHBhcnNlVG9rZW5PcmRpbmFsID0gL1xkezEsMn0vLAoKICAgICAgICAvL3N0cmljdCBwYXJzaW5nIHJlZ2V4ZXMKICAgICAgICBwYXJzZVRva2VuT25lRGlnaXQgPSAvXGQvLCAvLyAwIC0gOQogICAgICAgIHBhcnNlVG9rZW5Ud29EaWdpdHMgPSAvXGRcZC8sIC8vIDAwIC0gOTkKICAgICAgICBwYXJzZVRva2VuVGhyZWVEaWdpdHMgPSAvXGR7M30vLCAvLyAwMDAgLSA5OTkKICAgICAgICBwYXJzZVRva2VuRm91ckRpZ2l0cyA9IC9cZHs0fS8sIC8vIDAwMDAgLSA5OTk5CiAgICAgICAgcGFyc2VUb2tlblNpeERpZ2l0cyA9IC9bKy1dP1xkezZ9LywgLy8gLTk5OSw5OTkgLSA5OTksOTk5CiAgICAgICAgcGFyc2VUb2tlblNpZ25lZE51bWJlciA9IC9bKy1dP1xkKy8sIC8vIC1pbmYgLSBpbmYKCiAgICAgICAgLy8gaXNvIDg2MDEgcmVnZXgKICAgICAgICAvLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMCkKICAgICAgICBpc29SZWdleCA9IC9eXHMqKD86WystXVxkezZ9fFxkezR9KS0oPzooXGRcZC1cZFxkKXwoV1xkXGQkKXwoV1xkXGQtXGQpfChcZFxkXGQpKSgoVHwgKShcZFxkKDpcZFxkKDpcZFxkKFwuXGQrKT8pPyk/KT8oW1wrXC1dXGRcZCg/Ojo/XGRcZCk/fFxzKlopPyk/JC8sCgogICAgICAgIGlzb0Zvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWicsCgogICAgICAgIGlzb0RhdGVzID0gWwogICAgICAgICAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXGR7Nn0tXGR7Mn0tXGR7Mn0vXSwKICAgICAgICAgICAgWydZWVlZLU1NLUREJywgL1xkezR9LVxkezJ9LVxkezJ9L10sCiAgICAgICAgICAgIFsnR0dHRy1bV11XVy1FJywgL1xkezR9LVdcZHsyfS1cZC9dLAogICAgICAgICAgICBbJ0dHR0ctW1ddV1cnLCAvXGR7NH0tV1xkezJ9L10sCiAgICAgICAgICAgIFsnWVlZWS1EREQnLCAvXGR7NH0tXGR7M30vXQogICAgICAgIF0sCgogICAgICAgIC8vIGlzbyB0aW1lIGZvcm1hdHMgYW5kIHJlZ2V4ZXMKICAgICAgICBpc29UaW1lcyA9IFsKICAgICAgICAgICAgWydISDptbTpzcy5TU1NTJywgLyhUfCApXGRcZDpcZFxkOlxkXGRcLlxkKy9dLAogICAgICAgICAgICBbJ0hIOm1tOnNzJywgLyhUfCApXGRcZDpcZFxkOlxkXGQvXSwKICAgICAgICAgICAgWydISDptbScsIC8oVHwgKVxkXGQ6XGRcZC9dLAogICAgICAgICAgICBbJ0hIJywgLyhUfCApXGRcZC9dCiAgICAgICAgXSwKCiAgICAgICAgLy8gdGltZXpvbmUgY2h1bmtlciAiKzEwOjAwIiA+IFsiMTAiLCAiMDAiXSBvciAiLTE1MzAiID4gWyItMTUiLCAiMzAiXQogICAgICAgIHBhcnNlVGltZXpvbmVDaHVua2VyID0gLyhbXCtcLV18XGRcZCkvZ2ksCgogICAgICAgIC8vIGdldHRlciBhbmQgc2V0dGVyIG5hbWVzCiAgICAgICAgcHJveHlHZXR0ZXJzQW5kU2V0dGVycyA9ICdEYXRlfEhvdXJzfE1pbnV0ZXN8U2Vjb25kc3xNaWxsaXNlY29uZHMnLnNwbGl0KCd8JyksCiAgICAgICAgdW5pdE1pbGxpc2Vjb25kRmFjdG9ycyA9IHsKICAgICAgICAgICAgJ01pbGxpc2Vjb25kcycgOiAxLAogICAgICAgICAgICAnU2Vjb25kcycgOiAxZTMsCiAgICAgICAgICAgICdNaW51dGVzJyA6IDZlNCwKICAgICAgICAgICAgJ0hvdXJzJyA6IDM2ZTUsCiAgICAgICAgICAgICdEYXlzJyA6IDg2NGU1LAogICAgICAgICAgICAnTW9udGhzJyA6IDI1OTJlNiwKICAgICAgICAgICAgJ1llYXJzJyA6IDMxNTM2ZTYKICAgICAgICB9LAoKICAgICAgICB1bml0QWxpYXNlcyA9IHsKICAgICAgICAgICAgbXMgOiAnbWlsbGlzZWNvbmQnLAogICAgICAgICAgICBzIDogJ3NlY29uZCcsCiAgICAgICAgICAgIG0gOiAnbWludXRlJywKICAgICAgICAgICAgaCA6ICdob3VyJywKICAgICAgICAgICAgZCA6ICdkYXknLAogICAgICAgICAgICBEIDogJ2RhdGUnLAogICAgICAgICAgICB3IDogJ3dlZWsnLAogICAgICAgICAgICBXIDogJ2lzb1dlZWsnLAogICAgICAgICAgICBNIDogJ21vbnRoJywKICAgICAgICAgICAgUSA6ICdxdWFydGVyJywKICAgICAgICAgICAgeSA6ICd5ZWFyJywKICAgICAgICAgICAgREREIDogJ2RheU9mWWVhcicsCiAgICAgICAgICAgIGUgOiAnd2Vla2RheScsCiAgICAgICAgICAgIEUgOiAnaXNvV2Vla2RheScsCiAgICAgICAgICAgIGdnOiAnd2Vla1llYXInLAogICAgICAgICAgICBHRzogJ2lzb1dlZWtZZWFyJwogICAgICAgIH0sCgogICAgICAgIGNhbWVsRnVuY3Rpb25zID0gewogICAgICAgICAgICBkYXlvZnllYXIgOiAnZGF5T2ZZZWFyJywKICAgICAgICAgICAgaXNvd2Vla2RheSA6ICdpc29XZWVrZGF5JywKICAgICAgICAgICAgaXNvd2VlayA6ICdpc29XZWVrJywKICAgICAgICAgICAgd2Vla3llYXIgOiAnd2Vla1llYXInLAogICAgICAgICAgICBpc293ZWVreWVhciA6ICdpc29XZWVrWWVhcicKICAgICAgICB9LAoKICAgICAgICAvLyBmb3JtYXQgZnVuY3Rpb24gc3RyaW5ncwogICAgICAgIGZvcm1hdEZ1bmN0aW9ucyA9IHt9LAoKICAgICAgICAvLyB0b2tlbnMgdG8gb3JkaW5hbGl6ZSBhbmQgcGFkCiAgICAgICAgb3JkaW5hbGl6ZVRva2VucyA9ICdEREQgdyBXIE0gRCBkJy5zcGxpdCgnICcpLAogICAgICAgIHBhZGRlZFRva2VucyA9ICdNIEQgSCBoIG0gcyB3IFcnLnNwbGl0KCcgJyksCgogICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zID0gewogICAgICAgICAgICBNICAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE1NTSAgOiBmdW5jdGlvbiAoZm9ybWF0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sYW5nKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgTU1NTSA6IGZ1bmN0aW9uIChmb3JtYXQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmcoKS5tb250aHModGhpcywgZm9ybWF0KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgRCAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGUoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgREREICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRheU9mWWVhcigpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkICAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRkICAgOiBmdW5jdGlvbiAoZm9ybWF0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sYW5nKCkud2Vla2RheXNNaW4odGhpcywgZm9ybWF0KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGRkICA6IGZ1bmN0aW9uIChmb3JtYXQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmcoKS53ZWVrZGF5c1Nob3J0KHRoaXMsIGZvcm1hdCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRkZGQgOiBmdW5jdGlvbiAoZm9ybWF0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sYW5nKCkud2Vla2RheXModGhpcywgZm9ybWF0KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdyAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndlZWsoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgVyAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWsoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWVkgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwodGhpcy55ZWFyKCkgJSAxMDAsIDIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBZWVlZIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbCh0aGlzLnllYXIoKSwgNCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFlZWVlZIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbCh0aGlzLnllYXIoKSwgNSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFlZWVlZWSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciB5ID0gdGhpcy55ZWFyKCksIHNpZ24gPSB5ID49IDAgPyAnKycgOiAnLSc7CiAgICAgICAgICAgICAgICByZXR1cm4gc2lnbiArIGxlZnRaZXJvRmlsbChNYXRoLmFicyh5KSwgNik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdnICAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMud2Vla1llYXIoKSAlIDEwMCwgMik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdnZ2cgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMud2Vla1llYXIoKSwgNCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdnZ2dnIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbCh0aGlzLndlZWtZZWFyKCksIDUpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBHRyAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbCh0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDAsIDIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBHR0dHIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbCh0aGlzLmlzb1dlZWtZZWFyKCksIDQpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBHR0dHRyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwodGhpcy5pc29XZWVrWWVhcigpLCA1KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndlZWtkYXkoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgRSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWtkYXkoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYSAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmcoKS5tZXJpZGllbSh0aGlzLmhvdXJzKCksIHRoaXMubWludXRlcygpLCB0cnVlKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgQSAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmcoKS5tZXJpZGllbSh0aGlzLmhvdXJzKCksIHRoaXMubWludXRlcygpLCBmYWxzZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEggICAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBoICAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSAlIDEyIHx8IDEyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBtICAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWludXRlcygpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzICAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Vjb25kcygpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBTICAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRvSW50KHRoaXMubWlsbGlzZWNvbmRzKCkgLyAxMDApOwogICAgICAgICAgICB9LAogICAgICAgICAgICBTUyAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbCh0b0ludCh0aGlzLm1pbGxpc2Vjb25kcygpIC8gMTApLCAyKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgU1NTICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwodGhpcy5taWxsaXNlY29uZHMoKSwgMyk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFNTU1MgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMubWlsbGlzZWNvbmRzKCksIDMpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBaICAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGEgPSAtdGhpcy56b25lKCksCiAgICAgICAgICAgICAgICAgICAgYiA9ICIrIjsKICAgICAgICAgICAgICAgIGlmIChhIDwgMCkgewogICAgICAgICAgICAgICAgICAgIGEgPSAtYTsKICAgICAgICAgICAgICAgICAgICBiID0gIi0iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGIgKyBsZWZ0WmVyb0ZpbGwodG9JbnQoYSAvIDYwKSwgMikgKyAiOiIgKyBsZWZ0WmVyb0ZpbGwodG9JbnQoYSkgJSA2MCwgMik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFpaICAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgYSA9IC10aGlzLnpvbmUoKSwKICAgICAgICAgICAgICAgICAgICBiID0gIisiOwogICAgICAgICAgICAgICAgaWYgKGEgPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgYSA9IC1hOwogICAgICAgICAgICAgICAgICAgIGIgPSAiLSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gYiArIGxlZnRaZXJvRmlsbCh0b0ludChhIC8gNjApLCAyKSArIGxlZnRaZXJvRmlsbCh0b0ludChhKSAlIDYwLCAyKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgeiA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnpvbmVBYmJyKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHp6IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuem9uZU5hbWUoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWCAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnVuaXgoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgUSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnF1YXJ0ZXIoKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGxpc3RzID0gWydtb250aHMnLCAnbW9udGhzU2hvcnQnLCAnd2Vla2RheXMnLCAnd2Vla2RheXNTaG9ydCcsICd3ZWVrZGF5c01pbiddOwoKICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7CiAgICAgICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LCBhbmQgZXM1IHN0YW5kYXJkIGlzIG5vdCB2ZXJ5CiAgICAgICAgLy8gaGVscGZ1bC4KICAgICAgICByZXR1cm4gewogICAgICAgICAgICBlbXB0eSA6IGZhbHNlLAogICAgICAgICAgICB1bnVzZWRUb2tlbnMgOiBbXSwKICAgICAgICAgICAgdW51c2VkSW5wdXQgOiBbXSwKICAgICAgICAgICAgb3ZlcmZsb3cgOiAtMiwKICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlciA6IDAsCiAgICAgICAgICAgIG51bGxJbnB1dCA6IGZhbHNlLAogICAgICAgICAgICBpbnZhbGlkTW9udGggOiBudWxsLAogICAgICAgICAgICBpbnZhbGlkRm9ybWF0IDogZmFsc2UsCiAgICAgICAgICAgIHVzZXJJbnZhbGlkYXRlZCA6IGZhbHNlLAogICAgICAgICAgICBpc286IGZhbHNlCiAgICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikgewogICAgICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlOwogICAgICAgIGZ1bmN0aW9uIHByaW50TXNnKCkgewogICAgICAgICAgICBpZiAobW9tZW50LnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiYKICAgICAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oIkRlcHJlY2F0aW9uIHdhcm5pbmc6ICIgKyBtc2cpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoZmlyc3RUaW1lKSB7CiAgICAgICAgICAgICAgICBwcmludE1zZygpOwogICAgICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwgZm4pOwogICAgfQoKICAgIGZ1bmN0aW9uIHBhZFRva2VuKGZ1bmMsIGNvdW50KSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwoZnVuYy5jYWxsKHRoaXMsIGEpLCBjb3VudCk7CiAgICAgICAgfTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yZGluYWxpemVUb2tlbihmdW5jLCBwZXJpb2QpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMubGFuZygpLm9yZGluYWwoZnVuYy5jYWxsKHRoaXMsIGEpLCBwZXJpb2QpOwogICAgICAgIH07CiAgICB9CgogICAgd2hpbGUgKG9yZGluYWxpemVUb2tlbnMubGVuZ3RoKSB7CiAgICAgICAgaSA9IG9yZGluYWxpemVUb2tlbnMucG9wKCk7CiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbaSArICdvJ10gPSBvcmRpbmFsaXplVG9rZW4oZm9ybWF0VG9rZW5GdW5jdGlvbnNbaV0sIGkpOwogICAgfQogICAgd2hpbGUgKHBhZGRlZFRva2Vucy5sZW5ndGgpIHsKICAgICAgICBpID0gcGFkZGVkVG9rZW5zLnBvcCgpOwogICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW2kgKyBpXSA9IHBhZFRva2VuKGZvcm1hdFRva2VuRnVuY3Rpb25zW2ldLCAyKTsKICAgIH0KICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zLkREREQgPSBwYWRUb2tlbihmb3JtYXRUb2tlbkZ1bmN0aW9ucy5EREQsIDMpOwoKCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgICAgQ29uc3RydWN0b3JzCiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgogICAgZnVuY3Rpb24gTGFuZ3VhZ2UoKSB7CgogICAgfQoKICAgIC8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0CiAgICBmdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7CiAgICAgICAgY2hlY2tPdmVyZmxvdyhjb25maWcpOwogICAgICAgIGV4dGVuZCh0aGlzLCBjb25maWcpOwogICAgfQoKICAgIC8vIER1cmF0aW9uIENvbnN0cnVjdG9yCiAgICBmdW5jdGlvbiBEdXJhdGlvbihkdXJhdGlvbikgewogICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksCiAgICAgICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCwKICAgICAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLAogICAgICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCwKICAgICAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCAwLAogICAgICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLAogICAgICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsCiAgICAgICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsCiAgICAgICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsCiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwOwoKICAgICAgICAvLyByZXByZXNlbnRhdGlvbiBmb3IgZGF0ZUFkZFJlbW92ZQogICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9ICttaWxsaXNlY29uZHMgKwogICAgICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMAogICAgICAgICAgICBtaW51dGVzICogNmU0ICsgLy8gMTAwMCAqIDYwCiAgICAgICAgICAgIGhvdXJzICogMzZlNTsgLy8gMTAwMCAqIDYwICogNjAKICAgICAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGEKICAgICAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5CiAgICAgICAgdGhpcy5fZGF5cyA9ICtkYXlzICsKICAgICAgICAgICAgd2Vla3MgKiA3OwogICAgICAgIC8vIEl0IGlzIGltcG9zc2libGUgdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nCiAgICAgICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmUKICAgICAgICAvLyBpdCBzZXBhcmF0ZWx5LgogICAgICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgKwogICAgICAgICAgICBxdWFydGVycyAqIDMgKwogICAgICAgICAgICB5ZWFycyAqIDEyOwoKICAgICAgICB0aGlzLl9kYXRhID0ge307CgogICAgICAgIHRoaXMuX2J1YmJsZSgpOwogICAgfQoKICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAgICBIZWxwZXJzCiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKICAgIGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7CiAgICAgICAgZm9yICh2YXIgaSBpbiBiKSB7CiAgICAgICAgICAgIGlmIChiLmhhc093blByb3BlcnR5KGkpKSB7CiAgICAgICAgICAgICAgICBhW2ldID0gYltpXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGIuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikpIHsKICAgICAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7CiAgICAgICAgfQoKICAgICAgICBpZiAoYi5oYXNPd25Qcm9wZXJ0eSgidmFsdWVPZiIpKSB7CiAgICAgICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjsKICAgICAgICB9CgogICAgICAgIHJldHVybiBhOwogICAgfQoKICAgIGZ1bmN0aW9uIGNsb25lTW9tZW50KG0pIHsKICAgICAgICB2YXIgcmVzdWx0ID0ge30sIGk7CiAgICAgICAgZm9yIChpIGluIG0pIHsKICAgICAgICAgICAgaWYgKG0uaGFzT3duUHJvcGVydHkoaSkgJiYgbW9tZW50UHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShpKSkgewogICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gbVtpXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICBmdW5jdGlvbiBhYnNSb3VuZChudW1iZXIpIHsKICAgICAgICBpZiAobnVtYmVyIDwgMCkgewogICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gbGVmdCB6ZXJvIGZpbGwgYSBudW1iZXIKICAgIC8vIHNlZSBodHRwOi8vanNwZXJmLmNvbS9sZWZ0LXplcm8tZmlsbGluZyBmb3IgcGVyZm9ybWFuY2UgY29tcGFyaXNvbgogICAgZnVuY3Rpb24gbGVmdFplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHsKICAgICAgICB2YXIgb3V0cHV0ID0gJycgKyBNYXRoLmFicyhudW1iZXIpLAogICAgICAgICAgICBzaWduID0gbnVtYmVyID49IDA7CgogICAgICAgIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7CiAgICAgICAgICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIChzaWduID8gKGZvcmNlU2lnbiA/ICcrJyA6ICcnKSA6ICctJykgKyBvdXRwdXQ7CiAgICB9CgogICAgLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBfLmFkZFRpbWUgYW5kIF8uc3VidHJhY3RUaW1lCiAgICBmdW5jdGlvbiBhZGRPclN1YnRyYWN0RHVyYXRpb25Gcm9tTW9tZW50KG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHsKICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcywKICAgICAgICAgICAgZGF5cyA9IGR1cmF0aW9uLl9kYXlzLAogICAgICAgICAgICBtb250aHMgPSBkdXJhdGlvbi5fbW9udGhzOwogICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDsKCiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcykgewogICAgICAgICAgICBtb20uX2Quc2V0VGltZSgrbW9tLl9kICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpOwogICAgICAgIH0KICAgICAgICBpZiAoZGF5cykgewogICAgICAgICAgICByYXdTZXR0ZXIobW9tLCAnRGF0ZScsIHJhd0dldHRlcihtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpOwogICAgICAgIH0KICAgICAgICBpZiAobW9udGhzKSB7CiAgICAgICAgICAgIHJhd01vbnRoU2V0dGVyKG1vbSwgcmF3R2V0dGVyKG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7CiAgICAgICAgfQogICAgICAgIGlmICh1cGRhdGVPZmZzZXQpIHsKICAgICAgICAgICAgbW9tZW50LnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gY2hlY2sgaWYgaXMgYW4gYXJyYXkKICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHsKICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJzsKICAgIH0KCiAgICBmdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHsKICAgICAgICByZXR1cm4gIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJyB8fAogICAgICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBEYXRlOwogICAgfQoKICAgIC8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXMKICAgIGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7CiAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLAogICAgICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLAogICAgICAgICAgICBkaWZmcyA9IDAsCiAgICAgICAgICAgIGk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgIGlmICgoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8CiAgICAgICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpKSB7CiAgICAgICAgICAgICAgICBkaWZmcysrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7CiAgICB9CgogICAgZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHsKICAgICAgICBpZiAodW5pdHMpIHsKICAgICAgICAgICAgdmFyIGxvd2VyZWQgPSB1bml0cy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyguKXMkLywgJyQxJyk7CiAgICAgICAgICAgIHVuaXRzID0gdW5pdEFsaWFzZXNbdW5pdHNdIHx8IGNhbWVsRnVuY3Rpb25zW2xvd2VyZWRdIHx8IGxvd2VyZWQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiB1bml0czsKICAgIH0KCiAgICBmdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkgewogICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSwKICAgICAgICAgICAgbm9ybWFsaXplZFByb3AsCiAgICAgICAgICAgIHByb3A7CgogICAgICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkgewogICAgICAgICAgICBpZiAoaW5wdXRPYmplY3QuaGFzT3duUHJvcGVydHkocHJvcCkpIHsKICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7CiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHsKICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7CiAgICB9CgogICAgZnVuY3Rpb24gbWFrZUxpc3QoZmllbGQpIHsKICAgICAgICB2YXIgY291bnQsIHNldHRlcjsKCiAgICAgICAgaWYgKGZpZWxkLmluZGV4T2YoJ3dlZWsnKSA9PT0gMCkgewogICAgICAgICAgICBjb3VudCA9IDc7CiAgICAgICAgICAgIHNldHRlciA9ICdkYXknOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChmaWVsZC5pbmRleE9mKCdtb250aCcpID09PSAwKSB7CiAgICAgICAgICAgIGNvdW50ID0gMTI7CiAgICAgICAgICAgIHNldHRlciA9ICdtb250aCc7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBtb21lbnRbZmllbGRdID0gZnVuY3Rpb24gKGZvcm1hdCwgaW5kZXgpIHsKICAgICAgICAgICAgdmFyIGksIGdldHRlciwKICAgICAgICAgICAgICAgIG1ldGhvZCA9IG1vbWVudC5mbi5fbGFuZ1tmaWVsZF0sCiAgICAgICAgICAgICAgICByZXN1bHRzID0gW107CgogICAgICAgICAgICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0OwogICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkOwogICAgICAgICAgICB9CgogICAgICAgICAgICBnZXR0ZXIgPSBmdW5jdGlvbiAoaSkgewogICAgICAgICAgICAgICAgdmFyIG0gPSBtb21lbnQoKS51dGMoKS5zZXQoc2V0dGVyLCBpKTsKICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QuY2FsbChtb21lbnQuZm4uX2xhbmcsIG0sIGZvcm1hdCB8fCAnJyk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGdldHRlcihpbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChnZXR0ZXIoaSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHsKICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLAogICAgICAgICAgICB2YWx1ZSA9IDA7CgogICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7CiAgICAgICAgICAgIGlmIChjb2VyY2VkTnVtYmVyID49IDApIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5mbG9vcihjb2VyY2VkTnVtYmVyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5jZWlsKGNvZXJjZWROdW1iZXIpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICB9CgogICAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHsKICAgICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGggKyAxLCAwKSkuZ2V0VVRDRGF0ZSgpOwogICAgfQoKICAgIGZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7CiAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobW9tZW50KFt5ZWFyLCAxMSwgMzEgKyBkb3cgLSBkb3ldKSwgZG93LCBkb3kpLndlZWs7CiAgICB9CgogICAgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7CiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7CiAgICB9CgogICAgZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7CiAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cobSkgewogICAgICAgIHZhciBvdmVyZmxvdzsKICAgICAgICBpZiAobS5fYSAmJiBtLl9wZi5vdmVyZmxvdyA9PT0gLTIpIHsKICAgICAgICAgICAgb3ZlcmZsb3cgPQogICAgICAgICAgICAgICAgbS5fYVtNT05USF0gPCAwIHx8IG0uX2FbTU9OVEhdID4gMTEgPyBNT05USCA6CiAgICAgICAgICAgICAgICBtLl9hW0RBVEVdIDwgMSB8fCBtLl9hW0RBVEVdID4gZGF5c0luTW9udGgobS5fYVtZRUFSXSwgbS5fYVtNT05USF0pID8gREFURSA6CiAgICAgICAgICAgICAgICBtLl9hW0hPVVJdIDwgMCB8fCBtLl9hW0hPVVJdID4gMjMgPyBIT1VSIDoKICAgICAgICAgICAgICAgIG0uX2FbTUlOVVRFXSA8IDAgfHwgbS5fYVtNSU5VVEVdID4gNTkgPyBNSU5VVEUgOgogICAgICAgICAgICAgICAgbS5fYVtTRUNPTkRdIDwgMCB8fCBtLl9hW1NFQ09ORF0gPiA1OSA/IFNFQ09ORCA6CiAgICAgICAgICAgICAgICBtLl9hW01JTExJU0VDT05EXSA8IDAgfHwgbS5fYVtNSUxMSVNFQ09ORF0gPiA5OTkgPyBNSUxMSVNFQ09ORCA6CiAgICAgICAgICAgICAgICAtMTsKCiAgICAgICAgICAgIGlmIChtLl9wZi5fb3ZlcmZsb3dEYXlPZlllYXIgJiYgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpKSB7CiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG0uX3BmLm92ZXJmbG93ID0gb3ZlcmZsb3c7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGlzVmFsaWQobSkgewogICAgICAgIGlmIChtLl9pc1ZhbGlkID09IG51bGwpIHsKICAgICAgICAgICAgbS5faXNWYWxpZCA9ICFpc05hTihtLl9kLmdldFRpbWUoKSkgJiYKICAgICAgICAgICAgICAgIG0uX3BmLm92ZXJmbG93IDwgMCAmJgogICAgICAgICAgICAgICAgIW0uX3BmLmVtcHR5ICYmCiAgICAgICAgICAgICAgICAhbS5fcGYuaW52YWxpZE1vbnRoICYmCiAgICAgICAgICAgICAgICAhbS5fcGYubnVsbElucHV0ICYmCiAgICAgICAgICAgICAgICAhbS5fcGYuaW52YWxpZEZvcm1hdCAmJgogICAgICAgICAgICAgICAgIW0uX3BmLnVzZXJJbnZhbGlkYXRlZDsKCiAgICAgICAgICAgIGlmIChtLl9zdHJpY3QpIHsKICAgICAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBtLl9pc1ZhbGlkICYmCiAgICAgICAgICAgICAgICAgICAgbS5fcGYuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJgogICAgICAgICAgICAgICAgICAgIG0uX3BmLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDA7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7CiAgICB9CgogICAgZnVuY3Rpb24gbm9ybWFsaXplTGFuZ3VhZ2Uoa2V5KSB7CiAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5OwogICAgfQoKICAgIC8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuCiAgICBmdW5jdGlvbiBtYWtlQXMoaW5wdXQsIG1vZGVsKSB7CiAgICAgICAgcmV0dXJuIG1vZGVsLl9pc1VUQyA/IG1vbWVudChpbnB1dCkuem9uZShtb2RlbC5fb2Zmc2V0IHx8IDApIDoKICAgICAgICAgICAgbW9tZW50KGlucHV0KS5sb2NhbCgpOwogICAgfQoKICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAgICBMYW5ndWFnZXMKICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgogICAgZXh0ZW5kKExhbmd1YWdlLnByb3RvdHlwZSwgewoKICAgICAgICBzZXQgOiBmdW5jdGlvbiAoY29uZmlnKSB7CiAgICAgICAgICAgIHZhciBwcm9wLCBpOwogICAgICAgICAgICBmb3IgKGkgaW4gY29uZmlnKSB7CiAgICAgICAgICAgICAgICBwcm9wID0gY29uZmlnW2ldOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpc1tpXSA9IHByb3A7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgX21vbnRocyA6ICJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyIi5zcGxpdCgiXyIpLAogICAgICAgIG1vbnRocyA6IGZ1bmN0aW9uIChtKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNbbS5tb250aCgpXTsKICAgICAgICB9LAoKICAgICAgICBfbW9udGhzU2hvcnQgOiAiSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMiLnNwbGl0KCJfIiksCiAgICAgICAgbW9udGhzU2hvcnQgOiBmdW5jdGlvbiAobSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXTsKICAgICAgICB9LAoKICAgICAgICBtb250aHNQYXJzZSA6IGZ1bmN0aW9uIChtb250aE5hbWUpIHsKICAgICAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7CgogICAgICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykgewogICAgICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlW2ldKSB7CiAgICAgICAgICAgICAgICAgICAgbW9tID0gbW9tZW50LnV0YyhbMjAwMCwgaV0pOwogICAgICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4CiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBfd2Vla2RheXMgOiAiU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXkiLnNwbGl0KCJfIiksCiAgICAgICAgd2Vla2RheXMgOiBmdW5jdGlvbiAobSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNbbS5kYXkoKV07CiAgICAgICAgfSwKCiAgICAgICAgX3dlZWtkYXlzU2hvcnQgOiAiU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Ii5zcGxpdCgiXyIpLAogICAgICAgIHdlZWtkYXlzU2hvcnQgOiBmdW5jdGlvbiAobSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXTsKICAgICAgICB9LAoKICAgICAgICBfd2Vla2RheXNNaW4gOiAiU3VfTW9fVHVfV2VfVGhfRnJfU2EiLnNwbGl0KCJfIiksCiAgICAgICAgd2Vla2RheXNNaW4gOiBmdW5jdGlvbiAobSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV07CiAgICAgICAgfSwKCiAgICAgICAgd2Vla2RheXNQYXJzZSA6IGZ1bmN0aW9uICh3ZWVrZGF5TmFtZSkgewogICAgICAgICAgICB2YXIgaSwgbW9tLCByZWdleDsKCiAgICAgICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkgewogICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7CiAgICAgICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHkKICAgICAgICAgICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkgewogICAgICAgICAgICAgICAgICAgIG1vbSA9IG1vbWVudChbMjAwMCwgMV0pLmRheShpKTsKICAgICAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4CiAgICAgICAgICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgX2xvbmdEYXRlRm9ybWF0IDogewogICAgICAgICAgICBMVCA6ICJoOm1tIEEiLAogICAgICAgICAgICBMIDogIk1NL0REL1lZWVkiLAogICAgICAgICAgICBMTCA6ICJNTU1NIEQgWVlZWSIsCiAgICAgICAgICAgIExMTCA6ICJNTU1NIEQgWVlZWSBMVCIsCiAgICAgICAgICAgIExMTEwgOiAiZGRkZCwgTU1NTSBEIFlZWVkgTFQiCiAgICAgICAgfSwKICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07CiAgICAgICAgICAgIGlmICghb3V0cHV0ICYmIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXSkgewogICAgICAgICAgICAgICAgb3V0cHV0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldLnJlcGxhY2UoL01NTU18TU18RER8ZGRkZC9nLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbC5zbGljZSgxKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IG91dHB1dDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gb3V0cHV0OwogICAgICAgIH0sCgogICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICAgICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5cwogICAgICAgICAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS4KICAgICAgICAgICAgcmV0dXJuICgoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJyk7CiAgICAgICAgfSwKCiAgICAgICAgX21lcmlkaWVtUGFyc2UgOiAvW2FwXVwuP20/XC4/L2ksCiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHsKICAgICAgICAgICAgaWYgKGhvdXJzID4gMTEpIHsKICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgX2NhbGVuZGFyIDogewogICAgICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLAogICAgICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLAogICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLAogICAgICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJywKICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsCiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnCiAgICAgICAgfSwKICAgICAgICBjYWxlbmRhciA6IGZ1bmN0aW9uIChrZXksIG1vbSkgewogICAgICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XTsKICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdmdW5jdGlvbicgPyBvdXRwdXQuYXBwbHkobW9tKSA6IG91dHB1dDsKICAgICAgICB9LAoKICAgICAgICBfcmVsYXRpdmVUaW1lIDogewogICAgICAgICAgICBmdXR1cmUgOiAiaW4gJXMiLAogICAgICAgICAgICBwYXN0IDogIiVzIGFnbyIsCiAgICAgICAgICAgIHMgOiAiYSBmZXcgc2Vjb25kcyIsCiAgICAgICAgICAgIG0gOiAiYSBtaW51dGUiLAogICAgICAgICAgICBtbSA6ICIlZCBtaW51dGVzIiwKICAgICAgICAgICAgaCA6ICJhbiBob3VyIiwKICAgICAgICAgICAgaGggOiAiJWQgaG91cnMiLAogICAgICAgICAgICBkIDogImEgZGF5IiwKICAgICAgICAgICAgZGQgOiAiJWQgZGF5cyIsCiAgICAgICAgICAgIE0gOiAiYSBtb250aCIsCiAgICAgICAgICAgIE1NIDogIiVkIG1vbnRocyIsCiAgICAgICAgICAgIHkgOiAiYSB5ZWFyIiwKICAgICAgICAgICAgeXkgOiAiJWQgeWVhcnMiCiAgICAgICAgfSwKICAgICAgICByZWxhdGl2ZVRpbWUgOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7CiAgICAgICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTsKICAgICAgICAgICAgcmV0dXJuICh0eXBlb2Ygb3V0cHV0ID09PSAnZnVuY3Rpb24nKSA/CiAgICAgICAgICAgICAgICBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSA6CiAgICAgICAgICAgICAgICBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTsKICAgICAgICB9LAogICAgICAgIHBhc3RGdXR1cmUgOiBmdW5jdGlvbiAoZGlmZiwgb3V0cHV0KSB7CiAgICAgICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107CiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZm9ybWF0ID09PSAnZnVuY3Rpb24nID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTsKICAgICAgICB9LAoKICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCIlZCIsIG51bWJlcik7CiAgICAgICAgfSwKICAgICAgICBfb3JkaW5hbCA6ICIlZCIsCgogICAgICAgIHByZXBhcnNlIDogZnVuY3Rpb24gKHN0cmluZykgewogICAgICAgICAgICByZXR1cm4gc3RyaW5nOwogICAgICAgIH0sCgogICAgICAgIHBvc3Rmb3JtYXQgOiBmdW5jdGlvbiAoc3RyaW5nKSB7CiAgICAgICAgICAgIHJldHVybiBzdHJpbmc7CiAgICAgICAgfSwKCiAgICAgICAgd2VlayA6IGZ1bmN0aW9uIChtb20pIHsKICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobW9tLCB0aGlzLl93ZWVrLmRvdywgdGhpcy5fd2Vlay5kb3kpLndlZWs7CiAgICAgICAgfSwKCiAgICAgICAgX3dlZWsgOiB7CiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLgogICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuCiAgICAgICAgfSwKCiAgICAgICAgX2ludmFsaWREYXRlOiAnSW52YWxpZCBkYXRlJywKICAgICAgICBpbnZhbGlkRGF0ZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7CiAgICAgICAgfQogICAgfSk7CgogICAgLy8gTG9hZHMgYSBsYW5ndWFnZSBkZWZpbml0aW9uIGludG8gdGhlIGBsYW5ndWFnZXNgIGNhY2hlLiAgVGhlIGZ1bmN0aW9uCiAgICAvLyB0YWtlcyBhIGtleSBhbmQgb3B0aW9uYWxseSB2YWx1ZXMuICBJZiBub3QgaW4gdGhlIGJyb3dzZXIgYW5kIG5vIHZhbHVlcwogICAgLy8gYXJlIHByb3ZpZGVkLCBpdCB3aWxsIGxvYWQgdGhlIGxhbmd1YWdlIGZpbGUgbW9kdWxlLiAgQXMgYSBjb252ZW5pZW5jZSwKICAgIC8vIHRoaXMgZnVuY3Rpb24gYWxzbyByZXR1cm5zIHRoZSBsYW5ndWFnZSB2YWx1ZXMuCiAgICBmdW5jdGlvbiBsb2FkTGFuZyhrZXksIHZhbHVlcykgewogICAgICAgIHZhbHVlcy5hYmJyID0ga2V5OwogICAgICAgIGlmICghbGFuZ3VhZ2VzW2tleV0pIHsKICAgICAgICAgICAgbGFuZ3VhZ2VzW2tleV0gPSBuZXcgTGFuZ3VhZ2UoKTsKICAgICAgICB9CiAgICAgICAgbGFuZ3VhZ2VzW2tleV0uc2V0KHZhbHVlcyk7CiAgICAgICAgcmV0dXJuIGxhbmd1YWdlc1trZXldOwogICAgfQoKICAgIC8vIFJlbW92ZSBhIGxhbmd1YWdlIGZyb20gdGhlIGBsYW5ndWFnZXNgIGNhY2hlLiBNb3N0bHkgdXNlZnVsIGluIHRlc3RzLgogICAgZnVuY3Rpb24gdW5sb2FkTGFuZyhrZXkpIHsKICAgICAgICBkZWxldGUgbGFuZ3VhZ2VzW2tleV07CiAgICB9CgogICAgLy8gRGV0ZXJtaW5lcyB3aGljaCBsYW5ndWFnZSBkZWZpbml0aW9uIHRvIHVzZSBhbmQgcmV0dXJucyBpdC4KICAgIC8vCiAgICAvLyBXaXRoIG5vIHBhcmFtZXRlcnMsIGl0IHdpbGwgcmV0dXJuIHRoZSBnbG9iYWwgbGFuZ3VhZ2UuICBJZiB5b3UKICAgIC8vIHBhc3MgaW4gYSBsYW5ndWFnZSBrZXksIHN1Y2ggYXMgJ2VuJywgaXQgd2lsbCByZXR1cm4gdGhlCiAgICAvLyBkZWZpbml0aW9uIGZvciAnZW4nLCBzbyBsb25nIGFzICdlbicgaGFzIGFscmVhZHkgYmVlbiBsb2FkZWQgdXNpbmcKICAgIC8vIG1vbWVudC5sYW5nLgogICAgZnVuY3Rpb24gZ2V0TGFuZ0RlZmluaXRpb24oa2V5KSB7CiAgICAgICAgdmFyIGkgPSAwLCBqLCBsYW5nLCBuZXh0LCBzcGxpdCwKICAgICAgICAgICAgZ2V0ID0gZnVuY3Rpb24gKGspIHsKICAgICAgICAgICAgICAgIGlmICghbGFuZ3VhZ2VzW2tdICYmIGhhc01vZHVsZSkgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vbGFuZy8nICsgayk7CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gbGFuZ3VhZ2VzW2tdOwogICAgICAgICAgICB9OwoKICAgICAgICBpZiAoIWtleSkgewogICAgICAgICAgICByZXR1cm4gbW9tZW50LmZuLl9sYW5nOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFpc0FycmF5KGtleSkpIHsKICAgICAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZQogICAgICAgICAgICBsYW5nID0gZ2V0KGtleSk7CiAgICAgICAgICAgIGlmIChsYW5nKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbGFuZzsKICAgICAgICAgICAgfQogICAgICAgICAgICBrZXkgPSBba2V5XTsKICAgICAgICB9CgogICAgICAgIC8vcGljayB0aGUgbGFuZ3VhZ2UgZnJvbSB0aGUgYXJyYXkKICAgICAgICAvL3RyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoCiAgICAgICAgLy9zdWJzdHJpbmcgZnJvbSBtb3N0IHNwZWNpZmljIHRvIGxlYXN0LCBidXQgbW92ZSB0byB0aGUgbmV4dCBhcnJheSBpdGVtIGlmIGl0J3MgYSBtb3JlIHNwZWNpZmljIHZhcmlhbnQgdGhhbiB0aGUgY3VycmVudCByb290CiAgICAgICAgd2hpbGUgKGkgPCBrZXkubGVuZ3RoKSB7CiAgICAgICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTGFuZ3VhZ2Uoa2V5W2ldKS5zcGxpdCgnLScpOwogICAgICAgICAgICBqID0gc3BsaXQubGVuZ3RoOwogICAgICAgICAgICBuZXh0ID0gbm9ybWFsaXplTGFuZ3VhZ2Uoa2V5W2kgKyAxXSk7CiAgICAgICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDsKICAgICAgICAgICAgd2hpbGUgKGogPiAwKSB7CiAgICAgICAgICAgICAgICBsYW5nID0gZ2V0KHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7CiAgICAgICAgICAgICAgICBpZiAobGFuZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBsYW5nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5sZW5ndGggPj0gaiAmJiBjb21wYXJlQXJyYXlzKHNwbGl0LCBuZXh0LCB0cnVlKSA+PSBqIC0gMSkgewogICAgICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmUKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGotLTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpKys7CiAgICAgICAgfQogICAgICAgIHJldHVybiBtb21lbnQuZm4uX2xhbmc7CiAgICB9CgogICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgICAgIEZvcm1hdHRpbmcKICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgogICAgZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkgewogICAgICAgIGlmIChpbnB1dC5tYXRjaCgvXFtbXHNcU10vKSkgewogICAgICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxbfFxdJC9nLCAiIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXC9nLCAiIik7CiAgICB9CgogICAgZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCkgewogICAgICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSwgaSwgbGVuZ3RoOwoKICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7CiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7CiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAiIjsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gYXJyYXlbaV0gaW5zdGFuY2VvZiBGdW5jdGlvbiA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpIDogYXJyYXlbaV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG91dHB1dDsKICAgICAgICB9OwogICAgfQoKICAgIC8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdAogICAgZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkgewoKICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKSB7CiAgICAgICAgICAgIHJldHVybiBtLmxhbmcoKS5pbnZhbGlkRGF0ZSgpOwogICAgICAgIH0KCiAgICAgICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sYW5nKCkpOwoKICAgICAgICBpZiAoIWZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKSB7CiAgICAgICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID0gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7CiAgICB9CgogICAgZnVuY3Rpb24gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbGFuZykgewogICAgICAgIHZhciBpID0gNTsKCiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKGlucHV0KSB7CiAgICAgICAgICAgIHJldHVybiBsYW5nLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDsKICAgICAgICB9CgogICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwOwogICAgICAgIHdoaWxlIChpID49IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0KSkgewogICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShsb2NhbEZvcm1hdHRpbmdUb2tlbnMsIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2Vucyk7CiAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwOwogICAgICAgICAgICBpIC09IDE7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZm9ybWF0OwogICAgfQoKCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgICAgUGFyc2luZwogICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCiAgICAvLyBnZXQgdGhlIHJlZ2V4IHRvIGZpbmQgdGhlIG5leHQgdG9rZW4KICAgIGZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSB7CiAgICAgICAgdmFyIGEsIHN0cmljdCA9IGNvbmZpZy5fc3RyaWN0OwogICAgICAgIHN3aXRjaCAodG9rZW4pIHsKICAgICAgICBjYXNlICdRJzoKICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5PbmVEaWdpdDsKICAgICAgICBjYXNlICdEREREJzoKICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5UaHJlZURpZ2l0czsKICAgICAgICBjYXNlICdZWVlZJzoKICAgICAgICBjYXNlICdHR0dHJzoKICAgICAgICBjYXNlICdnZ2dnJzoKICAgICAgICAgICAgcmV0dXJuIHN0cmljdCA/IHBhcnNlVG9rZW5Gb3VyRGlnaXRzIDogcGFyc2VUb2tlbk9uZVRvRm91ckRpZ2l0czsKICAgICAgICBjYXNlICdZJzoKICAgICAgICBjYXNlICdHJzoKICAgICAgICBjYXNlICdnJzoKICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5TaWduZWROdW1iZXI7CiAgICAgICAgY2FzZSAnWVlZWVlZJzoKICAgICAgICBjYXNlICdZWVlZWSc6CiAgICAgICAgY2FzZSAnR0dHR0cnOgogICAgICAgIGNhc2UgJ2dnZ2dnJzoKICAgICAgICAgICAgcmV0dXJuIHN0cmljdCA/IHBhcnNlVG9rZW5TaXhEaWdpdHMgOiBwYXJzZVRva2VuT25lVG9TaXhEaWdpdHM7CiAgICAgICAgY2FzZSAnUyc6CiAgICAgICAgICAgIGlmIChzdHJpY3QpIHsgcmV0dXJuIHBhcnNlVG9rZW5PbmVEaWdpdDsgfQogICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgY2FzZSAnU1MnOgogICAgICAgICAgICBpZiAoc3RyaWN0KSB7IHJldHVybiBwYXJzZVRva2VuVHdvRGlnaXRzOyB9CiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICBjYXNlICdTU1MnOgogICAgICAgICAgICBpZiAoc3RyaWN0KSB7IHJldHVybiBwYXJzZVRva2VuVGhyZWVEaWdpdHM7IH0KICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgIGNhc2UgJ0RERCc6CiAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuT25lVG9UaHJlZURpZ2l0czsKICAgICAgICBjYXNlICdNTU0nOgogICAgICAgIGNhc2UgJ01NTU0nOgogICAgICAgIGNhc2UgJ2RkJzoKICAgICAgICBjYXNlICdkZGQnOgogICAgICAgIGNhc2UgJ2RkZGQnOgogICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbldvcmQ7CiAgICAgICAgY2FzZSAnYSc6CiAgICAgICAgY2FzZSAnQSc6CiAgICAgICAgICAgIHJldHVybiBnZXRMYW5nRGVmaW5pdGlvbihjb25maWcuX2wpLl9tZXJpZGllbVBhcnNlOwogICAgICAgIGNhc2UgJ1gnOgogICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlblRpbWVzdGFtcE1zOwogICAgICAgIGNhc2UgJ1onOgogICAgICAgIGNhc2UgJ1paJzoKICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5UaW1lem9uZTsKICAgICAgICBjYXNlICdUJzoKICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5UOwogICAgICAgIGNhc2UgJ1NTU1MnOgogICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbkRpZ2l0czsKICAgICAgICBjYXNlICdNTSc6CiAgICAgICAgY2FzZSAnREQnOgogICAgICAgIGNhc2UgJ1lZJzoKICAgICAgICBjYXNlICdHRyc6CiAgICAgICAgY2FzZSAnZ2cnOgogICAgICAgIGNhc2UgJ0hIJzoKICAgICAgICBjYXNlICdoaCc6CiAgICAgICAgY2FzZSAnbW0nOgogICAgICAgIGNhc2UgJ3NzJzoKICAgICAgICBjYXNlICd3dyc6CiAgICAgICAgY2FzZSAnV1cnOgogICAgICAgICAgICByZXR1cm4gc3RyaWN0ID8gcGFyc2VUb2tlblR3b0RpZ2l0cyA6IHBhcnNlVG9rZW5PbmVPclR3b0RpZ2l0czsKICAgICAgICBjYXNlICdNJzoKICAgICAgICBjYXNlICdEJzoKICAgICAgICBjYXNlICdkJzoKICAgICAgICBjYXNlICdIJzoKICAgICAgICBjYXNlICdoJzoKICAgICAgICBjYXNlICdtJzoKICAgICAgICBjYXNlICdzJzoKICAgICAgICBjYXNlICd3JzoKICAgICAgICBjYXNlICdXJzoKICAgICAgICBjYXNlICdlJzoKICAgICAgICBjYXNlICdFJzoKICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5PbmVPclR3b0RpZ2l0czsKICAgICAgICBjYXNlICdEbyc6CiAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuT3JkaW5hbDsKICAgICAgICBkZWZhdWx0IDoKICAgICAgICAgICAgYSA9IG5ldyBSZWdFeHAocmVnZXhwRXNjYXBlKHVuZXNjYXBlRm9ybWF0KHRva2VuLnJlcGxhY2UoJ1xcJywgJycpKSwgImkiKSk7CiAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB0aW1lem9uZU1pbnV0ZXNGcm9tU3RyaW5nKHN0cmluZykgewogICAgICAgIHN0cmluZyA9IHN0cmluZyB8fCAiIjsKICAgICAgICB2YXIgcG9zc2libGVUek1hdGNoZXMgPSAoc3RyaW5nLm1hdGNoKHBhcnNlVG9rZW5UaW1lem9uZSkgfHwgW10pLAogICAgICAgICAgICB0ekNodW5rID0gcG9zc2libGVUek1hdGNoZXNbcG9zc2libGVUek1hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW10sCiAgICAgICAgICAgIHBhcnRzID0gKHR6Q2h1bmsgKyAnJykubWF0Y2gocGFyc2VUaW1lem9uZUNodW5rZXIpIHx8IFsnLScsIDAsIDBdLAogICAgICAgICAgICBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTsKCiAgICAgICAgcmV0dXJuIHBhcnRzWzBdID09PSAnKycgPyAtbWludXRlcyA6IG1pbnV0ZXM7CiAgICB9CgogICAgLy8gZnVuY3Rpb24gdG8gY29udmVydCBzdHJpbmcgaW5wdXQgdG8gZGF0ZQogICAgZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHsKICAgICAgICB2YXIgYSwgZGF0ZVBhcnRBcnJheSA9IGNvbmZpZy5fYTsKCiAgICAgICAgc3dpdGNoICh0b2tlbikgewogICAgICAgIC8vIFFVQVJURVIKICAgICAgICBjYXNlICdRJzoKICAgICAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbTU9OVEhdID0gKHRvSW50KGlucHV0KSAtIDEpICogMzsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAvLyBNT05USAogICAgICAgIGNhc2UgJ00nIDogLy8gZmFsbCB0aHJvdWdoIHRvIE1NCiAgICAgICAgY2FzZSAnTU0nIDoKICAgICAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdNTU0nIDogLy8gZmFsbCB0aHJvdWdoIHRvIE1NTU0KICAgICAgICBjYXNlICdNTU1NJyA6CiAgICAgICAgICAgIGEgPSBnZXRMYW5nRGVmaW5pdGlvbihjb25maWcuX2wpLm1vbnRoc1BhcnNlKGlucHV0KTsKICAgICAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuCiAgICAgICAgICAgIGlmIChhICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbTU9OVEhdID0gYTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbmZpZy5fcGYuaW52YWxpZE1vbnRoID0gaW5wdXQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgLy8gREFZIE9GIE1PTlRICiAgICAgICAgY2FzZSAnRCcgOiAvLyBmYWxsIHRocm91Z2ggdG8gREQKICAgICAgICBjYXNlICdERCcgOgogICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgZGF0ZVBhcnRBcnJheVtEQVRFXSA9IHRvSW50KGlucHV0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdEbycgOgogICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgZGF0ZVBhcnRBcnJheVtEQVRFXSA9IHRvSW50KHBhcnNlSW50KGlucHV0LCAxMCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIERBWSBPRiBZRUFSCiAgICAgICAgY2FzZSAnREREJyA6IC8vIGZhbGwgdGhyb3VnaCB0byBERERECiAgICAgICAgY2FzZSAnRERERCcgOgogICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIFlFQVIKICAgICAgICBjYXNlICdZWScgOgogICAgICAgICAgICBkYXRlUGFydEFycmF5W1lFQVJdID0gbW9tZW50LnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnWVlZWScgOgogICAgICAgIGNhc2UgJ1lZWVlZJyA6CiAgICAgICAgY2FzZSAnWVlZWVlZJyA6CiAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbWUVBUl0gPSB0b0ludChpbnB1dCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIEFNIC8gUE0KICAgICAgICBjYXNlICdhJyA6IC8vIGZhbGwgdGhyb3VnaCB0byBBCiAgICAgICAgY2FzZSAnQScgOgogICAgICAgICAgICBjb25maWcuX2lzUG0gPSBnZXRMYW5nRGVmaW5pdGlvbihjb25maWcuX2wpLmlzUE0oaW5wdXQpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAvLyAyNCBIT1VSCiAgICAgICAgY2FzZSAnSCcgOiAvLyBmYWxsIHRocm91Z2ggdG8gaGgKICAgICAgICBjYXNlICdISCcgOiAvLyBmYWxsIHRocm91Z2ggdG8gaGgKICAgICAgICBjYXNlICdoJyA6IC8vIGZhbGwgdGhyb3VnaCB0byBoaAogICAgICAgIGNhc2UgJ2hoJyA6CiAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIE1JTlVURQogICAgICAgIGNhc2UgJ20nIDogLy8gZmFsbCB0aHJvdWdoIHRvIG1tCiAgICAgICAgY2FzZSAnbW0nIDoKICAgICAgICAgICAgZGF0ZVBhcnRBcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAvLyBTRUNPTkQKICAgICAgICBjYXNlICdzJyA6IC8vIGZhbGwgdGhyb3VnaCB0byBzcwogICAgICAgIGNhc2UgJ3NzJyA6CiAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgLy8gTUlMTElTRUNPTkQKICAgICAgICBjYXNlICdTJyA6CiAgICAgICAgY2FzZSAnU1MnIDoKICAgICAgICBjYXNlICdTU1MnIDoKICAgICAgICBjYXNlICdTU1NTJyA6CiAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbTUlMTElTRUNPTkRdID0gdG9JbnQoKCcwLicgKyBpbnB1dCkgKiAxMDAwKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgLy8gVU5JWCBUSU1FU1RBTVAgV0lUSCBNUwogICAgICAgIGNhc2UgJ1gnOgogICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0KSAqIDEwMDApOwogICAgICAgICAgICBicmVhazsKICAgICAgICAvLyBUSU1FWk9ORQogICAgICAgIGNhc2UgJ1onIDogLy8gZmFsbCB0aHJvdWdoIHRvIFpaCiAgICAgICAgY2FzZSAnWlonIDoKICAgICAgICAgICAgY29uZmlnLl91c2VVVEMgPSB0cnVlOwogICAgICAgICAgICBjb25maWcuX3R6bSA9IHRpbWV6b25lTWludXRlc0Zyb21TdHJpbmcoaW5wdXQpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICd3JzoKICAgICAgICBjYXNlICd3dyc6CiAgICAgICAgY2FzZSAnVyc6CiAgICAgICAgY2FzZSAnV1cnOgogICAgICAgIGNhc2UgJ2QnOgogICAgICAgIGNhc2UgJ2RkJzoKICAgICAgICBjYXNlICdkZGQnOgogICAgICAgIGNhc2UgJ2RkZGQnOgogICAgICAgIGNhc2UgJ2UnOgogICAgICAgIGNhc2UgJ0UnOgogICAgICAgICAgICB0b2tlbiA9IHRva2VuLnN1YnN0cigwLCAxKTsKICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgIGNhc2UgJ2dnJzoKICAgICAgICBjYXNlICdnZ2dnJzoKICAgICAgICBjYXNlICdHRyc6CiAgICAgICAgY2FzZSAnR0dHRyc6CiAgICAgICAgY2FzZSAnR0dHR0cnOgogICAgICAgICAgICB0b2tlbiA9IHRva2VuLnN1YnN0cigwLCAyKTsKICAgICAgICAgICAgaWYgKGlucHV0KSB7CiAgICAgICAgICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307CiAgICAgICAgICAgICAgICBjb25maWcuX3dbdG9rZW5dID0gaW5wdXQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfQoKICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLgogICAgLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3cKICAgIC8vIG5vdGU6IGFsbCB2YWx1ZXMgcGFzdCB0aGUgeWVhciBhcmUgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbG93ZXN0IHBvc3NpYmxlIHZhbHVlLgogICAgLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdCiAgICBmdW5jdGlvbiBkYXRlRnJvbUNvbmZpZyhjb25maWcpIHsKICAgICAgICB2YXIgaSwgZGF0ZSwgaW5wdXQgPSBbXSwgY3VycmVudERhdGUsCiAgICAgICAgICAgIHllYXJUb1VzZSwgZml4WWVhciwgdywgdGVtcCwgbGFuZywgd2Vla2RheSwgd2VlazsKCiAgICAgICAgaWYgKGNvbmZpZy5fZCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTsKCiAgICAgICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5cwogICAgICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7CiAgICAgICAgICAgIGZpeFllYXIgPSBmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgICAgICAgICB2YXIgaW50VmFsID0gcGFyc2VJbnQodmFsLCAxMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsID8KICAgICAgICAgICAgICAgICAgKHZhbC5sZW5ndGggPCAzID8gKGludFZhbCA+IDY4ID8gMTkwMCArIGludFZhbCA6IDIwMDAgKyBpbnRWYWwpIDogaW50VmFsKSA6CiAgICAgICAgICAgICAgICAgIChjb25maWcuX2FbWUVBUl0gPT0gbnVsbCA/IG1vbWVudCgpLndlZWtZZWFyKCkgOiBjb25maWcuX2FbWUVBUl0pOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdyA9IGNvbmZpZy5fdzsKICAgICAgICAgICAgaWYgKHcuR0cgIT0gbnVsbCB8fCB3LlcgIT0gbnVsbCB8fCB3LkUgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyhmaXhZZWFyKHcuR0cpLCB3LlcgfHwgMSwgdy5FLCA0LCAxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGxhbmcgPSBnZXRMYW5nRGVmaW5pdGlvbihjb25maWcuX2wpOwogICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZCAhPSBudWxsID8gIHBhcnNlV2Vla2RheSh3LmQsIGxhbmcpIDoKICAgICAgICAgICAgICAgICAgKHcuZSAhPSBudWxsID8gIHBhcnNlSW50KHcuZSwgMTApICsgbGFuZy5fd2Vlay5kb3cgOiAwKTsKCiAgICAgICAgICAgICAgICB3ZWVrID0gcGFyc2VJbnQody53LCAxMCkgfHwgMTsKCiAgICAgICAgICAgICAgICAvL2lmIHdlJ3JlIHBhcnNpbmcgJ2QnLCB0aGVuIHRoZSBsb3cgZGF5IG51bWJlcnMgbWF5IGJlIG5leHQgd2VlawogICAgICAgICAgICAgICAgaWYgKHcuZCAhPSBudWxsICYmIHdlZWtkYXkgPCBsYW5nLl93ZWVrLmRvdykgewogICAgICAgICAgICAgICAgICAgIHdlZWsrKzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKGZpeFllYXIody5nZyksIHdlZWssIHdlZWtkYXksIGxhbmcuX3dlZWsuZG95LCBsYW5nLl93ZWVrLmRvdyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjsKICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjsKICAgICAgICB9CgogICAgICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpcwogICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhcikgewogICAgICAgICAgICB5ZWFyVG9Vc2UgPSBjb25maWcuX2FbWUVBUl0gPT0gbnVsbCA/IGN1cnJlbnREYXRlW1lFQVJdIDogY29uZmlnLl9hW1lFQVJdOwoKICAgICAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpKSB7CiAgICAgICAgICAgICAgICBjb25maWcuX3BmLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGRhdGUgPSBtYWtlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTsKICAgICAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTsKICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7CiAgICAgICAgfQoKICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS4KICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5CiAgICAgICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXIKICAgICAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhcgogICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZwogICAgICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHsKICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTsKICAgICAgICB9CgogICAgICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZQogICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7CiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gKGNvbmZpZy5fYVtpXSA9PSBudWxsKSA/IChpID09PSAyID8gMSA6IDApIDogY29uZmlnLl9hW2ldOwogICAgICAgIH0KCiAgICAgICAgLy8gYWRkIHRoZSBvZmZzZXRzIHRvIHRoZSB0aW1lIHRvIGJlIHBhcnNlZCBzbyB0aGF0IHdlIGNhbiBoYXZlIGEgY2xlYW4gYXJyYXkgZm9yIGNoZWNraW5nIGlzVmFsaWQKICAgICAgICBpbnB1dFtIT1VSXSArPSB0b0ludCgoY29uZmlnLl90em0gfHwgMCkgLyA2MCk7CiAgICAgICAgaW5wdXRbTUlOVVRFXSArPSB0b0ludCgoY29uZmlnLl90em0gfHwgMCkgJSA2MCk7CgogICAgICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IG1ha2VVVENEYXRlIDogbWFrZURhdGUpLmFwcGx5KG51bGwsIGlucHV0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBkYXRlRnJvbU9iamVjdChjb25maWcpIHsKICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0OwoKICAgICAgICBpZiAoY29uZmlnLl9kKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7CiAgICAgICAgY29uZmlnLl9hID0gWwogICAgICAgICAgICBub3JtYWxpemVkSW5wdXQueWVhciwKICAgICAgICAgICAgbm9ybWFsaXplZElucHV0Lm1vbnRoLAogICAgICAgICAgICBub3JtYWxpemVkSW5wdXQuZGF5LAogICAgICAgICAgICBub3JtYWxpemVkSW5wdXQuaG91ciwKICAgICAgICAgICAgbm9ybWFsaXplZElucHV0Lm1pbnV0ZSwKICAgICAgICAgICAgbm9ybWFsaXplZElucHV0LnNlY29uZCwKICAgICAgICAgICAgbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kCiAgICAgICAgXTsKCiAgICAgICAgZGF0ZUZyb21Db25maWcoY29uZmlnKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykgewogICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpOwogICAgICAgIGlmIChjb25maWcuX3VzZVVUQykgewogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgbm93LmdldFVUQ0Z1bGxZZWFyKCksCiAgICAgICAgICAgICAgICBub3cuZ2V0VVRDTW9udGgoKSwKICAgICAgICAgICAgICAgIG5vdy5nZXRVVENEYXRlKCkKICAgICAgICAgICAgXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gW25vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgbm93LmdldERhdGUoKV07CiAgICAgICAgfQogICAgfQoKICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmcKICAgIGZ1bmN0aW9uIG1ha2VEYXRlRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHsKCiAgICAgICAgY29uZmlnLl9hID0gW107CiAgICAgICAgY29uZmlnLl9wZi5lbXB0eSA9IHRydWU7CgogICAgICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgCiAgICAgICAgdmFyIGxhbmcgPSBnZXRMYW5nRGVmaW5pdGlvbihjb25maWcuX2wpLAogICAgICAgICAgICBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSwKICAgICAgICAgICAgaSwgcGFyc2VkSW5wdXQsIHRva2VucywgdG9rZW4sIHNraXBwZWQsCiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsCiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwOwoKICAgICAgICB0b2tlbnMgPSBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBsYW5nKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTsKCiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTsKICAgICAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdOwogICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHsKICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7CiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9wZi51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aCk7CiAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuCiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHsKICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkgewogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fcGYuZW1wdHkgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fcGYudW51c2VkVG9rZW5zLnB1c2godG9rZW4pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkgewogICAgICAgICAgICAgICAgY29uZmlnLl9wZi51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmcKICAgICAgICBjb25maWcuX3BmLmNoYXJzTGVmdE92ZXIgPSBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoOwogICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkgewogICAgICAgICAgICBjb25maWcuX3BmLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTsKICAgICAgICB9CgogICAgICAgIC8vIGhhbmRsZSBhbSBwbQogICAgICAgIGlmIChjb25maWcuX2lzUG0gJiYgY29uZmlnLl9hW0hPVVJdIDwgMTIpIHsKICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdICs9IDEyOwogICAgICAgIH0KICAgICAgICAvLyBpZiBpcyAxMiBhbSwgY2hhbmdlIGhvdXJzIHRvIDAKICAgICAgICBpZiAoY29uZmlnLl9pc1BtID09PSBmYWxzZSAmJiBjb25maWcuX2FbSE9VUl0gPT09IDEyKSB7CiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7CiAgICAgICAgfQoKICAgICAgICBkYXRlRnJvbUNvbmZpZyhjb25maWcpOwogICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTsKICAgIH0KCiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7CiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvXFwoXFspfFxcKFxdKXxcWyhbXlxdXFtdKilcXXxcXCguKS9nLCBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHsKICAgICAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0OwogICAgICAgIH0pOwogICAgfQoKICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHQKICAgIGZ1bmN0aW9uIHJlZ2V4cEVzY2FwZShzKSB7CiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cL1xcXiQqKz8uKCl8W1xde31dL2csICdcXCQmJyk7CiAgICB9CgogICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgYXJyYXkgb2YgZm9ybWF0IHN0cmluZ3MKICAgIGZ1bmN0aW9uIG1ha2VEYXRlRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykgewogICAgICAgIHZhciB0ZW1wQ29uZmlnLAogICAgICAgICAgICBiZXN0TW9tZW50LAoKICAgICAgICAgICAgc2NvcmVUb0JlYXQsCiAgICAgICAgICAgIGksCiAgICAgICAgICAgIGN1cnJlbnRTY29yZTsKCiAgICAgICAgaWYgKGNvbmZpZy5fZi5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgY29uZmlnLl9wZi5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTsKICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZy5fZi5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBjdXJyZW50U2NvcmUgPSAwOwogICAgICAgICAgICB0ZW1wQ29uZmlnID0gZXh0ZW5kKHt9LCBjb25maWcpOwogICAgICAgICAgICB0ZW1wQ29uZmlnLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTsKICAgICAgICAgICAgdGVtcENvbmZpZy5fZiA9IGNvbmZpZy5fZltpXTsKICAgICAgICAgICAgbWFrZURhdGVGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpOwoKICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKHRlbXBDb25maWcpKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW55IGlucHV0IHRoYXQgd2FzIG5vdCBwYXJzZWQgYWRkIGEgcGVuYWx0eSBmb3IgdGhhdCBmb3JtYXQKICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IHRlbXBDb25maWcuX3BmLmNoYXJzTGVmdE92ZXI7CgogICAgICAgICAgICAvL29yIHRva2VucwogICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gdGVtcENvbmZpZy5fcGYudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwOwoKICAgICAgICAgICAgdGVtcENvbmZpZy5fcGYuc2NvcmUgPSBjdXJyZW50U2NvcmU7CgogICAgICAgICAgICBpZiAoc2NvcmVUb0JlYXQgPT0gbnVsbCB8fCBjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkgewogICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7CiAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZzsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTsKICAgIH0KCiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdAogICAgZnVuY3Rpb24gbWFrZURhdGVGcm9tU3RyaW5nKGNvbmZpZykgewogICAgICAgIHZhciBpLCBsLAogICAgICAgICAgICBzdHJpbmcgPSBjb25maWcuX2ksCiAgICAgICAgICAgIG1hdGNoID0gaXNvUmVnZXguZXhlYyhzdHJpbmcpOwoKICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgY29uZmlnLl9wZi5pc28gPSB0cnVlOwogICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhzdHJpbmcpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbNV0gc2hvdWxkIGJlICJUIiBvciB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgICBjb25maWcuX2YgPSBpc29EYXRlc1tpXVswXSArIChtYXRjaFs2XSB8fCAiICIpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKHN0cmluZykpIHsKICAgICAgICAgICAgICAgICAgICBjb25maWcuX2YgKz0gaXNvVGltZXNbaV1bMF07CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHN0cmluZy5tYXRjaChwYXJzZVRva2VuVGltZXpvbmUpKSB7CiAgICAgICAgICAgICAgICBjb25maWcuX2YgKz0gIloiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG1ha2VEYXRlRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgbW9tZW50LmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIG1ha2VEYXRlRnJvbUlucHV0KGNvbmZpZykgewogICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSwKICAgICAgICAgICAgbWF0Y2hlZCA9IGFzcE5ldEpzb25SZWdleC5leGVjKGlucHV0KTsKCiAgICAgICAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoKTsKICAgICAgICB9IGVsc2UgaWYgKG1hdGNoZWQpIHsKICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykgewogICAgICAgICAgICBtYWtlRGF0ZUZyb21TdHJpbmcoY29uZmlnKTsKICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaW5wdXQpKSB7CiAgICAgICAgICAgIGNvbmZpZy5fYSA9IGlucHV0LnNsaWNlKDApOwogICAgICAgICAgICBkYXRlRnJvbUNvbmZpZyhjb25maWcpOwogICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkgewogICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgraW5wdXQpOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mKGlucHV0KSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgZGF0ZUZyb21PYmplY3QoY29uZmlnKTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZihpbnB1dCkgPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgIC8vIGZyb20gbWlsbGlzZWNvbmRzCiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBtb21lbnQuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gbWFrZURhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHsKICAgICAgICAvL2Nhbid0IGp1c3QgYXBwbHkoKSB0byBjcmVhdGUgYSBkYXRlOgogICAgICAgIC8vaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xODEzNDgvaW5zdGFudGlhdGluZy1hLWphdmFzY3JpcHQtb2JqZWN0LWJ5LWNhbGxpbmctcHJvdG90eXBlLWNvbnN0cnVjdG9yLWFwcGx5CiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7CgogICAgICAgIC8vdGhlIGRhdGUgY29uc3RydWN0b3IgZG9lc24ndCBhY2NlcHQgeWVhcnMgPCAxOTcwCiAgICAgICAgaWYgKHkgPCAxOTcwKSB7CiAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBkYXRlOwogICAgfQoKICAgIGZ1bmN0aW9uIG1ha2VVVENEYXRlKHkpIHsKICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpOwogICAgICAgIGlmICh5IDwgMTk3MCkgewogICAgICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZGF0ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxhbmd1YWdlKSB7CiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgaWYgKCFpc05hTihpbnB1dCkpIHsKICAgICAgICAgICAgICAgIGlucHV0ID0gcGFyc2VJbnQoaW5wdXQsIDEwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGlucHV0ID0gbGFuZ3VhZ2Uud2Vla2RheXNQYXJzZShpbnB1dCk7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnbnVtYmVyJykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBpbnB1dDsKICAgIH0KCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgICAgUmVsYXRpdmUgVGltZQogICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1vbWVudC5mbi5mcm9tLCBtb21lbnQuZm4uZnJvbU5vdywgYW5kIG1vbWVudC5kdXJhdGlvbi5mbi5odW1hbml6ZQogICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsYW5nKSB7CiAgICAgICAgcmV0dXJuIGxhbmcucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZShtaWxsaXNlY29uZHMsIHdpdGhvdXRTdWZmaXgsIGxhbmcpIHsKICAgICAgICB2YXIgc2Vjb25kcyA9IHJvdW5kKE1hdGguYWJzKG1pbGxpc2Vjb25kcykgLyAxMDAwKSwKICAgICAgICAgICAgbWludXRlcyA9IHJvdW5kKHNlY29uZHMgLyA2MCksCiAgICAgICAgICAgIGhvdXJzID0gcm91bmQobWludXRlcyAvIDYwKSwKICAgICAgICAgICAgZGF5cyA9IHJvdW5kKGhvdXJzIC8gMjQpLAogICAgICAgICAgICB5ZWFycyA9IHJvdW5kKGRheXMgLyAzNjUpLAogICAgICAgICAgICBhcmdzID0gc2Vjb25kcyA8IDQ1ICYmIFsncycsIHNlY29uZHNdIHx8CiAgICAgICAgICAgICAgICBtaW51dGVzID09PSAxICYmIFsnbSddIHx8CiAgICAgICAgICAgICAgICBtaW51dGVzIDwgNDUgJiYgWydtbScsIG1pbnV0ZXNdIHx8CiAgICAgICAgICAgICAgICBob3VycyA9PT0gMSAmJiBbJ2gnXSB8fAogICAgICAgICAgICAgICAgaG91cnMgPCAyMiAmJiBbJ2hoJywgaG91cnNdIHx8CiAgICAgICAgICAgICAgICBkYXlzID09PSAxICYmIFsnZCddIHx8CiAgICAgICAgICAgICAgICBkYXlzIDw9IDI1ICYmIFsnZGQnLCBkYXlzXSB8fAogICAgICAgICAgICAgICAgZGF5cyA8PSA0NSAmJiBbJ00nXSB8fAogICAgICAgICAgICAgICAgZGF5cyA8IDM0NSAmJiBbJ01NJywgcm91bmQoZGF5cyAvIDMwKV0gfHwKICAgICAgICAgICAgICAgIHllYXJzID09PSAxICYmIFsneSddIHx8IFsneXknLCB5ZWFyc107CiAgICAgICAgYXJnc1syXSA9IHdpdGhvdXRTdWZmaXg7CiAgICAgICAgYXJnc1szXSA9IG1pbGxpc2Vjb25kcyA+IDA7CiAgICAgICAgYXJnc1s0XSA9IGxhbmc7CiAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGVUaW1lQWdvLmFwcGx5KHt9LCBhcmdzKTsKICAgIH0KCgogICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgICAgIFdlZWsgb2YgWWVhcgogICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCiAgICAvLyBmaXJzdERheU9mV2VlayAgICAgICAwID0gc3VuLCA2ID0gc2F0CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICB0aGUgZGF5IG9mIHRoZSB3ZWVrIHRoYXQgc3RhcnRzIHRoZSB3ZWVrCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAodXN1YWxseSBzdW5kYXkgb3IgbW9uZGF5KQogICAgLy8gZmlyc3REYXlPZldlZWtPZlllYXIgMCA9IHN1biwgNiA9IHNhdAogICAgLy8gICAgICAgICAgICAgICAgICAgICAgdGhlIGZpcnN0IHdlZWsgaXMgdGhlIHdlZWsgdGhhdCBjb250YWlucyB0aGUgZmlyc3QKICAgIC8vICAgICAgICAgICAgICAgICAgICAgIG9mIHRoaXMgZGF5IG9mIHRoZSB3ZWVrCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAoZWcuIElTTyB3ZWVrcyB1c2UgdGh1cnNkYXkgKDQpKQogICAgZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGZpcnN0RGF5T2ZXZWVrLCBmaXJzdERheU9mV2Vla09mWWVhcikgewogICAgICAgIHZhciBlbmQgPSBmaXJzdERheU9mV2Vla09mWWVhciAtIGZpcnN0RGF5T2ZXZWVrLAogICAgICAgICAgICBkYXlzVG9EYXlPZldlZWsgPSBmaXJzdERheU9mV2Vla09mWWVhciAtIG1vbS5kYXkoKSwKICAgICAgICAgICAgYWRqdXN0ZWRNb21lbnQ7CgoKICAgICAgICBpZiAoZGF5c1RvRGF5T2ZXZWVrID4gZW5kKSB7CiAgICAgICAgICAgIGRheXNUb0RheU9mV2VlayAtPSA3OwogICAgICAgIH0KCiAgICAgICAgaWYgKGRheXNUb0RheU9mV2VlayA8IGVuZCAtIDcpIHsKICAgICAgICAgICAgZGF5c1RvRGF5T2ZXZWVrICs9IDc7CiAgICAgICAgfQoKICAgICAgICBhZGp1c3RlZE1vbWVudCA9IG1vbWVudChtb20pLmFkZCgnZCcsIGRheXNUb0RheU9mV2Vlayk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgd2VlazogTWF0aC5jZWlsKGFkanVzdGVkTW9tZW50LmRheU9mWWVhcigpIC8gNyksCiAgICAgICAgICAgIHllYXI6IGFkanVzdGVkTW9tZW50LnllYXIoKQogICAgICAgIH07CiAgICB9CgogICAgLy9odHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5CiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZmlyc3REYXlPZldlZWtPZlllYXIsIGZpcnN0RGF5T2ZXZWVrKSB7CiAgICAgICAgdmFyIGQgPSBtYWtlVVRDRGF0ZSh5ZWFyLCAwLCAxKS5nZXRVVENEYXkoKSwgZGF5c1RvQWRkLCBkYXlPZlllYXI7CgogICAgICAgIHdlZWtkYXkgPSB3ZWVrZGF5ICE9IG51bGwgPyB3ZWVrZGF5IDogZmlyc3REYXlPZldlZWs7CiAgICAgICAgZGF5c1RvQWRkID0gZmlyc3REYXlPZldlZWsgLSBkICsgKGQgPiBmaXJzdERheU9mV2Vla09mWWVhciA/IDcgOiAwKSAtIChkIDwgZmlyc3REYXlPZldlZWsgPyA3IDogMCk7CiAgICAgICAgZGF5T2ZZZWFyID0gNyAqICh3ZWVrIC0gMSkgKyAod2Vla2RheSAtIGZpcnN0RGF5T2ZXZWVrKSArIGRheXNUb0FkZCArIDE7CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHllYXI6IGRheU9mWWVhciA+IDAgPyB5ZWFyIDogeWVhciAtIDEsCiAgICAgICAgICAgIGRheU9mWWVhcjogZGF5T2ZZZWFyID4gMCA/ICBkYXlPZlllYXIgOiBkYXlzSW5ZZWFyKHllYXIgLSAxKSArIGRheU9mWWVhcgogICAgICAgIH07CiAgICB9CgogICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgICAgIFRvcCBMZXZlbCBGdW5jdGlvbnMKICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCiAgICBmdW5jdGlvbiBtYWtlTW9tZW50KGNvbmZpZykgewogICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSwKICAgICAgICAgICAgZm9ybWF0ID0gY29uZmlnLl9mOwoKICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHsKICAgICAgICAgICAgcmV0dXJuIG1vbWVudC5pbnZhbGlkKHtudWxsSW5wdXQ6IHRydWV9KTsKICAgICAgICB9CgogICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gZ2V0TGFuZ0RlZmluaXRpb24oKS5wcmVwYXJzZShpbnB1dCk7CiAgICAgICAgfQoKICAgICAgICBpZiAobW9tZW50LmlzTW9tZW50KGlucHV0KSkgewogICAgICAgICAgICBjb25maWcgPSBjbG9uZU1vbWVudChpbnB1dCk7CgogICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgraW5wdXQuX2QpOwogICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7CiAgICAgICAgICAgIGlmIChpc0FycmF5KGZvcm1hdCkpIHsKICAgICAgICAgICAgICAgIG1ha2VEYXRlRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBtYWtlRGF0ZUZyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1ha2VEYXRlRnJvbUlucHV0KGNvbmZpZyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjb25maWcpOwogICAgfQoKICAgIG1vbWVudCA9IGZ1bmN0aW9uIChpbnB1dCwgZm9ybWF0LCBsYW5nLCBzdHJpY3QpIHsKICAgICAgICB2YXIgYzsKCiAgICAgICAgaWYgKHR5cGVvZihsYW5nKSA9PT0gImJvb2xlYW4iKSB7CiAgICAgICAgICAgIHN0cmljdCA9IGxhbmc7CiAgICAgICAgICAgIGxhbmcgPSB1bmRlZmluZWQ7CiAgICAgICAgfQogICAgICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LgogICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzCiAgICAgICAgYyA9IHt9OwogICAgICAgIGMuX2lzQU1vbWVudE9iamVjdCA9IHRydWU7CiAgICAgICAgYy5faSA9IGlucHV0OwogICAgICAgIGMuX2YgPSBmb3JtYXQ7CiAgICAgICAgYy5fbCA9IGxhbmc7CiAgICAgICAgYy5fc3RyaWN0ID0gc3RyaWN0OwogICAgICAgIGMuX2lzVVRDID0gZmFsc2U7CiAgICAgICAgYy5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7CgogICAgICAgIHJldHVybiBtYWtlTW9tZW50KGMpOwogICAgfTsKCiAgICBtb21lbnQuc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7CgogICAgbW9tZW50LmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKAogICAgICAgICAgICAibW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUuIFRoaXMgaXMgIiArCiAgICAgICAgICAgICJkaXNjb3VyYWdlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHVwY29taW5nIG1ham9yICIgKwogICAgICAgICAgICAicmVsZWFzZS4gUGxlYXNlIHJlZmVyIHRvICIgKwogICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MDcgZm9yIG1vcmUgaW5mby4iLAogICAgICAgICAgICBmdW5jdGlvbiAoY29uZmlnKSB7CiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pKTsKICAgIH0pOwoKICAgIC8vIGNyZWF0aW5nIHdpdGggdXRjCiAgICBtb21lbnQudXRjID0gZnVuY3Rpb24gKGlucHV0LCBmb3JtYXQsIGxhbmcsIHN0cmljdCkgewogICAgICAgIHZhciBjOwoKICAgICAgICBpZiAodHlwZW9mKGxhbmcpID09PSAiYm9vbGVhbiIpIHsKICAgICAgICAgICAgc3RyaWN0ID0gbGFuZzsKICAgICAgICAgICAgbGFuZyA9IHVuZGVmaW5lZDsKICAgICAgICB9CiAgICAgICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuCiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjMKICAgICAgICBjID0ge307CiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTsKICAgICAgICBjLl91c2VVVEMgPSB0cnVlOwogICAgICAgIGMuX2lzVVRDID0gdHJ1ZTsKICAgICAgICBjLl9sID0gbGFuZzsKICAgICAgICBjLl9pID0gaW5wdXQ7CiAgICAgICAgYy5fZiA9IGZvcm1hdDsKICAgICAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7CiAgICAgICAgYy5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7CgogICAgICAgIHJldHVybiBtYWtlTW9tZW50KGMpLnV0YygpOwogICAgfTsKCiAgICAvLyBjcmVhdGluZyB3aXRoIHVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKQogICAgbW9tZW50LnVuaXggPSBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICByZXR1cm4gbW9tZW50KGlucHV0ICogMTAwMCk7CiAgICB9OwoKICAgIC8vIGR1cmF0aW9uCiAgICBtb21lbnQuZHVyYXRpb24gPSBmdW5jdGlvbiAoaW5wdXQsIGtleSkgewogICAgICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LAogICAgICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZAogICAgICAgICAgICBtYXRjaCA9IG51bGwsCiAgICAgICAgICAgIHNpZ24sCiAgICAgICAgICAgIHJldCwKICAgICAgICAgICAgcGFyc2VJc287CgogICAgICAgIGlmIChtb21lbnQuaXNEdXJhdGlvbihpbnB1dCkpIHsKICAgICAgICAgICAgZHVyYXRpb24gPSB7CiAgICAgICAgICAgICAgICBtczogaW5wdXQuX21pbGxpc2Vjb25kcywKICAgICAgICAgICAgICAgIGQ6IGlucHV0Ll9kYXlzLAogICAgICAgICAgICAgICAgTTogaW5wdXQuX21vbnRocwogICAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykgewogICAgICAgICAgICBkdXJhdGlvbiA9IHt9OwogICAgICAgICAgICBpZiAoa2V5KSB7CiAgICAgICAgICAgICAgICBkdXJhdGlvbltrZXldID0gaW5wdXQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSBpbnB1dDsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBhc3BOZXRUaW1lU3Bhbkpzb25SZWdleC5leGVjKGlucHV0KSkpIHsKICAgICAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gIi0iKSA/IC0xIDogMTsKICAgICAgICAgICAgZHVyYXRpb24gPSB7CiAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgZDogdG9JbnQobWF0Y2hbREFURV0pICogc2lnbiwKICAgICAgICAgICAgICAgIGg6IHRvSW50KG1hdGNoW0hPVVJdKSAqIHNpZ24sCiAgICAgICAgICAgICAgICBtOiB0b0ludChtYXRjaFtNSU5VVEVdKSAqIHNpZ24sCiAgICAgICAgICAgICAgICBzOiB0b0ludChtYXRjaFtTRUNPTkRdKSAqIHNpZ24sCiAgICAgICAgICAgICAgICBtczogdG9JbnQobWF0Y2hbTUlMTElTRUNPTkRdKSAqIHNpZ24KICAgICAgICAgICAgfTsKICAgICAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gaXNvRHVyYXRpb25SZWdleC5leGVjKGlucHV0KSkpIHsKICAgICAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gIi0iKSA/IC0xIDogMTsKICAgICAgICAgICAgcGFyc2VJc28gPSBmdW5jdGlvbiAoaW5wKSB7CiAgICAgICAgICAgICAgICAvLyBXZSdkIG5vcm1hbGx5IHVzZSB+fmlucCBmb3IgdGhpcywgYnV0IHVuZm9ydHVuYXRlbHkgaXQgYWxzbwogICAgICAgICAgICAgICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuCiAgICAgICAgICAgICAgICAvLyBpbnAgbWF5IGJlIHVuZGVmaW5lZCwgc28gY2FyZWZ1bCBjYWxsaW5nIHJlcGxhY2Ugb24gaXQuCiAgICAgICAgICAgICAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKTsKICAgICAgICAgICAgICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXQKICAgICAgICAgICAgICAgIHJldHVybiAoaXNOYU4ocmVzKSA/IDAgOiByZXMpICogc2lnbjsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgZHVyYXRpb24gPSB7CiAgICAgICAgICAgICAgICB5OiBwYXJzZUlzbyhtYXRjaFsyXSksCiAgICAgICAgICAgICAgICBNOiBwYXJzZUlzbyhtYXRjaFszXSksCiAgICAgICAgICAgICAgICBkOiBwYXJzZUlzbyhtYXRjaFs0XSksCiAgICAgICAgICAgICAgICBoOiBwYXJzZUlzbyhtYXRjaFs1XSksCiAgICAgICAgICAgICAgICBtOiBwYXJzZUlzbyhtYXRjaFs2XSksCiAgICAgICAgICAgICAgICBzOiBwYXJzZUlzbyhtYXRjaFs3XSksCiAgICAgICAgICAgICAgICB3OiBwYXJzZUlzbyhtYXRjaFs4XSkKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7CgogICAgICAgIGlmIChtb21lbnQuaXNEdXJhdGlvbihpbnB1dCkgJiYgaW5wdXQuaGFzT3duUHJvcGVydHkoJ19sYW5nJykpIHsKICAgICAgICAgICAgcmV0Ll9sYW5nID0gaW5wdXQuX2xhbmc7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmV0OwogICAgfTsKCiAgICAvLyB2ZXJzaW9uIG51bWJlcgogICAgbW9tZW50LnZlcnNpb24gPSBWRVJTSU9OOwoKICAgIC8vIGRlZmF1bHQgZm9ybWF0CiAgICBtb21lbnQuZGVmYXVsdEZvcm1hdCA9IGlzb0Zvcm1hdDsKCiAgICAvLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksCiAgICAvLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLgogICAgbW9tZW50Lm1vbWVudFByb3BlcnRpZXMgPSBtb21lbnRQcm9wZXJ0aWVzOwoKICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC4KICAgIC8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLgogICAgbW9tZW50LnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9OwoKICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBsb2FkIGxhbmd1YWdlcyBhbmQgdGhlbiBzZXQgdGhlIGdsb2JhbCBsYW5ndWFnZS4gIElmCiAgICAvLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbAogICAgLy8gbGFuZ3VhZ2Uga2V5LgogICAgbW9tZW50LmxhbmcgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZXMpIHsKICAgICAgICB2YXIgcjsKICAgICAgICBpZiAoIWtleSkgewogICAgICAgICAgICByZXR1cm4gbW9tZW50LmZuLl9sYW5nLl9hYmJyOwogICAgICAgIH0KICAgICAgICBpZiAodmFsdWVzKSB7CiAgICAgICAgICAgIGxvYWRMYW5nKG5vcm1hbGl6ZUxhbmd1YWdlKGtleSksIHZhbHVlcyk7CiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZXMgPT09IG51bGwpIHsKICAgICAgICAgICAgdW5sb2FkTGFuZyhrZXkpOwogICAgICAgICAgICBrZXkgPSAnZW4nOwogICAgICAgIH0gZWxzZSBpZiAoIWxhbmd1YWdlc1trZXldKSB7CiAgICAgICAgICAgIGdldExhbmdEZWZpbml0aW9uKGtleSk7CiAgICAgICAgfQogICAgICAgIHIgPSBtb21lbnQuZHVyYXRpb24uZm4uX2xhbmcgPSBtb21lbnQuZm4uX2xhbmcgPSBnZXRMYW5nRGVmaW5pdGlvbihrZXkpOwogICAgICAgIHJldHVybiByLl9hYmJyOwogICAgfTsKCiAgICAvLyByZXR1cm5zIGxhbmd1YWdlIGRhdGEKICAgIG1vbWVudC5sYW5nRGF0YSA9IGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBpZiAoa2V5ICYmIGtleS5fbGFuZyAmJiBrZXkuX2xhbmcuX2FiYnIpIHsKICAgICAgICAgICAga2V5ID0ga2V5Ll9sYW5nLl9hYmJyOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZ2V0TGFuZ0RlZmluaXRpb24oa2V5KTsKICAgIH07CgogICAgLy8gY29tcGFyZSBtb21lbnQgb2JqZWN0CiAgICBtb21lbnQuaXNNb21lbnQgPSBmdW5jdGlvbiAob2JqKSB7CiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fAogICAgICAgICAgICAob2JqICE9IG51bGwgJiYgIG9iai5oYXNPd25Qcm9wZXJ0eSgnX2lzQU1vbWVudE9iamVjdCcpKTsKICAgIH07CgogICAgLy8gZm9yIHR5cGVjaGVja2luZyBEdXJhdGlvbiBvYmplY3RzCiAgICBtb21lbnQuaXNEdXJhdGlvbiA9IGZ1bmN0aW9uIChvYmopIHsKICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247CiAgICB9OwoKICAgIGZvciAoaSA9IGxpc3RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgICAgbWFrZUxpc3QobGlzdHNbaV0pOwogICAgfQoKICAgIG1vbWVudC5ub3JtYWxpemVVbml0cyA9IGZ1bmN0aW9uICh1bml0cykgewogICAgICAgIHJldHVybiBub3JtYWxpemVVbml0cyh1bml0cyk7CiAgICB9OwoKICAgIG1vbWVudC5pbnZhbGlkID0gZnVuY3Rpb24gKGZsYWdzKSB7CiAgICAgICAgdmFyIG0gPSBtb21lbnQudXRjKE5hTik7CiAgICAgICAgaWYgKGZsYWdzICE9IG51bGwpIHsKICAgICAgICAgICAgZXh0ZW5kKG0uX3BmLCBmbGFncyk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBtLl9wZi51c2VySW52YWxpZGF0ZWQgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG07CiAgICB9OwoKICAgIG1vbWVudC5wYXJzZVpvbmUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIG1vbWVudC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpOwogICAgfTsKCiAgICBtb21lbnQucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApOwogICAgfTsKCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgICAgTW9tZW50IFByb3RvdHlwZQogICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCiAgICBleHRlbmQobW9tZW50LmZuID0gTW9tZW50LnByb3RvdHlwZSwgewoKICAgICAgICBjbG9uZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIG1vbWVudCh0aGlzKTsKICAgICAgICB9LAoKICAgICAgICB2YWx1ZU9mIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gK3RoaXMuX2QgKyAoKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwKTsKICAgICAgICB9LAoKICAgICAgICB1bml4IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigrdGhpcyAvIDEwMDApOwogICAgICAgIH0sCgogICAgICAgIHRvU3RyaW5nIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxhbmcoJ2VuJykuZm9ybWF0KCJkZGQgTU1NIEREIFlZWVkgSEg6bW06c3MgW0dNVF1aWiIpOwogICAgICAgIH0sCgogICAgICAgIHRvRGF0ZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29mZnNldCA/IG5ldyBEYXRlKCt0aGlzKSA6IHRoaXMuX2Q7CiAgICAgICAgfSwKCiAgICAgICAgdG9JU09TdHJpbmcgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBtID0gbW9tZW50KHRoaXMpLnV0YygpOwogICAgICAgICAgICBpZiAoMCA8IG0ueWVhcigpICYmIG0ueWVhcigpIDw9IDk5OTkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgdG9BcnJheSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIG0gPSB0aGlzOwogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgbS55ZWFyKCksCiAgICAgICAgICAgICAgICBtLm1vbnRoKCksCiAgICAgICAgICAgICAgICBtLmRhdGUoKSwKICAgICAgICAgICAgICAgIG0uaG91cnMoKSwKICAgICAgICAgICAgICAgIG0ubWludXRlcygpLAogICAgICAgICAgICAgICAgbS5zZWNvbmRzKCksCiAgICAgICAgICAgICAgICBtLm1pbGxpc2Vjb25kcygpCiAgICAgICAgICAgIF07CiAgICAgICAgfSwKCiAgICAgICAgaXNWYWxpZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7CiAgICAgICAgfSwKCiAgICAgICAgaXNEU1RTaGlmdGVkIDogZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgaWYgKHRoaXMuX2EpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSAmJiBjb21wYXJlQXJyYXlzKHRoaXMuX2EsICh0aGlzLl9pc1VUQyA/IG1vbWVudC51dGModGhpcy5fYSkgOiBtb21lbnQodGhpcy5fYSkpLnRvQXJyYXkoKSkgPiAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSwKCiAgICAgICAgcGFyc2luZ0ZsYWdzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCB0aGlzLl9wZik7CiAgICAgICAgfSwKCiAgICAgICAgaW52YWxpZEF0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wZi5vdmVyZmxvdzsKICAgICAgICB9LAoKICAgICAgICB1dGMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnpvbmUoMCk7CiAgICAgICAgfSwKCiAgICAgICAgbG9jYWwgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRoaXMuem9uZSgwKTsKICAgICAgICAgICAgdGhpcy5faXNVVEMgPSBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZm9ybWF0IDogZnVuY3Rpb24gKGlucHV0U3RyaW5nKSB7CiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcgfHwgbW9tZW50LmRlZmF1bHRGb3JtYXQpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5sYW5nKCkucG9zdGZvcm1hdChvdXRwdXQpOwogICAgICAgIH0sCgogICAgICAgIGFkZCA6IGZ1bmN0aW9uIChpbnB1dCwgdmFsKSB7CiAgICAgICAgICAgIHZhciBkdXI7CiAgICAgICAgICAgIC8vIHN3aXRjaCBhcmdzIHRvIHN1cHBvcnQgYWRkKCdzJywgMSkgYW5kIGFkZCgxLCAncycpCiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICBkdXIgPSBtb21lbnQuZHVyYXRpb24oK3ZhbCwgaW5wdXQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZHVyID0gbW9tZW50LmR1cmF0aW9uKGlucHV0LCB2YWwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGFkZE9yU3VidHJhY3REdXJhdGlvbkZyb21Nb21lbnQodGhpcywgZHVyLCAxKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgc3VidHJhY3QgOiBmdW5jdGlvbiAoaW5wdXQsIHZhbCkgewogICAgICAgICAgICB2YXIgZHVyOwogICAgICAgICAgICAvLyBzd2l0Y2ggYXJncyB0byBzdXBwb3J0IHN1YnRyYWN0KCdzJywgMSkgYW5kIHN1YnRyYWN0KDEsICdzJykKICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIGR1ciA9IG1vbWVudC5kdXJhdGlvbigrdmFsLCBpbnB1dCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkdXIgPSBtb21lbnQuZHVyYXRpb24oaW5wdXQsIHZhbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYWRkT3JTdWJ0cmFjdER1cmF0aW9uRnJvbU1vbWVudCh0aGlzLCBkdXIsIC0xKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZGlmZiA6IGZ1bmN0aW9uIChpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHsKICAgICAgICAgICAgdmFyIHRoYXQgPSBtYWtlQXMoaW5wdXQsIHRoaXMpLAogICAgICAgICAgICAgICAgem9uZURpZmYgPSAodGhpcy56b25lKCkgLSB0aGF0LnpvbmUoKSkgKiA2ZTQsCiAgICAgICAgICAgICAgICBkaWZmLCBvdXRwdXQ7CgogICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTsKCiAgICAgICAgICAgIGlmICh1bml0cyA9PT0gJ3llYXInIHx8IHVuaXRzID09PSAnbW9udGgnKSB7CiAgICAgICAgICAgICAgICAvLyBhdmVyYWdlIG51bWJlciBvZiBkYXlzIGluIHRoZSBtb250aHMgaW4gdGhlIGdpdmVuIGRhdGVzCiAgICAgICAgICAgICAgICBkaWZmID0gKHRoaXMuZGF5c0luTW9udGgoKSArIHRoYXQuZGF5c0luTW9udGgoKSkgKiA0MzJlNTsgLy8gMjQgKiA2MCAqIDYwICogMTAwMCAvIDIKICAgICAgICAgICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzCiAgICAgICAgICAgICAgICBvdXRwdXQgPSAoKHRoaXMueWVhcigpIC0gdGhhdC55ZWFyKCkpICogMTIpICsgKHRoaXMubW9udGgoKSAtIHRoYXQubW9udGgoKSk7CiAgICAgICAgICAgICAgICAvLyBhZGp1c3QgYnkgdGFraW5nIGRpZmZlcmVuY2UgaW4gZGF5cywgYXZlcmFnZSBudW1iZXIgb2YgZGF5cwogICAgICAgICAgICAgICAgLy8gYW5kIGRzdCBpbiB0aGUgZ2l2ZW4gbW9udGhzLgogICAgICAgICAgICAgICAgb3V0cHV0ICs9ICgodGhpcyAtIG1vbWVudCh0aGlzKS5zdGFydE9mKCdtb250aCcpKSAtCiAgICAgICAgICAgICAgICAgICAgICAgICh0aGF0IC0gbW9tZW50KHRoYXQpLnN0YXJ0T2YoJ21vbnRoJykpKSAvIGRpZmY7CiAgICAgICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aXRoIHpvbmVzLCB0byBuZWdhdGUgYWxsIGRzdAogICAgICAgICAgICAgICAgb3V0cHV0IC09ICgodGhpcy56b25lKCkgLSBtb21lbnQodGhpcykuc3RhcnRPZignbW9udGgnKS56b25lKCkpIC0KICAgICAgICAgICAgICAgICAgICAgICAgKHRoYXQuem9uZSgpIC0gbW9tZW50KHRoYXQpLnN0YXJ0T2YoJ21vbnRoJykuem9uZSgpKSkgKiA2ZTQgLyBkaWZmOwogICAgICAgICAgICAgICAgaWYgKHVuaXRzID09PSAneWVhcicpIHsKICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgLyAxMjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRpZmYgPSAodGhpcyAtIHRoYXQpOwogICAgICAgICAgICAgICAgb3V0cHV0ID0gdW5pdHMgPT09ICdzZWNvbmQnID8gZGlmZiAvIDFlMyA6IC8vIDEwMDAKICAgICAgICAgICAgICAgICAgICB1bml0cyA9PT0gJ21pbnV0ZScgPyBkaWZmIC8gNmU0IDogLy8gMTAwMCAqIDYwCiAgICAgICAgICAgICAgICAgICAgdW5pdHMgPT09ICdob3VyJyA/IGRpZmYgLyAzNmU1IDogLy8gMTAwMCAqIDYwICogNjAKICAgICAgICAgICAgICAgICAgICB1bml0cyA9PT0gJ2RheScgPyAoZGlmZiAtIHpvbmVEaWZmKSAvIDg2NGU1IDogLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdAogICAgICAgICAgICAgICAgICAgIHVuaXRzID09PSAnd2VlaycgPyAoZGlmZiAtIHpvbmVEaWZmKSAvIDYwNDhlNSA6IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0CiAgICAgICAgICAgICAgICAgICAgZGlmZjsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic1JvdW5kKG91dHB1dCk7CiAgICAgICAgfSwKCiAgICAgICAgZnJvbSA6IGZ1bmN0aW9uICh0aW1lLCB3aXRob3V0U3VmZml4KSB7CiAgICAgICAgICAgIHJldHVybiBtb21lbnQuZHVyYXRpb24odGhpcy5kaWZmKHRpbWUpKS5sYW5nKHRoaXMubGFuZygpLl9hYmJyKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7CiAgICAgICAgfSwKCiAgICAgICAgZnJvbU5vdyA6IGZ1bmN0aW9uICh3aXRob3V0U3VmZml4KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb20obW9tZW50KCksIHdpdGhvdXRTdWZmaXgpOwogICAgICAgIH0sCgogICAgICAgIGNhbGVuZGFyIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLgogICAgICAgICAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSB6b25lJ2Qgb3Igbm90LgogICAgICAgICAgICB2YXIgc29kID0gbWFrZUFzKG1vbWVudCgpLCB0aGlzKS5zdGFydE9mKCdkYXknKSwKICAgICAgICAgICAgICAgIGRpZmYgPSB0aGlzLmRpZmYoc29kLCAnZGF5cycsIHRydWUpLAogICAgICAgICAgICAgICAgZm9ybWF0ID0gZGlmZiA8IC02ID8gJ3NhbWVFbHNlJyA6CiAgICAgICAgICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6CiAgICAgICAgICAgICAgICAgICAgZGlmZiA8IDAgPyAnbGFzdERheScgOgogICAgICAgICAgICAgICAgICAgIGRpZmYgPCAxID8gJ3NhbWVEYXknIDoKICAgICAgICAgICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6CiAgICAgICAgICAgICAgICAgICAgZGlmZiA8IDcgPyAnbmV4dFdlZWsnIDogJ3NhbWVFbHNlJzsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHRoaXMubGFuZygpLmNhbGVuZGFyKGZvcm1hdCwgdGhpcykpOwogICAgICAgIH0sCgogICAgICAgIGlzTGVhcFllYXIgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTsKICAgICAgICB9LAoKICAgICAgICBpc0RTVCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuICh0aGlzLnpvbmUoKSA8IHRoaXMuY2xvbmUoKS5tb250aCgwKS56b25lKCkgfHwKICAgICAgICAgICAgICAgIHRoaXMuem9uZSgpIDwgdGhpcy5jbG9uZSgpLm1vbnRoKDUpLnpvbmUoKSk7CiAgICAgICAgfSwKCiAgICAgICAgZGF5IDogZnVuY3Rpb24gKGlucHV0KSB7CiAgICAgICAgICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpOwogICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubGFuZygpKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZCh7IGQgOiBpbnB1dCAtIGRheSB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBkYXk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBtb250aCA6IG1ha2VBY2Nlc3NvcignTW9udGgnLCB0cnVlKSwKCiAgICAgICAgc3RhcnRPZjogZnVuY3Rpb24gKHVuaXRzKSB7CiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpOwogICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIHN3aXRjaCBpbnRlbnRpb25hbGx5IG9taXRzIGJyZWFrIGtleXdvcmRzCiAgICAgICAgICAgIC8vIHRvIHV0aWxpemUgZmFsbGluZyB0aHJvdWdoIHRoZSBjYXNlcy4KICAgICAgICAgICAgc3dpdGNoICh1bml0cykgewogICAgICAgICAgICBjYXNlICd5ZWFyJzoKICAgICAgICAgICAgICAgIHRoaXMubW9udGgoMCk7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOgogICAgICAgICAgICBjYXNlICdtb250aCc6CiAgICAgICAgICAgICAgICB0aGlzLmRhdGUoMSk7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOgogICAgICAgICAgICBjYXNlICdpc29XZWVrJzoKICAgICAgICAgICAgY2FzZSAnZGF5JzoKICAgICAgICAgICAgICAgIHRoaXMuaG91cnMoMCk7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgIGNhc2UgJ2hvdXInOgogICAgICAgICAgICAgICAgdGhpcy5taW51dGVzKDApOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICBjYXNlICdtaW51dGUnOgogICAgICAgICAgICAgICAgdGhpcy5zZWNvbmRzKDApOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICBjYXNlICdzZWNvbmQnOgogICAgICAgICAgICAgICAgdGhpcy5taWxsaXNlY29uZHMoMCk7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHdlZWtzIGFyZSBhIHNwZWNpYWwgY2FzZQogICAgICAgICAgICBpZiAodW5pdHMgPT09ICd3ZWVrJykgewogICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5KDApOwogICAgICAgICAgICB9IGVsc2UgaWYgKHVuaXRzID09PSAnaXNvV2VlaycpIHsKICAgICAgICAgICAgICAgIHRoaXMuaXNvV2Vla2RheSgxKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gcXVhcnRlcnMgYXJlIGFsc28gc3BlY2lhbAogICAgICAgICAgICBpZiAodW5pdHMgPT09ICdxdWFydGVyJykgewogICAgICAgICAgICAgICAgdGhpcy5tb250aChNYXRoLmZsb29yKHRoaXMubW9udGgoKSAvIDMpICogMyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGVuZE9mOiBmdW5jdGlvbiAodW5pdHMpIHsKICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0T2YodW5pdHMpLmFkZCgodW5pdHMgPT09ICdpc29XZWVrJyA/ICd3ZWVrJyA6IHVuaXRzKSwgMSkuc3VidHJhY3QoJ21zJywgMSk7CiAgICAgICAgfSwKCiAgICAgICAgaXNBZnRlcjogZnVuY3Rpb24gKGlucHV0LCB1bml0cykgewogICAgICAgICAgICB1bml0cyA9IHR5cGVvZiB1bml0cyAhPT0gJ3VuZGVmaW5lZCcgPyB1bml0cyA6ICdtaWxsaXNlY29uZCc7CiAgICAgICAgICAgIHJldHVybiArdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpID4gK21vbWVudChpbnB1dCkuc3RhcnRPZih1bml0cyk7CiAgICAgICAgfSwKCiAgICAgICAgaXNCZWZvcmU6IGZ1bmN0aW9uIChpbnB1dCwgdW5pdHMpIHsKICAgICAgICAgICAgdW5pdHMgPSB0eXBlb2YgdW5pdHMgIT09ICd1bmRlZmluZWQnID8gdW5pdHMgOiAnbWlsbGlzZWNvbmQnOwogICAgICAgICAgICByZXR1cm4gK3RoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKSA8ICttb21lbnQoaW5wdXQpLnN0YXJ0T2YodW5pdHMpOwogICAgICAgIH0sCgogICAgICAgIGlzU2FtZTogZnVuY3Rpb24gKGlucHV0LCB1bml0cykgewogICAgICAgICAgICB1bml0cyA9IHVuaXRzIHx8ICdtcyc7CiAgICAgICAgICAgIHJldHVybiArdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpID09PSArbWFrZUFzKGlucHV0LCB0aGlzKS5zdGFydE9mKHVuaXRzKTsKICAgICAgICB9LAoKICAgICAgICBtaW46IGZ1bmN0aW9uIChvdGhlcikgewogICAgICAgICAgICBvdGhlciA9IG1vbWVudC5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyOwogICAgICAgIH0sCgogICAgICAgIG1heDogZnVuY3Rpb24gKG90aGVyKSB7CiAgICAgICAgICAgIG90aGVyID0gbW9tZW50LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIHJldHVybiBvdGhlciA+IHRoaXMgPyB0aGlzIDogb3RoZXI7CiAgICAgICAgfSwKCiAgICAgICAgLy8ga2VlcFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dCBhZmZlY3RpbmcKICAgICAgICAvLyB0aGUgbG9jYWwgaG91ci4gU28gNTozMToyNiArMDMwMCAtLVt6b25lKDIsIHRydWUpXS0tPiA1OjMxOjI2ICswMjAwCiAgICAgICAgLy8gSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3QgaW50IHpvbmUgKzAyMDAsIHNvIHdlCiAgICAgICAgLy8gYWRqdXN0IHRoZSB0aW1lIGFzIG5lZWRlZCwgdG8gYmUgdmFsaWQuCiAgICAgICAgLy8KICAgICAgICAvLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cikKICAgICAgICAvLyBmcm9tIHRoZSBhY3R1YWwgcmVwcmVzZW50ZWQgdGltZS4gVGhhdCBpcyB3aHkgd2UgY2FsbCB1cGRhdGVPZmZzZXQKICAgICAgICAvLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluCiAgICAgICAgLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlCiAgICAgICAgLy8gdGhlcmUgaXMgbm8gc3VjaCB0aW1lIGluIHRoZSBnaXZlbiB0aW1lem9uZS4KICAgICAgICB6b25lIDogZnVuY3Rpb24gKGlucHV0LCBrZWVwVGltZSkgewogICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDA7CiAgICAgICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgICAgIGlucHV0ID0gdGltZXpvbmVNaW51dGVzRnJvbVN0cmluZyhpbnB1dCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYpIHsKICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dDsKICAgICAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZWVwVGltZSB8fCB0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZE9yU3VidHJhY3REdXJhdGlvbkZyb21Nb21lbnQodGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb21lbnQuZHVyYXRpb24ob2Zmc2V0IC0gaW5wdXQsICdtJyksIDEsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBtb21lbnQudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiB0aGlzLl9kLmdldFRpbWV6b25lT2Zmc2V0KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgem9uZUFiYnIgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICJVVEMiIDogIiI7CiAgICAgICAgfSwKCiAgICAgICAgem9uZU5hbWUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICJDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSIgOiAiIjsKICAgICAgICB9LAoKICAgICAgICBwYXJzZVpvbmUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICh0aGlzLl90em0pIHsKICAgICAgICAgICAgICAgIHRoaXMuem9uZSh0aGlzLl90em0pOwogICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgdGhpcy56b25lKHRoaXMuX2kpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGhhc0FsaWduZWRIb3VyT2Zmc2V0IDogZnVuY3Rpb24gKGlucHV0KSB7CiAgICAgICAgICAgIGlmICghaW5wdXQpIHsKICAgICAgICAgICAgICAgIGlucHV0ID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGlucHV0ID0gbW9tZW50KGlucHV0KS56b25lKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiAodGhpcy56b25lKCkgLSBpbnB1dCkgJSA2MCA9PT0gMDsKICAgICAgICB9LAoKICAgICAgICBkYXlzSW5Nb250aCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpOwogICAgICAgIH0sCgogICAgICAgIGRheU9mWWVhciA6IGZ1bmN0aW9uIChpbnB1dCkgewogICAgICAgICAgICB2YXIgZGF5T2ZZZWFyID0gcm91bmQoKG1vbWVudCh0aGlzKS5zdGFydE9mKCdkYXknKSAtIG1vbWVudCh0aGlzKS5zdGFydE9mKCd5ZWFyJykpIC8gODY0ZTUpICsgMTsKICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZCgiZCIsIChpbnB1dCAtIGRheU9mWWVhcikpOwogICAgICAgIH0sCgogICAgICAgIHF1YXJ0ZXIgOiBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBNYXRoLmNlaWwoKHRoaXMubW9udGgoKSArIDEpIC8gMykgOiB0aGlzLm1vbnRoKChpbnB1dCAtIDEpICogMyArIHRoaXMubW9udGgoKSAlIDMpOwogICAgICAgIH0sCgogICAgICAgIHdlZWtZZWFyIDogZnVuY3Rpb24gKGlucHV0KSB7CiAgICAgICAgICAgIHZhciB5ZWFyID0gd2Vla09mWWVhcih0aGlzLCB0aGlzLmxhbmcoKS5fd2Vlay5kb3csIHRoaXMubGFuZygpLl93ZWVrLmRveSkueWVhcjsKICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB5ZWFyIDogdGhpcy5hZGQoInkiLCAoaW5wdXQgLSB5ZWFyKSk7CiAgICAgICAgfSwKCiAgICAgICAgaXNvV2Vla1llYXIgOiBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICAgICAgdmFyIHllYXIgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLnllYXI7CiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8geWVhciA6IHRoaXMuYWRkKCJ5IiwgKGlucHV0IC0geWVhcikpOwogICAgICAgIH0sCgogICAgICAgIHdlZWsgOiBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICAgICAgdmFyIHdlZWsgPSB0aGlzLmxhbmcoKS53ZWVrKHRoaXMpOwogICAgICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgiZCIsIChpbnB1dCAtIHdlZWspICogNyk7CiAgICAgICAgfSwKCiAgICAgICAgaXNvV2VlayA6IGZ1bmN0aW9uIChpbnB1dCkgewogICAgICAgICAgICB2YXIgd2VlayA9IHdlZWtPZlllYXIodGhpcywgMSwgNCkud2VlazsKICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoImQiLCAoaW5wdXQgLSB3ZWVrKSAqIDcpOwogICAgICAgIH0sCgogICAgICAgIHdlZWtkYXkgOiBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICAgICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxhbmcoKS5fd2Vlay5kb3cpICUgNzsKICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoImQiLCBpbnB1dCAtIHdlZWtkYXkpOwogICAgICAgIH0sCgogICAgICAgIGlzb1dlZWtkYXkgOiBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICAgICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdAogICAgICAgICAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KQogICAgICAgICAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuCiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gdGhpcy5kYXkoKSB8fCA3IDogdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyBpbnB1dCA6IGlucHV0IC0gNyk7CiAgICAgICAgfSwKCiAgICAgICAgaXNvV2Vla3NJblllYXIgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7CiAgICAgICAgfSwKCiAgICAgICAgd2Vla3NJblllYXIgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMuX2xhbmcuX3dlZWs7CiAgICAgICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpOwogICAgICAgIH0sCgogICAgICAgIGdldCA6IGZ1bmN0aW9uICh1bml0cykgewogICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKCk7CiAgICAgICAgfSwKCiAgICAgICAgc2V0IDogZnVuY3Rpb24gKHVuaXRzLCB2YWx1ZSkgewogICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTsKICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzW3VuaXRzXSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgdGhpc1t1bml0c10odmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIC8vIElmIHBhc3NlZCBhIGxhbmd1YWdlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxhbmd1YWdlIGZvciB0aGlzCiAgICAgICAgLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uCiAgICAgICAgLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLgogICAgICAgIGxhbmcgOiBmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xhbmc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLl9sYW5nID0gZ2V0TGFuZ0RlZmluaXRpb24oa2V5KTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7CgogICAgZnVuY3Rpb24gcmF3TW9udGhTZXR0ZXIobW9tLCB2YWx1ZSkgewogICAgICAgIHZhciBkYXlPZk1vbnRoOwoKICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgb3V0IG9mIGhlcmUhCiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgdmFsdWUgPSBtb20ubGFuZygpLm1vbnRoc1BhcnNlKHZhbHVlKTsKICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT8KICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHsKICAgICAgICAgICAgICAgIHJldHVybiBtb207CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGRheU9mTW9udGggPSBNYXRoLm1pbihtb20uZGF0ZSgpLAogICAgICAgICAgICAgICAgZGF5c0luTW9udGgobW9tLnllYXIoKSwgdmFsdWUpKTsKICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpOwogICAgICAgIHJldHVybiBtb207CiAgICB9CgogICAgZnVuY3Rpb24gcmF3R2V0dGVyKG1vbSwgdW5pdCkgewogICAgICAgIHJldHVybiBtb20uX2RbJ2dldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0oKTsKICAgIH0KCiAgICBmdW5jdGlvbiByYXdTZXR0ZXIobW9tLCB1bml0LCB2YWx1ZSkgewogICAgICAgIGlmICh1bml0ID09PSAnTW9udGgnKSB7CiAgICAgICAgICAgIHJldHVybiByYXdNb250aFNldHRlcihtb20sIHZhbHVlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gbWFrZUFjY2Vzc29yKHVuaXQsIGtlZXBUaW1lKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmF3U2V0dGVyKHRoaXMsIHVuaXQsIHZhbHVlKTsKICAgICAgICAgICAgICAgIG1vbWVudC51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmF3R2V0dGVyKHRoaXMsIHVuaXQpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH0KCiAgICBtb21lbnQuZm4ubWlsbGlzZWNvbmQgPSBtb21lbnQuZm4ubWlsbGlzZWNvbmRzID0gbWFrZUFjY2Vzc29yKCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7CiAgICBtb21lbnQuZm4uc2Vjb25kID0gbW9tZW50LmZuLnNlY29uZHMgPSBtYWtlQWNjZXNzb3IoJ1NlY29uZHMnLCBmYWxzZSk7CiAgICBtb21lbnQuZm4ubWludXRlID0gbW9tZW50LmZuLm1pbnV0ZXMgPSBtYWtlQWNjZXNzb3IoJ01pbnV0ZXMnLCBmYWxzZSk7CiAgICAvLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHkKICAgIC8vIHNwZWNpZmllZCB3aGljaCBob3VyIGhlIHdhbnRzLiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW4KICAgIC8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvdwogICAgLy8gdGhpcyBydWxlLgogICAgbW9tZW50LmZuLmhvdXIgPSBtb21lbnQuZm4uaG91cnMgPSBtYWtlQWNjZXNzb3IoJ0hvdXJzJywgdHJ1ZSk7CiAgICAvLyBtb21lbnQuZm4ubW9udGggaXMgZGVmaW5lZCBzZXBhcmF0ZWx5CiAgICBtb21lbnQuZm4uZGF0ZSA9IG1ha2VBY2Nlc3NvcignRGF0ZScsIHRydWUpOwogICAgbW9tZW50LmZuLmRhdGVzID0gZGVwcmVjYXRlKCJkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLiIsIG1ha2VBY2Nlc3NvcignRGF0ZScsIHRydWUpKTsKICAgIG1vbWVudC5mbi55ZWFyID0gbWFrZUFjY2Vzc29yKCdGdWxsWWVhcicsIHRydWUpOwogICAgbW9tZW50LmZuLnllYXJzID0gZGVwcmVjYXRlKCJ5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkLiIsIG1ha2VBY2Nlc3NvcignRnVsbFllYXInLCB0cnVlKSk7CgogICAgLy8gYWRkIHBsdXJhbCBtZXRob2RzCiAgICBtb21lbnQuZm4uZGF5cyA9IG1vbWVudC5mbi5kYXk7CiAgICBtb21lbnQuZm4ubW9udGhzID0gbW9tZW50LmZuLm1vbnRoOwogICAgbW9tZW50LmZuLndlZWtzID0gbW9tZW50LmZuLndlZWs7CiAgICBtb21lbnQuZm4uaXNvV2Vla3MgPSBtb21lbnQuZm4uaXNvV2VlazsKICAgIG1vbWVudC5mbi5xdWFydGVycyA9IG1vbWVudC5mbi5xdWFydGVyOwoKICAgIC8vIGFkZCBhbGlhc2VkIGZvcm1hdCBtZXRob2RzCiAgICBtb21lbnQuZm4udG9KU09OID0gbW9tZW50LmZuLnRvSVNPU3RyaW5nOwoKICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAgICBEdXJhdGlvbiBQcm90b3R5cGUKICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgogICAgZXh0ZW5kKG1vbWVudC5kdXJhdGlvbi5mbiA9IER1cmF0aW9uLnByb3RvdHlwZSwgewoKICAgICAgICBfYnViYmxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzLAogICAgICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMsCiAgICAgICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMsCiAgICAgICAgICAgICAgICBkYXRhID0gdGhpcy5fZGF0YSwKICAgICAgICAgICAgICAgIHNlY29uZHMsIG1pbnV0ZXMsIGhvdXJzLCB5ZWFyczsKCiAgICAgICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBidWJibGVzIHVwIHZhbHVlcywgc2VlIHRoZSB0ZXN0cyBmb3IKICAgICAgICAgICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLgogICAgICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcyAlIDEwMDA7CgogICAgICAgICAgICBzZWNvbmRzID0gYWJzUm91bmQobWlsbGlzZWNvbmRzIC8gMTAwMCk7CiAgICAgICAgICAgIGRhdGEuc2Vjb25kcyA9IHNlY29uZHMgJSA2MDsKCiAgICAgICAgICAgIG1pbnV0ZXMgPSBhYnNSb3VuZChzZWNvbmRzIC8gNjApOwogICAgICAgICAgICBkYXRhLm1pbnV0ZXMgPSBtaW51dGVzICUgNjA7CgogICAgICAgICAgICBob3VycyA9IGFic1JvdW5kKG1pbnV0ZXMgLyA2MCk7CiAgICAgICAgICAgIGRhdGEuaG91cnMgPSBob3VycyAlIDI0OwoKICAgICAgICAgICAgZGF5cyArPSBhYnNSb3VuZChob3VycyAvIDI0KTsKICAgICAgICAgICAgZGF0YS5kYXlzID0gZGF5cyAlIDMwOwoKICAgICAgICAgICAgbW9udGhzICs9IGFic1JvdW5kKGRheXMgLyAzMCk7CiAgICAgICAgICAgIGRhdGEubW9udGhzID0gbW9udGhzICUgMTI7CgogICAgICAgICAgICB5ZWFycyA9IGFic1JvdW5kKG1vbnRocyAvIDEyKTsKICAgICAgICAgICAgZGF0YS55ZWFycyA9IHllYXJzOwogICAgICAgIH0sCgogICAgICAgIHdlZWtzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gYWJzUm91bmQodGhpcy5kYXlzKCkgLyA3KTsKICAgICAgICB9LAoKICAgICAgICB2YWx1ZU9mIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fbWlsbGlzZWNvbmRzICsKICAgICAgICAgICAgICB0aGlzLl9kYXlzICogODY0ZTUgKwogICAgICAgICAgICAgICh0aGlzLl9tb250aHMgJSAxMikgKiAyNTkyZTYgKwogICAgICAgICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTY7CiAgICAgICAgfSwKCiAgICAgICAgaHVtYW5pemUgOiBmdW5jdGlvbiAod2l0aFN1ZmZpeCkgewogICAgICAgICAgICB2YXIgZGlmZmVyZW5jZSA9ICt0aGlzLAogICAgICAgICAgICAgICAgb3V0cHV0ID0gcmVsYXRpdmVUaW1lKGRpZmZlcmVuY2UsICF3aXRoU3VmZml4LCB0aGlzLmxhbmcoKSk7CgogICAgICAgICAgICBpZiAod2l0aFN1ZmZpeCkgewogICAgICAgICAgICAgICAgb3V0cHV0ID0gdGhpcy5sYW5nKCkucGFzdEZ1dHVyZShkaWZmZXJlbmNlLCBvdXRwdXQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpcy5sYW5nKCkucG9zdGZvcm1hdChvdXRwdXQpOwogICAgICAgIH0sCgogICAgICAgIGFkZCA6IGZ1bmN0aW9uIChpbnB1dCwgdmFsKSB7CiAgICAgICAgICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIGFkZCgxLCAncycpIG9yIGFkZChtb21lbnQpCiAgICAgICAgICAgIHZhciBkdXIgPSBtb21lbnQuZHVyYXRpb24oaW5wdXQsIHZhbCk7CgogICAgICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgKz0gZHVyLl9taWxsaXNlY29uZHM7CiAgICAgICAgICAgIHRoaXMuX2RheXMgKz0gZHVyLl9kYXlzOwogICAgICAgICAgICB0aGlzLl9tb250aHMgKz0gZHVyLl9tb250aHM7CgogICAgICAgICAgICB0aGlzLl9idWJibGUoKTsKCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHN1YnRyYWN0IDogZnVuY3Rpb24gKGlucHV0LCB2YWwpIHsKICAgICAgICAgICAgdmFyIGR1ciA9IG1vbWVudC5kdXJhdGlvbihpbnB1dCwgdmFsKTsKCiAgICAgICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyAtPSBkdXIuX21pbGxpc2Vjb25kczsKICAgICAgICAgICAgdGhpcy5fZGF5cyAtPSBkdXIuX2RheXM7CiAgICAgICAgICAgIHRoaXMuX21vbnRocyAtPSBkdXIuX21vbnRoczsKCiAgICAgICAgICAgIHRoaXMuX2J1YmJsZSgpOwoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0IDogZnVuY3Rpb24gKHVuaXRzKSB7CiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpOwogICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0cy50b0xvd2VyQ2FzZSgpICsgJ3MnXSgpOwogICAgICAgIH0sCgogICAgICAgIGFzIDogZnVuY3Rpb24gKHVuaXRzKSB7CiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpOwogICAgICAgICAgICByZXR1cm4gdGhpc1snYXMnICsgdW5pdHMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB1bml0cy5zbGljZSgxKSArICdzJ10oKTsKICAgICAgICB9LAoKICAgICAgICBsYW5nIDogbW9tZW50LmZuLmxhbmcsCgogICAgICAgIHRvSXNvU3RyaW5nIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qcwogICAgICAgICAgICB2YXIgeWVhcnMgPSBNYXRoLmFicyh0aGlzLnllYXJzKCkpLAogICAgICAgICAgICAgICAgbW9udGhzID0gTWF0aC5hYnModGhpcy5tb250aHMoKSksCiAgICAgICAgICAgICAgICBkYXlzID0gTWF0aC5hYnModGhpcy5kYXlzKCkpLAogICAgICAgICAgICAgICAgaG91cnMgPSBNYXRoLmFicyh0aGlzLmhvdXJzKCkpLAogICAgICAgICAgICAgICAgbWludXRlcyA9IE1hdGguYWJzKHRoaXMubWludXRlcygpKSwKICAgICAgICAgICAgICAgIHNlY29uZHMgPSBNYXRoLmFicyh0aGlzLnNlY29uZHMoKSArIHRoaXMubWlsbGlzZWNvbmRzKCkgLyAxMDAwKTsKCiAgICAgICAgICAgIGlmICghdGhpcy5hc1NlY29uZHMoKSkgewogICAgICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgc2FtZSBhcyBDIydzIChOb2RhKSBhbmQgcHl0aG9uIChpc29kYXRlKS4uLgogICAgICAgICAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKQogICAgICAgICAgICAgICAgcmV0dXJuICdQMEQnOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gKHRoaXMuYXNTZWNvbmRzKCkgPCAwID8gJy0nIDogJycpICsKICAgICAgICAgICAgICAgICdQJyArCiAgICAgICAgICAgICAgICAoeWVhcnMgPyB5ZWFycyArICdZJyA6ICcnKSArCiAgICAgICAgICAgICAgICAobW9udGhzID8gbW9udGhzICsgJ00nIDogJycpICsKICAgICAgICAgICAgICAgIChkYXlzID8gZGF5cyArICdEJyA6ICcnKSArCiAgICAgICAgICAgICAgICAoKGhvdXJzIHx8IG1pbnV0ZXMgfHwgc2Vjb25kcykgPyAnVCcgOiAnJykgKwogICAgICAgICAgICAgICAgKGhvdXJzID8gaG91cnMgKyAnSCcgOiAnJykgKwogICAgICAgICAgICAgICAgKG1pbnV0ZXMgPyBtaW51dGVzICsgJ00nIDogJycpICsKICAgICAgICAgICAgICAgIChzZWNvbmRzID8gc2Vjb25kcyArICdTJyA6ICcnKTsKICAgICAgICB9CiAgICB9KTsKCiAgICBmdW5jdGlvbiBtYWtlRHVyYXRpb25HZXR0ZXIobmFtZSkgewogICAgICAgIG1vbWVudC5kdXJhdGlvbi5mbltuYW1lXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFbbmFtZV07CiAgICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBtYWtlRHVyYXRpb25Bc0dldHRlcihuYW1lLCBmYWN0b3IpIHsKICAgICAgICBtb21lbnQuZHVyYXRpb24uZm5bJ2FzJyArIG5hbWVdID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gK3RoaXMgLyBmYWN0b3I7CiAgICAgICAgfTsKICAgIH0KCiAgICBmb3IgKGkgaW4gdW5pdE1pbGxpc2Vjb25kRmFjdG9ycykgewogICAgICAgIGlmICh1bml0TWlsbGlzZWNvbmRGYWN0b3JzLmhhc093blByb3BlcnR5KGkpKSB7CiAgICAgICAgICAgIG1ha2VEdXJhdGlvbkFzR2V0dGVyKGksIHVuaXRNaWxsaXNlY29uZEZhY3RvcnNbaV0pOwogICAgICAgICAgICBtYWtlRHVyYXRpb25HZXR0ZXIoaS50b0xvd2VyQ2FzZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgbWFrZUR1cmF0aW9uQXNHZXR0ZXIoJ1dlZWtzJywgNjA0OGU1KTsKICAgIG1vbWVudC5kdXJhdGlvbi5mbi5hc01vbnRocyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gKCt0aGlzIC0gdGhpcy55ZWFycygpICogMzE1MzZlNikgLyAyNTkyZTYgKyB0aGlzLnllYXJzKCkgKiAxMjsKICAgIH07CgoKICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAgICBEZWZhdWx0IExhbmcKICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgogICAgLy8gU2V0IGRlZmF1bHQgbGFuZ3VhZ2UsIG90aGVyIGxhbmd1YWdlcyB3aWxsIGluaGVyaXQgZnJvbSBFbmdsaXNoLgogICAgbW9tZW50LmxhbmcoJ2VuJywgewogICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7CiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsCiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOgogICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6CiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDoKICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnOwogICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0OwogICAgICAgIH0KICAgIH0pOwoKICAgIC8qIEVNQkVEX0xBTkdVQUdFUyAqLwoKICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAgICBFeHBvc2luZyBNb21lbnQKICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCiAgICBmdW5jdGlvbiBtYWtlR2xvYmFsKHNob3VsZERlcHJlY2F0ZSkgewogICAgICAgIC8qZ2xvYmFsIGVuZGVyOmZhbHNlICovCiAgICAgICAgaWYgKHR5cGVvZiBlbmRlciAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBvbGRHbG9iYWxNb21lbnQgPSBnbG9iYWxTY29wZS5tb21lbnQ7CiAgICAgICAgaWYgKHNob3VsZERlcHJlY2F0ZSkgewogICAgICAgICAgICBnbG9iYWxTY29wZS5tb21lbnQgPSBkZXByZWNhdGUoCiAgICAgICAgICAgICAgICAgICAgIkFjY2Vzc2luZyBNb21lbnQgdGhyb3VnaCB0aGUgZ2xvYmFsIHNjb3BlIGlzICIgKwogICAgICAgICAgICAgICAgICAgICJkZXByZWNhdGVkLCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGFuIHVwY29taW5nICIgKwogICAgICAgICAgICAgICAgICAgICJyZWxlYXNlLiIsCiAgICAgICAgICAgICAgICAgICAgbW9tZW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBnbG9iYWxTY29wZS5tb21lbnQgPSBtb21lbnQ7CiAgICAgICAgfQogICAgfQoKICAgIC8vIENvbW1vbkpTIG1vZHVsZSBpcyBkZWZpbmVkCiAgICBpZiAoaGFzTW9kdWxlKSB7CiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBtb21lbnQ7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewogICAgICAgIGRlZmluZSgibW9tZW50IiwgWydyZXF1aXJlJywnZXhwb3J0cycsJ21vZHVsZSddLGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHsKICAgICAgICAgICAgaWYgKG1vZHVsZS5jb25maWcgJiYgbW9kdWxlLmNvbmZpZygpICYmIG1vZHVsZS5jb25maWcoKS5ub0dsb2JhbCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgLy8gcmVsZWFzZSB0aGUgZ2xvYmFsIHZhcmlhYmxlCiAgICAgICAgICAgICAgICBnbG9iYWxTY29wZS5tb21lbnQgPSBvbGRHbG9iYWxNb21lbnQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBtb21lbnQ7CiAgICAgICAgfSk7CiAgICAgICAgbWFrZUdsb2JhbCh0cnVlKTsKICAgIH0gZWxzZSB7CiAgICAgICAgbWFrZUdsb2JhbCgpOwogICAgfQp9KS5jYWxsKHRoaXMpOwoKLyoKamVkLmpzCnYwLjUuMGJldGEKCmh0dHBzOi8vZ2l0aHViLmNvbS9TbGV4QXh0b24vSmVkCi0tLS0tLS0tLS0tCkEgZ2V0dGV4dCBjb21wYXRpYmxlIGkxOG4gbGlicmFyeSBmb3IgbW9kZXJuIEphdmFTY3JpcHQgQXBwbGljYXRpb25zCgpieSBBbGV4IFNleHRvbiAtIEFsZXhTZXh0b24gW2F0XSBnbWFpbCAtIEBTbGV4QXh0b24KV1RGUEwgbGljZW5zZSBmb3IgdXNlCkRvam8gQ0xBIGZvciBjb250cmlidXRpb25zCgpKZWQgb2ZmZXJzIHRoZSBlbnRpcmUgYXBwbGljYWJsZSBHTlUgZ2V0dGV4dCBzcGVjJ2Qgc2V0IG9mCmZ1bmN0aW9ucywgYnV0IGFsc28gb2ZmZXJzIHNvbWUgbmljZXIgd3JhcHBlcnMgYXJvdW5kIHRoZW0uClRoZSBhcGkgZm9yIGdldHRleHQgd2FzIHdyaXR0ZW4gZm9yIGEgbGFuZ3VhZ2Ugd2l0aCBubyBmdW5jdGlvbgpvdmVybG9hZGluZywgc28gSmVkIGFsbG93cyBhIGxpdHRsZSBtb3JlIG9mIHRoYXQuCgpNYW55IHRoYW5rcyB0byBKb3NodWEgSS4gTWlsbGVyIC0gdW5ydHN0QGNwYW4ub3JnIC0gd2hvIHdyb3RlCmdldHRleHQuanMgYmFjayBpbiAyMDA4LiBJIHdhcyBhYmxlIHRvIHZldCBhIGxvdCBvZiBteSBpZGVhcwphZ2FpbnN0IGhpcy4gSSBhbHNvIG1hZGUgc3VyZSBKZWQgcGFzc2VkIGFnYWluc3QgaGlzIHRlc3RzCmluIG9yZGVyIHRvIG9mZmVyIGVhc3kgdXBncmFkZXMgLS0ganNnZXR0ZXh0LmJlcmxpb3MuZGUKKi8KKGZ1bmN0aW9uIChyb290LCB1bmRlZikgewoKICAvLyBTZXQgdXAgc29tZSB1bmRlcnNjb3JlLXN0eWxlIGZ1bmN0aW9ucywgaWYgeW91IGFscmVhZHkgaGF2ZQogIC8vIHVuZGVyc2NvcmUsIGZlZWwgZnJlZSB0byBkZWxldGUgdGhpcyBzZWN0aW9uLCBhbmQgdXNlIGl0CiAgLy8gZGlyZWN0bHksIGhvd2V2ZXIsIHRoZSBhbW91bnQgb2YgZnVuY3Rpb25zIHVzZWQgZG9lc24ndAogIC8vIHdhcnJhbnQgaGF2aW5nIHVuZGVyc2NvcmUgYXMgYSBmdWxsIGRlcGVuZGVuY3kuCiAgLy8gVW5kZXJzY29yZSAxLjMuMCB3YXMgdXNlZCB0byBwb3J0IGFuZCBpcyBsaWNlbnNlZAogIC8vIHVuZGVyIHRoZSBNSVQgTGljZW5zZSBieSBKZXJlbXkgQXNoa2VuYXMuCiAgdmFyIEFycmF5UHJvdG8gICAgPSBBcnJheS5wcm90b3R5cGUsCiAgICAgIE9ialByb3RvICAgICAgPSBPYmplY3QucHJvdG90eXBlLAogICAgICBzbGljZSAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSwKICAgICAgaGFzT3duUHJvcCAgICA9IE9ialByb3RvLmhhc093blByb3BlcnR5LAogICAgICBuYXRpdmVGb3JFYWNoID0gQXJyYXlQcm90by5mb3JFYWNoLAogICAgICBicmVha2VyICAgICAgID0ge307CgogIC8vIFdlJ3JlIG5vdCB1c2luZyB0aGUgT09QIHN0eWxlIF8gc28gd2UgZG9uJ3QgbmVlZCB0aGUKICAvLyBleHRyYSBsZXZlbCBvZiBpbmRpcmVjdGlvbi4gVGhpcyBzdGlsbCBtZWFucyB0aGF0IHlvdQogIC8vIHN1YiBvdXQgZm9yIHJlYWwgYF9gIHRob3VnaC4KICB2YXIgXyA9IHsKICAgIGZvckVhY2ggOiBmdW5jdGlvbiggb2JqLCBpdGVyYXRvciwgY29udGV4dCApIHsKICAgICAgdmFyIGksIGwsIGtleTsKICAgICAgaWYgKCBvYmogPT09IG51bGwgKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoIG5hdGl2ZUZvckVhY2ggJiYgb2JqLmZvckVhY2ggPT09IG5hdGl2ZUZvckVhY2ggKSB7CiAgICAgICAgb2JqLmZvckVhY2goIGl0ZXJhdG9yLCBjb250ZXh0ICk7CiAgICAgIH0KICAgICAgZWxzZSBpZiAoIG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoICkgewogICAgICAgIGZvciAoIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKyApIHsKICAgICAgICAgIGlmICggaSBpbiBvYmogJiYgaXRlcmF0b3IuY2FsbCggY29udGV4dCwgb2JqW2ldLCBpLCBvYmogKSA9PT0gYnJlYWtlciApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBmb3IgKCBrZXkgaW4gb2JqKSB7CiAgICAgICAgICBpZiAoIGhhc093blByb3AuY2FsbCggb2JqLCBrZXkgKSApIHsKICAgICAgICAgICAgaWYgKCBpdGVyYXRvci5jYWxsIChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmogKSA9PT0gYnJlYWtlciApIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBleHRlbmQgOiBmdW5jdGlvbiggb2JqICkgewogICAgICB0aGlzLmZvckVhY2goIHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApLCBmdW5jdGlvbiAoIHNvdXJjZSApIHsKICAgICAgICBmb3IgKCB2YXIgcHJvcCBpbiBzb3VyY2UgKSB7CiAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIG9iajsKICAgIH0KICB9OwogIC8vIEVORCBNaW5pYXR1cmUgdW5kZXJzY29yZSBpbXBsCgogIC8vIEplZCBpcyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uCiAgdmFyIEplZCA9IGZ1bmN0aW9uICggb3B0aW9ucyApIHsKICAgIC8vIFNvbWUgbWluaW1hbCBkZWZhdWx0cwogICAgdGhpcy5kZWZhdWx0cyA9IHsKICAgICAgImxvY2FsZV9kYXRhIiA6IHsKICAgICAgICAibWVzc2FnZXMiIDogewogICAgICAgICAgIiIgOiB7CiAgICAgICAgICAgICJkb21haW4iICAgICAgIDogIm1lc3NhZ2VzIiwKICAgICAgICAgICAgImxhbmciICAgICAgICAgOiAiZW4iLAogICAgICAgICAgICAicGx1cmFsX2Zvcm1zIiA6ICJucGx1cmFscz0yOyBwbHVyYWw9KG4gIT0gMSk7IgogICAgICAgICAgfQogICAgICAgICAgLy8gVGhlcmUgYXJlIG5vIGRlZmF1bHQga2V5cywgdGhvdWdoCiAgICAgICAgfQogICAgICB9LAogICAgICAvLyBUaGUgZGVmYXVsdCBkb21haW4gaWYgb25lIGlzIG1pc3NpbmcKICAgICAgImRvbWFpbiIgOiAibWVzc2FnZXMiCiAgICB9OwoKICAgIC8vIE1peCBpbiB0aGUgc2VudCBvcHRpb25zIHdpdGggdGhlIGRlZmF1bHQgb3B0aW9ucwogICAgdGhpcy5vcHRpb25zID0gXy5leHRlbmQoIHt9LCB0aGlzLmRlZmF1bHRzLCBvcHRpb25zICk7CiAgICB0aGlzLnRleHRkb21haW4oIHRoaXMub3B0aW9ucy5kb21haW4gKTsKCiAgICBpZiAoIG9wdGlvbnMuZG9tYWluICYmICEgdGhpcy5vcHRpb25zLmxvY2FsZV9kYXRhWyB0aGlzLm9wdGlvbnMuZG9tYWluIF0gKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignVGV4dCBkb21haW4gc2V0IHRvIG5vbi1leGlzdGVudCBkb21haW46IGAnICsgb3B0aW9ucy5kb21haW4gKyAnYCcpOwogICAgfQogIH07CgogIC8vIFRoZSBnZXR0ZXh0IHNwZWMgc2V0cyB0aGlzIGNoYXJhY3RlciBhcyB0aGUgZGVmYXVsdAogIC8vIGRlbGltaXRlciBmb3IgY29udGV4dCBsb29rdXBzLgogIC8vIGUuZy46IGNvbnRleHRcdTAwMDRrZXkKICAvLyBJZiB5b3VyIHRyYW5zbGF0aW9uIGNvbXBhbnkgdXNlcyBzb21ldGhpbmcgZGlmZmVyZW50LAogIC8vIGp1c3QgY2hhbmdlIHRoaXMgYXQgYW55IHRpbWUgYW5kIGl0IHdpbGwgdXNlIHRoYXQgaW5zdGVhZC4KICBKZWQuY29udGV4dF9kZWxpbWl0ZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCA0ICk7CgogIGZ1bmN0aW9uIGdldFBsdXJhbEZvcm1GdW5jICggcGx1cmFsX2Zvcm1fc3RyaW5nICkgewogICAgcmV0dXJuIEplZC5QRi5jb21waWxlKCBwbHVyYWxfZm9ybV9zdHJpbmcgfHwgIm5wbHVyYWxzPTI7IHBsdXJhbD0obiAhPSAxKTsiKTsKICB9CgogIGZ1bmN0aW9uIENoYWluKCBrZXksIGkxOG4gKXsKICAgIHRoaXMuX2tleSA9IGtleTsKICAgIHRoaXMuX2kxOG4gPSBpMThuOwogIH0KCiAgLy8gQ3JlYXRlIGEgY2hhaW5hYmxlIGFwaSBmb3IgYWRkaW5nIGFyZ3MgcHJldHRpbHkKICBfLmV4dGVuZCggQ2hhaW4ucHJvdG90eXBlLCB7CiAgICBvbkRvbWFpbiA6IGZ1bmN0aW9uICggZG9tYWluICkgewogICAgICB0aGlzLl9kb21haW4gPSBkb21haW47CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKICAgIHdpdGhDb250ZXh0IDogZnVuY3Rpb24gKCBjb250ZXh0ICkgewogICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAogICAgaWZQbHVyYWwgOiBmdW5jdGlvbiAoIG51bSwgcGtleSApIHsKICAgICAgdGhpcy5fdmFsID0gbnVtOwogICAgICB0aGlzLl9wa2V5ID0gcGtleTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAogICAgZmV0Y2ggOiBmdW5jdGlvbiAoIHNBcnIgKSB7CiAgICAgIGlmICgge30udG9TdHJpbmcuY2FsbCggc0FyciApICE9ICdbb2JqZWN0IEFycmF5XScgKSB7CiAgICAgICAgc0FyciA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgICAgfQogICAgICByZXR1cm4gKCBzQXJyICYmIHNBcnIubGVuZ3RoID8gSmVkLnNwcmludGYgOiBmdW5jdGlvbih4KXsgcmV0dXJuIHg7IH0gKSgKICAgICAgICB0aGlzLl9pMThuLmRjbnBnZXR0ZXh0KHRoaXMuX2RvbWFpbiwgdGhpcy5fY29udGV4dCwgdGhpcy5fa2V5LCB0aGlzLl9wa2V5LCB0aGlzLl92YWwpLAogICAgICAgIHNBcnIKICAgICAgKTsKICAgIH0KICB9KTsKCiAgLy8gQWRkIGZ1bmN0aW9ucyB0byB0aGUgSmVkIHByb3RvdHlwZS4KICAvLyBUaGVzZSB3aWxsIGJlIHRoZSBmdW5jdGlvbnMgb24gdGhlIG9iamVjdCB0aGF0J3MgcmV0dXJuZWQKICAvLyBmcm9tIGNyZWF0aW5nIGEgYG5ldyBKZWQoKWAKICAvLyBUaGVzZSBzZWVtIHJlZHVuZGFudCwgYnV0IHRoZXkgZ3ppcCBwcmV0dHkgd2VsbC4KICBfLmV4dGVuZCggSmVkLnByb3RvdHlwZSwgewogICAgLy8gVGhlIHNleGllciBhcGkgc3RhcnQgcG9pbnQKICAgIHRyYW5zbGF0ZSA6IGZ1bmN0aW9uICgga2V5ICkgewogICAgICByZXR1cm4gbmV3IENoYWluKCBrZXksIHRoaXMgKTsKICAgIH0sCgogICAgdGV4dGRvbWFpbiA6IGZ1bmN0aW9uICggZG9tYWluICkgewogICAgICBpZiAoICEgZG9tYWluICkgewogICAgICAgIHJldHVybiB0aGlzLl90ZXh0ZG9tYWluOwogICAgICB9CiAgICAgIHRoaXMuX3RleHRkb21haW4gPSBkb21haW47CiAgICB9LAoKICAgIGdldHRleHQgOiBmdW5jdGlvbiAoIGtleSApIHsKICAgICAgcmV0dXJuIHRoaXMuZGNucGdldHRleHQuY2FsbCggdGhpcywgdW5kZWYsIHVuZGVmLCBrZXkgKTsKICAgIH0sCgogICAgZGdldHRleHQgOiBmdW5jdGlvbiAoIGRvbWFpbiwga2V5ICkgewogICAgIHJldHVybiB0aGlzLmRjbnBnZXR0ZXh0LmNhbGwoIHRoaXMsIGRvbWFpbiwgdW5kZWYsIGtleSApOwogICAgfSwKCiAgICBkY2dldHRleHQgOiBmdW5jdGlvbiAoIGRvbWFpbiAsIGtleSAvKiwgY2F0ZWdvcnkgKi8gKSB7CiAgICAgIC8vIElnbm9yZXMgdGhlIGNhdGVnb3J5IGFueXdheXMKICAgICAgcmV0dXJuIHRoaXMuZGNucGdldHRleHQuY2FsbCggdGhpcywgZG9tYWluLCB1bmRlZiwga2V5ICk7CiAgICB9LAoKICAgIG5nZXR0ZXh0IDogZnVuY3Rpb24gKCBza2V5LCBwa2V5LCB2YWwgKSB7CiAgICAgIHJldHVybiB0aGlzLmRjbnBnZXR0ZXh0LmNhbGwoIHRoaXMsIHVuZGVmLCB1bmRlZiwgc2tleSwgcGtleSwgdmFsICk7CiAgICB9LAoKICAgIGRuZ2V0dGV4dCA6IGZ1bmN0aW9uICggZG9tYWluLCBza2V5LCBwa2V5LCB2YWwgKSB7CiAgICAgIHJldHVybiB0aGlzLmRjbnBnZXR0ZXh0LmNhbGwoIHRoaXMsIGRvbWFpbiwgdW5kZWYsIHNrZXksIHBrZXksIHZhbCApOwogICAgfSwKCiAgICBkY25nZXR0ZXh0IDogZnVuY3Rpb24gKCBkb21haW4sIHNrZXksIHBrZXksIHZhbC8qLCBjYXRlZ29yeSAqLykgewogICAgICByZXR1cm4gdGhpcy5kY25wZ2V0dGV4dC5jYWxsKCB0aGlzLCBkb21haW4sIHVuZGVmLCBza2V5LCBwa2V5LCB2YWwgKTsKICAgIH0sCgogICAgcGdldHRleHQgOiBmdW5jdGlvbiAoIGNvbnRleHQsIGtleSApIHsKICAgICAgcmV0dXJuIHRoaXMuZGNucGdldHRleHQuY2FsbCggdGhpcywgdW5kZWYsIGNvbnRleHQsIGtleSApOwogICAgfSwKCiAgICBkcGdldHRleHQgOiBmdW5jdGlvbiAoIGRvbWFpbiwgY29udGV4dCwga2V5ICkgewogICAgICByZXR1cm4gdGhpcy5kY25wZ2V0dGV4dC5jYWxsKCB0aGlzLCBkb21haW4sIGNvbnRleHQsIGtleSApOwogICAgfSwKCiAgICBkY3BnZXR0ZXh0IDogZnVuY3Rpb24gKCBkb21haW4sIGNvbnRleHQsIGtleS8qLCBjYXRlZ29yeSAqLykgewogICAgICByZXR1cm4gdGhpcy5kY25wZ2V0dGV4dC5jYWxsKCB0aGlzLCBkb21haW4sIGNvbnRleHQsIGtleSApOwogICAgfSwKCiAgICBucGdldHRleHQgOiBmdW5jdGlvbiAoIGNvbnRleHQsIHNrZXksIHBrZXksIHZhbCApIHsKICAgICAgcmV0dXJuIHRoaXMuZGNucGdldHRleHQuY2FsbCggdGhpcywgdW5kZWYsIGNvbnRleHQsIHNrZXksIHBrZXksIHZhbCApOwogICAgfSwKCiAgICBkbnBnZXR0ZXh0IDogZnVuY3Rpb24gKCBkb21haW4sIGNvbnRleHQsIHNrZXksIHBrZXksIHZhbCApIHsKICAgICAgcmV0dXJuIHRoaXMuZGNucGdldHRleHQuY2FsbCggdGhpcywgZG9tYWluLCBjb250ZXh0LCBza2V5LCBwa2V5LCB2YWwgKTsKICAgIH0sCgogICAgLy8gVGhlIG1vc3QgZnVsbHkgcXVhbGlmaWVkIGdldHRleHQgZnVuY3Rpb24uIEl0IGhhcyBldmVyeSBvcHRpb24uCiAgICAvLyBTaW5jZSBpdCBoYXMgZXZlcnkgb3B0aW9uLCB3ZSBjYW4gdXNlIGl0IGZyb20gZXZlcnkgb3RoZXIgbWV0aG9kLgogICAgLy8gVGhpcyBpcyB0aGUgYnJlYWQgYW5kIGJ1dHRlci4KICAgIC8vIFRlY2huaWNhbGx5IHRoZXJlIHNob3VsZCBiZSBvbmUgbW9yZSBhcmd1bWVudCBpbiB0aGlzIGZ1bmN0aW9uIGZvciAnQ2F0ZWdvcnknLAogICAgLy8gYnV0IHNpbmNlIHdlIG5ldmVyIHVzZSBpdCwgd2UgbWlnaHQgYXMgd2VsbCBub3Qgd2FzdGUgdGhlIGJ5dGVzIHRvIGRlZmluZSBpdC4KICAgIGRjbnBnZXR0ZXh0IDogZnVuY3Rpb24gKCBkb21haW4sIGNvbnRleHQsIHNpbmd1bGFyX2tleSwgcGx1cmFsX2tleSwgdmFsICkgewogICAgICAvLyBTZXQgc29tZSBkZWZhdWx0cwoKICAgICAgcGx1cmFsX2tleSA9IHBsdXJhbF9rZXkgfHwgc2luZ3VsYXJfa2V5OwoKICAgICAgLy8gVXNlIHRoZSBnbG9iYWwgZG9tYWluIGRlZmF1bHQgaWYgb25lCiAgICAgIC8vIGlzbid0IGV4cGxpY2l0bHkgcGFzc2VkIGluCiAgICAgIGRvbWFpbiA9IGRvbWFpbiB8fCB0aGlzLl90ZXh0ZG9tYWluOwoKICAgICAgLy8gRGVmYXVsdCB0aGUgdmFsdWUgdG8gdGhlIHNpbmd1bGFyIGNhc2UKICAgICAgdmFsID0gdHlwZW9mIHZhbCA9PSAndW5kZWZpbmVkJyA/IDEgOiB2YWw7CgogICAgICB2YXIgZmFsbGJhY2s7CgogICAgICAvLyBIYW5kbGUgc3BlY2lhbCBjYXNlcwoKICAgICAgLy8gTm8gb3B0aW9ucyBmb3VuZAogICAgICBpZiAoICEgdGhpcy5vcHRpb25zICkgewogICAgICAgIC8vIFRoZXJlJ3MgbGlrZWx5IHNvbWV0aGluZyB3cm9uZywgYnV0IHdlJ2xsIHJldHVybiB0aGUgY29ycmVjdCBrZXkgZm9yIGVuZ2xpc2gKICAgICAgICAvLyBXZSBkbyB0aGlzIGJ5IGluc3RhbnRpYXRpbmcgYSBicmFuZCBuZXcgSmVkIGluc3RhbmNlIHdpdGggdGhlIGRlZmF1bHQgc2V0CiAgICAgICAgLy8gZm9yIGV2ZXJ5dGhpbmcgdGhhdCBjb3VsZCBiZSBicm9rZW4uCiAgICAgICAgZmFsbGJhY2sgPSBuZXcgSmVkKCk7CiAgICAgICAgcmV0dXJuIGZhbGxiYWNrLmRjbnBnZXR0ZXh0LmNhbGwoIGZhbGxiYWNrLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgc2luZ3VsYXJfa2V5LCBwbHVyYWxfa2V5LCB2YWwgKTsKICAgICAgfQoKICAgICAgLy8gTm8gdHJhbnNsYXRpb24gZGF0YSBwcm92aWRlZAogICAgICBpZiAoICEgdGhpcy5vcHRpb25zLmxvY2FsZV9kYXRhICkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbG9jYWxlIGRhdGEgcHJvdmlkZWQuJyk7CiAgICAgIH0KCiAgICAgIGlmICggISB0aGlzLm9wdGlvbnMubG9jYWxlX2RhdGFbIGRvbWFpbiBdICkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignRG9tYWluIGAnICsgZG9tYWluICsgJ2Agd2FzIG5vdCBmb3VuZC4nKTsKICAgICAgfQoKICAgICAgaWYgKCAhIHRoaXMub3B0aW9ucy5sb2NhbGVfZGF0YVsgZG9tYWluIF1bICIiIF0gKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBsb2NhbGUgbWV0YSBpbmZvcm1hdGlvbiBwcm92aWRlZC4nKTsKICAgICAgfQoKICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSB0cnV0aHkga2V5LiBPdGhlcndpc2Ugd2UgbWlnaHQgc3RhcnQgbG9va2luZwogICAgICAvLyBpbnRvIHRoZSBlbXB0eSBzdHJpbmcga2V5LCB3aGljaCBpcyB0aGUgb3B0aW9ucyBmb3IgdGhlIGxvY2FsZQogICAgICAvLyBkYXRhLgogICAgICBpZiAoICEgc2luZ3VsYXJfa2V5ICkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdHJhbnNsYXRpb24ga2V5IGZvdW5kLicpOwogICAgICB9CgogICAgICAvLyBIYW5kbGUgaW52YWxpZCBudW1iZXJzLCBidXQgdHJ5IGNhc3Rpbmcgc3RyaW5ncyBmb3IgZ29vZCBtZWFzdXJlCiAgICAgIGlmICggdHlwZW9mIHZhbCAhPSAnbnVtYmVyJyApIHsKICAgICAgICB2YWwgPSBwYXJzZUludCggdmFsLCAxMCApOwoKICAgICAgICBpZiAoIGlzTmFOKCB2YWwgKSApIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIG51bWJlciB0aGF0IHdhcyBwYXNzZWQgaW4gaXMgbm90IGEgbnVtYmVyLicpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIGtleSAgPSBjb250ZXh0ID8gY29udGV4dCArIEplZC5jb250ZXh0X2RlbGltaXRlciArIHNpbmd1bGFyX2tleSA6IHNpbmd1bGFyX2tleSwKICAgICAgICAgIGxvY2FsZV9kYXRhID0gdGhpcy5vcHRpb25zLmxvY2FsZV9kYXRhLAogICAgICAgICAgZGljdCA9IGxvY2FsZV9kYXRhWyBkb21haW4gXSwKICAgICAgICAgIHBsdXJhbEZvcm1zID0gZGljdFsiIl0ucGx1cmFsX2Zvcm1zIHx8IChsb2NhbGVfZGF0YS5tZXNzYWdlcyB8fCB0aGlzLmRlZmF1bHRzLmxvY2FsZV9kYXRhLm1lc3NhZ2VzKVsiIl0ucGx1cmFsX2Zvcm1zLAogICAgICAgICAgdmFsX2lkeCA9IGdldFBsdXJhbEZvcm1GdW5jKHBsdXJhbEZvcm1zKSh2YWwpICsgMSwKICAgICAgICAgIHZhbF9saXN0LAogICAgICAgICAgcmVzOwoKICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgYSBkb21haW4gaXNuJ3QgZm91bmQKICAgICAgaWYgKCAhIGRpY3QgKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkb21haW4gbmFtZWQgYCcgKyBkb21haW4gKyAnYCBjb3VsZCBiZSBmb3VuZC4nKTsKICAgICAgfQoKICAgICAgdmFsX2xpc3QgPSBkaWN0WyBrZXkgXTsKCiAgICAgIC8vIElmIHRoZXJlIGlzIG5vIG1hdGNoLCB0aGVuIHJldmVydCBiYWNrIHRvCiAgICAgIC8vIGVuZ2xpc2ggc3R5bGUgc2luZ3VsYXIvcGx1cmFsIHdpdGggdGhlIGtleXMgcGFzc2VkIGluLgogICAgICBpZiAoICEgdmFsX2xpc3QgfHwgdmFsX2lkeCA+PSB2YWxfbGlzdC5sZW5ndGggKSB7CiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5taXNzaW5nX2tleV9jYWxsYmFjaykgewogICAgICAgICAgdGhpcy5vcHRpb25zLm1pc3Npbmdfa2V5X2NhbGxiYWNrKGtleSk7CiAgICAgICAgfQogICAgICAgIHJlcyA9IFsgbnVsbCwgc2luZ3VsYXJfa2V5LCBwbHVyYWxfa2V5IF07CiAgICAgICAgcmV0dXJuIHJlc1sgZ2V0UGx1cmFsRm9ybUZ1bmMocGx1cmFsRm9ybXMpKCB2YWwgKSArIDEgXTsKICAgICAgfQoKICAgICAgcmVzID0gdmFsX2xpc3RbIHZhbF9pZHggXTsKCiAgICAgIC8vIFRoaXMgaW5jbHVkZXMgZW1wdHkgc3RyaW5ncyBvbiBwdXJwb3NlCiAgICAgIGlmICggISByZXMgICkgewogICAgICAgIHJlcyA9IFsgbnVsbCwgc2luZ3VsYXJfa2V5LCBwbHVyYWxfa2V5IF07CiAgICAgICAgcmV0dXJuIHJlc1sgZ2V0UGx1cmFsRm9ybUZ1bmMocGx1cmFsRm9ybXMpKCB2YWwgKSArIDEgXTsKICAgICAgfQogICAgICByZXR1cm4gcmVzOwogICAgfQogIH0pOwoKCiAgLy8gV2UgYWRkIGluIHNwcmludGYgY2FwYWJpbGl0aWVzIGZvciBwb3N0IHRyYW5zbGF0aW9uIHZhbHVlIGludGVyb2xhdGlvbgogIC8vIFRoaXMgaXMgbm90IGludGVybmFsbHkgdXNlZCwgc28geW91IGNhbiByZW1vdmUgaXQgaWYgeW91IGhhdmUgdGhpcwogIC8vIGF2YWlsYWJsZSBzb21ld2hlcmUgZWxzZSwgb3Igd2FudCB0byB1c2UgYSBkaWZmZXJlbnQgc3lzdGVtLgoKICAvLyBXZSBfc2xpZ2h0bHlfIG1vZGlmeSB0aGUgbm9ybWFsIHNwcmludGYgYmVoYXZpb3IgdG8gbW9yZSBncmFjZWZ1bGx5IGhhbmRsZQogIC8vIHVuZGVmaW5lZCB2YWx1ZXMuCgogIC8qKgogICBzcHJpbnRmKCkgZm9yIEphdmFTY3JpcHQgMC43LWJldGExCiAgIGh0dHA6Ly93d3cuZGl2ZWludG9qYXZhc2NyaXB0LmNvbS9wcm9qZWN0cy9qYXZhc2NyaXB0LXNwcmludGYKCiAgIENvcHlyaWdodCAoYykgQWxleGFuZHJ1IE1hcmFzdGVhbnUgPGFsZXhhaG9saWMgW2F0KSBnbWFpbCAoZG90XSBjb20+CiAgIEFsbCByaWdodHMgcmVzZXJ2ZWQuCgogICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQKICAgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CiAgICAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0CiAgICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KICAgICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQKICAgICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZQogICAgICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgogICAgICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHNwcmludGYoKSBmb3IgSmF2YVNjcmlwdCBub3IgdGhlCiAgICAgICAgIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzCiAgICAgICAgIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLgoKICAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORAogICBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRAogICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFCiAgIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEFsZXhhbmRydSBNYXJhc3RlYW51IEJFIExJQUJMRSBGT1IgQU5ZCiAgIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTCiAgIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsKICAgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5ECiAgIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUCiAgIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTCiAgIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgogICovCiAgdmFyIHNwcmludGYgPSAoZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBnZXRfdHlwZSh2YXJpYWJsZSkgewogICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhcmlhYmxlKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKTsKICAgIH0KICAgIGZ1bmN0aW9uIHN0cl9yZXBlYXQoaW5wdXQsIG11bHRpcGxpZXIpIHsKICAgICAgZm9yICh2YXIgb3V0cHV0ID0gW107IG11bHRpcGxpZXIgPiAwOyBvdXRwdXRbLS1tdWx0aXBsaWVyXSA9IGlucHV0KSB7LyogZG8gbm90aGluZyAqL30KICAgICAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTsKICAgIH0KCiAgICB2YXIgc3RyX2Zvcm1hdCA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAoIXN0cl9mb3JtYXQuY2FjaGUuaGFzT3duUHJvcGVydHkoYXJndW1lbnRzWzBdKSkgewogICAgICAgIHN0cl9mb3JtYXQuY2FjaGVbYXJndW1lbnRzWzBdXSA9IHN0cl9mb3JtYXQucGFyc2UoYXJndW1lbnRzWzBdKTsKICAgICAgfQogICAgICByZXR1cm4gc3RyX2Zvcm1hdC5mb3JtYXQuY2FsbChudWxsLCBzdHJfZm9ybWF0LmNhY2hlW2FyZ3VtZW50c1swXV0sIGFyZ3VtZW50cyk7CiAgICB9OwoKICAgIHN0cl9mb3JtYXQuZm9ybWF0ID0gZnVuY3Rpb24ocGFyc2VfdHJlZSwgYXJndikgewogICAgICB2YXIgY3Vyc29yID0gMSwgdHJlZV9sZW5ndGggPSBwYXJzZV90cmVlLmxlbmd0aCwgbm9kZV90eXBlID0gJycsIGFyZywgb3V0cHV0ID0gW10sIGksIGssIG1hdGNoLCBwYWQsIHBhZF9jaGFyYWN0ZXIsIHBhZF9sZW5ndGg7CiAgICAgIGZvciAoaSA9IDA7IGkgPCB0cmVlX2xlbmd0aDsgaSsrKSB7CiAgICAgICAgbm9kZV90eXBlID0gZ2V0X3R5cGUocGFyc2VfdHJlZVtpXSk7CiAgICAgICAgaWYgKG5vZGVfdHlwZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgIG91dHB1dC5wdXNoKHBhcnNlX3RyZWVbaV0pOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChub2RlX3R5cGUgPT09ICdhcnJheScpIHsKICAgICAgICAgIG1hdGNoID0gcGFyc2VfdHJlZVtpXTsgLy8gY29udmVuaWVuY2UgcHVycG9zZXMgb25seQogICAgICAgICAgaWYgKG1hdGNoWzJdKSB7IC8vIGtleXdvcmQgYXJndW1lbnQKICAgICAgICAgICAgYXJnID0gYXJndltjdXJzb3JdOwogICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbWF0Y2hbMl0ubGVuZ3RoOyBrKyspIHsKICAgICAgICAgICAgICBpZiAoIWFyZy5oYXNPd25Qcm9wZXJ0eShtYXRjaFsyXVtrXSkpIHsKICAgICAgICAgICAgICAgIHRocm93KHNwcmludGYoJ1tzcHJpbnRmXSBwcm9wZXJ0eSAiJXMiIGRvZXMgbm90IGV4aXN0JywgbWF0Y2hbMl1ba10pKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYXJnID0gYXJnW21hdGNoWzJdW2tdXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZWxzZSBpZiAobWF0Y2hbMV0pIHsgLy8gcG9zaXRpb25hbCBhcmd1bWVudCAoZXhwbGljaXQpCiAgICAgICAgICAgIGFyZyA9IGFyZ3ZbbWF0Y2hbMV1dOwogICAgICAgICAgfQogICAgICAgICAgZWxzZSB7IC8vIHBvc2l0aW9uYWwgYXJndW1lbnQgKGltcGxpY2l0KQogICAgICAgICAgICBhcmcgPSBhcmd2W2N1cnNvcisrXTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoL1tec10vLnRlc3QobWF0Y2hbOF0pICYmIChnZXRfdHlwZShhcmcpICE9ICdudW1iZXInKSkgewogICAgICAgICAgICB0aHJvdyhzcHJpbnRmKCdbc3ByaW50Zl0gZXhwZWN0aW5nIG51bWJlciBidXQgZm91bmQgJXMnLCBnZXRfdHlwZShhcmcpKSk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gSmVkIEVESVQKICAgICAgICAgIGlmICggdHlwZW9mIGFyZyA9PSAndW5kZWZpbmVkJyB8fCBhcmcgPT09IG51bGwgKSB7CiAgICAgICAgICAgIGFyZyA9ICcnOwogICAgICAgICAgfQogICAgICAgICAgLy8gSmVkIEVESVQKCiAgICAgICAgICBzd2l0Y2ggKG1hdGNoWzhdKSB7CiAgICAgICAgICAgIGNhc2UgJ2InOiBhcmcgPSBhcmcudG9TdHJpbmcoMik7IGJyZWFrOwogICAgICAgICAgICBjYXNlICdjJzogYXJnID0gU3RyaW5nLmZyb21DaGFyQ29kZShhcmcpOyBicmVhazsKICAgICAgICAgICAgY2FzZSAnZCc6IGFyZyA9IHBhcnNlSW50KGFyZywgMTApOyBicmVhazsKICAgICAgICAgICAgY2FzZSAnZSc6IGFyZyA9IG1hdGNoWzddID8gYXJnLnRvRXhwb25lbnRpYWwobWF0Y2hbN10pIDogYXJnLnRvRXhwb25lbnRpYWwoKTsgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ2YnOiBhcmcgPSBtYXRjaFs3XSA/IHBhcnNlRmxvYXQoYXJnKS50b0ZpeGVkKG1hdGNoWzddKSA6IHBhcnNlRmxvYXQoYXJnKTsgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ28nOiBhcmcgPSBhcmcudG9TdHJpbmcoOCk7IGJyZWFrOwogICAgICAgICAgICBjYXNlICdzJzogYXJnID0gKChhcmcgPSBTdHJpbmcoYXJnKSkgJiYgbWF0Y2hbN10gPyBhcmcuc3Vic3RyaW5nKDAsIG1hdGNoWzddKSA6IGFyZyk7IGJyZWFrOwogICAgICAgICAgICBjYXNlICd1JzogYXJnID0gTWF0aC5hYnMoYXJnKTsgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ3gnOiBhcmcgPSBhcmcudG9TdHJpbmcoMTYpOyBicmVhazsKICAgICAgICAgICAgY2FzZSAnWCc6IGFyZyA9IGFyZy50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBhcmcgPSAoL1tkZWZdLy50ZXN0KG1hdGNoWzhdKSAmJiBtYXRjaFszXSAmJiBhcmcgPj0gMCA/ICcrJysgYXJnIDogYXJnKTsKICAgICAgICAgIHBhZF9jaGFyYWN0ZXIgPSBtYXRjaFs0XSA/IG1hdGNoWzRdID09ICcwJyA/ICcwJyA6IG1hdGNoWzRdLmNoYXJBdCgxKSA6ICcgJzsKICAgICAgICAgIHBhZF9sZW5ndGggPSBtYXRjaFs2XSAtIFN0cmluZyhhcmcpLmxlbmd0aDsKICAgICAgICAgIHBhZCA9IG1hdGNoWzZdID8gc3RyX3JlcGVhdChwYWRfY2hhcmFjdGVyLCBwYWRfbGVuZ3RoKSA6ICcnOwogICAgICAgICAgb3V0cHV0LnB1c2gobWF0Y2hbNV0gPyBhcmcgKyBwYWQgOiBwYWQgKyBhcmcpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpOwogICAgfTsKCiAgICBzdHJfZm9ybWF0LmNhY2hlID0ge307CgogICAgc3RyX2Zvcm1hdC5wYXJzZSA9IGZ1bmN0aW9uKGZtdCkgewogICAgICB2YXIgX2ZtdCA9IGZtdCwgbWF0Y2ggPSBbXSwgcGFyc2VfdHJlZSA9IFtdLCBhcmdfbmFtZXMgPSAwOwogICAgICB3aGlsZSAoX2ZtdCkgewogICAgICAgIGlmICgobWF0Y2ggPSAvXlteXHgyNV0rLy5leGVjKF9mbXQpKSAhPT0gbnVsbCkgewogICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKG1hdGNoWzBdKTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoKG1hdGNoID0gL15ceDI1ezJ9Ly5leGVjKF9mbXQpKSAhPT0gbnVsbCkgewogICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKCclJyk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IC9eXHgyNSg/OihbMS05XVxkKilcJHxcKChbXlwpXSspXCkpPyhcKyk/KDB8J1teJF0pPygtKT8oXGQrKT8oPzpcLihcZCspKT8oW2ItZm9zdXhYXSkvLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7CiAgICAgICAgICBpZiAobWF0Y2hbMl0pIHsKICAgICAgICAgICAgYXJnX25hbWVzIHw9IDE7CiAgICAgICAgICAgIHZhciBmaWVsZF9saXN0ID0gW10sIHJlcGxhY2VtZW50X2ZpZWxkID0gbWF0Y2hbMl0sIGZpZWxkX21hdGNoID0gW107CiAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSAvXihbYS16X11bYS16X1xkXSopL2kuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKTsKICAgICAgICAgICAgICB3aGlsZSAoKHJlcGxhY2VtZW50X2ZpZWxkID0gcmVwbGFjZW1lbnRfZmllbGQuc3Vic3RyaW5nKGZpZWxkX21hdGNoWzBdLmxlbmd0aCkpICE9PSAnJykgewogICAgICAgICAgICAgICAgaWYgKChmaWVsZF9tYXRjaCA9IC9eXC4oW2Etel9dW2Etel9cZF0qKS9pLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAoKGZpZWxkX21hdGNoID0gL15cWyhcZCspXF0vLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgIHRocm93KCdbc3ByaW50Zl0gaHVoPycpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICB0aHJvdygnW3NwcmludGZdIGh1aD8nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBtYXRjaFsyXSA9IGZpZWxkX2xpc3Q7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgYXJnX25hbWVzIHw9IDI7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoYXJnX25hbWVzID09PSAzKSB7CiAgICAgICAgICAgIHRocm93KCdbc3ByaW50Zl0gbWl4aW5nIHBvc2l0aW9uYWwgYW5kIG5hbWVkIHBsYWNlaG9sZGVycyBpcyBub3QgKHlldCkgc3VwcG9ydGVkJyk7CiAgICAgICAgICB9CiAgICAgICAgICBwYXJzZV90cmVlLnB1c2gobWF0Y2gpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgIHRocm93KCdbc3ByaW50Zl0gaHVoPycpOwogICAgICAgIH0KICAgICAgICBfZm10ID0gX2ZtdC5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKTsKICAgICAgfQogICAgICByZXR1cm4gcGFyc2VfdHJlZTsKICAgIH07CgogICAgcmV0dXJuIHN0cl9mb3JtYXQ7CiAgfSkoKTsKCiAgdmFyIHZzcHJpbnRmID0gZnVuY3Rpb24oZm10LCBhcmd2KSB7CiAgICBhcmd2LnVuc2hpZnQoZm10KTsKICAgIHJldHVybiBzcHJpbnRmLmFwcGx5KG51bGwsIGFyZ3YpOwogIH07CgogIEplZC5wYXJzZV9wbHVyYWwgPSBmdW5jdGlvbiAoIHBsdXJhbF9mb3JtcywgbiApIHsKICAgIHBsdXJhbF9mb3JtcyA9IHBsdXJhbF9mb3Jtcy5yZXBsYWNlKC9uL2csIG4pOwogICAgcmV0dXJuIEplZC5wYXJzZV9leHByZXNzaW9uKHBsdXJhbF9mb3Jtcyk7CiAgfTsKCiAgSmVkLnNwcmludGYgPSBmdW5jdGlvbiAoIGZtdCwgYXJncyApIHsKICAgIGlmICgge30udG9TdHJpbmcuY2FsbCggYXJncyApID09ICdbb2JqZWN0IEFycmF5XScgKSB7CiAgICAgIHJldHVybiB2c3ByaW50ZiggZm10LCBbXS5zbGljZS5jYWxsKGFyZ3MpICk7CiAgICB9CiAgICByZXR1cm4gc3ByaW50Zi5hcHBseSh0aGlzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykgKTsKICB9OwoKICBKZWQucHJvdG90eXBlLnNwcmludGYgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gSmVkLnNwcmludGYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9OwogIC8vIEVORCBzcHJpbnRmIEltcGxlbWVudGF0aW9uCgogIC8vIFN0YXJ0IHRoZSBQbHVyYWwgZm9ybXMgc2VjdGlvbgogIC8vIFRoaXMgaXMgYSBmdWxsIHBsdXJhbCBmb3JtIGV4cHJlc3Npb24gcGFyc2VyLiBJdCBpcyB1c2VkIHRvIGF2b2lkCiAgLy8gcnVubmluZyAnZXZhbCcgb3IgJ25ldyBGdW5jdGlvbicgZGlyZWN0bHkgYWdhaW5zdCB0aGUgcGx1cmFsCiAgLy8gZm9ybXMuCiAgLy8KICAvLyBUaGlzIGNhbiBiZSBpbXBvcnRhbnQgaWYgeW91IGdldCB0cmFuc2xhdGlvbnMgZG9uZSB0aHJvdWdoIGEgM3JkCiAgLy8gcGFydHkgdmVuZG9yLiBJIGVuY291cmFnZSB5b3UgdG8gdXNlIHRoaXMgaW5zdGVhZCwgaG93ZXZlciwgSQogIC8vIGFsc28gd2lsbCBwcm92aWRlIGEgJ3ByZWNvbXBpbGVyJyB0aGF0IHlvdSBjYW4gdXNlIGF0IGJ1aWxkIHRpbWUKICAvLyB0byBvdXRwdXQgdmFsaWQvc2FmZSBmdW5jdGlvbiByZXByZXNlbnRhdGlvbnMgb2YgdGhlIHBsdXJhbCBmb3JtCiAgLy8gZXhwcmVzc2lvbnMuIFRoaXMgbWVhbnMgeW91IGNhbiBidWlsZCB0aGlzIGNvZGUgb3V0IGZvciB0aGUgbW9zdAogIC8vIHBhcnQuCiAgSmVkLlBGID0ge307CgogIEplZC5QRi5wYXJzZSA9IGZ1bmN0aW9uICggcCApIHsKICAgIHZhciBwbHVyYWxfc3RyID0gSmVkLlBGLmV4dHJhY3RQbHVyYWxFeHByKCBwICk7CiAgICByZXR1cm4gSmVkLlBGLnBhcnNlci5wYXJzZS5jYWxsKEplZC5QRi5wYXJzZXIsIHBsdXJhbF9zdHIpOwogIH07CgogIEplZC5QRi5jb21waWxlID0gZnVuY3Rpb24gKCBwICkgewogICAgLy8gSGFuZGxlIHRydWVzIGFuZCBmYWxzZXMgYXMgMCBhbmQgMQogICAgZnVuY3Rpb24gaW1wbHkoIHZhbCApIHsKICAgICAgcmV0dXJuICh2YWwgPT09IHRydWUgPyAxIDogdmFsID8gdmFsIDogMCk7CiAgICB9CgogICAgdmFyIGFzdCA9IEplZC5QRi5wYXJzZSggcCApOwogICAgcmV0dXJuIGZ1bmN0aW9uICggbiApIHsKICAgICAgcmV0dXJuIGltcGx5KCBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdCApKCBuICkgKTsKICAgIH07CiAgfTsKCiAgSmVkLlBGLmludGVycHJldGVyID0gZnVuY3Rpb24gKCBhc3QgKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCBuICkgewogICAgICB2YXIgcmVzOwogICAgICBzd2l0Y2ggKCBhc3QudHlwZSApIHsKICAgICAgICBjYXNlICdHUk9VUCc6CiAgICAgICAgICByZXR1cm4gSmVkLlBGLmludGVycHJldGVyKCBhc3QuZXhwciApKCBuICk7CiAgICAgICAgY2FzZSAnVEVSTkFSWSc6CiAgICAgICAgICBpZiAoIEplZC5QRi5pbnRlcnByZXRlciggYXN0LmV4cHIgKSggbiApICkgewogICAgICAgICAgICByZXR1cm4gSmVkLlBGLmludGVycHJldGVyKCBhc3QudHJ1dGh5ICkoIG4gKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5mYWxzZXkgKSggbiApOwogICAgICAgIGNhc2UgJ09SJzoKICAgICAgICAgIHJldHVybiBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5sZWZ0ICkoIG4gKSB8fCBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5yaWdodCApKCBuICk7CiAgICAgICAgY2FzZSAnQU5EJzoKICAgICAgICAgIHJldHVybiBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5sZWZ0ICkoIG4gKSAmJiBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5yaWdodCApKCBuICk7CiAgICAgICAgY2FzZSAnTFQnOgogICAgICAgICAgcmV0dXJuIEplZC5QRi5pbnRlcnByZXRlciggYXN0LmxlZnQgKSggbiApIDwgSmVkLlBGLmludGVycHJldGVyKCBhc3QucmlnaHQgKSggbiApOwogICAgICAgIGNhc2UgJ0dUJzoKICAgICAgICAgIHJldHVybiBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5sZWZ0ICkoIG4gKSA+IEplZC5QRi5pbnRlcnByZXRlciggYXN0LnJpZ2h0ICkoIG4gKTsKICAgICAgICBjYXNlICdMVEUnOgogICAgICAgICAgcmV0dXJuIEplZC5QRi5pbnRlcnByZXRlciggYXN0LmxlZnQgKSggbiApIDw9IEplZC5QRi5pbnRlcnByZXRlciggYXN0LnJpZ2h0ICkoIG4gKTsKICAgICAgICBjYXNlICdHVEUnOgogICAgICAgICAgcmV0dXJuIEplZC5QRi5pbnRlcnByZXRlciggYXN0LmxlZnQgKSggbiApID49IEplZC5QRi5pbnRlcnByZXRlciggYXN0LnJpZ2h0ICkoIG4gKTsKICAgICAgICBjYXNlICdFUSc6CiAgICAgICAgICByZXR1cm4gSmVkLlBGLmludGVycHJldGVyKCBhc3QubGVmdCApKCBuICkgPT0gSmVkLlBGLmludGVycHJldGVyKCBhc3QucmlnaHQgKSggbiApOwogICAgICAgIGNhc2UgJ05FUSc6CiAgICAgICAgICByZXR1cm4gSmVkLlBGLmludGVycHJldGVyKCBhc3QubGVmdCApKCBuICkgIT0gSmVkLlBGLmludGVycHJldGVyKCBhc3QucmlnaHQgKSggbiApOwogICAgICAgIGNhc2UgJ01PRCc6CiAgICAgICAgICByZXR1cm4gSmVkLlBGLmludGVycHJldGVyKCBhc3QubGVmdCApKCBuICkgJSBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5yaWdodCApKCBuICk7CiAgICAgICAgY2FzZSAnVkFSJzoKICAgICAgICAgIHJldHVybiBuOwogICAgICAgIGNhc2UgJ05VTSc6CiAgICAgICAgICByZXR1cm4gYXN0LnZhbDsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIFRva2VuIGZvdW5kLiIpOwogICAgICB9CiAgICB9OwogIH07CgogIEplZC5QRi5leHRyYWN0UGx1cmFsRXhwciA9IGZ1bmN0aW9uICggcCApIHsKICAgIC8vIHRyaW0gZmlyc3QKICAgIHAgPSBwLnJlcGxhY2UoL15cc1xzKi8sICcnKS5yZXBsYWNlKC9cc1xzKiQvLCAnJyk7CgogICAgaWYgKCEgLztccyokLy50ZXN0KHApKSB7CiAgICAgIHAgPSBwLmNvbmNhdCgnOycpOwogICAgfQoKICAgIHZhciBucGx1cmFsc19yZSA9IC9ucGx1cmFsc1w9KFxkKyk7LywKICAgICAgICBwbHVyYWxfcmUgPSAvcGx1cmFsXD0oLiopOy8sCiAgICAgICAgbnBsdXJhbHNfbWF0Y2hlcyA9IHAubWF0Y2goIG5wbHVyYWxzX3JlICksCiAgICAgICAgcmVzID0ge30sCiAgICAgICAgcGx1cmFsX21hdGNoZXM7CgogICAgLy8gRmluZCB0aGUgbnBsdXJhbHMgbnVtYmVyCiAgICBpZiAoIG5wbHVyYWxzX21hdGNoZXMubGVuZ3RoID4gMSApIHsKICAgICAgcmVzLm5wbHVyYWxzID0gbnBsdXJhbHNfbWF0Y2hlc1sxXTsKICAgIH0KICAgIGVsc2UgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ25wbHVyYWxzIG5vdCBmb3VuZCBpbiBwbHVyYWxfZm9ybXMgc3RyaW5nOiAnICsgcCApOwogICAgfQoKICAgIC8vIHJlbW92ZSB0aGF0IGRhdGEgdG8gZ2V0IHRvIHRoZSBmb3JtdWxhCiAgICBwID0gcC5yZXBsYWNlKCBucGx1cmFsc19yZSwgIiIgKTsKICAgIHBsdXJhbF9tYXRjaGVzID0gcC5tYXRjaCggcGx1cmFsX3JlICk7CgogICAgaWYgKCEoIHBsdXJhbF9tYXRjaGVzICYmIHBsdXJhbF9tYXRjaGVzLmxlbmd0aCA+IDEgKSApIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdgcGx1cmFsYCBleHByZXNzaW9uIG5vdCBmb3VuZDogJyArIHApOwogICAgfQogICAgcmV0dXJuIHBsdXJhbF9tYXRjaGVzWyAxIF07CiAgfTsKCiAgLyogSmlzb24gZ2VuZXJhdGVkIHBhcnNlciAqLwogIEplZC5QRi5wYXJzZXIgPSAoZnVuY3Rpb24oKXsKCnZhciBwYXJzZXIgPSB7dHJhY2U6IGZ1bmN0aW9uIHRyYWNlKCkgeyB9LAp5eToge30sCnN5bWJvbHNfOiB7ImVycm9yIjoyLCJleHByZXNzaW9ucyI6MywiZSI6NCwiRU9GIjo1LCI/Ijo2LCI6Ijo3LCJ8fCI6OCwiJiYiOjksIjwiOjEwLCI8PSI6MTEsIj4iOjEyLCI+PSI6MTMsIiE9IjoxNCwiPT0iOjE1LCIlIjoxNiwiKCI6MTcsIikiOjE4LCJuIjoxOSwiTlVNQkVSIjoyMCwiJGFjY2VwdCI6MCwiJGVuZCI6MX0sCnRlcm1pbmFsc186IHsyOiJlcnJvciIsNToiRU9GIiw2OiI/Iiw3OiI6Iiw4OiJ8fCIsOToiJiYiLDEwOiI8IiwxMToiPD0iLDEyOiI+IiwxMzoiPj0iLDE0OiIhPSIsMTU6Ij09IiwxNjoiJSIsMTc6IigiLDE4OiIpIiwxOToibiIsMjA6Ik5VTUJFUiJ9LApwcm9kdWN0aW9uc186IFswLFszLDJdLFs0LDVdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDFdLFs0LDFdXSwKcGVyZm9ybUFjdGlvbjogZnVuY3Rpb24gYW5vbnltb3VzKHl5dGV4dCx5eWxlbmcseXlsaW5lbm8seXkseXlzdGF0ZSwkJCxfJCkgewoKdmFyICQwID0gJCQubGVuZ3RoIC0gMTsKc3dpdGNoICh5eXN0YXRlKSB7CmNhc2UgMTogcmV0dXJuIHsgdHlwZSA6ICdHUk9VUCcsIGV4cHI6ICQkWyQwLTFdIH07IApicmVhazsKY2FzZSAyOnRoaXMuJCA9IHsgdHlwZTogJ1RFUk5BUlknLCBleHByOiAkJFskMC00XSwgdHJ1dGh5IDogJCRbJDAtMl0sIGZhbHNleTogJCRbJDBdIH07IApicmVhazsKY2FzZSAzOnRoaXMuJCA9IHsgdHlwZTogIk9SIiwgbGVmdDogJCRbJDAtMl0sIHJpZ2h0OiAkJFskMF0gfTsKYnJlYWs7CmNhc2UgNDp0aGlzLiQgPSB7IHR5cGU6ICJBTkQiLCBsZWZ0OiAkJFskMC0yXSwgcmlnaHQ6ICQkWyQwXSB9OwpicmVhazsKY2FzZSA1OnRoaXMuJCA9IHsgdHlwZTogJ0xUJywgbGVmdDogJCRbJDAtMl0sIHJpZ2h0OiAkJFskMF0gfTsgCmJyZWFrOwpjYXNlIDY6dGhpcy4kID0geyB0eXBlOiAnTFRFJywgbGVmdDogJCRbJDAtMl0sIHJpZ2h0OiAkJFskMF0gfTsKYnJlYWs7CmNhc2UgNzp0aGlzLiQgPSB7IHR5cGU6ICdHVCcsIGxlZnQ6ICQkWyQwLTJdLCByaWdodDogJCRbJDBdIH07CmJyZWFrOwpjYXNlIDg6dGhpcy4kID0geyB0eXBlOiAnR1RFJywgbGVmdDogJCRbJDAtMl0sIHJpZ2h0OiAkJFskMF0gfTsKYnJlYWs7CmNhc2UgOTp0aGlzLiQgPSB7IHR5cGU6ICdORVEnLCBsZWZ0OiAkJFskMC0yXSwgcmlnaHQ6ICQkWyQwXSB9OwpicmVhazsKY2FzZSAxMDp0aGlzLiQgPSB7IHR5cGU6ICdFUScsIGxlZnQ6ICQkWyQwLTJdLCByaWdodDogJCRbJDBdIH07CmJyZWFrOwpjYXNlIDExOnRoaXMuJCA9IHsgdHlwZTogJ01PRCcsIGxlZnQ6ICQkWyQwLTJdLCByaWdodDogJCRbJDBdIH07CmJyZWFrOwpjYXNlIDEyOnRoaXMuJCA9IHsgdHlwZTogJ0dST1VQJywgZXhwcjogJCRbJDAtMV0gfTsgCmJyZWFrOwpjYXNlIDEzOnRoaXMuJCA9IHsgdHlwZTogJ1ZBUicgfTsgCmJyZWFrOwpjYXNlIDE0OnRoaXMuJCA9IHsgdHlwZTogJ05VTScsIHZhbDogTnVtYmVyKHl5dGV4dCkgfTsgCmJyZWFrOwp9Cn0sCnRhYmxlOiBbezM6MSw0OjIsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHsxOlszXX0sezU6WzEsNl0sNjpbMSw3XSw4OlsxLDhdLDk6WzEsOV0sMTA6WzEsMTBdLDExOlsxLDExXSwxMjpbMSwxMl0sMTM6WzEsMTNdLDE0OlsxLDE0XSwxNTpbMSwxNV0sMTY6WzEsMTZdfSx7NDoxNywxNzpbMSwzXSwxOTpbMSw0XSwyMDpbMSw1XX0sezU6WzIsMTNdLDY6WzIsMTNdLDc6WzIsMTNdLDg6WzIsMTNdLDk6WzIsMTNdLDEwOlsyLDEzXSwxMTpbMiwxM10sMTI6WzIsMTNdLDEzOlsyLDEzXSwxNDpbMiwxM10sMTU6WzIsMTNdLDE2OlsyLDEzXSwxODpbMiwxM119LHs1OlsyLDE0XSw2OlsyLDE0XSw3OlsyLDE0XSw4OlsyLDE0XSw5OlsyLDE0XSwxMDpbMiwxNF0sMTE6WzIsMTRdLDEyOlsyLDE0XSwxMzpbMiwxNF0sMTQ6WzIsMTRdLDE1OlsyLDE0XSwxNjpbMiwxNF0sMTg6WzIsMTRdfSx7MTpbMiwxXX0sezQ6MTgsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHs0OjE5LDE3OlsxLDNdLDE5OlsxLDRdLDIwOlsxLDVdfSx7NDoyMCwxNzpbMSwzXSwxOTpbMSw0XSwyMDpbMSw1XX0sezQ6MjEsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHs0OjIyLDE3OlsxLDNdLDE5OlsxLDRdLDIwOlsxLDVdfSx7NDoyMywxNzpbMSwzXSwxOTpbMSw0XSwyMDpbMSw1XX0sezQ6MjQsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHs0OjI1LDE3OlsxLDNdLDE5OlsxLDRdLDIwOlsxLDVdfSx7NDoyNiwxNzpbMSwzXSwxOTpbMSw0XSwyMDpbMSw1XX0sezQ6MjcsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHs2OlsxLDddLDg6WzEsOF0sOTpbMSw5XSwxMDpbMSwxMF0sMTE6WzEsMTFdLDEyOlsxLDEyXSwxMzpbMSwxM10sMTQ6WzEsMTRdLDE1OlsxLDE1XSwxNjpbMSwxNl0sMTg6WzEsMjhdfSx7NjpbMSw3XSw3OlsxLDI5XSw4OlsxLDhdLDk6WzEsOV0sMTA6WzEsMTBdLDExOlsxLDExXSwxMjpbMSwxMl0sMTM6WzEsMTNdLDE0OlsxLDE0XSwxNTpbMSwxNV0sMTY6WzEsMTZdfSx7NTpbMiwzXSw2OlsyLDNdLDc6WzIsM10sODpbMiwzXSw5OlsxLDldLDEwOlsxLDEwXSwxMTpbMSwxMV0sMTI6WzEsMTJdLDEzOlsxLDEzXSwxNDpbMSwxNF0sMTU6WzEsMTVdLDE2OlsxLDE2XSwxODpbMiwzXX0sezU6WzIsNF0sNjpbMiw0XSw3OlsyLDRdLDg6WzIsNF0sOTpbMiw0XSwxMDpbMSwxMF0sMTE6WzEsMTFdLDEyOlsxLDEyXSwxMzpbMSwxM10sMTQ6WzEsMTRdLDE1OlsxLDE1XSwxNjpbMSwxNl0sMTg6WzIsNF19LHs1OlsyLDVdLDY6WzIsNV0sNzpbMiw1XSw4OlsyLDVdLDk6WzIsNV0sMTA6WzIsNV0sMTE6WzIsNV0sMTI6WzIsNV0sMTM6WzIsNV0sMTQ6WzIsNV0sMTU6WzIsNV0sMTY6WzEsMTZdLDE4OlsyLDVdfSx7NTpbMiw2XSw2OlsyLDZdLDc6WzIsNl0sODpbMiw2XSw5OlsyLDZdLDEwOlsyLDZdLDExOlsyLDZdLDEyOlsyLDZdLDEzOlsyLDZdLDE0OlsyLDZdLDE1OlsyLDZdLDE2OlsxLDE2XSwxODpbMiw2XX0sezU6WzIsN10sNjpbMiw3XSw3OlsyLDddLDg6WzIsN10sOTpbMiw3XSwxMDpbMiw3XSwxMTpbMiw3XSwxMjpbMiw3XSwxMzpbMiw3XSwxNDpbMiw3XSwxNTpbMiw3XSwxNjpbMSwxNl0sMTg6WzIsN119LHs1OlsyLDhdLDY6WzIsOF0sNzpbMiw4XSw4OlsyLDhdLDk6WzIsOF0sMTA6WzIsOF0sMTE6WzIsOF0sMTI6WzIsOF0sMTM6WzIsOF0sMTQ6WzIsOF0sMTU6WzIsOF0sMTY6WzEsMTZdLDE4OlsyLDhdfSx7NTpbMiw5XSw2OlsyLDldLDc6WzIsOV0sODpbMiw5XSw5OlsyLDldLDEwOlsyLDldLDExOlsyLDldLDEyOlsyLDldLDEzOlsyLDldLDE0OlsyLDldLDE1OlsyLDldLDE2OlsxLDE2XSwxODpbMiw5XX0sezU6WzIsMTBdLDY6WzIsMTBdLDc6WzIsMTBdLDg6WzIsMTBdLDk6WzIsMTBdLDEwOlsyLDEwXSwxMTpbMiwxMF0sMTI6WzIsMTBdLDEzOlsyLDEwXSwxNDpbMiwxMF0sMTU6WzIsMTBdLDE2OlsxLDE2XSwxODpbMiwxMF19LHs1OlsyLDExXSw2OlsyLDExXSw3OlsyLDExXSw4OlsyLDExXSw5OlsyLDExXSwxMDpbMiwxMV0sMTE6WzIsMTFdLDEyOlsyLDExXSwxMzpbMiwxMV0sMTQ6WzIsMTFdLDE1OlsyLDExXSwxNjpbMiwxMV0sMTg6WzIsMTFdfSx7NTpbMiwxMl0sNjpbMiwxMl0sNzpbMiwxMl0sODpbMiwxMl0sOTpbMiwxMl0sMTA6WzIsMTJdLDExOlsyLDEyXSwxMjpbMiwxMl0sMTM6WzIsMTJdLDE0OlsyLDEyXSwxNTpbMiwxMl0sMTY6WzIsMTJdLDE4OlsyLDEyXX0sezQ6MzAsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHs1OlsyLDJdLDY6WzEsN10sNzpbMiwyXSw4OlsxLDhdLDk6WzEsOV0sMTA6WzEsMTBdLDExOlsxLDExXSwxMjpbMSwxMl0sMTM6WzEsMTNdLDE0OlsxLDE0XSwxNTpbMSwxNV0sMTY6WzEsMTZdLDE4OlsyLDJdfV0sCmRlZmF1bHRBY3Rpb25zOiB7NjpbMiwxXX0sCnBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7CiAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTsKfSwKcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgc3RhY2sgPSBbMF0sCiAgICAgICAgdnN0YWNrID0gW251bGxdLCAvLyBzZW1hbnRpYyB2YWx1ZSBzdGFjawogICAgICAgIGxzdGFjayA9IFtdLCAvLyBsb2NhdGlvbiBzdGFjawogICAgICAgIHRhYmxlID0gdGhpcy50YWJsZSwKICAgICAgICB5eXRleHQgPSAnJywKICAgICAgICB5eWxpbmVubyA9IDAsCiAgICAgICAgeXlsZW5nID0gMCwKICAgICAgICByZWNvdmVyaW5nID0gMCwKICAgICAgICBURVJST1IgPSAyLAogICAgICAgIEVPRiA9IDE7CgogICAgLy90aGlzLnJlZHVjdGlvbkNvdW50ID0gdGhpcy5zaGlmdENvdW50ID0gMDsKCiAgICB0aGlzLmxleGVyLnNldElucHV0KGlucHV0KTsKICAgIHRoaXMubGV4ZXIueXkgPSB0aGlzLnl5OwogICAgdGhpcy55eS5sZXhlciA9IHRoaXMubGV4ZXI7CiAgICBpZiAodHlwZW9mIHRoaXMubGV4ZXIueXlsbG9jID09ICd1bmRlZmluZWQnKQogICAgICAgIHRoaXMubGV4ZXIueXlsbG9jID0ge307CiAgICB2YXIgeXlsb2MgPSB0aGlzLmxleGVyLnl5bGxvYzsKICAgIGxzdGFjay5wdXNoKHl5bG9jKTsKCiAgICBpZiAodHlwZW9mIHRoaXMueXkucGFyc2VFcnJvciA9PT0gJ2Z1bmN0aW9uJykKICAgICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0aGlzLnl5LnBhcnNlRXJyb3I7CgogICAgZnVuY3Rpb24gcG9wU3RhY2sgKG4pIHsKICAgICAgICBzdGFjay5sZW5ndGggPSBzdGFjay5sZW5ndGggLSAyKm47CiAgICAgICAgdnN0YWNrLmxlbmd0aCA9IHZzdGFjay5sZW5ndGggLSBuOwogICAgICAgIGxzdGFjay5sZW5ndGggPSBsc3RhY2subGVuZ3RoIC0gbjsKICAgIH0KCiAgICBmdW5jdGlvbiBsZXgoKSB7CiAgICAgICAgdmFyIHRva2VuOwogICAgICAgIHRva2VuID0gc2VsZi5sZXhlci5sZXgoKSB8fCAxOyAvLyAkZW5kID0gMQogICAgICAgIC8vIGlmIHRva2VuIGlzbid0IGl0cyBudW1lcmljIHZhbHVlLCBjb252ZXJ0CiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gJ251bWJlcicpIHsKICAgICAgICAgICAgdG9rZW4gPSBzZWxmLnN5bWJvbHNfW3Rva2VuXSB8fCB0b2tlbjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRva2VuOwogICAgfQoKICAgIHZhciBzeW1ib2wsIHByZUVycm9yU3ltYm9sLCBzdGF0ZSwgYWN0aW9uLCBhLCByLCB5eXZhbD17fSxwLGxlbixuZXdTdGF0ZSwgZXhwZWN0ZWQ7CiAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgIC8vIHJldHJlaXZlIHN0YXRlIG51bWJlciBmcm9tIHRvcCBvZiBzdGFjawogICAgICAgIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoLTFdOwoKICAgICAgICAvLyB1c2UgZGVmYXVsdCBhY3Rpb25zIGlmIGF2YWlsYWJsZQogICAgICAgIGlmICh0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXSkgewogICAgICAgICAgICBhY3Rpb24gPSB0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoc3ltYm9sID09IG51bGwpCiAgICAgICAgICAgICAgICBzeW1ib2wgPSBsZXgoKTsKICAgICAgICAgICAgLy8gcmVhZCBhY3Rpb24gZm9yIGN1cnJlbnQgc3RhdGUgYW5kIGZpcnN0IGlucHV0CiAgICAgICAgICAgIGFjdGlvbiA9IHRhYmxlW3N0YXRlXSAmJiB0YWJsZVtzdGF0ZV1bc3ltYm9sXTsKICAgICAgICB9CgogICAgICAgIC8vIGhhbmRsZSBwYXJzZSBlcnJvcgogICAgICAgIF9oYW5kbGVfZXJyb3I6CiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICd1bmRlZmluZWQnIHx8ICFhY3Rpb24ubGVuZ3RoIHx8ICFhY3Rpb25bMF0pIHsKCiAgICAgICAgICAgIGlmICghcmVjb3ZlcmluZykgewogICAgICAgICAgICAgICAgLy8gUmVwb3J0IGVycm9yCiAgICAgICAgICAgICAgICBleHBlY3RlZCA9IFtdOwogICAgICAgICAgICAgICAgZm9yIChwIGluIHRhYmxlW3N0YXRlXSkgaWYgKHRoaXMudGVybWluYWxzX1twXSAmJiBwID4gMikgewogICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkLnB1c2goIiciK3RoaXMudGVybWluYWxzX1twXSsiJyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGVyclN0ciA9ICcnOwogICAgICAgICAgICAgICAgaWYgKHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gJ1BhcnNlIGVycm9yIG9uIGxpbmUgJysoeXlsaW5lbm8rMSkrIjpcbiIrdGhpcy5sZXhlci5zaG93UG9zaXRpb24oKSsiXG5FeHBlY3RpbmcgIitleHBlY3RlZC5qb2luKCcsICcpICsgIiwgZ290ICciICsgdGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0rICInIjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gJ1BhcnNlIGVycm9yIG9uIGxpbmUgJysoeXlsaW5lbm8rMSkrIjogVW5leHBlY3RlZCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzeW1ib2wgPT0gMSAvKkVPRiovID8gImVuZCBvZiBpbnB1dCIgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCInIisodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSsiJyIpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMucGFyc2VFcnJvcihlcnJTdHIsCiAgICAgICAgICAgICAgICAgICAge3RleHQ6IHRoaXMubGV4ZXIubWF0Y2gsIHRva2VuOiB0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wsIGxpbmU6IHRoaXMubGV4ZXIueXlsaW5lbm8sIGxvYzogeXlsb2MsIGV4cGVjdGVkOiBleHBlY3RlZH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBqdXN0IHJlY292ZXJlZCBmcm9tIGFub3RoZXIgZXJyb3IKICAgICAgICAgICAgaWYgKHJlY292ZXJpbmcgPT0gMykgewogICAgICAgICAgICAgICAgaWYgKHN5bWJvbCA9PSBFT0YpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyU3RyIHx8ICdQYXJzaW5nIGhhbHRlZC4nKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBkaXNjYXJkIGN1cnJlbnQgbG9va2FoZWFkIGFuZCBncmFiIGFub3RoZXIKICAgICAgICAgICAgICAgIHl5bGVuZyA9IHRoaXMubGV4ZXIueXlsZW5nOwogICAgICAgICAgICAgICAgeXl0ZXh0ID0gdGhpcy5sZXhlci55eXRleHQ7CiAgICAgICAgICAgICAgICB5eWxpbmVubyA9IHRoaXMubGV4ZXIueXlsaW5lbm87CiAgICAgICAgICAgICAgICB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jOwogICAgICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHRyeSB0byByZWNvdmVyIGZyb20gZXJyb3IKICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciBlcnJvciByZWNvdmVyeSBydWxlIGluIHRoaXMgc3RhdGUKICAgICAgICAgICAgICAgIGlmICgoVEVSUk9SLnRvU3RyaW5nKCkpIGluIHRhYmxlW3N0YXRlXSkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlID09IDApIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyU3RyIHx8ICdQYXJzaW5nIGhhbHRlZC4nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBvcFN0YWNrKDEpOwogICAgICAgICAgICAgICAgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGgtMV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHByZUVycm9yU3ltYm9sID0gc3ltYm9sOyAvLyBzYXZlIHRoZSBsb29rYWhlYWQgdG9rZW4KICAgICAgICAgICAgc3ltYm9sID0gVEVSUk9SOyAgICAgICAgIC8vIGluc2VydCBnZW5lcmljIGVycm9yIHN5bWJvbCBhcyBuZXcgbG9va2FoZWFkCiAgICAgICAgICAgIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoLTFdOwogICAgICAgICAgICBhY3Rpb24gPSB0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW1RFUlJPUl07CiAgICAgICAgICAgIHJlY292ZXJpbmcgPSAzOyAvLyBhbGxvdyAzIHJlYWwgc3ltYm9scyB0byBiZSBzaGlmdGVkIGJlZm9yZSByZXBvcnRpbmcgYSBuZXcgZXJyb3IKICAgICAgICB9CgogICAgICAgIC8vIHRoaXMgc2hvdWxkbid0IGhhcHBlbiwgdW5sZXNzIHJlc29sdmUgZGVmYXVsdHMgYXJlIG9mZgogICAgICAgIGlmIChhY3Rpb25bMF0gaW5zdGFuY2VvZiBBcnJheSAmJiBhY3Rpb24ubGVuZ3RoID4gMSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcnNlIEVycm9yOiBtdWx0aXBsZSBhY3Rpb25zIHBvc3NpYmxlIGF0IHN0YXRlOiAnK3N0YXRlKycsIHRva2VuOiAnK3N5bWJvbCk7CiAgICAgICAgfQoKICAgICAgICBzd2l0Y2ggKGFjdGlvblswXSkgewoKICAgICAgICAgICAgY2FzZSAxOiAvLyBzaGlmdAogICAgICAgICAgICAgICAgLy90aGlzLnNoaWZ0Q291bnQrKzsKCiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7CiAgICAgICAgICAgICAgICB2c3RhY2sucHVzaCh0aGlzLmxleGVyLnl5dGV4dCk7CiAgICAgICAgICAgICAgICBsc3RhY2sucHVzaCh0aGlzLmxleGVyLnl5bGxvYyk7CiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGFjdGlvblsxXSk7IC8vIHB1c2ggc3RhdGUKICAgICAgICAgICAgICAgIHN5bWJvbCA9IG51bGw7CiAgICAgICAgICAgICAgICBpZiAoIXByZUVycm9yU3ltYm9sKSB7IC8vIG5vcm1hbCBleGVjdXRpb24vbm8gZXJyb3IKICAgICAgICAgICAgICAgICAgICB5eWxlbmcgPSB0aGlzLmxleGVyLnl5bGVuZzsKICAgICAgICAgICAgICAgICAgICB5eXRleHQgPSB0aGlzLmxleGVyLnl5dGV4dDsKICAgICAgICAgICAgICAgICAgICB5eWxpbmVubyA9IHRoaXMubGV4ZXIueXlsaW5lbm87CiAgICAgICAgICAgICAgICAgICAgeXlsb2MgPSB0aGlzLmxleGVyLnl5bGxvYzsKICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3ZlcmluZyA+IDApCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY292ZXJpbmctLTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGVycm9yIGp1c3Qgb2NjdXJyZWQsIHJlc3VtZSBvbGQgbG9va2FoZWFkIGYvIGJlZm9yZSBlcnJvcgogICAgICAgICAgICAgICAgICAgIHN5bWJvbCA9IHByZUVycm9yU3ltYm9sOwogICAgICAgICAgICAgICAgICAgIHByZUVycm9yU3ltYm9sID0gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAyOiAvLyByZWR1Y2UKICAgICAgICAgICAgICAgIC8vdGhpcy5yZWR1Y3Rpb25Db3VudCsrOwoKICAgICAgICAgICAgICAgIGxlbiA9IHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMV07CgogICAgICAgICAgICAgICAgLy8gcGVyZm9ybSBzZW1hbnRpYyBhY3Rpb24KICAgICAgICAgICAgICAgIHl5dmFsLiQgPSB2c3RhY2tbdnN0YWNrLmxlbmd0aC1sZW5dOyAvLyBkZWZhdWx0IHRvICQkID0gJDEKICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgbG9jYXRpb24sIHVzZXMgZmlyc3QgdG9rZW4gZm9yIGZpcnN0cywgbGFzdCBmb3IgbGFzdHMKICAgICAgICAgICAgICAgIHl5dmFsLl8kID0gewogICAgICAgICAgICAgICAgICAgIGZpcnN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoLShsZW58fDEpXS5maXJzdF9saW5lLAogICAgICAgICAgICAgICAgICAgIGxhc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGgtMV0ubGFzdF9saW5lLAogICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGgtKGxlbnx8MSldLmZpcnN0X2NvbHVtbiwKICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGgtMV0ubGFzdF9jb2x1bW4KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwoeXl2YWwsIHl5dGV4dCwgeXlsZW5nLCB5eWxpbmVubywgdGhpcy55eSwgYWN0aW9uWzFdLCB2c3RhY2ssIGxzdGFjayk7CgogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIHBvcCBvZmYgc3RhY2sKICAgICAgICAgICAgICAgIGlmIChsZW4pIHsKICAgICAgICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKDAsLTEqbGVuKjIpOwogICAgICAgICAgICAgICAgICAgIHZzdGFjayA9IHZzdGFjay5zbGljZSgwLCAtMSpsZW4pOwogICAgICAgICAgICAgICAgICAgIGxzdGFjayA9IGxzdGFjay5zbGljZSgwLCAtMSpsZW4pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVswXSk7ICAgIC8vIHB1c2ggbm9udGVybWluYWwgKHJlZHVjZSkKICAgICAgICAgICAgICAgIHZzdGFjay5wdXNoKHl5dmFsLiQpOwogICAgICAgICAgICAgICAgbHN0YWNrLnB1c2goeXl2YWwuXyQpOwogICAgICAgICAgICAgICAgLy8gZ290byBuZXcgc3RhdGUgPSB0YWJsZVtTVEFURV1bTk9OVEVSTUlOQUxdCiAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHRhYmxlW3N0YWNrW3N0YWNrLmxlbmd0aC0yXV1bc3RhY2tbc3RhY2subGVuZ3RoLTFdXTsKICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV3U3RhdGUpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDM6IC8vIGFjY2VwdAogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgIH0KCiAgICByZXR1cm4gdHJ1ZTsKfX07LyogSmlzb24gZ2VuZXJhdGVkIGxleGVyICovCnZhciBsZXhlciA9IChmdW5jdGlvbigpewoKdmFyIGxleGVyID0gKHtFT0Y6MSwKcGFyc2VFcnJvcjpmdW5jdGlvbiBwYXJzZUVycm9yKHN0ciwgaGFzaCkgewogICAgICAgIGlmICh0aGlzLnl5LnBhcnNlRXJyb3IpIHsKICAgICAgICAgICAgdGhpcy55eS5wYXJzZUVycm9yKHN0ciwgaGFzaCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7CiAgICAgICAgfQogICAgfSwKc2V0SW5wdXQ6ZnVuY3Rpb24gKGlucHV0KSB7CiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDsKICAgICAgICB0aGlzLl9tb3JlID0gdGhpcy5fbGVzcyA9IHRoaXMuZG9uZSA9IGZhbHNlOwogICAgICAgIHRoaXMueXlsaW5lbm8gPSB0aGlzLnl5bGVuZyA9IDA7CiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoID0gJyc7CiAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjayA9IFsnSU5JVElBTCddOwogICAgICAgIHRoaXMueXlsbG9jID0ge2ZpcnN0X2xpbmU6MSxmaXJzdF9jb2x1bW46MCxsYXN0X2xpbmU6MSxsYXN0X2NvbHVtbjowfTsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0sCmlucHV0OmZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgY2ggPSB0aGlzLl9pbnB1dFswXTsKICAgICAgICB0aGlzLnl5dGV4dCs9Y2g7CiAgICAgICAgdGhpcy55eWxlbmcrKzsKICAgICAgICB0aGlzLm1hdGNoKz1jaDsKICAgICAgICB0aGlzLm1hdGNoZWQrPWNoOwogICAgICAgIHZhciBsaW5lcyA9IGNoLm1hdGNoKC9cbi8pOwogICAgICAgIGlmIChsaW5lcykgdGhpcy55eWxpbmVubysrOwogICAgICAgIHRoaXMuX2lucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UoMSk7CiAgICAgICAgcmV0dXJuIGNoOwogICAgfSwKdW5wdXQ6ZnVuY3Rpb24gKGNoKSB7CiAgICAgICAgdGhpcy5faW5wdXQgPSBjaCArIHRoaXMuX2lucHV0OwogICAgICAgIHJldHVybiB0aGlzOwogICAgfSwKbW9yZTpmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5fbW9yZSA9IHRydWU7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LApwYXN0SW5wdXQ6ZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBwYXN0ID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gdGhpcy5tYXRjaC5sZW5ndGgpOwogICAgICAgIHJldHVybiAocGFzdC5sZW5ndGggPiAyMCA/ICcuLi4nOicnKSArIHBhc3Quc3Vic3RyKC0yMCkucmVwbGFjZSgvXG4vZywgIiIpOwogICAgfSwKdXBjb21pbmdJbnB1dDpmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm1hdGNoOwogICAgICAgIGlmIChuZXh0Lmxlbmd0aCA8IDIwKSB7CiAgICAgICAgICAgIG5leHQgKz0gdGhpcy5faW5wdXQuc3Vic3RyKDAsIDIwLW5leHQubGVuZ3RoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIChuZXh0LnN1YnN0cigwLDIwKSsobmV4dC5sZW5ndGggPiAyMCA/ICcuLi4nOicnKSkucmVwbGFjZSgvXG4vZywgIiIpOwogICAgfSwKc2hvd1Bvc2l0aW9uOmZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgcHJlID0gdGhpcy5wYXN0SW5wdXQoKTsKICAgICAgICB2YXIgYyA9IG5ldyBBcnJheShwcmUubGVuZ3RoICsgMSkuam9pbigiLSIpOwogICAgICAgIHJldHVybiBwcmUgKyB0aGlzLnVwY29taW5nSW5wdXQoKSArICJcbiIgKyBjKyJeIjsKICAgIH0sCm5leHQ6ZnVuY3Rpb24gKCkgewogICAgICAgIGlmICh0aGlzLmRvbmUpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuRU9GOwogICAgICAgIH0KICAgICAgICBpZiAoIXRoaXMuX2lucHV0KSB0aGlzLmRvbmUgPSB0cnVlOwoKICAgICAgICB2YXIgdG9rZW4sCiAgICAgICAgICAgIG1hdGNoLAogICAgICAgICAgICBjb2wsCiAgICAgICAgICAgIGxpbmVzOwogICAgICAgIGlmICghdGhpcy5fbW9yZSkgewogICAgICAgICAgICB0aGlzLnl5dGV4dCA9ICcnOwogICAgICAgICAgICB0aGlzLm1hdGNoID0gJyc7CiAgICAgICAgfQogICAgICAgIHZhciBydWxlcyA9IHRoaXMuX2N1cnJlbnRSdWxlcygpOwogICAgICAgIGZvciAodmFyIGk9MDtpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgbWF0Y2ggPSB0aGlzLl9pbnB1dC5tYXRjaCh0aGlzLnJ1bGVzW3J1bGVzW2ldXSk7CiAgICAgICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICAgICAgbGluZXMgPSBtYXRjaFswXS5tYXRjaCgvXG4uKi9nKTsKICAgICAgICAgICAgICAgIGlmIChsaW5lcykgdGhpcy55eWxpbmVubyArPSBsaW5lcy5sZW5ndGg7CiAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHtmaXJzdF9saW5lOiB0aGlzLnl5bGxvYy5sYXN0X2xpbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8rMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyBsaW5lc1tsaW5lcy5sZW5ndGgtMV0ubGVuZ3RoLTEgOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiArIG1hdGNoWzBdLmxlbmd0aH0KICAgICAgICAgICAgICAgIHRoaXMueXl0ZXh0ICs9IG1hdGNoWzBdOwogICAgICAgICAgICAgICAgdGhpcy5tYXRjaCArPSBtYXRjaFswXTsKICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IG1hdGNoOwogICAgICAgICAgICAgICAgdGhpcy55eWxlbmcgPSB0aGlzLnl5dGV4dC5sZW5ndGg7CiAgICAgICAgICAgICAgICB0aGlzLl9tb3JlID0gZmFsc2U7CiAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKG1hdGNoWzBdLmxlbmd0aCk7CiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZWQgKz0gbWF0Y2hbMF07CiAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMucGVyZm9ybUFjdGlvbi5jYWxsKHRoaXMsIHRoaXMueXksIHRoaXMsIHJ1bGVzW2ldLHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGgtMV0pOwogICAgICAgICAgICAgICAgaWYgKHRva2VuKSByZXR1cm4gdG9rZW47CiAgICAgICAgICAgICAgICBlbHNlIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5faW5wdXQgPT09ICIiKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLnBhcnNlRXJyb3IoJ0xleGljYWwgZXJyb3Igb24gbGluZSAnKyh0aGlzLnl5bGluZW5vKzEpKycuIFVucmVjb2duaXplZCB0ZXh0LlxuJyt0aGlzLnNob3dQb3NpdGlvbigpLCAKICAgICAgICAgICAgICAgICAgICB7dGV4dDogIiIsIHRva2VuOiBudWxsLCBsaW5lOiB0aGlzLnl5bGluZW5vfSk7CiAgICAgICAgfQogICAgfSwKbGV4OmZ1bmN0aW9uIGxleCgpIHsKICAgICAgICB2YXIgciA9IHRoaXMubmV4dCgpOwogICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV4KCk7CiAgICAgICAgfQogICAgfSwKYmVnaW46ZnVuY3Rpb24gYmVnaW4oY29uZGl0aW9uKSB7CiAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjay5wdXNoKGNvbmRpdGlvbik7CiAgICB9LApwb3BTdGF0ZTpmdW5jdGlvbiBwb3BTdGF0ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFjay5wb3AoKTsKICAgIH0sCl9jdXJyZW50UnVsZXM6ZnVuY3Rpb24gX2N1cnJlbnRSdWxlcygpIHsKICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW3RoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGgtMV1dLnJ1bGVzOwogICAgfSwKdG9wU3RhdGU6ZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoLTJdOwogICAgfSwKcHVzaFN0YXRlOmZ1bmN0aW9uIGJlZ2luKGNvbmRpdGlvbikgewogICAgICAgIHRoaXMuYmVnaW4oY29uZGl0aW9uKTsKICAgIH19KTsKbGV4ZXIucGVyZm9ybUFjdGlvbiA9IGZ1bmN0aW9uIGFub255bW91cyh5eSx5eV8sJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucyxZWV9TVEFSVCkgewoKdmFyIFlZU1RBVEU9WVlfU1RBUlQ7CnN3aXRjaCgkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zKSB7CmNhc2UgMDovKiBza2lwIHdoaXRlc3BhY2UgKi8KYnJlYWs7CmNhc2UgMTpyZXR1cm4gMjAKYnJlYWs7CmNhc2UgMjpyZXR1cm4gMTkKYnJlYWs7CmNhc2UgMzpyZXR1cm4gOApicmVhazsKY2FzZSA0OnJldHVybiA5CmJyZWFrOwpjYXNlIDU6cmV0dXJuIDYKYnJlYWs7CmNhc2UgNjpyZXR1cm4gNwpicmVhazsKY2FzZSA3OnJldHVybiAxMQpicmVhazsKY2FzZSA4OnJldHVybiAxMwpicmVhazsKY2FzZSA5OnJldHVybiAxMApicmVhazsKY2FzZSAxMDpyZXR1cm4gMTIKYnJlYWs7CmNhc2UgMTE6cmV0dXJuIDE0CmJyZWFrOwpjYXNlIDEyOnJldHVybiAxNQpicmVhazsKY2FzZSAxMzpyZXR1cm4gMTYKYnJlYWs7CmNhc2UgMTQ6cmV0dXJuIDE3CmJyZWFrOwpjYXNlIDE1OnJldHVybiAxOApicmVhazsKY2FzZSAxNjpyZXR1cm4gNQpicmVhazsKY2FzZSAxNzpyZXR1cm4gJ0lOVkFMSUQnCmJyZWFrOwp9Cn07CmxleGVyLnJ1bGVzID0gWy9eXHMrLywvXlswLTldKyhcLlswLTldKyk/XGIvLC9eblxiLywvXlx8XHwvLC9eJiYvLC9eXD8vLC9eOi8sL148PS8sL14+PS8sL148LywvXj4vLC9eIT0vLC9ePT0vLC9eJS8sL15cKC8sL15cKS8sL14kLywvXi4vXTsKbGV4ZXIuY29uZGl0aW9ucyA9IHsiSU5JVElBTCI6eyJydWxlcyI6WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTddLCJpbmNsdXNpdmUiOnRydWV9fTtyZXR1cm4gbGV4ZXI7fSkoKQpwYXJzZXIubGV4ZXIgPSBsZXhlcjsKcmV0dXJuIHBhcnNlcjsKfSkoKTsKLy8gRW5kIHBhcnNlcgoKICAvLyBIYW5kbGUgbm9kZSwgYW1kLCBhbmQgZ2xvYmFsIHN5c3RlbXMKICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7CiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsKICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gSmVkOwogICAgfQogICAgZXhwb3J0cy5KZWQgPSBKZWQ7CiAgfQogIGVsc2UgewogICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgewogICAgICBkZWZpbmUoJ2plZCcsIFtdLGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBKZWQ7CiAgICAgIH0pOwogICAgfQogICAgLy8gTGVhayBhIGdsb2JhbCByZWdhcmRsZXNzIG9mIG1vZHVsZSBzeXN0ZW0KICAgIHJvb3RbJ0plZCddID0gSmVkOwogIH0KCn0pKHRoaXMpOwoKLyoKICogVGhpcyBmaWxlIGNhbiBiZSB1c2VkIGlmIG5vIGxvY2FsZSBzdXBwb3J0IGlzIHJlcXVpcmVkLgogKi8KKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CiAgICBkZWZpbmUoImxvY2FsZXMiLCBbJ2plZCddLCBmdW5jdGlvbiAoSmVkKSB7CiAgICAgICAgdmFyIHRyYW5zbGF0aW9ucyA9IHsKICAgICAgICAgICAgImRvbWFpbiI6ICJjb252ZXJzZSIsCiAgICAgICAgICAgICJsb2NhbGVfZGF0YSI6IHsKICAgICAgICAgICAgICAgICJjb252ZXJzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiIjogewogICAgICAgICAgICAgICAgICAgICAgICAiZG9tYWluIjogImNvbnZlcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImxhbmciOiAiZW4iLAogICAgICAgICAgICAgICAgICAgICAgICAicGx1cmFsX2Zvcm1zIjogIm5wbHVyYWxzPTI7IHBsdXJhbD0obiAhPSAxKTsiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICByb290LmxvY2FsZXMgPSB7ICdlbic6IG5ldyBKZWQodHJhbnNsYXRpb25zKSB9OwogICAgfSk7Cn0pKHRoaXMpOwoKLy8gICAgIFVuZGVyc2NvcmUuanMgMS42LjAKLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnCi8vICAgICAoYykgMjAwOS0yMDE0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzCi8vICAgICBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgoKKGZ1bmN0aW9uKCkgewoKICAvLyBCYXNlbGluZSBzZXR1cAogIC8vIC0tLS0tLS0tLS0tLS0tCgogIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci4KICB2YXIgcm9vdCA9IHRoaXM7CgogIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuCiAgdmFyIHByZXZpb3VzVW5kZXJzY29yZSA9IHJvb3QuXzsKCiAgLy8gRXN0YWJsaXNoIHRoZSBvYmplY3QgdGhhdCBnZXRzIHJldHVybmVkIHRvIGJyZWFrIG91dCBvZiBhIGxvb3AgaXRlcmF0aW9uLgogIHZhciBicmVha2VyID0ge307CgogIC8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246CiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlOwoKICAvLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy4KICB2YXIKICAgIHB1c2ggICAgICAgICAgICAgPSBBcnJheVByb3RvLnB1c2gsCiAgICBzbGljZSAgICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSwKICAgIGNvbmNhdCAgICAgICAgICAgPSBBcnJheVByb3RvLmNvbmNhdCwKICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZywKICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTsKCiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlCiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuCiAgdmFyCiAgICBuYXRpdmVGb3JFYWNoICAgICAgPSBBcnJheVByb3RvLmZvckVhY2gsCiAgICBuYXRpdmVNYXAgICAgICAgICAgPSBBcnJheVByb3RvLm1hcCwKICAgIG5hdGl2ZVJlZHVjZSAgICAgICA9IEFycmF5UHJvdG8ucmVkdWNlLAogICAgbmF0aXZlUmVkdWNlUmlnaHQgID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodCwKICAgIG5hdGl2ZUZpbHRlciAgICAgICA9IEFycmF5UHJvdG8uZmlsdGVyLAogICAgbmF0aXZlRXZlcnkgICAgICAgID0gQXJyYXlQcm90by5ldmVyeSwKICAgIG5hdGl2ZVNvbWUgICAgICAgICA9IEFycmF5UHJvdG8uc29tZSwKICAgIG5hdGl2ZUluZGV4T2YgICAgICA9IEFycmF5UHJvdG8uaW5kZXhPZiwKICAgIG5hdGl2ZUxhc3RJbmRleE9mICA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2YsCiAgICBuYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LAogICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsCiAgICBuYXRpdmVCaW5kICAgICAgICAgPSBGdW5jUHJvdG8uYmluZDsKCiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuCiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHsKICAgIGlmIChvYmogaW5zdGFuY2VvZiBfKSByZXR1cm4gb2JqOwogICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTsKICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7CiAgfTsKCiAgLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgKipOb2RlLmpzKiosIHdpdGgKICAvLyBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3IgdGhlIG9sZCBgcmVxdWlyZSgpYCBBUEkuIElmIHdlJ3JlIGluCiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0IHZpYSBhIHN0cmluZyBpZGVudGlmaWVyLAogIC8vIGZvciBDbG9zdXJlIENvbXBpbGVyICJhZHZhbmNlZCIgbW9kZS4KICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7CiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsKICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXzsKICAgIH0KICAgIGV4cG9ydHMuXyA9IF87CiAgfSBlbHNlIHsKICAgIHJvb3QuXyA9IF87CiAgfQoKICAvLyBDdXJyZW50IHZlcnNpb24uCiAgXy5WRVJTSU9OID0gJzEuNi4wJzsKCiAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC4KICAvLyBIYW5kbGVzIG9iamVjdHMgd2l0aCB0aGUgYnVpbHQtaW4gYGZvckVhY2hgLCBhcnJheXMsIGFuZCByYXcgb2JqZWN0cy4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZm9yRWFjaGAgaWYgYXZhaWxhYmxlLgogIHZhciBlYWNoID0gXy5lYWNoID0gXy5mb3JFYWNoID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gb2JqOwogICAgaWYgKG5hdGl2ZUZvckVhY2ggJiYgb2JqLmZvckVhY2ggPT09IG5hdGl2ZUZvckVhY2gpIHsKICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQpOwogICAgfSBlbHNlIGlmIChvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkgewogICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopID09PSBicmVha2VyKSByZXR1cm47CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleXNbaV1dLCBrZXlzW2ldLCBvYmopID09PSBicmVha2VyKSByZXR1cm47CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRvciB0byBlYWNoIGVsZW1lbnQuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYG1hcGAgaWYgYXZhaWxhYmxlLgogIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgdmFyIHJlc3VsdHMgPSBbXTsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdHM7CiAgICBpZiAobmF0aXZlTWFwICYmIG9iai5tYXAgPT09IG5hdGl2ZU1hcCkgcmV0dXJuIG9iai5tYXAoaXRlcmF0b3IsIGNvbnRleHQpOwogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICByZXN1bHRzLnB1c2goaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfTsKCiAgdmFyIHJlZHVjZUVycm9yID0gJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnOwoKICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsCiAgLy8gb3IgYGZvbGRsYC4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZWAgaWYgYXZhaWxhYmxlLgogIF8ucmVkdWNlID0gXy5mb2xkbCA9IF8uaW5qZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgbWVtbywgY29udGV4dCkgewogICAgdmFyIGluaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMjsKICAgIGlmIChvYmogPT0gbnVsbCkgb2JqID0gW107CiAgICBpZiAobmF0aXZlUmVkdWNlICYmIG9iai5yZWR1Y2UgPT09IG5hdGl2ZVJlZHVjZSkgewogICAgICBpZiAoY29udGV4dCkgaXRlcmF0b3IgPSBfLmJpbmQoaXRlcmF0b3IsIGNvbnRleHQpOwogICAgICByZXR1cm4gaW5pdGlhbCA/IG9iai5yZWR1Y2UoaXRlcmF0b3IsIG1lbW8pIDogb2JqLnJlZHVjZShpdGVyYXRvcik7CiAgICB9CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmICghaW5pdGlhbCkgewogICAgICAgIG1lbW8gPSB2YWx1ZTsKICAgICAgICBpbml0aWFsID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBtZW1vID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCBtZW1vLCB2YWx1ZSwgaW5kZXgsIGxpc3QpOwogICAgICB9CiAgICB9KTsKICAgIGlmICghaW5pdGlhbCkgdGhyb3cgbmV3IFR5cGVFcnJvcihyZWR1Y2VFcnJvcik7CiAgICByZXR1cm4gbWVtbzsKICB9OwoKICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgcmVkdWNlUmlnaHRgIGlmIGF2YWlsYWJsZS4KICBfLnJlZHVjZVJpZ2h0ID0gXy5mb2xkciA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIG1lbW8sIGNvbnRleHQpIHsKICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7CiAgICBpZiAob2JqID09IG51bGwpIG9iaiA9IFtdOwogICAgaWYgKG5hdGl2ZVJlZHVjZVJpZ2h0ICYmIG9iai5yZWR1Y2VSaWdodCA9PT0gbmF0aXZlUmVkdWNlUmlnaHQpIHsKICAgICAgaWYgKGNvbnRleHQpIGl0ZXJhdG9yID0gXy5iaW5kKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgICAgcmV0dXJuIGluaXRpYWwgPyBvYmoucmVkdWNlUmlnaHQoaXRlcmF0b3IsIG1lbW8pIDogb2JqLnJlZHVjZVJpZ2h0KGl0ZXJhdG9yKTsKICAgIH0KICAgIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoOwogICAgaWYgKGxlbmd0aCAhPT0gK2xlbmd0aCkgewogICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopOwogICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDsKICAgIH0KICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgaW5kZXggPSBrZXlzID8ga2V5c1stLWxlbmd0aF0gOiAtLWxlbmd0aDsKICAgICAgaWYgKCFpbml0aWFsKSB7CiAgICAgICAgbWVtbyA9IG9ialtpbmRleF07CiAgICAgICAgaW5pdGlhbCA9IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbWVtbyA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgbWVtbywgb2JqW2luZGV4XSwgaW5kZXgsIGxpc3QpOwogICAgICB9CiAgICB9KTsKICAgIGlmICghaW5pdGlhbCkgdGhyb3cgbmV3IFR5cGVFcnJvcihyZWR1Y2VFcnJvcik7CiAgICByZXR1cm4gbWVtbzsKICB9OwoKICAvLyBSZXR1cm4gdGhlIGZpcnN0IHZhbHVlIHdoaWNoIHBhc3NlcyBhIHRydXRoIHRlc3QuIEFsaWFzZWQgYXMgYGRldGVjdGAuCiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkgewogICAgdmFyIHJlc3VsdDsKICAgIGFueShvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkgewogICAgICAgIHJlc3VsdCA9IHZhbHVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgdGhhdCBwYXNzIGEgdHJ1dGggdGVzdC4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZmlsdGVyYCBpZiBhdmFpbGFibGUuCiAgLy8gQWxpYXNlZCBhcyBgc2VsZWN0YC4KICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHsKICAgIHZhciByZXN1bHRzID0gW107CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzOwogICAgaWYgKG5hdGl2ZUZpbHRlciAmJiBvYmouZmlsdGVyID09PSBuYXRpdmVGaWx0ZXIpIHJldHVybiBvYmouZmlsdGVyKHByZWRpY2F0ZSwgY29udGV4dCk7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSByZXN1bHRzLnB1c2godmFsdWUpOwogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0czsKICB9OwoKICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBmb3Igd2hpY2ggYSB0cnV0aCB0ZXN0IGZhaWxzLgogIF8ucmVqZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHsKICAgIHJldHVybiBfLmZpbHRlcihvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCk7CiAgICB9LCBjb250ZXh0KTsKICB9OwoKICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZXZlcnlgIGlmIGF2YWlsYWJsZS4KICAvLyBBbGlhc2VkIGFzIGBhbGxgLgogIF8uZXZlcnkgPSBfLmFsbCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7CiAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IF8uaWRlbnRpdHkpOwogICAgdmFyIHJlc3VsdCA9IHRydWU7CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7CiAgICBpZiAobmF0aXZlRXZlcnkgJiYgb2JqLmV2ZXJ5ID09PSBuYXRpdmVFdmVyeSkgcmV0dXJuIG9iai5ldmVyeShwcmVkaWNhdGUsIGNvbnRleHQpOwogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAoIShyZXN1bHQgPSByZXN1bHQgJiYgcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkpIHJldHVybiBicmVha2VyOwogICAgfSk7CiAgICByZXR1cm4gISFyZXN1bHQ7CiAgfTsKCiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHNvbWVgIGlmIGF2YWlsYWJsZS4KICAvLyBBbGlhc2VkIGFzIGBhbnlgLgogIHZhciBhbnkgPSBfLnNvbWUgPSBfLmFueSA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7CiAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IF8uaWRlbnRpdHkpOwogICAgdmFyIHJlc3VsdCA9IGZhbHNlOwogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0OwogICAgaWYgKG5hdGl2ZVNvbWUgJiYgb2JqLnNvbWUgPT09IG5hdGl2ZVNvbWUpIHJldHVybiBvYmouc29tZShwcmVkaWNhdGUsIGNvbnRleHQpOwogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAocmVzdWx0IHx8IChyZXN1bHQgPSBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSkgcmV0dXJuIGJyZWFrZXI7CiAgICB9KTsKICAgIHJldHVybiAhIXJlc3VsdDsKICB9OwoKICAvLyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5IG9yIG9iamVjdCBjb250YWlucyBhIGdpdmVuIHZhbHVlICh1c2luZyBgPT09YCkuCiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZWAuCiAgXy5jb250YWlucyA9IF8uaW5jbHVkZSA9IGZ1bmN0aW9uKG9iaiwgdGFyZ2V0KSB7CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiBmYWxzZTsKICAgIGlmIChuYXRpdmVJbmRleE9mICYmIG9iai5pbmRleE9mID09PSBuYXRpdmVJbmRleE9mKSByZXR1cm4gb2JqLmluZGV4T2YodGFyZ2V0KSAhPSAtMTsKICAgIHJldHVybiBhbnkob2JqLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUgPT09IHRhcmdldDsKICAgIH0pOwogIH07CgogIC8vIEludm9rZSBhIG1ldGhvZCAod2l0aCBhcmd1bWVudHMpIG9uIGV2ZXJ5IGl0ZW0gaW4gYSBjb2xsZWN0aW9uLgogIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHsKICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOwogICAgdmFyIGlzRnVuYyA9IF8uaXNGdW5jdGlvbihtZXRob2QpOwogICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgcmV0dXJuIChpc0Z1bmMgPyBtZXRob2QgOiB2YWx1ZVttZXRob2RdKS5hcHBseSh2YWx1ZSwgYXJncyk7CiAgICB9KTsKICB9OwoKICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBtYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LgogIF8ucGx1Y2sgPSBmdW5jdGlvbihvYmosIGtleSkgewogICAgcmV0dXJuIF8ubWFwKG9iaiwgXy5wcm9wZXJ0eShrZXkpKTsKICB9OwoKICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzCiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy4KICBfLndoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykgewogICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5tYXRjaGVzKGF0dHJzKSk7CiAgfTsKCiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdAogIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuCiAgXy5maW5kV2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7CiAgICByZXR1cm4gXy5maW5kKG9iaiwgXy5tYXRjaGVzKGF0dHJzKSk7CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgb3IgKGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLgogIC8vIENhbid0IG9wdGltaXplIGFycmF5cyBvZiBpbnRlZ2VycyBsb25nZXIgdGhhbiA2NSw1MzUgZWxlbWVudHMuCiAgLy8gU2VlIFtXZWJLaXQgQnVnIDgwNzk3XShodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODA3OTcpCiAgXy5tYXggPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopICYmIG9ialswXSA9PT0gK29ialswXSAmJiBvYmoubGVuZ3RoIDwgNjU1MzUpIHsKICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIG9iaik7CiAgICB9CiAgICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHk7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdG9yID8gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpIDogdmFsdWU7CiAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCkgewogICAgICAgIHJlc3VsdCA9IHZhbHVlOwogICAgICAgIGxhc3RDb21wdXRlZCA9IGNvbXB1dGVkOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSBtaW5pbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLgogIF8ubWluID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaWYgKCFpdGVyYXRvciAmJiBfLmlzQXJyYXkob2JqKSAmJiBvYmpbMF0gPT09ICtvYmpbMF0gJiYgb2JqLmxlbmd0aCA8IDY1NTM1KSB7CiAgICAgIHJldHVybiBNYXRoLm1pbi5hcHBseShNYXRoLCBvYmopOwogICAgfQogICAgdmFyIHJlc3VsdCA9IEluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSBJbmZpbml0eTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0b3IgPyBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkgOiB2YWx1ZTsKICAgICAgaWYgKGNvbXB1dGVkIDwgbGFzdENvbXB1dGVkKSB7CiAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBTaHVmZmxlIGFuIGFycmF5LCB1c2luZyB0aGUgbW9kZXJuIHZlcnNpb24gb2YgdGhlCiAgLy8gW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlcuKAk1lhdGVzX3NodWZmbGUpLgogIF8uc2h1ZmZsZSA9IGZ1bmN0aW9uKG9iaikgewogICAgdmFyIHJhbmQ7CiAgICB2YXIgaW5kZXggPSAwOwogICAgdmFyIHNodWZmbGVkID0gW107CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgcmFuZCA9IF8ucmFuZG9tKGluZGV4KyspOwogICAgICBzaHVmZmxlZFtpbmRleCAtIDFdID0gc2h1ZmZsZWRbcmFuZF07CiAgICAgIHNodWZmbGVkW3JhbmRdID0gdmFsdWU7CiAgICB9KTsKICAgIHJldHVybiBzaHVmZmxlZDsKICB9OwoKICAvLyBTYW1wbGUgKipuKiogcmFuZG9tIHZhbHVlcyBmcm9tIGEgY29sbGVjdGlvbi4KICAvLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LgogIC8vIFRoZSBpbnRlcm5hbCBgZ3VhcmRgIGFyZ3VtZW50IGFsbG93cyBpdCB0byB3b3JrIHdpdGggYG1hcGAuCiAgXy5zYW1wbGUgPSBmdW5jdGlvbihvYmosIG4sIGd1YXJkKSB7CiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7CiAgICAgIGlmIChvYmoubGVuZ3RoICE9PSArb2JqLmxlbmd0aCkgb2JqID0gXy52YWx1ZXMob2JqKTsKICAgICAgcmV0dXJuIG9ialtfLnJhbmRvbShvYmoubGVuZ3RoIC0gMSldOwogICAgfQogICAgcmV0dXJuIF8uc2h1ZmZsZShvYmopLnNsaWNlKDAsIE1hdGgubWF4KDAsIG4pKTsKICB9OwoKICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBsb29rdXAgaXRlcmF0b3JzLgogIHZhciBsb29rdXBJdGVyYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7CiAgICBpZiAoXy5pc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuIHZhbHVlOwogICAgcmV0dXJuIF8ucHJvcGVydHkodmFsdWUpOwogIH07CgogIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRvci4KICBfLnNvcnRCeSA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIGl0ZXJhdG9yID0gbG9va3VwSXRlcmF0b3IoaXRlcmF0b3IpOwogICAgcmV0dXJuIF8ucGx1Y2soXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB2YWx1ZTogdmFsdWUsCiAgICAgICAgaW5kZXg6IGluZGV4LAogICAgICAgIGNyaXRlcmlhOiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkKICAgICAgfTsKICAgIH0pLnNvcnQoZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhOwogICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhOwogICAgICBpZiAoYSAhPT0gYikgewogICAgICAgIGlmIChhID4gYiB8fCBhID09PSB2b2lkIDApIHJldHVybiAxOwogICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTsKICAgICAgfQogICAgICByZXR1cm4gbGVmdC5pbmRleCAtIHJpZ2h0LmluZGV4OwogICAgfSksICd2YWx1ZScpOwogIH07CgogIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSAiZ3JvdXAgYnkiIG9wZXJhdGlvbnMuCiAgdmFyIGdyb3VwID0gZnVuY3Rpb24oYmVoYXZpb3IpIHsKICAgIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgaXRlcmF0b3IgPSBsb29rdXBJdGVyYXRvcihpdGVyYXRvcik7CiAgICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgICB2YXIga2V5ID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIG9iaik7CiAgICAgICAgYmVoYXZpb3IocmVzdWx0LCBrZXksIHZhbHVlKTsKICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwogIH07CgogIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGUKICAvLyB0byBncm91cCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNyaXRlcmlvbi4KICBfLmdyb3VwQnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIGtleSwgdmFsdWUpIHsKICAgIF8uaGFzKHJlc3VsdCwga2V5KSA/IHJlc3VsdFtrZXldLnB1c2godmFsdWUpIDogcmVzdWx0W2tleV0gPSBbdmFsdWVdOwogIH0pOwoKICAvLyBJbmRleGVzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24sIHNpbWlsYXIgdG8gYGdyb3VwQnlgLCBidXQgZm9yCiAgLy8gd2hlbiB5b3Uga25vdyB0aGF0IHlvdXIgaW5kZXggdmFsdWVzIHdpbGwgYmUgdW5pcXVlLgogIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwga2V5LCB2YWx1ZSkgewogICAgcmVzdWx0W2tleV0gPSB2YWx1ZTsKICB9KTsKCiAgLy8gQ291bnRzIGluc3RhbmNlcyBvZiBhbiBvYmplY3QgdGhhdCBncm91cCBieSBhIGNlcnRhaW4gY3JpdGVyaW9uLiBQYXNzCiAgLy8gZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZSB0byBjb3VudCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlCiAgLy8gY3JpdGVyaW9uLgogIF8uY291bnRCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwga2V5KSB7CiAgICBfLmhhcyhyZXN1bHQsIGtleSkgPyByZXN1bHRba2V5XSsrIDogcmVzdWx0W2tleV0gPSAxOwogIH0pOwoKICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoCiAgLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLgogIF8uc29ydGVkSW5kZXggPSBmdW5jdGlvbihhcnJheSwgb2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaXRlcmF0b3IgPSBsb29rdXBJdGVyYXRvcihpdGVyYXRvcik7CiAgICB2YXIgdmFsdWUgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9iaik7CiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGFycmF5Lmxlbmd0aDsKICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7CiAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDE7CiAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgYXJyYXlbbWlkXSkgPCB2YWx1ZSA/IGxvdyA9IG1pZCArIDEgOiBoaWdoID0gbWlkOwogICAgfQogICAgcmV0dXJuIGxvdzsKICB9OwoKICAvLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLgogIF8udG9BcnJheSA9IGZ1bmN0aW9uKG9iaikgewogICAgaWYgKCFvYmopIHJldHVybiBbXTsKICAgIGlmIChfLmlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTsKICAgIGlmIChvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkgcmV0dXJuIF8ubWFwKG9iaiwgXy5pZGVudGl0eSk7CiAgICByZXR1cm4gXy52YWx1ZXMob2JqKTsKICB9OwoKICAvLyBSZXR1cm4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBvYmplY3QuCiAgXy5zaXplID0gZnVuY3Rpb24ob2JqKSB7CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiAwOwogICAgcmV0dXJuIChvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkgPyBvYmoubGVuZ3RoIDogXy5rZXlzKG9iaikubGVuZ3RoOwogIH07CgogIC8vIEFycmF5IEZ1bmN0aW9ucwogIC8vIC0tLS0tLS0tLS0tLS0tLQoKICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE4KICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBBbGlhc2VkIGFzIGBoZWFkYCBhbmQgYHRha2VgLiBUaGUgKipndWFyZCoqIGNoZWNrCiAgLy8gYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLgogIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHsKICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwOwogICAgaWYgKChuID09IG51bGwpIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbMF07CiAgICBpZiAobiA8IDApIHJldHVybiBbXTsKICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBuKTsKICB9OwoKICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBsYXN0IGVudHJ5IG9mIHRoZSBhcnJheS4gRXNwZWNpYWxseSB1c2VmdWwgb24KICAvLyB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiBhbGwgdGhlIHZhbHVlcyBpbgogIC8vIHRoZSBhcnJheSwgZXhjbHVkaW5nIHRoZSBsYXN0IE4uIFRoZSAqKmd1YXJkKiogY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aAogIC8vIGBfLm1hcGAuCiAgXy5pbml0aWFsID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7CiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgMCwgYXJyYXkubGVuZ3RoIC0gKChuID09IG51bGwpIHx8IGd1YXJkID8gMSA6IG4pKTsKICB9OwoKICAvLyBHZXQgdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgbGFzdCBOCiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gVGhlICoqZ3VhcmQqKiBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuCiAgXy5sYXN0ID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7CiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDsKICAgIGlmICgobiA9PSBudWxsKSB8fCBndWFyZCkgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdOwogICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIE1hdGgubWF4KGFycmF5Lmxlbmd0aCAtIG4sIDApKTsKICB9OwoKICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBmaXJzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEFsaWFzZWQgYXMgYHRhaWxgIGFuZCBgZHJvcGAuCiAgLy8gRXNwZWNpYWxseSB1c2VmdWwgb24gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgYW4gKipuKiogd2lsbCByZXR1cm4KICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuIFRoZSAqKmd1YXJkKioKICAvLyBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuCiAgXy5yZXN0ID0gXy50YWlsID0gXy5kcm9wID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7CiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogbik7CiAgfTsKCiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LgogIF8uY29tcGFjdCA9IGZ1bmN0aW9uKGFycmF5KSB7CiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIF8uaWRlbnRpdHkpOwogIH07CgogIC8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi4KICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0LCBzaGFsbG93LCBvdXRwdXQpIHsKICAgIGlmIChzaGFsbG93ICYmIF8uZXZlcnkoaW5wdXQsIF8uaXNBcnJheSkpIHsKICAgICAgcmV0dXJuIGNvbmNhdC5hcHBseShvdXRwdXQsIGlucHV0KTsKICAgIH0KICAgIGVhY2goaW5wdXQsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGlmIChfLmlzQXJyYXkodmFsdWUpIHx8IF8uaXNBcmd1bWVudHModmFsdWUpKSB7CiAgICAgICAgc2hhbGxvdyA/IHB1c2guYXBwbHkob3V0cHV0LCB2YWx1ZSkgOiBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBvdXRwdXQpOwogICAgICB9IGVsc2UgewogICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gb3V0cHV0OwogIH07CgogIC8vIEZsYXR0ZW4gb3V0IGFuIGFycmF5LCBlaXRoZXIgcmVjdXJzaXZlbHkgKGJ5IGRlZmF1bHQpLCBvciBqdXN0IG9uZSBsZXZlbC4KICBfLmZsYXR0ZW4gPSBmdW5jdGlvbihhcnJheSwgc2hhbGxvdykgewogICAgcmV0dXJuIGZsYXR0ZW4oYXJyYXksIHNoYWxsb3csIFtdKTsKICB9OwoKICAvLyBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoZSBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCB2YWx1ZShzKS4KICBfLndpdGhvdXQgPSBmdW5jdGlvbihhcnJheSkgewogICAgcmV0dXJuIF8uZGlmZmVyZW5jZShhcnJheSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICB9OwoKICAvLyBTcGxpdCBhbiBhcnJheSBpbnRvIHR3byBhcnJheXM6IG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgc2F0aXNmeSB0aGUgZ2l2ZW4KICAvLyBwcmVkaWNhdGUsIGFuZCBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIGRvIG5vdCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUuCiAgXy5wYXJ0aXRpb24gPSBmdW5jdGlvbihhcnJheSwgcHJlZGljYXRlKSB7CiAgICB2YXIgcGFzcyA9IFtdLCBmYWlsID0gW107CiAgICBlYWNoKGFycmF5LCBmdW5jdGlvbihlbGVtKSB7CiAgICAgIChwcmVkaWNhdGUoZWxlbSkgPyBwYXNzIDogZmFpbCkucHVzaChlbGVtKTsKICAgIH0pOwogICAgcmV0dXJuIFtwYXNzLCBmYWlsXTsKICB9OwoKICAvLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeQogIC8vIGJlZW4gc29ydGVkLCB5b3UgaGF2ZSB0aGUgb3B0aW9uIG9mIHVzaW5nIGEgZmFzdGVyIGFsZ29yaXRobS4KICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLgogIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaWYgKF8uaXNGdW5jdGlvbihpc1NvcnRlZCkpIHsKICAgICAgY29udGV4dCA9IGl0ZXJhdG9yOwogICAgICBpdGVyYXRvciA9IGlzU29ydGVkOwogICAgICBpc1NvcnRlZCA9IGZhbHNlOwogICAgfQogICAgdmFyIGluaXRpYWwgPSBpdGVyYXRvciA/IF8ubWFwKGFycmF5LCBpdGVyYXRvciwgY29udGV4dCkgOiBhcnJheTsKICAgIHZhciByZXN1bHRzID0gW107CiAgICB2YXIgc2VlbiA9IFtdOwogICAgZWFjaChpbml0aWFsLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgaWYgKGlzU29ydGVkID8gKCFpbmRleCB8fCBzZWVuW3NlZW4ubGVuZ3RoIC0gMV0gIT09IHZhbHVlKSA6ICFfLmNvbnRhaW5zKHNlZW4sIHZhbHVlKSkgewogICAgICAgIHNlZW4ucHVzaCh2YWx1ZSk7CiAgICAgICAgcmVzdWx0cy5wdXNoKGFycmF5W2luZGV4XSk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfTsKCiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSB1bmlvbjogZWFjaCBkaXN0aW5jdCBlbGVtZW50IGZyb20gYWxsIG9mCiAgLy8gdGhlIHBhc3NlZC1pbiBhcnJheXMuCiAgXy51bmlvbiA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIF8udW5pcShfLmZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlKSk7CiAgfTsKCiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZQogIC8vIHBhc3NlZC1pbiBhcnJheXMuCiAgXy5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhcnJheSkgewogICAgdmFyIHJlc3QgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICByZXR1cm4gXy5maWx0ZXIoXy51bmlxKGFycmF5KSwgZnVuY3Rpb24oaXRlbSkgewogICAgICByZXR1cm4gXy5ldmVyeShyZXN0LCBmdW5jdGlvbihvdGhlcikgewogICAgICAgIHJldHVybiBfLmNvbnRhaW5zKG90aGVyLCBpdGVtKTsKICAgICAgfSk7CiAgICB9KTsKICB9OwoKICAvLyBUYWtlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gb25lIGFycmF5IGFuZCBhIG51bWJlciBvZiBvdGhlciBhcnJheXMuCiAgLy8gT25seSB0aGUgZWxlbWVudHMgcHJlc2VudCBpbiBqdXN0IHRoZSBmaXJzdCBhcnJheSB3aWxsIHJlbWFpbi4KICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkgewogICAgdmFyIHJlc3QgPSBjb25jYXQuYXBwbHkoQXJyYXlQcm90bywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgZnVuY3Rpb24odmFsdWUpeyByZXR1cm4gIV8uY29udGFpbnMocmVzdCwgdmFsdWUpOyB9KTsKICB9OwoKICAvLyBaaXAgdG9nZXRoZXIgbXVsdGlwbGUgbGlzdHMgaW50byBhIHNpbmdsZSBhcnJheSAtLSBlbGVtZW50cyB0aGF0IHNoYXJlCiAgLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuCiAgXy56aXAgPSBmdW5jdGlvbigpIHsKICAgIHZhciBsZW5ndGggPSBfLm1heChfLnBsdWNrKGFyZ3VtZW50cywgJ2xlbmd0aCcpLmNvbmNhdCgwKSk7CiAgICB2YXIgcmVzdWx0cyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICByZXN1bHRzW2ldID0gXy5wbHVjayhhcmd1bWVudHMsICcnICsgaSk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0czsKICB9OwoKICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gCiAgLy8gcGFpcnMsIG9yIHR3byBwYXJhbGxlbCBhcnJheXMgb2YgdGhlIHNhbWUgbGVuZ3RoIC0tIG9uZSBvZiBrZXlzLCBhbmQgb25lIG9mCiAgLy8gdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzLgogIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7CiAgICBpZiAobGlzdCA9PSBudWxsKSByZXR1cm4ge307CiAgICB2YXIgcmVzdWx0ID0ge307CiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gbGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICBpZiAodmFsdWVzKSB7CiAgICAgICAgcmVzdWx0W2xpc3RbaV1dID0gdmFsdWVzW2ldOwogICAgICB9IGVsc2UgewogICAgICAgIHJlc3VsdFtsaXN0W2ldWzBdXSA9IGxpc3RbaV1bMV07CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgLy8gSWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwbHkgdXMgd2l0aCBpbmRleE9mIChJJ20gbG9va2luZyBhdCB5b3UsICoqTVNJRSoqKSwKICAvLyB3ZSBuZWVkIHRoaXMgZnVuY3Rpb24uIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW4KICAvLyBpdGVtIGluIGFuIGFycmF5LCBvciAtMSBpZiB0aGUgaXRlbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBpbmRleE9mYCBpZiBhdmFpbGFibGUuCiAgLy8gSWYgdGhlIGFycmF5IGlzIGxhcmdlIGFuZCBhbHJlYWR5IGluIHNvcnQgb3JkZXIsIHBhc3MgYHRydWVgCiAgLy8gZm9yICoqaXNTb3J0ZWQqKiB0byB1c2UgYmluYXJ5IHNlYXJjaC4KICBfLmluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgaXNTb3J0ZWQpIHsKICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gLTE7CiAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgIGlmIChpc1NvcnRlZCkgewogICAgICBpZiAodHlwZW9mIGlzU29ydGVkID09ICdudW1iZXInKSB7CiAgICAgICAgaSA9IChpc1NvcnRlZCA8IDAgPyBNYXRoLm1heCgwLCBsZW5ndGggKyBpc1NvcnRlZCkgOiBpc1NvcnRlZCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaSA9IF8uc29ydGVkSW5kZXgoYXJyYXksIGl0ZW0pOwogICAgICAgIHJldHVybiBhcnJheVtpXSA9PT0gaXRlbSA/IGkgOiAtMTsKICAgICAgfQogICAgfQogICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgYXJyYXkuaW5kZXhPZiA9PT0gbmF0aXZlSW5kZXhPZikgcmV0dXJuIGFycmF5LmluZGV4T2YoaXRlbSwgaXNTb3J0ZWQpOwogICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgaWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTsKICAgIHJldHVybiAtMTsKICB9OwoKICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgbGFzdEluZGV4T2ZgIGlmIGF2YWlsYWJsZS4KICBfLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGZyb20pIHsKICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gLTE7CiAgICB2YXIgaGFzSW5kZXggPSBmcm9tICE9IG51bGw7CiAgICBpZiAobmF0aXZlTGFzdEluZGV4T2YgJiYgYXJyYXkubGFzdEluZGV4T2YgPT09IG5hdGl2ZUxhc3RJbmRleE9mKSB7CiAgICAgIHJldHVybiBoYXNJbmRleCA/IGFycmF5Lmxhc3RJbmRleE9mKGl0ZW0sIGZyb20pIDogYXJyYXkubGFzdEluZGV4T2YoaXRlbSk7CiAgICB9CiAgICB2YXIgaSA9IChoYXNJbmRleCA/IGZyb20gOiBhcnJheS5sZW5ndGgpOwogICAgd2hpbGUgKGktLSkgaWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTsKICAgIHJldHVybiAtMTsKICB9OwoKICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mCiAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWUKICAvLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLgogIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSkgewogICAgICBzdG9wID0gc3RhcnQgfHwgMDsKICAgICAgc3RhcnQgPSAwOwogICAgfQogICAgc3RlcCA9IGFyZ3VtZW50c1syXSB8fCAxOwoKICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7CiAgICB2YXIgaWR4ID0gMDsKICAgIHZhciByYW5nZSA9IG5ldyBBcnJheShsZW5ndGgpOwoKICAgIHdoaWxlKGlkeCA8IGxlbmd0aCkgewogICAgICByYW5nZVtpZHgrK10gPSBzdGFydDsKICAgICAgc3RhcnQgKz0gc3RlcDsKICAgIH0KCiAgICByZXR1cm4gcmFuZ2U7CiAgfTsKCiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9ucwogIC8vIC0tLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBSZXVzYWJsZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgcHJvdG90eXBlIHNldHRpbmcuCiAgdmFyIGN0b3IgPSBmdW5jdGlvbigpe307CgogIC8vIENyZWF0ZSBhIGZ1bmN0aW9uIGJvdW5kIHRvIGEgZ2l2ZW4gb2JqZWN0IChhc3NpZ25pbmcgYHRoaXNgLCBhbmQgYXJndW1lbnRzLAogIC8vIG9wdGlvbmFsbHkpLiBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgRnVuY3Rpb24uYmluZGAgaWYKICAvLyBhdmFpbGFibGUuCiAgXy5iaW5kID0gZnVuY3Rpb24oZnVuYywgY29udGV4dCkgewogICAgdmFyIGFyZ3MsIGJvdW5kOwogICAgaWYgKG5hdGl2ZUJpbmQgJiYgZnVuYy5iaW5kID09PSBuYXRpdmVCaW5kKSByZXR1cm4gbmF0aXZlQmluZC5hcHBseShmdW5jLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpOwogICAgaWYgKCFfLmlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3I7CiAgICBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOwogICAgcmV0dXJuIGJvdW5kID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkpIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpOwogICAgICBjdG9yLnByb3RvdHlwZSA9IGZ1bmMucHJvdG90eXBlOwogICAgICB2YXIgc2VsZiA9IG5ldyBjdG9yOwogICAgICBjdG9yLnByb3RvdHlwZSA9IG51bGw7CiAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHNlbGYsIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpOwogICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkgcmV0dXJuIHJlc3VsdDsKICAgICAgcmV0dXJuIHNlbGY7CiAgICB9OwogIH07CgogIC8vIFBhcnRpYWxseSBhcHBseSBhIGZ1bmN0aW9uIGJ5IGNyZWF0aW5nIGEgdmVyc2lvbiB0aGF0IGhhcyBoYWQgc29tZSBvZiBpdHMKICAvLyBhcmd1bWVudHMgcHJlLWZpbGxlZCwgd2l0aG91dCBjaGFuZ2luZyBpdHMgZHluYW1pYyBgdGhpc2AgY29udGV4dC4gXyBhY3RzCiAgLy8gYXMgYSBwbGFjZWhvbGRlciwgYWxsb3dpbmcgYW55IGNvbWJpbmF0aW9uIG9mIGFyZ3VtZW50cyB0byBiZSBwcmUtZmlsbGVkLgogIF8ucGFydGlhbCA9IGZ1bmN0aW9uKGZ1bmMpIHsKICAgIHZhciBib3VuZEFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBwb3NpdGlvbiA9IDA7CiAgICAgIHZhciBhcmdzID0gYm91bmRBcmdzLnNsaWNlKCk7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKGFyZ3NbaV0gPT09IF8pIGFyZ3NbaV0gPSBhcmd1bWVudHNbcG9zaXRpb24rK107CiAgICAgIH0KICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgYXJndW1lbnRzLmxlbmd0aCkgYXJncy5wdXNoKGFyZ3VtZW50c1twb3NpdGlvbisrXSk7CiAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpOwogICAgfTsKICB9OwoKICAvLyBCaW5kIGEgbnVtYmVyIG9mIGFuIG9iamVjdCdzIG1ldGhvZHMgdG8gdGhhdCBvYmplY3QuIFJlbWFpbmluZyBhcmd1bWVudHMKICAvLyBhcmUgdGhlIG1ldGhvZCBuYW1lcyB0byBiZSBib3VuZC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGFsbCBjYWxsYmFja3MKICAvLyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuCiAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgZnVuY3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXMnKTsKICAgIGVhY2goZnVuY3MsIGZ1bmN0aW9uKGYpIHsgb2JqW2ZdID0gXy5iaW5kKG9ialtmXSwgb2JqKTsgfSk7CiAgICByZXR1cm4gb2JqOwogIH07CgogIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuCiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7CiAgICB2YXIgbWVtbyA9IHt9OwogICAgaGFzaGVyIHx8IChoYXNoZXIgPSBfLmlkZW50aXR5KTsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGtleSA9IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICByZXR1cm4gXy5oYXMobWVtbywga2V5KSA/IG1lbW9ba2V5XSA6IChtZW1vW2tleV0gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgfTsKICB9OwoKICAvLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzCiAgLy8gaXQgd2l0aCB0aGUgYXJndW1lbnRzIHN1cHBsaWVkLgogIF8uZGVsYXkgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7CiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTsKICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7IHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpOyB9LCB3YWl0KTsKICB9OwoKICAvLyBEZWZlcnMgYSBmdW5jdGlvbiwgc2NoZWR1bGluZyBpdCB0byBydW4gYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMKICAvLyBjbGVhcmVkLgogIF8uZGVmZXIgPSBmdW5jdGlvbihmdW5jKSB7CiAgICByZXR1cm4gXy5kZWxheS5hcHBseShfLCBbZnVuYywgMV0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpOwogIH07CgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZQogIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1bgogIC8vIGFzIG11Y2ggYXMgaXQgY2FuLCB3aXRob3V0IGV2ZXIgZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbjsKICAvLyBidXQgaWYgeW91J2QgbGlrZSB0byBkaXNhYmxlIHRoZSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgcGFzcwogIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLgogIF8udGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7CiAgICB2YXIgY29udGV4dCwgYXJncywgcmVzdWx0OwogICAgdmFyIHRpbWVvdXQgPSBudWxsOwogICAgdmFyIHByZXZpb3VzID0gMDsKICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IF8ubm93KCk7CiAgICAgIHRpbWVvdXQgPSBudWxsOwogICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7CiAgICB9OwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICB2YXIgbm93ID0gXy5ub3coKTsKICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IG5vdzsKICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpOwogICAgICBjb250ZXh0ID0gdGhpczsKICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgICAgaWYgKHJlbWFpbmluZyA8PSAwKSB7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpOwogICAgICAgIHRpbWVvdXQgPSBudWxsOwogICAgICAgIHByZXZpb3VzID0gbm93OwogICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7CiAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsOwogICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7CiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHJlbWFpbmluZyk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CiAgfTsKCiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdAogIC8vIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3IKICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGUKICAvLyBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLgogIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHsKICAgIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDsKCiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGxhc3QgPSBfLm5vdygpIC0gdGltZXN0YW1wOwogICAgICBpZiAobGFzdCA8IHdhaXQpIHsKICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpOwogICAgICB9IGVsc2UgewogICAgICAgIHRpbWVvdXQgPSBudWxsOwogICAgICAgIGlmICghaW1tZWRpYXRlKSB7CiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsOwogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIGNvbnRleHQgPSB0aGlzOwogICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgICB0aW1lc3RhbXAgPSBfLm5vdygpOwogICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDsKICAgICAgaWYgKCF0aW1lb3V0KSB7CiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpOwogICAgICB9CiAgICAgIGlmIChjYWxsTm93KSB7CiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7CiAgICAgIH0KCiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwogIH07CgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvdwogIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uCiAgXy5vbmNlID0gZnVuY3Rpb24oZnVuYykgewogICAgdmFyIHJhbiA9IGZhbHNlLCBtZW1vOwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICBpZiAocmFuKSByZXR1cm4gbWVtbzsKICAgICAgcmFuID0gdHJ1ZTsKICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgZnVuYyA9IG51bGw7CiAgICAgIHJldHVybiBtZW1vOwogICAgfTsKICB9OwoKICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBmdW5jdGlvbiBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIHNlY29uZCwKICAvLyBhbGxvd2luZyB5b3UgdG8gYWRqdXN0IGFyZ3VtZW50cywgcnVuIGNvZGUgYmVmb3JlIGFuZCBhZnRlciwgYW5kCiAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi4KICBfLndyYXAgPSBmdW5jdGlvbihmdW5jLCB3cmFwcGVyKSB7CiAgICByZXR1cm4gXy5wYXJ0aWFsKHdyYXBwZXIsIGZ1bmMpOwogIH07CgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoCiAgLy8gY29uc3VtaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHRoYXQgZm9sbG93cy4KICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHsKICAgIHZhciBmdW5jcyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIGZvciAodmFyIGkgPSBmdW5jcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgIGFyZ3MgPSBbZnVuY3NbaV0uYXBwbHkodGhpcywgYXJncyldOwogICAgICB9CiAgICAgIHJldHVybiBhcmdzWzBdOwogICAgfTsKICB9OwoKICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgYWZ0ZXIgYmVpbmcgY2FsbGVkIE4gdGltZXMuCiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIGlmICgtLXRpbWVzIDwgMSkgewogICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgIH07CiAgfTsKCiAgLy8gT2JqZWN0IEZ1bmN0aW9ucwogIC8vIC0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gUmV0cmlldmUgdGhlIG5hbWVzIG9mIGFuIG9iamVjdCdzIHByb3BlcnRpZXMuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYAogIF8ua2V5cyA9IGZ1bmN0aW9uKG9iaikgewogICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTsKICAgIGlmIChuYXRpdmVLZXlzKSByZXR1cm4gbmF0aXZlS2V5cyhvYmopOwogICAgdmFyIGtleXMgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpOwogICAgcmV0dXJuIGtleXM7CiAgfTsKCiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLgogIF8udmFsdWVzID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopOwogICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoOwogICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICB2YWx1ZXNbaV0gPSBvYmpba2V5c1tpXV07CiAgICB9CiAgICByZXR1cm4gdmFsdWVzOwogIH07CgogIC8vIENvbnZlcnQgYW4gb2JqZWN0IGludG8gYSBsaXN0IG9mIGBba2V5LCB2YWx1ZV1gIHBhaXJzLgogIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHsKICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7CiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7CiAgICB2YXIgcGFpcnMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgcGFpcnNbaV0gPSBba2V5c1tpXSwgb2JqW2tleXNbaV1dXTsKICAgIH0KICAgIHJldHVybiBwYWlyczsKICB9OwoKICAvLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuCiAgXy5pbnZlcnQgPSBmdW5jdGlvbihvYmopIHsKICAgIHZhciByZXN1bHQgPSB7fTsKICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7CiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICByZXN1bHRbb2JqW2tleXNbaV1dXSA9IGtleXNbaV07CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vIFJldHVybiBhIHNvcnRlZCBsaXN0IG9mIHRoZSBmdW5jdGlvbiBuYW1lcyBhdmFpbGFibGUgb24gdGhlIG9iamVjdC4KICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYAogIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgbmFtZXMgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTsKICAgIH0KICAgIHJldHVybiBuYW1lcy5zb3J0KCk7CiAgfTsKCiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuCiAgXy5leHRlbmQgPSBmdW5jdGlvbihvYmopIHsKICAgIGVhY2goc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCBmdW5jdGlvbihzb3VyY2UpIHsKICAgICAgaWYgKHNvdXJjZSkgewogICAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7CiAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy4KICBfLnBpY2sgPSBmdW5jdGlvbihvYmopIHsKICAgIHZhciBjb3B5ID0ge307CiAgICB2YXIga2V5cyA9IGNvbmNhdC5hcHBseShBcnJheVByb3RvLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpOwogICAgZWFjaChrZXlzLCBmdW5jdGlvbihrZXkpIHsKICAgICAgaWYgKGtleSBpbiBvYmopIGNvcHlba2V5XSA9IG9ialtrZXldOwogICAgfSk7CiAgICByZXR1cm4gY29weTsKICB9OwoKICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IHdpdGhvdXQgdGhlIGJsYWNrbGlzdGVkIHByb3BlcnRpZXMuCiAgXy5vbWl0ID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgY29weSA9IHt9OwogICAgdmFyIGtleXMgPSBjb25jYXQuYXBwbHkoQXJyYXlQcm90bywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgaWYgKCFfLmNvbnRhaW5zKGtleXMsIGtleSkpIGNvcHlba2V5XSA9IG9ialtrZXldOwogICAgfQogICAgcmV0dXJuIGNvcHk7CiAgfTsKCiAgLy8gRmlsbCBpbiBhIGdpdmVuIG9iamVjdCB3aXRoIGRlZmF1bHQgcHJvcGVydGllcy4KICBfLmRlZmF1bHRzID0gZnVuY3Rpb24ob2JqKSB7CiAgICBlYWNoKHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZnVuY3Rpb24oc291cmNlKSB7CiAgICAgIGlmIChzb3VyY2UpIHsKICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkgewogICAgICAgICAgaWYgKG9ialtwcm9wXSA9PT0gdm9pZCAwKSBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LgogIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHsKICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqOwogICAgcmV0dXJuIF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLmV4dGVuZCh7fSwgb2JqKTsKICB9OwoKICAvLyBJbnZva2VzIGludGVyY2VwdG9yIHdpdGggdGhlIG9iaiwgYW5kIHRoZW4gcmV0dXJucyBvYmouCiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byAidGFwIGludG8iIGEgbWV0aG9kIGNoYWluLCBpbgogIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLgogIF8udGFwID0gZnVuY3Rpb24ob2JqLCBpbnRlcmNlcHRvcikgewogICAgaW50ZXJjZXB0b3Iob2JqKTsKICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC4KICB2YXIgZXEgPSBmdW5jdGlvbihhLCBiLCBhU3RhY2ssIGJTdGFjaykgewogICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLgogICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuCiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT0gMSAvIGI7CiAgICAvLyBBIHN0cmljdCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGBudWxsID09IHVuZGVmaW5lZGAuCiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGEgPT09IGI7CiAgICAvLyBVbndyYXAgYW55IHdyYXBwZWQgb2JqZWN0cy4KICAgIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7CiAgICBpZiAoYiBpbnN0YW5jZW9mIF8pIGIgPSBiLl93cmFwcGVkOwogICAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy4KICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpOwogICAgaWYgKGNsYXNzTmFtZSAhPSB0b1N0cmluZy5jYWxsKGIpKSByZXR1cm4gZmFsc2U7CiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkgewogICAgICAvLyBTdHJpbmdzLCBudW1iZXJzLCBkYXRlcywgYW5kIGJvb2xlYW5zIGFyZSBjb21wYXJlZCBieSB2YWx1ZS4KICAgICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzoKICAgICAgICAvLyBQcmltaXRpdmVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdCB3cmFwcGVycyBhcmUgZXF1aXZhbGVudDsgdGh1cywgYCI1ImAgaXMKICAgICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKCI1IilgLgogICAgICAgIHJldHVybiBhID09IFN0cmluZyhiKTsKICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzoKICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLiBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yCiAgICAgICAgLy8gb3RoZXIgbnVtZXJpYyB2YWx1ZXMuCiAgICAgICAgcmV0dXJuIGEgIT0gK2EgPyBiICE9ICtiIDogKGEgPT0gMCA/IDEgLyBhID09IDEgLyBiIDogYSA9PSArYik7CiAgICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOgogICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzoKICAgICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyCiAgICAgICAgLy8gbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zLiBOb3RlIHRoYXQgaW52YWxpZCBkYXRlcyB3aXRoIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucwogICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC4KICAgICAgICByZXR1cm4gK2EgPT0gK2I7CiAgICAgIC8vIFJlZ0V4cHMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyIHNvdXJjZSBwYXR0ZXJucyBhbmQgZmxhZ3MuCiAgICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6CiAgICAgICAgcmV0dXJuIGEuc291cmNlID09IGIuc291cmNlICYmCiAgICAgICAgICAgICAgIGEuZ2xvYmFsID09IGIuZ2xvYmFsICYmCiAgICAgICAgICAgICAgIGEubXVsdGlsaW5lID09IGIubXVsdGlsaW5lICYmCiAgICAgICAgICAgICAgIGEuaWdub3JlQ2FzZSA9PSBiLmlnbm9yZUNhc2U7CiAgICB9CiAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTsKICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWMKICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLgogICAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7CiAgICB3aGlsZSAobGVuZ3RoLS0pIHsKICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mCiAgICAgIC8vIHVuaXF1ZSBuZXN0ZWQgc3RydWN0dXJlcy4KICAgICAgaWYgKGFTdGFja1tsZW5ndGhdID09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PSBiOwogICAgfQogICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzCiAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLgogICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yOwogICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgKGFDdG9yIGluc3RhbmNlb2YgYUN0b3IpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5pc0Z1bmN0aW9uKGJDdG9yKSAmJiAoYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcikpCiAgICAgICAgICAgICAgICAgICAgICAgICYmICgnY29uc3RydWN0b3InIGluIGEgJiYgJ2NvbnN0cnVjdG9yJyBpbiBiKSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuCiAgICBhU3RhY2sucHVzaChhKTsKICAgIGJTdGFjay5wdXNoKGIpOwogICAgdmFyIHNpemUgPSAwLCByZXN1bHQgPSB0cnVlOwogICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIGFuZCBhcnJheXMuCiAgICBpZiAoY2xhc3NOYW1lID09ICdbb2JqZWN0IEFycmF5XScpIHsKICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuCiAgICAgIHNpemUgPSBhLmxlbmd0aDsKICAgICAgcmVzdWx0ID0gc2l6ZSA9PSBiLmxlbmd0aDsKICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuCiAgICAgICAgd2hpbGUgKHNpemUtLSkgewogICAgICAgICAgaWYgKCEocmVzdWx0ID0gZXEoYVtzaXplXSwgYltzaXplXSwgYVN0YWNrLCBiU3RhY2spKSkgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy4KICAgICAgZm9yICh2YXIga2V5IGluIGEpIHsKICAgICAgICBpZiAoXy5oYXMoYSwga2V5KSkgewogICAgICAgICAgLy8gQ291bnQgdGhlIGV4cGVjdGVkIG51bWJlciBvZiBwcm9wZXJ0aWVzLgogICAgICAgICAgc2l6ZSsrOwogICAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyLgogICAgICAgICAgaWYgKCEocmVzdWx0ID0gXy5oYXMoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgYVN0YWNrLCBiU3RhY2spKSkgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIC8vIEVuc3VyZSB0aGF0IGJvdGggb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIG51bWJlciBvZiBwcm9wZXJ0aWVzLgogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgZm9yIChrZXkgaW4gYikgewogICAgICAgICAgaWYgKF8uaGFzKGIsIGtleSkgJiYgIShzaXplLS0pKSBicmVhazsKICAgICAgICB9CiAgICAgICAgcmVzdWx0ID0gIXNpemU7CiAgICAgIH0KICAgIH0KICAgIC8vIFJlbW92ZSB0aGUgZmlyc3Qgb2JqZWN0IGZyb20gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLgogICAgYVN0YWNrLnBvcCgpOwogICAgYlN0YWNrLnBvcCgpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC4KICBfLmlzRXF1YWwgPSBmdW5jdGlvbihhLCBiKSB7CiAgICByZXR1cm4gZXEoYSwgYiwgW10sIFtdKTsKICB9OwoKICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT8KICAvLyBBbiAiZW1wdHkiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy4KICBfLmlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHRydWU7CiAgICBpZiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIHJldHVybiBmYWxzZTsKICAgIHJldHVybiB0cnVlOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBET00gZWxlbWVudD8KICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT09IDEpOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/CiAgLy8gRGVsZWdhdGVzIHRvIEVDTUE1J3MgbmF0aXZlIEFycmF5LmlzQXJyYXkKICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBBcnJheV0nOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgYW4gb2JqZWN0PwogIF8uaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBvYmogPT09IE9iamVjdChvYmopOwogIH07CgogIC8vIEFkZCBzb21lIGlzVHlwZSBtZXRob2RzOiBpc0FyZ3VtZW50cywgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0RhdGUsIGlzUmVnRXhwLgogIGVhY2goWydBcmd1bWVudHMnLCAnRnVuY3Rpb24nLCAnU3RyaW5nJywgJ051bWJlcicsICdEYXRlJywgJ1JlZ0V4cCddLCBmdW5jdGlvbihuYW1lKSB7CiAgICBfWydpcycgKyBuYW1lXSA9IGZ1bmN0aW9uKG9iaikgewogICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0ICcgKyBuYW1lICsgJ10nOwogICAgfTsKICB9KTsKCiAgLy8gRGVmaW5lIGEgZmFsbGJhY2sgdmVyc2lvbiBvZiB0aGUgbWV0aG9kIGluIGJyb3dzZXJzIChhaGVtLCBJRSksIHdoZXJlCiAgLy8gdGhlcmUgaXNuJ3QgYW55IGluc3BlY3RhYmxlICJBcmd1bWVudHMiIHR5cGUuCiAgaWYgKCFfLmlzQXJndW1lbnRzKGFyZ3VtZW50cykpIHsKICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHsKICAgICAgcmV0dXJuICEhKG9iaiAmJiBfLmhhcyhvYmosICdjYWxsZWUnKSk7CiAgICB9OwogIH0KCiAgLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLgogIGlmICh0eXBlb2YgKC8uLykgIT09ICdmdW5jdGlvbicpIHsKICAgIF8uaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikgewogICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJzsKICAgIH07CiAgfQoKICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/CiAgXy5pc0Zpbml0ZSA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIGlzRmluaXRlKG9iaikgJiYgIWlzTmFOKHBhcnNlRmxvYXQob2JqKSk7CiAgfTsKCiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gPyAoTmFOIGlzIHRoZSBvbmx5IG51bWJlciB3aGljaCBkb2VzIG5vdCBlcXVhbCBpdHNlbGYpLgogIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBfLmlzTnVtYmVyKG9iaikgJiYgb2JqICE9ICtvYmo7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIGJvb2xlYW4/CiAgXy5pc0Jvb2xlYW4gPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQm9vbGVhbl0nOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD8KICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIG9iaiA9PT0gbnVsbDsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIHVuZGVmaW5lZD8KICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7CiAgfTsKCiAgLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseQogIC8vIG9uIGl0c2VsZiAoaW4gb3RoZXIgd29yZHMsIG5vdCBvbiBhIHByb3RvdHlwZSkuCiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIGtleSkgewogICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpOwogIH07CgogIC8vIFV0aWxpdHkgRnVuY3Rpb25zCiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gUnVuIFVuZGVyc2NvcmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cwogIC8vIHByZXZpb3VzIG93bmVyLiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC4KICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHsKICAgIHJvb3QuXyA9IHByZXZpb3VzVW5kZXJzY29yZTsKICAgIHJldHVybiB0aGlzOwogIH07CgogIC8vIEtlZXAgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIGFyb3VuZCBmb3IgZGVmYXVsdCBpdGVyYXRvcnMuCiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWU7CiAgfTsKCiAgXy5jb25zdGFudCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdmFsdWU7CiAgICB9OwogIH07CgogIF8ucHJvcGVydHkgPSBmdW5jdGlvbihrZXkpIHsKICAgIHJldHVybiBmdW5jdGlvbihvYmopIHsKICAgICAgcmV0dXJuIG9ialtrZXldOwogICAgfTsKICB9OwoKICAvLyBSZXR1cm5zIGEgcHJlZGljYXRlIGZvciBjaGVja2luZyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2YgYGtleTp2YWx1ZWAgcGFpcnMuCiAgXy5tYXRjaGVzID0gZnVuY3Rpb24oYXR0cnMpIHsKICAgIHJldHVybiBmdW5jdGlvbihvYmopIHsKICAgICAgaWYgKG9iaiA9PT0gYXR0cnMpIHJldHVybiB0cnVlOyAvL2F2b2lkIGNvbXBhcmluZyBhbiBvYmplY3QgdG8gaXRzZWxmLgogICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHsKICAgICAgICBpZiAoYXR0cnNba2V5XSAhPT0gb2JqW2tleV0pCiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfTsKCiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuCiAgXy50aW1lcyA9IGZ1bmN0aW9uKG4sIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICB2YXIgYWNjdW0gPSBBcnJheShNYXRoLm1heCgwLCBuKSk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgYWNjdW1baV0gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGkpOwogICAgcmV0dXJuIGFjY3VtOwogIH07CgogIC8vIFJldHVybiBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gbWluIGFuZCBtYXggKGluY2x1c2l2ZSkuCiAgXy5yYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkgewogICAgaWYgKG1heCA9PSBudWxsKSB7CiAgICAgIG1heCA9IG1pbjsKICAgICAgbWluID0gMDsKICAgIH0KICAgIHJldHVybiBtaW4gKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpOwogIH07CgogIC8vIEEgKHBvc3NpYmx5IGZhc3Rlcikgd2F5IHRvIGdldCB0aGUgY3VycmVudCB0aW1lc3RhbXAgYXMgYW4gaW50ZWdlci4KICBfLm5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH07CgogIC8vIExpc3Qgb2YgSFRNTCBlbnRpdGllcyBmb3IgZXNjYXBpbmcuCiAgdmFyIGVudGl0eU1hcCA9IHsKICAgIGVzY2FwZTogewogICAgICAnJic6ICcmYW1wOycsCiAgICAgICc8JzogJyZsdDsnLAogICAgICAnPic6ICcmZ3Q7JywKICAgICAgJyInOiAnJnF1b3Q7JywKICAgICAgIiciOiAnJiN4Mjc7JwogICAgfQogIH07CiAgZW50aXR5TWFwLnVuZXNjYXBlID0gXy5pbnZlcnQoZW50aXR5TWFwLmVzY2FwZSk7CgogIC8vIFJlZ2V4ZXMgY29udGFpbmluZyB0aGUga2V5cyBhbmQgdmFsdWVzIGxpc3RlZCBpbW1lZGlhdGVseSBhYm92ZS4KICB2YXIgZW50aXR5UmVnZXhlcyA9IHsKICAgIGVzY2FwZTogICBuZXcgUmVnRXhwKCdbJyArIF8ua2V5cyhlbnRpdHlNYXAuZXNjYXBlKS5qb2luKCcnKSArICddJywgJ2cnKSwKICAgIHVuZXNjYXBlOiBuZXcgUmVnRXhwKCcoJyArIF8ua2V5cyhlbnRpdHlNYXAudW5lc2NhcGUpLmpvaW4oJ3wnKSArICcpJywgJ2cnKQogIH07CgogIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi4KICBfLmVhY2goWydlc2NhcGUnLCAndW5lc2NhcGUnXSwgZnVuY3Rpb24obWV0aG9kKSB7CiAgICBfW21ldGhvZF0gPSBmdW5jdGlvbihzdHJpbmcpIHsKICAgICAgaWYgKHN0cmluZyA9PSBudWxsKSByZXR1cm4gJyc7CiAgICAgIHJldHVybiAoJycgKyBzdHJpbmcpLnJlcGxhY2UoZW50aXR5UmVnZXhlc1ttZXRob2RdLCBmdW5jdGlvbihtYXRjaCkgewogICAgICAgIHJldHVybiBlbnRpdHlNYXBbbWV0aG9kXVttYXRjaF07CiAgICAgIH0pOwogICAgfTsKICB9KTsKCiAgLy8gSWYgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBgcHJvcGVydHlgIGlzIGEgZnVuY3Rpb24gdGhlbiBpbnZva2UgaXQgd2l0aCB0aGUKICAvLyBgb2JqZWN0YCBhcyBjb250ZXh0OyBvdGhlcndpc2UsIHJldHVybiBpdC4KICBfLnJlc3VsdCA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsKICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDsKICAgIHZhciB2YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eV07CiAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlOwogIH07CgogIC8vIEFkZCB5b3VyIG93biBjdXN0b20gZnVuY3Rpb25zIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC4KICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7CiAgICBlYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgdmFyIGZ1bmMgPSBfW25hbWVdID0gb2JqW25hbWVdOwogICAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdOwogICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTsKICAgICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7CiAgICAgIH07CiAgICB9KTsKICB9OwoKICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLgogIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuCiAgdmFyIGlkQ291bnRlciA9IDA7CiAgXy51bmlxdWVJZCA9IGZ1bmN0aW9uKHByZWZpeCkgewogICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJzsKICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkOwogIH07CgogIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZQogIC8vIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy4KICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7CiAgICBldmFsdWF0ZSAgICA6IC88JShbXHNcU10rPyklPi9nLAogICAgaW50ZXJwb2xhdGUgOiAvPCU9KFtcc1xTXSs/KSU+L2csCiAgICBlc2NhcGUgICAgICA6IC88JS0oW1xzXFNdKz8pJT4vZwogIH07CgogIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW4KICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzCiAgLy8gZ3VhcmFudGVlZCBub3QgdG8gbWF0Y2guCiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87CgogIC8vIENlcnRhaW4gY2hhcmFjdGVycyBuZWVkIHRvIGJlIGVzY2FwZWQgc28gdGhhdCB0aGV5IGNhbiBiZSBwdXQgaW50byBhCiAgLy8gc3RyaW5nIGxpdGVyYWwuCiAgdmFyIGVzY2FwZXMgPSB7CiAgICAiJyI6ICAgICAgIiciLAogICAgJ1xcJzogICAgICdcXCcsCiAgICAnXHInOiAgICAgJ3InLAogICAgJ1xuJzogICAgICduJywKICAgICdcdCc6ICAgICAndCcsCiAgICAnXHUyMDI4JzogJ3UyMDI4JywKICAgICdcdTIwMjknOiAndTIwMjknCiAgfTsKCiAgdmFyIGVzY2FwZXIgPSAvXFx8J3xccnxcbnxcdHxcdTIwMjh8XHUyMDI5L2c7CgogIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uCiAgLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLAogIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLgogIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBkYXRhLCBzZXR0aW5ncykgewogICAgdmFyIHJlbmRlcjsKICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7CgogICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uCiAgICB2YXIgbWF0Y2hlciA9IG5ldyBSZWdFeHAoWwogICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSwKICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSwKICAgICAgKHNldHRpbmdzLmV2YWx1YXRlIHx8IG5vTWF0Y2gpLnNvdXJjZQogICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpOwoKICAgIC8vIENvbXBpbGUgdGhlIHRlbXBsYXRlIHNvdXJjZSwgZXNjYXBpbmcgc3RyaW5nIGxpdGVyYWxzIGFwcHJvcHJpYXRlbHkuCiAgICB2YXIgaW5kZXggPSAwOwogICAgdmFyIHNvdXJjZSA9ICJfX3ArPSciOwogICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7CiAgICAgIHNvdXJjZSArPSB0ZXh0LnNsaWNlKGluZGV4LCBvZmZzZXQpCiAgICAgICAgLnJlcGxhY2UoZXNjYXBlciwgZnVuY3Rpb24obWF0Y2gpIHsgcmV0dXJuICdcXCcgKyBlc2NhcGVzW21hdGNoXTsgfSk7CgogICAgICBpZiAoZXNjYXBlKSB7CiAgICAgICAgc291cmNlICs9ICInK1xuKChfX3Q9KCIgKyBlc2NhcGUgKyAiKSk9PW51bGw/Jyc6Xy5lc2NhcGUoX190KSkrXG4nIjsKICAgICAgfQogICAgICBpZiAoaW50ZXJwb2xhdGUpIHsKICAgICAgICBzb3VyY2UgKz0gIicrXG4oKF9fdD0oIiArIGludGVycG9sYXRlICsgIikpPT1udWxsPycnOl9fdCkrXG4nIjsKICAgICAgfQogICAgICBpZiAoZXZhbHVhdGUpIHsKICAgICAgICBzb3VyY2UgKz0gIic7XG4iICsgZXZhbHVhdGUgKyAiXG5fX3ArPSciOwogICAgICB9CiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoOwogICAgICByZXR1cm4gbWF0Y2g7CiAgICB9KTsKICAgIHNvdXJjZSArPSAiJztcbiI7CgogICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS4KICAgIGlmICghc2V0dGluZ3MudmFyaWFibGUpIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xuJyArIHNvdXJjZSArICd9XG4nOwoKICAgIHNvdXJjZSA9ICJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sIiArCiAgICAgICJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xuIiArCiAgICAgIHNvdXJjZSArICJyZXR1cm4gX19wO1xuIjsKCiAgICB0cnkgewogICAgICByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgZS5zb3VyY2UgPSBzb3VyY2U7CiAgICAgIHRocm93IGU7CiAgICB9CgogICAgaWYgKGRhdGEpIHJldHVybiByZW5kZXIoZGF0YSwgXyk7CiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7CiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBkYXRhLCBfKTsKICAgIH07CgogICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24gc291cmNlIGFzIGEgY29udmVuaWVuY2UgZm9yIHByZWNvbXBpbGF0aW9uLgogICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAoc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicpICsgJyl7XG4nICsgc291cmNlICsgJ30nOwoKICAgIHJldHVybiB0ZW1wbGF0ZTsKICB9OwoKICAvLyBBZGQgYSAiY2hhaW4iIGZ1bmN0aW9uLCB3aGljaCB3aWxsIGRlbGVnYXRlIHRvIHRoZSB3cmFwcGVyLgogIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBfKG9iaikuY2hhaW4oKTsKICB9OwoKICAvLyBPT1AKICAvLyAtLS0tLS0tLS0tLS0tLS0KICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdAogIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlCiAgLy8gdW5kZXJzY29yZSBmdW5jdGlvbnMuIFdyYXBwZWQgb2JqZWN0cyBtYXkgYmUgY2hhaW5lZC4KCiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLgogIHZhciByZXN1bHQgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiB0aGlzLl9jaGFpbiA/IF8ob2JqKS5jaGFpbigpIDogb2JqOwogIH07CgogIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC4KICBfLm1peGluKF8pOwoKICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLgogIGVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkgewogICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07CiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDsKICAgICAgbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTsKICAgICAgaWYgKChuYW1lID09ICdzaGlmdCcgfHwgbmFtZSA9PSAnc3BsaWNlJykgJiYgb2JqLmxlbmd0aCA9PT0gMCkgZGVsZXRlIG9ialswXTsKICAgICAgcmV0dXJuIHJlc3VsdC5jYWxsKHRoaXMsIG9iaik7CiAgICB9OwogIH0pOwoKICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci4KICBlYWNoKFsnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXSwgZnVuY3Rpb24obmFtZSkgewogICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07CiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgbWV0aG9kLmFwcGx5KHRoaXMuX3dyYXBwZWQsIGFyZ3VtZW50cykpOwogICAgfTsKICB9KTsKCiAgXy5leHRlbmQoXy5wcm90b3R5cGUsIHsKCiAgICAvLyBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuCiAgICBjaGFpbjogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuX2NoYWluID0gdHJ1ZTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIEV4dHJhY3RzIHRoZSByZXN1bHQgZnJvbSBhIHdyYXBwZWQgYW5kIGNoYWluZWQgb2JqZWN0LgogICAgdmFsdWU6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5fd3JhcHBlZDsKICAgIH0KCiAgfSk7CgogIC8vIEFNRCByZWdpc3RyYXRpb24gaGFwcGVucyBhdCB0aGUgZW5kIGZvciBjb21wYXRpYmlsaXR5IHdpdGggQU1EIGxvYWRlcnMKICAvLyB0aGF0IG1heSBub3QgZW5mb3JjZSBuZXh0LXR1cm4gc2VtYW50aWNzIG9uIG1vZHVsZXMuIEV2ZW4gdGhvdWdoIGdlbmVyYWwKICAvLyBwcmFjdGljZSBmb3IgQU1EIHJlZ2lzdHJhdGlvbiBpcyB0byBiZSBhbm9ueW1vdXMsIHVuZGVyc2NvcmUgcmVnaXN0ZXJzCiAgLy8gYXMgYSBuYW1lZCBtb2R1bGUgYmVjYXVzZSwgbGlrZSBqUXVlcnksIGl0IGlzIGEgYmFzZSBsaWJyYXJ5IHRoYXQgaXMKICAvLyBwb3B1bGFyIGVub3VnaCB0byBiZSBidW5kbGVkIGluIGEgdGhpcmQgcGFydHkgbGliLCBidXQgbm90IGJlIHBhcnQgb2YKICAvLyBhbiBBTUQgbG9hZCByZXF1ZXN0LiBUaG9zZSBjYXNlcyBjb3VsZCBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGFuCiAgLy8gYW5vbnltb3VzIGRlZmluZSgpIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgbG9hZGVyIHJlcXVlc3QuCiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgewogICAgZGVmaW5lKCd1bmRlcnNjb3JlJywgW10sIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gXzsKICAgIH0pOwogIH0KfSkuY2FsbCh0aGlzKTsKCi8vICAgICBCYWNrYm9uZS5qcyAxLjEuMgoKLy8gICAgIChjKSAyMDEwLTIwMTQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnMKLy8gICAgIEJhY2tib25lIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgovLyAgICAgRm9yIGFsbCBkZXRhaWxzIGFuZCBkb2N1bWVudGF0aW9uOgovLyAgICAgaHR0cDovL2JhY2tib25lanMub3JnCgooZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkgewoKICAvLyBTZXQgdXAgQmFja2JvbmUgYXBwcm9wcmlhdGVseSBmb3IgdGhlIGVudmlyb25tZW50LiBTdGFydCB3aXRoIEFNRC4KICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7CiAgICBkZWZpbmUoJ2JhY2tib25lJyxbJ3VuZGVyc2NvcmUnLCAnanF1ZXJ5JywgJ2V4cG9ydHMnXSwgZnVuY3Rpb24oXywgJCwgZXhwb3J0cykgewogICAgICAvLyBFeHBvcnQgZ2xvYmFsIGV2ZW4gaW4gQU1EIGNhc2UgaW4gY2FzZSB0aGlzIHNjcmlwdCBpcyBsb2FkZWQgd2l0aAogICAgICAvLyBvdGhlcnMgdGhhdCBtYXkgc3RpbGwgZXhwZWN0IGEgZ2xvYmFsIEJhY2tib25lLgogICAgICByb290LkJhY2tib25lID0gZmFjdG9yeShyb290LCBleHBvcnRzLCBfLCAkKTsKICAgIH0pOwoKICAvLyBOZXh0IGZvciBOb2RlLmpzIG9yIENvbW1vbkpTLiBqUXVlcnkgbWF5IG5vdCBiZSBuZWVkZWQgYXMgYSBtb2R1bGUuCiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIHZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpOwogICAgZmFjdG9yeShyb290LCBleHBvcnRzLCBfKTsKCiAgLy8gRmluYWxseSwgYXMgYSBicm93c2VyIGdsb2JhbC4KICB9IGVsc2UgewogICAgcm9vdC5CYWNrYm9uZSA9IGZhY3Rvcnkocm9vdCwge30sIHJvb3QuXywgKHJvb3QualF1ZXJ5IHx8IHJvb3QuWmVwdG8gfHwgcm9vdC5lbmRlciB8fCByb290LiQpKTsKICB9Cgp9KHRoaXMsIGZ1bmN0aW9uKHJvb3QsIEJhY2tib25lLCBfLCAkKSB7CgogIC8vIEluaXRpYWwgU2V0dXAKICAvLyAtLS0tLS0tLS0tLS0tCgogIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgQmFja2JvbmVgIHZhcmlhYmxlLCBzbyB0aGF0IGl0IGNhbiBiZQogIC8vIHJlc3RvcmVkIGxhdGVyIG9uLCBpZiBgbm9Db25mbGljdGAgaXMgdXNlZC4KICB2YXIgcHJldmlvdXNCYWNrYm9uZSA9IHJvb3QuQmFja2JvbmU7CgogIC8vIENyZWF0ZSBsb2NhbCByZWZlcmVuY2VzIHRvIGFycmF5IG1ldGhvZHMgd2UnbGwgd2FudCB0byB1c2UgbGF0ZXIuCiAgdmFyIGFycmF5ID0gW107CiAgdmFyIHB1c2ggPSBhcnJheS5wdXNoOwogIHZhciBzbGljZSA9IGFycmF5LnNsaWNlOwogIHZhciBzcGxpY2UgPSBhcnJheS5zcGxpY2U7CgogIC8vIEN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgbGlicmFyeS4gS2VlcCBpbiBzeW5jIHdpdGggYHBhY2thZ2UuanNvbmAuCiAgQmFja2JvbmUuVkVSU0lPTiA9ICcxLjEuMic7CgogIC8vIEZvciBCYWNrYm9uZSdzIHB1cnBvc2VzLCBqUXVlcnksIFplcHRvLCBFbmRlciwgb3IgTXkgTGlicmFyeSAoa2lkZGluZykgb3ducwogIC8vIHRoZSBgJGAgdmFyaWFibGUuCiAgQmFja2JvbmUuJCA9ICQ7CgogIC8vIFJ1bnMgQmFja2JvbmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYEJhY2tib25lYCB2YXJpYWJsZQogIC8vIHRvIGl0cyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGlzIEJhY2tib25lIG9iamVjdC4KICBCYWNrYm9uZS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7CiAgICByb290LkJhY2tib25lID0gcHJldmlvdXNCYWNrYm9uZTsKICAgIHJldHVybiB0aGlzOwogIH07CgogIC8vIFR1cm4gb24gYGVtdWxhdGVIVFRQYCB0byBzdXBwb3J0IGxlZ2FjeSBIVFRQIHNlcnZlcnMuIFNldHRpbmcgdGhpcyBvcHRpb24KICAvLyB3aWxsIGZha2UgYCJQQVRDSCJgLCBgIlBVVCJgIGFuZCBgIkRFTEVURSJgIHJlcXVlc3RzIHZpYSB0aGUgYF9tZXRob2RgIHBhcmFtZXRlciBhbmQKICAvLyBzZXQgYSBgWC1IdHRwLU1ldGhvZC1PdmVycmlkZWAgaGVhZGVyLgogIEJhY2tib25lLmVtdWxhdGVIVFRQID0gZmFsc2U7CgogIC8vIFR1cm4gb24gYGVtdWxhdGVKU09OYCB0byBzdXBwb3J0IGxlZ2FjeSBzZXJ2ZXJzIHRoYXQgY2FuJ3QgZGVhbCB3aXRoIGRpcmVjdAogIC8vIGBhcHBsaWNhdGlvbi9qc29uYCByZXF1ZXN0cyAuLi4gd2lsbCBlbmNvZGUgdGhlIGJvZHkgYXMKICAvLyBgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkYCBpbnN0ZWFkIGFuZCB3aWxsIHNlbmQgdGhlIG1vZGVsIGluIGEKICAvLyBmb3JtIHBhcmFtIG5hbWVkIGBtb2RlbGAuCiAgQmFja2JvbmUuZW11bGF0ZUpTT04gPSBmYWxzZTsKCiAgLy8gQmFja2JvbmUuRXZlbnRzCiAgLy8gLS0tLS0tLS0tLS0tLS0tCgogIC8vIEEgbW9kdWxlIHRoYXQgY2FuIGJlIG1peGVkIGluIHRvICphbnkgb2JqZWN0KiBpbiBvcmRlciB0byBwcm92aWRlIGl0IHdpdGgKICAvLyBjdXN0b20gZXZlbnRzLiBZb3UgbWF5IGJpbmQgd2l0aCBgb25gIG9yIHJlbW92ZSB3aXRoIGBvZmZgIGNhbGxiYWNrCiAgLy8gZnVuY3Rpb25zIHRvIGFuIGV2ZW50OyBgdHJpZ2dlcmAtaW5nIGFuIGV2ZW50IGZpcmVzIGFsbCBjYWxsYmFja3MgaW4KICAvLyBzdWNjZXNzaW9uLgogIC8vCiAgLy8gICAgIHZhciBvYmplY3QgPSB7fTsKICAvLyAgICAgXy5leHRlbmQob2JqZWN0LCBCYWNrYm9uZS5FdmVudHMpOwogIC8vICAgICBvYmplY3Qub24oJ2V4cGFuZCcsIGZ1bmN0aW9uKCl7IGFsZXJ0KCdleHBhbmRlZCcpOyB9KTsKICAvLyAgICAgb2JqZWN0LnRyaWdnZXIoJ2V4cGFuZCcpOwogIC8vCiAgdmFyIEV2ZW50cyA9IEJhY2tib25lLkV2ZW50cyA9IHsKCiAgICAvLyBCaW5kIGFuIGV2ZW50IHRvIGEgYGNhbGxiYWNrYCBmdW5jdGlvbi4gUGFzc2luZyBgImFsbCJgIHdpbGwgYmluZAogICAgLy8gdGhlIGNhbGxiYWNrIHRvIGFsbCBldmVudHMgZmlyZWQuCiAgICBvbjogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHsKICAgICAgaWYgKCFldmVudHNBcGkodGhpcywgJ29uJywgbmFtZSwgW2NhbGxiYWNrLCBjb250ZXh0XSkgfHwgIWNhbGxiYWNrKSByZXR1cm4gdGhpczsKICAgICAgdGhpcy5fZXZlbnRzIHx8ICh0aGlzLl9ldmVudHMgPSB7fSk7CiAgICAgIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHNbbmFtZV0gfHwgKHRoaXMuX2V2ZW50c1tuYW1lXSA9IFtdKTsKICAgICAgZXZlbnRzLnB1c2goe2NhbGxiYWNrOiBjYWxsYmFjaywgY29udGV4dDogY29udGV4dCwgY3R4OiBjb250ZXh0IHx8IHRoaXN9KTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIEJpbmQgYW4gZXZlbnQgdG8gb25seSBiZSB0cmlnZ2VyZWQgYSBzaW5nbGUgdGltZS4gQWZ0ZXIgdGhlIGZpcnN0IHRpbWUKICAgIC8vIHRoZSBjYWxsYmFjayBpcyBpbnZva2VkLCBpdCB3aWxsIGJlIHJlbW92ZWQuCiAgICBvbmNlOiBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaywgY29udGV4dCkgewogICAgICBpZiAoIWV2ZW50c0FwaSh0aGlzLCAnb25jZScsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pIHx8ICFjYWxsYmFjaykgcmV0dXJuIHRoaXM7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIG9uY2UgPSBfLm9uY2UoZnVuY3Rpb24oKSB7CiAgICAgICAgc2VsZi5vZmYobmFtZSwgb25jZSk7CiAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfSk7CiAgICAgIG9uY2UuX2NhbGxiYWNrID0gY2FsbGJhY2s7CiAgICAgIHJldHVybiB0aGlzLm9uKG5hbWUsIG9uY2UsIGNvbnRleHQpOwogICAgfSwKCiAgICAvLyBSZW1vdmUgb25lIG9yIG1hbnkgY2FsbGJhY2tzLiBJZiBgY29udGV4dGAgaXMgbnVsbCwgcmVtb3ZlcyBhbGwKICAgIC8vIGNhbGxiYWNrcyB3aXRoIHRoYXQgZnVuY3Rpb24uIElmIGBjYWxsYmFja2AgaXMgbnVsbCwgcmVtb3ZlcyBhbGwKICAgIC8vIGNhbGxiYWNrcyBmb3IgdGhlIGV2ZW50LiBJZiBgbmFtZWAgaXMgbnVsbCwgcmVtb3ZlcyBhbGwgYm91bmQKICAgIC8vIGNhbGxiYWNrcyBmb3IgYWxsIGV2ZW50cy4KICAgIG9mZjogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHsKICAgICAgdmFyIHJldGFpbiwgZXYsIGV2ZW50cywgbmFtZXMsIGksIGwsIGosIGs7CiAgICAgIGlmICghdGhpcy5fZXZlbnRzIHx8ICFldmVudHNBcGkodGhpcywgJ29mZicsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pKSByZXR1cm4gdGhpczsKICAgICAgaWYgKCFuYW1lICYmICFjYWxsYmFjayAmJiAhY29udGV4dCkgewogICAgICAgIHRoaXMuX2V2ZW50cyA9IHZvaWQgMDsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgICBuYW1lcyA9IG5hbWUgPyBbbmFtZV0gOiBfLmtleXModGhpcy5fZXZlbnRzKTsKICAgICAgZm9yIChpID0gMCwgbCA9IG5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIG5hbWUgPSBuYW1lc1tpXTsKICAgICAgICBpZiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzW25hbWVdKSB7CiAgICAgICAgICB0aGlzLl9ldmVudHNbbmFtZV0gPSByZXRhaW4gPSBbXTsKICAgICAgICAgIGlmIChjYWxsYmFjayB8fCBjb250ZXh0KSB7CiAgICAgICAgICAgIGZvciAoaiA9IDAsIGsgPSBldmVudHMubGVuZ3RoOyBqIDwgazsgaisrKSB7CiAgICAgICAgICAgICAgZXYgPSBldmVudHNbal07CiAgICAgICAgICAgICAgaWYgKChjYWxsYmFjayAmJiBjYWxsYmFjayAhPT0gZXYuY2FsbGJhY2sgJiYgY2FsbGJhY2sgIT09IGV2LmNhbGxiYWNrLl9jYWxsYmFjaykgfHwKICAgICAgICAgICAgICAgICAgKGNvbnRleHQgJiYgY29udGV4dCAhPT0gZXYuY29udGV4dCkpIHsKICAgICAgICAgICAgICAgIHJldGFpbi5wdXNoKGV2KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghcmV0YWluLmxlbmd0aCkgZGVsZXRlIHRoaXMuX2V2ZW50c1tuYW1lXTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBUcmlnZ2VyIG9uZSBvciBtYW55IGV2ZW50cywgZmlyaW5nIGFsbCBib3VuZCBjYWxsYmFja3MuIENhbGxiYWNrcyBhcmUKICAgIC8vIHBhc3NlZCB0aGUgc2FtZSBhcmd1bWVudHMgYXMgYHRyaWdnZXJgIGlzLCBhcGFydCBmcm9tIHRoZSBldmVudCBuYW1lCiAgICAvLyAodW5sZXNzIHlvdSdyZSBsaXN0ZW5pbmcgb24gYCJhbGwiYCwgd2hpY2ggd2lsbCBjYXVzZSB5b3VyIGNhbGxiYWNrIHRvCiAgICAvLyByZWNlaXZlIHRoZSB0cnVlIG5hbWUgb2YgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBhcmd1bWVudCkuCiAgICB0cmlnZ2VyOiBmdW5jdGlvbihuYW1lKSB7CiAgICAgIGlmICghdGhpcy5fZXZlbnRzKSByZXR1cm4gdGhpczsKICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgIGlmICghZXZlbnRzQXBpKHRoaXMsICd0cmlnZ2VyJywgbmFtZSwgYXJncykpIHJldHVybiB0aGlzOwogICAgICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzW25hbWVdOwogICAgICB2YXIgYWxsRXZlbnRzID0gdGhpcy5fZXZlbnRzLmFsbDsKICAgICAgaWYgKGV2ZW50cykgdHJpZ2dlckV2ZW50cyhldmVudHMsIGFyZ3MpOwogICAgICBpZiAoYWxsRXZlbnRzKSB0cmlnZ2VyRXZlbnRzKGFsbEV2ZW50cywgYXJndW1lbnRzKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFRlbGwgdGhpcyBvYmplY3QgdG8gc3RvcCBsaXN0ZW5pbmcgdG8gZWl0aGVyIHNwZWNpZmljIGV2ZW50cyAuLi4gb3IKICAgIC8vIHRvIGV2ZXJ5IG9iamVjdCBpdCdzIGN1cnJlbnRseSBsaXN0ZW5pbmcgdG8uCiAgICBzdG9wTGlzdGVuaW5nOiBmdW5jdGlvbihvYmosIG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgIHZhciBsaXN0ZW5pbmdUbyA9IHRoaXMuX2xpc3RlbmluZ1RvOwogICAgICBpZiAoIWxpc3RlbmluZ1RvKSByZXR1cm4gdGhpczsKICAgICAgdmFyIHJlbW92ZSA9ICFuYW1lICYmICFjYWxsYmFjazsKICAgICAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIGNhbGxiYWNrID0gdGhpczsKICAgICAgaWYgKG9iaikgKGxpc3RlbmluZ1RvID0ge30pW29iai5fbGlzdGVuSWRdID0gb2JqOwogICAgICBmb3IgKHZhciBpZCBpbiBsaXN0ZW5pbmdUbykgewogICAgICAgIG9iaiA9IGxpc3RlbmluZ1RvW2lkXTsKICAgICAgICBvYmoub2ZmKG5hbWUsIGNhbGxiYWNrLCB0aGlzKTsKICAgICAgICBpZiAocmVtb3ZlIHx8IF8uaXNFbXB0eShvYmouX2V2ZW50cykpIGRlbGV0ZSB0aGlzLl9saXN0ZW5pbmdUb1tpZF07CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogIH07CgogIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHNwbGl0IGV2ZW50IHN0cmluZ3MuCiAgdmFyIGV2ZW50U3BsaXR0ZXIgPSAvXHMrLzsKCiAgLy8gSW1wbGVtZW50IGZhbmN5IGZlYXR1cmVzIG9mIHRoZSBFdmVudHMgQVBJIHN1Y2ggYXMgbXVsdGlwbGUgZXZlbnQKICAvLyBuYW1lcyBgImNoYW5nZSBibHVyImAgYW5kIGpRdWVyeS1zdHlsZSBldmVudCBtYXBzIGB7Y2hhbmdlOiBhY3Rpb259YAogIC8vIGluIHRlcm1zIG9mIHRoZSBleGlzdGluZyBBUEkuCiAgdmFyIGV2ZW50c0FwaSA9IGZ1bmN0aW9uKG9iaiwgYWN0aW9uLCBuYW1lLCByZXN0KSB7CiAgICBpZiAoIW5hbWUpIHJldHVybiB0cnVlOwoKICAgIC8vIEhhbmRsZSBldmVudCBtYXBzLgogICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JykgewogICAgICBmb3IgKHZhciBrZXkgaW4gbmFtZSkgewogICAgICAgIG9ialthY3Rpb25dLmFwcGx5KG9iaiwgW2tleSwgbmFtZVtrZXldXS5jb25jYXQocmVzdCkpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvLyBIYW5kbGUgc3BhY2Ugc2VwYXJhdGVkIGV2ZW50IG5hbWVzLgogICAgaWYgKGV2ZW50U3BsaXR0ZXIudGVzdChuYW1lKSkgewogICAgICB2YXIgbmFtZXMgPSBuYW1lLnNwbGl0KGV2ZW50U3BsaXR0ZXIpOwogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIG9ialthY3Rpb25dLmFwcGx5KG9iaiwgW25hbWVzW2ldXS5jb25jYXQocmVzdCkpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICByZXR1cm4gdHJ1ZTsKICB9OwoKICAvLyBBIGRpZmZpY3VsdC10by1iZWxpZXZlLCBidXQgb3B0aW1pemVkIGludGVybmFsIGRpc3BhdGNoIGZ1bmN0aW9uIGZvcgogIC8vIHRyaWdnZXJpbmcgZXZlbnRzLiBUcmllcyB0byBrZWVwIHRoZSB1c3VhbCBjYXNlcyBzcGVlZHkgKG1vc3QgaW50ZXJuYWwKICAvLyBCYWNrYm9uZSBldmVudHMgaGF2ZSAzIGFyZ3VtZW50cykuCiAgdmFyIHRyaWdnZXJFdmVudHMgPSBmdW5jdGlvbihldmVudHMsIGFyZ3MpIHsKICAgIHZhciBldiwgaSA9IC0xLCBsID0gZXZlbnRzLmxlbmd0aCwgYTEgPSBhcmdzWzBdLCBhMiA9IGFyZ3NbMV0sIGEzID0gYXJnc1syXTsKICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHsKICAgICAgY2FzZSAwOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCk7IHJldHVybjsKICAgICAgY2FzZSAxOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEpOyByZXR1cm47CiAgICAgIGNhc2UgMjogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgsIGExLCBhMik7IHJldHVybjsKICAgICAgY2FzZSAzOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEsIGEyLCBhMyk7IHJldHVybjsKICAgICAgZGVmYXVsdDogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suYXBwbHkoZXYuY3R4LCBhcmdzKTsgcmV0dXJuOwogICAgfQogIH07CgogIHZhciBsaXN0ZW5NZXRob2RzID0ge2xpc3RlblRvOiAnb24nLCBsaXN0ZW5Ub09uY2U6ICdvbmNlJ307CgogIC8vIEludmVyc2lvbi1vZi1jb250cm9sIHZlcnNpb25zIG9mIGBvbmAgYW5kIGBvbmNlYC4gVGVsbCAqdGhpcyogb2JqZWN0IHRvCiAgLy8gbGlzdGVuIHRvIGFuIGV2ZW50IGluIGFub3RoZXIgb2JqZWN0IC4uLiBrZWVwaW5nIHRyYWNrIG9mIHdoYXQgaXQncwogIC8vIGxpc3RlbmluZyB0by4KICBfLmVhY2gobGlzdGVuTWV0aG9kcywgZnVuY3Rpb24oaW1wbGVtZW50YXRpb24sIG1ldGhvZCkgewogICAgRXZlbnRzW21ldGhvZF0gPSBmdW5jdGlvbihvYmosIG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgIHZhciBsaXN0ZW5pbmdUbyA9IHRoaXMuX2xpc3RlbmluZ1RvIHx8ICh0aGlzLl9saXN0ZW5pbmdUbyA9IHt9KTsKICAgICAgdmFyIGlkID0gb2JqLl9saXN0ZW5JZCB8fCAob2JqLl9saXN0ZW5JZCA9IF8udW5pcXVlSWQoJ2wnKSk7CiAgICAgIGxpc3RlbmluZ1RvW2lkXSA9IG9iajsKICAgICAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIGNhbGxiYWNrID0gdGhpczsKICAgICAgb2JqW2ltcGxlbWVudGF0aW9uXShuYW1lLCBjYWxsYmFjaywgdGhpcyk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICB9KTsKCiAgLy8gQWxpYXNlcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuCiAgRXZlbnRzLmJpbmQgICA9IEV2ZW50cy5vbjsKICBFdmVudHMudW5iaW5kID0gRXZlbnRzLm9mZjsKCiAgLy8gQWxsb3cgdGhlIGBCYWNrYm9uZWAgb2JqZWN0IHRvIHNlcnZlIGFzIGEgZ2xvYmFsIGV2ZW50IGJ1cywgZm9yIGZvbGtzIHdobwogIC8vIHdhbnQgZ2xvYmFsICJwdWJzdWIiIGluIGEgY29udmVuaWVudCBwbGFjZS4KICBfLmV4dGVuZChCYWNrYm9uZSwgRXZlbnRzKTsKCiAgLy8gQmFja2JvbmUuTW9kZWwKICAvLyAtLS0tLS0tLS0tLS0tLQoKICAvLyBCYWNrYm9uZSAqKk1vZGVscyoqIGFyZSB0aGUgYmFzaWMgZGF0YSBvYmplY3QgaW4gdGhlIGZyYW1ld29yayAtLQogIC8vIGZyZXF1ZW50bHkgcmVwcmVzZW50aW5nIGEgcm93IGluIGEgdGFibGUgaW4gYSBkYXRhYmFzZSBvbiB5b3VyIHNlcnZlci4KICAvLyBBIGRpc2NyZXRlIGNodW5rIG9mIGRhdGEgYW5kIGEgYnVuY2ggb2YgdXNlZnVsLCByZWxhdGVkIG1ldGhvZHMgZm9yCiAgLy8gcGVyZm9ybWluZyBjb21wdXRhdGlvbnMgYW5kIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGF0IGRhdGEuCgogIC8vIENyZWF0ZSBhIG5ldyBtb2RlbCB3aXRoIHRoZSBzcGVjaWZpZWQgYXR0cmlidXRlcy4gQSBjbGllbnQgaWQgKGBjaWRgKQogIC8vIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGFuZCBhc3NpZ25lZCBmb3IgeW91LgogIHZhciBNb2RlbCA9IEJhY2tib25lLk1vZGVsID0gZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykgewogICAgdmFyIGF0dHJzID0gYXR0cmlidXRlcyB8fCB7fTsKICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICB0aGlzLmNpZCA9IF8udW5pcXVlSWQoJ2MnKTsKICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9OwogICAgaWYgKG9wdGlvbnMuY29sbGVjdGlvbikgdGhpcy5jb2xsZWN0aW9uID0gb3B0aW9ucy5jb2xsZWN0aW9uOwogICAgaWYgKG9wdGlvbnMucGFyc2UpIGF0dHJzID0gdGhpcy5wYXJzZShhdHRycywgb3B0aW9ucykgfHwge307CiAgICBhdHRycyA9IF8uZGVmYXVsdHMoe30sIGF0dHJzLCBfLnJlc3VsdCh0aGlzLCAnZGVmYXVsdHMnKSk7CiAgICB0aGlzLnNldChhdHRycywgb3B0aW9ucyk7CiAgICB0aGlzLmNoYW5nZWQgPSB7fTsKICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07CgogIC8vIEF0dGFjaCBhbGwgaW5oZXJpdGFibGUgbWV0aG9kcyB0byB0aGUgTW9kZWwgcHJvdG90eXBlLgogIF8uZXh0ZW5kKE1vZGVsLnByb3RvdHlwZSwgRXZlbnRzLCB7CgogICAgLy8gQSBoYXNoIG9mIGF0dHJpYnV0ZXMgd2hvc2UgY3VycmVudCBhbmQgcHJldmlvdXMgdmFsdWUgZGlmZmVyLgogICAgY2hhbmdlZDogbnVsbCwKCiAgICAvLyBUaGUgdmFsdWUgcmV0dXJuZWQgZHVyaW5nIHRoZSBsYXN0IGZhaWxlZCB2YWxpZGF0aW9uLgogICAgdmFsaWRhdGlvbkVycm9yOiBudWxsLAoKICAgIC8vIFRoZSBkZWZhdWx0IG5hbWUgZm9yIHRoZSBKU09OIGBpZGAgYXR0cmlidXRlIGlzIGAiaWQiYC4gTW9uZ29EQiBhbmQKICAgIC8vIENvdWNoREIgdXNlcnMgbWF5IHdhbnQgdG8gc2V0IHRoaXMgdG8gYCJfaWQiYC4KICAgIGlkQXR0cmlidXRlOiAnaWQnLAoKICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sCgogICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgbW9kZWwncyBgYXR0cmlidXRlc2Agb2JqZWN0LgogICAgdG9KU09OOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHJldHVybiBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7CiAgICB9LAoKICAgIC8vIFByb3h5IGBCYWNrYm9uZS5zeW5jYCBieSBkZWZhdWx0IC0tIGJ1dCBvdmVycmlkZSB0aGlzIGlmIHlvdSBuZWVkCiAgICAvLyBjdXN0b20gc3luY2luZyBzZW1hbnRpY3MgZm9yICp0aGlzKiBwYXJ0aWN1bGFyIG1vZGVsLgogICAgc3luYzogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBCYWNrYm9uZS5zeW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9LAoKICAgIC8vIEdldCB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlLgogICAgZ2V0OiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbYXR0cl07CiAgICB9LAoKICAgIC8vIEdldCB0aGUgSFRNTC1lc2NhcGVkIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZS4KICAgIGVzY2FwZTogZnVuY3Rpb24oYXR0cikgewogICAgICByZXR1cm4gXy5lc2NhcGUodGhpcy5nZXQoYXR0cikpOwogICAgfSwKCiAgICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXR0cmlidXRlIGNvbnRhaW5zIGEgdmFsdWUgdGhhdCBpcyBub3QgbnVsbAogICAgLy8gb3IgdW5kZWZpbmVkLgogICAgaGFzOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIHJldHVybiB0aGlzLmdldChhdHRyKSAhPSBudWxsOwogICAgfSwKCiAgICAvLyBTZXQgYSBoYXNoIG9mIG1vZGVsIGF0dHJpYnV0ZXMgb24gdGhlIG9iamVjdCwgZmlyaW5nIGAiY2hhbmdlImAuIFRoaXMgaXMKICAgIC8vIHRoZSBjb3JlIHByaW1pdGl2ZSBvcGVyYXRpb24gb2YgYSBtb2RlbCwgdXBkYXRpbmcgdGhlIGRhdGEgYW5kIG5vdGlmeWluZwogICAgLy8gYW55b25lIHdobyBuZWVkcyB0byBrbm93IGFib3V0IHRoZSBjaGFuZ2UgaW4gc3RhdGUuIFRoZSBoZWFydCBvZiB0aGUgYmVhc3QuCiAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsLCBvcHRpb25zKSB7CiAgICAgIHZhciBhdHRyLCBhdHRycywgdW5zZXQsIGNoYW5nZXMsIHNpbGVudCwgY2hhbmdpbmcsIHByZXYsIGN1cnJlbnQ7CiAgICAgIGlmIChrZXkgPT0gbnVsbCkgcmV0dXJuIHRoaXM7CgogICAgICAvLyBIYW5kbGUgYm90aCBgImtleSIsIHZhbHVlYCBhbmQgYHtrZXk6IHZhbHVlfWAgLXN0eWxlIGFyZ3VtZW50cy4KICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgYXR0cnMgPSBrZXk7CiAgICAgICAgb3B0aW9ucyA9IHZhbDsKICAgICAgfSBlbHNlIHsKICAgICAgICAoYXR0cnMgPSB7fSlba2V5XSA9IHZhbDsKICAgICAgfQoKICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKCiAgICAgIC8vIFJ1biB2YWxpZGF0aW9uLgogICAgICBpZiAoIXRoaXMuX3ZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlOwoKICAgICAgLy8gRXh0cmFjdCBhdHRyaWJ1dGVzIGFuZCBvcHRpb25zLgogICAgICB1bnNldCAgICAgICAgICAgPSBvcHRpb25zLnVuc2V0OwogICAgICBzaWxlbnQgICAgICAgICAgPSBvcHRpb25zLnNpbGVudDsKICAgICAgY2hhbmdlcyAgICAgICAgID0gW107CiAgICAgIGNoYW5naW5nICAgICAgICA9IHRoaXMuX2NoYW5naW5nOwogICAgICB0aGlzLl9jaGFuZ2luZyAgPSB0cnVlOwoKICAgICAgaWYgKCFjaGFuZ2luZykgewogICAgICAgIHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA9IF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTsKICAgICAgICB0aGlzLmNoYW5nZWQgPSB7fTsKICAgICAgfQogICAgICBjdXJyZW50ID0gdGhpcy5hdHRyaWJ1dGVzLCBwcmV2ID0gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzOwoKICAgICAgLy8gQ2hlY2sgZm9yIGNoYW5nZXMgb2YgYGlkYC4KICAgICAgaWYgKHRoaXMuaWRBdHRyaWJ1dGUgaW4gYXR0cnMpIHRoaXMuaWQgPSBhdHRyc1t0aGlzLmlkQXR0cmlidXRlXTsKCiAgICAgIC8vIEZvciBlYWNoIGBzZXRgIGF0dHJpYnV0ZSwgdXBkYXRlIG9yIGRlbGV0ZSB0aGUgY3VycmVudCB2YWx1ZS4KICAgICAgZm9yIChhdHRyIGluIGF0dHJzKSB7CiAgICAgICAgdmFsID0gYXR0cnNbYXR0cl07CiAgICAgICAgaWYgKCFfLmlzRXF1YWwoY3VycmVudFthdHRyXSwgdmFsKSkgY2hhbmdlcy5wdXNoKGF0dHIpOwogICAgICAgIGlmICghXy5pc0VxdWFsKHByZXZbYXR0cl0sIHZhbCkpIHsKICAgICAgICAgIHRoaXMuY2hhbmdlZFthdHRyXSA9IHZhbDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVsZXRlIHRoaXMuY2hhbmdlZFthdHRyXTsKICAgICAgICB9CiAgICAgICAgdW5zZXQgPyBkZWxldGUgY3VycmVudFthdHRyXSA6IGN1cnJlbnRbYXR0cl0gPSB2YWw7CiAgICAgIH0KCiAgICAgIC8vIFRyaWdnZXIgYWxsIHJlbGV2YW50IGF0dHJpYnV0ZSBjaGFuZ2VzLgogICAgICBpZiAoIXNpbGVudCkgewogICAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCkgdGhpcy5fcGVuZGluZyA9IG9wdGlvbnM7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGFuZ2VzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgdGhpcy50cmlnZ2VyKCdjaGFuZ2U6JyArIGNoYW5nZXNbaV0sIHRoaXMsIGN1cnJlbnRbY2hhbmdlc1tpXV0sIG9wdGlvbnMpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gWW91IG1pZ2h0IGJlIHdvbmRlcmluZyB3aHkgdGhlcmUncyBhIGB3aGlsZWAgbG9vcCBoZXJlLiBDaGFuZ2VzIGNhbgogICAgICAvLyBiZSByZWN1cnNpdmVseSBuZXN0ZWQgd2l0aGluIGAiY2hhbmdlImAgZXZlbnRzLgogICAgICBpZiAoY2hhbmdpbmcpIHJldHVybiB0aGlzOwogICAgICBpZiAoIXNpbGVudCkgewogICAgICAgIHdoaWxlICh0aGlzLl9wZW5kaW5nKSB7CiAgICAgICAgICBvcHRpb25zID0gdGhpcy5fcGVuZGluZzsKICAgICAgICAgIHRoaXMuX3BlbmRpbmcgPSBmYWxzZTsKICAgICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlJywgdGhpcywgb3B0aW9ucyk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuX3BlbmRpbmcgPSBmYWxzZTsKICAgICAgdGhpcy5fY2hhbmdpbmcgPSBmYWxzZTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFJlbW92ZSBhbiBhdHRyaWJ1dGUgZnJvbSB0aGUgbW9kZWwsIGZpcmluZyBgImNoYW5nZSJgLiBgdW5zZXRgIGlzIGEgbm9vcAogICAgLy8gaWYgdGhlIGF0dHJpYnV0ZSBkb2Vzbid0IGV4aXN0LgogICAgdW5zZXQ6IGZ1bmN0aW9uKGF0dHIsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIHRoaXMuc2V0KGF0dHIsIHZvaWQgMCwgXy5leHRlbmQoe30sIG9wdGlvbnMsIHt1bnNldDogdHJ1ZX0pKTsKICAgIH0sCgogICAgLy8gQ2xlYXIgYWxsIGF0dHJpYnV0ZXMgb24gdGhlIG1vZGVsLCBmaXJpbmcgYCJjaGFuZ2UiYC4KICAgIGNsZWFyOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHZhciBhdHRycyA9IHt9OwogICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5hdHRyaWJ1dGVzKSBhdHRyc1trZXldID0gdm9pZCAwOwogICAgICByZXR1cm4gdGhpcy5zZXQoYXR0cnMsIF8uZXh0ZW5kKHt9LCBvcHRpb25zLCB7dW5zZXQ6IHRydWV9KSk7CiAgICB9LAoKICAgIC8vIERldGVybWluZSBpZiB0aGUgbW9kZWwgaGFzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgYCJjaGFuZ2UiYCBldmVudC4KICAgIC8vIElmIHlvdSBzcGVjaWZ5IGFuIGF0dHJpYnV0ZSBuYW1lLCBkZXRlcm1pbmUgaWYgdGhhdCBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQuCiAgICBoYXNDaGFuZ2VkOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIGlmIChhdHRyID09IG51bGwpIHJldHVybiAhXy5pc0VtcHR5KHRoaXMuY2hhbmdlZCk7CiAgICAgIHJldHVybiBfLmhhcyh0aGlzLmNoYW5nZWQsIGF0dHIpOwogICAgfSwKCiAgICAvLyBSZXR1cm4gYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBhdHRyaWJ1dGVzIHRoYXQgaGF2ZSBjaGFuZ2VkLCBvcgogICAgLy8gZmFsc2UgaWYgdGhlcmUgYXJlIG5vIGNoYW5nZWQgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBkZXRlcm1pbmluZyB3aGF0CiAgICAvLyBwYXJ0cyBvZiBhIHZpZXcgbmVlZCB0byBiZSB1cGRhdGVkIGFuZC9vciB3aGF0IGF0dHJpYnV0ZXMgbmVlZCB0byBiZQogICAgLy8gcGVyc2lzdGVkIHRvIHRoZSBzZXJ2ZXIuIFVuc2V0IGF0dHJpYnV0ZXMgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogICAgLy8gWW91IGNhbiBhbHNvIHBhc3MgYW4gYXR0cmlidXRlcyBvYmplY3QgdG8gZGlmZiBhZ2FpbnN0IHRoZSBtb2RlbCwKICAgIC8vIGRldGVybWluaW5nIGlmIHRoZXJlICp3b3VsZCBiZSogYSBjaGFuZ2UuCiAgICBjaGFuZ2VkQXR0cmlidXRlczogZnVuY3Rpb24oZGlmZikgewogICAgICBpZiAoIWRpZmYpIHJldHVybiB0aGlzLmhhc0NoYW5nZWQoKSA/IF8uY2xvbmUodGhpcy5jaGFuZ2VkKSA6IGZhbHNlOwogICAgICB2YXIgdmFsLCBjaGFuZ2VkID0gZmFsc2U7CiAgICAgIHZhciBvbGQgPSB0aGlzLl9jaGFuZ2luZyA/IHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA6IHRoaXMuYXR0cmlidXRlczsKICAgICAgZm9yICh2YXIgYXR0ciBpbiBkaWZmKSB7CiAgICAgICAgaWYgKF8uaXNFcXVhbChvbGRbYXR0cl0sICh2YWwgPSBkaWZmW2F0dHJdKSkpIGNvbnRpbnVlOwogICAgICAgIChjaGFuZ2VkIHx8IChjaGFuZ2VkID0ge30pKVthdHRyXSA9IHZhbDsKICAgICAgfQogICAgICByZXR1cm4gY2hhbmdlZDsKICAgIH0sCgogICAgLy8gR2V0IHRoZSBwcmV2aW91cyB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUsIHJlY29yZGVkIGF0IHRoZSB0aW1lIHRoZSBsYXN0CiAgICAvLyBgImNoYW5nZSJgIGV2ZW50IHdhcyBmaXJlZC4KICAgIHByZXZpb3VzOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIGlmIChhdHRyID09IG51bGwgfHwgIXRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcykgcmV0dXJuIG51bGw7CiAgICAgIHJldHVybiB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXNbYXR0cl07CiAgICB9LAoKICAgIC8vIEdldCBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIG1vZGVsIGF0IHRoZSB0aW1lIG9mIHRoZSBwcmV2aW91cwogICAgLy8gYCJjaGFuZ2UiYCBldmVudC4KICAgIHByZXZpb3VzQXR0cmlidXRlczogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBfLmNsb25lKHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyk7CiAgICB9LAoKICAgIC8vIEZldGNoIHRoZSBtb2RlbCBmcm9tIHRoZSBzZXJ2ZXIuIElmIHRoZSBzZXJ2ZXIncyByZXByZXNlbnRhdGlvbiBvZiB0aGUKICAgIC8vIG1vZGVsIGRpZmZlcnMgZnJvbSBpdHMgY3VycmVudCBhdHRyaWJ1dGVzLCB0aGV5IHdpbGwgYmUgb3ZlcnJpZGRlbiwKICAgIC8vIHRyaWdnZXJpbmcgYSBgImNoYW5nZSJgIGV2ZW50LgogICAgZmV0Y2g6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307CiAgICAgIGlmIChvcHRpb25zLnBhcnNlID09PSB2b2lkIDApIG9wdGlvbnMucGFyc2UgPSB0cnVlOwogICAgICB2YXIgbW9kZWwgPSB0aGlzOwogICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzczsKICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24ocmVzcCkgewogICAgICAgIGlmICghbW9kZWwuc2V0KG1vZGVsLnBhcnNlKHJlc3AsIG9wdGlvbnMpLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgICBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICB9OwogICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7CiAgICAgIHJldHVybiB0aGlzLnN5bmMoJ3JlYWQnLCB0aGlzLCBvcHRpb25zKTsKICAgIH0sCgogICAgLy8gU2V0IGEgaGFzaCBvZiBtb2RlbCBhdHRyaWJ1dGVzLCBhbmQgc3luYyB0aGUgbW9kZWwgdG8gdGhlIHNlcnZlci4KICAgIC8vIElmIHRoZSBzZXJ2ZXIgcmV0dXJucyBhbiBhdHRyaWJ1dGVzIGhhc2ggdGhhdCBkaWZmZXJzLCB0aGUgbW9kZWwncwogICAgLy8gc3RhdGUgd2lsbCBiZSBgc2V0YCBhZ2Fpbi4KICAgIHNhdmU6IGZ1bmN0aW9uKGtleSwgdmFsLCBvcHRpb25zKSB7CiAgICAgIHZhciBhdHRycywgbWV0aG9kLCB4aHIsIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7CgogICAgICAvLyBIYW5kbGUgYm90aCBgImtleSIsIHZhbHVlYCBhbmQgYHtrZXk6IHZhbHVlfWAgLXN0eWxlIGFyZ3VtZW50cy4KICAgICAgaWYgKGtleSA9PSBudWxsIHx8IHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgYXR0cnMgPSBrZXk7CiAgICAgICAgb3B0aW9ucyA9IHZhbDsKICAgICAgfSBlbHNlIHsKICAgICAgICAoYXR0cnMgPSB7fSlba2V5XSA9IHZhbDsKICAgICAgfQoKICAgICAgb3B0aW9ucyA9IF8uZXh0ZW5kKHt2YWxpZGF0ZTogdHJ1ZX0sIG9wdGlvbnMpOwoKICAgICAgLy8gSWYgd2UncmUgbm90IHdhaXRpbmcgYW5kIGF0dHJpYnV0ZXMgZXhpc3QsIHNhdmUgYWN0cyBhcwogICAgICAvLyBgc2V0KGF0dHIpLnNhdmUobnVsbCwgb3B0cylgIHdpdGggdmFsaWRhdGlvbi4gT3RoZXJ3aXNlLCBjaGVjayBpZgogICAgICAvLyB0aGUgbW9kZWwgd2lsbCBiZSB2YWxpZCB3aGVuIHRoZSBhdHRyaWJ1dGVzLCBpZiBhbnksIGFyZSBzZXQuCiAgICAgIGlmIChhdHRycyAmJiAhb3B0aW9ucy53YWl0KSB7CiAgICAgICAgaWYgKCF0aGlzLnNldChhdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoIXRoaXMuX3ZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICAvLyBTZXQgdGVtcG9yYXJ5IGF0dHJpYnV0ZXMgaWYgYHt3YWl0OiB0cnVlfWAuCiAgICAgIGlmIChhdHRycyAmJiBvcHRpb25zLndhaXQpIHsKICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBfLmV4dGVuZCh7fSwgYXR0cmlidXRlcywgYXR0cnMpOwogICAgICB9CgogICAgICAvLyBBZnRlciBhIHN1Y2Nlc3NmdWwgc2VydmVyLXNpZGUgc2F2ZSwgdGhlIGNsaWVudCBpcyAob3B0aW9uYWxseSkKICAgICAgLy8gdXBkYXRlZCB3aXRoIHRoZSBzZXJ2ZXItc2lkZSBzdGF0ZS4KICAgICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHZvaWQgMCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7CiAgICAgIHZhciBtb2RlbCA9IHRoaXM7CiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzOwogICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7CiAgICAgICAgLy8gRW5zdXJlIGF0dHJpYnV0ZXMgYXJlIHJlc3RvcmVkIGR1cmluZyBzeW5jaHJvbm91cyBzYXZlcy4KICAgICAgICBtb2RlbC5hdHRyaWJ1dGVzID0gYXR0cmlidXRlczsKICAgICAgICB2YXIgc2VydmVyQXR0cnMgPSBtb2RlbC5wYXJzZShyZXNwLCBvcHRpb25zKTsKICAgICAgICBpZiAob3B0aW9ucy53YWl0KSBzZXJ2ZXJBdHRycyA9IF8uZXh0ZW5kKGF0dHJzIHx8IHt9LCBzZXJ2ZXJBdHRycyk7CiAgICAgICAgaWYgKF8uaXNPYmplY3Qoc2VydmVyQXR0cnMpICYmICFtb2RlbC5zZXQoc2VydmVyQXR0cnMsIG9wdGlvbnMpKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgICBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICB9OwogICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7CgogICAgICBtZXRob2QgPSB0aGlzLmlzTmV3KCkgPyAnY3JlYXRlJyA6IChvcHRpb25zLnBhdGNoID8gJ3BhdGNoJyA6ICd1cGRhdGUnKTsKICAgICAgaWYgKG1ldGhvZCA9PT0gJ3BhdGNoJykgb3B0aW9ucy5hdHRycyA9IGF0dHJzOwogICAgICB4aHIgPSB0aGlzLnN5bmMobWV0aG9kLCB0aGlzLCBvcHRpb25zKTsKCiAgICAgIC8vIFJlc3RvcmUgYXR0cmlidXRlcy4KICAgICAgaWYgKGF0dHJzICYmIG9wdGlvbnMud2FpdCkgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlczsKCiAgICAgIHJldHVybiB4aHI7CiAgICB9LAoKICAgIC8vIERlc3Ryb3kgdGhpcyBtb2RlbCBvbiB0aGUgc2VydmVyIGlmIGl0IHdhcyBhbHJlYWR5IHBlcnNpc3RlZC4KICAgIC8vIE9wdGltaXN0aWNhbGx5IHJlbW92ZXMgdGhlIG1vZGVsIGZyb20gaXRzIGNvbGxlY3Rpb24sIGlmIGl0IGhhcyBvbmUuCiAgICAvLyBJZiBgd2FpdDogdHJ1ZWAgaXMgcGFzc2VkLCB3YWl0cyBmb3IgdGhlIHNlcnZlciB0byByZXNwb25kIGJlZm9yZSByZW1vdmFsLgogICAgZGVzdHJveTogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTsKICAgICAgdmFyIG1vZGVsID0gdGhpczsKICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7CgogICAgICB2YXIgZGVzdHJveSA9IGZ1bmN0aW9uKCkgewogICAgICAgIG1vZGVsLnRyaWdnZXIoJ2Rlc3Ryb3knLCBtb2RlbCwgbW9kZWwuY29sbGVjdGlvbiwgb3B0aW9ucyk7CiAgICAgIH07CgogICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7CiAgICAgICAgaWYgKG9wdGlvbnMud2FpdCB8fCBtb2RlbC5pc05ldygpKSBkZXN0cm95KCk7CiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICAgIGlmICghbW9kZWwuaXNOZXcoKSkgbW9kZWwudHJpZ2dlcignc3luYycsIG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgfTsKCiAgICAgIGlmICh0aGlzLmlzTmV3KCkpIHsKICAgICAgICBvcHRpb25zLnN1Y2Nlc3MoKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgd3JhcEVycm9yKHRoaXMsIG9wdGlvbnMpOwoKICAgICAgdmFyIHhociA9IHRoaXMuc3luYygnZGVsZXRlJywgdGhpcywgb3B0aW9ucyk7CiAgICAgIGlmICghb3B0aW9ucy53YWl0KSBkZXN0cm95KCk7CiAgICAgIHJldHVybiB4aHI7CiAgICB9LAoKICAgIC8vIERlZmF1bHQgVVJMIGZvciB0aGUgbW9kZWwncyByZXByZXNlbnRhdGlvbiBvbiB0aGUgc2VydmVyIC0tIGlmIHlvdSdyZQogICAgLy8gdXNpbmcgQmFja2JvbmUncyByZXN0ZnVsIG1ldGhvZHMsIG92ZXJyaWRlIHRoaXMgdG8gY2hhbmdlIHRoZSBlbmRwb2ludAogICAgLy8gdGhhdCB3aWxsIGJlIGNhbGxlZC4KICAgIHVybDogZnVuY3Rpb24oKSB7CiAgICAgIHZhciBiYXNlID0KICAgICAgICBfLnJlc3VsdCh0aGlzLCAndXJsUm9vdCcpIHx8CiAgICAgICAgXy5yZXN1bHQodGhpcy5jb2xsZWN0aW9uLCAndXJsJykgfHwKICAgICAgICB1cmxFcnJvcigpOwogICAgICBpZiAodGhpcy5pc05ldygpKSByZXR1cm4gYmFzZTsKICAgICAgcmV0dXJuIGJhc2UucmVwbGFjZSgvKFteXC9dKSQvLCAnJDEvJykgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5pZCk7CiAgICB9LAoKICAgIC8vICoqcGFyc2UqKiBjb252ZXJ0cyBhIHJlc3BvbnNlIGludG8gdGhlIGhhc2ggb2YgYXR0cmlidXRlcyB0byBiZSBgc2V0YCBvbgogICAgLy8gdGhlIG1vZGVsLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBqdXN0IHRvIHBhc3MgdGhlIHJlc3BvbnNlIGFsb25nLgogICAgcGFyc2U6IGZ1bmN0aW9uKHJlc3AsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIHJlc3A7CiAgICB9LAoKICAgIC8vIENyZWF0ZSBhIG5ldyBtb2RlbCB3aXRoIGlkZW50aWNhbCBhdHRyaWJ1dGVzIHRvIHRoaXMgb25lLgogICAgY2xvbmU6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5hdHRyaWJ1dGVzKTsKICAgIH0sCgogICAgLy8gQSBtb2RlbCBpcyBuZXcgaWYgaXQgaGFzIG5ldmVyIGJlZW4gc2F2ZWQgdG8gdGhlIHNlcnZlciwgYW5kIGxhY2tzIGFuIGlkLgogICAgaXNOZXc6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gIXRoaXMuaGFzKHRoaXMuaWRBdHRyaWJ1dGUpOwogICAgfSwKCiAgICAvLyBDaGVjayBpZiB0aGUgbW9kZWwgaXMgY3VycmVudGx5IGluIGEgdmFsaWQgc3RhdGUuCiAgICBpc1ZhbGlkOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZSh7fSwgXy5leHRlbmQob3B0aW9ucyB8fCB7fSwgeyB2YWxpZGF0ZTogdHJ1ZSB9KSk7CiAgICB9LAoKICAgIC8vIFJ1biB2YWxpZGF0aW9uIGFnYWluc3QgdGhlIG5leHQgY29tcGxldGUgc2V0IG9mIG1vZGVsIGF0dHJpYnV0ZXMsCiAgICAvLyByZXR1cm5pbmcgYHRydWVgIGlmIGFsbCBpcyB3ZWxsLiBPdGhlcndpc2UsIGZpcmUgYW4gYCJpbnZhbGlkImAgZXZlbnQuCiAgICBfdmFsaWRhdGU6IGZ1bmN0aW9uKGF0dHJzLCBvcHRpb25zKSB7CiAgICAgIGlmICghb3B0aW9ucy52YWxpZGF0ZSB8fCAhdGhpcy52YWxpZGF0ZSkgcmV0dXJuIHRydWU7CiAgICAgIGF0dHJzID0gXy5leHRlbmQoe30sIHRoaXMuYXR0cmlidXRlcywgYXR0cnMpOwogICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRpb25FcnJvciA9IHRoaXMudmFsaWRhdGUoYXR0cnMsIG9wdGlvbnMpIHx8IG51bGw7CiAgICAgIGlmICghZXJyb3IpIHJldHVybiB0cnVlOwogICAgICB0aGlzLnRyaWdnZXIoJ2ludmFsaWQnLCB0aGlzLCBlcnJvciwgXy5leHRlbmQob3B0aW9ucywge3ZhbGlkYXRpb25FcnJvcjogZXJyb3J9KSk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgfSk7CgogIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHdlIHdhbnQgdG8gaW1wbGVtZW50IG9uIHRoZSBNb2RlbC4KICB2YXIgbW9kZWxNZXRob2RzID0gWydrZXlzJywgJ3ZhbHVlcycsICdwYWlycycsICdpbnZlcnQnLCAncGljaycsICdvbWl0J107CgogIC8vIE1peCBpbiBlYWNoIFVuZGVyc2NvcmUgbWV0aG9kIGFzIGEgcHJveHkgdG8gYE1vZGVsI2F0dHJpYnV0ZXNgLgogIF8uZWFjaChtb2RlbE1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkgewogICAgTW9kZWwucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgIGFyZ3MudW5zaGlmdCh0aGlzLmF0dHJpYnV0ZXMpOwogICAgICByZXR1cm4gX1ttZXRob2RdLmFwcGx5KF8sIGFyZ3MpOwogICAgfTsKICB9KTsKCiAgLy8gQmFja2JvbmUuQ29sbGVjdGlvbgogIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gSWYgbW9kZWxzIHRlbmQgdG8gcmVwcmVzZW50IGEgc2luZ2xlIHJvdyBvZiBkYXRhLCBhIEJhY2tib25lIENvbGxlY3Rpb24gaXMKICAvLyBtb3JlIGFuYWxhZ291cyB0byBhIHRhYmxlIGZ1bGwgb2YgZGF0YSAuLi4gb3IgYSBzbWFsbCBzbGljZSBvciBwYWdlIG9mIHRoYXQKICAvLyB0YWJsZSwgb3IgYSBjb2xsZWN0aW9uIG9mIHJvd3MgdGhhdCBiZWxvbmcgdG9nZXRoZXIgZm9yIGEgcGFydGljdWxhciByZWFzb24KICAvLyAtLSBhbGwgb2YgdGhlIG1lc3NhZ2VzIGluIHRoaXMgcGFydGljdWxhciBmb2xkZXIsIGFsbCBvZiB0aGUgZG9jdW1lbnRzCiAgLy8gYmVsb25naW5nIHRvIHRoaXMgcGFydGljdWxhciBhdXRob3IsIGFuZCBzbyBvbi4gQ29sbGVjdGlvbnMgbWFpbnRhaW4KICAvLyBpbmRleGVzIG9mIHRoZWlyIG1vZGVscywgYm90aCBpbiBvcmRlciwgYW5kIGZvciBsb29rdXAgYnkgYGlkYC4KCiAgLy8gQ3JlYXRlIGEgbmV3ICoqQ29sbGVjdGlvbioqLCBwZXJoYXBzIHRvIGNvbnRhaW4gYSBzcGVjaWZpYyB0eXBlIG9mIGBtb2RlbGAuCiAgLy8gSWYgYSBgY29tcGFyYXRvcmAgaXMgc3BlY2lmaWVkLCB0aGUgQ29sbGVjdGlvbiB3aWxsIG1haW50YWluCiAgLy8gaXRzIG1vZGVscyBpbiBzb3J0IG9yZGVyLCBhcyB0aGV5J3JlIGFkZGVkIGFuZCByZW1vdmVkLgogIHZhciBDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykgewogICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgIGlmIChvcHRpb25zLm1vZGVsKSB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDsKICAgIGlmIChvcHRpb25zLmNvbXBhcmF0b3IgIT09IHZvaWQgMCkgdGhpcy5jb21wYXJhdG9yID0gb3B0aW9ucy5jb21wYXJhdG9yOwogICAgdGhpcy5fcmVzZXQoKTsKICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgaWYgKG1vZGVscykgdGhpcy5yZXNldChtb2RlbHMsIF8uZXh0ZW5kKHtzaWxlbnQ6IHRydWV9LCBvcHRpb25zKSk7CiAgfTsKCiAgLy8gRGVmYXVsdCBvcHRpb25zIGZvciBgQ29sbGVjdGlvbiNzZXRgLgogIHZhciBzZXRPcHRpb25zID0ge2FkZDogdHJ1ZSwgcmVtb3ZlOiB0cnVlLCBtZXJnZTogdHJ1ZX07CiAgdmFyIGFkZE9wdGlvbnMgPSB7YWRkOiB0cnVlLCByZW1vdmU6IGZhbHNlfTsKCiAgLy8gRGVmaW5lIHRoZSBDb2xsZWN0aW9uJ3MgaW5oZXJpdGFibGUgbWV0aG9kcy4KICBfLmV4dGVuZChDb2xsZWN0aW9uLnByb3RvdHlwZSwgRXZlbnRzLCB7CgogICAgLy8gVGhlIGRlZmF1bHQgbW9kZWwgZm9yIGEgY29sbGVjdGlvbiBpcyBqdXN0IGEgKipCYWNrYm9uZS5Nb2RlbCoqLgogICAgLy8gVGhpcyBzaG91bGQgYmUgb3ZlcnJpZGRlbiBpbiBtb3N0IGNhc2VzLgogICAgbW9kZWw6IE1vZGVsLAoKICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sCgogICAgLy8gVGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYSBDb2xsZWN0aW9uIGlzIGFuIGFycmF5IG9mIHRoZQogICAgLy8gbW9kZWxzJyBhdHRyaWJ1dGVzLgogICAgdG9KU09OOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbihtb2RlbCl7IHJldHVybiBtb2RlbC50b0pTT04ob3B0aW9ucyk7IH0pOwogICAgfSwKCiAgICAvLyBQcm94eSBgQmFja2JvbmUuc3luY2AgYnkgZGVmYXVsdC4KICAgIHN5bmM6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gQmFja2JvbmUuc3luYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfSwKCiAgICAvLyBBZGQgYSBtb2RlbCwgb3IgbGlzdCBvZiBtb2RlbHMgdG8gdGhlIHNldC4KICAgIGFkZDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7CiAgICAgIHJldHVybiB0aGlzLnNldChtb2RlbHMsIF8uZXh0ZW5kKHttZXJnZTogZmFsc2V9LCBvcHRpb25zLCBhZGRPcHRpb25zKSk7CiAgICB9LAoKICAgIC8vIFJlbW92ZSBhIG1vZGVsLCBvciBhIGxpc3Qgb2YgbW9kZWxzIGZyb20gdGhlIHNldC4KICAgIHJlbW92ZTogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7CiAgICAgIHZhciBzaW5ndWxhciA9ICFfLmlzQXJyYXkobW9kZWxzKTsKICAgICAgbW9kZWxzID0gc2luZ3VsYXIgPyBbbW9kZWxzXSA6IF8uY2xvbmUobW9kZWxzKTsKICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgdmFyIGksIGwsIGluZGV4LCBtb2RlbDsKICAgICAgZm9yIChpID0gMCwgbCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICBtb2RlbCA9IG1vZGVsc1tpXSA9IHRoaXMuZ2V0KG1vZGVsc1tpXSk7CiAgICAgICAgaWYgKCFtb2RlbCkgY29udGludWU7CiAgICAgICAgZGVsZXRlIHRoaXMuX2J5SWRbbW9kZWwuaWRdOwogICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLmNpZF07CiAgICAgICAgaW5kZXggPSB0aGlzLmluZGV4T2YobW9kZWwpOwogICAgICAgIHRoaXMubW9kZWxzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgdGhpcy5sZW5ndGgtLTsKICAgICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB7CiAgICAgICAgICBvcHRpb25zLmluZGV4ID0gaW5kZXg7CiAgICAgICAgICBtb2RlbC50cmlnZ2VyKCdyZW1vdmUnLCBtb2RlbCwgdGhpcywgb3B0aW9ucyk7CiAgICAgICAgfQogICAgICAgIHRoaXMuX3JlbW92ZVJlZmVyZW5jZShtb2RlbCwgb3B0aW9ucyk7CiAgICAgIH0KICAgICAgcmV0dXJuIHNpbmd1bGFyID8gbW9kZWxzWzBdIDogbW9kZWxzOwogICAgfSwKCiAgICAvLyBVcGRhdGUgYSBjb2xsZWN0aW9uIGJ5IGBzZXRgLWluZyBhIG5ldyBsaXN0IG9mIG1vZGVscywgYWRkaW5nIG5ldyBvbmVzLAogICAgLy8gcmVtb3ZpbmcgbW9kZWxzIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LCBhbmQgbWVyZ2luZyBtb2RlbHMgdGhhdAogICAgLy8gYWxyZWFkeSBleGlzdCBpbiB0aGUgY29sbGVjdGlvbiwgYXMgbmVjZXNzYXJ5LiBTaW1pbGFyIHRvICoqTW9kZWwjc2V0KiosCiAgICAvLyB0aGUgY29yZSBvcGVyYXRpb24gZm9yIHVwZGF0aW5nIHRoZSBkYXRhIGNvbnRhaW5lZCBieSB0aGUgY29sbGVjdGlvbi4KICAgIHNldDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7CiAgICAgIG9wdGlvbnMgPSBfLmRlZmF1bHRzKHt9LCBvcHRpb25zLCBzZXRPcHRpb25zKTsKICAgICAgaWYgKG9wdGlvbnMucGFyc2UpIG1vZGVscyA9IHRoaXMucGFyc2UobW9kZWxzLCBvcHRpb25zKTsKICAgICAgdmFyIHNpbmd1bGFyID0gIV8uaXNBcnJheShtb2RlbHMpOwogICAgICBtb2RlbHMgPSBzaW5ndWxhciA/IChtb2RlbHMgPyBbbW9kZWxzXSA6IFtdKSA6IF8uY2xvbmUobW9kZWxzKTsKICAgICAgdmFyIGksIGwsIGlkLCBtb2RlbCwgYXR0cnMsIGV4aXN0aW5nLCBzb3J0OwogICAgICB2YXIgYXQgPSBvcHRpb25zLmF0OwogICAgICB2YXIgdGFyZ2V0TW9kZWwgPSB0aGlzLm1vZGVsOwogICAgICB2YXIgc29ydGFibGUgPSB0aGlzLmNvbXBhcmF0b3IgJiYgKGF0ID09IG51bGwpICYmIG9wdGlvbnMuc29ydCAhPT0gZmFsc2U7CiAgICAgIHZhciBzb3J0QXR0ciA9IF8uaXNTdHJpbmcodGhpcy5jb21wYXJhdG9yKSA/IHRoaXMuY29tcGFyYXRvciA6IG51bGw7CiAgICAgIHZhciB0b0FkZCA9IFtdLCB0b1JlbW92ZSA9IFtdLCBtb2RlbE1hcCA9IHt9OwogICAgICB2YXIgYWRkID0gb3B0aW9ucy5hZGQsIG1lcmdlID0gb3B0aW9ucy5tZXJnZSwgcmVtb3ZlID0gb3B0aW9ucy5yZW1vdmU7CiAgICAgIHZhciBvcmRlciA9ICFzb3J0YWJsZSAmJiBhZGQgJiYgcmVtb3ZlID8gW10gOiBmYWxzZTsKCiAgICAgIC8vIFR1cm4gYmFyZSBvYmplY3RzIGludG8gbW9kZWwgcmVmZXJlbmNlcywgYW5kIHByZXZlbnQgaW52YWxpZCBtb2RlbHMKICAgICAgLy8gZnJvbSBiZWluZyBhZGRlZC4KICAgICAgZm9yIChpID0gMCwgbCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICBhdHRycyA9IG1vZGVsc1tpXSB8fCB7fTsKICAgICAgICBpZiAoYXR0cnMgaW5zdGFuY2VvZiBNb2RlbCkgewogICAgICAgICAgaWQgPSBtb2RlbCA9IGF0dHJzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZCA9IGF0dHJzW3RhcmdldE1vZGVsLnByb3RvdHlwZS5pZEF0dHJpYnV0ZSB8fCAnaWQnXTsKICAgICAgICB9CgogICAgICAgIC8vIElmIGEgZHVwbGljYXRlIGlzIGZvdW5kLCBwcmV2ZW50IGl0IGZyb20gYmVpbmcgYWRkZWQgYW5kCiAgICAgICAgLy8gb3B0aW9uYWxseSBtZXJnZSBpdCBpbnRvIHRoZSBleGlzdGluZyBtb2RlbC4KICAgICAgICBpZiAoZXhpc3RpbmcgPSB0aGlzLmdldChpZCkpIHsKICAgICAgICAgIGlmIChyZW1vdmUpIG1vZGVsTWFwW2V4aXN0aW5nLmNpZF0gPSB0cnVlOwogICAgICAgICAgaWYgKG1lcmdlKSB7CiAgICAgICAgICAgIGF0dHJzID0gYXR0cnMgPT09IG1vZGVsID8gbW9kZWwuYXR0cmlidXRlcyA6IGF0dHJzOwogICAgICAgICAgICBpZiAob3B0aW9ucy5wYXJzZSkgYXR0cnMgPSBleGlzdGluZy5wYXJzZShhdHRycywgb3B0aW9ucyk7CiAgICAgICAgICAgIGV4aXN0aW5nLnNldChhdHRycywgb3B0aW9ucyk7CiAgICAgICAgICAgIGlmIChzb3J0YWJsZSAmJiAhc29ydCAmJiBleGlzdGluZy5oYXNDaGFuZ2VkKHNvcnRBdHRyKSkgc29ydCA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgICBtb2RlbHNbaV0gPSBleGlzdGluZzsKCiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIG5ldywgdmFsaWQgbW9kZWwsIHB1c2ggaXQgdG8gdGhlIGB0b0FkZGAgbGlzdC4KICAgICAgICB9IGVsc2UgaWYgKGFkZCkgewogICAgICAgICAgbW9kZWwgPSBtb2RlbHNbaV0gPSB0aGlzLl9wcmVwYXJlTW9kZWwoYXR0cnMsIG9wdGlvbnMpOwogICAgICAgICAgaWYgKCFtb2RlbCkgY29udGludWU7CiAgICAgICAgICB0b0FkZC5wdXNoKG1vZGVsKTsKICAgICAgICAgIHRoaXMuX2FkZFJlZmVyZW5jZShtb2RlbCwgb3B0aW9ucyk7CiAgICAgICAgfQoKICAgICAgICAvLyBEbyBub3QgYWRkIG11bHRpcGxlIG1vZGVscyB3aXRoIHRoZSBzYW1lIGBpZGAuCiAgICAgICAgbW9kZWwgPSBleGlzdGluZyB8fCBtb2RlbDsKICAgICAgICBpZiAob3JkZXIgJiYgKG1vZGVsLmlzTmV3KCkgfHwgIW1vZGVsTWFwW21vZGVsLmlkXSkpIG9yZGVyLnB1c2gobW9kZWwpOwogICAgICAgIG1vZGVsTWFwW21vZGVsLmlkXSA9IHRydWU7CiAgICAgIH0KCiAgICAgIC8vIFJlbW92ZSBub25leGlzdGVudCBtb2RlbHMgaWYgYXBwcm9wcmlhdGUuCiAgICAgIGlmIChyZW1vdmUpIHsKICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHsKICAgICAgICAgIGlmICghbW9kZWxNYXBbKG1vZGVsID0gdGhpcy5tb2RlbHNbaV0pLmNpZF0pIHRvUmVtb3ZlLnB1c2gobW9kZWwpOwogICAgICAgIH0KICAgICAgICBpZiAodG9SZW1vdmUubGVuZ3RoKSB0aGlzLnJlbW92ZSh0b1JlbW92ZSwgb3B0aW9ucyk7CiAgICAgIH0KCiAgICAgIC8vIFNlZSBpZiBzb3J0aW5nIGlzIG5lZWRlZCwgdXBkYXRlIGBsZW5ndGhgIGFuZCBzcGxpY2UgaW4gbmV3IG1vZGVscy4KICAgICAgaWYgKHRvQWRkLmxlbmd0aCB8fCAob3JkZXIgJiYgb3JkZXIubGVuZ3RoKSkgewogICAgICAgIGlmIChzb3J0YWJsZSkgc29ydCA9IHRydWU7CiAgICAgICAgdGhpcy5sZW5ndGggKz0gdG9BZGQubGVuZ3RoOwogICAgICAgIGlmIChhdCAhPSBudWxsKSB7CiAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdG9BZGQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgIHRoaXMubW9kZWxzLnNwbGljZShhdCArIGksIDAsIHRvQWRkW2ldKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKG9yZGVyKSB0aGlzLm1vZGVscy5sZW5ndGggPSAwOwogICAgICAgICAgdmFyIG9yZGVyZWRNb2RlbHMgPSBvcmRlciB8fCB0b0FkZDsKICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBvcmRlcmVkTW9kZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICB0aGlzLm1vZGVscy5wdXNoKG9yZGVyZWRNb2RlbHNbaV0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gU2lsZW50bHkgc29ydCB0aGUgY29sbGVjdGlvbiBpZiBhcHByb3ByaWF0ZS4KICAgICAgaWYgKHNvcnQpIHRoaXMuc29ydCh7c2lsZW50OiB0cnVlfSk7CgogICAgICAvLyBVbmxlc3Mgc2lsZW5jZWQsIGl0J3MgdGltZSB0byBmaXJlIGFsbCBhcHByb3ByaWF0ZSBhZGQvc29ydCBldmVudHMuCiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHsKICAgICAgICBmb3IgKGkgPSAwLCBsID0gdG9BZGQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAobW9kZWwgPSB0b0FkZFtpXSkudHJpZ2dlcignYWRkJywgbW9kZWwsIHRoaXMsIG9wdGlvbnMpOwogICAgICAgIH0KICAgICAgICBpZiAoc29ydCB8fCAob3JkZXIgJiYgb3JkZXIubGVuZ3RoKSkgdGhpcy50cmlnZ2VyKCdzb3J0JywgdGhpcywgb3B0aW9ucyk7CiAgICAgIH0KCiAgICAgIC8vIFJldHVybiB0aGUgYWRkZWQgKG9yIG1lcmdlZCkgbW9kZWwgKG9yIG1vZGVscykuCiAgICAgIHJldHVybiBzaW5ndWxhciA/IG1vZGVsc1swXSA6IG1vZGVsczsKICAgIH0sCgogICAgLy8gV2hlbiB5b3UgaGF2ZSBtb3JlIGl0ZW1zIHRoYW4geW91IHdhbnQgdG8gYWRkIG9yIHJlbW92ZSBpbmRpdmlkdWFsbHksCiAgICAvLyB5b3UgY2FuIHJlc2V0IHRoZSBlbnRpcmUgc2V0IHdpdGggYSBuZXcgbGlzdCBvZiBtb2RlbHMsIHdpdGhvdXQgZmlyaW5nCiAgICAvLyBhbnkgZ3JhbnVsYXIgYGFkZGAgb3IgYHJlbW92ZWAgZXZlbnRzLiBGaXJlcyBgcmVzZXRgIHdoZW4gZmluaXNoZWQuCiAgICAvLyBVc2VmdWwgZm9yIGJ1bGsgb3BlcmF0aW9ucyBhbmQgb3B0aW1pemF0aW9ucy4KICAgIHJlc2V0OiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHsKICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLm1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICB0aGlzLl9yZW1vdmVSZWZlcmVuY2UodGhpcy5tb2RlbHNbaV0sIG9wdGlvbnMpOwogICAgICB9CiAgICAgIG9wdGlvbnMucHJldmlvdXNNb2RlbHMgPSB0aGlzLm1vZGVsczsKICAgICAgdGhpcy5fcmVzZXQoKTsKICAgICAgbW9kZWxzID0gdGhpcy5hZGQobW9kZWxzLCBfLmV4dGVuZCh7c2lsZW50OiB0cnVlfSwgb3B0aW9ucykpOwogICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLnRyaWdnZXIoJ3Jlc2V0JywgdGhpcywgb3B0aW9ucyk7CiAgICAgIHJldHVybiBtb2RlbHM7CiAgICB9LAoKICAgIC8vIEFkZCBhIG1vZGVsIHRvIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uCiAgICBwdXNoOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykgewogICAgICByZXR1cm4gdGhpcy5hZGQobW9kZWwsIF8uZXh0ZW5kKHthdDogdGhpcy5sZW5ndGh9LCBvcHRpb25zKSk7CiAgICB9LAoKICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi4KICAgIHBvcDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICB2YXIgbW9kZWwgPSB0aGlzLmF0KHRoaXMubGVuZ3RoIC0gMSk7CiAgICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIG1vZGVsOwogICAgfSwKCiAgICAvLyBBZGQgYSBtb2RlbCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjb2xsZWN0aW9uLgogICAgdW5zaGlmdDogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIHRoaXMuYWRkKG1vZGVsLCBfLmV4dGVuZCh7YXQ6IDB9LCBvcHRpb25zKSk7CiAgICB9LAoKICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgY29sbGVjdGlvbi4KICAgIHNoaWZ0OiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHZhciBtb2RlbCA9IHRoaXMuYXQoMCk7CiAgICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIG1vZGVsOwogICAgfSwKCiAgICAvLyBTbGljZSBvdXQgYSBzdWItYXJyYXkgb2YgbW9kZWxzIGZyb20gdGhlIGNvbGxlY3Rpb24uCiAgICBzbGljZTogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBzbGljZS5hcHBseSh0aGlzLm1vZGVscywgYXJndW1lbnRzKTsKICAgIH0sCgogICAgLy8gR2V0IGEgbW9kZWwgZnJvbSB0aGUgc2V0IGJ5IGlkLgogICAgZ2V0OiBmdW5jdGlvbihvYmopIHsKICAgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdm9pZCAwOwogICAgICByZXR1cm4gdGhpcy5fYnlJZFtvYmpdIHx8IHRoaXMuX2J5SWRbb2JqLmlkXSB8fCB0aGlzLl9ieUlkW29iai5jaWRdOwogICAgfSwKCiAgICAvLyBHZXQgdGhlIG1vZGVsIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgIGF0OiBmdW5jdGlvbihpbmRleCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbHNbaW5kZXhdOwogICAgfSwKCiAgICAvLyBSZXR1cm4gbW9kZWxzIHdpdGggbWF0Y2hpbmcgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBzaW1wbGUgY2FzZXMgb2YKICAgIC8vIGBmaWx0ZXJgLgogICAgd2hlcmU6IGZ1bmN0aW9uKGF0dHJzLCBmaXJzdCkgewogICAgICBpZiAoXy5pc0VtcHR5KGF0dHJzKSkgcmV0dXJuIGZpcnN0ID8gdm9pZCAwIDogW107CiAgICAgIHJldHVybiB0aGlzW2ZpcnN0ID8gJ2ZpbmQnIDogJ2ZpbHRlciddKGZ1bmN0aW9uKG1vZGVsKSB7CiAgICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7CiAgICAgICAgICBpZiAoYXR0cnNba2V5XSAhPT0gbW9kZWwuZ2V0KGtleSkpIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0pOwogICAgfSwKCiAgICAvLyBSZXR1cm4gdGhlIGZpcnN0IG1vZGVsIHdpdGggbWF0Y2hpbmcgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBzaW1wbGUgY2FzZXMKICAgIC8vIG9mIGBmaW5kYC4KICAgIGZpbmRXaGVyZTogZnVuY3Rpb24oYXR0cnMpIHsKICAgICAgcmV0dXJuIHRoaXMud2hlcmUoYXR0cnMsIHRydWUpOwogICAgfSwKCiAgICAvLyBGb3JjZSB0aGUgY29sbGVjdGlvbiB0byByZS1zb3J0IGl0c2VsZi4gWW91IGRvbid0IG5lZWQgdG8gY2FsbCB0aGlzIHVuZGVyCiAgICAvLyBub3JtYWwgY2lyY3Vtc3RhbmNlcywgYXMgdGhlIHNldCB3aWxsIG1haW50YWluIHNvcnQgb3JkZXIgYXMgZWFjaCBpdGVtCiAgICAvLyBpcyBhZGRlZC4KICAgIHNvcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgaWYgKCF0aGlzLmNvbXBhcmF0b3IpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNvcnQgYSBzZXQgd2l0aG91dCBhIGNvbXBhcmF0b3InKTsKICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKCiAgICAgIC8vIFJ1biBzb3J0IGJhc2VkIG9uIHR5cGUgb2YgYGNvbXBhcmF0b3JgLgogICAgICBpZiAoXy5pc1N0cmluZyh0aGlzLmNvbXBhcmF0b3IpIHx8IHRoaXMuY29tcGFyYXRvci5sZW5ndGggPT09IDEpIHsKICAgICAgICB0aGlzLm1vZGVscyA9IHRoaXMuc29ydEJ5KHRoaXMuY29tcGFyYXRvciwgdGhpcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5tb2RlbHMuc29ydChfLmJpbmQodGhpcy5jb21wYXJhdG9yLCB0aGlzKSk7CiAgICAgIH0KCiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMudHJpZ2dlcignc29ydCcsIHRoaXMsIG9wdGlvbnMpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gUGx1Y2sgYW4gYXR0cmlidXRlIGZyb20gZWFjaCBtb2RlbCBpbiB0aGUgY29sbGVjdGlvbi4KICAgIHBsdWNrOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIHJldHVybiBfLmludm9rZSh0aGlzLm1vZGVscywgJ2dldCcsIGF0dHIpOwogICAgfSwKCiAgICAvLyBGZXRjaCB0aGUgZGVmYXVsdCBzZXQgb2YgbW9kZWxzIGZvciB0aGlzIGNvbGxlY3Rpb24sIHJlc2V0dGluZyB0aGUKICAgIC8vIGNvbGxlY3Rpb24gd2hlbiB0aGV5IGFycml2ZS4gSWYgYHJlc2V0OiB0cnVlYCBpcyBwYXNzZWQsIHRoZSByZXNwb25zZQogICAgLy8gZGF0YSB3aWxsIGJlIHBhc3NlZCB0aHJvdWdoIHRoZSBgcmVzZXRgIG1ldGhvZCBpbnN0ZWFkIG9mIGBzZXRgLgogICAgZmV0Y2g6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307CiAgICAgIGlmIChvcHRpb25zLnBhcnNlID09PSB2b2lkIDApIG9wdGlvbnMucGFyc2UgPSB0cnVlOwogICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzczsKICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzOwogICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7CiAgICAgICAgdmFyIG1ldGhvZCA9IG9wdGlvbnMucmVzZXQgPyAncmVzZXQnIDogJ3NldCc7CiAgICAgICAgY29sbGVjdGlvblttZXRob2RdKHJlc3AsIG9wdGlvbnMpOwogICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKGNvbGxlY3Rpb24sIHJlc3AsIG9wdGlvbnMpOwogICAgICAgIGNvbGxlY3Rpb24udHJpZ2dlcignc3luYycsIGNvbGxlY3Rpb24sIHJlc3AsIG9wdGlvbnMpOwogICAgICB9OwogICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7CiAgICAgIHJldHVybiB0aGlzLnN5bmMoJ3JlYWQnLCB0aGlzLCBvcHRpb25zKTsKICAgIH0sCgogICAgLy8gQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEgbW9kZWwgaW4gdGhpcyBjb2xsZWN0aW9uLiBBZGQgdGhlIG1vZGVsIHRvIHRoZQogICAgLy8gY29sbGVjdGlvbiBpbW1lZGlhdGVseSwgdW5sZXNzIGB3YWl0OiB0cnVlYCBpcyBwYXNzZWQsIGluIHdoaWNoIGNhc2Ugd2UKICAgIC8vIHdhaXQgZm9yIHRoZSBzZXJ2ZXIgdG8gYWdyZWUuCiAgICBjcmVhdGU6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9OwogICAgICBpZiAoIShtb2RlbCA9IHRoaXMuX3ByZXBhcmVNb2RlbChtb2RlbCwgb3B0aW9ucykpKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmICghb3B0aW9ucy53YWl0KSB0aGlzLmFkZChtb2RlbCwgb3B0aW9ucyk7CiAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpczsKICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7CiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKG1vZGVsLCByZXNwKSB7CiAgICAgICAgaWYgKG9wdGlvbnMud2FpdCkgY29sbGVjdGlvbi5hZGQobW9kZWwsIG9wdGlvbnMpOwogICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgfTsKICAgICAgbW9kZWwuc2F2ZShudWxsLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIG1vZGVsOwogICAgfSwKCiAgICAvLyAqKnBhcnNlKiogY29udmVydHMgYSByZXNwb25zZSBpbnRvIGEgbGlzdCBvZiBtb2RlbHMgdG8gYmUgYWRkZWQgdG8gdGhlCiAgICAvLyBjb2xsZWN0aW9uLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBqdXN0IHRvIHBhc3MgaXQgdGhyb3VnaC4KICAgIHBhcnNlOiBmdW5jdGlvbihyZXNwLCBvcHRpb25zKSB7CiAgICAgIHJldHVybiByZXNwOwogICAgfSwKCiAgICAvLyBDcmVhdGUgYSBuZXcgY29sbGVjdGlvbiB3aXRoIGFuIGlkZW50aWNhbCBsaXN0IG9mIG1vZGVscyBhcyB0aGlzIG9uZS4KICAgIGNsb25lOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMubW9kZWxzKTsKICAgIH0sCgogICAgLy8gUHJpdmF0ZSBtZXRob2QgdG8gcmVzZXQgYWxsIGludGVybmFsIHN0YXRlLiBDYWxsZWQgd2hlbiB0aGUgY29sbGVjdGlvbgogICAgLy8gaXMgZmlyc3QgaW5pdGlhbGl6ZWQgb3IgcmVzZXQuCiAgICBfcmVzZXQ6IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmxlbmd0aCA9IDA7CiAgICAgIHRoaXMubW9kZWxzID0gW107CiAgICAgIHRoaXMuX2J5SWQgID0ge307CiAgICB9LAoKICAgIC8vIFByZXBhcmUgYSBoYXNoIG9mIGF0dHJpYnV0ZXMgKG9yIG90aGVyIG1vZGVsKSB0byBiZSBhZGRlZCB0byB0aGlzCiAgICAvLyBjb2xsZWN0aW9uLgogICAgX3ByZXBhcmVNb2RlbDogZnVuY3Rpb24oYXR0cnMsIG9wdGlvbnMpIHsKICAgICAgaWYgKGF0dHJzIGluc3RhbmNlb2YgTW9kZWwpIHJldHVybiBhdHRyczsKICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307CiAgICAgIG9wdGlvbnMuY29sbGVjdGlvbiA9IHRoaXM7CiAgICAgIHZhciBtb2RlbCA9IG5ldyB0aGlzLm1vZGVsKGF0dHJzLCBvcHRpb25zKTsKICAgICAgaWYgKCFtb2RlbC52YWxpZGF0aW9uRXJyb3IpIHJldHVybiBtb2RlbDsKICAgICAgdGhpcy50cmlnZ2VyKCdpbnZhbGlkJywgdGhpcywgbW9kZWwudmFsaWRhdGlvbkVycm9yLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKCiAgICAvLyBJbnRlcm5hbCBtZXRob2QgdG8gY3JlYXRlIGEgbW9kZWwncyB0aWVzIHRvIGEgY29sbGVjdGlvbi4KICAgIF9hZGRSZWZlcmVuY2U6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIHRoaXMuX2J5SWRbbW9kZWwuY2lkXSA9IG1vZGVsOwogICAgICBpZiAobW9kZWwuaWQgIT0gbnVsbCkgdGhpcy5fYnlJZFttb2RlbC5pZF0gPSBtb2RlbDsKICAgICAgaWYgKCFtb2RlbC5jb2xsZWN0aW9uKSBtb2RlbC5jb2xsZWN0aW9uID0gdGhpczsKICAgICAgbW9kZWwub24oJ2FsbCcsIHRoaXMuX29uTW9kZWxFdmVudCwgdGhpcyk7CiAgICB9LAoKICAgIC8vIEludGVybmFsIG1ldGhvZCB0byBzZXZlciBhIG1vZGVsJ3MgdGllcyB0byBhIGNvbGxlY3Rpb24uCiAgICBfcmVtb3ZlUmVmZXJlbmNlOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykgewogICAgICBpZiAodGhpcyA9PT0gbW9kZWwuY29sbGVjdGlvbikgZGVsZXRlIG1vZGVsLmNvbGxlY3Rpb247CiAgICAgIG1vZGVsLm9mZignYWxsJywgdGhpcy5fb25Nb2RlbEV2ZW50LCB0aGlzKTsKICAgIH0sCgogICAgLy8gSW50ZXJuYWwgbWV0aG9kIGNhbGxlZCBldmVyeSB0aW1lIGEgbW9kZWwgaW4gdGhlIHNldCBmaXJlcyBhbiBldmVudC4KICAgIC8vIFNldHMgbmVlZCB0byB1cGRhdGUgdGhlaXIgaW5kZXhlcyB3aGVuIG1vZGVscyBjaGFuZ2UgaWRzLiBBbGwgb3RoZXIKICAgIC8vIGV2ZW50cyBzaW1wbHkgcHJveHkgdGhyb3VnaC4gImFkZCIgYW5kICJyZW1vdmUiIGV2ZW50cyB0aGF0IG9yaWdpbmF0ZQogICAgLy8gaW4gb3RoZXIgY29sbGVjdGlvbnMgYXJlIGlnbm9yZWQuCiAgICBfb25Nb2RlbEV2ZW50OiBmdW5jdGlvbihldmVudCwgbW9kZWwsIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHsKICAgICAgaWYgKChldmVudCA9PT0gJ2FkZCcgfHwgZXZlbnQgPT09ICdyZW1vdmUnKSAmJiBjb2xsZWN0aW9uICE9PSB0aGlzKSByZXR1cm47CiAgICAgIGlmIChldmVudCA9PT0gJ2Rlc3Ryb3knKSB0aGlzLnJlbW92ZShtb2RlbCwgb3B0aW9ucyk7CiAgICAgIGlmIChtb2RlbCAmJiBldmVudCA9PT0gJ2NoYW5nZTonICsgbW9kZWwuaWRBdHRyaWJ1dGUpIHsKICAgICAgICBkZWxldGUgdGhpcy5fYnlJZFttb2RlbC5wcmV2aW91cyhtb2RlbC5pZEF0dHJpYnV0ZSldOwogICAgICAgIGlmIChtb2RlbC5pZCAhPSBudWxsKSB0aGlzLl9ieUlkW21vZGVsLmlkXSA9IG1vZGVsOwogICAgICB9CiAgICAgIHRoaXMudHJpZ2dlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICB9KTsKCiAgLy8gVW5kZXJzY29yZSBtZXRob2RzIHRoYXQgd2Ugd2FudCB0byBpbXBsZW1lbnQgb24gdGhlIENvbGxlY3Rpb24uCiAgLy8gOTAlIG9mIHRoZSBjb3JlIHVzZWZ1bG5lc3Mgb2YgQmFja2JvbmUgQ29sbGVjdGlvbnMgaXMgYWN0dWFsbHkgaW1wbGVtZW50ZWQKICAvLyByaWdodCBoZXJlOgogIHZhciBtZXRob2RzID0gWydmb3JFYWNoJywgJ2VhY2gnLCAnbWFwJywgJ2NvbGxlY3QnLCAncmVkdWNlJywgJ2ZvbGRsJywKICAgICdpbmplY3QnLCAncmVkdWNlUmlnaHQnLCAnZm9sZHInLCAnZmluZCcsICdkZXRlY3QnLCAnZmlsdGVyJywgJ3NlbGVjdCcsCiAgICAncmVqZWN0JywgJ2V2ZXJ5JywgJ2FsbCcsICdzb21lJywgJ2FueScsICdpbmNsdWRlJywgJ2NvbnRhaW5zJywgJ2ludm9rZScsCiAgICAnbWF4JywgJ21pbicsICd0b0FycmF5JywgJ3NpemUnLCAnZmlyc3QnLCAnaGVhZCcsICd0YWtlJywgJ2luaXRpYWwnLCAncmVzdCcsCiAgICAndGFpbCcsICdkcm9wJywgJ2xhc3QnLCAnd2l0aG91dCcsICdkaWZmZXJlbmNlJywgJ2luZGV4T2YnLCAnc2h1ZmZsZScsCiAgICAnbGFzdEluZGV4T2YnLCAnaXNFbXB0eScsICdjaGFpbicsICdzYW1wbGUnXTsKCiAgLy8gTWl4IGluIGVhY2ggVW5kZXJzY29yZSBtZXRob2QgYXMgYSBwcm94eSB0byBgQ29sbGVjdGlvbiNtb2RlbHNgLgogIF8uZWFjaChtZXRob2RzLCBmdW5jdGlvbihtZXRob2QpIHsKICAgIENvbGxlY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgIGFyZ3MudW5zaGlmdCh0aGlzLm1vZGVscyk7CiAgICAgIHJldHVybiBfW21ldGhvZF0uYXBwbHkoXywgYXJncyk7CiAgICB9OwogIH0pOwoKICAvLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB0YWtlIGEgcHJvcGVydHkgbmFtZSBhcyBhbiBhcmd1bWVudC4KICB2YXIgYXR0cmlidXRlTWV0aG9kcyA9IFsnZ3JvdXBCeScsICdjb3VudEJ5JywgJ3NvcnRCeScsICdpbmRleEJ5J107CgogIC8vIFVzZSBhdHRyaWJ1dGVzIGluc3RlYWQgb2YgcHJvcGVydGllcy4KICBfLmVhY2goYXR0cmlidXRlTWV0aG9kcywgZnVuY3Rpb24obWV0aG9kKSB7CiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHsKICAgICAgdmFyIGl0ZXJhdG9yID0gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlIDogZnVuY3Rpb24obW9kZWwpIHsKICAgICAgICByZXR1cm4gbW9kZWwuZ2V0KHZhbHVlKTsKICAgICAgfTsKICAgICAgcmV0dXJuIF9bbWV0aG9kXSh0aGlzLm1vZGVscywgaXRlcmF0b3IsIGNvbnRleHQpOwogICAgfTsKICB9KTsKCiAgLy8gQmFja2JvbmUuVmlldwogIC8vIC0tLS0tLS0tLS0tLS0KCiAgLy8gQmFja2JvbmUgVmlld3MgYXJlIGFsbW9zdCBtb3JlIGNvbnZlbnRpb24gdGhhbiB0aGV5IGFyZSBhY3R1YWwgY29kZS4gQSBWaWV3CiAgLy8gaXMgc2ltcGx5IGEgSmF2YVNjcmlwdCBvYmplY3QgdGhhdCByZXByZXNlbnRzIGEgbG9naWNhbCBjaHVuayBvZiBVSSBpbiB0aGUKICAvLyBET00uIFRoaXMgbWlnaHQgYmUgYSBzaW5nbGUgaXRlbSwgYW4gZW50aXJlIGxpc3QsIGEgc2lkZWJhciBvciBwYW5lbCwgb3IKICAvLyBldmVuIHRoZSBzdXJyb3VuZGluZyBmcmFtZSB3aGljaCB3cmFwcyB5b3VyIHdob2xlIGFwcC4gRGVmaW5pbmcgYSBjaHVuayBvZgogIC8vIFVJIGFzIGEgKipWaWV3KiogYWxsb3dzIHlvdSB0byBkZWZpbmUgeW91ciBET00gZXZlbnRzIGRlY2xhcmF0aXZlbHksIHdpdGhvdXQKICAvLyBoYXZpbmcgdG8gd29ycnkgYWJvdXQgcmVuZGVyIG9yZGVyIC4uLiBhbmQgbWFrZXMgaXQgZWFzeSBmb3IgdGhlIHZpZXcgdG8KICAvLyByZWFjdCB0byBzcGVjaWZpYyBjaGFuZ2VzIGluIHRoZSBzdGF0ZSBvZiB5b3VyIG1vZGVscy4KCiAgLy8gQ3JlYXRpbmcgYSBCYWNrYm9uZS5WaWV3IGNyZWF0ZXMgaXRzIGluaXRpYWwgZWxlbWVudCBvdXRzaWRlIG9mIHRoZSBET00sCiAgLy8gaWYgYW4gZXhpc3RpbmcgZWxlbWVudCBpcyBub3QgcHJvdmlkZWQuLi4KICB2YXIgVmlldyA9IEJhY2tib25lLlZpZXcgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICB0aGlzLmNpZCA9IF8udW5pcXVlSWQoJ3ZpZXcnKTsKICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICBfLmV4dGVuZCh0aGlzLCBfLnBpY2sob3B0aW9ucywgdmlld09wdGlvbnMpKTsKICAgIHRoaXMuX2Vuc3VyZUVsZW1lbnQoKTsKICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpOwogIH07CgogIC8vIENhY2hlZCByZWdleCB0byBzcGxpdCBrZXlzIGZvciBgZGVsZWdhdGVgLgogIHZhciBkZWxlZ2F0ZUV2ZW50U3BsaXR0ZXIgPSAvXihcUyspXHMqKC4qKSQvOwoKICAvLyBMaXN0IG9mIHZpZXcgb3B0aW9ucyB0byBiZSBtZXJnZWQgYXMgcHJvcGVydGllcy4KICB2YXIgdmlld09wdGlvbnMgPSBbJ21vZGVsJywgJ2NvbGxlY3Rpb24nLCAnZWwnLCAnaWQnLCAnYXR0cmlidXRlcycsICdjbGFzc05hbWUnLCAndGFnTmFtZScsICdldmVudHMnXTsKCiAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKkJhY2tib25lLlZpZXcqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLgogIF8uZXh0ZW5kKFZpZXcucHJvdG90eXBlLCBFdmVudHMsIHsKCiAgICAvLyBUaGUgZGVmYXVsdCBgdGFnTmFtZWAgb2YgYSBWaWV3J3MgZWxlbWVudCBpcyBgImRpdiJgLgogICAgdGFnTmFtZTogJ2RpdicsCgogICAgLy8galF1ZXJ5IGRlbGVnYXRlIGZvciBlbGVtZW50IGxvb2t1cCwgc2NvcGVkIHRvIERPTSBlbGVtZW50cyB3aXRoaW4gdGhlCiAgICAvLyBjdXJyZW50IHZpZXcuIFRoaXMgc2hvdWxkIGJlIHByZWZlcnJlZCB0byBnbG9iYWwgbG9va3VwcyB3aGVyZSBwb3NzaWJsZS4KICAgICQ6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CiAgICAgIHJldHVybiB0aGlzLiRlbC5maW5kKHNlbGVjdG9yKTsKICAgIH0sCgogICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duCiAgICAvLyBpbml0aWFsaXphdGlvbiBsb2dpYy4KICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSwKCiAgICAvLyAqKnJlbmRlcioqIGlzIHRoZSBjb3JlIGZ1bmN0aW9uIHRoYXQgeW91ciB2aWV3IHNob3VsZCBvdmVycmlkZSwgaW4gb3JkZXIKICAgIC8vIHRvIHBvcHVsYXRlIGl0cyBlbGVtZW50IChgdGhpcy5lbGApLCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBIVE1MLiBUaGUKICAgIC8vIGNvbnZlbnRpb24gaXMgZm9yICoqcmVuZGVyKiogdG8gYWx3YXlzIHJldHVybiBgdGhpc2AuCiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gUmVtb3ZlIHRoaXMgdmlldyBieSB0YWtpbmcgdGhlIGVsZW1lbnQgb3V0IG9mIHRoZSBET00sIGFuZCByZW1vdmluZyBhbnkKICAgIC8vIGFwcGxpY2FibGUgQmFja2JvbmUuRXZlbnRzIGxpc3RlbmVycy4KICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuJGVsLnJlbW92ZSgpOwogICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIENoYW5nZSB0aGUgdmlldydzIGVsZW1lbnQgKGB0aGlzLmVsYCBwcm9wZXJ0eSksIGluY2x1ZGluZyBldmVudAogICAgLy8gcmUtZGVsZWdhdGlvbi4KICAgIHNldEVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGRlbGVnYXRlKSB7CiAgICAgIGlmICh0aGlzLiRlbCkgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7CiAgICAgIHRoaXMuJGVsID0gZWxlbWVudCBpbnN0YW5jZW9mIEJhY2tib25lLiQgPyBlbGVtZW50IDogQmFja2JvbmUuJChlbGVtZW50KTsKICAgICAgdGhpcy5lbCA9IHRoaXMuJGVsWzBdOwogICAgICBpZiAoZGVsZWdhdGUgIT09IGZhbHNlKSB0aGlzLmRlbGVnYXRlRXZlbnRzKCk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBTZXQgY2FsbGJhY2tzLCB3aGVyZSBgdGhpcy5ldmVudHNgIGlzIGEgaGFzaCBvZgogICAgLy8KICAgIC8vICp7ImV2ZW50IHNlbGVjdG9yIjogImNhbGxiYWNrIn0qCiAgICAvLwogICAgLy8gICAgIHsKICAgIC8vICAgICAgICdtb3VzZWRvd24gLnRpdGxlJzogICdlZGl0JywKICAgIC8vICAgICAgICdjbGljayAuYnV0dG9uJzogICAgICdzYXZlJywKICAgIC8vICAgICAgICdjbGljayAub3Blbic6ICAgICAgIGZ1bmN0aW9uKGUpIHsgLi4uIH0KICAgIC8vICAgICB9CiAgICAvLwogICAgLy8gcGFpcnMuIENhbGxiYWNrcyB3aWxsIGJlIGJvdW5kIHRvIHRoZSB2aWV3LCB3aXRoIGB0aGlzYCBzZXQgcHJvcGVybHkuCiAgICAvLyBVc2VzIGV2ZW50IGRlbGVnYXRpb24gZm9yIGVmZmljaWVuY3kuCiAgICAvLyBPbWl0dGluZyB0aGUgc2VsZWN0b3IgYmluZHMgdGhlIGV2ZW50IHRvIGB0aGlzLmVsYC4KICAgIC8vIFRoaXMgb25seSB3b3JrcyBmb3IgZGVsZWdhdGUtYWJsZSBldmVudHM6IG5vdCBgZm9jdXNgLCBgYmx1cmAsIGFuZAogICAgLy8gbm90IGBjaGFuZ2VgLCBgc3VibWl0YCwgYW5kIGByZXNldGAgaW4gSW50ZXJuZXQgRXhwbG9yZXIuCiAgICBkZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7CiAgICAgIGlmICghKGV2ZW50cyB8fCAoZXZlbnRzID0gXy5yZXN1bHQodGhpcywgJ2V2ZW50cycpKSkpIHJldHVybiB0aGlzOwogICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTsKICAgICAgZm9yICh2YXIga2V5IGluIGV2ZW50cykgewogICAgICAgIHZhciBtZXRob2QgPSBldmVudHNba2V5XTsKICAgICAgICBpZiAoIV8uaXNGdW5jdGlvbihtZXRob2QpKSBtZXRob2QgPSB0aGlzW2V2ZW50c1trZXldXTsKICAgICAgICBpZiAoIW1ldGhvZCkgY29udGludWU7CgogICAgICAgIHZhciBtYXRjaCA9IGtleS5tYXRjaChkZWxlZ2F0ZUV2ZW50U3BsaXR0ZXIpOwogICAgICAgIHZhciBldmVudE5hbWUgPSBtYXRjaFsxXSwgc2VsZWN0b3IgPSBtYXRjaFsyXTsKICAgICAgICBtZXRob2QgPSBfLmJpbmQobWV0aG9kLCB0aGlzKTsKICAgICAgICBldmVudE5hbWUgKz0gJy5kZWxlZ2F0ZUV2ZW50cycgKyB0aGlzLmNpZDsKICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICcnKSB7CiAgICAgICAgICB0aGlzLiRlbC5vbihldmVudE5hbWUsIG1ldGhvZCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJGVsLm9uKGV2ZW50TmFtZSwgc2VsZWN0b3IsIG1ldGhvZCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBDbGVhcnMgYWxsIGNhbGxiYWNrcyBwcmV2aW91c2x5IGJvdW5kIHRvIHRoZSB2aWV3IHdpdGggYGRlbGVnYXRlRXZlbnRzYC4KICAgIC8vIFlvdSB1c3VhbGx5IGRvbid0IG5lZWQgdG8gdXNlIHRoaXMsIGJ1dCBtYXkgd2lzaCB0byBpZiB5b3UgaGF2ZSBtdWx0aXBsZQogICAgLy8gQmFja2JvbmUgdmlld3MgYXR0YWNoZWQgdG8gdGhlIHNhbWUgRE9NIGVsZW1lbnQuCiAgICB1bmRlbGVnYXRlRXZlbnRzOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy4kZWwub2ZmKCcuZGVsZWdhdGVFdmVudHMnICsgdGhpcy5jaWQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gRW5zdXJlIHRoYXQgdGhlIFZpZXcgaGFzIGEgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uCiAgICAvLyBJZiBgdGhpcy5lbGAgaXMgYSBzdHJpbmcsIHBhc3MgaXQgdGhyb3VnaCBgJCgpYCwgdGFrZSB0aGUgZmlyc3QKICAgIC8vIG1hdGNoaW5nIGVsZW1lbnQsIGFuZCByZS1hc3NpZ24gaXQgdG8gYGVsYC4gT3RoZXJ3aXNlLCBjcmVhdGUKICAgIC8vIGFuIGVsZW1lbnQgZnJvbSB0aGUgYGlkYCwgYGNsYXNzTmFtZWAgYW5kIGB0YWdOYW1lYCBwcm9wZXJ0aWVzLgogICAgX2Vuc3VyZUVsZW1lbnQ6IGZ1bmN0aW9uKCkgewogICAgICBpZiAoIXRoaXMuZWwpIHsKICAgICAgICB2YXIgYXR0cnMgPSBfLmV4dGVuZCh7fSwgXy5yZXN1bHQodGhpcywgJ2F0dHJpYnV0ZXMnKSk7CiAgICAgICAgaWYgKHRoaXMuaWQpIGF0dHJzLmlkID0gXy5yZXN1bHQodGhpcywgJ2lkJyk7CiAgICAgICAgaWYgKHRoaXMuY2xhc3NOYW1lKSBhdHRyc1snY2xhc3MnXSA9IF8ucmVzdWx0KHRoaXMsICdjbGFzc05hbWUnKTsKICAgICAgICB2YXIgJGVsID0gQmFja2JvbmUuJCgnPCcgKyBfLnJlc3VsdCh0aGlzLCAndGFnTmFtZScpICsgJz4nKS5hdHRyKGF0dHJzKTsKICAgICAgICB0aGlzLnNldEVsZW1lbnQoJGVsLCBmYWxzZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zZXRFbGVtZW50KF8ucmVzdWx0KHRoaXMsICdlbCcpLCBmYWxzZSk7CiAgICAgIH0KICAgIH0KCiAgfSk7CgogIC8vIEJhY2tib25lLnN5bmMKICAvLyAtLS0tLS0tLS0tLS0tCgogIC8vIE92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gdG8gY2hhbmdlIHRoZSBtYW5uZXIgaW4gd2hpY2ggQmFja2JvbmUgcGVyc2lzdHMKICAvLyBtb2RlbHMgdG8gdGhlIHNlcnZlci4gWW91IHdpbGwgYmUgcGFzc2VkIHRoZSB0eXBlIG9mIHJlcXVlc3QsIGFuZCB0aGUKICAvLyBtb2RlbCBpbiBxdWVzdGlvbi4gQnkgZGVmYXVsdCwgbWFrZXMgYSBSRVNUZnVsIEFqYXggcmVxdWVzdAogIC8vIHRvIHRoZSBtb2RlbCdzIGB1cmwoKWAuIFNvbWUgcG9zc2libGUgY3VzdG9taXphdGlvbnMgY291bGQgYmU6CiAgLy8KICAvLyAqIFVzZSBgc2V0VGltZW91dGAgdG8gYmF0Y2ggcmFwaWQtZmlyZSB1cGRhdGVzIGludG8gYSBzaW5nbGUgcmVxdWVzdC4KICAvLyAqIFNlbmQgdXAgdGhlIG1vZGVscyBhcyBYTUwgaW5zdGVhZCBvZiBKU09OLgogIC8vICogUGVyc2lzdCBtb2RlbHMgdmlhIFdlYlNvY2tldHMgaW5zdGVhZCBvZiBBamF4LgogIC8vCiAgLy8gVHVybiBvbiBgQmFja2JvbmUuZW11bGF0ZUhUVFBgIGluIG9yZGVyIHRvIHNlbmQgYFBVVGAgYW5kIGBERUxFVEVgIHJlcXVlc3RzCiAgLy8gYXMgYFBPU1RgLCB3aXRoIGEgYF9tZXRob2RgIHBhcmFtZXRlciBjb250YWluaW5nIHRoZSB0cnVlIEhUVFAgbWV0aG9kLAogIC8vIGFzIHdlbGwgYXMgYWxsIHJlcXVlc3RzIHdpdGggdGhlIGJvZHkgYXMgYGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZGAKICAvLyBpbnN0ZWFkIG9mIGBhcHBsaWNhdGlvbi9qc29uYCB3aXRoIHRoZSBtb2RlbCBpbiBhIHBhcmFtIG5hbWVkIGBtb2RlbGAuCiAgLy8gVXNlZnVsIHdoZW4gaW50ZXJmYWNpbmcgd2l0aCBzZXJ2ZXItc2lkZSBsYW5ndWFnZXMgbGlrZSAqKlBIUCoqIHRoYXQgbWFrZQogIC8vIGl0IGRpZmZpY3VsdCB0byByZWFkIHRoZSBib2R5IG9mIGBQVVRgIHJlcXVlc3RzLgogIEJhY2tib25lLnN5bmMgPSBmdW5jdGlvbihtZXRob2QsIG1vZGVsLCBvcHRpb25zKSB7CiAgICB2YXIgdHlwZSA9IG1ldGhvZE1hcFttZXRob2RdOwoKICAgIC8vIERlZmF1bHQgb3B0aW9ucywgdW5sZXNzIHNwZWNpZmllZC4KICAgIF8uZGVmYXVsdHMob3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KSwgewogICAgICBlbXVsYXRlSFRUUDogQmFja2JvbmUuZW11bGF0ZUhUVFAsCiAgICAgIGVtdWxhdGVKU09OOiBCYWNrYm9uZS5lbXVsYXRlSlNPTgogICAgfSk7CgogICAgLy8gRGVmYXVsdCBKU09OLXJlcXVlc3Qgb3B0aW9ucy4KICAgIHZhciBwYXJhbXMgPSB7dHlwZTogdHlwZSwgZGF0YVR5cGU6ICdqc29uJ307CgogICAgLy8gRW5zdXJlIHRoYXQgd2UgaGF2ZSBhIFVSTC4KICAgIGlmICghb3B0aW9ucy51cmwpIHsKICAgICAgcGFyYW1zLnVybCA9IF8ucmVzdWx0KG1vZGVsLCAndXJsJykgfHwgdXJsRXJyb3IoKTsKICAgIH0KCiAgICAvLyBFbnN1cmUgdGhhdCB3ZSBoYXZlIHRoZSBhcHByb3ByaWF0ZSByZXF1ZXN0IGRhdGEuCiAgICBpZiAob3B0aW9ucy5kYXRhID09IG51bGwgJiYgbW9kZWwgJiYgKG1ldGhvZCA9PT0gJ2NyZWF0ZScgfHwgbWV0aG9kID09PSAndXBkYXRlJyB8fCBtZXRob2QgPT09ICdwYXRjaCcpKSB7CiAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJzsKICAgICAgcGFyYW1zLmRhdGEgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmF0dHJzIHx8IG1vZGVsLnRvSlNPTihvcHRpb25zKSk7CiAgICB9CgogICAgLy8gRm9yIG9sZGVyIHNlcnZlcnMsIGVtdWxhdGUgSlNPTiBieSBlbmNvZGluZyB0aGUgcmVxdWVzdCBpbnRvIGFuIEhUTUwtZm9ybS4KICAgIGlmIChvcHRpb25zLmVtdWxhdGVKU09OKSB7CiAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOwogICAgICBwYXJhbXMuZGF0YSA9IHBhcmFtcy5kYXRhID8ge21vZGVsOiBwYXJhbXMuZGF0YX0gOiB7fTsKICAgIH0KCiAgICAvLyBGb3Igb2xkZXIgc2VydmVycywgZW11bGF0ZSBIVFRQIGJ5IG1pbWlja2luZyB0aGUgSFRUUCBtZXRob2Qgd2l0aCBgX21ldGhvZGAKICAgIC8vIEFuZCBhbiBgWC1IVFRQLU1ldGhvZC1PdmVycmlkZWAgaGVhZGVyLgogICAgaWYgKG9wdGlvbnMuZW11bGF0ZUhUVFAgJiYgKHR5cGUgPT09ICdQVVQnIHx8IHR5cGUgPT09ICdERUxFVEUnIHx8IHR5cGUgPT09ICdQQVRDSCcpKSB7CiAgICAgIHBhcmFtcy50eXBlID0gJ1BPU1QnOwogICAgICBpZiAob3B0aW9ucy5lbXVsYXRlSlNPTikgcGFyYW1zLmRhdGEuX21ldGhvZCA9IHR5cGU7CiAgICAgIHZhciBiZWZvcmVTZW5kID0gb3B0aW9ucy5iZWZvcmVTZW5kOwogICAgICBvcHRpb25zLmJlZm9yZVNlbmQgPSBmdW5jdGlvbih4aHIpIHsKICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1IVFRQLU1ldGhvZC1PdmVycmlkZScsIHR5cGUpOwogICAgICAgIGlmIChiZWZvcmVTZW5kKSByZXR1cm4gYmVmb3JlU2VuZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfQoKICAgIC8vIERvbid0IHByb2Nlc3MgZGF0YSBvbiBhIG5vbi1HRVQgcmVxdWVzdC4KICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ0dFVCcgJiYgIW9wdGlvbnMuZW11bGF0ZUpTT04pIHsKICAgICAgcGFyYW1zLnByb2Nlc3NEYXRhID0gZmFsc2U7CiAgICB9CgogICAgLy8gSWYgd2UncmUgc2VuZGluZyBhIGBQQVRDSGAgcmVxdWVzdCwgYW5kIHdlJ3JlIGluIGFuIG9sZCBJbnRlcm5ldCBFeHBsb3JlcgogICAgLy8gdGhhdCBzdGlsbCBoYXMgQWN0aXZlWCBlbmFibGVkIGJ5IGRlZmF1bHQsIG92ZXJyaWRlIGpRdWVyeSB0byB1c2UgdGhhdAogICAgLy8gZm9yIFhIUiBpbnN0ZWFkLiBSZW1vdmUgdGhpcyBsaW5lIHdoZW4galF1ZXJ5IHN1cHBvcnRzIGBQQVRDSGAgb24gSUU4LgogICAgaWYgKHBhcmFtcy50eXBlID09PSAnUEFUQ0gnICYmIG5vWGhyUGF0Y2gpIHsKICAgICAgcGFyYW1zLnhociA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTsKICAgICAgfTsKICAgIH0KCiAgICAvLyBNYWtlIHRoZSByZXF1ZXN0LCBhbGxvd2luZyB0aGUgdXNlciB0byBvdmVycmlkZSBhbnkgQWpheCBvcHRpb25zLgogICAgdmFyIHhociA9IG9wdGlvbnMueGhyID0gQmFja2JvbmUuYWpheChfLmV4dGVuZChwYXJhbXMsIG9wdGlvbnMpKTsKICAgIG1vZGVsLnRyaWdnZXIoJ3JlcXVlc3QnLCBtb2RlbCwgeGhyLCBvcHRpb25zKTsKICAgIHJldHVybiB4aHI7CiAgfTsKCiAgdmFyIG5vWGhyUGF0Y2ggPQogICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgISF3aW5kb3cuQWN0aXZlWE9iamVjdCAmJgogICAgICAhKHdpbmRvdy5YTUxIdHRwUmVxdWVzdCAmJiAobmV3IFhNTEh0dHBSZXF1ZXN0KS5kaXNwYXRjaEV2ZW50KTsKCiAgLy8gTWFwIGZyb20gQ1JVRCB0byBIVFRQIGZvciBvdXIgZGVmYXVsdCBgQmFja2JvbmUuc3luY2AgaW1wbGVtZW50YXRpb24uCiAgdmFyIG1ldGhvZE1hcCA9IHsKICAgICdjcmVhdGUnOiAnUE9TVCcsCiAgICAndXBkYXRlJzogJ1BVVCcsCiAgICAncGF0Y2gnOiAgJ1BBVENIJywKICAgICdkZWxldGUnOiAnREVMRVRFJywKICAgICdyZWFkJzogICAnR0VUJwogIH07CgogIC8vIFNldCB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgQmFja2JvbmUuYWpheGAgdG8gcHJveHkgdGhyb3VnaCB0byBgJGAuCiAgLy8gT3ZlcnJpZGUgdGhpcyBpZiB5b3UnZCBsaWtlIHRvIHVzZSBhIGRpZmZlcmVudCBsaWJyYXJ5LgogIEJhY2tib25lLmFqYXggPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBCYWNrYm9uZS4kLmFqYXguYXBwbHkoQmFja2JvbmUuJCwgYXJndW1lbnRzKTsKICB9OwoKICAvLyBCYWNrYm9uZS5Sb3V0ZXIKICAvLyAtLS0tLS0tLS0tLS0tLS0KCiAgLy8gUm91dGVycyBtYXAgZmF1eC1VUkxzIHRvIGFjdGlvbnMsIGFuZCBmaXJlIGV2ZW50cyB3aGVuIHJvdXRlcyBhcmUKICAvLyBtYXRjaGVkLiBDcmVhdGluZyBhIG5ldyBvbmUgc2V0cyBpdHMgYHJvdXRlc2AgaGFzaCwgaWYgbm90IHNldCBzdGF0aWNhbGx5LgogIHZhciBSb3V0ZXIgPSBCYWNrYm9uZS5Sb3V0ZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgaWYgKG9wdGlvbnMucm91dGVzKSB0aGlzLnJvdXRlcyA9IG9wdGlvbnMucm91dGVzOwogICAgdGhpcy5fYmluZFJvdXRlcygpOwogICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKCiAgLy8gQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZm9yIG1hdGNoaW5nIG5hbWVkIHBhcmFtIHBhcnRzIGFuZCBzcGxhdHRlZAogIC8vIHBhcnRzIG9mIHJvdXRlIHN0cmluZ3MuCiAgdmFyIG9wdGlvbmFsUGFyYW0gPSAvXCgoLio/KVwpL2c7CiAgdmFyIG5hbWVkUGFyYW0gICAgPSAvKFwoXD8pPzpcdysvZzsKICB2YXIgc3BsYXRQYXJhbSAgICA9IC9cKlx3Ky9nOwogIHZhciBlc2NhcGVSZWdFeHAgID0gL1tcLXt9XFtcXSs/LixcXFxeJHwjXHNdL2c7CgogIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipCYWNrYm9uZS5Sb3V0ZXIqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLgogIF8uZXh0ZW5kKFJvdXRlci5wcm90b3R5cGUsIEV2ZW50cywgewoKICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sCgogICAgLy8gTWFudWFsbHkgYmluZCBhIHNpbmdsZSBuYW1lZCByb3V0ZSB0byBhIGNhbGxiYWNrLiBGb3IgZXhhbXBsZToKICAgIC8vCiAgICAvLyAgICAgdGhpcy5yb3V0ZSgnc2VhcmNoLzpxdWVyeS9wOm51bScsICdzZWFyY2gnLCBmdW5jdGlvbihxdWVyeSwgbnVtKSB7CiAgICAvLyAgICAgICAuLi4KICAgIC8vICAgICB9KTsKICAgIC8vCiAgICByb3V0ZTogZnVuY3Rpb24ocm91dGUsIG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgIGlmICghXy5pc1JlZ0V4cChyb3V0ZSkpIHJvdXRlID0gdGhpcy5fcm91dGVUb1JlZ0V4cChyb3V0ZSk7CiAgICAgIGlmIChfLmlzRnVuY3Rpb24obmFtZSkpIHsKICAgICAgICBjYWxsYmFjayA9IG5hbWU7CiAgICAgICAgbmFtZSA9ICcnOwogICAgICB9CiAgICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gdGhpc1tuYW1lXTsKICAgICAgdmFyIHJvdXRlciA9IHRoaXM7CiAgICAgIEJhY2tib25lLmhpc3Rvcnkucm91dGUocm91dGUsIGZ1bmN0aW9uKGZyYWdtZW50KSB7CiAgICAgICAgdmFyIGFyZ3MgPSByb3V0ZXIuX2V4dHJhY3RQYXJhbWV0ZXJzKHJvdXRlLCBmcmFnbWVudCk7CiAgICAgICAgcm91dGVyLmV4ZWN1dGUoY2FsbGJhY2ssIGFyZ3MpOwogICAgICAgIHJvdXRlci50cmlnZ2VyLmFwcGx5KHJvdXRlciwgWydyb3V0ZTonICsgbmFtZV0uY29uY2F0KGFyZ3MpKTsKICAgICAgICByb3V0ZXIudHJpZ2dlcigncm91dGUnLCBuYW1lLCBhcmdzKTsKICAgICAgICBCYWNrYm9uZS5oaXN0b3J5LnRyaWdnZXIoJ3JvdXRlJywgcm91dGVyLCBuYW1lLCBhcmdzKTsKICAgICAgfSk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBFeGVjdXRlIGEgcm91dGUgaGFuZGxlciB3aXRoIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXJzLiAgVGhpcyBpcyBhbgogICAgLy8gZXhjZWxsZW50IHBsYWNlIHRvIGRvIHByZS1yb3V0ZSBzZXR1cCBvciBwb3N0LXJvdXRlIGNsZWFudXAuCiAgICBleGVjdXRlOiBmdW5jdGlvbihjYWxsYmFjaywgYXJncykgewogICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpOwogICAgfSwKCiAgICAvLyBTaW1wbGUgcHJveHkgdG8gYEJhY2tib25lLmhpc3RvcnlgIHRvIHNhdmUgYSBmcmFnbWVudCBpbnRvIHRoZSBoaXN0b3J5LgogICAgbmF2aWdhdGU6IGZ1bmN0aW9uKGZyYWdtZW50LCBvcHRpb25zKSB7CiAgICAgIEJhY2tib25lLmhpc3RvcnkubmF2aWdhdGUoZnJhZ21lbnQsIG9wdGlvbnMpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gQmluZCBhbGwgZGVmaW5lZCByb3V0ZXMgdG8gYEJhY2tib25lLmhpc3RvcnlgLiBXZSBoYXZlIHRvIHJldmVyc2UgdGhlCiAgICAvLyBvcmRlciBvZiB0aGUgcm91dGVzIGhlcmUgdG8gc3VwcG9ydCBiZWhhdmlvciB3aGVyZSB0aGUgbW9zdCBnZW5lcmFsCiAgICAvLyByb3V0ZXMgY2FuIGJlIGRlZmluZWQgYXQgdGhlIGJvdHRvbSBvZiB0aGUgcm91dGUgbWFwLgogICAgX2JpbmRSb3V0ZXM6IGZ1bmN0aW9uKCkgewogICAgICBpZiAoIXRoaXMucm91dGVzKSByZXR1cm47CiAgICAgIHRoaXMucm91dGVzID0gXy5yZXN1bHQodGhpcywgJ3JvdXRlcycpOwogICAgICB2YXIgcm91dGUsIHJvdXRlcyA9IF8ua2V5cyh0aGlzLnJvdXRlcyk7CiAgICAgIHdoaWxlICgocm91dGUgPSByb3V0ZXMucG9wKCkpICE9IG51bGwpIHsKICAgICAgICB0aGlzLnJvdXRlKHJvdXRlLCB0aGlzLnJvdXRlc1tyb3V0ZV0pOwogICAgICB9CiAgICB9LAoKICAgIC8vIENvbnZlcnQgYSByb3V0ZSBzdHJpbmcgaW50byBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgc3VpdGFibGUgZm9yIG1hdGNoaW5nCiAgICAvLyBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uIGhhc2guCiAgICBfcm91dGVUb1JlZ0V4cDogZnVuY3Rpb24ocm91dGUpIHsKICAgICAgcm91dGUgPSByb3V0ZS5yZXBsYWNlKGVzY2FwZVJlZ0V4cCwgJ1xcJCYnKQogICAgICAgICAgICAgICAgICAgLnJlcGxhY2Uob3B0aW9uYWxQYXJhbSwgJyg/OiQxKT8nKQogICAgICAgICAgICAgICAgICAgLnJlcGxhY2UobmFtZWRQYXJhbSwgZnVuY3Rpb24obWF0Y2gsIG9wdGlvbmFsKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25hbCA/IG1hdGNoIDogJyhbXi8/XSspJzsKICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAucmVwbGFjZShzcGxhdFBhcmFtLCAnKFteP10qPyknKTsKICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcm91dGUgKyAnKD86XFw/KFtcXHNcXFNdKikpPyQnKTsKICAgIH0sCgogICAgLy8gR2l2ZW4gYSByb3V0ZSwgYW5kIGEgVVJMIGZyYWdtZW50IHRoYXQgaXQgbWF0Y2hlcywgcmV0dXJuIHRoZSBhcnJheSBvZgogICAgLy8gZXh0cmFjdGVkIGRlY29kZWQgcGFyYW1ldGVycy4gRW1wdHkgb3IgdW5tYXRjaGVkIHBhcmFtZXRlcnMgd2lsbCBiZQogICAgLy8gdHJlYXRlZCBhcyBgbnVsbGAgdG8gbm9ybWFsaXplIGNyb3NzLWJyb3dzZXIgYmVoYXZpb3IuCiAgICBfZXh0cmFjdFBhcmFtZXRlcnM6IGZ1bmN0aW9uKHJvdXRlLCBmcmFnbWVudCkgewogICAgICB2YXIgcGFyYW1zID0gcm91dGUuZXhlYyhmcmFnbWVudCkuc2xpY2UoMSk7CiAgICAgIHJldHVybiBfLm1hcChwYXJhbXMsIGZ1bmN0aW9uKHBhcmFtLCBpKSB7CiAgICAgICAgLy8gRG9uJ3QgZGVjb2RlIHRoZSBzZWFyY2ggcGFyYW1zLgogICAgICAgIGlmIChpID09PSBwYXJhbXMubGVuZ3RoIC0gMSkgcmV0dXJuIHBhcmFtIHx8IG51bGw7CiAgICAgICAgcmV0dXJuIHBhcmFtID8gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtKSA6IG51bGw7CiAgICAgIH0pOwogICAgfQoKICB9KTsKCiAgLy8gQmFja2JvbmUuSGlzdG9yeQogIC8vIC0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gSGFuZGxlcyBjcm9zcy1icm93c2VyIGhpc3RvcnkgbWFuYWdlbWVudCwgYmFzZWQgb24gZWl0aGVyCiAgLy8gW3B1c2hTdGF0ZV0oaHR0cDovL2RpdmVpbnRvaHRtbDUuaW5mby9oaXN0b3J5Lmh0bWwpIGFuZCByZWFsIFVSTHMsIG9yCiAgLy8gW29uaGFzaGNoYW5nZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9ET00vd2luZG93Lm9uaGFzaGNoYW5nZSkKICAvLyBhbmQgVVJMIGZyYWdtZW50cy4gSWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgbmVpdGhlciAob2xkIElFLCBuYXRjaCksCiAgLy8gZmFsbHMgYmFjayB0byBwb2xsaW5nLgogIHZhciBIaXN0b3J5ID0gQmFja2JvbmUuSGlzdG9yeSA9IGZ1bmN0aW9uKCkgewogICAgdGhpcy5oYW5kbGVycyA9IFtdOwogICAgXy5iaW5kQWxsKHRoaXMsICdjaGVja1VybCcpOwoKICAgIC8vIEVuc3VyZSB0aGF0IGBIaXN0b3J5YCBjYW4gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBicm93c2VyLgogICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgIHRoaXMubG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247CiAgICAgIHRoaXMuaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5OwogICAgfQogIH07CgogIC8vIENhY2hlZCByZWdleCBmb3Igc3RyaXBwaW5nIGEgbGVhZGluZyBoYXNoL3NsYXNoIGFuZCB0cmFpbGluZyBzcGFjZS4KICB2YXIgcm91dGVTdHJpcHBlciA9IC9eWyNcL118XHMrJC9nOwoKICAvLyBDYWNoZWQgcmVnZXggZm9yIHN0cmlwcGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzLgogIHZhciByb290U3RyaXBwZXIgPSAvXlwvK3xcLyskL2c7CgogIC8vIENhY2hlZCByZWdleCBmb3IgZGV0ZWN0aW5nIE1TSUUuCiAgdmFyIGlzRXhwbG9yZXIgPSAvbXNpZSBbXHcuXSsvOwoKICAvLyBDYWNoZWQgcmVnZXggZm9yIHJlbW92aW5nIGEgdHJhaWxpbmcgc2xhc2guCiAgdmFyIHRyYWlsaW5nU2xhc2ggPSAvXC8kLzsKCiAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBzdHJpcHBpbmcgdXJscyBvZiBoYXNoLgogIHZhciBwYXRoU3RyaXBwZXIgPSAvIy4qJC87CgogIC8vIEhhcyB0aGUgaGlzdG9yeSBoYW5kbGluZyBhbHJlYWR5IGJlZW4gc3RhcnRlZD8KICBIaXN0b3J5LnN0YXJ0ZWQgPSBmYWxzZTsKCiAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKkJhY2tib25lLkhpc3RvcnkqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLgogIF8uZXh0ZW5kKEhpc3RvcnkucHJvdG90eXBlLCBFdmVudHMsIHsKCiAgICAvLyBUaGUgZGVmYXVsdCBpbnRlcnZhbCB0byBwb2xsIGZvciBoYXNoIGNoYW5nZXMsIGlmIG5lY2Vzc2FyeSwgaXMKICAgIC8vIHR3ZW50eSB0aW1lcyBhIHNlY29uZC4KICAgIGludGVydmFsOiA1MCwKCiAgICAvLyBBcmUgd2UgYXQgdGhlIGFwcCByb290PwogICAgYXRSb290OiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvW15cL10kLywgJyQmLycpID09PSB0aGlzLnJvb3Q7CiAgICB9LAoKICAgIC8vIEdldHMgdGhlIHRydWUgaGFzaCB2YWx1ZS4gQ2Fubm90IHVzZSBsb2NhdGlvbi5oYXNoIGRpcmVjdGx5IGR1ZSB0byBidWcKICAgIC8vIGluIEZpcmVmb3ggd2hlcmUgbG9jYXRpb24uaGFzaCB3aWxsIGFsd2F5cyBiZSBkZWNvZGVkLgogICAgZ2V0SGFzaDogZnVuY3Rpb24od2luZG93KSB7CiAgICAgIHZhciBtYXRjaCA9ICh3aW5kb3cgfHwgdGhpcykubG9jYXRpb24uaHJlZi5tYXRjaCgvIyguKikkLyk7CiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJyc7CiAgICB9LAoKICAgIC8vIEdldCB0aGUgY3Jvc3MtYnJvd3NlciBub3JtYWxpemVkIFVSTCBmcmFnbWVudCwgZWl0aGVyIGZyb20gdGhlIFVSTCwKICAgIC8vIHRoZSBoYXNoLCBvciB0aGUgb3ZlcnJpZGUuCiAgICBnZXRGcmFnbWVudDogZnVuY3Rpb24oZnJhZ21lbnQsIGZvcmNlUHVzaFN0YXRlKSB7CiAgICAgIGlmIChmcmFnbWVudCA9PSBudWxsKSB7CiAgICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSB8fCAhdGhpcy5fd2FudHNIYXNoQ2hhbmdlIHx8IGZvcmNlUHVzaFN0YXRlKSB7CiAgICAgICAgICBmcmFnbWVudCA9IGRlY29kZVVSSSh0aGlzLmxvY2F0aW9uLnBhdGhuYW1lICsgdGhpcy5sb2NhdGlvbi5zZWFyY2gpOwogICAgICAgICAgdmFyIHJvb3QgPSB0aGlzLnJvb3QucmVwbGFjZSh0cmFpbGluZ1NsYXNoLCAnJyk7CiAgICAgICAgICBpZiAoIWZyYWdtZW50LmluZGV4T2Yocm9vdCkpIGZyYWdtZW50ID0gZnJhZ21lbnQuc2xpY2Uocm9vdC5sZW5ndGgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZ2V0SGFzaCgpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZnJhZ21lbnQucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7CiAgICB9LAoKICAgIC8vIFN0YXJ0IHRoZSBoYXNoIGNoYW5nZSBoYW5kbGluZywgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgY3VycmVudCBVUkwgbWF0Y2hlcwogICAgLy8gYW4gZXhpc3Rpbmcgcm91dGUsIGFuZCBgZmFsc2VgIG90aGVyd2lzZS4KICAgIHN0YXJ0OiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIGlmIChIaXN0b3J5LnN0YXJ0ZWQpIHRocm93IG5ldyBFcnJvcigiQmFja2JvbmUuaGlzdG9yeSBoYXMgYWxyZWFkeSBiZWVuIHN0YXJ0ZWQiKTsKICAgICAgSGlzdG9yeS5zdGFydGVkID0gdHJ1ZTsKCiAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIGluaXRpYWwgY29uZmlndXJhdGlvbi4gRG8gd2UgbmVlZCBhbiBpZnJhbWU/CiAgICAgIC8vIElzIHB1c2hTdGF0ZSBkZXNpcmVkIC4uLiBpcyBpdCBhdmFpbGFibGU/CiAgICAgIHRoaXMub3B0aW9ucyAgICAgICAgICA9IF8uZXh0ZW5kKHtyb290OiAnLyd9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpOwogICAgICB0aGlzLnJvb3QgICAgICAgICAgICAgPSB0aGlzLm9wdGlvbnMucm9vdDsKICAgICAgdGhpcy5fd2FudHNIYXNoQ2hhbmdlID0gdGhpcy5vcHRpb25zLmhhc2hDaGFuZ2UgIT09IGZhbHNlOwogICAgICB0aGlzLl93YW50c1B1c2hTdGF0ZSAgPSAhIXRoaXMub3B0aW9ucy5wdXNoU3RhdGU7CiAgICAgIHRoaXMuX2hhc1B1c2hTdGF0ZSAgICA9ICEhKHRoaXMub3B0aW9ucy5wdXNoU3RhdGUgJiYgdGhpcy5oaXN0b3J5ICYmIHRoaXMuaGlzdG9yeS5wdXNoU3RhdGUpOwogICAgICB2YXIgZnJhZ21lbnQgICAgICAgICAgPSB0aGlzLmdldEZyYWdtZW50KCk7CiAgICAgIHZhciBkb2NNb2RlICAgICAgICAgICA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTsKICAgICAgdmFyIG9sZElFICAgICAgICAgICAgID0gKGlzRXhwbG9yZXIuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpICYmICghZG9jTW9kZSB8fCBkb2NNb2RlIDw9IDcpKTsKCiAgICAgIC8vIE5vcm1hbGl6ZSByb290IHRvIGFsd2F5cyBpbmNsdWRlIGEgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2guCiAgICAgIHRoaXMucm9vdCA9ICgnLycgKyB0aGlzLnJvb3QgKyAnLycpLnJlcGxhY2Uocm9vdFN0cmlwcGVyLCAnLycpOwoKICAgICAgaWYgKG9sZElFICYmIHRoaXMuX3dhbnRzSGFzaENoYW5nZSkgewogICAgICAgIHZhciBmcmFtZSA9IEJhY2tib25lLiQoJzxpZnJhbWUgc3JjPSJqYXZhc2NyaXB0OjAiIHRhYmluZGV4PSItMSI+Jyk7CiAgICAgICAgdGhpcy5pZnJhbWUgPSBmcmFtZS5oaWRlKCkuYXBwZW5kVG8oJ2JvZHknKVswXS5jb250ZW50V2luZG93OwogICAgICAgIHRoaXMubmF2aWdhdGUoZnJhZ21lbnQpOwogICAgICB9CgogICAgICAvLyBEZXBlbmRpbmcgb24gd2hldGhlciB3ZSdyZSB1c2luZyBwdXNoU3RhdGUgb3IgaGFzaGVzLCBhbmQgd2hldGhlcgogICAgICAvLyAnb25oYXNoY2hhbmdlJyBpcyBzdXBwb3J0ZWQsIGRldGVybWluZSBob3cgd2UgY2hlY2sgdGhlIFVSTCBzdGF0ZS4KICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSkgewogICAgICAgIEJhY2tib25lLiQod2luZG93KS5vbigncG9wc3RhdGUnLCB0aGlzLmNoZWNrVXJsKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UgJiYgKCdvbmhhc2hjaGFuZ2UnIGluIHdpbmRvdykgJiYgIW9sZElFKSB7CiAgICAgICAgQmFja2JvbmUuJCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgdGhpcy5jaGVja1VybCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlKSB7CiAgICAgICAgdGhpcy5fY2hlY2tVcmxJbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMuY2hlY2tVcmwsIHRoaXMuaW50ZXJ2YWwpOwogICAgICB9CgogICAgICAvLyBEZXRlcm1pbmUgaWYgd2UgbmVlZCB0byBjaGFuZ2UgdGhlIGJhc2UgdXJsLCBmb3IgYSBwdXNoU3RhdGUgbGluawogICAgICAvLyBvcGVuZWQgYnkgYSBub24tcHVzaFN0YXRlIGJyb3dzZXIuCiAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudDsKICAgICAgdmFyIGxvYyA9IHRoaXMubG9jYXRpb247CgogICAgICAvLyBUcmFuc2l0aW9uIGZyb20gaGFzaENoYW5nZSB0byBwdXNoU3RhdGUgb3IgdmljZSB2ZXJzYSBpZiBib3RoIGFyZQogICAgICAvLyByZXF1ZXN0ZWQuCiAgICAgIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UgJiYgdGhpcy5fd2FudHNQdXNoU3RhdGUpIHsKCiAgICAgICAgLy8gSWYgd2UndmUgc3RhcnRlZCBvZmYgd2l0aCBhIHJvdXRlIGZyb20gYSBgcHVzaFN0YXRlYC1lbmFibGVkCiAgICAgICAgLy8gYnJvd3NlciwgYnV0IHdlJ3JlIGN1cnJlbnRseSBpbiBhIGJyb3dzZXIgdGhhdCBkb2Vzbid0IHN1cHBvcnQgaXQuLi4KICAgICAgICBpZiAoIXRoaXMuX2hhc1B1c2hTdGF0ZSAmJiAhdGhpcy5hdFJvb3QoKSkgewogICAgICAgICAgdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQobnVsbCwgdHJ1ZSk7CiAgICAgICAgICB0aGlzLmxvY2F0aW9uLnJlcGxhY2UodGhpcy5yb290ICsgJyMnICsgdGhpcy5mcmFnbWVudCk7CiAgICAgICAgICAvLyBSZXR1cm4gaW1tZWRpYXRlbHkgYXMgYnJvd3NlciB3aWxsIGRvIHJlZGlyZWN0IHRvIG5ldyB1cmwKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICAvLyBPciBpZiB3ZSd2ZSBzdGFydGVkIG91dCB3aXRoIGEgaGFzaC1iYXNlZCByb3V0ZSwgYnV0IHdlJ3JlIGN1cnJlbnRseQogICAgICAgIC8vIGluIGEgYnJvd3NlciB3aGVyZSBpdCBjb3VsZCBiZSBgcHVzaFN0YXRlYC1iYXNlZCBpbnN0ZWFkLi4uCiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUgJiYgdGhpcy5hdFJvb3QoKSAmJiBsb2MuaGFzaCkgewogICAgICAgICAgdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0SGFzaCgpLnJlcGxhY2Uocm91dGVTdHJpcHBlciwgJycpOwogICAgICAgICAgdGhpcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgZG9jdW1lbnQudGl0bGUsIHRoaXMucm9vdCArIHRoaXMuZnJhZ21lbnQpOwogICAgICAgIH0KCiAgICAgIH0KCiAgICAgIGlmICghdGhpcy5vcHRpb25zLnNpbGVudCkgcmV0dXJuIHRoaXMubG9hZFVybCgpOwogICAgfSwKCiAgICAvLyBEaXNhYmxlIEJhY2tib25lLmhpc3RvcnksIHBlcmhhcHMgdGVtcG9yYXJpbHkuIE5vdCB1c2VmdWwgaW4gYSByZWFsIGFwcCwKICAgIC8vIGJ1dCBwb3NzaWJseSB1c2VmdWwgZm9yIHVuaXQgdGVzdGluZyBSb3V0ZXJzLgogICAgc3RvcDogZnVuY3Rpb24oKSB7CiAgICAgIEJhY2tib25lLiQod2luZG93KS5vZmYoJ3BvcHN0YXRlJywgdGhpcy5jaGVja1VybCkub2ZmKCdoYXNoY2hhbmdlJywgdGhpcy5jaGVja1VybCk7CiAgICAgIGlmICh0aGlzLl9jaGVja1VybEludGVydmFsKSBjbGVhckludGVydmFsKHRoaXMuX2NoZWNrVXJsSW50ZXJ2YWwpOwogICAgICBIaXN0b3J5LnN0YXJ0ZWQgPSBmYWxzZTsKICAgIH0sCgogICAgLy8gQWRkIGEgcm91dGUgdG8gYmUgdGVzdGVkIHdoZW4gdGhlIGZyYWdtZW50IGNoYW5nZXMuIFJvdXRlcyBhZGRlZCBsYXRlcgogICAgLy8gbWF5IG92ZXJyaWRlIHByZXZpb3VzIHJvdXRlcy4KICAgIHJvdXRlOiBmdW5jdGlvbihyb3V0ZSwgY2FsbGJhY2spIHsKICAgICAgdGhpcy5oYW5kbGVycy51bnNoaWZ0KHtyb3V0ZTogcm91dGUsIGNhbGxiYWNrOiBjYWxsYmFja30pOwogICAgfSwKCiAgICAvLyBDaGVja3MgdGhlIGN1cnJlbnQgVVJMIHRvIHNlZSBpZiBpdCBoYXMgY2hhbmdlZCwgYW5kIGlmIGl0IGhhcywKICAgIC8vIGNhbGxzIGBsb2FkVXJsYCwgbm9ybWFsaXppbmcgYWNyb3NzIHRoZSBoaWRkZW4gaWZyYW1lLgogICAgY2hlY2tVcmw6IGZ1bmN0aW9uKGUpIHsKICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdldEZyYWdtZW50KCk7CiAgICAgIGlmIChjdXJyZW50ID09PSB0aGlzLmZyYWdtZW50ICYmIHRoaXMuaWZyYW1lKSB7CiAgICAgICAgY3VycmVudCA9IHRoaXMuZ2V0RnJhZ21lbnQodGhpcy5nZXRIYXNoKHRoaXMuaWZyYW1lKSk7CiAgICAgIH0KICAgICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuZnJhZ21lbnQpIHJldHVybiBmYWxzZTsKICAgICAgaWYgKHRoaXMuaWZyYW1lKSB0aGlzLm5hdmlnYXRlKGN1cnJlbnQpOwogICAgICB0aGlzLmxvYWRVcmwoKTsKICAgIH0sCgogICAgLy8gQXR0ZW1wdCB0byBsb2FkIHRoZSBjdXJyZW50IFVSTCBmcmFnbWVudC4gSWYgYSByb3V0ZSBzdWNjZWVkcyB3aXRoIGEKICAgIC8vIG1hdGNoLCByZXR1cm5zIGB0cnVlYC4gSWYgbm8gZGVmaW5lZCByb3V0ZXMgbWF0Y2hlcyB0aGUgZnJhZ21lbnQsCiAgICAvLyByZXR1cm5zIGBmYWxzZWAuCiAgICBsb2FkVXJsOiBmdW5jdGlvbihmcmFnbWVudCkgewogICAgICBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KGZyYWdtZW50KTsKICAgICAgcmV0dXJuIF8uYW55KHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uKGhhbmRsZXIpIHsKICAgICAgICBpZiAoaGFuZGxlci5yb3V0ZS50ZXN0KGZyYWdtZW50KSkgewogICAgICAgICAgaGFuZGxlci5jYWxsYmFjayhmcmFnbWVudCk7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKCiAgICAvLyBTYXZlIGEgZnJhZ21lbnQgaW50byB0aGUgaGFzaCBoaXN0b3J5LCBvciByZXBsYWNlIHRoZSBVUkwgc3RhdGUgaWYgdGhlCiAgICAvLyAncmVwbGFjZScgb3B0aW9uIGlzIHBhc3NlZC4gWW91IGFyZSByZXNwb25zaWJsZSBmb3IgcHJvcGVybHkgVVJMLWVuY29kaW5nCiAgICAvLyB0aGUgZnJhZ21lbnQgaW4gYWR2YW5jZS4KICAgIC8vCiAgICAvLyBUaGUgb3B0aW9ucyBvYmplY3QgY2FuIGNvbnRhaW4gYHRyaWdnZXI6IHRydWVgIGlmIHlvdSB3aXNoIHRvIGhhdmUgdGhlCiAgICAvLyByb3V0ZSBjYWxsYmFjayBiZSBmaXJlZCAobm90IHVzdWFsbHkgZGVzaXJhYmxlKSwgb3IgYHJlcGxhY2U6IHRydWVgLCBpZgogICAgLy8geW91IHdpc2ggdG8gbW9kaWZ5IHRoZSBjdXJyZW50IFVSTCB3aXRob3V0IGFkZGluZyBhbiBlbnRyeSB0byB0aGUgaGlzdG9yeS4KICAgIG5hdmlnYXRlOiBmdW5jdGlvbihmcmFnbWVudCwgb3B0aW9ucykgewogICAgICBpZiAoIUhpc3Rvcnkuc3RhcnRlZCkgcmV0dXJuIGZhbHNlOwogICAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucyA9PT0gdHJ1ZSkgb3B0aW9ucyA9IHt0cmlnZ2VyOiAhIW9wdGlvbnN9OwoKICAgICAgdmFyIHVybCA9IHRoaXMucm9vdCArIChmcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoZnJhZ21lbnQgfHwgJycpKTsKCiAgICAgIC8vIFN0cmlwIHRoZSBoYXNoIGZvciBtYXRjaGluZy4KICAgICAgZnJhZ21lbnQgPSBmcmFnbWVudC5yZXBsYWNlKHBhdGhTdHJpcHBlciwgJycpOwoKICAgICAgaWYgKHRoaXMuZnJhZ21lbnQgPT09IGZyYWdtZW50KSByZXR1cm47CiAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudDsKCiAgICAgIC8vIERvbid0IGluY2x1ZGUgYSB0cmFpbGluZyBzbGFzaCBvbiB0aGUgcm9vdC4KICAgICAgaWYgKGZyYWdtZW50ID09PSAnJyAmJiB1cmwgIT09ICcvJykgdXJsID0gdXJsLnNsaWNlKDAsIC0xKTsKCiAgICAgIC8vIElmIHB1c2hTdGF0ZSBpcyBhdmFpbGFibGUsIHdlIHVzZSBpdCB0byBzZXQgdGhlIGZyYWdtZW50IGFzIGEgcmVhbCBVUkwuCiAgICAgIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUpIHsKICAgICAgICB0aGlzLmhpc3Rvcnlbb3B0aW9ucy5yZXBsYWNlID8gJ3JlcGxhY2VTdGF0ZScgOiAncHVzaFN0YXRlJ10oe30sIGRvY3VtZW50LnRpdGxlLCB1cmwpOwoKICAgICAgLy8gSWYgaGFzaCBjaGFuZ2VzIGhhdmVuJ3QgYmVlbiBleHBsaWNpdGx5IGRpc2FibGVkLCB1cGRhdGUgdGhlIGhhc2gKICAgICAgLy8gZnJhZ21lbnQgdG8gc3RvcmUgaGlzdG9yeS4KICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UpIHsKICAgICAgICB0aGlzLl91cGRhdGVIYXNoKHRoaXMubG9jYXRpb24sIGZyYWdtZW50LCBvcHRpb25zLnJlcGxhY2UpOwogICAgICAgIGlmICh0aGlzLmlmcmFtZSAmJiAoZnJhZ21lbnQgIT09IHRoaXMuZ2V0RnJhZ21lbnQodGhpcy5nZXRIYXNoKHRoaXMuaWZyYW1lKSkpKSB7CiAgICAgICAgICAvLyBPcGVuaW5nIGFuZCBjbG9zaW5nIHRoZSBpZnJhbWUgdHJpY2tzIElFNyBhbmQgZWFybGllciB0byBwdXNoIGEKICAgICAgICAgIC8vIGhpc3RvcnkgZW50cnkgb24gaGFzaC10YWcgY2hhbmdlLiAgV2hlbiByZXBsYWNlIGlzIHRydWUsIHdlIGRvbid0CiAgICAgICAgICAvLyB3YW50IHRoaXMuCiAgICAgICAgICBpZighb3B0aW9ucy5yZXBsYWNlKSB0aGlzLmlmcmFtZS5kb2N1bWVudC5vcGVuKCkuY2xvc2UoKTsKICAgICAgICAgIHRoaXMuX3VwZGF0ZUhhc2godGhpcy5pZnJhbWUubG9jYXRpb24sIGZyYWdtZW50LCBvcHRpb25zLnJlcGxhY2UpOwogICAgICAgIH0KCiAgICAgIC8vIElmIHlvdSd2ZSB0b2xkIHVzIHRoYXQgeW91IGV4cGxpY2l0bHkgZG9uJ3Qgd2FudCBmYWxsYmFjayBoYXNoY2hhbmdlLQogICAgICAvLyBiYXNlZCBoaXN0b3J5LCB0aGVuIGBuYXZpZ2F0ZWAgYmVjb21lcyBhIHBhZ2UgcmVmcmVzaC4KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbi5hc3NpZ24odXJsKTsKICAgICAgfQogICAgICBpZiAob3B0aW9ucy50cmlnZ2VyKSByZXR1cm4gdGhpcy5sb2FkVXJsKGZyYWdtZW50KTsKICAgIH0sCgogICAgLy8gVXBkYXRlIHRoZSBoYXNoIGxvY2F0aW9uLCBlaXRoZXIgcmVwbGFjaW5nIHRoZSBjdXJyZW50IGVudHJ5LCBvciBhZGRpbmcKICAgIC8vIGEgbmV3IG9uZSB0byB0aGUgYnJvd3NlciBoaXN0b3J5LgogICAgX3VwZGF0ZUhhc2g6IGZ1bmN0aW9uKGxvY2F0aW9uLCBmcmFnbWVudCwgcmVwbGFjZSkgewogICAgICBpZiAocmVwbGFjZSkgewogICAgICAgIHZhciBocmVmID0gbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8oamF2YXNjcmlwdDp8IykuKiQvLCAnJyk7CiAgICAgICAgbG9jYXRpb24ucmVwbGFjZShocmVmICsgJyMnICsgZnJhZ21lbnQpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFNvbWUgYnJvd3NlcnMgcmVxdWlyZSB0aGF0IGBoYXNoYCBjb250YWlucyBhIGxlYWRpbmcgIy4KICAgICAgICBsb2NhdGlvbi5oYXNoID0gJyMnICsgZnJhZ21lbnQ7CiAgICAgIH0KICAgIH0KCiAgfSk7CgogIC8vIENyZWF0ZSB0aGUgZGVmYXVsdCBCYWNrYm9uZS5oaXN0b3J5LgogIEJhY2tib25lLmhpc3RvcnkgPSBuZXcgSGlzdG9yeTsKCiAgLy8gSGVscGVycwogIC8vIC0tLS0tLS0KCiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvcnJlY3RseSBzZXQgdXAgdGhlIHByb3RvdHlwZSBjaGFpbiwgZm9yIHN1YmNsYXNzZXMuCiAgLy8gU2ltaWxhciB0byBgZ29vZy5pbmhlcml0c2AsIGJ1dCB1c2VzIGEgaGFzaCBvZiBwcm90b3R5cGUgcHJvcGVydGllcyBhbmQKICAvLyBjbGFzcyBwcm9wZXJ0aWVzIHRvIGJlIGV4dGVuZGVkLgogIHZhciBleHRlbmQgPSBmdW5jdGlvbihwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogICAgdmFyIHBhcmVudCA9IHRoaXM7CiAgICB2YXIgY2hpbGQ7CgogICAgLy8gVGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgbmV3IHN1YmNsYXNzIGlzIGVpdGhlciBkZWZpbmVkIGJ5IHlvdQogICAgLy8gKHRoZSAiY29uc3RydWN0b3IiIHByb3BlcnR5IGluIHlvdXIgYGV4dGVuZGAgZGVmaW5pdGlvbiksIG9yIGRlZmF1bHRlZAogICAgLy8gYnkgdXMgdG8gc2ltcGx5IGNhbGwgdGhlIHBhcmVudCdzIGNvbnN0cnVjdG9yLgogICAgaWYgKHByb3RvUHJvcHMgJiYgXy5oYXMocHJvdG9Qcm9wcywgJ2NvbnN0cnVjdG9yJykpIHsKICAgICAgY2hpbGQgPSBwcm90b1Byb3BzLmNvbnN0cnVjdG9yOwogICAgfSBlbHNlIHsKICAgICAgY2hpbGQgPSBmdW5jdGlvbigpeyByZXR1cm4gcGFyZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07CiAgICB9CgogICAgLy8gQWRkIHN0YXRpYyBwcm9wZXJ0aWVzIHRvIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgaWYgc3VwcGxpZWQuCiAgICBfLmV4dGVuZChjaGlsZCwgcGFyZW50LCBzdGF0aWNQcm9wcyk7CgogICAgLy8gU2V0IHRoZSBwcm90b3R5cGUgY2hhaW4gdG8gaW5oZXJpdCBmcm9tIGBwYXJlbnRgLCB3aXRob3V0IGNhbGxpbmcKICAgIC8vIGBwYXJlbnRgJ3MgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAgICB2YXIgU3Vycm9nYXRlID0gZnVuY3Rpb24oKXsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9OwogICAgU3Vycm9nYXRlLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7CiAgICBjaGlsZC5wcm90b3R5cGUgPSBuZXcgU3Vycm9nYXRlOwoKICAgIC8vIEFkZCBwcm90b3R5cGUgcHJvcGVydGllcyAoaW5zdGFuY2UgcHJvcGVydGllcykgdG8gdGhlIHN1YmNsYXNzLAogICAgLy8gaWYgc3VwcGxpZWQuCiAgICBpZiAocHJvdG9Qcm9wcykgXy5leHRlbmQoY2hpbGQucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKCiAgICAvLyBTZXQgYSBjb252ZW5pZW5jZSBwcm9wZXJ0eSBpbiBjYXNlIHRoZSBwYXJlbnQncyBwcm90b3R5cGUgaXMgbmVlZGVkCiAgICAvLyBsYXRlci4KICAgIGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7CgogICAgcmV0dXJuIGNoaWxkOwogIH07CgogIC8vIFNldCB1cCBpbmhlcml0YW5jZSBmb3IgdGhlIG1vZGVsLCBjb2xsZWN0aW9uLCByb3V0ZXIsIHZpZXcgYW5kIGhpc3RvcnkuCiAgTW9kZWwuZXh0ZW5kID0gQ29sbGVjdGlvbi5leHRlbmQgPSBSb3V0ZXIuZXh0ZW5kID0gVmlldy5leHRlbmQgPSBIaXN0b3J5LmV4dGVuZCA9IGV4dGVuZDsKCiAgLy8gVGhyb3cgYW4gZXJyb3Igd2hlbiBhIFVSTCBpcyBuZWVkZWQsIGFuZCBub25lIGlzIHN1cHBsaWVkLgogIHZhciB1cmxFcnJvciA9IGZ1bmN0aW9uKCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdBICJ1cmwiIHByb3BlcnR5IG9yIGZ1bmN0aW9uIG11c3QgYmUgc3BlY2lmaWVkJyk7CiAgfTsKCiAgLy8gV3JhcCBhbiBvcHRpb25hbCBlcnJvciBjYWxsYmFjayB3aXRoIGEgZmFsbGJhY2sgZXJyb3IgZXZlbnQuCiAgdmFyIHdyYXBFcnJvciA9IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7CiAgICB2YXIgZXJyb3IgPSBvcHRpb25zLmVycm9yOwogICAgb3B0aW9ucy5lcnJvciA9IGZ1bmN0aW9uKHJlc3ApIHsKICAgICAgaWYgKGVycm9yKSBlcnJvcihtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgIG1vZGVsLnRyaWdnZXIoJ2Vycm9yJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgfTsKICB9OwoKICByZXR1cm4gQmFja2JvbmU7Cgp9KSk7CgovKioKICogQmFja2JvbmUgbG9jYWxTdG9yYWdlIGFuZCBzZXNzaW9uU3RvcmFnZSBBZGFwdGVyCiAqIFZlcnNpb24gMC4wLjEKICoKICogaHR0cHM6Ly9naXRodWIuY29tL2pjYnJhbmQvQmFja2JvbmUuYnJvd3NlclN0b3JhZ2UKICovCihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkgewogIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHsKICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCJiYWNrYm9uZSIpLCByZXF1aXJlKCd1bmRlcnNjb3JlJykpOwogIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuCiAgICBkZWZpbmUoJ2JhY2tib25lLmJyb3dzZXJTdG9yYWdlJyxbImJhY2tib25lIiwgInVuZGVyc2NvcmUiXSwgZnVuY3Rpb24oQmFja2JvbmUsIF8pIHsKICAgICAgLy8gVXNlIGdsb2JhbCB2YXJpYWJsZXMgaWYgdGhlIGxvY2FscyBhcmUgdW5kZWZpbmVkLgogICAgICByZXR1cm4gZmFjdG9yeShCYWNrYm9uZSB8fCByb290LkJhY2tib25lLCBfIHx8IHJvb3QuXyk7CiAgICB9KTsKICB9IGVsc2UgewogICAgZmFjdG9yeShCYWNrYm9uZSwgXyk7CiAgfQp9KHRoaXMsIGZ1bmN0aW9uKEJhY2tib25lLCBfKSB7Ci8vIEEgc2ltcGxlIG1vZHVsZSB0byByZXBsYWNlIGBCYWNrYm9uZS5zeW5jYCB3aXRoICpicm93c2VyIHN0b3JhZ2UqLWJhc2VkCi8vIHBlcnNpc3RlbmNlLiBNb2RlbHMgYXJlIGdpdmVuIEdVSURTLCBhbmQgc2F2ZWQgaW50byBhIEpTT04gb2JqZWN0LiBTaW1wbGUKLy8gYXMgdGhhdC4KCi8vIEhvbGQgcmVmZXJlbmNlIHRvIFVuZGVyc2NvcmUuanMgYW5kIEJhY2tib25lLmpzIGluIHRoZSBjbG9zdXJlIGluIG9yZGVyCi8vIHRvIG1ha2UgdGhpbmdzIHdvcmsgZXZlbiBpZiB0aGV5IGFyZSByZW1vdmVkIGZyb20gdGhlIGdsb2JhbCBuYW1lc3BhY2UKCi8vIEdlbmVyYXRlIGZvdXIgcmFuZG9tIGhleCBkaWdpdHMuCmZ1bmN0aW9uIFM0KCkgewogICByZXR1cm4gKCgoMStNYXRoLnJhbmRvbSgpKSoweDEwMDAwKXwwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpOwp9CgovLyBHZW5lcmF0ZSBhIHBzZXVkby1HVUlEIGJ5IGNvbmNhdGVuYXRpbmcgcmFuZG9tIGhleGFkZWNpbWFsLgpmdW5jdGlvbiBndWlkKCkgewogICByZXR1cm4gKFM0KCkrUzQoKSsiLSIrUzQoKSsiLSIrUzQoKSsiLSIrUzQoKSsiLSIrUzQoKStTNCgpK1M0KCkpOwp9CgpmdW5jdGlvbiBjb250YWlucyhhcnJheSwgaXRlbSkgewogIHZhciBpID0gYXJyYXkubGVuZ3RoOwogIHdoaWxlIChpLS0pIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIHRydWU7CiAgcmV0dXJuIGZhbHNlOwp9CgpmdW5jdGlvbiBleHRlbmQob2JqLCBwcm9wcykgewogIGZvciAodmFyIGtleSBpbiBwcm9wcykgeyBvYmpba2V5XSA9IHByb3BzW2tleV07IH0KICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfYnJvd3NlclN0b3JhZ2UgKG5hbWUsIHNlcmlhbGl6ZXIsIHR5cGUpIHsKICAgIHZhciBfc3RvcmU7CiAgICBpZiAodHlwZSA9PT0gJ2xvY2FsJyAmJiAhd2luZG93LmxvY2FsU3RvcmFnZSApIHsKICAgICAgICB0aHJvdyAiQmFja2JvbmUuYnJvd3NlclN0b3JhZ2U6IEVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgbG9jYWxTdG9yYWdlLiI7CiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzZXNzaW9uJyAmJiAhd2luZG93LnNlc3Npb25TdG9yYWdlICkgewogICAgICAgIHRocm93ICJCYWNrYm9uZS5icm93c2VyU3RvcmFnZTogRW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBzZXNzaW9uU3RvcmFnZS4iOwogICAgfQogICAgdGhpcy5uYW1lID0gbmFtZTsKICAgIHRoaXMuc2VyaWFsaXplciA9IHNlcmlhbGl6ZXIgfHwgewogICAgICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24oaXRlbSkgewogICAgICAgIHJldHVybiBfLmlzT2JqZWN0KGl0ZW0pID8gSlNPTi5zdHJpbmdpZnkoaXRlbSkgOiBpdGVtOwogICAgICAgIH0sCiAgICAgICAgLy8gZml4IGZvciAiaWxsZWdhbCBhY2Nlc3MiIGVycm9yIG9uIEFuZHJvaWQgd2hlbiBKU09OLnBhcnNlIGlzIHBhc3NlZCBudWxsCiAgICAgICAgZGVzZXJpYWxpemU6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgcmV0dXJuIGRhdGEgJiYgSlNPTi5wYXJzZShkYXRhKTsKICAgICAgICB9CiAgICB9OwoKICAgIGlmICh0eXBlID09PSAnc2Vzc2lvbicpIHsKICAgICAgICB0aGlzLnN0b3JlID0gd2luZG93LnNlc3Npb25TdG9yYWdlOwogICAgfSBlbHNlIGlmICh0eXBlID09PSAnbG9jYWwnKSB7CiAgICAgICAgdGhpcy5zdG9yZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7CiAgICB9IGVsc2UgewogICAgICAgIHRocm93ICJCYWNrYm9uZS5icm93c2VyU3RvcmFnZTogTm8gc3RvcmFnZSB0eXBlIHdhcyBzcGVjaWZpZWQiOwogICAgfQogICAgX3N0b3JlID0gdGhpcy5zdG9yZS5nZXRJdGVtKHRoaXMubmFtZSk7CiAgICB0aGlzLnJlY29yZHMgPSAoX3N0b3JlICYmIF9zdG9yZS5zcGxpdCgiLCIpKSB8fCBbXTsKfQoKLy8gT3VyIFN0b3JlIGlzIHJlcHJlc2VudGVkIGJ5IGEgc2luZ2xlIEpTIG9iamVjdCBpbiAqbG9jYWxTdG9yYWdlKiBvciAqc2Vzc2lvblN0b3JhZ2UqLgovLyBDcmVhdGUgaXQgd2l0aCBhIG1lYW5pbmdmdWwgbmFtZSwgbGlrZSB0aGUgbmFtZSB5b3UnZCBnaXZlIGEgdGFibGUuCkJhY2tib25lLkJyb3dzZXJTdG9yYWdlID0gewogICAgbG9jYWw6IGZ1bmN0aW9uIChuYW1lLCBzZXJpYWxpemVyKSB7CiAgICAgICAgcmV0dXJuIF9icm93c2VyU3RvcmFnZS5iaW5kKHRoaXMsIG5hbWUsIHNlcmlhbGl6ZXIsICdsb2NhbCcpKCk7CiAgICB9LAogICAgc2Vzc2lvbjogZnVuY3Rpb24gKG5hbWUsIHNlcmlhbGl6ZXIpIHsKICAgICAgICByZXR1cm4gX2Jyb3dzZXJTdG9yYWdlLmJpbmQodGhpcywgbmFtZSwgc2VyaWFsaXplciwgJ3Nlc3Npb24nKSgpOwogICAgfQp9OwoKLy8gVGhlIGJyb3dzZXIncyBsb2NhbCBhbmQgc2Vzc2lvbiBzdG9yZXMgd2lsbCBiZSBleHRlbmRlZCB3aXRoIHRoaXMgb2JqLgp2YXIgX2V4dGVuc2lvbiA9IHsKCiAgLy8gU2F2ZSB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgKipTdG9yZSoqCiAgc2F2ZTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnN0b3JlLnNldEl0ZW0odGhpcy5uYW1lLCB0aGlzLnJlY29yZHMuam9pbigiLCIpKTsKICB9LAoKICAvLyBBZGQgYSBtb2RlbCwgZ2l2aW5nIGl0IGEgKGhvcGVmdWxseSktdW5pcXVlIEdVSUQsIGlmIGl0IGRvZXNuJ3QgYWxyZWFkeQogIC8vIGhhdmUgYW4gaWQgb2YgaXQncyBvd24uCiAgY3JlYXRlOiBmdW5jdGlvbihtb2RlbCkgewogICAgaWYgKCFtb2RlbC5pZCkgewogICAgICBtb2RlbC5pZCA9IGd1aWQoKTsKICAgICAgbW9kZWwuc2V0KG1vZGVsLmlkQXR0cmlidXRlLCBtb2RlbC5pZCk7CiAgICB9CiAgICB0aGlzLnN0b3JlLnNldEl0ZW0odGhpcy5faXRlbU5hbWUobW9kZWwuaWQpLCB0aGlzLnNlcmlhbGl6ZXIuc2VyaWFsaXplKG1vZGVsKSk7CiAgICB0aGlzLnJlY29yZHMucHVzaChtb2RlbC5pZC50b1N0cmluZygpKTsKICAgIHRoaXMuc2F2ZSgpOwogICAgcmV0dXJuIHRoaXMuZmluZChtb2RlbCkgIT09IGZhbHNlOwogIH0sCgogIC8vIFVwZGF0ZSBhIG1vZGVsIGJ5IHJlcGxhY2luZyBpdHMgY29weSBpbiBgdGhpcy5kYXRhYC4KICB1cGRhdGU6IGZ1bmN0aW9uKG1vZGVsKSB7CiAgICB0aGlzLnN0b3JlLnNldEl0ZW0odGhpcy5faXRlbU5hbWUobW9kZWwuaWQpLCB0aGlzLnNlcmlhbGl6ZXIuc2VyaWFsaXplKG1vZGVsKSk7CiAgICB2YXIgbW9kZWxJZCA9IG1vZGVsLmlkLnRvU3RyaW5nKCk7CiAgICBpZiAoIWNvbnRhaW5zKHRoaXMucmVjb3JkcywgbW9kZWxJZCkpIHsKICAgICAgdGhpcy5yZWNvcmRzLnB1c2gobW9kZWxJZCk7CiAgICAgIHRoaXMuc2F2ZSgpOwogICAgfQogICAgcmV0dXJuIHRoaXMuZmluZChtb2RlbCkgIT09IGZhbHNlOwogIH0sCgogIC8vIFJldHJpZXZlIGEgbW9kZWwgZnJvbSBgdGhpcy5kYXRhYCBieSBpZC4KICBmaW5kOiBmdW5jdGlvbihtb2RlbCkgewogICAgcmV0dXJuIHRoaXMuc2VyaWFsaXplci5kZXNlcmlhbGl6ZSh0aGlzLnN0b3JlLmdldEl0ZW0odGhpcy5faXRlbU5hbWUobW9kZWwuaWQpKSk7CiAgfSwKCiAgLy8gUmV0dXJuIHRoZSBhcnJheSBvZiBhbGwgbW9kZWxzIGN1cnJlbnRseSBpbiBzdG9yYWdlLgogIGZpbmRBbGw6IGZ1bmN0aW9uKCkgewogICAgdmFyIHJlc3VsdCA9IFtdOwogICAgZm9yICh2YXIgaSA9IDAsIGlkLCBkYXRhOyBpIDwgdGhpcy5yZWNvcmRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlkID0gdGhpcy5yZWNvcmRzW2ldOwogICAgICBkYXRhID0gdGhpcy5zZXJpYWxpemVyLmRlc2VyaWFsaXplKHRoaXMuc3RvcmUuZ2V0SXRlbSh0aGlzLl9pdGVtTmFtZShpZCkpKTsKICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHJlc3VsdC5wdXNoKGRhdGEpOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9LAoKICAvLyBEZWxldGUgYSBtb2RlbCBmcm9tIGB0aGlzLmRhdGFgLCByZXR1cm5pbmcgaXQuCiAgZGVzdHJveTogZnVuY3Rpb24obW9kZWwpIHsKICAgIHRoaXMuc3RvcmUucmVtb3ZlSXRlbSh0aGlzLl9pdGVtTmFtZShtb2RlbC5pZCkpOwogICAgdmFyIG1vZGVsSWQgPSBtb2RlbC5pZC50b1N0cmluZygpOwogICAgZm9yICh2YXIgaSA9IDAsIGlkOyBpIDwgdGhpcy5yZWNvcmRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmICh0aGlzLnJlY29yZHNbaV0gPT09IG1vZGVsSWQpIHsKICAgICAgICB0aGlzLnJlY29yZHMuc3BsaWNlKGksIDEpOwogICAgICB9CiAgICB9CiAgICB0aGlzLnNhdmUoKTsKICAgIHJldHVybiBtb2RlbDsKICB9LAoKICBicm93c2VyU3RvcmFnZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICAgIHNlc3Npb246IHNlc3Npb25TdG9yYWdlLAogICAgICAgIGxvY2FsOiBsb2NhbFN0b3JhZ2UKICAgIH07CiAgfSwKCiAgLy8gQ2xlYXIgYnJvd3NlclN0b3JhZ2UgZm9yIHNwZWNpZmljIGNvbGxlY3Rpb24uCiAgX2NsZWFyOiBmdW5jdGlvbigpIHsKICAgIHZhciBsb2NhbCA9IHRoaXMuc3RvcmUsCiAgICAgIGl0ZW1SZSA9IG5ldyBSZWdFeHAoIl4iICsgdGhpcy5uYW1lICsgIi0iKTsKCiAgICAvLyBSZW1vdmUgaWQtdHJhY2tpbmcgaXRlbSAoZS5nLiwgImZvbyIpLgogICAgbG9jYWwucmVtb3ZlSXRlbSh0aGlzLm5hbWUpOwoKICAgIC8vIE1hdGNoIGFsbCBkYXRhIGl0ZW1zIChlLmcuLCAiZm9vLUlEIikgYW5kIHJlbW92ZS4KICAgIGZvciAodmFyIGsgaW4gbG9jYWwpIHsKICAgICAgaWYgKGl0ZW1SZS50ZXN0KGspKSB7CiAgICAgICAgbG9jYWwucmVtb3ZlSXRlbShrKTsKICAgICAgfQogICAgfQoKICAgIHRoaXMucmVjb3Jkcy5sZW5ndGggPSAwOwogIH0sCgogIC8vIFNpemUgb2YgYnJvd3NlclN0b3JhZ2UuCiAgX3N0b3JhZ2VTaXplOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLnN0b3JlLmxlbmd0aDsKICB9LAoKICBfaXRlbU5hbWU6IGZ1bmN0aW9uKGlkKSB7CiAgICByZXR1cm4gdGhpcy5uYW1lKyItIitpZDsKICB9Cgp9OwoKZXh0ZW5kKEJhY2tib25lLkJyb3dzZXJTdG9yYWdlLnNlc3Npb24ucHJvdG90eXBlLCBfZXh0ZW5zaW9uKTsKZXh0ZW5kKEJhY2tib25lLkJyb3dzZXJTdG9yYWdlLmxvY2FsLnByb3RvdHlwZSwgX2V4dGVuc2lvbik7CgovLyBsb2NhbFN5bmMgZGVsZWdhdGUgdG8gdGhlIG1vZGVsIG9yIGNvbGxlY3Rpb24ncwovLyAqYnJvd3NlclN0b3JhZ2UqIHByb3BlcnR5LCB3aGljaCBzaG91bGQgYmUgYW4gaW5zdGFuY2Ugb2YgYFN0b3JlYC4KLy8gd2luZG93LlN0b3JlLnN5bmMgYW5kIEJhY2tib25lLmxvY2FsU3luYyBpcyBkZXByZWNhdGVkLCB1c2UgQmFja2JvbmUuQnJvd3NlclN0b3JhZ2Uuc3luYyBpbnN0ZWFkCkJhY2tib25lLkJyb3dzZXJTdG9yYWdlLnN5bmMgPSBCYWNrYm9uZS5sb2NhbFN5bmMgPSBmdW5jdGlvbihtZXRob2QsIG1vZGVsLCBvcHRpb25zKSB7CiAgdmFyIHN0b3JlID0gbW9kZWwuYnJvd3NlclN0b3JhZ2UgfHwgbW9kZWwuY29sbGVjdGlvbi5icm93c2VyU3RvcmFnZTsKCiAgdmFyIHJlc3AsIGVycm9yTWVzc2FnZTsKICAvL0lmICQgaXMgaGF2aW5nIERlZmVycmVkIC0gdXNlIGl0LgogIHZhciBzeW5jRGZkID0gQmFja2JvbmUuJCA/CiAgICAoQmFja2JvbmUuJC5EZWZlcnJlZCAmJiBCYWNrYm9uZS4kLkRlZmVycmVkKCkpIDoKICAgIChCYWNrYm9uZS5EZWZlcnJlZCAmJiBCYWNrYm9uZS5EZWZlcnJlZCgpKTsKCiAgdHJ5IHsKCiAgICBzd2l0Y2ggKG1ldGhvZCkgewogICAgICBjYXNlICJyZWFkIjoKICAgICAgICByZXNwID0gbW9kZWwuaWQgIT09IHVuZGVmaW5lZCA/IHN0b3JlLmZpbmQobW9kZWwpIDogc3RvcmUuZmluZEFsbCgpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJjcmVhdGUiOgogICAgICAgIHJlc3AgPSBzdG9yZS5jcmVhdGUobW9kZWwpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJ1cGRhdGUiOgogICAgICAgIHJlc3AgPSBzdG9yZS51cGRhdGUobW9kZWwpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJkZWxldGUiOgogICAgICAgIHJlc3AgPSBzdG9yZS5kZXN0cm95KG1vZGVsKTsKICAgICAgICBicmVhazsKICAgIH0KCiAgfSBjYXRjaChlcnJvcikgewogICAgaWYgKGVycm9yLmNvZGUgPT09IDIyICYmIHN0b3JlLl9zdG9yYWdlU2l6ZSgpID09PSAwKQogICAgICBlcnJvck1lc3NhZ2UgPSAiUHJpdmF0ZSBicm93c2luZyBpcyB1bnN1cHBvcnRlZCI7CiAgICBlbHNlCiAgICAgIGVycm9yTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7CiAgfQoKICBpZiAocmVzcCkgewogICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zdWNjZXNzKSB7CiAgICAgIGlmIChCYWNrYm9uZS5WRVJTSU9OID09PSAiMC45LjEwIikgewogICAgICAgIG9wdGlvbnMuc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb3B0aW9ucy5zdWNjZXNzKHJlc3ApOwogICAgICB9CiAgICB9CiAgICBpZiAoc3luY0RmZCkgewogICAgICBzeW5jRGZkLnJlc29sdmUocmVzcCk7CiAgICB9CgogIH0gZWxzZSB7CiAgICBlcnJvck1lc3NhZ2UgPSBlcnJvck1lc3NhZ2UgPyBlcnJvck1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICJSZWNvcmQgTm90IEZvdW5kIjsKCiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVycm9yKQogICAgICBpZiAoQmFja2JvbmUuVkVSU0lPTiA9PT0gIjAuOS4xMCIpIHsKICAgICAgICBvcHRpb25zLmVycm9yKG1vZGVsLCBlcnJvck1lc3NhZ2UsIG9wdGlvbnMpOwogICAgICB9IGVsc2UgewogICAgICAgIG9wdGlvbnMuZXJyb3IoZXJyb3JNZXNzYWdlKTsKICAgICAgfQoKICAgIGlmIChzeW5jRGZkKQogICAgICBzeW5jRGZkLnJlamVjdChlcnJvck1lc3NhZ2UpOwogIH0KCiAgLy8gYWRkIGNvbXBhdGliaWxpdHkgd2l0aCAkLmFqYXgKICAvLyBhbHdheXMgZXhlY3V0ZSBjYWxsYmFjayBmb3Igc3VjY2VzcyBhbmQgZXJyb3IKICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmNvbXBsZXRlKSBvcHRpb25zLmNvbXBsZXRlKHJlc3ApOwoKICByZXR1cm4gc3luY0RmZCAmJiBzeW5jRGZkLnByb21pc2UoKTsKfTsKCkJhY2tib25lLmFqYXhTeW5jID0gQmFja2JvbmUuc3luYzsKCkJhY2tib25lLmdldFN5bmNNZXRob2QgPSBmdW5jdGlvbihtb2RlbCkgewogIGlmKG1vZGVsLmJyb3dzZXJTdG9yYWdlIHx8IChtb2RlbC5jb2xsZWN0aW9uICYmIG1vZGVsLmNvbGxlY3Rpb24uYnJvd3NlclN0b3JhZ2UpKSB7CiAgICByZXR1cm4gQmFja2JvbmUubG9jYWxTeW5jOwogIH0KICByZXR1cm4gQmFja2JvbmUuYWpheFN5bmM7Cn07CgovLyBPdmVycmlkZSAnQmFja2JvbmUuc3luYycgdG8gZGVmYXVsdCB0byBsb2NhbFN5bmMsCi8vIHRoZSBvcmlnaW5hbCAnQmFja2JvbmUuc3luYycgaXMgc3RpbGwgYXZhaWxhYmxlIGluICdCYWNrYm9uZS5hamF4U3luYycKQmFja2JvbmUuc3luYyA9IGZ1bmN0aW9uKG1ldGhvZCwgbW9kZWwsIG9wdGlvbnMpIHsKICByZXR1cm4gQmFja2JvbmUuZ2V0U3luY01ldGhvZChtb2RlbCkuYXBwbHkodGhpcywgW21ldGhvZCwgbW9kZWwsIG9wdGlvbnNdKTsKfTsKCnJldHVybiBCYWNrYm9uZS5Ccm93c2VyU3RvcmFnZTsKfSkpOwoKLyohCiAqIEJhY2tib25lLk92ZXJ2aWV3IAogKgogKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEpDIEJyYW5kIDxqY0BvcGtvZGUuY29tPgogKiBMaWNlbnNlZCB1bmRlciB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSAoTVBMKSAKICovCgooZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsKICAgICAgICBkZWZpbmUoJ2JhY2tib25lLm92ZXJ2aWV3JyxbInVuZGVyc2NvcmUiLCAiYmFja2JvbmUiXSwKICAgICAgICAgICAgZnVuY3Rpb24oXywgQmFja2JvbmUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KF8gfHwgcm9vdC5fLCBCYWNrYm9uZSB8fCByb290LkJhY2tib25lKTsKICAgICAgICAgICAgfQogICAgICAgICk7CiAgIH0gZWxzZSB7CiAgICAgIC8vIFJlcXVpcmVKUyBpc24ndCBiZWluZyB1c2VkLgogICAgICAvLyBBc3N1bWUgdW5kZXJzY29yZSBhbmQgYmFja2JvbmUgYXJlIGxvYWRlZCBpbiA8c2NyaXB0PiB0YWdzCiAgICAgIGZhY3RvcnkoXywgQmFja2JvbmUpOwogICB9Cn0odGhpcywgZnVuY3Rpb24gKF8sIEJhY2tib25lKSB7CiAgICAKICAgIHZhciBPdmVydmlldyA9IEJhY2tib25lLk92ZXJ2aWV3ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAvKiBBbiBPdmVydmlldyBpcyBhIFZpZXcgdGhhdCBjb250YWlucyBhbmQga2VlcHMgdHJhY2sgb2Ygc3ViLXZpZXdzLgogICAgICAgICAqIEtpbmQgb2YgbGlrZSB3aGF0IGEgQ29sbGVjdGlvbiBpcyB0byBhIE1vZGVsLgogICAgICAgICAqLwogICAgICAgIHZhciB2aWV3cyA9IHt9OwogICAgICAgIHRoaXMua2V5cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF8ua2V5cyh2aWV3cykgfTsKICAgICAgICB0aGlzLmdldEFsbCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZpZXdzOyB9OwogICAgICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKGlkKSB7IHJldHVybiB2aWV3c1tpZF07IH07CiAgICAgICAgdGhpcy5hZGQgPSBmdW5jdGlvbiAoaWQsIHZpZXcpIHsKICAgICAgICAgICAgdmlld3NbaWRdID0gdmlldzsKICAgICAgICAgICAgcmV0dXJuIHZpZXc7CiAgICAgICAgfTsKICAgICAgICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uIChpZCkgewogICAgICAgICAgICB2YXIgdmlldyA9IHZpZXdzW2lkXTsKICAgICAgICAgICAgaWYgKHZpZXcpIHsKICAgICAgICAgICAgICAgIGRlbGV0ZSB2aWV3c1tpZF07CiAgICAgICAgICAgICAgICB2aWV3LnJlbW92ZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHZpZXc7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHRoaXMucmVtb3ZlQWxsID0gZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgICAgIF8uZWFjaChfLmtleXModmlld3MpLCB0aGlzLnJlbW92ZSk7CiAgICAgICAgfTsKCiAgICAgICAgQmFja2JvbmUuVmlldy5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKSk7CiAgICB9OwogICAgXy5leHRlbmQoT3ZlcnZpZXcucHJvdG90eXBlLCBCYWNrYm9uZS5WaWV3LnByb3RvdHlwZSk7CiAgICBPdmVydmlldy5leHRlbmQgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZDsKICAgIHJldHVybiBCYWNrYm9uZS5PdmVydmlldzsKfSkpOwoKLyohCiAqIGpRdWVyeSBCcm93c2VyIFBsdWdpbiB2MC4wLjYKICogaHR0cHM6Ly9naXRodWIuY29tL2dhYmNlYi9qcXVlcnktYnJvd3Nlci1wbHVnaW4KICoKICogT3JpZ2luYWwganF1ZXJ5LWJyb3dzZXIgY29kZSBDb3B5cmlnaHQgMjAwNSwgMjAxMyBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICoKICogTW9kaWZpY2F0aW9ucyBDb3B5cmlnaHQgMjAxMyBHYWJyaWVsIENlYnJpYW4KICogaHR0cHM6Ly9naXRodWIuY29tL2dhYmNlYgogKgogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UKICoKICogRGF0ZTogMjAxMy0wNy0yOVQxNzoyMzoyNy0wNzowMAogKi8KCihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkgewogICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgewogICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS4KICAgICAgICBkZWZpbmUoJ2pxdWVyeS5icm93c2VyJyxbJ2pxdWVyeSddLCBmdW5jdGlvbiAoJCkgewogICAgICAgICAgICBmYWN0b3J5KCQsIHJvb3QpOwogICAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMKICAgICAgICBmYWN0b3J5KGpRdWVyeSwgcm9vdCk7CiAgICB9Cn0odGhpcywgZnVuY3Rpb24oalF1ZXJ5LCB3aW5kb3cpIHsKICAKCiAgdmFyIG1hdGNoZWQsIGJyb3dzZXI7CgogIGpRdWVyeS51YU1hdGNoID0gZnVuY3Rpb24oIHVhICkgewogICAgdWEgPSB1YS50b0xvd2VyQ2FzZSgpOwoKICAJdmFyIG1hdGNoID0gLyhvcHIpW1wvXShbXHcuXSspLy5leGVjKCB1YSApIHx8CiAgCQkvKGNocm9tZSlbIFwvXShbXHcuXSspLy5leGVjKCB1YSApIHx8CiAgCQkvKHZlcnNpb24pWyBcL10oW1x3Ll0rKS4qKHNhZmFyaSlbIFwvXShbXHcuXSspLy5leGVjKCB1YSApIHx8CiAgCQkvKHdlYmtpdClbIFwvXShbXHcuXSspLy5leGVjKCB1YSApIHx8CiAgCQkvKG9wZXJhKSg/Oi4qdmVyc2lvbnwpWyBcL10oW1x3Ll0rKS8uZXhlYyggdWEgKSB8fAogIAkJLyhtc2llKSAoW1x3Ll0rKS8uZXhlYyggdWEgKSB8fAogIAkJdWEuaW5kZXhPZigidHJpZGVudCIpID49IDAgJiYgLyhydikoPzo6fCApKFtcdy5dKykvLmV4ZWMoIHVhICkgfHwKICAJCXVhLmluZGV4T2YoImNvbXBhdGlibGUiKSA8IDAgJiYgLyhtb3ppbGxhKSg/Oi4qPyBydjooW1x3Ll0rKXwpLy5leGVjKCB1YSApIHx8CiAgCQlbXTsKCiAgCXZhciBwbGF0Zm9ybV9tYXRjaCA9IC8oaXBhZCkvLmV4ZWMoIHVhICkgfHwKICAJCS8oaXBob25lKS8uZXhlYyggdWEgKSB8fAogIAkJLyhhbmRyb2lkKS8uZXhlYyggdWEgKSB8fAogIAkJLyh3aW5kb3dzIHBob25lKS8uZXhlYyggdWEgKSB8fAogIAkJLyh3aW4pLy5leGVjKCB1YSApIHx8CiAgCQkvKG1hYykvLmV4ZWMoIHVhICkgfHwKICAJCS8obGludXgpLy5leGVjKCB1YSApIHx8CiAgCQkvKGNyb3MpL2kuZXhlYyggdWEgKSB8fAogIAkJW107CgogIAlyZXR1cm4gewogIAkJYnJvd3NlcjogbWF0Y2hbIDMgXSB8fCBtYXRjaFsgMSBdIHx8ICIiLAogIAkJdmVyc2lvbjogbWF0Y2hbIDIgXSB8fCAiMCIsCiAgCQlwbGF0Zm9ybTogcGxhdGZvcm1fbWF0Y2hbIDAgXSB8fCAiIgogIAl9OwogIH07CgogIG1hdGNoZWQgPSBqUXVlcnkudWFNYXRjaCggd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQgKTsKICBicm93c2VyID0ge307CgogIGlmICggbWF0Y2hlZC5icm93c2VyICkgewogIAlicm93c2VyWyBtYXRjaGVkLmJyb3dzZXIgXSA9IHRydWU7CiAgCWJyb3dzZXIudmVyc2lvbiA9IG1hdGNoZWQudmVyc2lvbjsKICAJYnJvd3Nlci52ZXJzaW9uTnVtYmVyID0gcGFyc2VJbnQobWF0Y2hlZC52ZXJzaW9uKTsKICB9CgogIGlmICggbWF0Y2hlZC5wbGF0Zm9ybSApIHsKICAJYnJvd3NlclsgbWF0Y2hlZC5wbGF0Zm9ybSBdID0gdHJ1ZTsKICB9CgogIC8vIFRoZXNlIGFyZSBhbGwgY29uc2lkZXJlZCBtb2JpbGUgcGxhdGZvcm1zLCBtZWFuaW5nIHRoZXkgcnVuIGEgbW9iaWxlIGJyb3dzZXIKICBpZiAoIGJyb3dzZXIuYW5kcm9pZCB8fCBicm93c2VyLmlwYWQgfHwgYnJvd3Nlci5pcGhvbmUgfHwgYnJvd3NlclsgIndpbmRvd3MgcGhvbmUiIF0gKSB7CiAgCWJyb3dzZXIubW9iaWxlID0gdHJ1ZTsKICB9CgogIC8vIFRoZXNlIGFyZSBhbGwgY29uc2lkZXJlZCBkZXNrdG9wIHBsYXRmb3JtcywgbWVhbmluZyB0aGV5IHJ1biBhIGRlc2t0b3AgYnJvd3NlcgogIGlmICggYnJvd3Nlci5jcm9zIHx8IGJyb3dzZXIubWFjIHx8IGJyb3dzZXIubGludXggfHwgYnJvd3Nlci53aW4gKSB7CiAgCWJyb3dzZXIuZGVza3RvcCA9IHRydWU7CiAgfQoKICAvLyBDaHJvbWUsIE9wZXJhIDE1KyBhbmQgU2FmYXJpIGFyZSB3ZWJraXQgYmFzZWQgYnJvd3NlcnMKICBpZiAoIGJyb3dzZXIuY2hyb21lIHx8IGJyb3dzZXIub3ByIHx8IGJyb3dzZXIuc2FmYXJpICkgewogIAlicm93c2VyLndlYmtpdCA9IHRydWU7CiAgfQoKICAvLyBJRTExIGhhcyBhIG5ldyB0b2tlbiBzbyB3ZSB3aWxsIGFzc2lnbiBpdCBtc2llIHRvIGF2b2lkIGJyZWFraW5nIGNoYW5nZXMKICBpZiAoIGJyb3dzZXIucnYgKQogIHsKICAJdmFyIGllID0gIm1zaWUiOwoKICAJbWF0Y2hlZC5icm93c2VyID0gaWU7CiAgCWJyb3dzZXJbaWVdID0gdHJ1ZTsKICB9CgogIC8vIE9wZXJhIDE1KyBhcmUgaWRlbnRpZmllZCBhcyBvcHIKICBpZiAoIGJyb3dzZXIub3ByICkKICB7CiAgCXZhciBvcGVyYSA9ICJvcGVyYSI7CgogIAltYXRjaGVkLmJyb3dzZXIgPSBvcGVyYTsKICAJYnJvd3NlcltvcGVyYV0gPSB0cnVlOwogIH0KCiAgLy8gU3RvY2sgQW5kcm9pZCBicm93c2VycyBhcmUgbWFya2VkIGFzIFNhZmFyaSBvbiBBbmRyb2lkLgogIGlmICggYnJvd3Nlci5zYWZhcmkgJiYgYnJvd3Nlci5hbmRyb2lkICkKICB7CiAgCXZhciBhbmRyb2lkID0gImFuZHJvaWQiOwoKICAJbWF0Y2hlZC5icm93c2VyID0gYW5kcm9pZDsKICAJYnJvd3NlclthbmRyb2lkXSA9IHRydWU7CiAgfQoKICAvLyBBc3NpZ24gdGhlIG5hbWUgYW5kIHBsYXRmb3JtIHZhcmlhYmxlCiAgYnJvd3Nlci5uYW1lID0gbWF0Y2hlZC5icm93c2VyOwogIGJyb3dzZXIucGxhdGZvcm0gPSBtYXRjaGVkLnBsYXRmb3JtOwoKICBqUXVlcnkuYnJvd3NlciA9IGJyb3dzZXI7CiAgcmV0dXJuIGJyb3dzZXI7Cn0pKTsKCi8qIQogKiB0eXBlYWhlYWQuanMgMC4xMC41CiAqIGh0dHBzOi8vZ2l0aHViLmNvbS90d2l0dGVyL3R5cGVhaGVhZC5qcwogKiBDb3B5cmlnaHQgMjAxMy0yMDE0IFR3aXR0ZXIsIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9yczsgTGljZW5zZWQgTUlUCiAqLwoKKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7CiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLgogICAgICAgIGRlZmluZSgndHlwZWFoZWFkJyxbJ2pxdWVyeSddLCBmdW5jdGlvbiAoJCkgewogICAgICAgICAgICBmYWN0b3J5KCQsIHJvb3QpOwogICAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMKICAgICAgICBmYWN0b3J5KGpRdWVyeSwgcm9vdCk7CiAgICB9Cn0odGhpcywgZnVuY3Rpb24oJCwgd2luZG93KSB7CiAgICB2YXIgXyA9IGZ1bmN0aW9uKCkgewogICAgICAgIAogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGlzTXNpZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSA/IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goLyhtc2llIHxydjopKFxkKyguXGQrKT8pL2kpWzJdIDogZmFsc2U7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlzQmxhbmtTdHJpbmc6IGZ1bmN0aW9uKHN0cikgewogICAgICAgICAgICAgICAgcmV0dXJuICFzdHIgfHwgL15ccyokLy50ZXN0KHN0cik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVzY2FwZVJlZ0V4Q2hhcnM6IGZ1bmN0aW9uKHN0cikgewogICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXC1cW1xdXC9ce1x9XChcKVwqXCtcP1wuXFxcXlwkXHxdL2csICJcXCQmIik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlzU3RyaW5nOiBmdW5jdGlvbihvYmopIHsKICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAic3RyaW5nIjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNOdW1iZXI6IGZ1bmN0aW9uKG9iaikgewogICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICJudW1iZXIiOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpc0FycmF5OiAkLmlzQXJyYXksCiAgICAgICAgICAgIGlzRnVuY3Rpb246ICQuaXNGdW5jdGlvbiwKICAgICAgICAgICAgaXNPYmplY3Q6ICQuaXNQbGFpbk9iamVjdCwKICAgICAgICAgICAgaXNVbmRlZmluZWQ6IGZ1bmN0aW9uKG9iaikgewogICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICJ1bmRlZmluZWQiOwogICAgICAgICAgICB9LAogICAgICAgICAgICB0b1N0cjogZnVuY3Rpb24gdG9TdHIocykgewogICAgICAgICAgICAgICAgcmV0dXJuIF8uaXNVbmRlZmluZWQocykgfHwgcyA9PT0gbnVsbCA/ICIiIDogcyArICIiOwogICAgICAgICAgICB9LAogICAgICAgICAgICBiaW5kOiAkLnByb3h5LAogICAgICAgICAgICBlYWNoOiBmdW5jdGlvbihjb2xsZWN0aW9uLCBjYikgewogICAgICAgICAgICAgICAgJC5lYWNoKGNvbGxlY3Rpb24sIHJldmVyc2VBcmdzKTsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJldmVyc2VBcmdzKGluZGV4LCB2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBjYih2YWx1ZSwgaW5kZXgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBtYXA6ICQubWFwLAogICAgICAgICAgICBmaWx0ZXI6ICQuZ3JlcCwKICAgICAgICAgICAgZXZlcnk6IGZ1bmN0aW9uKG9iaiwgdGVzdCkgewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRydWU7CiAgICAgICAgICAgICAgICBpZiAoIW9iaikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkLmVhY2gob2JqLCBmdW5jdGlvbihrZXksIHZhbCkgewogICAgICAgICAgICAgICAgICAgIGlmICghKHJlc3VsdCA9IHRlc3QuY2FsbChudWxsLCB2YWwsIGtleSwgb2JqKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuICEhcmVzdWx0OwogICAgICAgICAgICB9LAogICAgICAgICAgICBzb21lOiBmdW5jdGlvbihvYmosIHRlc3QpIHsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGlmICghb2JqKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICQuZWFjaChvYmosIGZ1bmN0aW9uKGtleSwgdmFsKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9IHRlc3QuY2FsbChudWxsLCB2YWwsIGtleSwgb2JqKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gISFyZXN1bHQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1peGluOiAkLmV4dGVuZCwKICAgICAgICAgICAgZ2V0VW5pcXVlSWQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSAwOwogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBjb3VudGVyKys7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KCksCiAgICAgICAgICAgIHRlbXBsYXRpZnk6IGZ1bmN0aW9uIHRlbXBsYXRpZnkob2JqKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJC5pc0Z1bmN0aW9uKG9iaikgPyBvYmogOiB0ZW1wbGF0ZTsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRlbXBsYXRlKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcob2JqKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVmZXI6IGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZuLCAwKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVib3VuY2U6IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkgewogICAgICAgICAgICAgICAgdmFyIHRpbWVvdXQsIHJlc3VsdDsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHMsIGxhdGVyLCBjYWxsTm93OwogICAgICAgICAgICAgICAgICAgIGxhdGVyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDsKICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7CiAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpOwogICAgICAgICAgICAgICAgICAgIGlmIChjYWxsTm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9LAogICAgICAgICAgICB0aHJvdHRsZTogZnVuY3Rpb24oZnVuYywgd2FpdCkgewogICAgICAgICAgICAgICAgdmFyIGNvbnRleHQsIGFyZ3MsIHRpbWVvdXQsIHJlc3VsdCwgcHJldmlvdXMsIGxhdGVyOwogICAgICAgICAgICAgICAgcHJldmlvdXMgPSAwOwogICAgICAgICAgICAgICAgbGF0ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyA9IG5ldyBEYXRlKCk7CiAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCksIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpOwogICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbWFpbmluZyA8PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzID0gbm93OwogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHJlbWFpbmluZyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9LAogICAgICAgICAgICBub29wOiBmdW5jdGlvbigpIHt9CiAgICAgICAgfTsKICAgIH0oKTsKICAgIHZhciBodG1sID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgd3JhcHBlcjogJzxzcGFuIGNsYXNzPSJ0d2l0dGVyLXR5cGVhaGVhZCI+PC9zcGFuPicsCiAgICAgICAgICAgIGRyb3Bkb3duOiAnPHNwYW4gY2xhc3M9InR0LWRyb3Bkb3duLW1lbnUiPjwvc3Bhbj4nLAogICAgICAgICAgICBkYXRhc2V0OiAnPGRpdiBjbGFzcz0idHQtZGF0YXNldC0lQ0xBU1MlIj48L2Rpdj4nLAogICAgICAgICAgICBzdWdnZXN0aW9uczogJzxzcGFuIGNsYXNzPSJ0dC1zdWdnZXN0aW9ucyI+PC9zcGFuPicsCiAgICAgICAgICAgIHN1Z2dlc3Rpb246ICc8ZGl2IGNsYXNzPSJ0dC1zdWdnZXN0aW9uIj48L2Rpdj4nCiAgICAgICAgfTsKICAgIH0oKTsKICAgIHZhciBjc3MgPSBmdW5jdGlvbigpIHsKICAgICAgICAKICAgICAgICB2YXIgY3NzID0gewogICAgICAgICAgICB3cmFwcGVyOiB7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogInJlbGF0aXZlIiwKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICJpbmxpbmUtYmxvY2siCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGhpbnQ6IHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgICAgdG9wOiAiMCIsCiAgICAgICAgICAgICAgICBsZWZ0OiAiMCIsCiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogInRyYW5zcGFyZW50IiwKICAgICAgICAgICAgICAgIGJveFNoYWRvdzogIm5vbmUiLAogICAgICAgICAgICAgICAgb3BhY2l0eTogIjEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlucHV0OiB7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogInJlbGF0aXZlIiwKICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICJ0b3AiLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAidHJhbnNwYXJlbnQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlucHV0V2l0aE5vSGludDogewogICAgICAgICAgICAgICAgcG9zaXRpb246ICJyZWxhdGl2ZSIsCiAgICAgICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAidG9wIgogICAgICAgICAgICB9LAogICAgICAgICAgICBkcm9wZG93bjogewogICAgICAgICAgICAgICAgcG9zaXRpb246ICJhYnNvbHV0ZSIsCiAgICAgICAgICAgICAgICB0b3A6ICIxMDAlIiwKICAgICAgICAgICAgICAgIGxlZnQ6ICIwIiwKICAgICAgICAgICAgICAgIHpJbmRleDogIjEwMCIsCiAgICAgICAgICAgICAgICBkaXNwbGF5OiAibm9uZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VnZ2VzdGlvbnM6IHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICJibG9jayIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VnZ2VzdGlvbjogewogICAgICAgICAgICAgICAgd2hpdGVTcGFjZTogIm5vd3JhcCIsCiAgICAgICAgICAgICAgICBjdXJzb3I6ICJwb2ludGVyIgogICAgICAgICAgICB9LAogICAgICAgICAgICBzdWdnZXN0aW9uQ2hpbGQ6IHsKICAgICAgICAgICAgICAgIHdoaXRlU3BhY2U6ICJub3JtYWwiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGx0cjogewogICAgICAgICAgICAgICAgbGVmdDogIjAiLAogICAgICAgICAgICAgICAgcmlnaHQ6ICJhdXRvIgogICAgICAgICAgICB9LAogICAgICAgICAgICBydGw6IHsKICAgICAgICAgICAgICAgIGxlZnQ6ICJhdXRvIiwKICAgICAgICAgICAgICAgIHJpZ2h0OiAiIDAiCiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGlmIChfLmlzTXNpZSgpKSB7CiAgICAgICAgICAgIF8ubWl4aW4oY3NzLmlucHV0LCB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6ICJ1cmwoZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3KSIKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmIChfLmlzTXNpZSgpICYmIF8uaXNNc2llKCkgPD0gNykgewogICAgICAgICAgICBfLm1peGluKGNzcy5pbnB1dCwgewogICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAiLTFweCIKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjc3M7CiAgICB9KCk7CiAgICB2YXIgRXZlbnRCdXMgPSBmdW5jdGlvbigpIHsKICAgICAgICAKICAgICAgICB2YXIgbmFtZXNwYWNlID0gInR5cGVhaGVhZDoiOwogICAgICAgIGZ1bmN0aW9uIEV2ZW50QnVzKG8pIHsKICAgICAgICAgICAgaWYgKCFvIHx8ICFvLmVsKSB7CiAgICAgICAgICAgICAgICAkLmVycm9yKCJFdmVudEJ1cyBpbml0aWFsaXplZCB3aXRob3V0IGVsIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy4kZWwgPSAkKG8uZWwpOwogICAgICAgIH0KICAgICAgICBfLm1peGluKEV2ZW50QnVzLnByb3RvdHlwZSwgewogICAgICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbih0eXBlKSB7CiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLnRyaWdnZXIobmFtZXNwYWNlICsgdHlwZSwgYXJncyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gRXZlbnRCdXM7CiAgICB9KCk7CiAgICB2YXIgRXZlbnRFbWl0dGVyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgCiAgICAgICAgdmFyIHNwbGl0dGVyID0gL1xzKy8sIG5leHRUaWNrID0gZ2V0TmV4dFRpY2soKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBvblN5bmM6IG9uU3luYywKICAgICAgICAgICAgb25Bc3luYzogb25Bc3luYywKICAgICAgICAgICAgb2ZmOiBvZmYsCiAgICAgICAgICAgIHRyaWdnZXI6IHRyaWdnZXIKICAgICAgICB9OwogICAgICAgIGZ1bmN0aW9uIG9uKG1ldGhvZCwgdHlwZXMsIGNiLCBjb250ZXh0KSB7CiAgICAgICAgICAgIHZhciB0eXBlOwogICAgICAgICAgICBpZiAoIWNiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfQogICAgICAgICAgICB0eXBlcyA9IHR5cGVzLnNwbGl0KHNwbGl0dGVyKTsKICAgICAgICAgICAgY2IgPSBjb250ZXh0ID8gYmluZENvbnRleHQoY2IsIGNvbnRleHQpIDogY2I7CiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTsKICAgICAgICAgICAgd2hpbGUgKHR5cGUgPSB0eXBlcy5zaGlmdCgpKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFja3NbdHlwZV0gPSB0aGlzLl9jYWxsYmFja3NbdHlwZV0gfHwgewogICAgICAgICAgICAgICAgICAgIHN5bmM6IFtdLAogICAgICAgICAgICAgICAgICAgIGFzeW5jOiBbXQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrc1t0eXBlXVttZXRob2RdLnB1c2goY2IpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBvbkFzeW5jKHR5cGVzLCBjYiwgY29udGV4dCkgewogICAgICAgICAgICByZXR1cm4gb24uY2FsbCh0aGlzLCAiYXN5bmMiLCB0eXBlcywgY2IsIGNvbnRleHQpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBvblN5bmModHlwZXMsIGNiLCBjb250ZXh0KSB7CiAgICAgICAgICAgIHJldHVybiBvbi5jYWxsKHRoaXMsICJzeW5jIiwgdHlwZXMsIGNiLCBjb250ZXh0KTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gb2ZmKHR5cGVzKSB7CiAgICAgICAgICAgIHZhciB0eXBlOwogICAgICAgICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrcykgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHlwZXMgPSB0eXBlcy5zcGxpdChzcGxpdHRlcik7CiAgICAgICAgICAgIHdoaWxlICh0eXBlID0gdHlwZXMuc2hpZnQoKSkgewogICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1t0eXBlXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gdHJpZ2dlcih0eXBlcykgewogICAgICAgICAgICB2YXIgdHlwZSwgY2FsbGJhY2tzLCBhcmdzLCBzeW5jRmx1c2gsIGFzeW5jRmx1c2g7CiAgICAgICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2tzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfQogICAgICAgICAgICB0eXBlcyA9IHR5cGVzLnNwbGl0KHNwbGl0dGVyKTsKICAgICAgICAgICAgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICAgICAgICAgICAgd2hpbGUgKCh0eXBlID0gdHlwZXMuc2hpZnQoKSkgJiYgKGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1t0eXBlXSkpIHsKICAgICAgICAgICAgICAgIHN5bmNGbHVzaCA9IGdldEZsdXNoKGNhbGxiYWNrcy5zeW5jLCB0aGlzLCBbIHR5cGUgXS5jb25jYXQoYXJncykpOwogICAgICAgICAgICAgICAgYXN5bmNGbHVzaCA9IGdldEZsdXNoKGNhbGxiYWNrcy5hc3luYywgdGhpcywgWyB0eXBlIF0uY29uY2F0KGFyZ3MpKTsKICAgICAgICAgICAgICAgIHN5bmNGbHVzaCgpICYmIG5leHRUaWNrKGFzeW5jRmx1c2gpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZXRGbHVzaChjYWxsYmFja3MsIGNvbnRleHQsIGFyZ3MpIHsKICAgICAgICAgICAgcmV0dXJuIGZsdXNoOwogICAgICAgICAgICBmdW5jdGlvbiBmbHVzaCgpIHsKICAgICAgICAgICAgICAgIHZhciBjYW5jZWxsZWQ7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgIWNhbmNlbGxlZCAmJiBpIDwgbGVuOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICBjYW5jZWxsZWQgPSBjYWxsYmFja3NbaV0uYXBwbHkoY29udGV4dCwgYXJncykgPT09IGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuICFjYW5jZWxsZWQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFRpY2soKSB7CiAgICAgICAgICAgIHZhciBuZXh0VGlja0ZuOwogICAgICAgICAgICBpZiAod2luZG93LnNldEltbWVkaWF0ZSkgewogICAgICAgICAgICAgICAgbmV4dFRpY2tGbiA9IGZ1bmN0aW9uIG5leHRUaWNrU2V0SW1tZWRpYXRlKGZuKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBmbigpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG5leHRUaWNrRm4gPSBmdW5jdGlvbiBuZXh0VGlja1NldFRpbWVvdXQoZm4pIHsKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBmbigpOwogICAgICAgICAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbmV4dFRpY2tGbjsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gYmluZENvbnRleHQoZm4sIGNvbnRleHQpIHsKICAgICAgICAgICAgcmV0dXJuIGZuLmJpbmQgPyBmbi5iaW5kKGNvbnRleHQpIDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBmbi5hcHBseShjb250ZXh0LCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCkpOwogICAgICAgICAgICB9OwogICAgICAgIH0KICAgIH0oKTsKICAgIHZhciBoaWdobGlnaHQgPSBmdW5jdGlvbihkb2MpIHsKICAgICAgICAKICAgICAgICB2YXIgZGVmYXVsdHMgPSB7CiAgICAgICAgICAgIG5vZGU6IG51bGwsCiAgICAgICAgICAgIHBhdHRlcm46IG51bGwsCiAgICAgICAgICAgIHRhZ05hbWU6ICJzdHJvbmciLAogICAgICAgICAgICBjbGFzc05hbWU6IG51bGwsCiAgICAgICAgICAgIHdvcmRzT25seTogZmFsc2UsCiAgICAgICAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlCiAgICAgICAgfTsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gaGlnaHRsaWdodChvKSB7CiAgICAgICAgICAgIHZhciByZWdleDsKICAgICAgICAgICAgbyA9IF8ubWl4aW4oe30sIGRlZmF1bHRzLCBvKTsKICAgICAgICAgICAgaWYgKCFvLm5vZGUgfHwgIW8ucGF0dGVybikgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG8ucGF0dGVybiA9IF8uaXNBcnJheShvLnBhdHRlcm4pID8gby5wYXR0ZXJuIDogWyBvLnBhdHRlcm4gXTsKICAgICAgICAgICAgcmVnZXggPSBnZXRSZWdleChvLnBhdHRlcm4sIG8uY2FzZVNlbnNpdGl2ZSwgby53b3Jkc09ubHkpOwogICAgICAgICAgICB0cmF2ZXJzZShvLm5vZGUsIGhpZ2h0bGlnaHRUZXh0Tm9kZSk7CiAgICAgICAgICAgIGZ1bmN0aW9uIGhpZ2h0bGlnaHRUZXh0Tm9kZSh0ZXh0Tm9kZSkgewogICAgICAgICAgICAgICAgdmFyIG1hdGNoLCBwYXR0ZXJuTm9kZSwgd3JhcHBlck5vZGU7CiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSByZWdleC5leGVjKHRleHROb2RlLmRhdGEpKSB7CiAgICAgICAgICAgICAgICAgICAgd3JhcHBlck5vZGUgPSBkb2MuY3JlYXRlRWxlbWVudChvLnRhZ05hbWUpOwogICAgICAgICAgICAgICAgICAgIG8uY2xhc3NOYW1lICYmICh3cmFwcGVyTm9kZS5jbGFzc05hbWUgPSBvLmNsYXNzTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgcGF0dGVybk5vZGUgPSB0ZXh0Tm9kZS5zcGxpdFRleHQobWF0Y2guaW5kZXgpOwogICAgICAgICAgICAgICAgICAgIHBhdHRlcm5Ob2RlLnNwbGl0VGV4dChtYXRjaFswXS5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgIHdyYXBwZXJOb2RlLmFwcGVuZENoaWxkKHBhdHRlcm5Ob2RlLmNsb25lTm9kZSh0cnVlKSk7CiAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQod3JhcHBlck5vZGUsIHBhdHRlcm5Ob2RlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAhIW1hdGNoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHRyYXZlcnNlKGVsLCBoaWdodGxpZ2h0VGV4dE5vZGUpIHsKICAgICAgICAgICAgICAgIHZhciBjaGlsZE5vZGUsIFRFWFRfTk9ERV9UWVBFID0gMzsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZSA9IGVsLmNoaWxkTm9kZXNbaV07CiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFX1RZUEUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSBoaWdodGxpZ2h0VGV4dE5vZGUoY2hpbGROb2RlKSA/IDEgOiAwOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlKGNoaWxkTm9kZSwgaGlnaHRsaWdodFRleHROb2RlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGZ1bmN0aW9uIGdldFJlZ2V4KHBhdHRlcm5zLCBjYXNlU2Vuc2l0aXZlLCB3b3Jkc09ubHkpIHsKICAgICAgICAgICAgdmFyIGVzY2FwZWRQYXR0ZXJucyA9IFtdLCByZWdleFN0cjsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBhdHRlcm5zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICBlc2NhcGVkUGF0dGVybnMucHVzaChfLmVzY2FwZVJlZ0V4Q2hhcnMocGF0dGVybnNbaV0pKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZWdleFN0ciA9IHdvcmRzT25seSA/ICJcXGIoIiArIGVzY2FwZWRQYXR0ZXJucy5qb2luKCJ8IikgKyAiKVxcYiIgOiAiKCIgKyBlc2NhcGVkUGF0dGVybnMuam9pbigifCIpICsgIikiOwogICAgICAgICAgICByZXR1cm4gY2FzZVNlbnNpdGl2ZSA/IG5ldyBSZWdFeHAocmVnZXhTdHIpIDogbmV3IFJlZ0V4cChyZWdleFN0ciwgImkiKTsKICAgICAgICB9CiAgICB9KHdpbmRvdy5kb2N1bWVudCk7CiAgICB2YXIgSW5wdXQgPSBmdW5jdGlvbigpIHsKICAgICAgICAKICAgICAgICB2YXIgc3BlY2lhbEtleUNvZGVNYXA7CiAgICAgICAgc3BlY2lhbEtleUNvZGVNYXAgPSB7CiAgICAgICAgICAgIDk6ICJ0YWIiLAogICAgICAgICAgICAyNzogImVzYyIsCiAgICAgICAgICAgIDM3OiAibGVmdCIsCiAgICAgICAgICAgIDM5OiAicmlnaHQiLAogICAgICAgICAgICAxMzogImVudGVyIiwKICAgICAgICAgICAgMzg6ICJ1cCIsCiAgICAgICAgICAgIDQwOiAiZG93biIKICAgICAgICB9OwogICAgICAgIGZ1bmN0aW9uIElucHV0KG8pIHsKICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLCBvbkJsdXIsIG9uRm9jdXMsIG9uS2V5ZG93biwgb25JbnB1dDsKICAgICAgICAgICAgbyA9IG8gfHwge307CiAgICAgICAgICAgIGlmICghby5pbnB1dCkgewogICAgICAgICAgICAgICAgJC5lcnJvcigiaW5wdXQgaXMgbWlzc2luZyIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9uQmx1ciA9IF8uYmluZCh0aGlzLl9vbkJsdXIsIHRoaXMpOwogICAgICAgICAgICBvbkZvY3VzID0gXy5iaW5kKHRoaXMuX29uRm9jdXMsIHRoaXMpOwogICAgICAgICAgICBvbktleWRvd24gPSBfLmJpbmQodGhpcy5fb25LZXlkb3duLCB0aGlzKTsKICAgICAgICAgICAgb25JbnB1dCA9IF8uYmluZCh0aGlzLl9vbklucHV0LCB0aGlzKTsKICAgICAgICAgICAgdGhpcy4kaGludCA9ICQoby5oaW50KTsKICAgICAgICAgICAgdGhpcy4kaW5wdXQgPSAkKG8uaW5wdXQpLm9uKCJibHVyLnR0Iiwgb25CbHVyKS5vbigiZm9jdXMudHQiLCBvbkZvY3VzKS5vbigia2V5ZG93bi50dCIsIG9uS2V5ZG93bik7CiAgICAgICAgICAgIGlmICh0aGlzLiRoaW50Lmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgdGhpcy5zZXRIaW50ID0gdGhpcy5nZXRIaW50ID0gdGhpcy5jbGVhckhpbnQgPSB0aGlzLmNsZWFySGludElmSW52YWxpZCA9IF8ubm9vcDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIV8uaXNNc2llKCkpIHsKICAgICAgICAgICAgICAgIHRoaXMuJGlucHV0Lm9uKCJpbnB1dC50dCIsIG9uSW5wdXQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQub24oImtleWRvd24udHQga2V5cHJlc3MudHQgY3V0LnR0IHBhc3RlLnR0IiwgZnVuY3Rpb24oJGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc3BlY2lhbEtleUNvZGVNYXBbJGUud2hpY2ggfHwgJGUua2V5Q29kZV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBfLmRlZmVyKF8uYmluZCh0aGF0Ll9vbklucHV0LCB0aGF0LCAkZSkpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5xdWVyeSA9IHRoaXMuJGlucHV0LnZhbCgpOwogICAgICAgICAgICB0aGlzLiRvdmVyZmxvd0hlbHBlciA9IGJ1aWxkT3ZlcmZsb3dIZWxwZXIodGhpcy4kaW5wdXQpOwogICAgICAgIH0KICAgICAgICBJbnB1dC5ub3JtYWxpemVRdWVyeSA9IGZ1bmN0aW9uKHN0cikgewogICAgICAgICAgICByZXR1cm4gKHN0ciB8fCAiIikucmVwbGFjZSgvXlxzKi9nLCAiIikucmVwbGFjZSgvXHN7Mix9L2csICIgIik7CiAgICAgICAgfTsKICAgICAgICBfLm1peGluKElucHV0LnByb3RvdHlwZSwgRXZlbnRFbWl0dGVyLCB7CiAgICAgICAgICAgIF9vbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHsKICAgICAgICAgICAgICAgIHRoaXMucmVzZXRJbnB1dFZhbHVlKCk7CiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoImJsdXJyZWQiKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX29uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoKSB7CiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoImZvY3VzZWQiKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX29uS2V5ZG93bjogZnVuY3Rpb24gb25LZXlkb3duKCRlKSB7CiAgICAgICAgICAgICAgICB2YXIga2V5TmFtZSA9IHNwZWNpYWxLZXlDb2RlTWFwWyRlLndoaWNoIHx8ICRlLmtleUNvZGVdOwogICAgICAgICAgICAgICAgdGhpcy5fbWFuYWdlUHJldmVudERlZmF1bHQoa2V5TmFtZSwgJGUpOwogICAgICAgICAgICAgICAgaWYgKGtleU5hbWUgJiYgdGhpcy5fc2hvdWxkVHJpZ2dlcihrZXlOYW1lLCAkZSkpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoa2V5TmFtZSArICJLZXllZCIsICRlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgX29uSW5wdXQ6IGZ1bmN0aW9uIG9uSW5wdXQoKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsdWUoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX21hbmFnZVByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiBtYW5hZ2VQcmV2ZW50RGVmYXVsdChrZXlOYW1lLCAkZSkgewogICAgICAgICAgICAgICAgdmFyIHByZXZlbnREZWZhdWx0LCBoaW50VmFsdWUsIGlucHV0VmFsdWU7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleU5hbWUpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAidGFiIjoKICAgICAgICAgICAgICAgICAgICBoaW50VmFsdWUgPSB0aGlzLmdldEhpbnQoKTsKICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gdGhpcy5nZXRJbnB1dFZhbHVlKCk7CiAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQgPSBoaW50VmFsdWUgJiYgaGludFZhbHVlICE9PSBpbnB1dFZhbHVlICYmICF3aXRoTW9kaWZpZXIoJGUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgY2FzZSAidXAiOgogICAgICAgICAgICAgICAgICBjYXNlICJkb3duIjoKICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdCA9ICF3aXRoTW9kaWZpZXIoJGUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQgJiYgJGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX3Nob3VsZFRyaWdnZXI6IGZ1bmN0aW9uIHNob3VsZFRyaWdnZXIoa2V5TmFtZSwgJGUpIHsKICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyOwogICAgICAgICAgICAgICAgc3dpdGNoIChrZXlOYW1lKSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgInRhYiI6CiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlciA9ICF3aXRoTW9kaWZpZXIoJGUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0cmlnZ2VyOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfY2hlY2tJbnB1dFZhbHVlOiBmdW5jdGlvbiBjaGVja0lucHV0VmFsdWUoKSB7CiAgICAgICAgICAgICAgICB2YXIgaW5wdXRWYWx1ZSwgYXJlRXF1aXZhbGVudCwgaGFzRGlmZmVyZW50V2hpdGVzcGFjZTsKICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSB0aGlzLmdldElucHV0VmFsdWUoKTsKICAgICAgICAgICAgICAgIGFyZUVxdWl2YWxlbnQgPSBhcmVRdWVyaWVzRXF1aXZhbGVudChpbnB1dFZhbHVlLCB0aGlzLnF1ZXJ5KTsKICAgICAgICAgICAgICAgIGhhc0RpZmZlcmVudFdoaXRlc3BhY2UgPSBhcmVFcXVpdmFsZW50ID8gdGhpcy5xdWVyeS5sZW5ndGggIT09IGlucHV0VmFsdWUubGVuZ3RoIDogZmFsc2U7CiAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5ID0gaW5wdXRWYWx1ZTsKICAgICAgICAgICAgICAgIGlmICghYXJlRXF1aXZhbGVudCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigicXVlcnlDaGFuZ2VkIiwgdGhpcy5xdWVyeSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc0RpZmZlcmVudFdoaXRlc3BhY2UpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoIndoaXRlc3BhY2VDaGFuZ2VkIiwgdGhpcy5xdWVyeSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHsKICAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LmZvY3VzKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJsdXI6IGZ1bmN0aW9uIGJsdXIoKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5ibHVyKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldFF1ZXJ5OiBmdW5jdGlvbiBnZXRRdWVyeSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5OwogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXRRdWVyeTogZnVuY3Rpb24gc2V0UXVlcnkocXVlcnkpIHsKICAgICAgICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0SW5wdXRWYWx1ZTogZnVuY3Rpb24gZ2V0SW5wdXRWYWx1ZSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRpbnB1dC52YWwoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0SW5wdXRWYWx1ZTogZnVuY3Rpb24gc2V0SW5wdXRWYWx1ZSh2YWx1ZSwgc2lsZW50KSB7CiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC52YWwodmFsdWUpOwogICAgICAgICAgICAgICAgc2lsZW50ID8gdGhpcy5jbGVhckhpbnQoKSA6IHRoaXMuX2NoZWNrSW5wdXRWYWx1ZSgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICByZXNldElucHV0VmFsdWU6IGZ1bmN0aW9uIHJlc2V0SW5wdXRWYWx1ZSgpIHsKICAgICAgICAgICAgICAgIHRoaXMuc2V0SW5wdXRWYWx1ZSh0aGlzLnF1ZXJ5LCB0cnVlKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0SGludDogZnVuY3Rpb24gZ2V0SGludCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRoaW50LnZhbCgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXRIaW50OiBmdW5jdGlvbiBzZXRIaW50KHZhbHVlKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRoaW50LnZhbCh2YWx1ZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsZWFySGludDogZnVuY3Rpb24gY2xlYXJIaW50KCkgewogICAgICAgICAgICAgICAgdGhpcy5zZXRIaW50KCIiKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2xlYXJIaW50SWZJbnZhbGlkOiBmdW5jdGlvbiBjbGVhckhpbnRJZkludmFsaWQoKSB7CiAgICAgICAgICAgICAgICB2YXIgdmFsLCBoaW50LCB2YWxJc1ByZWZpeE9mSGludCwgaXNWYWxpZDsKICAgICAgICAgICAgICAgIHZhbCA9IHRoaXMuZ2V0SW5wdXRWYWx1ZSgpOwogICAgICAgICAgICAgICAgaGludCA9IHRoaXMuZ2V0SGludCgpOwogICAgICAgICAgICAgICAgdmFsSXNQcmVmaXhPZkhpbnQgPSB2YWwgIT09IGhpbnQgJiYgaGludC5pbmRleE9mKHZhbCkgPT09IDA7CiAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsICE9PSAiIiAmJiB2YWxJc1ByZWZpeE9mSGludCAmJiAhdGhpcy5oYXNPdmVyZmxvdygpOwogICAgICAgICAgICAgICAgIWlzVmFsaWQgJiYgdGhpcy5jbGVhckhpbnQoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0TGFuZ3VhZ2VEaXJlY3Rpb246IGZ1bmN0aW9uIGdldExhbmd1YWdlRGlyZWN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLiRpbnB1dC5jc3MoImRpcmVjdGlvbiIpIHx8ICJsdHIiKS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBoYXNPdmVyZmxvdzogZnVuY3Rpb24gaGFzT3ZlcmZsb3coKSB7CiAgICAgICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IHRoaXMuJGlucHV0LndpZHRoKCkgLSAyOwogICAgICAgICAgICAgICAgdGhpcy4kb3ZlcmZsb3dIZWxwZXIudGV4dCh0aGlzLmdldElucHV0VmFsdWUoKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kb3ZlcmZsb3dIZWxwZXIud2lkdGgoKSA+PSBjb25zdHJhaW50OwogICAgICAgICAgICB9LAogICAgICAgICAgICBpc0N1cnNvckF0RW5kOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZUxlbmd0aCwgc2VsZWN0aW9uU3RhcnQsIHJhbmdlOwogICAgICAgICAgICAgICAgdmFsdWVMZW5ndGggPSB0aGlzLiRpbnB1dC52YWwoKS5sZW5ndGg7CiAgICAgICAgICAgICAgICBzZWxlY3Rpb25TdGFydCA9IHRoaXMuJGlucHV0WzBdLnNlbGVjdGlvblN0YXJ0OwogICAgICAgICAgICAgICAgaWYgKF8uaXNOdW1iZXIoc2VsZWN0aW9uU3RhcnQpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvblN0YXJ0ID09PSB2YWx1ZUxlbmd0aDsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTsKICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlU3RhcnQoImNoYXJhY3RlciIsIC12YWx1ZUxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlTGVuZ3RoID09PSByYW5nZS50ZXh0Lmxlbmd0aDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgICAgICAgICAgICAgdGhpcy4kaGludC5vZmYoIi50dCIpOwogICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQub2ZmKCIudHQiKTsKICAgICAgICAgICAgICAgIHRoaXMuJGhpbnQgPSB0aGlzLiRpbnB1dCA9IHRoaXMuJG92ZXJmbG93SGVscGVyID0gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBJbnB1dDsKICAgICAgICBmdW5jdGlvbiBidWlsZE92ZXJmbG93SGVscGVyKCRpbnB1dCkgewogICAgICAgICAgICByZXR1cm4gJCgnPHByZSBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9wcmU+JykuY3NzKHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogImhpZGRlbiIsCiAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAicHJlIiwKICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICRpbnB1dC5jc3MoImZvbnQtZmFtaWx5IiksCiAgICAgICAgICAgICAgICBmb250U2l6ZTogJGlucHV0LmNzcygiZm9udC1zaXplIiksCiAgICAgICAgICAgICAgICBmb250U3R5bGU6ICRpbnB1dC5jc3MoImZvbnQtc3R5bGUiKSwKICAgICAgICAgICAgICAgIGZvbnRWYXJpYW50OiAkaW5wdXQuY3NzKCJmb250LXZhcmlhbnQiKSwKICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICRpbnB1dC5jc3MoImZvbnQtd2VpZ2h0IiksCiAgICAgICAgICAgICAgICB3b3JkU3BhY2luZzogJGlucHV0LmNzcygid29yZC1zcGFjaW5nIiksCiAgICAgICAgICAgICAgICBsZXR0ZXJTcGFjaW5nOiAkaW5wdXQuY3NzKCJsZXR0ZXItc3BhY2luZyIpLAogICAgICAgICAgICAgICAgdGV4dEluZGVudDogJGlucHV0LmNzcygidGV4dC1pbmRlbnQiKSwKICAgICAgICAgICAgICAgIHRleHRSZW5kZXJpbmc6ICRpbnB1dC5jc3MoInRleHQtcmVuZGVyaW5nIiksCiAgICAgICAgICAgICAgICB0ZXh0VHJhbnNmb3JtOiAkaW5wdXQuY3NzKCJ0ZXh0LXRyYW5zZm9ybSIpCiAgICAgICAgICAgIH0pLmluc2VydEFmdGVyKCRpbnB1dCk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGFyZVF1ZXJpZXNFcXVpdmFsZW50KGEsIGIpIHsKICAgICAgICAgICAgcmV0dXJuIElucHV0Lm5vcm1hbGl6ZVF1ZXJ5KGEpID09PSBJbnB1dC5ub3JtYWxpemVRdWVyeShiKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gd2l0aE1vZGlmaWVyKCRlKSB7CiAgICAgICAgICAgIHJldHVybiAkZS5hbHRLZXkgfHwgJGUuY3RybEtleSB8fCAkZS5tZXRhS2V5IHx8ICRlLnNoaWZ0S2V5OwogICAgICAgIH0KICAgIH0oKTsKICAgIHZhciBEYXRhc2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgCiAgICAgICAgdmFyIGRhdGFzZXRLZXkgPSAidHREYXRhc2V0IiwgdmFsdWVLZXkgPSAidHRWYWx1ZSIsIGRhdHVtS2V5ID0gInR0RGF0dW0iOwogICAgICAgIGZ1bmN0aW9uIERhdGFzZXQobykgewogICAgICAgICAgICBvID0gbyB8fCB7fTsKICAgICAgICAgICAgby50ZW1wbGF0ZXMgPSBvLnRlbXBsYXRlcyB8fCB7fTsKICAgICAgICAgICAgaWYgKCFvLnNvdXJjZSkgewogICAgICAgICAgICAgICAgJC5lcnJvcigibWlzc2luZyBzb3VyY2UiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoby5uYW1lICYmICFpc1ZhbGlkTmFtZShvLm5hbWUpKSB7CiAgICAgICAgICAgICAgICAkLmVycm9yKCJpbnZhbGlkIGRhdGFzZXQgbmFtZTogIiArIG8ubmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5xdWVyeSA9IG51bGw7CiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ID0gISFvLmhpZ2hsaWdodDsKICAgICAgICAgICAgdGhpcy5uYW1lID0gby5uYW1lIHx8IF8uZ2V0VW5pcXVlSWQoKTsKICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBvLnNvdXJjZTsKICAgICAgICAgICAgdGhpcy5kaXNwbGF5Rm4gPSBnZXREaXNwbGF5Rm4oby5kaXNwbGF5IHx8IG8uZGlzcGxheUtleSk7CiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVzID0gZ2V0VGVtcGxhdGVzKG8udGVtcGxhdGVzLCB0aGlzLmRpc3BsYXlGbik7CiAgICAgICAgICAgIHRoaXMuJGVsID0gJChodG1sLmRhdGFzZXQucmVwbGFjZSgiJUNMQVNTJSIsIHRoaXMubmFtZSkpOwogICAgICAgIH0KICAgICAgICBEYXRhc2V0LmV4dHJhY3REYXRhc2V0TmFtZSA9IGZ1bmN0aW9uIGV4dHJhY3REYXRhc2V0TmFtZShlbCkgewogICAgICAgICAgICByZXR1cm4gJChlbCkuZGF0YShkYXRhc2V0S2V5KTsKICAgICAgICB9OwogICAgICAgIERhdGFzZXQuZXh0cmFjdFZhbHVlID0gZnVuY3Rpb24gZXh0cmFjdERhdHVtKGVsKSB7CiAgICAgICAgICAgIHJldHVybiAkKGVsKS5kYXRhKHZhbHVlS2V5KTsKICAgICAgICB9OwogICAgICAgIERhdGFzZXQuZXh0cmFjdERhdHVtID0gZnVuY3Rpb24gZXh0cmFjdERhdHVtKGVsKSB7CiAgICAgICAgICAgIHJldHVybiAkKGVsKS5kYXRhKGRhdHVtS2V5KTsKICAgICAgICB9OwogICAgICAgIF8ubWl4aW4oRGF0YXNldC5wcm90b3R5cGUsIEV2ZW50RW1pdHRlciwgewogICAgICAgICAgICBfcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocXVlcnksIHN1Z2dlc3Rpb25zKSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuJGVsKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLCBoYXNTdWdnZXN0aW9uczsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmVtcHR5KCk7CiAgICAgICAgICAgICAgICBoYXNTdWdnZXN0aW9ucyA9IHN1Z2dlc3Rpb25zICYmIHN1Z2dlc3Rpb25zLmxlbmd0aDsKICAgICAgICAgICAgICAgIGlmICghaGFzU3VnZ2VzdGlvbnMgJiYgdGhpcy50ZW1wbGF0ZXMuZW1wdHkpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5odG1sKGdldEVtcHR5SHRtbCgpKS5wcmVwZW5kKHRoYXQudGVtcGxhdGVzLmhlYWRlciA/IGdldEhlYWRlckh0bWwoKSA6IG51bGwpLmFwcGVuZCh0aGF0LnRlbXBsYXRlcy5mb290ZXIgPyBnZXRGb290ZXJIdG1sKCkgOiBudWxsKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzU3VnZ2VzdGlvbnMpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5odG1sKGdldFN1Z2dlc3Rpb25zSHRtbCgpKS5wcmVwZW5kKHRoYXQudGVtcGxhdGVzLmhlYWRlciA/IGdldEhlYWRlckh0bWwoKSA6IG51bGwpLmFwcGVuZCh0aGF0LnRlbXBsYXRlcy5mb290ZXIgPyBnZXRGb290ZXJIdG1sKCkgOiBudWxsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigicmVuZGVyZWQiKTsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEVtcHR5SHRtbCgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC50ZW1wbGF0ZXMuZW1wdHkoewogICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnksCiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW1wdHk6IHRydWUKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFN1Z2dlc3Rpb25zSHRtbCgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJHN1Z2dlc3Rpb25zLCBub2RlczsKICAgICAgICAgICAgICAgICAgICAkc3VnZ2VzdGlvbnMgPSAkKGh0bWwuc3VnZ2VzdGlvbnMpLmNzcyhjc3Muc3VnZ2VzdGlvbnMpOwogICAgICAgICAgICAgICAgICAgIG5vZGVzID0gXy5tYXAoc3VnZ2VzdGlvbnMsIGdldFN1Z2dlc3Rpb25Ob2RlKTsKICAgICAgICAgICAgICAgICAgICAkc3VnZ2VzdGlvbnMuYXBwZW5kLmFwcGx5KCRzdWdnZXN0aW9ucywgbm9kZXMpOwogICAgICAgICAgICAgICAgICAgIHRoYXQuaGlnaGxpZ2h0ICYmIGhpZ2hsaWdodCh7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogInR0LWhpZ2hsaWdodCIsCiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6ICRzdWdnZXN0aW9uc1swXSwKICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogcXVlcnkKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHN1Z2dlc3Rpb25zOwogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFN1Z2dlc3Rpb25Ob2RlKHN1Z2dlc3Rpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlbDsKICAgICAgICAgICAgICAgICAgICAgICAgJGVsID0gJChodG1sLnN1Z2dlc3Rpb24pLmFwcGVuZCh0aGF0LnRlbXBsYXRlcy5zdWdnZXN0aW9uKHN1Z2dlc3Rpb24pKS5kYXRhKGRhdGFzZXRLZXksIHRoYXQubmFtZSkuZGF0YSh2YWx1ZUtleSwgdGhhdC5kaXNwbGF5Rm4oc3VnZ2VzdGlvbikpLmRhdGEoZGF0dW1LZXksIHN1Z2dlc3Rpb24pOwogICAgICAgICAgICAgICAgICAgICAgICAkZWwuY2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoY3NzLnN1Z2dlc3Rpb25DaGlsZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGVsOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEhlYWRlckh0bWwoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQudGVtcGxhdGVzLmhlYWRlcih7CiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSwKICAgICAgICAgICAgICAgICAgICAgICAgaXNFbXB0eTogIWhhc1N1Z2dlc3Rpb25zCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRGb290ZXJIdG1sKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LnRlbXBsYXRlcy5mb290ZXIoewogICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnksCiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW1wdHk6ICFoYXNTdWdnZXN0aW9ucwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXRSb290OiBmdW5jdGlvbiBnZXRSb290KCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGVsOwogICAgICAgICAgICB9LAogICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShxdWVyeSkgewogICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICAgICAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5OwogICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgdGhpcy5zb3VyY2UocXVlcnksIHJlbmRlcik7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZW5kZXIoc3VnZ2VzdGlvbnMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXRoYXQuY2FuY2VsZWQgJiYgcXVlcnkgPT09IHRoYXQucXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fcmVuZGVyKHF1ZXJ5LCBzdWdnZXN0aW9ucyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uIGNhbmNlbCgpIHsKICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsZWQgPSB0cnVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbCgpOwogICAgICAgICAgICAgICAgdGhpcy4kZWwuZW1wdHkoKTsKICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigicmVuZGVyZWQiKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNFbXB0eTogZnVuY3Rpb24gaXNFbXB0eSgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRlbC5pcygiOmVtcHR5Iik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRlbCA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gRGF0YXNldDsKICAgICAgICBmdW5jdGlvbiBnZXREaXNwbGF5Rm4oZGlzcGxheSkgewogICAgICAgICAgICBkaXNwbGF5ID0gZGlzcGxheSB8fCAidmFsdWUiOwogICAgICAgICAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKGRpc3BsYXkpID8gZGlzcGxheSA6IGRpc3BsYXlGbjsKICAgICAgICAgICAgZnVuY3Rpb24gZGlzcGxheUZuKG9iaikgewogICAgICAgICAgICAgICAgcmV0dXJuIG9ialtkaXNwbGF5XTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZXRUZW1wbGF0ZXModGVtcGxhdGVzLCBkaXNwbGF5Rm4pIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGVtcHR5OiB0ZW1wbGF0ZXMuZW1wdHkgJiYgXy50ZW1wbGF0aWZ5KHRlbXBsYXRlcy5lbXB0eSksCiAgICAgICAgICAgICAgICBoZWFkZXI6IHRlbXBsYXRlcy5oZWFkZXIgJiYgXy50ZW1wbGF0aWZ5KHRlbXBsYXRlcy5oZWFkZXIpLAogICAgICAgICAgICAgICAgZm9vdGVyOiB0ZW1wbGF0ZXMuZm9vdGVyICYmIF8udGVtcGxhdGlmeSh0ZW1wbGF0ZXMuZm9vdGVyKSwKICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb246IHRlbXBsYXRlcy5zdWdnZXN0aW9uIHx8IHN1Z2dlc3Rpb25UZW1wbGF0ZQogICAgICAgICAgICB9OwogICAgICAgICAgICBmdW5jdGlvbiBzdWdnZXN0aW9uVGVtcGxhdGUoY29udGV4dCkgewogICAgICAgICAgICAgICAgcmV0dXJuICI8cD4iICsgZGlzcGxheUZuKGNvbnRleHQpICsgIjwvcD4iOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGlzVmFsaWROYW1lKHN0cikgewogICAgICAgICAgICByZXR1cm4gL15bX2EtekEtWjAtOS1dKyQvLnRlc3Qoc3RyKTsKICAgICAgICB9CiAgICB9KCk7CiAgICB2YXIgRHJvcGRvd24gPSBmdW5jdGlvbigpIHsKICAgICAgICAKICAgICAgICBmdW5jdGlvbiBEcm9wZG93bihvKSB7CiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcywgb25TdWdnZXN0aW9uQ2xpY2ssIG9uU3VnZ2VzdGlvbk1vdXNlRW50ZXIsIG9uU3VnZ2VzdGlvbk1vdXNlTGVhdmU7CiAgICAgICAgICAgIG8gPSBvIHx8IHt9OwogICAgICAgICAgICBpZiAoIW8ubWVudSkgewogICAgICAgICAgICAgICAgJC5lcnJvcigibWVudSBpcyByZXF1aXJlZCIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuaXNFbXB0eSA9IHRydWU7CiAgICAgICAgICAgIHRoaXMuZGF0YXNldHMgPSBfLm1hcChvLmRhdGFzZXRzLCBpbml0aWFsaXplRGF0YXNldCk7CiAgICAgICAgICAgIG9uU3VnZ2VzdGlvbkNsaWNrID0gXy5iaW5kKHRoaXMuX29uU3VnZ2VzdGlvbkNsaWNrLCB0aGlzKTsKICAgICAgICAgICAgb25TdWdnZXN0aW9uTW91c2VFbnRlciA9IF8uYmluZCh0aGlzLl9vblN1Z2dlc3Rpb25Nb3VzZUVudGVyLCB0aGlzKTsKICAgICAgICAgICAgb25TdWdnZXN0aW9uTW91c2VMZWF2ZSA9IF8uYmluZCh0aGlzLl9vblN1Z2dlc3Rpb25Nb3VzZUxlYXZlLCB0aGlzKTsKICAgICAgICAgICAgdGhpcy4kbWVudSA9ICQoby5tZW51KS5vbigiY2xpY2sudHQiLCAiLnR0LXN1Z2dlc3Rpb24iLCBvblN1Z2dlc3Rpb25DbGljaykub24oIm1vdXNlZW50ZXIudHQiLCAiLnR0LXN1Z2dlc3Rpb24iLCBvblN1Z2dlc3Rpb25Nb3VzZUVudGVyKS5vbigibW91c2VsZWF2ZS50dCIsICIudHQtc3VnZ2VzdGlvbiIsIG9uU3VnZ2VzdGlvbk1vdXNlTGVhdmUpOwogICAgICAgICAgICBfLmVhY2godGhpcy5kYXRhc2V0cywgZnVuY3Rpb24oZGF0YXNldCkgewogICAgICAgICAgICAgICAgdGhhdC4kbWVudS5hcHBlbmQoZGF0YXNldC5nZXRSb290KCkpOwogICAgICAgICAgICAgICAgZGF0YXNldC5vblN5bmMoInJlbmRlcmVkIiwgdGhhdC5fb25SZW5kZXJlZCwgdGhhdCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBfLm1peGluKERyb3Bkb3duLnByb3RvdHlwZSwgRXZlbnRFbWl0dGVyLCB7CiAgICAgICAgICAgIF9vblN1Z2dlc3Rpb25DbGljazogZnVuY3Rpb24gb25TdWdnZXN0aW9uQ2xpY2soJGUpIHsKICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigic3VnZ2VzdGlvbkNsaWNrZWQiLCAkKCRlLmN1cnJlbnRUYXJnZXQpKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX29uU3VnZ2VzdGlvbk1vdXNlRW50ZXI6IGZ1bmN0aW9uIG9uU3VnZ2VzdGlvbk1vdXNlRW50ZXIoJGUpIHsKICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUN1cnNvcigpOwogICAgICAgICAgICAgICAgdGhpcy5fc2V0Q3Vyc29yKCQoJGUuY3VycmVudFRhcmdldCksIHRydWUpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfb25TdWdnZXN0aW9uTW91c2VMZWF2ZTogZnVuY3Rpb24gb25TdWdnZXN0aW9uTW91c2VMZWF2ZSgpIHsKICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUN1cnNvcigpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfb25SZW5kZXJlZDogZnVuY3Rpb24gb25SZW5kZXJlZCgpIHsKICAgICAgICAgICAgICAgIHRoaXMuaXNFbXB0eSA9IF8uZXZlcnkodGhpcy5kYXRhc2V0cywgaXNEYXRhc2V0RW1wdHkpOwogICAgICAgICAgICAgICAgdGhpcy5pc0VtcHR5ID8gdGhpcy5faGlkZSgpIDogdGhpcy5pc09wZW4gJiYgdGhpcy5fc2hvdygpOwogICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCJkYXRhc2V0UmVuZGVyZWQiKTsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRGF0YXNldEVtcHR5KGRhdGFzZXQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YXNldC5pc0VtcHR5KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9oaWRlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHRoaXMuJG1lbnUuaGlkZSgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfc2hvdzogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRtZW51LmNzcygiZGlzcGxheSIsICJibG9jayIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfZ2V0U3VnZ2VzdGlvbnM6IGZ1bmN0aW9uIGdldFN1Z2dlc3Rpb25zKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG1lbnUuZmluZCgiLnR0LXN1Z2dlc3Rpb24iKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX2dldEN1cnNvcjogZnVuY3Rpb24gZ2V0Q3Vyc29yKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG1lbnUuZmluZCgiLnR0LWN1cnNvciIpLmZpcnN0KCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9zZXRDdXJzb3I6IGZ1bmN0aW9uIHNldEN1cnNvcigkZWwsIHNpbGVudCkgewogICAgICAgICAgICAgICAgJGVsLmZpcnN0KCkuYWRkQ2xhc3MoInR0LWN1cnNvciIpOwogICAgICAgICAgICAgICAgIXNpbGVudCAmJiB0aGlzLnRyaWdnZXIoImN1cnNvck1vdmVkIik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9yZW1vdmVDdXJzb3I6IGZ1bmN0aW9uIHJlbW92ZUN1cnNvcigpIHsKICAgICAgICAgICAgICAgIHRoaXMuX2dldEN1cnNvcigpLnJlbW92ZUNsYXNzKCJ0dC1jdXJzb3IiKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX21vdmVDdXJzb3I6IGZ1bmN0aW9uIG1vdmVDdXJzb3IoaW5jcmVtZW50KSB7CiAgICAgICAgICAgICAgICB2YXIgJHN1Z2dlc3Rpb25zLCAkb2xkQ3Vyc29yLCBuZXdDdXJzb3JJbmRleCwgJG5ld0N1cnNvcjsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc09wZW4pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkb2xkQ3Vyc29yID0gdGhpcy5fZ2V0Q3Vyc29yKCk7CiAgICAgICAgICAgICAgICAkc3VnZ2VzdGlvbnMgPSB0aGlzLl9nZXRTdWdnZXN0aW9ucygpOwogICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQ3Vyc29yKCk7CiAgICAgICAgICAgICAgICBuZXdDdXJzb3JJbmRleCA9ICRzdWdnZXN0aW9ucy5pbmRleCgkb2xkQ3Vyc29yKSArIGluY3JlbWVudDsKICAgICAgICAgICAgICAgIG5ld0N1cnNvckluZGV4ID0gKG5ld0N1cnNvckluZGV4ICsgMSkgJSAoJHN1Z2dlc3Rpb25zLmxlbmd0aCArIDEpIC0gMTsKICAgICAgICAgICAgICAgIGlmIChuZXdDdXJzb3JJbmRleCA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoImN1cnNvclJlbW92ZWQiKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5ld0N1cnNvckluZGV4IDwgLTEpIHsKICAgICAgICAgICAgICAgICAgICBuZXdDdXJzb3JJbmRleCA9ICRzdWdnZXN0aW9ucy5sZW5ndGggLSAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5fc2V0Q3Vyc29yKCRuZXdDdXJzb3IgPSAkc3VnZ2VzdGlvbnMuZXEobmV3Q3Vyc29ySW5kZXgpKTsKICAgICAgICAgICAgICAgIHRoaXMuX2Vuc3VyZVZpc2libGUoJG5ld0N1cnNvcik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9lbnN1cmVWaXNpYmxlOiBmdW5jdGlvbiBlbnN1cmVWaXNpYmxlKCRlbCkgewogICAgICAgICAgICAgICAgdmFyIGVsVG9wLCBlbEJvdHRvbSwgbWVudVNjcm9sbFRvcCwgbWVudUhlaWdodDsKICAgICAgICAgICAgICAgIGVsVG9wID0gJGVsLnBvc2l0aW9uKCkudG9wOwogICAgICAgICAgICAgICAgZWxCb3R0b20gPSBlbFRvcCArICRlbC5vdXRlckhlaWdodCh0cnVlKTsKICAgICAgICAgICAgICAgIG1lbnVTY3JvbGxUb3AgPSB0aGlzLiRtZW51LnNjcm9sbFRvcCgpOwogICAgICAgICAgICAgICAgbWVudUhlaWdodCA9IHRoaXMuJG1lbnUuaGVpZ2h0KCkgKyBwYXJzZUludCh0aGlzLiRtZW51LmNzcygicGFkZGluZ1RvcCIpLCAxMCkgKyBwYXJzZUludCh0aGlzLiRtZW51LmNzcygicGFkZGluZ0JvdHRvbSIpLCAxMCk7CiAgICAgICAgICAgICAgICBpZiAoZWxUb3AgPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kbWVudS5zY3JvbGxUb3AobWVudVNjcm9sbFRvcCArIGVsVG9wKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWVudUhlaWdodCA8IGVsQm90dG9tKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kbWVudS5zY3JvbGxUb3AobWVudVNjcm9sbFRvcCArIChlbEJvdHRvbSAtIG1lbnVIZWlnaHQpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNPcGVuKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVDdXJzb3IoKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCJjbG9zZWQiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgb3BlbjogZnVuY3Rpb24gb3BlbigpIHsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc09wZW4pIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmlzT3BlbiA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgIXRoaXMuaXNFbXB0eSAmJiB0aGlzLl9zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCJvcGVuZWQiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0TGFuZ3VhZ2VEaXJlY3Rpb246IGZ1bmN0aW9uIHNldExhbmd1YWdlRGlyZWN0aW9uKGRpcikgewogICAgICAgICAgICAgICAgdGhpcy4kbWVudS5jc3MoZGlyID09PSAibHRyIiA/IGNzcy5sdHIgOiBjc3MucnRsKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbW92ZUN1cnNvclVwOiBmdW5jdGlvbiBtb3ZlQ3Vyc29yVXAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9tb3ZlQ3Vyc29yKC0xKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbW92ZUN1cnNvckRvd246IGZ1bmN0aW9uIG1vdmVDdXJzb3JEb3duKCkgewogICAgICAgICAgICAgICAgdGhpcy5fbW92ZUN1cnNvcigrMSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldERhdHVtRm9yU3VnZ2VzdGlvbjogZnVuY3Rpb24gZ2V0RGF0dW1Gb3JTdWdnZXN0aW9uKCRlbCkgewogICAgICAgICAgICAgICAgdmFyIGRhdHVtID0gbnVsbDsKICAgICAgICAgICAgICAgIGlmICgkZWwubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgZGF0dW0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJhdzogRGF0YXNldC5leHRyYWN0RGF0dW0oJGVsKSwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IERhdGFzZXQuZXh0cmFjdFZhbHVlKCRlbCksCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXROYW1lOiBEYXRhc2V0LmV4dHJhY3REYXRhc2V0TmFtZSgkZWwpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBkYXR1bTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0RGF0dW1Gb3JDdXJzb3I6IGZ1bmN0aW9uIGdldERhdHVtRm9yQ3Vyc29yKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0dW1Gb3JTdWdnZXN0aW9uKHRoaXMuX2dldEN1cnNvcigpLmZpcnN0KCkpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXREYXR1bUZvclRvcFN1Z2dlc3Rpb246IGZ1bmN0aW9uIGdldERhdHVtRm9yVG9wU3VnZ2VzdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERhdHVtRm9yU3VnZ2VzdGlvbih0aGlzLl9nZXRTdWdnZXN0aW9ucygpLmZpcnN0KCkpOwogICAgICAgICAgICB9LAogICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShxdWVyeSkgewogICAgICAgICAgICAgICAgXy5lYWNoKHRoaXMuZGF0YXNldHMsIHVwZGF0ZURhdGFzZXQpOwogICAgICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGF0YXNldChkYXRhc2V0KSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YXNldC51cGRhdGUocXVlcnkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBlbXB0eTogZnVuY3Rpb24gZW1wdHkoKSB7CiAgICAgICAgICAgICAgICBfLmVhY2godGhpcy5kYXRhc2V0cywgY2xlYXJEYXRhc2V0KTsKICAgICAgICAgICAgICAgIHRoaXMuaXNFbXB0eSA9IHRydWU7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjbGVhckRhdGFzZXQoZGF0YXNldCkgewogICAgICAgICAgICAgICAgICAgIGRhdGFzZXQuY2xlYXIoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNWaXNpYmxlOiBmdW5jdGlvbiBpc1Zpc2libGUoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc09wZW4gJiYgIXRoaXMuaXNFbXB0eTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgICAgICAgICAgIHRoaXMuJG1lbnUub2ZmKCIudHQiKTsKICAgICAgICAgICAgICAgIHRoaXMuJG1lbnUgPSBudWxsOwogICAgICAgICAgICAgICAgXy5lYWNoKHRoaXMuZGF0YXNldHMsIGRlc3Ryb3lEYXRhc2V0KTsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlc3Ryb3lEYXRhc2V0KGRhdGFzZXQpIHsKICAgICAgICAgICAgICAgICAgICBkYXRhc2V0LmRlc3Ryb3koKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBEcm9wZG93bjsKICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXplRGF0YXNldChvRGF0YXNldCkgewogICAgICAgICAgICByZXR1cm4gbmV3IERhdGFzZXQob0RhdGFzZXQpOwogICAgICAgIH0KICAgIH0oKTsKICAgIHZhciBUeXBlYWhlYWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAKICAgICAgICB2YXIgYXR0cnNLZXkgPSAidHRBdHRycyI7CiAgICAgICAgZnVuY3Rpb24gVHlwZWFoZWFkKG8pIHsKICAgICAgICAgICAgdmFyICRtZW51LCAkaW5wdXQsICRoaW50OwogICAgICAgICAgICBvID0gbyB8fCB7fTsKICAgICAgICAgICAgaWYgKCFvLmlucHV0KSB7CiAgICAgICAgICAgICAgICAkLmVycm9yKCJtaXNzaW5nIGlucHV0Iik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5pc0FjdGl2YXRlZCA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLmF1dG9zZWxlY3QgPSAhIW8uYXV0b3NlbGVjdDsKICAgICAgICAgICAgdGhpcy5taW5MZW5ndGggPSBfLmlzTnVtYmVyKG8ubWluTGVuZ3RoKSA/IG8ubWluTGVuZ3RoIDogMTsKICAgICAgICAgICAgdGhpcy4kbm9kZSA9IGJ1aWxkRG9tKG8uaW5wdXQsIG8ud2l0aEhpbnQpOwogICAgICAgICAgICAkbWVudSA9IHRoaXMuJG5vZGUuZmluZCgiLnR0LWRyb3Bkb3duLW1lbnUiKTsKICAgICAgICAgICAgJGlucHV0ID0gdGhpcy4kbm9kZS5maW5kKCIudHQtaW5wdXQiKTsKICAgICAgICAgICAgJGhpbnQgPSB0aGlzLiRub2RlLmZpbmQoIi50dC1oaW50Iik7CiAgICAgICAgICAgICRpbnB1dC5vbigiYmx1ci50dCIsIGZ1bmN0aW9uKCRlKSB7CiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlLCBpc0FjdGl2ZSwgaGFzQWN0aXZlOwogICAgICAgICAgICAgICAgYWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDsKICAgICAgICAgICAgICAgIGlzQWN0aXZlID0gJG1lbnUuaXMoYWN0aXZlKTsKICAgICAgICAgICAgICAgIGhhc0FjdGl2ZSA9ICRtZW51LmhhcyhhY3RpdmUpLmxlbmd0aCA+IDA7CiAgICAgICAgICAgICAgICBpZiAoXy5pc01zaWUoKSAmJiAoaXNBY3RpdmUgfHwgaGFzQWN0aXZlKSkgewogICAgICAgICAgICAgICAgICAgICRlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgJGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgXy5kZWZlcihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkbWVudS5vbigibW91c2Vkb3duLnR0IiwgZnVuY3Rpb24oJGUpIHsKICAgICAgICAgICAgICAgICRlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB0aGlzLmV2ZW50QnVzID0gby5ldmVudEJ1cyB8fCBuZXcgRXZlbnRCdXMoewogICAgICAgICAgICAgICAgZWw6ICRpbnB1dAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhpcy5kcm9wZG93biA9IG5ldyBEcm9wZG93bih7CiAgICAgICAgICAgICAgICBtZW51OiAkbWVudSwKICAgICAgICAgICAgICAgIGRhdGFzZXRzOiBvLmRhdGFzZXRzCiAgICAgICAgICAgIH0pLm9uU3luYygic3VnZ2VzdGlvbkNsaWNrZWQiLCB0aGlzLl9vblN1Z2dlc3Rpb25DbGlja2VkLCB0aGlzKS5vblN5bmMoImN1cnNvck1vdmVkIiwgdGhpcy5fb25DdXJzb3JNb3ZlZCwgdGhpcykub25TeW5jKCJjdXJzb3JSZW1vdmVkIiwgdGhpcy5fb25DdXJzb3JSZW1vdmVkLCB0aGlzKS5vblN5bmMoIm9wZW5lZCIsIHRoaXMuX29uT3BlbmVkLCB0aGlzKS5vblN5bmMoImNsb3NlZCIsIHRoaXMuX29uQ2xvc2VkLCB0aGlzKS5vbkFzeW5jKCJkYXRhc2V0UmVuZGVyZWQiLCB0aGlzLl9vbkRhdGFzZXRSZW5kZXJlZCwgdGhpcyk7CiAgICAgICAgICAgIHRoaXMuaW5wdXQgPSBuZXcgSW5wdXQoewogICAgICAgICAgICAgICAgaW5wdXQ6ICRpbnB1dCwKICAgICAgICAgICAgICAgIGhpbnQ6ICRoaW50CiAgICAgICAgICAgIH0pLm9uU3luYygiZm9jdXNlZCIsIHRoaXMuX29uRm9jdXNlZCwgdGhpcykub25TeW5jKCJibHVycmVkIiwgdGhpcy5fb25CbHVycmVkLCB0aGlzKS5vblN5bmMoImVudGVyS2V5ZWQiLCB0aGlzLl9vbkVudGVyS2V5ZWQsIHRoaXMpLm9uU3luYygidGFiS2V5ZWQiLCB0aGlzLl9vblRhYktleWVkLCB0aGlzKS5vblN5bmMoImVzY0tleWVkIiwgdGhpcy5fb25Fc2NLZXllZCwgdGhpcykub25TeW5jKCJ1cEtleWVkIiwgdGhpcy5fb25VcEtleWVkLCB0aGlzKS5vblN5bmMoImRvd25LZXllZCIsIHRoaXMuX29uRG93bktleWVkLCB0aGlzKS5vblN5bmMoImxlZnRLZXllZCIsIHRoaXMuX29uTGVmdEtleWVkLCB0aGlzKS5vblN5bmMoInJpZ2h0S2V5ZWQiLCB0aGlzLl9vblJpZ2h0S2V5ZWQsIHRoaXMpLm9uU3luYygicXVlcnlDaGFuZ2VkIiwgdGhpcy5fb25RdWVyeUNoYW5nZWQsIHRoaXMpLm9uU3luYygid2hpdGVzcGFjZUNoYW5nZWQiLCB0aGlzLl9vbldoaXRlc3BhY2VDaGFuZ2VkLCB0aGlzKTsKICAgICAgICAgICAgdGhpcy5fc2V0TGFuZ3VhZ2VEaXJlY3Rpb24oKTsKICAgICAgICB9CiAgICAgICAgXy5taXhpbihUeXBlYWhlYWQucHJvdG90eXBlLCB7CiAgICAgICAgICAgIF9vblN1Z2dlc3Rpb25DbGlja2VkOiBmdW5jdGlvbiBvblN1Z2dlc3Rpb25DbGlja2VkKHR5cGUsICRlbCkgewogICAgICAgICAgICAgICAgdmFyIGRhdHVtOwogICAgICAgICAgICAgICAgaWYgKGRhdHVtID0gdGhpcy5kcm9wZG93bi5nZXREYXR1bUZvclN1Z2dlc3Rpb24oJGVsKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdChkYXR1bSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9vbkN1cnNvck1vdmVkOiBmdW5jdGlvbiBvbkN1cnNvck1vdmVkKCkgewogICAgICAgICAgICAgICAgdmFyIGRhdHVtID0gdGhpcy5kcm9wZG93bi5nZXREYXR1bUZvckN1cnNvcigpOwogICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5zZXRJbnB1dFZhbHVlKGRhdHVtLnZhbHVlLCB0cnVlKTsKICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRCdXMudHJpZ2dlcigiY3Vyc29yY2hhbmdlZCIsIGRhdHVtLnJhdywgZGF0dW0uZGF0YXNldE5hbWUpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfb25DdXJzb3JSZW1vdmVkOiBmdW5jdGlvbiBvbkN1cnNvclJlbW92ZWQoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmlucHV0LnJlc2V0SW5wdXRWYWx1ZSgpOwogICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlSGludCgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfb25EYXRhc2V0UmVuZGVyZWQ6IGZ1bmN0aW9uIG9uRGF0YXNldFJlbmRlcmVkKCkgewogICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlSGludCgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfb25PcGVuZWQ6IGZ1bmN0aW9uIG9uT3BlbmVkKCkgewogICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlSGludCgpOwogICAgICAgICAgICAgICAgdGhpcy5ldmVudEJ1cy50cmlnZ2VyKCJvcGVuZWQiKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX29uQ2xvc2VkOiBmdW5jdGlvbiBvbkNsb3NlZCgpIHsKICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQuY2xlYXJIaW50KCk7CiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoImNsb3NlZCIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfb25Gb2N1c2VkOiBmdW5jdGlvbiBvbkZvY3VzZWQoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmlzQWN0aXZhdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRoaXMuZHJvcGRvd24ub3BlbigpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfb25CbHVycmVkOiBmdW5jdGlvbiBvbkJsdXJyZWQoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmlzQWN0aXZhdGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLmVtcHR5KCk7CiAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLmNsb3NlKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9vbkVudGVyS2V5ZWQ6IGZ1bmN0aW9uIG9uRW50ZXJLZXllZCh0eXBlLCAkZSkgewogICAgICAgICAgICAgICAgdmFyIGN1cnNvckRhdHVtLCB0b3BTdWdnZXN0aW9uRGF0dW07CiAgICAgICAgICAgICAgICBjdXJzb3JEYXR1bSA9IHRoaXMuZHJvcGRvd24uZ2V0RGF0dW1Gb3JDdXJzb3IoKTsKICAgICAgICAgICAgICAgIHRvcFN1Z2dlc3Rpb25EYXR1bSA9IHRoaXMuZHJvcGRvd24uZ2V0RGF0dW1Gb3JUb3BTdWdnZXN0aW9uKCk7CiAgICAgICAgICAgICAgICBpZiAoY3Vyc29yRGF0dW0pIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3QoY3Vyc29yRGF0dW0pOwogICAgICAgICAgICAgICAgICAgICRlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYXV0b3NlbGVjdCAmJiB0b3BTdWdnZXN0aW9uRGF0dW0pIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3QodG9wU3VnZ2VzdGlvbkRhdHVtKTsKICAgICAgICAgICAgICAgICAgICAkZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBfb25UYWJLZXllZDogZnVuY3Rpb24gb25UYWJLZXllZCh0eXBlLCAkZSkgewogICAgICAgICAgICAgICAgdmFyIGRhdHVtOwogICAgICAgICAgICAgICAgaWYgKGRhdHVtID0gdGhpcy5kcm9wZG93bi5nZXREYXR1bUZvckN1cnNvcigpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0KGRhdHVtKTsKICAgICAgICAgICAgICAgICAgICAkZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdXRvY29tcGxldGUodHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9vbkVzY0tleWVkOiBmdW5jdGlvbiBvbkVzY0tleWVkKCkgewogICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5jbG9zZSgpOwogICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5yZXNldElucHV0VmFsdWUoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX29uVXBLZXllZDogZnVuY3Rpb24gb25VcEtleWVkKCkgewogICAgICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5pbnB1dC5nZXRRdWVyeSgpOwogICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5pc0VtcHR5ICYmIHF1ZXJ5Lmxlbmd0aCA+PSB0aGlzLm1pbkxlbmd0aCA/IHRoaXMuZHJvcGRvd24udXBkYXRlKHF1ZXJ5KSA6IHRoaXMuZHJvcGRvd24ubW92ZUN1cnNvclVwKCk7CiAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLm9wZW4oKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX29uRG93bktleWVkOiBmdW5jdGlvbiBvbkRvd25LZXllZCgpIHsKICAgICAgICAgICAgICAgIHZhciBxdWVyeSA9IHRoaXMuaW5wdXQuZ2V0UXVlcnkoKTsKICAgICAgICAgICAgICAgIHRoaXMuZHJvcGRvd24uaXNFbXB0eSAmJiBxdWVyeS5sZW5ndGggPj0gdGhpcy5taW5MZW5ndGggPyB0aGlzLmRyb3Bkb3duLnVwZGF0ZShxdWVyeSkgOiB0aGlzLmRyb3Bkb3duLm1vdmVDdXJzb3JEb3duKCk7CiAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLm9wZW4oKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX29uTGVmdEtleWVkOiBmdW5jdGlvbiBvbkxlZnRLZXllZCgpIHsKICAgICAgICAgICAgICAgIHRoaXMuZGlyID09PSAicnRsIiAmJiB0aGlzLl9hdXRvY29tcGxldGUoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX29uUmlnaHRLZXllZDogZnVuY3Rpb24gb25SaWdodEtleWVkKCkgewogICAgICAgICAgICAgICAgdGhpcy5kaXIgPT09ICJsdHIiICYmIHRoaXMuX2F1dG9jb21wbGV0ZSgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfb25RdWVyeUNoYW5nZWQ6IGZ1bmN0aW9uIG9uUXVlcnlDaGFuZ2VkKGUsIHF1ZXJ5KSB7CiAgICAgICAgICAgICAgICB0aGlzLmlucHV0LmNsZWFySGludElmSW52YWxpZCgpOwogICAgICAgICAgICAgICAgcXVlcnkubGVuZ3RoID49IHRoaXMubWluTGVuZ3RoID8gdGhpcy5kcm9wZG93bi51cGRhdGUocXVlcnkpIDogdGhpcy5kcm9wZG93bi5lbXB0eSgpOwogICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5vcGVuKCk7CiAgICAgICAgICAgICAgICB0aGlzLl9zZXRMYW5ndWFnZURpcmVjdGlvbigpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfb25XaGl0ZXNwYWNlQ2hhbmdlZDogZnVuY3Rpb24gb25XaGl0ZXNwYWNlQ2hhbmdlZCgpIHsKICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhpbnQoKTsKICAgICAgICAgICAgICAgIHRoaXMuZHJvcGRvd24ub3BlbigpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfc2V0TGFuZ3VhZ2VEaXJlY3Rpb246IGZ1bmN0aW9uIHNldExhbmd1YWdlRGlyZWN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGRpcjsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpciAhPT0gKGRpciA9IHRoaXMuaW5wdXQuZ2V0TGFuZ3VhZ2VEaXJlY3Rpb24oKSkpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmRpciA9IGRpcjsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRub2RlLmNzcygiZGlyZWN0aW9uIiwgZGlyKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLnNldExhbmd1YWdlRGlyZWN0aW9uKGRpcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF91cGRhdGVIaW50OiBmdW5jdGlvbiB1cGRhdGVIaW50KCkgewogICAgICAgICAgICAgICAgdmFyIGRhdHVtLCB2YWwsIHF1ZXJ5LCBlc2NhcGVkUXVlcnksIGZyb250TWF0Y2hSZWdFeCwgbWF0Y2g7CiAgICAgICAgICAgICAgICBkYXR1bSA9IHRoaXMuZHJvcGRvd24uZ2V0RGF0dW1Gb3JUb3BTdWdnZXN0aW9uKCk7CiAgICAgICAgICAgICAgICBpZiAoZGF0dW0gJiYgdGhpcy5kcm9wZG93bi5pc1Zpc2libGUoKSAmJiAhdGhpcy5pbnB1dC5oYXNPdmVyZmxvdygpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsID0gdGhpcy5pbnB1dC5nZXRJbnB1dFZhbHVlKCk7CiAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSBJbnB1dC5ub3JtYWxpemVRdWVyeSh2YWwpOwogICAgICAgICAgICAgICAgICAgIGVzY2FwZWRRdWVyeSA9IF8uZXNjYXBlUmVnRXhDaGFycyhxdWVyeSk7CiAgICAgICAgICAgICAgICAgICAgZnJvbnRNYXRjaFJlZ0V4ID0gbmV3IFJlZ0V4cCgiXig/OiIgKyBlc2NhcGVkUXVlcnkgKyAiKSguKyQpIiwgImkiKTsKICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGZyb250TWF0Y2hSZWdFeC5leGVjKGRhdHVtLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICBtYXRjaCA/IHRoaXMuaW5wdXQuc2V0SGludCh2YWwgKyBtYXRjaFsxXSkgOiB0aGlzLmlucHV0LmNsZWFySGludCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0LmNsZWFySGludCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBfYXV0b2NvbXBsZXRlOiBmdW5jdGlvbiBhdXRvY29tcGxldGUobGF4Q3Vyc29yKSB7CiAgICAgICAgICAgICAgICB2YXIgaGludCwgcXVlcnksIGlzQ3Vyc29yQXRFbmQsIGRhdHVtOwogICAgICAgICAgICAgICAgaGludCA9IHRoaXMuaW5wdXQuZ2V0SGludCgpOwogICAgICAgICAgICAgICAgcXVlcnkgPSB0aGlzLmlucHV0LmdldFF1ZXJ5KCk7CiAgICAgICAgICAgICAgICBpc0N1cnNvckF0RW5kID0gbGF4Q3Vyc29yIHx8IHRoaXMuaW5wdXQuaXNDdXJzb3JBdEVuZCgpOwogICAgICAgICAgICAgICAgaWYgKGhpbnQgJiYgcXVlcnkgIT09IGhpbnQgJiYgaXNDdXJzb3JBdEVuZCkgewogICAgICAgICAgICAgICAgICAgIGRhdHVtID0gdGhpcy5kcm9wZG93bi5nZXREYXR1bUZvclRvcFN1Z2dlc3Rpb24oKTsKICAgICAgICAgICAgICAgICAgICBkYXR1bSAmJiB0aGlzLmlucHV0LnNldElucHV0VmFsdWUoZGF0dW0udmFsdWUpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRCdXMudHJpZ2dlcigiYXV0b2NvbXBsZXRlZCIsIGRhdHVtLnJhdywgZGF0dW0uZGF0YXNldE5hbWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBfc2VsZWN0OiBmdW5jdGlvbiBzZWxlY3QoZGF0dW0pIHsKICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQuc2V0UXVlcnkoZGF0dW0udmFsdWUpOwogICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5zZXRJbnB1dFZhbHVlKGRhdHVtLnZhbHVlLCB0cnVlKTsKICAgICAgICAgICAgICAgIHRoaXMuX3NldExhbmd1YWdlRGlyZWN0aW9uKCk7CiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50QnVzLnRyaWdnZXIoInNlbGVjdGVkIiwgZGF0dW0ucmF3LCBkYXR1bS5kYXRhc2V0TmFtZSk7CiAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLmNsb3NlKCk7CiAgICAgICAgICAgICAgICBfLmRlZmVyKF8uYmluZCh0aGlzLmRyb3Bkb3duLmVtcHR5LCB0aGlzLmRyb3Bkb3duKSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9wZW46IGZ1bmN0aW9uIG9wZW4oKSB7CiAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLm9wZW4oKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkgewogICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5jbG9zZSgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXRWYWw6IGZ1bmN0aW9uIHNldFZhbCh2YWwpIHsKICAgICAgICAgICAgICAgIHZhbCA9IF8udG9TdHIodmFsKTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZhdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5zZXRJbnB1dFZhbHVlKHZhbCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQuc2V0UXVlcnkodmFsKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0LnNldElucHV0VmFsdWUodmFsLCB0cnVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuX3NldExhbmd1YWdlRGlyZWN0aW9uKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldFZhbDogZnVuY3Rpb24gZ2V0VmFsKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXQuZ2V0UXVlcnkoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQuZGVzdHJveSgpOwogICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5kZXN0cm95KCk7CiAgICAgICAgICAgICAgICBkZXN0cm95RG9tU3RydWN0dXJlKHRoaXMuJG5vZGUpOwogICAgICAgICAgICAgICAgdGhpcy4kbm9kZSA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gVHlwZWFoZWFkOwogICAgICAgIGZ1bmN0aW9uIGJ1aWxkRG9tKGlucHV0LCB3aXRoSGludCkgewogICAgICAgICAgICB2YXIgJGlucHV0LCAkd3JhcHBlciwgJGRyb3Bkb3duLCAkaGludDsKICAgICAgICAgICAgJGlucHV0ID0gJChpbnB1dCk7CiAgICAgICAgICAgICR3cmFwcGVyID0gJChodG1sLndyYXBwZXIpLmNzcyhjc3Mud3JhcHBlcik7CiAgICAgICAgICAgICRkcm9wZG93biA9ICQoaHRtbC5kcm9wZG93bikuY3NzKGNzcy5kcm9wZG93bik7CiAgICAgICAgICAgICRoaW50ID0gJGlucHV0LmNsb25lKCkuY3NzKGNzcy5oaW50KS5jc3MoZ2V0QmFja2dyb3VuZFN0eWxlcygkaW5wdXQpKTsKICAgICAgICAgICAgJGhpbnQudmFsKCIiKS5yZW1vdmVEYXRhKCkuYWRkQ2xhc3MoInR0LWhpbnQiKS5yZW1vdmVBdHRyKCJpZCBuYW1lIHBsYWNlaG9sZGVyIHJlcXVpcmVkIikucHJvcCgicmVhZG9ubHkiLCB0cnVlKS5hdHRyKHsKICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogIm9mZiIsCiAgICAgICAgICAgICAgICBzcGVsbGNoZWNrOiAiZmFsc2UiLAogICAgICAgICAgICAgICAgdGFiaW5kZXg6IC0xCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkaW5wdXQuZGF0YShhdHRyc0tleSwgewogICAgICAgICAgICAgICAgZGlyOiAkaW5wdXQuYXR0cigiZGlyIiksCiAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU6ICRpbnB1dC5hdHRyKCJhdXRvY29tcGxldGUiKSwKICAgICAgICAgICAgICAgIHNwZWxsY2hlY2s6ICRpbnB1dC5hdHRyKCJzcGVsbGNoZWNrIiksCiAgICAgICAgICAgICAgICBzdHlsZTogJGlucHV0LmF0dHIoInN0eWxlIikKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICRpbnB1dC5hZGRDbGFzcygidHQtaW5wdXQiKS5hdHRyKHsKICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogIm9mZiIsCiAgICAgICAgICAgICAgICBzcGVsbGNoZWNrOiBmYWxzZQogICAgICAgICAgICB9KS5jc3Mod2l0aEhpbnQgPyBjc3MuaW5wdXQgOiBjc3MuaW5wdXRXaXRoTm9IaW50KTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICEkaW5wdXQuYXR0cigiZGlyIikgJiYgJGlucHV0LmF0dHIoImRpciIsICJhdXRvIik7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgICAgICAgIHJldHVybiAkaW5wdXQud3JhcCgkd3JhcHBlcikucGFyZW50KCkucHJlcGVuZCh3aXRoSGludCA/ICRoaW50IDogbnVsbCkuYXBwZW5kKCRkcm9wZG93bik7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGdldEJhY2tncm91bmRTdHlsZXMoJGVsKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQXR0YWNobWVudDogJGVsLmNzcygiYmFja2dyb3VuZC1hdHRhY2htZW50IiksCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ2xpcDogJGVsLmNzcygiYmFja2dyb3VuZC1jbGlwIiksCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICRlbC5jc3MoImJhY2tncm91bmQtY29sb3IiKSwKICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogJGVsLmNzcygiYmFja2dyb3VuZC1pbWFnZSIpLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZE9yaWdpbjogJGVsLmNzcygiYmFja2dyb3VuZC1vcmlnaW4iKSwKICAgICAgICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJGVsLmNzcygiYmFja2dyb3VuZC1wb3NpdGlvbiIpLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJGVsLmNzcygiYmFja2dyb3VuZC1yZXBlYXQiKSwKICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAkZWwuY3NzKCJiYWNrZ3JvdW5kLXNpemUiKQogICAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBkZXN0cm95RG9tU3RydWN0dXJlKCRub2RlKSB7CiAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkbm9kZS5maW5kKCIudHQtaW5wdXQiKTsKICAgICAgICAgICAgXy5lYWNoKCRpbnB1dC5kYXRhKGF0dHJzS2V5KSwgZnVuY3Rpb24odmFsLCBrZXkpIHsKICAgICAgICAgICAgICAgIF8uaXNVbmRlZmluZWQodmFsKSA/ICRpbnB1dC5yZW1vdmVBdHRyKGtleSkgOiAkaW5wdXQuYXR0cihrZXksIHZhbCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkaW5wdXQuZGV0YWNoKCkucmVtb3ZlRGF0YShhdHRyc0tleSkucmVtb3ZlQ2xhc3MoInR0LWlucHV0IikuaW5zZXJ0QWZ0ZXIoJG5vZGUpOwogICAgICAgICAgICAkbm9kZS5yZW1vdmUoKTsKICAgICAgICB9CiAgICB9KCk7CiAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgCiAgICAgICAgdmFyIG9sZCwgdHlwZWFoZWFkS2V5LCBtZXRob2RzOwogICAgICAgIG9sZCA9ICQuZm4udHlwZWFoZWFkOwogICAgICAgIHR5cGVhaGVhZEtleSA9ICJ0dFR5cGVhaGVhZCI7CiAgICAgICAgbWV0aG9kcyA9IHsKICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShvLCBkYXRhc2V0cykgewogICAgICAgICAgICAgICAgZGF0YXNldHMgPSBfLmlzQXJyYXkoZGF0YXNldHMpID8gZGF0YXNldHMgOiBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgICAgICAgICAgICBvID0gbyB8fCB7fTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goYXR0YWNoKTsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGF0dGFjaCgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKSwgZXZlbnRCdXMsIHR5cGVhaGVhZDsKICAgICAgICAgICAgICAgICAgICBfLmVhY2goZGF0YXNldHMsIGZ1bmN0aW9uKGQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZC5oaWdobGlnaHQgPSAhIW8uaGlnaGxpZ2h0OwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHR5cGVhaGVhZCA9IG5ldyBUeXBlYWhlYWQoewogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogJGlucHV0LAogICAgICAgICAgICAgICAgICAgICAgICBldmVudEJ1czogZXZlbnRCdXMgPSBuZXcgRXZlbnRCdXMoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWw6ICRpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aEhpbnQ6IF8uaXNVbmRlZmluZWQoby5oaW50KSA/IHRydWUgOiAhIW8uaGludCwKICAgICAgICAgICAgICAgICAgICAgICAgbWluTGVuZ3RoOiBvLm1pbkxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgYXV0b3NlbGVjdDogby5hdXRvc2VsZWN0LAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0czogZGF0YXNldHMKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAkaW5wdXQuZGF0YSh0eXBlYWhlYWRLZXksIHR5cGVhaGVhZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9wZW46IGZ1bmN0aW9uIG9wZW4oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKG9wZW5UeXBlYWhlYWQpOwogICAgICAgICAgICAgICAgZnVuY3Rpb24gb3BlblR5cGVhaGVhZCgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKSwgdHlwZWFoZWFkOwogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlYWhlYWQgPSAkaW5wdXQuZGF0YSh0eXBlYWhlYWRLZXkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVhaGVhZC5vcGVuKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGNsb3NlVHlwZWFoZWFkKTsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNsb3NlVHlwZWFoZWFkKCkgewogICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpLCB0eXBlYWhlYWQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVhaGVhZCA9ICRpbnB1dC5kYXRhKHR5cGVhaGVhZEtleSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZWFoZWFkLmNsb3NlKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB2YWw6IGZ1bmN0aW9uIHZhbChuZXdWYWwpIHsKICAgICAgICAgICAgICAgIHJldHVybiAhYXJndW1lbnRzLmxlbmd0aCA/IGdldFZhbCh0aGlzLmZpcnN0KCkpIDogdGhpcy5lYWNoKHNldFZhbCk7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRWYWwoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyksIHR5cGVhaGVhZDsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZWFoZWFkID0gJGlucHV0LmRhdGEodHlwZWFoZWFkS2V5KSkgewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlYWhlYWQuc2V0VmFsKG5ld1ZhbCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VmFsKCRpbnB1dCkgewogICAgICAgICAgICAgICAgICAgIHZhciB0eXBlYWhlYWQsIHF1ZXJ5OwogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlYWhlYWQgPSAkaW5wdXQuZGF0YSh0eXBlYWhlYWRLZXkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0gdHlwZWFoZWFkLmdldFZhbCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKHVuYXR0YWNoKTsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVuYXR0YWNoKCkgewogICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpLCB0eXBlYWhlYWQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVhaGVhZCA9ICRpbnB1dC5kYXRhKHR5cGVhaGVhZEtleSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZWFoZWFkLmRlc3Ryb3koKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnJlbW92ZURhdGEodHlwZWFoZWFkS2V5KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgICQuZm4udHlwZWFoZWFkID0gZnVuY3Rpb24obWV0aG9kKSB7CiAgICAgICAgICAgIHZhciB0dHM7CiAgICAgICAgICAgIGlmIChtZXRob2RzW21ldGhvZF0gJiYgbWV0aG9kICE9PSAiaW5pdGlhbGl6ZSIpIHsKICAgICAgICAgICAgICAgIHR0cyA9IHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhISQodGhpcykuZGF0YSh0eXBlYWhlYWRLZXkpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kc1ttZXRob2RdLmFwcGx5KHR0cywgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2RzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgJC5mbi50eXBlYWhlYWQubm9Db25mbGljdCA9IGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7CiAgICAgICAgICAgICQuZm4udHlwZWFoZWFkID0gb2xkOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgfSkoKTsKICAgIHJldHVybiB7fTsKfSkpOwoKLy8gVGhpcyBjb2RlIHdhcyB3cml0dGVuIGJ5IFR5bGVyIEFraW5zIGFuZCBoYXMgYmVlbiBwbGFjZWQgaW4gdGhlCi8vIHB1YmxpYyBkb21haW4uICBJdCB3b3VsZCBiZSBuaWNlIGlmIHlvdSBsZWZ0IHRoaXMgaGVhZGVyIGludGFjdC4KLy8gQmFzZTY0IGNvZGUgZnJvbSBUeWxlciBBa2lucyAtLSBodHRwOi8vcnVta2luLmNvbQoKdmFyIEJhc2U2NCA9IChmdW5jdGlvbiAoKSB7CiAgICB2YXIga2V5U3RyID0gIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89IjsKCiAgICB2YXIgb2JqID0gewogICAgICAgIC8qKgogICAgICAgICAqIEVuY29kZXMgYSBzdHJpbmcgaW4gYmFzZTY0CiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgdG8gZW5jb2RlIGluIGJhc2U2NC4KICAgICAgICAgKi8KICAgICAgICBlbmNvZGU6IGZ1bmN0aW9uIChpbnB1dCkgewogICAgICAgICAgICB2YXIgb3V0cHV0ID0gIiI7CiAgICAgICAgICAgIHZhciBjaHIxLCBjaHIyLCBjaHIzOwogICAgICAgICAgICB2YXIgZW5jMSwgZW5jMiwgZW5jMywgZW5jNDsKICAgICAgICAgICAgdmFyIGkgPSAwOwoKICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgY2hyMSA9IGlucHV0LmNoYXJDb2RlQXQoaSsrKTsKICAgICAgICAgICAgICAgIGNocjIgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7CiAgICAgICAgICAgICAgICBjaHIzID0gaW5wdXQuY2hhckNvZGVBdChpKyspOwoKICAgICAgICAgICAgICAgIGVuYzEgPSBjaHIxID4+IDI7CiAgICAgICAgICAgICAgICBlbmMyID0gKChjaHIxICYgMykgPDwgNCkgfCAoY2hyMiA+PiA0KTsKICAgICAgICAgICAgICAgIGVuYzMgPSAoKGNocjIgJiAxNSkgPDwgMikgfCAoY2hyMyA+PiA2KTsKICAgICAgICAgICAgICAgIGVuYzQgPSBjaHIzICYgNjM7CgogICAgICAgICAgICAgICAgaWYgKGlzTmFOKGNocjIpKSB7CiAgICAgICAgICAgICAgICAgICAgZW5jMyA9IGVuYzQgPSA2NDsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOYU4oY2hyMykpIHsKICAgICAgICAgICAgICAgICAgICBlbmM0ID0gNjQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0ICsga2V5U3RyLmNoYXJBdChlbmMxKSArIGtleVN0ci5jaGFyQXQoZW5jMikgKwogICAgICAgICAgICAgICAgICAgIGtleVN0ci5jaGFyQXQoZW5jMykgKyBrZXlTdHIuY2hhckF0KGVuYzQpOwogICAgICAgICAgICB9IHdoaWxlIChpIDwgaW5wdXQubGVuZ3RoKTsKCiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogRGVjb2RlcyBhIGJhc2U2NCBzdHJpbmcuCiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgdG8gZGVjb2RlLgogICAgICAgICAqLwogICAgICAgIGRlY29kZTogZnVuY3Rpb24gKGlucHV0KSB7CiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAiIjsKICAgICAgICAgICAgdmFyIGNocjEsIGNocjIsIGNocjM7CiAgICAgICAgICAgIHZhciBlbmMxLCBlbmMyLCBlbmMzLCBlbmM0OwogICAgICAgICAgICB2YXIgaSA9IDA7CgogICAgICAgICAgICAvLyByZW1vdmUgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IEEtWiwgYS16LCAwLTksICssIC8sIG9yID0KICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9bXkEtWmEtejAtOVwrXC9cPV0vZywgIiIpOwoKICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgZW5jMSA9IGtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTsKICAgICAgICAgICAgICAgIGVuYzIgPSBrZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7CiAgICAgICAgICAgICAgICBlbmMzID0ga2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpOwogICAgICAgICAgICAgICAgZW5jNCA9IGtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTsKCiAgICAgICAgICAgICAgICBjaHIxID0gKGVuYzEgPDwgMikgfCAoZW5jMiA+PiA0KTsKICAgICAgICAgICAgICAgIGNocjIgPSAoKGVuYzIgJiAxNSkgPDwgNCkgfCAoZW5jMyA+PiAyKTsKICAgICAgICAgICAgICAgIGNocjMgPSAoKGVuYzMgJiAzKSA8PCA2KSB8IGVuYzQ7CgogICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0ICsgU3RyaW5nLmZyb21DaGFyQ29kZShjaHIxKTsKCiAgICAgICAgICAgICAgICBpZiAoZW5jMyAhPSA2NCkgewogICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCArIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyMik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZW5jNCAhPSA2NCkgewogICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCArIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyMyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gd2hpbGUgKGkgPCBpbnB1dC5sZW5ndGgpOwoKICAgICAgICAgICAgcmV0dXJuIG91dHB1dDsKICAgICAgICB9CiAgICB9OwoKICAgIHJldHVybiBvYmo7Cn0pKCk7CgovKgogKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWQKICogaW4gRklQUyBQVUIgMTgwLTEKICogVmVyc2lvbiAyLjFhIENvcHlyaWdodCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDAyLgogKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0CiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZQogKiBTZWUgaHR0cDovL3BhamhvbWUub3JnLnVrL2NyeXB0L21kNSBmb3IgZGV0YWlscy4KICovCgovKiBTb21lIGZ1bmN0aW9ucyBhbmQgdmFyaWFibGVzIGhhdmUgYmVlbiBzdHJpcHBlZCBmb3IgdXNlIHdpdGggU3Ryb3BoZSAqLwoKLyoKICogVGhlc2UgYXJlIHRoZSBmdW5jdGlvbnMgeW91J2xsIHVzdWFsbHkgd2FudCB0byBjYWxsCiAqIFRoZXkgdGFrZSBzdHJpbmcgYXJndW1lbnRzIGFuZCByZXR1cm4gZWl0aGVyIGhleCBvciBiYXNlLTY0IGVuY29kZWQgc3RyaW5ncwogKi8KZnVuY3Rpb24gYjY0X3NoYTEocyl7cmV0dXJuIGJpbmIyYjY0KGNvcmVfc2hhMShzdHIyYmluYihzKSxzLmxlbmd0aCAqIDgpKTt9CmZ1bmN0aW9uIHN0cl9zaGExKHMpe3JldHVybiBiaW5iMnN0cihjb3JlX3NoYTEoc3RyMmJpbmIocykscy5sZW5ndGggKiA4KSk7fQpmdW5jdGlvbiBiNjRfaG1hY19zaGExKGtleSwgZGF0YSl7IHJldHVybiBiaW5iMmI2NChjb3JlX2htYWNfc2hhMShrZXksIGRhdGEpKTt9CmZ1bmN0aW9uIHN0cl9obWFjX3NoYTEoa2V5LCBkYXRhKXsgcmV0dXJuIGJpbmIyc3RyKGNvcmVfaG1hY19zaGExKGtleSwgZGF0YSkpO30KCi8qCiAqIENhbGN1bGF0ZSB0aGUgU0hBLTEgb2YgYW4gYXJyYXkgb2YgYmlnLWVuZGlhbiB3b3JkcywgYW5kIGEgYml0IGxlbmd0aAogKi8KZnVuY3Rpb24gY29yZV9zaGExKHgsIGxlbikKewogIC8qIGFwcGVuZCBwYWRkaW5nICovCiAgeFtsZW4gPj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBsZW4gJSAzMik7CiAgeFsoKGxlbiArIDY0ID4+IDkpIDw8IDQpICsgMTVdID0gbGVuOwoKICB2YXIgdyA9IG5ldyBBcnJheSg4MCk7CiAgdmFyIGEgPSAgMTczMjU4NDE5MzsKICB2YXIgYiA9IC0yNzE3MzM4Nzk7CiAgdmFyIGMgPSAtMTczMjU4NDE5NDsKICB2YXIgZCA9ICAyNzE3MzM4Nzg7CiAgdmFyIGUgPSAtMTAwOTU4OTc3NjsKCiAgdmFyIGksIGosIHQsIG9sZGEsIG9sZGIsIG9sZGMsIG9sZGQsIG9sZGU7CiAgZm9yIChpID0gMDsgaSA8IHgubGVuZ3RoOyBpICs9IDE2KQogIHsKICAgIG9sZGEgPSBhOwogICAgb2xkYiA9IGI7CiAgICBvbGRjID0gYzsKICAgIG9sZGQgPSBkOwogICAgb2xkZSA9IGU7CgogICAgZm9yIChqID0gMDsgaiA8IDgwOyBqKyspCiAgICB7CiAgICAgIGlmIChqIDwgMTYpIHsgd1tqXSA9IHhbaSArIGpdOyB9CiAgICAgIGVsc2UgeyB3W2pdID0gcm9sKHdbai0zXSBeIHdbai04XSBeIHdbai0xNF0gXiB3W2otMTZdLCAxKTsgfQogICAgICB0ID0gc2FmZV9hZGQoc2FmZV9hZGQocm9sKGEsIDUpLCBzaGExX2Z0KGosIGIsIGMsIGQpKSwKICAgICAgICAgICAgICAgICAgICAgICBzYWZlX2FkZChzYWZlX2FkZChlLCB3W2pdKSwgc2hhMV9rdChqKSkpOwogICAgICBlID0gZDsKICAgICAgZCA9IGM7CiAgICAgIGMgPSByb2woYiwgMzApOwogICAgICBiID0gYTsKICAgICAgYSA9IHQ7CiAgICB9CgogICAgYSA9IHNhZmVfYWRkKGEsIG9sZGEpOwogICAgYiA9IHNhZmVfYWRkKGIsIG9sZGIpOwogICAgYyA9IHNhZmVfYWRkKGMsIG9sZGMpOwogICAgZCA9IHNhZmVfYWRkKGQsIG9sZGQpOwogICAgZSA9IHNhZmVfYWRkKGUsIG9sZGUpOwogIH0KICByZXR1cm4gW2EsIGIsIGMsIGQsIGVdOwp9CgovKgogKiBQZXJmb3JtIHRoZSBhcHByb3ByaWF0ZSB0cmlwbGV0IGNvbWJpbmF0aW9uIGZ1bmN0aW9uIGZvciB0aGUgY3VycmVudAogKiBpdGVyYXRpb24KICovCmZ1bmN0aW9uIHNoYTFfZnQodCwgYiwgYywgZCkKewogIGlmICh0IDwgMjApIHsgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpOyB9CiAgaWYgKHQgPCA0MCkgeyByZXR1cm4gYiBeIGMgXiBkOyB9CiAgaWYgKHQgPCA2MCkgeyByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpOyB9CiAgcmV0dXJuIGIgXiBjIF4gZDsKfQoKLyoKICogRGV0ZXJtaW5lIHRoZSBhcHByb3ByaWF0ZSBhZGRpdGl2ZSBjb25zdGFudCBmb3IgdGhlIGN1cnJlbnQgaXRlcmF0aW9uCiAqLwpmdW5jdGlvbiBzaGExX2t0KHQpCnsKICByZXR1cm4gKHQgPCAyMCkgPyAgMTUxODUwMDI0OSA6ICh0IDwgNDApID8gIDE4NTk3NzUzOTMgOgogICAgICAgICAodCA8IDYwKSA/IC0xODk0MDA3NTg4IDogLTg5OTQ5NzUxNDsKfQoKLyoKICogQ2FsY3VsYXRlIHRoZSBITUFDLVNIQTEgb2YgYSBrZXkgYW5kIHNvbWUgZGF0YQogKi8KZnVuY3Rpb24gY29yZV9obWFjX3NoYTEoa2V5LCBkYXRhKQp7CiAgdmFyIGJrZXkgPSBzdHIyYmluYihrZXkpOwogIGlmIChia2V5Lmxlbmd0aCA+IDE2KSB7IGJrZXkgPSBjb3JlX3NoYTEoYmtleSwga2V5Lmxlbmd0aCAqIDgpOyB9CgogIHZhciBpcGFkID0gbmV3IEFycmF5KDE2KSwgb3BhZCA9IG5ldyBBcnJheSgxNik7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKQogIHsKICAgIGlwYWRbaV0gPSBia2V5W2ldIF4gMHgzNjM2MzYzNjsKICAgIG9wYWRbaV0gPSBia2V5W2ldIF4gMHg1QzVDNUM1QzsKICB9CgogIHZhciBoYXNoID0gY29yZV9zaGExKGlwYWQuY29uY2F0KHN0cjJiaW5iKGRhdGEpKSwgNTEyICsgZGF0YS5sZW5ndGggKiA4KTsKICByZXR1cm4gY29yZV9zaGExKG9wYWQuY29uY2F0KGhhc2gpLCA1MTIgKyAxNjApOwp9CgovKgogKiBBZGQgaW50ZWdlcnMsIHdyYXBwaW5nIGF0IDJeMzIuIFRoaXMgdXNlcyAxNi1iaXQgb3BlcmF0aW9ucyBpbnRlcm5hbGx5CiAqIHRvIHdvcmsgYXJvdW5kIGJ1Z3MgaW4gc29tZSBKUyBpbnRlcnByZXRlcnMuCiAqLwpmdW5jdGlvbiBzYWZlX2FkZCh4LCB5KQp7CiAgdmFyIGxzdyA9ICh4ICYgMHhGRkZGKSArICh5ICYgMHhGRkZGKTsKICB2YXIgbXN3ID0gKHggPj4gMTYpICsgKHkgPj4gMTYpICsgKGxzdyA+PiAxNik7CiAgcmV0dXJuIChtc3cgPDwgMTYpIHwgKGxzdyAmIDB4RkZGRik7Cn0KCi8qCiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC4KICovCmZ1bmN0aW9uIHJvbChudW0sIGNudCkKewogIHJldHVybiAobnVtIDw8IGNudCkgfCAobnVtID4+PiAoMzIgLSBjbnQpKTsKfQoKLyoKICogQ29udmVydCBhbiA4LWJpdCBvciAxNi1iaXQgc3RyaW5nIHRvIGFuIGFycmF5IG9mIGJpZy1lbmRpYW4gd29yZHMKICogSW4gOC1iaXQgZnVuY3Rpb24sIGNoYXJhY3RlcnMgPjI1NSBoYXZlIHRoZWlyIGhpLWJ5dGUgc2lsZW50bHkgaWdub3JlZC4KICovCmZ1bmN0aW9uIHN0cjJiaW5iKHN0cikKewogIHZhciBiaW4gPSBbXTsKICB2YXIgbWFzayA9IDI1NTsKICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGggKiA4OyBpICs9IDgpCiAgewogICAgYmluW2k+PjVdIHw9IChzdHIuY2hhckNvZGVBdChpIC8gOCkgJiBtYXNrKSA8PCAoMjQgLSBpJTMyKTsKICB9CiAgcmV0dXJuIGJpbjsKfQoKLyoKICogQ29udmVydCBhbiBhcnJheSBvZiBiaWctZW5kaWFuIHdvcmRzIHRvIGEgc3RyaW5nCiAqLwpmdW5jdGlvbiBiaW5iMnN0cihiaW4pCnsKICB2YXIgc3RyID0gIiI7CiAgdmFyIG1hc2sgPSAyNTU7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoICogMzI7IGkgKz0gOCkKICB7CiAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYmluW2k+PjVdID4+PiAoMjQgLSBpJTMyKSkgJiBtYXNrKTsKICB9CiAgcmV0dXJuIHN0cjsKfQoKLyoKICogQ29udmVydCBhbiBhcnJheSBvZiBiaWctZW5kaWFuIHdvcmRzIHRvIGEgYmFzZS02NCBzdHJpbmcKICovCmZ1bmN0aW9uIGJpbmIyYjY0KGJpbmFycmF5KQp7CiAgdmFyIHRhYiA9ICJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvIjsKICB2YXIgc3RyID0gIiI7CiAgdmFyIHRyaXBsZXQsIGo7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW5hcnJheS5sZW5ndGggKiA0OyBpICs9IDMpCiAgewogICAgdHJpcGxldCA9ICgoKGJpbmFycmF5W2kgICA+PiAyXSA+PiA4ICogKDMgLSAgaSAgICU0KSkgJiAweEZGKSA8PCAxNikgfAogICAgICAgICAgICAgICgoKGJpbmFycmF5W2krMSA+PiAyXSA+PiA4ICogKDMgLSAoaSsxKSU0KSkgJiAweEZGKSA8PCA4ICkgfAogICAgICAgICAgICAgICAoKGJpbmFycmF5W2krMiA+PiAyXSA+PiA4ICogKDMgLSAoaSsyKSU0KSkgJiAweEZGKTsKICAgIGZvciAoaiA9IDA7IGogPCA0OyBqKyspCiAgICB7CiAgICAgIGlmIChpICogOCArIGogKiA2ID4gYmluYXJyYXkubGVuZ3RoICogMzIpIHsgc3RyICs9ICI9IjsgfQogICAgICBlbHNlIHsgc3RyICs9IHRhYi5jaGFyQXQoKHRyaXBsZXQgPj4gNiooMy1qKSkgJiAweDNGKTsgfQogICAgfQogIH0KICByZXR1cm4gc3RyOwp9CgovKgogKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFJTQSBEYXRhIFNlY3VyaXR5LCBJbmMuIE1ENSBNZXNzYWdlCiAqIERpZ2VzdCBBbGdvcml0aG0sIGFzIGRlZmluZWQgaW4gUkZDIDEzMjEuCiAqIFZlcnNpb24gMi4xIENvcHlyaWdodCAoQykgUGF1bCBKb2huc3RvbiAxOTk5IC0gMjAwMi4KICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldAogKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2UKICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIG1vcmUgaW5mby4KICovCgovKgogKiBFdmVyeXRoaW5nIHRoYXQgaXNuJ3QgdXNlZCBieSBTdHJvcGhlIGhhcyBiZWVuIHN0cmlwcGVkIGhlcmUhCiAqLwoKdmFyIE1ENSA9IChmdW5jdGlvbiAoKSB7CiAgICAvKgogICAgICogQWRkIGludGVnZXJzLCB3cmFwcGluZyBhdCAyXjMyLiBUaGlzIHVzZXMgMTYtYml0IG9wZXJhdGlvbnMgaW50ZXJuYWxseQogICAgICogdG8gd29yayBhcm91bmQgYnVncyBpbiBzb21lIEpTIGludGVycHJldGVycy4KICAgICAqLwogICAgdmFyIHNhZmVfYWRkID0gZnVuY3Rpb24gKHgsIHkpIHsKICAgICAgICB2YXIgbHN3ID0gKHggJiAweEZGRkYpICsgKHkgJiAweEZGRkYpOwogICAgICAgIHZhciBtc3cgPSAoeCA+PiAxNikgKyAoeSA+PiAxNikgKyAobHN3ID4+IDE2KTsKICAgICAgICByZXR1cm4gKG1zdyA8PCAxNikgfCAobHN3ICYgMHhGRkZGKTsKICAgIH07CgogICAgLyoKICAgICAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC4KICAgICAqLwogICAgdmFyIGJpdF9yb2wgPSBmdW5jdGlvbiAobnVtLCBjbnQpIHsKICAgICAgICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSk7CiAgICB9OwoKICAgIC8qCiAgICAgKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMKICAgICAqLwogICAgdmFyIHN0cjJiaW5sID0gZnVuY3Rpb24gKHN0cikgewogICAgICAgIHZhciBiaW4gPSBbXTsKICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aCAqIDg7IGkgKz0gOCkKICAgICAgICB7CiAgICAgICAgICAgIGJpbltpPj41XSB8PSAoc3RyLmNoYXJDb2RlQXQoaSAvIDgpICYgMjU1KSA8PCAoaSUzMik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBiaW47CiAgICB9OwoKICAgIC8qCiAgICAgKiBDb252ZXJ0IGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMgdG8gYSBzdHJpbmcKICAgICAqLwogICAgdmFyIGJpbmwyc3RyID0gZnVuY3Rpb24gKGJpbikgewogICAgICAgIHZhciBzdHIgPSAiIjsKICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgYmluLmxlbmd0aCAqIDMyOyBpICs9IDgpCiAgICAgICAgewogICAgICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYmluW2k+PjVdID4+PiAoaSAlIDMyKSkgJiAyNTUpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3RyOwogICAgfTsKCiAgICAvKgogICAgICogQ29udmVydCBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzIHRvIGEgaGV4IHN0cmluZy4KICAgICAqLwogICAgdmFyIGJpbmwyaGV4ID0gZnVuY3Rpb24gKGJpbmFycmF5KSB7CiAgICAgICAgdmFyIGhleF90YWIgPSAiMDEyMzQ1Njc4OWFiY2RlZiI7CiAgICAgICAgdmFyIHN0ciA9ICIiOwogICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBiaW5hcnJheS5sZW5ndGggKiA0OyBpKyspCiAgICAgICAgewogICAgICAgICAgICBzdHIgKz0gaGV4X3RhYi5jaGFyQXQoKGJpbmFycmF5W2k+PjJdID4+ICgoaSU0KSo4KzQpKSAmIDB4RikgKwogICAgICAgICAgICAgICAgaGV4X3RhYi5jaGFyQXQoKGJpbmFycmF5W2k+PjJdID4+ICgoaSU0KSo4ICApKSAmIDB4Rik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzdHI7CiAgICB9OwoKICAgIC8qCiAgICAgKiBUaGVzZSBmdW5jdGlvbnMgaW1wbGVtZW50IHRoZSBmb3VyIGJhc2ljIG9wZXJhdGlvbnMgdGhlIGFsZ29yaXRobSB1c2VzLgogICAgICovCiAgICB2YXIgbWQ1X2NtbiA9IGZ1bmN0aW9uIChxLCBhLCBiLCB4LCBzLCB0KSB7CiAgICAgICAgcmV0dXJuIHNhZmVfYWRkKGJpdF9yb2woc2FmZV9hZGQoc2FmZV9hZGQoYSwgcSksc2FmZV9hZGQoeCwgdCkpLCBzKSxiKTsKICAgIH07CgogICAgdmFyIG1kNV9mZiA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7CiAgICAgICAgcmV0dXJuIG1kNV9jbW4oKGIgJiBjKSB8ICgofmIpICYgZCksIGEsIGIsIHgsIHMsIHQpOwogICAgfTsKCiAgICB2YXIgbWQ1X2dnID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHsKICAgICAgICByZXR1cm4gbWQ1X2NtbigoYiAmIGQpIHwgKGMgJiAofmQpKSwgYSwgYiwgeCwgcywgdCk7CiAgICB9OwoKICAgIHZhciBtZDVfaGggPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkgewogICAgICAgIHJldHVybiBtZDVfY21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7CiAgICB9OwoKICAgIHZhciBtZDVfaWkgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkgewogICAgICAgIHJldHVybiBtZDVfY21uKGMgXiAoYiB8ICh+ZCkpLCBhLCBiLCB4LCBzLCB0KTsKICAgIH07CgogICAgLyoKICAgICAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMsIGFuZCBhIGJpdCBsZW5ndGgKICAgICAqLwogICAgdmFyIGNvcmVfbWQ1ID0gZnVuY3Rpb24gKHgsIGxlbikgewogICAgICAgIC8qIGFwcGVuZCBwYWRkaW5nICovCiAgICAgICAgeFtsZW4gPj4gNV0gfD0gMHg4MCA8PCAoKGxlbikgJSAzMik7CiAgICAgICAgeFsoKChsZW4gKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gbGVuOwoKICAgICAgICB2YXIgYSA9ICAxNzMyNTg0MTkzOwogICAgICAgIHZhciBiID0gLTI3MTczMzg3OTsKICAgICAgICB2YXIgYyA9IC0xNzMyNTg0MTk0OwogICAgICAgIHZhciBkID0gIDI3MTczMzg3ODsKCiAgICAgICAgdmFyIG9sZGEsIG9sZGIsIG9sZGMsIG9sZGQ7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNikKICAgICAgICB7CiAgICAgICAgICAgIG9sZGEgPSBhOwogICAgICAgICAgICBvbGRiID0gYjsKICAgICAgICAgICAgb2xkYyA9IGM7CiAgICAgICAgICAgIG9sZGQgPSBkOwoKICAgICAgICAgICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2krIDBdLCA3ICwgLTY4MDg3NjkzNik7CiAgICAgICAgICAgIGQgPSBtZDVfZmYoZCwgYSwgYiwgYywgeFtpKyAxXSwgMTIsIC0zODk1NjQ1ODYpOwogICAgICAgICAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsgMl0sIDE3LCAgNjA2MTA1ODE5KTsKICAgICAgICAgICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krIDNdLCAyMiwgLTEwNDQ1MjUzMzApOwogICAgICAgICAgICBhID0gbWQ1X2ZmKGEsIGIsIGMsIGQsIHhbaSsgNF0sIDcgLCAtMTc2NDE4ODk3KTsKICAgICAgICAgICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krIDVdLCAxMiwgIDEyMDAwODA0MjYpOwogICAgICAgICAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7CiAgICAgICAgICAgIGIgPSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpKyA3XSwgMjIsIC00NTcwNTk4Myk7CiAgICAgICAgICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpKyA4XSwgNyAsICAxNzcwMDM1NDE2KTsKICAgICAgICAgICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krIDldLCAxMiwgLTE5NTg0MTQ0MTcpOwogICAgICAgICAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsxMF0sIDE3LCAtNDIwNjMpOwogICAgICAgICAgICBiID0gbWQ1X2ZmKGIsIGMsIGQsIGEsIHhbaSsxMV0sIDIyLCAtMTk5MDQwNDE2Mik7CiAgICAgICAgICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpKzEyXSwgNyAsICAxODA0NjAzNjgyKTsKICAgICAgICAgICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krMTNdLCAxMiwgLTQwMzQxMTAxKTsKICAgICAgICAgICAgYyA9IG1kNV9mZihjLCBkLCBhLCBiLCB4W2krMTRdLCAxNywgLTE1MDIwMDIyOTApOwogICAgICAgICAgICBiID0gbWQ1X2ZmKGIsIGMsIGQsIGEsIHhbaSsxNV0sIDIyLCAgMTIzNjUzNTMyOSk7CgogICAgICAgICAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSsgMV0sIDUgLCAtMTY1Nzk2NTEwKTsKICAgICAgICAgICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krIDZdLCA5ICwgLTEwNjk1MDE2MzIpOwogICAgICAgICAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSsxMV0sIDE0LCAgNjQzNzE3NzEzKTsKICAgICAgICAgICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krIDBdLCAyMCwgLTM3Mzg5NzMwMik7CiAgICAgICAgICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpKyA1XSwgNSAsIC03MDE1NTg2OTEpOwogICAgICAgICAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsxMF0sIDkgLCAgMzgwMTYwODMpOwogICAgICAgICAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSsxNV0sIDE0LCAtNjYwNDc4MzM1KTsKICAgICAgICAgICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krIDRdLCAyMCwgLTQwNTUzNzg0OCk7CiAgICAgICAgICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpKyA5XSwgNSAsICA1Njg0NDY0MzgpOwogICAgICAgICAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsxNF0sIDkgLCAtMTAxOTgwMzY5MCk7CiAgICAgICAgICAgIGMgPSBtZDVfZ2coYywgZCwgYSwgYiwgeFtpKyAzXSwgMTQsIC0xODczNjM5NjEpOwogICAgICAgICAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSsgOF0sIDIwLCAgMTE2MzUzMTUwMSk7CiAgICAgICAgICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpKzEzXSwgNSAsIC0xNDQ0NjgxNDY3KTsKICAgICAgICAgICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krIDJdLCA5ICwgLTUxNDAzNzg0KTsKICAgICAgICAgICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krIDddLCAxNCwgIDE3MzUzMjg0NzMpOwogICAgICAgICAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSsxMl0sIDIwLCAtMTkyNjYwNzczNCk7CgogICAgICAgICAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSsgNV0sIDQgLCAtMzc4NTU4KTsKICAgICAgICAgICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krIDhdLCAxMSwgLTIwMjI1NzQ0NjMpOwogICAgICAgICAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSsxMV0sIDE2LCAgMTgzOTAzMDU2Mik7CiAgICAgICAgICAgIGIgPSBtZDVfaGgoYiwgYywgZCwgYSwgeFtpKzE0XSwgMjMsIC0zNTMwOTU1Nik7CiAgICAgICAgICAgIGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKyAxXSwgNCAsIC0xNTMwOTkyMDYwKTsKICAgICAgICAgICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krIDRdLCAxMSwgIDEyNzI4OTMzNTMpOwogICAgICAgICAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSsgN10sIDE2LCAtMTU1NDk3NjMyKTsKICAgICAgICAgICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krMTBdLCAyMywgLTEwOTQ3MzA2NDApOwogICAgICAgICAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSsxM10sIDQgLCAgNjgxMjc5MTc0KTsKICAgICAgICAgICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krIDBdLCAxMSwgLTM1ODUzNzIyMik7CiAgICAgICAgICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpKyAzXSwgMTYsIC03MjI1MjE5NzkpOwogICAgICAgICAgICBiID0gbWQ1X2hoKGIsIGMsIGQsIGEsIHhbaSsgNl0sIDIzLCAgNzYwMjkxODkpOwogICAgICAgICAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSsgOV0sIDQgLCAtNjQwMzY0NDg3KTsKICAgICAgICAgICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krMTJdLCAxMSwgLTQyMTgxNTgzNSk7CiAgICAgICAgICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpKzE1XSwgMTYsICA1MzA3NDI1MjApOwogICAgICAgICAgICBiID0gbWQ1X2hoKGIsIGMsIGQsIGEsIHhbaSsgMl0sIDIzLCAtOTk1MzM4NjUxKTsKCiAgICAgICAgICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpKyAwXSwgNiAsIC0xOTg2MzA4NDQpOwogICAgICAgICAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSsgN10sIDEwLCAgMTEyNjg5MTQxNSk7CiAgICAgICAgICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKzE0XSwgMTUsIC0xNDE2MzU0OTA1KTsKICAgICAgICAgICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDVdLCAyMSwgLTU3NDM0MDU1KTsKICAgICAgICAgICAgYSA9IG1kNV9paShhLCBiLCBjLCBkLCB4W2krMTJdLCA2ICwgIDE3MDA0ODU1NzEpOwogICAgICAgICAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSsgM10sIDEwLCAtMTg5NDk4NjYwNik7CiAgICAgICAgICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKzEwXSwgMTUsIC0xMDUxNTIzKTsKICAgICAgICAgICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDFdLCAyMSwgLTIwNTQ5MjI3OTkpOwogICAgICAgICAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSsgOF0sIDYgLCAgMTg3MzMxMzM1OSk7CiAgICAgICAgICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKzE1XSwgMTAsIC0zMDYxMTc0NCk7CiAgICAgICAgICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKyA2XSwgMTUsIC0xNTYwMTk4MzgwKTsKICAgICAgICAgICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krMTNdLCAyMSwgIDEzMDkxNTE2NDkpOwogICAgICAgICAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSsgNF0sIDYgLCAtMTQ1NTIzMDcwKTsKICAgICAgICAgICAgZCA9IG1kNV9paShkLCBhLCBiLCBjLCB4W2krMTFdLCAxMCwgLTExMjAyMTAzNzkpOwogICAgICAgICAgICBjID0gbWQ1X2lpKGMsIGQsIGEsIGIsIHhbaSsgMl0sIDE1LCAgNzE4Nzg3MjU5KTsKICAgICAgICAgICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDldLCAyMSwgLTM0MzQ4NTU1MSk7CgogICAgICAgICAgICBhID0gc2FmZV9hZGQoYSwgb2xkYSk7CiAgICAgICAgICAgIGIgPSBzYWZlX2FkZChiLCBvbGRiKTsKICAgICAgICAgICAgYyA9IHNhZmVfYWRkKGMsIG9sZGMpOwogICAgICAgICAgICBkID0gc2FmZV9hZGQoZCwgb2xkZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBbYSwgYiwgYywgZF07CiAgICB9OwoKCiAgICB2YXIgb2JqID0gewogICAgICAgIC8qCiAgICAgICAgICogVGhlc2UgYXJlIHRoZSBmdW5jdGlvbnMgeW91J2xsIHVzdWFsbHkgd2FudCB0byBjYWxsLgogICAgICAgICAqIFRoZXkgdGFrZSBzdHJpbmcgYXJndW1lbnRzIGFuZCByZXR1cm4gZWl0aGVyIGhleCBvciBiYXNlLTY0IGVuY29kZWQKICAgICAgICAgKiBzdHJpbmdzLgogICAgICAgICAqLwogICAgICAgIGhleGRpZ2VzdDogZnVuY3Rpb24gKHMpIHsKICAgICAgICAgICAgcmV0dXJuIGJpbmwyaGV4KGNvcmVfbWQ1KHN0cjJiaW5sKHMpLCBzLmxlbmd0aCAqIDgpKTsKICAgICAgICB9LAoKICAgICAgICBoYXNoOiBmdW5jdGlvbiAocykgewogICAgICAgICAgICByZXR1cm4gYmlubDJzdHIoY29yZV9tZDUoc3RyMmJpbmwocyksIHMubGVuZ3RoICogOCkpOwogICAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIG9iajsKfSkoKTsKCi8qCiAgICBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZS4KICAgIFBsZWFzZSBzZWUgdGhlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy4KCiAgICBDb3B5cmlnaHQgMjAwNi0yMDA4LCBPR0csIExMQwoqLwoKLyoganNoaW50IHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWU6LCBub2FyZzogdHJ1ZSwgbGF0ZWRlZjogdHJ1ZSAqLwovKmdsb2JhbCBkb2N1bWVudCwgd2luZG93LCBzZXRUaW1lb3V0LCBjbGVhclRpbWVvdXQsIGNvbnNvbGUsCiAgICBBY3RpdmVYT2JqZWN0LCBCYXNlNjQsIE1ENSwgRE9NUGFyc2VyICovCi8vIGZyb20gc2hhMS5qcwovKmdsb2JhbCBjb3JlX2htYWNfc2hhMSwgYmluYjJzdHIsIHN0cl9obWFjX3NoYTEsIHN0cl9zaGExLCBiNjRfaG1hY19zaGExKi8KCi8qKiBGaWxlOiBzdHJvcGhlLmpzCiAqICBBIEphdmFTY3JpcHQgbGlicmFyeSBmb3IgWE1QUCBCT1NIL1hNUFAgb3ZlciBXZWJzb2NrZXQuCiAqCiAqICBUaGlzIGlzIHRoZSBKYXZhU2NyaXB0IHZlcnNpb24gb2YgdGhlIFN0cm9waGUgbGlicmFyeS4gIFNpbmNlIEphdmFTY3JpcHQKICogIGhhZCBubyBmYWNpbGl0aWVzIGZvciBwZXJzaXN0ZW50IFRDUCBjb25uZWN0aW9ucywgdGhpcyBsaWJyYXJ5IHVzZXMKICogIEJpZGlyZWN0aW9uYWwtc3RyZWFtcyBPdmVyIFN5bmNocm9ub3VzIEhUVFAgKEJPU0gpIHRvIGVtdWxhdGUKICogIGEgcGVyc2lzdGVudCwgc3RhdGVmdWwsIHR3by13YXkgY29ubmVjdGlvbiB0byBhbiBYTVBQIHNlcnZlci4gIE1vcmUKICogIGluZm9ybWF0aW9uIG9uIEJPU0ggY2FuIGJlIGZvdW5kIGluIFhFUCAxMjQuCiAqCiAqICBUaGlzIHZlcnNpb24gb2YgU3Ryb3BoZSBhbHNvIHdvcmtzIHdpdGggV2ViU29ja2V0cy4KICogIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIFhNUFAtb3ZlciBXZWJTb2NrZXQgc2VlIHRoaXMgUkZDIGRyYWZ0OgogKiAgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtaWV0Zi14bXBwLXdlYnNvY2tldC0wMAogKi8KCi8qKiBQcml2YXRlRnVuY3Rpb246IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kCiAqICBCaW5kIGEgZnVuY3Rpb24gdG8gYW4gaW5zdGFuY2UuCiAqCiAqICBUaGlzIEZ1bmN0aW9uIG9iamVjdCBleHRlbnNpb24gbWV0aG9kIGNyZWF0ZXMgYSBib3VuZCBtZXRob2Qgc2ltaWxhcgogKiAgdG8gdGhvc2UgaW4gUHl0aG9uLiAgVGhpcyBtZWFucyB0aGF0IHRoZSAndGhpcycgb2JqZWN0IHdpbGwgcG9pbnQKICogIHRvIHRoZSBpbnN0YW5jZSB5b3Ugd2FudC4gIFNlZQogKiAgPGEgaHJlZj0naHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYmluZCc+TURDJ3MgYmluZCgpIGRvY3VtZW50YXRpb248L2E+IGFuZAogKiAgPGEgaHJlZj0naHR0cDovL2JlbmphbWluLnNtZWRiZXJncy51cy9ibG9nLzIwMDctMDEtMDMvYm91bmQtZnVuY3Rpb25zLWFuZC1mdW5jdGlvbi1pbXBvcnRzLWluLWphdmFzY3JpcHQvJz5Cb3VuZCBGdW5jdGlvbnMgYW5kIEZ1bmN0aW9uIEltcG9ydHMgaW4gSmF2YVNjcmlwdDwvYT4KICogIGZvciBhIGNvbXBsZXRlIGV4cGxhbmF0aW9uLgogKgogKiAgVGhpcyBleHRlbnNpb24gYWxyZWFkeSBleGlzdHMgaW4gc29tZSBicm93c2VycyAobmFtZWx5LCBGaXJlZm94IDMpLCBidXQKICogIHdlIHByb3ZpZGUgaXQgdG8gc3VwcG9ydCB0aG9zZSB0aGF0IGRvbid0LgogKgogKiAgUGFyYW1ldGVyczoKICogICAgKE9iamVjdCkgb2JqIC0gVGhlIG9iamVjdCB0aGF0IHdpbGwgYmVjb21lICd0aGlzJyBpbiB0aGUgYm91bmQgZnVuY3Rpb24uCiAqICAgIChPYmplY3QpIGFyZ04gLSBBbiBvcHRpb24gYXJndW1lbnQgdGhhdCB3aWxsIGJlIHByZXBlbmRlZCB0byB0aGUKICogICAgICBhcmd1bWVudHMgZ2l2ZW4gZm9yIHRoZSBmdW5jdGlvbiBjYWxsCiAqCiAqICBSZXR1cm5zOgogKiAgICBUaGUgYm91bmQgZnVuY3Rpb24uCiAqLwppZiAoIUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKSB7CiAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChvYmogLyosIGFyZzEsIGFyZzIsIC4uLiAqLykKICAgIHsKICAgICAgICB2YXIgZnVuYyA9IHRoaXM7CiAgICAgICAgdmFyIF9zbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTsKICAgICAgICB2YXIgX2NvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7CiAgICAgICAgdmFyIF9hcmdzID0gX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqID8gb2JqIDogdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbmNhdC5jYWxsKF9hcmdzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSkpOwogICAgICAgIH07CiAgICB9Owp9CgovKiogUHJpdmF0ZUZ1bmN0aW9uOiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZgogKiAgUmV0dXJuIHRoZSBpbmRleCBvZiBhbiBvYmplY3QgaW4gYW4gYXJyYXkuCiAqCiAqICBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBzdXBwbGllZCBieSBzb21lIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb25zLCBzbwogKiAgd2UgcHJvdmlkZSBpdCBpZiBpdCBpcyBtaXNzaW5nLiAgVGhpcyBjb2RlIGlzIGZyb206CiAqICBodHRwOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL0VuL0NvcmVfSmF2YVNjcmlwdF8xLjVfUmVmZXJlbmNlOk9iamVjdHM6QXJyYXk6aW5kZXhPZgogKgogKiAgUGFyYW1ldGVyczoKICogICAgKE9iamVjdCkgZWx0IC0gVGhlIG9iamVjdCB0byBsb29rIGZvci4KICogICAgKEludGVnZXIpIGZyb20gLSBUaGUgaW5kZXggZnJvbSB3aGljaCB0byBzdGFydCBsb29raW5nLiAob3B0aW9uYWwpLgogKgogKiAgUmV0dXJuczoKICogICAgVGhlIGluZGV4IG9mIGVsdCBpbiB0aGUgYXJyYXkgb3IgLTEgaWYgbm90IGZvdW5kLgogKi8KaWYgKCFBcnJheS5wcm90b3R5cGUuaW5kZXhPZikKewogICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbihlbHQgLyosIGZyb20qLykKICAgIHsKICAgICAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7CgogICAgICAgIHZhciBmcm9tID0gTnVtYmVyKGFyZ3VtZW50c1sxXSkgfHwgMDsKICAgICAgICBmcm9tID0gKGZyb20gPCAwKSA/IE1hdGguY2VpbChmcm9tKSA6IE1hdGguZmxvb3IoZnJvbSk7CiAgICAgICAgaWYgKGZyb20gPCAwKSB7CiAgICAgICAgICAgIGZyb20gKz0gbGVuOwogICAgICAgIH0KCiAgICAgICAgZm9yICg7IGZyb20gPCBsZW47IGZyb20rKykgewogICAgICAgICAgICBpZiAoZnJvbSBpbiB0aGlzICYmIHRoaXNbZnJvbV0gPT09IGVsdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZyb207CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiAtMTsKICAgIH07Cn0KCi8qIEFsbCBvZiB0aGUgU3Ryb3BoZSBnbG9iYWxzIGFyZSBkZWZpbmVkIGluIHRoaXMgc3BlY2lhbCBmdW5jdGlvbiBiZWxvdyBzbwogKiB0aGF0IHJlZmVyZW5jZXMgdG8gdGhlIGdsb2JhbHMgYmVjb21lIGNsb3N1cmVzLiAgVGhpcyB3aWxsIGVuc3VyZSB0aGF0CiAqIG9uIHBhZ2UgcmVsb2FkLCB0aGVzZSByZWZlcmVuY2VzIHdpbGwgc3RpbGwgYmUgYXZhaWxhYmxlIHRvIGNhbGxiYWNrcwogKiB0aGF0IGFyZSBzdGlsbCBleGVjdXRpbmcuCiAqLwoKKGZ1bmN0aW9uIChjYWxsYmFjaykgewp2YXIgU3Ryb3BoZTsKCi8qKiBGdW5jdGlvbjogJGJ1aWxkCiAqICBDcmVhdGUgYSBTdHJvcGhlLkJ1aWxkZXIuCiAqICBUaGlzIGlzIGFuIGFsaWFzIGZvciAnbmV3IFN0cm9waGUuQnVpbGRlcihuYW1lLCBhdHRycyknLgogKgogKiAgUGFyYW1ldGVyczoKICogICAgKFN0cmluZykgbmFtZSAtIFRoZSByb290IGVsZW1lbnQgbmFtZS4KICogICAgKE9iamVjdCkgYXR0cnMgLSBUaGUgYXR0cmlidXRlcyBmb3IgdGhlIHJvb3QgZWxlbWVudCBpbiBvYmplY3Qgbm90YXRpb24uCiAqCiAqICBSZXR1cm5zOgogKiAgICBBIG5ldyBTdHJvcGhlLkJ1aWxkZXIgb2JqZWN0LgogKi8KZnVuY3Rpb24gJGJ1aWxkKG5hbWUsIGF0dHJzKSB7IHJldHVybiBuZXcgU3Ryb3BoZS5CdWlsZGVyKG5hbWUsIGF0dHJzKTsgfQovKiogRnVuY3Rpb246ICRtc2cKICogIENyZWF0ZSBhIFN0cm9waGUuQnVpbGRlciB3aXRoIGEgPG1lc3NhZ2UvPiBlbGVtZW50IGFzIHRoZSByb290LgogKgogKiAgUGFybWFldGVyczoKICogICAgKE9iamVjdCkgYXR0cnMgLSBUaGUgPG1lc3NhZ2UvPiBlbGVtZW50IGF0dHJpYnV0ZXMgaW4gb2JqZWN0IG5vdGF0aW9uLgogKgogKiAgUmV0dXJuczoKICogICAgQSBuZXcgU3Ryb3BoZS5CdWlsZGVyIG9iamVjdC4KICovCmZ1bmN0aW9uICRtc2coYXR0cnMpIHsgcmV0dXJuIG5ldyBTdHJvcGhlLkJ1aWxkZXIoIm1lc3NhZ2UiLCBhdHRycyk7IH0KLyoqIEZ1bmN0aW9uOiAkaXEKICogIENyZWF0ZSBhIFN0cm9waGUuQnVpbGRlciB3aXRoIGFuIDxpcS8+IGVsZW1lbnQgYXMgdGhlIHJvb3QuCiAqCiAqICBQYXJhbWV0ZXJzOgogKiAgICAoT2JqZWN0KSBhdHRycyAtIFRoZSA8aXEvPiBlbGVtZW50IGF0dHJpYnV0ZXMgaW4gb2JqZWN0IG5vdGF0aW9uLgogKgogKiAgUmV0dXJuczoKICogICAgQSBuZXcgU3Ryb3BoZS5CdWlsZGVyIG9iamVjdC4KICovCmZ1bmN0aW9uICRpcShhdHRycykgeyByZXR1cm4gbmV3IFN0cm9waGUuQnVpbGRlcigiaXEiLCBhdHRycyk7IH0KLyoqIEZ1bmN0aW9uOiAkcHJlcwogKiAgQ3JlYXRlIGEgU3Ryb3BoZS5CdWlsZGVyIHdpdGggYSA8cHJlc2VuY2UvPiBlbGVtZW50IGFzIHRoZSByb290LgogKgogKiAgUGFyYW1ldGVyczoKICogICAgKE9iamVjdCkgYXR0cnMgLSBUaGUgPHByZXNlbmNlLz4gZWxlbWVudCBhdHRyaWJ1dGVzIGluIG9iamVjdCBub3RhdGlvbi4KICoKICogIFJldHVybnM6CiAqICAgIEEgbmV3IFN0cm9waGUuQnVpbGRlciBvYmplY3QuCiAqLwpmdW5jdGlvbiAkcHJlcyhhdHRycykgeyByZXR1cm4gbmV3IFN0cm9waGUuQnVpbGRlcigicHJlc2VuY2UiLCBhdHRycyk7IH0KCi8qKiBDbGFzczogU3Ryb3BoZQogKiAgQW4gb2JqZWN0IGNvbnRhaW5lciBmb3IgYWxsIFN0cm9waGUgbGlicmFyeSBmdW5jdGlvbnMuCiAqCiAqICBUaGlzIGNsYXNzIGlzIGp1c3QgYSBjb250YWluZXIgZm9yIGFsbCB0aGUgb2JqZWN0cyBhbmQgY29uc3RhbnRzCiAqICB1c2VkIGluIHRoZSBsaWJyYXJ5LiAgSXQgaXMgbm90IG1lYW50IHRvIGJlIGluc3RhbnRpYXRlZCwgYnV0IHRvCiAqICBwcm92aWRlIGEgbmFtZXNwYWNlIGZvciBsaWJyYXJ5IG9iamVjdHMsIGNvbnN0YW50cywgYW5kIGZ1bmN0aW9ucy4KICovClN0cm9waGUgPSB7CiAgICAvKiogQ29uc3RhbnQ6IFZFUlNJT04KICAgICAqICBUaGUgdmVyc2lvbiBvZiB0aGUgU3Ryb3BoZSBsaWJyYXJ5LiBVbnJlbGVhc2VkIGJ1aWxkcyB3aWxsIGhhdmUKICAgICAqICBhIHZlcnNpb24gb2YgaGVhZC1IQVNIIHdoZXJlIEhBU0ggaXMgYSBwYXJ0aWFsIHJldmlzaW9uLgogICAgICovCiAgICBWRVJTSU9OOiAiMS4xLjMiLAoKICAgIC8qKiBDb25zdGFudHM6IFhNUFAgTmFtZXNwYWNlIENvbnN0YW50cwogICAgICogIENvbW1vbiBuYW1lc3BhY2UgY29uc3RhbnRzIGZyb20gdGhlIFhNUFAgUkZDcyBhbmQgWEVQcy4KICAgICAqCiAgICAgKiAgTlMuSFRUUEJJTkQgLSBIVFRQIEJJTkQgbmFtZXNwYWNlIGZyb20gWEVQIDEyNC4KICAgICAqICBOUy5CT1NIIC0gQk9TSCBuYW1lc3BhY2UgZnJvbSBYRVAgMjA2LgogICAgICogIE5TLkNMSUVOVCAtIE1haW4gWE1QUCBjbGllbnQgbmFtZXNwYWNlLgogICAgICogIE5TLkFVVEggLSBMZWdhY3kgYXV0aGVudGljYXRpb24gbmFtZXNwYWNlLgogICAgICogIE5TLlJPU1RFUiAtIFJvc3RlciBvcGVyYXRpb25zIG5hbWVzcGFjZS4KICAgICAqICBOUy5QUk9GSUxFIC0gUHJvZmlsZSBuYW1lc3BhY2UuCiAgICAgKiAgTlMuRElTQ09fSU5GTyAtIFNlcnZpY2UgZGlzY292ZXJ5IGluZm8gbmFtZXNwYWNlIGZyb20gWEVQIDMwLgogICAgICogIE5TLkRJU0NPX0lURU1TIC0gU2VydmljZSBkaXNjb3ZlcnkgaXRlbXMgbmFtZXNwYWNlIGZyb20gWEVQIDMwLgogICAgICogIE5TLk1VQyAtIE11bHRpLVVzZXIgQ2hhdCBuYW1lc3BhY2UgZnJvbSBYRVAgNDUuCiAgICAgKiAgTlMuU0FTTCAtIFhNUFAgU0FTTCBuYW1lc3BhY2UgZnJvbSBSRkMgMzkyMC4KICAgICAqICBOUy5TVFJFQU0gLSBYTVBQIFN0cmVhbXMgbmFtZXNwYWNlIGZyb20gUkZDIDM5MjAuCiAgICAgKiAgTlMuQklORCAtIFhNUFAgQmluZGluZyBuYW1lc3BhY2UgZnJvbSBSRkMgMzkyMC4KICAgICAqICBOUy5TRVNTSU9OIC0gWE1QUCBTZXNzaW9uIG5hbWVzcGFjZSBmcm9tIFJGQyAzOTIwLgogICAgICogIE5TLlhIVE1MX0lNIC0gWEhUTUwtSU0gbmFtZXNwYWNlIGZyb20gWEVQIDcxLgogICAgICogIE5TLlhIVE1MIC0gWEhUTUwgYm9keSBuYW1lc3BhY2UgZnJvbSBYRVAgNzEuCiAgICAgKi8KICAgIE5TOiB7CiAgICAgICAgSFRUUEJJTkQ6ICJodHRwOi8vamFiYmVyLm9yZy9wcm90b2NvbC9odHRwYmluZCIsCiAgICAgICAgQk9TSDogInVybjp4bXBwOnhib3NoIiwKICAgICAgICBDTElFTlQ6ICJqYWJiZXI6Y2xpZW50IiwKICAgICAgICBBVVRIOiAiamFiYmVyOmlxOmF1dGgiLAogICAgICAgIFJPU1RFUjogImphYmJlcjppcTpyb3N0ZXIiLAogICAgICAgIFBST0ZJTEU6ICJqYWJiZXI6aXE6cHJvZmlsZSIsCiAgICAgICAgRElTQ09fSU5GTzogImh0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL2Rpc2NvI2luZm8iLAogICAgICAgIERJU0NPX0lURU1TOiAiaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvZGlzY28jaXRlbXMiLAogICAgICAgIE1VQzogImh0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL211YyIsCiAgICAgICAgU0FTTDogInVybjppZXRmOnBhcmFtczp4bWw6bnM6eG1wcC1zYXNsIiwKICAgICAgICBTVFJFQU06ICJodHRwOi8vZXRoZXJ4LmphYmJlci5vcmcvc3RyZWFtcyIsCiAgICAgICAgQklORDogInVybjppZXRmOnBhcmFtczp4bWw6bnM6eG1wcC1iaW5kIiwKICAgICAgICBTRVNTSU9OOiAidXJuOmlldGY6cGFyYW1zOnhtbDpuczp4bXBwLXNlc3Npb24iLAogICAgICAgIFZFUlNJT046ICJqYWJiZXI6aXE6dmVyc2lvbiIsCiAgICAgICAgU1RBTlpBUzogInVybjppZXRmOnBhcmFtczp4bWw6bnM6eG1wcC1zdGFuemFzIiwKICAgICAgICBYSFRNTF9JTTogImh0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL3hodG1sLWltIiwKICAgICAgICBYSFRNTDogImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiCiAgICB9LAoKCiAgICAvKiogQ29uc3RhbnRzOiBYSFRNTF9JTSBOYW1lc3BhY2UKICAgICAqICBjb250YWlucyBhbGxvd2VkIHRhZ3MsIHRhZyBhdHRyaWJ1dGVzLCBhbmQgY3NzIHByb3BlcnRpZXMuCiAgICAgKiAgVXNlZCBpbiB0aGUgY3JlYXRlSHRtbCBmdW5jdGlvbiB0byBmaWx0ZXIgaW5jb21pbmcgaHRtbCBpbnRvIHRoZSBhbGxvd2VkIFhIVE1MLUlNIHN1YnNldC4KICAgICAqICBTZWUgaHR0cDovL3htcHAub3JnL2V4dGVuc2lvbnMveGVwLTAwNzEuaHRtbCNwcm9maWxlLXN1bW1hcnkgZm9yIHRoZSBsaXN0IG9mIHJlY29tbWVuZGVkCiAgICAgKiAgYWxsb3dlZCB0YWdzIGFuZCB0aGVpciBhdHRyaWJ1dGVzLgogICAgICovCiAgICBYSFRNTDogewogICAgICAgICAgICAgICAgdGFnczogWydhJywnYmxvY2txdW90ZScsJ2JyJywnY2l0ZScsJ2VtJywnaW1nJywnbGknLCdvbCcsJ3AnLCdzcGFuJywnc3Ryb25nJywndWwnLCdib2R5J10sCiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICdhJzogICAgICAgICAgWydocmVmJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICdibG9ja3F1b3RlJzogWydzdHlsZSddLAogICAgICAgICAgICAgICAgICAgICAgICAnYnInOiAgICAgICAgIFtdLAogICAgICAgICAgICAgICAgICAgICAgICAnY2l0ZSc6ICAgICAgIFsnc3R5bGUnXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2VtJzogICAgICAgICBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2ltZyc6ICAgICAgICBbJ3NyYycsICdhbHQnLCAnc3R5bGUnLCAnaGVpZ2h0JywgJ3dpZHRoJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICdsaSc6ICAgICAgICAgWydzdHlsZSddLAogICAgICAgICAgICAgICAgICAgICAgICAnb2wnOiAgICAgICAgIFsnc3R5bGUnXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ3AnOiAgICAgICAgICBbJ3N0eWxlJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJzogICAgICAgWydzdHlsZSddLAogICAgICAgICAgICAgICAgICAgICAgICAnc3Ryb25nJzogICAgIFtdLAogICAgICAgICAgICAgICAgICAgICAgICAndWwnOiAgICAgICAgIFsnc3R5bGUnXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2JvZHknOiAgICAgICBbXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNzczogWydiYWNrZ3JvdW5kLWNvbG9yJywnY29sb3InLCdmb250LWZhbWlseScsJ2ZvbnQtc2l6ZScsJ2ZvbnQtc3R5bGUnLCdmb250LXdlaWdodCcsJ21hcmdpbi1sZWZ0JywnbWFyZ2luLXJpZ2h0JywndGV4dC1hbGlnbicsJ3RleHQtZGVjb3JhdGlvbiddLAogICAgICAgICAgICAgICAgdmFsaWRUYWc6IGZ1bmN0aW9uKHRhZykKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IFN0cm9waGUuWEhUTUwudGFncy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRhZyA9PSBTdHJvcGhlLlhIVE1MLnRhZ3NbaV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdmFsaWRBdHRyaWJ1dGU6IGZ1bmN0aW9uKHRhZywgYXR0cmlidXRlKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgU3Ryb3BoZS5YSFRNTC5hdHRyaWJ1dGVzW3RhZ10gIT09ICd1bmRlZmluZWQnICYmIFN0cm9waGUuWEhUTUwuYXR0cmlidXRlc1t0YWddLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgU3Ryb3BoZS5YSFRNTC5hdHRyaWJ1dGVzW3RhZ10ubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGF0dHJpYnV0ZSA9PSBTdHJvcGhlLlhIVE1MLmF0dHJpYnV0ZXNbdGFnXVtpXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHZhbGlkQ1NTOiBmdW5jdGlvbihzdHlsZSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IFN0cm9waGUuWEhUTUwuY3NzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3R5bGUgPT0gU3Ryb3BoZS5YSFRNTC5jc3NbaV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICB9LAoKICAgIC8qKiBDb25zdGFudHM6IENvbm5lY3Rpb24gU3RhdHVzIENvbnN0YW50cwogICAgICogIENvbm5lY3Rpb24gc3RhdHVzIGNvbnN0YW50cyBmb3IgdXNlIGJ5IHRoZSBjb25uZWN0aW9uIGhhbmRsZXIKICAgICAqICBjYWxsYmFjay4KICAgICAqCiAgICAgKiAgU3RhdHVzLkVSUk9SIC0gQW4gZXJyb3IgaGFzIG9jY3VycmVkCiAgICAgKiAgU3RhdHVzLkNPTk5FQ1RJTkcgLSBUaGUgY29ubmVjdGlvbiBpcyBjdXJyZW50bHkgYmVpbmcgbWFkZQogICAgICogIFN0YXR1cy5DT05ORkFJTCAtIFRoZSBjb25uZWN0aW9uIGF0dGVtcHQgZmFpbGVkCiAgICAgKiAgU3RhdHVzLkFVVEhFTlRJQ0FUSU5HIC0gVGhlIGNvbm5lY3Rpb24gaXMgYXV0aGVudGljYXRpbmcKICAgICAqICBTdGF0dXMuQVVUSEZBSUwgLSBUaGUgYXV0aGVudGljYXRpb24gYXR0ZW1wdCBmYWlsZWQKICAgICAqICBTdGF0dXMuQ09OTkVDVEVEIC0gVGhlIGNvbm5lY3Rpb24gaGFzIHN1Y2NlZWRlZAogICAgICogIFN0YXR1cy5ESVNDT05ORUNURUQgLSBUaGUgY29ubmVjdGlvbiBoYXMgYmVlbiB0ZXJtaW5hdGVkCiAgICAgKiAgU3RhdHVzLkRJU0NPTk5FQ1RJTkcgLSBUaGUgY29ubmVjdGlvbiBpcyBjdXJyZW50bHkgYmVpbmcgdGVybWluYXRlZAogICAgICogIFN0YXR1cy5BVFRBQ0hFRCAtIFRoZSBjb25uZWN0aW9uIGhhcyBiZWVuIGF0dGFjaGVkCiAgICAgKi8KICAgIFN0YXR1czogewogICAgICAgIEVSUk9SOiAwLAogICAgICAgIENPTk5FQ1RJTkc6IDEsCiAgICAgICAgQ09OTkZBSUw6IDIsCiAgICAgICAgQVVUSEVOVElDQVRJTkc6IDMsCiAgICAgICAgQVVUSEZBSUw6IDQsCiAgICAgICAgQ09OTkVDVEVEOiA1LAogICAgICAgIERJU0NPTk5FQ1RFRDogNiwKICAgICAgICBESVNDT05ORUNUSU5HOiA3LAogICAgICAgIEFUVEFDSEVEOiA4CiAgICB9LAoKICAgIC8qKiBDb25zdGFudHM6IExvZyBMZXZlbCBDb25zdGFudHMKICAgICAqICBMb2dnaW5nIGxldmVsIGluZGljYXRvcnMuCiAgICAgKgogICAgICogIExvZ0xldmVsLkRFQlVHIC0gRGVidWcgb3V0cHV0CiAgICAgKiAgTG9nTGV2ZWwuSU5GTyAtIEluZm9ybWF0aW9uYWwgb3V0cHV0CiAgICAgKiAgTG9nTGV2ZWwuV0FSTiAtIFdhcm5pbmdzCiAgICAgKiAgTG9nTGV2ZWwuRVJST1IgLSBFcnJvcnMKICAgICAqICBMb2dMZXZlbC5GQVRBTCAtIEZhdGFsIGVycm9ycwogICAgICovCiAgICBMb2dMZXZlbDogewogICAgICAgIERFQlVHOiAwLAogICAgICAgIElORk86IDEsCiAgICAgICAgV0FSTjogMiwKICAgICAgICBFUlJPUjogMywKICAgICAgICBGQVRBTDogNAogICAgfSwKCiAgICAvKiogUHJpdmF0ZUNvbnN0YW50czogRE9NIEVsZW1lbnQgVHlwZSBDb25zdGFudHMKICAgICAqICBET00gZWxlbWVudCB0eXBlcy4KICAgICAqCiAgICAgKiAgRWxlbWVudFR5cGUuTk9STUFMIC0gTm9ybWFsIGVsZW1lbnQuCiAgICAgKiAgRWxlbWVudFR5cGUuVEVYVCAtIFRleHQgZGF0YSBlbGVtZW50LgogICAgICogIEVsZW1lbnRUeXBlLkZSQUdNRU5UIC0gWEhUTUwgZnJhZ21lbnQgZWxlbWVudC4KICAgICAqLwogICAgRWxlbWVudFR5cGU6IHsKICAgICAgICBOT1JNQUw6IDEsCiAgICAgICAgVEVYVDogMywKICAgICAgICBDREFUQTogNCwKICAgICAgICBGUkFHTUVOVDogMTEKICAgIH0sCgogICAgLyoqIFByaXZhdGVDb25zdGFudHM6IFRpbWVvdXQgVmFsdWVzCiAgICAgKiAgVGltZW91dCB2YWx1ZXMgZm9yIGVycm9yIHN0YXRlcy4gIFRoZXNlIHZhbHVlcyBhcmUgaW4gc2Vjb25kcy4KICAgICAqICBUaGVzZSBzaG91bGQgbm90IGJlIGNoYW5nZWQgdW5sZXNzIHlvdSBrbm93IGV4YWN0bHkgd2hhdCB5b3UgYXJlCiAgICAgKiAgZG9pbmcuCiAgICAgKgogICAgICogIFRJTUVPVVQgLSBUaW1lb3V0IG11bHRpcGxpZXIuIEEgd2FpdGluZyByZXF1ZXN0IHdpbGwgYmUgY29uc2lkZXJlZAogICAgICogICAgICBmYWlsZWQgYWZ0ZXIgTWF0aC5mbG9vcihUSU1FT1VUICogd2FpdCkgc2Vjb25kcyBoYXZlIGVsYXBzZWQuCiAgICAgKiAgICAgIFRoaXMgZGVmYXVsdHMgdG8gMS4xLCBhbmQgd2l0aCBkZWZhdWx0IHdhaXQsIDY2IHNlY29uZHMuCiAgICAgKiAgU0VDT05EQVJZX1RJTUVPVVQgLSBTZWNvbmRhcnkgdGltZW91dCBtdWx0aXBsaWVyLiBJbiBjYXNlcyB3aGVyZQogICAgICogICAgICBTdHJvcGhlIGNhbiBkZXRlY3QgZWFybHkgZmFpbHVyZSwgaXQgd2lsbCBjb25zaWRlciB0aGUgcmVxdWVzdAogICAgICogICAgICBmYWlsZWQgaWYgaXQgZG9lc24ndCByZXR1cm4gYWZ0ZXIKICAgICAqICAgICAgTWF0aC5mbG9vcihTRUNPTkRBUllfVElNRU9VVCAqIHdhaXQpIHNlY29uZHMgaGF2ZSBlbGFwc2VkLgogICAgICogICAgICBUaGlzIGRlZmF1bHRzIHRvIDAuMSwgYW5kIHdpdGggZGVmYXVsdCB3YWl0LCA2IHNlY29uZHMuCiAgICAgKi8KICAgIFRJTUVPVVQ6IDEuMSwKICAgIFNFQ09OREFSWV9USU1FT1VUOiAwLjEsCgogICAgLyoqIEZ1bmN0aW9uOiBhZGROYW1lc3BhY2UKICAgICAqICBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gZXh0ZW5kIHRoZSBjdXJyZW50IG5hbWVzcGFjZXMgaW4KICAgICAqICBTdHJvcGhlLk5TLiAgSXQgdGFrZXMgYSBrZXkgYW5kIGEgdmFsdWUgd2l0aCB0aGUga2V5IGJlaW5nIHRoZQogICAgICogIG5hbWUgb2YgdGhlIG5ldyBuYW1lc3BhY2UsIHdpdGggaXRzIGFjdHVhbCB2YWx1ZS4KICAgICAqICBGb3IgZXhhbXBsZToKICAgICAqICBTdHJvcGhlLmFkZE5hbWVzcGFjZSgnUFVCU1VCJywgImh0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL3B1YnN1YiIpOwogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgbmFtZSAtIFRoZSBuYW1lIHVuZGVyIHdoaWNoIHRoZSBuYW1lc3BhY2Ugd2lsbCBiZQogICAgICogICAgICByZWZlcmVuY2VkIHVuZGVyIFN0cm9waGUuTlMKICAgICAqICAgIChTdHJpbmcpIHZhbHVlIC0gVGhlIGFjdHVhbCBuYW1lc3BhY2UuCiAgICAgKi8KICAgIGFkZE5hbWVzcGFjZTogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKQogICAgewogICAgICBTdHJvcGhlLk5TW25hbWVdID0gdmFsdWU7CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogZm9yRWFjaENoaWxkCiAgICAgKiAgTWFwIGEgZnVuY3Rpb24gb3ZlciBzb21lIG9yIGFsbCBjaGlsZCBlbGVtZW50cyBvZiBhIGdpdmVuIGVsZW1lbnQuCiAgICAgKgogICAgICogIFRoaXMgaXMgYSBzbWFsbCBjb252ZW5pZW5jZSBmdW5jdGlvbiBmb3IgbWFwcGluZyBhIGZ1bmN0aW9uIG92ZXIKICAgICAqICBzb21lIG9yIGFsbCBvZiB0aGUgY2hpbGRyZW4gb2YgYW4gZWxlbWVudC4gIElmIGVsZW1OYW1lIGlzIG51bGwsIGFsbAogICAgICogIGNoaWxkcmVuIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBmdW5jdGlvbiwgb3RoZXJ3aXNlIG9ubHkgY2hpbGRyZW4KICAgICAqICB3aG9zZSB0YWcgbmFtZXMgbWF0Y2ggZWxlbU5hbWUgd2lsbCBiZSBwYXNzZWQuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoWE1MRWxlbWVudCkgZWxlbSAtIFRoZSBlbGVtZW50IHRvIG9wZXJhdGUgb24uCiAgICAgKiAgICAoU3RyaW5nKSBlbGVtTmFtZSAtIFRoZSBjaGlsZCBlbGVtZW50IHRhZyBuYW1lIGZpbHRlci4KICAgICAqICAgIChGdW5jdGlvbikgZnVuYyAtIFRoZSBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGNoaWxkLiAgVGhpcwogICAgICogICAgICBmdW5jdGlvbiBzaG91bGQgdGFrZSBhIHNpbmdsZSBhcmd1bWVudCwgYSBET00gZWxlbWVudC4KICAgICAqLwogICAgZm9yRWFjaENoaWxkOiBmdW5jdGlvbiAoZWxlbSwgZWxlbU5hbWUsIGZ1bmMpCiAgICB7CiAgICAgICAgdmFyIGksIGNoaWxkTm9kZTsKCiAgICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBjaGlsZE5vZGUgPSBlbGVtLmNoaWxkTm9kZXNbaV07CiAgICAgICAgICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT0gU3Ryb3BoZS5FbGVtZW50VHlwZS5OT1JNQUwgJiYKICAgICAgICAgICAgICAgICghZWxlbU5hbWUgfHwgdGhpcy5pc1RhZ0VxdWFsKGNoaWxkTm9kZSwgZWxlbU5hbWUpKSkgewogICAgICAgICAgICAgICAgZnVuYyhjaGlsZE5vZGUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IGlzVGFnRXF1YWwKICAgICAqICBDb21wYXJlIGFuIGVsZW1lbnQncyB0YWcgbmFtZSB3aXRoIGEgc3RyaW5nLgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIGlzIGNhc2UgaW5zZW5zaXRpdmUuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoWE1MRWxlbWVudCkgZWwgLSBBIERPTSBlbGVtZW50LgogICAgICogICAgKFN0cmluZykgbmFtZSAtIFRoZSBlbGVtZW50IG5hbWUuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICB0cnVlIGlmIHRoZSBlbGVtZW50J3MgdGFnIG5hbWUgbWF0Y2hlcyBfZWxfLCBhbmQgZmFsc2UKICAgICAqICAgIG90aGVyd2lzZS4KICAgICAqLwogICAgaXNUYWdFcXVhbDogZnVuY3Rpb24gKGVsLCBuYW1lKQogICAgewogICAgICAgIHJldHVybiBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gbmFtZS50b0xvd2VyQ2FzZSgpOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZVZhcmlhYmxlOiBfeG1sR2VuZXJhdG9yCiAgICAgKiAgX1ByaXZhdGVfIHZhcmlhYmxlIHRoYXQgY2FjaGVzIGEgRE9NIGRvY3VtZW50IHRvCiAgICAgKiAgZ2VuZXJhdGUgZWxlbWVudHMuCiAgICAgKi8KICAgIF94bWxHZW5lcmF0b3I6IG51bGwsCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX21ha2VHZW5lcmF0b3IKICAgICAqICBfUHJpdmF0ZV8gZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGEgZHVtbXkgWE1MIERPTSBkb2N1bWVudCB0byBzZXJ2ZSBhcwogICAgICogIGFuIGVsZW1lbnQgYW5kIHRleHQgbm9kZSBnZW5lcmF0b3IuCiAgICAgKi8KICAgIF9tYWtlR2VuZXJhdG9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGRvYzsKCiAgICAgICAgLy8gSUU5IGRvZXMgaW1wbGVtZW50IGNyZWF0ZURvY3VtZW50KCk7IGhvd2V2ZXIsIHVzaW5nIGl0IHdpbGwgY2F1c2UgdGhlIGJyb3dzZXIgdG8gbGVhayBtZW1vcnkgb24gcGFnZSB1bmxvYWQuCiAgICAgICAgLy8gSGVyZSwgd2UgdGVzdCBmb3IgcHJlc2VuY2Ugb2YgY3JlYXRlRG9jdW1lbnQoKSBwbHVzIElFJ3MgcHJvcHJpZXRhcnkgZG9jdW1lbnRNb2RlIGF0dHJpYnV0ZSwgd2hpY2ggd291bGQgYmUKICAgICAgICAgICAgICAgIC8vIGxlc3MgdGhhbiAxMCBpbiB0aGUgY2FzZSBvZiBJRTkgYW5kIGJlbG93LgogICAgICAgIGlmIChkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVEb2N1bWVudCA9PT0gdW5kZWZpbmVkIHx8CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPCAxMCkgewogICAgICAgICAgICBkb2MgPSB0aGlzLl9nZXRJRVhtbERvbSgpOwogICAgICAgICAgICBkb2MuYXBwZW5kQ2hpbGQoZG9jLmNyZWF0ZUVsZW1lbnQoJ3N0cm9waGUnKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24KICAgICAgICAgICAgICAgIC5jcmVhdGVEb2N1bWVudCgnamFiYmVyOmNsaWVudCcsICdzdHJvcGhlJywgbnVsbCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZG9jOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IHhtbEdlbmVyYXRvcgogICAgICogIEdldCB0aGUgRE9NIGRvY3VtZW50IHRvIGdlbmVyYXRlIGVsZW1lbnRzLgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgVGhlIGN1cnJlbnRseSB1c2VkIERPTSBkb2N1bWVudC4KICAgICAqLwogICAgeG1sR2VuZXJhdG9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCFTdHJvcGhlLl94bWxHZW5lcmF0b3IpIHsKICAgICAgICAgICAgU3Ryb3BoZS5feG1sR2VuZXJhdG9yID0gU3Ryb3BoZS5fbWFrZUdlbmVyYXRvcigpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gU3Ryb3BoZS5feG1sR2VuZXJhdG9yOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfZ2V0SUVYbWxEb20KICAgICAqICBHZXRzIElFIHhtbCBkb2Mgb2JqZWN0CiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBBIE1pY3Jvc29mdCBYTUwgRE9NIE9iamVjdAogICAgICogIFNlZSBBbHNvOgogICAgICogICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNzU3ODM3JTI4VlMuODUlMjkuYXNweAogICAgICovCiAgICBfZ2V0SUVYbWxEb20gOiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZG9jID0gbnVsbDsKICAgICAgICB2YXIgZG9jU3RyaW5ncyA9IFsKICAgICAgICAgICAgIk1zeG1sMi5ET01Eb2N1bWVudC42LjAiLAogICAgICAgICAgICAiTXN4bWwyLkRPTURvY3VtZW50LjUuMCIsCiAgICAgICAgICAgICJNc3htbDIuRE9NRG9jdW1lbnQuNC4wIiwKICAgICAgICAgICAgIk1TWE1MMi5ET01Eb2N1bWVudC4zLjAiLAogICAgICAgICAgICAiTVNYTUwyLkRPTURvY3VtZW50IiwKICAgICAgICAgICAgIk1TWE1MLkRPTURvY3VtZW50IiwKICAgICAgICAgICAgIk1pY3Jvc29mdC5YTUxET00iCiAgICAgICAgXTsKCiAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkb2NTdHJpbmdzLmxlbmd0aDsgZCsrKSB7CiAgICAgICAgICAgIGlmIChkb2MgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgZG9jID0gbmV3IEFjdGl2ZVhPYmplY3QoZG9jU3RyaW5nc1tkXSk7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgZG9jID0gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZG9jOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IHhtbEVsZW1lbnQKICAgICAqICBDcmVhdGUgYW4gWE1MIERPTSBlbGVtZW50LgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYW4gWE1MIERPTSBlbGVtZW50IGNvcnJlY3RseSBhY3Jvc3MgYWxsCiAgICAgKiAgaW1wbGVtZW50YXRpb25zLiBOb3RlIHRoYXQgdGhlc2UgYXJlIG5vdCBIVE1MIERPTSBlbGVtZW50cywgd2hpY2gKICAgICAqICBhcmVuJ3QgYXBwcm9wcmlhdGUgZm9yIFhNUFAgc3Rhbnphcy4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChTdHJpbmcpIG5hbWUgLSBUaGUgbmFtZSBmb3IgdGhlIGVsZW1lbnQuCiAgICAgKiAgICAoQXJyYXl8T2JqZWN0KSBhdHRycyAtIEFuIG9wdGlvbmFsIGFycmF5IG9yIG9iamVjdCBjb250YWluaW5nCiAgICAgKiAgICAgIGtleS92YWx1ZSBwYWlycyB0byB1c2UgYXMgZWxlbWVudCBhdHRyaWJ1dGVzLiBUaGUgb2JqZWN0IHNob3VsZAogICAgICogICAgICBiZSBpbiB0aGUgZm9ybWF0IHsna2V5JzogJ3ZhbHVlJ30gb3Ige2tleTogJ3ZhbHVlJ30uIFRoZSBhcnJheQogICAgICogICAgICBzaG91bGQgaGF2ZSB0aGUgZm9ybWF0IFtbJ2tleTEnLCAndmFsdWUxJ10sIFsna2V5MicsICd2YWx1ZTInXV0uCiAgICAgKiAgICAoU3RyaW5nKSB0ZXh0IC0gVGhlIHRleHQgY2hpbGQgZGF0YSBmb3IgdGhlIGVsZW1lbnQuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBBIG5ldyBYTUwgRE9NIGVsZW1lbnQuCiAgICAgKi8KICAgIHhtbEVsZW1lbnQ6IGZ1bmN0aW9uIChuYW1lKQogICAgewogICAgICAgIGlmICghbmFtZSkgeyByZXR1cm4gbnVsbDsgfQoKICAgICAgICB2YXIgbm9kZSA9IFN0cm9waGUueG1sR2VuZXJhdG9yKCkuY3JlYXRlRWxlbWVudChuYW1lKTsKCiAgICAgICAgLy8gRklYTUU6IHRoaXMgc2hvdWxkIHRocm93IGVycm9ycyBpZiBhcmdzIGFyZSB0aGUgd3JvbmcgdHlwZSBvcgogICAgICAgIC8vIHRoZXJlIGFyZSBtb3JlIHRoYW4gdHdvIG9wdGlvbmFsIGFyZ3MKICAgICAgICB2YXIgYSwgaSwgazsKICAgICAgICBmb3IgKGEgPSAxOyBhIDwgYXJndW1lbnRzLmxlbmd0aDsgYSsrKSB7CiAgICAgICAgICAgIGlmICghYXJndW1lbnRzW2FdKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgIGlmICh0eXBlb2YoYXJndW1lbnRzW2FdKSA9PSAic3RyaW5nIiB8fAogICAgICAgICAgICAgICAgdHlwZW9mKGFyZ3VtZW50c1thXSkgPT0gIm51bWJlciIpIHsKICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoU3Ryb3BoZS54bWxUZXh0Tm9kZShhcmd1bWVudHNbYV0pKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YoYXJndW1lbnRzW2FdKSA9PSAib2JqZWN0IiAmJgogICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZihhcmd1bWVudHNbYV0uc29ydCkgPT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ3VtZW50c1thXS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoYXJndW1lbnRzW2FdW2ldKSA9PSAib2JqZWN0IiAmJgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YoYXJndW1lbnRzW2FdW2ldLnNvcnQpID09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXJndW1lbnRzW2FdW2ldWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbYV1baV1bMV0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YoYXJndW1lbnRzW2FdKSA9PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgZm9yIChrIGluIGFyZ3VtZW50c1thXSkgewogICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbYV0uaGFzT3duUHJvcGVydHkoaykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoaywgYXJndW1lbnRzW2FdW2tdKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBub2RlOwogICAgfSwKCiAgICAvKiAgRnVuY3Rpb246IHhtbGVzY2FwZQogICAgICogIEV4Y2FwZXMgaW52YWxpZCB4bWwgY2hhcmFjdGVycy4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgICAoU3RyaW5nKSB0ZXh0IC0gdGV4dCB0byBlc2NhcGUuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICAgIEVzY2FwZWQgdGV4dC4KICAgICAqLwogICAgeG1sZXNjYXBlOiBmdW5jdGlvbih0ZXh0KQogICAgewogICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1wmL2csICImYW1wOyIpOwogICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzwvZywgICImbHQ7Iik7CiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvPi9nLCAgIiZndDsiKTsKICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8nL2csICAiJmFwb3M7Iik7CiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvIi9nLCAgIiZxdW90OyIpOwogICAgICAgIHJldHVybiB0ZXh0OwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IHhtbFRleHROb2RlCiAgICAgKiAgQ3JlYXRlcyBhbiBYTUwgRE9NIHRleHQgbm9kZS4KICAgICAqCiAgICAgKiAgUHJvdmlkZXMgYSBjcm9zcyBpbXBsZW1lbnRhdGlvbiB2ZXJzaW9uIG9mIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgdGV4dCAtIFRoZSBjb250ZW50IG9mIHRoZSB0ZXh0IG5vZGUuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBBIG5ldyBYTUwgRE9NIHRleHQgbm9kZS4KICAgICAqLwogICAgeG1sVGV4dE5vZGU6IGZ1bmN0aW9uICh0ZXh0KQogICAgewogICAgICAgIHJldHVybiBTdHJvcGhlLnhtbEdlbmVyYXRvcigpLmNyZWF0ZVRleHROb2RlKHRleHQpOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IHhtbEh0bWxOb2RlCiAgICAgKiAgQ3JlYXRlcyBhbiBYTUwgRE9NIGh0bWwgbm9kZS4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChTdHJpbmcpIGh0bWwgLSBUaGUgY29udGVudCBvZiB0aGUgaHRtbCBub2RlLgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgQSBuZXcgWE1MIERPTSB0ZXh0IG5vZGUuCiAgICAgKi8KICAgIHhtbEh0bWxOb2RlOiBmdW5jdGlvbiAoaHRtbCkKICAgIHsKICAgICAgICB2YXIgbm9kZTsKICAgICAgICAvL2Vuc3VyZSB0ZXh0IGlzIGVzY2FwZWQKICAgICAgICBpZiAod2luZG93LkRPTVBhcnNlcikgewogICAgICAgICAgICB2YXIgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpOwogICAgICAgICAgICBub2RlID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCAidGV4dC94bWwiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBub2RlID0gbmV3IEFjdGl2ZVhPYmplY3QoIk1pY3Jvc29mdC5YTUxET00iKTsKICAgICAgICAgICAgbm9kZS5hc3luYz0iZmFsc2UiOwogICAgICAgICAgICBub2RlLmxvYWRYTUwoaHRtbCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBub2RlOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IGdldFRleHQKICAgICAqICBHZXQgdGhlIGNvbmNhdGVuYXRpb24gb2YgYWxsIHRleHQgY2hpbGRyZW4gb2YgYW4gZWxlbWVudC4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChYTUxFbGVtZW50KSBlbGVtIC0gQSBET00gZWxlbWVudC4KICAgICAqCiAgICAgKiAgUmV0dXJuczoKICAgICAqICAgIEEgU3RyaW5nIHdpdGggdGhlIGNvbmNhdGVuYXRlZCB0ZXh0IG9mIGFsbCB0ZXh0IGVsZW1lbnQgY2hpbGRyZW4uCiAgICAgKi8KICAgIGdldFRleHQ6IGZ1bmN0aW9uIChlbGVtKQogICAgewogICAgICAgIGlmICghZWxlbSkgeyByZXR1cm4gbnVsbDsgfQoKICAgICAgICB2YXIgc3RyID0gIiI7CiAgICAgICAgaWYgKGVsZW0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgJiYgZWxlbS5ub2RlVHlwZSA9PQogICAgICAgICAgICBTdHJvcGhlLkVsZW1lbnRUeXBlLlRFWFQpIHsKICAgICAgICAgICAgc3RyICs9IGVsZW0ubm9kZVZhbHVlOwogICAgICAgIH0KCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGVsZW0uY2hpbGROb2Rlc1tpXS5ub2RlVHlwZSA9PSBTdHJvcGhlLkVsZW1lbnRUeXBlLlRFWFQpIHsKICAgICAgICAgICAgICAgIHN0ciArPSBlbGVtLmNoaWxkTm9kZXNbaV0ubm9kZVZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gU3Ryb3BoZS54bWxlc2NhcGUoc3RyKTsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiBjb3B5RWxlbWVudAogICAgICogIENvcHkgYW4gWE1MIERPTSBlbGVtZW50LgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIGNvcGllcyBhIERPTSBlbGVtZW50IGFuZCBhbGwgaXRzIGRlc2NlbmRhbnRzIGFuZCByZXR1cm5zCiAgICAgKiAgdGhlIG5ldyBjb3B5LgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFhNTEVsZW1lbnQpIGVsZW0gLSBBIERPTSBlbGVtZW50LgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgQSBuZXcsIGNvcGllZCBET00gZWxlbWVudCB0cmVlLgogICAgICovCiAgICBjb3B5RWxlbWVudDogZnVuY3Rpb24gKGVsZW0pCiAgICB7CiAgICAgICAgdmFyIGksIGVsOwogICAgICAgIGlmIChlbGVtLm5vZGVUeXBlID09IFN0cm9waGUuRWxlbWVudFR5cGUuTk9STUFMKSB7CiAgICAgICAgICAgIGVsID0gU3Ryb3BoZS54bWxFbGVtZW50KGVsZW0udGFnTmFtZSk7CgogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbS5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoZWxlbS5hdHRyaWJ1dGVzW2ldLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5hdHRyaWJ1dGVzW2ldLnZhbHVlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoU3Ryb3BoZS5jb3B5RWxlbWVudChlbGVtLmNoaWxkTm9kZXNbaV0pKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZWxlbS5ub2RlVHlwZSA9PSBTdHJvcGhlLkVsZW1lbnRUeXBlLlRFWFQpIHsKICAgICAgICAgICAgZWwgPSBTdHJvcGhlLnhtbEdlbmVyYXRvcigpLmNyZWF0ZVRleHROb2RlKGVsZW0ubm9kZVZhbHVlKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBlbDsKICAgIH0sCgoKICAgIC8qKiBGdW5jdGlvbjogY3JlYXRlSHRtbAogICAgICogIENvcHkgYW4gSFRNTCBET00gZWxlbWVudCBpbnRvIGFuIFhNTCBET00uCiAgICAgKgogICAgICogIFRoaXMgZnVuY3Rpb24gY29waWVzIGEgRE9NIGVsZW1lbnQgYW5kIGFsbCBpdHMgZGVzY2VuZGFudHMgYW5kIHJldHVybnMKICAgICAqICB0aGUgbmV3IGNvcHkuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoSFRNTEVsZW1lbnQpIGVsZW0gLSBBIERPTSBlbGVtZW50LgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgQSBuZXcsIGNvcGllZCBET00gZWxlbWVudCB0cmVlLgogICAgICovCiAgICBjcmVhdGVIdG1sOiBmdW5jdGlvbiAoZWxlbSkKICAgIHsKICAgICAgICB2YXIgaSwgZWwsIGosIHRhZywgYXR0cmlidXRlLCB2YWx1ZSwgY3NzLCBjc3NBdHRycywgYXR0ciwgY3NzTmFtZSwgY3NzVmFsdWU7CiAgICAgICAgaWYgKGVsZW0ubm9kZVR5cGUgPT0gU3Ryb3BoZS5FbGVtZW50VHlwZS5OT1JNQUwpIHsKICAgICAgICAgICAgdGFnID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICBpZihTdHJvcGhlLlhIVE1MLnZhbGlkVGFnKHRhZykpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgZWwgPSBTdHJvcGhlLnhtbEVsZW1lbnQodGFnKTsKICAgICAgICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBTdHJvcGhlLlhIVE1MLmF0dHJpYnV0ZXNbdGFnXS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgPSBTdHJvcGhlLlhIVE1MLmF0dHJpYnV0ZXNbdGFnXVtpXTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBlbGVtLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpOwogICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgdmFsdWUgPT0gJ3VuZGVmaW5lZCcgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoYXR0cmlidXRlID09ICdzdHlsZScgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgdmFsdWUuY3NzVGV4dCAhPSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuY3NzVGV4dDsgLy8gd2UncmUgZGVhbGluZyB3aXRoIElFLCBuZWVkIHRvIGdldCBDU1Mgb3V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlsdGVyIG91dCBpbnZhbGlkIGNzcyBzdHlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgaWYoYXR0cmlidXRlID09ICdzdHlsZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcyA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzQXR0cnMgPSB2YWx1ZS5zcGxpdCgnOycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGogPSAwOyBqIDwgY3NzQXR0cnMubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyID0gY3NzQXR0cnNbal0uc3BsaXQoJzonKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NOYW1lID0gYXR0clswXS5yZXBsYWNlKC9eXHMqLywgIiIpLnJlcGxhY2UoL1xzKiQvLCAiIikudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihTdHJvcGhlLlhIVE1MLnZhbGlkQ1NTKGNzc05hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gYXR0clsxXS5yZXBsYWNlKC9eXHMqLywgIiIpLnJlcGxhY2UoL1xzKiQvLCAiIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcy5wdXNoKGNzc05hbWUgKyAnOiAnICsgY3NzVmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNzcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjc3Muam9pbignOyAnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoU3Ryb3BoZS5jcmVhdGVIdG1sKGVsZW0uY2hpbGROb2Rlc1tpXSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkgeyAvLyBpbnZhbGlkIGVsZW1lbnRzCiAgICAgICAgICAgICAgICAgIGVsID0gU3Ryb3BoZS54bWxUZXh0Tm9kZSgnJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBlbCA9IFN0cm9waGUueG1sR2VuZXJhdG9yKCkuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKFN0cm9waGUuY3JlYXRlSHRtbChlbGVtLmNoaWxkTm9kZXNbaV0pKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZWxlbS5ub2RlVHlwZSA9PSBTdHJvcGhlLkVsZW1lbnRUeXBlLkZSQUdNRU5UKSB7CiAgICAgICAgICAgIGVsID0gU3Ryb3BoZS54bWxHZW5lcmF0b3IoKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKFN0cm9waGUuY3JlYXRlSHRtbChlbGVtLmNoaWxkTm9kZXNbaV0pKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZWxlbS5ub2RlVHlwZSA9PSBTdHJvcGhlLkVsZW1lbnRUeXBlLlRFWFQpIHsKICAgICAgICAgICAgZWwgPSBTdHJvcGhlLnhtbFRleHROb2RlKGVsZW0ubm9kZVZhbHVlKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBlbDsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiBlc2NhcGVOb2RlCiAgICAgKiAgRXNjYXBlIHRoZSBub2RlIHBhcnQgKGFsc28gY2FsbGVkIGxvY2FsIHBhcnQpIG9mIGEgSklELgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgbm9kZSAtIEEgbm9kZSAob3IgbG9jYWwgcGFydCkuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBBbiBlc2NhcGVkIG5vZGUgKG9yIGxvY2FsIHBhcnQpLgogICAgICovCiAgICBlc2NhcGVOb2RlOiBmdW5jdGlvbiAobm9kZSkKICAgIHsKICAgICAgICByZXR1cm4gbm9kZS5yZXBsYWNlKC9eXHMrfFxzKyQvZywgJycpCiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC9nLCAgIlxcNWMiKQogICAgICAgICAgICAucmVwbGFjZSgvIC9nLCAgICJcXDIwIikKICAgICAgICAgICAgLnJlcGxhY2UoL1wiL2csICAiXFwyMiIpCiAgICAgICAgICAgIC5yZXBsYWNlKC9cJi9nLCAgIlxcMjYiKQogICAgICAgICAgICAucmVwbGFjZSgvXCcvZywgICJcXDI3IikKICAgICAgICAgICAgLnJlcGxhY2UoL1wvL2csICAiXFwyZiIpCiAgICAgICAgICAgIC5yZXBsYWNlKC86L2csICAgIlxcM2EiKQogICAgICAgICAgICAucmVwbGFjZSgvPC9nLCAgICJcXDNjIikKICAgICAgICAgICAgLnJlcGxhY2UoLz4vZywgICAiXFwzZSIpCiAgICAgICAgICAgIC5yZXBsYWNlKC9AL2csICAgIlxcNDAiKTsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiB1bmVzY2FwZU5vZGUKICAgICAqICBVbmVzY2FwZSBhIG5vZGUgcGFydCAoYWxzbyBjYWxsZWQgbG9jYWwgcGFydCkgb2YgYSBKSUQuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoU3RyaW5nKSBub2RlIC0gQSBub2RlIChvciBsb2NhbCBwYXJ0KS4KICAgICAqCiAgICAgKiAgUmV0dXJuczoKICAgICAqICAgIEFuIHVuZXNjYXBlZCBub2RlIChvciBsb2NhbCBwYXJ0KS4KICAgICAqLwogICAgdW5lc2NhcGVOb2RlOiBmdW5jdGlvbiAobm9kZSkKICAgIHsKICAgICAgICByZXR1cm4gbm9kZS5yZXBsYWNlKC9cXDIwL2csICIgIikKICAgICAgICAgICAgLnJlcGxhY2UoL1xcMjIvZywgJyInKQogICAgICAgICAgICAucmVwbGFjZSgvXFwyNi9nLCAiJiIpCiAgICAgICAgICAgIC5yZXBsYWNlKC9cXDI3L2csICInIikKICAgICAgICAgICAgLnJlcGxhY2UoL1xcMmYvZywgIi8iKQogICAgICAgICAgICAucmVwbGFjZSgvXFwzYS9nLCAiOiIpCiAgICAgICAgICAgIC5yZXBsYWNlKC9cXDNjL2csICI8IikKICAgICAgICAgICAgLnJlcGxhY2UoL1xcM2UvZywgIj4iKQogICAgICAgICAgICAucmVwbGFjZSgvXFw0MC9nLCAiQCIpCiAgICAgICAgICAgIC5yZXBsYWNlKC9cXDVjL2csICJcXCIpOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IGdldE5vZGVGcm9tSmlkCiAgICAgKiAgR2V0IHRoZSBub2RlIHBvcnRpb24gb2YgYSBKSUQgU3RyaW5nLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgamlkIC0gQSBKSUQuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBBIFN0cmluZyBjb250YWluaW5nIHRoZSBub2RlLgogICAgICovCiAgICBnZXROb2RlRnJvbUppZDogZnVuY3Rpb24gKGppZCkKICAgIHsKICAgICAgICBpZiAoamlkLmluZGV4T2YoIkAiKSA8IDApIHsgcmV0dXJuIG51bGw7IH0KICAgICAgICByZXR1cm4gamlkLnNwbGl0KCJAIilbMF07CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogZ2V0RG9tYWluRnJvbUppZAogICAgICogIEdldCB0aGUgZG9tYWluIHBvcnRpb24gb2YgYSBKSUQgU3RyaW5nLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgamlkIC0gQSBKSUQuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBBIFN0cmluZyBjb250YWluaW5nIHRoZSBkb21haW4uCiAgICAgKi8KICAgIGdldERvbWFpbkZyb21KaWQ6IGZ1bmN0aW9uIChqaWQpCiAgICB7CiAgICAgICAgdmFyIGJhcmUgPSBTdHJvcGhlLmdldEJhcmVKaWRGcm9tSmlkKGppZCk7CiAgICAgICAgaWYgKGJhcmUuaW5kZXhPZigiQCIpIDwgMCkgewogICAgICAgICAgICByZXR1cm4gYmFyZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgcGFydHMgPSBiYXJlLnNwbGl0KCJAIik7CiAgICAgICAgICAgIHBhcnRzLnNwbGljZSgwLCAxKTsKICAgICAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJ0AnKTsKICAgICAgICB9CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogZ2V0UmVzb3VyY2VGcm9tSmlkCiAgICAgKiAgR2V0IHRoZSByZXNvdXJjZSBwb3J0aW9uIG9mIGEgSklEIFN0cmluZy4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChTdHJpbmcpIGppZCAtIEEgSklELgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgQSBTdHJpbmcgY29udGFpbmluZyB0aGUgcmVzb3VyY2UuCiAgICAgKi8KICAgIGdldFJlc291cmNlRnJvbUppZDogZnVuY3Rpb24gKGppZCkKICAgIHsKICAgICAgICB2YXIgcyA9IGppZC5zcGxpdCgiLyIpOwogICAgICAgIGlmIChzLmxlbmd0aCA8IDIpIHsgcmV0dXJuIG51bGw7IH0KICAgICAgICBzLnNwbGljZSgwLCAxKTsKICAgICAgICByZXR1cm4gcy5qb2luKCcvJyk7CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogZ2V0QmFyZUppZEZyb21KaWQKICAgICAqICBHZXQgdGhlIGJhcmUgSklEIGZyb20gYSBKSUQgU3RyaW5nLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgamlkIC0gQSBKSUQuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBBIFN0cmluZyBjb250YWluaW5nIHRoZSBiYXJlIEpJRC4KICAgICAqLwogICAgZ2V0QmFyZUppZEZyb21KaWQ6IGZ1bmN0aW9uIChqaWQpCiAgICB7CiAgICAgICAgcmV0dXJuIGppZCA/IGppZC5zcGxpdCgiLyIpWzBdIDogbnVsbDsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiBsb2cKICAgICAqICBVc2VyIG92ZXJyaWRlYWJsZSBsb2dnaW5nIGZ1bmN0aW9uLgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuZXZlciB0aGUgU3Ryb3BoZSBsaWJyYXJ5IGNhbGxzIGFueQogICAgICogIG9mIHRoZSBsb2dnaW5nIGZ1bmN0aW9ucy4gIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoaXMKICAgICAqICBmdW5jdGlvbiBkb2VzIG5vdGhpbmcuICBJZiBjbGllbnQgY29kZSB3aXNoZXMgdG8gaGFuZGxlIHRoZSBsb2dnaW5nCiAgICAgKiAgbWVzc2FnZXMsIGl0IHNob3VsZCBvdmVycmlkZSB0aGlzIHdpdGgKICAgICAqICA+IFN0cm9waGUubG9nID0gZnVuY3Rpb24gKGxldmVsLCBtc2cpIHsKICAgICAqICA+ICAgKHVzZXIgY29kZSBoZXJlKQogICAgICogID4gfTsKICAgICAqCiAgICAgKiAgUGxlYXNlIG5vdGUgdGhhdCBkYXRhIHNlbnQgYW5kIHJlY2VpdmVkIG92ZXIgdGhlIHdpcmUgaXMgbG9nZ2VkCiAgICAgKiAgdmlhIFN0cm9waGUuQ29ubmVjdGlvbi5yYXdJbnB1dCgpIGFuZCBTdHJvcGhlLkNvbm5lY3Rpb24ucmF3T3V0cHV0KCkuCiAgICAgKgogICAgICogIFRoZSBkaWZmZXJlbnQgbGV2ZWxzIGFuZCB0aGVpciBtZWFuaW5ncyBhcmUKICAgICAqCiAgICAgKiAgICBERUJVRyAtIE1lc3NhZ2VzIHVzZWZ1bCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLgogICAgICogICAgSU5GTyAtIEluZm9ybWF0aW9uYWwgbWVzc2FnZXMuICBUaGlzIGlzIG1vc3RseSBpbmZvcm1hdGlvbiBsaWtlCiAgICAgKiAgICAgICdkaXNjb25uZWN0IHdhcyBjYWxsZWQnIG9yICdTQVNMIGF1dGggc3VjY2VlZGVkJy4KICAgICAqICAgIFdBUk4gLSBXYXJuaW5ncyBhYm91dCBwb3RlbnRpYWwgcHJvYmxlbXMuICBUaGlzIGlzIG1vc3RseSB1c2VkCiAgICAgKiAgICAgIHRvIHJlcG9ydCB0cmFuc2llbnQgY29ubmVjdGlvbiBlcnJvcnMgbGlrZSByZXF1ZXN0IHRpbWVvdXRzLgogICAgICogICAgRVJST1IgLSBTb21lIGVycm9yIG9jY3VycmVkLgogICAgICogICAgRkFUQUwgLSBBIG5vbi1yZWNvdmVyYWJsZSBmYXRhbCBlcnJvciBvY2N1cnJlZC4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChJbnRlZ2VyKSBsZXZlbCAtIFRoZSBsb2cgbGV2ZWwgb2YgdGhlIGxvZyBtZXNzYWdlLiAgVGhpcyB3aWxsCiAgICAgKiAgICAgIGJlIG9uZSBvZiB0aGUgdmFsdWVzIGluIFN0cm9waGUuTG9nTGV2ZWwuCiAgICAgKiAgICAoU3RyaW5nKSBtc2cgLSBUaGUgbG9nIG1lc3NhZ2UuCiAgICAgKi8KICAgIC8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi8KICAgIGxvZzogZnVuY3Rpb24gKGxldmVsLCBtc2cpCiAgICB7CiAgICAgICAgcmV0dXJuOwogICAgfSwKICAgIC8qIGpzaGludCBpZ25vcmU6ZW5kICovCgogICAgLyoqIEZ1bmN0aW9uOiBkZWJ1ZwogICAgICogIExvZyBhIG1lc3NhZ2UgYXQgdGhlIFN0cm9waGUuTG9nTGV2ZWwuREVCVUcgbGV2ZWwuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoU3RyaW5nKSBtc2cgLSBUaGUgbG9nIG1lc3NhZ2UuCiAgICAgKi8KICAgIGRlYnVnOiBmdW5jdGlvbihtc2cpCiAgICB7CiAgICAgICAgdGhpcy5sb2codGhpcy5Mb2dMZXZlbC5ERUJVRywgbXNnKTsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiBpbmZvCiAgICAgKiAgTG9nIGEgbWVzc2FnZSBhdCB0aGUgU3Ryb3BoZS5Mb2dMZXZlbC5JTkZPIGxldmVsLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgbXNnIC0gVGhlIGxvZyBtZXNzYWdlLgogICAgICovCiAgICBpbmZvOiBmdW5jdGlvbiAobXNnKQogICAgewogICAgICAgIHRoaXMubG9nKHRoaXMuTG9nTGV2ZWwuSU5GTywgbXNnKTsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiB3YXJuCiAgICAgKiAgTG9nIGEgbWVzc2FnZSBhdCB0aGUgU3Ryb3BoZS5Mb2dMZXZlbC5XQVJOIGxldmVsLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgbXNnIC0gVGhlIGxvZyBtZXNzYWdlLgogICAgICovCiAgICB3YXJuOiBmdW5jdGlvbiAobXNnKQogICAgewogICAgICAgIHRoaXMubG9nKHRoaXMuTG9nTGV2ZWwuV0FSTiwgbXNnKTsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiBlcnJvcgogICAgICogIExvZyBhIG1lc3NhZ2UgYXQgdGhlIFN0cm9waGUuTG9nTGV2ZWwuRVJST1IgbGV2ZWwuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoU3RyaW5nKSBtc2cgLSBUaGUgbG9nIG1lc3NhZ2UuCiAgICAgKi8KICAgIGVycm9yOiBmdW5jdGlvbiAobXNnKQogICAgewogICAgICAgIHRoaXMubG9nKHRoaXMuTG9nTGV2ZWwuRVJST1IsIG1zZyk7CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogZmF0YWwKICAgICAqICBMb2cgYSBtZXNzYWdlIGF0IHRoZSBTdHJvcGhlLkxvZ0xldmVsLkZBVEFMIGxldmVsLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgbXNnIC0gVGhlIGxvZyBtZXNzYWdlLgogICAgICovCiAgICBmYXRhbDogZnVuY3Rpb24gKG1zZykKICAgIHsKICAgICAgICB0aGlzLmxvZyh0aGlzLkxvZ0xldmVsLkZBVEFMLCBtc2cpOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IHNlcmlhbGl6ZQogICAgICogIFJlbmRlciBhIERPTSBlbGVtZW50IGFuZCBhbGwgZGVzY2VuZGFudHMgdG8gYSBTdHJpbmcuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoWE1MRWxlbWVudCkgZWxlbSAtIEEgRE9NIGVsZW1lbnQuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBUaGUgc2VyaWFsaXplZCBlbGVtZW50IHRyZWUgYXMgYSBTdHJpbmcuCiAgICAgKi8KICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24gKGVsZW0pCiAgICB7CiAgICAgICAgdmFyIHJlc3VsdDsKCiAgICAgICAgaWYgKCFlbGVtKSB7IHJldHVybiBudWxsOyB9CgogICAgICAgIGlmICh0eXBlb2YoZWxlbS50cmVlKSA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICBlbGVtID0gZWxlbS50cmVlKCk7CiAgICAgICAgfQoKICAgICAgICB2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lOwogICAgICAgIHZhciBpLCBjaGlsZDsKCiAgICAgICAgaWYgKGVsZW0uZ2V0QXR0cmlidXRlKCJfcmVhbG5hbWUiKSkgewogICAgICAgICAgICBub2RlTmFtZSA9IGVsZW0uZ2V0QXR0cmlidXRlKCJfcmVhbG5hbWUiKTsKICAgICAgICB9CgogICAgICAgIHJlc3VsdCA9ICI8IiArIG5vZGVOYW1lOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgaWYoZWxlbS5hdHRyaWJ1dGVzW2ldLm5vZGVOYW1lICE9ICJfcmVhbG5hbWUiKSB7CiAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICIgIiArIGVsZW0uYXR0cmlidXRlc1tpXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICsKICAgICAgICAgICAgICAgICI9JyIgKyBlbGVtLmF0dHJpYnV0ZXNbaV0udmFsdWUKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJi9nLCAiJmFtcDsiKQogICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cJy9nLCAiJmFwb3M7IikKICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvPi9nLCAiJmd0OyIpCiAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzwvZywgIiZsdDsiKSArICInIjsKICAgICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGVsZW0uY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHJlc3VsdCArPSAiPiI7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGNoaWxkID0gZWxlbS5jaGlsZE5vZGVzW2ldOwogICAgICAgICAgICAgICAgc3dpdGNoKCBjaGlsZC5ub2RlVHlwZSApewogICAgICAgICAgICAgICAgICBjYXNlIFN0cm9waGUuRWxlbWVudFR5cGUuTk9STUFMOgogICAgICAgICAgICAgICAgICAgIC8vIG5vcm1hbCBlbGVtZW50LCBzbyByZWN1cnNlCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFN0cm9waGUuc2VyaWFsaXplKGNoaWxkKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSBTdHJvcGhlLkVsZW1lbnRUeXBlLlRFWFQ6CiAgICAgICAgICAgICAgICAgICAgLy8gdGV4dCBlbGVtZW50IHRvIGVzY2FwZSB2YWx1ZXMKICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gU3Ryb3BoZS54bWxlc2NhcGUoY2hpbGQubm9kZVZhbHVlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSBTdHJvcGhlLkVsZW1lbnRUeXBlLkNEQVRBOgogICAgICAgICAgICAgICAgICAgIC8vIGNkYXRhIHNlY3Rpb24gc28gZG9uJ3QgZXNjYXBlIHZhbHVlcwogICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAiPCFbQ0RBVEFbIitjaGlsZC5ub2RlVmFsdWUrIl1dPiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzdWx0ICs9ICI8LyIgKyBub2RlTmFtZSArICI+IjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXN1bHQgKz0gIi8+IjsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlVmFyaWFibGU6IF9yZXF1ZXN0SWQKICAgICAqICBfUHJpdmF0ZV8gdmFyaWFibGUgdGhhdCBrZWVwcyB0cmFjayBvZiB0aGUgcmVxdWVzdCBpZHMgZm9yCiAgICAgKiAgY29ubmVjdGlvbnMuCiAgICAgKi8KICAgIF9yZXF1ZXN0SWQ6IDAsCgogICAgLyoqIFByaXZhdGVWYXJpYWJsZTogU3Ryb3BoZS5jb25uZWN0aW9uUGx1Z2lucwogICAgICogIF9Qcml2YXRlXyB2YXJpYWJsZSBVc2VkIHRvIHN0b3JlIHBsdWdpbiBuYW1lcyB0aGF0IG5lZWQKICAgICAqICBpbml0aWFsaXphdGlvbiBvbiBTdHJvcGhlLkNvbm5lY3Rpb24gY29uc3RydWN0aW9uLgogICAgICovCiAgICBfY29ubmVjdGlvblBsdWdpbnM6IHt9LAoKICAgIC8qKiBGdW5jdGlvbjogYWRkQ29ubmVjdGlvblBsdWdpbgogICAgICogIEV4dGVuZHMgdGhlIFN0cm9waGUuQ29ubmVjdGlvbiBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gcGx1Z2luLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBleHRlbnNpb24uCiAgICAgKiAgICAoT2JqZWN0KSBwdHlwZSAtIFRoZSBwbHVnaW4ncyBwcm90b3R5cGUuCiAgICAgKi8KICAgIGFkZENvbm5lY3Rpb25QbHVnaW46IGZ1bmN0aW9uIChuYW1lLCBwdHlwZSkKICAgIHsKICAgICAgICBTdHJvcGhlLl9jb25uZWN0aW9uUGx1Z2luc1tuYW1lXSA9IHB0eXBlOwogICAgfQp9OwoKLyoqIENsYXNzOiBTdHJvcGhlLkJ1aWxkZXIKICogIFhNTCBET00gYnVpbGRlci4KICoKICogIFRoaXMgb2JqZWN0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBzaW1pbGFyIHRvIEpRdWVyeSBidXQgZm9yIGJ1aWxkaW5nCiAqICBET00gZWxlbWVudCBlYXNpbHkgYW5kIHJhcGlkbHkuICBBbGwgdGhlIGZ1bmN0aW9ucyBleGNlcHQgZm9yIHRvU3RyaW5nKCkKICogIGFuZCB0cmVlKCkgcmV0dXJuIHRoZSBvYmplY3QsIHNvIGNhbGxzIGNhbiBiZSBjaGFpbmVkLiAgSGVyZSdzIGFuCiAqICBleGFtcGxlIHVzaW5nIHRoZSAkaXEoKSBidWlsZGVyIGhlbHBlci4KICogID4gJGlxKHt0bzogJ3lvdScsIGZyb206ICdtZScsIHR5cGU6ICdnZXQnLCBpZDogJzEnfSkKICogID4gICAgIC5jKCdxdWVyeScsIHt4bWxuczogJ3N0cm9waGU6ZXhhbXBsZSd9KQogKiAgPiAgICAgLmMoJ2V4YW1wbGUnKQogKiAgPiAgICAgLnRvU3RyaW5nKCkKICogIFRoZSBhYm92ZSBnZW5lcmF0ZXMgdGhpcyBYTUwgZnJhZ21lbnQKICogID4gPGlxIHRvPSd5b3UnIGZyb209J21lJyB0eXBlPSdnZXQnIGlkPScxJz4KICogID4gICA8cXVlcnkgeG1sbnM9J3N0cm9waGU6ZXhhbXBsZSc+CiAqICA+ICAgICA8ZXhhbXBsZS8+CiAqICA+ICAgPC9xdWVyeT4KICogID4gPC9pcT4KICogIFRoZSBjb3JyZXNwb25kaW5nIERPTSBtYW5pcHVsYXRpb25zIHRvIGdldCBhIHNpbWlsYXIgZnJhZ21lbnQgd291bGQgYmUKICogIGEgbG90IG1vcmUgdGVkaW91cyBhbmQgcHJvYmFibHkgaW52b2x2ZSBzZXZlcmFsIGhlbHBlciB2YXJpYWJsZXMuCiAqCiAqICBTaW5jZSBhZGRpbmcgY2hpbGRyZW4gbWFrZXMgbmV3IG9wZXJhdGlvbnMgb3BlcmF0ZSBvbiB0aGUgY2hpbGQsIHVwKCkKICogIGlzIHByb3ZpZGVkIHRvIHRyYXZlcnNlIHVwIHRoZSB0cmVlLiAgVG8gYWRkIHR3byBjaGlsZHJlbiwgZG8KICogID4gYnVpbGRlci5jKCdjaGlsZDEnLCAuLi4pLnVwKCkuYygnY2hpbGQyJywgLi4uKQogKiAgVGhlIG5leHQgb3BlcmF0aW9uIG9uIHRoZSBCdWlsZGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhlIHNlY29uZCBjaGlsZC4KICovCgovKiogQ29uc3RydWN0b3I6IFN0cm9waGUuQnVpbGRlcgogKiAgQ3JlYXRlIGEgU3Ryb3BoZS5CdWlsZGVyIG9iamVjdC4KICoKICogIFRoZSBhdHRyaWJ1dGVzIHNob3VsZCBiZSBwYXNzZWQgaW4gb2JqZWN0IG5vdGF0aW9uLiAgRm9yIGV4YW1wbGUKICogID4gdmFyIGIgPSBuZXcgQnVpbGRlcignbWVzc2FnZScsIHt0bzogJ3lvdScsIGZyb206ICdtZSd9KTsKICogIG9yCiAqICA+IHZhciBiID0gbmV3IEJ1aWxkZXIoJ21lc3NzYWdlJywgeyd4bWw6bGFuZyc6ICdlbid9KTsKICoKICogIFBhcmFtZXRlcnM6CiAqICAgIChTdHJpbmcpIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50LgogKiAgICAoT2JqZWN0KSBhdHRycyAtIFRoZSBhdHRyaWJ1dGVzIGZvciB0aGUgcm9vdCBlbGVtZW50IGluIG9iamVjdCBub3RhdGlvbi4KICoKICogIFJldHVybnM6CiAqICAgIEEgbmV3IFN0cm9waGUuQnVpbGRlci4KICovClN0cm9waGUuQnVpbGRlciA9IGZ1bmN0aW9uIChuYW1lLCBhdHRycykKewogICAgLy8gU2V0IGNvcnJlY3QgbmFtZXNwYWNlIGZvciBqYWJiZXI6Y2xpZW50IGVsZW1lbnRzCiAgICBpZiAobmFtZSA9PSAicHJlc2VuY2UiIHx8IG5hbWUgPT0gIm1lc3NhZ2UiIHx8IG5hbWUgPT0gImlxIikgewogICAgICAgIGlmIChhdHRycyAmJiAhYXR0cnMueG1sbnMpIHsKICAgICAgICAgICAgYXR0cnMueG1sbnMgPSBTdHJvcGhlLk5TLkNMSUVOVDsKICAgICAgICB9IGVsc2UgaWYgKCFhdHRycykgewogICAgICAgICAgICBhdHRycyA9IHt4bWxuczogU3Ryb3BoZS5OUy5DTElFTlR9OwogICAgICAgIH0KICAgIH0KCiAgICAvLyBIb2xkcyB0aGUgdHJlZSBiZWluZyBidWlsdC4KICAgIHRoaXMubm9kZVRyZWUgPSBTdHJvcGhlLnhtbEVsZW1lbnQobmFtZSwgYXR0cnMpOwoKICAgIC8vIFBvaW50cyB0byB0aGUgY3VycmVudCBvcGVyYXRpb24gbm9kZS4KICAgIHRoaXMubm9kZSA9IHRoaXMubm9kZVRyZWU7Cn07CgpTdHJvcGhlLkJ1aWxkZXIucHJvdG90eXBlID0gewogICAgLyoqIEZ1bmN0aW9uOiB0cmVlCiAgICAgKiAgUmV0dXJuIHRoZSBET00gdHJlZS4KICAgICAqCiAgICAgKiAgVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXJyZW50IERPTSB0cmVlIGFzIGFuIGVsZW1lbnQgb2JqZWN0LiAgVGhpcwogICAgICogIGlzIHN1aXRhYmxlIGZvciBwYXNzaW5nIHRvIGZ1bmN0aW9ucyBsaWtlIFN0cm9waGUuQ29ubmVjdGlvbi5zZW5kKCkuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBUaGUgRE9NIHRyZWUgYXMgYSBlbGVtZW50IG9iamVjdC4KICAgICAqLwogICAgdHJlZTogZnVuY3Rpb24gKCkKICAgIHsKICAgICAgICByZXR1cm4gdGhpcy5ub2RlVHJlZTsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiB0b1N0cmluZwogICAgICogIFNlcmlhbGl6ZSB0aGUgRE9NIHRyZWUgdG8gYSBTdHJpbmcuCiAgICAgKgogICAgICogIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHN0cmluZyBzZXJpYWxpemF0aW9uIG9mIHRoZSBjdXJyZW50IERPTQogICAgICogIHRyZWUuICBJdCBpcyBvZnRlbiB1c2VkIGludGVybmFsbHkgdG8gcGFzcyBkYXRhIHRvIGEKICAgICAqICBTdHJvcGhlLlJlcXVlc3Qgb2JqZWN0LgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgVGhlIHNlcmlhbGl6ZWQgRE9NIHRyZWUgaW4gYSBTdHJpbmcuCiAgICAgKi8KICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIHJldHVybiBTdHJvcGhlLnNlcmlhbGl6ZSh0aGlzLm5vZGVUcmVlKTsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiB1cAogICAgICogIE1ha2UgdGhlIGN1cnJlbnQgcGFyZW50IGVsZW1lbnQgdGhlIG5ldyBjdXJyZW50IGVsZW1lbnQuCiAgICAgKgogICAgICogIFRoaXMgZnVuY3Rpb24gaXMgb2Z0ZW4gdXNlZCBhZnRlciBjKCkgdG8gdHJhdmVyc2UgYmFjayB1cCB0aGUgdHJlZS4KICAgICAqICBGb3IgZXhhbXBsZSwgdG8gYWRkIHR3byBjaGlsZHJlbiB0byB0aGUgc2FtZSBlbGVtZW50CiAgICAgKiAgPiBidWlsZGVyLmMoJ2NoaWxkMScsIHt9KS51cCgpLmMoJ2NoaWxkMicsIHt9KTsKICAgICAqCiAgICAgKiAgUmV0dXJuczoKICAgICAqICAgIFRoZSBTdG9waGUuQnVpbGRlciBvYmplY3QuCiAgICAgKi8KICAgIHVwOiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIHRoaXMubm9kZSA9IHRoaXMubm9kZS5wYXJlbnROb2RlOwogICAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IGF0dHJzCiAgICAgKiAgQWRkIG9yIG1vZGlmeSBhdHRyaWJ1dGVzIG9mIHRoZSBjdXJyZW50IGVsZW1lbnQuCiAgICAgKgogICAgICogIFRoZSBhdHRyaWJ1dGVzIHNob3VsZCBiZSBwYXNzZWQgaW4gb2JqZWN0IG5vdGF0aW9uLiAgVGhpcyBmdW5jdGlvbgogICAgICogIGRvZXMgbm90IG1vdmUgdGhlIGN1cnJlbnQgZWxlbWVudCBwb2ludGVyLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKE9iamVjdCkgbW9yZWF0dHJzIC0gVGhlIGF0dHJpYnV0ZXMgdG8gYWRkL21vZGlmeSBpbiBvYmplY3Qgbm90YXRpb24uCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBUaGUgU3Ryb3BoZS5CdWlsZGVyIG9iamVjdC4KICAgICAqLwogICAgYXR0cnM6IGZ1bmN0aW9uIChtb3JlYXR0cnMpCiAgICB7CiAgICAgICAgZm9yICh2YXIgayBpbiBtb3JlYXR0cnMpIHsKICAgICAgICAgICAgaWYgKG1vcmVhdHRycy5oYXNPd25Qcm9wZXJ0eShrKSkgewogICAgICAgICAgICAgICAgdGhpcy5ub2RlLnNldEF0dHJpYnV0ZShrLCBtb3JlYXR0cnNba10pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IGMKICAgICAqICBBZGQgYSBjaGlsZCB0byB0aGUgY3VycmVudCBlbGVtZW50IGFuZCBtYWtlIGl0IHRoZSBuZXcgY3VycmVudAogICAgICogIGVsZW1lbnQuCiAgICAgKgogICAgICogIFRoaXMgZnVuY3Rpb24gbW92ZXMgdGhlIGN1cnJlbnQgZWxlbWVudCBwb2ludGVyIHRvIHRoZSBjaGlsZCwKICAgICAqICB1bmxlc3MgdGV4dCBpcyBwcm92aWRlZC4gIElmIHlvdSBuZWVkIHRvIGFkZCBhbm90aGVyIGNoaWxkLCBpdAogICAgICogIGlzIG5lY2Vzc2FyeSB0byB1c2UgdXAoKSB0byBnbyBiYWNrIHRvIHRoZSBwYXJlbnQgaW4gdGhlIHRyZWUuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoU3RyaW5nKSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNoaWxkLgogICAgICogICAgKE9iamVjdCkgYXR0cnMgLSBUaGUgYXR0cmlidXRlcyBvZiB0aGUgY2hpbGQgaW4gb2JqZWN0IG5vdGF0aW9uLgogICAgICogICAgKFN0cmluZykgdGV4dCAtIFRoZSB0ZXh0IHRvIGFkZCB0byB0aGUgY2hpbGQuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBUaGUgU3Ryb3BoZS5CdWlsZGVyIG9iamVjdC4KICAgICAqLwogICAgYzogZnVuY3Rpb24gKG5hbWUsIGF0dHJzLCB0ZXh0KQogICAgewogICAgICAgIHZhciBjaGlsZCA9IFN0cm9waGUueG1sRWxlbWVudChuYW1lLCBhdHRycywgdGV4dCk7CiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGNoaWxkKTsKICAgICAgICBpZiAoIXRleHQpIHsKICAgICAgICAgICAgdGhpcy5ub2RlID0gY2hpbGQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IGNub2RlCiAgICAgKiAgQWRkIGEgY2hpbGQgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCBhbmQgbWFrZSBpdCB0aGUgbmV3IGN1cnJlbnQKICAgICAqICBlbGVtZW50LgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIGlzIHRoZSBzYW1lIGFzIGMoKSBleGNlcHQgdGhhdCBpbnN0ZWFkIG9mIHVzaW5nIGEKICAgICAqICBuYW1lIGFuZCBhbiBhdHRyaWJ1dGVzIG9iamVjdCB0byBjcmVhdGUgdGhlIGNoaWxkIGl0IHVzZXMgYW4KICAgICAqICBleGlzdGluZyBET00gZWxlbWVudCBvYmplY3QuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoWE1MRWxlbWVudCkgZWxlbSAtIEEgRE9NIGVsZW1lbnQuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBUaGUgU3Ryb3BoZS5CdWlsZGVyIG9iamVjdC4KICAgICAqLwogICAgY25vZGU6IGZ1bmN0aW9uIChlbGVtKQogICAgewogICAgICAgIHZhciBpbXBOb2RlOwogICAgICAgIHZhciB4bWxHZW4gPSBTdHJvcGhlLnhtbEdlbmVyYXRvcigpOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGltcE5vZGUgPSAoeG1sR2VuLmltcG9ydE5vZGUgIT09IHVuZGVmaW5lZCk7CiAgICAgICAgfQogICAgICAgIGNhdGNoIChlKSB7CiAgICAgICAgICAgIGltcE5vZGUgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgdmFyIG5ld0VsZW0gPSBpbXBOb2RlID8KICAgICAgICAgICAgICAgICAgICAgIHhtbEdlbi5pbXBvcnROb2RlKGVsZW0sIHRydWUpIDoKICAgICAgICAgICAgICAgICAgICAgIFN0cm9waGUuY29weUVsZW1lbnQoZWxlbSk7CiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKG5ld0VsZW0pOwogICAgICAgIHRoaXMubm9kZSA9IG5ld0VsZW07CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogdAogICAgICogIEFkZCBhIGNoaWxkIHRleHQgZWxlbWVudC4KICAgICAqCiAgICAgKiAgVGhpcyAqZG9lcyBub3QqIG1ha2UgdGhlIGNoaWxkIHRoZSBuZXcgY3VycmVudCBlbGVtZW50IHNpbmNlIHRoZXJlCiAgICAgKiAgYXJlIG5vIGNoaWxkcmVuIG9mIHRleHQgZWxlbWVudHMuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoU3RyaW5nKSB0ZXh0IC0gVGhlIHRleHQgZGF0YSB0byBhcHBlbmQgdG8gdGhlIGN1cnJlbnQgZWxlbWVudC4KICAgICAqCiAgICAgKiAgUmV0dXJuczoKICAgICAqICAgIFRoZSBTdHJvcGhlLkJ1aWxkZXIgb2JqZWN0LgogICAgICovCiAgICB0OiBmdW5jdGlvbiAodGV4dCkKICAgIHsKICAgICAgICB2YXIgY2hpbGQgPSBTdHJvcGhlLnhtbFRleHROb2RlKHRleHQpOwogICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogaAogICAgICogIFJlcGxhY2UgY3VycmVudCBlbGVtZW50IGNvbnRlbnRzIHdpdGggdGhlIEhUTUwgcGFzc2VkIGluLgogICAgICoKICAgICAqICBUaGlzICpkb2VzIG5vdCogbWFrZSB0aGUgY2hpbGQgdGhlIG5ldyBjdXJyZW50IGVsZW1lbnQKICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChTdHJpbmcpIGh0bWwgLSBUaGUgaHRtbCB0byBpbnNlcnQgYXMgY29udGVudHMgb2YgY3VycmVudCBlbGVtZW50LgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgVGhlIFN0cm9waGUuQnVpbGRlciBvYmplY3QuCiAgICAgKi8KICAgIGg6IGZ1bmN0aW9uIChodG1sKQogICAgewogICAgICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTsKCiAgICAgICAgLy8gZm9yY2UgdGhlIGJyb3dzZXIgdG8gdHJ5IGFuZCBmaXggYW55IGludmFsaWQgSFRNTCB0YWdzCiAgICAgICAgZnJhZ21lbnQuaW5uZXJIVE1MID0gaHRtbDsKCiAgICAgICAgLy8gY29weSBjbGVhbmVkIGh0bWwgaW50byBhbiB4bWwgZG9tCiAgICAgICAgdmFyIHhodG1sID0gU3Ryb3BoZS5jcmVhdGVIdG1sKGZyYWdtZW50KTsKCiAgICAgICAgd2hpbGUoeGh0bWwuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZCh4aHRtbC5jaGlsZE5vZGVzWzBdKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9Cn07CgovKiogUHJpdmF0ZUNsYXNzOiBTdHJvcGhlLkhhbmRsZXIKICogIF9Qcml2YXRlXyBoZWxwZXIgY2xhc3MgZm9yIG1hbmFnaW5nIHN0YW56YSBoYW5kbGVycy4KICoKICogIEEgU3Ryb3BoZS5IYW5kbGVyIGVuY2Fwc3VsYXRlcyBhIHVzZXIgcHJvdmlkZWQgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUKICogIGV4ZWN1dGVkIHdoZW4gbWF0Y2hpbmcgc3RhbnphcyBhcmUgcmVjZWl2ZWQgYnkgdGhlIGNvbm5lY3Rpb24uCiAqICBIYW5kbGVycyBjYW4gYmUgZWl0aGVyIG9uZS1vZmYgb3IgcGVyc2lzdGFudCBkZXBlbmRpbmcgb24gdGhlaXIKICogIHJldHVybiB2YWx1ZS4gUmV0dXJuaW5nIHRydWUgd2lsbCBjYXVzZSBhIEhhbmRsZXIgdG8gcmVtYWluIGFjdGl2ZSwgYW5kCiAqICByZXR1cm5pbmcgZmFsc2Ugd2lsbCByZW1vdmUgdGhlIEhhbmRsZXIuCiAqCiAqICBVc2VycyB3aWxsIG5vdCB1c2UgU3Ryb3BoZS5IYW5kbGVyIG9iamVjdHMgZGlyZWN0bHksIGJ1dCBpbnN0ZWFkIHRoZXkKICogIHdpbGwgdXNlIFN0cm9waGUuQ29ubmVjdGlvbi5hZGRIYW5kbGVyKCkgYW5kCiAqICBTdHJvcGhlLkNvbm5lY3Rpb24uZGVsZXRlSGFuZGxlcigpLgogKi8KCi8qKiBQcml2YXRlQ29uc3RydWN0b3I6IFN0cm9waGUuSGFuZGxlcgogKiAgQ3JlYXRlIGFuZCBpbml0aWFsaXplIGEgbmV3IFN0cm9waGUuSGFuZGxlci4KICoKICogIFBhcmFtZXRlcnM6CiAqICAgIChGdW5jdGlvbikgaGFuZGxlciAtIEEgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgaGFuZGxlciBpcyBydW4uCiAqICAgIChTdHJpbmcpIG5zIC0gVGhlIG5hbWVzcGFjZSB0byBtYXRjaC4KICogICAgKFN0cmluZykgbmFtZSAtIFRoZSBlbGVtZW50IG5hbWUgdG8gbWF0Y2guCiAqICAgIChTdHJpbmcpIHR5cGUgLSBUaGUgZWxlbWVudCB0eXBlIHRvIG1hdGNoLgogKiAgICAoU3RyaW5nKSBpZCAtIFRoZSBlbGVtZW50IGlkIGF0dHJpYnV0ZSB0byBtYXRjaC4KICogICAgKFN0cmluZykgZnJvbSAtIFRoZSBlbGVtZW50IGZyb20gYXR0cmlidXRlIHRvIG1hdGNoLgogKiAgICAoT2JqZWN0KSBvcHRpb25zIC0gSGFuZGxlciBvcHRpb25zCiAqCiAqICBSZXR1cm5zOgogKiAgICBBIG5ldyBTdHJvcGhlLkhhbmRsZXIgb2JqZWN0LgogKi8KU3Ryb3BoZS5IYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIsIG5zLCBuYW1lLCB0eXBlLCBpZCwgZnJvbSwgb3B0aW9ucykKewogICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjsKICAgIHRoaXMubnMgPSBuczsKICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICB0aGlzLnR5cGUgPSB0eXBlOwogICAgdGhpcy5pZCA9IGlkOwogICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7bWF0Y2hCYXJlOiBmYWxzZX07CgogICAgLy8gZGVmYXVsdCBtYXRjaEJhcmUgdG8gZmFsc2UgaWYgdW5kZWZpbmVkCiAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXRjaEJhcmUpIHsKICAgICAgICB0aGlzLm9wdGlvbnMubWF0Y2hCYXJlID0gZmFsc2U7CiAgICB9CgogICAgaWYgKHRoaXMub3B0aW9ucy5tYXRjaEJhcmUpIHsKICAgICAgICB0aGlzLmZyb20gPSBmcm9tID8gU3Ryb3BoZS5nZXRCYXJlSmlkRnJvbUppZChmcm9tKSA6IG51bGw7CiAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZnJvbSA9IGZyb207CiAgICB9CgogICAgLy8gd2hldGhlciB0aGUgaGFuZGxlciBpcyBhIHVzZXIgaGFuZGxlciBvciBhIHN5c3RlbSBoYW5kbGVyCiAgICB0aGlzLnVzZXIgPSB0cnVlOwp9OwoKU3Ryb3BoZS5IYW5kbGVyLnByb3RvdHlwZSA9IHsKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IGlzTWF0Y2gKICAgICAqICBUZXN0cyBpZiBhIHN0YW56YSBtYXRjaGVzIHRoZSBTdHJvcGhlLkhhbmRsZXIuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoWE1MRWxlbWVudCkgZWxlbSAtIFRoZSBYTUwgZWxlbWVudCB0byB0ZXN0LgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgdHJ1ZSBpZiB0aGUgc3RhbnphIG1hdGNoZXMgYW5kIGZhbHNlIG90aGVyd2lzZS4KICAgICAqLwogICAgaXNNYXRjaDogZnVuY3Rpb24gKGVsZW0pCiAgICB7CiAgICAgICAgdmFyIG5zTWF0Y2g7CiAgICAgICAgdmFyIGZyb20gPSBudWxsOwoKICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hdGNoQmFyZSkgewogICAgICAgICAgICBmcm9tID0gU3Ryb3BoZS5nZXRCYXJlSmlkRnJvbUppZChlbGVtLmdldEF0dHJpYnV0ZSgnZnJvbScpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmcm9tID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ2Zyb20nKTsKICAgICAgICB9CgogICAgICAgIG5zTWF0Y2ggPSBmYWxzZTsKICAgICAgICBpZiAoIXRoaXMubnMpIHsKICAgICAgICAgICAgbnNNYXRjaCA9IHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICAgICAgICBTdHJvcGhlLmZvckVhY2hDaGlsZChlbGVtLCBudWxsLCBmdW5jdGlvbiAoZWxlbSkgewogICAgICAgICAgICAgICAgaWYgKGVsZW0uZ2V0QXR0cmlidXRlKCJ4bWxucyIpID09IHRoYXQubnMpIHsKICAgICAgICAgICAgICAgICAgICBuc01hdGNoID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBuc01hdGNoID0gbnNNYXRjaCB8fCBlbGVtLmdldEF0dHJpYnV0ZSgieG1sbnMiKSA9PSB0aGlzLm5zOwogICAgICAgIH0KCiAgICAgICAgaWYgKG5zTWF0Y2ggJiYKICAgICAgICAgICAgKCF0aGlzLm5hbWUgfHwgU3Ryb3BoZS5pc1RhZ0VxdWFsKGVsZW0sIHRoaXMubmFtZSkpICYmCiAgICAgICAgICAgICghdGhpcy50eXBlIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCJ0eXBlIikgPT0gdGhpcy50eXBlKSAmJgogICAgICAgICAgICAoIXRoaXMuaWQgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoImlkIikgPT0gdGhpcy5pZCkgJiYKICAgICAgICAgICAgKCF0aGlzLmZyb20gfHwgZnJvbSA9PSB0aGlzLmZyb20pKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogcnVuCiAgICAgKiAgUnVuIHRoZSBjYWxsYmFjayBvbiBhIG1hdGNoaW5nIHN0YW56YS4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChYTUxFbGVtZW50KSBlbGVtIC0gVGhlIERPTSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZQogICAgICogICAgICBTdHJvcGhlLkhhbmRsZXIuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBBIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgaGFuZGxlciBzaG91bGQgcmVtYWluIGFjdGl2ZS4KICAgICAqLwogICAgcnVuOiBmdW5jdGlvbiAoZWxlbSkKICAgIHsKICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDsKICAgICAgICB0cnkgewogICAgICAgICAgICByZXN1bHQgPSB0aGlzLmhhbmRsZXIoZWxlbSk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICBpZiAoZS5zb3VyY2VVUkwpIHsKICAgICAgICAgICAgICAgIFN0cm9waGUuZmF0YWwoImVycm9yOiAiICsgdGhpcy5oYW5kbGVyICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAiICsgZS5zb3VyY2VVUkwgKyAiOiIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmxpbmUgKyAiIC0gIiArIGUubmFtZSArICI6ICIgKyBlLm1lc3NhZ2UpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGUuZmlsZU5hbWUpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoY29uc29sZSkgIT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLnRyYWNlKCk7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcih0aGlzLmhhbmRsZXIsICIgLSBlcnJvciAtICIsIGUsIGUubWVzc2FnZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBTdHJvcGhlLmZhdGFsKCJlcnJvcjogIiArIHRoaXMuaGFuZGxlciArICIgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZmlsZU5hbWUgKyAiOiIgKyBlLmxpbmVOdW1iZXIgKyAiIC0gIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUubmFtZSArICI6ICIgKyBlLm1lc3NhZ2UpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgU3Ryb3BoZS5mYXRhbCgiZXJyb3I6ICIgKyBlLm1lc3NhZ2UgKyAiXG4iICsgZS5zdGFjayk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiB0b1N0cmluZwogICAgICogIEdldCBhIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgU3Ryb3BoZS5IYW5kbGVyIG9iamVjdC4KICAgICAqCiAgICAgKiAgUmV0dXJuczoKICAgICAqICAgIEEgU3RyaW5nLgogICAgICovCiAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkKICAgIHsKICAgICAgICByZXR1cm4gIntIYW5kbGVyOiAiICsgdGhpcy5oYW5kbGVyICsgIigiICsgdGhpcy5uYW1lICsgIiwiICsKICAgICAgICAgICAgdGhpcy5pZCArICIsIiArIHRoaXMubnMgKyAiKX0iOwogICAgfQp9OwoKLyoqIFByaXZhdGVDbGFzczogU3Ryb3BoZS5UaW1lZEhhbmRsZXIKICogIF9Qcml2YXRlXyBoZWxwZXIgY2xhc3MgZm9yIG1hbmFnaW5nIHRpbWVkIGhhbmRsZXJzLgogKgogKiAgQSBTdHJvcGhlLlRpbWVkSGFuZGxlciBlbmNhcHN1bGF0ZXMgYSB1c2VyIHByb3ZpZGVkIGNhbGxiYWNrIHRoYXQKICogIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgYSBjZXJ0YWluIHBlcmlvZCBvZiB0aW1lIG9yIGF0IHJlZ3VsYXIKICogIGludGVydmFscy4gIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGNhbGxiYWNrIGRldGVybWluZXMgd2hldGhlciB0aGUKICogIFN0cm9waGUuVGltZWRIYW5kbGVyIHdpbGwgY29udGludWUgdG8gZmlyZS4KICoKICogIFVzZXJzIHdpbGwgbm90IHVzZSBTdHJvcGhlLlRpbWVkSGFuZGxlciBvYmplY3RzIGRpcmVjdGx5LCBidXQgaW5zdGVhZAogKiAgdGhleSB3aWxsIHVzZSBTdHJvcGhlLkNvbm5lY3Rpb24uYWRkVGltZWRIYW5kbGVyKCkgYW5kCiAqICBTdHJvcGhlLkNvbm5lY3Rpb24uZGVsZXRlVGltZWRIYW5kbGVyKCkuCiAqLwoKLyoqIFByaXZhdGVDb25zdHJ1Y3RvcjogU3Ryb3BoZS5UaW1lZEhhbmRsZXIKICogIENyZWF0ZSBhbmQgaW5pdGlhbGl6ZSBhIG5ldyBTdHJvcGhlLlRpbWVkSGFuZGxlciBvYmplY3QuCiAqCiAqICBQYXJhbWV0ZXJzOgogKiAgICAoSW50ZWdlcikgcGVyaW9kIC0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgdGhlCiAqICAgICAgaGFuZGxlciBpcyBjYWxsZWQuCiAqICAgIChGdW5jdGlvbikgaGFuZGxlciAtIFRoZSBjYWxsYmFjayB0byBydW4gd2hlbiB0aGUgaGFuZGxlciBmaXJlcy4gIFRoaXMKICogICAgICBmdW5jdGlvbiBzaG91bGQgdGFrZSBubyBhcmd1bWVudHMuCiAqCiAqICBSZXR1cm5zOgogKiAgICBBIG5ldyBTdHJvcGhlLlRpbWVkSGFuZGxlciBvYmplY3QuCiAqLwpTdHJvcGhlLlRpbWVkSGFuZGxlciA9IGZ1bmN0aW9uIChwZXJpb2QsIGhhbmRsZXIpCnsKICAgIHRoaXMucGVyaW9kID0gcGVyaW9kOwogICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjsKCiAgICB0aGlzLmxhc3RDYWxsZWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgIHRoaXMudXNlciA9IHRydWU7Cn07CgpTdHJvcGhlLlRpbWVkSGFuZGxlci5wcm90b3R5cGUgPSB7CiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBydW4KICAgICAqICBSdW4gdGhlIGNhbGxiYWNrIGZvciB0aGUgU3Ryb3BoZS5UaW1lZEhhbmRsZXIuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICB0cnVlIGlmIHRoZSBTdHJvcGhlLlRpbWVkSGFuZGxlciBzaG91bGQgYmUgY2FsbGVkIGFnYWluLCBhbmQgZmFsc2UKICAgICAqICAgICAgb3RoZXJ3aXNlLgogICAgICovCiAgICBydW46IGZ1bmN0aW9uICgpCiAgICB7CiAgICAgICAgdGhpcy5sYXN0Q2FsbGVkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlcigpOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiByZXNldAogICAgICogIFJlc2V0IHRoZSBsYXN0IGNhbGxlZCB0aW1lIGZvciB0aGUgU3Ryb3BoZS5UaW1lZEhhbmRsZXIuCiAgICAgKi8KICAgIHJlc2V0OiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIHRoaXMubGFzdENhbGxlZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiB0b1N0cmluZwogICAgICogIEdldCBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgU3Ryb3BoZS5UaW1lZEhhbmRsZXIgb2JqZWN0LgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbi4KICAgICAqLwogICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpCiAgICB7CiAgICAgICAgcmV0dXJuICJ7VGltZWRIYW5kbGVyOiAiICsgdGhpcy5oYW5kbGVyICsgIigiICsgdGhpcy5wZXJpb2QgKyIpfSI7CiAgICB9Cn07CgovKiogQ2xhc3M6IFN0cm9waGUuQ29ubmVjdGlvbgogKiAgWE1QUCBDb25uZWN0aW9uIG1hbmFnZXIuCiAqCiAqICBUaGlzIGNsYXNzIGlzIHRoZSBtYWluIHBhcnQgb2YgU3Ryb3BoZS4gIEl0IG1hbmFnZXMgYSBCT1NIIGNvbm5lY3Rpb24KICogIHRvIGFuIFhNUFAgc2VydmVyIGFuZCBkaXNwYXRjaGVzIGV2ZW50cyB0byB0aGUgdXNlciBjYWxsYmFja3MgYXMKICogIGRhdGEgYXJyaXZlcy4gIEl0IHN1cHBvcnRzIFNBU0wgUExBSU4sIFNBU0wgRElHRVNULU1ENSwgU0FTTCBTQ1JBTS1TSEExCiAqICBhbmQgbGVnYWN5IGF1dGhlbnRpY2F0aW9uLgogKgogKiAgQWZ0ZXIgY3JlYXRpbmcgYSBTdHJvcGhlLkNvbm5lY3Rpb24gb2JqZWN0LCB0aGUgdXNlciB3aWxsIHR5cGljYWxseQogKiAgY2FsbCBjb25uZWN0KCkgd2l0aCBhIHVzZXIgc3VwcGxpZWQgY2FsbGJhY2sgdG8gaGFuZGxlIGNvbm5lY3Rpb24gbGV2ZWwKICogIGV2ZW50cyBsaWtlIGF1dGhlbnRpY2F0aW9uIGZhaWx1cmUsIGRpc2Nvbm5lY3Rpb24sIG9yIGNvbm5lY3Rpb24KICogIGNvbXBsZXRlLgogKgogKiAgVGhlIHVzZXIgd2lsbCBhbHNvIGhhdmUgc2V2ZXJhbCBldmVudCBoYW5kbGVycyBkZWZpbmVkIGJ5IHVzaW5nCiAqICBhZGRIYW5kbGVyKCkgYW5kIGFkZFRpbWVkSGFuZGxlcigpLiAgVGhlc2Ugd2lsbCBhbGxvdyB0aGUgdXNlciBjb2RlIHRvCiAqICByZXNwb25kIHRvIGludGVyZXN0aW5nIHN0YW56YXMgb3IgZG8gc29tZXRoaW5nIHBlcmlvZGljYWxseSB3aXRoIHRoZQogKiAgY29ubmVjdGlvbi4gIFRoZXNlIGhhbmRsZXJzIHdpbGwgYmUgYWN0aXZlIG9uY2UgYXV0aGVudGljYXRpb24gaXMKICogIGZpbmlzaGVkLgogKgogKiAgVG8gc2VuZCBkYXRhIHRvIHRoZSBjb25uZWN0aW9uLCB1c2Ugc2VuZCgpLgogKi8KCi8qKiBDb25zdHJ1Y3RvcjogU3Ryb3BoZS5Db25uZWN0aW9uCiAqICBDcmVhdGUgYW5kIGluaXRpYWxpemUgYSBTdHJvcGhlLkNvbm5lY3Rpb24gb2JqZWN0LgogKgogKiAgVGhlIHRyYW5zcG9ydC1wcm90b2NvbCBmb3IgdGhpcyBjb25uZWN0aW9uIHdpbGwgYmUgY2hvc2VuIGF1dG9tYXRpY2FsbHkKICogIGJhc2VkIG9uIHRoZSBnaXZlbiBzZXJ2aWNlIHBhcmFtZXRlci4gVVJMcyBzdGFydGluZyB3aXRoICJ3czovLyIgb3IKICogICJ3c3M6Ly8iIHdpbGwgdXNlIFdlYlNvY2tldHMsIFVSTHMgc3RhcnRpbmcgd2l0aCAiaHR0cDovLyIsICJodHRwczovLyIKICogIG9yIHdpdGhvdXQgYSBwcm90b2NvbCB3aWxsIHVzZSBCT1NILgogKgogKiAgVG8gbWFrZSBTdHJvcGhlIGNvbm5lY3QgdG8gdGhlIGN1cnJlbnQgaG9zdCB5b3UgY2FuIGxlYXZlIG91dCB0aGUgcHJvdG9jb2wKICogIGFuZCBob3N0IHBhcnQgYW5kIGp1c3QgcGFzcyB0aGUgcGF0aCwgZS5nLgogKgogKiAgPiB2YXIgY29ubiA9IG5ldyBTdHJvcGhlLkNvbm5lY3Rpb24oIi9odHRwLWJpbmQvIik7CiAqCiAqICBXZWJTb2NrZXQgb3B0aW9uczoKICoKICogIElmIHlvdSB3YW50IHRvIGNvbm5lY3QgdG8gdGhlIGN1cnJlbnQgaG9zdCB3aXRoIGEgV2ViU29ja2V0IGNvbm5lY3Rpb24geW91CiAqICBjYW4gdGVsbCBTdHJvcGhlIHRvIHVzZSBXZWJTb2NrZXRzIHRocm91Z2ggYSAicHJvdG9jb2wiIGF0dHJpYnV0ZSBpbiB0aGUKICogIG9wdGlvbmFsIG9wdGlvbnMgcGFyYW1ldGVyLiBWYWxpZCB2YWx1ZXMgYXJlICJ3cyIgZm9yIFdlYlNvY2tldCBhbmQgIndzcyIKICogIGZvciBTZWN1cmUgV2ViU29ja2V0LgogKiAgU28gdG8gY29ubmVjdCB0byAid3NzOi8vQ1VSUkVOVF9IT1NUTkFNRS94bXBwLXdlYnNvY2tldCIgeW91IHdvdWxkIGNhbGwKICoKICogID4gdmFyIGNvbm4gPSBuZXcgU3Ryb3BoZS5Db25uZWN0aW9uKCIveG1wcC13ZWJzb2NrZXQvIiwge3Byb3RvY29sOiAid3NzIn0pOwogKgogKiAgTm90ZSB0aGF0IHJlbGF0aXZlIFVSTHMgX05PVF8gc3RhcnRpbmcgd2l0aCBhICIvIiB3aWxsIGFsc28gaW5jbHVkZSB0aGUgcGF0aAogKiAgb2YgdGhlIGN1cnJlbnQgc2l0ZS4KICoKICogIEFsc28gYmVjYXVzZSBkb3duZ3JhZGluZyBzZWN1cml0eSBpcyBub3QgcGVybWl0dGVkIGJ5IGJyb3dzZXJzLCB3aGVuIHVzaW5nCiAqICByZWxhdGl2ZSBVUkxzIGJvdGggQk9TSCBhbmQgV2ViU29ja2V0IGNvbm5lY3Rpb25zIHdpbGwgdXNlIHRoZWlyIHNlY3VyZQogKiAgdmFyaWFudHMgaWYgdGhlIGN1cnJlbnQgY29ubmVjdGlvbiB0byB0aGUgc2l0ZSBpcyBhbHNvIHNlY3VyZSAoaHR0cHMpLgogKgogKiAgQk9TSCBvcHRpb25zOgogKgogKiAgYnkgYWRkaW5nICJzeW5jIiB0byB0aGUgb3B0aW9ucywgeW91IGNhbiBjb250cm9sIGlmIHJlcXVlc3RzIHdpbGwKICogIGJlIG1hZGUgc3luY2hyb25vdXNseSBvciBub3QuIFRoZSBkZWZhdWx0IGJlaGF2aW91ciBpcyBhc3luY2hyb25vdXMuCiAqICBJZiB5b3Ugd2FudCB0byBtYWtlIHJlcXVlc3RzIHN5bmNocm9ub3VzLCBtYWtlICJzeW5jIiBldmFsdWF0ZSB0byB0cnVlOgogKiAgPiB2YXIgY29ubiA9IG5ldyBTdHJvcGhlLkNvbm5lY3Rpb24oIi9odHRwLWJpbmQvIiwge3N5bmM6IHRydWV9KTsKICogIFlvdSBjYW4gYWxzbyB0b2dnbGUgdGhpcyBvbiBhbiBhbHJlYWR5IGVzdGFibGlzaGVkIGNvbm5lY3Rpb246CiAqICA+IGNvbm4ub3B0aW9ucy5zeW5jID0gdHJ1ZTsKICoKICoKICogIFBhcmFtZXRlcnM6CiAqICAgIChTdHJpbmcpIHNlcnZpY2UgLSBUaGUgQk9TSCBvciBXZWJTb2NrZXQgc2VydmljZSBVUkwuCiAqICAgIChPYmplY3QpIG9wdGlvbnMgLSBBIGhhc2ggb2YgY29uZmlndXJhdGlvbiBvcHRpb25zCiAqCiAqICBSZXR1cm5zOgogKiAgICBBIG5ldyBTdHJvcGhlLkNvbm5lY3Rpb24gb2JqZWN0LgogKi8KU3Ryb3BoZS5Db25uZWN0aW9uID0gZnVuY3Rpb24gKHNlcnZpY2UsIG9wdGlvbnMpCnsKICAgIC8vIFRoZSBzZXJ2aWNlIFVSTAogICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTsKCiAgICAvLyBDb25maWd1cmF0aW9uIG9wdGlvbnMKICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICB2YXIgcHJvdG8gPSB0aGlzLm9wdGlvbnMucHJvdG9jb2wgfHwgIiI7CgogICAgLy8gU2VsZWN0IHByb3RvY2FsIGJhc2VkIG9uIHNlcnZpY2Ugb3Igb3B0aW9ucwogICAgaWYgKHNlcnZpY2UuaW5kZXhPZigid3M6IikgPT09IDAgfHwgc2VydmljZS5pbmRleE9mKCJ3c3M6IikgPT09IDAgfHwKICAgICAgICAgICAgcHJvdG8uaW5kZXhPZigid3MiKSA9PT0gMCkgewogICAgICAgIHRoaXMuX3Byb3RvID0gbmV3IFN0cm9waGUuV2Vic29ja2V0KHRoaXMpOwogICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9wcm90byA9IG5ldyBTdHJvcGhlLkJvc2godGhpcyk7CiAgICB9CiAgICAvKiBUaGUgY29ubmVjdGVkIEpJRC4gKi8KICAgIHRoaXMuamlkID0gIiI7CiAgICAvKiB0aGUgSklEcyBkb21haW4gKi8KICAgIHRoaXMuZG9tYWluID0gbnVsbDsKICAgIC8qIHN0cmVhbTpmZWF0dXJlcyAqLwogICAgdGhpcy5mZWF0dXJlcyA9IG51bGw7CgogICAgLy8gU0FTTAogICAgdGhpcy5fc2FzbF9kYXRhID0ge307CiAgICB0aGlzLmRvX3Nlc3Npb24gPSBmYWxzZTsKICAgIHRoaXMuZG9fYmluZCA9IGZhbHNlOwoKICAgIC8vIGhhbmRsZXIgbGlzdHMKICAgIHRoaXMudGltZWRIYW5kbGVycyA9IFtdOwogICAgdGhpcy5oYW5kbGVycyA9IFtdOwogICAgdGhpcy5yZW1vdmVUaW1lZHMgPSBbXTsKICAgIHRoaXMucmVtb3ZlSGFuZGxlcnMgPSBbXTsKICAgIHRoaXMuYWRkVGltZWRzID0gW107CiAgICB0aGlzLmFkZEhhbmRsZXJzID0gW107CgogICAgdGhpcy5fYXV0aGVudGljYXRpb24gPSB7fTsKICAgIHRoaXMuX2lkbGVUaW1lb3V0ID0gbnVsbDsKICAgIHRoaXMuX2Rpc2Nvbm5lY3RUaW1lb3V0ID0gbnVsbDsKCiAgICB0aGlzLmRvX2F1dGhlbnRpY2F0aW9uID0gdHJ1ZTsKICAgIHRoaXMuYXV0aGVudGljYXRlZCA9IGZhbHNlOwogICAgdGhpcy5kaXNjb25uZWN0aW5nID0gZmFsc2U7CiAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlOwoKICAgIHRoaXMuZXJyb3JzID0gMDsKCiAgICB0aGlzLnBhdXNlZCA9IGZhbHNlOwoKICAgIHRoaXMuX2RhdGEgPSBbXTsKICAgIHRoaXMuX3VuaXF1ZUlkID0gMDsKCiAgICB0aGlzLl9zYXNsX3N1Y2Nlc3NfaGFuZGxlciA9IG51bGw7CiAgICB0aGlzLl9zYXNsX2ZhaWx1cmVfaGFuZGxlciA9IG51bGw7CiAgICB0aGlzLl9zYXNsX2NoYWxsZW5nZV9oYW5kbGVyID0gbnVsbDsKCiAgICAvLyBNYXggcmV0cmllcyBiZWZvcmUgZGlzY29ubmVjdGluZwogICAgdGhpcy5tYXhSZXRyaWVzID0gNTsKCiAgICAvLyBzZXR1cCBvbklkbGUgY2FsbGJhY2sgZXZlcnkgMS8xMHRoIG9mIGEgc2Vjb25kCiAgICB0aGlzLl9pZGxlVGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5fb25JZGxlLmJpbmQodGhpcyksIDEwMCk7CgogICAgLy8gaW5pdGlhbGl6ZSBwbHVnaW5zCiAgICBmb3IgKHZhciBrIGluIFN0cm9waGUuX2Nvbm5lY3Rpb25QbHVnaW5zKSB7CiAgICAgICAgaWYgKFN0cm9waGUuX2Nvbm5lY3Rpb25QbHVnaW5zLmhhc093blByb3BlcnR5KGspKSB7CiAgICAgICAgICAgIHZhciBwdHlwZSA9IFN0cm9waGUuX2Nvbm5lY3Rpb25QbHVnaW5zW2tdOwogICAgICAgICAgICAvLyBqc2xpbnQgY29tcGxhaW50cyBhYm91dCB0aGUgYmVsb3cgbGluZSwgYnV0IHRoaXMgaXMgZmluZQogICAgICAgICAgICB2YXIgRiA9IGZ1bmN0aW9uICgpIHt9OyAvLyBqc2hpbnQgaWdub3JlOmxpbmUKICAgICAgICAgICAgRi5wcm90b3R5cGUgPSBwdHlwZTsKICAgICAgICAgICAgdGhpc1trXSA9IG5ldyBGKCk7CiAgICAgICAgICAgIHRoaXNba10uaW5pdCh0aGlzKTsKICAgICAgICB9CiAgICB9Cn07CgpTdHJvcGhlLkNvbm5lY3Rpb24ucHJvdG90eXBlID0gewogICAgLyoqIEZ1bmN0aW9uOiByZXNldAogICAgICogIFJlc2V0IHRoZSBjb25uZWN0aW9uLgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgYSBjb25uZWN0aW9uIGlzIGRpc2Nvbm5lY3RlZAogICAgICogIGJlZm9yZSB0aGF0IGNvbm5lY3Rpb24gaXMgcmV1c2VkLgogICAgICovCiAgICByZXNldDogZnVuY3Rpb24gKCkKICAgIHsKICAgICAgICB0aGlzLl9wcm90by5fcmVzZXQoKTsKCiAgICAgICAgLy8gU0FTTAogICAgICAgIHRoaXMuZG9fc2Vzc2lvbiA9IGZhbHNlOwogICAgICAgIHRoaXMuZG9fYmluZCA9IGZhbHNlOwoKICAgICAgICAvLyBoYW5kbGVyIGxpc3RzCiAgICAgICAgdGhpcy50aW1lZEhhbmRsZXJzID0gW107CiAgICAgICAgdGhpcy5oYW5kbGVycyA9IFtdOwogICAgICAgIHRoaXMucmVtb3ZlVGltZWRzID0gW107CiAgICAgICAgdGhpcy5yZW1vdmVIYW5kbGVycyA9IFtdOwogICAgICAgIHRoaXMuYWRkVGltZWRzID0gW107CiAgICAgICAgdGhpcy5hZGRIYW5kbGVycyA9IFtdOwogICAgICAgIHRoaXMuX2F1dGhlbnRpY2F0aW9uID0ge307CgogICAgICAgIHRoaXMuYXV0aGVudGljYXRlZCA9IGZhbHNlOwogICAgICAgIHRoaXMuZGlzY29ubmVjdGluZyA9IGZhbHNlOwogICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7CgogICAgICAgIHRoaXMuZXJyb3JzID0gMDsKCiAgICAgICAgdGhpcy5fcmVxdWVzdHMgPSBbXTsKICAgICAgICB0aGlzLl91bmlxdWVJZCA9IDA7CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogcGF1c2UKICAgICAqICBQYXVzZSB0aGUgcmVxdWVzdCBtYW5hZ2VyLgogICAgICoKICAgICAqICBUaGlzIHdpbGwgcHJldmVudCBTdHJvcGhlIGZyb20gc2VuZGluZyBhbnkgbW9yZSByZXF1ZXN0cyB0byB0aGUKICAgICAqICBzZXJ2ZXIuICBUaGlzIGlzIHZlcnkgdXNlZnVsIGZvciB0ZW1wb3JhcmlseSBwYXVzaW5nCiAgICAgKiAgQk9TSC1Db25uZWN0aW9ucyB3aGlsZSBhIGxvdCBvZiBzZW5kKCkgY2FsbHMgYXJlIGhhcHBlbmluZyBxdWlja2x5LgogICAgICogIFRoaXMgY2F1c2VzIFN0cm9waGUgdG8gc2VuZCB0aGUgZGF0YSBpbiBhIHNpbmdsZSByZXF1ZXN0LCBzYXZpbmcKICAgICAqICBtYW55IHJlcXVlc3QgdHJpcHMuCiAgICAgKi8KICAgIHBhdXNlOiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIHRoaXMucGF1c2VkID0gdHJ1ZTsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiByZXN1bWUKICAgICAqICBSZXN1bWUgdGhlIHJlcXVlc3QgbWFuYWdlci4KICAgICAqCiAgICAgKiAgVGhpcyByZXN1bWVzIGFmdGVyIHBhdXNlKCkgaGFzIGJlZW4gY2FsbGVkLgogICAgICovCiAgICByZXN1bWU6IGZ1bmN0aW9uICgpCiAgICB7CiAgICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiBnZXRVbmlxdWVJZAogICAgICogIEdlbmVyYXRlIGEgdW5pcXVlIElEIGZvciB1c2UgaW4gPGlxLz4gZWxlbWVudHMuCiAgICAgKgogICAgICogIEFsbCA8aXEvPiBzdGFuemFzIGFyZSByZXF1aXJlZCB0byBoYXZlIHVuaXF1ZSBpZCBhdHRyaWJ1dGVzLiAgVGhpcwogICAgICogIGZ1bmN0aW9uIG1ha2VzIGNyZWF0aW5nIHRoZXNlIGVhc3kuICBFYWNoIGNvbm5lY3Rpb24gaW5zdGFuY2UgaGFzCiAgICAgKiAgYSBjb3VudGVyIHdoaWNoIHN0YXJ0cyBmcm9tIHplcm8sIGFuZCB0aGUgdmFsdWUgb2YgdGhpcyBjb3VudGVyCiAgICAgKiAgcGx1cyBhIGNvbG9uIGZvbGxvd2VkIGJ5IHRoZSBzdWZmaXggYmVjb21lcyB0aGUgdW5pcXVlIGlkLiBJZiBubwogICAgICogIHN1ZmZpeCBpcyBzdXBwbGllZCwgdGhlIGNvdW50ZXIgaXMgdXNlZCBhcyB0aGUgdW5pcXVlIGlkLgogICAgICoKICAgICAqICBTdWZmaXhlcyBhcmUgdXNlZCB0byBtYWtlIGRlYnVnZ2luZyBlYXNpZXIgd2hlbiByZWFkaW5nIHRoZSBzdHJlYW0KICAgICAqICBkYXRhLCBhbmQgdGhlaXIgdXNlIGlzIHJlY29tbWVuZGVkLiAgVGhlIGNvdW50ZXIgcmVzZXRzIHRvIDAgZm9yCiAgICAgKiAgZXZlcnkgbmV3IGNvbm5lY3Rpb24gZm9yIHRoZSBzYW1lIHJlYXNvbi4gIEZvciBjb25uZWN0aW9ucyB0byB0aGUKICAgICAqICBzYW1lIHNlcnZlciB0aGF0IGF1dGhlbnRpY2F0ZSB0aGUgc2FtZSB3YXksIGFsbCB0aGUgaWRzIHNob3VsZCBiZQogICAgICogIHRoZSBzYW1lLCB3aGljaCBtYWtlcyBpdCBlYXN5IHRvIHNlZSBjaGFuZ2VzLiAgVGhpcyBpcyB1c2VmdWwgZm9yCiAgICAgKiAgYXV0b21hdGVkIHRlc3RpbmcgYXMgd2VsbC4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChTdHJpbmcpIHN1ZmZpeCAtIEEgb3B0aW9uYWwgc3VmZml4IHRvIGFwcGVuZCB0byB0aGUgaWQuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBBIHVuaXF1ZSBzdHJpbmcgdG8gYmUgdXNlZCBmb3IgdGhlIGlkIGF0dHJpYnV0ZS4KICAgICAqLwogICAgZ2V0VW5pcXVlSWQ6IGZ1bmN0aW9uIChzdWZmaXgpCiAgICB7CiAgICAgICAgaWYgKHR5cGVvZihzdWZmaXgpID09ICJzdHJpbmciIHx8IHR5cGVvZihzdWZmaXgpID09ICJudW1iZXIiKSB7CiAgICAgICAgICAgIHJldHVybiArK3RoaXMuX3VuaXF1ZUlkICsgIjoiICsgc3VmZml4OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiArK3RoaXMuX3VuaXF1ZUlkICsgIiI7CiAgICAgICAgfQogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IGNvbm5lY3QKICAgICAqICBTdGFydHMgdGhlIGNvbm5lY3Rpb24gcHJvY2Vzcy4KICAgICAqCiAgICAgKiAgQXMgdGhlIGNvbm5lY3Rpb24gcHJvY2VzcyBwcm9jZWVkcywgdGhlIHVzZXIgc3VwcGxpZWQgY2FsbGJhY2sgd2lsbAogICAgICogIGJlIHRyaWdnZXJlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIHN0YXR1cyB1cGRhdGVzLiAgVGhlIGNhbGxiYWNrCiAgICAgKiAgc2hvdWxkIHRha2UgdHdvIGFyZ3VtZW50cyAtIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGVycm9yIGNvbmRpdGlvbi4KICAgICAqCiAgICAgKiAgVGhlIHN0YXR1cyBjb2RlIHdpbGwgYmUgb25lIG9mIHRoZSB2YWx1ZXMgaW4gdGhlIFN0cm9waGUuU3RhdHVzCiAgICAgKiAgY29uc3RhbnRzLiAgVGhlIGVycm9yIGNvbmRpdGlvbiB3aWxsIGJlIG9uZSBvZiB0aGUgY29uZGl0aW9ucwogICAgICogIGRlZmluZWQgaW4gUkZDIDM5MjAgb3IgdGhlIGNvbmRpdGlvbiAnc3Ryb3BoZS1wYXJzZXJlcnJvcicuCiAgICAgKgogICAgICogIFRoZSBQYXJhbWV0ZXJzIF93YWl0XywgX2hvbGRfIGFuZCBfcm91dGVfIGFyZSBvcHRpb25hbCBhbmQgb25seSByZWxldmFudAogICAgICogIGZvciBCT1NIIGNvbm5lY3Rpb25zLiBQbGVhc2Ugc2VlIFhFUCAxMjQgZm9yIGEgbW9yZSBkZXRhaWxlZCBleHBsYW5hdGlvbgogICAgICogIG9mIHRoZSBvcHRpb25hbCBwYXJhbWV0ZXJzLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgamlkIC0gVGhlIHVzZXIncyBKSUQuICBUaGlzIG1heSBiZSBhIGJhcmUgSklELAogICAgICogICAgICBvciBhIGZ1bGwgSklELiAgSWYgYSBub2RlIGlzIG5vdCBzdXBwbGllZCwgU0FTTCBBTk9OWU1PVVMKICAgICAqICAgICAgYXV0aGVudGljYXRpb24gd2lsbCBiZSBhdHRlbXB0ZWQuCiAgICAgKiAgICAoU3RyaW5nKSBwYXNzIC0gVGhlIHVzZXIncyBwYXNzd29yZC4KICAgICAqICAgIChGdW5jdGlvbikgY2FsbGJhY2sgLSBUaGUgY29ubmVjdCBjYWxsYmFjayBmdW5jdGlvbi4KICAgICAqICAgIChJbnRlZ2VyKSB3YWl0IC0gVGhlIG9wdGlvbmFsIEhUVFBCSU5EIHdhaXQgdmFsdWUuICBUaGlzIGlzIHRoZQogICAgICogICAgICB0aW1lIHRoZSBzZXJ2ZXIgd2lsbCB3YWl0IGJlZm9yZSByZXR1cm5pbmcgYW4gZW1wdHkgcmVzdWx0IGZvcgogICAgICogICAgICBhIHJlcXVlc3QuICBUaGUgZGVmYXVsdCBzZXR0aW5nIG9mIDYwIHNlY29uZHMgaXMgcmVjb21tZW5kZWQuCiAgICAgKiAgICAoSW50ZWdlcikgaG9sZCAtIFRoZSBvcHRpb25hbCBIVFRQQklORCBob2xkIHZhbHVlLiAgVGhpcyBpcyB0aGUKICAgICAqICAgICAgbnVtYmVyIG9mIGNvbm5lY3Rpb25zIHRoZSBzZXJ2ZXIgd2lsbCBob2xkIGF0IG9uZSB0aW1lLiAgVGhpcwogICAgICogICAgICBzaG91bGQgYWxtb3N0IGFsd2F5cyBiZSBzZXQgdG8gMSAodGhlIGRlZmF1bHQpLgogICAgICogICAgKFN0cmluZykgcm91dGUgLSBUaGUgb3B0aW9uYWwgcm91dGUgdmFsdWUuCiAgICAgKi8KICAgIGNvbm5lY3Q6IGZ1bmN0aW9uIChqaWQsIHBhc3MsIGNhbGxiYWNrLCB3YWl0LCBob2xkLCByb3V0ZSkKICAgIHsKICAgICAgICB0aGlzLmppZCA9IGppZDsKICAgICAgICAvKiogVmFyaWFibGU6IGF1dGh6aWQKICAgICAgICAgKiAgQXV0aG9yaXphdGlvbiBpZGVudGl0eS4KICAgICAgICAgKi8KICAgICAgICB0aGlzLmF1dGh6aWQgPSBTdHJvcGhlLmdldEJhcmVKaWRGcm9tSmlkKHRoaXMuamlkKTsKICAgICAgICAvKiogVmFyaWFibGU6IGF1dGhjaWQKICAgICAgICAgKiAgQXV0aGVudGljYXRpb24gaWRlbnRpdHkgKFVzZXIgbmFtZSkuCiAgICAgICAgICovCiAgICAgICAgdGhpcy5hdXRoY2lkID0gU3Ryb3BoZS5nZXROb2RlRnJvbUppZCh0aGlzLmppZCk7CiAgICAgICAgLyoqIFZhcmlhYmxlOiBwYXNzCiAgICAgICAgICogIEF1dGhlbnRpY2F0aW9uIGlkZW50aXR5IChVc2VyIHBhc3N3b3JkKS4KICAgICAgICAgKi8KICAgICAgICB0aGlzLnBhc3MgPSBwYXNzOwogICAgICAgIC8qKiBWYXJpYWJsZTogc2VydnR5cGUKICAgICAgICAgKiAgRGlnZXN0IE1ENSBjb21wYXRpYmlsaXR5LgogICAgICAgICAqLwogICAgICAgIHRoaXMuc2VydnR5cGUgPSAieG1wcCI7CiAgICAgICAgdGhpcy5jb25uZWN0X2NhbGxiYWNrID0gY2FsbGJhY2s7CiAgICAgICAgdGhpcy5kaXNjb25uZWN0aW5nID0gZmFsc2U7CiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTsKICAgICAgICB0aGlzLmF1dGhlbnRpY2F0ZWQgPSBmYWxzZTsKICAgICAgICB0aGlzLmVycm9ycyA9IDA7CgogICAgICAgIC8vIHBhcnNlIGppZCBmb3IgZG9tYWluCiAgICAgICAgdGhpcy5kb21haW4gPSBTdHJvcGhlLmdldERvbWFpbkZyb21KaWQodGhpcy5qaWQpOwoKICAgICAgICB0aGlzLl9jaGFuZ2VDb25uZWN0U3RhdHVzKFN0cm9waGUuU3RhdHVzLkNPTk5FQ1RJTkcsIG51bGwpOwoKICAgICAgICB0aGlzLl9wcm90by5fY29ubmVjdCh3YWl0LCBob2xkLCByb3V0ZSk7CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogYXR0YWNoCiAgICAgKiAgQXR0YWNoIHRvIGFuIGFscmVhZHkgY3JlYXRlZCBhbmQgYXV0aGVudGljYXRlZCBCT1NIIHNlc3Npb24uCiAgICAgKgogICAgICogIFRoaXMgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gYWxsb3cgU3Ryb3BoZSB0byBhdHRhY2ggdG8gQk9TSAogICAgICogIHNlc3Npb25zIHdoaWNoIGhhdmUgYmVlbiBjcmVhdGVkIGV4dGVybmFsbHksIHBlcmhhcHMgYnkgYSBXZWIKICAgICAqICBhcHBsaWNhdGlvbi4gIFRoaXMgaXMgb2Z0ZW4gdXNlZCB0byBzdXBwb3J0IGF1dG8tbG9naW4gdHlwZSBmZWF0dXJlcwogICAgICogIHdpdGhvdXQgcHV0dGluZyB1c2VyIGNyZWRlbnRpYWxzIGludG8gdGhlIHBhZ2UuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoU3RyaW5nKSBqaWQgLSBUaGUgZnVsbCBKSUQgdGhhdCBpcyBib3VuZCBieSB0aGUgc2Vzc2lvbi4KICAgICAqICAgIChTdHJpbmcpIHNpZCAtIFRoZSBTSUQgb2YgdGhlIEJPU0ggc2Vzc2lvbi4KICAgICAqICAgIChTdHJpbmcpIHJpZCAtIFRoZSBjdXJyZW50IFJJRCBvZiB0aGUgQk9TSCBzZXNzaW9uLiAgVGhpcyBSSUQKICAgICAqICAgICAgd2lsbCBiZSB1c2VkIGJ5IHRoZSBuZXh0IHJlcXVlc3QuCiAgICAgKiAgICAoRnVuY3Rpb24pIGNhbGxiYWNrIFRoZSBjb25uZWN0IGNhbGxiYWNrIGZ1bmN0aW9uLgogICAgICogICAgKEludGVnZXIpIHdhaXQgLSBUaGUgb3B0aW9uYWwgSFRUUEJJTkQgd2FpdCB2YWx1ZS4gIFRoaXMgaXMgdGhlCiAgICAgKiAgICAgIHRpbWUgdGhlIHNlcnZlciB3aWxsIHdhaXQgYmVmb3JlIHJldHVybmluZyBhbiBlbXB0eSByZXN1bHQgZm9yCiAgICAgKiAgICAgIGEgcmVxdWVzdC4gIFRoZSBkZWZhdWx0IHNldHRpbmcgb2YgNjAgc2Vjb25kcyBpcyByZWNvbW1lbmRlZC4KICAgICAqICAgICAgT3RoZXIgc2V0dGluZ3Mgd2lsbCByZXF1aXJlIHR3ZWFrcyB0byB0aGUgU3Ryb3BoZS5USU1FT1VUIHZhbHVlLgogICAgICogICAgKEludGVnZXIpIGhvbGQgLSBUaGUgb3B0aW9uYWwgSFRUUEJJTkQgaG9sZCB2YWx1ZS4gIFRoaXMgaXMgdGhlCiAgICAgKiAgICAgIG51bWJlciBvZiBjb25uZWN0aW9ucyB0aGUgc2VydmVyIHdpbGwgaG9sZCBhdCBvbmUgdGltZS4gIFRoaXMKICAgICAqICAgICAgc2hvdWxkIGFsbW9zdCBhbHdheXMgYmUgc2V0IHRvIDEgKHRoZSBkZWZhdWx0KS4KICAgICAqICAgIChJbnRlZ2VyKSB3aW5kIC0gVGhlIG9wdGlvbmFsIEhUVEJJTkQgd2luZG93IHZhbHVlLiAgVGhpcyBpcyB0aGUKICAgICAqICAgICAgYWxsb3dlZCByYW5nZSBvZiByZXF1ZXN0IGlkcyB0aGF0IGFyZSB2YWxpZC4gIFRoZSBkZWZhdWx0IGlzIDUuCiAgICAgKi8KICAgIGF0dGFjaDogZnVuY3Rpb24gKGppZCwgc2lkLCByaWQsIGNhbGxiYWNrLCB3YWl0LCBob2xkLCB3aW5kKQogICAgewogICAgICAgIHRoaXMuX3Byb3RvLl9hdHRhY2goamlkLCBzaWQsIHJpZCwgY2FsbGJhY2ssIHdhaXQsIGhvbGQsIHdpbmQpOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IHhtbElucHV0CiAgICAgKiAgVXNlciBvdmVycmlkZWFibGUgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBYTUwgZGF0YSBjb21pbmcgaW50byB0aGUKICAgICAqICBjb25uZWN0aW9uLgogICAgICoKICAgICAqICBUaGUgZGVmYXVsdCBmdW5jdGlvbiBkb2VzIG5vdGhpbmcuICBVc2VyIGNvZGUgY2FuIG92ZXJyaWRlIHRoaXMgd2l0aAogICAgICogID4gU3Ryb3BoZS5Db25uZWN0aW9uLnhtbElucHV0ID0gZnVuY3Rpb24gKGVsZW0pIHsKICAgICAqICA+ICAgKHVzZXIgY29kZSkKICAgICAqICA+IH07CiAgICAgKgogICAgICogIER1ZSB0byBsaW1pdGF0aW9ucyBvZiBjdXJyZW50IEJyb3dzZXJzJyBYTUwtUGFyc2VycyB0aGUgb3BlbmluZyBhbmQgY2xvc2luZwogICAgICogIDxzdHJlYW0+IHRhZyBmb3IgV2ViU29ja2V0LUNvbm5vY3Rpb25zIHdpbGwgYmUgcGFzc2VkIGFzIHNlbGZjbG9zaW5nIGhlcmUuCiAgICAgKgogICAgICogIEJPU0gtQ29ubmVjdGlvbnMgd2lsbCBoYXZlIGFsbCBzdGFuemFzIHdyYXBwZWQgaW4gYSA8Ym9keT4gdGFnLiBTZWUKICAgICAqICA8U3Ryb3BoZS5Cb3NoLnN0cmlwPiBpZiB5b3Ugd2FudCB0byBzdHJpcCB0aGlzIHRhZy4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChYTUxFbGVtZW50KSBlbGVtIC0gVGhlIFhNTCBkYXRhIHJlY2VpdmVkIGJ5IHRoZSBjb25uZWN0aW9uLgogICAgICovCiAgICAvKiBqc2hpbnQgdW51c2VkOmZhbHNlICovCiAgICB4bWxJbnB1dDogZnVuY3Rpb24gKGVsZW0pCiAgICB7CiAgICAgICAgcmV0dXJuOwogICAgfSwKICAgIC8qIGpzaGludCB1bnVzZWQ6dHJ1ZSAqLwoKICAgIC8qKiBGdW5jdGlvbjogeG1sT3V0cHV0CiAgICAgKiAgVXNlciBvdmVycmlkZWFibGUgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBYTUwgZGF0YSBzZW50IHRvIHRoZQogICAgICogIGNvbm5lY3Rpb24uCiAgICAgKgogICAgICogIFRoZSBkZWZhdWx0IGZ1bmN0aW9uIGRvZXMgbm90aGluZy4gIFVzZXIgY29kZSBjYW4gb3ZlcnJpZGUgdGhpcyB3aXRoCiAgICAgKiAgPiBTdHJvcGhlLkNvbm5lY3Rpb24ueG1sT3V0cHV0ID0gZnVuY3Rpb24gKGVsZW0pIHsKICAgICAqICA+ICAgKHVzZXIgY29kZSkKICAgICAqICA+IH07CiAgICAgKgogICAgICogIER1ZSB0byBsaW1pdGF0aW9ucyBvZiBjdXJyZW50IEJyb3dzZXJzJyBYTUwtUGFyc2VycyB0aGUgb3BlbmluZyBhbmQgY2xvc2luZwogICAgICogIDxzdHJlYW0+IHRhZyBmb3IgV2ViU29ja2V0LUNvbm5vY3Rpb25zIHdpbGwgYmUgcGFzc2VkIGFzIHNlbGZjbG9zaW5nIGhlcmUuCiAgICAgKgogICAgICogIEJPU0gtQ29ubmVjdGlvbnMgd2lsbCBoYXZlIGFsbCBzdGFuemFzIHdyYXBwZWQgaW4gYSA8Ym9keT4gdGFnLiBTZWUKICAgICAqICA8U3Ryb3BoZS5Cb3NoLnN0cmlwPiBpZiB5b3Ugd2FudCB0byBzdHJpcCB0aGlzIHRhZy4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChYTUxFbGVtZW50KSBlbGVtIC0gVGhlIFhNTGRhdGEgc2VudCBieSB0aGUgY29ubmVjdGlvbi4KICAgICAqLwogICAgLyoganNoaW50IHVudXNlZDpmYWxzZSAqLwogICAgeG1sT3V0cHV0OiBmdW5jdGlvbiAoZWxlbSkKICAgIHsKICAgICAgICByZXR1cm47CiAgICB9LAogICAgLyoganNoaW50IHVudXNlZDp0cnVlICovCgogICAgLyoqIEZ1bmN0aW9uOiByYXdJbnB1dAogICAgICogIFVzZXIgb3ZlcnJpZGVhYmxlIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgcmF3IGRhdGEgY29taW5nIGludG8gdGhlCiAgICAgKiAgY29ubmVjdGlvbi4KICAgICAqCiAgICAgKiAgVGhlIGRlZmF1bHQgZnVuY3Rpb24gZG9lcyBub3RoaW5nLiAgVXNlciBjb2RlIGNhbiBvdmVycmlkZSB0aGlzIHdpdGgKICAgICAqICA+IFN0cm9waGUuQ29ubmVjdGlvbi5yYXdJbnB1dCA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgKiAgPiAgICh1c2VyIGNvZGUpCiAgICAgKiAgPiB9OwogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgZGF0YSAtIFRoZSBkYXRhIHJlY2VpdmVkIGJ5IHRoZSBjb25uZWN0aW9uLgogICAgICovCiAgICAvKiBqc2hpbnQgdW51c2VkOmZhbHNlICovCiAgICByYXdJbnB1dDogZnVuY3Rpb24gKGRhdGEpCiAgICB7CiAgICAgICAgcmV0dXJuOwogICAgfSwKICAgIC8qIGpzaGludCB1bnVzZWQ6dHJ1ZSAqLwoKICAgIC8qKiBGdW5jdGlvbjogcmF3T3V0cHV0CiAgICAgKiAgVXNlciBvdmVycmlkZWFibGUgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyByYXcgZGF0YSBzZW50IHRvIHRoZQogICAgICogIGNvbm5lY3Rpb24uCiAgICAgKgogICAgICogIFRoZSBkZWZhdWx0IGZ1bmN0aW9uIGRvZXMgbm90aGluZy4gIFVzZXIgY29kZSBjYW4gb3ZlcnJpZGUgdGhpcyB3aXRoCiAgICAgKiAgPiBTdHJvcGhlLkNvbm5lY3Rpb24ucmF3T3V0cHV0ID0gZnVuY3Rpb24gKGRhdGEpIHsKICAgICAqICA+ICAgKHVzZXIgY29kZSkKICAgICAqICA+IH07CiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoU3RyaW5nKSBkYXRhIC0gVGhlIGRhdGEgc2VudCBieSB0aGUgY29ubmVjdGlvbi4KICAgICAqLwogICAgLyoganNoaW50IHVudXNlZDpmYWxzZSAqLwogICAgcmF3T3V0cHV0OiBmdW5jdGlvbiAoZGF0YSkKICAgIHsKICAgICAgICByZXR1cm47CiAgICB9LAogICAgLyoganNoaW50IHVudXNlZDp0cnVlICovCgogICAgLyoqIEZ1bmN0aW9uOiBzZW5kCiAgICAgKiAgU2VuZCBhIHN0YW56YS4KICAgICAqCiAgICAgKiAgVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgdG8gcHVzaCBkYXRhIG9udG8gdGhlIHNlbmQgcXVldWUgdG8KICAgICAqICBnbyBvdXQgb3ZlciB0aGUgd2lyZS4gIFdoZW5ldmVyIGEgcmVxdWVzdCBpcyBzZW50IHRvIHRoZSBCT1NICiAgICAgKiAgc2VydmVyLCBhbGwgcGVuZGluZyBkYXRhIGlzIHNlbnQgYW5kIHRoZSBxdWV1ZSBpcyBmbHVzaGVkLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFhNTEVsZW1lbnQgfAogICAgICogICAgIFtYTUxFbGVtZW50XSB8CiAgICAgKiAgICAgU3Ryb3BoZS5CdWlsZGVyKSBlbGVtIC0gVGhlIHN0YW56YSB0byBzZW5kLgogICAgICovCiAgICBzZW5kOiBmdW5jdGlvbiAoZWxlbSkKICAgIHsKICAgICAgICBpZiAoZWxlbSA9PT0gbnVsbCkgeyByZXR1cm4gOyB9CiAgICAgICAgaWYgKHR5cGVvZihlbGVtLnNvcnQpID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgdGhpcy5fcXVldWVEYXRhKGVsZW1baV0pOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YoZWxlbS50cmVlKSA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICB0aGlzLl9xdWV1ZURhdGEoZWxlbS50cmVlKCkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuX3F1ZXVlRGF0YShlbGVtKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuX3Byb3RvLl9zZW5kKCk7CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogZmx1c2gKICAgICAqICBJbW1lZGlhdGVseSBzZW5kIGFueSBwZW5kaW5nIG91dGdvaW5nIGRhdGEuCiAgICAgKgogICAgICogIE5vcm1hbGx5IHNlbmQoKSBxdWV1ZXMgb3V0Z29pbmcgZGF0YSB1bnRpbCB0aGUgbmV4dCBpZGxlIHBlcmlvZAogICAgICogICgxMDBtcyksIHdoaWNoIG9wdGltaXplcyBuZXR3b3JrIHVzZSBpbiB0aGUgY29tbW9uIGNhc2VzIHdoZW4KICAgICAqICBzZXZlcmFsIHNlbmQoKXMgYXJlIGNhbGxlZCBpbiBzdWNjZXNzaW9uLiBmbHVzaCgpIGNhbiBiZSB1c2VkIHRvCiAgICAgKiAgaW1tZWRpYXRlbHkgc2VuZCBhbGwgcGVuZGluZyBkYXRhLgogICAgICovCiAgICBmbHVzaDogZnVuY3Rpb24gKCkKICAgIHsKICAgICAgICAvLyBjYW5jZWwgdGhlIHBlbmRpbmcgaWRsZSBwZXJpb2QgYW5kIHJ1biB0aGUgaWRsZSBmdW5jdGlvbgogICAgICAgIC8vIGltbWVkaWF0ZWx5CiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2lkbGVUaW1lb3V0KTsKICAgICAgICB0aGlzLl9vbklkbGUoKTsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiBzZW5kSVEKICAgICAqICBIZWxwZXIgZnVuY3Rpb24gdG8gc2VuZCBJUSBzdGFuemFzLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFhNTEVsZW1lbnQpIGVsZW0gLSBUaGUgc3RhbnphIHRvIHNlbmQuCiAgICAgKiAgICAoRnVuY3Rpb24pIGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciBhIHN1Y2Nlc3NmdWwgcmVxdWVzdC4KICAgICAqICAgIChGdW5jdGlvbikgZXJyYmFjayAtIFRoZSBjYWxsYmFjayBmdW5jdGlvbiBmb3IgYSBmYWlsZWQgb3IgdGltZWQKICAgICAqICAgICAgb3V0IHJlcXVlc3QuICBPbiB0aW1lb3V0LCB0aGUgc3RhbnphIHdpbGwgYmUgbnVsbC4KICAgICAqICAgIChJbnRlZ2VyKSB0aW1lb3V0IC0gVGhlIHRpbWUgc3BlY2lmaWVkIGluIG1pbGxpc2Vjb25kcyBmb3IgYQogICAgICogICAgICB0aW1lb3V0IHRvIG9jY3VyLgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgVGhlIGlkIHVzZWQgdG8gc2VuZCB0aGUgSVEuCiAgICAqLwogICAgc2VuZElROiBmdW5jdGlvbihlbGVtLCBjYWxsYmFjaywgZXJyYmFjaywgdGltZW91dCkgewogICAgICAgIHZhciB0aW1lb3V0SGFuZGxlciA9IG51bGw7CiAgICAgICAgdmFyIHRoYXQgPSB0aGlzOwoKICAgICAgICBpZiAodHlwZW9mKGVsZW0udHJlZSkgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgZWxlbSA9IGVsZW0udHJlZSgpOwogICAgICAgIH0KICAgICAgICB2YXIgaWQgPSBlbGVtLmdldEF0dHJpYnV0ZSgnaWQnKTsKCiAgICAgICAgLy8gaW5qZWN0IGlkIGlmIG5vdCBmb3VuZAogICAgICAgIGlmICghaWQpIHsKICAgICAgICAgICAgaWQgPSB0aGlzLmdldFVuaXF1ZUlkKCJzZW5kSVEiKTsKICAgICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoImlkIiwgaWQpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLmFkZEhhbmRsZXIoZnVuY3Rpb24gKHN0YW56YSkgewogICAgICAgICAgICAvLyByZW1vdmUgdGltZW91dCBoYW5kbGVyIGlmIHRoZXJlIGlzIG9uZQogICAgICAgICAgICBpZiAodGltZW91dEhhbmRsZXIpIHsKICAgICAgICAgICAgICAgIHRoYXQuZGVsZXRlVGltZWRIYW5kbGVyKHRpbWVvdXRIYW5kbGVyKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGlxdHlwZSA9IHN0YW56YS5nZXRBdHRyaWJ1dGUoJ3R5cGUnKTsKICAgICAgICAgICAgaWYgKGlxdHlwZSA9PSAncmVzdWx0JykgewogICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soc3RhbnphKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChpcXR5cGUgPT0gJ2Vycm9yJykgewogICAgICAgICAgICAgICAgaWYgKGVycmJhY2spIHsKICAgICAgICAgICAgICAgICAgICBlcnJiYWNrKHN0YW56YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdyB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIlN0cm9waGVFcnJvciIsCiAgICAgICAgICAgIG1lc3NhZ2U6ICJHb3QgYmFkIElRIHR5cGUgb2YgIiArIGlxdHlwZQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH0sIG51bGwsICdpcScsIG51bGwsIGlkKTsKCiAgICAgICAgLy8gaWYgdGltZW91dCBzcGVjaWZpZWQsIHNldHVwIHRpbWVvdXQgaGFuZGxlci4KICAgICAgICBpZiAodGltZW91dCkgewogICAgICAgICAgICB0aW1lb3V0SGFuZGxlciA9IHRoaXMuYWRkVGltZWRIYW5kbGVyKHRpbWVvdXQsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIC8vIGdldCByaWQgb2Ygbm9ybWFsIGhhbmRsZXIKICAgICAgICAgICAgICAgIHRoYXQuZGVsZXRlSGFuZGxlcihoYW5kbGVyKTsKCiAgICAgICAgICAgICAgICAvLyBjYWxsIGVycmJhY2sgb24gdGltZW91dCB3aXRoIG51bGwgc3RhbnphCiAgICAgICAgICAgICAgICBpZiAoZXJyYmFjaykgewogICAgICAgICAgICAgICAgICAgIGVycmJhY2sobnVsbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5zZW5kKGVsZW0pOwoKICAgICAgICByZXR1cm4gaWQ7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9xdWV1ZURhdGEKICAgICAqICBRdWV1ZSBvdXRnb2luZyBkYXRhIGZvciBsYXRlciBzZW5kaW5nLiAgQWxzbyBlbnN1cmVzIHRoYXQgdGhlIGRhdGEKICAgICAqICBpcyBhIERPTUVsZW1lbnQuCiAgICAgKi8KICAgIF9xdWV1ZURhdGE6IGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgICAgaWYgKGVsZW1lbnQgPT09IG51bGwgfHwKICAgICAgICAgICAgIWVsZW1lbnQudGFnTmFtZSB8fAogICAgICAgICAgICAhZWxlbWVudC5jaGlsZE5vZGVzKSB7CiAgICAgICAgICAgIHRocm93IHsKICAgICAgICAgICAgICAgIG5hbWU6ICJTdHJvcGhlRXJyb3IiLAogICAgICAgICAgICAgICAgbWVzc2FnZTogIkNhbm5vdCBxdWV1ZSBub24tRE9NRWxlbWVudC4iCiAgICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9kYXRhLnB1c2goZWxlbWVudCk7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9zZW5kUmVzdGFydAogICAgICogIFNlbmQgYW4geG1wcDpyZXN0YXJ0IHN0YW56YS4KICAgICAqLwogICAgX3NlbmRSZXN0YXJ0OiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIHRoaXMuX2RhdGEucHVzaCgicmVzdGFydCIpOwoKICAgICAgICB0aGlzLl9wcm90by5fc2VuZFJlc3RhcnQoKTsKCiAgICAgICAgdGhpcy5faWRsZVRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuX29uSWRsZS5iaW5kKHRoaXMpLCAxMDApOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IGFkZFRpbWVkSGFuZGxlcgogICAgICogIEFkZCBhIHRpbWVkIGhhbmRsZXIgdG8gdGhlIGNvbm5lY3Rpb24uCiAgICAgKgogICAgICogIFRoaXMgZnVuY3Rpb24gYWRkcyBhIHRpbWVkIGhhbmRsZXIuICBUaGUgcHJvdmlkZWQgaGFuZGxlciB3aWxsCiAgICAgKiAgYmUgY2FsbGVkIGV2ZXJ5IHBlcmlvZCBtaWxsaXNlY29uZHMgdW50aWwgaXQgcmV0dXJucyBmYWxzZSwKICAgICAqICB0aGUgY29ubmVjdGlvbiBpcyB0ZXJtaW5hdGVkLCBvciB0aGUgaGFuZGxlciBpcyByZW1vdmVkLiAgSGFuZGxlcnMKICAgICAqICB0aGF0IHdpc2ggdG8gY29udGludWUgYmVpbmcgaW52b2tlZCBzaG91bGQgcmV0dXJuIHRydWUuCiAgICAgKgogICAgICogIEJlY2F1c2Ugb2YgbWV0aG9kIGJpbmRpbmcgaXQgaXMgbmVjZXNzYXJ5IHRvIHNhdmUgdGhlIHJlc3VsdCBvZgogICAgICogIHRoaXMgZnVuY3Rpb24gaWYgeW91IHdpc2ggdG8gcmVtb3ZlIGEgaGFuZGxlciB3aXRoCiAgICAgKiAgZGVsZXRlVGltZWRIYW5kbGVyKCkuCiAgICAgKgogICAgICogIE5vdGUgdGhhdCB1c2VyIGhhbmRsZXJzIGFyZSBub3QgYWN0aXZlIHVudGlsIGF1dGhlbnRpY2F0aW9uIGlzCiAgICAgKiAgc3VjY2Vzc2Z1bC4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChJbnRlZ2VyKSBwZXJpb2QgLSBUaGUgcGVyaW9kIG9mIHRoZSBoYW5kbGVyLgogICAgICogICAgKEZ1bmN0aW9uKSBoYW5kbGVyIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgQSByZWZlcmVuY2UgdG8gdGhlIGhhbmRsZXIgdGhhdCBjYW4gYmUgdXNlZCB0byByZW1vdmUgaXQuCiAgICAgKi8KICAgIGFkZFRpbWVkSGFuZGxlcjogZnVuY3Rpb24gKHBlcmlvZCwgaGFuZGxlcikKICAgIHsKICAgICAgICB2YXIgdGhhbmQgPSBuZXcgU3Ryb3BoZS5UaW1lZEhhbmRsZXIocGVyaW9kLCBoYW5kbGVyKTsKICAgICAgICB0aGlzLmFkZFRpbWVkcy5wdXNoKHRoYW5kKTsKICAgICAgICByZXR1cm4gdGhhbmQ7CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogZGVsZXRlVGltZWRIYW5kbGVyCiAgICAgKiAgRGVsZXRlIGEgdGltZWQgaGFuZGxlciBmb3IgYSBjb25uZWN0aW9uLgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIHJlbW92ZXMgYSB0aW1lZCBoYW5kbGVyIGZyb20gdGhlIGNvbm5lY3Rpb24uICBUaGUKICAgICAqICBoYW5kUmVmIHBhcmFtZXRlciBpcyAqbm90KiB0aGUgZnVuY3Rpb24gcGFzc2VkIHRvIGFkZFRpbWVkSGFuZGxlcigpLAogICAgICogIGJ1dCBpcyB0aGUgcmVmZXJlbmNlIHJldHVybmVkIGZyb20gYWRkVGltZWRIYW5kbGVyKCkuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoU3Ryb3BoZS5UaW1lZEhhbmRsZXIpIGhhbmRSZWYgLSBUaGUgaGFuZGxlciByZWZlcmVuY2UuCiAgICAgKi8KICAgIGRlbGV0ZVRpbWVkSGFuZGxlcjogZnVuY3Rpb24gKGhhbmRSZWYpCiAgICB7CiAgICAgICAgLy8gdGhpcyBtdXN0IGJlIGRvbmUgaW4gdGhlIElkbGUgbG9vcCBzbyB0aGF0IHdlIGRvbid0IGNoYW5nZQogICAgICAgIC8vIHRoZSBoYW5kbGVycyBkdXJpbmcgaXRlcmF0aW9uCiAgICAgICAgdGhpcy5yZW1vdmVUaW1lZHMucHVzaChoYW5kUmVmKTsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiBhZGRIYW5kbGVyCiAgICAgKiAgQWRkIGEgc3RhbnphIGhhbmRsZXIgZm9yIHRoZSBjb25uZWN0aW9uLgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIGFkZHMgYSBzdGFuemEgaGFuZGxlciB0byB0aGUgY29ubmVjdGlvbi4gIFRoZQogICAgICogIGhhbmRsZXIgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgZm9yIGFueSBzdGFuemEgdGhhdCBtYXRjaGVzCiAgICAgKiAgdGhlIHBhcmFtZXRlcnMuICBOb3RlIHRoYXQgaWYgbXVsdGlwbGUgcGFyYW1ldGVycyBhcmUgc3VwcGxpZWQsCiAgICAgKiAgdGhleSBtdXN0IGFsbCBtYXRjaCBmb3IgdGhlIGhhbmRsZXIgdG8gYmUgaW52b2tlZC4KICAgICAqCiAgICAgKiAgVGhlIGhhbmRsZXIgd2lsbCByZWNlaXZlIHRoZSBzdGFuemEgdGhhdCB0cmlnZ2VyZWQgaXQgYXMgaXRzIGFyZ3VtZW50LgogICAgICogIFRoZSBoYW5kbGVyIHNob3VsZCByZXR1cm4gdHJ1ZSBpZiBpdCBpcyB0byBiZSBpbnZva2VkIGFnYWluOwogICAgICogIHJldHVybmluZyBmYWxzZSB3aWxsIHJlbW92ZSB0aGUgaGFuZGxlciBhZnRlciBpdCByZXR1cm5zLgogICAgICoKICAgICAqICBBcyBhIGNvbnZlbmllbmNlLCB0aGUgbnMgcGFyYW1ldGVycyBhcHBsaWVzIHRvIHRoZSB0b3AgbGV2ZWwgZWxlbWVudAogICAgICogIGFuZCBhbHNvIGFueSBvZiBpdHMgaW1tZWRpYXRlIGNoaWxkcmVuLiAgVGhpcyBpcyBwcmltYXJpbHkgdG8gbWFrZQogICAgICogIG1hdGNoaW5nIC9pcS9xdWVyeSBlbGVtZW50cyBlYXN5LgogICAgICoKICAgICAqICBUaGUgb3B0aW9ucyBhcmd1bWVudCBjb250YWlucyBoYW5kbGVyIG1hdGNoaW5nIGZsYWdzIHRoYXQgYWZmZWN0IGhvdwogICAgICogIG1hdGNoZXMgYXJlIGRldGVybWluZWQuIEN1cnJlbnRseSB0aGUgb25seSBmbGFnIGlzIG1hdGNoQmFyZSAoYQogICAgICogIGJvb2xlYW4pLiBXaGVuIG1hdGNoQmFyZSBpcyB0cnVlLCB0aGUgZnJvbSBwYXJhbWV0ZXIgYW5kIHRoZSBmcm9tCiAgICAgKiAgYXR0cmlidXRlIG9uIHRoZSBzdGFuemEgd2lsbCBiZSBtYXRjaGVkIGFzIGJhcmUgSklEcyBpbnN0ZWFkIG9mCiAgICAgKiAgZnVsbCBKSURzLiBUbyB1c2UgdGhpcywgcGFzcyB7bWF0Y2hCYXJlOiB0cnVlfSBhcyB0aGUgdmFsdWUgb2YKICAgICAqICBvcHRpb25zLiBUaGUgZGVmYXVsdCB2YWx1ZSBmb3IgbWF0Y2hCYXJlIGlzIGZhbHNlLgogICAgICoKICAgICAqICBUaGUgcmV0dXJuIHZhbHVlIHNob3VsZCBiZSBzYXZlZCBpZiB5b3Ugd2lzaCB0byByZW1vdmUgdGhlIGhhbmRsZXIKICAgICAqICB3aXRoIGRlbGV0ZUhhbmRsZXIoKS4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChGdW5jdGlvbikgaGFuZGxlciAtIFRoZSB1c2VyIGNhbGxiYWNrLgogICAgICogICAgKFN0cmluZykgbnMgLSBUaGUgbmFtZXNwYWNlIHRvIG1hdGNoLgogICAgICogICAgKFN0cmluZykgbmFtZSAtIFRoZSBzdGFuemEgbmFtZSB0byBtYXRjaC4KICAgICAqICAgIChTdHJpbmcpIHR5cGUgLSBUaGUgc3RhbnphIHR5cGUgYXR0cmlidXRlIHRvIG1hdGNoLgogICAgICogICAgKFN0cmluZykgaWQgLSBUaGUgc3RhbnphIGlkIGF0dHJpYnV0ZSB0byBtYXRjaC4KICAgICAqICAgIChTdHJpbmcpIGZyb20gLSBUaGUgc3RhbnphIGZyb20gYXR0cmlidXRlIHRvIG1hdGNoLgogICAgICogICAgKFN0cmluZykgb3B0aW9ucyAtIFRoZSBoYW5kbGVyIG9wdGlvbnMKICAgICAqCiAgICAgKiAgUmV0dXJuczoKICAgICAqICAgIEEgcmVmZXJlbmNlIHRvIHRoZSBoYW5kbGVyIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVtb3ZlIGl0LgogICAgICovCiAgICBhZGRIYW5kbGVyOiBmdW5jdGlvbiAoaGFuZGxlciwgbnMsIG5hbWUsIHR5cGUsIGlkLCBmcm9tLCBvcHRpb25zKQogICAgewogICAgICAgIHZhciBoYW5kID0gbmV3IFN0cm9waGUuSGFuZGxlcihoYW5kbGVyLCBucywgbmFtZSwgdHlwZSwgaWQsIGZyb20sIG9wdGlvbnMpOwogICAgICAgIHRoaXMuYWRkSGFuZGxlcnMucHVzaChoYW5kKTsKICAgICAgICByZXR1cm4gaGFuZDsKICAgIH0sCgogICAgLyoqIEZ1bmN0aW9uOiBkZWxldGVIYW5kbGVyCiAgICAgKiAgRGVsZXRlIGEgc3RhbnphIGhhbmRsZXIgZm9yIGEgY29ubmVjdGlvbi4KICAgICAqCiAgICAgKiAgVGhpcyBmdW5jdGlvbiByZW1vdmVzIGEgc3RhbnphIGhhbmRsZXIgZnJvbSB0aGUgY29ubmVjdGlvbi4gIFRoZQogICAgICogIGhhbmRSZWYgcGFyYW1ldGVyIGlzICpub3QqIHRoZSBmdW5jdGlvbiBwYXNzZWQgdG8gYWRkSGFuZGxlcigpLAogICAgICogIGJ1dCBpcyB0aGUgcmVmZXJlbmNlIHJldHVybmVkIGZyb20gYWRkSGFuZGxlcigpLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cm9waGUuSGFuZGxlcikgaGFuZFJlZiAtIFRoZSBoYW5kbGVyIHJlZmVyZW5jZS4KICAgICAqLwogICAgZGVsZXRlSGFuZGxlcjogZnVuY3Rpb24gKGhhbmRSZWYpCiAgICB7CiAgICAgICAgLy8gdGhpcyBtdXN0IGJlIGRvbmUgaW4gdGhlIElkbGUgbG9vcCBzbyB0aGF0IHdlIGRvbid0IGNoYW5nZQogICAgICAgIC8vIHRoZSBoYW5kbGVycyBkdXJpbmcgaXRlcmF0aW9uCiAgICAgICAgdGhpcy5yZW1vdmVIYW5kbGVycy5wdXNoKGhhbmRSZWYpOwogICAgfSwKCiAgICAvKiogRnVuY3Rpb246IGRpc2Nvbm5lY3QKICAgICAqICBTdGFydCB0aGUgZ3JhY2VmdWwgZGlzY29ubmVjdGlvbiBwcm9jZXNzLgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIHN0YXJ0cyB0aGUgZGlzY29ubmVjdGlvbiBwcm9jZXNzLiAgVGhpcyBwcm9jZXNzIHN0YXJ0cwogICAgICogIGJ5IHNlbmRpbmcgdW5hdmFpbGFibGUgcHJlc2VuY2UgYW5kIHNlbmRpbmcgQk9TSCBib2R5IG9mIHR5cGUKICAgICAqICB0ZXJtaW5hdGUuICBBIHRpbWVvdXQgaGFuZGxlciBtYWtlcyBzdXJlIHRoYXQgZGlzY29ubmVjdGlvbiBoYXBwZW5zCiAgICAgKiAgZXZlbiBpZiB0aGUgQk9TSCBzZXJ2ZXIgZG9lcyBub3QgcmVzcG9uZC4KICAgICAqCiAgICAgKiAgVGhlIHVzZXIgc3VwcGxpZWQgY29ubmVjdGlvbiBjYWxsYmFjayB3aWxsIGJlIG5vdGlmaWVkIG9mIHRoZQogICAgICogIHByb2dyZXNzIGFzIHRoaXMgcHJvY2VzcyBoYXBwZW5zLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgcmVhc29uIC0gVGhlIHJlYXNvbiB0aGUgZGlzY29ubmVjdCBpcyBvY2N1cmluZy4KICAgICAqLwogICAgZGlzY29ubmVjdDogZnVuY3Rpb24gKHJlYXNvbikKICAgIHsKICAgICAgICB0aGlzLl9jaGFuZ2VDb25uZWN0U3RhdHVzKFN0cm9waGUuU3RhdHVzLkRJU0NPTk5FQ1RJTkcsIHJlYXNvbik7CgogICAgICAgIFN0cm9waGUuaW5mbygiRGlzY29ubmVjdCB3YXMgY2FsbGVkIGJlY2F1c2U6ICIgKyByZWFzb24pOwogICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkgewogICAgICAgICAgICB2YXIgcHJlcyA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RpbmcgPSB0cnVlOwogICAgICAgICAgICBpZiAodGhpcy5hdXRoZW50aWNhdGVkKSB7CiAgICAgICAgICAgICAgICBwcmVzID0gJHByZXMoewogICAgICAgICAgICAgICAgICAgIHhtbG5zOiBTdHJvcGhlLk5TLkNMSUVOVCwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAndW5hdmFpbGFibGUnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBzZXR1cCB0aW1lb3V0IGhhbmRsZXIKICAgICAgICAgICAgdGhpcy5fZGlzY29ubmVjdFRpbWVvdXQgPSB0aGlzLl9hZGRTeXNUaW1lZEhhbmRsZXIoCiAgICAgICAgICAgICAgICAzMDAwLCB0aGlzLl9vbkRpc2Nvbm5lY3RUaW1lb3V0LmJpbmQodGhpcykpOwogICAgICAgICAgICB0aGlzLl9wcm90by5fZGlzY29ubmVjdChwcmVzKTsKICAgICAgICB9CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9jaGFuZ2VDb25uZWN0U3RhdHVzCiAgICAgKiAgX1ByaXZhdGVfIGhlbHBlciBmdW5jdGlvbiB0aGF0IG1ha2VzIHN1cmUgcGx1Z2lucyBhbmQgdGhlIHVzZXIncwogICAgICogIGNhbGxiYWNrIGFyZSBub3RpZmllZCBvZiBjb25uZWN0aW9uIHN0YXR1cyBjaGFuZ2VzLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKEludGVnZXIpIHN0YXR1cyAtIHRoZSBuZXcgY29ubmVjdGlvbiBzdGF0dXMsIG9uZSBvZiB0aGUgdmFsdWVzCiAgICAgKiAgICAgIGluIFN0cm9waGUuU3RhdHVzCiAgICAgKiAgICAoU3RyaW5nKSBjb25kaXRpb24gLSB0aGUgZXJyb3IgY29uZGl0aW9uIG9yIG51bGwKICAgICAqLwogICAgX2NoYW5nZUNvbm5lY3RTdGF0dXM6IGZ1bmN0aW9uIChzdGF0dXMsIGNvbmRpdGlvbikKICAgIHsKICAgICAgICAvLyBub3RpZnkgYWxsIHBsdWdpbnMgbGlzdGVuaW5nIGZvciBzdGF0dXMgY2hhbmdlcwogICAgICAgIGZvciAodmFyIGsgaW4gU3Ryb3BoZS5fY29ubmVjdGlvblBsdWdpbnMpIHsKICAgICAgICAgICAgaWYgKFN0cm9waGUuX2Nvbm5lY3Rpb25QbHVnaW5zLmhhc093blByb3BlcnR5KGspKSB7CiAgICAgICAgICAgICAgICB2YXIgcGx1Z2luID0gdGhpc1trXTsKICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uc3RhdHVzQ2hhbmdlZCkgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbi5zdGF0dXNDaGFuZ2VkKHN0YXR1cywgY29uZGl0aW9uKTsKICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgU3Ryb3BoZS5lcnJvcigiIiArIGsgKyAiIHBsdWdpbiBjYXVzZWQgYW4gZXhjZXB0aW9uICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjaGFuZ2luZyBzdGF0dXM6ICIgKyBlcnIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gbm90aWZ5IHRoZSB1c2VyJ3MgY2FsbGJhY2sKICAgICAgICBpZiAodGhpcy5jb25uZWN0X2NhbGxiYWNrKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RfY2FsbGJhY2soc3RhdHVzLCBjb25kaXRpb24pOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBTdHJvcGhlLmVycm9yKCJVc2VyIGNvbm5lY3Rpb24gY2FsbGJhY2sgY2F1c2VkIGFuICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZXhjZXB0aW9uOiAiICsgZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9kb0Rpc2Nvbm5lY3QKICAgICAqICBfUHJpdmF0ZV8gZnVuY3Rpb24gdG8gZGlzY29ubmVjdC4KICAgICAqCiAgICAgKiAgVGhpcyBpcyB0aGUgbGFzdCBwaWVjZSBvZiB0aGUgZGlzY29ubmVjdGlvbiBsb2dpYy4gIFRoaXMgcmVzZXRzIHRoZQogICAgICogIGNvbm5lY3Rpb24gYW5kIGFsZXJ0cyB0aGUgdXNlcidzIGNvbm5lY3Rpb24gY2FsbGJhY2suCiAgICAgKi8KICAgIF9kb0Rpc2Nvbm5lY3Q6IGZ1bmN0aW9uICgpCiAgICB7CiAgICAgICAgLy8gQ2FuY2VsIERpc2Nvbm5lY3QgVGltZW91dAogICAgICAgIGlmICh0aGlzLl9kaXNjb25uZWN0VGltZW91dCAhPT0gbnVsbCkgewogICAgICAgICAgICB0aGlzLmRlbGV0ZVRpbWVkSGFuZGxlcih0aGlzLl9kaXNjb25uZWN0VGltZW91dCk7CiAgICAgICAgICAgIHRoaXMuX2Rpc2Nvbm5lY3RUaW1lb3V0ID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIFN0cm9waGUuaW5mbygiX2RvRGlzY29ubmVjdCB3YXMgY2FsbGVkIik7CiAgICAgICAgdGhpcy5fcHJvdG8uX2RvRGlzY29ubmVjdCgpOwoKICAgICAgICB0aGlzLmF1dGhlbnRpY2F0ZWQgPSBmYWxzZTsKICAgICAgICB0aGlzLmRpc2Nvbm5lY3RpbmcgPSBmYWxzZTsKCiAgICAgICAgLy8gZGVsZXRlIGhhbmRsZXJzCiAgICAgICAgdGhpcy5oYW5kbGVycyA9IFtdOwogICAgICAgIHRoaXMudGltZWRIYW5kbGVycyA9IFtdOwogICAgICAgIHRoaXMucmVtb3ZlVGltZWRzID0gW107CiAgICAgICAgdGhpcy5yZW1vdmVIYW5kbGVycyA9IFtdOwogICAgICAgIHRoaXMuYWRkVGltZWRzID0gW107CiAgICAgICAgdGhpcy5hZGRIYW5kbGVycyA9IFtdOwoKICAgICAgICAvLyB0ZWxsIHRoZSBwYXJlbnQgd2UgZGlzY29ubmVjdGVkCiAgICAgICAgdGhpcy5fY2hhbmdlQ29ubmVjdFN0YXR1cyhTdHJvcGhlLlN0YXR1cy5ESVNDT05ORUNURUQsIG51bGwpOwogICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9kYXRhUmVjdgogICAgICogIF9Qcml2YXRlXyBoYW5kbGVyIHRvIHByb2Nlc3NlcyBpbmNvbWluZyBkYXRhIGZyb20gdGhlIHRoZSBjb25uZWN0aW9uLgogICAgICoKICAgICAqICBFeGNlcHQgZm9yIF9jb25uZWN0X2NiIGhhbmRsaW5nIHRoZSBpbml0aWFsIGNvbm5lY3Rpb24gcmVxdWVzdCwKICAgICAqICB0aGlzIGZ1bmN0aW9uIGhhbmRsZXMgdGhlIGluY29taW5nIGRhdGEgZm9yIGFsbCByZXF1ZXN0cy4gIFRoaXMKICAgICAqICBmdW5jdGlvbiBhbHNvIGZpcmVzIHN0YW56YSBoYW5kbGVycyB0aGF0IG1hdGNoIGVhY2ggaW5jb21pbmcKICAgICAqICBzdGFuemEuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoU3Ryb3BoZS5SZXF1ZXN0KSByZXEgLSBUaGUgcmVxdWVzdCB0aGF0IGhhcyBkYXRhIHJlYWR5LgogICAgICogICAgKHN0cmluZykgcmVxIC0gVGhlIHN0YW56YSBhIHJhdyBzdHJpbmcgKG9wdGlvbmEpLgogICAgICovCiAgICBfZGF0YVJlY3Y6IGZ1bmN0aW9uIChyZXEsIHJhdykKICAgIHsKICAgICAgICBTdHJvcGhlLmluZm8oIl9kYXRhUmVjdiBjYWxsZWQiKTsKICAgICAgICB2YXIgZWxlbSA9IHRoaXMuX3Byb3RvLl9yZXFUb0RhdGEocmVxKTsKICAgICAgICBpZiAoZWxlbSA9PT0gbnVsbCkgeyByZXR1cm47IH0KCiAgICAgICAgaWYgKHRoaXMueG1sSW5wdXQgIT09IFN0cm9waGUuQ29ubmVjdGlvbi5wcm90b3R5cGUueG1sSW5wdXQpIHsKICAgICAgICAgICAgaWYgKGVsZW0ubm9kZU5hbWUgPT09IHRoaXMuX3Byb3RvLnN0cmlwICYmIGVsZW0uY2hpbGROb2Rlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIHRoaXMueG1sSW5wdXQoZWxlbS5jaGlsZE5vZGVzWzBdKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMueG1sSW5wdXQoZWxlbSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMucmF3SW5wdXQgIT09IFN0cm9waGUuQ29ubmVjdGlvbi5wcm90b3R5cGUucmF3SW5wdXQpIHsKICAgICAgICAgICAgaWYgKHJhdykgewogICAgICAgICAgICAgICAgdGhpcy5yYXdJbnB1dChyYXcpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5yYXdJbnB1dChTdHJvcGhlLnNlcmlhbGl6ZShlbGVtKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIHJlbW92ZSBoYW5kbGVycyBzY2hlZHVsZWQgZm9yIGRlbGV0aW9uCiAgICAgICAgdmFyIGksIGhhbmQ7CiAgICAgICAgd2hpbGUgKHRoaXMucmVtb3ZlSGFuZGxlcnMubGVuZ3RoID4gMCkgewogICAgICAgICAgICBoYW5kID0gdGhpcy5yZW1vdmVIYW5kbGVycy5wb3AoKTsKICAgICAgICAgICAgaSA9IHRoaXMuaGFuZGxlcnMuaW5kZXhPZihoYW5kKTsKICAgICAgICAgICAgaWYgKGkgPj0gMCkgewogICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIGFkZCBoYW5kbGVycyBzY2hlZHVsZWQgZm9yIGFkZGl0aW9uCiAgICAgICAgd2hpbGUgKHRoaXMuYWRkSGFuZGxlcnMubGVuZ3RoID4gMCkgewogICAgICAgICAgICB0aGlzLmhhbmRsZXJzLnB1c2godGhpcy5hZGRIYW5kbGVycy5wb3AoKSk7CiAgICAgICAgfQoKICAgICAgICAvLyBoYW5kbGUgZ3JhY2VmdWwgZGlzY29ubmVjdAogICAgICAgIGlmICh0aGlzLmRpc2Nvbm5lY3RpbmcgJiYgdGhpcy5fcHJvdG8uX2VtcHR5UXVldWUoKSkgewogICAgICAgICAgICB0aGlzLl9kb0Rpc2Nvbm5lY3QoKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIHR5cCA9IGVsZW0uZ2V0QXR0cmlidXRlKCJ0eXBlIik7CiAgICAgICAgdmFyIGNvbmQsIGNvbmZsaWN0OwogICAgICAgIGlmICh0eXAgIT09IG51bGwgJiYgdHlwID09ICJ0ZXJtaW5hdGUiKSB7CiAgICAgICAgICAgIC8vIERvbid0IHByb2Nlc3Mgc3RhbnphcyB0aGF0IGNvbWUgaW4gYWZ0ZXIgZGlzY29ubmVjdAogICAgICAgICAgICBpZiAodGhpcy5kaXNjb25uZWN0aW5nKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGFuIGVycm9yIG9jY3VycmVkCiAgICAgICAgICAgIGNvbmQgPSBlbGVtLmdldEF0dHJpYnV0ZSgiY29uZGl0aW9uIik7CiAgICAgICAgICAgIGNvbmZsaWN0ID0gZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiY29uZmxpY3QiKTsKICAgICAgICAgICAgaWYgKGNvbmQgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGlmIChjb25kID09ICJyZW1vdGUtc3RyZWFtLWVycm9yIiAmJiBjb25mbGljdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgY29uZCA9ICJjb25mbGljdCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VDb25uZWN0U3RhdHVzKFN0cm9waGUuU3RhdHVzLkNPTk5GQUlMLCBjb25kKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUNvbm5lY3RTdGF0dXMoU3Ryb3BoZS5TdGF0dXMuQ09OTkZBSUwsICJ1bmtub3duIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KCd1bmtub3duIHN0cmVhbS1lcnJvcicpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBzZW5kIGVhY2ggaW5jb21pbmcgc3RhbnphIHRocm91Z2ggdGhlIGhhbmRsZXIgY2hhaW4KICAgICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgICAgU3Ryb3BoZS5mb3JFYWNoQ2hpbGQoZWxlbSwgbnVsbCwgZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgICAgICAgIHZhciBpLCBuZXdMaXN0OwogICAgICAgICAgICAvLyBwcm9jZXNzIGhhbmRsZXJzCiAgICAgICAgICAgIG5ld0xpc3QgPSB0aGF0LmhhbmRsZXJzOwogICAgICAgICAgICB0aGF0LmhhbmRsZXJzID0gW107CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXdMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgaGFuZCA9IG5ld0xpc3RbaV07CiAgICAgICAgICAgICAgICAvLyBlbmNhcHN1bGF0ZSAnaGFuZGxlci5ydW4nIG5vdCB0byBsb3NlIHRoZSB3aG9sZSBoYW5kbGVyIGxpc3QgaWYKICAgICAgICAgICAgICAgIC8vIG9uZSBvZiB0aGUgaGFuZGxlcnMgdGhyb3dzIGFuIGV4Y2VwdGlvbgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZC5pc01hdGNoKGNoaWxkKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAodGhhdC5hdXRoZW50aWNhdGVkIHx8ICFoYW5kLnVzZXIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYW5kLnJ1bihjaGlsZCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuaGFuZGxlcnMucHVzaChoYW5kKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuaGFuZGxlcnMucHVzaChoYW5kKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgaGFuZGxlciB0aHJvd3MgYW4gZXhjZXB0aW9uLCB3ZSBjb25zaWRlciBpdCBhcyBmYWxzZQogICAgICAgICAgICAgICAgICAgIFN0cm9waGUud2FybignUmVtb3ZpbmcgU3Ryb3BoZSBoYW5kbGVycyBkdWUgdG8gdW5jYXVnaHQgZXhjZXB0aW9uOiAnICsgZS5tZXNzYWdlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKCgogICAgLyoqIEF0dHJpYnV0ZTogbWVjaGFuaXNtcwogICAgICogIFNBU0wgTWVjaGFuaXNtcyBhdmFpbGFibGUgZm9yIENvbm5jZWN0aW9uLgogICAgICovCiAgICBtZWNoYW5pc21zOiB7fSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfY29ubmVjdF9jYgogICAgICogIF9Qcml2YXRlXyBoYW5kbGVyIGZvciBpbml0aWFsIGNvbm5lY3Rpb24gcmVxdWVzdC4KICAgICAqCiAgICAgKiAgVGhpcyBoYW5kbGVyIGlzIHVzZWQgdG8gcHJvY2VzcyB0aGUgaW5pdGlhbCBjb25uZWN0aW9uIHJlcXVlc3QKICAgICAqICByZXNwb25zZSBmcm9tIHRoZSBCT1NIIHNlcnZlci4gSXQgaXMgdXNlZCB0byBzZXQgdXAgYXV0aGVudGljYXRpb24KICAgICAqICBoYW5kbGVycyBhbmQgc3RhcnQgdGhlIGF1dGhlbnRpY2F0aW9uIHByb2Nlc3MuCiAgICAgKgogICAgICogIFNBU0wgYXV0aGVudGljYXRpb24gd2lsbCBiZSBhdHRlbXB0ZWQgaWYgYXZhaWxhYmxlLCBvdGhlcndpc2UKICAgICAqICB0aGUgY29kZSB3aWxsIGZhbGwgYmFjayB0byBsZWdhY3kgYXV0aGVudGljYXRpb24uCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoU3Ryb3BoZS5SZXF1ZXN0KSByZXEgLSBUaGUgY3VycmVudCByZXF1ZXN0LgogICAgICogICAgKEZ1bmN0aW9uKSBfY2FsbGJhY2sgLSBsb3cgbGV2ZWwgKHhtcHApIGNvbm5lY3QgY2FsbGJhY2sgZnVuY3Rpb24uCiAgICAgKiAgICAgIFVzZWZ1bCBmb3IgcGx1Z2lucyB3aXRoIHRoZWlyIG93biB4bXBwIGNvbm5lY3QgY2FsbGJhY2sgKHdoZW4gdGhlaXIpCiAgICAgKiAgICAgIHdhbnQgdG8gZG8gc29tZXRoaW5nIHNwZWNpYWwpLgogICAgICovCiAgICBfY29ubmVjdF9jYjogZnVuY3Rpb24gKHJlcSwgX2NhbGxiYWNrLCByYXcpCiAgICB7CiAgICAgICAgU3Ryb3BoZS5pbmZvKCJfY29ubmVjdF9jYiB3YXMgY2FsbGVkIik7CgogICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTsKCiAgICAgICAgdmFyIGJvZHlXcmFwID0gdGhpcy5fcHJvdG8uX3JlcVRvRGF0YShyZXEpOwogICAgICAgIGlmICghYm9keVdyYXApIHsgcmV0dXJuOyB9CgogICAgICAgIGlmICh0aGlzLnhtbElucHV0ICE9PSBTdHJvcGhlLkNvbm5lY3Rpb24ucHJvdG90eXBlLnhtbElucHV0KSB7CiAgICAgICAgICAgIGlmIChib2R5V3JhcC5ub2RlTmFtZSA9PT0gdGhpcy5fcHJvdG8uc3RyaXAgJiYgYm9keVdyYXAuY2hpbGROb2Rlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIHRoaXMueG1sSW5wdXQoYm9keVdyYXAuY2hpbGROb2Rlc1swXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLnhtbElucHV0KGJvZHlXcmFwKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5yYXdJbnB1dCAhPT0gU3Ryb3BoZS5Db25uZWN0aW9uLnByb3RvdHlwZS5yYXdJbnB1dCkgewogICAgICAgICAgICBpZiAocmF3KSB7CiAgICAgICAgICAgICAgICB0aGlzLnJhd0lucHV0KHJhdyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLnJhd0lucHV0KFN0cm9waGUuc2VyaWFsaXplKGJvZHlXcmFwKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBjb25uY2hlY2sgPSB0aGlzLl9wcm90by5fY29ubmVjdF9jYihib2R5V3JhcCk7CiAgICAgICAgaWYgKGNvbm5jaGVjayA9PT0gU3Ryb3BoZS5TdGF0dXMuQ09OTkZBSUwpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5fYXV0aGVudGljYXRpb24uc2FzbF9zY3JhbV9zaGExID0gZmFsc2U7CiAgICAgICAgdGhpcy5fYXV0aGVudGljYXRpb24uc2FzbF9wbGFpbiA9IGZhbHNlOwogICAgICAgIHRoaXMuX2F1dGhlbnRpY2F0aW9uLnNhc2xfZGlnZXN0X21kNSA9IGZhbHNlOwogICAgICAgIHRoaXMuX2F1dGhlbnRpY2F0aW9uLnNhc2xfYW5vbnltb3VzID0gZmFsc2U7CgogICAgICAgIHRoaXMuX2F1dGhlbnRpY2F0aW9uLmxlZ2FjeV9hdXRoID0gZmFsc2U7CgogICAgICAgIC8vIENoZWNrIGZvciB0aGUgc3RyZWFtOmZlYXR1cmVzIHRhZwogICAgICAgIHZhciBoYXNGZWF0dXJlcyA9IGJvZHlXcmFwLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzdHJlYW06ZmVhdHVyZXMiKS5sZW5ndGggPiAwOwogICAgICAgIGlmICghaGFzRmVhdHVyZXMpIHsKICAgICAgICAgICAgaGFzRmVhdHVyZXMgPSBib2R5V3JhcC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZmVhdHVyZXMiKS5sZW5ndGggPiAwOwogICAgICAgIH0KICAgICAgICB2YXIgbWVjaGFuaXNtcyA9IGJvZHlXcmFwLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJtZWNoYW5pc20iKTsKICAgICAgICB2YXIgbWF0Y2hlZCA9IFtdOwogICAgICAgIHZhciBpLCBtZWNoLCBmb3VuZF9hdXRoZW50aWNhdGlvbiA9IGZhbHNlOwogICAgICAgIGlmICghaGFzRmVhdHVyZXMpIHsKICAgICAgICAgICAgdGhpcy5fcHJvdG8uX25vX2F1dGhfcmVjZWl2ZWQoX2NhbGxiYWNrKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAobWVjaGFuaXNtcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtZWNoYW5pc21zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBtZWNoID0gU3Ryb3BoZS5nZXRUZXh0KG1lY2hhbmlzbXNbaV0pOwogICAgICAgICAgICAgICAgaWYgKHRoaXMubWVjaGFuaXNtc1ttZWNoXSkgbWF0Y2hlZC5wdXNoKHRoaXMubWVjaGFuaXNtc1ttZWNoXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhpcy5fYXV0aGVudGljYXRpb24ubGVnYWN5X2F1dGggPQogICAgICAgICAgICBib2R5V3JhcC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYXV0aCIpLmxlbmd0aCA+IDA7CiAgICAgICAgZm91bmRfYXV0aGVudGljYXRpb24gPSB0aGlzLl9hdXRoZW50aWNhdGlvbi5sZWdhY3lfYXV0aCB8fAogICAgICAgICAgICBtYXRjaGVkLmxlbmd0aCA+IDA7CiAgICAgICAgaWYgKCFmb3VuZF9hdXRoZW50aWNhdGlvbikgewogICAgICAgICAgICB0aGlzLl9wcm90by5fbm9fYXV0aF9yZWNlaXZlZChfY2FsbGJhY2spOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmRvX2F1dGhlbnRpY2F0aW9uICE9PSBmYWxzZSkKICAgICAgICAgICAgdGhpcy5hdXRoZW50aWNhdGUobWF0Y2hlZCk7CiAgICB9LAoKICAgIC8qKiBGdW5jdGlvbjogYXV0aGVudGljYXRlCiAgICAgKiBTZXQgdXAgYXV0aGVudGljYXRpb24KICAgICAqCiAgICAgKiAgQ29udGl1bnVlcyB0aGUgaW5pdGlhbCBjb25uZWN0aW9uIHJlcXVlc3QgYnkgc2V0dGluZyB1cCBhdXRoZW50aWNhdGlvbgogICAgICogIGhhbmRsZXJzIGFuZCBzdGFydCB0aGUgYXV0aGVudGljYXRpb24gcHJvY2Vzcy4KICAgICAqCiAgICAgKiAgU0FTTCBhdXRoZW50aWNhdGlvbiB3aWxsIGJlIGF0dGVtcHRlZCBpZiBhdmFpbGFibGUsIG90aGVyd2lzZQogICAgICogIHRoZSBjb2RlIHdpbGwgZmFsbCBiYWNrIHRvIGxlZ2FjeSBhdXRoZW50aWNhdGlvbi4KICAgICAqCiAgICAgKi8KICAgIGF1dGhlbnRpY2F0ZTogZnVuY3Rpb24gKG1hdGNoZWQpCiAgICB7CiAgICAgIHZhciBpOwogICAgICAvLyBTb3J0aW5nIG1hdGNoZWQgbWVjaGFuaXNtcyBhY2NvcmRpbmcgdG8gcHJpb3JpdHkuCiAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXRjaGVkLmxlbmd0aCAtIDE7ICsraSkgewogICAgICAgIHZhciBoaWdoZXIgPSBpOwogICAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IG1hdGNoZWQubGVuZ3RoOyArK2opIHsKICAgICAgICAgIGlmIChtYXRjaGVkW2pdLnByb3RvdHlwZS5wcmlvcml0eSA+IG1hdGNoZWRbaGlnaGVyXS5wcm90b3R5cGUucHJpb3JpdHkpIHsKICAgICAgICAgICAgaGlnaGVyID0gajsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGhpZ2hlciAhPSBpKSB7CiAgICAgICAgICB2YXIgc3dhcCA9IG1hdGNoZWRbaV07CiAgICAgICAgICBtYXRjaGVkW2ldID0gbWF0Y2hlZFtoaWdoZXJdOwogICAgICAgICAgbWF0Y2hlZFtoaWdoZXJdID0gc3dhcDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIHJ1biBlYWNoIG1lY2hhbmlzbQogICAgICB2YXIgbWVjaGFuaXNtX2ZvdW5kID0gZmFsc2U7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXRjaGVkLmxlbmd0aDsgKytpKSB7CiAgICAgICAgaWYgKCFtYXRjaGVkW2ldLnRlc3QodGhpcykpIGNvbnRpbnVlOwoKICAgICAgICB0aGlzLl9zYXNsX3N1Y2Nlc3NfaGFuZGxlciA9IHRoaXMuX2FkZFN5c0hhbmRsZXIoCiAgICAgICAgICB0aGlzLl9zYXNsX3N1Y2Nlc3NfY2IuYmluZCh0aGlzKSwgbnVsbCwKICAgICAgICAgICJzdWNjZXNzIiwgbnVsbCwgbnVsbCk7CiAgICAgICAgdGhpcy5fc2FzbF9mYWlsdXJlX2hhbmRsZXIgPSB0aGlzLl9hZGRTeXNIYW5kbGVyKAogICAgICAgICAgdGhpcy5fc2FzbF9mYWlsdXJlX2NiLmJpbmQodGhpcyksIG51bGwsCiAgICAgICAgICAiZmFpbHVyZSIsIG51bGwsIG51bGwpOwogICAgICAgIHRoaXMuX3Nhc2xfY2hhbGxlbmdlX2hhbmRsZXIgPSB0aGlzLl9hZGRTeXNIYW5kbGVyKAogICAgICAgICAgdGhpcy5fc2FzbF9jaGFsbGVuZ2VfY2IuYmluZCh0aGlzKSwgbnVsbCwKICAgICAgICAgICJjaGFsbGVuZ2UiLCBudWxsLCBudWxsKTsKCiAgICAgICAgdGhpcy5fc2FzbF9tZWNoYW5pc20gPSBuZXcgbWF0Y2hlZFtpXSgpOwogICAgICAgIHRoaXMuX3Nhc2xfbWVjaGFuaXNtLm9uU3RhcnQodGhpcyk7CgogICAgICAgIHZhciByZXF1ZXN0X2F1dGhfZXhjaGFuZ2UgPSAkYnVpbGQoImF1dGgiLCB7CiAgICAgICAgICB4bWxuczogU3Ryb3BoZS5OUy5TQVNMLAogICAgICAgICAgbWVjaGFuaXNtOiB0aGlzLl9zYXNsX21lY2hhbmlzbS5uYW1lCiAgICAgICAgfSk7CgogICAgICAgIGlmICh0aGlzLl9zYXNsX21lY2hhbmlzbS5pc0NsaWVudEZpcnN0KSB7CiAgICAgICAgICB2YXIgcmVzcG9uc2UgPSB0aGlzLl9zYXNsX21lY2hhbmlzbS5vbkNoYWxsZW5nZSh0aGlzLCBudWxsKTsKICAgICAgICAgIHJlcXVlc3RfYXV0aF9leGNoYW5nZS50KEJhc2U2NC5lbmNvZGUocmVzcG9uc2UpKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuc2VuZChyZXF1ZXN0X2F1dGhfZXhjaGFuZ2UudHJlZSgpKTsKCiAgICAgICAgbWVjaGFuaXNtX2ZvdW5kID0gdHJ1ZTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgaWYgKCFtZWNoYW5pc21fZm91bmQpIHsKICAgICAgICAvLyBpZiBub25lIG9mIHRoZSBtZWNoYW5pc20gd29ya2VkCiAgICAgICAgaWYgKFN0cm9waGUuZ2V0Tm9kZUZyb21KaWQodGhpcy5qaWQpID09PSBudWxsKSB7CiAgICAgICAgICAgIC8vIHdlIGRvbid0IGhhdmUgYSBub2RlLCB3aGljaCBpcyByZXF1aXJlZCBmb3Igbm9uLWFub255bW91cwogICAgICAgICAgICAvLyBjbGllbnQgY29ubmVjdGlvbnMKICAgICAgICAgICAgdGhpcy5fY2hhbmdlQ29ubmVjdFN0YXR1cyhTdHJvcGhlLlN0YXR1cy5DT05ORkFJTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1zdHJvcGhlLWJhZC1ub24tYW5vbi1qaWQnKTsKICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KCd4LXN0cm9waGUtYmFkLW5vbi1hbm9uLWppZCcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBmYWxsIGJhY2sgdG8gbGVnYWN5IGF1dGhlbnRpY2F0aW9uCiAgICAgICAgICB0aGlzLl9jaGFuZ2VDb25uZWN0U3RhdHVzKFN0cm9waGUuU3RhdHVzLkFVVEhFTlRJQ0FUSU5HLCBudWxsKTsKICAgICAgICAgIHRoaXMuX2FkZFN5c0hhbmRsZXIodGhpcy5fYXV0aDFfY2IuYmluZCh0aGlzKSwgbnVsbCwgbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgIl9hdXRoXzEiKTsKCiAgICAgICAgICB0aGlzLnNlbmQoJGlxKHsKICAgICAgICAgICAgdHlwZTogImdldCIsCiAgICAgICAgICAgIHRvOiB0aGlzLmRvbWFpbiwKICAgICAgICAgICAgaWQ6ICJfYXV0aF8xIgogICAgICAgICAgfSkuYygicXVlcnkiLCB7CiAgICAgICAgICAgIHhtbG5zOiBTdHJvcGhlLk5TLkFVVEgKICAgICAgICAgIH0pLmMoInVzZXJuYW1lIiwge30pLnQoU3Ryb3BoZS5nZXROb2RlRnJvbUppZCh0aGlzLmppZCkpLnRyZWUoKSk7CiAgICAgICAgfQogICAgICB9CgogICAgfSwKCiAgICBfc2FzbF9jaGFsbGVuZ2VfY2I6IGZ1bmN0aW9uKGVsZW0pIHsKICAgICAgdmFyIGNoYWxsZW5nZSA9IEJhc2U2NC5kZWNvZGUoU3Ryb3BoZS5nZXRUZXh0KGVsZW0pKTsKICAgICAgdmFyIHJlc3BvbnNlID0gdGhpcy5fc2FzbF9tZWNoYW5pc20ub25DaGFsbGVuZ2UodGhpcywgY2hhbGxlbmdlKTsKCiAgICAgIHZhciBzdGFuemEgPSAkYnVpbGQoJ3Jlc3BvbnNlJywgewogICAgICAgICAgeG1sbnM6IFN0cm9waGUuTlMuU0FTTAogICAgICB9KTsKICAgICAgaWYgKHJlc3BvbnNlICE9PSAiIikgewogICAgICAgIHN0YW56YS50KEJhc2U2NC5lbmNvZGUocmVzcG9uc2UpKTsKICAgICAgfQogICAgICB0aGlzLnNlbmQoc3RhbnphLnRyZWUoKSk7CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX2F1dGgxX2NiCiAgICAgKiAgX1ByaXZhdGVfIGhhbmRsZXIgZm9yIGxlZ2FjeSBhdXRoZW50aWNhdGlvbi4KICAgICAqCiAgICAgKiAgVGhpcyBoYW5kbGVyIGlzIGNhbGxlZCBpbiByZXNwb25zZSB0byB0aGUgaW5pdGlhbCA8aXEgdHlwZT0nZ2V0Jy8+CiAgICAgKiAgZm9yIGxlZ2FjeSBhdXRoZW50aWNhdGlvbi4gIEl0IGJ1aWxkcyBhbiBhdXRoZW50aWNhdGlvbiA8aXEvPiBhbmQKICAgICAqICBzZW5kcyBpdCwgY3JlYXRpbmcgYSBoYW5kbGVyIChjYWxsaW5nIGJhY2sgdG8gX2F1dGgyX2NiKCkpIHRvCiAgICAgKiAgaGFuZGxlIHRoZSByZXN1bHQKICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChYTUxFbGVtZW50KSBlbGVtIC0gVGhlIHN0YW56YSB0aGF0IHRyaWdnZXJlZCB0aGUgY2FsbGJhY2suCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBmYWxzZSB0byByZW1vdmUgdGhlIGhhbmRsZXIuCiAgICAgKi8KICAgIC8qIGpzaGludCB1bnVzZWQ6ZmFsc2UgKi8KICAgIF9hdXRoMV9jYjogZnVuY3Rpb24gKGVsZW0pCiAgICB7CiAgICAgICAgLy8gYnVpbGQgcGxhaW50ZXh0IGF1dGggaXEKICAgICAgICB2YXIgaXEgPSAkaXEoe3R5cGU6ICJzZXQiLCBpZDogIl9hdXRoXzIifSkKICAgICAgICAgICAgLmMoJ3F1ZXJ5Jywge3htbG5zOiBTdHJvcGhlLk5TLkFVVEh9KQogICAgICAgICAgICAuYygndXNlcm5hbWUnLCB7fSkudChTdHJvcGhlLmdldE5vZGVGcm9tSmlkKHRoaXMuamlkKSkKICAgICAgICAgICAgLnVwKCkKICAgICAgICAgICAgLmMoJ3Bhc3N3b3JkJykudCh0aGlzLnBhc3MpOwoKICAgICAgICBpZiAoIVN0cm9waGUuZ2V0UmVzb3VyY2VGcm9tSmlkKHRoaXMuamlkKSkgewogICAgICAgICAgICAvLyBzaW5jZSB0aGUgdXNlciBoYXMgbm90IHN1cHBsaWVkIGEgcmVzb3VyY2UsIHdlIHBpY2sKICAgICAgICAgICAgLy8gYSBkZWZhdWx0IG9uZSBoZXJlLiAgdW5saWtlIG90aGVyIGF1dGggbWV0aG9kcywgdGhlIHNlcnZlcgogICAgICAgICAgICAvLyBjYW5ub3QgZG8gdGhpcyBmb3IgdXMuCiAgICAgICAgICAgIHRoaXMuamlkID0gU3Ryb3BoZS5nZXRCYXJlSmlkRnJvbUppZCh0aGlzLmppZCkgKyAnL3N0cm9waGUnOwogICAgICAgIH0KICAgICAgICBpcS51cCgpLmMoJ3Jlc291cmNlJywge30pLnQoU3Ryb3BoZS5nZXRSZXNvdXJjZUZyb21KaWQodGhpcy5qaWQpKTsKCiAgICAgICAgdGhpcy5fYWRkU3lzSGFuZGxlcih0aGlzLl9hdXRoMl9jYi5iaW5kKHRoaXMpLCBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgbnVsbCwgIl9hdXRoXzIiKTsKCiAgICAgICAgdGhpcy5zZW5kKGlxLnRyZWUoKSk7CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0sCiAgICAvKiBqc2hpbnQgdW51c2VkOnRydWUgKi8KCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfc2FzbF9zdWNjZXNzX2NiCiAgICAgKiAgX1ByaXZhdGVfIGhhbmRsZXIgZm9yIHN1Y2Nlc2Z1bCBTQVNMIGF1dGhlbnRpY2F0aW9uLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFhNTEVsZW1lbnQpIGVsZW0gLSBUaGUgbWF0Y2hpbmcgc3RhbnphLgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgZmFsc2UgdG8gcmVtb3ZlIHRoZSBoYW5kbGVyLgogICAgICovCiAgICBfc2FzbF9zdWNjZXNzX2NiOiBmdW5jdGlvbiAoZWxlbSkKICAgIHsKICAgICAgICBpZiAodGhpcy5fc2FzbF9kYXRhWyJzZXJ2ZXItc2lnbmF0dXJlIl0pIHsKICAgICAgICAgICAgdmFyIHNlcnZlclNpZ25hdHVyZTsKICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSBCYXNlNjQuZGVjb2RlKFN0cm9waGUuZ2V0VGV4dChlbGVtKSk7CiAgICAgICAgICAgIHZhciBhdHRyaWJNYXRjaCA9IC8oW2Etel0rKT0oW14sXSspKCx8JCkvOwogICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHN1Y2Nlc3MubWF0Y2goYXR0cmliTWF0Y2gpOwogICAgICAgICAgICBpZiAobWF0Y2hlc1sxXSA9PSAidiIpIHsKICAgICAgICAgICAgICAgIHNlcnZlclNpZ25hdHVyZSA9IG1hdGNoZXNbMl07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzZXJ2ZXJTaWduYXR1cmUgIT0gdGhpcy5fc2FzbF9kYXRhWyJzZXJ2ZXItc2lnbmF0dXJlIl0pIHsKICAgICAgICAgICAgICAvLyByZW1vdmUgb2xkIGhhbmRsZXJzCiAgICAgICAgICAgICAgdGhpcy5kZWxldGVIYW5kbGVyKHRoaXMuX3Nhc2xfZmFpbHVyZV9oYW5kbGVyKTsKICAgICAgICAgICAgICB0aGlzLl9zYXNsX2ZhaWx1cmVfaGFuZGxlciA9IG51bGw7CiAgICAgICAgICAgICAgaWYgKHRoaXMuX3Nhc2xfY2hhbGxlbmdlX2hhbmRsZXIpIHsKICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlSGFuZGxlcih0aGlzLl9zYXNsX2NoYWxsZW5nZV9oYW5kbGVyKTsKICAgICAgICAgICAgICAgIHRoaXMuX3Nhc2xfY2hhbGxlbmdlX2hhbmRsZXIgPSBudWxsOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhpcy5fc2FzbF9kYXRhID0ge307CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Nhc2xfZmFpbHVyZV9jYihudWxsKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgU3Ryb3BoZS5pbmZvKCJTQVNMIGF1dGhlbnRpY2F0aW9uIHN1Y2NlZWRlZC4iKTsKCiAgICAgICAgaWYodGhpcy5fc2FzbF9tZWNoYW5pc20pCiAgICAgICAgICB0aGlzLl9zYXNsX21lY2hhbmlzbS5vblN1Y2Nlc3MoKTsKCiAgICAgICAgLy8gcmVtb3ZlIG9sZCBoYW5kbGVycwogICAgICAgIHRoaXMuZGVsZXRlSGFuZGxlcih0aGlzLl9zYXNsX2ZhaWx1cmVfaGFuZGxlcik7CiAgICAgICAgdGhpcy5fc2FzbF9mYWlsdXJlX2hhbmRsZXIgPSBudWxsOwogICAgICAgIGlmICh0aGlzLl9zYXNsX2NoYWxsZW5nZV9oYW5kbGVyKSB7CiAgICAgICAgICAgIHRoaXMuZGVsZXRlSGFuZGxlcih0aGlzLl9zYXNsX2NoYWxsZW5nZV9oYW5kbGVyKTsKICAgICAgICAgICAgdGhpcy5fc2FzbF9jaGFsbGVuZ2VfaGFuZGxlciA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9hZGRTeXNIYW5kbGVyKHRoaXMuX3Nhc2xfYXV0aDFfY2IuYmluZCh0aGlzKSwgbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJlYW06ZmVhdHVyZXMiLCBudWxsLCBudWxsKTsKCiAgICAgICAgLy8gd2UgbXVzdCBzZW5kIGFuIHhtcHA6cmVzdGFydCBub3cKICAgICAgICB0aGlzLl9zZW5kUmVzdGFydCgpOwoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9zYXNsX2F1dGgxX2NiCiAgICAgKiAgX1ByaXZhdGVfIGhhbmRsZXIgdG8gc3RhcnQgc3RyZWFtIGJpbmRpbmcuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoWE1MRWxlbWVudCkgZWxlbSAtIFRoZSBtYXRjaGluZyBzdGFuemEuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBmYWxzZSB0byByZW1vdmUgdGhlIGhhbmRsZXIuCiAgICAgKi8KICAgIF9zYXNsX2F1dGgxX2NiOiBmdW5jdGlvbiAoZWxlbSkKICAgIHsKICAgICAgICAvLyBzYXZlIHN0cmVhbTpmZWF0dXJlcyBmb3IgZnV0dXJlIHVzYWdlCiAgICAgICAgdGhpcy5mZWF0dXJlcyA9IGVsZW07CgogICAgICAgIHZhciBpLCBjaGlsZDsKCiAgICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBjaGlsZCA9IGVsZW0uY2hpbGROb2Rlc1tpXTsKICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVOYW1lID09ICdiaW5kJykgewogICAgICAgICAgICAgICAgdGhpcy5kb19iaW5kID0gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVOYW1lID09ICdzZXNzaW9uJykgewogICAgICAgICAgICAgICAgdGhpcy5kb19zZXNzaW9uID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCF0aGlzLmRvX2JpbmQpIHsKICAgICAgICAgICAgdGhpcy5fY2hhbmdlQ29ubmVjdFN0YXR1cyhTdHJvcGhlLlN0YXR1cy5BVVRIRkFJTCwgbnVsbCk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLl9hZGRTeXNIYW5kbGVyKHRoaXMuX3Nhc2xfYmluZF9jYi5iaW5kKHRoaXMpLCBudWxsLCBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsICJfYmluZF9hdXRoXzIiKTsKCiAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IFN0cm9waGUuZ2V0UmVzb3VyY2VGcm9tSmlkKHRoaXMuamlkKTsKICAgICAgICAgICAgaWYgKHJlc291cmNlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNlbmQoJGlxKHt0eXBlOiAic2V0IiwgaWQ6ICJfYmluZF9hdXRoXzIifSkKICAgICAgICAgICAgICAgICAgICAgICAgICAuYygnYmluZCcsIHt4bWxuczogU3Ryb3BoZS5OUy5CSU5EfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAuYygncmVzb3VyY2UnLCB7fSkudChyZXNvdXJjZSkudHJlZSgpKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuc2VuZCgkaXEoe3R5cGU6ICJzZXQiLCBpZDogIl9iaW5kX2F1dGhfMiJ9KQogICAgICAgICAgICAgICAgICAgICAgICAgIC5jKCdiaW5kJywge3htbG5zOiBTdHJvcGhlLk5TLkJJTkR9KQogICAgICAgICAgICAgICAgICAgICAgICAgIC50cmVlKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9zYXNsX2JpbmRfY2IKICAgICAqICBfUHJpdmF0ZV8gaGFuZGxlciBmb3IgYmluZGluZyByZXN1bHQgYW5kIHNlc3Npb24gc3RhcnQuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoWE1MRWxlbWVudCkgZWxlbSAtIFRoZSBtYXRjaGluZyBzdGFuemEuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBmYWxzZSB0byByZW1vdmUgdGhlIGhhbmRsZXIuCiAgICAgKi8KICAgIF9zYXNsX2JpbmRfY2I6IGZ1bmN0aW9uIChlbGVtKQogICAgewogICAgICAgIGlmIChlbGVtLmdldEF0dHJpYnV0ZSgidHlwZSIpID09ICJlcnJvciIpIHsKICAgICAgICAgICAgU3Ryb3BoZS5pbmZvKCJTQVNMIGJpbmRpbmcgZmFpbGVkLiIpOwogICAgICAgICAgICB2YXIgY29uZmxpY3QgPSBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJjb25mbGljdCIpLCBjb25kaXRpb247CiAgICAgICAgICAgIGlmIChjb25mbGljdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBjb25kaXRpb24gPSAnY29uZmxpY3QnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuX2NoYW5nZUNvbm5lY3RTdGF0dXMoU3Ryb3BoZS5TdGF0dXMuQVVUSEZBSUwsIGNvbmRpdGlvbik7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIC8vIFRPRE8gLSBuZWVkIHRvIGdyYWIgZXJyb3JzCiAgICAgICAgdmFyIGJpbmQgPSBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJiaW5kIik7CiAgICAgICAgdmFyIGppZE5vZGU7CiAgICAgICAgaWYgKGJpbmQubGVuZ3RoID4gMCkgewogICAgICAgICAgICAvLyBHcmFiIGppZAogICAgICAgICAgICBqaWROb2RlID0gYmluZFswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiamlkIik7CiAgICAgICAgICAgIGlmIChqaWROb2RlLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHRoaXMuamlkID0gU3Ryb3BoZS5nZXRUZXh0KGppZE5vZGVbMF0pOwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvX3Nlc3Npb24pIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRTeXNIYW5kbGVyKHRoaXMuX3Nhc2xfc2Vzc2lvbl9jYi5iaW5kKHRoaXMpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgbnVsbCwgbnVsbCwgIl9zZXNzaW9uX2F1dGhfMiIpOwoKICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmQoJGlxKHt0eXBlOiAic2V0IiwgaWQ6ICJfc2Vzc2lvbl9hdXRoXzIifSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jKCdzZXNzaW9uJywge3htbG5zOiBTdHJvcGhlLk5TLlNFU1NJT059KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRyZWUoKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aGVudGljYXRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlQ29ubmVjdFN0YXR1cyhTdHJvcGhlLlN0YXR1cy5DT05ORUNURUQsIG51bGwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgU3Ryb3BoZS5pbmZvKCJTQVNMIGJpbmRpbmcgZmFpbGVkLiIpOwogICAgICAgICAgICB0aGlzLl9jaGFuZ2VDb25uZWN0U3RhdHVzKFN0cm9waGUuU3RhdHVzLkFVVEhGQUlMLCBudWxsKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX3Nhc2xfc2Vzc2lvbl9jYgogICAgICogIF9Qcml2YXRlXyBoYW5kbGVyIHRvIGZpbmlzaCBzdWNjZXNzZnVsIFNBU0wgY29ubmVjdGlvbi4KICAgICAqCiAgICAgKiAgVGhpcyBzZXRzIENvbm5lY3Rpb24uYXV0aGVudGljYXRlZCB0byB0cnVlIG9uIHN1Y2Nlc3MsIHdoaWNoCiAgICAgKiAgc3RhcnRzIHRoZSBwcm9jZXNzaW5nIG9mIHVzZXIgaGFuZGxlcnMuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoWE1MRWxlbWVudCkgZWxlbSAtIFRoZSBtYXRjaGluZyBzdGFuemEuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBmYWxzZSB0byByZW1vdmUgdGhlIGhhbmRsZXIuCiAgICAgKi8KICAgIF9zYXNsX3Nlc3Npb25fY2I6IGZ1bmN0aW9uIChlbGVtKQogICAgewogICAgICAgIGlmIChlbGVtLmdldEF0dHJpYnV0ZSgidHlwZSIpID09ICJyZXN1bHQiKSB7CiAgICAgICAgICAgIHRoaXMuYXV0aGVudGljYXRlZCA9IHRydWU7CiAgICAgICAgICAgIHRoaXMuX2NoYW5nZUNvbm5lY3RTdGF0dXMoU3Ryb3BoZS5TdGF0dXMuQ09OTkVDVEVELCBudWxsKTsKICAgICAgICB9IGVsc2UgaWYgKGVsZW0uZ2V0QXR0cmlidXRlKCJ0eXBlIikgPT0gImVycm9yIikgewogICAgICAgICAgICBTdHJvcGhlLmluZm8oIlNlc3Npb24gY3JlYXRpb24gZmFpbGVkLiIpOwogICAgICAgICAgICB0aGlzLl9jaGFuZ2VDb25uZWN0U3RhdHVzKFN0cm9waGUuU3RhdHVzLkFVVEhGQUlMLCBudWxsKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfc2FzbF9mYWlsdXJlX2NiCiAgICAgKiAgX1ByaXZhdGVfIGhhbmRsZXIgZm9yIFNBU0wgYXV0aGVudGljYXRpb24gZmFpbHVyZS4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChYTUxFbGVtZW50KSBlbGVtIC0gVGhlIG1hdGNoaW5nIHN0YW56YS4KICAgICAqCiAgICAgKiAgUmV0dXJuczoKICAgICAqICAgIGZhbHNlIHRvIHJlbW92ZSB0aGUgaGFuZGxlci4KICAgICAqLwogICAgLyoganNoaW50IHVudXNlZDpmYWxzZSAqLwogICAgX3Nhc2xfZmFpbHVyZV9jYjogZnVuY3Rpb24gKGVsZW0pCiAgICB7CiAgICAgICAgLy8gZGVsZXRlIHVubmVlZGVkIGhhbmRsZXJzCiAgICAgICAgaWYgKHRoaXMuX3Nhc2xfc3VjY2Vzc19oYW5kbGVyKSB7CiAgICAgICAgICAgIHRoaXMuZGVsZXRlSGFuZGxlcih0aGlzLl9zYXNsX3N1Y2Nlc3NfaGFuZGxlcik7CiAgICAgICAgICAgIHRoaXMuX3Nhc2xfc3VjY2Vzc19oYW5kbGVyID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuX3Nhc2xfY2hhbGxlbmdlX2hhbmRsZXIpIHsKICAgICAgICAgICAgdGhpcy5kZWxldGVIYW5kbGVyKHRoaXMuX3Nhc2xfY2hhbGxlbmdlX2hhbmRsZXIpOwogICAgICAgICAgICB0aGlzLl9zYXNsX2NoYWxsZW5nZV9oYW5kbGVyID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIGlmKHRoaXMuX3Nhc2xfbWVjaGFuaXNtKQogICAgICAgICAgdGhpcy5fc2FzbF9tZWNoYW5pc20ub25GYWlsdXJlKCk7CiAgICAgICAgdGhpcy5fY2hhbmdlQ29ubmVjdFN0YXR1cyhTdHJvcGhlLlN0YXR1cy5BVVRIRkFJTCwgbnVsbCk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKICAgIC8qIGpzaGludCB1bnVzZWQ6dHJ1ZSAqLwoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9hdXRoMl9jYgogICAgICogIF9Qcml2YXRlXyBoYW5kbGVyIHRvIGZpbmlzaCBsZWdhY3kgYXV0aGVudGljYXRpb24uCiAgICAgKgogICAgICogIFRoaXMgaGFuZGxlciBpcyBjYWxsZWQgd2hlbiB0aGUgcmVzdWx0IGZyb20gdGhlIGphYmJlcjppcTphdXRoCiAgICAgKiAgPGlxLz4gc3RhbnphIGlzIHJldHVybmVkLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFhNTEVsZW1lbnQpIGVsZW0gLSBUaGUgc3RhbnphIHRoYXQgdHJpZ2dlcmVkIHRoZSBjYWxsYmFjay4KICAgICAqCiAgICAgKiAgUmV0dXJuczoKICAgICAqICAgIGZhbHNlIHRvIHJlbW92ZSB0aGUgaGFuZGxlci4KICAgICAqLwogICAgX2F1dGgyX2NiOiBmdW5jdGlvbiAoZWxlbSkKICAgIHsKICAgICAgICBpZiAoZWxlbS5nZXRBdHRyaWJ1dGUoInR5cGUiKSA9PSAicmVzdWx0IikgewogICAgICAgICAgICB0aGlzLmF1dGhlbnRpY2F0ZWQgPSB0cnVlOwogICAgICAgICAgICB0aGlzLl9jaGFuZ2VDb25uZWN0U3RhdHVzKFN0cm9waGUuU3RhdHVzLkNPTk5FQ1RFRCwgbnVsbCk7CiAgICAgICAgfSBlbHNlIGlmIChlbGVtLmdldEF0dHJpYnV0ZSgidHlwZSIpID09ICJlcnJvciIpIHsKICAgICAgICAgICAgdGhpcy5fY2hhbmdlQ29ubmVjdFN0YXR1cyhTdHJvcGhlLlN0YXR1cy5BVVRIRkFJTCwgbnVsbCk7CiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgnYXV0aGVudGljYXRpb24gZmFpbGVkJyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9hZGRTeXNUaW1lZEhhbmRsZXIKICAgICAqICBfUHJpdmF0ZV8gZnVuY3Rpb24gdG8gYWRkIGEgc3lzdGVtIGxldmVsIHRpbWVkIGhhbmRsZXIuCiAgICAgKgogICAgICogIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBhZGQgYSBTdHJvcGhlLlRpbWVkSGFuZGxlciBmb3IgdGhlCiAgICAgKiAgbGlicmFyeSBjb2RlLiAgU3lzdGVtIHRpbWVkIGhhbmRsZXJzIGFyZSBhbGxvd2VkIHRvIHJ1biBiZWZvcmUKICAgICAqICBhdXRoZW50aWNhdGlvbiBpcyBjb21wbGV0ZS4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChJbnRlZ2VyKSBwZXJpb2QgLSBUaGUgcGVyaW9kIG9mIHRoZSBoYW5kbGVyLgogICAgICogICAgKEZ1bmN0aW9uKSBoYW5kbGVyIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLgogICAgICovCiAgICBfYWRkU3lzVGltZWRIYW5kbGVyOiBmdW5jdGlvbiAocGVyaW9kLCBoYW5kbGVyKQogICAgewogICAgICAgIHZhciB0aGFuZCA9IG5ldyBTdHJvcGhlLlRpbWVkSGFuZGxlcihwZXJpb2QsIGhhbmRsZXIpOwogICAgICAgIHRoYW5kLnVzZXIgPSBmYWxzZTsKICAgICAgICB0aGlzLmFkZFRpbWVkcy5wdXNoKHRoYW5kKTsKICAgICAgICByZXR1cm4gdGhhbmQ7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9hZGRTeXNIYW5kbGVyCiAgICAgKiAgX1ByaXZhdGVfIGZ1bmN0aW9uIHRvIGFkZCBhIHN5c3RlbSBsZXZlbCBzdGFuemEgaGFuZGxlci4KICAgICAqCiAgICAgKiAgVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGFkZCBhIFN0cm9waGUuSGFuZGxlciBmb3IgdGhlCiAgICAgKiAgbGlicmFyeSBjb2RlLiAgU3lzdGVtIHN0YW56YSBoYW5kbGVycyBhcmUgYWxsb3dlZCB0byBydW4gYmVmb3JlCiAgICAgKiAgYXV0aGVudGljYXRpb24gaXMgY29tcGxldGUuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoRnVuY3Rpb24pIGhhbmRsZXIgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uCiAgICAgKiAgICAoU3RyaW5nKSBucyAtIFRoZSBuYW1lc3BhY2UgdG8gbWF0Y2guCiAgICAgKiAgICAoU3RyaW5nKSBuYW1lIC0gVGhlIHN0YW56YSBuYW1lIHRvIG1hdGNoLgogICAgICogICAgKFN0cmluZykgdHlwZSAtIFRoZSBzdGFuemEgdHlwZSBhdHRyaWJ1dGUgdG8gbWF0Y2guCiAgICAgKiAgICAoU3RyaW5nKSBpZCAtIFRoZSBzdGFuemEgaWQgYXR0cmlidXRlIHRvIG1hdGNoLgogICAgICovCiAgICBfYWRkU3lzSGFuZGxlcjogZnVuY3Rpb24gKGhhbmRsZXIsIG5zLCBuYW1lLCB0eXBlLCBpZCkKICAgIHsKICAgICAgICB2YXIgaGFuZCA9IG5ldyBTdHJvcGhlLkhhbmRsZXIoaGFuZGxlciwgbnMsIG5hbWUsIHR5cGUsIGlkKTsKICAgICAgICBoYW5kLnVzZXIgPSBmYWxzZTsKICAgICAgICB0aGlzLmFkZEhhbmRsZXJzLnB1c2goaGFuZCk7CiAgICAgICAgcmV0dXJuIGhhbmQ7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9vbkRpc2Nvbm5lY3RUaW1lb3V0CiAgICAgKiAgX1ByaXZhdGVfIHRpbWVvdXQgaGFuZGxlciBmb3IgaGFuZGxpbmcgbm9uLWdyYWNlZnVsIGRpc2Nvbm5lY3Rpb24uCiAgICAgKgogICAgICogIElmIHRoZSBncmFjZWZ1bCBkaXNjb25uZWN0IHByb2Nlc3MgZG9lcyBub3QgY29tcGxldGUgd2l0aGluIHRoZQogICAgICogIHRpbWUgYWxsb3R0ZWQsIHRoaXMgaGFuZGxlciBmaW5pc2hlcyB0aGUgZGlzY29ubmVjdCBhbnl3YXkuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBmYWxzZSB0byByZW1vdmUgdGhlIGhhbmRsZXIuCiAgICAgKi8KICAgIF9vbkRpc2Nvbm5lY3RUaW1lb3V0OiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIFN0cm9waGUuaW5mbygiX29uRGlzY29ubmVjdFRpbWVvdXQgd2FzIGNhbGxlZCIpOwoKICAgICAgICB0aGlzLl9wcm90by5fb25EaXNjb25uZWN0VGltZW91dCgpOwoKICAgICAgICAvLyBhY3R1YWxseSBkaXNjb25uZWN0CiAgICAgICAgdGhpcy5fZG9EaXNjb25uZWN0KCk7CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX29uSWRsZQogICAgICogIF9Qcml2YXRlXyBoYW5kbGVyIHRvIHByb2Nlc3MgZXZlbnRzIGR1cmluZyBpZGxlIGN5Y2xlLgogICAgICoKICAgICAqICBUaGlzIGhhbmRsZXIgaXMgY2FsbGVkIGV2ZXJ5IDEwMG1zIHRvIGZpcmUgdGltZWQgaGFuZGxlcnMgdGhhdAogICAgICogIGFyZSByZWFkeSBhbmQga2VlcCBwb2xsIHJlcXVlc3RzIGdvaW5nLgogICAgICovCiAgICBfb25JZGxlOiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIHZhciBpLCB0aGFuZCwgc2luY2UsIG5ld0xpc3Q7CgogICAgICAgIC8vIGFkZCB0aW1lZCBoYW5kbGVycyBzY2hlZHVsZWQgZm9yIGFkZGl0aW9uCiAgICAgICAgLy8gTk9URTogd2UgYWRkIGJlZm9yZSByZW1vdmUgaW4gdGhlIGNhc2UgYSB0aW1lZCBoYW5kbGVyIGlzCiAgICAgICAgLy8gYWRkZWQgYW5kIHRoZW4gZGVsZXRlZCBiZWZvcmUgdGhlIG5leHQgX29uSWRsZSgpIGNhbGwuCiAgICAgICAgd2hpbGUgKHRoaXMuYWRkVGltZWRzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgdGhpcy50aW1lZEhhbmRsZXJzLnB1c2godGhpcy5hZGRUaW1lZHMucG9wKCkpOwogICAgICAgIH0KCiAgICAgICAgLy8gcmVtb3ZlIHRpbWVkIGhhbmRsZXJzIHRoYXQgaGF2ZSBiZWVuIHNjaGVkdWxlZCBmb3IgZGVsZXRpb24KICAgICAgICB3aGlsZSAodGhpcy5yZW1vdmVUaW1lZHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICB0aGFuZCA9IHRoaXMucmVtb3ZlVGltZWRzLnBvcCgpOwogICAgICAgICAgICBpID0gdGhpcy50aW1lZEhhbmRsZXJzLmluZGV4T2YodGhhbmQpOwogICAgICAgICAgICBpZiAoaSA+PSAwKSB7CiAgICAgICAgICAgICAgICB0aGlzLnRpbWVkSGFuZGxlcnMuc3BsaWNlKGksIDEpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBjYWxsIHJlYWR5IHRpbWVkIGhhbmRsZXJzCiAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgIG5ld0xpc3QgPSBbXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy50aW1lZEhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRoYW5kID0gdGhpcy50aW1lZEhhbmRsZXJzW2ldOwogICAgICAgICAgICBpZiAodGhpcy5hdXRoZW50aWNhdGVkIHx8ICF0aGFuZC51c2VyKSB7CiAgICAgICAgICAgICAgICBzaW5jZSA9IHRoYW5kLmxhc3RDYWxsZWQgKyB0aGFuZC5wZXJpb2Q7CiAgICAgICAgICAgICAgICBpZiAoc2luY2UgLSBub3cgPD0gMCkgewogICAgICAgICAgICAgICAgICAgIGlmICh0aGFuZC5ydW4oKSkgewogICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2godGhhbmQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHRoYW5kKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLnRpbWVkSGFuZGxlcnMgPSBuZXdMaXN0OwoKICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5faWRsZVRpbWVvdXQpOwoKICAgICAgICB0aGlzLl9wcm90by5fb25JZGxlKCk7CgogICAgICAgIC8vIHJlYWN0aXZhdGUgdGhlIHRpbWVyIG9ubHkgaWYgY29ubmVjdGVkCiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7CiAgICAgICAgICAgIHRoaXMuX2lkbGVUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLl9vbklkbGUuYmluZCh0aGlzKSwgMTAwKTsKICAgICAgICB9CiAgICB9Cn07CgppZiAoY2FsbGJhY2spIHsKICAgIGNhbGxiYWNrKFN0cm9waGUsICRidWlsZCwgJG1zZywgJGlxLCAkcHJlcyk7Cn0KCi8qKiBDbGFzczogU3Ryb3BoZS5TQVNMTWVjaGFuaXNtCiAqCiAqICBlbmNhcHN1bGF0ZXMgU0FTTCBhdXRoZW50aWNhdGlvbiBtZWNoYW5pc21zLgogKgogKiAgVXNlciBjb2RlIG1heSBvdmVycmlkZSB0aGUgcHJpb3JpdHkgZm9yIGVhY2ggbWVjaGFuaXNtIG9yIGRpc2FibGUgaXQgY29tcGxldGVseS4KICogIFNlZSA8cHJpb3JpdHk+IGZvciBpbmZvcm1hdGlvbiBhYm91dCBjaGFuZ2luZyBwcmlvcml0eSBhbmQgPHRlc3Q+IGZvciBpbmZvcm1hdGlhbiBvbgogKiAgaG93IHRvIGRpc2FibGUgYSBtZWNoYW5pc20uCiAqCiAqICBCeSBkZWZhdWx0LCBhbGwgbWVjaGFuaXNtcyBhcmUgZW5hYmxlZCBhbmQgdGhlIHByaW9yaXRpZXMgYXJlCiAqCiAqICBTQ1JBTS1TSEExIC0gNDAKICogIERJR0VTVC1NRDUgLSAzMAogKiAgUGxhaW4gLSAyMAogKi8KCi8qKgogKiBQcml2YXRlQ29uc3RydWN0b3I6IFN0cm9waGUuU0FTTE1lY2hhbmlzbQogKiBTQVNMIGF1dGggbWVjaGFuaXNtIGFic3RyYWN0aW9uLgogKgogKiAgUGFyYW1ldGVyczoKICogICAgKFN0cmluZykgbmFtZSAtIFNBU0wgTWVjaGFuaXNtIG5hbWUuCiAqICAgIChCb29sZWFuKSBpc0NsaWVudEZpcnN0IC0gSWYgY2xpZW50IHNob3VsZCBzZW5kIHJlc3BvbnNlIGZpcnN0IHdpdGhvdXQgY2hhbGxlbmdlLgogKiAgICAoTnVtYmVyKSBwcmlvcml0eSAtIFByaW9yaXR5LgogKgogKiAgUmV0dXJuczoKICogICAgQSBuZXcgU3Ryb3BoZS5TQVNMTWVjaGFuaXNtIG9iamVjdC4KICovClN0cm9waGUuU0FTTE1lY2hhbmlzbSA9IGZ1bmN0aW9uKG5hbWUsIGlzQ2xpZW50Rmlyc3QsIHByaW9yaXR5KSB7CiAgLyoqIFByaXZhdGVWYXJpYWJsZTogbmFtZQogICAqICBNZWNoYW5pc20gbmFtZS4KICAgKi8KICB0aGlzLm5hbWUgPSBuYW1lOwogIC8qKiBQcml2YXRlVmFyaWFibGU6IGlzQ2xpZW50Rmlyc3QKICAgKiAgSWYgY2xpZW50IHNlbmRzIHJlc3BvbnNlIHdpdGhvdXQgaW5pdGlhbCBzZXJ2ZXIgY2hhbGxlbmdlLgogICAqLwogIHRoaXMuaXNDbGllbnRGaXJzdCA9IGlzQ2xpZW50Rmlyc3Q7CiAgLyoqIFZhcmlhYmxlOiBwcmlvcml0eQogICAqICBEZXRlcm1pbmVzIHdoaWNoIDxTQVNMTWVjaGFuaXNtPiBpcyBjaG9zZW4gZm9yIGF1dGhlbnRpY2F0aW9uIChIaWdoZXIgaXMgYmV0dGVyKS4KICAgKiAgVXNlcnMgbWF5IG92ZXJyaWRlIHRoaXMgdG8gcHJpb3JpdGl6ZSBtZWNoYW5pc21zIGRpZmZlcmVudGx5LgogICAqCiAgICogIEluIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdGhlIHByaW9yaXRpZXMgYXJlCiAgICoKICAgKiAgU0NSQU0tU0hBMSAtIDQwCiAgICogIERJR0VTVC1NRDUgLSAzMAogICAqICBQbGFpbiAtIDIwCiAgICoKICAgKiAgRXhhbXBsZTogKFRoaXMgd2lsbCBjYXVzZSBTdHJvcGhlIHRvIGNob29zZSB0aGUgbWVjaGFuaXNtIHRoYXQgdGhlIHNlcnZlciBzZW50IGZpcnN0KQogICAqCiAgICogID4gU3Ryb3BoZS5TQVNMTUQ1LnByaW9yaXR5ID0gU3Ryb3BoZS5TQVNMU0hBMS5wcmlvcml0eTsKICAgKgogICAqICBTZWUgPFNBU0wgbWVjaGFuaXNtcz4gZm9yIGEgbGlzdCBvZiBhdmFpbGFibGUgbWVjaGFuaXNtcy4KICAgKgogICAqLwogIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTsKfTsKClN0cm9waGUuU0FTTE1lY2hhbmlzbS5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogIEZ1bmN0aW9uOiB0ZXN0CiAgICogIENoZWNrcyBpZiBtZWNoYW5pc20gYWJsZSB0byBydW4uCiAgICogIFRvIGRpc2FibGUgYSBtZWNoYW5pc20sIG1ha2UgdGhpcyByZXR1cm4gZmFsc2U7CiAgICoKICAgKiAgVG8gZGlzYWJsZSBwbGFpbiBhdXRoZW50aWNhdGlvbiBydW4KICAgKiAgPiBTdHJvcGhlLlNBU0xQbGFpbi50ZXN0ID0gZnVuY3Rpb24oKSB7CiAgICogID4gICByZXR1cm4gZmFsc2U7CiAgICogID4gfQogICAqCiAgICogIFNlZSA8U0FTTCBtZWNoYW5pc21zPiBmb3IgYSBsaXN0IG9mIGF2YWlsYWJsZSBtZWNoYW5pc21zLgogICAqCiAgICogIFBhcmFtZXRlcnM6CiAgICogICAgKFN0cm9waGUuQ29ubmVjdGlvbikgY29ubmVjdGlvbiAtIFRhcmdldCBDb25uZWN0aW9uLgogICAqCiAgICogIFJldHVybnM6CiAgICogICAgKEJvb2xlYW4pIElmIG1lY2hhbmlzbSB3YXMgYWJsZSB0byBydW4uCiAgICovCiAgLyoganNoaW50IHVudXNlZDpmYWxzZSAqLwogIHRlc3Q6IGZ1bmN0aW9uKGNvbm5lY3Rpb24pIHsKICAgIHJldHVybiB0cnVlOwogIH0sCiAgLyoganNoaW50IHVudXNlZDp0cnVlICovCgogIC8qKiBQcml2YXRlRnVuY3Rpb246IG9uU3RhcnQKICAgKiAgQ2FsbGVkIGJlZm9yZSBzdGFydGluZyBtZWNoYW5pc20gb24gc29tZSBjb25uZWN0aW9uLgogICAqCiAgICogIFBhcmFtZXRlcnM6CiAgICogICAgKFN0cm9waGUuQ29ubmVjdGlvbikgY29ubmVjdGlvbiAtIFRhcmdldCBDb25uZWN0aW9uLgogICAqLwogIG9uU3RhcnQ6IGZ1bmN0aW9uKGNvbm5lY3Rpb24pCiAgewogICAgdGhpcy5fY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247CiAgfSwKCiAgLyoqIFByaXZhdGVGdW5jdGlvbjogb25DaGFsbGVuZ2UKICAgKiAgQ2FsbGVkIGJ5IHByb3RvY29sIGltcGxlbWVudGF0aW9uIG9uIGluY29taW5nIGNoYWxsZW5nZS4gSWYgY2xpZW50IGlzCiAgICogIGZpcnN0IChpc0NsaWVudEZpcnN0ID09IHRydWUpIGNoYWxsZW5nZSB3aWxsIGJlIG51bGwgb24gdGhlIGZpcnN0IGNhbGwuCiAgICoKICAgKiAgUGFyYW1ldGVyczoKICAgKiAgICAoU3Ryb3BoZS5Db25uZWN0aW9uKSBjb25uZWN0aW9uIC0gVGFyZ2V0IENvbm5lY3Rpb24uCiAgICogICAgKFN0cmluZykgY2hhbGxlbmdlIC0gY3VycmVudCBjaGFsbGVuZ2UgdG8gaGFuZGxlLgogICAqCiAgICogIFJldHVybnM6CiAgICogICAgKFN0cmluZykgTWVjaGFuaXNtIHJlc3BvbnNlLgogICAqLwogIC8qIGpzaGludCB1bnVzZWQ6ZmFsc2UgKi8KICBvbkNoYWxsZW5nZTogZnVuY3Rpb24oY29ubmVjdGlvbiwgY2hhbGxlbmdlKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIllvdSBzaG91bGQgaW1wbGVtZW50IGNoYWxsZW5nZSBoYW5kbGluZyEiKTsKICB9LAogIC8qIGpzaGludCB1bnVzZWQ6dHJ1ZSAqLwoKICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBvbkZhaWx1cmUKICAgKiAgUHJvdG9jb2wgaW5mb3JtcyBtZWNoYW5pc20gaW1wbGVtZW50YXRpb24gYWJvdXQgU0FTTCBmYWlsdXJlLgogICAqLwogIG9uRmFpbHVyZTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLl9jb25uZWN0aW9uID0gbnVsbDsKICB9LAoKICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBvblN1Y2Nlc3MKICAgKiAgUHJvdG9jb2wgaW5mb3JtcyBtZWNoYW5pc20gaW1wbGVtZW50YXRpb24gYWJvdXQgU0FTTCBzdWNjZXNzLgogICAqLwogIG9uU3VjY2VzczogZnVuY3Rpb24oKSB7CiAgICB0aGlzLl9jb25uZWN0aW9uID0gbnVsbDsKICB9Cn07CgogIC8qKiBDb25zdGFudHM6IFNBU0wgbWVjaGFuaXNtcwogICAqICBBdmFpbGFibGUgYXV0aGVudGljYXRpb24gbWVjaGFuaXNtcwogICAqCiAgICogIFN0cm9waGUuU0FTTEFub255bW91cyAtIFNBU0wgQW5vbnltb3VzIGF1dGhlbnRpY2F0aW9uLgogICAqICBTdHJvcGhlLlNBU0xQbGFpbiAtIFNBU0wgUGxhaW4gYXV0aGVudGljYXRpb24uCiAgICogIFN0cm9waGUuU0FTTE1ENSAtIFNBU0wgRGlnZXN0LU1ENSBhdXRoZW50aWNhdGlvbgogICAqICBTdHJvcGhlLlNBU0xTSEExIC0gU0FTTCBTQ1JBTS1TSEExIGF1dGhlbnRpY2F0aW9uCiAgICovCgovLyBCdWlsZGluZyBTQVNMIGNhbGxiYWNrcwoKLyoqIFByaXZhdGVDb25zdHJ1Y3RvcjogU0FTTEFub255bW91cwogKiAgU0FTTCBBbm9ueW1vdXMgYXV0aGVudGljYXRpb24uCiAqLwpTdHJvcGhlLlNBU0xBbm9ueW1vdXMgPSBmdW5jdGlvbigpIHt9OwoKU3Ryb3BoZS5TQVNMQW5vbnltb3VzLnByb3RvdHlwZSA9IG5ldyBTdHJvcGhlLlNBU0xNZWNoYW5pc20oIkFOT05ZTU9VUyIsIGZhbHNlLCAxMCk7CgpTdHJvcGhlLlNBU0xBbm9ueW1vdXMudGVzdCA9IGZ1bmN0aW9uKGNvbm5lY3Rpb24pIHsKICByZXR1cm4gY29ubmVjdGlvbi5hdXRoY2lkID09PSBudWxsOwp9OwoKU3Ryb3BoZS5Db25uZWN0aW9uLnByb3RvdHlwZS5tZWNoYW5pc21zW1N0cm9waGUuU0FTTEFub255bW91cy5wcm90b3R5cGUubmFtZV0gPSBTdHJvcGhlLlNBU0xBbm9ueW1vdXM7CgovKiogUHJpdmF0ZUNvbnN0cnVjdG9yOiBTQVNMUGxhaW4KICogIFNBU0wgUGxhaW4gYXV0aGVudGljYXRpb24uCiAqLwpTdHJvcGhlLlNBU0xQbGFpbiA9IGZ1bmN0aW9uKCkge307CgpTdHJvcGhlLlNBU0xQbGFpbi5wcm90b3R5cGUgPSBuZXcgU3Ryb3BoZS5TQVNMTWVjaGFuaXNtKCJQTEFJTiIsIHRydWUsIDIwKTsKClN0cm9waGUuU0FTTFBsYWluLnRlc3QgPSBmdW5jdGlvbihjb25uZWN0aW9uKSB7CiAgcmV0dXJuIGNvbm5lY3Rpb24uYXV0aGNpZCAhPT0gbnVsbDsKfTsKClN0cm9waGUuU0FTTFBsYWluLnByb3RvdHlwZS5vbkNoYWxsZW5nZSA9IGZ1bmN0aW9uKGNvbm5lY3Rpb24pIHsKICB2YXIgYXV0aF9zdHIgPSBjb25uZWN0aW9uLmF1dGh6aWQ7CiAgYXV0aF9zdHIgPSBhdXRoX3N0ciArICJcdTAwMDAiOwogIGF1dGhfc3RyID0gYXV0aF9zdHIgKyBjb25uZWN0aW9uLmF1dGhjaWQ7CiAgYXV0aF9zdHIgPSBhdXRoX3N0ciArICJcdTAwMDAiOwogIGF1dGhfc3RyID0gYXV0aF9zdHIgKyBjb25uZWN0aW9uLnBhc3M7CiAgcmV0dXJuIGF1dGhfc3RyOwp9OwoKU3Ryb3BoZS5Db25uZWN0aW9uLnByb3RvdHlwZS5tZWNoYW5pc21zW1N0cm9waGUuU0FTTFBsYWluLnByb3RvdHlwZS5uYW1lXSA9IFN0cm9waGUuU0FTTFBsYWluOwoKLyoqIFByaXZhdGVDb25zdHJ1Y3RvcjogU0FTTFNIQTEKICogIFNBU0wgU0NSQU0gU0hBIDEgYXV0aGVudGljYXRpb24uCiAqLwpTdHJvcGhlLlNBU0xTSEExID0gZnVuY3Rpb24oKSB7fTsKCi8qIFRFU1Q6CiAqIFRoaXMgaXMgYSBzaW1wbGUgZXhhbXBsZSBvZiBhIFNDUkFNLVNIQS0xIGF1dGhlbnRpY2F0aW9uIGV4Y2hhbmdlCiAqIHdoZW4gdGhlIGNsaWVudCBkb2Vzbid0IHN1cHBvcnQgY2hhbm5lbCBiaW5kaW5ncyAodXNlcm5hbWUgJ3VzZXInIGFuZAogKiBwYXNzd29yZCAncGVuY2lsJyBhcmUgdXNlZCk6CiAqCiAqIEM6IG4sLG49dXNlcixyPWZ5a28rZDJsYmJGZ09OUnY5cWt4ZGF3TAogKiBTOiByPWZ5a28rZDJsYmJGZ09OUnY5cWt4ZGF3TDNyZmNOSFlKWTFaVnZXVnM3aixzPVFTWENSK1E2c2VrOGJmOTIsCiAqIGk9NDA5NgogKiBDOiBjPWJpd3Mscj1meWtvK2QybGJiRmdPTlJ2OXFreGRhd0wzcmZjTkhZSlkxWlZ2V1ZzN2osCiAqIHA9djBYOHYzQnoyVDBDSkdiSlF5RjBYK0hJNFRzPQogKiBTOiB2PXJtRjlwcVY4UzdzdUFvWldqYTRkSlJrRnNLUT0KICoKICovCgpTdHJvcGhlLlNBU0xTSEExLnByb3RvdHlwZSA9IG5ldyBTdHJvcGhlLlNBU0xNZWNoYW5pc20oIlNDUkFNLVNIQS0xIiwgdHJ1ZSwgNDApOwoKU3Ryb3BoZS5TQVNMU0hBMS50ZXN0ID0gZnVuY3Rpb24oY29ubmVjdGlvbikgewogIHJldHVybiBjb25uZWN0aW9uLmF1dGhjaWQgIT09IG51bGw7Cn07CgpTdHJvcGhlLlNBU0xTSEExLnByb3RvdHlwZS5vbkNoYWxsZW5nZSA9IGZ1bmN0aW9uKGNvbm5lY3Rpb24sIGNoYWxsZW5nZSwgdGVzdF9jbm9uY2UpIHsKICB2YXIgY25vbmNlID0gdGVzdF9jbm9uY2UgfHwgTUQ1LmhleGRpZ2VzdChNYXRoLnJhbmRvbSgpICogMTIzNDU2Nzg5MCk7CgogIHZhciBhdXRoX3N0ciA9ICJuPSIgKyBjb25uZWN0aW9uLmF1dGhjaWQ7CiAgYXV0aF9zdHIgKz0gIixyPSI7CiAgYXV0aF9zdHIgKz0gY25vbmNlOwoKICBjb25uZWN0aW9uLl9zYXNsX2RhdGEuY25vbmNlID0gY25vbmNlOwogIGNvbm5lY3Rpb24uX3Nhc2xfZGF0YVsiY2xpZW50LWZpcnN0LW1lc3NhZ2UtYmFyZSJdID0gYXV0aF9zdHI7CgogIGF1dGhfc3RyID0gIm4sLCIgKyBhdXRoX3N0cjsKCiAgdGhpcy5vbkNoYWxsZW5nZSA9IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBjaGFsbGVuZ2UpCiAgewogICAgdmFyIG5vbmNlLCBzYWx0LCBpdGVyLCBIaSwgVSwgVV9vbGQsIGksIGs7CiAgICB2YXIgY2xpZW50S2V5LCBzZXJ2ZXJLZXksIGNsaWVudFNpZ25hdHVyZTsKICAgIHZhciByZXNwb25zZVRleHQgPSAiYz1iaXdzLCI7CiAgICB2YXIgYXV0aE1lc3NhZ2UgPSBjb25uZWN0aW9uLl9zYXNsX2RhdGFbImNsaWVudC1maXJzdC1tZXNzYWdlLWJhcmUiXSArICIsIiArCiAgICAgIGNoYWxsZW5nZSArICIsIjsKICAgIHZhciBjbm9uY2UgPSBjb25uZWN0aW9uLl9zYXNsX2RhdGEuY25vbmNlOwogICAgdmFyIGF0dHJpYk1hdGNoID0gLyhbYS16XSspPShbXixdKykoLHwkKS87CgogICAgd2hpbGUgKGNoYWxsZW5nZS5tYXRjaChhdHRyaWJNYXRjaCkpIHsKICAgICAgdmFyIG1hdGNoZXMgPSBjaGFsbGVuZ2UubWF0Y2goYXR0cmliTWF0Y2gpOwogICAgICBjaGFsbGVuZ2UgPSBjaGFsbGVuZ2UucmVwbGFjZShtYXRjaGVzWzBdLCAiIik7CiAgICAgIHN3aXRjaCAobWF0Y2hlc1sxXSkgewogICAgICBjYXNlICJyIjoKICAgICAgICBub25jZSA9IG1hdGNoZXNbMl07CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgInMiOgogICAgICAgIHNhbHQgPSBtYXRjaGVzWzJdOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJpIjoKICAgICAgICBpdGVyID0gbWF0Y2hlc1syXTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQoKICAgIGlmIChub25jZS5zdWJzdHIoMCwgY25vbmNlLmxlbmd0aCkgIT09IGNub25jZSkgewogICAgICBjb25uZWN0aW9uLl9zYXNsX2RhdGEgPSB7fTsKICAgICAgcmV0dXJuIGNvbm5lY3Rpb24uX3Nhc2xfZmFpbHVyZV9jYigpOwogICAgfQoKICAgIHJlc3BvbnNlVGV4dCArPSAicj0iICsgbm9uY2U7CiAgICBhdXRoTWVzc2FnZSArPSByZXNwb25zZVRleHQ7CgogICAgc2FsdCA9IEJhc2U2NC5kZWNvZGUoc2FsdCk7CiAgICBzYWx0ICs9ICJceDAwXHgwMFx4MDBceDAxIjsKCiAgICBIaSA9IFVfb2xkID0gY29yZV9obWFjX3NoYTEoY29ubmVjdGlvbi5wYXNzLCBzYWx0KTsKICAgIGZvciAoaSA9IDE7IGkgPCBpdGVyOyBpKyspIHsKICAgICAgVSA9IGNvcmVfaG1hY19zaGExKGNvbm5lY3Rpb24ucGFzcywgYmluYjJzdHIoVV9vbGQpKTsKICAgICAgZm9yIChrID0gMDsgayA8IDU7IGsrKykgewogICAgICAgIEhpW2tdIF49IFVba107CiAgICAgIH0KICAgICAgVV9vbGQgPSBVOwogICAgfQogICAgSGkgPSBiaW5iMnN0cihIaSk7CgogICAgY2xpZW50S2V5ID0gY29yZV9obWFjX3NoYTEoSGksICJDbGllbnQgS2V5Iik7CiAgICBzZXJ2ZXJLZXkgPSBzdHJfaG1hY19zaGExKEhpLCAiU2VydmVyIEtleSIpOwogICAgY2xpZW50U2lnbmF0dXJlID0gY29yZV9obWFjX3NoYTEoc3RyX3NoYTEoYmluYjJzdHIoY2xpZW50S2V5KSksIGF1dGhNZXNzYWdlKTsKICAgIGNvbm5lY3Rpb24uX3Nhc2xfZGF0YVsic2VydmVyLXNpZ25hdHVyZSJdID0gYjY0X2htYWNfc2hhMShzZXJ2ZXJLZXksIGF1dGhNZXNzYWdlKTsKCiAgICBmb3IgKGsgPSAwOyBrIDwgNTsgaysrKSB7CiAgICAgIGNsaWVudEtleVtrXSBePSBjbGllbnRTaWduYXR1cmVba107CiAgICB9CgogICAgcmVzcG9uc2VUZXh0ICs9ICIscD0iICsgQmFzZTY0LmVuY29kZShiaW5iMnN0cihjbGllbnRLZXkpKTsKCiAgICByZXR1cm4gcmVzcG9uc2VUZXh0OwogIH0uYmluZCh0aGlzKTsKCiAgcmV0dXJuIGF1dGhfc3RyOwp9OwoKU3Ryb3BoZS5Db25uZWN0aW9uLnByb3RvdHlwZS5tZWNoYW5pc21zW1N0cm9waGUuU0FTTFNIQTEucHJvdG90eXBlLm5hbWVdID0gU3Ryb3BoZS5TQVNMU0hBMTsKCi8qKiBQcml2YXRlQ29uc3RydWN0b3I6IFNBU0xNRDUKICogIFNBU0wgRElHRVNUIE1ENSBhdXRoZW50aWNhdGlvbi4KICovClN0cm9waGUuU0FTTE1ENSA9IGZ1bmN0aW9uKCkge307CgpTdHJvcGhlLlNBU0xNRDUucHJvdG90eXBlID0gbmV3IFN0cm9waGUuU0FTTE1lY2hhbmlzbSgiRElHRVNULU1ENSIsIGZhbHNlLCAzMCk7CgpTdHJvcGhlLlNBU0xNRDUudGVzdCA9IGZ1bmN0aW9uKGNvbm5lY3Rpb24pIHsKICByZXR1cm4gY29ubmVjdGlvbi5hdXRoY2lkICE9PSBudWxsOwp9OwoKLyoqIFByaXZhdGVGdW5jdGlvbjogX3F1b3RlCiAqICBfUHJpdmF0ZV8gdXRpbGl0eSBmdW5jdGlvbiB0byBiYWNrc2xhc2ggZXNjYXBlIGFuZCBxdW90ZSBzdHJpbmdzLgogKgogKiAgUGFyYW1ldGVyczoKICogICAgKFN0cmluZykgc3RyIC0gVGhlIHN0cmluZyB0byBiZSBxdW90ZWQuCiAqCiAqICBSZXR1cm5zOgogKiAgICBxdW90ZWQgc3RyaW5nCiAqLwpTdHJvcGhlLlNBU0xNRDUucHJvdG90eXBlLl9xdW90ZSA9IGZ1bmN0aW9uIChzdHIpCiAgewogICAgcmV0dXJuICciJyArIHN0ci5yZXBsYWNlKC9cXC9nLCAiXFxcXCIpLnJlcGxhY2UoLyIvZywgJ1xcIicpICsgJyInOwogICAgLy8iIGVuZCBzdHJpbmcgd29ya2Fyb3VuZCBmb3IgZW1hY3MKICB9OwoKClN0cm9waGUuU0FTTE1ENS5wcm90b3R5cGUub25DaGFsbGVuZ2UgPSBmdW5jdGlvbihjb25uZWN0aW9uLCBjaGFsbGVuZ2UsIHRlc3RfY25vbmNlKSB7CiAgdmFyIGF0dHJpYk1hdGNoID0gLyhbYS16XSspPSgiW14iXSsifFteLCJdKykoPzosfCQpLzsKICB2YXIgY25vbmNlID0gdGVzdF9jbm9uY2UgfHwgTUQ1LmhleGRpZ2VzdCgiIiArIChNYXRoLnJhbmRvbSgpICogMTIzNDU2Nzg5MCkpOwogIHZhciByZWFsbSA9ICIiOwogIHZhciBob3N0ID0gbnVsbDsKICB2YXIgbm9uY2UgPSAiIjsKICB2YXIgcW9wID0gIiI7CiAgdmFyIG1hdGNoZXM7CgogIHdoaWxlIChjaGFsbGVuZ2UubWF0Y2goYXR0cmliTWF0Y2gpKSB7CiAgICBtYXRjaGVzID0gY2hhbGxlbmdlLm1hdGNoKGF0dHJpYk1hdGNoKTsKICAgIGNoYWxsZW5nZSA9IGNoYWxsZW5nZS5yZXBsYWNlKG1hdGNoZXNbMF0sICIiKTsKICAgIG1hdGNoZXNbMl0gPSBtYXRjaGVzWzJdLnJlcGxhY2UoL14iKC4rKSIkLywgIiQxIik7CiAgICBzd2l0Y2ggKG1hdGNoZXNbMV0pIHsKICAgIGNhc2UgInJlYWxtIjoKICAgICAgcmVhbG0gPSBtYXRjaGVzWzJdOwogICAgICBicmVhazsKICAgIGNhc2UgIm5vbmNlIjoKICAgICAgbm9uY2UgPSBtYXRjaGVzWzJdOwogICAgICBicmVhazsKICAgIGNhc2UgInFvcCI6CiAgICAgIHFvcCA9IG1hdGNoZXNbMl07CiAgICAgIGJyZWFrOwogICAgY2FzZSAiaG9zdCI6CiAgICAgIGhvc3QgPSBtYXRjaGVzWzJdOwogICAgICBicmVhazsKICAgIH0KICB9CgogIHZhciBkaWdlc3RfdXJpID0gY29ubmVjdGlvbi5zZXJ2dHlwZSArICIvIiArIGNvbm5lY3Rpb24uZG9tYWluOwogIGlmIChob3N0ICE9PSBudWxsKSB7CiAgICBkaWdlc3RfdXJpID0gZGlnZXN0X3VyaSArICIvIiArIGhvc3Q7CiAgfQoKICB2YXIgQTEgPSBNRDUuaGFzaChjb25uZWN0aW9uLmF1dGhjaWQgKwogICAgICAgICAgICAgICAgICAgICI6IiArIHJlYWxtICsgIjoiICsgdGhpcy5fY29ubmVjdGlvbi5wYXNzKSArCiAgICAiOiIgKyBub25jZSArICI6IiArIGNub25jZTsKICB2YXIgQTIgPSAnQVVUSEVOVElDQVRFOicgKyBkaWdlc3RfdXJpOwoKICB2YXIgcmVzcG9uc2VUZXh0ID0gIiI7CiAgcmVzcG9uc2VUZXh0ICs9ICdjaGFyc2V0PXV0Zi04LCc7CiAgcmVzcG9uc2VUZXh0ICs9ICd1c2VybmFtZT0nICsKICAgIHRoaXMuX3F1b3RlKGNvbm5lY3Rpb24uYXV0aGNpZCkgKyAnLCc7CiAgcmVzcG9uc2VUZXh0ICs9ICdyZWFsbT0nICsgdGhpcy5fcXVvdGUocmVhbG0pICsgJywnOwogIHJlc3BvbnNlVGV4dCArPSAnbm9uY2U9JyArIHRoaXMuX3F1b3RlKG5vbmNlKSArICcsJzsKICByZXNwb25zZVRleHQgKz0gJ25jPTAwMDAwMDAxLCc7CiAgcmVzcG9uc2VUZXh0ICs9ICdjbm9uY2U9JyArIHRoaXMuX3F1b3RlKGNub25jZSkgKyAnLCc7CiAgcmVzcG9uc2VUZXh0ICs9ICdkaWdlc3QtdXJpPScgKyB0aGlzLl9xdW90ZShkaWdlc3RfdXJpKSArICcsJzsKICByZXNwb25zZVRleHQgKz0gJ3Jlc3BvbnNlPScgKyBNRDUuaGV4ZGlnZXN0KE1ENS5oZXhkaWdlc3QoQTEpICsgIjoiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbmNlICsgIjowMDAwMDAwMToiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNub25jZSArICI6YXV0aDoiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1ENS5oZXhkaWdlc3QoQTIpKSArICIsIjsKICByZXNwb25zZVRleHQgKz0gJ3FvcD1hdXRoJzsKCiAgdGhpcy5vbkNoYWxsZW5nZSA9IGZ1bmN0aW9uICgpCiAgewogICAgcmV0dXJuICIiOwogIH0uYmluZCh0aGlzKTsKCiAgcmV0dXJuIHJlc3BvbnNlVGV4dDsKfTsKClN0cm9waGUuQ29ubmVjdGlvbi5wcm90b3R5cGUubWVjaGFuaXNtc1tTdHJvcGhlLlNBU0xNRDUucHJvdG90eXBlLm5hbWVdID0gU3Ryb3BoZS5TQVNMTUQ1OwoKfSkoZnVuY3Rpb24gKCkgewogICAgd2luZG93LlN0cm9waGUgPSBhcmd1bWVudHNbMF07CiAgICB3aW5kb3cuJGJ1aWxkID0gYXJndW1lbnRzWzFdOwogICAgd2luZG93LiRtc2cgPSBhcmd1bWVudHNbMl07CiAgICB3aW5kb3cuJGlxID0gYXJndW1lbnRzWzNdOwogICAgd2luZG93LiRwcmVzID0gYXJndW1lbnRzWzRdOwp9KTsKCi8qCiAgICBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZS4KICAgIFBsZWFzZSBzZWUgdGhlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy4KCiAgICBDb3B5cmlnaHQgMjAwNi0yMDA4LCBPR0csIExMQwoqLwoKLyoganNoaW50IHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWU6LCBub2FyZzogdHJ1ZSwgbGF0ZWRlZjogdHJ1ZSAqLwovKmdsb2JhbCB3aW5kb3csIHNldFRpbWVvdXQsIGNsZWFyVGltZW91dCwKICAgIFhNTEh0dHBSZXF1ZXN0LCBBY3RpdmVYT2JqZWN0LAogICAgU3Ryb3BoZSwgJGJ1aWxkICovCgoKLyoqIFByaXZhdGVDbGFzczogU3Ryb3BoZS5SZXF1ZXN0CiAqICBfUHJpdmF0ZV8gaGVscGVyIGNsYXNzIHRoYXQgcHJvdmlkZXMgYSBjcm9zcyBpbXBsZW1lbnRhdGlvbiBhYnN0cmFjdGlvbgogKiAgZm9yIGEgQk9TSCByZWxhdGVkIFhNTEh0dHBSZXF1ZXN0LgogKgogKiAgVGhlIFN0cm9waGUuUmVxdWVzdCBjbGFzcyBpcyB1c2VkIGludGVybmFsbHkgdG8gZW5jYXBzdWxhdGUgQk9TSCByZXF1ZXN0CiAqICBpbmZvcm1hdGlvbi4gIEl0IGlzIG5vdCBtZWFudCB0byBiZSB1c2VkIGZyb20gdXNlcidzIGNvZGUuCiAqLwoKLyoqIFByaXZhdGVDb25zdHJ1Y3RvcjogU3Ryb3BoZS5SZXF1ZXN0CiAqICBDcmVhdGUgYW5kIGluaXRpYWxpemUgYSBuZXcgU3Ryb3BoZS5SZXF1ZXN0IG9iamVjdC4KICoKICogIFBhcmFtZXRlcnM6CiAqICAgIChYTUxFbGVtZW50KSBlbGVtIC0gVGhlIFhNTCBkYXRhIHRvIGJlIHNlbnQgaW4gdGhlIHJlcXVlc3QuCiAqICAgIChGdW5jdGlvbikgZnVuYyAtIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlCiAqICAgICAgWE1MSHR0cFJlcXVlc3QgcmVhZHlTdGF0ZSBjaGFuZ2VzLgogKiAgICAoSW50ZWdlcikgcmlkIC0gVGhlIEJPU0ggcmlkIGF0dHJpYnV0ZSBhc3NvY2lhdGVkIHdpdGggdGhpcyByZXF1ZXN0LgogKiAgICAoSW50ZWdlcikgc2VuZHMgLSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRoaXMgc2FtZSByZXF1ZXN0IGhhcyBiZWVuCiAqICAgICAgc2VudC4KICovClN0cm9waGUuUmVxdWVzdCA9IGZ1bmN0aW9uIChlbGVtLCBmdW5jLCByaWQsIHNlbmRzKQp7CiAgICB0aGlzLmlkID0gKytTdHJvcGhlLl9yZXF1ZXN0SWQ7CiAgICB0aGlzLnhtbERhdGEgPSBlbGVtOwogICAgdGhpcy5kYXRhID0gU3Ryb3BoZS5zZXJpYWxpemUoZWxlbSk7CiAgICAvLyBzYXZlIG9yaWdpbmFsIGZ1bmN0aW9uIGluIGNhc2Ugd2UgbmVlZCB0byBtYWtlIGEgbmV3IHJlcXVlc3QKICAgIC8vIGZyb20gdGhpcyBvbmUuCiAgICB0aGlzLm9yaWdGdW5jID0gZnVuYzsKICAgIHRoaXMuZnVuYyA9IGZ1bmM7CiAgICB0aGlzLnJpZCA9IHJpZDsKICAgIHRoaXMuZGF0ZSA9IE5hTjsKICAgIHRoaXMuc2VuZHMgPSBzZW5kcyB8fCAwOwogICAgdGhpcy5hYm9ydCA9IGZhbHNlOwogICAgdGhpcy5kZWFkID0gbnVsbDsKCiAgICB0aGlzLmFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoIXRoaXMuZGF0ZSkgeyByZXR1cm4gMDsgfQogICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpOwogICAgICAgIHJldHVybiAobm93IC0gdGhpcy5kYXRlKSAvIDEwMDA7CiAgICB9OwogICAgdGhpcy50aW1lRGVhZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoIXRoaXMuZGVhZCkgeyByZXR1cm4gMDsgfQogICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpOwogICAgICAgIHJldHVybiAobm93IC0gdGhpcy5kZWFkKSAvIDEwMDA7CiAgICB9OwogICAgdGhpcy54aHIgPSB0aGlzLl9uZXdYSFIoKTsKfTsKClN0cm9waGUuUmVxdWVzdC5wcm90b3R5cGUgPSB7CiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBnZXRSZXNwb25zZQogICAgICogIEdldCBhIHJlc3BvbnNlIGZyb20gdGhlIHVuZGVybHlpbmcgWE1MSHR0cFJlcXVlc3QuCiAgICAgKgogICAgICogIFRoaXMgZnVuY3Rpb24gYXR0ZW1wdHMgdG8gZ2V0IGEgcmVzcG9uc2UgZnJvbSB0aGUgcmVxdWVzdCBhbmQgY2hlY2tzCiAgICAgKiAgZm9yIGVycm9ycy4KICAgICAqCiAgICAgKiAgVGhyb3dzOgogICAgICogICAgInBhcnNlcmVycm9yIiAtIEEgcGFyc2VyIGVycm9yIG9jY3VyZWQuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBUaGUgRE9NIGVsZW1lbnQgdHJlZSBvZiB0aGUgcmVzcG9uc2UuCiAgICAgKi8KICAgIGdldFJlc3BvbnNlOiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIHZhciBub2RlID0gbnVsbDsKICAgICAgICBpZiAodGhpcy54aHIucmVzcG9uc2VYTUwgJiYgdGhpcy54aHIucmVzcG9uc2VYTUwuZG9jdW1lbnRFbGVtZW50KSB7CiAgICAgICAgICAgIG5vZGUgPSB0aGlzLnhoci5yZXNwb25zZVhNTC5kb2N1bWVudEVsZW1lbnQ7CiAgICAgICAgICAgIGlmIChub2RlLnRhZ05hbWUgPT0gInBhcnNlcmVycm9yIikgewogICAgICAgICAgICAgICAgU3Ryb3BoZS5lcnJvcigiaW52YWxpZCByZXNwb25zZSByZWNlaXZlZCIpOwogICAgICAgICAgICAgICAgU3Ryb3BoZS5lcnJvcigicmVzcG9uc2VUZXh0OiAiICsgdGhpcy54aHIucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgIFN0cm9waGUuZXJyb3IoInJlc3BvbnNlWE1MOiAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3Ryb3BoZS5zZXJpYWxpemUodGhpcy54aHIucmVzcG9uc2VYTUwpKTsKICAgICAgICAgICAgICAgIHRocm93ICJwYXJzZXJlcnJvciI7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHRoaXMueGhyLnJlc3BvbnNlVGV4dCkgewogICAgICAgICAgICBTdHJvcGhlLmVycm9yKCJpbnZhbGlkIHJlc3BvbnNlIHJlY2VpdmVkIik7CiAgICAgICAgICAgIFN0cm9waGUuZXJyb3IoInJlc3BvbnNlVGV4dDogIiArIHRoaXMueGhyLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgIFN0cm9waGUuZXJyb3IoInJlc3BvbnNlWE1MOiAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJvcGhlLnNlcmlhbGl6ZSh0aGlzLnhoci5yZXNwb25zZVhNTCkpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG5vZGU7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9uZXdYSFIKICAgICAqICBfUHJpdmF0ZV8gaGVscGVyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBYTUxIdHRwUmVxdWVzdHMuCiAgICAgKgogICAgICogIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBYTUxIdHRwUmVxdWVzdHMgYWNyb3NzIGFsbCBpbXBsZW1lbnRhdGlvbnMuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBBIG5ldyBYTUxIdHRwUmVxdWVzdC4KICAgICAqLwogICAgX25ld1hIUjogZnVuY3Rpb24gKCkKICAgIHsKICAgICAgICB2YXIgeGhyID0gbnVsbDsKICAgICAgICBpZiAod2luZG93LlhNTEh0dHBSZXF1ZXN0KSB7CiAgICAgICAgICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgICAgICBpZiAoeGhyLm92ZXJyaWRlTWltZVR5cGUpIHsKICAgICAgICAgICAgICAgIHhoci5vdmVycmlkZU1pbWVUeXBlKCJ0ZXh0L3htbCIpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuQWN0aXZlWE9iamVjdCkgewogICAgICAgICAgICB4aHIgPSBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTsKICAgICAgICB9CgogICAgICAgIC8vIHVzZSBGdW5jdGlvbi5iaW5kKCkgdG8gcHJlcGVuZCBvdXJzZWx2ZXMgYXMgYW4gYXJndW1lbnQKICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gdGhpcy5mdW5jLmJpbmQobnVsbCwgdGhpcyk7CgogICAgICAgIHJldHVybiB4aHI7CiAgICB9Cn07CgovKiogQ2xhc3M6IFN0cm9waGUuQm9zaAogKiAgX1ByaXZhdGVfIGhlbHBlciBjbGFzcyB0aGF0IGhhbmRsZXMgQk9TSCBDb25uZWN0aW9ucwogKgogKiAgVGhlIFN0cm9waGUuQm9zaCBjbGFzcyBpcyB1c2VkIGludGVybmFsbHkgYnkgU3Ryb3BoZS5Db25uZWN0aW9uCiAqICB0byBlbmNhcHN1bGF0ZSBCT1NIIHNlc3Npb25zLiBJdCBpcyBub3QgbWVhbnQgdG8gYmUgdXNlZCBmcm9tIHVzZXIncyBjb2RlLgogKi8KCi8qKiBGaWxlOiBib3NoLmpzCiAqICBBIEphdmFTY3JpcHQgbGlicmFyeSB0byBlbmFibGUgQk9TSCBpbiBTdHJvcGhlanMuCiAqCiAqICB0aGlzIGxpYnJhcnkgdXNlcyBCaWRpcmVjdGlvbmFsLXN0cmVhbXMgT3ZlciBTeW5jaHJvbm91cyBIVFRQIChCT1NIKQogKiAgdG8gZW11bGF0ZSBhIHBlcnNpc3RlbnQsIHN0YXRlZnVsLCB0d28td2F5IGNvbm5lY3Rpb24gdG8gYW4gWE1QUCBzZXJ2ZXIuCiAqICBNb3JlIGluZm9ybWF0aW9uIG9uIEJPU0ggY2FuIGJlIGZvdW5kIGluIFhFUCAxMjQuCiAqLwoKLyoqIFByaXZhdGVDb25zdHJ1Y3RvcjogU3Ryb3BoZS5Cb3NoCiAqICBDcmVhdGUgYW5kIGluaXRpYWxpemUgYSBTdHJvcGhlLkJvc2ggb2JqZWN0LgogKgogKiAgUGFyYW1ldGVyczoKICogICAgKFN0cm9waGUuQ29ubmVjdGlvbikgY29ubmVjdGlvbiAtIFRoZSBTdHJvcGhlLkNvbm5lY3Rpb24gdGhhdCB3aWxsIHVzZSBCT1NILgogKgogKiAgUmV0dXJuczoKICogICAgQSBuZXcgU3Ryb3BoZS5Cb3NoIG9iamVjdC4KICovClN0cm9waGUuQm9zaCA9IGZ1bmN0aW9uKGNvbm5lY3Rpb24pIHsKICAgIHRoaXMuX2Nvbm4gPSBjb25uZWN0aW9uOwogICAgLyogcmVxdWVzdCBpZCBmb3IgYm9keSB0YWdzICovCiAgICB0aGlzLnJpZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQyOTQ5NjcyOTUpOwogICAgLyogVGhlIGN1cnJlbnQgc2Vzc2lvbiBJRC4gKi8KICAgIHRoaXMuc2lkID0gbnVsbDsKCiAgICAvLyBkZWZhdWx0IEJPU0ggdmFsdWVzCiAgICB0aGlzLmhvbGQgPSAxOwogICAgdGhpcy53YWl0ID0gNjA7CiAgICB0aGlzLndpbmRvdyA9IDU7CgogICAgdGhpcy5fcmVxdWVzdHMgPSBbXTsKfTsKClN0cm9waGUuQm9zaC5wcm90b3R5cGUgPSB7CiAgICAvKiogVmFyaWFibGU6IHN0cmlwCiAgICAgKgogICAgICogIEJPU0gtQ29ubmVjdGlvbnMgd2lsbCBoYXZlIGFsbCBzdGFuemFzIHdyYXBwZWQgaW4gYSA8Ym9keT4gdGFnIHdoZW4KICAgICAqICBwYXNzZWQgdG8gPFN0cm9waGUuQ29ubmVjdGlvbi54bWxJbnB1dD4gb3IgPFN0cm9waGUuQ29ubmVjdGlvbi54bWxPdXRwdXQ+LgogICAgICogIFRvIHN0cmlwIHRoaXMgdGFnLCBVc2VyIGNvZGUgY2FuIHNldCA8U3Ryb3BoZS5Cb3NoLnN0cmlwPiB0byAiYm9keSI6CiAgICAgKgogICAgICogID4gU3Ryb3BoZS5Cb3NoLnByb3RvdHlwZS5zdHJpcCA9ICJib2R5IjsKICAgICAqCiAgICAgKiAgVGhpcyB3aWxsIGVuYWJsZSBzdHJpcHBpbmcgb2YgdGhlIGJvZHkgdGFnIGluIGJvdGgKICAgICAqICA8U3Ryb3BoZS5Db25uZWN0aW9uLnhtbElucHV0PiBhbmQgPFN0cm9waGUuQ29ubmVjdGlvbi54bWxPdXRwdXQ+LgogICAgICovCiAgICBzdHJpcDogbnVsbCwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfYnVpbGRCb2R5CiAgICAgKiAgX1ByaXZhdGVfIGhlbHBlciBmdW5jdGlvbiB0byBnZW5lcmF0ZSB0aGUgPGJvZHkvPiB3cmFwcGVyIGZvciBCT1NILgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgQSBTdHJvcGhlLkJ1aWxkZXIgd2l0aCBhIDxib2R5Lz4gZWxlbWVudC4KICAgICAqLwogICAgX2J1aWxkQm9keTogZnVuY3Rpb24gKCkKICAgIHsKICAgICAgICB2YXIgYm9keVdyYXAgPSAkYnVpbGQoJ2JvZHknLCB7CiAgICAgICAgICAgIHJpZDogdGhpcy5yaWQrKywKICAgICAgICAgICAgeG1sbnM6IFN0cm9waGUuTlMuSFRUUEJJTkQKICAgICAgICB9KTsKCiAgICAgICAgaWYgKHRoaXMuc2lkICE9PSBudWxsKSB7CiAgICAgICAgICAgIGJvZHlXcmFwLmF0dHJzKHtzaWQ6IHRoaXMuc2lkfSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gYm9keVdyYXA7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9yZXNldAogICAgICogIFJlc2V0IHRoZSBjb25uZWN0aW9uLgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBieSB0aGUgcmVzZXQgZnVuY3Rpb24gb2YgdGhlIFN0cm9waGUgQ29ubmVjdGlvbgogICAgICovCiAgICBfcmVzZXQ6IGZ1bmN0aW9uICgpCiAgICB7CiAgICAgICAgdGhpcy5yaWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0Mjk0OTY3Mjk1KTsKICAgICAgICB0aGlzLnNpZCA9IG51bGw7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9jb25uZWN0CiAgICAgKiAgX1ByaXZhdGVfIGZ1bmN0aW9uIHRoYXQgaW5pdGlhbGl6ZXMgdGhlIEJPU0ggY29ubmVjdGlvbi4KICAgICAqCiAgICAgKiAgQ3JlYXRlcyBhbmQgc2VuZHMgdGhlIFJlcXVlc3QgdGhhdCBpbml0aWFsaXplcyB0aGUgQk9TSCBjb25uZWN0aW9uLgogICAgICovCiAgICBfY29ubmVjdDogZnVuY3Rpb24gKHdhaXQsIGhvbGQsIHJvdXRlKQogICAgewogICAgICAgIHRoaXMud2FpdCA9IHdhaXQgfHwgdGhpcy53YWl0OwogICAgICAgIHRoaXMuaG9sZCA9IGhvbGQgfHwgdGhpcy5ob2xkOwoKICAgICAgICAvLyBidWlsZCB0aGUgYm9keSB0YWcKICAgICAgICB2YXIgYm9keSA9IHRoaXMuX2J1aWxkQm9keSgpLmF0dHJzKHsKICAgICAgICAgICAgdG86IHRoaXMuX2Nvbm4uZG9tYWluLAogICAgICAgICAgICAieG1sOmxhbmciOiAiZW4iLAogICAgICAgICAgICB3YWl0OiB0aGlzLndhaXQsCiAgICAgICAgICAgIGhvbGQ6IHRoaXMuaG9sZCwKICAgICAgICAgICAgY29udGVudDogInRleHQveG1sOyBjaGFyc2V0PXV0Zi04IiwKICAgICAgICAgICAgdmVyOiAiMS42IiwKICAgICAgICAgICAgInhtcHA6dmVyc2lvbiI6ICIxLjAiLAogICAgICAgICAgICAieG1sbnM6eG1wcCI6IFN0cm9waGUuTlMuQk9TSAogICAgICAgIH0pOwoKICAgICAgICBpZihyb3V0ZSl7CiAgICAgICAgICAgIGJvZHkuYXR0cnMoewogICAgICAgICAgICAgICAgcm91dGU6IHJvdXRlCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgdmFyIF9jb25uZWN0X2NiID0gdGhpcy5fY29ubi5fY29ubmVjdF9jYjsKCiAgICAgICAgdGhpcy5fcmVxdWVzdHMucHVzaCgKICAgICAgICAgICAgbmV3IFN0cm9waGUuUmVxdWVzdChib2R5LnRyZWUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblJlcXVlc3RTdGF0ZUNoYW5nZS5iaW5kKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLCBfY29ubmVjdF9jYi5iaW5kKHRoaXMuX2Nvbm4pKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5LnRyZWUoKS5nZXRBdHRyaWJ1dGUoInJpZCIpKSk7CiAgICAgICAgdGhpcy5fdGhyb3R0bGVkUmVxdWVzdEhhbmRsZXIoKTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX2F0dGFjaAogICAgICogIEF0dGFjaCB0byBhbiBhbHJlYWR5IGNyZWF0ZWQgYW5kIGF1dGhlbnRpY2F0ZWQgQk9TSCBzZXNzaW9uLgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHRvIGFsbG93IFN0cm9waGUgdG8gYXR0YWNoIHRvIEJPU0gKICAgICAqICBzZXNzaW9ucyB3aGljaCBoYXZlIGJlZW4gY3JlYXRlZCBleHRlcm5hbGx5LCBwZXJoYXBzIGJ5IGEgV2ViCiAgICAgKiAgYXBwbGljYXRpb24uICBUaGlzIGlzIG9mdGVuIHVzZWQgdG8gc3VwcG9ydCBhdXRvLWxvZ2luIHR5cGUgZmVhdHVyZXMKICAgICAqICB3aXRob3V0IHB1dHRpbmcgdXNlciBjcmVkZW50aWFscyBpbnRvIHRoZSBwYWdlLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cmluZykgamlkIC0gVGhlIGZ1bGwgSklEIHRoYXQgaXMgYm91bmQgYnkgdGhlIHNlc3Npb24uCiAgICAgKiAgICAoU3RyaW5nKSBzaWQgLSBUaGUgU0lEIG9mIHRoZSBCT1NIIHNlc3Npb24uCiAgICAgKiAgICAoU3RyaW5nKSByaWQgLSBUaGUgY3VycmVudCBSSUQgb2YgdGhlIEJPU0ggc2Vzc2lvbi4gIFRoaXMgUklECiAgICAgKiAgICAgIHdpbGwgYmUgdXNlZCBieSB0aGUgbmV4dCByZXF1ZXN0LgogICAgICogICAgKEZ1bmN0aW9uKSBjYWxsYmFjayBUaGUgY29ubmVjdCBjYWxsYmFjayBmdW5jdGlvbi4KICAgICAqICAgIChJbnRlZ2VyKSB3YWl0IC0gVGhlIG9wdGlvbmFsIEhUVFBCSU5EIHdhaXQgdmFsdWUuICBUaGlzIGlzIHRoZQogICAgICogICAgICB0aW1lIHRoZSBzZXJ2ZXIgd2lsbCB3YWl0IGJlZm9yZSByZXR1cm5pbmcgYW4gZW1wdHkgcmVzdWx0IGZvcgogICAgICogICAgICBhIHJlcXVlc3QuICBUaGUgZGVmYXVsdCBzZXR0aW5nIG9mIDYwIHNlY29uZHMgaXMgcmVjb21tZW5kZWQuCiAgICAgKiAgICAgIE90aGVyIHNldHRpbmdzIHdpbGwgcmVxdWlyZSB0d2Vha3MgdG8gdGhlIFN0cm9waGUuVElNRU9VVCB2YWx1ZS4KICAgICAqICAgIChJbnRlZ2VyKSBob2xkIC0gVGhlIG9wdGlvbmFsIEhUVFBCSU5EIGhvbGQgdmFsdWUuICBUaGlzIGlzIHRoZQogICAgICogICAgICBudW1iZXIgb2YgY29ubmVjdGlvbnMgdGhlIHNlcnZlciB3aWxsIGhvbGQgYXQgb25lIHRpbWUuICBUaGlzCiAgICAgKiAgICAgIHNob3VsZCBhbG1vc3QgYWx3YXlzIGJlIHNldCB0byAxICh0aGUgZGVmYXVsdCkuCiAgICAgKiAgICAoSW50ZWdlcikgd2luZCAtIFRoZSBvcHRpb25hbCBIVFRCSU5EIHdpbmRvdyB2YWx1ZS4gIFRoaXMgaXMgdGhlCiAgICAgKiAgICAgIGFsbG93ZWQgcmFuZ2Ugb2YgcmVxdWVzdCBpZHMgdGhhdCBhcmUgdmFsaWQuICBUaGUgZGVmYXVsdCBpcyA1LgogICAgICovCiAgICBfYXR0YWNoOiBmdW5jdGlvbiAoamlkLCBzaWQsIHJpZCwgY2FsbGJhY2ssIHdhaXQsIGhvbGQsIHdpbmQpCiAgICB7CiAgICAgICAgdGhpcy5fY29ubi5qaWQgPSBqaWQ7CiAgICAgICAgdGhpcy5zaWQgPSBzaWQ7CiAgICAgICAgdGhpcy5yaWQgPSByaWQ7CgogICAgICAgIHRoaXMuX2Nvbm4uY29ubmVjdF9jYWxsYmFjayA9IGNhbGxiYWNrOwoKICAgICAgICB0aGlzLl9jb25uLmRvbWFpbiA9IFN0cm9waGUuZ2V0RG9tYWluRnJvbUppZCh0aGlzLl9jb25uLmppZCk7CgogICAgICAgIHRoaXMuX2Nvbm4uYXV0aGVudGljYXRlZCA9IHRydWU7CiAgICAgICAgdGhpcy5fY29ubi5jb25uZWN0ZWQgPSB0cnVlOwoKICAgICAgICB0aGlzLndhaXQgPSB3YWl0IHx8IHRoaXMud2FpdDsKICAgICAgICB0aGlzLmhvbGQgPSBob2xkIHx8IHRoaXMuaG9sZDsKICAgICAgICB0aGlzLndpbmRvdyA9IHdpbmQgfHwgdGhpcy53aW5kb3c7CgogICAgICAgIHRoaXMuX2Nvbm4uX2NoYW5nZUNvbm5lY3RTdGF0dXMoU3Ryb3BoZS5TdGF0dXMuQVRUQUNIRUQsIG51bGwpOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfY29ubmVjdF9jYgogICAgICogIF9Qcml2YXRlXyBoYW5kbGVyIGZvciBpbml0aWFsIGNvbm5lY3Rpb24gcmVxdWVzdC4KICAgICAqCiAgICAgKiAgVGhpcyBoYW5kbGVyIGlzIHVzZWQgdG8gcHJvY2VzcyB0aGUgQm9zaC1wYXJ0IG9mIHRoZSBpbml0aWFsIHJlcXVlc3QuCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChTdHJvcGhlLlJlcXVlc3QpIGJvZHlXcmFwIC0gVGhlIHJlY2VpdmVkIHN0YW56YS4KICAgICAqLwogICAgX2Nvbm5lY3RfY2I6IGZ1bmN0aW9uIChib2R5V3JhcCkKICAgIHsKICAgICAgICB2YXIgdHlwID0gYm9keVdyYXAuZ2V0QXR0cmlidXRlKCJ0eXBlIik7CiAgICAgICAgdmFyIGNvbmQsIGNvbmZsaWN0OwogICAgICAgIGlmICh0eXAgIT09IG51bGwgJiYgdHlwID09ICJ0ZXJtaW5hdGUiKSB7CiAgICAgICAgICAgIC8vIGFuIGVycm9yIG9jY3VycmVkCiAgICAgICAgICAgIFN0cm9waGUuZXJyb3IoIkJPU0gtQ29ubmVjdGlvbiBmYWlsZWQ6ICIgKyBjb25kKTsKICAgICAgICAgICAgY29uZCA9IGJvZHlXcmFwLmdldEF0dHJpYnV0ZSgiY29uZGl0aW9uIik7CiAgICAgICAgICAgIGNvbmZsaWN0ID0gYm9keVdyYXAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImNvbmZsaWN0Iik7CiAgICAgICAgICAgIGlmIChjb25kICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBpZiAoY29uZCA9PSAicmVtb3RlLXN0cmVhbS1lcnJvciIgJiYgY29uZmxpY3QubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIGNvbmQgPSAiY29uZmxpY3QiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5fY29ubi5fY2hhbmdlQ29ubmVjdFN0YXR1cyhTdHJvcGhlLlN0YXR1cy5DT05ORkFJTCwgY29uZCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLl9jb25uLl9jaGFuZ2VDb25uZWN0U3RhdHVzKFN0cm9waGUuU3RhdHVzLkNPTk5GQUlMLCAidW5rbm93biIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuX2Nvbm4uX2RvRGlzY29ubmVjdCgpOwogICAgICAgICAgICByZXR1cm4gU3Ryb3BoZS5TdGF0dXMuQ09OTkZBSUw7CiAgICAgICAgfQoKICAgICAgICAvLyBjaGVjayB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZXNlIGlmIF9jb25uZWN0X2NiIGlzCiAgICAgICAgLy8gY2FsbGVkIG11bHRpcGxlIHRpbWVzIGluIHRoZSBjYXNlIG9mIG1pc3Npbmcgc3RyZWFtOmZlYXR1cmVzCiAgICAgICAgaWYgKCF0aGlzLnNpZCkgewogICAgICAgICAgICB0aGlzLnNpZCA9IGJvZHlXcmFwLmdldEF0dHJpYnV0ZSgic2lkIik7CiAgICAgICAgfQogICAgICAgIHZhciB3aW5kID0gYm9keVdyYXAuZ2V0QXR0cmlidXRlKCdyZXF1ZXN0cycpOwogICAgICAgIGlmICh3aW5kKSB7IHRoaXMud2luZG93ID0gcGFyc2VJbnQod2luZCwgMTApOyB9CiAgICAgICAgdmFyIGhvbGQgPSBib2R5V3JhcC5nZXRBdHRyaWJ1dGUoJ2hvbGQnKTsKICAgICAgICBpZiAoaG9sZCkgeyB0aGlzLmhvbGQgPSBwYXJzZUludChob2xkLCAxMCk7IH0KICAgICAgICB2YXIgd2FpdCA9IGJvZHlXcmFwLmdldEF0dHJpYnV0ZSgnd2FpdCcpOwogICAgICAgIGlmICh3YWl0KSB7IHRoaXMud2FpdCA9IHBhcnNlSW50KHdhaXQsIDEwKTsgfQogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfZGlzY29ubmVjdAogICAgICogIF9Qcml2YXRlXyBwYXJ0IG9mIENvbm5lY3Rpb24uZGlzY29ubmVjdCBmb3IgQm9zaAogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFJlcXVlc3QpIHByZXMgLSBUaGlzIHN0YW56YSB3aWxsIGJlIHNlbnQgYmVmb3JlIGRpc2Nvbm5lY3RpbmcuCiAgICAgKi8KICAgIF9kaXNjb25uZWN0OiBmdW5jdGlvbiAocHJlcykKICAgIHsKICAgICAgICB0aGlzLl9zZW5kVGVybWluYXRlKHByZXMpOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfZG9EaXNjb25uZWN0CiAgICAgKiAgX1ByaXZhdGVfIGZ1bmN0aW9uIHRvIGRpc2Nvbm5lY3QuCiAgICAgKgogICAgICogIFJlc2V0cyB0aGUgU0lEIGFuZCBSSUQuCiAgICAgKi8KICAgIF9kb0Rpc2Nvbm5lY3Q6IGZ1bmN0aW9uICgpCiAgICB7CiAgICAgICAgdGhpcy5zaWQgPSBudWxsOwogICAgICAgIHRoaXMucmlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNDI5NDk2NzI5NSk7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9lbXB0eVF1ZXVlCiAgICAgKiBfUHJpdmF0ZV8gZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIFJlcXVlc3QgcXVldWUgaXMgZW1wdHkuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBUcnVlLCBpZiB0aGVyZSBhcmUgbm8gUmVxdWVzdHMgcXVldWVkLCBGYWxzZSBvdGhlcndpc2UuCiAgICAgKi8KICAgIF9lbXB0eVF1ZXVlOiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPT09IDA7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9oaXRFcnJvcgogICAgICogIF9Qcml2YXRlXyBmdW5jdGlvbiB0byBoYW5kbGUgdGhlIGVycm9yIGNvdW50LgogICAgICoKICAgICAqICBSZXF1ZXN0cyBhcmUgcmVzZW50IGF1dG9tYXRpY2FsbHkgdW50aWwgdGhlaXIgZXJyb3IgY291bnQgcmVhY2hlcwogICAgICogIDUuICBFYWNoIHRpbWUgYW4gZXJyb3IgaXMgZW5jb3VudGVyZWQsIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHRvCiAgICAgKiAgaW5jcmVtZW50IHRoZSBjb3VudCBhbmQgZGlzY29ubmVjdCBpZiB0aGUgY291bnQgaXMgdG9vIGhpZ2guCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoSW50ZWdlcikgcmVxU3RhdHVzIC0gVGhlIHJlcXVlc3Qgc3RhdHVzLgogICAgICovCiAgICBfaGl0RXJyb3I6IGZ1bmN0aW9uIChyZXFTdGF0dXMpCiAgICB7CiAgICAgICAgdGhpcy5lcnJvcnMrKzsKICAgICAgICBTdHJvcGhlLndhcm4oInJlcXVlc3QgZXJyb3JlZCwgc3RhdHVzOiAiICsgcmVxU3RhdHVzICsKICAgICAgICAgICAgICAgICAgICAgIiwgbnVtYmVyIG9mIGVycm9yczogIiArIHRoaXMuZXJyb3JzKTsKICAgICAgICBpZiAodGhpcy5lcnJvcnMgPiA0KSB7CiAgICAgICAgICAgIHRoaXMuX29uRGlzY29ubmVjdFRpbWVvdXQoKTsKICAgICAgICB9CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9ub19hdXRoX3JlY2VpdmVkCiAgICAgKgogICAgICogQ2FsbGVkIG9uIHN0cmVhbSBzdGFydC9yZXN0YXJ0IHdoZW4gbm8gc3RyZWFtOmZlYXR1cmVzCiAgICAgKiBoYXMgYmVlbiByZWNlaXZlZCBhbmQgc2VuZHMgYSBibGFuayBwb2xsIHJlcXVlc3QuCiAgICAgKi8KICAgIF9ub19hdXRoX3JlY2VpdmVkOiBmdW5jdGlvbiAoX2NhbGxiYWNrKQogICAgewogICAgICAgIGlmIChfY2FsbGJhY2spIHsKICAgICAgICAgICAgX2NhbGxiYWNrID0gX2NhbGxiYWNrLmJpbmQodGhpcy5fY29ubik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX2NhbGxiYWNrID0gdGhpcy5fY29ubi5fY29ubmVjdF9jYi5iaW5kKHRoaXMuX2Nvbm4pOwogICAgICAgIH0KICAgICAgICB2YXIgYm9keSA9IHRoaXMuX2J1aWxkQm9keSgpOwogICAgICAgIHRoaXMuX3JlcXVlc3RzLnB1c2goCiAgICAgICAgICAgICAgICBuZXcgU3Ryb3BoZS5SZXF1ZXN0KGJvZHkudHJlZSgpLAogICAgICAgICAgICAgICAgICAgIHRoaXMuX29uUmVxdWVzdFN0YXRlQ2hhbmdlLmJpbmQoCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsIF9jYWxsYmFjay5iaW5kKHRoaXMuX2Nvbm4pKSwKICAgICAgICAgICAgICAgICAgICBib2R5LnRyZWUoKS5nZXRBdHRyaWJ1dGUoInJpZCIpKSk7CiAgICAgICAgdGhpcy5fdGhyb3R0bGVkUmVxdWVzdEhhbmRsZXIoKTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX29uRGlzY29ubmVjdFRpbWVvdXQKICAgICAqICBfUHJpdmF0ZV8gdGltZW91dCBoYW5kbGVyIGZvciBoYW5kbGluZyBub24tZ3JhY2VmdWwgZGlzY29ubmVjdGlvbi4KICAgICAqCiAgICAgKiAgQ2FuY2VscyBhbGwgcmVtYWluaW5nIFJlcXVlc3RzIGFuZCBjbGVhcnMgdGhlIHF1ZXVlLgogICAgICovCiAgICBfb25EaXNjb25uZWN0VGltZW91dDogZnVuY3Rpb24gKCkKICAgIHsKICAgICAgICB2YXIgcmVxOwogICAgICAgIHdoaWxlICh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHJlcSA9IHRoaXMuX3JlcXVlc3RzLnBvcCgpOwogICAgICAgICAgICByZXEuYWJvcnQgPSB0cnVlOwogICAgICAgICAgICByZXEueGhyLmFib3J0KCk7CiAgICAgICAgICAgIC8vIGpzbGludCBjb21wbGFpbnMsIGJ1dCB0aGlzIGlzIGZpbmUuIHNldHRpbmcgdG8gZW1wdHkgZnVuYwogICAgICAgICAgICAvLyBpcyBuZWNlc3NhcnkgZm9yIElFNgogICAgICAgICAgICByZXEueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHt9OyAvLyBqc2hpbnQgaWdub3JlOmxpbmUKICAgICAgICB9CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9vbklkbGUKICAgICAqICBfUHJpdmF0ZV8gaGFuZGxlciBjYWxsZWQgYnkgU3Ryb3BoZS5Db25uZWN0aW9uLl9vbklkbGUKICAgICAqCiAgICAgKiAgU2VuZHMgYWxsIHF1ZXVlZCBSZXF1ZXN0cyBvciBwb2xscyB3aXRoIGVtcHR5IFJlcXVlc3QgaWYgdGhlcmUgYXJlIG5vbmUuCiAgICAgKi8KICAgIF9vbklkbGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2Nvbm4uX2RhdGE7CgogICAgICAgIC8vIGlmIG5vIHJlcXVlc3RzIGFyZSBpbiBwcm9ncmVzcywgcG9sbAogICAgICAgIGlmICh0aGlzLl9jb25uLmF1dGhlbnRpY2F0ZWQgJiYgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID09PSAwICYmCiAgICAgICAgICAgIGRhdGEubGVuZ3RoID09PSAwICYmICF0aGlzLl9jb25uLmRpc2Nvbm5lY3RpbmcpIHsKICAgICAgICAgICAgU3Ryb3BoZS5pbmZvKCJubyByZXF1ZXN0cyBkdXJpbmcgaWRsZSBjeWNsZSwgc2VuZGluZyAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICJibGFuayByZXF1ZXN0Iik7CiAgICAgICAgICAgIGRhdGEucHVzaChudWxsKTsKICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPCAyICYmIGRhdGEubGVuZ3RoID4gMCAmJgogICAgICAgICAgICAhdGhpcy5fY29ubi5wYXVzZWQpIHsKICAgICAgICAgICAgdmFyIGJvZHkgPSB0aGlzLl9idWlsZEJvZHkoKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoZGF0YVtpXSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW2ldID09PSAicmVzdGFydCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5hdHRycyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogdGhpcy5fY29ubi5kb21haW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAieG1sOmxhbmciOiAiZW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInhtcHA6cmVzdGFydCI6ICJ0cnVlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ4bWxuczp4bXBwIjogU3Ryb3BoZS5OUy5CT1NICiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuY25vZGUoZGF0YVtpXSkudXAoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2Nvbm4uX2RhdGE7CiAgICAgICAgICAgIHRoaXMuX2Nvbm4uX2RhdGEgPSBbXTsKICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMucHVzaCgKICAgICAgICAgICAgICAgIG5ldyBTdHJvcGhlLlJlcXVlc3QoYm9keS50cmVlKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uUmVxdWVzdFN0YXRlQ2hhbmdlLmJpbmQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLCB0aGlzLl9jb25uLl9kYXRhUmVjdi5iaW5kKHRoaXMuX2Nvbm4pKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keS50cmVlKCkuZ2V0QXR0cmlidXRlKCJyaWQiKSkpOwogICAgICAgICAgICB0aGlzLl9wcm9jZXNzUmVxdWVzdCh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggLSAxKTsKICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHZhciB0aW1lX2VsYXBzZWQgPSB0aGlzLl9yZXF1ZXN0c1swXS5hZ2UoKTsKICAgICAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3RzWzBdLmRlYWQgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0c1swXS50aW1lRGVhZCgpID4KICAgICAgICAgICAgICAgICAgICBNYXRoLmZsb29yKFN0cm9waGUuU0VDT05EQVJZX1RJTUVPVVQgKiB0aGlzLndhaXQpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGhyb3R0bGVkUmVxdWVzdEhhbmRsZXIoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRpbWVfZWxhcHNlZCA+IE1hdGguZmxvb3IoU3Ryb3BoZS5USU1FT1VUICogdGhpcy53YWl0KSkgewogICAgICAgICAgICAgICAgU3Ryb3BoZS53YXJuKCJSZXF1ZXN0ICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzWzBdLmlkICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIHRpbWVkIG91dCwgb3ZlciAiICsgTWF0aC5mbG9vcihTdHJvcGhlLlRJTUVPVVQgKiB0aGlzLndhaXQpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIHNlY29uZHMgc2luY2UgbGFzdCBhY3Rpdml0eSIpOwogICAgICAgICAgICAgICAgdGhpcy5fdGhyb3R0bGVkUmVxdWVzdEhhbmRsZXIoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX29uUmVxdWVzdFN0YXRlQ2hhbmdlCiAgICAgKiAgX1ByaXZhdGVfIGhhbmRsZXIgZm9yIFN0cm9waGUuUmVxdWVzdCBzdGF0ZSBjaGFuZ2VzLgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIHRoZSBYTUxIdHRwUmVxdWVzdCByZWFkeVN0YXRlIGNoYW5nZXMuCiAgICAgKiAgSXQgY29udGFpbnMgYSBsb3Qgb2YgZXJyb3IgaGFuZGxpbmcgbG9naWMgZm9yIHRoZSBtYW55IHdheXMgdGhhdAogICAgICogIHJlcXVlc3RzIGNhbiBmYWlsLCBhbmQgY2FsbHMgdGhlIHJlcXVlc3QgY2FsbGJhY2sgd2hlbiByZXF1ZXN0cwogICAgICogIHN1Y2NlZWQuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoRnVuY3Rpb24pIGZ1bmMgLSBUaGUgaGFuZGxlciBmb3IgdGhlIHJlcXVlc3QuCiAgICAgKiAgICAoU3Ryb3BoZS5SZXF1ZXN0KSByZXEgLSBUaGUgcmVxdWVzdCB0aGF0IGlzIGNoYW5naW5nIHJlYWR5U3RhdGUuCiAgICAgKi8KICAgIF9vblJlcXVlc3RTdGF0ZUNoYW5nZTogZnVuY3Rpb24gKGZ1bmMsIHJlcSkKICAgIHsKICAgICAgICBTdHJvcGhlLmRlYnVnKCJyZXF1ZXN0IGlkICIgKyByZXEuaWQgKwogICAgICAgICAgICAgICAgICAgICAgIi4iICsgcmVxLnNlbmRzICsgIiBzdGF0ZSBjaGFuZ2VkIHRvICIgKwogICAgICAgICAgICAgICAgICAgICAgcmVxLnhoci5yZWFkeVN0YXRlKTsKCiAgICAgICAgaWYgKHJlcS5hYm9ydCkgewogICAgICAgICAgICByZXEuYWJvcnQgPSBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgLy8gcmVxdWVzdCBjb21wbGV0ZQogICAgICAgIHZhciByZXFTdGF0dXM7CiAgICAgICAgaWYgKHJlcS54aHIucmVhZHlTdGF0ZSA9PSA0KSB7CiAgICAgICAgICAgIHJlcVN0YXR1cyA9IDA7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICByZXFTdGF0dXMgPSByZXEueGhyLnN0YXR1czsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgLy8gaWdub3JlIGVycm9ycyBmcm9tIHVuZGVmaW5lZCBzdGF0dXMgYXR0cmlidXRlLiAgd29ya3MKICAgICAgICAgICAgICAgIC8vIGFyb3VuZCBhIGJyb3dzZXIgYnVnCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0eXBlb2YocmVxU3RhdHVzKSA9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgICAgcmVxU3RhdHVzID0gMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRoaXMuZGlzY29ubmVjdGluZykgewogICAgICAgICAgICAgICAgaWYgKHJlcVN0YXR1cyA+PSA0MDApIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaXRFcnJvcihyZXFTdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHJlcUlzMCA9ICh0aGlzLl9yZXF1ZXN0c1swXSA9PSByZXEpOwogICAgICAgICAgICB2YXIgcmVxSXMxID0gKHRoaXMuX3JlcXVlc3RzWzFdID09IHJlcSk7CgogICAgICAgICAgICBpZiAoKHJlcVN0YXR1cyA+IDAgJiYgcmVxU3RhdHVzIDwgNTAwKSB8fCByZXEuc2VuZHMgPiA1KSB7CiAgICAgICAgICAgICAgICAvLyByZW1vdmUgZnJvbSBpbnRlcm5hbCBxdWV1ZQogICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlUmVxdWVzdChyZXEpOwogICAgICAgICAgICAgICAgU3Ryb3BoZS5kZWJ1ZygicmVxdWVzdCBpZCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmlkICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBzaG91bGQgbm93IGJlIHJlbW92ZWQiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gcmVxdWVzdCBzdWNjZWVkZWQKICAgICAgICAgICAgaWYgKHJlcVN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgICAgICAgIC8vIGlmIHJlcXVlc3QgMSBmaW5pc2hlZCwgb3IgcmVxdWVzdCAwIGZpbmlzaGVkIGFuZCByZXF1ZXN0CiAgICAgICAgICAgICAgICAvLyAxIGlzIG92ZXIgU3Ryb3BoZS5TRUNPTkRBUllfVElNRU9VVCBzZWNvbmRzIG9sZCwgd2UgbmVlZCB0bwogICAgICAgICAgICAgICAgLy8gcmVzdGFydCB0aGUgb3RoZXIgLSBib3RoIHdpbGwgYmUgaW4gdGhlIGZpcnN0IHNwb3QsIGFzIHRoZQogICAgICAgICAgICAgICAgLy8gY29tcGxldGVkIHJlcXVlc3QgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBxdWV1ZSBhbHJlYWR5CiAgICAgICAgICAgICAgICBpZiAocmVxSXMxIHx8CiAgICAgICAgICAgICAgICAgICAgKHJlcUlzMCAmJiB0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPiAwICYmCiAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzWzBdLmFnZSgpID4gTWF0aC5mbG9vcihTdHJvcGhlLlNFQ09OREFSWV9USU1FT1VUICogdGhpcy53YWl0KSkpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXN0YXJ0UmVxdWVzdCgwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIGNhbGwgaGFuZGxlcgogICAgICAgICAgICAgICAgU3Ryb3BoZS5kZWJ1ZygicmVxdWVzdCBpZCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmlkICsgIi4iICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLnNlbmRzICsgIiBnb3QgMjAwIik7CiAgICAgICAgICAgICAgICBmdW5jKHJlcSk7CiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IDA7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBTdHJvcGhlLmVycm9yKCJyZXF1ZXN0IGlkICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEuaWQgKyAiLiIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEuc2VuZHMgKyAiIGVycm9yICIgKyByZXFTdGF0dXMgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIGhhcHBlbmVkIik7CiAgICAgICAgICAgICAgICBpZiAocmVxU3RhdHVzID09PSAwIHx8CiAgICAgICAgICAgICAgICAgICAgKHJlcVN0YXR1cyA+PSA0MDAgJiYgcmVxU3RhdHVzIDwgNjAwKSB8fAogICAgICAgICAgICAgICAgICAgIHJlcVN0YXR1cyA+PSAxMjAwMCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpdEVycm9yKHJlcVN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcVN0YXR1cyA+PSA0MDAgJiYgcmVxU3RhdHVzIDwgNTAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm4uX2NoYW5nZUNvbm5lY3RTdGF0dXMoU3Ryb3BoZS5TdGF0dXMuRElTQ09OTkVDVElORywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29ubi5fZG9EaXNjb25uZWN0KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoISgocmVxU3RhdHVzID4gMCAmJiByZXFTdGF0dXMgPCA1MDApIHx8CiAgICAgICAgICAgICAgICAgIHJlcS5zZW5kcyA+IDUpKSB7CiAgICAgICAgICAgICAgICB0aGlzLl90aHJvdHRsZWRSZXF1ZXN0SGFuZGxlcigpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfcHJvY2Vzc1JlcXVlc3QKICAgICAqICBfUHJpdmF0ZV8gZnVuY3Rpb24gdG8gcHJvY2VzcyBhIHJlcXVlc3QgaW4gdGhlIHF1ZXVlLgogICAgICoKICAgICAqICBUaGlzIGZ1bmN0aW9uIHRha2VzIHJlcXVlc3RzIG9mZiB0aGUgcXVldWUgYW5kIHNlbmRzIHRoZW0gYW5kCiAgICAgKiAgcmVzdGFydHMgZGVhZCByZXF1ZXN0cy4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChJbnRlZ2VyKSBpIC0gVGhlIGluZGV4IG9mIHRoZSByZXF1ZXN0IGluIHRoZSBxdWV1ZS4KICAgICAqLwogICAgX3Byb2Nlc3NSZXF1ZXN0OiBmdW5jdGlvbiAoaSkKICAgIHsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgdmFyIHJlcSA9IHRoaXMuX3JlcXVlc3RzW2ldOwogICAgICAgIHZhciByZXFTdGF0dXMgPSAtMTsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKHJlcS54aHIucmVhZHlTdGF0ZSA9PSA0KSB7CiAgICAgICAgICAgICAgICByZXFTdGF0dXMgPSByZXEueGhyLnN0YXR1czsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgU3Ryb3BoZS5lcnJvcigiY2F1Z2h0IGFuIGVycm9yIGluIF9yZXF1ZXN0c1siICsgaSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIl0sIHJlcVN0YXR1czogIiArIHJlcVN0YXR1cyk7CiAgICAgICAgfQoKICAgICAgICBpZiAodHlwZW9mKHJlcVN0YXR1cykgPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgcmVxU3RhdHVzID0gLTE7CiAgICAgICAgfQoKICAgICAgICAvLyBtYWtlIHN1cmUgd2UgbGltaXQgdGhlIG51bWJlciBvZiByZXRyaWVzCiAgICAgICAgaWYgKHJlcS5zZW5kcyA+IHRoaXMubWF4UmV0cmllcykgewogICAgICAgICAgICB0aGlzLl9vbkRpc2Nvbm5lY3RUaW1lb3V0KCk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciB0aW1lX2VsYXBzZWQgPSByZXEuYWdlKCk7CiAgICAgICAgdmFyIHByaW1hcnlUaW1lb3V0ID0gKCFpc05hTih0aW1lX2VsYXBzZWQpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVfZWxhcHNlZCA+IE1hdGguZmxvb3IoU3Ryb3BoZS5USU1FT1VUICogdGhpcy53YWl0KSk7CiAgICAgICAgdmFyIHNlY29uZGFyeVRpbWVvdXQgPSAocmVxLmRlYWQgIT09IG51bGwgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEudGltZURlYWQoKSA+IE1hdGguZmxvb3IoU3Ryb3BoZS5TRUNPTkRBUllfVElNRU9VVCAqIHRoaXMud2FpdCkpOwogICAgICAgIHZhciByZXF1ZXN0Q29tcGxldGVkV2l0aFNlcnZlckVycm9yID0gKHJlcS54aHIucmVhZHlTdGF0ZSA9PSA0ICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJlcVN0YXR1cyA8IDEgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxU3RhdHVzID49IDUwMCkpOwogICAgICAgIGlmIChwcmltYXJ5VGltZW91dCB8fCBzZWNvbmRhcnlUaW1lb3V0IHx8CiAgICAgICAgICAgIHJlcXVlc3RDb21wbGV0ZWRXaXRoU2VydmVyRXJyb3IpIHsKICAgICAgICAgICAgaWYgKHNlY29uZGFyeVRpbWVvdXQpIHsKICAgICAgICAgICAgICAgIFN0cm9waGUuZXJyb3IoIlJlcXVlc3QgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzW2ldLmlkICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiB0aW1lZCBvdXQgKHNlY29uZGFyeSksIHJlc3RhcnRpbmciKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXEuYWJvcnQgPSB0cnVlOwogICAgICAgICAgICByZXEueGhyLmFib3J0KCk7CiAgICAgICAgICAgIC8vIHNldHRpbmcgdG8gbnVsbCBmYWlscyBvbiBJRTYsIHNvIHNldCB0byBlbXB0eSBmdW5jdGlvbgogICAgICAgICAgICByZXEueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgICAgICB0aGlzLl9yZXF1ZXN0c1tpXSA9IG5ldyBTdHJvcGhlLlJlcXVlc3QocmVxLnhtbERhdGEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEub3JpZ0Z1bmMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEucmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLnNlbmRzKTsKICAgICAgICAgICAgcmVxID0gdGhpcy5fcmVxdWVzdHNbaV07CiAgICAgICAgfQoKICAgICAgICBpZiAocmVxLnhoci5yZWFkeVN0YXRlID09PSAwKSB7CiAgICAgICAgICAgIFN0cm9waGUuZGVidWcoInJlcXVlc3QgaWQgIiArIHJlcS5pZCArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIi4iICsgcmVxLnNlbmRzICsgIiBwb3N0aW5nIik7CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmVxLnhoci5vcGVuKCJQT1NUIiwgdGhpcy5fY29ubi5zZXJ2aWNlLCB0aGlzLl9jb25uLm9wdGlvbnMuc3luYyA/IGZhbHNlIDogdHJ1ZSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUyKSB7CiAgICAgICAgICAgICAgICBTdHJvcGhlLmVycm9yKCJYSFIgb3BlbiBmYWlsZWQuIik7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2Nvbm4uY29ubmVjdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29ubi5fY2hhbmdlQ29ubmVjdFN0YXR1cyhTdHJvcGhlLlN0YXR1cy5DT05ORkFJTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJiYWQtc2VydmljZSIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5fY29ubi5kaXNjb25uZWN0KCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEZpcmVzIHRoZSBYSFIgcmVxdWVzdCAtLSBtYXkgYmUgaW52b2tlZCBpbW1lZGlhdGVseQogICAgICAgICAgICAvLyBvciBvbiBhIGdyYWR1YWxseSBleHBhbmRpbmcgcmV0cnkgd2luZG93IGZvciByZWNvbm5lY3RzCiAgICAgICAgICAgIHZhciBzZW5kRnVuYyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJlcS5kYXRlID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgICAgIGlmIChzZWxmLl9jb25uLm9wdGlvbnMuY3VzdG9tSGVhZGVycyl7CiAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSBzZWxmLl9jb25uLm9wdGlvbnMuY3VzdG9tSGVhZGVyczsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBoZWFkZXIgaW4gaGVhZGVycykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShoZWFkZXIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEueGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCBoZWFkZXJzW2hlYWRlcl0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVxLnhoci5zZW5kKHJlcS5kYXRhKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIC8vIEltcGxlbWVudCBwcm9ncmVzc2l2ZSBiYWNrb2ZmIGZvciByZWNvbm5lY3RzIC0tCiAgICAgICAgICAgIC8vIEZpcnN0IHJldHJ5IChzZW5kID09IDEpIHNob3VsZCBhbHNvIGJlIGluc3RhbnRhbmVvdXMKICAgICAgICAgICAgaWYgKHJlcS5zZW5kcyA+IDEpIHsKICAgICAgICAgICAgICAgIC8vIFVzaW5nIGEgY3ViZSBvZiB0aGUgcmV0cnkgbnVtYmVyIGNyZWF0ZXMgYSBuaWNlbHkKICAgICAgICAgICAgICAgIC8vIGV4cGFuZGluZyByZXRyeSB3aW5kb3cKICAgICAgICAgICAgICAgIHZhciBiYWNrb2ZmID0gTWF0aC5taW4oTWF0aC5mbG9vcihTdHJvcGhlLlRJTUVPVVQgKiB0aGlzLndhaXQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhyZXEuc2VuZHMsIDMpKSAqIDEwMDA7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHNlbmRGdW5jLCBiYWNrb2ZmKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNlbmRGdW5jKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJlcS5zZW5kcysrOwoKICAgICAgICAgICAgaWYgKHRoaXMuX2Nvbm4ueG1sT3V0cHV0ICE9PSBTdHJvcGhlLkNvbm5lY3Rpb24ucHJvdG90eXBlLnhtbE91dHB1dCkgewogICAgICAgICAgICAgICAgaWYgKHJlcS54bWxEYXRhLm5vZGVOYW1lID09PSB0aGlzLnN0cmlwICYmIHJlcS54bWxEYXRhLmNoaWxkTm9kZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29ubi54bWxPdXRwdXQocmVxLnhtbERhdGEuY2hpbGROb2Rlc1swXSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm4ueG1sT3V0cHV0KHJlcS54bWxEYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGhpcy5fY29ubi5yYXdPdXRwdXQgIT09IFN0cm9waGUuQ29ubmVjdGlvbi5wcm90b3R5cGUucmF3T3V0cHV0KSB7CiAgICAgICAgICAgICAgICB0aGlzLl9jb25uLnJhd091dHB1dChyZXEuZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBTdHJvcGhlLmRlYnVnKCJfcHJvY2Vzc1JlcXVlc3Q6ICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgIChpID09PSAwID8gImZpcnN0IiA6ICJzZWNvbmQiKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiByZXF1ZXN0IGhhcyByZWFkeVN0YXRlIG9mICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgIHJlcS54aHIucmVhZHlTdGF0ZSk7CiAgICAgICAgfQogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfcmVtb3ZlUmVxdWVzdAogICAgICogIF9Qcml2YXRlXyBmdW5jdGlvbiB0byByZW1vdmUgYSByZXF1ZXN0IGZyb20gdGhlIHF1ZXVlLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cm9waGUuUmVxdWVzdCkgcmVxIC0gVGhlIHJlcXVlc3QgdG8gcmVtb3ZlLgogICAgICovCiAgICBfcmVtb3ZlUmVxdWVzdDogZnVuY3Rpb24gKHJlcSkKICAgIHsKICAgICAgICBTdHJvcGhlLmRlYnVnKCJyZW1vdmluZyByZXF1ZXN0Iik7CgogICAgICAgIHZhciBpOwogICAgICAgIGZvciAoaSA9IHRoaXMuX3JlcXVlc3RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgICAgIGlmIChyZXEgPT0gdGhpcy5fcmVxdWVzdHNbaV0pIHsKICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gSUU2IGZhaWxzIG9uIHNldHRpbmcgdG8gbnVsbCwgc28gc2V0IHRvIGVtcHR5IGZ1bmN0aW9uCiAgICAgICAgcmVxLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7fTsKCiAgICAgICAgdGhpcy5fdGhyb3R0bGVkUmVxdWVzdEhhbmRsZXIoKTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX3Jlc3RhcnRSZXF1ZXN0CiAgICAgKiAgX1ByaXZhdGVfIGZ1bmN0aW9uIHRvIHJlc3RhcnQgYSByZXF1ZXN0IHRoYXQgaXMgcHJlc3VtZWQgZGVhZC4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChJbnRlZ2VyKSBpIC0gVGhlIGluZGV4IG9mIHRoZSByZXF1ZXN0IGluIHRoZSBxdWV1ZS4KICAgICAqLwogICAgX3Jlc3RhcnRSZXF1ZXN0OiBmdW5jdGlvbiAoaSkKICAgIHsKICAgICAgICB2YXIgcmVxID0gdGhpcy5fcmVxdWVzdHNbaV07CiAgICAgICAgaWYgKHJlcS5kZWFkID09PSBudWxsKSB7CiAgICAgICAgICAgIHJlcS5kZWFkID0gbmV3IERhdGUoKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuX3Byb2Nlc3NSZXF1ZXN0KGkpOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfcmVxVG9EYXRhCiAgICAgKiBfUHJpdmF0ZV8gZnVuY3Rpb24gdG8gZ2V0IGEgc3RhbnphIG91dCBvZiBhIHJlcXVlc3QuCiAgICAgKgogICAgICogVHJpZXMgdG8gZXh0cmFjdCBhIHN0YW56YSBvdXQgb2YgYSBSZXF1ZXN0IE9iamVjdC4KICAgICAqIFdoZW4gdGhpcyBmYWlscyB0aGUgY3VycmVudCBjb25uZWN0aW9uIHdpbGwgYmUgZGlzY29ubmVjdGVkLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKE9iamVjdCkgcmVxIC0gVGhlIFJlcXVlc3QuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBUaGUgc3RhbnphIHRoYXQgd2FzIHBhc3NlZC4KICAgICAqLwogICAgX3JlcVRvRGF0YTogZnVuY3Rpb24gKHJlcSkKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICByZXR1cm4gcmVxLmdldFJlc3BvbnNlKCk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICBpZiAoZSAhPSAicGFyc2VyZXJyb3IiKSB7IHRocm93IGU7IH0KICAgICAgICAgICAgdGhpcy5fY29ubi5kaXNjb25uZWN0KCJzdHJvcGhlLXBhcnNlcmVycm9yIik7CiAgICAgICAgfQogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfc2VuZFRlcm1pbmF0ZQogICAgICogIF9Qcml2YXRlXyBmdW5jdGlvbiB0byBzZW5kIGluaXRpYWwgZGlzY29ubmVjdCBzZXF1ZW5jZS4KICAgICAqCiAgICAgKiAgVGhpcyBpcyB0aGUgZmlyc3Qgc3RlcCBpbiBhIGdyYWNlZnVsIGRpc2Nvbm5lY3QuICBJdCBzZW5kcwogICAgICogIHRoZSBCT1NIIHNlcnZlciBhIHRlcm1pbmF0ZSBib2R5IGFuZCBpbmNsdWRlcyBhbiB1bmF2YWlsYWJsZQogICAgICogIHByZXNlbmNlIGlmIGF1dGhlbnRpY2F0aW9uIGhhcyBjb21wbGV0ZWQuCiAgICAgKi8KICAgIF9zZW5kVGVybWluYXRlOiBmdW5jdGlvbiAocHJlcykKICAgIHsKICAgICAgICBTdHJvcGhlLmluZm8oIl9zZW5kVGVybWluYXRlIHdhcyBjYWxsZWQiKTsKICAgICAgICB2YXIgYm9keSA9IHRoaXMuX2J1aWxkQm9keSgpLmF0dHJzKHt0eXBlOiAidGVybWluYXRlIn0pOwoKICAgICAgICBpZiAocHJlcykgewogICAgICAgICAgICBib2R5LmNub2RlKHByZXMudHJlZSgpKTsKICAgICAgICB9CgogICAgICAgIHZhciByZXEgPSBuZXcgU3Ryb3BoZS5SZXF1ZXN0KGJvZHkudHJlZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uUmVxdWVzdFN0YXRlQ2hhbmdlLmJpbmQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsIHRoaXMuX2Nvbm4uX2RhdGFSZWN2LmJpbmQodGhpcy5fY29ubikpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkudHJlZSgpLmdldEF0dHJpYnV0ZSgicmlkIikpOwoKICAgICAgICB0aGlzLl9yZXF1ZXN0cy5wdXNoKHJlcSk7CiAgICAgICAgdGhpcy5fdGhyb3R0bGVkUmVxdWVzdEhhbmRsZXIoKTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX3NlbmQKICAgICAqICBfUHJpdmF0ZV8gcGFydCBvZiB0aGUgQ29ubmVjdGlvbi5zZW5kIGZ1bmN0aW9uIGZvciBCT1NICiAgICAgKgogICAgICogSnVzdCB0cmlnZ2VycyB0aGUgUmVxdWVzdEhhbmRsZXIgdG8gc2VuZCB0aGUgbWVzc2FnZXMgdGhhdCBhcmUgaW4gdGhlIHF1ZXVlCiAgICAgKi8KICAgIF9zZW5kOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2Nvbm4uX2lkbGVUaW1lb3V0KTsKICAgICAgICB0aGlzLl90aHJvdHRsZWRSZXF1ZXN0SGFuZGxlcigpOwogICAgICAgIHRoaXMuX2Nvbm4uX2lkbGVUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLl9jb25uLl9vbklkbGUuYmluZCh0aGlzLl9jb25uKSwgMTAwKTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX3NlbmRSZXN0YXJ0CiAgICAgKgogICAgICogIFNlbmQgYW4geG1wcDpyZXN0YXJ0IHN0YW56YS4KICAgICAqLwogICAgX3NlbmRSZXN0YXJ0OiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIHRoaXMuX3Rocm90dGxlZFJlcXVlc3RIYW5kbGVyKCk7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2Nvbm4uX2lkbGVUaW1lb3V0KTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX3Rocm90dGxlZFJlcXVlc3RIYW5kbGVyCiAgICAgKiAgX1ByaXZhdGVfIGZ1bmN0aW9uIHRvIHRocm90dGxlIHJlcXVlc3RzIHRvIHRoZSBjb25uZWN0aW9uIHdpbmRvdy4KICAgICAqCiAgICAgKiAgVGhpcyBmdW5jdGlvbiBtYWtlcyBzdXJlIHdlIGRvbid0IHNlbmQgcmVxdWVzdHMgc28gZmFzdCB0aGF0IHRoZQogICAgICogIHJlcXVlc3QgaWRzIG92ZXJmbG93IHRoZSBjb25uZWN0aW9uIHdpbmRvdyBpbiB0aGUgY2FzZSB0aGF0IG9uZQogICAgICogIHJlcXVlc3QgZGllZC4KICAgICAqLwogICAgX3Rocm90dGxlZFJlcXVlc3RIYW5kbGVyOiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIGlmICghdGhpcy5fcmVxdWVzdHMpIHsKICAgICAgICAgICAgU3Ryb3BoZS5kZWJ1ZygiX3Rocm90dGxlZFJlcXVlc3RIYW5kbGVyIGNhbGxlZCB3aXRoICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICJ1bmRlZmluZWQgcmVxdWVzdHMiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBTdHJvcGhlLmRlYnVnKCJfdGhyb3R0bGVkUmVxdWVzdEhhbmRsZXIgY2FsbGVkIHdpdGggIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoICsgIiByZXF1ZXN0cyIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCF0aGlzLl9yZXF1ZXN0cyB8fCB0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc1JlcXVlc3QoMCk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5fcmVxdWVzdHMubGVuZ3RoID4gMSAmJgogICAgICAgICAgICBNYXRoLmFicyh0aGlzLl9yZXF1ZXN0c1swXS5yaWQgLQogICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0c1sxXS5yaWQpIDwgdGhpcy53aW5kb3cpIHsKICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc1JlcXVlc3QoMSk7CiAgICAgICAgfQogICAgfQp9OwoKLyoKICAgIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlLgogICAgUGxlYXNlIHNlZSB0aGUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLgoKICAgIENvcHlyaWdodCAyMDA2LTIwMDgsIE9HRywgTExDCiovCgovKiBqc2hpbnQgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZTosIG5vYXJnOiB0cnVlLCBsYXRlZGVmOiB0cnVlICovCi8qZ2xvYmFsIGRvY3VtZW50LCB3aW5kb3csIGNsZWFyVGltZW91dCwgV2ViU29ja2V0LAogICAgRE9NUGFyc2VyLCBTdHJvcGhlLCAkYnVpbGQgKi8KCi8qKiBDbGFzczogU3Ryb3BoZS5XZWJTb2NrZXQKICogIF9Qcml2YXRlXyBoZWxwZXIgY2xhc3MgdGhhdCBoYW5kbGVzIFdlYlNvY2tldCBDb25uZWN0aW9ucwogKgogKiAgVGhlIFN0cm9waGUuV2ViU29ja2V0IGNsYXNzIGlzIHVzZWQgaW50ZXJuYWxseSBieSBTdHJvcGhlLkNvbm5lY3Rpb24KICogIHRvIGVuY2Fwc3VsYXRlIFdlYlNvY2tldCBzZXNzaW9ucy4gSXQgaXMgbm90IG1lYW50IHRvIGJlIHVzZWQgZnJvbSB1c2VyJ3MgY29kZS4KICovCgovKiogRmlsZTogd2Vic29ja2V0LmpzCiAqICBBIEphdmFTY3JpcHQgbGlicmFyeSB0byBlbmFibGUgWE1QUCBvdmVyIFdlYnNvY2tldCBpbiBTdHJvcGhlanMuCiAqCiAqICBUaGlzIGZpbGUgaW1wbGVtZW50cyBYTVBQIG92ZXIgV2ViU29ja2V0cyBmb3IgU3Ryb3BoZWpzLgogKiAgSWYgYSBDb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkIHdpdGggYSBXZWJzb2NrZXQgdXJsICh3czovLy4uLikKICogIFN0cm9waGUgd2lsbCB1c2UgV2ViU29ja2V0cy4KICogIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIFhNUFAtb3ZlciBXZWJTb2NrZXQgc2VlIHRoaXMgUkZDIGRyYWZ0OgogKiAgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtaWV0Zi14bXBwLXdlYnNvY2tldC0wMAogKgogKiAgV2ViU29ja2V0IHN1cHBvcnQgaW1wbGVtZW50ZWQgYnkgQW5kcmVhcyBHdXRoIChhbmRyZWFzLmd1dGhAcnd0aC1hYWNoZW4uZGUpCiAqLwoKLyoqIFByaXZhdGVDb25zdHJ1Y3RvcjogU3Ryb3BoZS5XZWJzb2NrZXQKICogIENyZWF0ZSBhbmQgaW5pdGlhbGl6ZSBhIFN0cm9waGUuV2ViU29ja2V0IG9iamVjdC4KICogIEN1cnJlbnRseSBvbmx5IHNldHMgdGhlIGNvbm5lY3Rpb24gT2JqZWN0LgogKgogKiAgUGFyYW1ldGVyczoKICogICAgKFN0cm9waGUuQ29ubmVjdGlvbikgY29ubmVjdGlvbiAtIFRoZSBTdHJvcGhlLkNvbm5lY3Rpb24gdGhhdCB3aWxsIHVzZSBXZWJTb2NrZXRzLgogKgogKiAgUmV0dXJuczoKICogICAgQSBuZXcgU3Ryb3BoZS5XZWJTb2NrZXQgb2JqZWN0LgogKi8KU3Ryb3BoZS5XZWJzb2NrZXQgPSBmdW5jdGlvbihjb25uZWN0aW9uKSB7CiAgICB0aGlzLl9jb25uID0gY29ubmVjdGlvbjsKICAgIHRoaXMuc3RyaXAgPSAic3RyZWFtOnN0cmVhbSI7CgogICAgdmFyIHNlcnZpY2UgPSBjb25uZWN0aW9uLnNlcnZpY2U7CiAgICBpZiAoc2VydmljZS5pbmRleE9mKCJ3czoiKSAhPT0gMCAmJiBzZXJ2aWNlLmluZGV4T2YoIndzczoiKSAhPT0gMCkgewogICAgICAgIC8vIElmIHRoZSBzZXJ2aWNlIGlzIG5vdCBhbiBhYnNvbHV0ZSBVUkwsIGFzc3VtZSBpdCBpcyBhIHBhdGggYW5kIHB1dCB0aGUgYWJzb2x1dGUKICAgICAgICAvLyBVUkwgdG9nZXRoZXIgZnJvbSBvcHRpb25zLCBjdXJyZW50IFVSTCBhbmQgdGhlIHBhdGguCiAgICAgICAgdmFyIG5ld19zZXJ2aWNlID0gIiI7CgogICAgICAgIGlmIChjb25uZWN0aW9uLm9wdGlvbnMucHJvdG9jb2wgPT09ICJ3cyIgJiYgd2luZG93LmxvY2F0aW9uLnByb3RvY29sICE9PSAiaHR0cHM6IikgewogICAgICAgICAgICBuZXdfc2VydmljZSArPSAid3MiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld19zZXJ2aWNlICs9ICJ3c3MiOwogICAgICAgIH0KCiAgICAgICAgbmV3X3NlcnZpY2UgKz0gIjovLyIgKyB3aW5kb3cubG9jYXRpb24uaG9zdDsKCiAgICAgICAgaWYgKHNlcnZpY2UuaW5kZXhPZigiLyIpICE9PSAwKSB7CiAgICAgICAgICAgIG5ld19zZXJ2aWNlICs9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHNlcnZpY2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3X3NlcnZpY2UgKz0gc2VydmljZTsKICAgICAgICB9CgogICAgICAgIGNvbm5lY3Rpb24uc2VydmljZSA9IG5ld19zZXJ2aWNlOwogICAgfQp9OwoKU3Ryb3BoZS5XZWJzb2NrZXQucHJvdG90eXBlID0gewogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX2J1aWxkU3RyZWFtCiAgICAgKiAgX1ByaXZhdGVfIGhlbHBlciBmdW5jdGlvbiB0byBnZW5lcmF0ZSB0aGUgPHN0cmVhbT4gc3RhcnQgdGFnIGZvciBXZWJTb2NrZXRzCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBBIFN0cm9waGUuQnVpbGRlciB3aXRoIGEgPHN0cmVhbT4gZWxlbWVudC4KICAgICAqLwogICAgX2J1aWxkU3RyZWFtOiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIHJldHVybiAkYnVpbGQoInN0cmVhbTpzdHJlYW0iLCB7CiAgICAgICAgICAgICJ0byI6IHRoaXMuX2Nvbm4uZG9tYWluLAogICAgICAgICAgICAieG1sbnMiOiBTdHJvcGhlLk5TLkNMSUVOVCwKICAgICAgICAgICAgInhtbG5zOnN0cmVhbSI6IFN0cm9waGUuTlMuU1RSRUFNLAogICAgICAgICAgICAidmVyc2lvbiI6ICcxLjAnCiAgICAgICAgfSk7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9jaGVja19zdHJlYW1lcnJvcgogICAgICogX1ByaXZhdGVfIGNoZWNrcyBhIG1lc3NhZ2UgZm9yIHN0cmVhbTplcnJvcgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKFN0cm9waGUuUmVxdWVzdCkgYm9keVdyYXAgLSBUaGUgcmVjZWl2ZWQgc3RhbnphLgogICAgICogICAgY29ubmVjdHN0YXR1cyAtIFRoZSBDb25uZWN0U3RhdHVzIHRoYXQgd2lsbCBiZSBzZXQgb24gZXJyb3IuCiAgICAgKiAgUmV0dXJuczoKICAgICAqICAgICB0cnVlIGlmIHRoZXJlIHdhcyBhIHN0cmVhbWVycm9yLCBmYWxzZSBvdGhlcndpc2UuCiAgICAgKi8KICAgIF9jaGVja19zdHJlYW1lcnJvcjogZnVuY3Rpb24gKGJvZHlXcmFwLCBjb25uZWN0c3RhdHVzKSB7CiAgICAgICAgdmFyIGVycm9ycyA9IGJvZHlXcmFwLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzdHJlYW06ZXJyb3IiKTsKICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHZhciBlcnJvciA9IGVycm9yc1swXTsKCiAgICAgICAgdmFyIGNvbmRpdGlvbiA9ICIiOwogICAgICAgIHZhciB0ZXh0ID0gIiI7CgogICAgICAgIHZhciBucyA9ICJ1cm46aWV0ZjpwYXJhbXM6eG1sOm5zOnhtcHAtc3RyZWFtcyI7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlcnJvci5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBlID0gZXJyb3IuY2hpbGROb2Rlc1tpXTsKICAgICAgICAgICAgaWYgKGUuZ2V0QXR0cmlidXRlKCJ4bWxucyIpICE9PSBucykgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0gaWYgKGUubm9kZU5hbWUgPT09ICJ0ZXh0IikgewogICAgICAgICAgICAgICAgdGV4dCA9IGUudGV4dENvbnRlbnQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb25kaXRpb24gPSBlLm5vZGVOYW1lOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgZXJyb3JTdHJpbmcgPSAiV2ViU29ja2V0IHN0cmVhbSBlcnJvcjogIjsKCiAgICAgICAgaWYgKGNvbmRpdGlvbikgewogICAgICAgICAgICBlcnJvclN0cmluZyArPSBjb25kaXRpb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZXJyb3JTdHJpbmcgKz0gInVua25vd24iOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRleHQpIHsKICAgICAgICAgICAgZXJyb3JTdHJpbmcgKz0gIiAtICIgKyBjb25kaXRpb247CiAgICAgICAgfQoKICAgICAgICBTdHJvcGhlLmVycm9yKGVycm9yU3RyaW5nKTsKCiAgICAgICAgLy8gY2xvc2UgdGhlIGNvbm5lY3Rpb24gb24gc3RyZWFtX2Vycm9yCiAgICAgICAgdGhpcy5fY29ubi5fY2hhbmdlQ29ubmVjdFN0YXR1cyhjb25uZWN0c3RhdHVzLCBjb25kaXRpb24pOwogICAgICAgIHRoaXMuX2Nvbm4uX2RvRGlzY29ubmVjdCgpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfcmVzZXQKICAgICAqICBSZXNldCB0aGUgY29ubmVjdGlvbi4KICAgICAqCiAgICAgKiAgVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgdGhlIHJlc2V0IGZ1bmN0aW9uIG9mIHRoZSBTdHJvcGhlIENvbm5lY3Rpb24uCiAgICAgKiAgSXMgbm90IG5lZWRlZCBieSBXZWJTb2NrZXRzLgogICAgICovCiAgICBfcmVzZXQ6IGZ1bmN0aW9uICgpCiAgICB7CiAgICAgICAgcmV0dXJuOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfY29ubmVjdAogICAgICogIF9Qcml2YXRlXyBmdW5jdGlvbiBjYWxsZWQgYnkgU3Ryb3BoZS5Db25uZWN0aW9uLmNvbm5lY3QKICAgICAqCiAgICAgKiAgQ3JlYXRlcyBhIFdlYlNvY2tldCBmb3IgYSBjb25uZWN0aW9uIGFuZCBhc3NpZ25zIENhbGxiYWNrcyB0byBpdC4KICAgICAqICBEb2VzIG5vdGhpbmcgaWYgdGhlcmUgYWxyZWFkeSBpcyBhIFdlYlNvY2tldC4KICAgICAqLwogICAgX2Nvbm5lY3Q6IGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGVyZSBpcyBubyBvcGVuIFdlYlNvY2tldCBmcm9tIGEgcHJldmlvdXMgQ29ubmVjdGlvbi4KICAgICAgICB0aGlzLl9jbG9zZVNvY2tldCgpOwoKICAgICAgICAvLyBDcmVhdGUgdGhlIG5ldyBXb2JTb2NrZXQKICAgICAgICB0aGlzLnNvY2tldCA9IG5ldyBXZWJTb2NrZXQodGhpcy5fY29ubi5zZXJ2aWNlLCAieG1wcCIpOwogICAgICAgIHRoaXMuc29ja2V0Lm9ub3BlbiA9IHRoaXMuX29uT3Blbi5iaW5kKHRoaXMpOwogICAgICAgIHRoaXMuc29ja2V0Lm9uZXJyb3IgPSB0aGlzLl9vbkVycm9yLmJpbmQodGhpcyk7CiAgICAgICAgdGhpcy5zb2NrZXQub25jbG9zZSA9IHRoaXMuX29uQ2xvc2UuYmluZCh0aGlzKTsKICAgICAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSB0aGlzLl9jb25uZWN0X2NiX3dyYXBwZXIuYmluZCh0aGlzKTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX2Nvbm5lY3RfY2IKICAgICAqICBfUHJpdmF0ZV8gZnVuY3Rpb24gY2FsbGVkIGJ5IFN0cm9waGUuQ29ubmVjdGlvbi5fY29ubmVjdF9jYgogICAgICoKICAgICAqIGNoZWNrcyBmb3Igc3RyZWFtOmVycm9yCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoU3Ryb3BoZS5SZXF1ZXN0KSBib2R5V3JhcCAtIFRoZSByZWNlaXZlZCBzdGFuemEuCiAgICAgKi8KICAgIF9jb25uZWN0X2NiOiBmdW5jdGlvbihib2R5V3JhcCkgewogICAgICAgIHZhciBlcnJvciA9IHRoaXMuX2NoZWNrX3N0cmVhbWVycm9yKGJvZHlXcmFwLCBTdHJvcGhlLlN0YXR1cy5DT05ORkFJTCk7CiAgICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgICAgIHJldHVybiBTdHJvcGhlLlN0YXR1cy5DT05ORkFJTDsKICAgICAgICB9CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9oYW5kbGVTdHJlYW1TdGFydAogICAgICogX1ByaXZhdGVfIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIHRoZSBvcGVuaW5nIHN0cmVhbTpzdHJlYW0gdGFnIGZvciBlcnJvcnMuCiAgICAgKgogICAgICogRGlzY29ubmVjdHMgaWYgdGhlcmUgaXMgYW4gZXJyb3IgYW5kIHJldHVybnMgZmFsc2UsIHRydWUgb3RoZXJ3aXNlLgogICAgICoKICAgICAqICBQYXJhbWV0ZXJzOgogICAgICogICAgKE5vZGUpIG1lc3NhZ2UgLSBTdGFuemEgY29udGFpbmluZyB0aGUgc3RyZWFtOnN0cmVhbS4KICAgICAqLwogICAgX2hhbmRsZVN0cmVhbVN0YXJ0OiBmdW5jdGlvbihtZXNzYWdlKSB7CiAgICAgICAgdmFyIGVycm9yID0gZmFsc2U7CiAgICAgICAgLy8gQ2hlY2sgZm9yIGVycm9ycyBpbiB0aGUgc3RyZWFtOnN0cmVhbSB0YWcKICAgICAgICB2YXIgbnMgPSBtZXNzYWdlLmdldEF0dHJpYnV0ZSgieG1sbnMiKTsKICAgICAgICBpZiAodHlwZW9mIG5zICE9PSAic3RyaW5nIikgewogICAgICAgICAgICBlcnJvciA9ICJNaXNzaW5nIHhtbG5zIGluIHN0cmVhbTpzdHJlYW0iOwogICAgICAgIH0gZWxzZSBpZiAobnMgIT09IFN0cm9waGUuTlMuQ0xJRU5UKSB7CiAgICAgICAgICAgIGVycm9yID0gIldyb25nIHhtbG5zIGluIHN0cmVhbTpzdHJlYW06ICIgKyBuczsKICAgICAgICB9CgogICAgICAgIHZhciBuc19zdHJlYW0gPSBtZXNzYWdlLm5hbWVzcGFjZVVSSTsKICAgICAgICBpZiAodHlwZW9mIG5zX3N0cmVhbSAhPT0gInN0cmluZyIpIHsKICAgICAgICAgICAgZXJyb3IgPSAiTWlzc2luZyB4bWxuczpzdHJlYW0gaW4gc3RyZWFtOnN0cmVhbSI7CiAgICAgICAgfSBlbHNlIGlmIChuc19zdHJlYW0gIT09IFN0cm9waGUuTlMuU1RSRUFNKSB7CiAgICAgICAgICAgIGVycm9yID0gIldyb25nIHhtbG5zOnN0cmVhbSBpbiBzdHJlYW06c3RyZWFtOiAiICsgbnNfc3RyZWFtOwogICAgICAgIH0KCiAgICAgICAgdmFyIHZlciA9IG1lc3NhZ2UuZ2V0QXR0cmlidXRlKCJ2ZXJzaW9uIik7CiAgICAgICAgaWYgKHR5cGVvZiB2ZXIgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGVycm9yID0gIk1pc3NpbmcgdmVyc2lvbiBpbiBzdHJlYW06c3RyZWFtIjsKICAgICAgICB9IGVsc2UgaWYgKHZlciAhPT0gIjEuMCIpIHsKICAgICAgICAgICAgZXJyb3IgPSAiV3JvbmcgdmVyc2lvbiBpbiBzdHJlYW06c3RyZWFtOiAiICsgdmVyOwogICAgICAgIH0KCiAgICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgICAgIHRoaXMuX2Nvbm4uX2NoYW5nZUNvbm5lY3RTdGF0dXMoU3Ryb3BoZS5TdGF0dXMuQ09OTkZBSUwsIGVycm9yKTsKICAgICAgICAgICAgdGhpcy5fY29ubi5fZG9EaXNjb25uZWN0KCk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfY29ubmVjdF9jYl93cmFwcGVyCiAgICAgKiBfUHJpdmF0ZV8gZnVuY3Rpb24gdGhhdCBoYW5kbGVzIHRoZSBmaXJzdCBjb25uZWN0aW9uIG1lc3NhZ2VzLgogICAgICoKICAgICAqIE9uIHJlY2VpdmluZyBhbiBvcGVuaW5nIHN0cmVhbSB0YWcgdGhpcyBjYWxsYmFjayByZXBsYWNlcyBpdHNlbGYgd2l0aCB0aGUgcmVhbAogICAgICogbWVzc2FnZSBoYW5kbGVyLiBPbiByZWNlaXZpbmcgYSBzdHJlYW0gZXJyb3IgdGhlIGNvbm5lY3Rpb24gaXMgdGVybWluYXRlZC4KICAgICAqLwogICAgX2Nvbm5lY3RfY2Jfd3JhcHBlcjogZnVuY3Rpb24obWVzc2FnZSkgewogICAgICAgIGlmIChtZXNzYWdlLmRhdGEuaW5kZXhPZigiPHN0cmVhbTpzdHJlYW0gIikgPT09IDAgfHwgbWVzc2FnZS5kYXRhLmluZGV4T2YoIjw/eG1sIikgPT09IDApIHsKICAgICAgICAgICAgLy8gU3RyaXAgdGhlIFhNTCBEZWNsYXJhdGlvbiwgaWYgdGhlcmUgaXMgb25lCiAgICAgICAgICAgIHZhciBkYXRhID0gbWVzc2FnZS5kYXRhLnJlcGxhY2UoL14oPFw/Lio/XD8+XHMqKSovLCAiIik7CiAgICAgICAgICAgIGlmIChkYXRhID09PSAnJykgcmV0dXJuOwoKICAgICAgICAgICAgLy9NYWtlIHRoZSBpbml0aWFsIHN0cmVhbTpzdHJlYW0gc2VsZmNsb3NpbmcgdG8gcGFyc2UgaXQgd2l0aG91dCBhIFNBWCBwYXJzZXIuCiAgICAgICAgICAgIGRhdGEgPSBtZXNzYWdlLmRhdGEucmVwbGFjZSgvPHN0cmVhbTpzdHJlYW0gKC4qW15cL10pPi8sICI8c3RyZWFtOnN0cmVhbSAkMS8+Iik7CgogICAgICAgICAgICB2YXIgc3RyZWFtU3RhcnQgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGRhdGEsICJ0ZXh0L3htbCIpLmRvY3VtZW50RWxlbWVudDsKICAgICAgICAgICAgdGhpcy5fY29ubi54bWxJbnB1dChzdHJlYW1TdGFydCk7CiAgICAgICAgICAgIHRoaXMuX2Nvbm4ucmF3SW5wdXQobWVzc2FnZS5kYXRhKTsKCiAgICAgICAgICAgIC8vX2hhbmRsZVN0cmVhbVN0ZWFydCB3aWxsIGNoZWNrIGZvciBYTUwgZXJyb3JzIGFuZCBkaXNjb25uZWN0IG9uIGVycm9yCiAgICAgICAgICAgIGlmICh0aGlzLl9oYW5kbGVTdHJlYW1TdGFydChzdHJlYW1TdGFydCkpIHsKCiAgICAgICAgICAgICAgICAvL19jb25uZWN0X2NiIHdpbGwgY2hlY2sgZm9yIHN0cmVhbTplcnJvciBhbmQgZGlzY29ubmVjdCBvbiBlcnJvcgogICAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdF9jYihzdHJlYW1TdGFydCk7CgogICAgICAgICAgICAgICAgLy8gZW5zdXJlIHJlY2VpdmVkIHN0cmVhbTpzdHJlYW0gaXMgTk9UIHNlbGZjbG9zaW5nIGFuZCBzYXZlIGl0IGZvciBmb2xsb3dpbmcgbWVzc2FnZXMKICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtU3RhcnQgPSBtZXNzYWdlLmRhdGEucmVwbGFjZSgvXjxzdHJlYW06KC4qKVwvPiQvLCAiPHN0cmVhbTokMT4iKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5kYXRhID09PSAiPC9zdHJlYW06c3RyZWFtPiIpIHsKICAgICAgICAgICAgdGhpcy5fY29ubi5yYXdJbnB1dChtZXNzYWdlLmRhdGEpOwogICAgICAgICAgICB0aGlzLl9jb25uLnhtbElucHV0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0cmVhbTpzdHJlYW0iKSk7CiAgICAgICAgICAgIHRoaXMuX2Nvbm4uX2NoYW5nZUNvbm5lY3RTdGF0dXMoU3Ryb3BoZS5TdGF0dXMuQ09OTkZBSUwsICJSZWNlaXZlZCBjbG9zaW5nIHN0cmVhbSIpOwogICAgICAgICAgICB0aGlzLl9jb25uLl9kb0Rpc2Nvbm5lY3QoKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBzdHJpbmcgPSB0aGlzLl9zdHJlYW1XcmFwKG1lc3NhZ2UuZGF0YSk7CiAgICAgICAgICAgIHZhciBlbGVtID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhzdHJpbmcsICJ0ZXh0L3htbCIpLmRvY3VtZW50RWxlbWVudDsKICAgICAgICAgICAgdGhpcy5zb2NrZXQub25tZXNzYWdlID0gdGhpcy5fb25NZXNzYWdlLmJpbmQodGhpcyk7CiAgICAgICAgICAgIHRoaXMuX2Nvbm4uX2Nvbm5lY3RfY2IoZWxlbSwgbnVsbCwgbWVzc2FnZS5kYXRhKTsKICAgICAgICB9CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9kaXNjb25uZWN0CiAgICAgKiAgX1ByaXZhdGVfIGZ1bmN0aW9uIGNhbGxlZCBieSBTdHJvcGhlLkNvbm5lY3Rpb24uZGlzY29ubmVjdAogICAgICoKICAgICAqICBEaXNjb25uZWN0cyBhbmQgc2VuZHMgYSBsYXN0IHN0YW56YSBpZiBvbmUgaXMgZ2l2ZW4KICAgICAqCiAgICAgKiAgUGFyYW1ldGVyczoKICAgICAqICAgIChSZXF1ZXN0KSBwcmVzIC0gVGhpcyBzdGFuemEgd2lsbCBiZSBzZW50IGJlZm9yZSBkaXNjb25uZWN0aW5nLgogICAgICovCiAgICBfZGlzY29ubmVjdDogZnVuY3Rpb24gKHByZXMpCiAgICB7CiAgICAgICAgaWYgKHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldC5DTE9TRUQpIHsKICAgICAgICAgICAgaWYgKHByZXMpIHsKICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm4uc2VuZChwcmVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgY2xvc2UgPSAnPC9zdHJlYW06c3RyZWFtPic7CiAgICAgICAgICAgIHRoaXMuX2Nvbm4ueG1sT3V0cHV0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0cmVhbTpzdHJlYW0iKSk7CiAgICAgICAgICAgIHRoaXMuX2Nvbm4ucmF3T3V0cHV0KGNsb3NlKTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LnNlbmQoY2xvc2UpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBTdHJvcGhlLmluZm8oIkNvdWxkbid0IHNlbmQgY2xvc2luZyBzdHJlYW0gdGFnLiIpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9jb25uLl9kb0Rpc2Nvbm5lY3QoKTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX2RvRGlzY29ubmVjdAogICAgICogIF9Qcml2YXRlXyBmdW5jdGlvbiB0byBkaXNjb25uZWN0LgogICAgICoKICAgICAqICBKdXN0IGNsb3NlcyB0aGUgU29ja2V0IGZvciBXZWJTb2NrZXRzCiAgICAgKi8KICAgIF9kb0Rpc2Nvbm5lY3Q6IGZ1bmN0aW9uICgpCiAgICB7CiAgICAgICAgU3Ryb3BoZS5pbmZvKCJXZWJTb2NrZXRzIF9kb0Rpc2Nvbm5lY3Qgd2FzIGNhbGxlZCIpOwogICAgICAgIHRoaXMuX2Nsb3NlU29ja2V0KCk7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb24gX3N0cmVhbVdyYXAKICAgICAqICBfUHJpdmF0ZV8gaGVscGVyIGZ1bmN0aW9uIHRvIHdyYXAgYSBzdGFuemEgaW4gYSA8c3RyZWFtPiB0YWcuCiAgICAgKiAgVGhpcyBpcyB1c2VkIHNvIFN0cm9waGUgY2FuIHByb2Nlc3Mgc3RhbnphcyBmcm9tIFdlYlNvY2tldHMgbGlrZSBCT1NICiAgICAgKi8KICAgIF9zdHJlYW1XcmFwOiBmdW5jdGlvbiAoc3RhbnphKQogICAgewogICAgICAgIHJldHVybiB0aGlzLnN0cmVhbVN0YXJ0ICsgc3RhbnphICsgJzwvc3RyZWFtOnN0cmVhbT4nOwogICAgfSwKCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX2Nsb3NlU29ja2V0CiAgICAgKiAgX1ByaXZhdGVfIGZ1bmN0aW9uIHRvIGNsb3NlIHRoZSBXZWJTb2NrZXQuCiAgICAgKgogICAgICogIENsb3NlcyB0aGUgc29ja2V0IGlmIGl0IGlzIHN0aWxsIG9wZW4gYW5kIGRlbGV0ZXMgaXQKICAgICAqLwogICAgX2Nsb3NlU29ja2V0OiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIGlmICh0aGlzLnNvY2tldCkgeyB0cnkgewogICAgICAgICAgICB0aGlzLnNvY2tldC5jbG9zZSgpOwogICAgICAgIH0gY2F0Y2ggKGUpIHt9IH0KICAgICAgICB0aGlzLnNvY2tldCA9IG51bGw7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9lbXB0eVF1ZXVlCiAgICAgKiBfUHJpdmF0ZV8gZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIG1lc3NhZ2UgcXVldWUgaXMgZW1wdHkuCiAgICAgKgogICAgICogIFJldHVybnM6CiAgICAgKiAgICBUcnVlLCBiZWNhdXNlIFdlYlNvY2tldCBtZXNzYWdlcyBhcmUgc2VuZCBpbW1lZGlhdGVseSBhZnRlciBxdWV1ZWluZy4KICAgICAqLwogICAgX2VtcHR5UXVldWU6IGZ1bmN0aW9uICgpCiAgICB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9vbkNsb3NlCiAgICAgKiBfUHJpdmF0ZV8gZnVuY3Rpb24gdG8gaGFuZGxlIHdlYnNvY2tldHMgY2xvc2luZy4KICAgICAqCiAgICAgKiBOb3RoaW5nIHRvIGRvIGhlcmUgZm9yIFdlYlNvY2tldHMKICAgICAqLwogICAgX29uQ2xvc2U6IGZ1bmN0aW9uKCkgewogICAgICAgIGlmKHRoaXMuX2Nvbm4uY29ubmVjdGVkICYmICF0aGlzLl9jb25uLmRpc2Nvbm5lY3RpbmcpIHsKICAgICAgICAgICAgU3Ryb3BoZS5lcnJvcigiV2Vic29ja2V0IGNsb3NlZCB1bmV4Y2VjdGVkbHkiKTsKICAgICAgICAgICAgdGhpcy5fY29ubi5fZG9EaXNjb25uZWN0KCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgU3Ryb3BoZS5pbmZvKCJXZWJzb2NrZXQgY2xvc2VkIik7CiAgICAgICAgfQogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfbm9fYXV0aF9yZWNlaXZlZAogICAgICoKICAgICAqIENhbGxlZCBvbiBzdHJlYW0gc3RhcnQvcmVzdGFydCB3aGVuIG5vIHN0cmVhbTpmZWF0dXJlcwogICAgICogaGFzIGJlZW4gcmVjZWl2ZWQuCiAgICAgKi8KICAgIF9ub19hdXRoX3JlY2VpdmVkOiBmdW5jdGlvbiAoX2NhbGxiYWNrKQogICAgewogICAgICAgIFN0cm9waGUuZXJyb3IoIlNlcnZlciBkaWQgbm90IHNlbmQgYW55IGF1dGggbWV0aG9kcyIpOwogICAgICAgIHRoaXMuX2Nvbm4uX2NoYW5nZUNvbm5lY3RTdGF0dXMoU3Ryb3BoZS5TdGF0dXMuQ09OTkZBSUwsICJTZXJ2ZXIgZGlkIG5vdCBzZW5kIGFueSBhdXRoIG1ldGhvZHMiKTsKICAgICAgICBpZiAoX2NhbGxiYWNrKSB7CiAgICAgICAgICAgIF9jYWxsYmFjayA9IF9jYWxsYmFjay5iaW5kKHRoaXMuX2Nvbm4pOwogICAgICAgICAgICBfY2FsbGJhY2soKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5fY29ubi5fZG9EaXNjb25uZWN0KCk7CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9vbkRpc2Nvbm5lY3RUaW1lb3V0CiAgICAgKiAgX1ByaXZhdGVfIHRpbWVvdXQgaGFuZGxlciBmb3IgaGFuZGxpbmcgbm9uLWdyYWNlZnVsIGRpc2Nvbm5lY3Rpb24uCiAgICAgKgogICAgICogIFRoaXMgZG9lcyBub3RoaW5nIGZvciBXZWJTb2NrZXRzCiAgICAgKi8KICAgIF9vbkRpc2Nvbm5lY3RUaW1lb3V0OiBmdW5jdGlvbiAoKSB7fSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfb25FcnJvcgogICAgICogX1ByaXZhdGVfIGZ1bmN0aW9uIHRvIGhhbmRsZSB3ZWJzb2NrZXRzIGVycm9ycy4KICAgICAqCiAgICAgKiBQYXJhbWV0ZXJzOgogICAgICogKE9iamVjdCkgZXJyb3IgLSBUaGUgd2Vic29ja2V0IGVycm9yLgogICAgICovCiAgICBfb25FcnJvcjogZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICBTdHJvcGhlLmVycm9yKCJXZWJzb2NrZXQgZXJyb3IgIiArIGVycm9yKTsKICAgICAgICB0aGlzLl9jb25uLl9jaGFuZ2VDb25uZWN0U3RhdHVzKFN0cm9waGUuU3RhdHVzLkNPTk5GQUlMLCAiVGhlIFdlYlNvY2tldCBjb25uZWN0aW9uIGNvdWxkIG5vdCBiZSBlc3RhYmxpc2hlZCB3YXMgZGlzY29ubmVjdGVkLiIpOwogICAgICAgIHRoaXMuX2Rpc2Nvbm5lY3QoKTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX29uSWRsZQogICAgICogIF9Qcml2YXRlXyBmdW5jdGlvbiBjYWxsZWQgYnkgU3Ryb3BoZS5Db25uZWN0aW9uLl9vbklkbGUKICAgICAqCiAgICAgKiAgc2VuZHMgYWxsIHF1ZXVlZCBzdGFuemFzCiAgICAgKi8KICAgIF9vbklkbGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2Nvbm4uX2RhdGE7CiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMCAmJiAhdGhpcy5fY29ubi5wYXVzZWQpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoZGF0YVtpXSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIHZhciBzdGFuemEsIHJhd1N0YW56YTsKICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtpXSA9PT0gInJlc3RhcnQiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YW56YSA9IHRoaXMuX2J1aWxkU3RyZWFtKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJhd1N0YW56YSA9IHRoaXMuX3JlbW92ZUNsb3NpbmdUYWcoc3RhbnphKTsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhbnphID0gc3RhbnphLnRyZWUoKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBzdGFuemEgPSBkYXRhW2ldOwogICAgICAgICAgICAgICAgICAgICAgICByYXdTdGFuemEgPSBTdHJvcGhlLnNlcmlhbGl6ZShzdGFuemEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb25uLnhtbE91dHB1dChzdGFuemEpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm4ucmF3T3V0cHV0KHJhd1N0YW56YSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChyYXdTdGFuemEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuX2Nvbm4uX2RhdGEgPSBbXTsKICAgICAgICB9CiAgICB9LAoKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9vbk1lc3NhZ2UKICAgICAqIF9Qcml2YXRlXyBmdW5jdGlvbiB0byBoYW5kbGUgd2Vic29ja2V0cyBtZXNzYWdlcy4KICAgICAqCiAgICAgKiBUaGlzIGZ1bmN0aW9uIHBhcnNlcyBlYWNoIG9mIHRoZSBtZXNzYWdlcyBhcyBpZiB0aGV5IGFyZSBmdWxsIGRvY3VtZW50cy4gW1RPRE8gOiBXZSBtYXkgYWN0dWFsbHkgd2FudCB0byB1c2UgYSBTQVggUHVzaCBwYXJzZXJdLgogICAgICoKICAgICAqIFNpbmNlIGFsbCBYTVBQIHRyYWZmaWMgc3RhcnRzIHdpdGggIjxzdHJlYW06c3RyZWFtIHZlcnNpb249JzEuMCcgeG1sOmxhbmc9J2VuJyB4bWxucz0namFiYmVyOmNsaWVudCcgeG1sbnM6c3RyZWFtPSdodHRwOi8vZXRoZXJ4LmphYmJlci5vcmcvc3RyZWFtcycgaWQ9JzM2OTczOTU0NjMnIGZyb209J1NFUlZFUic+IgogICAgICogVGhlIGZpcnN0IHN0YW56YSB3aWxsIGFsd2F5cyBmYWlsIHRvIGJlIHBhcnNlZC4uLgogICAgICogQWRkdGlvbm5hbHksIHRoZSBzZWNvbmRzIHN0YW56YSB3aWxsIGFsd2F5cyBiZSBhIDxzdHJlYW06ZmVhdHVyZXM+IHdpdGggdGhlIHN0cmVhbSBOUyBkZWZpbmVkIGluIHRoZSBwcmV2aW91cyBzdGFuemEuLi4gc28gd2UgbmVlZCB0byAnZm9yY2UnIHRoZSBpbmNsdXNpb24gb2YgdGhlIE5TIGluIHRoaXMgc3RhbnphIQogICAgICoKICAgICAqIFBhcmFtZXRlcnM6CiAgICAgKiAoc3RyaW5nKSBtZXNzYWdlIC0gVGhlIHdlYnNvY2tldCBtZXNzYWdlLgogICAgICovCiAgICBfb25NZXNzYWdlOiBmdW5jdGlvbihtZXNzYWdlKSB7CiAgICAgICAgdmFyIGVsZW0sIGRhdGE7CiAgICAgICAgLy8gY2hlY2sgZm9yIGNsb3Npbmcgc3RyZWFtCiAgICAgICAgaWYgKG1lc3NhZ2UuZGF0YSA9PT0gIjwvc3RyZWFtOnN0cmVhbT4iKSB7CiAgICAgICAgICAgIHZhciBjbG9zZSA9ICI8L3N0cmVhbTpzdHJlYW0+IjsKICAgICAgICAgICAgdGhpcy5fY29ubi5yYXdJbnB1dChjbG9zZSk7CiAgICAgICAgICAgIHRoaXMuX2Nvbm4ueG1sSW5wdXQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3RyZWFtOnN0cmVhbSIpKTsKICAgICAgICAgICAgaWYgKCF0aGlzLl9jb25uLmRpc2Nvbm5lY3RpbmcpIHsKICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm4uX2RvRGlzY29ubmVjdCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuZGF0YS5zZWFyY2goIjxzdHJlYW06c3RyZWFtICIpID09PSAwKSB7CiAgICAgICAgICAgIC8vTWFrZSB0aGUgaW5pdGlhbCBzdHJlYW06c3RyZWFtIHNlbGZjbG9zaW5nIHRvIHBhcnNlIGl0IHdpdGhvdXQgYSBTQVggcGFyc2VyLgogICAgICAgICAgICBkYXRhID0gbWVzc2FnZS5kYXRhLnJlcGxhY2UoLzxzdHJlYW06c3RyZWFtICguKlteXC9dKT4vLCAiPHN0cmVhbTpzdHJlYW0gJDEvPiIpOwogICAgICAgICAgICBlbGVtID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhkYXRhLCAidGV4dC94bWwiKS5kb2N1bWVudEVsZW1lbnQ7CgogICAgICAgICAgICBpZiAoIXRoaXMuX2hhbmRsZVN0cmVhbVN0YXJ0KGVsZW0pKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBkYXRhID0gdGhpcy5fc3RyZWFtV3JhcChtZXNzYWdlLmRhdGEpOwogICAgICAgICAgICBlbGVtID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhkYXRhLCAidGV4dC94bWwiKS5kb2N1bWVudEVsZW1lbnQ7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5fY2hlY2tfc3RyZWFtZXJyb3IoZWxlbSwgU3Ryb3BoZS5TdGF0dXMuRVJST1IpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIC8vaGFuZGxlIHVuYXZhaWxhYmxlIHByZXNlbmNlIHN0YW56YSBiZWZvcmUgZGlzY29ubmVjdGluZwogICAgICAgIGlmICh0aGlzLl9jb25uLmRpc2Nvbm5lY3RpbmcgJiYKICAgICAgICAgICAgICAgIGVsZW0uZmlyc3RDaGlsZC5ub2RlTmFtZSA9PT0gInByZXNlbmNlIiAmJgogICAgICAgICAgICAgICAgZWxlbS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgidHlwZSIpID09PSAidW5hdmFpbGFibGUiKSB7CiAgICAgICAgICAgIHRoaXMuX2Nvbm4ueG1sSW5wdXQoZWxlbSk7CiAgICAgICAgICAgIHRoaXMuX2Nvbm4ucmF3SW5wdXQoU3Ryb3BoZS5zZXJpYWxpemUoZWxlbSkpOwogICAgICAgICAgICAvLyBpZiB3ZSBhcmUgYWxyZWFkeSBkaXNjb25uZWN0aW5nIHdlIHdpbGwgaWdub3JlIHRoZSB1bmF2YWlsYWJsZSBzdGFuemEgYW5kCiAgICAgICAgICAgIC8vIHdhaXQgZm9yIHRoZSA8L3N0cmVhbTpzdHJlYW0+IHRhZyBiZWZvcmUgd2UgY2xvc2UgdGhlIGNvbm5lY3Rpb24KICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0aGlzLl9jb25uLl9kYXRhUmVjdihlbGVtLCBtZXNzYWdlLmRhdGEpOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfb25PcGVuCiAgICAgKiBfUHJpdmF0ZV8gZnVuY3Rpb24gdG8gaGFuZGxlIHdlYnNvY2tldHMgY29ubmVjdGlvbiBzZXR1cC4KICAgICAqCiAgICAgKiBUaGUgb3BlbmluZyBzdHJlYW0gdGFnIGlzIHNlbnQgaGVyZS4KICAgICAqLwogICAgX29uT3BlbjogZnVuY3Rpb24oKSB7CiAgICAgICAgU3Ryb3BoZS5pbmZvKCJXZWJzb2NrZXQgb3BlbiIpOwogICAgICAgIHZhciBzdGFydCA9IHRoaXMuX2J1aWxkU3RyZWFtKCk7CiAgICAgICAgdGhpcy5fY29ubi54bWxPdXRwdXQoc3RhcnQudHJlZSgpKTsKCiAgICAgICAgdmFyIHN0YXJ0U3RyaW5nID0gdGhpcy5fcmVtb3ZlQ2xvc2luZ1RhZyhzdGFydCk7CiAgICAgICAgdGhpcy5fY29ubi5yYXdPdXRwdXQoc3RhcnRTdHJpbmcpOwogICAgICAgIHRoaXMuc29ja2V0LnNlbmQoc3RhcnRTdHJpbmcpOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfcmVtb3ZlQ2xvc2luZ1RhZwogICAgICogIF9Qcml2YXRlXyBmdW5jdGlvbiB0byBNYWtlIHRoZSBmaXJzdCA8c3RyZWFtOnN0cmVhbT4gbm9uLXNlbGZjbG9zaW5nCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAgIChPYmplY3QpIGVsZW0gLSBUaGUgPHN0cmVhbTpzdHJlYW0+IHRhZy4KICAgICAqCiAgICAgKiAgUmV0dXJuczoKICAgICAqICAgICAgVGhlIHN0cmVhbTpzdHJlYW0gdGFnIGFzIFN0cmluZwogICAgICovCiAgICBfcmVtb3ZlQ2xvc2luZ1RhZzogZnVuY3Rpb24oZWxlbSkgewogICAgICAgIHZhciBzdHJpbmcgPSBTdHJvcGhlLnNlcmlhbGl6ZShlbGVtKTsKICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvPChzdHJlYW06c3RyZWFtIC4qW15cL10pXC8+JC8sICI8JDE+Iik7CiAgICAgICAgcmV0dXJuIHN0cmluZzsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX3JlcVRvRGF0YQogICAgICogX1ByaXZhdGVfIGZ1bmN0aW9uIHRvIGdldCBhIHN0YW56YSBvdXQgb2YgYSByZXF1ZXN0LgogICAgICoKICAgICAqIFdlYlNvY2tldHMgZG9uJ3QgdXNlIHJlcXVlc3RzLCBzbyB0aGUgcGFzc2VkIGFyZ3VtZW50IGlzIGp1c3QgcmV0dXJuZWQuCiAgICAgKgogICAgICogIFBhcmFtZXRlcnM6CiAgICAgKiAgICAoT2JqZWN0KSBzdGFuemEgLSBUaGUgc3RhbnphLgogICAgICoKICAgICAqICBSZXR1cm5zOgogICAgICogICAgVGhlIHN0YW56YSB0aGF0IHdhcyBwYXNzZWQuCiAgICAgKi8KICAgIF9yZXFUb0RhdGE6IGZ1bmN0aW9uIChzdGFuemEpCiAgICB7CiAgICAgICAgcmV0dXJuIHN0YW56YTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX3NlbmQKICAgICAqICBfUHJpdmF0ZV8gcGFydCBvZiB0aGUgQ29ubmVjdGlvbi5zZW5kIGZ1bmN0aW9uIGZvciBXZWJTb2NrZXQKICAgICAqCiAgICAgKiBKdXN0IGZsdXNoZXMgdGhlIG1lc3NhZ2VzIHRoYXQgYXJlIGluIHRoZSBxdWV1ZQogICAgICovCiAgICBfc2VuZDogZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMuX2Nvbm4uZmx1c2goKTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX3NlbmRSZXN0YXJ0CiAgICAgKgogICAgICogIFNlbmQgYW4geG1wcDpyZXN0YXJ0IHN0YW56YS4KICAgICAqLwogICAgX3NlbmRSZXN0YXJ0OiBmdW5jdGlvbiAoKQogICAgewogICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9jb25uLl9pZGxlVGltZW91dCk7CiAgICAgICAgdGhpcy5fY29ubi5fb25JZGxlLmJpbmQodGhpcy5fY29ubikoKTsKICAgIH0KfTsKCmRlZmluZSgic3Ryb3BoZSIsIChmdW5jdGlvbiAoZ2xvYmFsKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciByZXQsIGZuOwogICAgICAgIHJldHVybiByZXQgfHwgZ2xvYmFsLlN0cm9waGU7CiAgICB9Owp9KHRoaXMpKSk7CgovLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOC4wCgovKgogKlBsdWdpbiB0byBpbXBsZW1lbnQgdGhlIE1VQyBleHRlbnNpb24uCiAgIGh0dHA6Ly94bXBwLm9yZy9leHRlbnNpb25zL3hlcC0wMDQ1Lmh0bWwKICpQcmV2aW91cyBBdXRob3I6CiAgICBOYXRoYW4gWm9ybiA8bmF0aGFuLnpvcm5AZ21haWwuY29tPgogKkNvbXBsZXRlIENvZmZlZVNjcmlwdCByZXdyaXRlOgogICAgQW5kcmVhcyBHdXRoIDxndXRoQGRiaXMucnd0aC1hYWNoZW4uZGU+CiAqLwoKKGZ1bmN0aW9uKCkgewogIHZhciBPY2N1cGFudCwgUm9vbUNvbmZpZywgWG1wcFJvb20sCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH07CgogIFN0cm9waGUuYWRkQ29ubmVjdGlvblBsdWdpbignbXVjJywgewogICAgX2Nvbm5lY3Rpb246IG51bGwsCiAgICByb29tczoge30sCiAgICByb29tTmFtZXM6IFtdLAoKICAgIC8qRnVuY3Rpb24KICAgIEluaXRpYWxpemUgdGhlIE1VQyBwbHVnaW4uIFNldHMgdGhlIGNvcnJlY3QgY29ubmVjdGlvbiBvYmplY3QgYW5kCiAgICBleHRlbmRzIHRoZSBuYW1lc2FjZS4KICAgICAqLwogICAgaW5pdDogZnVuY3Rpb24oY29ubikgewogICAgICB0aGlzLl9jb25uZWN0aW9uID0gY29ubjsKICAgICAgdGhpcy5fbXVjX2hhbmRsZXIgPSBudWxsOwogICAgICBTdHJvcGhlLmFkZE5hbWVzcGFjZSgnTVVDX09XTkVSJywgU3Ryb3BoZS5OUy5NVUMgKyAiI293bmVyIik7CiAgICAgIFN0cm9waGUuYWRkTmFtZXNwYWNlKCdNVUNfQURNSU4nLCBTdHJvcGhlLk5TLk1VQyArICIjYWRtaW4iKTsKICAgICAgU3Ryb3BoZS5hZGROYW1lc3BhY2UoJ01VQ19VU0VSJywgU3Ryb3BoZS5OUy5NVUMgKyAiI3VzZXIiKTsKICAgICAgU3Ryb3BoZS5hZGROYW1lc3BhY2UoJ01VQ19ST09NQ09ORicsIFN0cm9waGUuTlMuTVVDICsgIiNyb29tY29uZmlnIik7CiAgICAgIHJldHVybiBTdHJvcGhlLmFkZE5hbWVzcGFjZSgnTVVDX1JFR0lTVEVSJywgImphYmJlcjppcTpyZWdpc3RlciIpOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBKb2luIGEgbXVsdGktdXNlciBjaGF0IHJvb20KICAgIFBhcmFtZXRlcnM6CiAgICAoU3RyaW5nKSByb29tIC0gVGhlIG11bHRpLXVzZXIgY2hhdCByb29tIHRvIGpvaW4uCiAgICAoU3RyaW5nKSBuaWNrIC0gVGhlIG5pY2tuYW1lIHRvIHVzZSBpbiB0aGUgY2hhdCByb29tLiBPcHRpb25hbAogICAgKEZ1bmN0aW9uKSBtc2dfaGFuZGxlcl9jYiAtIFRoZSBmdW5jdGlvbiBjYWxsIHRvIGhhbmRsZSBtZXNzYWdlcyBmcm9tIHRoZQogICAgc3BlY2lmaWVkIGNoYXQgcm9vbS4KICAgIChGdW5jdGlvbikgcHJlc19oYW5kbGVyX2NiIC0gVGhlIGZ1bmN0aW9uIGNhbGwgYmFjayB0byBoYW5kbGUgcHJlc2VuY2UKICAgIGluIHRoZSBjaGF0IHJvb20uCiAgICAoRnVuY3Rpb24pIHJvc3Rlcl9jYiAtIFRoZSBmdW5jdGlvbiBjYWxsIHRvIGhhbmRsZSByb3N0ZXIgaW5mbyBpbiB0aGUgY2hhdCByb29tCiAgICAoU3RyaW5nKSBwYXNzd29yZCAtIFRoZSBvcHRpb25hbCBwYXNzd29yZCB0byB1c2UuIChwYXNzd29yZCBwcm90ZWN0ZWQKICAgIHJvb21zIG9ubHkpCiAgICAoT2JqZWN0KSBoaXN0b3J5X2F0dHJzIC0gT3B0aW9uYWwgYXR0cmlidXRlcyBmb3IgcmV0cmlldmluZyBoaXN0b3J5CiAgICAoWE1MIERPTSBFbGVtZW50KSBleHRlbmRlZF9wcmVzZW5jZSAtIE9wdGlvbmFsIFhNTCBmb3IgZXh0ZW5kaW5nIHByZXNlbmNlCiAgICAgKi8KICAgIGpvaW46IGZ1bmN0aW9uKHJvb20sIG5pY2ssIG1zZ19oYW5kbGVyX2NiLCBwcmVzX2hhbmRsZXJfY2IsIHJvc3Rlcl9jYiwgcGFzc3dvcmQsIGhpc3RvcnlfYXR0cnMpIHsKICAgICAgdmFyIG1zZywgcm9vbV9uaWNrOwogICAgICByb29tX25pY2sgPSB0aGlzLnRlc3RfYXBwZW5kX25pY2socm9vbSwgbmljayk7CiAgICAgIG1zZyA9ICRwcmVzKHsKICAgICAgICBmcm9tOiB0aGlzLl9jb25uZWN0aW9uLmppZCwKICAgICAgICB0bzogcm9vbV9uaWNrCiAgICAgIH0pLmMoIngiLCB7CiAgICAgICAgeG1sbnM6IFN0cm9waGUuTlMuTVVDCiAgICAgIH0pOwogICAgICBpZiAoaGlzdG9yeV9hdHRycyAhPSBudWxsKSB7CiAgICAgICAgbXNnID0gbXNnLmMoImhpc3RvcnkiLCBoaXN0b3J5X2F0dHJzKS51cCgpOwogICAgICB9CiAgICAgIGlmIChwYXNzd29yZCAhPSBudWxsKSB7CiAgICAgICAgbXNnLmNub2RlKFN0cm9waGUueG1sRWxlbWVudCgicGFzc3dvcmQiLCBbXSwgcGFzc3dvcmQpKTsKICAgICAgfQogICAgICBpZiAodHlwZW9mIGV4dGVuZGVkX3ByZXNlbmNlICE9PSAidW5kZWZpbmVkIiAmJiBleHRlbmRlZF9wcmVzZW5jZSAhPT0gbnVsbCkgewogICAgICAgIG1zZy51cC5jbm9kZShleHRlbmRlZF9wcmVzZW5jZSk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuX211Y19oYW5kbGVyID09IG51bGwpIHsKICAgICAgICB0aGlzLl9tdWNfaGFuZGxlciA9IHRoaXMuX2Nvbm5lY3Rpb24uYWRkSGFuZGxlcigoZnVuY3Rpb24oX3RoaXMpIHsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzdGFuemEpIHsKICAgICAgICAgICAgdmFyIGZyb20sIGhhbmRsZXIsIGhhbmRsZXJzLCBpZCwgcm9vbW5hbWUsIHgsIHhtbG5zLCB4cXVlcnksIF9pLCBfbGVuOwogICAgICAgICAgICBmcm9tID0gc3RhbnphLmdldEF0dHJpYnV0ZSgnZnJvbScpOwogICAgICAgICAgICBpZiAoIWZyb20pIHsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByb29tbmFtZSA9IGZyb20uc3BsaXQoIi8iKVswXTsKICAgICAgICAgICAgaWYgKCFfdGhpcy5yb29tc1tyb29tbmFtZV0pIHsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByb29tID0gX3RoaXMucm9vbXNbcm9vbW5hbWVdOwogICAgICAgICAgICBoYW5kbGVycyA9IHt9OwogICAgICAgICAgICBpZiAoc3RhbnphLm5vZGVOYW1lID09PSAibWVzc2FnZSIpIHsKICAgICAgICAgICAgICBoYW5kbGVycyA9IHJvb20uX21lc3NhZ2VfaGFuZGxlcnM7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhbnphLm5vZGVOYW1lID09PSAicHJlc2VuY2UiKSB7CiAgICAgICAgICAgICAgeHF1ZXJ5ID0gc3RhbnphLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJ4Iik7CiAgICAgICAgICAgICAgaWYgKHhxdWVyeS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IHhxdWVyeS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgICAgICAgICAgICB4ID0geHF1ZXJ5W19pXTsKICAgICAgICAgICAgICAgICAgeG1sbnMgPSB4LmdldEF0dHJpYnV0ZSgieG1sbnMiKTsKICAgICAgICAgICAgICAgICAgaWYgKHhtbG5zICYmIHhtbG5zLm1hdGNoKFN0cm9waGUuTlMuTVVDKSkgewogICAgICAgICAgICAgICAgICAgIGhhbmRsZXJzID0gcm9vbS5fcHJlc2VuY2VfaGFuZGxlcnM7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChpZCBpbiBoYW5kbGVycykgewogICAgICAgICAgICAgIGhhbmRsZXIgPSBoYW5kbGVyc1tpZF07CiAgICAgICAgICAgICAgaWYgKCFoYW5kbGVyKHN0YW56YSwgcm9vbSkpIHsKICAgICAgICAgICAgICAgIGRlbGV0ZSBoYW5kbGVyc1tpZF07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfTsKICAgICAgICB9KSh0aGlzKSk7CiAgICAgIH0KICAgICAgaWYgKCF0aGlzLnJvb21zLmhhc093blByb3BlcnR5KHJvb20pKSB7CiAgICAgICAgdGhpcy5yb29tc1tyb29tXSA9IG5ldyBYbXBwUm9vbSh0aGlzLCByb29tLCBuaWNrLCBwYXNzd29yZCk7CiAgICAgICAgdGhpcy5yb29tTmFtZXMucHVzaChyb29tKTsKICAgICAgfQogICAgICBpZiAocHJlc19oYW5kbGVyX2NiKSB7CiAgICAgICAgdGhpcy5yb29tc1tyb29tXS5hZGRIYW5kbGVyKCdwcmVzZW5jZScsIHByZXNfaGFuZGxlcl9jYik7CiAgICAgIH0KICAgICAgaWYgKG1zZ19oYW5kbGVyX2NiKSB7CiAgICAgICAgdGhpcy5yb29tc1tyb29tXS5hZGRIYW5kbGVyKCdtZXNzYWdlJywgbXNnX2hhbmRsZXJfY2IpOwogICAgICB9CiAgICAgIGlmIChyb3N0ZXJfY2IpIHsKICAgICAgICB0aGlzLnJvb21zW3Jvb21dLmFkZEhhbmRsZXIoJ3Jvc3RlcicsIHJvc3Rlcl9jYik7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChtc2cpOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBMZWF2ZSBhIG11bHRpLXVzZXIgY2hhdCByb29tCiAgICBQYXJhbWV0ZXJzOgogICAgKFN0cmluZykgcm9vbSAtIFRoZSBtdWx0aS11c2VyIGNoYXQgcm9vbSB0byBsZWF2ZS4KICAgIChTdHJpbmcpIG5pY2sgLSBUaGUgbmljayBuYW1lIHVzZWQgaW4gdGhlIHJvb20uCiAgICAoRnVuY3Rpb24pIGhhbmRsZXJfY2IgLSBPcHRpb25hbCBmdW5jdGlvbiB0byBoYW5kbGUgdGhlIHN1Y2Nlc3NmdWwgbGVhdmUuCiAgICAoU3RyaW5nKSBleGl0X21zZyAtIG9wdGlvbmFsIGV4aXQgbWVzc2FnZS4KICAgIFJldHVybnM6CiAgICBpcWlkIC0gVGhlIHVuaXF1ZSBpZCBmb3IgdGhlIHJvb20gbGVhdmUuCiAgICAgKi8KICAgIGxlYXZlOiBmdW5jdGlvbihyb29tLCBuaWNrLCBoYW5kbGVyX2NiLCBleGl0X21zZykgewogICAgICB2YXIgaWQsIHByZXNlbmNlLCBwcmVzZW5jZWlkLCByb29tX25pY2s7CiAgICAgIGlkID0gdGhpcy5yb29tTmFtZXMuaW5kZXhPZihyb29tKTsKICAgICAgZGVsZXRlIHRoaXMucm9vbXNbcm9vbV07CiAgICAgIGlmIChpZCA+PSAwKSB7CiAgICAgICAgdGhpcy5yb29tTmFtZXMuc3BsaWNlKGlkLCAxKTsKICAgICAgICBpZiAodGhpcy5yb29tTmFtZXMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uLmRlbGV0ZUhhbmRsZXIodGhpcy5fbXVjX2hhbmRsZXIpOwogICAgICAgICAgdGhpcy5fbXVjX2hhbmRsZXIgPSBudWxsOwogICAgICAgIH0KICAgICAgfQogICAgICByb29tX25pY2sgPSB0aGlzLnRlc3RfYXBwZW5kX25pY2socm9vbSwgbmljayk7CiAgICAgIHByZXNlbmNlaWQgPSB0aGlzLl9jb25uZWN0aW9uLmdldFVuaXF1ZUlkKCk7CiAgICAgIHByZXNlbmNlID0gJHByZXMoewogICAgICAgIHR5cGU6ICJ1bmF2YWlsYWJsZSIsCiAgICAgICAgaWQ6IHByZXNlbmNlaWQsCiAgICAgICAgZnJvbTogdGhpcy5fY29ubmVjdGlvbi5qaWQsCiAgICAgICAgdG86IHJvb21fbmljawogICAgICB9KTsKICAgICAgaWYgKGV4aXRfbXNnICE9IG51bGwpIHsKICAgICAgICBwcmVzZW5jZS5jKCJzdGF0dXMiLCBleGl0X21zZyk7CiAgICAgIH0KICAgICAgaWYgKGhhbmRsZXJfY2IgIT0gbnVsbCkgewogICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uYWRkSGFuZGxlcihoYW5kbGVyX2NiLCBudWxsLCAicHJlc2VuY2UiLCBudWxsLCBwcmVzZW5jZWlkKTsKICAgICAgfQogICAgICB0aGlzLl9jb25uZWN0aW9uLnNlbmQocHJlc2VuY2UpOwogICAgICByZXR1cm4gcHJlc2VuY2VpZDsKICAgIH0sCgogICAgLypGdW5jdGlvbgogICAgUGFyYW1ldGVyczoKICAgIChTdHJpbmcpIHJvb20gLSBUaGUgbXVsdGktdXNlciBjaGF0IHJvb20gbmFtZS4KICAgIChTdHJpbmcpIG5pY2sgLSBUaGUgbmljayBuYW1lIHVzZWQgaW4gdGhlIGNoYXQgcm9vbS4KICAgIChTdHJpbmcpIG1lc3NhZ2UgLSBUaGUgcGxhaW50ZXh0IG1lc3NhZ2UgdG8gc2VuZCB0byB0aGUgcm9vbS4KICAgIChTdHJpbmcpIGh0bWxfbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIHNlbmQgdG8gdGhlIHJvb20gd2l0aCBodG1sIG1hcmt1cC4KICAgIChTdHJpbmcpIHR5cGUgLSAiZ3JvdXBjaGF0IiBmb3IgZ3JvdXAgY2hhdCBtZXNzYWdlcyBvCiAgICAgICAgICAgICAgICAgICAgImNoYXQiIGZvciBwcml2YXRlIGNoYXQgbWVzc2FnZXMKICAgIFJldHVybnM6CiAgICBtc2dpcSAtIHRoZSB1bmlxdWUgaWQgdXNlZCB0byBzZW5kIHRoZSBtZXNzYWdlCiAgICAgKi8KICAgIG1lc3NhZ2U6IGZ1bmN0aW9uKHJvb20sIG5pY2ssIG1lc3NhZ2UsIGh0bWxfbWVzc2FnZSwgdHlwZSwgbXNnaWQpIHsKICAgICAgdmFyIG1zZywgcGFyZW50LCByb29tX25pY2s7CiAgICAgIHJvb21fbmljayA9IHRoaXMudGVzdF9hcHBlbmRfbmljayhyb29tLCBuaWNrKTsKICAgICAgdHlwZSA9IHR5cGUgfHwgKG5pY2sgIT0gbnVsbCA/ICJjaGF0IiA6ICJncm91cGNoYXQiKTsKICAgICAgbXNnaWQgPSBtc2dpZCB8fCB0aGlzLl9jb25uZWN0aW9uLmdldFVuaXF1ZUlkKCk7CiAgICAgIG1zZyA9ICRtc2coewogICAgICAgIHRvOiByb29tX25pY2ssCiAgICAgICAgZnJvbTogdGhpcy5fY29ubmVjdGlvbi5qaWQsCiAgICAgICAgdHlwZTogdHlwZSwKICAgICAgICBpZDogbXNnaWQKICAgICAgfSkuYygiYm9keSIsIHsKICAgICAgICB4bWxuczogU3Ryb3BoZS5OUy5DTElFTlQKICAgICAgfSkudChtZXNzYWdlKTsKICAgICAgbXNnLnVwKCk7CiAgICAgIGlmIChodG1sX21lc3NhZ2UgIT0gbnVsbCkgewogICAgICAgIG1zZy5jKCJodG1sIiwgewogICAgICAgICAgeG1sbnM6IFN0cm9waGUuTlMuWEhUTUxfSU0KICAgICAgICB9KS5jKCJib2R5IiwgewogICAgICAgICAgeG1sbnM6IFN0cm9waGUuTlMuWEhUTUwKICAgICAgICB9KS5oKGh0bWxfbWVzc2FnZSk7CiAgICAgICAgaWYgKG1zZy5ub2RlLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICBwYXJlbnQgPSBtc2cubm9kZS5wYXJlbnROb2RlOwogICAgICAgICAgbXNnLnVwKCkudXAoKTsKICAgICAgICAgIG1zZy5ub2RlLnJlbW92ZUNoaWxkKHBhcmVudCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG1zZy51cCgpLnVwKCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIG1zZy5jKCJ4IiwgewogICAgICAgIHhtbG5zOiAiamFiYmVyOng6ZXZlbnQiCiAgICAgIH0pLmMoImNvbXBvc2luZyIpOwogICAgICB0aGlzLl9jb25uZWN0aW9uLnNlbmQobXNnKTsKICAgICAgcmV0dXJuIG1zZ2lkOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBDb252ZW5pZW5jZSBGdW5jdGlvbiB0byBzZW5kIGEgTWVzc2FnZSB0byBhbGwgT2NjdXBhbnRzCiAgICBQYXJhbWV0ZXJzOgogICAgKFN0cmluZykgcm9vbSAtIFRoZSBtdWx0aS11c2VyIGNoYXQgcm9vbSBuYW1lLgogICAgKFN0cmluZykgbWVzc2FnZSAtIFRoZSBwbGFpbnRleHQgbWVzc2FnZSB0byBzZW5kIHRvIHRoZSByb29tLgogICAgKFN0cmluZykgaHRtbF9tZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdG8gc2VuZCB0byB0aGUgcm9vbSB3aXRoIGh0bWwgbWFya3VwLgogICAgKFN0cmluZykgbXNnaWQgLSBPcHRpb25hbCB1bmlxdWUgSUQgd2hpY2ggd2lsbCBiZSBzZXQgYXMgdGhlICdpZCcgYXR0cmlidXRlIG9mIHRoZSBzdGFuemEKICAgIFJldHVybnM6CiAgICBtc2dpcSAtIHRoZSB1bmlxdWUgaWQgdXNlZCB0byBzZW5kIHRoZSBtZXNzYWdlCiAgICAgKi8KICAgIGdyb3VwY2hhdDogZnVuY3Rpb24ocm9vbSwgbWVzc2FnZSwgaHRtbF9tZXNzYWdlLCBtc2dpZCkgewogICAgICByZXR1cm4gdGhpcy5tZXNzYWdlKHJvb20sIG51bGwsIG1lc3NhZ2UsIGh0bWxfbWVzc2FnZSwgdm9pZCAwLCBtc2dpZCk7CiAgICB9LAoKICAgIC8qRnVuY3Rpb24KICAgIFNlbmQgYSBtZWRpYXRlZCBpbnZpdGF0aW9uLgogICAgUGFyYW1ldGVyczoKICAgIChTdHJpbmcpIHJvb20gLSBUaGUgbXVsdGktdXNlciBjaGF0IHJvb20gbmFtZS4KICAgIChTdHJpbmcpIHJlY2VpdmVyIC0gVGhlIGludml0YXRpb24ncyByZWNlaXZlci4KICAgIChTdHJpbmcpIHJlYXNvbiAtIE9wdGlvbmFsIHJlYXNvbiBmb3Igam9pbmluZyB0aGUgcm9vbS4KICAgIFJldHVybnM6CiAgICBtc2dpcSAtIHRoZSB1bmlxdWUgaWQgdXNlZCB0byBzZW5kIHRoZSBpbnZpdGF0aW9uCiAgICAgKi8KICAgIGludml0ZTogZnVuY3Rpb24ocm9vbSwgcmVjZWl2ZXIsIHJlYXNvbikgewogICAgICB2YXIgaW52aXRhdGlvbiwgbXNnaWQ7CiAgICAgIG1zZ2lkID0gdGhpcy5fY29ubmVjdGlvbi5nZXRVbmlxdWVJZCgpOwogICAgICBpbnZpdGF0aW9uID0gJG1zZyh7CiAgICAgICAgZnJvbTogdGhpcy5fY29ubmVjdGlvbi5qaWQsCiAgICAgICAgdG86IHJvb20sCiAgICAgICAgaWQ6IG1zZ2lkCiAgICAgIH0pLmMoJ3gnLCB7CiAgICAgICAgeG1sbnM6IFN0cm9waGUuTlMuTVVDX1VTRVIKICAgICAgfSkuYygnaW52aXRlJywgewogICAgICAgIHRvOiByZWNlaXZlcgogICAgICB9KTsKICAgICAgaWYgKHJlYXNvbiAhPSBudWxsKSB7CiAgICAgICAgaW52aXRhdGlvbi5jKCdyZWFzb24nLCByZWFzb24pOwogICAgICB9CiAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChpbnZpdGF0aW9uKTsKICAgICAgcmV0dXJuIG1zZ2lkOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBTZW5kIGEgbWVkaWF0ZWQgbXVsdGlwbGUgaW52aXRhdGlvbi4KICAgIFBhcmFtZXRlcnM6CiAgICAoU3RyaW5nKSByb29tIC0gVGhlIG11bHRpLXVzZXIgY2hhdCByb29tIG5hbWUuCiAgICAoQXJyYXkpIHJlY2VpdmVycyAtIFRoZSBpbnZpdGF0aW9uJ3MgcmVjZWl2ZXJzLgogICAgKFN0cmluZykgcmVhc29uIC0gT3B0aW9uYWwgcmVhc29uIGZvciBqb2luaW5nIHRoZSByb29tLgogICAgUmV0dXJuczoKICAgIG1zZ2lxIC0gdGhlIHVuaXF1ZSBpZCB1c2VkIHRvIHNlbmQgdGhlIGludml0YXRpb24KICAgICAqLwogICAgbXVsdGlwbGVJbnZpdGVzOiBmdW5jdGlvbihyb29tLCByZWNlaXZlcnMsIHJlYXNvbikgewogICAgICB2YXIgaW52aXRhdGlvbiwgbXNnaWQsIHJlY2VpdmVyLCBfaSwgX2xlbjsKICAgICAgbXNnaWQgPSB0aGlzLl9jb25uZWN0aW9uLmdldFVuaXF1ZUlkKCk7CiAgICAgIGludml0YXRpb24gPSAkbXNnKHsKICAgICAgICBmcm9tOiB0aGlzLl9jb25uZWN0aW9uLmppZCwKICAgICAgICB0bzogcm9vbSwKICAgICAgICBpZDogbXNnaWQKICAgICAgfSkuYygneCcsIHsKICAgICAgICB4bWxuczogU3Ryb3BoZS5OUy5NVUNfVVNFUgogICAgICB9KTsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSByZWNlaXZlcnMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICByZWNlaXZlciA9IHJlY2VpdmVyc1tfaV07CiAgICAgICAgaW52aXRhdGlvbi5jKCdpbnZpdGUnLCB7CiAgICAgICAgICB0bzogcmVjZWl2ZXIKICAgICAgICB9KTsKICAgICAgICBpZiAocmVhc29uICE9IG51bGwpIHsKICAgICAgICAgIGludml0YXRpb24uYygncmVhc29uJywgcmVhc29uKTsKICAgICAgICAgIGludml0YXRpb24udXAoKTsKICAgICAgICB9CiAgICAgICAgaW52aXRhdGlvbi51cCgpOwogICAgICB9CiAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChpbnZpdGF0aW9uKTsKICAgICAgcmV0dXJuIG1zZ2lkOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBTZW5kIGEgZGlyZWN0IGludml0YXRpb24uCiAgICBQYXJhbWV0ZXJzOgogICAgKFN0cmluZykgcm9vbSAtIFRoZSBtdWx0aS11c2VyIGNoYXQgcm9vbSBuYW1lLgogICAgKFN0cmluZykgcmVjZWl2ZXIgLSBUaGUgaW52aXRhdGlvbidzIHJlY2VpdmVyLgogICAgKFN0cmluZykgcmVhc29uIC0gT3B0aW9uYWwgcmVhc29uIGZvciBqb2luaW5nIHRoZSByb29tLgogICAgKFN0cmluZykgcGFzc3dvcmQgLSBPcHRpb25hbCBwYXNzd29yZCBmb3IgdGhlIHJvb20uCiAgICBSZXR1cm5zOgogICAgbXNnaXEgLSB0aGUgdW5pcXVlIGlkIHVzZWQgdG8gc2VuZCB0aGUgaW52aXRhdGlvbgogICAgICovCiAgICBkaXJlY3RJbnZpdGU6IGZ1bmN0aW9uKHJvb20sIHJlY2VpdmVyLCByZWFzb24sIHBhc3N3b3JkKSB7CiAgICAgIHZhciBhdHRycywgaW52aXRhdGlvbiwgbXNnaWQ7CiAgICAgIG1zZ2lkID0gdGhpcy5fY29ubmVjdGlvbi5nZXRVbmlxdWVJZCgpOwogICAgICBhdHRycyA9IHsKICAgICAgICB4bWxuczogJ2phYmJlcjp4OmNvbmZlcmVuY2UnLAogICAgICAgIGppZDogcm9vbQogICAgICB9OwogICAgICBpZiAocmVhc29uICE9IG51bGwpIHsKICAgICAgICBhdHRycy5yZWFzb24gPSByZWFzb247CiAgICAgIH0KICAgICAgaWYgKHBhc3N3b3JkICE9IG51bGwpIHsKICAgICAgICBhdHRycy5wYXNzd29yZCA9IHBhc3N3b3JkOwogICAgICB9CiAgICAgIGludml0YXRpb24gPSAkbXNnKHsKICAgICAgICBmcm9tOiB0aGlzLl9jb25uZWN0aW9uLmppZCwKICAgICAgICB0bzogcmVjZWl2ZXIsCiAgICAgICAgaWQ6IG1zZ2lkCiAgICAgIH0pLmMoJ3gnLCBhdHRycyk7CiAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChpbnZpdGF0aW9uKTsKICAgICAgcmV0dXJuIG1zZ2lkOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBRdWVyaWVzIGEgcm9vbSBmb3IgYSBsaXN0IG9mIG9jY3VwYW50cwogICAgKFN0cmluZykgcm9vbSAtIFRoZSBtdWx0aS11c2VyIGNoYXQgcm9vbSBuYW1lLgogICAgKEZ1bmN0aW9uKSBzdWNjZXNzX2NiIC0gT3B0aW9uYWwgZnVuY3Rpb24gdG8gaGFuZGxlIHRoZSBpbmZvLgogICAgKEZ1bmN0aW9uKSBlcnJvcl9jYiAtIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGhhbmRsZSBhbiBlcnJvci4KICAgIFJldHVybnM6CiAgICBpZCAtIHRoZSB1bmlxdWUgaWQgdXNlZCB0byBzZW5kIHRoZSBpbmZvIHJlcXVlc3QKICAgICAqLwogICAgcXVlcnlPY2N1cGFudHM6IGZ1bmN0aW9uKHJvb20sIHN1Y2Nlc3NfY2IsIGVycm9yX2NiKSB7CiAgICAgIHZhciBhdHRycywgaW5mbzsKICAgICAgYXR0cnMgPSB7CiAgICAgICAgeG1sbnM6IFN0cm9waGUuTlMuRElTQ09fSVRFTVMKICAgICAgfTsKICAgICAgaW5mbyA9ICRpcSh7CiAgICAgICAgZnJvbTogdGhpcy5fY29ubmVjdGlvbi5qaWQsCiAgICAgICAgdG86IHJvb20sCiAgICAgICAgdHlwZTogJ2dldCcKICAgICAgfSkuYygncXVlcnknLCBhdHRycyk7CiAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0aW9uLnNlbmRJUShpbmZvLCBzdWNjZXNzX2NiLCBlcnJvcl9jYik7CiAgICB9LAoKICAgIC8qRnVuY3Rpb24KICAgIFN0YXJ0IGEgcm9vbSBjb25maWd1cmF0aW9uLgogICAgUGFyYW1ldGVyczoKICAgIChTdHJpbmcpIHJvb20gLSBUaGUgbXVsdGktdXNlciBjaGF0IHJvb20gbmFtZS4KICAgIChGdW5jdGlvbikgaGFuZGxlcl9jYiAtIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGhhbmRsZSB0aGUgY29uZmlnIGZvcm0uCiAgICBSZXR1cm5zOgogICAgaWQgLSB0aGUgdW5pcXVlIGlkIHVzZWQgdG8gc2VuZCB0aGUgY29uZmlndXJhdGlvbiByZXF1ZXN0CiAgICAgKi8KICAgIGNvbmZpZ3VyZTogZnVuY3Rpb24ocm9vbSwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgdmFyIGNvbmZpZywgc3RhbnphOwogICAgICBjb25maWcgPSAkaXEoewogICAgICAgIHRvOiByb29tLAogICAgICAgIHR5cGU6ICJnZXQiCiAgICAgIH0pLmMoInF1ZXJ5IiwgewogICAgICAgIHhtbG5zOiBTdHJvcGhlLk5TLk1VQ19PV05FUgogICAgICB9KTsKICAgICAgc3RhbnphID0gY29uZmlnLnRyZWUoKTsKICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZElRKHN0YW56YSwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBDYW5jZWwgdGhlIHJvb20gY29uZmlndXJhdGlvbgogICAgUGFyYW1ldGVyczoKICAgIChTdHJpbmcpIHJvb20gLSBUaGUgbXVsdGktdXNlciBjaGF0IHJvb20gbmFtZS4KICAgIFJldHVybnM6CiAgICBpZCAtIHRoZSB1bmlxdWUgaWQgdXNlZCB0byBjYW5jZWwgdGhlIGNvbmZpZ3VyYXRpb24uCiAgICAgKi8KICAgIGNhbmNlbENvbmZpZ3VyZTogZnVuY3Rpb24ocm9vbSkgewogICAgICB2YXIgY29uZmlnLCBzdGFuemE7CiAgICAgIGNvbmZpZyA9ICRpcSh7CiAgICAgICAgdG86IHJvb20sCiAgICAgICAgdHlwZTogInNldCIKICAgICAgfSkuYygicXVlcnkiLCB7CiAgICAgICAgeG1sbnM6IFN0cm9waGUuTlMuTVVDX09XTkVSCiAgICAgIH0pLmMoIngiLCB7CiAgICAgICAgeG1sbnM6ICJqYWJiZXI6eDpkYXRhIiwKICAgICAgICB0eXBlOiAiY2FuY2VsIgogICAgICB9KTsKICAgICAgc3RhbnphID0gY29uZmlnLnRyZWUoKTsKICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZElRKHN0YW56YSk7CiAgICB9LAoKICAgIC8qRnVuY3Rpb24KICAgIFNhdmUgYSByb29tIGNvbmZpZ3VyYXRpb24uCiAgICBQYXJhbWV0ZXJzOgogICAgKFN0cmluZykgcm9vbSAtIFRoZSBtdWx0aS11c2VyIGNoYXQgcm9vbSBuYW1lLgogICAgKEFycmF5KSBjb25maWctIEZvcm0gT2JqZWN0IG9yIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgdXNlZCB0byBjb25maWd1cmUgdGhlIHJvb20uCiAgICBSZXR1cm5zOgogICAgaWQgLSB0aGUgdW5pcXVlIGlkIHVzZWQgdG8gc2F2ZSB0aGUgY29uZmlndXJhdGlvbi4KICAgICAqLwogICAgc2F2ZUNvbmZpZ3VyYXRpb246IGZ1bmN0aW9uKHJvb20sIGNvbmZpZywgc3VjY2Vzc19jYiwgZXJyb3JfY2IpIHsKICAgICAgdmFyIGNvbmYsIGlxLCBzdGFuemEsIF9pLCBfbGVuOwogICAgICBpcSA9ICRpcSh7CiAgICAgICAgdG86IHJvb20sCiAgICAgICAgdHlwZTogInNldCIKICAgICAgfSkuYygicXVlcnkiLCB7CiAgICAgICAgeG1sbnM6IFN0cm9waGUuTlMuTVVDX09XTkVSCiAgICAgIH0pOwogICAgICBpZiAodHlwZW9mIEZvcm0gIT09ICJ1bmRlZmluZWQiICYmIGNvbmZpZyBpbnN0YW5jZW9mIEZvcm0pIHsKICAgICAgICBjb25maWcudHlwZSA9ICJzdWJtaXQiOwogICAgICAgIGlxLmNub2RlKGNvbmZpZy50b1hNTCgpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpcS5jKCJ4IiwgewogICAgICAgICAgeG1sbnM6ICJqYWJiZXI6eDpkYXRhIiwKICAgICAgICAgIHR5cGU6ICJzdWJtaXQiCiAgICAgICAgfSk7CiAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBjb25maWcubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgIGNvbmYgPSBjb25maWdbX2ldOwogICAgICAgICAgaXEuY25vZGUoY29uZikudXAoKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgc3RhbnphID0gaXEudHJlZSgpOwogICAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbi5zZW5kSVEoc3RhbnphLCBzdWNjZXNzX2NiLCBlcnJvcl9jYik7CiAgICB9LAoKICAgIC8qRnVuY3Rpb24KICAgIFBhcmFtZXRlcnM6CiAgICAoU3RyaW5nKSByb29tIC0gVGhlIG11bHRpLXVzZXIgY2hhdCByb29tIG5hbWUuCiAgICBSZXR1cm5zOgogICAgaWQgLSB0aGUgdW5pcXVlIGlkIHVzZWQgdG8gY3JlYXRlIHRoZSBjaGF0IHJvb20uCiAgICAgKi8KICAgIGNyZWF0ZUluc3RhbnRSb29tOiBmdW5jdGlvbihyb29tLCBzdWNjZXNzX2NiLCBlcnJvcl9jYikgewogICAgICB2YXIgcm9vbWlxOwogICAgICByb29taXEgPSAkaXEoewogICAgICAgIHRvOiByb29tLAogICAgICAgIHR5cGU6ICJzZXQiCiAgICAgIH0pLmMoInF1ZXJ5IiwgewogICAgICAgIHhtbG5zOiBTdHJvcGhlLk5TLk1VQ19PV05FUgogICAgICB9KS5jKCJ4IiwgewogICAgICAgIHhtbG5zOiAiamFiYmVyOng6ZGF0YSIsCiAgICAgICAgdHlwZTogInN1Ym1pdCIKICAgICAgfSk7CiAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0aW9uLnNlbmRJUShyb29taXEudHJlZSgpLCBzdWNjZXNzX2NiLCBlcnJvcl9jYik7CiAgICB9LAoKICAgIC8qRnVuY3Rpb24KICAgIFBhcmFtZXRlcnM6CiAgICAoU3RyaW5nKSByb29tIC0gVGhlIG11bHRpLXVzZXIgY2hhdCByb29tIG5hbWUuCiAgICAoT2JqZWN0KSBjb25maWcgLSB0aGUgY29uZmlndXJhdGlvbi4gZXg6IHsibXVjI3Jvb21jb25maWdfcHVibGljcm9vbSI6ICIwIiwgIm11YyNyb29tY29uZmlnX3BlcnNpc3RlbnRyb29tIjogIjEifQogICAgUmV0dXJuczoKICAgIGlkIC0gdGhlIHVuaXF1ZSBpZCB1c2VkIHRvIGNyZWF0ZSB0aGUgY2hhdCByb29tLgogICAgICovCiAgICBjcmVhdGVDb25maWd1cmVkUm9vbTogZnVuY3Rpb24ocm9vbSwgY29uZmlnLCBzdWNjZXNzX2NiLCBlcnJvcl9jYikgewogICAgICB2YXIgaywgcm9vbWlxLCB2OwogICAgICByb29taXEgPSAkaXEoewogICAgICAgIHRvOiByb29tLAogICAgICAgIHR5cGU6ICJzZXQiCiAgICAgIH0pLmMoInF1ZXJ5IiwgewogICAgICAgIHhtbG5zOiBTdHJvcGhlLk5TLk1VQ19PV05FUgogICAgICB9KS5jKCJ4IiwgewogICAgICAgIHhtbG5zOiAiamFiYmVyOng6ZGF0YSIsCiAgICAgICAgdHlwZTogInN1Ym1pdCIKICAgICAgfSk7CiAgICAgIHJvb21pcS5jKCdmaWVsZCcsIHsKICAgICAgICAndmFyJzogJ0ZPUk1fVFlQRScKICAgICAgfSkuYygndmFsdWUnKS50KCdodHRwOi8vamFiYmVyLm9yZy9wcm90b2NvbC9tdWMjcm9vbWNvbmZpZycpLnVwKCkudXAoKTsKICAgICAgZm9yIChrIGluIGNvbmZpZykgewogICAgICAgIGlmICghX19oYXNQcm9wLmNhbGwoY29uZmlnLCBrKSkgY29udGludWU7CiAgICAgICAgdiA9IGNvbmZpZ1trXTsKICAgICAgICByb29taXEuYygnZmllbGQnLCB7CiAgICAgICAgICAndmFyJzogawogICAgICAgIH0pLmMoJ3ZhbHVlJykudCh2KS51cCgpLnVwKCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZElRKHJvb21pcS50cmVlKCksIHN1Y2Nlc3NfY2IsIGVycm9yX2NiKTsKICAgIH0sCgogICAgLypGdW5jdGlvbgogICAgU2V0IHRoZSB0b3BpYyBvZiB0aGUgY2hhdCByb29tLgogICAgUGFyYW1ldGVyczoKICAgIChTdHJpbmcpIHJvb20gLSBUaGUgbXVsdGktdXNlciBjaGF0IHJvb20gbmFtZS4KICAgIChTdHJpbmcpIHRvcGljIC0gVG9waWMgbWVzc2FnZS4KICAgICAqLwogICAgc2V0VG9waWM6IGZ1bmN0aW9uKHJvb20sIHRvcGljKSB7CiAgICAgIHZhciBtc2c7CiAgICAgIG1zZyA9ICRtc2coewogICAgICAgIHRvOiByb29tLAogICAgICAgIGZyb206IHRoaXMuX2Nvbm5lY3Rpb24uamlkLAogICAgICAgIHR5cGU6ICJncm91cGNoYXQiCiAgICAgIH0pLmMoInN1YmplY3QiLCB7CiAgICAgICAgeG1sbnM6ICJqYWJiZXI6Y2xpZW50IgogICAgICB9KS50KHRvcGljKTsKICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChtc2cudHJlZSgpKTsKICAgIH0sCgogICAgLypGdW5jdGlvbgogICAgSW50ZXJuYWwgRnVuY3Rpb24gdGhhdCBDaGFuZ2VzIHRoZSByb2xlIG9yIGFmZmlsaWF0aW9uIG9mIGEgbWVtYmVyCiAgICBvZiBhIE1VQyByb29tLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYnkgbW9kaWZ5Um9sZSBhbmQgbW9kaWZ5QWZmaWxpYXRpb24uCiAgICBUaGUgbW9kaWZpY2F0aW9uIGNhbiBvbmx5IGJlIGRvbmUgYnkgYSByb29tIG1vZGVyYXRvci4gQW4gZXJyb3Igd2lsbCBiZQogICAgcmV0dXJuZWQgaWYgdGhlIHVzZXIgZG9lc24ndCBoYXZlIHBlcm1pc3Npb24uCiAgICBQYXJhbWV0ZXJzOgogICAgKFN0cmluZykgcm9vbSAtIFRoZSBtdWx0aS11c2VyIGNoYXQgcm9vbSBuYW1lLgogICAgKE9iamVjdCkgaXRlbSAtIE9iamVjdCB3aXRoIG5pY2sgYW5kIHJvbGUgb3IgamlkIGFuZCBhZmZpbGlhdGlvbiBhdHRyaWJ1dGUKICAgIChTdHJpbmcpIHJlYXNvbiAtIE9wdGlvbmFsIHJlYXNvbiBmb3IgdGhlIGNoYW5nZS4KICAgIChGdW5jdGlvbikgaGFuZGxlcl9jYiAtIE9wdGlvbmFsIGNhbGxiYWNrIGZvciBzdWNjZXNzCiAgICAoRnVuY3Rpb24pIGVycm9yX2NiIC0gT3B0aW9uYWwgY2FsbGJhY2sgZm9yIGVycm9yCiAgICBSZXR1cm5zOgogICAgaXEgLSB0aGUgaWQgb2YgdGhlIG1vZGUgY2hhbmdlIHJlcXVlc3QuCiAgICAgKi8KICAgIF9tb2RpZnlQcml2aWxlZ2U6IGZ1bmN0aW9uKHJvb20sIGl0ZW0sIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgdmFyIGlxOwogICAgICBpcSA9ICRpcSh7CiAgICAgICAgdG86IHJvb20sCiAgICAgICAgdHlwZTogInNldCIKICAgICAgfSkuYygicXVlcnkiLCB7CiAgICAgICAgeG1sbnM6IFN0cm9waGUuTlMuTVVDX0FETUlOCiAgICAgIH0pLmNub2RlKGl0ZW0ubm9kZSk7CiAgICAgIGlmIChyZWFzb24gIT0gbnVsbCkgewogICAgICAgIGlxLmMoInJlYXNvbiIsIHJlYXNvbik7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZElRKGlxLnRyZWUoKSwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBDaGFuZ2VzIHRoZSByb2xlIG9mIGEgbWVtYmVyIG9mIGEgTVVDIHJvb20uCiAgICBUaGUgbW9kaWZpY2F0aW9uIGNhbiBvbmx5IGJlIGRvbmUgYnkgYSByb29tIG1vZGVyYXRvci4gQW4gZXJyb3Igd2lsbCBiZQogICAgcmV0dXJuZWQgaWYgdGhlIHVzZXIgZG9lc24ndCBoYXZlIHBlcm1pc3Npb24uCiAgICBQYXJhbWV0ZXJzOgogICAgKFN0cmluZykgcm9vbSAtIFRoZSBtdWx0aS11c2VyIGNoYXQgcm9vbSBuYW1lLgogICAgKFN0cmluZykgbmljayAtIFRoZSBuaWNrIG5hbWUgb2YgdGhlIHVzZXIgdG8gbW9kaWZ5LgogICAgKFN0cmluZykgcm9sZSAtIFRoZSBuZXcgcm9sZSBvZiB0aGUgdXNlci4KICAgIChTdHJpbmcpIGFmZmlsaWF0aW9uIC0gVGhlIG5ldyBhZmZpbGlhdGlvbiBvZiB0aGUgdXNlci4KICAgIChTdHJpbmcpIHJlYXNvbiAtIE9wdGlvbmFsIHJlYXNvbiBmb3IgdGhlIGNoYW5nZS4KICAgIChGdW5jdGlvbikgaGFuZGxlcl9jYiAtIE9wdGlvbmFsIGNhbGxiYWNrIGZvciBzdWNjZXNzCiAgICAoRnVuY3Rpb24pIGVycm9yX2NiIC0gT3B0aW9uYWwgY2FsbGJhY2sgZm9yIGVycm9yCiAgICBSZXR1cm5zOgogICAgaXEgLSB0aGUgaWQgb2YgdGhlIG1vZGUgY2hhbmdlIHJlcXVlc3QuCiAgICAgKi8KICAgIG1vZGlmeVJvbGU6IGZ1bmN0aW9uKHJvb20sIG5pY2ssIHJvbGUsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgdmFyIGl0ZW07CiAgICAgIGl0ZW0gPSAkYnVpbGQoIml0ZW0iLCB7CiAgICAgICAgbmljazogbmljaywKICAgICAgICByb2xlOiByb2xlCiAgICAgIH0pOwogICAgICByZXR1cm4gdGhpcy5fbW9kaWZ5UHJpdmlsZWdlKHJvb20sIGl0ZW0sIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfSwKICAgIGtpY2s6IGZ1bmN0aW9uKHJvb20sIG5pY2ssIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kaWZ5Um9sZShyb29tLCBuaWNrLCAnbm9uZScsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfSwKICAgIHZvaWNlOiBmdW5jdGlvbihyb29tLCBuaWNrLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGlmeVJvbGUocm9vbSwgbmljaywgJ3BhcnRpY2lwYW50JywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9LAogICAgbXV0ZTogZnVuY3Rpb24ocm9vbSwgbmljaywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5tb2RpZnlSb2xlKHJvb20sIG5pY2ssICd2aXNpdG9yJywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9LAogICAgb3A6IGZ1bmN0aW9uKHJvb20sIG5pY2ssIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kaWZ5Um9sZShyb29tLCBuaWNrLCAnbW9kZXJhdG9yJywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9LAogICAgZGVvcDogZnVuY3Rpb24ocm9vbSwgbmljaywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5tb2RpZnlSb2xlKHJvb20sIG5pY2ssICdwYXJ0aWNpcGFudCcsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBDaGFuZ2VzIHRoZSBhZmZpbGlhdGlvbiBvZiBhIG1lbWJlciBvZiBhIE1VQyByb29tLgogICAgVGhlIG1vZGlmaWNhdGlvbiBjYW4gb25seSBiZSBkb25lIGJ5IGEgcm9vbSBtb2RlcmF0b3IuIEFuIGVycm9yIHdpbGwgYmUKICAgIHJldHVybmVkIGlmIHRoZSB1c2VyIGRvZXNuJ3QgaGF2ZSBwZXJtaXNzaW9uLgogICAgUGFyYW1ldGVyczoKICAgIChTdHJpbmcpIHJvb20gLSBUaGUgbXVsdGktdXNlciBjaGF0IHJvb20gbmFtZS4KICAgIChTdHJpbmcpIGppZCAgLSBUaGUgamlkIG9mIHRoZSB1c2VyIHRvIG1vZGlmeS4KICAgIChTdHJpbmcpIGFmZmlsaWF0aW9uIC0gVGhlIG5ldyBhZmZpbGlhdGlvbiBvZiB0aGUgdXNlci4KICAgIChTdHJpbmcpIHJlYXNvbiAtIE9wdGlvbmFsIHJlYXNvbiBmb3IgdGhlIGNoYW5nZS4KICAgIChGdW5jdGlvbikgaGFuZGxlcl9jYiAtIE9wdGlvbmFsIGNhbGxiYWNrIGZvciBzdWNjZXNzCiAgICAoRnVuY3Rpb24pIGVycm9yX2NiIC0gT3B0aW9uYWwgY2FsbGJhY2sgZm9yIGVycm9yCiAgICBSZXR1cm5zOgogICAgaXEgLSB0aGUgaWQgb2YgdGhlIG1vZGUgY2hhbmdlIHJlcXVlc3QuCiAgICAgKi8KICAgIG1vZGlmeUFmZmlsaWF0aW9uOiBmdW5jdGlvbihyb29tLCBqaWQsIGFmZmlsaWF0aW9uLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKSB7CiAgICAgIHZhciBpdGVtOwogICAgICBpdGVtID0gJGJ1aWxkKCJpdGVtIiwgewogICAgICAgIGppZDogamlkLAogICAgICAgIGFmZmlsaWF0aW9uOiBhZmZpbGlhdGlvbgogICAgICB9KTsKICAgICAgcmV0dXJuIHRoaXMuX21vZGlmeVByaXZpbGVnZShyb29tLCBpdGVtLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKTsKICAgIH0sCiAgICBiYW46IGZ1bmN0aW9uKHJvb20sIGppZCwgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5tb2RpZnlBZmZpbGlhdGlvbihyb29tLCBqaWQsICdvdXRjYXN0JywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9LAogICAgbWVtYmVyOiBmdW5jdGlvbihyb29tLCBqaWQsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kaWZ5QWZmaWxpYXRpb24ocm9vbSwgamlkLCAnbWVtYmVyJywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9LAogICAgcmV2b2tlOiBmdW5jdGlvbihyb29tLCBqaWQsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kaWZ5QWZmaWxpYXRpb24ocm9vbSwgamlkLCAnbm9uZScsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfSwKICAgIG93bmVyOiBmdW5jdGlvbihyb29tLCBqaWQsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kaWZ5QWZmaWxpYXRpb24ocm9vbSwgamlkLCAnb3duZXInLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKTsKICAgIH0sCiAgICBhZG1pbjogZnVuY3Rpb24ocm9vbSwgamlkLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGlmeUFmZmlsaWF0aW9uKHJvb20sIGppZCwgJ2FkbWluJywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9LAoKICAgIC8qRnVuY3Rpb24KICAgIENoYW5nZSB0aGUgY3VycmVudCB1c2VycyBuaWNrIG5hbWUuCiAgICBQYXJhbWV0ZXJzOgogICAgKFN0cmluZykgcm9vbSAtIFRoZSBtdWx0aS11c2VyIGNoYXQgcm9vbSBuYW1lLgogICAgKFN0cmluZykgdXNlciAtIFRoZSBuZXcgbmljayBuYW1lLgogICAgICovCiAgICBjaGFuZ2VOaWNrOiBmdW5jdGlvbihyb29tLCB1c2VyKSB7CiAgICAgIHZhciBwcmVzZW5jZSwgcm9vbV9uaWNrOwogICAgICByb29tX25pY2sgPSB0aGlzLnRlc3RfYXBwZW5kX25pY2socm9vbSwgdXNlcik7CiAgICAgIHByZXNlbmNlID0gJHByZXMoewogICAgICAgIGZyb206IHRoaXMuX2Nvbm5lY3Rpb24uamlkLAogICAgICAgIHRvOiByb29tX25pY2ssCiAgICAgICAgaWQ6IHRoaXMuX2Nvbm5lY3Rpb24uZ2V0VW5pcXVlSWQoKQogICAgICB9KTsKICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChwcmVzZW5jZS50cmVlKCkpOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBDaGFuZ2UgdGhlIGN1cnJlbnQgdXNlcnMgc3RhdHVzLgogICAgUGFyYW1ldGVyczoKICAgIChTdHJpbmcpIHJvb20gLSBUaGUgbXVsdGktdXNlciBjaGF0IHJvb20gbmFtZS4KICAgIChTdHJpbmcpIHVzZXIgLSBUaGUgY3VycmVudCBuaWNrLgogICAgKFN0cmluZykgc2hvdyAtIFRoZSBuZXcgc2hvdy10ZXh0LgogICAgKFN0cmluZykgc3RhdHVzIC0gVGhlIG5ldyBzdGF0dXMtdGV4dC4KICAgICAqLwogICAgc2V0U3RhdHVzOiBmdW5jdGlvbihyb29tLCB1c2VyLCBzaG93LCBzdGF0dXMpIHsKICAgICAgdmFyIHByZXNlbmNlLCByb29tX25pY2s7CiAgICAgIHJvb21fbmljayA9IHRoaXMudGVzdF9hcHBlbmRfbmljayhyb29tLCB1c2VyKTsKICAgICAgcHJlc2VuY2UgPSAkcHJlcyh7CiAgICAgICAgZnJvbTogdGhpcy5fY29ubmVjdGlvbi5qaWQsCiAgICAgICAgdG86IHJvb21fbmljawogICAgICB9KTsKICAgICAgaWYgKHNob3cgIT0gbnVsbCkgewogICAgICAgIHByZXNlbmNlLmMoJ3Nob3cnLCBzaG93KS51cCgpOwogICAgICB9CiAgICAgIGlmIChzdGF0dXMgIT0gbnVsbCkgewogICAgICAgIHByZXNlbmNlLmMoJ3N0YXR1cycsIHN0YXR1cyk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChwcmVzZW5jZS50cmVlKCkpOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBSZWdpc3RlcmluZyB3aXRoIGEgcm9vbS4KICAgIEBzZWUgaHR0cDovL3htcHAub3JnL2V4dGVuc2lvbnMveGVwLTAwNDUuaHRtbCNyZWdpc3RlcgogICAgUGFyYW1ldGVyczoKICAgIChTdHJpbmcpIHJvb20gLSBUaGUgbXVsdGktdXNlciBjaGF0IHJvb20gbmFtZS4KICAgIChGdW5jdGlvbikgaGFuZGxlX2NiIC0gRnVuY3Rpb24gdG8gY2FsbCBmb3Igcm9vbSBsaXN0IHJldHVybi4KICAgIChGdW5jdGlvbikgZXJyb3JfY2IgLSBGdW5jdGlvbiB0byBjYWxsIG9uIGVycm9yLgogICAgICovCiAgICByZWdpc3RyYXRpb25SZXF1ZXN0OiBmdW5jdGlvbihyb29tLCBoYW5kbGVfY2IsIGVycm9yX2NiKSB7CiAgICAgIHZhciBpcTsKICAgICAgaXEgPSAkaXEoewogICAgICAgIHRvOiByb29tLAogICAgICAgIGZyb206IHRoaXMuX2Nvbm5lY3Rpb24uamlkLAogICAgICAgIHR5cGU6ICJnZXQiCiAgICAgIH0pLmMoInF1ZXJ5IiwgewogICAgICAgIHhtbG5zOiBTdHJvcGhlLk5TLk1VQ19SRUdJU1RFUgogICAgICB9KTsKICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZElRKGlxLCBmdW5jdGlvbihzdGFuemEpIHsKICAgICAgICB2YXIgJGZpZWxkLCAkZmllbGRzLCBmaWVsZCwgZmllbGRzLCBsZW5ndGgsIF9pLCBfbGVuOwogICAgICAgICRmaWVsZHMgPSBzdGFuemEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ZpZWxkJyk7CiAgICAgICAgbGVuZ3RoID0gJGZpZWxkcy5sZW5ndGg7CiAgICAgICAgZmllbGRzID0gewogICAgICAgICAgcmVxdWlyZWQ6IFtdLAogICAgICAgICAgb3B0aW9uYWw6IFtdCiAgICAgICAgfTsKICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9ICRmaWVsZHMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgICRmaWVsZCA9ICRmaWVsZHNbX2ldOwogICAgICAgICAgZmllbGQgPSB7CiAgICAgICAgICAgICJ2YXIiOiAkZmllbGQuZ2V0QXR0cmlidXRlKCd2YXInKSwKICAgICAgICAgICAgbGFiZWw6ICRmaWVsZC5nZXRBdHRyaWJ1dGUoJ2xhYmVsJyksCiAgICAgICAgICAgIHR5cGU6ICRmaWVsZC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKQogICAgICAgICAgfTsKICAgICAgICAgIGlmICgkZmllbGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3JlcXVpcmVkJykubGVuZ3RoID4gMCkgewogICAgICAgICAgICBmaWVsZHMucmVxdWlyZWQucHVzaChmaWVsZCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmaWVsZHMub3B0aW9uYWwucHVzaChmaWVsZCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBoYW5kbGVfY2IoZmllbGRzKTsKICAgICAgfSwgZXJyb3JfY2IpOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBTdWJtaXRzIHJlZ2lzdHJhdGlvbiBmb3JtLgogICAgUGFyYW1ldGVyczoKICAgIChTdHJpbmcpIHJvb20gLSBUaGUgbXVsdGktdXNlciBjaGF0IHJvb20gbmFtZS4KICAgIChGdW5jdGlvbikgaGFuZGxlX2NiIC0gRnVuY3Rpb24gdG8gY2FsbCBmb3Igcm9vbSBsaXN0IHJldHVybi4KICAgIChGdW5jdGlvbikgZXJyb3JfY2IgLSBGdW5jdGlvbiB0byBjYWxsIG9uIGVycm9yLgogICAgICovCiAgICBzdWJtaXRSZWdpc3RyYXRpb25Gb3JtOiBmdW5jdGlvbihyb29tLCBmaWVsZHMsIGhhbmRsZV9jYiwgZXJyb3JfY2IpIHsKICAgICAgdmFyIGlxLCBrZXksIHZhbDsKICAgICAgaXEgPSAkaXEoewogICAgICAgIHRvOiByb29tLAogICAgICAgIHR5cGU6ICJzZXQiCiAgICAgIH0pLmMoInF1ZXJ5IiwgewogICAgICAgIHhtbG5zOiBTdHJvcGhlLk5TLk1VQ19SRUdJU1RFUgogICAgICB9KTsKICAgICAgaXEuYygieCIsIHsKICAgICAgICB4bWxuczogImphYmJlcjp4OmRhdGEiLAogICAgICAgIHR5cGU6ICJzdWJtaXQiCiAgICAgIH0pOwogICAgICBpcS5jKCdmaWVsZCcsIHsKICAgICAgICAndmFyJzogJ0ZPUk1fVFlQRScKICAgICAgfSkuYygndmFsdWUnKS50KCdodHRwOi8vamFiYmVyLm9yZy9wcm90b2NvbC9tdWMjcmVnaXN0ZXInKS51cCgpLnVwKCk7CiAgICAgIGZvciAoa2V5IGluIGZpZWxkcykgewogICAgICAgIHZhbCA9IGZpZWxkc1trZXldOwogICAgICAgIGlxLmMoJ2ZpZWxkJywgewogICAgICAgICAgJ3Zhcic6IGtleQogICAgICAgIH0pLmMoJ3ZhbHVlJykudCh2YWwpLnVwKCkudXAoKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbi5zZW5kSVEoaXEsIGhhbmRsZV9jYiwgZXJyb3JfY2IpOwogICAgfSwKCiAgICAvKkZ1bmN0aW9uCiAgICBMaXN0IGFsbCBjaGF0IHJvb20gYXZhaWxhYmxlIG9uIGEgc2VydmVyLgogICAgUGFyYW1ldGVyczoKICAgIChTdHJpbmcpIHNlcnZlciAtIG5hbWUgb2YgY2hhdCBzZXJ2ZXIuCiAgICAoU3RyaW5nKSBoYW5kbGVfY2IgLSBGdW5jdGlvbiB0byBjYWxsIGZvciByb29tIGxpc3QgcmV0dXJuLgogICAgKFN0cmluZykgZXJyb3JfY2IgLSBGdW5jdGlvbiB0byBjYWxsIG9uIGVycm9yLgogICAgICovCiAgICBsaXN0Um9vbXM6IGZ1bmN0aW9uKHNlcnZlciwgaGFuZGxlX2NiLCBlcnJvcl9jYikgewogICAgICB2YXIgaXE7CiAgICAgIGlxID0gJGlxKHsKICAgICAgICB0bzogc2VydmVyLAogICAgICAgIGZyb206IHRoaXMuX2Nvbm5lY3Rpb24uamlkLAogICAgICAgIHR5cGU6ICJnZXQiCiAgICAgIH0pLmMoInF1ZXJ5IiwgewogICAgICAgIHhtbG5zOiBTdHJvcGhlLk5TLkRJU0NPX0lURU1TCiAgICAgIH0pOwogICAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbi5zZW5kSVEoaXEsIGhhbmRsZV9jYiwgZXJyb3JfY2IpOwogICAgfSwKICAgIHRlc3RfYXBwZW5kX25pY2s6IGZ1bmN0aW9uKHJvb20sIG5pY2spIHsKICAgICAgdmFyIGRvbWFpbiwgbm9kZTsKICAgICAgbm9kZSA9IFN0cm9waGUuZXNjYXBlTm9kZShTdHJvcGhlLmdldE5vZGVGcm9tSmlkKHJvb20pKTsKICAgICAgZG9tYWluID0gU3Ryb3BoZS5nZXREb21haW5Gcm9tSmlkKHJvb20pOwogICAgICByZXR1cm4gbm9kZSArICJAIiArIGRvbWFpbiArIChuaWNrICE9IG51bGwgPyAiLyIgKyBuaWNrIDogIiIpOwogICAgfQogIH0pOwoKICBYbXBwUm9vbSA9IChmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIFhtcHBSb29tKGNsaWVudCwgbmFtZSwgbmljaywgcGFzc3dvcmQpIHsKICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7CiAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgIHRoaXMubmljayA9IG5pY2s7CiAgICAgIHRoaXMucGFzc3dvcmQgPSBwYXNzd29yZDsKICAgICAgdGhpcy5fcm9vbVJvc3RlckhhbmRsZXIgPSBfX2JpbmQodGhpcy5fcm9vbVJvc3RlckhhbmRsZXIsIHRoaXMpOwogICAgICB0aGlzLl9hZGRPY2N1cGFudCA9IF9fYmluZCh0aGlzLl9hZGRPY2N1cGFudCwgdGhpcyk7CiAgICAgIHRoaXMucm9zdGVyID0ge307CiAgICAgIHRoaXMuX21lc3NhZ2VfaGFuZGxlcnMgPSB7fTsKICAgICAgdGhpcy5fcHJlc2VuY2VfaGFuZGxlcnMgPSB7fTsKICAgICAgdGhpcy5fcm9zdGVyX2hhbmRsZXJzID0ge307CiAgICAgIHRoaXMuX2hhbmRsZXJfaWRzID0gMDsKICAgICAgaWYgKGNsaWVudC5tdWMpIHsKICAgICAgICB0aGlzLmNsaWVudCA9IGNsaWVudC5tdWM7CiAgICAgIH0KICAgICAgdGhpcy5uYW1lID0gU3Ryb3BoZS5nZXRCYXJlSmlkRnJvbUppZChuYW1lKTsKICAgICAgdGhpcy5hZGRIYW5kbGVyKCdwcmVzZW5jZScsIHRoaXMuX3Jvb21Sb3N0ZXJIYW5kbGVyKTsKICAgIH0KCiAgICBYbXBwUm9vbS5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uKG1zZ19oYW5kbGVyX2NiLCBwcmVzX2hhbmRsZXJfY2IsIHJvc3Rlcl9jYikgewogICAgICByZXR1cm4gdGhpcy5jbGllbnQuam9pbih0aGlzLm5hbWUsIHRoaXMubmljaywgbXNnX2hhbmRsZXJfY2IsIHByZXNfaGFuZGxlcl9jYiwgcm9zdGVyX2NiLCB0aGlzLnBhc3N3b3JkKTsKICAgIH07CgogICAgWG1wcFJvb20ucHJvdG90eXBlLmxlYXZlID0gZnVuY3Rpb24oaGFuZGxlcl9jYiwgbWVzc2FnZSkgewogICAgICB0aGlzLmNsaWVudC5sZWF2ZSh0aGlzLm5hbWUsIHRoaXMubmljaywgaGFuZGxlcl9jYiwgbWVzc2FnZSk7CiAgICAgIHJldHVybiBkZWxldGUgdGhpcy5jbGllbnQucm9vbXNbdGhpcy5uYW1lXTsKICAgIH07CgogICAgWG1wcFJvb20ucHJvdG90eXBlLm1lc3NhZ2UgPSBmdW5jdGlvbihuaWNrLCBtZXNzYWdlLCBodG1sX21lc3NhZ2UsIHR5cGUpIHsKICAgICAgcmV0dXJuIHRoaXMuY2xpZW50Lm1lc3NhZ2UodGhpcy5uYW1lLCBuaWNrLCBtZXNzYWdlLCBodG1sX21lc3NhZ2UsIHR5cGUpOwogICAgfTsKCiAgICBYbXBwUm9vbS5wcm90b3R5cGUuZ3JvdXBjaGF0ID0gZnVuY3Rpb24obWVzc2FnZSwgaHRtbF9tZXNzYWdlKSB7CiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5ncm91cGNoYXQodGhpcy5uYW1lLCBtZXNzYWdlLCBodG1sX21lc3NhZ2UpOwogICAgfTsKCiAgICBYbXBwUm9vbS5wcm90b3R5cGUuaW52aXRlID0gZnVuY3Rpb24ocmVjZWl2ZXIsIHJlYXNvbikgewogICAgICByZXR1cm4gdGhpcy5jbGllbnQuaW52aXRlKHRoaXMubmFtZSwgcmVjZWl2ZXIsIHJlYXNvbik7CiAgICB9OwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5tdWx0aXBsZUludml0ZXMgPSBmdW5jdGlvbihyZWNlaXZlcnMsIHJlYXNvbikgewogICAgICByZXR1cm4gdGhpcy5jbGllbnQuaW52aXRlKHRoaXMubmFtZSwgcmVjZWl2ZXJzLCByZWFzb24pOwogICAgfTsKCiAgICBYbXBwUm9vbS5wcm90b3R5cGUuZGlyZWN0SW52aXRlID0gZnVuY3Rpb24ocmVjZWl2ZXIsIHJlYXNvbikgewogICAgICByZXR1cm4gdGhpcy5jbGllbnQuZGlyZWN0SW52aXRlKHRoaXMubmFtZSwgcmVjZWl2ZXIsIHJlYXNvbiwgdGhpcy5wYXNzd29yZCk7CiAgICB9OwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5jb25maWd1cmUgPSBmdW5jdGlvbihoYW5kbGVyX2NiKSB7CiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5jb25maWd1cmUodGhpcy5uYW1lLCBoYW5kbGVyX2NiKTsKICAgIH07CgogICAgWG1wcFJvb20ucHJvdG90eXBlLmNhbmNlbENvbmZpZ3VyZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FuY2VsQ29uZmlndXJlKHRoaXMubmFtZSk7CiAgICB9OwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5zYXZlQ29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICByZXR1cm4gdGhpcy5jbGllbnQuc2F2ZUNvbmZpZ3VyYXRpb24odGhpcy5uYW1lLCBjb25maWcpOwogICAgfTsKCiAgICBYbXBwUm9vbS5wcm90b3R5cGUucXVlcnlPY2N1cGFudHMgPSBmdW5jdGlvbihzdWNjZXNzX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5jbGllbnQucXVlcnlPY2N1cGFudHModGhpcy5uYW1lLCBzdWNjZXNzX2NiLCBlcnJvcl9jYik7CiAgICB9OwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5zZXRUb3BpYyA9IGZ1bmN0aW9uKHRvcGljKSB7CiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5zZXRUb3BpYyh0aGlzLm5hbWUsIHRvcGljKTsKICAgIH07CgogICAgWG1wcFJvb20ucHJvdG90eXBlLm1vZGlmeVJvbGUgPSBmdW5jdGlvbihuaWNrLCByb2xlLCByZWFzb24sIHN1Y2Nlc3NfY2IsIGVycm9yX2NiKSB7CiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5tb2RpZnlSb2xlKHRoaXMubmFtZSwgbmljaywgcm9sZSwgcmVhc29uLCBzdWNjZXNzX2NiLCBlcnJvcl9jYik7CiAgICB9OwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5raWNrID0gZnVuY3Rpb24obmljaywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5jbGllbnQua2ljayh0aGlzLm5hbWUsIG5pY2ssIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfTsKCiAgICBYbXBwUm9vbS5wcm90b3R5cGUudm9pY2UgPSBmdW5jdGlvbihuaWNrLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKSB7CiAgICAgIHJldHVybiB0aGlzLmNsaWVudC52b2ljZSh0aGlzLm5hbWUsIG5pY2ssIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfTsKCiAgICBYbXBwUm9vbS5wcm90b3R5cGUubXV0ZSA9IGZ1bmN0aW9uKG5pY2ssIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMuY2xpZW50Lm11dGUodGhpcy5uYW1lLCBuaWNrLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKTsKICAgIH07CgogICAgWG1wcFJvb20ucHJvdG90eXBlLm9wID0gZnVuY3Rpb24obmljaywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5jbGllbnQub3AodGhpcy5uYW1lLCBuaWNrLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKTsKICAgIH07CgogICAgWG1wcFJvb20ucHJvdG90eXBlLmRlb3AgPSBmdW5jdGlvbihuaWNrLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKSB7CiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5kZW9wKHRoaXMubmFtZSwgbmljaywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9OwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5tb2RpZnlBZmZpbGlhdGlvbiA9IGZ1bmN0aW9uKGppZCwgYWZmaWxpYXRpb24sIHJlYXNvbiwgc3VjY2Vzc19jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMuY2xpZW50Lm1vZGlmeUFmZmlsaWF0aW9uKHRoaXMubmFtZSwgamlkLCBhZmZpbGlhdGlvbiwgcmVhc29uLCBzdWNjZXNzX2NiLCBlcnJvcl9jYik7CiAgICB9OwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5iYW4gPSBmdW5jdGlvbihqaWQsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmJhbih0aGlzLm5hbWUsIGppZCwgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9OwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5tZW1iZXIgPSBmdW5jdGlvbihqaWQsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMuY2xpZW50Lm1lbWJlcih0aGlzLm5hbWUsIGppZCwgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9OwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5yZXZva2UgPSBmdW5jdGlvbihqaWQsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnJldm9rZSh0aGlzLm5hbWUsIGppZCwgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9OwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5vd25lciA9IGZ1bmN0aW9uKGppZCwgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5jbGllbnQub3duZXIodGhpcy5uYW1lLCBqaWQsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfTsKCiAgICBYbXBwUm9vbS5wcm90b3R5cGUuYWRtaW4gPSBmdW5jdGlvbihqaWQsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmFkbWluKHRoaXMubmFtZSwgamlkLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKTsKICAgIH07CgogICAgWG1wcFJvb20ucHJvdG90eXBlLmNoYW5nZU5pY2sgPSBmdW5jdGlvbihuaWNrKSB7CiAgICAgIHRoaXMubmljayA9IG5pY2s7CiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5jaGFuZ2VOaWNrKHRoaXMubmFtZSwgbmljayk7CiAgICB9OwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5zZXRTdGF0dXMgPSBmdW5jdGlvbihzaG93LCBzdGF0dXMpIHsKICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnNldFN0YXR1cyh0aGlzLm5hbWUsIHRoaXMubmljaywgc2hvdywgc3RhdHVzKTsKICAgIH07CgoKICAgIC8qRnVuY3Rpb24KICAgIEFkZHMgYSBoYW5kbGVyIHRvIHRoZSBNVUMgcm9vbS4KICAgICAgUGFyYW1ldGVyczoKICAgIChTdHJpbmcpIGhhbmRsZXJfdHlwZSAtICdtZXNzYWdlJywgJ3ByZXNlbmNlJyBvciAncm9zdGVyJy4KICAgIChGdW5jdGlvbikgaGFuZGxlciAtIFRoZSBoYW5kbGVyIGZ1bmN0aW9uLgogICAgUmV0dXJuczoKICAgIGlkIC0gdGhlIGlkIG9mIGhhbmRsZXIuCiAgICAgKi8KCiAgICBYbXBwUm9vbS5wcm90b3R5cGUuYWRkSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXJfdHlwZSwgaGFuZGxlcikgewogICAgICB2YXIgaWQ7CiAgICAgIGlkID0gdGhpcy5faGFuZGxlcl9pZHMrKzsKICAgICAgc3dpdGNoIChoYW5kbGVyX3R5cGUpIHsKICAgICAgICBjYXNlICdwcmVzZW5jZSc6CiAgICAgICAgICB0aGlzLl9wcmVzZW5jZV9oYW5kbGVyc1tpZF0gPSBoYW5kbGVyOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnbWVzc2FnZSc6CiAgICAgICAgICB0aGlzLl9tZXNzYWdlX2hhbmRsZXJzW2lkXSA9IGhhbmRsZXI7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdyb3N0ZXInOgogICAgICAgICAgdGhpcy5fcm9zdGVyX2hhbmRsZXJzW2lkXSA9IGhhbmRsZXI7CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhpcy5faGFuZGxlcl9pZHMtLTsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIHJldHVybiBpZDsKICAgIH07CgoKICAgIC8qRnVuY3Rpb24KICAgIFJlbW92ZXMgYSBoYW5kbGVyIGZyb20gdGhlIE1VQyByb29tLgogICAgVGhpcyBmdW5jdGlvbiB0YWtlcyBPTkxZIGlkcyByZXR1cm5lZCBieSB0aGUgYWRkSGFuZGxlciBmdW5jdGlvbgogICAgb2YgdGhpcyByb29tLiBwYXNzaW5nIGhhbmRsZXIgaWRzIHJldHVybmVkIGJ5IGNvbm5lY3Rpb24uYWRkSGFuZGxlcgogICAgbWF5IGJyYWtlIHRoaW5ncyEKICAgICAgUGFyYW1ldGVyczoKICAgIChudW1iZXIpIGlkIC0gdGhlIGlkIG9mIHRoZSBoYW5kbGVyCiAgICAgKi8KCiAgICBYbXBwUm9vbS5wcm90b3R5cGUucmVtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uKGlkKSB7CiAgICAgIGRlbGV0ZSB0aGlzLl9wcmVzZW5jZV9oYW5kbGVyc1tpZF07CiAgICAgIGRlbGV0ZSB0aGlzLl9tZXNzYWdlX2hhbmRsZXJzW2lkXTsKICAgICAgcmV0dXJuIGRlbGV0ZSB0aGlzLl9yb3N0ZXJfaGFuZGxlcnNbaWRdOwogICAgfTsKCgogICAgLypGdW5jdGlvbgogICAgQ3JlYXRlcyBhbmQgYWRkcyBhbiBPY2N1cGFudCB0byB0aGUgUm9vbSBSb3N0ZXIuCiAgICAgIFBhcmFtZXRlcnM6CiAgICAoT2JqZWN0KSBkYXRhIC0gdGhlIGRhdGEgdGhlIE9jY3VwYW50IGlzIGZpbGxlZCB3aXRoCiAgICBSZXR1cm5zOgogICAgb2NjIC0gdGhlIGNyZWF0ZWQgT2NjdXBhbnQuCiAgICAgKi8KCiAgICBYbXBwUm9vbS5wcm90b3R5cGUuX2FkZE9jY3VwYW50ID0gZnVuY3Rpb24oZGF0YSkgewogICAgICB2YXIgb2NjOwogICAgICBvY2MgPSBuZXcgT2NjdXBhbnQoZGF0YSwgdGhpcyk7CiAgICAgIHRoaXMucm9zdGVyW29jYy5uaWNrXSA9IG9jYzsKICAgICAgcmV0dXJuIG9jYzsKICAgIH07CgoKICAgIC8qRnVuY3Rpb24KICAgIFRoZSBzdGFuZGFyZCBoYW5kbGVyIHRoYXQgbWFuYWdlZCB0aGUgUm9vbSBSb3N0ZXIuCiAgICAgIFBhcmFtZXRlcnM6CiAgICAoT2JqZWN0KSBwcmVzIC0gdGhlIHByZXNlbmNlIHN0YW56YSBjb250YWluaW5nIHVzZXIgaW5mb3JtYXRpb24KICAgICAqLwoKICAgIFhtcHBSb29tLnByb3RvdHlwZS5fcm9vbVJvc3RlckhhbmRsZXIgPSBmdW5jdGlvbihwcmVzKSB7CiAgICAgIHZhciBkYXRhLCBoYW5kbGVyLCBpZCwgbmV3bmljaywgbmljaywgX3JlZjsKICAgICAgZGF0YSA9IFhtcHBSb29tLl9wYXJzZVByZXNlbmNlKHByZXMpOwogICAgICBuaWNrID0gZGF0YS5uaWNrOwogICAgICBuZXduaWNrID0gZGF0YS5uZXduaWNrIHx8IG51bGw7CiAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7CiAgICAgICAgY2FzZSAnZXJyb3InOgogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgY2FzZSAndW5hdmFpbGFibGUnOgogICAgICAgICAgaWYgKG5ld25pY2spIHsKICAgICAgICAgICAgZGF0YS5uaWNrID0gbmV3bmljazsKICAgICAgICAgICAgaWYgKHRoaXMucm9zdGVyW25pY2tdICYmIHRoaXMucm9zdGVyW25ld25pY2tdKSB7CiAgICAgICAgICAgICAgdGhpcy5yb3N0ZXJbbmlja10udXBkYXRlKHRoaXMucm9zdGVyW25ld25pY2tdKTsKICAgICAgICAgICAgICB0aGlzLnJvc3RlcltuZXduaWNrXSA9IHRoaXMucm9zdGVyW25pY2tdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0aGlzLnJvc3RlcltuaWNrXSAmJiAhdGhpcy5yb3N0ZXJbbmV3bmlja10pIHsKICAgICAgICAgICAgICB0aGlzLnJvc3RlcltuZXduaWNrXSA9IHRoaXMucm9zdGVyW25pY2tdLnVwZGF0ZShkYXRhKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZGVsZXRlIHRoaXMucm9zdGVyW25pY2tdOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIGlmICh0aGlzLnJvc3RlcltuaWNrXSkgewogICAgICAgICAgICB0aGlzLnJvc3RlcltuaWNrXS51cGRhdGUoZGF0YSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLl9hZGRPY2N1cGFudChkYXRhKTsKICAgICAgICAgIH0KICAgICAgfQogICAgICBfcmVmID0gdGhpcy5fcm9zdGVyX2hhbmRsZXJzOwogICAgICBmb3IgKGlkIGluIF9yZWYpIHsKICAgICAgICBoYW5kbGVyID0gX3JlZltpZF07CiAgICAgICAgaWYgKCFoYW5kbGVyKHRoaXMucm9zdGVyLCB0aGlzKSkgewogICAgICAgICAgZGVsZXRlIHRoaXMuX3Jvc3Rlcl9oYW5kbGVyc1tpZF07CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfTsKCgogICAgLypGdW5jdGlvbgogICAgUGFyc2VzIGEgcHJlc2VuY2Ugc3RhbnphCiAgICAgIFBhcmFtZXRlcnM6CiAgICAoT2JqZWN0KSBkYXRhIC0gdGhlIGRhdGEgZXh0cmFjdGVkIGZyb20gdGhlIHByZXNlbmNlIHN0YW56YQogICAgICovCgogICAgWG1wcFJvb20uX3BhcnNlUHJlc2VuY2UgPSBmdW5jdGlvbihwcmVzKSB7CiAgICAgIHZhciBjLCBjMiwgZGF0YSwgX2ksIF9qLCBfbGVuLCBfbGVuMSwgX3JlZiwgX3JlZjE7CiAgICAgIGRhdGEgPSB7fTsKICAgICAgZGF0YS5uaWNrID0gU3Ryb3BoZS5nZXRSZXNvdXJjZUZyb21KaWQocHJlcy5nZXRBdHRyaWJ1dGUoImZyb20iKSk7CiAgICAgIGRhdGEudHlwZSA9IHByZXMuZ2V0QXR0cmlidXRlKCJ0eXBlIik7CiAgICAgIGRhdGEuc3RhdGVzID0gW107CiAgICAgIF9yZWYgPSBwcmVzLmNoaWxkTm9kZXM7CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIGMgPSBfcmVmW19pXTsKICAgICAgICBzd2l0Y2ggKGMubm9kZU5hbWUpIHsKICAgICAgICAgIGNhc2UgInN0YXR1cyI6CiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gYy50ZXh0Q29udGVudCB8fCBudWxsOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgInNob3ciOgogICAgICAgICAgICBkYXRhLnNob3cgPSBjLnRleHRDb250ZW50IHx8IG51bGw7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAieCI6CiAgICAgICAgICAgIGlmIChjLmdldEF0dHJpYnV0ZSgieG1sbnMiKSA9PT0gU3Ryb3BoZS5OUy5NVUNfVVNFUikgewogICAgICAgICAgICAgIF9yZWYxID0gYy5jaGlsZE5vZGVzOwogICAgICAgICAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYxLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykgewogICAgICAgICAgICAgICAgYzIgPSBfcmVmMVtfal07CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGMyLm5vZGVOYW1lKSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgIml0ZW0iOgogICAgICAgICAgICAgICAgICAgIGRhdGEuYWZmaWxpYXRpb24gPSBjMi5nZXRBdHRyaWJ1dGUoImFmZmlsaWF0aW9uIik7CiAgICAgICAgICAgICAgICAgICAgZGF0YS5yb2xlID0gYzIuZ2V0QXR0cmlidXRlKCJyb2xlIik7CiAgICAgICAgICAgICAgICAgICAgZGF0YS5qaWQgPSBjMi5nZXRBdHRyaWJ1dGUoImppZCIpOwogICAgICAgICAgICAgICAgICAgIGRhdGEubmV3bmljayA9IGMyLmdldEF0dHJpYnV0ZSgibmljayIpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBjYXNlICJzdGF0dXMiOgogICAgICAgICAgICAgICAgICAgIGlmIChjMi5nZXRBdHRyaWJ1dGUoImNvZGUiKSkgewogICAgICAgICAgICAgICAgICAgICAgZGF0YS5zdGF0ZXMucHVzaChjMi5nZXRBdHRyaWJ1dGUoImNvZGUiKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZGF0YTsKICAgIH07CgogICAgcmV0dXJuIFhtcHBSb29tOwoKICB9KSgpOwoKICBSb29tQ29uZmlnID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gUm9vbUNvbmZpZyhpbmZvKSB7CiAgICAgIHRoaXMucGFyc2UgPSBfX2JpbmQodGhpcy5wYXJzZSwgdGhpcyk7CiAgICAgIGlmIChpbmZvICE9IG51bGwpIHsKICAgICAgICB0aGlzLnBhcnNlKGluZm8pOwogICAgICB9CiAgICB9CgogICAgUm9vbUNvbmZpZy5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgdmFyIGF0dHIsIGF0dHJzLCBjaGlsZCwgZmllbGQsIGlkZW50aXR5LCBxdWVyeSwgX2ksIF9qLCBfaywgX2xlbiwgX2xlbjEsIF9sZW4yLCBfcmVmOwogICAgICBxdWVyeSA9IHJlc3VsdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgicXVlcnkiKVswXS5jaGlsZE5vZGVzOwogICAgICB0aGlzLmlkZW50aXRpZXMgPSBbXTsKICAgICAgdGhpcy5mZWF0dXJlcyA9IFtdOwogICAgICB0aGlzLnggPSBbXTsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBxdWVyeS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIGNoaWxkID0gcXVlcnlbX2ldOwogICAgICAgIGF0dHJzID0gY2hpbGQuYXR0cmlidXRlczsKICAgICAgICBzd2l0Y2ggKGNoaWxkLm5vZGVOYW1lKSB7CiAgICAgICAgICBjYXNlICJpZGVudGl0eSI6CiAgICAgICAgICAgIGlkZW50aXR5ID0ge307CiAgICAgICAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IGF0dHJzLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykgewogICAgICAgICAgICAgIGF0dHIgPSBhdHRyc1tfal07CiAgICAgICAgICAgICAgaWRlbnRpdHlbYXR0ci5uYW1lXSA9IGF0dHIudGV4dENvbnRlbnQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5pZGVudGl0aWVzLnB1c2goaWRlbnRpdHkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgImZlYXR1cmUiOgogICAgICAgICAgICB0aGlzLmZlYXR1cmVzLnB1c2goY2hpbGQuZ2V0QXR0cmlidXRlKCJ2YXIiKSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAieCI6CiAgICAgICAgICAgIGlmICgoIWNoaWxkLmNoaWxkTm9kZXNbMF0uZ2V0QXR0cmlidXRlKCJ2YXIiKSA9PT0gJ0ZPUk1fVFlQRScpIHx8ICghY2hpbGQuY2hpbGROb2Rlc1swXS5nZXRBdHRyaWJ1dGUoInR5cGUiKSA9PT0gJ2hpZGRlbicpKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX3JlZiA9IGNoaWxkLmNoaWxkTm9kZXM7CiAgICAgICAgICAgIGZvciAoX2sgPSAwLCBfbGVuMiA9IF9yZWYubGVuZ3RoOyBfayA8IF9sZW4yOyBfaysrKSB7CiAgICAgICAgICAgICAgZmllbGQgPSBfcmVmW19rXTsKICAgICAgICAgICAgICBpZiAoIWZpZWxkLmF0dHJpYnV0ZXMudHlwZSkgewogICAgICAgICAgICAgICAgdGhpcy54LnB1c2goewogICAgICAgICAgICAgICAgICAidmFyIjogZmllbGQuZ2V0QXR0cmlidXRlKCJ2YXIiKSwKICAgICAgICAgICAgICAgICAgbGFiZWw6IGZpZWxkLmdldEF0dHJpYnV0ZSgibGFiZWwiKSB8fCAiIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IGZpZWxkLmZpcnN0Q2hpbGQudGV4dENvbnRlbnQgfHwgIiIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gewogICAgICAgICJpZGVudGl0aWVzIjogdGhpcy5pZGVudGl0aWVzLAogICAgICAgICJmZWF0dXJlcyI6IHRoaXMuZmVhdHVyZXMsCiAgICAgICAgIngiOiB0aGlzLngKICAgICAgfTsKICAgIH07CgogICAgcmV0dXJuIFJvb21Db25maWc7CgogIH0pKCk7CgogIE9jY3VwYW50ID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gT2NjdXBhbnQoZGF0YSwgcm9vbSkgewogICAgICB0aGlzLnJvb20gPSByb29tOwogICAgICB0aGlzLnVwZGF0ZSA9IF9fYmluZCh0aGlzLnVwZGF0ZSwgdGhpcyk7CiAgICAgIHRoaXMuYWRtaW4gPSBfX2JpbmQodGhpcy5hZG1pbiwgdGhpcyk7CiAgICAgIHRoaXMub3duZXIgPSBfX2JpbmQodGhpcy5vd25lciwgdGhpcyk7CiAgICAgIHRoaXMucmV2b2tlID0gX19iaW5kKHRoaXMucmV2b2tlLCB0aGlzKTsKICAgICAgdGhpcy5tZW1iZXIgPSBfX2JpbmQodGhpcy5tZW1iZXIsIHRoaXMpOwogICAgICB0aGlzLmJhbiA9IF9fYmluZCh0aGlzLmJhbiwgdGhpcyk7CiAgICAgIHRoaXMubW9kaWZ5QWZmaWxpYXRpb24gPSBfX2JpbmQodGhpcy5tb2RpZnlBZmZpbGlhdGlvbiwgdGhpcyk7CiAgICAgIHRoaXMuZGVvcCA9IF9fYmluZCh0aGlzLmRlb3AsIHRoaXMpOwogICAgICB0aGlzLm9wID0gX19iaW5kKHRoaXMub3AsIHRoaXMpOwogICAgICB0aGlzLm11dGUgPSBfX2JpbmQodGhpcy5tdXRlLCB0aGlzKTsKICAgICAgdGhpcy52b2ljZSA9IF9fYmluZCh0aGlzLnZvaWNlLCB0aGlzKTsKICAgICAgdGhpcy5raWNrID0gX19iaW5kKHRoaXMua2ljaywgdGhpcyk7CiAgICAgIHRoaXMubW9kaWZ5Um9sZSA9IF9fYmluZCh0aGlzLm1vZGlmeVJvbGUsIHRoaXMpOwogICAgICB0aGlzLnVwZGF0ZShkYXRhKTsKICAgIH0KCiAgICBPY2N1cGFudC5wcm90b3R5cGUubW9kaWZ5Um9sZSA9IGZ1bmN0aW9uKHJvbGUsIHJlYXNvbiwgc3VjY2Vzc19jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMucm9vbS5tb2RpZnlSb2xlKHRoaXMubmljaywgcm9sZSwgcmVhc29uLCBzdWNjZXNzX2NiLCBlcnJvcl9jYik7CiAgICB9OwoKICAgIE9jY3VwYW50LnByb3RvdHlwZS5raWNrID0gZnVuY3Rpb24ocmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5yb29tLmtpY2sodGhpcy5uaWNrLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKTsKICAgIH07CgogICAgT2NjdXBhbnQucHJvdG90eXBlLnZvaWNlID0gZnVuY3Rpb24ocmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5yb29tLnZvaWNlKHRoaXMubmljaywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9OwoKICAgIE9jY3VwYW50LnByb3RvdHlwZS5tdXRlID0gZnVuY3Rpb24ocmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5yb29tLm11dGUodGhpcy5uaWNrLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKTsKICAgIH07CgogICAgT2NjdXBhbnQucHJvdG90eXBlLm9wID0gZnVuY3Rpb24ocmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5yb29tLm9wKHRoaXMubmljaywgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9OwoKICAgIE9jY3VwYW50LnByb3RvdHlwZS5kZW9wID0gZnVuY3Rpb24ocmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5yb29tLmRlb3AodGhpcy5uaWNrLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKTsKICAgIH07CgogICAgT2NjdXBhbnQucHJvdG90eXBlLm1vZGlmeUFmZmlsaWF0aW9uID0gZnVuY3Rpb24oYWZmaWxpYXRpb24sIHJlYXNvbiwgc3VjY2Vzc19jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMucm9vbS5tb2RpZnlBZmZpbGlhdGlvbih0aGlzLmppZCwgYWZmaWxpYXRpb24sIHJlYXNvbiwgc3VjY2Vzc19jYiwgZXJyb3JfY2IpOwogICAgfTsKCiAgICBPY2N1cGFudC5wcm90b3R5cGUuYmFuID0gZnVuY3Rpb24ocmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYikgewogICAgICByZXR1cm4gdGhpcy5yb29tLmJhbih0aGlzLmppZCwgcmVhc29uLCBoYW5kbGVyX2NiLCBlcnJvcl9jYik7CiAgICB9OwoKICAgIE9jY3VwYW50LnByb3RvdHlwZS5tZW1iZXIgPSBmdW5jdGlvbihyZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKSB7CiAgICAgIHJldHVybiB0aGlzLnJvb20ubWVtYmVyKHRoaXMuamlkLCByZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKTsKICAgIH07CgogICAgT2NjdXBhbnQucHJvdG90eXBlLnJldm9rZSA9IGZ1bmN0aW9uKHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpIHsKICAgICAgcmV0dXJuIHRoaXMucm9vbS5yZXZva2UodGhpcy5qaWQsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfTsKCiAgICBPY2N1cGFudC5wcm90b3R5cGUub3duZXIgPSBmdW5jdGlvbihyZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKSB7CiAgICAgIHJldHVybiB0aGlzLnJvb20ub3duZXIodGhpcy5qaWQsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfTsKCiAgICBPY2N1cGFudC5wcm90b3R5cGUuYWRtaW4gPSBmdW5jdGlvbihyZWFzb24sIGhhbmRsZXJfY2IsIGVycm9yX2NiKSB7CiAgICAgIHJldHVybiB0aGlzLnJvb20uYWRtaW4odGhpcy5qaWQsIHJlYXNvbiwgaGFuZGxlcl9jYiwgZXJyb3JfY2IpOwogICAgfTsKCiAgICBPY2N1cGFudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oZGF0YSkgewogICAgICB0aGlzLm5pY2sgPSBkYXRhLm5pY2sgfHwgbnVsbDsKICAgICAgdGhpcy5hZmZpbGlhdGlvbiA9IGRhdGEuYWZmaWxpYXRpb24gfHwgbnVsbDsKICAgICAgdGhpcy5yb2xlID0gZGF0YS5yb2xlIHx8IG51bGw7CiAgICAgIHRoaXMuamlkID0gZGF0YS5qaWQgfHwgbnVsbDsKICAgICAgdGhpcy5zdGF0dXMgPSBkYXRhLnN0YXR1cyB8fCBudWxsOwogICAgICB0aGlzLnNob3cgPSBkYXRhLnNob3cgfHwgbnVsbDsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwoKICAgIHJldHVybiBPY2N1cGFudDsKCiAgfSkoKTsKCn0pLmNhbGwodGhpcyk7CgpkZWZpbmUoInN0cm9waGUubXVjIiwgWyJzdHJvcGhlIl0sIGZ1bmN0aW9uKCl7fSk7CgovKgogIENvcHlyaWdodCAyMDEwLCBGcmFuw6dvaXMgZGUgTWV0eiA8ZnJhbmNvaXNAMm1ldHouZnI+CiovCi8qKgogKiBSb3N0ZXIgUGx1Z2luCiAqIEFsbG93IGVhc2lseSByb3N0ZXIgbWFuYWdlbWVudAogKgogKiAgRmVhdHVyZXMKICogICogR2V0IHJvc3RlciBmcm9tIHNlcnZlcgogKiAgKiBoYW5kbGUgcHJlc2VuY2UKICogICogaGFuZGxlIHJvc3RlciBpcQogKiAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUKICogICogYXV0aG9yaXplL3VuYXV0aG9yaXplCiAqICAqIHJvc3RlciB2ZXJzaW9uaW5nICh4ZXAgMjM3KQogKi8KU3Ryb3BoZS5hZGRDb25uZWN0aW9uUGx1Z2luKCdyb3N0ZXInLAp7CiAgICAvKiogRnVuY3Rpb246IGluaXQKICAgICAqIFBsdWdpbiBpbml0CiAgICAgKgogICAgICogUGFyYW1ldGVyczoKICAgICAqICAgKFN0cm9waGUuQ29ubmVjdGlvbikgY29ubiAtIFN0cm9waGUgY29ubmVjdGlvbgogICAgICovCiAgICBpbml0OiBmdW5jdGlvbihjb25uKQogICAgewogICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24gPSBjb25uOwogICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IFtdOwogICAgICAgIC8qKiBQcm9wZXJ0eTogaXRlbXMKICAgICAgICAgKiAgUm9zdGVyIGl0ZW1zCiAgICAgICAgICogIFsKICAgICAgICAgKiAgICB7CiAgICAgICAgICogICAgICAgIG5hbWUgICAgICAgICA6ICIiLAogICAgICAgICAqICAgICAgICBqaWQgICAgICAgICAgOiAiIiwKICAgICAgICAgKiAgICAgICAgc3Vic2NyaXB0aW9uIDogIiIsCiAgICAgICAgICogICAgICAgIGFzayAgICAgICAgICA6ICIiLAogICAgICAgICAqICAgICAgICBncm91cHMgICAgICAgOiBbIiIsICIiXSwKICAgICAgICAgKiAgICAgICAgcmVzb3VyY2VzICAgIDogewogICAgICAgICAqICAgICAgICAgICAgbXlyZXNvdXJjZSA6IHsKICAgICAgICAgKiAgICAgICAgICAgICAgICBzaG93ICAgOiAiIiwKICAgICAgICAgKiAgICAgICAgICAgICAgICBzdGF0dXMgOiAiIiwKICAgICAgICAgKiAgICAgICAgICAgICAgICBwcmlvcml0eSA6ICIiCiAgICAgICAgICogICAgICAgICAgICB9CiAgICAgICAgICogICAgICAgIH0KICAgICAgICAgKiAgICB9CiAgICAgICAgICogXQogICAgICAgICAqLwogICAgICAgIHRoaXMuaXRlbXMgPSBbXTsKICAgICAgICAvKiogUHJvcGVydHk6IHZlcgogICAgICAgICogY3VycmVudCByb3N0ZXIgcmV2aXNpb24KICAgICAgICAqIGFsd2F5cyBudWxsIGlmIHNlcnZlciBkb2Vzbid0IHN1cHBvcnQgeGVwIDIzNwogICAgICAgICovCiAgICAgICAgdGhpcy52ZXIgPSBudWxsOwogICAgICAgIC8vIE92ZXJyaWRlIHRoZSBjb25uZWN0IGFuZCBhdHRhY2ggbWV0aG9kcyB0byBhbHdheXMgYWRkIHByZXNlbmNlIGFuZCByb3N0ZXIgaGFuZGxlcnMuCiAgICAgICAgLy8gVGhleSBhcmUgcmVtb3ZlZCB3aGVuIHRoZSBjb25uZWN0aW9uIGRpc2Nvbm5lY3RzLCBzbyBtdXN0IGJlIGFkZGVkIG9uIGNvbm5lY3Rpb24uCiAgICAgICAgdmFyIG9sZENhbGxiYWNrLCByb3N0ZXIgPSB0aGlzLCBfY29ubmVjdCA9IGNvbm4uY29ubmVjdCwgX2F0dGFjaCA9IGNvbm4uYXR0YWNoOwogICAgICAgIHZhciBuZXdDYWxsYmFjayA9IGZ1bmN0aW9uKHN0YXR1cykKICAgICAgICB7CiAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gU3Ryb3BoZS5TdGF0dXMuQVRUQUNIRUQgfHwgc3RhdHVzID09IFN0cm9waGUuU3RhdHVzLkNPTk5FQ1RFRCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdHJ5CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgLy8gUHJlc2VuY2Ugc3Vic2NyaXB0aW9uCiAgICAgICAgICAgICAgICAgICAgY29ubi5hZGRIYW5kbGVyKHJvc3Rlci5fb25SZWNlaXZlUHJlc2VuY2UuYmluZChyb3N0ZXIpLCBudWxsLCAncHJlc2VuY2UnLCBudWxsLCBudWxsLCBudWxsKTsKICAgICAgICAgICAgICAgICAgICBjb25uLmFkZEhhbmRsZXIocm9zdGVyLl9vblJlY2VpdmVJUS5iaW5kKHJvc3RlciksIFN0cm9waGUuTlMuUk9TVEVSLCAnaXEnLCAic2V0IiwgbnVsbCwgbnVsbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCAoZSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBTdHJvcGhlLmVycm9yKGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2xkQ2FsbGJhY2sgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgIG9sZENhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGNvbm4uY29ubmVjdCA9IGZ1bmN0aW9uKGppZCwgcGFzcywgY2FsbGJhY2ssIHdhaXQsIGhvbGQpCiAgICAgICAgewogICAgICAgICAgICBvbGRDYWxsYmFjayA9IGNhbGxiYWNrOwogICAgICAgICAgICBpZiAodHlwZW9mIGppZCAgPT0gInVuZGVmaW5lZCIpCiAgICAgICAgICAgICAgICBqaWQgID0gbnVsbDsKICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXNzID09ICJ1bmRlZmluZWQiKQogICAgICAgICAgICAgICAgcGFzcyA9IG51bGw7CiAgICAgICAgICAgIGNhbGxiYWNrID0gbmV3Q2FsbGJhY2s7CiAgICAgICAgICAgIF9jb25uZWN0LmFwcGx5KGNvbm4sIFtqaWQsIHBhc3MsIGNhbGxiYWNrLCB3YWl0LCBob2xkXSk7CiAgICAgICAgfTsKICAgICAgICBjb25uLmF0dGFjaCA9IGZ1bmN0aW9uKGppZCwgc2lkLCByaWQsIGNhbGxiYWNrLCB3YWl0LCBob2xkLCB3aW5kKQogICAgICAgIHsKICAgICAgICAgICAgb2xkQ2FsbGJhY2sgPSBjYWxsYmFjazsKICAgICAgICAgICAgaWYgKHR5cGVvZiBqaWQgPT0gInVuZGVmaW5lZCIpCiAgICAgICAgICAgICAgICBqaWQgPSBudWxsOwogICAgICAgICAgICBpZiAodHlwZW9mIHNpZCA9PSAidW5kZWZpbmVkIikKICAgICAgICAgICAgICAgIHNpZCA9IG51bGw7CiAgICAgICAgICAgIGlmICh0eXBlb2YgcmlkID09ICJ1bmRlZmluZWQiKQogICAgICAgICAgICAgICAgcmlkID0gbnVsbDsKICAgICAgICAgICAgY2FsbGJhY2sgPSBuZXdDYWxsYmFjazsKICAgICAgICAgICAgX2F0dGFjaC5hcHBseShjb25uLCBbamlkLCBzaWQsIHJpZCwgY2FsbGJhY2ssIHdhaXQsIGhvbGQsIHdpbmRdKTsKICAgICAgICB9OwoKICAgICAgICBTdHJvcGhlLmFkZE5hbWVzcGFjZSgnUk9TVEVSX1ZFUicsICd1cm46eG1wcDpmZWF0dXJlczpyb3N0ZXJ2ZXInKTsKICAgICAgICBTdHJvcGhlLmFkZE5hbWVzcGFjZSgnTklDSycsICdodHRwOi8vamFiYmVyLm9yZy9wcm90b2NvbC9uaWNrJyk7CiAgICB9LAogICAgLyoqIEZ1bmN0aW9uOiBzdXBwb3J0VmVyc2lvbmluZwogICAgICogcmV0dXJuIHRydWUgaWYgcm9zdGVyIHZlcnNpb25pbmcgaXMgZW5hYmxlZCBvbiBzZXJ2ZXIKICAgICAqLwogICAgc3VwcG9ydFZlcnNpb25pbmc6IGZ1bmN0aW9uKCkKICAgIHsKICAgICAgICByZXR1cm4gKHRoaXMuX2Nvbm5lY3Rpb24uZmVhdHVyZXMgJiYgdGhpcy5fY29ubmVjdGlvbi5mZWF0dXJlcy5nZXRFbGVtZW50c0J5VGFnTmFtZSgndmVyJykubGVuZ3RoID4gMCk7CiAgICB9LAogICAgLyoqIEZ1bmN0aW9uOiBnZXQKICAgICAqIEdldCBSb3N0ZXIgb24gc2VydmVyCiAgICAgKgogICAgICogUGFyYW1ldGVyczoKICAgICAqICAgKEZ1bmN0aW9uKSB1c2VyQ2FsbGJhY2sgLSBjYWxsYmFjayBvbiByb3N0ZXIgcmVzdWx0CiAgICAgKiAgIChTdHJpbmcpIHZlciAtIGN1cnJlbnQgcmV2IG9mIHJvc3RlcgogICAgICogICAgICAob25seSB1c2VkIGlmIHJvc3RlciB2ZXJzaW9uaW5nIGlzIGVuYWJsZWQpCiAgICAgKiAgIChBcnJheSkgaXRlbXMgLSBpbml0aWFsIGl0ZW1zIG9mIHZlcgogICAgICogICAgICAob25seSB1c2VkIGlmIHJvc3RlciB2ZXJzaW9uaW5nIGlzIGVuYWJsZWQpCiAgICAgKiAgICAgSW4gYnJvd3NlciBjb250ZXh0IHlvdSBjYW4gdXNlIHNlc3Npb25TdG9yYWdlCiAgICAgKiAgICAgdG8gc3RvcmUgeW91ciByb3N0ZXIgaW4ganNvbiAoSlNPTi5zdHJpbmdpZnkoKSkKICAgICAqLwogICAgZ2V0OiBmdW5jdGlvbih1c2VyQ2FsbGJhY2ssIHZlciwgaXRlbXMpCiAgICB7CiAgICAgICAgdmFyIGF0dHJzID0ge3htbG5zOiBTdHJvcGhlLk5TLlJPU1RFUn07CiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydFZlcnNpb25pbmcoKSkKICAgICAgICB7CiAgICAgICAgICAgIC8vIGVtcHR5IHJldiBiZWNhdXNlIGkgd2FudCBhbiByZXYgYXR0cmlidXRlIGluIHRoZSByZXN1bHQKICAgICAgICAgICAgYXR0cnMudmVyID0gdmVyIHx8ICcnOwogICAgICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXMgfHwgW107CiAgICAgICAgfQogICAgICAgIHZhciBpcSA9ICRpcSh7dHlwZTogJ2dldCcsICAnaWQnIDogdGhpcy5fY29ubmVjdGlvbi5nZXRVbmlxdWVJZCgncm9zdGVyJyl9KS5jKCdxdWVyeScsIGF0dHJzKTsKICAgICAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbi5zZW5kSVEoaXEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25SZWNlaXZlUm9zdGVyU3VjY2Vzcy5iaW5kKHRoaXMsIHVzZXJDYWxsYmFjayksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25SZWNlaXZlUm9zdGVyRXJyb3IuYmluZCh0aGlzLCB1c2VyQ2FsbGJhY2spKTsKICAgIH0sCiAgICAvKiogRnVuY3Rpb246IHJlZ2lzdGVyQ2FsbGJhY2sKICAgICAqIHJlZ2lzdGVyIGNhbGxiYWNrIG9uIHJvc3RlciAocHJlc2VuY2UgYW5kIGlxKQogICAgICoKICAgICAqIFBhcmFtZXRlcnM6CiAgICAgKiAgIChGdW5jdGlvbikgY2FsbF9iYWNrCiAgICAgKi8KICAgIHJlZ2lzdGVyQ2FsbGJhY2s6IGZ1bmN0aW9uKGNhbGxfYmFjaykKICAgIHsKICAgICAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYWxsX2JhY2spOwogICAgfSwKICAgIC8qKiBGdW5jdGlvbjogZmluZEl0ZW0KICAgICAqIEZpbmQgaXRlbSBieSBKSUQKICAgICAqCiAgICAgKiBQYXJhbWV0ZXJzOgogICAgICogICAgIChTdHJpbmcpIGppZAogICAgICovCiAgICBmaW5kSXRlbSA6IGZ1bmN0aW9uKGppZCkKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLml0ZW1zW2ldICYmIHRoaXMuaXRlbXNbaV0uamlkID09IGppZCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1tpXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpCiAgICAgICAgewogICAgICAgICAgICBTdHJvcGhlLmVycm9yKGUpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAogICAgLyoqIEZ1bmN0aW9uOiByZW1vdmVJdGVtCiAgICAgKiBSZW1vdmUgaXRlbSBieSBKSUQKICAgICAqCiAgICAgKiBQYXJhbWV0ZXJzOgogICAgICogICAgIChTdHJpbmcpIGppZAogICAgICovCiAgICByZW1vdmVJdGVtIDogZnVuY3Rpb24oamlkKQogICAgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykKICAgICAgICB7CiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1zW2ldICYmIHRoaXMuaXRlbXNbaV0uamlkID09IGppZCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAogICAgLyoqIEZ1bmN0aW9uOiBzdWJzY3JpYmUKICAgICAqIFN1YnNjcmliZSBwcmVzZW5jZQogICAgICoKICAgICAqIFBhcmFtZXRlcnM6CiAgICAgKiAgICAgKFN0cmluZykgamlkCiAgICAgKiAgICAgKFN0cmluZykgbWVzc2FnZSAob3B0aW9uYWwpCiAgICAgKiAgICAgKFN0cmluZykgbmljayAgKG9wdGlvbmFsKQogICAgICovCiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uKGppZCwgbWVzc2FnZSwgbmljaykgewogICAgICAgIHZhciBwcmVzID0gJHByZXMoe3RvOiBqaWQsIHR5cGU6ICJzdWJzY3JpYmUifSk7CiAgICAgICAgaWYgKG1lc3NhZ2UgJiYgbWVzc2FnZSAhPT0gIiIpIHsKICAgICAgICAgICAgcHJlcy5jKCJzdGF0dXMiKS50KG1lc3NhZ2UpLnVwKCk7CiAgICAgICAgfQogICAgICAgIGlmIChuaWNrICYmIG5pY2sgIT09ICIiKSB7CiAgICAgICAgICAgIHByZXMuYygnbmljaycsIHsneG1sbnMnOiBTdHJvcGhlLk5TLk5JQ0t9KS50KG5pY2spLnVwKCk7CiAgICAgICAgfQogICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChwcmVzKTsKICAgIH0sCiAgICAvKiogRnVuY3Rpb246IHVuc3Vic2NyaWJlCiAgICAgKiBVbnN1YnNjcmliZSBwcmVzZW5jZQogICAgICoKICAgICAqIFBhcmFtZXRlcnM6CiAgICAgKiAgICAgKFN0cmluZykgamlkCiAgICAgKiAgICAgKFN0cmluZykgbWVzc2FnZQogICAgICovCiAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24oamlkLCBtZXNzYWdlKQogICAgewogICAgICAgIHZhciBwcmVzID0gJHByZXMoe3RvOiBqaWQsIHR5cGU6ICJ1bnN1YnNjcmliZSJ9KTsKICAgICAgICBpZiAobWVzc2FnZSAmJiBtZXNzYWdlICE9PSAiIikKICAgICAgICAgICAgcHJlcy5jKCJzdGF0dXMiKS50KG1lc3NhZ2UpOwogICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChwcmVzKTsKICAgIH0sCiAgICAvKiogRnVuY3Rpb246IGF1dGhvcml6ZQogICAgICogQXV0aG9yaXplIHByZXNlbmNlIHN1YnNjcmlwdGlvbgogICAgICoKICAgICAqIFBhcmFtZXRlcnM6CiAgICAgKiAgICAgKFN0cmluZykgamlkCiAgICAgKiAgICAgKFN0cmluZykgbWVzc2FnZQogICAgICovCiAgICBhdXRob3JpemU6IGZ1bmN0aW9uKGppZCwgbWVzc2FnZSkKICAgIHsKICAgICAgICB2YXIgcHJlcyA9ICRwcmVzKHt0bzogamlkLCB0eXBlOiAic3Vic2NyaWJlZCJ9KTsKICAgICAgICBpZiAobWVzc2FnZSAmJiBtZXNzYWdlICE9PSAiIikKICAgICAgICAgICAgcHJlcy5jKCJzdGF0dXMiKS50KG1lc3NhZ2UpOwogICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChwcmVzKTsKICAgIH0sCiAgICAvKiogRnVuY3Rpb246IHVuYXV0aG9yaXplCiAgICAgKiBVbmF1dGhvcml6ZSBwcmVzZW5jZSBzdWJzY3JpcHRpb24KICAgICAqCiAgICAgKiBQYXJhbWV0ZXJzOgogICAgICogICAgIChTdHJpbmcpIGppZAogICAgICogICAgIChTdHJpbmcpIG1lc3NhZ2UKICAgICAqLwogICAgdW5hdXRob3JpemU6IGZ1bmN0aW9uKGppZCwgbWVzc2FnZSkKICAgIHsKICAgICAgICB2YXIgcHJlcyA9ICRwcmVzKHt0bzogamlkLCB0eXBlOiAidW5zdWJzY3JpYmVkIn0pOwogICAgICAgIGlmIChtZXNzYWdlICYmIG1lc3NhZ2UgIT09ICIiKQogICAgICAgICAgICBwcmVzLmMoInN0YXR1cyIpLnQobWVzc2FnZSk7CiAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5zZW5kKHByZXMpOwogICAgfSwKICAgIC8qKiBGdW5jdGlvbjogYWRkCiAgICAgKiBBZGQgcm9zdGVyIGl0ZW0KICAgICAqCiAgICAgKiBQYXJhbWV0ZXJzOgogICAgICogICAoU3RyaW5nKSBqaWQgLSBpdGVtIGppZAogICAgICogICAoU3RyaW5nKSBuYW1lIC0gbmFtZQogICAgICogICAoQXJyYXkpIGdyb3VwcwogICAgICogICAoRnVuY3Rpb24pIGNhbGxfYmFjawogICAgICovCiAgICBhZGQ6IGZ1bmN0aW9uKGppZCwgbmFtZSwgZ3JvdXBzLCBjYWxsX2JhY2spCiAgICB7CiAgICAgICAgdmFyIGlxID0gJGlxKHt0eXBlOiAnc2V0J30pLmMoJ3F1ZXJ5Jywge3htbG5zOiBTdHJvcGhlLk5TLlJPU1RFUn0pLmMoJ2l0ZW0nLCB7amlkOiBqaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZX0pOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKQogICAgICAgIHsKICAgICAgICAgICAgaXEuYygnZ3JvdXAnKS50KGdyb3Vwc1tpXSkudXAoKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5zZW5kSVEoaXEsIGNhbGxfYmFjaywgY2FsbF9iYWNrKTsKICAgIH0sCiAgICAvKiogRnVuY3Rpb246IHVwZGF0ZQogICAgICogVXBkYXRlIHJvc3RlciBpdGVtCiAgICAgKgogICAgICogUGFyYW1ldGVyczoKICAgICAqICAgKFN0cmluZykgamlkIC0gaXRlbSBqaWQKICAgICAqICAgKFN0cmluZykgbmFtZSAtIG5hbWUKICAgICAqICAgKEFycmF5KSBncm91cHMKICAgICAqICAgKEZ1bmN0aW9uKSBjYWxsX2JhY2sKICAgICAqLwogICAgdXBkYXRlOiBmdW5jdGlvbihqaWQsIG5hbWUsIGdyb3VwcywgY2FsbF9iYWNrKQogICAgewogICAgICAgIHZhciBpdGVtID0gdGhpcy5maW5kSXRlbShqaWQpOwogICAgICAgIGlmICghaXRlbSkKICAgICAgICB7CiAgICAgICAgICAgIHRocm93ICJpdGVtIG5vdCBmb3VuZCI7CiAgICAgICAgfQogICAgICAgIHZhciBuZXdOYW1lID0gbmFtZSB8fCBpdGVtLm5hbWU7CiAgICAgICAgdmFyIG5ld0dyb3VwcyA9IGdyb3VwcyB8fCBpdGVtLmdyb3VwczsKICAgICAgICB2YXIgaXEgPSAkaXEoe3R5cGU6ICdzZXQnfSkuYygncXVlcnknLCB7eG1sbnM6IFN0cm9waGUuTlMuUk9TVEVSfSkuYygnaXRlbScsIHtqaWQ6IGl0ZW0uamlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5ld05hbWV9KTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0dyb3Vwcy5sZW5ndGg7IGkrKykKICAgICAgICB7CiAgICAgICAgICAgIGlxLmMoJ2dyb3VwJykudChuZXdHcm91cHNbaV0pLnVwKCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0aW9uLnNlbmRJUShpcSwgY2FsbF9iYWNrLCBjYWxsX2JhY2spOwogICAgfSwKICAgIC8qKiBGdW5jdGlvbjogcmVtb3ZlCiAgICAgKiBSZW1vdmUgcm9zdGVyIGl0ZW0KICAgICAqCiAgICAgKiBQYXJhbWV0ZXJzOgogICAgICogICAoU3RyaW5nKSBqaWQgLSBpdGVtIGppZAogICAgICogICAoRnVuY3Rpb24pIGNhbGxfYmFjawogICAgICovCiAgICByZW1vdmU6IGZ1bmN0aW9uKGppZCwgY2FsbF9iYWNrKQogICAgewogICAgICAgIHZhciBpdGVtID0gdGhpcy5maW5kSXRlbShqaWQpOwogICAgICAgIGlmICghaXRlbSkKICAgICAgICB7CiAgICAgICAgICAgIHRocm93ICJpdGVtIG5vdCBmb3VuZCI7CiAgICAgICAgfQogICAgICAgIHZhciBpcSA9ICRpcSh7dHlwZTogJ3NldCd9KS5jKCdxdWVyeScsIHt4bWxuczogU3Ryb3BoZS5OUy5ST1NURVJ9KS5jKCdpdGVtJywge2ppZDogaXRlbS5qaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uOiAicmVtb3ZlIn0pOwogICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZElRKGlxLCBjYWxsX2JhY2ssIGNhbGxfYmFjayk7CiAgICB9LAogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX29uUmVjZWl2ZVJvc3RlclN1Y2Nlc3MKICAgICAqCiAgICAgKi8KICAgIF9vblJlY2VpdmVSb3N0ZXJTdWNjZXNzOiBmdW5jdGlvbih1c2VyQ2FsbGJhY2ssIHN0YW56YSkKICAgIHsKICAgICAgICB0aGlzLl91cGRhdGVJdGVtcyhzdGFuemEpOwogICAgICAgIGlmICh0eXBlb2YgdXNlckNhbGxiYWNrID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIHVzZXJDYWxsYmFjayh0aGlzLml0ZW1zKTsKICAgICAgICB9CiAgICB9LAogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX29uUmVjZWl2ZVJvc3RlckVycm9yCiAgICAgKgogICAgICovCiAgICBfb25SZWNlaXZlUm9zdGVyRXJyb3I6IGZ1bmN0aW9uKHVzZXJDYWxsYmFjaywgc3RhbnphKQogICAgewogICAgICAgIHVzZXJDYWxsYmFjayh0aGlzLml0ZW1zKTsKICAgIH0sCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfb25SZWNlaXZlUHJlc2VuY2UKICAgICAqIEhhbmRsZSBwcmVzZW5jZQogICAgICovCiAgICBfb25SZWNlaXZlUHJlc2VuY2UgOiBmdW5jdGlvbihwcmVzZW5jZSkKICAgIHsKICAgICAgICAvLyBUT0RPOiBmcm9tIGlzIG9wdGlvbmFsCiAgICAgICAgdmFyIGppZCA9IHByZXNlbmNlLmdldEF0dHJpYnV0ZSgnZnJvbScpOwogICAgICAgIHZhciBmcm9tID0gU3Ryb3BoZS5nZXRCYXJlSmlkRnJvbUppZChqaWQpOwogICAgICAgIHZhciBpdGVtID0gdGhpcy5maW5kSXRlbShmcm9tKTsKICAgICAgICAvLyBub3QgaW4gcm9zdGVyCiAgICAgICAgaWYgKCFpdGVtKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHZhciB0eXBlID0gcHJlc2VuY2UuZ2V0QXR0cmlidXRlKCd0eXBlJyk7CiAgICAgICAgaWYgKHR5cGUgPT0gJ3VuYXZhaWxhYmxlJykKICAgICAgICB7CiAgICAgICAgICAgIGRlbGV0ZSBpdGVtLnJlc291cmNlc1tTdHJvcGhlLmdldFJlc291cmNlRnJvbUppZChqaWQpXTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoIXR5cGUpCiAgICAgICAgewogICAgICAgICAgICAvLyBUT0RPOiBhZGQgdGltZXN0YW1wCiAgICAgICAgICAgIGl0ZW0ucmVzb3VyY2VzW1N0cm9waGUuZ2V0UmVzb3VyY2VGcm9tSmlkKGppZCldID0gewogICAgICAgICAgICAgICAgc2hvdyAgICAgOiAocHJlc2VuY2UuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3Nob3cnKS5sZW5ndGggIT09IDApID8gU3Ryb3BoZS5nZXRUZXh0KHByZXNlbmNlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzaG93JylbMF0pIDogIiIsCiAgICAgICAgICAgICAgICBzdGF0dXMgICA6IChwcmVzZW5jZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3RhdHVzJykubGVuZ3RoICE9PSAwKSA/IFN0cm9waGUuZ2V0VGV4dChwcmVzZW5jZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3RhdHVzJylbMF0pIDogIiIsCiAgICAgICAgICAgICAgICBwcmlvcml0eSA6IChwcmVzZW5jZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgncHJpb3JpdHknKS5sZW5ndGggIT09IDApID8gU3Ryb3BoZS5nZXRUZXh0KHByZXNlbmNlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdwcmlvcml0eScpWzBdKSA6ICIiCiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIC8vIFN0YW56YSBpcyBub3QgYSBwcmVzZW5jZSBub3RpZmljYXRpb24uIChJdCdzIHByb2JhYmx5IGEgc3Vic2NyaXB0aW9uIHR5cGUgc3RhbnphLikKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHRoaXMuX2NhbGxfYmFja3ModGhpcy5pdGVtcywgaXRlbSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9LAogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX2NhbGxfYmFja3MKICAgICAqCiAgICAgKi8KICAgIF9jYWxsX2JhY2tzIDogZnVuY3Rpb24oaXRlbXMsIGl0ZW0pCiAgICB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9jYWxsYmFja3MubGVuZ3RoOyBpKyspIC8vIFtdLmZvckVhY2ggbXkgbG92ZSAuLi4KICAgICAgICB7CiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrc1tpXShpdGVtcywgaXRlbSk7CiAgICAgICAgfQogICAgfSwKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF9vblJlY2VpdmVJUQogICAgICogSGFuZGxlIHJvc3RlciBwdXNoLgogICAgICovCiAgICBfb25SZWNlaXZlSVEgOiBmdW5jdGlvbihpcSkKICAgIHsKICAgICAgICB2YXIgaWQgPSBpcS5nZXRBdHRyaWJ1dGUoJ2lkJyk7CiAgICAgICAgdmFyIGZyb20gPSBpcS5nZXRBdHRyaWJ1dGUoJ2Zyb20nKTsKICAgICAgICAvLyBSZWNlaXZpbmcgY2xpZW50IE1VU1QgaWdub3JlIHN0YW56YSB1bmxlc3MgaXQgaGFzIG5vIGZyb20gb3IgZnJvbSA9IHVzZXIncyBKSUQuCiAgICAgICAgaWYgKGZyb20gJiYgZnJvbSAhPT0gIiIgJiYgZnJvbSAhPSB0aGlzLl9jb25uZWN0aW9uLmppZCAmJiBmcm9tICE9IFN0cm9waGUuZ2V0QmFyZUppZEZyb21KaWQodGhpcy5fY29ubmVjdGlvbi5qaWQpKQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB2YXIgaXFyZXN1bHQgPSAkaXEoe3R5cGU6ICdyZXN1bHQnLCBpZDogaWQsIGZyb206IHRoaXMuX2Nvbm5lY3Rpb24uamlkfSk7CiAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5zZW5kKGlxcmVzdWx0KTsKICAgICAgICB0aGlzLl91cGRhdGVJdGVtcyhpcSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9LAogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX3VwZGF0ZUl0ZW1zCiAgICAgKiBVcGRhdGUgaXRlbXMgZnJvbSBpcQogICAgICovCiAgICBfdXBkYXRlSXRlbXMgOiBmdW5jdGlvbihpcSkKICAgIHsKICAgICAgICB2YXIgcXVlcnkgPSBpcS5nZXRFbGVtZW50c0J5VGFnTmFtZSgncXVlcnknKTsKICAgICAgICBpZiAocXVlcnkubGVuZ3RoICE9PSAwKQogICAgICAgIHsKICAgICAgICAgICAgdGhpcy52ZXIgPSBxdWVyeS5pdGVtKDApLmdldEF0dHJpYnV0ZSgndmVyJyk7CiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgICAgU3Ryb3BoZS5mb3JFYWNoQ2hpbGQocXVlcnkuaXRlbSgwKSwgJ2l0ZW0nLAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGl0ZW0pCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc2VsZi5fdXBkYXRlSXRlbShpdGVtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICB0aGlzLl9jYWxsX2JhY2tzKHRoaXMuaXRlbXMpOwogICAgfSwKICAgIC8qKiBQcml2YXRlRnVuY3Rpb246IF91cGRhdGVJdGVtCiAgICAgKiBVcGRhdGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2Ygcm9zdGVyIGl0ZW0KICAgICAqLwogICAgX3VwZGF0ZUl0ZW0gOiBmdW5jdGlvbihpdGVtKQogICAgewogICAgICAgIHZhciBqaWQgICAgICAgICAgID0gaXRlbS5nZXRBdHRyaWJ1dGUoImppZCIpOwogICAgICAgIHZhciBuYW1lICAgICAgICAgID0gaXRlbS5nZXRBdHRyaWJ1dGUoIm5hbWUiKTsKICAgICAgICB2YXIgc3Vic2NyaXB0aW9uICA9IGl0ZW0uZ2V0QXR0cmlidXRlKCJzdWJzY3JpcHRpb24iKTsKICAgICAgICB2YXIgYXNrICAgICAgICAgICA9IGl0ZW0uZ2V0QXR0cmlidXRlKCJhc2siKTsKICAgICAgICB2YXIgZ3JvdXBzICAgICAgICA9IFtdOwogICAgICAgIFN0cm9waGUuZm9yRWFjaENoaWxkKGl0ZW0sICdncm91cCcsCiAgICAgICAgICAgIGZ1bmN0aW9uKGdyb3VwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBncm91cHMucHVzaChTdHJvcGhlLmdldFRleHQoZ3JvdXApKTsKICAgICAgICAgICAgfQogICAgICAgICk7CgogICAgICAgIGlmIChzdWJzY3JpcHRpb24gPT0gInJlbW92ZSIpCiAgICAgICAgewogICAgICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oamlkKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaXRlbSA9IHRoaXMuZmluZEl0ZW0oamlkKTsKICAgICAgICBpZiAoIWl0ZW0pCiAgICAgICAgewogICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goewogICAgICAgICAgICAgICAgbmFtZSAgICAgICAgIDogbmFtZSwKICAgICAgICAgICAgICAgIGppZCAgICAgICAgICA6IGppZCwKICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA6IHN1YnNjcmlwdGlvbiwKICAgICAgICAgICAgICAgIGFzayAgICAgICAgICA6IGFzaywKICAgICAgICAgICAgICAgIGdyb3VwcyAgICAgICA6IGdyb3VwcywKICAgICAgICAgICAgICAgIHJlc291cmNlcyAgICA6IHt9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBpdGVtLm5hbWUgPSBuYW1lOwogICAgICAgICAgICBpdGVtLnN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbjsKICAgICAgICAgICAgaXRlbS5hc2sgPSBhc2s7CiAgICAgICAgICAgIGl0ZW0uZ3JvdXBzID0gZ3JvdXBzOwogICAgICAgIH0KICAgIH0KfSk7CgpkZWZpbmUoInN0cm9waGUucm9zdGVyIiwgWyJzdHJvcGhlIl0sIGZ1bmN0aW9uKCl7fSk7CgovLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMy4zCi8qClBsdWdpbiB0byBpbXBsZW1lbnQgdGhlIHZDYXJkIGV4dGVuc2lvbi4KaHR0cDovL3htcHAub3JnL2V4dGVuc2lvbnMveGVwLTAwNTQuaHRtbAoKQXV0aG9yOiBOYXRoYW4gWm9ybiAobmF0aGFuLnpvcm5AZ21haWwuY29tKQpDb2ZmZWVTY3JpcHQgcG9ydDogQW5kcmVhcyBHdXRoIChndXRoQGRiaXMucnd0aC1hYWNoZW4uZGUpCiovCgovKiBqc2xpbnQgY29uZmlndXJhdGlvbjoKKi8KCi8qIGdsb2JhbCBkb2N1bWVudCwgd2luZG93LCBzZXRUaW1lb3V0LCBjbGVhclRpbWVvdXQsIGNvbnNvbGUsCiAgICBYTUxIdHRwUmVxdWVzdCwgQWN0aXZlWE9iamVjdCwKICAgIEJhc2U2NCwgTUQ1LAogICAgU3Ryb3BoZSwgJGJ1aWxkLCAkbXNnLCAkaXEsICRwcmVzCiovCgp2YXIgYnVpbGRJcTsKCmJ1aWxkSXEgPSBmdW5jdGlvbih0eXBlLCBqaWQsIHZDYXJkRWwpIHsKICB2YXIgaXE7CiAgaXEgPSAkaXEoamlkID8gewogICAgdHlwZTogdHlwZSwKICAgIHRvOiBqaWQKICB9IDogewogICAgdHlwZTogdHlwZQogIH0pOwogIGlxLmMoInZDYXJkIiwgewogICAgeG1sbnM6IFN0cm9waGUuTlMuVkNBUkQKICB9KTsKICBpZiAodkNhcmRFbCkgewogICAgaXEuY25vZGUodkNhcmRFbCk7CiAgfQogIHJldHVybiBpcTsKfTsKClN0cm9waGUuYWRkQ29ubmVjdGlvblBsdWdpbigndmNhcmQnLCB7CiAgX2Nvbm5lY3Rpb246IG51bGwsCiAgaW5pdDogZnVuY3Rpb24oY29ubikgewogICAgdGhpcy5fY29ubmVjdGlvbiA9IGNvbm47CiAgICByZXR1cm4gU3Ryb3BoZS5hZGROYW1lc3BhY2UoJ1ZDQVJEJywgJ3ZjYXJkLXRlbXAnKTsKICB9LAogIC8qRnVuY3Rpb24KICAgIFJldHJpZXZlIGEgdkNhcmQgZm9yIGEgSklEL0VudGl0eQogICAgUGFyYW1ldGVyczoKICAgIChGdW5jdGlvbikgaGFuZGxlcl9jYiAtIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB1c2VkIHRvIGhhbmRsZSB0aGUgcmVxdWVzdC4KICAgIChTdHJpbmcpIGppZCAtIG9wdGlvbmFsIC0gVGhlIG5hbWUgb2YgdGhlIGVudGl0eSB0byByZXF1ZXN0IHRoZSB2Q2FyZAogICAgICAgSWYgbm8gamlkIGlzIGdpdmVuLCB0aGlzIGZ1bmN0aW9uIHJldHJpZXZlcyB0aGUgY3VycmVudCB1c2VyJ3MgdmNhcmQuCiAgKi8KCiAgZ2V0OiBmdW5jdGlvbihoYW5kbGVyX2NiLCBqaWQsIGVycm9yX2NiKSB7CiAgICB2YXIgaXE7CiAgICBpcSA9IGJ1aWxkSXEoImdldCIsIGppZCk7CiAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbi5zZW5kSVEoaXEsIGhhbmRsZXJfY2IsIGVycm9yX2NiKTsKICB9LAogIC8qIEZ1bmN0aW9uCiAgICAgIFNldCBhbiBlbnRpdHkncyB2Q2FyZC4KICAqLwoKICBzZXQ6IGZ1bmN0aW9uKGhhbmRsZXJfY2IsIHZDYXJkRWwsIGppZCwgZXJyb3JfY2IpIHsKICAgIHZhciBpcTsKICAgIGlxID0gYnVpbGRJcSgic2V0IiwgamlkLCB2Q2FyZEVsKTsKICAgIHJldHVybiB0aGlzLl9jb25uZWN0aW9uLnNlbmRJUShpcSwgaGFuZGxlcl9jYiwgZXJyb3JfcmIpOwogIH0KfSk7CgpkZWZpbmUoInN0cm9waGUudmNhcmQiLCBbInN0cm9waGUiXSwgZnVuY3Rpb24oKXt9KTsKCi8qCiAgQ29weXJpZ2h0IDIwMTAsIEZyYW7Dp29pcyBkZSBNZXR6IDxmcmFuY29pc0AybWV0ei5mcj4KKi8KCi8qKgogKiBEaXNjbyBTdHJvcGhlIFBsdWdpbgogKiBJbXBsZW1lbnQgaHR0cDovL3htcHAub3JnL2V4dGVuc2lvbnMveGVwLTAwMzAuaHRtbAogKiBUT0RPOiBtYW5hZ2Ugbm9kZSBoaWVyYXJjaGllcywgYW5kIG5vZGUgb24gaW5mbyByZXF1ZXN0CiAqLwpTdHJvcGhlLmFkZENvbm5lY3Rpb25QbHVnaW4oJ2Rpc2NvJywKewogICAgX2Nvbm5lY3Rpb246IG51bGwsCiAgICBfaWRlbnRpdGllcyA6IFtdLAogICAgX2ZlYXR1cmVzIDogW10sCiAgICBfaXRlbXMgOiBbXSwKICAgIC8qKiBGdW5jdGlvbjogaW5pdAogICAgICogUGx1Z2luIGluaXQKICAgICAqCiAgICAgKiBQYXJhbWV0ZXJzOgogICAgICogICAoU3Ryb3BoZS5Db25uZWN0aW9uKSBjb25uIC0gU3Ryb3BoZSBjb25uZWN0aW9uCiAgICAgKi8KICAgIGluaXQ6IGZ1bmN0aW9uKGNvbm4pCiAgICB7CiAgICB0aGlzLl9jb25uZWN0aW9uID0gY29ubjsKICAgICAgICB0aGlzLl9pZGVudGl0aWVzID0gW107CiAgICAgICAgdGhpcy5fZmVhdHVyZXMgICA9IFtdOwogICAgICAgIHRoaXMuX2l0ZW1zICAgICAgPSBbXTsKICAgICAgICAvLyBkaXNjbyBpbmZvCiAgICAgICAgY29ubi5hZGRIYW5kbGVyKHRoaXMuX29uRGlzY29JbmZvLmJpbmQodGhpcyksIFN0cm9waGUuTlMuRElTQ09fSU5GTywgJ2lxJywgJ2dldCcsIG51bGwsIG51bGwpOwogICAgICAgIC8vIGRpc2NvIGl0ZW1zCiAgICAgICAgY29ubi5hZGRIYW5kbGVyKHRoaXMuX29uRGlzY29JdGVtcy5iaW5kKHRoaXMpLCBTdHJvcGhlLk5TLkRJU0NPX0lURU1TLCAnaXEnLCAnZ2V0JywgbnVsbCwgbnVsbCk7CiAgICB9LAogICAgLyoqIEZ1bmN0aW9uOiBhZGRJZGVudGl0eQogICAgICogU2VlIGh0dHA6Ly94bXBwLm9yZy9yZWdpc3RyYXIvZGlzY28tY2F0ZWdvcmllcy5odG1sCiAgICAgKiBQYXJhbWV0ZXJzOgogICAgICogICAoU3RyaW5nKSBjYXRlZ29yeSAtIGNhdGVnb3J5IG9mIGlkZW50aXR5IChsaWtlIGNsaWVudCwgYXV0b21hdGlvbiwgZXRjIC4uLikKICAgICAqICAgKFN0cmluZykgdHlwZSAtIHR5cGUgb2YgaWRlbnRpdHkgKGxpa2UgcGMsIHdlYiwgYm90ICwgZXRjIC4uLikKICAgICAqICAgKFN0cmluZykgbmFtZSAtIG5hbWUgb2YgaWRlbnRpdHkgaW4gbmF0dXJhbCBsYW5ndWFnZQogICAgICogICAoU3RyaW5nKSBsYW5nIC0gbGFuZyBvZiBuYW1lIHBhcmFtZXRlcgogICAgICoKICAgICAqIFJldHVybnM6CiAgICAgKiAgIEJvb2xlYW4KICAgICAqLwogICAgYWRkSWRlbnRpdHk6IGZ1bmN0aW9uKGNhdGVnb3J5LCB0eXBlLCBuYW1lLCBsYW5nKQogICAgewogICAgICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLl9pZGVudGl0aWVzLmxlbmd0aDsgaSsrKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKHRoaXMuX2lkZW50aXRpZXNbaV0uY2F0ZWdvcnkgPT0gY2F0ZWdvcnkgJiYKICAgICAgICAgICAgICAgIHRoaXMuX2lkZW50aXRpZXNbaV0udHlwZSA9PSB0eXBlICYmCiAgICAgICAgICAgICAgICB0aGlzLl9pZGVudGl0aWVzW2ldLm5hbWUgPT0gbmFtZSAmJgogICAgICAgICAgICAgICAgdGhpcy5faWRlbnRpdGllc1tpXS5sYW5nID09IGxhbmcpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLl9pZGVudGl0aWVzLnB1c2goe2NhdGVnb3J5OiBjYXRlZ29yeSwgdHlwZTogdHlwZSwgbmFtZTogbmFtZSwgbGFuZzogbGFuZ30pOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfSwKICAgIC8qKiBGdW5jdGlvbjogYWRkRmVhdHVyZQogICAgICoKICAgICAqIFBhcmFtZXRlcnM6CiAgICAgKiAgIChTdHJpbmcpIHZhcl9uYW1lIC0gZmVhdHVyZSBuYW1lIChsaWtlIGphYmJlcjppcTp2ZXJzaW9uKQogICAgICoKICAgICAqIFJldHVybnM6CiAgICAgKiAgIGJvb2xlYW4KICAgICAqLwogICAgYWRkRmVhdHVyZTogZnVuY3Rpb24odmFyX25hbWUpCiAgICB7CiAgICAgICAgZm9yICh2YXIgaT0wOyBpPHRoaXMuX2ZlYXR1cmVzLmxlbmd0aDsgaSsrKQogICAgICAgIHsKICAgICAgICAgICAgIGlmICh0aGlzLl9mZWF0dXJlc1tpXSA9PSB2YXJfbmFtZSkKICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHRoaXMuX2ZlYXR1cmVzLnB1c2godmFyX25hbWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfSwKICAgIC8qKiBGdW5jdGlvbjogcmVtb3ZlRmVhdHVyZQogICAgICoKICAgICAqIFBhcmFtZXRlcnM6CiAgICAgKiAgIChTdHJpbmcpIHZhcl9uYW1lIC0gZmVhdHVyZSBuYW1lIChsaWtlIGphYmJlcjppcTp2ZXJzaW9uKQogICAgICoKICAgICAqIFJldHVybnM6CiAgICAgKiAgIGJvb2xlYW4KICAgICAqLwogICAgcmVtb3ZlRmVhdHVyZTogZnVuY3Rpb24odmFyX25hbWUpCiAgICB7CiAgICAgICAgZm9yICh2YXIgaT0wOyBpPHRoaXMuX2ZlYXR1cmVzLmxlbmd0aDsgaSsrKQogICAgICAgIHsKICAgICAgICAgICAgIGlmICh0aGlzLl9mZWF0dXJlc1tpXSA9PT0gdmFyX25hbWUpewogICAgICAgICAgICAgICAgIHRoaXMuX2ZlYXR1cmVzLnNwbGljZShpLDEpCiAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0sCiAgICAvKiogRnVuY3Rpb246IGFkZEl0ZW0KICAgICAqCiAgICAgKiBQYXJhbWV0ZXJzOgogICAgICogICAoU3RyaW5nKSBqaWQKICAgICAqICAgKFN0cmluZykgbmFtZQogICAgICogICAoU3RyaW5nKSBub2RlCiAgICAgKiAgIChGdW5jdGlvbikgY2FsbF9iYWNrCiAgICAgKgogICAgICogUmV0dXJuczoKICAgICAqICAgYm9vbGVhbgogICAgICovCiAgICBhZGRJdGVtOiBmdW5jdGlvbihqaWQsIG5hbWUsIG5vZGUsIGNhbGxfYmFjaykKICAgIHsKICAgICAgICBpZiAobm9kZSAmJiAhY2FsbF9iYWNrKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgdGhpcy5faXRlbXMucHVzaCh7amlkOiBqaWQsIG5hbWU6IG5hbWUsIG5vZGU6IG5vZGUsIGNhbGxfYmFjazogY2FsbF9iYWNrfSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9LAogICAgLyoqIEZ1bmN0aW9uOiBpbmZvCiAgICAgKiBJbmZvIHF1ZXJ5CiAgICAgKgogICAgICogUGFyYW1ldGVyczoKICAgICAqICAgKEZ1bmN0aW9uKSBjYWxsX2JhY2sKICAgICAqICAgKFN0cmluZykgamlkCiAgICAgKiAgIChTdHJpbmcpIG5vZGUKICAgICAqLwogICAgaW5mbzogZnVuY3Rpb24oamlkLCBub2RlLCBzdWNjZXNzLCBlcnJvciwgdGltZW91dCkKICAgIHsKICAgICAgICB2YXIgYXR0cnMgPSB7eG1sbnM6IFN0cm9waGUuTlMuRElTQ09fSU5GT307CiAgICAgICAgaWYgKG5vZGUpCiAgICAgICAgICAgIGF0dHJzLm5vZGUgPSBub2RlOwoKICAgICAgICB2YXIgaW5mbyA9ICRpcSh7ZnJvbTp0aGlzLl9jb25uZWN0aW9uLmppZCwKICAgICAgICAgICAgICAgICAgICAgICAgIHRvOmppZCwgdHlwZTonZ2V0J30pLmMoJ3F1ZXJ5JywgYXR0cnMpOwogICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZElRKGluZm8sIHN1Y2Nlc3MsIGVycm9yLCB0aW1lb3V0KTsKICAgIH0sCiAgICAvKiogRnVuY3Rpb246IGl0ZW1zCiAgICAgKiBJdGVtcyBxdWVyeQogICAgICoKICAgICAqIFBhcmFtZXRlcnM6CiAgICAgKiAgIChGdW5jdGlvbikgY2FsbF9iYWNrCiAgICAgKiAgIChTdHJpbmcpIGppZAogICAgICogICAoU3RyaW5nKSBub2RlCiAgICAgKi8KICAgIGl0ZW1zOiBmdW5jdGlvbihqaWQsIG5vZGUsIHN1Y2Nlc3MsIGVycm9yLCB0aW1lb3V0KQogICAgewogICAgICAgIHZhciBhdHRycyA9IHt4bWxuczogU3Ryb3BoZS5OUy5ESVNDT19JVEVNU307CiAgICAgICAgaWYgKG5vZGUpCiAgICAgICAgICAgIGF0dHJzLm5vZGUgPSBub2RlOwoKICAgICAgICB2YXIgaXRlbXMgPSAkaXEoe2Zyb206dGhpcy5fY29ubmVjdGlvbi5qaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICB0bzpqaWQsIHR5cGU6J2dldCd9KS5jKCdxdWVyeScsIGF0dHJzKTsKICAgICAgICB0aGlzLl9jb25uZWN0aW9uLnNlbmRJUShpdGVtcywgc3VjY2VzcywgZXJyb3IsIHRpbWVvdXQpOwogICAgfSwKCiAgICAvKiogUHJpdmF0ZUZ1bmN0aW9uOiBfYnVpbGRJUVJlc3VsdAogICAgICovCiAgICBfYnVpbGRJUVJlc3VsdDogZnVuY3Rpb24oc3RhbnphLCBxdWVyeV9hdHRycykKICAgIHsKICAgICAgICB2YXIgaWQgICA9ICBzdGFuemEuZ2V0QXR0cmlidXRlKCdpZCcpOwogICAgICAgIHZhciBmcm9tID0gc3RhbnphLmdldEF0dHJpYnV0ZSgnZnJvbScpOwogICAgICAgIHZhciBpcXJlc3VsdCA9ICRpcSh7dHlwZTogJ3Jlc3VsdCcsIGlkOiBpZH0pOwoKICAgICAgICBpZiAoZnJvbSAhPT0gbnVsbCkgewogICAgICAgICAgICBpcXJlc3VsdC5hdHRycyh7dG86IGZyb219KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBpcXJlc3VsdC5jKCdxdWVyeScsIHF1ZXJ5X2F0dHJzKTsKICAgIH0sCgogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX29uRGlzY29JbmZvCiAgICAgKiBDYWxsZWQgd2hlbiByZWNlaXZlIGluZm8gcmVxdWVzdAogICAgICovCiAgICBfb25EaXNjb0luZm86IGZ1bmN0aW9uKHN0YW56YSkKICAgIHsKICAgICAgICB2YXIgbm9kZSA9IHN0YW56YS5nZXRFbGVtZW50c0J5VGFnTmFtZSgncXVlcnknKVswXS5nZXRBdHRyaWJ1dGUoJ25vZGUnKTsKICAgICAgICB2YXIgYXR0cnMgPSB7eG1sbnM6IFN0cm9waGUuTlMuRElTQ09fSU5GT307CiAgICAgICAgaWYgKG5vZGUpCiAgICAgICAgewogICAgICAgICAgICBhdHRycy5ub2RlID0gbm9kZTsKICAgICAgICB9CiAgICAgICAgdmFyIGlxcmVzdWx0ID0gdGhpcy5fYnVpbGRJUVJlc3VsdChzdGFuemEsIGF0dHJzKTsKICAgICAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5faWRlbnRpdGllcy5sZW5ndGg7IGkrKykKICAgICAgICB7CiAgICAgICAgICAgIHZhciBhdHRycyA9IHtjYXRlZ29yeTogdGhpcy5faWRlbnRpdGllc1tpXS5jYXRlZ29yeSwKICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgOiB0aGlzLl9pZGVudGl0aWVzW2ldLnR5cGV9OwogICAgICAgICAgICBpZiAodGhpcy5faWRlbnRpdGllc1tpXS5uYW1lKQogICAgICAgICAgICAgICAgYXR0cnMubmFtZSA9IHRoaXMuX2lkZW50aXRpZXNbaV0ubmFtZTsKICAgICAgICAgICAgaWYgKHRoaXMuX2lkZW50aXRpZXNbaV0ubGFuZykKICAgICAgICAgICAgICAgIGF0dHJzWyd4bWw6bGFuZyddID0gdGhpcy5faWRlbnRpdGllc1tpXS5sYW5nOwogICAgICAgICAgICBpcXJlc3VsdC5jKCdpZGVudGl0eScsIGF0dHJzKS51cCgpOwogICAgICAgIH0KICAgICAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5fZmVhdHVyZXMubGVuZ3RoOyBpKyspCiAgICAgICAgewogICAgICAgICAgICBpcXJlc3VsdC5jKCdmZWF0dXJlJywgeyd2YXInOnRoaXMuX2ZlYXR1cmVzW2ldfSkudXAoKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5zZW5kKGlxcmVzdWx0LnRyZWUoKSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9LAogICAgLyoqIFByaXZhdGVGdW5jdGlvbjogX29uRGlzY29JdGVtcwogICAgICogQ2FsbGVkIHdoZW4gcmVjZWl2ZSBpdGVtcyByZXF1ZXN0CiAgICAgKi8KICAgIF9vbkRpc2NvSXRlbXM6IGZ1bmN0aW9uKHN0YW56YSkKICAgIHsKICAgICAgICB2YXIgcXVlcnlfYXR0cnMgPSB7eG1sbnM6IFN0cm9waGUuTlMuRElTQ09fSVRFTVN9OwogICAgICAgIHZhciBub2RlID0gc3RhbnphLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdxdWVyeScpWzBdLmdldEF0dHJpYnV0ZSgnbm9kZScpOwogICAgICAgIGlmIChub2RlKQogICAgICAgIHsKICAgICAgICAgICAgcXVlcnlfYXR0cnMubm9kZSA9IG5vZGU7CiAgICAgICAgICAgIHZhciBpdGVtcyA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2l0ZW1zLmxlbmd0aDsgaSsrKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXRlbXNbaV0ubm9kZSA9PSBub2RlKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gdGhpcy5faXRlbXNbaV0uY2FsbF9iYWNrKHN0YW56YSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5faXRlbXM7CiAgICAgICAgfQogICAgICAgIHZhciBpcXJlc3VsdCA9IHRoaXMuX2J1aWxkSVFSZXN1bHQoc3RhbnphLCBxdWVyeV9hdHRycyk7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykKICAgICAgICB7CiAgICAgICAgICAgIHZhciBhdHRycyA9IHtqaWQ6ICBpdGVtc1tpXS5qaWR9OwogICAgICAgICAgICBpZiAoaXRlbXNbaV0ubmFtZSkKICAgICAgICAgICAgICAgIGF0dHJzLm5hbWUgPSBpdGVtc1tpXS5uYW1lOwogICAgICAgICAgICBpZiAoaXRlbXNbaV0ubm9kZSkKICAgICAgICAgICAgICAgIGF0dHJzLm5vZGUgPSBpdGVtc1tpXS5ub2RlOwogICAgICAgICAgICBpcXJlc3VsdC5jKCdpdGVtJywgYXR0cnMpLnVwKCk7CiAgICAgICAgfQogICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChpcXJlc3VsdC50cmVlKCkpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9KTsKCmRlZmluZSgic3Ryb3BoZS5kaXNjbyIsIFsic3Ryb3BoZSJdLCBmdW5jdGlvbigpe30pOwoKZGVmaW5lKCJjb252ZXJzZS1kZXBlbmRlbmNpZXMiLCBbCiAgICAianF1ZXJ5IiwKICAgICJ1dGlscyIsCiAgICAibW9tZW50IiwKICAgICJsb2NhbGVzIiwKICAgICJiYWNrYm9uZS5icm93c2VyU3RvcmFnZSIsCiAgICAiYmFja2JvbmUub3ZlcnZpZXciLAogICAgImpxdWVyeS5icm93c2VyIiwKICAgICJ0eXBlYWhlYWQiLAogICAgInN0cm9waGUiLAogICAgInN0cm9waGUubXVjIiwKICAgICJzdHJvcGhlLnJvc3RlciIsCiAgICAic3Ryb3BoZS52Y2FyZCIsCiAgICAic3Ryb3BoZS5kaXNjbyIKXSwgZnVuY3Rpb24oJCwgdXRpbHMsIG1vbWVudCkgewogICAgcmV0dXJuIHsKICAgICAgICAnalF1ZXJ5JzogJCwKICAgICAgICAnb3RyJzogdW5kZWZpbmVkLAogICAgICAgICdtb21lbnQnOiBtb21lbnQsCiAgICAgICAgJ3V0aWxzJzogdXRpbHMKICAgIH07Cn0pOwoKLyoqCiAqIEBsaWNlbnNlIFJlcXVpcmVKUyB0ZXh0IDIuMC4xMiBDb3B5cmlnaHQgKGMpIDIwMTAtMjAxNCwgVGhlIERvam8gRm91bmRhdGlvbiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKiBBdmFpbGFibGUgdmlhIHRoZSBNSVQgb3IgbmV3IEJTRCBsaWNlbnNlLgogKiBzZWU6IGh0dHA6Ly9naXRodWIuY29tL3JlcXVpcmVqcy90ZXh0IGZvciBkZXRhaWxzCiAqLwovKmpzbGludCByZWdleHA6IHRydWUgKi8KLypnbG9iYWwgcmVxdWlyZSwgWE1MSHR0cFJlcXVlc3QsIEFjdGl2ZVhPYmplY3QsCiAgZGVmaW5lLCB3aW5kb3csIHByb2Nlc3MsIFBhY2thZ2VzLAogIGphdmEsIGxvY2F0aW9uLCBDb21wb25lbnRzLCBGaWxlVXRpbHMgKi8KCmRlZmluZSgndGV4dCcsWydtb2R1bGUnXSwgZnVuY3Rpb24gKG1vZHVsZSkgewogICAgCgogICAgdmFyIHRleHQsIGZzLCBDYywgQ2ksIHhwY0lzV2luZG93cywKICAgICAgICBwcm9nSWRzID0gWydNc3htbDIuWE1MSFRUUCcsICdNaWNyb3NvZnQuWE1MSFRUUCcsICdNc3htbDIuWE1MSFRUUC40LjAnXSwKICAgICAgICB4bWxSZWdFeHAgPSAvXlxzKjxcP3htbChccykrdmVyc2lvbj1bXCdcIl0oXGQpKi4oXGQpKltcJ1wiXShccykqXD8+L2ltLAogICAgICAgIGJvZHlSZWdFeHAgPSAvPGJvZHlbXj5dKj5ccyooW1xzXFNdKylccyo8XC9ib2R5Pi9pbSwKICAgICAgICBoYXNMb2NhdGlvbiA9IHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24uaHJlZiwKICAgICAgICBkZWZhdWx0UHJvdG9jb2wgPSBoYXNMb2NhdGlvbiAmJiBsb2NhdGlvbi5wcm90b2NvbCAmJiBsb2NhdGlvbi5wcm90b2NvbC5yZXBsYWNlKC9cOi8sICcnKSwKICAgICAgICBkZWZhdWx0SG9zdE5hbWUgPSBoYXNMb2NhdGlvbiAmJiBsb2NhdGlvbi5ob3N0bmFtZSwKICAgICAgICBkZWZhdWx0UG9ydCA9IGhhc0xvY2F0aW9uICYmIChsb2NhdGlvbi5wb3J0IHx8IHVuZGVmaW5lZCksCiAgICAgICAgYnVpbGRNYXAgPSB7fSwKICAgICAgICBtYXN0ZXJDb25maWcgPSAobW9kdWxlLmNvbmZpZyAmJiBtb2R1bGUuY29uZmlnKCkpIHx8IHt9OwoKICAgIHRleHQgPSB7CiAgICAgICAgdmVyc2lvbjogJzIuMC4xMicsCgogICAgICAgIHN0cmlwOiBmdW5jdGlvbiAoY29udGVudCkgewogICAgICAgICAgICAvL1N0cmlwcyA8P3htbCAuLi4/PiBkZWNsYXJhdGlvbnMgc28gdGhhdCBleHRlcm5hbCBTVkcgYW5kIFhNTAogICAgICAgICAgICAvL2RvY3VtZW50cyBjYW4gYmUgYWRkZWQgdG8gYSBkb2N1bWVudCB3aXRob3V0IHdvcnJ5LiBBbHNvLCBpZiB0aGUgc3RyaW5nCiAgICAgICAgICAgIC8vaXMgYW4gSFRNTCBkb2N1bWVudCwgb25seSB0aGUgcGFydCBpbnNpZGUgdGhlIGJvZHkgdGFnIGlzIHJldHVybmVkLgogICAgICAgICAgICBpZiAoY29udGVudCkgewogICAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSh4bWxSZWdFeHAsICIiKTsKICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gY29udGVudC5tYXRjaChib2R5UmVnRXhwKTsKICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IG1hdGNoZXNbMV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb250ZW50ID0gIiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7CiAgICAgICAgfSwKCiAgICAgICAganNFc2NhcGU6IGZ1bmN0aW9uIChjb250ZW50KSB7CiAgICAgICAgICAgIHJldHVybiBjb250ZW50LnJlcGxhY2UoLyhbJ1xcXSkvZywgJ1xcJDEnKQogICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcZl0vZywgIlxcZiIpCiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xiXS9nLCAiXFxiIikKICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXG5dL2csICJcXG4iKQogICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcdF0vZywgIlxcdCIpCiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xyXS9nLCAiXFxyIikKICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXHUyMDI4XS9nLCAiXFx1MjAyOCIpCiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1x1MjAyOV0vZywgIlxcdTIwMjkiKTsKICAgICAgICB9LAoKICAgICAgICBjcmVhdGVYaHI6IG1hc3RlckNvbmZpZy5jcmVhdGVYaHIgfHwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvL1dvdWxkIGxvdmUgdG8gZHVtcCB0aGUgQWN0aXZlWCBjcmFwIGluIGhlcmUuIE5lZWQgSUUgNiB0byBkaWUgZmlyc3QuCiAgICAgICAgICAgIHZhciB4aHIsIGksIHByb2dJZDsKICAgICAgICAgICAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgQWN0aXZlWE9iamVjdCAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAzOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICBwcm9nSWQgPSBwcm9nSWRzW2ldOwogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHhociA9IG5ldyBBY3RpdmVYT2JqZWN0KHByb2dJZCk7CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge30KCiAgICAgICAgICAgICAgICAgICAgaWYgKHhocikgewogICAgICAgICAgICAgICAgICAgICAgICBwcm9nSWRzID0gW3Byb2dJZF07ICAvLyBzbyBmYXN0ZXIgbmV4dCB0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHhocjsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBQYXJzZXMgYSByZXNvdXJjZSBuYW1lIGludG8gaXRzIGNvbXBvbmVudCBwYXJ0cy4gUmVzb3VyY2UgbmFtZXMKICAgICAgICAgKiBsb29rIGxpa2U6IG1vZHVsZS9uYW1lLmV4dCFzdHJpcCwgd2hlcmUgdGhlICFzdHJpcCBwYXJ0IGlzCiAgICAgICAgICogb3B0aW9uYWwuCiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgdGhlIHJlc291cmNlIG5hbWUKICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSB3aXRoIHByb3BlcnRpZXMgIm1vZHVsZU5hbWUiLCAiZXh0IiBhbmQgInN0cmlwIgogICAgICAgICAqIHdoZXJlIHN0cmlwIGlzIGEgYm9vbGVhbi4KICAgICAgICAgKi8KICAgICAgICBwYXJzZU5hbWU6IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIHZhciBtb2ROYW1lLCBleHQsIHRlbXAsCiAgICAgICAgICAgICAgICBzdHJpcCA9IGZhbHNlLAogICAgICAgICAgICAgICAgaW5kZXggPSBuYW1lLmluZGV4T2YoIi4iKSwKICAgICAgICAgICAgICAgIGlzUmVsYXRpdmUgPSBuYW1lLmluZGV4T2YoJy4vJykgPT09IDAgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLmluZGV4T2YoJy4uLycpID09PSAwOwoKICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSAmJiAoIWlzUmVsYXRpdmUgfHwgaW5kZXggPiAxKSkgewogICAgICAgICAgICAgICAgbW9kTmFtZSA9IG5hbWUuc3Vic3RyaW5nKDAsIGluZGV4KTsKICAgICAgICAgICAgICAgIGV4dCA9IG5hbWUuc3Vic3RyaW5nKGluZGV4ICsgMSwgbmFtZS5sZW5ndGgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbW9kTmFtZSA9IG5hbWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRlbXAgPSBleHQgfHwgbW9kTmFtZTsKICAgICAgICAgICAgaW5kZXggPSB0ZW1wLmluZGV4T2YoIiEiKTsKICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICAgICAgICAgICAgLy9QdWxsIG9mZiB0aGUgc3RyaXAgYXJnLgogICAgICAgICAgICAgICAgc3RyaXAgPSB0ZW1wLnN1YnN0cmluZyhpbmRleCArIDEpID09PSAic3RyaXAiOwogICAgICAgICAgICAgICAgdGVtcCA9IHRlbXAuc3Vic3RyaW5nKDAsIGluZGV4KTsKICAgICAgICAgICAgICAgIGlmIChleHQpIHsKICAgICAgICAgICAgICAgICAgICBleHQgPSB0ZW1wOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBtb2ROYW1lID0gdGVtcDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IG1vZE5hbWUsCiAgICAgICAgICAgICAgICBleHQ6IGV4dCwKICAgICAgICAgICAgICAgIHN0cmlwOiBzdHJpcAogICAgICAgICAgICB9OwogICAgICAgIH0sCgogICAgICAgIHhkUmVnRXhwOiAvXigoXHcrKVw6KT9cL1wvKFteXC9cXF0rKS8sCgogICAgICAgIC8qKgogICAgICAgICAqIElzIGFuIFVSTCBvbiBhbm90aGVyIGRvbWFpbi4gT25seSB3b3JrcyBmb3IgYnJvd3NlciB1c2UsIHJldHVybnMKICAgICAgICAgKiBmYWxzZSBpbiBub24tYnJvd3NlciBlbnZpcm9ubWVudHMuIE9ubHkgdXNlZCB0byBrbm93IGlmIGFuCiAgICAgICAgICogb3B0aW1pemVkIC5qcyB2ZXJzaW9uIG9mIGEgdGV4dCByZXNvdXJjZSBzaG91bGQgYmUgbG9hZGVkCiAgICAgICAgICogaW5zdGVhZC4KICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsCiAgICAgICAgICogQHJldHVybnMgQm9vbGVhbgogICAgICAgICAqLwogICAgICAgIHVzZVhocjogZnVuY3Rpb24gKHVybCwgcHJvdG9jb2wsIGhvc3RuYW1lLCBwb3J0KSB7CiAgICAgICAgICAgIHZhciB1UHJvdG9jb2wsIHVIb3N0TmFtZSwgdVBvcnQsCiAgICAgICAgICAgICAgICBtYXRjaCA9IHRleHQueGRSZWdFeHAuZXhlYyh1cmwpOwogICAgICAgICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB1UHJvdG9jb2wgPSBtYXRjaFsyXTsKICAgICAgICAgICAgdUhvc3ROYW1lID0gbWF0Y2hbM107CgogICAgICAgICAgICB1SG9zdE5hbWUgPSB1SG9zdE5hbWUuc3BsaXQoJzonKTsKICAgICAgICAgICAgdVBvcnQgPSB1SG9zdE5hbWVbMV07CiAgICAgICAgICAgIHVIb3N0TmFtZSA9IHVIb3N0TmFtZVswXTsKCiAgICAgICAgICAgIHJldHVybiAoIXVQcm90b2NvbCB8fCB1UHJvdG9jb2wgPT09IHByb3RvY29sKSAmJgogICAgICAgICAgICAgICAgICAgKCF1SG9zdE5hbWUgfHwgdUhvc3ROYW1lLnRvTG93ZXJDYXNlKCkgPT09IGhvc3RuYW1lLnRvTG93ZXJDYXNlKCkpICYmCiAgICAgICAgICAgICAgICAgICAoKCF1UG9ydCAmJiAhdUhvc3ROYW1lKSB8fCB1UG9ydCA9PT0gcG9ydCk7CiAgICAgICAgfSwKCiAgICAgICAgZmluaXNoTG9hZDogZnVuY3Rpb24gKG5hbWUsIHN0cmlwLCBjb250ZW50LCBvbkxvYWQpIHsKICAgICAgICAgICAgY29udGVudCA9IHN0cmlwID8gdGV4dC5zdHJpcChjb250ZW50KSA6IGNvbnRlbnQ7CiAgICAgICAgICAgIGlmIChtYXN0ZXJDb25maWcuaXNCdWlsZCkgewogICAgICAgICAgICAgICAgYnVpbGRNYXBbbmFtZV0gPSBjb250ZW50OwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9uTG9hZChjb250ZW50KTsKICAgICAgICB9LAoKICAgICAgICBsb2FkOiBmdW5jdGlvbiAobmFtZSwgcmVxLCBvbkxvYWQsIGNvbmZpZykgewogICAgICAgICAgICAvL05hbWUgaGFzIGZvcm1hdDogc29tZS5tb2R1bGUuZmlsZXh0IXN0cmlwCiAgICAgICAgICAgIC8vVGhlIHN0cmlwIHBhcnQgaXMgb3B0aW9uYWwuCiAgICAgICAgICAgIC8vaWYgc3RyaXAgaXMgcHJlc2VudCwgdGhlbiB0aGF0IG1lYW5zIG9ubHkgZ2V0IHRoZSBzdHJpbmcgY29udGVudHMKICAgICAgICAgICAgLy9pbnNpZGUgYSBib2R5IHRhZyBpbiBhbiBIVE1MIHN0cmluZy4gRm9yIFhNTC9TVkcgY29udGVudCBpdCBtZWFucwogICAgICAgICAgICAvL3JlbW92aW5nIHRoZSA8P3htbCAuLi4/PiBkZWNsYXJhdGlvbnMgc28gdGhlIGNvbnRlbnQgY2FuIGJlIGluc2VydGVkCiAgICAgICAgICAgIC8vaW50byB0aGUgY3VycmVudCBkb2Mgd2l0aG91dCBwcm9ibGVtcy4KCiAgICAgICAgICAgIC8vIERvIG5vdCBib3RoZXIgd2l0aCB0aGUgd29yayBpZiBhIGJ1aWxkIGFuZCB0ZXh0IHdpbGwKICAgICAgICAgICAgLy8gbm90IGJlIGlubGluZWQuCiAgICAgICAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLmlzQnVpbGQgJiYgIWNvbmZpZy5pbmxpbmVUZXh0KSB7CiAgICAgICAgICAgICAgICBvbkxvYWQoKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbWFzdGVyQ29uZmlnLmlzQnVpbGQgPSBjb25maWcgJiYgY29uZmlnLmlzQnVpbGQ7CgogICAgICAgICAgICB2YXIgcGFyc2VkID0gdGV4dC5wYXJzZU5hbWUobmFtZSksCiAgICAgICAgICAgICAgICBub25TdHJpcE5hbWUgPSBwYXJzZWQubW9kdWxlTmFtZSArCiAgICAgICAgICAgICAgICAgICAgKHBhcnNlZC5leHQgPyAnLicgKyBwYXJzZWQuZXh0IDogJycpLAogICAgICAgICAgICAgICAgdXJsID0gcmVxLnRvVXJsKG5vblN0cmlwTmFtZSksCiAgICAgICAgICAgICAgICB1c2VYaHIgPSAobWFzdGVyQ29uZmlnLnVzZVhocikgfHwKICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQudXNlWGhyOwoKICAgICAgICAgICAgLy8gRG8gbm90IGxvYWQgaWYgaXQgaXMgYW4gZW1wdHk6IHVybAogICAgICAgICAgICBpZiAodXJsLmluZGV4T2YoJ2VtcHR5OicpID09PSAwKSB7CiAgICAgICAgICAgICAgICBvbkxvYWQoKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy9Mb2FkIHRoZSB0ZXh0LiBVc2UgWEhSIGlmIHBvc3NpYmxlIGFuZCBpbiBhIGJyb3dzZXIuCiAgICAgICAgICAgIGlmICghaGFzTG9jYXRpb24gfHwgdXNlWGhyKHVybCwgZGVmYXVsdFByb3RvY29sLCBkZWZhdWx0SG9zdE5hbWUsIGRlZmF1bHRQb3J0KSkgewogICAgICAgICAgICAgICAgdGV4dC5nZXQodXJsLCBmdW5jdGlvbiAoY29udGVudCkgewogICAgICAgICAgICAgICAgICAgIHRleHQuZmluaXNoTG9hZChuYW1lLCBwYXJzZWQuc3RyaXAsIGNvbnRlbnQsIG9uTG9hZCk7CiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG9uTG9hZC5lcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICBvbkxvYWQuZXJyb3IoZXJyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vTmVlZCB0byBmZXRjaCB0aGUgcmVzb3VyY2UgYWNyb3NzIGRvbWFpbnMuIEFzc3VtZQogICAgICAgICAgICAgICAgLy90aGUgcmVzb3VyY2UgaGFzIGJlZW4gb3B0aW1pemVkIGludG8gYSBKUyBtb2R1bGUuIEZldGNoCiAgICAgICAgICAgICAgICAvL2J5IHRoZSBtb2R1bGUgbmFtZSArIGV4dGVuc2lvbiwgYnV0IGRvIG5vdCBpbmNsdWRlIHRoZQogICAgICAgICAgICAgICAgLy8hc3RyaXAgcGFydCB0byBhdm9pZCBmaWxlIHN5c3RlbSBpc3N1ZXMuCiAgICAgICAgICAgICAgICByZXEoW25vblN0cmlwTmFtZV0sIGZ1bmN0aW9uIChjb250ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgdGV4dC5maW5pc2hMb2FkKHBhcnNlZC5tb2R1bGVOYW1lICsgJy4nICsgcGFyc2VkLmV4dCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkLnN0cmlwLCBjb250ZW50LCBvbkxvYWQpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICB3cml0ZTogZnVuY3Rpb24gKHBsdWdpbk5hbWUsIG1vZHVsZU5hbWUsIHdyaXRlLCBjb25maWcpIHsKICAgICAgICAgICAgaWYgKGJ1aWxkTWFwLmhhc093blByb3BlcnR5KG1vZHVsZU5hbWUpKSB7CiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IHRleHQuanNFc2NhcGUoYnVpbGRNYXBbbW9kdWxlTmFtZV0pOwogICAgICAgICAgICAgICAgd3JpdGUuYXNNb2R1bGUocGx1Z2luTmFtZSArICIhIiArIG1vZHVsZU5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVmaW5lKGZ1bmN0aW9uICgpIHsgcmV0dXJuICciICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICInO30pO1xuIik7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICB3cml0ZUZpbGU6IGZ1bmN0aW9uIChwbHVnaW5OYW1lLCBtb2R1bGVOYW1lLCByZXEsIHdyaXRlLCBjb25maWcpIHsKICAgICAgICAgICAgdmFyIHBhcnNlZCA9IHRleHQucGFyc2VOYW1lKG1vZHVsZU5hbWUpLAogICAgICAgICAgICAgICAgZXh0UGFydCA9IHBhcnNlZC5leHQgPyAnLicgKyBwYXJzZWQuZXh0IDogJycsCiAgICAgICAgICAgICAgICBub25TdHJpcE5hbWUgPSBwYXJzZWQubW9kdWxlTmFtZSArIGV4dFBhcnQsCiAgICAgICAgICAgICAgICAvL1VzZSBhICcuanMnIGZpbGUgbmFtZSBzbyB0aGF0IGl0IGluZGljYXRlcyBpdCBpcyBhCiAgICAgICAgICAgICAgICAvL3NjcmlwdCB0aGF0IGNhbiBiZSBsb2FkZWQgYWNyb3NzIGRvbWFpbnMuCiAgICAgICAgICAgICAgICBmaWxlTmFtZSA9IHJlcS50b1VybChwYXJzZWQubW9kdWxlTmFtZSArIGV4dFBhcnQpICsgJy5qcyc7CgogICAgICAgICAgICAvL0xldmVyYWdlIG93biBsb2FkKCkgbWV0aG9kIHRvIGxvYWQgcGx1Z2luIHZhbHVlLCBidXQgb25seQogICAgICAgICAgICAvL3dyaXRlIG91dCB2YWx1ZXMgdGhhdCBkbyBub3QgaGF2ZSB0aGUgc3RyaXAgYXJndW1lbnQsCiAgICAgICAgICAgIC8vdG8gYXZvaWQgYW55IHBvdGVudGlhbCBpc3N1ZXMgd2l0aCAhIGluIGZpbGUgbmFtZXMuCiAgICAgICAgICAgIHRleHQubG9hZChub25TdHJpcE5hbWUsIHJlcSwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAvL1VzZSBvd24gd3JpdGUoKSBtZXRob2QgdG8gY29uc3RydWN0IGZ1bGwgbW9kdWxlIHZhbHVlLgogICAgICAgICAgICAgICAgLy9CdXQgbmVlZCB0byBjcmVhdGUgc2hlbGwgdGhhdCB0cmFuc2xhdGVzIHdyaXRlRmlsZSdzCiAgICAgICAgICAgICAgICAvL3dyaXRlKCkgdG8gdGhlIHJpZ2h0IGludGVyZmFjZS4KICAgICAgICAgICAgICAgIHZhciB0ZXh0V3JpdGUgPSBmdW5jdGlvbiAoY29udGVudHMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gd3JpdGUoZmlsZU5hbWUsIGNvbnRlbnRzKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB0ZXh0V3JpdGUuYXNNb2R1bGUgPSBmdW5jdGlvbiAobW9kdWxlTmFtZSwgY29udGVudHMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gd3JpdGUuYXNNb2R1bGUobW9kdWxlTmFtZSwgZmlsZU5hbWUsIGNvbnRlbnRzKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdGV4dC53cml0ZShwbHVnaW5OYW1lLCBub25TdHJpcE5hbWUsIHRleHRXcml0ZSwgY29uZmlnKTsKICAgICAgICAgICAgfSwgY29uZmlnKTsKICAgICAgICB9CiAgICB9OwoKICAgIGlmIChtYXN0ZXJDb25maWcuZW52ID09PSAnbm9kZScgfHwgKCFtYXN0ZXJDb25maWcuZW52ICYmCiAgICAgICAgICAgIHR5cGVvZiBwcm9jZXNzICE9PSAidW5kZWZpbmVkIiAmJgogICAgICAgICAgICBwcm9jZXNzLnZlcnNpb25zICYmCiAgICAgICAgICAgICEhcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICYmCiAgICAgICAgICAgICFwcm9jZXNzLnZlcnNpb25zWydub2RlLXdlYmtpdCddKSkgewogICAgICAgIC8vVXNpbmcgc3BlY2lhbCByZXF1aXJlLm5vZGVSZXF1aXJlLCBzb21ldGhpbmcgYWRkZWQgYnkgci5qcy4KICAgICAgICBmcyA9IHJlcXVpcmUubm9kZVJlcXVpcmUoJ2ZzJyk7CgogICAgICAgIHRleHQuZ2V0ID0gZnVuY3Rpb24gKHVybCwgY2FsbGJhY2ssIGVycmJhY2spIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciBmaWxlID0gZnMucmVhZEZpbGVTeW5jKHVybCwgJ3V0ZjgnKTsKICAgICAgICAgICAgICAgIC8vUmVtb3ZlIEJPTSAoQnl0ZSBNYXJrIE9yZGVyKSBmcm9tIHV0ZjggZmlsZXMgaWYgaXQgaXMgdGhlcmUuCiAgICAgICAgICAgICAgICBpZiAoZmlsZS5pbmRleE9mKCdcdUZFRkYnKSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGZpbGUgPSBmaWxlLnN1YnN0cmluZygxKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZpbGUpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBpZiAoZXJyYmFjaykgewogICAgICAgICAgICAgICAgICAgIGVycmJhY2soZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfSBlbHNlIGlmIChtYXN0ZXJDb25maWcuZW52ID09PSAneGhyJyB8fCAoIW1hc3RlckNvbmZpZy5lbnYgJiYKICAgICAgICAgICAgdGV4dC5jcmVhdGVYaHIoKSkpIHsKICAgICAgICB0ZXh0LmdldCA9IGZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrLCBlcnJiYWNrLCBoZWFkZXJzKSB7CiAgICAgICAgICAgIHZhciB4aHIgPSB0ZXh0LmNyZWF0ZVhocigpLCBoZWFkZXI7CiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpOwoKICAgICAgICAgICAgLy9BbGxvdyBwbHVnaW5zIGRpcmVjdCBhY2Nlc3MgdG8geGhyIGhlYWRlcnMKICAgICAgICAgICAgaWYgKGhlYWRlcnMpIHsKICAgICAgICAgICAgICAgIGZvciAoaGVhZGVyIGluIGhlYWRlcnMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShoZWFkZXIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlci50b0xvd2VyQ2FzZSgpLCBoZWFkZXJzW2hlYWRlcl0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy9BbGxvdyBvdmVycmlkZXMgc3BlY2lmaWVkIGluIGNvbmZpZwogICAgICAgICAgICBpZiAobWFzdGVyQ29uZmlnLm9uWGhyKSB7CiAgICAgICAgICAgICAgICBtYXN0ZXJDb25maWcub25YaHIoeGhyLCB1cmwpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICAgICAgdmFyIHN0YXR1cywgZXJyOwogICAgICAgICAgICAgICAgLy9EbyBub3QgZXhwbGljaXRseSBoYW5kbGUgZXJyb3JzLCB0aG9zZSBzaG91bGQgYmUKICAgICAgICAgICAgICAgIC8vdmlzaWJsZSB2aWEgY29uc29sZSBvdXRwdXQgaW4gdGhlIGJyb3dzZXIuCiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHsKICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSB4aHIuc3RhdHVzIHx8IDA7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA+IDM5OSAmJiBzdGF0dXMgPCA2MDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy9BbiBodHRwIDR4eCBvciA1eHggZXJyb3IuIFNpZ25hbCBhbiBlcnJvci4KICAgICAgICAgICAgICAgICAgICAgICAgZXJyID0gbmV3IEVycm9yKHVybCArICcgSFRUUCBzdGF0dXM6ICcgKyBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgICAgICBlcnIueGhyID0geGhyOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyYmFjayhlcnIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soeGhyLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobWFzdGVyQ29uZmlnLm9uWGhyQ29tcGxldGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWFzdGVyQ29uZmlnLm9uWGhyQ29tcGxldGUoeGhyLCB1cmwpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgeGhyLnNlbmQobnVsbCk7CiAgICAgICAgfTsKICAgIH0gZWxzZSBpZiAobWFzdGVyQ29uZmlnLmVudiA9PT0gJ3JoaW5vJyB8fCAoIW1hc3RlckNvbmZpZy5lbnYgJiYKICAgICAgICAgICAgdHlwZW9mIFBhY2thZ2VzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgamF2YSAhPT0gJ3VuZGVmaW5lZCcpKSB7CiAgICAgICAgLy9XaHkgSmF2YSwgd2h5IGlzIHRoaXMgc28gYXdrd2FyZD8KICAgICAgICB0ZXh0LmdldCA9IGZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBzdHJpbmdCdWZmZXIsIGxpbmUsCiAgICAgICAgICAgICAgICBlbmNvZGluZyA9ICJ1dGYtOCIsCiAgICAgICAgICAgICAgICBmaWxlID0gbmV3IGphdmEuaW8uRmlsZSh1cmwpLAogICAgICAgICAgICAgICAgbGluZVNlcGFyYXRvciA9IGphdmEubGFuZy5TeXN0ZW0uZ2V0UHJvcGVydHkoImxpbmUuc2VwYXJhdG9yIiksCiAgICAgICAgICAgICAgICBpbnB1dCA9IG5ldyBqYXZhLmlvLkJ1ZmZlcmVkUmVhZGVyKG5ldyBqYXZhLmlvLklucHV0U3RyZWFtUmVhZGVyKG5ldyBqYXZhLmlvLkZpbGVJbnB1dFN0cmVhbShmaWxlKSwgZW5jb2RpbmcpKSwKICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAnJzsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHN0cmluZ0J1ZmZlciA9IG5ldyBqYXZhLmxhbmcuU3RyaW5nQnVmZmVyKCk7CiAgICAgICAgICAgICAgICBsaW5lID0gaW5wdXQucmVhZExpbmUoKTsKCiAgICAgICAgICAgICAgICAvLyBCeXRlIE9yZGVyIE1hcmsgKEJPTSkgLSBUaGUgVW5pY29kZSBTdGFuZGFyZCwgdmVyc2lvbiAzLjAsIHBhZ2UgMzI0CiAgICAgICAgICAgICAgICAvLyBodHRwOi8vd3d3LnVuaWNvZGUub3JnL2ZhcS91dGZfYm9tLmh0bWwKCiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgd2hlbiB3ZSB1c2UgdXRmLTgsIHRoZSBCT00gc2hvdWxkIGFwcGVhciBhcyAiRUYgQkIgQkYiLCBidXQgaXQgZG9lc24ndCBkdWUgdG8gdGhpcyBidWcgaW4gdGhlIEpESzoKICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9idWdzLnN1bi5jb20vYnVnZGF0YWJhc2Uvdmlld19idWcuZG8/YnVnX2lkPTQ1MDgwNTgKICAgICAgICAgICAgICAgIGlmIChsaW5lICYmIGxpbmUubGVuZ3RoKCkgJiYgbGluZS5jaGFyQXQoMCkgPT09IDB4ZmVmZikgewogICAgICAgICAgICAgICAgICAgIC8vIEVhdCB0aGUgQk9NLCBzaW5jZSB3ZSd2ZSBhbHJlYWR5IGZvdW5kIHRoZSBlbmNvZGluZyBvbiB0aGlzIGZpbGUsCiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHdlIHBsYW4gdG8gY29uY2F0ZW5hdGluZyB0aGlzIGJ1ZmZlciB3aXRoIG90aGVyczsgdGhlIEJPTSBzaG91bGQKICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGFwcGVhciBhdCB0aGUgdG9wIG9mIGEgZmlsZS4KICAgICAgICAgICAgICAgICAgICBsaW5lID0gbGluZS5zdWJzdHJpbmcoMSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKGxpbmUgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICBzdHJpbmdCdWZmZXIuYXBwZW5kKGxpbmUpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHdoaWxlICgobGluZSA9IGlucHV0LnJlYWRMaW5lKCkpICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgc3RyaW5nQnVmZmVyLmFwcGVuZChsaW5lU2VwYXJhdG9yKTsKICAgICAgICAgICAgICAgICAgICBzdHJpbmdCdWZmZXIuYXBwZW5kKGxpbmUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy9NYWtlIHN1cmUgd2UgcmV0dXJuIGEgSmF2YVNjcmlwdCBzdHJpbmcgYW5kIG5vdCBhIEphdmEgc3RyaW5nLgogICAgICAgICAgICAgICAgY29udGVudCA9IFN0cmluZyhzdHJpbmdCdWZmZXIudG9TdHJpbmcoKSk7IC8vU3RyaW5nCiAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICBpbnB1dC5jbG9zZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhbGxiYWNrKGNvbnRlbnQpOwogICAgICAgIH07CiAgICB9IGVsc2UgaWYgKG1hc3RlckNvbmZpZy5lbnYgPT09ICd4cGNvbm5lY3QnIHx8ICghbWFzdGVyQ29uZmlnLmVudiAmJgogICAgICAgICAgICB0eXBlb2YgQ29tcG9uZW50cyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ29tcG9uZW50cy5jbGFzc2VzICYmCiAgICAgICAgICAgIENvbXBvbmVudHMuaW50ZXJmYWNlcykpIHsKICAgICAgICAvL0F2ZXJ0IHlvdXIgZ2F6ZSEKICAgICAgICBDYyA9IENvbXBvbmVudHMuY2xhc3NlczsKICAgICAgICBDaSA9IENvbXBvbmVudHMuaW50ZXJmYWNlczsKICAgICAgICBDb21wb25lbnRzLnV0aWxzWydpbXBvcnQnXSgncmVzb3VyY2U6Ly9ncmUvbW9kdWxlcy9GaWxlVXRpbHMuanNtJyk7CiAgICAgICAgeHBjSXNXaW5kb3dzID0gKCdAbW96aWxsYS5vcmcvd2luZG93cy1yZWdpc3RyeS1rZXk7MScgaW4gQ2MpOwoKICAgICAgICB0ZXh0LmdldCA9IGZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBpblN0cmVhbSwgY29udmVydFN0cmVhbSwgZmlsZU9iaiwKICAgICAgICAgICAgICAgIHJlYWREYXRhID0ge307CgogICAgICAgICAgICBpZiAoeHBjSXNXaW5kb3dzKSB7CiAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXC8vZywgJ1xcJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZpbGVPYmogPSBuZXcgRmlsZVV0aWxzLkZpbGUodXJsKTsKCiAgICAgICAgICAgIC8vWFBDT00sIHlvdSBzbyBjcmF6eQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaW5TdHJlYW0gPSBDY1snQG1vemlsbGEub3JnL25ldHdvcmsvZmlsZS1pbnB1dC1zdHJlYW07MSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jcmVhdGVJbnN0YW5jZShDaS5uc0lGaWxlSW5wdXRTdHJlYW0pOwogICAgICAgICAgICAgICAgaW5TdHJlYW0uaW5pdChmaWxlT2JqLCAxLCAwLCBmYWxzZSk7CgogICAgICAgICAgICAgICAgY29udmVydFN0cmVhbSA9IENjWydAbW96aWxsYS5vcmcvaW50bC9jb252ZXJ0ZXItaW5wdXQtc3RyZWFtOzEnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jcmVhdGVJbnN0YW5jZShDaS5uc0lDb252ZXJ0ZXJJbnB1dFN0cmVhbSk7CiAgICAgICAgICAgICAgICBjb252ZXJ0U3RyZWFtLmluaXQoaW5TdHJlYW0sICJ1dGYtOCIsIGluU3RyZWFtLmF2YWlsYWJsZSgpLAogICAgICAgICAgICAgICAgQ2kubnNJQ29udmVydGVySW5wdXRTdHJlYW0uREVGQVVMVF9SRVBMQUNFTUVOVF9DSEFSQUNURVIpOwoKICAgICAgICAgICAgICAgIGNvbnZlcnRTdHJlYW0ucmVhZFN0cmluZyhpblN0cmVhbS5hdmFpbGFibGUoKSwgcmVhZERhdGEpOwogICAgICAgICAgICAgICAgY29udmVydFN0cmVhbS5jbG9zZSgpOwogICAgICAgICAgICAgICAgaW5TdHJlYW0uY2xvc2UoKTsKICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlYWREYXRhLnZhbHVlKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChmaWxlT2JqICYmIGZpbGVPYmoucGF0aCB8fCAnJykgKyAnOiAnICsgZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQogICAgcmV0dXJuIHRleHQ7Cn0pOwoKLy8gUmVxdWlyZUpTIFVuZGVyc2NvcmVKUyB0ZW1wbGF0ZSBwbHVnaW4KLy8gaHR0cDovL2dpdGh1Yi5jb20vamZwYXJhZGlzL3JlcXVpcmVqcy10cGwKLy8KLy8gQW4gYWx0ZXJuYXRpdmUgdG8gaHR0cDovL2dpdGh1Yi5jb20vWmVlQWdlbmN5L3JlcXVpcmVqcy10cGwKLy8KLy8gVXNpbmcgVW5kZXJzY29yZUpTIG1pY3JvLXRlbXBsYXRlcyBhdCBodHRwOi8vdW5kZXJzY29yZWpzLm9yZy8jdGVtcGxhdGUKLy8gVXNpbmcgYW5kIFJlcXVpcmVKUyB0ZXh0LmpzIGF0IGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvYXBpLmh0bWwjdGV4dAovLyBAYXV0aG9yIEpGIFBhcmFkaXMKLy8gQHZlcnNpb24gMC4wLjIKLy8KLy8gUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlCi8vCi8vIFVzYWdlOgovLyAgIHJlcXVpcmUoWydiYWNrYm9uZScsICd0cGwhbXl0ZW1wbGF0ZSddLCBmdW5jdGlvbiAoQmFja2JvbmUsIG15dGVtcGxhdGUpIHsKLy8gICAgIHJldHVybiBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7Ci8vICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7Ci8vICAgICAgICAgdGhpcy5yZW5kZXIoKTsKLy8gICAgICAgfSwKLy8gICAgICAgcmVuZGVyOiBmdW5jdGlvbigpewovLyAgICAgICAgIHRoaXMuJGVsLmh0bWwobXl0ZW1wbGF0ZSh7bWVzc2FnZTogJ2hlbGxvJ30pKTsKLy8gICAgIH0pOwovLyAgIH0pOwovLwovLyBDb25maWd1cmF0aW9uOiAob3B0aW9uYWwpCi8vICAgcmVxdWlyZS5jb25maWcoewovLyAgICAgdHBsOiB7Ci8vICAgICAgIGV4dGVuc2lvbjogJy50cGwnIC8vIGRlZmF1bHQgPSAnLmh0bWwnCi8vICAgICB9Ci8vICAgfSk7CgovKmpzbGludCBub21lbjogdHJ1ZSAqLwovKmdsb2JhbCBkZWZpbmU6IGZhbHNlICovCgpkZWZpbmUoJ3RwbCcsWyd0ZXh0JywgJ3VuZGVyc2NvcmUnXSwgZnVuY3Rpb24gKHRleHQsIF8pIHsKICAgIAoKICAgIHZhciBidWlsZE1hcCA9IHt9LAogICAgICAgIGJ1aWxkVGVtcGxhdGVTb3VyY2UgPSAiZGVmaW5lKCd7cGx1Z2luTmFtZX0he21vZHVsZU5hbWV9JywgZnVuY3Rpb24gKCkgeyByZXR1cm4ge3NvdXJjZX07IH0pO1xuIjsKCiAgICByZXR1cm4gewogICAgICAgIHZlcnNpb246ICcwLjAuMicsCgogICAgICAgIGxvYWQ6IGZ1bmN0aW9uIChtb2R1bGVOYW1lLCBwYXJlbnRSZXF1aXJlLCBvbmxvYWQsIGNvbmZpZykgewoKICAgICAgICAgICAgaWYgKGNvbmZpZy50cGwgJiYgY29uZmlnLnRwbC50ZW1wbGF0ZVNldHRpbmdzKSB7CiAgICAgICAgICAgICAgICBfLnRlbXBsYXRlU2V0dGluZ3MgPSBjb25maWcudHBsLnRlbXBsYXRlU2V0dGluZ3M7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChidWlsZE1hcFttb2R1bGVOYW1lXSkgewogICAgICAgICAgICAgICAgb25sb2FkKGJ1aWxkTWFwW21vZHVsZU5hbWVdKTsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgZXh0ID0gKGNvbmZpZy50cGwgJiYgY29uZmlnLnRwbC5leHRlbnNpb24pIHx8ICcuaHRtbCc7CiAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IChjb25maWcudHBsICYmIGNvbmZpZy50cGwucGF0aCkgfHwgJyc7CiAgICAgICAgICAgICAgICB0ZXh0LmxvYWQocGF0aCArIG1vZHVsZU5hbWUgKyBleHQsIHBhcmVudFJlcXVpcmUsIGZ1bmN0aW9uIChzb3VyY2UpIHsKICAgICAgICAgICAgICAgICAgICBidWlsZE1hcFttb2R1bGVOYW1lXSA9IF8udGVtcGxhdGUoc291cmNlKTsKICAgICAgICAgICAgICAgICAgICBvbmxvYWQoYnVpbGRNYXBbbW9kdWxlTmFtZV0pOwogICAgICAgICAgICAgICAgfSwgY29uZmlnKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHdyaXRlOiBmdW5jdGlvbiAocGx1Z2luTmFtZSwgbW9kdWxlTmFtZSwgd3JpdGUpIHsKICAgICAgICAgICAgdmFyIGJ1aWxkID0gYnVpbGRNYXBbbW9kdWxlTmFtZV0sCiAgICAgICAgICAgICAgICBzb3VyY2UgPSBidWlsZCAmJiBidWlsZC5zb3VyY2U7CiAgICAgICAgICAgIGlmIChzb3VyY2UpIHsKICAgICAgICAgICAgICAgIHdyaXRlLmFzTW9kdWxlKHBsdWdpbk5hbWUgKyAnIScgKyBtb2R1bGVOYW1lLAogICAgICAgICAgICAgICAgICAgIGJ1aWxkVGVtcGxhdGVTb3VyY2UKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgne3BsdWdpbk5hbWV9JywgcGx1Z2luTmFtZSkKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgne21vZHVsZU5hbWV9JywgbW9kdWxlTmFtZSkKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgne3NvdXJjZX0nLCBzb3VyY2UpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07Cn0pOwoKCmRlZmluZSgndHBsIWFjdGlvbicsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8ZGl2IGNsYXNzPSJjaGF0LW1lc3NhZ2UgJysKKChfX3Q9KGV4dHJhX2NsYXNzZXMpKT09bnVsbD8nJzpfX3QpKwonIj5cbiAgICA8c3BhbiBjbGFzcz0iY2hhdC1tZXNzYWdlLScrCigoX190PShzZW5kZXIpKT09bnVsbD8nJzpfX3QpKwonIj4nKwooKF9fdD0odGltZSkpPT1udWxsPycnOl9fdCkrCicgKionKwooKF9fdD0odXNlcm5hbWUpKT09bnVsbD8nJzpfX3QpKwonIDwvc3Bhbj5cbiAgICA8c3BhbiBjbGFzcz0iY2hhdC1tZXNzYWdlLWNvbnRlbnQiPicrCigoX190PShtZXNzYWdlKSk9PW51bGw/Jyc6X190KSsKJzwvc3Bhbj5cbjwvZGl2PlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFhZGRfY29udGFjdF9kcm9wZG93bicsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8ZGwgY2xhc3M9ImFkZC1jb252ZXJzZS1jb250YWN0IGRyb3Bkb3duIj5cbiAgICA8ZHQgaWQ9InhtcHAtY29udGFjdC1zZWFyY2giIGNsYXNzPSJmYW5jeS1kcm9wZG93biI+XG4gICAgICAgIDxhIGNsYXNzPSJ0b2dnbGUteG1wcC1jb250YWN0LWZvcm0iIGhyZWY9IiMiXG4gICAgICAgICAgICB0aXRsZT0iJysKKChfX3Q9KGxhYmVsX2NsaWNrX3RvX2NoYXQpKT09bnVsbD8nJzpfX3QpKwonIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tcGx1cyI+PC9zcGFuPicrCigoX190PShsYWJlbF9hZGRfY29udGFjdCkpPT1udWxsPycnOl9fdCkrCic8L2E+XG4gICAgPC9kdD5cbiAgICA8ZGQgY2xhc3M9InNlYXJjaC14bXBwIiBzdHlsZT0iZGlzcGxheTpub25lIj48dWw+PC91bD48L2RkPlxuPC9kbD5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhYWRkX2NvbnRhY3RfZm9ybScsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8bGk+XG4gICAgPGZvcm0gY2xhc3M9ImFkZC14bXBwLWNvbnRhY3QiPlxuICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCJcbiAgICAgICAgICAgIG5hbWU9ImlkZW50aWZpZXIiXG4gICAgICAgICAgICBjbGFzcz0idXNlcm5hbWUiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0iJysKKChfX3Q9KGxhYmVsX2NvbnRhY3RfdXNlcm5hbWUpKT09bnVsbD8nJzpfX3QpKwonIi8+XG4gICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0Ij4nKwooKF9fdD0obGFiZWxfYWRkKSk9PW51bGw/Jyc6X190KSsKJzwvYnV0dG9uPlxuICAgIDwvZm9ybT5cbjwvbGk+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIWNoYW5nZV9zdGF0dXNfbWVzc2FnZScsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8Zm9ybSBpZD0ic2V0LWN1c3RvbS14bXBwLXN0YXR1cyI+XG4gICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJjdXN0b20teG1wcC1zdGF0dXMiICcrCigoX190PShzdGF0dXNfbWVzc2FnZSkpPT1udWxsPycnOl9fdCkrCidcbiAgICAgICAgcGxhY2Vob2xkZXI9IicrCigoX190PShsYWJlbF9jdXN0b21fc3RhdHVzKSk9PW51bGw/Jyc6X190KSsKJyIvPlxuICAgIDxidXR0b24gdHlwZT0ic3VibWl0Ij4nKwooKF9fdD0obGFiZWxfc2F2ZSkpPT1udWxsPycnOl9fdCkrCic8L2J1dHRvbj5cbjwvZm9ybT5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhY2hhdF9zdGF0dXMnLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPGRpdiBjbGFzcz0ieG1wcC1zdGF0dXMiPlxuICAgIDxhIGNsYXNzPSJjaG9vc2UteG1wcC1zdGF0dXMgJysKKChfX3Q9KGNoYXRfc3RhdHVzKSk9PW51bGw/Jyc6X190KSsKJyJcbiAgICAgICBkYXRhLXZhbHVlPSInKwooKF9fdD0oc3RhdHVzX21lc3NhZ2UpKT09bnVsbD8nJzpfX3QpKwonIlxuICAgICAgIGhyZWY9IiMiIHRpdGxlPSInKwooKF9fdD0oZGVzY19jaGFuZ2Vfc3RhdHVzKSk9PW51bGw/Jyc6X190KSsKJyI+XG5cbiAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tJysKKChfX3Q9KGNoYXRfc3RhdHVzKSk9PW51bGw/Jyc6X190KSsKJyI+PC9zcGFuPicrCigoX190PShzdGF0dXNfbWVzc2FnZSkpPT1udWxsPycnOl9fdCkrCidcbiAgICA8L2E+XG4gICAgPGEgY2xhc3M9ImNoYW5nZS14bXBwLXN0YXR1cy1tZXNzYWdlIGljb24tcGVuY2lsIlxuICAgICAgICBocmVmPSIjIlxuICAgICAgICB0aXRsZT0iJysKKChfX3Q9KGRlc2NfY3VzdG9tX3N0YXR1cykpPT1udWxsPycnOl9fdCkrCiciPjwvYT5cbjwvZGl2PlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFjaGF0YXJlYScsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8ZGl2IGNsYXNzPSJjaGF0LWFyZWEiPlxuICAgIDxkaXYgY2xhc3M9ImNoYXQtY29udGVudCI+PC9kaXY+XG4gICAgPGZvcm0gY2xhc3M9InNlbmRYTVBQTWVzc2FnZSIgYWN0aW9uPSIiIG1ldGhvZD0icG9zdCI+XG4gICAgICAgICc7CiBpZiAoc2hvd190b29sYmFyKSB7IApfX3ArPSdcbiAgICAgICAgICAgIDx1bCBjbGFzcz0iY2hhdC10b29sYmFyIG5vLXRleHQtc2VsZWN0Ij48L3VsPlxuICAgICAgICAnOwogfSAKX19wKz0nXG4gICAgICAgIDx0ZXh0YXJlYSB0eXBlPSJ0ZXh0IiBjbGFzcz0iY2hhdC10ZXh0YXJlYSIgXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0iJysKKChfX3Q9KGxhYmVsX21lc3NhZ2UpKT09bnVsbD8nJzpfX3QpKwonIi8+XG4gICAgPC9mb3JtPlxuPC9kaXY+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIWNoYXRib3gnLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPGRpdiBjbGFzcz0iYm94LWZseW91dCIgc3R5bGU9ImhlaWdodDogJysKKChfX3Q9KGhlaWdodCkpPT1udWxsPycnOl9fdCkrCidweCI+XG4gICAgPGRpdiBjbGFzcz0iZHJhZ3Jlc2l6ZSBkcmFncmVzaXplLXRtIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJjaGF0LWhlYWQgY2hhdC1oZWFkLWNoYXRib3giPlxuICAgICAgICA8YSBjbGFzcz0iY2xvc2UtY2hhdGJveC1idXR0b24gaWNvbi1jbG9zZSI+PC9hPlxuICAgICAgICA8YSBjbGFzcz0idG9nZ2xlLWNoYXRib3gtYnV0dG9uIGljb24tbWludXMiPjwvYT5cbiAgICAgICAgPGRpdiBjbGFzcz0iY2hhdC10aXRsZSI+XG4gICAgICAgICAgICAnOwogaWYgKHVybCkgeyAKX19wKz0nXG4gICAgICAgICAgICAgICAgPGEgaHJlZj0iJysKKChfX3Q9KHVybCkpPT1udWxsPycnOl9fdCkrCiciIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0idXNlciI+XG4gICAgICAgICAgICAnOwogfSAKX19wKz0nXG4gICAgICAgICAgICAgICAgICAgICcrCigoX190PSggZnVsbG5hbWUgKSk9PW51bGw/Jyc6X190KSsKJ1xuICAgICAgICAgICAgJzsKIGlmICh1cmwpIHsgCl9fcCs9J1xuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICc7CiB9IApfX3ArPSdcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxwIGNsYXNzPSJ1c2VyLWN1c3RvbS1tZXNzYWdlIj48cC8+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz0iY2hhdC1ib2R5Ij5cbiAgICAgICAgPGRpdiBjbGFzcz0iY2hhdC1jb250ZW50Ij48L2Rpdj5cbiAgICAgICAgPGZvcm0gY2xhc3M9InNlbmRYTVBQTWVzc2FnZSIgYWN0aW9uPSIiIG1ldGhvZD0icG9zdCI+XG4gICAgICAgICAgICAnOwogaWYgKHNob3dfdG9vbGJhcikgeyAKX19wKz0nXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJjaGF0LXRvb2xiYXIgbm8tdGV4dC1zZWxlY3QiPjwvdWw+XG4gICAgICAgICAgICAnOwogfSAKX19wKz0nXG4gICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgICAgdHlwZT0idGV4dCJcbiAgICAgICAgICAgIGNsYXNzPSJjaGF0LXRleHRhcmVhIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9IicrCigoX190PShsYWJlbF9wZXJzb25hbF9tZXNzYWdlKSk9PW51bGw/Jyc6X190KSsKJyIvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG48L2Rpdj5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhY2hhdHJvb20nLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPGRpdiBjbGFzcz0iYm94LWZseW91dCIgc3R5bGU9ImhlaWdodDogJysKKChfX3Q9KGhlaWdodCkpPT1udWxsPycnOl9fdCkrCidweCJcbiAgICAnOwogaWYgKG1pbmltaXplZCkgeyAKX19wKz0nIHN0eWxlPSJkaXNwbGF5Om5vbmUiICc7CiB9IApfX3ArPSc+XG4gICAgPGRpdiBjbGFzcz0iZHJhZ3Jlc2l6ZSBkcmFncmVzaXplLXRtIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJjaGF0LWhlYWQgY2hhdC1oZWFkLWNoYXRyb29tIj5cbiAgICAgICAgPGEgY2xhc3M9ImNsb3NlLWNoYXRib3gtYnV0dG9uIGljb24tY2xvc2UiPjwvYT5cbiAgICAgICAgPGEgY2xhc3M9InRvZ2dsZS1jaGF0Ym94LWJ1dHRvbiBpY29uLW1pbnVzIj48L2E+XG4gICAgICAgIDxhIGNsYXNzPSJjb25maWd1cmUtY2hhdHJvb20tYnV0dG9uIGljb24td3JlbmNoIiBzdHlsZT0iZGlzcGxheTpub25lIj48L2E+XG4gICAgICAgIDxkaXYgY2xhc3M9ImNoYXQtdGl0bGUiPiAnKwooKF9fdD0oIG5hbWUgKSk9PW51bGw/Jyc6X190KSsKJyA8L2Rpdj5cbiAgICAgICAgPHAgY2xhc3M9ImNoYXRyb29tLXRvcGljIj48cC8+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz0iY2hhdC1ib2R5Ij48c3BhbiBjbGFzcz0ic3Bpbm5lciBjZW50ZXJlZCIvPjwvZGl2PlxuPC9kaXY+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIWNoYXRyb29tX3Bhc3N3b3JkX2Zvcm0nLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPGRpdiBjbGFzcz0iY2hhdHJvb20tZm9ybS1jb250YWluZXIiPlxuICAgIDxmb3JtIGNsYXNzPSJjaGF0cm9vbS1mb3JtIj5cbiAgICAgICAgPGxlZ2VuZD4nKwooKF9fdD0oaGVhZGluZykpPT1udWxsPycnOl9fdCkrCic8L2xlZ2VuZD5cbiAgICAgICAgPGxhYmVsPicrCigoX190PShsYWJlbF9wYXNzd29yZCkpPT1udWxsPycnOl9fdCkrCic8aW5wdXQgdHlwZT0icGFzc3dvcmQiIG5hbWU9InBhc3N3b3JkIi8+PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IicrCigoX190PShsYWJlbF9zdWJtaXQpKT09bnVsbD8nJzpfX3QpKwonIi8+XG4gICAgPC9mb3JtPlxuPC9kaXY+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIWNoYXRyb29tX3NpZGViYXInLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPCEtLSA8ZGl2IGNsYXNzPSJwYXJ0aWNpcGFudHMiPiAtLT5cbjxmb3JtIGNsYXNzPSJyb29tLWludml0ZSI+XG4gICAgPGlucHV0IGNsYXNzPSJpbnZpdGVkLWNvbnRhY3QiIHBsYWNlaG9sZGVyPSInKwooKF9fdD0obGFiZWxfaW52aXRhdGlvbikpPT1udWxsPycnOl9fdCkrCiciIHR5cGU9InRleHQiLz5cbjwvZm9ybT5cbjxsYWJlbD4nKwooKF9fdD0obGFiZWxfb2NjdXBhbnRzKSk9PW51bGw/Jyc6X190KSsKJzo8L2xhYmVsPlxuPHVsIGNsYXNzPSJwYXJ0aWNpcGFudC1saXN0Ij48L3VsPlxuPCEtLSA8L2Rpdj4gLS0+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIWNoYXRyb29tc190YWInLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPGxpPjxhIGNsYXNzPSJzIiBocmVmPSIjY2hhdHJvb21zIj4nKwooKF9fdD0obGFiZWxfcm9vbXMpKT09bnVsbD8nJzpfX3QpKwonPC9hPjwvbGk+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIWNoYXRzX3BhbmVsJywgW10sZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24ob2JqKXsKdmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLHByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307CndpdGgob2JqfHx7fSl7Cl9fcCs9JzxkaXYgaWQ9Im1pbmltaXplZC1jaGF0cyI+XG4gICAgPGEgaWQ9InRvZ2dsZS1taW5pbWl6ZWQtY2hhdHMiIGhyZWY9IiMiPjwvYT5cbiAgICA8ZGl2IGNsYXNzPSJtaW5pbWl6ZWQtY2hhdHMtZmx5b3V0Ij48L2Rpdj5cbjwvZGl2PlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFjaG9vc2Vfc3RhdHVzJywgW10sZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24ob2JqKXsKdmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLHByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307CndpdGgob2JqfHx7fSl7Cl9fcCs9JzxkbCBpZD0idGFyZ2V0IiBjbGFzcz0iZHJvcGRvd24iPlxuICAgIDxkdCBpZD0iZmFuY3kteG1wcC1zdGF0dXMtc2VsZWN0IiBjbGFzcz0iZmFuY3ktZHJvcGRvd24iPjwvZHQ+XG4gICAgPGRkPjx1bCBjbGFzcz0ieG1wcC1zdGF0dXMtbWVudSI+PC91bD48L2RkPlxuPC9kbD5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhY29udGFjdHNfcGFuZWwnLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPGZvcm0gY2xhc3M9InNldC14bXBwLXN0YXR1cyIgYWN0aW9uPSIiIG1ldGhvZD0icG9zdCI+XG4gICAgPHNwYW4gaWQ9InhtcHAtc3RhdHVzLWhvbGRlciI+XG4gICAgICAgIDxzZWxlY3QgaWQ9InNlbGVjdC14bXBwLXN0YXR1cyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJvbmxpbmUiPicrCigoX190PShsYWJlbF9vbmxpbmUpKT09bnVsbD8nJzpfX3QpKwonPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJkbmQiPicrCigoX190PShsYWJlbF9idXN5KSk9PW51bGw/Jyc6X190KSsKJzwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iYXdheSI+JysKKChfX3Q9KGxhYmVsX2F3YXkpKT09bnVsbD8nJzpfX3QpKwonPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJvZmZsaW5lIj4nKwooKF9fdD0obGFiZWxfb2ZmbGluZSkpPT1udWxsPycnOl9fdCkrCic8L29wdGlvbj5cbiAgICAgICAgICAgICc7CiBpZiAoYWxsb3dfbG9nb3V0KSAgeyAKX19wKz0nXG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJsb2dvdXQiPicrCigoX190PShsYWJlbF9sb2dvdXQpKT09bnVsbD8nJzpfX3QpKwonPC9vcHRpb24+XG4gICAgICAgICAgICAnOwogfSAKX19wKz0nXG4gICAgICAgIDwvc2VsZWN0PlxuICAgIDwvc3Bhbj5cbjwvZm9ybT5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhY29udGFjdHNfdGFiJywgW10sZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24ob2JqKXsKdmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLHByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307CndpdGgob2JqfHx7fSl7Cl9fcCs9JzxsaT48YSBjbGFzcz0icyBjdXJyZW50IiBocmVmPSIjdXNlcnMiPicrCigoX190PShsYWJlbF9jb250YWN0cykpPT1udWxsPycnOl9fdCkrCic8L2E+PC9saT5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhY29udHJvbGJveCcsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8ZGl2IGNsYXNzPSJib3gtZmx5b3V0IiBzdHlsZT0iaGVpZ2h0OiAnKwooKF9fdD0oaGVpZ2h0KSk9PW51bGw/Jyc6X190KSsKJ3B4Ij5cbiAgICA8ZGl2IGNsYXNzPSJkcmFncmVzaXplIGRyYWdyZXNpemUtdG0iPjwvZGl2PlxuICAgIDxkaXYgY2xhc3M9ImNoYXQtaGVhZCBjb250cm9sYm94LWhlYWQiPlxuICAgICAgICA8dWwgaWQ9ImNvbnRyb2xib3gtdGFicyI+PC91bD5cbiAgICAgICAgPGEgY2xhc3M9ImNsb3NlLWNoYXRib3gtYnV0dG9uIGljb24tY2xvc2UiPjwvYT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJjb250cm9sYm94LXBhbmVzIj48L2Rpdj5cbjwvZGl2PlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFjb250cm9sYm94X3RvZ2dsZScsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8c3BhbiBjbGFzcz0iY29ubi1mZWVkYmFjayI+JysKKChfX3Q9KGxhYmVsX3RvZ2dsZSkpPT1udWxsPycnOl9fdCkrCic8L3NwYW4+XG48c3BhbiBzdHlsZT0iZGlzcGxheTogbm9uZSIgaWQ9Im9ubGluZS1jb3VudCI+KDApPC9zcGFuPlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFmaWVsZCcsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8ZmllbGQgdmFyPSInKwooKF9fdD0obmFtZSkpPT1udWxsPycnOl9fdCkrCiciPjx2YWx1ZT4nKwooKF9fdD0odmFsdWUpKT09bnVsbD8nJzpfX3QpKwonPC92YWx1ZT48L2ZpZWxkPlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFmb3JtX2NoZWNrYm94JywgW10sZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24ob2JqKXsKdmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLHByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307CndpdGgob2JqfHx7fSl7Cl9fcCs9JzxsYWJlbD4nKwooKF9fdD0obGFiZWwpKT09bnVsbD8nJzpfX3QpKwonPGlucHV0IG5hbWU9IicrCigoX190PShuYW1lKSk9PW51bGw/Jyc6X190KSsKJyIgdHlwZT0iJysKKChfX3Q9KHR5cGUpKT09bnVsbD8nJzpfX3QpKwonIiAnKwooKF9fdD0oY2hlY2tlZCkpPT1udWxsPycnOl9fdCkrCic+PC9sYWJlbD5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhZm9ybV9pbnB1dCcsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8bGFiZWw+JysKKChfX3Q9KGxhYmVsKSk9PW51bGw/Jyc6X190KSsKJzxpbnB1dCBuYW1lPSInKwooKF9fdD0obmFtZSkpPT1udWxsPycnOl9fdCkrCiciIHR5cGU9IicrCigoX190PSh0eXBlKSk9PW51bGw/Jyc6X190KSsKJyIgdmFsdWU9IicrCigoX190PSh2YWx1ZSkpPT1udWxsPycnOl9fdCkrCiciPjwvbGFiZWw+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIWZvcm1fc2VsZWN0JywgW10sZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24ob2JqKXsKdmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLHByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307CndpdGgob2JqfHx7fSl7Cl9fcCs9JzxsYWJlbD4nKwooKF9fdD0obGFiZWwpKT09bnVsbD8nJzpfX3QpKwonPHNlbGVjdCBuYW1lPSInKwooKF9fdD0obmFtZSkpPT1udWxsPycnOl9fdCkrCiciPicrCigoX190PShvcHRpb25zKSk9PW51bGw/Jyc6X190KSsKJzwvc2VsZWN0PjwvbGFiZWw+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIWdyb3VwX2hlYWRlcicsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8YSBocmVmPSIjIiBjbGFzcz0iZ3JvdXAtdG9nZ2xlIGljb24tJysKKChfX3Q9KHRvZ2dsZV9zdGF0ZSkpPT1udWxsPycnOl9fdCkrCiciIHRpdGxlPSInKwooKF9fdD0oZGVzY19ncm91cF90b2dnbGUpKT09bnVsbD8nJzpfX3QpKwonIj4nKwooKF9fdD0obGFiZWxfZ3JvdXApKT09bnVsbD8nJzpfX3QpKwonPC9hPlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFpbmZvJywgW10sZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24ob2JqKXsKdmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLHByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307CndpdGgob2JqfHx7fSl7Cl9fcCs9JzxkaXYgY2xhc3M9ImNoYXQtaW5mbyI+JysKKChfX3Q9KG1lc3NhZ2UpKT09bnVsbD8nJzpfX3QpKwonPC9kaXY+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIWxvZ2luX3BhbmVsJywgW10sZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24ob2JqKXsKdmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLHByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307CndpdGgob2JqfHx7fSl7Cl9fcCs9Jzxmb3JtIGlkPSJjb252ZXJzZS1sb2dpbiIgbWV0aG9kPSJwb3N0Ij5cbiAgICA8bGFiZWw+JysKKChfX3Q9KGxhYmVsX3VzZXJuYW1lKSk9PW51bGw/Jyc6X190KSsKJzwvbGFiZWw+XG4gICAgPGlucHV0IHR5cGU9InVzZXJuYW1lIiBuYW1lPSJqaWQiIHBsYWNlaG9sZGVyPSJVc2VybmFtZSI+XG4gICAgPGxhYmVsPicrCigoX190PShsYWJlbF9wYXNzd29yZCkpPT1udWxsPycnOl9fdCkrCic8L2xhYmVsPlxuICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIHBsYWNlaG9sZGVyPSJQYXNzd29yZCI+XG4gICAgPGlucHV0IGNsYXNzPSJsb2dpbi1zdWJtaXQiIHR5cGU9InN1Ym1pdCIgdmFsdWU9IicrCigoX190PShsYWJlbF9sb2dpbikpPT1udWxsPycnOl9fdCkrCiciPlxuICAgIDxzcGFuIGNsYXNzPSJjb25uLWZlZWRiYWNrIj48L3NwYW4+XG48L2Zvcm0+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIWxvZ2luX3RhYicsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8bGk+PGEgY2xhc3M9ImN1cnJlbnQiIGhyZWY9IiNsb2dpbiI+JysKKChfX3Q9KGxhYmVsX3NpZ25faW4pKT09bnVsbD8nJzpfX3QpKwonPC9hPjwvbGk+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIW1lc3NhZ2UnLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPGRpdiBjbGFzcz0iY2hhdC1tZXNzYWdlICcrCigoX190PShleHRyYV9jbGFzc2VzKSk9PW51bGw/Jyc6X190KSsKJyI+XG4gICAgPHNwYW4gY2xhc3M9ImNoYXQtbWVzc2FnZS0nKwooKF9fdD0oc2VuZGVyKSk9PW51bGw/Jyc6X190KSsKJyI+JysKKChfX3Q9KHRpbWUpKT09bnVsbD8nJzpfX3QpKwonICcrCigoX190PSh1c2VybmFtZSkpPT1udWxsPycnOl9fdCkrCic6Jm5ic3A7PC9zcGFuPlxuICAgIDxzcGFuIGNsYXNzPSJjaGF0LW1lc3NhZ2UtY29udGVudCI+JysKKChfX3Q9KG1lc3NhZ2UpKT09bnVsbD8nJzpfX3QpKwonPC9zcGFuPlxuPC9kaXY+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIW5ld19kYXknLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPHRpbWUgY2xhc3M9ImNoYXQtZGF0ZSIgZGF0ZXRpbWU9IicrCigoX190PShpc29kYXRlKSk9PW51bGw/Jyc6X190KSsKJyI+JysKKChfX3Q9KGRhdGVzdHJpbmcpKT09bnVsbD8nJzpfX3QpKwonPC90aW1lPlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFvY2N1cGFudCcsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8bGkgY2xhc3M9IicrCigoX190PShyb2xlKSk9PW51bGw/Jyc6X190KSsKJyJcbiAgICAnOwogaWYgKHJvbGUgPT09ICJtb2RlcmF0b3IiKSB7IApfX3ArPSdcbiAgICAgICB0aXRsZT0iJysKKChfX3Q9KGRlc2NfbW9kZXJhdG9yKSk9PW51bGw/Jyc6X190KSsKJyJcbiAgICAnOwogfSAKX19wKz0nXG4gICAgJzsKIGlmIChyb2xlID09PSAicGFydGljaXBhbnQiKSB7IApfX3ArPSdcbiAgICAgICB0aXRsZT0iJysKKChfX3Q9KGRlc2NfcGFydGljaXBhbnQpKT09bnVsbD8nJzpfX3QpKwonIlxuICAgICc7CiB9IApfX3ArPSdcbiAgICAnOwogaWYgKHJvbGUgPT09ICJ2aXNpdG9yIikgeyAKX19wKz0nXG4gICAgICAgdGl0bGU9IicrCigoX190PShkZXNjX3Zpc2l0b3IpKT09bnVsbD8nJzpfX3QpKwonIlxuICAgICc7CiB9IApfX3ArPSdcbj4nKwooKF9fdD0obmljaykpPT1udWxsPycnOl9fdCkrCic8L2xpPlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFwZW5kaW5nX2NvbnRhY3QnLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPHNwYW4gY2xhc3M9InBlbmRpbmctY29udGFjdC1uYW1lIj4nKwooKF9fdD0oZnVsbG5hbWUpKT09bnVsbD8nJzpfX3QpKwonPC9zcGFuPiA8YSBjbGFzcz0icmVtb3ZlLXhtcHAtY29udGFjdCBpY29uLXJlbW92ZSIgdGl0bGU9IicrCigoX190PShkZXNjX3JlbW92ZSkpPT1udWxsPycnOl9fdCkrCiciIGhyZWY9IiMiPjwvYT5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhcGVuZGluZ19jb250YWN0cycsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8ZHQgaWQ9InBlbmRpbmcteG1wcC1jb250YWN0cyI+PGEgaHJlZj0iIyIgY2xhc3M9Imdyb3VwLXRvZ2dsZSBpY29uLScrCigoX190PSh0b2dnbGVfc3RhdGUpKT09bnVsbD8nJzpfX3QpKwonIiB0aXRsZT0iJysKKChfX3Q9KGRlc2NfZ3JvdXBfdG9nZ2xlKSk9PW51bGw/Jyc6X190KSsKJyI+JysKKChfX3Q9KGxhYmVsX3BlbmRpbmdfY29udGFjdHMpKT09bnVsbD8nJzpfX3QpKwonPC9hPjwvZHQ+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIXJlcXVlc3RpbmdfY29udGFjdCcsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8c3BhbiBjbGFzcz0icmVxLWNvbnRhY3QtbmFtZSI+JysKKChfX3Q9KGZ1bGxuYW1lKSk9PW51bGw/Jyc6X190KSsKJzwvc3Bhbj5cbjxzcGFuIGNsYXNzPSJyZXF1ZXN0LWFjdGlvbnMiPlxuICAgIDxhIGNsYXNzPSJhY2NlcHQteG1wcC1yZXF1ZXN0IGljb24tY2hlY2ttYXJrIiB0aXRsZT0iJysKKChfX3Q9KGRlc2NfYWNjZXB0KSk9PW51bGw/Jyc6X190KSsKJyIgaHJlZj0iIyI+PC9hPlxuICAgIDxhIGNsYXNzPSJkZWNsaW5lLXhtcHAtcmVxdWVzdCBpY29uLWNsb3NlIiB0aXRsZT0iJysKKChfX3Q9KGRlc2NfZGVjbGluZSkpPT1udWxsPycnOl9fdCkrCiciIGhyZWY9IiMiPjwvYT5cbjwvc3Bhbj5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhcmVxdWVzdGluZ19jb250YWN0cycsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8ZHQgaWQ9InhtcHAtY29udGFjdC1yZXF1ZXN0cyI+PGEgaHJlZj0iIyIgY2xhc3M9Imdyb3VwLXRvZ2dsZSBpY29uLScrCigoX190PSh0b2dnbGVfc3RhdGUpKT09bnVsbD8nJzpfX3QpKwonIiB0aXRsZT0iJysKKChfX3Q9KGRlc2NfZ3JvdXBfdG9nZ2xlKSk9PW51bGw/Jyc6X190KSsKJyI+JysKKChfX3Q9KGxhYmVsX2NvbnRhY3RfcmVxdWVzdHMpKT09bnVsbD8nJzpfX3QpKwonPC9hPjwvZHQ+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIXJvb21fZGVzY3JpcHRpb24nLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPCEtLSBGSVhNRTogY2hlY2sgbWFya3VwIGluIG1vY2t1cCAtLT5cbjxkaXYgY2xhc3M9InJvb20taW5mbyI+XG48cCBjbGFzcz0icm9vbS1pbmZvIj48c3Ryb25nPicrCigoX190PShsYWJlbF9kZXNjKSk9PW51bGw/Jyc6X190KSsKJzwvc3Ryb25nPiAnKwooKF9fdD0oZGVzYykpPT1udWxsPycnOl9fdCkrCic8L3A+XG48cCBjbGFzcz0icm9vbS1pbmZvIj48c3Ryb25nPicrCigoX190PShsYWJlbF9vY2MpKT09bnVsbD8nJzpfX3QpKwonPC9zdHJvbmc+ICcrCigoX190PShvY2MpKT09bnVsbD8nJzpfX3QpKwonPC9wPlxuPHAgY2xhc3M9InJvb20taW5mbyI+PHN0cm9uZz4nKwooKF9fdD0obGFiZWxfZmVhdHVyZXMpKT09bnVsbD8nJzpfX3QpKwonPC9zdHJvbmc+XG4gICAgPHVsPlxuICAgICAgICAnOwogaWYgKHBhc3N3b3JkcHJvdGVjdGVkKSB7IApfX3ArPSdcbiAgICAgICAgPGxpIGNsYXNzPSJyb29tLWluZm8gbG9ja2VkIj4nKwooKF9fdD0obGFiZWxfcmVxdWlyZXNfYXV0aCkpPT1udWxsPycnOl9fdCkrCic8L2xpPlxuICAgICAgICAnOwogfSAKX19wKz0nXG4gICAgICAgICc7CiBpZiAoaGlkZGVuKSB7IApfX3ArPSdcbiAgICAgICAgPGxpIGNsYXNzPSJyb29tLWluZm8iPicrCigoX190PShsYWJlbF9oaWRkZW4pKT09bnVsbD8nJzpfX3QpKwonPC9saT5cbiAgICAgICAgJzsKIH0gCl9fcCs9J1xuICAgICAgICAnOwogaWYgKG1lbWJlcnNvbmx5KSB7IApfX3ArPSdcbiAgICAgICAgPGxpIGNsYXNzPSJyb29tLWluZm8iPicrCigoX190PShsYWJlbF9yZXF1aXJlc19pbnZpdGUpKT09bnVsbD8nJzpfX3QpKwonPC9saT5cbiAgICAgICAgJzsKIH0gCl9fcCs9J1xuICAgICAgICAnOwogaWYgKG1vZGVyYXRlZCkgeyAKX19wKz0nXG4gICAgICAgIDxsaSBjbGFzcz0icm9vbS1pbmZvIj4nKwooKF9fdD0obGFiZWxfbW9kZXJhdGVkKSk9PW51bGw/Jyc6X190KSsKJzwvbGk+XG4gICAgICAgICc7CiB9IApfX3ArPSdcbiAgICAgICAgJzsKIGlmIChub25hbm9ueW1vdXMpIHsgCl9fcCs9J1xuICAgICAgICA8bGkgY2xhc3M9InJvb20taW5mbyI+JysKKChfX3Q9KGxhYmVsX25vbl9hbm9uKSk9PW51bGw/Jyc6X190KSsKJzwvbGk+XG4gICAgICAgICc7CiB9IApfX3ArPSdcbiAgICAgICAgJzsKIGlmIChvcGVuKSB7IApfX3ArPSdcbiAgICAgICAgPGxpIGNsYXNzPSJyb29tLWluZm8iPicrCigoX190PShsYWJlbF9vcGVuX3Jvb20pKT09bnVsbD8nJzpfX3QpKwonPC9saT5cbiAgICAgICAgJzsKIH0gCl9fcCs9J1xuICAgICAgICAnOwogaWYgKHBlcnNpc3RlbnQpIHsgCl9fcCs9J1xuICAgICAgICA8bGkgY2xhc3M9InJvb20taW5mbyI+JysKKChfX3Q9KGxhYmVsX3Blcm1hbmVudF9yb29tKSk9PW51bGw/Jyc6X190KSsKJzwvbGk+XG4gICAgICAgICc7CiB9IApfX3ArPSdcbiAgICAgICAgJzsKIGlmIChwdWJsaWNyb29tKSB7IApfX3ArPSdcbiAgICAgICAgPGxpIGNsYXNzPSJyb29tLWluZm8iPicrCigoX190PShsYWJlbF9wdWJsaWMpKT09bnVsbD8nJzpfX3QpKwonPC9saT5cbiAgICAgICAgJzsKIH0gCl9fcCs9J1xuICAgICAgICAnOwogaWYgKHNlbWlhbm9ueW1vdXMpIHsgCl9fcCs9J1xuICAgICAgICA8bGkgY2xhc3M9InJvb20taW5mbyI+JysKKChfX3Q9KGxhYmVsX3NlbWlfYW5vbikpPT1udWxsPycnOl9fdCkrCic8L2xpPlxuICAgICAgICAnOwogfSAKX19wKz0nXG4gICAgICAgICc7CiBpZiAodGVtcG9yYXJ5KSB7IApfX3ArPSdcbiAgICAgICAgPGxpIGNsYXNzPSJyb29tLWluZm8iPicrCigoX190PShsYWJlbF90ZW1wX3Jvb20pKT09bnVsbD8nJzpfX3QpKwonPC9saT5cbiAgICAgICAgJzsKIH0gCl9fcCs9J1xuICAgICAgICAnOwogaWYgKHVubW9kZXJhdGVkKSB7IApfX3ArPSdcbiAgICAgICAgPGxpIGNsYXNzPSJyb29tLWluZm8iPicrCigoX190PShsYWJlbF91bm1vZGVyYXRlZCkpPT1udWxsPycnOl9fdCkrCic8L2xpPlxuICAgICAgICAnOwogfSAKX19wKz0nXG4gICAgPC91bD5cbjwvcD5cbjwvZGl2PlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFyb29tX2l0ZW0nLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPGRkIGNsYXNzPSJhdmFpbGFibGUtY2hhdHJvb20iPlxuPGEgY2xhc3M9Im9wZW4tcm9vbSIgZGF0YS1yb29tLWppZD0iJysKKChfX3Q9KGppZCkpPT1udWxsPycnOl9fdCkrCiciXG4gICB0aXRsZT0iJysKKChfX3Q9KG9wZW5fdGl0bGUpKT09bnVsbD8nJzpfX3QpKwonIiBocmVmPSIjIj4nKwooKF9fdD0obmFtZSkpPT1udWxsPycnOl9fdCkrCic8L2E+XG48YSBjbGFzcz0icm9vbS1pbmZvIGljb24tcm9vbS1pbmZvIiBkYXRhLXJvb20tamlkPSInKwooKF9fdD0oamlkKSk9PW51bGw/Jyc6X190KSsKJyJcbiAgIHRpdGxlPSInKwooKF9fdD0oaW5mb190aXRsZSkpPT1udWxsPycnOl9fdCkrCiciIGhyZWY9IiMiPiZuYnNwOzwvYT5cbjwvZGQ+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIXJvb21fcGFuZWwnLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPGZvcm0gY2xhc3M9ImFkZC1jaGF0cm9vbSIgYWN0aW9uPSIiIG1ldGhvZD0icG9zdCI+XG4gICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImNoYXRyb29tIiBjbGFzcz0ibmV3LWNoYXRyb29tLW5hbWUiXG4gICAgICAgIHBsYWNlaG9sZGVyPSInKwooKF9fdD0obGFiZWxfcm9vbV9uYW1lKSk9PW51bGw/Jyc6X190KSsKJyIvPlxuICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJuaWNrIiBjbGFzcz0ibmV3LWNoYXRyb29tLW5pY2siXG4gICAgICAgIHBsYWNlaG9sZGVyPSInKwooKF9fdD0obGFiZWxfbmlja25hbWUpKT09bnVsbD8nJzpfX3QpKwonIi8+XG4gICAgPGlucHV0IHR5cGU9IicrCigoX190PShzZXJ2ZXJfaW5wdXRfdHlwZSkpPT1udWxsPycnOl9fdCkrCiciIG5hbWU9InNlcnZlciIgY2xhc3M9Im5ldy1jaGF0cm9vbS1zZXJ2ZXIiXG4gICAgICAgIHBsYWNlaG9sZGVyPSInKwooKF9fdD0obGFiZWxfc2VydmVyKSk9PW51bGw/Jyc6X190KSsKJyIvPlxuICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImpvaW4iIHZhbHVlPSInKwooKF9fdD0obGFiZWxfam9pbikpPT1udWxsPycnOl9fdCkrCiciLz5cbiAgICA8aW5wdXQgdHlwZT0iYnV0dG9uIiBuYW1lPSJzaG93IiBpZD0ic2hvdy1yb29tcyIgdmFsdWU9IicrCigoX190PShsYWJlbF9zaG93X3Jvb21zKSk9PW51bGw/Jyc6X190KSsKJyIvPlxuPC9mb3JtPlxuPGRsIGlkPSJhdmFpbGFibGUtY2hhdHJvb21zIj48L2RsPlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFyb3N0ZXInLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPGlucHV0IHN0eWxlPSJkaXNwbGF5OiBub25lOyIgY2xhc3M9InJvc3Rlci1maWx0ZXIiIHBsYWNlaG9sZGVyPSInKwooKF9fdD0ocGxhY2Vob2xkZXIpKT09bnVsbD8nJzpfX3QpKwonIj5cbjxzZWxlY3Qgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IiBjbGFzcz0iZmlsdGVyLXR5cGUiPlxuICAgIDxvcHRpb24gdmFsdWU9ImNvbnRhY3RzIj4nKwooKF9fdD0obGFiZWxfY29udGFjdHMpKT09bnVsbD8nJzpfX3QpKwonPC9vcHRpb24+XG4gICAgPG9wdGlvbiB2YWx1ZT0iZ3JvdXBzIj4nKwooKF9fdD0obGFiZWxfZ3JvdXBzKSk9PW51bGw/Jyc6X190KSsKJzwvb3B0aW9uPlxuPC9zZWxlY3Q+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIXJvc3Rlcl9pdGVtJywgW10sZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24ob2JqKXsKdmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLHByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307CndpdGgob2JqfHx7fSl7Cl9fcCs9JzxhIGNsYXNzPSJvcGVuLWNoYXQiIHRpdGxlPSInKwooKF9fdD0oZGVzY19jaGF0KSk9PW51bGw/Jyc6X190KSsKJyIgaHJlZj0iIyI+PHNwYW4gY2xhc3M9Imljb24tJysKKChfX3Q9KGNoYXRfc3RhdHVzKSk9PW51bGw/Jyc6X190KSsKJyIgdGl0bGU9IicrCigoX190PShkZXNjX3N0YXR1cykpPT1udWxsPycnOl9fdCkrCiciPjwvc3Bhbj4nKwooKF9fdD0oZnVsbG5hbWUpKT09bnVsbD8nJzpfX3QpKwonPC9hPlxuPGEgY2xhc3M9InJlbW92ZS14bXBwLWNvbnRhY3QgaWNvbi1yZW1vdmUiIHRpdGxlPSInKwooKF9fdD0oZGVzY19yZW1vdmUpKT09bnVsbD8nJzpfX3QpKwonIiBocmVmPSIjIj48L2E+XG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIXNlbGVjdF9vcHRpb24nLCBbXSxmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbihvYmopewp2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4scHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTsKd2l0aChvYmp8fHt9KXsKX19wKz0nPG9wdGlvbiB2YWx1ZT0iJysKKChfX3Q9KHZhbHVlKSk9PW51bGw/Jyc6X190KSsKJyI+JysKKChfX3Q9KGxhYmVsKSk9PW51bGw/Jyc6X190KSsKJzwvb3B0aW9uPlxuJzsKfQpyZXR1cm4gX19wOwp9OyB9KTsKCgpkZWZpbmUoJ3RwbCFzZWFyY2hfY29udGFjdCcsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8bGk+XG4gICAgPGZvcm0gY2xhc3M9InNlYXJjaC14bXBwLWNvbnRhY3QiPlxuICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCJcbiAgICAgICAgICAgIG5hbWU9ImlkZW50aWZpZXIiXG4gICAgICAgICAgICBjbGFzcz0idXNlcm5hbWUiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0iJysKKChfX3Q9KGxhYmVsX2NvbnRhY3RfbmFtZSkpPT1udWxsPycnOl9fdCkrCiciLz5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiPicrCigoX190PShsYWJlbF9zZWFyY2gpKT09bnVsbD8nJzpfX3QpKwonPC9idXR0b24+XG4gICAgPC9mb3JtPlxuPC9saT5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhc3RhdHVzX29wdGlvbicsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8bGk+XG4gICAgPGEgaHJlZj0iIyIgY2xhc3M9IicrCigoX190PSggdmFsdWUgKSk9PW51bGw/Jyc6X190KSsKJyIgZGF0YS12YWx1ZT0iJysKKChfX3Q9KCB2YWx1ZSApKT09bnVsbD8nJzpfX3QpKwonIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tJysKKChfX3Q9KCB2YWx1ZSApKT09bnVsbD8nJzpfX3QpKwonIj48L3NwYW4+XG4gICAgICAgICcrCigoX190PSggdGV4dCApKT09bnVsbD8nJzpfX3QpKwonXG4gICAgPC9hPlxuPC9saT5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhdG9nZ2xlX2NoYXRzJywgW10sZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24ob2JqKXsKdmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLHByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307CndpdGgob2JqfHx7fSl7Cl9fcCs9JycrCigoX190PShNaW5pbWl6ZWQpKT09bnVsbD8nJzpfX3QpKwonIDxzcGFuIGlkPSJtaW5pbWl6ZWQtY291bnQiPignKwooKF9fdD0obnVtX21pbmltaXplZCkpPT1udWxsPycnOl9fdCkrCicpPC9zcGFuPlxuPHNwYW4gY2xhc3M9InVucmVhZC1tZXNzYWdlLWNvdW50IlxuICAgICc7CiBpZiAoIW51bV91bnJlYWQpIHsgCl9fcCs9JyBzdHlsZT0iZGlzcGxheTogbm9uZSIgJzsKIH0gCl9fcCs9J1xuICAgIGhyZWY9IiMiPicrCigoX190PShudW1fdW5yZWFkKSk9PW51bGw/Jyc6X190KSsKJzwvc3Bhbj5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgoKZGVmaW5lKCd0cGwhdG9vbGJhcicsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPScnOwogaWYgKHNob3dfZW1vdGljb25zKSAgeyAKX19wKz0nXG4gICAgPGxpIGNsYXNzPSJ0b2dnbGUtc21pbGV5IGljb24taGFwcHkiIHRpdGxlPSJJbnNlcnQgYSBzbWlsZXJ5Ij5cbiAgICAgICAgPHVsPlxuICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJpY29uLXNtaWxleSIgaHJlZj0iIyIgZGF0YS1lbW90aWNvbj0iOikiPjwvYT48L2xpPlxuICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJpY29uLXdpbmsiIGhyZWY9IiMiIGRhdGEtZW1vdGljb249IjspIj48L2E+PC9saT5cbiAgICAgICAgICAgIDxsaT48YSBjbGFzcz0iaWNvbi1ncmluIiBocmVmPSIjIiBkYXRhLWVtb3RpY29uPSI6RCI+PC9hPjwvbGk+XG4gICAgICAgICAgICA8bGk+PGEgY2xhc3M9Imljb24tdG9uZ3VlIiBocmVmPSIjIiBkYXRhLWVtb3RpY29uPSI6UCI+PC9hPjwvbGk+XG4gICAgICAgICAgICA8bGk+PGEgY2xhc3M9Imljb24tY29vbCIgaHJlZj0iIyIgZGF0YS1lbW90aWNvbj0iOCkiPjwvYT48L2xpPlxuICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJpY29uLWV2aWwiIGhyZWY9IiMiIGRhdGEtZW1vdGljb249Ij46KSI+PC9hPjwvbGk+XG4gICAgICAgICAgICA8bGk+PGEgY2xhc3M9Imljb24tY29uZnVzZWQiIGhyZWY9IiMiIGRhdGEtZW1vdGljb249IjpTIj48L2E+PC9saT5cbiAgICAgICAgICAgIDxsaT48YSBjbGFzcz0iaWNvbi13b25kZXJpbmciIGhyZWY9IiMiIGRhdGEtZW1vdGljb249IjpcXCI+PC9hPjwvbGk+XG4gICAgICAgICAgICA8bGk+PGEgY2xhc3M9Imljb24tYW5ncnkiIGhyZWY9IiMiIGRhdGEtZW1vdGljb249Ij46KCI+PC9hPjwvbGk+XG4gICAgICAgICAgICA8bGk+PGEgY2xhc3M9Imljb24tc2FkIiBocmVmPSIjIiBkYXRhLWVtb3RpY29uPSI6KCI+PC9hPjwvbGk+XG4gICAgICAgICAgICA8bGk+PGEgY2xhc3M9Imljb24tc2hvY2tlZCIgaHJlZj0iIyIgZGF0YS1lbW90aWNvbj0iOk8iPjwvYT48L2xpPlxuICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJpY29uLXRodW1icy11cCIgaHJlZj0iIyIgZGF0YS1lbW90aWNvbj0iKF4uXiliIj48L2E+PC9saT5cbiAgICAgICAgICAgIDxsaT48YSBjbGFzcz0iaWNvbi1oZWFydCIgaHJlZj0iIyIgZGF0YS1lbW90aWNvbj0iPDMiPjwvYT48L2xpPlxuICAgICAgICA8L3VsPlxuICAgIDwvbGk+XG4nOwogfSAKX19wKz0nXG4nOwogaWYgKHNob3dfY2FsbF9idXR0b24pICB7IApfX3ArPSdcbjxsaSBjbGFzcz0idG9nZ2xlLWNhbGwiPjxhIGNsYXNzPSJpY29uLXBob25lIiB0aXRsZT0iJysKKChfX3Q9KGxhYmVsX3N0YXJ0X2NhbGwpKT09bnVsbD8nJzpfX3QpKwonIj48L2E+PC9saT5cbic7CiB9IApfX3ArPSdcbic7CiBpZiAoc2hvd19wYXJ0aWNpcGFudHNfdG9nZ2xlKSAgeyAKX19wKz0nXG48bGkgY2xhc3M9InRvZ2dsZS1wYXJ0aWNpcGFudHMiPjxhIGNsYXNzPSJpY29uLWhpZGUtdXNlcnMiIHRpdGxlPSInKwooKF9fdD0obGFiZWxfaGlkZV9wYXJ0aWNpcGFudHMpKT09bnVsbD8nJzpfX3QpKwonIj48L2E+PC9saT5cbic7CiB9IApfX3ArPSdcbic7CiBpZiAoc2hvd19jbGVhcl9idXR0b24pICB7IApfX3ArPSdcbjxsaSBjbGFzcz0idG9nZ2xlLWNsZWFyIj48YSBjbGFzcz0iaWNvbi1yZW1vdmUiIHRpdGxlPSInKwooKF9fdD0obGFiZWxfY2xlYXIpKT09bnVsbD8nJzpfX3QpKwonIj48L2E+PC9saT5cbic7CiB9IApfX3ArPSdcbic7CiBpZiAoYWxsb3dfb3RyKSAgeyAKX19wKz0nXG4gICAgPGxpIGNsYXNzPSJ0b2dnbGUtb3RyICcrCigoX190PShvdHJfc3RhdHVzX2NsYXNzKSk9PW51bGw/Jyc6X190KSsKJyIgdGl0bGU9IicrCigoX190PShvdHJfdG9vbHRpcCkpPT1udWxsPycnOl9fdCkrCiciPlxuICAgICAgICA8c3BhbiBjbGFzcz0iY2hhdC10b29sYmFyLXRleHQiPicrCigoX190PShvdHJfdHJhbnNsYXRlZF9zdGF0dXMpKT09bnVsbD8nJzpfX3QpKwonPC9zcGFuPlxuICAgICAgICAnOwogaWYgKG90cl9zdGF0dXMgPT0gVU5FTkNSWVBURUQpIHsgCl9fcCs9J1xuICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tdW5sb2NrZWQiPjwvc3Bhbj5cbiAgICAgICAgJzsKIH0gCl9fcCs9J1xuICAgICAgICAnOwogaWYgKG90cl9zdGF0dXMgPT0gVU5WRVJJRklFRCkgeyAKX19wKz0nXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1sb2NrIj48L3NwYW4+XG4gICAgICAgICc7CiB9IApfX3ArPSdcbiAgICAgICAgJzsKIGlmIChvdHJfc3RhdHVzID09IFZFUklGSUVEKSB7IApfX3ArPSdcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWxvY2siPjwvc3Bhbj5cbiAgICAgICAgJzsKIH0gCl9fcCs9J1xuICAgICAgICAnOwogaWYgKG90cl9zdGF0dXMgPT0gRklOSVNIRUQpIHsgCl9fcCs9J1xuICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tdW5sb2NrZWQiPjwvc3Bhbj5cbiAgICAgICAgJzsKIH0gCl9fcCs9J1xuICAgICAgICA8dWw+XG4gICAgICAgICAgICAnOwogaWYgKG90cl9zdGF0dXMgPT0gVU5FTkNSWVBURUQpIHsgCl9fcCs9J1xuICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJzdGFydC1vdHIiIGhyZWY9IiMiPicrCigoX190PShsYWJlbF9zdGFydF9lbmNyeXB0ZWRfY29udmVyc2F0aW9uKSk9PW51bGw/Jyc6X190KSsKJzwvYT48L2xpPlxuICAgICAgICAgICAgJzsKIH0gCl9fcCs9J1xuICAgICAgICAgICAgJzsKIGlmIChvdHJfc3RhdHVzICE9IFVORU5DUllQVEVEKSB7IApfX3ArPSdcbiAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ic3RhcnQtb3RyIiBocmVmPSIjIj4nKwooKF9fdD0obGFiZWxfcmVmcmVzaF9lbmNyeXB0ZWRfY29udmVyc2F0aW9uKSk9PW51bGw/Jyc6X190KSsKJzwvYT48L2xpPlxuICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJlbmQtb3RyIiBocmVmPSIjIj4nKwooKF9fdD0obGFiZWxfZW5kX2VuY3J5cHRlZF9jb252ZXJzYXRpb24pKT09bnVsbD8nJzpfX3QpKwonPC9hPjwvbGk+XG4gICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9ImF1dGgtb3RyIiBkYXRhLXNjaGVtZT0ic21wIiBocmVmPSIjIj4nKwooKF9fdD0obGFiZWxfdmVyaWZ5X3dpdGhfc21wKSk9PW51bGw/Jyc6X190KSsKJzwvYT48L2xpPlxuICAgICAgICAgICAgJzsKIH0gCl9fcCs9J1xuICAgICAgICAgICAgJzsKIGlmIChvdHJfc3RhdHVzID09IFVOVkVSSUZJRUQpIHsgCl9fcCs9J1xuICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJhdXRoLW90ciIgZGF0YS1zY2hlbWU9ImZpbmdlcnByaW50IiBocmVmPSIjIj4nKwooKF9fdD0obGFiZWxfdmVyaWZ5X3dpdGhfZmluZ2VycHJpbnRzKSk9PW51bGw/Jyc6X190KSsKJzwvYT48L2xpPlxuICAgICAgICAgICAgJzsKIH0gCl9fcCs9J1xuICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHA6Ly93d3cuY3lwaGVycHVua3MuY2Evb3RyL2hlbHAvMy4yLjAvbGV2ZWxzLnBocCIgdGFyZ2V0PSJfYmxhbmsiPicrCigoX190PShsYWJlbF93aGF0c190aGlzKSk9PW51bGw/Jyc6X190KSsKJzwvYT48L2xpPlxuICAgICAgICA8L3VsPlxuICAgIDwvbGk+XG4nOwogfSAKX19wKz0nXG4nOwp9CnJldHVybiBfX3A7Cn07IH0pOwoKCmRlZmluZSgndHBsIXRyaW1tZWRfY2hhdCcsIFtdLGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iail7CnZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9Owp3aXRoKG9ianx8e30pewpfX3ArPSc8YSBjbGFzcz0iY2xvc2UtY2hhdGJveC1idXR0b24gaWNvbi1jbG9zZSI+PC9hPlxuPGEgY2xhc3M9ImNoYXQtaGVhZC1tZXNzYWdlLWNvdW50IiBcbiAgICAnOwogaWYgKCFudW1fdW5yZWFkKSB7IApfX3ArPScgc3R5bGU9ImRpc3BsYXk6IG5vbmUiICc7CiB9IApfX3ArPSdcbiAgICBocmVmPSIjIj4nKwooKF9fdD0obnVtX3VucmVhZCkpPT1udWxsPycnOl9fdCkrCic8L2E+XG48YSBocmVmPSIjIiBjbGFzcz0icmVzdG9yZS1jaGF0IiB0aXRsZT0iJysKKChfX3Q9KHRvb2x0aXApKT09bnVsbD8nJzpfX3QpKwonIj5cbiAgICAnKwooKF9fdD0oIHRpdGxlICkpPT1udWxsPycnOl9fdCkrCidcbjwvYT5cbic7Cn0KcmV0dXJuIF9fcDsKfTsgfSk7CgpkZWZpbmUoImNvbnZlcnNlLXRlbXBsYXRlcyIsIFsKICAgICJ0cGwhYWN0aW9uIiwKICAgICJ0cGwhYWRkX2NvbnRhY3RfZHJvcGRvd24iLAogICAgInRwbCFhZGRfY29udGFjdF9mb3JtIiwKICAgICJ0cGwhY2hhbmdlX3N0YXR1c19tZXNzYWdlIiwKICAgICJ0cGwhY2hhdF9zdGF0dXMiLAogICAgInRwbCFjaGF0YXJlYSIsCiAgICAidHBsIWNoYXRib3giLAogICAgInRwbCFjaGF0cm9vbSIsCiAgICAidHBsIWNoYXRyb29tX3Bhc3N3b3JkX2Zvcm0iLAogICAgInRwbCFjaGF0cm9vbV9zaWRlYmFyIiwKICAgICJ0cGwhY2hhdHJvb21zX3RhYiIsCiAgICAidHBsIWNoYXRzX3BhbmVsIiwKICAgICJ0cGwhY2hvb3NlX3N0YXR1cyIsCiAgICAidHBsIWNvbnRhY3RzX3BhbmVsIiwKICAgICJ0cGwhY29udGFjdHNfdGFiIiwKICAgICJ0cGwhY29udHJvbGJveCIsCiAgICAidHBsIWNvbnRyb2xib3hfdG9nZ2xlIiwKICAgICJ0cGwhZmllbGQiLAogICAgInRwbCFmb3JtX2NoZWNrYm94IiwKICAgICJ0cGwhZm9ybV9pbnB1dCIsCiAgICAidHBsIWZvcm1fc2VsZWN0IiwKICAgICJ0cGwhZ3JvdXBfaGVhZGVyIiwKICAgICJ0cGwhaW5mbyIsCiAgICAidHBsIWxvZ2luX3BhbmVsIiwKICAgICJ0cGwhbG9naW5fdGFiIiwKICAgICJ0cGwhbWVzc2FnZSIsCiAgICAidHBsIW5ld19kYXkiLAogICAgInRwbCFvY2N1cGFudCIsCiAgICAidHBsIXBlbmRpbmdfY29udGFjdCIsCiAgICAidHBsIXBlbmRpbmdfY29udGFjdHMiLAogICAgInRwbCFyZXF1ZXN0aW5nX2NvbnRhY3QiLAogICAgInRwbCFyZXF1ZXN0aW5nX2NvbnRhY3RzIiwKICAgICJ0cGwhcm9vbV9kZXNjcmlwdGlvbiIsCiAgICAidHBsIXJvb21faXRlbSIsCiAgICAidHBsIXJvb21fcGFuZWwiLAogICAgInRwbCFyb3N0ZXIiLAogICAgInRwbCFyb3N0ZXJfaXRlbSIsCiAgICAidHBsIXNlbGVjdF9vcHRpb24iLAogICAgInRwbCFzZWFyY2hfY29udGFjdCIsCiAgICAidHBsIXN0YXR1c19vcHRpb24iLAogICAgInRwbCF0b2dnbGVfY2hhdHMiLAogICAgInRwbCF0b29sYmFyIiwKICAgICJ0cGwhdHJpbW1lZF9jaGF0IgpdLCBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gewogICAgICAgIGFjdGlvbjogICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXSwKICAgICAgICBhZGRfY29udGFjdF9kcm9wZG93bjogICBhcmd1bWVudHNbMV0sCiAgICAgICAgYWRkX2NvbnRhY3RfZm9ybTogICAgICAgYXJndW1lbnRzWzJdLAogICAgICAgIGNoYW5nZV9zdGF0dXNfbWVzc2FnZTogIGFyZ3VtZW50c1szXSwKICAgICAgICBjaGF0X3N0YXR1czogICAgICAgICAgICBhcmd1bWVudHNbNF0sCiAgICAgICAgY2hhdGFyZWE6ICAgICAgICAgICAgICAgYXJndW1lbnRzWzVdLAogICAgICAgIGNoYXRib3g6ICAgICAgICAgICAgICAgIGFyZ3VtZW50c1s2XSwKICAgICAgICBjaGF0cm9vbTogICAgICAgICAgICAgICBhcmd1bWVudHNbN10sCiAgICAgICAgY2hhdHJvb21fcGFzc3dvcmRfZm9ybTogYXJndW1lbnRzWzhdLAogICAgICAgIGNoYXRyb29tX3NpZGViYXI6ICAgICAgIGFyZ3VtZW50c1s5XSwKICAgICAgICBjaGF0cm9vbXNfdGFiOiAgICAgICAgICBhcmd1bWVudHNbMTBdLAogICAgICAgIGNoYXRzX3BhbmVsOiAgICAgICAgICAgIGFyZ3VtZW50c1sxMV0sCiAgICAgICAgY2hvb3NlX3N0YXR1czogICAgICAgICAgYXJndW1lbnRzWzEyXSwKICAgICAgICBjb250YWN0c19wYW5lbDogICAgICAgICBhcmd1bWVudHNbMTNdLAogICAgICAgIGNvbnRhY3RzX3RhYjogICAgICAgICAgIGFyZ3VtZW50c1sxNF0sCiAgICAgICAgY29udHJvbGJveDogICAgICAgICAgICAgYXJndW1lbnRzWzE1XSwKICAgICAgICBjb250cm9sYm94X3RvZ2dsZTogICAgICBhcmd1bWVudHNbMTZdLAogICAgICAgIGZpZWxkOiAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1sxN10sCiAgICAgICAgZm9ybV9jaGVja2JveDogICAgICAgICAgYXJndW1lbnRzWzE4XSwKICAgICAgICBmb3JtX2lucHV0OiAgICAgICAgICAgICBhcmd1bWVudHNbMTldLAogICAgICAgIGZvcm1fc2VsZWN0OiAgICAgICAgICAgIGFyZ3VtZW50c1syMF0sCiAgICAgICAgZ3JvdXBfaGVhZGVyOiAgICAgICAgICAgYXJndW1lbnRzWzIxXSwKICAgICAgICBpbmZvOiAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbMjJdLAogICAgICAgIGxvZ2luX3BhbmVsOiAgICAgICAgICAgIGFyZ3VtZW50c1syM10sCiAgICAgICAgbG9naW5fdGFiOiAgICAgICAgICAgICAgYXJndW1lbnRzWzI0XSwKICAgICAgICBtZXNzYWdlOiAgICAgICAgICAgICAgICBhcmd1bWVudHNbMjVdLAogICAgICAgIG5ld19kYXk6ICAgICAgICAgICAgICAgIGFyZ3VtZW50c1syNl0sCiAgICAgICAgb2NjdXBhbnQ6ICAgICAgICAgICAgICAgYXJndW1lbnRzWzI3XSwKICAgICAgICBwZW5kaW5nX2NvbnRhY3Q6ICAgICAgICBhcmd1bWVudHNbMjhdLAogICAgICAgIHBlbmRpbmdfY29udGFjdHM6ICAgICAgIGFyZ3VtZW50c1syOV0sCiAgICAgICAgcmVxdWVzdGluZ19jb250YWN0OiAgICAgYXJndW1lbnRzWzMwXSwKICAgICAgICByZXF1ZXN0aW5nX2NvbnRhY3RzOiAgICBhcmd1bWVudHNbMzFdLAogICAgICAgIHJvb21fZGVzY3JpcHRpb246ICAgICAgIGFyZ3VtZW50c1szMl0sCiAgICAgICAgcm9vbV9pdGVtOiAgICAgICAgICAgICAgYXJndW1lbnRzWzMzXSwKICAgICAgICByb29tX3BhbmVsOiAgICAgICAgICAgICBhcmd1bWVudHNbMzRdLAogICAgICAgIHJvc3RlcjogICAgICAgICAgICAgICAgIGFyZ3VtZW50c1szNV0sCiAgICAgICAgcm9zdGVyX2l0ZW06ICAgICAgICAgICAgYXJndW1lbnRzWzM2XSwKICAgICAgICBzZWxlY3Rfb3B0aW9uOiAgICAgICAgICBhcmd1bWVudHNbMzddLAogICAgICAgIHNlYXJjaF9jb250YWN0OiAgICAgICAgIGFyZ3VtZW50c1szOF0sCiAgICAgICAgc3RhdHVzX29wdGlvbjogICAgICAgICAgYXJndW1lbnRzWzM5XSwKICAgICAgICB0b2dnbGVfY2hhdHM6ICAgICAgICAgICBhcmd1bWVudHNbNDBdLAogICAgICAgIHRvb2xiYXI6ICAgICAgICAgICAgICAgIGFyZ3VtZW50c1s0MV0sCiAgICAgICAgdHJpbW1lZF9jaGF0OiAgICAgICAgICAgYXJndW1lbnRzWzQyXQogICAgfTsKfSk7CgovKiEKICogQ29udmVyc2UuanMgKFdlYi1iYXNlZCBYTVBQIGluc3RhbnQgbWVzc2FnaW5nIGNsaWVudCkKICogaHR0cDovL2NvbnZlcnNlanMub3JnCiAqCiAqIENvcHlyaWdodCAoYykgMjAxMiwgSmFuLUNhcmVsIEJyYW5kIDxqY0BvcGtvZGUuY29tPgogKiBMaWNlbnNlZCB1bmRlciB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSAoTVBMKQogKi8KCi8vIEFNRC9nbG9iYWwgcmVnaXN0cmF0aW9ucwooZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsKICAgICAgICBkZWZpbmUoImNvbnZlcnNlIiwKICAgICAgICAgICAgICBbImNvbnZlcnNlLWRlcGVuZGVuY2llcyIsICJjb252ZXJzZS10ZW1wbGF0ZXMiXSwKICAgICAgICAgICAgZnVuY3Rpb24gKGRlcGVuZGVuY2llcywgdGVtcGxhdGVzKSB7CiAgICAgICAgICAgICAgICB2YXIgb3RyID0gZGVwZW5kZW5jaWVzLm90cjsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3RyICE9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KAogICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMualF1ZXJ5LAogICAgICAgICAgICAgICAgICAgICAgICBfLAogICAgICAgICAgICAgICAgICAgICAgICBvdHIuT1RSLAogICAgICAgICAgICAgICAgICAgICAgICBvdHIuRFNBLAogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llcy5tb21lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llcy51dGlscwogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KAogICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMualF1ZXJ5LAogICAgICAgICAgICAgICAgICAgICAgICBfLAogICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVzLAogICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMubW9tZW50LAogICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMudXRpbHMKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcm9vdC5jb252ZXJzZSA9IGZhY3RvcnkoalF1ZXJ5LCBfLCBPVFIsIERTQSwgSlNULCBtb21lbnQsIHV0aWxzKTsKICAgIH0KfSh0aGlzLCBmdW5jdGlvbiAoJCwgXywgT1RSLCBEU0EsIHRlbXBsYXRlcywgbW9tZW50LCB1dGlscykgewogICAgLy8gCiAgICAvLyBDYW5ub3QgdXNlIHRoaXMgZHVlIHRvIFNhZmFyaSBidWcuCiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pjYnJhbmQvY29udmVyc2UuanMvaXNzdWVzLzE5NgogICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSAidW5kZWZpbmVkIiB8fCB0eXBlb2YgY29uc29sZS5sb2cgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgY29uc29sZSA9IHsgbG9nOiBmdW5jdGlvbiAoKSB7fSwgZXJyb3I6IGZ1bmN0aW9uICgpIHt9IH07CiAgICB9CgogICAgLy8gQ29uZmlndXJhdGlvbiBvZiB1bmRlcnNjb3JlIHRlbXBsYXRlcyAodGhpcyBjb25maWcgaXMgZGlzdGljdCB0byB0aGUKICAgIC8vIGNvbmZpZyBvZiByZXF1aXJlanMtdHBsIGluIG1haW4uanMpLiBUaGlzIG9uZSBpcyBmb3Igbm9ybWFsIGlubGluZQogICAgLy8gdGVtcGxhdGVzLgogICAgLy8gVXNlIE11c3RhY2hlIHN0eWxlIHN5bnRheCBmb3IgdmFyaWFibGUgaW50ZXJwb2xhdGlvbgogICAgXy50ZW1wbGF0ZVNldHRpbmdzID0gewogICAgICAgIGV2YWx1YXRlIDogL1x7XFsoW1xzXFNdKz8pXF1cfS9nLAogICAgICAgIGludGVycG9sYXRlIDogL1x7XHsoW1xzXFNdKz8pXH1cfS9nCiAgICB9OwoKICAgIHZhciBjb250YWlucyA9IGZ1bmN0aW9uIChhdHRyLCBxdWVyeSkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICBpZiAodHlwZW9mIGF0dHIgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBmYWxzZTsKICAgICAgICAgICAgICAgIF8uZWFjaChhdHRyLCBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgfHwgaXRlbS5nZXQoYSkudG9Mb3dlckNhc2UoKS5pbmRleE9mKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpICE9PSAtMTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhdHRyID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZ2V0KGF0dHIpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeS50b0xvd2VyQ2FzZSgpKSAhPT0gLTE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dyb25nIGF0dHJpYnV0ZSB0eXBlLiBNdXN0IGJlIHN0cmluZyBvciBhcnJheS4nKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9OwogICAgY29udGFpbnMubm90ID0gZnVuY3Rpb24gKGF0dHIsIHF1ZXJ5KSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgIHJldHVybiAhKGNvbnRhaW5zKGF0dHIsIHF1ZXJ5KShpdGVtKSk7CiAgICAgICAgfTsKICAgIH07CgogICAgLy8gWFhYOiB0aGVzZSBjYW4gcGVyaGFwcyBiZSBtb3ZlZCB0byBzcmMvcG9seWZpbGxzLmpzCiAgICBTdHJpbmcucHJvdG90eXBlLnNwbGl0T25jZSA9IGZ1bmN0aW9uIChkZWxpbWl0ZXIpIHsKICAgICAgICB2YXIgY29tcG9uZW50cyA9IHRoaXMuc3BsaXQoZGVsaW1pdGVyKTsKICAgICAgICByZXR1cm4gW2NvbXBvbmVudHMuc2hpZnQoKSwgY29tcG9uZW50cy5qb2luKGRlbGltaXRlcildOwogICAgfTsKCiAgICAkLmZuLmFkZEVtb3RpY29ucyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoY29udmVyc2UudmlzaWJsZV90b29sYmFyX2J1dHRvbnMuZW1vdGljb25zKSB7CiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgb2JqKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSAkKG9iaikuaHRtbCgpOwogICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyZndDs6XCkvZywgJzxzcGFuIGNsYXNzPSJlbW90aWNvbiBpY29uLWV2aWwiPjwvc3Bhbj4nKTsKICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC86XCkvZywgJzxzcGFuIGNsYXNzPSJlbW90aWNvbiBpY29uLXNtaWxleSI+PC9zcGFuPicpOwogICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzpcLVwpL2csICc8c3BhbiBjbGFzcz0iZW1vdGljb24gaWNvbi1zbWlsZXkiPjwvc3Bhbj4nKTsKICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC87XCkvZywgJzxzcGFuIGNsYXNzPSJlbW90aWNvbiBpY29uLXdpbmsiPjwvc3Bhbj4nKTsKICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC87XC1cKS9nLCAnPHNwYW4gY2xhc3M9ImVtb3RpY29uIGljb24td2luayI+PC9zcGFuPicpOwogICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzpEL2csICc8c3BhbiBjbGFzcz0iZW1vdGljb24gaWNvbi1ncmluIj48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvOlwtRC9nLCAnPHNwYW4gY2xhc3M9ImVtb3RpY29uIGljb24tZ3JpbiI+PC9zcGFuPicpOwogICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzpQL2csICc8c3BhbiBjbGFzcz0iZW1vdGljb24gaWNvbi10b25ndWUiPjwvc3Bhbj4nKTsKICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC86XC1QL2csICc8c3BhbiBjbGFzcz0iZW1vdGljb24gaWNvbi10b25ndWUiPjwvc3Bhbj4nKTsKICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC86cC9nLCAnPHNwYW4gY2xhc3M9ImVtb3RpY29uIGljb24tdG9uZ3VlIj48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvOlwtcC9nLCAnPHNwYW4gY2xhc3M9ImVtb3RpY29uIGljb24tdG9uZ3VlIj48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvOFwpL2csICc8c3BhbiBjbGFzcz0iZW1vdGljb24gaWNvbi1jb29sIj48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvOlMvZywgJzxzcGFuIGNsYXNzPSJlbW90aWNvbiBpY29uLWNvbmZ1c2VkIj48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvOlxcL2csICc8c3BhbiBjbGFzcz0iZW1vdGljb24gaWNvbi13b25kZXJpbmciPjwvc3Bhbj4nKTsKICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC86XC8gL2csICc8c3BhbiBjbGFzcz0iZW1vdGljb24gaWNvbi13b25kZXJpbmciPjwvc3Bhbj4nKTsKICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8mZ3Q7OlwoL2csICc8c3BhbiBjbGFzcz0iZW1vdGljb24gaWNvbi1hbmdyeSI+PC9zcGFuPicpOwogICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzpcKC9nLCAnPHNwYW4gY2xhc3M9ImVtb3RpY29uIGljb24tc2FkIj48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvOlwtXCgvZywgJzxzcGFuIGNsYXNzPSJlbW90aWNvbiBpY29uLXNhZCI+PC9zcGFuPicpOwogICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzpPL2csICc8c3BhbiBjbGFzcz0iZW1vdGljb24gaWNvbi1zaG9ja2VkIj48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvOlwtTy9nLCAnPHNwYW4gY2xhc3M9ImVtb3RpY29uIGljb24tc2hvY2tlZCI+PC9zcGFuPicpOwogICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1w9XC1PL2csICc8c3BhbiBjbGFzcz0iZW1vdGljb24gaWNvbi1zaG9ja2VkIj48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXChcXi5cXlwpYi9nLCAnPHNwYW4gY2xhc3M9ImVtb3RpY29uIGljb24tdGh1bWJzLXVwIj48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvJmx0OzMvZywgJzxzcGFuIGNsYXNzPSJlbW90aWNvbiBpY29uLWhlYXJ0Ij48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgJChvYmopLmh0bWwodGV4dCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CgogICAgdmFyIHBsYXlOb3RpZmljYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGF1ZGlvOwogICAgICAgIGlmIChjb252ZXJzZS5wbGF5X3NvdW5kcyAmJiB0eXBlb2YgQXVkaW8gIT09ICJ1bmRlZmluZWQiKXsKICAgICAgICAgICAgYXVkaW8gPSBuZXcgQXVkaW8oInNvdW5kcy9tc2dfcmVjZWl2ZWQub2dnIik7CiAgICAgICAgICAgIGlmIChhdWRpby5jYW5QbGF5VHlwZSgnL2F1ZGlvL29nZycpKSB7CiAgICAgICAgICAgICAgICBhdWRpby5wbGF5KCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhdWRpbyA9IG5ldyBBdWRpbygiL3NvdW5kcy9tc2dfcmVjZWl2ZWQubXAzIik7CiAgICAgICAgICAgICAgICBhdWRpby5wbGF5KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwoKICAgIHZhciBjb252ZXJzZSA9IHsKICAgICAgICBwbHVnaW5zOiB7fSwKICAgICAgICB0ZW1wbGF0ZXM6IHRlbXBsYXRlcywKICAgICAgICBlbWl0OiBmdW5jdGlvbiAoZXZ0LCBkYXRhKSB7CiAgICAgICAgICAgICQodGhpcykudHJpZ2dlcihldnQsIGRhdGEpOwogICAgICAgIH0sCiAgICAgICAgb25jZTogZnVuY3Rpb24gKGV2dCwgaGFuZGxlcikgewogICAgICAgICAgICAkKHRoaXMpLm9uZShldnQsIGhhbmRsZXIpOwogICAgICAgIH0sCiAgICAgICAgb246IGZ1bmN0aW9uIChldnQsIGhhbmRsZXIpIHsKICAgICAgICAgICAgJCh0aGlzKS5iaW5kKGV2dCwgaGFuZGxlcik7CiAgICAgICAgfSwKICAgICAgICBvZmY6IGZ1bmN0aW9uIChldnQsIGhhbmRsZXIpIHsKICAgICAgICAgICAgJCh0aGlzKS51bmJpbmQoZXZ0LCBoYW5kbGVyKTsKICAgICAgICB9LAogICAgICAgIHJlZnJlc2hXZWJraXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgLyogVGhpcyB3b3JrcyBhcm91bmQgYSB3ZWJraXQgYnVnLiBSZWZyZXNoIHRoZSBicm93c2VyJ3Mgdmlld3BvcnQsCiAgICAgICAgICAgICogb3RoZXJ3aXNlIGNoYXRib3hlcyBhcmUgbm90IG1vdmVkIGFsb25nIHdoZW4gb25lIGlzIGNsb3NlZC4KICAgICAgICAgICAgKi8KICAgICAgICAgICAgaWYgKCQuYnJvd3Nlci53ZWJraXQpIHsKICAgICAgICAgICAgICAgIHZhciBjb252ZXJzZWpzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnZlcnNlanMnKTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlanMuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgIGNvbnZlcnNlanMub2Zmc2V0SGVpZ2h0ID0gY29udmVyc2Vqcy5vZmZzZXRIZWlnaHQ7CiAgICAgICAgICAgICAgICBjb252ZXJzZWpzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKCiAgICBjb252ZXJzZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKHNldHRpbmdzLCBjYWxsYmFjaykgewogICAgICAgIHZhciBjb252ZXJzZSA9IHRoaXM7CgogICAgICAgIC8vIENvbnN0YW50cwogICAgICAgIC8vIC0tLS0tLS0tLQogICAgICAgIHZhciBVTkVOQ1JZUFRFRCA9IDA7CiAgICAgICAgdmFyIFVOVkVSSUZJRUQ9IDE7CiAgICAgICAgdmFyIFZFUklGSUVEPSAyOwogICAgICAgIHZhciBGSU5JU0hFRCA9IDM7CiAgICAgICAgdmFyIEtFWSA9IHsKICAgICAgICAgICAgRU5URVI6IDEzCiAgICAgICAgfTsKICAgICAgICB2YXIgU1RBVFVTX1dFSUdIVFMgPSB7CiAgICAgICAgICAgICdvZmZsaW5lJzogICAgICA2LAogICAgICAgICAgICAndW5hdmFpbGFibGUnOiAgNSwKICAgICAgICAgICAgJ3hhJzogICAgICAgICAgIDQsCiAgICAgICAgICAgICdhd2F5JzogICAgICAgICAzLAogICAgICAgICAgICAnZG5kJzogICAgICAgICAgMiwKICAgICAgICAgICAgJ29ubGluZSc6ICAgICAgIDEKICAgICAgICB9OwoKICAgICAgICB2YXIgSU5BQ1RJVkUgPSAnaW5hY3RpdmUnOwogICAgICAgIHZhciBBQ1RJVkUgPSAnYWN0aXZlJzsKICAgICAgICB2YXIgQ09NUE9TSU5HID0gJ2NvbXBvc2luZyc7CiAgICAgICAgdmFyIFBBVVNFRCA9ICdwYXVzZWQnOwogICAgICAgIHZhciBHT05FID0gJ2dvbmUnOwoKICAgICAgICB2YXIgSEFTX0NTUFJORyA9ICgodHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcpICYmCiAgICAgICAgICAgICgodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyA9PT0gJ2Z1bmN0aW9uJykgfHwKICAgICAgICAgICAgICAgICh0eXBlb2YgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJykKICAgICAgICApKTsKICAgICAgICB2YXIgSEFTX0NSWVBUTyA9IEhBU19DU1BSTkcgJiYgKAogICAgICAgICAgICAodHlwZW9mIENyeXB0b0pTICE9PSAidW5kZWZpbmVkIikgJiYKICAgICAgICAgICAgKHR5cGVvZiBPVFIgIT09ICJ1bmRlZmluZWQiKSAmJgogICAgICAgICAgICAodHlwZW9mIERTQSAhPT0gInVuZGVmaW5lZCIpCiAgICAgICAgKTsKCiAgICAgICAgdmFyIE9QRU5FRCA9ICdvcGVuZWQnOwogICAgICAgIHZhciBDTE9TRUQgPSAnY2xvc2VkJzsKCiAgICAgICAgLy8gRGVmYXVsdCBjb25maWd1cmF0aW9uIHZhbHVlcwogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICB0aGlzLmFsbG93X2NvbnRhY3RfcmVxdWVzdHMgPSB0cnVlOwogICAgICAgIHRoaXMuYWxsb3dfZHJhZ3Jlc2l6ZSA9IHRydWU7CiAgICAgICAgdGhpcy5hbGxvd19sb2dvdXQgPSB0cnVlOwogICAgICAgIHRoaXMuYWxsb3dfbXVjID0gdHJ1ZTsKICAgICAgICB0aGlzLmFsbG93X290ciA9IHRydWU7CiAgICAgICAgdGhpcy5hbmltYXRlID0gdHJ1ZTsKICAgICAgICB0aGlzLmF1dG9fbGlzdF9yb29tcyA9IGZhbHNlOwogICAgICAgIHRoaXMuYXV0b19yZWNvbm5lY3QgPSBmYWxzZTsKICAgICAgICB0aGlzLmF1dG9fc3Vic2NyaWJlID0gZmFsc2U7CiAgICAgICAgdGhpcy5ib3NoX3NlcnZpY2VfdXJsID0gdW5kZWZpbmVkOyAvLyBUaGUgQk9TSCBjb25uZWN0aW9uIG1hbmFnZXIgVVJMLgogICAgICAgIHRoaXMuY2FjaGVfb3RyX2tleSA9IGZhbHNlOwogICAgICAgIHRoaXMuZGVidWcgPSBmYWxzZTsKICAgICAgICB0aGlzLmRlZmF1bHRfYm94X2hlaWdodCA9IDMyNDsgLy8gVGhlIGRlZmF1bHQgaGVpZ2h0LCBpbiBwaXhlbHMsIGZvciB0aGUgY29udHJvbCBib3gsIGNoYXQgYm94ZXMgYW5kIGNoYXRyb29tcy4KICAgICAgICB0aGlzLmV4cG9zZV9yaWRfYW5kX3NpZCA9IGZhbHNlOwogICAgICAgIHRoaXMuZm9yd2FyZF9tZXNzYWdlcyA9IGZhbHNlOwogICAgICAgIHRoaXMuaGlkZV9tdWNfc2VydmVyID0gZmFsc2U7CiAgICAgICAgdGhpcy5pMThuID0gbG9jYWxlcy5lbjsKICAgICAgICB0aGlzLmtlZXBhbGl2ZSA9IGZhbHNlOwogICAgICAgIHRoaXMubWVzc2FnZV9jYXJib25zID0gZmFsc2U7CiAgICAgICAgdGhpcy5ub190cmltbWluZyA9IGZhbHNlOyAvLyBTZXQgdG8gdHJ1ZSBmb3IgcGhhbnRvbWpzIHRlc3RzICh3aGVyZSBicm93c2VyIGFwcGFyZW50bHkgaGFzIG5vIHdpZHRoKQogICAgICAgIHRoaXMucGxheV9zb3VuZHMgPSBmYWxzZTsKICAgICAgICB0aGlzLnByZWJpbmQgPSBmYWxzZTsKICAgICAgICB0aGlzLnJvc3Rlcl9ncm91cHMgPSBmYWxzZTsKICAgICAgICB0aGlzLnNob3dfY29udHJvbGJveF9ieV9kZWZhdWx0ID0gZmFsc2U7CiAgICAgICAgdGhpcy5zaG93X29ubHlfb25saW5lX3VzZXJzID0gZmFsc2U7CiAgICAgICAgdGhpcy5zaG93X3Rvb2xiYXIgPSB0cnVlOwogICAgICAgIHRoaXMuc3RvcmFnZSA9ICdzZXNzaW9uJzsKICAgICAgICB0aGlzLnVzZV9vdHJfYnlfZGVmYXVsdCA9IGZhbHNlOwogICAgICAgIHRoaXMudXNlX3ZjYXJkcyA9IHRydWU7CiAgICAgICAgdGhpcy52aXNpYmxlX3Rvb2xiYXJfYnV0dG9ucyA9IHsKICAgICAgICAgICAgJ2Vtb3RpY29ucyc6IHRydWUsCiAgICAgICAgICAgICdjYWxsJzogZmFsc2UsCiAgICAgICAgICAgICdjbGVhcic6IHRydWUsCiAgICAgICAgICAgICd0b2dnbGVfcGFydGljaXBhbnRzJzogdHJ1ZQogICAgICAgIH07CiAgICAgICAgdGhpcy54aHJfY3VzdG9tX3N0YXR1cyA9IGZhbHNlOwogICAgICAgIHRoaXMueGhyX2N1c3RvbV9zdGF0dXNfdXJsID0gJyc7CiAgICAgICAgdGhpcy54aHJfdXNlcl9zZWFyY2ggPSBmYWxzZTsKICAgICAgICB0aGlzLnhocl91c2VyX3NlYXJjaF91cmwgPSAnJzsKCiAgICAgICAgLy8gQWxsb3cgb25seSB3aGl0ZWxpc3RlZCBjb25maWd1cmF0aW9uIGF0dHJpYnV0ZXMgdG8gYmUgb3ZlcndyaXR0ZW4KICAgICAgICBfLmV4dGVuZCh0aGlzLCBfLnBpY2soc2V0dGluZ3MsIFsKICAgICAgICAgICAgJ2FsbG93X2NvbnRhY3RfcmVxdWVzdHMnLAogICAgICAgICAgICAnYWxsb3dfZHJhZ3Jlc2l6ZScsCiAgICAgICAgICAgICdhbGxvd19sb2dvdXQnLAogICAgICAgICAgICAnYWxsb3dfbXVjJywKICAgICAgICAgICAgJ2FsbG93X290cicsCiAgICAgICAgICAgICdhbmltYXRlJywKICAgICAgICAgICAgJ2F1dG9fbGlzdF9yb29tcycsCiAgICAgICAgICAgICdhdXRvX3JlY29ubmVjdCcsCiAgICAgICAgICAgICdhdXRvX3N1YnNjcmliZScsCiAgICAgICAgICAgICdib3NoX3NlcnZpY2VfdXJsJywKICAgICAgICAgICAgJ2NhY2hlX290cl9rZXknLAogICAgICAgICAgICAnY29ubmVjdGlvbicsCiAgICAgICAgICAgICdkZWJ1ZycsCiAgICAgICAgICAgICdkZWZhdWx0X2JveF9oZWlnaHQnLAogICAgICAgICAgICAna2VlcGFsaXZlJywKICAgICAgICAgICAgJ21lc3NhZ2VfY2FyYm9ucycsCiAgICAgICAgICAgICdleHBvc2VfcmlkX2FuZF9zaWQnLAogICAgICAgICAgICAnZm9yd2FyZF9tZXNzYWdlcycsCiAgICAgICAgICAgICdmdWxsbmFtZScsCiAgICAgICAgICAgICdoaWRlX211Y19zZXJ2ZXInLAogICAgICAgICAgICAnaTE4bicsCiAgICAgICAgICAgICdqaWQnLAogICAgICAgICAgICAnbm9fdHJpbW1pbmcnLAogICAgICAgICAgICAncGxheV9zb3VuZHMnLAogICAgICAgICAgICAncHJlYmluZCcsCiAgICAgICAgICAgICdyaWQnLAogICAgICAgICAgICAncm9zdGVyX2dyb3VwcycsCiAgICAgICAgICAgICdzaG93X2NvbnRyb2xib3hfYnlfZGVmYXVsdCcsCiAgICAgICAgICAgICdzaG93X29ubHlfb25saW5lX3VzZXJzJywKICAgICAgICAgICAgJ3Nob3dfdG9vbGJhcicsCiAgICAgICAgICAgICdzaWQnLAogICAgICAgICAgICAnc3RvcmFnZScsCiAgICAgICAgICAgICd1c2Vfb3RyX2J5X2RlZmF1bHQnLAogICAgICAgICAgICAndXNlX3ZjYXJkcycsCiAgICAgICAgICAgICd4aHJfY3VzdG9tX3N0YXR1cycsCiAgICAgICAgICAgICd4aHJfY3VzdG9tX3N0YXR1c191cmwnLAogICAgICAgICAgICAneGhyX3VzZXJfc2VhcmNoJywKICAgICAgICAgICAgJ3hocl91c2VyX3NlYXJjaF91cmwnCiAgICAgICAgXSkpOwogICAgICAgIGlmIChzZXR0aW5ncy52aXNpYmxlX3Rvb2xiYXJfYnV0dG9ucykgewogICAgICAgICAgICBfLmV4dGVuZCgKICAgICAgICAgICAgICAgIHRoaXMudmlzaWJsZV90b29sYmFyX2J1dHRvbnMsCiAgICAgICAgICAgICAgICBfLnBpY2soc2V0dGluZ3MudmlzaWJsZV90b29sYmFyX2J1dHRvbnMsIFsKICAgICAgICAgICAgICAgICAgICAnZW1vdGljb25zJywgJ2NhbGwnLCAnY2xlYXInLCAndG9nZ2xlX3BhcnRpY2lwYW50cycKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSk7CiAgICAgICAgfQogICAgICAgICQuZngub2ZmID0gIXRoaXMuYW5pbWF0ZTsKCiAgICAgICAgLy8gT25seSBhbGxvdyBPVFIgaWYgd2UgaGF2ZSB0aGUgY2FwYWJpbGl0eQogICAgICAgIHRoaXMuYWxsb3dfb3RyID0gdGhpcy5hbGxvd19vdHIgJiYgSEFTX0NSWVBUTzsKCiAgICAgICAgLy8gT25seSB1c2UgT1RSIGJ5IGRlZmF1bHQgaWYgYWxsb3cgT1RSIGlzIGVuYWJsZWQgdG8gYmVnaW4gd2l0aAogICAgICAgIHRoaXMudXNlX290cl9ieV9kZWZhdWx0ID0gdGhpcy51c2Vfb3RyX2J5X2RlZmF1bHQgJiYgdGhpcy5hbGxvd19vdHI7CgogICAgICAgIC8vIFRyYW5zbGF0aW9uIG1hY2hpbmVyeQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIHZhciBfXyA9ICQucHJveHkodXRpbHMuX18sIHRoaXMpOwogICAgICAgIHZhciBfX18gPSB1dGlscy5fX187CiAgICAgICAgLy8gVHJhbnNsYXRpb24gYXdhcmUgY29uc3RhbnRzCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgdmFyIE9UUl9DTEFTU19NQVBQSU5HID0ge307CiAgICAgICAgT1RSX0NMQVNTX01BUFBJTkdbVU5FTkNSWVBURURdID0gJ3VuZW5jcnlwdGVkJzsKICAgICAgICBPVFJfQ0xBU1NfTUFQUElOR1tVTlZFUklGSUVEXSA9ICd1bnZlcmlmaWVkJzsKICAgICAgICBPVFJfQ0xBU1NfTUFQUElOR1tWRVJJRklFRF0gPSAndmVyaWZpZWQnOwogICAgICAgIE9UUl9DTEFTU19NQVBQSU5HW0ZJTklTSEVEXSA9ICdmaW5pc2hlZCc7CgogICAgICAgIHZhciBPVFJfVFJBTlNMQVRFRF9NQVBQSU5HICA9IHt9OwogICAgICAgIE9UUl9UUkFOU0xBVEVEX01BUFBJTkdbVU5FTkNSWVBURURdID0gX18oJ3VuZW5jcnlwdGVkJyk7CiAgICAgICAgT1RSX1RSQU5TTEFURURfTUFQUElOR1tVTlZFUklGSUVEXSA9IF9fKCd1bnZlcmlmaWVkJyk7CiAgICAgICAgT1RSX1RSQU5TTEFURURfTUFQUElOR1tWRVJJRklFRF0gPSBfXygndmVyaWZpZWQnKTsKICAgICAgICBPVFJfVFJBTlNMQVRFRF9NQVBQSU5HW0ZJTklTSEVEXSA9IF9fKCdmaW5pc2hlZCcpOwoKICAgICAgICB2YXIgU1RBVFVTRVMgPSB7CiAgICAgICAgICAgICdkbmQnOiBfXygnVGhpcyBjb250YWN0IGlzIGJ1c3knKSwKICAgICAgICAgICAgJ29ubGluZSc6IF9fKCdUaGlzIGNvbnRhY3QgaXMgb25saW5lJyksCiAgICAgICAgICAgICdvZmZsaW5lJzogX18oJ1RoaXMgY29udGFjdCBpcyBvZmZsaW5lJyksCiAgICAgICAgICAgICd1bmF2YWlsYWJsZSc6IF9fKCdUaGlzIGNvbnRhY3QgaXMgdW5hdmFpbGFibGUnKSwKICAgICAgICAgICAgJ3hhJzogX18oJ1RoaXMgY29udGFjdCBpcyBhd2F5IGZvciBhbiBleHRlbmRlZCBwZXJpb2QnKSwKICAgICAgICAgICAgJ2F3YXknOiBfXygnVGhpcyBjb250YWN0IGlzIGF3YXknKQogICAgICAgIH07CiAgICAgICAgdmFyIERFU0NfR1JPVVBfVE9HR0xFID0gX18oJ0NsaWNrIHRvIGhpZGUgdGhlc2UgY29udGFjdHMnKTsKCiAgICAgICAgdmFyIEhFQURFUl9DVVJSRU5UX0NPTlRBQ1RTID0gIF9fKCdNeSBjb250YWN0cycpOwogICAgICAgIHZhciBIRUFERVJfUEVORElOR19DT05UQUNUUyA9IF9fKCdQZW5kaW5nIGNvbnRhY3RzJyk7CiAgICAgICAgdmFyIEhFQURFUl9SRVFVRVNUSU5HX0NPTlRBQ1RTID0gX18oJ0NvbnRhY3QgcmVxdWVzdHMnKTsKICAgICAgICB2YXIgSEVBREVSX1VOR1JPVVBFRCA9IF9fKCdVbmdyb3VwZWQnKTsKCiAgICAgICAgdmFyIExBQkVMX0NPTlRBQ1RTID0gX18oJ0NvbnRhY3RzJyk7CiAgICAgICAgdmFyIExBQkVMX0dST1VQUyA9IF9fKCdHcm91cHMnKTsKCiAgICAgICAgdmFyIEhFQURFUl9XRUlHSFRTID0ge307CiAgICAgICAgSEVBREVSX1dFSUdIVFNbSEVBREVSX0NVUlJFTlRfQ09OVEFDVFNdICAgID0gMDsKICAgICAgICBIRUFERVJfV0VJR0hUU1tIRUFERVJfVU5HUk9VUEVEXSAgICAgICAgICAgPSAxOwogICAgICAgIEhFQURFUl9XRUlHSFRTW0hFQURFUl9SRVFVRVNUSU5HX0NPTlRBQ1RTXSA9IDI7CiAgICAgICAgSEVBREVSX1dFSUdIVFNbSEVBREVSX1BFTkRJTkdfQ09OVEFDVFNdICAgID0gMzsKCiAgICAgICAgLy8gTW9kdWxlLWxldmVsIHZhcmlhYmxlcwogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307CiAgICAgICAgdGhpcy5pbml0aWFsX3ByZXNlbmNlX3NlbnQgPSAwOwogICAgICAgIHRoaXMubXNnX2NvdW50ZXIgPSAwOwoKICAgICAgICAvLyBNb2R1bGUtbGV2ZWwgZnVuY3Rpb25zCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIHRoaXMuZ2l2ZUZlZWRiYWNrID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGtsYXNzKSB7CiAgICAgICAgICAgICQoJy5jb25uLWZlZWRiYWNrJykuYXR0cignY2xhc3MnLCAnY29ubi1mZWVkYmFjaycpLnRleHQobWVzc2FnZSk7CiAgICAgICAgICAgIGlmIChrbGFzcykgewogICAgICAgICAgICAgICAgJCgnLmNvbm4tZmVlZGJhY2snKS5hZGRDbGFzcyhrbGFzcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB0aGlzLmxvZyA9IGZ1bmN0aW9uICh0eHQsIGxldmVsKSB7CiAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7CiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPT0gJ2Vycm9yJykgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjogJyt0eHQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0eHQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5nZXRWQ2FyZCA9IGZ1bmN0aW9uIChqaWQsIGNhbGxiYWNrLCBlcnJiYWNrKSB7CiAgICAgICAgICAgIGlmICghdGhpcy51c2VfdmNhcmRzKSB7CiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhqaWQsIGppZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi52Y2FyZC5nZXQoCiAgICAgICAgICAgICAgICAkLnByb3h5KGZ1bmN0aW9uIChpcSkgewogICAgICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3NmdWwgY2FsbGJhY2sKICAgICAgICAgICAgICAgICAgICB2YXIgJHZjYXJkID0gJChpcSkuZmluZCgndkNhcmQnKTsKICAgICAgICAgICAgICAgICAgICB2YXIgZnVsbG5hbWUgPSAkdmNhcmQuZmluZCgnRk4nKS50ZXh0KCksCiAgICAgICAgICAgICAgICAgICAgICAgIGltZyA9ICR2Y2FyZC5maW5kKCdCSU5WQUwnKS50ZXh0KCksCiAgICAgICAgICAgICAgICAgICAgICAgIGltZ190eXBlID0gJHZjYXJkLmZpbmQoJ1RZUEUnKS50ZXh0KCksCiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9ICR2Y2FyZC5maW5kKCdVUkwnKS50ZXh0KCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGppZCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFjdCA9IGNvbnZlcnNlLnJvc3Rlci5nZXQoamlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhY3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxuYW1lID0gXy5pc0VtcHR5KGZ1bGxuYW1lKT8gY29udGFjdC5nZXQoJ2Z1bGxuYW1lJykgfHwgamlkOiBmdWxsbmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhY3Quc2F2ZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Z1bGxuYW1lJzogZnVsbG5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ltYWdlX3R5cGUnOiBpbWdfdHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW1hZ2UnOiBpbWcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VybCc6IHVybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmNhcmRfdXBkYXRlZCc6IG1vbWVudCgpLmZvcm1hdCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soamlkLCBmdWxsbmFtZSwgaW1nLCBpbWdfdHlwZSwgdXJsKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCB0aGlzKSwKICAgICAgICAgICAgICAgIGppZCwKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpcSkgewogICAgICAgICAgICAgICAgICAgIC8vIEVycm9yIGNhbGxiYWNrCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRhY3QgPSBjb252ZXJzZS5yb3N0ZXIuZ2V0KGppZCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhY3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udGFjdC5zYXZlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2Y2FyZF91cGRhdGVkJzogbW9tZW50KCkuZm9ybWF0KCkKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChlcnJiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycmJhY2soamlkLCBpcSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICApOwogICAgICAgIH07CgogICAgICAgIHRoaXMucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjb252ZXJzZS5naXZlRmVlZGJhY2soX18oJ1JlY29ubmVjdGluZycpLCAnZXJyb3InKTsKICAgICAgICAgICAgY29udmVyc2UuZW1pdCgncmVjb25uZWN0Jyk7CiAgICAgICAgICAgIGlmICghY29udmVyc2UucHJlYmluZCkgewogICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLmNvbm5lY3QoCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLmppZCwKICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24ucGFzcywKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoc3RhdHVzLCBjb25kaXRpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2Uub25Db25uZWN0KHN0YXR1cywgY29uZGl0aW9uLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi53YWl0LAogICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5ob2xkLAogICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5yb3V0ZQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHRoaXMucmVuZGVyTG9naW5QYW5lbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgY29udmVyc2UuX3RlYXJEb3duKCk7CiAgICAgICAgICAgIHZhciB2aWV3ID0gY29udmVyc2UuY2hhdGJveHZpZXdzLmdldCgnY29udHJvbGJveCcpOwogICAgICAgICAgICB2aWV3Lm1vZGVsLnNldCh7Y29ubmVjdGVkOmZhbHNlfSk7CiAgICAgICAgICAgIHZpZXcucmVuZGVyTG9naW5QYW5lbCgpOwogICAgICAgIH07CgogICAgICAgIHRoaXMub25Db25uZWN0ID0gZnVuY3Rpb24gKHN0YXR1cywgY29uZGl0aW9uLCByZWNvbm5lY3QpIHsKICAgICAgICAgICAgdmFyICRidXR0b24sICRmb3JtOwogICAgICAgICAgICBpZiAoKHN0YXR1cyA9PT0gU3Ryb3BoZS5TdGF0dXMuQ09OTkVDVEVEKSB8fAogICAgICAgICAgICAgICAgKHN0YXR1cyA9PT0gU3Ryb3BoZS5TdGF0dXMuQVRUQUNIRUQpKSB7CiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiByZWNvbm5lY3QgIT09ICd1bmRlZmluZWQnKSAmJiAocmVjb25uZWN0KSkgewogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmxvZyhzdGF0dXMgPT09IFN0cm9waGUuU3RhdHVzLkNPTk5FQ1RFRCA/ICdSZWNvbm5lY3RlZCcgOiAnUmVhdHRhY2hlZCcpOwogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLm9uUmVjb25uZWN0ZWQoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UubG9nKHN0YXR1cyA9PT0gU3Ryb3BoZS5TdGF0dXMuQ09OTkVDVEVEID8gJ0Nvbm5lY3RlZCcgOiAnQXR0YWNoZWQnKTsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5vbkNvbm5lY3RlZCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gU3Ryb3BoZS5TdGF0dXMuRElTQ09OTkVDVEVEKSB7CiAgICAgICAgICAgICAgICBjb252ZXJzZS5naXZlRmVlZGJhY2soX18oJ0Rpc2Nvbm5lY3RlZCcpLCAnZXJyb3InKTsKICAgICAgICAgICAgICAgIGlmIChjb252ZXJzZS5hdXRvX3JlY29ubmVjdCkgewogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLnJlY29ubmVjdCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5yZW5kZXJMb2dpblBhbmVsKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBTdHJvcGhlLlN0YXR1cy5FcnJvcikgewogICAgICAgICAgICAgICAgY29udmVyc2UucmVuZGVyTG9naW5QYW5lbCgpOwogICAgICAgICAgICAgICAgY29udmVyc2UuZ2l2ZUZlZWRiYWNrKF9fKCdFcnJvcicpLCAnZXJyb3InKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFN0cm9waGUuU3RhdHVzLkNPTk5FQ1RJTkcpIHsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmdpdmVGZWVkYmFjayhfXygnQ29ubmVjdGluZycpKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFN0cm9waGUuU3RhdHVzLkNPTk5GQUlMKSB7CiAgICAgICAgICAgICAgICBjb252ZXJzZS5yZW5kZXJMb2dpblBhbmVsKCk7CiAgICAgICAgICAgICAgICBjb252ZXJzZS5naXZlRmVlZGJhY2soX18oJ0Nvbm5lY3Rpb24gRmFpbGVkJyksICdlcnJvcicpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gU3Ryb3BoZS5TdGF0dXMuQVVUSEVOVElDQVRJTkcpIHsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmdpdmVGZWVkYmFjayhfXygnQXV0aGVudGljYXRpbmcnKSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBTdHJvcGhlLlN0YXR1cy5BVVRIRkFJTCkgewogICAgICAgICAgICAgICAgY29udmVyc2UucmVuZGVyTG9naW5QYW5lbCgpOwogICAgICAgICAgICAgICAgY29udmVyc2UuZ2l2ZUZlZWRiYWNrKF9fKCdBdXRoZW50aWNhdGlvbiBGYWlsZWQnKSwgJ2Vycm9yJyk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBTdHJvcGhlLlN0YXR1cy5ESVNDT05ORUNUSU5HKSB7CiAgICAgICAgICAgICAgICBpZiAoIWNvbnZlcnNlLmNvbm5lY3Rpb24uY29ubmVjdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UucmVuZGVyTG9naW5QYW5lbCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5naXZlRmVlZGJhY2soX18oJ0Rpc2Nvbm5lY3RpbmcnKSwgJ2Vycm9yJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB0aGlzLmFwcGx5SGVpZ2h0UmVzaXN0YW5jZSA9IGZ1bmN0aW9uIChoZWlnaHQpIHsKICAgICAgICAgICAgLyogVGhpcyBtZXRob2QgYXBwbGllcyBzb21lIHJlc2lzdGFuY2UvZ3Jhdml0eSBhcm91bmQgdGhlCiAgICAgICAgICAgICAqICJkZWZhdWx0X2JveF9oZWlnaHQiLiBJZiAiaGVpZ2h0IiBpcyBjbG9zZSBlbm91Z2ggdG8KICAgICAgICAgICAgICogZGVmYXVsdF9ib3hfaGVpZ2h0LCB0aGVuIHRoYXQgaXMgcmV0dXJuZWQgaW5zdGVhZC4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIGlmICh0eXBlb2YgaGVpZ2h0ID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnNlLmRlZmF1bHRfYm94X2hlaWdodDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcmVzaXN0YW5jZSA9IDEwOwogICAgICAgICAgICBpZiAoKGhlaWdodCAhPT0gY29udmVyc2UuZGVmYXVsdF9ib3hfaGVpZ2h0KSAmJgogICAgICAgICAgICAgICAgKE1hdGguYWJzKGhlaWdodCAtIGNvbnZlcnNlLmRlZmF1bHRfYm94X2hlaWdodCkgPCByZXNpc3RhbmNlKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnNlLmRlZmF1bHRfYm94X2hlaWdodDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gaGVpZ2h0OwogICAgICAgIH07CgogICAgICAgIHRoaXMudXBkYXRlTXNnQ291bnRlciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKHRoaXMubXNnX2NvdW50ZXIgPiAwKSB7CiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQudGl0bGUuc2VhcmNoKC9eTWVzc2FnZXMgXChcZCtcKSAvKSA9PSAtMSkgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnRpdGxlID0gIk1lc3NhZ2VzICgiICsgdGhpcy5tc2dfY291bnRlciArICIpICIgKyBkb2N1bWVudC50aXRsZTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBkb2N1bWVudC50aXRsZS5yZXBsYWNlKC9eTWVzc2FnZXMgXChcZCtcKSAvLCAiTWVzc2FnZXMgKCIgKyB0aGlzLm1zZ19jb3VudGVyICsgIikgIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB3aW5kb3cuYmx1cigpOwogICAgICAgICAgICAgICAgd2luZG93LmZvY3VzKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQudGl0bGUuc2VhcmNoKC9eTWVzc2FnZXMgXChcZCtcKSAvKSAhPSAtMSkgewogICAgICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBkb2N1bWVudC50aXRsZS5yZXBsYWNlKC9eTWVzc2FnZXMgXChcZCtcKSAvLCAiIik7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB0aGlzLmluY3JlbWVudE1zZ0NvdW50ZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRoaXMubXNnX2NvdW50ZXIgKz0gMTsKICAgICAgICAgICAgdGhpcy51cGRhdGVNc2dDb3VudGVyKCk7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5jbGVhck1zZ0NvdW50ZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRoaXMubXNnX2NvdW50ZXIgPSAwOwogICAgICAgICAgICB0aGlzLnVwZGF0ZU1zZ0NvdW50ZXIoKTsKICAgICAgICB9OwoKICAgICAgICB0aGlzLmluaXRTdGF0dXMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgdGhpcy54bXBwc3RhdHVzID0gbmV3IHRoaXMuWE1QUFN0YXR1cygpOwogICAgICAgICAgICB2YXIgaWQgPSBiNjRfc2hhMSgnY29udmVyc2UueG1wcHN0YXR1cy0nK2NvbnZlcnNlLmJhcmVfamlkKTsKICAgICAgICAgICAgdGhpcy54bXBwc3RhdHVzLmlkID0gaWQ7IC8vIEFwcGVhcnMgdG8gYmUgbmVjZXNzYXJ5IGZvciBiYWNrYm9uZS5icm93c2VyU3RvcmFnZQogICAgICAgICAgICB0aGlzLnhtcHBzdGF0dXMuYnJvd3NlclN0b3JhZ2UgPSBuZXcgQmFja2JvbmUuQnJvd3NlclN0b3JhZ2VbY29udmVyc2Uuc3RvcmFnZV0oaWQpOwogICAgICAgICAgICB0aGlzLnhtcHBzdGF0dXMuZmV0Y2goe3N1Y2Nlc3M6IGNhbGxiYWNrLCBlcnJvcjogY2FsbGJhY2t9KTsKICAgICAgICB9OwoKICAgICAgICB0aGlzLmluaXRTZXNzaW9uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0aGlzLnNlc3Npb24gPSBuZXcgdGhpcy5CT1NIU2Vzc2lvbigpOwogICAgICAgICAgICB2YXIgaWQgPSBiNjRfc2hhMSgnY29udmVyc2UuYm9zaC1zZXNzaW9uJyk7CiAgICAgICAgICAgIHRoaXMuc2Vzc2lvbi5pZCA9IGlkOyAvLyBBcHBlYXJzIHRvIGJlIG5lY2Vzc2FyeSBmb3IgYmFja2JvbmUuYnJvd3NlclN0b3JhZ2UKICAgICAgICAgICAgdGhpcy5zZXNzaW9uLmJyb3dzZXJTdG9yYWdlID0gbmV3IEJhY2tib25lLkJyb3dzZXJTdG9yYWdlW2NvbnZlcnNlLnN0b3JhZ2VdKGlkKTsKICAgICAgICAgICAgdGhpcy5zZXNzaW9uLmZldGNoKCk7CiAgICAgICAgICAgICQod2luZG93KS5vbignYmVmb3JldW5sb2FkJywgJC5wcm94eShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAoY29udmVyc2UuY29ubmVjdGlvbi5jb25uZWN0ZWQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNlc3Npb24oKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhclNlc3Npb24oKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgdGhpcykpOwogICAgICAgIH07CgogICAgICAgIHRoaXMuY2xlYXJTZXNzaW9uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0aGlzLnJvc3Rlci5icm93c2VyU3RvcmFnZS5fY2xlYXIoKTsKICAgICAgICAgICAgdGhpcy5zZXNzaW9uLmJyb3dzZXJTdG9yYWdlLl9jbGVhcigpOwogICAgICAgICAgICAvLyBYWFg6IHRoaXMgc2hvdWxkIHBlcmhhcHMgZ28gaW50byB0aGUgYmVmb3JldW5sb2FkIGhhbmRsZXIKICAgICAgICAgICAgY29udmVyc2UuY2hhdGJveGVzLmdldCgnY29udHJvbGJveCcpLnNhdmUoeydjb25uZWN0ZWQnOiBmYWxzZX0pOwogICAgICAgIH07CgogICAgICAgIHRoaXMuc2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKHRoaXMua2VlcGFsaXZlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNlc3Npb24uc2F2ZSh7CiAgICAgICAgICAgICAgICAgICAgamlkOiB0aGlzLmNvbm5lY3Rpb24uamlkLAogICAgICAgICAgICAgICAgICAgIHJpZDogdGhpcy5jb25uZWN0aW9uLl9wcm90by5yaWQsCiAgICAgICAgICAgICAgICAgICAgc2lkOiB0aGlzLmNvbm5lY3Rpb24uX3Byb3RvLnNpZAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB0aGlzLmxvZ091dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgY29udmVyc2UuY2hhdGJveHZpZXdzLmNsb3NlQWxsQ2hhdEJveGVzKGZhbHNlKTsKICAgICAgICAgICAgY29udmVyc2UuY2xlYXJTZXNzaW9uKCk7CiAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24uZGlzY29ubmVjdCgpOwogICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLnJlc2V0KCk7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5yZWdpc3Rlckdsb2JhbEV2ZW50SGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICQoZG9jdW1lbnQpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmICgkKCcudG9nZ2xlLW90ciB1bCcpLmlzKCc6dmlzaWJsZScpKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnLnRvZ2dsZS1vdHIgdWwnLCB0aGlzKS5zbGlkZVVwKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJCgnLnRvZ2dsZS1zbWlsZXkgdWwnKS5pcygnOnZpc2libGUnKSkgewogICAgICAgICAgICAgICAgICAgICQoJy50b2dnbGUtc21pbGV5IHVsJywgdGhpcykuc2xpZGVVcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdtb3VzZW1vdmUnLCAkLnByb3h5KGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJlc2l6ZWRfY2hhdGJveCB8fCAhdGhpcy5hbGxvd19kcmFncmVzaXplKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgdGhpcy5yZXNpemVkX2NoYXRib3gucmVzaXplQ2hhdEJveChldik7CiAgICAgICAgICAgIH0sIHRoaXMpKTsKCiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdtb3VzZXVwJywgJC5wcm94eShmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5yZXNpemVkX2NoYXRib3ggfHwgIXRoaXMuYWxsb3dfZHJhZ3Jlc2l6ZSkgeyByZXR1cm4gdHJ1ZTsgfQogICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSB0aGlzLmFwcGx5SGVpZ2h0UmVzaXN0YW5jZSh0aGlzLnJlc2l6ZWRfY2hhdGJveC5oZWlnaHQpOwogICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbi5jb25uZWN0ZWQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZWRfY2hhdGJveC5tb2RlbC5zYXZlKHsnaGVpZ2h0JzogaGVpZ2h0fSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplZF9jaGF0Ym94Lm1vZGVsLnNldCh7J2hlaWdodCc6IGhlaWdodH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5yZXNpemVkX2NoYXRib3ggPSBudWxsOwogICAgICAgICAgICB9LCB0aGlzKSk7CgogICAgICAgICAgICAkKHdpbmRvdykub24oImJsdXIgZm9jdXMiLCAkLnByb3h5KGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgaWYgKCh0aGlzLndpbmRvd1N0YXRlICE9IGV2LnR5cGUpICYmIChldi50eXBlID09ICdmb2N1cycpKSB7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuY2xlYXJNc2dDb3VudGVyKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLndpbmRvd1N0YXRlID0gZXYudHlwZTsKICAgICAgICAgICAgfSx0aGlzKSk7CgogICAgICAgICAgICAkKHdpbmRvdykub24oInJlc2l6ZSIsIF8uZGVib3VuY2UoJC5wcm94eShmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIHRoaXMuY2hhdGJveHZpZXdzLnRyaW1DaGF0cygpOwogICAgICAgICAgICB9LHRoaXMpLCAyMDApKTsKICAgICAgICB9OwoKICAgICAgICB0aGlzLm9uUmVjb25uZWN0ZWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcmUtcmVnaXN0ZXIgYWxsIHRoZSBldmVudCBoYW5kbGVycyBvbiB0aGUgbmV3bHkKICAgICAgICAgICAgLy8gY3JlYXRlZCBjb25uZWN0aW9uLgogICAgICAgICAgICB0aGlzLmluaXRTdGF0dXMoJC5wcm94eShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyUm9zdGVyWEhhbmRsZXIoKTsKICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJQcmVzZW5jZUhhbmRsZXIoKTsKICAgICAgICAgICAgICAgIHRoaXMuY2hhdGJveGVzLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoKTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLnhtcHBzdGF0dXMuc2VuZFByZXNlbmNlKCk7CiAgICAgICAgICAgICAgICB0aGlzLmdpdmVGZWVkYmFjayhfXygnT25saW5lIENvbnRhY3RzJykpOwogICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5lbmFibGVDYXJib25zID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvKiBBc2sgdGhlIFhNUFAgc2VydmVyIHRvIGVuYWJsZSBNZXNzYWdlIENhcmJvbnMKICAgICAgICAgICAgICogU2VlIFhFUC0wMjgwIGh0dHBzOi8veG1wcC5vcmcvZXh0ZW5zaW9ucy94ZXAtMDI4MC5odG1sI2VuYWJsaW5nCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBpZiAoIXRoaXMubWVzc2FnZV9jYXJib25zKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGNhcmJvbnNfaXEgPSBuZXcgU3Ryb3BoZS5CdWlsZGVyKCdpcScsIHsKICAgICAgICAgICAgICAgIGZyb206IHRoaXMuY29ubmVjdGlvbi5qaWQsCiAgICAgICAgICAgICAgICBpZDogJ2VuYWJsZWNhcmJvbnMnLAogICAgICAgICAgICAgICAgdHlwZTogJ3NldCcKICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIC5jKCdlbmFibGUnLCB7eG1sbnM6ICd1cm46eG1wcDpjYXJib25zOjInfSk7CiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5zZW5kKGNhcmJvbnNfaXEpOwogICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24uYWRkSGFuZGxlcihmdW5jdGlvbiAoaXEpIHsKICAgICAgICAgICAgICAgIC8vVE9ETzogY2hlY2sgaWYgY2FyYm9ucyB3YXMgZW5hYmxlZDoKICAgICAgICAgICAgfSwgbnVsbCwgImlxIiwgbnVsbCwgImVuYWJsZWNhcmJvbnMiKTsKICAgICAgICB9OwoKICAgICAgICB0aGlzLm9uQ29ubmVjdGVkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAodGhpcy5kZWJ1ZykgewogICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLnhtbElucHV0ID0gZnVuY3Rpb24gKGJvZHkpIHsgY29uc29sZS5sb2coYm9keSk7IH07CiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24ueG1sT3V0cHV0ID0gZnVuY3Rpb24gKGJvZHkpIHsgY29uc29sZS5sb2coYm9keSk7IH07CiAgICAgICAgICAgICAgICBTdHJvcGhlLmxvZyA9IGZ1bmN0aW9uIChsZXZlbCwgbXNnKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobGV2ZWwrJyAnK21zZyk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgU3Ryb3BoZS5lcnJvciA9IGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1I6ICcrbXNnKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gV2hlbiByZWNvbm5lY3RpbmcsIHRoZXJlIG1pZ2h0IGJlIHNvbWUgb3BlbiBjaGF0IGJveGVzLiBXZSBkb24ndAogICAgICAgICAgICAvLyBrbm93IHdoZXRoZXIgdGhlc2UgYm94ZXMgYXJlIG9mIHRoZSBzYW1lIGFjY291bnQgb3Igbm90LCBzbyB3ZQogICAgICAgICAgICAvLyBjbG9zZSB0aGVtIG5vdy4KICAgICAgICAgICAgdGhpcy5jaGF0Ym94dmlld3MuY2xvc2VBbGxDaGF0Qm94ZXMoKTsKICAgICAgICAgICAgdGhpcy5zZXRTZXNzaW9uKCk7CiAgICAgICAgICAgIHRoaXMuamlkID0gdGhpcy5jb25uZWN0aW9uLmppZDsKICAgICAgICAgICAgdGhpcy5iYXJlX2ppZCA9IFN0cm9waGUuZ2V0QmFyZUppZEZyb21KaWQodGhpcy5jb25uZWN0aW9uLmppZCk7CiAgICAgICAgICAgIHRoaXMuZG9tYWluID0gU3Ryb3BoZS5nZXREb21haW5Gcm9tSmlkKHRoaXMuY29ubmVjdGlvbi5qaWQpOwogICAgICAgICAgICB0aGlzLm1pbmltaXplZF9jaGF0cyA9IG5ldyBjb252ZXJzZS5NaW5pbWl6ZWRDaGF0cyh7bW9kZWw6IHRoaXMuY2hhdGJveGVzfSk7CiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXMgPSBuZXcgdGhpcy5GZWF0dXJlcygpOwogICAgICAgICAgICB0aGlzLmVuYWJsZUNhcmJvbnMoKTsKICAgICAgICAgICAgdGhpcy5pbml0U3RhdHVzKCQucHJveHkoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgIHRoaXMuY2hhdGJveGVzLm9uQ29ubmVjdGVkKCk7CiAgICAgICAgICAgICAgICB0aGlzLmdpdmVGZWVkYmFjayhfXygnT25saW5lIENvbnRhY3RzJykpOwogICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uLnNlcnZpY2UgPT09ICdqYXNtaW5lIHRlc3RzJykgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBYWFg6IENhbGwgYmFjayB3aXRoIHRoZSBpbnRlcm5hbCBjb252ZXJzZSBvYmplY3QuIFRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2JqZWN0IHNob3VsZCBuZXZlciBiZSBleHBvc2VkIHRvIHByb2R1Y3Rpb24gc3lzdGVtcy4KICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ2phc21pbmUgdGVzdHMnIGlzIGFuIGludmFsaWQgaHR0cCBiaW5kIHNlcnZpY2UgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlJ3JlIHN1cmUgdGhhdCB0aGlzIGlzIGp1c3QgZm9yIHRlc3RzLgogICAgICAgICAgICAgICAgICAgICAgICAvLwogICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBXZSBtaWdodCBuZWVkIHRvIGNvbnNpZGVyIHdlYnNvY2tldHMsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb2JhYmx5IHdvbid0IHVzZSB0aGUgJ3NlcnZpY2UnIGF0dHIuIEN1cnJlbnQKICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3Ryb3BoZS5qcyB2ZXJzaW9uIHVzZWQgYnkgY29udmVyc2UuanMgZG9lc24ndCBzdXBwb3J0CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlYnNvY2tldHMuCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHRoaXMpKTsKICAgICAgICAgICAgY29udmVyc2UuZW1pdCgncmVhZHknKTsKICAgICAgICB9OwoKICAgICAgICAvLyBCYWNrYm9uZSBNb2RlbHMgYW5kIFZpZXdzCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIHRoaXMuT1RSID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHsKICAgICAgICAgICAgLy8gQSBtb2RlbCBmb3IgbWFuYWdpbmcgT1RSIHNldHRpbmdzLgogICAgICAgICAgICBnZXRTZXNzaW9uUGFzc3BocmFzZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKGNvbnZlcnNlLnByZWJpbmQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gYjY0X3NoYTEoY29udmVyc2UuY29ubmVjdGlvbi5qaWQpLAogICAgICAgICAgICAgICAgICAgICAgICBwYXNzID0gd2luZG93LnNlc3Npb25TdG9yYWdlW2tleV07CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXNzID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgICAgICBwYXNzID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjQyOTQ5NjcyOTUpLnRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZVtrZXldID0gcGFzczsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhc3M7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBjb252ZXJzZS5jb25uZWN0aW9uLnBhc3M7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBnZW5lcmF0ZVByaXZhdGVLZXk6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBrZXkgPSBuZXcgRFNBKCk7CiAgICAgICAgICAgICAgICB2YXIgamlkID0gY29udmVyc2UuY29ubmVjdGlvbi5qaWQ7CiAgICAgICAgICAgICAgICBpZiAoY29udmVyc2UuY2FjaGVfb3RyX2tleSkgewogICAgICAgICAgICAgICAgICAgIHZhciBjaXBoZXIgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlcjsKICAgICAgICAgICAgICAgICAgICB2YXIgcGFzcyA9IHRoaXMuZ2V0U2Vzc2lvblBhc3NwaHJhc2UoKTsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhc3MgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuY3J5cHQgdGhlIGtleSBhbmQgc2V0IGluIHNlc3Npb25TdG9yYWdlLiBBbHNvIHN0b3JlIGluc3RhbmNlIHRhZy4KICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlW2I2NF9zaGExKGppZCsncHJpdl9rZXknKV0gPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGtleS5wYWNrUHJpdmF0ZSgpLCBwYXNzKS50b1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2VbYjY0X3NoYTEoamlkKydpbnN0YW5jZV90YWcnKV0gPSBpbnN0YW5jZV90YWc7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZVtiNjRfc2hhMShqaWQrJ3Bhc3NfY2hlY2snKV0gPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsICdtYXRjaCcsIHBhc3MpLnRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGtleTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB0aGlzLk1lc3NhZ2UgPSBCYWNrYm9uZS5Nb2RlbDsKICAgICAgICB0aGlzLk1lc3NhZ2VzID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoewogICAgICAgICAgICBtb2RlbDogY29udmVyc2UuTWVzc2FnZQogICAgICAgIH0pOwoKICAgICAgICB0aGlzLkNoYXRCb3ggPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoewogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gY29udmVyc2UuYXBwbHlIZWlnaHRSZXNpc3RhbmNlKHRoaXMuZ2V0KCdoZWlnaHQnKSk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXQoJ2JveF9pZCcpICE9PSAnY29udHJvbGJveCcpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VzID0gbmV3IGNvbnZlcnNlLk1lc3NhZ2VzKCk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlcy5icm93c2VyU3RvcmFnZSA9IG5ldyBCYWNrYm9uZS5Ccm93c2VyU3RvcmFnZVtjb252ZXJzZS5zdG9yYWdlXSgKICAgICAgICAgICAgICAgICAgICAgICAgYjY0X3NoYTEoJ2NvbnZlcnNlLm1lc3NhZ2VzJyt0aGlzLmdldCgnamlkJykrY29udmVyc2UuYmFyZV9qaWQpKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmUoewogICAgICAgICAgICAgICAgICAgICAgICAnYm94X2lkJyA6IGI2NF9zaGExKHRoaXMuZ2V0KCdqaWQnKSksCiAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiBoZWlnaHQsCiAgICAgICAgICAgICAgICAgICAgICAgICdtaW5pbWl6ZWQnOiB0aGlzLmdldCgnbWluaW1pemVkJykgfHwgZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICdvdHJfc3RhdHVzJzogdGhpcy5nZXQoJ290cl9zdGF0dXMnKSB8fCBVTkVOQ1JZUFRFRCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWVfbWluaW1pemVkJzogdGhpcy5nZXQoJ3RpbWVfbWluaW1pemVkJykgfHwgbW9tZW50KCksCiAgICAgICAgICAgICAgICAgICAgICAgICd0aW1lX29wZW5lZCc6IHRoaXMuZ2V0KCd0aW1lX29wZW5lZCcpIHx8IG1vbWVudCgpLnZhbHVlT2YoKSwKICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXJfaWQnIDogU3Ryb3BoZS5nZXROb2RlRnJvbUppZCh0aGlzLmdldCgnamlkJykpLAogICAgICAgICAgICAgICAgICAgICAgICAnbnVtX3VucmVhZCc6IHRoaXMuZ2V0KCdudW1fdW5yZWFkJykgfHwgMCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3VybCc6ICcnCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6IGhlaWdodCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWVfb3BlbmVkJzogbW9tZW50KDApLnZhbHVlT2YoKSwKICAgICAgICAgICAgICAgICAgICAgICAgJ251bV91bnJlYWQnOiB0aGlzLmdldCgnbnVtX3VucmVhZCcpIHx8IDAKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIG1heGltaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNhdmUoewogICAgICAgICAgICAgICAgICAgICdtaW5pbWl6ZWQnOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAndGltZV9vcGVuZWQnOiBtb21lbnQoKS52YWx1ZU9mKCkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgbWluaW1pemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSh7CiAgICAgICAgICAgICAgICAgICAgJ21pbmltaXplZCc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgJ3RpbWVfbWluaW1pemVkJzogbW9tZW50KCkuZm9ybWF0KCkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgZ2V0U2Vzc2lvbjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXI7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0LCBwYXNzLCBpbnN0YW5jZV90YWcsIHNhdmVkX2tleSwgcGFzc19jaGVjazsKICAgICAgICAgICAgICAgIGlmIChjb252ZXJzZS5jYWNoZV9vdHJfa2V5KSB7CiAgICAgICAgICAgICAgICAgICAgcGFzcyA9IGNvbnZlcnNlLm90ci5nZXRTZXNzaW9uUGFzc3BocmFzZSgpOwogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFzcyAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VfdGFnID0gd2luZG93LnNlc3Npb25TdG9yYWdlW2I2NF9zaGExKHRoaXMuaWQrJ2luc3RhbmNlX3RhZycpXTsKICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZWRfa2V5ID0gd2luZG93LnNlc3Npb25TdG9yYWdlW2I2NF9zaGExKHRoaXMuaWQrJ3ByaXZfa2V5JyldOwogICAgICAgICAgICAgICAgICAgICAgICBwYXNzX2NoZWNrID0gd2luZG93LnNlc3Npb25TdG9yYWdlW2I2NF9zaGExKHRoaXMuY29ubmVjdGlvbi5qaWQrJ3Bhc3NfY2hlY2snKV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzYXZlZF9rZXkgJiYgaW5zdGFuY2VfdGFnICYmIHR5cGVvZiBwYXNzX2NoZWNrICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlY3J5cHRlZCA9IGNpcGhlci5kZWNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBzYXZlZF9rZXksIHBhc3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IERTQS5wYXJzZVByaXZhdGUoZGVjcnlwdGVkLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5MYXRpbjEpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgcGFzc19jaGVjaywgcGFzcykudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLkxhdGluMSkgPT09ICdtYXRjaCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmllZCB0aGF0IHRoZSBwYXNzcGhyYXNlIGlzIHN0aWxsIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdzaG93SGVscE1lc3NhZ2VzJywgW19fKCdSZS1lc3RhYmxpc2hpbmcgZW5jcnlwdGVkIHNlc3Npb24nKV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2tleSc6IGtleSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luc3RhbmNlX3RhZyc6IGluc3RhbmNlX3RhZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gT3VyIHdvcmsgaXMgZG9uZSBoZXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGdlbmVyYXRlIGEgbmV3IGtleSBhbmQgaW5zdGFuY2UgdGFnCiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3Nob3dIZWxwTWVzc2FnZXMnLCBbCiAgICAgICAgICAgICAgICAgICAgX18oJ0dlbmVyYXRpbmcgcHJpdmF0ZSBrZXkuJyksCiAgICAgICAgICAgICAgICAgICAgX18oJ1lvdXIgYnJvd3NlciBtaWdodCBiZWNvbWUgdW5yZXNwb25zaXZlLicpXSwKICAgICAgICAgICAgICAgICAgICBudWxsLAogICAgICAgICAgICAgICAgICAgIHRydWUgLy8gc2hvdyBzcGlubmVyCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soewogICAgICAgICAgICAgICAgICAgICAgICAna2V5JzogY29udmVyc2Uub3RyLmdlbmVyYXRlUHJpdmF0ZUtleS5hcHBseSh0aGlzKSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2luc3RhbmNlX3RhZyc6IE9UUi5tYWtlSW5zdGFuY2VUYWcoKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHVwZGF0ZU9UUlN0YXR1czogZnVuY3Rpb24gKHN0YXRlKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSBPVFIuQ09OU1QuU1RBVFVTX0FLRV9TVUNDRVNTOgogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vdHIubXNnc3RhdGUgPT09IE9UUi5DT05TVC5NU0dTVEFURV9FTkNSWVBURUQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSh7J290cl9zdGF0dXMnOiBVTlZFUklGSUVEfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSBPVFIuQ09OU1QuU1RBVFVTX0VORF9PVFI6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm90ci5tc2dzdGF0ZSA9PT0gT1RSLkNPTlNULk1TR1NUQVRFX0ZJTklTSEVEKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmUoeydvdHJfc3RhdHVzJzogRklOSVNIRUR9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm90ci5tc2dzdGF0ZSA9PT0gT1RSLkNPTlNULk1TR1NUQVRFX1BMQUlOVEVYVCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlKHsnb3RyX3N0YXR1cyc6IFVORU5DUllQVEVEfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvblNNUDogZnVuY3Rpb24gKHR5cGUsIGRhdGEpIHsKICAgICAgICAgICAgICAgIC8vIEV2ZW50IGhhbmRsZXIgZm9yIFNNUCAoU29jaWFsaXN0J3MgTWlsbGlvbmFpcmUgUHJvdG9jb2wpCiAgICAgICAgICAgICAgICAvLyB1c2VkIGJ5IE9UUiAob2ZmLXRoZS1yZWNvcmQpLgogICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAncXVlc3Rpb24nOgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm90ci5zbXBTZWNyZXQocHJvbXB0KF9fKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0F1dGhlbnRpY2F0aW9uIHJlcXVlc3QgZnJvbSAlMSRzXG5cbllvdXIgYnVkZHkgaXMgYXR0ZW1wdGluZyB0byB2ZXJpZnkgeW91ciBpZGVudGl0eSwgYnkgYXNraW5nIHlvdSB0aGUgcXVlc3Rpb24gYmVsb3cuXG5cbiUyJHMnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMuZ2V0KCdmdWxsbmFtZScpLCBkYXRhXSkpKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJ1c3QnOgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlKHsnb3RyX3N0YXR1cyc6IFZFUklGSUVEfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Nob3dIZWxwTWVzc2FnZXMnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfXygiQ291bGQgbm90IHZlcmlmeSB0aGlzIHVzZXIncyBpZGVudGlmeS4iKV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vycm9yJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmUoeydvdHJfc3RhdHVzJzogVU5WRVJJRklFRH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlLicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaW5pdGlhdGVPVFI6IGZ1bmN0aW9uIChxdWVyeV9tc2cpIHsKICAgICAgICAgICAgICAgIC8vIFNldHMgdXAgYW4gT1RSIG9iamVjdCB0aHJvdWdoIHdoaWNoIHdlIGNhbiBzZW5kIGFuZCByZWNlaXZlCiAgICAgICAgICAgICAgICAvLyBlbmNyeXB0ZWQgbWVzc2FnZXMuCiAgICAgICAgICAgICAgICAvLwogICAgICAgICAgICAgICAgLy8gSWYgJ3F1ZXJ5X21zZycgaXMgcGFzc2VkIGluLCBpdCBtZWFucyB0aGVyZSBpcyBhbiBhbHJlYWQgaW5jb21pbmcKICAgICAgICAgICAgICAgIC8vIHF1ZXJ5IG1lc3NhZ2UgZnJvbSBvdXIgYnVkZHkuIE90aGVyd2lzZSwgaXQgaXMgdXMgd2hvIHdpbGwKICAgICAgICAgICAgICAgIC8vIHNlbmQgdGhlIHF1ZXJ5IG1lc3NhZ2UgdG8gdGhlbS4KICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSh7J290cl9zdGF0dXMnOiBVTkVOQ1JZUFRFRH0pOwogICAgICAgICAgICAgICAgdmFyIHNlc3Npb24gPSB0aGlzLmdldFNlc3Npb24oJC5wcm94eShmdW5jdGlvbiAoc2Vzc2lvbikgewogICAgICAgICAgICAgICAgICAgIHRoaXMub3RyID0gbmV3IE9UUih7CiAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50X3NpemU6IDE0MCwKICAgICAgICAgICAgICAgICAgICAgICAgc2VuZF9pbnRlcnZhbDogMjAwLAogICAgICAgICAgICAgICAgICAgICAgICBwcml2OiBzZXNzaW9uLmtleSwKICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VfdGFnOiBzZXNzaW9uLmluc3RhbmNlX3RhZywKICAgICAgICAgICAgICAgICAgICAgICAgZGVidWc6IHRoaXMuZGVidWcKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB0aGlzLm90ci5vbignc3RhdHVzJywgJC5wcm94eSh0aGlzLnVwZGF0ZU9UUlN0YXR1cywgdGhpcykpOwogICAgICAgICAgICAgICAgICAgIHRoaXMub3RyLm9uKCdzbXAnLCAkLnByb3h5KHRoaXMub25TTVAsIHRoaXMpKTsKCiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdHIub24oJ3VpJywgJC5wcm94eShmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignc2hvd1JlY2VpdmVkT1RSTWVzc2FnZScsIG1zZyk7CiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcykpOwogICAgICAgICAgICAgICAgICAgIHRoaXMub3RyLm9uKCdpbycsICQucHJveHkoZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3NlbmRNZXNzYWdlU3RhbnphJywgbXNnKTsKICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdHIub24oJ2Vycm9yJywgJC5wcm94eShmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignc2hvd09UUkVycm9yJywgbXNnKTsKICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CgogICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignc2hvd0hlbHBNZXNzYWdlcycsIFtfXygnRXhjaGFuZ2luZyBwcml2YXRlIGtleSB3aXRoIGJ1ZGR5LicpXSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5X21zZykgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm90ci5yZWNlaXZlTXNnKHF1ZXJ5X21zZyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdHIuc2VuZFF1ZXJ5TXNnKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgdGhpcykpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgZW5kT1RSOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5vdHIpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm90ci5lbmRPdHIoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSh7J290cl9zdGF0dXMnOiBVTkVOQ1JZUFRFRH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY3JlYXRlTWVzc2FnZTogZnVuY3Rpb24gKCRtZXNzYWdlKSB7CiAgICAgICAgICAgICAgICB2YXIgYm9keSA9ICRtZXNzYWdlLmNoaWxkcmVuKCdib2R5JykudGV4dCgpLAogICAgICAgICAgICAgICAgICAgIGNvbXBvc2luZyA9ICRtZXNzYWdlLmZpbmQoJ2NvbXBvc2luZycpLAogICAgICAgICAgICAgICAgICAgIHBhdXNlZCA9ICRtZXNzYWdlLmZpbmQoJ3BhdXNlZCcpLAogICAgICAgICAgICAgICAgICAgIGRlbGF5ZWQgPSAkbWVzc2FnZS5maW5kKCdkZWxheScpLmxlbmd0aCA+IDAsCiAgICAgICAgICAgICAgICAgICAgZnVsbG5hbWUgPSB0aGlzLmdldCgnZnVsbG5hbWUnKSwKICAgICAgICAgICAgICAgICAgICBpc19ncm91cGNoYXQgPSAkbWVzc2FnZS5hdHRyKCd0eXBlJykgPT09ICdncm91cGNoYXQnLAogICAgICAgICAgICAgICAgICAgIG1zZ2lkID0gJG1lc3NhZ2UuYXR0cignaWQnKSwKICAgICAgICAgICAgICAgICAgICBzdGFtcCwgdGltZSwgc2VuZGVyLCBmcm9tOwoKICAgICAgICAgICAgICAgIGlmIChpc19ncm91cGNoYXQpIHsKICAgICAgICAgICAgICAgICAgICBmcm9tID0gU3Ryb3BoZS51bmVzY2FwZU5vZGUoU3Ryb3BoZS5nZXRSZXNvdXJjZUZyb21KaWQoJG1lc3NhZ2UuYXR0cignZnJvbScpKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZyb20gPSBTdHJvcGhlLmdldEJhcmVKaWRGcm9tSmlkKCRtZXNzYWdlLmF0dHIoJ2Zyb20nKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmdWxsbmFtZSA9IChfLmlzRW1wdHkoZnVsbG5hbWUpPyBmcm9tOiBmdWxsbmFtZSkuc3BsaXQoJyAnKVswXTsKCiAgICAgICAgICAgICAgICBpZiAoIWJvZHkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoY29tcG9zaW5nLmxlbmd0aCB8fCBwYXVzZWQubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZJWE1FOiB1c2Ugb25lIGF0dHJpYnV0ZSBmb3IgY2hhdCBzdGF0ZXMgKGUuZy4KICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hhdHN0YXRlKSBpbnN0ZWFkIG9mIHNhdmluZyAncGF1c2VkJyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ2NvbXBvc2luZycgc2VwYXJhdGVseS4KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlcy5hZGQoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbG5hbWU6IGZ1bGxuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyOiAndGhlbScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheWVkOiBkZWxheWVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogbW9tZW50KCkuZm9ybWF0KCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb3Npbmc6IGNvbXBvc2luZy5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZWQ6IHBhdXNlZC5sZW5ndGgKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZGVsYXllZCkgewogICAgICAgICAgICAgICAgICAgICAgICBzdGFtcCA9ICRtZXNzYWdlLmZpbmQoJ2RlbGF5JykuYXR0cignc3RhbXAnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9IHN0YW1wOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKChpc19ncm91cGNoYXQgJiYgZnJvbSA9PT0gdGhpcy5nZXQoJ25pY2snKSkgfHwgKCFpc19ncm91cGNoYXQgJiYgZnJvbSA9PSBjb252ZXJzZS5iYXJlX2ppZCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyID0gJ21lJzsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXIgPSAndGhlbSc7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZXMuY3JlYXRlKHsKICAgICAgICAgICAgICAgICAgICAgICAgZnVsbG5hbWU6IGZ1bGxuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXI6IHNlbmRlciwKICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXllZDogZGVsYXllZCwKICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogdGltZSwKICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYm9keSwKICAgICAgICAgICAgICAgICAgICAgICAgbXNnaWQ6IG1zZ2lkCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZWNlaXZlTWVzc2FnZTogZnVuY3Rpb24gKCRtZXNzYWdlKSB7CiAgICAgICAgICAgICAgICB2YXIgJGJvZHkgPSAkbWVzc2FnZS5jaGlsZHJlbignYm9keScpOwogICAgICAgICAgICAgICAgdmFyIHRleHQgPSAoJGJvZHkubGVuZ3RoID4gMCA/ICRib2R5LnRleHQoKSA6IHVuZGVmaW5lZCk7CiAgICAgICAgICAgICAgICBpZiAoKCF0ZXh0KSB8fCAoIWNvbnZlcnNlLmFsbG93X290cikpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVNZXNzYWdlKCRtZXNzYWdlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0ZXh0Lm1hdGNoKC9eXD9PVFJ2MjM/LykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRpYXRlT1RSKHRleHQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoXy5jb250YWlucyhbVU5WRVJJRklFRCwgVkVSSUZJRURdLCB0aGlzLmdldCgnb3RyX3N0YXR1cycpKSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm90ci5yZWNlaXZlTXNnKHRleHQpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0Lm1hdGNoKC9eXD9PVFIvKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm90cikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhdGVPVFIodGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3RyLnJlY2VpdmVNc2codGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3JtYWwgdW5lbmNyeXB0ZWQgbWVzc2FnZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTWVzc2FnZSgkbWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5DaGF0Qm94VmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHsKICAgICAgICAgICAgbGVuZ3RoOiAyMDAsCiAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLAogICAgICAgICAgICBjbGFzc05hbWU6ICdjaGF0Ym94JywKICAgICAgICAgICAgaXNfY2hhdHJvb206IGZhbHNlLCAgLy8gVGhpcyBpcyBub3QgYSBtdWx0aS11c2VyIGNoYXRyb29tCgogICAgICAgICAgICBldmVudHM6IHsKICAgICAgICAgICAgICAgICdjbGljayAuY2xvc2UtY2hhdGJveC1idXR0b24nOiAnY2xvc2UnLAogICAgICAgICAgICAgICAgJ2NsaWNrIC50b2dnbGUtY2hhdGJveC1idXR0b24nOiAnbWluaW1pemUnLAogICAgICAgICAgICAgICAgJ2tleXByZXNzIHRleHRhcmVhLmNoYXQtdGV4dGFyZWEnOiAna2V5UHJlc3NlZCcsCiAgICAgICAgICAgICAgICAnY2xpY2sgLnRvZ2dsZS1zbWlsZXknOiAndG9nZ2xlRW1vdGljb25NZW51JywKICAgICAgICAgICAgICAgICdjbGljayAudG9nZ2xlLXNtaWxleSB1bCBsaSc6ICdpbnNlcnRFbW90aWNvbicsCiAgICAgICAgICAgICAgICAnY2xpY2sgLnRvZ2dsZS1jbGVhcic6ICdjbGVhck1lc3NhZ2VzJywKICAgICAgICAgICAgICAgICdjbGljayAudG9nZ2xlLW90cic6ICd0b2dnbGVPVFJNZW51JywKICAgICAgICAgICAgICAgICdjbGljayAuc3RhcnQtb3RyJzogJ3N0YXJ0T1RSRnJvbVRvb2xiYXInLAogICAgICAgICAgICAgICAgJ2NsaWNrIC5lbmQtb3RyJzogJ2VuZE9UUicsCiAgICAgICAgICAgICAgICAnY2xpY2sgLmF1dGgtb3RyJzogJ2F1dGhPVFInLAogICAgICAgICAgICAgICAgJ2NsaWNrIC50b2dnbGUtY2FsbCc6ICd0b2dnbGVDYWxsJywKICAgICAgICAgICAgICAgICdtb3VzZWRvd24gLmRyYWdyZXNpemUtdG0nOiAnb25EcmFnUmVzaXplU3RhcnQnCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKXsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwubWVzc2FnZXMub24oJ2FkZCcsIHRoaXMub25NZXNzYWdlQWRkZWQsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbignc2hvdycsIHRoaXMuc2hvdywgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCdkZXN0cm95JywgdGhpcy5oaWRlLCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oJ2NoYW5nZScsIHRoaXMub25DaGFuZ2UsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbignc2hvd09UUkVycm9yJywgdGhpcy5zaG93T1RSRXJyb3IsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbignYnVkZHlTdGFydHNPVFInLCB0aGlzLmJ1ZGR5U3RhcnRzT1RSLCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oJ3Nob3dIZWxwTWVzc2FnZXMnLCB0aGlzLnNob3dIZWxwTWVzc2FnZXMsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbignc2VuZE1lc3NhZ2VTdGFuemEnLCB0aGlzLnNlbmRNZXNzYWdlU3RhbnphLCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oJ3Nob3dTZW50T1RSTWVzc2FnZScsIGZ1bmN0aW9uICh0ZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93TWVzc2FnZSh7J21lc3NhZ2UnOiB0ZXh0LCAnc2VuZGVyJzogJ21lJ30pOwogICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCdzaG93UmVjZWl2ZWRPVFJNZXNzYWdlJywgZnVuY3Rpb24gKHRleHQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dNZXNzYWdlKHsnbWVzc2FnZSc6IHRleHQsICdzZW5kZXInOiAndGhlbSd9KTsKICAgICAgICAgICAgICAgIH0sIHRoaXMpOwoKICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVkNhcmQoKTsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmluc2VydEFmdGVyKGNvbnZlcnNlLmNoYXRib3h2aWV3cy5nZXQoImNvbnRyb2xib3giKS4kZWwpOwogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKS5tb2RlbC5tZXNzYWdlcy5mZXRjaCh7YWRkOiB0cnVlfSk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5tb2RlbC5nZXQoJ21pbmltaXplZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKChfLmNvbnRhaW5zKFtVTlZFUklGSUVELCBWRVJJRklFRF0sIHRoaXMubW9kZWwuZ2V0KCdvdHJfc3RhdHVzJykpKSB8fCBjb252ZXJzZS51c2Vfb3RyX2J5X2RlZmF1bHQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmluaXRpYXRlT1RSKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmF0dHIoJ2lkJywgdGhpcy5tb2RlbC5nZXQoJ2JveF9pZCcpKQogICAgICAgICAgICAgICAgICAgIC5odG1sKGNvbnZlcnNlLnRlbXBsYXRlcy5jaGF0Ym94KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5leHRlbmQodGhpcy5tb2RlbC50b0pTT04oKSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93X3Rvb2xiYXI6IGNvbnZlcnNlLnNob3dfdG9vbGJhciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxfcGVyc29uYWxfbWVzc2FnZTogX18oJ1BlcnNvbmFsIG1lc3NhZ2UnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclRvb2xiYXIoKS5yZW5kZXJBdmF0YXIoKTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmVtaXQoJ2NoYXRCb3hPcGVuZWQnLCB0aGlzKTsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLnJlZnJlc2hXZWJraXQoKTsKICAgICAgICAgICAgICAgIH0sIDUwKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3dTdGF0dXNNZXNzYWdlKCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpbml0RHJhZ1Jlc2l6ZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGhpcy5wcmV2X3BhZ2VZID0gMDsgLy8gVG8gc3RvcmUgbGFzdCBrbm93biBtb3VzZSBwb3NpdGlvbgogICAgICAgICAgICAgICAgaWYgKGNvbnZlcnNlLmNvbm5lY3Rpb24uY29ubmVjdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1vZGVsLmdldCgnaGVpZ2h0Jyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNob3dTdGF0dXNOb3RpZmljYXRpb246IGZ1bmN0aW9uIChtZXNzYWdlLCBrZWVwX29sZCkgewogICAgICAgICAgICAgICAgdmFyICRjaGF0X2NvbnRlbnQgPSB0aGlzLiRlbC5maW5kKCcuY2hhdC1jb250ZW50Jyk7CiAgICAgICAgICAgICAgICBpZiAoIWtlZXBfb2xkKSB7CiAgICAgICAgICAgICAgICAgICAgJGNoYXRfY29udGVudC5maW5kKCdkaXYuY2hhdC1ldmVudCcpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGNoYXRfY29udGVudC5hcHBlbmQoJCgnPGRpdiBjbGFzcz0iY2hhdC1ldmVudCI+PC9kaXY+JykudGV4dChtZXNzYWdlKSk7CiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbERvd24oKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNsZWFyQ2hhdFJvb21NZXNzYWdlczogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV2ICE9PSAidW5kZWZpbmVkIikgeyBldi5zdG9wUHJvcGFnYXRpb24oKTsgfQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNvbmZpcm0oX18oIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjbGVhciB0aGUgbWVzc2FnZXMgZnJvbSB0aGlzIHJvb20/IikpOwogICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmZpbmQoJy5jaGF0LWNvbnRlbnQnKS5lbXB0eSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzaG93TWVzc2FnZTogZnVuY3Rpb24gKG1zZ19kaWN0KSB7CiAgICAgICAgICAgICAgICB2YXIgJGNvbnRlbnQgPSB0aGlzLiRlbC5maW5kKCcuY2hhdC1jb250ZW50JyksCiAgICAgICAgICAgICAgICAgICAgbXNnX3RpbWUgPSBtb21lbnQobXNnX2RpY3QudGltZSkgfHwgbW9tZW50LAogICAgICAgICAgICAgICAgICAgIHRleHQgPSBtc2dfZGljdC5tZXNzYWdlLAogICAgICAgICAgICAgICAgICAgIG1hdGNoID0gdGV4dC5tYXRjaCgvXlwvKC4qPykoPzogKC4qKSk/JC8pLAogICAgICAgICAgICAgICAgICAgIGZ1bGxuYW1lID0gbXNnX2RpY3QuZnVsbG5hbWUgfHwgdGhpcy5tb2RlbC5nZXQoJ2Z1bGxuYW1lJyksIC8vIFhYWCBQZXJoYXBzIGFsd2F5cyB1c2UgbW9kZWwncz8KICAgICAgICAgICAgICAgICAgICBleHRyYV9jbGFzc2VzID0gbXNnX2RpY3QuZGVsYXllZCAmJiAnZGVsYXllZCcgfHwgJycsCiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUsIHVzZXJuYW1lOwoKICAgICAgICAgICAgICAgIGlmICgobWF0Y2gpICYmIChtYXRjaFsxXSA9PT0gJ21lJykpIHsKICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eXC9tZS8sICcnKTsKICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IGNvbnZlcnNlLnRlbXBsYXRlcy5hY3Rpb247CiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBmdWxsbmFtZTsKICAgICAgICAgICAgICAgIH0gZWxzZSAgewogICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gY29udmVyc2UudGVtcGxhdGVzLm1lc3NhZ2U7CiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBtc2dfZGljdC5zZW5kZXIgPT09ICdtZScgJiYgX18oJ21lJykgfHwgZnVsbG5hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkY29udGVudC5maW5kKCdkaXYuY2hhdC1ldmVudCcpLnJlbW92ZSgpOwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzX2NoYXRyb29tICYmIG1zZ19kaWN0LnNlbmRlciA9PSAndGhlbScgJiYgKG5ldyBSZWdFeHAoIlxcYiIrdGhpcy5tb2RlbC5nZXQoJ25pY2snKSsiXFxiIikpLnRlc3QodGV4dCkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBBZGQgc3BlY2lhbCBjbGFzcyB0byBtYXJrIGdyb3VwY2hhdCBtZXNzYWdlcyBpbiB3aGljaCB3ZQogICAgICAgICAgICAgICAgICAgIC8vIGFyZSBtZW50aW9uZWQuCiAgICAgICAgICAgICAgICAgICAgZXh0cmFfY2xhc3NlcyArPSAnIG1lbnRpb25lZCc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHRlbXBsYXRlKHsKICAgICAgICAgICAgICAgICAgICAnc2VuZGVyJzogbXNnX2RpY3Quc2VuZGVyLAogICAgICAgICAgICAgICAgICAgICd0aW1lJzogbXNnX3RpbWUuZm9ybWF0KCdoaDptbScpLAogICAgICAgICAgICAgICAgICAgICd1c2VybmFtZSc6IHVzZXJuYW1lLAogICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJzogJycsCiAgICAgICAgICAgICAgICAgICAgJ2V4dHJhX2NsYXNzZXMnOiBleHRyYV9jbGFzc2VzCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICRjb250ZW50LmFwcGVuZCgkKG1lc3NhZ2UpLmNoaWxkcmVuKCcuY2hhdC1tZXNzYWdlLWNvbnRlbnQnKS5maXJzdCgpLnRleHQodGV4dCkuYWRkSHlwZXJsaW5rcygpLmFkZEVtb3RpY29ucygpLnBhcmVudCgpKTsKICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsRG93bigpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2hvd0hlbHBNZXNzYWdlczogZnVuY3Rpb24gKG1zZ3MsIHR5cGUsIHNwaW5uZXIpIHsKICAgICAgICAgICAgICAgIHZhciAkY2hhdF9jb250ZW50ID0gdGhpcy4kZWwuZmluZCgnLmNoYXQtY29udGVudCcpLCBpLAogICAgICAgICAgICAgICAgICAgIG1zZ3NfbGVuZ3RoID0gbXNncy5sZW5ndGg7CiAgICAgICAgICAgICAgICBmb3IgKGk9MDsgaTxtc2dzX2xlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgJGNoYXRfY29udGVudC5hcHBlbmQoJCgnPGRpdiBjbGFzcz0iY2hhdC0nKyh0eXBlfHwnaW5mbycpKyciPicrbXNnc1tpXSsnPC9kaXY+JykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHNwaW5uZXIgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAkY2hhdF9jb250ZW50LmFwcGVuZCgnPHNwYW4gY2xhc3M9InNwaW5uZXIiLz4nKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3Bpbm5lciA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAkY2hhdF9jb250ZW50LmZpbmQoJ3NwYW4uc3Bpbm5lcicpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsRG93bigpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25NZXNzYWdlQWRkZWQ6IGZ1bmN0aW9uIChtZXNzYWdlKSB7CiAgICAgICAgICAgICAgICB2YXIgdGltZSA9IG1lc3NhZ2UuZ2V0KCd0aW1lJyksCiAgICAgICAgICAgICAgICAgICAgdGltZXMgPSB0aGlzLm1vZGVsLm1lc3NhZ2VzLnBsdWNrKCd0aW1lJyksCiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNfbWVzc2FnZSwgaWR4LCB0aGlzX2RhdGUsIHByZXZfZGF0ZSwgdGV4dCwgbWF0Y2g7CgogICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBtZXNzYWdlIGlzIG9uIGEgZGlmZmVyZW50IGRheSB0aGFuIHRoZSBvbmUgcmVjZWl2ZWQKICAgICAgICAgICAgICAgIC8vIHByaW9yLCB0aGVuIGluZGljYXRlIGl0IG9uIHRoZSBjaGF0Ym94LgogICAgICAgICAgICAgICAgaWR4ID0gXy5pbmRleE9mKHRpbWVzLCB0aW1lKS0xOwogICAgICAgICAgICAgICAgaWYgKGlkeCA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNfbWVzc2FnZSA9IHRoaXMubW9kZWwubWVzc2FnZXMuYXQoaWR4KTsKICAgICAgICAgICAgICAgICAgICBwcmV2X2RhdGUgPSBtb21lbnQocHJldmlvdXNfbWVzc2FnZS5nZXQoJ3RpbWUnKSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZfZGF0ZS5pc0JlZm9yZSh0aW1lLCAnZGF5JykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19kYXRlID0gbW9tZW50KHRpbWUpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCcuY2hhdC1jb250ZW50JykuYXBwZW5kKGNvbnZlcnNlLnRlbXBsYXRlcy5uZXdfZGF5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzb2RhdGU6IHRoaXNfZGF0ZS5mb3JtYXQoIllZWVktTU0tREQiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVzdHJpbmc6IHRoaXNfZGF0ZS5mb3JtYXQoImRkZGQgTU1NIERvIFlZWVkiKQogICAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZ2V0KENPTVBPU0lORykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTdGF0dXNOb3RpZmljYXRpb24obWVzc2FnZS5nZXQoJ2Z1bGxuYW1lJykrJyAnK19fKCdpcyB0eXBpbmcnKSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLmdldChQQVVTRUQpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93U3RhdHVzTm90aWZpY2F0aW9uKG1lc3NhZ2UuZ2V0KCdmdWxsbmFtZScpKycgJytfXygnaGFzIHN0b3BwZWQgdHlwaW5nJykpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93TWVzc2FnZShfLmNsb25lKG1lc3NhZ2UuYXR0cmlidXRlcykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKChtZXNzYWdlLmdldCgnc2VuZGVyJykgIT0gJ21lJykgJiYgKGNvbnZlcnNlLndpbmRvd1N0YXRlID09ICdibHVyJykpIHsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5pbmNyZW1lbnRNc2dDb3VudGVyKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxEb3duKCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzZW5kTWVzc2FnZVN0YW56YTogZnVuY3Rpb24gKHRleHQpIHsKICAgICAgICAgICAgICAgIC8qCiAgICAgICAgICAgICAgICAgKiBTZW5kcyB0aGUgYWN0dWFsIFhNTCBzdGFuemEgdG8gdGhlIFhNUFAgc2VydmVyLgogICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICAvLyBUT0RPOiBMb29rIGluIENoYXRQYXJ0bmVycyB0byBzZWUgd2hhdCByZXNvdXJjZXMgd2UgaGF2ZSBmb3IgdGhlIHJlY2lwaWVudC4KICAgICAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgb25lIHJlc291cmNlLCB3ZSBzZW50IHRvIG9ubHkgdGhhdCByZXNvdXJjZXMsIGlmIHdlIGhhdmUgbXVsdGlwbGUKICAgICAgICAgICAgICAgIC8vIHdlIHNlbmQgdG8gdGhlIGJhcmUgamlkLgogICAgICAgICAgICAgICAgdmFyIHRpbWVzdGFtcCA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7CiAgICAgICAgICAgICAgICB2YXIgYmFyZV9qaWQgPSB0aGlzLm1vZGVsLmdldCgnamlkJyk7CiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9ICRtc2coe2Zyb206IGNvbnZlcnNlLmNvbm5lY3Rpb24uamlkLCB0bzogYmFyZV9qaWQsIHR5cGU6ICdjaGF0JywgaWQ6IHRpbWVzdGFtcH0pCiAgICAgICAgICAgICAgICAgICAgLmMoJ2JvZHknKS50KHRleHQpLnVwKCkKICAgICAgICAgICAgICAgICAgICAuYygnYWN0aXZlJywgeyd4bWxucyc6ICdodHRwOi8vamFiYmVyLm9yZy9wcm90b2NvbC9jaGF0c3RhdGVzJ30pOwogICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5zZW5kKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgaWYgKGNvbnZlcnNlLmZvcndhcmRfbWVzc2FnZXMpIHsKICAgICAgICAgICAgICAgICAgICAvLyBGb3J3YXJkIHRoZSBtZXNzYWdlLCBzbyB0aGF0IG90aGVyIGNvbm5lY3RlZCByZXNvdXJjZXMgYXJlIGFsc28gYXdhcmUgb2YgaXQuCiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcndhcmRlZCA9ICRtc2coe3RvOmNvbnZlcnNlLmJhcmVfamlkLCB0eXBlOidjaGF0JywgaWQ6dGltZXN0YW1wfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmMoJ2ZvcndhcmRlZCcsIHt4bWxuczondXJuOnhtcHA6Zm9yd2FyZDowJ30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jKCdkZWxheScsIHt4bW5zOid1cm46eG1wcDpkZWxheScsc3RhbXA6dGltZXN0YW1wfSkudXAoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY25vZGUobWVzc2FnZS50cmVlKCkpOwogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24uc2VuZChmb3J3YXJkZWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2VuZE1lc3NhZ2U6IGZ1bmN0aW9uICh0ZXh0KSB7CiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSB0ZXh0LnJlcGxhY2UoL15ccyovLCAiIikubWF0Y2goL15cLyguKilccyokLyksIG1zZ3M7CiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMV0gPT09ICJjbGVhciIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xlYXJNZXNzYWdlcygpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtYXRjaFsxXSA9PT0gImhlbHAiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1zZ3MgPSBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHN0cm9uZz4vaGVscDwvc3Ryb25nPjonK19fKCdTaG93IHRoaXMgbWVudScpKycnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzdHJvbmc+L21lPC9zdHJvbmc+OicrX18oJ1dyaXRlIGluIHRoZSB0aGlyZCBwZXJzb24nKSsnJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3Ryb25nPi9jbGVhcjwvc3Ryb25nPjonK19fKCdSZW1vdmUgbWVzc2FnZXMnKSsnJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93SGVscE1lc3NhZ2VzKG1zZ3MpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoY29udmVyc2UuYWxsb3dfb3RyKSAmJiAobWF0Y2hbMV0gPT09ICJlbmRvdHIiKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmRPVFIoKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChjb252ZXJzZS5hbGxvd19vdHIpICYmIChtYXRjaFsxXSA9PT0gIm90ciIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmluaXRpYXRlT1RSKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKF8uY29udGFpbnMoW1VOVkVSSUZJRUQsIFZFUklGSUVEXSwgdGhpcy5tb2RlbC5nZXQoJ290cl9zdGF0dXMnKSkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBPZmYtdGhlLXJlY29yZCBlbmNyeXB0aW9uIGlzIGFjdGl2ZQogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub3RyLnNlbmRNc2codGV4dCk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC50cmlnZ2VyKCdzaG93U2VudE9UUk1lc3NhZ2UnLCB0ZXh0KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gV2Ugb25seSBzYXZlIHVuZW5jcnlwdGVkIG1lc3NhZ2VzLgogICAgICAgICAgICAgICAgICAgIHZhciBmdWxsbmFtZSA9IGNvbnZlcnNlLnhtcHBzdGF0dXMuZ2V0KCdmdWxsbmFtZScpOwogICAgICAgICAgICAgICAgICAgIGZ1bGxuYW1lID0gXy5pc0VtcHR5KGZ1bGxuYW1lKT8gY29udmVyc2UuYmFyZV9qaWQ6IGZ1bGxuYW1lOwogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwubWVzc2FnZXMuY3JlYXRlKHsKICAgICAgICAgICAgICAgICAgICAgICAgZnVsbG5hbWU6IGZ1bGxuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXI6ICdtZScsCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IG1vbWVudCgpLmZvcm1hdCgpLAogICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB0ZXh0CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZVN0YW56YSh0ZXh0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGtleVByZXNzZWQ6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgdmFyICR0ZXh0YXJlYSA9ICQoZXYudGFyZ2V0KSwKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLCBub3RpZnksIGNvbXBvc2luZzsKICAgICAgICAgICAgICAgIGlmKGV2LmtleUNvZGUgPT0gS0VZLkVOVEVSKSB7CiAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gJHRleHRhcmVhLnZhbCgpOwogICAgICAgICAgICAgICAgICAgICR0ZXh0YXJlYS52YWwoJycpLmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UgIT09ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLmdldCgnY2hhdHJvb20nKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kQ2hhdFJvb21NZXNzYWdlKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5lbWl0KCdtZXNzYWdlU2VuZCcsIG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5kYXRhKCdjb21wb3NpbmcnLCBmYWxzZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLm1vZGVsLmdldCgnY2hhdHJvb20nKSkgewogICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvc2luZyBkYXRhIGlzIG9ubHkgZm9yIHNpbmdsZSB1c2VyIGNoYXQKICAgICAgICAgICAgICAgICAgICBjb21wb3NpbmcgPSB0aGlzLiRlbC5kYXRhKCdjb21wb3NpbmcnKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXYua2V5Q29kZSAhPSA0NykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3Qgc2VuZCBjb21wb3NpbmcgbWVzc2FnZXMgaWYgdGhlIG1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0cyB3aXRoIGZvcndhcmQtc2xhc2guCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZnkgPSAkbXNnKHsndG8nOnRoaXMubW9kZWwuZ2V0KCdqaWQnKSwgJ3R5cGUnOiAnY2hhdCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jKCdjb21wb3NpbmcnLCB7J3htbG5zJzonaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvY2hhdHN0YXRlcyd9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24uc2VuZChub3RpZnkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmRhdGEoJ2NvbXBvc2luZycsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIG9uRHJhZ1Jlc2l6ZVN0YXJ0OiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGlmICghY29udmVyc2UuYWxsb3dfZHJhZ3Jlc2l6ZSkgeyByZXR1cm4gdHJ1ZTsgfQogICAgICAgICAgICAgICAgLy8gUmVjb3JkIGVsZW1lbnQgYXR0cmlidXRlcyBmb3IgbW91c2VNb3ZlKCkuCiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuJGVsLmNoaWxkcmVuKCcuYm94LWZseW91dCcpLmhlaWdodCgpOwogICAgICAgICAgICAgICAgY29udmVyc2UucmVzaXplZF9jaGF0Ym94ID0gdGhpczsKICAgICAgICAgICAgICAgIHRoaXMucHJldl9wYWdlWSA9IGV2LnBhZ2VZOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2V0Q2hhdEJveEhlaWdodDogZnVuY3Rpb24gKGhlaWdodCkgewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVsLmdldCgnbWluaW1pemVkJykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5jaGlsZHJlbignLmJveC1mbHlvdXQnKVswXS5zdHlsZS5oZWlnaHQgPSBjb252ZXJzZS5hcHBseUhlaWdodFJlc2lzdGFuY2UoaGVpZ2h0KSsncHgnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVzaXplQ2hhdEJveDogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IGV2LnBhZ2VZIC0gdGhpcy5wcmV2X3BhZ2VZOwogICAgICAgICAgICAgICAgaWYgKCFkaWZmKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgLT0gZGlmZjsKICAgICAgICAgICAgICAgIHRoaXMucHJldl9wYWdlWSA9IGV2LnBhZ2VZOwogICAgICAgICAgICAgICAgdGhpcy5zZXRDaGF0Qm94SGVpZ2h0KHRoaXMuaGVpZ2h0KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNsZWFyTWVzc2FnZXM6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgaWYgKGV2ICYmIGV2LnByZXZlbnREZWZhdWx0KSB7IGV2LnByZXZlbnREZWZhdWx0KCk7IH0KICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjb25maXJtKF9fKCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2xlYXIgdGhlIG1lc3NhZ2VzIGZyb20gdGhpcyBjaGF0IGJveD8iKSk7CiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgnLmNoYXQtY29udGVudCcpLmVtcHR5KCk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5tZXNzYWdlcy5yZXNldCgpOwogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwubWVzc2FnZXMuYnJvd3NlclN0b3JhZ2UuX2NsZWFyKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluc2VydEVtb3RpY29uOiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgnLnRvZ2dsZS1zbWlsZXkgdWwnKS5zbGlkZVRvZ2dsZSgyMDApOwogICAgICAgICAgICAgICAgdmFyICR0ZXh0Ym94ID0gdGhpcy4kZWwuZmluZCgndGV4dGFyZWEuY2hhdC10ZXh0YXJlYScpOwogICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gJHRleHRib3gudmFsKCk7CiAgICAgICAgICAgICAgICB2YXIgJHRhcmdldCA9ICQoZXYudGFyZ2V0KTsKICAgICAgICAgICAgICAgICR0YXJnZXQgPSAkdGFyZ2V0LmlzKCdhJykgPyAkdGFyZ2V0IDogJHRhcmdldC5jaGlsZHJlbignYScpOwogICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmICh2YWx1ZVt2YWx1ZS5sZW5ndGgtMV0gIT09ICcgJykpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgJyAnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJHRleHRib3guZm9jdXMoKS52YWwodmFsdWUrJHRhcmdldC5kYXRhKCdlbW90aWNvbicpKycgJyk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICB0b2dnbGVFbW90aWNvbk1lbnU6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCcudG9nZ2xlLXNtaWxleSB1bCcpLnNsaWRlVG9nZ2xlKDIwMCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICB0b2dnbGVPVFJNZW51OiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgnLnRvZ2dsZS1vdHIgdWwnKS5zbGlkZVRvZ2dsZSgyMDApOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2hvd09UUkVycm9yOiBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgICAgICBpZiAobXNnID09ICdNZXNzYWdlIGNhbm5vdCBiZSBzZW50IGF0IHRoaXMgdGltZS4nKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93SGVscE1lc3NhZ2VzKAogICAgICAgICAgICAgICAgICAgICAgICBbX18oJ1lvdXIgbWVzc2FnZSBjb3VsZCBub3QgYmUgc2VudCcpXSwgJ2Vycm9yJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1zZyA9PSAnUmVjZWl2ZWQgYW4gdW5lbmNyeXB0ZWQgbWVzc2FnZS4nKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93SGVscE1lc3NhZ2VzKAogICAgICAgICAgICAgICAgICAgICAgICBbX18oJ1dlIHJlY2VpdmVkIGFuIHVuZW5jcnlwdGVkIG1lc3NhZ2UnKV0sICdlcnJvcicpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtc2cgPT0gJ1JlY2VpdmVkIGFuIHVucmVhZGFibGUgZW5jcnlwdGVkIG1lc3NhZ2UuJykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0hlbHBNZXNzYWdlcygKICAgICAgICAgICAgICAgICAgICAgICAgW19fKCdXZSByZWNlaXZlZCBhbiB1bnJlYWRhYmxlIGVuY3J5cHRlZCBtZXNzYWdlJyldLAogICAgICAgICAgICAgICAgICAgICAgICAnZXJyb3InKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93SGVscE1lc3NhZ2VzKFsnRW5jcnlwdGlvbiBlcnJvciBvY2N1cmVkOiAnK21zZ10sICdlcnJvcicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIk9UUiBFUlJPUjoiK21zZyk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBidWRkeVN0YXJ0c09UUjogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICB0aGlzLnNob3dIZWxwTWVzc2FnZXMoW19fKCdUaGlzIHVzZXIgaGFzIHJlcXVlc3RlZCBhbiBlbmNyeXB0ZWQgc2Vzc2lvbi4nKV0pOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5pbml0aWF0ZU9UUigpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc3RhcnRPVFJGcm9tVG9vbGJhcjogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICAkKGV2LnRhcmdldCkucGFyZW50KCkucGFyZW50KCkuc2xpZGVVcCgpOwogICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmluaXRpYXRlT1RSKCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBlbmRPVFI6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBldiAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5lbmRPVFIoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGF1dGhPVFI6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgdmFyIHNjaGVtZSA9ICQoZXYudGFyZ2V0KS5kYXRhKCkuc2NoZW1lOwogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCwgcXVlc3Rpb24sIGFuc3dlcjsKICAgICAgICAgICAgICAgIGlmIChzY2hlbWUgPT09ICdmaW5nZXJwcmludCcpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjb25maXJtKF9fKCdIZXJlIGFyZSB0aGUgZmluZ2VycHJpbnRzLCBwbGVhc2UgY29uZmlybSB0aGVtIHdpdGggJTEkcywgb3V0c2lkZSBvZiB0aGlzIGNoYXQuXG5cbkZpbmdlcnByaW50IGZvciB5b3UsICUyJHM6ICUzJHNcblxuRmluZ2VycHJpbnQgZm9yICUxJHM6ICU0JHNcblxuSWYgeW91IGhhdmUgY29uZmlybWVkIHRoYXQgdGhlIGZpbmdlcnByaW50cyBtYXRjaCwgY2xpY2sgT0ssIG90aGVyd2lzZSBjbGljayBDYW5jZWwuJywgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5nZXQoJ2Z1bGxuYW1lJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS54bXBwc3RhdHVzLmdldCgnZnVsbG5hbWUnKXx8Y29udmVyc2UuYmFyZV9qaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm90ci5wcml2LmZpbmdlcnByaW50KCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm90ci50aGVpcl9wcml2X3BrLmZpbmdlcnByaW50KCkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkpOwogICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5zYXZlKHsnb3RyX3N0YXR1cyc6IFZFUklGSUVEfSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5zYXZlKHsnb3RyX3N0YXR1cyc6IFVOVkVSSUZJRUR9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNjaGVtZSA9PT0gJ3NtcCcpIHsKICAgICAgICAgICAgICAgICAgICBhbGVydChfXygnWW91IHdpbGwgYmUgcHJvbXB0ZWQgdG8gcHJvdmlkZSBhIHNlY3VyaXR5IHF1ZXN0aW9uIGFuZCB0aGVuIGFuIGFuc3dlciB0byB0aGF0IHF1ZXN0aW9uLlxuXG5Zb3VyIGJ1ZGR5IHdpbGwgdGhlbiBiZSBwcm9tcHRlZCB0aGUgc2FtZSBxdWVzdGlvbiBhbmQgaWYgdGhleSB0eXBlIHRoZSBleGFjdCBzYW1lIGFuc3dlciAoY2FzZSBzZW5zaXRpdmUpLCB0aGVpciBpZGVudGl0eSB3aWxsIGJlIHZlcmlmaWVkLicpKTsKICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbiA9IHByb21wdChfXygnV2hhdCBpcyB5b3VyIHNlY3VyaXR5IHF1ZXN0aW9uPycpKTsKICAgICAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyID0gcHJvbXB0KF9fKCdXaGF0IGlzIHRoZSBhbnN3ZXIgdG8gdGhlIHNlY3VyaXR5IHF1ZXN0aW9uPycpKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vdHIuc21wU2VjcmV0KGFuc3dlciwgcXVlc3Rpb24pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93SGVscE1lc3NhZ2VzKFtfXygnSW52YWxpZCBhdXRoZW50aWNhdGlvbiBzY2hlbWUgcHJvdmlkZWQnKV0sICdlcnJvcicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgdG9nZ2xlQ2FsbDogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmVtaXQoJ2NhbGxCdXR0b25DbGlja2VkJywgewogICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb246IGNvbnZlcnNlLmNvbm5lY3Rpb24sCiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHRoaXMubW9kZWwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIChpdGVtLCBjaGFuZ2VkKSB7CiAgICAgICAgICAgICAgICBpZiAoXy5oYXMoaXRlbS5jaGFuZ2VkLCAnY2hhdF9zdGF0dXMnKSkgewogICAgICAgICAgICAgICAgICAgIHZhciBjaGF0X3N0YXR1cyA9IGl0ZW0uZ2V0KCdjaGF0X3N0YXR1cycpLAogICAgICAgICAgICAgICAgICAgICAgICBmdWxsbmFtZSA9IGl0ZW0uZ2V0KCdmdWxsbmFtZScpOwogICAgICAgICAgICAgICAgICAgIGZ1bGxuYW1lID0gXy5pc0VtcHR5KGZ1bGxuYW1lKT8gaXRlbS5nZXQoJ2ppZCcpOiBmdWxsbmFtZTsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4kZWwuaXMoJzp2aXNpYmxlJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXRfc3RhdHVzID09PSAnb2ZmbGluZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1N0YXR1c05vdGlmaWNhdGlvbihmdWxsbmFtZSsnICcrJ2hhcyBnb25lIG9mZmxpbmUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGF0X3N0YXR1cyA9PT0gJ2F3YXknKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTdGF0dXNOb3RpZmljYXRpb24oZnVsbG5hbWUrJyAnKydoYXMgZ29uZSBhd2F5Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGNoYXRfc3RhdHVzID09PSAnZG5kJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1N0YXR1c05vdGlmaWNhdGlvbihmdWxsbmFtZSsnICcrJ2lzIGJ1c3knKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGF0X3N0YXR1cyA9PT0gJ29ubGluZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmZpbmQoJ2Rpdi5jaGF0LWV2ZW50JykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuZW1pdCgnYnVkZHlTdGF0dXNDaGFuZ2VkJywgaXRlbS5hdHRyaWJ1dGVzLCBpdGVtLmdldCgnY2hhdF9zdGF0dXMnKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoXy5oYXMoaXRlbS5jaGFuZ2VkLCAnc3RhdHVzJykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTdGF0dXNNZXNzYWdlKCk7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuZW1pdCgnYnVkZHlTdGF0dXNNZXNzYWdlQ2hhbmdlZCcsIGl0ZW0uYXR0cmlidXRlcywgaXRlbS5nZXQoJ3N0YXR1cycpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChfLmhhcyhpdGVtLmNoYW5nZWQsICdpbWFnZScpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJBdmF0YXIoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChfLmhhcyhpdGVtLmNoYW5nZWQsICdvdHJfc3RhdHVzJykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclRvb2xiYXIoKS5pbmZvcm1PVFJDaGFuZ2UoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChfLmhhcyhpdGVtLmNoYW5nZWQsICdtaW5pbWl6ZWQnKSkgewogICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmdldCgnbWluaW1pemVkJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhpbWl6ZSgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIFRPRE8gY2hlY2sgZm9yIGNoYW5nZWQgZnVsbG5hbWUgYXMgd2VsbAogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2hvd1N0YXR1c01lc3NhZ2U6IGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgICAgIG1zZyA9IG1zZyB8fCB0aGlzLm1vZGVsLmdldCgnc3RhdHVzJyk7CiAgICAgICAgICAgICAgICBpZiAobXNnKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgncC51c2VyLWN1c3RvbS1tZXNzYWdlJykudGV4dChtc2cpLmF0dHIoJ3RpdGxlJywgbXNnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgaWYgKGV2ICYmIGV2LnByZXZlbnREZWZhdWx0KSB7IGV2LnByZXZlbnREZWZhdWx0KCk7IH0KICAgICAgICAgICAgICAgIGlmIChjb252ZXJzZS5jb25uZWN0aW9uLmNvbm5lY3RlZCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuZGVzdHJveSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnRyaWdnZXIoJ2hpZGUnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbnZlcnNlLmVtaXQoJ2NoYXRCb3hDbG9zZWQnLCB0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgbWF4aW1pemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIC8vIFJlc3RvcmVzIGEgbWluaW1pemVkIGNoYXQgYm94CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5pbnNlcnRBZnRlcihjb252ZXJzZS5jaGF0Ym94dmlld3MuZ2V0KCJjb250cm9sYm94IikuJGVsKS5zaG93KCdmYXN0JywgJC5wcm94eShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UucmVmcmVzaFdlYmtpdCgpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5lbWl0KCdjaGF0Qm94TWF4aW1pemVkJywgdGhpcyk7CiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBtaW5pbWl6ZTogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBpZiAoZXYgJiYgZXYucHJldmVudERlZmF1bHQpIHsgZXYucHJldmVudERlZmF1bHQoKTsgfQogICAgICAgICAgICAgICAgLy8gTWluaW1pemVzIGEgY2hhdCBib3gKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwubWluaW1pemUoKTsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmhpZGUoJ2Zhc3QnLCBjb252ZXJzZS5yZWZyZXNod2Via2l0KTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmVtaXQoJ2NoYXRCb3hNaW5pbWl6ZWQnLCB0aGlzKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHVwZGF0ZVZDYXJkOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgamlkID0gdGhpcy5tb2RlbC5nZXQoJ2ppZCcpLAogICAgICAgICAgICAgICAgICAgIGNvbnRhY3QgPSBjb252ZXJzZS5yb3N0ZXIuZ2V0KGppZCk7CiAgICAgICAgICAgICAgICBpZiAoKGNvbnRhY3QpICYmICghY29udGFjdC5nZXQoJ3ZjYXJkX3VwZGF0ZWQnKSkpIHsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5nZXRWQ2FyZCgKICAgICAgICAgICAgICAgICAgICAgICAgamlkLAogICAgICAgICAgICAgICAgICAgICAgICAkLnByb3h5KGZ1bmN0aW9uIChqaWQsIGZ1bGxuYW1lLCBpbWFnZSwgaW1hZ2VfdHlwZSwgdXJsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNhdmUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsbmFtZScgOiBmdWxsbmFtZSB8fCBqaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VybCc6IHVybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW1hZ2VfdHlwZSc6IGltYWdlX3R5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ltYWdlJzogaW1hZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSwKICAgICAgICAgICAgICAgICAgICAgICAgJC5wcm94eShmdW5jdGlvbiAoc3RhbnphKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5sb2coIkNoYXRCb3hWaWV3LmluaXRpYWxpemU6IEFuIGVycm9yIG9jY3VyZWQgd2hpbGUgZmV0Y2hpbmcgdmNhcmQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcykKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaW5mb3JtT1RSQ2hhbmdlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMubW9kZWwudG9KU09OKCk7CiAgICAgICAgICAgICAgICB2YXIgbXNncyA9IFtdOwogICAgICAgICAgICAgICAgaWYgKGRhdGEub3RyX3N0YXR1cyA9PSBVTkVOQ1JZUFRFRCkgewogICAgICAgICAgICAgICAgICAgIG1zZ3MucHVzaChfXygiWW91ciBtZXNzYWdlcyBhcmUgbm90IGVuY3J5cHRlZCBhbnltb3JlIikpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLm90cl9zdGF0dXMgPT0gVU5WRVJJRklFRCl7CiAgICAgICAgICAgICAgICAgICAgbXNncy5wdXNoKF9fKCJZb3VyIG1lc3NhZ2VzIGFyZSBub3cgZW5jcnlwdGVkIGJ1dCB5b3VyIGJ1ZGR5J3MgaWRlbnRpdHkgaGFzIG5vdCBiZWVuIHZlcmlmaWVkLiIpKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5vdHJfc3RhdHVzID09IFZFUklGSUVEKXsKICAgICAgICAgICAgICAgICAgICBtc2dzLnB1c2goX18oIllvdXIgYnVkZHkncyBpZGVudGlmeSBoYXMgYmVlbiB2ZXJpZmllZC4iKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEub3RyX3N0YXR1cyA9PSBGSU5JU0hFRCl7CiAgICAgICAgICAgICAgICAgICAgbXNncy5wdXNoKF9fKCJZb3VyIGJ1ZGR5IGhhcyBlbmRlZCBlbmNyeXB0aW9uIG9uIHRoZWlyIGVuZCwgeW91IHNob3VsZCBkbyB0aGUgc2FtZS4iKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaG93SGVscE1lc3NhZ2VzKG1zZ3MsICdpbmZvJywgZmFsc2UpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVuZGVyVG9vbGJhcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKGNvbnZlcnNlLnNob3dfdG9vbGJhcikgewogICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5tb2RlbC50b0pTT04oKTsKICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5vdHJfc3RhdHVzID09IFVORU5DUllQVEVEKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3RyX3Rvb2x0aXAgPSBfXygnWW91ciBtZXNzYWdlcyBhcmUgbm90IGVuY3J5cHRlZC4gQ2xpY2sgaGVyZSB0byBlbmFibGUgT1RSIGVuY3J5cHRpb24uJyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLm90cl9zdGF0dXMgPT0gVU5WRVJJRklFRCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3RyX3Rvb2x0aXAgPSBfXygnWW91ciBtZXNzYWdlcyBhcmUgZW5jcnlwdGVkLCBidXQgeW91ciBidWRkeSBoYXMgbm90IGJlZW4gdmVyaWZpZWQuJyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLm90cl9zdGF0dXMgPT0gVkVSSUZJRUQpewogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm90cl90b29sdGlwID0gX18oJ1lvdXIgbWVzc2FnZXMgYXJlIGVuY3J5cHRlZCBhbmQgeW91ciBidWRkeSB2ZXJpZmllZC4nKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEub3RyX3N0YXR1cyA9PSBGSU5JU0hFRCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3RyX3Rvb2x0aXAgPSBfXygnWW91ciBidWRkeSBoYXMgY2xvc2VkIHRoZWlyIGVuZCBvZiB0aGUgcHJpdmF0ZSBzZXNzaW9uLCB5b3Ugc2hvdWxkIGRvIHRoZSBzYW1lJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmZpbmQoJy5jaGF0LXRvb2xiYXInKS5odG1sKAogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS50ZW1wbGF0ZXMudG9vbGJhcigKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uZXh0ZW5kKGRhdGEsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSU5JU0hFRDogRklOSVNIRUQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVU5FTkNSWVBURUQ6IFVORU5DUllQVEVELAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVOVkVSSUZJRUQ6IFVOVkVSSUZJRUQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVkVSSUZJRUQ6IFZFUklGSUVELAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93X290cjogY29udmVyc2UuYWxsb3dfb3RyICYmICF0aGlzLmlzX2NoYXRyb29tLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsX2NsZWFyOiBfXygnQ2xlYXIgYWxsIG1lc3NhZ2VzJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxfZW5kX2VuY3J5cHRlZF9jb252ZXJzYXRpb246IF9fKCdFbmQgZW5jcnlwdGVkIGNvbnZlcnNhdGlvbicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsX2hpZGVfcGFydGljaXBhbnRzOiBfXygnSGlkZSB0aGUgbGlzdCBvZiBwYXJ0aWNpcGFudHMnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbF9yZWZyZXNoX2VuY3J5cHRlZF9jb252ZXJzYXRpb246IF9fKCdSZWZyZXNoIGVuY3J5cHRlZCBjb252ZXJzYXRpb24nKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbF9zdGFydF9jYWxsOiBfXygnU3RhcnQgYSBjYWxsJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxfc3RhcnRfZW5jcnlwdGVkX2NvbnZlcnNhdGlvbjogX18oJ1N0YXJ0IGVuY3J5cHRlZCBjb252ZXJzYXRpb24nKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbF92ZXJpZnlfd2l0aF9maW5nZXJwcmludHM6IF9fKCdWZXJpZnkgd2l0aCBmaW5nZXJwcmludHMnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbF92ZXJpZnlfd2l0aF9zbXA6IF9fKCdWZXJpZnkgd2l0aCBTTVAnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbF93aGF0c190aGlzOiBfXygiV2hhdFwncyB0aGlzPyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90cl9zdGF0dXNfY2xhc3M6IE9UUl9DTEFTU19NQVBQSU5HW2RhdGEub3RyX3N0YXR1c10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RyX3RyYW5zbGF0ZWRfc3RhdHVzOiBPVFJfVFJBTlNMQVRFRF9NQVBQSU5HW2RhdGEub3RyX3N0YXR1c10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd19jYWxsX2J1dHRvbjogY29udmVyc2UudmlzaWJsZV90b29sYmFyX2J1dHRvbnMuY2FsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93X2NsZWFyX2J1dHRvbjogY29udmVyc2UudmlzaWJsZV90b29sYmFyX2J1dHRvbnMuY2xlYXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd19lbW90aWNvbnM6IGNvbnZlcnNlLnZpc2libGVfdG9vbGJhcl9idXR0b25zLmVtb3RpY29ucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93X3BhcnRpY2lwYW50c190b2dnbGU6IHRoaXMuaXNfY2hhdHJvb20gJiYgY29udmVyc2UudmlzaWJsZV90b29sYmFyX2J1dHRvbnMudG9nZ2xlX3BhcnRpY2lwYW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHJlbmRlckF2YXRhcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVsLmdldCgnaW1hZ2UnKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBpbWdfc3JjID0gJ2RhdGE6Jyt0aGlzLm1vZGVsLmdldCgnaW1hZ2VfdHlwZScpKyc7YmFzZTY0LCcrdGhpcy5tb2RlbC5nZXQoJ2ltYWdlJyksCiAgICAgICAgICAgICAgICAgICAgY2FudmFzID0gJCgnPGNhbnZhcyBoZWlnaHQ9IjMxcHgiIHdpZHRoPSIzMXB4IiBjbGFzcz0iYXZhdGFyIj48L2NhbnZhcz4nKS5nZXQoMCk7CgogICAgICAgICAgICAgICAgaWYgKCEoY2FudmFzLmdldENvbnRleHQgJiYgY2FudmFzLmdldENvbnRleHQoJzJkJykpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7ICAgLy8gQ3JlYXRlIG5ldyBJbWFnZSBvYmplY3QKICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJhdGlvID0gaW1nLndpZHRoL2ltZy5oZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsMCwgMzUqcmF0aW8sIDM1KTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpbWcuc3JjID0gaW1nX3NyYzsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmZpbmQoJy5jaGF0LXRpdGxlJykuYmVmb3JlKGNhbnZhcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGZvY3VzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCcuY2hhdC10ZXh0YXJlYScpLmZvY3VzKCk7CiAgICAgICAgICAgICAgICBjb252ZXJzZS5lbWl0KCdjaGF0Qm94Rm9jdXNlZCcsIHRoaXMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBoaWRlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy4kZWwuaXMoJzp2aXNpYmxlJykgJiYgdGhpcy4kZWwuY3NzKCdvcGFjaXR5JykgPT0gIjEiKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLnJlZnJlc2hXZWJraXQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy4kZWwuaXMoJzp2aXNpYmxlJykgJiYgdGhpcy4kZWwuY3NzKCdvcGFjaXR5JykgPT0gIjEiKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9jdXMoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuJGVsLmZhZGVJbihjYWxsYmFjayk7CiAgICAgICAgICAgICAgICBpZiAoY29udmVyc2UuY29ubmVjdGlvbi5jb25uZWN0ZWQpIHsKICAgICAgICAgICAgICAgICAgICAvLyBXaXRob3V0IGEgY29ubmVjdGlvbiwgd2UgaGF2ZW4ndCB5ZXQgaW5pdGlhbGl6ZWQKICAgICAgICAgICAgICAgICAgICAvLyBsb2NhbHN0b3JhZ2UKICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNhdmUoKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXREcmFnUmVzaXplKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNjcm9sbERvd246IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciAkY29udGVudCA9IHRoaXMuJCgnLmNoYXQtY29udGVudCcpOwogICAgICAgICAgICAgICAgaWYgKCRjb250ZW50LmlzKCc6dmlzaWJsZScpKSB7CiAgICAgICAgICAgICAgICAgICAgJGNvbnRlbnQuc2Nyb2xsVG9wKCRjb250ZW50WzBdLnNjcm9sbEhlaWdodCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB0aGlzLkNvbnRhY3RzUGFuZWwgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7CiAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLAogICAgICAgICAgICBjbGFzc05hbWU6ICdjb250cm9sYm94LXBhbmUnLAogICAgICAgICAgICBpZDogJ3VzZXJzJywKICAgICAgICAgICAgZXZlbnRzOiB7CiAgICAgICAgICAgICAgICAnY2xpY2sgYS50b2dnbGUteG1wcC1jb250YWN0LWZvcm0nOiAndG9nZ2xlQ29udGFjdEZvcm0nLAogICAgICAgICAgICAgICAgJ3N1Ym1pdCBmb3JtLmFkZC14bXBwLWNvbnRhY3QnOiAnYWRkQ29udGFjdEZyb21Gb3JtJywKICAgICAgICAgICAgICAgICdzdWJtaXQgZm9ybS5zZWFyY2gteG1wcC1jb250YWN0JzogJ3NlYXJjaENvbnRhY3RzJywKICAgICAgICAgICAgICAgICdjbGljayBhLnN1YnNjcmliZS10by11c2VyJzogJ2FkZENvbnRhY3RGcm9tTGlzdCcKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChjZmcpIHsKICAgICAgICAgICAgICAgIGNmZy4kcGFyZW50LmFwcGVuZCh0aGlzLiRlbCk7CiAgICAgICAgICAgICAgICB0aGlzLiR0YWJzID0gY2ZnLiRwYXJlbnQucGFyZW50KCkuZmluZCgnI2NvbnRyb2xib3gtdGFicycpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgbWFya3VwOwogICAgICAgICAgICAgICAgdmFyIHdpZGdldHMgPSBjb252ZXJzZS50ZW1wbGF0ZXMuY29udGFjdHNfcGFuZWwoewogICAgICAgICAgICAgICAgICAgIGxhYmVsX29ubGluZTogX18oJ09ubGluZScpLAogICAgICAgICAgICAgICAgICAgIGxhYmVsX2J1c3k6IF9fKCdCdXN5JyksCiAgICAgICAgICAgICAgICAgICAgbGFiZWxfYXdheTogX18oJ0F3YXknKSwKICAgICAgICAgICAgICAgICAgICBsYWJlbF9vZmZsaW5lOiBfXygnT2ZmbGluZScpLAogICAgICAgICAgICAgICAgICAgIGxhYmVsX2xvZ291dDogX18oJ0xvZyBvdXQnKSwKICAgICAgICAgICAgICAgICAgICBhbGxvd19sb2dvdXQ6IGNvbnZlcnNlLmFsbG93X2xvZ291dAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aGlzLiR0YWJzLmFwcGVuZChjb252ZXJzZS50ZW1wbGF0ZXMuY29udGFjdHNfdGFiKHtsYWJlbF9jb250YWN0czogTEFCRUxfQ09OVEFDVFN9KSk7CiAgICAgICAgICAgICAgICBpZiAoY29udmVyc2UueGhyX3VzZXJfc2VhcmNoKSB7CiAgICAgICAgICAgICAgICAgICAgbWFya3VwID0gY29udmVyc2UudGVtcGxhdGVzLnNlYXJjaF9jb250YWN0KHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxfY29udGFjdF9uYW1lOiBfXygnQ29udGFjdCBuYW1lJyksCiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsX3NlYXJjaDogX18oJ1NlYXJjaCcpCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG1hcmt1cCA9IGNvbnZlcnNlLnRlbXBsYXRlcy5hZGRfY29udGFjdF9mb3JtKHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxfY29udGFjdF91c2VybmFtZTogX18oJ0NvbnRhY3QgdXNlcm5hbWUnKSwKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxfYWRkOiBfXygnQWRkJykKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChjb252ZXJzZS5hbGxvd19jb250YWN0X3JlcXVlc3RzKSB7CiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0cyArPSBjb252ZXJzZS50ZW1wbGF0ZXMuYWRkX2NvbnRhY3RfZHJvcGRvd24oewogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbF9jbGlja190b19jaGF0OiBfXygnQ2xpY2sgdG8gYWRkIG5ldyBjaGF0IGNvbnRhY3RzJyksCiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsX2FkZF9jb250YWN0OiBfXygnQWRkIGEgY29udGFjdCcpCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5odG1sKHdpZGdldHMpOwogICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgnLnNlYXJjaC14bXBwIHVsJykuYXBwZW5kKG1hcmt1cCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHRvZ2dsZUNvbnRhY3RGb3JtOiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCcuc2VhcmNoLXhtcHAnKS50b2dnbGUoJ2Zhc3QnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaXMoJzp2aXNpYmxlJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdpbnB1dC51c2VybmFtZScpLmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzZWFyY2hDb250YWN0czogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgJC5nZXRKU09OKGNvbnZlcnNlLnhocl91c2VyX3NlYXJjaF91cmwrICI/cT0iICsgJChldi50YXJnZXQpLmZpbmQoJ2lucHV0LnVzZXJuYW1lJykudmFsKCksIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICR1bD0gJCgnLnNlYXJjaC14bXBwIHVsJyk7CiAgICAgICAgICAgICAgICAgICAgJHVsLmZpbmQoJ2xpLmZvdW5kLXVzZXInKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAkdWwuZmluZCgnbGkuY2hhdC1pbmZvJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAkdWwuYXBwZW5kKCc8bGkgY2xhc3M9ImNoYXQtaW5mbyI+JytfXygnTm8gdXNlcnMgZm91bmQnKSsnPC9saT4nKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJChkYXRhKS5lYWNoKGZ1bmN0aW9uIChpZHgsIG9iaikgewogICAgICAgICAgICAgICAgICAgICAgICAkdWwuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnPGxpIGNsYXNzPSJmb3VuZC11c2VyIj48L2xpPicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJzxhIGNsYXNzPSJzdWJzY3JpYmUtdG8tdXNlciIgaHJlZj0iIyIgdGl0bGU9IicrX18oJ0NsaWNrIHRvIGFkZCBhcyBhIGNoYXQgY29udGFjdCcpKyciPjwvYT4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXJlY2lwaWVudCcsIFN0cm9waGUuZXNjYXBlTm9kZShvYmouaWQpKydAJytjb252ZXJzZS5kb21haW4pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQob2JqLmZ1bGxuYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhZGRDb250YWN0RnJvbUZvcm06IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKGV2LnRhcmdldCkuZmluZCgnaW5wdXQnKTsKICAgICAgICAgICAgICAgIHZhciBqaWQgPSAkaW5wdXQudmFsKCk7CiAgICAgICAgICAgICAgICBpZiAoISBqaWQpIHsKICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCBhIHZhbGlkIEpJRAogICAgICAgICAgICAgICAgICAgICRpbnB1dC5hZGRDbGFzcygnZXJyb3InKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLmFkZENvbnRhY3QoamlkKTsKICAgICAgICAgICAgICAgICQoJy5zZWFyY2gteG1wcCcpLmhpZGUoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGFkZENvbnRhY3RGcm9tTGlzdDogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgdmFyICR0YXJnZXQgPSAkKGV2LnRhcmdldCksCiAgICAgICAgICAgICAgICAgICAgamlkID0gJHRhcmdldC5hdHRyKCdkYXRhLXJlY2lwaWVudCcpLAogICAgICAgICAgICAgICAgICAgIG5hbWUgPSAkdGFyZ2V0LnRleHQoKTsKICAgICAgICAgICAgICAgIHRoaXMuYWRkQ29udGFjdChqaWQsIG5hbWUpOwogICAgICAgICAgICAgICAgJHRhcmdldC5wYXJlbnQoKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICQoJy5zZWFyY2gteG1wcCcpLmhpZGUoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGFkZENvbnRhY3Q6IGZ1bmN0aW9uIChqaWQsIG5hbWUpIHsKICAgICAgICAgICAgICAgIG5hbWUgPSBfLmlzRW1wdHkobmFtZSk/IGppZDogbmFtZTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ucm9zdGVyLmFkZChqaWQsIG5hbWUsIFtdLCBmdW5jdGlvbiAoaXEpIHsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLnJvc3Rlci5zdWJzY3JpYmUoamlkLCBudWxsLCBjb252ZXJzZS54bXBwc3RhdHVzLmdldCgnZnVsbG5hbWUnKSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB0aGlzLlJvb21zUGFuZWwgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7CiAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLAogICAgICAgICAgICBpZDogJ2NoYXRyb29tcycsCiAgICAgICAgICAgIGV2ZW50czogewogICAgICAgICAgICAgICAgJ3N1Ym1pdCBmb3JtLmFkZC1jaGF0cm9vbSc6ICdjcmVhdGVDaGF0Um9vbScsCiAgICAgICAgICAgICAgICAnY2xpY2sgaW5wdXQjc2hvdy1yb29tcyc6ICdzaG93Um9vbXMnLAogICAgICAgICAgICAgICAgJ2NsaWNrIGEub3Blbi1yb29tJzogJ2NyZWF0ZUNoYXRSb29tJywKICAgICAgICAgICAgICAgICdjbGljayBhLnJvb20taW5mbyc6ICdzaG93Um9vbUluZm8nCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoY2ZnKSB7CiAgICAgICAgICAgICAgICBjZmcuJHBhcmVudC5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuaHRtbCgKICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2UudGVtcGxhdGVzLnJvb21fcGFuZWwoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlcnZlcl9pbnB1dF90eXBlJzogY29udmVyc2UuaGlkZV9tdWNfc2VydmVyICYmICdoaWRkZW4nIHx8ICd0ZXh0JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbF9yb29tX25hbWUnOiBfXygnUm9vbSBuYW1lJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWxfbmlja25hbWUnOiBfXygnTmlja25hbWUnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbF9zZXJ2ZXInOiBfXygnU2VydmVyJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWxfam9pbic6IF9fKCdKb2luJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWxfc2hvd19yb29tcyc6IF9fKCdTaG93IHJvb21zJykKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICApLmhpZGUoKSk7CiAgICAgICAgICAgICAgICB0aGlzLiR0YWJzID0gY2ZnLiRwYXJlbnQucGFyZW50KCkuZmluZCgnI2NvbnRyb2xib3gtdGFicycpOwoKICAgICAgICAgICAgICAgIHRoaXMub24oJ3VwZGF0ZS1yb29tcy1saXN0JywgZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVSb29tc0xpc3QoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29udmVyc2UueG1wcHN0YXR1cy5vbigiY2hhbmdlIiwgJC5wcm94eShmdW5jdGlvbiAobW9kZWwpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIShfLmhhcyhtb2RlbC5jaGFuZ2VkLCAnZnVsbG5hbWUnKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgJG5pY2sgPSB0aGlzLiRlbC5maW5kKCdpbnB1dC5uZXctY2hhdHJvb20tbmljaycpOwogICAgICAgICAgICAgICAgICAgIGlmICghICRuaWNrLmlzKCc6Zm9jdXMnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkbmljay52YWwobW9kZWwuZ2V0KCdmdWxsbmFtZScpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMuJHRhYnMuYXBwZW5kKGNvbnZlcnNlLnRlbXBsYXRlcy5jaGF0cm9vbXNfdGFiKHtsYWJlbF9yb29tczogX18oJ1Jvb21zJyl9KSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluZm9ybU5vUm9vbXNGb3VuZDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyICRhdmFpbGFibGVfY2hhdHJvb21zID0gdGhpcy4kZWwuZmluZCgnI2F2YWlsYWJsZS1jaGF0cm9vbXMnKTsKICAgICAgICAgICAgICAgIC8vICMgRm9yIHRyYW5zbGF0b3JzOiAlMSRzIGlzIGEgdmFyaWFibGUgYW5kIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgWE1QUCBzZXJ2ZXIgbmFtZQogICAgICAgICAgICAgICAgJGF2YWlsYWJsZV9jaGF0cm9vbXMuaHRtbCgnPGR0PicrX18oJ05vIHJvb21zIG9uICUxJHMnLHRoaXMubXVjX2RvbWFpbikrJzwvZHQ+Jyk7CiAgICAgICAgICAgICAgICAkKCdpbnB1dCNzaG93LXJvb21zJykuc2hvdygpLnNpYmxpbmdzKCdzcGFuLnNwaW5uZXInKS5yZW1vdmUoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHVwZGF0ZVJvb21zTGlzdDogZnVuY3Rpb24gKGRvbWFpbikgewogICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5tdWMubGlzdFJvb21zKAogICAgICAgICAgICAgICAgICAgIHRoaXMubXVjX2RvbWFpbiwKICAgICAgICAgICAgICAgICAgICAkLnByb3h5KGZ1bmN0aW9uIChpcSkgeyAvLyBTdWNjZXNzCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYW1lLCBqaWQsIGksIGZyYWdtZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXZhaWxhYmxlX2NoYXRyb29tcyA9IHRoaXMuJGVsLmZpbmQoJyNhdmFpbGFibGUtY2hhdHJvb21zJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vbXMgPSAkKGlxKS5maW5kKCdxdWVyeScpLmZpbmQoJ2l0ZW0nKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucm9vbXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAjIEZvciB0cmFuc2xhdG9yczogJTEkcyBpcyBhIHZhcmlhYmxlIGFuZCB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAjIHJlcGxhY2VkIHdpdGggdGhlIFhNUFAgc2VydmVyIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdmFpbGFibGVfY2hhdHJvb21zLmh0bWwoJzxkdD4nK19fKCdSb29tcyBvbiAlMSRzJyx0aGlzLm11Y19kb21haW4pKyc8L2R0PicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGk9MDsgaTx0aGlzLnJvb21zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IFN0cm9waGUudW5lc2NhcGVOb2RlKCQodGhpcy5yb29tc1tpXSkuYXR0cignbmFtZScpfHwkKHRoaXMucm9vbXNbaV0pLmF0dHIoJ2ppZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqaWQgPSAkKHRoaXMucm9vbXNbaV0pLmF0dHIoJ2ppZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKCQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLnRlbXBsYXRlcy5yb29tX2l0ZW0oewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25hbWUnOm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnamlkJzpqaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3Blbl90aXRsZSc6IF9fKCdDbGljayB0byBvcGVuIHRoaXMgcm9vbScpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luZm9fdGl0bGUnOiBfXygnU2hvdyBtb3JlIGluZm9ybWF0aW9uIG9uIHRoaXMgcm9vbScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApWzBdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdmFpbGFibGVfY2hhdHJvb21zLmFwcGVuZChmcmFnbWVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dCNzaG93LXJvb21zJykuc2hvdygpLnNpYmxpbmdzKCdzcGFuLnNwaW5uZXInKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5mb3JtTm9Sb29tc0ZvdW5kKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyksCiAgICAgICAgICAgICAgICAgICAgJC5wcm94eShmdW5jdGlvbiAoaXEpIHsgLy8gRmFpbHVyZQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZm9ybU5vUm9vbXNGb3VuZCgpOwogICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNob3dSb29tczogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICB2YXIgJGF2YWlsYWJsZV9jaGF0cm9vbXMgPSB0aGlzLiRlbC5maW5kKCcjYXZhaWxhYmxlLWNoYXRyb29tcycpOwogICAgICAgICAgICAgICAgdmFyICRzZXJ2ZXIgPSB0aGlzLiRlbC5maW5kKCdpbnB1dC5uZXctY2hhdHJvb20tc2VydmVyJyk7CiAgICAgICAgICAgICAgICB2YXIgc2VydmVyID0gJHNlcnZlci52YWwoKTsKICAgICAgICAgICAgICAgIGlmICghc2VydmVyKSB7CiAgICAgICAgICAgICAgICAgICAgJHNlcnZlci5hZGRDbGFzcygnZXJyb3InKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCdpbnB1dC5uZXctY2hhdHJvb20tbmFtZScpLnJlbW92ZUNsYXNzKCdlcnJvcicpOwogICAgICAgICAgICAgICAgJHNlcnZlci5yZW1vdmVDbGFzcygnZXJyb3InKTsKICAgICAgICAgICAgICAgICRhdmFpbGFibGVfY2hhdHJvb21zLmVtcHR5KCk7CiAgICAgICAgICAgICAgICAkKCdpbnB1dCNzaG93LXJvb21zJykuaGlkZSgpLmFmdGVyKCc8c3BhbiBjbGFzcz0ic3Bpbm5lciIvPicpOwogICAgICAgICAgICAgICAgdGhpcy5tdWNfZG9tYWluID0gc2VydmVyOwogICAgICAgICAgICAgICAgdGhpcy51cGRhdGVSb29tc0xpc3QoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNob3dSb29tSW5mbzogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0LAogICAgICAgICAgICAgICAgICAgICRkZCA9ICQodGFyZ2V0KS5wYXJlbnQoJ2RkJyksCiAgICAgICAgICAgICAgICAgICAgJGRpdiA9ICRkZC5maW5kKCdkaXYucm9vbS1pbmZvJyk7CiAgICAgICAgICAgICAgICBpZiAoJGRpdi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAkZGl2LnJlbW92ZSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkZGQuZmluZCgnc3Bhbi5zcGlubmVyJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgJGRkLmFwcGVuZCgnPHNwYW4gY2xhc3M9InNwaW5uZXIgaG9yX2NlbnRlcmVkIi8+Jyk7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5kaXNjby5pbmZvKAogICAgICAgICAgICAgICAgICAgICAgICAkKHRhcmdldCkuYXR0cignZGF0YS1yb29tLWppZCcpLAogICAgICAgICAgICAgICAgICAgICAgICBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAkLnByb3h5KGZ1bmN0aW9uIChzdGFuemEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkc3RhbnphID0gJChzdGFuemEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsIE1VQyBmZWF0dXJlcyBmb3VuZCBoZXJlOiBodHRwOi8veG1wcC5vcmcvcmVnaXN0cmFyL2Rpc2NvLWZlYXR1cmVzLmh0bWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkZC5maW5kKCdzcGFuLnNwaW5uZXInKS5yZXBsYWNlV2l0aCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS50ZW1wbGF0ZXMucm9vbV9kZXNjcmlwdGlvbih7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjJzogJHN0YW56YS5maW5kKCdmaWVsZFt2YXI9Im11YyNyb29taW5mb19kZXNjcmlwdGlvbiJdIHZhbHVlJykudGV4dCgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb2NjJzogJHN0YW56YS5maW5kKCdmaWVsZFt2YXI9Im11YyNyb29taW5mb19vY2N1cGFudHMiXSB2YWx1ZScpLnRleHQoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hpZGRlbic6ICRzdGFuemEuZmluZCgnZmVhdHVyZVt2YXI9Im11Y19oaWRkZW4iXScpLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21lbWJlcnNvbmx5JzogJHN0YW56YS5maW5kKCdmZWF0dXJlW3Zhcj0ibXVjX21lbWJlcnNvbmx5Il0nKS5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtb2RlcmF0ZWQnOiAkc3RhbnphLmZpbmQoJ2ZlYXR1cmVbdmFyPSJtdWNfbW9kZXJhdGVkIl0nKS5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdub25hbm9ueW1vdXMnOiAkc3RhbnphLmZpbmQoJ2ZlYXR1cmVbdmFyPSJtdWNfbm9uYW5vbnltb3VzIl0nKS5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcGVuJzogJHN0YW56YS5maW5kKCdmZWF0dXJlW3Zhcj0ibXVjX29wZW4iXScpLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bhc3N3b3JkcHJvdGVjdGVkJzogJHN0YW56YS5maW5kKCdmZWF0dXJlW3Zhcj0ibXVjX3Bhc3N3b3JkcHJvdGVjdGVkIl0nKS5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwZXJzaXN0ZW50JzogJHN0YW56YS5maW5kKCdmZWF0dXJlW3Zhcj0ibXVjX3BlcnNpc3RlbnQiXScpLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3B1YmxpY3Jvb20nOiAkc3RhbnphLmZpbmQoJ2ZlYXR1cmVbdmFyPSJtdWNfcHVibGljIl0nKS5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzZW1pYW5vbnltb3VzJzogJHN0YW56YS5maW5kKCdmZWF0dXJlW3Zhcj0ibXVjX3NlbWlhbm9ueW1vdXMiXScpLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RlbXBvcmFyeSc6ICRzdGFuemEuZmluZCgnZmVhdHVyZVt2YXI9Im11Y190ZW1wb3JhcnkiXScpLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VubW9kZXJhdGVkJzogJHN0YW56YS5maW5kKCdmZWF0dXJlW3Zhcj0ibXVjX3VubW9kZXJhdGVkIl0nKS5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbF9kZXNjJzogX18oJ0Rlc2NyaXB0aW9uOicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWxfb2NjJzogX18oJ09jY3VwYW50czonKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsX2ZlYXR1cmVzJzogX18oJ0ZlYXR1cmVzOicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWxfcmVxdWlyZXNfYXV0aCc6IF9fKCdSZXF1aXJlcyBhdXRoZW50aWNhdGlvbicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWxfaGlkZGVuJzogX18oJ0hpZGRlbicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWxfcmVxdWlyZXNfaW52aXRlJzogX18oJ1JlcXVpcmVzIGFuIGludml0YXRpb24nKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsX21vZGVyYXRlZCc6IF9fKCdNb2RlcmF0ZWQnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsX25vbl9hbm9uJzogX18oJ05vbi1hbm9ueW1vdXMnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsX29wZW5fcm9vbSc6IF9fKCdPcGVuIHJvb20nKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsX3Blcm1hbmVudF9yb29tJzogX18oJ1Blcm1hbmVudCByb29tJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbF9wdWJsaWMnOiBfXygnUHVibGljJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbF9zZW1pX2Fub24nOiAgXygnU2VtaS1hbm9ueW1vdXMnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsX3RlbXBfcm9vbSc6ICBfKCdUZW1wb3Jhcnkgcm9vbScpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWxfdW5tb2RlcmF0ZWQnOiBfXygnVW5tb2RlcmF0ZWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY3JlYXRlQ2hhdFJvb206IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIHZhciBuYW1lLCAkbmFtZSwKICAgICAgICAgICAgICAgICAgICBzZXJ2ZXIsICRzZXJ2ZXIsCiAgICAgICAgICAgICAgICAgICAgamlkLAogICAgICAgICAgICAgICAgICAgICRuaWNrID0gdGhpcy4kZWwuZmluZCgnaW5wdXQubmV3LWNoYXRyb29tLW5pY2snKSwKICAgICAgICAgICAgICAgICAgICBuaWNrID0gJG5pY2sudmFsKCksCiAgICAgICAgICAgICAgICAgICAgY2hhdHJvb207CgogICAgICAgICAgICAgICAgaWYgKCFuaWNrKSB7ICRuaWNrLmFkZENsYXNzKCdlcnJvcicpOyB9CiAgICAgICAgICAgICAgICBlbHNlIHsgJG5pY2sucmVtb3ZlQ2xhc3MoJ2Vycm9yJyk7IH0KCiAgICAgICAgICAgICAgICBpZiAoZXYudHlwZSA9PT0gJ2NsaWNrJykgewogICAgICAgICAgICAgICAgICAgIGppZCA9ICQoZXYudGFyZ2V0KS5hdHRyKCdkYXRhLXJvb20tamlkJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRuYW1lID0gdGhpcy4kZWwuZmluZCgnaW5wdXQubmV3LWNoYXRyb29tLW5hbWUnKTsKICAgICAgICAgICAgICAgICAgICAkc2VydmVyPSB0aGlzLiRlbC5maW5kKCdpbnB1dC5uZXctY2hhdHJvb20tc2VydmVyJyk7CiAgICAgICAgICAgICAgICAgICAgc2VydmVyID0gJHNlcnZlci52YWwoKTsKICAgICAgICAgICAgICAgICAgICBuYW1lID0gJG5hbWUudmFsKCkudHJpbSgpLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgJG5hbWUudmFsKCcnKTsgLy8gQ2xlYXIgdGhlIGlucHV0CiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgJiYgc2VydmVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGppZCA9IFN0cm9waGUuZXNjYXBlTm9kZShuYW1lKSArICdAJyArIHNlcnZlcjsKICAgICAgICAgICAgICAgICAgICAgICAgJG5hbWUucmVtb3ZlQ2xhc3MoJ2Vycm9yJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICRzZXJ2ZXIucmVtb3ZlQ2xhc3MoJ2Vycm9yJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXVjX2RvbWFpbiA9IHNlcnZlcjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5hbWUpIHsgJG5hbWUuYWRkQ2xhc3MoJ2Vycm9yJyk7IH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXJ2ZXIpIHsgJHNlcnZlci5hZGRDbGFzcygnZXJyb3InKTsgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCFuaWNrKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgY2hhdHJvb20gPSBjb252ZXJzZS5jaGF0Ym94dmlld3Muc2hvd0NoYXQoewogICAgICAgICAgICAgICAgICAgICdpZCc6IGppZCwKICAgICAgICAgICAgICAgICAgICAnamlkJzogamlkLAogICAgICAgICAgICAgICAgICAgICduYW1lJzogU3Ryb3BoZS51bmVzY2FwZU5vZGUoU3Ryb3BoZS5nZXROb2RlRnJvbUppZChqaWQpKSwKICAgICAgICAgICAgICAgICAgICAnbmljayc6IG5pY2ssCiAgICAgICAgICAgICAgICAgICAgJ2NoYXRyb29tJzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAnYm94X2lkJyA6IGI2NF9zaGExKGppZCkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuQ29udHJvbEJveFZpZXcgPSBjb252ZXJzZS5DaGF0Qm94Vmlldy5leHRlbmQoewogICAgICAgICAgICB0YWdOYW1lOiAnZGl2JywKICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2hhdGJveCcsCiAgICAgICAgICAgIGlkOiAnY29udHJvbGJveCcsCiAgICAgICAgICAgIGV2ZW50czogewogICAgICAgICAgICAgICAgJ2NsaWNrIGEuY2xvc2UtY2hhdGJveC1idXR0b24nOiAnY2xvc2UnLAogICAgICAgICAgICAgICAgJ2NsaWNrIHVsI2NvbnRyb2xib3gtdGFicyBsaSBhJzogJ3N3aXRjaFRhYicsCiAgICAgICAgICAgICAgICAnbW91c2Vkb3duIC5kcmFncmVzaXplLXRtJzogJ29uRHJhZ1Jlc2l6ZVN0YXJ0JwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGhpcy4kZWwuaW5zZXJ0QWZ0ZXIoY29udmVyc2UuY29udHJvbGJveHRvZ2dsZS4kZWwpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbignY2hhbmdlOmNvbm5lY3RlZCcsIHRoaXMub25Db25uZWN0ZWQsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbignZGVzdHJveScsIHRoaXMuaGlkZSwgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCdoaWRlJywgdGhpcy5oaWRlLCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oJ3Nob3cnLCB0aGlzLnNob3csIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbignY2hhbmdlOmNsb3NlZCcsIHRoaXMuZW5zdXJlQ2xvc2VkU3RhdGUsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLmdldCgnY29ubmVjdGVkJykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRSb3N0ZXIoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICghdGhpcy5tb2RlbC5nZXQoJ2Nsb3NlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25Db25uZWN0ZWQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLmdldCgnY29ubmVjdGVkJykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpLmluaXRSb3N0ZXIoKTsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5mZWF0dXJlcy5vZmYoJ2FkZCcsIHRoaXMuZmVhdHVyZUFkZGVkLCB0aGlzKTsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5mZWF0dXJlcy5vbignYWRkJywgdGhpcy5mZWF0dXJlQWRkZWQsIHRoaXMpOwogICAgICAgICAgICAgICAgICAgIC8vIEZlYXR1cmVzIGNvdWxkIGhhdmUgYmVlbiBhZGRlZCBiZWZvcmUgdGhlIGNvbnRyb2xib3ggd2FzCiAgICAgICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZWQuIEN1cnJlbnRseSB3ZSdyZSBvbmx5IGludGVyZXN0ZWQgaW4gTVVDCiAgICAgICAgICAgICAgICAgICAgdmFyIGZlYXR1cmUgPSBjb252ZXJzZS5mZWF0dXJlcy5maW5kV2hlcmUoeyd2YXInOiAnaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvbXVjJ30pOwogICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmVhdHVyZUFkZGVkKGZlYXR1cmUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluaXRSb3N0ZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIC8qIFdlIGluaXRpYWxpemUgdGhlIHJvc3Rlciwgd2hpY2ggd2lsbCBhcHBlYXIgaW5zaWRlIHRoZQogICAgICAgICAgICAgICAgICogQ29udGFjdHMgUGFuZWwuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIGNvbnZlcnNlLnJvc3RlciA9IG5ldyBjb252ZXJzZS5Sb3N0ZXJDb250YWN0cygpOwogICAgICAgICAgICAgICAgY29udmVyc2Uucm9zdGVyLmJyb3dzZXJTdG9yYWdlID0gbmV3IEJhY2tib25lLkJyb3dzZXJTdG9yYWdlW2NvbnZlcnNlLnN0b3JhZ2VdKAogICAgICAgICAgICAgICAgICAgIGI2NF9zaGExKCdjb252ZXJzZS5jb250YWN0cy0nK2NvbnZlcnNlLmJhcmVfamlkKSk7CiAgICAgICAgICAgICAgICB2YXIgcm9zdGVyZ3JvdXBzID0gbmV3IGNvbnZlcnNlLlJvc3Rlckdyb3VwcygpOwogICAgICAgICAgICAgICAgcm9zdGVyZ3JvdXBzLmJyb3dzZXJTdG9yYWdlID0gbmV3IEJhY2tib25lLkJyb3dzZXJTdG9yYWdlW2NvbnZlcnNlLnN0b3JhZ2VdKAogICAgICAgICAgICAgICAgICAgIGI2NF9zaGExKCdjb252ZXJzZS5yb3N0ZXIuZ3JvdXBzJytjb252ZXJzZS5iYXJlX2ppZCkpOwogICAgICAgICAgICAgICAgY29udmVyc2Uucm9zdGVydmlldyA9IG5ldyBjb252ZXJzZS5Sb3N0ZXJWaWV3KHttb2RlbDogcm9zdGVyZ3JvdXBzfSk7CiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhY3RzcGFuZWwuJGVsLmFwcGVuZChjb252ZXJzZS5yb3N0ZXJ2aWV3LiRlbCk7CiAgICAgICAgICAgICAgICAvLyBUT0RPOgogICAgICAgICAgICAgICAgLy8gU2VlIGlmIHdlIHNob3VsZG4ndCBhbHNvIGZldGNoIHRoZSByb3N0ZXIgaGVyZS4uLiBvdGhlcndpc2UKICAgICAgICAgICAgICAgIC8vIHRoZSByb3N0ZXIgaXMgYWx3YXlzIHBvcHVsYXRlZCBieSB0aGUgcm9zdGVySGFuZGxlciBtZXRob2QsCiAgICAgICAgICAgICAgICAvLyB3aGljaCBhcHBlYXJzIHRvIGJlIGEgbGVzcyBlY29ub21pYyB3YXkuCiAgICAgICAgICAgICAgICAvLyBpLmUuIGZyb20gd2hhdCBpdCBzZWVtcywgb25seSBncm91cHMgYXJlIGZldGNoZWQgZnJvbQogICAgICAgICAgICAgICAgLy8gYnJvd3NlclN0b3JhZ2UsIGFuZCBubyBjb250YWN0cy4KICAgICAgICAgICAgICAgIC8vIFhYWDogTWFrZSBzdXJlIHRoYXQgaWYgZmV0Y2ggaXMgY2FsbGVkLCB3ZSBkb24ndCBzb3J0IG9uCiAgICAgICAgICAgICAgICAvLyBlYWNoIGl0ZW0gYWRkLi4uCiAgICAgICAgICAgICAgICAvLyBjb252ZXJzZS5yb3N0ZXIuZmV0Y2goKQogICAgICAgICAgICAgICAgY29udmVyc2Uucm9zdGVydmlldy5yZW5kZXIoKS5mZXRjaCgpLnVwZGF0ZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmICghY29udmVyc2UuY29ubmVjdGlvbi5jb25uZWN0ZWQgfHwgIWNvbnZlcnNlLmNvbm5lY3Rpb24uYXV0aGVudGljYXRlZCB8fCBjb252ZXJzZS5jb25uZWN0aW9uLmRpc2Nvbm5lY3RpbmcpIHsKICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiB3ZSBtaWdodCBuZWVkIHRvIHRha2UgcHJlYmluZGluZyBpbnRvIGNvbnNpZGVyYXRpb24gaGVyZS4KICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckxvZ2luUGFuZWwoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuY29udGFjdHNwYW5lbCB8fCAhdGhpcy5jb250YWN0c3BhbmVsLiRlbC5pcygnOnZpc2libGUnKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyQ29udGFjdHNQYW5lbCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZW5kZXJMb2dpblBhbmVsOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5odG1sKGNvbnZlcnNlLnRlbXBsYXRlcy5jb250cm9sYm94KHRoaXMubW9kZWwudG9KU09OKCkpKTsKICAgICAgICAgICAgICAgIHZhciBjZmcgPSB7JyRwYXJlbnQnOiB0aGlzLiRlbC5maW5kKCcuY29udHJvbGJveC1wYW5lcycpLCAnbW9kZWwnOiB0aGlzfTsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5sb2dpbnBhbmVsKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dpbnBhbmVsID0gbmV3IGNvbnZlcnNlLkxvZ2luUGFuZWwoY2ZnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dpbnBhbmVsLmRlbGVnYXRlRXZlbnRzKCkuaW5pdGlhbGl6ZShjZmcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5sb2dpbnBhbmVsLnJlbmRlcigpOwogICAgICAgICAgICAgICAgdGhpcy5pbml0RHJhZ1Jlc2l6ZSgpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVuZGVyQ29udGFjdHNQYW5lbDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGhpcy4kZWwuaHRtbChjb252ZXJzZS50ZW1wbGF0ZXMuY29udHJvbGJveCh0aGlzLm1vZGVsLnRvSlNPTigpKSk7CiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhY3RzcGFuZWwgPSBuZXcgY29udmVyc2UuQ29udGFjdHNQYW5lbCh7JyRwYXJlbnQnOiB0aGlzLiRlbC5maW5kKCcuY29udHJvbGJveC1wYW5lcycpfSk7CiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhY3RzcGFuZWwucmVuZGVyKCk7CiAgICAgICAgICAgICAgICBjb252ZXJzZS54bXBwc3RhdHVzdmlldyA9IG5ldyBjb252ZXJzZS5YTVBQU3RhdHVzVmlldyh7J21vZGVsJzogY29udmVyc2UueG1wcHN0YXR1c30pOwogICAgICAgICAgICAgICAgY29udmVyc2UueG1wcHN0YXR1c3ZpZXcucmVuZGVyKCk7CiAgICAgICAgICAgICAgICBpZiAoY29udmVyc2UuYWxsb3dfbXVjKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb29tc3BhbmVsID0gbmV3IGNvbnZlcnNlLlJvb21zUGFuZWwoeyckcGFyZW50JzogdGhpcy4kZWwuZmluZCgnLmNvbnRyb2xib3gtcGFuZXMnKX0pOwogICAgICAgICAgICAgICAgICAgIHRoaXMucm9vbXNwYW5lbC5yZW5kZXIoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuaW5pdERyYWdSZXNpemUoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGlmIChldiAmJiBldi5wcmV2ZW50RGVmYXVsdCkgeyBldi5wcmV2ZW50RGVmYXVsdCgpOyB9CiAgICAgICAgICAgICAgICBpZiAoY29udmVyc2UuY29ubmVjdGlvbi5jb25uZWN0ZWQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNhdmUoeydjbG9zZWQnOiB0cnVlfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwudHJpZ2dlcignaGlkZScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udmVyc2UuZW1pdCgnY29udHJvbEJveENsb3NlZCcsIHRoaXMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBlbnN1cmVDbG9zZWRTdGF0ZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMubW9kZWwuZ2V0KCdjbG9zZWQnKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgICAgICAgICAgICAgdGhpcy4kZWwuaGlkZSgnZmFzdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5yZWZyZXNoV2Via2l0KCk7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuZW1pdCgnY2hhdEJveENsb3NlZCcsIHRoaXMpOwogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbnRyb2xib3h0b2dnbGUuc2hvdyhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzaG93OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBjb252ZXJzZS5jb250cm9sYm94dG9nZ2xlLmhpZGUoJC5wcm94eShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuc2hvdygnZmFzdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnZlcnNlLnJvc3RlcnZpZXcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLnJvc3RlcnZpZXcudXBkYXRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2UucmVmcmVzaFdlYmtpdCgpOwogICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuZW1pdCgnY29udHJvbEJveE9wZW5lZCcsIHRoaXMpOwogICAgICAgICAgICAgICAgfSwgdGhpcykpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBmZWF0dXJlQWRkZWQ6IGZ1bmN0aW9uIChmZWF0dXJlKSB7CiAgICAgICAgICAgICAgICBpZiAoKGZlYXR1cmUuZ2V0KCd2YXInKSA9PSAnaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvbXVjJykgJiYgKGNvbnZlcnNlLmFsbG93X211YykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb21zcGFuZWwubXVjX2RvbWFpbiA9IGZlYXR1cmUuZ2V0KCdmcm9tJyk7CiAgICAgICAgICAgICAgICAgICAgdmFyICRzZXJ2ZXI9IHRoaXMuJGVsLmZpbmQoJ2lucHV0Lm5ldy1jaGF0cm9vbS1zZXJ2ZXInKTsKICAgICAgICAgICAgICAgICAgICBpZiAoISAkc2VydmVyLmlzKCc6Zm9jdXMnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkc2VydmVyLnZhbCh0aGlzLnJvb21zcGFuZWwubXVjX2RvbWFpbik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChjb252ZXJzZS5hdXRvX2xpc3Rfcm9vbXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb29tc3BhbmVsLnRyaWdnZXIoJ3VwZGF0ZS1yb29tcy1saXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc3dpdGNoVGFiOiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICB2YXIgJHRhYiA9ICQoZXYudGFyZ2V0KSwKICAgICAgICAgICAgICAgICAgICAkc2libGluZyA9ICR0YWIucGFyZW50KCkuc2libGluZ3MoJ2xpJykuY2hpbGRyZW4oJ2EnKSwKICAgICAgICAgICAgICAgICAgICAkdGFiX3BhbmVsID0gJCgkdGFiLmF0dHIoJ2hyZWYnKSk7CiAgICAgICAgICAgICAgICAkKCRzaWJsaW5nLmF0dHIoJ2hyZWYnKSkuaGlkZSgpOwogICAgICAgICAgICAgICAgJHNpYmxpbmcucmVtb3ZlQ2xhc3MoJ2N1cnJlbnQnKTsKICAgICAgICAgICAgICAgICR0YWIuYWRkQ2xhc3MoJ2N1cnJlbnQnKTsKICAgICAgICAgICAgICAgICR0YWJfcGFuZWwuc2hvdygpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2hvd0hlbHBNZXNzYWdlczogZnVuY3Rpb24gKG1zZ3MpIHsKICAgICAgICAgICAgICAgIC8vIE92ZXJyaWRlIHNob3dIZWxwTWVzc2FnZXMgaW4gQ2hhdEJveFZpZXcsIGZvciBub3cgZG8gbm90aGluZy4KICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB0aGlzLkNoYXRSb29tT2NjdXBhbnQgPSBCYWNrYm9uZS5Nb2RlbDsKICAgICAgICB0aGlzLkNoYXRSb29tT2NjdXBhbnRWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoewogICAgICAgICAgICB0YWdOYW1lOiAnbGknLAogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCdjaGFuZ2UnLCB0aGlzLnJlbmRlciwgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCdkZXN0cm95JywgdGhpcy5kZXN0cm95LCB0aGlzKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgJG5ldyA9IGNvbnZlcnNlLnRlbXBsYXRlcy5vY2N1cGFudCgKICAgICAgICAgICAgICAgICAgICBfLmV4dGVuZCgKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC50b0pTT04oKSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rlc2NfbW9kZXJhdG9yJzogX18oJ1RoaXMgdXNlciBpcyBhIG1vZGVyYXRvcicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rlc2NfcGFydGljaXBhbnQnOiBfXygnVGhpcyB1c2VyIGNhbiBzZW5kIG1lc3NhZ2VzIGluIHRoaXMgcm9vbScpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rlc2NfdmlzaXRvcic6IF9fKCdUaGlzIHVzZXIgY2FuIE5PVCBzZW5kIG1lc3NhZ2VzIGluIHRoaXMgcm9vbScpCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5yZXBsYWNlV2l0aCgkbmV3KTsKICAgICAgICAgICAgICAgIHRoaXMuc2V0RWxlbWVudCgkbmV3LCB0cnVlKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGhpcy4kZWwucmVtb3ZlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5DaGF0Um9vbU9jY3VwYW50cyA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKHsKICAgICAgICAgICAgbW9kZWw6IGNvbnZlcnNlLkNoYXRSb29tT2NjdXBhbnQsCiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICAgICAgICAgICAgICB0aGlzLmJyb3dzZXJTdG9yYWdlID0gbmV3IEJhY2tib25lLkJyb3dzZXJTdG9yYWdlW2NvbnZlcnNlLnN0b3JhZ2VdKAogICAgICAgICAgICAgICAgICAgIGI2NF9zaGExKCdjb252ZXJzZS5vY2N1cGFudHMnK2NvbnZlcnNlLmJhcmVfamlkK29wdGlvbnMubmljaykpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuQ2hhdFJvb21PY2N1cGFudHNWaWV3ID0gQmFja2JvbmUuT3ZlcnZpZXcuZXh0ZW5kKHsKICAgICAgICAgICAgdGFnTmFtZTogJ2RpdicsCiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3BhcnRpY2lwYW50cycsCgogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCJhZGQiLCB0aGlzLm9uT2NjdXBhbnRBZGRlZCwgdGhpcyk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmh0bWwoCiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UudGVtcGxhdGVzLmNoYXRyb29tX3NpZGViYXIoewogICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWxfaW52aXRhdGlvbic6IF9fKCdJbnZpdGUuLi4nKSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsX29jY3VwYW50cyc6IF9fKCdPY2N1cGFudHMnKQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5pdEludml0ZVdpZGdldCgpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25PY2N1cGFudEFkZGVkOiBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgdmFyIHZpZXcgPSB0aGlzLmdldChpdGVtLmdldCgnaWQnKSk7CiAgICAgICAgICAgICAgICBpZiAoIXZpZXcpIHsKICAgICAgICAgICAgICAgICAgICB2aWV3ID0gdGhpcy5hZGQoaXRlbS5nZXQoJ2lkJyksIG5ldyBjb252ZXJzZS5DaGF0Um9vbU9jY3VwYW50Vmlldyh7bW9kZWw6IGl0ZW19KSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2aWV3Lm1vZGVsOyAvLyBSZW1vdmUgcmVmIHRvIG9sZCBtb2RlbCB0byBoZWxwIGdhcmJhZ2UgY29sbGVjdGlvbgogICAgICAgICAgICAgICAgICAgIHZpZXcubW9kZWwgPSBpdGVtOwogICAgICAgICAgICAgICAgICAgIHZpZXcuaW5pdGlhbGl6ZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy4kKCcucGFydGljaXBhbnQtbGlzdCcpLmFwcGVuZCh2aWV3LnJlbmRlcigpLiRlbCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvbkNoYXRSb29tUm9zdGVyOiBmdW5jdGlvbiAocm9zdGVyLCByb29tKSB7CiAgICAgICAgICAgICAgICB2YXIgcm9zdGVyX3NpemUgPSBfLnNpemUocm9zdGVyKSwKICAgICAgICAgICAgICAgICAgICAkcGFydGljaXBhbnRfbGlzdCA9IHRoaXMuJCgnLnBhcnRpY2lwYW50LWxpc3QnKSwKICAgICAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudHMgPSBbXSwKICAgICAgICAgICAgICAgICAgICBrZXlzID0gXy5rZXlzKHJvc3RlciksCiAgICAgICAgICAgICAgICAgICAgb2NjdXBhbnQsIGF0dHJzLCBpLCBuaWNrOwoKICAgICAgICAgICAgICAgIGZvciAoaT0wOyBpPHJvc3Rlcl9zaXplOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBuaWNrID0gU3Ryb3BoZS51bmVzY2FwZU5vZGUoa2V5c1tpXSk7CiAgICAgICAgICAgICAgICAgICAgYXR0cnMgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICdpZCc6IG5pY2ssCiAgICAgICAgICAgICAgICAgICAgICAgICdyb2xlJzogcm9zdGVyW2tleXNbaV1dLnJvbGUsCiAgICAgICAgICAgICAgICAgICAgICAgICduaWNrJzogbmljawogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgb2NjdXBhbnQgPSB0aGlzLm1vZGVsLmdldChuaWNrKTsKICAgICAgICAgICAgICAgICAgICBpZiAob2NjdXBhbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2NjdXBhbnQuc2F2ZShhdHRycyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5jcmVhdGUoYXR0cnMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF8uZWFjaChfLmRpZmZlcmVuY2UodGhpcy5tb2RlbC5wbHVjaygnaWQnKSwga2V5cyksIGZ1bmN0aW9uIChpZCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuZ2V0KGlkKS5kZXN0cm95KCk7CiAgICAgICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaW5pdEludml0ZVdpZGdldDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyICRlbCA9IHRoaXMuJCgnaW5wdXQuaW52aXRlZC1jb250YWN0Jyk7CiAgICAgICAgICAgICAgICAkZWwudHlwZWFoZWFkKHsKICAgICAgICAgICAgICAgICAgICBtaW5MZW5ndGg6IDEsCiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0OiB0cnVlCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2NvbnRhY3RzLWRhdGFzZXQnLAogICAgICAgICAgICAgICAgICAgIHNvdXJjZTogZnVuY3Rpb24gKHEsIGNiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgIF8uZWFjaChjb252ZXJzZS5yb3N0ZXIuZmlsdGVyKGNvbnRhaW5zKFsnZnVsbG5hbWUnLCAnamlkJ10sIHEpKSwgZnVuY3Rpb24gKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7dmFsdWU6IG4uZ2V0KCdmdWxsbmFtZScpLCBqaWQ6IG4uZ2V0KCdqaWQnKX0pOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgY2IocmVzdWx0cyk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZXM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGlvbjogXy50ZW1wbGF0ZSgnPHAgZGF0YS1qaWQ9Int7amlkfX0iPnt7dmFsdWV9fTwvcD4nKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgJGVsLm9uKCd0eXBlYWhlYWQ6c2VsZWN0ZWQnLCAkLnByb3h5KGZ1bmN0aW9uIChldiwgc3VnZ2VzdGlvbiwgZG5hbWUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcmVhc29uID0gcHJvbXB0KAogICAgICAgICAgICAgICAgICAgICAgICBfXyhfX18oJ1lvdSBhcmUgYWJvdXQgdG8gaW52aXRlICUxJHMgdG8gdGhlIGNoYXQgcm9vbSAiJTIkcyIuICcpLCBzdWdnZXN0aW9uLnZhbHVlLCB0aGlzLm1vZGVsLmdldCgnaWQnKSkgKwogICAgICAgICAgICAgICAgICAgICAgICBfXygiWW91IG1heSBvcHRpb25hbGx5IGluY2x1ZGUgYSBtZXNzYWdlLCBleHBsYWluaW5nIHRoZSByZWFzb24gZm9yIHRoZSBpbnZpdGF0aW9uLiIpCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICBpZiAocmVhc29uICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ubXVjLnJvb21zW3RoaXMuY2hhdHJvb212aWV3Lm1vZGVsLmdldCgnaWQnKV0uZGlyZWN0SW52aXRlKHN1Z2dlc3Rpb24uamlkLCByZWFzb24pOwogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5lbWl0KCdyb29tSW52aXRlU2VudCcsIHRoaXMsIHN1Z2dlc3Rpb24uamlkLCByZWFzb24pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkKGV2LnRhcmdldCkudHlwZWFoZWFkKCd2YWwnLCAnJyk7CiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfQoKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5DaGF0Um9vbVZpZXcgPSBjb252ZXJzZS5DaGF0Qm94Vmlldy5leHRlbmQoewogICAgICAgICAgICBsZW5ndGg6IDMwMCwKICAgICAgICAgICAgdGFnTmFtZTogJ2RpdicsCiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2NoYXRyb29tJywKICAgICAgICAgICAgZXZlbnRzOiB7CiAgICAgICAgICAgICAgICAnY2xpY2sgLmNsb3NlLWNoYXRib3gtYnV0dG9uJzogJ2Nsb3NlJywKICAgICAgICAgICAgICAgICdjbGljayAudG9nZ2xlLWNoYXRib3gtYnV0dG9uJzogJ21pbmltaXplJywKICAgICAgICAgICAgICAgICdjbGljayAuY29uZmlndXJlLWNoYXRyb29tLWJ1dHRvbic6ICdjb25maWd1cmVDaGF0Um9vbScsCiAgICAgICAgICAgICAgICAnY2xpY2sgLnRvZ2dsZS1zbWlsZXknOiAndG9nZ2xlRW1vdGljb25NZW51JywKICAgICAgICAgICAgICAgICdjbGljayAudG9nZ2xlLXNtaWxleSB1bCBsaSc6ICdpbnNlcnRFbW90aWNvbicsCiAgICAgICAgICAgICAgICAnY2xpY2sgLnRvZ2dsZS1jbGVhcic6ICdjbGVhckNoYXRSb29tTWVzc2FnZXMnLAogICAgICAgICAgICAgICAgJ2NsaWNrIC50b2dnbGUtcGFydGljaXBhbnRzIGEnOiAndG9nZ2xlT2NjdXBhbnRzJywKICAgICAgICAgICAgICAgICdrZXlwcmVzcyB0ZXh0YXJlYS5jaGF0LXRleHRhcmVhJzogJ2tleVByZXNzZWQnLAogICAgICAgICAgICAgICAgJ21vdXNlZG93biAuZHJhZ3Jlc2l6ZS10bSc6ICdvbkRyYWdSZXNpemVTdGFydCcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNfY2hhdHJvb206IHRydWUsCgogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm1lc3NhZ2VzLm9uKCdhZGQnLCB0aGlzLm9uTWVzc2FnZUFkZGVkLCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oJ2NoYW5nZTptaW5pbWl6ZWQnLCBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmdldCgnbWluaW1pemVkJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhpbWl6ZSgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbignZGVzdHJveScsIGZ1bmN0aW9uIChtb2RlbCwgcmVzcG9uc2UsIG9wdGlvbnMpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLm11Yy5sZWF2ZSgKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5nZXQoJ2ppZCcpLAogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmdldCgnbmljaycpLAogICAgICAgICAgICAgICAgICAgICAgICAkLnByb3h5KHRoaXMub25MZWF2ZSwgdGhpcyksCiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdGhpcyk7CgogICAgICAgICAgICAgICAgdGhpcy5vY2N1cGFudHN2aWV3ID0gbmV3IGNvbnZlcnNlLkNoYXRSb29tT2NjdXBhbnRzVmlldyh7CiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IG5ldyBjb252ZXJzZS5DaGF0Um9vbU9jY3VwYW50cyh7bmljazogdGhpcy5tb2RlbC5nZXQoJ25pY2snKX0pCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHRoaXMub2NjdXBhbnRzdmlldy5jaGF0cm9vbXZpZXcgPSB0aGlzOwogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTsKICAgICAgICAgICAgICAgIHRoaXMub2NjdXBhbnRzdmlldy5tb2RlbC5mZXRjaCh7YWRkOnRydWV9KTsKICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdChudWxsKTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmVtaXQoJ2NoYXRSb29tT3BlbmVkJywgdGhpcyk7CgogICAgICAgICAgICAgICAgdGhpcy4kZWwuaW5zZXJ0QWZ0ZXIoY29udmVyc2UuY2hhdGJveHZpZXdzLmdldCgiY29udHJvbGJveCIpLiRlbCk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm1lc3NhZ2VzLmZldGNoKHthZGQ6IHRydWV9KTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLmdldCgnbWluaW1pemVkJykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmF0dHIoJ2lkJywgdGhpcy5tb2RlbC5nZXQoJ2JveF9pZCcpKQogICAgICAgICAgICAgICAgICAgICAgICAuaHRtbChjb252ZXJzZS50ZW1wbGF0ZXMuY2hhdHJvb20odGhpcy5tb2RlbC50b0pTT04oKSkpOwogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJDaGF0QXJlYSgpOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UucmVmcmVzaFdlYmtpdCgpOwogICAgICAgICAgICAgICAgfSwgNTApOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZW5kZXJDaGF0QXJlYTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLiQoJy5jaGF0LWFyZWEnKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiQoJy5jaGF0LWJvZHknKS5lbXB0eSgpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS50ZW1wbGF0ZXMuY2hhdGFyZWEoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzaG93X3Rvb2xiYXInOiBjb252ZXJzZS5zaG93X3Rvb2xiYXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsX21lc3NhZ2UnOiBfXygnTWVzc2FnZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCh0aGlzLm9jY3VwYW50c3ZpZXcucmVuZGVyKCkuJGVsKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclRvb2xiYXIoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIFhYWDogVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2ssIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZQogICAgICAgICAgICAgICAgLy8gc2lkZWJhcidzIHN0YXRlIGlzIHJlbWVtYmVyZWQuCiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldCh7aGlkZGVuX29jY3VwYW50czogIXRoaXMubW9kZWwuZ2V0KCdoaWRkZW5fb2NjdXBhbnRzJyl9KTsKICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlT2NjdXBhbnRzKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHRvZ2dsZU9jY3VwYW50czogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBpZiAoZXYpIHsKICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyICRlbCA9IHRoaXMuJCgnLmljb24taGlkZS11c2VycycpOwogICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVsLmdldCgnaGlkZGVuX29jY3VwYW50cycpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5zYXZlKHtoaWRkZW5fb2NjdXBhbnRzOiB0cnVlfSk7CiAgICAgICAgICAgICAgICAgICAgJGVsLnJlbW92ZUNsYXNzKCdpY29uLWhpZGUtdXNlcnMnKS5hZGRDbGFzcygnaWNvbi1zaG93LXVzZXJzJyk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kKCdmb3JtLnNlbmRYTVBQTWVzc2FnZSwgLmNoYXQtYXJlYScpLmFuaW1hdGUoe3dpZHRoOiAnMTAwJSd9KTsKICAgICAgICAgICAgICAgICAgICB0aGlzLiQoJ2Rpdi5wYXJ0aWNpcGFudHMnKS5hbmltYXRlKHt3aWR0aDogMH0sICQucHJveHkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbERvd24oKTsKICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2F2ZSh7aGlkZGVuX29jY3VwYW50czogZmFsc2V9KTsKICAgICAgICAgICAgICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoJ2ljb24tc2hvdy11c2VycycpLmFkZENsYXNzKCdpY29uLWhpZGUtdXNlcnMnKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLiQoJy5jaGF0LWFyZWEsIGZvcm0uc2VuZFhNUFBNZXNzYWdlJykuY3NzKHt3aWR0aDogJyd9KTsKICAgICAgICAgICAgICAgICAgICB0aGlzLiQoJ2Rpdi5wYXJ0aWNpcGFudHMnKS5zaG93KCkuYW5pbWF0ZSh7d2lkdGg6ICdhdXRvJ30sICQucHJveHkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbERvd24oKTsKICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvbkNvbW1hbmRFcnJvcjogZnVuY3Rpb24gKHN0YW56YSkgewogICAgICAgICAgICAgICAgdGhpcy5zaG93U3RhdHVzTm90aWZpY2F0aW9uKF9fKCJFcnJvcjogY291bGQgbm90IGV4ZWN1dGUgdGhlIGNvbW1hbmQiKSwgdHJ1ZSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBjcmVhdGVDaGF0Um9vbU1lc3NhZ2U6IGZ1bmN0aW9uICh0ZXh0KSB7CiAgICAgICAgICAgICAgICB2YXIgZnVsbG5hbWUgPSBjb252ZXJzZS54bXBwc3RhdHVzLmdldCgnZnVsbG5hbWUnKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwubWVzc2FnZXMuY3JlYXRlKHsKICAgICAgICAgICAgICAgICAgICBmdWxsbmFtZTogXy5pc0VtcHR5KGZ1bGxuYW1lKT8gY29udmVyc2UuYmFyZV9qaWQ6IGZ1bGxuYW1lLAogICAgICAgICAgICAgICAgICAgIHNlbmRlcjogJ21lJywKICAgICAgICAgICAgICAgICAgICB0aW1lOiBtb21lbnQoKS5mb3JtYXQoKSwKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB0ZXh0LAogICAgICAgICAgICAgICAgICAgIG1zZ2lkOiBjb252ZXJzZS5jb25uZWN0aW9uLm11Yy5ncm91cGNoYXQodGhpcy5tb2RlbC5nZXQoJ2ppZCcpLCB0ZXh0LCB1bmRlZmluZWQsIFN0cmluZygobmV3IERhdGUoKSkuZ2V0VGltZSgpKSkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2VuZENoYXRSb29tTWVzc2FnZTogZnVuY3Rpb24gKHRleHQpIHsKICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IHRleHQucmVwbGFjZSgvXlxzKi8sICIiKS5tYXRjaCgvXlwvKC4qPykoPzogKC4qKSk/JC8pIHx8IFtmYWxzZV0sIGFyZ3M7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1hdGNoWzFdKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFuJzoKICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IG1hdGNoWzJdLnNwbGl0T25jZSgnICcpOwogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLm11Yy5iYW4odGhpcy5tb2RlbC5nZXQoJ2ppZCcpLCBhcmdzWzBdLCBhcmdzWzFdLCB1bmRlZmluZWQsICQucHJveHkodGhpcy5vbkNvbW1hbmRFcnJvciwgdGhpcykpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdjbGVhcic6CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDaGF0Um9vbU1lc3NhZ2VzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Rlb3AnOgogICAgICAgICAgICAgICAgICAgICAgICBhcmdzID0gbWF0Y2hbMl0uc3BsaXRPbmNlKCcgJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ubXVjLmRlb3AodGhpcy5tb2RlbC5nZXQoJ2ppZCcpLCBhcmdzWzBdLCBhcmdzWzFdLCB1bmRlZmluZWQsICQucHJveHkodGhpcy5vbkNvbW1hbmRFcnJvciwgdGhpcykpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdoZWxwJzoKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93SGVscE1lc3NhZ2VzKFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3Ryb25nPi9iYW48L3N0cm9uZz46ICcgICArX18oJ0JhbiB1c2VyIGZyb20gcm9vbScpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzdHJvbmc+L2NsZWFyPC9zdHJvbmc+OiAnICtfXygnUmVtb3ZlIG1lc3NhZ2VzJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHN0cm9uZz4vaGVscDwvc3Ryb25nPjogJyAgK19fKCdTaG93IHRoaXMgbWVudScpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzdHJvbmc+L2tpY2s8L3N0cm9uZz46ICcgICtfXygnS2ljayB1c2VyIGZyb20gcm9vbScpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzdHJvbmc+L21lPC9zdHJvbmc+OiAnICAgICtfXygnV3JpdGUgaW4gM3JkIHBlcnNvbicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzdHJvbmc+L211dGU8L3N0cm9uZz46ICcgICtfXygiUmVtb3ZlIHVzZXIncyBhYmlsaXR5IHRvIHBvc3QgbWVzc2FnZXMiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3Ryb25nPi9uaWNrPC9zdHJvbmc+OiAnICArX18oJ0NoYW5nZSB5b3VyIG5pY2tuYW1lJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHN0cm9uZz4vdG9waWM8L3N0cm9uZz46ICcgK19fKCdTZXQgcm9vbSB0b3BpYycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzdHJvbmc+L3ZvaWNlPC9zdHJvbmc+OiAnICtfXygnQWxsb3cgbXV0ZWQgdXNlciB0byBwb3N0IG1lc3NhZ2VzJykKICAgICAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgJ2tpY2snOgogICAgICAgICAgICAgICAgICAgICAgICBhcmdzID0gbWF0Y2hbMl0uc3BsaXRPbmNlKCcgJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ubXVjLmtpY2sodGhpcy5tb2RlbC5nZXQoJ2ppZCcpLCBhcmdzWzBdLCBhcmdzWzFdLCB1bmRlZmluZWQsICQucHJveHkodGhpcy5vbkNvbW1hbmRFcnJvciwgdGhpcykpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdtdXRlJzoKICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IG1hdGNoWzJdLnNwbGl0T25jZSgnICcpOwogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLm11Yy5tdXRlKHRoaXMubW9kZWwuZ2V0KCdqaWQnKSwgYXJnc1swXSwgYXJnc1sxXSwgdW5kZWZpbmVkLCAkLnByb3h5KHRoaXMub25Db21tYW5kRXJyb3IsIHRoaXMpKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbmljayc6CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ubXVjLmNoYW5nZU5pY2sodGhpcy5tb2RlbC5nZXQoJ2ppZCcpLCBtYXRjaFsyXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgJ29wJzoKICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IG1hdGNoWzJdLnNwbGl0T25jZSgnICcpOwogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLm11Yy5vcCh0aGlzLm1vZGVsLmdldCgnamlkJyksIGFyZ3NbMF0sIGFyZ3NbMV0sIHVuZGVmaW5lZCwgJC5wcm94eSh0aGlzLm9uQ29tbWFuZEVycm9yLCB0aGlzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RvcGljJzoKICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5tdWMuc2V0VG9waWModGhpcy5tb2RlbC5nZXQoJ2ppZCcpLCBtYXRjaFsyXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZvaWNlJzoKICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IG1hdGNoWzJdLnNwbGl0T25jZSgnICcpOwogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLm11Yy52b2ljZSh0aGlzLm1vZGVsLmdldCgnamlkJyksIGFyZ3NbMF0sIGFyZ3NbMV0sIHVuZGVmaW5lZCwgJC5wcm94eSh0aGlzLm9uQ29tbWFuZEVycm9yLCB0aGlzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQ2hhdFJvb21NZXNzYWdlKHRleHQpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY29ubmVjdDogZnVuY3Rpb24gKHBhc3N3b3JkKSB7CiAgICAgICAgICAgICAgICBpZiAoXy5oYXMoY29udmVyc2UuY29ubmVjdGlvbi5tdWMucm9vbXMsIHRoaXMubW9kZWwuZ2V0KCdqaWQnKSkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcm9vbSBleGlzdHMsIGl0IGFscmVhZHkgaGFzIGV2ZW50IGxpc3RlbmVycywgc28gd2UKICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBhZGQgdGhlbSBhZ2Fpbi4KICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLm11Yy5qb2luKAogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmdldCgnamlkJyksIHRoaXMubW9kZWwuZ2V0KCduaWNrJyksIG51bGwsIG51bGwsIG51bGwsIHBhc3N3b3JkKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5tdWMuam9pbigKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5nZXQoJ2ppZCcpLAogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmdldCgnbmljaycpLAogICAgICAgICAgICAgICAgICAgICAgICAkLnByb3h5KHRoaXMub25DaGF0Um9vbU1lc3NhZ2UsIHRoaXMpLAogICAgICAgICAgICAgICAgICAgICAgICAkLnByb3h5KHRoaXMub25DaGF0Um9vbVByZXNlbmNlLCB0aGlzKSwKICAgICAgICAgICAgICAgICAgICAgICAgJC5wcm94eSh0aGlzLm9uQ2hhdFJvb21Sb3N0ZXIsIHRoaXMpLAogICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldCgnY29ubmVjdGVkJywgZmFsc2UpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVuZGVyQ29uZmlndXJhdGlvbkZvcm06IGZ1bmN0aW9uIChzdGFuemEpIHsKICAgICAgICAgICAgICAgIHZhciAkZm9ybT0gdGhpcy4kZWwuZmluZCgnZm9ybS5jaGF0cm9vbS1mb3JtJyksCiAgICAgICAgICAgICAgICAgICAgJHN0YW56YSA9ICQoc3RhbnphKSwKICAgICAgICAgICAgICAgICAgICAkZmllbGRzID0gJHN0YW56YS5maW5kKCdmaWVsZCcpLAogICAgICAgICAgICAgICAgICAgIHRpdGxlID0gJHN0YW56YS5maW5kKCd0aXRsZScpLnRleHQoKSwKICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbnMgPSAkc3RhbnphLmZpbmQoJ2luc3RydWN0aW9ucycpLnRleHQoKSwKICAgICAgICAgICAgICAgICAgICBpLCBqLCBvcHRpb25zPVtdLCAkZmllbGQsICRvcHRpb25zOwogICAgICAgICAgICAgICAgdmFyIGlucHV0X3R5cGVzID0gewogICAgICAgICAgICAgICAgICAgICd0ZXh0LXByaXZhdGUnOiAncGFzc3dvcmQnLAogICAgICAgICAgICAgICAgICAgICd0ZXh0LXNpbmdsZSc6ICd0ZXh0bGluZScsCiAgICAgICAgICAgICAgICAgICAgJ2Jvb2xlYW4nOiAnY2hlY2tib3gnLAogICAgICAgICAgICAgICAgICAgICdoaWRkZW4nOiAnaGlkZGVuJywKICAgICAgICAgICAgICAgICAgICAnbGlzdC1zaW5nbGUnOiAnZHJvcGRvd24nCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgJGZvcm0uZmluZCgnc3Bhbi5zcGlubmVyJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAkZm9ybS5hcHBlbmQoJCgnPGxlZ2VuZD4nKS50ZXh0KHRpdGxlKSk7CiAgICAgICAgICAgICAgICBpZiAoaW5zdHJ1Y3Rpb25zICE9IHRpdGxlKSB7CiAgICAgICAgICAgICAgICAgICAgJGZvcm0uYXBwZW5kKCQoJzxwPicpLnRleHQoaW5zdHJ1Y3Rpb25zKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKGk9MDsgaTwkZmllbGRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgJGZpZWxkID0gJCgkZmllbGRzW2ldKTsKICAgICAgICAgICAgICAgICAgICBpZiAoJGZpZWxkLmF0dHIoJ3R5cGUnKSA9PSAnbGlzdC1zaW5nbGUnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgJG9wdGlvbnMgPSAkZmllbGQuZmluZCgnb3B0aW9uJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaj0wOyBqPCRvcHRpb25zLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goY29udmVyc2UudGVtcGxhdGVzLnNlbGVjdF9vcHRpb24oewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAkKCRvcHRpb25zW2pdKS5maW5kKCd2YWx1ZScpLnRleHQoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJCgkb3B0aW9uc1tqXSkuYXR0cignbGFiZWwnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICRmb3JtLmFwcGVuZChjb252ZXJzZS50ZW1wbGF0ZXMuZm9ybV9zZWxlY3QoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJGZpZWxkLmF0dHIoJ3ZhcicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICRmaWVsZC5hdHRyKCdsYWJlbCcpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucy5qb2luKCcnKQogICAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkZmllbGQuYXR0cigndHlwZScpID09ICdib29sZWFuJykgewogICAgICAgICAgICAgICAgICAgICAgICAkZm9ybS5hcHBlbmQoY29udmVyc2UudGVtcGxhdGVzLmZvcm1fY2hlY2tib3goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJGZpZWxkLmF0dHIoJ3ZhcicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW5wdXRfdHlwZXNbJGZpZWxkLmF0dHIoJ3R5cGUnKV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJGZpZWxkLmF0dHIoJ2xhYmVsJykgfHwgJycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiAkZmllbGQuZmluZCgndmFsdWUnKS50ZXh0KCkgPT09ICIxIiAmJiAnY2hlY2tlZD0iMSInIHx8ICcnCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkZm9ybS5hcHBlbmQoY29udmVyc2UudGVtcGxhdGVzLmZvcm1faW5wdXQoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJGZpZWxkLmF0dHIoJ3ZhcicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW5wdXRfdHlwZXNbJGZpZWxkLmF0dHIoJ3R5cGUnKV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJGZpZWxkLmF0dHIoJ2xhYmVsJykgfHwgJycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJGZpZWxkLmZpbmQoJ3ZhbHVlJykudGV4dCgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkZm9ybS5hcHBlbmQoJzxpbnB1dCB0eXBlPSJzdWJtaXQiIHZhbHVlPSInK19fKCdTYXZlJykrJyIvPicpOwogICAgICAgICAgICAgICAgJGZvcm0uYXBwZW5kKCc8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0iJytfXygnQ2FuY2VsJykrJyIvPicpOwogICAgICAgICAgICAgICAgJGZvcm0ub24oJ3N1Ym1pdCcsICQucHJveHkodGhpcy5zYXZlQ29uZmlndXJhdGlvbiwgdGhpcykpOwogICAgICAgICAgICAgICAgJGZvcm0uZmluZCgnaW5wdXRbdHlwZT1idXR0b25dJykub24oJ2NsaWNrJywgJC5wcm94eSh0aGlzLmNhbmNlbENvbmZpZ3VyYXRpb24sIHRoaXMpKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNhdmVDb25maWd1cmF0aW9uOiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgICAgICAgICAgICB2YXIgJGlucHV0cyA9ICQoZXYudGFyZ2V0KS5maW5kKCc6aW5wdXQ6bm90KFt0eXBlPWJ1dHRvbl0pOm5vdChbdHlwZT1zdWJtaXRdKScpLAogICAgICAgICAgICAgICAgICAgIGNvdW50ID0gJGlucHV0cy5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgY29uZmlnQXJyYXkgPSBbXTsKICAgICAgICAgICAgICAgICRpbnB1dHMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyksIHZhbHVlOwogICAgICAgICAgICAgICAgICAgIGlmICgkaW5wdXQuaXMoJ1t0eXBlPWNoZWNrYm94XScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJGlucHV0LmlzKCc6Y2hlY2tlZCcpICYmIDEgfHwgMDsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICRpbnB1dC52YWwoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyIGNub2RlID0gJChjb252ZXJzZS50ZW1wbGF0ZXMuZmllbGQoewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAkaW5wdXQuYXR0cignbmFtZScpLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICAgICAgICB9KSlbMF07CiAgICAgICAgICAgICAgICAgICAgY29uZmlnQXJyYXkucHVzaChjbm9kZSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWNvdW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ubXVjLnNhdmVDb25maWd1cmF0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5tb2RlbC5nZXQoJ2ppZCcpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnQXJyYXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnByb3h5KHRoYXQub25Db25maWdTYXZlZCwgdGhhdCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnByb3h5KHRoYXQub25FcnJvckNvbmZpZ1NhdmVkLCB0aGF0KQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgnZGl2LmNoYXRyb29tLWZvcm0tY29udGFpbmVyJykuaGlkZSgKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuJGVsLmZpbmQoJy5jaGF0LWFyZWEnKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuJGVsLmZpbmQoJy5wYXJ0aWNpcGFudHMnKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvbkNvbmZpZ1NhdmVkOiBmdW5jdGlvbiAoc3RhbnphKSB7CiAgICAgICAgICAgICAgICAvLyBYWFgKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIG9uRXJyb3JDb25maWdTYXZlZDogZnVuY3Rpb24gKHN0YW56YSkgewogICAgICAgICAgICAgICAgdGhpcy5zaG93U3RhdHVzTm90aWZpY2F0aW9uKF9fKCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gc2F2ZSB0aGUgZm9ybS4iKSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBjYW5jZWxDb25maWd1cmF0aW9uOiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCdkaXYuY2hhdHJvb20tZm9ybS1jb250YWluZXInKS5oaWRlKAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC4kZWwuZmluZCgnLmNoYXQtYXJlYScpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC4kZWwuZmluZCgnLnBhcnRpY2lwYW50cycpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNvbmZpZ3VyZUNoYXRSb29tOiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy4kZWwuZmluZCgnZGl2LmNoYXRyb29tLWZvcm0tY29udGFpbmVyJykubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy4kKCcuY2hhdC1ib2R5JykuY2hpbGRyZW4oKS5oaWRlKCk7CiAgICAgICAgICAgICAgICB0aGlzLiQoJy5jaGF0LWJvZHknKS5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz0iY2hhdHJvb20tZm9ybS1jb250YWluZXIiPicrCiAgICAgICAgICAgICAgICAgICAgICAgICc8Zm9ybSBjbGFzcz0iY2hhdHJvb20tZm9ybSI+JysKICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPSJzcGlubmVyIGNlbnRlcmVkIi8+JysKICAgICAgICAgICAgICAgICAgICAgICAgJzwvZm9ybT4nKwogICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nKSk7CiAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLm11Yy5jb25maWd1cmUoCiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5nZXQoJ2ppZCcpLAogICAgICAgICAgICAgICAgICAgICQucHJveHkodGhpcy5yZW5kZXJDb25maWd1cmF0aW9uRm9ybSwgdGhpcykKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzdWJtaXRQYXNzd29yZDogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgdmFyIHBhc3N3b3JkID0gdGhpcy4kZWwuZmluZCgnLmNoYXRyb29tLWZvcm0nKS5maW5kKCdpbnB1dFt0eXBlPXBhc3N3b3JkXScpLnZhbCgpOwogICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgnLmNoYXRyb29tLWZvcm0tY29udGFpbmVyJykucmVwbGFjZVdpdGgoJzxzcGFuIGNsYXNzPSJzcGlubmVyIGNlbnRlcmVkIi8+Jyk7CiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3QocGFzc3dvcmQpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVuZGVyUGFzc3dvcmRGb3JtOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLiQoJy5jaGF0LWJvZHknKS5jaGlsZHJlbigpLmhpZGUoKTsKICAgICAgICAgICAgICAgIHRoaXMuJCgnc3Bhbi5jZW50ZXJlZC5zcGlubmVyJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICB0aGlzLiQoJy5jaGF0LWJvZHknKS5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UudGVtcGxhdGVzLmNoYXRyb29tX3Bhc3N3b3JkX2Zvcm0oewogICAgICAgICAgICAgICAgICAgICAgICBoZWFkaW5nOiBfXygnVGhpcyBjaGF0cm9vbSByZXF1aXJlcyBhIHBhc3N3b3JkJyksCiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsX3Bhc3N3b3JkOiBfXygnUGFzc3dvcmQ6ICcpLAogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbF9zdWJtaXQ6IF9fKCdTdWJtaXQnKQogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIHRoaXMuJCgnLmNoYXRyb29tLWZvcm0nKS5vbignc3VibWl0JywgJC5wcm94eSh0aGlzLnN1Ym1pdFBhc3N3b3JkLCB0aGlzKSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzaG93RGlzY29ubmVjdE1lc3NhZ2U6IGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgICAgIHRoaXMuJCgnLmNoYXQtYXJlYScpLmhpZGUoKTsKICAgICAgICAgICAgICAgIHRoaXMuJCgnLnBhcnRpY2lwYW50cycpLmhpZGUoKTsKICAgICAgICAgICAgICAgIHRoaXMuJCgnc3Bhbi5jZW50ZXJlZC5zcGlubmVyJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICB0aGlzLiQoJy5jaGF0LWJvZHknKS5hcHBlbmQoJCgnPHA+Jyttc2crJzwvcD4nKSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvKiBodHRwOi8veG1wcC5vcmcvZXh0ZW5zaW9ucy94ZXAtMDA0NS5odG1sCiAgICAgICAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAgICAgICogMTAwIG1lc3NhZ2UgICAgICBFbnRlcmluZyBhIHJvb20gICAgICAgICBJbmZvcm0gdXNlciB0aGF0IGFueSBvY2N1cGFudCBpcyBhbGxvd2VkIHRvIHNlZSB0aGUgdXNlcidzIGZ1bGwgSklECiAgICAgICAgICAgICAqIDEwMSBtZXNzYWdlIChvdXQgb2YgYmFuZCkgICAgICAgICAgICAgICAgQWZmaWxpYXRpb24gY2hhbmdlICBJbmZvcm0gdXNlciB0aGF0IGhpcyBvciBoZXIgYWZmaWxpYXRpb24gY2hhbmdlZCB3aGlsZSBub3QgaW4gdGhlIHJvb20KICAgICAgICAgICAgICogMTAyIG1lc3NhZ2UgICAgICBDb25maWd1cmF0aW9uIGNoYW5nZSAgICBJbmZvcm0gb2NjdXBhbnRzIHRoYXQgcm9vbSBub3cgc2hvd3MgdW5hdmFpbGFibGUgbWVtYmVycwogICAgICAgICAgICAgKiAxMDMgbWVzc2FnZSAgICAgIENvbmZpZ3VyYXRpb24gY2hhbmdlICAgIEluZm9ybSBvY2N1cGFudHMgdGhhdCByb29tIG5vdyBkb2VzIG5vdCBzaG93IHVuYXZhaWxhYmxlIG1lbWJlcnMKICAgICAgICAgICAgICogMTA0IG1lc3NhZ2UgICAgICBDb25maWd1cmF0aW9uIGNoYW5nZSAgICBJbmZvcm0gb2NjdXBhbnRzIHRoYXQgYSBub24tcHJpdmFjeS1yZWxhdGVkIHJvb20gY29uZmlndXJhdGlvbiBjaGFuZ2UgaGFzIG9jY3VycmVkCiAgICAgICAgICAgICAqIDExMCBwcmVzZW5jZSAgICAgQW55IHJvb20gcHJlc2VuY2UgICAgICAgSW5mb3JtIHVzZXIgdGhhdCBwcmVzZW5jZSByZWZlcnMgdG8gb25lIG9mIGl0cyBvd24gcm9vbSBvY2N1cGFudHMKICAgICAgICAgICAgICogMTcwIG1lc3NhZ2Ugb3IgaW5pdGlhbCBwcmVzZW5jZSAgICAgICAgICBDb25maWd1cmF0aW9uIGNoYW5nZSAgICBJbmZvcm0gb2NjdXBhbnRzIHRoYXQgcm9vbSBsb2dnaW5nIGlzIG5vdyBlbmFibGVkCiAgICAgICAgICAgICAqIDE3MSBtZXNzYWdlICAgICAgQ29uZmlndXJhdGlvbiBjaGFuZ2UgICAgSW5mb3JtIG9jY3VwYW50cyB0aGF0IHJvb20gbG9nZ2luZyBpcyBub3cgZGlzYWJsZWQKICAgICAgICAgICAgICogMTcyIG1lc3NhZ2UgICAgICBDb25maWd1cmF0aW9uIGNoYW5nZSAgICBJbmZvcm0gb2NjdXBhbnRzIHRoYXQgdGhlIHJvb20gaXMgbm93IG5vbi1hbm9ueW1vdXMKICAgICAgICAgICAgICogMTczIG1lc3NhZ2UgICAgICBDb25maWd1cmF0aW9uIGNoYW5nZSAgICBJbmZvcm0gb2NjdXBhbnRzIHRoYXQgdGhlIHJvb20gaXMgbm93IHNlbWktYW5vbnltb3VzCiAgICAgICAgICAgICAqIDE3NCBtZXNzYWdlICAgICAgQ29uZmlndXJhdGlvbiBjaGFuZ2UgICAgSW5mb3JtIG9jY3VwYW50cyB0aGF0IHRoZSByb29tIGlzIG5vdyBmdWxseS1hbm9ueW1vdXMKICAgICAgICAgICAgICogMjAxIHByZXNlbmNlICAgICBFbnRlcmluZyBhIHJvb20gICAgICAgICBJbmZvcm0gdXNlciB0aGF0IGEgbmV3IHJvb20gaGFzIGJlZW4gY3JlYXRlZAogICAgICAgICAgICAgKiAyMTAgcHJlc2VuY2UgICAgIEVudGVyaW5nIGEgcm9vbSAgICAgICAgIEluZm9ybSB1c2VyIHRoYXQgdGhlIHNlcnZpY2UgaGFzIGFzc2lnbmVkIG9yIG1vZGlmaWVkIHRoZSBvY2N1cGFudCdzIHJvb21uaWNrCiAgICAgICAgICAgICAqIDMwMSBwcmVzZW5jZSAgICAgUmVtb3ZhbCBmcm9tIHJvb20gICAgICAgSW5mb3JtIHVzZXIgdGhhdCBoZSBvciBzaGUgaGFzIGJlZW4gYmFubmVkIGZyb20gdGhlIHJvb20KICAgICAgICAgICAgICogMzAzIHByZXNlbmNlICAgICBFeGl0aW5nIGEgcm9vbSAgICAgICAgICBJbmZvcm0gYWxsIG9jY3VwYW50cyBvZiBuZXcgcm9vbSBuaWNrbmFtZQogICAgICAgICAgICAgKiAzMDcgcHJlc2VuY2UgICAgIFJlbW92YWwgZnJvbSByb29tICAgICAgIEluZm9ybSB1c2VyIHRoYXQgaGUgb3Igc2hlIGhhcyBiZWVuIGtpY2tlZCBmcm9tIHRoZSByb29tCiAgICAgICAgICAgICAqIDMyMSBwcmVzZW5jZSAgICAgUmVtb3ZhbCBmcm9tIHJvb20gICAgICAgSW5mb3JtIHVzZXIgdGhhdCBoZSBvciBzaGUgaXMgYmVpbmcgcmVtb3ZlZCBmcm9tIHRoZSByb29tIGJlY2F1c2Ugb2YgYW4gYWZmaWxpYXRpb24gY2hhbmdlCiAgICAgICAgICAgICAqIDMyMiBwcmVzZW5jZSAgICAgUmVtb3ZhbCBmcm9tIHJvb20gICAgICAgSW5mb3JtIHVzZXIgdGhhdCBoZSBvciBzaGUgaXMgYmVpbmcgcmVtb3ZlZCBmcm9tIHRoZSByb29tIGJlY2F1c2UgdGhlIHJvb20gaGFzIGJlZW4gY2hhbmdlZCB0byBtZW1iZXJzLW9ubHkgYW5kIHRoZSB1c2VyIGlzIG5vdCBhIG1lbWJlcgogICAgICAgICAgICAgKiAzMzIgcHJlc2VuY2UgICAgIFJlbW92YWwgZnJvbSByb29tICAgICAgIEluZm9ybSB1c2VyIHRoYXQgaGUgb3Igc2hlIGlzIGJlaW5nIHJlbW92ZWQgZnJvbSB0aGUgcm9vbSBiZWNhdXNlIG9mIGEgc3lzdGVtIHNodXRkb3duCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBpbmZvTWVzc2FnZXM6IHsKICAgICAgICAgICAgICAgIDEwMDogX18oJ1RoaXMgcm9vbSBpcyBub3QgYW5vbnltb3VzJyksCiAgICAgICAgICAgICAgICAxMDI6IF9fKCdUaGlzIHJvb20gbm93IHNob3dzIHVuYXZhaWxhYmxlIG1lbWJlcnMnKSwKICAgICAgICAgICAgICAgIDEwMzogX18oJ1RoaXMgcm9vbSBkb2VzIG5vdCBzaG93IHVuYXZhaWxhYmxlIG1lbWJlcnMnKSwKICAgICAgICAgICAgICAgIDEwNDogX18oJ05vbi1wcml2YWN5LXJlbGF0ZWQgcm9vbSBjb25maWd1cmF0aW9uIGhhcyBjaGFuZ2VkJyksCiAgICAgICAgICAgICAgICAxNzA6IF9fKCdSb29tIGxvZ2dpbmcgaXMgbm93IGVuYWJsZWQnKSwKICAgICAgICAgICAgICAgIDE3MTogX18oJ1Jvb20gbG9nZ2luZyBpcyBub3cgZGlzYWJsZWQnKSwKICAgICAgICAgICAgICAgIDE3MjogX18oJ1RoaXMgcm9vbSBpcyBub3cgbm9uLWFub255bW91cycpLAogICAgICAgICAgICAgICAgMTczOiBfXygnVGhpcyByb29tIGlzIG5vdyBzZW1pLWFub255bW91cycpLAogICAgICAgICAgICAgICAgMTc0OiBfXygnVGhpcyByb29tIGlzIG5vdyBmdWxseS1hbm9ueW1vdXMnKSwKICAgICAgICAgICAgICAgIDIwMTogX18oJ0EgbmV3IHJvb20gaGFzIGJlZW4gY3JlYXRlZCcpCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBkaXNjb25uZWN0TWVzc2FnZXM6IHsKICAgICAgICAgICAgICAgIDMwMTogX18oJ1lvdSBoYXZlIGJlZW4gYmFubmVkIGZyb20gdGhpcyByb29tJyksCiAgICAgICAgICAgICAgICAzMDc6IF9fKCdZb3UgaGF2ZSBiZWVuIGtpY2tlZCBmcm9tIHRoaXMgcm9vbScpLAogICAgICAgICAgICAgICAgMzIxOiBfXygiWW91IGhhdmUgYmVlbiByZW1vdmVkIGZyb20gdGhpcyByb29tIGJlY2F1c2Ugb2YgYW4gYWZmaWxpYXRpb24gY2hhbmdlIiksCiAgICAgICAgICAgICAgICAzMjI6IF9fKCJZb3UgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGlzIHJvb20gYmVjYXVzZSB0aGUgcm9vbSBoYXMgY2hhbmdlZCB0byBtZW1iZXJzLW9ubHkgYW5kIHlvdSdyZSBub3QgYSBtZW1iZXIiKSwKICAgICAgICAgICAgICAgIDMzMjogX18oIllvdSBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIHRoaXMgcm9vbSBiZWNhdXNlIHRoZSBNVUMgKE11bHRpLXVzZXIgY2hhdCkgc2VydmljZSBpcyBiZWluZyBzaHV0IGRvd24uIikKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGFjdGlvbkluZm9NZXNzYWdlczogewogICAgICAgICAgICAgICAgLyogWFhYOiBOb3RlIHRoZSB0cmlwbGUgdW5kZXJzY29yZSBmdW5jdGlvbiBhbmQgbm90IGRvdWJsZQogICAgICAgICAgICAgICAgICogdW5kZXJzY29yZS4KICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgKiBUaGlzIGlzIGEgaGFjay4gV2UgY2FuJ3QgcGFzcyB0aGUgc3RyaW5ncyB0byBfXyBiZWNhdXNlIHdlCiAgICAgICAgICAgICAgICAgKiBkb24ndCB5ZXQga25vdyB3aGF0IHRoZSB2YXJpYWJsZSB0byBpbnRlcnBvbGF0ZSBpcy4KICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgKiBUcmlwbGUgdW5kZXJzY29yZSB3aWxsIGp1c3QgcmV0dXJuIHRoZSBzdHJpbmcgYWdhaW4sIGJ1dCB3ZQogICAgICAgICAgICAgICAgICogY2FuIHRoZW4gYXQgbGVhc3QgdGVsbCBnZXR0ZXh0IHRvIHNjYW4gZm9yIGl0IHNvIHRoYXQgdGhlc2UKICAgICAgICAgICAgICAgICAqIHN0cmluZ3MgYXJlIHBpY2tlZCB1cCBieSB0aGUgdHJhbnNsYXRpb24gbWFjaGluZXJ5LgogICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICAzMDE6IF9fXygiPHN0cm9uZz4lMSRzPC9zdHJvbmc+IGhhcyBiZWVuIGJhbm5lZCIpLAogICAgICAgICAgICAgICAgMzAzOiBfX18oIjxzdHJvbmc+JTEkczwvc3Ryb25nPidzIG5pY2tuYW1lIGhhcyBjaGFuZ2VkIiksCiAgICAgICAgICAgICAgICAzMDc6IF9fXygiPHN0cm9uZz4lMSRzPC9zdHJvbmc+IGhhcyBiZWVuIGtpY2tlZCBvdXQiKSwKICAgICAgICAgICAgICAgIDMyMTogX19fKCI8c3Ryb25nPiUxJHM8L3N0cm9uZz4gaGFzIGJlZW4gcmVtb3ZlZCBiZWNhdXNlIG9mIGFuIGFmZmlsaWF0aW9uIGNoYW5nZSIpLAogICAgICAgICAgICAgICAgMzIyOiBfX18oIjxzdHJvbmc+JTEkczwvc3Ryb25nPiBoYXMgYmVlbiByZW1vdmVkIGZvciBub3QgYmVpbmcgYSBtZW1iZXIiKQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgbmV3Tmlja25hbWVNZXNzYWdlczogewogICAgICAgICAgICAgICAgMjEwOiBfX18oJ1lvdXIgbmlja25hbWUgaGFzIGJlZW4gYXV0b21hdGljYWxseSBjaGFuZ2VkIHRvOiA8c3Ryb25nPiUxJHM8L3N0cm9uZz4nKSwKICAgICAgICAgICAgICAgIDMwMzogX19fKCdZb3VyIG5pY2tuYW1lIGhhcyBiZWVuIGNoYW5nZWQgdG86IDxzdHJvbmc+JTEkczwvc3Ryb25nPicpCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzaG93U3RhdHVzTWVzc2FnZXM6IGZ1bmN0aW9uICgkZWwsIGlzX3NlbGYpIHsKICAgICAgICAgICAgICAgIC8qIENoZWNrIGZvciBzdGF0dXMgY29kZXMgYW5kIGNvbW11bmljYXRlIHRoZWlyIHB1cnBvc2UgdG8gdGhlIHVzZXIuCiAgICAgICAgICAgICAgICAgKiBBbGxvdyB1c2VyIHRvIGNvbmZpZ3VyZSBjaGF0IHJvb20gaWYgdGhleSBhcmUgdGhlIG93bmVyLgogICAgICAgICAgICAgICAgICogU2VlOiBodHRwOi8veG1wcC5vcmcvcmVnaXN0cmFyL211Y3N0YXR1cy5odG1sCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIHZhciAkY2hhdF9jb250ZW50LAogICAgICAgICAgICAgICAgICAgIGRpc2Nvbm5lY3RfbXNncyA9IFtdLAogICAgICAgICAgICAgICAgICAgIG1zZ3MgPSBbXSwKICAgICAgICAgICAgICAgICAgICByZWFzb25zID0gW107CiAgICAgICAgICAgICAgICAkZWwuZmluZCgneFt4bWxucz0iJytTdHJvcGhlLk5TLk1VQ19VU0VSKyciXScpLmVhY2goJC5wcm94eShmdW5jdGlvbiAoaWR4LCB4KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRpdGVtID0gJCh4KS5maW5kKCdpdGVtJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKFN0cm9waGUuZ2V0QmFyZUppZEZyb21KaWQoJGl0ZW0uYXR0cignamlkJykpID09PSBjb252ZXJzZS5iYXJlX2ppZCAmJiAkaXRlbS5hdHRyKCdhZmZpbGlhdGlvbicpID09PSAnb3duZXInKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmZpbmQoJ2EuY29uZmlndXJlLWNoYXRyb29tLWJ1dHRvbicpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJCh4KS5maW5kKCdpdGVtIHJlYXNvbicpLmVhY2goZnVuY3Rpb24gKGlkeCwgcmVhc29uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHJlYXNvbikudGV4dCgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb25zLnB1c2goJChyZWFzb24pLnRleHQoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAkKHgpLmZpbmQoJ3N0YXR1cycpLmVhY2goJC5wcm94eShmdW5jdGlvbiAoaWR4LCBzdGF0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2RlID0gc3RhdC5nZXRBdHRyaWJ1dGUoJ2NvZGUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzX3NlbGYgJiYgXy5jb250YWlucyhfLmtleXModGhpcy5uZXdOaWNrbmFtZU1lc3NhZ2VzKSwgY29kZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2F2ZSh7J25pY2snOiBTdHJvcGhlLmdldFJlc291cmNlRnJvbUppZCgkZWwuYXR0cignZnJvbScpKX0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNncy5wdXNoKF9fKHRoaXMubmV3Tmlja25hbWVNZXNzYWdlc1tjb2RlXSwgJGl0ZW0uYXR0cignbmljaycpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNfc2VsZiAmJiBfLmNvbnRhaW5zKF8ua2V5cyh0aGlzLmRpc2Nvbm5lY3RNZXNzYWdlcyksIGNvZGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNjb25uZWN0X21zZ3MucHVzaCh0aGlzLmRpc2Nvbm5lY3RNZXNzYWdlc1tjb2RlXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzX3NlbGYgJiYgXy5jb250YWlucyhfLmtleXModGhpcy5hY3Rpb25JbmZvTWVzc2FnZXMpLCBjb2RlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNncy5wdXNoKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fKHRoaXMuYWN0aW9uSW5mb01lc3NhZ2VzW2NvZGVdLCBTdHJvcGhlLnVuZXNjYXBlTm9kZShTdHJvcGhlLmdldFJlc291cmNlRnJvbUppZCgkZWwuYXR0cignZnJvbScpKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8uY29udGFpbnMoXy5rZXlzKHRoaXMuaW5mb01lc3NhZ2VzKSwgY29kZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZ3MucHVzaCh0aGlzLmluZm9NZXNzYWdlc1tjb2RlXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZSAhPT0gJzExMCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHN0YXQpLnRleHQoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZ3MucHVzaCgkKHN0YXQpLnRleHQoKSk7IC8vIFNvbWV0aW1lcyB0aGUgc3RhdHVzIGNvbnRhaW5zIGh1bWFuIHJlYWRhYmxlIHRleHQgYW5kIG5vdCBhIGNvZGUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CgogICAgICAgICAgICAgICAgaWYgKGRpc2Nvbm5lY3RfbXNncy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpPTA7IGk8ZGlzY29ubmVjdF9tc2dzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Rpc2Nvbm5lY3RNZXNzYWdlKGRpc2Nvbm5lY3RfbXNnc1tpXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGZvciAoaT0wOyBpPHJlYXNvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93RGlzY29ubmVjdE1lc3NhZ2UoX18oJ1RoZSByZWFzb24gZ2l2ZW4gaXM6ICInK3JlYXNvbnNbaV0rJyInKSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KCdjb25uZWN0ZWQnLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGNoYXRfY29udGVudCA9IHRoaXMuJGVsLmZpbmQoJy5jaGF0LWNvbnRlbnQnKTsKICAgICAgICAgICAgICAgIGZvciAoaT0wOyBpPG1zZ3MubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAkY2hhdF9jb250ZW50LmFwcGVuZChjb252ZXJzZS50ZW1wbGF0ZXMuaW5mbyh7bWVzc2FnZTogbXNnc1tpXX0pKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAoaT0wOyBpPHJlYXNvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTdGF0dXNOb3RpZmljYXRpb24oX18oJ1RoZSByZWFzb24gZ2l2ZW4gaXM6ICInK3JlYXNvbnNbaV0rJyInKSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxEb3duKCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzaG93RXJyb3JNZXNzYWdlOiBmdW5jdGlvbiAoJGVycm9yLCByb29tKSB7CiAgICAgICAgICAgICAgICAvLyBXZSBkaWRuJ3QgZW50ZXIgdGhlIHJvb20sIHNvIHdlIG11c3QgcmVtb3ZlIGl0IGZyb20gdGhlIE1VQwogICAgICAgICAgICAgICAgLy8gYWRkLW9uCiAgICAgICAgICAgICAgICBkZWxldGUgY29udmVyc2UuY29ubmVjdGlvbi5tdWNbcm9vbS5uYW1lXTsKICAgICAgICAgICAgICAgIGlmICgkZXJyb3IuYXR0cigndHlwZScpID09ICdhdXRoJykgewogICAgICAgICAgICAgICAgICAgIGlmICgkZXJyb3IuZmluZCgnbm90LWF1dGhvcml6ZWQnKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJQYXNzd29yZEZvcm0oKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRlcnJvci5maW5kKCdyZWdpc3RyYXRpb24tcmVxdWlyZWQnKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93RGlzY29ubmVjdE1lc3NhZ2UoX18oJ1lvdSBhcmUgbm90IG9uIHRoZSBtZW1iZXIgbGlzdCBvZiB0aGlzIHJvb20nKSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkZXJyb3IuZmluZCgnZm9yYmlkZGVuJykubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Rpc2Nvbm5lY3RNZXNzYWdlKF9fKCdZb3UgaGF2ZSBiZWVuIGJhbm5lZCBmcm9tIHRoaXMgcm9vbScpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRlcnJvci5hdHRyKCd0eXBlJykgPT0gJ21vZGlmeScpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJGVycm9yLmZpbmQoJ2ppZC1tYWxmb3JtZWQnKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93RGlzY29ubmVjdE1lc3NhZ2UoX18oJ05vIG5pY2tuYW1lIHdhcyBzcGVjaWZpZWQnKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkZXJyb3IuYXR0cigndHlwZScpID09ICdjYW5jZWwnKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRlcnJvci5maW5kKCdub3QtYWxsb3dlZCcpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dEaXNjb25uZWN0TWVzc2FnZShfXygnWW91IGFyZSBub3QgYWxsb3dlZCB0byBjcmVhdGUgbmV3IHJvb21zJykpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJGVycm9yLmZpbmQoJ25vdC1hY2NlcHRhYmxlJykubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Rpc2Nvbm5lY3RNZXNzYWdlKF9fKCJZb3VyIG5pY2tuYW1lIGRvZXNuJ3QgY29uZm9ybSB0byB0aGlzIHJvb20ncyBwb2xpY2llcyIpKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRlcnJvci5maW5kKCdjb25mbGljdCcpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBnaXZlIHVzZXIgdGhlIG9wdGlvbiBvZiBjaG9vc2luZyBhIGRpZmZlcmVudAogICAgICAgICAgICAgICAgICAgICAgICAvLyBuaWNrbmFtZQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dEaXNjb25uZWN0TWVzc2FnZShfXygiWW91ciBuaWNrbmFtZSBpcyBhbHJlYWR5IHRha2VuIikpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJGVycm9yLmZpbmQoJ2l0ZW0tbm90LWZvdW5kJykubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Rpc2Nvbm5lY3RNZXNzYWdlKF9fKCJUaGlzIHJvb20gZG9lcyBub3QgKHlldCkgZXhpc3QiKSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkZXJyb3IuZmluZCgnc2VydmljZS11bmF2YWlsYWJsZScpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dEaXNjb25uZWN0TWVzc2FnZShfXygiVGhpcyByb29tIGhhcyByZWFjaGVkIGl0J3MgbWF4aW11bSBudW1iZXIgb2Ygb2NjdXBhbnRzIikpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIG9uQ2hhdFJvb21QcmVzZW5jZTogZnVuY3Rpb24gKHByZXNlbmNlLCByb29tKSB7CiAgICAgICAgICAgICAgICB2YXIgJHByZXNlbmNlID0gJChwcmVzZW5jZSksIGlzX3NlbGY7CiAgICAgICAgICAgICAgICBpZiAoJHByZXNlbmNlLmF0dHIoJ3R5cGUnKSA9PT0gJ2Vycm9yJykgewogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KCdjb25uZWN0ZWQnLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93RXJyb3JNZXNzYWdlKCRwcmVzZW5jZS5maW5kKCdlcnJvcicpLCByb29tKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaXNfc2VsZiA9ICgkcHJlc2VuY2UuZmluZCgic3RhdHVzW2NvZGU9JzExMCddIikubGVuZ3RoKSB8fCAoJHByZXNlbmNlLmF0dHIoJ2Zyb20nKSA9PSByb29tLm5hbWUrJy8nK1N0cm9waGUuZXNjYXBlTm9kZShyb29tLm5pY2spKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubW9kZWwuZ2V0KCdjb25uZWNlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KCdjb25uZWN0ZWQnLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kKCdzcGFuLmNlbnRlcmVkLnNwaW5uZXInKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgnLmNoYXQtYm9keScpLmNoaWxkcmVuKCkuc2hvdygpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTdGF0dXNNZXNzYWdlcygkcHJlc2VuY2UsIGlzX3NlbGYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvbkNoYXRSb29tTWVzc2FnZTogZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgIHZhciAkbWVzc2FnZSA9ICQobWVzc2FnZSksCiAgICAgICAgICAgICAgICAgICAgYm9keSA9ICRtZXNzYWdlLmNoaWxkcmVuKCdib2R5JykudGV4dCgpLAogICAgICAgICAgICAgICAgICAgIGppZCA9ICRtZXNzYWdlLmF0dHIoJ2Zyb20nKSwKICAgICAgICAgICAgICAgICAgICBtc2dpZCA9ICRtZXNzYWdlLmF0dHIoJ2lkJyksCiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2UgPSBTdHJvcGhlLmdldFJlc291cmNlRnJvbUppZChqaWQpLAogICAgICAgICAgICAgICAgICAgIHNlbmRlciA9IHJlc291cmNlICYmIFN0cm9waGUudW5lc2NhcGVOb2RlKHJlc291cmNlKSB8fCAnJywKICAgICAgICAgICAgICAgICAgICBkZWxheWVkID0gJG1lc3NhZ2UuZmluZCgnZGVsYXknKS5sZW5ndGggPiAwLAogICAgICAgICAgICAgICAgICAgIHN1YmplY3QgPSAkbWVzc2FnZS5jaGlsZHJlbignc3ViamVjdCcpLnRleHQoKTsKCiAgICAgICAgICAgICAgICBpZiAodGhpcy5tb2RlbC5tZXNzYWdlcy5maW5kV2hlcmUoe21zZ2lkOiBtc2dpZH0pKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIFdlIGFscmVhZHkgaGF2ZSB0aGlzIG1lc3NhZ2Ugc3RvcmVkLgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5zaG93U3RhdHVzTWVzc2FnZXMoJG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgaWYgKHN1YmplY3QpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCcuY2hhdHJvb20tdG9waWMnKS50ZXh0KHN1YmplY3QpLmF0dHIoJ3RpdGxlJywgc3ViamVjdCk7CiAgICAgICAgICAgICAgICAgICAgLy8gIyBGb3IgdHJhbnNsYXRvcnM6IHRoZSAlMSRzIGFuZCAlMiRzIHBhcnRzIHdpbGwgZ2V0IHJlcGxhY2VkIGJ5IHRoZSB1c2VyIGFuZCB0b3BpYyB0ZXh0IHJlc3BlY3RpdmVseQogICAgICAgICAgICAgICAgICAgIC8vICMgRXhhbXBsZTogVG9waWMgc2V0IGJ5IEpDIEJyYW5kIHRvOiBIZWxsbyBXb3JsZCEKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCcuY2hhdC1jb250ZW50JykuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS50ZW1wbGF0ZXMuaW5mbyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6IF9fKCdUb3BpYyBzZXQgYnkgJTEkcyB0bzogJTIkcycsIHNlbmRlciwgc3ViamVjdCkKICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHNlbmRlciA9PT0gJycpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuY3JlYXRlTWVzc2FnZSgkbWVzc2FnZSk7CiAgICAgICAgICAgICAgICBpZiAoIWRlbGF5ZWQgJiYgc2VuZGVyICE9PSB0aGlzLm1vZGVsLmdldCgnbmljaycpICYmIChuZXcgUmVnRXhwKCJcXGIiK3RoaXMubW9kZWwuZ2V0KCduaWNrJykrIlxcYiIpKS50ZXN0KGJvZHkpKSB7CiAgICAgICAgICAgICAgICAgICAgcGxheU5vdGlmaWNhdGlvbigpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHNlbmRlciAhPT0gdGhpcy5tb2RlbC5nZXQoJ25pY2snKSkgewogICAgICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgZW1pdCBhbiBldmVudCBpZiBpdCdzIG5vdCBvdXIgb3duIG1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5lbWl0KCdtZXNzYWdlJywgbWVzc2FnZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIG9uQ2hhdFJvb21Sb3N0ZXI6IGZ1bmN0aW9uIChyb3N0ZXIsIHJvb20pIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9jY3VwYW50c3ZpZXcub25DaGF0Um9vbVJvc3Rlcihyb3N0ZXIsIHJvb20pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuQ2hhdEJveGVzID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoewogICAgICAgICAgICBtb2RlbDogY29udmVyc2UuQ2hhdEJveCwKICAgICAgICAgICAgY29tcGFyYXRvcjogJ3RpbWVfb3BlbmVkJywKCiAgICAgICAgICAgIHJlZ2lzdGVyTWVzc2FnZUhhbmRsZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24uYWRkSGFuZGxlcigKICAgICAgICAgICAgICAgICAgICAkLnByb3h5KGZ1bmN0aW9uIChtZXNzYWdlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25NZXNzYWdlKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSwgbnVsbCwgJ21lc3NhZ2UnLCAnY2hhdCcpOwoKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24uYWRkSGFuZGxlcigKICAgICAgICAgICAgICAgICAgICAkLnByb3h5KGZ1bmN0aW9uIChtZXNzYWdlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25JbnZpdGUobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpLCAnamFiYmVyOng6Y29uZmVyZW5jZScsICdtZXNzYWdlJyk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvbkNvbm5lY3RlZDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGhpcy5icm93c2VyU3RvcmFnZSA9IG5ldyBCYWNrYm9uZS5Ccm93c2VyU3RvcmFnZVtjb252ZXJzZS5zdG9yYWdlXSgKICAgICAgICAgICAgICAgICAgICBiNjRfc2hhMSgnY29udmVyc2UuY2hhdGJveGVzLScrY29udmVyc2UuYmFyZV9qaWQpKTsKICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcigpOwogICAgICAgICAgICAgICAgdGhpcy5mZXRjaCh7CiAgICAgICAgICAgICAgICAgICAgYWRkOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICQucHJveHkoZnVuY3Rpb24gKGNvbGxlY3Rpb24sIHJlc3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfLmluY2x1ZGUoXy5wbHVjayhyZXNwLCAnaWQnKSwgJ2NvbnRyb2xib3gnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGQoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnY29udHJvbGJveCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94X2lkOiAnY29udHJvbGJveCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0KCdjb250cm9sYm94Jykuc2F2ZSh7Y29ubmVjdGVkOnRydWV9KTsKICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpc09ubHlDaGF0U3RhdGVOb3RpZmljYXRpb246IGZ1bmN0aW9uICgkbXNnKSB7CiAgICAgICAgICAgICAgICAvLyBTZWUgWEVQLTAwODUgQ2hhdCBTdGF0ZSBOb3RpZmljYXRpb24KICAgICAgICAgICAgICAgIHJldHVybiAoCiAgICAgICAgICAgICAgICAgICAgJG1zZy5maW5kKCdib2R5JykubGVuZ3RoID09PSAwICYmICgKICAgICAgICAgICAgICAgICAgICAgICAgJG1zZy5maW5kKEFDVElWRSkubGVuZ3RoICE9PSAwIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICRtc2cuZmluZChDT01QT1NJTkcpLmxlbmd0aCAhPT0gMCB8fAogICAgICAgICAgICAgICAgICAgICAgICAkbXNnLmZpbmQoSU5BQ1RJVkUpLmxlbmd0aCAhPT0gMCB8fAogICAgICAgICAgICAgICAgICAgICAgICAkbXNnLmZpbmQoUEFVU0VEKS5sZW5ndGggIT09IDAgfHwKICAgICAgICAgICAgICAgICAgICAgICAgJG1zZy5maW5kKEdPTkUpLmxlbmd0aCAhPT0gMAogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvbkludml0ZTogZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgIHZhciAkbWVzc2FnZSA9ICQobWVzc2FnZSksCiAgICAgICAgICAgICAgICAgICAgJHggPSAkbWVzc2FnZS5jaGlsZHJlbigneFt4bWxucz0iamFiYmVyOng6Y29uZmVyZW5jZSJdJyksCiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IFN0cm9waGUuZ2V0QmFyZUppZEZyb21KaWQoJG1lc3NhZ2UuYXR0cignZnJvbScpKSwKICAgICAgICAgICAgICAgICAgICByb29tX2ppZCA9ICR4LmF0dHIoJ2ppZCcpLAogICAgICAgICAgICAgICAgICAgIHJlYXNvbiA9ICR4LmF0dHIoJ3JlYXNvbicpLAogICAgICAgICAgICAgICAgICAgIGNvbnRhY3QgPSBjb252ZXJzZS5yb3N0ZXIuZ2V0KGZyb20pLAogICAgICAgICAgICAgICAgICAgIHJlc3VsdDsKCiAgICAgICAgICAgICAgICBpZiAoIXJlYXNvbikgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvbmZpcm0oCiAgICAgICAgICAgICAgICAgICAgICAgIF9fKF9fXygiJTEkcyBoYXMgaW52aXRlZCB5b3UgdG8gam9pbiBhIGNoYXQgcm9vbTogJTIkcyIpLCBjb250YWN0LmdldCgnZnVsbG5hbWUnKSwgcm9vbV9qaWQpCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gY29uZmlybSgKICAgICAgICAgICAgICAgICAgICAgICAgIF9fKF9fXygnJTEkcyBoYXMgaW52aXRlZCB5b3UgdG8gam9pbiBhIGNoYXQgcm9vbTogJTIkcywgYW5kIGxlZnQgdGhlIGZvbGxvd2luZyByZWFzb246ICIlMyRzIicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhY3QuZ2V0KCdmdWxsbmFtZScpLCByb29tX2ppZCwgcmVhc29uKQogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNoYXRyb29tID0gY29udmVyc2UuY2hhdGJveHZpZXdzLnNob3dDaGF0KHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogcm9vbV9qaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICdqaWQnOiByb29tX2ppZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiBTdHJvcGhlLnVuZXNjYXBlTm9kZShTdHJvcGhlLmdldE5vZGVGcm9tSmlkKHJvb21famlkKSksCiAgICAgICAgICAgICAgICAgICAgICAgICduaWNrJzogU3Ryb3BoZS51bmVzY2FwZU5vZGUoU3Ryb3BoZS5nZXROb2RlRnJvbUppZChjb252ZXJzZS5jb25uZWN0aW9uLmppZCkpLAogICAgICAgICAgICAgICAgICAgICAgICAnY2hhdHJvb20nOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAnYm94X2lkJyA6IGI2NF9zaGExKHJvb21famlkKSwKICAgICAgICAgICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzogJHguYXR0cigncGFzc3dvcmQnKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGlmICghY2hhdHJvb20uZ2V0KCdjb25uZWN0ZWQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jaGF0Ym94dmlld3MuZ2V0KHJvb21famlkKS5jb25uZWN0KG51bGwpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIG9uTWVzc2FnZTogZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgIHZhciAkbWVzc2FnZSA9ICQobWVzc2FnZSk7CiAgICAgICAgICAgICAgICB2YXIgYnVkZHlfamlkLCAkZm9yd2FyZGVkLCAkcmVjZWl2ZWQsCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZV9mcm9tID0gJG1lc3NhZ2UuYXR0cignZnJvbScpOwogICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VfZnJvbSA9PT0gY29udmVyc2UuY29ubmVjdGlvbi5qaWQpIHsKICAgICAgICAgICAgICAgICAgICAvLyBGSVhNRTogRm9yd2FyZGVkIG1lc3NhZ2VzIHNob3VsZCBiZSBzZW50IHRvIHNwZWNpZmljIHJlc291cmNlcywKICAgICAgICAgICAgICAgICAgICAvLyBub3QgYnJvYWRjYXN0ZWQKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRmb3J3YXJkZWQgPSAkbWVzc2FnZS5jaGlsZHJlbignZm9yd2FyZGVkJyk7CiAgICAgICAgICAgICAgICAkcmVjZWl2ZWQgPSAkbWVzc2FnZS5jaGlsZHJlbigncmVjZWl2ZWRbeG1sbnM9InVybjp4bXBwOmNhcmJvbnM6MiJdJyk7CiAgICAgICAgICAgICAgICBpZiAoJGZvcndhcmRlZC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAkbWVzc2FnZSA9ICRmb3J3YXJkZWQuY2hpbGRyZW4oJ21lc3NhZ2UnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHJlY2VpdmVkLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICRtZXNzYWdlID0gJHJlY2VpdmVkLmNoaWxkcmVuKCdmb3J3YXJkZWQnKS5jaGlsZHJlbignbWVzc2FnZScpOwogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VfZnJvbSA9ICRtZXNzYWdlLmF0dHIoJ2Zyb20nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBmcm9tID0gU3Ryb3BoZS5nZXRCYXJlSmlkRnJvbUppZChtZXNzYWdlX2Zyb20pLAogICAgICAgICAgICAgICAgICAgIHRvID0gU3Ryb3BoZS5nZXRCYXJlSmlkRnJvbUppZCgkbWVzc2FnZS5hdHRyKCd0bycpKSwKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZSwgY2hhdGJveCwgcm9zdGVyX2l0ZW07CiAgICAgICAgICAgICAgICBpZiAoZnJvbSA9PSBjb252ZXJzZS5iYXJlX2ppZCkgewogICAgICAgICAgICAgICAgICAgIC8vIEkgYW0gdGhlIHNlbmRlciwgc28gdGhpcyBtdXN0IGJlIGEgZm9yd2FyZGVkIG1lc3NhZ2UuLi4KICAgICAgICAgICAgICAgICAgICBidWRkeV9qaWQgPSB0bzsKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZSA9IFN0cm9waGUuZ2V0UmVzb3VyY2VGcm9tSmlkKCRtZXNzYWdlLmF0dHIoJ3RvJykpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBidWRkeV9qaWQgPSBmcm9tOwogICAgICAgICAgICAgICAgICAgIHJlc291cmNlID0gU3Ryb3BoZS5nZXRSZXNvdXJjZUZyb21KaWQobWVzc2FnZV9mcm9tKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNoYXRib3ggPSB0aGlzLmdldChidWRkeV9qaWQpOwogICAgICAgICAgICAgICAgcm9zdGVyX2l0ZW0gPSBjb252ZXJzZS5yb3N0ZXIuZ2V0KGJ1ZGR5X2ppZCk7CgogICAgICAgICAgICAgICAgaWYgKHJvc3Rlcl9pdGVtID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAvLyBUaGUgYnVkZHkgd2FzIGxpa2VseSByZW1vdmVkCiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UubG9nKCdDb3VsZCBub3QgZ2V0IHJvc3RlciBpdGVtIGZvciBKSUQgJytidWRkeV9qaWQsICdlcnJvcicpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghY2hhdGJveCkgewogICAgICAgICAgICAgICAgICAgIHZhciBmdWxsbmFtZSA9IHJvc3Rlcl9pdGVtLmdldCgnZnVsbG5hbWUnKTsKICAgICAgICAgICAgICAgICAgICBmdWxsbmFtZSA9IF8uaXNFbXB0eShmdWxsbmFtZSk/IGJ1ZGR5X2ppZDogZnVsbG5hbWU7CiAgICAgICAgICAgICAgICAgICAgY2hhdGJveCA9IHRoaXMuY3JlYXRlKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogYnVkZHlfamlkLAogICAgICAgICAgICAgICAgICAgICAgICAnamlkJzogYnVkZHlfamlkLAogICAgICAgICAgICAgICAgICAgICAgICAnZnVsbG5hbWUnOiBmdWxsbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2ltYWdlX3R5cGUnOiByb3N0ZXJfaXRlbS5nZXQoJ2ltYWdlX3R5cGUnKSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2ltYWdlJzogcm9zdGVyX2l0ZW0uZ2V0KCdpbWFnZScpLAogICAgICAgICAgICAgICAgICAgICAgICAndXJsJzogcm9zdGVyX2l0ZW0uZ2V0KCd1cmwnKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzT25seUNoYXRTdGF0ZU5vdGlmaWNhdGlvbigkbWVzc2FnZSkgJiYgZnJvbSAhPT0gY29udmVyc2UuYmFyZV9qaWQpIHsKICAgICAgICAgICAgICAgICAgICBwbGF5Tm90aWZpY2F0aW9uKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjaGF0Ym94LnJlY2VpdmVNZXNzYWdlKCRtZXNzYWdlKTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLnJvc3Rlci5hZGRSZXNvdXJjZShidWRkeV9qaWQsIHJlc291cmNlKTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmVtaXQoJ21lc3NhZ2UnLCBtZXNzYWdlKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuQ2hhdEJveFZpZXdzID0gQmFja2JvbmUuT3ZlcnZpZXcuZXh0ZW5kKHsKCiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oImFkZCIsIHRoaXMub25DaGF0Qm94QWRkZWQsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbigiY2hhbmdlOm1pbmltaXplZCIsIGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZ2V0KCdtaW5pbWl6ZWQnKSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpbUNoYXRzKHRoaXMuZ2V0KGl0ZW0uZ2V0KCdpZCcpKSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpbUNoYXRzKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBfZW5zdXJlRWxlbWVudDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgLyogT3ZlcnJpZGUgbWV0aG9kIGZyb20gYmFja2JvbmUuanMKICAgICAgICAgICAgICAgICAqIElmIHRoZSAjY29udmVyc2VqcyBlbGVtZW50IGRvZXNuJ3QgZXhpc3QsIGNyZWF0ZSBpdC4KICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmVsKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRlbCA9ICQoJyNjb252ZXJzZWpzJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCEkZWwubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRlbCA9ICQoJzxkaXYgaWQ9ImNvbnZlcnNlanMiPicpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKCRlbCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRlbC5odG1sKGNvbnZlcnNlLnRlbXBsYXRlcy5jaGF0c19wYW5lbCgpKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEVsZW1lbnQoJGVsLCBmYWxzZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RWxlbWVudChfLnJlc3VsdCh0aGlzLCAnZWwnKSwgZmFsc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25DaGF0Qm94QWRkZWQ6IGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMuZ2V0KGl0ZW0uZ2V0KCdpZCcpKTsKICAgICAgICAgICAgICAgIGlmICghdmlldykgewogICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmdldCgnY2hhdHJvb20nKSkgewogICAgICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IGNvbnZlcnNlLkNoYXRSb29tVmlldyh7J21vZGVsJzogaXRlbX0pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5nZXQoJ2JveF9pZCcpID09PSAnY29udHJvbGJveCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmlldyA9IG5ldyBjb252ZXJzZS5Db250cm9sQm94Vmlldyh7bW9kZWw6IGl0ZW19KTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IGNvbnZlcnNlLkNoYXRCb3hWaWV3KHttb2RlbDogaXRlbX0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZChpdGVtLmdldCgnaWQnKSwgdmlldyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2aWV3Lm1vZGVsOyAvLyBSZW1vdmUgcmVmIHRvIG9sZCBtb2RlbCB0byBoZWxwIGdhcmJhZ2UgY29sbGVjdGlvbgogICAgICAgICAgICAgICAgICAgIHZpZXcubW9kZWwgPSBpdGVtOwogICAgICAgICAgICAgICAgICAgIHZpZXcuaW5pdGlhbGl6ZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy50cmltQ2hhdHModmlldyk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICB0cmltQ2hhdHM6IGZ1bmN0aW9uIChuZXdjaGF0KSB7CiAgICAgICAgICAgICAgICAvKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiBhIG5ld2x5IGNyZWF0ZWQgY2hhdCBib3ggd2lsbAogICAgICAgICAgICAgICAgICogYmUgc2hvd24uCiAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICogSXQgY2hlY2tzIHdoZXRoZXIgdGhlcmUgaXMgZW5vdWdoIHNwYWNlIG9uIHRoZSBwYWdlIHRvIHNob3cKICAgICAgICAgICAgICAgICAqIGFub3RoZXIgY2hhdCBib3guIE90aGVyd2lzZSBpdCBtaW5pbWl6ZSB0aGUgb2xkZXN0IGNoYXQgYm94CiAgICAgICAgICAgICAgICAgKiB0byBjcmVhdGUgc3BhY2UuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIGlmIChjb252ZXJzZS5ub190cmltbWluZyB8fCAodGhpcy5tb2RlbC5sZW5ndGggPD0gMSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgb2xkZXN0X2NoYXQsCiAgICAgICAgICAgICAgICAgICAgY29udHJvbGJveF93aWR0aCA9IDAsCiAgICAgICAgICAgICAgICAgICAgJG1pbmltaXplZCA9IGNvbnZlcnNlLm1pbmltaXplZF9jaGF0cy4kZWwsCiAgICAgICAgICAgICAgICAgICAgbWluaW1pemVkX3dpZHRoID0gXy5jb250YWlucyh0aGlzLm1vZGVsLnBsdWNrKCdtaW5pbWl6ZWQnKSwgdHJ1ZSkgPyAkbWluaW1pemVkLm91dGVyV2lkdGgodHJ1ZSkgOiAwLAogICAgICAgICAgICAgICAgICAgIGJveGVzX3dpZHRoID0gbmV3Y2hhdCA/IG5ld2NoYXQuJGVsLm91dGVyV2lkdGgodHJ1ZSkgOiAwLAogICAgICAgICAgICAgICAgICAgIG5ld19pZCA9IG5ld2NoYXQgPyBuZXdjaGF0Lm1vZGVsLmdldCgnaWQnKSA6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgY29udHJvbGJveCA9IHRoaXMuZ2V0KCdjb250cm9sYm94Jyk7CgogICAgICAgICAgICAgICAgaWYgKCFjb250cm9sYm94IHx8ICFjb250cm9sYm94LiRlbC5pcygnOnZpc2libGUnKSkgewogICAgICAgICAgICAgICAgICAgIGNvbnRyb2xib3hfd2lkdGggPSBjb252ZXJzZS5jb250cm9sYm94dG9nZ2xlLiRlbC5vdXRlcldpZHRoKHRydWUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb250cm9sYm94X3dpZHRoID0gY29udHJvbGJveC4kZWwub3V0ZXJXaWR0aCh0cnVlKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfLmVhY2godGhpcy5nZXRBbGwoKSwgZnVuY3Rpb24gKHZpZXcpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSB2aWV3Lm1vZGVsLmdldCgnaWQnKTsKICAgICAgICAgICAgICAgICAgICBpZiAoKGlkICE9PSAnY29udHJvbGJveCcpICYmIChpZCAhPT0gbmV3X2lkKSAmJiAoIXZpZXcubW9kZWwuZ2V0KCdtaW5pbWl6ZWQnKSkgJiYgdmlldy4kZWwuaXMoJzp2aXNpYmxlJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYm94ZXNfd2lkdGggKz0gdmlldy4kZWwub3V0ZXJXaWR0aCh0cnVlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAoKG1pbmltaXplZF93aWR0aCArIGJveGVzX3dpZHRoICsgY29udHJvbGJveF93aWR0aCkgPiB0aGlzLiRlbC5vdXRlcldpZHRoKHRydWUpKSB7CiAgICAgICAgICAgICAgICAgICAgb2xkZXN0X2NoYXQgPSB0aGlzLmdldE9sZGVzdE1heGltaXplZENoYXQoKTsKICAgICAgICAgICAgICAgICAgICBpZiAob2xkZXN0X2NoYXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2xkZXN0X2NoYXQubWluaW1pemUoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBnZXRPbGRlc3RNYXhpbWl6ZWRDaGF0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAvLyBHZXQgb2xkZXN0IHZpZXcgKHdoaWNoIGlzIG5vdCBjb250cm9sYm94KQogICAgICAgICAgICAgICAgdmFyIGkgPSAwOwogICAgICAgICAgICAgICAgdmFyIG1vZGVsID0gdGhpcy5tb2RlbC5zb3J0KCkuYXQoaSk7CiAgICAgICAgICAgICAgICB3aGlsZSAobW9kZWwuZ2V0KCdpZCcpID09PSAnY29udHJvbGJveCcgfHwgbW9kZWwuZ2V0KCdtaW5pbWl6ZWQnKSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IHRoaXMubW9kZWwuYXQoaSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RlbCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWw7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBjbG9zZUFsbENoYXRCb3hlczogZnVuY3Rpb24gKGluY2x1ZGVfY29udHJvbGJveCkgewogICAgICAgICAgICAgICAgdmFyIGksIGNoYXRib3g7CiAgICAgICAgICAgICAgICAvLyBUT0RPOiBvbmNlIEJhY2tib25lLk92ZXJ2aWV3IGhhcyBiZWVuIHJlZmFjdG9yZWQsIHdlIHNob3VsZAogICAgICAgICAgICAgICAgLy8gYmUgYWJsZSB0byBjYWxsIC5lYWNoIG9uIHRoZSB2aWV3cyB0aGVtc2VsdmVzLgogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5lYWNoKCQucHJveHkoZnVuY3Rpb24gKG1vZGVsKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gbW9kZWwuZ2V0KCdpZCcpOwogICAgICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlX2NvbnRyb2xib3ggfHwgaWQgIT09ICdjb250cm9sYm94JykgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldChpZCkuY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNob3dDaGF0OiBmdW5jdGlvbiAoYXR0cnMpIHsKICAgICAgICAgICAgICAgIC8qIEZpbmQgdGhlIGNoYXQgYm94IGFuZCBzaG93IGl0LgogICAgICAgICAgICAgICAgICogSWYgaXQgZG9lc24ndCBleGlzdCwgY3JlYXRlIGl0LgogICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICB2YXIgY2hhdGJveCAgPSB0aGlzLm1vZGVsLmdldChhdHRycy5qaWQpOwogICAgICAgICAgICAgICAgaWYgKCFjaGF0Ym94KSB7CiAgICAgICAgICAgICAgICAgICAgY2hhdGJveCA9IHRoaXMubW9kZWwuY3JlYXRlKGF0dHJzLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICdlcnJvcic6IGZ1bmN0aW9uIChtb2RlbCwgcmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmxvZyhyZXNwb25zZS5yZXNwb25zZVRleHQpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY2hhdGJveC5nZXQoJ21pbmltaXplZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgY2hhdGJveC5tYXhpbWl6ZSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjaGF0Ym94LnRyaWdnZXIoJ3Nob3cnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBjaGF0Ym94OwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuTWluaW1pemVkQ2hhdEJveFZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7CiAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLAogICAgICAgICAgICBjbGFzc05hbWU6ICdjaGF0LWhlYWQnLAoKICAgICAgICAgICAgZXZlbnRzOiB7CiAgICAgICAgICAgICAgICAnY2xpY2sgLmNsb3NlLWNoYXRib3gtYnV0dG9uJzogJ2Nsb3NlJywKICAgICAgICAgICAgICAgICdjbGljayAucmVzdG9yZS1jaGF0JzogJ3Jlc3RvcmUnCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm1lc3NhZ2VzLm9uKCdhZGQnLCBmdW5jdGlvbiAobSkgewogICAgICAgICAgICAgICAgICAgIGlmICghKG0uZ2V0KCdjb21wb3NpbmcnKSB8fCBtLmdldCgncGF1c2VkJykpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVW5yZWFkTWVzc2FnZXNDb3VudGVyKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCdjaGFuZ2U6bWluaW1pemVkJywgdGhpcy5jbGVhclVucmVhZE1lc3NhZ2VzQ291bnRlciwgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCdzaG93UmVjZWl2ZWRPVFJNZXNzYWdlJywgdGhpcy51cGRhdGVVbnJlYWRNZXNzYWdlc0NvdW50ZXIsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbignc2hvd1NlbnRPVFJNZXNzYWdlJywgdGhpcy51cGRhdGVVbnJlYWRNZXNzYWdlc0NvdW50ZXIsIHRoaXMpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IF8uZXh0ZW5kKAogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwudG9KU09OKCksCiAgICAgICAgICAgICAgICAgICAgeyAndG9vbHRpcCc6IF9fKCdDbGljayB0byByZXN0b3JlIHRoaXMgY2hhdCcpIH0KICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5tb2RlbC5nZXQoJ2NoYXRyb29tJykpIHsKICAgICAgICAgICAgICAgICAgICBkYXRhLnRpdGxlID0gdGhpcy5tb2RlbC5nZXQoJ25hbWUnKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5hZGRDbGFzcygnY2hhdC1oZWFkLWNoYXRyb29tJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGRhdGEudGl0bGUgPSB0aGlzLm1vZGVsLmdldCgnZnVsbG5hbWUnKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5hZGRDbGFzcygnY2hhdC1oZWFkLWNoYXRib3gnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRlbC5odG1sKGNvbnZlcnNlLnRlbXBsYXRlcy50cmltbWVkX2NoYXQoZGF0YSkpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY2xlYXJVbnJlYWRNZXNzYWdlc0NvdW50ZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KHsnbnVtX3VucmVhZCc6IDB9KTsKICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICB1cGRhdGVVbnJlYWRNZXNzYWdlc0NvdW50ZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KHsnbnVtX3VucmVhZCc6IHRoaXMubW9kZWwuZ2V0KCdudW1fdW5yZWFkJykgKyAxfSk7CiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgaWYgKGV2ICYmIGV2LnByZXZlbnREZWZhdWx0KSB7IGV2LnByZXZlbnREZWZhdWx0KCk7IH0KICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmRlc3Ryb3koKTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmVtaXQoJ2NoYXRCb3hDbG9zZWQnLCB0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVzdG9yZTogXy5kZWJvdW5jZShmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGlmIChldiAmJiBldi5wcmV2ZW50RGVmYXVsdCkgewogICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5tYXhpbWl6ZSgpOwogICAgICAgICAgICB9LCAyMDApCiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuTWluaW1pemVkQ2hhdHMgPSBCYWNrYm9uZS5PdmVydmlldy5leHRlbmQoewogICAgICAgICAgICBlbDogIiNtaW5pbWl6ZWQtY2hhdHMiLAoKICAgICAgICAgICAgZXZlbnRzOiB7CiAgICAgICAgICAgICAgICAiY2xpY2sgI3RvZ2dsZS1taW5pbWl6ZWQtY2hhdHMiOiAidG9nZ2xlIgogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGhpcy5pbml0VG9nZ2xlKCk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCJhZGQiLCB0aGlzLm9uQ2hhbmdlZCwgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCJkZXN0cm95IiwgdGhpcy5yZW1vdmVDaGF0LCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oImNoYW5nZTptaW5pbWl6ZWQiLCB0aGlzLm9uQ2hhbmdlZCwgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCdjaGFuZ2U6bnVtX3VucmVhZCcsIHRoaXMudXBkYXRlVW5yZWFkTWVzc2FnZXNDb3VudGVyLCB0aGlzKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHRlYXJEb3duOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9mZigiYWRkIiwgdGhpcy5vbkNoYW5nZWQpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vZmYoImRlc3Ryb3kiLCB0aGlzLnJlbW92ZUNoYXQpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vZmYoImNoYW5nZTptaW5pbWl6ZWQiLCB0aGlzLm9uQ2hhbmdlZCk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9mZignY2hhbmdlOm51bV91bnJlYWQnLCB0aGlzLnVwZGF0ZVVucmVhZE1lc3NhZ2VzQ291bnRlcik7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluaXRUb2dnbGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xldmlldyA9IG5ldyBjb252ZXJzZS5NaW5pbWl6ZWRDaGF0c1RvZ2dsZVZpZXcoewogICAgICAgICAgICAgICAgICAgIG1vZGVsOiBuZXcgY29udmVyc2UuTWluaW1pemVkQ2hhdHNUb2dnbGUoKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB2YXIgaWQgPSBiNjRfc2hhMSgnY29udmVyc2UubWluY2hhdHN0b2dnbGUnK2NvbnZlcnNlLmJhcmVfamlkKTsKICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xldmlldy5tb2RlbC5pZCA9IGlkOyAvLyBBcHBlYXJzIHRvIGJlIG5lY2Vzc2FyeSBmb3IgYmFja2JvbmUuYnJvd3NlclN0b3JhZ2UKICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xldmlldy5tb2RlbC5icm93c2VyU3RvcmFnZSA9IG5ldyBCYWNrYm9uZS5Ccm93c2VyU3RvcmFnZVtjb252ZXJzZS5zdG9yYWdlXShpZCk7CiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXZpZXcubW9kZWwuZmV0Y2goKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMua2V5cygpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmhpZGUoJ2Zhc3QnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5rZXlzKCkubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuc2hvdygnZmFzdCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGVsOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGlmIChldiAmJiBldi5wcmV2ZW50RGVmYXVsdCkgeyBldi5wcmV2ZW50RGVmYXVsdCgpOyB9CiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXZpZXcubW9kZWwuc2F2ZSh7J2NvbGxhcHNlZCc6ICF0aGlzLnRvZ2dsZXZpZXcubW9kZWwuZ2V0KCdjb2xsYXBzZWQnKX0pOwogICAgICAgICAgICAgICAgdGhpcy4kKCcubWluaW1pemVkLWNoYXRzLWZseW91dCcpLnRvZ2dsZSgpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25DaGFuZ2VkOiBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgaWYgKGl0ZW0uZ2V0KCdpZCcpICE9PSAnY29udHJvbGJveCcgJiYgaXRlbS5nZXQoJ21pbmltaXplZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDaGF0KGl0ZW0pOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdldChpdGVtLmdldCgnaWQnKSkpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNoYXQoaXRlbSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhZGRDaGF0OiBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gdGhpcy5nZXQoaXRlbS5nZXQoJ2lkJykpOwogICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nICYmIGV4aXN0aW5nLiRlbC5wYXJlbnQoKS5sZW5ndGggIT09IDApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBjb252ZXJzZS5NaW5pbWl6ZWRDaGF0Qm94Vmlldyh7bW9kZWw6IGl0ZW19KTsKICAgICAgICAgICAgICAgIHRoaXMuJCgnLm1pbmltaXplZC1jaGF0cy1mbHlvdXQnKS5hcHBlbmQodmlldy5yZW5kZXIoKSk7CiAgICAgICAgICAgICAgICB0aGlzLmFkZChpdGVtLmdldCgnaWQnKSwgdmlldyk7CiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXZpZXcubW9kZWwuc2V0KHsnbnVtX21pbmltaXplZCc6IHRoaXMua2V5cygpLmxlbmd0aH0pOwogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHJlbW92ZUNoYXQ6IGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShpdGVtLmdldCgnaWQnKSk7CiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXZpZXcubW9kZWwuc2V0KHsnbnVtX21pbmltaXplZCc6IHRoaXMua2V5cygpLmxlbmd0aH0pOwogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHVwZGF0ZVVucmVhZE1lc3NhZ2VzQ291bnRlcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGxzID0gdGhpcy5tb2RlbC5wbHVjaygnbnVtX3VucmVhZCcpLAogICAgICAgICAgICAgICAgICAgIGNvdW50ID0gMCwgaTsKICAgICAgICAgICAgICAgIGZvciAoaT0wOyBpPGxzLmxlbmd0aDsgaSsrKSB7IGNvdW50ICs9IGxzW2ldOyB9CiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXZpZXcubW9kZWwuc2V0KHsnbnVtX3VucmVhZCc6IGNvdW50fSk7CiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuTWluaW1pemVkQ2hhdHNUb2dnbGUgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoewogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNldCh7CiAgICAgICAgICAgICAgICAgICAgJ2NvbGxhcHNlZCc6IHRoaXMuZ2V0KCdjb2xsYXBzZWQnKSB8fCBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAnbnVtX21pbmltaXplZCc6IHRoaXMuZ2V0KCdudW1fbWluaW1pemVkJykgfHwgMCwKICAgICAgICAgICAgICAgICAgICAnbnVtX3VucmVhZCc6ICB0aGlzLmdldCgnbnVtX3VucmVhZCcpIHx8IDAKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuTWluaW1pemVkQ2hhdHNUb2dnbGVWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoewogICAgICAgICAgICBlbDogJyN0b2dnbGUtbWluaW1pemVkLWNoYXRzJywKCiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oJ2NoYW5nZTpudW1fbWluaW1pemVkJywgdGhpcy5yZW5kZXIsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbignY2hhbmdlOm51bV91bnJlYWQnLCB0aGlzLnJlbmRlciwgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLiRmbHlvdXQgPSB0aGlzLiRlbC5zaWJsaW5ncygnLm1pbmltaXplZC1jaGF0cy1mbHlvdXQnKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGhpcy4kZWwuaHRtbChjb252ZXJzZS50ZW1wbGF0ZXMudG9nZ2xlX2NoYXRzKAogICAgICAgICAgICAgICAgICAgIF8uZXh0ZW5kKHRoaXMubW9kZWwudG9KU09OKCksIHsKICAgICAgICAgICAgICAgICAgICAgICAgJ01pbmltaXplZCc6IF9fKCdNaW5pbWl6ZWQnKQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICApKTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLmdldCgnY29sbGFwc2VkJykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRmbHlvdXQuaGlkZSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRmbHlvdXQuc2hvdygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGVsOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuUm9zdGVyQ29udGFjdCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7CiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgICB2YXIgamlkID0gYXR0cmlidXRlcy5qaWQ7CiAgICAgICAgICAgICAgICB2YXIgYXR0cnMgPSBfLmV4dGVuZCh7CiAgICAgICAgICAgICAgICAgICAgJ2lkJzogamlkLAogICAgICAgICAgICAgICAgICAgICdmdWxsbmFtZSc6IGppZCwKICAgICAgICAgICAgICAgICAgICAnY2hhdF9zdGF0dXMnOiAnb2ZmbGluZScsCiAgICAgICAgICAgICAgICAgICAgJ3VzZXJfaWQnOiBTdHJvcGhlLmdldE5vZGVGcm9tSmlkKGppZCksCiAgICAgICAgICAgICAgICAgICAgJ3Jlc291cmNlcyc6IFtdLAogICAgICAgICAgICAgICAgICAgICdncm91cHMnOiBbXSwKICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJzogJycKICAgICAgICAgICAgICAgIH0sIGF0dHJpYnV0ZXMpOwogICAgICAgICAgICAgICAgdGhpcy5zZXQoYXR0cnMpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2hvd0luUm9zdGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKCFjb252ZXJzZS5zaG93X29ubHlfb25saW5lX3VzZXJzIHx8IHRoaXMuZ2V0KCdjaGF0X3N0YXR1cycpID09PSAnb25saW5lJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5Sb3N0ZXJDb250YWN0VmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHsKICAgICAgICAgICAgdGFnTmFtZTogJ2RkJywKCiAgICAgICAgICAgIGV2ZW50czogewogICAgICAgICAgICAgICAgImNsaWNrIC5hY2NlcHQteG1wcC1yZXF1ZXN0IjogImFjY2VwdFJlcXVlc3QiLAogICAgICAgICAgICAgICAgImNsaWNrIC5kZWNsaW5lLXhtcHAtcmVxdWVzdCI6ICJkZWNsaW5lUmVxdWVzdCIsCiAgICAgICAgICAgICAgICAiY2xpY2sgLm9wZW4tY2hhdCI6ICJvcGVuQ2hhdCIsCiAgICAgICAgICAgICAgICAiY2xpY2sgLnJlbW92ZS14bXBwLWNvbnRhY3QiOiAicmVtb3ZlQ29udGFjdCIKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oImNoYW5nZSIsIHRoaXMucmVuZGVyLCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oInJlbW92ZSIsIHRoaXMucmVtb3ZlLCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oImRlc3Ryb3kiLCB0aGlzLnJlbW92ZSwgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCJvcGVuIiwgdGhpcy5vcGVuQ2hhdCwgdGhpcyk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvcGVuQ2hhdDogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBpZiAoZXYgJiYgZXYucHJldmVudERlZmF1bHQpIHsgZXYucHJldmVudERlZmF1bHQoKTsgfQogICAgICAgICAgICAgICAgLy8gWFhYOiBDYW4gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzIGJlIHVzZWQgaGVyZSwgaW5zdGVhZCBvZgogICAgICAgICAgICAgICAgLy8gbWFudWFsbHkgc3BlY2lmeWluZyBhbGwgYXR0cmlidXRlcz8KICAgICAgICAgICAgICAgIHJldHVybiBjb252ZXJzZS5jaGF0Ym94dmlld3Muc2hvd0NoYXQoewogICAgICAgICAgICAgICAgICAgICdpZCc6IHRoaXMubW9kZWwuZ2V0KCdqaWQnKSwKICAgICAgICAgICAgICAgICAgICAnamlkJzogdGhpcy5tb2RlbC5nZXQoJ2ppZCcpLAogICAgICAgICAgICAgICAgICAgICdmdWxsbmFtZSc6IHRoaXMubW9kZWwuZ2V0KCdmdWxsbmFtZScpLAogICAgICAgICAgICAgICAgICAgICdpbWFnZV90eXBlJzogdGhpcy5tb2RlbC5nZXQoJ2ltYWdlX3R5cGUnKSwKICAgICAgICAgICAgICAgICAgICAnaW1hZ2UnOiB0aGlzLm1vZGVsLmdldCgnaW1hZ2UnKSwKICAgICAgICAgICAgICAgICAgICAndXJsJzogdGhpcy5tb2RlbC5nZXQoJ3VybCcpLAogICAgICAgICAgICAgICAgICAgICdzdGF0dXMnOiB0aGlzLm1vZGVsLmdldCgnc3RhdHVzJykKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVtb3ZlQ29udGFjdDogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBpZiAoZXYgJiYgZXYucHJldmVudERlZmF1bHQpIHsgZXYucHJldmVudERlZmF1bHQoKTsgfQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNvbmZpcm0oX18oIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZW1vdmUgdGhpcyBjb250YWN0PyIpKTsKICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYmFyZV9qaWQgPSB0aGlzLm1vZGVsLmdldCgnamlkJyk7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5yb3N0ZXIucmVtb3ZlKGJhcmVfamlkLCAkLnByb3h5KGZ1bmN0aW9uIChpcSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLnJvc3Rlci51bmF1dGhvcml6ZShiYXJlX2ppZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLnJvc3RlcnZpZXcubW9kZWwucmVtb3ZlKGJhcmVfamlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5kZXN0cm95KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgYWNjZXB0UmVxdWVzdDogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBpZiAoZXYgJiYgZXYucHJldmVudERlZmF1bHQpIHsgZXYucHJldmVudERlZmF1bHQoKTsgfQogICAgICAgICAgICAgICAgdmFyIGppZCA9IHRoaXMubW9kZWwuZ2V0KCdqaWQnKTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ucm9zdGVyLmF1dGhvcml6ZShqaWQpOwogICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5yb3N0ZXIuYWRkKGppZCwgdGhpcy5tb2RlbC5nZXQoJ2Z1bGxuYW1lJyksIFtdLCBmdW5jdGlvbiAoaXEpIHsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLnJvc3Rlci5zdWJzY3JpYmUoamlkLCBudWxsLCBjb252ZXJzZS54bXBwc3RhdHVzLmdldCgnZnVsbG5hbWUnKSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGRlY2xpbmVSZXF1ZXN0OiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGlmIChldiAmJiBldi5wcmV2ZW50RGVmYXVsdCkgeyBldi5wcmV2ZW50RGVmYXVsdCgpOyB9CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gY29uZmlybShfXygiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlY2xpbmUgdGhpcyBjb250YWN0IHJlcXVlc3Q/IikpOwogICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ucm9zdGVyLnVuYXV0aG9yaXplKHRoaXMubW9kZWwuZ2V0KCdqaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5kZXN0cm95KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVsLnNob3dJblJvc3RlcigpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLiRlbFswXS5zdHlsZS5kaXNwbGF5ID09PSAibm9uZSIpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5zaG93KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMubW9kZWwsCiAgICAgICAgICAgICAgICAgICAgYXNrID0gaXRlbS5nZXQoJ2FzaycpLAogICAgICAgICAgICAgICAgICAgIGNoYXRfc3RhdHVzID0gaXRlbS5nZXQoJ2NoYXRfc3RhdHVzJyksCiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGluZyAgPSBpdGVtLmdldCgncmVxdWVzdGluZycpLAogICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IGl0ZW0uZ2V0KCdzdWJzY3JpcHRpb24nKTsKCiAgICAgICAgICAgICAgICB2YXIgY2xhc3Nlc190b19yZW1vdmUgPSBbCiAgICAgICAgICAgICAgICAgICAgJ2N1cnJlbnQteG1wcC1jb250YWN0JywKICAgICAgICAgICAgICAgICAgICAncGVuZGluZy14bXBwLWNvbnRhY3QnLAogICAgICAgICAgICAgICAgICAgICdyZXF1ZXN0aW5nLXhtcHAtY29udGFjdCcKICAgICAgICAgICAgICAgICAgICBdLmNvbmNhdChfLmtleXMoU1RBVFVTRVMpKTsKCiAgICAgICAgICAgICAgICBfLmVhY2goY2xhc3Nlc190b19yZW1vdmUsCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGNscykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbC5jbGFzc05hbWUuaW5kZXhPZihjbHMpICE9PSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwucmVtb3ZlQ2xhc3MoY2xzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoY2hhdF9zdGF0dXMpLmRhdGEoJ3N0YXR1cycsIGNoYXRfc3RhdHVzKTsKCiAgICAgICAgICAgICAgICBpZiAoKGFzayA9PT0gJ3N1YnNjcmliZScpIHx8IChzdWJzY3JpcHRpb24gPT09ICdmcm9tJykpIHsKICAgICAgICAgICAgICAgICAgICAvKiBhc2sgPT09ICdzdWJzY3JpYmUnCiAgICAgICAgICAgICAgICAgICAgICogICAgICBNZWFucyB3ZSBoYXZlIGFza2VkIHRvIHN1YnNjcmliZSB0byB0aGVtLgogICAgICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgICAgICogc3Vic2NyaXB0aW9uID09PSAnZnJvbScKICAgICAgICAgICAgICAgICAgICAgKiAgICAgIFRoZXkgYXJlIHN1YnNjcmliZWQgdG8gdXNlLCBidXQgbm90IHZpY2UgdmVyc2EuCiAgICAgICAgICAgICAgICAgICAgICogICAgICBXZSBhc3N1bWUgdGhhdCB0aGVyZSBpcyBhIHBlbmRpbmcgc3Vic2NyaXB0aW9uCiAgICAgICAgICAgICAgICAgICAgICogICAgICBmcm9tIHVzIHRvIHRoZW0gKG90aGVyd2lzZSB3ZSdyZSBpbiBhIHN0YXRlIG5vdAogICAgICAgICAgICAgICAgICAgICAqICAgICAgc3VwcG9ydGVkIGJ5IGNvbnZlcnNlLmpzKS4KICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAqICBTbyBpbiBib3RoIGNhc2VzIHRoZSB1c2VyIGlzIGEgInBlbmRpbmciIGNvbnRhY3QuCiAgICAgICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoJ3BlbmRpbmcteG1wcC1jb250YWN0Jyk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuaHRtbChjb252ZXJzZS50ZW1wbGF0ZXMucGVuZGluZ19jb250YWN0KAogICAgICAgICAgICAgICAgICAgICAgICBfLmV4dGVuZChpdGVtLnRvSlNPTigpLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGVzY19yZW1vdmUnOiBfXygnQ2xpY2sgdG8gcmVtb3ZlIHRoaXMgY29udGFjdCcpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcXVlc3RpbmcgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5hZGRDbGFzcygncmVxdWVzdGluZy14bXBwLWNvbnRhY3QnKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5odG1sKGNvbnZlcnNlLnRlbXBsYXRlcy5yZXF1ZXN0aW5nX2NvbnRhY3QoCiAgICAgICAgICAgICAgICAgICAgICAgIF8uZXh0ZW5kKGl0ZW0udG9KU09OKCksIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjX2FjY2VwdCc6IF9fKCJDbGljayB0byBhY2NlcHQgdGhpcyBjb250YWN0IHJlcXVlc3QiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjX2RlY2xpbmUnOiBfXygiQ2xpY2sgdG8gZGVjbGluZSB0aGlzIGNvbnRhY3QgcmVxdWVzdCIpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgKSk7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuY29udHJvbGJveHRvZ2dsZS5zaG93Q29udHJvbEJveCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdWJzY3JpcHRpb24gPT09ICdib3RoJyB8fCBzdWJzY3JpcHRpb24gPT09ICd0bycpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5hZGRDbGFzcygnY3VycmVudC14bXBwLWNvbnRhY3QnKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5odG1sKGNvbnZlcnNlLnRlbXBsYXRlcy5yb3N0ZXJfaXRlbSgKICAgICAgICAgICAgICAgICAgICAgICAgXy5leHRlbmQoaXRlbS50b0pTT04oKSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rlc2Nfc3RhdHVzJzogU1RBVFVTRVNbY2hhdF9zdGF0dXN8fCdvZmZsaW5lJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGVzY19jaGF0JzogX18oJ0NsaWNrIHRvIGNoYXQgd2l0aCB0aGlzIGNvbnRhY3QnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjX3JlbW92ZSc6IF9fKCdDbGljayB0byByZW1vdmUgdGhpcyBjb250YWN0JykKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICApKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuUm9zdGVyQ29udGFjdHMgPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7CiAgICAgICAgICAgIG1vZGVsOiBjb252ZXJzZS5Sb3N0ZXJDb250YWN0LAogICAgICAgICAgICBjb21wYXJhdG9yOiBmdW5jdGlvbiAoY29udGFjdDEsIGNvbnRhY3QyKSB7CiAgICAgICAgICAgICAgICB2YXIgbmFtZTEsIG5hbWUyOwogICAgICAgICAgICAgICAgdmFyIHN0YXR1czEgPSBjb250YWN0MS5nZXQoJ2NoYXRfc3RhdHVzJykgfHwgJ29mZmxpbmUnOwogICAgICAgICAgICAgICAgdmFyIHN0YXR1czIgPSBjb250YWN0Mi5nZXQoJ2NoYXRfc3RhdHVzJykgfHwgJ29mZmxpbmUnOwogICAgICAgICAgICAgICAgaWYgKFNUQVRVU19XRUlHSFRTW3N0YXR1czFdID09PSBTVEFUVVNfV0VJR0hUU1tzdGF0dXMyXSkgewogICAgICAgICAgICAgICAgICAgIG5hbWUxID0gY29udGFjdDEuZ2V0KCdmdWxsbmFtZScpLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgbmFtZTIgPSBjb250YWN0Mi5nZXQoJ2Z1bGxuYW1lJykudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTEgPCBuYW1lMiA/IC0xIDogKG5hbWUxID4gbmFtZTI/IDEgOiAwKTsKICAgICAgICAgICAgICAgIH0gZWxzZSAgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBTVEFUVVNfV0VJR0hUU1tzdGF0dXMxXSA8IFNUQVRVU19XRUlHSFRTW3N0YXR1czJdID8gLTEgOiAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc3Vic2NyaWJlVG9TdWdnZXN0ZWRJdGVtczogZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgICAgJChtc2cpLmZpbmQoJ2l0ZW0nKS5lYWNoKGZ1bmN0aW9uIChpLCBpdGVtcykgewogICAgICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksCiAgICAgICAgICAgICAgICAgICAgICAgIGppZCA9ICR0aGlzLmF0dHIoJ2ppZCcpLAogICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAkdGhpcy5hdHRyKCdhY3Rpb24nKSwKICAgICAgICAgICAgICAgICAgICAgICAgZnVsbG5hbWUgPSAkdGhpcy5hdHRyKCduYW1lJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ2FkZCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5yb3N0ZXIuc3Vic2NyaWJlKGppZCwgbnVsbCwgY29udmVyc2UueG1wcHN0YXR1cy5nZXQoJ2Z1bGxuYW1lJykpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpc1NlbGY6IGZ1bmN0aW9uIChqaWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAoU3Ryb3BoZS5nZXRCYXJlSmlkRnJvbUppZChqaWQpID09PSBTdHJvcGhlLmdldEJhcmVKaWRGcm9tSmlkKGNvbnZlcnNlLmNvbm5lY3Rpb24uamlkKSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhZGRSZXNvdXJjZTogZnVuY3Rpb24gKGJhcmVfamlkLCByZXNvdXJjZSkgewogICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLmdldChiYXJlX2ppZCksCiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzOwogICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMgPSBpdGVtLmdldCgncmVzb3VyY2VzJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc291cmNlcykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5pbmRleE9mKHJlc291cmNlcywgcmVzb3VyY2UpID09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMucHVzaChyZXNvdXJjZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNldCh7J3Jlc291cmNlcyc6IHJlc291cmNlc30pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc2V0KHsncmVzb3VyY2VzJzogW3Jlc291cmNlXX0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHJlbW92ZVJlc291cmNlOiBmdW5jdGlvbiAoYmFyZV9qaWQsIHJlc291cmNlKSB7CiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuZ2V0KGJhcmVfamlkKSwKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMsCiAgICAgICAgICAgICAgICAgICAgaWR4OwogICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMgPSBpdGVtLmdldCgncmVzb3VyY2VzJyk7CiAgICAgICAgICAgICAgICAgICAgaWR4ID0gXy5pbmRleE9mKHJlc291cmNlcywgcmVzb3VyY2UpOwogICAgICAgICAgICAgICAgICAgIGlmIChpZHggIT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlcy5zcGxpY2UoaWR4LCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXQoeydyZXNvdXJjZXMnOiByZXNvdXJjZXN9KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlcy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzdWJzY3JpYmVCYWNrOiBmdW5jdGlvbiAoamlkKSB7CiAgICAgICAgICAgICAgICB2YXIgYmFyZV9qaWQgPSBTdHJvcGhlLmdldEJhcmVKaWRGcm9tSmlkKGppZCk7CiAgICAgICAgICAgICAgICBpZiAoY29udmVyc2UuY29ubmVjdGlvbi5yb3N0ZXIuZmluZEl0ZW0oYmFyZV9qaWQpKSB7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5yb3N0ZXIuYXV0aG9yaXplKGJhcmVfamlkKTsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLnJvc3Rlci5zdWJzY3JpYmUoamlkLCBudWxsLCBjb252ZXJzZS54bXBwc3RhdHVzLmdldCgnZnVsbG5hbWUnKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ucm9zdGVyLmFkZChqaWQsICcnLCBbXSwgZnVuY3Rpb24gKGlxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ucm9zdGVyLmF1dGhvcml6ZShiYXJlX2ppZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ucm9zdGVyLnN1YnNjcmliZShqaWQsIG51bGwsIGNvbnZlcnNlLnhtcHBzdGF0dXMuZ2V0KCdmdWxsbmFtZScpKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoamlkKSB7CiAgICAgICAgICAgICAgICAvKiBVcG9uIHJlY2VpdmluZyB0aGUgcHJlc2VuY2Ugc3RhbnphIG9mIHR5cGUgInVuc3Vic2NyaWJlZCIsCiAgICAgICAgICAgICAgICAqIHRoZSB1c2VyIFNIT1VMRCBhY2tub3dsZWRnZSByZWNlaXB0IG9mIHRoYXQgc3Vic2NyaXB0aW9uIHN0YXRlCiAgICAgICAgICAgICAgICAqIG5vdGlmaWNhdGlvbiBieSBzZW5kaW5nIGEgcHJlc2VuY2Ugc3RhbnphIG9mIHR5cGUgInVuc3Vic2NyaWJlIgogICAgICAgICAgICAgICAgKiB0aGlzIHN0ZXAgbGV0cyB0aGUgdXNlcidzIHNlcnZlciBrbm93IHRoYXQgaXQgTVVTVCBubyBsb25nZXIKICAgICAgICAgICAgICAgICogc2VuZCBub3RpZmljYXRpb24gb2YgdGhlIHN1YnNjcmlwdGlvbiBzdGF0ZSBjaGFuZ2UgdG8gdGhlIHVzZXIuCiAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgY29udmVyc2UueG1wcHN0YXR1cy5zZW5kUHJlc2VuY2UoJ3Vuc3Vic2NyaWJlJyk7CiAgICAgICAgICAgICAgICBpZiAoY29udmVyc2UuY29ubmVjdGlvbi5yb3N0ZXIuZmluZEl0ZW0oamlkKSkgewogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ucm9zdGVyLnJlbW92ZShqaWQsIGZ1bmN0aW9uIChpcSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5yb3N0ZXJ2aWV3Lm1vZGVsLnJlbW92ZShqaWQpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgZ2V0TnVtT25saW5lQ29udGFjdHM6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IDAsCiAgICAgICAgICAgICAgICAgICAgaWdub3JlZCA9IFsnb2ZmbGluZScsICd1bmF2YWlsYWJsZSddLAogICAgICAgICAgICAgICAgICAgIG1vZGVscyA9IHRoaXMubW9kZWxzLAogICAgICAgICAgICAgICAgICAgIG1vZGVsc19sZW5ndGggPSBtb2RlbHMubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgIGk7CiAgICAgICAgICAgICAgICBpZiAoY29udmVyc2Uuc2hvd19vbmx5X29ubGluZV91c2VycykgewogICAgICAgICAgICAgICAgICAgIGlnbm9yZWQgPSBfLnVuaW9uKGlnbm9yZWQsIFsnZG5kJywgJ3hhJywgJ2F3YXknXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKGk9MDsgaTxtb2RlbHNfbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoXy5pbmRleE9mKGlnbm9yZWQsIG1vZGVsc1tpXS5nZXQoJ2NoYXRfc3RhdHVzJykpID09PSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBjb3VudDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNsZWFyQ2FjaGU6IGZ1bmN0aW9uIChpdGVtcykgewogICAgICAgICAgICAgICAgLyogVGhlIGxvY2Fsc3RvcmFnZSBjYWNoZSBjb250YWluaW5nIHJvc3RlciBjb250YWN0cyBtaWdodCBjb250YWluCiAgICAgICAgICAgICAgICAqIHNvbWUgY29udGFjdHMgdGhhdCBhcmVuJ3QgYWN0dWFsbHkgaW4gb3VyIHJvc3RlciBhbnltb3JlLiBXZQogICAgICAgICAgICAgICAgKiB0aGVyZWZvcmUgbmVlZCB0byByZW1vdmUgdGhlbSBub3cuCiAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgdmFyIGlkLCBpLCBjb250YWN0OwogICAgICAgICAgICAgICAgZm9yIChpPTA7IGkgPCB0aGlzLm1vZGVscy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgICAgIGlkID0gdGhpcy5tb2RlbHNbaV0uZ2V0KCdpZCcpOwogICAgICAgICAgICAgICAgICAgIGlmIChfLmluZGV4T2YoXy5wbHVjayhpdGVtcywgJ2ppZCcpLCBpZCkgPT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhY3QgPSB0aGlzLmdldChpZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250YWN0ICYmICFjb250YWN0LmdldCgncmVxdWVzdGluZycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWN0LmRlc3Ryb3koKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIFRPRE86IHNlZSBpZiB3ZSBjYW4gb25seSB1c2UgMm5kIGl0ZW0gcGFyCiAgICAgICAgICAgIHJvc3RlckhhbmRsZXI6IGZ1bmN0aW9uIChpdGVtcywgaXRlbSkgewogICAgICAgICAgICAgICAgY29udmVyc2UuZW1pdCgncm9zdGVyJywgaXRlbXMpOwogICAgICAgICAgICAgICAgdGhpcy5jbGVhckNhY2hlKGl0ZW1zKTsKICAgICAgICAgICAgICAgIHZhciBuZXdfaXRlbXMgPSBpdGVtID8gW2l0ZW1dIDogaXRlbXM7CiAgICAgICAgICAgICAgICBfLmVhY2gobmV3X2l0ZW1zLCBmdW5jdGlvbiAoaXRlbSwgaW5kZXgsIGl0ZW1zKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTZWxmKGl0ZW0uamlkKSkgeyByZXR1cm47IH0KICAgICAgICAgICAgICAgICAgICB2YXIgbW9kZWwgPSB0aGlzLmdldChpdGVtLmppZCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RlbCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNfbGFzdCA9IChpbmRleCA9PT0gKGl0ZW1zLmxlbmd0aC0xKSkgPyB0cnVlIDogZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaXRlbS5zdWJzY3JpcHRpb24gPT09ICdub25lJykgJiYgKGl0ZW0uYXNrID09PSBudWxsKSAmJiAhaXNfbGFzdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UncmUgbm90IGludGVyZXN0ZWQgaW4gem9tYmllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKEhhY2s6IGV4Y2VwdCBpZiBpdCdzIHRoZSBsYXN0IGl0ZW0sIHRoZW4gd2Ugc3RpbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBpdCBzbyB0aGF0IHRoZSByb3N0ZXIgd2lsbCBiZSBzaG93bikuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNrOiBpdGVtLmFzaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxuYW1lOiBpdGVtLm5hbWUgfHwgaXRlbS5qaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cHM6IGl0ZW0uZ3JvdXBzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgamlkOiBpdGVtLmppZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogaXRlbS5zdWJzY3JpcHRpb24KICAgICAgICAgICAgICAgICAgICAgICAgfSwge3NvcnQ6IGZhbHNlfSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpdGVtLnN1YnNjcmlwdGlvbiA9PT0gJ25vbmUnKSAmJiAoaXRlbS5hc2sgPT09IG51bGwpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHVzZXIgaXMgbm8gbG9uZ2VyIGluIG91ciByb3N0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmRlc3Ryb3koKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgZmluZCBvdXQgYWJvdXQgcmVxdWVzdGluZyBjb250YWN0cyB2aWEgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVzZW5jZSBoYW5kbGVyLCBzbyBpZiB3ZSByZWNlaXZlIGEgY29udGFjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGVyZSwgd2Uga25vdyB0aGV5IGFyZW4ndCByZXF1ZXN0aW5nIGFueW1vcmUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWUgZG9jcy9ERVZFTE9QRVIucnN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zYXZlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb246IGl0ZW0uc3Vic2NyaXB0aW9uLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzazogaXRlbS5hc2ssCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGluZzogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cHM6IGl0ZW0uZ3JvdXBzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIHRoaXMpOwoKICAgICAgICAgICAgICAgIGlmICghY29udmVyc2UuaW5pdGlhbF9wcmVzZW5jZV9zZW50KSB7CiAgICAgICAgICAgICAgICAgICAgLyogT25jZSB3ZSd2ZSBzZW50IG91dCBvdXIgaW5pdGlhbCBwcmVzZW5jZSBzdGFuemEsIHdlJ2xsCiAgICAgICAgICAgICAgICAgICAgICogc3RhcnQgcmVjZWl2aW5nIHByZXNlbmNlIHN0YW56YXMgZnJvbSBvdXIgY29udGFjdHMuCiAgICAgICAgICAgICAgICAgICAgICogV2UgdGhlcmVmb3JlIG9ubHkgd2FudCB0byBkbyB0aGlzIGFmdGVyIG91ciByb3N0ZXIgaGFzCiAgICAgICAgICAgICAgICAgICAgICogYmVlbiBzZXQgdXAgKG90aGVyd2lzZSB3ZSBjYW4ndCBtZWFuaW5nZnVsbHkgcHJvY2VzcwogICAgICAgICAgICAgICAgICAgICAqIGluY29taW5nIHByZXNlbmNlIHN0YW56YXMpLgogICAgICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmluaXRpYWxfcHJlc2VuY2Vfc2VudCA9IDE7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UueG1wcHN0YXR1cy5zZW5kUHJlc2VuY2UoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGhhbmRsZUluY29taW5nU3Vic2NyaXB0aW9uOiBmdW5jdGlvbiAoamlkKSB7CiAgICAgICAgICAgICAgICB2YXIgYmFyZV9qaWQgPSBTdHJvcGhlLmdldEJhcmVKaWRGcm9tSmlkKGppZCk7CiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuZ2V0KGJhcmVfamlkKTsKCiAgICAgICAgICAgICAgICBpZiAoIWNvbnZlcnNlLmFsbG93X2NvbnRhY3RfcmVxdWVzdHMpIHsKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLnJvc3Rlci51bmF1dGhvcml6ZShiYXJlX2ppZCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY29udmVyc2UuYXV0b19zdWJzY3JpYmUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoKCFpdGVtKSB8fCAoaXRlbS5nZXQoJ3N1YnNjcmlwdGlvbicpICE9ICd0bycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlQmFjayhqaWQpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24ucm9zdGVyLmF1dGhvcml6ZShiYXJlX2ppZCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoKGl0ZW0pICYmIChpdGVtLmdldCgnc3Vic2NyaXB0aW9uJykgIT0gJ25vbmUnKSkgIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5yb3N0ZXIuYXV0aG9yaXplKGJhcmVfamlkKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2V0KGJhcmVfamlkKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuZ2V0VkNhcmQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFyZV9qaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5wcm94eShmdW5jdGlvbiAoamlkLCBmdWxsbmFtZSwgaW1nLCBpbWdfdHlwZSwgdXJsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGppZDogYmFyZV9qaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb246ICdub25lJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzazogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Rpbmc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsbmFtZTogZnVsbG5hbWUgfHwgamlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IGltZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlX3R5cGU6IGltZ190eXBlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Y2FyZF91cGRhdGVkOiBtb21lbnQoKS5mb3JtYXQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnByb3h5KGZ1bmN0aW9uIChqaWQsIGlxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmxvZygiRXJyb3Igd2hpbGUgcmV0cmlldmluZyB2Y2FyZCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqaWQ6IGJhcmVfamlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uOiAnbm9uZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc2s6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0aW5nOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbG5hbWU6IGJhcmVfamlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmNhcmRfdXBkYXRlZDogbW9tZW50KCkuZm9ybWF0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcHJlc2VuY2VIYW5kbGVyOiBmdW5jdGlvbiAocHJlc2VuY2UpIHsKICAgICAgICAgICAgICAgIHZhciAkcHJlc2VuY2UgPSAkKHByZXNlbmNlKSwKICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZV90eXBlID0gJHByZXNlbmNlLmF0dHIoJ3R5cGUnKTsKICAgICAgICAgICAgICAgIGlmIChwcmVzZW5jZV90eXBlID09PSAnZXJyb3InKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgamlkID0gJHByZXNlbmNlLmF0dHIoJ2Zyb20nKSwKICAgICAgICAgICAgICAgICAgICBiYXJlX2ppZCA9IFN0cm9waGUuZ2V0QmFyZUppZEZyb21KaWQoamlkKSwKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZSA9IFN0cm9waGUuZ2V0UmVzb3VyY2VGcm9tSmlkKGppZCksCiAgICAgICAgICAgICAgICAgICAgJHNob3cgPSAkcHJlc2VuY2UuZmluZCgnc2hvdycpLAogICAgICAgICAgICAgICAgICAgIGNoYXRfc3RhdHVzID0gJHNob3cudGV4dCgpIHx8ICdvbmxpbmUnLAogICAgICAgICAgICAgICAgICAgIHN0YXR1c19tZXNzYWdlID0gJHByZXNlbmNlLmZpbmQoJ3N0YXR1cycpLAogICAgICAgICAgICAgICAgICAgIGNvbnRhY3Q7CgogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTZWxmKGJhcmVfamlkKSkgewogICAgICAgICAgICAgICAgICAgIGlmICgoY29udmVyc2UuY29ubmVjdGlvbi5qaWQgIT09IGppZCkmJihwcmVzZW5jZV90eXBlICE9PSAndW5hdmFpbGFibGUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBBbm90aGVyIHJlc291cmNlIGhhcyBjaGFuZ2VkIGl0J3Mgc3RhdHVzLCB3ZSdsbCB1cGRhdGUgb3VycyBhcyB3ZWxsLgogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS54bXBwc3RhdHVzLnNhdmUoeydzdGF0dXMnOiBjaGF0X3N0YXR1c30pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKCRwcmVzZW5jZS5maW5kKCd4JykuYXR0cigneG1sbnMnKSB8fCAnJykuaW5kZXhPZihTdHJvcGhlLk5TLk1VQykgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gSWdub3JlIE1VQwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udGFjdCA9IHRoaXMuZ2V0KGJhcmVfamlkKTsKICAgICAgICAgICAgICAgIGlmIChjb250YWN0ICYmIChzdGF0dXNfbWVzc2FnZS50ZXh0KCkgIT0gY29udGFjdC5nZXQoJ3N0YXR1cycpKSkgewogICAgICAgICAgICAgICAgICAgIGNvbnRhY3Quc2F2ZSh7J3N0YXR1cyc6IHN0YXR1c19tZXNzYWdlLnRleHQoKX0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKChwcmVzZW5jZV90eXBlID09PSAnc3Vic2NyaWJlZCcpIHx8IChwcmVzZW5jZV90eXBlID09PSAndW5zdWJzY3JpYmUnKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmVzZW5jZV90eXBlID09PSAnc3Vic2NyaWJlJykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUluY29taW5nU3Vic2NyaXB0aW9uKGppZCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByZXNlbmNlX3R5cGUgPT09ICd1bnN1YnNjcmliZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZShiYXJlX2ppZCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByZXNlbmNlX3R5cGUgPT09ICd1bmF2YWlsYWJsZScpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW1vdmVSZXNvdXJjZShiYXJlX2ppZCwgcmVzb3VyY2UpID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250YWN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWN0LnNhdmUoeydjaGF0X3N0YXR1cyc6ICdvZmZsaW5lJ30pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb250YWN0KSB7CiAgICAgICAgICAgICAgICAgICAgLy8gcHJlc2VuY2VfdHlwZSBpcyB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFJlc291cmNlKGJhcmVfamlkLCByZXNvdXJjZSk7CiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5zYXZlKHsnY2hhdF9zdGF0dXMnOiBjaGF0X3N0YXR1c30pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5Sb3N0ZXJHcm91cCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7CiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNldChfLmV4dGVuZCh7CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IERFU0NfR1JPVVBfVE9HR0xFLAogICAgICAgICAgICAgICAgICAgIHN0YXRlOiBPUEVORUQKICAgICAgICAgICAgICAgIH0sIGF0dHJpYnV0ZXMpKTsKICAgICAgICAgICAgICAgIC8vIENvbGxlY3Rpb24gb2YgY29udGFjdHMgYmVsb25naW5nIHRvIHRoaXMgZ3JvdXAuCiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhY3RzID0gbmV3IGNvbnZlcnNlLlJvc3RlckNvbnRhY3RzKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5Sb3N0ZXJHcm91cFZpZXcgPSBCYWNrYm9uZS5PdmVydmlldy5leHRlbmQoewogICAgICAgICAgICB0YWdOYW1lOiAnZHQnLAogICAgICAgICAgICBjbGFzc05hbWU6ICdyb3N0ZXItZ3JvdXAnLAogICAgICAgICAgICBldmVudHM6IHsKICAgICAgICAgICAgICAgICJjbGljayBhLmdyb3VwLXRvZ2dsZSI6ICJ0b2dnbGUiCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmNvbnRhY3RzLm9uKCJhZGQiLCB0aGlzLmFkZENvbnRhY3QsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5jb250YWN0cy5vbigiY2hhbmdlOnN1YnNjcmlwdGlvbiIsIHRoaXMub25Db250YWN0U3Vic2NyaXB0aW9uQ2hhbmdlLCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuY29udGFjdHMub24oImNoYW5nZTpyZXF1ZXN0aW5nIiwgdGhpcy5vbkNvbnRhY3RSZXF1ZXN0Q2hhbmdlLCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuY29udGFjdHMub24oImNoYW5nZTpjaGF0X3N0YXR1cyIsIGZ1bmN0aW9uIChjb250YWN0KSB7CiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBtaWdodCBiZSBvcHRpbWl6ZWQgYnkgaW5zdGVhZCBvZiBmaXJzdCBzb3J0aW5nLAogICAgICAgICAgICAgICAgICAgIC8vIGZpbmRpbmcgdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gcG9zaXRpb25Db250YWN0CiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5jb250YWN0cy5zb3J0KCk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkNvbnRhY3QoY29udGFjdCkucmVuZGVyKCk7CiAgICAgICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuY29udGFjdHMub24oImRlc3Ryb3kiLCB0aGlzLm9uUmVtb3ZlLCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuY29udGFjdHMub24oInJlbW92ZSIsIHRoaXMub25SZW1vdmUsIHRoaXMpOwogICAgICAgICAgICAgICAgY29udmVyc2Uucm9zdGVyLm9uKCdjaGFuZ2U6Z3JvdXBzJywgdGhpcy5vbkNvbnRhY3RHcm91cENoYW5nZSwgdGhpcyk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmF0dHIoJ2RhdGEtZ3JvdXAnLCB0aGlzLm1vZGVsLmdldCgnbmFtZScpKTsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmh0bWwoCiAgICAgICAgICAgICAgICAgICAgJChjb252ZXJzZS50ZW1wbGF0ZXMuZ3JvdXBfaGVhZGVyKHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxfZ3JvdXA6IHRoaXMubW9kZWwuZ2V0KCduYW1lJyksCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NfZ3JvdXBfdG9nZ2xlOiB0aGlzLm1vZGVsLmdldCgnZGVzY3JpcHRpb24nKSwKICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlX3N0YXRlOiB0aGlzLm1vZGVsLmdldCgnc3RhdGUnKQogICAgICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgYWRkQ29udGFjdDogZnVuY3Rpb24gKGNvbnRhY3QpIHsKICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IGNvbnZlcnNlLlJvc3RlckNvbnRhY3RWaWV3KHttb2RlbDogY29udGFjdH0pOwogICAgICAgICAgICAgICAgdGhpcy5hZGQoY29udGFjdC5nZXQoJ2lkJyksIHZpZXcpOwogICAgICAgICAgICAgICAgdmlldyA9IHRoaXMucG9zaXRpb25Db250YWN0KGNvbnRhY3QpLnJlbmRlcigpOwogICAgICAgICAgICAgICAgaWYgKGNvbnRhY3Quc2hvd0luUm9zdGVyKCkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tb2RlbC5nZXQoJ3N0YXRlJykgPT09IENMT1NFRCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlldy4kZWxbMF0uc3R5bGUuZGlzcGxheSAhPT0gIm5vbmUiKSB7IHZpZXcuJGVsLmhpZGUoKTsgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4kZWxbMF0uc3R5bGUuZGlzcGxheSA9PT0gIm5vbmUiKSB7IHRoaXMuJGVsLnNob3coKTsgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiRlbFswXS5zdHlsZS5kaXNwbGF5ICE9PSAiYmxvY2siKSB7IHRoaXMuc2hvdygpOyB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcG9zaXRpb25Db250YWN0OiBmdW5jdGlvbiAoY29udGFjdCkgewogICAgICAgICAgICAgICAgLyogUGxhY2UgdGhlIGNvbnRhY3QncyBET00gZWxlbWVudCBpbiB0aGUgY29ycmVjdCBhbHBoYWJldGljYWwKICAgICAgICAgICAgICAgICAqIHBvc2l0aW9uIGFtb25nc3QgdGhlIG90aGVyIGNvbnRhY3RzIGluIHRoaXMgZ3JvdXAuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gdGhpcy5nZXQoY29udGFjdC5nZXQoJ2lkJykpOwogICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5tb2RlbC5jb250YWN0cy5pbmRleE9mKGNvbnRhY3QpOwogICAgICAgICAgICAgICAgdmlldy4kZWwuZGV0YWNoKCk7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5hZnRlcih2aWV3LiRlbCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09ICh0aGlzLm1vZGVsLmNvbnRhY3RzLmxlbmd0aC0xKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLm5leHRVbnRpbCgnZHQnKS5sYXN0KCkuYWZ0ZXIodmlldy4kZWwpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5uZXh0VW50aWwoJ2R0JykuZXEoaW5kZXgpLmJlZm9yZSh2aWV3LiRlbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdmlldzsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBUaGVyZSdzIGEgYnVnIGhlcmUsIGlmIHNob3dfb25seV9vbmxpbmVfdXNlcnMgaXMgdHJ1ZQogICAgICAgICAgICAgICAgLy8gUG9zc2libGUgc29sdXRpb24sIGdldCB0aGUgZ3JvdXAsIGNhbGwgXy5lYWNoIGFuZCBjaGVjawogICAgICAgICAgICAgICAgLy8gc2hvd0luUm9zdGVyCiAgICAgICAgICAgICAgICB0aGlzLiRlbC5uZXh0VW50aWwoJ2R0JykuYWRkQmFjaygpLnNob3coKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLm5leHRVbnRpbCgnZHQnKS5hZGRCYWNrKCkuaGlkZSgpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbiAocSkgewogICAgICAgICAgICAgICAgLyogRmlsdGVyIHRoZSBncm91cCdzIGNvbnRhY3RzIGJhc2VkIG9uIHRoZSBxdWVyeSAicSIuCiAgICAgICAgICAgICAgICAgKiBUaGUgcXVlcnkgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBjb250YWN0J3MgZnVsbCBuYW1lLgogICAgICAgICAgICAgICAgICogSWYgYWxsIGNvbnRhY3RzIGFyZSBmaWx0ZXJlZCBvdXQgKGkuZS4gaGlkZGVuKSwgdGhlbiB0aGUKICAgICAgICAgICAgICAgICAqIGdyb3VwIG11c3QgYmUgZmlsdGVyZWQgb3V0IGFzIHdlbGwuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzLCByZWplY3RzOwogICAgICAgICAgICAgICAgaWYgKHEubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubW9kZWwuZ2V0KCdzdGF0ZScpID09PSBPUEVORUQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5jb250YWN0cy5lYWNoKCQucHJveHkoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnNob3dJblJvc3RlcigpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXQoaXRlbS5nZXQoJ2lkJykpLiRlbC5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93SWZJbnZpc2libGUoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcSA9IHEudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgICAgICBtYXRjaGVzID0gdGhpcy5tb2RlbC5jb250YWN0cy5maWx0ZXIoY29udGFpbnMubm90KCdmdWxsbmFtZScsIHEpKTsKICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPT09IHRoaXMubW9kZWwuY29udGFjdHMubGVuZ3RoKSB7IC8vIGhpZGUgdGhlIHdob2xlIGdyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF8uZWFjaChtYXRjaGVzLCAkLnByb3h5KGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldChpdGVtLmdldCgnaWQnKSkuJGVsLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcykpOwogICAgICAgICAgICAgICAgICAgICAgICBfLmVhY2godGhpcy5tb2RlbC5jb250YWN0cy5yZWplY3QoY29udGFpbnMubm90KCdmdWxsbmFtZScsIHEpKSwgJC5wcm94eShmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXQoaXRlbS5nZXQoJ2lkJykpLiRlbC5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93SWZJbnZpc2libGUoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzaG93SWZJbnZpc2libGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmICghdGhpcy4kZWwuaXMoJzp2aXNpYmxlJykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5zaG93KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgaWYgKGV2ICYmIGV2LnByZXZlbnREZWZhdWx0KSB7IGV2LnByZXZlbnREZWZhdWx0KCk7IH0KICAgICAgICAgICAgICAgIHZhciAkZWwgPSAkKGV2LnRhcmdldCk7CiAgICAgICAgICAgICAgICBpZiAoJGVsLmhhc0NsYXNzKCJpY29uLW9wZW5lZCIpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwubmV4dFVudGlsKCdkdCcpLnNsaWRlVXAoKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNhdmUoe3N0YXRlOiBDTE9TRUR9KTsKICAgICAgICAgICAgICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoImljb24tb3BlbmVkIikuYWRkQ2xhc3MoImljb24tY2xvc2VkIik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRlbC5yZW1vdmVDbGFzcygiaWNvbi1jbG9zZWQiKS5hZGRDbGFzcygiaWNvbi1vcGVuZWQiKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNhdmUoe3N0YXRlOiBPUEVORUR9KTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcigKICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2Uucm9zdGVydmlldy4kKCcucm9zdGVyLWZpbHRlcicpLnZhbCgpLAogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5yb3N0ZXJ2aWV3LiQoJy5maWx0ZXItdHlwZScpLnZhbCgpCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIG9uQ29udGFjdEdyb3VwQ2hhbmdlOiBmdW5jdGlvbiAoY29udGFjdCkgewogICAgICAgICAgICAgICAgdmFyIGluX3RoaXNfZ3JvdXAgPSBfLmNvbnRhaW5zKGNvbnRhY3QuZ2V0KCdncm91cHMnKSwgdGhpcy5tb2RlbC5nZXQoJ25hbWUnKSk7CiAgICAgICAgICAgICAgICB2YXIgY2lkID0gY29udGFjdC5nZXQoJ2lkJyk7CiAgICAgICAgICAgICAgICB2YXIgaW5fdGhpc19vdmVydmlldyA9ICF0aGlzLmdldChjaWQpOwogICAgICAgICAgICAgICAgaWYgKGluX3RoaXNfZ3JvdXAgJiYgIWluX3RoaXNfb3ZlcnZpZXcpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmNvbnRhY3RzLnJlbW92ZShjaWQpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaW5fdGhpc19ncm91cCAmJiBpbl90aGlzX292ZXJ2aWV3KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDb250YWN0KGNvbnRhY3QpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25Db250YWN0U3Vic2NyaXB0aW9uQ2hhbmdlOiBmdW5jdGlvbiAoY29udGFjdCkgewogICAgICAgICAgICAgICAgaWYgKCh0aGlzLm1vZGVsLmdldCgnbmFtZScpID09PSBIRUFERVJfUEVORElOR19DT05UQUNUUykgJiYgY29udGFjdC5nZXQoJ3N1YnNjcmlwdGlvbicpICE9PSAnZnJvbScpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmNvbnRhY3RzLnJlbW92ZShjb250YWN0LmdldCgnaWQnKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvbkNvbnRhY3RSZXF1ZXN0Q2hhbmdlOiBmdW5jdGlvbiAoY29udGFjdCkgewogICAgICAgICAgICAgICAgaWYgKCh0aGlzLm1vZGVsLmdldCgnbmFtZScpID09PSBIRUFERVJfUkVRVUVTVElOR19DT05UQUNUUykgJiYgIWNvbnRhY3QuZ2V0KCdyZXF1ZXN0aW5nJykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmNvbnRhY3RzLnJlbW92ZShjb250YWN0LmdldCgnaWQnKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvblJlbW92ZTogZnVuY3Rpb24gKGNvbnRhY3QpIHsKICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKGNvbnRhY3QuZ2V0KCdpZCcpKTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLmNvbnRhY3RzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmhpZGUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB0aGlzLlJvc3Rlckdyb3VwcyA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKHsKICAgICAgICAgICAgbW9kZWw6IGNvbnZlcnNlLlJvc3Rlckdyb3VwLAogICAgICAgICAgICBjb21wYXJhdG9yOiBmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAgICAgLyogR3JvdXBzIGFyZSBzb3J0ZWQgYWxwaGFiZXRpY2FsbHksIGlnbm9yaW5nIGNhc2UuCiAgICAgICAgICAgICAgICAgKiBIb3dldmVyLCBVbmdyb3VwZWQsIFJlcXVlc3RpbmcgQ29udGFjdHMgYW5kIFBlbmRpbmcgQ29udGFjdHMKICAgICAgICAgICAgICAgICAqIGFwcGVhciBsYXN0IGFuZCBpbiB0aGF0IG9yZGVyLiAqLwogICAgICAgICAgICAgICAgYSA9IGEuZ2V0KCduYW1lJyk7CiAgICAgICAgICAgICAgICBiID0gYi5nZXQoJ25hbWUnKTsKICAgICAgICAgICAgICAgIHZhciBzcGVjaWFsX2dyb3VwcyA9IF8ua2V5cyhIRUFERVJfV0VJR0hUUyk7CiAgICAgICAgICAgICAgICB2YXIgYV9pc19zcGVjaWFsID0gXy5jb250YWlucyhzcGVjaWFsX2dyb3VwcywgYSk7CiAgICAgICAgICAgICAgICB2YXIgYl9pc19zcGVjaWFsID0gXy5jb250YWlucyhzcGVjaWFsX2dyb3VwcywgYik7CiAgICAgICAgICAgICAgICBpZiAoIWFfaXNfc3BlY2lhbCAmJiAhYl9pc19zcGVjaWFsICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBhLnRvTG93ZXJDYXNlKCkgPCBiLnRvTG93ZXJDYXNlKCkgPyAtMSA6IChhLnRvTG93ZXJDYXNlKCkgPiBiLnRvTG93ZXJDYXNlKCkgPyAxIDogMCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFfaXNfc3BlY2lhbCAmJiBiX2lzX3NwZWNpYWwpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gSEVBREVSX1dFSUdIVFNbYV0gPCBIRUFERVJfV0VJR0hUU1tiXSA/IC0xIDogKEhFQURFUl9XRUlHSFRTW2FdID4gSEVBREVSX1dFSUdIVFNbYl0gPyAxIDogMCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFhX2lzX3NwZWNpYWwgJiYgYl9pc19zcGVjaWFsKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChiID09PSBIRUFERVJfQ1VSUkVOVF9DT05UQUNUUykgPyAxIDogLTE7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFfaXNfc3BlY2lhbCAmJiAhYl9pc19zcGVjaWFsKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhID09PSBIRUFERVJfQ1VSUkVOVF9DT05UQUNUUykgPyAtMSA6IDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5Sb3N0ZXJWaWV3ID0gQmFja2JvbmUuT3ZlcnZpZXcuZXh0ZW5kKHsKICAgICAgICAgICAgdGFnTmFtZTogJ2RpdicsCiAgICAgICAgICAgIGlkOiAnY29udmVyc2Utcm9zdGVyJywKICAgICAgICAgICAgZXZlbnRzOiB7CiAgICAgICAgICAgICAgICAia2V5ZG93biAucm9zdGVyLWZpbHRlciI6ICJsaXZlRmlsdGVyIiwKICAgICAgICAgICAgICAgICJjbGljayAub25YIjogImNsZWFyRmlsdGVyIiwKICAgICAgICAgICAgICAgICJtb3VzZW1vdmUgLngiOiAidG9nZ2xlUG9pbnRlciIsCiAgICAgICAgICAgICAgICAiY2hhbmdlIC5maWx0ZXItdHlwZSI6ICJjaGFuZ2VGaWx0ZXJUeXBlIgogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGhpcy5yZWdpc3RlclJvc3RlckhhbmRsZXIoKTsKICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJSb3N0ZXJYSGFuZGxlcigpOwogICAgICAgICAgICAgICAgdGhpcy5yZWdpc3RlclByZXNlbmNlSGFuZGxlcigpOwogICAgICAgICAgICAgICAgY29udmVyc2Uucm9zdGVyLm9uKCJhZGQiLCB0aGlzLm9uQ29udGFjdEFkZCwgdGhpcyk7CiAgICAgICAgICAgICAgICBjb252ZXJzZS5yb3N0ZXIub24oJ2NoYW5nZScsIHRoaXMub25Db250YWN0Q2hhbmdlLCB0aGlzKTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLnJvc3Rlci5vbigiZGVzdHJveSIsIHRoaXMudXBkYXRlLCB0aGlzKTsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLnJvc3Rlci5vbigicmVtb3ZlIiwgdGhpcy51cGRhdGUsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5vbigiYWRkIiwgdGhpcy5vbkdyb3VwQWRkLCB0aGlzKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oInJlc2V0IiwgdGhpcy5yZXNldCwgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLiRyb3N0ZXIgPSAkKCc8ZGwgY2xhc3M9InJvc3Rlci1jb250YWN0cyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2RsPicpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgdXBkYXRlOiBfLmRlYm91bmNlKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciAkY291bnQgPSAkKCcjb25saW5lLWNvdW50Jyk7CiAgICAgICAgICAgICAgICAkY291bnQudGV4dCgnKCcrY29udmVyc2Uucm9zdGVyLmdldE51bU9ubGluZUNvbnRhY3RzKCkrJyknKTsKICAgICAgICAgICAgICAgIGlmICghJGNvdW50LmlzKCc6dmlzaWJsZScpKSB7CiAgICAgICAgICAgICAgICAgICAgJGNvdW50LnNob3coKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0aGlzLiRyb3N0ZXIucGFyZW50KCkubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuYXBwZW5kKHRoaXMuJHJvc3Rlci5zaG93KCkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvd0hpZGVGaWx0ZXIoKTsKICAgICAgICAgICAgfSwgY29udmVyc2UuYW5pbWF0ZSA/IDEwMCA6IDApLAoKICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5odG1sKGNvbnZlcnNlLnRlbXBsYXRlcy5yb3N0ZXIoewogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBfXygnVHlwZSB0byBmaWx0ZXInKSwKICAgICAgICAgICAgICAgICAgICBsYWJlbF9jb250YWN0czogTEFCRUxfQ09OVEFDVFMsCiAgICAgICAgICAgICAgICAgICAgbGFiZWxfZ3JvdXBzOiBMQUJFTF9HUk9VUFMKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuZmV0Y2goewogICAgICAgICAgICAgICAgICAgIHNpbGVudDogdHJ1ZSwgLy8gV2UgdXNlIHRoZSBzdWNjZXNzIGhhbmRsZXIgdG8gaGFuZGxlIGdyb3VwcyB0aGF0IHdlcmUgYWRkZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGZpcnN0IGhhdmUgYWxsIGdyb3VwcyBiZWZvcmUgcG9zaXRpb25GZXRjaGVkR3JvdXBzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aWxsIHdvcmsgcHJvcGVybHkuCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogJC5wcm94eShmdW5jdGlvbiAoY29sbGVjdGlvbiwgcmVzcCwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbi5sZW5ndGggIT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25GZXRjaGVkR3JvdXBzKGNvbGxlY3Rpb24sIHJlc3AsIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLnJvc3Rlci5mZXRjaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGQ6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoY29sbGVjdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFhYWDogQml0IG9mIGEgaGFjay4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdHJvcGhlLnJvc3RlciBleHBlY3RzIC5nZXQgdG8gYmUgY2FsbGVkIGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV2ZXJ5IHBhZ2UgbG9hZCBzbyB0aGF0IGl0cyAiaXRlbXMiIGF0dHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXRzIHBvcHVsYXRlZC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHZlcnkgaW5lZmZpY2llbnQgZm9yIGxhcmdlIHJvc3RlcnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHdlIGFscmVhZHkgaGF2ZSB0aGUgcm9zdGVyIGNhY2hlZCBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlc3Npb25TdG9yYWdlLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlZm9yZSB3ZSBtYW51YWxseSBwb3B1bGF0ZSB0aGUgIml0ZW1zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF0dHIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWRlYWxseSB3ZSBzaG91bGQgZXZlbnR1YWxseSByZXBsYWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3Ryb3BoZS5yb3N0ZXIgd2l0aCBzb21ldGhpbmcgYmV0dGVyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbi5lYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLnJvc3Rlci5pdGVtcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lICAgICAgICAgOiBpdGVtLmdldCgnZnVsbG5hbWUnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqaWQgICAgICAgICAgOiBpdGVtLmdldCgnamlkJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uIDogaXRlbS5nZXQoJ3N1YnNjcmlwdGlvbicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzayAgICAgICAgICA6IGl0ZW0uZ2V0KCdhc2snKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cHMgICAgICAgOiBpdGVtLmdldCgnZ3JvdXBzJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzICAgIDogaXRlbS5nZXQoJ3Jlc291cmNlcycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmluaXRpYWxfcHJlc2VuY2Vfc2VudCA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLnhtcHBzdGF0dXMuc2VuZFByZXNlbmNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5yb3N0ZXIuZ2V0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNoYW5nZUZpbHRlclR5cGU6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgaWYgKGV2ICYmIGV2LnByZXZlbnREZWZhdWx0KSB7IGV2LnByZXZlbnREZWZhdWx0KCk7IH0KICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJGaWx0ZXIoKTsKICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyKAogICAgICAgICAgICAgICAgICAgIHRoaXMuJCgnLnJvc3Rlci1maWx0ZXInKS52YWwoKSwKICAgICAgICAgICAgICAgICAgICBldi50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICB0b2c6IGZ1bmN0aW9uICh2KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdj8nYWRkQ2xhc3MnOidyZW1vdmVDbGFzcyc7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICB0b2dnbGVQb2ludGVyOiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGlmIChldiAmJiBldi5wcmV2ZW50RGVmYXVsdCkgeyBldi5wcmV2ZW50RGVmYXVsdCgpOyB9CiAgICAgICAgICAgICAgICB2YXIgZWwgPSBldi50YXJnZXQ7CiAgICAgICAgICAgICAgICAkKGVsKVt0aGlzLnRvZyhlbC5vZmZzZXRXaWR0aC0xOCA8IGV2LmNsaWVudFgtZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCldKCdvblgnKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24gKHF1ZXJ5LCB0eXBlKSB7CiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlczsKICAgICAgICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnZ3JvdXBzJykgewogICAgICAgICAgICAgICAgICAgIF8uZWFjaCh0aGlzLmdldEFsbCgpLCBmdW5jdGlvbiAodmlldywgaWR4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aWV3Lm1vZGVsLmdldCgnbmFtZScpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeS50b0xvd2VyQ2FzZSgpKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZpZXcubW9kZWwuY29udGFjdHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgXy5lYWNoKHRoaXMuZ2V0QWxsKCksIGZ1bmN0aW9uICh2aWV3KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuZmlsdGVyKHF1ZXJ5LCB0eXBlKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGxpdmVGaWx0ZXI6IF8uZGVib3VuY2UoZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBpZiAoZXYgJiYgZXYucHJldmVudERlZmF1bHQpIHsgZXYucHJldmVudERlZmF1bHQoKTsgfQogICAgICAgICAgICAgICAgdmFyIHEgPSBldi50YXJnZXQudmFsdWU7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuJCgnLmZpbHRlci10eXBlJykudmFsKCk7CiAgICAgICAgICAgICAgICAkKGV2LnRhcmdldClbdGhpcy50b2cocSldKCd4Jyk7CiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcihxLCB0KTsKICAgICAgICAgICAgfSwgMzAwKSwKCiAgICAgICAgICAgIGNsZWFyRmlsdGVyOiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIGlmIChldiAmJiBldi5wcmV2ZW50RGVmYXVsdCkgewogICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgJChldi50YXJnZXQpLnJlbW92ZUNsYXNzKCd4IG9uWCcpLnZhbCgnJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcignJyk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzaG93SGlkZUZpbHRlcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLiRlbC5pcygnOnZpc2libGUnKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciAkZmlsdGVyID0gdGhpcy4kKCcucm9zdGVyLWZpbHRlcicpOwogICAgICAgICAgICAgICAgdmFyICR0eXBlICA9IHRoaXMuJCgnLmZpbHRlci10eXBlJyk7CiAgICAgICAgICAgICAgICB2YXIgdmlzaWJsZSA9ICRmaWx0ZXIuaXMoJzp2aXNpYmxlJyk7CiAgICAgICAgICAgICAgICBpZiAodmlzaWJsZSAmJiAkZmlsdGVyLnZhbCgpLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBoaWRlIGlmIHVzZXIgaXMgY3VycmVudGx5IGZpbHRlcmluZy4KICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAodGhpcy4kcm9zdGVyLmhhc1Njcm9sbEJhcigpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCF2aXNpYmxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRmaWx0ZXIuc2hvdygpOwogICAgICAgICAgICAgICAgICAgICAgICAkdHlwZS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkZmlsdGVyLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAkdHlwZS5oaWRlKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBjb252ZXJzZS5yb3N0ZXIucmVzZXQoKTsKICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsKCk7CiAgICAgICAgICAgICAgICB0aGlzLiRyb3N0ZXIgPSAkKCc8ZGwgY2xhc3M9InJvc3Rlci1jb250YWN0cyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2RsPicpOwogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKS51cGRhdGUoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVnaXN0ZXJSb3N0ZXJIYW5kbGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAvLyBSZWdpc3RlciBoYW5kbGVycyB0aGF0IGRlcGVuZCBvbiB0aGUgcm9zdGVyCiAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLnJvc3Rlci5yZWdpc3RlckNhbGxiYWNrKAogICAgICAgICAgICAgICAgICAgICQucHJveHkoY29udmVyc2Uucm9zdGVyLnJvc3RlckhhbmRsZXIsIGNvbnZlcnNlLnJvc3RlcikKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZWdpc3RlclJvc3RlclhIYW5kbGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IDA7CiAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLmFkZEhhbmRsZXIoCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLmZsdXNoKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5wcm94eShjb252ZXJzZS5yb3N0ZXIuc3Vic2NyaWJlVG9TdWdnZXN0ZWRJdGVtcywgY29udmVyc2Uucm9zdGVyKShtc2cpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQKICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgdCArPSAkKG1zZykuZmluZCgnaXRlbScpLmxlbmd0aCoyNTA7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgJ2h0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL3Jvc3RlcngnLCAnbWVzc2FnZScsIG51bGwpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVnaXN0ZXJQcmVzZW5jZUhhbmRsZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24uYWRkSGFuZGxlcigKICAgICAgICAgICAgICAgICAgICAkLnByb3h5KGZ1bmN0aW9uIChwcmVzZW5jZSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5yb3N0ZXIucHJlc2VuY2VIYW5kbGVyKHByZXNlbmNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyksIG51bGwsICdwcmVzZW5jZScsIG51bGwpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25Hcm91cEFkZDogZnVuY3Rpb24gKGdyb3VwKSB7CiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBjb252ZXJzZS5Sb3N0ZXJHcm91cFZpZXcoe21vZGVsOiBncm91cH0pOwogICAgICAgICAgICAgICAgdGhpcy5hZGQoZ3JvdXAuZ2V0KCduYW1lJyksIHZpZXcucmVuZGVyKCkpOwogICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkdyb3VwKHZpZXcpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25Db250YWN0QWRkOiBmdW5jdGlvbiAoY29udGFjdCkgewogICAgICAgICAgICAgICAgdGhpcy5hZGRSb3N0ZXJDb250YWN0KGNvbnRhY3QpLnVwZGF0ZSgpOwogICAgICAgICAgICAgICAgaWYgKCFjb250YWN0LmdldCgndmNhcmRfdXBkYXRlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIHVwZGF0ZSB0aGUgdmNhcmQsIHdoaWNoIHRyaWdnZXJzIGEgY2hhbmdlCiAgICAgICAgICAgICAgICAgICAgLy8gcmVxdWVzdCB3aGljaCB3aWxsIHJlcmVuZGVyIHRoZSByb3N0ZXIgY29udGFjdC4KICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5nZXRWQ2FyZChjb250YWN0LmdldCgnamlkJykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25Db250YWN0Q2hhbmdlOiBmdW5jdGlvbiAoY29udGFjdCkgewogICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDaGF0Qm94KGNvbnRhY3QpLnVwZGF0ZSgpOwogICAgICAgICAgICAgICAgaWYgKF8uaGFzKGNvbnRhY3QuY2hhbmdlZCwgJ3N1YnNjcmlwdGlvbicpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhY3QuY2hhbmdlZC5zdWJzY3JpcHRpb24gPT0gJ2Zyb20nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQ29udGFjdFRvR3JvdXAoY29udGFjdCwgSEVBREVSX1BFTkRJTkdfQ09OVEFDVFMpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGFjdC5nZXQoJ3N1YnNjcmlwdGlvbicpID09PSAnYm90aCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFeGlzdGluZ0NvbnRhY3QoY29udGFjdCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKF8uaGFzKGNvbnRhY3QuY2hhbmdlZCwgJ2FzaycpICYmIGNvbnRhY3QuY2hhbmdlZC5hc2sgPT0gJ3N1YnNjcmliZScpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENvbnRhY3RUb0dyb3VwKGNvbnRhY3QsIEhFQURFUl9QRU5ESU5HX0NPTlRBQ1RTKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChfLmhhcyhjb250YWN0LmNoYW5nZWQsICdzdWJzY3JpcHRpb24nKSAmJiBjb250YWN0LmNoYW5nZWQucmVxdWVzdGluZyA9PSAndHJ1ZScpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENvbnRhY3RUb0dyb3VwKGNvbnRhY3QsIEhFQURFUl9SRVFVRVNUSU5HX0NPTlRBQ1RTKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHVwZGF0ZUNoYXRCb3g6IGZ1bmN0aW9uIChjb250YWN0KSB7CiAgICAgICAgICAgICAgICB2YXIgY2hhdGJveCA9IGNvbnZlcnNlLmNoYXRib3hlcy5nZXQoY29udGFjdC5nZXQoJ2ppZCcpKSwKICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzID0ge307CiAgICAgICAgICAgICAgICBpZiAoIWNoYXRib3gpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChfLmhhcyhjb250YWN0LmNoYW5nZWQsICdjaGF0X3N0YXR1cycpKSB7CiAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5jaGF0X3N0YXR1cyA9IGNvbnRhY3QuZ2V0KCdjaGF0X3N0YXR1cycpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKF8uaGFzKGNvbnRhY3QuY2hhbmdlZCwgJ3N0YXR1cycpKSB7CiAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5zdGF0dXMgPSBjb250YWN0LmdldCgnc3RhdHVzJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjaGF0Ym94LnNhdmUoY2hhbmdlcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHBvc2l0aW9uRmV0Y2hlZEdyb3VwczogZnVuY3Rpb24gKG1vZGVsLCByZXNwLCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgICAvKiBJbnN0ZWFkIG9mIHRocm93aW5nIGFuIGFkZCBldmVudCBmb3IgZWFjaCBncm91cAogICAgICAgICAgICAgICAgICAgICogZmV0Y2hlZCwgd2Ugd2FpdCB1bnRpbCB0aGV5J3JlIGFsbCBmZXRjaGVkIGFuZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgKiB3ZSBwb3NpdGlvbiB0aGVtLgogICAgICAgICAgICAgICAgICAgICogV29ya3MgYXJvdW5kIHRoZSBwcm9ibGVtIG9mIHBvc2l0aW9uR3JvdXAgbm90CiAgICAgICAgICAgICAgICAgICAgKiB3b3JraW5nIHdoZW4gYWxsIGdyb3VwcyBiZXNpZGVzIHRoZSBvbmUgYmVpbmcKICAgICAgICAgICAgICAgICAgICAqIHBvc2l0aW9uZWQgYXJlbid0IGFscmVhZHkgaW4gaW5zZXJ0ZWQgaW50byB0aGUKICAgICAgICAgICAgICAgICAgICAqIHJvc3RlciBET00gZWxlbWVudC4KICAgICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgbW9kZWwuc29ydCgpOwogICAgICAgICAgICAgICAgbW9kZWwuZWFjaCgkLnByb3h5KGZ1bmN0aW9uIChncm91cCwgaWR4KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXcgPSB0aGlzLmdldChncm91cC5nZXQoJ25hbWUnKSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCF2aWV3KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgY29udmVyc2UuUm9zdGVyR3JvdXBWaWV3KHttb2RlbDogZ3JvdXB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGQoZ3JvdXAuZ2V0KCduYW1lJyksIHZpZXcucmVuZGVyKCkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvc3Rlci5hcHBlbmQodmlldy4kZWwpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kR3JvdXAodmlldyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgdGhpcykpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcG9zaXRpb25Hcm91cDogZnVuY3Rpb24gKHZpZXcpIHsKICAgICAgICAgICAgICAgIC8qIFBsYWNlIHRoZSBncm91cCdzIERPTSBlbGVtZW50IGluIHRoZSBjb3JyZWN0IGFscGhhYmV0aWNhbAogICAgICAgICAgICAgICAgICogcG9zaXRpb24gYW1vbmdzdCB0aGUgb3RoZXIgZ3JvdXBzIGluIHRoZSByb3N0ZXIuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIHZhciAkZ3JvdXBzID0gdGhpcy4kcm9zdGVyLmZpbmQoJy5yb3N0ZXItZ3JvdXAnKSwKICAgICAgICAgICAgICAgICAgICBpbmRleCA9ICRncm91cHMubGVuZ3RoID8gdGhpcy5tb2RlbC5pbmRleE9mKHZpZXcubW9kZWwpIDogMDsKICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvc3Rlci5wcmVwZW5kKHZpZXcuJGVsKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT0gKHRoaXMubW9kZWwubGVuZ3RoLTEpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRHcm91cCh2aWV3KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJCgkZ3JvdXBzLmVxKGluZGV4KSkuYmVmb3JlKHZpZXcuJGVsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgYXBwZW5kR3JvdXA6IGZ1bmN0aW9uICh2aWV3KSB7CiAgICAgICAgICAgICAgICAvKiBBZGQgdGhlIGdyb3VwIGF0IHRoZSBib3R0b20gb2YgdGhlIHJvc3RlcgogICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICB2YXIgJGxhc3QgPSB0aGlzLiRyb3N0ZXIuZmluZCgnLnJvc3Rlci1ncm91cCcpLmxhc3QoKTsKICAgICAgICAgICAgICAgIHZhciAkc2libGluZ3MgPSAkbGFzdC5zaWJsaW5ncygnZGQnKTsKICAgICAgICAgICAgICAgIGlmICgkc2libGluZ3MubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgICRzaWJsaW5ncy5sYXN0KCkuYWZ0ZXIodmlldy4kZWwpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkbGFzdC5hZnRlcih2aWV3LiRlbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGdldEdyb3VwOiBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICAgICAgLyogUmV0dXJucyB0aGUgZ3JvdXAgYXMgc3BlY2lmaWVkIGJ5IG5hbWUuCiAgICAgICAgICAgICAgICAgKiBDcmVhdGVzIHRoZSBncm91cCBpZiBpdCBkb2Vzbid0IGV4aXN0LgogICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICB2YXIgdmlldyA9ICB0aGlzLmdldChuYW1lKTsKICAgICAgICAgICAgICAgIGlmICh2aWV3KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpZXcubW9kZWw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5jcmVhdGUoe25hbWU6IG5hbWUsIGlkOiBiNjRfc2hhMShuYW1lKX0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgYWRkQ29udGFjdFRvR3JvdXA6IGZ1bmN0aW9uIChjb250YWN0LCBuYW1lKSB7CiAgICAgICAgICAgICAgICB0aGlzLmdldEdyb3VwKG5hbWUpLmNvbnRhY3RzLmFkZChjb250YWN0KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGFkZEV4aXN0aW5nQ29udGFjdDogZnVuY3Rpb24gKGNvbnRhY3QpIHsKICAgICAgICAgICAgICAgIHZhciBncm91cHM7CiAgICAgICAgICAgICAgICBpZiAoY29udmVyc2Uucm9zdGVyX2dyb3VwcykgewogICAgICAgICAgICAgICAgICAgIGdyb3VwcyA9IGNvbnRhY3QuZ2V0KCdncm91cHMnKTsKICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXBzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBncm91cHMgPSBbSEVBREVSX1VOR1JPVVBFRF07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBncm91cHMgPSBbSEVBREVSX0NVUlJFTlRfQ09OVEFDVFNdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXy5lYWNoKGdyb3VwcywgJC5wcm94eShmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQ29udGFjdFRvR3JvdXAoY29udGFjdCwgbmFtZSk7CiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhZGRSb3N0ZXJDb250YWN0OiBmdW5jdGlvbiAoY29udGFjdCkgewogICAgICAgICAgICAgICAgaWYgKGNvbnRhY3QuZ2V0KCdzdWJzY3JpcHRpb24nKSA9PT0gJ2JvdGgnIHx8IGNvbnRhY3QuZ2V0KCdzdWJzY3JpcHRpb24nKSA9PT0gJ3RvJykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRXhpc3RpbmdDb250YWN0KGNvbnRhY3QpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoKGNvbnRhY3QuZ2V0KCdhc2snKSA9PT0gJ3N1YnNjcmliZScpIHx8IChjb250YWN0LmdldCgnc3Vic2NyaXB0aW9uJykgPT09ICdmcm9tJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDb250YWN0VG9Hcm91cChjb250YWN0LCBIRUFERVJfUEVORElOR19DT05UQUNUUyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb250YWN0LmdldCgncmVxdWVzdGluZycpID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQ29udGFjdFRvR3JvdXAoY29udGFjdCwgSEVBREVSX1JFUVVFU1RJTkdfQ09OVEFDVFMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuWE1QUFN0YXR1cyA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7CiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMuc2V0KHsKICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJyA6IHRoaXMuZ2V0KCdzdGF0dXMnKSB8fCAnb25saW5lJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aGlzLm9uKCdjaGFuZ2UnLCAkLnByb3h5KGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0KCdmdWxsbmFtZScpID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuZ2V0VkNhcmQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLCAvLyBObyAndG8nIGF0dHIgd2hlbiBnZXR0aW5nIG9uZSdzIG93biB2Q2FyZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5wcm94eShmdW5jdGlvbiAoamlkLCBmdWxsbmFtZSwgaW1hZ2UsIGltYWdlX3R5cGUsIHVybCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSh7J2Z1bGxuYW1lJzogZnVsbG5hbWV9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpCiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChfLmhhcyhpdGVtLmNoYW5nZWQsICdzdGF0dXMnKSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5lbWl0KCdzdGF0dXNDaGFuZ2VkJywgdGhpcy5nZXQoJ3N0YXR1cycpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaGFzKGl0ZW0uY2hhbmdlZCwgJ3N0YXR1c19tZXNzYWdlJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuZW1pdCgnc3RhdHVzTWVzc2FnZUNoYW5nZWQnLCB0aGlzLmdldCgnc3RhdHVzX21lc3NhZ2UnKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgdGhpcykpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2VuZFByZXNlbmNlOiBmdW5jdGlvbiAodHlwZSkgewogICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgIHR5cGUgPSB0aGlzLmdldCgnc3RhdHVzJykgfHwgJ29ubGluZSc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzX21lc3NhZ2UgPSB0aGlzLmdldCgnc3RhdHVzX21lc3NhZ2UnKSwKICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZTsKICAgICAgICAgICAgICAgIC8vIE1vc3Qgb2YgdGhlc2UgcHJlc2VuY2UgdHlwZXMgYXJlIGFjdHVhbGx5IG5vdCBleHBsaWNpdGx5IHNlbnQsCiAgICAgICAgICAgICAgICAvLyBidXQgSSBhZGQgYWxsIG9mIHRoZW0gaGVyZSBmb3JlIHJlZmVyZW5jZSBhbmQgZnV0dXJlIHByb29maW5nLgogICAgICAgICAgICAgICAgaWYgKCh0eXBlID09PSAndW5hdmFpbGFibGUnKSB8fAogICAgICAgICAgICAgICAgICAgICAgICAodHlwZSA9PT0gJ3Byb2JlJykgfHwKICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGUgPT09ICdlcnJvcicpIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlID09PSAndW5zdWJzY3JpYmUnKSB8fAogICAgICAgICAgICAgICAgICAgICAgICAodHlwZSA9PT0gJ3Vuc3Vic2NyaWJlZCcpIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlID09PSAnc3Vic2NyaWJlJykgfHwKICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGUgPT09ICdzdWJzY3JpYmVkJykpIHsKICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZSA9ICRwcmVzKHsndHlwZSc6dHlwZX0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ29ubGluZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2UgPSAkcHJlcygpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbmNlID0gJHByZXMoKS5jKCdzaG93JykudCh0eXBlKS51cCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzX21lc3NhZ2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2UuYygnc3RhdHVzJykudChzdGF0dXNfbWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5zZW5kKHByZXNlbmNlKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNldFN0YXR1czogZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNlbmRQcmVzZW5jZSh2YWx1ZSk7CiAgICAgICAgICAgICAgICB0aGlzLnNhdmUoeydzdGF0dXMnOiB2YWx1ZX0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2V0U3RhdHVzTWVzc2FnZTogZnVuY3Rpb24gKHN0YXR1c19tZXNzYWdlKSB7CiAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLnNlbmQoJHByZXMoKS5jKCdzaG93JykudCh0aGlzLmdldCgnc3RhdHVzJykpLnVwKCkuYygnc3RhdHVzJykudChzdGF0dXNfbWVzc2FnZSkpOwogICAgICAgICAgICAgICAgdGhpcy5zYXZlKHsnc3RhdHVzX21lc3NhZ2UnOiBzdGF0dXNfbWVzc2FnZX0pOwogICAgICAgICAgICAgICAgaWYgKHRoaXMueGhyX2N1c3RvbV9zdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICB0aGlzLnhocl9jdXN0b21fc3RhdHVzX3VybCwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7J21zZyc6IHN0YXR1c19tZXNzYWdlfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuWE1QUFN0YXR1c1ZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7CiAgICAgICAgICAgIGVsOiAic3BhbiN4bXBwLXN0YXR1cy1ob2xkZXIiLAoKICAgICAgICAgICAgZXZlbnRzOiB7CiAgICAgICAgICAgICAgICAiY2xpY2sgYS5jaG9vc2UteG1wcC1zdGF0dXMiOiAidG9nZ2xlT3B0aW9ucyIsCiAgICAgICAgICAgICAgICAiY2xpY2sgI2ZhbmN5LXhtcHAtc3RhdHVzLXNlbGVjdCBhLmNoYW5nZS14bXBwLXN0YXR1cy1tZXNzYWdlIjogInJlbmRlclN0YXR1c0NoYW5nZUZvcm0iLAogICAgICAgICAgICAgICAgInN1Ym1pdCAjc2V0LWN1c3RvbS14bXBwLXN0YXR1cyI6ICJzZXRTdGF0dXNNZXNzYWdlIiwKICAgICAgICAgICAgICAgICJjbGljayAuZHJvcGRvd24gZGQgdWwgbGkgYSI6ICJzZXRTdGF0dXMiCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCJjaGFuZ2UiLCB0aGlzLnVwZGF0ZVN0YXR1c1VJLCB0aGlzKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHRoZSBkZWZhdWx0IGRyb3Bkb3duIHdpdGggc29tZXRoaW5nIG5pY2VyCiAgICAgICAgICAgICAgICB2YXIgJHNlbGVjdCA9IHRoaXMuJGVsLmZpbmQoJ3NlbGVjdCNzZWxlY3QteG1wcC1zdGF0dXMnKSwKICAgICAgICAgICAgICAgICAgICBjaGF0X3N0YXR1cyA9IHRoaXMubW9kZWwuZ2V0KCdzdGF0dXMnKSB8fCAnb2ZmbGluZScsCiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9ICQoJ29wdGlvbicsICRzZWxlY3QpLAogICAgICAgICAgICAgICAgICAgICRvcHRpb25zX3RhcmdldCwKICAgICAgICAgICAgICAgICAgICBvcHRpb25zX2xpc3QgPSBbXSwKICAgICAgICAgICAgICAgICAgICB0aGF0ID0gdGhpczsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmh0bWwoY29udmVyc2UudGVtcGxhdGVzLmNob29zZV9zdGF0dXMoKSk7CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCcjZmFuY3kteG1wcC1zdGF0dXMtc2VsZWN0JykKICAgICAgICAgICAgICAgICAgICAgICAgLmh0bWwoY29udmVyc2UudGVtcGxhdGVzLmNoYXRfc3RhdHVzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdGF0dXNfbWVzc2FnZSc6IHRoaXMubW9kZWwuZ2V0KCdzdGF0dXNfbWVzc2FnZScpIHx8IF9fKCJJIGFtICUxJHMiLCB0aGlzLmdldFByZXR0eVN0YXR1cyhjaGF0X3N0YXR1cykpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXRfc3RhdHVzJzogY2hhdF9zdGF0dXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGVzY19jdXN0b21fc3RhdHVzJzogX18oJ0NsaWNrIGhlcmUgdG8gd3JpdGUgYSBjdXN0b20gc3RhdHVzIG1lc3NhZ2UnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXNjX2NoYW5nZV9zdGF0dXMnOiBfXygnQ2xpY2sgdG8gY2hhbmdlIHlvdXIgY2hhdCBzdGF0dXMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgLy8gaXRlcmF0ZSB0aHJvdWdoIGFsbCB0aGUgPG9wdGlvbj4gZWxlbWVudHMgYW5kIGFkZCBvcHRpb24gdmFsdWVzCiAgICAgICAgICAgICAgICBvcHRpb25zLmVhY2goZnVuY3Rpb24gKCl7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc19saXN0LnB1c2goY29udmVyc2UudGVtcGxhdGVzLnN0YXR1c19vcHRpb24oewogICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiAkKHRoaXMpLnZhbCgpLAogICAgICAgICAgICAgICAgICAgICAgICAndGV4dCc6IHRoaXMudGV4dAogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgJG9wdGlvbnNfdGFyZ2V0ID0gdGhpcy4kZWwuZmluZCgiI3RhcmdldCBkZCB1bCIpLmhpZGUoKTsKICAgICAgICAgICAgICAgICRvcHRpb25zX3RhcmdldC5hcHBlbmQob3B0aW9uc19saXN0LmpvaW4oJycpKTsKICAgICAgICAgICAgICAgICRzZWxlY3QucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHRvZ2dsZU9wdGlvbnM6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICQoZXYudGFyZ2V0KS5wYXJlbnQoKS5wYXJlbnQoKS5zaWJsaW5ncygnZGQnKS5maW5kKCd1bCcpLnRvZ2dsZSgnZmFzdCcpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVuZGVyU3RhdHVzQ2hhbmdlRm9ybTogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgdmFyIHN0YXR1c19tZXNzYWdlID0gdGhpcy5tb2RlbC5nZXQoJ3N0YXR1cycpIHx8ICdvZmZsaW5lJzsKICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IGNvbnZlcnNlLnRlbXBsYXRlcy5jaGFuZ2Vfc3RhdHVzX21lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgICdzdGF0dXNfbWVzc2FnZSc6IHN0YXR1c19tZXNzYWdlLAogICAgICAgICAgICAgICAgICAgICdsYWJlbF9jdXN0b21fc3RhdHVzJzogX18oJ0N1c3RvbSBzdGF0dXMnKSwKICAgICAgICAgICAgICAgICAgICAnbGFiZWxfc2F2ZSc6IF9fKCdTYXZlJykKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgnLnhtcHAtc3RhdHVzJykucmVwbGFjZVdpdGgoaW5wdXQpOwogICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgnLmN1c3RvbS14bXBwLXN0YXR1cycpLmZvY3VzKCkuZm9jdXMoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNldFN0YXR1c01lc3NhZ2U6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIHZhciBzdGF0dXNfbWVzc2FnZSA9ICQoZXYudGFyZ2V0KS5maW5kKCdpbnB1dCcpLnZhbCgpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5zZXRTdGF0dXNNZXNzYWdlKHN0YXR1c19tZXNzYWdlKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNldFN0YXR1czogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgdmFyICRlbCA9ICQoZXYudGFyZ2V0KSwKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICRlbC5hdHRyKCdkYXRhLXZhbHVlJyk7CiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdsb2dvdXQnKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgiLmRyb3Bkb3duIGRkIHVsIikuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmxvZ091dCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldFN0YXR1cyh2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgiLmRyb3Bkb3duIGRkIHVsIikuaGlkZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgZ2V0UHJldHR5U3RhdHVzOiBmdW5jdGlvbiAoc3RhdCkgewogICAgICAgICAgICAgICAgdmFyIHByZXR0eV9zdGF0dXM7CiAgICAgICAgICAgICAgICBpZiAoc3RhdCA9PT0gJ2NoYXQnKSB7CiAgICAgICAgICAgICAgICAgICAgcHJldHR5X3N0YXR1cyA9IF9fKCdvbmxpbmUnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdCA9PT0gJ2RuZCcpIHsKICAgICAgICAgICAgICAgICAgICBwcmV0dHlfc3RhdHVzID0gX18oJ2J1c3knKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdCA9PT0gJ3hhJykgewogICAgICAgICAgICAgICAgICAgIHByZXR0eV9zdGF0dXMgPSBfXygnYXdheSBmb3IgbG9uZycpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ID09PSAnYXdheScpIHsKICAgICAgICAgICAgICAgICAgICBwcmV0dHlfc3RhdHVzID0gX18oJ2F3YXknKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcHJldHR5X3N0YXR1cyA9IF9fKHN0YXQpIHx8IF9fKCdvbmxpbmUnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBwcmV0dHlfc3RhdHVzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgdXBkYXRlU3RhdHVzVUk6IGZ1bmN0aW9uIChtb2RlbCkgewogICAgICAgICAgICAgICAgaWYgKCEoXy5oYXMobW9kZWwuY2hhbmdlZCwgJ3N0YXR1cycpKSAmJiAhKF8uaGFzKG1vZGVsLmNoYW5nZWQsICdzdGF0dXNfbWVzc2FnZScpKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBzdGF0ID0gbW9kZWwuZ2V0KCdzdGF0dXMnKTsKICAgICAgICAgICAgICAgIC8vICMgRm9yIHRyYW5zbGF0b3JzOiB0aGUgJTEkcyBwYXJ0IGdldHMgcmVwbGFjZWQgd2l0aCB0aGUgc3RhdHVzCiAgICAgICAgICAgICAgICAvLyAjIEV4YW1wbGUsIEkgYW0gb25saW5lCiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzX21lc3NhZ2UgPSBtb2RlbC5nZXQoJ3N0YXR1c19tZXNzYWdlJykgfHwgX18oIkkgYW0gJTEkcyIsIHRoaXMuZ2V0UHJldHR5U3RhdHVzKHN0YXQpKTsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmZpbmQoJyNmYW5jeS14bXBwLXN0YXR1cy1zZWxlY3QnKS5odG1sKAogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLnRlbXBsYXRlcy5jaGF0X3N0YXR1cyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdjaGF0X3N0YXR1cyc6IHN0YXQsCiAgICAgICAgICAgICAgICAgICAgICAgICdzdGF0dXNfbWVzc2FnZSc6IHN0YXR1c19tZXNzYWdlLAogICAgICAgICAgICAgICAgICAgICAgICAnZGVzY19jdXN0b21fc3RhdHVzJzogX18oJ0NsaWNrIGhlcmUgdG8gd3JpdGUgYSBjdXN0b20gc3RhdHVzIG1lc3NhZ2UnKSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2Rlc2NfY2hhbmdlX3N0YXR1cyc6IF9fKCdDbGljayB0byBjaGFuZ2UgeW91ciBjaGF0IHN0YXR1cycpCiAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuQk9TSFNlc3Npb24gPSBCYWNrYm9uZS5Nb2RlbDsKICAgICAgICB0aGlzLkZlYXR1cmUgPSBCYWNrYm9uZS5Nb2RlbDsKICAgICAgICB0aGlzLkZlYXR1cmVzID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoewogICAgICAgICAgICAvKiBTZXJ2aWNlIERpc2NvdmVyeQogICAgICAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgICAgICogVGhpcyBjb2xsZWN0aW9uIHN0b3JlcyBGZWF0dXJlIE1vZGVscywgcmVwcmVzZW50aW5nIGZlYXR1cmVzCiAgICAgICAgICAgICogcHJvdmlkZWQgYnkgYXZhaWxhYmxlIFhNUFAgZW50aXRpZXMgKGUuZy4gc2VydmVycykKICAgICAgICAgICAgKiBTZWUgWEVQLTAwMzAgZm9yIG1vcmUgZGV0YWlsczogaHR0cDovL3htcHAub3JnL2V4dGVuc2lvbnMveGVwLTAwMzAuaHRtbAogICAgICAgICAgICAqIEFsbCBmZWF0dXJlcyBhcmUgc2hvd24gaGVyZTogaHR0cDovL3htcHAub3JnL3JlZ2lzdHJhci9kaXNjby1mZWF0dXJlcy5odG1sCiAgICAgICAgICAgICovCiAgICAgICAgICAgIG1vZGVsOiBjb252ZXJzZS5GZWF0dXJlLAogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmFkZENsaWVudElkZW50aXRpZXMoKS5hZGRDbGllbnRGZWF0dXJlcygpOwogICAgICAgICAgICAgICAgdGhpcy5icm93c2VyU3RvcmFnZSA9IG5ldyBCYWNrYm9uZS5Ccm93c2VyU3RvcmFnZVtjb252ZXJzZS5zdG9yYWdlXSgKICAgICAgICAgICAgICAgICAgICBiNjRfc2hhMSgnY29udmVyc2UuZmVhdHVyZXMnK2NvbnZlcnNlLmJhcmVfamlkKSk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5icm93c2VyU3RvcmFnZS5yZWNvcmRzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIC8vIGJyb3dzZXJTdG9yYWdlIGlzIGVtcHR5LCBzbyB3ZSd2ZSBsaWtlbHkgbmV2ZXIgcXVlcmllZCB0aGlzCiAgICAgICAgICAgICAgICAgICAgLy8gZG9tYWluIGZvciBmZWF0dXJlcyB5ZXQKICAgICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLmRpc2NvLmluZm8oY29udmVyc2UuZG9tYWluLCBudWxsLCAkLnByb3h5KHRoaXMub25JbmZvLCB0aGlzKSk7CiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5kaXNjby5pdGVtcyhjb252ZXJzZS5kb21haW4sIG51bGwsICQucHJveHkodGhpcy5vbkl0ZW1zLCB0aGlzKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuZmV0Y2goe2FkZDp0cnVlfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhZGRDbGllbnRJZGVudGl0aWVzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAvKiBTZWUgaHR0cDovL3htcHAub3JnL3JlZ2lzdHJhci9kaXNjby1jYXRlZ29yaWVzLmh0bWwKICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24uZGlzY28uYWRkSWRlbnRpdHkoJ2NsaWVudCcsICd3ZWInLCAnQ29udmVyc2UuanMnKTsKICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGFkZENsaWVudEZlYXR1cmVzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAvKiBUaGUgc3Ryb3BoZS5kaXNjby5qcyBwbHVnaW4ga2VlcHMgYSBsaXN0IG9mIGZlYXR1cmVzIHdoaWNoCiAgICAgICAgICAgICAgICAgKiBpdCB3aWxsIGFkdmVydGlzZSB0byBhbnkgI2luZm8gcXVlcmllcyBtYWRlIHRvIGl0LgogICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAqIFNlZTogaHR0cDovL3htcHAub3JnL2V4dGVuc2lvbnMveGVwLTAwMzAuaHRtbCNpbmZvCiAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICogVE9ETzogdGhlc2UgZmVhdHVyZXMgbmVlZCB0byBiZSBhZGRlZCBpbiB0aGUgcmVsZXZhbnQKICAgICAgICAgICAgICAgICAqIGZlYXR1cmUtcHJvdmlkaW5nIE1vZGVscywgbm90IGhlcmUKICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24uZGlzY28uYWRkRmVhdHVyZSgnaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvY2hhdHN0YXRlcycpOyAvLyBMaW1pdGVkIHN1cHBvcnQKICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLmRpc2NvLmFkZEZlYXR1cmUoJ2h0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL3Jvc3RlcngnKTsgLy8gTGltaXRlZCBzdXBwb3J0CiAgICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5kaXNjby5hZGRGZWF0dXJlKCdqYWJiZXI6eDpjb25mZXJlbmNlJyk7CiAgICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5kaXNjby5hZGRGZWF0dXJlKCd1cm46eG1wcDpjYXJib25zOjInKTsKICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLmRpc2NvLmFkZEZlYXR1cmUoJ3ZjYXJkLXRlbXAnKTsKICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLmRpc2NvLmFkZEZlYXR1cmUoU3Ryb3BoZS5OUy5CT1NIKTsKICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLmRpc2NvLmFkZEZlYXR1cmUoU3Ryb3BoZS5OUy5ESVNDT19JTkZPKTsKICAgICAgICAgICAgICAgICBjb252ZXJzZS5jb25uZWN0aW9uLmRpc2NvLmFkZEZlYXR1cmUoU3Ryb3BoZS5OUy5NVUMpOwogICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25JdGVtczogZnVuY3Rpb24gKHN0YW56YSkgewogICAgICAgICAgICAgICAgJChzdGFuemEpLmZpbmQoJ3F1ZXJ5IGl0ZW0nKS5lYWNoKCQucHJveHkoZnVuY3Rpb24gKGlkeCwgaXRlbSkgewogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmNvbm5lY3Rpb24uZGlzY28uaW5mbygKICAgICAgICAgICAgICAgICAgICAgICAgJChpdGVtKS5hdHRyKCdqaWQnKSwKICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgJC5wcm94eSh0aGlzLm9uSW5mbywgdGhpcykpOwogICAgICAgICAgICAgICAgfSwgdGhpcykpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25JbmZvOiBmdW5jdGlvbiAoc3RhbnphKSB7CiAgICAgICAgICAgICAgICB2YXIgJHN0YW56YSA9ICQoc3RhbnphKTsKICAgICAgICAgICAgICAgIGlmICgoJHN0YW56YS5maW5kKCdpZGVudGl0eVtjYXRlZ29yeT1zZXJ2ZXJdW3R5cGU9aW1dJykubGVuZ3RoID09PSAwKSAmJgogICAgICAgICAgICAgICAgICAgICgkc3RhbnphLmZpbmQoJ2lkZW50aXR5W2NhdGVnb3J5PWNvbmZlcmVuY2VdW3R5cGU9dGV4dF0nKS5sZW5ndGggPT09IDApKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpc24ndCBhbiBJTSBzZXJ2ZXIgY29tcG9uZW50CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJHN0YW56YS5maW5kKCdmZWF0dXJlJykuZWFjaCgkLnByb3h5KGZ1bmN0aW9uIChpZHgsIGZlYXR1cmUpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICd2YXInOiAkKGZlYXR1cmUpLmF0dHIoJ3ZhcicpLAogICAgICAgICAgICAgICAgICAgICAgICAnZnJvbSc6ICRzdGFuemEuYXR0cignZnJvbScpCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5Mb2dpblBhbmVsID0gQmFja2JvbmUuVmlldy5leHRlbmQoewogICAgICAgICAgICB0YWdOYW1lOiAnZGl2JywKICAgICAgICAgICAgaWQ6ICJsb2dpbi1kaWFsb2ciLAogICAgICAgICAgICBldmVudHM6IHsKICAgICAgICAgICAgICAgICdzdWJtaXQgZm9ybSNjb252ZXJzZS1sb2dpbic6ICdhdXRoZW50aWNhdGUnCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBjb25uZWN0OiBmdW5jdGlvbiAoJGZvcm0sIGppZCwgcGFzc3dvcmQpIHsKICAgICAgICAgICAgICAgIGlmICgkZm9ybSkgewogICAgICAgICAgICAgICAgICAgICRmb3JtLmZpbmQoJ2lucHV0W3R5cGU9c3VibWl0XScpLmhpZGUoKS5hZnRlcignPHNwYW4gY2xhc3M9InNwaW5uZXIgbG9naW4tc3VibWl0Ii8+Jyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSBTdHJvcGhlLmdldFJlc291cmNlRnJvbUppZChqaWQpOwogICAgICAgICAgICAgICAgaWYgKCFyZXNvdXJjZSkgewogICAgICAgICAgICAgICAgICAgIGppZCArPSAnL2NvbnZlcnNlLmpzLScgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTM5NzQ5ODI1KS50b1N0cmluZygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udmVyc2UuY29ubmVjdGlvbi5jb25uZWN0KGppZCwgcGFzc3dvcmQsIGNvbnZlcnNlLm9uQ29ubmVjdCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoY2ZnKSB7CiAgICAgICAgICAgICAgICBjZmcuJHBhcmVudC5odG1sKHRoaXMuJGVsLmh0bWwoCiAgICAgICAgICAgICAgICAgICAgY29udmVyc2UudGVtcGxhdGVzLmxvZ2luX3BhbmVsKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsX3VzZXJuYW1lJzogX18oJ1hNUFAvSmFiYmVyIFVzZXJuYW1lOicpLAogICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWxfcGFzc3dvcmQnOiBfXygnUGFzc3dvcmQ6JyksCiAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbF9sb2dpbic6IF9fKCdMb2cgSW4nKQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICApKTsKICAgICAgICAgICAgICAgIHRoaXMuJHRhYnMgPSBjZmcuJHBhcmVudC5wYXJlbnQoKS5maW5kKCcjY29udHJvbGJveC10YWJzJyk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMuJHRhYnMuYXBwZW5kKGNvbnZlcnNlLnRlbXBsYXRlcy5sb2dpbl90YWIoe2xhYmVsX3NpZ25faW46IF9fKCdTaWduIGluJyl9KSk7CiAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCdpbnB1dCNqaWQnKS5mb2N1cygpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhdXRoZW50aWNhdGU6IGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgaWYgKGV2ICYmIGV2LnByZXZlbnREZWZhdWx0KSB7IGV2LnByZXZlbnREZWZhdWx0KCk7IH0KICAgICAgICAgICAgICAgIHZhciAkZm9ybSA9ICQoZXYudGFyZ2V0KSwKICAgICAgICAgICAgICAgICAgICAkamlkX2lucHV0ID0gJGZvcm0uZmluZCgnaW5wdXRbbmFtZT1qaWRdJyksCiAgICAgICAgICAgICAgICAgICAgamlkID0gJGppZF9pbnB1dC52YWwoKSwKICAgICAgICAgICAgICAgICAgICAkcHdfaW5wdXQgPSAkZm9ybS5maW5kKCdpbnB1dFtuYW1lPXBhc3N3b3JkXScpLAogICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkID0gJHB3X2lucHV0LnZhbCgpLAogICAgICAgICAgICAgICAgICAgICRic3VfaW5wdXQgPSBudWxsLAogICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGZhbHNlOwoKICAgICAgICAgICAgICAgIGlmICghIGNvbnZlcnNlLmJvc2hfc2VydmljZV91cmwpIHsKICAgICAgICAgICAgICAgICAgICAkYnN1X2lucHV0ID0gJGZvcm0uZmluZCgnaW5wdXQjYm9zaF9zZXJ2aWNlX3VybCcpOwogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLmJvc2hfc2VydmljZV91cmwgPSAkYnN1X2lucHV0LnZhbCgpOwogICAgICAgICAgICAgICAgICAgIGlmICghIGNvbnZlcnNlLmJvc2hfc2VydmljZV91cmwpICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICRic3VfaW5wdXQuYWRkQ2xhc3MoJ2Vycm9yJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCEgamlkKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAkamlkX2lucHV0LmFkZENsYXNzKCdlcnJvcicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCEgcGFzc3dvcmQpICB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAkcHdfaW5wdXQuYWRkQ2xhc3MoJ2Vycm9yJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0KCRmb3JtLCBqaWQsIHBhc3N3b3JkKTsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGhpcy4kdGFicy5lbXB0eSgpOwogICAgICAgICAgICAgICAgdGhpcy4kZWwucGFyZW50KCkuZW1wdHkoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB0aGlzLkNvbnRyb2xCb3hUb2dnbGUgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7CiAgICAgICAgICAgIHRhZ05hbWU6ICdhJywKICAgICAgICAgICAgY2xhc3NOYW1lOiAndG9nZ2xlLWNvbnRyb2xib3gnLAogICAgICAgICAgICBpZDogJ3RvZ2dsZS1jb250cm9sYm94JywKICAgICAgICAgICAgZXZlbnRzOiB7CiAgICAgICAgICAgICAgICAnY2xpY2snOiAnb25DbGljaycKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgICAgICAgJ2hyZWYnOiAiIyIKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICQoJyNjb252ZXJzZWpzJykucHJlcGVuZCh0aGlzLiRlbC5odG1sKAogICAgICAgICAgICAgICAgICAgIGNvbnZlcnNlLnRlbXBsYXRlcy5jb250cm9sYm94X3RvZ2dsZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbF90b2dnbGUnOiBfXygnVG9nZ2xlIGNoYXQnKQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICApKTsKICAgICAgICAgICAgICAgIC8vIFdlIGxldCB0aGUgcmVuZGVyIG1ldGhvZCBvZiBDb250cm9sQm94VmlldyBkZWNpZGUgd2hldGhlcgogICAgICAgICAgICAgICAgLy8gdGhlIENvbnRyb2xCb3ggb3IgdGhlIFRvZ2dsZSBtdXN0IGJlIHNob3duLiBUaGlzIHByZXZlbnRzCiAgICAgICAgICAgICAgICAvLyBhcnRpZmFjdHMgKGkuZS4gb24gcGFnZSBsb2FkIHRoZSB0b2dnbGUgaXMgc2hvd24gb25seSB0byB0aGVuCiAgICAgICAgICAgICAgICAvLyBzZWNvbmRzIGxhdGVyIGJlIGhpZGRlbiBpbiBmYXZvciBvZiB0aGUgY29udHJvbCBib3gpLgogICAgICAgICAgICAgICAgdGhpcy4kZWwuaGlkZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBoaWRlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLmZhZGVPdXQoJ2Zhc3QnLCBjYWxsYmFjayk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzaG93OiBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIHRoaXMuJGVsLnNob3coJ2Zhc3QnLCBjYWxsYmFjayk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzaG93Q29udHJvbEJveDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xib3ggPSBjb252ZXJzZS5jaGF0Ym94ZXMuZ2V0KCdjb250cm9sYm94Jyk7CiAgICAgICAgICAgICAgICBpZiAoIWNvbnRyb2xib3gpIHsKICAgICAgICAgICAgICAgICAgICBjb250cm9sYm94ID0gY29udmVyc2UuYWRkQ29udHJvbEJveCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGNvbnZlcnNlLmNvbm5lY3Rpb24uY29ubmVjdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgY29udHJvbGJveC5zYXZlKHtjbG9zZWQ6IGZhbHNlfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGNvbnRyb2xib3gudHJpZ2dlcignc2hvdycpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIGlmICgkKCJkaXYjY29udHJvbGJveCIpLmlzKCc6dmlzaWJsZScpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xib3ggPSBjb252ZXJzZS5jaGF0Ym94ZXMuZ2V0KCdjb250cm9sYm94Jyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnZlcnNlLmNvbm5lY3Rpb24uY29ubmVjdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xib3guc2F2ZSh7Y2xvc2VkOiB0cnVlfSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGJveC50cmlnZ2VyKCdoaWRlJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dDb250cm9sQm94KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5hZGRDb250cm9sQm94ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jaGF0Ym94ZXMuYWRkKHsKICAgICAgICAgICAgICAgIGlkOiAnY29udHJvbGJveCcsCiAgICAgICAgICAgICAgICBib3hfaWQ6ICdjb250cm9sYm94JywKICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5kZWZhdWx0X2JveF9oZWlnaHQsCiAgICAgICAgICAgICAgICBjbG9zZWQ6ICF0aGlzLnNob3dfY29udHJvbGJveF9ieV9kZWZhdWx0CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIHRoaXMuaW5pdENvbm5lY3Rpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciByaWQsIHNpZCwgamlkOwogICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uICYmIHRoaXMuY29ubmVjdGlvbi5jb25uZWN0ZWQpIHsKICAgICAgICAgICAgICAgIHRoaXMub25Db25uZWN0ZWQoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIFhYWDogaXQncyBub3QgeWV0IGNsZWFyIHdoYXQgdGhlIG9yZGVyIG9mIHByZWZlcmVuY2Ugc2hvdWxkCiAgICAgICAgICAgICAgICAvLyBiZSBiZXR3ZWVuIFJJRCBhbmQgU0lEIHJlY2VpdmVkIHZpYSB0aGUgaW5pdGlhbGl6ZSBtZXRob2Qgb3IKICAgICAgICAgICAgICAgIC8vIHRob3NlIHJlY2VpdmVkIGZyb20gc2Vzc2lvblN0b3JhZ2UuCiAgICAgICAgICAgICAgICAvLwogICAgICAgICAgICAgICAgLy8gV2hhdCBkbyB5b3Ugd2UgaWYgd2UgcmVjZWl2ZSB2YWx1ZXMgZnJvbSBib3RoIGF2ZW51ZXM/CiAgICAgICAgICAgICAgICAvLwogICAgICAgICAgICAgICAgLy8gQWxzbywgd2hhdCBkbyB3ZSBkbyB3aGVuIHRoZSBrZWVwYWxpdmUgc2Vzc2lvbiB2YWx1ZXMgYXJlCiAgICAgICAgICAgICAgICAvLyBleHBpcmVkPyBEbyB3ZSB0cnkgdG8gZmFsbCBiYWNrPwogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmJvc2hfc2VydmljZV91cmwpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdygiRXJyb3I6IHlvdSBtdXN0IHN1cHBseSBhIHZhbHVlIGZvciB0aGUgYm9zaF9zZXJ2aWNlX3VybCIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbmV3IFN0cm9waGUuQ29ubmVjdGlvbih0aGlzLmJvc2hfc2VydmljZV91cmwpOwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLnByZWJpbmQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5qaWQgJiYgdGhpcy5zaWQgJiYgdGhpcy5yaWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLmF0dGFjaCh0aGlzLmppZCwgdGhpcy5zaWQsIHRoaXMucmlkLCB0aGlzLm9uQ29ubmVjdCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5rZWVwYWxpdmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3coIklmIHlvdSB1c2UgcHJlYmluZCBhbmQgZG9uJ3QgdXNlIGtlZXBhbGl2ZSwgIisKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRoZW4geW91IE1VU1Qgc3VwcGx5IEpJRCwgUklEIGFuZCBTSUQgdmFsdWVzIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHRoaXMua2VlcGFsaXZlKSB7CiAgICAgICAgICAgICAgICAgICAgcmlkID0gdGhpcy5zZXNzaW9uLmdldCgncmlkJyk7CiAgICAgICAgICAgICAgICAgICAgc2lkID0gdGhpcy5zZXNzaW9uLmdldCgnc2lkJyk7CiAgICAgICAgICAgICAgICAgICAgamlkID0gdGhpcy5zZXNzaW9uLmdldCgnamlkJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJpZCAmJiBqaWQgJiYgc2lkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Vzc2lvbi5zYXZlKHtyaWQ6IHJpZH0pOyAvLyBUaGUgUklEIG5lZWRzIHRvIGJlIGluY3JlYXNlZCB3aXRoIGVhY2ggcmVxdWVzdC4KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLmF0dGFjaChqaWQsIHNpZCwgcmlkLCB0aGlzLm9uQ29ubmVjdCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZWJpbmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29ubmVjdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdub1Jlc3VtZWFibGVTZXNzaW9uJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5fdGVhckRvd24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIC8qIFJlbW92ZSB0aG9zZSB2aWV3cyB3aGljaCBhcmUgb25seSBhbGxvd2VkIHdpdGggYSB2YWxpZAogICAgICAgICAgICAgKiBjb25uZWN0aW9uLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgdGhpcy5pbml0aWFsX3ByZXNlbmNlX3NlbnQgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5yb3N0ZXIub2ZmKCkucmVzZXQoKTsgLy8gUmVtb3ZlcyByb3N0ZXIgY29udGFjdHMKICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLnJvc3Rlci5fY2FsbGJhY2tzID0gW107IC8vIFJlbW92ZSBhbGwgUm9zdGVyIGhhbmRsZXJzIChlLmcuIHJvc3RlckhhbmRsZXIpCiAgICAgICAgICAgIHRoaXMucm9zdGVydmlldy5tb2RlbC5vZmYoKS5yZXNldCgpOyAvLyBSZW1vdmVzIHJvc3RlciBncm91cHMKICAgICAgICAgICAgdGhpcy5yb3N0ZXJ2aWV3LnVuZGVsZWdhdGVFdmVudHMoKS5yZW1vdmUoKTsKICAgICAgICAgICAgdGhpcy5jaGF0Ym94ZXMucmVtb3ZlKCk7IC8vIERvbid0IGNhbGwgb2ZmKCksIGV2ZW50cyB3b24ndCBnZXQgcmUtcmVnaXN0ZXJlZCB1cG9uIHJlY29ubmVjdC4KICAgICAgICAgICAgaWYgKHRoaXMuZmVhdHVyZXMpIHsKICAgICAgICAgICAgICAgIHRoaXMuZmVhdHVyZXMucmVzZXQoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGhpcy5taW5pbWl6ZWRfY2hhdHMpIHsKICAgICAgICAgICAgICAgIHRoaXMubWluaW1pemVkX2NoYXRzLnVuZGVsZWdhdGVFdmVudHMoKS5tb2RlbC5yZXNldCgpOwogICAgICAgICAgICAgICAgdGhpcy5taW5pbWl6ZWRfY2hhdHMucmVtb3ZlQWxsKCk7IC8vIFJlbW92ZSBzdWItdmlld3MKICAgICAgICAgICAgICAgIHRoaXMubWluaW1pemVkX2NoYXRzLnRlYXJEb3duKCkucmVtb3ZlKCk7IC8vIFJlbW92ZSBvdmVydmlldwogICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubWluaW1pemVkX2NoYXRzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CgogICAgICAgIHRoaXMuX2luaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRoaXMuY2hhdGJveGVzID0gbmV3IHRoaXMuQ2hhdEJveGVzKCk7CiAgICAgICAgICAgIHRoaXMuY2hhdGJveHZpZXdzID0gbmV3IHRoaXMuQ2hhdEJveFZpZXdzKHttb2RlbDogdGhpcy5jaGF0Ym94ZXN9KTsKICAgICAgICAgICAgdGhpcy5jb250cm9sYm94dG9nZ2xlID0gbmV3IHRoaXMuQ29udHJvbEJveFRvZ2dsZSgpOwogICAgICAgICAgICB0aGlzLm90ciA9IG5ldyB0aGlzLk9UUigpOwogICAgICAgICAgICB0aGlzLmluaXRTZXNzaW9uKCk7CiAgICAgICAgICAgIHRoaXMuaW5pdENvbm5lY3Rpb24oKTsKICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbikgewogICAgICAgICAgICAgICAgdGhpcy5hZGRDb250cm9sQm94KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZVBsdWdpbnMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIF8uZWFjaCh0aGlzLnBsdWdpbnMsICQucHJveHkoZnVuY3Rpb24gKHBsdWdpbikgewogICAgICAgICAgICAgICAgJC5wcm94eShwbHVnaW4sIHRoaXMpKHRoaXMpOwogICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gSW5pdGlhbGl6YXRpb24KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLQogICAgICAgIC8vIFRoaXMgaXMgdGhlIGVuZCBvZiB0aGUgaW5pdGlhbGl6ZSBtZXRob2QuCiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZVBsdWdpbnMoKTsKICAgICAgICB0aGlzLl9pbml0aWFsaXplKCk7CiAgICAgICAgdGhpcy5yZWdpc3Rlckdsb2JhbEV2ZW50SGFuZGxlcnMoKTsKICAgICAgICBjb252ZXJzZS5lbWl0KCdpbml0aWFsaXplZCcpOwogICAgfTsKCiAgICB2YXIgd3JhcHBlZENoYXRCb3ggPSBmdW5jdGlvbiAoY2hhdGJveCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICdlbmRPVFInOiAkLnByb3h5KGNoYXRib3guZW5kT1RSLCBjaGF0Ym94KSwKICAgICAgICAgICAgJ2dldCc6ICQucHJveHkoY2hhdGJveC5nZXQsIGNoYXRib3gpLAogICAgICAgICAgICAnaW5pdGlhdGVPVFInOiAkLnByb3h5KGNoYXRib3guaW5pdGlhdGVPVFIsIGNoYXRib3gpLAogICAgICAgICAgICAnbWF4aW1pemUnOiAkLnByb3h5KGNoYXRib3gubWF4aW1pemUsIGNoYXRib3gpLAogICAgICAgICAgICAnbWluaW1pemUnOiAkLnByb3h5KGNoYXRib3gubWluaW1pemUsIGNoYXRib3gpLAogICAgICAgICAgICAnc2V0JzogJC5wcm94eShjaGF0Ym94LnNldCwgY2hhdGJveCkKICAgICAgICB9OwogICAgfTsKICAgIHJldHVybiB7CiAgICAgICAgJ2dldEJ1ZGR5JzogZnVuY3Rpb24gKGppZCkgewogICAgICAgICAgICB2YXIgY29udGFjdCA9IGNvbnZlcnNlLnJvc3Rlci5nZXQoU3Ryb3BoZS5nZXRCYXJlSmlkRnJvbUppZChqaWQpKTsKICAgICAgICAgICAgaWYgKGNvbnRhY3QpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjb250YWN0LmF0dHJpYnV0ZXM7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICdnZXRDaGF0Qm94JzogZnVuY3Rpb24gKGppZCkgewogICAgICAgICAgICB2YXIgY2hhdGJveCA9IGNvbnZlcnNlLmNoYXRib3hlcy5nZXQoamlkKTsKICAgICAgICAgICAgaWYgKGNoYXRib3gpIHsKICAgICAgICAgICAgICAgIHJldHVybiB3cmFwcGVkQ2hhdEJveChjaGF0Ym94KTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgJ2dldFJJRCc6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKGNvbnZlcnNlLmV4cG9zZV9yaWRfYW5kX3NpZCAmJiB0eXBlb2YgY29udmVyc2UuY29ubmVjdGlvbiAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjb252ZXJzZS5jb25uZWN0aW9uLnJpZCB8fCBjb252ZXJzZS5jb25uZWN0aW9uLl9wcm90by5yaWQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfSwKICAgICAgICAnZ2V0U0lEJzogZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoY29udmVyc2UuZXhwb3NlX3JpZF9hbmRfc2lkICYmIHR5cGVvZiBjb252ZXJzZS5jb25uZWN0aW9uICE9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnNlLmNvbm5lY3Rpb24uc2lkIHx8IGNvbnZlcnNlLmNvbm5lY3Rpb24uX3Byb3RvLnNpZDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9LAogICAgICAgICdpbml0aWFsaXplJzogZnVuY3Rpb24gKHNldHRpbmdzLCBjYWxsYmFjaykgewogICAgICAgICAgICBjb252ZXJzZS5pbml0aWFsaXplKHNldHRpbmdzLCBjYWxsYmFjayk7CiAgICAgICAgfSwKICAgICAgICAnalF1ZXJ5JzogJCwKICAgICAgICAnb3BlbkNoYXRCb3gnOiBmdW5jdGlvbiAoamlkKSB7CiAgICAgICAgICAgIHZhciBjb250YWN0ID0gY29udmVyc2Uucm9zdGVyLmdldChTdHJvcGhlLmdldEJhcmVKaWRGcm9tSmlkKGppZCkpOwogICAgICAgICAgICBpZiAoY29udGFjdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWRDaGF0Qm94KGNvbnZlcnNlLmNoYXRib3h2aWV3cy5zaG93Q2hhdChjb250YWN0LmF0dHJpYnV0ZXMpKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgJ29uY2UnOiBmdW5jdGlvbiAoZXZ0LCBoYW5kbGVyKSB7CiAgICAgICAgICAgIGNvbnZlcnNlLm9uY2UoZXZ0LCBoYW5kbGVyKTsKICAgICAgICB9LAogICAgICAgICdvbic6IGZ1bmN0aW9uIChldnQsIGhhbmRsZXIpIHsKICAgICAgICAgICAgY29udmVyc2Uub24oZXZ0LCBoYW5kbGVyKTsKICAgICAgICB9LAogICAgICAgICdvZmYnOiBmdW5jdGlvbiAoZXZ0LCBoYW5kbGVyKSB7CiAgICAgICAgICAgIGNvbnZlcnNlLm9mZihldnQsIGhhbmRsZXIpOwogICAgICAgIH0sCiAgICAgICAgJ3JlZ2lzdGVyUGx1Z2luJzogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIGNvbnZlcnNlLnBsdWdpbnNbbmFtZV0gPSBjYWxsYmFjazsKICAgICAgICB9CiAgICB9Owp9KSk7CgpyZXF1aXJlLmNvbmZpZyh7CiAgICBiYXNlVXJsOiAnLicsCiAgICBwYXRoczogewogICAgICAgICJiYWNrYm9uZSI6ICAgICAgICAgICAgICAgICAiY29tcG9uZW50cy9iYWNrYm9uZS9iYWNrYm9uZSIsCiAgICAgICAgImJhY2tib25lLmJyb3dzZXJTdG9yYWdlIjogICJjb21wb25lbnRzL2JhY2tib25lLmJyb3dzZXJTdG9yYWdlL2JhY2tib25lLmJyb3dzZXJTdG9yYWdlIiwKICAgICAgICAiYmFja2JvbmUub3ZlcnZpZXciOiAgICAgICAgImNvbXBvbmVudHMvYmFja2JvbmUub3ZlcnZpZXcvYmFja2JvbmUub3ZlcnZpZXciLAogICAgICAgICJib290c3RyYXAiOiAgICAgICAgICAgICAgICAiY29tcG9uZW50cy9ib290c3RyYXAvZGlzdC9qcy9ib290c3RyYXAiLCAgICAgICAgICAgLy8gWFhYOiBPbmx5IHJlcXVpcmVkIGZvciBodHRwczovL2NvbnZlcnNlanMub3JnIHdlYnNpdGUKICAgICAgICAiYm9vdHN0cmFwSlMiOiAgICAgICAgICAgICAgImNvbXBvbmVudHMvYm9vdHN0cmFwSlMvaW5kZXgiLCAgICAgICAgICAgICAgICAgICAgIC8vIFhYWDogT25seSByZXF1aXJlZCBmb3IgaHR0cHM6Ly9jb252ZXJzZWpzLm9yZyB3ZWJzaXRlCiAgICAgICAgImNvbnZlcnNlLWRlcGVuZGVuY2llcyI6ICAgICJzcmMvZGVwcy13ZWJzaXRlIiwKICAgICAgICAiY29udmVyc2UtdGVtcGxhdGVzIjogICAgICAgInNyYy90ZW1wbGF0ZXMiLAogICAgICAgICJldmVudGVtaXR0ZXIiOiAgICAgICAgICAgICAiY29tcG9uZW50cy9vdHIvYnVpbGQvZGVwL2V2ZW50ZW1pdHRlciIsCiAgICAgICAgImpxdWVyeSI6ICAgICAgICAgICAgICAgICAgICJjb21wb25lbnRzL2pxdWVyeS9kaXN0L2pxdWVyeSIsCiAgICAgICAgImpxdWVyeS1wcml2YXRlIjogICAgICAgICAgICJzcmMvanF1ZXJ5LXByaXZhdGUiLAogICAgICAgICJqcXVlcnkuYnJvd3NlciI6ICAgICAgICAgICAiY29tcG9uZW50cy9qcXVlcnkuYnJvd3Nlci9pbmRleCIsCiAgICAgICAgImpxdWVyeS5lYXNpbmciOiAgICAgICAgICAgICJjb21wb25lbnRzL2pxdWVyeS1lYXNpbmctb3JpZ2luYWwvaW5kZXgiLCAgICAgICAgICAvLyBYWFg6IE9ubHkgcmVxdWlyZWQgZm9yIGh0dHBzOi8vY29udmVyc2Vqcy5vcmcgd2Vic2l0ZQogICAgICAgICJtb21lbnQiOiAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50cy9tb21lbnRqcy9tb21lbnQiLAogICAgICAgICJzdHJvcGhlIjogICAgICAgICAgICAgICAgICAiY29tcG9uZW50cy9zdHJvcGhlL3N0cm9waGUiLAogICAgICAgICJzdHJvcGhlLmRpc2NvIjogICAgICAgICAgICAiY29tcG9uZW50cy9zdHJvcGhlanMtcGx1Z2lucy9kaXNjby9zdHJvcGhlLmRpc2NvIiwKICAgICAgICAic3Ryb3BoZS5tdWMiOiAgICAgICAgICAgICAgImNvbXBvbmVudHMvc3Ryb3BoZS5tdWMvaW5kZXgiLAogICAgICAgICJzdHJvcGhlLnJvc3RlciI6ICAgICAgICAgICAic3JjL3N0cm9waGUucm9zdGVyIiwKICAgICAgICAic3Ryb3BoZS52Y2FyZCI6ICAgICAgICAgICAgImNvbXBvbmVudHMvc3Ryb3BoZWpzLXBsdWdpbnMvdmNhcmQvc3Ryb3BoZS52Y2FyZCIsCiAgICAgICAgInRleHQiOiAgICAgICAgICAgICAgICAgICAgICdjb21wb25lbnRzL3JlcXVpcmVqcy10ZXh0L3RleHQnLAogICAgICAgICJ0cGwiOiAgICAgICAgICAgICAgICAgICAgICAnY29tcG9uZW50cy9yZXF1aXJlanMtdHBsLWpjYnJhbmQvdHBsJywKICAgICAgICAidHlwZWFoZWFkIjogICAgICAgICAgICAgICAgImNvbXBvbmVudHMvdHlwZWFoZWFkLmpzL2luZGV4IiwKICAgICAgICAidW5kZXJzY29yZSI6ICAgICAgICAgICAgICAgImNvbXBvbmVudHMvdW5kZXJzY29yZS91bmRlcnNjb3JlIiwKICAgICAgICAidXRpbHMiOiAgICAgICAgICAgICAgICAgICAgInNyYy91dGlscyIsCgogICAgICAgIC8vIE9mZi10aGUtcmVjb3JkLWVuY3J5cHRpb24KICAgICAgICAiYmlnaW50IjogICAgICAgICAgICAgICAic3JjL2JpZ2ludCIsCiAgICAgICAgImNyeXB0byI6ICAgICAgICAgICAgICAgInNyYy9jcnlwdG8iLAogICAgICAgICJjcnlwdG8uYWVzIjogICAgICAgICAgICJjb21wb25lbnRzL290ci92ZW5kb3IvY3J5cHRvanMvYWVzIiwKICAgICAgICAiY3J5cHRvLmNpcGhlci1jb3JlIjogICAiY29tcG9uZW50cy9vdHIvdmVuZG9yL2NyeXB0b2pzL2NpcGhlci1jb3JlIiwKICAgICAgICAiY3J5cHRvLmNvcmUiOiAgICAgICAgICAiY29tcG9uZW50cy9vdHIvdmVuZG9yL2NyeXB0b2pzL2NvcmUiLAogICAgICAgICJjcnlwdG8uZW5jLWJhc2U2NCI6ICAgICJjb21wb25lbnRzL290ci92ZW5kb3IvY3J5cHRvanMvZW5jLWJhc2U2NCIsCiAgICAgICAgImNyeXB0by5ldnBrZGYiOiAgICAgICAgImNvbXBvbmVudHMvY3J5cHRvLWpzLWV2YW52b3NiZXJnL3NyYy9ldnBrZGYiLAogICAgICAgICJjcnlwdG8uaG1hYyI6ICAgICAgICAgICJjb21wb25lbnRzL290ci92ZW5kb3IvY3J5cHRvanMvaG1hYyIsCiAgICAgICAgImNyeXB0by5tZDUiOiAgICAgICAgICAgImNvbXBvbmVudHMvY3J5cHRvLWpzLWV2YW52b3NiZXJnL3NyYy9tZDUiLAogICAgICAgICJjcnlwdG8ubW9kZS1jdHIiOiAgICAgICJjb21wb25lbnRzL290ci92ZW5kb3IvY3J5cHRvanMvbW9kZS1jdHIiLAogICAgICAgICJjcnlwdG8ucGFkLW5vcGFkZGluZyI6ICJjb21wb25lbnRzL290ci92ZW5kb3IvY3J5cHRvanMvcGFkLW5vcGFkZGluZyIsCiAgICAgICAgImNyeXB0by5zaGExIjogICAgICAgICAiY29tcG9uZW50cy9vdHIvdmVuZG9yL2NyeXB0b2pzL3NoYTEiLAogICAgICAgICJjcnlwdG8uc2hhMjU2IjogICAgICAgICJjb21wb25lbnRzL290ci92ZW5kb3IvY3J5cHRvanMvc2hhMjU2IiwKICAgICAgICAic2Fsc2EyMCI6ICAgICAgICAgICAgICAiY29tcG9uZW50cy9vdHIvYnVpbGQvZGVwL3NhbHNhMjAiLAogICAgICAgICJvdHIiOiAgICAgICAgICAgICAgICAgICJzcmMvb3RyIiwKCiAgICAgICAgLy8gTG9jYWxlcyBwYXRocwogICAgICAgICJsb2NhbGVzIjogICAibG9jYWxlL2xvY2FsZXMiLAogICAgICAgICJqZWQiOiAgICAgICAiY29tcG9uZW50cy9qZWQvamVkIiwKICAgICAgICAiYWYiOiAgICAgICAgImxvY2FsZS9hZi9MQ19NRVNTQUdFUy9hZiIsCiAgICAgICAgImRlIjogICAgICAgICJsb2NhbGUvZGUvTENfTUVTU0FHRVMvZGUiLAogICAgICAgICJlbiI6ICAgICAgICAibG9jYWxlL2VuL0xDX01FU1NBR0VTL2VuIiwKICAgICAgICAiZXMiOiAgICAgICAgImxvY2FsZS9lcy9MQ19NRVNTQUdFUy9lcyIsCiAgICAgICAgImZyIjogICAgICAgICJsb2NhbGUvZnIvTENfTUVTU0FHRVMvZnIiLAogICAgICAgICJoZSI6ICAgICAgICAibG9jYWxlL2hlL0xDX01FU1NBR0VTL2hlIiwKICAgICAgICAiaHUiOiAgICAgICAgImxvY2FsZS9odS9MQ19NRVNTQUdFUy9odSIsCiAgICAgICAgImlkIjogICAgICAgICJsb2NhbGUvaWQvTENfTUVTU0FHRVMvaWQiLAogICAgICAgICJpdCI6ICAgICAgICAibG9jYWxlL2l0L0xDX01FU1NBR0VTL2l0IiwKICAgICAgICAiamEiOiAgICAgICAgImxvY2FsZS9qYS9MQ19NRVNTQUdFUy9qYSIsCiAgICAgICAgIm5sIjogICAgICAgICJsb2NhbGUvbmwvTENfTUVTU0FHRVMvbmwiLAogICAgICAgICJwdF9CUiI6ICAgICAibG9jYWxlL3B0X0JSL0xDX01FU1NBR0VTL3B0X0JSIiwKICAgICAgICAicnUiOiAgICAgICAgImxvY2FsZS9ydS9MQ19NRVNTQUdFUy9ydSIsCiAgICAgICAgInpoIjogICAgICAgICJsb2NhbGUvemgvTENfTUVTU0FHRVMvemgiLAoKICAgICAgICAvLyBUZW1wbGF0ZXMKICAgICAgICAiYWN0aW9uIjogICAgICAgICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvYWN0aW9uIiwKICAgICAgICAiYWRkX2NvbnRhY3RfZHJvcGRvd24iOiAgICAgInNyYy90ZW1wbGF0ZXMvYWRkX2NvbnRhY3RfZHJvcGRvd24iLAogICAgICAgICJhZGRfY29udGFjdF9mb3JtIjogICAgICAgICAic3JjL3RlbXBsYXRlcy9hZGRfY29udGFjdF9mb3JtIiwKICAgICAgICAiY2hhbmdlX3N0YXR1c19tZXNzYWdlIjogICAgInNyYy90ZW1wbGF0ZXMvY2hhbmdlX3N0YXR1c19tZXNzYWdlIiwKICAgICAgICAiY2hhdF9zdGF0dXMiOiAgICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvY2hhdF9zdGF0dXMiLAogICAgICAgICJjaGF0YXJlYSI6ICAgICAgICAgICAgICAgICAic3JjL3RlbXBsYXRlcy9jaGF0YXJlYSIsCiAgICAgICAgImNoYXRib3giOiAgICAgICAgICAgICAgICAgICJzcmMvdGVtcGxhdGVzL2NoYXRib3giLAogICAgICAgICJjaGF0cm9vbSI6ICAgICAgICAgICAgICAgICAic3JjL3RlbXBsYXRlcy9jaGF0cm9vbSIsCiAgICAgICAgImNoYXRyb29tX3Bhc3N3b3JkX2Zvcm0iOiAgICJzcmMvdGVtcGxhdGVzL2NoYXRyb29tX3Bhc3N3b3JkX2Zvcm0iLAogICAgICAgICJjaGF0cm9vbV9zaWRlYmFyIjogICAgICAgICAic3JjL3RlbXBsYXRlcy9jaGF0cm9vbV9zaWRlYmFyIiwKICAgICAgICAiY2hhdHJvb21zX3RhYiI6ICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvY2hhdHJvb21zX3RhYiIsCiAgICAgICAgImNoYXRzX3BhbmVsIjogICAgICAgICAgICAgICJzcmMvdGVtcGxhdGVzL2NoYXRzX3BhbmVsIiwKICAgICAgICAiY2hvb3NlX3N0YXR1cyI6ICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvY2hvb3NlX3N0YXR1cyIsCiAgICAgICAgImNvbnRhY3RzX3BhbmVsIjogICAgICAgICAgICJzcmMvdGVtcGxhdGVzL2NvbnRhY3RzX3BhbmVsIiwKICAgICAgICAiY29udGFjdHNfdGFiIjogICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvY29udGFjdHNfdGFiIiwKICAgICAgICAiY29udHJvbGJveCI6ICAgICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvY29udHJvbGJveCIsCiAgICAgICAgImNvbnRyb2xib3hfdG9nZ2xlIjogICAgICAgICJzcmMvdGVtcGxhdGVzL2NvbnRyb2xib3hfdG9nZ2xlIiwKICAgICAgICAiZmllbGQiOiAgICAgICAgICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvZmllbGQiLAogICAgICAgICJmb3JtX2NoZWNrYm94IjogICAgICAgICAgICAic3JjL3RlbXBsYXRlcy9mb3JtX2NoZWNrYm94IiwKICAgICAgICAiZm9ybV9pbnB1dCI6ICAgICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvZm9ybV9pbnB1dCIsCiAgICAgICAgImZvcm1fc2VsZWN0IjogICAgICAgICAgICAgICJzcmMvdGVtcGxhdGVzL2Zvcm1fc2VsZWN0IiwKICAgICAgICAiZ3JvdXBfaGVhZGVyIjogICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvZ3JvdXBfaGVhZGVyIiwKICAgICAgICAiaW5mbyI6ICAgICAgICAgICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvaW5mbyIsCiAgICAgICAgImxvZ2luX3BhbmVsIjogICAgICAgICAgICAgICJzcmMvdGVtcGxhdGVzL2xvZ2luX3BhbmVsIiwKICAgICAgICAibG9naW5fdGFiIjogICAgICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvbG9naW5fdGFiIiwKICAgICAgICAibWVzc2FnZSI6ICAgICAgICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvbWVzc2FnZSIsCiAgICAgICAgIm5ld19kYXkiOiAgICAgICAgICAgICAgICAgICJzcmMvdGVtcGxhdGVzL25ld19kYXkiLAogICAgICAgICJvY2N1cGFudCI6ICAgICAgICAgICAgICAgICAic3JjL3RlbXBsYXRlcy9vY2N1cGFudCIsCiAgICAgICAgInBlbmRpbmdfY29udGFjdCI6ICAgICAgICAgICJzcmMvdGVtcGxhdGVzL3BlbmRpbmdfY29udGFjdCIsCiAgICAgICAgInBlbmRpbmdfY29udGFjdHMiOiAgICAgICAgICJzcmMvdGVtcGxhdGVzL3BlbmRpbmdfY29udGFjdHMiLAogICAgICAgICJyZXF1ZXN0aW5nX2NvbnRhY3QiOiAgICAgICAic3JjL3RlbXBsYXRlcy9yZXF1ZXN0aW5nX2NvbnRhY3QiLAogICAgICAgICJyZXF1ZXN0aW5nX2NvbnRhY3RzIjogICAgICAic3JjL3RlbXBsYXRlcy9yZXF1ZXN0aW5nX2NvbnRhY3RzIiwKICAgICAgICAicm9vbV9kZXNjcmlwdGlvbiI6ICAgICAgICAgInNyYy90ZW1wbGF0ZXMvcm9vbV9kZXNjcmlwdGlvbiIsCiAgICAgICAgInJvb21faXRlbSI6ICAgICAgICAgICAgICAgICJzcmMvdGVtcGxhdGVzL3Jvb21faXRlbSIsCiAgICAgICAgInJvb21fcGFuZWwiOiAgICAgICAgICAgICAgICJzcmMvdGVtcGxhdGVzL3Jvb21fcGFuZWwiLAogICAgICAgICJyb3N0ZXIiOiAgICAgICAgICAgICAgICAgICAic3JjL3RlbXBsYXRlcy9yb3N0ZXIiLAogICAgICAgICJyb3N0ZXJfaXRlbSI6ICAgICAgICAgICAgICAic3JjL3RlbXBsYXRlcy9yb3N0ZXJfaXRlbSIsCiAgICAgICAgInNlYXJjaF9jb250YWN0IjogICAgICAgICAgICJzcmMvdGVtcGxhdGVzL3NlYXJjaF9jb250YWN0IiwKICAgICAgICAic2VsZWN0X29wdGlvbiI6ICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvc2VsZWN0X29wdGlvbiIsCiAgICAgICAgInN0YXR1c19vcHRpb24iOiAgICAgICAgICAgICJzcmMvdGVtcGxhdGVzL3N0YXR1c19vcHRpb24iLAogICAgICAgICJ0b2dnbGVfY2hhdHMiOiAgICAgICAgICAgICAic3JjL3RlbXBsYXRlcy90b2dnbGVfY2hhdHMiLAogICAgICAgICJ0b29sYmFyIjogICAgICAgICAgICAgICAgICAic3JjL3RlbXBsYXRlcy90b29sYmFyIiwKICAgICAgICAidHJpbW1lZF9jaGF0IjogICAgICAgICAgICAgInNyYy90ZW1wbGF0ZXMvdHJpbW1lZF9jaGF0IgogICAgfSwKCiAgICBtYXA6IHsKICAgICAgICAvLyAnKicgbWVhbnMgYWxsIG1vZHVsZXMgd2lsbCBnZXQgJ2pxdWVyeS1wcml2YXRlJwogICAgICAgIC8vIGZvciB0aGVpciAnanF1ZXJ5JyBkZXBlbmRlbmN5LgogICAgICAgICcqJzogeyAnanF1ZXJ5JzogJ2pxdWVyeS1wcml2YXRlJyB9LAogICAgICAgIC8vICdqcXVlcnktcHJpdmF0ZScgd2FudHMgdGhlIHJlYWwgalF1ZXJ5IG1vZHVsZQogICAgICAgIC8vIHRob3VnaC4gSWYgdGhpcyBsaW5lIHdhcyBub3QgaGVyZSwgdGhlcmUgd291bGQKICAgICAgICAvLyBiZSBhbiB1bnJlc29sdmFibGUgY3ljbGljIGRlcGVuZGVuY3kuCiAgICAgICAgJ2pxdWVyeS1wcml2YXRlJzogeyAnanF1ZXJ5JzogJ2pxdWVyeScgfQogICAgfSwKCiAgICB0cGw6IHsKICAgICAgICAvLyBDb25maWd1cmF0aW9uIGZvciByZXF1aXJlanMtdHBsCiAgICAgICAgLy8gVXNlIE11c3RhY2hlIHN0eWxlIHN5bnRheCBmb3IgdmFyaWFibGUgaW50ZXJwb2xhdGlvbgogICAgICAgIHRlbXBsYXRlU2V0dGluZ3M6IHsKICAgICAgICAgICAgZXZhbHVhdGUgOiAvXHtcWyhbXHNcU10rPylcXVx9L2csCiAgICAgICAgICAgIGludGVycG9sYXRlIDogL1x7XHsoW1xzXFNdKz8pXH1cfS9nCiAgICAgICAgfQogICAgfSwKCiAgICAvLyBkZWZpbmUgbW9kdWxlIGRlcGVuZGVuY2llcyBmb3IgbW9kdWxlcyBub3QgdXNpbmcgZGVmaW5lCiAgICBzaGltOiB7CiAgICAgICAgJ3VuZGVyc2NvcmUnOiAgICAgICAgICAgeyBleHBvcnRzOiAnXycgfSwKICAgICAgICAnY3J5cHRvLmFlcyc6ICAgICAgICAgICB7IGRlcHM6IFsnY3J5cHRvLmNpcGhlci1jb3JlJ10gfSwKICAgICAgICAnY3J5cHRvLmNpcGhlci1jb3JlJzogICB7IGRlcHM6IFsnY3J5cHRvLmVuYy1iYXNlNjQnLCAnY3J5cHRvLmV2cGtkZiddIH0sCiAgICAgICAgJ2NyeXB0by5lbmMtYmFzZTY0JzogICAgeyBkZXBzOiBbJ2NyeXB0by5jb3JlJ10gfSwKICAgICAgICAnY3J5cHRvLmV2cGtkZic6ICAgICAgICB7IGRlcHM6IFsnY3J5cHRvLm1kNSddIH0sCiAgICAgICAgJ2NyeXB0by5obWFjJzogICAgICAgICAgeyBkZXBzOiBbJ2NyeXB0by5jb3JlJ10gfSwKICAgICAgICAnY3J5cHRvLm1kNSc6ICAgICAgICAgICB7IGRlcHM6IFsnY3J5cHRvLmNvcmUnXSB9LAogICAgICAgICdjcnlwdG8ubW9kZS1jdHInOiAgICAgIHsgZGVwczogWydjcnlwdG8uY2lwaGVyLWNvcmUnXSB9LAogICAgICAgICdjcnlwdG8ucGFkLW5vcGFkZGluZyc6IHsgZGVwczogWydjcnlwdG8uY2lwaGVyLWNvcmUnXSB9LAogICAgICAgICdjcnlwdG8uc2hhMSc6ICAgICAgICAgIHsgZGVwczogWydjcnlwdG8uY29yZSddIH0sCiAgICAgICAgJ2NyeXB0by5zaGEyNTYnOiAgICAgICAgeyBkZXBzOiBbJ2NyeXB0by5jb3JlJ10gfSwKICAgICAgICAnYmlnaW50JzogICAgICAgICAgICAgICB7IGRlcHM6IFsnY3J5cHRvJ10gfSwKICAgICAgICAnc3Ryb3BoZSc6ICAgICAgICAgICAgICB7IGV4cG9ydHM6ICdTdHJvcGhlJyB9LAogICAgICAgICdzdHJvcGhlLmRpc2NvJzogICAgICAgIHsgZGVwczogWydzdHJvcGhlJ10gfSwKICAgICAgICAnc3Ryb3BoZS5tdWMnOiAgICAgICAgICB7IGRlcHM6IFsnc3Ryb3BoZSddIH0sCiAgICAgICAgJ3N0cm9waGUucm9zdGVyJzogICAgICAgeyBkZXBzOiBbJ3N0cm9waGUnXSB9LAogICAgICAgICdzdHJvcGhlLnZjYXJkJzogICAgICAgIHsgZGVwczogWydzdHJvcGhlJ10gfQogICAgfQp9KTsKcmVxdWlyZShbImNvbnZlcnNlIl0sIGZ1bmN0aW9uKGNvbnZlcnNlKSB7CiAgICB3aW5kb3cuY29udmVyc2UgPSBjb252ZXJzZTsKfSk7CgpkZWZpbmUoIm1haW4iLCBmdW5jdGlvbigpe30pOwoK",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 16:25:10 GMT",
                    "Content-Length": "1088112",
                    "Date": "Thu, 06 Nov 2014 16:25:16 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}