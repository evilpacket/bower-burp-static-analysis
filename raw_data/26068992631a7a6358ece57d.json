{
    "url": "http://localhost:9999/Fluidbyte/Riggr/src/router.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>location.search</b> and written to <b>history.pushState()</b> via the following statements:<ul><li>url = root + location.search;</li><li>history.pushState(null, document.title, url);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/Fluidbyte/Riggr/src/router.js",
                "path": "/Fluidbyte/Riggr/src/router.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9GbHVpZGJ5dGUvUmlnZ3Ivc3JjL3JvdXRlci5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNjAxNw0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KRGF0ZTogU2F0LCAwOCBOb3YgMjAxNCAwMzozMjo0OCBHTVQNCkxhc3QtTW9kaWZpZWQ6IFNhdCwgMDggTm92IDIwMTQgMDM6MzI6NDcgR01UDQoNCi8vIHJvdXRlci5qcwovLyBDcmVhdGVzIGNsaWVudC1zaWRlIHJvdXRlcgovLyAtLS0KLy8gUGFydCBvZiB0aGUgUmlnZ3IgU1BBIGZyYW1ld29yayA8aHR0cHM6Ly9naXRodWIuY29tL0ZsdWlkYnl0ZS9SaWdncj4gYW5kIHJlbGVhc2VkCi8vIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gVGhpcyBub3RpY2UgbXVzdCByZW1haW4gaW50YWN0LgooZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7CiAgICBkZWZpbmUoW10sIGZhY3RvcnkpOwogIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7CiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKICB9IGVsc2UgewogICAgcm9vdC5yb3V0ZXIgPSBmYWN0b3J5KCk7CiAgfQp9KHRoaXMsIGZ1bmN0aW9uICgpIHsKCiAgLy8gUm91dGVyIG9iamVjdAogIHZhciBSb3V0ZXIgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgLy8gV2F0Y2ggaGFzaGNoYW5nZQogICAgd2luZG93Lm9uaGFzaGNoYW5nZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgc2VsZi5wcm9jZXNzKCk7CiAgICB9OwoKICAgIC8vIFJ1biBvbiBsb2FkCiAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICBzZWxmLnByb2Nlc3MoKTsKICAgIH07CiAgfTsKCiAgLy8gQ29udGFpbmVyIG9iamVjdCBmb3Igcm91dGVzCiAgUm91dGVyLnByb3RvdHlwZS5yb3V0ZXMgPSB7fTsKCiAgLy8gQ29udGFpbmVyIGFycmF5IGZvciBoaXN0b3J5CiAgUm91dGVyLnByb3RvdHlwZS5oaXN0b3J5ID0gW107CgogIC8vIFByb2Nlc3NlcyByb3V0ZSBjaGFuZ2UKICBSb3V0ZXIucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgIGZyYWdtZW50ID0gd2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKS5yZXBsYWNlKC9eXC98XC8kL2csICcnKSwKICAgICAgbWF0Y2gsCiAgICAgIHJvdXRlLAogICAgICBhcmdzLAogICAgICBwcmV2Um91dGUgPSBmYWxzZSwKICAgICAgcm91dGVPYmogPSBbXTsKCiAgICBmcmFnbWVudCA9IChmcmFnbWVudC5zdWJzdHIoMCkgIT09ICcvJykgPyAnLycgKyBmcmFnbWVudCA6IGZyYWdtZW50OwoKICAgIG1hdGNoID0gc2VsZi5tYXRjaCgpOwogICAgcm91dGUgPSBtYXRjaC5yb3V0ZTsKICAgIGFyZ3MgPSBtYXRjaC5hcmdzOwoKICAgIHZhciBwcm9jZXNzQ29udHJvbGxlclJvdXRpbmcgPSBmdW5jdGlvbiAoKSB7CgogICAgICAvLyBDaGVjayBhbmQgcnVuICdiZWZvcmUnCiAgICAgIGlmICh0eXBlb2Ygcm91dGVPYmouYmVmb3JlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgLy8gU2hvdWxkIGZpcmUgY2FsbGJhY2sgd2l0aCBhcmcgJ3JlcycgPSB0cnVlL2ZhbHNlCiAgICAgICAgcm91dGVPYmouYmVmb3JlKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIGlmIChyZXMgJiYgcm91dGVPYmoubG9hZCkgewogICAgICAgICAgICByb3V0ZU9iai5sb2FkLmFwcGx5KHRoaXMsIGFyZ3MpOwogICAgICAgICAgICBzZWxmLmhpc3RvcnkucHVzaCh7CiAgICAgICAgICAgICAgbWF0Y2hlcjogcm91dGUsCiAgICAgICAgICAgICAgZnJhZ21lbnQ6IGZyYWdtZW50CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHNlbGYuaGlzdG9yeSAmJiBzZWxmLmhpc3RvcnkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgc2VsZi5nbyhzZWxmLmhpc3Rvcnlbc2VsZi5oaXN0b3J5Lmxlbmd0aCAtIDFdLmZyYWdtZW50KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKHR5cGVvZiByb3V0ZU9iai5sb2FkID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgLy8gTm8gJ2JlZm9yZScsIGp1c3QgbG9hZC4uLgogICAgICAgIHJvdXRlT2JqLmxvYWQuYXBwbHkodGhpcywgYXJncyk7CiAgICAgICAgc2VsZi5oaXN0b3J5LnB1c2goewogICAgICAgICAgbWF0Y2hlcjogcm91dGUsCiAgICAgICAgICBmcmFnbWVudDogZnJhZ21lbnQKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgLy8gQ2hlY2sgYW5kIHJ1biAnbG9hZCcgaWYgZm4gZXhpc3RzIGFuZCBiZWZvcmUgZG9lc24ndCBleGlzdAogICAgICBpZiAodHlwZW9mIHJvdXRlT2JqLmxvYWQgPT09ICdmdW5jdGlvbicgJiYgIXJvdXRlT2JqLmJlZm9yZSkgewogICAgICAgIHJvdXRlT2JqLmxvYWQuYXBwbHkodGhpcywgYXJncyk7CiAgICAgICAgc2VsZi5oaXN0b3J5LnB1c2goewogICAgICAgICAgbWF0Y2hlcjogcm91dGUsCiAgICAgICAgICBmcmFnbWVudDogZnJhZ21lbnQKICAgICAgICB9KTsKICAgICAgfQoKICAgIH07CgogICAgLy8gR2V0IHByZXZfcm91dGUKICAgIGlmIChzZWxmLmhpc3RvcnkubGVuZ3RoICE9PSAwKSB7CiAgICAgIHByZXZSb3V0ZSA9IHNlbGYucm91dGVzW3NlbGYuaGlzdG9yeVtzZWxmLmhpc3RvcnkubGVuZ3RoIC0gMV0ubWF0Y2hlcl07CiAgICB9CgogICAgcm91dGVPYmogPSBzZWxmLnJvdXRlc1tyb3V0ZV07CgogICAgLy8gR2V0IGN1cnJlbnQgcm91dGUgYW5kIHVubG9hZAogICAgaWYgKHByZXZSb3V0ZSAmJiB0eXBlb2YgcHJldlJvdXRlLnVubG9hZCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICBwcmV2Um91dGUudW5sb2FkLmFwcGx5KHRoaXMpOwogICAgfQoKICAgIC8vIENoZWNrIGZvciBiZWZvcmVBcHBSb3V0ZQogICAgaWYgKHJvdXRlT2JqICYmIHR5cGVvZiByb3V0ZU9iai5iZWZvcmVBcHBSb3V0ZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICByb3V0ZU9iai5iZWZvcmVBcHBSb3V0ZShmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgaWYgKHJlcykgewogICAgICAgICAgcHJvY2Vzc0NvbnRyb2xsZXJSb3V0aW5nKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSBpZiAocm91dGVPYmopIHsKICAgICAgcHJvY2Vzc0NvbnRyb2xsZXJSb3V0aW5nKCk7CiAgICB9CgogIH07CgogIC8vIE1hdGNoZXMgcm91dGVzIGFuZCBmaXJlcyBjYWxsYmFjawogIFJvdXRlci5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgIGZyYWdtZW50ID0gd2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKS5yZXBsYWNlKC9eXC98XC8kL2csICcnKSwKICAgICAgbWF0Y2hlciwKICAgICAgcm91dGUsCiAgICAgIGFyZ3MgPSBbXSwKICAgICAgbWF0Y2hlZCA9IGZhbHNlLAogICAgICBpLAogICAgICB6OwoKICAgIGZyYWdtZW50ID0gKGZyYWdtZW50LnN1YnN0cigwKSAhPT0gJy8nKSA/ICcvJyArIGZyYWdtZW50IDogZnJhZ21lbnQ7CgogICAgLy8gTWF0Y2ggcm9vdAogICAgaWYgKGZyYWdtZW50ID09PSAnLycgJiYgc2VsZi5yb3V0ZXMuaGFzT3duUHJvcGVydHkoJy8nKSkgewogICAgICBtYXRjaGVkID0gewogICAgICAgIHJvdXRlOiAnLycsCiAgICAgICAgYXJnczogbnVsbAogICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgLy8gTWF0Y2ggcm91dGVzCiAgICAgIGZvciAocm91dGUgaW4gc2VsZi5yb3V0ZXMpIHsKICAgICAgICBtYXRjaGVyID0gZnJhZ21lbnQubWF0Y2gobmV3IFJlZ0V4cChyb3V0ZS5yZXBsYWNlKC86W15ccy9dKy9nLCAnKFtcXHctXSspJykpKTsKICAgICAgICBpZiAobWF0Y2hlciAhPT0gbnVsbCAmJiBtYXRjaGVyWzBdID09PSBmcmFnbWVudCkgewogICAgICAgICAgYXJncyA9IFtdOwogICAgICAgICAgLy8gR2V0IGFyZ3MKICAgICAgICAgIGlmIChtYXRjaGVyLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgZm9yIChpID0gMSwgeiA9IG1hdGNoZXIubGVuZ3RoOyBpIDwgejsgaSsrKSB7CiAgICAgICAgICAgICAgYXJncy5wdXNoKG1hdGNoZXJbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBtYXRjaGVkID0gewogICAgICAgICAgICByb3V0ZTogcm91dGUsCiAgICAgICAgICAgIGFyZ3M6IGFyZ3MKICAgICAgICAgIH07CiAgICAgICAgICAvLyBFeHBvc2UgY3VycmVudCByb3V0ZQogICAgICAgICAgc2VsZi5jdXJyZW50ID0gcm91dGU7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKCFtYXRjaGVkKSB7CiAgICAgIGlmIChzZWxmLnJvdXRlcy5oYXNPd25Qcm9wZXJ0eSgnLzQwNCcpKSB7CiAgICAgICAgbWF0Y2hlZCA9IHsKICAgICAgICAgIHJvdXRlOiAnLzQwNCcsCiAgICAgICAgICBhcmdzOiBbZnJhZ21lbnRdCiAgICAgICAgfTsKICAgICAgfQogICAgfQoKICAgIC8vIFJldHVybiBtYXRjaGVkIGFuZCBhcmd1bWVudHMKICAgIHJldHVybiBtYXRjaGVkOwoKICB9OwoKICAvLyBNZXRob2QgdG8gcmVsb2FkIChyZWZyZXNoKSB0aGUgcm91dGUKICBSb3V0ZXIucHJvdG90eXBlLnJlbG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucHJvY2VzcygpOwogIH07CgogIC8vIE1ldGhvZCBmb3IgYmluZGluZyByb3V0ZSB0byBjYWxsYmFjawogIFJvdXRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAocm91dGUsIGhhbmRsZXIpIHsKICAgIHRoaXMucm91dGVzW3JvdXRlXSA9IHt9OwogICAgLy8gQnVpbGQgZnVuY3Rpb24ocykgaW50byByb3V0ZSBvYmplY3QKICAgIGlmIChoYW5kbGVyICYmIHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIC8vIEp1c3QgcGFzc2VkIGEgc2luZ2xlIGxvYWQgZnVuY3Rpb24KICAgICAgdGhpcy5yb3V0ZXNbcm91dGVdLmJlZm9yZSA9IGZhbHNlOwogICAgICB0aGlzLnJvdXRlc1tyb3V0ZV0ubG9hZCA9IGhhbmRsZXI7CiAgICAgIHRoaXMucm91dGVzW3JvdXRlXS51bmxvYWQgPSBmYWxzZTsKICAgIH0gZWxzZSBpZiAoaGFuZGxlciAmJiB0eXBlb2YgaGFuZGxlciA9PT0gJ29iamVjdCcpIHsKICAgICAgLy8gUGFzc2VkIGFuIG9iamVjdAogICAgICB0aGlzLnJvdXRlc1tyb3V0ZV0uYmVmb3JlQXBwUm91dGUgPSAoaGFuZGxlci5iZWZvcmVBcHBSb3V0ZSkgPyBoYW5kbGVyLmJlZm9yZUFwcFJvdXRlIDogZmFsc2U7CiAgICAgIHRoaXMucm91dGVzW3JvdXRlXS5iZWZvcmUgPSAoaGFuZGxlci5iZWZvcmUpID8gaGFuZGxlci5iZWZvcmUgOiBmYWxzZTsKICAgICAgdGhpcy5yb3V0ZXNbcm91dGVdLmxvYWQgPSAoaGFuZGxlci5sb2FkKSA/IGhhbmRsZXIubG9hZCA6IGZhbHNlOwogICAgICB0aGlzLnJvdXRlc1tyb3V0ZV0udW5sb2FkID0gKGhhbmRsZXIudW5sb2FkKSA/IGhhbmRsZXIudW5sb2FkIDogZmFsc2U7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyAnRXJyb3IgY3JlYXRpbmcgcm91dGUnOwogICAgfQogIH07CgogIC8vIE1ldGhvZCBmb3IgcHJvZ3JhbWF0aWNhbGx5IG5hdmlnYXRpbmcgdG8gcm91dGUKICBSb3V0ZXIucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gKHBhdGgpIHsKICAgIHZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbiwKICAgICAgcm9vdCA9IGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1teXC9dJC8sICckJicpLAogICAgICB1cmwsCiAgICAgIHNlbGYgPSB0aGlzOwoKICAgIC8vIEhhbmRsZSB1cmwgY29tcG9zaXRpb24KICAgIGlmIChwYXRoLmxlbmd0aCkgewogICAgICAvLyBGcmFnbWVudCBleGlzdHMKICAgICAgdXJsID0gcm9vdCArIGxvY2F0aW9uLnNlYXJjaCArICcjJyArIHBhdGg7CiAgICB9IGVsc2UgewogICAgICAvLyBOdWxsL0JsYW5rIGZyYWdtZW50LCBuYXYgdG8gcm9vdAogICAgICB1cmwgPSByb290ICsgbG9jYXRpb24uc2VhcmNoOwogICAgfQoKICAgIGlmIChoaXN0b3J5LnB1c2hTdGF0ZSkgewogICAgICAvLyBCcm93c2VyIHN1cHBvcnRzIHB1c2hTdGF0ZSgpCiAgICAgIGhpc3RvcnkucHVzaFN0YXRlKG51bGwsIGRvY3VtZW50LnRpdGxlLCB1cmwpOwogICAgICBzZWxmLnByb2Nlc3MoKTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIE9sZGVyIGJyb3dzZXIgZmFsbGJhY2sKICAgICAgbG9jYXRpb24ucmVwbGFjZShyb290ICsgdXJsKTsKICAgICAgc2VsZi5wcm9jZXNzKCk7CiAgICB9CiAgfTsKCiAgdmFyIHJvdXRlciA9IG5ldyBSb3V0ZXIoKTsKCiAgcmV0dXJuIHJvdXRlcjsKCn0pKTsK",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 03:32:47 GMT",
                    "Content-Length": "6017",
                    "Date": "Sat, 08 Nov 2014 03:32:48 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}