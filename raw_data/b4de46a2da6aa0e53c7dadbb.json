{
    "url": "http://localhost:9999/ibm-js/dapp/tests/unit/jqm/hideViewJqm/Test.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>location.href</b> and written to <b>history.pushState()</b> via the following statement:<ul><li>history.pushState(null, null, location.href.replace(/#/, ''));</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/ibm-js/dapp/tests/unit/jqm/hideViewJqm/Test.js",
                "path": "/ibm-js/dapp/tests/unit/jqm/hideViewJqm/Test.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9pYm0tanMvZGFwcC90ZXN0cy91bml0L2pxbS9oaWRlVmlld0pxbS9UZXN0LmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNjM1OA0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KRGF0ZTogVGh1LCAwNiBOb3YgMjAxNCAyMDowMDozNCBHTVQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMDYgTm92IDIwMTQgMjA6MDA6MzMgR01UDQoNCnJlcXVpcmUoWyJqcXVlcnkiXSwKCWZ1bmN0aW9uICgkKSB7CgkJLy8gdGhpcyBtdXN0IGJlIHNldHVwIGFmdGVyIGpxdWVyeSBpcyBsb2FkZWQsIGJ1dCBiZWZvcmUganF1ZXJ5Lm1vYmlsZSBpcyBsb2FkZWQKCQkkKGRvY3VtZW50KS5iaW5kKCJtb2JpbGVpbml0IiwgZnVuY3Rpb24gKCkgewoJCQkvLyBpZiB0aGlzIGlzIHNldCB0cnVlIHRvIHNlZSBpZiBpdCBoZWxwcyB0aGluZ3MKCQkJLy8JJC5tb2JpbGUucmVsb2FkID0gdHJ1ZTsKCgkJCS8vIGlmIHRoaXMgaXMgc2V0IGZhbHNlIHRoZSBhcHAgbXVzdCBjYWxsICQubW9iaWxlLmluaXRpYWxpemVQYWdlKCk7CgkJCSQubW9iaWxlLmF1dG9Jbml0aWFsaXplUGFnZSA9IGZhbHNlOwoKCQkJLy8gUHJldmVudHMgYWxsIGFuY2hvciBjbGljayBoYW5kbGluZwoJCQkkLm1vYmlsZS5saW5rQmluZGluZ0VuYWJsZWQgPSBmYWxzZTsKCgkJCS8vIERpc2FibGluZyB0aGlzIHdpbGwgcHJldmVudCBqUXVlcnkgTW9iaWxlIGZyb20gaGFuZGxpbmcgaGFzaCBjaGFuZ2VzCgkJCS8vIGlmIGVuYWJsZWQgSGlzdG9yeSBjb250cm9sbGVyIHNob3VsZCBub3QgYmUgdXNlZC4KCQkJJC5tb2JpbGUuaGFzaExpc3RlbmluZ0VuYWJsZWQgPSBmYWxzZTsKCgkJCS8vIGtlZXAgYWxsIHByZXZpb3VzbHktdmlzaXRlZCBwYWdlcyBpbiB0aGUgRE9NCgkJCSQubW9iaWxlLnBhZ2UucHJvdG90eXBlLm9wdGlvbnMuZG9tQ2FjaGUgPSB0cnVlOwoKCQkJLy8gdGhlIGhhc2ggaW4gdGhlIGxvY2F0aW9uIGJhciBzaG91bGQgbm90IGJlIHVwZGF0ZWQgYnkganF1ZXJ5Lm1vYmlsZQoJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlLmRlZmF1bHRzLmNoYW5nZUhhc2ggPSBmYWxzZTsKCQl9KTsKCX0pOwoKLy8ganNoaW50IHF1b3RtYXJrOmZhbHNlCmRlZmluZShbCgkiaW50ZXJuIW9iamVjdCIsCgkiaW50ZXJuL2NoYWkhYXNzZXJ0IiwKCSJkYXBwL0FwcGxpY2F0aW9uIiwKCSJkYXBwL3V0aWxzL3ZpZXciLAoJImRvam8vRGVmZXJyZWQiLAoJInJlcXVpcmVqcy10ZXh0L3RleHQhZGFwcC90ZXN0cy91bml0L2pxbS9oaWRlVmlld0pxbS9hcHAuanNvbiIsCgkianF1ZXJ5IiwKCSJqcXVlcnkubW9iaWxlIiwKCSJkZWxpdGVmdWwvTGluZWFyTGF5b3V0IiwKCSJkZWxpdGVmdWwvVmlld1N0YWNrIgpdLCBmdW5jdGlvbiAocmVnaXN0ZXJTdWl0ZSwgYXNzZXJ0LCBBcHBsaWNhdGlvbiwgdmlld1V0aWxzLCBEZWZlcnJlZCwganFtaGlkZVZpZXdKcW1jb25maWcsICQpIHsKCS8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vCgkvLyBmb3IganFtaGlkZVZpZXdKcW1TdWl0ZQoJdmFyIGpxbWhpZGVWaWV3SnFtQ29udGFpbmVyMywKCQl0ZXN0QXBwLAoJCWhpZGVWaWV3SnFtQXBwSG9tZTFWaWV3LAoJCWhpZGVWaWV3SnFtQXBwSG9tZTJWaWV3LAoJCWpxbWhpZGVWaWV3SnFtTm9kZTM7CgoJdmFyIGpxbWhpZGVWaWV3SnFtSHRtbENvbnRlbnQzID0KCQknPGRpdiBpZD0ibWFpblBub2RlSlFNIj4gPGRpdiBpZD0iZHVtbXlQYWdlIiBkYXRhLXJvbGU9InBhZ2UiPjwvZGl2PjwvZGl2Pic7CgkvLwknPGRpdiBpZD0ibWFpblBub2RlSlFNIj4gPGRpdiBpZD0iZHVtbXlQYWdlIiBkYXRhLXJvbGU9InBhZ2UiPjwvZGl2PicgKwoJLy8gJzxkaXYgaWQ9ImhvbWVDb250YWluZXIiIGRhdGEtcm9sZT0icGFnZSI+PC9kaXY+PGRpdiBpZD0iZGV0YWlsQ29udGFpbmVyIiBkYXRhLXJvbGU9InBhZ2UiPjwvZGl2PjwvZGl2PjwvZGl2Pic7CgoJdmFyIGpxbWhpZGVWaWV3SnFtU3VpdGUgPSB7CgkJbmFtZTogImpxbWhpZGVWaWV3SnFtU3VpdGUgZGFwcCBqcW1oaWRlVmlld0pxbTogdGVzdCBhcHAgdHJhbnNpdGlvbnMiLAoJCXNldHVwOiBmdW5jdGlvbiAoKSB7CgkJCWRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0ganFtaGlkZVZpZXdKcW1IdG1sQ29udGVudDM7CgkJCWpxbWhpZGVWaWV3SnFtTm9kZTMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaGlkZVZpZXdKcW1BcHBkdmlld1N0YWNrIik7CgkJCS8vIGRvbid0IGZvcmdldCB0byB0cmlnZ2VyIGpxdWVyeS5tb2JpbGUgbWFudWFsbHkKCQkJaWYgKCQubW9iaWxlLmF1dG9Jbml0aWFsaXplUGFnZSA9PT0gZmFsc2UpIHsKCQkJCSQubW9iaWxlLmluaXRpYWxpemVQYWdlKCk7CgkJCX0KCQl9LAoJCSJqcW1oaWRlVmlld0pxbVN1aXRlIGRhcHAganFtaGlkZVZpZXdKcW0gdGVzdCBpbml0aWFsIGxheW91dCI6IGZ1bmN0aW9uICgpIHsKCQkJdGhpcy50aW1lb3V0ID0gMjAwMDA7CgoJCQl2YXIgYXBwU3RhcnRlZERlZiA9IG5ldyBBcHBsaWNhdGlvbihKU09OLnBhcnNlKHN0cmlwQ29tbWVudHMoanFtaGlkZVZpZXdKcW1jb25maWcpKSwKCQkJCWpxbWhpZGVWaWV3SnFtQ29udGFpbmVyMyk7CgkJCXJldHVybiBhcHBTdGFydGVkRGVmLnRoZW4oZnVuY3Rpb24gKGFwcCkgewoJCQkJLy8gd2UgYXJlIHJlYWR5IHRvIHRlc3QKCQkJCXRlc3RBcHAgPSBhcHA7CgoJCQkJLy92YXIgaGlkZVZpZXdKcW1BcHBIb21lMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJoaWRlVmlld0pxbUFwcEhvbWUxIik7CgkJCQloaWRlVmlld0pxbUFwcEhvbWUxVmlldyA9IHZpZXdVdGlscy5nZXRWaWV3RnJvbVZpZXdJZCh0ZXN0QXBwLCAiaGlkZVZpZXdKcW1BcHBIb21lMSIpOwoJCQkJYXNzZXJ0LnN0cmljdEVxdWFsKGhpZGVWaWV3SnFtQXBwSG9tZTFWaWV3Ll9iZWZvcmVBY3RpdmF0ZUNhbGxDb3VudCwgMSwKCQkJCQkiaGlkZVZpZXdKcW1BcHBIb21lMVZpZXcuX2JlZm9yZUFjdGl2YXRlQ2FsbENvdW50IHNob3VsZCBiZSAxIik7CgkJCX0pOwoJCX0sCgkJIlRlc3Qgc2hvd09ySGlkZVZpZXdzKCdoaWRlVmlld0pxbUFwcEhvbWUyJyAiOiBmdW5jdGlvbiAoKSB7CgkJCXRoaXMudGltZW91dCA9IDIwMDAwOwoJCQl2YXIgZGlzcGxheURlZmVycmVkID0gbmV3IERlZmVycmVkKCk7CgoJCQl0ZXN0QXBwLnNob3dPckhpZGVWaWV3cygnaGlkZVZpZXdKcW1BcHBIb21lMicsIHsKCQkJCWRpc3BsYXlEZWZlcnJlZDogZGlzcGxheURlZmVycmVkCgkJCX0pOwoJCQlyZXR1cm4gZGlzcGxheURlZmVycmVkLnRoZW4oZnVuY3Rpb24gKCkgewoJCQkJaGlkZVZpZXdKcW1BcHBIb21lMlZpZXcgPSB2aWV3VXRpbHMuZ2V0Vmlld0Zyb21WaWV3SWQodGVzdEFwcCwgImhpZGVWaWV3SnFtQXBwSG9tZTIiKTsKCQkJCWNoZWNrQWN0aXZhdGVDYWxsQ291bnQoaGlkZVZpZXdKcW1BcHBIb21lMlZpZXcsIDEpOwoJCQkJY2hlY2tEZWFjdGl2YXRlQ2FsbENvdW50KGhpZGVWaWV3SnFtQXBwSG9tZTFWaWV3LCAxKTsKCQkJfSk7CgkJfSwKCQkiVGVzdCBzaG93T3JIaWRlVmlld3MoJ2hpZGVWaWV3SnFtQXBwSG9tZTEnICI6IGZ1bmN0aW9uICgpIHsKCQkJdGhpcy50aW1lb3V0ID0gMjAwMDA7CgkJCXZhciBkaXNwbGF5RGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTsKCgkJCXRlc3RBcHAuc2hvd09ySGlkZVZpZXdzKCdoaWRlVmlld0pxbUFwcEhvbWUxJywgewoJCQkJZGlzcGxheURlZmVycmVkOiBkaXNwbGF5RGVmZXJyZWQKCQkJfSk7CgkJCXJldHVybiBkaXNwbGF5RGVmZXJyZWQudGhlbihmdW5jdGlvbiAoKSB7CgkJCQljaGVja0FjdGl2YXRlQ2FsbENvdW50KGhpZGVWaWV3SnFtQXBwSG9tZTFWaWV3LCAyKTsKCQkJCWNoZWNrRGVhY3RpdmF0ZUNhbGxDb3VudChoaWRlVmlld0pxbUFwcEhvbWUyVmlldywgMSk7CgkJCX0pOwoJCX0sCgkJIlRlc3Qgc2hvd09ySGlkZVZpZXdzKCctaGlkZVZpZXdKcW1BcHBIb21lMScgIjogZnVuY3Rpb24gKCkgewoJCQl0aGlzLnRpbWVvdXQgPSAyMDAwMDsKCQkJdmFyIGRpc3BsYXlEZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpOwoKCQkJdGVzdEFwcC5zaG93T3JIaWRlVmlld3MoJy1oaWRlVmlld0pxbUFwcEhvbWUxJywgewoJCQkJZGlzcGxheURlZmVycmVkOiBkaXNwbGF5RGVmZXJyZWQKCQkJfSk7CgkJCXJldHVybiBkaXNwbGF5RGVmZXJyZWQudGhlbihmdW5jdGlvbiAoKSB7CgkJCQkvL2NoZWNrQWN0aXZhdGVDYWxsQ291bnQoaGlkZVZpZXdKcW1BcHBIb21lMVZpZXcsIDIpOwoJCQkJY2hlY2tEZWFjdGl2YXRlQ2FsbENvdW50KGhpZGVWaWV3SnFtQXBwSG9tZTFWaWV3LCAyKTsKCQkJfSk7CgkJfSwKCQkiVGVzdCBzaG93T3JIaWRlVmlld3MoJ2hpZGVWaWV3SnFtQXBwSG9tZTInKSBhZ2FpbiAiOiBmdW5jdGlvbiAoKSB7CgkJCXRoaXMudGltZW91dCA9IDIwMDAwOwoJCQl2YXIgZGlzcGxheURlZmVycmVkID0gbmV3IERlZmVycmVkKCk7CgoJCQl0ZXN0QXBwLnNob3dPckhpZGVWaWV3cygnaGlkZVZpZXdKcW1BcHBIb21lMicsIHsKCQkJCWRpc3BsYXlEZWZlcnJlZDogZGlzcGxheURlZmVycmVkCgkJCX0pOwoJCQlyZXR1cm4gZGlzcGxheURlZmVycmVkLnRoZW4oZnVuY3Rpb24gKCkgewoJCQkJY2hlY2tBY3RpdmF0ZUNhbGxDb3VudChoaWRlVmlld0pxbUFwcEhvbWUyVmlldywgMik7CgkJCQljaGVja0RlYWN0aXZhdGVDYWxsQ291bnQoaGlkZVZpZXdKcW1BcHBIb21lMVZpZXcsIDIpOwoJCQl9KTsKCQl9LAoJCXRlYXJkb3duOiBmdW5jdGlvbiAoKSB7CgkJCS8vIGNhbGwgdW5sb2FkQXBwIHRvIGNsZWFudXAgYW5kIGVuZCB0aGUgdGVzdAoJCQl2YXIgbWFpbk5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFpblBub2RlSlFNIik7CgkJCW1haW5Ob2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobWFpbk5vZGUpOwoJCQl0ZXN0QXBwLnVubG9hZEFwcCgpOwoJCQkvLyB0aGlzIGlzIHRvIHJlc2V0IHRoZSB1cmwgc28gdGhhdCBhIGJyb3dzZXIgcmVmcmVzaCBjYW4gcmVydW4gdGhlIHRlc3RzCgkJCWxvY2F0aW9uLmhhc2ggPSAiP2NvbmZpZz10ZXN0cy9pbnRlcm4uYnJvd3NlciI7CgkJCWhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvIy8sICcnKSk7CgkJfQoJfTsKCglyZWdpc3RlclN1aXRlKGpxbWhpZGVWaWV3SnFtU3VpdGUpOwoKCWZ1bmN0aW9uIGNoZWNrQWN0aXZhdGVDYWxsQ291bnQodmlldywgY291bnQpIHsKCQlpZiAodmlldykgewoJCQlhc3NlcnQuc3RyaWN0RXF1YWwodmlldy5fYmVmb3JlQWN0aXZhdGVDYWxsQ291bnQsIGNvdW50LAoJCQkJdmlldy5pZCArICIgX2JlZm9yZUFjdGl2YXRlQ2FsbENvdW50IHNob3VsZCBiZSAiICsgY291bnQpOwoJCQlhc3NlcnQuc3RyaWN0RXF1YWwodmlldy5fYWZ0ZXJBY3RpdmF0ZUNhbGxDb3VudCwgY291bnQsCgkJCQl2aWV3LmlkICsgIiBfYWZ0ZXJBY3RpdmF0ZUNhbGxDb3VudCBzaG91bGQgYmUgIiArIGNvdW50KTsKCgkJCS8vYWxzbyB0ZXN0IGZvciBzZWxlY3RlZENoaWxkcmVuIGJlaW5nIHNldCBjb3JyZWN0bHkgd2l0aCBjb25zdHJhaW50IG1haW4KCQkJdmFyIHNlbGVjdGVkQ2hpbGRJZCA9IHRlc3RBcHAuc2VsZWN0ZWRDaGlsZHJlbi5jZW50ZXIuaWQ7CgkJCWFzc2VydC5zdHJpY3RFcXVhbCh2aWV3LmlkLCBzZWxlY3RlZENoaWxkSWQsIHZpZXcuaWQgKyAiIHNob3VsZCBiZSBpbiB0ZXN0QXBwLnNlbGVjdGVkQ2hpbGRyZW4uY2VudGVyLiAiKTsKCgkJCS8vYWxzbyB0ZXN0IGZvciB2aWV3Ll9hY3RpdmUgYmVpbmcgc2V0IGNvcnJlY3RseSB0byB0cnVlCgkJCWFzc2VydC5pc1RydWUodmlldy5fYWN0aXZlLCAidmlld19hY3RpdmUgc2hvdWxkIGJlIHRydWUgZm9yICIgKyB2aWV3LmlkKTsKCQl9Cgl9CgoJZnVuY3Rpb24gY2hlY2tEZWFjdGl2YXRlQ2FsbENvdW50KHZpZXcsIGNvdW50KSB7CgkJCWlmICh2aWV3KSB7CgkJCQlhc3NlcnQuc3RyaWN0RXF1YWwodmlldy5fYmVmb3JlRGVhY3RpdmF0ZUNhbGxDb3VudCwgY291bnQsCgkJCQkJdmlldy5pZCArICIgX2JlZm9yZURlYWN0aXZhdGVDYWxsQ291bnQgc2hvdWxkIGJlICIgKyBjb3VudCk7CgkJCQlhc3NlcnQuc3RyaWN0RXF1YWwodmlldy5fYWZ0ZXJEZWFjdGl2YXRlQ2FsbENvdW50LCBjb3VudCwKCQkJCQl2aWV3LmlkICsgIiBfYWZ0ZXJEZWFjdGl2YXRlQ2FsbENvdW50IHNob3VsZCBiZSAiICsgY291bnQpOwoKCQkJCS8vYWxzbyB0ZXN0IGZvciB2aWV3Ll9hY3RpdmUgYmVpbmcgc2V0IGNvcnJlY3RseSB0byBmYWxzZQoJCQkJYXNzZXJ0LmlzRmFsc2Uodmlldy5fYWN0aXZlLCAidmlld19hY3RpdmUgc2hvdWxkIGJlIGZhbHNlIGZvciAiICsgdmlldy5pZCk7CgkJCX0KCQl9CgkJLy8gc3RyaXAgb3V0IHNpbmdsZSBsaW5lIGNvbW1lbnRzIGZyb20gdGhlIGpzb24gY29uZmlnCglmdW5jdGlvbiBzdHJpcENvbW1lbnRzKGpzb25EYXRhKSB7CgkJanNvbkRhdGEgPSBqc29uRGF0YS5yZXBsYWNlKC9cL1wqLio/XCpcLy9nLCAiIik7CgkJanNvbkRhdGEgPSBqc29uRGF0YS5yZXBsYWNlKC9cL1wvLiovZywgIiIpOwoJCXJldHVybiBqc29uRGF0YTsKCX0KCn0pOwo=",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 20:00:33 GMT",
                    "Content-Length": "6358",
                    "Date": "Thu, 06 Nov 2014 20:00:34 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}