{
    "url": "http://localhost:9999/eladelrom/roomsjs-client/client/examples/video/players/flash/release/history/history.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>window.location.pathname</b> and written to <b>the 'innerHTML' property of a DOM element</b> via the following statements:<ul><li>var file = window.location.pathname.toString();</li><li>file = file.substring(file.lastIndexOf(\"/\")+1);</li><li>getFormElement().innerHTML = '&lt;form name=\"historyForm\" action=\"'+file+'#' + flexAppUrl + '\" method=\"GET\"&gt;&lt;/form&gt;';</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/eladelrom/roomsjs-client/client/examples/video/players/flash/release/history/history.js",
                "path": "/eladelrom/roomsjs-client/client/examples/video/players/flash/release/history/history.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9lbGFkZWxyb20vcm9vbXNqcy1jbGllbnQvY2xpZW50L2V4YW1wbGVzL3ZpZGVvL3BsYXllcnMvZmxhc2gvcmVsZWFzZS9oaXN0b3J5L2hpc3RvcnkuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMjUzMjgNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IFNhdCwgMDggTm92IDIwMTQgMDM6MzY6NDkgR01UDQpMYXN0LU1vZGlmaWVkOiBTYXQsIDA4IE5vdiAyMDE0IDAzOjM2OjQ4IEdNVA0KDQpCcm93c2VySGlzdG9yeVV0aWxzID0gew0KICAgIGFkZEV2ZW50OiBmdW5jdGlvbihlbG0sIGV2VHlwZSwgZm4sIHVzZUNhcHR1cmUpIHsNCiAgICAgICAgdXNlQ2FwdHVyZSA9IHVzZUNhcHR1cmUgfHwgZmFsc2U7DQogICAgICAgIGlmIChlbG0uYWRkRXZlbnRMaXN0ZW5lcikgew0KICAgICAgICAgICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIoZXZUeXBlLCBmbiwgdXNlQ2FwdHVyZSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIGlmIChlbG0uYXR0YWNoRXZlbnQpIHsNCiAgICAgICAgICAgIHZhciByID0gZWxtLmF0dGFjaEV2ZW50KCdvbicgKyBldlR5cGUsIGZuKTsNCiAgICAgICAgICAgIHJldHVybiByOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgZWxtWydvbicgKyBldlR5cGVdID0gZm47DQogICAgICAgIH0NCiAgICB9DQp9DQoNCkJyb3dzZXJIaXN0b3J5ID0gKGZ1bmN0aW9uKCkgew0KICAgIC8vIHR5cGUgb2YgYnJvd3Nlcg0KICAgIHZhciBicm93c2VyID0gew0KICAgICAgICBpZTogZmFsc2UsIA0KICAgICAgICBpZTg6IGZhbHNlLCANCiAgICAgICAgZmlyZWZveDogZmFsc2UsIA0KICAgICAgICBzYWZhcmk6IGZhbHNlLCANCiAgICAgICAgb3BlcmE6IGZhbHNlLCANCiAgICAgICAgdmVyc2lvbjogLTENCiAgICB9Ow0KDQogICAgLy8gRGVmYXVsdCBhcHAgc3RhdGUgVVJMIHRvIHVzZSB3aGVuIG5vIGZyYWdtZW50IElEIHByZXNlbnQNCiAgICB2YXIgZGVmYXVsdEhhc2ggPSAnJzsNCg0KICAgIC8vIExhc3Qta25vd24gYXBwIHN0YXRlIFVSTA0KICAgIHZhciBjdXJyZW50SHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7DQoNCiAgICAvLyBJbml0aWFsIFVSTCAodXNlZCBvbmx5IGJ5IElFKQ0KICAgIHZhciBpbml0aWFsSHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7DQoNCiAgICAvLyBJbml0aWFsIFVSTCAodXNlZCBvbmx5IGJ5IElFKQ0KICAgIHZhciBpbml0aWFsSGFzaCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2g7DQoNCiAgICAvLyBIaXN0b3J5IGZyYW1lIHNvdXJjZSBVUkwgcHJlZml4ICh1c2VkIG9ubHkgYnkgSUUpDQogICAgdmFyIGhpc3RvcnlGcmFtZVNvdXJjZVByZWZpeCA9ICdoaXN0b3J5L2hpc3RvcnlGcmFtZS5odG1sPyc7DQoNCiAgICAvLyBIaXN0b3J5IG1haW50ZW5hbmNlICh1c2VkIG9ubHkgYnkgU2FmYXJpKQ0KICAgIHZhciBjdXJyZW50SGlzdG9yeUxlbmd0aCA9IC0xOw0KICAgIA0KICAgIC8vIEZsYWcgdG8gZGVub3RlIHRoZSBleGlzdGVuY2Ugb2Ygb25oYXNoY2hhbmdlDQogICAgdmFyIGJyb3dzZXJIYXNIYXNoQ2hhbmdlID0gZmFsc2U7DQoNCiAgICB2YXIgaGlzdG9yeUhhc2ggPSBbXTsNCg0KICAgIHZhciBpbml0aWFsU3RhdGUgPSBjcmVhdGVTdGF0ZShpbml0aWFsSHJlZiwgaW5pdGlhbEhyZWYgKyAnIycgKyBpbml0aWFsSGFzaCwgaW5pdGlhbEhhc2gpOw0KDQogICAgdmFyIGJhY2tTdGFjayA9IFtdOw0KICAgIHZhciBmb3J3YXJkU3RhY2sgPSBbXTsNCg0KICAgIHZhciBjdXJyZW50T2JqZWN0SWQgPSBudWxsOw0KDQogICAgLy9Vc2VyQWdlbnQgZGV0ZWN0aW9uDQogICAgdmFyIHVzZXJhZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTsNCg0KICAgIGlmICh1c2VyYWdlbnQuaW5kZXhPZigib3BlcmEiKSAhPSAtMSkgew0KICAgICAgICBicm93c2VyLm9wZXJhID0gdHJ1ZTsNCiAgICB9IGVsc2UgaWYgKHVzZXJhZ2VudC5pbmRleE9mKCJtc2llIikgIT0gLTEpIHsNCiAgICAgICAgYnJvd3Nlci5pZSA9IHRydWU7DQogICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHBhcnNlRmxvYXQodXNlcmFnZW50LnN1YnN0cmluZyh1c2VyYWdlbnQuaW5kZXhPZignbXNpZScpICsgNCkpOw0KICAgICAgICBpZiAoYnJvd3Nlci52ZXJzaW9uID09IDgpDQogICAgICAgIHsNCiAgICAgICAgICAgIGJyb3dzZXIuaWUgPSBmYWxzZTsNCiAgICAgICAgICAgIGJyb3dzZXIuaWU4ID0gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0gZWxzZSBpZiAodXNlcmFnZW50LmluZGV4T2YoInNhZmFyaSIpICE9IC0xKSB7DQogICAgICAgIGJyb3dzZXIuc2FmYXJpID0gdHJ1ZTsNCiAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0gcGFyc2VGbG9hdCh1c2VyYWdlbnQuc3Vic3RyaW5nKHVzZXJhZ2VudC5pbmRleE9mKCdzYWZhcmknKSArIDcpKTsNCiAgICB9IGVsc2UgaWYgKHVzZXJhZ2VudC5pbmRleE9mKCJnZWNrbyIpICE9IC0xKSB7DQogICAgICAgIGJyb3dzZXIuZmlyZWZveCA9IHRydWU7DQogICAgfQ0KDQogICAgaWYgKGJyb3dzZXIuaWUgPT0gdHJ1ZSAmJiBicm93c2VyLnZlcnNpb24gPT0gNykgew0KICAgICAgICB3aW5kb3dbIl9pZV9maXJzdGxvYWQiXSA9IGZhbHNlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGhhc2hDaGFuZ2VIYW5kbGVyKCkNCiAgICB7DQogICAgICAgIGN1cnJlbnRIcmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjsNCiAgICAgICAgdmFyIGZsZXhBcHBVcmwgPSBnZXRIYXNoKCk7DQogICAgICAgIC8vQURSOiB0byBmaXggbXVsdGlwbGUNCiAgICAgICAgaWYgKHR5cGVvZiBCcm93c2VySGlzdG9yeV9tdWx0aXBsZSAhPSAidW5kZWZpbmVkIiAmJiBCcm93c2VySGlzdG9yeV9tdWx0aXBsZSA9PSB0cnVlKSB7DQogICAgICAgICAgICB2YXIgcGwgPSBnZXRQbGF5ZXJzKCk7DQogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgcGxbaV0uYnJvd3NlclVSTENoYW5nZShmbGV4QXBwVXJsKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGdldFBsYXllcigpLmJyb3dzZXJVUkxDaGFuZ2UoZmxleEFwcFVybCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBBY2Nlc3NvciBmdW5jdGlvbnMgZm9yIG9idGFpbmluZyBzcGVjaWZpYyBlbGVtZW50cyBvZiB0aGUgcGFnZS4NCiAgICBmdW5jdGlvbiBnZXRIaXN0b3J5RnJhbWUoKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZV9oaXN0b3J5RnJhbWUnKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRGb3JtRWxlbWVudCgpDQogICAgew0KICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NhZmFyaV9mb3JtRGl2Jyk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0UmVtZW1iZXJFbGVtZW50KCkNCiAgICB7DQogICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2FmYXJpX3JlbWVtYmVyX2ZpZWxkIik7DQogICAgfQ0KDQogICAgLy8gR2V0IHRoZSBGbGFzaCBwbGF5ZXIgb2JqZWN0IGZvciBwZXJmb3JtaW5nIEV4dGVybmFsSW50ZXJmYWNlIGNhbGxiYWNrcy4NCiAgICAvLyBVcGRhdGVkIGZvciBjaGFuZ2VzIHRvIFNXRk9iamVjdDIuDQogICAgZnVuY3Rpb24gZ2V0UGxheWVyKGlkKSB7DQogICAgICAgIHZhciBpOw0KDQoJCWlmIChpZCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkpIHsNCgkJCXZhciByID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOw0KCQkJaWYgKHR5cGVvZiByLlNldFZhcmlhYmxlICE9ICJ1bmRlZmluZWQiKSB7DQoJCQkJcmV0dXJuIHI7DQoJCQl9DQoJCQllbHNlIHsNCgkJCQl2YXIgbyA9IHIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIm9iamVjdCIpOw0KCQkJCXZhciBlID0gci5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZW1iZWQiKTsNCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgby5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9baV0uYnJvd3NlclVSTENoYW5nZSAhPSAidW5kZWZpbmVkIikNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvW2ldOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZS5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVbaV0uYnJvd3NlclVSTENoYW5nZSAhPSAidW5kZWZpbmVkIikNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlW2ldOw0KICAgICAgICAgICAgICAgIH0NCgkJCX0NCgkJfQ0KCQllbHNlIHsNCgkJCXZhciBvID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIm9iamVjdCIpOw0KCQkJdmFyIGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZW1iZWQiKTsNCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBlLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlW2ldLmJyb3dzZXJVUkxDaGFuZ2UgIT0gInVuZGVmaW5lZCIpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZVtpXTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgby5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb1tpXS5icm93c2VyVVJMQ2hhbmdlICE9ICJ1bmRlZmluZWQiKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9baV07DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KCQl9DQoJCXJldHVybiB1bmRlZmluZWQ7DQoJfQ0KICAgIA0KICAgIGZ1bmN0aW9uIGdldFBsYXllcnMoKSB7DQogICAgICAgIHZhciBpOw0KICAgICAgICB2YXIgcGxheWVycyA9IFtdOw0KICAgICAgICBpZiAocGxheWVycy5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgdmFyIHRtcCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdvYmplY3QnKTsNCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0bXAubGVuZ3RoOyBpKyspDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0bXBbaV0uYnJvd3NlclVSTENoYW5nZSAhPSAidW5kZWZpbmVkIikNCiAgICAgICAgICAgICAgICAgICAgcGxheWVycy5wdXNoKHRtcFtpXSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKHBsYXllcnMubGVuZ3RoID09IDAgfHwgcGxheWVyc1swXS5vYmplY3QgPT0gbnVsbCkgew0KICAgICAgICAgICAgdmFyIHRtcCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdlbWJlZCcpOw0KICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRtcC5sZW5ndGg7IGkrKykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRtcFtpXS5icm93c2VyVVJMQ2hhbmdlICE9ICJ1bmRlZmluZWQiKQ0KICAgICAgICAgICAgICAgICAgICBwbGF5ZXJzLnB1c2godG1wW2ldKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gcGxheWVyczsNCiAgICB9DQoNCglmdW5jdGlvbiBnZXRJZnJhbWVIYXNoKCkgew0KCQl2YXIgZG9jID0gZ2V0SGlzdG9yeUZyYW1lKCkuY29udGVudFdpbmRvdy5kb2N1bWVudDsNCgkJdmFyIGhhc2ggPSBTdHJpbmcoZG9jLmxvY2F0aW9uLnNlYXJjaCk7DQoJCWlmIChoYXNoLmxlbmd0aCA9PSAxICYmIGhhc2guY2hhckF0KDApID09ICI/Iikgew0KCQkJaGFzaCA9ICIiOw0KCQl9DQoJCWVsc2UgaWYgKGhhc2gubGVuZ3RoID49IDIgJiYgaGFzaC5jaGFyQXQoMCkgPT0gIj8iKSB7DQoJCQloYXNoID0gaGFzaC5zdWJzdHJpbmcoMSk7DQoJCX0NCgkJcmV0dXJuIGhhc2g7DQoJfQ0KDQogICAgLyogR2V0IHRoZSBjdXJyZW50IGxvY2F0aW9uIGhhc2ggZXhjbHVkaW5nIHRoZSAnIycgc3ltYm9sLiAqLw0KICAgIGZ1bmN0aW9uIGdldEhhc2goKSB7DQogICAgICAgLy8gSXQgd291bGQgYmUgbmljZSBpZiB3ZSBjb3VsZCB1c2UgZG9jdW1lbnQubG9jYXRpb24uaGFzaCBoZXJlLA0KICAgICAgIC8vIGJ1dCBpdCdzIGZhdWx0eSBzb21ldGltZXMuDQogICAgICAgdmFyIGlkeCA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpOw0KICAgICAgIHJldHVybiAoaWR4ID49IDApID8gZG9jdW1lbnQubG9jYXRpb24uaHJlZi5zdWJzdHIoaWR4KzEpIDogJyc7DQogICAgfQ0KDQogICAgLyogR2V0IHRoZSBjdXJyZW50IGxvY2F0aW9uIGhhc2ggZXhjbHVkaW5nIHRoZSAnIycgc3ltYm9sLiAqLw0KICAgIGZ1bmN0aW9uIHNldEhhc2goaGFzaCkgew0KICAgICAgIC8vIEl0IHdvdWxkIGJlIG5pY2UgaWYgd2UgY291bGQgdXNlIGRvY3VtZW50LmxvY2F0aW9uLmhhc2ggaGVyZSwNCiAgICAgICAvLyBidXQgaXQncyBmYXVsdHkgc29tZXRpbWVzLg0KICAgICAgIGlmIChoYXNoID09ICcnKSBoYXNoID0gJyMnDQogICAgICAgZG9jdW1lbnQubG9jYXRpb24uaGFzaCA9IGhhc2g7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY3JlYXRlU3RhdGUoYmFzZVVybCwgbmV3VXJsLCBmbGV4QXBwVXJsKSB7DQogICAgICAgIHJldHVybiB7ICdiYXNlVXJsJzogYmFzZVVybCwgJ25ld1VybCc6IG5ld1VybCwgJ2ZsZXhBcHBVcmwnOiBmbGV4QXBwVXJsLCAndGl0bGUnOiBudWxsIH07DQogICAgfQ0KDQogICAgLyogQWRkIGEgaGlzdG9yeSBlbnRyeSB0byB0aGUgYnJvd3Nlci4NCiAgICAgKiAgIGJhc2VVcmw6IHRoZSBwb3J0aW9uIG9mIHRoZSBsb2NhdGlvbiBwcmlvciB0byB0aGUgJyMnDQogICAgICogICBuZXdVcmw6IHRoZSBlbnRpcmUgbmV3IFVSTCwgaW5jbHVkaW5nICcjJyBhbmQgZm9sbG93aW5nIGZyYWdtZW50DQogICAgICogICBmbGV4QXBwVXJsOiB0aGUgcG9ydGlvbiBvZiB0aGUgbG9jYXRpb24gZm9sbG93aW5nIHRoZSAnIycgb25seQ0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGFkZEhpc3RvcnlFbnRyeShiYXNlVXJsLCBuZXdVcmwsIGZsZXhBcHBVcmwpIHsNCg0KICAgICAgICAvL2RlbGV0ZSBhbGwgdGhlIGhpc3RvcnkgZW50cmllcw0KICAgICAgICBmb3J3YXJkU3RhY2sgPSBbXTsNCg0KICAgICAgICBpZiAoYnJvd3Nlci5pZSkgew0KICAgICAgICAgICAgLy9DaGVjayB0byBzZWUgaWYgd2UgYXJlIGJlaW5nIGFza2VkIHRvIGRvIGEgbmF2aWdhdGUgZm9yIHRoZSBmaXJzdA0KICAgICAgICAgICAgLy9oaXN0b3J5IGVudHJ5LCBhbmQgaWYgc28gaWdub3JlLCBiZWNhdXNlIGl0J3MgY29taW5nIGZyb20gdGhlIGNyZWF0aW9uDQogICAgICAgICAgICAvL29mIHRoZSBoaXN0b3J5IGlmcmFtZQ0KICAgICAgICAgICAgaWYgKGZsZXhBcHBVcmwgPT0gZGVmYXVsdEhhc2ggJiYgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9PSBpbml0aWFsSHJlZiAmJiB3aW5kb3dbJ19pZV9maXJzdGxvYWQnXSkgew0KICAgICAgICAgICAgICAgIGN1cnJlbnRIcmVmID0gaW5pdGlhbEhyZWY7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCghZmxleEFwcFVybCB8fCBmbGV4QXBwVXJsID09IGRlZmF1bHRIYXNoKSAmJiB3aW5kb3dbJ19pZV9maXJzdGxvYWQnXSkgew0KICAgICAgICAgICAgICAgIG5ld1VybCA9IGJhc2VVcmwgKyAnIycgKyBkZWZhdWx0SGFzaDsNCiAgICAgICAgICAgICAgICBmbGV4QXBwVXJsID0gZGVmYXVsdEhhc2g7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIC8vIGZvciBJRSwgdGVsbCB0aGUgaGlzdG9yeSBmcmFtZSB0byBnbyBzb21ld2hlcmUgd2l0aG91dCBhICcjJw0KICAgICAgICAgICAgICAgIC8vIGluIG9yZGVyIHRvIGdldCB0aGlzIGVudHJ5IGludG8gdGhlIGJyb3dzZXIgaGlzdG9yeS4NCiAgICAgICAgICAgICAgICBnZXRIaXN0b3J5RnJhbWUoKS5zcmMgPSBoaXN0b3J5RnJhbWVTb3VyY2VQcmVmaXggKyBmbGV4QXBwVXJsOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgc2V0SGFzaChmbGV4QXBwVXJsKTsNCiAgICAgICAgfSBlbHNlIHsNCg0KICAgICAgICAgICAgLy9BRFINCiAgICAgICAgICAgIGlmIChiYWNrU3RhY2subGVuZ3RoID09IDAgJiYgaW5pdGlhbFN0YXRlLmZsZXhBcHBVcmwgPT0gZmxleEFwcFVybCkgew0KICAgICAgICAgICAgICAgIGluaXRpYWxTdGF0ZSA9IGNyZWF0ZVN0YXRlKGJhc2VVcmwsIG5ld1VybCwgZmxleEFwcFVybCk7DQogICAgICAgICAgICB9IGVsc2UgaWYoYmFja1N0YWNrLmxlbmd0aCA+IDAgJiYgYmFja1N0YWNrW2JhY2tTdGFjay5sZW5ndGggLSAxXS5mbGV4QXBwVXJsID09IGZsZXhBcHBVcmwpIHsNCiAgICAgICAgICAgICAgICBiYWNrU3RhY2tbYmFja1N0YWNrLmxlbmd0aCAtIDFdID0gY3JlYXRlU3RhdGUoYmFzZVVybCwgbmV3VXJsLCBmbGV4QXBwVXJsKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGJyb3dzZXIuc2FmYXJpICYmICFicm93c2VySGFzSGFzaENoYW5nZSkgew0KICAgICAgICAgICAgICAgIC8vIGZvciBTYWZhcmksIHN1Ym1pdCBhIGZvcm0gd2hvc2UgYWN0aW9uIHBvaW50cyB0byB0aGUgZGVzaXJlZCBVUkwNCiAgICAgICAgICAgICAgICBpZiAoYnJvd3Nlci52ZXJzaW9uIDw9IDQxOS4zKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnRvU3RyaW5nKCk7DQogICAgICAgICAgICAgICAgICAgIGZpbGUgPSBmaWxlLnN1YnN0cmluZyhmaWxlLmxhc3RJbmRleE9mKCIvIikrMSk7DQogICAgICAgICAgICAgICAgICAgIGdldEZvcm1FbGVtZW50KCkuaW5uZXJIVE1MID0gJzxmb3JtIG5hbWU9Imhpc3RvcnlGb3JtIiBhY3Rpb249IicrZmlsZSsnIycgKyBmbGV4QXBwVXJsICsgJyIgbWV0aG9kPSJHRVQiPjwvZm9ybT4nOw0KICAgICAgICAgICAgICAgICAgICAvL2dldCB0aGUgY3VycmVudCBlbGVtZW50cyBhbmQgYWRkIHRoZW0gdG8gdGhlIGZvcm0NCiAgICAgICAgICAgICAgICAgICAgdmFyIHFzID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSk7DQogICAgICAgICAgICAgICAgICAgIHZhciBxc19hcnIgPSBxcy5zcGxpdCgiJiIpOw0KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHFzX2Fyci5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IHFzX2FycltpXS5zcGxpdCgiPSIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS50eXBlID0gImhpZGRlbiI7DQogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLm5hbWUgPSB0bXBbMF07DQogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnZhbHVlID0gdG1wWzFdOw0KICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZm9ybXMuaGlzdG9yeUZvcm0uYXBwZW5kQ2hpbGQoZWxlbSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZm9ybXMuaGlzdG9yeUZvcm0uc3VibWl0KCk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgdG9wLmxvY2F0aW9uLmhhc2ggPSBmbGV4QXBwVXJsOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvLyBXZSBhbHNvIGhhdmUgdG8gbWFpbnRhaW4gdGhlIGhpc3RvcnkgYnkgaGFuZCBmb3IgU2FmYXJpDQogICAgICAgICAgICAgICAgaGlzdG9yeUhhc2hbaGlzdG9yeS5sZW5ndGhdID0gZmxleEFwcFVybDsNCiAgICAgICAgICAgICAgICBfc3RvcmVTdGF0ZXMoKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBqdXN0IHRlbGwgdGhlIGJyb3dzZXIgdG8gZ28gdGhlcmUNCiAgICAgICAgICAgICAgICBzZXRIYXNoKGZsZXhBcHBVcmwpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGJhY2tTdGFjay5wdXNoKGNyZWF0ZVN0YXRlKGJhc2VVcmwsIG5ld1VybCwgZmxleEFwcFVybCkpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIF9zdG9yZVN0YXRlcygpIHsNCiAgICAgICAgaWYgKGJyb3dzZXIuc2FmYXJpKSB7DQogICAgICAgICAgICBnZXRSZW1lbWJlckVsZW1lbnQoKS52YWx1ZSA9IGhpc3RvcnlIYXNoLmpvaW4oIiwiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGhhbmRsZUJhY2tCdXR0b24oKSB7DQogICAgICAgIC8vVGhlICJjdXJyZW50IiBwYWdlIGlzIGFsd2F5cyBhdCB0aGUgdG9wIG9mIHRoZSBoaXN0b3J5IHN0YWNrLg0KICAgICAgICB2YXIgY3VycmVudCA9IGJhY2tTdGFjay5wb3AoKTsNCiAgICAgICAgaWYgKCFjdXJyZW50KSB7IHJldHVybjsgfQ0KICAgICAgICB2YXIgbGFzdCA9IGJhY2tTdGFja1tiYWNrU3RhY2subGVuZ3RoIC0gMV07DQogICAgICAgIGlmICghbGFzdCAmJiBiYWNrU3RhY2subGVuZ3RoID09IDApew0KICAgICAgICAgICAgbGFzdCA9IGluaXRpYWxTdGF0ZTsNCiAgICAgICAgfQ0KICAgICAgICBmb3J3YXJkU3RhY2sucHVzaChjdXJyZW50KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBoYW5kbGVGb3J3YXJkQnV0dG9uKCkgew0KICAgICAgICAvL3N1bW1hcnk6IHByaXZhdGUgbWV0aG9kLiBEbyBub3QgY2FsbCB0aGlzIGRpcmVjdGx5Lg0KDQogICAgICAgIHZhciBsYXN0ID0gZm9yd2FyZFN0YWNrLnBvcCgpOw0KICAgICAgICBpZiAoIWxhc3QpIHsgcmV0dXJuOyB9DQogICAgICAgIGJhY2tTdGFjay5wdXNoKGxhc3QpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGhhbmRsZUFyYml0cmFyeVVybCgpIHsNCiAgICAgICAgLy9kZWxldGUgYWxsIHRoZSBoaXN0b3J5IGVudHJpZXMNCiAgICAgICAgZm9yd2FyZFN0YWNrID0gW107DQogICAgfQ0KDQogICAgLyogQ2FsbGVkIHBlcmlvZGljYWxseSB0byBwb2xsIHRvIHNlZSBpZiB3ZSBuZWVkIHRvIGRldGVjdCBuYXZpZ2F0aW9uIHRoYXQgaGFzIG9jY3VycmVkICovDQogICAgZnVuY3Rpb24gY2hlY2tGb3JVcmxDaGFuZ2UoKSB7DQoNCiAgICAgICAgaWYgKGJyb3dzZXIuaWUpIHsNCiAgICAgICAgICAgIGlmIChjdXJyZW50SHJlZiAhPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmICYmIGN1cnJlbnRIcmVmICsgJyMnICE9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpIHsNCiAgICAgICAgICAgICAgICAvL1RoaXMgb2NjdXJzIHdoZW4gdGhlIHVzZXIgaGFzIG5hdmlnYXRlZCB0byBhIHNwZWNpZmljIFVSTA0KICAgICAgICAgICAgICAgIC8vd2l0aGluIHRoZSBhcHAsIGFuZCBkaWRuJ3QgdXNlIGJyb3dzZXIgYmFjay9mb3J3YXJkDQogICAgICAgICAgICAgICAgLy9JRSBzZWVtcyB0byBoYXZlIGEgYnVnIHdoZXJlIGl0IHN0b3BzIHVwZGF0aW5nIHRoZSBVUkwgaXQNCiAgICAgICAgICAgICAgICAvL3Nob3dzIHRoZSBlbmQtdXNlciBhdCB0aGlzIHBvaW50LCBidXQgcHJvZ3JhbWF0aWNhbGx5IGl0DQogICAgICAgICAgICAgICAgLy9hcHBlYXJzIHRvIGJlIGNvcnJlY3QuICBEbyBhIGZ1bGwgYXBwIHJlbG9hZCB0byBnZXQgYXJvdW5kDQogICAgICAgICAgICAgICAgLy90aGlzIGlzc3VlLg0KICAgICAgICAgICAgICAgIGlmIChicm93c2VyLnZlcnNpb24gPCA3KSB7DQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRIcmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjsNCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24ucmVsb2FkKCk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCgkJCQkJaWYgKGdldEhhc2goKSAhPSBnZXRJZnJhbWVIYXNoKCkpIHsNCgkJCQkJCS8vIHRoaXMuaWZyYW1lLnNyYyA9IHRoaXMuYmxhbmtVUkwgKyBoYXNoOw0KCQkJCQkJdmFyIHNvdXJjZVRvU2V0ID0gaGlzdG9yeUZyYW1lU291cmNlUHJlZml4ICsgZ2V0SGFzaCgpOw0KCQkJCQkJZ2V0SGlzdG9yeUZyYW1lKCkuc3JjID0gc291cmNlVG9TZXQ7DQogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7DQoJCQkJCX0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoYnJvd3Nlci5zYWZhcmkgJiYgIWJyb3dzZXJIYXNIYXNoQ2hhbmdlKSB7DQogICAgICAgICAgICAvLyBGb3IgU2FmYXJpLCB3ZSBoYXZlIHRvIGNoZWNrIHRvIHNlZSBpZiBoaXN0b3J5Lmxlbmd0aCBjaGFuZ2VkLg0KICAgICAgICAgICAgaWYgKGN1cnJlbnRIaXN0b3J5TGVuZ3RoID49IDAgJiYgaGlzdG9yeS5sZW5ndGggIT0gY3VycmVudEhpc3RvcnlMZW5ndGgpIHsNCiAgICAgICAgICAgICAgICAvL2FsZXJ0KCJkaWQgY2hhbmdlOiAiICsgaGlzdG9yeS5sZW5ndGggKyAiLCAiICsgaGlzdG9yeUhhc2gubGVuZ3RoICsgInwiICsgaGlzdG9yeUhhc2hbaGlzdG9yeS5sZW5ndGhdICsgInw+IiArIGhpc3RvcnlIYXNoLmpvaW4oInwiKSk7DQogICAgICAgICAgICAgICAgdmFyIGZsZXhBcHBVcmwgPSBnZXRIYXNoKCk7DQogICAgICAgICAgICAgICAgaWYgKGJyb3dzZXIudmVyc2lvbiA8IDUyOC4xNiAvKiBBbnl0aGluZyBlYXJsaWVyIHRoYW4gU2FmYXJpIDQuMCAqLykNCiAgICAgICAgICAgICAgICB7ICAgIA0KICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCBkaWQgY2hhbmdlIGFuZCB3ZSdyZSBydW5uaW5nIFNhZmFyaSAzLnggb3IgZWFybGllciwgDQogICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gd2UgaGF2ZSB0byBsb29rIHRoZSBvbGQgc3RhdGUgdXAgaW4gb3VyIGhhbmQtbWFpbnRhaW5lZCANCiAgICAgICAgICAgICAgICAgICAgLy8gYXJyYXkgc2luY2UgZG9jdW1lbnQubG9jYXRpb24uaGFzaCB3b24ndCBoYXZlIGNoYW5nZWQsIA0KICAgICAgICAgICAgICAgICAgICAvLyB0aGVuIGNhbGwgYmFjayBpbnRvIEJyb3dzZXJNYW5hZ2VyLg0KICAgICAgICAgICAgICAgIGN1cnJlbnRIaXN0b3J5TGVuZ3RoID0gaGlzdG9yeS5sZW5ndGg7DQogICAgICAgICAgICAgICAgICAgIGZsZXhBcHBVcmwgPSBoaXN0b3J5SGFzaFtjdXJyZW50SGlzdG9yeUxlbmd0aF07DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy9BRFI6IHRvIGZpeCBtdWx0aXBsZQ0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQnJvd3Nlckhpc3RvcnlfbXVsdGlwbGUgIT0gInVuZGVmaW5lZCIgJiYgQnJvd3Nlckhpc3RvcnlfbXVsdGlwbGUgPT0gdHJ1ZSkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgcGwgPSBnZXRQbGF5ZXJzKCk7DQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGwubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBsW2ldLmJyb3dzZXJVUkxDaGFuZ2UoZmxleEFwcFVybCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBnZXRQbGF5ZXIoKS5icm93c2VyVVJMQ2hhbmdlKGZsZXhBcHBVcmwpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBfc3RvcmVTdGF0ZXMoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZiAoYnJvd3Nlci5maXJlZm94ICYmICFicm93c2VySGFzSGFzaENoYW5nZSkgew0KICAgICAgICAgICAgaWYgKGN1cnJlbnRIcmVmICE9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpIHsNCiAgICAgICAgICAgICAgICB2YXIgYnNsID0gYmFja1N0YWNrLmxlbmd0aDsNCg0KICAgICAgICAgICAgICAgIHZhciB1cmxBY3Rpb25zID0gew0KICAgICAgICAgICAgICAgICAgICBiYWNrOiBmYWxzZSwgDQogICAgICAgICAgICAgICAgICAgIGZvcndhcmQ6IGZhbHNlLCANCiAgICAgICAgICAgICAgICAgICAgc2V0OiBmYWxzZQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmICgod2luZG93LmxvY2F0aW9uLmhhc2ggPT0gaW5pdGlhbEhhc2ggfHwgd2luZG93LmxvY2F0aW9uLmhyZWYgPT0gaW5pdGlhbEhyZWYpICYmIChic2wgPT0gMSkpIHsNCiAgICAgICAgICAgICAgICAgICAgdXJsQWN0aW9ucy5iYWNrID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgLy8gRklYTUU6IGNvdWxkIHRoaXMgZXZlciBiZSBhIGZvcndhcmQgYnV0dG9uPw0KICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCBjbGVhciBpdCBiZWNhdXNlIHdlIHN0aWxsIG5lZWQgdG8gY2hlY2sgZm9yIGZvcndhcmRzLiBVZ2cuDQogICAgICAgICAgICAgICAgICAgIC8vIGNsZWFySW50ZXJ2YWwodGhpcy5sb2NhdGlvblRpbWVyKTsNCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlQmFja0J1dHRvbigpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAvLyBmaXJzdCBjaGVjayB0byBzZWUgaWYgd2UgY291bGQgaGF2ZSBnb25lIGZvcndhcmQuIFdlIGFsd2F5cyBoYWx0IG9uDQogICAgICAgICAgICAgICAgLy8gYSBuby1oYXNoIGl0ZW0uDQogICAgICAgICAgICAgICAgaWYgKGZvcndhcmRTdGFjay5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChmb3J3YXJkU3RhY2tbZm9yd2FyZFN0YWNrLmxlbmd0aC0xXS5mbGV4QXBwVXJsID09IGdldEhhc2goKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdXJsQWN0aW9ucy5mb3J3YXJkID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUZvcndhcmRCdXR0b24oKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIG9rLCB0aGF0IGRpZG4ndCB3b3JrLCB0cnkgc29tZXBsYWNlIGJhY2sgaW4gdGhlIGhpc3Rvcnkgc3RhY2sNCiAgICAgICAgICAgICAgICBpZiAoKGJzbCA+PSAyKSAmJiAoYmFja1N0YWNrW2JzbCAtIDJdKSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoYmFja1N0YWNrW2JzbCAtIDJdLmZsZXhBcHBVcmwgPT0gZ2V0SGFzaCgpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB1cmxBY3Rpb25zLmJhY2sgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQmFja0J1dHRvbigpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmICghdXJsQWN0aW9ucy5iYWNrICYmICF1cmxBY3Rpb25zLmZvcndhcmQpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kSW5TdGFja3MgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICBiYWNrOiAtMSwgDQogICAgICAgICAgICAgICAgICAgICAgICBmb3J3YXJkOiAtMQ0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYWNrU3RhY2subGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYWNrU3RhY2tbaV0uZmxleEFwcFVybCA9PSBnZXRIYXNoKCkgJiYgaSAhPSAoYnNsIC0gMikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmJpdHJhcnlVcmwgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kSW5TdGFja3MuYmFjayA9IGk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3J3YXJkU3RhY2subGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3J3YXJkU3RhY2tbaV0uZmxleEFwcFVybCA9PSBnZXRIYXNoKCkgJiYgaSAhPSAoYnNsIC0gMikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmJpdHJhcnlVcmwgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kSW5TdGFja3MuZm9yd2FyZCA9IGk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlQXJiaXRyYXJ5VXJsKCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gRmlyZWZveCBjaGFuZ2VkOyBkbyBhIGNhbGxiYWNrIGludG8gQnJvd3Nlck1hbmFnZXIgdG8gdGVsbCBpdC4NCiAgICAgICAgICAgICAgICBjdXJyZW50SHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7DQogICAgICAgICAgICAgICAgdmFyIGZsZXhBcHBVcmwgPSBnZXRIYXNoKCk7DQogICAgICAgICAgICAgICAgLy9BRFI6IHRvIGZpeCBtdWx0aXBsZQ0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQnJvd3Nlckhpc3RvcnlfbXVsdGlwbGUgIT0gInVuZGVmaW5lZCIgJiYgQnJvd3Nlckhpc3RvcnlfbXVsdGlwbGUgPT0gdHJ1ZSkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgcGwgPSBnZXRQbGF5ZXJzKCk7DQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGwubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBsW2ldLmJyb3dzZXJVUkxDaGFuZ2UoZmxleEFwcFVybCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBnZXRQbGF5ZXIoKS5icm93c2VyVVJMQ2hhbmdlKGZsZXhBcHBVcmwpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHZhciBfaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgDQogICAgICAgIGJyb3dzZXJIYXNIYXNoQ2hhbmdlID0gKCJvbmhhc2hjaGFuZ2UiIGluIGRvY3VtZW50LmJvZHkpOw0KICAgICAgICANCiAgICAgICAgaWYgKGJyb3dzZXIuaWUpDQogICAgICAgIHsNCiAgICAgICAgICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpOw0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHM7IHMgPSBzY3JpcHRzW2ldOyBpKyspIHsNCiAgICAgICAgICAgICAgICBpZiAocy5zcmMuaW5kZXhPZigiaGlzdG9yeS5qcyIpID4gLTEpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGlmcmFtZV9sb2NhdGlvbiA9IChuZXcgU3RyaW5nKHMuc3JjKSkucmVwbGFjZSgiaGlzdG9yeS5qcyIsICJoaXN0b3J5RnJhbWUuaHRtbCIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGhpc3RvcnlGcmFtZVNvdXJjZVByZWZpeCA9IGlmcmFtZV9sb2NhdGlvbiArICI/IjsNCiAgICAgICAgICAgIHZhciBzcmMgPSBoaXN0b3J5RnJhbWVTb3VyY2VQcmVmaXg7DQoNCiAgICAgICAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpZnJhbWUiKTsNCiAgICAgICAgICAgIGlmcmFtZS5pZCA9ICdpZV9oaXN0b3J5RnJhbWUnOw0KICAgICAgICAgICAgaWZyYW1lLm5hbWUgPSAnaWVfaGlzdG9yeUZyYW1lJzsNCiAgICAgICAgICAgIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDpmYWxzZTsnOyANCg0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7DQogICAgICAgICAgICB9IGNhdGNoKGUpIHsNCiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7DQogICAgICAgICAgICAgICAgfSwgMCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoYnJvd3Nlci5zYWZhcmkgJiYgIWJyb3dzZXJIYXNIYXNoQ2hhbmdlKQ0KICAgICAgICB7DQogICAgICAgICAgICB2YXIgcmVtZW1iZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsNCiAgICAgICAgICAgIHJlbWVtYmVyRGl2LmlkID0gJ3NhZmFyaV9yZW1lbWJlckRpdic7DQogICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlbWVtYmVyRGl2KTsNCiAgICAgICAgICAgIHJlbWVtYmVyRGl2LmlubmVySFRNTCA9ICc8aW5wdXQgdHlwZT0idGV4dCIgaWQ9InNhZmFyaV9yZW1lbWJlcl9maWVsZCIgc3R5bGU9IndpZHRoOiA1MDBweDsiPic7DQoNCiAgICAgICAgICAgIHZhciBmb3JtRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7DQogICAgICAgICAgICBmb3JtRGl2LmlkID0gJ3NhZmFyaV9mb3JtRGl2JzsNCiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybURpdik7DQoNCiAgICAgICAgICAgIHZhciByZWxvYWRlcl9jb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7DQogICAgICAgICAgICByZWxvYWRlcl9jb250ZW50LmlkID0gJ3NhZmFyaXJlbG9hZGVyJzsNCiAgICAgICAgICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpOw0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHM7IHMgPSBzY3JpcHRzW2ldOyBpKyspIHsNCiAgICAgICAgICAgICAgICBpZiAocy5zcmMuaW5kZXhPZigiaGlzdG9yeS5qcyIpID4gLTEpIHsNCiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IChuZXcgU3RyaW5nKHMuc3JjKSkucmVwbGFjZSgiLmpzIiwgIi5odG1sIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmVsb2FkZXJfY29udGVudC5pbm5lckhUTUwgPSAnPGlmcmFtZSBpZD0ic2FmYXJpcmVsb2FkZXItaWZyYW1lIiBzcmM9ImFib3V0OmJsYW5rIiBmcmFtZWJvcmRlcj0ibm8iIHNjcm9sbGluZz0ibm8iPjwvaWZyYW1lPic7DQogICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlbG9hZGVyX2NvbnRlbnQpOw0KICAgICAgICAgICAgcmVsb2FkZXJfY29udGVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7DQogICAgICAgICAgICByZWxvYWRlcl9jb250ZW50LnN0eWxlLmxlZnQgPSByZWxvYWRlcl9jb250ZW50LnN0eWxlLnRvcCA9ICctOTk5OXB4JzsNCiAgICAgICAgICAgIGlmcmFtZSA9IHJlbG9hZGVyX2NvbnRlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lmcmFtZScpWzBdOw0KDQogICAgICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNhZmFyaV9yZW1lbWJlcl9maWVsZCIpLnZhbHVlICE9ICIiICkgew0KICAgICAgICAgICAgICAgIGhpc3RvcnlIYXNoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNhZmFyaV9yZW1lbWJlcl9maWVsZCIpLnZhbHVlLnNwbGl0KCIsIik7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoYnJvd3Nlckhhc0hhc2hDaGFuZ2UpICAgICAgICANCiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkub25oYXNoY2hhbmdlID0gaGFzaENoYW5nZUhhbmRsZXI7DQogICAgfQ0KDQogICAgcmV0dXJuIHsNCiAgICAgICAgaGlzdG9yeUhhc2g6IGhpc3RvcnlIYXNoLCANCiAgICAgICAgYmFja1N0YWNrOiBmdW5jdGlvbigpIHsgcmV0dXJuIGJhY2tTdGFjazsgfSwgDQogICAgICAgIGZvcndhcmRTdGFjazogZnVuY3Rpb24oKSB7IHJldHVybiBmb3J3YXJkU3RhY2sgfSwgDQogICAgICAgIGdldFBsYXllcjogZ2V0UGxheWVyLCANCiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oc3JjKSB7DQogICAgICAgICAgICBfaW5pdGlhbGl6ZShzcmMpOw0KICAgICAgICB9LCANCiAgICAgICAgc2V0VVJMOiBmdW5jdGlvbih1cmwpIHsNCiAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSB1cmw7DQogICAgICAgIH0sIA0KICAgICAgICBnZXRVUkw6IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7DQogICAgICAgIH0sIA0KICAgICAgICBnZXRUaXRsZTogZnVuY3Rpb24oKSB7DQogICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQudGl0bGU7DQogICAgICAgIH0sIA0KICAgICAgICBzZXRUaXRsZTogZnVuY3Rpb24odGl0bGUpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgYmFja1N0YWNrW2JhY2tTdGFjay5sZW5ndGggLSAxXS50aXRsZSA9IHRpdGxlOw0KICAgICAgICAgICAgfSBjYXRjaChlKSB7IH0NCiAgICAgICAgICAgIC8vaWYgb24gc2FmYXJpLCBzZXQgdGhlIHRpdGxlIHRvIGJlIHRoZSBlbXB0eSBzdHJpbmcuIA0KICAgICAgICAgICAgaWYgKGJyb3dzZXIuc2FmYXJpKSB7DQogICAgICAgICAgICAgICAgaWYgKHRpdGxlID09ICIiKSB7DQogICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSB3aW5kb3cubG9jYXRpb24uaHJlZi50b1N0cmluZygpOw0KICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IHRtcC5zdWJzdHJpbmcoKHRtcC5sYXN0SW5kZXhPZigiLyIpKzEpLCB0bXAubGFzdEluZGV4T2YoIiMiKSk7DQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSAiIjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGRvY3VtZW50LnRpdGxlID0gdGl0bGU7DQogICAgICAgIH0sIA0KICAgICAgICBzZXREZWZhdWx0VVJMOiBmdW5jdGlvbihkZWYpDQogICAgICAgIHsNCiAgICAgICAgICAgIGRlZmF1bHRIYXNoID0gZGVmOw0KICAgICAgICAgICAgZGVmID0gZ2V0SGFzaCgpOw0KICAgICAgICAgICAgLy90cmFpbGluZyA/IGlzIGltcG9ydGFudCBlbHNlIGFuIGV4dHJhIGZyYW1lIGdldHMgYWRkZWQgdG8gdGhlIGhpc3RvcnkNCiAgICAgICAgICAgIC8vd2hlbiBuYXZpZ2F0aW5nIGJhY2sgdG8gdGhlIGZpcnN0IHBhZ2UuICBBbHRlcm5hdGl2ZWx5IGNvdWxkIGNoZWNrDQogICAgICAgICAgICAvL2luIGhpc3RvcnkgZnJhbWUgbmF2aWdhdGlvbiB0byBjb21wYXJlICMgYW5kID8uDQogICAgICAgICAgICBpZiAoYnJvd3Nlci5pZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB3aW5kb3dbJ19pZV9maXJzdGxvYWQnXSA9IHRydWU7DQogICAgICAgICAgICAgICAgdmFyIHNvdXJjZVRvU2V0ID0gaGlzdG9yeUZyYW1lU291cmNlUHJlZml4ICsgZGVmOw0KICAgICAgICAgICAgICAgIHZhciBmdW5jID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgIGdldEhpc3RvcnlGcmFtZSgpLnNyYyA9IHNvdXJjZVRvU2V0Ow0KICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSgiIyIgKyBkZWYpOw0KICAgICAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbChjaGVja0ZvclVybENoYW5nZSwgNTApOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBmdW5jKCk7DQogICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7DQogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jKCk7IH0sIDApOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGJyb3dzZXIuc2FmYXJpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGN1cnJlbnRIaXN0b3J5TGVuZ3RoID0gaGlzdG9yeS5sZW5ndGg7DQogICAgICAgICAgICAgICAgaWYgKGhpc3RvcnlIYXNoLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICAgICAgICAgIGhpc3RvcnlIYXNoW2N1cnJlbnRIaXN0b3J5TGVuZ3RoXSA9IGRlZjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld2xvYyA9ICIjIiArIGRlZjsNCiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UobmV3bG9jKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KGhpc3RvcnlIYXNoW2hpc3RvcnlIYXNoLmxlbmd0aC0xXSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHNldEludGVydmFsKGNoZWNrRm9yVXJsQ2hhbmdlLCA1MCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKGJyb3dzZXIuZmlyZWZveCB8fCBicm93c2VyLm9wZXJhKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKCIjIiArIGRlZiArICIkIik7DQogICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpLm1hdGNoKHJlZykpIHsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICB2YXIgbmV3bG9jID0iIyIgKyBkZWY7DQogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKG5ld2xvYyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHNldEludGVydmFsKGNoZWNrRm9yVXJsQ2hhbmdlLCA1MCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgfSwgDQoNCiAgICAgICAgLyogU2V0IHRoZSBjdXJyZW50IGJyb3dzZXIgVVJMOyBjYWxsZWQgZnJvbSBpbnNpZGUgQnJvd3Nlck1hbmFnZXIgdG8gcHJvcGFnYXRlDQogICAgICAgICAqIHRoZSBhcHBsaWNhdGlvbiBzdGF0ZSBvdXQgdG8gdGhlIGNvbnRhaW5lci4NCiAgICAgICAgICovDQogICAgICAgIHNldEJyb3dzZXJVUkw6IGZ1bmN0aW9uKGZsZXhBcHBVcmwsIG9iamVjdElkKSB7DQogICAgICAgICAgICBpZiAoYnJvd3Nlci5pZSAmJiB0eXBlb2Ygb2JqZWN0SWQgIT0gInVuZGVmaW5lZCIpIHsNCiAgICAgICAgICAgICAgICBjdXJyZW50T2JqZWN0SWQgPSBvYmplY3RJZDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgLy9mcm9tSWZyYW1lID0gZnJvbUlmcmFtZSB8fCBmYWxzZTsNCiAgICAgICAgICAgLy9mcm9tRmxleCA9IGZyb21GbGV4IHx8IGZhbHNlOw0KICAgICAgICAgICAvL2FsZXJ0KCJzZXRCcm93c2VyVVJMOiAiICsgZmxleEFwcFVybCk7DQogICAgICAgICAgIC8vZmxleEFwcFVybCA9IChmbGV4QXBwVXJsID09ICIiKSA/IGRlZmF1bHRIYXNoIDogZmxleEFwcFVybCA7DQoNCiAgICAgICAgICAgdmFyIHBvcyA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpOw0KICAgICAgICAgICB2YXIgYmFzZVVybCA9IHBvcyAhPSAtMSA/IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYuc3Vic3RyKDAsIHBvcykgOiBkb2N1bWVudC5sb2NhdGlvbi5ocmVmOw0KICAgICAgICAgICB2YXIgbmV3VXJsID0gYmFzZVVybCArICcjJyArIGZsZXhBcHBVcmw7DQoNCiAgICAgICAgICAgaWYgKGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgIT0gbmV3VXJsICYmIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgKyAnIycgIT0gbmV3VXJsKSB7DQogICAgICAgICAgICAgICBjdXJyZW50SHJlZiA9IG5ld1VybDsNCiAgICAgICAgICAgICAgIGFkZEhpc3RvcnlFbnRyeShiYXNlVXJsLCBuZXdVcmwsIGZsZXhBcHBVcmwpOw0KICAgICAgICAgICAgICAgY3VycmVudEhpc3RvcnlMZW5ndGggPSBoaXN0b3J5Lmxlbmd0aDsNCiAgICAgICAgICAgfQ0KICAgICAgICB9LCANCg0KICAgICAgICBicm93c2VyVVJMQ2hhbmdlOiBmdW5jdGlvbihmbGV4QXBwVXJsKSB7DQogICAgICAgICAgICB2YXIgb2JqZWN0SWQgPSBudWxsOw0KICAgICAgICAgICAgaWYgKGJyb3dzZXIuaWUgJiYgY3VycmVudE9iamVjdElkICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICBvYmplY3RJZCA9IGN1cnJlbnRPYmplY3RJZDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKHR5cGVvZiBCcm93c2VySGlzdG9yeV9tdWx0aXBsZSAhPSAidW5kZWZpbmVkIiAmJiBCcm93c2VySGlzdG9yeV9tdWx0aXBsZSA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgdmFyIHBsID0gZ2V0UGxheWVycygpOw0KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGwubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBsW2ldLmJyb3dzZXJVUkxDaGFuZ2UoZmxleEFwcFVybCk7DQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkgeyB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBnZXRQbGF5ZXIob2JqZWN0SWQpLmJyb3dzZXJVUkxDaGFuZ2UoZmxleEFwcFVybCk7DQogICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7IH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY3VycmVudE9iamVjdElkID0gbnVsbDsNCiAgICAgICAgfSwNCiAgICAgICAgZ2V0VXNlckFnZW50OiBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50Ow0KICAgICAgICB9LA0KICAgICAgICBnZXRQbGF0Zm9ybTogZnVuY3Rpb24oKSB7DQogICAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnBsYXRmb3JtOw0KICAgICAgICB9DQoNCiAgICB9DQoNCn0pKCk7DQoNCi8vIEluaXRpYWxpemF0aW9uDQoNCi8vIEF1dG9tYXRlZCB1bml0IHRlc3RpbmcgYW5kIG90aGVyIGRpYWdub3N0aWNzDQoNCmZ1bmN0aW9uIHNldFVSTCh1cmwpDQp7DQogICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IHVybDsNCn0NCg0KZnVuY3Rpb24gYmFja0J1dHRvbigpDQp7DQogICAgaGlzdG9yeS5iYWNrKCk7DQp9DQoNCmZ1bmN0aW9uIGZvcndhcmRCdXR0b24oKQ0Kew0KICAgIGhpc3RvcnkuZm9yd2FyZCgpOw0KfQ0KDQpmdW5jdGlvbiBnb0ZvcndhcmRPckJhY2tJbkhpc3Rvcnkoc3RlcCkNCnsNCiAgICBoaXN0b3J5LmdvKHN0ZXApOw0KfQ0KDQovL0Jyb3dzZXJIaXN0b3J5VXRpbHMuYWRkRXZlbnQod2luZG93LCAibG9hZCIsIGZ1bmN0aW9uKCkgeyBCcm93c2VySGlzdG9yeS5pbml0aWFsaXplKCk7IH0pOw0KKGZ1bmN0aW9uKGkpIHsNCiAgICB2YXIgdSA9bmF2aWdhdG9yLnVzZXJBZ2VudDt2YXIgZT0vKkBjY19vbiFAKi9mYWxzZTsgDQogICAgdmFyIHN0ID0gc2V0VGltZW91dDsNCiAgICBpZigvd2Via2l0L2kudGVzdCh1KSl7DQogICAgICAgIHN0KGZ1bmN0aW9uKCl7DQogICAgICAgICAgICB2YXIgZHI9ZG9jdW1lbnQucmVhZHlTdGF0ZTsNCiAgICAgICAgICAgIGlmKGRyPT0ibG9hZGVkInx8ZHI9PSJjb21wbGV0ZSIpe2koKX0NCiAgICAgICAgICAgIGVsc2V7c3QoYXJndW1lbnRzLmNhbGxlZSwxMCk7fX0sMTApOw0KICAgIH0gZWxzZSBpZigoL21vemlsbGEvaS50ZXN0KHUpJiYhLyhjb21wYXRpKS8udGVzdCh1KSkgfHwgKC9vcGVyYS9pLnRlc3QodSkpKXsNCiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsaSxmYWxzZSk7DQogICAgfSBlbHNlIGlmKGUpew0KICAgIChmdW5jdGlvbigpew0KICAgICAgICB2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkb2M6cmR5Jyk7DQogICAgICAgIHRyeXt0LmRvU2Nyb2xsKCdsZWZ0Jyk7DQogICAgICAgICAgICBpKCk7dD1udWxsOw0KICAgICAgICB9Y2F0Y2goZSl7c3QoYXJndW1lbnRzLmNhbGxlZSwwKTt9fSkoKTsNCiAgICB9IGVsc2V7DQogICAgICAgIHdpbmRvdy5vbmxvYWQ9aTsNCiAgICB9DQp9KSggZnVuY3Rpb24oKSB7QnJvd3Nlckhpc3RvcnkuaW5pdGlhbGl6ZSgpO30gKTsNCg==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 03:36:48 GMT",
                    "Content-Length": "25328",
                    "Date": "Sat, 08 Nov 2014 03:36:49 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}