{
    "url": "http://localhost:9999/AnalyticalGraphicsInc/cesium/Tools/jscoverage-0.5.1/doc/instrumented/jscoverage.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.search</b> and written to <b>window.open()</b> via the following statements:<ul><li>jscoverage_initTabContents(location.search);</li><li>queryString = queryString.substring(1);</li><li>parameters = queryString.split(/&amp;|;/);</li><li>parameter = parameters[i];</li><li>value = decodeURIComponent(parameter.substr(index + 1));</li><li>windowURL = value;</li><li>window.open(windowURL);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/AnalyticalGraphicsInc/cesium/Tools/jscoverage-0.5.1/doc/instrumented/jscoverage.js",
                "path": "/AnalyticalGraphicsInc/cesium/Tools/jscoverage-0.5.1/doc/instrumented/jscoverage.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9BbmFseXRpY2FsR3JhcGhpY3NJbmMvY2VzaXVtL1Rvb2xzL2pzY292ZXJhZ2UtMC41LjEvZG9jL2luc3RydW1lbnRlZC9qc2NvdmVyYWdlLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMzIxMTANCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IFRodSwgMDYgTm92IDIwMTQgMTQ6NTQ6MDAgR01UDQpMYXN0LU1vZGlmaWVkOiBUaHUsIDA2IE5vdiAyMDE0IDE0OjUzOjI2IEdNVA0KDQovKgogICAganNjb3ZlcmFnZS5qcyAtIGNvZGUgY292ZXJhZ2UgZm9yIEphdmFTY3JpcHQKICAgIENvcHlyaWdodCAoQykgMjAwNywgMjAwOCwgMjAwOSwgMjAxMCBzaWxpY29uZm9ya3MuY29tCgogICAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5CiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAyIG9mIHRoZSBMaWNlbnNlLCBvcgogICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KCiAgICBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiAgICBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgoKICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nCiAgICB3aXRoIHRoaXMgcHJvZ3JhbTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBJbmMuLAogICAgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQS4KKi8KCmZ1bmN0aW9uIGpzY292ZXJhZ2Vfb3Blbldhcm5pbmdEaWFsb2coKSB7CiAgdmFyIGlkOwogIGlmIChqc2NvdmVyYWdlX2lzUmVwb3J0KSB7CiAgICBpZCA9ICdyZXBvcnRXYXJuaW5nRGlhbG9nJzsKICB9CiAgZWxzZSB7CiAgICBpZCA9ICd3YXJuaW5nRGlhbG9nJzsKICB9CiAgdmFyIGRpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsKICBkaWFsb2cuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2VfY2xvc2VXYXJuaW5nRGlhbG9nKCkgewogIHZhciBpZDsKICBpZiAoanNjb3ZlcmFnZV9pc1JlcG9ydCkgewogICAgaWQgPSAncmVwb3J0V2FybmluZ0RpYWxvZyc7CiAgfQogIGVsc2UgewogICAgaWQgPSAnd2FybmluZ0RpYWxvZyc7CiAgfQogIHZhciBkaWFsb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CiAgZGlhbG9nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7Cn0KCi8qKgpJbml0aWFsaXplcyB0aGUgXyRqc2NvdmVyYWdlIG9iamVjdCBpbiBhIHdpbmRvdy4gIFRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdApmdW5jdGlvbiBjYWxsZWQgaW4gdGhlIHBhZ2UuCkBwYXJhbSAgdyAgdGhpcyBzaG91bGQgYWx3YXlzIGJlIHRoZSBnbG9iYWwgd2luZG93IG9iamVjdAoqLwpmdW5jdGlvbiBqc2NvdmVyYWdlX2luaXQodykgewogIHRyeSB7CiAgICAvLyBpbiBTYWZhcmksICJpbXBvcnQiIGlzIGEgc3ludGF4IGVycm9yCiAgICBDb21wb25lbnRzLnV0aWxzWydpbXBvcnQnXSgncmVzb3VyY2U6Ly9hcHAvbW9kdWxlcy9qc2NvdmVyYWdlLmpzbScpOwogICAganNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSA9IHRydWU7CiAgICByZXR1cm47CiAgfQogIGNhdGNoIChlKSB7fQoKICAvLyBjaGVjayBpZiB3ZSBhcmUgaW4gaW52ZXJ0ZWQgbW9kZQogIGlmICh3Lm9wZW5lcikgewogICAgdHJ5IHsKICAgICAgaWYgKHcub3BlbmVyLnRvcC5fJGpzY292ZXJhZ2UpIHsKICAgICAgICBqc2NvdmVyYWdlX2lzSW52ZXJ0ZWRNb2RlID0gdHJ1ZTsKICAgICAgICBpZiAoISB3Ll8kanNjb3ZlcmFnZSkgewogICAgICAgICAgdy5fJGpzY292ZXJhZ2UgPSB3Lm9wZW5lci50b3AuXyRqc2NvdmVyYWdlOwogICAgICAgIH0KICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBqc2NvdmVyYWdlX2lzSW52ZXJ0ZWRNb2RlID0gZmFsc2U7CiAgICAgIH0KICAgIH0KICAgIGNhdGNoIChlKSB7CiAgICAgIHRyeSB7CiAgICAgICAgaWYgKHcub3BlbmVyLl8kanNjb3ZlcmFnZSkgewogICAgICAgICAganNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSA9IHRydWU7CiAgICAgICAgICBpZiAoISB3Ll8kanNjb3ZlcmFnZSkgewogICAgICAgICAgICB3Ll8kanNjb3ZlcmFnZSA9IHcub3BlbmVyLl8kanNjb3ZlcmFnZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICBqc2NvdmVyYWdlX2lzSW52ZXJ0ZWRNb2RlID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIGNhdGNoIChlMikgewogICAgICAgIGpzY292ZXJhZ2VfaXNJbnZlcnRlZE1vZGUgPSBmYWxzZTsKICAgICAgfQogICAgfQogIH0KICBlbHNlIHsKICAgIGpzY292ZXJhZ2VfaXNJbnZlcnRlZE1vZGUgPSBmYWxzZTsKICB9CgogIGlmICghIGpzY292ZXJhZ2VfaXNJbnZlcnRlZE1vZGUpIHsKICAgIGlmICghIHcuXyRqc2NvdmVyYWdlKSB7CiAgICAgIHcuXyRqc2NvdmVyYWdlID0ge307CiAgICB9CiAgfQp9Cgp2YXIganNjb3ZlcmFnZV9jdXJyZW50RmlsZSA9IG51bGw7CnZhciBqc2NvdmVyYWdlX2N1cnJlbnRMaW5lID0gbnVsbDsKCnZhciBqc2NvdmVyYWdlX2luTGVuZ3RoeU9wZXJhdGlvbiA9IGZhbHNlOwoKLyoKUG9zc2libGUgc3RhdGVzOgoJCQlpc0ludmVydGVkTW9kZQlpc1NlcnZlcglpc1JlcG9ydAl0YWJzCm5vcm1hbAkJCWZhbHNlCQlmYWxzZQkJZmFsc2UJCUJyb3dzZXIKaW52ZXJ0ZWQJCXRydWUJCWZhbHNlCQlmYWxzZQkJCnNlcnZlciwgbm9ybWFsCQlmYWxzZQkJdHJ1ZQkJZmFsc2UJCUJyb3dzZXIsIFN0b3JlCnNlcnZlciwgaW52ZXJ0ZWQJdHJ1ZQkJdHJ1ZQkJZmFsc2UJCVN0b3JlCnJlcG9ydAkJCWZhbHNlCQlmYWxzZQkJdHJ1ZQkJCiovCnZhciBqc2NvdmVyYWdlX2lzSW52ZXJ0ZWRNb2RlID0gZmFsc2U7CnZhciBqc2NvdmVyYWdlX2lzU2VydmVyID0gZmFsc2U7CnZhciBqc2NvdmVyYWdlX2lzUmVwb3J0ID0gZmFsc2U7Cgpqc2NvdmVyYWdlX2luaXQod2luZG93KTsKCmZ1bmN0aW9uIGpzY292ZXJhZ2VfY3JlYXRlUmVxdWVzdCgpIHsKICAvLyBOb3RlIHRoYXQgdGhlIElFNyBYTUxIdHRwUmVxdWVzdCBkb2VzIG5vdCBzdXBwb3J0IGZpbGUgVVJMJ3MuCiAgLy8gaHR0cDovL3hoYWIuYmxvZ3Nwb3QuY29tLzIwMDYvMTEvaWU3LXN1cHBvcnQtZm9yLXhtbGh0dHByZXF1ZXN0Lmh0bWwKICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vaWUvYXJjaGl2ZS8yMDA2LzEyLzA2L2ZpbGUtdXJpcy1pbi13aW5kb3dzLmFzcHgKLy8jSlNDT1ZFUkFHRV9JRgogIGlmICh3aW5kb3cuQWN0aXZlWE9iamVjdCkgewogICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCJNaWNyb3NvZnQuWE1MSFRUUCIpOwogIH0KICBlbHNlIHsKICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICB9Cn0KCi8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZmluZHBvcy5odG1sCmZ1bmN0aW9uIGpzY292ZXJhZ2VfZmluZFBvcyhvYmopIHsKICB2YXIgcmVzdWx0ID0gMDsKICBkbyB7CiAgICByZXN1bHQgKz0gb2JqLm9mZnNldFRvcDsKICAgIG9iaiA9IG9iai5vZmZzZXRQYXJlbnQ7CiAgfQogIHdoaWxlIChvYmopOwogIHJldHVybiByZXN1bHQ7Cn0KCi8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvdmlld3BvcnQvY29tcGF0aWJpbGl0eS5odG1sCmZ1bmN0aW9uIGpzY292ZXJhZ2VfZ2V0Vmlld3BvcnRIZWlnaHQoKSB7Ci8vI0pTQ09WRVJBR0VfSUYgL01TSUUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkKICBpZiAoc2VsZi5pbm5lckhlaWdodCkgewogICAgLy8gYWxsIGV4Y2VwdCBFeHBsb3JlcgogICAgcmV0dXJuIHNlbGYuaW5uZXJIZWlnaHQ7CiAgfQogIGVsc2UgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSB7CiAgICAvLyBFeHBsb3JlciA2IFN0cmljdCBNb2RlCiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDsKICB9CiAgZWxzZSBpZiAoZG9jdW1lbnQuYm9keSkgewogICAgLy8gb3RoZXIgRXhwbG9yZXJzCiAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7CiAgfQogIGVsc2UgewogICAgdGhyb3cgIkNvdWxkbid0IGNhbGN1bGF0ZSB2aWV3cG9ydCBoZWlnaHQiOwogIH0KLy8jSlNDT1ZFUkFHRV9FTkRJRgp9CgovKioKSW5kaWNhdGVzIHZpc3VhbGx5IHRoYXQgYSBsZW5ndGh5IG9wZXJhdGlvbiBoYXMgYmVndW4uICBUaGUgcHJvZ3Jlc3MgYmFyIGlzCmRpc3BsYXllZCwgYW5kIHRoZSBjdXJzb3IgaXMgY2hhbmdlZCB0byBidXN5IChvbiBicm93c2VycyB3aGljaCBzdXBwb3J0IHRoaXMpLgoqLwpmdW5jdGlvbiBqc2NvdmVyYWdlX2JlZ2luTGVuZ3RoeU9wZXJhdGlvbigpIHsKICBqc2NvdmVyYWdlX2luTGVuZ3RoeU9wZXJhdGlvbiA9IHRydWU7CgogIHZhciBwcm9ncmVzc0JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzc0JhcicpOwogIHByb2dyZXNzQmFyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7CiAgUHJvZ3Jlc3NCYXIuc2V0UGVyY2VudGFnZShwcm9ncmVzc0JhciwgMCk7CiAgdmFyIHByb2dyZXNzTGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NMYWJlbCcpOwogIHByb2dyZXNzTGFiZWwuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJzsKCiAgLyogYmxhY2tsaXN0IGJ1Z2d5IGJyb3dzZXJzICovCi8vI0pTQ09WRVJBR0VfSUYKICBpZiAoISAvT3BlcmF8V2ViS2l0Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7CiAgICAvKgogICAgQ2hhbmdlIHRoZSBjdXJzb3Igc3R5bGUgb2YgZWFjaCBlbGVtZW50LiAgTm90ZSB0aGF0IGNoYW5naW5nIHRoZSBjbGFzcyBvZiB0aGUKICAgIGVsZW1lbnQgKHRvIG9uZSB3aXRoIGEgYnVzeSBjdXJzb3IpIGlzIGJ1Z2d5IGluIElFLgogICAgKi8KICAgIHZhciB0YWJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYnMnKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2Jyk7CiAgICB2YXIgaTsKICAgIGZvciAoaSA9IDA7IGkgPCB0YWJzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHRhYnMuaXRlbShpKS5zdHlsZS5jdXJzb3IgPSAnd2FpdCc7CiAgICB9CiAgfQp9CgovKioKUmVtb3ZlcyB0aGUgcHJvZ3Jlc3MgYmFyIGFuZCBidXN5IGN1cnNvci4KKi8KZnVuY3Rpb24ganNjb3ZlcmFnZV9lbmRMZW5ndGh5T3BlcmF0aW9uKCkgewogIHZhciBwcm9ncmVzc0JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzc0JhcicpOwogIFByb2dyZXNzQmFyLnNldFBlcmNlbnRhZ2UocHJvZ3Jlc3NCYXIsIDEwMCk7CiAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgIGpzY292ZXJhZ2VfaW5MZW5ndGh5T3BlcmF0aW9uID0gZmFsc2U7CiAgICBwcm9ncmVzc0Jhci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7CiAgICB2YXIgcHJvZ3Jlc3NMYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzc0xhYmVsJyk7CiAgICBwcm9ncmVzc0xhYmVsLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJzsKICAgIHByb2dyZXNzTGFiZWwuaW5uZXJIVE1MID0gJyc7CgogICAgdmFyIHRhYnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFicycpLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKTsKICAgIHZhciBpOwogICAgZm9yIChpID0gMDsgaSA8IHRhYnMubGVuZ3RoOyBpKyspIHsKICAgICAgdGFicy5pdGVtKGkpLnN0eWxlLmN1cnNvciA9ICcnOwogICAgfQogIH0sIDUwKTsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9zZXRTaXplKCkgewovLyNKU0NPVkVSQUdFX0lGIC9NU0lFLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpCiAgdmFyIHZpZXdwb3J0SGVpZ2h0ID0ganNjb3ZlcmFnZV9nZXRWaWV3cG9ydEhlaWdodCgpOwoKICAvKgogIGJvcmRlci10b3Atd2lkdGg6ICAgICAxcHgKICBwYWRkaW5nLXRvcDogICAgICAgICAxMHB4CiAgcGFkZGluZy1ib3R0b206ICAgICAgMTBweAogIGJvcmRlci1ib3R0b20td2lkdGg6ICAxcHgKICBtYXJnaW4tYm90dG9tOiAgICAgICAxMHB4CiAgICAgICAgICAgICAgICAgICAgICAgLS0tLQogICAgICAgICAgICAgICAgICAgICAgIDMycHgKICAqLwogIHZhciB0YWJQYWdlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJQYWdlcycpOwogIHZhciB0YWJQYWdlSGVpZ2h0ID0gKHZpZXdwb3J0SGVpZ2h0IC0ganNjb3ZlcmFnZV9maW5kUG9zKHRhYlBhZ2VzKSAtIDMyKSArICdweCc7CiAgdmFyIG5vZGVMaXN0ID0gdGFiUGFnZXMuY2hpbGROb2RlczsKICB2YXIgbGVuZ3RoID0gbm9kZUxpc3QubGVuZ3RoOwogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgIHZhciBub2RlID0gbm9kZUxpc3QuaXRlbShpKTsKICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSAxKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgbm9kZS5zdHlsZS5oZWlnaHQgPSB0YWJQYWdlSGVpZ2h0OwogIH0KCiAgdmFyIGlmcmFtZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZnJhbWVEaXYnKTsKICAvLyBtYXkgbm90IGV4aXN0IGlmIHdlIGhhdmUgcmVtb3ZlZCB0aGUgZmlyc3QgdGFiCiAgaWYgKGlmcmFtZURpdikgewogICAgaWZyYW1lRGl2LnN0eWxlLmhlaWdodCA9ICh2aWV3cG9ydEhlaWdodCAtIGpzY292ZXJhZ2VfZmluZFBvcyhpZnJhbWVEaXYpIC0gMjEpICsgJ3B4JzsKICB9CgogIHZhciBzdW1tYXJ5RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1bW1hcnlEaXYnKTsKICBzdW1tYXJ5RGl2LnN0eWxlLmhlaWdodCA9ICh2aWV3cG9ydEhlaWdodCAtIGpzY292ZXJhZ2VfZmluZFBvcyhzdW1tYXJ5RGl2KSAtIDIxKSArICdweCc7CgogIHZhciBzb3VyY2VEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlRGl2Jyk7CiAgc291cmNlRGl2LnN0eWxlLmhlaWdodCA9ICh2aWV3cG9ydEhlaWdodCAtIGpzY292ZXJhZ2VfZmluZFBvcyhzb3VyY2VEaXYpIC0gMjEpICsgJ3B4JzsKCiAgdmFyIHN0b3JlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3JlRGl2Jyk7CiAgaWYgKHN0b3JlRGl2KSB7CiAgICBzdG9yZURpdi5zdHlsZS5oZWlnaHQgPSAodmlld3BvcnRIZWlnaHQgLSBqc2NvdmVyYWdlX2ZpbmRQb3Moc3RvcmVEaXYpIC0gMjEpICsgJ3B4JzsKICB9Ci8vI0pTQ09WRVJBR0VfRU5ESUYKfQoKLyoqClJldHVybnMgdGhlIGJvb2xlYW4gdmFsdWUgb2YgYSBzdHJpbmcuICBWYWx1ZXMgJ2ZhbHNlJywgJ2YnLCAnbm8nLCAnbicsICdvZmYnLAphbmQgJzAnICh1cHBlciBvciBsb3dlciBjYXNlKSBhcmUgZmFsc2UuCkBwYXJhbSAgcyAgdGhlIHN0cmluZwpAcmV0dXJuICBhIGJvb2xlYW4gdmFsdWUKKi8KZnVuY3Rpb24ganNjb3ZlcmFnZV9nZXRCb29sZWFuVmFsdWUocykgewogIHMgPSBzLnRvTG93ZXJDYXNlKCk7CiAgaWYgKHMgPT09ICdmYWxzZScgfHwgcyA9PT0gJ2YnIHx8IHMgPT09ICdubycgfHwgcyA9PT0gJ24nIHx8IHMgPT09ICdvZmYnIHx8IHMgPT09ICcwJykgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9yZW1vdmVUYWIoaWQpIHsKICB2YXIgdGFiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQgKyAnVGFiJyk7CiAgdGFiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFiKTsKICB2YXIgdGFiUGFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkICsgJ1RhYlBhZ2UnKTsKICB0YWJQYWdlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFiUGFnZSk7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2VfaXNWYWxpZFVSTCh1cmwpIHsKICAvLyBSRkMgMzk4NgogIHZhciBtYXRjaGVzID0gL14oKFteOlwvPyNdKyk6KT8oXC9cLyhbXlwvPyNdKikpPyhbXj8jXSopKFw/KFteI10qKSk/KCMoLiopKT8vLmV4ZWModXJsKTsKICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICB2YXIgc2NoZW1lID0gbWF0Y2hlc1sxXTsKICBpZiAodHlwZW9mIHNjaGVtZSA9PT0gJ3N0cmluZycpIHsKICAgIHNjaGVtZSA9IHNjaGVtZS50b0xvd2VyQ2FzZSgpOwogICAgcmV0dXJuIHNjaGVtZSA9PT0gJycgfHwgc2NoZW1lID09PSAnZmlsZTonIHx8IHNjaGVtZSA9PT0gJ2h0dHA6JyB8fCBzY2hlbWUgPT09ICdodHRwczonOwogIH0KICByZXR1cm4gdHJ1ZTsKfQoKLyoqCkluaXRpYWxpemVzIHRoZSBjb250ZW50cyBvZiB0aGUgdGFicy4gIFRoaXMgc2V0cyB0aGUgaW5pdGlhbCB2YWx1ZXMgb2YgdGhlCmlucHV0IGZpZWxkIGFuZCBpZnJhbWUgaW4gdGhlICJCcm93c2VyIiB0YWIgYW5kIHRoZSBjaGVja2JveCBpbiB0aGUgIlN1bW1hcnkiCnRhYi4KQHBhcmFtICBxdWVyeVN0cmluZyAgdGhpcyBzaG91bGQgYWx3YXlzIGJlIGxvY2F0aW9uLnNlYXJjaAoqLwpmdW5jdGlvbiBqc2NvdmVyYWdlX2luaXRUYWJDb250ZW50cyhxdWVyeVN0cmluZykgewogIHZhciBzaG93TWlzc2luZ0NvbHVtbiA9IGZhbHNlOwogIHZhciB1cmwgPSBudWxsOwogIHZhciB3aW5kb3dVUkwgPSBudWxsOwogIHZhciBwYXJhbWV0ZXJzLCBwYXJhbWV0ZXIsIGksIGluZGV4LCBuYW1lLCB2YWx1ZTsKICBpZiAocXVlcnlTdHJpbmcubGVuZ3RoID4gMCkgewogICAgLy8gY2hvcCBvZmYgdGhlIHF1ZXN0aW9uIG1hcmsKICAgIHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmcuc3Vic3RyaW5nKDEpOwogICAgcGFyYW1ldGVycyA9IHF1ZXJ5U3RyaW5nLnNwbGl0KC8mfDsvKTsKICAgIGZvciAoaSA9IDA7IGkgPCBwYXJhbWV0ZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHBhcmFtZXRlciA9IHBhcmFtZXRlcnNbaV07CiAgICAgIGluZGV4ID0gcGFyYW1ldGVyLmluZGV4T2YoJz0nKTsKICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgIC8vIHN0aWxsIHdvcmtzIHdpdGggb2xkIHN5bnRheAogICAgICAgIHVybCA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbWV0ZXIpOwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIG5hbWUgPSBwYXJhbWV0ZXIuc3Vic3RyKDAsIGluZGV4KTsKICAgICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbWV0ZXIuc3Vic3RyKGluZGV4ICsgMSkpOwogICAgICAgIGlmIChuYW1lID09PSAnbWlzc2luZycgfHwgbmFtZSA9PT0gJ20nKSB7CiAgICAgICAgICBzaG93TWlzc2luZ0NvbHVtbiA9IGpzY292ZXJhZ2VfZ2V0Qm9vbGVhblZhbHVlKHZhbHVlKTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ3VybCcgfHwgbmFtZSA9PT0gJ3UnIHx8IG5hbWUgPT09ICdmcmFtZScgfHwgbmFtZSA9PT0gJ2YnKSB7CiAgICAgICAgICB1cmwgPSB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ3dpbmRvdycgfHwgbmFtZSA9PT0gJ3cnKSB7CiAgICAgICAgICB3aW5kb3dVUkwgPSB2YWx1ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIHZhciBjaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGVja2JveCcpOwogIGNoZWNrYm94LmNoZWNrZWQgPSBzaG93TWlzc2luZ0NvbHVtbjsKICBpZiAoc2hvd01pc3NpbmdDb2x1bW4pIHsKICAgIGpzY292ZXJhZ2VfYXBwZW5kTWlzc2luZ0NvbHVtbigpOwogIH0KCiAgdmFyIGlzVmFsaWRVUkwgPSBmdW5jdGlvbiAodXJsKSB7CiAgICB2YXIgcmVzdWx0ID0ganNjb3ZlcmFnZV9pc1ZhbGlkVVJMKHVybCk7CiAgICBpZiAoISByZXN1bHQpIHsKICAgICAgYWxlcnQoJ0ludmFsaWQgVVJMOiAnICsgdXJsKTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgaWYgKHVybCAhPT0gbnVsbCAmJiBpc1ZhbGlkVVJMKHVybCkpIHsKICAgIC8vIHRoaXMgd2lsbCBhdXRvbWF0aWNhbGx5IHByb3BhZ2F0ZSB0byB0aGUgaW5wdXQgZmllbGQKICAgIGZyYW1lc1swXS5sb2NhdGlvbiA9IHVybDsKICB9CiAgZWxzZSBpZiAod2luZG93VVJMICE9PSBudWxsICYmIGlzVmFsaWRVUkwod2luZG93VVJMKSkgewogICAgd2luZG93Lm9wZW4od2luZG93VVJMKTsKICB9CgogIC8vIGlmIHRoZSBicm93c2VyIHRhYiBpcyBhYnNlbnQsIHdlIGhhdmUgdG8gaW5pdGlhbGl6ZSB0aGUgc3VtbWFyeSB0YWIKICBpZiAoISBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnJvd3NlclRhYicpKSB7CiAgICBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU3VtbWFyeVRhYigpOwogIH0KfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9ib2R5X2xvYWQoKSB7CiAgLy8gY2hlY2sgaWYgdGhpcyBpcyBhIGZpbGU6IFVSTAogIGlmICh3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhyZWYgJiYgL15maWxlOi9pLnRlc3Qod2luZG93LmxvY2F0aW9uLmhyZWYpKSB7CiAgICB2YXIgd2FybmluZ0RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3YXJuaW5nRGl2Jyk7CiAgICB3YXJuaW5nRGl2LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogIH0KCiAgdmFyIHByb2dyZXNzQmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzQmFyJyk7CiAgUHJvZ3Jlc3NCYXIuaW5pdChwcm9ncmVzc0Jhcik7CgogIGZ1bmN0aW9uIHJlcG9ydEVycm9yKGUpIHsKICAgIGpzY292ZXJhZ2VfZW5kTGVuZ3RoeU9wZXJhdGlvbigpOwogICAgdmFyIHN1bW1hcnlUaHJvYmJlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdW1tYXJ5VGhyb2JiZXInKTsKICAgIHN1bW1hcnlUaHJvYmJlci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7CiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1bW1hcnlFcnJvckRpdicpOwogICAgZGl2LmlubmVySFRNTCA9ICdFcnJvcjogJyArIGU7CiAgfQoKICBpZiAoanNjb3ZlcmFnZV9pc1JlcG9ydCkgewogICAganNjb3ZlcmFnZV9iZWdpbkxlbmd0aHlPcGVyYXRpb24oKTsKICAgIHZhciBzdW1tYXJ5VGhyb2JiZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VtbWFyeVRocm9iYmVyJyk7CiAgICBzdW1tYXJ5VGhyb2JiZXIuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJzsKICAgIHZhciByZXF1ZXN0ID0ganNjb3ZlcmFnZV9jcmVhdGVSZXF1ZXN0KCk7CiAgICB0cnkgewogICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsICdqc2NvdmVyYWdlLmpzb24nLCB0cnVlKTsKICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlID09PSA0KSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgICAgIHRocm93IHJlcXVlc3Quc3RhdHVzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IHJlcXVlc3QucmVzcG9uc2VUZXh0OwogICAgICAgICAgICBpZiAocmVzcG9uc2UgPT09ICcnKSB7CiAgICAgICAgICAgICAgdGhyb3cgNDA0OwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIganNvbjsKICAgICAgICAgICAgaWYgKHdpbmRvdy5KU09OICYmIHdpbmRvdy5KU09OLnBhcnNlKSB7CiAgICAgICAgICAgICAganNvbiA9IHdpbmRvdy5KU09OLnBhcnNlKHJlc3BvbnNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICBqc29uID0gZXZhbCgnKCcgKyByZXNwb25zZSArICcpJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBmaWxlOwogICAgICAgICAgICBmb3IgKGZpbGUgaW4ganNvbikgewogICAgICAgICAgICAgIGlmICghIGpzb24uaGFzT3duUHJvcGVydHkoZmlsZSkpIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdmFyIGZpbGVDb3ZlcmFnZSA9IGpzb25bZmlsZV07CiAgICAgICAgICAgICAgXyRqc2NvdmVyYWdlW2ZpbGVdID0gZmlsZUNvdmVyYWdlLmNvdmVyYWdlOwogICAgICAgICAgICAgIF8kanNjb3ZlcmFnZVtmaWxlXS5zb3VyY2UgPSBmaWxlQ292ZXJhZ2Uuc291cmNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGpzY292ZXJhZ2VfcmVjYWxjdWxhdGVTdW1tYXJ5VGFiKCk7CiAgICAgICAgICAgIHN1bW1hcnlUaHJvYmJlci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7CiAgICAgICAgICB9CiAgICAgICAgICBjYXRjaCAoZSkgewogICAgICAgICAgICByZXBvcnRFcnJvcihlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH07CiAgICAgIHJlcXVlc3Quc2VuZChudWxsKTsKICAgIH0KICAgIGNhdGNoIChlKSB7CiAgICAgIHJlcG9ydEVycm9yKGUpOwogICAgfQoKICAgIGpzY292ZXJhZ2VfcmVtb3ZlVGFiKCdicm93c2VyJyk7CiAgICBqc2NvdmVyYWdlX3JlbW92ZVRhYignc3RvcmUnKTsKICB9CiAgZWxzZSB7CiAgICBpZiAoanNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSkgewogICAgICBqc2NvdmVyYWdlX3JlbW92ZVRhYignYnJvd3NlcicpOwogICAgfQoKICAgIGlmICghIGpzY292ZXJhZ2VfaXNTZXJ2ZXIpIHsKICAgICAganNjb3ZlcmFnZV9yZW1vdmVUYWIoJ3N0b3JlJyk7CiAgICB9CiAgfQoKICBqc2NvdmVyYWdlX2luaXRUYWJDb250cm9sKCk7CgogIGpzY292ZXJhZ2VfaW5pdFRhYkNvbnRlbnRzKGxvY2F0aW9uLnNlYXJjaCk7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2VfYm9keV9yZXNpemUoKSB7CiAgaWYgKC9NU0lFLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7CiAgICBqc2NvdmVyYWdlX3NldFNpemUoKTsKICB9Cn0KCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIHRhYiAxCgpmdW5jdGlvbiBqc2NvdmVyYWdlX3VwZGF0ZUJyb3dzZXIoKSB7CiAgdmFyIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImxvY2F0aW9uIik7CiAgZnJhbWVzWzBdLmxvY2F0aW9uID0gaW5wdXQudmFsdWU7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2Vfb3BlbldpbmRvdygpIHsKICB2YXIgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibG9jYXRpb24iKTsKICB2YXIgdXJsID0gaW5wdXQudmFsdWU7CiAgd2luZG93Lm9wZW4odXJsKTsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9pbnB1dF9rZXlwcmVzcyhlKSB7CiAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHsKICAgIGlmIChlLnNoaWZ0S2V5KSB7CiAgICAgIGpzY292ZXJhZ2Vfb3BlbldpbmRvdygpOwogICAgfQogICAgZWxzZSB7CiAgICAgIGpzY292ZXJhZ2VfdXBkYXRlQnJvd3NlcigpOwogICAgfQogIH0KfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9vcGVuSW5GcmFtZUJ1dHRvbl9jbGljaygpIHsKICBqc2NvdmVyYWdlX3VwZGF0ZUJyb3dzZXIoKTsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9vcGVuSW5XaW5kb3dCdXR0b25fY2xpY2soKSB7CiAganNjb3ZlcmFnZV9vcGVuV2luZG93KCk7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2VfYnJvd3Nlcl9sb2FkKCkgewogIC8qIHVwZGF0ZSB0aGUgaW5wdXQgYm94ICovCiAgdmFyIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImxvY2F0aW9uIik7CgogIC8qIHNvbWV0aW1lcyBJRSBzZWVtcyB0byBmaXJlIHRoaXMgYWZ0ZXIgdGhlIHRhYiBoYXMgYmVlbiByZW1vdmVkICovCiAgaWYgKGlucHV0KSB7CiAgICBpbnB1dC52YWx1ZSA9IGZyYW1lc1swXS5sb2NhdGlvbjsKICB9Cn0KCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIHRhYiAyCgpmdW5jdGlvbiBqc2NvdmVyYWdlX2NyZWF0ZUhhbmRsZXIoZmlsZSwgbGluZSkgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICBqc2NvdmVyYWdlX2dldChmaWxlLCBsaW5lKTsKICAgIHJldHVybiBmYWxzZTsKICB9Owp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX2NyZWF0ZUxpbmsoZmlsZSwgbGluZSkgewogIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwogIGxpbmsuaHJlZiA9ICcjJzsKICBsaW5rLm9uY2xpY2sgPSBqc2NvdmVyYWdlX2NyZWF0ZUhhbmRsZXIoZmlsZSwgbGluZSk7CgogIHZhciB0ZXh0OwogIGlmIChsaW5lKSB7CiAgICB0ZXh0ID0gbGluZS50b1N0cmluZygpOwogIH0KICBlbHNlIHsKICAgIHRleHQgPSBmaWxlOwogIH0KCiAgbGluay5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSk7CgogIHJldHVybiBsaW5rOwp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU3VtbWFyeVRhYihjYykgewogIHZhciBjaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGVja2JveCcpOwogIHZhciBzaG93TWlzc2luZ0NvbHVtbiA9IGNoZWNrYm94LmNoZWNrZWQ7CgogIGlmICghIGNjKSB7CiAgICBjYyA9IHdpbmRvdy5fJGpzY292ZXJhZ2U7CiAgfQogIGlmICghIGNjKSB7Ci8vI0pTQ09WRVJBR0VfSUYgMAogICAgdGhyb3cgIk5vIGNvdmVyYWdlIGluZm9ybWF0aW9uIGZvdW5kLiI7Ci8vI0pTQ09WRVJBR0VfRU5ESUYKICB9CgogIHZhciB0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdW1tYXJ5VGJvZHkiKTsKICB3aGlsZSAodGJvZHkuaGFzQ2hpbGROb2RlcygpKSB7CiAgICB0Ym9keS5yZW1vdmVDaGlsZCh0Ym9keS5maXJzdENoaWxkKTsKICB9CgogIHZhciB0b3RhbHMgPSB7IGZpbGVzOjAsIHN0YXRlbWVudHM6MCwgZXhlY3V0ZWQ6MCB9OwoKICB2YXIgZmlsZTsKICB2YXIgZmlsZXMgPSBbXTsKICBmb3IgKGZpbGUgaW4gY2MpIHsKICAgIGlmICghIGNjLmhhc093blByb3BlcnR5KGZpbGUpKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIGZpbGVzLnB1c2goZmlsZSk7CiAgfQogIGZpbGVzLnNvcnQoKTsKCiAgdmFyIHJvd0NvdW50ZXIgPSAwOwogIGZvciAodmFyIGYgPSAwOyBmIDwgZmlsZXMubGVuZ3RoOyBmKyspIHsKICAgIGZpbGUgPSBmaWxlc1tmXTsKICAgIHZhciBsaW5lTnVtYmVyOwogICAgdmFyIG51bV9zdGF0ZW1lbnRzID0gMDsKICAgIHZhciBudW1fZXhlY3V0ZWQgPSAwOwogICAgdmFyIG1pc3NpbmcgPSBbXTsKICAgIHZhciBmaWxlQ0MgPSBjY1tmaWxlXTsKICAgIHZhciBsZW5ndGggPSBmaWxlQ0MubGVuZ3RoOwogICAgdmFyIGN1cnJlbnRDb25kaXRpb25hbEVuZCA9IDA7CiAgICB2YXIgY29uZGl0aW9uYWxzID0gbnVsbDsKICAgIGlmIChmaWxlQ0MuY29uZGl0aW9uYWxzKSB7CiAgICAgIGNvbmRpdGlvbmFscyA9IGZpbGVDQy5jb25kaXRpb25hbHM7CiAgICB9CiAgICBmb3IgKGxpbmVOdW1iZXIgPSAwOyBsaW5lTnVtYmVyIDwgbGVuZ3RoOyBsaW5lTnVtYmVyKyspIHsKICAgICAgdmFyIG4gPSBmaWxlQ0NbbGluZU51bWJlcl07CgogICAgICBpZiAobGluZU51bWJlciA9PT0gY3VycmVudENvbmRpdGlvbmFsRW5kKSB7CiAgICAgICAgY3VycmVudENvbmRpdGlvbmFsRW5kID0gMDsKICAgICAgfQogICAgICBlbHNlIGlmIChjdXJyZW50Q29uZGl0aW9uYWxFbmQgPT09IDAgJiYgY29uZGl0aW9uYWxzICYmIGNvbmRpdGlvbmFsc1tsaW5lTnVtYmVyXSkgewogICAgICAgIGN1cnJlbnRDb25kaXRpb25hbEVuZCA9IGNvbmRpdGlvbmFsc1tsaW5lTnVtYmVyXTsKICAgICAgfQoKICAgICAgaWYgKGN1cnJlbnRDb25kaXRpb25hbEVuZCAhPT0gMCkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICBpZiAobiA9PT0gdW5kZWZpbmVkIHx8IG4gPT09IG51bGwpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgaWYgKG4gPT09IDApIHsKICAgICAgICBtaXNzaW5nLnB1c2gobGluZU51bWJlcik7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgbnVtX2V4ZWN1dGVkKys7CiAgICAgIH0KICAgICAgbnVtX3N0YXRlbWVudHMrKzsKICAgIH0KCiAgICB2YXIgcGVyY2VudGFnZSA9ICggbnVtX3N0YXRlbWVudHMgPT09IDAgPyAwIDogcGFyc2VJbnQoMTAwICogbnVtX2V4ZWN1dGVkIC8gbnVtX3N0YXRlbWVudHMpICk7CgogICAgdmFyIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRyIik7CiAgICByb3cuY2xhc3NOYW1lID0gKCByb3dDb3VudGVyKysgJSAyID09IDAgPyAib2RkIiA6ICJldmVuIiApOwoKICAgIHZhciBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGQiKTsKICAgIGNlbGwuY2xhc3NOYW1lID0gJ2xlZnRDb2x1bW4nOwogICAgdmFyIGxpbmsgPSBqc2NvdmVyYWdlX2NyZWF0ZUxpbmsoZmlsZSk7CiAgICBjZWxsLmFwcGVuZENoaWxkKGxpbmspOwoKICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsKTsKCiAgICBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGQiKTsKICAgIGNlbGwuY2xhc3NOYW1lID0gJ251bWVyaWMnOwogICAgY2VsbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShudW1fc3RhdGVtZW50cykpOwogICAgcm93LmFwcGVuZENoaWxkKGNlbGwpOwoKICAgIGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZCIpOwogICAgY2VsbC5jbGFzc05hbWUgPSAnbnVtZXJpYyc7CiAgICBjZWxsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG51bV9leGVjdXRlZCkpOwogICAgcm93LmFwcGVuZENoaWxkKGNlbGwpOwoKICAgIC8vIG5ldyBjb3ZlcmFnZSB0ZCBjb250YWluaW5nIGEgYmFyIGdyYXBoCiAgICBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGQiKTsKICAgIGNlbGwuY2xhc3NOYW1lID0gJ2NvdmVyYWdlJzsKICAgIHZhciBwY3RHcmFwaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLAogICAgICAgIGNvdmVyZWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwKICAgICAgICBwY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7CiAgICBwY3RHcmFwaC5jbGFzc05hbWUgPSAicGN0R3JhcGgiOwogICAgaWYoIG51bV9zdGF0ZW1lbnRzID09PSAwICkgewogICAgICAgIGNvdmVyZWQuY2xhc3NOYW1lID0gInNraXBwZWQiOwogICAgICAgIHBjdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgiTi9BIikpOwogICAgfSBlbHNlIHsKICAgICAgICBjb3ZlcmVkLmNsYXNzTmFtZSA9ICJjb3ZlcmVkIjsKICAgICAgICBjb3ZlcmVkLnN0eWxlLndpZHRoID0gcGVyY2VudGFnZSArICJweCI7CiAgICAgICAgcGN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHBlcmNlbnRhZ2UgKyAnJScpKTsKICAgIH0KICAgIHBjdC5jbGFzc05hbWUgPSAicGN0IjsKICAgIHBjdEdyYXBoLmFwcGVuZENoaWxkKGNvdmVyZWQpOwogICAgY2VsbC5hcHBlbmRDaGlsZChwY3RHcmFwaCk7CiAgICBjZWxsLmFwcGVuZENoaWxkKHBjdCk7CiAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7CgogICAgaWYgKHNob3dNaXNzaW5nQ29sdW1uKSB7CiAgICAgIGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZCIpOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1pc3NpbmcubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAoaSAhPT0gMCkgewogICAgICAgICAgY2VsbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgiLCAiKSk7CiAgICAgICAgfQogICAgICAgIGxpbmsgPSBqc2NvdmVyYWdlX2NyZWF0ZUxpbmsoZmlsZSwgbWlzc2luZ1tpXSk7CgogICAgICAgIC8vIGdyb3VwIGNvbnRpZ3VvdXMgbWlzc2luZyBsaW5lczsgZS5nLiwgMTAsIDExLCAxMiAtPiAxMC0xMgogICAgICAgIHZhciBqLCBzdGFydCA9IG1pc3NpbmdbaV07CiAgICAgICAgZm9yICg7OykgewogICAgICAgICAgaiA9IDE7CiAgICAgICAgICB3aGlsZSAoaSArIGogPCBtaXNzaW5nLmxlbmd0aCAmJiBtaXNzaW5nW2kgKyBqXSA9PSBtaXNzaW5nW2ldICsgaikgewogICAgICAgICAgICBqKys7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgbmV4dG1pc3NpbmcgPSBtaXNzaW5nW2kgKyBqXSwgY3VyID0gbWlzc2luZ1tpXSArIGo7CiAgICAgICAgICBpZiAoaXNOYU4obmV4dG1pc3NpbmcpKSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKGN1ciA8IG5leHRtaXNzaW5nICYmICEgZmlsZUNDW2N1cl0pIHsKICAgICAgICAgICAgY3VyKys7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoY3VyIDwgbmV4dG1pc3NpbmcgfHwgY3VyID49IGxlbmd0aCkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGkgKz0gajsKICAgICAgICB9CiAgICAgICAgaWYgKHN0YXJ0ICE9IG1pc3NpbmdbaV0gfHwgaiA+IDEpIHsKICAgICAgICAgIGkgKz0gaiAtIDE7CiAgICAgICAgICBsaW5rLmlubmVySFRNTCArPSAiLSIgKyBtaXNzaW5nW2ldOwogICAgICAgIH0KCiAgICAgICAgY2VsbC5hcHBlbmRDaGlsZChsaW5rKTsKICAgICAgfQogICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7CiAgICB9CgogICAgdGJvZHkuYXBwZW5kQ2hpbGQocm93KTsKCiAgICB0b3RhbHNbJ2ZpbGVzJ10gKys7CiAgICB0b3RhbHNbJ3N0YXRlbWVudHMnXSArPSBudW1fc3RhdGVtZW50czsKICAgIHRvdGFsc1snZXhlY3V0ZWQnXSArPSBudW1fZXhlY3V0ZWQ7CgogICAgLy8gd3JpdGUgdG90YWxzIGRhdGEgaW50byBzdW1tYXJ5VG90YWxzIHJvdwogICAgdmFyIHRyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN1bW1hcnlUb3RhbHMiKTsKICAgIGlmICh0cikgewogICAgICAgIHZhciB0ZHMgPSB0ci5nZXRFbGVtZW50c0J5VGFnTmFtZSgidGQiKTsKICAgICAgICB0ZHNbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNwYW4iKVsxXS5maXJzdENoaWxkLm5vZGVWYWx1ZSA9IHRvdGFsc1snZmlsZXMnXTsKICAgICAgICB0ZHNbMV0uZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSB0b3RhbHNbJ3N0YXRlbWVudHMnXTsKICAgICAgICB0ZHNbMl0uZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSB0b3RhbHNbJ2V4ZWN1dGVkJ107CgogICAgICAgIHZhciBjb3ZlcmFnZSA9IHBhcnNlSW50KDEwMCAqIHRvdGFsc1snZXhlY3V0ZWQnXSAvIHRvdGFsc1snc3RhdGVtZW50cyddKTsKICAgICAgICBpZiggaXNOYU4oIGNvdmVyYWdlICkgKSB7CiAgICAgICAgICAgIGNvdmVyYWdlID0gMDsKICAgICAgICB9CiAgICAgICAgdGRzWzNdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzcGFuIilbMF0uZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSBjb3ZlcmFnZSArICclJzsKICAgICAgICB0ZHNbM10uZ2V0RWxlbWVudHNCeVRhZ05hbWUoImRpdiIpWzFdLnN0eWxlLndpZHRoID0gY292ZXJhZ2UgKyAncHgnOwogICAgfQoKICB9CiAganNjb3ZlcmFnZV9lbmRMZW5ndGh5T3BlcmF0aW9uKCk7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2VfYXBwZW5kTWlzc2luZ0NvbHVtbigpIHsKICB2YXIgaGVhZGVyUm93ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hlYWRlclJvdycpOwogIHZhciBtaXNzaW5nSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTsKICBtaXNzaW5nSGVhZGVyLmlkID0gJ21pc3NpbmdIZWFkZXInOwogIG1pc3NpbmdIZWFkZXIuaW5uZXJIVE1MID0gJzxhYmJyIHRpdGxlPSJMaXN0IG9mIHN0YXRlbWVudHMgbWlzc2VkIGR1cmluZyBleGVjdXRpb24iPk1pc3Npbmc8L2FiYnI+JzsKICBoZWFkZXJSb3cuYXBwZW5kQ2hpbGQobWlzc2luZ0hlYWRlcik7CiAgdmFyIHN1bW1hcnlUb3RhbHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VtbWFyeVRvdGFscycpOwogIHZhciBlbXB0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7CiAgZW1wdHkuaWQgPSAnbWlzc2luZ0NlbGwnOwogIHN1bW1hcnlUb3RhbHMuYXBwZW5kQ2hpbGQoZW1wdHkpOwp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX3JlbW92ZU1pc3NpbmdDb2x1bW4oKSB7CiAgdmFyIG1pc3NpbmdOb2RlOwogIG1pc3NpbmdOb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pc3NpbmdIZWFkZXInKTsKICBtaXNzaW5nTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG1pc3NpbmdOb2RlKTsKICBtaXNzaW5nTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtaXNzaW5nQ2VsbCcpOwogIG1pc3NpbmdOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobWlzc2luZ05vZGUpOwp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX2NoZWNrYm94X2NsaWNrKCkgewogIGlmIChqc2NvdmVyYWdlX2luTGVuZ3RoeU9wZXJhdGlvbikgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBqc2NvdmVyYWdlX2JlZ2luTGVuZ3RoeU9wZXJhdGlvbigpOwogIHZhciBjaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGVja2JveCcpOwogIHZhciBzaG93TWlzc2luZ0NvbHVtbiA9IGNoZWNrYm94LmNoZWNrZWQ7CiAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgIGlmIChzaG93TWlzc2luZ0NvbHVtbikgewogICAgICBqc2NvdmVyYWdlX2FwcGVuZE1pc3NpbmdDb2x1bW4oKTsKICAgIH0KICAgIGVsc2UgewogICAgICBqc2NvdmVyYWdlX3JlbW92ZU1pc3NpbmdDb2x1bW4oKTsKICAgIH0KICAgIGpzY292ZXJhZ2VfcmVjYWxjdWxhdGVTdW1tYXJ5VGFiKCk7CiAgfSwgNTApOwogIHJldHVybiB0cnVlOwp9CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyB0YWIgMwoKZnVuY3Rpb24ganNjb3ZlcmFnZV9tYWtlVGFibGUoKSB7CiAgdmFyIGNvdmVyYWdlID0gXyRqc2NvdmVyYWdlW2pzY292ZXJhZ2VfY3VycmVudEZpbGVdOwogIHZhciBsaW5lcyA9IGNvdmVyYWdlLnNvdXJjZTsKCiAgLy8gdGhpcyBjYW4gaGFwcGVuIGlmIHRoZXJlIGlzIGFuIGVycm9yIGluIHRoZSBvcmlnaW5hbCBKYXZhU2NyaXB0IGZpbGUKICBpZiAoISBsaW5lcykgewogICAgbGluZXMgPSBbXTsKICB9CgogIHZhciByb3dzID0gWyc8dGFibGUgaWQ9InNvdXJjZVRhYmxlIj4nXTsKICB2YXIgaSA9IDA7CiAgdmFyIHByb2dyZXNzQmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzQmFyJyk7CiAgdmFyIHRhYmxlSFRNTDsKICB2YXIgY3VycmVudENvbmRpdGlvbmFsRW5kID0gMDsKCiAgZnVuY3Rpb24gam9pblRhYmxlUm93cygpIHsKICAgIHRhYmxlSFRNTCA9IHJvd3Muam9pbignJyk7CiAgICBQcm9ncmVzc0Jhci5zZXRQZXJjZW50YWdlKHByb2dyZXNzQmFyLCA2MCk7CiAgICAvKgogICAgVGhpcyBtYXkgYmUgYSBsb25nIGRlbGF5LCBzbyBzZXQgYSB0aW1lb3V0IG9mIDEwMCBtcyB0byBtYWtlIHN1cmUgdGhlCiAgICBkaXNwbGF5IGlzIHVwZGF0ZWQuCiAgICAqLwogICAgc2V0VGltZW91dChhcHBlbmRUYWJsZSwgMTAwKTsKICB9CgogIGZ1bmN0aW9uIGFwcGVuZFRhYmxlKCkgewogICAgdmFyIHNvdXJjZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2VEaXYnKTsKICAgIHNvdXJjZURpdi5pbm5lckhUTUwgPSB0YWJsZUhUTUw7CiAgICBQcm9ncmVzc0Jhci5zZXRQZXJjZW50YWdlKHByb2dyZXNzQmFyLCA4MCk7CiAgICBzZXRUaW1lb3V0KGpzY292ZXJhZ2Vfc2Nyb2xsVG9MaW5lLCAwKTsKICB9CgogIHdoaWxlIChpIDwgbGluZXMubGVuZ3RoKSB7CiAgICB2YXIgbGluZU51bWJlciA9IGkgKyAxOwoKICAgIGlmIChsaW5lTnVtYmVyID09PSBjdXJyZW50Q29uZGl0aW9uYWxFbmQpIHsKICAgICAgY3VycmVudENvbmRpdGlvbmFsRW5kID0gMDsKICAgIH0KICAgIGVsc2UgaWYgKGN1cnJlbnRDb25kaXRpb25hbEVuZCA9PT0gMCAmJiBjb3ZlcmFnZS5jb25kaXRpb25hbHMgJiYgY292ZXJhZ2UuY29uZGl0aW9uYWxzW2xpbmVOdW1iZXJdKSB7CiAgICAgIGN1cnJlbnRDb25kaXRpb25hbEVuZCA9IGNvdmVyYWdlLmNvbmRpdGlvbmFsc1tsaW5lTnVtYmVyXTsKICAgIH0KCiAgICB2YXIgcm93ID0gJzx0cj4nOwogICAgcm93ICs9ICc8dGQgY2xhc3M9Im51bWVyaWMiPicgKyBsaW5lTnVtYmVyICsgJzwvdGQ+JzsKICAgIHZhciB0aW1lc0V4ZWN1dGVkID0gY292ZXJhZ2VbbGluZU51bWJlcl07CiAgICBpZiAodGltZXNFeGVjdXRlZCAhPT0gdW5kZWZpbmVkICYmIHRpbWVzRXhlY3V0ZWQgIT09IG51bGwpIHsKICAgICAgaWYgKGN1cnJlbnRDb25kaXRpb25hbEVuZCAhPT0gMCkgewogICAgICAgIHJvdyArPSAnPHRkIGNsYXNzPSJ5IG51bWVyaWMiPic7CiAgICAgIH0KICAgICAgZWxzZSBpZiAodGltZXNFeGVjdXRlZCA9PT0gMCkgewogICAgICAgIHJvdyArPSAnPHRkIGNsYXNzPSJyIG51bWVyaWMiIGlkPSJsaW5lLScgKyBsaW5lTnVtYmVyICsgJyI+JzsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICByb3cgKz0gJzx0ZCBjbGFzcz0iZyBudW1lcmljIj4nOwogICAgICB9CiAgICAgIHJvdyArPSB0aW1lc0V4ZWN1dGVkOwogICAgICByb3cgKz0gJzwvdGQ+JzsKICAgIH0KICAgIGVsc2UgewogICAgICByb3cgKz0gJzx0ZD48L3RkPic7CiAgICB9CiAgICByb3cgKz0gJzx0ZD48cHJlPicgKyBsaW5lc1tpXSArICc8L3ByZT48L3RkPic7CiAgICByb3cgKz0gJzwvdHI+JzsKICAgIHJvdyArPSAnXG4nOwogICAgcm93c1tsaW5lTnVtYmVyXSA9IHJvdzsKICAgIGkrKzsKICB9CiAgcm93c1tpICsgMV0gPSAnPC90YWJsZT4nOwogIFByb2dyZXNzQmFyLnNldFBlcmNlbnRhZ2UocHJvZ3Jlc3NCYXIsIDQwKTsKICBzZXRUaW1lb3V0KGpvaW5UYWJsZVJvd3MsIDApOwp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX3Njcm9sbFRvTGluZSgpIHsKICBqc2NvdmVyYWdlX3NlbGVjdFRhYignc291cmNlVGFiJyk7CiAgaWYgKCEgd2luZG93LmpzY292ZXJhZ2VfY3VycmVudExpbmUpIHsKICAgIGpzY292ZXJhZ2VfZW5kTGVuZ3RoeU9wZXJhdGlvbigpOwogICAgcmV0dXJuOwogIH0KICB2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZURpdicpOwogIGlmIChqc2NvdmVyYWdlX2N1cnJlbnRMaW5lID09PSAxKSB7CiAgICBkaXYuc2Nyb2xsVG9wID0gMDsKICB9CiAgZWxzZSB7CiAgICB2YXIgY2VsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5lLScgKyBqc2NvdmVyYWdlX2N1cnJlbnRMaW5lKTsKCiAgICAvLyB0aGlzIG1pZ2h0IG5vdCBiZSB0aGVyZSBpZiB0aGVyZSBpcyBhbiBlcnJvciBpbiB0aGUgb3JpZ2luYWwgSmF2YVNjcmlwdAogICAgaWYgKGNlbGwpIHsKICAgICAgdmFyIGRpdk9mZnNldCA9IGpzY292ZXJhZ2VfZmluZFBvcyhkaXYpOwogICAgICB2YXIgY2VsbE9mZnNldCA9IGpzY292ZXJhZ2VfZmluZFBvcyhjZWxsKTsKICAgICAgZGl2LnNjcm9sbFRvcCA9IGNlbGxPZmZzZXQgLSBkaXZPZmZzZXQ7CiAgICB9CiAgfQogIGpzY292ZXJhZ2VfY3VycmVudExpbmUgPSAwOwogIGpzY292ZXJhZ2VfZW5kTGVuZ3RoeU9wZXJhdGlvbigpOwp9CgovKioKTG9hZHMgdGhlIGdpdmVuIGZpbGUgKGFuZCBvcHRpb25hbCBsaW5lKSBpbiB0aGUgc291cmNlIHRhYi4KKi8KZnVuY3Rpb24ganNjb3ZlcmFnZV9nZXQoZmlsZSwgbGluZSkgewogIGlmIChqc2NvdmVyYWdlX2luTGVuZ3RoeU9wZXJhdGlvbikgewogICAgcmV0dXJuOwogIH0KICBqc2NvdmVyYWdlX2JlZ2luTGVuZ3RoeU9wZXJhdGlvbigpOwogIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICB2YXIgc291cmNlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZURpdicpOwogICAgc291cmNlRGl2LmlubmVySFRNTCA9ICcnOwogICAganNjb3ZlcmFnZV9zZWxlY3RUYWIoJ3NvdXJjZVRhYicpOwogICAgaWYgKGZpbGUgPT09IGpzY292ZXJhZ2VfY3VycmVudEZpbGUpIHsKICAgICAganNjb3ZlcmFnZV9jdXJyZW50TGluZSA9IGxpbmU7CiAgICAgIGpzY292ZXJhZ2VfcmVjYWxjdWxhdGVTb3VyY2VUYWIoKTsKICAgIH0KICAgIGVsc2UgewogICAgICBpZiAoanNjb3ZlcmFnZV9jdXJyZW50RmlsZSA9PT0gbnVsbCkgewogICAgICAgIHZhciB0YWIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlVGFiJyk7CiAgICAgICAgdGFiLmNsYXNzTmFtZSA9ICcnOwogICAgICAgIHRhYi5vbmNsaWNrID0ganNjb3ZlcmFnZV90YWJfY2xpY2s7CiAgICAgIH0KICAgICAganNjb3ZlcmFnZV9jdXJyZW50RmlsZSA9IGZpbGU7CiAgICAgIGpzY292ZXJhZ2VfY3VycmVudExpbmUgPSBsaW5lIHx8IDE7ICAvLyB3aGVuIGNoYW5naW5nIHRoZSBzb3VyY2UsIGFsd2F5cyBzY3JvbGwgdG8gdG9wCiAgICAgIHZhciBmaWxlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGVEaXYnKTsKICAgICAgZmlsZURpdi5pbm5lckhUTUwgPSBqc2NvdmVyYWdlX2N1cnJlbnRGaWxlOwogICAgICBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU291cmNlVGFiKCk7CiAgICAgIHJldHVybjsKICAgIH0KICB9LCA1MCk7Cn0KCi8qKgpDYWxjdWxhdGVzIGNvdmVyYWdlIHN0YXRpc3RpY3MgZm9yIHRoZSBjdXJyZW50IHNvdXJjZSBmaWxlLgoqLwpmdW5jdGlvbiBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU291cmNlVGFiKCkgewogIGlmICghIGpzY292ZXJhZ2VfY3VycmVudEZpbGUpIHsKICAgIGpzY292ZXJhZ2VfZW5kTGVuZ3RoeU9wZXJhdGlvbigpOwogICAgcmV0dXJuOwogIH0KICB2YXIgcHJvZ3Jlc3NMYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzc0xhYmVsJyk7CiAgcHJvZ3Jlc3NMYWJlbC5pbm5lckhUTUwgPSAnQ2FsY3VsYXRpbmcgY292ZXJhZ2UgLi4uJzsKICB2YXIgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NCYXInKTsKICBQcm9ncmVzc0Jhci5zZXRQZXJjZW50YWdlKHByb2dyZXNzQmFyLCAyMCk7CiAgc2V0VGltZW91dChqc2NvdmVyYWdlX21ha2VUYWJsZSwgMCk7Cn0KCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIHRhYnMKCi8qKgpJbml0aWFsaXplcyB0aGUgdGFiIGNvbnRyb2wuICBUaGlzIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIHdoZW4gdGhlIGRvY3VtZW50IGlzCmxvYWRlZC4KKi8KZnVuY3Rpb24ganNjb3ZlcmFnZV9pbml0VGFiQ29udHJvbCgpIHsKICB2YXIgdGFicyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJzJyk7CiAgdmFyIGk7CiAgdmFyIGNoaWxkOwogIHZhciB0YWJOdW0gPSAwOwogIGZvciAoaSA9IDA7IGkgPCB0YWJzLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHsKICAgIGNoaWxkID0gdGFicy5jaGlsZE5vZGVzLml0ZW0oaSk7CiAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIHsKICAgICAgaWYgKGNoaWxkLmNsYXNzTmFtZSAhPT0gJ2Rpc2FibGVkJykgewogICAgICAgIGNoaWxkLm9uY2xpY2sgPSBqc2NvdmVyYWdlX3RhYl9jbGljazsKICAgICAgfQogICAgICB0YWJOdW0rKzsKICAgIH0KICB9CiAganNjb3ZlcmFnZV9zZWxlY3RUYWIoMCk7Cn0KCi8qKgpTZWxlY3RzIGEgdGFiLgpAcGFyYW0gIHRhYiAgdGhlIGludGVnZXIgaW5kZXggb2YgdGhlIHRhYiAoMCwgMSwgMiwgb3IgMykKICAgICAgICAgICAgIE9SCiAgICAgICAgICAgICB0aGUgSUQgb2YgdGhlIHRhYiBlbGVtZW50CiAgICAgICAgICAgICBPUgogICAgICAgICAgICAgdGhlIHRhYiBlbGVtZW50IGl0c2VsZgoqLwpmdW5jdGlvbiBqc2NvdmVyYWdlX3NlbGVjdFRhYih0YWIpIHsKICBpZiAodHlwZW9mIHRhYiAhPT0gJ251bWJlcicpIHsKICAgIHRhYiA9IGpzY292ZXJhZ2VfdGFiSW5kZXhPZih0YWIpOwogIH0KICB2YXIgdGFicyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJzJyk7CiAgdmFyIHRhYlBhZ2VzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYlBhZ2VzJyk7CiAgdmFyIG5vZGVMaXN0OwogIHZhciB0YWJOdW07CiAgdmFyIGk7CiAgdmFyIG5vZGU7CgogIG5vZGVMaXN0ID0gdGFicy5jaGlsZE5vZGVzOwogIHRhYk51bSA9IDA7CiAgZm9yIChpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICBub2RlID0gbm9kZUxpc3QuaXRlbShpKTsKICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSAxKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIGlmIChub2RlLmNsYXNzTmFtZSAhPT0gJ2Rpc2FibGVkJykgewogICAgICBpZiAodGFiTnVtID09PSB0YWIpIHsKICAgICAgICBub2RlLmNsYXNzTmFtZSA9ICdzZWxlY3RlZCc7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgbm9kZS5jbGFzc05hbWUgPSAnJzsKICAgICAgfQogICAgfQogICAgdGFiTnVtKys7CiAgfQoKICBub2RlTGlzdCA9IHRhYlBhZ2VzLmNoaWxkTm9kZXM7CiAgdGFiTnVtID0gMDsKICBmb3IgKGkgPSAwOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHsKICAgIG5vZGUgPSBub2RlTGlzdC5pdGVtKGkpOwogICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IDEpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgaWYgKHRhYk51bSA9PT0gdGFiKSB7CiAgICAgIG5vZGUuY2xhc3NOYW1lID0gJ3NlbGVjdGVkIFRhYlBhZ2UnOwogICAgfQogICAgZWxzZSB7CiAgICAgIG5vZGUuY2xhc3NOYW1lID0gJ1RhYlBhZ2UnOwogICAgfQogICAgdGFiTnVtKys7CiAgfQp9CgovKioKUmV0dXJucyBhbiBpbnRlZ2VyICgwLCAxLCAyLCBvciAzKSByZXByZXNlbnRpbmcgdGhlIGluZGV4IG9mIGEgZ2l2ZW4gdGFiLgpAcGFyYW0gIHRhYiAgdGhlIElEIG9mIHRoZSB0YWIgZWxlbWVudAogICAgICAgICAgICAgT1IKICAgICAgICAgICAgIHRoZSB0YWIgZWxlbWVudCBpdHNlbGYKKi8KZnVuY3Rpb24ganNjb3ZlcmFnZV90YWJJbmRleE9mKHRhYikgewogIGlmICh0eXBlb2YgdGFiID09PSAnc3RyaW5nJykgewogICAgdGFiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFiKTsKICB9CiAgdmFyIHRhYnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFicycpOwogIHZhciBpOwogIHZhciBjaGlsZDsKICB2YXIgdGFiTnVtID0gMDsKICBmb3IgKGkgPSAwOyBpIDwgdGFicy5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7CiAgICBjaGlsZCA9IHRhYnMuY2hpbGROb2Rlcy5pdGVtKGkpOwogICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7CiAgICAgIGlmIChjaGlsZCA9PT0gdGFiKSB7CiAgICAgICAgcmV0dXJuIHRhYk51bTsKICAgICAgfQogICAgICB0YWJOdW0rKzsKICAgIH0KICB9Ci8vI0pTQ09WRVJBR0VfSUYgMAogIHRocm93ICJUYWIgbm90IGZvdW5kIjsKLy8jSlNDT1ZFUkFHRV9FTkRJRgp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX3RhYl9jbGljayhlKSB7CiAgaWYgKGpzY292ZXJhZ2VfaW5MZW5ndGh5T3BlcmF0aW9uKSB7CiAgICByZXR1cm47CiAgfQogIHZhciB0YXJnZXQ7Ci8vI0pTQ09WRVJBR0VfSUYKICBpZiAoZSkgewogICAgdGFyZ2V0ID0gZS50YXJnZXQ7CiAgfQogIGVsc2UgaWYgKHdpbmRvdy5ldmVudCkgewogICAgLy8gSUUKICAgIHRhcmdldCA9IHdpbmRvdy5ldmVudC5zcmNFbGVtZW50OwogIH0KICBpZiAodGFyZ2V0LmNsYXNzTmFtZSA9PT0gJ3NlbGVjdGVkJykgewogICAgcmV0dXJuOwogIH0KICBqc2NvdmVyYWdlX2JlZ2luTGVuZ3RoeU9wZXJhdGlvbigpOwogIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICBpZiAodGFyZ2V0LmlkID09PSAnc3VtbWFyeVRhYicpIHsKICAgICAgdmFyIHRib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN1bW1hcnlUYm9keSIpOwogICAgICB3aGlsZSAodGJvZHkuaGFzQ2hpbGROb2RlcygpKSB7CiAgICAgICAgdGJvZHkucmVtb3ZlQ2hpbGQodGJvZHkuZmlyc3RDaGlsZCk7CiAgICAgIH0KICAgIH0KICAgIGVsc2UgaWYgKHRhcmdldC5pZCA9PT0gJ3NvdXJjZVRhYicpIHsKICAgICAgdmFyIHNvdXJjZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2VEaXYnKTsKICAgICAgc291cmNlRGl2LmlubmVySFRNTCA9ICcnOwogICAgfQogICAganNjb3ZlcmFnZV9zZWxlY3RUYWIodGFyZ2V0KTsKICAgIGlmICh0YXJnZXQuaWQgPT09ICdzdW1tYXJ5VGFiJykgewogICAgICBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU3VtbWFyeVRhYigpOwogICAgfQogICAgZWxzZSBpZiAodGFyZ2V0LmlkID09PSAnc291cmNlVGFiJykgewogICAgICBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU291cmNlVGFiKCk7CiAgICB9CiAgICBlbHNlIHsKICAgICAganNjb3ZlcmFnZV9lbmRMZW5ndGh5T3BlcmF0aW9uKCk7CiAgICB9CiAgfSwgNTApOwp9CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyBwcm9ncmVzcyBiYXIKCnZhciBQcm9ncmVzc0JhciA9IHsKICBpbml0OiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBlbGVtZW50Ll9wZXJjZW50YWdlID0gMDsKCiAgICAvKiBkb2luZyB0aGlzIHZpYSBKYXZhU2NyaXB0IGNyYXNoZXMgU2FmYXJpICovCi8qCiAgICB2YXIgcGN0R3JhcGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIHBjdEdyYXBoLmNsYXNzTmFtZSA9ICdwY3RHcmFwaCc7CiAgICBlbGVtZW50LmFwcGVuZENoaWxkKHBjdEdyYXBoKTsKICAgIHZhciBjb3ZlcmVkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBjb3ZlcmVkLmNsYXNzTmFtZSA9ICdjb3ZlcmVkJzsKICAgIHBjdEdyYXBoLmFwcGVuZENoaWxkKGNvdmVyZWQpOwogICAgdmFyIHBjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgIHBjdC5jbGFzc05hbWUgPSAncGN0JzsKICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQocGN0KTsKKi8KCiAgICBQcm9ncmVzc0Jhci5fdXBkYXRlKGVsZW1lbnQpOwogIH0sCiAgc2V0UGVyY2VudGFnZTogZnVuY3Rpb24oZWxlbWVudCwgcGVyY2VudGFnZSkgewogICAgZWxlbWVudC5fcGVyY2VudGFnZSA9IHBlcmNlbnRhZ2U7CiAgICBQcm9ncmVzc0Jhci5fdXBkYXRlKGVsZW1lbnQpOwogIH0sCiAgX3VwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCkgewogICAgdmFyIHBjdEdyYXBoID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2JykuaXRlbSgwKTsKICAgIHZhciBjb3ZlcmVkID0gcGN0R3JhcGguZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpLml0ZW0oMCk7CiAgICB2YXIgcGN0ID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3BhbicpLml0ZW0oMCk7CiAgICBwY3QuaW5uZXJIVE1MID0gZWxlbWVudC5fcGVyY2VudGFnZS50b1N0cmluZygpICsgJyUnOwogICAgY292ZXJlZC5zdHlsZS53aWR0aCA9IGVsZW1lbnQuX3BlcmNlbnRhZ2UgKyAncHgnOwogIH0KfTsKCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIHJlcG9ydHMKCmZ1bmN0aW9uIGpzY292ZXJhZ2VfcGFkKHMpIHsKICByZXR1cm4gJzAwMDAnLnN1YnN0cihzLmxlbmd0aCkgKyBzOwp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX3F1b3RlKHMpIHsKICByZXR1cm4gJyInICsgcy5yZXBsYWNlKC9bXHUwMDAwLVx1MDAxZiJcXFx1MDA3Zi1cdWZmZmZdL2csIGZ1bmN0aW9uIChjKSB7CiAgICBzd2l0Y2ggKGMpIHsKICAgIGNhc2UgJ1xiJzoKICAgICAgcmV0dXJuICdcXGInOwogICAgY2FzZSAnXGYnOgogICAgICByZXR1cm4gJ1xcZic7CiAgICBjYXNlICdcbic6CiAgICAgIHJldHVybiAnXFxuJzsKICAgIGNhc2UgJ1xyJzoKICAgICAgcmV0dXJuICdcXHInOwogICAgY2FzZSAnXHQnOgogICAgICByZXR1cm4gJ1xcdCc7CiAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgdGhpcwogICAgLyoKICAgIGNhc2UgJ1x2JzoKICAgICAgcmV0dXJuICdcXHYnOwogICAgKi8KICAgIGNhc2UgJyInOgogICAgICByZXR1cm4gJ1xcIic7CiAgICBjYXNlICdcXCc6CiAgICAgIHJldHVybiAnXFxcXCc7CiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gJ1xcdScgKyBqc2NvdmVyYWdlX3BhZChjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKTsKICAgIH0KICB9KSArICciJzsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9zZXJpYWxpemVDb3ZlcmFnZVRvSlNPTigpIHsKICB2YXIganNvbiA9IFtdOwogIGZvciAodmFyIGZpbGUgaW4gXyRqc2NvdmVyYWdlKSB7CiAgICBpZiAoISBfJGpzY292ZXJhZ2UuaGFzT3duUHJvcGVydHkoZmlsZSkpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgdmFyIGNvdmVyYWdlID0gXyRqc2NvdmVyYWdlW2ZpbGVdOwoKICAgIHZhciBhcnJheSA9IFtdOwogICAgdmFyIGxlbmd0aCA9IGNvdmVyYWdlLmxlbmd0aDsKICAgIGZvciAodmFyIGxpbmUgPSAwOyBsaW5lIDwgbGVuZ3RoOyBsaW5lKyspIHsKICAgICAgdmFyIHZhbHVlID0gY292ZXJhZ2VbbGluZV07CiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7CiAgICAgICAgdmFsdWUgPSAnbnVsbCc7CiAgICAgIH0KICAgICAgYXJyYXkucHVzaCh2YWx1ZSk7CiAgICB9CgogICAgdmFyIHNvdXJjZSA9IGNvdmVyYWdlLnNvdXJjZTsKICAgIHZhciBsaW5lcyA9IFtdOwogICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDsKICAgIGZvciAodmFyIGxpbmUgPSAwOyBsaW5lIDwgbGVuZ3RoOyBsaW5lKyspIHsKICAgICAgbGluZXMucHVzaChqc2NvdmVyYWdlX3F1b3RlKHNvdXJjZVtsaW5lXSkpOwogICAgfQoKICAgIGpzb24ucHVzaChqc2NvdmVyYWdlX3F1b3RlKGZpbGUpICsgJzp7ImNvdmVyYWdlIjpbJyArIGFycmF5LmpvaW4oJywnKSArICddLCJzb3VyY2UiOlsnICsgbGluZXMuam9pbignLCcpICsgJ119Jyk7CiAgfQogIHJldHVybiAneycgKyBqc29uLmpvaW4oJywnKSArICd9JzsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9zdG9yZUJ1dHRvbl9jbGljaygpIHsKICBpZiAoanNjb3ZlcmFnZV9pbkxlbmd0aHlPcGVyYXRpb24pIHsKICAgIHJldHVybjsKICB9CgogIGpzY292ZXJhZ2VfYmVnaW5MZW5ndGh5T3BlcmF0aW9uKCk7CiAgdmFyIGltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9yZUltZycpOwogIGltZy5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnOwoKICB2YXIgcmVxdWVzdCA9IGpzY292ZXJhZ2VfY3JlYXRlUmVxdWVzdCgpOwogIHJlcXVlc3Qub3BlbignUE9TVCcsICcvanNjb3ZlcmFnZS1zdG9yZScsIHRydWUpOwogIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlID09PSA0KSB7CiAgICAgIHZhciBtZXNzYWdlOwogICAgICB0cnkgewogICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAyMDEgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDIwNCkgewogICAgICAgICAgdGhyb3cgcmVxdWVzdC5zdGF0dXM7CiAgICAgICAgfQogICAgICAgIG1lc3NhZ2UgPSByZXF1ZXN0LnJlc3BvbnNlVGV4dDsKICAgICAgfQogICAgICBjYXRjaCAoZSkgewogICAgICAgIGlmIChlLnRvU3RyaW5nKCkuc2VhcmNoKC9eXGR7M30kLykgPT09IDApIHsKICAgICAgICAgIG1lc3NhZ2UgPSBlICsgJzogJyArIHJlcXVlc3QucmVzcG9uc2VUZXh0OwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgIG1lc3NhZ2UgPSAnQ291bGQgbm90IGNvbm5lY3QgdG8gc2VydmVyOiAnICsgZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGpzY292ZXJhZ2VfZW5kTGVuZ3RoeU9wZXJhdGlvbigpOwogICAgICB2YXIgaW1nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3JlSW1nJyk7CiAgICAgIGltZy5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7CgogICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3JlRGl2Jyk7CiAgICAgIGRpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXcgRGF0ZSgpICsgJzogJyArIG1lc3NhZ2UpKTsKICAgICAgZGl2LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJykpOwogICAgfQogIH07CiAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpOwogIHZhciBqc29uID0ganNjb3ZlcmFnZV9zZXJpYWxpemVDb3ZlcmFnZVRvSlNPTigpOwogIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1MZW5ndGgnLCBqc29uLmxlbmd0aC50b1N0cmluZygpKTsKICByZXF1ZXN0LnNlbmQoanNvbik7Cn0K",
                "body": "LyoKICAgIGpzY292ZXJhZ2UuanMgLSBjb2RlIGNvdmVyYWdlIGZvciBKYXZhU2NyaXB0CiAgICBDb3B5cmlnaHQgKEMpIDIwMDcsIDIwMDgsIDIwMDksIDIwMTAgc2lsaWNvbmZvcmtzLmNvbQoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZwogICAgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgSW5jLiwKICAgIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0EuCiovCgpmdW5jdGlvbiBqc2NvdmVyYWdlX29wZW5XYXJuaW5nRGlhbG9nKCkgewogIHZhciBpZDsKICBpZiAoanNjb3ZlcmFnZV9pc1JlcG9ydCkgewogICAgaWQgPSAncmVwb3J0V2FybmluZ0RpYWxvZyc7CiAgfQogIGVsc2UgewogICAgaWQgPSAnd2FybmluZ0RpYWxvZyc7CiAgfQogIHZhciBkaWFsb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CiAgZGlhbG9nLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX2Nsb3NlV2FybmluZ0RpYWxvZygpIHsKICB2YXIgaWQ7CiAgaWYgKGpzY292ZXJhZ2VfaXNSZXBvcnQpIHsKICAgIGlkID0gJ3JlcG9ydFdhcm5pbmdEaWFsb2cnOwogIH0KICBlbHNlIHsKICAgIGlkID0gJ3dhcm5pbmdEaWFsb2cnOwogIH0KICB2YXIgZGlhbG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOwogIGRpYWxvZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwp9CgovKioKSW5pdGlhbGl6ZXMgdGhlIF8kanNjb3ZlcmFnZSBvYmplY3QgaW4gYSB3aW5kb3cuICBUaGlzIHNob3VsZCBiZSB0aGUgZmlyc3QKZnVuY3Rpb24gY2FsbGVkIGluIHRoZSBwYWdlLgpAcGFyYW0gIHcgIHRoaXMgc2hvdWxkIGFsd2F5cyBiZSB0aGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QKKi8KZnVuY3Rpb24ganNjb3ZlcmFnZV9pbml0KHcpIHsKICB0cnkgewogICAgLy8gaW4gU2FmYXJpLCAiaW1wb3J0IiBpcyBhIHN5bnRheCBlcnJvcgogICAgQ29tcG9uZW50cy51dGlsc1snaW1wb3J0J10oJ3Jlc291cmNlOi8vYXBwL21vZHVsZXMvanNjb3ZlcmFnZS5qc20nKTsKICAgIGpzY292ZXJhZ2VfaXNJbnZlcnRlZE1vZGUgPSB0cnVlOwogICAgcmV0dXJuOwogIH0KICBjYXRjaCAoZSkge30KCiAgLy8gY2hlY2sgaWYgd2UgYXJlIGluIGludmVydGVkIG1vZGUKICBpZiAody5vcGVuZXIpIHsKICAgIHRyeSB7CiAgICAgIGlmICh3Lm9wZW5lci50b3AuXyRqc2NvdmVyYWdlKSB7CiAgICAgICAganNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSA9IHRydWU7CiAgICAgICAgaWYgKCEgdy5fJGpzY292ZXJhZ2UpIHsKICAgICAgICAgIHcuXyRqc2NvdmVyYWdlID0gdy5vcGVuZXIudG9wLl8kanNjb3ZlcmFnZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAganNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSA9IGZhbHNlOwogICAgICB9CiAgICB9CiAgICBjYXRjaCAoZSkgewogICAgICB0cnkgewogICAgICAgIGlmICh3Lm9wZW5lci5fJGpzY292ZXJhZ2UpIHsKICAgICAgICAgIGpzY292ZXJhZ2VfaXNJbnZlcnRlZE1vZGUgPSB0cnVlOwogICAgICAgICAgaWYgKCEgdy5fJGpzY292ZXJhZ2UpIHsKICAgICAgICAgICAgdy5fJGpzY292ZXJhZ2UgPSB3Lm9wZW5lci5fJGpzY292ZXJhZ2U7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAganNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICBjYXRjaCAoZTIpIHsKICAgICAgICBqc2NvdmVyYWdlX2lzSW52ZXJ0ZWRNb2RlID0gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9CiAgZWxzZSB7CiAgICBqc2NvdmVyYWdlX2lzSW52ZXJ0ZWRNb2RlID0gZmFsc2U7CiAgfQoKICBpZiAoISBqc2NvdmVyYWdlX2lzSW52ZXJ0ZWRNb2RlKSB7CiAgICBpZiAoISB3Ll8kanNjb3ZlcmFnZSkgewogICAgICB3Ll8kanNjb3ZlcmFnZSA9IHt9OwogICAgfQogIH0KfQoKdmFyIGpzY292ZXJhZ2VfY3VycmVudEZpbGUgPSBudWxsOwp2YXIganNjb3ZlcmFnZV9jdXJyZW50TGluZSA9IG51bGw7Cgp2YXIganNjb3ZlcmFnZV9pbkxlbmd0aHlPcGVyYXRpb24gPSBmYWxzZTsKCi8qClBvc3NpYmxlIHN0YXRlczoKCQkJaXNJbnZlcnRlZE1vZGUJaXNTZXJ2ZXIJaXNSZXBvcnQJdGFicwpub3JtYWwJCQlmYWxzZQkJZmFsc2UJCWZhbHNlCQlCcm93c2VyCmludmVydGVkCQl0cnVlCQlmYWxzZQkJZmFsc2UJCQpzZXJ2ZXIsIG5vcm1hbAkJZmFsc2UJCXRydWUJCWZhbHNlCQlCcm93c2VyLCBTdG9yZQpzZXJ2ZXIsIGludmVydGVkCXRydWUJCXRydWUJCWZhbHNlCQlTdG9yZQpyZXBvcnQJCQlmYWxzZQkJZmFsc2UJCXRydWUJCQoqLwp2YXIganNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSA9IGZhbHNlOwp2YXIganNjb3ZlcmFnZV9pc1NlcnZlciA9IGZhbHNlOwp2YXIganNjb3ZlcmFnZV9pc1JlcG9ydCA9IGZhbHNlOwoKanNjb3ZlcmFnZV9pbml0KHdpbmRvdyk7CgpmdW5jdGlvbiBqc2NvdmVyYWdlX2NyZWF0ZVJlcXVlc3QoKSB7CiAgLy8gTm90ZSB0aGF0IHRoZSBJRTcgWE1MSHR0cFJlcXVlc3QgZG9lcyBub3Qgc3VwcG9ydCBmaWxlIFVSTCdzLgogIC8vIGh0dHA6Ly94aGFiLmJsb2dzcG90LmNvbS8yMDA2LzExL2llNy1zdXBwb3J0LWZvci14bWxodHRwcmVxdWVzdC5odG1sCiAgLy8gaHR0cDovL2Jsb2dzLm1zZG4uY29tL2llL2FyY2hpdmUvMjAwNi8xMi8wNi9maWxlLXVyaXMtaW4td2luZG93cy5hc3B4Ci8vI0pTQ09WRVJBR0VfSUYKICBpZiAod2luZG93LkFjdGl2ZVhPYmplY3QpIHsKICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTsKICB9CiAgZWxzZSB7CiAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgfQp9CgovLyBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2ZpbmRwb3MuaHRtbApmdW5jdGlvbiBqc2NvdmVyYWdlX2ZpbmRQb3Mob2JqKSB7CiAgdmFyIHJlc3VsdCA9IDA7CiAgZG8gewogICAgcmVzdWx0ICs9IG9iai5vZmZzZXRUb3A7CiAgICBvYmogPSBvYmoub2Zmc2V0UGFyZW50OwogIH0KICB3aGlsZSAob2JqKTsKICByZXR1cm4gcmVzdWx0Owp9CgovLyBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL3ZpZXdwb3J0L2NvbXBhdGliaWxpdHkuaHRtbApmdW5jdGlvbiBqc2NvdmVyYWdlX2dldFZpZXdwb3J0SGVpZ2h0KCkgewovLyNKU0NPVkVSQUdFX0lGIC9NU0lFLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpCiAgaWYgKHNlbGYuaW5uZXJIZWlnaHQpIHsKICAgIC8vIGFsbCBleGNlcHQgRXhwbG9yZXIKICAgIHJldHVybiBzZWxmLmlubmVySGVpZ2h0OwogIH0KICBlbHNlIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCkgewogICAgLy8gRXhwbG9yZXIgNiBTdHJpY3QgTW9kZQogICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7CiAgfQogIGVsc2UgaWYgKGRvY3VtZW50LmJvZHkpIHsKICAgIC8vIG90aGVyIEV4cGxvcmVycwogICAgcmV0dXJuIGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0OwogIH0KICBlbHNlIHsKICAgIHRocm93ICJDb3VsZG4ndCBjYWxjdWxhdGUgdmlld3BvcnQgaGVpZ2h0IjsKICB9Ci8vI0pTQ09WRVJBR0VfRU5ESUYKfQoKLyoqCkluZGljYXRlcyB2aXN1YWxseSB0aGF0IGEgbGVuZ3RoeSBvcGVyYXRpb24gaGFzIGJlZ3VuLiAgVGhlIHByb2dyZXNzIGJhciBpcwpkaXNwbGF5ZWQsIGFuZCB0aGUgY3Vyc29yIGlzIGNoYW5nZWQgdG8gYnVzeSAob24gYnJvd3NlcnMgd2hpY2ggc3VwcG9ydCB0aGlzKS4KKi8KZnVuY3Rpb24ganNjb3ZlcmFnZV9iZWdpbkxlbmd0aHlPcGVyYXRpb24oKSB7CiAganNjb3ZlcmFnZV9pbkxlbmd0aHlPcGVyYXRpb24gPSB0cnVlOwoKICB2YXIgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NCYXInKTsKICBwcm9ncmVzc0Jhci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnOwogIFByb2dyZXNzQmFyLnNldFBlcmNlbnRhZ2UocHJvZ3Jlc3NCYXIsIDApOwogIHZhciBwcm9ncmVzc0xhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzTGFiZWwnKTsKICBwcm9ncmVzc0xhYmVsLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7CgogIC8qIGJsYWNrbGlzdCBidWdneSBicm93c2VycyAqLwovLyNKU0NPVkVSQUdFX0lGCiAgaWYgKCEgL09wZXJhfFdlYktpdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkgewogICAgLyoKICAgIENoYW5nZSB0aGUgY3Vyc29yIHN0eWxlIG9mIGVhY2ggZWxlbWVudC4gIE5vdGUgdGhhdCBjaGFuZ2luZyB0aGUgY2xhc3Mgb2YgdGhlCiAgICBlbGVtZW50ICh0byBvbmUgd2l0aCBhIGJ1c3kgY3Vyc29yKSBpcyBidWdneSBpbiBJRS4KICAgICovCiAgICB2YXIgdGFicyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJzJykuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpOwogICAgdmFyIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgdGFicy5sZW5ndGg7IGkrKykgewogICAgICB0YWJzLml0ZW0oaSkuc3R5bGUuY3Vyc29yID0gJ3dhaXQnOwogICAgfQogIH0KfQoKLyoqClJlbW92ZXMgdGhlIHByb2dyZXNzIGJhciBhbmQgYnVzeSBjdXJzb3IuCiovCmZ1bmN0aW9uIGpzY292ZXJhZ2VfZW5kTGVuZ3RoeU9wZXJhdGlvbigpIHsKICB2YXIgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NCYXInKTsKICBQcm9ncmVzc0Jhci5zZXRQZXJjZW50YWdlKHByb2dyZXNzQmFyLCAxMDApOwogIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICBqc2NvdmVyYWdlX2luTGVuZ3RoeU9wZXJhdGlvbiA9IGZhbHNlOwogICAgcHJvZ3Jlc3NCYXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOwogICAgdmFyIHByb2dyZXNzTGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NMYWJlbCcpOwogICAgcHJvZ3Jlc3NMYWJlbC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7CiAgICBwcm9ncmVzc0xhYmVsLmlubmVySFRNTCA9ICcnOwoKICAgIHZhciB0YWJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYnMnKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2Jyk7CiAgICB2YXIgaTsKICAgIGZvciAoaSA9IDA7IGkgPCB0YWJzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHRhYnMuaXRlbShpKS5zdHlsZS5jdXJzb3IgPSAnJzsKICAgIH0KICB9LCA1MCk7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2Vfc2V0U2l6ZSgpIHsKLy8jSlNDT1ZFUkFHRV9JRiAvTVNJRS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KQogIHZhciB2aWV3cG9ydEhlaWdodCA9IGpzY292ZXJhZ2VfZ2V0Vmlld3BvcnRIZWlnaHQoKTsKCiAgLyoKICBib3JkZXItdG9wLXdpZHRoOiAgICAgMXB4CiAgcGFkZGluZy10b3A6ICAgICAgICAgMTBweAogIHBhZGRpbmctYm90dG9tOiAgICAgIDEwcHgKICBib3JkZXItYm90dG9tLXdpZHRoOiAgMXB4CiAgbWFyZ2luLWJvdHRvbTogICAgICAgMTBweAogICAgICAgICAgICAgICAgICAgICAgIC0tLS0KICAgICAgICAgICAgICAgICAgICAgICAzMnB4CiAgKi8KICB2YXIgdGFiUGFnZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFiUGFnZXMnKTsKICB2YXIgdGFiUGFnZUhlaWdodCA9ICh2aWV3cG9ydEhlaWdodCAtIGpzY292ZXJhZ2VfZmluZFBvcyh0YWJQYWdlcykgLSAzMikgKyAncHgnOwogIHZhciBub2RlTGlzdCA9IHRhYlBhZ2VzLmNoaWxkTm9kZXM7CiAgdmFyIGxlbmd0aCA9IG5vZGVMaXN0Lmxlbmd0aDsKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICB2YXIgbm9kZSA9IG5vZGVMaXN0Lml0ZW0oaSk7CiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gMSkgewogICAgICBjb250aW51ZTsKICAgIH0KICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gdGFiUGFnZUhlaWdodDsKICB9CgogIHZhciBpZnJhbWVEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWZyYW1lRGl2Jyk7CiAgLy8gbWF5IG5vdCBleGlzdCBpZiB3ZSBoYXZlIHJlbW92ZWQgdGhlIGZpcnN0IHRhYgogIGlmIChpZnJhbWVEaXYpIHsKICAgIGlmcmFtZURpdi5zdHlsZS5oZWlnaHQgPSAodmlld3BvcnRIZWlnaHQgLSBqc2NvdmVyYWdlX2ZpbmRQb3MoaWZyYW1lRGl2KSAtIDIxKSArICdweCc7CiAgfQoKICB2YXIgc3VtbWFyeURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdW1tYXJ5RGl2Jyk7CiAgc3VtbWFyeURpdi5zdHlsZS5oZWlnaHQgPSAodmlld3BvcnRIZWlnaHQgLSBqc2NvdmVyYWdlX2ZpbmRQb3Moc3VtbWFyeURpdikgLSAyMSkgKyAncHgnOwoKICB2YXIgc291cmNlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZURpdicpOwogIHNvdXJjZURpdi5zdHlsZS5oZWlnaHQgPSAodmlld3BvcnRIZWlnaHQgLSBqc2NvdmVyYWdlX2ZpbmRQb3Moc291cmNlRGl2KSAtIDIxKSArICdweCc7CgogIHZhciBzdG9yZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9yZURpdicpOwogIGlmIChzdG9yZURpdikgewogICAgc3RvcmVEaXYuc3R5bGUuaGVpZ2h0ID0gKHZpZXdwb3J0SGVpZ2h0IC0ganNjb3ZlcmFnZV9maW5kUG9zKHN0b3JlRGl2KSAtIDIxKSArICdweCc7CiAgfQovLyNKU0NPVkVSQUdFX0VORElGCn0KCi8qKgpSZXR1cm5zIHRoZSBib29sZWFuIHZhbHVlIG9mIGEgc3RyaW5nLiAgVmFsdWVzICdmYWxzZScsICdmJywgJ25vJywgJ24nLCAnb2ZmJywKYW5kICcwJyAodXBwZXIgb3IgbG93ZXIgY2FzZSkgYXJlIGZhbHNlLgpAcGFyYW0gIHMgIHRoZSBzdHJpbmcKQHJldHVybiAgYSBib29sZWFuIHZhbHVlCiovCmZ1bmN0aW9uIGpzY292ZXJhZ2VfZ2V0Qm9vbGVhblZhbHVlKHMpIHsKICBzID0gcy50b0xvd2VyQ2FzZSgpOwogIGlmIChzID09PSAnZmFsc2UnIHx8IHMgPT09ICdmJyB8fCBzID09PSAnbm8nIHx8IHMgPT09ICduJyB8fCBzID09PSAnb2ZmJyB8fCBzID09PSAnMCcpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgcmV0dXJuIHRydWU7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2VfcmVtb3ZlVGFiKGlkKSB7CiAgdmFyIHRhYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkICsgJ1RhYicpOwogIHRhYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhYik7CiAgdmFyIHRhYlBhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCArICdUYWJQYWdlJyk7CiAgdGFiUGFnZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhYlBhZ2UpOwp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX2lzVmFsaWRVUkwodXJsKSB7CiAgLy8gUkZDIDM5ODYKICB2YXIgbWF0Y2hlcyA9IC9eKChbXjpcLz8jXSspOik/KFwvXC8oW15cLz8jXSopKT8oW14/I10qKShcPyhbXiNdKikpPygjKC4qKSk/Ly5leGVjKHVybCk7CiAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgdmFyIHNjaGVtZSA9IG1hdGNoZXNbMV07CiAgaWYgKHR5cGVvZiBzY2hlbWUgPT09ICdzdHJpbmcnKSB7CiAgICBzY2hlbWUgPSBzY2hlbWUudG9Mb3dlckNhc2UoKTsKICAgIHJldHVybiBzY2hlbWUgPT09ICcnIHx8IHNjaGVtZSA9PT0gJ2ZpbGU6JyB8fCBzY2hlbWUgPT09ICdodHRwOicgfHwgc2NoZW1lID09PSAnaHR0cHM6JzsKICB9CiAgcmV0dXJuIHRydWU7Cn0KCi8qKgpJbml0aWFsaXplcyB0aGUgY29udGVudHMgb2YgdGhlIHRhYnMuICBUaGlzIHNldHMgdGhlIGluaXRpYWwgdmFsdWVzIG9mIHRoZQppbnB1dCBmaWVsZCBhbmQgaWZyYW1lIGluIHRoZSAiQnJvd3NlciIgdGFiIGFuZCB0aGUgY2hlY2tib3ggaW4gdGhlICJTdW1tYXJ5Igp0YWIuCkBwYXJhbSAgcXVlcnlTdHJpbmcgIHRoaXMgc2hvdWxkIGFsd2F5cyBiZSBsb2NhdGlvbi5zZWFyY2gKKi8KZnVuY3Rpb24ganNjb3ZlcmFnZV9pbml0VGFiQ29udGVudHMocXVlcnlTdHJpbmcpIHsKICB2YXIgc2hvd01pc3NpbmdDb2x1bW4gPSBmYWxzZTsKICB2YXIgdXJsID0gbnVsbDsKICB2YXIgd2luZG93VVJMID0gbnVsbDsKICB2YXIgcGFyYW1ldGVycywgcGFyYW1ldGVyLCBpLCBpbmRleCwgbmFtZSwgdmFsdWU7CiAgaWYgKHF1ZXJ5U3RyaW5nLmxlbmd0aCA+IDApIHsKICAgIC8vIGNob3Agb2ZmIHRoZSBxdWVzdGlvbiBtYXJrCiAgICBxdWVyeVN0cmluZyA9IHF1ZXJ5U3RyaW5nLnN1YnN0cmluZygxKTsKICAgIHBhcmFtZXRlcnMgPSBxdWVyeVN0cmluZy5zcGxpdCgvJnw7Lyk7CiAgICBmb3IgKGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkrKykgewogICAgICBwYXJhbWV0ZXIgPSBwYXJhbWV0ZXJzW2ldOwogICAgICBpbmRleCA9IHBhcmFtZXRlci5pbmRleE9mKCc9Jyk7CiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHsKICAgICAgICAvLyBzdGlsbCB3b3JrcyB3aXRoIG9sZCBzeW50YXgKICAgICAgICB1cmwgPSBkZWNvZGVVUklDb21wb25lbnQocGFyYW1ldGVyKTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBuYW1lID0gcGFyYW1ldGVyLnN1YnN0cigwLCBpbmRleCk7CiAgICAgICAgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQocGFyYW1ldGVyLnN1YnN0cihpbmRleCArIDEpKTsKICAgICAgICBpZiAobmFtZSA9PT0gJ21pc3NpbmcnIHx8IG5hbWUgPT09ICdtJykgewogICAgICAgICAgc2hvd01pc3NpbmdDb2x1bW4gPSBqc2NvdmVyYWdlX2dldEJvb2xlYW5WYWx1ZSh2YWx1ZSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICd1cmwnIHx8IG5hbWUgPT09ICd1JyB8fCBuYW1lID09PSAnZnJhbWUnIHx8IG5hbWUgPT09ICdmJykgewogICAgICAgICAgdXJsID0gdmFsdWU7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICd3aW5kb3cnIHx8IG5hbWUgPT09ICd3JykgewogICAgICAgICAgd2luZG93VVJMID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICB2YXIgY2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hlY2tib3gnKTsKICBjaGVja2JveC5jaGVja2VkID0gc2hvd01pc3NpbmdDb2x1bW47CiAgaWYgKHNob3dNaXNzaW5nQ29sdW1uKSB7CiAgICBqc2NvdmVyYWdlX2FwcGVuZE1pc3NpbmdDb2x1bW4oKTsKICB9CgogIHZhciBpc1ZhbGlkVVJMID0gZnVuY3Rpb24gKHVybCkgewogICAgdmFyIHJlc3VsdCA9IGpzY292ZXJhZ2VfaXNWYWxpZFVSTCh1cmwpOwogICAgaWYgKCEgcmVzdWx0KSB7CiAgICAgIGFsZXJ0KCdJbnZhbGlkIFVSTDogJyArIHVybCk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIGlmICh1cmwgIT09IG51bGwgJiYgaXNWYWxpZFVSTCh1cmwpKSB7CiAgICAvLyB0aGlzIHdpbGwgYXV0b21hdGljYWxseSBwcm9wYWdhdGUgdG8gdGhlIGlucHV0IGZpZWxkCiAgICBmcmFtZXNbMF0ubG9jYXRpb24gPSB1cmw7CiAgfQogIGVsc2UgaWYgKHdpbmRvd1VSTCAhPT0gbnVsbCAmJiBpc1ZhbGlkVVJMKHdpbmRvd1VSTCkpIHsKICAgIHdpbmRvdy5vcGVuKHdpbmRvd1VSTCk7CiAgfQoKICAvLyBpZiB0aGUgYnJvd3NlciB0YWIgaXMgYWJzZW50LCB3ZSBoYXZlIHRvIGluaXRpYWxpemUgdGhlIHN1bW1hcnkgdGFiCiAgaWYgKCEgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jyb3dzZXJUYWInKSkgewogICAganNjb3ZlcmFnZV9yZWNhbGN1bGF0ZVN1bW1hcnlUYWIoKTsKICB9Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2VfYm9keV9sb2FkKCkgewogIC8vIGNoZWNrIGlmIHRoaXMgaXMgYSBmaWxlOiBVUkwKICBpZiAod2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmICYmIC9eZmlsZTovaS50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSkgewogICAgdmFyIHdhcm5pbmdEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2FybmluZ0RpdicpOwogICAgd2FybmluZ0Rpdi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICB9CgogIHZhciBwcm9ncmVzc0JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzc0JhcicpOwogIFByb2dyZXNzQmFyLmluaXQocHJvZ3Jlc3NCYXIpOwoKICBmdW5jdGlvbiByZXBvcnRFcnJvcihlKSB7CiAgICBqc2NvdmVyYWdlX2VuZExlbmd0aHlPcGVyYXRpb24oKTsKICAgIHZhciBzdW1tYXJ5VGhyb2JiZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VtbWFyeVRocm9iYmVyJyk7CiAgICBzdW1tYXJ5VGhyb2JiZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOwogICAgdmFyIGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdW1tYXJ5RXJyb3JEaXYnKTsKICAgIGRpdi5pbm5lckhUTUwgPSAnRXJyb3I6ICcgKyBlOwogIH0KCiAgaWYgKGpzY292ZXJhZ2VfaXNSZXBvcnQpIHsKICAgIGpzY292ZXJhZ2VfYmVnaW5MZW5ndGh5T3BlcmF0aW9uKCk7CiAgICB2YXIgc3VtbWFyeVRocm9iYmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1bW1hcnlUaHJvYmJlcicpOwogICAgc3VtbWFyeVRocm9iYmVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7CiAgICB2YXIgcmVxdWVzdCA9IGpzY292ZXJhZ2VfY3JlYXRlUmVxdWVzdCgpOwogICAgdHJ5IHsKICAgICAgcmVxdWVzdC5vcGVuKCdHRVQnLCAnanNjb3ZlcmFnZS5qc29uJywgdHJ1ZSk7CiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgICB0aHJvdyByZXF1ZXN0LnN0YXR1czsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSByZXF1ZXN0LnJlc3BvbnNlVGV4dDsKICAgICAgICAgICAgaWYgKHJlc3BvbnNlID09PSAnJykgewogICAgICAgICAgICAgIHRocm93IDQwNDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGpzb247CiAgICAgICAgICAgIGlmICh3aW5kb3cuSlNPTiAmJiB3aW5kb3cuSlNPTi5wYXJzZSkgewogICAgICAgICAgICAgIGpzb24gPSB3aW5kb3cuSlNPTi5wYXJzZShyZXNwb25zZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAganNvbiA9IGV2YWwoJygnICsgcmVzcG9uc2UgKyAnKScpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgZmlsZTsKICAgICAgICAgICAgZm9yIChmaWxlIGluIGpzb24pIHsKICAgICAgICAgICAgICBpZiAoISBqc29uLmhhc093blByb3BlcnR5KGZpbGUpKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHZhciBmaWxlQ292ZXJhZ2UgPSBqc29uW2ZpbGVdOwogICAgICAgICAgICAgIF8kanNjb3ZlcmFnZVtmaWxlXSA9IGZpbGVDb3ZlcmFnZS5jb3ZlcmFnZTsKICAgICAgICAgICAgICBfJGpzY292ZXJhZ2VbZmlsZV0uc291cmNlID0gZmlsZUNvdmVyYWdlLnNvdXJjZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU3VtbWFyeVRhYigpOwogICAgICAgICAgICBzdW1tYXJ5VGhyb2JiZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOwogICAgICAgICAgfQogICAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgcmVwb3J0RXJyb3IoZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgICByZXF1ZXN0LnNlbmQobnVsbCk7CiAgICB9CiAgICBjYXRjaCAoZSkgewogICAgICByZXBvcnRFcnJvcihlKTsKICAgIH0KCiAgICBqc2NvdmVyYWdlX3JlbW92ZVRhYignYnJvd3NlcicpOwogICAganNjb3ZlcmFnZV9yZW1vdmVUYWIoJ3N0b3JlJyk7CiAgfQogIGVsc2UgewogICAgaWYgKGpzY292ZXJhZ2VfaXNJbnZlcnRlZE1vZGUpIHsKICAgICAganNjb3ZlcmFnZV9yZW1vdmVUYWIoJ2Jyb3dzZXInKTsKICAgIH0KCiAgICBpZiAoISBqc2NvdmVyYWdlX2lzU2VydmVyKSB7CiAgICAgIGpzY292ZXJhZ2VfcmVtb3ZlVGFiKCdzdG9yZScpOwogICAgfQogIH0KCiAganNjb3ZlcmFnZV9pbml0VGFiQ29udHJvbCgpOwoKICBqc2NvdmVyYWdlX2luaXRUYWJDb250ZW50cyhsb2NhdGlvbi5zZWFyY2gpOwp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX2JvZHlfcmVzaXplKCkgewogIGlmICgvTVNJRS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkgewogICAganNjb3ZlcmFnZV9zZXRTaXplKCk7CiAgfQp9CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyB0YWIgMQoKZnVuY3Rpb24ganNjb3ZlcmFnZV91cGRhdGVCcm93c2VyKCkgewogIHZhciBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2NhdGlvbiIpOwogIGZyYW1lc1swXS5sb2NhdGlvbiA9IGlucHV0LnZhbHVlOwp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX29wZW5XaW5kb3coKSB7CiAgdmFyIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImxvY2F0aW9uIik7CiAgdmFyIHVybCA9IGlucHV0LnZhbHVlOwogIHdpbmRvdy5vcGVuKHVybCk7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2VfaW5wdXRfa2V5cHJlc3MoZSkgewogIGlmIChlLmtleUNvZGUgPT09IDEzKSB7CiAgICBpZiAoZS5zaGlmdEtleSkgewogICAgICBqc2NvdmVyYWdlX29wZW5XaW5kb3coKTsKICAgIH0KICAgIGVsc2UgewogICAgICBqc2NvdmVyYWdlX3VwZGF0ZUJyb3dzZXIoKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2Vfb3BlbkluRnJhbWVCdXR0b25fY2xpY2soKSB7CiAganNjb3ZlcmFnZV91cGRhdGVCcm93c2VyKCk7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2Vfb3BlbkluV2luZG93QnV0dG9uX2NsaWNrKCkgewogIGpzY292ZXJhZ2Vfb3BlbldpbmRvdygpOwp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX2Jyb3dzZXJfbG9hZCgpIHsKICAvKiB1cGRhdGUgdGhlIGlucHV0IGJveCAqLwogIHZhciBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2NhdGlvbiIpOwoKICAvKiBzb21ldGltZXMgSUUgc2VlbXMgdG8gZmlyZSB0aGlzIGFmdGVyIHRoZSB0YWIgaGFzIGJlZW4gcmVtb3ZlZCAqLwogIGlmIChpbnB1dCkgewogICAgaW5wdXQudmFsdWUgPSBmcmFtZXNbMF0ubG9jYXRpb247CiAgfQp9CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyB0YWIgMgoKZnVuY3Rpb24ganNjb3ZlcmFnZV9jcmVhdGVIYW5kbGVyKGZpbGUsIGxpbmUpIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAganNjb3ZlcmFnZV9nZXQoZmlsZSwgbGluZSk7CiAgICByZXR1cm4gZmFsc2U7CiAgfTsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9jcmVhdGVMaW5rKGZpbGUsIGxpbmUpIHsKICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICBsaW5rLmhyZWYgPSAnIyc7CiAgbGluay5vbmNsaWNrID0ganNjb3ZlcmFnZV9jcmVhdGVIYW5kbGVyKGZpbGUsIGxpbmUpOwoKICB2YXIgdGV4dDsKICBpZiAobGluZSkgewogICAgdGV4dCA9IGxpbmUudG9TdHJpbmcoKTsKICB9CiAgZWxzZSB7CiAgICB0ZXh0ID0gZmlsZTsKICB9CgogIGxpbmsuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCkpOwoKICByZXR1cm4gbGluazsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9yZWNhbGN1bGF0ZVN1bW1hcnlUYWIoY2MpIHsKICB2YXIgY2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hlY2tib3gnKTsKICB2YXIgc2hvd01pc3NpbmdDb2x1bW4gPSBjaGVja2JveC5jaGVja2VkOwoKICBpZiAoISBjYykgewogICAgY2MgPSB3aW5kb3cuXyRqc2NvdmVyYWdlOwogIH0KICBpZiAoISBjYykgewovLyNKU0NPVkVSQUdFX0lGIDAKICAgIHRocm93ICJObyBjb3ZlcmFnZSBpbmZvcm1hdGlvbiBmb3VuZC4iOwovLyNKU0NPVkVSQUdFX0VORElGCiAgfQoKICB2YXIgdGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3VtbWFyeVRib2R5Iik7CiAgd2hpbGUgKHRib2R5Lmhhc0NoaWxkTm9kZXMoKSkgewogICAgdGJvZHkucmVtb3ZlQ2hpbGQodGJvZHkuZmlyc3RDaGlsZCk7CiAgfQoKICB2YXIgdG90YWxzID0geyBmaWxlczowLCBzdGF0ZW1lbnRzOjAsIGV4ZWN1dGVkOjAgfTsKCiAgdmFyIGZpbGU7CiAgdmFyIGZpbGVzID0gW107CiAgZm9yIChmaWxlIGluIGNjKSB7CiAgICBpZiAoISBjYy5oYXNPd25Qcm9wZXJ0eShmaWxlKSkgewogICAgICBjb250aW51ZTsKICAgIH0KCiAgICBmaWxlcy5wdXNoKGZpbGUpOwogIH0KICBmaWxlcy5zb3J0KCk7CgogIHZhciByb3dDb3VudGVyID0gMDsKICBmb3IgKHZhciBmID0gMDsgZiA8IGZpbGVzLmxlbmd0aDsgZisrKSB7CiAgICBmaWxlID0gZmlsZXNbZl07CiAgICB2YXIgbGluZU51bWJlcjsKICAgIHZhciBudW1fc3RhdGVtZW50cyA9IDA7CiAgICB2YXIgbnVtX2V4ZWN1dGVkID0gMDsKICAgIHZhciBtaXNzaW5nID0gW107CiAgICB2YXIgZmlsZUNDID0gY2NbZmlsZV07CiAgICB2YXIgbGVuZ3RoID0gZmlsZUNDLmxlbmd0aDsKICAgIHZhciBjdXJyZW50Q29uZGl0aW9uYWxFbmQgPSAwOwogICAgdmFyIGNvbmRpdGlvbmFscyA9IG51bGw7CiAgICBpZiAoZmlsZUNDLmNvbmRpdGlvbmFscykgewogICAgICBjb25kaXRpb25hbHMgPSBmaWxlQ0MuY29uZGl0aW9uYWxzOwogICAgfQogICAgZm9yIChsaW5lTnVtYmVyID0gMDsgbGluZU51bWJlciA8IGxlbmd0aDsgbGluZU51bWJlcisrKSB7CiAgICAgIHZhciBuID0gZmlsZUNDW2xpbmVOdW1iZXJdOwoKICAgICAgaWYgKGxpbmVOdW1iZXIgPT09IGN1cnJlbnRDb25kaXRpb25hbEVuZCkgewogICAgICAgIGN1cnJlbnRDb25kaXRpb25hbEVuZCA9IDA7CiAgICAgIH0KICAgICAgZWxzZSBpZiAoY3VycmVudENvbmRpdGlvbmFsRW5kID09PSAwICYmIGNvbmRpdGlvbmFscyAmJiBjb25kaXRpb25hbHNbbGluZU51bWJlcl0pIHsKICAgICAgICBjdXJyZW50Q29uZGl0aW9uYWxFbmQgPSBjb25kaXRpb25hbHNbbGluZU51bWJlcl07CiAgICAgIH0KCiAgICAgIGlmIChjdXJyZW50Q29uZGl0aW9uYWxFbmQgIT09IDApIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgaWYgKG4gPT09IHVuZGVmaW5lZCB8fCBuID09PSBudWxsKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIGlmIChuID09PSAwKSB7CiAgICAgICAgbWlzc2luZy5wdXNoKGxpbmVOdW1iZXIpOwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIG51bV9leGVjdXRlZCsrOwogICAgICB9CiAgICAgIG51bV9zdGF0ZW1lbnRzKys7CiAgICB9CgogICAgdmFyIHBlcmNlbnRhZ2UgPSAoIG51bV9zdGF0ZW1lbnRzID09PSAwID8gMCA6IHBhcnNlSW50KDEwMCAqIG51bV9leGVjdXRlZCAvIG51bV9zdGF0ZW1lbnRzKSApOwoKICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ciIpOwogICAgcm93LmNsYXNzTmFtZSA9ICggcm93Q291bnRlcisrICUgMiA9PSAwID8gIm9kZCIgOiAiZXZlbiIgKTsKCiAgICB2YXIgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRkIik7CiAgICBjZWxsLmNsYXNzTmFtZSA9ICdsZWZ0Q29sdW1uJzsKICAgIHZhciBsaW5rID0ganNjb3ZlcmFnZV9jcmVhdGVMaW5rKGZpbGUpOwogICAgY2VsbC5hcHBlbmRDaGlsZChsaW5rKTsKCiAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7CgogICAgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRkIik7CiAgICBjZWxsLmNsYXNzTmFtZSA9ICdudW1lcmljJzsKICAgIGNlbGwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobnVtX3N0YXRlbWVudHMpKTsKICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsKTsKCiAgICBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGQiKTsKICAgIGNlbGwuY2xhc3NOYW1lID0gJ251bWVyaWMnOwogICAgY2VsbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShudW1fZXhlY3V0ZWQpKTsKICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsKTsKCiAgICAvLyBuZXcgY292ZXJhZ2UgdGQgY29udGFpbmluZyBhIGJhciBncmFwaAogICAgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRkIik7CiAgICBjZWxsLmNsYXNzTmFtZSA9ICdjb3ZlcmFnZSc7CiAgICB2YXIgcGN0R3JhcGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwKICAgICAgICBjb3ZlcmVkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IiksCiAgICAgICAgcGN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpOwogICAgcGN0R3JhcGguY2xhc3NOYW1lID0gInBjdEdyYXBoIjsKICAgIGlmKCBudW1fc3RhdGVtZW50cyA9PT0gMCApIHsKICAgICAgICBjb3ZlcmVkLmNsYXNzTmFtZSA9ICJza2lwcGVkIjsKICAgICAgICBwY3QuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIk4vQSIpKTsKICAgIH0gZWxzZSB7CiAgICAgICAgY292ZXJlZC5jbGFzc05hbWUgPSAiY292ZXJlZCI7CiAgICAgICAgY292ZXJlZC5zdHlsZS53aWR0aCA9IHBlcmNlbnRhZ2UgKyAicHgiOwogICAgICAgIHBjdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShwZXJjZW50YWdlICsgJyUnKSk7CiAgICB9CiAgICBwY3QuY2xhc3NOYW1lID0gInBjdCI7CiAgICBwY3RHcmFwaC5hcHBlbmRDaGlsZChjb3ZlcmVkKTsKICAgIGNlbGwuYXBwZW5kQ2hpbGQocGN0R3JhcGgpOwogICAgY2VsbC5hcHBlbmRDaGlsZChwY3QpOwogICAgcm93LmFwcGVuZENoaWxkKGNlbGwpOwoKICAgIGlmIChzaG93TWlzc2luZ0NvbHVtbikgewogICAgICBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGQiKTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaXNzaW5nLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKGkgIT09IDApIHsKICAgICAgICAgIGNlbGwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIiwgIikpOwogICAgICAgIH0KICAgICAgICBsaW5rID0ganNjb3ZlcmFnZV9jcmVhdGVMaW5rKGZpbGUsIG1pc3NpbmdbaV0pOwoKICAgICAgICAvLyBncm91cCBjb250aWd1b3VzIG1pc3NpbmcgbGluZXM7IGUuZy4sIDEwLCAxMSwgMTIgLT4gMTAtMTIKICAgICAgICB2YXIgaiwgc3RhcnQgPSBtaXNzaW5nW2ldOwogICAgICAgIGZvciAoOzspIHsKICAgICAgICAgIGogPSAxOwogICAgICAgICAgd2hpbGUgKGkgKyBqIDwgbWlzc2luZy5sZW5ndGggJiYgbWlzc2luZ1tpICsgal0gPT0gbWlzc2luZ1tpXSArIGopIHsKICAgICAgICAgICAgaisrOwogICAgICAgICAgfQogICAgICAgICAgdmFyIG5leHRtaXNzaW5nID0gbWlzc2luZ1tpICsgal0sIGN1ciA9IG1pc3NpbmdbaV0gKyBqOwogICAgICAgICAgaWYgKGlzTmFOKG5leHRtaXNzaW5nKSkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIHdoaWxlIChjdXIgPCBuZXh0bWlzc2luZyAmJiAhIGZpbGVDQ1tjdXJdKSB7CiAgICAgICAgICAgIGN1cisrOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGN1ciA8IG5leHRtaXNzaW5nIHx8IGN1ciA+PSBsZW5ndGgpIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBpICs9IGo7CiAgICAgICAgfQogICAgICAgIGlmIChzdGFydCAhPSBtaXNzaW5nW2ldIHx8IGogPiAxKSB7CiAgICAgICAgICBpICs9IGogLSAxOwogICAgICAgICAgbGluay5pbm5lckhUTUwgKz0gIi0iICsgbWlzc2luZ1tpXTsKICAgICAgICB9CgogICAgICAgIGNlbGwuYXBwZW5kQ2hpbGQobGluayk7CiAgICAgIH0KICAgICAgcm93LmFwcGVuZENoaWxkKGNlbGwpOwogICAgfQoKICAgIHRib2R5LmFwcGVuZENoaWxkKHJvdyk7CgogICAgdG90YWxzWydmaWxlcyddICsrOwogICAgdG90YWxzWydzdGF0ZW1lbnRzJ10gKz0gbnVtX3N0YXRlbWVudHM7CiAgICB0b3RhbHNbJ2V4ZWN1dGVkJ10gKz0gbnVtX2V4ZWN1dGVkOwoKICAgIC8vIHdyaXRlIHRvdGFscyBkYXRhIGludG8gc3VtbWFyeVRvdGFscyByb3cKICAgIHZhciB0ciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdW1tYXJ5VG90YWxzIik7CiAgICBpZiAodHIpIHsKICAgICAgICB2YXIgdGRzID0gdHIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInRkIik7CiAgICAgICAgdGRzWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzcGFuIilbMV0uZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSB0b3RhbHNbJ2ZpbGVzJ107CiAgICAgICAgdGRzWzFdLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdG90YWxzWydzdGF0ZW1lbnRzJ107CiAgICAgICAgdGRzWzJdLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdG90YWxzWydleGVjdXRlZCddOwoKICAgICAgICB2YXIgY292ZXJhZ2UgPSBwYXJzZUludCgxMDAgKiB0b3RhbHNbJ2V4ZWN1dGVkJ10gLyB0b3RhbHNbJ3N0YXRlbWVudHMnXSk7CiAgICAgICAgaWYoIGlzTmFOKCBjb3ZlcmFnZSApICkgewogICAgICAgICAgICBjb3ZlcmFnZSA9IDA7CiAgICAgICAgfQogICAgICAgIHRkc1szXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgic3BhbiIpWzBdLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gY292ZXJhZ2UgKyAnJSc7CiAgICAgICAgdGRzWzNdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJkaXYiKVsxXS5zdHlsZS53aWR0aCA9IGNvdmVyYWdlICsgJ3B4JzsKICAgIH0KCiAgfQogIGpzY292ZXJhZ2VfZW5kTGVuZ3RoeU9wZXJhdGlvbigpOwp9CgpmdW5jdGlvbiBqc2NvdmVyYWdlX2FwcGVuZE1pc3NpbmdDb2x1bW4oKSB7CiAgdmFyIGhlYWRlclJvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWFkZXJSb3cnKTsKICB2YXIgbWlzc2luZ0hlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7CiAgbWlzc2luZ0hlYWRlci5pZCA9ICdtaXNzaW5nSGVhZGVyJzsKICBtaXNzaW5nSGVhZGVyLmlubmVySFRNTCA9ICc8YWJiciB0aXRsZT0iTGlzdCBvZiBzdGF0ZW1lbnRzIG1pc3NlZCBkdXJpbmcgZXhlY3V0aW9uIj5NaXNzaW5nPC9hYmJyPic7CiAgaGVhZGVyUm93LmFwcGVuZENoaWxkKG1pc3NpbmdIZWFkZXIpOwogIHZhciBzdW1tYXJ5VG90YWxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1bW1hcnlUb3RhbHMnKTsKICB2YXIgZW1wdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogIGVtcHR5LmlkID0gJ21pc3NpbmdDZWxsJzsKICBzdW1tYXJ5VG90YWxzLmFwcGVuZENoaWxkKGVtcHR5KTsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9yZW1vdmVNaXNzaW5nQ29sdW1uKCkgewogIHZhciBtaXNzaW5nTm9kZTsKICBtaXNzaW5nTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtaXNzaW5nSGVhZGVyJyk7CiAgbWlzc2luZ05vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtaXNzaW5nTm9kZSk7CiAgbWlzc2luZ05vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWlzc2luZ0NlbGwnKTsKICBtaXNzaW5nTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG1pc3NpbmdOb2RlKTsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9jaGVja2JveF9jbGljaygpIHsKICBpZiAoanNjb3ZlcmFnZV9pbkxlbmd0aHlPcGVyYXRpb24pIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAganNjb3ZlcmFnZV9iZWdpbkxlbmd0aHlPcGVyYXRpb24oKTsKICB2YXIgY2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hlY2tib3gnKTsKICB2YXIgc2hvd01pc3NpbmdDb2x1bW4gPSBjaGVja2JveC5jaGVja2VkOwogIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICBpZiAoc2hvd01pc3NpbmdDb2x1bW4pIHsKICAgICAganNjb3ZlcmFnZV9hcHBlbmRNaXNzaW5nQ29sdW1uKCk7CiAgICB9CiAgICBlbHNlIHsKICAgICAganNjb3ZlcmFnZV9yZW1vdmVNaXNzaW5nQ29sdW1uKCk7CiAgICB9CiAgICBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU3VtbWFyeVRhYigpOwogIH0sIDUwKTsKICByZXR1cm4gdHJ1ZTsKfQoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gdGFiIDMKCmZ1bmN0aW9uIGpzY292ZXJhZ2VfbWFrZVRhYmxlKCkgewogIHZhciBjb3ZlcmFnZSA9IF8kanNjb3ZlcmFnZVtqc2NvdmVyYWdlX2N1cnJlbnRGaWxlXTsKICB2YXIgbGluZXMgPSBjb3ZlcmFnZS5zb3VyY2U7CgogIC8vIHRoaXMgY2FuIGhhcHBlbiBpZiB0aGVyZSBpcyBhbiBlcnJvciBpbiB0aGUgb3JpZ2luYWwgSmF2YVNjcmlwdCBmaWxlCiAgaWYgKCEgbGluZXMpIHsKICAgIGxpbmVzID0gW107CiAgfQoKICB2YXIgcm93cyA9IFsnPHRhYmxlIGlkPSJzb3VyY2VUYWJsZSI+J107CiAgdmFyIGkgPSAwOwogIHZhciBwcm9ncmVzc0JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzc0JhcicpOwogIHZhciB0YWJsZUhUTUw7CiAgdmFyIGN1cnJlbnRDb25kaXRpb25hbEVuZCA9IDA7CgogIGZ1bmN0aW9uIGpvaW5UYWJsZVJvd3MoKSB7CiAgICB0YWJsZUhUTUwgPSByb3dzLmpvaW4oJycpOwogICAgUHJvZ3Jlc3NCYXIuc2V0UGVyY2VudGFnZShwcm9ncmVzc0JhciwgNjApOwogICAgLyoKICAgIFRoaXMgbWF5IGJlIGEgbG9uZyBkZWxheSwgc28gc2V0IGEgdGltZW91dCBvZiAxMDAgbXMgdG8gbWFrZSBzdXJlIHRoZQogICAgZGlzcGxheSBpcyB1cGRhdGVkLgogICAgKi8KICAgIHNldFRpbWVvdXQoYXBwZW5kVGFibGUsIDEwMCk7CiAgfQoKICBmdW5jdGlvbiBhcHBlbmRUYWJsZSgpIHsKICAgIHZhciBzb3VyY2VEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlRGl2Jyk7CiAgICBzb3VyY2VEaXYuaW5uZXJIVE1MID0gdGFibGVIVE1MOwogICAgUHJvZ3Jlc3NCYXIuc2V0UGVyY2VudGFnZShwcm9ncmVzc0JhciwgODApOwogICAgc2V0VGltZW91dChqc2NvdmVyYWdlX3Njcm9sbFRvTGluZSwgMCk7CiAgfQoKICB3aGlsZSAoaSA8IGxpbmVzLmxlbmd0aCkgewogICAgdmFyIGxpbmVOdW1iZXIgPSBpICsgMTsKCiAgICBpZiAobGluZU51bWJlciA9PT0gY3VycmVudENvbmRpdGlvbmFsRW5kKSB7CiAgICAgIGN1cnJlbnRDb25kaXRpb25hbEVuZCA9IDA7CiAgICB9CiAgICBlbHNlIGlmIChjdXJyZW50Q29uZGl0aW9uYWxFbmQgPT09IDAgJiYgY292ZXJhZ2UuY29uZGl0aW9uYWxzICYmIGNvdmVyYWdlLmNvbmRpdGlvbmFsc1tsaW5lTnVtYmVyXSkgewogICAgICBjdXJyZW50Q29uZGl0aW9uYWxFbmQgPSBjb3ZlcmFnZS5jb25kaXRpb25hbHNbbGluZU51bWJlcl07CiAgICB9CgogICAgdmFyIHJvdyA9ICc8dHI+JzsKICAgIHJvdyArPSAnPHRkIGNsYXNzPSJudW1lcmljIj4nICsgbGluZU51bWJlciArICc8L3RkPic7CiAgICB2YXIgdGltZXNFeGVjdXRlZCA9IGNvdmVyYWdlW2xpbmVOdW1iZXJdOwogICAgaWYgKHRpbWVzRXhlY3V0ZWQgIT09IHVuZGVmaW5lZCAmJiB0aW1lc0V4ZWN1dGVkICE9PSBudWxsKSB7CiAgICAgIGlmIChjdXJyZW50Q29uZGl0aW9uYWxFbmQgIT09IDApIHsKICAgICAgICByb3cgKz0gJzx0ZCBjbGFzcz0ieSBudW1lcmljIj4nOwogICAgICB9CiAgICAgIGVsc2UgaWYgKHRpbWVzRXhlY3V0ZWQgPT09IDApIHsKICAgICAgICByb3cgKz0gJzx0ZCBjbGFzcz0iciBudW1lcmljIiBpZD0ibGluZS0nICsgbGluZU51bWJlciArICciPic7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgcm93ICs9ICc8dGQgY2xhc3M9ImcgbnVtZXJpYyI+JzsKICAgICAgfQogICAgICByb3cgKz0gdGltZXNFeGVjdXRlZDsKICAgICAgcm93ICs9ICc8L3RkPic7CiAgICB9CiAgICBlbHNlIHsKICAgICAgcm93ICs9ICc8dGQ+PC90ZD4nOwogICAgfQogICAgcm93ICs9ICc8dGQ+PHByZT4nICsgbGluZXNbaV0gKyAnPC9wcmU+PC90ZD4nOwogICAgcm93ICs9ICc8L3RyPic7CiAgICByb3cgKz0gJ1xuJzsKICAgIHJvd3NbbGluZU51bWJlcl0gPSByb3c7CiAgICBpKys7CiAgfQogIHJvd3NbaSArIDFdID0gJzwvdGFibGU+JzsKICBQcm9ncmVzc0Jhci5zZXRQZXJjZW50YWdlKHByb2dyZXNzQmFyLCA0MCk7CiAgc2V0VGltZW91dChqb2luVGFibGVSb3dzLCAwKTsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9zY3JvbGxUb0xpbmUoKSB7CiAganNjb3ZlcmFnZV9zZWxlY3RUYWIoJ3NvdXJjZVRhYicpOwogIGlmICghIHdpbmRvdy5qc2NvdmVyYWdlX2N1cnJlbnRMaW5lKSB7CiAgICBqc2NvdmVyYWdlX2VuZExlbmd0aHlPcGVyYXRpb24oKTsKICAgIHJldHVybjsKICB9CiAgdmFyIGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2VEaXYnKTsKICBpZiAoanNjb3ZlcmFnZV9jdXJyZW50TGluZSA9PT0gMSkgewogICAgZGl2LnNjcm9sbFRvcCA9IDA7CiAgfQogIGVsc2UgewogICAgdmFyIGNlbGwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluZS0nICsganNjb3ZlcmFnZV9jdXJyZW50TGluZSk7CgogICAgLy8gdGhpcyBtaWdodCBub3QgYmUgdGhlcmUgaWYgdGhlcmUgaXMgYW4gZXJyb3IgaW4gdGhlIG9yaWdpbmFsIEphdmFTY3JpcHQKICAgIGlmIChjZWxsKSB7CiAgICAgIHZhciBkaXZPZmZzZXQgPSBqc2NvdmVyYWdlX2ZpbmRQb3MoZGl2KTsKICAgICAgdmFyIGNlbGxPZmZzZXQgPSBqc2NvdmVyYWdlX2ZpbmRQb3MoY2VsbCk7CiAgICAgIGRpdi5zY3JvbGxUb3AgPSBjZWxsT2Zmc2V0IC0gZGl2T2Zmc2V0OwogICAgfQogIH0KICBqc2NvdmVyYWdlX2N1cnJlbnRMaW5lID0gMDsKICBqc2NvdmVyYWdlX2VuZExlbmd0aHlPcGVyYXRpb24oKTsKfQoKLyoqCkxvYWRzIHRoZSBnaXZlbiBmaWxlIChhbmQgb3B0aW9uYWwgbGluZSkgaW4gdGhlIHNvdXJjZSB0YWIuCiovCmZ1bmN0aW9uIGpzY292ZXJhZ2VfZ2V0KGZpbGUsIGxpbmUpIHsKICBpZiAoanNjb3ZlcmFnZV9pbkxlbmd0aHlPcGVyYXRpb24pIHsKICAgIHJldHVybjsKICB9CiAganNjb3ZlcmFnZV9iZWdpbkxlbmd0aHlPcGVyYXRpb24oKTsKICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgdmFyIHNvdXJjZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2VEaXYnKTsKICAgIHNvdXJjZURpdi5pbm5lckhUTUwgPSAnJzsKICAgIGpzY292ZXJhZ2Vfc2VsZWN0VGFiKCdzb3VyY2VUYWInKTsKICAgIGlmIChmaWxlID09PSBqc2NvdmVyYWdlX2N1cnJlbnRGaWxlKSB7CiAgICAgIGpzY292ZXJhZ2VfY3VycmVudExpbmUgPSBsaW5lOwogICAgICBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU291cmNlVGFiKCk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgaWYgKGpzY292ZXJhZ2VfY3VycmVudEZpbGUgPT09IG51bGwpIHsKICAgICAgICB2YXIgdGFiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZVRhYicpOwogICAgICAgIHRhYi5jbGFzc05hbWUgPSAnJzsKICAgICAgICB0YWIub25jbGljayA9IGpzY292ZXJhZ2VfdGFiX2NsaWNrOwogICAgICB9CiAgICAgIGpzY292ZXJhZ2VfY3VycmVudEZpbGUgPSBmaWxlOwogICAgICBqc2NvdmVyYWdlX2N1cnJlbnRMaW5lID0gbGluZSB8fCAxOyAgLy8gd2hlbiBjaGFuZ2luZyB0aGUgc291cmNlLCBhbHdheXMgc2Nyb2xsIHRvIHRvcAogICAgICB2YXIgZmlsZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlRGl2Jyk7CiAgICAgIGZpbGVEaXYuaW5uZXJIVE1MID0ganNjb3ZlcmFnZV9jdXJyZW50RmlsZTsKICAgICAganNjb3ZlcmFnZV9yZWNhbGN1bGF0ZVNvdXJjZVRhYigpOwogICAgICByZXR1cm47CiAgICB9CiAgfSwgNTApOwp9CgovKioKQ2FsY3VsYXRlcyBjb3ZlcmFnZSBzdGF0aXN0aWNzIGZvciB0aGUgY3VycmVudCBzb3VyY2UgZmlsZS4KKi8KZnVuY3Rpb24ganNjb3ZlcmFnZV9yZWNhbGN1bGF0ZVNvdXJjZVRhYigpIHsKICBpZiAoISBqc2NvdmVyYWdlX2N1cnJlbnRGaWxlKSB7CiAgICBqc2NvdmVyYWdlX2VuZExlbmd0aHlPcGVyYXRpb24oKTsKICAgIHJldHVybjsKICB9CiAgdmFyIHByb2dyZXNzTGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NMYWJlbCcpOwogIHByb2dyZXNzTGFiZWwuaW5uZXJIVE1MID0gJ0NhbGN1bGF0aW5nIGNvdmVyYWdlIC4uLic7CiAgdmFyIHByb2dyZXNzQmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzQmFyJyk7CiAgUHJvZ3Jlc3NCYXIuc2V0UGVyY2VudGFnZShwcm9ncmVzc0JhciwgMjApOwogIHNldFRpbWVvdXQoanNjb3ZlcmFnZV9tYWtlVGFibGUsIDApOwp9CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyB0YWJzCgovKioKSW5pdGlhbGl6ZXMgdGhlIHRhYiBjb250cm9sLiAgVGhpcyBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCB3aGVuIHRoZSBkb2N1bWVudCBpcwpsb2FkZWQuCiovCmZ1bmN0aW9uIGpzY292ZXJhZ2VfaW5pdFRhYkNvbnRyb2woKSB7CiAgdmFyIHRhYnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFicycpOwogIHZhciBpOwogIHZhciBjaGlsZDsKICB2YXIgdGFiTnVtID0gMDsKICBmb3IgKGkgPSAwOyBpIDwgdGFicy5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7CiAgICBjaGlsZCA9IHRhYnMuY2hpbGROb2Rlcy5pdGVtKGkpOwogICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7CiAgICAgIGlmIChjaGlsZC5jbGFzc05hbWUgIT09ICdkaXNhYmxlZCcpIHsKICAgICAgICBjaGlsZC5vbmNsaWNrID0ganNjb3ZlcmFnZV90YWJfY2xpY2s7CiAgICAgIH0KICAgICAgdGFiTnVtKys7CiAgICB9CiAgfQogIGpzY292ZXJhZ2Vfc2VsZWN0VGFiKDApOwp9CgovKioKU2VsZWN0cyBhIHRhYi4KQHBhcmFtICB0YWIgIHRoZSBpbnRlZ2VyIGluZGV4IG9mIHRoZSB0YWIgKDAsIDEsIDIsIG9yIDMpCiAgICAgICAgICAgICBPUgogICAgICAgICAgICAgdGhlIElEIG9mIHRoZSB0YWIgZWxlbWVudAogICAgICAgICAgICAgT1IKICAgICAgICAgICAgIHRoZSB0YWIgZWxlbWVudCBpdHNlbGYKKi8KZnVuY3Rpb24ganNjb3ZlcmFnZV9zZWxlY3RUYWIodGFiKSB7CiAgaWYgKHR5cGVvZiB0YWIgIT09ICdudW1iZXInKSB7CiAgICB0YWIgPSBqc2NvdmVyYWdlX3RhYkluZGV4T2YodGFiKTsKICB9CiAgdmFyIHRhYnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFicycpOwogIHZhciB0YWJQYWdlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJQYWdlcycpOwogIHZhciBub2RlTGlzdDsKICB2YXIgdGFiTnVtOwogIHZhciBpOwogIHZhciBub2RlOwoKICBub2RlTGlzdCA9IHRhYnMuY2hpbGROb2RlczsKICB0YWJOdW0gPSAwOwogIGZvciAoaSA9IDA7IGkgPCBub2RlTGlzdC5sZW5ndGg7IGkrKykgewogICAgbm9kZSA9IG5vZGVMaXN0Lml0ZW0oaSk7CiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gMSkgewogICAgICBjb250aW51ZTsKICAgIH0KCiAgICBpZiAobm9kZS5jbGFzc05hbWUgIT09ICdkaXNhYmxlZCcpIHsKICAgICAgaWYgKHRhYk51bSA9PT0gdGFiKSB7CiAgICAgICAgbm9kZS5jbGFzc05hbWUgPSAnc2VsZWN0ZWQnOwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIG5vZGUuY2xhc3NOYW1lID0gJyc7CiAgICAgIH0KICAgIH0KICAgIHRhYk51bSsrOwogIH0KCiAgbm9kZUxpc3QgPSB0YWJQYWdlcy5jaGlsZE5vZGVzOwogIHRhYk51bSA9IDA7CiAgZm9yIChpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICBub2RlID0gbm9kZUxpc3QuaXRlbShpKTsKICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSAxKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIGlmICh0YWJOdW0gPT09IHRhYikgewogICAgICBub2RlLmNsYXNzTmFtZSA9ICdzZWxlY3RlZCBUYWJQYWdlJzsKICAgIH0KICAgIGVsc2UgewogICAgICBub2RlLmNsYXNzTmFtZSA9ICdUYWJQYWdlJzsKICAgIH0KICAgIHRhYk51bSsrOwogIH0KfQoKLyoqClJldHVybnMgYW4gaW50ZWdlciAoMCwgMSwgMiwgb3IgMykgcmVwcmVzZW50aW5nIHRoZSBpbmRleCBvZiBhIGdpdmVuIHRhYi4KQHBhcmFtICB0YWIgIHRoZSBJRCBvZiB0aGUgdGFiIGVsZW1lbnQKICAgICAgICAgICAgIE9SCiAgICAgICAgICAgICB0aGUgdGFiIGVsZW1lbnQgaXRzZWxmCiovCmZ1bmN0aW9uIGpzY292ZXJhZ2VfdGFiSW5kZXhPZih0YWIpIHsKICBpZiAodHlwZW9mIHRhYiA9PT0gJ3N0cmluZycpIHsKICAgIHRhYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYik7CiAgfQogIHZhciB0YWJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYnMnKTsKICB2YXIgaTsKICB2YXIgY2hpbGQ7CiAgdmFyIHRhYk51bSA9IDA7CiAgZm9yIChpID0gMDsgaSA8IHRhYnMuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgewogICAgY2hpbGQgPSB0YWJzLmNoaWxkTm9kZXMuaXRlbShpKTsKICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgewogICAgICBpZiAoY2hpbGQgPT09IHRhYikgewogICAgICAgIHJldHVybiB0YWJOdW07CiAgICAgIH0KICAgICAgdGFiTnVtKys7CiAgICB9CiAgfQovLyNKU0NPVkVSQUdFX0lGIDAKICB0aHJvdyAiVGFiIG5vdCBmb3VuZCI7Ci8vI0pTQ09WRVJBR0VfRU5ESUYKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV90YWJfY2xpY2soZSkgewogIGlmIChqc2NvdmVyYWdlX2luTGVuZ3RoeU9wZXJhdGlvbikgewogICAgcmV0dXJuOwogIH0KICB2YXIgdGFyZ2V0OwovLyNKU0NPVkVSQUdFX0lGCiAgaWYgKGUpIHsKICAgIHRhcmdldCA9IGUudGFyZ2V0OwogIH0KICBlbHNlIGlmICh3aW5kb3cuZXZlbnQpIHsKICAgIC8vIElFCiAgICB0YXJnZXQgPSB3aW5kb3cuZXZlbnQuc3JjRWxlbWVudDsKICB9CiAgaWYgKHRhcmdldC5jbGFzc05hbWUgPT09ICdzZWxlY3RlZCcpIHsKICAgIHJldHVybjsKICB9CiAganNjb3ZlcmFnZV9iZWdpbkxlbmd0aHlPcGVyYXRpb24oKTsKICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgaWYgKHRhcmdldC5pZCA9PT0gJ3N1bW1hcnlUYWInKSB7CiAgICAgIHZhciB0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdW1tYXJ5VGJvZHkiKTsKICAgICAgd2hpbGUgKHRib2R5Lmhhc0NoaWxkTm9kZXMoKSkgewogICAgICAgIHRib2R5LnJlbW92ZUNoaWxkKHRib2R5LmZpcnN0Q2hpbGQpOwogICAgICB9CiAgICB9CiAgICBlbHNlIGlmICh0YXJnZXQuaWQgPT09ICdzb3VyY2VUYWInKSB7CiAgICAgIHZhciBzb3VyY2VEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlRGl2Jyk7CiAgICAgIHNvdXJjZURpdi5pbm5lckhUTUwgPSAnJzsKICAgIH0KICAgIGpzY292ZXJhZ2Vfc2VsZWN0VGFiKHRhcmdldCk7CiAgICBpZiAodGFyZ2V0LmlkID09PSAnc3VtbWFyeVRhYicpIHsKICAgICAganNjb3ZlcmFnZV9yZWNhbGN1bGF0ZVN1bW1hcnlUYWIoKTsKICAgIH0KICAgIGVsc2UgaWYgKHRhcmdldC5pZCA9PT0gJ3NvdXJjZVRhYicpIHsKICAgICAganNjb3ZlcmFnZV9yZWNhbGN1bGF0ZVNvdXJjZVRhYigpOwogICAgfQogICAgZWxzZSB7CiAgICAgIGpzY292ZXJhZ2VfZW5kTGVuZ3RoeU9wZXJhdGlvbigpOwogICAgfQogIH0sIDUwKTsKfQoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gcHJvZ3Jlc3MgYmFyCgp2YXIgUHJvZ3Jlc3NCYXIgPSB7CiAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgZWxlbWVudC5fcGVyY2VudGFnZSA9IDA7CgogICAgLyogZG9pbmcgdGhpcyB2aWEgSmF2YVNjcmlwdCBjcmFzaGVzIFNhZmFyaSAqLwovKgogICAgdmFyIHBjdEdyYXBoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBwY3RHcmFwaC5jbGFzc05hbWUgPSAncGN0R3JhcGgnOwogICAgZWxlbWVudC5hcHBlbmRDaGlsZChwY3RHcmFwaCk7CiAgICB2YXIgY292ZXJlZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgY292ZXJlZC5jbGFzc05hbWUgPSAnY292ZXJlZCc7CiAgICBwY3RHcmFwaC5hcHBlbmRDaGlsZChjb3ZlcmVkKTsKICAgIHZhciBwY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICBwY3QuY2xhc3NOYW1lID0gJ3BjdCc7CiAgICBlbGVtZW50LmFwcGVuZENoaWxkKHBjdCk7CiovCgogICAgUHJvZ3Jlc3NCYXIuX3VwZGF0ZShlbGVtZW50KTsKICB9LAogIHNldFBlcmNlbnRhZ2U6IGZ1bmN0aW9uKGVsZW1lbnQsIHBlcmNlbnRhZ2UpIHsKICAgIGVsZW1lbnQuX3BlcmNlbnRhZ2UgPSBwZXJjZW50YWdlOwogICAgUHJvZ3Jlc3NCYXIuX3VwZGF0ZShlbGVtZW50KTsKICB9LAogIF91cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHZhciBwY3RHcmFwaCA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpLml0ZW0oMCk7CiAgICB2YXIgY292ZXJlZCA9IHBjdEdyYXBoLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKS5pdGVtKDApOwogICAgdmFyIHBjdCA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NwYW4nKS5pdGVtKDApOwogICAgcGN0LmlubmVySFRNTCA9IGVsZW1lbnQuX3BlcmNlbnRhZ2UudG9TdHJpbmcoKSArICclJzsKICAgIGNvdmVyZWQuc3R5bGUud2lkdGggPSBlbGVtZW50Ll9wZXJjZW50YWdlICsgJ3B4JzsKICB9Cn07CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyByZXBvcnRzCgpmdW5jdGlvbiBqc2NvdmVyYWdlX3BhZChzKSB7CiAgcmV0dXJuICcwMDAwJy5zdWJzdHIocy5sZW5ndGgpICsgczsKfQoKZnVuY3Rpb24ganNjb3ZlcmFnZV9xdW90ZShzKSB7CiAgcmV0dXJuICciJyArIHMucmVwbGFjZSgvW1x1MDAwMC1cdTAwMWYiXFxcdTAwN2YtXHVmZmZmXS9nLCBmdW5jdGlvbiAoYykgewogICAgc3dpdGNoIChjKSB7CiAgICBjYXNlICdcYic6CiAgICAgIHJldHVybiAnXFxiJzsKICAgIGNhc2UgJ1xmJzoKICAgICAgcmV0dXJuICdcXGYnOwogICAgY2FzZSAnXG4nOgogICAgICByZXR1cm4gJ1xcbic7CiAgICBjYXNlICdccic6CiAgICAgIHJldHVybiAnXFxyJzsKICAgIGNhc2UgJ1x0JzoKICAgICAgcmV0dXJuICdcXHQnOwogICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IHRoaXMKICAgIC8qCiAgICBjYXNlICdcdic6CiAgICAgIHJldHVybiAnXFx2JzsKICAgICovCiAgICBjYXNlICciJzoKICAgICAgcmV0dXJuICdcXCInOwogICAgY2FzZSAnXFwnOgogICAgICByZXR1cm4gJ1xcXFwnOwogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuICdcXHUnICsganNjb3ZlcmFnZV9wYWQoYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSk7CiAgICB9CiAgfSkgKyAnIic7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2Vfc2VyaWFsaXplQ292ZXJhZ2VUb0pTT04oKSB7CiAgdmFyIGpzb24gPSBbXTsKICBmb3IgKHZhciBmaWxlIGluIF8kanNjb3ZlcmFnZSkgewogICAgaWYgKCEgXyRqc2NvdmVyYWdlLmhhc093blByb3BlcnR5KGZpbGUpKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIHZhciBjb3ZlcmFnZSA9IF8kanNjb3ZlcmFnZVtmaWxlXTsKCiAgICB2YXIgYXJyYXkgPSBbXTsKICAgIHZhciBsZW5ndGggPSBjb3ZlcmFnZS5sZW5ndGg7CiAgICBmb3IgKHZhciBsaW5lID0gMDsgbGluZSA8IGxlbmd0aDsgbGluZSsrKSB7CiAgICAgIHZhciB2YWx1ZSA9IGNvdmVyYWdlW2xpbmVdOwogICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkgewogICAgICAgIHZhbHVlID0gJ251bGwnOwogICAgICB9CiAgICAgIGFycmF5LnB1c2godmFsdWUpOwogICAgfQoKICAgIHZhciBzb3VyY2UgPSBjb3ZlcmFnZS5zb3VyY2U7CiAgICB2YXIgbGluZXMgPSBbXTsKICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7CiAgICBmb3IgKHZhciBsaW5lID0gMDsgbGluZSA8IGxlbmd0aDsgbGluZSsrKSB7CiAgICAgIGxpbmVzLnB1c2goanNjb3ZlcmFnZV9xdW90ZShzb3VyY2VbbGluZV0pKTsKICAgIH0KCiAgICBqc29uLnB1c2goanNjb3ZlcmFnZV9xdW90ZShmaWxlKSArICc6eyJjb3ZlcmFnZSI6WycgKyBhcnJheS5qb2luKCcsJykgKyAnXSwic291cmNlIjpbJyArIGxpbmVzLmpvaW4oJywnKSArICddfScpOwogIH0KICByZXR1cm4gJ3snICsganNvbi5qb2luKCcsJykgKyAnfSc7Cn0KCmZ1bmN0aW9uIGpzY292ZXJhZ2Vfc3RvcmVCdXR0b25fY2xpY2soKSB7CiAgaWYgKGpzY292ZXJhZ2VfaW5MZW5ndGh5T3BlcmF0aW9uKSB7CiAgICByZXR1cm47CiAgfQoKICBqc2NvdmVyYWdlX2JlZ2luTGVuZ3RoeU9wZXJhdGlvbigpOwogIHZhciBpbWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RvcmVJbWcnKTsKICBpbWcuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJzsKCiAgdmFyIHJlcXVlc3QgPSBqc2NvdmVyYWdlX2NyZWF0ZVJlcXVlc3QoKTsKICByZXF1ZXN0Lm9wZW4oJ1BPU1QnLCAnL2pzY292ZXJhZ2Utc3RvcmUnLCB0cnVlKTsKICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkgewogICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkgewogICAgICB2YXIgbWVzc2FnZTsKICAgICAgdHJ5IHsKICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMjAxICYmIHJlcXVlc3Quc3RhdHVzICE9PSAyMDQpIHsKICAgICAgICAgIHRocm93IHJlcXVlc3Quc3RhdHVzOwogICAgICAgIH0KICAgICAgICBtZXNzYWdlID0gcmVxdWVzdC5yZXNwb25zZVRleHQ7CiAgICAgIH0KICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICBpZiAoZS50b1N0cmluZygpLnNlYXJjaCgvXlxkezN9JC8pID09PSAwKSB7CiAgICAgICAgICBtZXNzYWdlID0gZSArICc6ICcgKyByZXF1ZXN0LnJlc3BvbnNlVGV4dDsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICBtZXNzYWdlID0gJ0NvdWxkIG5vdCBjb25uZWN0IHRvIHNlcnZlcjogJyArIGU7CiAgICAgICAgfQogICAgICB9CgogICAgICBqc2NvdmVyYWdlX2VuZExlbmd0aHlPcGVyYXRpb24oKTsKICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9yZUltZycpOwogICAgICBpbWcuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOwoKICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9yZURpdicpOwogICAgICBkaXYuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3IERhdGUoKSArICc6ICcgKyBtZXNzYWdlKSk7CiAgICAgIGRpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKTsKICAgIH0KICB9OwogIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTsKICB2YXIganNvbiA9IGpzY292ZXJhZ2Vfc2VyaWFsaXplQ292ZXJhZ2VUb0pTT04oKTsKICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJywganNvbi5sZW5ndGgudG9TdHJpbmcoKSk7CiAgcmVxdWVzdC5zZW5kKGpzb24pOwp9Cg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 14:53:26 GMT",
                    "Content-Length": "32110",
                    "Date": "Thu, 06 Nov 2014 14:54:00 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}