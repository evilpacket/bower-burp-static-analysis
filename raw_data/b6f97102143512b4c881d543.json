{
    "url": "http://localhost:9999/ququplay/jquery-mobile-flat-ui-theme/demo/js/jquery.mobile-1.4.0-rc.1.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>location.pathname</b> and written to <b>the 'href' property of a DOM element</b> via the following statement:<ul><li>base[ 0 ].href = href || location.pathname;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/ququplay/jquery-mobile-flat-ui-theme/demo/js/jquery.mobile-1.4.0-rc.1.js",
                "path": "/ququplay/jquery-mobile-flat-ui-theme/demo/js/jquery.mobile-1.4.0-rc.1.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9xdXF1cGxheS9qcXVlcnktbW9iaWxlLWZsYXQtdWktdGhlbWUvZGVtby9qcy9qcXVlcnkubW9iaWxlLTEuNC4wLXJjLjEuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyohCiogalF1ZXJ5IE1vYmlsZSAxLjQuMC1yYy4xCiogR2l0IEhFQUQgaGFzaDogNGI2NDYyYmNjZmUwZTRmYzMzMzdiZDI0ZjE3Yzc2YzZiNWNiMGU2MiA8PiBEYXRlOiBUaHUgT2N0IDI0IDIwMTMgMjA6MDg6NTQgVVRDCiogaHR0cDovL2pxdWVyeW1vYmlsZS5jb20KKgoqIENvcHlyaWdodCAyMDEwLCAyMDEzIGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnMKKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQoqCiovCgoKKGZ1bmN0aW9uICggcm9vdCwgZG9jLCBmYWN0b3J5ICkgewoJaWYgKCB0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQgKSB7CgkJLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLgoJCWRlZmluZSggWyAianF1ZXJ5IiBdLCBmdW5jdGlvbiAoICQgKSB7CgkJCWZhY3RvcnkoICQsIHJvb3QsIGRvYyApOwoJCQlyZXR1cm4gJC5tb2JpbGU7CgkJfSk7Cgl9IGVsc2UgewoJCS8vIEJyb3dzZXIgZ2xvYmFscwoJCWZhY3RvcnkoIHJvb3QualF1ZXJ5LCByb290LCBkb2MgKTsKCX0KfSggdGhpcywgZG9jdW1lbnQsIGZ1bmN0aW9uICggalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQgKSB7CihmdW5jdGlvbiggJCApIHsKCSQubW9iaWxlID0ge307Cn0oIGpRdWVyeSApKTsKCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgkkLmV4dGVuZCggJC5tb2JpbGUsIHsKCgkJLy8gVmVyc2lvbiBvZiB0aGUgalF1ZXJ5IE1vYmlsZSBGcmFtZXdvcmsKCQl2ZXJzaW9uOiAiMS40LjAtcmMuMSIsCgoJCS8vIERlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciB1c2VkIGluIDEuNCByZW1vdmUgaW4gMS41CgkJLy8gRGVmaW5lIHRoZSB1cmwgcGFyYW1ldGVyIHVzZWQgZm9yIHJlZmVyZW5jaW5nIHdpZGdldC1nZW5lcmF0ZWQgc3ViLXBhZ2VzLgoJCS8vIFRyYW5zbGF0ZXMgdG8gZXhhbXBsZS5odG1sJnVpLXBhZ2U9c3VicGFnZUlkZW50aWZpZXIKCQkvLyBoYXNoIHNlZ21lbnQgYmVmb3JlICZ1aS1wYWdlPSBpcyB1c2VkIHRvIG1ha2UgQWpheCByZXF1ZXN0CgkJc3ViUGFnZVVybEtleTogInVpLXBhZ2UiLAoKCQloaWRlVXJsQmFyOiB0cnVlLAoKCQkvLyBLZWVwbmF0aXZlIFNlbGVjdG9yCgkJa2VlcE5hdGl2ZTogIjpqcW1EYXRhKHJvbGU9J25vbmUnKSwgOmpxbURhdGEocm9sZT0nbm9qcycpIiwKCgkJLy8gRGVwcmVjYXRlZCBpbiAxLjQgcmVtb3ZlIGluIDEuNQoJCS8vIENsYXNzIGFzc2lnbmVkIHRvIHBhZ2UgY3VycmVudGx5IGluIHZpZXcsIGFuZCBkdXJpbmcgdHJhbnNpdGlvbnMKCQlhY3RpdmVQYWdlQ2xhc3M6ICJ1aS1wYWdlLWFjdGl2ZSIsCgoJCS8vIERlcHJlY2F0ZWQgaW4gMS40IHJlbW92ZSBpbiAxLjUKCQkvLyBDbGFzcyB1c2VkIGZvciAiYWN0aXZlIiBidXR0b24gc3RhdGUsIGZyb20gQ1NTIGZyYW1ld29yawoJCWFjdGl2ZUJ0bkNsYXNzOiAidWktYnRuLWFjdGl2ZSIsCgoJCS8vIERlcHJlY2F0ZWQgaW4gMS40IHJlbW92ZSBpbiAxLjUKCQkvLyBDbGFzcyB1c2VkIGZvciAiZm9jdXMiIGZvcm0gZWxlbWVudCBzdGF0ZSwgZnJvbSBDU1MgZnJhbWV3b3JrCgkJZm9jdXNDbGFzczogInVpLWZvY3VzIiwKCgkJLy8gQXV0b21hdGljYWxseSBoYW5kbGUgY2xpY2tzIGFuZCBmb3JtIHN1Ym1pc3Npb25zIHRocm91Z2ggQWpheCwgd2hlbiBzYW1lLWRvbWFpbgoJCWFqYXhFbmFibGVkOiB0cnVlLAoKCQkvLyBBdXRvbWF0aWNhbGx5IGxvYWQgYW5kIHNob3cgcGFnZXMgYmFzZWQgb24gbG9jYXRpb24uaGFzaAoJCWhhc2hMaXN0ZW5pbmdFbmFibGVkOiB0cnVlLAoKCQkvLyBkaXNhYmxlIHRvIHByZXZlbnQganF1ZXJ5IGZyb20gYm90aGVyaW5nIHdpdGggbGlua3MKCQlsaW5rQmluZGluZ0VuYWJsZWQ6IHRydWUsCgoJCS8vIFNldCBkZWZhdWx0IHBhZ2UgdHJhbnNpdGlvbiAtICdub25lJyBmb3Igbm8gdHJhbnNpdGlvbnMKCQlkZWZhdWx0UGFnZVRyYW5zaXRpb246ICJmYWRlIiwKCgkJLy8gU2V0IG1heGltdW0gd2luZG93IHdpZHRoIGZvciB0cmFuc2l0aW9ucyB0byBhcHBseSAtICdmYWxzZScgZm9yIG5vIGxpbWl0CgkJbWF4VHJhbnNpdGlvbldpZHRoOiBmYWxzZSwKCgkJLy8gTWluaW11bSBzY3JvbGwgZGlzdGFuY2UgdGhhdCB3aWxsIGJlIHJlbWVtYmVyZWQgd2hlbiByZXR1cm5pbmcgdG8gYSBwYWdlCgkJLy8gRGVwcmVjYXRlZCByZW1vdmUgaW4gMS41CgkJbWluU2Nyb2xsQmFjazogMCwKCgkJLy8gU2V0IGRlZmF1bHQgZGlhbG9nIHRyYW5zaXRpb24gLSAnbm9uZScgZm9yIG5vIHRyYW5zaXRpb25zCgkJZGVmYXVsdERpYWxvZ1RyYW5zaXRpb246ICJwb3AiLAoKCQkvLyBFcnJvciByZXNwb25zZSBtZXNzYWdlIC0gYXBwZWFycyB3aGVuIGFuIEFqYXggcGFnZSByZXF1ZXN0IGZhaWxzCgkJcGFnZUxvYWRFcnJvck1lc3NhZ2U6ICJFcnJvciBMb2FkaW5nIFBhZ2UiLAoKCQkvLyBGb3IgZXJyb3IgbWVzc2FnZXMsIHdoaWNoIHRoZW1lIGRvZXMgdGhlIGJveCB1c2VzPwoJCXBhZ2VMb2FkRXJyb3JNZXNzYWdlVGhlbWU6ICJhIiwKCgkJLy8gcmVwbGFjZSBjYWxscyB0byB3aW5kb3cuaGlzdG9yeS5iYWNrIHdpdGggcGhvbmVnYXBzIG5hdmlnYXRpb24gaGVscGVyCgkJLy8gd2hlcmUgaXQgaXMgcHJvdmlkZWQgb24gdGhlIHdpbmRvdyBvYmplY3QKCQlwaG9uZWdhcE5hdmlnYXRpb25FbmFibGVkOiBmYWxzZSwKCgkJLy9hdXRvbWF0aWNhbGx5IGluaXRpYWxpemUgdGhlIERPTSB3aGVuIGl0J3MgcmVhZHkKCQlhdXRvSW5pdGlhbGl6ZVBhZ2U6IHRydWUsCgoJCXB1c2hTdGF0ZUVuYWJsZWQ6IHRydWUsCgoJCS8vIGFsbG93cyB1c2VycyB0byBvcHQgaW4gdG8gaWdub3JpbmcgY29udGVudCBieSBtYXJraW5nIGEgcGFyZW50IGVsZW1lbnQgYXMKCQkvLyBkYXRhLWlnbm9yZWQKCQlpZ25vcmVDb250ZW50RW5hYmxlZDogZmFsc2UsCgoJCWJ1dHRvbk1hcmt1cDogewoJCQlob3ZlckRlbGF5OiAyMDAKCQl9LAoKCQkvLyBkaXNhYmxlIHRoZSBhbHRlcmF0aW9uIG9mIHRoZSBkeW5hbWljIGJhc2UgdGFnIG9yIGxpbmtzIGluIHRoZSBjYXNlCgkJLy8gdGhhdCBhIGR5bmFtaWMgYmFzZSB0YWcgaXNuJ3Qgc3VwcG9ydGVkCgkJZHluYW1pY0Jhc2VFbmFibGVkOiB0cnVlLAoKCQkvLyBkZWZhdWx0IHRoZSBwcm9wZXJ0eSB0byByZW1vdmUgZGVwZW5kZW5jeSBvbiBhc3NpZ25tZW50IGluIGluaXQgbW9kdWxlCgkJcGFnZUNvbnRhaW5lcjogJCgpLAoKCQkvL2VuYWJsZSBjcm9zcy1kb21haW4gcGFnZSBzdXBwb3J0CgkJYWxsb3dDcm9zc0RvbWFpblBhZ2VzOiBmYWxzZSwKCgkJZGlhbG9nSGFzaEtleTogIiZ1aS1zdGF0ZT1kaWFsb2ciCgl9KTsKfSkoIGpRdWVyeSwgdGhpcyApOwoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCXZhciBuc05vcm1hbGl6ZURpY3QgPSB7fSwKCQlvbGRGaW5kID0gJC5maW5kLAoJCXJicmFjZSA9IC8oPzpce1tcc1xTXSpcfXxcW1tcc1xTXSpcXSkkLywKCQlqcW1EYXRhUkUgPSAvOmpxbURhdGFcKChbXildKilcKS9nOwoKCSQuZXh0ZW5kKCAkLm1vYmlsZSwgewoKCQkvLyBOYW1lc3BhY2UgdXNlZCBmcmFtZXdvcmstd2lkZSBmb3IgZGF0YS1hdHRycy4gRGVmYXVsdCBpcyBubyBuYW1lc3BhY2UKCgkJbnM6ICIiLAoKCQkvLyBSZXRyaWV2ZSBhbiBhdHRyaWJ1dGUgZnJvbSBhbiBlbGVtZW50IGFuZCBwZXJmb3JtIHNvbWUgbWFzc2FnaW5nIG9mIHRoZSB2YWx1ZQoKCQlnZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uKCBlbGVtZW50LCBrZXkgKSB7CgkJCXZhciBkYXRhOwoKCQkJZWxlbWVudCA9IGVsZW1lbnQuanF1ZXJ5ID8gZWxlbWVudFswXSA6IGVsZW1lbnQ7CgoJCQlpZiAoIGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUgKSB7CgkJCQlkYXRhID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArIGtleSApOwoJCQl9CgoJCQkvLyBDb3BpZWQgZnJvbSBjb3JlJ3Mgc3JjL2RhdGEuanM6ZGF0YUF0dHIoKQoJCQkvLyBDb252ZXJ0IGZyb20gYSBzdHJpbmcgdG8gYSBwcm9wZXIgZGF0YSB0eXBlCgkJCXRyeSB7CgkJCQlkYXRhID0gZGF0YSA9PT0gInRydWUiID8gdHJ1ZSA6CgkJCQkJZGF0YSA9PT0gImZhbHNlIiA/IGZhbHNlIDoKCQkJCQlkYXRhID09PSAibnVsbCIgPyBudWxsIDoKCQkJCQkvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZwoJCQkJCStkYXRhICsgIiIgPT09IGRhdGEgPyArZGF0YSA6CgkJCQkJcmJyYWNlLnRlc3QoIGRhdGEgKSA/IEpTT04ucGFyc2UoIGRhdGEgKSA6CgkJCQkJZGF0YTsKCQkJfSBjYXRjaCggZXJyICkge30KCgkJCXJldHVybiBkYXRhOwoJCX0sCgoJCS8vIEV4cG9zZSBvdXIgY2FjaGUgZm9yIHRlc3RpbmcgcHVycG9zZXMuCgkJbnNOb3JtYWxpemVEaWN0OiBuc05vcm1hbGl6ZURpY3QsCgoJCS8vIFRha2UgYSBkYXRhIGF0dHJpYnV0ZSBwcm9wZXJ0eSwgcHJlcGVuZCB0aGUgbmFtZXNwYWNlCgkJLy8gYW5kIHRoZW4gY2FtZWwgY2FzZSB0aGUgYXR0cmlidXRlIHN0cmluZy4gQWRkIHRoZSByZXN1bHQKCQkvLyB0byBvdXIgbnNOb3JtYWxpemVEaWN0IHNvIHdlIGRvbid0IGhhdmUgdG8gZG8gdGhpcyBhZ2Fpbi4KCQluc05vcm1hbGl6ZTogZnVuY3Rpb24oIHByb3AgKSB7CgkJCXJldHVybiBuc05vcm1hbGl6ZURpY3RbIHByb3AgXSB8fAoJCQkJKCBuc05vcm1hbGl6ZURpY3RbIHByb3AgXSA9ICQuY2FtZWxDYXNlKCAkLm1vYmlsZS5ucyArIHByb3AgKSApOwoJCX0sCgoJCS8vIEZpbmQgdGhlIGNsb3Nlc3QgamF2YXNjcmlwdCBwYWdlIGVsZW1lbnQgdG8gZ2F0aGVyIHNldHRpbmdzIGRhdGEganNwZXJmIHRlc3QKCQkvLyBodHRwOi8vanNwZXJmLmNvbS9zaW5nbGUtY29tcGxleC1zZWxlY3Rvci12cy1tYW55LWNvbXBsZXgtc2VsZWN0b3JzL2VkaXQKCQkvLyBwb3NzaWJseSBuYWl2ZSwgYnV0IGl0IHNob3dzIHRoYXQgdGhlIHBhcnNpbmcgb3ZlcmhlYWQgZm9yICpqdXN0KiB0aGUgcGFnZSBzZWxlY3RvciB2cwoJCS8vIHRoZSBwYWdlIGFuZCBkaWFsb2cgc2VsZWN0b3IgaXMgbmVnbGlnYWJsZS4gVGhpcyBjb3VsZCBwcm9iYWJseSBiZSBzcGVlZCB1cCBieQoJCS8vIGRvaW5nIGEgc2ltaWxhciBwYXJlbnQgbm9kZSB0cmF2ZXJzYWwgdG8gdGhlIG9uZSBmb3VuZCBpbiB0aGUgaW5oZXJpdGVkIHRoZW1lIGNvZGUgYWJvdmUKCQljbG9zZXN0UGFnZURhdGE6IGZ1bmN0aW9uKCAkdGFyZ2V0ICkgewoJCQlyZXR1cm4gJHRhcmdldAoJCQkJLmNsb3Nlc3QoICI6anFtRGF0YShyb2xlPSdwYWdlJyksIDpqcW1EYXRhKHJvbGU9J2RpYWxvZycpIiApCgkJCQkuZGF0YSggIm1vYmlsZS1wYWdlIiApOwoJCX0KCgl9KTsKCgkvLyBNb2JpbGUgdmVyc2lvbiBvZiBkYXRhIGFuZCByZW1vdmVEYXRhIGFuZCBoYXNEYXRhIG1ldGhvZHMKCS8vIGVuc3VyZXMgYWxsIGRhdGEgaXMgc2V0IGFuZCByZXRyaWV2ZWQgdXNpbmcgalF1ZXJ5IE1vYmlsZSdzIGRhdGEgbmFtZXNwYWNlCgkkLmZuLmpxbURhdGEgPSBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7CgkJdmFyIHJlc3VsdDsKCQlpZiAoIHR5cGVvZiBwcm9wICE9PSAidW5kZWZpbmVkIiApIHsKCQkJaWYgKCBwcm9wICkgewoJCQkJcHJvcCA9ICQubW9iaWxlLm5zTm9ybWFsaXplKCBwcm9wICk7CgkJCX0KCgkJCS8vIHVuZGVmaW5lZCBpcyBwZXJtaXR0ZWQgYXMgYW4gZXhwbGljaXQgaW5wdXQgZm9yIHRoZSBzZWNvbmQgcGFyYW0KCQkJLy8gaW4gdGhpcyBjYXNlIGl0IHJldHVybnMgdGhlIHZhbHVlIGFuZCBkb2VzIG5vdCBzZXQgaXQgdG8gdW5kZWZpbmVkCgkJCWlmICggYXJndW1lbnRzLmxlbmd0aCA8IDIgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCApIHsKCQkJCXJlc3VsdCA9IHRoaXMuZGF0YSggcHJvcCApOwoJCQl9IGVsc2UgewoJCQkJcmVzdWx0ID0gdGhpcy5kYXRhKCBwcm9wLCB2YWx1ZSApOwoJCQl9CgkJfQoJCXJldHVybiByZXN1bHQ7Cgl9OwoKCSQuanFtRGF0YSA9IGZ1bmN0aW9uKCBlbGVtLCBwcm9wLCB2YWx1ZSApIHsKCQl2YXIgcmVzdWx0OwoJCWlmICggdHlwZW9mIHByb3AgIT09ICJ1bmRlZmluZWQiICkgewoJCQlyZXN1bHQgPSAkLmRhdGEoIGVsZW0sIHByb3AgPyAkLm1vYmlsZS5uc05vcm1hbGl6ZSggcHJvcCApIDogcHJvcCwgdmFsdWUgKTsKCQl9CgkJcmV0dXJuIHJlc3VsdDsKCX07CgoJJC5mbi5qcW1SZW1vdmVEYXRhID0gZnVuY3Rpb24oIHByb3AgKSB7CgkJcmV0dXJuIHRoaXMucmVtb3ZlRGF0YSggJC5tb2JpbGUubnNOb3JtYWxpemUoIHByb3AgKSApOwoJfTsKCgkkLmpxbVJlbW92ZURhdGEgPSBmdW5jdGlvbiggZWxlbSwgcHJvcCApIHsKCQlyZXR1cm4gJC5yZW1vdmVEYXRhKCBlbGVtLCAkLm1vYmlsZS5uc05vcm1hbGl6ZSggcHJvcCApICk7Cgl9OwoKCSQuZmluZCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmV0LCBleHRyYSApIHsKCQlpZiAoIHNlbGVjdG9yLmluZGV4T2YoICI6anFtRGF0YSIgKSA+IC0xICkgewoJCQlzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UoIGpxbURhdGFSRSwgIltkYXRhLSIgKyAoICQubW9iaWxlLm5zIHx8ICIiICkgKyAiJDFdIiApOwoJCX0KCgkJcmV0dXJuIG9sZEZpbmQuY2FsbCggdGhpcywgc2VsZWN0b3IsIGNvbnRleHQsIHJldCwgZXh0cmEgKTsKCX07CgoJJC5leHRlbmQoICQuZmluZCwgb2xkRmluZCApOwoKfSkoIGpRdWVyeSwgdGhpcyApOwoKLyohCiAqIGpRdWVyeSBVSSBDb3JlIEBWRVJTSU9OCiAqIGh0dHA6Ly9qcXVlcnl1aS5jb20KICoKICogQ29weXJpZ2h0IDIwMTMgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICoKICogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vY2F0ZWdvcnkvdWktY29yZS8KICovCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIHV1aWQgPSAwLAoJcnVuaXF1ZUlkID0gL151aS1pZC1cZCskLzsKCi8vICQudWkgbWlnaHQgZXhpc3QgZnJvbSBjb21wb25lbnRzIHdpdGggbm8gZGVwZW5kZW5jaWVzLCBlLmcuLCAkLnVpLnBvc2l0aW9uCiQudWkgPSAkLnVpIHx8IHt9OwoKJC5leHRlbmQoICQudWksIHsKCXZlcnNpb246ICJAVkVSU0lPTiIsCgoJa2V5Q29kZTogewoJCUJBQ0tTUEFDRTogOCwKCQlDT01NQTogMTg4LAoJCURFTEVURTogNDYsCgkJRE9XTjogNDAsCgkJRU5EOiAzNSwKCQlFTlRFUjogMTMsCgkJRVNDQVBFOiAyNywKCQlIT01FOiAzNiwKCQlMRUZUOiAzNywKCQlQQUdFX0RPV046IDM0LAoJCVBBR0VfVVA6IDMzLAoJCVBFUklPRDogMTkwLAoJCVJJR0hUOiAzOSwKCQlTUEFDRTogMzIsCgkJVEFCOiA5LAoJCVVQOiAzOAoJfQp9KTsKCi8vIHBsdWdpbnMKJC5mbi5leHRlbmQoewoJZm9jdXM6IChmdW5jdGlvbiggb3JpZyApIHsKCQlyZXR1cm4gZnVuY3Rpb24oIGRlbGF5LCBmbiApIHsKCQkJcmV0dXJuIHR5cGVvZiBkZWxheSA9PT0gIm51bWJlciIgPwoJCQkJdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJCXZhciBlbGVtID0gdGhpczsKCQkJCQlzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoJCQkJCQkkKCBlbGVtICkuZm9jdXMoKTsKCQkJCQkJaWYgKCBmbiApIHsKCQkJCQkJCWZuLmNhbGwoIGVsZW0gKTsKCQkJCQkJfQoJCQkJCX0sIGRlbGF5ICk7CgkJCQl9KSA6CgkJCQlvcmlnLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQl9OwoJfSkoICQuZm4uZm9jdXMgKSwKCglzY3JvbGxQYXJlbnQ6IGZ1bmN0aW9uKCkgewoJCXZhciBzY3JvbGxQYXJlbnQ7CgkJaWYgKCgkLnVpLmllICYmICgvKHN0YXRpY3xyZWxhdGl2ZSkvKS50ZXN0KHRoaXMuY3NzKCJwb3NpdGlvbiIpKSkgfHwgKC9hYnNvbHV0ZS8pLnRlc3QodGhpcy5jc3MoInBvc2l0aW9uIikpKSB7CgkJCXNjcm9sbFBhcmVudCA9IHRoaXMucGFyZW50cygpLmZpbHRlcihmdW5jdGlvbigpIHsKCQkJCXJldHVybiAoLyhyZWxhdGl2ZXxhYnNvbHV0ZXxmaXhlZCkvKS50ZXN0KCQuY3NzKHRoaXMsInBvc2l0aW9uIikpICYmICgvKGF1dG98c2Nyb2xsKS8pLnRlc3QoJC5jc3ModGhpcywib3ZlcmZsb3ciKSskLmNzcyh0aGlzLCJvdmVyZmxvdy15IikrJC5jc3ModGhpcywib3ZlcmZsb3cteCIpKTsKCQkJfSkuZXEoMCk7CgkJfSBlbHNlIHsKCQkJc2Nyb2xsUGFyZW50ID0gdGhpcy5wYXJlbnRzKCkuZmlsdGVyKGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICgvKGF1dG98c2Nyb2xsKS8pLnRlc3QoJC5jc3ModGhpcywib3ZlcmZsb3ciKSskLmNzcyh0aGlzLCJvdmVyZmxvdy15IikrJC5jc3ModGhpcywib3ZlcmZsb3cteCIpKTsKCQkJfSkuZXEoMCk7CgkJfQoKCQlyZXR1cm4gKCAvZml4ZWQvICkudGVzdCggdGhpcy5jc3MoICJwb3NpdGlvbiIpICkgfHwgIXNjcm9sbFBhcmVudC5sZW5ndGggPyAkKCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApIDogc2Nyb2xsUGFyZW50OwoJfSwKCgl1bmlxdWVJZDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJaWYgKCAhdGhpcy5pZCApIHsKCQkJCXRoaXMuaWQgPSAidWktaWQtIiArICgrK3V1aWQpOwoJCQl9CgkJfSk7Cgl9LAoKCXJlbW92ZVVuaXF1ZUlkOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQlpZiAoIHJ1bmlxdWVJZC50ZXN0KCB0aGlzLmlkICkgKSB7CgkJCQkkKCB0aGlzICkucmVtb3ZlQXR0ciggImlkIiApOwoJCQl9CgkJfSk7Cgl9Cn0pOwoKLy8gc2VsZWN0b3JzCmZ1bmN0aW9uIGZvY3VzYWJsZSggZWxlbWVudCwgaXNUYWJJbmRleE5vdE5hTiApIHsKCXZhciBtYXAsIG1hcE5hbWUsIGltZywKCQlub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCWlmICggImFyZWEiID09PSBub2RlTmFtZSApIHsKCQltYXAgPSBlbGVtZW50LnBhcmVudE5vZGU7CgkJbWFwTmFtZSA9IG1hcC5uYW1lOwoJCWlmICggIWVsZW1lbnQuaHJlZiB8fCAhbWFwTmFtZSB8fCBtYXAubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gIm1hcCIgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJaW1nID0gJCggImltZ1t1c2VtYXA9IyIgKyBtYXBOYW1lICsgIl0iIClbMF07CgkJcmV0dXJuICEhaW1nICYmIHZpc2libGUoIGltZyApOwoJfQoJcmV0dXJuICggL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0Ly50ZXN0KCBub2RlTmFtZSApID8KCQkhZWxlbWVudC5kaXNhYmxlZCA6CgkJImEiID09PSBub2RlTmFtZSA/CgkJCWVsZW1lbnQuaHJlZiB8fCBpc1RhYkluZGV4Tm90TmFOIDoKCQkJaXNUYWJJbmRleE5vdE5hTikgJiYKCQkvLyB0aGUgZWxlbWVudCBhbmQgYWxsIG9mIGl0cyBhbmNlc3RvcnMgbXVzdCBiZSB2aXNpYmxlCgkJdmlzaWJsZSggZWxlbWVudCApOwp9CgpmdW5jdGlvbiB2aXNpYmxlKCBlbGVtZW50ICkgewoJcmV0dXJuICQuZXhwci5maWx0ZXJzLnZpc2libGUoIGVsZW1lbnQgKSAmJgoJCSEkKCBlbGVtZW50ICkucGFyZW50cygpLmFkZEJhY2soKS5maWx0ZXIoZnVuY3Rpb24oKSB7CgkJCXJldHVybiAkLmNzcyggdGhpcywgInZpc2liaWxpdHkiICkgPT09ICJoaWRkZW4iOwoJCX0pLmxlbmd0aDsKfQoKJC5leHRlbmQoICQuZXhwclsgIjoiIF0sIHsKCWRhdGE6ICQuZXhwci5jcmVhdGVQc2V1ZG8gPwoJCSQuZXhwci5jcmVhdGVQc2V1ZG8oZnVuY3Rpb24oIGRhdGFOYW1lICkgewoJCQlyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQlyZXR1cm4gISEkLmRhdGEoIGVsZW0sIGRhdGFOYW1lICk7CgkJCX07CgkJfSkgOgoJCS8vIHN1cHBvcnQ6IGpRdWVyeSA8MS44CgkJZnVuY3Rpb24oIGVsZW0sIGksIG1hdGNoICkgewoJCQlyZXR1cm4gISEkLmRhdGEoIGVsZW0sIG1hdGNoWyAzIF0gKTsKCQl9LAoKCWZvY3VzYWJsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJcmV0dXJuIGZvY3VzYWJsZSggZWxlbWVudCwgIWlzTmFOKCAkLmF0dHIoIGVsZW1lbnQsICJ0YWJpbmRleCIgKSApICk7Cgl9LAoKCXRhYmJhYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl2YXIgdGFiSW5kZXggPSAkLmF0dHIoIGVsZW1lbnQsICJ0YWJpbmRleCIgKSwKCQkJaXNUYWJJbmRleE5hTiA9IGlzTmFOKCB0YWJJbmRleCApOwoJCXJldHVybiAoIGlzVGFiSW5kZXhOYU4gfHwgdGFiSW5kZXggPj0gMCApICYmIGZvY3VzYWJsZSggZWxlbWVudCwgIWlzVGFiSW5kZXhOYU4gKTsKCX0KfSk7CgovLyBzdXBwb3J0OiBqUXVlcnkgPDEuOAppZiAoICEkKCAiPGE+IiApLm91dGVyV2lkdGgoIDEgKS5qcXVlcnkgKSB7CgkkLmVhY2goIFsgIldpZHRoIiwgIkhlaWdodCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7CgkJdmFyIHNpZGUgPSBuYW1lID09PSAiV2lkdGgiID8gWyAiTGVmdCIsICJSaWdodCIgXSA6IFsgIlRvcCIsICJCb3R0b20iIF0sCgkJCXR5cGUgPSBuYW1lLnRvTG93ZXJDYXNlKCksCgkJCW9yaWcgPSB7CgkJCQlpbm5lcldpZHRoOiAkLmZuLmlubmVyV2lkdGgsCgkJCQlpbm5lckhlaWdodDogJC5mbi5pbm5lckhlaWdodCwKCQkJCW91dGVyV2lkdGg6ICQuZm4ub3V0ZXJXaWR0aCwKCQkJCW91dGVySGVpZ2h0OiAkLmZuLm91dGVySGVpZ2h0CgkJCX07CgoJCWZ1bmN0aW9uIHJlZHVjZSggZWxlbSwgc2l6ZSwgYm9yZGVyLCBtYXJnaW4gKSB7CgkJCSQuZWFjaCggc2lkZSwgZnVuY3Rpb24oKSB7CgkJCQlzaXplIC09IHBhcnNlRmxvYXQoICQuY3NzKCBlbGVtLCAicGFkZGluZyIgKyB0aGlzICkgKSB8fCAwOwoJCQkJaWYgKCBib3JkZXIgKSB7CgkJCQkJc2l6ZSAtPSBwYXJzZUZsb2F0KCAkLmNzcyggZWxlbSwgImJvcmRlciIgKyB0aGlzICsgIldpZHRoIiApICkgfHwgMDsKCQkJCX0KCQkJCWlmICggbWFyZ2luICkgewoJCQkJCXNpemUgLT0gcGFyc2VGbG9hdCggJC5jc3MoIGVsZW0sICJtYXJnaW4iICsgdGhpcyApICkgfHwgMDsKCQkJCX0KCQkJfSk7CgkJCXJldHVybiBzaXplOwoJCX0KCgkJJC5mblsgImlubmVyIiArIG5hbWUgXSA9IGZ1bmN0aW9uKCBzaXplICkgewoJCQlpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHsKCQkJCXJldHVybiBvcmlnWyAiaW5uZXIiICsgbmFtZSBdLmNhbGwoIHRoaXMgKTsKCQkJfQoKCQkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCSQoIHRoaXMgKS5jc3MoIHR5cGUsIHJlZHVjZSggdGhpcywgc2l6ZSApICsgInB4IiApOwoJCQl9KTsKCQl9OwoKCQkkLmZuWyAib3V0ZXIiICsgbmFtZV0gPSBmdW5jdGlvbiggc2l6ZSwgbWFyZ2luICkgewoJCQlpZiAoIHR5cGVvZiBzaXplICE9PSAibnVtYmVyIiApIHsKCQkJCXJldHVybiBvcmlnWyAib3V0ZXIiICsgbmFtZSBdLmNhbGwoIHRoaXMsIHNpemUgKTsKCQkJfQoKCQkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCSQoIHRoaXMpLmNzcyggdHlwZSwgcmVkdWNlKCB0aGlzLCBzaXplLCB0cnVlLCBtYXJnaW4gKSArICJweCIgKTsKCQkJfSk7CgkJfTsKCX0pOwp9CgovLyBzdXBwb3J0OiBqUXVlcnkgPDEuOAppZiAoICEkLmZuLmFkZEJhY2sgKSB7CgkkLmZuLmFkZEJhY2sgPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CgkJcmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID8KCQkJdGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKQoJCSk7Cgl9Owp9CgovLyBzdXBwb3J0OiBqUXVlcnkgMS42LjEsIDEuNi4yIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC85NDEzKQppZiAoICQoICI8YT4iICkuZGF0YSggImEtYiIsICJhIiApLnJlbW92ZURhdGEoICJhLWIiICkuZGF0YSggImEtYiIgKSApIHsKCSQuZm4ucmVtb3ZlRGF0YSA9IChmdW5jdGlvbiggcmVtb3ZlRGF0YSApIHsKCQlyZXR1cm4gZnVuY3Rpb24oIGtleSApIHsKCQkJaWYgKCBhcmd1bWVudHMubGVuZ3RoICkgewoJCQkJcmV0dXJuIHJlbW92ZURhdGEuY2FsbCggdGhpcywgJC5jYW1lbENhc2UoIGtleSApICk7CgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gcmVtb3ZlRGF0YS5jYWxsKCB0aGlzICk7CgkJCX0KCQl9OwoJfSkoICQuZm4ucmVtb3ZlRGF0YSApOwp9CgoKCgoKLy8gZGVwcmVjYXRlZAokLnVpLmllID0gISEvbXNpZSBbXHcuXSsvLmV4ZWMoIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSApOwoKJC5zdXBwb3J0LnNlbGVjdHN0YXJ0ID0gIm9uc2VsZWN0c3RhcnQiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7CiQuZm4uZXh0ZW5kKHsKCWRpc2FibGVTZWxlY3Rpb246IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLmJpbmQoICggJC5zdXBwb3J0LnNlbGVjdHN0YXJ0ID8gInNlbGVjdHN0YXJ0IiA6ICJtb3VzZWRvd24iICkgKwoJCQkiLnVpLWRpc2FibGVTZWxlY3Rpb24iLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQl9KTsKCX0sCgoJZW5hYmxlU2VsZWN0aW9uOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy51bmJpbmQoICIudWktZGlzYWJsZVNlbGVjdGlvbiIgKTsKCX0sCgoJekluZGV4OiBmdW5jdGlvbiggekluZGV4ICkgewoJCWlmICggekluZGV4ICE9PSB1bmRlZmluZWQgKSB7CgkJCXJldHVybiB0aGlzLmNzcyggInpJbmRleCIsIHpJbmRleCApOwoJCX0KCgkJaWYgKCB0aGlzLmxlbmd0aCApIHsKCQkJdmFyIGVsZW0gPSAkKCB0aGlzWyAwIF0gKSwgcG9zaXRpb24sIHZhbHVlOwoJCQl3aGlsZSAoIGVsZW0ubGVuZ3RoICYmIGVsZW1bIDAgXSAhPT0gZG9jdW1lbnQgKSB7CgkJCQkvLyBJZ25vcmUgei1pbmRleCBpZiBwb3NpdGlvbiBpcyBzZXQgdG8gYSB2YWx1ZSB3aGVyZSB6LWluZGV4IGlzIGlnbm9yZWQgYnkgdGhlIGJyb3dzZXIKCQkJCS8vIFRoaXMgbWFrZXMgYmVoYXZpb3Igb2YgdGhpcyBmdW5jdGlvbiBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycwoJCQkJLy8gV2ViS2l0IGFsd2F5cyByZXR1cm5zIGF1dG8gaWYgdGhlIGVsZW1lbnQgaXMgcG9zaXRpb25lZAoJCQkJcG9zaXRpb24gPSBlbGVtLmNzcyggInBvc2l0aW9uIiApOwoJCQkJaWYgKCBwb3NpdGlvbiA9PT0gImFic29sdXRlIiB8fCBwb3NpdGlvbiA9PT0gInJlbGF0aXZlIiB8fCBwb3NpdGlvbiA9PT0gImZpeGVkIiApIHsKCQkJCQkvLyBJRSByZXR1cm5zIDAgd2hlbiB6SW5kZXggaXMgbm90IHNwZWNpZmllZAoJCQkJCS8vIG90aGVyIGJyb3dzZXJzIHJldHVybiBhIHN0cmluZwoJCQkJCS8vIHdlIGlnbm9yZSB0aGUgY2FzZSBvZiBuZXN0ZWQgZWxlbWVudHMgd2l0aCBhbiBleHBsaWNpdCB2YWx1ZSBvZiAwCgkJCQkJLy8gPGRpdiBzdHlsZT0iei1pbmRleDogLTEwOyI+PGRpdiBzdHlsZT0iei1pbmRleDogMDsiPjwvZGl2PjwvZGl2PgoJCQkJCXZhbHVlID0gcGFyc2VJbnQoIGVsZW0uY3NzKCAiekluZGV4IiApLCAxMCApOwoJCQkJCWlmICggIWlzTmFOKCB2YWx1ZSApICYmIHZhbHVlICE9PSAwICkgewoJCQkJCQlyZXR1cm4gdmFsdWU7CgkJCQkJfQoJCQkJfQoJCQkJZWxlbSA9IGVsZW0ucGFyZW50KCk7CgkJCX0KCQl9CgoJCXJldHVybiAwOwoJfQp9KTsKCi8vICQudWkucGx1Z2luIGlzIGRlcHJlY2F0ZWQuIFVzZSAkLndpZGdldCgpIGV4dGVuc2lvbnMgaW5zdGVhZC4KJC51aS5wbHVnaW4gPSB7CglhZGQ6IGZ1bmN0aW9uKCBtb2R1bGUsIG9wdGlvbiwgc2V0ICkgewoJCXZhciBpLAoJCQlwcm90byA9ICQudWlbIG1vZHVsZSBdLnByb3RvdHlwZTsKCQlmb3IgKCBpIGluIHNldCApIHsKCQkJcHJvdG8ucGx1Z2luc1sgaSBdID0gcHJvdG8ucGx1Z2luc1sgaSBdIHx8IFtdOwoJCQlwcm90by5wbHVnaW5zWyBpIF0ucHVzaCggWyBvcHRpb24sIHNldFsgaSBdIF0gKTsKCQl9Cgl9LAoJY2FsbDogZnVuY3Rpb24oIGluc3RhbmNlLCBuYW1lLCBhcmdzLCBhbGxvd0Rpc2Nvbm5lY3RlZCApIHsKCQl2YXIgaSwKCQkJc2V0ID0gaW5zdGFuY2UucGx1Z2luc1sgbmFtZSBdOwoKCQlpZiAoICFzZXQgKSB7CgkJCXJldHVybjsKCQl9CgoJCWlmICggIWFsbG93RGlzY29ubmVjdGVkICYmICggIWluc3RhbmNlLmVsZW1lbnRbIDAgXS5wYXJlbnROb2RlIHx8IGluc3RhbmNlLmVsZW1lbnRbIDAgXS5wYXJlbnROb2RlLm5vZGVUeXBlID09PSAxMSApICkgewoJCQlyZXR1cm47CgkJfQoKCQlmb3IgKCBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKyApIHsKCQkJaWYgKCBpbnN0YW5jZS5vcHRpb25zWyBzZXRbIGkgXVsgMCBdIF0gKSB7CgkJCQlzZXRbIGkgXVsgMSBdLmFwcGx5KCBpbnN0YW5jZS5lbGVtZW50LCBhcmdzICk7CgkJCX0KCQl9Cgl9Cn07Cgp9KSggalF1ZXJ5ICk7CihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgoJJC5leHRlbmQoICQubW9iaWxlLCB7CgkJLy8gZGVmaW5lIHRoZSB3aW5kb3cgYW5kIHRoZSBkb2N1bWVudCBvYmplY3RzCgkJd2luZG93OiAkKCB3aW5kb3cgKSwKCQlkb2N1bWVudDogJCggZG9jdW1lbnQgKSwKCgkJLy8gVE9ETzogUmVtb3ZlIGFuZCB1c2UgJC51aS5rZXlDb2RlIGRpcmVjdGx5CgkJa2V5Q29kZTogJC51aS5rZXlDb2RlLAoKCQkvLyBQbGFjZSB0byBzdG9yZSB2YXJpb3VzIHdpZGdldCBleHRlbnNpb25zCgkJYmVoYXZpb3JzOiB7fSwKCgkJLy8gU2Nyb2xsIHBhZ2UgdmVydGljYWxseTogc2Nyb2xsIHRvIDAgdG8gaGlkZSBpT1MgYWRkcmVzcyBiYXIsIG9yIHBhc3MgYSBZIHZhbHVlCgkJc2lsZW50U2Nyb2xsOiBmdW5jdGlvbiggeXBvcyApIHsKCQkJaWYgKCAkLnR5cGUoIHlwb3MgKSAhPT0gIm51bWJlciIgKSB7CgkJCQl5cG9zID0gJC5tb2JpbGUuZGVmYXVsdEhvbWVTY3JvbGw7CgkJCX0KCgkJCS8vIHByZXZlbnQgc2Nyb2xsc3RhcnQgYW5kIHNjcm9sbHN0b3AgZXZlbnRzCgkJCSQuZXZlbnQuc3BlY2lhbC5zY3JvbGxzdGFydC5lbmFibGVkID0gZmFsc2U7CgoJCQlzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoJCQkJd2luZG93LnNjcm9sbFRvKCAwLCB5cG9zICk7CgkJCQkkLm1vYmlsZS5kb2N1bWVudC50cmlnZ2VyKCAic2lsZW50c2Nyb2xsIiwgeyB4OiAwLCB5OiB5cG9zIH0pOwoJCQl9LCAyMCApOwoKCQkJc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCSQuZXZlbnQuc3BlY2lhbC5zY3JvbGxzdGFydC5lbmFibGVkID0gdHJ1ZTsKCQkJfSwgMTUwICk7CgkJfSwKCgkJZ2V0Q2xvc2VzdEJhc2VVcmw6IGZ1bmN0aW9uKCBlbGUgKQl7CgkJCS8vIEZpbmQgdGhlIGNsb3Nlc3QgcGFnZSBhbmQgZXh0cmFjdCBvdXQgaXRzIHVybC4KCQkJdmFyIHVybCA9ICQoIGVsZSApLmNsb3Nlc3QoICIudWktcGFnZSIgKS5qcW1EYXRhKCAidXJsIiApLAoJCQkJYmFzZSA9ICQubW9iaWxlLnBhdGguZG9jdW1lbnRCYXNlLmhyZWZOb0hhc2g7CgoJCQlpZiAoICEkLm1vYmlsZS5keW5hbWljQmFzZUVuYWJsZWQgfHwgIXVybCB8fCAhJC5tb2JpbGUucGF0aC5pc1BhdGgoIHVybCApICkgewoJCQkJdXJsID0gYmFzZTsKCQkJfQoKCQkJcmV0dXJuICQubW9iaWxlLnBhdGgubWFrZVVybEFic29sdXRlKCB1cmwsIGJhc2UgKTsKCQl9LAoJCXJlbW92ZUFjdGl2ZUxpbmtDbGFzczogZnVuY3Rpb24oIGZvcmNlUmVtb3ZhbCApIHsKCQkJaWYgKCAhISQubW9iaWxlLmFjdGl2ZUNsaWNrZWRMaW5rICYmCgkJCQkoICEkLm1vYmlsZS5hY3RpdmVDbGlja2VkTGluay5jbG9zZXN0KCAiLiIgKyAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKS5sZW5ndGggfHwKCQkJCQlmb3JjZVJlbW92YWwgKSApIHsKCgkJCQkkLm1vYmlsZS5hY3RpdmVDbGlja2VkTGluay5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJfQoJCQkkLm1vYmlsZS5hY3RpdmVDbGlja2VkTGluayA9IG51bGw7CgkJfSwKCgkJLy8gREVQUkVDQVRFRCBpbiAxLjQKCQkvLyBGaW5kIHRoZSBjbG9zZXN0IHBhcmVudCB3aXRoIGEgdGhlbWUgY2xhc3Mgb24gaXQuIE5vdGUgdGhhdAoJCS8vIHdlIGFyZSBub3QgdXNpbmcgJC5mbi5jbG9zZXN0KCkgb24gcHVycG9zZSBoZXJlIGJlY2F1c2UgdGhpcwoJCS8vIG1ldGhvZCBnZXRzIGNhbGxlZCBxdWl0ZSBhIGJpdCBhbmQgd2UgbmVlZCBpdCB0byBiZSBhcyBmYXN0CgkJLy8gYXMgcG9zc2libGUuCgkJZ2V0SW5oZXJpdGVkVGhlbWU6IGZ1bmN0aW9uKCBlbCwgZGVmYXVsdFRoZW1lICkgewoJCQl2YXIgZSA9IGVsWyAwIF0sCgkJCQlsdHIgPSAiIiwKCQkJCXJlID0gL3VpLShiYXJ8Ym9keXxvdmVybGF5KS0oW2Etel0pXGIvLAoJCQkJYywgbTsKCQkJd2hpbGUgKCBlICkgewoJCQkJYyA9IGUuY2xhc3NOYW1lIHx8ICIiOwoJCQkJaWYgKCBjICYmICggbSA9IHJlLmV4ZWMoIGMgKSApICYmICggbHRyID0gbVsgMiBdICkgKSB7CgkJCQkJLy8gV2UgZm91bmQgYSBwYXJlbnQgd2l0aCBhIHRoZW1lIGNsYXNzCgkJCQkJLy8gb24gaXQgc28gYmFpbCBmcm9tIHRoaXMgbG9vcC4KCQkJCQlicmVhazsKCQkJCX0KCgkJCQllID0gZS5wYXJlbnROb2RlOwoJCQl9CgkJCS8vIFJldHVybiB0aGUgdGhlbWUgbGV0dGVyIHdlIGZvdW5kLCBpZiBub25lLCByZXR1cm4gdGhlCgkJCS8vIHNwZWNpZmllZCBkZWZhdWx0LgoJCQlyZXR1cm4gbHRyIHx8IGRlZmF1bHRUaGVtZSB8fCAiYSI7CgkJfSwKCgkJZW5oYW5jZWFibGU6IGZ1bmN0aW9uKCBlbGVtZW50cyApIHsKCQkJcmV0dXJuIHRoaXMuaGF2ZVBhcmVudHMoIGVsZW1lbnRzLCAiZW5oYW5jZSIgKTsKCQl9LAoKCQloaWphY2thYmxlOiBmdW5jdGlvbiggZWxlbWVudHMgKSB7CgkJCXJldHVybiB0aGlzLmhhdmVQYXJlbnRzKCBlbGVtZW50cywgImFqYXgiICk7CgkJfSwKCgkJaGF2ZVBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtZW50cywgYXR0ciApIHsKCQkJaWYgKCAhJC5tb2JpbGUuaWdub3JlQ29udGVudEVuYWJsZWQgKSB7CgkJCQlyZXR1cm4gZWxlbWVudHM7CgkJCX0KCgkJCXZhciBjb3VudCA9IGVsZW1lbnRzLmxlbmd0aCwKCQkJCSRuZXdTZXQgPSAkKCksCgkJCQllLCAkZWxlbWVudCwgZXhjbHVkZWQsCgkJCQlpLCBjOwoKCQkJZm9yICggaSA9IDA7IGkgPCBjb3VudDsgaSsrICkgewoJCQkJJGVsZW1lbnQgPSBlbGVtZW50cy5lcSggaSApOwoJCQkJZXhjbHVkZWQgPSBmYWxzZTsKCQkJCWUgPSBlbGVtZW50c1sgaSBdOwoKCQkJCXdoaWxlICggZSApIHsKCQkJCQljID0gZS5nZXRBdHRyaWJ1dGUgPyBlLmdldEF0dHJpYnV0ZSggImRhdGEtIiArICQubW9iaWxlLm5zICsgYXR0ciApIDogIiI7CgoJCQkJCWlmICggYyA9PT0gImZhbHNlIiApIHsKCQkJCQkJZXhjbHVkZWQgPSB0cnVlOwoJCQkJCQlicmVhazsKCQkJCQl9CgoJCQkJCWUgPSBlLnBhcmVudE5vZGU7CgkJCQl9CgoJCQkJaWYgKCAhZXhjbHVkZWQgKSB7CgkJCQkJJG5ld1NldCA9ICRuZXdTZXQuYWRkKCAkZWxlbWVudCApOwoJCQkJfQoJCQl9CgoJCQlyZXR1cm4gJG5ld1NldDsKCQl9LAoKCQlnZXRTY3JlZW5IZWlnaHQ6IGZ1bmN0aW9uKCkgewoJCQkvLyBOYXRpdmUgaW5uZXJIZWlnaHQgcmV0dXJucyBtb3JlIGFjY3VyYXRlIHZhbHVlIGZvciB0aGlzIGFjcm9zcyBwbGF0Zm9ybXMsCgkJCS8vIGpRdWVyeSB2ZXJzaW9uIGlzIGhlcmUgYXMgYSBub3JtYWxpemVkIGZhbGxiYWNrIGZvciBwbGF0Zm9ybXMgbGlrZSBTeW1iaWFuCgkJCXJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgJC5tb2JpbGUud2luZG93LmhlaWdodCgpOwoJCX0sCgoJCS8vc2ltcGx5IHNldCB0aGUgYWN0aXZlIHBhZ2UncyBtaW5pbXVtIGhlaWdodCB0byBzY3JlZW4gaGVpZ2h0LCBkZXBlbmRpbmcgb24gb3JpZW50YXRpb24KCQlyZXNldEFjdGl2ZVBhZ2VIZWlnaHQ6IGZ1bmN0aW9uKCBoZWlnaHQgKSB7CgkJCXZhciBwYWdlID0gJCggIi4iICsgJC5tb2JpbGUuYWN0aXZlUGFnZUNsYXNzICksCgkJCQlwYWdlSGVpZ2h0ID0gcGFnZS5oZWlnaHQoKSwKCQkJCXBhZ2VPdXRlckhlaWdodCA9IHBhZ2Uub3V0ZXJIZWlnaHQoIHRydWUgKTsKCgkJCWhlaWdodCA9ICggdHlwZW9mIGhlaWdodCA9PT0gIm51bWJlciIgKSA/IGhlaWdodCA6ICQubW9iaWxlLmdldFNjcmVlbkhlaWdodCgpOwoKCQkJcGFnZS5jc3MoICJtaW4taGVpZ2h0IiwgaGVpZ2h0IC0gKCBwYWdlT3V0ZXJIZWlnaHQgLSBwYWdlSGVpZ2h0ICkgKTsKCQl9LAoKCQlsb2FkaW5nOiBmdW5jdGlvbigpIHsKCQkJLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCB0byB0aGlzIGZ1bmN0aW9uLCBpbnN0YW50aWF0ZSBhIGxvYWRlciB3aWRnZXQKCQkJdmFyIGxvYWRlciA9IHRoaXMubG9hZGluZy5fd2lkZ2V0IHx8ICQoICQubW9iaWxlLmxvYWRlci5wcm90b3R5cGUuZGVmYXVsdEh0bWwgKS5sb2FkZXIoKSwKCgkJCQkvLyBDYWxsIHRoZSBhcHByb3ByaWF0ZSBtZXRob2Qgb24gdGhlIGxvYWRlcgoJCQkJcmV0dXJuVmFsdWUgPSBsb2FkZXIubG9hZGVyLmFwcGx5KCBsb2FkZXIsIGFyZ3VtZW50cyApOwoKCQkJLy8gTWFrZSBzdXJlIHRoZSBsb2FkZXIgaXMgcmV0YWluZWQgZm9yIGZ1dHVyZSBjYWxscyB0byB0aGlzIGZ1bmN0aW9uLgoJCQl0aGlzLmxvYWRpbmcuX3dpZGdldCA9IGxvYWRlcjsKCgkJCXJldHVybiByZXR1cm5WYWx1ZTsKCQl9Cgl9KTsKCgkkLmFkZERlcGVuZGVudHMgPSBmdW5jdGlvbiggZWxlbSwgbmV3RGVwZW5kZW50cyApIHsKCQl2YXIgJGVsZW0gPSAkKCBlbGVtICksCgkJCWRlcGVuZGVudHMgPSAkZWxlbS5qcW1EYXRhKCAiZGVwZW5kZW50cyIgKSB8fCAkKCk7CgoJCSRlbGVtLmpxbURhdGEoICJkZXBlbmRlbnRzIiwgJCggZGVwZW5kZW50cyApLmFkZCggbmV3RGVwZW5kZW50cyApICk7Cgl9OwoKCS8vIHBsdWdpbnMKCSQuZm4uZXh0ZW5kKHsKCQlyZW1vdmVXaXRoRGVwZW5kZW50czogZnVuY3Rpb24oKSB7CgkJCSQucmVtb3ZlV2l0aERlcGVuZGVudHMoIHRoaXMgKTsKCQl9LAoKCQkvLyBFbmhhbmNlIGNoaWxkIGVsZW1lbnRzCgkJZW5oYW5jZVdpdGhpbjogZnVuY3Rpb24oKSB7CgkJCXZhciBpbmRleCwKCQkJCXdpZGdldEVsZW1lbnRzID0ge30sCgkJCQlrZWVwTmF0aXZlID0gJC5tb2JpbGUucGFnZS5wcm90b3R5cGUua2VlcE5hdGl2ZVNlbGVjdG9yKCksCgkJCQl0aGF0ID0gdGhpczsKCgkJCS8vIEFkZCBubyBqcyBjbGFzcyB0byBlbGVtZW50cwoJCQlpZiAoICQubW9iaWxlLm5vanMgKSB7CgkJCQkkLm1vYmlsZS5ub2pzKCB0aGlzICk7CgkJCX0KCgkJCS8vIEJpbmQgbGlua3MgZm9yIGFqYXggbmF2CgkJCWlmICggJC5tb2JpbGUubGlua3MgKSB7CgkJCQkkLm1vYmlsZS5saW5rcyggdGhpcyApOwoJCQl9CgoJCQkvLyBEZWdyYWRlIGlucHV0cyBmb3Igc3R5bGVpbmcKCQkJaWYgKCAkLm1vYmlsZS5kZWdyYWRlSW5wdXRzV2l0aGluICkgewoJCQkJJC5tb2JpbGUuZGVncmFkZUlucHV0c1dpdGhpbiggdGhpcyApOwoJCQl9CgoJCQkvLyBSdW4gYnV0dG9ubWFya3VwCgkJCWlmICggJC5mbi5idXR0b25NYXJrdXAgKSB7CgkJCQl0aGlzLmZpbmQoICQuZm4uYnV0dG9uTWFya3VwLmluaXRTZWxlY3RvciApLm5vdCgga2VlcE5hdGl2ZSApCgkJCQkuanFtRW5oYW5jZWFibGUoKS5idXR0b25NYXJrdXAoKTsKCQkJfQoKCQkJLy8gQWRkIGNsYXNzZXMgZm9yIGZpZWxkQ29udGFpbgoJCQlpZiAoICQuZm4uZmllbGRjb250YWluICkgewoJCQkJdGhpcy5maW5kKCAiOmpxbURhdGEocm9sZT0nZmllbGRjb250YWluJykiICkubm90KCBrZWVwTmF0aXZlICkKCQkJCS5qcW1FbmhhbmNlYWJsZSgpLmZpZWxkY29udGFpbigpOwoJCQl9CgoJCQkvLyBFbmhhbmNlIHdpZGdldHMKCQkJJC5lYWNoKCAkLm1vYmlsZS53aWRnZXRzLCBmdW5jdGlvbiggbmFtZSwgY29uc3RydWN0b3IgKSB7CgoJCQkJLy8gSWYgaW5pdFNlbGVjdG9yIG5vdCBmYWxzZSBmaW5kIGVsZW1lbnRzCgkJCQlpZiAoIGNvbnN0cnVjdG9yLmluaXRTZWxlY3RvciApIHsKCgkJCQkJLy8gRmlsdGVyIGVsZW1lbnRzIHRoYXQgc2hvdWxkIG5vdCBiZSBlbmhhbmNlZCBiYXNlZCBvbiBwYXJlbnRzCgkJCQkJdmFyIGVsZW1lbnRzID0gJC5tb2JpbGUuZW5oYW5jZWFibGUoIHRoYXQuZmluZCggY29uc3RydWN0b3IuaW5pdFNlbGVjdG9yICkgKTsKCgkJCQkJLy8gSWYgYW55IG1hdGNoaW5nIGVsZW1lbnRzIHJlbWFpbiBmaWx0ZXIgb25lcyB3aXRoIGtlZXBOYXRpdmVTZWxlY3RvcgoJCQkJCWlmICggZWxlbWVudHMubGVuZ3RoID4gMCApIHsKCgkJCQkJCS8vICQubW9iaWxlLnBhZ2UucHJvdG90eXBlLmtlZXBOYXRpdmVTZWxlY3RvciBpcyBkZXByZWNhdGVkIHRoaXMgaXMganVzdCBmb3IgYmFja2NvbXBhdAoJCQkJCQkvLyBTd2l0Y2ggdG8gJC5tb2JpbGUua2VlcE5hdGl2ZSBpbiAxLjUgd2hpY2ggaXMganVzdCBhIHZhbHVlIG5vdCBhIGZ1bmN0aW9uCgkJCQkJCWVsZW1lbnRzID0gZWxlbWVudHMubm90KCBrZWVwTmF0aXZlICk7CgkJCQkJfQoKCQkJCQkvLyBFbmhhbmNlIHdoYXRldmVyIGlzIGxlZnQKCQkJCQlpZiAoIGVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7CgkJCQkJCXdpZGdldEVsZW1lbnRzWyBjb25zdHJ1Y3Rvci5wcm90b3R5cGUud2lkZ2V0TmFtZSBdID0gZWxlbWVudHM7CgkJCQkJfQoJCQkJfQoJCQl9KTsKCgkJCWZvciAoIGluZGV4IGluIHdpZGdldEVsZW1lbnRzICkgewoJCQkJd2lkZ2V0RWxlbWVudHNbIGluZGV4IF1bIGluZGV4IF0oKTsKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgkJfSwKCgkJYWRkRGVwZW5kZW50czogZnVuY3Rpb24oIG5ld0RlcGVuZGVudHMgKSB7CgkJCSQuYWRkRGVwZW5kZW50cyggdGhpcywgbmV3RGVwZW5kZW50cyApOwoJCX0sCgoJCS8vIG5vdGUgdGhhdCB0aGlzIGhlbHBlciBkb2Vzbid0IGF0dGVtcHQgdG8gaGFuZGxlIHRoZSBjYWxsYmFjawoJCS8vIG9yIHNldHRpbmcgb2YgYW4gaHRtbCBlbGVtZW50J3MgdGV4dCwgaXRzIG9ubHkgcHVycG9zZSBpcwoJCS8vIHRvIHJldHVybiB0aGUgaHRtbCBlbmNvZGVkIHZlcnNpb24gb2YgdGhlIHRleHQgaW4gYWxsIGNhc2VzLiAodGh1cyB0aGUgbmFtZSkKCQlnZXRFbmNvZGVkVGV4dDogZnVuY3Rpb24oKSB7CgkJCXJldHVybiAkKCAiPGE+IiApLnRleHQoIHRoaXMudGV4dCgpICkuaHRtbCgpOwoJCX0sCgoJCS8vIGZsdWVudCBoZWxwZXIgZnVuY3Rpb24gZm9yIHRoZSBtb2JpbGUgbmFtZXNwYWNlZCBlcXVpdmFsZW50CgkJanFtRW5oYW5jZWFibGU6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gJC5tb2JpbGUuZW5oYW5jZWFibGUoIHRoaXMgKTsKCQl9LAoKCQlqcW1IaWphY2thYmxlOiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuICQubW9iaWxlLmhpamFja2FibGUoIHRoaXMgKTsKCQl9Cgl9KTsKCgkkLnJlbW92ZVdpdGhEZXBlbmRlbnRzID0gZnVuY3Rpb24oIG5hdGl2ZUVsZW1lbnQgKSB7CgkJdmFyIGVsZW1lbnQgPSAkKCBuYXRpdmVFbGVtZW50ICk7CgoJCSggZWxlbWVudC5qcW1EYXRhKCAiZGVwZW5kZW50cyIgKSB8fCAkKCkgKS5yZW1vdmUoKTsKCQllbGVtZW50LnJlbW92ZSgpOwoJfTsKCSQuYWRkRGVwZW5kZW50cyA9IGZ1bmN0aW9uKCBuYXRpdmVFbGVtZW50LCBuZXdEZXBlbmRlbnRzICkgewoJCXZhciBlbGVtZW50ID0gJCggbmF0aXZlRWxlbWVudCApLAoJCQlkZXBlbmRlbnRzID0gZWxlbWVudC5qcW1EYXRhKCAiZGVwZW5kZW50cyIgKSB8fCAkKCk7CgoJCWVsZW1lbnQuanFtRGF0YSggImRlcGVuZGVudHMiLCAkKCBkZXBlbmRlbnRzICkuYWRkKCBuZXdEZXBlbmRlbnRzICkgKTsKCX07CgoJJC5maW5kLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgc2V0ICkgewoJCXJldHVybiAkLmZpbmQoIGV4cHIsIG51bGwsIG51bGwsIHNldCApOwoJfTsKCgkkLmZpbmQubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIG5vZGUsIGV4cHIgKSB7CgkJcmV0dXJuICQuZmluZCggZXhwciwgbnVsbCwgbnVsbCwgWyBub2RlIF0gKS5sZW5ndGggPiAwOwoJfTsKCn0pKCBqUXVlcnksIHRoaXMgKTsKCgovKiEKICogalF1ZXJ5IFVJIFdpZGdldCBAVkVSU0lPTgogKiBodHRwOi8vanF1ZXJ5dWkuY29tCiAqCiAqIENvcHlyaWdodCAyMDEzIGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlCiAqCiAqIGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2pRdWVyeS53aWRnZXQvCiAqLwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCnZhciB1dWlkID0gMCwKCXNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLAoJX2NsZWFuRGF0YSA9ICQuY2xlYW5EYXRhOwokLmNsZWFuRGF0YSA9IGZ1bmN0aW9uKCBlbGVtcyApIHsKCWZvciAoIHZhciBpID0gMCwgZWxlbTsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkgewoJCXRyeSB7CgkJCSQoIGVsZW0gKS50cmlnZ2VySGFuZGxlciggInJlbW92ZSIgKTsKCQkvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC84MjM1CgkJfSBjYXRjaCggZSApIHt9Cgl9CglfY2xlYW5EYXRhKCBlbGVtcyApOwp9OwoKJC53aWRnZXQgPSBmdW5jdGlvbiggbmFtZSwgYmFzZSwgcHJvdG90eXBlICkgewoJdmFyIGZ1bGxOYW1lLCBleGlzdGluZ0NvbnN0cnVjdG9yLCBjb25zdHJ1Y3RvciwgYmFzZVByb3RvdHlwZSwKCQkvLyBwcm94aWVkUHJvdG90eXBlIGFsbG93cyB0aGUgcHJvdmlkZWQgcHJvdG90eXBlIHRvIHJlbWFpbiB1bm1vZGlmaWVkCgkJLy8gc28gdGhhdCBpdCBjYW4gYmUgdXNlZCBhcyBhIG1peGluIGZvciBtdWx0aXBsZSB3aWRnZXRzICgjODg3NikKCQlwcm94aWVkUHJvdG90eXBlID0ge30sCgkJbmFtZXNwYWNlID0gbmFtZS5zcGxpdCggIi4iIClbIDAgXTsKCgluYW1lID0gbmFtZS5zcGxpdCggIi4iIClbIDEgXTsKCWZ1bGxOYW1lID0gbmFtZXNwYWNlICsgIi0iICsgbmFtZTsKCglpZiAoICFwcm90b3R5cGUgKSB7CgkJcHJvdG90eXBlID0gYmFzZTsKCQliYXNlID0gJC5XaWRnZXQ7Cgl9CgoJLy8gY3JlYXRlIHNlbGVjdG9yIGZvciBwbHVnaW4KCSQuZXhwclsgIjoiIF1bIGZ1bGxOYW1lLnRvTG93ZXJDYXNlKCkgXSA9IGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiAhISQuZGF0YSggZWxlbSwgZnVsbE5hbWUgKTsKCX07CgoJJFsgbmFtZXNwYWNlIF0gPSAkWyBuYW1lc3BhY2UgXSB8fCB7fTsKCWV4aXN0aW5nQ29uc3RydWN0b3IgPSAkWyBuYW1lc3BhY2UgXVsgbmFtZSBdOwoJY29uc3RydWN0b3IgPSAkWyBuYW1lc3BhY2UgXVsgbmFtZSBdID0gZnVuY3Rpb24oIG9wdGlvbnMsIGVsZW1lbnQgKSB7CgkJLy8gYWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0ICJuZXciIGtleXdvcmQKCQlpZiAoICF0aGlzLl9jcmVhdGVXaWRnZXQgKSB7CgkJCXJldHVybiBuZXcgY29uc3RydWN0b3IoIG9wdGlvbnMsIGVsZW1lbnQgKTsKCQl9CgoJCS8vIGFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCBpbml0aWFsaXppbmcgZm9yIHNpbXBsZSBpbmhlcml0YW5jZQoJCS8vIG11c3QgdXNlICJuZXciIGtleXdvcmQgKHRoZSBjb2RlIGFib3ZlIGFsd2F5cyBwYXNzZXMgYXJncykKCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7CgkJCXRoaXMuX2NyZWF0ZVdpZGdldCggb3B0aW9ucywgZWxlbWVudCApOwoJCX0KCX07CgkvLyBleHRlbmQgd2l0aCB0aGUgZXhpc3RpbmcgY29uc3RydWN0b3IgdG8gY2Fycnkgb3ZlciBhbnkgc3RhdGljIHByb3BlcnRpZXMKCSQuZXh0ZW5kKCBjb25zdHJ1Y3RvciwgZXhpc3RpbmdDb25zdHJ1Y3RvciwgewoJCXZlcnNpb246IHByb3RvdHlwZS52ZXJzaW9uLAoJCS8vIGNvcHkgdGhlIG9iamVjdCB1c2VkIHRvIGNyZWF0ZSB0aGUgcHJvdG90eXBlIGluIGNhc2Ugd2UgbmVlZCB0bwoJCS8vIHJlZGVmaW5lIHRoZSB3aWRnZXQgbGF0ZXIKCQlfcHJvdG86ICQuZXh0ZW5kKCB7fSwgcHJvdG90eXBlICksCgkJLy8gdHJhY2sgd2lkZ2V0cyB0aGF0IGluaGVyaXQgZnJvbSB0aGlzIHdpZGdldCBpbiBjYXNlIHRoaXMgd2lkZ2V0IGlzCgkJLy8gcmVkZWZpbmVkIGFmdGVyIGEgd2lkZ2V0IGluaGVyaXRzIGZyb20gaXQKCQlfY2hpbGRDb25zdHJ1Y3RvcnM6IFtdCgl9KTsKCgliYXNlUHJvdG90eXBlID0gbmV3IGJhc2UoKTsKCS8vIHdlIG5lZWQgdG8gbWFrZSB0aGUgb3B0aW9ucyBoYXNoIGEgcHJvcGVydHkgZGlyZWN0bHkgb24gdGhlIG5ldyBpbnN0YW5jZQoJLy8gb3RoZXJ3aXNlIHdlJ2xsIG1vZGlmeSB0aGUgb3B0aW9ucyBoYXNoIG9uIHRoZSBwcm90b3R5cGUgdGhhdCB3ZSdyZQoJLy8gaW5oZXJpdGluZyBmcm9tCgliYXNlUHJvdG90eXBlLm9wdGlvbnMgPSAkLndpZGdldC5leHRlbmQoIHt9LCBiYXNlUHJvdG90eXBlLm9wdGlvbnMgKTsKCSQuZWFjaCggcHJvdG90eXBlLCBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7CgkJaWYgKCAhJC5pc0Z1bmN0aW9uKCB2YWx1ZSApICkgewoJCQlwcm94aWVkUHJvdG90eXBlWyBwcm9wIF0gPSB2YWx1ZTsKCQkJcmV0dXJuOwoJCX0KCQlwcm94aWVkUHJvdG90eXBlWyBwcm9wIF0gPSAoZnVuY3Rpb24oKSB7CgkJCXZhciBfc3VwZXIgPSBmdW5jdGlvbigpIHsKCQkJCQlyZXR1cm4gYmFzZS5wcm90b3R5cGVbIHByb3AgXS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCQl9LAoJCQkJX3N1cGVyQXBwbHkgPSBmdW5jdGlvbiggYXJncyApIHsKCQkJCQlyZXR1cm4gYmFzZS5wcm90b3R5cGVbIHByb3AgXS5hcHBseSggdGhpcywgYXJncyApOwoJCQkJfTsKCQkJcmV0dXJuIGZ1bmN0aW9uKCkgewoJCQkJdmFyIF9fc3VwZXIgPSB0aGlzLl9zdXBlciwKCQkJCQlfX3N1cGVyQXBwbHkgPSB0aGlzLl9zdXBlckFwcGx5LAoJCQkJCXJldHVyblZhbHVlOwoKCQkJCXRoaXMuX3N1cGVyID0gX3N1cGVyOwoJCQkJdGhpcy5fc3VwZXJBcHBseSA9IF9zdXBlckFwcGx5OwoKCQkJCXJldHVyblZhbHVlID0gdmFsdWUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoKCQkJCXRoaXMuX3N1cGVyID0gX19zdXBlcjsKCQkJCXRoaXMuX3N1cGVyQXBwbHkgPSBfX3N1cGVyQXBwbHk7CgoJCQkJcmV0dXJuIHJldHVyblZhbHVlOwoJCQl9OwoJCX0pKCk7Cgl9KTsKCWNvbnN0cnVjdG9yLnByb3RvdHlwZSA9ICQud2lkZ2V0LmV4dGVuZCggYmFzZVByb3RvdHlwZSwgewoJCS8vIFRPRE86IHJlbW92ZSBzdXBwb3J0IGZvciB3aWRnZXRFdmVudFByZWZpeAoJCS8vIGFsd2F5cyB1c2UgdGhlIG5hbWUgKyBhIGNvbG9uIGFzIHRoZSBwcmVmaXgsIGUuZy4sIGRyYWdnYWJsZTpzdGFydAoJCS8vIGRvbid0IHByZWZpeCBmb3Igd2lkZ2V0cyB0aGF0IGFyZW4ndCBET00tYmFzZWQKCQl3aWRnZXRFdmVudFByZWZpeDogZXhpc3RpbmdDb25zdHJ1Y3RvciA/IChiYXNlUHJvdG90eXBlLndpZGdldEV2ZW50UHJlZml4IHx8IG5hbWUpIDogbmFtZQoJfSwgcHJveGllZFByb3RvdHlwZSwgewoJCWNvbnN0cnVjdG9yOiBjb25zdHJ1Y3RvciwKCQluYW1lc3BhY2U6IG5hbWVzcGFjZSwKCQl3aWRnZXROYW1lOiBuYW1lLAoJCXdpZGdldEZ1bGxOYW1lOiBmdWxsTmFtZQoJfSk7CgoJLy8gSWYgdGhpcyB3aWRnZXQgaXMgYmVpbmcgcmVkZWZpbmVkIHRoZW4gd2UgbmVlZCB0byBmaW5kIGFsbCB3aWRnZXRzIHRoYXQKCS8vIGFyZSBpbmhlcml0aW5nIGZyb20gaXQgYW5kIHJlZGVmaW5lIGFsbCBvZiB0aGVtIHNvIHRoYXQgdGhleSBpbmhlcml0IGZyb20KCS8vIHRoZSBuZXcgdmVyc2lvbiBvZiB0aGlzIHdpZGdldC4gV2UncmUgZXNzZW50aWFsbHkgdHJ5aW5nIHRvIHJlcGxhY2Ugb25lCgkvLyBsZXZlbCBpbiB0aGUgcHJvdG90eXBlIGNoYWluLgoJaWYgKCBleGlzdGluZ0NvbnN0cnVjdG9yICkgewoJCSQuZWFjaCggZXhpc3RpbmdDb25zdHJ1Y3Rvci5fY2hpbGRDb25zdHJ1Y3RvcnMsIGZ1bmN0aW9uKCBpLCBjaGlsZCApIHsKCQkJdmFyIGNoaWxkUHJvdG90eXBlID0gY2hpbGQucHJvdG90eXBlOwoKCQkJLy8gcmVkZWZpbmUgdGhlIGNoaWxkIHdpZGdldCB1c2luZyB0aGUgc2FtZSBwcm90b3R5cGUgdGhhdCB3YXMKCQkJLy8gb3JpZ2luYWxseSB1c2VkLCBidXQgaW5oZXJpdCBmcm9tIHRoZSBuZXcgdmVyc2lvbiBvZiB0aGUgYmFzZQoJCQkkLndpZGdldCggY2hpbGRQcm90b3R5cGUubmFtZXNwYWNlICsgIi4iICsgY2hpbGRQcm90b3R5cGUud2lkZ2V0TmFtZSwgY29uc3RydWN0b3IsIGNoaWxkLl9wcm90byApOwoJCX0pOwoJCS8vIHJlbW92ZSB0aGUgbGlzdCBvZiBleGlzdGluZyBjaGlsZCBjb25zdHJ1Y3RvcnMgZnJvbSB0aGUgb2xkIGNvbnN0cnVjdG9yCgkJLy8gc28gdGhlIG9sZCBjaGlsZCBjb25zdHJ1Y3RvcnMgY2FuIGJlIGdhcmJhZ2UgY29sbGVjdGVkCgkJZGVsZXRlIGV4aXN0aW5nQ29uc3RydWN0b3IuX2NoaWxkQ29uc3RydWN0b3JzOwoJfSBlbHNlIHsKCQliYXNlLl9jaGlsZENvbnN0cnVjdG9ycy5wdXNoKCBjb25zdHJ1Y3RvciApOwoJfQoKCSQud2lkZ2V0LmJyaWRnZSggbmFtZSwgY29uc3RydWN0b3IgKTsKCglyZXR1cm4gY29uc3RydWN0b3I7Cn07CgokLndpZGdldC5leHRlbmQgPSBmdW5jdGlvbiggdGFyZ2V0ICkgewoJdmFyIGlucHV0ID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICksCgkJaW5wdXRJbmRleCA9IDAsCgkJaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsCgkJa2V5LAoJCXZhbHVlOwoJZm9yICggOyBpbnB1dEluZGV4IDwgaW5wdXRMZW5ndGg7IGlucHV0SW5kZXgrKyApIHsKCQlmb3IgKCBrZXkgaW4gaW5wdXRbIGlucHV0SW5kZXggXSApIHsKCQkJdmFsdWUgPSBpbnB1dFsgaW5wdXRJbmRleCBdWyBrZXkgXTsKCQkJaWYgKCBpbnB1dFsgaW5wdXRJbmRleCBdLmhhc093blByb3BlcnR5KCBrZXkgKSAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewoJCQkJLy8gQ2xvbmUgb2JqZWN0cwoJCQkJaWYgKCAkLmlzUGxhaW5PYmplY3QoIHZhbHVlICkgKSB7CgkJCQkJdGFyZ2V0WyBrZXkgXSA9ICQuaXNQbGFpbk9iamVjdCggdGFyZ2V0WyBrZXkgXSApID8KCQkJCQkJJC53aWRnZXQuZXh0ZW5kKCB7fSwgdGFyZ2V0WyBrZXkgXSwgdmFsdWUgKSA6CgkJCQkJCS8vIERvbid0IGV4dGVuZCBzdHJpbmdzLCBhcnJheXMsIGV0Yy4gd2l0aCBvYmplY3RzCgkJCQkJCSQud2lkZ2V0LmV4dGVuZCgge30sIHZhbHVlICk7CgkJCQkvLyBDb3B5IGV2ZXJ5dGhpbmcgZWxzZSBieSByZWZlcmVuY2UKCQkJCX0gZWxzZSB7CgkJCQkJdGFyZ2V0WyBrZXkgXSA9IHZhbHVlOwoJCQkJfQoJCQl9CgkJfQoJfQoJcmV0dXJuIHRhcmdldDsKfTsKCiQud2lkZ2V0LmJyaWRnZSA9IGZ1bmN0aW9uKCBuYW1lLCBvYmplY3QgKSB7Cgl2YXIgZnVsbE5hbWUgPSBvYmplY3QucHJvdG90eXBlLndpZGdldEZ1bGxOYW1lIHx8IG5hbWU7CgkkLmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQl2YXIgaXNNZXRob2RDYWxsID0gdHlwZW9mIG9wdGlvbnMgPT09ICJzdHJpbmciLAoJCQlhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICksCgkJCXJldHVyblZhbHVlID0gdGhpczsKCgkJLy8gYWxsb3cgbXVsdGlwbGUgaGFzaGVzIHRvIGJlIHBhc3NlZCBvbiBpbml0CgkJb3B0aW9ucyA9ICFpc01ldGhvZENhbGwgJiYgYXJncy5sZW5ndGggPwoJCQkkLndpZGdldC5leHRlbmQuYXBwbHkoIG51bGwsIFsgb3B0aW9ucyBdLmNvbmNhdChhcmdzKSApIDoKCQkJb3B0aW9uczsKCgkJaWYgKCBpc01ldGhvZENhbGwgKSB7CgkJCXRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciBtZXRob2RWYWx1ZSwKCQkJCQlpbnN0YW5jZSA9ICQuZGF0YSggdGhpcywgZnVsbE5hbWUgKTsKCQkJCWlmICggb3B0aW9ucyA9PT0gImluc3RhbmNlIiApIHsKCQkJCQlyZXR1cm5WYWx1ZSA9IGluc3RhbmNlOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJCWlmICggIWluc3RhbmNlICkgewoJCQkJCXJldHVybiAkLmVycm9yKCAiY2Fubm90IGNhbGwgbWV0aG9kcyBvbiAiICsgbmFtZSArICIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb247ICIgKwoJCQkJCQkiYXR0ZW1wdGVkIHRvIGNhbGwgbWV0aG9kICciICsgb3B0aW9ucyArICInIiApOwoJCQkJfQoJCQkJaWYgKCAhJC5pc0Z1bmN0aW9uKCBpbnN0YW5jZVtvcHRpb25zXSApIHx8IG9wdGlvbnMuY2hhckF0KCAwICkgPT09ICJfIiApIHsKCQkJCQlyZXR1cm4gJC5lcnJvciggIm5vIHN1Y2ggbWV0aG9kICciICsgb3B0aW9ucyArICInIGZvciAiICsgbmFtZSArICIgd2lkZ2V0IGluc3RhbmNlIiApOwoJCQkJfQoJCQkJbWV0aG9kVmFsdWUgPSBpbnN0YW5jZVsgb3B0aW9ucyBdLmFwcGx5KCBpbnN0YW5jZSwgYXJncyApOwoJCQkJaWYgKCBtZXRob2RWYWx1ZSAhPT0gaW5zdGFuY2UgJiYgbWV0aG9kVmFsdWUgIT09IHVuZGVmaW5lZCApIHsKCQkJCQlyZXR1cm5WYWx1ZSA9IG1ldGhvZFZhbHVlICYmIG1ldGhvZFZhbHVlLmpxdWVyeSA/CgkJCQkJCXJldHVyblZhbHVlLnB1c2hTdGFjayggbWV0aG9kVmFsdWUuZ2V0KCkgKSA6CgkJCQkJCW1ldGhvZFZhbHVlOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfSk7CgkJfSBlbHNlIHsKCQkJdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdmFyIGluc3RhbmNlID0gJC5kYXRhKCB0aGlzLCBmdWxsTmFtZSApOwoJCQkJaWYgKCBpbnN0YW5jZSApIHsKCQkJCQlpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgfHwge30gKS5faW5pdCgpOwoJCQkJfSBlbHNlIHsKCQkJCQkkLmRhdGEoIHRoaXMsIGZ1bGxOYW1lLCBuZXcgb2JqZWN0KCBvcHRpb25zLCB0aGlzICkgKTsKCQkJCX0KCQkJfSk7CgkJfQoKCQlyZXR1cm4gcmV0dXJuVmFsdWU7Cgl9Owp9OwoKJC5XaWRnZXQgPSBmdW5jdGlvbiggLyogb3B0aW9ucywgZWxlbWVudCAqLyApIHt9OwokLldpZGdldC5fY2hpbGRDb25zdHJ1Y3RvcnMgPSBbXTsKCiQuV2lkZ2V0LnByb3RvdHlwZSA9IHsKCXdpZGdldE5hbWU6ICJ3aWRnZXQiLAoJd2lkZ2V0RXZlbnRQcmVmaXg6ICIiLAoJZGVmYXVsdEVsZW1lbnQ6ICI8ZGl2PiIsCglvcHRpb25zOiB7CgkJZGlzYWJsZWQ6IGZhbHNlLAoKCQkvLyBjYWxsYmFja3MKCQljcmVhdGU6IG51bGwKCX0sCglfY3JlYXRlV2lkZ2V0OiBmdW5jdGlvbiggb3B0aW9ucywgZWxlbWVudCApIHsKCQllbGVtZW50ID0gJCggZWxlbWVudCB8fCB0aGlzLmRlZmF1bHRFbGVtZW50IHx8IHRoaXMgKVsgMCBdOwoJCXRoaXMuZWxlbWVudCA9ICQoIGVsZW1lbnQgKTsKCQl0aGlzLnV1aWQgPSB1dWlkKys7CgkJdGhpcy5ldmVudE5hbWVzcGFjZSA9ICIuIiArIHRoaXMud2lkZ2V0TmFtZSArIHRoaXMudXVpZDsKCQl0aGlzLm9wdGlvbnMgPSAkLndpZGdldC5leHRlbmQoIHt9LAoJCQl0aGlzLm9wdGlvbnMsCgkJCXRoaXMuX2dldENyZWF0ZU9wdGlvbnMoKSwKCQkJb3B0aW9ucyApOwoKCQl0aGlzLmJpbmRpbmdzID0gJCgpOwoJCXRoaXMuaG92ZXJhYmxlID0gJCgpOwoJCXRoaXMuZm9jdXNhYmxlID0gJCgpOwoKCQlpZiAoIGVsZW1lbnQgIT09IHRoaXMgKSB7CgkJCSQuZGF0YSggZWxlbWVudCwgdGhpcy53aWRnZXRGdWxsTmFtZSwgdGhpcyApOwoJCQl0aGlzLl9vbiggdHJ1ZSwgdGhpcy5lbGVtZW50LCB7CgkJCQlyZW1vdmU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQlpZiAoIGV2ZW50LnRhcmdldCA9PT0gZWxlbWVudCApIHsKCQkJCQkJdGhpcy5kZXN0cm95KCk7CgkJCQkJfQoJCQkJfQoJCQl9KTsKCQkJdGhpcy5kb2N1bWVudCA9ICQoIGVsZW1lbnQuc3R5bGUgPwoJCQkJLy8gZWxlbWVudCB3aXRoaW4gdGhlIGRvY3VtZW50CgkJCQllbGVtZW50Lm93bmVyRG9jdW1lbnQgOgoJCQkJLy8gZWxlbWVudCBpcyB3aW5kb3cgb3IgZG9jdW1lbnQKCQkJCWVsZW1lbnQuZG9jdW1lbnQgfHwgZWxlbWVudCApOwoJCQl0aGlzLndpbmRvdyA9ICQoIHRoaXMuZG9jdW1lbnRbMF0uZGVmYXVsdFZpZXcgfHwgdGhpcy5kb2N1bWVudFswXS5wYXJlbnRXaW5kb3cgKTsKCQl9CgoJCXRoaXMuX2NyZWF0ZSgpOwoJCXRoaXMuX3RyaWdnZXIoICJjcmVhdGUiLCBudWxsLCB0aGlzLl9nZXRDcmVhdGVFdmVudERhdGEoKSApOwoJCXRoaXMuX2luaXQoKTsKCX0sCglfZ2V0Q3JlYXRlT3B0aW9uczogJC5ub29wLAoJX2dldENyZWF0ZUV2ZW50RGF0YTogJC5ub29wLAoJX2NyZWF0ZTogJC5ub29wLAoJX2luaXQ6ICQubm9vcCwKCglkZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLl9kZXN0cm95KCk7CgkJLy8gd2UgY2FuIHByb2JhYmx5IHJlbW92ZSB0aGUgdW5iaW5kIGNhbGxzIGluIDIuMAoJCS8vIGFsbCBldmVudCBiaW5kaW5ncyBzaG91bGQgZ28gdGhyb3VnaCB0aGlzLl9vbigpCgkJdGhpcy5lbGVtZW50CgkJCS51bmJpbmQoIHRoaXMuZXZlbnROYW1lc3BhY2UgKQoJCQkucmVtb3ZlRGF0YSggdGhpcy53aWRnZXRGdWxsTmFtZSApCgkJCS8vIHN1cHBvcnQ6IGpxdWVyeSA8MS42LjMKCQkJLy8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvOTQxMwoJCQkucmVtb3ZlRGF0YSggJC5jYW1lbENhc2UoIHRoaXMud2lkZ2V0RnVsbE5hbWUgKSApOwoJCXRoaXMud2lkZ2V0KCkKCQkJLnVuYmluZCggdGhpcy5ldmVudE5hbWVzcGFjZSApCgkJCS5yZW1vdmVBdHRyKCAiYXJpYS1kaXNhYmxlZCIgKQoJCQkucmVtb3ZlQ2xhc3MoCgkJCQl0aGlzLndpZGdldEZ1bGxOYW1lICsgIi1kaXNhYmxlZCAiICsKCQkJCSJ1aS1zdGF0ZS1kaXNhYmxlZCIgKTsKCgkJLy8gY2xlYW4gdXAgZXZlbnRzIGFuZCBzdGF0ZXMKCQl0aGlzLmJpbmRpbmdzLnVuYmluZCggdGhpcy5ldmVudE5hbWVzcGFjZSApOwoJCXRoaXMuaG92ZXJhYmxlLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtaG92ZXIiICk7CgkJdGhpcy5mb2N1c2FibGUucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1mb2N1cyIgKTsKCX0sCglfZGVzdHJveTogJC5ub29wLAoKCXdpZGdldDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZWxlbWVudDsKCX0sCgoJb3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHsKCQl2YXIgb3B0aW9ucyA9IGtleSwKCQkJcGFydHMsCgkJCWN1ck9wdGlvbiwKCQkJaTsKCgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAwICkgewoJCQkvLyBkb24ndCByZXR1cm4gYSByZWZlcmVuY2UgdG8gdGhlIGludGVybmFsIGhhc2gKCQkJcmV0dXJuICQud2lkZ2V0LmV4dGVuZCgge30sIHRoaXMub3B0aW9ucyApOwoJCX0KCgkJaWYgKCB0eXBlb2Yga2V5ID09PSAic3RyaW5nIiApIHsKCQkJLy8gaGFuZGxlIG5lc3RlZCBrZXlzLCBlLmcuLCAiZm9vLmJhciIgPT4geyBmb286IHsgYmFyOiBfX18gfSB9CgkJCW9wdGlvbnMgPSB7fTsKCQkJcGFydHMgPSBrZXkuc3BsaXQoICIuIiApOwoJCQlrZXkgPSBwYXJ0cy5zaGlmdCgpOwoJCQlpZiAoIHBhcnRzLmxlbmd0aCApIHsKCQkJCWN1ck9wdGlvbiA9IG9wdGlvbnNbIGtleSBdID0gJC53aWRnZXQuZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zWyBrZXkgXSApOwoJCQkJZm9yICggaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpKysgKSB7CgkJCQkJY3VyT3B0aW9uWyBwYXJ0c1sgaSBdIF0gPSBjdXJPcHRpb25bIHBhcnRzWyBpIF0gXSB8fCB7fTsKCQkJCQljdXJPcHRpb24gPSBjdXJPcHRpb25bIHBhcnRzWyBpIF0gXTsKCQkJCX0KCQkJCWtleSA9IHBhcnRzLnBvcCgpOwoJCQkJaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCXJldHVybiBjdXJPcHRpb25bIGtleSBdID09PSB1bmRlZmluZWQgPyBudWxsIDogY3VyT3B0aW9uWyBrZXkgXTsKCQkJCX0KCQkJCWN1ck9wdGlvblsga2V5IF0gPSB2YWx1ZTsKCQkJfSBlbHNlIHsKCQkJCWlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHsKCQkJCQlyZXR1cm4gdGhpcy5vcHRpb25zWyBrZXkgXSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHRoaXMub3B0aW9uc1sga2V5IF07CgkJCQl9CgkJCQlvcHRpb25zWyBrZXkgXSA9IHZhbHVlOwoJCQl9CgkJfQoKCQl0aGlzLl9zZXRPcHRpb25zKCBvcHRpb25zICk7CgoJCXJldHVybiB0aGlzOwoJfSwKCV9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQl2YXIga2V5OwoKCQlmb3IgKCBrZXkgaW4gb3B0aW9ucyApIHsKCQkJdGhpcy5fc2V0T3B0aW9uKCBrZXksIG9wdGlvbnNbIGtleSBdICk7CgkJfQoKCQlyZXR1cm4gdGhpczsKCX0sCglfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHsKCQl0aGlzLm9wdGlvbnNbIGtleSBdID0gdmFsdWU7CgoJCWlmICgga2V5ID09PSAiZGlzYWJsZWQiICkgewoJCQl0aGlzLndpZGdldCgpCgkJCQkudG9nZ2xlQ2xhc3MoIHRoaXMud2lkZ2V0RnVsbE5hbWUgKyAiLWRpc2FibGVkIiwgISF2YWx1ZSApOwoJCQl0aGlzLmhvdmVyYWJsZS5yZW1vdmVDbGFzcyggInVpLXN0YXRlLWhvdmVyIiApOwoJCQl0aGlzLmZvY3VzYWJsZS5yZW1vdmVDbGFzcyggInVpLXN0YXRlLWZvY3VzIiApOwoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWVuYWJsZTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuX3NldE9wdGlvbnMoeyBkaXNhYmxlZDogZmFsc2UgfSk7Cgl9LAoJZGlzYWJsZTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuX3NldE9wdGlvbnMoeyBkaXNhYmxlZDogdHJ1ZSB9KTsKCX0sCgoJX29uOiBmdW5jdGlvbiggc3VwcHJlc3NEaXNhYmxlZENoZWNrLCBlbGVtZW50LCBoYW5kbGVycyApIHsKCQl2YXIgZGVsZWdhdGVFbGVtZW50LAoJCQlpbnN0YW5jZSA9IHRoaXM7CgoJCS8vIG5vIHN1cHByZXNzRGlzYWJsZWRDaGVjayBmbGFnLCBzaHVmZmxlIGFyZ3VtZW50cwoJCWlmICggdHlwZW9mIHN1cHByZXNzRGlzYWJsZWRDaGVjayAhPT0gImJvb2xlYW4iICkgewoJCQloYW5kbGVycyA9IGVsZW1lbnQ7CgkJCWVsZW1lbnQgPSBzdXBwcmVzc0Rpc2FibGVkQ2hlY2s7CgkJCXN1cHByZXNzRGlzYWJsZWRDaGVjayA9IGZhbHNlOwoJCX0KCgkJLy8gbm8gZWxlbWVudCBhcmd1bWVudCwgc2h1ZmZsZSBhbmQgdXNlIHRoaXMuZWxlbWVudAoJCWlmICggIWhhbmRsZXJzICkgewoJCQloYW5kbGVycyA9IGVsZW1lbnQ7CgkJCWVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7CgkJCWRlbGVnYXRlRWxlbWVudCA9IHRoaXMud2lkZ2V0KCk7CgkJfSBlbHNlIHsKCQkJLy8gYWNjZXB0IHNlbGVjdG9ycywgRE9NIGVsZW1lbnRzCgkJCWVsZW1lbnQgPSBkZWxlZ2F0ZUVsZW1lbnQgPSAkKCBlbGVtZW50ICk7CgkJCXRoaXMuYmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLmFkZCggZWxlbWVudCApOwoJCX0KCgkJJC5lYWNoKCBoYW5kbGVycywgZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVyICkgewoJCQlmdW5jdGlvbiBoYW5kbGVyUHJveHkoKSB7CgkJCQkvLyBhbGxvdyB3aWRnZXRzIHRvIGN1c3RvbWl6ZSB0aGUgZGlzYWJsZWQgaGFuZGxpbmcKCQkJCS8vIC0gZGlzYWJsZWQgYXMgYW4gYXJyYXkgaW5zdGVhZCBvZiBib29sZWFuCgkJCQkvLyAtIGRpc2FibGVkIGNsYXNzIGFzIG1ldGhvZCBmb3IgZGlzYWJsaW5nIGluZGl2aWR1YWwgcGFydHMKCQkJCWlmICggIXN1cHByZXNzRGlzYWJsZWRDaGVjayAmJgoJCQkJCQkoIGluc3RhbmNlLm9wdGlvbnMuZGlzYWJsZWQgPT09IHRydWUgfHwKCQkJCQkJCSQoIHRoaXMgKS5oYXNDbGFzcyggInVpLXN0YXRlLWRpc2FibGVkIiApICkgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoJCQkJcmV0dXJuICggdHlwZW9mIGhhbmRsZXIgPT09ICJzdHJpbmciID8gaW5zdGFuY2VbIGhhbmRsZXIgXSA6IGhhbmRsZXIgKQoJCQkJCS5hcHBseSggaW5zdGFuY2UsIGFyZ3VtZW50cyApOwoJCQl9CgoJCQkvLyBjb3B5IHRoZSBndWlkIHNvIGRpcmVjdCB1bmJpbmRpbmcgd29ya3MKCQkJaWYgKCB0eXBlb2YgaGFuZGxlciAhPT0gInN0cmluZyIgKSB7CgkJCQloYW5kbGVyUHJveHkuZ3VpZCA9IGhhbmRsZXIuZ3VpZCA9CgkJCQkJaGFuZGxlci5ndWlkIHx8IGhhbmRsZXJQcm94eS5ndWlkIHx8ICQuZ3VpZCsrOwoJCQl9CgoJCQl2YXIgbWF0Y2ggPSBldmVudC5tYXRjaCggL14oXHcrKVxzKiguKikkLyApLAoJCQkJZXZlbnROYW1lID0gbWF0Y2hbMV0gKyBpbnN0YW5jZS5ldmVudE5hbWVzcGFjZSwKCQkJCXNlbGVjdG9yID0gbWF0Y2hbMl07CgkJCWlmICggc2VsZWN0b3IgKSB7CgkJCQlkZWxlZ2F0ZUVsZW1lbnQuZGVsZWdhdGUoIHNlbGVjdG9yLCBldmVudE5hbWUsIGhhbmRsZXJQcm94eSApOwoJCQl9IGVsc2UgewoJCQkJZWxlbWVudC5iaW5kKCBldmVudE5hbWUsIGhhbmRsZXJQcm94eSApOwoJCQl9CgkJfSk7Cgl9LAoKCV9vZmY6IGZ1bmN0aW9uKCBlbGVtZW50LCBldmVudE5hbWUgKSB7CgkJZXZlbnROYW1lID0gKGV2ZW50TmFtZSB8fCAiIikuc3BsaXQoICIgIiApLmpvaW4oIHRoaXMuZXZlbnROYW1lc3BhY2UgKyAiICIgKSArIHRoaXMuZXZlbnROYW1lc3BhY2U7CgkJZWxlbWVudC51bmJpbmQoIGV2ZW50TmFtZSApLnVuZGVsZWdhdGUoIGV2ZW50TmFtZSApOwoJfSwKCglfZGVsYXk6IGZ1bmN0aW9uKCBoYW5kbGVyLCBkZWxheSApIHsKCQlmdW5jdGlvbiBoYW5kbGVyUHJveHkoKSB7CgkJCXJldHVybiAoIHR5cGVvZiBoYW5kbGVyID09PSAic3RyaW5nIiA/IGluc3RhbmNlWyBoYW5kbGVyIF0gOiBoYW5kbGVyICkKCQkJCS5hcHBseSggaW5zdGFuY2UsIGFyZ3VtZW50cyApOwoJCX0KCQl2YXIgaW5zdGFuY2UgPSB0aGlzOwoJCXJldHVybiBzZXRUaW1lb3V0KCBoYW5kbGVyUHJveHksIGRlbGF5IHx8IDAgKTsKCX0sCgoJX2hvdmVyYWJsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJdGhpcy5ob3ZlcmFibGUgPSB0aGlzLmhvdmVyYWJsZS5hZGQoIGVsZW1lbnQgKTsKCQl0aGlzLl9vbiggZWxlbWVudCwgewoJCQltb3VzZWVudGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKTsKCQkJfSwKCQkJbW91c2VsZWF2ZTogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJJCggZXZlbnQuY3VycmVudFRhcmdldCApLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtaG92ZXIiICk7CgkJCX0KCQl9KTsKCX0sCgoJX2ZvY3VzYWJsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJdGhpcy5mb2N1c2FibGUgPSB0aGlzLmZvY3VzYWJsZS5hZGQoIGVsZW1lbnQgKTsKCQl0aGlzLl9vbiggZWxlbWVudCwgewoJCQlmb2N1c2luOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1mb2N1cyIgKTsKCQkJfSwKCQkJZm9jdXNvdXQ6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCSQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKS5yZW1vdmVDbGFzcyggInVpLXN0YXRlLWZvY3VzIiApOwoJCQl9CgkJfSk7Cgl9LAoKCV90cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZXZlbnQsIGRhdGEgKSB7CgkJdmFyIHByb3AsIG9yaWcsCgkJCWNhbGxiYWNrID0gdGhpcy5vcHRpb25zWyB0eXBlIF07CgoJCWRhdGEgPSBkYXRhIHx8IHt9OwoJCWV2ZW50ID0gJC5FdmVudCggZXZlbnQgKTsKCQlldmVudC50eXBlID0gKCB0eXBlID09PSB0aGlzLndpZGdldEV2ZW50UHJlZml4ID8KCQkJdHlwZSA6CgkJCXRoaXMud2lkZ2V0RXZlbnRQcmVmaXggKyB0eXBlICkudG9Mb3dlckNhc2UoKTsKCQkvLyB0aGUgb3JpZ2luYWwgZXZlbnQgbWF5IGNvbWUgZnJvbSBhbnkgZWxlbWVudAoJCS8vIHNvIHdlIG5lZWQgdG8gcmVzZXQgdGhlIHRhcmdldCBvbiB0aGUgbmV3IGV2ZW50CgkJZXZlbnQudGFyZ2V0ID0gdGhpcy5lbGVtZW50WyAwIF07CgoJCS8vIGNvcHkgb3JpZ2luYWwgZXZlbnQgcHJvcGVydGllcyBvdmVyIHRvIHRoZSBuZXcgZXZlbnQKCQlvcmlnID0gZXZlbnQub3JpZ2luYWxFdmVudDsKCQlpZiAoIG9yaWcgKSB7CgkJCWZvciAoIHByb3AgaW4gb3JpZyApIHsKCQkJCWlmICggISggcHJvcCBpbiBldmVudCApICkgewoJCQkJCWV2ZW50WyBwcm9wIF0gPSBvcmlnWyBwcm9wIF07CgkJCQl9CgkJCX0KCQl9CgoJCXRoaXMuZWxlbWVudC50cmlnZ2VyKCBldmVudCwgZGF0YSApOwoJCXJldHVybiAhKCAkLmlzRnVuY3Rpb24oIGNhbGxiYWNrICkgJiYKCQkJY2FsbGJhY2suYXBwbHkoIHRoaXMuZWxlbWVudFswXSwgWyBldmVudCBdLmNvbmNhdCggZGF0YSApICkgPT09IGZhbHNlIHx8CgkJCWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICk7Cgl9Cn07CgokLmVhY2goIHsgc2hvdzogImZhZGVJbiIsIGhpZGU6ICJmYWRlT3V0IiB9LCBmdW5jdGlvbiggbWV0aG9kLCBkZWZhdWx0RWZmZWN0ICkgewoJJC5XaWRnZXQucHJvdG90eXBlWyAiXyIgKyBtZXRob2QgXSA9IGZ1bmN0aW9uKCBlbGVtZW50LCBvcHRpb25zLCBjYWxsYmFjayApIHsKCQlpZiAoIHR5cGVvZiBvcHRpb25zID09PSAic3RyaW5nIiApIHsKCQkJb3B0aW9ucyA9IHsgZWZmZWN0OiBvcHRpb25zIH07CgkJfQoJCXZhciBoYXNPcHRpb25zLAoJCQllZmZlY3ROYW1lID0gIW9wdGlvbnMgPwoJCQkJbWV0aG9kIDoKCQkJCW9wdGlvbnMgPT09IHRydWUgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICJudW1iZXIiID8KCQkJCQlkZWZhdWx0RWZmZWN0IDoKCQkJCQlvcHRpb25zLmVmZmVjdCB8fCBkZWZhdWx0RWZmZWN0OwoJCW9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoJCWlmICggdHlwZW9mIG9wdGlvbnMgPT09ICJudW1iZXIiICkgewoJCQlvcHRpb25zID0geyBkdXJhdGlvbjogb3B0aW9ucyB9OwoJCX0KCQloYXNPcHRpb25zID0gISQuaXNFbXB0eU9iamVjdCggb3B0aW9ucyApOwoJCW9wdGlvbnMuY29tcGxldGUgPSBjYWxsYmFjazsKCQlpZiAoIG9wdGlvbnMuZGVsYXkgKSB7CgkJCWVsZW1lbnQuZGVsYXkoIG9wdGlvbnMuZGVsYXkgKTsKCQl9CgkJaWYgKCBoYXNPcHRpb25zICYmICQuZWZmZWN0cyAmJiAkLmVmZmVjdHMuZWZmZWN0WyBlZmZlY3ROYW1lIF0gKSB7CgkJCWVsZW1lbnRbIG1ldGhvZCBdKCBvcHRpb25zICk7CgkJfSBlbHNlIGlmICggZWZmZWN0TmFtZSAhPT0gbWV0aG9kICYmIGVsZW1lbnRbIGVmZmVjdE5hbWUgXSApIHsKCQkJZWxlbWVudFsgZWZmZWN0TmFtZSBdKCBvcHRpb25zLmR1cmF0aW9uLCBvcHRpb25zLmVhc2luZywgY2FsbGJhY2sgKTsKCQl9IGVsc2UgewoJCQllbGVtZW50LnF1ZXVlKGZ1bmN0aW9uKCBuZXh0ICkgewoJCQkJJCggdGhpcyApWyBtZXRob2QgXSgpOwoJCQkJaWYgKCBjYWxsYmFjayApIHsKCQkJCQljYWxsYmFjay5jYWxsKCBlbGVtZW50WyAwIF0gKTsKCQkJCX0KCQkJCW5leHQoKTsKCQkJfSk7CgkJfQoJfTsKfSk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCnZhciByY2FwaXRhbHMgPSAvW0EtWl0vZywKCXJlcGxhY2VGdW5jdGlvbiA9IGZ1bmN0aW9uKCBjICkgewoJCXJldHVybiAiLSIgKyBjLnRvTG93ZXJDYXNlKCk7Cgl9OwoKJC5leHRlbmQoICQuV2lkZ2V0LnByb3RvdHlwZSwgewoJX2dldENyZWF0ZU9wdGlvbnM6IGZ1bmN0aW9uKCkgewoJCXZhciBvcHRpb24sIHZhbHVlLAoJCQllbGVtID0gdGhpcy5lbGVtZW50WyAwIF0sCgkJCW9wdGlvbnMgPSB7fTsKCgkJLy8KCQlpZiAoICEkLm1vYmlsZS5nZXRBdHRyaWJ1dGUoIGVsZW0sICJkZWZhdWx0cyIgKSApIHsKCQkJZm9yICggb3B0aW9uIGluIHRoaXMub3B0aW9ucyApIHsKCQkJCXZhbHVlID0gJC5tb2JpbGUuZ2V0QXR0cmlidXRlKCBlbGVtLCBvcHRpb24ucmVwbGFjZSggcmNhcGl0YWxzLCByZXBsYWNlRnVuY3Rpb24gKSApOwoKCQkJCWlmICggdmFsdWUgIT0gbnVsbCApIHsKCQkJCQlvcHRpb25zWyBvcHRpb24gXSA9IHZhbHVlOwoJCQkJfQoJCQl9CgkJfQoKCQlyZXR1cm4gb3B0aW9uczsKCX0KfSk7CgovL1RPRE86IFJlbW92ZSBpbiAxLjUgZm9yIGJhY2tjb21wYXQgb25seQokLm1vYmlsZS53aWRnZXQgPSAkLldpZGdldDsKCn0pKCBqUXVlcnkgKTsKCgooZnVuY3Rpb24oICQgKSB7CgkvLyBUT0RPIG1vdmUgbG9hZGVyIGNsYXNzIGRvd24gaW50byB0aGUgd2lkZ2V0IHNldHRpbmdzCgl2YXIgbG9hZGVyQ2xhc3MgPSAidWktbG9hZGVyIiwgJGh0bWwgPSAkKCAiaHRtbCIgKTsKCgkkLndpZGdldCggIm1vYmlsZS5sb2FkZXIiLCB7CgkJLy8gTk9URSBpZiB0aGUgZ2xvYmFsIGNvbmZpZyBzZXR0aW5ncyBhcmUgZGVmaW5lZCB0aGV5IHdpbGwgb3ZlcnJpZGUgdGhlc2UKCQkvLyAgICAgIG9wdGlvbnMKCQlvcHRpb25zOiB7CgkJCS8vIHRoZSB0aGVtZSBmb3IgdGhlIGxvYWRpbmcgbWVzc2FnZQoJCQl0aGVtZTogImEiLAoKCQkJLy8gd2hldGhlciB0aGUgdGV4dCBpbiB0aGUgbG9hZGluZyBtZXNzYWdlIGlzIHNob3duCgkJCXRleHRWaXNpYmxlOiBmYWxzZSwKCgkJCS8vIGN1c3RvbSBodG1sIGZvciB0aGUgaW5uZXIgY29udGVudCBvZiB0aGUgbG9hZGluZyBtZXNzYWdlCgkJCWh0bWw6ICIiLAoKCQkJLy8gdGhlIHRleHQgdG8gYmUgZGlzcGxheWVkIHdoZW4gdGhlIHBvcHVwIGlzIHNob3duCgkJCXRleHQ6ICJsb2FkaW5nIgoJCX0sCgoJCWRlZmF1bHRIdG1sOiAiPGRpdiBjbGFzcz0nIiArIGxvYWRlckNsYXNzICsgIic+IiArCgkJCSI8c3BhbiBjbGFzcz0ndWktaWNvbi1sb2FkaW5nJz48L3NwYW4+IiArCgkJCSI8aDE+PC9oMT4iICsKCQkJIjwvZGl2PiIsCgoJCS8vIEZvciBub24tZml4ZWQgc3VwcG9ydGluIGJyb3dzZXJzLiBQb3NpdGlvbiBhdCB5IGNlbnRlciAoaWYgc2Nyb2xsVG9wIHN1cHBvcnRlZCksIGFib3ZlIHRoZSBhY3RpdmVCdG4gKGlmIGRlZmluZWQpLCBvciBqdXN0IDEwMHB4IGZyb20gdG9wCgkJZmFrZUZpeExvYWRlcjogZnVuY3Rpb24oKSB7CgkJCXZhciBhY3RpdmVCdG4gPSAkKCAiLiIgKyAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyApLmZpcnN0KCk7CgoJCQl0aGlzLmVsZW1lbnQKCQkJCS5jc3MoewoJCQkJCXRvcDogJC5zdXBwb3J0LnNjcm9sbFRvcCAmJiB0aGlzLndpbmRvdy5zY3JvbGxUb3AoKSArIHRoaXMud2luZG93LmhlaWdodCgpIC8gMiB8fAoJCQkJCQlhY3RpdmVCdG4ubGVuZ3RoICYmIGFjdGl2ZUJ0bi5vZmZzZXQoKS50b3AgfHwgMTAwCgkJCQl9KTsKCQl9LAoKCQkvLyBjaGVjayBwb3NpdGlvbiBvZiBsb2FkZXIgdG8gc2VlIGlmIGl0IGFwcGVhcnMgdG8gYmUgImZpeGVkIiB0byBjZW50ZXIKCQkvLyBpZiBub3QsIHVzZSBhYnMgcG9zaXRpb25pbmcKCQljaGVja0xvYWRlclBvc2l0aW9uOiBmdW5jdGlvbigpIHsKCQkJdmFyIG9mZnNldCA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKSwKCQkJCXNjcm9sbFRvcCA9IHRoaXMud2luZG93LnNjcm9sbFRvcCgpLAoJCQkJc2NyZWVuSGVpZ2h0ID0gJC5tb2JpbGUuZ2V0U2NyZWVuSGVpZ2h0KCk7CgoJCQlpZiAoIG9mZnNldC50b3AgPCBzY3JvbGxUb3AgfHwgKCBvZmZzZXQudG9wIC0gc2Nyb2xsVG9wICkgPiBzY3JlZW5IZWlnaHQgKSB7CgkJCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoICJ1aS1sb2FkZXItZmFrZWZpeCIgKTsKCQkJCXRoaXMuZmFrZUZpeExvYWRlcigpOwoJCQkJdGhpcy53aW5kb3cKCQkJCQkudW5iaW5kKCAic2Nyb2xsIiwgdGhpcy5jaGVja0xvYWRlclBvc2l0aW9uICkKCQkJCQkuYmluZCggInNjcm9sbCIsICQucHJveHkoIHRoaXMuZmFrZUZpeExvYWRlciwgdGhpcyApICk7CgkJCX0KCQl9LAoKCQlyZXNldEh0bWw6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLmVsZW1lbnQuaHRtbCggJCggdGhpcy5kZWZhdWx0SHRtbCApLmh0bWwoKSApOwoJCX0sCgoJCS8vIFR1cm4gb24vb2ZmIHBhZ2UgbG9hZGluZyBtZXNzYWdlLiBUaGVtZSBkb3VibGVzIGFzIGFuIG9iamVjdCBhcmd1bWVudAoJCS8vIHdpdGggdGhlIGZvbGxvd2luZyBzaGFwZTogeyB0aGVtZTogJycsIHRleHQ6ICcnLCBodG1sOiAnJywgdGV4dFZpc2libGU6ICcnIH0KCQkvLyBOT1RFIHRoYXQgdGhlICQubW9iaWxlLmxvYWRpbmcqIHNldHRpbmdzIGFuZCBwYXJhbXMgcGFzdCB0aGUgZmlyc3QgYXJlIGRlcHJlY2F0ZWQKCQkvLyBUT0RPIHN3ZWV0IGplc3VzIHdlIG5lZWQgdG8gYnJlYWsgc29tZSBvZiB0aGlzIG91dAoJCXNob3c6IGZ1bmN0aW9uKCB0aGVtZSwgbXNnVGV4dCwgdGV4dG9ubHkgKSB7CgkJCXZhciB0ZXh0VmlzaWJsZSwgbWVzc2FnZSwgbG9hZFNldHRpbmdzOwoKCQkJdGhpcy5yZXNldEh0bWwoKTsKCgkJCS8vIHVzZSB0aGUgcHJvdG90eXBlIG9wdGlvbnMgc28gdGhhdCBwZW9wbGUgY2FuIHNldCB0aGVtIGdsb2JhbGx5IGF0CgkJCS8vIG1vYmlsZSBpbml0LiBDb25zaXN0ZW5jeSwgaXQncyB3aGF0J3MgZm9yIGRpbm5lcgoJCQlpZiAoICQudHlwZSggdGhlbWUgKSA9PT0gIm9iamVjdCIgKSB7CgkJCQlsb2FkU2V0dGluZ3MgPSAkLmV4dGVuZCgge30sIHRoaXMub3B0aW9ucywgdGhlbWUgKTsKCgkJCQl0aGVtZSA9IGxvYWRTZXR0aW5ncy50aGVtZTsKCQkJfSBlbHNlIHsKCQkJCWxvYWRTZXR0aW5ncyA9IHRoaXMub3B0aW9uczsKCgkJCQkvLyBoZXJlIHdlIHByZWZlciB0aGUgdGhlbWUgdmFsdWUgcGFzc2VkIGFzIGEgc3RyaW5nIGFyZ3VtZW50LCB0aGVuCgkJCQkvLyB3ZSBwcmVmZXIgdGhlIGdsb2JhbCBvcHRpb24gYmVjYXVzZSB3ZSBjYW4ndCB1c2UgdW5kZWZpbmVkIGRlZmF1bHQKCQkJCS8vIHByb3RvdHlwZSBvcHRpb25zLCB0aGVuIHRoZSBwcm90b3R5cGUgb3B0aW9uCgkJCQl0aGVtZSA9IHRoZW1lIHx8IGxvYWRTZXR0aW5ncy50aGVtZTsKCQkJfQoKCQkJLy8gc2V0IHRoZSBtZXNzYWdlIHRleHQsIHByZWZlciB0aGUgcGFyYW0sIHRoZW4gdGhlIHNldHRpbmdzIG9iamVjdAoJCQkvLyB0aGVuIGxvYWRpbmcgbWVzc2FnZQoJCQltZXNzYWdlID0gbXNnVGV4dCB8fCAoIGxvYWRTZXR0aW5ncy50ZXh0ID09PSBmYWxzZSA/ICIiIDogbG9hZFNldHRpbmdzLnRleHQgKTsKCgkJCS8vIHByZXBhcmUgdGhlIGRvbQoJCQkkaHRtbC5hZGRDbGFzcyggInVpLWxvYWRpbmciICk7CgoJCQl0ZXh0VmlzaWJsZSA9IGxvYWRTZXR0aW5ncy50ZXh0VmlzaWJsZTsKCgkJCS8vIGFkZCB0aGUgcHJvcGVyIGNzcyBnaXZlbiB0aGUgb3B0aW9ucyAodGhlbWUsIHRleHQsIGV0YykKCQkJLy8gRm9yY2UgdGV4dCB2aXNpYmlsaXR5IGlmIHRoZSBzZWNvbmQgYXJndW1lbnQgd2FzIHN1cHBsaWVkLCBvcgoJCQkvLyBpZiB0aGUgdGV4dCB3YXMgZXhwbGljaXRseSBzZXQgaW4gdGhlIG9iamVjdCBhcmdzCgkJCXRoaXMuZWxlbWVudC5hdHRyKCJjbGFzcyIsIGxvYWRlckNsYXNzICsKCQkJCSIgdWktY29ybmVyLWFsbCB1aS1ib2R5LSIgKyB0aGVtZSArCgkJCQkiIHVpLWxvYWRlci0iICsgKCB0ZXh0VmlzaWJsZSB8fCBtc2dUZXh0IHx8IHRoZW1lLnRleHQgPyAidmVyYm9zZSIgOiAiZGVmYXVsdCIgKSArCgkJCQkoIGxvYWRTZXR0aW5ncy50ZXh0b25seSB8fCB0ZXh0b25seSA/ICIgdWktbG9hZGVyLXRleHRvbmx5IiA6ICIiICkgKTsKCgkJCS8vIFRPRE8gdmVyaWZ5IHRoYXQganF1ZXJ5LmZuLmh0bWwgaXMgb2sgdG8gdXNlIGluIGJvdGggY2FzZXMgaGVyZQoJCQkvLyAgICAgIHRoaXMgbWlnaHQgYmUgb3Zlcmx5IGRlZmVuc2l2ZSBpbiBwcmV2ZW50aW5nIHVua25vd2luZyB4c3MKCQkJLy8gaWYgdGhlIGh0bWwgYXR0cmlidXRlIGlzIGRlZmluZWQgb24gdGhlIGxvYWRpbmcgc2V0dGluZ3MsIHVzZSB0aGF0CgkJCS8vIG90aGVyd2lzZSB1c2UgdGhlIGZhbGxiYWNrcyBmcm9tIGFib3ZlCgkJCWlmICggbG9hZFNldHRpbmdzLmh0bWwgKSB7CgkJCQl0aGlzLmVsZW1lbnQuaHRtbCggbG9hZFNldHRpbmdzLmh0bWwgKTsKCQkJfSBlbHNlIHsKCQkJCXRoaXMuZWxlbWVudC5maW5kKCAiaDEiICkudGV4dCggbWVzc2FnZSApOwoJCQl9CgoJCQkvLyBhdHRhY2ggdGhlIGxvYWRlciB0byB0aGUgRE9NCgkJCXRoaXMuZWxlbWVudC5hcHBlbmRUbyggJC5tb2JpbGUucGFnZUNvbnRhaW5lciApOwoKCQkJLy8gY2hlY2sgdGhhdCB0aGUgbG9hZGVyIGlzIHZpc2libGUKCQkJdGhpcy5jaGVja0xvYWRlclBvc2l0aW9uKCk7CgoJCQkvLyBvbiBzY3JvbGwgY2hlY2sgdGhlIGxvYWRlciBwb3NpdGlvbgoJCQl0aGlzLndpbmRvdy5iaW5kKCAic2Nyb2xsIiwgJC5wcm94eSggdGhpcy5jaGVja0xvYWRlclBvc2l0aW9uLCB0aGlzICkgKTsKCQl9LAoKCQloaWRlOiBmdW5jdGlvbigpIHsKCQkJJGh0bWwucmVtb3ZlQ2xhc3MoICJ1aS1sb2FkaW5nIiApOwoKCQkJaWYgKCB0aGlzLm9wdGlvbnMudGV4dCApIHsKCQkJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggInVpLWxvYWRlci1mYWtlZml4IiApOwoJCQl9CgoJCQkkLm1vYmlsZS53aW5kb3cudW5iaW5kKCAic2Nyb2xsIiwgdGhpcy5mYWtlRml4TG9hZGVyICk7CgkJCSQubW9iaWxlLndpbmRvdy51bmJpbmQoICJzY3JvbGwiLCB0aGlzLmNoZWNrTG9hZGVyUG9zaXRpb24gKTsKCQl9Cgl9KTsKCn0pKGpRdWVyeSwgdGhpcyk7CgoKLy8gU2NyaXB0OiBqUXVlcnkgaGFzaGNoYW5nZSBldmVudAovLyAKLy8gKlZlcnNpb246IDEuMywgTGFzdCB1cGRhdGVkOiA3LzIxLzIwMTAqCi8vIAovLyBQcm9qZWN0IEhvbWUgLSBodHRwOi8vYmVuYWxtYW4uY29tL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlLXBsdWdpbi8KLy8gR2l0SHViICAgICAgIC0gaHR0cDovL2dpdGh1Yi5jb20vY293Ym95L2pxdWVyeS1oYXNoY2hhbmdlLwovLyBTb3VyY2UgICAgICAgLSBodHRwOi8vZ2l0aHViLmNvbS9jb3dib3kvanF1ZXJ5LWhhc2hjaGFuZ2UvcmF3L21hc3Rlci9qcXVlcnkuYmEtaGFzaGNoYW5nZS5qcwovLyAoTWluaWZpZWQpICAgLSBodHRwOi8vZ2l0aHViLmNvbS9jb3dib3kvanF1ZXJ5LWhhc2hjaGFuZ2UvcmF3L21hc3Rlci9qcXVlcnkuYmEtaGFzaGNoYW5nZS5taW4uanMgKDAuOGtiIGd6aXBwZWQpCi8vIAovLyBBYm91dDogTGljZW5zZQovLyAKLy8gQ29weXJpZ2h0IChjKSAyMDEwICJDb3dib3kiIEJlbiBBbG1hbiwKLy8gRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGFuZCBHUEwgbGljZW5zZXMuCi8vIGh0dHA6Ly9iZW5hbG1hbi5jb20vYWJvdXQvbGljZW5zZS8KLy8gCi8vIEFib3V0OiBFeGFtcGxlcwovLyAKLy8gVGhlc2Ugd29ya2luZyBleGFtcGxlcywgY29tcGxldGUgd2l0aCBmdWxseSBjb21tZW50ZWQgY29kZSwgaWxsdXN0cmF0ZSBhIGZldwovLyB3YXlzIGluIHdoaWNoIHRoaXMgcGx1Z2luIGNhbiBiZSB1c2VkLgovLyAKLy8gaGFzaGNoYW5nZSBldmVudCAtIGh0dHA6Ly9iZW5hbG1hbi5jb20vY29kZS9wcm9qZWN0cy9qcXVlcnktaGFzaGNoYW5nZS9leGFtcGxlcy9oYXNoY2hhbmdlLwovLyBkb2N1bWVudC5kb21haW4gLSBodHRwOi8vYmVuYWxtYW4uY29tL2NvZGUvcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UvZXhhbXBsZXMvZG9jdW1lbnRfZG9tYWluLwovLyAKLy8gQWJvdXQ6IFN1cHBvcnQgYW5kIFRlc3RpbmcKLy8gCi8vIEluZm9ybWF0aW9uIGFib3V0IHdoYXQgdmVyc2lvbiBvciB2ZXJzaW9ucyBvZiBqUXVlcnkgdGhpcyBwbHVnaW4gaGFzIGJlZW4KLy8gdGVzdGVkIHdpdGgsIHdoYXQgYnJvd3NlcnMgaXQgaGFzIGJlZW4gdGVzdGVkIGluLCBhbmQgd2hlcmUgdGhlIHVuaXQgdGVzdHMKLy8gcmVzaWRlIChzbyB5b3UgY2FuIHRlc3QgaXQgeW91cnNlbGYpLgovLyAKLy8galF1ZXJ5IFZlcnNpb25zIC0gMS4yLjYsIDEuMy4yLCAxLjQuMSwgMS40LjIKLy8gQnJvd3NlcnMgVGVzdGVkIC0gSW50ZXJuZXQgRXhwbG9yZXIgNi04LCBGaXJlZm94IDItNCwgQ2hyb21lIDUtNiwgU2FmYXJpIDMuMi01LAovLyAgICAgICAgICAgICAgICAgICBPcGVyYSA5LjYtMTAuNjAsIGlQaG9uZSAzLjEsIEFuZHJvaWQgMS42LTIuMiwgQmxhY2tCZXJyeSA0LjYtNS4KLy8gVW5pdCBUZXN0cyAgICAgIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlL3VuaXQvCi8vIAovLyBBYm91dDogS25vd24gaXNzdWVzCi8vIAovLyBXaGlsZSB0aGlzIGpRdWVyeSBoYXNoY2hhbmdlIGV2ZW50IGltcGxlbWVudGF0aW9uIGlzIHF1aXRlIHN0YWJsZSBhbmQKLy8gcm9idXN0LCB0aGVyZSBhcmUgYSBmZXcgdW5mb3J0dW5hdGUgYnJvd3NlciBidWdzIHN1cnJvdW5kaW5nIGV4cGVjdGVkCi8vIGhhc2hjaGFuZ2UgZXZlbnQtYmFzZWQgYmVoYXZpb3JzLCBpbmRlcGVuZGVudCBvZiBhbnkgSmF2YVNjcmlwdAovLyB3aW5kb3cub25oYXNoY2hhbmdlIGFic3RyYWN0aW9uLiBTZWUgdGhlIGZvbGxvd2luZyBleGFtcGxlcyBmb3IgbW9yZQovLyBpbmZvcm1hdGlvbjoKLy8gCi8vIENocm9tZTogQmFjayBCdXR0b24gLSBodHRwOi8vYmVuYWxtYW4uY29tL2NvZGUvcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UvZXhhbXBsZXMvYnVnLWNocm9tZS1iYWNrLWJ1dHRvbi8KLy8gRmlyZWZveDogUmVtb3RlIFhNTEh0dHBSZXF1ZXN0IC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlL2V4YW1wbGVzL2J1Zy1maXJlZm94LXJlbW90ZS14aHIvCi8vIFdlYktpdDogQmFjayBCdXR0b24gaW4gYW4gSWZyYW1lIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlL2V4YW1wbGVzL2J1Zy13ZWJraXQtaGFzaC1pZnJhbWUvCi8vIFNhZmFyaTogQmFjayBCdXR0b24gZnJvbSBhIGRpZmZlcmVudCBkb21haW4gLSBodHRwOi8vYmVuYWxtYW4uY29tL2NvZGUvcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UvZXhhbXBsZXMvYnVnLXNhZmFyaS1iYWNrLWZyb20tZGlmZi1kb21haW4vCi8vIAovLyBBbHNvIG5vdGUgdGhhdCBzaG91bGQgYSBicm93c2VyIG5hdGl2ZWx5IHN1cHBvcnQgdGhlIHdpbmRvdy5vbmhhc2hjaGFuZ2UgCi8vIGV2ZW50LCBidXQgbm90IHJlcG9ydCB0aGF0IGl0IGRvZXMsIHRoZSBmYWxsYmFjayBwb2xsaW5nIGxvb3Agd2lsbCBiZSB1c2VkLgovLyAKLy8gQWJvdXQ6IFJlbGVhc2UgSGlzdG9yeQovLyAKLy8gMS4zICAgLSAoNy8yMS8yMDEwKSBSZW9yZ2FuaXplZCBJRTYvNyBJZnJhbWUgY29kZSB0byBtYWtlIGl0IG1vcmUKLy8gICAgICAgICAicmVtb3ZhYmxlIiBmb3IgbW9iaWxlLW9ubHkgZGV2ZWxvcG1lbnQuIEFkZGVkIElFNi83IGRvY3VtZW50LnRpdGxlCi8vICAgICAgICAgc3VwcG9ydC4gQXR0ZW1wdGVkIHRvIG1ha2UgSWZyYW1lIGFzIGhpZGRlbiBhcyBwb3NzaWJsZSBieSB1c2luZwovLyAgICAgICAgIHRlY2huaXF1ZXMgZnJvbSBodHRwOi8vd3d3LnBhY2llbGxvZ3JvdXAuY29tL2Jsb2cvP3A9NjA0LiBBZGRlZCAKLy8gICAgICAgICBzdXBwb3J0IGZvciB0aGUgInNob3J0Y3V0IiBmb3JtYXQgJCh3aW5kb3cpLmhhc2hjaGFuZ2UoIGZuICkgYW5kCi8vICAgICAgICAgJCh3aW5kb3cpLmhhc2hjaGFuZ2UoKSBsaWtlIGpRdWVyeSBwcm92aWRlcyBmb3IgYnVpbHQtaW4gZXZlbnRzLgovLyAgICAgICAgIFJlbmFtZWQgalF1ZXJ5Lmhhc2hjaGFuZ2VEZWxheSB0byA8alF1ZXJ5LmZuLmhhc2hjaGFuZ2UuZGVsYXk+IGFuZAovLyAgICAgICAgIGxvd2VyZWQgaXRzIGRlZmF1bHQgdmFsdWUgdG8gNTAuIEFkZGVkIDxqUXVlcnkuZm4uaGFzaGNoYW5nZS5kb21haW4+Ci8vICAgICAgICAgYW5kIDxqUXVlcnkuZm4uaGFzaGNoYW5nZS5zcmM+IHByb3BlcnRpZXMgcGx1cyBkb2N1bWVudC1kb21haW4uaHRtbAovLyAgICAgICAgIGZpbGUgdG8gYWRkcmVzcyBhY2Nlc3MgZGVuaWVkIGlzc3VlcyB3aGVuIHNldHRpbmcgZG9jdW1lbnQuZG9tYWluIGluCi8vICAgICAgICAgSUU2LzcuCi8vIDEuMiAgIC0gKDIvMTEvMjAxMCkgRml4ZWQgYSBidWcgd2hlcmUgY29taW5nIGJhY2sgdG8gYSBwYWdlIHVzaW5nIHRoaXMgcGx1Z2luCi8vICAgICAgICAgZnJvbSBhIHBhZ2Ugb24gYW5vdGhlciBkb21haW4gd291bGQgY2F1c2UgYW4gZXJyb3IgaW4gU2FmYXJpIDQuIEFsc28sCi8vICAgICAgICAgSUU2LzcgSWZyYW1lIGlzIG5vdyBpbnNlcnRlZCBhZnRlciB0aGUgYm9keSAodGhpcyBhY3R1YWxseSB3b3JrcyksCi8vICAgICAgICAgd2hpY2ggcHJldmVudHMgdGhlIHBhZ2UgZnJvbSBzY3JvbGxpbmcgd2hlbiB0aGUgZXZlbnQgaXMgZmlyc3QgYm91bmQuCi8vICAgICAgICAgRXZlbnQgY2FuIGFsc28gbm93IGJlIGJvdW5kIGJlZm9yZSBET00gcmVhZHksIGJ1dCBpdCB3b24ndCBiZSB1c2FibGUKLy8gICAgICAgICBiZWZvcmUgdGhlbiBpbiBJRTYvNy4KLy8gMS4xICAgLSAoMS8yMS8yMDEwKSBJbmNvcnBvcmF0ZWQgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIHRlc3QgdG8gZml4IElFOCBidWcKLy8gICAgICAgICB3aGVyZSBicm93c2VyIHZlcnNpb24gaXMgaW5jb3JyZWN0bHkgcmVwb3J0ZWQgYXMgOC4wLCBkZXNwaXRlCi8vICAgICAgICAgaW5jbHVzaW9uIG9mIHRoZSBYLVVBLUNvbXBhdGlibGUgSUU9RW11bGF0ZUlFNyBtZXRhIHRhZy4KLy8gMS4wICAgLSAoMS85LzIwMTApIEluaXRpYWwgUmVsZWFzZS4gQnJva2Ugb3V0IHRoZSBqUXVlcnkgQkJRIGV2ZW50LnNwZWNpYWwKLy8gICAgICAgICB3aW5kb3cub25oYXNoY2hhbmdlIGZ1bmN0aW9uYWxpdHkgaW50byBhIHNlcGFyYXRlIHBsdWdpbiBmb3IgdXNlcnMKLy8gICAgICAgICB3aG8gd2FudCBqdXN0IHRoZSBiYXNpYyBldmVudCAmIGJhY2sgYnV0dG9uIHN1cHBvcnQsIHdpdGhvdXQgYWxsIHRoZQovLyAgICAgICAgIGV4dHJhIGF3ZXNvbWVuZXNzIHRoYXQgQkJRIHByb3ZpZGVzLiBUaGlzIHBsdWdpbiB3aWxsIGJlIGluY2x1ZGVkIGFzCi8vICAgICAgICAgcGFydCBvZiBqUXVlcnkgQkJRLCBidXQgYWxzbyBiZSBhdmFpbGFibGUgc2VwYXJhdGVseS4KCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CiAgLy8gUmV1c2VkIHN0cmluZy4KICB2YXIgc3RyX2hhc2hjaGFuZ2UgPSAnaGFzaGNoYW5nZScsCiAgICAKICAgIC8vIE1ldGhvZCAvIG9iamVjdCByZWZlcmVuY2VzLgogICAgZG9jID0gZG9jdW1lbnQsCiAgICBmYWtlX29uaGFzaGNoYW5nZSwKICAgIHNwZWNpYWwgPSAkLmV2ZW50LnNwZWNpYWwsCiAgICAKICAgIC8vIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCB3aW5kb3cub25oYXNoY2hhbmdlPyBOb3RlIHRoYXQgSUU4IHJ1bm5pbmcgaW4KICAgIC8vIElFNyBjb21wYXRpYmlsaXR5IG1vZGUgcmVwb3J0cyB0cnVlIGZvciAnb25oYXNoY2hhbmdlJyBpbiB3aW5kb3csIGV2ZW4KICAgIC8vIHRob3VnaCB0aGUgZXZlbnQgaXNuJ3Qgc3VwcG9ydGVkLCBzbyBhbHNvIHRlc3QgZG9jdW1lbnQuZG9jdW1lbnRNb2RlLgogICAgZG9jX21vZGUgPSBkb2MuZG9jdW1lbnRNb2RlLAogICAgc3VwcG9ydHNfb25oYXNoY2hhbmdlID0gJ29uJyArIHN0cl9oYXNoY2hhbmdlIGluIHdpbmRvdyAmJiAoIGRvY19tb2RlID09PSB1bmRlZmluZWQgfHwgZG9jX21vZGUgPiA3ICk7CiAgCiAgLy8gR2V0IGxvY2F0aW9uLmhhc2ggKG9yIHdoYXQgeW91J2QgZXhwZWN0IGxvY2F0aW9uLmhhc2ggdG8gYmUpIHNhbnMgYW55CiAgLy8gbGVhZGluZyAjLiBUaGFua3MgZm9yIG1ha2luZyB0aGlzIG5lY2Vzc2FyeSwgRmlyZWZveCEKICBmdW5jdGlvbiBnZXRfZnJhZ21lbnQoIHVybCApIHsKICAgIHVybCA9IHVybCB8fCBsb2NhdGlvbi5ocmVmOwogICAgcmV0dXJuICcjJyArIHVybC5yZXBsYWNlKCAvXlteI10qIz8oLiopJC8sICckMScgKTsKICB9OwogIAogIC8vIE1ldGhvZDogalF1ZXJ5LmZuLmhhc2hjaGFuZ2UKICAvLyAKICAvLyBCaW5kIGEgaGFuZGxlciB0byB0aGUgd2luZG93Lm9uaGFzaGNoYW5nZSBldmVudCBvciB0cmlnZ2VyIGFsbCBib3VuZAogIC8vIHdpbmRvdy5vbmhhc2hjaGFuZ2UgZXZlbnQgaGFuZGxlcnMuIFRoaXMgYmVoYXZpb3IgaXMgY29uc2lzdGVudCB3aXRoCiAgLy8galF1ZXJ5J3MgYnVpbHQtaW4gZXZlbnQgaGFuZGxlcnMuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8gPiBqUXVlcnkod2luZG93KS5oYXNoY2hhbmdlKCBbIGhhbmRsZXIgXSApOwogIC8vIAogIC8vIEFyZ3VtZW50czoKICAvLyAKICAvLyAgaGFuZGxlciAtIChGdW5jdGlvbikgT3B0aW9uYWwgaGFuZGxlciB0byBiZSBib3VuZCB0byB0aGUgaGFzaGNoYW5nZQogIC8vICAgIGV2ZW50LiBUaGlzIGlzIGEgInNob3J0Y3V0IiBmb3IgdGhlIG1vcmUgdmVyYm9zZSBmb3JtOgogIC8vICAgIGpRdWVyeSh3aW5kb3cpLmJpbmQoICdoYXNoY2hhbmdlJywgaGFuZGxlciApLiBJZiBoYW5kbGVyIGlzIG9taXR0ZWQsCiAgLy8gICAgYWxsIGJvdW5kIHdpbmRvdy5vbmhhc2hjaGFuZ2UgZXZlbnQgaGFuZGxlcnMgd2lsbCBiZSB0cmlnZ2VyZWQuIFRoaXMKICAvLyAgICBpcyBhIHNob3J0Y3V0IGZvciB0aGUgbW9yZSB2ZXJib3NlCiAgLy8gICAgalF1ZXJ5KHdpbmRvdykudHJpZ2dlciggJ2hhc2hjaGFuZ2UnICkuIFRoZXNlIGZvcm1zIGFyZSBkZXNjcmliZWQgaW4KICAvLyAgICB0aGUgPGhhc2hjaGFuZ2UgZXZlbnQ+IHNlY3Rpb24uCiAgLy8gCiAgLy8gUmV0dXJuczoKICAvLyAKICAvLyAgKGpRdWVyeSkgVGhlIGluaXRpYWwgalF1ZXJ5IGNvbGxlY3Rpb24gb2YgZWxlbWVudHMuCiAgCiAgLy8gQWxsb3cgdGhlICJzaG9ydGN1dCIgZm9ybWF0ICQoZWxlbSkuaGFzaGNoYW5nZSggZm4gKSBmb3IgYmluZGluZyBhbmQKICAvLyAkKGVsZW0pLmhhc2hjaGFuZ2UoKSBmb3IgdHJpZ2dlcmluZywgbGlrZSBqUXVlcnkgZG9lcyBmb3IgYnVpbHQtaW4gZXZlbnRzLgogICQuZm5bIHN0cl9oYXNoY2hhbmdlIF0gPSBmdW5jdGlvbiggZm4gKSB7CiAgICByZXR1cm4gZm4gPyB0aGlzLmJpbmQoIHN0cl9oYXNoY2hhbmdlLCBmbiApIDogdGhpcy50cmlnZ2VyKCBzdHJfaGFzaGNoYW5nZSApOwogIH07CiAgCiAgLy8gUHJvcGVydHk6IGpRdWVyeS5mbi5oYXNoY2hhbmdlLmRlbGF5CiAgLy8gCiAgLy8gVGhlIG51bWVyaWMgaW50ZXJ2YWwgKGluIG1pbGxpc2Vjb25kcykgYXQgd2hpY2ggdGhlIDxoYXNoY2hhbmdlIGV2ZW50PgogIC8vIHBvbGxpbmcgbG9vcCBleGVjdXRlcy4gRGVmYXVsdHMgdG8gNTAuCiAgCiAgLy8gUHJvcGVydHk6IGpRdWVyeS5mbi5oYXNoY2hhbmdlLmRvbWFpbgogIC8vIAogIC8vIElmIHlvdSdyZSBzZXR0aW5nIGRvY3VtZW50LmRvbWFpbiBpbiB5b3VyIEphdmFTY3JpcHQsIGFuZCB5b3Ugd2FudCBoYXNoCiAgLy8gaGlzdG9yeSB0byB3b3JrIGluIElFNi83LCBub3Qgb25seSBtdXN0IHRoaXMgcHJvcGVydHkgYmUgc2V0LCBidXQgeW91IG11c3QKICAvLyBhbHNvIHNldCBkb2N1bWVudC5kb21haW4gQkVGT1JFIGpRdWVyeSBpcyBsb2FkZWQgaW50byB0aGUgcGFnZS4gVGhpcwogIC8vIHByb3BlcnR5IGlzIG9ubHkgYXBwbGljYWJsZSBpZiB5b3UgYXJlIHN1cHBvcnRpbmcgSUU2LzcgKG9yIElFOCBvcGVyYXRpbmcKICAvLyBpbiAiSUU3IGNvbXBhdGliaWxpdHkiIG1vZGUpLgogIC8vIAogIC8vIEluIGFkZGl0aW9uLCB0aGUgPGpRdWVyeS5mbi5oYXNoY2hhbmdlLnNyYz4gcHJvcGVydHkgbXVzdCBiZSBzZXQgdG8gdGhlCiAgLy8gcGF0aCBvZiB0aGUgaW5jbHVkZWQgImRvY3VtZW50LWRvbWFpbi5odG1sIiBmaWxlLCB3aGljaCBjYW4gYmUgcmVuYW1lZCBvcgogIC8vIG1vZGlmaWVkIGlmIG5lY2Vzc2FyeSAobm90ZSB0aGF0IHRoZSBkb2N1bWVudC5kb21haW4gc3BlY2lmaWVkIG11c3QgYmUgdGhlCiAgLy8gc2FtZSBpbiBib3RoIHlvdXIgbWFpbiBKYXZhU2NyaXB0IGFzIHdlbGwgYXMgaW4gdGhpcyBmaWxlKS4KICAvLyAKICAvLyBVc2FnZToKICAvLyAKICAvLyBqUXVlcnkuZm4uaGFzaGNoYW5nZS5kb21haW4gPSBkb2N1bWVudC5kb21haW47CiAgCiAgLy8gUHJvcGVydHk6IGpRdWVyeS5mbi5oYXNoY2hhbmdlLnNyYwogIC8vIAogIC8vIElmLCBmb3Igc29tZSByZWFzb24sIHlvdSBuZWVkIHRvIHNwZWNpZnkgYW4gSWZyYW1lIHNyYyBmaWxlIChmb3IgZXhhbXBsZSwKICAvLyB3aGVuIHNldHRpbmcgZG9jdW1lbnQuZG9tYWluIGFzIGluIDxqUXVlcnkuZm4uaGFzaGNoYW5nZS5kb21haW4+KSwgeW91IGNhbgogIC8vIGRvIHNvIHVzaW5nIHRoaXMgcHJvcGVydHkuIE5vdGUgdGhhdCB3aGVuIHVzaW5nIHRoaXMgcHJvcGVydHksIGhpc3RvcnkKICAvLyB3b24ndCBiZSByZWNvcmRlZCBpbiBJRTYvNyB1bnRpbCB0aGUgSWZyYW1lIHNyYyBmaWxlIGxvYWRzLiBUaGlzIHByb3BlcnR5CiAgLy8gaXMgb25seSBhcHBsaWNhYmxlIGlmIHlvdSBhcmUgc3VwcG9ydGluZyBJRTYvNyAob3IgSUU4IG9wZXJhdGluZyBpbiAiSUU3CiAgLy8gY29tcGF0aWJpbGl0eSIgbW9kZSkuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8galF1ZXJ5LmZuLmhhc2hjaGFuZ2Uuc3JjID0gJ3BhdGgvdG8vZmlsZS5odG1sJzsKICAKICAkLmZuWyBzdHJfaGFzaGNoYW5nZSBdLmRlbGF5ID0gNTA7CiAgLyoKICAkLmZuWyBzdHJfaGFzaGNoYW5nZSBdLmRvbWFpbiA9IG51bGw7CiAgJC5mblsgc3RyX2hhc2hjaGFuZ2UgXS5zcmMgPSBudWxsOwogICovCiAgCiAgLy8gRXZlbnQ6IGhhc2hjaGFuZ2UgZXZlbnQKICAvLyAKICAvLyBGaXJlZCB3aGVuIGxvY2F0aW9uLmhhc2ggY2hhbmdlcy4gSW4gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IGl0LCB0aGUgbmF0aXZlCiAgLy8gSFRNTDUgd2luZG93Lm9uaGFzaGNoYW5nZSBldmVudCBpcyB1c2VkLCBvdGhlcndpc2UgYSBwb2xsaW5nIGxvb3AgaXMKICAvLyBpbml0aWFsaXplZCwgcnVubmluZyBldmVyeSA8alF1ZXJ5LmZuLmhhc2hjaGFuZ2UuZGVsYXk+IG1pbGxpc2Vjb25kcyB0bwogIC8vIHNlZSBpZiB0aGUgaGFzaCBoYXMgY2hhbmdlZC4gSW4gSUU2LzcgKGFuZCBJRTggb3BlcmF0aW5nIGluICJJRTcKICAvLyBjb21wYXRpYmlsaXR5IiBtb2RlKSwgYSBoaWRkZW4gSWZyYW1lIGlzIGNyZWF0ZWQgdG8gYWxsb3cgdGhlIGJhY2sgYnV0dG9uCiAgLy8gYW5kIGhhc2gtYmFzZWQgaGlzdG9yeSB0byB3b3JrLgogIC8vIAogIC8vIFVzYWdlIGFzIGRlc2NyaWJlZCBpbiA8alF1ZXJ5LmZuLmhhc2hjaGFuZ2U+OgogIC8vIAogIC8vID4gLy8gQmluZCBhbiBldmVudCBoYW5kbGVyLgogIC8vID4galF1ZXJ5KHdpbmRvdykuaGFzaGNoYW5nZSggZnVuY3Rpb24oZSkgewogIC8vID4gICB2YXIgaGFzaCA9IGxvY2F0aW9uLmhhc2g7CiAgLy8gPiAgIC4uLgogIC8vID4gfSk7CiAgLy8gPiAKICAvLyA+IC8vIE1hbnVhbGx5IHRyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIuCiAgLy8gPiBqUXVlcnkod2luZG93KS5oYXNoY2hhbmdlKCk7CiAgLy8gCiAgLy8gQSBtb3JlIHZlcmJvc2UgdXNhZ2UgdGhhdCBhbGxvd3MgZm9yIGV2ZW50IG5hbWVzcGFjaW5nOgogIC8vIAogIC8vID4gLy8gQmluZCBhbiBldmVudCBoYW5kbGVyLgogIC8vID4galF1ZXJ5KHdpbmRvdykuYmluZCggJ2hhc2hjaGFuZ2UnLCBmdW5jdGlvbihlKSB7CiAgLy8gPiAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDsKICAvLyA+ICAgLi4uCiAgLy8gPiB9KTsKICAvLyA+IAogIC8vID4gLy8gTWFudWFsbHkgdHJpZ2dlciB0aGUgZXZlbnQgaGFuZGxlci4KICAvLyA+IGpRdWVyeSh3aW5kb3cpLnRyaWdnZXIoICdoYXNoY2hhbmdlJyApOwogIC8vIAogIC8vIEFkZGl0aW9uYWwgTm90ZXM6CiAgLy8gCiAgLy8gKiBUaGUgcG9sbGluZyBsb29wIGFuZCBJZnJhbWUgYXJlIG5vdCBjcmVhdGVkIHVudGlsIGF0IGxlYXN0IG9uZSBoYW5kbGVyCiAgLy8gICBpcyBhY3R1YWxseSBib3VuZCB0byB0aGUgJ2hhc2hjaGFuZ2UnIGV2ZW50LgogIC8vICogSWYgeW91IG5lZWQgdGhlIGJvdW5kIGhhbmRsZXIocykgdG8gZXhlY3V0ZSBpbW1lZGlhdGVseSwgaW4gY2FzZXMgd2hlcmUKICAvLyAgIGEgbG9jYXRpb24uaGFzaCBleGlzdHMgb24gcGFnZSBsb2FkLCB2aWEgYm9va21hcmsgb3IgcGFnZSByZWZyZXNoIGZvcgogIC8vICAgZXhhbXBsZSwgdXNlIGpRdWVyeSh3aW5kb3cpLmhhc2hjaGFuZ2UoKSBvciB0aGUgbW9yZSB2ZXJib3NlIAogIC8vICAgalF1ZXJ5KHdpbmRvdykudHJpZ2dlciggJ2hhc2hjaGFuZ2UnICkuCiAgLy8gKiBUaGUgZXZlbnQgY2FuIGJlIGJvdW5kIGJlZm9yZSBET00gcmVhZHksIGJ1dCBzaW5jZSBpdCB3b24ndCBiZSB1c2FibGUKICAvLyAgIGJlZm9yZSB0aGVuIGluIElFNi83IChkdWUgdG8gdGhlIG5lY2Vzc2FyeSBJZnJhbWUpLCByZWNvbW1lbmRlZCB1c2FnZSBpcwogIC8vICAgdG8gYmluZCBpdCBpbnNpZGUgYSBET00gcmVhZHkgaGFuZGxlci4KICAKICAvLyBPdmVycmlkZSBleGlzdGluZyAkLmV2ZW50LnNwZWNpYWwuaGFzaGNoYW5nZSBtZXRob2RzIChhbGxvd2luZyB0aGlzIHBsdWdpbgogIC8vIHRvIGJlIGRlZmluZWQgYWZ0ZXIgalF1ZXJ5IEJCUSBpbiBCQlEncyBzb3VyY2UgY29kZSkuCiAgc3BlY2lhbFsgc3RyX2hhc2hjaGFuZ2UgXSA9ICQuZXh0ZW5kKCBzcGVjaWFsWyBzdHJfaGFzaGNoYW5nZSBdLCB7CiAgICAKICAgIC8vIENhbGxlZCBvbmx5IHdoZW4gdGhlIGZpcnN0ICdoYXNoY2hhbmdlJyBldmVudCBpcyBib3VuZCB0byB3aW5kb3cuCiAgICBzZXR1cDogZnVuY3Rpb24oKSB7CiAgICAgIC8vIElmIHdpbmRvdy5vbmhhc2hjaGFuZ2UgaXMgc3VwcG9ydGVkIG5hdGl2ZWx5LCB0aGVyZSdzIG5vdGhpbmcgdG8gZG8uLgogICAgICBpZiAoIHN1cHBvcnRzX29uaGFzaGNoYW5nZSApIHsgcmV0dXJuIGZhbHNlOyB9CiAgICAgIAogICAgICAvLyBPdGhlcndpc2UsIHdlIG5lZWQgdG8gY3JlYXRlIG91ciBvd24uIEFuZCB3ZSBkb24ndCB3YW50IHRvIGNhbGwgdGhpcwogICAgICAvLyB1bnRpbCB0aGUgdXNlciBiaW5kcyB0byB0aGUgZXZlbnQsIGp1c3QgaW4gY2FzZSB0aGV5IG5ldmVyIGRvLCBzaW5jZSBpdAogICAgICAvLyB3aWxsIGNyZWF0ZSBhIHBvbGxpbmcgbG9vcCBhbmQgcG9zc2libHkgZXZlbiBhIGhpZGRlbiBJZnJhbWUuCiAgICAgICQoIGZha2Vfb25oYXNoY2hhbmdlLnN0YXJ0ICk7CiAgICB9LAogICAgCiAgICAvLyBDYWxsZWQgb25seSB3aGVuIHRoZSBsYXN0ICdoYXNoY2hhbmdlJyBldmVudCBpcyB1bmJvdW5kIGZyb20gd2luZG93LgogICAgdGVhcmRvd246IGZ1bmN0aW9uKCkgewogICAgICAvLyBJZiB3aW5kb3cub25oYXNoY2hhbmdlIGlzIHN1cHBvcnRlZCBuYXRpdmVseSwgdGhlcmUncyBub3RoaW5nIHRvIGRvLi4KICAgICAgaWYgKCBzdXBwb3J0c19vbmhhc2hjaGFuZ2UgKSB7IHJldHVybiBmYWxzZTsgfQogICAgICAKICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBuZWVkIHRvIHN0b3Agb3VycyAoaWYgcG9zc2libGUpLgogICAgICAkKCBmYWtlX29uaGFzaGNoYW5nZS5zdG9wICk7CiAgICB9CiAgICAKICB9KTsKICAKICAvLyBmYWtlX29uaGFzaGNoYW5nZSBkb2VzIGFsbCB0aGUgd29yayBvZiB0cmlnZ2VyaW5nIHRoZSB3aW5kb3cub25oYXNoY2hhbmdlCiAgLy8gZXZlbnQgZm9yIGJyb3dzZXJzIHRoYXQgZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdCwgaW5jbHVkaW5nIGNyZWF0aW5nIGEKICAvLyBwb2xsaW5nIGxvb3AgdG8gd2F0Y2ggZm9yIGhhc2ggY2hhbmdlcyBhbmQgaW4gSUUgNi83IGNyZWF0aW5nIGEgaGlkZGVuCiAgLy8gSWZyYW1lIHRvIGVuYWJsZSBiYWNrIGFuZCBmb3J3YXJkLgogIGZha2Vfb25oYXNoY2hhbmdlID0gKGZ1bmN0aW9uKCkgewogICAgdmFyIHNlbGYgPSB7fSwKICAgICAgdGltZW91dF9pZCwKICAgICAgCiAgICAgIC8vIFJlbWVtYmVyIHRoZSBpbml0aWFsIGhhc2ggc28gaXQgZG9lc24ndCBnZXQgdHJpZ2dlcmVkIGltbWVkaWF0ZWx5LgogICAgICBsYXN0X2hhc2ggPSBnZXRfZnJhZ21lbnQoKSwKICAgICAgCiAgICAgIGZuX3JldHZhbCA9IGZ1bmN0aW9uKCB2YWwgKSB7IHJldHVybiB2YWw7IH0sCiAgICAgIGhpc3Rvcnlfc2V0ID0gZm5fcmV0dmFsLAogICAgICBoaXN0b3J5X2dldCA9IGZuX3JldHZhbDsKICAgIAogICAgLy8gU3RhcnQgdGhlIHBvbGxpbmcgbG9vcC4KICAgIHNlbGYuc3RhcnQgPSBmdW5jdGlvbigpIHsKICAgICAgdGltZW91dF9pZCB8fCBwb2xsKCk7CiAgICB9OwogICAgCiAgICAvLyBTdG9wIHRoZSBwb2xsaW5nIGxvb3AuCiAgICBzZWxmLnN0b3AgPSBmdW5jdGlvbigpIHsKICAgICAgdGltZW91dF9pZCAmJiBjbGVhclRpbWVvdXQoIHRpbWVvdXRfaWQgKTsKICAgICAgdGltZW91dF9pZCA9IHVuZGVmaW5lZDsKICAgIH07CiAgICAKICAgIC8vIFRoaXMgcG9sbGluZyBsb29wIGNoZWNrcyBldmVyeSAkLmZuLmhhc2hjaGFuZ2UuZGVsYXkgbWlsbGlzZWNvbmRzIHRvIHNlZQogICAgLy8gaWYgbG9jYXRpb24uaGFzaCBoYXMgY2hhbmdlZCwgYW5kIHRyaWdnZXJzIHRoZSAnaGFzaGNoYW5nZScgZXZlbnQgb24KICAgIC8vIHdpbmRvdyB3aGVuIG5lY2Vzc2FyeS4KICAgIGZ1bmN0aW9uIHBvbGwoKSB7CiAgICAgIHZhciBoYXNoID0gZ2V0X2ZyYWdtZW50KCksCiAgICAgICAgaGlzdG9yeV9oYXNoID0gaGlzdG9yeV9nZXQoIGxhc3RfaGFzaCApOwogICAgICAKICAgICAgaWYgKCBoYXNoICE9PSBsYXN0X2hhc2ggKSB7CiAgICAgICAgaGlzdG9yeV9zZXQoIGxhc3RfaGFzaCA9IGhhc2gsIGhpc3RvcnlfaGFzaCApOwogICAgICAgIAogICAgICAgICQod2luZG93KS50cmlnZ2VyKCBzdHJfaGFzaGNoYW5nZSApOwogICAgICAgIAogICAgICB9IGVsc2UgaWYgKCBoaXN0b3J5X2hhc2ggIT09IGxhc3RfaGFzaCApIHsKICAgICAgICBsb2NhdGlvbi5ocmVmID0gbG9jYXRpb24uaHJlZi5yZXBsYWNlKCAvIy4qLywgJycgKSArIGhpc3RvcnlfaGFzaDsKICAgICAgfQogICAgICAKICAgICAgdGltZW91dF9pZCA9IHNldFRpbWVvdXQoIHBvbGwsICQuZm5bIHN0cl9oYXNoY2hhbmdlIF0uZGVsYXkgKTsKICAgIH07CiAgICAKICAgIC8vIHZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dgogICAgLy8gdnZ2dnZ2dnZ2dnZ2dnZ2dnZ2diBSRU1PVkUgSUYgTk9UIFNVUFBPUlRJTkcgSUU2LzcvOCB2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2CiAgICAvLyB2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnYKICAgIHdpbmRvdy5hdHRhY2hFdmVudCAmJiAhd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJiYgIXN1cHBvcnRzX29uaGFzaGNoYW5nZSAmJiAoZnVuY3Rpb24oKSB7CiAgICAgIC8vIE5vdCBvbmx5IGRvIElFNi83IG5lZWQgdGhlICJtYWdpY2FsIiBJZnJhbWUgdHJlYXRtZW50LCBidXQgc28gZG9lcyBJRTgKICAgICAgLy8gd2hlbiBydW5uaW5nIGluICJJRTcgY29tcGF0aWJpbGl0eSIgbW9kZS4KICAgICAgCiAgICAgIHZhciBpZnJhbWUsCiAgICAgICAgaWZyYW1lX3NyYzsKICAgICAgCiAgICAgIC8vIFdoZW4gdGhlIGV2ZW50IGlzIGJvdW5kIGFuZCBwb2xsaW5nIHN0YXJ0cyBpbiBJRSA2LzcsIGNyZWF0ZSBhIGhpZGRlbgogICAgICAvLyBJZnJhbWUgZm9yIGhpc3RvcnkgaGFuZGxpbmcuCiAgICAgIHNlbGYuc3RhcnQgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoICFpZnJhbWUgKSB7CiAgICAgICAgICBpZnJhbWVfc3JjID0gJC5mblsgc3RyX2hhc2hjaGFuZ2UgXS5zcmM7CiAgICAgICAgICBpZnJhbWVfc3JjID0gaWZyYW1lX3NyYyAmJiBpZnJhbWVfc3JjICsgZ2V0X2ZyYWdtZW50KCk7CiAgICAgICAgICAKICAgICAgICAgIC8vIENyZWF0ZSBoaWRkZW4gSWZyYW1lLiBBdHRlbXB0IHRvIG1ha2UgSWZyYW1lIGFzIGhpZGRlbiBhcyBwb3NzaWJsZQogICAgICAgICAgLy8gYnkgdXNpbmcgdGVjaG5pcXVlcyBmcm9tIGh0dHA6Ly93d3cucGFjaWVsbG9ncm91cC5jb20vYmxvZy8/cD02MDQuCiAgICAgICAgICBpZnJhbWUgPSAkKCc8aWZyYW1lIHRhYmluZGV4PSItMSIgdGl0bGU9ImVtcHR5Ii8+JykuaGlkZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBXaGVuIElmcmFtZSBoYXMgY29tcGxldGVseSBsb2FkZWQsIGluaXRpYWxpemUgdGhlIGhpc3RvcnkgYW5kCiAgICAgICAgICAgIC8vIHN0YXJ0IHBvbGxpbmcuCiAgICAgICAgICAgIC5vbmUoICdsb2FkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgaWZyYW1lX3NyYyB8fCBoaXN0b3J5X3NldCggZ2V0X2ZyYWdtZW50KCkgKTsKICAgICAgICAgICAgICBwb2xsKCk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBMb2FkIElmcmFtZSBzcmMgaWYgc3BlY2lmaWVkLCBvdGhlcndpc2Ugbm90aGluZy4KICAgICAgICAgICAgLmF0dHIoICdzcmMnLCBpZnJhbWVfc3JjIHx8ICdqYXZhc2NyaXB0OjAnICkKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEFwcGVuZCBJZnJhbWUgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgYm9keSB0byBwcmV2ZW50IHVubmVjZXNzYXJ5CiAgICAgICAgICAgIC8vIGluaXRpYWwgcGFnZSBzY3JvbGxpbmcgKHllcywgdGhpcyB3b3JrcykuCiAgICAgICAgICAgIC5pbnNlcnRBZnRlciggJ2JvZHknIClbMF0uY29udGVudFdpbmRvdzsKICAgICAgICAgIAogICAgICAgICAgLy8gV2hlbmV2ZXIgYGRvY3VtZW50LnRpdGxlYCBjaGFuZ2VzLCB1cGRhdGUgdGhlIElmcmFtZSdzIHRpdGxlIHRvCiAgICAgICAgICAvLyBwcmV0dGlmeSB0aGUgYmFjay9uZXh0IGhpc3RvcnkgbWVudSBlbnRyaWVzLiBTaW5jZSBJRSBzb21ldGltZXMKICAgICAgICAgIC8vIGVycm9ycyB3aXRoICJVbnNwZWNpZmllZCBlcnJvciIgdGhlIHZlcnkgZmlyc3QgdGltZSB0aGlzIGlzIHNldAogICAgICAgICAgLy8gKHllcywgdmVyeSB1c2VmdWwpIHdyYXAgdGhpcyB3aXRoIGEgdHJ5L2NhdGNoIGJsb2NrLgogICAgICAgICAgZG9jLm9ucHJvcGVydHljaGFuZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBpZiAoIGV2ZW50LnByb3BlcnR5TmFtZSA9PT0gJ3RpdGxlJyApIHsKICAgICAgICAgICAgICAgIGlmcmFtZS5kb2N1bWVudC50aXRsZSA9IGRvYy50aXRsZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2goZSkge30KICAgICAgICAgIH07CiAgICAgICAgICAKICAgICAgICB9CiAgICAgIH07CiAgICAgIAogICAgICAvLyBPdmVycmlkZSB0aGUgInN0b3AiIG1ldGhvZCBzaW5jZSBhbiBJRTYvNyBJZnJhbWUgd2FzIGNyZWF0ZWQuIEV2ZW4KICAgICAgLy8gaWYgdGhlcmUgYXJlIG5vIGxvbmdlciBhbnkgYm91bmQgZXZlbnQgaGFuZGxlcnMsIHRoZSBwb2xsaW5nIGxvb3AKICAgICAgLy8gaXMgc3RpbGwgbmVjZXNzYXJ5IGZvciBiYWNrL25leHQgdG8gd29yayBhdCBhbGwhCiAgICAgIHNlbGYuc3RvcCA9IGZuX3JldHZhbDsKICAgICAgCiAgICAgIC8vIEdldCBoaXN0b3J5IGJ5IGxvb2tpbmcgYXQgdGhlIGhpZGRlbiBJZnJhbWUncyBsb2NhdGlvbi5oYXNoLgogICAgICBoaXN0b3J5X2dldCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBnZXRfZnJhZ21lbnQoIGlmcmFtZS5sb2NhdGlvbi5ocmVmICk7CiAgICAgIH07CiAgICAgIAogICAgICAvLyBTZXQgYSBuZXcgaGlzdG9yeSBpdGVtIGJ5IG9wZW5pbmcgYW5kIHRoZW4gY2xvc2luZyB0aGUgSWZyYW1lCiAgICAgIC8vIGRvY3VtZW50LCAqdGhlbiogc2V0dGluZyBpdHMgbG9jYXRpb24uaGFzaC4gSWYgZG9jdW1lbnQuZG9tYWluIGhhcwogICAgICAvLyBiZWVuIHNldCwgdXBkYXRlIHRoYXQgYXMgd2VsbC4KICAgICAgaGlzdG9yeV9zZXQgPSBmdW5jdGlvbiggaGFzaCwgaGlzdG9yeV9oYXNoICkgewogICAgICAgIHZhciBpZnJhbWVfZG9jID0gaWZyYW1lLmRvY3VtZW50LAogICAgICAgICAgZG9tYWluID0gJC5mblsgc3RyX2hhc2hjaGFuZ2UgXS5kb21haW47CiAgICAgICAgCiAgICAgICAgaWYgKCBoYXNoICE9PSBoaXN0b3J5X2hhc2ggKSB7CiAgICAgICAgICAvLyBVcGRhdGUgSWZyYW1lIHdpdGggYW55IGluaXRpYWwgYGRvY3VtZW50LnRpdGxlYCB0aGF0IG1pZ2h0IGJlIHNldC4KICAgICAgICAgIGlmcmFtZV9kb2MudGl0bGUgPSBkb2MudGl0bGU7CiAgICAgICAgICAKICAgICAgICAgIC8vIE9wZW5pbmcgdGhlIElmcmFtZSdzIGRvY3VtZW50IGFmdGVyIGl0IGhhcyBiZWVuIGNsb3NlZCBpcyB3aGF0CiAgICAgICAgICAvLyBhY3R1YWxseSBhZGRzIGEgaGlzdG9yeSBlbnRyeS4KICAgICAgICAgIGlmcmFtZV9kb2Mub3BlbigpOwogICAgICAgICAgCiAgICAgICAgICAvLyBTZXQgZG9jdW1lbnQuZG9tYWluIGZvciB0aGUgSWZyYW1lIGRvY3VtZW50IGFzIHdlbGwsIGlmIG5lY2Vzc2FyeS4KICAgICAgICAgIGRvbWFpbiAmJiBpZnJhbWVfZG9jLndyaXRlKCAnPHNjcmlwdD5kb2N1bWVudC5kb21haW49IicgKyBkb21haW4gKyAnIjxcL3NjcmlwdD4nICk7CiAgICAgICAgICAKICAgICAgICAgIGlmcmFtZV9kb2MuY2xvc2UoKTsKICAgICAgICAgIAogICAgICAgICAgLy8gVXBkYXRlIHRoZSBJZnJhbWUncyBoYXNoLCBmb3IgZ3JlYXQganVzdGljZS4KICAgICAgICAgIGlmcmFtZS5sb2NhdGlvbi5oYXNoID0gaGFzaDsKICAgICAgICB9CiAgICAgIH07CiAgICAgIAogICAgfSkoKTsKICAgIC8vIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXgogICAgLy8gXl5eXl5eXl5eXl5eXl5eXl5eXiBSRU1PVkUgSUYgTk9UIFNVUFBPUlRJTkcgSUU2LzcvOCBeXl5eXl5eXl5eXl5eXl5eXl5eCiAgICAvLyBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl4KICAgIAogICAgcmV0dXJuIHNlbGY7CiAgfSkoKTsKICAKfSkoalF1ZXJ5LHRoaXMpOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgoJLyohIG1hdGNoTWVkaWEoKSBwb2x5ZmlsbCAtIFRlc3QgYSBDU1MgbWVkaWEgdHlwZS9xdWVyeSBpbiBKUy4gQXV0aG9ycyAmIGNvcHlyaWdodCAoYykgMjAxMjogU2NvdHQgSmVobCwgUGF1bCBJcmlzaCwgTmljaG9sYXMgWmFrYXMuIER1YWwgTUlUL0JTRCBsaWNlbnNlICovCgl3aW5kb3cubWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhIHx8IChmdW5jdGlvbiggZG9jLCB1bmRlZmluZWQgKSB7CgoJCQoKCQl2YXIgYm9vbCwKCQkJZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQsCgkJCXJlZk5vZGUgPSBkb2NFbGVtLmZpcnN0RWxlbWVudENoaWxkIHx8IGRvY0VsZW0uZmlyc3RDaGlsZCwKCQkJLy8gZmFrZUJvZHkgcmVxdWlyZWQgZm9yIDxGRjQgd2hlbiBleGVjdXRlZCBpbiA8aGVhZD4KCQkJZmFrZUJvZHkgPSBkb2MuY3JlYXRlRWxlbWVudCggImJvZHkiICksCgkJCWRpdiA9IGRvYy5jcmVhdGVFbGVtZW50KCAiZGl2IiApOwoKCQlkaXYuaWQgPSAibXEtdGVzdC0xIjsKCQlkaXYuc3R5bGUuY3NzVGV4dCA9ICJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTEwMGVtIjsKCQlmYWtlQm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gIm5vbmUiOwoJCWZha2VCb2R5LmFwcGVuZENoaWxkKGRpdik7CgoJCXJldHVybiBmdW5jdGlvbihxKXsKCgkJCWRpdi5pbm5lckhUTUwgPSAiJnNoeTs8c3R5bGUgbWVkaWE9XCIiICsgcSArICJcIj4gI21xLXRlc3QtMSB7IHdpZHRoOiA0MnB4OyB9PC9zdHlsZT4iOwoKCQkJZG9jRWxlbS5pbnNlcnRCZWZvcmUoIGZha2VCb2R5LCByZWZOb2RlICk7CgkJCWJvb2wgPSBkaXYub2Zmc2V0V2lkdGggPT09IDQyOwoJCQlkb2NFbGVtLnJlbW92ZUNoaWxkKCBmYWtlQm9keSApOwoKCQkJcmV0dXJuIHsKCQkJCW1hdGNoZXM6IGJvb2wsCgkJCQltZWRpYTogcQoJCQl9OwoKCQl9OwoKCX0oIGRvY3VtZW50ICkpOwoKCS8vICQubW9iaWxlLm1lZGlhIHVzZXMgbWF0Y2hNZWRpYSB0byByZXR1cm4gYSBib29sZWFuLgoJJC5tb2JpbGUubWVkaWEgPSBmdW5jdGlvbiggcSApIHsKCQlyZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEoIHEgKS5tYXRjaGVzOwoJfTsKCn0pKGpRdWVyeSk7CgoJKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgkJdmFyIHN1cHBvcnQgPSB7CgkJCXRvdWNoOiAib250b3VjaGVuZCIgaW4gZG9jdW1lbnQKCQl9OwoKCQkkLm1vYmlsZS5zdXBwb3J0ID0gJC5tb2JpbGUuc3VwcG9ydCB8fCB7fTsKCQkkLmV4dGVuZCggJC5zdXBwb3J0LCBzdXBwb3J0ICk7CgkJJC5leHRlbmQoICQubW9iaWxlLnN1cHBvcnQsIHN1cHBvcnQgKTsKCX0oIGpRdWVyeSApKTsKCgkoZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCQkkLmV4dGVuZCggJC5zdXBwb3J0LCB7CgkJCW9yaWVudGF0aW9uOiAib3JpZW50YXRpb24iIGluIHdpbmRvdyAmJiAib25vcmllbnRhdGlvbmNoYW5nZSIgaW4gd2luZG93CgkJfSk7Cgl9KCBqUXVlcnkgKSk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCi8vIHRoeCBNb2Rlcm5penIKZnVuY3Rpb24gcHJvcEV4aXN0cyggcHJvcCApIHsKCXZhciB1Y19wcm9wID0gcHJvcC5jaGFyQXQoIDAgKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zdWJzdHIoIDEgKSwKCQlwcm9wcyA9ICggcHJvcCArICIgIiArIHZlbmRvcnMuam9pbiggdWNfcHJvcCArICIgIiApICsgdWNfcHJvcCApLnNwbGl0KCAiICIgKSwKCQl2OwoKCWZvciAoIHYgaW4gcHJvcHMgKSB7CgkJaWYgKCBmYkNTU1sgcHJvcHNbIHYgXSBdICE9PSB1bmRlZmluZWQgKSB7CgkJCXJldHVybiB0cnVlOwoJCX0KCX0KfQoKdmFyIGZha2VCb2R5ID0gJCggIjxib2R5PiIgKS5wcmVwZW5kVG8oICJodG1sIiApLAoJZmJDU1MgPSBmYWtlQm9keVsgMCBdLnN0eWxlLAoJdmVuZG9ycyA9IFsgIldlYmtpdCIsICJNb3oiLCAiTyIgXSwKCXdlYm9zID0gInBhbG1HZXRSZXNvdXJjZSIgaW4gd2luZG93LCAvL29ubHkgdXNlZCB0byBydWxlIG91dCBzY3JvbGxUb3AKCW9wZXJhID0gd2luZG93Lm9wZXJhLAoJb3BlcmFtaW5pID0gd2luZG93Lm9wZXJhbWluaSAmJiAoe30pLnRvU3RyaW5nLmNhbGwoIHdpbmRvdy5vcGVyYW1pbmkgKSA9PT0gIltvYmplY3QgT3BlcmFNaW5pXSIsCgliYiA9IHdpbmRvdy5ibGFja2JlcnJ5ICYmICFwcm9wRXhpc3RzKCAiLXdlYmtpdC10cmFuc2Zvcm0iICksIC8vb25seSB1c2VkIHRvIHJ1bGUgb3V0IGJveCBzaGFkb3csIGFzIGl0J3MgZmlsbGVkIG9wYXF1ZSBvbiBCQiA1IGFuZCBsb3dlcgoJbm9raWFMVEU3XzM7CgpmdW5jdGlvbiB2YWxpZFN0eWxlKCBwcm9wLCB2YWx1ZSwgY2hlY2tfdmVuZCApIHsKCXZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApLAoJCXVjID0gZnVuY3Rpb24oIHR4dCApIHsKCQkJcmV0dXJuIHR4dC5jaGFyQXQoIDAgKS50b1VwcGVyQ2FzZSgpICsgdHh0LnN1YnN0ciggMSApOwoJCX0sCgkJdmVuZF9wcmVmID0gZnVuY3Rpb24oIHZlbmQgKSB7CgkJCWlmICggdmVuZCA9PT0gIiIgKSB7CgkJCQlyZXR1cm4gIiI7CgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gICItIiArIHZlbmQuY2hhckF0KCAwICkudG9Mb3dlckNhc2UoKSArIHZlbmQuc3Vic3RyKCAxICkgKyAiLSI7CgkJCX0KCQl9LAoJCWNoZWNrX3N0eWxlID0gZnVuY3Rpb24oIHZlbmQgKSB7CgkJCXZhciB2ZW5kX3Byb3AgPSB2ZW5kX3ByZWYoIHZlbmQgKSArIHByb3AgKyAiOiAiICsgdmFsdWUgKyAiOyIsCgkJCQl1Y192ZW5kID0gdWMoIHZlbmQgKSwKCQkJCXByb3BTdHlsZSA9IHVjX3ZlbmQgKyAoIHVjX3ZlbmQgPT09ICIiID8gcHJvcCA6IHVjKCBwcm9wICkgKTsKCgkJCWRpdi5zZXRBdHRyaWJ1dGUoICJzdHlsZSIsIHZlbmRfcHJvcCApOwoKCQkJaWYgKCAhIWRpdi5zdHlsZVsgcHJvcFN0eWxlIF0gKSB7CgkJCQlyZXQgPSB0cnVlOwoJCQl9CgkJfSwKCQljaGVja192ZW5kcyA9IGNoZWNrX3ZlbmQgPyBjaGVja192ZW5kIDogdmVuZG9ycywKCQlpLCByZXQ7CgoJZm9yKCBpID0gMDsgaSA8IGNoZWNrX3ZlbmRzLmxlbmd0aDsgaSsrICkgewoJCWNoZWNrX3N0eWxlKCBjaGVja192ZW5kc1tpXSApOwoJfQoJcmV0dXJuICEhcmV0Owp9CgovLyBpbmxpbmUgU1ZHIHN1cHBvcnQgdGVzdApmdW5jdGlvbiBpbmxpbmVTVkcoKSB7CgkvLyBUaGFua3MgTW9kZXJuaXpyICYgRXJpayBEYWhsc3Ryb20KCXZhciB3ID0gd2luZG93LAoJCXN2ZyA9ICEhdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgJiYgISF3LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwgInN2ZyIgKS5jcmVhdGVTVkdSZWN0ICYmICEoIHcub3BlcmEgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCAiQ2hyb21lIiApID09PSAtMSApLAoJCXN1cHBvcnQgPSBmdW5jdGlvbiggZGF0YSApIHsKCQkJaWYgKCAhKCBkYXRhICYmIHN2ZyApICkgewoJCQkJJCggImh0bWwiICkuYWRkQ2xhc3MoICJ1aS1ub3N2ZyIgKTsKCQkJfQoJCX0sCgkJaW1nID0gbmV3IHcuSW1hZ2UoKTsKCglpbWcub25lcnJvciA9IGZ1bmN0aW9uKCkgewoJCXN1cHBvcnQoIGZhbHNlICk7Cgl9OwoJaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkgewoJCXN1cHBvcnQoIGltZy53aWR0aCA9PT0gMSAmJiBpbWcuaGVpZ2h0ID09PSAxICk7Cgl9OwoJaW1nLnNyYyA9ICJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFBQUFBUC8vL3l3QUFBQUFBUUFCQUFBQ0FVd0FPdz09IjsKfQoKZnVuY3Rpb24gdHJhbnNmb3JtM2RUZXN0KCkgewoJdmFyIG1xUHJvcCA9ICJ0cmFuc2Zvcm0tM2QiLAoJCS8vIEJlY2F1c2UgdGhlIGB0cmFuc2xhdGUzZGAgdGVzdCBiZWxvdyB0aHJvd3MgZmFsc2UgcG9zaXRpdmVzIGluIEFuZHJvaWQ6CgkJcmV0ID0gJC5tb2JpbGUubWVkaWEoICIoLSIgKyB2ZW5kb3JzLmpvaW4oICItIiArIG1xUHJvcCArICIpLCgtIiApICsgIi0iICsgbXFQcm9wICsgIiksKCIgKyBtcVByb3AgKyAiKSIgKSwKCQllbCwgdHJhbnNmb3JtcywgdDsKCglpZiAoIHJldCApIHsKCQlyZXR1cm4gISFyZXQ7Cgl9CgoJZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApOwoJdHJhbnNmb3JtcyA9IHsKCQkvLyBXZeKAmXJlIG9taXR0aW5nIE9wZXJhIGZvciB0aGUgdGltZSBiZWluZzsgTVMgdXNlcyB1bnByZWZpeGVkLgoJCSJNb3pUcmFuc2Zvcm0iOiAiLW1vei10cmFuc2Zvcm0iLAoJCSJ0cmFuc2Zvcm0iOiAidHJhbnNmb3JtIgoJfTsKCglmYWtlQm9keS5hcHBlbmQoIGVsICk7CgoJZm9yICggdCBpbiB0cmFuc2Zvcm1zICkgewoJCWlmICggZWwuc3R5bGVbIHQgXSAhPT0gdW5kZWZpbmVkICkgewoJCQllbC5zdHlsZVsgdCBdID0gInRyYW5zbGF0ZTNkKCAxMDBweCwgMXB4LCAxcHggKSI7CgkJCXJldCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBlbCApLmdldFByb3BlcnR5VmFsdWUoIHRyYW5zZm9ybXNbIHQgXSApOwoJCX0KCX0KCXJldHVybiAoICEhcmV0ICYmIHJldCAhPT0gIm5vbmUiICk7Cn0KCi8vIFRlc3QgZm9yIGR5bmFtaWMtdXBkYXRpbmcgYmFzZSB0YWcgc3VwcG9ydCAoIGFsbG93cyB1cyB0byBhdm9pZCBocmVmLHNyYyBhdHRyIHJld3JpdGluZyApCmZ1bmN0aW9uIGJhc2VUYWdUZXN0KCkgewoJdmFyIGZhdXhCYXNlID0gbG9jYXRpb24ucHJvdG9jb2wgKyAiLy8iICsgbG9jYXRpb24uaG9zdCArIGxvY2F0aW9uLnBhdGhuYW1lICsgInVpLWRpci8iLAoJCWJhc2UgPSAkKCAiaGVhZCBiYXNlIiApLAoJCWZhdXhFbGUgPSBudWxsLAoJCWhyZWYgPSAiIiwKCQlsaW5rLCByZWJhc2U7CgoJaWYgKCAhYmFzZS5sZW5ndGggKSB7CgkJYmFzZSA9IGZhdXhFbGUgPSAkKCAiPGJhc2U+IiwgeyAiaHJlZiI6IGZhdXhCYXNlIH0pLmFwcGVuZFRvKCAiaGVhZCIgKTsKCX0gZWxzZSB7CgkJaHJlZiA9IGJhc2UuYXR0ciggImhyZWYiICk7Cgl9CgoJbGluayA9ICQoICI8YSBocmVmPSd0ZXN0dXJsJyAvPiIgKS5wcmVwZW5kVG8oIGZha2VCb2R5ICk7CglyZWJhc2UgPSBsaW5rWyAwIF0uaHJlZjsKCWJhc2VbIDAgXS5ocmVmID0gaHJlZiB8fCBsb2NhdGlvbi5wYXRobmFtZTsKCglpZiAoIGZhdXhFbGUgKSB7CgkJZmF1eEVsZS5yZW1vdmUoKTsKCX0KCXJldHVybiByZWJhc2UuaW5kZXhPZiggZmF1eEJhc2UgKSA9PT0gMDsKfQoKLy8gVGhhbmtzIE1vZGVybml6cgpmdW5jdGlvbiBjc3NQb2ludGVyRXZlbnRzVGVzdCgpIHsKCXZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggIngiICksCgkJZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LAoJCWdldENvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSwKCQlzdXBwb3J0czsKCglpZiAoICEoICJwb2ludGVyRXZlbnRzIiBpbiBlbGVtZW50LnN0eWxlICkgKSB7CgkJcmV0dXJuIGZhbHNlOwoJfQoKCWVsZW1lbnQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICJhdXRvIjsKCWVsZW1lbnQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICJ4IjsKCWRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoJc3VwcG9ydHMgPSBnZXRDb21wdXRlZFN0eWxlICYmCglnZXRDb21wdXRlZFN0eWxlKCBlbGVtZW50LCAiIiApLnBvaW50ZXJFdmVudHMgPT09ICJhdXRvIjsKCWRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggZWxlbWVudCApOwoJcmV0dXJuICEhc3VwcG9ydHM7Cn0KCmZ1bmN0aW9uIGJvdW5kaW5nUmVjdCgpIHsKCXZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApOwoJcmV0dXJuIHR5cGVvZiBkaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSAidW5kZWZpbmVkIjsKfQoKLy8gbm9uLVVBLWJhc2VkIElFIHZlcnNpb24gY2hlY2sgYnkgSmFtZXMgUGFkb2xzZXksIG1vZGlmaWVkIGJ5IGpkYWx0b24gLSBmcm9tIGh0dHA6Ly9naXN0LmdpdGh1Yi5jb20vNTI3NjgzCi8vIGFsbG93cyBmb3IgaW5jbHVzaW9uIG9mIElFIDYrLCBpbmNsdWRpbmcgV2luZG93cyBNb2JpbGUgNwokLmV4dGVuZCggJC5tb2JpbGUsIHsgYnJvd3Nlcjoge30gfSApOwokLm1vYmlsZS5icm93c2VyLm9sZElFID0gKGZ1bmN0aW9uKCkgewoJdmFyIHYgPSAzLAoJCWRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICksCgkJYSA9IGRpdi5hbGwgfHwgW107CgoJZG8gewoJCWRpdi5pbm5lckhUTUwgPSAiPCEtLVtpZiBndCBJRSAiICsgKCArK3YgKSArICJdPjxicj48IVtlbmRpZl0tLT4iOwoJfSB3aGlsZSggYVswXSApOwoKCXJldHVybiB2ID4gNCA/IHYgOiAhdjsKfSkoKTsKCmZ1bmN0aW9uIGZpeGVkUG9zaXRpb24oKSB7Cgl2YXIgdyA9IHdpbmRvdywKCQl1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQsCgkJcGxhdGZvcm0gPSBuYXZpZ2F0b3IucGxhdGZvcm0sCgkJLy8gUmVuZGVyaW5nIGVuZ2luZSBpcyBXZWJraXQsIGFuZCBjYXB0dXJlIG1ham9yIHZlcnNpb24KCQl3a21hdGNoID0gdWEubWF0Y2goIC9BcHBsZVdlYktpdFwvKFswLTldKykvICksCgkJd2t2ZXJzaW9uID0gISF3a21hdGNoICYmIHdrbWF0Y2hbIDEgXSwKCQlmZm1hdGNoID0gdWEubWF0Y2goIC9GZW5uZWNcLyhbMC05XSspLyApLAoJCWZmdmVyc2lvbiA9ICEhZmZtYXRjaCAmJiBmZm1hdGNoWyAxIF0sCgkJb3BlcmFtbW9iaWxlbWF0Y2ggPSB1YS5tYXRjaCggL09wZXJhIE1vYmlcLyhbMC05XSspLyApLAoJCW9tdmVyc2lvbiA9ICEhb3BlcmFtbW9iaWxlbWF0Y2ggJiYgb3BlcmFtbW9iaWxlbWF0Y2hbIDEgXTsKCglpZiAoCgkJLy8gaU9TIDQuMyBhbmQgb2xkZXIgOiBQbGF0Zm9ybSBpcyBpUGhvbmUvUGFkL1RvdWNoIGFuZCBXZWJraXQgdmVyc2lvbiBpcyBsZXNzIHRoYW4gNTM0IChpb3M1KQoJCSggKCBwbGF0Zm9ybS5pbmRleE9mKCAiaVBob25lIiApID4gLTEgfHwgcGxhdGZvcm0uaW5kZXhPZiggImlQYWQiICkgPiAtMSAgfHwgcGxhdGZvcm0uaW5kZXhPZiggImlQb2QiICkgPiAtMSApICYmIHdrdmVyc2lvbiAmJiB3a3ZlcnNpb24gPCA1MzQgKSB8fAoJCS8vIE9wZXJhIE1pbmkKCQkoIHcub3BlcmFtaW5pICYmICh7fSkudG9TdHJpbmcuY2FsbCggdy5vcGVyYW1pbmkgKSA9PT0gIltvYmplY3QgT3BlcmFNaW5pXSIgKSB8fAoJCSggb3BlcmFtbW9iaWxlbWF0Y2ggJiYgb212ZXJzaW9uIDwgNzQ1OCApCXx8CgkJLy9BbmRyb2lkIGx0ZSAyLjE6IFBsYXRmb3JtIGlzIEFuZHJvaWQgYW5kIFdlYmtpdCB2ZXJzaW9uIGlzIGxlc3MgdGhhbiA1MzMgKEFuZHJvaWQgMi4yKQoJCSggdWEuaW5kZXhPZiggIkFuZHJvaWQiICkgPiAtMSAmJiB3a3ZlcnNpb24gJiYgd2t2ZXJzaW9uIDwgNTMzICkgfHwKCQkvLyBGaXJlZm94IE1vYmlsZSBiZWZvcmUgNi4wIC0KCQkoIGZmdmVyc2lvbiAmJiBmZnZlcnNpb24gPCA2ICkgfHwKCQkvLyBXZWJPUyBsZXNzIHRoYW4gMwoJCSggInBhbG1HZXRSZXNvdXJjZSIgaW4gd2luZG93ICYmIHdrdmVyc2lvbiAmJiB3a3ZlcnNpb24gPCA1MzQgKQl8fAoJCS8vIE1lZUdvCgkJKCB1YS5pbmRleE9mKCAiTWVlR28iICkgPiAtMSAmJiB1YS5pbmRleE9mKCAiTm9raWFCcm93c2VyLzguNS4wIiApID4gLTEgKSApIHsKCQlyZXR1cm4gZmFsc2U7Cgl9CgoJcmV0dXJuIHRydWU7Cn0KCiQuZXh0ZW5kKCAkLnN1cHBvcnQsIHsKCWNzc1RyYW5zaXRpb25zOiAiV2ViS2l0VHJhbnNpdGlvbkV2ZW50IiBpbiB3aW5kb3cgfHwKCQl2YWxpZFN0eWxlKCAidHJhbnNpdGlvbiIsICJoZWlnaHQgMTAwbXMgbGluZWFyIiwgWyAiV2Via2l0IiwgIk1veiIsICIiIF0gKSAmJgoJCSEkLm1vYmlsZS5icm93c2VyLm9sZElFICYmICFvcGVyYSwKCgkvLyBOb3RlLCBDaHJvbWUgZm9yIGlPUyBoYXMgYW4gZXh0cmVtZWx5IHF1aXJreSBpbXBsZW1lbnRhdGlvbiBvZiBwb3BzdGF0ZS4KCS8vIFdlJ3ZlIGNob3NlbiB0byB0YWtlIHRoZSBzaG9ydGVzdCBwYXRoIHRvIGEgYnVnIGZpeCBoZXJlIGZvciBpc3N1ZSAjNTQyNgoJLy8gU2VlIHRoZSBmb2xsb3dpbmcgbGluayBmb3IgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlZ2V4IGNob3NlbgoJLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vY2hyb21lL21vYmlsZS9kb2NzL3VzZXItYWdlbnQjY2hyb21lX2Zvcl9pb3NfdXNlci1hZ2VudAoJcHVzaFN0YXRlOiAicHVzaFN0YXRlIiBpbiBoaXN0b3J5ICYmCgkJInJlcGxhY2VTdGF0ZSIgaW4gaGlzdG9yeSAmJgoJCS8vIFdoZW4gcnVubmluZyBpbnNpZGUgYSBGRiBpZnJhbWUsIGNhbGxpbmcgcmVwbGFjZVN0YXRlIGNhdXNlcyBhbiBlcnJvcgoJCSEoIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoICJGaXJlZm94IiApID49IDAgJiYgd2luZG93LnRvcCAhPT0gd2luZG93ICkgJiYKCQkoIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnNlYXJjaCgvQ3JpT1MvKSA9PT0gLTEgKSwKCgltZWRpYXF1ZXJ5OiAkLm1vYmlsZS5tZWRpYSggIm9ubHkgYWxsIiApLAoJY3NzUHNldWRvRWxlbWVudDogISFwcm9wRXhpc3RzKCAiY29udGVudCIgKSwKCXRvdWNoT3ZlcmZsb3c6ICEhcHJvcEV4aXN0cyggIm92ZXJmbG93U2Nyb2xsaW5nIiApLAoJY3NzVHJhbnNmb3JtM2Q6IHRyYW5zZm9ybTNkVGVzdCgpLAoJY3NzQW5pbWF0aW9uczogISFwcm9wRXhpc3RzKCAiYW5pbWF0aW9uTmFtZSIgKSwKCWJveFNoYWRvdzogISFwcm9wRXhpc3RzKCAiYm94U2hhZG93IiApICYmICFiYiwKCWZpeGVkUG9zaXRpb246IGZpeGVkUG9zaXRpb24oKSwKCXNjcm9sbFRvcDogKCJwYWdlWE9mZnNldCIgaW4gd2luZG93IHx8CgkJInNjcm9sbFRvcCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8CgkJInNjcm9sbFRvcCIgaW4gZmFrZUJvZHlbIDAgXSkgJiYgIXdlYm9zICYmICFvcGVyYW1pbmksCgoJZHluYW1pY0Jhc2VUYWc6IGJhc2VUYWdUZXN0KCksCgljc3NQb2ludGVyRXZlbnRzOiBjc3NQb2ludGVyRXZlbnRzVGVzdCgpLAoJYm91bmRpbmdSZWN0OiBib3VuZGluZ1JlY3QoKSwKCWlubGluZVNWRzogaW5saW5lU1ZHCn0pOwoKZmFrZUJvZHkucmVtb3ZlKCk7CgovLyAkLm1vYmlsZS5hamF4QmxhY2tsaXN0IGlzIHVzZWQgdG8gb3ZlcnJpZGUgYWpheEVuYWJsZWQgb24gcGxhdGZvcm1zIHRoYXQgaGF2ZSBrbm93biBjb25mbGljdHMgd2l0aCBoYXNoIGhpc3RvcnkgdXBkYXRlcyAoQkI1LCBTeW1iaWFuKQovLyBvciB0aGF0IGdlbmVyYWxseSB3b3JrIGJldHRlciBicm93c2luZyBpbiByZWd1bGFyIGh0dHAgZm9yIGZ1bGwgcGFnZSByZWZyZXNoZXMgKE9wZXJhIE1pbmkpCi8vIE5vdGU6IFRoaXMgZGV0ZWN0aW9uIGJlbG93IGlzIHVzZWQgYXMgYSBsYXN0IHJlc29ydC4KLy8gV2UgcmVjb21tZW5kIG9ubHkgdXNpbmcgdGhlc2UgZGV0ZWN0aW9uIG1ldGhvZHMgd2hlbiBhbGwgb3RoZXIgbW9yZSByZWxpYWJsZS9mb3J3YXJkLWxvb2tpbmcgYXBwcm9hY2hlcyBhcmUgbm90IHBvc3NpYmxlCm5va2lhTFRFN18zID0gKGZ1bmN0aW9uKCkgewoKCXZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50OwoKCS8vVGhlIGZvbGxvd2luZyBpcyBhbiBhdHRlbXB0IHRvIG1hdGNoIE5va2lhIGJyb3dzZXJzIHRoYXQgYXJlIHJ1bm5pbmcgU3ltYmlhbi9zNjAsIHdpdGggd2Via2l0LCB2ZXJzaW9uIDcuMyBvciBvbGRlcgoJcmV0dXJuIHVhLmluZGV4T2YoICJOb2tpYSIgKSA+IC0xICYmCgkJCSggdWEuaW5kZXhPZiggIlN5bWJpYW4vMyIgKSA+IC0xIHx8IHVhLmluZGV4T2YoICJTZXJpZXM2MC81IiApID4gLTEgKSAmJgoJCQl1YS5pbmRleE9mKCAiQXBwbGVXZWJLaXQiICkgPiAtMSAmJgoJCQl1YS5tYXRjaCggLyhCcm93c2VyTkd8Tm9raWFCcm93c2VyKVwvN1wuWzAtM10vICk7Cn0pKCk7CgovLyBTdXBwb3J0IGNvbmRpdGlvbnMgdGhhdCBtdXN0IGJlIG1ldCBpbiBvcmRlciB0byBwcm9jZWVkCi8vIGRlZmF1bHQgZW5oYW5jZWQgcXVhbGlmaWNhdGlvbnMgYXJlIG1lZGlhIHF1ZXJ5IHN1cHBvcnQgT1IgSUUgNysKCiQubW9iaWxlLmdyYWRlQSA9IGZ1bmN0aW9uKCkgewoJcmV0dXJuICggKCAkLnN1cHBvcnQubWVkaWFxdWVyeSAmJiAkLnN1cHBvcnQuY3NzUHNldWRvRWxlbWVudCApIHx8ICQubW9iaWxlLmJyb3dzZXIub2xkSUUgJiYgJC5tb2JpbGUuYnJvd3Nlci5vbGRJRSA+PSA4ICkgJiYgKCAkLnN1cHBvcnQuYm91bmRpbmdSZWN0IHx8ICQuZm4uanF1ZXJ5Lm1hdGNoKC8xXC5bMC03K11cLlswLTkrXT8vKSAhPT0gbnVsbCApOwp9OwoKJC5tb2JpbGUuYWpheEJsYWNrbGlzdCA9CgkJCS8vIEJsYWNrQmVycnkgYnJvd3NlcnMsIHByZS13ZWJraXQKCQkJd2luZG93LmJsYWNrYmVycnkgJiYgIXdpbmRvdy5XZWJLaXRQb2ludCB8fAoJCQkvLyBPcGVyYSBNaW5pCgkJCW9wZXJhbWluaSB8fAoJCQkvLyBTeW1iaWFuIHdlYmtpdHMgcHJlIDcuMwoJCQlub2tpYUxURTdfMzsKCi8vIExhc3RseSwgdGhpcyB3b3JrYXJvdW5kIGlzIHRoZSBvbmx5IHdheSB3ZSd2ZSBmb3VuZCBzbyBmYXIgdG8gZ2V0IHByZSA3LjMgU3ltYmlhbiB3ZWJraXQgZGV2aWNlcwovLyB0byByZW5kZXIgdGhlIHN0eWxlc2hlZXRzIHdoZW4gdGhleSdyZSByZWZlcmVuY2VkIGJlZm9yZSB0aGlzIHNjcmlwdCwgYXMgd2UnZCByZWNvbW1lbmQgZG9pbmcuCi8vIFRoaXMgc2ltcGx5IHJlYXBwZW5kcyB0aGUgQ1NTIGluIHBsYWNlLCB3aGljaCBmb3Igc29tZSByZWFzb24gbWFrZXMgaXQgYXBwbHkKaWYgKCBub2tpYUxURTdfMyApIHsKCSQoZnVuY3Rpb24oKSB7CgkJJCggImhlYWQgbGlua1tyZWw9J3N0eWxlc2hlZXQnXSIgKS5hdHRyKCAicmVsIiwgImFsdGVybmF0ZSBzdHlsZXNoZWV0IiApLmF0dHIoICJyZWwiLCAic3R5bGVzaGVldCIgKTsKCX0pOwp9CgovLyBGb3IgcnVsaW5nIG91dCBzaGFkb3dzIHZpYSBjc3MKaWYgKCAhJC5zdXBwb3J0LmJveFNoYWRvdyApIHsKCSQoICJodG1sIiApLmFkZENsYXNzKCAidWktbm9ib3hzaGFkb3ciICk7Cn0KCn0pKCBqUXVlcnkgKTsKCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCXZhciAkd2luID0gJC5tb2JpbGUud2luZG93LCBzZWxmLAoJCWR1bW15Rm5Ub0luaXROYXZpZ2F0ZSA9IGZ1bmN0aW9uKCkgewoJCX07CgoJJC5ldmVudC5zcGVjaWFsLmJlZm9yZW5hdmlnYXRlID0gewoJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJJHdpbi5vbiggIm5hdmlnYXRlIiwgZHVtbXlGblRvSW5pdE5hdmlnYXRlICk7CgkJfSwKCgkJdGVhcmRvd246IGZ1bmN0aW9uKCkgewoJCQkkd2luLm9mZiggIm5hdmlnYXRlIiwgZHVtbXlGblRvSW5pdE5hdmlnYXRlICk7CgkJfQoJfTsKCgkkLmV2ZW50LnNwZWNpYWwubmF2aWdhdGUgPSBzZWxmID0gewoJCWJvdW5kOiBmYWxzZSwKCgkJcHVzaFN0YXRlRW5hYmxlZDogdHJ1ZSwKCgkJb3JpZ2luYWxFdmVudE5hbWU6IHVuZGVmaW5lZCwKCgkJLy8gSWYgcHVzaHN0YXRlIHN1cHBvcnQgaXMgcHJlc2VudCBhbmQgcHVzaCBzdGF0ZSBzdXBwb3J0IGlzIGRlZmluZWQgdG8KCQkvLyBiZSB0cnVlIG9uIHRoZSBtb2JpbGUgbmFtZXNwYWNlLgoJCWlzUHVzaFN0YXRlRW5hYmxlZDogZnVuY3Rpb24oKSB7CgkJCXJldHVybiAkLnN1cHBvcnQucHVzaFN0YXRlICYmCgkJCQkkLm1vYmlsZS5wdXNoU3RhdGVFbmFibGVkID09PSB0cnVlICYmCgkJCQl0aGlzLmlzSGFzaENoYW5nZUVuYWJsZWQoKTsKCQl9LAoKCQkvLyAhISBhc3N1bWVzIG1vYmlsZSBuYW1lc3BhY2UgaXMgcHJlc2VudAoJCWlzSGFzaENoYW5nZUVuYWJsZWQ6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gJC5tb2JpbGUuaGFzaExpc3RlbmluZ0VuYWJsZWQgPT09IHRydWU7CgkJfSwKCgkJLy8gVE9ETyBhIGxvdCBvZiBkdXBsaWNhdGlvbiBiZXR3ZWVuIHBvcHN0YXRlIGFuZCBoYXNoY2hhbmdlCgkJcG9wc3RhdGU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyIG5ld0V2ZW50ID0gbmV3ICQuRXZlbnQoICJuYXZpZ2F0ZSIgKSwKCQkJCWJlZm9yZU5hdmlnYXRlID0gbmV3ICQuRXZlbnQoICJiZWZvcmVuYXZpZ2F0ZSIgKSwKCQkJCXN0YXRlID0gZXZlbnQub3JpZ2luYWxFdmVudC5zdGF0ZSB8fCB7fTsKCgkJCWJlZm9yZU5hdmlnYXRlLm9yaWdpbmFsRXZlbnQgPSBldmVudDsKCQkJJHdpbi50cmlnZ2VyKCBiZWZvcmVOYXZpZ2F0ZSApOwoKCQkJaWYgKCBiZWZvcmVOYXZpZ2F0ZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJaWYgKCBldmVudC5oaXN0b3J5U3RhdGUgKSB7CgkJCQkkLmV4dGVuZChzdGF0ZSwgZXZlbnQuaGlzdG9yeVN0YXRlKTsKCQkJfQoKCQkJLy8gTWFrZSBzdXJlIHRoZSBvcmlnaW5hbCBldmVudCBpcyB0cmFja2VkIGZvciB0aGUgZW5kCgkJCS8vIHVzZXIgdG8gaW5zcGVjdCBpbmNhc2UgdGhleSB3YW50IHRvIGRvIHNvbWV0aGluZyBzcGVjaWFsCgkJCW5ld0V2ZW50Lm9yaWdpbmFsRXZlbnQgPSBldmVudDsKCgkJCS8vIE5PVEUgd2UgbGV0IHRoZSBjdXJyZW50IHN0YWNrIHVud2luZCBiZWNhdXNlIGFueSBhc3NpZ25tZW50IHRvCgkJCS8vICAgICAgbG9jYXRpb24uaGFzaCB3aWxsIHN0b3AgdGhlIHdvcmxkIGFuZCBydW4gdGhpcyBldmVudCBoYW5kbGVyLiBCeQoJCQkvLyAgICAgIGRvaW5nIHRoaXMgd2UgY3JlYXRlIGEgc2ltaWxhciBiZWhhdmlvciB0byBoYXNoY2hhbmdlIG9uIGhhc2gKCQkJLy8gICAgICBhc3NpZ25tZW50CgkJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgkJCQkkd2luLnRyaWdnZXIoIG5ld0V2ZW50LCB7CgkJCQkJc3RhdGU6IHN0YXRlCgkJCQl9KTsKCQkJfSwgMCk7CgkJfSwKCgkJaGFzaGNoYW5nZTogZnVuY3Rpb24oIGV2ZW50IC8qLCBkYXRhICovICkgewoJCQl2YXIgbmV3RXZlbnQgPSBuZXcgJC5FdmVudCggIm5hdmlnYXRlIiApLAoJCQkJYmVmb3JlTmF2aWdhdGUgPSBuZXcgJC5FdmVudCggImJlZm9yZW5hdmlnYXRlIiApOwoKCQkJYmVmb3JlTmF2aWdhdGUub3JpZ2luYWxFdmVudCA9IGV2ZW50OwoJCQkkd2luLnRyaWdnZXIoIGJlZm9yZU5hdmlnYXRlICk7CgoJCQlpZiAoIGJlZm9yZU5hdmlnYXRlLmlzRGVmYXVsdFByZXZlbnRlZCgpICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBNYWtlIHN1cmUgdGhlIG9yaWdpbmFsIGV2ZW50IGlzIHRyYWNrZWQgZm9yIHRoZSBlbmQKCQkJLy8gdXNlciB0byBpbnNwZWN0IGluY2FzZSB0aGV5IHdhbnQgdG8gZG8gc29tZXRoaW5nIHNwZWNpYWwKCQkJbmV3RXZlbnQub3JpZ2luYWxFdmVudCA9IGV2ZW50OwoKCQkJLy8gVHJpZ2dlciB0aGUgaGFzaGNoYW5nZSB3aXRoIHN0YXRlIHByb3ZpZGVkIGJ5IHRoZSB1c2VyCgkJCS8vIHRoYXQgYWx0ZXJlZCB0aGUgaGFzaAoJCQkkd2luLnRyaWdnZXIoIG5ld0V2ZW50LCB7CgkJCQkvLyBVc2VycyB0aGF0IHdhbnQgdG8gZnVsbHkgbm9ybWFsaXplIHRoZSB0d28gZXZlbnRzCgkJCQkvLyB3aWxsIG5lZWQgdG8gZG8gaGlzdG9yeSBtYW5hZ2VtZW50IGRvd24gdGhlIHN0YWNrIGFuZAoJCQkJLy8gYWRkIHRoZSBzdGF0ZSB0byB0aGUgZXZlbnQgYmVmb3JlIHRoaXMgYmluZGluZyBpcyBmaXJlZAoJCQkJLy8gVE9ETyBjb25zaWRlciBhbGxvd2luZyBmb3IgdGhlIGV4cGxpY2l0IGFkZGl0aW9uIG9mIGNhbGxiYWNrcwoJCQkJLy8gICAgICB0byBiZSBmaXJlZCBiZWZvcmUgdGhpcyB2YWx1ZSBpcyBzZXQgdG8gYXZvaWQgZXZlbnQgdGltaW5nIGlzc3VlcwoJCQkJc3RhdGU6IGV2ZW50Lmhhc2hjaGFuZ2VTdGF0ZSB8fCB7fQoJCQl9KTsKCQl9LAoKCQkvLyBUT0RPIFdlIHJlYWxseSBvbmx5IHdhbnQgdG8gc2V0IHRoaXMgdXAgb25jZQoJCS8vICAgICAgYnV0IEknbSBub3QgY2xlYXIgaWYgdGhlcmUncyBhIGJldGVyIHdheSB0byBhY2hpZXZlCgkJLy8gICAgICB0aGlzIHdpdGggdGhlIGpRdWVyeSBzcGVjaWFsIGV2ZW50IHN0cnVjdHVyZQoJCXNldHVwOiBmdW5jdGlvbiggLyogZGF0YSwgbmFtZXNwYWNlcyAqLyApIHsKCQkJaWYgKCBzZWxmLmJvdW5kICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQlzZWxmLmJvdW5kID0gdHJ1ZTsKCgkJCWlmICggc2VsZi5pc1B1c2hTdGF0ZUVuYWJsZWQoKSApIHsKCQkJCXNlbGYub3JpZ2luYWxFdmVudE5hbWUgPSAicG9wc3RhdGUiOwoJCQkJJHdpbi5iaW5kKCAicG9wc3RhdGUubmF2aWdhdGUiLCBzZWxmLnBvcHN0YXRlICk7CgkJCX0gZWxzZSBpZiAoIHNlbGYuaXNIYXNoQ2hhbmdlRW5hYmxlZCgpICkgewoJCQkJc2VsZi5vcmlnaW5hbEV2ZW50TmFtZSA9ICJoYXNoY2hhbmdlIjsKCQkJCSR3aW4uYmluZCggImhhc2hjaGFuZ2UubmF2aWdhdGUiLCBzZWxmLmhhc2hjaGFuZ2UgKTsKCQkJfQoJCX0KCX07Cn0pKCBqUXVlcnkgKTsKCgoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgkJdmFyIHBhdGgsICRiYXNlLCBkaWFsb2dIYXNoS2V5ID0gIiZ1aS1zdGF0ZT1kaWFsb2ciOwoKCQkkLm1vYmlsZS5wYXRoID0gcGF0aCA9IHsKCQkJdWlTdGF0ZUtleTogIiZ1aS1zdGF0ZSIsCgoJCQkvLyBUaGlzIHNjYXJ5IGxvb2tpbmcgcmVndWxhciBleHByZXNzaW9uIHBhcnNlcyBhbiBhYnNvbHV0ZSBVUkwgb3IgaXRzIHJlbGF0aXZlCgkJCS8vIHZhcmlhbnRzIChwcm90b2NvbCwgc2l0ZSwgZG9jdW1lbnQsIHF1ZXJ5LCBhbmQgaGFzaCksIGludG8gdGhlIHZhcmlvdXMKCQkJLy8gY29tcG9uZW50cyAocHJvdG9jb2wsIGhvc3QsIHBhdGgsIHF1ZXJ5LCBmcmFnbWVudCwgZXRjIHRoYXQgbWFrZSB1cCB0aGUKCQkJLy8gVVJMIGFzIHdlbGwgYXMgc29tZSBvdGhlciBjb21tb25seSB1c2VkIHN1Yi1wYXJ0cy4gV2hlbiB1c2VkIHdpdGggUmVnRXhwLmV4ZWMoKQoJCQkvLyBvciBTdHJpbmcubWF0Y2gsIGl0IHBhcnNlcyB0aGUgVVJMIGludG8gYSByZXN1bHRzIGFycmF5IHRoYXQgbG9va3MgbGlrZSB0aGlzOgoJCQkvLwoJCQkvLyAgICAgWzBdOiBodHRwOi8vamJsYXM6cGFzc3dvcmRAbXljb21wYW55LmNvbTo4MDgwL21haWwvaW5ib3g/bXNnPTEyMzQmdHlwZT11bnJlYWQjbXNnLWNvbnRlbnQKCQkJLy8gICAgIFsxXTogaHR0cDovL2pibGFzOnBhc3N3b3JkQG15Y29tcGFueS5jb206ODA4MC9tYWlsL2luYm94P21zZz0xMjM0JnR5cGU9dW5yZWFkCgkJCS8vICAgICBbMl06IGh0dHA6Ly9qYmxhczpwYXNzd29yZEBteWNvbXBhbnkuY29tOjgwODAvbWFpbC9pbmJveAoJCQkvLyAgICAgWzNdOiBodHRwOi8vamJsYXM6cGFzc3dvcmRAbXljb21wYW55LmNvbTo4MDgwCgkJCS8vICAgICBbNF06IGh0dHA6CgkJCS8vICAgICBbNV06IC8vCgkJCS8vICAgICBbNl06IGpibGFzOnBhc3N3b3JkQG15Y29tcGFueS5jb206ODA4MAoJCQkvLyAgICAgWzddOiBqYmxhczpwYXNzd29yZAoJCQkvLyAgICAgWzhdOiBqYmxhcwoJCQkvLyAgICAgWzldOiBwYXNzd29yZAoJCQkvLyAgICBbMTBdOiBteWNvbXBhbnkuY29tOjgwODAKCQkJLy8gICAgWzExXTogbXljb21wYW55LmNvbQoJCQkvLyAgICBbMTJdOiA4MDgwCgkJCS8vICAgIFsxM106IC9tYWlsL2luYm94CgkJCS8vICAgIFsxNF06IC9tYWlsLwoJCQkvLyAgICBbMTVdOiBpbmJveAoJCQkvLyAgICBbMTZdOiA/bXNnPTEyMzQmdHlwZT11bnJlYWQKCQkJLy8gICAgWzE3XTogI21zZy1jb250ZW50CgkJCS8vCgkJCXVybFBhcnNlUkU6IC9eXHMqKCgoKFteOlwvI1w/XSs6KT8oPzooXC9cLykoKD86KChbXjpAXC8jXD9dKykoPzpcOihbXjpAXC8jXD9dKykpPylAKT8oKFteOlwvI1w/XF1cW10rfFxbW15cL1xdQCM/XStcXSkoPzpcOihbMC05XSspKT8pKT8pPyk/KChcLz8oPzpbXlwvXD8jXStcLyspKikoW15cPyNdKikpKT8oXD9bXiNdKyk/KSgjLiopPy8sCgoJCQkvLyBBYnN0cmFjdGlvbiB0byBhZGRyZXNzIHhzcyAoSXNzdWUgIzQ3ODcpIGJ5IHJlbW92aW5nIHRoZSBhdXRob3JpdHkgaW4KCQkJLy8gYnJvd3NlcnMgdGhhdCBhdXRvCWRlY29kZSBpdC4gQWxsIHJlZmVyZW5jZXMgdG8gbG9jYXRpb24uaHJlZiBzaG91bGQgYmUKCQkJLy8gcmVwbGFjZWQgd2l0aCBhIGNhbGwgdG8gdGhpcyBtZXRob2Qgc28gdGhhdCBpdCBjYW4gYmUgZGVhbHQgd2l0aCBwcm9wZXJseSBoZXJlCgkJCWdldExvY2F0aW9uOiBmdW5jdGlvbiggdXJsICkgewoJCQkJdmFyIHVyaSA9IHVybCA/IHRoaXMucGFyc2VVcmwoIHVybCApIDogbG9jYXRpb24sCgkJCQkJaGFzaCA9IHRoaXMucGFyc2VVcmwoIHVybCB8fCBsb2NhdGlvbi5ocmVmICkuaGFzaDsKCgkJCQkvLyBtaW1pYyB0aGUgYnJvd3NlciB3aXRoIGFuIGVtcHR5IHN0cmluZyB3aGVuIHRoZSBoYXNoIGlzIGVtcHR5CgkJCQloYXNoID0gaGFzaCA9PT0gIiMiID8gIiIgOiBoYXNoOwoKCQkJCS8vIE1ha2Ugc3VyZSB0byBwYXJzZSB0aGUgdXJsIG9yIHRoZSBsb2NhdGlvbiBvYmplY3QgZm9yIHRoZSBoYXNoIGJlY2F1c2UgdXNpbmcgbG9jYXRpb24uaGFzaAoJCQkJLy8gaXMgYXV0b2RlY29kZWQgaW4gZmlyZWZveCwgdGhlIHJlc3Qgb2YgdGhlIHVybCBzaG91bGQgYmUgZnJvbSB0aGUgb2JqZWN0IChsb2NhdGlvbiB1bmxlc3MKCQkJCS8vIHdlJ3JlIHRlc3RpbmcpIHRvIGF2b2lkIHRoZSBpbmNsdXNpb24gb2YgdGhlIGF1dGhvcml0eQoJCQkJcmV0dXJuIHVyaS5wcm90b2NvbCArICIvLyIgKyB1cmkuaG9zdCArIHVyaS5wYXRobmFtZSArIHVyaS5zZWFyY2ggKyBoYXNoOwoJCQl9LAoKCQkJLy9yZXR1cm4gdGhlIG9yaWdpbmFsIGRvY3VtZW50IHVybAoJCQlnZXREb2N1bWVudFVybDogZnVuY3Rpb24oIGFzUGFyc2VkT2JqZWN0ICkgewoJCQkJcmV0dXJuIGFzUGFyc2VkT2JqZWN0ID8gJC5leHRlbmQoIHt9LCBwYXRoLmRvY3VtZW50VXJsICkgOiBwYXRoLmRvY3VtZW50VXJsLmhyZWY7CgkJCX0sCgoJCQlwYXJzZUxvY2F0aW9uOiBmdW5jdGlvbigpIHsKCQkJCXJldHVybiB0aGlzLnBhcnNlVXJsKCB0aGlzLmdldExvY2F0aW9uKCkgKTsKCQkJfSwKCgkJCS8vUGFyc2UgYSBVUkwgaW50byBhIHN0cnVjdHVyZSB0aGF0IGFsbG93cyBlYXN5IGFjY2VzcyB0bwoJCQkvL2FsbCBvZiB0aGUgVVJMIGNvbXBvbmVudHMgYnkgbmFtZS4KCQkJcGFyc2VVcmw6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQkvLyBJZiB3ZSdyZSBwYXNzZWQgYW4gb2JqZWN0LCB3ZSdsbCBhc3N1bWUgdGhhdCBpdCBpcwoJCQkJLy8gYSBwYXJzZWQgdXJsIG9iamVjdCBhbmQganVzdCByZXR1cm4gaXQgYmFjayB0byB0aGUgY2FsbGVyLgoJCQkJaWYgKCAkLnR5cGUoIHVybCApID09PSAib2JqZWN0IiApIHsKCQkJCQlyZXR1cm4gdXJsOwoJCQkJfQoKCQkJCXZhciBtYXRjaGVzID0gcGF0aC51cmxQYXJzZVJFLmV4ZWMoIHVybCB8fCAiIiApIHx8IFtdOwoKCQkJCQkvLyBDcmVhdGUgYW4gb2JqZWN0IHRoYXQgYWxsb3dzIHRoZSBjYWxsZXIgdG8gYWNjZXNzIHRoZSBzdWItbWF0Y2hlcwoJCQkJCS8vIGJ5IG5hbWUuIE5vdGUgdGhhdCBJRSByZXR1cm5zIGFuIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mIHVuZGVmaW5lZCwKCQkJCQkvLyBsaWtlIGFsbCBvdGhlciBicm93c2VycyBkbywgc28gd2Ugbm9ybWFsaXplIGV2ZXJ5dGhpbmcgc28gaXRzIGNvbnNpc3RlbnQKCQkJCQkvLyBubyBtYXR0ZXIgd2hhdCBicm93c2VyIHdlJ3JlIHJ1bm5pbmcgb24uCgkJCQkJcmV0dXJuIHsKCQkJCQkJaHJlZjogICAgICAgICBtYXRjaGVzWyAgMCBdIHx8ICIiLAoJCQkJCQlocmVmTm9IYXNoOiAgIG1hdGNoZXNbICAxIF0gfHwgIiIsCgkJCQkJCWhyZWZOb1NlYXJjaDogbWF0Y2hlc1sgIDIgXSB8fCAiIiwKCQkJCQkJZG9tYWluOiAgICAgICBtYXRjaGVzWyAgMyBdIHx8ICIiLAoJCQkJCQlwcm90b2NvbDogICAgIG1hdGNoZXNbICA0IF0gfHwgIiIsCgkJCQkJCWRvdWJsZVNsYXNoOiAgbWF0Y2hlc1sgIDUgXSB8fCAiIiwKCQkJCQkJYXV0aG9yaXR5OiAgICBtYXRjaGVzWyAgNiBdIHx8ICIiLAoJCQkJCQl1c2VybmFtZTogICAgIG1hdGNoZXNbICA4IF0gfHwgIiIsCgkJCQkJCXBhc3N3b3JkOiAgICAgbWF0Y2hlc1sgIDkgXSB8fCAiIiwKCQkJCQkJaG9zdDogICAgICAgICBtYXRjaGVzWyAxMCBdIHx8ICIiLAoJCQkJCQlob3N0bmFtZTogICAgIG1hdGNoZXNbIDExIF0gfHwgIiIsCgkJCQkJCXBvcnQ6ICAgICAgICAgbWF0Y2hlc1sgMTIgXSB8fCAiIiwKCQkJCQkJcGF0aG5hbWU6ICAgICBtYXRjaGVzWyAxMyBdIHx8ICIiLAoJCQkJCQlkaXJlY3Rvcnk6ICAgIG1hdGNoZXNbIDE0IF0gfHwgIiIsCgkJCQkJCWZpbGVuYW1lOiAgICAgbWF0Y2hlc1sgMTUgXSB8fCAiIiwKCQkJCQkJc2VhcmNoOiAgICAgICBtYXRjaGVzWyAxNiBdIHx8ICIiLAoJCQkJCQloYXNoOiAgICAgICAgIG1hdGNoZXNbIDE3IF0gfHwgIiIKCQkJCQl9OwoJCQl9LAoKCQkJLy9UdXJuIHJlbFBhdGggaW50byBhbiBhc2JvbHV0ZSBwYXRoLiBhYnNQYXRoIGlzCgkJCS8vYW4gb3B0aW9uYWwgYWJzb2x1dGUgcGF0aCB3aGljaCBkZXNjcmliZXMgd2hhdAoJCQkvL3JlbFBhdGggaXMgcmVsYXRpdmUgdG8uCgkJCW1ha2VQYXRoQWJzb2x1dGU6IGZ1bmN0aW9uKCByZWxQYXRoLCBhYnNQYXRoICkgewoJCQkJdmFyIGFic1N0YWNrLAoJCQkJCXJlbFN0YWNrLAoJCQkJCWksIGQ7CgoJCQkJaWYgKCByZWxQYXRoICYmIHJlbFBhdGguY2hhckF0KCAwICkgPT09ICIvIiApIHsKCQkJCQlyZXR1cm4gcmVsUGF0aDsKCQkJCX0KCgkJCQlyZWxQYXRoID0gcmVsUGF0aCB8fCAiIjsKCQkJCWFic1BhdGggPSBhYnNQYXRoID8gYWJzUGF0aC5yZXBsYWNlKCAvXlwvfChcL1teXC9dKnxbXlwvXSspJC9nLCAiIiApIDogIiI7CgoJCQkJYWJzU3RhY2sgPSBhYnNQYXRoID8gYWJzUGF0aC5zcGxpdCggIi8iICkgOiBbXTsKCQkJCXJlbFN0YWNrID0gcmVsUGF0aC5zcGxpdCggIi8iICk7CgoJCQkJZm9yICggaSA9IDA7IGkgPCByZWxTdGFjay5sZW5ndGg7IGkrKyApIHsKCQkJCQlkID0gcmVsU3RhY2tbIGkgXTsKCQkJCQlzd2l0Y2ggKCBkICkgewoJCQkJCQljYXNlICIuIjoKCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlICIuLiI6CgkJCQkJCQlpZiAoIGFic1N0YWNrLmxlbmd0aCApIHsKCQkJCQkJCQlhYnNTdGFjay5wb3AoKTsKCQkJCQkJCX0KCQkJCQkJCWJyZWFrOwoJCQkJCQlkZWZhdWx0OgoJCQkJCQkJYWJzU3RhY2sucHVzaCggZCApOwoJCQkJCQkJYnJlYWs7CgkJCQkJfQoJCQkJfQoJCQkJcmV0dXJuICIvIiArIGFic1N0YWNrLmpvaW4oICIvIiApOwoJCQl9LAoKCQkJLy9SZXR1cm5zIHRydWUgaWYgYm90aCB1cmxzIGhhdmUgdGhlIHNhbWUgZG9tYWluLgoJCQlpc1NhbWVEb21haW46IGZ1bmN0aW9uKCBhYnNVcmwxLCBhYnNVcmwyICkgewoJCQkJcmV0dXJuIHBhdGgucGFyc2VVcmwoIGFic1VybDEgKS5kb21haW4gPT09IHBhdGgucGFyc2VVcmwoIGFic1VybDIgKS5kb21haW47CgkJCX0sCgoJCQkvL1JldHVybnMgdHJ1ZSBmb3IgYW55IHJlbGF0aXZlIHZhcmlhbnQuCgkJCWlzUmVsYXRpdmVVcmw6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQkvLyBBbGwgcmVsYXRpdmUgVXJsIHZhcmlhbnRzIGhhdmUgb25lIHRoaW5nIGluIGNvbW1vbiwgbm8gcHJvdG9jb2wuCgkJCQlyZXR1cm4gcGF0aC5wYXJzZVVybCggdXJsICkucHJvdG9jb2wgPT09ICIiOwoJCQl9LAoKCQkJLy9SZXR1cm5zIHRydWUgZm9yIGFuIGFic29sdXRlIHVybC4KCQkJaXNBYnNvbHV0ZVVybDogZnVuY3Rpb24oIHVybCApIHsKCQkJCXJldHVybiBwYXRoLnBhcnNlVXJsKCB1cmwgKS5wcm90b2NvbCAhPT0gIiI7CgkJCX0sCgoJCQkvL1R1cm4gdGhlIHNwZWNpZmllZCByZWFsdGl2ZSBVUkwgaW50byBhbiBhYnNvbHV0ZSBvbmUuIFRoaXMgZnVuY3Rpb24KCQkJLy9jYW4gaGFuZGxlIGFsbCByZWxhdGl2ZSB2YXJpYW50cyAocHJvdG9jb2wsIHNpdGUsIGRvY3VtZW50LCBxdWVyeSwgZnJhZ21lbnQpLgoJCQltYWtlVXJsQWJzb2x1dGU6IGZ1bmN0aW9uKCByZWxVcmwsIGFic1VybCApIHsKCQkJCWlmICggIXBhdGguaXNSZWxhdGl2ZVVybCggcmVsVXJsICkgKSB7CgkJCQkJcmV0dXJuIHJlbFVybDsKCQkJCX0KCgkJCQlpZiAoIGFic1VybCA9PT0gdW5kZWZpbmVkICkgewoJCQkJCWFic1VybCA9IHRoaXMuZG9jdW1lbnRCYXNlOwoJCQkJfQoKCQkJCXZhciByZWxPYmogPSBwYXRoLnBhcnNlVXJsKCByZWxVcmwgKSwKCQkJCQlhYnNPYmogPSBwYXRoLnBhcnNlVXJsKCBhYnNVcmwgKSwKCQkJCQlwcm90b2NvbCA9IHJlbE9iai5wcm90b2NvbCB8fCBhYnNPYmoucHJvdG9jb2wsCgkJCQkJZG91YmxlU2xhc2ggPSByZWxPYmoucHJvdG9jb2wgPyByZWxPYmouZG91YmxlU2xhc2ggOiAoIHJlbE9iai5kb3VibGVTbGFzaCB8fCBhYnNPYmouZG91YmxlU2xhc2ggKSwKCQkJCQlhdXRob3JpdHkgPSByZWxPYmouYXV0aG9yaXR5IHx8IGFic09iai5hdXRob3JpdHksCgkJCQkJaGFzUGF0aCA9IHJlbE9iai5wYXRobmFtZSAhPT0gIiIsCgkJCQkJcGF0aG5hbWUgPSBwYXRoLm1ha2VQYXRoQWJzb2x1dGUoIHJlbE9iai5wYXRobmFtZSB8fCBhYnNPYmouZmlsZW5hbWUsIGFic09iai5wYXRobmFtZSApLAoJCQkJCXNlYXJjaCA9IHJlbE9iai5zZWFyY2ggfHwgKCAhaGFzUGF0aCAmJiBhYnNPYmouc2VhcmNoICkgfHwgIiIsCgkJCQkJaGFzaCA9IHJlbE9iai5oYXNoOwoKCQkJCXJldHVybiBwcm90b2NvbCArIGRvdWJsZVNsYXNoICsgYXV0aG9yaXR5ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoOwoJCQl9LAoKCQkJLy9BZGQgc2VhcmNoIChha2EgcXVlcnkpIHBhcmFtcyB0byB0aGUgc3BlY2lmaWVkIHVybC4KCQkJYWRkU2VhcmNoUGFyYW1zOiBmdW5jdGlvbiggdXJsLCBwYXJhbXMgKSB7CgkJCQl2YXIgdSA9IHBhdGgucGFyc2VVcmwoIHVybCApLAoJCQkJCXAgPSAoIHR5cGVvZiBwYXJhbXMgPT09ICJvYmplY3QiICkgPyAkLnBhcmFtKCBwYXJhbXMgKSA6IHBhcmFtcywKCQkJCQlzID0gdS5zZWFyY2ggfHwgIj8iOwoJCQkJcmV0dXJuIHUuaHJlZk5vU2VhcmNoICsgcyArICggcy5jaGFyQXQoIHMubGVuZ3RoIC0gMSApICE9PSAiPyIgPyAiJiIgOiAiIiApICsgcCArICggdS5oYXNoIHx8ICIiICk7CgkJCX0sCgoJCQljb252ZXJ0VXJsVG9EYXRhVXJsOiBmdW5jdGlvbiggYWJzVXJsICkgewoJCQkJdmFyIHUgPSBwYXRoLnBhcnNlVXJsKCBhYnNVcmwgKTsKCQkJCWlmICggcGF0aC5pc0VtYmVkZGVkUGFnZSggdSApICkgewoJCQkJCS8vIEZvciBlbWJlZGRlZCBwYWdlcywgcmVtb3ZlIHRoZSBkaWFsb2cgaGFzaCBrZXkgYXMgaW4gZ2V0RmlsZVBhdGgoKSwKCQkJCQkvLyBhbmQgcmVtb3ZlIG90aGVyd2lzZSB0aGUgRGF0YSBVcmwgd29uJ3QgbWF0Y2ggdGhlIGlkIG9mIHRoZSBlbWJlZGRlZCBQYWdlLgoJCQkJCXJldHVybiB1Lmhhc2gKCQkJCQkJLnNwbGl0KCBkaWFsb2dIYXNoS2V5IClbMF0KCQkJCQkJLnJlcGxhY2UoIC9eIy8sICIiICkKCQkJCQkJLnJlcGxhY2UoIC9cPy4qJC8sICIiICk7CgkJCQl9IGVsc2UgaWYgKCBwYXRoLmlzU2FtZURvbWFpbiggdSwgdGhpcy5kb2N1bWVudEJhc2UgKSApIHsKCQkJCQlyZXR1cm4gdS5ocmVmTm9IYXNoLnJlcGxhY2UoIHRoaXMuZG9jdW1lbnRCYXNlLmRvbWFpbiwgIiIgKS5zcGxpdCggZGlhbG9nSGFzaEtleSApWzBdOwoJCQkJfQoKCQkJCXJldHVybiB3aW5kb3cuZGVjb2RlVVJJQ29tcG9uZW50KGFic1VybCk7CgkJCX0sCgoJCQkvL2dldCBwYXRoIGZyb20gY3VycmVudCBoYXNoLCBvciBmcm9tIGEgZmlsZSBwYXRoCgkJCWdldDogZnVuY3Rpb24oIG5ld1BhdGggKSB7CgkJCQlpZiAoIG5ld1BhdGggPT09IHVuZGVmaW5lZCApIHsKCQkJCQluZXdQYXRoID0gcGF0aC5wYXJzZUxvY2F0aW9uKCkuaGFzaDsKCQkJCX0KCQkJCXJldHVybiBwYXRoLnN0cmlwSGFzaCggbmV3UGF0aCApLnJlcGxhY2UoIC9bXlwvXSpcLlteXC8qXSskLywgIiIgKTsKCQkJfSwKCgkJCS8vc2V0IGxvY2F0aW9uIGhhc2ggdG8gcGF0aAoJCQlzZXQ6IGZ1bmN0aW9uKCBwYXRoICkgewoJCQkJbG9jYXRpb24uaGFzaCA9IHBhdGg7CgkJCX0sCgoJCQkvL3Rlc3QgaWYgYSBnaXZlbiB1cmwgKHN0cmluZykgaXMgYSBwYXRoCgkJCS8vTk9URSBtaWdodCBiZSBleGNlcHRpb25hbGx5IG5haXZlCgkJCWlzUGF0aDogZnVuY3Rpb24oIHVybCApIHsKCQkJCXJldHVybiAoIC9cLy8gKS50ZXN0KCB1cmwgKTsKCQkJfSwKCgkJCS8vcmV0dXJuIGEgdXJsIHBhdGggd2l0aCB0aGUgd2luZG93J3MgbG9jYXRpb24gcHJvdG9jb2wvaG9zdG5hbWUvcGF0aG5hbWUgcmVtb3ZlZAoJCQljbGVhbjogZnVuY3Rpb24oIHVybCApIHsKCQkJCXJldHVybiB1cmwucmVwbGFjZSggdGhpcy5kb2N1bWVudEJhc2UuZG9tYWluLCAiIiApOwoJCQl9LAoKCQkJLy9qdXN0IHJldHVybiB0aGUgdXJsIHdpdGhvdXQgYW4gaW5pdGlhbCAjCgkJCXN0cmlwSGFzaDogZnVuY3Rpb24oIHVybCApIHsKCQkJCXJldHVybiB1cmwucmVwbGFjZSggL14jLywgIiIgKTsKCQkJfSwKCgkJCXN0cmlwUXVlcnlQYXJhbXM6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQlyZXR1cm4gdXJsLnJlcGxhY2UoIC9cPy4qJC8sICIiICk7CgkJCX0sCgoJCQkvL3JlbW92ZSB0aGUgcHJlY2VkaW5nIGhhc2gsIGFueSBxdWVyeSBwYXJhbXMsIGFuZCBkaWFsb2cgbm90YXRpb25zCgkJCWNsZWFuSGFzaDogZnVuY3Rpb24oIGhhc2ggKSB7CgkJCQlyZXR1cm4gcGF0aC5zdHJpcEhhc2goIGhhc2gucmVwbGFjZSggL1w/LiokLywgIiIgKS5yZXBsYWNlKCBkaWFsb2dIYXNoS2V5LCAiIiApICk7CgkJCX0sCgoJCQlpc0hhc2hWYWxpZDogZnVuY3Rpb24oIGhhc2ggKSB7CgkJCQlyZXR1cm4gKCAvXiNbXiNdKyQvICkudGVzdCggaGFzaCApOwoJCQl9LAoKCQkJLy9jaGVjayB3aGV0aGVyIGEgdXJsIGlzIHJlZmVyZW5jaW5nIHRoZSBzYW1lIGRvbWFpbiwgb3IgYW4gZXh0ZXJuYWwgZG9tYWluIG9yIGRpZmZlcmVudCBwcm90b2NvbAoJCQkvL2NvdWxkIGJlIG1haWx0bywgZXRjCgkJCWlzRXh0ZXJuYWw6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQl2YXIgdSA9IHBhdGgucGFyc2VVcmwoIHVybCApOwoJCQkJcmV0dXJuIHUucHJvdG9jb2wgJiYgdS5kb21haW4gIT09IHRoaXMuZG9jdW1lbnRVcmwuZG9tYWluID8gdHJ1ZSA6IGZhbHNlOwoJCQl9LAoKCQkJaGFzUHJvdG9jb2w6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQlyZXR1cm4gKCAvXig6P1x3KzopLyApLnRlc3QoIHVybCApOwoJCQl9LAoKCQkJaXNFbWJlZGRlZFBhZ2U6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQl2YXIgdSA9IHBhdGgucGFyc2VVcmwoIHVybCApOwoKCQkJCS8vaWYgdGhlIHBhdGggaXMgYWJzb2x1dGUsIHRoZW4gd2UgbmVlZCB0byBjb21wYXJlIHRoZSB1cmwgYWdhaW5zdAoJCQkJLy9ib3RoIHRoZSB0aGlzLmRvY3VtZW50VXJsIGFuZCB0aGUgZG9jdW1lbnRCYXNlLiBUaGUgbWFpbiByZWFzb24gZm9yIHRoaXMKCQkJCS8vaXMgdGhhdCBsaW5rcyBlbWJlZGRlZCB3aXRoaW4gZXh0ZXJuYWwgZG9jdW1lbnRzIHdpbGwgcmVmZXIgdG8gdGhlCgkJCQkvL2FwcGxpY2F0aW9uIGRvY3VtZW50LCB3aGVyZWFzIGxpbmtzIGVtYmVkZGVkIHdpdGhpbiB0aGUgYXBwbGljYXRpb24KCQkJCS8vZG9jdW1lbnQgd2lsbCBiZSByZXNvbHZlZCBhZ2FpbnN0IHRoZSBkb2N1bWVudCBiYXNlLgoJCQkJaWYgKCB1LnByb3RvY29sICE9PSAiIiApIHsKCQkJCQlyZXR1cm4gKCAhdGhpcy5pc1BhdGgodS5oYXNoKSAmJiB1Lmhhc2ggJiYgKCB1LmhyZWZOb0hhc2ggPT09IHRoaXMuZG9jdW1lbnRVcmwuaHJlZk5vSGFzaCB8fCAoIHRoaXMuZG9jdW1lbnRCYXNlRGlmZmVycyAmJiB1LmhyZWZOb0hhc2ggPT09IHRoaXMuZG9jdW1lbnRCYXNlLmhyZWZOb0hhc2ggKSApICk7CgkJCQl9CgkJCQlyZXR1cm4gKCAvXiMvICkudGVzdCggdS5ocmVmICk7CgkJCX0sCgoJCQlzcXVhc2g6IGZ1bmN0aW9uKCB1cmwsIHJlc29sdXRpb25VcmwgKSB7CgkJCQl2YXIgaHJlZiwgY2xlYW5lZFVybCwgc2VhcmNoLCBzdGF0ZUluZGV4LAoJCQkJCWlzUGF0aCA9IHRoaXMuaXNQYXRoKCB1cmwgKSwKCQkJCQl1cmkgPSB0aGlzLnBhcnNlVXJsKCB1cmwgKSwKCQkJCQlwcmVzZXJ2ZWRIYXNoID0gdXJpLmhhc2gsCgkJCQkJdWlTdGF0ZSA9ICIiOwoKCQkJCS8vIHByb2R1Y2UgYSB1cmwgYWdhaW5zdCB3aGljaCB3ZSBjYW4gcmVzb2xlIHRoZSBwcm92aWRlZCBwYXRoCgkJCQlyZXNvbHV0aW9uVXJsID0gcmVzb2x1dGlvblVybCB8fCAocGF0aC5pc1BhdGgodXJsKSA/IHBhdGguZ2V0TG9jYXRpb24oKSA6IHBhdGguZ2V0RG9jdW1lbnRVcmwoKSk7CgoJCQkJLy8gSWYgdGhlIHVybCBpcyBhbnl0aGluZyBidXQgYSBzaW1wbGUgc3RyaW5nLCByZW1vdmUgYW55IHByZWNlZGluZyBoYXNoCgkJCQkvLyBlZyAjZm9vL2JhciAtPiBmb28vYmFyCgkJCQkvLyAgICAjZm9vIC0+ICNmb28KCQkJCWNsZWFuZWRVcmwgPSBpc1BhdGggPyBwYXRoLnN0cmlwSGFzaCggdXJsICkgOiB1cmw7CgoJCQkJLy8gSWYgdGhlIHVybCBpcyBhIGZ1bGwgdXJsIHdpdGggYSBoYXNoIGNoZWNrIGlmIHRoZSBwYXJzZWQgaGFzaCBpcyBhIHBhdGgKCQkJCS8vIGlmIGl0IGlzLCBzdHJpcCB0aGUgIywgYW5kIHVzZSBpdCBvdGhlcndpc2UgY29udGludWUgd2l0aG91dCBjaGFuZ2UKCQkJCWNsZWFuZWRVcmwgPSBwYXRoLmlzUGF0aCggdXJpLmhhc2ggKSA/IHBhdGguc3RyaXBIYXNoKCB1cmkuaGFzaCApIDogY2xlYW5lZFVybDsKCgkJCQkvLyBTcGxpdCB0aGUgVUkgU3RhdGUga2V5cyBvZmYgdGhlIGhyZWYKCQkJCXN0YXRlSW5kZXggPSBjbGVhbmVkVXJsLmluZGV4T2YoIHRoaXMudWlTdGF0ZUtleSApOwoKCQkJCS8vIHN0b3JlIHRoZSB1aSBzdGF0ZSBrZXlzIGZvciB1c2UKCQkJCWlmICggc3RhdGVJbmRleCA+IC0xICkgewoJCQkJCXVpU3RhdGUgPSBjbGVhbmVkVXJsLnNsaWNlKCBzdGF0ZUluZGV4ICk7CgkJCQkJY2xlYW5lZFVybCA9IGNsZWFuZWRVcmwuc2xpY2UoIDAsIHN0YXRlSW5kZXggKTsKCQkJCX0KCgkJCQkvLyBtYWtlIHRoZSBjbGVhbmVkVXJsIGFic29sdXRlIHJlbGF0aXZlIHRvIHRoZSByZXNvbHV0aW9uIHVybAoJCQkJaHJlZiA9IHBhdGgubWFrZVVybEFic29sdXRlKCBjbGVhbmVkVXJsLCByZXNvbHV0aW9uVXJsICk7CgoJCQkJLy8gZ3JhYiB0aGUgc2VhcmNoIGZyb20gdGhlIHJlc29sdmVkIHVybCBzaW5jZSBwYXJzaW5nIGZyb20KCQkJCS8vIHRoZSBwYXNzZWQgdXJsIG1heSBub3QgeWllbGQgdGhlIGNvcnJlY3QgcmVzdWx0CgkJCQlzZWFyY2ggPSB0aGlzLnBhcnNlVXJsKCBocmVmICkuc2VhcmNoOwoKCQkJCS8vIFRPRE8gYWxsIHRoaXMgY3JhcCBpcyB0ZXJyaWJsZSwgY2xlYW4gaXQgdXAKCQkJCWlmICggaXNQYXRoICkgewoJCQkJCS8vIHJlamVjdCB0aGUgaGFzaCBpZiBpdCdzIGEgcGF0aCBvciBpdCdzIGp1c3QgYSBkaWFsb2cga2V5CgkJCQkJaWYgKCBwYXRoLmlzUGF0aCggcHJlc2VydmVkSGFzaCApIHx8IHByZXNlcnZlZEhhc2gucmVwbGFjZSgiIyIsICIiKS5pbmRleE9mKCB0aGlzLnVpU3RhdGVLZXkgKSA9PT0gMCkgewoJCQkJCQlwcmVzZXJ2ZWRIYXNoID0gIiI7CgkJCQkJfQoKCQkJCQkvLyBBcHBlbmQgdGhlIFVJIFN0YXRlIGtleXMgd2hlcmUgaXQgZXhpc3RzIGFuZCBpdCdzIGJlZW4gcmVtb3ZlZAoJCQkJCS8vIGZyb20gdGhlIHVybAoJCQkJCWlmICggdWlTdGF0ZSAmJiBwcmVzZXJ2ZWRIYXNoLmluZGV4T2YoIHRoaXMudWlTdGF0ZUtleSApID09PSAtMSkgewoJCQkJCQlwcmVzZXJ2ZWRIYXNoICs9IHVpU3RhdGU7CgkJCQkJfQoKCQkJCQkvLyBtYWtlIHN1cmUgdGhhdCBwb3VuZCBpcyBvbiB0aGUgZnJvbnQgb2YgdGhlIGhhc2gKCQkJCQlpZiAoIHByZXNlcnZlZEhhc2guaW5kZXhPZiggIiMiICkgPT09IC0xICYmIHByZXNlcnZlZEhhc2ggIT09ICIiICkgewoJCQkJCQlwcmVzZXJ2ZWRIYXNoID0gIiMiICsgcHJlc2VydmVkSGFzaDsKCQkJCQl9CgoJCQkJCS8vIHJlY29uc3RydWN0IGVhY2ggb2YgdGhlIHBpZWNlcyB3aXRoIHRoZSBuZXcgc2VhcmNoIHN0cmluZyBhbmQgaGFzaAoJCQkJCWhyZWYgPSBwYXRoLnBhcnNlVXJsKCBocmVmICk7CgkJCQkJaHJlZiA9IGhyZWYucHJvdG9jb2wgKyAiLy8iICsgaHJlZi5ob3N0ICsgaHJlZi5wYXRobmFtZSArIHNlYXJjaCArIHByZXNlcnZlZEhhc2g7CgkJCQl9IGVsc2UgewoJCQkJCWhyZWYgKz0gaHJlZi5pbmRleE9mKCAiIyIgKSA+IC0xID8gdWlTdGF0ZSA6ICIjIiArIHVpU3RhdGU7CgkJCQl9CgoJCQkJcmV0dXJuIGhyZWY7CgkJCX0sCgoJCQlpc1ByZXNlcnZhYmxlSGFzaDogZnVuY3Rpb24oIGhhc2ggKSB7CgkJCQlyZXR1cm4gaGFzaC5yZXBsYWNlKCAiIyIsICIiICkuaW5kZXhPZiggdGhpcy51aVN0YXRlS2V5ICkgPT09IDA7CgkJCX0sCgoJCQkvLyBFc2NhcGUgd2VpcmQgY2hhcmFjdGVycyBpbiB0aGUgaGFzaCBpZiBpdCBpcyB0byBiZSB1c2VkIGFzIGEgc2VsZWN0b3IKCQkJaGFzaFRvU2VsZWN0b3I6IGZ1bmN0aW9uKCBoYXNoICkgewoJCQkJdmFyIGhhc0hhc2ggPSAoIGhhc2guc3Vic3RyaW5nKCAwLCAxICkgPT09ICIjIiApOwoJCQkJaWYgKCBoYXNIYXNoICkgewoJCQkJCWhhc2ggPSBoYXNoLnN1YnN0cmluZyggMSApOwoJCQkJfQoJCQkJcmV0dXJuICggaGFzSGFzaCA/ICIjIiA6ICIiICkgKyBoYXNoLnJlcGxhY2UoIC8oWyEiIyQlJicoKSorLC4vOjs8PT4/QFtcXV5ge3x9fl0pL2csICJcXCQxIiApOwoJCQl9LAoKCQkJLy8gcmV0dXJuIHRoZSBzdWJzdHJpbmcgb2YgYSBmaWxlcGF0aCBiZWZvcmUgdGhlIHN1Yi1wYWdlIGtleSwgZm9yIG1ha2luZwoJCQkvLyBhIHNlcnZlciByZXF1ZXN0CgkJCWdldEZpbGVQYXRoOiBmdW5jdGlvbiggcGF0aCApIHsKCQkJCXZhciBzcGxpdGtleSA9ICImIiArICQubW9iaWxlLnN1YlBhZ2VVcmxLZXk7CgkJCQlyZXR1cm4gcGF0aCAmJiBwYXRoLnNwbGl0KCBzcGxpdGtleSApWzBdLnNwbGl0KCBkaWFsb2dIYXNoS2V5IClbMF07CgkJCX0sCgoJCQkvLyBjaGVjayBpZiB0aGUgc3BlY2lmaWVkIHVybCByZWZlcnMgdG8gdGhlIGZpcnN0IHBhZ2UgaW4gdGhlIG1haW4KCQkJLy8gYXBwbGljYXRpb24gZG9jdW1lbnQuCgkJCWlzRmlyc3RQYWdlVXJsOiBmdW5jdGlvbiggdXJsICkgewoJCQkJLy8gV2Ugb25seSBkZWFsIHdpdGggYWJzb2x1dGUgcGF0aHMuCgkJCQl2YXIgdSA9IHBhdGgucGFyc2VVcmwoIHBhdGgubWFrZVVybEFic29sdXRlKCB1cmwsIHRoaXMuZG9jdW1lbnRCYXNlICkgKSwKCgkJCQkJLy8gRG9lcyB0aGUgdXJsIGhhdmUgdGhlIHNhbWUgcGF0aCBhcyB0aGUgZG9jdW1lbnQ/CgkJCQkJc2FtZVBhdGggPSB1LmhyZWZOb0hhc2ggPT09IHRoaXMuZG9jdW1lbnRVcmwuaHJlZk5vSGFzaCB8fAoJCQkJCQkoIHRoaXMuZG9jdW1lbnRCYXNlRGlmZmVycyAmJgoJCQkJCQkJdS5ocmVmTm9IYXNoID09PSB0aGlzLmRvY3VtZW50QmFzZS5ocmVmTm9IYXNoICksCgoJCQkJCS8vIEdldCB0aGUgZmlyc3QgcGFnZSBlbGVtZW50LgoJCQkJCWZwID0gJC5tb2JpbGUuZmlyc3RQYWdlLAoKCQkJCQkvLyBHZXQgdGhlIGlkIG9mIHRoZSBmaXJzdCBwYWdlIGVsZW1lbnQgaWYgaXQgaGFzIG9uZS4KCQkJCQlmcElkID0gZnAgJiYgZnBbMF0gPyBmcFswXS5pZCA6IHVuZGVmaW5lZDsKCgkJCQkvLyBUaGUgdXJsIHJlZmVycyB0byB0aGUgZmlyc3QgcGFnZSBpZiB0aGUgcGF0aCBtYXRjaGVzIHRoZSBkb2N1bWVudCBhbmQKCQkJCS8vIGl0IGVpdGhlciBoYXMgbm8gaGFzaCB2YWx1ZSwgb3IgdGhlIGhhc2ggaXMgZXhhY3RseSBlcXVhbCB0byB0aGUgaWQKCQkJCS8vIG9mIHRoZSBmaXJzdCBwYWdlIGVsZW1lbnQuCgkJCQlyZXR1cm4gc2FtZVBhdGggJiYKCQkJCQkoICF1Lmhhc2ggfHwKCQkJCQkJdS5oYXNoID09PSAiIyIgfHwKCQkJCQkJKCBmcElkICYmIHUuaGFzaC5yZXBsYWNlKCAvXiMvLCAiIiApID09PSBmcElkICkgKTsKCQkJfSwKCgkJCS8vIFNvbWUgZW1iZWRkZWQgYnJvd3NlcnMsIGxpa2UgdGhlIHdlYiB2aWV3IGluIFBob25lIEdhcCwgYWxsb3cKCQkJLy8gY3Jvc3MtZG9tYWluIFhIUiByZXF1ZXN0cyBpZiB0aGUgZG9jdW1lbnQgZG9pbmcgdGhlIHJlcXVlc3Qgd2FzIGxvYWRlZAoJCQkvLyB2aWEgdGhlIGZpbGU6Ly8gcHJvdG9jb2wuIFRoaXMgaXMgdXN1YWxseSB0byBhbGxvdyB0aGUgYXBwbGljYXRpb24gdG8KCQkJLy8gInBob25lIGhvbWUiIGFuZCBmZXRjaCBhcHAgc3BlY2lmaWMgZGF0YS4gV2Ugbm9ybWFsbHkgbGV0IHRoZSBicm93c2VyCgkJCS8vIGhhbmRsZSBleHRlcm5hbC9jcm9zcy1kb21haW4gdXJscywgYnV0IGlmIHRoZSBhbGxvd0Nyb3NzRG9tYWluUGFnZXMKCQkJLy8gb3B0aW9uIGlzIHRydWUsIHdlIHdpbGwgYWxsb3cgY3Jvc3MtZG9tYWluIGh0dHAvaHR0cHMgcmVxdWVzdHMgdG8gZ28KCQkJLy8gdGhyb3VnaCBvdXIgcGFnZSBsb2FkaW5nIGxvZ2ljLgoJCQlpc1Blcm1pdHRlZENyb3NzRG9tYWluUmVxdWVzdDogZnVuY3Rpb24oIGRvY1VybCwgcmVxVXJsICkgewoJCQkJcmV0dXJuICQubW9iaWxlLmFsbG93Q3Jvc3NEb21haW5QYWdlcyAmJgoJCQkJCShkb2NVcmwucHJvdG9jb2wgPT09ICJmaWxlOiIgfHwgZG9jVXJsLnByb3RvY29sID09PSAiY29udGVudDoiKSAmJgoJCQkJCXJlcVVybC5zZWFyY2goIC9eaHR0cHM/Oi8gKSAhPT0gLTE7CgkJCX0KCQl9OwoKCQlwYXRoLmRvY3VtZW50VXJsID0gcGF0aC5wYXJzZUxvY2F0aW9uKCk7CgoJCSRiYXNlID0gJCggImhlYWQiICkuZmluZCggImJhc2UiICk7CgoJCXBhdGguZG9jdW1lbnRCYXNlID0gJGJhc2UubGVuZ3RoID8KCQkJcGF0aC5wYXJzZVVybCggcGF0aC5tYWtlVXJsQWJzb2x1dGUoICRiYXNlLmF0dHIoICJocmVmIiApLCBwYXRoLmRvY3VtZW50VXJsLmhyZWYgKSApIDoKCQkJcGF0aC5kb2N1bWVudFVybDsKCgkJcGF0aC5kb2N1bWVudEJhc2VEaWZmZXJzID0gKHBhdGguZG9jdW1lbnRVcmwuaHJlZk5vSGFzaCAhPT0gcGF0aC5kb2N1bWVudEJhc2UuaHJlZk5vSGFzaCk7CgoJCS8vcmV0dXJuIHRoZSBvcmlnaW5hbCBkb2N1bWVudCBiYXNlIHVybAoJCXBhdGguZ2V0RG9jdW1lbnRCYXNlID0gZnVuY3Rpb24oIGFzUGFyc2VkT2JqZWN0ICkgewoJCQlyZXR1cm4gYXNQYXJzZWRPYmplY3QgPyAkLmV4dGVuZCgge30sIHBhdGguZG9jdW1lbnRCYXNlICkgOiBwYXRoLmRvY3VtZW50QmFzZS5ocmVmOwoJCX07CgoJCS8vIERFUFJFQ0FURUQgYXMgb2YgMS40LjAgLSByZW1vdmUgaW4gMS41LjAKCQkkLmV4dGVuZCggJC5tb2JpbGUsIHsKCgkJCS8vcmV0dXJuIHRoZSBvcmlnaW5hbCBkb2N1bWVudCB1cmwKCQkJZ2V0RG9jdW1lbnRVcmw6IHBhdGguZ2V0RG9jdW1lbnRVcmwsCgoJCQkvL3JldHVybiB0aGUgb3JpZ2luYWwgZG9jdW1lbnQgYmFzZSB1cmwKCQkJZ2V0RG9jdW1lbnRCYXNlOiBwYXRoLmdldERvY3VtZW50QmFzZQoJCX0pOwp9KSggalF1ZXJ5ICk7CgoKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoJJC5tb2JpbGUuSGlzdG9yeSA9IGZ1bmN0aW9uKCBzdGFjaywgaW5kZXggKSB7CgkJdGhpcy5zdGFjayA9IHN0YWNrIHx8IFtdOwoJCXRoaXMuYWN0aXZlSW5kZXggPSBpbmRleCB8fCAwOwoJfTsKCgkkLmV4dGVuZCgkLm1vYmlsZS5IaXN0b3J5LnByb3RvdHlwZSwgewoJCWdldEFjdGl2ZTogZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLnN0YWNrWyB0aGlzLmFjdGl2ZUluZGV4IF07CgkJfSwKCgkJZ2V0TGFzdDogZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLnN0YWNrWyB0aGlzLnByZXZpb3VzSW5kZXggXTsKCQl9LAoKCQlnZXROZXh0OiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuIHRoaXMuc3RhY2tbIHRoaXMuYWN0aXZlSW5kZXggKyAxIF07CgkJfSwKCgkJZ2V0UHJldjogZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLnN0YWNrWyB0aGlzLmFjdGl2ZUluZGV4IC0gMSBdOwoJCX0sCgoJCS8vIGFkZE5ldyBpcyB1c2VkIHdoZW5ldmVyIGEgbmV3IHBhZ2UgaXMgYWRkZWQKCQlhZGQ6IGZ1bmN0aW9uKCB1cmwsIGRhdGEgKSB7CgkJCWRhdGEgPSBkYXRhIHx8IHt9OwoKCQkJLy9pZiB0aGVyZSdzIGZvcndhcmQgaGlzdG9yeSwgd2lwZSBpdAoJCQlpZiAoIHRoaXMuZ2V0TmV4dCgpICkgewoJCQkJdGhpcy5jbGVhckZvcndhcmQoKTsKCQkJfQoKCQkJLy8gaWYgdGhlIGhhc2ggaXMgaW5jbHVkZWQgaW4gdGhlIGRhdGEgbWFrZSBzdXJlIHRoZSBzaGFwZQoJCQkvLyBpcyBjb25zaXN0ZW50IGZvciBjb21wYXJpc29uCgkJCWlmICggZGF0YS5oYXNoICYmIGRhdGEuaGFzaC5pbmRleE9mKCAiIyIgKSA9PT0gLTEpIHsKCQkJCWRhdGEuaGFzaCA9ICIjIiArIGRhdGEuaGFzaDsKCQkJfQoKCQkJZGF0YS51cmwgPSB1cmw7CgkJCXRoaXMuc3RhY2sucHVzaCggZGF0YSApOwoJCQl0aGlzLmFjdGl2ZUluZGV4ID0gdGhpcy5zdGFjay5sZW5ndGggLSAxOwoJCX0sCgoJCS8vd2lwZSB1cmxzIGFoZWFkIG9mIGFjdGl2ZSBpbmRleAoJCWNsZWFyRm9yd2FyZDogZnVuY3Rpb24oKSB7CgkJCXRoaXMuc3RhY2sgPSB0aGlzLnN0YWNrLnNsaWNlKCAwLCB0aGlzLmFjdGl2ZUluZGV4ICsgMSApOwoJCX0sCgoJCWZpbmQ6IGZ1bmN0aW9uKCB1cmwsIHN0YWNrLCBlYXJseVJldHVybiApIHsKCQkJc3RhY2sgPSBzdGFjayB8fCB0aGlzLnN0YWNrOwoKCQkJdmFyIGVudHJ5LCBpLCBsZW5ndGggPSBzdGFjay5sZW5ndGgsIGluZGV4OwoKCQkJZm9yICggaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyApIHsKCQkJCWVudHJ5ID0gc3RhY2tbaV07CgoJCQkJaWYgKCBkZWNvZGVVUklDb21wb25lbnQodXJsKSA9PT0gZGVjb2RlVVJJQ29tcG9uZW50KGVudHJ5LnVybCkgfHwKCQkJCQlkZWNvZGVVUklDb21wb25lbnQodXJsKSA9PT0gZGVjb2RlVVJJQ29tcG9uZW50KGVudHJ5Lmhhc2gpICkgewoJCQkJCWluZGV4ID0gaTsKCgkJCQkJaWYgKCBlYXJseVJldHVybiApIHsKCQkJCQkJcmV0dXJuIGluZGV4OwoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJcmV0dXJuIGluZGV4OwoJCX0sCgoJCWNsb3Nlc3Q6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCXZhciBjbG9zZXN0LCBhID0gdGhpcy5hY3RpdmVJbmRleDsKCgkJCS8vIEZpcnN0LCB0YWtlIHRoZSBzbGljZSBvZiB0aGUgaGlzdG9yeSBzdGFjayBiZWZvcmUgdGhlIGN1cnJlbnQgaW5kZXggYW5kIHNlYXJjaAoJCQkvLyBmb3IgYSB1cmwgbWF0Y2guIElmIG9uZSBpcyBmb3VuZCwgd2UnbGwgYXZvaWQgYXZvaWQgbG9va2luZyB0aHJvdWdoIGZvcndhcmQgaGlzdG9yeQoJCQkvLyBOT1RFIHRoZSBwcmVmZXJlbmNlIGZvciBiYWNrd2FyZCBoaXN0b3J5IG1vdmVtZW50IGlzIGRyaXZlbiBieSB0aGUgZmFjdCB0aGF0CgkJCS8vICAgICAgbW9zdCBtb2JpbGUgYnJvd3NlcnMgb25seSBoYXZlIGEgZGVkaWNhdGVkIGJhY2sgYnV0dG9uLCBhbmQgdXNlcnMgcmFyZWx5IHVzZQoJCQkvLyAgICAgIHRoZSBmb3J3YXJkIGJ1dHRvbiBpbiBkZXNrdG9wIGJyb3dzZXIgYW55aG93CgkJCWNsb3Nlc3QgPSB0aGlzLmZpbmQoIHVybCwgdGhpcy5zdGFjay5zbGljZSgwLCBhKSApOwoKCQkJLy8gSWYgbm90aGluZyB3YXMgZm91bmQgaW4gYmFja3dhcmQgaGlzdG9yeSBjaGVjayBmb3J3YXJkLiBUaGUgYHRydWVgCgkJCS8vIHZhbHVlIHBhc3NlZCBhcyB0aGUgdGhpcmQgcGFyYW1ldGVyIGNhdXNlcyB0aGUgZmluZCBtZXRob2QgdG8gYnJlYWsKCQkJLy8gb24gdGhlIGZpcnN0IG1hdGNoIGluIHRoZSBmb3J3YXJkIGhpc3Rvcnkgc2xpY2UuIFRoZSBzdGFydGluZyBpbmRleAoJCQkvLyBvZiB0aGUgc2xpY2UgbXVzdCB0aGVuIGJlIGFkZGVkIHRvIHRoZSByZXN1bHQgdG8gZ2V0IHRoZSBlbGVtZW50IGluZGV4CgkJCS8vIGluIHRoZSBvcmlnaW5hbCBoaXN0b3J5IHN0YWNrIDooIDooCgkJCS8vCgkJCS8vIFRPRE8gdGhpcyBpcyBoeXBlciBjb25mdXNpbmcgYW5kIHNob3VsZCBiZSBjbGVhbmVkIHVwICh1Z2ggc28gYmFkKQoJCQlpZiAoIGNsb3Nlc3QgPT09IHVuZGVmaW5lZCApIHsKCQkJCWNsb3Nlc3QgPSB0aGlzLmZpbmQoIHVybCwgdGhpcy5zdGFjay5zbGljZShhKSwgdHJ1ZSApOwoJCQkJY2xvc2VzdCA9IGNsb3Nlc3QgPT09IHVuZGVmaW5lZCA/IGNsb3Nlc3QgOiBjbG9zZXN0ICsgYTsKCQkJfQoKCQkJcmV0dXJuIGNsb3Nlc3Q7CgkJfSwKCgkJZGlyZWN0OiBmdW5jdGlvbiggb3B0cyApIHsKCQkJdmFyIG5ld0FjdGl2ZUluZGV4ID0gdGhpcy5jbG9zZXN0KCBvcHRzLnVybCApLCBhID0gdGhpcy5hY3RpdmVJbmRleDsKCgkJCS8vIHNhdmUgbmV3IHBhZ2UgaW5kZXgsIG51bGwgY2hlY2sgdG8gcHJldmVudCBmYWxzZXkgMCByZXN1bHQKCQkJLy8gcmVjb3JkIHRoZSBwcmV2aW91cyBpbmRleCBmb3IgcmVmZXJlbmNlCgkJCWlmICggbmV3QWN0aXZlSW5kZXggIT09IHVuZGVmaW5lZCApIHsKCQkJCXRoaXMuYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVJbmRleDsKCQkJCXRoaXMucHJldmlvdXNJbmRleCA9IGE7CgkJCX0KCgkJCS8vIGludm9rZSBjYWxsYmFja3Mgd2hlcmUgYXBwcm9wcmlhdGUKCQkJLy8KCQkJLy8gVE9ETyB0aGlzIGlzIGFsc28gY29udm9sdXRlZCBhbmQgY29uZnVzaW5nCgkJCWlmICggbmV3QWN0aXZlSW5kZXggPCBhICkgewoJCQkJKCBvcHRzLnByZXNlbnQgfHwgb3B0cy5iYWNrIHx8ICQubm9vcCApKCB0aGlzLmdldEFjdGl2ZSgpLCAiYmFjayIgKTsKCQkJfSBlbHNlIGlmICggbmV3QWN0aXZlSW5kZXggPiBhICkgewoJCQkJKCBvcHRzLnByZXNlbnQgfHwgb3B0cy5mb3J3YXJkIHx8ICQubm9vcCApKCB0aGlzLmdldEFjdGl2ZSgpLCAiZm9yd2FyZCIgKTsKCQkJfSBlbHNlIGlmICggbmV3QWN0aXZlSW5kZXggPT09IHVuZGVmaW5lZCAmJiBvcHRzLm1pc3NpbmcgKSB7CgkJCQlvcHRzLm1pc3NpbmcoIHRoaXMuZ2V0QWN0aXZlKCkgKTsKCQkJfQoJCX0KCX0pOwp9KSggalF1ZXJ5ICk7CgoKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoJdmFyIHBhdGggPSAkLm1vYmlsZS5wYXRoLAoJCWluaXRpYWxIcmVmID0gbG9jYXRpb24uaHJlZjsKCgkkLm1vYmlsZS5OYXZpZ2F0b3IgPSBmdW5jdGlvbiggaGlzdG9yeSApIHsKCQl0aGlzLmhpc3RvcnkgPSBoaXN0b3J5OwoJCXRoaXMuaWdub3JlSW5pdGlhbEhhc2hDaGFuZ2UgPSB0cnVlOwoKCQkkLm1vYmlsZS53aW5kb3cuYmluZCh7CgkJCSJwb3BzdGF0ZS5oaXN0b3J5IjogJC5wcm94eSggdGhpcy5wb3BzdGF0ZSwgdGhpcyApLAoJCQkiaGFzaGNoYW5nZS5oaXN0b3J5IjogJC5wcm94eSggdGhpcy5oYXNoY2hhbmdlLCB0aGlzICkKCQl9KTsKCX07CgoJJC5leHRlbmQoJC5tb2JpbGUuTmF2aWdhdG9yLnByb3RvdHlwZSwgewoJCXNxdWFzaDogZnVuY3Rpb24oIHVybCwgZGF0YSApIHsKCQkJdmFyIHN0YXRlLCBocmVmLCBoYXNoID0gcGF0aC5pc1BhdGgodXJsKSA/IHBhdGguc3RyaXBIYXNoKHVybCkgOiB1cmw7CgoJCQlocmVmID0gcGF0aC5zcXVhc2goIHVybCApOwoKCQkJLy8gbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhpcyBpbmZvcm1hdGlvbiB3aGVuIGl0IGlzbid0IGV4cGxpY2l0bHkgc2V0IGluIHRoZQoJCQkvLyBkYXRhIG9iamVjdCB0aGF0IHdhcyBwYXNzZWQgdG8gdGhlIHNxdWFzaCBtZXRob2QKCQkJc3RhdGUgPSAkLmV4dGVuZCh7CgkJCQloYXNoOiBoYXNoLAoJCQkJdXJsOiBocmVmCgkJCX0sIGRhdGEpOwoKCQkJLy8gcmVwbGFjZSB0aGUgY3VycmVudCB1cmwgd2l0aCB0aGUgbmV3IGhyZWYgYW5kIHN0b3JlIHRoZSBzdGF0ZQoJCQkvLyBOb3RlIHRoYXQgaW4gc29tZSBjYXNlcyB3ZSBtaWdodCBiZSByZXBsYWNpbmcgYW4gdXJsIHdpdGggdGhlCgkJCS8vIHNhbWUgdXJsLiBXZSBkbyB0aGlzIGFueXdheXMgYmVjYXVzZSB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0CgkJCS8vIGFsbCBvZiBvdXIgaGlzdG9yeSBlbnRyaWVzIGhhdmUgYSBzdGF0ZSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoCgkJCS8vIHRoZW0uIFRoaXMgYWxsb3dzIHVzIHRvIHdvcmsgYXJvdW5kIHRoZSBjYXNlIHdoZXJlICQubW9iaWxlLmJhY2soKQoJCQkvLyBpcyBjYWxsZWQgdG8gdHJhbnNpdGlvbiBmcm9tIGFuIGV4dGVybmFsIHBhZ2UgdG8gYW4gZW1iZWRkZWQgcGFnZS4KCQkJLy8gSW4gdGhhdCBwYXJ0aWN1bGFyIGNhc2UsIGEgaGFzaGNoYW5nZSBldmVudCBpcyAqTk9UKiBnZW5lcmF0ZWQgYnkgdGhlIGJyb3dzZXIuCgkJCS8vIEVuc3VyaW5nIGVhY2ggaGlzdG9yeSBlbnRyeSBoYXMgYSBzdGF0ZSBvYmplY3QgbWVhbnMgdGhhdCBvblBvcFN0YXRlKCkKCQkJLy8gd2lsbCBhbHdheXMgdHJpZ2dlciBvdXIgaGFzaGNoYW5nZSBjYWxsYmFjayBldmVuIHdoZW4gYSBoYXNoY2hhbmdlIGV2ZW50CgkJCS8vIGlzIG5vdCBmaXJlZC4KCQkJd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKCBzdGF0ZSwgc3RhdGUudGl0bGUgfHwgZG9jdW1lbnQudGl0bGUsIGhyZWYgKTsKCgkJCXJldHVybiBzdGF0ZTsKCQl9LAoKCQloYXNoOiBmdW5jdGlvbiggdXJsLCBocmVmICkgewoJCQl2YXIgcGFyc2VkLCBsb2MsIGhhc2gsIHJlc29sdmVkOwoKCQkJLy8gR3JhYiB0aGUgaGFzaCBmb3IgcmVjb3JkaW5nLiBJZiB0aGUgcGFzc2VkIHVybCBpcyBhIHBhdGgKCQkJLy8gd2UgdXNlZCB0aGUgcGFyc2VkIHZlcnNpb24gb2YgdGhlIHNxdWFzaGVkIHVybCB0byByZWNvbnN0cnVjdCwKCQkJLy8gb3RoZXJ3aXNlIHdlIGFzc3VtZSBpdCdzIGEgaGFzaCBhbmQgc3RvcmUgaXQgZGlyZWN0bHkKCQkJcGFyc2VkID0gcGF0aC5wYXJzZVVybCggdXJsICk7CgkJCWxvYyA9IHBhdGgucGFyc2VMb2NhdGlvbigpOwoKCQkJaWYgKCBsb2MucGF0aG5hbWUgKyBsb2Muc2VhcmNoID09PSBwYXJzZWQucGF0aG5hbWUgKyBwYXJzZWQuc2VhcmNoICkgewoJCQkJLy8gSWYgdGhlIHBhdGhuYW1lIGFuZCBzZWFyY2ggb2YgdGhlIHBhc3NlZCB1cmwgaXMgaWRlbnRpY2FsIHRvIHRoZSBjdXJyZW50IGxvYwoJCQkJLy8gdGhlbiB3ZSBtdXN0IHVzZSB0aGUgaGFzaC4gT3RoZXJ3aXNlIHRoZXJlIHdpbGwgYmUgbm8gZXZlbnQKCQkJCS8vIGVnLCB1cmwgPSAiL2Zvby9iYXI/YmF6I2JhbmciLCBsb2NhdGlvbi5ocmVmID0gImh0dHA6Ly9leGFtcGxlLmNvbS9mb28vYmFyP2JheiIKCQkJCWhhc2ggPSBwYXJzZWQuaGFzaCA/IHBhcnNlZC5oYXNoIDogcGFyc2VkLnBhdGhuYW1lICsgcGFyc2VkLnNlYXJjaDsKCQkJfSBlbHNlIGlmICggcGF0aC5pc1BhdGgodXJsKSApIHsKCQkJCXJlc29sdmVkID0gcGF0aC5wYXJzZVVybCggaHJlZiApOwoJCQkJLy8gSWYgdGhlIHBhc3NlZCB1cmwgaXMgYSBwYXRoLCBtYWtlIGl0IGRvbWFpbiByZWxhdGl2ZSBhbmQgcmVtb3ZlIGFueSB0cmFpbGluZyBoYXNoCgkJCQloYXNoID0gcmVzb2x2ZWQucGF0aG5hbWUgKyByZXNvbHZlZC5zZWFyY2ggKyAocGF0aC5pc1ByZXNlcnZhYmxlSGFzaCggcmVzb2x2ZWQuaGFzaCApPyByZXNvbHZlZC5oYXNoLnJlcGxhY2UoICIjIiwgIiIgKSA6ICIiKTsKCQkJfSBlbHNlIHsKCQkJCWhhc2ggPSB1cmw7CgkJCX0KCgkJCXJldHVybiBoYXNoOwoJCX0sCgoJCS8vIFRPRE8gcmVjb25zaWRlciBuYW1lCgkJZ286IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIG5vRXZlbnRzICkgewoJCQl2YXIgc3RhdGUsIGhyZWYsIGhhc2gsIHBvcHN0YXRlRXZlbnQsCgkJCQlpc1BvcFN0YXRlRXZlbnQgPSAkLmV2ZW50LnNwZWNpYWwubmF2aWdhdGUuaXNQdXNoU3RhdGVFbmFibGVkKCk7CgoJCQkvLyBHZXQgdGhlIHVybCBhcyBpdCB3b3VsZCBsb29rIHNxdWFzaGVkIG9uIHRvIHRoZSBjdXJyZW50IHJlc29sdXRpb24gdXJsCgkJCWhyZWYgPSBwYXRoLnNxdWFzaCggdXJsICk7CgoJCQkvLyBzb3J0IG91dCB3aGF0IHRoZSBoYXNoIHNvdWxkIGJlIGZyb20gdGhlIHVybAoJCQloYXNoID0gdGhpcy5oYXNoKCB1cmwsIGhyZWYgKTsKCgkJCS8vIEhlcmUgd2UgcHJldmVudCB0aGUgbmV4dCBoYXNoIGNoYW5nZSBvciBwb3BzdGF0ZSBldmVudCBmcm9tIGRvaW5nIGFueQoJCQkvLyBoaXN0b3J5IG1hbmFnZW1lbnQuIEluIHRoZSBjYXNlIG9mIGhhc2hjaGFuZ2Ugd2UgZG9uJ3Qgc3dhbGxvdyBpdAoJCQkvLyBpZiB0aGVyZSB3aWxsIGJlIG5vIGhhc2hjaGFuZ2UgZmlyZWQgKHNpbmNlIHRoYXQgd29uJ3QgcmVzZXQgdGhlIHZhbHVlKQoJCQkvLyBhbmQgd2lsbCBzd2FsbG93IHRoZSBmb2xsb3dpbmcgaGFzaGNoYW5nZQoJCQlpZiAoIG5vRXZlbnRzICYmIGhhc2ggIT09IHBhdGguc3RyaXBIYXNoKHBhdGgucGFyc2VMb2NhdGlvbigpLmhhc2gpICkgewoJCQkJdGhpcy5wcmV2ZW50TmV4dEhhc2hDaGFuZ2UgPSBub0V2ZW50czsKCQkJfQoKCQkJLy8gSU1QT1JUQU5UIGluIHRoZSBjYXNlIHdoZXJlIHBvcHN0YXRlIGlzIHN1cHBvcnRlZCB0aGUgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQKCQkJLy8gICAgICBkaXJlY3RseSwgc3RvcHBpbmcgZnVydGhlciBleGVjdXRpb24gLSBpZSwgaW50ZXJ1cHRpbmcgdGhlIGZsb3cgb2YgdGhpcwoJCQkvLyAgICAgIG1ldGhvZCBjYWxsIHRvIGZpcmUgYmluZGluZ3MgYXQgdGhpcyBleHByZXNzaW9uLiBCZWxvdyB0aGUgbmF2aWdhdGUgbWV0aG9kCgkJCS8vICAgICAgdGhlcmUgaXMgYSBiaW5kaW5nIHRvIGNhdGNoIHRoaXMgZXZlbnQgYW5kIHN0b3AgaXRzIHByb3BhZ2F0aW9uLgoJCQkvLwoJCQkvLyAgICAgIFdlIHRoZW4gdHJpZ2dlciBhIG5ldyBwb3BzdGF0ZSBldmVudCBvbiB0aGUgd2luZG93IHdpdGggYSBudWxsIHN0YXRlCgkJCS8vICAgICAgc28gdGhhdCB0aGUgbmF2aWdhdGUgZXZlbnRzIGNhbiBjb25jbHVkZSB0aGVpciB3b3JrIHByb3Blcmx5CgkJCS8vCgkJCS8vIGlmIHRoZSB1cmwgaXMgYSBwYXRoIHdlIHdhbnQgdG8gcHJlc2VydmUgdGhlIHF1ZXJ5IHBhcmFtcyB0aGF0IGFyZSBhdmFpbGFibGUgb24KCQkJLy8gdGhlIGN1cnJlbnQgdXJsLgoJCQl0aGlzLnByZXZlbnRIYXNoQXNzaWduUG9wU3RhdGUgPSB0cnVlOwoJCQl3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7CgoJCQkvLyBJZiBwb3BzdGF0ZSBpcyBlbmFibGVkIGFuZCB0aGUgYnJvd3NlciB0cmlnZ2VycyBgcG9wc3RhdGVgIGV2ZW50cyB3aGVuIHRoZSBoYXNoCgkJCS8vIGlzIHNldCAodGhpcyBvZnRlbiBoYXBwZW5zIGltbWVkaWF0ZWx5IGluIGJyb3dzZXJzIGxpa2UgQ2hyb21lKSwgdGhlbiB0aGUKCQkJLy8gdGhpcyBmbGFnIHdpbGwgYmUgc2V0IHRvIGZhbHNlIGFscmVhZHkuIElmIGl0J3MgYSBicm93c2VyIHRoYXQgZG9lcyBub3QgdHJpZ2dlcgoJCQkvLyBhIGBwb3BzdGF0ZWAgb24gaGFzaCBhc3NpZ25lbWVudCBvciBgcmVwbGFjZVN0YXRlYCB0aGVuIHdlIG5lZWQgYXZvaWQgdGhlIGJyYW5jaAoJCQkvLyB0aGF0IHN3YWxsb3dzIHRoZSBldmVudCBjcmVhdGVkIGJ5IHRoZSBwb3BzdGF0ZSBnZW5lcmF0ZWQgYnkgdGhlIGhhc2ggYXNzaWdubWVudAoJCQkvLyBBdCB0aGUgdGltZSBvZiB0aGlzIHdyaXRpbmcgdGhpcyBoYXBwZW5zIHdpdGggT3BlcmEgMTIgYW5kIHNvbWUgdmVyc2lvbiBvZiBJRQoJCQl0aGlzLnByZXZlbnRIYXNoQXNzaWduUG9wU3RhdGUgPSBmYWxzZTsKCgkJCXN0YXRlID0gJC5leHRlbmQoewoJCQkJdXJsOiBocmVmLAoJCQkJaGFzaDogaGFzaCwKCQkJCXRpdGxlOiBkb2N1bWVudC50aXRsZQoJCQl9LCBkYXRhKTsKCgkJCWlmICggaXNQb3BTdGF0ZUV2ZW50ICkgewoJCQkJcG9wc3RhdGVFdmVudCA9IG5ldyAkLkV2ZW50KCAicG9wc3RhdGUiICk7CgkJCQlwb3BzdGF0ZUV2ZW50Lm9yaWdpbmFsRXZlbnQgPSB7CgkJCQkJdHlwZTogInBvcHN0YXRlIiwKCQkJCQlzdGF0ZTogbnVsbAoJCQkJfTsKCgkJCQl0aGlzLnNxdWFzaCggdXJsLCBzdGF0ZSApOwoKCQkJCS8vIFRyaWdnZXIgYSBuZXcgZmF1eCBwb3BzdGF0ZSBldmVudCB0byByZXBsYWNlIHRoZSBvbmUgdGhhdCB3ZQoJCQkJLy8gY2F1Z2h0IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUgaGFzaCBzZXR0aW5nIGFib3ZlLgoJCQkJaWYgKCAhbm9FdmVudHMgKSB7CgkJCQkJdGhpcy5pZ25vcmVQb3BTdGF0ZSA9IHRydWU7CgkJCQkJJC5tb2JpbGUud2luZG93LnRyaWdnZXIoIHBvcHN0YXRlRXZlbnQgKTsKCQkJCX0KCQkJfQoKCQkJLy8gcmVjb3JkIHRoZSBoaXN0b3J5IGVudHJ5IHNvIHRoYXQgdGhlIGluZm9ybWF0aW9uIGNhbiBiZSBpbmNsdWRlZAoJCQkvLyBpbiBoYXNoY2hhbmdlIGV2ZW50IGRyaXZlbiBuYXZpZ2F0ZSBldmVudHMgaW4gYSBzaW1pbGFyIGZhc2hpb24gdG8KCQkJLy8gdGhlIHN0YXRlIHRoYXQncyBwcm92aWRlZCBieSBwb3BzdGF0ZQoJCQl0aGlzLmhpc3RvcnkuYWRkKCBzdGF0ZS51cmwsIHN0YXRlICk7CgkJfSwKCgkJLy8gVGhpcyBiaW5kaW5nIGlzIGludGVuZGVkIHRvIGNhdGNoIHRoZSBwb3BzdGF0ZSBldmVudHMgdGhhdCBhcmUgZmlyZWQKCQkvLyB3aGVuIGV4ZWN1dGlvbiBvZiB0aGUgYCQubmF2aWdhdGVgIG1ldGhvZCBzdG9wcyBhdCB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHVybDsKCQkvLyBhbmQgY29tcGxldGVseSBwcmV2ZW50IHRoZW0gZnJvbSBwcm9wYWdhdGluZy4gVGhlIHBvcHN0YXRlIGV2ZW50IHdpbGwgdGhlbiBiZQoJCS8vIHJldHJpZ2dlcmVkIGFmdGVyIGV4ZWN1dGlvbiByZXN1bWVzCgkJLy8KCQkvLyBUT0RPIGdyYWIgdGhlIG9yaWdpbmFsIGV2ZW50IGhlcmUgYW5kIHVzZSBpdCBmb3IgdGhlIHN5bnRoZXRpYyBldmVudCBpbiB0aGUKCQkvLyAgICAgIHNlY29uZCBoYWxmIG9mIHRoZSBuYXZpZ2F0ZSBleGVjdXRpb24gdGhhdCB3aWxsIGZvbGxvdyB0aGlzIGJpbmRpbmcKCQlwb3BzdGF0ZTogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQl2YXIgaGFzaCwgc3RhdGU7CgoJCQkvLyBQYXJ0bHkgdG8gc3VwcG9ydCBvdXIgdGVzdCBzdWl0ZSB3aGljaCBtYW51YWxseSBhbHRlcnMgdGhlIHN1cHBvcnQKCQkJLy8gdmFsdWUgdG8gdGVzdCBoYXNoY2hhbmdlLiBQYXJ0bHkgdG8gcHJldmVudCBhbGwgYXJvdW5kIHdlaXJkbmVzcwoJCQlpZiAoICEkLmV2ZW50LnNwZWNpYWwubmF2aWdhdGUuaXNQdXNoU3RhdGVFbmFibGVkKCkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIElmIHRoaXMgaXMgdGhlIHBvcHN0YXRlIHRyaWdnZXJlZCBieSB0aGUgYWN0dWFsIGFsdGVyYXRpb24gb2YgdGhlIGhhc2gKCQkJLy8gcHJldmVudCBpdCBjb21wbGV0ZWx5LiBIaXN0b3J5IGlzIHRyYWNrZWQgbWFudWFsbHkKCQkJaWYgKCB0aGlzLnByZXZlbnRIYXNoQXNzaWduUG9wU3RhdGUgKSB7CgkJCQl0aGlzLnByZXZlbnRIYXNoQXNzaWduUG9wU3RhdGUgPSBmYWxzZTsKCQkJCWV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpOwoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBpZiB0aGlzIGlzIHRoZSBwb3BzdGF0ZSB0cmlnZ2VyZWQgYWZ0ZXIgdGhlIGByZXBsYWNlU3RhdGVgIGNhbGwgaW4gdGhlIGdvCgkJCS8vIG1ldGhvZCwgdGhlbiBzaW1wbHkgaWdub3JlIGl0LiBUaGUgaGlzdG9yeSBlbnRyeSBoYXMgYWxyZWFkeSBiZWVuIGNhcHR1cmVkCgkJCWlmICggdGhpcy5pZ25vcmVQb3BTdGF0ZSApIHsKCQkJCXRoaXMuaWdub3JlUG9wU3RhdGUgPSBmYWxzZTsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gSWYgdGhlcmUgaXMgbm8gc3RhdGUsIGFuZCB0aGUgaGlzdG9yeSBzdGFjayBsZW5ndGggaXMgb25lIHdlcmUKCQkJLy8gcHJvYmFibHkgZ2V0dGluZyB0aGUgcGFnZSBsb2FkIHBvcHN0YXRlIGZpcmVkIGJ5IGJyb3dzZXJzIGxpa2UgY2hyb21lCgkJCS8vIGF2b2lkIGl0IGFuZCBzZXQgdGhlIG9uZSB0aW1lIGZsYWcgdG8gZmFsc2UuCgkJCS8vIFRPRE86IERvIHdlIHJlYWxseSBuZWVkIGFsbCB0aGVzZSBjb25kaXRpb25zPyBDb21wYXJpbmcgbG9jYXRpb24gaHJlZnMKCQkJLy8gc2hvdWxkIGJlIHN1ZmZpY2llbnQuCgkJCWlmICggIWV2ZW50Lm9yaWdpbmFsRXZlbnQuc3RhdGUgJiYKCQkJCXRoaXMuaGlzdG9yeS5zdGFjay5sZW5ndGggPT09IDEgJiYKCQkJCXRoaXMuaWdub3JlSW5pdGlhbEhhc2hDaGFuZ2UgKSB7CgkJCQl0aGlzLmlnbm9yZUluaXRpYWxIYXNoQ2hhbmdlID0gZmFsc2U7CgoJCQkJaWYgKCBsb2NhdGlvbi5ocmVmID09PSBpbml0aWFsSHJlZiApIHsKCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCXJldHVybjsKCQkJCX0KCQkJfQoKCQkJLy8gYWNjb3VudCBmb3IgZGlyZWN0IG1hbmlwdWxhdGlvbiBvZiB0aGUgaGFzaC4gVGhhdCBpcywgd2Ugd2lsbCByZWNlaXZlIGEgcG9wc3RhdGUKCQkJLy8gd2hlbiB0aGUgaGFzaCBpcyBjaGFuZ2VkIGJ5IGFzc2lnbm1lbnQsIGFuZCBpdCB3b24ndCBoYXZlIGEgc3RhdGUgYXNzb2NpYXRlZC4gV2UKCQkJLy8gdGhlbiBuZWVkIHRvIHNxdWFzaCB0aGUgaGFzaC4gU2VlIGJlbG93IGZvciBoYW5kbGluZyBvZiBoYXNoIGFzc2lnbm1lbnQgdGhhdAoJCQkvLyBtYXRjaGVzIGFuIGV4aXN0aW5nIGhpc3RvcnkgZW50cnkKCQkJLy8gVE9ETyBpdCBtaWdodCBiZSBiZXR0ZXIgdG8gb25seSBhZGQgdG8gdGhlIGhpc3Rvcnkgc3RhY2sKCQkJLy8gICAgICB3aGVuIHRoZSBoYXNoIGlzIGFkamFjZW50IHRvIHRoZSBhY3RpdmUgaGlzdG9yeSBlbnRyeQoJCQloYXNoID0gcGF0aC5wYXJzZUxvY2F0aW9uKCkuaGFzaDsKCQkJaWYgKCAhZXZlbnQub3JpZ2luYWxFdmVudC5zdGF0ZSAmJiBoYXNoICkgewoJCQkJLy8gc3F1YXNoIHRoZSBoYXNoIHRoYXQncyBiZWVuIGFzc2lnbmVkIG9uIHRoZSBVUkwgd2l0aCByZXBsYWNlU3RhdGUKCQkJCS8vIGFsc28gZ3JhYiB0aGUgcmVzdWx0aW5nIHN0YXRlIG9iamVjdCBmb3Igc3RvcmFnZQoJCQkJc3RhdGUgPSB0aGlzLnNxdWFzaCggaGFzaCApOwoKCQkJCS8vIHJlY29yZCB0aGUgbmV3IGhhc2ggYXMgYW4gYWRkaXRpb25hbCBoaXN0b3J5IGVudHJ5CgkJCQkvLyB0byBtYXRjaCB0aGUgYnJvd3NlcidzIHRyZWF0bWVudCBvZiBoYXNoIGFzc2lnbm1lbnQKCQkJCXRoaXMuaGlzdG9yeS5hZGQoIHN0YXRlLnVybCwgc3RhdGUgKTsKCgkJCQkvLyBwYXNzIHRoZSBuZXdseSBjcmVhdGVkIHN0YXRlIGluZm9ybWF0aW9uCgkJCQkvLyBhbG9uZyB3aXRoIHRoZSBldmVudAoJCQkJZXZlbnQuaGlzdG9yeVN0YXRlID0gc3RhdGU7CgoJCQkJLy8gZG8gbm90IGFsdGVyIGhpc3RvcnksIHdlJ3ZlIGFkZGVkIGEgbmV3IGhpc3RvcnkgZW50cnkKCQkJCS8vIHNvIHdlIGtub3cgd2hlcmUgd2UgYXJlCgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIElmIGFsbCBlbHNlIGZhaWxzIHRoaXMgaXMgYSBwb3BzdGF0ZSB0aGF0IGNvbWVzIGZyb20gdGhlIGJhY2sgb3IgZm9yd2FyZCBidXR0b25zCgkJCS8vIG1ha2Ugc3VyZSB0byBzZXQgdGhlIHN0YXRlIG9mIG91ciBoaXN0b3J5IHN0YWNrIHByb3Blcmx5LCBhbmQgcmVjb3JkIHRoZSBkaXJlY3Rpb25hbGl0eQoJCQl0aGlzLmhpc3RvcnkuZGlyZWN0KHsKCQkJCXVybDogKGV2ZW50Lm9yaWdpbmFsRXZlbnQuc3RhdGUgfHwge30pLnVybCB8fCBoYXNoLAoKCQkJCS8vIFdoZW4gdGhlIHVybCBpcyBlaXRoZXIgZm9yd2FyZCBvciBiYWNrd2FyZCBpbiBoaXN0b3J5IGluY2x1ZGUgdGhlIGVudHJ5CgkJCQkvLyBhcyBkYXRhIG9uIHRoZSBldmVudCBvYmplY3QgZm9yIG1lcmdpbmcgYXMgZGF0YSBpbiB0aGUgbmF2aWdhdGUgZXZlbnQKCQkJCXByZXNlbnQ6IGZ1bmN0aW9uKCBoaXN0b3J5RW50cnksIGRpcmVjdGlvbiApIHsKCQkJCQkvLyBtYWtlIHN1cmUgdG8gY3JlYXRlIGEgbmV3IG9iamVjdCB0byBwYXNzIGRvd24gYXMgdGhlIG5hdmlnYXRlIGV2ZW50IGRhdGEKCQkJCQlldmVudC5oaXN0b3J5U3RhdGUgPSAkLmV4dGVuZCh7fSwgaGlzdG9yeUVudHJ5KTsKCQkJCQlldmVudC5oaXN0b3J5U3RhdGUuZGlyZWN0aW9uID0gZGlyZWN0aW9uOwoJCQkJfQoJCQl9KTsKCQl9LAoKCQkvLyBOT1RFIG11c3QgYmluZCBiZWZvcmUgYG5hdmlnYXRlYCBzcGVjaWFsIGV2ZW50IGhhc2hjaGFuZ2UgYmluZGluZyBvdGhlcndpc2UgdGhlCgkJLy8gICAgICBuYXZpZ2F0aW9uIGRhdGEgd29uJ3QgYmUgYXR0YWNoZWQgdG8gdGhlIGhhc2hjaGFuZ2UgZXZlbnQgaW4gdGltZSBmb3IgdGhvc2UKCQkvLyAgICAgIGJpbmRpbmdzIHRvIGF0dGFjaCBpdCB0byB0aGUgYG5hdmlnYXRlYCBzcGVjaWFsIGV2ZW50CgkJLy8gVE9ETyBhZGQgYSBjaGVjayBoZXJlIHRoYXQgYGhhc2hjaGFuZ2UubmF2aWdhdGVgIGlzIGJvdW5kIGFscmVhZHkgb3RoZXJ3aXNlIGl0J3MKCQkvLyAgICAgIGJyb2tlbiAoZXhjZXB0aW9uPykKCQloYXNoY2hhbmdlOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCXZhciBoaXN0b3J5LCBoYXNoOwoKCQkJLy8gSWYgaGFzaGNoYW5nZSBsaXN0ZW5pbmcgaXMgZXhwbGljaXRseSBkaXNhYmxlZCBvciBwdXNoc3RhdGUgaXMgc3VwcG9ydGVkCgkJCS8vIGF2b2lkIG1ha2luZyB1c2Ugb2YgdGhlIGhhc2hjaGFuZ2UgaGFuZGxlci4KCQkJaWYgKCEkLmV2ZW50LnNwZWNpYWwubmF2aWdhdGUuaXNIYXNoQ2hhbmdlRW5hYmxlZCgpIHx8CgkJCQkkLmV2ZW50LnNwZWNpYWwubmF2aWdhdGUuaXNQdXNoU3RhdGVFbmFibGVkKCkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIE9uIG9jY2FzaW9uIGV4cGxpY2l0bHkgd2FudCB0byBwcmV2ZW50IHRoZSBuZXh0IGhhc2ggZnJvbSBwcm9wb2dhdGluZyBiZWNhdXNlIHdlIG9ubHkKCQkJLy8gd2l0aCB0byBhbHRlciB0aGUgdXJsIHRvIHJlcHJlc2VudCB0aGUgbmV3IHN0YXRlIGRvIHNvIGhlcmUKCQkJaWYgKCB0aGlzLnByZXZlbnROZXh0SGFzaENoYW5nZSApIHsKCQkJCXRoaXMucHJldmVudE5leHRIYXNoQ2hhbmdlID0gZmFsc2U7CgkJCQlldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsKCQkJCXJldHVybjsKCQkJfQoKCQkJaGlzdG9yeSA9IHRoaXMuaGlzdG9yeTsKCQkJaGFzaCA9IHBhdGgucGFyc2VMb2NhdGlvbigpLmhhc2g7CgoJCQkvLyBJZiB0aGlzIGlzIGEgaGFzaGNoYW5nZSBjYXVzZWQgYnkgdGhlIGJhY2sgb3IgZm9yd2FyZCBidXR0b24KCQkJLy8gbWFrZSBzdXJlIHRvIHNldCB0aGUgc3RhdGUgb2Ygb3VyIGhpc3Rvcnkgc3RhY2sgcHJvcGVybHkKCQkJdGhpcy5oaXN0b3J5LmRpcmVjdCh7CgkJCQl1cmw6IGhhc2gsCgoJCQkJLy8gV2hlbiB0aGUgdXJsIGlzIGVpdGhlciBmb3J3YXJkIG9yIGJhY2t3YXJkIGluIGhpc3RvcnkgaW5jbHVkZSB0aGUgZW50cnkKCQkJCS8vIGFzIGRhdGEgb24gdGhlIGV2ZW50IG9iamVjdCBmb3IgbWVyZ2luZyBhcyBkYXRhIGluIHRoZSBuYXZpZ2F0ZSBldmVudAoJCQkJcHJlc2VudDogZnVuY3Rpb24oIGhpc3RvcnlFbnRyeSwgZGlyZWN0aW9uICkgewoJCQkJCS8vIG1ha2Ugc3VyZSB0byBjcmVhdGUgYSBuZXcgb2JqZWN0IHRvIHBhc3MgZG93biBhcyB0aGUgbmF2aWdhdGUgZXZlbnQgZGF0YQoJCQkJCWV2ZW50Lmhhc2hjaGFuZ2VTdGF0ZSA9ICQuZXh0ZW5kKHt9LCBoaXN0b3J5RW50cnkpOwoJCQkJCWV2ZW50Lmhhc2hjaGFuZ2VTdGF0ZS5kaXJlY3Rpb24gPSBkaXJlY3Rpb247CgkJCQl9LAoKCQkJCS8vIFdoZW4gd2UgZG9uJ3QgZmluZCBhIGhhc2ggaW4gb3VyIGhpc3RvcnkgY2xlYXJseSB3ZSdyZSBhaW1pbmcgdG8gZ28gdGhlcmUKCQkJCS8vIHJlY29yZCB0aGUgZW50cnkgYXMgbmV3IGZvciBmdXR1cmUgdHJhdmVyc2FsCgkJCQkvLwoJCQkJLy8gTk9URSBpdCdzIG5vdCBlbnRpcmVseSBjbGVhciB0aGF0IHRoaXMgaXMgdGhlIHJpZ2h0IHRoaW5nIHRvIGRvIGdpdmVuIHRoYXQgd2UKCQkJCS8vICAgICAgY2FuJ3Qga25vdyB0aGUgdXNlcnMgaW50ZW50aW9uLiBJdCBtaWdodCBiZSBiZXR0ZXIgdG8gZXhwbGljaXRseSBfbm90XwoJCQkJLy8gICAgICBzdXBwb3J0IGxvY2F0aW9uLmhhc2ggYXNzaWdubWVudCBpbiBwcmVmZXJlbmNlIHRvICQubmF2aWdhdGUgY2FsbHMKCQkJCS8vIFRPRE8gZmlyc3QgYXJnIHRvIGFkZCBzaG91bGQgYmUgdGhlIGhyZWYsIGJ1dCBpdCBjYXVzZXMgaXNzdWVzIGluIGlkZW50aWZ5aW5nCgkJCQkvLyAgICAgIGVtYmVkZWQgcGFnZXMKCQkJCW1pc3Npbmc6IGZ1bmN0aW9uKCkgewoJCQkJCWhpc3RvcnkuYWRkKCBoYXNoLCB7CgkJCQkJCWhhc2g6IGhhc2gsCgkJCQkJCXRpdGxlOiBkb2N1bWVudC50aXRsZQoJCQkJCX0pOwoJCQkJfQoJCQl9KTsKCQl9Cgl9KTsKfSkoIGpRdWVyeSApOwoKCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCS8vIFRPRE8gY29uc2lkZXIgcXVldWVpbmcgbmF2aWdhdGlvbiBhY3Rpdml0eSB1bnRpbCBwcmV2aW91cyBhY3Rpdml0aWVzIGhhdmUgY29tcGxldGVkCgkvLyAgICAgIHNvIHRoYXQgZW5kIHVzZXJzIGRvbid0IGhhdmUgdG8gdGhpbmsgYWJvdXQgaXQuIFB1bnRpbmcgZm9yIG5vdwoJLy8gVE9ETyAhISBtb3ZlIHRoZSBldmVudCBiaW5kaW5ncyBpbnRvIGNhbGxiYWNrcyBvbiB0aGUgbmF2aWdhdGUgZXZlbnQKCSQubW9iaWxlLm5hdmlnYXRlID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgbm9FdmVudHMgKSB7CgkJJC5tb2JpbGUubmF2aWdhdGUubmF2aWdhdG9yLmdvKCB1cmwsIGRhdGEsIG5vRXZlbnRzICk7Cgl9OwoKCS8vIGV4cG9zZSB0aGUgaGlzdG9yeSBvbiB0aGUgbmF2aWdhdGUgbWV0aG9kIGluIGFudGljaXBhdGlvbiBvZiBmdWxsIGludGVncmF0aW9uIHdpdGgKCS8vIGV4aXN0aW5nIG5hdmlnYXRpb24gZnVuY3Rpb25hbHR5IHRoYXQgaXMgdGlnaHRseSBjb3VwbGVkIHRvIHRoZSBoaXN0b3J5IGluZm9ybWF0aW9uCgkkLm1vYmlsZS5uYXZpZ2F0ZS5oaXN0b3J5ID0gbmV3ICQubW9iaWxlLkhpc3RvcnkoKTsKCgkvLyBpbnN0YW50aWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgbmF2aWdhdG9yIGZvciB1c2Ugd2l0aGluIHRoZSAkLm5hdmlnYXRlIG1ldGhvZAoJJC5tb2JpbGUubmF2aWdhdGUubmF2aWdhdG9yID0gbmV3ICQubW9iaWxlLk5hdmlnYXRvciggJC5tb2JpbGUubmF2aWdhdGUuaGlzdG9yeSApOwoKCXZhciBsb2MgPSAkLm1vYmlsZS5wYXRoLnBhcnNlTG9jYXRpb24oKTsKCSQubW9iaWxlLm5hdmlnYXRlLmhpc3RvcnkuYWRkKCBsb2MuaHJlZiwge2hhc2g6IGxvYy5oYXNofSApOwp9KSggalF1ZXJ5ICk7CgoKLy8gVGhpcyBwbHVnaW4gaXMgYW4gZXhwZXJpbWVudCBmb3IgYWJzdHJhY3RpbmcgYXdheSB0aGUgdG91Y2ggYW5kIG1vdXNlCi8vIGV2ZW50cyBzbyB0aGF0IGRldmVsb3BlcnMgZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCB3aGljaCBtZXRob2Qgb2YgaW5wdXQKLy8gdGhlIGRldmljZSB0aGVpciBkb2N1bWVudCBpcyBsb2FkZWQgb24gc3VwcG9ydHMuCi8vCi8vIFRoZSBpZGVhIGhlcmUgaXMgdG8gYWxsb3cgdGhlIGRldmVsb3BlciB0byByZWdpc3RlciBsaXN0ZW5lcnMgZm9yIHRoZQovLyBiYXNpYyBtb3VzZSBldmVudHMsIHN1Y2ggYXMgbW91c2Vkb3duLCBtb3VzZW1vdmUsIG1vdXNldXAsIGFuZCBjbGljaywKLy8gYW5kIHRoZSBwbHVnaW4gd2lsbCB0YWtlIGNhcmUgb2YgcmVnaXN0ZXJpbmcgdGhlIGNvcnJlY3QgbGlzdGVuZXJzCi8vIGJlaGluZCB0aGUgc2NlbmVzIHRvIGludm9rZSB0aGUgbGlzdGVuZXIgYXQgdGhlIGZhc3Rlc3QgcG9zc2libGUgdGltZQovLyBmb3IgdGhhdCBkZXZpY2UsIHdoaWxlIHN0aWxsIHJldGFpbmluZyB0aGUgb3JkZXIgb2YgZXZlbnQgZmlyaW5nIGluCi8vIHRoZSB0cmFkaXRpb25hbCBtb3VzZSBlbnZpcm9ubWVudCwgc2hvdWxkIG11bHRpcGxlIGhhbmRsZXJzIGJlIHJlZ2lzdGVyZWQKLy8gb24gdGhlIHNhbWUgZWxlbWVudCBmb3IgZGlmZmVyZW50IGV2ZW50cy4KLy8KLy8gVGhlIGN1cnJlbnQgdmVyc2lvbiBleHBvc2VzIHRoZSBmb2xsb3dpbmcgdmlydHVhbCBldmVudHMgdG8galF1ZXJ5IGJpbmQgbWV0aG9kczoKLy8gInZtb3VzZW92ZXIgdm1vdXNlZG93biB2bW91c2Vtb3ZlIHZtb3VzZXVwIHZjbGljayB2bW91c2VvdXQgdm1vdXNlY2FuY2VsIgoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQgKSB7Cgp2YXIgZGF0YVByb3BlcnR5TmFtZSA9ICJ2aXJ0dWFsTW91c2VCaW5kaW5ncyIsCgl0b3VjaFRhcmdldFByb3BlcnR5TmFtZSA9ICJ2aXJ0dWFsVG91Y2hJRCIsCgl2aXJ0dWFsRXZlbnROYW1lcyA9ICJ2bW91c2VvdmVyIHZtb3VzZWRvd24gdm1vdXNlbW92ZSB2bW91c2V1cCB2Y2xpY2sgdm1vdXNlb3V0IHZtb3VzZWNhbmNlbCIuc3BsaXQoICIgIiApLAoJdG91Y2hFdmVudFByb3BzID0gImNsaWVudFggY2xpZW50WSBwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkiLnNwbGl0KCAiICIgKSwKCW1vdXNlSG9va1Byb3BzID0gJC5ldmVudC5tb3VzZUhvb2tzID8gJC5ldmVudC5tb3VzZUhvb2tzLnByb3BzIDogW10sCgltb3VzZUV2ZW50UHJvcHMgPSAkLmV2ZW50LnByb3BzLmNvbmNhdCggbW91c2VIb29rUHJvcHMgKSwKCWFjdGl2ZURvY0hhbmRsZXJzID0ge30sCglyZXNldFRpbWVySUQgPSAwLAoJc3RhcnRYID0gMCwKCXN0YXJ0WSA9IDAsCglkaWRTY3JvbGwgPSBmYWxzZSwKCWNsaWNrQmxvY2tMaXN0ID0gW10sCglibG9ja01vdXNlVHJpZ2dlcnMgPSBmYWxzZSwKCWJsb2NrVG91Y2hUcmlnZ2VycyA9IGZhbHNlLAoJZXZlbnRDYXB0dXJlU3VwcG9ydGVkID0gImFkZEV2ZW50TGlzdGVuZXIiIGluIGRvY3VtZW50LAoJJGRvY3VtZW50ID0gJCggZG9jdW1lbnQgKSwKCW5leHRUb3VjaElEID0gMSwKCWxhc3RUb3VjaElEID0gMCwgdGhyZXNob2xkLAoJaTsKCiQudm1vdXNlID0gewoJbW92ZURpc3RhbmNlVGhyZXNob2xkOiAxMCwKCWNsaWNrRGlzdGFuY2VUaHJlc2hvbGQ6IDEwLAoJcmVzZXRUaW1lckR1cmF0aW9uOiAxNTAwCn07CgpmdW5jdGlvbiBnZXROYXRpdmVFdmVudCggZXZlbnQgKSB7CgoJd2hpbGUgKCBldmVudCAmJiB0eXBlb2YgZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gInVuZGVmaW5lZCIgKSB7CgkJZXZlbnQgPSBldmVudC5vcmlnaW5hbEV2ZW50OwoJfQoJcmV0dXJuIGV2ZW50Owp9CgpmdW5jdGlvbiBjcmVhdGVWaXJ0dWFsRXZlbnQoIGV2ZW50LCBldmVudFR5cGUgKSB7CgoJdmFyIHQgPSBldmVudC50eXBlLAoJCW9lLCBwcm9wcywgbmUsIHByb3AsIGN0LCB0b3VjaCwgaSwgaiwgbGVuOwoKCWV2ZW50ID0gJC5FdmVudCggZXZlbnQgKTsKCWV2ZW50LnR5cGUgPSBldmVudFR5cGU7CgoJb2UgPSBldmVudC5vcmlnaW5hbEV2ZW50OwoJcHJvcHMgPSAkLmV2ZW50LnByb3BzOwoKCS8vIGFkZHJlc3NlcyBzZXBhcmF0aW9uIG9mICQuZXZlbnQucHJvcHMgaW4gdG8gJC5ldmVudC5tb3VzZUhvb2sucHJvcHMgYW5kIElzc3VlIDMyODAKCS8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1vYmlsZS9pc3N1ZXMvMzI4MAoJaWYgKCB0LnNlYXJjaCggL14obW91c2V8Y2xpY2spLyApID4gLTEgKSB7CgkJcHJvcHMgPSBtb3VzZUV2ZW50UHJvcHM7Cgl9CgoJLy8gY29weSBvcmlnaW5hbCBldmVudCBwcm9wZXJ0aWVzIG92ZXIgdG8gdGhlIG5ldyBldmVudAoJLy8gdGhpcyB3b3VsZCBoYXBwZW4gaWYgd2UgY291bGQgY2FsbCAkLmV2ZW50LmZpeCBpbnN0ZWFkIG9mICQuRXZlbnQKCS8vIGJ1dCB3ZSBkb24ndCBoYXZlIGEgd2F5IHRvIGZvcmNlIGFuIGV2ZW50IHRvIGJlIGZpeGVkIG11bHRpcGxlIHRpbWVzCglpZiAoIG9lICkgewoJCWZvciAoIGkgPSBwcm9wcy5sZW5ndGgsIHByb3A7IGk7ICkgewoJCQlwcm9wID0gcHJvcHNbIC0taSBdOwoJCQlldmVudFsgcHJvcCBdID0gb2VbIHByb3AgXTsKCQl9Cgl9CgoJLy8gbWFrZSBzdXJlIHRoYXQgaWYgdGhlIG1vdXNlIGFuZCBjbGljayB2aXJ0dWFsIGV2ZW50cyBhcmUgZ2VuZXJhdGVkCgkvLyB3aXRob3V0IGEgLndoaWNoIG9uZSBpcyBkZWZpbmVkCglpZiAoIHQuc2VhcmNoKC9tb3VzZShkb3dufHVwKXxjbGljay8pID4gLTEgJiYgIWV2ZW50LndoaWNoICkgewoJCWV2ZW50LndoaWNoID0gMTsKCX0KCglpZiAoIHQuc2VhcmNoKC9edG91Y2gvKSAhPT0gLTEgKSB7CgkJbmUgPSBnZXROYXRpdmVFdmVudCggb2UgKTsKCQl0ID0gbmUudG91Y2hlczsKCQljdCA9IG5lLmNoYW5nZWRUb3VjaGVzOwoJCXRvdWNoID0gKCB0ICYmIHQubGVuZ3RoICkgPyB0WzBdIDogKCAoIGN0ICYmIGN0Lmxlbmd0aCApID8gY3RbIDAgXSA6IHVuZGVmaW5lZCApOwoKCQlpZiAoIHRvdWNoICkgewoJCQlmb3IgKCBqID0gMCwgbGVuID0gdG91Y2hFdmVudFByb3BzLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7CgkJCQlwcm9wID0gdG91Y2hFdmVudFByb3BzWyBqIF07CgkJCQlldmVudFsgcHJvcCBdID0gdG91Y2hbIHByb3AgXTsKCQkJfQoJCX0KCX0KCglyZXR1cm4gZXZlbnQ7Cn0KCmZ1bmN0aW9uIGdldFZpcnR1YWxCaW5kaW5nRmxhZ3MoIGVsZW1lbnQgKSB7CgoJdmFyIGZsYWdzID0ge30sCgkJYiwgazsKCgl3aGlsZSAoIGVsZW1lbnQgKSB7CgoJCWIgPSAkLmRhdGEoIGVsZW1lbnQsIGRhdGFQcm9wZXJ0eU5hbWUgKTsKCgkJZm9yICggIGsgaW4gYiApIHsKCQkJaWYgKCBiWyBrIF0gKSB7CgkJCQlmbGFnc1sgayBdID0gZmxhZ3MuaGFzVmlydHVhbEJpbmRpbmcgPSB0cnVlOwoJCQl9CgkJfQoJCWVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7Cgl9CglyZXR1cm4gZmxhZ3M7Cn0KCmZ1bmN0aW9uIGdldENsb3Nlc3RFbGVtZW50V2l0aFZpcnR1YWxCaW5kaW5nKCBlbGVtZW50LCBldmVudFR5cGUgKSB7Cgl2YXIgYjsKCXdoaWxlICggZWxlbWVudCApIHsKCgkJYiA9ICQuZGF0YSggZWxlbWVudCwgZGF0YVByb3BlcnR5TmFtZSApOwoKCQlpZiAoIGIgJiYgKCAhZXZlbnRUeXBlIHx8IGJbIGV2ZW50VHlwZSBdICkgKSB7CgkJCXJldHVybiBlbGVtZW50OwoJCX0KCQllbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwoJfQoJcmV0dXJuIG51bGw7Cn0KCmZ1bmN0aW9uIGVuYWJsZVRvdWNoQmluZGluZ3MoKSB7CglibG9ja1RvdWNoVHJpZ2dlcnMgPSBmYWxzZTsKfQoKZnVuY3Rpb24gZGlzYWJsZVRvdWNoQmluZGluZ3MoKSB7CglibG9ja1RvdWNoVHJpZ2dlcnMgPSB0cnVlOwp9CgpmdW5jdGlvbiBlbmFibGVNb3VzZUJpbmRpbmdzKCkgewoJbGFzdFRvdWNoSUQgPSAwOwoJY2xpY2tCbG9ja0xpc3QubGVuZ3RoID0gMDsKCWJsb2NrTW91c2VUcmlnZ2VycyA9IGZhbHNlOwoKCS8vIFdoZW4gbW91c2UgYmluZGluZ3MgYXJlIGVuYWJsZWQsIG91cgoJLy8gdG91Y2ggYmluZGluZ3MgYXJlIGRpc2FibGVkLgoJZGlzYWJsZVRvdWNoQmluZGluZ3MoKTsKfQoKZnVuY3Rpb24gZGlzYWJsZU1vdXNlQmluZGluZ3MoKSB7CgkvLyBXaGVuIG1vdXNlIGJpbmRpbmdzIGFyZSBkaXNhYmxlZCwgb3VyCgkvLyB0b3VjaCBiaW5kaW5ncyBhcmUgZW5hYmxlZC4KCWVuYWJsZVRvdWNoQmluZGluZ3MoKTsKfQoKZnVuY3Rpb24gc3RhcnRSZXNldFRpbWVyKCkgewoJY2xlYXJSZXNldFRpbWVyKCk7CglyZXNldFRpbWVySUQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHsKCQlyZXNldFRpbWVySUQgPSAwOwoJCWVuYWJsZU1vdXNlQmluZGluZ3MoKTsKCX0sICQudm1vdXNlLnJlc2V0VGltZXJEdXJhdGlvbiApOwp9CgpmdW5jdGlvbiBjbGVhclJlc2V0VGltZXIoKSB7CglpZiAoIHJlc2V0VGltZXJJRCApIHsKCQljbGVhclRpbWVvdXQoIHJlc2V0VGltZXJJRCApOwoJCXJlc2V0VGltZXJJRCA9IDA7Cgl9Cn0KCmZ1bmN0aW9uIHRyaWdnZXJWaXJ0dWFsRXZlbnQoIGV2ZW50VHlwZSwgZXZlbnQsIGZsYWdzICkgewoJdmFyIHZlOwoKCWlmICggKCBmbGFncyAmJiBmbGFnc1sgZXZlbnRUeXBlIF0gKSB8fAoJCQkJKCAhZmxhZ3MgJiYgZ2V0Q2xvc2VzdEVsZW1lbnRXaXRoVmlydHVhbEJpbmRpbmcoIGV2ZW50LnRhcmdldCwgZXZlbnRUeXBlICkgKSApIHsKCgkJdmUgPSBjcmVhdGVWaXJ0dWFsRXZlbnQoIGV2ZW50LCBldmVudFR5cGUgKTsKCgkJJCggZXZlbnQudGFyZ2V0KS50cmlnZ2VyKCB2ZSApOwoJfQoKCXJldHVybiB2ZTsKfQoKZnVuY3Rpb24gbW91c2VFdmVudENhbGxiYWNrKCBldmVudCApIHsKCXZhciB0b3VjaElEID0gJC5kYXRhKCBldmVudC50YXJnZXQsIHRvdWNoVGFyZ2V0UHJvcGVydHlOYW1lICksCgkJdmU7CgoJaWYgKCAhYmxvY2tNb3VzZVRyaWdnZXJzICYmICggIWxhc3RUb3VjaElEIHx8IGxhc3RUb3VjaElEICE9PSB0b3VjaElEICkgKSB7CgkJdmUgPSB0cmlnZ2VyVmlydHVhbEV2ZW50KCAidiIgKyBldmVudC50eXBlLCBldmVudCApOwoJCWlmICggdmUgKSB7CgkJCWlmICggdmUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQl9CgkJCWlmICggdmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHsKCQkJCWV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwoJCQl9CgkJCWlmICggdmUuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHsKCQkJCWV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpOwoJCQl9CgkJfQoJfQp9CgpmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KCBldmVudCApIHsKCgl2YXIgdG91Y2hlcyA9IGdldE5hdGl2ZUV2ZW50KCBldmVudCApLnRvdWNoZXMsCgkJdGFyZ2V0LCBmbGFncywgdDsKCglpZiAoIHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPT09IDEgKSB7CgoJCXRhcmdldCA9IGV2ZW50LnRhcmdldDsKCQlmbGFncyA9IGdldFZpcnR1YWxCaW5kaW5nRmxhZ3MoIHRhcmdldCApOwoKCQlpZiAoIGZsYWdzLmhhc1ZpcnR1YWxCaW5kaW5nICkgewoKCQkJbGFzdFRvdWNoSUQgPSBuZXh0VG91Y2hJRCsrOwoJCQkkLmRhdGEoIHRhcmdldCwgdG91Y2hUYXJnZXRQcm9wZXJ0eU5hbWUsIGxhc3RUb3VjaElEICk7CgoJCQljbGVhclJlc2V0VGltZXIoKTsKCgkJCWRpc2FibGVNb3VzZUJpbmRpbmdzKCk7CgkJCWRpZFNjcm9sbCA9IGZhbHNlOwoKCQkJdCA9IGdldE5hdGl2ZUV2ZW50KCBldmVudCApLnRvdWNoZXNbIDAgXTsKCQkJc3RhcnRYID0gdC5wYWdlWDsKCQkJc3RhcnRZID0gdC5wYWdlWTsKCgkJCXRyaWdnZXJWaXJ0dWFsRXZlbnQoICJ2bW91c2VvdmVyIiwgZXZlbnQsIGZsYWdzICk7CgkJCXRyaWdnZXJWaXJ0dWFsRXZlbnQoICJ2bW91c2Vkb3duIiwgZXZlbnQsIGZsYWdzICk7CgkJfQoJfQp9CgpmdW5jdGlvbiBoYW5kbGVTY3JvbGwoIGV2ZW50ICkgewoJaWYgKCBibG9ja1RvdWNoVHJpZ2dlcnMgKSB7CgkJcmV0dXJuOwoJfQoKCWlmICggIWRpZFNjcm9sbCApIHsKCQl0cmlnZ2VyVmlydHVhbEV2ZW50KCAidm1vdXNlY2FuY2VsIiwgZXZlbnQsIGdldFZpcnR1YWxCaW5kaW5nRmxhZ3MoIGV2ZW50LnRhcmdldCApICk7Cgl9CgoJZGlkU2Nyb2xsID0gdHJ1ZTsKCXN0YXJ0UmVzZXRUaW1lcigpOwp9CgpmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoIGV2ZW50ICkgewoJaWYgKCBibG9ja1RvdWNoVHJpZ2dlcnMgKSB7CgkJcmV0dXJuOwoJfQoKCXZhciB0ID0gZ2V0TmF0aXZlRXZlbnQoIGV2ZW50ICkudG91Y2hlc1sgMCBdLAoJCWRpZENhbmNlbCA9IGRpZFNjcm9sbCwKCQltb3ZlVGhyZXNob2xkID0gJC52bW91c2UubW92ZURpc3RhbmNlVGhyZXNob2xkLAoJCWZsYWdzID0gZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggZXZlbnQudGFyZ2V0ICk7CgoJCWRpZFNjcm9sbCA9IGRpZFNjcm9sbCB8fAoJCQkoIE1hdGguYWJzKCB0LnBhZ2VYIC0gc3RhcnRYICkgPiBtb3ZlVGhyZXNob2xkIHx8CgkJCQlNYXRoLmFicyggdC5wYWdlWSAtIHN0YXJ0WSApID4gbW92ZVRocmVzaG9sZCApOwoKCWlmICggZGlkU2Nyb2xsICYmICFkaWRDYW5jZWwgKSB7CgkJdHJpZ2dlclZpcnR1YWxFdmVudCggInZtb3VzZWNhbmNlbCIsIGV2ZW50LCBmbGFncyApOwoJfQoKCXRyaWdnZXJWaXJ0dWFsRXZlbnQoICJ2bW91c2Vtb3ZlIiwgZXZlbnQsIGZsYWdzICk7CglzdGFydFJlc2V0VGltZXIoKTsKfQoKZnVuY3Rpb24gaGFuZGxlVG91Y2hFbmQoIGV2ZW50ICkgewoJaWYgKCBibG9ja1RvdWNoVHJpZ2dlcnMgKSB7CgkJcmV0dXJuOwoJfQoKCWRpc2FibGVUb3VjaEJpbmRpbmdzKCk7CgoJdmFyIGZsYWdzID0gZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggZXZlbnQudGFyZ2V0ICksCgkJdmUsIHQ7Cgl0cmlnZ2VyVmlydHVhbEV2ZW50KCAidm1vdXNldXAiLCBldmVudCwgZmxhZ3MgKTsKCglpZiAoICFkaWRTY3JvbGwgKSB7CgkJdmUgPSB0cmlnZ2VyVmlydHVhbEV2ZW50KCAidmNsaWNrIiwgZXZlbnQsIGZsYWdzICk7CgkJaWYgKCB2ZSAmJiB2ZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHsKCQkJLy8gVGhlIHRhcmdldCBvZiB0aGUgbW91c2UgZXZlbnRzIHRoYXQgZm9sbG93IHRoZSB0b3VjaGVuZAoJCQkvLyBldmVudCBkb24ndCBuZWNlc3NhcmlseSBtYXRjaCB0aGUgdGFyZ2V0IHVzZWQgZHVyaW5nIHRoZQoJCQkvLyB0b3VjaC4gVGhpcyBtZWFucyB3ZSBuZWVkIHRvIHJlbHkgb24gY29vcmRpbmF0ZXMgZm9yIGJsb2NraW5nCgkJCS8vIGFueSBjbGljayB0aGF0IGlzIGdlbmVyYXRlZC4KCQkJdCA9IGdldE5hdGl2ZUV2ZW50KCBldmVudCApLmNoYW5nZWRUb3VjaGVzWyAwIF07CgkJCWNsaWNrQmxvY2tMaXN0LnB1c2goewoJCQkJdG91Y2hJRDogbGFzdFRvdWNoSUQsCgkJCQl4OiB0LmNsaWVudFgsCgkJCQl5OiB0LmNsaWVudFkKCQkJfSk7CgoJCQkvLyBQcmV2ZW50IGFueSBtb3VzZSBldmVudHMgdGhhdCBmb2xsb3cgZnJvbSB0cmlnZ2VyaW5nCgkJCS8vIHZpcnR1YWwgZXZlbnQgbm90aWZpY2F0aW9ucy4KCQkJYmxvY2tNb3VzZVRyaWdnZXJzID0gdHJ1ZTsKCQl9Cgl9Cgl0cmlnZ2VyVmlydHVhbEV2ZW50KCAidm1vdXNlb3V0IiwgZXZlbnQsIGZsYWdzKTsKCWRpZFNjcm9sbCA9IGZhbHNlOwoKCXN0YXJ0UmVzZXRUaW1lcigpOwp9CgpmdW5jdGlvbiBoYXNWaXJ0dWFsQmluZGluZ3MoIGVsZSApIHsKCXZhciBiaW5kaW5ncyA9ICQuZGF0YSggZWxlLCBkYXRhUHJvcGVydHlOYW1lICksCgkJazsKCglpZiAoIGJpbmRpbmdzICkgewoJCWZvciAoIGsgaW4gYmluZGluZ3MgKSB7CgkJCWlmICggYmluZGluZ3NbIGsgXSApIHsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJfQoJfQoJcmV0dXJuIGZhbHNlOwp9CgpmdW5jdGlvbiBkdW1teU1vdXNlSGFuZGxlcigpIHt9CgpmdW5jdGlvbiBnZXRTcGVjaWFsRXZlbnRPYmplY3QoIGV2ZW50VHlwZSApIHsKCXZhciByZWFsVHlwZSA9IGV2ZW50VHlwZS5zdWJzdHIoIDEgKTsKCglyZXR1cm4gewoJCXNldHVwOiBmdW5jdGlvbigvKiBkYXRhLCBuYW1lc3BhY2UgKi8pIHsKCQkJLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdmlydHVhbCBtb3VzZSBiaW5kaW5nIGZvciB0aGlzIGVsZW1lbnQsCgkJCS8vIGFkZCBhIGJpbmRpbmdzIG9iamVjdCB0byBpdHMgZGF0YS4KCgkJCWlmICggIWhhc1ZpcnR1YWxCaW5kaW5ncyggdGhpcyApICkgewoJCQkJJC5kYXRhKCB0aGlzLCBkYXRhUHJvcGVydHlOYW1lLCB7fSApOwoJCQl9CgoJCQkvLyBJZiBzZXR1cCBpcyBjYWxsZWQsIHdlIGtub3cgaXQgaXMgdGhlIGZpcnN0IGJpbmRpbmcgZm9yIHRoaXMKCQkJLy8gZXZlbnRUeXBlLCBzbyBpbml0aWFsaXplIHRoZSBjb3VudCBmb3IgdGhlIGV2ZW50VHlwZSB0byB6ZXJvLgoJCQl2YXIgYmluZGluZ3MgPSAkLmRhdGEoIHRoaXMsIGRhdGFQcm9wZXJ0eU5hbWUgKTsKCQkJYmluZGluZ3NbIGV2ZW50VHlwZSBdID0gdHJ1ZTsKCgkJCS8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHZpcnR1YWwgbW91c2UgZXZlbnQgZm9yIHRoaXMgdHlwZSwKCQkJLy8gcmVnaXN0ZXIgYSBnbG9iYWwgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQuCgoJCQlhY3RpdmVEb2NIYW5kbGVyc1sgZXZlbnRUeXBlIF0gPSAoIGFjdGl2ZURvY0hhbmRsZXJzWyBldmVudFR5cGUgXSB8fCAwICkgKyAxOwoKCQkJaWYgKCBhY3RpdmVEb2NIYW5kbGVyc1sgZXZlbnRUeXBlIF0gPT09IDEgKSB7CgkJCQkkZG9jdW1lbnQuYmluZCggcmVhbFR5cGUsIG1vdXNlRXZlbnRDYWxsYmFjayApOwoJCQl9CgoJCQkvLyBTb21lIGJyb3dzZXJzLCBsaWtlIE9wZXJhIE1pbmksIHdvbid0IGRpc3BhdGNoIG1vdXNlL2NsaWNrIGV2ZW50cwoJCQkvLyBmb3IgZWxlbWVudHMgdW5sZXNzIHRoZXkgYWN0dWFsbHkgaGF2ZSBoYW5kbGVycyByZWdpc3RlcmVkIG9uIHRoZW0uCgkJCS8vIFRvIGdldCBhcm91bmQgdGhpcywgd2UgcmVnaXN0ZXIgZHVtbXkgaGFuZGxlcnMgb24gdGhlIGVsZW1lbnRzLgoKCQkJJCggdGhpcyApLmJpbmQoIHJlYWxUeXBlLCBkdW1teU1vdXNlSGFuZGxlciApOwoKCQkJLy8gRm9yIG5vdywgaWYgZXZlbnQgY2FwdHVyZSBpcyBub3Qgc3VwcG9ydGVkLCB3ZSByZWx5IG9uIG1vdXNlIGhhbmRsZXJzLgoJCQlpZiAoIGV2ZW50Q2FwdHVyZVN1cHBvcnRlZCApIHsKCQkJCS8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHZpcnR1YWwgbW91c2UgYmluZGluZyBmb3IgdGhlIGRvY3VtZW50LAoJCQkJLy8gcmVnaXN0ZXIgb3VyIHRvdWNoc3RhcnQgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQuCgoJCQkJYWN0aXZlRG9jSGFuZGxlcnNbICJ0b3VjaHN0YXJ0IiBdID0gKCBhY3RpdmVEb2NIYW5kbGVyc1sgInRvdWNoc3RhcnQiIF0gfHwgMCkgKyAxOwoKCQkJCWlmICggYWN0aXZlRG9jSGFuZGxlcnNbICJ0b3VjaHN0YXJ0IiBdID09PSAxICkgewoJCQkJCSRkb2N1bWVudC5iaW5kKCAidG91Y2hzdGFydCIsIGhhbmRsZVRvdWNoU3RhcnQgKQoJCQkJCQkuYmluZCggInRvdWNoZW5kIiwgaGFuZGxlVG91Y2hFbmQgKQoKCQkJCQkJLy8gT24gdG91Y2ggcGxhdGZvcm1zLCB0b3VjaGluZyB0aGUgc2NyZWVuIGFuZCB0aGVuIGRyYWdnaW5nIHlvdXIgZmluZ2VyCgkJCQkJCS8vIGNhdXNlcyB0aGUgd2luZG93IGNvbnRlbnQgdG8gc2Nyb2xsIGFmdGVyIHNvbWUgZGlzdGFuY2UgdGhyZXNob2xkIGlzCgkJCQkJCS8vIGV4Y2VlZGVkLiBPbiB0aGVzZSBwbGF0Zm9ybXMsIGEgc2Nyb2xsIHByZXZlbnRzIGEgY2xpY2sgZXZlbnQgZnJvbSBiZWluZwoJCQkJCQkvLyBkaXNwYXRjaGVkLCBhbmQgb24gc29tZSBwbGF0Zm9ybXMsIGV2ZW4gdGhlIHRvdWNoZW5kIGlzIHN1cHByZXNzZWQuIFRvCgkJCQkJCS8vIG1pbWljIHRoZSBzdXBwcmVzc2lvbiBvZiB0aGUgY2xpY2sgZXZlbnQsIHdlIG5lZWQgdG8gd2F0Y2ggZm9yIGEgc2Nyb2xsCgkJCQkJCS8vIGV2ZW50LiBVbmZvcnR1bmF0ZWx5LCBzb21lIHBsYXRmb3JtcyBsaWtlIGlPUyBkb24ndCBkaXNwYXRjaCBzY3JvbGwKCQkJCQkJLy8gZXZlbnRzIHVudGlsICpBRlRFUiogdGhlIHVzZXIgbGlmdHMgdGhlaXIgZmluZ2VyICh0b3VjaGVuZCkuIFRoaXMgbWVhbnMKCQkJCQkJLy8gd2UgbmVlZCB0byB3YXRjaCBib3RoIHNjcm9sbCBhbmQgdG91Y2htb3ZlIGV2ZW50cyB0byBmaWd1cmUgb3V0IHdoZXRoZXIKCQkJCQkJLy8gb3Igbm90IGEgc2Nyb2xsIGhhcHBlbmVucyBiZWZvcmUgdGhlIHRvdWNoZW5kIGV2ZW50IGlzIGZpcmVkLgoKCQkJCQkJLmJpbmQoICJ0b3VjaG1vdmUiLCBoYW5kbGVUb3VjaE1vdmUgKQoJCQkJCQkuYmluZCggInNjcm9sbCIsIGhhbmRsZVNjcm9sbCApOwoJCQkJfQoJCQl9CgkJfSwKCgkJdGVhcmRvd246IGZ1bmN0aW9uKC8qIGRhdGEsIG5hbWVzcGFjZSAqLykgewoJCQkvLyBJZiB0aGlzIGlzIHRoZSBsYXN0IHZpcnR1YWwgYmluZGluZyBmb3IgdGhpcyBldmVudFR5cGUsCgkJCS8vIHJlbW92ZSBpdHMgZ2xvYmFsIGhhbmRsZXIgZnJvbSB0aGUgZG9jdW1lbnQuCgoJCQktLWFjdGl2ZURvY0hhbmRsZXJzWyBldmVudFR5cGUgXTsKCgkJCWlmICggIWFjdGl2ZURvY0hhbmRsZXJzWyBldmVudFR5cGUgXSApIHsKCQkJCSRkb2N1bWVudC51bmJpbmQoIHJlYWxUeXBlLCBtb3VzZUV2ZW50Q2FsbGJhY2sgKTsKCQkJfQoKCQkJaWYgKCBldmVudENhcHR1cmVTdXBwb3J0ZWQgKSB7CgkJCQkvLyBJZiB0aGlzIGlzIHRoZSBsYXN0IHZpcnR1YWwgbW91c2UgYmluZGluZyBpbiBleGlzdGVuY2UsCgkJCQkvLyByZW1vdmUgb3VyIGRvY3VtZW50IHRvdWNoc3RhcnQgbGlzdGVuZXIuCgoJCQkJLS1hY3RpdmVEb2NIYW5kbGVyc1sgInRvdWNoc3RhcnQiIF07CgoJCQkJaWYgKCAhYWN0aXZlRG9jSGFuZGxlcnNbICJ0b3VjaHN0YXJ0IiBdICkgewoJCQkJCSRkb2N1bWVudC51bmJpbmQoICJ0b3VjaHN0YXJ0IiwgaGFuZGxlVG91Y2hTdGFydCApCgkJCQkJCS51bmJpbmQoICJ0b3VjaG1vdmUiLCBoYW5kbGVUb3VjaE1vdmUgKQoJCQkJCQkudW5iaW5kKCAidG91Y2hlbmQiLCBoYW5kbGVUb3VjaEVuZCApCgkJCQkJCS51bmJpbmQoICJzY3JvbGwiLCBoYW5kbGVTY3JvbGwgKTsKCQkJCX0KCQkJfQoKCQkJdmFyICR0aGlzID0gJCggdGhpcyApLAoJCQkJYmluZGluZ3MgPSAkLmRhdGEoIHRoaXMsIGRhdGFQcm9wZXJ0eU5hbWUgKTsKCgkJCS8vIHRlYXJkb3duIG1heSBiZSBjYWxsZWQgd2hlbiBhbiBlbGVtZW50IHdhcwoJCQkvLyByZW1vdmVkIGZyb20gdGhlIERPTS4gSWYgdGhpcyBpcyB0aGUgY2FzZSwKCQkJLy8galF1ZXJ5IGNvcmUgbWF5IGhhdmUgYWxyZWFkeSBzdHJpcHBlZCB0aGUgZWxlbWVudAoJCQkvLyBvZiBhbnkgZGF0YSBiaW5kaW5ncyBzbyB3ZSBuZWVkIHRvIGNoZWNrIGl0IGJlZm9yZQoJCQkvLyB1c2luZyBpdC4KCQkJaWYgKCBiaW5kaW5ncyApIHsKCQkJCWJpbmRpbmdzWyBldmVudFR5cGUgXSA9IGZhbHNlOwoJCQl9CgoJCQkvLyBVbnJlZ2lzdGVyIHRoZSBkdW1teSBldmVudCBoYW5kbGVyLgoKCQkJJHRoaXMudW5iaW5kKCByZWFsVHlwZSwgZHVtbXlNb3VzZUhhbmRsZXIgKTsKCgkJCS8vIElmIHRoaXMgaXMgdGhlIGxhc3QgdmlydHVhbCBtb3VzZSBiaW5kaW5nIG9uIHRoZQoJCQkvLyBlbGVtZW50LCByZW1vdmUgdGhlIGJpbmRpbmcgZGF0YSBmcm9tIHRoZSBlbGVtZW50LgoKCQkJaWYgKCAhaGFzVmlydHVhbEJpbmRpbmdzKCB0aGlzICkgKSB7CgkJCQkkdGhpcy5yZW1vdmVEYXRhKCBkYXRhUHJvcGVydHlOYW1lICk7CgkJCX0KCQl9Cgl9Owp9CgovLyBFeHBvc2Ugb3VyIGN1c3RvbSBldmVudHMgdG8gdGhlIGpRdWVyeSBiaW5kL3VuYmluZCBtZWNoYW5pc20uCgpmb3IgKCBpID0gMDsgaSA8IHZpcnR1YWxFdmVudE5hbWVzLmxlbmd0aDsgaSsrICkgewoJJC5ldmVudC5zcGVjaWFsWyB2aXJ0dWFsRXZlbnROYW1lc1sgaSBdIF0gPSBnZXRTcGVjaWFsRXZlbnRPYmplY3QoIHZpcnR1YWxFdmVudE5hbWVzWyBpIF0gKTsKfQoKLy8gQWRkIGEgY2FwdHVyZSBjbGljayBoYW5kbGVyIHRvIGJsb2NrIGNsaWNrcy4KLy8gTm90ZSB0aGF0IHdlIHJlcXVpcmUgZXZlbnQgY2FwdHVyZSBzdXBwb3J0IGZvciB0aGlzIHNvIGlmIHRoZSBkZXZpY2UKLy8gZG9lc24ndCBzdXBwb3J0IGl0LCB3ZSBwdW50IGZvciBub3cgYW5kIHJlbHkgc29sZWx5IG9uIG1vdXNlIGV2ZW50cy4KaWYgKCBldmVudENhcHR1cmVTdXBwb3J0ZWQgKSB7Cglkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAiY2xpY2siLCBmdW5jdGlvbiggZSApIHsKCQl2YXIgY250ID0gY2xpY2tCbG9ja0xpc3QubGVuZ3RoLAoJCQl0YXJnZXQgPSBlLnRhcmdldCwKCQkJeCwgeSwgZWxlLCBpLCBvLCB0b3VjaElEOwoKCQlpZiAoIGNudCApIHsKCQkJeCA9IGUuY2xpZW50WDsKCQkJeSA9IGUuY2xpZW50WTsKCQkJdGhyZXNob2xkID0gJC52bW91c2UuY2xpY2tEaXN0YW5jZVRocmVzaG9sZDsKCgkJCS8vIFRoZSBpZGVhIGhlcmUgaXMgdG8gcnVuIHRocm91Z2ggdGhlIGNsaWNrQmxvY2tMaXN0IHRvIHNlZSBpZgoJCQkvLyB0aGUgY3VycmVudCBjbGljayBldmVudCBpcyBpbiB0aGUgcHJveGltaXR5IG9mIG9uZSBvZiBvdXIKCQkJLy8gdmNsaWNrIGV2ZW50cyB0aGF0IGhhZCBwcmV2ZW50RGVmYXVsdCgpIGNhbGxlZCBvbiBpdC4gSWYgd2UgZmluZAoJCQkvLyBvbmUsIHRoZW4gd2UgYmxvY2sgdGhlIGNsaWNrLgoJCQkvLwoJCQkvLyBXaHkgZG8gd2UgaGF2ZSB0byByZWx5IG9uIHByb3hpbWl0eT8KCQkJLy8KCQkJLy8gQmVjYXVzZSB0aGUgdGFyZ2V0IG9mIHRoZSB0b3VjaCBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgdmNsaWNrCgkJCS8vIGNhbiBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgdGFyZ2V0IG9mIHRoZSBjbGljayBldmVudCBzeW50aGVzaXplZAoJCQkvLyBieSB0aGUgYnJvd3Nlci4gVGhlIHRhcmdldCBvZiBhIG1vdXNlL2NsaWNrIGV2ZW50IHRoYXQgaXMgc3ludGhlc2l6ZWQKCQkJLy8gZnJvbSBhIHRvdWNoIGV2ZW50IHNlZW1zIHRvIGJlIGltcGxlbWVudGF0aW9uIHNwZWNpZmljLiBGb3IgZXhhbXBsZSwKCQkJLy8gc29tZSBicm93c2VycyB3aWxsIGZpcmUgbW91c2UvY2xpY2sgZXZlbnRzIGZvciBhIGxpbmsgdGhhdCBpcyBuZWFyCgkJCS8vIGEgdG91Y2ggZXZlbnQsIGV2ZW4gdGhvdWdoIHRoZSB0YXJnZXQgb2YgdGhlIHRvdWNoc3RhcnQvdG91Y2hlbmQgZXZlbnQKCQkJLy8gc2F5cyB0aGUgdXNlciB0b3VjaGVkIG91dHNpZGUgdGhlIGxpbmsuIEFsc28sIGl0IHNlZW1zIHRoYXQgd2l0aCBtb3N0CgkJCS8vIGJyb3dzZXJzLCB0aGUgdGFyZ2V0IG9mIHRoZSBtb3VzZS9jbGljayBldmVudCBpcyBub3QgY2FsY3VsYXRlZCB1bnRpbCB0aGUKCQkJLy8gdGltZSBpdCBpcyBkaXNwYXRjaGVkLCBzbyBpZiB5b3UgcmVwbGFjZSBhbiBlbGVtZW50IHRoYXQgeW91IHRvdWNoZWQKCQkJLy8gd2l0aCBhbm90aGVyIGVsZW1lbnQsIHRoZSB0YXJnZXQgb2YgdGhlIG1vdXNlL2NsaWNrIHdpbGwgYmUgdGhlIG5ldwoJCQkvLyBlbGVtZW50IHVuZGVybmVhdGggdGhhdCBwb2ludC4KCQkJLy8KCQkJLy8gQXNpZGUgZnJvbSBwcm94aW1pdHksIHdlIGFsc28gY2hlY2sgdG8gc2VlIGlmIHRoZSB0YXJnZXQgYW5kIGFueQoJCQkvLyBvZiBpdHMgYW5jZXN0b3JzIHdlcmUgdGhlIG9uZXMgdGhhdCBibG9ja2VkIGEgY2xpY2suIFRoaXMgaXMgbmVjZXNzYXJ5CgkJCS8vIGJlY2F1c2Ugb2YgdGhlIHN0cmFuZ2UgbW91c2UvY2xpY2sgdGFyZ2V0IGNhbGN1bGF0aW9uIGRvbmUgaW4gdGhlCgkJCS8vIEFuZHJvaWQgMi4xIGJyb3dzZXIsIHdoZXJlIGlmIHlvdSBjbGljayBvbiBhbiBlbGVtZW50LCBhbmQgdGhlcmUgaXMgYQoJCQkvLyBtb3VzZS9jbGljayBoYW5kbGVyIG9uIG9uZSBvZiBpdHMgYW5jZXN0b3JzLCB0aGUgdGFyZ2V0IHdpbGwgYmUgdGhlCgkJCS8vIGlubmVybW9zdCBjaGlsZCBvZiB0aGUgdG91Y2hlZCBlbGVtZW50LCBldmVuIGlmIHRoYXQgY2hpbGQgaXMgbm8gd2hlcmUKCQkJLy8gbmVhciB0aGUgcG9pbnQgb2YgdG91Y2guCgoJCQllbGUgPSB0YXJnZXQ7CgoJCQl3aGlsZSAoIGVsZSApIHsKCQkJCWZvciAoIGkgPSAwOyBpIDwgY250OyBpKysgKSB7CgkJCQkJbyA9IGNsaWNrQmxvY2tMaXN0WyBpIF07CgkJCQkJdG91Y2hJRCA9IDA7CgoJCQkJCWlmICggKCBlbGUgPT09IHRhcmdldCAmJiBNYXRoLmFicyggby54IC0geCApIDwgdGhyZXNob2xkICYmIE1hdGguYWJzKCBvLnkgLSB5ICkgPCB0aHJlc2hvbGQgKSB8fAoJCQkJCQkJCSQuZGF0YSggZWxlLCB0b3VjaFRhcmdldFByb3BlcnR5TmFtZSApID09PSBvLnRvdWNoSUQgKSB7CgkJCQkJCS8vIFhYWDogV2UgbWF5IHdhbnQgdG8gY29uc2lkZXIgcmVtb3ZpbmcgbWF0Y2hlcyBmcm9tIHRoZSBibG9jayBsaXN0CgkJCQkJCS8vICAgICAgaW5zdGVhZCBvZiB3YWl0aW5nIGZvciB0aGUgcmVzZXQgdGltZXIgdG8gZmlyZS4KCQkJCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCQllLnN0b3BQcm9wYWdhdGlvbigpOwoJCQkJCQlyZXR1cm47CgkJCQkJfQoJCQkJfQoJCQkJZWxlID0gZWxlLnBhcmVudE5vZGU7CgkJCX0KCQl9Cgl9LCB0cnVlKTsKfQp9KSggalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50ICk7CgoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCXZhciAkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApLAoJCXN1cHBvcnRUb3VjaCA9ICQubW9iaWxlLnN1cHBvcnQudG91Y2gsCgkJc2Nyb2xsRXZlbnQgPSAidG91Y2htb3ZlIHNjcm9sbCIsCgkJdG91Y2hTdGFydEV2ZW50ID0gc3VwcG9ydFRvdWNoID8gInRvdWNoc3RhcnQiIDogIm1vdXNlZG93biIsCgkJdG91Y2hTdG9wRXZlbnQgPSBzdXBwb3J0VG91Y2ggPyAidG91Y2hlbmQiIDogIm1vdXNldXAiLAoJCXRvdWNoTW92ZUV2ZW50ID0gc3VwcG9ydFRvdWNoID8gInRvdWNobW92ZSIgOiAibW91c2Vtb3ZlIjsKCgkvLyBzZXR1cCBuZXcgZXZlbnQgc2hvcnRjdXRzCgkkLmVhY2goICggInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kICIgKwoJCSJ0YXAgdGFwaG9sZCAiICsKCQkic3dpcGUgc3dpcGVsZWZ0IHN3aXBlcmlnaHQgIiArCgkJInNjcm9sbHN0YXJ0IHNjcm9sbHN0b3AiICkuc3BsaXQoICIgIiApLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKCgkJJC5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGZuICkgewoJCQlyZXR1cm4gZm4gPyB0aGlzLmJpbmQoIG5hbWUsIGZuICkgOiB0aGlzLnRyaWdnZXIoIG5hbWUgKTsKCQl9OwoKCQkvLyBqUXVlcnkgPCAxLjgKCQlpZiAoICQuYXR0ckZuICkgewoJCQkkLmF0dHJGblsgbmFtZSBdID0gdHJ1ZTsKCQl9Cgl9KTsKCglmdW5jdGlvbiB0cmlnZ2VyQ3VzdG9tRXZlbnQoIG9iaiwgZXZlbnRUeXBlLCBldmVudCApIHsKCQl2YXIgb3JpZ2luYWxUeXBlID0gZXZlbnQudHlwZTsKCQlldmVudC50eXBlID0gZXZlbnRUeXBlOwoJCSQuZXZlbnQuZGlzcGF0Y2guY2FsbCggb2JqLCBldmVudCApOwoJCWV2ZW50LnR5cGUgPSBvcmlnaW5hbFR5cGU7Cgl9CgoJLy8gYWxzbyBoYW5kbGVzIHNjcm9sbHN0b3AKCSQuZXZlbnQuc3BlY2lhbC5zY3JvbGxzdGFydCA9IHsKCgkJZW5hYmxlZDogdHJ1ZSwKCQlzZXR1cDogZnVuY3Rpb24oKSB7CgoJCQl2YXIgdGhpc09iamVjdCA9IHRoaXMsCgkJCQkkdGhpcyA9ICQoIHRoaXNPYmplY3QgKSwKCQkJCXNjcm9sbGluZywKCQkJCXRpbWVyOwoKCQkJZnVuY3Rpb24gdHJpZ2dlciggZXZlbnQsIHN0YXRlICkgewoJCQkJc2Nyb2xsaW5nID0gc3RhdGU7CgkJCQl0cmlnZ2VyQ3VzdG9tRXZlbnQoIHRoaXNPYmplY3QsIHNjcm9sbGluZyA/ICJzY3JvbGxzdGFydCIgOiAic2Nyb2xsc3RvcCIsIGV2ZW50ICk7CgkJCX0KCgkJCS8vIGlQaG9uZSB0cmlnZ2VycyBzY3JvbGwgYWZ0ZXIgYSBzbWFsbCBkZWxheTsgdXNlIHRvdWNobW92ZSBpbnN0ZWFkCgkJCSR0aGlzLmJpbmQoIHNjcm9sbEV2ZW50LCBmdW5jdGlvbiggZXZlbnQgKSB7CgoJCQkJaWYgKCAhJC5ldmVudC5zcGVjaWFsLnNjcm9sbHN0YXJ0LmVuYWJsZWQgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCWlmICggIXNjcm9sbGluZyApIHsKCQkJCQl0cmlnZ2VyKCBldmVudCwgdHJ1ZSApOwoJCQkJfQoKCQkJCWNsZWFyVGltZW91dCggdGltZXIgKTsKCQkJCXRpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCQkJdHJpZ2dlciggZXZlbnQsIGZhbHNlICk7CgkJCQl9LCA1MCApOwoJCQl9KTsKCQl9LAoJCXRlYXJkb3duOiBmdW5jdGlvbigpIHsKCQkJJCggdGhpcyApLnVuYmluZCggc2Nyb2xsRXZlbnQgKTsKCQl9Cgl9OwoKCS8vIGFsc28gaGFuZGxlcyB0YXBob2xkCgkkLmV2ZW50LnNwZWNpYWwudGFwID0gewoJCXRhcGhvbGRUaHJlc2hvbGQ6IDc1MCwKCQllbWl0VGFwT25UYXBob2xkOiB0cnVlLAoJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJdmFyIHRoaXNPYmplY3QgPSB0aGlzLAoJCQkJJHRoaXMgPSAkKCB0aGlzT2JqZWN0ICksCgkJCQlpc1RhcGhvbGQgPSBmYWxzZTsKCgkJCSR0aGlzLmJpbmQoICJ2bW91c2Vkb3duIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJaXNUYXBob2xkID0gZmFsc2U7CgkJCQlpZiAoIGV2ZW50LndoaWNoICYmIGV2ZW50LndoaWNoICE9PSAxICkgewoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCgkJCQl2YXIgb3JpZ1RhcmdldCA9IGV2ZW50LnRhcmdldCwKCQkJCQl0aW1lcjsKCgkJCQlmdW5jdGlvbiBjbGVhclRhcFRpbWVyKCkgewoJCQkJCWNsZWFyVGltZW91dCggdGltZXIgKTsKCQkJCX0KCgkJCQlmdW5jdGlvbiBjbGVhclRhcEhhbmRsZXJzKCkgewoJCQkJCWNsZWFyVGFwVGltZXIoKTsKCgkJCQkJJHRoaXMudW5iaW5kKCAidmNsaWNrIiwgY2xpY2tIYW5kbGVyICkKCQkJCQkJLnVuYmluZCggInZtb3VzZXVwIiwgY2xlYXJUYXBUaW1lciApOwoJCQkJCSRkb2N1bWVudC51bmJpbmQoICJ2bW91c2VjYW5jZWwiLCBjbGVhclRhcEhhbmRsZXJzICk7CgkJCQl9CgoJCQkJZnVuY3Rpb24gY2xpY2tIYW5kbGVyKCBldmVudCApIHsKCQkJCQljbGVhclRhcEhhbmRsZXJzKCk7CgoJCQkJCS8vIE9OTFkgdHJpZ2dlciBhICd0YXAnIGV2ZW50IGlmIHRoZSBzdGFydCB0YXJnZXQgaXMKCQkJCQkvLyB0aGUgc2FtZSBhcyB0aGUgc3RvcCB0YXJnZXQuCgkJCQkJaWYgKCAhaXNUYXBob2xkICYmIG9yaWdUYXJnZXQgPT09IGV2ZW50LnRhcmdldCApIHsKCQkJCQkJdHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCAidGFwIiwgZXZlbnQgKTsKCQkJCQl9IGVsc2UgaWYgKCBpc1RhcGhvbGQgKSB7CgkJCQkJCWV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwoJCQkJCX0KCQkJCX0KCgkJCQkkdGhpcy5iaW5kKCAidm1vdXNldXAiLCBjbGVhclRhcFRpbWVyICkKCQkJCQkuYmluZCggInZjbGljayIsIGNsaWNrSGFuZGxlciApOwoJCQkJJGRvY3VtZW50LmJpbmQoICJ2bW91c2VjYW5jZWwiLCBjbGVhclRhcEhhbmRsZXJzICk7CgoJCQkJdGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHsKCQkJCQlpZiAoICEkLmV2ZW50LnNwZWNpYWwudGFwLmVtaXRUYXBPblRhcGhvbGQgKSB7CgkJCQkJCWlzVGFwaG9sZCA9IHRydWU7CgkJCQkJfQoJCQkJCXRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgInRhcGhvbGQiLCAkLkV2ZW50KCAidGFwaG9sZCIsIHsgdGFyZ2V0OiBvcmlnVGFyZ2V0IH0gKSApOwoJCQkJfSwgJC5ldmVudC5zcGVjaWFsLnRhcC50YXBob2xkVGhyZXNob2xkICk7CgkJCX0pOwoJCX0sCgkJdGVhcmRvd246IGZ1bmN0aW9uKCkgewoJCQkkKCB0aGlzICkudW5iaW5kKCAidm1vdXNlZG93biIgKS51bmJpbmQoICJ2Y2xpY2siICkudW5iaW5kKCAidm1vdXNldXAiICk7CgkJCSRkb2N1bWVudC51bmJpbmQoICJ2bW91c2VjYW5jZWwiICk7CgkJfQoJfTsKCgkvLyBhbHNvIGhhbmRsZXMgc3dpcGVsZWZ0LCBzd2lwZXJpZ2h0CgkkLmV2ZW50LnNwZWNpYWwuc3dpcGUgPSB7CgkJc2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZDogMzAsIC8vIE1vcmUgdGhhbiB0aGlzIGhvcml6b250YWwgZGlzcGxhY2VtZW50LCBhbmQgd2Ugd2lsbCBzdXBwcmVzcyBzY3JvbGxpbmcuCgoJCWR1cmF0aW9uVGhyZXNob2xkOiAxMDAwLCAvLyBNb3JlIHRpbWUgdGhhbiB0aGlzLCBhbmQgaXQgaXNuJ3QgYSBzd2lwZS4KCgkJaG9yaXpvbnRhbERpc3RhbmNlVGhyZXNob2xkOiAzMCwgIC8vIFN3aXBlIGhvcml6b250YWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbW9yZSB0aGFuIHRoaXMuCgoJCXZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQ6IDc1LCAgLy8gU3dpcGUgdmVydGljYWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbGVzcyB0aGFuIHRoaXMuCgoJCXN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCXZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID8KCQkJCQlldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50OwoJCQlyZXR1cm4gewoJCQkJCQl0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksCgkJCQkJCWNvb3JkczogWyBkYXRhLnBhZ2VYLCBkYXRhLnBhZ2VZIF0sCgkJCQkJCW9yaWdpbjogJCggZXZlbnQudGFyZ2V0ICkKCQkJCQl9OwoJCX0sCgoJCXN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyIGRhdGEgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgPwoJCQkJCWV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1sgMCBdIDogZXZlbnQ7CgkJCXJldHVybiB7CgkJCQkJCXRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSwKCQkJCQkJY29vcmRzOiBbIGRhdGEucGFnZVgsIGRhdGEucGFnZVkgXQoJCQkJCX07CgkJfSwKCgkJaGFuZGxlU3dpcGU6IGZ1bmN0aW9uKCBzdGFydCwgc3RvcCwgdGhpc09iamVjdCwgb3JpZ1RhcmdldCApIHsKCQkJaWYgKCBzdG9wLnRpbWUgLSBzdGFydC50aW1lIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLmR1cmF0aW9uVGhyZXNob2xkICYmCgkJCQlNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuaG9yaXpvbnRhbERpc3RhbmNlVGhyZXNob2xkICYmCgkJCQlNYXRoLmFicyggc3RhcnQuY29vcmRzWyAxIF0gLSBzdG9wLmNvb3Jkc1sgMSBdICkgPCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUudmVydGljYWxEaXN0YW5jZVRocmVzaG9sZCApIHsKCQkJCXZhciBkaXJlY3Rpb24gPSBzdGFydC5jb29yZHNbMF0gPiBzdG9wLmNvb3Jkc1sgMCBdID8gInN3aXBlbGVmdCIgOiAic3dpcGVyaWdodCI7CgoJCQkJdHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCAic3dpcGUiLCAkLkV2ZW50KCAic3dpcGUiLCB7IHRhcmdldDogb3JpZ1RhcmdldCwgc3dpcGVzdGFydDogc3RhcnQsIHN3aXBlc3RvcDogc3RvcCB9KSApOwoJCQkJdHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCBkaXJlY3Rpb24sJC5FdmVudCggZGlyZWN0aW9uLCB7IHRhcmdldDogb3JpZ1RhcmdldCwgc3dpcGVzdGFydDogc3RhcnQsIHN3aXBlc3RvcDogc3RvcCB9ICkgKTsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJCXJldHVybiBmYWxzZTsKCgkJfSwKCgkJc2V0dXA6IGZ1bmN0aW9uKCkgewoJCQl2YXIgdGhpc09iamVjdCA9IHRoaXMsCgkJCQkkdGhpcyA9ICQoIHRoaXNPYmplY3QgKTsKCgkJCSR0aGlzLmJpbmQoIHRvdWNoU3RhcnRFdmVudCwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJdmFyIHN0b3AsCgkJCQkJc3RhcnQgPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc3RhcnQoIGV2ZW50ICksCgkJCQkJb3JpZ1RhcmdldCA9IGV2ZW50LnRhcmdldCwKCQkJCQllbWl0dGVkID0gZmFsc2U7CgoJCQkJZnVuY3Rpb24gbW92ZUhhbmRsZXIoIGV2ZW50ICkgewoJCQkJCWlmICggIXN0YXJ0ICkgewoJCQkJCQlyZXR1cm47CgkJCQkJfQoKCQkJCQlzdG9wID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLnN0b3AoIGV2ZW50ICk7CgkJCQkJaWYgKCAhZW1pdHRlZCApIHsKCQkJCQkJZW1pdHRlZCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5oYW5kbGVTd2lwZSggc3RhcnQsIHN0b3AsIHRoaXNPYmplY3QsIG9yaWdUYXJnZXQgKTsKCQkJCQl9CgkJCQkJLy8gcHJldmVudCBzY3JvbGxpbmcKCQkJCQlpZiAoIE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkICkgewoJCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCX0KCQkJCX0KCgkJCQkkdGhpcy5iaW5kKCB0b3VjaE1vdmVFdmVudCwgbW92ZUhhbmRsZXIgKQoJCQkJCS5vbmUoIHRvdWNoU3RvcEV2ZW50LCBmdW5jdGlvbigpIHsKCQkJCQkJZW1pdHRlZCA9IHRydWU7CgkJCQkJCSR0aGlzLnVuYmluZCggdG91Y2hNb3ZlRXZlbnQsIG1vdmVIYW5kbGVyICk7CgkJCQl9KTsKCQkJfSk7CgkJfSwKCgkJdGVhcmRvd246IGZ1bmN0aW9uKCkgewoJCQkkKCB0aGlzICkudW5iaW5kKCB0b3VjaFN0YXJ0RXZlbnQgKS51bmJpbmQoIHRvdWNoTW92ZUV2ZW50ICkudW5iaW5kKCB0b3VjaFN0b3BFdmVudCApOwoJCX0KCX07CgkkLmVhY2goewoJCXNjcm9sbHN0b3A6ICJzY3JvbGxzdGFydCIsCgkJdGFwaG9sZDogInRhcCIsCgkJc3dpcGVsZWZ0OiAic3dpcGUiLAoJCXN3aXBlcmlnaHQ6ICJzd2lwZSIKCX0sIGZ1bmN0aW9uKCBldmVudCwgc291cmNlRXZlbnQgKSB7CgoJCSQuZXZlbnQuc3BlY2lhbFsgZXZlbnQgXSA9IHsKCQkJc2V0dXA6IGZ1bmN0aW9uKCkgewoJCQkJJCggdGhpcyApLmJpbmQoIHNvdXJjZUV2ZW50LCAkLm5vb3AgKTsKCQkJfSwKCQkJdGVhcmRvd246IGZ1bmN0aW9uKCkgewoJCQkJJCggdGhpcyApLnVuYmluZCggc291cmNlRXZlbnQgKTsKCQkJfQoJCX07Cgl9KTsKCn0pKCBqUXVlcnksIHRoaXMgKTsKCgoJLy8gdGhyb3R0bGVkIHJlc2l6ZSBldmVudAoJKGZ1bmN0aW9uKCAkICkgewoJCSQuZXZlbnQuc3BlY2lhbC50aHJvdHRsZWRyZXNpemUgPSB7CgkJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJCSQoIHRoaXMgKS5iaW5kKCAicmVzaXplIiwgaGFuZGxlciApOwoJCQl9LAoJCQl0ZWFyZG93bjogZnVuY3Rpb24oKSB7CgkJCQkkKCB0aGlzICkudW5iaW5kKCAicmVzaXplIiwgaGFuZGxlciApOwoJCQl9CgkJfTsKCgkJdmFyIHRocm90dGxlID0gMjUwLAoJCQloYW5kbGVyID0gZnVuY3Rpb24oKSB7CgkJCQljdXJyID0gKCBuZXcgRGF0ZSgpICkuZ2V0VGltZSgpOwoJCQkJZGlmZiA9IGN1cnIgLSBsYXN0Q2FsbDsKCgkJCQlpZiAoIGRpZmYgPj0gdGhyb3R0bGUgKSB7CgoJCQkJCWxhc3RDYWxsID0gY3VycjsKCQkJCQkkKCB0aGlzICkudHJpZ2dlciggInRocm90dGxlZHJlc2l6ZSIgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQlpZiAoIGhlbGRDYWxsICkgewoJCQkJCQljbGVhclRpbWVvdXQoIGhlbGRDYWxsICk7CgkJCQkJfQoKCQkJCQkvLyBQcm9taXNlIGEgaGVsZCBjYWxsIHdpbGwgc3RpbGwgZXhlY3V0ZQoJCQkJCWhlbGRDYWxsID0gc2V0VGltZW91dCggaGFuZGxlciwgdGhyb3R0bGUgLSBkaWZmICk7CgkJCQl9CgkJCX0sCgkJCWxhc3RDYWxsID0gMCwKCQkJaGVsZENhbGwsCgkJCWN1cnIsCgkJCWRpZmY7Cgl9KSggalF1ZXJ5ICk7CgoKKGZ1bmN0aW9uKCAkLCB3aW5kb3cgKSB7Cgl2YXIgd2luID0gJCggd2luZG93ICksCgkJZXZlbnRfbmFtZSA9ICJvcmllbnRhdGlvbmNoYW5nZSIsCgkJZ2V0X29yaWVudGF0aW9uLAoJCWxhc3Rfb3JpZW50YXRpb24sCgkJaW5pdGlhbF9vcmllbnRhdGlvbl9pc19sYW5kc2NhcGUsCgkJaW5pdGlhbF9vcmllbnRhdGlvbl9pc19kZWZhdWx0LAoJCXBvcnRyYWl0X21hcCA9IHsgIjAiOiB0cnVlLCAiMTgwIjogdHJ1ZSB9LAoJCXd3LCB3aCwgbGFuZHNjYXBlX3RocmVzaG9sZDsKCgkvLyBJdCBzZWVtcyB0aGF0IHNvbWUgZGV2aWNlL2Jyb3dzZXIgdmVuZG9ycyB1c2Ugd2luZG93Lm9yaWVudGF0aW9uIHZhbHVlcyAwIGFuZCAxODAgdG8KCS8vIGRlbm90ZSB0aGUgImRlZmF1bHQiIG9yaWVudGF0aW9uLiBGb3IgaU9TIGRldmljZXMsIGFuZCBtb3N0IG90aGVyIHNtYXJ0LXBob25lcyB0ZXN0ZWQsCgkvLyB0aGUgZGVmYXVsdCBvcmllbnRhdGlvbiBpcyBhbHdheXMgInBvcnRyYWl0IiwgYnV0IGluIHNvbWUgQW5kcm9pZCBhbmQgUklNIGJhc2VkIHRhYmxldHMsCgkvLyB0aGUgZGVmYXVsdCBvcmllbnRhdGlvbiBpcyAibGFuZHNjYXBlIi4gVGhlIGZvbGxvd2luZyBjb2RlIGF0dGVtcHRzIHRvIHVzZSB0aGUgd2luZG93CgkvLyBkaW1lbnNpb25zIHRvIGZpZ3VyZSBvdXQgd2hhdCB0aGUgY3VycmVudCBvcmllbnRhdGlvbiBpcywgYW5kIHRoZW4gbWFrZXMgYWRqdXN0bWVudHMKCS8vIHRvIHRoZSB0byB0aGUgcG9ydHJhaXRfbWFwIGlmIG5lY2Vzc2FyeSwgc28gdGhhdCB3ZSBjYW4gcHJvcGVybHkgZGVjb2RlIHRoZQoJLy8gd2luZG93Lm9yaWVudGF0aW9uIHZhbHVlIHdoZW5ldmVyIGdldF9vcmllbnRhdGlvbigpIGlzIGNhbGxlZC4KCS8vCgkvLyBOb3RlIHRoYXQgd2UgdXNlZCB0byB1c2UgYSBtZWRpYSBxdWVyeSB0byBmaWd1cmUgb3V0IHdoYXQgdGhlIG9yaWVudGF0aW9uIHRoZSBicm93c2VyCgkvLyB0aGlua3MgaXQgaXMgaW46CgkvLwoJLy8gICAgIGluaXRpYWxfb3JpZW50YXRpb25faXNfbGFuZHNjYXBlID0gJC5tb2JpbGUubWVkaWEoImFsbCBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIik7CgkvLwoJLy8gYnV0IHRoZXJlIHdhcyBhbiBpUGhvbmUvaVBvZCBUb3VjaCBidWcgYmVnaW5uaW5nIHdpdGggaU9TIDQuMiwgdXAgdGhyb3VnaCBpT1MgNS4xLAoJLy8gd2hlcmUgdGhlIGJyb3dzZXIgKkFMV0FZUyogYXBwbGllZCB0aGUgbGFuZHNjYXBlIG1lZGlhIHF1ZXJ5LiBUaGlzIGJ1ZyBkb2VzIG5vdAoJLy8gaGFwcGVuIG9uIGlQYWQuCgoJaWYgKCAkLnN1cHBvcnQub3JpZW50YXRpb24gKSB7CgoJCS8vIENoZWNrIHRoZSB3aW5kb3cgd2lkdGggYW5kIGhlaWdodCB0byBmaWd1cmUgb3V0IHdoYXQgdGhlIGN1cnJlbnQgb3JpZW50YXRpb24KCQkvLyBvZiB0aGUgZGV2aWNlIGlzIGF0IHRoaXMgbW9tZW50LiBOb3RlIHRoYXQgd2UndmUgaW5pdGlhbGl6ZWQgdGhlIHBvcnRyYWl0IG1hcAoJCS8vIHZhbHVlcyB0byAwIGFuZCAxODAsICpBTkQqIHdlIHB1cnBvc2VseSBjaGVjayBmb3IgbGFuZHNjYXBlIHNvIHRoYXQgaWYgd2UgZ3Vlc3MKCQkvLyB3cm9uZywgLCB3ZSBkZWZhdWx0IHRvIHRoZSBhc3N1bXB0aW9uIHRoYXQgcG9ydHJhaXQgaXMgdGhlIGRlZmF1bHQgb3JpZW50YXRpb24uCgkJLy8gV2UgdXNlIGEgdGhyZXNob2xkIGNoZWNrIGJlbG93IGJlY2F1c2Ugb24gc29tZSBwbGF0Zm9ybXMgbGlrZSBpT1MsIHRoZSBpUGhvbmUKCQkvLyBmb3JtLWZhY3RvciBjYW4gcmVwb3J0IGEgbGFyZ2VyIHdpZHRoIHRoYW4gaGVpZ2h0IGlmIHRoZSB1c2VyIHR1cm5zIG9uIHRoZQoJCS8vIGRldmVsb3BlciBjb25zb2xlLiBUaGUgYWN0dWFsIHRocmVzaG9sZCB2YWx1ZSBpcyBzb21ld2hhdCBhcmJpdHJhcnksIHdlIGp1c3QKCQkvLyBuZWVkIHRvIG1ha2Ugc3VyZSBpdCBpcyBsYXJnZSBlbm91Z2ggdG8gZXhjbHVkZSB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgY2FzZS4KCgkJd3cgPSB3aW5kb3cuaW5uZXJXaWR0aCB8fCB3aW4ud2lkdGgoKTsKCQl3aCA9IHdpbmRvdy5pbm5lckhlaWdodCB8fCB3aW4uaGVpZ2h0KCk7CgkJbGFuZHNjYXBlX3RocmVzaG9sZCA9IDUwOwoKCQlpbml0aWFsX29yaWVudGF0aW9uX2lzX2xhbmRzY2FwZSA9IHd3ID4gd2ggJiYgKCB3dyAtIHdoICkgPiBsYW5kc2NhcGVfdGhyZXNob2xkOwoKCQkvLyBOb3cgY2hlY2sgdG8gc2VlIGlmIHRoZSBjdXJyZW50IHdpbmRvdy5vcmllbnRhdGlvbiBpcyAwIG9yIDE4MC4KCQlpbml0aWFsX29yaWVudGF0aW9uX2lzX2RlZmF1bHQgPSBwb3J0cmFpdF9tYXBbIHdpbmRvdy5vcmllbnRhdGlvbiBdOwoKCQkvLyBJZiB0aGUgaW5pdGlhbCBvcmllbnRhdGlvbiBpcyBsYW5kc2NhcGUsIGJ1dCB3aW5kb3cub3JpZW50YXRpb24gcmVwb3J0cyAwIG9yIDE4MCwgKk9SKgoJCS8vIGlmIHRoZSBpbml0aWFsIG9yaWVudGF0aW9uIGlzIHBvcnRyYWl0LCBidXQgd2luZG93Lm9yaWVudGF0aW9uIHJlcG9ydHMgOTAgb3IgLTkwLCB3ZQoJCS8vIG5lZWQgdG8gZmxpcCBvdXIgcG9ydHJhaXRfbWFwIHZhbHVlcyBiZWNhdXNlIGxhbmRzY2FwZSBpcyB0aGUgZGVmYXVsdCBvcmllbnRhdGlvbiBmb3IKCQkvLyB0aGlzIGRldmljZS9icm93c2VyLgoJCWlmICggKCBpbml0aWFsX29yaWVudGF0aW9uX2lzX2xhbmRzY2FwZSAmJiBpbml0aWFsX29yaWVudGF0aW9uX2lzX2RlZmF1bHQgKSB8fCAoICFpbml0aWFsX29yaWVudGF0aW9uX2lzX2xhbmRzY2FwZSAmJiAhaW5pdGlhbF9vcmllbnRhdGlvbl9pc19kZWZhdWx0ICkgKSB7CgkJCXBvcnRyYWl0X21hcCA9IHsgIi05MCI6IHRydWUsICI5MCI6IHRydWUgfTsKCQl9Cgl9CgoJJC5ldmVudC5zcGVjaWFsLm9yaWVudGF0aW9uY2hhbmdlID0gJC5leHRlbmQoIHt9LCAkLmV2ZW50LnNwZWNpYWwub3JpZW50YXRpb25jaGFuZ2UsIHsKCQlzZXR1cDogZnVuY3Rpb24oKSB7CgkJCS8vIElmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQgbmF0aXZlbHksIHJldHVybiBmYWxzZSBzbyB0aGF0IGpRdWVyeQoJCQkvLyB3aWxsIGJpbmQgdG8gdGhlIGV2ZW50IHVzaW5nIERPTSBtZXRob2RzLgoJCQlpZiAoICQuc3VwcG9ydC5vcmllbnRhdGlvbiAmJiAhJC5ldmVudC5zcGVjaWFsLm9yaWVudGF0aW9uY2hhbmdlLmRpc2FibGVkICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQkvLyBHZXQgdGhlIGN1cnJlbnQgb3JpZW50YXRpb24gdG8gYXZvaWQgaW5pdGlhbCBkb3VibGUtdHJpZ2dlcmluZy4KCQkJbGFzdF9vcmllbnRhdGlvbiA9IGdldF9vcmllbnRhdGlvbigpOwoKCQkJLy8gQmVjYXVzZSB0aGUgb3JpZW50YXRpb25jaGFuZ2UgZXZlbnQgZG9lc24ndCBleGlzdCwgc2ltdWxhdGUgdGhlCgkJCS8vIGV2ZW50IGJ5IHRlc3Rpbmcgd2luZG93IGRpbWVuc2lvbnMgb24gcmVzaXplLgoJCQl3aW4uYmluZCggInRocm90dGxlZHJlc2l6ZSIsIGhhbmRsZXIgKTsKCQl9LAoJCXRlYXJkb3duOiBmdW5jdGlvbigpIHsKCQkJLy8gSWYgdGhlIGV2ZW50IGlzIG5vdCBzdXBwb3J0ZWQgbmF0aXZlbHksIHJldHVybiBmYWxzZSBzbyB0aGF0CgkJCS8vIGpRdWVyeSB3aWxsIHVuYmluZCB0aGUgZXZlbnQgdXNpbmcgRE9NIG1ldGhvZHMuCgkJCWlmICggJC5zdXBwb3J0Lm9yaWVudGF0aW9uICYmICEkLmV2ZW50LnNwZWNpYWwub3JpZW50YXRpb25jaGFuZ2UuZGlzYWJsZWQgKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCgkJCS8vIEJlY2F1c2UgdGhlIG9yaWVudGF0aW9uY2hhbmdlIGV2ZW50IGRvZXNuJ3QgZXhpc3QsIHVuYmluZCB0aGUKCQkJLy8gcmVzaXplIGV2ZW50IGhhbmRsZXIuCgkJCXdpbi51bmJpbmQoICJ0aHJvdHRsZWRyZXNpemUiLCBoYW5kbGVyICk7CgkJfSwKCQlhZGQ6IGZ1bmN0aW9uKCBoYW5kbGVPYmogKSB7CgkJCS8vIFNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIGJvdW5kIGV2ZW50IGhhbmRsZXIuCgkJCXZhciBvbGRfaGFuZGxlciA9IGhhbmRsZU9iai5oYW5kbGVyOwoKCQkJaGFuZGxlT2JqLmhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkvLyBNb2RpZnkgZXZlbnQgb2JqZWN0LCBhZGRpbmcgdGhlIC5vcmllbnRhdGlvbiBwcm9wZXJ0eS4KCQkJCWV2ZW50Lm9yaWVudGF0aW9uID0gZ2V0X29yaWVudGF0aW9uKCk7CgoJCQkJLy8gQ2FsbCB0aGUgb3JpZ2luYWxseS1ib3VuZCBldmVudCBoYW5kbGVyIGFuZCByZXR1cm4gaXRzIHJlc3VsdC4KCQkJCXJldHVybiBvbGRfaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCX07CgkJfQoJfSk7CgoJLy8gSWYgdGhlIGV2ZW50IGlzIG5vdCBzdXBwb3J0ZWQgbmF0aXZlbHksIHRoaXMgaGFuZGxlciB3aWxsIGJlIGJvdW5kIHRvCgkvLyB0aGUgd2luZG93IHJlc2l6ZSBldmVudCB0byBzaW11bGF0ZSB0aGUgb3JpZW50YXRpb25jaGFuZ2UgZXZlbnQuCglmdW5jdGlvbiBoYW5kbGVyKCkgewoJCS8vIEdldCB0aGUgY3VycmVudCBvcmllbnRhdGlvbi4KCQl2YXIgb3JpZW50YXRpb24gPSBnZXRfb3JpZW50YXRpb24oKTsKCgkJaWYgKCBvcmllbnRhdGlvbiAhPT0gbGFzdF9vcmllbnRhdGlvbiApIHsKCQkJLy8gVGhlIG9yaWVudGF0aW9uIGhhcyBjaGFuZ2VkLCBzbyB0cmlnZ2VyIHRoZSBvcmllbnRhdGlvbmNoYW5nZSBldmVudC4KCQkJbGFzdF9vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uOwoJCQl3aW4udHJpZ2dlciggZXZlbnRfbmFtZSApOwoJCX0KCX0KCgkvLyBHZXQgdGhlIGN1cnJlbnQgcGFnZSBvcmllbnRhdGlvbi4gVGhpcyBtZXRob2QgaXMgZXhwb3NlZCBwdWJsaWNseSwgc2hvdWxkIGl0CgkvLyBiZSBuZWVkZWQsIGFzIGpRdWVyeS5ldmVudC5zcGVjaWFsLm9yaWVudGF0aW9uY2hhbmdlLm9yaWVudGF0aW9uKCkKCSQuZXZlbnQuc3BlY2lhbC5vcmllbnRhdGlvbmNoYW5nZS5vcmllbnRhdGlvbiA9IGdldF9vcmllbnRhdGlvbiA9IGZ1bmN0aW9uKCkgewoJCXZhciBpc1BvcnRyYWl0ID0gdHJ1ZSwgZWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKCgkJLy8gcHJlZmVyIHdpbmRvdyBvcmllbnRhdGlvbiB0byB0aGUgY2FsY3VsYXRpb24gYmFzZWQgb24gc2NyZWVuc2l6ZSBhcwoJCS8vIHRoZSBhY3R1YWwgc2NyZWVuIHJlc2l6ZSB0YWtlcyBwbGFjZSBiZWZvcmUgb3IgYWZ0ZXIgdGhlIG9yaWVudGF0aW9uIGNoYW5nZSBldmVudAoJCS8vIGhhcyBiZWVuIGZpcmVkIGRlcGVuZGluZyBvbiBpbXBsZW1lbnRhdGlvbiAoZWcgYW5kcm9pZCAyLjMgaXMgYmVmb3JlLCBpcGhvbmUgYWZ0ZXIpLgoJCS8vIE1vcmUgdGVzdGluZyBpcyByZXF1aXJlZCB0byBkZXRlcm1pbmUgaWYgYSBtb3JlIHJlbGlhYmxlIG1ldGhvZCBvZiBkZXRlcm1pbmluZyB0aGUgbmV3IHNjcmVlbnNpemUKCQkvLyBpcyBwb3NzaWJsZSB3aGVuIG9yaWVudGF0aW9uY2hhbmdlIGlzIGZpcmVkLiAoZWcsIHVzZSBtZWRpYSBxdWVyaWVzICsgZWxlbWVudCArIG9wYWNpdHkpCgkJaWYgKCAkLnN1cHBvcnQub3JpZW50YXRpb24gKSB7CgkJCS8vIGlmIHRoZSB3aW5kb3cgb3JpZW50YXRpb24gcmVnaXN0ZXJzIGFzIDAgb3IgMTgwIGRlZ3JlZXMgcmVwb3J0CgkJCS8vIHBvcnRyYWl0LCBvdGhlcndpc2UgbGFuZHNjYXBlCgkJCWlzUG9ydHJhaXQgPSBwb3J0cmFpdF9tYXBbIHdpbmRvdy5vcmllbnRhdGlvbiBdOwoJCX0gZWxzZSB7CgkJCWlzUG9ydHJhaXQgPSBlbGVtICYmIGVsZW0uY2xpZW50V2lkdGggLyBlbGVtLmNsaWVudEhlaWdodCA8IDEuMTsKCQl9CgoJCXJldHVybiBpc1BvcnRyYWl0ID8gInBvcnRyYWl0IiA6ICJsYW5kc2NhcGUiOwoJfTsKCgkkLmZuWyBldmVudF9uYW1lIF0gPSBmdW5jdGlvbiggZm4gKSB7CgkJcmV0dXJuIGZuID8gdGhpcy5iaW5kKCBldmVudF9uYW1lLCBmbiApIDogdGhpcy50cmlnZ2VyKCBldmVudF9uYW1lICk7Cgl9OwoKCS8vIGpRdWVyeSA8IDEuOAoJaWYgKCAkLmF0dHJGbiApIHsKCQkkLmF0dHJGblsgZXZlbnRfbmFtZSBdID0gdHJ1ZTsKCX0KCn0oIGpRdWVyeSwgdGhpcyApKTsKCgoKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKCS8vIGV4aXN0aW5nIGJhc2UgdGFnPwoJdmFyIGJhc2VFbGVtZW50ID0gJCggImhlYWQiICkuY2hpbGRyZW4oICJiYXNlIiApLAoKCS8vIGJhc2UgZWxlbWVudCBtYW5hZ2VtZW50LCBkZWZpbmVkIGRlcGVuZGluZyBvbiBkeW5hbWljIGJhc2UgdGFnIHN1cHBvcnQKCS8vIFRPRE8gbW92ZSB0byBleHRlcm5hbCB3aWRnZXQKCWJhc2UgPSB7CgoJCS8vIGRlZmluZSBiYXNlIGVsZW1lbnQsIGZvciB1c2UgaW4gcm91dGluZyBhc3NldCB1cmxzIHRoYXQgYXJlIHJlZmVyZW5jZWQKCQkvLyBpbiBBamF4LXJlcXVlc3RlZCBtYXJrdXAKCQllbGVtZW50OiAoIGJhc2VFbGVtZW50Lmxlbmd0aCA/IGJhc2VFbGVtZW50IDoKCQkJJCggIjxiYXNlPiIsIHsgaHJlZjogJC5tb2JpbGUucGF0aC5kb2N1bWVudEJhc2UuaHJlZk5vSGFzaCB9ICkucHJlcGVuZFRvKCAkKCAiaGVhZCIgKSApICksCgoJCWxpbmtTZWxlY3RvcjogIltzcmNdLCBsaW5rW2hyZWZdLCBhW3JlbD0nZXh0ZXJuYWwnXSwgOmpxbURhdGEoYWpheD0nZmFsc2UnKSwgYVt0YXJnZXRdIiwKCgkJLy8gc2V0IHRoZSBnZW5lcmF0ZWQgQkFTRSBlbGVtZW50J3MgaHJlZiB0byBhIG5ldyBwYWdlJ3MgYmFzZSBwYXRoCgkJc2V0OiBmdW5jdGlvbiggaHJlZiApIHsKCgkJCS8vIHdlIHNob3VsZCBkbyBub3RoaW5nIGlmIHRoZSB1c2VyIHdhbnRzIHRvIG1hbmFnZSB0aGVpciB1cmwgYmFzZQoJCQkvLyBtYW51YWxseQoJCQlpZiAoICEkLm1vYmlsZS5keW5hbWljQmFzZUVuYWJsZWQgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIHdlIHNob3VsZCB1c2UgdGhlIGJhc2UgdGFnIGlmIHdlIGNhbiBtYW5pcHVsYXRlIGl0IGR5bmFtaWNhbGx5CgkJCWlmICggJC5zdXBwb3J0LmR5bmFtaWNCYXNlVGFnICkgewoJCQkJYmFzZS5lbGVtZW50LmF0dHIoICJocmVmIiwKCQkJCQkkLm1vYmlsZS5wYXRoLm1ha2VVcmxBYnNvbHV0ZSggaHJlZiwgJC5tb2JpbGUucGF0aC5kb2N1bWVudEJhc2UgKSApOwoJCQl9CgkJfSwKCgkJcmV3cml0ZTogZnVuY3Rpb24oIGhyZWYsIHBhZ2UgKSB7CgkJCXZhciBuZXdQYXRoID0gJC5tb2JpbGUucGF0aC5nZXQoIGhyZWYgKTsKCgkJCXBhZ2UuZmluZCggYmFzZS5saW5rU2VsZWN0b3IgKS5lYWNoKGZ1bmN0aW9uKCBpLCBsaW5rICkgewoJCQkJdmFyIHRoaXNBdHRyID0gJCggbGluayApLmlzKCAiW2hyZWZdIiApID8gImhyZWYiIDoKCQkJCQkkKCBsaW5rICkuaXMoICJbc3JjXSIgKSA/ICJzcmMiIDogImFjdGlvbiIsCgkJCQl0aGlzVXJsID0gJCggbGluayApLmF0dHIoIHRoaXNBdHRyICk7CgoJCQkJLy8gWFhYX2pibGFzOiBXZSBuZWVkIHRvIGZpeCB0aGlzIHNvIHRoYXQgaXQgcmVtb3ZlcyB0aGUgZG9jdW1lbnQKCQkJCS8vICAgICAgICAgICAgYmFzZSBVUkwsIGFuZCB0aGVuIHByZXBlbmRzIHdpdGggdGhlIG5ldyBwYWdlIFVSTC4KCQkJCS8vIGlmIGZ1bGwgcGF0aCBleGlzdHMgYW5kIGlzIHNhbWUsIGNob3AgaXQgLSBoZWxwcyBJRSBvdXQKCQkJCXRoaXNVcmwgPSB0aGlzVXJsLnJlcGxhY2UoIGxvY2F0aW9uLnByb3RvY29sICsgIi8vIiArCgkJCQkJbG9jYXRpb24uaG9zdCArIGxvY2F0aW9uLnBhdGhuYW1lLCAiIiApOwoKCQkJCWlmICggIS9eKFx3Kzp8I3xcLykvLnRlc3QoIHRoaXNVcmwgKSApIHsKCQkJCQkkKCBsaW5rICkuYXR0ciggdGhpc0F0dHIsIG5ld1BhdGggKyB0aGlzVXJsICk7CgkJCQl9CgkJCX0pOwoJCX0sCgoJCS8vIHNldCB0aGUgZ2VuZXJhdGVkIEJBU0UgZWxlbWVudCdzIGhyZWYgdG8gYSBuZXcgcGFnZSdzIGJhc2UgcGF0aAoJCXJlc2V0OiBmdW5jdGlvbigvKiBocmVmICovKSB7CgkJCWJhc2UuZWxlbWVudC5hdHRyKCAiaHJlZiIsICQubW9iaWxlLnBhdGguZG9jdW1lbnRCYXNlLmhyZWZOb1NlYXJjaCApOwoJCX0KCX07CgoJJC5tb2JpbGUuYmFzZSA9IGJhc2U7Cgp9KSggalF1ZXJ5ICk7CgoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CiQubW9iaWxlLndpZGdldHMgPSB7fTsKCnZhciBvcmlnaW5hbFdpZGdldCA9ICQud2lkZ2V0LAoKCS8vIFJlY29yZCB0aGUgb3JpZ2luYWwsIG5vbi1tb2JpbGVpbml0LW1vZGlmaWVkIHZlcnNpb24gb2YgJC5tb2JpbGUua2VlcE5hdGl2ZQoJLy8gc28gd2UgY2FuIGxhdGVyIGRldGVybWluZSB3aGV0aGVyIHNvbWVvbmUgaGFzIG1vZGlmaWVkICQubW9iaWxlLmtlZXBOYXRpdmUKCWtlZXBOYXRpdmVGYWN0b3J5RGVmYXVsdCA9ICQubW9iaWxlLmtlZXBOYXRpdmU7CgokLndpZGdldCA9IChmdW5jdGlvbiggb3JpZyApIHsKCXJldHVybiBmdW5jdGlvbigpIHsKCQl2YXIgY29uc3RydWN0b3IgPSBvcmlnLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSwKCQkJbmFtZSA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZS53aWRnZXROYW1lOwoKCQljb25zdHJ1Y3Rvci5pbml0U2VsZWN0b3IgPSAoICggY29uc3RydWN0b3IucHJvdG90eXBlLmluaXRTZWxlY3RvciAhPT0gdW5kZWZpbmVkICkgPwoJCQljb25zdHJ1Y3Rvci5wcm90b3R5cGUuaW5pdFNlbGVjdG9yIDogIjpqcW1EYXRhKHJvbGU9JyIgKyBuYW1lICsgIicpIiApOwoKCQkkLm1vYmlsZS53aWRnZXRzWyBuYW1lIF0gPSBjb25zdHJ1Y3RvcjsKCgkJcmV0dXJuIGNvbnN0cnVjdG9yOwoJfTsKfSkoICQud2lkZ2V0ICk7CgovLyBNYWtlIHN1cmUgJC53aWRnZXQgc3RpbGwgaGFzIGJyaWRnZSBhbmQgZXh0ZW5kIG1ldGhvZHMKJC5leHRlbmQoICQud2lkZ2V0LCBvcmlnaW5hbFdpZGdldCApOwoKLy8gRm9yIGJhY2tjb21wYXQgcmVtb3ZlIGluIDEuNQokLm1vYmlsZS5kb2N1bWVudC5vbiggImNyZWF0ZSIsIGZ1bmN0aW9uKCBldmVudCApIHsKCSQoIGV2ZW50LnRhcmdldCApLmVuaGFuY2VXaXRoaW4oKTsKfSk7CgokLndpZGdldCggIm1vYmlsZS5wYWdlIiwgewoJb3B0aW9uczogewoJCXRoZW1lOiAiYSIsCgkJZG9tQ2FjaGU6IGZhbHNlLAoKCQkvLyBEZXByZWNhdGVkIGluIDEuNCByZW1vdmUgaW4gMS41CgkJa2VlcE5hdGl2ZURlZmF1bHQ6ICQubW9iaWxlLmtlZXBOYXRpdmUsCgoJCS8vIERlcHJlY2F0ZWQgaW4gMS40IHJlbW92ZSBpbiAxLjUKCQljb250ZW50VGhlbWU6IG51bGwsCgkJZW5oYW5jZWQ6IGZhbHNlCgl9LAoKCS8vIERFUFJFQ0FURUQgZm9yID4gMS40CgkvLyBUT0RPIHJlbW92ZSBhdCAxLjUKCV9jcmVhdGVXaWRnZXQ6IGZ1bmN0aW9uKCkgewoJCSQuV2lkZ2V0LnByb3RvdHlwZS5fY3JlYXRlV2lkZ2V0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQl0aGlzLl90cmlnZ2VyKCAiaW5pdCIgKTsKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJLy8gSWYgZmFsc2UgaXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrcyBkbyBub3QgY3JlYXRlIHRoZSBwYWdlCgkJaWYgKCB0aGlzLl90cmlnZ2VyKCAiYmVmb3JlY3JlYXRlIiApID09PSBmYWxzZSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJaWYgKCAhdGhpcy5vcHRpb25zLmVuaGFuY2VkICkgewoJCQl0aGlzLl9lbmhhbmNlKCk7CgkJfQoKCQl0aGlzLl9vbiggdGhpcy5lbGVtZW50LCB7CgkJCXBhZ2ViZWZvcmVoaWRlOiAicmVtb3ZlQ29udGFpbmVyQmFja2dyb3VuZCIsCgkJCXBhZ2ViZWZvcmVzaG93OiAiX2hhbmRsZVBhZ2VCZWZvcmVTaG93IgoJCX0pOwoKCQl0aGlzLmVsZW1lbnQuZW5oYW5jZVdpdGhpbigpOwoJCS8vIERpYWxvZyB3aWRnZXQgaXMgZGVwcmVjYXRlZCBpbiAxLjQgcmVtb3ZlIHRoaXMgaW4gMS41CgkJaWYgKCAkLm1vYmlsZS5nZXRBdHRyaWJ1dGUoIHRoaXMuZWxlbWVudFswXSwgInJvbGUiICkgPT09ICJkaWFsb2ciICYmICQubW9iaWxlLmRpYWxvZyApIHsKCQkJdGhpcy5lbGVtZW50LmRpYWxvZygpOwoJCX0KCX0sCgoJX2VuaGFuY2U6IGZ1bmN0aW9uICgpIHsKCQl2YXIgYXR0clByZWZpeCA9ICJkYXRhLSIgKyAkLm1vYmlsZS5ucywKCQkJc2VsZiA9IHRoaXM7CgoJCWlmICggdGhpcy5vcHRpb25zLnJvbGUgKSB7CgkJCXRoaXMuZWxlbWVudC5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAicm9sZSIsIHRoaXMub3B0aW9ucy5yb2xlICk7CgkJfQoKCQl0aGlzLmVsZW1lbnQKCQkJLmF0dHIoICJ0YWJpbmRleCIsICIwIiApCgkJCS5hZGRDbGFzcyggInVpLXBhZ2UgdWktcGFnZS10aGVtZS0iICsgdGhpcy5vcHRpb25zLnRoZW1lICk7CgoJCS8vIE1hbmlwdWxhdGlvbiBvZiBjb250ZW50IG9zIERlcHJlY2F0ZWQgYXMgb2YgMS40IHJlbW92ZSBpbiAxLjUKCQl0aGlzLmVsZW1lbnQuZmluZCggIlsiICsgYXR0clByZWZpeCArICJyb2xlPSdjb250ZW50J10iICkuZWFjaCggZnVuY3Rpb24oKSB7CgkJCXZhciAkdGhpcyA9ICQoIHRoaXMgKSwKCQkJCXRoZW1lID0gdGhpcy5nZXRBdHRyaWJ1dGUoIGF0dHJQcmVmaXggKyAidGhlbWUiICkgfHwgdW5kZWZpbmVkOwoJCQkJc2VsZi5vcHRpb25zLmNvbnRlbnRUaGVtZSA9IHRoZW1lIHx8IHNlbGYub3B0aW9ucy5jb250ZW50VGhlbWUgfHwgKCBzZWxmLm9wdGlvbnMuZGlhbG9nICYmIHNlbGYub3B0aW9ucy50aGVtZSApIHx8ICggc2VsZi5lbGVtZW50LmpxbURhdGEoInJvbGUiKSA9PT0gImRpYWxvZyIgJiYgIHNlbGYub3B0aW9ucy50aGVtZSApOwoJCQkJJHRoaXMuYWRkQ2xhc3MoICJ1aS1jb250ZW50IiApOwoJCQkJaWYgKCBzZWxmLm9wdGlvbnMuY29udGVudFRoZW1lICkgewoJCQkJCSR0aGlzLmFkZENsYXNzKCAidWktYm9keS0iICsgKCBzZWxmLm9wdGlvbnMuY29udGVudFRoZW1lICkgKTsKCQkJCX0KCQkJCS8vIEFkZCBBUklBIHJvbGUKCQkJCSR0aGlzLmF0dHIoICJyb2xlIiwgIm1haW4iICkuYWRkQ2xhc3MoICJ1aS1jb250ZW50IiApOwoJCX0pOwoJfSwKCgliaW5kUmVtb3ZlOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7CgkJdmFyIHBhZ2UgPSB0aGlzLmVsZW1lbnQ7CgoJCS8vIHdoZW4gZG9tIGNhY2hpbmcgaXMgbm90IGVuYWJsZWQgb3IgdGhlIHBhZ2UgaXMgZW1iZWRkZWQgYmluZCB0byByZW1vdmUgdGhlIHBhZ2Ugb24gaGlkZQoJCWlmICggIXBhZ2UuZGF0YSggIm1vYmlsZS1wYWdlIiApLm9wdGlvbnMuZG9tQ2FjaGUgJiYKCQkJcGFnZS5pcyggIjpqcW1EYXRhKGV4dGVybmFsLXBhZ2U9J3RydWUnKSIgKSApIHsKCgkJCS8vIFRPRE8gdXNlIF9vbiAtIHRoYXQgaXMsIHNvcnQgb3V0IHdoeSBpdCBkb2Vzbid0IHdvcmsgaW4gdGhpcyBjYXNlCgkJCXBhZ2UuYmluZCggInBhZ2VoaWRlLnJlbW92ZSIsIGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCBlLCBkYXRhICkgewoKCQkJCS8vY2hlY2sgaWYgdGhpcyBpcyBhIHNhbWUgcGFnZSB0cmFuc2l0aW9uIGFuZCBpZiBzbyBkb24ndCByZW1vdmUgdGhlIHBhZ2UKCQkJCWlmKCAhZGF0YS5zYW1lUGFnZSApewoJCQkJCXZhciAkdGhpcyA9ICQoIHRoaXMgKSwKCQkJCQkJcHJFdmVudCA9IG5ldyAkLkV2ZW50KCAicGFnZXJlbW92ZSIgKTsKCgkJCQkJJHRoaXMudHJpZ2dlciggcHJFdmVudCApOwoKCQkJCQlpZiAoICFwckV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkgewoJCQkJCQkkdGhpcy5yZW1vdmVXaXRoRGVwZW5kZW50cygpOwoJCQkJCX0KCQkJCX0KCQkJfSk7CgkJfQoJfSwKCglfc2V0T3B0aW9uczogZnVuY3Rpb24oIG8gKSB7CgkJaWYgKCBvLnRoZW1lICE9PSB1bmRlZmluZWQgKSB7CgkJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggInVpLWJvZHktIiArIHRoaXMub3B0aW9ucy50aGVtZSApLmFkZENsYXNzKCAidWktYm9keS0iICsgby50aGVtZSApOwoJCX0KCgkJaWYgKCBvLmNvbnRlbnRUaGVtZSAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLmVsZW1lbnQuZmluZCggIltkYXRhLSIgKyAkLm1vYmlsZS5ucyArICI9J2NvbnRlbnQnXSIgKS5yZW1vdmVDbGFzcyggInVpLWJvZHktIiArIHRoaXMub3B0aW9ucy5jb250ZW50VGhlbWUgKQoJCQkJLmFkZENsYXNzKCAidWktYm9keS0iICsgby5jb250ZW50VGhlbWUgKTsKCQl9Cgl9LAoKCV9oYW5kbGVQYWdlQmVmb3JlU2hvdzogZnVuY3Rpb24oLyogZSAqLykgewoJCXRoaXMuc2V0Q29udGFpbmVyQmFja2dyb3VuZCgpOwoJfSwKCS8vIERlcHJlY2F0ZWQgaW4gMS40IHJlbW92ZSBpbiAxLjUKCXJlbW92ZUNvbnRhaW5lckJhY2tncm91bmQ6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudC5jbG9zZXN0KCAiOm1vYmlsZS1wYWdlY29udGFpbmVyIiApLnBhZ2Vjb250YWluZXIoeyAidGhlbWUiOiAibm9uZSIgfSk7Cgl9LAoJLy8gRGVwcmVjYXRlZCBpbiAxLjQgcmVtb3ZlIGluIDEuNQoJLy8gc2V0IHRoZSBwYWdlIGNvbnRhaW5lciBiYWNrZ3JvdW5kIHRvIHRoZSBwYWdlIHRoZW1lCglzZXRDb250YWluZXJCYWNrZ3JvdW5kOiBmdW5jdGlvbiggdGhlbWUgKSB7CgkJdGhpcy5lbGVtZW50LnBhcmVudCgpLnBhZ2Vjb250YWluZXIoIHsgInRoZW1lIjogdGhlbWUgfHwgdGhpcy5vcHRpb25zLnRoZW1lIH0gKTsKCX0sCgkvLyBEZXByZWNhdGVkIGluIDEuNCByZW1vdmUgaW4gMS41CglrZWVwTmF0aXZlU2VsZWN0b3I6IGZ1bmN0aW9uKCkgewoJCXZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLAoJCQlrZWVwTmF0aXZlID0gJC50cmltKCBvcHRpb25zLmtlZXBOYXRpdmUgfHwgIiIgKSwKCQkJZ2xvYmFsVmFsdWUgPSAkLnRyaW0oICQubW9iaWxlLmtlZXBOYXRpdmUgKSwKCQkJb3B0aW9uVmFsdWUgPSAkLnRyaW0oIG9wdGlvbnMua2VlcE5hdGl2ZURlZmF1bHQgKSwKCgkJCS8vIENoZWNrIGlmICQubW9iaWxlLmtlZXBOYXRpdmUgaGFzIGNoYW5nZWQgZnJvbSB0aGUgZmFjdG9yeSBkZWZhdWx0CgkJCW5ld0RlZmF1bHQgPSAoIGtlZXBOYXRpdmVGYWN0b3J5RGVmYXVsdCA9PT0gZ2xvYmFsVmFsdWUgPwoJCQkJIiIgOiBnbG9iYWxWYWx1ZSApLAoKCQkJLy8gSWYgJC5tb2JpbGUua2VlcE5hdGl2ZSBoYXMgbm90IGNoYW5nZWQsIHVzZSBvcHRpb25zLmtlZXBOYXRpdmVEZWZhdWx0CgkJCW9sZERlZmF1bHQgPSAoIG5ld0RlZmF1bHQgPT09ICIiID8gb3B0aW9uVmFsdWUgOiAiIiApOwoKCQkvLyBDb25jYXRlbmF0ZSBrZWVwTmF0aXZlIHNlbGVjdG9ycyBmcm9tIGFsbCBzb3VyY2VzIHdoZXJlIHRoZSB2YWx1ZSBoYXMKCQkvLyBjaGFuZ2VkIG9yLCBpZiBub3RoaW5nIGhhcyBjaGFuZ2VkLCByZXR1cm4gdGhlIGRlZmF1bHQKCQlyZXR1cm4gKCAoIGtlZXBOYXRpdmUgPyBbIGtlZXBOYXRpdmUgXSA6IFtdICkKCQkJLmNvbmNhdCggbmV3RGVmYXVsdCA/IFsgbmV3RGVmYXVsdCBdIDogW10gKQoJCQkuY29uY2F0KCBvbGREZWZhdWx0ID8gWyBvbGREZWZhdWx0IF0gOiBbXSApCgkJCS5qb2luKCAiLCAiICkgKTsKCX0KfSk7Cn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKCSQud2lkZ2V0KCAibW9iaWxlLnBhZ2Vjb250YWluZXIiLCB7CgkJb3B0aW9uczogewoJCQl0aGVtZTogImEiCgkJfSwKCgkJaW5pdFNlbGVjdG9yOiBmYWxzZSwKCgkJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJCXRoaXMuc2V0TGFzdFNjcm9sbEVuYWJsZWQgPSB0cnVlOwoKCQkJLy8gVE9ETyBjb25zaWRlciBtb3ZpbmcgdGhlIG5hdmlnYXRpb24gaGFuZGxlciBPVVQgb2Ygd2lkZ2V0IGludG8KCQkJLy8gICAgICBzb21lIG90aGVyIG9iamVjdCBhcyBnbHVlIGJldHdlZW4gdGhlIG5hdmlnYXRlIGV2ZW50IGFuZCB0aGUKCQkJLy8gICAgICBjb250ZW50IHdpZGdldCBsb2FkIGFuZCBjaGFuZ2UgbWV0aG9kcwoJCQl0aGlzLl9vbiggdGhpcy53aW5kb3csIHsgbmF2aWdhdGU6ICJfZmlsdGVyTmF2aWdhdGVFdmVudHMiIH0pOwoKCQkJdGhpcy5fb24oIHRoaXMud2luZG93LCB7CgkJCQkvLyBkaXNhYmxlIGFuIHNjcm9sbCBzZXR0aW5nIHdoZW4gYSBoYXNoY2hhbmdlIGhhcyBiZWVuIGZpcmVkLAoJCQkJLy8gdGhpcyBvbmx5IHdvcmtzIGJlY2F1c2UgdGhlIHJlY29yZGluZyBvZiB0aGUgc2Nyb2xsIHBvc2l0aW9uCgkJCQkvLyBpcyBkZWxheWVkIGZvciAxMDBtcyBhZnRlciB0aGUgYnJvd3NlciBtaWdodCBoYXZlIGNoYW5nZWQgdGhlCgkJCQkvLyBwb3NpdGlvbiBiZWNhdXNlIG9mIHRoZSBoYXNoY2hhbmdlCgkJCQluYXZpZ2F0ZTogIl9kaXNhYmxlUmVjb3JkU2Nyb2xsIiwKCgkJCQkvLyBiaW5kIHRvIHNjcm9sbHN0b3AgZm9yIHRoZSBmaXJzdCBwYWdlLCAicGFnZWNoYW5nZSIgd29uJ3QgYmUKCQkJCS8vIGZpcmVkIGluIHRoYXQgY2FzZQoJCQkJc2Nyb2xsc3RvcDogIl9kZWxheWVkUmVjb3JkU2Nyb2xsIgoJCQl9KTsKCgkJCS8vIFRPRE8gbW92ZSBmcm9tIHBhZ2UqIGV2ZW50cyB0byBjb250ZW50KiBldmVudHMKCQkJdGhpcy5fb24oeyBwYWdlY2hhbmdlOiAiX2FmdGVyQ29udGVudENoYW5nZSIgfSk7CgoJCQkvLyBoYW5kbGUgaW5pdGlhbCBoYXNoY2hhbmdlIGZyb20gY2hyb21lIDooCgkJCXRoaXMud2luZG93Lm9uZSggIm5hdmlnYXRlIiwgJC5wcm94eShmdW5jdGlvbigpIHsKCQkJCXRoaXMuc2V0TGFzdFNjcm9sbEVuYWJsZWQgPSB0cnVlOwoJCQl9LCB0aGlzKSk7CgkJfSwKCgkJX3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCQlpZiAoIG9wdGlvbnMudGhlbWUgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnRoZW1lICE9PSAibm9uZSIgKSB7CgkJCQl0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoICJ1aS1vdmVybGF5LSIgKyB0aGlzLm9wdGlvbnMudGhlbWUgKQoJCQkJCS5hZGRDbGFzcyggInVpLW92ZXJsYXktIiArIG9wdGlvbnMudGhlbWUgKTsKCQkJfSBlbHNlIGlmICggb3B0aW9ucy50aGVtZSAhPT0gdW5kZWZpbmVkICkgewoJCQkJdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKCAidWktb3ZlcmxheS0iICsgdGhpcy5vcHRpb25zLnRoZW1lICk7CgkJCX0KCgkJCXRoaXMuX3N1cGVyKCBvcHRpb25zICk7CgkJfSwKCgkJX2Rpc2FibGVSZWNvcmRTY3JvbGw6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLnNldExhc3RTY3JvbGxFbmFibGVkID0gZmFsc2U7CgkJfSwKCgkJX2VuYWJsZVJlY29yZFNjcm9sbDogZnVuY3Rpb24oKSB7CgkJCXRoaXMuc2V0TGFzdFNjcm9sbEVuYWJsZWQgPSB0cnVlOwoJCX0sCgoJCS8vIFRPRE8gY29uc2lkZXIgdGhlIG5hbWUgaGVyZSwgc2luY2UgaXQncyBwdXJwb3NlIHNwZWNpZmljCgkJX2FmdGVyQ29udGVudENoYW5nZTogZnVuY3Rpb24oKSB7CgkJCS8vIG9uY2UgdGhlIHBhZ2UgaGFzIGNoYW5nZWQsIHJlLWVuYWJsZSB0aGUgc2Nyb2xsIHJlY29yZGluZwoJCQl0aGlzLnNldExhc3RTY3JvbGxFbmFibGVkID0gdHJ1ZTsKCgkJCS8vIHJlbW92ZSBhbnkgYmluZGluZyB0aGF0IHByZXZpb3VzbHkgZXhpc3RlZCBvbiB0aGUgZ2V0IHNjcm9sbAoJCQkvLyB3aGljaCBtYXkgb3IgbWF5IG5vdCBiZSBkaWZmZXJlbnQgdGhhbiB0aGUgc2Nyb2xsIGVsZW1lbnQKCQkJLy8gZGV0ZXJtaW5lZCBmb3IgdGhpcyBwYWdlIHByZXZpb3VzbHkKCQkJdGhpcy5fb2ZmKCB0aGlzLndpbmRvdywgInNjcm9sbHN0b3AiICk7CgoJCQkvLyBkZXRlcm1pbmUgYW5kIGJpbmQgdG8gdGhlIGN1cnJlbnQgc2NvbGwgZWxlbWVudCB3aGljaCBtYXkgYmUgdGhlCgkJCS8vIHdpbmRvdyBvciBpbiB0aGUgY2FzZSBvZiB0b3VjaCBvdmVyZmxvdyB0aGUgZWxlbWVudCB0b3VjaCBvdmVyZmxvdwoJCQl0aGlzLl9vbiggdGhpcy53aW5kb3csIHsgc2Nyb2xsc3RvcDogIl9kZWxheWVkUmVjb3JkU2Nyb2xsIiB9KTsKCQl9LAoKCQlfcmVjb3JkU2Nyb2xsOiBmdW5jdGlvbigpIHsKCQkJLy8gdGhpcyBiYXJyaWVyIHByZXZlbnRzIHNldHRpbmcgdGhlIHNjcm9sbCB2YWx1ZSBiYXNlZCBvbgoJCQkvLyB0aGUgYnJvd3NlciBzY3JvbGxpbmcgdGhlIHdpbmRvdyBiYXNlZCBvbiBhIGhhc2hjaGFuZ2UKCQkJaWYgKCAhdGhpcy5zZXRMYXN0U2Nyb2xsRW5hYmxlZCApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJdmFyIGFjdGl2ZSA9IHRoaXMuX2dldEFjdGl2ZUhpc3RvcnkoKSwKCQkJCWN1cnJlbnRTY3JvbGwsIG1pblNjcm9sbCwgZGVmYXVsdFNjcm9sbDsKCgkJCWlmICggYWN0aXZlICkgewoJCQkJY3VycmVudFNjcm9sbCA9IHRoaXMuX2dldFNjcm9sbCgpOwoJCQkJbWluU2Nyb2xsID0gdGhpcy5fZ2V0TWluU2Nyb2xsKCk7CgkJCQlkZWZhdWx0U2Nyb2xsID0gdGhpcy5fZ2V0RGVmYXVsdFNjcm9sbCgpOwoKCQkJCS8vIFNldCBhY3RpdmUgcGFnZSdzIGxhc3RTY3JvbGwgcHJvcC4gSWYgdGhlIGxvY2F0aW9uIHdlJ3JlCgkJCQkvLyBzY3JvbGxpbmcgdG8gaXMgbGVzcyB0aGFuIG1pblNjcm9sbEJhY2ssIGxldCBpdCBnby4KCQkJCWFjdGl2ZS5sYXN0U2Nyb2xsID0gY3VycmVudFNjcm9sbCA8IG1pblNjcm9sbCA/IGRlZmF1bHRTY3JvbGwgOiBjdXJyZW50U2Nyb2xsOwoJCQl9CgkJfSwKCgkJX2RlbGF5ZWRSZWNvcmRTY3JvbGw6IGZ1bmN0aW9uKCkgewoJCQlzZXRUaW1lb3V0KCAkLnByb3h5KHRoaXMsICJfcmVjb3JkU2Nyb2xsIiksIDEwMCApOwoJCX0sCgoJCV9nZXRTY3JvbGw6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gdGhpcy53aW5kb3cuc2Nyb2xsVG9wKCk7CgkJfSwKCgkJX2dldE1pblNjcm9sbDogZnVuY3Rpb24oKSB7CgkJCXJldHVybiAkLm1vYmlsZS5taW5TY3JvbGxCYWNrOwoJCX0sCgoJCV9nZXREZWZhdWx0U2Nyb2xsOiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuICQubW9iaWxlLmRlZmF1bHRIb21lU2Nyb2xsOwoJCX0sCgoJCV9maWx0ZXJOYXZpZ2F0ZUV2ZW50czogZnVuY3Rpb24oIGUsIGRhdGEgKSB7CgkJCXZhciB1cmw7CgoJCQlpZiAoIGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCXVybCA9IGUub3JpZ2luYWxFdmVudC50eXBlLmluZGV4T2YoICJoYXNoY2hhbmdlIiApID4gLTEgPyBkYXRhLnN0YXRlLmhhc2ggOiBkYXRhLnN0YXRlLnVybDsKCgkJCWlmICggIXVybCApIHsKCQkJCXVybCA9IHRoaXMuX2dldEhhc2goKTsKCQkJfQoKCQkJaWYgKCAhdXJsIHx8IHVybCA9PT0gIiMiIHx8IHVybC5pbmRleE9mKCAiIyIgKyAkLm1vYmlsZS5wYXRoLnVpU3RhdGVLZXkgKSA9PT0gMCApIHsKCQkJCXVybCA9IGxvY2F0aW9uLmhyZWY7CgkJCX0KCgkJCXRoaXMuX2hhbmRsZU5hdmlnYXRlKCB1cmwsIGRhdGEuc3RhdGUgKTsKCQl9LAoKCQlfZ2V0SGFzaDogZnVuY3Rpb24oKSB7CgkJCXJldHVybiAkLm1vYmlsZS5wYXRoLnBhcnNlTG9jYXRpb24oKS5oYXNoOwoJCX0sCgoJCS8vIFRPRE8gYWN0aXZlIHBhZ2Ugc2hvdWxkIGJlIG1hbmFnZWQgYnkgdGhlIGNvbnRhaW5lciAoaWUsIGl0IHNob3VsZCBiZSBhIHByb3BlcnR5KQoJCWdldEFjdGl2ZVBhZ2U6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gdGhpcy5hY3RpdmVQYWdlOwoJCX0sCgoJCS8vIFRPRE8gdGhlIGZpcnN0IHBhZ2Ugc2hvdWxkIGJlIGEgcHJvcGVydHkgc2V0IGR1cmluZyBfY3JlYXRlIHVzaW5nIHRoZSBsb2dpYwoJCS8vICAgICAgdGhhdCBjdXJyZW50bHkgcmVzaWRlcyBpbiBpbml0CgkJX2dldEluaXRpYWxDb250ZW50OiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuICQubW9iaWxlLmZpcnN0UGFnZTsKCQl9LAoKCQkvLyBUT0RPIGVhY2ggY29udGVudCBjb250YWluZXIgc2hvdWxkIGhhdmUgYSBoaXN0b3J5IG9iamVjdAoJCV9nZXRIaXN0b3J5OiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuICQubW9iaWxlLm5hdmlnYXRlLmhpc3Rvcnk7CgkJfSwKCgkJLy8gVE9ETyB1c2UgX2dldEhpc3RvcnkKCQlfZ2V0QWN0aXZlSGlzdG9yeTogZnVuY3Rpb24oKSB7CgkJCXJldHVybiAkLm1vYmlsZS5uYXZpZ2F0ZS5oaXN0b3J5LmdldEFjdGl2ZSgpOwoJCX0sCgoJCS8vIFRPRE8gdGhlIGRvY3VtZW50IGJhc2Ugc2hvdWxkIGJlIGRldGVybWluZWQgYXQgY3JlYXRpb24KCQlfZ2V0RG9jdW1lbnRCYXNlOiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuICQubW9iaWxlLnBhdGguZG9jdW1lbnRCYXNlOwoJCX0sCgoJCWJhY2s6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLmdvKCAtMSApOwoJCX0sCgoJCWZvcndhcmQ6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLmdvKCAxICk7CgkJfSwKCgkJZ286IGZ1bmN0aW9uKCBzdGVwcyApIHsKCgkJCS8vaWYgaGFzaGxpc3RlbmluZyBpcyBlbmFibGVkIHVzZSBuYXRpdmUgaGlzdG9yeSBtZXRob2QKCQkJaWYgKCAkLm1vYmlsZS5oYXNoTGlzdGVuaW5nRW5hYmxlZCApIHsKCQkJCXdpbmRvdy5oaXN0b3J5LmdvKCBzdGVwcyApOwoJCQl9IGVsc2UgewoKCQkJCS8vd2UgYXJlIG5vdCBsaXN0ZW5pbmcgdG8gdGhlIGhhc2ggc28gaGFuZGxlIGhpc3RvcnkgaW50ZXJuYWxseQoJCQkJdmFyIGFjdGl2ZUluZGV4ID0gJC5tb2JpbGUubmF2aWdhdGUuaGlzdG9yeS5hY3RpdmVJbmRleCwKCQkJCQlpbmRleCA9IGFjdGl2ZUluZGV4ICsgcGFyc2VJbnQoIHN0ZXBzLCAxMCApLAoJCQkJCXVybCA9ICQubW9iaWxlLm5hdmlnYXRlLmhpc3Rvcnkuc3RhY2tbIGluZGV4IF0udXJsLAoJCQkJCWRpcmVjdGlvbiA9ICggc3RlcHMgPj0gMSApPyAiZm9yd2FyZCIgOiAiYmFjayI7CgoJCQkJLy91cGRhdGUgdGhlIGhpc3Rvcnkgb2JqZWN0CgkJCQkkLm1vYmlsZS5uYXZpZ2F0ZS5oaXN0b3J5LmFjdGl2ZUluZGV4ID0gaW5kZXg7CgkJCQkkLm1vYmlsZS5uYXZpZ2F0ZS5oaXN0b3J5LnByZXZpb3VzSW5kZXggPSBhY3RpdmVJbmRleDsKCgkJCQkvL2NoYW5nZSB0byB0aGUgbmV3IHBhZ2UKCQkJCXRoaXMuY2hhbmdlKCB1cmwsIHsgZGlyZWN0aW9uOiBkaXJlY3Rpb24sIGNoYW5nZUhhc2g6IGZhbHNlLCBmcm9tSGFzaENoYW5nZTogdHJ1ZSB9ICk7CgkJCX0KCQl9LAoKCQkvLyBUT0RPIHJlbmFtZSBfaGFuZGxlRGVzdGluYXRpb24KCQlfaGFuZGxlRGVzdGluYXRpb246IGZ1bmN0aW9uKCB0byApIHsKCQkJdmFyIGhpc3Rvcnk7CgoJCQkvLyBjbGVhbiB0aGUgaGFzaCBmb3IgY29tcGFyaXNvbiBpZiBpdCdzIGEgdXJsCgkJCWlmICggJC50eXBlKHRvKSA9PT0gInN0cmluZyIgKSB7CgkJCQl0byA9ICQubW9iaWxlLnBhdGguc3RyaXBIYXNoKCB0byApOwoJCQl9CgoJCQlpZiAoIHRvICkgewoJCQkJaGlzdG9yeSA9IHRoaXMuX2dldEhpc3RvcnkoKTsKCgkJCQkvLyBBdCB0aGlzIHBvaW50LCAndG8nIGNhbiBiZSBvbmUgb2YgMyB0aGluZ3MsIGEgY2FjaGVkIHBhZ2UKCQkJCS8vIGVsZW1lbnQgZnJvbSBhIGhpc3Rvcnkgc3RhY2sgZW50cnksIGFuIGlkLCBvciBzaXRlLXJlbGF0aXZlIC8KCQkJCS8vIGFic29sdXRlIFVSTC4gSWYgJ3RvJyBpcyBhbiBpZCwgd2UgbmVlZCB0byByZXNvbHZlIGl0IGFnYWluc3QKCQkJCS8vIHRoZSBkb2N1bWVudEJhc2UsIG5vdCB0aGUgbG9jYXRpb24uaHJlZiwgc2luY2UgdGhlIGhhc2hjaGFuZ2UKCQkJCS8vIGNvdWxkJ3ZlIGJlZW4gdGhlIHJlc3VsdCBvZiBhIGZvcndhcmQvYmFja3dhcmQgbmF2aWdhdGlvbgoJCQkJLy8gdGhhdCBjcm9zc2VzIGZyb20gYW4gZXh0ZXJuYWwgcGFnZS9kaWFsb2cgdG8gYW4gaW50ZXJuYWwKCQkJCS8vIHBhZ2UvZGlhbG9nLgoJCQkJLy8KCQkJCS8vIFRPRE8gbW92ZSBjaGVjayB0byBoaXN0b3J5IG9iamVjdCBvciBwYXRoIG9iamVjdD8KCQkJCXRvID0gISQubW9iaWxlLnBhdGguaXNQYXRoKCB0byApID8gKCAkLm1vYmlsZS5wYXRoLm1ha2VVcmxBYnNvbHV0ZSggIiMiICsgdG8sIHRoaXMuX2dldERvY3VtZW50QmFzZSgpICkgKSA6IHRvOwoKCQkJCS8vIElmIHdlJ3JlIGFib3V0IHRvIGdvIHRvIGFuIGluaXRpYWwgVVJMIHRoYXQgY29udGFpbnMgYQoJCQkJLy8gcmVmZXJlbmNlIHRvIGEgbm9uLWV4aXN0ZW50IGludGVybmFsIHBhZ2UsIGdvIHRvIHRoZSBmaXJzdAoJCQkJLy8gcGFnZSBpbnN0ZWFkLiBXZSBrbm93IHRoYXQgdGhlIGluaXRpYWwgaGFzaCByZWZlcnMgdG8gYQoJCQkJLy8gbm9uLWV4aXN0ZW50IHBhZ2UsIGJlY2F1c2UgdGhlIGluaXRpYWwgaGFzaCBkaWQgbm90IGVuZAoJCQkJLy8gdXAgaW4gdGhlIGluaXRpYWwgaGlzdG9yeSBlbnRyeQoJCQkJLy8gVE9ETyBtb3ZlIGNoZWNrIHRvIGhpc3Rvcnkgb2JqZWN0PwoJCQkJaWYgKCB0byA9PT0gJC5tb2JpbGUucGF0aC5tYWtlVXJsQWJzb2x1dGUoICIjIiArIGhpc3RvcnkuaW5pdGlhbERzdCwgdGhpcy5fZ2V0RG9jdW1lbnRCYXNlKCkgKSAmJgoJCQkJCWhpc3Rvcnkuc3RhY2subGVuZ3RoICYmCgkJCQkJaGlzdG9yeS5zdGFja1swXS51cmwgIT09IGhpc3RvcnkuaW5pdGlhbERzdC5yZXBsYWNlKCAkLm1vYmlsZS5kaWFsb2dIYXNoS2V5LCAiIiApICkgewoJCQkJCXRvID0gdGhpcy5fZ2V0SW5pdGlhbENvbnRlbnQoKTsKCQkJCX0KCQkJfQoJCQlyZXR1cm4gdG8gfHwgdGhpcy5fZ2V0SW5pdGlhbENvbnRlbnQoKTsKCQl9LAoKCQlfaGFuZGxlRGlhbG9nOiBmdW5jdGlvbiggY2hhbmdlUGFnZU9wdGlvbnMsIGRhdGEgKSB7CgkJCXZhciB0bywgYWN0aXZlLCBhY3RpdmVDb250ZW50ID0gdGhpcy5nZXRBY3RpdmVQYWdlKCk7CgoJCQkvLyBJZiBjdXJyZW50IGFjdGl2ZSBwYWdlIGlzIG5vdCBhIGRpYWxvZyBza2lwIHRoZSBkaWFsb2cgYW5kIGNvbnRpbnVlCgkJCS8vIGluIHRoZSBzYW1lIGRpcmVjdGlvbgoJCQlpZiAoIGFjdGl2ZUNvbnRlbnQgJiYgIWFjdGl2ZUNvbnRlbnQuaGFzQ2xhc3MoICJ1aS1kaWFsb2ciICkgKSB7CgkJCQkvLyBkZXRlcm1pbmUgaWYgd2UncmUgaGVhZGluZyBmb3J3YXJkIG9yIGJhY2t3YXJkIGFuZCBjb250aW51ZQoJCQkJLy8gYWNjb3JkaW5nbHkgcGFzdCB0aGUgY3VycmVudCBkaWFsb2cKCQkJCWlmICggZGF0YS5kaXJlY3Rpb24gPT09ICJiYWNrIiApIHsKCQkJCQl0aGlzLmJhY2soKTsKCQkJCX0gZWxzZSB7CgkJCQkJdGhpcy5mb3J3YXJkKCk7CgkJCQl9CgoJCQkJLy8gcHJldmVudCBjaGFuZ2VQYWdlIGNhbGwKCQkJCXJldHVybiBmYWxzZTsKCQkJfSBlbHNlIHsKCQkJCS8vIGlmIHRoZSBjdXJyZW50IGFjdGl2ZSBwYWdlIGlzIGEgZGlhbG9nIGFuZCB3ZSdyZSBuYXZpZ2F0aW5nCgkJCQkvLyB0byBhIGRpYWxvZyB1c2UgdGhlIGRpYWxvZyBvYmplY3RlZCBzYXZlZCBpbiB0aGUgc3RhY2sKCQkJCXRvID0gZGF0YS5wYWdlVXJsOwoJCQkJYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlSGlzdG9yeSgpOwoKCQkJCS8vIG1ha2Ugc3VyZSB0byBzZXQgdGhlIHJvbGUsIHRyYW5zaXRpb24gYW5kIHJldmVyc2FsCgkJCQkvLyBhcyBtb3N0IG9mIHRoaXMgaXMgbG9zdCBieSB0aGUgZG9tQ2FjaGUgY2xlYW5pbmcKCQkJCSQuZXh0ZW5kKCBjaGFuZ2VQYWdlT3B0aW9ucywgewoJCQkJCXJvbGU6IGFjdGl2ZS5yb2xlLAoJCQkJCXRyYW5zaXRpb246IGFjdGl2ZS50cmFuc2l0aW9uLAoJCQkJCXJldmVyc2U6IGRhdGEuZGlyZWN0aW9uID09PSAiYmFjayIKCQkJCX0pOwoJCQl9CgoJCQlyZXR1cm4gdG87CgkJfSwKCgkJX2hhbmRsZU5hdmlnYXRlOiBmdW5jdGlvbiggdXJsLCBkYXRhICkgewoJCQkvL2ZpbmQgZmlyc3QgcGFnZSB2aWEgaGFzaAoJCQkvLyBUT0RPIHN0cmlwcGluZyB0aGUgaGFzaCB0d2ljZSB3aXRoIGhhbmRsZVVybAoJCQl2YXIgdG8gPSAkLm1vYmlsZS5wYXRoLnN0cmlwSGFzaCggdXJsICksIGhpc3RvcnkgPSB0aGlzLl9nZXRIaXN0b3J5KCksCgoJCQkJLy8gdHJhbnNpdGlvbiBpcyBmYWxzZSBpZiBpdCdzIHRoZSBmaXJzdCBwYWdlLCB1bmRlZmluZWQKCQkJCS8vIG90aGVyd2lzZSAoYW5kIG1heSBiZSBvdmVycmlkZGVuIGJ5IGRlZmF1bHQpCgkJCQl0cmFuc2l0aW9uID0gaGlzdG9yeS5zdGFjay5sZW5ndGggPT09IDAgPyAibm9uZSIgOiB1bmRlZmluZWQsCgoJCQkJLy8gZGVmYXVsdCBvcHRpb25zIGZvciB0aGUgY2hhbmdQYWdlIGNhbGxzIG1hZGUgYWZ0ZXIgZXhhbWluaW5nCgkJCQkvLyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcGFnZSBhbmQgdGhlIGhhc2gsIE5PVEUgdGhhdCB0aGUKCQkJCS8vIHRyYW5zaXRpb24gaXMgZGVyaXZlZCBmcm9tIHRoZSBwcmV2aW91cyBoaXN0b3J5IGVudHJ5CgkJCQljaGFuZ2VQYWdlT3B0aW9ucyA9IHsKCQkJCQljaGFuZ2VIYXNoOiBmYWxzZSwKCQkJCQlmcm9tSGFzaENoYW5nZTogdHJ1ZSwKCQkJCQlyZXZlcnNlOiBkYXRhLmRpcmVjdGlvbiA9PT0gImJhY2siCgkJCQl9OwoKCQkJJC5leHRlbmQoIGNoYW5nZVBhZ2VPcHRpb25zLCBkYXRhLCB7CgkJCQl0cmFuc2l0aW9uOiAoIGhpc3RvcnkuZ2V0TGFzdCgpIHx8IHt9ICkudHJhbnNpdGlvbiB8fCB0cmFuc2l0aW9uCgkJCX0pOwoKCQkJLy8gVE9ETyBtb3ZlIHRvIF9oYW5kbGVEZXN0aW5hdGlvbiA/CgkJCS8vIElmIHRoaXMgaXNuJ3QgdGhlIGZpcnN0IHBhZ2UsIGlmIHRoZSBjdXJyZW50IHVybCBpcyBhIGRpYWxvZyBoYXNoCgkJCS8vIGtleSwgYW5kIHRoZSBpbml0aWFsIGRlc3RpbmF0aW9uIGlzbid0IGVxdWFsIHRvIHRoZSBjdXJyZW50IHRhcmdldAoJCQkvLyBwYWdlLCB1c2UgdGhlIHNwZWNpYWwgZGlhbG9nIGhhbmRsaW5nCgkJCWlmICggaGlzdG9yeS5hY3RpdmVJbmRleCA+IDAgJiYKCQkJCXRvLmluZGV4T2YoICQubW9iaWxlLmRpYWxvZ0hhc2hLZXkgKSA+IC0xICYmCgkJCQloaXN0b3J5LmluaXRpYWxEc3QgIT09IHRvICkgewoKCQkJCXRvID0gdGhpcy5faGFuZGxlRGlhbG9nKCBjaGFuZ2VQYWdlT3B0aW9ucywgZGF0YSApOwoKCQkJCWlmICggdG8gPT09IGZhbHNlICkgewoJCQkJCXJldHVybjsKCQkJCX0KCQkJfQoKCQkJdGhpcy5fY2hhbmdlQ29udGVudCggdGhpcy5faGFuZGxlRGVzdGluYXRpb24oIHRvICksIGNoYW5nZVBhZ2VPcHRpb25zICk7CgkJfSwKCgkJX2NoYW5nZUNvbnRlbnQ6IGZ1bmN0aW9uKCB0bywgb3B0cyApIHsKCQkJJC5tb2JpbGUuY2hhbmdlUGFnZSggdG8sIG9wdHMgKTsKCQl9LAoKCQlfZ2V0QmFzZTogZnVuY3Rpb24oKSB7CgkJCXJldHVybiAkLm1vYmlsZS5iYXNlOwoJCX0sCgoJCV9nZXROczogZnVuY3Rpb24oKSB7CgkJCXJldHVybiAkLm1vYmlsZS5uczsKCQl9LAoKCQlfZW5oYW5jZTogZnVuY3Rpb24oIGNvbnRlbnQsIHJvbGUgKSB7CgkJCS8vIFRPRE8gY29uc2lkZXIgc3VwcG9ydGluZyBhIGN1c3RvbSBjYWxsYmFjaywgYW5kIHBhc3NpbmcgaW4KCQkJLy8gdGhlIHNldHRpbmdzIHdoaWNoIGluY2x1ZGVzIHRoZSByb2xlCgkJCXJldHVybiBjb250ZW50LnBhZ2UoeyByb2xlOiByb2xlIH0pOwoJCX0sCgoJCV9pbmNsdWRlOiBmdW5jdGlvbiggcGFnZSwgc2V0dGluZ3MgKSB7CgkJCS8vIGFwcGVuZCB0byBwYWdlIGFuZCBlbmhhbmNlCgkJCXBhZ2UuYXBwZW5kVG8oIHRoaXMuZWxlbWVudCApOwoKCQkJLy8gdXNlIHRoZSBwYWdlIHdpZGdldCB0byBlbmhhbmNlCgkJCXRoaXMuX2VuaGFuY2UoIHBhZ2UsIHNldHRpbmdzLnJvbGUgKTsKCgkJCS8vIHJlbW92ZSBwYWdlIG9uIGhpZGUKCQkJcGFnZS5wYWdlKCAiYmluZFJlbW92ZSIgKTsKCQl9LAoKCQlfZmluZDogZnVuY3Rpb24oIGFic1VybCApIHsKCQkJLy8gVE9ETyBjb25zaWRlciBzdXBwb3J0aW5nIGEgY3VzdG9tIGNhbGxiYWNrCgkJCXZhciBmaWxlVXJsID0gdGhpcy5fY3JlYXRlRmlsZVVybCggYWJzVXJsICksCgkJCQlkYXRhVXJsID0gdGhpcy5fY3JlYXRlRGF0YVVybCggYWJzVXJsICksCgkJCQlwYWdlLCBpbml0aWFsQ29udGVudCA9IHRoaXMuX2dldEluaXRpYWxDb250ZW50KCk7CgoJCQkvLyBDaGVjayB0byBzZWUgaWYgdGhlIHBhZ2UgYWxyZWFkeSBleGlzdHMgaW4gdGhlIERPTS4KCQkJLy8gTk9URSBkbyBfbm90XyB1c2UgdGhlIDpqcW1EYXRhIHBzZXVkbyBzZWxlY3RvciBiZWNhdXNlIHBhcmVudGhlc2lzCgkJCS8vICAgICAgYXJlIGEgdmFsaWQgdXJsIGNoYXIgYW5kIGl0IGJyZWFrcyBvbiB0aGUgZmlyc3Qgb2NjdXJlbmNlCgkJCXBhZ2UgPSB0aGlzLmVsZW1lbnQKCQkJCS5jaGlsZHJlbiggIltkYXRhLSIgKyB0aGlzLl9nZXROcygpICsidXJsPSciICsgZGF0YVVybCArICInXSIgKTsKCgkJCS8vIElmIHdlIGZhaWxlZCB0byBmaW5kIHRoZSBwYWdlLCBjaGVjayB0byBzZWUgaWYgdGhlIHVybCBpcyBhCgkJCS8vIHJlZmVyZW5jZSB0byBhbiBlbWJlZGRlZCBwYWdlLiBJZiBzbywgaXQgbWF5IGhhdmUgYmVlbiBkeW5hbWljYWxseQoJCQkvLyBpbmplY3RlZCBieSBhIGRldmVsb3BlciwgaW4gd2hpY2ggY2FzZSBpdCB3b3VsZCBiZSBsYWNraW5nIGEKCQkJLy8gZGF0YS11cmwgYXR0cmlidXRlIGFuZCBpbiBuZWVkIG9mIGVuaGFuY2VtZW50LgoJCQlpZiAoIHBhZ2UubGVuZ3RoID09PSAwICYmIGRhdGFVcmwgJiYgISQubW9iaWxlLnBhdGguaXNQYXRoKCBkYXRhVXJsICkgKSB7CgkJCQlwYWdlID0gdGhpcy5lbGVtZW50LmNoaWxkcmVuKCAkLm1vYmlsZS5wYXRoLmhhc2hUb1NlbGVjdG9yKCIjIiArIGRhdGFVcmwpICkKCQkJCQkuYXR0ciggImRhdGEtIiArIHRoaXMuX2dldE5zKCkgKyAidXJsIiwgZGF0YVVybCApCgkJCQkJLmpxbURhdGEoICJ1cmwiLCBkYXRhVXJsICk7CgkJCX0KCgkJCS8vIElmIHdlIGZhaWxlZCB0byBmaW5kIGEgcGFnZSBpbiB0aGUgRE9NLCBjaGVjayB0aGUgVVJMIHRvIHNlZSBpZiBpdAoJCQkvLyByZWZlcnMgdG8gdGhlIGZpcnN0IHBhZ2UgaW4gdGhlIGFwcGxpY2F0aW9uLiBBbHNvIGNoZWNrIHRvIG1ha2Ugc3VyZQoJCQkvLyBvdXIgY2FjaGVkLWZpcnN0LXBhZ2UgaXMgYWN0dWFsbHkgaW4gdGhlIERPTS4gU29tZSB1c2VyIGRlcGxveWVkCgkJCS8vIGFwcHMgYXJlIHBydW5pbmcgdGhlIGZpcnN0IHBhZ2UgZnJvbSB0aGUgRE9NIGZvciB2YXJpb3VzIHJlYXNvbnMuCgkJCS8vIFdlIGNoZWNrIGZvciB0aGlzIGNhc2UgaGVyZSBiZWNhdXNlIHdlIGRvbid0IHdhbnQgYSBmaXJzdC1wYWdlIHdpdGgKCQkJLy8gYW4gaWQgZmFsbGluZyB0aHJvdWdoIHRvIHRoZSBub24tZXhpc3RlbnQgZW1iZWRkZWQgcGFnZSBlcnJvciBjYXNlLgoJCQlpZiAoIHBhZ2UubGVuZ3RoID09PSAwICYmCgkJCQkkLm1vYmlsZS5wYXRoLmlzRmlyc3RQYWdlVXJsKCBmaWxlVXJsICkgJiYKCQkJCWluaXRpYWxDb250ZW50ICYmCgkJCQlpbml0aWFsQ29udGVudC5wYXJlbnQoKS5sZW5ndGggKSB7CgkJCQlwYWdlID0gJCggaW5pdGlhbENvbnRlbnQgKTsKCQkJfQoKCQkJcmV0dXJuIHBhZ2U7CgkJfSwKCgkJX2dldExvYWRlcjogZnVuY3Rpb24oKSB7CgkJCXJldHVybiAkLm1vYmlsZS5sb2FkaW5nKCk7CgkJfSwKCgkJX3Nob3dMb2FkaW5nOiBmdW5jdGlvbiggZGVsYXksIHRoZW1lLCBtc2csIHRleHRvbmx5ICkgewoJCQkvLyBUaGlzIGNvbmZpZ3VyYWJsZSB0aW1lb3V0IGFsbG93cyBjYWNoZWQgcGFnZXMgYSBicmllZgoJCQkvLyBkZWxheSB0byBsb2FkIHdpdGhvdXQgc2hvd2luZyBhIG1lc3NhZ2UKCQkJaWYgKCB0aGlzLl9sb2FkTXNnICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQl0aGlzLl9sb2FkTXNnID0gc2V0VGltZW91dCgkLnByb3h5KGZ1bmN0aW9uKCkgewoJCQkJdGhpcy5fZ2V0TG9hZGVyKCkubG9hZGVyKCAic2hvdyIsIHRoZW1lLCBtc2csIHRleHRvbmx5ICk7CgkJCQl0aGlzLl9sb2FkTXNnID0gMDsKCQkJfSwgdGhpcyksIGRlbGF5ICk7CgkJfSwKCgkJX2hpZGVMb2FkaW5nOiBmdW5jdGlvbigpIHsKCQkJLy8gU3RvcCBtZXNzYWdlIHNob3cgdGltZXIKCQkJY2xlYXJUaW1lb3V0KCB0aGlzLl9sb2FkTXNnICk7CgkJCXRoaXMuX2xvYWRNc2cgPSAwOwoKCQkJLy8gSGlkZSBsb2FkaW5nIG1lc3NhZ2UKCQkJdGhpcy5fZ2V0TG9hZGVyKCkubG9hZGVyKCAiaGlkZSIgKTsKCQl9LAoKCQlfc2hvd0Vycm9yOiBmdW5jdGlvbigpIHsKCQkJLy8gbWFrZSBzdXJlIHRvIHJlbW92ZSB0aGUgY3VycmVudCBsb2FkaW5nIG1lc3NhZ2UKCQkJdGhpcy5faGlkZUxvYWRpbmcoKTsKCgkJCS8vIHNob3cgdGhlIGVycm9yIG1lc3NhZ2UKCQkJdGhpcy5fc2hvd0xvYWRpbmcoIDAsICQubW9iaWxlLnBhZ2VMb2FkRXJyb3JNZXNzYWdlVGhlbWUsICQubW9iaWxlLnBhZ2VMb2FkRXJyb3JNZXNzYWdlLCB0cnVlICk7CgoJCQkvLyBoaWRlIHRoZSBlcnJvciBtZXNzYWdlIGFmdGVyIGEgZGVsYXkKCQkJLy8gVE9ETyBjb25maWd1cmF0aW9uCgkJCXNldFRpbWVvdXQoICQucHJveHkodGhpcywgIl9oaWRlTG9hZGluZyIpLCAxNTAwICk7CgkJfSwKCgkJX3BhcnNlOiBmdW5jdGlvbiggaHRtbCwgZmlsZVVybCApIHsKCQkJLy8gVE9ETyBjb25zaWRlciBhbGxvd2luZyBjdXN0b21pemF0aW9uIG9mIHRoaXMgbWV0aG9kLiBJdCdzIHZlcnkgSlFNIHNwZWNpZmljCgkJCXZhciBwYWdlLCBhbGwgPSAkKCAiPGRpdj48L2Rpdj4iICk7CgoJCQkvL3dvcmthcm91bmQgdG8gYWxsb3cgc2NyaXB0cyB0byBleGVjdXRlIHdoZW4gaW5jbHVkZWQgaW4gcGFnZSBkaXZzCgkJCWFsbC5nZXQoIDAgKS5pbm5lckhUTUwgPSBodG1sOwoKCQkJcGFnZSA9IGFsbC5maW5kKCAiOmpxbURhdGEocm9sZT0ncGFnZScpLCA6anFtRGF0YShyb2xlPSdkaWFsb2cnKSIgKS5maXJzdCgpOwoKCQkJLy9pZiBwYWdlIGVsZW0gY291bGRuJ3QgYmUgZm91bmQsIGNyZWF0ZSBvbmUgYW5kIGluc2VydCB0aGUgYm9keSBlbGVtZW50J3MgY29udGVudHMKCQkJaWYgKCAhcGFnZS5sZW5ndGggKSB7CgkJCQlwYWdlID0gJCggIjxkaXYgZGF0YS0iICsgdGhpcy5fZ2V0TnMoKSArICJyb2xlPSdwYWdlJz4iICsKCQkJCQkoIGh0bWwuc3BsaXQoIC88XC8/Ym9keVtePl0qPi9nbWkgKVsxXSB8fCAiIiApICsKCQkJCQkiPC9kaXY+IiApOwoJCQl9CgoJCQkvLyBUT0RPIHRhZ2dpbmcgYSBwYWdlIHdpdGggZXh0ZXJuYWwgdG8gbWFrZSBzdXJlIHRoYXQgZW1iZWRkZWQgcGFnZXMgYXJlbid0CgkJCS8vIHJlbW92ZWQgYnkgdGhlIHZhcmlvdXMgcGFnZSBoYW5kbGluZyBjb2RlIGlzIGJhZC4gSGF2aW5nIHBhZ2UgaGFuZGxpbmcgY29kZQoJCQkvLyBpbiBtYW55IHBsYWNlcyBpcyBiYWQuIFNvbHV0aW9ucyBwb3N0IDEuMAoJCQlwYWdlLmF0dHIoICJkYXRhLSIgKyB0aGlzLl9nZXROcygpICsgInVybCIsICQubW9iaWxlLnBhdGguY29udmVydFVybFRvRGF0YVVybChmaWxlVXJsKSApCgkJCQkuYXR0ciggImRhdGEtIiArIHRoaXMuX2dldE5zKCkgKyAiZXh0ZXJuYWwtcGFnZSIsIHRydWUgKTsKCgkJCXJldHVybiBwYWdlOwoJCX0sCgoJCV9zZXRMb2FkZWRUaXRsZTogZnVuY3Rpb24oIHBhZ2UsIGh0bWwgKSB7CgkJCS8vcGFnZSB0aXRsZSByZWdleHAKCQkJdmFyIG5ld1BhZ2VUaXRsZSA9IGh0bWwubWF0Y2goIC88dGl0bGVbXj5dKj4oW148XSopLyApICYmIFJlZ0V4cC4kMTsKCgkJCWlmICggbmV3UGFnZVRpdGxlICYmICFwYWdlLmpxbURhdGEoInRpdGxlIikgKSB7CgkJCQluZXdQYWdlVGl0bGUgPSAkKCAiPGRpdj4iICsgbmV3UGFnZVRpdGxlICsgIjwvZGl2PiIgKS50ZXh0KCk7CgkJCQlwYWdlLmpxbURhdGEoICJ0aXRsZSIsIG5ld1BhZ2VUaXRsZSApOwoJCQl9CgkJfSwKCgkJX2lzUmV3cml0YWJsZUJhc2VUYWc6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gJC5tb2JpbGUuZHluYW1pY0Jhc2VFbmFibGVkICYmICEkLnN1cHBvcnQuZHluYW1pY0Jhc2VUYWc7CgkJfSwKCgkJX2NyZWF0ZURhdGFVcmw6IGZ1bmN0aW9uKCBhYnNvbHV0ZVVybCApIHsKCQkJcmV0dXJuICQubW9iaWxlLnBhdGguY29udmVydFVybFRvRGF0YVVybCggYWJzb2x1dGVVcmwgKTsKCQl9LAoKCQlfY3JlYXRlRmlsZVVybDogZnVuY3Rpb24oIGFic29sdXRlVXJsICkgewoJCQlyZXR1cm4gJC5tb2JpbGUucGF0aC5nZXRGaWxlUGF0aCggYWJzb2x1dGVVcmwgKTsKCQl9LAoKCQlfdHJpZ2dlcldpdGhEZXByZWNhdGVkOiBmdW5jdGlvbiggbmFtZSwgZGF0YSwgcGFnZSApIHsKCQkJdmFyIGRlcHJlY2F0ZWRFdmVudCA9ICQuRXZlbnQoICJwYWdlIiArIG5hbWUgKSwKCQkJCW5ld0V2ZW50ID0gJC5FdmVudCggdGhpcy53aWRnZXROYW1lICsgbmFtZSApOwoKCQkJLy8gREVQUkVDQVRFRAoJCQkvLyB0cmlnZ2VyIHRoZSBvbGQgZGVwcmVjYXRlZCBldmVudCBvbiB0aGUgcGFnZSBpZiBpdCdzIHByb3ZpZGVkCgkJCSggcGFnZSB8fCB0aGlzLmVsZW1lbnQgKS50cmlnZ2VyKCBkZXByZWNhdGVkRXZlbnQsIGRhdGEgKTsKCgkJCS8vIHVzZSB0aGUgd2lkZ2V0IHRyaWdnZXIgbWV0aG9kIGZvciB0aGUgbmV3IGNvbnRlbnQqIGV2ZW50CgkJCXRoaXMuZWxlbWVudC50cmlnZ2VyKCBuZXdFdmVudCwgZGF0YSApOwoKCQkJcmV0dXJuIHsKCQkJCWRlcHJlY2F0ZWRFdmVudDogZGVwcmVjYXRlZEV2ZW50LAoJCQkJZXZlbnQ6IG5ld0V2ZW50CgkJCX07CgkJfSwKCgkJLy8gVE9ETyBpdCB3b3VsZCBiZSBuaWNlIHRvIHNwbGl0IHRoaXMgdXAgbW9yZSBidXQgZXZlcnl0aGluZyBhcHBlYXJzIHRvIGJlICJvbmUgb2ZmIgoJCS8vICAgICAgb3IgcmVxdWlyZSBvcmRlcmluZyBzdWNoIHRoYXQgb3RoZXIgYml0cyBhcmUgc3ByaW5rbGVkIGluIGJldHdlZW4gcGFydHMgdGhhdAoJCS8vICAgICAgY291bGQgYmUgYWJzdHJhY3RlZCBvdXQgYXMgYSBncm91cAoJCV9sb2FkU3VjY2VzczogZnVuY3Rpb24oIGFic1VybCwgdHJpZ2dlckRhdGEsIHNldHRpbmdzLCBkZWZlcnJlZCApIHsKCQkJdmFyIGZpbGVVcmwgPSB0aGlzLl9jcmVhdGVGaWxlVXJsKCBhYnNVcmwgKSwKCQkJCWRhdGFVcmwgPSB0aGlzLl9jcmVhdGVEYXRhVXJsKCBhYnNVcmwgKTsKCgkJCXJldHVybiAkLnByb3h5KGZ1bmN0aW9uKCBodG1sLCB0ZXh0U3RhdHVzLCB4aHIgKSB7CgkJCQkvL3ByZS1wYXJzZSBodG1sIHRvIGNoZWNrIGZvciBhIGRhdGEtdXJsLAoJCQkJLy91c2UgaXQgYXMgdGhlIG5ldyBmaWxlVXJsLCBiYXNlIHBhdGgsIGV0YwoJCQkJdmFyIGNvbnRlbnQsCgoJCQkJCS8vIFRPRE8gaGFuZGxlIGRpYWxvZ3MgYWdhaW4KCQkJCQlwYWdlRWxlbVJlZ2V4ID0gbmV3IFJlZ0V4cCggIig8W14+XStcXGJkYXRhLSIgKyB0aGlzLl9nZXROcygpICsgInJvbGU9W1wiJ10/cGFnZVtcIiddP1tePl0qPikiICksCgoJCQkJCWRhdGFVcmxSZWdleCA9IG5ldyBSZWdFeHAoICJcXGJkYXRhLSIgKyB0aGlzLl9nZXROcygpICsgInVybD1bXCInXT8oW15cIic+XSopW1wiJ10/IiApOwoKCQkJCS8vIGRhdGEtdXJsIG11c3QgYmUgcHJvdmlkZWQgZm9yIHRoZSBiYXNlIHRhZyBzbyByZXNvdXJjZSByZXF1ZXN0cwoJCQkJLy8gY2FuIGJlIGRpcmVjdGVkIHRvIHRoZSBjb3JyZWN0IHVybC4gbG9hZGluZyBpbnRvIGEgdGVtcHJvcmFyeQoJCQkJLy8gZWxlbWVudCBtYWtlcyB0aGVzZSByZXF1ZXN0cyBpbW1lZGlhdGVseQoJCQkJaWYgKCBwYWdlRWxlbVJlZ2V4LnRlc3QoIGh0bWwgKSAmJgoJCQkJCVJlZ0V4cC4kMSAmJgoJCQkJCWRhdGFVcmxSZWdleC50ZXN0KCBSZWdFeHAuJDEgKSAmJgoJCQkJCVJlZ0V4cC4kMSApIHsKCQkJCQlmaWxlVXJsID0gJC5tb2JpbGUucGF0aC5nZXRGaWxlUGF0aCggJCgiPGRpdj4iICsgUmVnRXhwLiQxICsgIjwvZGl2PiIpLnRleHQoKSApOwoJCQkJfQoKCQkJCS8vZG9udCB1cGRhdGUgdGhlIGJhc2UgdGFnIGlmIHdlIGFyZSBwcmVmZXRjaGluZwoJCQkJaWYgKCBzZXR0aW5ncy5wcmVmZXRjaCA9PT0gdW5kZWZpbmVkICkgewoJCQkJCXRoaXMuX2dldEJhc2UoKS5zZXQoIGZpbGVVcmwgKTsKCQkJCX0KCgkJCQljb250ZW50ID0gdGhpcy5fcGFyc2UoIGh0bWwsIGZpbGVVcmwgKTsKCgkJCQl0aGlzLl9zZXRMb2FkZWRUaXRsZSggY29udGVudCwgaHRtbCApOwoKCQkJCS8vIEFkZCB0aGUgY29udGVudCByZWZlcmVuY2UgYW5kIHhociB0byBvdXIgdHJpZ2dlckRhdGEuCgkJCQl0cmlnZ2VyRGF0YS54aHIgPSB4aHI7CgkJCQl0cmlnZ2VyRGF0YS50ZXh0U3RhdHVzID0gdGV4dFN0YXR1czsKCgkJCQkvLyBERVBSRUNBVEVECgkJCQl0cmlnZ2VyRGF0YS5wYWdlID0gY29udGVudDsKCgkJCQl0cmlnZ2VyRGF0YS5jb250ZW50ID0gY29udGVudDsKCgkJCQkvLyBJZiB0aGUgZGVmYXVsdCBiZWhhdmlvciBpcyBwcmV2ZW50ZWQsIHN0b3AgaGVyZSEKCQkJCS8vIE5vdGUgdGhhdCBpdCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIGxpc3RlbmVyL2hhbmRsZXIKCQkJCS8vIHRoYXQgY2FsbGVkIHByZXZlbnREZWZhdWx0KCksIHRvIHJlc29sdmUvcmVqZWN0IHRoZQoJCQkJLy8gZGVmZXJyZWQgb2JqZWN0IHdpdGhpbiB0aGUgdHJpZ2dlckRhdGEuCgkJCQlpZiAoICF0aGlzLl90cmlnZ2VyKCAibG9hZCIsIHVuZGVmaW5lZCwgdHJpZ2dlckRhdGEgKSApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJLy8gcmV3cml0ZSBzcmMgYW5kIGhyZWYgYXR0cnMgdG8gdXNlIGEgYmFzZSB1cmwgaWYgdGhlIGJhc2UgdGFnIHdvbid0IHdvcmsKCQkJCWlmICggdGhpcy5faXNSZXdyaXRhYmxlQmFzZVRhZygpICYmIGNvbnRlbnQgKSB7CgkJCQkJdGhpcy5fZ2V0QmFzZSgpLnJld3JpdGUoIGZpbGVVcmwsIGNvbnRlbnQgKTsKCQkJCX0KCgkJCQl0aGlzLl9pbmNsdWRlKCBjb250ZW50LCBzZXR0aW5ncyApOwoKCQkJCS8vIEVuaGFuY2luZyB0aGUgY29udGVudCBtYXkgcmVzdWx0IGluIG5ldyBkaWFsb2dzL3N1YiBjb250ZW50IGJlaW5nIGluc2VydGVkCgkJCQkvLyBpbnRvIHRoZSBET00uIElmIHRoZSBvcmlnaW5hbCBhYnNVcmwgcmVmZXJzIHRvIGEgc3ViLWNvbnRlbnQsIHRoYXQgaXMgdGhlCgkJCQkvLyByZWFsIGNvbnRlbnQgd2UgYXJlIGludGVyZXN0ZWQgaW4uCgkJCQlpZiAoIGFic1VybC5pbmRleE9mKCAiJiIgKyAkLm1vYmlsZS5zdWJQYWdlVXJsS2V5ICkgPiAtMSApIHsKCQkJCQljb250ZW50ID0gdGhpcy5lbGVtZW50LmNoaWxkcmVuKCAiW2RhdGEtIiArIHRoaXMuX2dldE5zKCkgKyJ1cmw9JyIgKyBkYXRhVXJsICsgIiddIiApOwoJCQkJfQoKCQkJCS8vIFJlbW92ZSBsb2FkaW5nIG1lc3NhZ2UuCgkJCQlpZiAoIHNldHRpbmdzLnNob3dMb2FkTXNnICkgewoJCQkJCXRoaXMuX2hpZGVMb2FkaW5nKCk7CgkJCQl9CgoJCQkJLy8gQkVHSU4gREVQUkVDQVRFRCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQkJCS8vIExldCBsaXN0ZW5lcnMga25vdyB0aGUgY29udGVudCBsb2FkZWQgc3VjY2Vzc2Z1bGx5LgoJCQkJdGhpcy5lbGVtZW50LnRyaWdnZXIoICJwYWdlbG9hZCIgKTsKCQkJCS8vIEVORCBERVBSRUNBVEVEIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoJCQkJZGVmZXJyZWQucmVzb2x2ZSggYWJzVXJsLCBzZXR0aW5ncywgY29udGVudCApOwoJCQl9LCB0aGlzKTsKCQl9LAoKCQlfbG9hZERlZmF1bHRzOiB7CgkJCXR5cGU6ICJnZXQiLAoJCQlkYXRhOiB1bmRlZmluZWQsCgoJCQkvLyBERVBSRUNBVEVECgkJCXJlbG9hZFBhZ2U6IGZhbHNlLAoKCQkJcmVsb2FkOiBmYWxzZSwKCgkJCS8vIEJ5IGRlZmF1bHQgd2UgcmVseSBvbiB0aGUgcm9sZSBkZWZpbmVkIGJ5IHRoZSBAZGF0YS1yb2xlIGF0dHJpYnV0ZS4KCQkJcm9sZTogdW5kZWZpbmVkLAoKCQkJc2hvd0xvYWRNc2c6IGZhbHNlLAoKCQkJLy8gVGhpcyBkZWxheSBhbGxvd3MgbG9hZHMgdGhhdCBwdWxsIGZyb20gYnJvd3NlciBjYWNoZSB0bwoJCQkvLyBvY2N1ciB3aXRob3V0IHNob3dpbmcgdGhlIGxvYWRpbmcgbWVzc2FnZS4KCQkJbG9hZE1zZ0RlbGF5OiA1MAoJCX0sCgoJCWxvYWQ6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7CgkJCS8vIFRoaXMgZnVuY3Rpb24gdXNlcyBkZWZlcnJlZCBub3RpZmljYXRpb25zIHRvIGxldCBjYWxsZXJzCgkJCS8vIGtub3cgd2hlbiB0aGUgY29udGVudCBpcyBkb25lIGxvYWRpbmcsIG9yIGlmIGFuIGVycm9yIGhhcyBvY2N1cnJlZC4KCQkJdmFyIGRlZmVycmVkID0gKCBvcHRpb25zICYmIG9wdGlvbnMuZGVmZXJyZWQgKSB8fCAkLkRlZmVycmVkKCksCgoJCQkJLy8gVGhlIGRlZmF1bHQgbG9hZCBvcHRpb25zIHdpdGggb3ZlcnJpZGVzIHNwZWNpZmllZCBieSB0aGUgY2FsbGVyLgoJCQkJc2V0dGluZ3MgPSAkLmV4dGVuZCgge30sIHRoaXMuX2xvYWREZWZhdWx0cywgb3B0aW9ucyApLAoKCQkJCS8vIFRoZSBET00gZWxlbWVudCBmb3IgdGhlIGNvbnRlbnQgYWZ0ZXIgaXQgaGFzIGJlZW4gbG9hZGVkLgoJCQkJY29udGVudCA9IG51bGwsCgoJCQkJLy8gVGhlIGFic29sdXRlIHZlcnNpb24gb2YgdGhlIFVSTCBwYXNzZWQgaW50byB0aGUgZnVuY3Rpb24uIFRoaXMKCQkJCS8vIHZlcnNpb24gb2YgdGhlIFVSTCBtYXkgY29udGFpbiBkaWFsb2cvc3ViY29udGVudCBwYXJhbXMgaW4gaXQuCgkJCQlhYnNVcmwgPSAkLm1vYmlsZS5wYXRoLm1ha2VVcmxBYnNvbHV0ZSggdXJsLCB0aGlzLl9maW5kQmFzZVdpdGhEZWZhdWx0KCkgKSwKCQkJCWZpbGVVcmwsIGRhdGFVcmwsIHBibEV2ZW50LCB0cmlnZ2VyRGF0YTsKCgkJCS8vIERFUFJFQ0FURUQgcmVsb2FkUGFnZQoJCQlzZXR0aW5ncy5yZWxvYWQgPSBzZXR0aW5ncy5yZWxvYWRQYWdlOwoKCQkJLy8gSWYgdGhlIGNhbGxlciBwcm92aWRlZCBkYXRhLCBhbmQgd2UncmUgdXNpbmcgImdldCIgcmVxdWVzdCwKCQkJLy8gYXBwZW5kIHRoZSBkYXRhIHRvIHRoZSBVUkwuCgkJCWlmICggc2V0dGluZ3MuZGF0YSAmJiBzZXR0aW5ncy50eXBlID09PSAiZ2V0IiApIHsKCQkJCWFic1VybCA9ICQubW9iaWxlLnBhdGguYWRkU2VhcmNoUGFyYW1zKCBhYnNVcmwsIHNldHRpbmdzLmRhdGEgKTsKCQkJCXNldHRpbmdzLmRhdGEgPSB1bmRlZmluZWQ7CgkJCX0KCgkJCS8vIElmIHRoZSBjYWxsZXIgaXMgdXNpbmcgYSAicG9zdCIgcmVxdWVzdCwgcmVsb2FkIG11c3QgYmUgdHJ1ZQoJCQlpZiAoIHNldHRpbmdzLmRhdGEgJiYgc2V0dGluZ3MudHlwZSA9PT0gInBvc3QiICkgewoJCQkJc2V0dGluZ3MucmVsb2FkID0gdHJ1ZTsKCQkJfQoKCQkJLy8gVGhlIGFic29sdXRlIHZlcnNpb24gb2YgdGhlIFVSTCBtaW51cyBhbnkgZGlhbG9nL3N1YmNvbnRlbnQgcGFyYW1zLgoJCQkvLyBJbiBvdGhlcndvcmRzIHRoZSByZWFsIFVSTCBvZiB0aGUgY29udGVudCB0byBiZSBsb2FkZWQuCgkJCWZpbGVVcmwgPSB0aGlzLl9jcmVhdGVGaWxlVXJsKCBhYnNVcmwgKTsKCgkJCS8vIFRoZSB2ZXJzaW9uIG9mIHRoZSBVcmwgYWN0dWFsbHkgc3RvcmVkIGluIHRoZSBkYXRhLXVybCBhdHRyaWJ1dGUgb2YKCQkJLy8gdGhlIGNvbnRlbnQuIEZvciBlbWJlZGRlZCBjb250ZW50LCBpdCBpcyBqdXN0IHRoZSBpZCBvZiB0aGUgcGFnZS4gRm9yCgkJCS8vIGNvbnRlbnQgd2l0aGluIHRoZSBzYW1lIGRvbWFpbiBhcyB0aGUgZG9jdW1lbnQgYmFzZSwgaXQgaXMgdGhlIHNpdGUKCQkJLy8gcmVsYXRpdmUgcGF0aC4gRm9yIGNyb3NzLWRvbWFpbiBjb250ZW50IChQaG9uZSBHYXAgb25seSkgdGhlIGVudGlyZQoJCQkvLyBhYnNvbHV0ZSBVcmwgaXMgdXNlZCB0byBsb2FkIHRoZSBjb250ZW50LgoJCQlkYXRhVXJsID0gdGhpcy5fY3JlYXRlRGF0YVVybCggYWJzVXJsICk7CgoJCQljb250ZW50ID0gdGhpcy5fZmluZCggYWJzVXJsICk7CgoJCQkvLyBJZiBpdCBpc24ndCBhIHJlZmVyZW5jZSB0byB0aGUgZmlyc3QgY29udGVudCBhbmQgcmVmZXJzIHRvIG1pc3NpbmcKCQkJLy8gZW1iZWRkZWQgY29udGVudCByZWplY3QgdGhlIGRlZmVycmVkIGFuZCByZXR1cm4KCQkJaWYgKCBjb250ZW50Lmxlbmd0aCA9PT0gMCAmJgoJCQkJJC5tb2JpbGUucGF0aC5pc0VtYmVkZGVkUGFnZShmaWxlVXJsKSAmJgoJCQkJISQubW9iaWxlLnBhdGguaXNGaXJzdFBhZ2VVcmwoZmlsZVVybCkgKSB7CgkJCQlkZWZlcnJlZC5yZWplY3QoIGFic1VybCwgc2V0dGluZ3MgKTsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gUmVzZXQgYmFzZSB0byB0aGUgZGVmYXVsdCBkb2N1bWVudCBiYXNlCgkJCS8vIFRPRE8gZmlndXJlIG91dCB3aHkgd2UgZG9lIHRoaXMKCQkJdGhpcy5fZ2V0QmFzZSgpLnJlc2V0KCk7CgoJCQkvLyBJZiB0aGUgY29udGVudCB3ZSBhcmUgaW50ZXJlc3RlZCBpbiBpcyBhbHJlYWR5IGluIHRoZSBET00sCgkJCS8vIGFuZCB0aGUgY2FsbGVyIGRpZCBub3QgaW5kaWNhdGUgdGhhdCB3ZSBzaG91bGQgZm9yY2UgYQoJCQkvLyByZWxvYWQgb2YgdGhlIGZpbGUsIHdlIGFyZSBkb25lLiBSZXNvbHZlIHRoZSBkZWZlcnJyZWQgc28gdGhhdAoJCQkvLyB1c2VycyBjYW4gYmluZCB0byAuZG9uZSBvbiB0aGUgcHJvbWlzZQoJCQlpZiAoIGNvbnRlbnQubGVuZ3RoICYmICFzZXR0aW5ncy5yZWxvYWQgKSB7CgkJCQl0aGlzLl9lbmhhbmNlKCBjb250ZW50LCBzZXR0aW5ncy5yb2xlICk7CgkJCQlkZWZlcnJlZC5yZXNvbHZlKCBhYnNVcmwsIHNldHRpbmdzLCBjb250ZW50ICk7CgoJCQkJLy9pZiB3ZSBhcmUgcmVsb2FkaW5nIHRoZSBjb250ZW50IG1ha2Ugc3VyZSB3ZSB1cGRhdGUKCQkJCS8vIHRoZSBiYXNlIGlmIGl0cyBub3QgYSBwcmVmZXRjaAoJCQkJaWYgKCAhc2V0dGluZ3MucHJlZmV0Y2ggKSB7CgkJCQkJdGhpcy5fZ2V0QmFzZSgpLnNldCh1cmwpOwoJCQkJfQoKCQkJCXJldHVybjsKCQkJfQoKCQkJdHJpZ2dlckRhdGEgPSB7CgkJCQl1cmw6IHVybCwKCQkJCWFic1VybDogYWJzVXJsLAoJCQkJZGF0YVVybDogZGF0YVVybCwKCQkJCWRlZmVycmVkOiBkZWZlcnJlZCwKCQkJCW9wdGlvbnM6IHNldHRpbmdzCgkJCX07CgoJCQkvLyBMZXQgbGlzdGVuZXJzIGtub3cgd2UncmUgYWJvdXQgdG8gbG9hZCBjb250ZW50LgoJCQlwYmxFdmVudCA9IHRoaXMuX3RyaWdnZXJXaXRoRGVwcmVjYXRlZCggImJlZm9yZWxvYWQiLCB0cmlnZ2VyRGF0YSApOwoKCQkJLy8gSWYgdGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgcHJldmVudGVkLCBzdG9wIGhlcmUhCgkJCWlmICggcGJsRXZlbnQuZGVwcmVjYXRlZEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8CgkJCQlwYmxFdmVudC5ldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJaWYgKCBzZXR0aW5ncy5zaG93TG9hZE1zZyApIHsKCQkJCXRoaXMuX3Nob3dMb2FkaW5nKCBzZXR0aW5ncy5sb2FkTXNnRGVsYXkgKTsKCQkJfQoKCQkJLy8gUmVzZXQgYmFzZSB0byB0aGUgZGVmYXVsdCBkb2N1bWVudCBiYXNlLgoJCQkvLyBvbmx5IHJlc2V0IGlmIHdlIGFyZSBub3QgcHJlZmV0Y2hpbmcKCQkJaWYgKCBzZXR0aW5ncy5wcmVmZXRjaCA9PT0gdW5kZWZpbmVkICkgewoJCQkJdGhpcy5fZ2V0QmFzZSgpLnJlc2V0KCk7CgkJCX0KCgkJCWlmICggISggJC5tb2JpbGUuYWxsb3dDcm9zc0RvbWFpblBhZ2VzIHx8CgkJCQkkLm1vYmlsZS5wYXRoLmlzU2FtZURvbWFpbigkLm1vYmlsZS5wYXRoLmRvY3VtZW50VXJsLCBhYnNVcmwgKSApICkgewoJCQkJZGVmZXJyZWQucmVqZWN0KCBhYnNVcmwsIHNldHRpbmdzICk7CgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIExvYWQgdGhlIG5ldyBjb250ZW50LgoJCQkkLmFqYXgoewoJCQkJdXJsOiBmaWxlVXJsLAoJCQkJdHlwZTogc2V0dGluZ3MudHlwZSwKCQkJCWRhdGE6IHNldHRpbmdzLmRhdGEsCgkJCQljb250ZW50VHlwZTogc2V0dGluZ3MuY29udGVudFR5cGUsCgkJCQlkYXRhVHlwZTogImh0bWwiLAoJCQkJc3VjY2VzczogdGhpcy5fbG9hZFN1Y2Nlc3MoIGFic1VybCwgdHJpZ2dlckRhdGEsIHNldHRpbmdzLCBkZWZlcnJlZCApLAoJCQkJZXJyb3I6IHRoaXMuX2xvYWRFcnJvciggYWJzVXJsLCB0cmlnZ2VyRGF0YSwgc2V0dGluZ3MsIGRlZmVycmVkICkKCQkJfSk7CgkJfSwKCgkJX2xvYWRFcnJvcjogZnVuY3Rpb24oIGFic1VybCwgdHJpZ2dlckRhdGEsIHNldHRpbmdzLCBkZWZlcnJlZCApIHsKCQkJcmV0dXJuICQucHJveHkoZnVuY3Rpb24oIHhociwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24gKSB7CgkJCQkvL3NldCBiYXNlIGJhY2sgdG8gY3VycmVudCBwYXRoCgkJCQl0aGlzLl9nZXRCYXNlKCkuc2V0KCAkLm1vYmlsZS5wYXRoLmdldCgpICk7CgoJCQkJLy8gQWRkIGVycm9yIGluZm8gdG8gb3VyIHRyaWdnZXJEYXRhLgoJCQkJdHJpZ2dlckRhdGEueGhyID0geGhyOwoJCQkJdHJpZ2dlckRhdGEudGV4dFN0YXR1cyA9IHRleHRTdGF0dXM7CgkJCQl0cmlnZ2VyRGF0YS5lcnJvclRocm93biA9IGVycm9yVGhyb3duOwoKCQkJCS8vIExldCBsaXN0ZW5lcnMga25vdyB0aGUgcGFnZSBsb2FkIGZhaWxlZC4KCQkJCXZhciBwbGZFdmVudCA9IHRoaXMuX3RyaWdnZXJXaXRoRGVwcmVjYXRlZCggImxvYWRmYWlsZWQiLCB0cmlnZ2VyRGF0YSApOwoKCQkJCS8vIElmIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHByZXZlbnRlZCwgc3RvcCBoZXJlIQoJCQkJLy8gTm90ZSB0aGF0IGl0IGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgbGlzdGVuZXIvaGFuZGxlcgoJCQkJLy8gdGhhdCBjYWxsZWQgcHJldmVudERlZmF1bHQoKSwgdG8gcmVzb2x2ZS9yZWplY3QgdGhlCgkJCQkvLyBkZWZlcnJlZCBvYmplY3Qgd2l0aGluIHRoZSB0cmlnZ2VyRGF0YS4KCQkJCWlmICggcGxmRXZlbnQuZGVwcmVjYXRlZEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8CgkJCQkJcGxmRXZlbnQuZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCS8vIFJlbW92ZSBsb2FkaW5nIG1lc3NhZ2UuCgkJCQlpZiAoIHNldHRpbmdzLnNob3dMb2FkTXNnICkgewoJCQkJCXRoaXMuX3Nob3dFcnJvcigpOwoJCQkJfQoKCQkJCWRlZmVycmVkLnJlamVjdCggYWJzVXJsLCBzZXR0aW5ncyApOwoJCQl9LCB0aGlzKTsKCQl9LAoKCQlfZ2V0VHJhbnNpdGlvbkhhbmRsZXI6IGZ1bmN0aW9uKCB0cmFuc2l0aW9uICkgewoJCQl0cmFuc2l0aW9uID0gJC5tb2JpbGUuX21heWJlRGVncmFkZVRyYW5zaXRpb24oIHRyYW5zaXRpb24gKTsKCgkJCS8vZmluZCB0aGUgdHJhbnNpdGlvbiBoYW5kbGVyIGZvciB0aGUgc3BlY2lmaWVkIHRyYW5zaXRpb24uIElmIHRoZXJlCgkJCS8vaXNuJ3Qgb25lIGluIG91ciB0cmFuc2l0aW9uSGFuZGxlcnMgZGljdGlvbmFyeSwgdXNlIHRoZSBkZWZhdWx0IG9uZS4KCQkJLy9jYWxsIHRoZSBoYW5kbGVyIGltbWVkaWF0ZWx5IHRvIGtpY2stb2ZmIHRoZSB0cmFuc2l0aW9uLgoJCQlyZXR1cm4gJC5tb2JpbGUudHJhbnNpdGlvbkhhbmRsZXJzWyB0cmFuc2l0aW9uIF0gfHwgJC5tb2JpbGUuZGVmYXVsdFRyYW5zaXRpb25IYW5kbGVyOwoJCX0sCgoJCS8vIFRPRE8gbW92ZSBpbnRvIHRyYW5zaXRpb24gaGFuZGxlcnM/CgkJX3RyaWdnZXJDc3NUcmFuc2l0aW9uRXZlbnRzOiBmdW5jdGlvbiggdG8sIGZyb20sIHByZWZpeCApIHsKCQkJdmFyIHNhbWVQYWdlID0gZmFsc2U7CgoJCQlwcmVmaXggPSBwcmVmaXggfHwgIiI7CgoJCQkvLyBUT0RPIGRlY2lkZSBpZiB0aGVzZSBldmVudHMgc2hvdWxkIGluIGZhY3QgYmUgdHJpZ2dlcmVkIG9uIHRoZSBjb250YWluZXIKCQkJaWYgKCBmcm9tICkgewoKCQkJCS8vQ2hlY2sgaWYgdGhpcyBpcyBhIHNhbWUgcGFnZSB0cmFuc2l0aW9uIGFuZCB0ZWxsIHRoZSBoYW5kbGVyIGluIHBhZ2UKCQkJCWlmKCB0b1swXSA9PT0gZnJvbVswXSApewoJCQkJCXNhbWVQYWdlID0gdHJ1ZTsKCQkJCX0KCgkJCQkvL3RyaWdnZXIgYmVmb3JlIHNob3cvaGlkZSBldmVudHMKCQkJCS8vIFRPRE8gZGVwcmVjYXRlIG5leHRQYWdlIGluIGZhdm9yIG9mIG5leHQKCQkJCXRoaXMuX3RyaWdnZXJXaXRoRGVwcmVjYXRlZCggcHJlZml4ICsgImhpZGUiLCB7IG5leHRQYWdlOiB0bywgc2FtZVBhZ2U6IHNhbWVQYWdlIH0sIGZyb20gKTsKCQkJfQoKCQkJLy8gVE9ETyBkZXByZWNhdGUgcHJldlBhZ2UgaW4gZmF2b3Igb2YgcHJldmlvdXMKCQkJdGhpcy5fdHJpZ2dlcldpdGhEZXByZWNhdGVkKCBwcmVmaXggKyAic2hvdyIsIHsgcHJldlBhZ2U6IGZyb20gfHwgJCggIiIgKSB9LCB0byApOwoJCX0sCgoJCS8vIFRPRE8gbWFrZSBwcml2YXRlIG9uY2UgY2hhbmdlIGhhcyBiZWVuIGRlZmluZWQgaW4gdGhlIHdpZGdldAoJCV9jc3NUcmFuc2l0aW9uOiBmdW5jdGlvbiggdG8sIGZyb20sIG9wdGlvbnMgKSB7CgkJCXZhciB0cmFuc2l0aW9uID0gb3B0aW9ucy50cmFuc2l0aW9uLAoJCQkJcmV2ZXJzZSA9IG9wdGlvbnMucmV2ZXJzZSwKCQkJCWRlZmVycmVkID0gb3B0aW9ucy5kZWZlcnJlZCwKCQkJCVRyYW5zaXRpb25IYW5kbGVyLAoJCQkJcHJvbWlzZTsKCgkJCXRoaXMuX3RyaWdnZXJDc3NUcmFuc2l0aW9uRXZlbnRzKCB0bywgZnJvbSwgImJlZm9yZSIgKTsKCgkJCS8vIFRPRE8gcHV0IHRoaXMgaW4gYSBiaW5kaW5nIHRvIGV2ZW50cyAqb3V0c2lkZSogdGhlIHdpZGdldAoJCQl0aGlzLl9oaWRlTG9hZGluZygpOwoKCQkJVHJhbnNpdGlvbkhhbmRsZXIgPSB0aGlzLl9nZXRUcmFuc2l0aW9uSGFuZGxlciggdHJhbnNpdGlvbiApOwoKCQkJcHJvbWlzZSA9ICggbmV3IFRyYW5zaXRpb25IYW5kbGVyKCB0cmFuc2l0aW9uLCByZXZlcnNlLCB0bywgZnJvbSApICkudHJhbnNpdGlvbigpOwoKCQkJLy8gVE9ETyB0ZW1wb3JhcnkgYWNjb21vZGF0aW9uIG9mIGFyZ3VtZW50IGRlZmVycmVkCgkJCXByb21pc2UuZG9uZShmdW5jdGlvbigpIHsKCQkJCWRlZmVycmVkLnJlc29sdmUuYXBwbHkoIGRlZmVycmVkLCBhcmd1bWVudHMgKTsKCQkJfSk7CgoJCQlwcm9taXNlLmRvbmUoJC5wcm94eShmdW5jdGlvbigpIHsKCQkJCXRoaXMuX3RyaWdnZXJDc3NUcmFuc2l0aW9uRXZlbnRzKCB0bywgZnJvbSApOwoJCQl9LCB0aGlzKSk7CgkJfSwKCgkJX3JlbGVhc2VUcmFuc2l0aW9uTG9jazogZnVuY3Rpb24oKSB7CgkJCS8vcmVsZWFzZSB0cmFuc2l0aW9uIGxvY2sgc28gbmF2aWdhdGlvbiBpcyBmcmVlIGFnYWluCgkJCWlzUGFnZVRyYW5zaXRpb25pbmcgPSBmYWxzZTsKCQkJaWYgKCBwYWdlVHJhbnNpdGlvblF1ZXVlLmxlbmd0aCA+IDAgKSB7CgkJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlLmFwcGx5KCBudWxsLCBwYWdlVHJhbnNpdGlvblF1ZXVlLnBvcCgpICk7CgkJCX0KCQl9LAoKCQlfcmVtb3ZlQWN0aXZlTGlua0NsYXNzOiBmdW5jdGlvbiggZm9yY2UgKSB7CgkJCS8vY2xlYXIgb3V0IHRoZSBhY3RpdmUgYnV0dG9uIHN0YXRlCgkJCSQubW9iaWxlLnJlbW92ZUFjdGl2ZUxpbmtDbGFzcyggZm9yY2UgKTsKCQl9LAoKCQlfbG9hZFVybDogZnVuY3Rpb24oIHRvLCB0cmlnZ2VyRGF0YSwgc2V0dGluZ3MgKSB7CgkJCS8vIHByZXNlcnZlIHRoZSBvcmlnaW5hbCB0YXJnZXQgYXMgdGhlIGRhdGFVcmwgdmFsdWUgd2lsbCBiZQoJCQkvLyBzaW1wbGlmaWVkIGVnLCByZW1vdmluZyB1aS1zdGF0ZSwgYW5kIHJlbW92aW5nIHF1ZXJ5IHBhcmFtcwoJCQkvLyBmcm9tIHRoZSBoYXNoIHRoaXMgaXMgc28gdGhhdCB1c2VycyB3aG8gd2FudCB0byB1c2UgcXVlcnkKCQkJLy8gcGFyYW1zIGhhdmUgYWNjZXNzIHRvIHRoZW0gaW4gdGhlIGV2ZW50IGJpbmRpbmdzIGZvciB0aGUgcGFnZQoJCQkvLyBsaWZlIGN5Y2xlIFNlZSBpc3N1ZSAjNTA4NQoJCQlzZXR0aW5ncy50YXJnZXQgPSB0bzsKCQkJc2V0dGluZ3MuZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7CgoJCQl0aGlzLmxvYWQoIHRvLCBzZXR0aW5ncyApOwoKCQkJc2V0dGluZ3MuZGVmZXJyZWQuZG9uZSgkLnByb3h5KGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGNvbnRlbnQgKSB7CgkJCQlpc1BhZ2VUcmFuc2l0aW9uaW5nID0gZmFsc2U7CgoJCQkJLy8gc3RvcmUgdGhlIG9yaWdpbmFsIGFic29sdXRlIHVybCBzbyB0aGF0IGl0IGNhbiBiZSBwcm92aWRlZAoJCQkJLy8gdG8gZXZlbnRzIGluIHRoZSB0cmlnZ2VyRGF0YSBvZiB0aGUgc3Vic2VxdWVudCBjaGFuZ2VQYWdlIGNhbGwKCQkJCW9wdGlvbnMuYWJzVXJsID0gdHJpZ2dlckRhdGEuYWJzVXJsOwoKCQkJCXRoaXMudHJhbnNpdGlvbiggY29udGVudCwgdHJpZ2dlckRhdGEsIG9wdGlvbnMgKTsKCQkJfSwgdGhpcykpOwoKCQkJc2V0dGluZ3MuZGVmZXJyZWQuZmFpbCgkLnByb3h5KGZ1bmN0aW9uKC8qIHVybCwgb3B0aW9ucyAqLykgewoJCQkJdGhpcy5fcmVtb3ZlQWN0aXZlTGlua0NsYXNzKCB0cnVlICk7CgkJCQl0aGlzLl9yZWxlYXNlVHJhbnNpdGlvbkxvY2soKTsKCQkJCXRoaXMuX3RyaWdnZXJXaXRoRGVwcmVjYXRlZCggImNoYW5nZWZhaWxlZCIsIHRyaWdnZXJEYXRhICk7CgkJCX0sIHRoaXMpKTsKCQl9LAoKCQlfdHJpZ2dlclBhZ2VCZWZvcmVDaGFuZ2U6IGZ1bmN0aW9uKCB0bywgdHJpZ2dlckRhdGEsIHNldHRpbmdzICkgewoJCQl2YXIgcGJjRXZlbnQgPSBuZXcgJC5FdmVudCggInBhZ2ViZWZvcmVjaGFuZ2UiICk7CgoJCQkkLmV4dGVuZCh0cmlnZ2VyRGF0YSwgeyB0b1BhZ2U6IHRvLCBvcHRpb25zOiBzZXR0aW5ncyB9KTsKCgkJCS8vIE5PVEU6IHByZXNlcnZlIHRoZSBvcmlnaW5hbCB0YXJnZXQgYXMgdGhlIGRhdGFVcmwgdmFsdWUgd2lsbCBiZQoJCQkvLyBzaW1wbGlmaWVkIGVnLCByZW1vdmluZyB1aS1zdGF0ZSwgYW5kIHJlbW92aW5nIHF1ZXJ5IHBhcmFtcyBmcm9tCgkJCS8vIHRoZSBoYXNoIHRoaXMgaXMgc28gdGhhdCB1c2VycyB3aG8gd2FudCB0byB1c2UgcXVlcnkgcGFyYW1zIGhhdmUKCQkJLy8gYWNjZXNzIHRvIHRoZW0gaW4gdGhlIGV2ZW50IGJpbmRpbmdzIGZvciB0aGUgcGFnZSBsaWZlIGN5Y2xlCgkJCS8vIFNlZSBpc3N1ZSAjNTA4NQoJCQlpZiAoICQudHlwZSh0bykgPT09ICJzdHJpbmciICkgewoJCQkJLy8gaWYgdGhlIHRvUGFnZSBpcyBhIHN0cmluZyBzaW1wbHkgY29udmVydCBpdAoJCQkJdHJpZ2dlckRhdGEuYWJzVXJsID0gJC5tb2JpbGUucGF0aC5tYWtlVXJsQWJzb2x1dGUoIHRvLCB0aGlzLl9maW5kQmFzZVdpdGhEZWZhdWx0KCkgKTsKCQkJfSBlbHNlIHsKCQkJCS8vIGlmIHRoZSB0b1BhZ2UgaXMgYSBqUXVlcnkgb2JqZWN0IGdyYWIgdGhlIGFic29sdXRlIHVybCBzdG9yZWQKCQkJCS8vIGluIHRoZSBsb2FkUGFnZSBjYWxsYmFjayB3aGVyZSBpdCBleGlzdHMKCQkJCXRyaWdnZXJEYXRhLmFic1VybCA9IHNldHRpbmdzLmFic1VybDsKCQkJfQoKCQkJLy8gTGV0IGxpc3RlbmVycyBrbm93IHdlJ3JlIGFib3V0IHRvIGNoYW5nZSB0aGUgY3VycmVudCBwYWdlLgoJCQl0aGlzLmVsZW1lbnQudHJpZ2dlciggcGJjRXZlbnQsIHRyaWdnZXJEYXRhICk7CgoJCQkvLyBJZiB0aGUgZGVmYXVsdCBiZWhhdmlvciBpcyBwcmV2ZW50ZWQsIHN0b3AgaGVyZSEKCQkJaWYgKCBwYmNFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJcmV0dXJuIHRydWU7CgkJfSwKCgkJY2hhbmdlOiBmdW5jdGlvbiggdG8sIG9wdGlvbnMgKSB7CgkJCS8vIElmIHdlIGFyZSBpbiB0aGUgbWlkc3Qgb2YgYSB0cmFuc2l0aW9uLCBxdWV1ZSB0aGUgY3VycmVudCByZXF1ZXN0LgoJCQkvLyBXZSdsbCBjYWxsIGNoYW5nZVBhZ2UoKSBvbmNlIHdlJ3JlIGRvbmUgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uCgkJCS8vIHRvIHNlcnZpY2UgdGhlIHJlcXVlc3QuCgkJCWlmICggaXNQYWdlVHJhbnNpdGlvbmluZyApIHsKCQkJCXBhZ2VUcmFuc2l0aW9uUXVldWUudW5zaGlmdCggYXJndW1lbnRzICk7CgkJCQlyZXR1cm47CgkJCX0KCgkJCXZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kKCB7fSwgJC5tb2JpbGUuY2hhbmdlUGFnZS5kZWZhdWx0cywgb3B0aW9ucyApLAoJCQkJdHJpZ2dlckRhdGEgPSB7fTsKCgkJCS8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgZnJvbVBhZ2UuCgkJCXNldHRpbmdzLmZyb21QYWdlID0gc2V0dGluZ3MuZnJvbVBhZ2UgfHwgdGhpcy5hY3RpdmVQYWdlOwoKCQkJLy8gaWYgdGhlIHBhZ2UgYmVmb3JlY2hhbmdlIGRlZmF1bHQgaXMgcHJldmVudGVkIHJldHVybiBlYXJseQoJCQlpZiAoICF0aGlzLl90cmlnZ2VyUGFnZUJlZm9yZUNoYW5nZSh0bywgdHJpZ2dlckRhdGEsIHNldHRpbmdzKSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gV2UgYWxsb3cgInBhZ2ViZWZvcmVjaGFuZ2UiIG9ic2VydmVycyB0byBtb2RpZnkgdGhlIHRvIGluCgkJCS8vIHRoZSB0cmlnZ2VyIGRhdGEgdG8gYWxsb3cgZm9yIHJlZGlyZWN0cy4gTWFrZSBzdXJlIG91ciB0byBpcwoJCQkvLyB1cGRhdGVkLiBXZSBhbHNvIG5lZWQgdG8gcmUtZXZhbHVhdGUgd2hldGhlciBpdCBpcyBhIHN0cmluZywKCQkJLy8gYmVjYXVzZSBhbiBvYmplY3QgY2FuIGFsc28gYmUgcmVwbGFjZWQgYnkgYSBzdHJpbmcKCQkJdG8gPSB0cmlnZ2VyRGF0YS50b1BhZ2U7CgoJCQkvLyBJZiB0aGUgY2FsbGVyIHBhc3NlZCB1cyBhIHVybCwgY2FsbCBsb2FkUGFnZSgpCgkJCS8vIHRvIG1ha2Ugc3VyZSBpdCBpcyBsb2FkZWQgaW50byB0aGUgRE9NLiBXZSdsbCBsaXN0ZW4KCQkJLy8gdG8gdGhlIHByb21pc2Ugb2JqZWN0IGl0IHJldHVybnMgc28gd2Uga25vdyB3aGVuCgkJCS8vIGl0IGlzIGRvbmUgbG9hZGluZyBvciBpZiBhbiBlcnJvciBvY3VycmVkLgoJCQlpZiAoICQudHlwZSh0bykgPT09ICJzdHJpbmciICkgewoJCQkJLy8gU2V0IHRoZSBpc1BhZ2VUcmFuc2l0aW9uaW5nIGZsYWcgdG8gcHJldmVudCBhbnkgcmVxdWVzdHMgZnJvbQoJCQkJLy8gZW50ZXJpbmcgdGhpcyBtZXRob2Qgd2hpbGUgd2UgYXJlIGluIHRoZSBtaWRzdCBvZiBsb2FkaW5nIGEgcGFnZQoJCQkJLy8gb3IgdHJhbnNpdGlvbmluZy4KCQkJCWlzUGFnZVRyYW5zaXRpb25pbmcgPSB0cnVlOwoKCQkJCXRoaXMuX2xvYWRVcmwoIHRvLCB0cmlnZ2VyRGF0YSwgc2V0dGluZ3MgKTsKCQkJfSBlbHNlIHsKCQkJCXRoaXMudHJhbnNpdGlvbiggdG8sIHRyaWdnZXJEYXRhLCBzZXR0aW5ncyApOwoJCQl9CgkJfSwKCgkJdHJhbnNpdGlvbjogZnVuY3Rpb24oIHRvUGFnZSwgdHJpZ2dlckRhdGEsIHNldHRpbmdzICkgewoJCQl2YXIgZnJvbVBhZ2UsIHVybCwgcGFnZVVybCwgZmlsZVVybCwKCQkJCWFjdGl2ZSwgYWN0aXZlSXNJbml0aWFsUGFnZSwKCQkJCWhpc3RvcnlEaXIsIHBhZ2VUaXRsZSwgaXNEaWFsb2csCgkJCQlhbHJlYWR5VGhlcmUsIG5ld1BhZ2VUaXRsZSwKCQkJCXBhcmFtcywJY3NzVHJhbnNpdGlvbkRlZmVycmVkLAoJCQkJYmVmb3JlVHJhbnNpdGlvbjsKCgkJCS8vIElmIHdlIGFyZSBpbiB0aGUgbWlkc3Qgb2YgYSB0cmFuc2l0aW9uLCBxdWV1ZSB0aGUgY3VycmVudCByZXF1ZXN0LgoJCQkvLyBXZSdsbCBjYWxsIGNoYW5nZVBhZ2UoKSBvbmNlIHdlJ3JlIGRvbmUgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uCgkJCS8vIHRvIHNlcnZpY2UgdGhlIHJlcXVlc3QuCgkJCWlmICggaXNQYWdlVHJhbnNpdGlvbmluZyApIHsKCQkJCS8vIG1ha2Ugc3VyZSB0byBvbmx5IHF1ZXVlIHRoZSB0byBhbmQgc2V0dGluZ3MgdmFsdWVzIHNvIHRoZSBhcmd1bWVudHMKCQkJCS8vIHdvcmsgd2l0aCBhIGNhbGwgdG8gdGhlIGNoYW5nZSBtZXRob2QKCQkJCXBhZ2VUcmFuc2l0aW9uUXVldWUudW5zaGlmdCggW3RvUGFnZSwgc2V0dGluZ3NdICk7CgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIERFUFJFQ0FURUQgLSB0aGlzIGNhbGwgb25seSwgaW4gZmF2b3Igb2YgdGhlIGJlZm9yZSB0cmFuc2l0aW9uCgkJCS8vIGlmIHRoZSBwYWdlIGJlZm9yZWNoYW5nZSBkZWZhdWx0IGlzIHByZXZlbnRlZCByZXR1cm4gZWFybHkKCQkJaWYgKCAhdGhpcy5fdHJpZ2dlclBhZ2VCZWZvcmVDaGFuZ2UodG9QYWdlLCB0cmlnZ2VyRGF0YSwgc2V0dGluZ3MpICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBpZiB0aGUgKGNvbnRlbnR8cGFnZSliZWZvcmV0cmFuc2l0aW9uIGRlZmF1bHQgaXMgcHJldmVudGVkIHJldHVybiBlYXJseQoJCQkvLyBOb3RlLCB3ZSBoYXZlIHRvIGNoZWNrIGZvciBib3RoIHRoZSBkZXByZWNhdGVkIGFuZCBuZXcgZXZlbnRzCgkJCWJlZm9yZVRyYW5zaXRpb24gPSB0aGlzLl90cmlnZ2VyV2l0aERlcHJlY2F0ZWQoICJiZWZvcmV0cmFuc2l0aW9uIiwgdHJpZ2dlckRhdGEgKTsKCQkJaWYgKGJlZm9yZVRyYW5zaXRpb24uZGVwcmVjYXRlZEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8CgkJCQliZWZvcmVUcmFuc2l0aW9uLmV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBTZXQgdGhlIGlzUGFnZVRyYW5zaXRpb25pbmcgZmxhZyB0byBwcmV2ZW50IGFueSByZXF1ZXN0cyBmcm9tCgkJCS8vIGVudGVyaW5nIHRoaXMgbWV0aG9kIHdoaWxlIHdlIGFyZSBpbiB0aGUgbWlkc3Qgb2YgbG9hZGluZyBhIHBhZ2UKCQkJLy8gb3IgdHJhbnNpdGlvbmluZy4KCQkJaXNQYWdlVHJhbnNpdGlvbmluZyA9IHRydWU7CgoJCQkvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGZpcnN0LXBhZ2Ugb2YgdGhlIGFwcGxpY2F0aW9uLCB3ZSBuZWVkIHRvIG1ha2UKCQkJLy8gc3VyZSBzZXR0aW5ncy5kYXRhVXJsIGlzIHNldCB0byB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQgdXJsLiBUaGlzIGFsbG93cwoJCQkvLyB1cyB0byBhdm9pZCBnZW5lcmF0aW5nIGEgZG9jdW1lbnQgdXJsIHdpdGggYW4gaWQgaGFzaCBpbiB0aGUgY2FzZSB3aGVyZSB0aGUKCQkJLy8gZmlyc3QtcGFnZSBvZiB0aGUgZG9jdW1lbnQgaGFzIGFuIGlkIGF0dHJpYnV0ZSBzcGVjaWZpZWQuCgkJCWlmICggdG9QYWdlWyAwIF0gPT09ICQubW9iaWxlLmZpcnN0UGFnZVsgMCBdICYmICFzZXR0aW5ncy5kYXRhVXJsICkgewoJCQkJc2V0dGluZ3MuZGF0YVVybCA9ICQubW9iaWxlLnBhdGguZG9jdW1lbnRVcmwuaHJlZk5vSGFzaDsKCQkJfQoKCQkJLy8gVGhlIGNhbGxlciBwYXNzZWQgdXMgYSByZWFsIHBhZ2UgRE9NIGVsZW1lbnQuIFVwZGF0ZSBvdXIKCQkJLy8gaW50ZXJuYWwgc3RhdGUgYW5kIHRoZW4gdHJpZ2dlciBhIHRyYW5zaXRpb24gdG8gdGhlIHBhZ2UuCgkJCWZyb21QYWdlID0gc2V0dGluZ3MuZnJvbVBhZ2U7CgkJCXVybCA9ICggc2V0dGluZ3MuZGF0YVVybCAmJiAkLm1vYmlsZS5wYXRoLmNvbnZlcnRVcmxUb0RhdGFVcmwoc2V0dGluZ3MuZGF0YVVybCkgKSB8fAoJCQkJdG9QYWdlLmpxbURhdGEoICJ1cmwiICk7CgoJCQkvLyBUaGUgcGFnZVVybCB2YXIgaXMgdXN1YWxseSB0aGUgc2FtZSBhcyB1cmwsIGV4Y2VwdCB3aGVuIHVybCBpcyBvYnNjdXJlZAoJCQkvLyBhcyBhIGRpYWxvZyB1cmwuIHBhZ2VVcmwgYWx3YXlzIGNvbnRhaW5zIHRoZSBmaWxlIHBhdGgKCQkJcGFnZVVybCA9IHVybDsKCQkJZmlsZVVybCA9ICQubW9iaWxlLnBhdGguZ2V0RmlsZVBhdGgoIHVybCApOwoJCQlhY3RpdmUgPSAkLm1vYmlsZS5uYXZpZ2F0ZS5oaXN0b3J5LmdldEFjdGl2ZSgpOwoJCQlhY3RpdmVJc0luaXRpYWxQYWdlID0gJC5tb2JpbGUubmF2aWdhdGUuaGlzdG9yeS5hY3RpdmVJbmRleCA9PT0gMDsKCQkJaGlzdG9yeURpciA9IDA7CgkJCXBhZ2VUaXRsZSA9IGRvY3VtZW50LnRpdGxlOwoJCQlpc0RpYWxvZyA9ICggc2V0dGluZ3Mucm9sZSA9PT0gImRpYWxvZyIgfHwKCQkJCXRvUGFnZS5qcW1EYXRhKCAicm9sZSIgKSA9PT0gImRpYWxvZyIgKSAmJgoJCQkJdG9QYWdlLmpxbURhdGEoICJkaWFsb2ciICkgIT09IHRydWU7CgoJCQkvLyBCeSBkZWZhdWx0LCB3ZSBwcmV2ZW50IGNoYW5nZVBhZ2UgcmVxdWVzdHMgd2hlbiB0aGUgZnJvbVBhZ2UgYW5kIHRvUGFnZQoJCQkvLyBhcmUgdGhlIHNhbWUgZWxlbWVudCwgYnV0IGZvbGtzIHRoYXQgZ2VuZXJhdGUgY29udGVudAoJCQkvLyBtYW51YWxseS9keW5hbWljYWxseSBhbmQgcmV1c2UgcGFnZXMgd2FudCB0byBiZSBhYmxlIHRvIHRyYW5zaXRpb24gdG8KCQkJLy8gdGhlIHNhbWUgcGFnZS4gVG8gYWxsb3cgdGhpcywgdGhleSB3aWxsIG5lZWQgdG8gY2hhbmdlIHRoZSBkZWZhdWx0CgkJCS8vIHZhbHVlIG9mIGFsbG93U2FtZVBhZ2VUcmFuc2l0aW9uIHRvIHRydWUsICpPUiosIHBhc3MgaXQgaW4gYXMgYW4KCQkJLy8gb3B0aW9uIHdoZW4gdGhleSBtYW51YWxseSBjYWxsIGNoYW5nZVBhZ2UoKS4gSXQgc2hvdWxkIGJlIG5vdGVkIHRoYXQKCQkJLy8gb3VyIGRlZmF1bHQgdHJhbnNpdGlvbiBhbmltYXRpb25zIGFzc3VtZSB0aGF0IHRoZSBmb3JtUGFnZSBhbmQgdG9QYWdlCgkJCS8vIGFyZSBkaWZmZXJlbnQgZWxlbWVudHMsIHNvIHRoZXkgbWF5IGJlaGF2ZSB1bmV4cGVjdGVkbHkuIEl0IGlzIHVwIHRvCgkJCS8vIHRoZSBkZXZlbG9wZXIgdGhhdCB0dXJucyBvbiB0aGUgYWxsb3dTYW1lUGFnZVRyYW5zaXRpb25hIG9wdGlvbiB0bwoJCQkvLyBlaXRoZXIgdHVybiBvZmYgdHJhbnNpdGlvbiBhbmltYXRpb25zLCBvciBtYWtlIHN1cmUgdGhhdCBhbiBhcHByb3ByaWF0ZQoJCQkvLyBhbmltYXRpb24gdHJhbnNpdGlvbiBpcyB1c2VkLgoJCQlpZiAoIGZyb21QYWdlICYmIGZyb21QYWdlWzBdID09PSB0b1BhZ2VbMF0gJiYKCQkJCSFzZXR0aW5ncy5hbGxvd1NhbWVQYWdlVHJhbnNpdGlvbiApIHsKCgkJCQlpc1BhZ2VUcmFuc2l0aW9uaW5nID0gZmFsc2U7CgkJCQl0aGlzLl90cmlnZ2VyV2l0aERlcHJlY2F0ZWQoICJ0cmFuc2l0aW9uIiwgdHJpZ2dlckRhdGEgKTsKCQkJCXRoaXMuZWxlbWVudC50cmlnZ2VyKCAicGFnZWNoYW5nZSIsIHRyaWdnZXJEYXRhICk7CgoJCQkJLy8gRXZlbiBpZiB0aGVyZSBpcyBubyBwYWdlIGNoYW5nZSB0byBiZSBkb25lLCB3ZSBzaG91bGQga2VlcCB0aGUKCQkJCS8vIHVybEhpc3RvcnkgaW4gc3luYyB3aXRoIHRoZSBoYXNoIGNoYW5nZXMKCQkJCWlmICggc2V0dGluZ3MuZnJvbUhhc2hDaGFuZ2UgKSB7CgkJCQkJJC5tb2JpbGUubmF2aWdhdGUuaGlzdG9yeS5kaXJlY3QoeyB1cmw6IHVybCB9KTsKCQkJCX0KCgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoZSBwYWdlIHdlIGFyZSBnaXZlbiBoYXMgYWxyZWFkeSBiZWVuIGVuaGFuY2VkLgoJCQl0b1BhZ2UucGFnZSh7IHJvbGU6IHNldHRpbmdzLnJvbGUgfSk7CgoJCQkvLyBJZiB0aGUgY2hhbmdlUGFnZSByZXF1ZXN0IHdhcyBzZW50IGZyb20gYSBoYXNoQ2hhbmdlIGV2ZW50LCBjaGVjayB0bwoJCQkvLyBzZWUgaWYgdGhlIHBhZ2UgaXMgYWxyZWFkeSB3aXRoaW4gdGhlIHVybEhpc3Rvcnkgc3RhY2suIElmIHNvLCB3ZSdsbAoJCQkvLyBhc3N1bWUgdGhlIHVzZXIgaGl0IHRoZSBmb3J3YXJkL2JhY2sgYnV0dG9uIGFuZCB3aWxsIHRyeSB0byBtYXRjaCB0aGUKCQkJLy8gdHJhbnNpdGlvbiBhY2NvcmRpbmdseS4KCQkJaWYgKCBzZXR0aW5ncy5mcm9tSGFzaENoYW5nZSApIHsKCQkJCWhpc3RvcnlEaXIgPSBzZXR0aW5ncy5kaXJlY3Rpb24gPT09ICJiYWNrIiA/IC0xIDogMTsKCQkJfQoKCQkJLy8gS2lsbCB0aGUga2V5Ym9hcmQuCgkJCS8vIFhYWF9qYmxhczogV2UgbmVlZCB0byBzdG9wIGNyYXdsaW5nIHRoZSBlbnRpcmUgZG9jdW1lbnQgdG8ga2lsbCBmb2N1cy4KCQkJLy8gICAgICAgICAgICBJbnN0ZWFkLCB3ZSBzaG91bGQgYmUgdHJhY2tpbmcgZm9jdXMgd2l0aCBhIGRlbGVnYXRlKCkKCQkJLy8gICAgICAgICAgICBoYW5kbGVyIHNvIHdlIGFscmVhZHkgaGF2ZSB0aGUgZWxlbWVudCBpbiBoYW5kIGF0IHRoaXMKCQkJLy8gICAgICAgICAgICBwb2ludC4KCQkJLy8gV3JhcCB0aGlzIGluIGEgdHJ5L2NhdGNoIGJsb2NrIHNpbmNlIElFOSB0aHJvdyAiVW5zcGVjaWZpZWQgZXJyb3IiIGlmCgkJCS8vIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaXMgdW5kZWZpbmVkIHdoZW4gd2UgYXJlIGluIGFuIElGcmFtZS4KCQkJdHJ5IHsKCQkJCWlmICggZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJgoJCQkJCWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gImJvZHkiICkgewoKCQkJCQkkKCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICkuYmx1cigpOwoJCQkJfSBlbHNlIHsKCQkJCQkkKCAiaW5wdXQ6Zm9jdXMsIHRleHRhcmVhOmZvY3VzLCBzZWxlY3Q6Zm9jdXMiICkuYmx1cigpOwoJCQkJfQoJCQl9IGNhdGNoKCBlICkge30KCgkJCS8vIFJlY29yZCB3aGV0aGVyIHdlIGFyZSBhdCBhIHBsYWNlIGluIGhpc3Rvcnkgd2hlcmUgYSBkaWFsb2cgdXNlZCB0byBiZSAtCgkJCS8vIGlmIHNvLCBkbyBub3QgYWRkIGEgbmV3IGhpc3RvcnkgZW50cnkgYW5kIGRvIG5vdCBjaGFuZ2UgdGhlIGhhc2ggZWl0aGVyCgkJCWFscmVhZHlUaGVyZSA9IGZhbHNlOwoKCQkJLy8gSWYgd2UncmUgZGlzcGxheWluZyB0aGUgcGFnZSBhcyBhIGRpYWxvZywgd2UgZG9uJ3Qgd2FudCB0aGUgdXJsCgkJCS8vIGZvciB0aGUgZGlhbG9nIGNvbnRlbnQgdG8gYmUgdXNlZCBpbiB0aGUgaGFzaC4gSW5zdGVhZCwgd2Ugd2FudAoJCQkvLyB0byBhcHBlbmQgdGhlIGRpYWxvZ0hhc2hLZXkgdG8gdGhlIHVybCBvZiB0aGUgY3VycmVudCBwYWdlLgoJCQlpZiAoIGlzRGlhbG9nICYmIGFjdGl2ZSApIHsKCQkJCS8vIG9uIHRoZSBpbml0aWFsIHBhZ2UgbG9hZCBhY3RpdmUudXJsIGlzIHVuZGVmaW5lZCBhbmQgaW4gdGhhdCBjYXNlCgkJCQkvLyBzaG91bGQgYmUgYW4gZW1wdHkgc3RyaW5nLiBNb3ZpbmcgdGhlIHVuZGVmaW5lZCAtPiBlbXB0eSBzdHJpbmcgYmFjawoJCQkJLy8gaW50byB1cmxIaXN0b3J5LmFkZE5ldyBzZWVtZWQgaW1wcnVkZW50IGdpdmVuIHVuZGVmaW5lZCBiZXR0ZXIKCQkJCS8vIHJlcHJlc2VudHMgdGhlIHVybCBzdGF0ZQoKCQkJCS8vIElmIHdlIGFyZSBhdCBhIHBsYWNlIGluIGhpc3RvcnkgdGhhdCBvbmNlIGJlbG9uZ2VkIHRvIGEgZGlhbG9nLCByZXVzZQoJCQkJLy8gdGhpcyBzdGF0ZSB3aXRob3V0IGFkZGluZyB0byB1cmxIaXN0b3J5IGFuZCB3aXRob3V0IG1vZGlmeWluZyB0aGUKCQkJCS8vIGhhc2guIEhvd2V2ZXIsIGlmIGEgZGlhbG9nIGlzIGFscmVhZHkgZGlzcGxheWVkIGF0IHRoaXMgcG9pbnQsIGFuZAoJCQkJLy8gd2UncmUgYWJvdXQgdG8gZGlzcGxheSBhbm90aGVyIGRpYWxvZywgdGhlbiB3ZSBtdXN0IGFkZCBhbm90aGVyIGhhc2gKCQkJCS8vIGFuZCBoaXN0b3J5IGVudHJ5IG9uIHRvcCBzbyB0aGF0IG9uZSBtYXkgbmF2aWdhdGUgYmFjayB0byB0aGUKCQkJCS8vIG9yaWdpbmFsIGRpYWxvZwoJCQkJaWYgKCBhY3RpdmUudXJsICYmCgkJCQkJYWN0aXZlLnVybC5pbmRleE9mKCAkLm1vYmlsZS5kaWFsb2dIYXNoS2V5ICkgPiAtMSAmJgoJCQkJCXRoaXMuYWN0aXZlUGFnZSAmJgoJCQkJCSF0aGlzLmFjdGl2ZVBhZ2UuaGFzQ2xhc3MoICJ1aS1kaWFsb2ciICkgJiYKCQkJCQkkLm1vYmlsZS5uYXZpZ2F0ZS5oaXN0b3J5LmFjdGl2ZUluZGV4ID4gMCApIHsKCgkJCQkJc2V0dGluZ3MuY2hhbmdlSGFzaCA9IGZhbHNlOwoJCQkJCWFscmVhZHlUaGVyZSA9IHRydWU7CgkJCQl9CgoJCQkJLy8gTm9ybWFsbHksIHdlIHRhY2sgb24gYSBkaWFsb2cgaGFzaCBrZXksIGJ1dCBpZiB0aGlzIGlzIHRoZSBsb2NhdGlvbgoJCQkJLy8gb2YgYSBzdGFsZSBkaWFsb2csIHdlIHJldXNlIHRoZSBVUkwgZnJvbSB0aGUgZW50cnkKCQkJCXVybCA9ICggYWN0aXZlLnVybCB8fCAiIiApOwoKCQkJCS8vIGFjY291bnQgZm9yIGFic29sdXRlIHVybHMgaW5zdGVhZCBvZiBqdXN0IHJlbGF0aXZlIHVybHMgdXNlIGFzIGhhc2hlcwoJCQkJaWYgKCAhYWxyZWFkeVRoZXJlICYmIHVybC5pbmRleE9mKCIjIikgPiAtMSApIHsKCQkJCQl1cmwgKz0gJC5tb2JpbGUuZGlhbG9nSGFzaEtleTsKCQkJCX0gZWxzZSB7CgkJCQkJdXJsICs9ICIjIiArICQubW9iaWxlLmRpYWxvZ0hhc2hLZXk7CgkJCQl9CgoJCQkJLy8gdGFjayBvbiBhbm90aGVyIGRpYWxvZ0hhc2hLZXkgaWYgdGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgaW5pdGlhbCBoYXNoCgkJCQkvLyB0aGlzIG1ha2VzIHN1cmUgdGhhdCBhIGhpc3RvcnkgZW50cnkgaXMgY3JlYXRlZCBmb3IgdGhpcyBkaWFsb2cKCQkJCWlmICggJC5tb2JpbGUubmF2aWdhdGUuaGlzdG9yeS5hY3RpdmVJbmRleCA9PT0gMCAmJiB1cmwgPT09ICQubW9iaWxlLm5hdmlnYXRlLmhpc3RvcnkuaW5pdGlhbERzdCApIHsKCQkJCQl1cmwgKz0gJC5tb2JpbGUuZGlhbG9nSGFzaEtleTsKCQkJCX0KCQkJfQoKCQkJLy8gaWYgdGl0bGUgZWxlbWVudCB3YXNuJ3QgZm91bmQsIHRyeSB0aGUgcGFnZSBkaXYgZGF0YSBhdHRyIHRvbwoJCQkvLyBJZiB0aGlzIGlzIGEgZGVlcC1saW5rIG9yIGEgcmVsb2FkICggYWN0aXZlID09PSB1bmRlZmluZWQgKSB0aGVuIGp1c3QKCQkJLy8gdXNlIHBhZ2VUaXRsZQoJCQluZXdQYWdlVGl0bGUgPSAoICFhY3RpdmUgKSA/IHBhZ2VUaXRsZSA6IHRvUGFnZS5qcW1EYXRhKCAidGl0bGUiICkgfHwKCQkJCXRvUGFnZS5jaGlsZHJlbiggIjpqcW1EYXRhKHJvbGU9J2hlYWRlcicpIiApLmZpbmQoICIudWktdGl0bGUiICkudGV4dCgpOwoJCQlpZiAoICEhbmV3UGFnZVRpdGxlICYmIHBhZ2VUaXRsZSA9PT0gZG9jdW1lbnQudGl0bGUgKSB7CgkJCQlwYWdlVGl0bGUgPSBuZXdQYWdlVGl0bGU7CgkJCX0KCQkJaWYgKCAhdG9QYWdlLmpxbURhdGEoICJ0aXRsZSIgKSApIHsKCQkJCXRvUGFnZS5qcW1EYXRhKCAidGl0bGUiLCBwYWdlVGl0bGUgKTsKCQkJfQoKCQkJLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSB0cmFuc2l0aW9uIGRlZmluZWQuCgkJCXNldHRpbmdzLnRyYW5zaXRpb24gPSBzZXR0aW5ncy50cmFuc2l0aW9uIHx8CgkJCQkoICggaGlzdG9yeURpciAmJiAhYWN0aXZlSXNJbml0aWFsUGFnZSApID8gYWN0aXZlLnRyYW5zaXRpb24gOiB1bmRlZmluZWQgKSB8fAoJCQkJKCBpc0RpYWxvZyA/ICQubW9iaWxlLmRlZmF1bHREaWFsb2dUcmFuc2l0aW9uIDogJC5tb2JpbGUuZGVmYXVsdFBhZ2VUcmFuc2l0aW9uICk7CgoJCQkvL2FkZCBwYWdlIHRvIGhpc3Rvcnkgc3RhY2sgaWYgaXQncyBub3QgYmFjayBvciBmb3J3YXJkCgkJCWlmICggIWhpc3RvcnlEaXIgJiYgYWxyZWFkeVRoZXJlICkgewoJCQkJJC5tb2JpbGUubmF2aWdhdGUuaGlzdG9yeS5nZXRBY3RpdmUoKS5wYWdlVXJsID0gcGFnZVVybDsKCQkJfQoKCQkJLy8gU2V0IHRoZSBsb2NhdGlvbiBoYXNoLgoJCQlpZiAoIHVybCAmJiAhc2V0dGluZ3MuZnJvbUhhc2hDaGFuZ2UgKSB7CgoJCQkJLy8gcmVidWlsZGluZyB0aGUgaGFzaCBoZXJlIHNpbmNlIHdlIGxvb3NlIGl0IGVhcmxpZXIgb24KCQkJCS8vIFRPRE8gcHJlc2VydmUgdGhlIG9yaWdpbmFsbHkgcGFzc2VkIGluIHBhdGgKCQkJCWlmICggISQubW9iaWxlLnBhdGguaXNQYXRoKCB1cmwgKSAmJiB1cmwuaW5kZXhPZiggIiMiICkgPCAwICkgewoJCQkJCXVybCA9ICIjIiArIHVybDsKCQkJCX0KCgkJCQkvLyBUT0RPIHRoZSBwcm9wZXJ0eSBuYW1lcyBoZXJlIGFyZSBqdXN0IHNpbGx5CgkJCQlwYXJhbXMgPSB7CgkJCQkJdHJhbnNpdGlvbjogc2V0dGluZ3MudHJhbnNpdGlvbiwKCQkJCQl0aXRsZTogcGFnZVRpdGxlLAoJCQkJCXBhZ2VVcmw6IHBhZ2VVcmwsCgkJCQkJcm9sZTogc2V0dGluZ3Mucm9sZQoJCQkJfTsKCgkJCQlpZiAoIHNldHRpbmdzLmNoYW5nZUhhc2ggIT09IGZhbHNlICYmICQubW9iaWxlLmhhc2hMaXN0ZW5pbmdFbmFibGVkICkgewoJCQkJCSQubW9iaWxlLm5hdmlnYXRlKCB1cmwsIHBhcmFtcywgdHJ1ZSk7CgkJCQl9IGVsc2UgaWYgKCB0b1BhZ2VbIDAgXSAhPT0gJC5tb2JpbGUuZmlyc3RQYWdlWyAwIF0gKSB7CgkJCQkJJC5tb2JpbGUubmF2aWdhdGUuaGlzdG9yeS5hZGQoIHVybCwgcGFyYW1zICk7CgkJCQl9CgkJCX0KCgkJCS8vc2V0IHBhZ2UgdGl0bGUKCQkJZG9jdW1lbnQudGl0bGUgPSBwYWdlVGl0bGU7CgoJCQkvL3NldCAidG9QYWdlIiBhcyBhY3RpdmVQYWdlIGRlcHJlY2F0ZWQgaW4gMS40IHJlbW92ZSBpbiAxLjUKCQkJJC5tb2JpbGUuYWN0aXZlUGFnZSA9IHRvUGFnZTsKCgkJCS8vbmV3IHdheSB0byBoYW5kbGUgYWN0aXZlUGFnZQoJCQl0aGlzLmFjdGl2ZVBhZ2UgPSB0b1BhZ2U7CgoJCQkvLyBJZiB3ZSdyZSBuYXZpZ2F0aW5nIGJhY2sgaW4gdGhlIFVSTCBoaXN0b3J5LCBzZXQgcmV2ZXJzZSBhY2NvcmRpbmdseS4KCQkJc2V0dGluZ3MucmV2ZXJzZSA9IHNldHRpbmdzLnJldmVyc2UgfHwgaGlzdG9yeURpciA8IDA7CgoJCQljc3NUcmFuc2l0aW9uRGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7CgoJCQl0aGlzLl9jc3NUcmFuc2l0aW9uKHRvUGFnZSwgZnJvbVBhZ2UsIHsKCQkJCXRyYW5zaXRpb246IHNldHRpbmdzLnRyYW5zaXRpb24sCgkJCQlyZXZlcnNlOiBzZXR0aW5ncy5yZXZlcnNlLAoJCQkJZGVmZXJyZWQ6IGNzc1RyYW5zaXRpb25EZWZlcnJlZAoJCQl9KTsKCgkJCWNzc1RyYW5zaXRpb25EZWZlcnJlZC5kb25lKCQucHJveHkoZnVuY3Rpb24oIG5hbWUsIHJldmVyc2UsICR0bywgJGZyb20sIGFscmVhZHlGb2N1c2VkICkgewoJCQkJJC5tb2JpbGUucmVtb3ZlQWN0aXZlTGlua0NsYXNzKCk7CgoJCQkJLy9pZiB0aGVyZSdzIGEgZHVwbGljYXRlQ2FjaGVkUGFnZSwgcmVtb3ZlIGl0IGZyb20gdGhlIERPTSBub3cgdGhhdCBpdCdzIGhpZGRlbgoJCQkJaWYgKCBzZXR0aW5ncy5kdXBsaWNhdGVDYWNoZWRQYWdlICkgewoJCQkJCXNldHRpbmdzLmR1cGxpY2F0ZUNhY2hlZFBhZ2UucmVtb3ZlKCk7CgkJCQl9CgoJCQkJLy8gZGVzcGl0ZSB2aXNpYmlsaXR5OiBoaWRkZW4gYWRkcmVzc2VzIGlzc3VlICMyOTY1CgkJCQkvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS1tb2JpbGUvaXNzdWVzLzI5NjUKCQkJCWlmICggIWFscmVhZHlGb2N1c2VkICkgewoJCQkJCSQubW9iaWxlLmZvY3VzUGFnZSggdG9QYWdlICk7CgkJCQl9CgoJCQkJdGhpcy5fcmVsZWFzZVRyYW5zaXRpb25Mb2NrKCk7CgkJCQl0aGlzLmVsZW1lbnQudHJpZ2dlciggInBhZ2VjaGFuZ2UiLCB0cmlnZ2VyRGF0YSApOwoJCQkJdGhpcy5fdHJpZ2dlcldpdGhEZXByZWNhdGVkKCAidHJhbnNpdGlvbiIsIHRyaWdnZXJEYXRhICk7CgkJCX0sIHRoaXMpKTsKCQl9LAoKCQkvLyBkZXRlcm1pbmUgdGhlIGN1cnJlbnQgYmFzZSB1cmwKCQlfZmluZEJhc2VXaXRoRGVmYXVsdDogZnVuY3Rpb24oKSB7CgkJCXZhciBjbG9zZXN0QmFzZSA9ICggdGhpcy5hY3RpdmVQYWdlICYmCgkJCSQubW9iaWxlLmdldENsb3Nlc3RCYXNlVXJsKCB0aGlzLmFjdGl2ZVBhZ2UgKSApOwoJCXJldHVybiBjbG9zZXN0QmFzZSB8fCAkLm1vYmlsZS5wYXRoLmRvY3VtZW50QmFzZS5ocmVmTm9IYXNoOwoJCX0KCX0pOwoKCS8vIFRoZSBmb2xsb3dpbmcgaGFuZGxlcnMgc2hvdWxkIGJlIGJvdW5kIGFmdGVyIG1vYmlsZWluaXQgaGFzIGJlZW4gdHJpZ2dlcmVkCgkvLyB0aGUgZm9sbG93aW5nIGRlZmVycmVkIGlzIHJlc29sdmVkIGluIHRoZSBpbml0IGZpbGUKCSQubW9iaWxlLm5hdnJlYWR5RGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7CgoJLy90aGVzZSB2YXJpYWJsZXMgbWFrZSBhbGwgcGFnZSBjb250YWluZXJzIHVzZSB0aGUgc2FtZSBxdWV1ZSBhbmQgb25seSBuYXZpZ2F0ZSBvbmUgYXQgYSB0aW1lCgkvLyBxdWV1ZSB0byBob2xkIHNpbXVsdGFuaW91cyBwYWdlIHRyYW5zaXRpb25zCgl2YXIgcGFnZVRyYW5zaXRpb25RdWV1ZSA9IFtdLAoKCQkvLyBpbmRpY2F0ZXMgd2hldGhlciBvciBub3QgcGFnZSBpcyBpbiBwcm9jZXNzIG9mIHRyYW5zaXRpb25pbmcKCQlpc1BhZ2VUcmFuc2l0aW9uaW5nID0gZmFsc2U7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCgkJLy8gcmVzb2x2ZWQgb24gZG9tcmVhZHkKCXZhciBkb21yZWFkeURlZmVycmVkID0gJC5EZWZlcnJlZCgpLAoJCWRvY3VtZW50VXJsID0gJC5tb2JpbGUucGF0aC5kb2N1bWVudFVybCwKCgkJLy8gdXNlZCB0byB0cmFjayBsYXN0IHZjbGlja2VkIGVsZW1lbnQgdG8gbWFrZSBzdXJlIGl0cyB2YWx1ZSBpcyBhZGRlZCB0byBmb3JtIGRhdGEKCQkkbGFzdFZDbGlja2VkID0gbnVsbDsKCgkvKiBFdmVudCBCaW5kaW5ncyAtIGhhc2hjaGFuZ2UsIHN1Ym1pdCwgYW5kIGNsaWNrICovCglmdW5jdGlvbiBmaW5kQ2xvc2VzdExpbmsoIGVsZSApCXsKCQl3aGlsZSAoIGVsZSApIHsKCQkJLy8gTG9vayBmb3IgdGhlIGNsb3Nlc3QgZWxlbWVudCB3aXRoIGEgbm9kZU5hbWUgb2YgImEiLgoJCQkvLyBOb3RlIHRoYXQgd2UgYXJlIGNoZWNraW5nIGlmIHdlIGhhdmUgYSB2YWxpZCBub2RlTmFtZQoJCQkvLyBiZWZvcmUgYXR0ZW1wdGluZyB0byBhY2Nlc3MgaXQuIFRoaXMgaXMgYmVjYXVzZSB0aGUKCQkJLy8gbm9kZSB3ZSBnZXQgY2FsbGVkIHdpdGggY291bGQgaGF2ZSBvcmlnaW5hdGVkIGZyb20gd2l0aGluCgkJCS8vIGFuIGVtYmVkZGVkIFNWRyBkb2N1bWVudCB3aGVyZSBzb21lIHN5bWJvbCBpbnN0YW5jZSBlbGVtZW50cwoJCQkvLyBkb24ndCBoYXZlIG5vZGVOYW1lIGRlZmluZWQgb24gdGhlbSwgb3Igc3RyaW5ncyBhcmUgb2YgdHlwZQoJCQkvLyBTVkdBbmltYXRlZFN0cmluZy4KCQkJaWYgKCAoIHR5cGVvZiBlbGUubm9kZU5hbWUgPT09ICJzdHJpbmciICkgJiYgZWxlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJhIiApIHsKCQkJCWJyZWFrOwoJCQl9CgkJCWVsZSA9IGVsZS5wYXJlbnROb2RlOwoJCX0KCQlyZXR1cm4gZWxlOwoJfQoKCSQubW9iaWxlLmxvYWRQYWdlID0gZnVuY3Rpb24oIHVybCwgb3B0cyApIHsKCQl2YXIgY29udGFpbmVyOwoKCQlvcHRzID0gb3B0cyB8fCB7fTsKCQljb250YWluZXIgPSAoIG9wdHMucGFnZUNvbnRhaW5lciB8fCAkLm1vYmlsZS5wYWdlQ29udGFpbmVyICk7CgoJCS8vIGNyZWF0ZSB0aGUgZGVmZXJyZWQgdGhhdCB3aWxsIGJlIHN1cHBsaWVkIHRvIGxvYWRQYWdlIGNhbGxlcnMKCQkvLyBhbmQgcmVzb2x2ZWQgYnkgdGhlIGNvbnRlbnQgd2lkZ2V0J3MgbG9hZCBtZXRob2QKCQlvcHRzLmRlZmVycmVkID0gJC5EZWZlcnJlZCgpOwoKCQkvLyBQcmVmZXJyaW5nIHRvIGFsbG93IGV4Y2VwdGlvbnMgZm9yIHVuaW5pdGlhbGl6ZWQgb3B0cy5wYWdlQ29udGFpbmVyCgkJLy8gd2lkZ2V0cyBzbyB3ZSBrbm93IGlmIHdlIG5lZWQgdG8gZm9yY2UgaW5pdCBoZXJlIGZvciB1c2VycwoJCWNvbnRhaW5lci5wYWdlY29udGFpbmVyKCAibG9hZCIsIHVybCwgb3B0cyApOwoKCQkvLyBwcm92aWRlIHRoZSBkZWZlcnJlZAoJCXJldHVybiBvcHRzLmRlZmVycmVkLnByb21pc2UoKTsKCX07CgoJLy9kZWZpbmUgdmFycyBmb3IgaW50ZXJhbCB1c2UKCgkvKiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9ucyAqLwoKCS8vIE5PVEUgSXNzdWUgIzQ5NTAgQW5kcm9pZCBwaG9uZWdhcCBkb2Vzbid0IG5hdmlnYXRlIGJhY2sgcHJvcGVybHkKCS8vICAgICAgd2hlbiBhIGZ1bGwgcGFnZSByZWZyZXNoIGhhcyB0YWtlbiBwbGFjZS4gSXQgYXBwZWFycyB0aGF0IGhhc2hjaGFuZ2UKCS8vICAgICAgYW5kIHJlcGxhY2VzdGF0ZSBoaXN0b3J5IGFsdGVyYXRpb25zIHdvcmsgZmluZSBidXQgd2UgbmVlZCB0byBzdXBwb3J0CgkvLyAgICAgIGJvdGggZm9ybXMgb2YgaGlzdG9yeSB0cmF2ZXJzYWwgaW4gb3VyIGNvZGUgdGhhdCB1c2VzIGJhY2t3YXJkIGhpc3RvcnkKCS8vICAgICAgbW92ZW1lbnQKCSQubW9iaWxlLmJhY2sgPSBmdW5jdGlvbigpIHsKCQl2YXIgbmF2ID0gd2luZG93Lm5hdmlnYXRvcjsKCgkJLy8gaWYgdGhlIHNldHRpbmcgaXMgb24gYW5kIHRoZSBuYXZpZ2F0b3Igb2JqZWN0IGlzCgkJLy8gYXZhaWxhYmxlIHVzZSB0aGUgcGhvbmVnYXAgbmF2aWdhdGlvbiBjYXBhYmlsaXR5CgkJaWYgKCB0aGlzLnBob25lZ2FwTmF2aWdhdGlvbkVuYWJsZWQgJiYKCQkJbmF2ICYmCgkJCW5hdi5hcHAgJiYKCQkJbmF2LmFwcC5iYWNrSGlzdG9yeSApIHsKCQkJbmF2LmFwcC5iYWNrSGlzdG9yeSgpOwoJCX0gZWxzZSB7CgkJCSQubW9iaWxlLnBhZ2VDb250YWluZXIucGFnZWNvbnRhaW5lciggImJhY2siICk7CgkJfQoJfTsKCgkvL2RpcmVjdCBmb2N1cyB0byB0aGUgcGFnZSB0aXRsZSwgb3Igb3RoZXJ3aXNlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50CgkkLm1vYmlsZS5mb2N1c1BhZ2UgPSBmdW5jdGlvbiAoIHBhZ2UgKSB7CgkJdmFyIGF1dG9mb2N1cyA9IHBhZ2UuZmluZCggIlthdXRvZm9jdXNdIiApLAoJCQlwYWdlVGl0bGUgPSBwYWdlLmZpbmQoICIudWktdGl0bGU6ZXEoMCkiICk7CgoJCWlmICggYXV0b2ZvY3VzLmxlbmd0aCApIHsKCQkJYXV0b2ZvY3VzLmZvY3VzKCk7CgkJCXJldHVybjsKCQl9CgoJCWlmICggcGFnZVRpdGxlLmxlbmd0aCApIHsKCQkJcGFnZVRpdGxlLmZvY3VzKCk7CgkJfSBlbHNlewoJCQlwYWdlLmZvY3VzKCk7CgkJfQoJfTsKCgkvLyBOby1vcCBpbXBsZW1lbnRhdGlvbiBvZiB0cmFuc2l0aW9uIGRlZ3JhZGF0aW9uCgkkLm1vYmlsZS5fbWF5YmVEZWdyYWRlVHJhbnNpdGlvbiA9ICQubW9iaWxlLl9tYXliZURlZ3JhZGVUcmFuc2l0aW9uIHx8IGZ1bmN0aW9uKCB0cmFuc2l0aW9uICkgewoJCXJldHVybiB0cmFuc2l0aW9uOwoJfTsKCgkvKiBleHBvc2VkICQubW9iaWxlIG1ldGhvZHMgKi8KCgkvL2FuaW1hdGlvbiBjb21wbGV0ZSBjYWxsYmFjawoJJC5mbi5hbmltYXRpb25Db21wbGV0ZSA9IGZ1bmN0aW9uKCBjYWxsYmFjayApIHsKCQlpZiAoICQuc3VwcG9ydC5jc3NUcmFuc2l0aW9ucyApIHsKCQkJcmV0dXJuICQoIHRoaXMgKS5vbmUoICJ3ZWJraXRBbmltYXRpb25FbmQgYW5pbWF0aW9uZW5kIiwgY2FsbGJhY2sgKTsKCQl9CgkJZWxzZXsKCQkJLy8gZGVmZXIgZXhlY3V0aW9uIGZvciBjb25zaXN0ZW5jeSBiZXR3ZWVuIHdlYmtpdC9ub24gd2Via2l0CgkJCXNldFRpbWVvdXQoIGNhbGxiYWNrLCAwICk7CgkJCXJldHVybiAkKCB0aGlzICk7CgkJfQoJfTsKCgkkLm1vYmlsZS5jaGFuZ2VQYWdlID0gZnVuY3Rpb24oIHRvLCBvcHRpb25zICkgewoJCSQubW9iaWxlLnBhZ2VDb250YWluZXIucGFnZWNvbnRhaW5lciggImNoYW5nZSIsIHRvLCBvcHRpb25zICk7Cgl9OwoKCSQubW9iaWxlLmNoYW5nZVBhZ2UuZGVmYXVsdHMgPSB7CgkJdHJhbnNpdGlvbjogdW5kZWZpbmVkLAoJCXJldmVyc2U6IGZhbHNlLAoJCWNoYW5nZUhhc2g6IHRydWUsCgkJZnJvbUhhc2hDaGFuZ2U6IGZhbHNlLAoJCXJvbGU6IHVuZGVmaW5lZCwgLy8gQnkgZGVmYXVsdCB3ZSByZWx5IG9uIHRoZSByb2xlIGRlZmluZWQgYnkgdGhlIEBkYXRhLXJvbGUgYXR0cmlidXRlLgoJCWR1cGxpY2F0ZUNhY2hlZFBhZ2U6IHVuZGVmaW5lZCwKCQlwYWdlQ29udGFpbmVyOiB1bmRlZmluZWQsCgkJc2hvd0xvYWRNc2c6IHRydWUsIC8vbG9hZGluZyBtZXNzYWdlIHNob3dzIGJ5IGRlZmF1bHQgd2hlbiBwYWdlcyBhcmUgYmVpbmcgZmV0Y2hlZCBkdXJpbmcgY2hhbmdlUGFnZQoJCWRhdGFVcmw6IHVuZGVmaW5lZCwKCQlmcm9tUGFnZTogdW5kZWZpbmVkLAoJCWFsbG93U2FtZVBhZ2VUcmFuc2l0aW9uOiBmYWxzZQoJfTsKCgkkLm1vYmlsZS5fcmVnaXN0ZXJJbnRlcm5hbEV2ZW50cyA9IGZ1bmN0aW9uKCkgewoJCXZhciBnZXRBamF4Rm9ybURhdGEgPSBmdW5jdGlvbiggJGZvcm0sIGNhbGN1bGF0ZU9ubHkgKSB7CgkJCXZhciB1cmwsIHJldCA9IHRydWUsIGZvcm1EYXRhLCB2Y2xpY2tlZE5hbWUsIG1ldGhvZDsKCQkJaWYgKCAhJC5tb2JpbGUuYWpheEVuYWJsZWQgfHwKCQkJCQkvLyB0ZXN0IHRoYXQgdGhlIGZvcm0gaXMsIGl0c2VsZiwgYWpheCBmYWxzZQoJCQkJCSRmb3JtLmlzKCAiOmpxbURhdGEoYWpheD0nZmFsc2UnKSIgKSB8fAoJCQkJCS8vIHRlc3QgdGhhdCAkLm1vYmlsZS5pZ25vcmVDb250ZW50RW5hYmxlZCBpcyBzZXQgYW5kCgkJCQkJLy8gdGhlIGZvcm0gb3Igb25lIG9mIGl0J3MgcGFyZW50cyBpcyBhamF4PWZhbHNlCgkJCQkJISRmb3JtLmpxbUhpamFja2FibGUoKS5sZW5ndGggfHwKCQkJCQkkZm9ybS5hdHRyKCAidGFyZ2V0IiApICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQl1cmwgPSAoICRsYXN0VkNsaWNrZWQgJiYgJGxhc3RWQ2xpY2tlZC5hdHRyKCAiZm9ybWFjdGlvbiIgKSApIHx8CgkJCQkkZm9ybS5hdHRyKCAiYWN0aW9uIiApOwoJCQltZXRob2QgPSAoICRmb3JtLmF0dHIoICJtZXRob2QiICkgfHwgImdldCIgKS50b0xvd2VyQ2FzZSgpOwoKCQkJLy8gSWYgbm8gYWN0aW9uIGlzIHNwZWNpZmllZCwgYnJvd3NlcnMgZGVmYXVsdCB0byB1c2luZyB0aGUKCQkJLy8gVVJMIG9mIHRoZSBkb2N1bWVudCBjb250YWluaW5nIHRoZSBmb3JtLiBTaW5jZSB3ZSBkeW5hbWljYWxseQoJCQkvLyBwdWxsIGluIHBhZ2VzIGZyb20gZXh0ZXJuYWwgZG9jdW1lbnRzLCB0aGUgZm9ybSBzaG91bGQgc3VibWl0CgkJCS8vIHRvIHRoZSBVUkwgZm9yIHRoZSBzb3VyY2UgZG9jdW1lbnQgb2YgdGhlIHBhZ2UgY29udGFpbmluZwoJCQkvLyB0aGUgZm9ybS4KCQkJaWYgKCAhdXJsICkgewoJCQkJLy8gR2V0IHRoZSBAZGF0YS11cmwgZm9yIHRoZSBwYWdlIGNvbnRhaW5pbmcgdGhlIGZvcm0uCgkJCQl1cmwgPSAkLm1vYmlsZS5nZXRDbG9zZXN0QmFzZVVybCggJGZvcm0gKTsKCgkJCQkvLyBOT1RFOiBJZiB0aGUgbWV0aG9kIGlzICJnZXQiLCB3ZSBuZWVkIHRvIHN0cmlwIG9mZiB0aGUgcXVlcnkgc3RyaW5nCgkJCQkvLyBiZWNhdXNlIGl0IHdpbGwgZ2V0IHJlcGxhY2VkIHdpdGggdGhlIG5ldyBmb3JtIGRhdGEuIFNlZSBpc3N1ZSAjNTcxMC4KCQkJCWlmICggbWV0aG9kID09PSAiZ2V0IiApIHsKCQkJCQl1cmwgPSAkLm1vYmlsZS5wYXRoLnBhcnNlVXJsKCB1cmwgKS5ocmVmTm9TZWFyY2g7CgkJCQl9CgoJCQkJaWYgKCB1cmwgPT09ICQubW9iaWxlLnBhdGguZG9jdW1lbnRCYXNlLmhyZWZOb0hhc2ggKSB7CgkJCQkJLy8gVGhlIHVybCB3ZSBnb3QgYmFjayBtYXRjaGVzIHRoZSBkb2N1bWVudCBiYXNlLAoJCQkJCS8vIHdoaWNoIG1lYW5zIHRoZSBwYWdlIG11c3QgYmUgYW4gaW50ZXJuYWwvZW1iZWRkZWQgcGFnZSwKCQkJCQkvLyBzbyBkZWZhdWx0IHRvIHVzaW5nIHRoZSBhY3R1YWwgZG9jdW1lbnQgdXJsIGFzIGEgYnJvd3NlcgoJCQkJCS8vIHdvdWxkLgoJCQkJCXVybCA9IGRvY3VtZW50VXJsLmhyZWZOb1NlYXJjaDsKCQkJCX0KCQkJfQoKCQkJdXJsID0gJC5tb2JpbGUucGF0aC5tYWtlVXJsQWJzb2x1dGUoICB1cmwsICQubW9iaWxlLmdldENsb3Nlc3RCYXNlVXJsKCAkZm9ybSApICk7CgoJCQlpZiAoICggJC5tb2JpbGUucGF0aC5pc0V4dGVybmFsKCB1cmwgKSAmJiAhJC5tb2JpbGUucGF0aC5pc1Blcm1pdHRlZENyb3NzRG9tYWluUmVxdWVzdCggZG9jdW1lbnRVcmwsIHVybCApICkgKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCgkJCWlmICggIWNhbGN1bGF0ZU9ubHkgKSB7CgkJCQlmb3JtRGF0YSA9ICRmb3JtLnNlcmlhbGl6ZUFycmF5KCk7CgoJCQkJaWYgKCAkbGFzdFZDbGlja2VkICYmICRsYXN0VkNsaWNrZWRbIDAgXS5mb3JtID09PSAkZm9ybVsgMCBdICkgewoJCQkJCXZjbGlja2VkTmFtZSA9ICRsYXN0VkNsaWNrZWQuYXR0ciggIm5hbWUiICk7CgkJCQkJaWYgKCB2Y2xpY2tlZE5hbWUgKSB7CgkJCQkJCS8vIE1ha2Ugc3VyZSB0aGUgbGFzdCBjbGlja2VkIGVsZW1lbnQgaXMgaW5jbHVkZWQgaW4gdGhlIGZvcm0KCQkJCQkJJC5lYWNoKCBmb3JtRGF0YSwgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJCQkJCQlpZiAoIHZhbHVlLm5hbWUgPT09IHZjbGlja2VkTmFtZSApIHsKCQkJCQkJCQkvLyBVbnNldCB2Y2xpY2tlZE5hbWUgLSB3ZSd2ZSBmb3VuZCBpdCBpbiB0aGUgc2VyaWFsaXplZCBkYXRhIGFscmVhZHkKCQkJCQkJCQl2Y2xpY2tlZE5hbWUgPSAiIjsKCQkJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJCQl9CgkJCQkJCX0pOwoJCQkJCQlpZiAoIHZjbGlja2VkTmFtZSApIHsKCQkJCQkJCWZvcm1EYXRhLnB1c2goIHsgbmFtZTogdmNsaWNrZWROYW1lLCB2YWx1ZTogJGxhc3RWQ2xpY2tlZC5hdHRyKCAidmFsdWUiICkgfSApOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoKCQkJCXJldCA9IHsKCQkJCQl1cmw6IHVybCwKCQkJCQlvcHRpb25zOiB7CgkJCQkJCXR5cGU6CQltZXRob2QsCgkJCQkJCWRhdGE6CQkkLnBhcmFtKCBmb3JtRGF0YSApLAoJCQkJCQl0cmFuc2l0aW9uOgkkZm9ybS5qcW1EYXRhKCAidHJhbnNpdGlvbiIgKSwKCQkJCQkJcmV2ZXJzZToJJGZvcm0uanFtRGF0YSggImRpcmVjdGlvbiIgKSA9PT0gInJldmVyc2UiLAoJCQkJCQlyZWxvYWRQYWdlOgl0cnVlCgkJCQkJfQoJCQkJfTsKCQkJfQoKCQkJcmV0dXJuIHJldDsKCQl9OwoKCQkvL2JpbmQgdG8gZm9ybSBzdWJtaXQgZXZlbnRzLCBoYW5kbGUgd2l0aCBBamF4CgkJJC5tb2JpbGUuZG9jdW1lbnQuZGVsZWdhdGUoICJmb3JtIiwgInN1Ym1pdCIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyIGZvcm1EYXRhOwoKCQkJaWYgKCAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgkJCQlmb3JtRGF0YSA9IGdldEFqYXhGb3JtRGF0YSggJCggdGhpcyApICk7CgkJCQlpZiAoIGZvcm1EYXRhICkgewoJCQkJCSQubW9iaWxlLmNoYW5nZVBhZ2UoIGZvcm1EYXRhLnVybCwgZm9ybURhdGEub3B0aW9ucyApOwoJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQl9CgkJCX0KCQl9KTsKCgkJLy9hZGQgYWN0aXZlIHN0YXRlIG9uIHZjbGljawoJCSQubW9iaWxlLmRvY3VtZW50LmJpbmQoICJ2Y2xpY2siLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCXZhciAkYnRuLCBidG5FbHMsIHRhcmdldCA9IGV2ZW50LnRhcmdldCwgbmVlZENsb3Nlc3QgPSBmYWxzZTsKCQkJLy8gaWYgdGhpcyBpc24ndCBhIGxlZnQgY2xpY2sgd2UgZG9uJ3QgY2FyZS4gSXRzIGltcG9ydGFudCB0byBub3RlCgkJCS8vIHRoYXQgd2hlbiB0aGUgdmlydHVhbCBldmVudCBpcyBnZW5lcmF0ZWQgaXQgd2lsbCBjcmVhdGUgdGhlIHdoaWNoIGF0dHIKCQkJaWYgKCBldmVudC53aGljaCA+IDEgfHwgISQubW9iaWxlLmxpbmtCaW5kaW5nRW5hYmxlZCApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gUmVjb3JkIHRoYXQgdGhpcyBlbGVtZW50IHdhcyBjbGlja2VkLCBpbiBjYXNlIHdlIG5lZWQgaXQgZm9yIGNvcnJlY3QKCQkJLy8gZm9ybSBzdWJtaXNzaW9uIGR1cmluZyB0aGUgInN1Ym1pdCIgaGFuZGxlciBhYm92ZQoJCQkkbGFzdFZDbGlja2VkID0gJCggdGFyZ2V0ICk7CgoJCQkvLyBUcnkgdG8gZmluZCBhIHRhcmdldCBlbGVtZW50IHRvIHdoaWNoIHRoZSBhY3RpdmUgY2xhc3Mgd2lsbCBiZSBhcHBsaWVkCgkJCWlmICggJC5kYXRhKCB0YXJnZXQsICJtb2JpbGUtYnV0dG9uIiApICkgewoJCQkJLy8gSWYgdGhlIGZvcm0gd2lsbCBub3QgYmUgc3VibWl0dGVkIHZpYSBBSkFYLCBkbyBub3QgYWRkIGFjdGl2ZSBjbGFzcwoJCQkJaWYgKCAhZ2V0QWpheEZvcm1EYXRhKCAkKCB0YXJnZXQgKS5jbG9zZXN0KCAiZm9ybSIgKSwgdHJ1ZSApICkgewoJCQkJCXJldHVybjsKCQkJCX0KCQkJCS8vIFdlIHdpbGwgYXBwbHkgdGhlIGFjdGl2ZSBzdGF0ZSB0byB0aGlzIGJ1dHRvbiB3aWRnZXQgLSB0aGUgcGFyZW50CgkJCQkvLyBvZiB0aGUgaW5wdXQgdGhhdCB3YXMgY2xpY2tlZCB3aWxsIGhhdmUgdGhlIGFzc29jaWF0ZWQgZGF0YQoJCQkJaWYgKCB0YXJnZXQucGFyZW50Tm9kZSApIHsKCQkJCQl0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXRhcmdldCA9IGZpbmRDbG9zZXN0TGluayggdGFyZ2V0ICk7CgkJCQlpZiAoICEoIHRhcmdldCAmJiAkLm1vYmlsZS5wYXRoLnBhcnNlVXJsKCB0YXJnZXQuZ2V0QXR0cmlidXRlKCAiaHJlZiIgKSB8fCAiIyIgKS5oYXNoICE9PSAiIyIgKSApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJLy8gVE9ETyB0ZWFjaCAkLm1vYmlsZS5oaWphY2thYmxlIHRvIG9wZXJhdGUgb24gcmF3IGRvbSBlbGVtZW50cyBzbyB0aGUKCQkJCS8vIGxpbmsgd3JhcHBpbmcgY2FuIGJlIGF2b2lkZWQKCQkJCWlmICggISQoIHRhcmdldCApLmpxbUhpamFja2FibGUoKS5sZW5ndGggKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoJCQl9CgoJCQkvLyBBdm9pZCBjYWxsaW5nIC5jbG9zZXN0IGJ5IHVzaW5nIHRoZSBkYXRhIHNldCBkdXJpbmcgLmJ1dHRvbk1hcmt1cCgpCgkJCS8vIExpc3QgaXRlbXMgaGF2ZSB0aGUgYnV0dG9uIGRhdGEgaW4gdGhlIHBhcmVudCBvZiB0aGUgZWxlbWVudCBjbGlja2VkCgkJCWlmICggISF+dGFyZ2V0LmNsYXNzTmFtZS5pbmRleE9mKCAidWktbGluay1pbmhlcml0IiApICkgewoJCQkJaWYgKCB0YXJnZXQucGFyZW50Tm9kZSApIHsKCQkJCQlidG5FbHMgPSAkLmRhdGEoIHRhcmdldC5wYXJlbnROb2RlLCAiYnV0dG9uRWxlbWVudHMiICk7CgkJCQl9CgkJCS8vIE90aGVyd2lzZSwgbG9vayBmb3IgdGhlIGRhdGEgb24gdGhlIHRhcmdldCBpdHNlbGYKCQkJfSBlbHNlIHsKCQkJCWJ0bkVscyA9ICQuZGF0YSggdGFyZ2V0LCAiYnV0dG9uRWxlbWVudHMiICk7CgkJCX0KCQkJLy8gSWYgZm91bmQsIGdyYWIgdGhlIGJ1dHRvbidzIG91dGVyIGVsZW1lbnQKCQkJaWYgKCBidG5FbHMgKSB7CgkJCQl0YXJnZXQgPSBidG5FbHMub3V0ZXI7CgkJCX0gZWxzZSB7CgkJCQluZWVkQ2xvc2VzdCA9IHRydWU7CgkJCX0KCgkJCSRidG4gPSAkKCB0YXJnZXQgKTsKCQkJLy8gSWYgdGhlIG91dGVyIGVsZW1lbnQgd2Fzbid0IGZvdW5kIGJ5IHRoZSBvdXIgaGV1cmlzdGljcywgdXNlIC5jbG9zZXN0KCkKCQkJaWYgKCBuZWVkQ2xvc2VzdCApIHsKCQkJCSRidG4gPSAkYnRuLmNsb3Nlc3QoICIudWktYnRuIiApOwoJCQl9CgoJCQlpZiAoICRidG4ubGVuZ3RoID4gMCAmJgoJCQkJISggJGJ0bi5oYXNDbGFzcyggInVpLXN0YXRlLWRpc2FibGVkIiB8fAoKCQkJCQkvLyBERVBSRUNBVEVEIGFzIG9mIDEuNC4wIC0gcmVtb3ZlIGFmdGVyIDEuNC4wIHJlbGVhc2UKCQkJCQkvLyBvbmx5IHVpLXN0YXRlLWRpc2FibGVkIHNob3VsZCBiZSBwcmVzZW50IHRoZXJlYWZ0ZXIKCQkJCQkkYnRuLmhhc0NsYXNzKCAidWktZGlzYWJsZWQiICkgKSApICkgewoJCQkJJC5tb2JpbGUucmVtb3ZlQWN0aXZlTGlua0NsYXNzKCB0cnVlICk7CgkJCQkkLm1vYmlsZS5hY3RpdmVDbGlja2VkTGluayA9ICRidG47CgkJCQkkLm1vYmlsZS5hY3RpdmVDbGlja2VkTGluay5hZGRDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJfQoJCX0pOwoKCQkvLyBjbGljayByb3V0aW5nIC0gZGlyZWN0IHRvIEhUVFAgb3IgQWpheCwgYWNjb3JkaW5nbHkKCQkkLm1vYmlsZS5kb2N1bWVudC5iaW5kKCAiY2xpY2siLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCWlmICggISQubW9iaWxlLmxpbmtCaW5kaW5nRW5hYmxlZCB8fCBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJdmFyIGxpbmsgPSBmaW5kQ2xvc2VzdExpbmsoIGV2ZW50LnRhcmdldCApLAoJCQkJJGxpbmsgPSAkKCBsaW5rICksCgoJCQkJLy9yZW1vdmUgYWN0aXZlIGxpbmsgY2xhc3MgaWYgZXh0ZXJuYWwgKHRoZW4gaXQgd29uJ3QgYmUgdGhlcmUgaWYgeW91IGNvbWUgYmFjaykKCQkJCWh0dHBDbGVhbnVwID0gZnVuY3Rpb24oKSB7CgkJCQkJd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7ICQubW9iaWxlLnJlbW92ZUFjdGl2ZUxpbmtDbGFzcyggdHJ1ZSApOyB9LCAyMDAgKTsKCQkJCX0sCgkJCQliYXNlVXJsLCBocmVmLAoJCQkJdXNlRGVmYXVsdFVybEhhbmRsaW5nLCBpc0V4dGVybmFsLAoJCQkJdHJhbnNpdGlvbiwgcmV2ZXJzZSwgcm9sZTsKCgkJCS8vIElmIGEgYnV0dG9uIHdhcyBjbGlja2VkLCBjbGVhbiB1cCB0aGUgYWN0aXZlIGNsYXNzIGFkZGVkIGJ5IHZjbGljayBhYm92ZQoJCQlpZiAoICQubW9iaWxlLmFjdGl2ZUNsaWNrZWRMaW5rICYmCgkJCQkkLm1vYmlsZS5hY3RpdmVDbGlja2VkTGlua1sgMCBdID09PSBldmVudC50YXJnZXQucGFyZW50Tm9kZSApIHsKCQkJCWh0dHBDbGVhbnVwKCk7CgkJCX0KCgkJCS8vIElmIHRoZXJlIGlzIG5vIGxpbmsgYXNzb2NpYXRlZCB3aXRoIHRoZSBjbGljayBvciBpdHMgbm90IGEgbGVmdAoJCQkvLyBjbGljayB3ZSB3YW50IHRvIGlnbm9yZSB0aGUgY2xpY2sKCQkJLy8gVE9ETyB0ZWFjaCAkLm1vYmlsZS5oaWphY2thYmxlIHRvIG9wZXJhdGUgb24gcmF3IGRvbSBlbGVtZW50cyBzbyB0aGUgbGluayB3cmFwcGluZwoJCQkvLyBjYW4gYmUgYXZvaWRlZAoJCQlpZiAoICFsaW5rIHx8IGV2ZW50LndoaWNoID4gMSB8fCAhJGxpbmsuanFtSGlqYWNrYWJsZSgpLmxlbmd0aCApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy9pZiB0aGVyZSdzIGEgZGF0YS1yZWw9YmFjayBhdHRyLCBnbyBiYWNrIGluIGhpc3RvcnkKCQkJaWYgKCAkbGluay5pcyggIjpqcW1EYXRhKHJlbD0nYmFjaycpIiApICkgewoJCQkJJC5tb2JpbGUuYmFjaygpOwoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQliYXNlVXJsID0gJC5tb2JpbGUuZ2V0Q2xvc2VzdEJhc2VVcmwoICRsaW5rICk7CgoJCQkvL2dldCBocmVmLCBpZiBkZWZpbmVkLCBvdGhlcndpc2UgZGVmYXVsdCB0byBlbXB0eSBoYXNoCgkJCWhyZWYgPSAkLm1vYmlsZS5wYXRoLm1ha2VVcmxBYnNvbHV0ZSggJGxpbmsuYXR0ciggImhyZWYiICkgfHwgIiMiLCBiYXNlVXJsICk7CgoJCQkvL2lmIGFqYXggaXMgZGlzYWJsZWQsIGV4aXQgZWFybHkKCQkJaWYgKCAhJC5tb2JpbGUuYWpheEVuYWJsZWQgJiYgISQubW9iaWxlLnBhdGguaXNFbWJlZGRlZFBhZ2UoIGhyZWYgKSApIHsKCQkJCWh0dHBDbGVhbnVwKCk7CgkJCQkvL3VzZSBkZWZhdWx0IGNsaWNrIGhhbmRsaW5nCgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIFhYWF9qYmxhczogSWRlYWxseSBsaW5rcyB0byBhcHBsaWNhdGlvbiBwYWdlcyBzaG91bGQgYmUgc3BlY2lmaWVkIGFzCgkJCS8vICAgICAgICAgICAgYW4gdXJsIHRvIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudCB3aXRoIGEgaGFzaCB0aGF0IGlzIGVpdGhlcgoJCQkvLyAgICAgICAgICAgIHRoZSBzaXRlIHJlbGF0aXZlIHBhdGggb3IgaWQgdG8gdGhlIHBhZ2UuIEJ1dCBzb21lIG9mIHRoZQoJCQkvLyAgICAgICAgICAgIGludGVybmFsIGNvZGUgdGhhdCBkeW5hbWljYWxseSBnZW5lcmF0ZXMgc3ViLXBhZ2VzIGZvciBuZXN0ZWQKCQkJLy8gICAgICAgICAgICBsaXN0cyBhbmQgc2VsZWN0IGRpYWxvZ3MsIGp1c3Qgd3JpdGUgYSBoYXNoIGluIHRoZSBsaW5rIHRoZXkKCQkJLy8gICAgICAgICAgICBjcmVhdGUuIFRoaXMgbWVhbnMgdGhlIGFjdHVhbCBVUkwgcGF0aCBpcyBiYXNlZCBvbiB3aGF0ZXZlcgoJCQkvLyAgICAgICAgICAgIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBiYXNlIHRhZyBpcyBhdCB0aGUgdGltZSB0aGlzIGNvZGUKCQkJLy8gICAgICAgICAgICBpcyBjYWxsZWQuIEZvciBub3cgd2UgYXJlIGp1c3QgYXNzdW1pbmcgdGhhdCBhbnkgdXJsIHdpdGggYQoJCQkvLyAgICAgICAgICAgIGhhc2ggaW4gaXQgaXMgYW4gYXBwbGljYXRpb24gcGFnZSByZWZlcmVuY2UuCgkJCWlmICggaHJlZi5zZWFyY2goICIjIiApICE9PSAtMSApIHsKCQkJCWhyZWYgPSBocmVmLnJlcGxhY2UoIC9bXiNdKiMvLCAiIiApOwoJCQkJaWYgKCAhaHJlZiApIHsKCQkJCQkvL2xpbmsgd2FzIGFuIGVtcHR5IGhhc2ggbWVhbnQgcHVyZWx5CgkJCQkJLy9mb3IgaW50ZXJhY3Rpb24sIHNvIHdlIGlnbm9yZSBpdC4KCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCXJldHVybjsKCQkJCX0gZWxzZSBpZiAoICQubW9iaWxlLnBhdGguaXNQYXRoKCBocmVmICkgKSB7CgkJCQkJLy93ZSBoYXZlIGFwYXRoIHNvIG1ha2UgaXQgdGhlIGhyZWYgd2Ugd2FudCB0byBsb2FkLgoJCQkJCWhyZWYgPSAkLm1vYmlsZS5wYXRoLm1ha2VVcmxBYnNvbHV0ZSggaHJlZiwgYmFzZVVybCApOwoJCQkJfSBlbHNlIHsKCQkJCQkvL3dlIGhhdmUgYSBzaW1wbGUgaWQgc28gdXNlIHRoZSBkb2N1bWVudFVybCBhcyBpdHMgYmFzZS4KCQkJCQlocmVmID0gJC5tb2JpbGUucGF0aC5tYWtlVXJsQWJzb2x1dGUoICIjIiArIGhyZWYsIGRvY3VtZW50VXJsLmhyZWZOb0hhc2ggKTsKCQkJCX0KCQkJfQoKCQkJLy8gU2hvdWxkIHdlIGhhbmRsZSB0aGlzIGxpbmssIG9yIGxldCB0aGUgYnJvd3NlciBkZWFsIHdpdGggaXQ/CgkJCXVzZURlZmF1bHRVcmxIYW5kbGluZyA9ICRsaW5rLmlzKCAiW3JlbD0nZXh0ZXJuYWwnXSIgKSB8fCAkbGluay5pcyggIjpqcW1EYXRhKGFqYXg9J2ZhbHNlJykiICkgfHwgJGxpbmsuaXMoICJbdGFyZ2V0XSIgKTsKCgkJCS8vIFNvbWUgZW1iZWRkZWQgYnJvd3NlcnMsIGxpa2UgdGhlIHdlYiB2aWV3IGluIFBob25lIEdhcCwgYWxsb3cgY3Jvc3MtZG9tYWluIFhIUgoJCQkvLyByZXF1ZXN0cyBpZiB0aGUgZG9jdW1lbnQgZG9pbmcgdGhlIHJlcXVlc3Qgd2FzIGxvYWRlZCB2aWEgdGhlIGZpbGU6Ly8gcHJvdG9jb2wuCgkJCS8vIFRoaXMgaXMgdXN1YWxseSB0byBhbGxvdyB0aGUgYXBwbGljYXRpb24gdG8gInBob25lIGhvbWUiIGFuZCBmZXRjaCBhcHAgc3BlY2lmaWMKCQkJLy8gZGF0YS4gV2Ugbm9ybWFsbHkgbGV0IHRoZSBicm93c2VyIGhhbmRsZSBleHRlcm5hbC9jcm9zcy1kb21haW4gdXJscywgYnV0IGlmIHRoZQoJCQkvLyBhbGxvd0Nyb3NzRG9tYWluUGFnZXMgb3B0aW9uIGlzIHRydWUsIHdlIHdpbGwgYWxsb3cgY3Jvc3MtZG9tYWluIGh0dHAvaHR0cHMKCQkJLy8gcmVxdWVzdHMgdG8gZ28gdGhyb3VnaCBvdXIgcGFnZSBsb2FkaW5nIGxvZ2ljLgoKCQkJLy9jaGVjayBmb3IgcHJvdG9jb2wgb3IgcmVsIGFuZCBpdHMgbm90IGFuIGVtYmVkZGVkIHBhZ2UKCQkJLy9UT0RPIG92ZXJsYXAgaW4gbG9naWMgZnJvbSBpc0V4dGVybmFsLCByZWw9ZXh0ZXJuYWwgY2hlY2sgc2hvdWxkIGJlCgkJCS8vICAgICBtb3ZlZCBpbnRvIG1vcmUgY29tcHJlaGVuc2l2ZSBpc0V4dGVybmFsTGluawoJCQlpc0V4dGVybmFsID0gdXNlRGVmYXVsdFVybEhhbmRsaW5nIHx8ICggJC5tb2JpbGUucGF0aC5pc0V4dGVybmFsKCBocmVmICkgJiYgISQubW9iaWxlLnBhdGguaXNQZXJtaXR0ZWRDcm9zc0RvbWFpblJlcXVlc3QoIGRvY3VtZW50VXJsLCBocmVmICkgKTsKCgkJCWlmICggaXNFeHRlcm5hbCApIHsKCQkJCWh0dHBDbGVhbnVwKCk7CgkJCQkvL3VzZSBkZWZhdWx0IGNsaWNrIGhhbmRsaW5nCgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vdXNlIGFqYXgKCQkJdHJhbnNpdGlvbiA9ICRsaW5rLmpxbURhdGEoICJ0cmFuc2l0aW9uIiApOwoJCQlyZXZlcnNlID0gJGxpbmsuanFtRGF0YSggImRpcmVjdGlvbiIgKSA9PT0gInJldmVyc2UiIHx8CgkJCQkJCS8vIGRlcHJlY2F0ZWQgLSByZW1vdmUgYnkgMS4wCgkJCQkJCSRsaW5rLmpxbURhdGEoICJiYWNrIiApOwoKCQkJLy90aGlzIG1heSBuZWVkIHRvIGJlIG1vcmUgc3BlY2lmaWMgYXMgd2UgdXNlIGRhdGEtcmVsIG1vcmUKCQkJcm9sZSA9ICRsaW5rLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyZWwiICkgfHwgdW5kZWZpbmVkOwoKCQkJJC5tb2JpbGUuY2hhbmdlUGFnZSggaHJlZiwgeyB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLCByZXZlcnNlOiByZXZlcnNlLCByb2xlOiByb2xlLCBsaW5rOiAkbGluayB9ICk7CgkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJfSk7CgoJCS8vcHJlZmV0Y2ggcGFnZXMgd2hlbiBhbmNob3JzIHdpdGggZGF0YS1wcmVmZXRjaCBhcmUgZW5jb3VudGVyZWQKCQkkLm1vYmlsZS5kb2N1bWVudC5kZWxlZ2F0ZSggIi51aS1wYWdlIiwgInBhZ2VzaG93LnByZWZldGNoIiwgZnVuY3Rpb24oKSB7CgkJCXZhciB1cmxzID0gW107CgkJCSQoIHRoaXMgKS5maW5kKCAiYTpqcW1EYXRhKHByZWZldGNoKSIgKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdmFyICRsaW5rID0gJCggdGhpcyApLAoJCQkJCXVybCA9ICRsaW5rLmF0dHIoICJocmVmIiApOwoKCQkJCWlmICggdXJsICYmICQuaW5BcnJheSggdXJsLCB1cmxzICkgPT09IC0xICkgewoJCQkJCXVybHMucHVzaCggdXJsICk7CgoJCQkJCSQubW9iaWxlLmxvYWRQYWdlKCB1cmwsIHsgcm9sZTogJGxpbmsuYXR0ciggImRhdGEtIiArICQubW9iaWxlLm5zICsgInJlbCIgKSxwcmVmZXRjaDogdHJ1ZSB9ICk7CgkJCQl9CgkJCX0pOwoJCX0pOwoKCQkvLyBUT0RPIGVuc3VyZSB0aGF0IHRoZSBuYXZpZ2F0ZSBiaW5kaW5nIGluIHRoZSBjb250ZW50IHdpZGdldCBoYXBwZW5zIGF0IHRoZSByaWdodCB0aW1lCgkJJC5tb2JpbGUucGFnZUNvbnRhaW5lci5wYWdlY29udGFpbmVyKCk7CgoJCS8vc2V0IHBhZ2UgbWluLWhlaWdodHMgdG8gYmUgZGV2aWNlIHNwZWNpZmljCgkJJC5tb2JpbGUuZG9jdW1lbnQuYmluZCggInBhZ2VzaG93IiwgJC5tb2JpbGUucmVzZXRBY3RpdmVQYWdlSGVpZ2h0ICk7CgkJJC5tb2JpbGUud2luZG93LmJpbmQoICJ0aHJvdHRsZWRyZXNpemUiLCAkLm1vYmlsZS5yZXNldEFjdGl2ZVBhZ2VIZWlnaHQgKTsKCgl9Oy8vbmF2cmVhZHlEZWZlcnJlZCBkb25lIGNhbGxiYWNrCgoJJCggZnVuY3Rpb24oKSB7IGRvbXJlYWR5RGVmZXJyZWQucmVzb2x2ZSgpOyB9ICk7CgoJJC53aGVuKCBkb21yZWFkeURlZmVycmVkLCAkLm1vYmlsZS5uYXZyZWFkeURlZmVycmVkICkuZG9uZSggZnVuY3Rpb24oKSB7ICQubW9iaWxlLl9yZWdpc3RlckludGVybmFsRXZlbnRzKCk7IH0gKTsKfSkoIGpRdWVyeSApOwoKCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgoJLy8gVE9ETyByZW1vdmUgZGlyZWN0IHJlZmVyZW5jZXMgdG8gJC5tb2JpbGUgYW5kIHByb3BlcnRpZXMsIHdlIHNob3VsZAoJLy8gICAgICBmYXZvciBpbmplY3Rpb24gd2l0aCBwYXJhbXMgdG8gdGhlIGNvbnN0cnVjdG9yCgkkLm1vYmlsZS5UcmFuc2l0aW9uID0gZnVuY3Rpb24oKSB7CgkJdGhpcy5pbml0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCX07CgoJJC5leHRlbmQoJC5tb2JpbGUuVHJhbnNpdGlvbi5wcm90b3R5cGUsIHsKCQl0b1ByZUNsYXNzOiAiIHVpLXBhZ2UtcHJlLWluIiwKCgkJaW5pdDogZnVuY3Rpb24oIG5hbWUsIHJldmVyc2UsICR0bywgJGZyb20gKSB7CgkJCSQuZXh0ZW5kKHRoaXMsIHsKCQkJCW5hbWU6IG5hbWUsCgkJCQlyZXZlcnNlOiByZXZlcnNlLAoJCQkJJHRvOiAkdG8sCgkJCQkkZnJvbTogJGZyb20sCgkJCQlkZWZlcnJlZDogbmV3ICQuRGVmZXJyZWQoKQoJCQl9KTsKCQl9LAoKCQljbGVhbkZyb206IGZ1bmN0aW9uKCkgewoJCQl0aGlzLiRmcm9tCgkJCQkucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmFjdGl2ZVBhZ2VDbGFzcyArICIgb3V0IGluIHJldmVyc2UgIiArIHRoaXMubmFtZSApCgkJCQkuaGVpZ2h0KCAiIiApOwoJCX0sCgoJCS8vIE5PVEUgb3ZlcnJpZGRlbiBieSBjaGlsZCBvYmplY3QgcHJvdG90eXBlcywgbm9vcCdkIGhlcmUgYXMgZGVmYXVsdHMKCQliZWZvcmVEb25lSW46IGZ1bmN0aW9uKCkge30sCgkJYmVmb3JlRG9uZU91dDogZnVuY3Rpb24oKSB7fSwKCQliZWZvcmVTdGFydE91dDogZnVuY3Rpb24oKSB7fSwKCgkJZG9uZUluOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5iZWZvcmVEb25lSW4oKTsKCgkJCXRoaXMuJHRvLnJlbW92ZUNsYXNzKCAib3V0IGluIHJldmVyc2UgIiArIHRoaXMubmFtZSApLmhlaWdodCggIiIgKTsKCgkJCXRoaXMudG9nZ2xlVmlld3BvcnRDbGFzcygpOwoKCQkJLy8gSW4gc29tZSBicm93c2VycyAoaU9TNSksIDNEIHRyYW5zaXRpb25zIGJsb2NrIHRoZSBhYmlsaXR5IHRvIHNjcm9sbCB0byB0aGUgZGVzaXJlZCBsb2NhdGlvbiBkdXJpbmcgdHJhbnNpdGlvbgoJCQkvLyBUaGlzIGVuc3VyZXMgd2UganVtcCB0byB0aGF0IHNwb3QgYWZ0ZXIgdGhlIGZhY3QsIGlmIHdlIGFyZW4ndCB0aGVyZSBhbHJlYWR5LgoJCQlpZiAoICQubW9iaWxlLndpbmRvdy5zY3JvbGxUb3AoKSAhPT0gdGhpcy50b1Njcm9sbCApIHsKCQkJCXRoaXMuc2Nyb2xsUGFnZSgpOwoJCQl9CgkJCWlmICggIXRoaXMuc2VxdWVudGlhbCApIHsKCQkJCXRoaXMuJHRvLmFkZENsYXNzKCAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKTsKCQkJfQoJCQl0aGlzLmRlZmVycmVkLnJlc29sdmUoIHRoaXMubmFtZSwgdGhpcy5yZXZlcnNlLCB0aGlzLiR0bywgdGhpcy4kZnJvbSwgdHJ1ZSApOwoJCX0sCgoJCWRvbmVPdXQ6IGZ1bmN0aW9uKCBzY3JlZW5IZWlnaHQsIHJldmVyc2VDbGFzcywgbm9uZSwgcHJldmVudEZvY3VzICkgewoJCQl0aGlzLmJlZm9yZURvbmVPdXQoKTsKCQkJdGhpcy5zdGFydEluKCBzY3JlZW5IZWlnaHQsIHJldmVyc2VDbGFzcywgbm9uZSwgcHJldmVudEZvY3VzICk7CgkJfSwKCgkJaGlkZUluOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7CgkJCS8vIFByZXZlbnQgZmxpY2tlcmluZyBpbiBwaG9uZWdhcCBjb250YWluZXI6IHNlZSBjb21tZW50cyBhdCAjNDAyNCByZWdhcmRpbmcgaU9TCgkJCXRoaXMuJHRvLmNzcyggInotaW5kZXgiLCAtMTAgKTsKCQkJY2FsbGJhY2suY2FsbCggdGhpcyApOwoJCQl0aGlzLiR0by5jc3MoICJ6LWluZGV4IiwgIiIgKTsKCQl9LAoKCQlzY3JvbGxQYWdlOiBmdW5jdGlvbigpIHsKCQkJLy8gQnkgdXNpbmcgc2Nyb2xsVG8gaW5zdGVhZCBvZiBzaWxlbnRTY3JvbGwsIHdlIGNhbiBrZWVwIHRoaW5ncyBiZXR0ZXIgaW4gb3JkZXIKCQkJLy8gSnVzdCB0byBiZSBwcmVjYXV0aW9zLCBkaXNhYmxlIHNjcm9sbHN0YXJ0IGxpc3RlbmluZyBsaWtlIHNpbGVudFNjcm9sbCB3b3VsZAoJCQkkLmV2ZW50LnNwZWNpYWwuc2Nyb2xsc3RhcnQuZW5hYmxlZCA9IGZhbHNlOwoJCQkvL2lmIHdlIGFyZSBoaWRpbmcgdGhlIHVybCBiYXIgb3IgdGhlIHBhZ2Ugd2FzIHByZXZpb3VzbHkgc2Nyb2xsZWQgc2Nyb2xsIHRvIGhpZGUgb3IgcmV0dXJuIHRvIHBvc2l0aW9uCgkJCWlmICggJC5tb2JpbGUuaGlkZVVybEJhciB8fCB0aGlzLnRvU2Nyb2xsICE9PSAkLm1vYmlsZS5kZWZhdWx0SG9tZVNjcm9sbCApIHsKCQkJCXdpbmRvdy5zY3JvbGxUbyggMCwgdGhpcy50b1Njcm9sbCApOwoJCQl9CgoJCQkvLyByZWVuYWJsZSBzY3JvbGxzdGFydCBsaXN0ZW5pbmcgbGlrZSBzaWxlbnRTY3JvbGwgd291bGQKCQkJc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCQkkLmV2ZW50LnNwZWNpYWwuc2Nyb2xsc3RhcnQuZW5hYmxlZCA9IHRydWU7CgkJCX0sIDE1MCApOwoJCX0sCgoJCXN0YXJ0SW46IGZ1bmN0aW9uKCBzY3JlZW5IZWlnaHQsIHJldmVyc2VDbGFzcywgbm9uZSwgcHJldmVudEZvY3VzICkgewoJCQl0aGlzLmhpZGVJbihmdW5jdGlvbigpIHsKCQkJCXRoaXMuJHRvLmFkZENsYXNzKCAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKyB0aGlzLnRvUHJlQ2xhc3MgKTsKCgkJCQkvLyBTZW5kIGZvY3VzIHRvIHBhZ2UgYXMgaXQgaXMgbm93IGRpc3BsYXk6IGJsb2NrCgkJCQlpZiAoICFwcmV2ZW50Rm9jdXMgKSB7CgkJCQkJJC5tb2JpbGUuZm9jdXNQYWdlKCB0aGlzLiR0byApOwoJCQkJfQoKCQkJCS8vIFNldCB0byBwYWdlIGhlaWdodAoJCQkJdGhpcy4kdG8uaGVpZ2h0KCBzY3JlZW5IZWlnaHQgKyB0aGlzLnRvU2Nyb2xsICk7CgogICAgICAgICAgICAgICAgaWYgKCAhbm9uZSApIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFBhZ2UoKTsKICAgICAgICAgICAgICAgIH0KCQkJfSk7CgoJCQlpZiAoICFub25lICkgewoJCQkJdGhpcy4kdG8uYW5pbWF0aW9uQ29tcGxldGUoICQucHJveHkoZnVuY3Rpb24oKSB7CgkJCQkJdGhpcy5kb25lSW4oKTsKCQkJCX0sIHRoaXMgKSk7CgkJCX0KCgkJCXRoaXMuJHRvCgkJCQkucmVtb3ZlQ2xhc3MoIHRoaXMudG9QcmVDbGFzcyApCgkJCQkuYWRkQ2xhc3MoIHRoaXMubmFtZSArICIgaW4gIiArIHJldmVyc2VDbGFzcyApOwoKCQkJaWYgKCBub25lICkgewoJCQkJdGhpcy5kb25lSW4oKTsKCQkJfQoKCQl9LAoKCQlzdGFydE91dDogZnVuY3Rpb24oIHNjcmVlbkhlaWdodCwgcmV2ZXJzZUNsYXNzLCBub25lICkgewoJCQl0aGlzLmJlZm9yZVN0YXJ0T3V0KCBzY3JlZW5IZWlnaHQsIHJldmVyc2VDbGFzcywgbm9uZSApOwoKCQkJLy8gU2V0IHRoZSBmcm9tIHBhZ2UncyBoZWlnaHQgYW5kIHN0YXJ0IGl0IHRyYW5zaXRpb25pbmcgb3V0CgkJCS8vIE5vdGU6IHNldHRpbmcgYW4gZXhwbGljaXQgaGVpZ2h0IGhlbHBzIGVsaW1pbmF0ZSB0aWxpbmcgaW4gdGhlIHRyYW5zaXRpb25zCgkJCXRoaXMuJGZyb20KCQkJCS5oZWlnaHQoIHNjcmVlbkhlaWdodCArICQubW9iaWxlLndpbmRvdy5zY3JvbGxUb3AoKSApCgkJCQkuYWRkQ2xhc3MoIHRoaXMubmFtZSArICIgb3V0IiArIHJldmVyc2VDbGFzcyApOwoJCX0sCgoJCXRvZ2dsZVZpZXdwb3J0Q2xhc3M6IGZ1bmN0aW9uKCkgewoJCQkkLm1vYmlsZS5wYWdlQ29udGFpbmVyLnRvZ2dsZUNsYXNzKCAidWktbW9iaWxlLXZpZXdwb3J0LXRyYW5zaXRpb25pbmcgdmlld3BvcnQtIiArIHRoaXMubmFtZSApOwoJCX0sCgoJCXRyYW5zaXRpb246IGZ1bmN0aW9uKCkgewoJCQkvLyBOT1RFIG1hbnkgb2YgdGhlc2UgY291bGQgYmUgY2FsY3VsYXRlZC9yZWNvcmRlZCBpbiB0aGUgY29uc3RydWN0b3IsIGl0J3MgbXkKCQkJLy8gICAgICBvcGluaW9uIHRoYXQgYmluZGluZyB0aGVtIGFzIGxhdGUgYXMgcG9zc2libGUgaGFzIHZhbHVlIHdpdGggcmVnYXJkcyB0bwoJCQkvLyAgICAgIGJldHRlciB0cmFuc2l0aW9ucyB3aXRoIGZld2VyIGJ1Z3MuIEllLCBpdCdzIG5vdCBndWFyYW50ZWVkIHRoYXQgdGhlCgkJCS8vICAgICAgb2JqZWN0IHdpbGwgYmUgY3JlYXRlZCBhbmQgdHJhbnNpdGlvbiB3aWxsIGJlIHJ1biBpbW1lZGlhdGVseSBhZnRlciBhcwoJCQkvLyAgICAgIGl0IGlzIHRvZGF5LiBTbyB3ZSB3YWl0IHVudGlsIHRyYW5zaXRpb24gaXMgaW52b2tlZCB0byBnYXRoZXIgdGhlIGZvbGxvd2luZwoJCQl2YXIgcmV2ZXJzZUNsYXNzID0gdGhpcy5yZXZlcnNlID8gIiByZXZlcnNlIiA6ICIiLAoJCQkJc2NyZWVuSGVpZ2h0ID0gJC5tb2JpbGUuZ2V0U2NyZWVuSGVpZ2h0KCksCgkJCQltYXhUcmFuc2l0aW9uT3ZlcnJpZGUgPSAkLm1vYmlsZS5tYXhUcmFuc2l0aW9uV2lkdGggIT09IGZhbHNlICYmICQubW9iaWxlLndpbmRvdy53aWR0aCgpID4gJC5tb2JpbGUubWF4VHJhbnNpdGlvbldpZHRoLAoJCQkJbm9uZSA9ICEkLnN1cHBvcnQuY3NzVHJhbnNpdGlvbnMgfHwgISQuc3VwcG9ydC5jc3NBbmltYXRpb25zIHx8IG1heFRyYW5zaXRpb25PdmVycmlkZSB8fCAhdGhpcy5uYW1lIHx8IHRoaXMubmFtZSA9PT0gIm5vbmUiIHx8IE1hdGgubWF4KCAkLm1vYmlsZS53aW5kb3cuc2Nyb2xsVG9wKCksIHRoaXMudG9TY3JvbGwgKSA+ICQubW9iaWxlLmdldE1heFNjcm9sbEZvclRyYW5zaXRpb24oKTsKCgkJCXRoaXMudG9TY3JvbGwgPSAkLm1vYmlsZS5uYXZpZ2F0ZS5oaXN0b3J5LmdldEFjdGl2ZSgpLmxhc3RTY3JvbGwgfHwgJC5tb2JpbGUuZGVmYXVsdEhvbWVTY3JvbGw7CgkJCXRoaXMudG9nZ2xlVmlld3BvcnRDbGFzcygpOwoKCQkJaWYgKCB0aGlzLiRmcm9tICYmICFub25lICkgewoJCQkJdGhpcy5zdGFydE91dCggc2NyZWVuSGVpZ2h0LCByZXZlcnNlQ2xhc3MsIG5vbmUgKTsKCQkJfSBlbHNlIHsKCQkJCXRoaXMuZG9uZU91dCggc2NyZWVuSGVpZ2h0LCByZXZlcnNlQ2xhc3MsIG5vbmUsIHRydWUgKTsKCQkJfQoKCQkJcmV0dXJuIHRoaXMuZGVmZXJyZWQucHJvbWlzZSgpOwoJCX0KCX0pOwp9KSggalF1ZXJ5LCB0aGlzICk7CgoKKGZ1bmN0aW9uKCAkICkgewoKCSQubW9iaWxlLlNlcmlhbFRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHsKCQl0aGlzLmluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCX07CgoJJC5leHRlbmQoJC5tb2JpbGUuU2VyaWFsVHJhbnNpdGlvbi5wcm90b3R5cGUsICQubW9iaWxlLlRyYW5zaXRpb24ucHJvdG90eXBlLCB7CgkJc2VxdWVudGlhbDogdHJ1ZSwKCgkJYmVmb3JlRG9uZU91dDogZnVuY3Rpb24oKSB7CgkJCWlmICggdGhpcy4kZnJvbSApIHsKCQkJCXRoaXMuY2xlYW5Gcm9tKCk7CgkJCX0KCQl9LAoKCQliZWZvcmVTdGFydE91dDogZnVuY3Rpb24oIHNjcmVlbkhlaWdodCwgcmV2ZXJzZUNsYXNzLCBub25lICkgewoJCQl0aGlzLiRmcm9tLmFuaW1hdGlvbkNvbXBsZXRlKCQucHJveHkoZnVuY3Rpb24oKSB7CgkJCQl0aGlzLmRvbmVPdXQoIHNjcmVlbkhlaWdodCwgcmV2ZXJzZUNsYXNzLCBub25lICk7CgkJCX0sIHRoaXMgKSk7CgkJfQoJfSk7Cgp9KSggalF1ZXJ5ICk7CgoKKGZ1bmN0aW9uKCAkICkgewoKCSQubW9iaWxlLkNvbmN1cnJlbnRUcmFuc2l0aW9uID0gZnVuY3Rpb24oKSB7CgkJdGhpcy5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cgl9OwoKCSQuZXh0ZW5kKCQubW9iaWxlLkNvbmN1cnJlbnRUcmFuc2l0aW9uLnByb3RvdHlwZSwgJC5tb2JpbGUuVHJhbnNpdGlvbi5wcm90b3R5cGUsIHsKCQlzZXF1ZW50aWFsOiBmYWxzZSwKCgkJYmVmb3JlRG9uZUluOiBmdW5jdGlvbigpIHsKCQkJaWYgKCB0aGlzLiRmcm9tICkgewoJCQkJdGhpcy5jbGVhbkZyb20oKTsKCQkJfQoJCX0sCgoJCWJlZm9yZVN0YXJ0T3V0OiBmdW5jdGlvbiggc2NyZWVuSGVpZ2h0LCByZXZlcnNlQ2xhc3MsIG5vbmUgKSB7CgkJCXRoaXMuZG9uZU91dCggc2NyZWVuSGVpZ2h0LCByZXZlcnNlQ2xhc3MsIG5vbmUgKTsKCQl9Cgl9KTsKCn0pKCBqUXVlcnkgKTsKCgooZnVuY3Rpb24oICQgKSB7CgoJLy8gZ2VuZXJhdGUgdGhlIGhhbmRsZXJzIGZyb20gdGhlIGFib3ZlCgl2YXIgZGVmYXVsdEdldE1heFNjcm9sbEZvclRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHsKCQlyZXR1cm4gJC5tb2JpbGUuZ2V0U2NyZWVuSGVpZ2h0KCkgKiAzOwoJfTsKCgkvL3RyYW5zaXRpb24gaGFuZGxlciBkaWN0aW9uYXJ5IGZvciAzcmQgcGFydHkgdHJhbnNpdGlvbnMKCSQubW9iaWxlLnRyYW5zaXRpb25IYW5kbGVycyA9IHsKCQkic2VxdWVudGlhbCI6ICQubW9iaWxlLlNlcmlhbFRyYW5zaXRpb24sCgkJInNpbXVsdGFuZW91cyI6ICQubW9iaWxlLkNvbmN1cnJlbnRUcmFuc2l0aW9uCgl9OwoKCS8vIE1ha2Ugb3VyIHRyYW5zaXRpb24gaGFuZGxlciB0aGUgcHVibGljIGRlZmF1bHQuCgkkLm1vYmlsZS5kZWZhdWx0VHJhbnNpdGlvbkhhbmRsZXIgPSAkLm1vYmlsZS50cmFuc2l0aW9uSGFuZGxlcnMuc2VxdWVudGlhbDsKCgkkLm1vYmlsZS50cmFuc2l0aW9uRmFsbGJhY2tzID0ge307CgoJLy8gSWYgdHJhbnNpdGlvbiBpcyBkZWZpbmVkLCBjaGVjayBpZiBjc3MgM0QgdHJhbnNmb3JtcyBhcmUgc3VwcG9ydGVkLCBhbmQgaWYgbm90LCBpZiBhIGZhbGxiYWNrIGlzIHNwZWNpZmllZAoJJC5tb2JpbGUuX21heWJlRGVncmFkZVRyYW5zaXRpb24gPSBmdW5jdGlvbiggdHJhbnNpdGlvbiApIHsKCQlpZiAoIHRyYW5zaXRpb24gJiYgISQuc3VwcG9ydC5jc3NUcmFuc2Zvcm0zZCAmJiAkLm1vYmlsZS50cmFuc2l0aW9uRmFsbGJhY2tzWyB0cmFuc2l0aW9uIF0gKSB7CgkJCXRyYW5zaXRpb24gPSAkLm1vYmlsZS50cmFuc2l0aW9uRmFsbGJhY2tzWyB0cmFuc2l0aW9uIF07CgkJfQoKCQlyZXR1cm4gdHJhbnNpdGlvbjsKCX07CgoJLy8gU2V0IHRoZSBnZXRNYXhTY3JvbGxGb3JUcmFuc2l0aW9uIHRvIGRlZmF1bHQgaWYgbm8gaW1wbGVtZW50YXRpb24gd2FzIHNldCBieSB1c2VyCgkkLm1vYmlsZS5nZXRNYXhTY3JvbGxGb3JUcmFuc2l0aW9uID0gJC5tb2JpbGUuZ2V0TWF4U2Nyb2xsRm9yVHJhbnNpdGlvbiB8fCBkZWZhdWx0R2V0TWF4U2Nyb2xsRm9yVHJhbnNpdGlvbjsKCn0pKCBqUXVlcnkgKTsKCi8qCiogZmFsbGJhY2sgdHJhbnNpdGlvbiBmb3IgZmxpcCBpbiBub24tM0Qgc3VwcG9ydGluZyBicm93c2VycyAod2hpY2ggdGVuZCB0byBoYW5kbGUgY29tcGxleCB0cmFuc2l0aW9ucyBwb29ybHkgaW4gZ2VuZXJhbAoqLwoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCiQubW9iaWxlLnRyYW5zaXRpb25GYWxsYmFja3MuZmxpcCA9ICJmYWRlIjsKCn0pKCBqUXVlcnksIHRoaXMgKTsKCi8qCiogZmFsbGJhY2sgdHJhbnNpdGlvbiBmb3IgZmxvdyBpbiBub24tM0Qgc3VwcG9ydGluZyBicm93c2VycyAod2hpY2ggdGVuZCB0byBoYW5kbGUgY29tcGxleCB0cmFuc2l0aW9ucyBwb29ybHkgaW4gZ2VuZXJhbAoqLwoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCiQubW9iaWxlLnRyYW5zaXRpb25GYWxsYmFja3MuZmxvdyA9ICJmYWRlIjsKCn0pKCBqUXVlcnksIHRoaXMgKTsKCi8qCiogZmFsbGJhY2sgdHJhbnNpdGlvbiBmb3IgcG9wIGluIG5vbi0zRCBzdXBwb3J0aW5nIGJyb3dzZXJzICh3aGljaCB0ZW5kIHRvIGhhbmRsZSBjb21wbGV4IHRyYW5zaXRpb25zIHBvb3JseSBpbiBnZW5lcmFsCiovCgooZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkgewoKJC5tb2JpbGUudHJhbnNpdGlvbkZhbGxiYWNrcy5wb3AgPSAiZmFkZSI7Cgp9KSggalF1ZXJ5LCB0aGlzICk7CgovKgoqIGZhbGxiYWNrIHRyYW5zaXRpb24gZm9yIHNsaWRlIGluIG5vbi0zRCBzdXBwb3J0aW5nIGJyb3dzZXJzICh3aGljaCB0ZW5kIHRvIGhhbmRsZSBjb21wbGV4IHRyYW5zaXRpb25zIHBvb3JseSBpbiBnZW5lcmFsCiovCgooZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkgewoKLy8gVXNlIHRoZSBzaW11bHRhbmVvdXMgdHJhbnNpdGlvbnMgaGFuZGxlciBmb3Igc2xpZGUgdHJhbnNpdGlvbnMKJC5tb2JpbGUudHJhbnNpdGlvbkhhbmRsZXJzLnNsaWRlID0gJC5tb2JpbGUudHJhbnNpdGlvbkhhbmRsZXJzLnNpbXVsdGFuZW91czsKCi8vIFNldCB0aGUgc2xpZGUgdHJhbnNpdGlvbnMncyBmYWxsYmFjayB0byAiZmFkZSIKJC5tb2JpbGUudHJhbnNpdGlvbkZhbGxiYWNrcy5zbGlkZSA9ICJmYWRlIjsKCn0pKCBqUXVlcnksIHRoaXMgKTsKCi8qCiogZmFsbGJhY2sgdHJhbnNpdGlvbiBmb3Igc2xpZGVkb3duIGluIG5vbi0zRCBzdXBwb3J0aW5nIGJyb3dzZXJzICh3aGljaCB0ZW5kIHRvIGhhbmRsZSBjb21wbGV4IHRyYW5zaXRpb25zIHBvb3JseSBpbiBnZW5lcmFsCiovCgooZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkgewoKJC5tb2JpbGUudHJhbnNpdGlvbkZhbGxiYWNrcy5zbGlkZWRvd24gPSAiZmFkZSI7Cgp9KSggalF1ZXJ5LCB0aGlzICk7CgovKgoqIGZhbGxiYWNrIHRyYW5zaXRpb24gZm9yIHNsaWRlZmFkZSBpbiBub24tM0Qgc3VwcG9ydGluZyBicm93c2VycyAod2hpY2ggdGVuZCB0byBoYW5kbGUgY29tcGxleCB0cmFuc2l0aW9ucyBwb29ybHkgaW4gZ2VuZXJhbAoqLwoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCi8vIFNldCB0aGUgc2xpZGUgdHJhbnNpdGlvbnMncyBmYWxsYmFjayB0byAiZmFkZSIKJC5tb2JpbGUudHJhbnNpdGlvbkZhbGxiYWNrcy5zbGlkZWZhZGUgPSAiZmFkZSI7Cgp9KSggalF1ZXJ5LCB0aGlzICk7CgovKgoqIGZhbGxiYWNrIHRyYW5zaXRpb24gZm9yIHNsaWRldXAgaW4gbm9uLTNEIHN1cHBvcnRpbmcgYnJvd3NlcnMgKHdoaWNoIHRlbmQgdG8gaGFuZGxlIGNvbXBsZXggdHJhbnNpdGlvbnMgcG9vcmx5IGluIGdlbmVyYWwKKi8KCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgokLm1vYmlsZS50cmFuc2l0aW9uRmFsbGJhY2tzLnNsaWRldXAgPSAiZmFkZSI7Cgp9KSggalF1ZXJ5LCB0aGlzICk7CgovKgoqIGZhbGxiYWNrIHRyYW5zaXRpb24gZm9yIHR1cm4gaW4gbm9uLTNEIHN1cHBvcnRpbmcgYnJvd3NlcnMgKHdoaWNoIHRlbmQgdG8gaGFuZGxlIGNvbXBsZXggdHJhbnNpdGlvbnMgcG9vcmx5IGluIGdlbmVyYWwKKi8KCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgokLm1vYmlsZS50cmFuc2l0aW9uRmFsbGJhY2tzLnR1cm4gPSAiZmFkZSI7Cgp9KSggalF1ZXJ5LCB0aGlzICk7CgoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLm1vYmlsZS5kZWdyYWRlSW5wdXRzID0gewoJY29sb3I6IGZhbHNlLAoJZGF0ZTogZmFsc2UsCglkYXRldGltZTogZmFsc2UsCgkiZGF0ZXRpbWUtbG9jYWwiOiBmYWxzZSwKCWVtYWlsOiBmYWxzZSwKCW1vbnRoOiBmYWxzZSwKCW51bWJlcjogZmFsc2UsCglyYW5nZTogIm51bWJlciIsCglzZWFyY2g6ICJ0ZXh0IiwKCXRlbDogZmFsc2UsCgl0aW1lOiBmYWxzZSwKCXVybDogZmFsc2UsCgl3ZWVrOiBmYWxzZQp9OwovLyBCYWNrY29tcGF0IHJlbW92ZSBpbiAxLjUKJC5tb2JpbGUucGFnZS5wcm90b3R5cGUub3B0aW9ucy5kZWdyYWRlSW5wdXRzID0gJC5tb2JpbGUuZGVncmFkZUlucHV0czsKCi8vIEF1dG8gc2VsZi1pbml0IHdpZGdldHMKJC5tb2JpbGUuZGVncmFkZUlucHV0c1dpdGhpbiA9IGZ1bmN0aW9uKCB0YXJnZXQgKSB7CgoJdGFyZ2V0ID0gJCggdGFyZ2V0ICk7CgoJLy8gRGVncmFkZSBpbnB1dHMgdG8gYXZvaWQgcG9vcmx5IGltcGxlbWVudGVkIG5hdGl2ZSBmdW5jdGlvbmFsaXR5Cgl0YXJnZXQuZmluZCggImlucHV0IiApLm5vdCggJC5tb2JpbGUucGFnZS5wcm90b3R5cGUua2VlcE5hdGl2ZVNlbGVjdG9yKCkgKS5lYWNoKGZ1bmN0aW9uKCkgewoJCXZhciBlbGVtZW50ID0gJCggdGhpcyApLAoJCQl0eXBlID0gdGhpcy5nZXRBdHRyaWJ1dGUoICJ0eXBlIiApLAoJCQlvcHRUeXBlID0gJC5tb2JpbGUuZGVncmFkZUlucHV0c1sgdHlwZSBdIHx8ICJ0ZXh0IiwKCQkJaHRtbCwgaGFzVHlwZSwgZmluZHN0ciwgcmVwc3RyOwoKCQlpZiAoICQubW9iaWxlLmRlZ3JhZGVJbnB1dHNbIHR5cGUgXSApIHsKCQkJaHRtbCA9ICQoICI8ZGl2PiIgKS5odG1sKCBlbGVtZW50LmNsb25lKCkgKS5odG1sKCk7CgkJCS8vIEluIElFIGJyb3dzZXJzLCB0aGUgdHlwZSBzb21ldGltZXMgZG9lc24ndCBleGlzdCBpbiB0aGUgY2xvbmVkIG1hcmt1cCwgc28gd2UgcmVwbGFjZSB0aGUgY2xvc2luZyB0YWcgaW5zdGVhZAoJCQloYXNUeXBlID0gaHRtbC5pbmRleE9mKCAiIHR5cGU9IiApID4gLTE7CgkJCWZpbmRzdHIgPSBoYXNUeXBlID8gL1xzK3R5cGU9WyInXT9cdytbJyJdPy8gOiAvXC8/Pi87CgkJCXJlcHN0ciA9ICIgdHlwZT1cIiIgKyBvcHRUeXBlICsgIlwiIGRhdGEtIiArICQubW9iaWxlLm5zICsgInR5cGU9XCIiICsgdHlwZSArICJcIiIgKyAoIGhhc1R5cGUgPyAiIiA6ICI+IiApOwoKCQkJZWxlbWVudC5yZXBsYWNlV2l0aCggaHRtbC5yZXBsYWNlKCBmaW5kc3RyLCByZXBzdHIgKSApOwoJCX0KCX0pOwoKfTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS5wYWdlIiwgJC5tb2JpbGUucGFnZSwgewoJb3B0aW9uczogewoKCQkvLyBBY2NlcHRzIGxlZnQsIHJpZ2h0IGFuZCBub25lCgkJY2xvc2VCdG46ICJsZWZ0IiwKCQljbG9zZUJ0blRleHQ6ICJDbG9zZSIsCgkJb3ZlcmxheVRoZW1lOiAiYSIsCgkJY29ybmVyczogdHJ1ZSwKCQlkaWFsb2c6IGZhbHNlCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX3N1cGVyKCk7CgkJaWYgKCB0aGlzLm9wdGlvbnMuZGlhbG9nICkgewoKCQkJJC5leHRlbmQoIHRoaXMsIHsKCQkJCV9pbm5lcjogdGhpcy5lbGVtZW50LmNoaWxkcmVuKCksCgkJCQlfaGVhZGVyQ2xvc2VCdXR0b246IG51bGwKCQkJfSk7CgoJCQlpZiAoICF0aGlzLm9wdGlvbnMuZW5oYW5jZWQgKSB7CgkJCQl0aGlzLl9zZXRDbG9zZUJ0biggdGhpcy5vcHRpb25zLmNsb3NlQnRuICk7CgkJCX0KCQl9Cgl9LAoKCV9lbmhhbmNlOiBmdW5jdGlvbigpIHsKCQl0aGlzLl9zdXBlcigpOwoKCQkvLyBDbGFzcyB0aGUgbWFya3VwIGZvciBkaWFsb2cgc3R5bGluZyBhbmQgd3JhcCBpbnRlcmlvcgoJCWlmICggdGhpcy5vcHRpb25zLmRpYWxvZyApIHsKCQkJdGhpcy5lbGVtZW50LmFkZENsYXNzKCAidWktZGlhbG9nIiApCgkJCQkud3JhcElubmVyKCAkKCAiPGRpdi8+IiwgewoKCQkJCQkvLyBBUklBIHJvbGUKCQkJCQkicm9sZSIgOiAiZGlhbG9nIiwKCQkJCQkiY2xhc3MiIDogInVpLWRpYWxvZy1jb250YWluIHVpLW92ZXJsYXktc2hhZG93IiArCgkJCQkJCSggdGhpcy5vcHRpb25zLmNvcm5lcnMgPyAiIHVpLWNvcm5lci1hbGwiIDogIiIgKQoJCQkJfSkpOwoJCX0KCX0sCgoJX3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCXZhciBjbG9zZUJ1dHRvbkxvY2F0aW9uLCBjbG9zZUJ1dHRvblRleHQsCgkJCWN1cnJlbnRPcHRzID0gdGhpcy5vcHRpb25zOwoKCQlpZiAoIG9wdGlvbnMuY29ybmVycyAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLl9pbm5lci50b2dnbGVDbGFzcyggInVpLWNvcm5lci1hbGwiLCAhIW9wdGlvbnMuY29ybmVycyApOwoJCX0KCgkJaWYgKCBvcHRpb25zLm92ZXJsYXlUaGVtZSAhPT0gdW5kZWZpbmVkICkgewoJCQlpZiAoICQubW9iaWxlLmFjdGl2ZVBhZ2VbIDAgXSA9PT0gdGhpcy5lbGVtZW50WyAwIF0gKSB7CgkJCQljdXJyZW50T3B0cy5vdmVybGF5VGhlbWUgPSBvcHRpb25zLm92ZXJsYXlUaGVtZTsKCQkJCXRoaXMuX2hhbmRsZVBhZ2VCZWZvcmVTaG93KCk7CgkJCX0KCQl9CgoJCWlmICggb3B0aW9ucy5jbG9zZUJ0blRleHQgIT09IHVuZGVmaW5lZCApIHsKCQkJY2xvc2VCdXR0b25Mb2NhdGlvbiA9IGN1cnJlbnRPcHRzLmNsb3NlQnRuOwoJCQljbG9zZUJ1dHRvblRleHQgPSBvcHRpb25zLmNsb3NlQnRuVGV4dDsKCQl9CgoJCWlmICggb3B0aW9ucy5jbG9zZUJ0biAhPT0gdW5kZWZpbmVkICkgewoJCQljbG9zZUJ1dHRvbkxvY2F0aW9uID0gb3B0aW9ucy5jbG9zZUJ0bjsKCQl9CgoJCWlmICggY2xvc2VCdXR0b25Mb2NhdGlvbiApIHsKCQkJdGhpcy5fc2V0Q2xvc2VCdG4oIGNsb3NlQnV0dG9uTG9jYXRpb24sIGNsb3NlQnV0dG9uVGV4dCApOwoJCX0KCgkJdGhpcy5fc3VwZXIoIG9wdGlvbnMgKTsKCX0sCgoJX2hhbmRsZVBhZ2VCZWZvcmVTaG93OiBmdW5jdGlvbiAoKSB7CgkJaWYgKCB0aGlzLm9wdGlvbnMub3ZlcmxheVRoZW1lICYmIHRoaXMub3B0aW9ucy5kaWFsb2cgKSB7CgkJCXRoaXMucmVtb3ZlQ29udGFpbmVyQmFja2dyb3VuZCgpOwoJCQl0aGlzLnNldENvbnRhaW5lckJhY2tncm91bmQoIHRoaXMub3B0aW9ucy5vdmVybGF5VGhlbWUgKTsKCQl9IGVsc2UgewoJCQl0aGlzLl9zdXBlcigpOwoJCX0KCX0sCgoJX3NldENsb3NlQnRuOiBmdW5jdGlvbiggbG9jYXRpb24sIHRleHQgKSB7CgkJdmFyIGRzdCwKCQkJYnRuID0gdGhpcy5faGVhZGVyQ2xvc2VCdXR0b247CgoJCS8vIFNhbml0aXplIHZhbHVlCgkJbG9jYXRpb24gPSAibGVmdCIgPT09IGxvY2F0aW9uID8gImxlZnQiIDogInJpZ2h0IiA9PT0gbG9jYXRpb24gPyAicmlnaHQiIDogIm5vbmUiOwoKCQlpZiAoICJub25lIiA9PT0gbG9jYXRpb24gKSB7CgkJCWlmICggYnRuICkgewoJCQkJYnRuLnJlbW92ZSgpOwoJCQkJYnRuID0gbnVsbDsKCQkJfQoJCX0gZWxzZSBpZiAoIGJ0biApIHsKCQkJYnRuLnJlbW92ZUNsYXNzKCAidWktYnRuLWxlZnQgdWktYnRuLXJpZ2h0IiApLmFkZENsYXNzKCAidWktYnRuLSIgKyBsb2NhdGlvbiApOwoJCQlpZiAoIHRleHQgKSB7CgkJCQlidG4udGV4dCggdGV4dCApOwoJCQl9CgkJfSBlbHNlIHsKCQkJZHN0ID0gdGhpcy5faW5uZXIuZmluZCggIjpqcW1EYXRhKHJvbGU9J2hlYWRlcicpIiApLmZpcnN0KCk7CgkJCWJ0biA9ICQoICI8YT48L2E+IiwgewoJCQkJCSJocmVmIjogIiMiLAoJCQkJCSJjbGFzcyI6ICJ1aS1idG4gdWktY29ybmVyLWFsbCB1aS1pY29uLWRlbGV0ZSB1aS1idG4taWNvbi1ub3RleHQgdWktYnRuLSIgKyBsb2NhdGlvbgoJCQkJfSkKCQkJCS5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAicmVsIiwgImJhY2siICkKCQkJCS50ZXh0KCB0ZXh0IHx8IHRoaXMub3B0aW9ucy5jbG9zZUJ0blRleHQgfHwgIiIgKQoJCQkJLnByZXBlbmRUbyggZHN0ICk7CgkJCXRoaXMuX29uKCBidG4sIHsgY2xpY2s6ICJjbG9zZSIgfSApOwoJCX0KCgkJdGhpcy5faGVhZGVyQ2xvc2VCdXR0b24gPSBidG47Cgl9Cn0pOwoKfSkoIGpRdWVyeSwgdGhpcyApOwoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLmRpYWxvZyIsIHsKCW9wdGlvbnM6IHsKCgkJLy8gQWNjZXB0cyBsZWZ0LCByaWdodCBhbmQgbm9uZQoJCWNsb3NlQnRuOiAibGVmdCIsCgkJY2xvc2VCdG5UZXh0OiAiQ2xvc2UiLAoJCW92ZXJsYXlUaGVtZTogImEiLAoJCWNvcm5lcnM6IHRydWUKCX0sCgoJLy8gT3ZlcnJpZGUgdGhlIHRoZW1lIHNldCBieSB0aGUgcGFnZSBwbHVnaW4gb24gcGFnZXNob3cKCV9oYW5kbGVQYWdlQmVmb3JlU2hvdzogZnVuY3Rpb24oKSB7CgkJdGhpcy5faXNDbG9zZWFibGUgPSB0cnVlOwoJCWlmICggdGhpcy5vcHRpb25zLm92ZXJsYXlUaGVtZSApIHsKCQkJdGhpcy5lbGVtZW50CgkJCQkucGFnZSggInJlbW92ZUNvbnRhaW5lckJhY2tncm91bmQiICkKCQkJCS5wYWdlKCAic2V0Q29udGFpbmVyQmFja2dyb3VuZCIsIHRoaXMub3B0aW9ucy5vdmVybGF5VGhlbWUgKTsKCQl9Cgl9LAoKCV9oYW5kbGVQYWdlQmVmb3JlSGlkZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5faXNDbG9zZWFibGUgPSBmYWxzZTsKCX0sCgoJLy8gY2xpY2sgYW5kIHN1Ym1pdCBldmVudHM6CgkvLyAtIGNsaWNrcyBhbmQgc3VibWl0cyBzaG91bGQgdXNlIHRoZSBjbG9zaW5nIHRyYW5zaXRpb24gdGhhdCB0aGUgZGlhbG9nCgkvLyAgIG9wZW5lZCB3aXRoIHVubGVzcyBhIGRhdGEtdHJhbnNpdGlvbiBpcyBzcGVjaWZpZWQgb24gdGhlIGxpbmsvZm9ybQoJLy8gLSBpZiB0aGUgY2xpY2sgd2FzIG9uIHRoZSBjbG9zZSBidXR0b24sIG9yIHRoZSBsaW5rIGhhcyBhIGRhdGEtcmVsPSJiYWNrIgoJLy8gICBpdCdsbCBnbyBiYWNrIGluIGhpc3RvcnkgbmF0dXJhbGx5CglfaGFuZGxlVkNsaWNrU3VibWl0OiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIGF0dHJzLAoJCQkkdGFyZ2V0ID0gJCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdCggZXZlbnQudHlwZSA9PT0gInZjbGljayIgPyAiYSIgOiAiZm9ybSIgKTsKCgkJaWYgKCAkdGFyZ2V0Lmxlbmd0aCAmJiAhJHRhcmdldC5qcW1EYXRhKCAidHJhbnNpdGlvbiIgKSApIHsKCQkJYXR0cnMgPSB7fTsKCQkJYXR0cnNbICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJ0cmFuc2l0aW9uIiBdID0KCQkJCSggJC5tb2JpbGUubmF2aWdhdGUuaGlzdG9yeS5nZXRBY3RpdmUoKSB8fCB7fSApWyAidHJhbnNpdGlvbiIgXSB8fAoJCQkJJC5tb2JpbGUuZGVmYXVsdERpYWxvZ1RyYW5zaXRpb247CgkJCWF0dHJzWyAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAiZGlyZWN0aW9uIiBdID0gInJldmVyc2UiOwoJCQkkdGFyZ2V0LmF0dHIoIGF0dHJzICk7CgkJfQoJfSwKCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl2YXIgZWxlbSA9IHRoaXMuZWxlbWVudCwKCQkJb3B0cyA9IHRoaXMub3B0aW9uczsKCgkJLy8gQ2xhc3MgdGhlIG1hcmt1cCBmb3IgZGlhbG9nIHN0eWxpbmcgYW5kIHdyYXAgaW50ZXJpb3IKCQllbGVtLmFkZENsYXNzKCAidWktZGlhbG9nIiApCgkJCS53cmFwSW5uZXIoICQoICI8ZGl2Lz4iLCB7CgoJCQkJLy8gQVJJQSByb2xlCgkJCQkicm9sZSIgOiAiZGlhbG9nIiwKCQkJCSJjbGFzcyIgOiAidWktZGlhbG9nLWNvbnRhaW4gdWktb3ZlcmxheS1zaGFkb3ciICsKCQkJCQkoICEhb3B0cy5jb3JuZXJzID8gIiB1aS1jb3JuZXItYWxsIiA6ICIiICkKCQkJfSkpOwoKCQkkLmV4dGVuZCggdGhpcywgewoJCQlfaXNDbG9zZWFibGU6IGZhbHNlLAoJCQlfaW5uZXI6IGVsZW0uY2hpbGRyZW4oKSwKCQkJX2hlYWRlckNsb3NlQnV0dG9uOiBudWxsCgkJfSk7CgoJCXRoaXMuX29uKCBlbGVtLCB7CgkJCXZjbGljazogIl9oYW5kbGVWQ2xpY2tTdWJtaXQiLAoJCQlzdWJtaXQ6ICJfaGFuZGxlVkNsaWNrU3VibWl0IiwKCQkJcGFnZWJlZm9yZXNob3c6ICJfaGFuZGxlUGFnZUJlZm9yZVNob3ciLAoJCQlwYWdlYmVmb3JlaGlkZTogIl9oYW5kbGVQYWdlQmVmb3JlSGlkZSIKCQl9KTsKCgkJdGhpcy5fc2V0Q2xvc2VCdG4oIG9wdHMuY2xvc2VCdG4gKTsKCX0sCgoJX3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCXZhciBjbG9zZUJ1dHRvbkxvY2F0aW9uLCBjbG9zZUJ1dHRvblRleHQsCgkJCWN1cnJlbnRPcHRzID0gdGhpcy5vcHRpb25zOwoKCQlpZiAoIG9wdGlvbnMuY29ybmVycyAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLl9pbm5lci50b2dnbGVDbGFzcyggInVpLWNvcm5lci1hbGwiLCAhIW9wdGlvbnMuY29ybmVycyApOwoJCX0KCgkJaWYgKCBvcHRpb25zLm92ZXJsYXlUaGVtZSAhPT0gdW5kZWZpbmVkICkgewoJCQlpZiAoICQubW9iaWxlLmFjdGl2ZVBhZ2VbIDAgXSA9PT0gdGhpcy5lbGVtZW50WyAwIF0gKSB7CgkJCQljdXJyZW50T3B0cy5vdmVybGF5VGhlbWUgPSBvcHRpb25zLm92ZXJsYXlUaGVtZTsKCQkJCXRoaXMuX2hhbmRsZVBhZ2VCZWZvcmVTaG93KCk7CgkJCX0KCQl9CgoJCWlmICggb3B0aW9ucy5jbG9zZUJ0blRleHQgIT09IHVuZGVmaW5lZCApIHsKCQkJY2xvc2VCdXR0b25Mb2NhdGlvbiA9IGN1cnJlbnRPcHRzLmNsb3NlQnRuOwoJCQljbG9zZUJ1dHRvblRleHQgPSBvcHRpb25zLmNsb3NlQnRuVGV4dDsKCQl9CgoJCWlmICggb3B0aW9ucy5jbG9zZUJ0biAhPT0gdW5kZWZpbmVkICkgewoJCQljbG9zZUJ1dHRvbkxvY2F0aW9uID0gb3B0aW9ucy5jbG9zZUJ0bjsKCQl9CgoJCWlmICggY2xvc2VCdXR0b25Mb2NhdGlvbiApIHsKCQkJdGhpcy5fc2V0Q2xvc2VCdG4oIGNsb3NlQnV0dG9uTG9jYXRpb24sIGNsb3NlQnV0dG9uVGV4dCApOwoJCX0KCgkJdGhpcy5fc3VwZXIoIG9wdGlvbnMgKTsKCX0sCgoJX3NldENsb3NlQnRuOiBmdW5jdGlvbiggbG9jYXRpb24sIHRleHQgKSB7CgkJdmFyIGRzdCwKCQkJYnRuID0gdGhpcy5faGVhZGVyQ2xvc2VCdXR0b247CgoJCS8vIFNhbml0aXplIHZhbHVlCgkJbG9jYXRpb24gPSAibGVmdCIgPT09IGxvY2F0aW9uID8gImxlZnQiIDogInJpZ2h0IiA9PT0gbG9jYXRpb24gPyAicmlnaHQiIDogIm5vbmUiOwoKCQlpZiAoICJub25lIiA9PT0gbG9jYXRpb24gKSB7CgkJCWlmICggYnRuICkgewoJCQkJYnRuLnJlbW92ZSgpOwoJCQkJYnRuID0gbnVsbDsKCQkJfQoJCX0gZWxzZSBpZiAoIGJ0biApIHsKCQkJYnRuLnJlbW92ZUNsYXNzKCAidWktYnRuLWxlZnQgdWktYnRuLXJpZ2h0IiApLmFkZENsYXNzKCAidWktYnRuLSIgKyBsb2NhdGlvbiApOwoJCQlpZiAoIHRleHQgKSB7CgkJCQlidG4udGV4dCggdGV4dCApOwoJCQl9CgkJfSBlbHNlIHsKCQkJZHN0ID0gdGhpcy5faW5uZXIuZmluZCggIjpqcW1EYXRhKHJvbGU9J2hlYWRlcicpIiApLmZpcnN0KCk7CgkJCWJ0biA9ICQoICI8YT48L2E+IiwgewoJCQkJCSJyb2xlIjogImJ1dHRvbiIsCgkJCQkJImhyZWYiOiAiIyIsCgkJCQkJImNsYXNzIjogInVpLWJ0biB1aS1jb3JuZXItYWxsIHVpLWljb24tZGVsZXRlIHVpLWJ0bi1pY29uLW5vdGV4dCB1aS1idG4tIiArIGxvY2F0aW9uCgkJCQl9KQoJCQkJLnRleHQoIHRleHQgfHwgdGhpcy5vcHRpb25zLmNsb3NlQnRuVGV4dCB8fCAiIiApCgkJCQkucHJlcGVuZFRvKCBkc3QgKTsKCQkJdGhpcy5fb24oIGJ0biwgeyBjbGljazogImNsb3NlIiB9ICk7CgkJfQoKCQl0aGlzLl9oZWFkZXJDbG9zZUJ1dHRvbiA9IGJ0bjsKCX0sCgoJLy8gQ2xvc2UgbWV0aG9kIGdvZXMgYmFjayBpbiBoaXN0b3J5CgljbG9zZTogZnVuY3Rpb24oKSB7CgkJdmFyIGhpc3QgPSAkLm1vYmlsZS5uYXZpZ2F0ZS5oaXN0b3J5OwoKCQlpZiAoIHRoaXMuX2lzQ2xvc2VhYmxlICkgewoJCQl0aGlzLl9pc0Nsb3NlYWJsZSA9IGZhbHNlOwoJCQkvLyBJZiB0aGUgaGFzaCBsaXN0ZW5pbmcgaXMgZW5hYmxlZCBhbmQgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIHByZWNlZGluZyBoaXN0b3J5CgkJCS8vIGVudHJ5IGl0J3Mgb2sgdG8gZ28gYmFjay4gSW5pdGlhbCBwYWdlcyB3aXRoIHRoZSBkaWFsb2cgaGFzaCBzdGF0ZSBhcmUgYW4gZXhhbXBsZQoJCQkvLyB3aGVyZSB0aGUgc3RhY2sgY2hlY2sgaXMgbmVjZXNzYXJ5CgkJCWlmICggJC5tb2JpbGUuaGFzaExpc3RlbmluZ0VuYWJsZWQgJiYgaGlzdC5hY3RpdmVJbmRleCA+IDAgKSB7CgkJCQkkLm1vYmlsZS5iYWNrKCk7CgkJCX0gZWxzZSB7CgkJCQkkLm1vYmlsZS5wYWdlQ29udGFpbmVyLnBhZ2Vjb250YWluZXIoICJiYWNrIiApOwoJCQl9CgkJfQoJfQp9KTsKCn0pKCBqUXVlcnksIHRoaXMgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIHJJbml0aWFsTGV0dGVyID0gLyhbQS1aXSkvZzsKCiQud2lkZ2V0KCAibW9iaWxlLmNvbGxhcHNpYmxlIiwgewoJb3B0aW9uczogewoJCWVuaGFuY2VkOiBmYWxzZSwKCQlleHBhbmRDdWVUZXh0OiBudWxsLAoJCWNvbGxhcHNlQ3VlVGV4dDogbnVsbCwKCQljb2xsYXBzZWQ6IHRydWUsCgkJaGVhZGluZzogImgxLGgyLGgzLGg0LGg1LGg2LGxlZ2VuZCIsCgkJY29sbGFwc2VkSWNvbjogbnVsbCwKCQlleHBhbmRlZEljb246IG51bGwsCgkJaWNvbnBvczogbnVsbCwKCQl0aGVtZTogbnVsbCwKCQljb250ZW50VGhlbWU6IG51bGwsCgkJaW5zZXQ6IG51bGwsCgkJY29ybmVyczogbnVsbCwKCQltaW5pOiBudWxsCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciBlbGVtID0gdGhpcy5lbGVtZW50LAoJCQl1aSA9IHsKCQkJCWFjY29yZGlvbjogZWxlbQoJCQkJCS5jbG9zZXN0KCAiOmpxbURhdGEocm9sZT0nY29sbGFwc2libGUtc2V0JykiICsKCQkJCQkJKCAkLm1vYmlsZS5jb2xsYXBzaWJsZXNldCA/ICIsIDptb2JpbGUtY29sbGFwc2libGVzZXQiIDogIiIgKSApCgkJCQkJLmFkZENsYXNzKCAidWktY29sbGFwc2libGUtc2V0IiApCgkJCX07CgoJCSQuZXh0ZW5kKCB0aGlzLCB7CgkJCV91aTogdWkKCQl9KTsKCgkJaWYgKCB0aGlzLm9wdGlvbnMuZW5oYW5jZWQgKSB7CgkJCXVpLmhlYWRpbmcgPSAkKCAiLnVpLWNvbGxhcHNpYmxlLWhlYWRpbmciLCB0aGlzLmVsZW1lbnRbIDAgXSApOwoJCQl1aS5jb250ZW50ID0gdWkuaGVhZGluZy5uZXh0KCk7CgkJCXVpLmFuY2hvciA9ICQoICJhIiwgdWkuaGVhZGluZ1sgMCBdICkuZmlyc3QoKTsKCQkJdWkuc3RhdHVzID0gdWkuYW5jaG9yLmNoaWxkcmVuKCAiLnVpLWNvbGxhcHNpYmxlLWhlYWRpbmctc3RhdHVzIiApOwoJCX0gZWxzZSB7CgkJCXRoaXMuX2VuaGFuY2UoIGVsZW0sIHVpICk7CgkJfQoKCQl0aGlzLl9vbiggdWkuaGVhZGluZywgewoJCQkidGFwIjogZnVuY3Rpb24oKSB7CgkJCQl1aS5oZWFkaW5nLmZpbmQoICJhIiApLmZpcnN0KCkuYWRkQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJCX0sCgoJCQkiY2xpY2siOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQl0aGlzLl9oYW5kbGVFeHBhbmRDb2xsYXBzZSggIXVpLmhlYWRpbmcuaGFzQ2xhc3MoICJ1aS1jb2xsYXBzaWJsZS1oZWFkaW5nLWNvbGxhcHNlZCIgKSApOwoJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCWV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwoJCQl9CgkJfSk7Cgl9LAoKCS8vIEFkanVzdCB0aGUga2V5cyBpbnNpZGUgb3B0aW9ucyBmb3IgaW5oZXJpdGVkIHZhbHVlcwoJX2dldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCXZhciBrZXksCgkJCWFjY29yZGlvbiA9IHRoaXMuX3VpLmFjY29yZGlvbiwKCQkJYWNjb3JkaW9uV2lkZ2V0ID0gdGhpcy5fdWkuYWNjb3JkaW9uV2lkZ2V0OwoKCQkvLyBDb3B5IG9wdGlvbnMKCQlvcHRpb25zID0gJC5leHRlbmQoIHt9LCBvcHRpb25zICk7CgoJCWlmICggYWNjb3JkaW9uLmxlbmd0aCAmJiAhYWNjb3JkaW9uV2lkZ2V0ICkgewoJCQl0aGlzLl91aS5hY2NvcmRpb25XaWRnZXQgPQoJCQlhY2NvcmRpb25XaWRnZXQgPSBhY2NvcmRpb24uZGF0YSggIm1vYmlsZS1jb2xsYXBzaWJsZXNldCIgKTsKCQl9CgoJCWZvciAoIGtleSBpbiBvcHRpb25zICkgewoKCQkJLy8gUmV0cmlldmUgdGhlIG9wdGlvbiB2YWx1ZSBmaXJzdCBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgaW4gYW5kLCBpZgoJCQkvLyBudWxsLCBmcm9tIHRoZSBwYXJlbnQgYWNjb3JkaW9uIG9yLCBpZiB0aGF0J3MgbnVsbCB0b28sIG9yIGlmIHRoZXJlJ3Mgbm8KCQkJLy8gcGFyZW50IGFjY29yZGlvbiwgdGhlbiBmcm9tIHRoZSBkZWZhdWx0cy4KCQkJb3B0aW9uc1sga2V5IF0gPQoJCQkJKCBvcHRpb25zWyBrZXkgXSAhPSBudWxsICkgPyBvcHRpb25zWyBrZXkgXSA6CgkJCQkoIGFjY29yZGlvbldpZGdldCApID8gYWNjb3JkaW9uV2lkZ2V0Lm9wdGlvbnNbIGtleSBdIDoKCQkJCWFjY29yZGlvbi5sZW5ndGggPyAkLm1vYmlsZS5nZXRBdHRyaWJ1dGUoIGFjY29yZGlvblsgMCBdLAoJCQkJCWtleS5yZXBsYWNlKCBySW5pdGlhbExldHRlciwgIi0kMSIgKS50b0xvd2VyQ2FzZSgpICk6CgkJCQludWxsOwoKCQkJaWYgKCBudWxsID09IG9wdGlvbnNbIGtleSBdICkgewoJCQkJb3B0aW9uc1sga2V5IF0gPSAkLm1vYmlsZS5jb2xsYXBzaWJsZS5kZWZhdWx0c1sga2V5IF07CgkJCX0KCQl9CgoJCXJldHVybiBvcHRpb25zOwoJfSwKCglfdGhlbWVDbGFzc0Zyb21PcHRpb246IGZ1bmN0aW9uKCBwcmVmaXgsIHZhbHVlICkgewoJCXJldHVybiAoIHZhbHVlID8gKCB2YWx1ZSA9PT0gIm5vbmUiID8gIiIgOiBwcmVmaXggKyB2YWx1ZSApIDogIiIgKTsKCX0sCgoJX2VuaGFuY2U6IGZ1bmN0aW9uKCBlbGVtLCB1aSApIHsKCQl2YXIgaWNvbmNsYXNzLAoJCQlvcHRzID0gdGhpcy5fZ2V0T3B0aW9ucyggdGhpcy5vcHRpb25zICksCgkJCWNvbnRlbnRUaGVtZUNsYXNzID0gdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oICJ1aS1ib2R5LSIsIG9wdHMuY29udGVudFRoZW1lICk7CgoJCWVsZW0uYWRkQ2xhc3MoICJ1aS1jb2xsYXBzaWJsZSAiICsKCQkJKCBvcHRzLmluc2V0ID8gInVpLWNvbGxhcHNpYmxlLWluc2V0ICIgOiAiIiApICsKCQkJKCBvcHRzLmluc2V0ICYmIG9wdHMuY29ybmVycyA/ICJ1aS1jb3JuZXItYWxsICIgOiAiIiApICsKCQkJKCBjb250ZW50VGhlbWVDbGFzcyA/ICJ1aS1jb2xsYXBzaWJsZS10aGVtZWQtY29udGVudCAiIDogIiIgKSApOwoJCXVpLm9yaWdpbmFsSGVhZGluZyA9IGVsZW0uY2hpbGRyZW4oIHRoaXMub3B0aW9ucy5oZWFkaW5nICkuZmlyc3QoKSwKCQl1aS5jb250ZW50ID0gZWxlbQoJCQkud3JhcElubmVyKCAiPGRpdiAiICsKCQkJCSJjbGFzcz0ndWktY29sbGFwc2libGUtY29udGVudCAiICsKCQkJCWNvbnRlbnRUaGVtZUNsYXNzICsgIic+PC9kaXY+IiApCgkJCS5jaGlsZHJlbiggIi51aS1jb2xsYXBzaWJsZS1jb250ZW50IiApLAoJCXVpLmhlYWRpbmcgPSB1aS5vcmlnaW5hbEhlYWRpbmc7CgoJCS8vIFJlcGxhY2UgY29sbGFwc2libGVIZWFkaW5nIGlmIGl0J3MgYSBsZWdlbmQKCQlpZiAoIHVpLmhlYWRpbmcuaXMoICJsZWdlbmQiICkgKSB7CgkJCXVpLmhlYWRpbmcgPSAkKCAiPGRpdiByb2xlPSdoZWFkaW5nJz4iKyB1aS5oZWFkaW5nLmh0bWwoKSArIjwvZGl2PiIgKTsKCQkJdWkucGxhY2Vob2xkZXIgPSAkKCAiPGRpdj48IS0tIHBsYWNlaG9sZGVyIGZvciBsZWdlbmQgLS0+PC9kaXY+IiApLmluc2VydEJlZm9yZSggdWkub3JpZ2luYWxIZWFkaW5nICk7CgkJCXVpLm9yaWdpbmFsSGVhZGluZy5yZW1vdmUoKTsKCQl9CgoJCWljb25jbGFzcyA9ICggb3B0cy5jb2xsYXBzZWQgPyAoIG9wdHMuY29sbGFwc2VkSWNvbiA/ICJ1aS1pY29uLSIgKyBvcHRzLmNvbGxhcHNlZEljb24gOiAiIiApOgoJCQkoIG9wdHMuZXhwYW5kZWRJY29uID8gInVpLWljb24tIiArIG9wdHMuZXhwYW5kZWRJY29uIDogIiIgKSApOwoKCQl1aS5zdGF0dXMgPSAkKCAiPHNwYW4gY2xhc3M9J3VpLWNvbGxhcHNpYmxlLWhlYWRpbmctc3RhdHVzJz48L3NwYW4+IiApOwoJCXVpLmFuY2hvciA9IHVpLmhlYWRpbmcKCQkJLmRldGFjaCgpCgkJCS8vbW9kaWZ5IG1hcmt1cCAmIGF0dHJpYnV0ZXMKCQkJLmFkZENsYXNzKCAidWktY29sbGFwc2libGUtaGVhZGluZyIgKQoJCQkuYXBwZW5kKCB1aS5zdGF0dXMgKQoJCQkud3JhcElubmVyKCAiPGEgaHJlZj0nIycgY2xhc3M9J3VpLWNvbGxhcHNpYmxlLWhlYWRpbmctdG9nZ2xlJz48L2E+IiApCgkJCS5maW5kKCAiYSIgKQoJCQkJLmZpcnN0KCkKCQkJCS5hZGRDbGFzcyggInVpLWJ0biAiICsKCQkJCQkoIGljb25jbGFzcyA/IGljb25jbGFzcyArICIgIiA6ICIiICkgKwoJCQkJCSggaWNvbmNsYXNzID8gKCAidWktYnRuLWljb24tIiArCgkJCQkJCSggb3B0cy5pY29ucG9zID09PSAicmlnaHQiID8gInJpZ2h0IiA6ICJsZWZ0IiApICkgKwoJCQkJCQkiICIgOiAiIiApICsKCQkJCQl0aGlzLl90aGVtZUNsYXNzRnJvbU9wdGlvbiggInVpLWJ0bi0iLCBvcHRzLnRoZW1lICkgKyAiICIgKwoJCQkJCSggb3B0cy5taW5pID8gInVpLW1pbmkgIiA6ICIiICkgKTsKCgkJLy9kcm9wIGhlYWRpbmcgaW4gYmVmb3JlIGNvbnRlbnQKCQl1aS5oZWFkaW5nLmluc2VydEJlZm9yZSggdWkuY29udGVudCApOwoKCQl0aGlzLl9oYW5kbGVFeHBhbmRDb2xsYXBzZSggdGhpcy5vcHRpb25zLmNvbGxhcHNlZCApOwoKCQlyZXR1cm4gdWk7Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCXZhciBrZXksIG9wdGlvbnMgPSB7fTsKCgkJZm9yICgga2V5IGluICQubW9iaWxlLmNvbGxhcHNpYmxlLmRlZmF1bHRzICkgewoJCQlvcHRpb25zWyBrZXkgXSA9IHRoaXMub3B0aW9uc1sga2V5IF07CgkJfQoKCQl0aGlzLl9zZXRPcHRpb25zKCBvcHRpb25zICk7Cgl9LAoKCV9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQl2YXIgaXNDb2xsYXBzZWQsIG5ld1RoZW1lLCBvbGRUaGVtZSwgaGFzQ29ybmVycywKCQkJZWxlbSA9IHRoaXMuZWxlbWVudCwKCQkJY3VycmVudE9wdHMgPSB0aGlzLl9nZXRPcHRpb25zKCB0aGlzLm9wdGlvbnMgKSwKCQkJdWkgPSB0aGlzLl91aSwKCQkJYW5jaG9yID0gdWkuYW5jaG9yLAoJCQlzdGF0dXMgPSB1aS5zdGF0dXMsCgkJCW9wdHMgPSB0aGlzLl9nZXRPcHRpb25zKCBvcHRpb25zICk7CgoJCS8vIEZpcnN0IGFuZCBmb3JlbW9zdCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGUgY29sbGFwc2libGUgaXMgaW4gdGhlIHByb3BlcgoJCS8vIHN0YXRlLCBpbiBjYXNlIHNvbWVib2R5IGRlY2lkZWQgdG8gY2hhbmdlIHRoZSBjb2xsYXBzZWQgb3B0aW9uIGF0IHRoZQoJCS8vIHNhbWUgdGltZSBhcyBhbm90aGVyIG9wdGlvbgoJCWlmICggb3B0aW9ucy5jb2xsYXBzZWQgIT09IHVuZGVmaW5lZCApIHsKCQkJdGhpcy5faGFuZGxlRXhwYW5kQ29sbGFwc2UoIG9wdGlvbnMuY29sbGFwc2VkICk7CgkJfQoKCQlpc0NvbGxhcHNlZCA9IGVsZW0uaGFzQ2xhc3MoICJ1aS1jb2xsYXBzaWJsZS1jb2xsYXBzZWQiICk7CgoJCS8vIE9ubHkgb3B0aW9ucyByZWZlcnJpbmcgdG8gdGhlIGN1cnJlbnQgc3RhdGUgbmVlZCB0byBiZSBhcHBsaWVkIHJpZ2h0IGF3YXkKCQkvLyBJdCBpcyBlbm91Z2ggdG8gc3RvcmUgb3B0aW9ucyBjb3ZlcmluZyB0aGUgYWx0ZXJuYXRlIGluIHRoaXMub3B0aW9ucy4KCQlpZiAoIGlzQ29sbGFwc2VkICkgewoJCQlpZiAoIG9wdHMuZXhwYW5kQ3VlVGV4dCAhPT0gdW5kZWZpbmVkICkgewoJCQkJc3RhdHVzLnRleHQoIG9wdHMuZXhwYW5kQ3VlVGV4dCApOwoJCQl9CgkJCWlmICggb3B0cy5jb2xsYXBzZWRJY29uICE9PSB1bmRlZmluZWQgKSB7CgkJCQlpZiAoIGN1cnJlbnRPcHRzLmNvbGxhcHNlZEljb24gKSB7CgkJCQkJYW5jaG9yLnJlbW92ZUNsYXNzKCAidWktaWNvbi0iICsgY3VycmVudE9wdHMuY29sbGFwc2VkSWNvbiApOwoJCQkJfQoJCQkJaWYgKCBvcHRzLmNvbGxhcHNlZEljb24gKSB7CgkJCQkJYW5jaG9yLmFkZENsYXNzKCAidWktaWNvbi0iICsgb3B0cy5jb2xsYXBzZWRJY29uICk7CgkJCQl9CgkJCX0KCQl9IGVsc2UgewoJCQlpZiAoIG9wdHMuY29sbGFwc2VDdWVUZXh0ICE9PSB1bmRlZmluZWQgKSB7CgkJCQlzdGF0dXMudGV4dCggb3B0cy5jb2xsYXBzZUN1ZVRleHQgKTsKCQkJfQoJCQlpZiAoIG9wdHMuZXhwYW5kZWRJY29uICE9PSB1bmRlZmluZWQgKSB7CgkJCQlpZiAoIGN1cnJlbnRPcHRzLmV4cGFuZGVkSWNvbiApIHsKCQkJCQlhbmNob3IucmVtb3ZlQ2xhc3MoICJ1aS1pY29uLSIgKyBjdXJyZW50T3B0cy5leHBhbmRlZEljb24gKTsKCQkJCX0KCQkJCWlmICggb3B0cy5leHBhbmRlZEljb24gKSB7CgkJCQkJYW5jaG9yLmFkZENsYXNzKCAidWktaWNvbi0iICsgb3B0cy5leHBhbmRlZEljb24gKTsKCQkJCX0KCQkJfQoJCX0KCgkJaWYgKCBvcHRzLmljb25wb3MgIT09IHVuZGVmaW5lZCApIHsKCQkJYW5jaG9yLnJlbW92ZUNsYXNzKCAidWktYnRuLWljb24tIiArICggY3VycmVudE9wdHMuaWNvblBvcyA9PT0gInJpZ2h0IiA/ICJyaWdodCIgOiAibGVmdCIgKSApOwoJCQlhbmNob3IuYWRkQ2xhc3MoICJ1aS1idG4taWNvbi0iICsgKCBvcHRzLmljb25Qb3MgPT09ICJyaWdodCIgPyAicmlnaHQiIDogImxlZnQiICkgKTsKCQl9CgoJCWlmICggb3B0cy50aGVtZSAhPT0gdW5kZWZpbmVkICkgewoJCQlvbGRUaGVtZSA9IHRoaXMuX3RoZW1lQ2xhc3NGcm9tT3B0aW9uKCAidWktYnRuLSIsIGN1cnJlbnRPcHRzLnRoZW1lICk7CgkJCW5ld1RoZW1lID0gdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oICJ1aS1idG4tIiwgb3B0cy50aGVtZSApOwoJCQlhbmNob3IucmVtb3ZlQ2xhc3MoIG9sZFRoZW1lICkuYWRkQ2xhc3MoIG5ld1RoZW1lICk7CgkJfQoKCQlpZiAoIG9wdHMuY29udGVudFRoZW1lICE9PSB1bmRlZmluZWQgKSB7CgkJCW9sZFRoZW1lID0gdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oICJ1aS1ib2R5LSIsIGN1cnJlbnRPcHRzLnRoZW1lICk7CgkJCW5ld1RoZW1lID0gdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oICJ1aS1ib2R5LSIsIG9wdHMudGhlbWUgKTsKCQkJdWkuY29udGVudC5yZW1vdmVDbGFzcyggb2xkVGhlbWUgKS5hZGRDbGFzcyggbmV3VGhlbWUgKTsKCQl9CgoJCWlmICggb3B0cy5pbnNldCAhPT0gdW5kZWZpbmVkICkgewoJCQllbGVtLnRvZ2dsZUNsYXNzKCAidWktY29sbGFwc2libGUtaW5zZXQiLCBvcHRzLmluc2V0ICk7CgkJCWhhc0Nvcm5lcnMgPSAhISggb3B0cy5pbnNldCAmJiAoIG9wdHMuY29ybmVycyB8fCBjdXJyZW50T3B0cy5jb3JuZXJzICkgKTsKCQl9CgoJCWlmICggb3B0cy5jb3JuZXJzICE9PSB1bmRlZmluZWQgKSB7CgkJCWhhc0Nvcm5lcnMgPSAhISggb3B0cy5jb3JuZXJzICYmICggb3B0cy5pbnNldCB8fCBjdXJyZW50T3B0cy5pbnNldCApICk7CgkJfQoKCQlpZiAoIGhhc0Nvcm5lcnMgIT09IHVuZGVmaW5lZCApIHsKCQkJZWxlbS50b2dnbGVDbGFzcyggInVpLWNvcm5lci1hbGwiLCBoYXNDb3JuZXJzICk7CgkJfQoKCQlpZiAoIG9wdHMubWluaSAhPT0gdW5kZWZpbmVkICkgewoJCQlhbmNob3IudG9nZ2xlQ2xhc3MoICJ1aS1taW5pIiwgb3B0cy5taW5pICk7CgkJfQoKCQl0aGlzLl9zdXBlciggb3B0aW9ucyApOwoJfSwKCglfaGFuZGxlRXhwYW5kQ29sbGFwc2U6IGZ1bmN0aW9uKCBpc0NvbGxhcHNlICkgewoJCXZhciBvcHRzID0gdGhpcy5fZ2V0T3B0aW9ucyggdGhpcy5vcHRpb25zICksCgkJCXVpID0gdGhpcy5fdWk7CgoJCXVpLnN0YXR1cy50ZXh0KCBpc0NvbGxhcHNlID8gb3B0cy5leHBhbmRDdWVUZXh0IDogb3B0cy5jb2xsYXBzZUN1ZVRleHQgKTsKCQl1aS5oZWFkaW5nCgkJCS50b2dnbGVDbGFzcyggInVpLWNvbGxhcHNpYmxlLWhlYWRpbmctY29sbGFwc2VkIiwgaXNDb2xsYXBzZSApCgkJCS5maW5kKCAiYSIgKS5maXJzdCgpCgkJCS50b2dnbGVDbGFzcyggInVpLWljb24tIiArIG9wdHMuZXhwYW5kZWRJY29uLCAhaXNDb2xsYXBzZSApCgoJCQkvLyBsb2dpYyBvciBjYXVzZSBzYW1lIGljb24gZm9yIGV4cGFuZGVkL2NvbGxhcHNlZCBzdGF0ZSB3b3VsZCByZW1vdmUgdGhlIHVpLWljb24tY2xhc3MKCQkJLnRvZ2dsZUNsYXNzKCAidWktaWNvbi0iICsgb3B0cy5jb2xsYXBzZWRJY29uLCAoIGlzQ29sbGFwc2UgfHwgb3B0cy5leHBhbmRlZEljb24gPT09IG9wdHMuY29sbGFwc2VkSWNvbiApICkKCQkJLnJlbW92ZUNsYXNzKCAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyApOwoKCQl0aGlzLmVsZW1lbnQudG9nZ2xlQ2xhc3MoICJ1aS1jb2xsYXBzaWJsZS1jb2xsYXBzZWQiLCBpc0NvbGxhcHNlICk7CgkJdWkuY29udGVudAoJCQkudG9nZ2xlQ2xhc3MoICJ1aS1jb2xsYXBzaWJsZS1jb250ZW50LWNvbGxhcHNlZCIsIGlzQ29sbGFwc2UgKQoJCQkuYXR0ciggImFyaWEtaGlkZGVuIiwgaXNDb2xsYXBzZSApCgkJCS50cmlnZ2VyKCAidXBkYXRlbGF5b3V0IiApOwoJCXRoaXMub3B0aW9ucy5jb2xsYXBzZWQgPSBpc0NvbGxhcHNlOwoJCXRoaXMuX3RyaWdnZXIoIGlzQ29sbGFwc2UgPyAiY29sbGFwc2UiIDogImV4cGFuZCIgKTsKCX0sCgoJZXhwYW5kOiBmdW5jdGlvbigpIHsKCQl0aGlzLl9oYW5kbGVFeHBhbmRDb2xsYXBzZSggZmFsc2UgKTsKCX0sCgoJY29sbGFwc2U6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX2hhbmRsZUV4cGFuZENvbGxhcHNlKCB0cnVlICk7Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQl2YXIgdWkgPSB0aGlzLl91aSwKCQkJb3B0cyA9IHRoaXMub3B0aW9uczsKCgkJaWYgKCBvcHRzLmVuaGFuY2VkICkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAoIHVpLnBsYWNlaG9sZGVyICkgewoJCQl1aS5vcmlnaW5hbEhlYWRpbmcuaW5zZXJ0QmVmb3JlKCB1aS5wbGFjZWhvbGRlciApOwoJCQl1aS5wbGFjZWhvbGRlci5yZW1vdmUoKTsKCQkJdWkuaGVhZGluZy5yZW1vdmUoKTsKCQl9IGVsc2UgewoJCQl1aS5zdGF0dXMucmVtb3ZlKCk7CgkJCXVpLmhlYWRpbmcKCQkJCS5yZW1vdmVDbGFzcyggInVpLWNvbGxhcHNpYmxlLWhlYWRpbmcgdWktY29sbGFwc2libGUtaGVhZGluZy1jb2xsYXBzZWQiICkKCQkJCS5jaGlsZHJlbigpCgkJCQkJLmNvbnRlbnRzKCkKCQkJCQkJLnVud3JhcCgpOwoJCX0KCgkJdWkuYW5jaG9yLmNvbnRlbnRzKCkudW53cmFwKCk7CgkJdWkuY29udGVudC5jb250ZW50cygpLnVud3JhcCgpOwoJCXRoaXMuZWxlbWVudAoJCQkucmVtb3ZlQ2xhc3MoICJ1aS1jb2xsYXBzaWJsZSB1aS1jb2xsYXBzaWJsZS1jb2xsYXBzZWQgIiArCgkJCQkidWktY29sbGFwc2libGUtdGhlbWVkLWNvbnRlbnQgdWktY29sbGFwc2libGUtaW5zZXQgdWktY29ybmVyLWFsbCIgKTsKCX0KfSk7CgovLyBEZWZhdWx0cyB0byBiZSB1c2VkIGJ5IGFsbCBpbnN0YW5jZXMgb2YgY29sbGFwc2libGUgaWYgcGVyLWluc3RhbmNlIHZhbHVlcwovLyBhcmUgdW5zZXQgb3IgaWYgbm90aGluZyBpcyBzcGVjaWZpZWQgYnkgd2F5IG9mIGluaGVyaXRhbmNlIGZyb20gYW4gYWNjb3JkaW9uLgovLyBOb3RlIHRoYXQgdGhpcyBoYXNoIGRvZXMgbm90IGNvbnRhaW4gb3B0aW9ucyAiY29sbGFwc2VkIiBvciAiaGVhZGluZyIsCi8vIGJlY2F1c2UgdGhvc2UgYXJlIG5vdCBpbmhlcml0YWJsZS4KJC5tb2JpbGUuY29sbGFwc2libGUuZGVmYXVsdHMgPSB7CglleHBhbmRDdWVUZXh0OiAiIGNsaWNrIHRvIGV4cGFuZCBjb250ZW50cyIsCgljb2xsYXBzZUN1ZVRleHQ6ICIgY2xpY2sgdG8gY29sbGFwc2UgY29udGVudHMiLAoJY29sbGFwc2VkSWNvbjogInBsdXMiLAoJY29udGVudFRoZW1lOiAiaW5oZXJpdCIsCglleHBhbmRlZEljb246ICJtaW51cyIsCglpY29ucG9zOiAibGVmdCIsCglpbnNldDogdHJ1ZSwKCWNvcm5lcnM6IHRydWUsCgl0aGVtZTogImluaGVyaXQiLAoJbWluaTogZmFsc2UKfTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5tb2JpbGUuYmVoYXZpb3JzLmFkZEZpcnN0TGFzdENsYXNzZXMgPSB7CglfZ2V0VmlzaWJsZXM6IGZ1bmN0aW9uKCAkZWxzLCBjcmVhdGUgKSB7CgkJdmFyIHZpc2libGVzOwoKCQlpZiAoIGNyZWF0ZSApIHsKCQkJdmlzaWJsZXMgPSAkZWxzLm5vdCggIi51aS1zY3JlZW4taGlkZGVuIiApOwoJCX0gZWxzZSB7CgkJCXZpc2libGVzID0gJGVscy5maWx0ZXIoICI6dmlzaWJsZSIgKTsKCQkJaWYgKCB2aXNpYmxlcy5sZW5ndGggPT09IDAgKSB7CgkJCQl2aXNpYmxlcyA9ICRlbHMubm90KCAiLnVpLXNjcmVlbi1oaWRkZW4iICk7CgkJCX0KCQl9CgoJCXJldHVybiB2aXNpYmxlczsKCX0sCgoJX2FkZEZpcnN0TGFzdENsYXNzZXM6IGZ1bmN0aW9uKCAkZWxzLCAkdmlzaWJsZXMsIGNyZWF0ZSApIHsKCQkkZWxzLnJlbW92ZUNsYXNzKCAidWktZmlyc3QtY2hpbGQgdWktbGFzdC1jaGlsZCIgKTsKCQkkdmlzaWJsZXMuZXEoIDAgKS5hZGRDbGFzcyggInVpLWZpcnN0LWNoaWxkIiApLmVuZCgpLmxhc3QoKS5hZGRDbGFzcyggInVpLWxhc3QtY2hpbGQiICk7CgkJaWYgKCAhY3JlYXRlICkgewoJCQl0aGlzLmVsZW1lbnQudHJpZ2dlciggInVwZGF0ZWxheW91dCIgKTsKCQl9Cgl9LAoKCV9yZW1vdmVGaXJzdExhc3RDbGFzc2VzOiBmdW5jdGlvbiggJGVscyApIHsKCQkkZWxzLnJlbW92ZUNsYXNzKCAidWktZmlyc3QtY2hpbGQgdWktbGFzdC1jaGlsZCIgKTsKCX0KfTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIGNoaWxkQ29sbGFwc2libGVzU2VsZWN0b3IgPSAiOm1vYmlsZS1jb2xsYXBzaWJsZSwgIiArICQubW9iaWxlLmNvbGxhcHNpYmxlLmluaXRTZWxlY3RvcjsKCiQud2lkZ2V0KCAibW9iaWxlLmNvbGxhcHNpYmxlc2V0IiwgJC5leHRlbmQoIHsKCgkvLyBUaGUgaW5pdFNlbGVjdG9yIGlzIGRlcHJlY2F0ZWQgYXMgb2YgMS40LjAuIEluIDEuNS4wIHdlIHdpbGwgdXNlCgkvLyA6anFtRGF0YShyb2xlPSdjb2xsYXBzaWJsZXNldCcpIHdoaWNoIHdpbGwgYWxsb3cgdXMgdG8gZ2V0IHJpZCBvZiB0aGUgbGluZQoJLy8gYmVsb3cgYWx0b2dldGhlciwgYmVjYXVzZSB0aGUgYXV0b2luaXQgd2lsbCBnZW5lcmF0ZSBzdWNoIGFuIGluaXRTZWxlY3RvcgoJaW5pdFNlbGVjdG9yOiAiOmpxbURhdGEocm9sZT0nY29sbGFwc2libGUtc2V0JyksOmpxbURhdGEocm9sZT0nY29sbGFwc2libGVzZXQnKSIsCgoJb3B0aW9uczogJC5leHRlbmQoIHsKCQllbmhhbmNlZDogZmFsc2UsCgl9LCAkLm1vYmlsZS5jb2xsYXBzaWJsZS5kZWZhdWx0cyApLAoKCV9oYW5kbGVDb2xsYXBzaWJsZUV4cGFuZDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBjbG9zZXN0Q29sbGFwc2libGUgPSAkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCAiLnVpLWNvbGxhcHNpYmxlIiApOwoKCQlpZiAoIGNsb3Nlc3RDb2xsYXBzaWJsZS5wYXJlbnQoKS5pcyggIjptb2JpbGUtY29sbGFwc2libGVzZXQsIDpqcW1EYXRhKHJvbGU9J2NvbGxhcHNpYmxlLXNldCcpIiApICkgewoJCQljbG9zZXN0Q29sbGFwc2libGUKCQkJCS5zaWJsaW5ncyggIi51aS1jb2xsYXBzaWJsZTpub3QoLnVpLWNvbGxhcHNpYmxlLWNvbGxhcHNlZCkiICkKCQkJCS5jb2xsYXBzaWJsZSggImNvbGxhcHNlIiApOwoJCX0KCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdmFyIGVsZW0gPSB0aGlzLmVsZW1lbnQsCgkJCW9wdHMgPSB0aGlzLm9wdGlvbnM7CgoJCSQuZXh0ZW5kKCB0aGlzLCB7CgkJCV9jbGFzc2VzOiAiIgoJCX0pOwoKCQlpZiAoICFvcHRzLmVuaGFuY2VkICkgewoJCQllbGVtLmFkZENsYXNzKCAidWktY29sbGFwc2libGUtc2V0ICIgKwoJCQkJdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oICJ1aS1ncm91cC10aGVtZS0iLCBvcHRzLnRoZW1lICkgKyAiICIgKwoJCQkJKCBvcHRzLmNvcm5lcnMgJiYgb3B0cy5pbnNldCA/ICJ1aS1jb3JuZXItYWxsICIgOiAiIiApICk7CgkJCXRoaXMuZWxlbWVudC5maW5kKCAkLm1vYmlsZS5jb2xsYXBzaWJsZS5pbml0U2VsZWN0b3IgKS5jb2xsYXBzaWJsZSgpOwoJCX0KCgkJdGhpcy5fb24oIGVsZW0sIHsgY29sbGFwc2libGVleHBhbmQ6ICJfaGFuZGxlQ29sbGFwc2libGVFeHBhbmQiIH0gKTsKCX0sCgoJX3RoZW1lQ2xhc3NGcm9tT3B0aW9uOiBmdW5jdGlvbiggcHJlZml4LCB2YWx1ZSApIHsKCQlyZXR1cm4gKCB2YWx1ZSA/ICggdmFsdWUgPT09ICJub25lIiA/ICIiIDogcHJlZml4ICsgdmFsdWUgKSA6ICIiICk7Cgl9LAoKCV9pbml0OiBmdW5jdGlvbigpIHsKCQl0aGlzLl9yZWZyZXNoKCB0cnVlICk7CgoJCS8vIEJlY2F1c2UgdGhlIGNvcm5lcnMgYXJlIGhhbmRsZWQgYnkgdGhlIGNvbGxhcHNpYmxlIGl0c2VsZiBhbmQgdGhlIGRlZmF1bHQgc3RhdGUgaXMgY29sbGFwc2VkCgkJLy8gVGhhdCB3YXMgY2F1c2luZyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS1tb2JpbGUvaXNzdWVzLzQxMTYKCQl0aGlzLmVsZW1lbnQKCQkJLmNoaWxkcmVuKCBjaGlsZENvbGxhcHNpYmxlc1NlbGVjdG9yICkKCQkJLmZpbHRlciggIjpqcW1EYXRhKGNvbGxhcHNlZD0nZmFsc2UnKSIgKQoJCQkuY29sbGFwc2libGUoICJleHBhbmQiICk7Cgl9LAoKCV9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQl2YXIgcmV0LCBoYXNDb3JuZXJzLAoJCQllbGVtID0gdGhpcy5lbGVtZW50LAoJCQl0aGVtZUNsYXNzID0gdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oICJ1aS1ncm91cC10aGVtZS0iLCBvcHRpb25zLnRoZW1lICk7CgoJCWlmICggdGhlbWVDbGFzcyApIHsKCQkJZWxlbQoJCQkJLnJlbW92ZUNsYXNzKCB0aGlzLl90aGVtZUNsYXNzRnJvbU9wdGlvbiggInVpLWdyb3VwLXRoZW1lLSIsIHRoaXMub3B0aW9ucy50aGVtZSApICkKCQkJCS5hZGRDbGFzcyggdGhlbWVDbGFzcyApOwoJCX0KCgkJaWYgKCBvcHRpb25zLmluc2V0ICE9PSB1bmRlZmluZWQgKSB7CgkJCWhhc0Nvcm5lcnMgPSAhISggb3B0aW9ucy5pbnNldCAmJiAoIG9wdGlvbnMuY29ybmVycyB8fCB0aGlzLm9wdGlvbnMuY29ybmVycyApICk7CgkJfQoKCQlpZiAoIG9wdGlvbnMuY29ybmVycyAhPT0gdW5kZWZpbmVkICkgewoJCQloYXNDb3JuZXJzID0gISEoIG9wdGlvbnMuY29ybmVycyAmJiAoIG9wdGlvbnMuaW5zZXQgfHwgdGhpcy5vcHRpb25zLmluc2V0ICkgKTsKCQl9CgoJCWlmICggaGFzQ29ybmVycyAhPT0gdW5kZWZpbmVkICkgewoJCQllbGVtLnRvZ2dsZUNsYXNzKCAidWktY29ybmVyLWFsbCIsIGhhc0Nvcm5lcnMgKTsKCQl9CgoJCXJldCA9IHRoaXMuX3N1cGVyKCBvcHRpb25zICk7CgkJdGhpcy5lbGVtZW50LmNoaWxkcmVuKCAiOm1vYmlsZS1jb2xsYXBzaWJsZSIgKS5jb2xsYXBzaWJsZSggInJlZnJlc2giICk7CgkJcmV0dXJuIHJldDsKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCXZhciBlbCA9IHRoaXMuZWxlbWVudDsKCgkJdGhpcy5fcmVtb3ZlRmlyc3RMYXN0Q2xhc3NlcyggZWwuY2hpbGRyZW4oIGNoaWxkQ29sbGFwc2libGVzU2VsZWN0b3IgKSApOwoJCWVsCgkJCS5yZW1vdmVDbGFzcyggInVpLWNvbGxhcHNpYmxlLXNldCB1aS1jb3JuZXItYWxsICIgKwoJCQkJdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oICJ1aS1ncm91cC10aGVtZS0iLCB0aGlzLm9wdGlvbnMudGhlbWUgKSApCgkJCS5jaGlsZHJlbiggIjptb2JpbGUtY29sbGFwc2libGUiICkKCQkJLmNvbGxhcHNpYmxlKCAiZGVzdHJveSIgKTsKCX0sCgoJX3JlZnJlc2g6IGZ1bmN0aW9uKCBjcmVhdGUgKSB7CgkJdmFyIGNvbGxhcHNpYmxlc0luU2V0ID0gdGhpcy5lbGVtZW50LmNoaWxkcmVuKCBjaGlsZENvbGxhcHNpYmxlc1NlbGVjdG9yICk7CgoJCXRoaXMuZWxlbWVudC5maW5kKCAkLm1vYmlsZS5jb2xsYXBzaWJsZS5pbml0U2VsZWN0b3IgKS5ub3QoICIudWktY29sbGFwc2libGUiICkuY29sbGFwc2libGUoKTsKCgkJdGhpcy5fYWRkRmlyc3RMYXN0Q2xhc3NlcyggY29sbGFwc2libGVzSW5TZXQsIHRoaXMuX2dldFZpc2libGVzKCBjb2xsYXBzaWJsZXNJblNldCwgY3JlYXRlICksIGNyZWF0ZSApOwoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl0aGlzLl9yZWZyZXNoKCBmYWxzZSApOwoJfQp9LCAkLm1vYmlsZS5iZWhhdmlvcnMuYWRkRmlyc3RMYXN0Q2xhc3NlcyApICk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCi8vIERlcHJlY2F0ZWQgaW4gMS40CiQuZm4uZmllbGRjb250YWluID0gZnVuY3Rpb24oLyogb3B0aW9ucyAqLykgewoJcmV0dXJuIHRoaXMuYWRkQ2xhc3MoICJ1aS1maWVsZC1jb250YWluIiApOwp9OwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmZuLmdyaWQgPSBmdW5jdGlvbiggb3B0aW9ucyApIHsKCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgoJCXZhciAkdGhpcyA9ICQoIHRoaXMgKSwKCQkJbyA9ICQuZXh0ZW5kKHsKCQkJCWdyaWQ6IG51bGwKCQkJfSwgb3B0aW9ucyApLAoJCQkka2lkcyA9ICR0aGlzLmNoaWxkcmVuKCksCgkJCWdyaWRDb2xzID0geyBzb2xvOjEsIGE6MiwgYjozLCBjOjQsIGQ6NSB9LAoJCQlncmlkID0gby5ncmlkLAoJCQlpdGVyYXRvciwKCQkJbGV0dGVyOwoKCQkJaWYgKCAhZ3JpZCApIHsKCQkJCWlmICggJGtpZHMubGVuZ3RoIDw9IDUgKSB7CgkJCQkJZm9yICggbGV0dGVyIGluIGdyaWRDb2xzICkgewoJCQkJCQlpZiAoIGdyaWRDb2xzWyBsZXR0ZXIgXSA9PT0gJGtpZHMubGVuZ3RoICkgewoJCQkJCQkJZ3JpZCA9IGxldHRlcjsKCQkJCQkJfQoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJZ3JpZCA9ICJhIjsKCQkJCQkkdGhpcy5hZGRDbGFzcyggInVpLWdyaWQtZHVvIiApOwoJCQkJfQoJCQl9CgkJCWl0ZXJhdG9yID0gZ3JpZENvbHNbZ3JpZF07CgoJCSR0aGlzLmFkZENsYXNzKCAidWktZ3JpZC0iICsgZ3JpZCApOwoKCQkka2lkcy5maWx0ZXIoICI6bnRoLWNoaWxkKCIgKyBpdGVyYXRvciArICJuKzEpIiApLmFkZENsYXNzKCAidWktYmxvY2stYSIgKTsKCgkJaWYgKCBpdGVyYXRvciA+IDEgKSB7CgkJCSRraWRzLmZpbHRlciggIjpudGgtY2hpbGQoIiArIGl0ZXJhdG9yICsgIm4rMikiICkuYWRkQ2xhc3MoICJ1aS1ibG9jay1iIiApOwoJCX0KCQlpZiAoIGl0ZXJhdG9yID4gMiApIHsKCQkJJGtpZHMuZmlsdGVyKCAiOm50aC1jaGlsZCgiICsgaXRlcmF0b3IgKyAibiszKSIgKS5hZGRDbGFzcyggInVpLWJsb2NrLWMiICk7CgkJfQoJCWlmICggaXRlcmF0b3IgPiAzICkgewoJCQkka2lkcy5maWx0ZXIoICI6bnRoLWNoaWxkKCIgKyBpdGVyYXRvciArICJuKzQpIiApLmFkZENsYXNzKCAidWktYmxvY2stZCIgKTsKCQl9CgkJaWYgKCBpdGVyYXRvciA+IDQgKSB7CgkJCSRraWRzLmZpbHRlciggIjpudGgtY2hpbGQoIiArIGl0ZXJhdG9yICsgIm4rNSkiICkuYWRkQ2xhc3MoICJ1aS1ibG9jay1lIiApOwoJCX0KCX0pOwp9Owp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLm5hdmJhciIsIHsKCW9wdGlvbnM6IHsKCQlpY29ucG9zOiAidG9wIiwKCQlncmlkOiBudWxsCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoKCQl2YXIgJG5hdmJhciA9IHRoaXMuZWxlbWVudCwKCQkJJG5hdmJ0bnMgPSAkbmF2YmFyLmZpbmQoICJhIiApLAoJCQlpY29ucG9zID0gJG5hdmJ0bnMuZmlsdGVyKCAiOmpxbURhdGEoaWNvbikiICkubGVuZ3RoID8gdGhpcy5vcHRpb25zLmljb25wb3MgOiB1bmRlZmluZWQ7CgoJCSRuYXZiYXIuYWRkQ2xhc3MoICJ1aS1uYXZiYXIiICkKCQkJLmF0dHIoICJyb2xlIiwgIm5hdmlnYXRpb24iICkKCQkJLmZpbmQoICJ1bCIgKQoJCQkuanFtRW5oYW5jZWFibGUoKQoJCQkuZ3JpZCh7IGdyaWQ6IHRoaXMub3B0aW9ucy5ncmlkIH0pOwoKCQkkbmF2YnRucwoJCQkuZWFjaCggZnVuY3Rpb24oKSB7CgkJCQl2YXIgaWNvbiA9ICQubW9iaWxlLmdldEF0dHJpYnV0ZSggdGhpcywgImljb24iICksCgkJCQkJdGhlbWUgPSAkLm1vYmlsZS5nZXRBdHRyaWJ1dGUoIHRoaXMsICJ0aGVtZSIgKSwKCQkJCQljbGFzc2VzID0gInVpLWJ0biI7CgoJCQkJaWYgKCB0aGVtZSApIHsKCQkJCQljbGFzc2VzICs9ICIgdWktYnRuLSIgKyB0aGVtZTsKCQkJCX0KCQkJCWlmICggaWNvbiApIHsKCQkJCQljbGFzc2VzICs9ICIgdWktaWNvbi0iICsgaWNvbiArICIgdWktYnRuLWljb24tIiArIGljb25wb3M7CgkJCQl9CgkJCQkkKCB0aGlzICkuYWRkQ2xhc3MoIGNsYXNzZXMgKTsKCQkJfSk7CgoJCSRuYXZiYXIuZGVsZWdhdGUoICJhIiwgInZjbGljayIsIGZ1bmN0aW9uKCAvKiBldmVudCAqLyApIHsKCQkJdmFyIGFjdGl2ZUJ0biA9ICQoIHRoaXMgKTsKCgkJCWlmICggISggYWN0aXZlQnRuLmhhc0NsYXNzKCAidWktc3RhdGUtZGlzYWJsZWQiICkgfHwKCgkJCQkvLyBERVBSRUNBVEVEIGFzIG9mIDEuNC4wIC0gcmVtb3ZlIGFmdGVyIDEuNC4wIHJlbGVhc2UKCQkJCS8vIG9ubHkgdWktc3RhdGUtZGlzYWJsZWQgc2hvdWxkIGJlIHByZXNlbnQgdGhlcmVhZnRlcgoJCQkJYWN0aXZlQnRuLmhhc0NsYXNzKCAidWktZGlzYWJsZWQiICkgfHwKCQkJCWFjdGl2ZUJ0bi5oYXNDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKSApICkgewoKCQkJCSRuYXZidG5zLnJlbW92ZUNsYXNzKCAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyApOwoJCQkJYWN0aXZlQnRuLmFkZENsYXNzKCAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyApOwoKCQkJCS8vIFRoZSBjb2RlIGJlbG93IGlzIGEgd29ya2Fyb3VuZCB0byBmaXggIzExODEKCQkJCSQoIGRvY3VtZW50ICkub25lKCAicGFnZWhpZGUiLCBmdW5jdGlvbigpIHsKCQkJCQlhY3RpdmVCdG4ucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJCQl9KTsKCQkJfQoJCX0pOwoKCQkvLyBCdXR0b25zIGluIHRoZSBuYXZiYXIgd2l0aCB1aS1zdGF0ZS1wZXJzaXN0IGNsYXNzIHNob3VsZCByZWdhaW4gdGhlaXIgYWN0aXZlIHN0YXRlIGJlZm9yZSBwYWdlIHNob3cKCQkkbmF2YmFyLmNsb3Nlc3QoICIudWktcGFnZSIgKS5iaW5kKCAicGFnZWJlZm9yZXNob3ciLCBmdW5jdGlvbigpIHsKCQkJJG5hdmJ0bnMuZmlsdGVyKCAiLnVpLXN0YXRlLXBlcnNpc3QiICkuYWRkQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJfSk7Cgl9Cn0pOwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgp2YXIgZ2V0QXR0ciA9ICQubW9iaWxlLmdldEF0dHJpYnV0ZTsKCiQud2lkZ2V0KCAibW9iaWxlLmxpc3R2aWV3IiwgJC5leHRlbmQoIHsKCglvcHRpb25zOiB7CgkJdGhlbWU6IG51bGwsCgkJY291bnRUaGVtZTogbnVsbCwgLyogRGVwcmVjYXRlZCBpbiAxLjQgKi8KCQlkaXZpZGVyVGhlbWU6IG51bGwsCgkJaWNvbjogImNhcmF0LXIiLAoJCXNwbGl0SWNvbjogImNhcmF0LXIiLAoJCXNwbGl0VGhlbWU6IG51bGwsCgkJY29ybmVyczogdHJ1ZSwKCQlzaGFkb3c6IHRydWUsCgkJaW5zZXQ6IGZhbHNlCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciB0ID0gdGhpcywKCQkJbGlzdHZpZXdDbGFzc2VzID0gIiI7CgoJCWxpc3R2aWV3Q2xhc3NlcyArPSB0Lm9wdGlvbnMuaW5zZXQgPyAiIHVpLWxpc3R2aWV3LWluc2V0IiA6ICIiOwoKCQlpZiAoICEhdC5vcHRpb25zLmluc2V0ICkgewoJCQlsaXN0dmlld0NsYXNzZXMgKz0gdC5vcHRpb25zLmNvcm5lcnMgPyAiIHVpLWNvcm5lci1hbGwiIDogIiI7CgkJCWxpc3R2aWV3Q2xhc3NlcyArPSB0Lm9wdGlvbnMuc2hhZG93ID8gIiB1aS1zaGFkb3ciIDogIiI7CgkJfQoKCQkvLyBjcmVhdGUgbGlzdHZpZXcgbWFya3VwCgkJdC5lbGVtZW50LmFkZENsYXNzKCAiIHVpLWxpc3R2aWV3IiArIGxpc3R2aWV3Q2xhc3NlcyApOwoKCQl0LnJlZnJlc2goIHRydWUgKTsKCX0sCgoJLy8gVE9ETzogUmVtb3ZlIGluIDEuNQoJX2ZpbmRGaXJzdEVsZW1lbnRCeVRhZ05hbWU6IGZ1bmN0aW9uKCBlbGUsIG5leHRQcm9wLCBsY05hbWUsIHVjTmFtZSApIHsKCQl2YXIgZGljdCA9IHt9OwoJCWRpY3RbIGxjTmFtZSBdID0gZGljdFsgdWNOYW1lIF0gPSB0cnVlOwoJCXdoaWxlICggZWxlICkgewoJCQlpZiAoIGRpY3RbIGVsZS5ub2RlTmFtZSBdICkgewoJCQkJcmV0dXJuIGVsZTsKCQkJfQoJCQllbGUgPSBlbGVbIG5leHRQcm9wIF07CgkJfQoJCXJldHVybiBudWxsOwoJfSwKCS8vIFRPRE86IFJlbW92ZSBpbiAxLjUKCV9hZGRUaHVtYkNsYXNzZXM6IGZ1bmN0aW9uKCBjb250YWluZXJzICkgewoJCXZhciBpLCBpbWcsIGxlbiA9IGNvbnRhaW5lcnMubGVuZ3RoOwoJCWZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7CgkJCWltZyA9ICQoIHRoaXMuX2ZpbmRGaXJzdEVsZW1lbnRCeVRhZ05hbWUoIGNvbnRhaW5lcnNbIGkgXS5maXJzdENoaWxkLCAibmV4dFNpYmxpbmciLCAiaW1nIiwgIklNRyIgKSApOwoJCQlpZiAoIGltZy5sZW5ndGggKSB7CgkJCQkkKCB0aGlzLl9maW5kRmlyc3RFbGVtZW50QnlUYWdOYW1lKCBpbWdbIDAgXS5wYXJlbnROb2RlLCAicGFyZW50Tm9kZSIsICJsaSIsICJMSSIgKSApLmFkZENsYXNzKCBpbWcuaGFzQ2xhc3MoICJ1aS1saS1pY29uIiApID8gInVpLWxpLWhhcy1pY29uIiA6ICJ1aS1saS1oYXMtdGh1bWIiICk7CgkJCX0KCQl9Cgl9LAoKCV9nZXRDaGlsZHJlbkJ5VGFnTmFtZTogZnVuY3Rpb24oIGVsZSwgbGNOYW1lLCB1Y05hbWUgKSB7CgkJdmFyIHJlc3VsdHMgPSBbXSwKCQkJZGljdCA9IHt9OwoJCWRpY3RbIGxjTmFtZSBdID0gZGljdFsgdWNOYW1lIF0gPSB0cnVlOwoJCWVsZSA9IGVsZS5maXJzdENoaWxkOwoJCXdoaWxlICggZWxlICkgewoJCQlpZiAoIGRpY3RbIGVsZS5ub2RlTmFtZSBdICkgewoJCQkJcmVzdWx0cy5wdXNoKCBlbGUgKTsKCQkJfQoJCQllbGUgPSBlbGUubmV4dFNpYmxpbmc7CgkJfQoJCXJldHVybiAkKCByZXN1bHRzICk7Cgl9LAoKCV9iZWZvcmVMaXN0dmlld1JlZnJlc2g6ICQubm9vcCwKCV9hZnRlckxpc3R2aWV3UmVmcmVzaDogJC5ub29wLAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCBjcmVhdGUgKSB7CgkJdmFyIGJ1dHRvbkNsYXNzLCBwb3MsIG51bWxpLCBpdGVtLCBpdGVtQ2xhc3MsIGl0ZW1UaGVtZSwgaXRlbUljb24sIGljb24sIGEsCgkJCWlzRGl2aWRlciwgc3RhcnRDb3VudCwgbmV3U3RhcnRDb3VudCwgdmFsdWUsIGxhc3QsIHNwbGl0dGhlbWUsIHNwbGl0VGhlbWVDbGFzcywgc3BsaXRpY29uLAoJCQlhbHRCdXR0b25DbGFzcywgZGl2aWRlclRoZW1lLCBsaSwKCQkJbyA9IHRoaXMub3B0aW9ucywKCQkJJGxpc3QgPSB0aGlzLmVsZW1lbnQsCgkJCW9sID0gISEkLm5vZGVOYW1lKCAkbGlzdFsgMCBdLCAib2wiICksCgkJCXN0YXJ0ID0gJGxpc3QuYXR0ciggInN0YXJ0IiApLAoJCQlpdGVtQ2xhc3NEaWN0ID0ge30sCgkJCWNvdW50QnViYmxlcyA9ICRsaXN0LmZpbmQoICIudWktbGktY291bnQiICksCgkJCWNvdW50VGhlbWUgPSBnZXRBdHRyKCAkbGlzdFsgMCBdLCAiY291bnR0aGVtZSIgKSB8fCB0aGlzLm9wdGlvbnMuY291bnRUaGVtZSwKCQkJY291bnRUaGVtZUNsYXNzID0gY291bnRUaGVtZSA/ICJ1aS1ib2R5LSIgKyBjb3VudFRoZW1lIDogInVpLWJvZHktaW5oZXJpdCI7CgoJCWlmICggby50aGVtZSApIHsKCQkJJGxpc3QuYWRkQ2xhc3MoICJ1aS1ncm91cC10aGVtZS0iICsgby50aGVtZSApOwoJCX0KCgkJLy8gQ2hlY2sgaWYgYSBzdGFydCBhdHRyaWJ1dGUgaGFzIGJlZW4gc2V0IHdoaWxlIHRha2luZyBhIHZhbHVlIG9mIDAgaW50byBhY2NvdW50CgkJaWYgKCBvbCAmJiAoIHN0YXJ0IHx8IHN0YXJ0ID09PSAwICkgKSB7CgkJCXN0YXJ0Q291bnQgPSBwYXJzZUludCggc3RhcnQsIDEwICkgLSAxOwoJCQkkbGlzdC5jc3MoICJjb3VudGVyLXJlc2V0IiwgImxpc3RudW1iZXJpbmcgIiArIHN0YXJ0Q291bnQgKTsKCQl9CgoJCXRoaXMuX2JlZm9yZUxpc3R2aWV3UmVmcmVzaCgpOwoKCQlsaSA9IHRoaXMuX2dldENoaWxkcmVuQnlUYWdOYW1lKCAkbGlzdFsgMCBdLCAibGkiLCAiTEkiICk7CgoJCWZvciAoIHBvcyA9IDAsIG51bWxpID0gbGkubGVuZ3RoOyBwb3MgPCBudW1saTsgcG9zKysgKSB7CgkJCWl0ZW0gPSBsaS5lcSggcG9zICk7CgkJCWl0ZW1DbGFzcyA9ICIiOwoKCQkJaWYgKCBjcmVhdGUgfHwgaXRlbVsgMCBdLmNsYXNzTmFtZS5zZWFyY2goIC9cYnVpLWxpLXN0YXRpY1xifFxidWktbGktZGl2aWRlclxiLyApIDwgMCApIHsKCQkJCWEgPSB0aGlzLl9nZXRDaGlsZHJlbkJ5VGFnTmFtZSggaXRlbVsgMCBdLCAiYSIsICJBIiApOwoJCQkJaXNEaXZpZGVyID0gKCBnZXRBdHRyKCBpdGVtWyAwIF0sICJyb2xlIiApID09PSAibGlzdC1kaXZpZGVyIiApOwoJCQkJdmFsdWUgPSBpdGVtLmF0dHIoICJ2YWx1ZSIgKTsKCQkJCWl0ZW1UaGVtZSA9IGdldEF0dHIoIGl0ZW1bIDAgXSwgInRoZW1lIiApOwoKCQkJCWlmICggYS5sZW5ndGggJiYgYVsgMCBdLmNsYXNzTmFtZS5zZWFyY2goIC9cYnVpLWJ0blxiLyApIDwgMCAmJiAhaXNEaXZpZGVyICkgewoJCQkJCWl0ZW1JY29uID0gZ2V0QXR0ciggaXRlbVsgMCBdLCAiaWNvbiIgKTsKCQkJCQlpY29uID0gKCBpdGVtSWNvbiA9PT0gZmFsc2UgKSA/IGZhbHNlIDogKCBpdGVtSWNvbiB8fCBvLmljb24gKTsKCgkJCQkJLy8gVE9ETzogUmVtb3ZlIGluIDEuNSB0b2dldGhlciB3aXRoIGxpbmtzLmpzIChsaW5rcy5qcyAvIC51aS1saW5rIGRlcHJlY2F0ZWQgaW4gMS40KQoJCQkJCWEucmVtb3ZlQ2xhc3MoICJ1aS1saW5rIiApOwoKCQkJCQlidXR0b25DbGFzcyA9ICJ1aS1idG4iOwoKCQkJCQlpZiAoIGl0ZW1UaGVtZSApIHsKCQkJCQkJYnV0dG9uQ2xhc3MgKz0gIiB1aS1idG4tIiArIGl0ZW1UaGVtZTsKCQkJCQl9CgoJCQkJCWlmICggYS5sZW5ndGggPiAxICkgewoJCQkJCQlpdGVtQ2xhc3MgPSAidWktbGktaGFzLWFsdCI7CgoJCQkJCQlsYXN0ID0gYS5sYXN0KCk7CgkJCQkJCXNwbGl0dGhlbWUgPSBnZXRBdHRyKCBsYXN0WyAwIF0sICJ0aGVtZSIgKSB8fCBvLnNwbGl0VGhlbWUgfHwgZ2V0QXR0ciggaXRlbVsgMCBdLCAidGhlbWUiLCB0cnVlICk7CgkJCQkJCXNwbGl0VGhlbWVDbGFzcyA9IHNwbGl0dGhlbWUgPyAiIHVpLWJ0bi0iICsgc3BsaXR0aGVtZSA6ICIiOwoJCQkJCQlzcGxpdGljb24gPSBnZXRBdHRyKCBsYXN0WyAwIF0sICJpY29uIiApIHx8IGdldEF0dHIoIGl0ZW1bIDAgXSwgImljb24iICkgfHwgby5zcGxpdEljb247CgkJCQkJCWFsdEJ1dHRvbkNsYXNzID0gInVpLWJ0biB1aS1idG4taWNvbi1ub3RleHQgdWktaWNvbi0iICsgc3BsaXRpY29uICsgc3BsaXRUaGVtZUNsYXNzOwoKCQkJCQkJbGFzdAoJCQkJCQkJLmF0dHIoICJ0aXRsZSIsICQudHJpbSggbGFzdC5nZXRFbmNvZGVkVGV4dCgpICkgKQoJCQkJCQkJLmFkZENsYXNzKCBhbHRCdXR0b25DbGFzcyApCgkJCQkJCQkuZW1wdHkoKTsKCQkJCQl9IGVsc2UgaWYgKCBpY29uICkgewoJCQkJCQlidXR0b25DbGFzcyArPSAiIHVpLWJ0bi1pY29uLXJpZ2h0IHVpLWljb24tIiArIGljb247CgkJCQkJfQoKCQkJCQlhLmZpcnN0KCkuYWRkQ2xhc3MoIGJ1dHRvbkNsYXNzICk7CgkJCQl9IGVsc2UgaWYgKCBpc0RpdmlkZXIgKSB7CgkJCQkJZGl2aWRlclRoZW1lID0gKCBnZXRBdHRyKCBpdGVtWyAwIF0sICJ0aGVtZSIgKSB8fCBvLmRpdmlkZXJUaGVtZSB8fCBvLnRoZW1lICk7CgoJCQkJCWl0ZW1DbGFzcyA9ICJ1aS1saS1kaXZpZGVyIHVpLWJhci0iICsgKCBkaXZpZGVyVGhlbWUgPyBkaXZpZGVyVGhlbWUgOiAiaW5oZXJpdCIgKTsKCgkJCQkJaXRlbS5hdHRyKCAicm9sZSIsICJoZWFkaW5nIiApOwoJCQkJfSBlbHNlIGlmICggYS5sZW5ndGggPD0gMCApIHsKCQkJCQlpdGVtQ2xhc3MgPSAidWktbGktc3RhdGljIHVpLWJvZHktIiArICggaXRlbVRoZW1lID8gaXRlbVRoZW1lIDogImluaGVyaXQiICk7CgkJCQl9CgkJCQlpZiAoIG9sICYmIHZhbHVlICkgewoJCQkJCW5ld1N0YXJ0Q291bnQgPSBwYXJzZUludCggdmFsdWUgLCAxMCApIC0gMTsKCgkJCQkJaXRlbS5jc3MoICJjb3VudGVyLXJlc2V0IiwgImxpc3RudW1iZXJpbmcgIiArIG5ld1N0YXJ0Q291bnQgKTsKCQkJCX0KCQkJfQoKCQkJLy8gSW5zdGVhZCBvZiBzZXR0aW5nIGl0ZW0gY2xhc3MgZGlyZWN0bHkgb24gdGhlIGxpc3QgaXRlbQoJCQkvLyBhdCB0aGlzIHBvaW50IGluIHRpbWUsIHB1c2ggdGhlIGl0ZW0gaW50byBhIGRpY3Rpb25hcnkKCQkJLy8gdGhhdCB0ZWxscyB1cyB3aGF0IGNsYXNzIHRvIHNldCBvbiBpdCBzbyB3ZSBjYW4gZG8gdGhpcyBhZnRlciB0aGlzCgkJCS8vIHByb2Nlc3NpbmcgbG9vcCBpcyBmaW5pc2hlZC4KCgkJCWlmICggIWl0ZW1DbGFzc0RpY3RbIGl0ZW1DbGFzcyBdICkgewoJCQkJaXRlbUNsYXNzRGljdFsgaXRlbUNsYXNzIF0gPSBbXTsKCQkJfQoKCQkJaXRlbUNsYXNzRGljdFsgaXRlbUNsYXNzIF0ucHVzaCggaXRlbVsgMCBdICk7CgkJfQoKCQkvLyBTZXQgdGhlIGFwcHJvcHJpYXRlIGxpc3R2aWV3IGl0ZW0gY2xhc3NlcyBvbiBlYWNoIGxpc3QgaXRlbS4KCQkvLyBUaGUgbWFpbiByZWFzb24gd2UgZGlkbid0IGRvIHRoaXMKCQkvLyBpbiB0aGUgZm9yLWxvb3AgYWJvdmUgaXMgYmVjYXVzZSB3ZSBjYW4gZWxpbWluYXRlIHBlci1pdGVtIGZ1bmN0aW9uIG92ZXJoZWFkCgkJLy8gYnkgY2FsbGluZyBhZGRDbGFzcygpIGFuZCBjaGlsZHJlbigpIG9uY2Ugb3IgdHdpY2UgYWZ0ZXJ3YXJkcy4gVGhpcwoJCS8vIGNhbiBnaXZlIHVzIGEgc2lnbmlmaWNhbnQgYm9vc3Qgb24gcGxhdGZvcm1zIGxpa2UgV1A3LjUuCgoJCWZvciAoIGl0ZW1DbGFzcyBpbiBpdGVtQ2xhc3NEaWN0ICkgewoJCQkkKCBpdGVtQ2xhc3NEaWN0WyBpdGVtQ2xhc3MgXSApLmFkZENsYXNzKCBpdGVtQ2xhc3MgKTsKCQl9CgoJCWNvdW50QnViYmxlcy5lYWNoKCBmdW5jdGlvbigpIHsKCQkJJCggdGhpcyApLmNsb3Nlc3QoICJsaSIgKS5hZGRDbGFzcyggInVpLWxpLWhhcy1jb3VudCIgKTsKCQl9KTsKCQlpZiAoIGNvdW50VGhlbWVDbGFzcyApIHsKCQkJY291bnRCdWJibGVzLmFkZENsYXNzKCBjb3VudFRoZW1lQ2xhc3MgKTsKCQl9CgoJCS8vIERlcHJlY2F0ZWQgaW4gMS40LiBGcm9tIDEuNSB5b3UgaGF2ZSB0byBhZGQgY2xhc3MgdWktbGktaGFzLXRodW1iIG9yIHVpLWxpLWhhcy1pY29uIHRvIHRoZSBMSS4KCQl0aGlzLl9hZGRUaHVtYkNsYXNzZXMoIGxpICk7CgkJdGhpcy5fYWRkVGh1bWJDbGFzc2VzKCBsaS5maW5kKCAiLnVpLWJ0biIgKSApOwoKCQl0aGlzLl9hZnRlckxpc3R2aWV3UmVmcmVzaCgpOwoKCQl0aGlzLl9hZGRGaXJzdExhc3RDbGFzc2VzKCBsaSwgdGhpcy5fZ2V0VmlzaWJsZXMoIGxpLCBjcmVhdGUgKSwgY3JlYXRlICk7Cgl9Cn0sICQubW9iaWxlLmJlaGF2aW9ycy5hZGRGaXJzdExhc3RDbGFzc2VzICkgKTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKZnVuY3Rpb24gZGVmYXVsdEF1dG9kaXZpZGVyc1NlbGVjdG9yKCBlbHQgKSB7CgkvLyBsb29rIGZvciB0aGUgdGV4dCBpbiB0aGUgZ2l2ZW4gZWxlbWVudAoJdmFyIHRleHQgPSAkLnRyaW0oIGVsdC50ZXh0KCkgKSB8fCBudWxsOwoKCWlmICggIXRleHQgKSB7CgkJcmV0dXJuIG51bGw7Cgl9CgoJLy8gY3JlYXRlIHRoZSB0ZXh0IGZvciB0aGUgZGl2aWRlciAoZmlyc3QgdXBwZXJjYXNlZCBsZXR0ZXIpCgl0ZXh0ID0gdGV4dC5zbGljZSggMCwgMSApLnRvVXBwZXJDYXNlKCk7CgoJcmV0dXJuIHRleHQ7Cn0KCiQud2lkZ2V0KCAibW9iaWxlLmxpc3R2aWV3IiwgJC5tb2JpbGUubGlzdHZpZXcsIHsKCW9wdGlvbnM6IHsKCQlhdXRvZGl2aWRlcnM6IGZhbHNlLAoJCWF1dG9kaXZpZGVyc1NlbGVjdG9yOiBkZWZhdWx0QXV0b2RpdmlkZXJzU2VsZWN0b3IKCX0sCgoJX2JlZm9yZUxpc3R2aWV3UmVmcmVzaDogZnVuY3Rpb24oKSB7CgkJaWYgKCB0aGlzLm9wdGlvbnMuYXV0b2RpdmlkZXJzICkgewoJCQl0aGlzLl9yZXBsYWNlRGl2aWRlcnMoKTsKCQkJdGhpcy5fc3VwZXJBcHBseSggYXJndW1lbnRzICk7CgkJfQoJfSwKCglfcmVwbGFjZURpdmlkZXJzOiBmdW5jdGlvbigpIHsKCQl2YXIgaSwgbGlzLCBsaSwgZGl2aWRlclRleHQsCgkJCWxhc3REaXZpZGVyVGV4dCA9IG51bGwsCgkJCWxpc3QgPSB0aGlzLmVsZW1lbnQsCgkJCWRpdmlkZXI7CgoJCWxpc3QuY2hpbGRyZW4oICJsaTpqcW1EYXRhKHJvbGU9J2xpc3QtZGl2aWRlcicpIiApLnJlbW92ZSgpOwoKCQlsaXMgPSBsaXN0LmNoaWxkcmVuKCAibGkiICk7CgoJCWZvciAoIGkgPSAwOyBpIDwgbGlzLmxlbmd0aCA7IGkrKyApIHsKCQkJbGkgPSBsaXNbIGkgXTsKCQkJZGl2aWRlclRleHQgPSB0aGlzLm9wdGlvbnMuYXV0b2RpdmlkZXJzU2VsZWN0b3IoICQoIGxpICkgKTsKCgkJCWlmICggZGl2aWRlclRleHQgJiYgbGFzdERpdmlkZXJUZXh0ICE9PSBkaXZpZGVyVGV4dCApIHsKCQkJCWRpdmlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAibGkiICk7CgkJCQlkaXZpZGVyLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSggZGl2aWRlclRleHQgKSApOwoJCQkJZGl2aWRlci5zZXRBdHRyaWJ1dGUoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyb2xlIiwgImxpc3QtZGl2aWRlciIgKTsKCQkJCWxpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBkaXZpZGVyLCBsaSApOwoJCQl9CgoJCQlsYXN0RGl2aWRlclRleHQgPSBkaXZpZGVyVGV4dDsKCQl9Cgl9Cn0pOwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgp2YXIgcmRpdmlkZXIgPSAvKF58XHMpdWktbGktZGl2aWRlcigkfFxzKS8sCglyaGlkZGVuID0gLyhefFxzKXVpLXNjcmVlbi1oaWRkZW4oJHxccykvOwoKJC53aWRnZXQoICJtb2JpbGUubGlzdHZpZXciLCAkLm1vYmlsZS5saXN0dmlldywgewoJb3B0aW9uczogewoJCWhpZGVEaXZpZGVyczogZmFsc2UKCX0sCgoJX2FmdGVyTGlzdHZpZXdSZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl2YXIgaXRlbXMsIGlkeCwgaXRlbSwgaGlkZURpdmlkZXIgPSB0cnVlOwoKCQl0aGlzLl9zdXBlckFwcGx5KCBhcmd1bWVudHMgKTsKCgkJaWYgKCB0aGlzLm9wdGlvbnMuaGlkZURpdmlkZXJzICkgewoJCQlpdGVtcyA9IHRoaXMuX2dldENoaWxkcmVuQnlUYWdOYW1lKCB0aGlzLmVsZW1lbnRbIDAgXSwgImxpIiwgIkxJIiApOwoJCQlmb3IgKCBpZHggPSBpdGVtcy5sZW5ndGggLSAxIDsgaWR4ID4gLTEgOyBpZHgtLSApIHsKCQkJCWl0ZW0gPSBpdGVtc1sgaWR4IF07CgkJCQlpZiAoIGl0ZW0uY2xhc3NOYW1lLm1hdGNoKCByZGl2aWRlciApICkgewoJCQkJCWlmICggaGlkZURpdmlkZXIgKSB7CgkJCQkJCWl0ZW0uY2xhc3NOYW1lID0gaXRlbS5jbGFzc05hbWUgKyAiIHVpLXNjcmVlbi1oaWRkZW4iOwoJCQkJCX0KCQkJCQloaWRlRGl2aWRlciA9IHRydWU7CgkJCQl9IGVsc2UgewoJCQkJCWlmICggIWl0ZW0uY2xhc3NOYW1lLm1hdGNoKCByaGlkZGVuICkgKSB7CgkJCQkJCWhpZGVEaXZpZGVyID0gZmFsc2U7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJfQp9KTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5tb2JpbGUubm9qcyA9IGZ1bmN0aW9uKCB0YXJnZXQgKSB7CgkkKCAiOmpxbURhdGEocm9sZT0nbm9qcycpIiwgdGFyZ2V0ICkuYWRkQ2xhc3MoICJ1aS1ub2pzIiApOwp9OwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLm1vYmlsZS5iZWhhdmlvcnMuZm9ybVJlc2V0ID0gewoJX2hhbmRsZUZvcm1SZXNldDogZnVuY3Rpb24oKSB7CgkJdGhpcy5fb24oIHRoaXMuZWxlbWVudC5jbG9zZXN0KCAiZm9ybSIgKSwgewoJCQlyZXNldDogZnVuY3Rpb24oKSB7CgkJCQl0aGlzLl9kZWxheSggIl9yZXNldCIgKTsKCQkJfQoJCX0pOwoJfQp9OwoKfSkoIGpRdWVyeSApOwoKLyoKKiAiY2hlY2tib3hyYWRpbyIgcGx1Z2luCiovCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLmNoZWNrYm94cmFkaW8iLCAkLmV4dGVuZCggewoKCWluaXRTZWxlY3RvcjogImlucHV0Om5vdCggOmpxbURhdGEocm9sZT0nZmxpcHN3aXRjaCcgKSApW3R5cGU9J2NoZWNrYm94J10saW5wdXRbdHlwZT0ncmFkaW8nXTpub3QoIDpqcW1EYXRhKHJvbGU9J2ZsaXBzd2l0Y2gnICkpIiwKCglvcHRpb25zOiB7CgkJdGhlbWU6ICJpbmhlcml0IiwKCQltaW5pOiBmYWxzZSwKCQl3cmFwcGVyQ2xhc3M6IG51bGwsCgkJZW5oYW5jZWQ6IGZhbHNlLAoJCWljb25wb3M6ICJsZWZ0IgoKCX0sCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl2YXIgaW5wdXQgPSB0aGlzLmVsZW1lbnQsCgkJCW8gPSB0aGlzLm9wdGlvbnMsCgkJCWluaGVyaXRBdHRyID0gZnVuY3Rpb24oIGlucHV0LCBkYXRhQXR0ciApIHsKCQkJCXJldHVybiBpbnB1dC5qcW1EYXRhKCBkYXRhQXR0ciApIHx8CgkJCQkJaW5wdXQuY2xvc2VzdCggImZvcm0sIGZpZWxkc2V0IiApLmpxbURhdGEoIGRhdGFBdHRyICk7CgkJCX0sCgkJCS8vIE5PVEU6IFdpbmRvd3MgUGhvbmUgY291bGQgbm90IGZpbmQgdGhlIGxhYmVsIHRocm91Z2ggYSBzZWxlY3RvcgoJCQkvLyBmaWx0ZXIgd29ya3MgdGhvdWdoLgoJCQlwYXJlbnRMYWJlbCA9IGlucHV0LmNsb3Nlc3QoICJsYWJlbCIgKSwKCQkJbGFiZWwgPSBwYXJlbnRMYWJlbC5sZW5ndGggPyBwYXJlbnRMYWJlbCA6CgkJCQlpbnB1dAoJCQkJCS5jbG9zZXN0KCAiZm9ybSwgZmllbGRzZXQsIDpqcW1EYXRhKHJvbGU9J3BhZ2UnKSwgOmpxbURhdGEocm9sZT0nZGlhbG9nJykiICkKCQkJCQkuZmluZCggImxhYmVsIiApCgkJCQkJLmZpbHRlciggIltmb3I9JyIgKyAkLm1vYmlsZS5wYXRoLmhhc2hUb1NlbGVjdG9yKCBpbnB1dFswXS5pZCApICsgIiddIiApCgkJCQkJLmZpcnN0KCksCgkJCWlucHV0dHlwZSA9IGlucHV0WzBdLnR5cGUsCgkJCWNoZWNrZWRDbGFzcyA9ICJ1aS0iICsgaW5wdXR0eXBlICsgIi1vbiIsCgkJCXVuY2hlY2tlZENsYXNzID0gInVpLSIgKyBpbnB1dHR5cGUgKyAiLW9mZiI7CgoJCWlmICggaW5wdXR0eXBlICE9PSAiY2hlY2tib3giICYmIGlucHV0dHlwZSAhPT0gInJhZGlvIiApIHsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCB0aGlzLmVsZW1lbnRbMF0uZGlzYWJsZWQgKSB7CgkJCXRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IHRydWU7CgkJfQoKCQlvLmljb25wb3MgPSBpbmhlcml0QXR0ciggaW5wdXQsICJpY29ucG9zIiApIHx8IGxhYmVsLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJpY29ucG9zIiApIHx8IG8uaWNvbnBvcywKCgkJLy8gRXN0YWJsaXNoIG9wdGlvbnMKCQlvLm1pbmkgPSBpbmhlcml0QXR0ciggaW5wdXQsICJtaW5pIiApIHx8IG8ubWluaTsKCgkJLy8gRXhwb3NlIGZvciBvdGhlciBtZXRob2RzCgkJJC5leHRlbmQoIHRoaXMsIHsKCQkJaW5wdXQ6IGlucHV0LAoJCQlsYWJlbDogbGFiZWwsCgkJCXBhcmVudExhYmVsOiBwYXJlbnRMYWJlbCwKCQkJaW5wdXR0eXBlOiBpbnB1dHR5cGUsCgkJCWNoZWNrZWRDbGFzczogY2hlY2tlZENsYXNzLAoJCQl1bmNoZWNrZWRDbGFzczogdW5jaGVja2VkQ2xhc3MKCQl9KTsKCgkJaWYgKCAhdGhpcy5vcHRpb25zLmVuaGFuY2VkICkgewoJCQl0aGlzLl9lbmhhbmNlKCk7CgkJfQoKCQl0aGlzLl9vbiggbGFiZWwsIHsKCQkJdm1vdXNlb3ZlcjogIl9oYW5kbGVMYWJlbFZNb3VzZU92ZXIiLAoJCQl2Y2xpY2s6ICJfaGFuZGxlTGFiZWxWQ2xpY2siCgkJfSk7CgoJCXRoaXMuX29uKCBpbnB1dCwgewoJCQl2bW91c2Vkb3duOiAiX2NhY2hlVmFscyIsCgkJCXZjbGljazogIl9oYW5kbGVJbnB1dFZDbGljayIsCgkJCWZvY3VzOiAiX2hhbmRsZUlucHV0Rm9jdXMiLAoJCQlibHVyOiAiX2hhbmRsZUlucHV0Qmx1ciIKCQl9KTsKCgkJdGhpcy5faGFuZGxlRm9ybVJlc2V0KCk7CgkJdGhpcy5yZWZyZXNoKCk7Cgl9LAoKCV9lbmhhbmNlOiBmdW5jdGlvbigpIHsKCQl0aGlzLmxhYmVsLmFkZENsYXNzKCAidWktYnRuIHVpLWNvcm5lci1hbGwiKTsKCgkJaWYgKCB0aGlzLnBhcmVudExhYmVsLmxlbmd0aCA+IDAgKSB7CgkJCXRoaXMuaW5wdXQuYWRkKCB0aGlzLmxhYmVsICkud3JhcEFsbCggdGhpcy5fd3JhcHBlcigpICk7CgkJfSBlbHNlIHsKCQkJLy90aGlzLmVsZW1lbnQucmVwbGFjZVdpdGgoIHRoaXMuaW5wdXQuYWRkKCB0aGlzLmxhYmVsICkud3JhcEFsbCggdGhpcy5fd3JhcHBlcigpICkgKTsKCQkJdGhpcy5lbGVtZW50LndyYXAoIHRoaXMuX3dyYXBwZXIoKSApOwoJCQl0aGlzLmVsZW1lbnQucGFyZW50KCkucHJlcGVuZCggdGhpcy5sYWJlbCApOwoJCX0KCgkJLy8gV3JhcCB0aGUgaW5wdXQgKyBsYWJlbCBpbiBhIGRpdgoKCQl0aGlzLl9zZXRPcHRpb25zKHsKCQkJInRoZW1lIjogdGhpcy5vcHRpb25zLnRoZW1lLAoJCQkiaWNvbnBvcyI6IHRoaXMub3B0aW9ucy5pY29ucG9zLAoJCQkibWluaSI6IHRoaXMub3B0aW9ucy5taW5pCgkJfSk7CgoJfSwKCglfd3JhcHBlcjogZnVuY3Rpb24oKSB7CgkJcmV0dXJuICQoICI8ZGl2IGNsYXNzPSciICArCgkJCSggdGhpcy5vcHRpb25zLndyYXBwZXJDbGFzcyA/IHRoaXMub3B0aW9ucy53cmFwcGVyQ2xhc3MgOiAiIiApICsKCQkJIiB1aS0iICsgdGhpcy5pbnB1dHR5cGUgKwoJCQkoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCA/ICIgdWktc3RhdGUtZGlzYWJsZWQiIDogIiIgKSArICInID4iICk7Cgl9LAoKCV9oYW5kbGVJbnB1dEZvY3VzOiBmdW5jdGlvbigpIHsKCQl0aGlzLmxhYmVsLmFkZENsYXNzKCAkLm1vYmlsZS5mb2N1c0NsYXNzICk7Cgl9LAoKCV9oYW5kbGVJbnB1dEJsdXI6IGZ1bmN0aW9uKCkgewoJCXRoaXMubGFiZWwucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmZvY3VzQ2xhc3MgKTsKCX0sCgoJX2hhbmRsZUlucHV0VkNsaWNrOiBmdW5jdGlvbigpIHsKCQl2YXIgJHRoaXMgPSB0aGlzLmVsZW1lbnQ7CgoJCS8vIEFkZHMgY2hlY2tlZCBhdHRyaWJ1dGUgdG8gY2hlY2tlZCBpbnB1dCB3aGVuIGtleWJvYXJkIGlzIHVzZWQKCQlpZiAoICR0aGlzLmlzKCAiOmNoZWNrZWQiICkgKSB7CgoJCQkkdGhpcy5wcm9wKCAiY2hlY2tlZCIsIHRydWUpOwoJCQl0aGlzLl9nZXRJbnB1dFNldCgpLm5vdCggJHRoaXMgKS5wcm9wKCAiY2hlY2tlZCIsIGZhbHNlICk7CgkJfSBlbHNlIHsKCQkJJHRoaXMucHJvcCggImNoZWNrZWQiLCBmYWxzZSApOwoJCX0KCgkJdGhpcy5fdXBkYXRlQWxsKCk7Cgl9LAoKCV9oYW5kbGVMYWJlbFZNb3VzZU92ZXI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQlpZiAoIHRoaXMubGFiZWwucGFyZW50KCkuaGFzQ2xhc3MoICJ1aS1zdGF0ZS1kaXNhYmxlZCIgKSApIHsKCQkJZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CgkJfQoJfSwKCglfaGFuZGxlTGFiZWxWQ2xpY2s6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgaW5wdXQgPSB0aGlzLmVsZW1lbnQ7CgoJCWlmICggaW5wdXQuaXMoICI6ZGlzYWJsZWQiICkgKSB7CgkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCXJldHVybjsKCQl9CgoJCXRoaXMuX2NhY2hlVmFscygpOwoKCQlpbnB1dC5wcm9wKCAiY2hlY2tlZCIsIHRoaXMuaW5wdXR0eXBlID09PSAicmFkaW8iICYmIHRydWUgfHwgIWlucHV0LnByb3AoICJjaGVja2VkIiApICk7CgoJCS8vIHRyaWdnZXIgY2xpY2sgaGFuZGxlcidzIGJvdW5kIGRpcmVjdGx5IHRvIHRoZSBpbnB1dCBhcyBhIHN1YnN0aXR1dGUgZm9yCgkJLy8gaG93IGxhYmVsIGNsaWNrcyBiZWhhdmUgbm9ybWFsbHkgaW4gdGhlIGJyb3dzZXJzCgkJLy8gVE9ETzogaXQgd291bGQgYmUgbmljZSB0byBsZXQgdGhlIGJyb3dzZXIncyBoYW5kbGUgdGhlIGNsaWNrcyBhbmQgcGFzcyB0aGVtCgkJLy8gICAgICAgdGhyb3VnaCB0byB0aGUgYXNzb2NpYXRlIGlucHV0LiB3ZSBjYW4gc3dhbGxvdyB0aGF0IGNsaWNrIGF0IHRoZSBwYXJlbnQKCQkvLyAgICAgICB3cmFwcGVyIGVsZW1lbnQgbGV2ZWwKCQlpbnB1dC50cmlnZ2VySGFuZGxlciggImNsaWNrIiApOwoKCQkvLyBJbnB1dCBzZXQgZm9yIGNvbW1vbiByYWRpbyBidXR0b25zIHdpbGwgY29udGFpbiBhbGwgdGhlIHJhZGlvCgkJLy8gYnV0dG9ucywgYnV0IHdpbGwgbm90IGZvciBjaGVja2JveGVzLiBjbGVhcmluZyB0aGUgY2hlY2tlZCBzdGF0dXMKCQkvLyBvZiBvdGhlciByYWRpb3MgZW5zdXJlcyB0aGUgYWN0aXZlIGJ1dHRvbiBzdGF0ZSBpcyBhcHBsaWVkIHByb3Blcmx5CgkJdGhpcy5fZ2V0SW5wdXRTZXQoKS5ub3QoIGlucHV0ICkucHJvcCggImNoZWNrZWQiLCBmYWxzZSApOwoKCQl0aGlzLl91cGRhdGVBbGwoKTsKCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCV9jYWNoZVZhbHM6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX2dldElucHV0U2V0KCkuZWFjaCggZnVuY3Rpb24oKSB7CgkJCSQoIHRoaXMgKS5hdHRyKCJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJjYWNoZVZhbCIsIHRoaXMuY2hlY2tlZCApOwoJCX0pOwoJfSwKCgkvL3JldHVybnMgZWl0aGVyIGEgc2V0IG9mIHJhZGlvcyB3aXRoIHRoZSBzYW1lIG5hbWUgYXR0cmlidXRlLCBvciBhIHNpbmdsZSBjaGVja2JveAoJX2dldElucHV0U2V0OiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMuaW5wdXR0eXBlID09PSAiY2hlY2tib3giICkgewoJCQlyZXR1cm4gdGhpcy5lbGVtZW50OwoJCX0KCgkJcmV0dXJuIHRoaXMuZWxlbWVudC5jbG9zZXN0KCAiZm9ybSwgOmpxbURhdGEocm9sZT0ncGFnZScpLCA6anFtRGF0YShyb2xlPSdkaWFsb2cnKSIgKQoJCQkuZmluZCggImlucHV0W25hbWU9JyIgKyB0aGlzLmVsZW1lbnRbIDAgXS5uYW1lICsgIiddW3R5cGU9JyIgKyB0aGlzLmlucHV0dHlwZSArICInXSIgKTsKCX0sCgoJX3VwZGF0ZUFsbDogZnVuY3Rpb24oKSB7CgkJdmFyIHNlbGYgPSB0aGlzOwoKCQl0aGlzLl9nZXRJbnB1dFNldCgpLmVhY2goIGZ1bmN0aW9uKCkgewoJCQl2YXIgJHRoaXMgPSAkKCB0aGlzICk7CgoJCQlpZiAoIHRoaXMuY2hlY2tlZCB8fCBzZWxmLmlucHV0dHlwZSA9PT0gImNoZWNrYm94IiApIHsKCQkJCSR0aGlzLnRyaWdnZXIoICJjaGFuZ2UiICk7CgkJCX0KCQl9KQoJCS5jaGVja2JveHJhZGlvKCAicmVmcmVzaCIgKTsKCX0sCgoJX3Jlc2V0OiBmdW5jdGlvbigpIHsKCQl0aGlzLnJlZnJlc2goKTsKCX0sCgoJLy8gSXMgdGhlIHdpZGdldCBzdXBwb3NlZCB0byBkaXNwbGF5IGFuIGljb24/CglfaGFzSWNvbjogZnVuY3Rpb24oKSB7CgkJdmFyIGNvbnRyb2xncm91cCwgY29udHJvbGdyb3VwV2lkZ2V0LAoJCQljb250cm9sZ3JvdXBDb25zdHJ1Y3RvciA9ICQubW9iaWxlLmNvbnRyb2xncm91cDsKCgkJLy8gSWYgdGhlIGNvbnRyb2xncm91cCB3aWRnZXQgaXMgZGVmaW5lZCAuLi4KCQlpZiAoIGNvbnRyb2xncm91cENvbnN0cnVjdG9yICkgewoJCQljb250cm9sZ3JvdXAgPSB0aGlzLmVsZW1lbnQuY2xvc2VzdCgKCQkJCSI6bW9iaWxlLWNvbnRyb2xncm91cCwiICsKCQkJCWNvbnRyb2xncm91cENvbnN0cnVjdG9yLnByb3RvdHlwZS5pbml0U2VsZWN0b3IgKTsKCgkJCS8vIC4uLiBhbmQgdGhlIGNoZWNrYm94IGlzIGluIGEgY29udHJvbGdyb3VwIC4uLgoJCQlpZiAoIGNvbnRyb2xncm91cC5sZW5ndGggPiAwICkgewoKCQkJCS8vIC4uLiBsb29rIGZvciBhIGNvbnRyb2xncm91cCB3aWRnZXQgaW5zdGFuY2UsIGFuZCAuLi4KCQkJCWNvbnRyb2xncm91cFdpZGdldCA9ICQuZGF0YSggY29udHJvbGdyb3VwWyAwIF0sICJtb2JpbGUtY29udHJvbGdyb3VwIiApOwoKCQkJCS8vIC4uLiBpZiBmb3VuZCwgZGVjaWRlIGJhc2VkIG9uIHRoZSBvcHRpb24gdmFsdWUsIC4uLgoJCQkJcmV0dXJuICggKCBjb250cm9sZ3JvdXBXaWRnZXQgPyBjb250cm9sZ3JvdXBXaWRnZXQub3B0aW9ucy50eXBlIDoKCgkJCQkJLy8gLi4uIG90aGVyd2lzZSBkZWNpZGUgYmFzZWQgb24gdGhlICJ0eXBlIiBkYXRhIGF0dHJpYnV0ZS4KCQkJCQljb250cm9sZ3JvdXAuYXR0ciggImRhdGEtIiArICQubW9iaWxlLm5zICsgInR5cGUiICkgKSAhPT0gImhvcml6b250YWwiICk7CgkJCX0KCQl9CgoJCS8vIE5vcm1hbGx5LCB0aGUgd2lkZ2V0IGRpc3BsYXlzIGFuIGljb24uCgkJcmV0dXJuIHRydWU7Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCXZhciBoYXNJY29uID0gdGhpcy5faGFzSWNvbigpLAoJCQlpc0NoZWNrZWQgPSB0aGlzLmVsZW1lbnRbIDAgXS5jaGVja2VkLAoJCQlhY3RpdmUgPSAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcywKCQkJaWNvbnBvc0NsYXNzID0gInVpLWJ0bi1pY29uLSIgKyB0aGlzLm9wdGlvbnMuaWNvbnBvcywKCQkJYWRkQ2xhc3NlcyA9IFtdLAoJCQlyZW1vdmVDbGFzc2VzID0gW107CgoJCWlmICggaGFzSWNvbiApIHsKCQkJcmVtb3ZlQ2xhc3Nlcy5wdXNoKCBhY3RpdmUgKTsKCQkJYWRkQ2xhc3Nlcy5wdXNoKCBpY29ucG9zQ2xhc3MgKTsKCQl9IGVsc2UgewoJCQlyZW1vdmVDbGFzc2VzLnB1c2goIGljb25wb3NDbGFzcyApOwoJCQkoIGlzQ2hlY2tlZCA/IGFkZENsYXNzZXMgOiByZW1vdmVDbGFzc2VzICkucHVzaCggYWN0aXZlICk7CgkJfQoKCQlpZiAoIGlzQ2hlY2tlZCApIHsKCQkJYWRkQ2xhc3Nlcy5wdXNoKCB0aGlzLmNoZWNrZWRDbGFzcyApOwoJCQlyZW1vdmVDbGFzc2VzLnB1c2goIHRoaXMudW5jaGVja2VkQ2xhc3MgKTsKCQl9IGVsc2UgewoJCQlhZGRDbGFzc2VzLnB1c2goIHRoaXMudW5jaGVja2VkQ2xhc3MgKTsKCQkJcmVtb3ZlQ2xhc3Nlcy5wdXNoKCB0aGlzLmNoZWNrZWRDbGFzcyApOwoJCX0KCgkJdGhpcy5sYWJlbAoJCQkuYWRkQ2xhc3MoIGFkZENsYXNzZXMuam9pbiggIiAiICkgKQoJCQkucmVtb3ZlQ2xhc3MoIHJlbW92ZUNsYXNzZXMuam9pbiggIiAiICkgKTsKCX0sCgoJd2lkZ2V0OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5sYWJlbC5wYXJlbnQoKTsKCX0sCgoJX3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCXZhciBsYWJlbCA9IHRoaXMubGFiZWwsCgkJCWN1cnJlbnRPcHRpb25zID0gdGhpcy5vcHRpb25zLAoJCQlvdXRlciA9IHRoaXMud2lkZ2V0KCksCgkJCWhhc0ljb24gPSB0aGlzLl9oYXNJY29uKCk7CgoJCWlmICggb3B0aW9ucy5kaXNhYmxlZCAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLmlucHV0LnByb3AoICJkaXNhYmxlZCIsICEhb3B0aW9ucy5kaXNhYmxlZCApOwoJCQlvdXRlci50b2dnbGVDbGFzcyggInVpLXN0YXRlLWRpc2FibGVkIiwgISFvcHRpb25zLmRpc2FibGVkICk7CgkJfQoJCWlmICggb3B0aW9ucy5taW5pICE9PSB1bmRlZmluZWQgKSB7CgkJCW91dGVyLnRvZ2dsZUNsYXNzKCAidWktbWluaSIsICEhb3B0aW9ucy5taW5pICk7CgkJfQoJCWlmICggb3B0aW9ucy50aGVtZSAhPT0gdW5kZWZpbmVkICkgewoJCQlsYWJlbAoJCQkJLnJlbW92ZUNsYXNzKCAidWktYnRuLSIgKyBjdXJyZW50T3B0aW9ucy50aGVtZSApCgkJCQkuYWRkQ2xhc3MoICJ1aS1idG4tIiArIG9wdGlvbnMudGhlbWUgKTsKCQl9CgkJaWYgKCBvcHRpb25zLndyYXBwZXJDbGFzcyAhPT0gdW5kZWZpbmVkICkgewoJCQlvdXRlcgoJCQkJLnJlbW92ZUNsYXNzKCBjdXJyZW50T3B0aW9ucy53cmFwcGVyQ2xhc3MgKQoJCQkJLmFkZENsYXNzKCBvcHRpb25zLndyYXBwZXJDbGFzcyApOwoJCX0KCQlpZiAoIG9wdGlvbnMuaWNvbnBvcyAhPT0gdW5kZWZpbmVkICYmIGhhc0ljb24gKSB7CgkJCWxhYmVsLnJlbW92ZUNsYXNzKCAidWktYnRuLWljb24tIiArIGN1cnJlbnRPcHRpb25zLmljb25wb3MgKS5hZGRDbGFzcyggInVpLWJ0bi1pY29uLSIgKyBvcHRpb25zLmljb25wb3MgKTsKCQl9IGVsc2UgaWYgKCAhaGFzSWNvbiApIHsKCQkJbGFiZWwucmVtb3ZlQ2xhc3MoICJ1aS1idG4taWNvbi0iICsgY3VycmVudE9wdGlvbnMuaWNvbnBvcyApOwoJCX0KCQl0aGlzLl9zdXBlciggb3B0aW9ucyApOwoJfQoKfSwgJC5tb2JpbGUuYmVoYXZpb3JzLmZvcm1SZXNldCApICk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLmJ1dHRvbiIsIHsKCglpbml0U2VsZWN0b3I6ICJpbnB1dFt0eXBlPSdidXR0b24nXSwgaW5wdXRbdHlwZT0nc3VibWl0J10sIGlucHV0W3R5cGU9J3Jlc2V0J10iLAoKCW9wdGlvbnM6IHsKCQl0aGVtZTogbnVsbCwKCQlpY29uOiBudWxsLAoJCWljb25wb3M6ICJsZWZ0IiwKCQlpY29uc2hhZG93OiBmYWxzZSwgLyogVE9ETzogRGVwcmVjYXRlZCBpbiAxLjQsIHJlbW92ZSBpbiAxLjUuICovCgkJY29ybmVyczogdHJ1ZSwKCQlzaGFkb3c6IHRydWUsCgkJaW5saW5lOiBudWxsLAoJCW1pbmk6IG51bGwsCgkJd3JhcHBlckNsYXNzOiBudWxsLAoJCWVuaGFuY2VkOiBmYWxzZQoJfSwKCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCgkJaWYgKCB0aGlzLmVsZW1lbnQuaXMoICI6ZGlzYWJsZWQiICkgKSB7CgkJCXRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IHRydWU7CgkJfQoKCQlpZiAoICF0aGlzLm9wdGlvbnMuZW5oYW5jZWQgKSB7CgkJCXRoaXMuX2VuaGFuY2UoKTsKCQl9CgoJCSQuZXh0ZW5kKCB0aGlzLCB7CgkJCXdyYXBwZXI6IHRoaXMuZWxlbWVudC5wYXJlbnQoKQoJCX0pOwoKCQl0aGlzLl9vbiggewoJCQlmb2N1czogZnVuY3Rpb24oKSB7CgkJCQl0aGlzLndpZGdldCgpLmFkZENsYXNzKCAkLm1vYmlsZS5mb2N1c0NsYXNzICk7CgkJCX0sCgoJCQlibHVyOiBmdW5jdGlvbigpIHsKCQkJCXRoaXMud2lkZ2V0KCkucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmZvY3VzQ2xhc3MgKTsKCQkJfQoJCX0pOwoKCQl0aGlzLnJlZnJlc2goIHRydWUgKTsKCX0sCgoJX2VuaGFuY2U6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudC53cmFwKCB0aGlzLl9idXR0b24oKSApOwoJfSwKCglfYnV0dG9uOiBmdW5jdGlvbigpIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJaWNvbkNsYXNzZXMgPSB0aGlzLl9nZXRJY29uQ2xhc3NlcyggdGhpcy5vcHRpb25zICk7CgoJCXJldHVybiAkKCI8ZGl2IGNsYXNzPSd1aS1idG4gdWktaW5wdXQtYnRuIiArCgkJCSggb3B0aW9ucy53cmFwcGVyQ2xhc3MgPyAiICIgKyBvcHRpb25zLndyYXBwZXJDbGFzcyA6ICIiICkgKwoJCQkoIG9wdGlvbnMudGhlbWUgPyAiIHVpLWJ0bi0iICsgb3B0aW9ucy50aGVtZSA6ICIiICkgKwoJCQkoIG9wdGlvbnMuY29ybmVycyA/ICIgdWktY29ybmVyLWFsbCIgOiAiIiApICsKCQkJKCBvcHRpb25zLnNoYWRvdyA/ICIgdWktc2hhZG93IiA6ICIiICkgKwoJCQkoIG9wdGlvbnMuaW5saW5lID8gIiB1aS1idG4taW5saW5lIiA6ICIiICkgKwoJCQkoIG9wdGlvbnMubWluaSA/ICIgdWktbWluaSIgOiAiIiApICsKCQkJKCBvcHRpb25zLmRpc2FibGVkID8gIiB1aS1zdGF0ZS1kaXNhYmxlZCIgOiAiIiApICsKCQkJKCBpY29uQ2xhc3NlcyA/ICggIiAiICsgaWNvbkNsYXNzZXMgKSA6ICIiICkgKwoJCQkiJyA+IiArIHRoaXMuZWxlbWVudC52YWwoKSArICI8L2Rpdj4iICk7Cgl9LAoKCXdpZGdldDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMud3JhcHBlcjsKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKCB0aGlzLmJ1dHRvbiApOwoJCQl0aGlzLmJ1dHRvbi5yZW1vdmUoKTsKCX0sCgoJX2dldEljb25DbGFzc2VzOiBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQlyZXR1cm4gKCBvcHRpb25zLmljb24gPyAoICJ1aS1pY29uLSIgKyBvcHRpb25zLmljb24gKwoJCQkoIG9wdGlvbnMuaWNvbnNoYWRvdyA/ICIgdWktc2hhZG93LWljb24iIDogIiIgKSArIC8qIFRPRE86IERlcHJlY2F0ZWQgaW4gMS40LCByZW1vdmUgaW4gMS41LiAqLwoJCQkiIHVpLWJ0bi1pY29uLSIgKyBvcHRpb25zLmljb25wb3MgKSA6ICIiICk7Cgl9LAoKCV9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQl2YXIgb3V0ZXIgPSB0aGlzLndpZGdldCgpOwoKCQlpZiAoIG9wdGlvbnMudGhlbWUgIT09IHVuZGVmaW5lZCApIHsKCQkJb3V0ZXIKCQkJCS5yZW1vdmVDbGFzcyggdGhpcy5vcHRpb25zLnRoZW1lICkKCQkJCS5hZGRDbGFzcyggInVpLWJ0bi0iICsgb3B0aW9ucy50aGVtZSApOwoJCX0KCQlpZiAoIG9wdGlvbnMuY29ybmVycyAhPT0gdW5kZWZpbmVkICkgewoJCQlvdXRlci50b2dnbGVDbGFzcyggInVpLWNvcm5lci1hbGwiLCBvcHRpb25zLmNvcm5lcnMgKTsKCQl9CgkJaWYgKCBvcHRpb25zLnNoYWRvdyAhPT0gdW5kZWZpbmVkICkgewoJCQlvdXRlci50b2dnbGVDbGFzcyggInVpLXNoYWRvdyIsIG9wdGlvbnMuc2hhZG93ICk7CgkJfQoJCWlmICggb3B0aW9ucy5pbmxpbmUgIT09IHVuZGVmaW5lZCApIHsKCQkJb3V0ZXIudG9nZ2xlQ2xhc3MoICJ1aS1idG4taW5saW5lIiwgb3B0aW9ucy5pbmxpbmUgKTsKCQl9CgkJaWYgKCBvcHRpb25zLm1pbmkgIT09IHVuZGVmaW5lZCApIHsKCQkJb3V0ZXIudG9nZ2xlQ2xhc3MoICJ1aS1taW5pIiwgb3B0aW9ucy5taW5pICk7CgkJfQoJCWlmICggb3B0aW9ucy5kaXNhYmxlZCAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLmVsZW1lbnQucHJvcCggImRpc2FibGVkIiwgb3B0aW9ucy5kaXNhYmxlZCApOwoJCQlvdXRlci50b2dnbGVDbGFzcyggInVpLXN0YXRlLWRpc2FibGVkIiwgb3B0aW9ucy5kaXNhYmxlZCApOwoJCX0KCgkJaWYgKCBvcHRpb25zLmljb24gIT09IHVuZGVmaW5lZCB8fAoJCQkJb3B0aW9ucy5pY29uc2hhZG93ICE9PSB1bmRlZmluZWQgfHwgLyogVE9ETzogRGVwcmVjYXRlZCBpbiAxLjQsIHJlbW92ZSBpbiAxLjUuICovCgkJCQlvcHRpb25zLmljb25wb3MgIT09IHVuZGVmaW5lZCApIHsKCQkJb3V0ZXIKCQkJCS5yZW1vdmVDbGFzcyggdGhpcy5fZ2V0SWNvbkNsYXNzZXMoIHRoaXMub3B0aW9ucyApICkKCQkJCS5hZGRDbGFzcyggdGhpcy5fZ2V0SWNvbkNsYXNzZXMoCgkJCQkJJC5leHRlbmQoIHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMgKSApICk7CgkJfQoKCQl0aGlzLl9zdXBlciggb3B0aW9ucyApOwoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbiggY3JlYXRlICkgewoJCWlmICggdGhpcy5vcHRpb25zLmljb24gJiYgdGhpcy5vcHRpb25zLmljb25wb3MgPT09ICJub3RleHQiICYmIHRoaXMuZWxlbWVudC5hdHRyKCAidGl0bGUiICkgKSB7CgkJCXRoaXMuZWxlbWVudC5hdHRyKCAidGl0bGUiLCB0aGlzLmVsZW1lbnQudmFsKCkgKTsKCQl9CgkJaWYgKCAhY3JlYXRlICkgewoJCQl2YXIgb3JpZ2luYWxFbGVtZW50ID0gdGhpcy5lbGVtZW50LmRldGFjaCgpOwoJCQkkKCB0aGlzLndyYXBwZXIgKS50ZXh0KCB0aGlzLmVsZW1lbnQudmFsKCkgKS5hcHBlbmQoIG9yaWdpbmFsRWxlbWVudCApOwoJCX0KCX0KfSk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQgKSB7Cgl2YXIJbWV0YSA9ICQoICJtZXRhW25hbWU9dmlld3BvcnRdIiApLAoJCWluaXRpYWxDb250ZW50ID0gbWV0YS5hdHRyKCAiY29udGVudCIgKSwKCQlkaXNhYmxlZFpvb20gPSBpbml0aWFsQ29udGVudCArICIsbWF4aW11bS1zY2FsZT0xLCB1c2VyLXNjYWxhYmxlPW5vIiwKCQllbmFibGVkWm9vbSA9IGluaXRpYWxDb250ZW50ICsgIixtYXhpbXVtLXNjYWxlPTEwLCB1c2VyLXNjYWxhYmxlPXllcyIsCgkJZGlzYWJsZWRJbml0aWFsbHkgPSAvKHVzZXItc2NhbGFibGVbXHNdKj1bXHNdKm5vKXwobWF4aW11bS1zY2FsZVtcc10qPVtcc10qMSlbJCxcc10vLnRlc3QoIGluaXRpYWxDb250ZW50ICk7CgoJJC5tb2JpbGUuem9vbSA9ICQuZXh0ZW5kKCB7fSwgewoJCWVuYWJsZWQ6ICFkaXNhYmxlZEluaXRpYWxseSwKCQlsb2NrZWQ6IGZhbHNlLAoJCWRpc2FibGU6IGZ1bmN0aW9uKCBsb2NrICkgewoJCQlpZiAoICFkaXNhYmxlZEluaXRpYWxseSAmJiAhJC5tb2JpbGUuem9vbS5sb2NrZWQgKSB7CgkJCQltZXRhLmF0dHIoICJjb250ZW50IiwgZGlzYWJsZWRab29tICk7CgkJCQkkLm1vYmlsZS56b29tLmVuYWJsZWQgPSBmYWxzZTsKCQkJCSQubW9iaWxlLnpvb20ubG9ja2VkID0gbG9jayB8fCBmYWxzZTsKCQkJfQoJCX0sCgkJZW5hYmxlOiBmdW5jdGlvbiggdW5sb2NrICkgewoJCQlpZiAoICFkaXNhYmxlZEluaXRpYWxseSAmJiAoICEkLm1vYmlsZS56b29tLmxvY2tlZCB8fCB1bmxvY2sgPT09IHRydWUgKSApIHsKCQkJCW1ldGEuYXR0ciggImNvbnRlbnQiLCBlbmFibGVkWm9vbSApOwoJCQkJJC5tb2JpbGUuem9vbS5lbmFibGVkID0gdHJ1ZTsKCQkJCSQubW9iaWxlLnpvb20ubG9ja2VkID0gZmFsc2U7CgkJCX0KCQl9LAoJCXJlc3RvcmU6IGZ1bmN0aW9uKCkgewoJCQlpZiAoICFkaXNhYmxlZEluaXRpYWxseSApIHsKCQkJCW1ldGEuYXR0ciggImNvbnRlbnQiLCBpbml0aWFsQ29udGVudCApOwoJCQkJJC5tb2JpbGUuem9vbS5lbmFibGVkID0gdHJ1ZTsKCQkJfQoJCX0KCX0pOwoKfSggalF1ZXJ5ICkpOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS50ZXh0aW5wdXQiLCB7Cglpbml0U2VsZWN0b3I6ICJpbnB1dFt0eXBlPSd0ZXh0J10sIiArCgkJImlucHV0W3R5cGU9J3NlYXJjaCddLCIgKwoJCSI6anFtRGF0YSh0eXBlPSdzZWFyY2gnKSwiICsKCQkiaW5wdXRbdHlwZT0nbnVtYmVyJ10sIiArCgkJIjpqcW1EYXRhKHR5cGU9J251bWJlcicpLCIgKwoJCSJpbnB1dFt0eXBlPSdwYXNzd29yZCddLCIgKwoJCSJpbnB1dFt0eXBlPSdlbWFpbCddLCIgKwoJCSJpbnB1dFt0eXBlPSd1cmwnXSwiICsKCQkiaW5wdXRbdHlwZT0ndGVsJ10sIiArCgkJInRleHRhcmVhLCIgKwoJCSJpbnB1dFt0eXBlPSd0aW1lJ10sIiArCgkJImlucHV0W3R5cGU9J2RhdGUnXSwiICsKCQkiaW5wdXRbdHlwZT0nbW9udGgnXSwiICsKCQkiaW5wdXRbdHlwZT0nd2VlayddLCIgKwoJCSJpbnB1dFt0eXBlPSdkYXRldGltZSddLCIgKwoJCSJpbnB1dFt0eXBlPSdkYXRldGltZS1sb2NhbCddLCIgKwoJCSJpbnB1dFt0eXBlPSdjb2xvciddLCIgKwoJCSJpbnB1dDpub3QoW3R5cGVdKSwiICsKCQkiaW5wdXRbdHlwZT0nZmlsZSddIiwKCglvcHRpb25zOiB7CgkJdGhlbWU6IG51bGwsCgkJY29ybmVyczogdHJ1ZSwKCQltaW5pOiBmYWxzZSwKCQkvLyBUaGlzIG9wdGlvbiBkZWZhdWx0cyB0byB0cnVlIG9uIGlPUyBkZXZpY2VzLgoJCXByZXZlbnRGb2N1c1pvb206IC9pUGhvbmV8aVBhZHxpUG9kLy50ZXN0KCBuYXZpZ2F0b3IucGxhdGZvcm0gKSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoICJBcHBsZVdlYktpdCIgKSA+IC0xLAoJCXdyYXBwZXJDbGFzczogIiIsCgkJZW5oYW5jZWQ6IGZhbHNlCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJaXNTZWFyY2ggPSB0aGlzLmVsZW1lbnQuaXMoICJbdHlwZT0nc2VhcmNoJ10sIDpqcW1EYXRhKHR5cGU9J3NlYXJjaCcpIiApLAoJCQlpc1RleHRhcmVhID0gdGhpcy5lbGVtZW50WyAwIF0udGFnTmFtZSA9PT0gIlRFWFRBUkVBIiwKCQkJaXNSYW5nZSA9IHRoaXMuZWxlbWVudC5pcyggIltkYXRhLSIgKyAoICQubW9iaWxlLm5zIHx8ICIiICkgKyAidHlwZT0ncmFuZ2UnXSIgKSwKCQkJaW5wdXROZWVkc1dyYXAgPSAoICh0aGlzLmVsZW1lbnQuaXMoICJpbnB1dCIgKSB8fAoJCQkJdGhpcy5lbGVtZW50LmlzKCAiW2RhdGEtIiArICggJC5tb2JpbGUubnMgfHwgIiIgKSArICJ0eXBlPSdzZWFyY2gnXSIgKSApICYmCgkJCQkJIWlzUmFuZ2UgKTsKCgkJaWYgKCB0aGlzLmVsZW1lbnQucHJvcCggImRpc2FibGVkIiApICkgewoJCQlvcHRpb25zLmRpc2FibGVkID0gdHJ1ZTsKCQl9CgoJCSQuZXh0ZW5kKCB0aGlzLCB7CgkJCWNsYXNzZXM6IHRoaXMuX2NsYXNzZXNGcm9tT3B0aW9ucygpLAoJCQlpc1NlYXJjaDogaXNTZWFyY2gsCgkJCWlzVGV4dGFyZWE6IGlzVGV4dGFyZWEsCgkJCWlzUmFuZ2U6IGlzUmFuZ2UsCgkJCWlucHV0TmVlZHNXcmFwOiBpbnB1dE5lZWRzV3JhcAoJCX0pOwoKCQl0aGlzLl9hdXRvQ29ycmVjdCgpOwoKCQlpZiAoICFvcHRpb25zLmVuaGFuY2VkICkgewoJCQl0aGlzLl9lbmhhbmNlKCk7CgkJfQoKCQl0aGlzLl9vbiggewoJCQkiZm9jdXMiOiAiX2hhbmRsZUZvY3VzIiwKCQkJImJsdXIiOiAiX2hhbmRsZUJsdXIiCgkJfSk7CgoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl0aGlzLnNldE9wdGlvbnMoewoJCQkiZGlzYWJsZWQiIDogdGhpcy5lbGVtZW50LmlzKCAiOmRpc2FibGVkIiApCgkJfSk7Cgl9LAoKCV9lbmhhbmNlOiBmdW5jdGlvbigpIHsKCQl2YXIgZWxlbWVudENsYXNzZXMgPSBbXTsKCgkJaWYgKCB0aGlzLmlzVGV4dGFyZWEgKSB7CgkJCWVsZW1lbnRDbGFzc2VzLnB1c2goICJ1aS1pbnB1dC10ZXh0IiApOwoJCX0KCgkJaWYgKCB0aGlzLmlzVGV4dGFyZWEgfHwgdGhpcy5pc1JhbmdlICkgewoJCQllbGVtZW50Q2xhc3Nlcy5wdXNoKCAidWktc2hhZG93LWluc2V0IiApOwoJCX0KCgkJLy8ic2VhcmNoIiBhbmQgInRleHQiIGlucHV0IHdpZGdldHMKCQlpZiAoIHRoaXMuaW5wdXROZWVkc1dyYXAgKSB7CgkJCXRoaXMuZWxlbWVudC53cmFwKCB0aGlzLl93cmFwKCkgKTsKCQl9IGVsc2UgewoJCQllbGVtZW50Q2xhc3NlcyA9IGVsZW1lbnRDbGFzc2VzLmNvbmNhdCggdGhpcy5jbGFzc2VzICk7CgkJfQoKCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoIGVsZW1lbnRDbGFzc2VzLmpvaW4oICIgIiApICk7Cgl9LAoKCXdpZGdldDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuICggdGhpcy5pbnB1dE5lZWRzV3JhcCApID8gdGhpcy5lbGVtZW50LnBhcmVudCgpIDogdGhpcy5lbGVtZW50OwoJfSwKCglfY2xhc3Nlc0Zyb21PcHRpb25zOiBmdW5jdGlvbigpIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJY2xhc3NlcyA9IFtdOwoKCQljbGFzc2VzLnB1c2goICJ1aS1ib2R5LSIgKyAoICggb3B0aW9ucy50aGVtZSA9PT0gbnVsbCApID8gImluaGVyaXQiIDogb3B0aW9ucy50aGVtZSApICk7CgkJaWYgKCBvcHRpb25zLmNvcm5lcnMgKSB7CgkJCWNsYXNzZXMucHVzaCggInVpLWNvcm5lci1hbGwiICk7CgkJfQoJCWlmICggb3B0aW9ucy5taW5pICkgewoJCQljbGFzc2VzLnB1c2goICJ1aS1taW5pIiApOwoJCX0KCQlpZiAoIG9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCWNsYXNzZXMucHVzaCggInVpLXN0YXRlLWRpc2FibGVkIiApOwoJCX0KCQlpZiAoIG9wdGlvbnMud3JhcHBlckNsYXNzICkgewoJCQljbGFzc2VzLnB1c2goIG9wdGlvbnMud3JhcHBlckNsYXNzICk7CgkJfQoKCQlyZXR1cm4gY2xhc3NlczsKCX0sCgoJX3dyYXA6IGZ1bmN0aW9uKCkgewoJCXJldHVybiAkKCAiPGRpdiBjbGFzcz0nIiArCgkJCSggdGhpcy5pc1NlYXJjaCA/ICJ1aS1pbnB1dC1zZWFyY2ggIiA6ICJ1aS1pbnB1dC10ZXh0ICIgKSArCgkJCXRoaXMuY2xhc3Nlcy5qb2luKCAiICIgKSArICIgIiArCgkJCSJ1aS1zaGFkb3ctaW5zZXQnPjwvZGl2PiIgKTsKCX0sCgoJX2F1dG9Db3JyZWN0OiBmdW5jdGlvbigpIHsKCQkvLyBYWFg6IFRlbXBvcmFyeSB3b3JrYXJvdW5kIGZvciBpc3N1ZSA3ODUgKEFwcGxlIGJ1ZyA4OTEwNTg5KS4KCQkvLyAgICAgIFR1cm4gb2ZmIGF1dG9jb3JyZWN0IGFuZCBhdXRvY29tcGxldGUgb24gbm9uLWlPUyA1IGRldmljZXMKCQkvLyAgICAgIHNpbmNlIHRoZSBwb3B1cCB0aGV5IHVzZSBjYW4ndCBiZSBkaXNtaXNzZWQgYnkgdGhlIHVzZXIuIE5vdGUKCQkvLyAgICAgIHRoYXQgd2UgdGVzdCBmb3IgdGhlIHByZXNlbmNlIG9mIHRoZSBmZWF0dXJlIGJ5IGxvb2tpbmcgZm9yCgkJLy8gICAgICB0aGUgYXV0b2NvcnJlY3QgcHJvcGVydHkgb24gdGhlIGlucHV0IGVsZW1lbnQuIFdlIGN1cnJlbnRseQoJCS8vICAgICAgaGF2ZSBubyB0ZXN0IGZvciBpT1MgNSBvciBuZXdlciBzbyB3ZSdyZSB0ZW1wb3JhcmlseSB1c2luZwoJCS8vICAgICAgdGhlIHRvdWNoT3ZlcmZsb3cgc3VwcG9ydCBmbGFnIGZvciBqUU0gMS4wLiBZZXMsIEkgZmVlbCBkaXJ0eS4KCQkvLyAgICAgIC0gamJsYXMKCQlpZiAoIHR5cGVvZiB0aGlzLmVsZW1lbnRbMF0uYXV0b2NvcnJlY3QgIT09ICJ1bmRlZmluZWQiICYmCgkJCSEkLnN1cHBvcnQudG91Y2hPdmVyZmxvdyApIHsKCgkJCS8vIFNldCB0aGUgYXR0cmlidXRlIGluc3RlYWQgb2YgdGhlIHByb3BlcnR5IGp1c3QgaW4gY2FzZSB0aGVyZQoJCQkvLyBpcyBjb2RlIHRoYXQgYXR0ZW1wdHMgdG8gbWFrZSBtb2RpZmljYXRpb25zIHZpYSBIVE1MLgoJCQl0aGlzLmVsZW1lbnRbMF0uc2V0QXR0cmlidXRlKCAiYXV0b2NvcnJlY3QiLCAib2ZmIiApOwoJCQl0aGlzLmVsZW1lbnRbMF0uc2V0QXR0cmlidXRlKCAiYXV0b2NvbXBsZXRlIiwgIm9mZiIgKTsKCQl9Cgl9LAoKCV9oYW5kbGVCbHVyOiBmdW5jdGlvbigpIHsKCQl0aGlzLndpZGdldCgpLnJlbW92ZUNsYXNzKCAkLm1vYmlsZS5mb2N1c0NsYXNzICk7CgkJaWYgKCB0aGlzLm9wdGlvbnMucHJldmVudEZvY3VzWm9vbSApIHsKCQkJJC5tb2JpbGUuem9vbS5lbmFibGUoIHRydWUgKTsKCQl9Cgl9LAoKCV9oYW5kbGVGb2N1czogZnVuY3Rpb24oKSB7CgkJLy8gSW4gbWFueSBzaXR1YXRpb25zLCBpT1Mgd2lsbCB6b29tIGludG8gdGhlIGlucHV0IHVwb24gdGFwLCB0aGlzCgkJLy8gcHJldmVudHMgdGhhdCBmcm9tIGhhcHBlbmluZwoJCWlmICggdGhpcy5vcHRpb25zLnByZXZlbnRGb2N1c1pvb20gKSB7CgkJCSQubW9iaWxlLnpvb20uZGlzYWJsZSggdHJ1ZSApOwoJCX0KCQl0aGlzLndpZGdldCgpLmFkZENsYXNzKCAkLm1vYmlsZS5mb2N1c0NsYXNzICk7Cgl9LAoKCV9zZXRPcHRpb25zOiBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7CgkJdmFyIG91dGVyID0gdGhpcy53aWRnZXQoKTsKCgkJdGhpcy5fc3VwZXIoIG9wdGlvbnMgKTsKCgkJaWYgKCAhKCBvcHRpb25zLmRpc2FibGVkID09PSB1bmRlZmluZWQgJiYKCQkJb3B0aW9ucy5taW5pID09PSB1bmRlZmluZWQgJiYKCQkJb3B0aW9ucy5jb3JuZXJzID09PSB1bmRlZmluZWQgJiYKCQkJb3B0aW9ucy50aGVtZSA9PT0gdW5kZWZpbmVkICYmCgkJCW9wdGlvbnMud3JhcHBlckNsYXNzID09PSB1bmRlZmluZWQgKSApIHsKCgkJCW91dGVyLnJlbW92ZUNsYXNzKCB0aGlzLmNsYXNzZXMuam9pbiggIiAiICkgKTsKCQkJdGhpcy5jbGFzc2VzID0gdGhpcy5fY2xhc3Nlc0Zyb21PcHRpb25zKCk7CgkJCW91dGVyLmFkZENsYXNzKCB0aGlzLmNsYXNzZXMuam9pbiggIiAiICkgKTsKCQl9CgoJCWlmICggb3B0aW9ucy5kaXNhYmxlZCAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLmVsZW1lbnQucHJvcCggImRpc2FibGVkIiwgISFvcHRpb25zLmRpc2FibGVkICk7CgkJfQoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJaWYgKCB0aGlzLm9wdGlvbnMuZW5oYW5jZWQgKSB7CgkJCXJldHVybjsKCQl9CgkJaWYgKCB0aGlzLmlucHV0TmVlZHNXcmFwICkgewoJCQl0aGlzLmVsZW1lbnQudW53cmFwKCk7CgkJfQoJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggInVpLWlucHV0LXRleHQgIiArIHRoaXMuY2xhc3Nlcy5qb2luKCAiICIgKSApOwoJfQp9KTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC53aWRnZXQoICJtb2JpbGUuc2xpZGVyIiwgJC5leHRlbmQoIHsKCWluaXRTZWxlY3RvcjogImlucHV0W3R5cGU9J3JhbmdlJ10sIDpqcW1EYXRhKHR5cGU9J3JhbmdlJyksIDpqcW1EYXRhKHJvbGU9J3NsaWRlcicpIiwKCgl3aWRnZXRFdmVudFByZWZpeDogInNsaWRlIiwKCglvcHRpb25zOiB7CgkJdGhlbWU6IG51bGwsCgkJdHJhY2tUaGVtZTogbnVsbCwKCQljb3JuZXJzOiB0cnVlLAoJCW1pbmk6IGZhbHNlLAoJCWhpZ2hsaWdodDogZmFsc2UKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgoJCS8vIFRPRE86IEVhY2ggb2YgdGhlc2Ugc2hvdWxkIGhhdmUgY29tbWVudHMgZXhwbGFpbiB3aGF0IHRoZXkncmUgZm9yCgkJdmFyIHNlbGYgPSB0aGlzLAoJCQljb250cm9sID0gdGhpcy5lbGVtZW50LAoJCQl0cmFja1RoZW1lID0gdGhpcy5vcHRpb25zLnRyYWNrVGhlbWUgfHwgJC5tb2JpbGUuZ2V0QXR0cmlidXRlKCBjb250cm9sWyAwIF0sICJ0aGVtZSIgKSwKCQkJdHJhY2tUaGVtZUNsYXNzID0gdHJhY2tUaGVtZSA/ICIgdWktYmFyLSIgKyB0cmFja1RoZW1lIDogIiB1aS1iYXItaW5oZXJpdCIsCgkJCWNvcm5lckNsYXNzID0gKCB0aGlzLm9wdGlvbnMuY29ybmVycyB8fCBjb250cm9sLmpxbURhdGEoICJjb3JuZXJzIiApICkgPyAiIHVpLWNvcm5lci1hbGwiIDogIiIsCgkJCW1pbmlDbGFzcyA9ICggdGhpcy5vcHRpb25zLm1pbmkgfHwgY29udHJvbC5qcW1EYXRhKCAibWluaSIgKSApID8gIiB1aS1taW5pIiA6ICIiLAoJCQljVHlwZSA9IGNvbnRyb2xbIDAgXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLAoJCQlpc1RvZ2dsZVN3aXRjaCA9ICggY1R5cGUgPT09ICJzZWxlY3QiICksCgkJCWlzUmFuZ2VzbGlkZXIgPSBjb250cm9sLnBhcmVudCgpLmlzKCAiOmpxbURhdGEocm9sZT0ncmFuZ2VzbGlkZXInKSIgKSwKCQkJc2VsZWN0Q2xhc3MgPSAoIGlzVG9nZ2xlU3dpdGNoICkgPyAidWktc2xpZGVyLXN3aXRjaCIgOiAiIiwKCQkJY29udHJvbElEID0gY29udHJvbC5hdHRyKCAiaWQiICksCgkJCSRsYWJlbCA9ICQoICJbZm9yPSciICsgY29udHJvbElEICsgIiddIiApLAoJCQlsYWJlbElEID0gJGxhYmVsLmF0dHIoICJpZCIgKSB8fCBjb250cm9sSUQgKyAiLWxhYmVsIiwKCQkJbWluID0gIWlzVG9nZ2xlU3dpdGNoID8gcGFyc2VGbG9hdCggY29udHJvbC5hdHRyKCAibWluIiApICkgOiAwLAoJCQltYXggPSAgIWlzVG9nZ2xlU3dpdGNoID8gcGFyc2VGbG9hdCggY29udHJvbC5hdHRyKCAibWF4IiApICkgOiBjb250cm9sLmZpbmQoICJvcHRpb24iICkubGVuZ3RoLTEsCgkJCXN0ZXAgPSB3aW5kb3cucGFyc2VGbG9hdCggY29udHJvbC5hdHRyKCAic3RlcCIgKSB8fCAxICksCgkJCWRvbUhhbmRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJhIiApLAoJCQloYW5kbGUgPSAkKCBkb21IYW5kbGUgKSwKCQkJZG9tU2xpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKSwKCQkJc2xpZGVyID0gJCggZG9tU2xpZGVyICksCgkJCXZhbHVlYmcgPSB0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0ICYmICFpc1RvZ2dsZVN3aXRjaCA/IChmdW5jdGlvbigpIHsKCQkJCXZhciBiZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7CgkJCQliZy5jbGFzc05hbWUgPSAidWktc2xpZGVyLWJnICIgKyAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzczsKCQkJCXJldHVybiAkKCBiZyApLnByZXBlbmRUbyggc2xpZGVyICk7CgkJCX0pKCkgOiBmYWxzZSwKCQkJb3B0aW9ucywKCQkJd3JhcHBlciwKCQkJaiwgbGVuZ3RoLAoJCQlpLCBvcHRpb25zQ291bnQsIG9yaWdUYWJJbmRleCwKCQkJc2lkZSwgYWN0aXZlQ2xhc3MsIHNsaWRlckltZzsKCgkJJGxhYmVsLmF0dHIoICJpZCIsIGxhYmVsSUQgKTsKCQl0aGlzLmlzVG9nZ2xlU3dpdGNoID0gaXNUb2dnbGVTd2l0Y2g7CgoJCWRvbUhhbmRsZS5zZXRBdHRyaWJ1dGUoICJocmVmIiwgIiMiICk7CgkJZG9tU2xpZGVyLnNldEF0dHJpYnV0ZSggInJvbGUiLCAiYXBwbGljYXRpb24iICk7CgkJZG9tU2xpZGVyLmNsYXNzTmFtZSA9IFsgdGhpcy5pc1RvZ2dsZVN3aXRjaCA/ICJ1aS1zbGlkZXIgdWktc2xpZGVyLXRyYWNrIHVpLXNoYWRvdy1pbnNldCAiIDogInVpLXNsaWRlci10cmFjayB1aS1zaGFkb3ctaW5zZXQgIiwgc2VsZWN0Q2xhc3MsIHRyYWNrVGhlbWVDbGFzcywgY29ybmVyQ2xhc3MsIG1pbmlDbGFzcyBdLmpvaW4oICIiICk7CgkJZG9tSGFuZGxlLmNsYXNzTmFtZSA9ICJ1aS1zbGlkZXItaGFuZGxlIjsKCQlkb21TbGlkZXIuYXBwZW5kQ2hpbGQoIGRvbUhhbmRsZSApOwoKCQloYW5kbGUuYXR0cih7CgkJCSJyb2xlIjogInNsaWRlciIsCgkJCSJhcmlhLXZhbHVlbWluIjogbWluLAoJCQkiYXJpYS12YWx1ZW1heCI6IG1heCwKCQkJImFyaWEtdmFsdWVub3ciOiB0aGlzLl92YWx1ZSgpLAoJCQkiYXJpYS12YWx1ZXRleHQiOiB0aGlzLl92YWx1ZSgpLAoJCQkidGl0bGUiOiB0aGlzLl92YWx1ZSgpLAoJCQkiYXJpYS1sYWJlbGxlZGJ5IjogbGFiZWxJRAoJCX0pOwoKCQkkLmV4dGVuZCggdGhpcywgewoJCQlzbGlkZXI6IHNsaWRlciwKCQkJaGFuZGxlOiBoYW5kbGUsCgkJCWNvbnRyb2w6IGNvbnRyb2wsCgkJCXR5cGU6IGNUeXBlLAoJCQlzdGVwOiBzdGVwLAoJCQltYXg6IG1heCwKCQkJbWluOiBtaW4sCgkJCXZhbHVlYmc6IHZhbHVlYmcsCgkJCWlzUmFuZ2VzbGlkZXI6IGlzUmFuZ2VzbGlkZXIsCgkJCWRyYWdnaW5nOiBmYWxzZSwKCQkJYmVmb3JlU3RhcnQ6IG51bGwsCgkJCXVzZXJNb2RpZmllZDogZmFsc2UsCgkJCW1vdXNlTW92ZWQ6IGZhbHNlCgkJfSk7CgoJCWlmICggaXNUb2dnbGVTd2l0Y2ggKSB7CgkJCS8vIFRPRE86IHJlc3RvcmUgb3JpZ2luYWwgdGFiaW5kZXggKGlmIGFueSkgaW4gYSBkZXN0cm95IG1ldGhvZAoJCQlvcmlnVGFiSW5kZXggPSBjb250cm9sLmF0dHIoICJ0YWJpbmRleCIgKTsKCQkJaWYgKCBvcmlnVGFiSW5kZXggKSB7CgkJCQloYW5kbGUuYXR0ciggInRhYmluZGV4Iiwgb3JpZ1RhYkluZGV4ICk7CgkJCX0KCQkJY29udHJvbC5hdHRyKCAidGFiaW5kZXgiLCAiLTEiICkuZm9jdXMoZnVuY3Rpb24oKSB7CgkJCQkkKCB0aGlzICkuYmx1cigpOwoJCQkJaGFuZGxlLmZvY3VzKCk7CgkJCX0pOwoKCQkJd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7CgkJCXdyYXBwZXIuY2xhc3NOYW1lID0gInVpLXNsaWRlci1pbm5lcm9mZnNldCI7CgoJCQlmb3IgKCBqID0gMCwgbGVuZ3RoID0gZG9tU2xpZGVyLmNoaWxkTm9kZXMubGVuZ3RoOyBqIDwgbGVuZ3RoOyBqKysgKSB7CgkJCQl3cmFwcGVyLmFwcGVuZENoaWxkKCBkb21TbGlkZXIuY2hpbGROb2Rlc1tqXSApOwoJCQl9CgoJCQlkb21TbGlkZXIuYXBwZW5kQ2hpbGQoIHdyYXBwZXIgKTsKCgkJCS8vIHNsaWRlci53cmFwSW5uZXIoICI8ZGl2IGNsYXNzPSd1aS1zbGlkZXItaW5uZXJvZmZzZXQnPjwvZGl2PiIgKTsKCgkJCS8vIG1ha2UgdGhlIGhhbmRsZSBtb3ZlIHdpdGggYSBzbW9vdGggdHJhbnNpdGlvbgoJCQloYW5kbGUuYWRkQ2xhc3MoICJ1aS1zbGlkZXItaGFuZGxlLXNuYXBwaW5nIiApOwoKCQkJb3B0aW9ucyA9IGNvbnRyb2wuZmluZCggIm9wdGlvbiIgKTsKCgkJCWZvciAoIGkgPSAwLCBvcHRpb25zQ291bnQgPSBvcHRpb25zLmxlbmd0aDsgaSA8IG9wdGlvbnNDb3VudDsgaSsrICkgewoJCQkJc2lkZSA9ICFpID8gImIiIDogImEiOwoJCQkJYWN0aXZlQ2xhc3MgPSAhaSA/ICIiIDogIiAiICsgJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3M7CgkJCQlzbGlkZXJJbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAic3BhbiIgKTsKCgkJCQlzbGlkZXJJbWcuY2xhc3NOYW1lID0gWyAidWktc2xpZGVyLWxhYmVsIHVpLXNsaWRlci1sYWJlbC0iLCBzaWRlLCBhY3RpdmVDbGFzcyBdLmpvaW4oICIiICk7CgkJCQlzbGlkZXJJbWcuc2V0QXR0cmlidXRlKCAicm9sZSIsICJpbWciICk7CgkJCQlzbGlkZXJJbWcuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCBvcHRpb25zW2ldLmlubmVySFRNTCApICk7CgkJCQkkKCBzbGlkZXJJbWcgKS5wcmVwZW5kVG8oIHNsaWRlciApOwoJCQl9CgoJCQlzZWxmLl9sYWJlbHMgPSAkKCAiLnVpLXNsaWRlci1sYWJlbCIsIHNsaWRlciApOwoKCQl9CgoJCS8vIG1vbml0b3IgdGhlIGlucHV0IGZvciB1cGRhdGVkIHZhbHVlcwoJCWNvbnRyb2wuYWRkQ2xhc3MoIGlzVG9nZ2xlU3dpdGNoID8gInVpLXNsaWRlci1zd2l0Y2giIDogInVpLXNsaWRlci1pbnB1dCIgKTsKCgkJdGhpcy5fb24oIGNvbnRyb2wsIHsKCQkJImNoYW5nZSI6ICJfY29udHJvbENoYW5nZSIsCgkJCSJrZXl1cCI6ICJfY29udHJvbEtleXVwIiwKCQkJImJsdXIiOiAiX2NvbnRyb2xCbHVyIiwKCQkJInZtb3VzZXVwIjogIl9jb250cm9sVk1vdXNlVXAiCgkJfSk7CgoJCXNsaWRlci5iaW5kKCAidm1vdXNlZG93biIsICQucHJveHkoIHRoaXMuX3NsaWRlclZNb3VzZURvd24sIHRoaXMgKSApCgkJCS5iaW5kKCAidmNsaWNrIiwgZmFsc2UgKTsKCgkJLy8gV2UgaGF2ZSB0byBpbnN0YW50aWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QgZm9yIHRoZSB1bmJpbmQgdG8gd29yayBwcm9wZXJseQoJCS8vIHNpbmNlIHRoZSBtZXRob2QgaXRzZWxmIGlzIGRlZmluZWQgaW4gdGhlIHByb3RvdHlwZSAoY2F1c2luZyBpdCB0byB1bmJpbmQgZXZlcnl0aGluZykKCQl0aGlzLl9vbiggZG9jdW1lbnQsIHsgInZtb3VzZW1vdmUiOiAiX3ByZXZlbnREb2N1bWVudERyYWciIH0pOwoJCXRoaXMuX29uKCBzbGlkZXIuYWRkKCBkb2N1bWVudCApLCB7ICJ2bW91c2V1cCI6ICJfc2xpZGVyVk1vdXNlVXAiIH0pOwoKCQlzbGlkZXIuaW5zZXJ0QWZ0ZXIoIGNvbnRyb2wgKTsKCgkJLy8gd3JhcCBpbiBhIGRpdiBmb3Igc3R5bGluZyBwdXJwb3NlcwoJCWlmICggIWlzVG9nZ2xlU3dpdGNoICYmICFpc1Jhbmdlc2xpZGVyICkgewoJCQl3cmFwcGVyID0gdGhpcy5vcHRpb25zLm1pbmkgPyAiPGRpdiBjbGFzcz0ndWktc2xpZGVyIHVpLW1pbmknPiIgOiAiPGRpdiBjbGFzcz0ndWktc2xpZGVyJz4iOwoKCQkJY29udHJvbC5hZGQoIHNsaWRlciApLndyYXBBbGwoIHdyYXBwZXIgKTsKCQl9CgoJCS8vIGJpbmQgdGhlIGhhbmRsZSBldmVudCBjYWxsYmFja3MgYW5kIHNldCB0aGUgY29udGV4dCB0byB0aGUgd2lkZ2V0IGluc3RhbmNlCgkJdGhpcy5fb24oIHRoaXMuaGFuZGxlLCB7CgkJCSJ2bW91c2Vkb3duIjogIl9oYW5kbGVWTW91c2VEb3duIiwKCQkJImtleWRvd24iOiAiX2hhbmRsZUtleWRvd24iLAoJCQkia2V5dXAiOiAiX2hhbmRsZUtleXVwIgoJCX0pOwoKCQl0aGlzLmhhbmRsZS5iaW5kKCAidmNsaWNrIiwgZmFsc2UgKTsKCgkJdGhpcy5faGFuZGxlRm9ybVJlc2V0KCk7CgoJCXRoaXMucmVmcmVzaCggdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUgKTsKCX0sCgoJX3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCWlmICggb3B0aW9ucy50aGVtZSAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLl9zZXRUaGVtZSggb3B0aW9ucy50aGVtZSApOwoJCX0KCgkJaWYgKCBvcHRpb25zLnRyYWNrVGhlbWUgIT09IHVuZGVmaW5lZCApIHsKCQkJdGhpcy5fc2V0VHJhY2tUaGVtZSggb3B0aW9ucy50cmFja1RoZW1lICk7CgkJfQoKCQlpZiAoIG9wdGlvbnMuY29ybmVycyAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLl9zZXRDb3JuZXJzKCBvcHRpb25zLmNvcm5lcnMgKTsKCQl9CgoJCWlmICggb3B0aW9ucy5taW5pICE9PSB1bmRlZmluZWQgKSB7CgkJCXRoaXMuX3NldE1pbmkoIG9wdGlvbnMubWluaSApOwoJCX0KCgkJaWYgKCBvcHRpb25zLmhpZ2hsaWdodCAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLl9zZXRIaWdobGlnaHQoIG9wdGlvbnMuaGlnaGxpZ2h0ICk7CgkJfQoKCQlpZiAoIG9wdGlvbnMuZGlzYWJsZWQgIT09IHVuZGVmaW5lZCApIHsKCQkJdGhpcy5fc2V0RGlzYWJsZWQoIG9wdGlvbnMuZGlzYWJsZWQgKTsKCQl9CgkJdGhpcy5fc3VwZXIoIG9wdGlvbnMgKTsKCX0sCgoJX2NvbnRyb2xDaGFuZ2U6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkvLyBpZiB0aGUgdXNlciBkcmFnZ2VkIHRoZSBoYW5kbGUsIHRoZSAiY2hhbmdlIiBldmVudCB3YXMgdHJpZ2dlcmVkIGZyb20gaW5zaWRlIHJlZnJlc2goKTsgZG9uJ3QgY2FsbCByZWZyZXNoKCkgYWdhaW4KCQlpZiAoIHRoaXMuX3RyaWdnZXIoICJjb250cm9sY2hhbmdlIiwgZXZlbnQgKSA9PT0gZmFsc2UgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJaWYgKCAhdGhpcy5tb3VzZU1vdmVkICkgewoJCQl0aGlzLnJlZnJlc2goIHRoaXMuX3ZhbHVlKCksIHRydWUgKTsKCQl9Cgl9LAoKCV9jb250cm9sS2V5dXA6IGZ1bmN0aW9uKC8qIGV2ZW50ICovKSB7IC8vIG5lY2Vzc2FyeT8KCQl0aGlzLnJlZnJlc2goIHRoaXMuX3ZhbHVlKCksIHRydWUsIHRydWUgKTsKCX0sCgoJX2NvbnRyb2xCbHVyOiBmdW5jdGlvbigvKiBldmVudCAqLykgewoJCXRoaXMucmVmcmVzaCggdGhpcy5fdmFsdWUoKSwgdHJ1ZSApOwoJfSwKCgkvLyBpdCBhcHBlYXJzIHRoZSBjbGlja2luZyB0aGUgdXAgYW5kIGRvd24gYnV0dG9ucyBpbiBjaHJvbWUgb24KCS8vIHJhbmdlL251bWJlciBpbnB1dHMgZG9lc24ndCB0cmlnZ2VyIGEgY2hhbmdlIHVudGlsIHRoZSBmaWVsZCBpcwoJLy8gYmx1cnJlZC4gSGVyZSB3ZSBjaGVjayB0aGlmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZCBhbmQgcmVmcmVzaAoJX2NvbnRyb2xWTW91c2VVcDogZnVuY3Rpb24oLyogZXZlbnQgKi8pIHsKCQl0aGlzLl9jaGVja2VkUmVmcmVzaCgpOwoJfSwKCgkvLyBOT1RFIGZvcmNlIGZvY3VzIG9uIGhhbmRsZQoJX2hhbmRsZVZNb3VzZURvd246IGZ1bmN0aW9uKC8qIGV2ZW50ICovKSB7CgkJdGhpcy5oYW5kbGUuZm9jdXMoKTsKCX0sCgoJX2hhbmRsZUtleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgaW5kZXggPSB0aGlzLl92YWx1ZSgpOwoJCWlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBJbiBhbGwgY2FzZXMgcHJldmVudCB0aGUgZGVmYXVsdCBhbmQgbWFyayB0aGUgaGFuZGxlIGFzIGFjdGl2ZQoJCXN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7CgkJCWNhc2UgJC5tb2JpbGUua2V5Q29kZS5IT01FOgoJCQljYXNlICQubW9iaWxlLmtleUNvZGUuRU5EOgoJCQljYXNlICQubW9iaWxlLmtleUNvZGUuUEFHRV9VUDoKCQkJY2FzZSAkLm1vYmlsZS5rZXlDb2RlLlBBR0VfRE9XTjoKCQkJY2FzZSAkLm1vYmlsZS5rZXlDb2RlLlVQOgoJCQljYXNlICQubW9iaWxlLmtleUNvZGUuUklHSFQ6CgkJCWNhc2UgJC5tb2JpbGUua2V5Q29kZS5ET1dOOgoJCQljYXNlICQubW9iaWxlLmtleUNvZGUuTEVGVDoKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgoJCQkJaWYgKCAhdGhpcy5fa2V5U2xpZGluZyApIHsKCQkJCQl0aGlzLl9rZXlTbGlkaW5nID0gdHJ1ZTsKCQkJCQl0aGlzLmhhbmRsZS5hZGRDbGFzcyggInVpLXN0YXRlLWFjdGl2ZSIgKTsgLyogVE9ETzogV2UgZG9uJ3QgdXNlIHRoaXMgY2xhc3MgZm9yIHN0eWxpbmcuIERvIHdlIG5lZWQgdG8gYWRkIGl0PyAqLwoJCQkJfQoKCQkJCWJyZWFrOwoJCX0KCgkJLy8gbW92ZSB0aGUgc2xpZGVyIGFjY29yZGluZyB0byB0aGUga2V5cHJlc3MKCQlzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkgewoJCQljYXNlICQubW9iaWxlLmtleUNvZGUuSE9NRToKCQkJCXRoaXMucmVmcmVzaCggdGhpcy5taW4gKTsKCQkJCWJyZWFrOwoJCQljYXNlICQubW9iaWxlLmtleUNvZGUuRU5EOgoJCQkJdGhpcy5yZWZyZXNoKCB0aGlzLm1heCApOwoJCQkJYnJlYWs7CgkJCWNhc2UgJC5tb2JpbGUua2V5Q29kZS5QQUdFX1VQOgoJCQljYXNlICQubW9iaWxlLmtleUNvZGUuVVA6CgkJCWNhc2UgJC5tb2JpbGUua2V5Q29kZS5SSUdIVDoKCQkJCXRoaXMucmVmcmVzaCggaW5kZXggKyB0aGlzLnN0ZXAgKTsKCQkJCWJyZWFrOwoJCQljYXNlICQubW9iaWxlLmtleUNvZGUuUEFHRV9ET1dOOgoJCQljYXNlICQubW9iaWxlLmtleUNvZGUuRE9XTjoKCQkJY2FzZSAkLm1vYmlsZS5rZXlDb2RlLkxFRlQ6CgkJCQl0aGlzLnJlZnJlc2goIGluZGV4IC0gdGhpcy5zdGVwICk7CgkJCQlicmVhazsKCQl9Cgl9LCAvLyByZW1vdmUgYWN0aXZlIG1hcmsKCglfaGFuZGxlS2V5dXA6IGZ1bmN0aW9uKC8qIGV2ZW50ICovKSB7CgkJaWYgKCB0aGlzLl9rZXlTbGlkaW5nICkgewoJCQl0aGlzLl9rZXlTbGlkaW5nID0gZmFsc2U7CgkJCXRoaXMuaGFuZGxlLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtYWN0aXZlIiApOyAvKiBTZWUgY29tbWVudCBhYm92ZS4gKi8KCQl9Cgl9LAoKCV9zbGlkZXJWTW91c2VEb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJLy8gTk9URTogd2UgZG9uJ3QgZG8gdGhpcyBpbiByZWZyZXNoIGJlY2F1c2Ugd2Ugc3RpbGwgd2FudCB0bwoJCS8vICAgICAgIHN1cHBvcnQgcHJvZ3JhbW1hdGljIGFsdGVyYXRpb24gb2YgZGlzYWJsZWQgaW5wdXRzCgkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgISggZXZlbnQud2hpY2ggPT09IDEgfHwgZXZlbnQud2hpY2ggPT09IDAgfHwgZXZlbnQud2hpY2ggPT09IHVuZGVmaW5lZCApICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCWlmICggdGhpcy5fdHJpZ2dlciggImJlZm9yZXN0YXJ0IiwgZXZlbnQgKSA9PT0gZmFsc2UgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJdGhpcy5kcmFnZ2luZyA9IHRydWU7CgkJdGhpcy51c2VyTW9kaWZpZWQgPSBmYWxzZTsKCQl0aGlzLm1vdXNlTW92ZWQgPSBmYWxzZTsKCgkJaWYgKCB0aGlzLmlzVG9nZ2xlU3dpdGNoICkgewoJCQl0aGlzLmJlZm9yZVN0YXJ0ID0gdGhpcy5lbGVtZW50WzBdLnNlbGVjdGVkSW5kZXg7CgkJfQoKCQl0aGlzLnJlZnJlc2goIGV2ZW50ICk7CgkJdGhpcy5fdHJpZ2dlciggInN0YXJ0IiApOwoJCXJldHVybiBmYWxzZTsKCX0sCgoJX3NsaWRlclZNb3VzZVVwOiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMuZHJhZ2dpbmcgKSB7CgkJCXRoaXMuZHJhZ2dpbmcgPSBmYWxzZTsKCgkJCWlmICggdGhpcy5pc1RvZ2dsZVN3aXRjaCApIHsKCQkJCS8vIG1ha2UgdGhlIGhhbmRsZSBtb3ZlIHdpdGggYSBzbW9vdGggdHJhbnNpdGlvbgoJCQkJdGhpcy5oYW5kbGUuYWRkQ2xhc3MoICJ1aS1zbGlkZXItaGFuZGxlLXNuYXBwaW5nIiApOwoKCQkJCWlmICggdGhpcy5tb3VzZU1vdmVkICkgewoJCQkJCS8vIHRoaXMgaXMgYSBkcmFnLCBjaGFuZ2UgdGhlIHZhbHVlIG9ubHkgaWYgdXNlciBkcmFnZ2VkIGVub3VnaAoJCQkJCWlmICggdGhpcy51c2VyTW9kaWZpZWQgKSB7CgkJCQkJCXRoaXMucmVmcmVzaCggdGhpcy5iZWZvcmVTdGFydCA9PT0gMCA/IDEgOiAwICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJdGhpcy5yZWZyZXNoKCB0aGlzLmJlZm9yZVN0YXJ0ICk7CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQkvLyB0aGlzIGlzIGp1c3QgYSBjbGljaywgY2hhbmdlIHRoZSB2YWx1ZQoJCQkJCXRoaXMucmVmcmVzaCggdGhpcy5iZWZvcmVTdGFydCA9PT0gMCA/IDEgOiAwICk7CgkJCQl9CgkJCX0KCgkJCXRoaXMubW91c2VNb3ZlZCA9IGZhbHNlOwoJCQl0aGlzLl90cmlnZ2VyKCAic3RvcCIgKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0sCgoJX3ByZXZlbnREb2N1bWVudERyYWc6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJLy8gTk9URTogd2UgZG9uJ3QgZG8gdGhpcyBpbiByZWZyZXNoIGJlY2F1c2Ugd2Ugc3RpbGwgd2FudCB0bwoJCQkvLyAgICAgICBzdXBwb3J0IHByb2dyYW1tYXRpYyBhbHRlcmF0aW9uIG9mIGRpc2FibGVkIGlucHV0cwoJCQlpZiAoIHRoaXMuX3RyaWdnZXIoICJkcmFnIiwgZXZlbnQgKSA9PT0gZmFsc2UpIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCQlpZiAoIHRoaXMuZHJhZ2dpbmcgJiYgIXRoaXMub3B0aW9ucy5kaXNhYmxlZCApIHsKCgkJCQkvLyB0aGlzLm1vdXNlTW92ZWQgbXVzdCBiZSB1cGRhdGVkIGJlZm9yZSByZWZyZXNoKCkgYmVjYXVzZSBpdCB3aWxsIGJlIHVzZWQgaW4gdGhlIGNvbnRyb2wgImNoYW5nZSIgZXZlbnQKCQkJCXRoaXMubW91c2VNb3ZlZCA9IHRydWU7CgoJCQkJaWYgKCB0aGlzLmlzVG9nZ2xlU3dpdGNoICkgewoJCQkJCS8vIG1ha2UgdGhlIGhhbmRsZSBtb3ZlIGluIHN5bmMgd2l0aCB0aGUgbW91c2UKCQkJCQl0aGlzLmhhbmRsZS5yZW1vdmVDbGFzcyggInVpLXNsaWRlci1oYW5kbGUtc25hcHBpbmciICk7CgkJCQl9CgoJCQkJdGhpcy5yZWZyZXNoKCBldmVudCApOwoKCQkJCS8vIG9ubHkgYWZ0ZXIgcmVmcmVzaCgpIHlvdSBjYW4gY2FsY3VsYXRlIHRoaXMudXNlck1vZGlmaWVkCgkJCQl0aGlzLnVzZXJNb2RpZmllZCA9IHRoaXMuYmVmb3JlU3RhcnQgIT09IHRoaXMuZWxlbWVudFswXS5zZWxlY3RlZEluZGV4OwoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfSwKCglfY2hlY2tlZFJlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCWlmICggdGhpcy52YWx1ZSAhPT0gdGhpcy5fdmFsdWUoKSApIHsKCQkJdGhpcy5yZWZyZXNoKCB0aGlzLl92YWx1ZSgpICk7CgkJfQoJfSwKCglfdmFsdWU6IGZ1bmN0aW9uKCkgewoJCXJldHVybiAgdGhpcy5pc1RvZ2dsZVN3aXRjaCA/IHRoaXMuZWxlbWVudFswXS5zZWxlY3RlZEluZGV4IDogcGFyc2VGbG9hdCggdGhpcy5lbGVtZW50LnZhbCgpICkgOwoJfSwKCglfcmVzZXQ6IGZ1bmN0aW9uKCkgewoJCXRoaXMucmVmcmVzaCggdW5kZWZpbmVkLCBmYWxzZSwgdHJ1ZSApOwoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbiggdmFsLCBpc2Zyb21Db250cm9sLCBwcmV2ZW50SW5wdXRVcGRhdGUgKSB7CgkJLy8gTk9URTogd2UgZG9uJ3QgcmV0dXJuIGhlcmUgYmVjYXVzZSB3ZSB3YW50IHRvIHN1cHBvcnQgcHJvZ3JhbW1hdGljCgkJLy8gICAgICAgYWx0ZXJhdGlvbiBvZiB0aGUgaW5wdXQgdmFsdWUsIHdoaWNoIHNob3VsZCBzdGlsbCB1cGRhdGUgdGhlIHNsaWRlcgoKCQl2YXIgc2VsZiA9IHRoaXMsCgkJCXBhcmVudFRoZW1lID0gJC5tb2JpbGUuZ2V0QXR0cmlidXRlKCB0aGlzLmVsZW1lbnRbIDAgXSwgInRoZW1lIiApLAoJCQl0aGVtZSA9IHRoaXMub3B0aW9ucy50aGVtZSB8fCBwYXJlbnRUaGVtZSwKCQkJdGhlbWVDbGFzcyA9ICB0aGVtZSA/ICIgdWktYnRuLSIgKyB0aGVtZSA6ICIiLAoJCQl0cmFja1RoZW1lID0gdGhpcy5vcHRpb25zLnRyYWNrVGhlbWUgfHwgcGFyZW50VGhlbWUsCgkJCXRyYWNrVGhlbWVDbGFzcyA9IHRyYWNrVGhlbWUgPyAiIHVpLWJhci0iICsgdHJhY2tUaGVtZSA6ICIgdWktYmFyLWluaGVyaXQiLAoJCQljb3JuZXJDbGFzcyA9IHRoaXMub3B0aW9ucy5jb3JuZXJzID8gIiB1aS1jb3JuZXItYWxsIiA6ICIiLAoJCQltaW5pQ2xhc3MgPSB0aGlzLm9wdGlvbnMubWluaSA/ICIgdWktbWluaSIgOiAiIiwKCQkJbGVmdCwgd2lkdGgsIGRhdGEsIHRvbCwKCQkJcHhTdGVwLCBwZXJjZW50LAoJCQljb250cm9sLCBpc0lucHV0LCBvcHRpb25FbGVtZW50cywgbWluLCBtYXgsIHN0ZXAsCgkJCW5ld3ZhbCwgdmFsTW9kU3RlcCwgYWxpZ25WYWx1ZSwgcGVyY2VudFBlclN0ZXAsCgkJCWhhbmRsZVBlcmNlbnQsIGFQZXJjZW50LCBiUGVyY2VudCwKCQkJdmFsdWVDaGFuZ2VkOwoKCQlzZWxmLnNsaWRlclswXS5jbGFzc05hbWUgPSBbIHRoaXMuaXNUb2dnbGVTd2l0Y2ggPyAidWktc2xpZGVyIHVpLXNsaWRlci1zd2l0Y2ggdWktc2xpZGVyLXRyYWNrIHVpLXNoYWRvdy1pbnNldCIgOiAidWktc2xpZGVyLXRyYWNrIHVpLXNoYWRvdy1pbnNldCIsIHRyYWNrVGhlbWVDbGFzcywgY29ybmVyQ2xhc3MsIG1pbmlDbGFzcyBdLmpvaW4oICIiICk7CgkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy5lbGVtZW50LnByb3AoICJkaXNhYmxlZCIgKSApIHsKCQkJdGhpcy5kaXNhYmxlKCk7CgkJfQoKCQkvLyBzZXQgdGhlIHN0b3JlZCB2YWx1ZSBmb3IgY29tcGFyaXNvbiBsYXRlcgoJCXRoaXMudmFsdWUgPSB0aGlzLl92YWx1ZSgpOwoJCWlmICggdGhpcy5vcHRpb25zLmhpZ2hsaWdodCAmJiAhdGhpcy5pc1RvZ2dsZVN3aXRjaCAmJiB0aGlzLnNsaWRlci5maW5kKCAiLnVpLXNsaWRlci1iZyIgKS5sZW5ndGggPT09IDAgKSB7CgkJCXRoaXMudmFsdWViZyA9IChmdW5jdGlvbigpIHsKCQkJCXZhciBiZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7CgkJCQliZy5jbGFzc05hbWUgPSAidWktc2xpZGVyLWJnICIgKyAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzczsKCQkJCXJldHVybiAkKCBiZyApLnByZXBlbmRUbyggc2VsZi5zbGlkZXIgKTsKCQkJfSkoKTsKCQl9CgkJdGhpcy5oYW5kbGUuYWRkQ2xhc3MoICJ1aS1idG4iICsgdGhlbWVDbGFzcyArICIgdWktc2hhZG93IiApOwoKCQljb250cm9sID0gdGhpcy5lbGVtZW50OwoJCWlzSW5wdXQgPSAhdGhpcy5pc1RvZ2dsZVN3aXRjaDsKCQlvcHRpb25FbGVtZW50cyA9IGlzSW5wdXQgPyBbXSA6IGNvbnRyb2wuZmluZCggIm9wdGlvbiIgKTsKCQltaW4gPSAgaXNJbnB1dCA/IHBhcnNlRmxvYXQoIGNvbnRyb2wuYXR0ciggIm1pbiIgKSApIDogMDsKCQltYXggPSBpc0lucHV0ID8gcGFyc2VGbG9hdCggY29udHJvbC5hdHRyKCAibWF4IiApICkgOiBvcHRpb25FbGVtZW50cy5sZW5ndGggLSAxOwoJCXN0ZXAgPSAoIGlzSW5wdXQgJiYgcGFyc2VGbG9hdCggY29udHJvbC5hdHRyKCAic3RlcCIgKSApID4gMCApID8gcGFyc2VGbG9hdCggY29udHJvbC5hdHRyKCAic3RlcCIgKSApIDogMTsKCgkJaWYgKCB0eXBlb2YgdmFsID09PSAib2JqZWN0IiApIHsKCQkJZGF0YSA9IHZhbDsKCQkJLy8gYSBzbGlnaHQgdG9sZXJhbmNlIGhlbHBlZCBnZXQgdG8gdGhlIGVuZHMgb2YgdGhlIHNsaWRlcgoJCQl0b2wgPSA4OwoKCQkJbGVmdCA9IHRoaXMuc2xpZGVyLm9mZnNldCgpLmxlZnQ7CgkJCXdpZHRoID0gdGhpcy5zbGlkZXIud2lkdGgoKTsKCQkJcHhTdGVwID0gd2lkdGgvKChtYXgtbWluKS9zdGVwKTsKCQkJaWYgKCAhdGhpcy5kcmFnZ2luZyB8fAoJCQkJCWRhdGEucGFnZVggPCBsZWZ0IC0gdG9sIHx8CgkJCQkJZGF0YS5wYWdlWCA+IGxlZnQgKyB3aWR0aCArIHRvbCApIHsKCQkJCXJldHVybjsKCQkJfQoJCQlpZiAoIHB4U3RlcCA+IDEgKSB7CgkJCQlwZXJjZW50ID0gKCAoIGRhdGEucGFnZVggLSBsZWZ0ICkgLyB3aWR0aCApICogMTAwOwoJCQl9IGVsc2UgewoJCQkJcGVyY2VudCA9IE1hdGgucm91bmQoICggKCBkYXRhLnBhZ2VYIC0gbGVmdCApIC8gd2lkdGggKSAqIDEwMCApOwoJCQl9CgkJfSBlbHNlIHsKCQkJaWYgKCB2YWwgPT0gbnVsbCApIHsKCQkJCXZhbCA9IGlzSW5wdXQgPyBwYXJzZUZsb2F0KCBjb250cm9sLnZhbCgpIHx8IDAgKSA6IGNvbnRyb2xbMF0uc2VsZWN0ZWRJbmRleDsKCQkJfQoJCQlwZXJjZW50ID0gKCBwYXJzZUZsb2F0KCB2YWwgKSAtIG1pbiApIC8gKCBtYXggLSBtaW4gKSAqIDEwMDsKCQl9CgoJCWlmICggaXNOYU4oIHBlcmNlbnQgKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJbmV3dmFsID0gKCBwZXJjZW50IC8gMTAwICkgKiAoIG1heCAtIG1pbiApICsgbWluOwoKCQkvL2Zyb20galF1ZXJ5IFVJIHNsaWRlciwgdGhlIGZvbGxvd2luZyBzb3VyY2Ugd2lsbCByb3VuZCB0byB0aGUgbmVhcmVzdCBzdGVwCgkJdmFsTW9kU3RlcCA9ICggbmV3dmFsIC0gbWluICkgJSBzdGVwOwoJCWFsaWduVmFsdWUgPSBuZXd2YWwgLSB2YWxNb2RTdGVwOwoKCQlpZiAoIE1hdGguYWJzKCB2YWxNb2RTdGVwICkgKiAyID49IHN0ZXAgKSB7CgkJCWFsaWduVmFsdWUgKz0gKCB2YWxNb2RTdGVwID4gMCApID8gc3RlcCA6ICggLXN0ZXAgKTsKCQl9CgoJCXBlcmNlbnRQZXJTdGVwID0gMTAwLygobWF4LW1pbikvc3RlcCk7CgkJLy8gU2luY2UgSmF2YVNjcmlwdCBoYXMgcHJvYmxlbXMgd2l0aCBsYXJnZSBmbG9hdHMsIHJvdW5kCgkJLy8gdGhlIGZpbmFsIHZhbHVlIHRvIDUgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50IChzZWUgalF1ZXJ5VUk6ICM0MTI0KQoJCW5ld3ZhbCA9IHBhcnNlRmxvYXQoIGFsaWduVmFsdWUudG9GaXhlZCg1KSApOwoKCQlpZiAoIHR5cGVvZiBweFN0ZXAgPT09ICJ1bmRlZmluZWQiICkgewoJCQlweFN0ZXAgPSB3aWR0aCAvICggKG1heC1taW4pIC8gc3RlcCApOwoJCX0KCQlpZiAoIHB4U3RlcCA+IDEgJiYgaXNJbnB1dCApIHsKCQkJcGVyY2VudCA9ICggbmV3dmFsIC0gbWluICkgKiBwZXJjZW50UGVyU3RlcCAqICggMSAvIHN0ZXAgKTsKCQl9CgkJaWYgKCBwZXJjZW50IDwgMCApIHsKCQkJcGVyY2VudCA9IDA7CgkJfQoKCQlpZiAoIHBlcmNlbnQgPiAxMDAgKSB7CgkJCXBlcmNlbnQgPSAxMDA7CgkJfQoKCQlpZiAoIG5ld3ZhbCA8IG1pbiApIHsKCQkJbmV3dmFsID0gbWluOwoJCX0KCgkJaWYgKCBuZXd2YWwgPiBtYXggKSB7CgkJCW5ld3ZhbCA9IG1heDsKCQl9CgoJCXRoaXMuaGFuZGxlLmNzcyggImxlZnQiLCBwZXJjZW50ICsgIiUiICk7CgoJCXRoaXMuaGFuZGxlWzBdLnNldEF0dHJpYnV0ZSggImFyaWEtdmFsdWVub3ciLCBpc0lucHV0ID8gbmV3dmFsIDogb3B0aW9uRWxlbWVudHMuZXEoIG5ld3ZhbCApLmF0dHIoICJ2YWx1ZSIgKSApOwoKCQl0aGlzLmhhbmRsZVswXS5zZXRBdHRyaWJ1dGUoICJhcmlhLXZhbHVldGV4dCIsIGlzSW5wdXQgPyBuZXd2YWwgOiBvcHRpb25FbGVtZW50cy5lcSggbmV3dmFsICkuZ2V0RW5jb2RlZFRleHQoKSApOwoKCQl0aGlzLmhhbmRsZVswXS5zZXRBdHRyaWJ1dGUoICJ0aXRsZSIsIGlzSW5wdXQgPyBuZXd2YWwgOiBvcHRpb25FbGVtZW50cy5lcSggbmV3dmFsICkuZ2V0RW5jb2RlZFRleHQoKSApOwoKCQlpZiAoIHRoaXMudmFsdWViZyApIHsKCQkJdGhpcy52YWx1ZWJnLmNzcyggIndpZHRoIiwgcGVyY2VudCArICIlIiApOwoJCX0KCgkJLy8gZHJhZyB0aGUgbGFiZWwgd2lkdGhzCgkJaWYgKCB0aGlzLl9sYWJlbHMgKSB7CgkJCWhhbmRsZVBlcmNlbnQgPSB0aGlzLmhhbmRsZS53aWR0aCgpIC8gdGhpcy5zbGlkZXIud2lkdGgoKSAqIDEwMDsKCQkJYVBlcmNlbnQgPSBwZXJjZW50ICYmIGhhbmRsZVBlcmNlbnQgKyAoIDEwMCAtIGhhbmRsZVBlcmNlbnQgKSAqIHBlcmNlbnQgLyAxMDA7CgkJCWJQZXJjZW50ID0gcGVyY2VudCA9PT0gMTAwID8gMCA6IE1hdGgubWluKCBoYW5kbGVQZXJjZW50ICsgMTAwIC0gYVBlcmNlbnQsIDEwMCApOwoKCQkJdGhpcy5fbGFiZWxzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQl2YXIgYWIgPSAkKCB0aGlzICkuaGFzQ2xhc3MoICJ1aS1zbGlkZXItbGFiZWwtYSIgKTsKCQkJCSQoIHRoaXMgKS53aWR0aCggKCBhYiA/IGFQZXJjZW50IDogYlBlcmNlbnQgICkgKyAiJSIgKTsKCQkJfSk7CgkJfQoKCQlpZiAoICFwcmV2ZW50SW5wdXRVcGRhdGUgKSB7CgkJCXZhbHVlQ2hhbmdlZCA9IGZhbHNlOwoKCQkJLy8gdXBkYXRlIGNvbnRyb2wicyB2YWx1ZQoJCQlpZiAoIGlzSW5wdXQgKSB7CgkJCQl2YWx1ZUNoYW5nZWQgPSBjb250cm9sLnZhbCgpICE9PSBuZXd2YWw7CgkJCQljb250cm9sLnZhbCggbmV3dmFsICk7CgkJCX0gZWxzZSB7CgkJCQl2YWx1ZUNoYW5nZWQgPSBjb250cm9sWyAwIF0uc2VsZWN0ZWRJbmRleCAhPT0gbmV3dmFsOwoJCQkJY29udHJvbFsgMCBdLnNlbGVjdGVkSW5kZXggPSBuZXd2YWw7CgkJCX0KCQkJaWYgKCB0aGlzLl90cmlnZ2VyKCAiYmVmb3JlY2hhbmdlIiwgdmFsICkgPT09IGZhbHNlKSB7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJCWlmICggIWlzZnJvbUNvbnRyb2wgJiYgdmFsdWVDaGFuZ2VkICkgewoJCQkJY29udHJvbC50cmlnZ2VyKCAiY2hhbmdlIiApOwoJCQl9CgkJfQoJfSwKCglfc2V0SGlnaGxpZ2h0OiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJdmFsdWUgPSAhIXZhbHVlOwoJCWlmICggdmFsdWUgKSB7CgkJCXRoaXMub3B0aW9ucy5oaWdobGlnaHQgPSAhIXZhbHVlOwoJCQl0aGlzLnJlZnJlc2goKTsKCQl9IGVsc2UgaWYgKCB0aGlzLnZhbHVlYmcgKSB7CgkJCXRoaXMudmFsdWViZy5yZW1vdmUoKTsKCQkJdGhpcy52YWx1ZWJnID0gZmFsc2U7CgkJfQoJfSwKCglfc2V0VGhlbWU6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl0aGlzLmhhbmRsZQoJCQkucmVtb3ZlQ2xhc3MoICJ1aS1idG4tIiArIHRoaXMub3B0aW9ucy50aGVtZSApCgkJCS5hZGRDbGFzcyggInVpLWJ0bi0iICsgdmFsdWUgKTsKCgkJdmFyIGN1cnJlbnRUaGVtZSA9IHRoaXMub3B0aW9ucy50aGVtZSA/IHRoaXMub3B0aW9ucy50aGVtZSA6ICJpbmhlcml0IiwKCQkJbmV3VGhlbWUgPSB2YWx1ZSA/IHZhbHVlIDogImluaGVyaXQiOwoKCQl0aGlzLmNvbnRyb2wKCQkJLnJlbW92ZUNsYXNzKCAidWktYm9keS0iICsgY3VycmVudFRoZW1lICkKCQkJLmFkZENsYXNzKCAidWktYm9keS0iICsgbmV3VGhlbWUgKTsKCX0sCgoJX3NldFRyYWNrVGhlbWU6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl2YXIgY3VycmVudFRyYWNrVGhlbWUgPSB0aGlzLm9wdGlvbnMudHJhY2tUaGVtZSA/IHRoaXMub3B0aW9ucy50cmFja1RoZW1lIDogImluaGVyaXQiLAoJCQluZXdUcmFja1RoZW1lID0gdmFsdWUgPyB2YWx1ZSA6ICJpbmhlcml0IjsKCgkJdGhpcy5zbGlkZXIKCQkJLnJlbW92ZUNsYXNzKCAidWktYm9keS0iICsgY3VycmVudFRyYWNrVGhlbWUgKQoJCQkuYWRkQ2xhc3MoICJ1aS1ib2R5LSIgKyBuZXdUcmFja1RoZW1lICk7Cgl9LAoKCV9zZXRNaW5pOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJdmFsdWUgPSAhIXZhbHVlOwoJCWlmICggIXRoaXMuaXNUb2dnbGVTd2l0Y2ggJiYgIXRoaXMuaXNSYW5nZXNsaWRlciApIHsKCQkJdGhpcy5zbGlkZXIucGFyZW50KCkudG9nZ2xlQ2xhc3MoICJ1aS1taW5pIiwgdmFsdWUgKTsKCQkJdGhpcy5lbGVtZW50LnRvZ2dsZUNsYXNzKCAidWktbWluaSIsIHZhbHVlICk7CgkJfQoJCXRoaXMuc2xpZGVyLnRvZ2dsZUNsYXNzKCAidWktbWluaSIsIHZhbHVlICk7Cgl9LAoKCV9zZXRDb3JuZXJzOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJdGhpcy5zbGlkZXIudG9nZ2xlQ2xhc3MoICJ1aS1jb3JuZXItYWxsIiwgdmFsdWUgKTsKCgkJaWYgKCAhdGhpcy5pc1RvZ2dsZVN3aXRjaCApIHsKCQkJdGhpcy5jb250cm9sLnRvZ2dsZUNsYXNzKCAidWktY29ybmVyLWFsbCIsIHZhbHVlICk7CgkJfQoJfSwKCglfc2V0RGlzYWJsZWQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl2YWx1ZSA9ICEhdmFsdWU7CgkJdGhpcy5lbGVtZW50LnByb3AoICJkaXNhYmxlZCIsIHZhbHVlICk7CgkJdGhpcy5zbGlkZXIudG9nZ2xlQ2xhc3MoICJ1aS1zdGF0ZS1kaXNhYmxlZCIgKS5hdHRyKCAiYXJpYS1kaXNhYmxlZCIsIHZhbHVlICk7Cgl9Cgp9LCAkLm1vYmlsZS5iZWhhdmlvcnMuZm9ybVJlc2V0ICkgKTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIHBvcHVwOwoKZnVuY3Rpb24gZ2V0UG9wdXAoKSB7CglpZiAoICFwb3B1cCApIHsKCQlwb3B1cCA9ICQoICI8ZGl2PjwvZGl2PiIsIHsKCQkJImNsYXNzIjogInVpLXNsaWRlci1wb3B1cCB1aS1zaGFkb3cgdWktY29ybmVyLWFsbCIKCQl9KTsKCX0KCXJldHVybiBwb3B1cC5jbG9uZSgpOwp9CgokLndpZGdldCggIm1vYmlsZS5zbGlkZXIiLCAkLm1vYmlsZS5zbGlkZXIsIHsKCW9wdGlvbnM6IHsKCQlwb3B1cEVuYWJsZWQ6IGZhbHNlLAoJCXNob3dWYWx1ZTogZmFsc2UKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5fc3VwZXIoKTsKCgkJJC5leHRlbmQoIHRoaXMsIHsKCQkJX2N1cnJlbnRWYWx1ZTogbnVsbCwKCQkJX3BvcHVwOiBudWxsLAoJCQlfcG9wdXBWaXNpYmxlOiBmYWxzZQoJCX0pOwoKCQl0aGlzLl9zZXRPcHRpb24oICJwb3B1cEVuYWJsZWQiLCB0aGlzLm9wdGlvbnMucG9wdXBFbmFibGVkICk7CgoJCXRoaXMuX29uKCB0aGlzLmhhbmRsZSwgeyAidm1vdXNlZG93biIgOiAiX3Nob3dQb3B1cCIgfSApOwoJCXRoaXMuX29uKCB0aGlzLnNsaWRlci5hZGQoIHRoaXMuZG9jdW1lbnQgKSwgeyAidm1vdXNldXAiIDogIl9oaWRlUG9wdXAiIH0gKTsKCQl0aGlzLl9yZWZyZXNoKCk7Cgl9LAoKCS8vIHBvc2l0aW9uIHRoZSBwb3B1cCBjZW50ZXJlZCA1cHggYWJvdmUgdGhlIGhhbmRsZQoJX3Bvc2l0aW9uUG9wdXA6IGZ1bmN0aW9uKCkgewoJCXZhciBkc3RPZmZzZXQgPSB0aGlzLmhhbmRsZS5vZmZzZXQoKTsKCgkJdGhpcy5fcG9wdXAub2Zmc2V0KCB7CgkJCWxlZnQ6IGRzdE9mZnNldC5sZWZ0ICsgKCB0aGlzLmhhbmRsZS53aWR0aCgpIC0gdGhpcy5fcG9wdXAud2lkdGgoKSApIC8gMiwKCQkJdG9wOiBkc3RPZmZzZXQudG9wIC0gdGhpcy5fcG9wdXAub3V0ZXJIZWlnaHQoKSAtIDUKCQl9KTsKCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJdGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTsKCgkJaWYgKCBrZXkgPT09ICJzaG93VmFsdWUiICkgewoJCQl0aGlzLmhhbmRsZS5odG1sKCB2YWx1ZSAmJiAhdGhpcy5vcHRpb25zLm1pbmkgPyB0aGlzLl92YWx1ZSgpIDogIiIgKTsKCQl9IGVsc2UgaWYgKCBrZXkgPT09ICJwb3B1cEVuYWJsZWQiICkgewoJCQlpZiAoIHZhbHVlICYmICF0aGlzLl9wb3B1cCApIHsKCQkJCXRoaXMuX3BvcHVwID0gZ2V0UG9wdXAoKQoJCQkJCS5hZGRDbGFzcyggInVpLWJvZHktIiArICggdGhpcy5vcHRpb25zLnRoZW1lIHx8ICJhIiApICkKCQkJCQkuaW5zZXJ0QmVmb3JlKCB0aGlzLmVsZW1lbnQgKTsKCQkJfQoJCX0KCX0sCgoJLy8gc2hvdyB2YWx1ZSBvbiB0aGUgaGFuZGxlIGFuZCBpbiBwb3B1cAoJcmVmcmVzaDogZnVuY3Rpb24oKSB7CgkJdGhpcy5fc3VwZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCXRoaXMuX3JlZnJlc2goKTsKCX0sCgoJX3JlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCXZhciBvID0gdGhpcy5vcHRpb25zLCBuZXdWYWx1ZTsKCgkJaWYgKCBvLnBvcHVwRW5hYmxlZCApIHsKCQkJLy8gcmVtb3ZlIHRoZSB0aXRsZSBhdHRyaWJ1dGUgZnJvbSB0aGUgaGFuZGxlICh3aGljaCBpcwoJCQkvLyByZXNwb25zaWJsZSBmb3IgdGhlIGFubm95aW5nIHRvb2x0aXApOyBOQiB3ZSBoYXZlCgkJCS8vIHRvIGRvIGl0IGhlcmUgYXMgdGhlIGpxbSBzbGlkZXIgc2V0cyBpdCBldmVyeSB0aW1lCgkJCS8vIHRoZSBzbGlkZXIncyB2YWx1ZSBjaGFuZ2VzIDooCgkJCXRoaXMuaGFuZGxlLnJlbW92ZUF0dHIoICJ0aXRsZSIgKTsKCQl9CgoJCW5ld1ZhbHVlID0gdGhpcy5fdmFsdWUoKTsKCQlpZiAoIG5ld1ZhbHVlID09PSB0aGlzLl9jdXJyZW50VmFsdWUgKSB7CgkJCXJldHVybjsKCQl9CgkJdGhpcy5fY3VycmVudFZhbHVlID0gbmV3VmFsdWU7CgoJCWlmICggby5wb3B1cEVuYWJsZWQgJiYgdGhpcy5fcG9wdXAgKSB7CgkJCXRoaXMuX3Bvc2l0aW9uUG9wdXAoKTsKCQkJdGhpcy5fcG9wdXAuaHRtbCggbmV3VmFsdWUgKTsKCQl9IGVsc2UgaWYgKCBvLnNob3dWYWx1ZSAmJiAhdGhpcy5vcHRpb25zLm1pbmkgKSB7CgkJCXRoaXMuaGFuZGxlLmh0bWwoIG5ld1ZhbHVlICk7CgkJfQoJfSwKCglfc2hvd1BvcHVwOiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMub3B0aW9ucy5wb3B1cEVuYWJsZWQgJiYgIXRoaXMuX3BvcHVwVmlzaWJsZSApIHsKCQkJdGhpcy5oYW5kbGUuaHRtbCggIiIgKTsKCQkJdGhpcy5fcG9wdXAuc2hvdygpOwoJCQl0aGlzLl9wb3NpdGlvblBvcHVwKCk7CgkJCXRoaXMuX3BvcHVwVmlzaWJsZSA9IHRydWU7CgkJfQoJfSwKCglfaGlkZVBvcHVwOiBmdW5jdGlvbigpIHsKCQl2YXIgbyA9IHRoaXMub3B0aW9uczsKCgkJaWYgKCBvLnBvcHVwRW5hYmxlZCAmJiB0aGlzLl9wb3B1cFZpc2libGUgKSB7CgkJCWlmICggby5zaG93VmFsdWUgJiYgIW8ubWluaSApIHsKCQkJCXRoaXMuaGFuZGxlLmh0bWwoIHRoaXMuX3ZhbHVlKCkgKTsKCQkJfQoJCQl0aGlzLl9wb3B1cC5oaWRlKCk7CgkJCXRoaXMuX3BvcHVwVmlzaWJsZSA9IGZhbHNlOwoJCX0KCX0KfSk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLmZsaXBzd2l0Y2giLCAkLmV4dGVuZCh7CgoJb3B0aW9uczogewoJCW9uVGV4dDogIk9uIiwKCQlvZmZUZXh0OiAiT2ZmIiwKCQl0aGVtZTogbnVsbCwKCQllbmhhbmNlZDogZmFsc2UsCgkJd3JhcHBlckNsYXNzOiBudWxsLAoJCWNvcm5lcnM6IHRydWUsCgkJbWluaTogZmFsc2UKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJCWlmICggIXRoaXMub3B0aW9ucy5lbmhhbmNlZCApIHsKCQkJCXRoaXMuX2VuaGFuY2UoKTsKCQkJfSBlbHNlIHsKCQkJCSQuZXh0ZW5kKCB0aGlzLCB7CgkJCQkJZmxpcHN3aXRjaDogdGhpcy5lbGVtZW50LnBhcmVudCgpLAoJCQkJCW9uOiB0aGlzLmVsZW1lbnQuZmluZCggIi51aS1mbGlwc3dpdGNoLW9uIiApLmVxKCAwICksCgkJCQkJb2ZmOiB0aGlzLmVsZW1lbnQuZmluZCggIi51aS1mbGlwc3dpdGNoLW9mZiIgKS5lcSgwKSwKCQkJCQl0eXBlOiB0aGlzLmVsZW1lbnQuZ2V0KCAwICkudGFnTmFtZQoJCQkJfSk7CgkJCX0KCgkJCXRoaXMuX2hhbmRsZUZvcm1SZXNldCgpOwoKCQkJaWYgKCB0aGlzLmVsZW1lbnQuaXMoICI6ZGlzYWJsZWQiICkgKSB7CgkJCQl0aGlzLl9zZXRPcHRpb25zKHsKCQkJCQkiZGlzYWJsZWQiOiB0cnVlCgkJCQl9KTsKCQkJfQoKCQkJdGhpcy5fb24oIHRoaXMuZmxpcHN3aXRjaCwgewoJCQkJImNsaWNrIjogIl90b2dnbGUiLAoJCQkJInN3aXBlbGVmdCI6ICJfbGVmdCIsCgkJCQkic3dpcGVyaWdodCI6ICJfcmlnaHQiCgkJCX0pOwoKCQkJdGhpcy5fb24oIHRoaXMub24sIHsKCQkJCSJrZXlkb3duIjogIl9rZXlkb3duIgoJCQl9KTsKCgkJCXRoaXMuX29uKCB7CgkJCQkiY2hhbmdlIjogInJlZnJlc2giCgkJCX0pOwoJfSwKCgl3aWRnZXQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLmZsaXBzd2l0Y2g7Cgl9LAoKCV9sZWZ0OiBmdW5jdGlvbigpIHsKCQl0aGlzLmZsaXBzd2l0Y2gucmVtb3ZlQ2xhc3MoICJ1aS1mbGlwc3dpdGNoLWFjdGl2ZSIgKTsKCQlpZiAoIHRoaXMudHlwZSA9PT0gIlNFTEVDVCIgKSB7CgkJCXRoaXMuZWxlbWVudC5nZXQoIDAgKS5zZWxlY3RlZEluZGV4ID0gMDsKCQl9IGVsc2UgewoJCQl0aGlzLmVsZW1lbnQucHJvcCggImNoZWNrZWQiLCBmYWxzZSApOwoJCX0KCQl0aGlzLmVsZW1lbnQudHJpZ2dlciggImNoYW5nZSIgKTsKCX0sCgoJX3JpZ2h0OiBmdW5jdGlvbigpIHsKCQl0aGlzLmZsaXBzd2l0Y2guYWRkQ2xhc3MoICJ1aS1mbGlwc3dpdGNoLWFjdGl2ZSIgKTsKCQlpZiAoIHRoaXMudHlwZSA9PT0gIlNFTEVDVCIgKSB7CgkJCXRoaXMuZWxlbWVudC5nZXQoIDAgKS5zZWxlY3RlZEluZGV4ID0gMTsKCQl9IGVsc2UgewoJCQl0aGlzLmVsZW1lbnQucHJvcCggImNoZWNrZWQiLCB0cnVlICk7CgkJfQoJCXRoaXMuZWxlbWVudC50cmlnZ2VyKCAiY2hhbmdlIiApOwoJfSwKCglfZW5oYW5jZTogZnVuY3Rpb24oKSB7CgkJdmFyIGZsaXBzd2l0Y2ggPSAkKCAiPGRpdj4iICksCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgkJCWVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsCgkJCXRoZW1lID0gb3B0aW9ucy50aGVtZSA/IG9wdGlvbnMudGhlbWUgOiAiaW5oZXJpdCIsCgkJCW9uID0gJCggIjxzcGFuPjwvc3Bhbj4iLCB7IHRhYmluZGV4OiAxIH0gKSwKCQkJb2ZmID0gJCggIjxzcGFuPjwvc3Bhbj4iICksCgkJCXR5cGUgPSBlbGVtZW50LmdldCggMCApLnRhZ05hbWUsCgkJCW9uVGV4dCA9ICggdHlwZSA9PT0gIklOUFVUIiApID8KCQkJCW9wdGlvbnMub25UZXh0IDogZWxlbWVudC5maW5kKCAib3B0aW9uIiApLmVxKCAxICkudGV4dCgpLAoJCQlvZmZUZXh0ID0gKCB0eXBlID09PSAiSU5QVVQiICkgPwoJCQkJb3B0aW9ucy5vZmZUZXh0IDogZWxlbWVudC5maW5kKCAib3B0aW9uIiApLmVxKCAwICkudGV4dCgpOwoKCQkJb24KCQkJCS5hZGRDbGFzcyggInVpLWZsaXBzd2l0Y2gtb24gdWktYnRuIHVpLXNoYWRvdyB1aS1idG4taW5oZXJpdCIgKQoJCQkJLnRleHQoIG9uVGV4dCApOwoJCQlvZmYKCQkJCS5hZGRDbGFzcyggInVpLWZsaXBzd2l0Y2gtb2ZmIiApCgkJCQkudGV4dCggb2ZmVGV4dCApOwoKCQkJZmxpcHN3aXRjaAoJCQkJLmFkZENsYXNzKCAidWktZmxpcHN3aXRjaCB1aS1zaGFkb3ctaW5zZXQgIiArCgkJCQkJInVpLWJhci0iICsgdGhlbWUgKyAiICIgKwoJCQkJCSggb3B0aW9ucy53cmFwcGVyQ2xhc3MgPyBvcHRpb25zLndyYXBwZXJDbGFzcyA6ICIiICkgKyAiICIgKwoJCQkJCSggKCBlbGVtZW50LmlzKCAiOmNoZWNrZWQiICkgfHwKCQkJCQkJZWxlbWVudAoJCQkJCQkJLmZpbmQoICJvcHRpb24iICkKCQkJCQkJCS5lcSggMSApCgkJCQkJCQkuaXMoICI6c2VsZWN0ZWQiICkgKSA/ICJ1aS1mbGlwc3dpdGNoLWFjdGl2ZSIgOiAiIiApICsKCQkJCQkoIGVsZW1lbnQuaXMoIjpkaXNhYmxlZCIpID8gIiB1aS1zdGF0ZS1kaXNhYmxlZCI6ICIiKSArCgkJCQkJKCBvcHRpb25zLmNvcm5lcnMgPyAiIHVpLWNvcm5lci1hbGwiOiAiIiApICsKCQkJCQkoIG9wdGlvbnMubWluaSA/ICIgdWktbWluaSI6ICIiICkgKQoJCQkJLmFwcGVuZCggb24sIG9mZiApOwoKCQkJZWxlbWVudAoJCQkJLmFkZENsYXNzKCAidWktZmxpcHN3aXRjaC1pbnB1dCIgKQoJCQkJLmFmdGVyKCBmbGlwc3dpdGNoICkKCQkJCS5hcHBlbmRUbyggZmxpcHN3aXRjaCApOwoKCQkkLmV4dGVuZCggdGhpcywgewoJCQlmbGlwc3dpdGNoOiBmbGlwc3dpdGNoLAoJCQlvbjogb24sCgkJCW9mZjogb2ZmLAoJCQl0eXBlOiB0eXBlCgkJfSk7Cgl9LAoKCV9yZXNldDogZnVuY3Rpb24oKSB7CgkJdGhpcy5yZWZyZXNoKCk7Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCXZhciBkaXJlY3Rpb24sCgkJCWV4aXN0aW5nRGlyZWN0aW9uID0gdGhpcy5mbGlwc3dpdGNoLmhhc0NsYXNzKCAidWktZmxpcHN3aXRjaC1hY3RpdmUiICkgPyAiX3JpZ2h0IiA6ICJfbGVmdCI7CgoJCWlmICggdGhpcy50eXBlID09PSAiU0VMRUNUIiApIHsKCQkJZGlyZWN0aW9uID0gKCB0aGlzLmVsZW1lbnQuZ2V0KCAwICkuc2VsZWN0ZWRJbmRleCA+IDAgKSA/ICJfcmlnaHQiOiAiX2xlZnQiOwoJCX0gZWxzZSB7CgkJCWRpcmVjdGlvbiA9IHRoaXMuZWxlbWVudC5wcm9wKCAiY2hlY2tlZCIgKSA/ICJfcmlnaHQiOiAiX2xlZnQiOwoJCX0KCgkJaWYgKCBkaXJlY3Rpb24gIT09IGV4aXN0aW5nRGlyZWN0aW9uICkgewoJCQl0aGlzWyBkaXJlY3Rpb24gXSgpOwoJCX0KCX0sCgoJX3RvZ2dsZTogZnVuY3Rpb24oKSB7CgkJdmFyIGRpcmVjdGlvbiA9IHRoaXMuZmxpcHN3aXRjaC5oYXNDbGFzcyggInVpLWZsaXBzd2l0Y2gtYWN0aXZlIiApID8gIl9sZWZ0IiA6ICJfcmlnaHQiOwoKCQl0aGlzWyBkaXJlY3Rpb24gXSgpOwoJfSwKCglfa2V5ZG93bjogZnVuY3Rpb24oIGUgKSB7CgkJaWYgKCBlLndoaWNoID09PSAkLm1vYmlsZS5rZXlDb2RlLkxFRlQgKSB7CgkJCXRoaXMuX2xlZnQoKTsKCQl9IGVsc2UgaWYgKCBlLndoaWNoID09PSAkLm1vYmlsZS5rZXlDb2RlLlJJR0hUICkgewoJCQl0aGlzLl9yaWdodCgpOwoJCX0gZWxzZSBpZiAoIGUud2hpY2ggPT09ICQubW9iaWxlLmtleUNvZGUuU1BBQ0UgKSB7CgkJCXRoaXMuX3RvZ2dsZSgpOwoJCQllLnByZXZlbnREZWZhdWx0KCk7CgkJfQoJfSwKCglfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJaWYgKCBvcHRpb25zLnRoZW1lICE9PSB1bmRlZmluZWQgKSB7CgkJCXZhciBjdXJyZW50VGhlbWUgPSBvcHRpb25zLnRoZW1lID8gb3B0aW9ucy50aGVtZSA6ICJpbmhlcml0IiwKCQkJCW5ld1RoZW1lID0gb3B0aW9ucy50aGVtZSA/IG9wdGlvbnMudGhlbWUgOiAiaW5oZXJpdCI7CgoJCQl0aGlzLndpZGdldCgpCgkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1iYXItIiArIGN1cnJlbnRUaGVtZSApCgkJCQkuYWRkQ2xhc3MoICJ1aS1iYXItIiArIG5ld1RoZW1lICk7CgkJfQoJCWlmICggb3B0aW9ucy5vblRleHQgIT09IHVuZGVmaW5lZCApIHsKCQkJdGhpcy5vbi50ZXh0KCBvcHRpb25zLm9uVGV4dCApOwoJCX0KCQlpZiAoIG9wdGlvbnMub2ZmVGV4dCAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLm9mZi50ZXh0KCBvcHRpb25zLm9mZlRleHQgKTsKCQl9CgkJaWYgKCBvcHRpb25zLmRpc2FibGVkICE9PSB1bmRlZmluZWQgKSB7CgkJCXRoaXMud2lkZ2V0KCkudG9nZ2xlQ2xhc3MoICJ1aS1zdGF0ZS1kaXNhYmxlZCIsIG9wdGlvbnMuZGlzYWJsZWQgKTsKCQl9CgkJaWYgKCBvcHRpb25zLm1pbmkgIT09IHVuZGVmaW5lZCApIHsKCQkJdGhpcy53aWRnZXQoKS50b2dnbGVDbGFzcyggInVpLW1pbmkiLCBvcHRpb25zLm1pbmkgKTsKCQl9CgkJaWYgKCBvcHRpb25zLmNvcm5lcnMgIT09IHVuZGVmaW5lZCApIHsKCQkJdGhpcy53aWRnZXQoKS50b2dnbGVDbGFzcyggInVpLWNvcm5lci1hbGwiLCBvcHRpb25zLmNvcm5lcnMgKTsKCQl9CgoJCXRoaXMuX3N1cGVyKCBvcHRpb25zICk7Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMub3B0aW9ucy5lbmhhbmNlZCApIHsKCQkJcmV0dXJuOwoJCX0KCQl0aGlzLm9uLnJlbW92ZSgpOwoJCXRoaXMub2ZmLnJlbW92ZSgpOwoJCXRoaXMuZWxlbWVudC51bndyYXAoKTsKCQl0aGlzLmZsaXBzd2l0Y2gucmVtb3ZlKCk7CgkJdGhpcy5yZW1vdmVDbGFzcyggInVpLWZsaXBzd2l0Y2gtaW5wdXQiICk7Cgl9Cgp9LCAkLm1vYmlsZS5iZWhhdmlvcnMuZm9ybVJlc2V0ICkgKTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoJJC53aWRnZXQoICJtb2JpbGUucmFuZ2VzbGlkZXIiLCAkLmV4dGVuZCggewoKCQlvcHRpb25zOiB7CgkJCXRoZW1lOiBudWxsLAoJCQl0cmFja1RoZW1lOiBudWxsLAoJCQljb3JuZXJzOiB0cnVlLAoJCQltaW5pOiBmYWxzZSwKCQkJaGlnaGxpZ2h0OiB0cnVlCgkJfSwKCgkJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJCXZhciAkZWwgPSB0aGlzLmVsZW1lbnQsCgkJCWVsQ2xhc3MgPSB0aGlzLm9wdGlvbnMubWluaSA/ICJ1aS1yYW5nZXNsaWRlciB1aS1taW5pIiA6ICJ1aS1yYW5nZXNsaWRlciIsCgkJCV9pbnB1dEZpcnN0ID0gJGVsLmZpbmQoICJpbnB1dCIgKS5maXJzdCgpLAoJCQlfaW5wdXRMYXN0ID0gJGVsLmZpbmQoICJpbnB1dCIgKS5sYXN0KCksCgkJCV9sYWJlbCA9ICRlbC5maW5kKCAibGFiZWwiICkuZmlyc3QoKSwKCQkJX3NsaWRlcldpZGdldEZpcnN0ID0gJC5kYXRhKCBfaW5wdXRGaXJzdC5nZXQoIDAgKSwgIm1vYmlsZS1zbGlkZXIiICkgfHwKCQkJCSQuZGF0YSggX2lucHV0Rmlyc3Quc2xpZGVyKCkuZ2V0KCAwICksICJtb2JpbGUtc2xpZGVyIiApLAoJCQlfc2xpZGVyV2lkZ2V0TGFzdCA9ICQuZGF0YSggX2lucHV0TGFzdC5nZXQoMCksICJtb2JpbGUtc2xpZGVyIiApIHx8CgkJCQkkLmRhdGEoIF9pbnB1dExhc3Quc2xpZGVyKCkuZ2V0KCAwICksICJtb2JpbGUtc2xpZGVyIiApLAoJCQlfc2xpZGVyRmlyc3QgPSBfc2xpZGVyV2lkZ2V0Rmlyc3Quc2xpZGVyLAoJCQlfc2xpZGVyTGFzdCA9IF9zbGlkZXJXaWRnZXRMYXN0LnNsaWRlciwKCQkJZmlyc3RIYW5kbGUgPSBfc2xpZGVyV2lkZ2V0Rmlyc3QuaGFuZGxlLAoJCQlfc2xpZGVycyA9ICQoICI8ZGl2IGNsYXNzPSd1aS1yYW5nZXNsaWRlci1zbGlkZXJzJyAvPiIgKS5hcHBlbmRUbyggJGVsICk7CgoJCQlfaW5wdXRGaXJzdC5hZGRDbGFzcyggInVpLXJhbmdlc2xpZGVyLWZpcnN0IiApOwoJCQlfaW5wdXRMYXN0LmFkZENsYXNzKCAidWktcmFuZ2VzbGlkZXItbGFzdCIgKTsKCQkJJGVsLmFkZENsYXNzKCBlbENsYXNzICk7CgoJCQlfc2xpZGVyRmlyc3QuYXBwZW5kVG8oIF9zbGlkZXJzICk7CgkJCV9zbGlkZXJMYXN0LmFwcGVuZFRvKCBfc2xpZGVycyApOwoJCQlfbGFiZWwuaW5zZXJ0QmVmb3JlKCAkZWwgKTsKCQkJZmlyc3RIYW5kbGUucHJlcGVuZFRvKCBfc2xpZGVyTGFzdCApOwoKCQkJJC5leHRlbmQoIHRoaXMsIHsKCQkJCV9pbnB1dEZpcnN0OiBfaW5wdXRGaXJzdCwKCQkJCV9pbnB1dExhc3Q6IF9pbnB1dExhc3QsCgkJCQlfc2xpZGVyRmlyc3Q6IF9zbGlkZXJGaXJzdCwKCQkJCV9zbGlkZXJMYXN0OiBfc2xpZGVyTGFzdCwKCQkJCV9sYWJlbDogX2xhYmVsLAoJCQkJX3RhcmdldFZhbDogbnVsbCwKCQkJCV9zbGlkZXJUYXJnZXQ6IGZhbHNlLAoJCQkJX3NsaWRlcnM6IF9zbGlkZXJzLAoJCQkJX3Byb3h5OiBmYWxzZQoJCQl9KTsKCgkJCXRoaXMucmVmcmVzaCgpOwoJCQl0aGlzLl9vbiggdGhpcy5lbGVtZW50LmZpbmQoICJpbnB1dC51aS1zbGlkZXItaW5wdXQiICksIHsKCQkJCSJzbGlkZWJlZm9yZXN0YXJ0IjogIl9zbGlkZWJlZm9yZXN0YXJ0IiwKCQkJCSJzbGlkZXN0b3AiOiAiX3NsaWRlc3RvcCIsCgkJCQkic2xpZGVkcmFnIjogIl9zbGlkZWRyYWciLAoJCQkJInNsaWRlYmVmb3JlY2hhbmdlIjogIl9jaGFuZ2UiLAoJCQkJImJsdXIiOiAiX2NoYW5nZSIsCgkJCQkia2V5dXAiOiAiX2NoYW5nZSIKCQkJfSk7CgkJCXRoaXMuX29uKHsKCQkJCSJtb3VzZWRvd24iOiJfY2hhbmdlIgoJCQl9KTsKCQkJdGhpcy5fb24oIHRoaXMuZWxlbWVudC5jbG9zZXN0KCAiZm9ybSIgKSwgewoJCQkJInJlc2V0IjoiX2hhbmRsZVJlc2V0IgoJCQl9KTsKCQkJdGhpcy5fb24oIGZpcnN0SGFuZGxlLCB7CgkJCQkidm1vdXNlZG93biI6ICJfZHJhZ0ZpcnN0SGFuZGxlIgoJCQl9KTsKCQl9LAoJCV9oYW5kbGVSZXNldDogZnVuY3Rpb24oKSB7CgkJCXZhciBzZWxmID0gdGhpczsKCQkJLy93ZSBtdXN0IHdhaXQgZm9yIHRoZSBzdGFjayB0byB1bndpbmQgYmVmb3JlIHVwZGF0ZWluZyBvdGhlciB3aXNlIHNsaWRlcnMgd2lsbCBub3QgaGF2ZSB1cGRhdGVkIHlldAoJCQlzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHsKCQkJCXNlbGYuX3VwZGF0ZUhpZ2hsaWdodCgpOwoJCQl9LDApOwoJCX0sCgoJCV9kcmFnRmlyc3RIYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJLy9pZiB0aGUgZmlyc3QgaGFuZGxlIGlzIGRyYWdnZWQgc2VuZCB0aGUgZXZlbnQgdG8gdGhlIGZpcnN0IHNsaWRlcgoJCQkkLmRhdGEoIHRoaXMuX2lucHV0Rmlyc3QuZ2V0KDApLCAibW9iaWxlLXNsaWRlciIgKS5kcmFnZ2luZyA9IHRydWU7CgkJCSQuZGF0YSggdGhpcy5faW5wdXRGaXJzdC5nZXQoMCksICJtb2JpbGUtc2xpZGVyIiApLnJlZnJlc2goIGV2ZW50ICk7CgkJCXJldHVybiBmYWxzZTsKCQl9LAoKCQlfc2xpZGVkcmFnOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCXZhciBmaXJzdCA9ICQoIGV2ZW50LnRhcmdldCApLmlzKCB0aGlzLl9pbnB1dEZpcnN0ICksCgkJCQlvdGhlclNsaWRlciA9ICggZmlyc3QgKSA/IHRoaXMuX2lucHV0TGFzdCA6IHRoaXMuX2lucHV0Rmlyc3Q7CgoJCQl0aGlzLl9zbGlkZXJUYXJnZXQgPSBmYWxzZTsKCQkJLy9pZiB0aGUgZHJhZyB3YXMgaW5pdGlhdGVkIG9uIGFuIGV4dHJlbWUgYW5kIHRoZSBvdGhlciBoYW5kbGUgaXMgZm9jdXNlZCBzZW5kIHRoZSBldmVudHMgdG8KCQkJLy90aGUgY2xvc2VzdCBoYW5kbGUKCQkJaWYgKCAoIHRoaXMuX3Byb3h5ID09PSAiZmlyc3QiICYmIGZpcnN0ICkgfHwgKCB0aGlzLl9wcm94eSA9PT0gImxhc3QiICYmICFmaXJzdCApICkgewoJCQkJJC5kYXRhKCBvdGhlclNsaWRlci5nZXQoMCksICJtb2JpbGUtc2xpZGVyIiApLmRyYWdnaW5nID0gdHJ1ZTsKCQkJCSQuZGF0YSggb3RoZXJTbGlkZXIuZ2V0KDApLCAibW9iaWxlLXNsaWRlciIgKS5yZWZyZXNoKCBldmVudCApOwoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfSwKCgkJX3NsaWRlc3RvcDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQl2YXIgZmlyc3QgPSAkKCBldmVudC50YXJnZXQgKS5pcyggdGhpcy5faW5wdXRGaXJzdCApOwoKCQkJdGhpcy5fcHJveHkgPSBmYWxzZTsKCQkJLy90aGlzIHN0b3BzIGRyYWdnaW5nIG9mIHRoZSBoYW5kbGUgYW5kIGJyaW5ncyB0aGUgYWN0aXZlIHRyYWNrIHRvIHRoZSBmcm9udAoJCQkvL3RoaXMgbWFrZXMgY2xpY2tzIG9uIHRoZSB0cmFjayBnbyB0aGUgdGhlIGxhc3QgaGFuZGxlIHVzZWQKCQkJdGhpcy5lbGVtZW50LmZpbmQoICJpbnB1dCIgKS50cmlnZ2VyKCAidm1vdXNldXAiICk7CgkJCXRoaXMuX3NsaWRlckZpcnN0LmNzcyggInotaW5kZXgiLCBmaXJzdCA/IDEgOiAiIiApOwoJCX0sCgoJCV9zbGlkZWJlZm9yZXN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCXRoaXMuX3NsaWRlclRhcmdldCA9IGZhbHNlOwoJCQkvL2lmIHRoZSB0cmFjayBpcyB0aGUgdGFyZ2V0IHJlbWVtYmVyIHRoaXMgYW5kIHRoZSBvcmlnaW5hbCB2YWx1ZQoJCQlpZiAoICQoIGV2ZW50Lm9yaWdpbmFsRXZlbnQudGFyZ2V0ICkuaGFzQ2xhc3MoICJ1aS1zbGlkZXItdHJhY2siICkgKSB7CgkJCQl0aGlzLl9zbGlkZXJUYXJnZXQgPSB0cnVlOwoJCQkJdGhpcy5fdGFyZ2V0VmFsID0gJCggZXZlbnQudGFyZ2V0ICkudmFsKCk7CgkJCX0KCQl9LAoKCQlfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJCWlmICggb3B0aW9ucy50aGVtZSAhPT0gdW5kZWZpbmVkICkgewoJCQkJdGhpcy5fc2V0VGhlbWUoIG9wdGlvbnMudGhlbWUgKTsKCQkJfQoKCQkJaWYgKCBvcHRpb25zLnRyYWNrVGhlbWUgIT09IHVuZGVmaW5lZCApIHsKCQkJCXRoaXMuX3NldFRyYWNrVGhlbWUoIG9wdGlvbnMudHJhY2tUaGVtZSApOwoJCQl9CgoJCQlpZiAoIG9wdGlvbnMubWluaSAhPT0gdW5kZWZpbmVkICkgewoJCQkJdGhpcy5fc2V0TWluaSggb3B0aW9ucy5taW5pICk7CgkJCX0KCgkJCWlmICggb3B0aW9ucy5oaWdobGlnaHQgIT09IHVuZGVmaW5lZCApIHsKCQkJCXRoaXMuX3NldEhpZ2hsaWdodCggb3B0aW9ucy5oaWdobGlnaHQgKTsKCQkJfQoJCQl0aGlzLl9zdXBlciggb3B0aW9ucyApOwoJCQl0aGlzLnJlZnJlc2goKTsKCQl9LAoKCQlyZWZyZXNoOiBmdW5jdGlvbigpIHsKCQkJdmFyICRlbCA9IHRoaXMuZWxlbWVudCwKCQkJCW8gPSB0aGlzLm9wdGlvbnM7CgoJCQlpZiAoIHRoaXMuX2lucHV0Rmlyc3QuaXMoICI6ZGlzYWJsZWQiICkgfHwgdGhpcy5faW5wdXRMYXN0LmlzKCAiOmRpc2FibGVkIiApICkgewoJCQkJdGhpcy5vcHRpb25zLmRpc2FibGVkID0gdHJ1ZTsKCQkJfQoKCQkJJGVsLmZpbmQoICJpbnB1dCIgKS5zbGlkZXIoewoJCQkJdGhlbWU6IG8udGhlbWUsCgkJCQl0cmFja1RoZW1lOiBvLnRyYWNrVGhlbWUsCgkJCQlkaXNhYmxlZDogby5kaXNhYmxlZCwKCQkJCWNvcm5lcnM6IG8uY29ybmVycywKCQkJCW1pbmk6IG8ubWluaSwKCQkJCWhpZ2hsaWdodDogby5oaWdobGlnaHQKCQkJfSkuc2xpZGVyKCAicmVmcmVzaCIgKTsKCQkJdGhpcy5fdXBkYXRlSGlnaGxpZ2h0KCk7CgkJfSwKCgkJX2NoYW5nZTogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQlpZiAoIGV2ZW50LnR5cGUgPT09ICJrZXl1cCIgKSB7CgkJCQl0aGlzLl91cGRhdGVIaWdobGlnaHQoKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJdmFyIHNlbGYgPSB0aGlzLAoJCQkJbWluID0gcGFyc2VGbG9hdCggdGhpcy5faW5wdXRGaXJzdC52YWwoKSwgMTAgKSwKCQkJCW1heCA9IHBhcnNlRmxvYXQoIHRoaXMuX2lucHV0TGFzdC52YWwoKSwgMTAgKSwKCQkJCWZpcnN0ID0gJCggZXZlbnQudGFyZ2V0ICkuaGFzQ2xhc3MoICJ1aS1yYW5nZXNsaWRlci1maXJzdCIgKSwKCQkJCXRoaXNTbGlkZXIgPSBmaXJzdCA/IHRoaXMuX2lucHV0Rmlyc3QgOiB0aGlzLl9pbnB1dExhc3QsCgkJCQlvdGhlclNsaWRlciA9IGZpcnN0ID8gdGhpcy5faW5wdXRMYXN0IDogdGhpcy5faW5wdXRGaXJzdDsKCgkJCWlmICggKCB0aGlzLl9pbnB1dEZpcnN0LnZhbCgpID4gdGhpcy5faW5wdXRMYXN0LnZhbCgpICYmIGV2ZW50LnR5cGUgPT09ICJtb3VzZWRvd24iICYmICEkKGV2ZW50LnRhcmdldCkuaGFzQ2xhc3MoInVpLXNsaWRlci1oYW5kbGUiKSkgKSB7CgkJCQl0aGlzU2xpZGVyLmJsdXIoKTsKCQkJfSBlbHNlIGlmICggZXZlbnQudHlwZSA9PT0gIm1vdXNlZG93biIgKSB7CgkJCQlyZXR1cm47CgkJCX0KCQkJaWYgKCBtaW4gPiBtYXggJiYgIXRoaXMuX3NsaWRlclRhcmdldCApIHsKCQkJCS8vdGhpcyBwcmV2ZW50cyBtaW4gZnJvbSBiZWluZyBncmVhdGVyIHRoZW4gbWF4CgkJCQl0aGlzU2xpZGVyLnZhbCggZmlyc3QgPyBtYXg6IG1pbiApLnNsaWRlciggInJlZnJlc2giICk7CgkJCQl0aGlzLl90cmlnZ2VyKCAibm9ybWFsaXplIiApOwoJCQl9IGVsc2UgaWYgKCBtaW4gPiBtYXggKSB7CgkJCQkvL3RoaXMgbWFrZXMgaXQgc28gY2xpY2tzIG9uIHRoZSB0YXJnZXQgb24gZWl0aGVyIGV4dHJlbWUgZ28gdG8gdGhlIGNsb3Nlc3QgaGFuZGxlCgkJCQl0aGlzU2xpZGVyLnZhbCggdGhpcy5fdGFyZ2V0VmFsICkuc2xpZGVyKCAicmVmcmVzaCIgKTsKCgkJCQkvL1lvdSBtdXN0IHdhaXQgZm9yIHRoZSBzdGFjayB0byB1bndpbmQgc28gZmlyc3Qgc2xpZGVyIGlzIHVwZGF0ZWQgYmVmb3JlIHVwZGF0aW5nIHNlY29uZAoJCQkJc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCQkJb3RoZXJTbGlkZXIudmFsKCBmaXJzdCA/IG1pbjogbWF4ICkuc2xpZGVyKCAicmVmcmVzaCIgKTsKCQkJCQkkLmRhdGEoIG90aGVyU2xpZGVyLmdldCgwKSwgIm1vYmlsZS1zbGlkZXIiICkuaGFuZGxlLmZvY3VzKCk7CgkJCQkJc2VsZi5fc2xpZGVyRmlyc3QuY3NzKCAiei1pbmRleCIsIGZpcnN0ID8gIiIgOiAxICk7CgkJCQkJc2VsZi5fdHJpZ2dlciggIm5vcm1hbGl6ZSIgKTsKCQkJCX0sIDAgKTsKCQkJCXRoaXMuX3Byb3h5ID0gKCBmaXJzdCApID8gImZpcnN0IiA6ICJsYXN0IjsKCQkJfQoJCQkvL2ZpeGVzIGlzc3VlIHdoZXJlIHdoZW4gYm90aCBfc2xpZGVycyBhcmUgYXQgbWluIHRoZXkgY2Fubm90IGJlIGFkanVzdGVkCgkJCWlmICggbWluID09PSBtYXggKSB7CgkJCQkkLmRhdGEoIHRoaXNTbGlkZXIuZ2V0KDApLCAibW9iaWxlLXNsaWRlciIgKS5oYW5kbGUuY3NzKCAiei1pbmRleCIsIDEgKTsKCQkJCSQuZGF0YSggb3RoZXJTbGlkZXIuZ2V0KDApLCAibW9iaWxlLXNsaWRlciIgKS5oYW5kbGUuY3NzKCAiei1pbmRleCIsIDAgKTsKCQkJfSBlbHNlIHsKCQkJCSQuZGF0YSggb3RoZXJTbGlkZXIuZ2V0KDApLCAibW9iaWxlLXNsaWRlciIgKS5oYW5kbGUuY3NzKCAiei1pbmRleCIsICIiICk7CgkJCQkkLmRhdGEoIHRoaXNTbGlkZXIuZ2V0KDApLCAibW9iaWxlLXNsaWRlciIgKS5oYW5kbGUuY3NzKCAiei1pbmRleCIsICIiICk7CgkJCX0KCgkJCXRoaXMuX3VwZGF0ZUhpZ2hsaWdodCgpOwoKCQkJaWYgKCBtaW4gPj0gbWF4ICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfSwKCgkJX3VwZGF0ZUhpZ2hsaWdodDogZnVuY3Rpb24oKSB7CgkJCXZhciBtaW4gPSBwYXJzZUludCggJC5kYXRhKCB0aGlzLl9pbnB1dEZpcnN0LmdldCgwKSwgIm1vYmlsZS1zbGlkZXIiICkuaGFuZGxlLmdldCgwKS5zdHlsZS5sZWZ0LCAxMCApLAoJCQkJbWF4ID0gcGFyc2VJbnQoICQuZGF0YSggdGhpcy5faW5wdXRMYXN0LmdldCgwKSwgIm1vYmlsZS1zbGlkZXIiICkuaGFuZGxlLmdldCgwKS5zdHlsZS5sZWZ0LCAxMCApLAoJCQkJd2lkdGggPSAobWF4IC0gbWluKTsKCgkJCXRoaXMuZWxlbWVudC5maW5kKCAiLnVpLXNsaWRlci1iZyIgKS5jc3MoewoJCQkJIm1hcmdpbi1sZWZ0IjogbWluICsgIiUiLAoJCQkJIndpZHRoIjogd2lkdGggKyAiJSIKCQkJfSk7CgkJfSwKCgkJX3NldFRoZW1lOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCXRoaXMuX2lucHV0Rmlyc3Quc2xpZGVyKCAib3B0aW9uIiwgInRoZW1lIiwgdmFsdWUgKTsKCQkJdGhpcy5faW5wdXRMYXN0LnNsaWRlciggIm9wdGlvbiIsICJ0aGVtZSIsIHZhbHVlICk7CgkJfSwKCgkJX3NldFRyYWNrVGhlbWU6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQkJdGhpcy5faW5wdXRGaXJzdC5zbGlkZXIoICJvcHRpb24iLCAidHJhY2tUaGVtZSIsIHZhbHVlICk7CgkJCXRoaXMuX2lucHV0TGFzdC5zbGlkZXIoICJvcHRpb24iLCAidHJhY2tUaGVtZSIsIHZhbHVlICk7CgkJfSwKCgkJX3NldE1pbmk6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQkJdGhpcy5faW5wdXRGaXJzdC5zbGlkZXIoICJvcHRpb24iLCAibWluaSIsIHZhbHVlICk7CgkJCXRoaXMuX2lucHV0TGFzdC5zbGlkZXIoICJvcHRpb24iLCAibWluaSIsIHZhbHVlICk7CgkJCXRoaXMuZWxlbWVudC50b2dnbGVDbGFzcyggInVpLW1pbmkiLCAhIXZhbHVlICk7CgkJfSwKCgkJX3NldEhpZ2hsaWdodDogZnVuY3Rpb24oIHZhbHVlICkgewoJCQl0aGlzLl9pbnB1dEZpcnN0LnNsaWRlciggIm9wdGlvbiIsICJoaWdobGlnaHQiLCB2YWx1ZSApOwoJCQl0aGlzLl9pbnB1dExhc3Quc2xpZGVyKCAib3B0aW9uIiwgImhpZ2hsaWdodCIsIHZhbHVlICk7CgkJfSwKCgkJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLl9sYWJlbC5wcmVwZW5kVG8oIHRoaXMuZWxlbWVudCApOwoJCQl0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoICJ1aS1yYW5nZXNsaWRlciB1aS1taW5pIiApOwoJCQl0aGlzLl9pbnB1dEZpcnN0LmFmdGVyKCB0aGlzLl9zbGlkZXJGaXJzdCApOwoJCQl0aGlzLl9pbnB1dExhc3QuYWZ0ZXIoIHRoaXMuX3NsaWRlckxhc3QgKTsKCQkJdGhpcy5fc2xpZGVycy5yZW1vdmUoKTsKCQkJdGhpcy5lbGVtZW50LmZpbmQoICJpbnB1dCIgKS5yZW1vdmVDbGFzcyggInVpLXJhbmdlc2xpZGVyLWZpcnN0IHVpLXJhbmdlc2xpZGVyLWxhc3QiICkuc2xpZGVyKCAiZGVzdHJveSIgKTsKCQl9CgoJfSwgJC5tb2JpbGUuYmVoYXZpb3JzLmZvcm1SZXNldCApICk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCgkkLndpZGdldCggIm1vYmlsZS50ZXh0aW5wdXQiLCAkLm1vYmlsZS50ZXh0aW5wdXQsIHsKCQlvcHRpb25zOiB7CgkJCWNsZWFyQnRuOiBmYWxzZSwKCQkJY2xlYXJCdG5UZXh0OiAiQ2xlYXIgdGV4dCIKCQl9LAoKCQlfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5fc3VwZXIoKTsKCgkJCWlmICggISF0aGlzLm9wdGlvbnMuY2xlYXJCdG4gfHwgdGhpcy5pc1NlYXJjaCApIHsKCQkJCXRoaXMuX2FkZENsZWFyQnRuKCk7CgkJCX0KCQl9LAoKCQljbGVhckJ1dHRvbjogZnVuY3Rpb24oKSB7CgoJCQlyZXR1cm4gJCggIjxhIGhyZWY9JyMnIGNsYXNzPSd1aS1pbnB1dC1jbGVhciB1aS1idG4gdWktaWNvbi1kZWxldGUgdWktYnRuLWljb24tbm90ZXh0IHVpLWNvcm5lci1hbGwiICsKICAgICInIHRpdGxlPSciICsgdGhpcy5vcHRpb25zLmNsZWFyQnRuVGV4dCArICInPiIgKyB0aGlzLm9wdGlvbnMuY2xlYXJCdG5UZXh0ICsgIjwvYT4iICk7CgoJCX0sCgoJCV9jbGVhckJ0bkNsaWNrOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCXRoaXMuZWxlbWVudC52YWwoICIiICkKCQkJCQkuZm9jdXMoKQoJCQkJCS50cmlnZ2VyKCAiY2hhbmdlIiApOwoKCQkJdGhpcy5fY2xlYXJCdG4uYWRkQ2xhc3MoICJ1aS1pbnB1dC1jbGVhci1oaWRkZW4iICk7CgkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJfSwKCgkJX2FkZENsZWFyQnRuOiBmdW5jdGlvbigpIHsKCgkJCWlmICggIXRoaXMub3B0aW9ucy5lbmhhbmNlZCApIHsKCQkJCXRoaXMuX2VuaGFuY2VDbGVhcigpOwoJCQl9CgoJCQkkLmV4dGVuZCggdGhpcywgewoJCQkJX2NsZWFyQnRuOiB0aGlzLndpZGdldCgpLmZpbmQoImEudWktaW5wdXQtY2xlYXIiKQoJCQl9KTsKCgkJCXRoaXMuX2JpbmRDbGVhckV2ZW50cygpOwoKCQkJdGhpcy5fdG9nZ2xlQ2xlYXIoKTsKCgkJfSwKCgkJX2VuaGFuY2VDbGVhcjogZnVuY3Rpb24oKSB7CgoJCQl0aGlzLmNsZWFyQnV0dG9uKCkuYXBwZW5kVG8oIHRoaXMud2lkZ2V0KCkgKTsKCQkJdGhpcy53aWRnZXQoKS5hZGRDbGFzcyggInVpLWlucHV0LWhhcy1jbGVhciIgKTsKCgkJfSwKCgkJX2JpbmRDbGVhckV2ZW50czogZnVuY3Rpb24oKSB7CgoJCQl0aGlzLl9vbiggdGhpcy5fY2xlYXJCdG4sIHsKCQkJCSJjbGljayI6ICJfY2xlYXJCdG5DbGljayIKCQkJfSk7CgoJCQl0aGlzLl9vbih7CgkJCQkia2V5dXAiOiAiX3RvZ2dsZUNsZWFyIiwKCQkJCSJjaGFuZ2UiOiAiX3RvZ2dsZUNsZWFyIiwKCQkJCSJpbnB1dCI6ICJfdG9nZ2xlQ2xlYXIiLAoJCQkJImZvY3VzIjogIl90b2dnbGVDbGVhciIsCgkJCQkiYmx1ciI6ICJfdG9nZ2xlQ2xlYXIiLAoJCQkJImN1dCI6ICJfdG9nZ2xlQ2xlYXIiLAoJCQkJInBhc3RlIjogIl90b2dnbGVDbGVhciIKCgkJCX0pOwoKCQl9LAoKCQlfdW5iaW5kQ2xlYXI6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLl9vZmYoIHRoaXMuX2NsZWFyQnRuLCAiY2xpY2siKTsKCQkJdGhpcy5fb2ZmKCB0aGlzLmVsZW1lbnQsICJrZXl1cCBjaGFuZ2UgaW5wdXQgZm9jdXMgYmx1ciBjdXQgcGFzdGUiICk7CgkJfSwKCgkJX3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCQl0aGlzLl9zdXBlciggb3B0aW9ucyApOwoKCQkJaWYgKCBvcHRpb25zLmNsZWFyYnRuICE9PSB1bmRlZmluZWQgJiYgIXRoaXMuZWxlbWVudC5pcyggInRleHRhcmVhLCA6anFtRGF0YSh0eXBlPSdyYW5nZScpIiApICkgewoJCQkJaWYgKCBvcHRpb25zLmNsZWFyQnRuICkgewoJCQkJCXRoaXMuX2FkZENsZWFyQnRuKCk7CgkJCQl9IGVsc2UgewoJCQkJCXRoaXMuX2Rlc3Ryb3lDbGVhcigpOwoJCQkJfQoJCQl9CgoJCQlpZiAoIG9wdGlvbnMuY2xlYXJCdG5UZXh0ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5fY2xlYXJCdG4gIT09IHVuZGVmaW5lZCApIHsKCQkJCXRoaXMuX2NsZWFyQnRuLnRleHQoIG9wdGlvbnMuY2xlYXJCdG5UZXh0ICk7CgkJCX0KCQl9LAoKCQlfdG9nZ2xlQ2xlYXI6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLl9kZWxheSggIl90b2dnbGVDbGVhckNsYXNzIiwgMCApOwoJCX0sCgoJCV90b2dnbGVDbGVhckNsYXNzOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5fY2xlYXJCdG4udG9nZ2xlQ2xhc3MoICJ1aS1pbnB1dC1jbGVhci1oaWRkZW4iLCAhdGhpcy5lbGVtZW50LnZhbCgpICk7CgkJfSwKCgkJX2Rlc3Ryb3lDbGVhcjogZnVuY3Rpb24oKSB7CgkJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggInVpLWlucHV0LWhhcy1jbGVhciIgKTsKCQkJdGhpcy5fdW5iaW5kQ2xlYXIoKS5fY2xlYXJCdG4ucmVtb3ZlKCk7CgkJfSwKCgkJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLl9zdXBlcigpOwoJCQl0aGlzLl9kZXN0cm95Q2xlYXIoKTsKCQl9CgoJfSk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCgkkLndpZGdldCggIm1vYmlsZS50ZXh0aW5wdXQiLCAkLm1vYmlsZS50ZXh0aW5wdXQsIHsKCQlvcHRpb25zOiB7CgkJCWF1dG9ncm93OnRydWUsCgkJCWtleXVwVGltZW91dEJ1ZmZlcjogMTAwCgkJfSwKCgkJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJCXRoaXMuX3N1cGVyKCk7CgoJCQlpZiAoIHRoaXMub3B0aW9ucy5hdXRvZ3JvdyAmJiB0aGlzLmlzVGV4dGFyZWEgKSB7CgkJCQl0aGlzLl9hdXRvZ3JvdygpOwoJCQl9CgkJfSwKCgkJX2F1dG9ncm93OiBmdW5jdGlvbigpIHsKCQkJdGhpcy5fb24oewoJCQkJImtleXVwIjogIl90aW1lb3V0IiwKCQkJCSJjaGFuZ2UiOiAiX3RpbWVvdXQiLAoJCQkJImlucHV0IjogIl90aW1lb3V0IiwKCQkJCSJwYXN0ZSI6ICJfdGltZW91dCIsCgkJCX0pOwoKCQkJLy8gQXR0YWNoIHRvIHRoZSB2YXJpb3VzIHlvdS1oYXZlLWJlY29tZS12aXNpYmxlIG5vdGlmaWNhdGlvbnMgdGhhdCB0aGUKCQkJLy8gdmFyaW91cyBmcmFtZXdvcmsgZWxlbWVudHMgZW1pdC4KCQkJLy8gVE9ETzogUmVtb3ZlIGFsbCBidXQgdGhlIHVwZGF0ZWxheW91dCBoYW5kbGVyIG9uY2UgIzY0MjYgaXMgZml4ZWQuCgkJCXRoaXMuX29uKCB0cnVlLCB0aGlzLmRvY3VtZW50LCB7CgoJCQkJLy8gVE9ETzogTW92ZSB0byBub24tZGVwcmVjYXRlZCBldmVudAoJCQkJInBhZ2VzaG93IjogIl9oYW5kbGVTaG93IiwKCQkJCSJwb3B1cGJlZm9yZXBvc2l0aW9uIjogIl9oYW5kbGVTaG93IiwKCQkJCSJ1cGRhdGVsYXlvdXQiOiAiX2hhbmRsZVNob3ciLAoJCQkJInBhbmVsb3BlbiI6ICJfaGFuZGxlU2hvdyIKCQkJfSk7CgkJfSwKCgkJLy8gU3luY2hyb25vdXNseSBmaXggdGhlIHdpZGdldCBoZWlnaHQgaWYgdGhpcyB3aWRnZXQncyBwYXJlbnRzIGFyZSBzdWNoCgkJLy8gdGhhdCB0aGV5IHNob3cvaGlkZSBjb250ZW50IGF0IHJ1bnRpbWUuIFdlIHN0aWxsIG5lZWQgdG8gY2hlY2sgd2hldGhlcgoJCS8vIHRoZSB3aWRnZXQgaXMgYWN0dWFsbHkgdmlzaWJsZSBpbiBjYXNlIGl0IGlzIGNvbnRhaW5lZCBpbnNpZGUgbXVsdGlwbGUKCQkvLyBzdWNoIGNvbnRhaW5lcnMuIEZvciBleGFtcGxlOiBwYW5lbCBjb250YWlucyBjb2xsYXBzaWJsZSBjb250YWlucwoJCS8vIGF1dG9ncm93IHRleHRpbnB1dC4gVGhlIHBhbmVsIG1heSBlbWl0ICJwYW5lbG9wZW4iIGluZGljYXRpbmcgdGhhdCBpdHMKCQkvLyBjb250ZW50IGhhcyBiZWNvbWUgdmlzaWJsZSwgYnV0IHRoZSBjb2xsYXBzaWJsZSBpcyBzdGlsbCBjb2xsYXBzZWQsIHNvCgkJLy8gdGhlIGF1dG9ncm93IHRleHRhcmVhIGlzIHN0aWxsIG5vdCB2aXNpYmxlLgoJCV9oYW5kbGVTaG93OiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCWlmICggJC5jb250YWlucyggZXZlbnQudGFyZ2V0LCB0aGlzLmVsZW1lbnRbIDAgXSApICYmCgkJCQl0aGlzLmVsZW1lbnQuaXMoICI6dmlzaWJsZSIgKSApIHsKCgkJCQlpZiAoIGV2ZW50LnR5cGUgIT09ICJwb3B1cGJlZm9yZXBvc2l0aW9uIiApIHsKCQkJCQl0aGlzLmVsZW1lbnQKCQkJCQkJLmFkZENsYXNzKCAidWktdGV4dGlucHV0LWF1dG9ncm93LXJlc2l6ZSIgKQoJCQkJCQkub25lKCAidHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIiwKCQkJCQkJCSQucHJveHkoIGZ1bmN0aW9uKCkgewoJCQkJCQkJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggInVpLXRleHRpbnB1dC1hdXRvZ3Jvdy1yZXNpemUiICk7CgkJCQkJCQl9LCB0aGlzICkgKTsKCQkJCX0KCQkJCXRoaXMuX3ByZXBhcmVIZWlnaHRVcGRhdGUoKTsKCQkJfQoJCX0sCgoJCV91bmJpbmRBdXRvZ3JvdzogZnVuY3Rpb24oKSB7CgkJCXRoaXMuX29mZiggdGhpcy5lbGVtZW50LCAia2V5dXAgY2hhbmdlIGlucHV0IHBhc3RlIiApOwoJCQl0aGlzLl9vZmYoIHRoaXMuZG9jdW1lbnQsCgkJCQkicGFnZXNob3cgcG9wdXBiZWZvcmVwb3NpdGlvbiB1cGRhdGVsYXlvdXQgcGFuZWxvcGVuIiApOwoJCX0sCgoJCWtleXVwVGltZW91dDogbnVsbCwKCgkJX3ByZXBhcmVIZWlnaHRVcGRhdGU6IGZ1bmN0aW9uKCBkZWxheSApIHsKCQkJaWYgKCB0aGlzLmtleXVwVGltZW91dCApIHsKCQkJCWNsZWFyVGltZW91dCggdGhpcy5rZXl1cFRpbWVvdXQgKTsKCQkJfQoJCQlpZiAoIGRlbGF5ID09PSB1bmRlZmluZWQgKSB7CgkJCQl0aGlzLl91cGRhdGVIZWlnaHQoKTsKCQkJfSBlbHNlIHsKCQkJCXRoaXMua2V5dXBUaW1lb3V0ID0gdGhpcy5fZGVsYXkoICJfdXBkYXRlSGVpZ2h0IiwgZGVsYXkgKTsKCQkJfQoJCX0sCgoJCV90aW1lb3V0OiBmdW5jdGlvbigpIHsKCQkJdGhpcy5fcHJlcGFyZUhlaWdodFVwZGF0ZSggdGhpcy5vcHRpb25zLmtleXVwVGltZW91dEJ1ZmZlciApOwoJCX0sCgoJCV91cGRhdGVIZWlnaHQ6IGZ1bmN0aW9uKCkgewoKCQkJdGhpcy5rZXl1cFRpbWVvdXQgPSAwOwoKCQkJdGhpcy5lbGVtZW50LmNzcyh7CgkJCQkiaGVpZ2h0IjogMCwKCQkJCSJtaW4taGVpZ2h0IjogMCwKCQkJCSJtYXgtaGVpZ2h0IjogMAoJCQl9KTsKCgkJCXZhciBwYWRkaW5nVG9wLCBwYWRkaW5nQm90dG9tLCBwYWRkaW5nSGVpZ2h0LAoJCQkJc2Nyb2xsSGVpZ2h0ID0gdGhpcy5lbGVtZW50WyAwIF0uc2Nyb2xsSGVpZ2h0LAoJCQkJY2xpZW50SGVpZ2h0ID0gdGhpcy5lbGVtZW50WyAwIF0uY2xpZW50SGVpZ2h0LAoJCQkJYm9yZGVyVG9wID0gcGFyc2VGbG9hdCggdGhpcy5lbGVtZW50LmNzcyggImJvcmRlci10b3Atd2lkdGgiICkgKSwKCQkJCWJvcmRlckJvdHRvbSA9IHBhcnNlRmxvYXQoIHRoaXMuZWxlbWVudC5jc3MoICJib3JkZXItYm90dG9tLXdpZHRoIiApICksCgkJCQlib3JkZXJIZWlnaHQgPSBib3JkZXJUb3AgKyBib3JkZXJCb3R0b20sCgkJCQloZWlnaHQgPSBzY3JvbGxIZWlnaHQgKyBib3JkZXJIZWlnaHQgKyAxNTsKCgkJCS8vIElzc3VlIDYxNzk6IFBhZGRpbmcgaXMgbm90IGluY2x1ZGVkIGluIHNjcm9sbEhlaWdodCBhbmQKCQkJLy8gY2xpZW50SGVpZ2h0IGJ5IEZpcmVmb3ggaWYgbm8gc2Nyb2xsYmFyIGlzIHZpc2libGUuIEJlY2F1c2UKCQkJLy8gdGV4dGFyZWFzIHVzZSB0aGUgYm9yZGVyLWJveCBib3gtc2l6aW5nIG1vZGVsLCBwYWRkaW5nIHNob3VsZCBiZQoJCQkvLyBpbmNsdWRlZCBpbiB0aGUgbmV3IChhc3NpZ25lZCkgaGVpZ2h0LiBCZWNhdXNlIHRoZSBoZWlnaHQgaXMgc2V0CgkJCS8vIHRvIDAsIGNsaWVudEhlaWdodCA9PSAwIGluIEZpcmVmb3guIFRoZXJlZm9yZSwgd2UgY2FuIHVzZSB0aGlzIHRvCgkJCS8vIGNoZWNrIGlmIHBhZGRpbmcgbXVzdCBiZSBhZGRlZC4KCQkJaWYgKCBjbGllbnRIZWlnaHQgPT09IDAgKSB7CgkJCQlwYWRkaW5nVG9wID0gcGFyc2VGbG9hdCggdGhpcy5lbGVtZW50LmNzcyggInBhZGRpbmctdG9wIiApICk7CgkJCQlwYWRkaW5nQm90dG9tID0gcGFyc2VGbG9hdCggdGhpcy5lbGVtZW50LmNzcyggInBhZGRpbmctYm90dG9tIiApICk7CgkJCQlwYWRkaW5nSGVpZ2h0ID0gcGFkZGluZ1RvcCArIHBhZGRpbmdCb3R0b207CgoJCQkJaGVpZ2h0ICs9IHBhZGRpbmdIZWlnaHQ7CgkJCX0KCgkJCXRoaXMuZWxlbWVudC5jc3MoewoJCQkJImhlaWdodCI6IGhlaWdodCwKCQkJCSJtaW4taGVpZ2h0IjogIiIsCgkJCQkibWF4LWhlaWdodCI6ICIiCgkJCX0pOwoJCX0sCgoJCXJlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCQlpZiAoIHRoaXMub3B0aW9ucy5hdXRvZ3JvdyAmJiB0aGlzLmlzVGV4dGFyZWEgKSB7CgkJCQl0aGlzLl91cGRhdGVIZWlnaHQoKTsKCQkJfQoJCX0sCgoJCV9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHsKCgkJCXRoaXMuX3N1cGVyKCBvcHRpb25zICk7CgoJCQlpZiAoIG9wdGlvbnMuYXV0b2dyb3cgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmlzVGV4dGFyZWEgKSB7CgkJCQlpZiAoIG9wdGlvbnMuYXV0b2dyb3cgKSB7CgkJCQkJdGhpcy5fYXV0b2dyb3coKTsKCQkJCX0gZWxzZSB7CgkJCQkJdGhpcy5fdW5iaW5kQXV0b2dyb3coKTsKCQkJCX0KCQkJfQoJCX0KCgl9KTsKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS5zZWxlY3RtZW51IiwgJC5leHRlbmQoIHsKCWluaXRTZWxlY3RvcjogInNlbGVjdDpub3QoIDpqcW1EYXRhKHJvbGU9J3NsaWRlcicpKTpub3QoIDpqcW1EYXRhKHJvbGU9J2ZsaXBzd2l0Y2gnKSApIiwKCglvcHRpb25zOiB7CgkJdGhlbWU6IG51bGwsCgkJaWNvbjogImNhcmF0LWQiLAoJCWljb25wb3M6ICJyaWdodCIsCgkJaW5saW5lOiBmYWxzZSwKCQljb3JuZXJzOiB0cnVlLAoJCXNoYWRvdzogdHJ1ZSwKCQlpY29uc2hhZG93OiBmYWxzZSwgLyogVE9ETzogRGVwcmVjYXRlZCBpbiAxLjQsIHJlbW92ZSBpbiAxLjUuICovCgkJb3ZlcmxheVRoZW1lOiBudWxsLAoJCWRpdmlkZXJUaGVtZTogbnVsbCwKCQloaWRlUGxhY2Vob2xkZXJNZW51SXRlbXM6IHRydWUsCgkJY2xvc2VUZXh0OiAiQ2xvc2UiLAoJCW5hdGl2ZU1lbnU6IHRydWUsCgkJLy8gVGhpcyBvcHRpb24gZGVmYXVsdHMgdG8gdHJ1ZSBvbiBpT1MgZGV2aWNlcy4KCQlwcmV2ZW50Rm9jdXNab29tOiAvaVBob25lfGlQYWR8aVBvZC8udGVzdCggbmF2aWdhdG9yLnBsYXRmb3JtICkgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCAiQXBwbGVXZWJLaXQiICkgPiAtMSwKCQltaW5pOiBmYWxzZQoJfSwKCglfYnV0dG9uOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gJCggIjxkaXYvPiIgKTsKCX0sCgoJX3NldERpc2FibGVkOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJdGhpcy5lbGVtZW50LmF0dHIoICJkaXNhYmxlZCIsIHZhbHVlICk7CgkJdGhpcy5idXR0b24uYXR0ciggImFyaWEtZGlzYWJsZWQiLCB2YWx1ZSApOwoJCXJldHVybiB0aGlzLl9zZXRPcHRpb24oICJkaXNhYmxlZCIsIHZhbHVlICk7Cgl9LAoKCV9mb2N1c0J1dHRvbiA6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpczsKCgkJc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCXNlbGYuYnV0dG9uLmZvY3VzKCk7CgkJfSwgNDApOwoJfSwKCglfc2VsZWN0T3B0aW9uczogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuc2VsZWN0LmZpbmQoICJvcHRpb24iICk7Cgl9LAoKCS8vIHNldHVwIGl0ZW1zIHRoYXQgYXJlIGdlbmVyYWxseSBuZWNlc3NhcnkgZm9yIHNlbGVjdCBtZW51IGV4dGVuc2lvbgoJX3ByZUV4dGVuc2lvbjogZnVuY3Rpb24oKSB7CgkJdmFyIGlubGluZSA9IHRoaXMub3B0aW9ucy5pbmxpbmUgfHwgdGhpcy5lbGVtZW50LmpxbURhdGEoICJpbmxpbmUiICksCgkJCW1pbmkgPSB0aGlzLm9wdGlvbnMubWluaSB8fCB0aGlzLmVsZW1lbnQuanFtRGF0YSggIm1pbmkiICksCgkJCWNsYXNzZXMgPSAiIjsKCQkvLyBUT0RPOiBQb3N0IDEuMS0tb25jZSB3ZSBoYXZlIHRpbWUgdG8gdGVzdCB0aG9yb3VnaGx5LS1hbnkgY2xhc3NlcyBtYW51YWxseSBhcHBsaWVkIHRvIHRoZSBvcmlnaW5hbCBlbGVtZW50IHNob3VsZCBiZSBjYXJyaWVkIG92ZXIgdG8gdGhlIGVuaGFuY2VkIGVsZW1lbnQsIHdpdGggYW4gYC1lbmhhbmNlZGAgc3VmZml4LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktbW9iaWxlL2lzc3Vlcy8zNTc3CgkJLyogaWYgKCAkZWxbMF0uY2xhc3NOYW1lLmxlbmd0aCApIHsKCQkJY2xhc3NlcyA9ICRlbFswXS5jbGFzc05hbWU7CgkJfSAqLwoJCWlmICggISF+dGhpcy5lbGVtZW50WzBdLmNsYXNzTmFtZS5pbmRleE9mKCAidWktYnRuLWxlZnQiICkgKSB7CgkJCWNsYXNzZXMgPSAiIHVpLWJ0bi1sZWZ0IjsKCQl9CgoJCWlmICggICEhfnRoaXMuZWxlbWVudFswXS5jbGFzc05hbWUuaW5kZXhPZiggInVpLWJ0bi1yaWdodCIgKSApIHsKCQkJY2xhc3NlcyA9ICIgdWktYnRuLXJpZ2h0IjsKCQl9CgoJCWlmICggaW5saW5lICkgewoJCQljbGFzc2VzICs9ICIgdWktYnRuLWlubGluZSI7CgkJfQoJCWlmICggbWluaSApIHsKCQkJY2xhc3NlcyArPSAiIHVpLW1pbmkiOwoJCX0KCgkJdGhpcy5zZWxlY3QgPSB0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoICJ1aS1idG4tbGVmdCB1aS1idG4tcmlnaHQiICkud3JhcCggIjxkaXYgY2xhc3M9J3VpLXNlbGVjdCIgKyBjbGFzc2VzICsgIic+IiApOwoJCXRoaXMuc2VsZWN0SWQgID0gdGhpcy5zZWxlY3QuYXR0ciggImlkIiApIHx8ICggInNlbGVjdC0iICsgdGhpcy51dWlkICk7CgkJdGhpcy5idXR0b25JZCA9IHRoaXMuc2VsZWN0SWQgKyAiLWJ1dHRvbiI7CgkJdGhpcy5sYWJlbCA9ICQoICJsYWJlbFtmb3I9JyIrIHRoaXMuc2VsZWN0SWQgKyInXSIgKTsKCQl0aGlzLmlzTXVsdGlwbGUgPSB0aGlzLnNlbGVjdFsgMCBdLm11bHRpcGxlOwoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdmFyIHdyYXBwZXIgPSB0aGlzLmVsZW1lbnQucGFyZW50cyggIi51aS1zZWxlY3QiICk7CgkJaWYgKCB3cmFwcGVyLmxlbmd0aCA+IDAgKSB7CgkJCWlmICggd3JhcHBlci5pcyggIi51aS1idG4tbGVmdCwgLnVpLWJ0bi1yaWdodCIgKSApIHsKCQkJCXRoaXMuZWxlbWVudC5hZGRDbGFzcyggd3JhcHBlci5oYXNDbGFzcyggInVpLWJ0bi1sZWZ0IiApID8gInVpLWJ0bi1sZWZ0IiA6ICJ1aS1idG4tcmlnaHQiICk7CgkJCX0KCQkJdGhpcy5lbGVtZW50Lmluc2VydEFmdGVyKCB3cmFwcGVyICk7CgkJCXdyYXBwZXIucmVtb3ZlKCk7CgkJfQoJfSwKCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl0aGlzLl9wcmVFeHRlbnNpb24oKTsKCgkJdGhpcy5idXR0b24gPSB0aGlzLl9idXR0b24oKTsKCgkJdmFyIHNlbGYgPSB0aGlzLAoKCQkJb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCgkJCWljb25wb3MgPSBvcHRpb25zLmljb24gPyAoIG9wdGlvbnMuaWNvbnBvcyB8fCB0aGlzLnNlbGVjdC5qcW1EYXRhKCAiaWNvbnBvcyIgKSApIDogZmFsc2UsCgoJCQlidXR0b24gPSB0aGlzLmJ1dHRvbgoJCQkJLmluc2VydEJlZm9yZSggdGhpcy5zZWxlY3QgKQoJCQkJLmF0dHIoICJpZCIsIHRoaXMuYnV0dG9uSWQgKQoJCQkJLmFkZENsYXNzKCAidWktYnRuIiArCgkJCQkJKCBvcHRpb25zLmljb24gPyAoICIgdWktaWNvbi0iICsgb3B0aW9ucy5pY29uICsgIiB1aS1idG4taWNvbi0iICsgaWNvbnBvcyArCgkJCQkJKCBvcHRpb25zLmljb25zaGFkb3cgPyAiIHVpLXNoYWRvdy1pY29uIiA6ICIiICkgKSA6CSIiICkgKyAvKiBUT0RPOiBSZW1vdmUgaW4gMS41LiAqLwoJCQkJCSggb3B0aW9ucy50aGVtZSA/ICIgdWktYnRuLSIgKyBvcHRpb25zLnRoZW1lIDogIiIgKSArCgkJCQkJKCBvcHRpb25zLmNvcm5lcnMgPyAiIHVpLWNvcm5lci1hbGwiIDogIiIgKSArCgkJCQkJKCBvcHRpb25zLnNoYWRvdyA/ICIgdWktc2hhZG93IiA6ICIiICkgKTsKCgkJdGhpcy5zZXRCdXR0b25UZXh0KCk7CgoJCS8vIE9wZXJhIGRvZXMgbm90IHByb3Blcmx5IHN1cHBvcnQgb3BhY2l0eSBvbiBzZWxlY3QgZWxlbWVudHMKCQkvLyBJbiBNaW5pLCBpdCBoaWRlcyB0aGUgZWxlbWVudCwgYnV0IG5vdCBpdHMgdGV4dAoJCS8vIE9uIHRoZSBkZXNrdG9wLGl0IHNlZW1zIHRvIGRvIHRoZSBvcHBvc2l0ZQoJCS8vIGZvciB0aGVzZSByZWFzb25zLCB1c2luZyB0aGUgbmF0aXZlTWVudSBvcHRpb24gcmVzdWx0cyBpbiBhIGZ1bGwgbmF0aXZlIHNlbGVjdCBpbiBPcGVyYQoJCWlmICggb3B0aW9ucy5uYXRpdmVNZW51ICYmIHdpbmRvdy5vcGVyYSAmJiB3aW5kb3cub3BlcmEudmVyc2lvbiApIHsKCQkJYnV0dG9uLmFkZENsYXNzKCAidWktc2VsZWN0LW5hdGl2ZW9ubHkiICk7CgkJfQoKCQkvLyBBZGQgY291bnRlciBmb3IgbXVsdGkgc2VsZWN0cwoJCWlmICggdGhpcy5pc011bHRpcGxlICkgewoJCQl0aGlzLmJ1dHRvbkNvdW50ID0gJCggIjxzcGFuPiIgKQoJCQkJLmFkZENsYXNzKCAidWktbGktY291bnQgdWktYm9keS1pbmhlcml0IiApCgkJCQkuaGlkZSgpCgkJCQkuYXBwZW5kVG8oIGJ1dHRvbi5hZGRDbGFzcyggInVpLWxpLWhhcy1jb3VudCIgKSApOwoJCX0KCgkJLy8gRGlzYWJsZSBpZiBzcGVjaWZpZWQKCQlpZiAoIG9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy5lbGVtZW50LmF0dHIoICJkaXNhYmxlZCIgKSkgewoJCQl0aGlzLmRpc2FibGUoKTsKCQl9CgoJCS8vIEV2ZW50cyBvbiBuYXRpdmUgc2VsZWN0CgkJdGhpcy5zZWxlY3QuY2hhbmdlKGZ1bmN0aW9uKCkgewoJCQlzZWxmLnJlZnJlc2goKTsKCgkJCWlmICggISFvcHRpb25zLm5hdGl2ZU1lbnUgKSB7CgkJCQl0aGlzLmJsdXIoKTsKCQkJfQoJCX0pOwoKCQl0aGlzLl9oYW5kbGVGb3JtUmVzZXQoKTsKCgkJdGhpcy5fb24oIHRoaXMuYnV0dG9uLCB7CgkJCWtleWRvd246ICJfaGFuZGxlS2V5ZG93biIKCQl9KTsKCgkJdGhpcy5idWlsZCgpOwoJfSwKCglidWlsZDogZnVuY3Rpb24oKSB7CgkJdmFyIHNlbGYgPSB0aGlzOwoKCQl0aGlzLnNlbGVjdAoJCQkuYXBwZW5kVG8oIHNlbGYuYnV0dG9uICkKCQkJLmJpbmQoICJ2bW91c2Vkb3duIiwgZnVuY3Rpb24oKSB7CgkJCQkvLyBBZGQgYWN0aXZlIGNsYXNzIHRvIGJ1dHRvbgoJCQkJc2VsZi5idXR0b24uYWRkQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJCX0pCgkJCS5iaW5kKCAiZm9jdXMiLCBmdW5jdGlvbigpIHsKCQkJCXNlbGYuYnV0dG9uLmFkZENsYXNzKCAkLm1vYmlsZS5mb2N1c0NsYXNzICk7CgkJCX0pCgkJCS5iaW5kKCAiYmx1ciIsIGZ1bmN0aW9uKCkgewoJCQkJc2VsZi5idXR0b24ucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmZvY3VzQ2xhc3MgKTsKCQkJfSkKCQkJLmJpbmQoICJmb2N1cyB2bW91c2VvdmVyIiwgZnVuY3Rpb24oKSB7CgkJCQlzZWxmLmJ1dHRvbi50cmlnZ2VyKCAidm1vdXNlb3ZlciIgKTsKCQkJfSkKCQkJLmJpbmQoICJ2bW91c2Vtb3ZlIiwgZnVuY3Rpb24oKSB7CgkJCQkvLyBSZW1vdmUgYWN0aXZlIGNsYXNzIG9uIHNjcm9sbC90b3VjaG1vdmUKCQkJCXNlbGYuYnV0dG9uLnJlbW92ZUNsYXNzKCAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyApOwoJCQl9KQoJCQkuYmluZCggImNoYW5nZSBibHVyIHZtb3VzZW91dCIsIGZ1bmN0aW9uKCkgewoJCQkJc2VsZi5idXR0b24udHJpZ2dlciggInZtb3VzZW91dCIgKQoJCQkJCS5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJfSk7CgoJCS8vIEluIG1hbnkgc2l0dWF0aW9ucywgaU9TIHdpbGwgem9vbSBpbnRvIHRoZSBzZWxlY3QgdXBvbiB0YXAsIHRoaXMgcHJldmVudHMgdGhhdCBmcm9tIGhhcHBlbmluZwoJCXNlbGYuYnV0dG9uLmJpbmQoICJ2bW91c2Vkb3duIiwgZnVuY3Rpb24oKSB7CgkJCWlmICggc2VsZi5vcHRpb25zLnByZXZlbnRGb2N1c1pvb20gKSB7CgkJCQkJJC5tb2JpbGUuem9vbS5kaXNhYmxlKCB0cnVlICk7CgkJCX0KCQl9KTsKCQlzZWxmLmxhYmVsLmJpbmQoICJjbGljayBmb2N1cyIsIGZ1bmN0aW9uKCkgewoJCQlpZiAoIHNlbGYub3B0aW9ucy5wcmV2ZW50Rm9jdXNab29tICkgewoJCQkJCSQubW9iaWxlLnpvb20uZGlzYWJsZSggdHJ1ZSApOwoJCQl9CgkJfSk7CgkJc2VsZi5zZWxlY3QuYmluZCggImZvY3VzIiwgZnVuY3Rpb24oKSB7CgkJCWlmICggc2VsZi5vcHRpb25zLnByZXZlbnRGb2N1c1pvb20gKSB7CgkJCQkJJC5tb2JpbGUuem9vbS5kaXNhYmxlKCB0cnVlICk7CgkJCX0KCQl9KTsKCQlzZWxmLmJ1dHRvbi5iaW5kKCAibW91c2V1cCIsIGZ1bmN0aW9uKCkgewoJCQlpZiAoIHNlbGYub3B0aW9ucy5wcmV2ZW50Rm9jdXNab29tICkgewoJCQkJc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCQkkLm1vYmlsZS56b29tLmVuYWJsZSggdHJ1ZSApOwoJCQkJfSwgMCApOwoJCQl9CgkJfSk7CgkJc2VsZi5zZWxlY3QuYmluZCggImJsdXIiLCBmdW5jdGlvbigpIHsKCQkJaWYgKCBzZWxmLm9wdGlvbnMucHJldmVudEZvY3VzWm9vbSApIHsKCQkJCSQubW9iaWxlLnpvb20uZW5hYmxlKCB0cnVlICk7CgkJCX0KCQl9KTsKCgl9LAoKCXNlbGVjdGVkOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5fc2VsZWN0T3B0aW9ucygpLmZpbHRlciggIjpzZWxlY3RlZCIgKTsKCX0sCgoJc2VsZWN0ZWRJbmRpY2VzOiBmdW5jdGlvbigpIHsKCQl2YXIgc2VsZiA9IHRoaXM7CgoJCXJldHVybiB0aGlzLnNlbGVjdGVkKCkubWFwKGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gc2VsZi5fc2VsZWN0T3B0aW9ucygpLmluZGV4KCB0aGlzICk7CgkJfSkuZ2V0KCk7Cgl9LAoKCXNldEJ1dHRvblRleHQ6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpcywKCQkJc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkKCksCgkJCXRleHQgPSB0aGlzLnBsYWNlaG9sZGVyLAoJCQlzcGFuID0gJCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggInNwYW4iICkgKTsKCgkJdGhpcy5idXR0b24uY2hpbGRyZW4oICJzcGFuIiApLm5vdCggIi51aS1saS1jb3VudCIgKS5yZW1vdmUoKS5lbmQoKS5lbmQoKS5wcmVwZW5kKCAoZnVuY3Rpb24oKSB7CgkJCWlmICggc2VsZWN0ZWQubGVuZ3RoICkgewoJCQkJdGV4dCA9IHNlbGVjdGVkLm1hcChmdW5jdGlvbigpIHsKCQkJCQlyZXR1cm4gJCggdGhpcyApLnRleHQoKTsKCQkJCX0pLmdldCgpLmpvaW4oICIsICIgKTsKCQkJfSBlbHNlIHsKCQkJCXRleHQgPSBzZWxmLnBsYWNlaG9sZGVyOwoJCQl9CgoJCQlpZiAoIHRleHQgKSB7CgkJCQlzcGFuLnRleHQoIHRleHQgKTsKCQkJfSBlbHNlIHsKCQkJCXNwYW4uaHRtbCggIiZuYnNwOyIgKTsKCQkJfQoKCQkJLy8gVE9ETyBwb3NzaWJseSBhZ2dyZWdhdGUgbXVsdGlwbGUgc2VsZWN0IG9wdGlvbiBjbGFzc2VzCgkJCXJldHVybiBzcGFuCgkJCQkuYWRkQ2xhc3MoIHNlbGYuc2VsZWN0LmF0dHIoICJjbGFzcyIgKSApCgkJCQkuYWRkQ2xhc3MoIHNlbGVjdGVkLmF0dHIoICJjbGFzcyIgKSApCgkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1zY3JlZW4taGlkZGVuIiApOwoJCX0pKCkpOwoJfSwKCglzZXRCdXR0b25Db3VudDogZnVuY3Rpb24oKSB7CgkJdmFyIHNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZCgpOwoKCQkvLyBtdWx0aXBsZSBjb3VudCBpbnNpZGUgYnV0dG9uCgkJaWYgKCB0aGlzLmlzTXVsdGlwbGUgKSB7CgkJCXRoaXMuYnV0dG9uQ291bnRbIHNlbGVjdGVkLmxlbmd0aCA+IDEgPyAic2hvdyIgOiAiaGlkZSIgXSgpLnRleHQoIHNlbGVjdGVkLmxlbmd0aCApOwoJCX0KCX0sCgoJX2hhbmRsZUtleWRvd246IGZ1bmN0aW9uKCAvKiBldmVudCAqLyApIHsKCQl0aGlzLl9kZWxheSggIl9yZWZyZXNoQnV0dG9uIiApOwoJfSwKCglfcmVzZXQ6IGZ1bmN0aW9uKCkgewoJCXRoaXMucmVmcmVzaCgpOwoJfSwKCglfcmVmcmVzaEJ1dHRvbjogZnVuY3Rpb24oKSB7CgkJdGhpcy5zZXRCdXR0b25UZXh0KCk7CgkJdGhpcy5zZXRCdXR0b25Db3VudCgpOwoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl0aGlzLl9yZWZyZXNoQnV0dG9uKCk7Cgl9LAoKCS8vIG9wZW4gYW5kIGNsb3NlIHByZXNlcnZlZCBpbiBuYXRpdmUgc2VsZWN0cwoJLy8gdG8gc2ltcGxpZnkgdXNlcnMgY29kZSB3aGVuIGxvb3Bpbmcgb3ZlciBzZWxlY3RzCglvcGVuOiAkLm5vb3AsCgljbG9zZTogJC5ub29wLAoKCWRpc2FibGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX3NldERpc2FibGVkKCB0cnVlICk7CgkJdGhpcy5idXR0b24uYWRkQ2xhc3MoICJ1aS1zdGF0ZS1kaXNhYmxlZCIgKTsKCX0sCgoJZW5hYmxlOiBmdW5jdGlvbigpIHsKCQl0aGlzLl9zZXREaXNhYmxlZCggZmFsc2UgKTsKCQl0aGlzLmJ1dHRvbi5yZW1vdmVDbGFzcyggInVpLXN0YXRlLWRpc2FibGVkIiApOwoJfQp9LCAkLm1vYmlsZS5iZWhhdmlvcnMuZm9ybVJlc2V0ICkgKTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5tb2JpbGUubGlua3MgPSBmdW5jdGlvbiggdGFyZ2V0ICkgewoKCS8vbGlua3Mgd2l0aGluIGNvbnRlbnQgYXJlYXMsIHRlc3RzIGluY2x1ZGVkIHdpdGggcGFnZQoJJCggdGFyZ2V0ICkKCQkuZmluZCggImEiICkKCQkuanFtRW5oYW5jZWFibGUoKQoJCS5maWx0ZXIoICI6anFtRGF0YShyZWw9J3BvcHVwJylbaHJlZl1baHJlZiE9JyddIiApCgkJLmVhY2goIGZ1bmN0aW9uKCkgewoJCQkvLyBBY2Nlc3NpYmlsaXR5IGluZm8gZm9yIHBvcHVwcwoJCQl2YXIgZWxlbWVudCA9IHRoaXMsCgkJCQlpZHJlZiA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCAiaHJlZiIgKS5zdWJzdHJpbmcoIDEgKTsKCgkJCWlmICggaWRyZWYgKSB7CgkJCQllbGVtZW50LnNldEF0dHJpYnV0ZSggImFyaWEtaGFzcG9wdXAiLCB0cnVlICk7CgkJCQllbGVtZW50LnNldEF0dHJpYnV0ZSggImFyaWEtb3ducyIsIGlkcmVmICk7CgkJCQllbGVtZW50LnNldEF0dHJpYnV0ZSggImFyaWEtZXhwYW5kZWQiLCBmYWxzZSApOwoJCQl9CgkJfSkKCQkuZW5kKCkKCQkubm90KCAiLnVpLWJ0biwgOmpxbURhdGEocm9sZT0nbm9uZScpLCA6anFtRGF0YShyb2xlPSdub2pzJykiICkKCQkuYWRkQ2xhc3MoICJ1aS1saW5rIiApOwoKfTsKCn0pKCBqUXVlcnkgKTsKCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCmZ1bmN0aW9uIGZpdFNlZ21lbnRJbnNpZGVTZWdtZW50KCB3aW5kb3dTaXplLCBzZWdtZW50U2l6ZSwgb2Zmc2V0LCBkZXNpcmVkICkgewoJdmFyIHJldHVyblZhbHVlID0gZGVzaXJlZDsKCglpZiAoIHdpbmRvd1NpemUgPCBzZWdtZW50U2l6ZSApIHsKCQkvLyBDZW50ZXIgc2VnbWVudCBpZiBpdCdzIGJpZ2dlciB0aGFuIHRoZSB3aW5kb3cKCQlyZXR1cm5WYWx1ZSA9IG9mZnNldCArICggd2luZG93U2l6ZSAtIHNlZ21lbnRTaXplICkgLyAyOwoJfSBlbHNlIHsKCQkvLyBPdGhlcndpc2UgY2VudGVyIGl0IGF0IHRoZSBkZXNpcmVkIGNvb3JkaW5hdGUgd2hpbGUga2VlcGluZyBpdCBjb21wbGV0ZWx5IGluc2lkZSB0aGUgd2luZG93CgkJcmV0dXJuVmFsdWUgPSBNYXRoLm1pbiggTWF0aC5tYXgoIG9mZnNldCwgZGVzaXJlZCAtIHNlZ21lbnRTaXplIC8gMiApLCBvZmZzZXQgKyB3aW5kb3dTaXplIC0gc2VnbWVudFNpemUgKTsKCX0KCglyZXR1cm4gcmV0dXJuVmFsdWU7Cn0KCmZ1bmN0aW9uIGdldFdpbmRvd0Nvb3JkaW5hdGVzKCB0aGVXaW5kb3cgKSB7CglyZXR1cm4gewoJCXg6IHRoZVdpbmRvdy5zY3JvbGxMZWZ0KCksCgkJeTogdGhlV2luZG93LnNjcm9sbFRvcCgpLAoJCWN4OiAoIHRoZVdpbmRvd1sgMCBdLmlubmVyV2lkdGggfHwgdGhlV2luZG93LndpZHRoKCkgKSwKCQljeTogKCB0aGVXaW5kb3dbIDAgXS5pbm5lckhlaWdodCB8fCB0aGVXaW5kb3cuaGVpZ2h0KCkgKQoJfTsKfQoKJC53aWRnZXQoICJtb2JpbGUucG9wdXAiLCB7CglvcHRpb25zOiB7CgkJd3JhcHBlckNsYXNzOiBudWxsLAoJCXRoZW1lOiBudWxsLAoJCW92ZXJsYXlUaGVtZTogbnVsbCwKCQlzaGFkb3c6IHRydWUsCgkJY29ybmVyczogdHJ1ZSwKCQl0cmFuc2l0aW9uOiAibm9uZSIsCgkJcG9zaXRpb25UbzogIm9yaWdpbiIsCgkJdG9sZXJhbmNlOiBudWxsLAoJCWNsb3NlTGlua1NlbGVjdG9yOiAiYTpqcW1EYXRhKHJlbD0nYmFjaycpIiwKCQljbG9zZUxpbmtFdmVudHM6ICJjbGljay5wb3B1cCIsCgkJbmF2aWdhdGVFdmVudHM6ICJuYXZpZ2F0ZS5wb3B1cCIsCgkJY2xvc2VFdmVudHM6ICJuYXZpZ2F0ZS5wb3B1cCBwYWdlYmVmb3JlY2hhbmdlLnBvcHVwIiwKCQlkaXNtaXNzaWJsZTogdHJ1ZSwKCQllbmhhbmNlZDogZmFsc2UsCgoJCS8vIE5PVEUgV2luZG93cyBQaG9uZSA3IGhhcyBhIHNjcm9sbCBwb3NpdGlvbiBjYWNoaW5nIGlzc3VlIHRoYXQKCQkvLyAgICAgIHJlcXVpcmVzIHVzIHRvIGRpc2FibGUgcG9wdXAgaGlzdG9yeSBtYW5hZ2VtZW50IGJ5IGRlZmF1bHQKCQkvLyAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1vYmlsZS9pc3N1ZXMvNDc4NAoJCS8vCgkJLy8gTk9URSB0aGlzIG9wdGlvbiBpcyBtb2RpZmllZCBpbiBfY3JlYXRlIQoJCWhpc3Rvcnk6ICEkLm1vYmlsZS5icm93c2VyLm9sZElFCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciB0aGVFbGVtZW50ID0gdGhpcy5lbGVtZW50LAoJCQlteUlkID0gdGhlRWxlbWVudC5hdHRyKCAiaWQiICksCgkJCWN1cnJlbnRPcHRpb25zID0gdGhpcy5vcHRpb25zOwoKCQkvLyBXZSBuZWVkIHRvIGFkanVzdCB0aGUgaGlzdG9yeSBvcHRpb24gdG8gYmUgZmFsc2UgaWYgdGhlcmUncyBubyBBSkFYIG5hdi4KCQkvLyBXZSBjYW4ndCBkbyBpdCBpbiB0aGUgb3B0aW9uIGRlY2xhcmF0aW9ucyBiZWNhdXNlIHRob3NlIGFyZSBydW4gYmVmb3JlCgkJLy8gaXQgaXMgZGV0ZXJtaW5lZCB3aGV0aGVyIHRoZXJlIHNoYWxsIGJlIEFKQVggbmF2LgoJCWN1cnJlbnRPcHRpb25zLmhpc3RvcnkgPSBjdXJyZW50T3B0aW9ucy5oaXN0b3J5ICYmICQubW9iaWxlLmFqYXhFbmFibGVkICYmICQubW9iaWxlLmhhc2hMaXN0ZW5pbmdFbmFibGVkOwoKCQkvLyBEZWZpbmUgaW5zdGFuY2UgdmFyaWFibGVzCgkJJC5leHRlbmQoIHRoaXMsIHsKCQkJX3Njcm9sbFRvcDogMCwKCQkJX3BhZ2U6IHRoZUVsZW1lbnQuY2xvc2VzdCggIi51aS1wYWdlIiApLAoJCQlfdWk6IG51bGwsCgkJCV9mYWxsYmFja1RyYW5zaXRpb246ICIiLAoJCQlfY3VycmVudFRyYW5zaXRpb246IGZhbHNlLAoJCQlfcHJlcmVxdWlzaXRlczogbnVsbCwKCQkJX2lzT3BlbjogZmFsc2UsCgkJCV90b2xlcmFuY2U6IG51bGwsCgkJCV9yZXNpemVEYXRhOiBudWxsLAoJCQlfaWdub3JlUmVzaXplVG86IDAsCgkJCV9vcmllbnRhdGlvbmNoYW5nZUluUHJvZ3Jlc3M6IGZhbHNlCgkJfSk7CgoJCWlmICggdGhpcy5fcGFnZS5sZW5ndGggPT09IDAgKSB7CgkJCXRoaXMuX3BhZ2UgPSAkKCAiYm9keSIgKTsKCQl9CgoJCWlmICggY3VycmVudE9wdGlvbnMuZW5oYW5jZWQgKSB7CgkJCXRoaXMuX3VpID0gewoJCQkJY29udGFpbmVyOiB0aGVFbGVtZW50LnBhcmVudCgpLAoJCQkJc2NyZWVuOiB0aGVFbGVtZW50LnBhcmVudCgpLnByZXYoKSwKCQkJCXBsYWNlaG9sZGVyOiAkKCB0aGlzLmRvY3VtZW50WyAwIF0uZ2V0RWxlbWVudEJ5SWQoIG15SWQgKyAiLXBsYWNlaG9sZGVyIiApICkKCQkJfTsKCQl9IGVsc2UgewoJCQl0aGlzLl91aSA9IHRoaXMuX2VuaGFuY2UoIHRoZUVsZW1lbnQsIG15SWQgKTsKCQkJdGhpcy5fYXBwbHlUcmFuc2l0aW9uKCBjdXJyZW50T3B0aW9ucy50cmFuc2l0aW9uICk7CgkJfQoJCXRoaXMKCQkJLl9zZXRUb2xlcmFuY2UoIGN1cnJlbnRPcHRpb25zLnRvbGVyYW5jZSApCgkJCS5fdWkuZm9jdXNFbGVtZW50ID0gdGhpcy5fdWkuY29udGFpbmVyOwoKCQkvLyBFdmVudCBoYW5kbGVycwoJCXRoaXMuX29uKCB0aGlzLl91aS5zY3JlZW4sIHsgInZjbGljayI6ICJfZWF0RXZlbnRBbmRDbG9zZSIgfSApOwoJCXRoaXMuX29uKCB0aGlzLndpbmRvdywgewoJCQlvcmllbnRhdGlvbmNoYW5nZTogJC5wcm94eSggdGhpcywgIl9oYW5kbGVXaW5kb3dPcmllbnRhdGlvbmNoYW5nZSIgKSwKCQkJcmVzaXplOiAkLnByb3h5KCB0aGlzLCAiX2hhbmRsZVdpbmRvd1Jlc2l6ZSIgKSwKCQkJa2V5dXA6ICQucHJveHkoIHRoaXMsICJfaGFuZGxlV2luZG93S2V5VXAiICkKCQl9KTsKCQl0aGlzLl9vbiggdGhpcy5kb2N1bWVudCwgeyAiZm9jdXNpbiI6ICJfaGFuZGxlRG9jdW1lbnRGb2N1c0luIiB9ICk7Cgl9LAoKCV9lbmhhbmNlOiBmdW5jdGlvbiggdGhlRWxlbWVudCwgbXlJZCApIHsKCQl2YXIgY3VycmVudE9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgkJCXdyYXBwZXJDbGFzcyA9IGN1cnJlbnRPcHRpb25zLndyYXBwZXJDbGFzcywKCQkJdWkgPSB7CgkJCQlzY3JlZW46ICQoICI8ZGl2IGNsYXNzPSd1aS1zY3JlZW4taGlkZGVuIHVpLXBvcHVwLXNjcmVlbiAiICsKCQkJCXRoaXMuX3RoZW1lQ2xhc3NGcm9tT3B0aW9uKCAidWktb3ZlcmxheS0iLCBjdXJyZW50T3B0aW9ucy5vdmVybGF5VGhlbWUgKSArICInPjwvZGl2PiIgKSwKCQkJCXBsYWNlaG9sZGVyOiAkKCAiPGRpdiBzdHlsZT0nZGlzcGxheTogbm9uZTsnPjwhLS0gcGxhY2Vob2xkZXIgLS0+PC9kaXY+IiApLAoJCQkJY29udGFpbmVyOiAkKCAiPGRpdiBjbGFzcz0ndWktcG9wdXAtY29udGFpbmVyIHVpLXBvcHVwLWhpZGRlbiB1aS1wb3B1cC10cnVuY2F0ZSIgKwoJCQkJCSggd3JhcHBlckNsYXNzID8gKCAiICIgKyB3cmFwcGVyQ2xhc3MgKSA6ICIiICkgKyAiJz48L2Rpdj4iICkKCQkJfSwKCQkJZnJhZ21lbnQgPSB0aGlzLmRvY3VtZW50WyAwIF0uY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwoKCQlmcmFnbWVudC5hcHBlbmRDaGlsZCggdWkuc2NyZWVuWyAwIF0gKTsKCQlmcmFnbWVudC5hcHBlbmRDaGlsZCggdWkuY29udGFpbmVyWyAwIF0gKTsKCgkJaWYgKCBteUlkICkgewoJCQl1aS5zY3JlZW4uYXR0ciggImlkIiwgbXlJZCArICItc2NyZWVuIiApOwoJCQl1aS5jb250YWluZXIuYXR0ciggImlkIiwgbXlJZCArICItcG9wdXAiICk7CgkJCXVpLnBsYWNlaG9sZGVyCgkJCQkuYXR0ciggImlkIiwgbXlJZCArICItcGxhY2Vob2xkZXIiICkKCQkJCS5odG1sKCAiPCEtLSBwbGFjZWhvbGRlciBmb3IgIiArIG15SWQgKyAiIC0tPiIgKTsKCQl9CgoJCS8vIEFwcGx5IHRoZSBwcm90bwoJCXRoaXMuX3BhZ2VbIDAgXS5hcHBlbmRDaGlsZCggZnJhZ21lbnQgKTsKCQkvLyBMZWF2ZSBhIHBsYWNlaG9sZGVyIHdoZXJlIHRoZSBlbGVtZW50IHVzZWQgdG8gYmUKCQl1aS5wbGFjZWhvbGRlci5pbnNlcnRBZnRlciggdGhlRWxlbWVudCApOwoJCXRoZUVsZW1lbnQKCQkJLmRldGFjaCgpCgkJCS5hZGRDbGFzcyggInVpLXBvcHVwICIgKwoJCQkJdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oICJ1aS1ib2R5LSIsIGN1cnJlbnRPcHRpb25zLnRoZW1lICkgKyAiICIgKwoJCQkJKCBjdXJyZW50T3B0aW9ucy5zaGFkb3cgPyAidWktb3ZlcmxheS1zaGFkb3cgIiA6ICIiICkgKwoJCQkJKCBjdXJyZW50T3B0aW9ucy5jb3JuZXJzID8gInVpLWNvcm5lci1hbGwgIiA6ICIiICkgKQoJCQkuYXBwZW5kVG8oIHVpLmNvbnRhaW5lciApOwoKCQlyZXR1cm4gdWk7Cgl9LAoKCV9lYXRFdmVudEFuZENsb3NlOiBmdW5jdGlvbiggdGhlRXZlbnQgKSB7CgkJdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTsKCQl0aGVFdmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsKCQlpZiAoIHRoaXMub3B0aW9ucy5kaXNtaXNzaWJsZSApIHsKCQkJdGhpcy5jbG9zZSgpOwoJCX0KCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCS8vIE1ha2Ugc3VyZSB0aGUgc2NyZWVuIGNvdmVycyB0aGUgZW50aXJlIGRvY3VtZW50IC0gQ1NTIGlzIHNvbWV0aW1lcyBub3QKCS8vIGVub3VnaCB0byBhY2NvbXBsaXNoIHRoaXMuCglfcmVzaXplU2NyZWVuOiBmdW5jdGlvbigpIHsKCQl2YXIgc2NyZWVuID0gdGhpcy5fdWkuc2NyZWVuLAoJCQlwb3B1cEhlaWdodCA9IHRoaXMuX3VpLmNvbnRhaW5lci5vdXRlckhlaWdodCggdHJ1ZSApLAoJCQlzY3JlZW5IZWlnaHQgPSBzY3JlZW4ucmVtb3ZlQXR0ciggInN0eWxlIiApLmhlaWdodCgpLAoKCQkJLy8gU3VidHJhY3RpbmcgMSBoZXJlIGlzIG5lY2Vzc2FyeSBmb3IgYW4gb2JzY3VyZSBBbmRyZG9pZCA0LjAgYnVnIHdoZXJlCgkJCS8vIHRoZSBicm93c2VyIGhhbmdzIGlmIHRoZSBzY3JlZW4gY292ZXJzIHRoZSBlbnRpcmUgZG9jdW1lbnQgOi8KCQkJZG9jdW1lbnRIZWlnaHQgPSB0aGlzLmRvY3VtZW50LmhlaWdodCgpIC0gMTsKCgkJaWYgKCBzY3JlZW5IZWlnaHQgPCBkb2N1bWVudEhlaWdodCApIHsKCQkJc2NyZWVuLmhlaWdodCggZG9jdW1lbnRIZWlnaHQgKTsKCQl9IGVsc2UgaWYgKCBwb3B1cEhlaWdodCA+IHNjcmVlbkhlaWdodCApIHsKCQkJc2NyZWVuLmhlaWdodCggcG9wdXBIZWlnaHQgKTsKCQl9Cgl9LAoKCV9oYW5kbGVXaW5kb3dLZXlVcDogZnVuY3Rpb24oIHRoZUV2ZW50ICkgewoJCWlmICggdGhpcy5faXNPcGVuICYmIHRoZUV2ZW50LmtleUNvZGUgPT09ICQubW9iaWxlLmtleUNvZGUuRVNDQVBFICkgewoJCQlyZXR1cm4gdGhpcy5fZWF0RXZlbnRBbmRDbG9zZSggdGhlRXZlbnQgKTsKCQl9Cgl9LAoKCV9leHBlY3RSZXNpemVFdmVudDogZnVuY3Rpb24oKSB7CgkJdmFyIHdpbmRvd0Nvb3JkaW5hdGVzID0gZ2V0V2luZG93Q29vcmRpbmF0ZXMoIHRoaXMud2luZG93ICk7CgoJCWlmICggdGhpcy5fcmVzaXplRGF0YSApIHsKCQkJaWYgKCB3aW5kb3dDb29yZGluYXRlcy54ID09PSB0aGlzLl9yZXNpemVEYXRhLndpbmRvd0Nvb3JkaW5hdGVzLnggJiYKCQkJCXdpbmRvd0Nvb3JkaW5hdGVzLnkgPT09IHRoaXMuX3Jlc2l6ZURhdGEud2luZG93Q29vcmRpbmF0ZXMueSAmJgoJCQkJd2luZG93Q29vcmRpbmF0ZXMuY3ggPT09IHRoaXMuX3Jlc2l6ZURhdGEud2luZG93Q29vcmRpbmF0ZXMuY3ggJiYKCQkJCXdpbmRvd0Nvb3JkaW5hdGVzLmN5ID09PSB0aGlzLl9yZXNpemVEYXRhLndpbmRvd0Nvb3JkaW5hdGVzLmN5ICkgewoJCQkJLy8gdGltZW91dCBub3QgcmVmcmVzaGVkCgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0gZWxzZSB7CgkJCQkvLyBjbGVhciBleGlzdGluZyB0aW1lb3V0IC0gaXQgd2lsbCBiZSByZWZyZXNoZWQgYmVsb3cKCQkJCWNsZWFyVGltZW91dCggdGhpcy5fcmVzaXplRGF0YS50aW1lb3V0SWQgKTsKCQkJfQoJCX0KCgkJdGhpcy5fcmVzaXplRGF0YSA9IHsKCQkJdGltZW91dElkOiB0aGlzLl9kZWxheSggIl9yZXNpemVUaW1lb3V0IiwgMjAwICksCgkJCXdpbmRvd0Nvb3JkaW5hdGVzOiB3aW5kb3dDb29yZGluYXRlcwoJCX07CgoJCXJldHVybiB0cnVlOwoJfSwKCglfcmVzaXplVGltZW91dDogZnVuY3Rpb24oKSB7CgkJaWYgKCB0aGlzLl9pc09wZW4gKSB7CgkJCWlmICggIXRoaXMuX2V4cGVjdFJlc2l6ZUV2ZW50KCkgKSB7CgkJCQlpZiAoIHRoaXMuX3VpLmNvbnRhaW5lci5oYXNDbGFzcyggInVpLXBvcHVwLWhpZGRlbiIgKSApIHsKCQkJCQkvLyBlZmZlY3RpdmVseSByYXBpZC1vcGVuIHRoZSBwb3B1cCB3aGlsZSBsZWF2aW5nIHRoZSBzY3JlZW4gaW50YWN0CgkJCQkJdGhpcy5fdWkuY29udGFpbmVyLnJlbW92ZUNsYXNzKCAidWktcG9wdXAtaGlkZGVuIHVpLXBvcHVwLXRydW5jYXRlIiApOwoJCQkJCXRoaXMucmVwb3NpdGlvbiggeyBwb3NpdGlvblRvOiAid2luZG93IiB9ICk7CgkJCQkJdGhpcy5faWdub3JlUmVzaXplRXZlbnRzKCk7CgkJCQl9CgoJCQkJdGhpcy5fcmVzaXplU2NyZWVuKCk7CgkJCQl0aGlzLl9yZXNpemVEYXRhID0gbnVsbDsKCQkJCXRoaXMuX29yaWVudGF0aW9uY2hhbmdlSW5Qcm9ncmVzcyA9IGZhbHNlOwoJCQl9CgkJfSBlbHNlIHsKCQkJdGhpcy5fcmVzaXplRGF0YSA9IG51bGw7CgkJCXRoaXMuX29yaWVudGF0aW9uY2hhbmdlSW5Qcm9ncmVzcyA9IGZhbHNlOwoJCX0KCX0sCgoJX3N0b3BJZ25vcmluZ1Jlc2l6ZUV2ZW50czogZnVuY3Rpb24oKSB7CgkJdGhpcy5faWdub3JlUmVzaXplVG8gPSAwOwoJfSwKCglfaWdub3JlUmVzaXplRXZlbnRzOiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMuX2lnbm9yZVJlc2l6ZVRvICkgewoJCQljbGVhclRpbWVvdXQoIHRoaXMuX2lnbm9yZVJlc2l6ZVRvICk7CgkJfQoJCXRoaXMuX2lnbm9yZVJlc2l6ZVRvID0gdGhpcy5fZGVsYXkoICJfc3RvcElnbm9yaW5nUmVzaXplRXZlbnRzIiwgMTAwMCApOwoJfSwKCglfaGFuZGxlV2luZG93UmVzaXplOiBmdW5jdGlvbigvKiB0aGVFdmVudCAqLykgewoJCWlmICggdGhpcy5faXNPcGVuICYmIHRoaXMuX2lnbm9yZVJlc2l6ZVRvID09PSAwICkgewoJCQlpZiAoICggdGhpcy5fZXhwZWN0UmVzaXplRXZlbnQoKSB8fCB0aGlzLl9vcmllbnRhdGlvbmNoYW5nZUluUHJvZ3Jlc3MgKSAmJgoJCQkJIXRoaXMuX3VpLmNvbnRhaW5lci5oYXNDbGFzcyggInVpLXBvcHVwLWhpZGRlbiIgKSApIHsKCQkJCS8vIGVmZmVjdGl2ZWx5IHJhcGlkLWNsb3NlIHRoZSBwb3B1cCB3aGlsZSBsZWF2aW5nIHRoZSBzY3JlZW4gaW50YWN0CgkJCQl0aGlzLl91aS5jb250YWluZXIKCQkJCQkuYWRkQ2xhc3MoICJ1aS1wb3B1cC1oaWRkZW4gdWktcG9wdXAtdHJ1bmNhdGUiICkKCQkJCQkucmVtb3ZlQXR0ciggInN0eWxlIiApOwoJCQl9CgkJfQoJfSwKCglfaGFuZGxlV2luZG93T3JpZW50YXRpb25jaGFuZ2U6IGZ1bmN0aW9uKC8qIHRoZUV2ZW50ICovKSB7CgkJaWYgKCAhdGhpcy5fb3JpZW50YXRpb25jaGFuZ2VJblByb2dyZXNzICYmIHRoaXMuX2lzT3BlbiAmJiB0aGlzLl9pZ25vcmVSZXNpemVUbyA9PT0gMCApIHsKCQkJdGhpcy5fZXhwZWN0UmVzaXplRXZlbnQoKTsKCQkJdGhpcy5fb3JpZW50YXRpb25jaGFuZ2VJblByb2dyZXNzID0gdHJ1ZTsKCQl9Cgl9LAoKCS8vIFdoZW4gdGhlIHBvcHVwIGlzIG9wZW4sIGF0dGVtcHRpbmcgdG8gZm9jdXMgb24gYW4gZWxlbWVudCB0aGF0IGlzIG5vdCBhCgkvLyBjaGlsZCBvZiB0aGUgcG9wdXAgd2lsbCByZWRpcmVjdCBmb2N1cyB0byB0aGUgcG9wdXAKCV9oYW5kbGVEb2N1bWVudEZvY3VzSW46IGZ1bmN0aW9uKCB0aGVFdmVudCApIHsKCQl2YXIgdGFyZ2V0LAoJCQl0YXJnZXRFbGVtZW50ID0gdGhlRXZlbnQudGFyZ2V0LAoJCQl1aSA9IHRoaXMuX3VpOwoKCQlpZiAoICF0aGlzLl9pc09wZW4gKSB7CgkJCXJldHVybjsKCQl9CgoJCWlmICggdGFyZ2V0RWxlbWVudCAhPT0gdWkuY29udGFpbmVyWyAwIF0gKSB7CgkJCXRhcmdldCA9ICQoIHRhcmdldEVsZW1lbnQgKTsKCQkJaWYgKCAwID09PSB0YXJnZXQucGFyZW50cygpLmZpbHRlciggdWkuY29udGFpbmVyWyAwIF0gKS5sZW5ndGggKSB7CgkJCQkkKCB0aGlzLmRvY3VtZW50WyAwIF0uYWN0aXZlRWxlbWVudCApLm9uZSggImZvY3VzIiwgZnVuY3Rpb24oLyogdGhlRXZlbnQgKi8pIHsKCQkJCQl0YXJnZXQuYmx1cigpOwoJCQkJfSk7CgkJCQl1aS5mb2N1c0VsZW1lbnQuZm9jdXMoKTsKCQkJCXRoZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQl0aGVFdmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfSBlbHNlIGlmICggdWkuZm9jdXNFbGVtZW50WyAwIF0gPT09IHVpLmNvbnRhaW5lclsgMCBdICkgewoJCQkJdWkuZm9jdXNFbGVtZW50ID0gdGFyZ2V0OwoJCQl9CgkJfQoKCQl0aGlzLl9pZ25vcmVSZXNpemVFdmVudHMoKTsKCX0sCgoJX3RoZW1lQ2xhc3NGcm9tT3B0aW9uOiBmdW5jdGlvbiggcHJlZml4LCB2YWx1ZSApIHsKCQlyZXR1cm4gKCB2YWx1ZSA/ICggdmFsdWUgPT09ICJub25lIiA/ICIiIDogKCBwcmVmaXggKyB2YWx1ZSApICkgOiAoIHByZWZpeCArICJpbmhlcml0IiApICk7Cgl9LAoKCV9hcHBseVRyYW5zaXRpb246IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQlpZiAoIHZhbHVlICkgewoJCQl0aGlzLl91aS5jb250YWluZXIucmVtb3ZlQ2xhc3MoIHRoaXMuX2ZhbGxiYWNrVHJhbnNpdGlvbiApOwoJCQlpZiAoIHZhbHVlICE9PSAibm9uZSIgKSB7CgkJCQl0aGlzLl9mYWxsYmFja1RyYW5zaXRpb24gPSAkLm1vYmlsZS5fbWF5YmVEZWdyYWRlVHJhbnNpdGlvbiggdmFsdWUgKTsKCQkJCWlmICggdGhpcy5fZmFsbGJhY2tUcmFuc2l0aW9uID09PSAibm9uZSIgKSB7CgkJCQkJdGhpcy5fZmFsbGJhY2tUcmFuc2l0aW9uID0gIiI7CgkJCQl9CgkJCQl0aGlzLl91aS5jb250YWluZXIuYWRkQ2xhc3MoIHRoaXMuX2ZhbGxiYWNrVHJhbnNpdGlvbiApOwoJCQl9CgkJfQoKCQlyZXR1cm4gdGhpczsKCX0sCgoJX3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBuZXdPcHRpb25zICkgewoJCXZhciBjdXJyZW50T3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJdGhlRWxlbWVudCA9IHRoaXMuZWxlbWVudCwKCQkJc2NyZWVuID0gdGhpcy5fdWkuc2NyZWVuOwoKCQlpZiAoIG5ld09wdGlvbnMud3JhcHBlckNsYXNzICE9PSB1bmRlZmluZWQgKSB7CgkJCXRoaXMuX3VpLmNvbnRhaW5lcgoJCQkJLnJlbW92ZUNsYXNzKCBjdXJyZW50T3B0aW9ucy53cmFwcGVyQ2xhc3MgKQoJCQkJLmFkZENsYXNzKCBuZXdPcHRpb25zLndyYXBwZXJDbGFzcyApOwoJCX0KCgkJaWYgKCBuZXdPcHRpb25zLnRoZW1lICE9PSB1bmRlZmluZWQgKSB7CgkJCXRoZUVsZW1lbnQKCQkJCS5yZW1vdmVDbGFzcyggdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oICJ1aS1ib2R5LSIsIGN1cnJlbnRPcHRpb25zLnRoZW1lICkgKQoJCQkJLmFkZENsYXNzKCB0aGlzLl90aGVtZUNsYXNzRnJvbU9wdGlvbiggInVpLWJvZHktIiwgbmV3T3B0aW9ucy50aGVtZSApICk7CgkJfQoKCQlpZiAoIG5ld09wdGlvbnMub3ZlcmxheVRoZW1lICE9PSB1bmRlZmluZWQgKSB7CgkJCXNjcmVlbgoJCQkJLnJlbW92ZUNsYXNzKCB0aGlzLl90aGVtZUNsYXNzRnJvbU9wdGlvbiggInVpLW92ZXJsYXktIiwgY3VycmVudE9wdGlvbnMub3ZlcmxheVRoZW1lICkgKQoJCQkJLmFkZENsYXNzKCB0aGlzLl90aGVtZUNsYXNzRnJvbU9wdGlvbiggInVpLW92ZXJsYXktIiwgbmV3T3B0aW9ucy5vdmVybGF5VGhlbWUgKSApOwoKCQkJaWYgKCB0aGlzLl9pc09wZW4gKSB7CgkJCQlzY3JlZW4uYWRkQ2xhc3MoICJpbiIgKTsKCQkJfQoJCX0KCgkJaWYgKCBuZXdPcHRpb25zLnNoYWRvdyAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGVFbGVtZW50LnRvZ2dsZUNsYXNzKCAidWktb3ZlcmxheS1zaGFkb3ciLCBuZXdPcHRpb25zLnNoYWRvdyApOwoJCX0KCgkJaWYgKCBuZXdPcHRpb25zLmNvcm5lcnMgIT09IHVuZGVmaW5lZCApIHsKCQkJdGhlRWxlbWVudC50b2dnbGVDbGFzcyggInVpLWNvcm5lci1hbGwiLCBuZXdPcHRpb25zLmNvcm5lcnMgKTsKCQl9CgoJCWlmICggbmV3T3B0aW9ucy50cmFuc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7CgkJCWlmICggIXRoaXMuX2N1cnJlbnRUcmFuc2l0aW9uICkgewoJCQkJdGhpcy5fYXBwbHlUcmFuc2l0aW9uKCBuZXdPcHRpb25zLnRyYW5zaXRpb24gKTsKCQkJfQoJCX0KCgkJaWYgKCBuZXdPcHRpb25zLnRvbGVyYW5jZSAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLl9zZXRUb2xlcmFuY2UoIG5ld09wdGlvbnMudG9sZXJhbmNlICk7CgkJfQoKCQlpZiAoIG5ld09wdGlvbnMuZGlzYWJsZWQgIT09IHVuZGVmaW5lZCApIHsKCQkJaWYgKCBuZXdPcHRpb25zLmRpc2FibGVkICkgewoJCQkJdGhpcy5jbG9zZSgpOwoJCQl9CgkJfQoKCQlyZXR1cm4gdGhpcy5fc3VwZXIoIG5ld09wdGlvbnMgKTsKCX0sCgoJX3NldFRvbGVyYW5jZTogZnVuY3Rpb24oIHZhbHVlICkgewoJCXZhciB0b2wgPSB7IHQ6IDMwLCByOiAxNSwgYjogMzAsIGw6IDE1IH0sCgkJCWFyOwoKCQlpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgkJCWFyID0gU3RyaW5nKCB2YWx1ZSApLnNwbGl0KCAiLCIgKTsKCgkJCSQuZWFjaCggYXIsIGZ1bmN0aW9uKCBpZHgsIHZhbCApIHsgYXJbIGlkeCBdID0gcGFyc2VJbnQoIHZhbCwgMTAgKTsgfSApOwoKCQkJc3dpdGNoKCBhci5sZW5ndGggKSB7CgkJCQkvLyBBbGwgdmFsdWVzIGFyZSB0byBiZSB0aGUgc2FtZQoJCQkJY2FzZSAxOgoJCQkJCWlmICggIWlzTmFOKCBhclsgMCBdICkgKSB7CgkJCQkJCXRvbC50ID0gdG9sLnIgPSB0b2wuYiA9IHRvbC5sID0gYXJbIDAgXTsKCQkJCQl9CgkJCQkJYnJlYWs7CgoJCQkJLy8gVGhlIGZpcnN0IHZhbHVlIGRlbm90ZXMgdG9wL2JvdHRvbSB0b2xlcmFuY2UsIGFuZCB0aGUgc2Vjb25kIHZhbHVlIGRlbm90ZXMgbGVmdC9yaWdodCB0b2xlcmFuY2UKCQkJCWNhc2UgMjoKCQkJCQlpZiAoICFpc05hTiggYXJbIDAgXSApICkgewoJCQkJCQl0b2wudCA9IHRvbC5iID0gYXJbIDAgXTsKCQkJCQl9CgkJCQkJaWYgKCAhaXNOYU4oIGFyWyAxIF0gKSApIHsKCQkJCQkJdG9sLmwgPSB0b2wuciA9IGFyWyAxIF07CgkJCQkJfQoJCQkJCWJyZWFrOwoKCQkJCS8vIFRoZSBhcnJheSBjb250YWlucyB2YWx1ZXMgaW4gdGhlIG9yZGVyIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdAoJCQkJY2FzZSA0OgoJCQkJCWlmICggIWlzTmFOKCBhclsgMCBdICkgKSB7CgkJCQkJCXRvbC50ID0gYXJbIDAgXTsKCQkJCQl9CgkJCQkJaWYgKCAhaXNOYU4oIGFyWyAxIF0gKSApIHsKCQkJCQkJdG9sLnIgPSBhclsgMSBdOwoJCQkJCX0KCQkJCQlpZiAoICFpc05hTiggYXJbIDIgXSApICkgewoJCQkJCQl0b2wuYiA9IGFyWyAyIF07CgkJCQkJfQoJCQkJCWlmICggIWlzTmFOKCBhclsgMyBdICkgKSB7CgkJCQkJCXRvbC5sID0gYXJbIDMgXTsKCQkJCQl9CgkJCQkJYnJlYWs7CgoJCQkJZGVmYXVsdDoKCQkJCQlicmVhazsKCQkJfQoJCX0KCgkJdGhpcy5fdG9sZXJhbmNlID0gdG9sOwoJCXJldHVybiB0aGlzOwoJfSwKCglfY2xhbXBQb3B1cFdpZHRoOiBmdW5jdGlvbiggaW5mb09ubHkgKSB7CgkJdmFyIG1lbnVTaXplLAoJCQl3aW5kb3dDb29yZGluYXRlcyA9IGdldFdpbmRvd0Nvb3JkaW5hdGVzKCB0aGlzLndpbmRvdyApLAoJCQkvLyByZWN0YW5nbGUgd2l0aGluIHdoaWNoIHRoZSBwb3B1cCBtdXN0IGZpdAoJCQlyZWN0YW5nbGUgPSB7CgkJCQl4OiB0aGlzLl90b2xlcmFuY2UubCwKCQkJCXk6IHdpbmRvd0Nvb3JkaW5hdGVzLnkgKyB0aGlzLl90b2xlcmFuY2UudCwKCQkJCWN4OiB3aW5kb3dDb29yZGluYXRlcy5jeCAtIHRoaXMuX3RvbGVyYW5jZS5sIC0gdGhpcy5fdG9sZXJhbmNlLnIsCgkJCQljeTogd2luZG93Q29vcmRpbmF0ZXMuY3kgLSB0aGlzLl90b2xlcmFuY2UudCAtIHRoaXMuX3RvbGVyYW5jZS5iCgkJCX07CgoJCWlmICggIWluZm9Pbmx5ICkgewoJCQkvLyBDbGFtcCB0aGUgd2lkdGggb2YgdGhlIG1lbnUgYmVmb3JlIGdyYWJiaW5nIGl0cyBzaXplCgkJCXRoaXMuX3VpLmNvbnRhaW5lci5jc3MoICJtYXgtd2lkdGgiLCByZWN0YW5nbGUuY3ggKTsKCQl9CgoJCW1lbnVTaXplID0gewoJCQljeDogdGhpcy5fdWkuY29udGFpbmVyLm91dGVyV2lkdGgoIHRydWUgKSwKCQkJY3k6IHRoaXMuX3VpLmNvbnRhaW5lci5vdXRlckhlaWdodCggdHJ1ZSApCgkJfTsKCgkJcmV0dXJuIHsgcmM6IHJlY3RhbmdsZSwgbWVudVNpemU6IG1lbnVTaXplIH07Cgl9LAoKCV9jYWxjdWxhdGVGaW5hbExvY2F0aW9uOiBmdW5jdGlvbiggZGVzaXJlZCwgY2xhbXBJbmZvICkgewoJCXZhciByZXR1cm5WYWx1ZSwKCQkJcmVjdGFuZ2xlID0gY2xhbXBJbmZvLnJjLAoJCQltZW51U2l6ZSA9IGNsYW1wSW5mby5tZW51U2l6ZTsKCgkJLy8gQ2VudGVyIHRoZSBtZW51IG92ZXIgdGhlIGRlc2lyZWQgY29vcmRpbmF0ZXMsIHdoaWxlIG5vdCBnb2luZyBvdXRzaWRlCgkJLy8gdGhlIHdpbmRvdyB0b2xlcmFuY2VzLiBUaGlzIHdpbGwgY2VudGVyIHdydC4gdGhlIHdpbmRvdyBpZiB0aGUgcG9wdXAgaXMKCQkvLyB0b28gbGFyZ2UuCgkJcmV0dXJuVmFsdWUgPSB7CgkJCWxlZnQ6IGZpdFNlZ21lbnRJbnNpZGVTZWdtZW50KCByZWN0YW5nbGUuY3gsIG1lbnVTaXplLmN4LCByZWN0YW5nbGUueCwgZGVzaXJlZC54ICksCgkJCXRvcDogZml0U2VnbWVudEluc2lkZVNlZ21lbnQoIHJlY3RhbmdsZS5jeSwgbWVudVNpemUuY3ksIHJlY3RhbmdsZS55LCBkZXNpcmVkLnkgKQoJCX07CgoJCS8vIE1ha2Ugc3VyZSB0aGUgdG9wIG9mIHRoZSBtZW51IGlzIHZpc2libGUKCQlyZXR1cm5WYWx1ZS50b3AgPSBNYXRoLm1heCggMCwgcmV0dXJuVmFsdWUudG9wICk7CgoJCS8vIElmIHRoZSBoZWlnaHQgb2YgdGhlIG1lbnUgaXMgc21hbGxlciB0aGFuIHRoZSBoZWlnaHQgb2YgdGhlIGRvY3VtZW50CgkJLy8gYWxpZ24gdGhlIGJvdHRvbSB3aXRoIHRoZSBib3R0b20gb2YgdGhlIGRvY3VtZW50CgoJCXJldHVyblZhbHVlLnRvcCAtPSBNYXRoLm1pbiggcmV0dXJuVmFsdWUudG9wLAoJCQlNYXRoLm1heCggMCwgcmV0dXJuVmFsdWUudG9wICsgbWVudVNpemUuY3kgLSB0aGlzLmRvY3VtZW50LmhlaWdodCgpICkgKTsKCgkJcmV0dXJuIHJldHVyblZhbHVlOwoJfSwKCgkvLyBUcnkgYW5kIGNlbnRlciB0aGUgb3ZlcmxheSBvdmVyIHRoZSBnaXZlbiBjb29yZGluYXRlcwoJX3BsYWNlbWVudENvb3JkczogZnVuY3Rpb24oIGRlc2lyZWQgKSB7CgkJcmV0dXJuIHRoaXMuX2NhbGN1bGF0ZUZpbmFsTG9jYXRpb24oIGRlc2lyZWQsIHRoaXMuX2NsYW1wUG9wdXBXaWR0aCgpICk7Cgl9LAoKCV9jcmVhdGVQcmVyZXF1aXNpdGVzOiBmdW5jdGlvbiggc2NyZWVuUHJlcmVxdWlzaXRlLCBjb250YWluZXJQcmVyZXF1aXNpdGUsIHdoZW5Eb25lICkgewoJCXZhciBwcmVyZXF1aXNpdGVzLAoJCQlzZWxmID0gdGhpczsKCgkJLy8gSXQgaXMgaW1wb3J0YW50IHRvIG1haW50YWluIGJvdGggdGhlIGxvY2FsIHZhcmlhYmxlIHByZXJlcXVpc2l0ZXMgYW5kCgkJLy8gc2VsZi5fcHJlcmVxdWlzaXRlcy4gVGhlIGxvY2FsIHZhcmlhYmxlIHJlbWFpbnMgaW4gdGhlIGNsb3N1cmUgb2YgdGhlCgkJLy8gZnVuY3Rpb25zIHdoaWNoIGNhbGwgdGhlIGNhbGxiYWNrcyBwYXNzZWQgaW4uIFRoZSBjb21wYXJpc29uIGJldHdlZW4gdGhlCgkJLy8gbG9jYWwgdmFyaWFibGUgYW5kIHNlbGYuX3ByZXJlcXVpc2l0ZXMgaXMgbmVjZXNzYXJ5LCBiZWNhdXNlIG9uY2UgYQoJCS8vIGZ1bmN0aW9uIGhhcyBiZWVuIHBhc3NlZCB0byAuYW5pbWF0aW9uQ29tcGxldGUoKSBpdCB3aWxsIGJlIGNhbGxlZCBuZXh0CgkJLy8gdGltZSBhbiBhbmltYXRpb24gY29tcGxldGVzLCBldmVuIGlmIHRoYXQncyBub3QgdGhlIGFuaW1hdGlvbiB3aG9zZSBlbmQKCQkvLyB0aGUgZnVuY3Rpb24gd2FzIHN1cHBvc2VkIHRvIGNhdGNoIChmb3IgZXhhbXBsZSwgaWYgYW4gYWJvcnQgaGFwcGVucwoJCS8vIGR1cmluZyB0aGUgb3BlbmluZyBhbmltYXRpb24sIHRoZSAuYW5pbWF0aW9uQ29tcGxldGUgaGFuZGxlciBpcyBub3QKCQkvLyBjYWxsZWQgZm9yIHRoYXQgYW5pbWF0aW9uIGFueW1vcmUsIGJ1dCB0aGUgaGFuZGxlciByZW1haW5zIGF0dGFjaGVkLCBzbwoJCS8vIGl0IGlzIGNhbGxlZCB0aGUgbmV4dCB0aW1lIHRoZSBwb3B1cCBpcyBvcGVuZWQgLSBtYWtpbmcgaXQgc3RhbGUuCgkJLy8gQ29tcGFyaW5nIHRoZSBsb2NhbCB2YXJpYWJsZSBwcmVyZXF1aXNpdGVzIHRvIHRoZSB3aWRnZXQtbGV2ZWwgdmFyaWFibGUKCQkvLyBzZWxmLl9wcmVyZXF1aXNpdGVzIGVuc3VyZXMgdGhhdCBjYWxsYmFja3MgdHJpZ2dlcmVkIGJ5IGEgc3RhbGUKCQkvLyAuYW5pbWF0aW9uQ29tcGxldGUgd2lsbCBiZSBpZ25vcmVkLgoKCQlwcmVyZXF1aXNpdGVzID0gewoJCQlzY3JlZW46ICQuRGVmZXJyZWQoKSwKCQkJY29udGFpbmVyOiAkLkRlZmVycmVkKCkKCQl9OwoKCQlwcmVyZXF1aXNpdGVzLnNjcmVlbi50aGVuKCBmdW5jdGlvbigpIHsKCQkJaWYgKCBwcmVyZXF1aXNpdGVzID09PSBzZWxmLl9wcmVyZXF1aXNpdGVzICkgewoJCQkJc2NyZWVuUHJlcmVxdWlzaXRlKCk7CgkJCX0KCQl9KTsKCgkJcHJlcmVxdWlzaXRlcy5jb250YWluZXIudGhlbiggZnVuY3Rpb24oKSB7CgkJCWlmICggcHJlcmVxdWlzaXRlcyA9PT0gc2VsZi5fcHJlcmVxdWlzaXRlcyApIHsKCQkJCWNvbnRhaW5lclByZXJlcXVpc2l0ZSgpOwoJCQl9CgkJfSk7CgoJCSQud2hlbiggcHJlcmVxdWlzaXRlcy5zY3JlZW4sIHByZXJlcXVpc2l0ZXMuY29udGFpbmVyICkuZG9uZSggZnVuY3Rpb24oKSB7CgkJCWlmICggcHJlcmVxdWlzaXRlcyA9PT0gc2VsZi5fcHJlcmVxdWlzaXRlcyApIHsKCQkJCXNlbGYuX3ByZXJlcXVpc2l0ZXMgPSBudWxsOwoJCQkJd2hlbkRvbmUoKTsKCQkJfQoJCX0pOwoKCQlzZWxmLl9wcmVyZXF1aXNpdGVzID0gcHJlcmVxdWlzaXRlczsKCX0sCgoJX2FuaW1hdGU6IGZ1bmN0aW9uKCBhcmdzICkgewoJCS8vIE5PVEUgYmVmb3JlIHJlbW92aW5nIHRoZSBkZWZhdWx0IGFuaW1hdGlvbiBvZiB0aGUgc2NyZWVuCgkJLy8gICAgICB0aGlzIGhhZCBhbiBhbmltYXRlIGNhbGxiYWNrIHRoYXQgd291bGQgcmVzb2x2ZSB0aGUgZGVmZXJyZWQKCQkvLyAgICAgIG5vdyB0aGUgZGVmZXJyZWQgaXMgcmVzb2x2ZWQgaW1tZWRpYXRlbHkKCQkvLyBUT0RPIHJlbW92ZSB0aGUgZGVwZW5kZW5jeSBvbiB0aGUgc2NyZWVuIGRlZmVycmVkCgkJdGhpcy5fdWkuc2NyZWVuCgkJCS5yZW1vdmVDbGFzcyggYXJncy5jbGFzc1RvUmVtb3ZlICkKCQkJLmFkZENsYXNzKCBhcmdzLnNjcmVlbkNsYXNzVG9BZGQgKTsKCgkJYXJncy5wcmVyZXF1aXNpdGVzLnNjcmVlbi5yZXNvbHZlKCk7CgoJCWlmICggYXJncy50cmFuc2l0aW9uICYmIGFyZ3MudHJhbnNpdGlvbiAhPT0gIm5vbmUiICkgewoJCQlpZiAoIGFyZ3MuYXBwbHlUcmFuc2l0aW9uICkgewoJCQkJdGhpcy5fYXBwbHlUcmFuc2l0aW9uKCBhcmdzLnRyYW5zaXRpb24gKTsKCQkJfQoJCQlpZiAoIHRoaXMuX2ZhbGxiYWNrVHJhbnNpdGlvbiApIHsKCQkJCXRoaXMuX3VpLmNvbnRhaW5lcgoJCQkJCS5hbmltYXRpb25Db21wbGV0ZSggJC5wcm94eSggYXJncy5wcmVyZXF1aXNpdGVzLmNvbnRhaW5lciwgInJlc29sdmUiICkgKQoJCQkJCS5hZGRDbGFzcyggYXJncy5jb250YWluZXJDbGFzc1RvQWRkICkKCQkJCQkucmVtb3ZlQ2xhc3MoIGFyZ3MuY2xhc3NUb1JlbW92ZSApOwoJCQkJcmV0dXJuOwoJCQl9CgkJfQoJCXRoaXMuX3VpLmNvbnRhaW5lci5yZW1vdmVDbGFzcyggYXJncy5jbGFzc1RvUmVtb3ZlICk7CgkJYXJncy5wcmVyZXF1aXNpdGVzLmNvbnRhaW5lci5yZXNvbHZlKCk7Cgl9LAoKCS8vIFRoZSBkZXNpcmVkIGNvb3JkaW5hdGVzIHBhc3NlZCBpbiB3aWxsIGJlIHJldHVybmVkIHVudG91Y2hlZCBpZiBubyByZWZlcmVuY2UgZWxlbWVudCBjYW4gYmUgaWRlbnRpZmllZCB2aWEKCS8vIGRlc2lyZWRQb3NpdGlvbi5wb3NpdGlvblRvLiBOZXZlcnRoZWxlc3MsIHRoaXMgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IGl0cyByZXR1cm4gdmFsdWUgYWx3YXlzIGNvbnRhaW5zIHZhbGlkCgkvLyB4IGFuZCB5IGNvb3JkaW5hdGVzIGJ5IHNwZWNpZnlpbmcgdGhlIGNlbnRlciBtaWRkbGUgb2YgdGhlIHdpbmRvdyBpZiB0aGUgY29vcmRpbmF0ZXMgYXJlIGFic2VudC4KCS8vIG9wdGlvbnM6IHsgeDogY29vcmRpbmF0ZSwgeTogY29vcmRpbmF0ZSwgcG9zaXRpb25Ubzogc3RyaW5nOiAib3JpZ2luIiwgIndpbmRvdyIsIG9yIGpRdWVyeSBzZWxlY3RvcgoJX2Rlc2lyZWRDb29yZHM6IGZ1bmN0aW9uKCBvcGVuT3B0aW9ucyApIHsKCQl2YXIgb2Zmc2V0LAoJCQlkc3QgPSBudWxsLAoJCQl3aW5kb3dDb29yZGluYXRlcyA9IGdldFdpbmRvd0Nvb3JkaW5hdGVzKCB0aGlzLndpbmRvdyApLAoJCQl4ID0gb3Blbk9wdGlvbnMueCwKCQkJeSA9IG9wZW5PcHRpb25zLnksCgkJCXBUbyA9IG9wZW5PcHRpb25zLnBvc2l0aW9uVG87CgoJCS8vIEVzdGFibGlzaCB3aGljaCBlbGVtZW50IHdpbGwgc2VydmUgYXMgdGhlIHJlZmVyZW5jZQoJCWlmICggcFRvICYmIHBUbyAhPT0gIm9yaWdpbiIgKSB7CgkJCWlmICggcFRvID09PSAid2luZG93IiApIHsKCQkJCXggPSB3aW5kb3dDb29yZGluYXRlcy5jeCAvIDIgKyB3aW5kb3dDb29yZGluYXRlcy54OwoJCQkJeSA9IHdpbmRvd0Nvb3JkaW5hdGVzLmN5IC8gMiArIHdpbmRvd0Nvb3JkaW5hdGVzLnk7CgkJCX0gZWxzZSB7CgkJCQl0cnkgewoJCQkJCWRzdCA9ICQoIHBUbyApOwoJCQkJfSBjYXRjaCggZXJyICkgewoJCQkJCWRzdCA9IG51bGw7CgkJCQl9CgkJCQlpZiAoIGRzdCApIHsKCQkJCQlkc3QuZmlsdGVyKCAiOnZpc2libGUiICk7CgkJCQkJaWYgKCBkc3QubGVuZ3RoID09PSAwICkgewoJCQkJCQlkc3QgPSBudWxsOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJLy8gSWYgYW4gZWxlbWVudCB3YXMgZm91bmQsIGNlbnRlciBvdmVyIGl0CgkJaWYgKCBkc3QgKSB7CgkJCW9mZnNldCA9IGRzdC5vZmZzZXQoKTsKCQkJeCA9IG9mZnNldC5sZWZ0ICsgZHN0Lm91dGVyV2lkdGgoKSAvIDI7CgkJCXkgPSBvZmZzZXQudG9wICsgZHN0Lm91dGVySGVpZ2h0KCkgLyAyOwoJCX0KCgkJLy8gTWFrZSBzdXJlIHggYW5kIHkgYXJlIHZhbGlkIG51bWJlcnMgLSBjZW50ZXIgb3ZlciB0aGUgd2luZG93CgkJaWYgKCAkLnR5cGUoIHggKSAhPT0gIm51bWJlciIgfHwgaXNOYU4oIHggKSApIHsKCQkJeCA9IHdpbmRvd0Nvb3JkaW5hdGVzLmN4IC8gMiArIHdpbmRvd0Nvb3JkaW5hdGVzLng7CgkJfQoJCWlmICggJC50eXBlKCB5ICkgIT09ICJudW1iZXIiIHx8IGlzTmFOKCB5ICkgKSB7CgkJCXkgPSB3aW5kb3dDb29yZGluYXRlcy5jeSAvIDIgKyB3aW5kb3dDb29yZGluYXRlcy55OwoJCX0KCgkJcmV0dXJuIHsgeDogeCwgeTogeSB9OwoJfSwKCglfcmVwb3NpdGlvbjogZnVuY3Rpb24oIG9wZW5PcHRpb25zICkgewoJCS8vIFdlIG9ubHkgY2FyZSBhYm91dCBwb3NpdGlvbi1yZWxhdGVkIHBhcmFtZXRlcnMgZm9yIHJlcG9zaXRpb25pbmcKCQlvcGVuT3B0aW9ucyA9IHsKCQkJeDogb3Blbk9wdGlvbnMueCwKCQkJeTogb3Blbk9wdGlvbnMueSwKCQkJcG9zaXRpb25Ubzogb3Blbk9wdGlvbnMucG9zaXRpb25UbwoJCX07CgkJdGhpcy5fdHJpZ2dlciggImJlZm9yZXBvc2l0aW9uIiwgdW5kZWZpbmVkLCBvcGVuT3B0aW9ucyApOwoJCXRoaXMuX3VpLmNvbnRhaW5lci5vZmZzZXQoIHRoaXMuX3BsYWNlbWVudENvb3JkcyggdGhpcy5fZGVzaXJlZENvb3Jkcyggb3Blbk9wdGlvbnMgKSApICk7Cgl9LAoKCXJlcG9zaXRpb246IGZ1bmN0aW9uKCBvcGVuT3B0aW9ucyApIHsKCQlpZiAoIHRoaXMuX2lzT3BlbiApIHsKCQkJdGhpcy5fcmVwb3NpdGlvbiggb3Blbk9wdGlvbnMgKTsKCQl9Cgl9LAoKCV9vcGVuUHJlcmVxdWlzaXRlc0NvbXBsZXRlOiBmdW5jdGlvbigpIHsKCQl2YXIgaWQgPSB0aGlzLmVsZW1lbnQuYXR0ciggImlkIiApOwoKCQl0aGlzLl91aS5jb250YWluZXIuYWRkQ2xhc3MoICJ1aS1wb3B1cC1hY3RpdmUiICk7CgkJdGhpcy5faXNPcGVuID0gdHJ1ZTsKCQl0aGlzLl9yZXNpemVTY3JlZW4oKTsKCQl0aGlzLl91aS5jb250YWluZXIuYXR0ciggInRhYmluZGV4IiwgIjAiICkuZm9jdXMoKTsKCQl0aGlzLl9pZ25vcmVSZXNpemVFdmVudHMoKTsKCQlpZiAoIGlkICkgewoJCQl0aGlzLmRvY3VtZW50LmZpbmQoICJbYXJpYS1oYXNwb3B1cD0ndHJ1ZSddW2FyaWEtb3ducz0nIiArICBpZCArICInXSIgKS5hdHRyKCAiYXJpYS1leHBhbmRlZCIsIHRydWUgKTsKCQl9CgkJdGhpcy5fdHJpZ2dlciggImFmdGVyb3BlbiIgKTsKCX0sCgoJX29wZW46IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCXZhciBvcGVuT3B0aW9ucyA9ICQuZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zICksCgkJCS8vIFRPRE8gbW92ZSBibGFja2xpc3QgdG8gcHJpdmF0ZSBtZXRob2QKCQkJYW5kcm9pZEJsYWNrbGlzdCA9ICggZnVuY3Rpb24oKSB7CgkJCQl2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LAoJCQkJCS8vIFJlbmRlcmluZyBlbmdpbmUgaXMgV2Via2l0LCBhbmQgY2FwdHVyZSBtYWpvciB2ZXJzaW9uCgkJCQkJd2ttYXRjaCA9IHVhLm1hdGNoKCAvQXBwbGVXZWJLaXRcLyhbMC05XC5dKykvICksCgkJCQkJd2t2ZXJzaW9uID0gISF3a21hdGNoICYmIHdrbWF0Y2hbIDEgXSwKCQkJCQlhbmRyb2lkbWF0Y2ggPSB1YS5tYXRjaCggL0FuZHJvaWQgKFxkKyg/OlwuXGQrKSkvICksCgkJCQkJYW5kdmVyc2lvbiA9ICEhYW5kcm9pZG1hdGNoICYmIGFuZHJvaWRtYXRjaFsgMSBdLAoJCQkJCWNocm9tZW1hdGNoID0gdWEuaW5kZXhPZiggIkNocm9tZSIgKSA+IC0xOwoKCQkJCS8vIFBsYXRmb3JtIGlzIEFuZHJvaWQsIFdlYktpdCB2ZXJzaW9uIGlzIGdyZWF0ZXIgdGhhbiA1MzQuMTMgKCBBbmRyb2lkIDMuMi4xICkgYW5kIG5vdCBDaHJvbWUuCgkJCQlpZiAoIGFuZHJvaWRtYXRjaCAhPT0gbnVsbCAmJiBhbmR2ZXJzaW9uID09PSAiNC4wIiAmJiB3a3ZlcnNpb24gJiYgd2t2ZXJzaW9uID4gNTM0LjEzICYmICFjaHJvbWVtYXRjaCApIHsKCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCX0KCQkJCXJldHVybiBmYWxzZTsKCQkJfSgpKTsKCgkJLy8gQ291bnQgZG93biB0byB0cmlnZ2VyaW5nICJwb3B1cGFmdGVyb3BlbiIgLSB3ZSBoYXZlIHR3byBwcmVyZXF1aXNpdGVzOgoJCS8vIDEuIFRoZSBwb3B1cCB3aW5kb3cgYW5pbWF0aW9uIGNvbXBsZXRlcyAoY29udGFpbmVyKCkpCgkJLy8gMi4gVGhlIHNjcmVlbiBvcGFjaXR5IGFuaW1hdGlvbiBjb21wbGV0ZXMgKHNjcmVlbigpKQoJCXRoaXMuX2NyZWF0ZVByZXJlcXVpc2l0ZXMoCgkJCSQubm9vcCwKCQkJJC5ub29wLAoJCQkkLnByb3h5KCB0aGlzLCAiX29wZW5QcmVyZXF1aXNpdGVzQ29tcGxldGUiICkgKTsKCgkJdGhpcy5fY3VycmVudFRyYW5zaXRpb24gPSBvcGVuT3B0aW9ucy50cmFuc2l0aW9uOwoJCXRoaXMuX2FwcGx5VHJhbnNpdGlvbiggb3Blbk9wdGlvbnMudHJhbnNpdGlvbiApOwoKCQl0aGlzLl91aS5zY3JlZW4ucmVtb3ZlQ2xhc3MoICJ1aS1zY3JlZW4taGlkZGVuIiApOwoJCXRoaXMuX3VpLmNvbnRhaW5lci5yZW1vdmVDbGFzcyggInVpLXBvcHVwLXRydW5jYXRlIiApOwoKCQkvLyBHaXZlIGFwcGxpY2F0aW9ucyBhIGNoYW5jZSB0byBtb2RpZnkgdGhlIGNvbnRlbnRzIG9mIHRoZSBjb250YWluZXIgYmVmb3JlIGl0IGFwcGVhcnMKCQl0aGlzLl9yZXBvc2l0aW9uKCBvcGVuT3B0aW9ucyApOwoKCQl0aGlzLl91aS5jb250YWluZXIucmVtb3ZlQ2xhc3MoICJ1aS1wb3B1cC1oaWRkZW4iICk7CgoJCWlmICggdGhpcy5vcHRpb25zLm92ZXJsYXlUaGVtZSAmJiBhbmRyb2lkQmxhY2tsaXN0ICkgewoJCQkvKiBUT0RPOiBUaGUgbmF0aXZlIGJyb3dzZXIgb24gQW5kcm9pZCA0LjAuWCAoIkljZSBDcmVhbSBTYW5kd2ljaCIpIHN1ZmZlcnMgZnJvbSBhbiBpc3N1ZSB3aGVyZSB0aGUgcG9wdXAgb3ZlcmxheSBhcHBlYXJzIHRvIGJlIHotaW5kZXhlZCBhYm92ZSB0aGUgcG9wdXAgaXRzZWxmIHdoZW4gY2VydGFpbiBvdGhlciBzdHlsZXMgZXhpc3Qgb24gdGhlIHNhbWUgcGFnZSAtLSBuYW1lbHksIGFueSBlbGVtZW50IHNldCB0byBgcG9zaXRpb246IGZpeGVkYCBhbmQgY2VydGFpbiB0eXBlcyBvZiBpbnB1dC4gVGhlc2UgaXNzdWVzIGFyZSByZW1pbmlzY2VudCBvZiBwcmV2aW91c2x5IHVuY292ZXJlZCBidWdzIGluIG9sZGVyIHZlcnNpb25zIG9mIEFuZHJvaWQncyBuYXRpdmUgYnJvd3NlcjogaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0amVobC9EZXZpY2UtQnVncy9pc3N1ZXMvMwoJCQlUaGlzIGZpeCBjbG9zZXMgdGhlIGZvbGxvd2luZyBidWdzICggSSB1c2UgImNsb3NlcyIgd2l0aCByZWx1Y3RhbmNlLCBhbmQgc3RyZXNzIHRoYXQgdGhpcyBpc3N1ZSBzaG91bGQgYmUgcmV2aXNpdGVkIGFzIHNvb24gYXMgcG9zc2libGUgKToKCQkJaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktbW9iaWxlL2lzc3Vlcy80ODE2CgkJCWh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1vYmlsZS9pc3N1ZXMvNDg0NAoJCQlodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS1tb2JpbGUvaXNzdWVzLzQ4NzQKCQkJKi8KCgkJCS8vIFRPRE8gc29ydCBvdXQgd2h5IHRoaXMuX3BhZ2UgaXNuJ3Qgd29ya2luZwoJCQl0aGlzLmVsZW1lbnQuY2xvc2VzdCggIi51aS1wYWdlIiApLmFkZENsYXNzKCAidWktcG9wdXAtb3BlbiIgKTsKCQl9CgkJdGhpcy5fYW5pbWF0ZSh7CgkJCWFkZGl0aW9uYWxDb25kaXRpb246IHRydWUsCgkJCXRyYW5zaXRpb246IG9wZW5PcHRpb25zLnRyYW5zaXRpb24sCgkJCWNsYXNzVG9SZW1vdmU6ICIiLAoJCQlzY3JlZW5DbGFzc1RvQWRkOiAiaW4iLAoJCQljb250YWluZXJDbGFzc1RvQWRkOiAiaW4iLAoJCQlhcHBseVRyYW5zaXRpb246IGZhbHNlLAoJCQlwcmVyZXF1aXNpdGVzOiB0aGlzLl9wcmVyZXF1aXNpdGVzCgkJfSk7Cgl9LAoKCV9jbG9zZVByZXJlcXVpc2l0ZVNjcmVlbjogZnVuY3Rpb24oKSB7CgkJdGhpcy5fdWkuc2NyZWVuCgkJCS5yZW1vdmVDbGFzcyggIm91dCIgKQoJCQkuYWRkQ2xhc3MoICJ1aS1zY3JlZW4taGlkZGVuIiApOwoJfSwKCglfY2xvc2VQcmVyZXF1aXNpdGVDb250YWluZXI6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX3VpLmNvbnRhaW5lcgoJCQkucmVtb3ZlQ2xhc3MoICJyZXZlcnNlIG91dCIgKQoJCQkuYWRkQ2xhc3MoICJ1aS1wb3B1cC1oaWRkZW4gdWktcG9wdXAtdHJ1bmNhdGUiICkKCQkJLnJlbW92ZUF0dHIoICJzdHlsZSIgKTsKCX0sCgoJX2Nsb3NlUHJlcmVxdWlzaXRlc0RvbmU6IGZ1bmN0aW9uKCkgewoJCXZhciBjb250YWluZXIgPSB0aGlzLl91aS5jb250YWluZXIsCgkJCWlkID0gdGhpcy5lbGVtZW50LmF0dHIoICJpZCIgKTsKCgkJY29udGFpbmVyLnJlbW92ZUF0dHIoICJ0YWJpbmRleCIgKTsKCgkJLy8gcmVtb3ZlIHRoZSBnbG9iYWwgbXV0ZXggZm9yIHBvcHVwcwoJCSQubW9iaWxlLnBvcHVwLmFjdGl2ZSA9IHVuZGVmaW5lZDsKCgkJLy8gQmx1ciBlbGVtZW50cyBpbnNpZGUgdGhlIGNvbnRhaW5lciwgaW5jbHVkaW5nIHRoZSBjb250YWluZXIKCQkkKCAiOmZvY3VzIiwgY29udGFpbmVyWyAwIF0gKS5hZGQoIGNvbnRhaW5lclsgMCBdICkuYmx1cigpOwoKCQlpZiAoIGlkICkgewoJCQl0aGlzLmRvY3VtZW50LmZpbmQoICJbYXJpYS1oYXNwb3B1cD0ndHJ1ZSddW2FyaWEtb3ducz0nIiArICBpZCArICInXSIgKS5hdHRyKCAiYXJpYS1leHBhbmRlZCIsIGZhbHNlICk7CgkJfQoKCQkvLyBhbGVydCB1c2VycyB0aGF0IHRoZSBwb3B1cCBpcyBjbG9zZWQKCQl0aGlzLl90cmlnZ2VyKCAiYWZ0ZXJjbG9zZSIgKTsKCX0sCgoJX2Nsb3NlOiBmdW5jdGlvbiggaW1tZWRpYXRlICkgewoJCXRoaXMuX3VpLmNvbnRhaW5lci5yZW1vdmVDbGFzcyggInVpLXBvcHVwLWFjdGl2ZSIgKTsKCQl0aGlzLl9wYWdlLnJlbW92ZUNsYXNzKCAidWktcG9wdXAtb3BlbiIgKTsKCgkJdGhpcy5faXNPcGVuID0gZmFsc2U7CgoJCS8vIENvdW50IGRvd24gdG8gdHJpZ2dlcmluZyAicG9wdXBhZnRlcmNsb3NlIiAtIHdlIGhhdmUgdHdvIHByZXJlcXVpc2l0ZXM6CgkJLy8gMS4gVGhlIHBvcHVwIHdpbmRvdyByZXZlcnNlIGFuaW1hdGlvbiBjb21wbGV0ZXMgKGNvbnRhaW5lcigpKQoJCS8vIDIuIFRoZSBzY3JlZW4gb3BhY2l0eSBhbmltYXRpb24gY29tcGxldGVzIChzY3JlZW4oKSkKCQl0aGlzLl9jcmVhdGVQcmVyZXF1aXNpdGVzKAoJCQkkLnByb3h5KCB0aGlzLCAiX2Nsb3NlUHJlcmVxdWlzaXRlU2NyZWVuIiApLAoJCQkkLnByb3h5KCB0aGlzLCAiX2Nsb3NlUHJlcmVxdWlzaXRlQ29udGFpbmVyIiApLAoJCQkkLnByb3h5KCB0aGlzLCAiX2Nsb3NlUHJlcmVxdWlzaXRlc0RvbmUiICkgKTsKCgkJdGhpcy5fYW5pbWF0ZSggewoJCQlhZGRpdGlvbmFsQ29uZGl0aW9uOiB0aGlzLl91aS5zY3JlZW4uaGFzQ2xhc3MoICJpbiIgKSwKCQkJdHJhbnNpdGlvbjogKCBpbW1lZGlhdGUgPyAibm9uZSIgOiAoIHRoaXMuX2N1cnJlbnRUcmFuc2l0aW9uICkgKSwKCQkJY2xhc3NUb1JlbW92ZTogImluIiwKCQkJc2NyZWVuQ2xhc3NUb0FkZDogIm91dCIsCgkJCWNvbnRhaW5lckNsYXNzVG9BZGQ6ICJyZXZlcnNlIG91dCIsCgkJCWFwcGx5VHJhbnNpdGlvbjogdHJ1ZSwKCQkJcHJlcmVxdWlzaXRlczogdGhpcy5fcHJlcmVxdWlzaXRlcwoJCX0pOwoJfSwKCglfdW5lbmhhbmNlOiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMub3B0aW9ucy5lbmhhbmNlZCApIHsKCQkJcmV0dXJuOwoJCX0KCgkJLy8gUHV0IHRoZSBlbGVtZW50IGJhY2sgdG8gd2hlcmUgdGhlIHBsYWNlaG9sZGVyIHdhcyBhbmQgcmVtb3ZlIHRoZSAidWktcG9wdXAiIGNsYXNzCgkJdGhpcy5fc2V0T3B0aW9ucyggeyB0aGVtZTogJC5tb2JpbGUucG9wdXAucHJvdG90eXBlLm9wdGlvbnMudGhlbWUgfSApOwoJCXRoaXMuZWxlbWVudAoJCQkvLyBDYW5ub3QgZGlyZWN0bHkgaW5zZXJ0QWZ0ZXIoKSAtIHdlIG5lZWQgdG8gZGV0YWNoKCkgZmlyc3QsIGJlY2F1c2UKCQkJLy8gaW5zZXJ0QWZ0ZXIoKSB3aWxsIGRvIG5vdGhpbmcgaWYgdGhlIHBheWxvYWQgZGl2IHdhcyBub3QgYXR0YWNoZWQKCQkJLy8gdG8gdGhlIERPTSBhdCB0aGUgdGltZSB0aGUgd2lkZ2V0IHdhcyBjcmVhdGVkLCBhbmQgc28gdGhlIHBheWxvYWQKCQkJLy8gd2lsbCByZW1haW4gaW5zaWRlIHRoZSBjb250YWluZXIgZXZlbiBhZnRlciB3ZSBjYWxsIGluc2VydEFmdGVyKCkuCgkJCS8vIElmIHRoYXQgaGFwcGVucyBhbmQgd2UgcmVtb3ZlIHRoZSBjb250YWluZXIgYSBmZXcgbGluZXMgYmVsb3csIHdlCgkJCS8vIHdpbGwgY2F1c2UgYW4gaW5maW5pdGUgcmVjdXJzaW9uIC0gIzUyNDQKCQkJLmRldGFjaCgpCgkJCS5pbnNlcnRBZnRlciggdGhpcy5fdWkucGxhY2Vob2xkZXIgKQoJCQkucmVtb3ZlQ2xhc3MoICJ1aS1wb3B1cCB1aS1vdmVybGF5LXNoYWRvdyB1aS1jb3JuZXItYWxsIHVpLWJvZHktaW5oZXJpdCIgKTsKCQl0aGlzLl91aS5zY3JlZW4ucmVtb3ZlKCk7CgkJdGhpcy5fdWkuY29udGFpbmVyLnJlbW92ZSgpOwoJCXRoaXMuX3VpLnBsYWNlaG9sZGVyLnJlbW92ZSgpOwoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJaWYgKCAkLm1vYmlsZS5wb3B1cC5hY3RpdmUgPT09IHRoaXMgKSB7CgkJCXRoaXMuZWxlbWVudC5vbmUoICJwb3B1cGFmdGVyY2xvc2UiLCAkLnByb3h5KCB0aGlzLCAiX3VuZW5oYW5jZSIgKSApOwoJCQl0aGlzLmNsb3NlKCk7CgkJfSBlbHNlIHsKCQkJdGhpcy5fdW5lbmhhbmNlKCk7CgkJfQoKCQlyZXR1cm4gdGhpczsKCX0sCgoJX2Nsb3NlUG9wdXA6IGZ1bmN0aW9uKCB0aGVFdmVudCwgZGF0YSApIHsKCQl2YXIgcGFyc2VkRHN0LCB0b1VybCwKCQkJY3VycmVudE9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgkJCWltbWVkaWF0ZSA9IGZhbHNlOwoKCQlpZiAoICggdGhlRXZlbnQgJiYgdGhlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB8fCAkLm1vYmlsZS5wb3B1cC5hY3RpdmUgIT09IHRoaXMgKSB7CgkJCXJldHVybjsKCQl9CgoJCS8vIHJlc3RvcmUgbG9jYXRpb24gb24gc2NyZWVuCgkJd2luZG93LnNjcm9sbFRvKCAwLCB0aGlzLl9zY3JvbGxUb3AgKTsKCgkJaWYgKCB0aGVFdmVudCAmJiB0aGVFdmVudC50eXBlID09PSAicGFnZWJlZm9yZWNoYW5nZSIgJiYgZGF0YSApIHsKCQkJLy8gRGV0ZXJtaW5lIHdoZXRoZXIgd2UgbmVlZCB0byByYXBpZC1jbG9zZSB0aGUgcG9wdXAsIG9yIHdoZXRoZXIgd2UgY2FuCgkJCS8vIHRha2UgdGhlIHRpbWUgdG8gcnVuIHRoZSBjbG9zaW5nIHRyYW5zaXRpb24KCQkJaWYgKCB0eXBlb2YgZGF0YS50b1BhZ2UgPT09ICJzdHJpbmciICkgewoJCQkJcGFyc2VkRHN0ID0gZGF0YS50b1BhZ2U7CgkJCX0gZWxzZSB7CgkJCQlwYXJzZWREc3QgPSBkYXRhLnRvUGFnZS5qcW1EYXRhKCAidXJsIiApOwoJCQl9CgkJCXBhcnNlZERzdCA9ICQubW9iaWxlLnBhdGgucGFyc2VVcmwoIHBhcnNlZERzdCApOwoJCQl0b1VybCA9IHBhcnNlZERzdC5wYXRobmFtZSArIHBhcnNlZERzdC5zZWFyY2ggKyBwYXJzZWREc3QuaGFzaDsKCgkJCWlmICggdGhpcy5fbXlVcmwgIT09ICQubW9iaWxlLnBhdGgubWFrZVVybEFic29sdXRlKCB0b1VybCApICkgewoJCQkJLy8gR29pbmcgdG8gYSBkaWZmZXJlbnQgcGFnZSAtIGNsb3NlIGltbWVkaWF0ZWx5CgkJCQlpbW1lZGlhdGUgPSB0cnVlOwoJCQl9IGVsc2UgewoJCQkJdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJfQoJCX0KCgkJLy8gcmVtb3ZlIG5hdiBiaW5kaW5ncwoJCXRoaXMud2luZG93Lm9mZiggY3VycmVudE9wdGlvbnMuY2xvc2VFdmVudHMgKTsKCQkvLyB1bmJpbmQgY2xpY2sgaGFuZGxlcnMgYWRkZWQgd2hlbiBoaXN0b3J5IGlzIGRpc2FibGVkCgkJdGhpcy5lbGVtZW50LnVuZGVsZWdhdGUoIGN1cnJlbnRPcHRpb25zLmNsb3NlTGlua1NlbGVjdG9yLCBjdXJyZW50T3B0aW9ucy5jbG9zZUxpbmtFdmVudHMgKTsKCgkJdGhpcy5fY2xvc2UoIGltbWVkaWF0ZSApOwoJfSwKCgkvLyBhbnkgbmF2aWdhdGlvbiBldmVudCBhZnRlciBhIHBvcHVwIGlzIG9wZW5lZCBzaG91bGQgY2xvc2UgdGhlIHBvcHVwCgkvLyBOT1RFIHRoZSBwYWdlYmVmb3JlY2hhbmdlIGlzIGJvdW5kIHRvIGNhdGNoIG5hdmlnYXRpb24gZXZlbnRzIHRoYXQgZG9uJ3QKCS8vICAgICAgYWx0ZXIgdGhlIHVybCAoZWcsIGRpYWxvZ3MgZnJvbSBwb3B1cHMpCglfYmluZENvbnRhaW5lckNsb3NlOiBmdW5jdGlvbigpIHsKCQl0aGlzLndpbmRvdwoJCQkub24oIHRoaXMub3B0aW9ucy5jbG9zZUV2ZW50cywgJC5wcm94eSggdGhpcywgIl9jbG9zZVBvcHVwIiApICk7Cgl9LAoKCXdpZGdldDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuX3VpLmNvbnRhaW5lcjsKCX0sCgoJLy8gVE9ETyBubyBjbGVhciBkZWxpbmlhdGlvbiBvZiB3aGF0IHNob3VsZCBiZSBoZXJlIGFuZAoJLy8gd2hhdCBzaG91bGQgYmUgaW4gX29wZW4uIFNlZW1zIHRvIGJlICJ2aXN1YWwiIHZzICJoaXN0b3J5IiBmb3Igbm93CglvcGVuOiBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQl2YXIgdXJsLCBoYXNoa2V5LCBhY3RpdmVQYWdlLCBjdXJyZW50SXNEaWFsb2csIGhhc0hhc2gsIHVybEhpc3RvcnksCgkJCXNlbGYgPSB0aGlzLAoJCQljdXJyZW50T3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCgkJLy8gbWFrZSBzdXJlIG9wZW4gaXMgaWRlbXBvdGVudAoJCWlmICggJC5tb2JpbGUucG9wdXAuYWN0aXZlIHx8IGN1cnJlbnRPcHRpb25zLmRpc2FibGVkICkgewoJCQlyZXR1cm4gdGhpczsKCQl9CgoJCS8vIHNldCB0aGUgZ2xvYmFsIHBvcHVwIG11dGV4CgkJJC5tb2JpbGUucG9wdXAuYWN0aXZlID0gdGhpczsKCQl0aGlzLl9zY3JvbGxUb3AgPSB0aGlzLndpbmRvdy5zY3JvbGxUb3AoKTsKCgkJLy8gaWYgaGlzdG9yeSBhbHRlcmF0aW9uIGlzIGRpc2FibGVkIGNsb3NlIG9uIG5hdmlnYXRlIGV2ZW50cwoJCS8vIGFuZCBsZWF2ZSB0aGUgdXJsIGFzIGlzCgkJaWYgKCAhKCBjdXJyZW50T3B0aW9ucy5oaXN0b3J5ICkgKSB7CgkJCXNlbGYuX29wZW4oIG9wdGlvbnMgKTsKCQkJc2VsZi5fYmluZENvbnRhaW5lckNsb3NlKCk7CgoJCQkvLyBXaGVuIGhpc3RveSBpcyBkaXNhYmxlZCB3ZSBoYXZlIHRvIGdyYWIgdGhlIGRhdGEtcmVsCgkJCS8vIGJhY2sgbGluayBjbGlja3Mgc28gd2UgY2FuIGNsb3NlIHRoZSBwb3B1cCBpbnN0ZWFkIG9mCgkJCS8vIHJlbHlpbmcgb24gaGlzdG9yeSB0byBkbyBpdCBmb3IgdXMKCQkJc2VsZi5lbGVtZW50CgkJCQkuZGVsZWdhdGUoIGN1cnJlbnRPcHRpb25zLmNsb3NlTGlua1NlbGVjdG9yLCBjdXJyZW50T3B0aW9ucy5jbG9zZUxpbmtFdmVudHMsIGZ1bmN0aW9uKCB0aGVFdmVudCApIHsKCQkJCQlzZWxmLmNsb3NlKCk7CgkJCQkJdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCX0pOwoKCQkJcmV0dXJuIHRoaXM7CgkJfQoKCQkvLyBjYWNoZSBzb21lIHZhbHVlcyBmb3IgbWluL3JlYWRhYmlsaXR5CgkJdXJsSGlzdG9yeSA9ICQubW9iaWxlLm5hdmlnYXRlLmhpc3Rvcnk7CgkJaGFzaGtleSA9ICQubW9iaWxlLmRpYWxvZ0hhc2hLZXk7CgkJYWN0aXZlUGFnZSA9ICQubW9iaWxlLmFjdGl2ZVBhZ2U7CgkJY3VycmVudElzRGlhbG9nID0gKCBhY3RpdmVQYWdlID8gYWN0aXZlUGFnZS5oYXNDbGFzcyggInVpLWRpYWxvZyIgKSA6IGZhbHNlICk7CgkJdGhpcy5fbXlVcmwgPSB1cmwgPSB1cmxIaXN0b3J5LmdldEFjdGl2ZSgpLnVybDsKCQloYXNIYXNoID0gKCB1cmwuaW5kZXhPZiggaGFzaGtleSApID4gLTEgKSAmJiAhY3VycmVudElzRGlhbG9nICYmICggdXJsSGlzdG9yeS5hY3RpdmVJbmRleCA+IDAgKTsKCgkJaWYgKCBoYXNIYXNoICkgewoJCQlzZWxmLl9vcGVuKCBvcHRpb25zICk7CgkJCXNlbGYuX2JpbmRDb250YWluZXJDbG9zZSgpOwoJCQlyZXR1cm4gdGhpczsKCQl9CgoJCS8vIGlmIHRoZSBjdXJyZW50IHVybCBoYXMgbm8gZGlhbG9nIGhhc2gga2V5IHByb2NlZWQgYXMgbm9ybWFsCgkJLy8gb3RoZXJ3aXNlLCBpZiB0aGUgcGFnZSBpcyBhIGRpYWxvZyBzaW1wbHkgdGFjayBvbiB0aGUgaGFzaCBrZXkKCQlpZiAoIHVybC5pbmRleE9mKCBoYXNoa2V5ICkgPT09IC0xICYmICFjdXJyZW50SXNEaWFsb2cgKSB7CgkJCXVybCA9IHVybCArICh1cmwuaW5kZXhPZiggIiMiICkgPiAtMSA/IGhhc2hrZXkgOiAiIyIgKyBoYXNoa2V5KTsKCQl9IGVsc2UgewoJCQl1cmwgPSAkLm1vYmlsZS5wYXRoLnBhcnNlTG9jYXRpb24oKS5oYXNoICsgaGFzaGtleTsKCQl9CgoJCS8vIFRhY2sgb24gYW4gZXh0cmEgaGFzaGtleSBpZiB0aGlzIGlzIHRoZSBmaXJzdCBwYWdlIGFuZCB3ZSd2ZSBqdXN0IHJlY29uc3RydWN0ZWQgdGhlIGluaXRpYWwgaGFzaAoJCWlmICggdXJsSGlzdG9yeS5hY3RpdmVJbmRleCA9PT0gMCAmJiB1cmwgPT09IHVybEhpc3RvcnkuaW5pdGlhbERzdCApIHsKCQkJdXJsICs9IGhhc2hrZXk7CgkJfQoKCQkvLyBzd2FsbG93IHRoZSB0aGUgaW5pdGlhbCBuYXZpZ2F0aW9uIGV2ZW50LCBhbmQgYmluZCBmb3IgdGhlIG5leHQKCQl0aGlzLndpbmRvdy5vbmUoICJiZWZvcmVuYXZpZ2F0ZSIsIGZ1bmN0aW9uKCB0aGVFdmVudCApIHsKCQkJdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJc2VsZi5fb3Blbiggb3B0aW9ucyApOwoJCQlzZWxmLl9iaW5kQ29udGFpbmVyQ2xvc2UoKTsKCQl9KTsKCgkJdGhpcy51cmxBbHRlcmVkID0gdHJ1ZTsKCQkkLm1vYmlsZS5uYXZpZ2F0ZSggdXJsLCB7IHJvbGU6ICJkaWFsb2ciIH0gKTsKCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWNsb3NlOiBmdW5jdGlvbigpIHsKCQkvLyBtYWtlIHN1cmUgY2xvc2UgaXMgaWRlbXBvdGVudAoJCWlmICggJC5tb2JpbGUucG9wdXAuYWN0aXZlICE9PSB0aGlzICkgewoJCQlyZXR1cm4gdGhpczsKCQl9CgoJCXRoaXMuX3Njcm9sbFRvcCA9IHRoaXMud2luZG93LnNjcm9sbFRvcCgpOwoKCQlpZiAoIHRoaXMub3B0aW9ucy5oaXN0b3J5ICYmIHRoaXMudXJsQWx0ZXJlZCApIHsKCQkJJC5tb2JpbGUuYmFjaygpOwoJCQl0aGlzLnVybEFsdGVyZWQgPSBmYWxzZTsKCQl9IGVsc2UgewoJCQkvLyBzaW11bGF0ZSB0aGUgbmF2IGJpbmRpbmdzIGhhdmluZyBmaXJlZAoJCQl0aGlzLl9jbG9zZVBvcHVwKCk7CgkJfQoKCQlyZXR1cm4gdGhpczsKCX0KfSk7CgovLyBUT0RPIHRoaXMgY2FuIGJlIG1vdmVkIGluc2lkZSB0aGUgd2lkZ2V0CiQubW9iaWxlLnBvcHVwLmhhbmRsZUxpbmsgPSBmdW5jdGlvbiggJGxpbmsgKSB7Cgl2YXIgb2Zmc2V0LAoJCXBhdGggPSAkLm1vYmlsZS5wYXRoLAoKCQkvLyBOT1RFIG1ha2Ugc3VyZSB0byBnZXQgb25seSB0aGUgaGFzaCBmcm9tIHRoZSBocmVmIGJlY2F1c2UgaWU3ICh3cDcpCgkJLy8gICAgICByZXR1cm5zIHRoZSBhYnNvbHV0ZSBocmVmIGluIHRoaXMgY2FzZSBydWluaW5nIHRoZSBlbGVtZW50IHNlbGVjdGlvbgoJCXBvcHVwID0gJCggcGF0aC5oYXNoVG9TZWxlY3RvciggcGF0aC5wYXJzZVVybCggJGxpbmsuYXR0ciggImhyZWYiICkgKS5oYXNoICkgKS5maXJzdCgpOwoKCWlmICggcG9wdXAubGVuZ3RoID4gMCAmJiBwb3B1cC5kYXRhKCAibW9iaWxlLXBvcHVwIiApICkgewoJCW9mZnNldCA9ICRsaW5rLm9mZnNldCgpOwoJCXBvcHVwLnBvcHVwKCAib3BlbiIsIHsKCQkJeDogb2Zmc2V0LmxlZnQgKyAkbGluay5vdXRlcldpZHRoKCkgLyAyLAoJCQl5OiBvZmZzZXQudG9wICsgJGxpbmsub3V0ZXJIZWlnaHQoKSAvIDIsCgkJCXRyYW5zaXRpb246ICRsaW5rLmpxbURhdGEoICJ0cmFuc2l0aW9uIiApLAoJCQlwb3NpdGlvblRvOiAkbGluay5qcW1EYXRhKCAicG9zaXRpb24tdG8iICkKCQl9KTsKCX0KCgkvL3JlbW92ZSBhZnRlciBkZWxheQoJc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJJGxpbmsucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7Cgl9LCAzMDAgKTsKfTsKCi8vIFRPRE8gbW92ZSBpbnNpZGUgX2NyZWF0ZQokLm1vYmlsZS5kb2N1bWVudC5vbiggInBhZ2ViZWZvcmVjaGFuZ2UiLCBmdW5jdGlvbiggdGhlRXZlbnQsIGRhdGEgKSB7CglpZiAoIGRhdGEub3B0aW9ucy5yb2xlID09PSAicG9wdXAiICkgewoJCSQubW9iaWxlLnBvcHVwLmhhbmRsZUxpbmsoIGRhdGEub3B0aW9ucy5saW5rICk7CgkJdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTsKCX0KfSk7Cgp9KSggalF1ZXJ5ICk7CgovKgoqIGN1c3RvbSAic2VsZWN0bWVudSIgcGx1Z2luCiovCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCnZhciB1bmZvY3VzYWJsZUl0ZW1TZWxlY3RvciA9ICIudWktZGlzYWJsZWQsLnVpLXN0YXRlLWRpc2FibGVkLC51aS1saS1kaXZpZGVyLC51aS1zY3JlZW4taGlkZGVuLDpqcW1EYXRhKHJvbGU9J3BsYWNlaG9sZGVyJykiLAoJZ29Ub0FkamFjZW50SXRlbSA9IGZ1bmN0aW9uKCBpdGVtLCB0YXJnZXQsIGRpcmVjdGlvbiApIHsKCQl2YXIgYWRqYWNlbnQgPSBpdGVtWyBkaXJlY3Rpb24gKyAiQWxsIiBdKCkKCQkJLm5vdCggdW5mb2N1c2FibGVJdGVtU2VsZWN0b3IgKQoJCQkuZmlyc3QoKTsKCgkJLy8gaWYgdGhlcmUncyBhIHByZXZpb3VzIG9wdGlvbiwgZm9jdXMgaXQKCQlpZiAoIGFkamFjZW50Lmxlbmd0aCApIHsKCQkJdGFyZ2V0CgkJCQkuYmx1cigpCgkJCQkuYXR0ciggInRhYmluZGV4IiwgIi0xIiApOwoKCQkJYWRqYWNlbnQuZmluZCggImEiICkuZmlyc3QoKS5mb2N1cygpOwoJCX0KCX07CgokLndpZGdldCggIm1vYmlsZS5zZWxlY3RtZW51IiwgJC5tb2JpbGUuc2VsZWN0bWVudSwgewoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdmFyIG8gPSB0aGlzLm9wdGlvbnM7CgoJCS8vIEN1c3RvbSBzZWxlY3RzIGNhbm5vdCBleGlzdCBpbnNpZGUgcG9wdXBzLCBzbyByZXZlcnQgdGhlICJuYXRpdmVNZW51IgoJCS8vIG9wdGlvbiB0byB0cnVlIGlmIGEgcGFyZW50IGlzIGEgcG9wdXAKCQlvLm5hdGl2ZU1lbnUgPSBvLm5hdGl2ZU1lbnUgfHwgKCB0aGlzLmVsZW1lbnQucGFyZW50cyggIjpqcW1EYXRhKHJvbGU9J3BvcHVwJyksOm1vYmlsZS1wb3B1cCIgKS5sZW5ndGggPiAwICk7CgoJCXJldHVybiB0aGlzLl9zdXBlcigpOwoJfSwKCglfaGFuZGxlU2VsZWN0Rm9jdXM6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudC5ibHVyKCk7CgkJdGhpcy5idXR0b24uZm9jdXMoKTsKCX0sCgoJX2hhbmRsZUtleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHsKCQl0aGlzLl9zdXBlciggZXZlbnQgKTsKCQl0aGlzLl9oYW5kbGVCdXR0b25WY2xpY2tLZXlkb3duKCBldmVudCApOwoJfSwKCglfaGFuZGxlQnV0dG9uVmNsaWNrS2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCWlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkIHx8IHRoaXMuaXNPcGVuICkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAoZXZlbnQudHlwZSA9PT0gInZjbGljayIgfHwKCQkJCWV2ZW50LmtleUNvZGUgJiYgKGV2ZW50LmtleUNvZGUgPT09ICQubW9iaWxlLmtleUNvZGUuRU5URVIgfHwgZXZlbnQua2V5Q29kZSA9PT0gJC5tb2JpbGUua2V5Q29kZS5TUEFDRSkpIHsKCgkJCXRoaXMuX2RlY2lkZUZvcm1hdCgpOwoJCQlpZiAoIHRoaXMubWVudVR5cGUgPT09ICJvdmVybGF5IiApIHsKCQkJCXRoaXMuYnV0dG9uLmF0dHIoICJocmVmIiwgIiMiICsgdGhpcy5wb3B1cElkICkuYXR0ciggImRhdGEtIiArICggJC5tb2JpbGUubnMgfHwgIiIgKSArICJyZWwiLCAicG9wdXAiICk7CgkJCX0gZWxzZSB7CgkJCQl0aGlzLmJ1dHRvbi5hdHRyKCAiaHJlZiIsICIjIiArIHRoaXMuZGlhbG9nSWQgKS5hdHRyKCAiZGF0YS0iICsgKCAkLm1vYmlsZS5ucyB8fCAiIiApICsgInJlbCIsICJkaWFsb2ciICk7CgkJCX0KCQkJdGhpcy5pc09wZW4gPSB0cnVlOwoJCQkvLyBEbyBub3QgcHJldmVudCBkZWZhdWx0LCBzbyB0aGUgbmF2aWdhdGlvbiBtYXkgaGF2ZSBhIGNoYW5jZSB0byBhY3R1YWxseSBvcGVuIHRoZSBjaG9zZW4gZm9ybWF0CgkJfQoJfSwKCglfaGFuZGxlTGlzdEZvY3VzOiBmdW5jdGlvbiggZSApIHsKCQl2YXIgcGFyYW1zID0gKCBlLnR5cGUgPT09ICJmb2N1c2luIiApID8KCQkJeyB0YWJpbmRleDogIjAiLCBldmVudDogInZtb3VzZW92ZXIiIH06CgkJCXsgdGFiaW5kZXg6ICItMSIsIGV2ZW50OiAidm1vdXNlb3V0IiB9OwoKCQkkKCBlLnRhcmdldCApCgkJCS5hdHRyKCAidGFiaW5kZXgiLCBwYXJhbXMudGFiaW5kZXggKQoJCQkudHJpZ2dlciggcGFyYW1zLmV2ZW50ICk7Cgl9LAoKCV9oYW5kbGVMaXN0S2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciB0YXJnZXQgPSAkKCBldmVudC50YXJnZXQgKSwKCQkJbGkgPSB0YXJnZXQuY2xvc2VzdCggImxpIiApOwoKCQkvLyBzd2l0Y2ggbG9naWMgYmFzZWQgb24gd2hpY2gga2V5IHdhcyBwcmVzc2VkCgkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQkJLy8gdXAgb3IgbGVmdCBhcnJvdyBrZXlzCgkJY2FzZSAzODoKCQkJZ29Ub0FkamFjZW50SXRlbSggbGksIHRhcmdldCwgInByZXYiICk7CgkJCXJldHVybiBmYWxzZTsKCQkJLy8gZG93biBvciByaWdodCBhcnJvdyBrZXlzCgkJY2FzZSA0MDoKCQkJZ29Ub0FkamFjZW50SXRlbSggbGksIHRhcmdldCwgIm5leHQiICk7CgkJCXJldHVybiBmYWxzZTsKCQkJLy8gSWYgZW50ZXIgb3Igc3BhY2UgaXMgcHJlc3NlZCwgdHJpZ2dlciBjbGljawoJCWNhc2UgMTM6CgkJY2FzZSAzMjoKCQkJdGFyZ2V0LnRyaWdnZXIoICJjbGljayIgKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0sCgoJX2hhbmRsZU1lbnVQYWdlSGlkZTogZnVuY3Rpb24oKSB7CgkJLy8gVE9ETyBjZW50cmFsaXplIHBhZ2UgcmVtb3ZhbCBiaW5kaW5nIC8gaGFuZGxpbmcgaW4gdGhlIHBhZ2UgcGx1Z2luLgoJCS8vIFN1Z2dlc3Rpb24gZnJvbSBAamJsYXMgdG8gZG8gcmVmY291bnRpbmcKCQkvLwoJCS8vIFRPRE8gZXh0cmVtZWx5IGNvbmZ1c2luZyBkZXBlbmRlbmN5IG9uIHRoZSBvcGVuIG1ldGhvZCB3aGVyZSB0aGUgcGFnZWhpZGUucmVtb3ZlCgkJLy8gYmluZGluZ3MgYXJlIHN0cmlwcGVkIHRvIHByZXZlbnQgdGhlIHBhcmVudCBwYWdlIGZyb20gZGlzYXBwZWFyaW5nLiBUaGUgd2F5CgkJLy8gd2UncmUga2VlcGluZyBwYWdlcyBpbiB0aGUgRE9NIHJpZ2h0IG5vdyBzdWNrcwoJCS8vCgkJLy8gcmViaW5kIHRoZSBwYWdlIHJlbW92ZSB0aGF0IHdhcyB1bmJvdW5kIGluIHRoZSBvcGVuIGZ1bmN0aW9uCgkJLy8gdG8gYWxsb3cgZm9yIHRoZSBwYXJlbnQgcGFnZSByZW1vdmFsIGZyb20gYWN0aW9ucyBvdGhlciB0aGFuIHRoZSB1c2UKCQkvLyBvZiBhIGRpYWxvZyBzaXplZCBjdXN0b20gc2VsZWN0CgkJLy8KCQkvLyBkb2luZyB0aGlzIGhlcmUgcHJvdmlkZXMgZm9yIHRoZSBiYWNrIGJ1dHRvbiBvbiB0aGUgY3VzdG9tIHNlbGVjdCBkaWFsb2cKCQl0aGlzLnRoaXNQYWdlLnBhZ2UoICJiaW5kUmVtb3ZlIiApOwoJfSwKCglfaGFuZGxlSGVhZGVyQ2xvc2VDbGljazogZnVuY3Rpb24oKSB7CgkJaWYgKCB0aGlzLm1lbnVUeXBlID09PSAib3ZlcmxheSIgKSB7CgkJCXRoaXMuY2xvc2UoKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0sCgoJYnVpbGQ6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxlY3RJZCwgcG9wdXBJZCwgZGlhbG9nSWQsIGxhYmVsLCB0aGlzUGFnZSwgaXNNdWx0aXBsZSwgbWVudUlkLCB0aGVtZUF0dHIsIG92ZXJsYXlUaGVtZUF0dHIsCgkJCWRpdmlkZXJUaGVtZUF0dHIsIG1lbnVQYWdlLCBsaXN0Ym94LCBsaXN0LCBoZWFkZXIsIGhlYWRlclRpdGxlLCBtZW51UGFnZUNvbnRlbnQsIG1lbnVQYWdlQ2xvc2UsIGhlYWRlckNsb3NlLCBzZWxmLAoJCQlvID0gdGhpcy5vcHRpb25zOwoKCQlpZiAoIG8ubmF0aXZlTWVudSApIHsKCQkJcmV0dXJuIHRoaXMuX3N1cGVyKCk7CgkJfQoKCQlzZWxmID0gdGhpczsKCQlzZWxlY3RJZCA9IHRoaXMuc2VsZWN0SWQ7CgkJcG9wdXBJZCA9IHNlbGVjdElkICsgIi1saXN0Ym94IjsKCQlkaWFsb2dJZCA9IHNlbGVjdElkICsgIi1kaWFsb2ciOwoJCWxhYmVsID0gdGhpcy5sYWJlbDsKCQl0aGlzUGFnZSA9IHRoaXMuZWxlbWVudC5jbG9zZXN0KCAiLnVpLXBhZ2UiICk7CgkJaXNNdWx0aXBsZSA9IHRoaXMuZWxlbWVudFsgMCBdLm11bHRpcGxlOwoJCW1lbnVJZCA9IHNlbGVjdElkICsgIi1tZW51IjsKCQl0aGVtZUF0dHIgPSBvLnRoZW1lID8gKCAiIGRhdGEtIiArICQubW9iaWxlLm5zICsgInRoZW1lPSciICsgby50aGVtZSArICInIiApIDogIiI7CgkJb3ZlcmxheVRoZW1lQXR0ciA9IG8ub3ZlcmxheVRoZW1lID8gKCAiIGRhdGEtIiArICQubW9iaWxlLm5zICsgInRoZW1lPSciICsgby5vdmVybGF5VGhlbWUgKyAiJyIgKSA6ICIiOwoJCWRpdmlkZXJUaGVtZUF0dHIgPSAoIG8uZGl2aWRlclRoZW1lICYmIGlzTXVsdGlwbGUgKSA/ICggIiBkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJkaXZpZGVyLXRoZW1lPSciICsgby5kaXZpZGVyVGhlbWUgKyAiJyIgKSA6ICIiOwoJCW1lbnVQYWdlID0gJCggIjxkaXYgZGF0YS0iICsgJC5tb2JpbGUubnMgKyAicm9sZT0nZGlhbG9nJyBjbGFzcz0ndWktc2VsZWN0bWVudScgaWQ9JyIgKyBkaWFsb2dJZCArICInIiArIHRoZW1lQXR0ciArIG92ZXJsYXlUaGVtZUF0dHIgKyAiPiIgKwoJCQkiPGRpdiBkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyb2xlPSdoZWFkZXInPiIgKwoJCQkiPGRpdiBjbGFzcz0ndWktdGl0bGUnPiIgKyBsYWJlbC5nZXRFbmNvZGVkVGV4dCgpICsgIjwvZGl2PiIrCgkJCSI8L2Rpdj4iKwoJCQkiPGRpdiBkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyb2xlPSdjb250ZW50Jz48L2Rpdj4iKwoJCQkiPC9kaXY+IiApOwoJCWxpc3Rib3ggPSAkKCAiPGRpdiBpZD0nIiArIHBvcHVwSWQgKyAiJyBjbGFzcz0ndWktc2VsZWN0bWVudSc+IiApLmluc2VydEFmdGVyKCB0aGlzLnNlbGVjdCApLnBvcHVwKHsgdGhlbWU6IG8ub3ZlcmxheVRoZW1lIH0pOwoJCWxpc3QgPSAkKCAiPHVsIGNsYXNzPSd1aS1zZWxlY3RtZW51LWxpc3QnIGlkPSciICsgbWVudUlkICsgIicgcm9sZT0nbGlzdGJveCcgYXJpYS1sYWJlbGxlZGJ5PSciICsgdGhpcy5idXR0b25JZCArICInIiArIHRoZW1lQXR0ciArIGRpdmlkZXJUaGVtZUF0dHIgKyAiPiIgKS5hcHBlbmRUbyggbGlzdGJveCApOwoJCWhlYWRlciA9ICQoICI8ZGl2IGNsYXNzPSd1aS1oZWFkZXIgdWktYmFyLSIgKyAoIG8udGhlbWUgPyBvLnRoZW1lIDogImluaGVyaXQiICkgKyAiJz4iICkucHJlcGVuZFRvKCBsaXN0Ym94ICk7CgkJaGVhZGVyVGl0bGUgPSAkKCAiPGgxIGNsYXNzPSd1aS10aXRsZSc+IiApLmFwcGVuZFRvKCBoZWFkZXIgKTsKCgkJaWYgKCB0aGlzLmlzTXVsdGlwbGUgKSB7CgkJCWhlYWRlckNsb3NlID0gJCggIjxhPiIsIHsKCQkJCSJyb2xlIjogImJ1dHRvbiIsCgkJCQkidGV4dCI6IG8uY2xvc2VUZXh0LAoJCQkJImhyZWYiOiAiIyIsCgkJCQkiY2xhc3MiOiAidWktYnRuIHVpLWNvcm5lci1hbGwgdWktYnRuLWxlZnQgdWktYnRuLWljb24tbm90ZXh0IHVpLWljb24tZGVsZXRlIgoJCQl9KS5hcHBlbmRUbyggaGVhZGVyICk7CgkJfQoKCQkkLmV4dGVuZCggdGhpcywgewoJCQlzZWxlY3RJZDogc2VsZWN0SWQsCgkJCW1lbnVJZDogbWVudUlkLAoJCQlwb3B1cElkOiBwb3B1cElkLAoJCQlkaWFsb2dJZDogZGlhbG9nSWQsCgkJCXRoaXNQYWdlOiB0aGlzUGFnZSwKCQkJbWVudVBhZ2U6IG1lbnVQYWdlLAoJCQlsYWJlbDogbGFiZWwsCgkJCWlzTXVsdGlwbGU6IGlzTXVsdGlwbGUsCgkJCXRoZW1lOiBvLnRoZW1lLAoJCQlsaXN0Ym94OiBsaXN0Ym94LAoJCQlsaXN0OiBsaXN0LAoJCQloZWFkZXI6IGhlYWRlciwKCQkJaGVhZGVyVGl0bGU6IGhlYWRlclRpdGxlLAoJCQloZWFkZXJDbG9zZTogaGVhZGVyQ2xvc2UsCgkJCW1lbnVQYWdlQ29udGVudDogbWVudVBhZ2VDb250ZW50LAoJCQltZW51UGFnZUNsb3NlOiBtZW51UGFnZUNsb3NlLAoJCQlwbGFjZWhvbGRlcjogIiIKCQl9KTsKCgkJLy8gQ3JlYXRlIGxpc3QgZnJvbSBzZWxlY3QsIHVwZGF0ZSBzdGF0ZQoJCXRoaXMucmVmcmVzaCgpOwoKCQlpZiAoIHRoaXMuX29yaWdUYWJJbmRleCA9PT0gdW5kZWZpbmVkICkgewoJCQkvLyBNYXAgdW5kZWZpbmVkIHRvIGZhbHNlLCBiZWNhdXNlIHRoaXMuX29yaWdUYWJJbmRleCA9PT0gdW5kZWZpbmVkCgkJCS8vIGluZGljYXRlcyB0aGF0IHdlIGhhdmUgbm90IHlldCBjaGVja2VkIHdoZXRoZXIgdGhlIHNlbGVjdCBoYXMKCQkJLy8gb3JpZ2luYWxseSBoYWQgYSB0YWJpbmRleCBhdHRyaWJ1dGUsIHdoZXJlYXMgZmFsc2UgaW5kaWNhdGVzIHRoYXQKCQkJLy8gd2UgaGF2ZSBjaGVja2VkIHRoZSBzZWxlY3QgZm9yIHN1Y2ggYW4gYXR0cmlidXRlLCBhbmQgaGF2ZSBmb3VuZAoJCQkvLyBub25lIHByZXNlbnQuCgkJCXRoaXMuX29yaWdUYWJJbmRleCA9ICggdGhpcy5zZWxlY3RbIDAgXS5nZXRBdHRyaWJ1dGUoICJ0YWJpbmRleCIgKSA9PT0gbnVsbCApID8gZmFsc2UgOiB0aGlzLnNlbGVjdC5hdHRyKCAidGFiaW5kZXgiICk7CgkJfQoJCXRoaXMuc2VsZWN0LmF0dHIoICJ0YWJpbmRleCIsICItMSIgKTsKCQl0aGlzLl9vbiggdGhpcy5zZWxlY3QsIHsgZm9jdXMgOiAiX2hhbmRsZVNlbGVjdEZvY3VzIiB9ICk7CgoJCS8vIEJ1dHRvbiBldmVudHMKCQl0aGlzLl9vbiggdGhpcy5idXR0b24sIHsKCQkJdmNsaWNrOiAiX2hhbmRsZUJ1dHRvblZjbGlja0tleWRvd24iCgkJfSk7CgoJCS8vIEV2ZW50cyBmb3IgbGlzdCBpdGVtcwoJCXRoaXMubGlzdC5hdHRyKCAicm9sZSIsICJsaXN0Ym94IiApOwoJCXRoaXMuX29uKCB0aGlzLmxpc3QsIHsKCQkJZm9jdXNpbiA6ICJfaGFuZGxlTGlzdEZvY3VzIiwKCQkJZm9jdXNvdXQgOiAiX2hhbmRsZUxpc3RGb2N1cyIsCgkJCWtleWRvd246ICJfaGFuZGxlTGlzdEtleWRvd24iCgkJfSk7CgkJdGhpcy5saXN0CgkJCS5kZWxlZ2F0ZSggImxpOm5vdCgudWktZGlzYWJsZWQsLnVpLXN0YXRlLWRpc2FibGVkLC51aS1saS1kaXZpZGVyKSIsICJjbGljayIsIGZ1bmN0aW9uKCBldmVudCApIHsKCgkJCQkvLyBpbmRleCBvZiBvcHRpb24gdGFnIHRvIGJlIHNlbGVjdGVkCgkJCQl2YXIgb2xkSW5kZXggPSBzZWxmLnNlbGVjdFsgMCBdLnNlbGVjdGVkSW5kZXgsCgkJCQkJbmV3SW5kZXggPSAkLm1vYmlsZS5nZXRBdHRyaWJ1dGUoIHRoaXMsICJvcHRpb24taW5kZXgiICksCgkJCQkJb3B0aW9uID0gc2VsZi5fc2VsZWN0T3B0aW9ucygpLmVxKCBuZXdJbmRleCApWyAwIF07CgoJCQkJLy8gdG9nZ2xlIHNlbGVjdGVkIHN0YXR1cyBvbiB0aGUgdGFnIGZvciBtdWx0aSBzZWxlY3RzCgkJCQlvcHRpb24uc2VsZWN0ZWQgPSBzZWxmLmlzTXVsdGlwbGUgPyAhb3B0aW9uLnNlbGVjdGVkIDogdHJ1ZTsKCgkJCQkvLyB0b2dnbGUgY2hlY2tib3ggY2xhc3MgZm9yIG11bHRpcGxlIHNlbGVjdHMKCQkJCWlmICggc2VsZi5pc011bHRpcGxlICkgewoJCQkJCSQoIHRoaXMgKS5maW5kKCAiYSIgKQoJCQkJCQkudG9nZ2xlQ2xhc3MoICJ1aS1jaGVja2JveC1vbiIsIG9wdGlvbi5zZWxlY3RlZCApCgkJCQkJCS50b2dnbGVDbGFzcyggInVpLWNoZWNrYm94LW9mZiIsICFvcHRpb24uc2VsZWN0ZWQgKTsKCQkJCX0KCgkJCQkvLyB0cmlnZ2VyIGNoYW5nZSBpZiB2YWx1ZSBjaGFuZ2VkCgkJCQlpZiAoIHNlbGYuaXNNdWx0aXBsZSB8fCBvbGRJbmRleCAhPT0gbmV3SW5kZXggKSB7CgkJCQkJc2VsZi5zZWxlY3QudHJpZ2dlciggImNoYW5nZSIgKTsKCQkJCX0KCgkJCQkvLyBoaWRlIGN1c3RvbSBzZWxlY3QgZm9yIHNpbmdsZSBzZWxlY3RzIG9ubHkgLSBvdGhlcndpc2UgZm9jdXMgY2xpY2tlZCBpdGVtCgkJCQkvLyBXZSBuZWVkIHRvIGdyYWIgdGhlIGNsaWNrZWQgaXRlbSB0aGUgaGFyZCB3YXksIGJlY2F1c2UgdGhlIGxpc3QgbWF5IGhhdmUgYmVlbiByZWJ1aWx0CgkJCQlpZiAoIHNlbGYuaXNNdWx0aXBsZSApIHsKCQkJCQlzZWxmLmxpc3QuZmluZCggImxpOm5vdCgudWktbGktZGl2aWRlcikiICkuZXEoIG5ld0luZGV4ICkKCQkJCQkJLmZpbmQoICJhIiApLmZpcnN0KCkuZm9jdXMoKTsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCXNlbGYuY2xvc2UoKTsKCQkJCX0KCgkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQl9KTsKCgkJLy8gYnV0dG9uIHJlZm9jdXMgZW5zdXJlcyBwcm9wZXIgaGVpZ2h0IGNhbGN1bGF0aW9uCgkJLy8gYnkgcmVtb3ZpbmcgdGhlIGlubGluZSBzdHlsZSBhbmQgZW5zdXJpbmcgcGFnZSBpbmNsdXNpb24KCQl0aGlzLl9vbiggdGhpcy5tZW51UGFnZSwgeyBwYWdlaGlkZTogIl9oYW5kbGVNZW51UGFnZUhpZGUiIH0gKTsKCgkJLy8gRXZlbnRzIG9uIHRoZSBwb3B1cAoJCXRoaXMuX29uKCB0aGlzLmxpc3Rib3gsIHsgcG9wdXBhZnRlcmNsb3NlOiAiY2xvc2UiIH0gKTsKCgkJLy8gQ2xvc2UgYnV0dG9uIG9uIHNtYWxsIG92ZXJsYXlzCgkJaWYgKCB0aGlzLmlzTXVsdGlwbGUgKSB7CgkJCXRoaXMuX29uKCB0aGlzLmhlYWRlckNsb3NlLCB7IGNsaWNrOiAiX2hhbmRsZUhlYWRlckNsb3NlQ2xpY2siIH0gKTsKCQl9CgoJCXJldHVybiB0aGlzOwoJfSwKCglfaXNSZWJ1aWxkUmVxdWlyZWQ6IGZ1bmN0aW9uKCkgewoJCXZhciBsaXN0ID0gdGhpcy5saXN0LmZpbmQoICJsaSIgKSwKCQkJb3B0aW9ucyA9IHRoaXMuX3NlbGVjdE9wdGlvbnMoKS5ub3QoICIudWktc2NyZWVuLWhpZGRlbiIgKTsKCgkJLy8gVE9ETyBleGNlZWRpbmdseSBuYWl2ZSBtZXRob2QgdG8gZGV0ZXJtaW5lIGRpZmZlcmVuY2UKCQkvLyBpZ25vcmVzIHZhbHVlIGNoYW5nZXMgZXRjIGluIGZhdm9yIG9mIGEgZm9yY2VkUmVidWlsZAoJCS8vIGZyb20gdGhlIHVzZXIgaW4gdGhlIHJlZnJlc2ggbWV0aG9kCgkJcmV0dXJuIG9wdGlvbnMudGV4dCgpICE9PSBsaXN0LnRleHQoKTsKCX0sCgoJc2VsZWN0ZWQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLl9zZWxlY3RPcHRpb25zKCkuZmlsdGVyKCAiOnNlbGVjdGVkOm5vdCggOmpxbURhdGEocGxhY2Vob2xkZXI9J3RydWUnKSApIiApOwoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbiggZm9yY2UgKSB7CgkJdmFyIHNlbGYsIGluZGljZXM7CgoJCWlmICggdGhpcy5vcHRpb25zLm5hdGl2ZU1lbnUgKSB7CgkJCXJldHVybiB0aGlzLl9zdXBlciggZm9yY2UgKTsKCQl9CgoJCXNlbGYgPSB0aGlzOwoJCWlmICggZm9yY2UgfHwgdGhpcy5faXNSZWJ1aWxkUmVxdWlyZWQoKSApIHsKCQkJc2VsZi5fYnVpbGRMaXN0KCk7CgkJfQoKCQlpbmRpY2VzID0gdGhpcy5zZWxlY3RlZEluZGljZXMoKTsKCgkJc2VsZi5zZXRCdXR0b25UZXh0KCk7CgkJc2VsZi5zZXRCdXR0b25Db3VudCgpOwoKCQlzZWxmLmxpc3QuZmluZCggImxpOm5vdCgudWktbGktZGl2aWRlcikiICkKCQkJLmZpbmQoICJhIiApLnJlbW92ZUNsYXNzKCAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyApLmVuZCgpCgkJCS5hdHRyKCAiYXJpYS1zZWxlY3RlZCIsIGZhbHNlICkKCQkJLmVhY2goZnVuY3Rpb24oIGkgKSB7CgoJCQkJaWYgKCAkLmluQXJyYXkoIGksIGluZGljZXMgKSA+IC0xICkgewoJCQkJCXZhciBpdGVtID0gJCggdGhpcyApOwoKCQkJCQkvLyBBcmlhIHNlbGVjdGVkIGF0dHIKCQkJCQlpdGVtLmF0dHIoICJhcmlhLXNlbGVjdGVkIiwgdHJ1ZSApOwoKCQkJCQkvLyBNdWx0aXBsZSBzZWxlY3RzOiBhZGQgdGhlICJvbiIgY2hlY2tib3ggc3RhdGUgdG8gdGhlIGljb24KCQkJCQlpZiAoIHNlbGYuaXNNdWx0aXBsZSApIHsKCQkJCQkJaXRlbS5maW5kKCAiYSIgKS5yZW1vdmVDbGFzcyggInVpLWNoZWNrYm94LW9mZiIgKS5hZGRDbGFzcyggInVpLWNoZWNrYm94LW9uIiApOwoJCQkJCX0gZWxzZSB7CgkJCQkJCWlmICggaXRlbS5oYXNDbGFzcyggInVpLXNjcmVlbi1oaWRkZW4iICkgKSB7CgkJCQkJCQlpdGVtLm5leHQoKS5maW5kKCAiYSIgKS5hZGRDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCWl0ZW0uZmluZCggImEiICkuYWRkQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0pOwoJfSwKCgljbG9zZTogZnVuY3Rpb24oKSB7CgkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgIXRoaXMuaXNPcGVuICkgewoJCQlyZXR1cm47CgkJfQoKCQl2YXIgc2VsZiA9IHRoaXM7CgoJCWlmICggc2VsZi5tZW51VHlwZSA9PT0gInBhZ2UiICkgewoJCQlzZWxmLm1lbnVQYWdlLmRpYWxvZyggImNsb3NlIiApOwoJCQlzZWxmLmxpc3QuYXBwZW5kVG8oIHNlbGYubGlzdGJveCApOwoJCX0gZWxzZSB7CgkJCXNlbGYubGlzdGJveC5wb3B1cCggImNsb3NlIiApOwoJCX0KCgkJc2VsZi5fZm9jdXNCdXR0b24oKTsKCQkvLyBhbGxvdyB0aGUgZGlhbG9nIHRvIGJlIGNsb3NlZCBhZ2FpbgoJCXNlbGYuaXNPcGVuID0gZmFsc2U7Cgl9LAoKCW9wZW46IGZ1bmN0aW9uKCkgewoJCXRoaXMuYnV0dG9uLmNsaWNrKCk7Cgl9LAoKCV9mb2N1c01lbnVJdGVtOiBmdW5jdGlvbigpIHsKCQl2YXIgc2VsZWN0b3IgPSB0aGlzLmxpc3QuZmluZCggImEuIiArICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJaWYgKCBzZWxlY3Rvci5sZW5ndGggPT09IDAgKSB7CgkJCXNlbGVjdG9yID0gdGhpcy5saXN0LmZpbmQoICJsaTpub3QoIiArIHVuZm9jdXNhYmxlSXRlbVNlbGVjdG9yICsgIikgYS51aS1idG4iICk7CgkJfQoJCXNlbGVjdG9yLmZpcnN0KCkuZm9jdXMoKTsKCX0sCgoJX2RlY2lkZUZvcm1hdDogZnVuY3Rpb24oKSB7CgkJdmFyIHNlbGYgPSB0aGlzLAoJCQkkd2luZG93ID0gdGhpcy53aW5kb3csCgkJCXNlbGZMaXN0UGFyZW50ID0gc2VsZi5saXN0LnBhcmVudCgpLAoJCQltZW51SGVpZ2h0ID0gc2VsZkxpc3RQYXJlbnQub3V0ZXJIZWlnaHQoKSwKCQkJc2Nyb2xsVG9wID0gJHdpbmRvdy5zY3JvbGxUb3AoKSwKCQkJYnRuT2Zmc2V0ID0gc2VsZi5idXR0b24ub2Zmc2V0KCkudG9wLAoJCQlzY3JlZW5IZWlnaHQgPSAkd2luZG93LmhlaWdodCgpOwoKCQlpZiAoIG1lbnVIZWlnaHQgPiBzY3JlZW5IZWlnaHQgLSA4MCB8fCAhJC5zdXBwb3J0LnNjcm9sbFRvcCApIHsKCgkJCXNlbGYubWVudVBhZ2UuYXBwZW5kVG8oICQubW9iaWxlLnBhZ2VDb250YWluZXIgKS5wYWdlKCk7CgkJCXNlbGYubWVudVBhZ2VDb250ZW50ID0gc2VsZi5tZW51UGFnZS5maW5kKCAiLnVpLWNvbnRlbnQiICk7CgkJCXNlbGYubWVudVBhZ2VDbG9zZSA9IHNlbGYubWVudVBhZ2UuZmluZCggIi51aS1oZWFkZXIgYSIgKTsKCgkJCS8vIHByZXZlbnQgdGhlIHBhcmVudCBwYWdlIGZyb20gYmVpbmcgcmVtb3ZlZCBmcm9tIHRoZSBET00sCgkJCS8vIG90aGVyd2lzZSB0aGUgcmVzdWx0cyBvZiBzZWxlY3RpbmcgYSBsaXN0IGl0ZW0gaW4gdGhlIGRpYWxvZwoJCQkvLyBmYWxsIGludG8gYSBibGFjayBob2xlCgkJCXNlbGYudGhpc1BhZ2UudW5iaW5kKCAicGFnZWhpZGUucmVtb3ZlIiApOwoKCQkJLy9mb3IgV2ViT1MvT3BlcmEgTWluaSAoc2V0IGxhc3RzY3JvbGwgdXNpbmcgYnV0dG9uIG9mZnNldCkKCQkJaWYgKCBzY3JvbGxUb3AgPT09IDAgJiYgYnRuT2Zmc2V0ID4gc2NyZWVuSGVpZ2h0ICkgewoJCQkJc2VsZi50aGlzUGFnZS5vbmUoICJwYWdlaGlkZSIsIGZ1bmN0aW9uKCkgewoJCQkJCSQoIHRoaXMgKS5qcW1EYXRhKCAibGFzdFNjcm9sbCIsIGJ0bk9mZnNldCApOwoJCQkJfSk7CgkJCX0KCgkJCXNlbGYubWVudVBhZ2Uub25lKCB7CgkJCQlwYWdlc2hvdzogJC5wcm94eSggdGhpcywgIl9mb2N1c01lbnVJdGVtIiApLAoJCQkJcGFnZWhpZGU6ICQucHJveHkoIHRoaXMsICJjbG9zZSIgKQoJCQl9KTsKCgkJCXNlbGYubWVudVR5cGUgPSAicGFnZSI7CgkJCXNlbGYubWVudVBhZ2VDb250ZW50LmFwcGVuZCggc2VsZi5saXN0ICk7CgkJCXNlbGYubWVudVBhZ2UuZmluZCggImRpdiAudWktdGl0bGUiICkudGV4dCggc2VsZi5sYWJlbC50ZXh0KCkgKTsKCQl9IGVsc2UgewoJCQlzZWxmLm1lbnVUeXBlID0gIm92ZXJsYXkiOwoKCQkJc2VsZi5saXN0Ym94Lm9uZSggeyBwb3B1cGFmdGVyb3BlbjogJC5wcm94eSggdGhpcywgIl9mb2N1c01lbnVJdGVtIiApIH0gKTsKCQl9Cgl9LAoKCV9idWlsZExpc3Q6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpcywKCQkJbyA9IHRoaXMub3B0aW9ucywKCQkJcGxhY2Vob2xkZXIgPSB0aGlzLnBsYWNlaG9sZGVyLAoJCQluZWVkUGxhY2Vob2xkZXIgPSB0cnVlLAoJCQlkYXRhSWNvbiA9ICJmYWxzZSIsCgkJCSRvcHRpb25zLCBudW1PcHRpb25zLCBzZWxlY3QsCgkJCWRhdGFQcmVmaXggPSAiZGF0YS0iICsgJC5tb2JpbGUubnMsCgkJCWRhdGFJbmRleEF0dHIgPSBkYXRhUHJlZml4ICsgIm9wdGlvbi1pbmRleCIsCgkJCWRhdGFJY29uQXR0ciA9IGRhdGFQcmVmaXggKyAiaWNvbiIsCgkJCWRhdGFSb2xlQXR0ciA9IGRhdGFQcmVmaXggKyAicm9sZSIsCgkJCWRhdGFQbGFjZWhvbGRlckF0dHIgPSBkYXRhUHJlZml4ICsgInBsYWNlaG9sZGVyIiwKCQkJZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksCgkJCWlzUGxhY2Vob2xkZXJJdGVtID0gZmFsc2UsCgkJCW9wdEdyb3VwLAoJCQlpLAoJCQlvcHRpb24sICRvcHRpb24sIHBhcmVudCwgdGV4dCwgYW5jaG9yLCBjbGFzc2VzLAoJCQlvcHRMYWJlbCwgZGl2aWRlciwgaXRlbTsKCgkJc2VsZi5saXN0LmVtcHR5KCkuZmlsdGVyKCAiLnVpLWxpc3R2aWV3IiApLmxpc3R2aWV3KCAiZGVzdHJveSIgKTsKCQkkb3B0aW9ucyA9IHRoaXMuX3NlbGVjdE9wdGlvbnMoKTsKCQludW1PcHRpb25zID0gJG9wdGlvbnMubGVuZ3RoOwoJCXNlbGVjdCA9IHRoaXMuc2VsZWN0WyAwIF07CgoJCWZvciAoIGkgPSAwOyBpIDwgbnVtT3B0aW9ucztpKyssIGlzUGxhY2Vob2xkZXJJdGVtID0gZmFsc2UpIHsKCQkJb3B0aW9uID0gJG9wdGlvbnNbaV07CgkJCSRvcHRpb24gPSAkKCBvcHRpb24gKTsKCgkJCS8vIERvIG5vdCBjcmVhdGUgb3B0aW9ucyBiYXNlZCBvbiB1aS1zY3JlZW4taGlkZGVuIHNlbGVjdCBvcHRpb25zCgkJCWlmICggJG9wdGlvbi5oYXNDbGFzcyggInVpLXNjcmVlbi1oaWRkZW4iICkgKSB7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJcGFyZW50ID0gb3B0aW9uLnBhcmVudE5vZGU7CgkJCXRleHQgPSAkb3B0aW9uLnRleHQoKTsKCQkJYW5jaG9yICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJhIiApOwoJCQljbGFzc2VzID0gW107CgoJCQlhbmNob3Iuc2V0QXR0cmlidXRlKCAiaHJlZiIsICIjIiApOwoJCQlhbmNob3IuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCB0ZXh0ICkgKTsKCgkJCS8vIEFyZSB3ZSBpbnNpZGUgYW4gb3B0Z3JvdXA/CgkJCWlmICggcGFyZW50ICE9PSBzZWxlY3QgJiYgcGFyZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJvcHRncm91cCIgKSB7CgkJCQlvcHRMYWJlbCA9IHBhcmVudC5nZXRBdHRyaWJ1dGUoICJsYWJlbCIgKTsKCQkJCWlmICggb3B0TGFiZWwgIT09IG9wdEdyb3VwICkgewoJCQkJCWRpdmlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAibGkiICk7CgkJCQkJZGl2aWRlci5zZXRBdHRyaWJ1dGUoIGRhdGFSb2xlQXR0ciwgImxpc3QtZGl2aWRlciIgKTsKCQkJCQlkaXZpZGVyLnNldEF0dHJpYnV0ZSggInJvbGUiLCAib3B0aW9uIiApOwoJCQkJCWRpdmlkZXIuc2V0QXR0cmlidXRlKCAidGFiaW5kZXgiLCAiLTEiICk7CgkJCQkJZGl2aWRlci5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIG9wdExhYmVsICkgKTsKCQkJCQlmcmFnbWVudC5hcHBlbmRDaGlsZCggZGl2aWRlciApOwoJCQkJCW9wdEdyb3VwID0gb3B0TGFiZWw7CgkJCQl9CgkJCX0KCgkJCWlmICggbmVlZFBsYWNlaG9sZGVyICYmICggIW9wdGlvbi5nZXRBdHRyaWJ1dGUoICJ2YWx1ZSIgKSB8fCB0ZXh0Lmxlbmd0aCA9PT0gMCB8fCAkb3B0aW9uLmpxbURhdGEoICJwbGFjZWhvbGRlciIgKSApICkgewoJCQkJbmVlZFBsYWNlaG9sZGVyID0gZmFsc2U7CgkJCQlpc1BsYWNlaG9sZGVySXRlbSA9IHRydWU7CgoJCQkJLy8gSWYgd2UgaGF2ZSBpZGVudGlmaWVkIGEgcGxhY2Vob2xkZXIsIHJlY29yZCB0aGUgZmFjdCB0aGF0IGl0IHdhcwoJCQkJLy8gdXMgd2hvIGhhdmUgYWRkZWQgdGhlIHBsYWNlaG9sZGVyIHRvIHRoZSBvcHRpb24gYW5kIG1hcmsgaXQKCQkJCS8vIHJldHJvYWN0aXZlbHkgaW4gdGhlIHNlbGVjdCBhcyB3ZWxsCgkJCQlpZiAoIG51bGwgPT09IG9wdGlvbi5nZXRBdHRyaWJ1dGUoIGRhdGFQbGFjZWhvbGRlckF0dHIgKSApIHsKCQkJCQl0aGlzLl9yZW1vdmVQbGFjZWhvbGRlckF0dHIgPSB0cnVlOwoJCQkJfQoJCQkJb3B0aW9uLnNldEF0dHJpYnV0ZSggZGF0YVBsYWNlaG9sZGVyQXR0ciwgdHJ1ZSApOwoJCQkJaWYgKCBvLmhpZGVQbGFjZWhvbGRlck1lbnVJdGVtcyApIHsKCQkJCQljbGFzc2VzLnB1c2goICJ1aS1zY3JlZW4taGlkZGVuIiApOwoJCQkJfQoJCQkJaWYgKCBwbGFjZWhvbGRlciAhPT0gdGV4dCApIHsKCQkJCQlwbGFjZWhvbGRlciA9IHNlbGYucGxhY2Vob2xkZXIgPSB0ZXh0OwoJCQkJfQoJCQl9CgoJCQlpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImxpIiApOwoJCQlpZiAoIG9wdGlvbi5kaXNhYmxlZCApIHsKCQkJCWNsYXNzZXMucHVzaCggInVpLXN0YXRlLWRpc2FibGVkIiApOwoJCQkJaXRlbS5zZXRBdHRyaWJ1dGUoICJhcmlhLWRpc2FibGVkIiwgdHJ1ZSApOwoJCQl9CgkJCWl0ZW0uc2V0QXR0cmlidXRlKCBkYXRhSW5kZXhBdHRyLCBpICk7CgkJCWl0ZW0uc2V0QXR0cmlidXRlKCBkYXRhSWNvbkF0dHIsIGRhdGFJY29uICk7CgkJCWlmICggaXNQbGFjZWhvbGRlckl0ZW0gKSB7CgkJCQlpdGVtLnNldEF0dHJpYnV0ZSggZGF0YVBsYWNlaG9sZGVyQXR0ciwgdHJ1ZSApOwoJCQl9CgkJCWl0ZW0uY2xhc3NOYW1lID0gY2xhc3Nlcy5qb2luKCAiICIgKTsKCQkJaXRlbS5zZXRBdHRyaWJ1dGUoICJyb2xlIiwgIm9wdGlvbiIgKTsKCQkJYW5jaG9yLnNldEF0dHJpYnV0ZSggInRhYmluZGV4IiwgIi0xIiApOwoJCQlpZiAoIHRoaXMuaXNNdWx0aXBsZSApIHsKCQkJCSQoIGFuY2hvciApLmFkZENsYXNzKCAidWktYnRuIHVpLWNoZWNrYm94LW9mZiB1aS1idG4taWNvbi1yaWdodCIgKTsKCQkJfQoKCQkJaXRlbS5hcHBlbmRDaGlsZCggYW5jaG9yICk7CgkJCWZyYWdtZW50LmFwcGVuZENoaWxkKCBpdGVtICk7CgkJfQoKCQlzZWxmLmxpc3RbMF0uYXBwZW5kQ2hpbGQoIGZyYWdtZW50ICk7CgoJCS8vIEhpZGUgaGVhZGVyIGlmIGl0J3Mgbm90IGEgbXVsdGlzZWxlY3QgYW5kIHRoZXJlJ3Mgbm8gcGxhY2Vob2xkZXIKCQlpZiAoICF0aGlzLmlzTXVsdGlwbGUgJiYgIXBsYWNlaG9sZGVyLmxlbmd0aCApIHsKCQkJdGhpcy5oZWFkZXIuYWRkQ2xhc3MoICJ1aS1zY3JlZW4taGlkZGVuIiApOwoJCX0gZWxzZSB7CgkJCXRoaXMuaGVhZGVyVGl0bGUudGV4dCggdGhpcy5wbGFjZWhvbGRlciApOwoJCX0KCgkJLy8gTm93IHBvcHVsYXRlZCwgY3JlYXRlIGxpc3R2aWV3CgkJc2VsZi5saXN0Lmxpc3R2aWV3KCk7Cgl9LAoKCV9idXR0b246IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLm9wdGlvbnMubmF0aXZlTWVudSA/CgkJCXRoaXMuX3N1cGVyKCkgOgoJCQkkKCAiPGE+IiwgewoJCQkJImhyZWYiOiAiIyIsCgkJCQkicm9sZSI6ICJidXR0b24iLAoJCQkJLy8gVE9ETyB2YWx1ZSBpcyB1bmRlZmluZWQgYXQgY3JlYXRpb24KCQkJCSJpZCI6IHRoaXMuYnV0dG9uSWQsCgkJCQkiYXJpYS1oYXNwb3B1cCI6ICJ0cnVlIiwKCgkJCQkvLyBUT0RPIHZhbHVlIGlzIHVuZGVmaW5lZCBhdCBjcmVhdGlvbgoJCQkJImFyaWEtb3ducyI6IHRoaXMubWVudUlkCgkJCX0pOwoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgoJCWlmICggIXRoaXMub3B0aW9ucy5uYXRpdmVNZW51ICkgewoJCQl0aGlzLmNsb3NlKCk7CgoJCQkvLyBSZXN0b3JlIHRoZSB0YWJpbmRleCBhdHRyaWJ1dGUgdG8gaXRzIG9yaWdpbmFsIHZhbHVlCgkJCWlmICggdGhpcy5fb3JpZ1RhYkluZGV4ICE9PSB1bmRlZmluZWQgKSB7CgkJCQlpZiAoIHRoaXMuX29yaWdUYWJJbmRleCAhPT0gZmFsc2UgKSB7CgkJCQkJdGhpcy5zZWxlY3QuYXR0ciggInRhYmluZGV4IiwgdGhpcy5fb3JpZ1RhYkluZGV4ICk7CgkJCQl9IGVsc2UgewoJCQkJCXRoaXMuc2VsZWN0LnJlbW92ZUF0dHIoICJ0YWJpbmRleCIgKTsKCQkJCX0KCQkJfQoKCQkJLy8gUmVtb3ZlIHRoZSBwbGFjZWhvbGRlciBhdHRyaWJ1dGUgaWYgd2Ugd2VyZSB0aGUgb25lcyB0byBhZGQgaXQKCQkJaWYgKCB0aGlzLl9yZW1vdmVQbGFjZWhvbGRlckF0dHIgKSB7CgkJCQl0aGlzLl9zZWxlY3RPcHRpb25zKCkucmVtb3ZlQXR0ciggImRhdGEtIiArICQubW9iaWxlLm5zICsgInBsYWNlaG9sZGVyIiApOwoJCQl9CgoJCQkvLyBSZW1vdmUgdGhlIHBvcHVwCgkJCXRoaXMubGlzdGJveC5yZW1vdmUoKTsKCgkJCS8vIFJlbW92ZSB0aGUgZGlhbG9nCgkJCXRoaXMubWVudVBhZ2UucmVtb3ZlKCk7CgkJfQoKCQkvLyBDaGFpbiB1cAoJCXRoaXMuX3N1cGVyKCk7Cgl9Cn0pOwoKfSkoIGpRdWVyeSApOwoKCi8vIGJ1dHRvbk1hcmt1cCBpcyBkZXByZWNhdGVkIGFzIG9mIDEuNC4wIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gMS41LjAuCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCgovLyBHZW5lcmFsIHBvbGljeTogRG8gbm90IGFjY2VzcyBkYXRhLSogYXR0cmlidXRlcyBleGNlcHQgZHVyaW5nIGVuaGFuY2VtZW50LgovLyBJbiBhbGwgb3RoZXIgY2FzZXMgd2UgZGV0ZXJtaW5lIHRoZSBzdGF0ZSBvZiB0aGUgYnV0dG9uIGV4Y2x1c2l2ZWx5IGZyb20gaXRzCi8vIGNsYXNzTmFtZS4gVGhhdCdzIHdoeSBvcHRpb25zVG9DbGFzc2VzIGV4cGVjdHMgYSBmdWxsIGNvbXBsZW1lbnQgb2Ygb3B0aW9ucywKLy8gYW5kIHRoZSBqUXVlcnkgcGx1Z2luIGNvbXBsZXRlcyB0aGUgc2V0IG9mIG9wdGlvbnMgZnJvbSB0aGUgZGVmYXVsdCB2YWx1ZXMuCgovLyBNYXAgY2xhc3NlcyB0byBidXR0b25NYXJrdXAgYm9vbGVhbiBvcHRpb25zIC0gdXNlZCBpbiBjbGFzc05hbWVUb09wdGlvbnMoKQp2YXIgcmV2ZXJzZUJvb2xPcHRpb25NYXAgPSB7CgkJInVpLXNoYWRvdyIgOiAic2hhZG93IiwKCQkidWktY29ybmVyLWFsbCIgOiAiY29ybmVycyIsCgkJInVpLWJ0bi1pbmxpbmUiIDogImlubGluZSIsCgkJInVpLXNoYWRvdy1pY29uIiA6ICJpY29uc2hhZG93IiwgLyogVE9ETzogUmVtb3ZlIGluIDEuNSAqLwoJCSJ1aS1taW5pIiA6ICJtaW5pIgoJfSwKCWdldEF0dHJGaXhlZCA9IGZ1bmN0aW9uKCkgewoJCXZhciByZXQgPSAkLm1vYmlsZS5nZXRBdHRyaWJ1dGUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoKCQlyZXR1cm4gKCByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldCApOwoJfSwKCWNhcGl0YWxMZXR0ZXJzUkUgPSAvW0EtWl0vZzsKCi8vIG9wdGlvbnNUb0NsYXNzZXM6Ci8vIEBvcHRpb25zOiBBIGNvbXBsZXRlIHNldCBvZiBvcHRpb25zIHRvIGNvbnZlcnQgdG8gY2xhc3MgbmFtZXMuCi8vIEBleGlzdGluZ0NsYXNzZXM6IGV4dHJhIGNsYXNzZXMgdG8gYWRkIHRvIHRoZSByZXN1bHQKLy8KLy8gQ29udmVydHMgQG9wdGlvbnMgdG8gYnV0dG9uTWFya3VwIGNsYXNzZXMgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBhcyBhbiBhcnJheQovLyB0aGF0IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYW4gZWxlbWVudCdzIGNsYXNzTmFtZSB3aXRoIC5qb2luKCAiICIgKS4gQWxsCi8vIHBvc3NpYmxlIG9wdGlvbnMgbXVzdCBiZSBzZXQgaW5zaWRlIEBvcHRpb25zLiBVc2UgJC5mbi5idXR0b25NYXJrdXAuZGVmYXVsdHMKLy8gdG8gZ2V0IGEgY29tcGxldGUgc2V0IGFuZCB1c2UgJC5leHRlbmQgdG8gb3ZlcnJpZGUgeW91ciBjaG9pY2Ugb2Ygb3B0aW9ucwovLyBmcm9tIHRoYXQgc2V0LgpmdW5jdGlvbiBvcHRpb25zVG9DbGFzc2VzKCBvcHRpb25zLCBleGlzdGluZ0NsYXNzZXMgKSB7Cgl2YXIgY2xhc3NlcyA9IGV4aXN0aW5nQ2xhc3NlcyA/IGV4aXN0aW5nQ2xhc3NlcyA6IFtdOwoKCS8vIEFkZCBjbGFzc2VzIHRvIHRoZSBhcnJheSAtIGZpcnN0IHVpLWJ0bgoJY2xhc3Nlcy5wdXNoKCAidWktYnRuIiApOwoKCS8vIElmIHRoZXJlIGlzIGEgdGhlbWUKCWlmICggb3B0aW9ucy50aGVtZSApIHsKCQljbGFzc2VzLnB1c2goICJ1aS1idG4tIiArIG9wdGlvbnMudGhlbWUgKTsKCX0KCgkvLyBJZiB0aGVyZSdzIGFuIGljb24sIGFkZCB0aGUgaWNvbi1yZWxhdGVkIGNsYXNzZXMKCWlmICggb3B0aW9ucy5pY29uICkgewoJCWNsYXNzZXMgPSBjbGFzc2VzLmNvbmNhdChbCgkJCSJ1aS1pY29uLSIgKyBvcHRpb25zLmljb24sCgkJCSJ1aS1idG4taWNvbi0iICsgb3B0aW9ucy5pY29ucG9zCgkJXSk7CgkJaWYgKCBvcHRpb25zLmljb25zaGFkb3cgKSB7CgkJCWNsYXNzZXMucHVzaCggInVpLXNoYWRvdy1pY29uIiApOyAvKiBUT0RPOiBSZW1vdmUgaW4gMS41ICovCgkJfQoJfQoKCS8vIEFkZCB0aGUgYXBwcm9wcmlhdGUgY2xhc3MgZm9yIGVhY2ggYm9vbGVhbiBvcHRpb24KCWlmICggb3B0aW9ucy5pbmxpbmUgKSB7CgkJY2xhc3Nlcy5wdXNoKCAidWktYnRuLWlubGluZSIgKTsKCX0KCWlmICggb3B0aW9ucy5zaGFkb3cgKSB7CgkJY2xhc3Nlcy5wdXNoKCAidWktc2hhZG93IiApOwoJfQoJaWYgKCBvcHRpb25zLmNvcm5lcnMgKSB7CgkJY2xhc3Nlcy5wdXNoKCAidWktY29ybmVyLWFsbCIgKTsKCX0KCWlmICggb3B0aW9ucy5taW5pICkgewoJCWNsYXNzZXMucHVzaCggInVpLW1pbmkiICk7Cgl9CgoJLy8gQ3JlYXRlIGEgc3RyaW5nIGZyb20gdGhlIGFycmF5IGFuZCByZXR1cm4gaXQKCXJldHVybiBjbGFzc2VzOwp9CgovLyBjbGFzc05hbWVUb09wdGlvbnM6Ci8vIEBjbGFzc2VzOiBBIHN0cmluZyBjb250YWluaW5nIGEgLmNsYXNzTmFtZS1zdHlsZSBzcGFjZS1zZXBhcmF0ZWQgY2xhc3MgbGlzdAovLwovLyBMb29wcyBvdmVyIEBjbGFzc2VzIGFuZCBjYWxjdWxhdGVzIGFuIG9wdGlvbnMgb2JqZWN0IGJhc2VkIG9uIHRoZQovLyBidXR0b25NYXJrdXAtcmVsYXRlZCBjbGFzc2VzIGl0IGZpbmRzLiBJdCByZWNvcmRzIHVucmVjb2duaXplZCBjbGFzc2VzIGluIGFuCi8vIGFycmF5LgovLwovLyBSZXR1cm5zOiBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGl0ZW1zOgovLwovLyAib3B0aW9ucyI6IGJ1dHRvbk1hcmt1cCBvcHRpb25zIGZvdW5kIHRvIGJlIHByZXNlbnQgYmVjYXVzZSBvZiB0aGUKLy8gcHJlc2VuY2UvYWJzZW5jZSBvZiBjb3JyZXNwb25kaW5nIGNsYXNzZXMKLy8KLy8gInVua25vd25DbGFzc2VzIjogYSBzdHJpbmcgY29udGFpbmluZyBhbGwgdGhlIG5vbi1idXR0b25NYXJrdXAtcmVsYXRlZAovLyBjbGFzc2VzIGZvdW5kIGluIEBjbGFzc2VzCi8vCi8vICJhbHJlYWR5RW5oYW5jZWQiOiBBIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSB1aS1idG4gY2xhc3Mgd2FzIGFtb25nCi8vIHRob3NlIGZvdW5kIHRvIGJlIHByZXNlbnQKZnVuY3Rpb24gY2xhc3NOYW1lVG9PcHRpb25zKCBjbGFzc2VzICkgewoJdmFyIGlkeCwgbWFwLCB1bmtub3duQ2xhc3MsCgkJYWxyZWFkeUVuaGFuY2VkID0gZmFsc2UsCgkJbm9JY29uID0gdHJ1ZSwKCQlvID0gewoJCQlpY29uOiAiIiwKCQkJaW5saW5lOiBmYWxzZSwKCQkJc2hhZG93OiBmYWxzZSwKCQkJY29ybmVyczogZmFsc2UsCgkJCWljb25zaGFkb3c6IGZhbHNlLAoJCQltaW5pOiBmYWxzZQoJCX0sCgkJdW5rbm93bkNsYXNzZXMgPSBbXTsKCgljbGFzc2VzID0gY2xhc3Nlcy5zcGxpdCggIiAiICk7CgoJLy8gTG9vcCBvdmVyIHRoZSBjbGFzc2VzCglmb3IgKCBpZHggPSAwIDsgaWR4IDwgY2xhc3Nlcy5sZW5ndGggOyBpZHgrKyApIHsKCgkJLy8gQXNzdW1lIGl0J3MgYW4gdW5yZWNvZ25pemVkIGNsYXNzCgkJdW5rbm93bkNsYXNzID0gdHJ1ZTsKCgkJLy8gUmVjb2duaXplIGJvb2xlYW4gb3B0aW9ucyBmcm9tIHRoZSBwcmVzZW5jZSBvZiBjbGFzc2VzCgkJbWFwID0gcmV2ZXJzZUJvb2xPcHRpb25NYXBbIGNsYXNzZXNbIGlkeCBdIF07CgkJaWYgKCBtYXAgIT09IHVuZGVmaW5lZCApIHsKCQkJdW5rbm93bkNsYXNzID0gZmFsc2U7CgkJCW9bIG1hcCBdID0gdHJ1ZTsKCgkJLy8gUmVjb2duaXplIHRoZSBwcmVzZW5jZSBvZiBhbiBpY29uIGFuZCBlc3RhYmxpc2ggdGhlIGljb24gcG9zaXRpb24KCQl9IGVsc2UgaWYgKCBjbGFzc2VzWyBpZHggXS5pbmRleE9mKCAidWktYnRuLWljb24tIiApID09PSAwICkgewoJCQl1bmtub3duQ2xhc3MgPSBmYWxzZTsKCQkJbm9JY29uID0gZmFsc2U7CgkJCW8uaWNvbnBvcyA9IGNsYXNzZXNbIGlkeCBdLnN1YnN0cmluZyggMTIgKTsKCgkJLy8gRXN0YWJsaXNoIHdoaWNoIGljb24gaXMgcHJlc2VudAoJCX0gZWxzZSBpZiAoIGNsYXNzZXNbIGlkeCBdLmluZGV4T2YoICJ1aS1pY29uLSIgKSA9PT0gMCApIHsKCQkJdW5rbm93bkNsYXNzID0gZmFsc2U7CgkJCW8uaWNvbiA9IGNsYXNzZXNbIGlkeCBdLnN1YnN0cmluZyggOCApOwoKCQkvLyBFc3RhYmxpc2ggdGhlIHRoZW1lIC0gdGhpcyByZWNvZ25pemVzIG9uZS1sZXR0ZXIgdGhlbWUgc3dhdGNoIG5hbWVzCgkJfSBlbHNlIGlmICggY2xhc3Nlc1sgaWR4IF0uaW5kZXhPZiggInVpLWJ0bi0iICkgPT09IDAgJiYgY2xhc3Nlc1sgaWR4IF0ubGVuZ3RoID09PSA4ICkgewoJCQl1bmtub3duQ2xhc3MgPSBmYWxzZTsKCQkJby50aGVtZSA9IGNsYXNzZXNbIGlkeCBdLnN1YnN0cmluZyggNyApOwoKCQkvLyBSZWNvZ25pemUgdGhhdCB0aGlzIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiBidXR0b25NYXJrdXAtZW5oYW5jZWQKCQl9IGVsc2UgaWYgKCBjbGFzc2VzWyBpZHggXSA9PT0gInVpLWJ0biIgKSB7CgkJCXVua25vd25DbGFzcyA9IGZhbHNlOwoJCQlhbHJlYWR5RW5oYW5jZWQgPSB0cnVlOwoJCX0KCgkJLy8gSWYgdGhpcyBjbGFzcyBoYXMgbm90IGJlZW4gcmVjb2duaXplZCwgYWRkIGl0IHRvIHRoZSBsaXN0CgkJaWYgKCB1bmtub3duQ2xhc3MgKSB7CgkJCXVua25vd25DbGFzc2VzLnB1c2goIGNsYXNzZXNbIGlkeCBdICk7CgkJfQoJfQoKCS8vIElmIGEgInVpLWJ0bi1pY29uLSoiIGljb24gcG9zaXRpb24gY2xhc3MgaXMgYWJzZW50IHRoZXJlIGNhbm5vdCBiZSBhbiBpY29uCglpZiAoIG5vSWNvbiApIHsKCQlvLmljb24gPSAiIjsKCX0KCglyZXR1cm4gewoJCW9wdGlvbnM6IG8sCgkJdW5rbm93bkNsYXNzZXM6IHVua25vd25DbGFzc2VzLAoJCWFscmVhZHlFbmhhbmNlZDogYWxyZWFkeUVuaGFuY2VkCgl9Owp9CgpmdW5jdGlvbiBjYW1lbENhc2UySHlwaGVuYXRlZCggYyApIHsKCXJldHVybiAiLSIgKyBjLnRvTG93ZXJDYXNlKCk7Cn0KCi8vICQuZm4uYnV0dG9uTWFya3VwOgovLyBET006IGdldHMvc2V0cyAuY2xhc3NOYW1lCi8vCi8vIEBvcHRpb25zOiBvcHRpb25zIHRvIGFwcGx5IHRvIHRoZSBlbGVtZW50cyBpbiB0aGUgalF1ZXJ5IG9iamVjdAovLyBAb3ZlcndyaXRlQ2xhc3NlczogYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gaG9ub3VyIGV4aXN0aW5nIGNsYXNzZXMKLy8KLy8gQ2FsY3VsYXRlcyB0aGUgY2xhc3NlcyB0byBhcHBseSB0byB0aGUgZWxlbWVudHMgaW4gdGhlIGpRdWVyeSBvYmplY3QgYmFzZWQgb24KLy8gdGhlIG9wdGlvbnMgcGFzc2VkIGluLiBJZiBAb3ZlcndyaXRlQ2xhc3NlcyBpcyB0cnVlLCBpdCBzZXRzIHRoZSBjbGFzc05hbWUKLy8gcHJvcGVydHkgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBqUXVlcnkgb2JqZWN0IHRvIHRoZSBidXR0b25NYXJrdXAgY2xhc3NlcwovLyBpdCBjYWxjdWxhdGVzIGJhc2VkIG9uIHRoZSBvcHRpb25zIHBhc3NlZCBpbi4KLy8KLy8gSWYgeW91IHdpc2ggdG8gcHJlc2VydmUgYW55IGNsYXNzZXMgdGhhdCBhcmUgYWxyZWFkeSBwcmVzZW50IG9uIHRoZSBlbGVtZW50cwovLyBpbnNpZGUgdGhlIGpRdWVyeSBvYmplY3QsIGluY2x1ZGluZyBidXR0b25NYXJrdXAtcmVsYXRlZCBjbGFzc2VzIHRoYXQgd2VyZQovLyBhZGRlZCBieSBhIHByZXZpb3VzIGNhbGwgdG8gJC5mbi5idXR0b25NYXJrdXAoKSBvciBkdXJpbmcgcGFnZSBlbmhhbmNlbWVudAovLyB0aGVuIHlvdSBzaG91bGQgb21pdCBAb3ZlcndyaXRlQ2xhc3NlcyBvciBzZXQgaXQgdG8gZmFsc2UuCiQuZm4uYnV0dG9uTWFya3VwID0gZnVuY3Rpb24oIG9wdGlvbnMsIG92ZXJ3cml0ZUNsYXNzZXMgKSB7Cgl2YXIgaWR4LCBkYXRhLCBlbCwgcmV0cmlldmVkT3B0aW9ucywgb3B0aW9uS2V5LAoJCWRlZmF1bHRzID0gJC5mbi5idXR0b25NYXJrdXAuZGVmYXVsdHM7CgoJZm9yICggaWR4ID0gMCA7IGlkeCA8IHRoaXMubGVuZ3RoIDsgaWR4KysgKSB7CgkJZWwgPSB0aGlzWyBpZHggXTsKCQlkYXRhID0gb3ZlcndyaXRlQ2xhc3NlcyA/CgoJCQkvLyBBc3N1bWUgdGhpcyBlbGVtZW50IGlzIG5vdCBlbmhhbmNlZCBhbmQgaWdub3JlIGl0cyBjbGFzc2VzCgkJCXsgYWxyZWFkeUVuaGFuY2VkOiBmYWxzZSwgdW5rbm93bkNsYXNzZXM6IFtdIH0gOgoKCQkJLy8gT3RoZXJ3aXNlIGFuYWx5emUgZXhpc3RpbmcgY2xhc3NlcyB0byBlc3RhYmxpc2ggZXhpc3Rpbmcgb3B0aW9ucyBhbmQKCQkJLy8gY2xhc3NlcwoJCQljbGFzc05hbWVUb09wdGlvbnMoIGVsLmNsYXNzTmFtZSApOwoKCQlyZXRyaWV2ZWRPcHRpb25zID0gJC5leHRlbmQoIHt9LAoKCQkJLy8gSWYgdGhlIGVsZW1lbnQgYWxyZWFkeSBoYXMgdGhlIGNsYXNzIHVpLWJ0biwgdGhlbiB3ZSBhc3N1bWUgdGhhdAoJCQkvLyBpdCBoYXMgcGFzc2VkIHRocm91Z2ggYnV0dG9uTWFya3VwIGJlZm9yZSAtIG90aGVyd2lzZSwgdGhlIG9wdGlvbnMKCQkJLy8gcmV0dXJuZWQgYnkgY2xhc3NOYW1lVG9PcHRpb25zIGRvIG5vdCBjb3JyZWN0bHkgcmVmbGVjdCB0aGUgc3RhdGUgb2YKCQkJLy8gdGhlIGVsZW1lbnQKCQkJKCBkYXRhLmFscmVhZHlFbmhhbmNlZCA/IGRhdGEub3B0aW9ucyA6IHt9ICksCgoJCQkvLyBGaW5hbGx5LCBhcHBseSB0aGUgb3B0aW9ucyBwYXNzZWQgaW4KCQkJb3B0aW9ucyApOwoKCQkvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsIG9uIHRoaXMgZWxlbWVudCwgcmV0cmlldmUgcmVtYWluaW5nIG9wdGlvbnMKCQkvLyBmcm9tIHRoZSBkYXRhLWF0dHJpYnV0ZXMKCQlpZiAoICFkYXRhLmFscmVhZHlFbmhhbmNlZCApIHsKCQkJZm9yICggb3B0aW9uS2V5IGluIGRlZmF1bHRzICkgewoJCQkJaWYgKCByZXRyaWV2ZWRPcHRpb25zWyBvcHRpb25LZXkgXSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCXJldHJpZXZlZE9wdGlvbnNbIG9wdGlvbktleSBdID0gZ2V0QXR0ckZpeGVkKCBlbCwKCQkJCQkJb3B0aW9uS2V5LnJlcGxhY2UoIGNhcGl0YWxMZXR0ZXJzUkUsIGNhbWVsQ2FzZTJIeXBoZW5hdGVkICkKCQkJCQkpOwoJCQkJfQoJCQl9CgkJfQoKCQllbC5jbGFzc05hbWUgPSBvcHRpb25zVG9DbGFzc2VzKAoKCQkJLy8gTWVyZ2UgYWxsIHRoZSBvcHRpb25zIGFuZCBhcHBseSB0aGVtIGFzIGNsYXNzZXMKCQkJJC5leHRlbmQoIHt9LAoKCQkJCS8vIFRoZSBkZWZhdWx0cyBmb3JtIHRoZSBiYXNpcwoJCQkJZGVmYXVsdHMsCgoJCQkJLy8gQWRkIHRoZSBjb21wdXRlZCBvcHRpb25zCgkJCQlyZXRyaWV2ZWRPcHRpb25zCgkJCSksCgoJCQkvLyAuLi4gYW5kIHJlLWFwcGx5IGFueSB1bnJlY29nbml6ZWQgY2xhc3NlcyB0aGF0IHdlcmUgZm91bmQKCQkJZGF0YS51bmtub3duQ2xhc3NlcyApLmpvaW4oICIgIiApOwoJCWlmICggZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAiYnV0dG9uIiApIHsKCQkJZWwuc2V0QXR0cmlidXRlKCAicm9sZSIsICJidXR0b24iICk7CgkJfQoJfQoKCXJldHVybiB0aGlzOwp9OwoKLy8gYnV0dG9uTWFya3VwIGRlZmF1bHRzLiBUaGlzIG11c3QgYmUgYSBjb21wbGV0ZSBzZXQsIGkuZS4sIGEgdmFsdWUgbXVzdCBiZQovLyBnaXZlbiBoZXJlIGZvciBhbGwgcmVjb2duaXplZCBvcHRpb25zCiQuZm4uYnV0dG9uTWFya3VwLmRlZmF1bHRzID0gewoJaWNvbjogIiIsCglpY29ucG9zOiAibGVmdCIsCgl0aGVtZTogbnVsbCwKCWlubGluZTogZmFsc2UsCglzaGFkb3c6IHRydWUsCgljb3JuZXJzOiB0cnVlLAoJaWNvbnNoYWRvdzogZmFsc2UsIC8qIFRPRE86IFJlbW92ZSBpbiAxLjUuIE9wdGlvbiBkZXByZWNhdGVkIGluIDEuNC4gKi8KCW1pbmk6IGZhbHNlCn07CgokLmV4dGVuZCggJC5mbi5idXR0b25NYXJrdXAsIHsKCWluaXRTZWxlY3RvcjogImE6anFtRGF0YShyb2xlPSdidXR0b24nKSwgLnVpLWJhciA+IGEsIC51aS1iYXIgPiA6anFtRGF0YShyb2xlPSdjb250cm9sZ3JvdXAnKSA+IGEsIGJ1dHRvbiIKfSk7Cgp9KSggalF1ZXJ5ICk7CgoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS5jb250cm9sZ3JvdXAiLCAkLmV4dGVuZCggewoJb3B0aW9uczogewoJCWVuaGFuY2VkOiBmYWxzZSwKCQl0aGVtZTogbnVsbCwKCQlzaGFkb3c6IGZhbHNlLAoJCWNvcm5lcnM6IHRydWUsCgkJZXhjbHVkZUludmlzaWJsZTogdHJ1ZSwKCQl0eXBlOiAidmVydGljYWwiLAoJCW1pbmk6IGZhbHNlCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciBlbGVtID0gdGhpcy5lbGVtZW50LAoJCQlvcHRzID0gdGhpcy5vcHRpb25zOwoKCQkvLyBSdW4gYnV0dG9ubWFya3VwCgkJaWYgKCAkLmZuLmJ1dHRvbk1hcmt1cCApIHsKCQkJdGhpcy5lbGVtZW50LmZpbmQoICQuZm4uYnV0dG9uTWFya3VwLmluaXRTZWxlY3RvciApLmJ1dHRvbk1hcmt1cCgpOwoJCX0KCQkvLyBFbmhhbmNlIGNoaWxkIHdpZGdldHMKCQkkLmVhY2goIHRoaXMuX2NoaWxkV2lkZ2V0cywgJC5wcm94eSggZnVuY3Rpb24oIG51bWJlciwgd2lkZ2V0TmFtZSApIHsKCQkJaWYgKCAkLm1vYmlsZVsgd2lkZ2V0TmFtZSBdICkgewoJCQkJdGhpcy5lbGVtZW50LmZpbmQoICQubW9iaWxlWyB3aWRnZXROYW1lIF0uaW5pdFNlbGVjdG9yICkubm90KCAkLm1vYmlsZS5wYWdlLnByb3RvdHlwZS5rZWVwTmF0aXZlU2VsZWN0b3IoKSApWyB3aWRnZXROYW1lIF0oKTsKCQkJfQoJCX0sIHRoaXMgKSk7CgoJCSQuZXh0ZW5kKCB0aGlzLCB7CgkJCV91aTogbnVsbCwKCQkJX2luaXRpYWxSZWZyZXNoOiB0cnVlCgkJfSk7CgoJCWlmICggb3B0cy5lbmhhbmNlZCApIHsKCQkJdGhpcy5fdWkgPSB7CgkJCQlncm91cExlZ2VuZDogZWxlbS5jaGlsZHJlbiggIi51aS1jb250cm9sZ3JvdXAtbGFiZWwiICkuY2hpbGRyZW4oKSwKCQkJCWNoaWxkV3JhcHBlcjogZWxlbS5jaGlsZHJlbiggIi51aS1jb250cm9sZ3JvdXAtY29udHJvbHMiICkKCQkJfTsKCQl9IGVsc2UgewoJCQl0aGlzLl91aSA9IHRoaXMuX2VuaGFuY2UoKTsKCQl9CgoJfSwKCglfY2hpbGRXaWRnZXRzOiBbICJjaGVja2JveHJhZGlvIiwgInNlbGVjdG1lbnUiLCAiYnV0dG9uIiBdLAoKCV90aGVtZUNsYXNzRnJvbU9wdGlvbjogZnVuY3Rpb24oIHZhbHVlICkgewoJCXJldHVybiAoIHZhbHVlID8gKCB2YWx1ZSA9PT0gIm5vbmUiID8gIiIgOiAidWktZ3JvdXAtdGhlbWUtIiArIHZhbHVlICkgOiAiIiApOwoJfSwKCglfZW5oYW5jZTogZnVuY3Rpb24oKSB7CgkJdmFyIGVsZW0gPSB0aGlzLmVsZW1lbnQsCgkJCW9wdHMgPSB0aGlzLm9wdGlvbnMsCgkJCXVpID0gewoJCQkJZ3JvdXBMZWdlbmQ6IGVsZW0uY2hpbGRyZW4oICJsZWdlbmQiICksCgkJCQljaGlsZFdyYXBwZXI6IGVsZW0KCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb250cm9sZ3JvdXAgIiArCgkJCQkJCSJ1aS1jb250cm9sZ3JvdXAtIiArCgkJCQkJCQkoIG9wdHMudHlwZSA9PT0gImhvcml6b250YWwiID8gImhvcml6b250YWwiIDogInZlcnRpY2FsIiApICsgIiAiICsKCQkJCQkJdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oIG9wdHMudGhlbWUgKSArICIgIiArCgkJCQkJCSggb3B0cy5jb3JuZXJzID8gInVpLWNvcm5lci1hbGwgIiA6ICIiICkgKwoJCQkJCQkoIG9wdHMubWluaSA/ICJ1aS1taW5pICIgOiAiIiApICkKCQkJCQkud3JhcElubmVyKCAiPGRpdiAiICsKCQkJCQkJImNsYXNzPSd1aS1jb250cm9sZ3JvdXAtY29udHJvbHMgIiArCgkJCQkJCQkoIG9wdHMuc2hhZG93ID09PSB0cnVlID8gInVpLXNoYWRvdyIgOiAiIiApICsgIic+PC9kaXY+IiApCgkJCQkJLmNoaWxkcmVuKCkKCQkJfTsKCgkJaWYgKCB1aS5ncm91cExlZ2VuZC5sZW5ndGggPiAwICkgewoJCQkkKCAiPGRpdiByb2xlPSdoZWFkaW5nJyBjbGFzcz0ndWktY29udHJvbGdyb3VwLWxhYmVsJz48L2Rpdj4iICkKCQkJCS5hcHBlbmQoIHVpLmdyb3VwTGVnZW5kICkKCQkJCS5wcmVwZW5kVG8oIGVsZW0gKTsKCQl9CgoJCXJldHVybiB1aTsKCX0sCgoJX2luaXQ6IGZ1bmN0aW9uKCkgewoJCXRoaXMucmVmcmVzaCgpOwoJfSwKCglfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJdmFyIGNhbGxSZWZyZXNoLCByZXR1cm5WYWx1ZSwKCQkJZWxlbSA9IHRoaXMuZWxlbWVudDsKCgkJLy8gTXVzdCBoYXZlIG9uZSBvZiBob3Jpem9udGFsIG9yIHZlcnRpY2FsCgkJaWYgKCBvcHRpb25zLnR5cGUgIT09IHVuZGVmaW5lZCApIHsKCQkJZWxlbQoJCQkJLnJlbW92ZUNsYXNzKCAidWktY29udHJvbGdyb3VwLWhvcml6b250YWwgdWktY29udHJvbGdyb3VwLXZlcnRpY2FsIiApCgkJCQkuYWRkQ2xhc3MoICJ1aS1jb250cm9sZ3JvdXAtIiArICggb3B0aW9ucy50eXBlID09PSAiaG9yaXpvbnRhbCIgPyAiaG9yaXpvbnRhbCIgOiAidmVydGljYWwiICkgKTsKCQkJY2FsbFJlZnJlc2ggPSB0cnVlOwoJCX0KCgkJaWYgKCBvcHRpb25zLnRoZW1lICE9PSB1bmRlZmluZWQgKSB7CgkJCWVsZW0KCQkJCS5yZW1vdmVDbGFzcyggdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oIHRoaXMub3B0aW9ucy50aGVtZSApICkKCQkJCS5hZGRDbGFzcyggdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oIG9wdGlvbnMudGhlbWUgKSApOwoJCX0KCgkJaWYgKCBvcHRpb25zLmNvcm5lcnMgIT09IHVuZGVmaW5lZCApIHsKCQkJZWxlbS50b2dnbGVDbGFzcyggInVpLWNvcm5lci1hbGwiLCBvcHRpb25zLmNvcm5lcnMgKTsKCQl9CgoJCWlmICggb3B0aW9ucy5taW5pICE9PSB1bmRlZmluZWQgKSB7CgkJCWVsZW0udG9nZ2xlQ2xhc3MoICJ1aS1taW5pIiwgb3B0aW9ucy5taW5pICk7CgkJfQoKCQlpZiAoIG9wdGlvbnMuc2hhZG93ICE9PSB1bmRlZmluZWQgKSB7CgkJCXRoaXMuX3VpLmNoaWxkV3JhcHBlci50b2dnbGVDbGFzcyggInVpLXNoYWRvdyIsIG9wdGlvbnMuc2hhZG93ICk7CgkJfQoKCQlpZiAoIG9wdGlvbnMuZXhjbHVkZUludmlzaWJsZSAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLm9wdGlvbnMuZXhjbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuZXhjbHVkZUludmlzaWJsZTsKCQkJY2FsbFJlZnJlc2ggPSB0cnVlOwoJCX0KCgkJcmV0dXJuVmFsdWUgPSB0aGlzLl9zdXBlciggb3B0aW9ucyApOwoKCQlpZiAoIGNhbGxSZWZyZXNoICkgewoJCQl0aGlzLnJlZnJlc2goKTsKCQl9CgoJCXJldHVybiByZXR1cm5WYWx1ZTsKCX0sCgoJY29udGFpbmVyOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5fdWkuY2hpbGRXcmFwcGVyOwoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl2YXIgJGVsID0gdGhpcy5jb250YWluZXIoKSwKCQkJZWxzID0gJGVsLmZpbmQoICIudWktYnRuIiApLm5vdCggIi51aS1zbGlkZXItaGFuZGxlIiApLAoJCQljcmVhdGUgPSB0aGlzLl9pbml0aWFsUmVmcmVzaDsKCQlpZiAoICQubW9iaWxlLmNoZWNrYm94cmFkaW8gKSB7CgkJCSRlbC5maW5kKCAiOm1vYmlsZS1jaGVja2JveHJhZGlvIiApLmNoZWNrYm94cmFkaW8oICJyZWZyZXNoIiApOwoJCX0KCQl0aGlzLl9hZGRGaXJzdExhc3RDbGFzc2VzKCBlbHMsCgkJCXRoaXMub3B0aW9ucy5leGNsdWRlSW52aXNpYmxlID8gdGhpcy5fZ2V0VmlzaWJsZXMoIGVscywgY3JlYXRlICkgOiBlbHMsCgkJCWNyZWF0ZSApOwoJCXRoaXMuX2luaXRpYWxSZWZyZXNoID0gZmFsc2U7Cgl9LAoKCS8vIENhdmVhdDogSWYgdGhlIGxlZ2VuZCBpcyBub3QgdGhlIGZpcnN0IGNoaWxkIG9mIHRoZSBjb250cm9sZ3JvdXAgYXQgZW5oYW5jZQoJLy8gdGltZSwgaXQgd2lsbCBiZSBhZnRlciBfZGVzdHJveSgpLgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCXZhciB1aSwgYnV0dG9ucywKCQkJb3B0cyA9IHRoaXMub3B0aW9uczsKCgkJaWYgKCBvcHRzLmVuaGFuY2VkICkgewoJCQlyZXR1cm4gdGhpczsKCQl9CgoJCXVpID0gdGhpcy5fdWk7CgkJYnV0dG9ucyA9IHRoaXMuZWxlbWVudAoJCQkucmVtb3ZlQ2xhc3MoICJ1aS1jb250cm9sZ3JvdXAgIiArCgkJCQkidWktY29udHJvbGdyb3VwLWhvcml6b250YWwgdWktY29udHJvbGdyb3VwLXZlcnRpY2FsIHVpLWNvcm5lci1hbGwgdWktbWluaSAiICsKCQkJCXRoaXMuX3RoZW1lQ2xhc3NGcm9tT3B0aW9uKCBvcHRzLnRoZW1lICkgKQoJCQkuZmluZCggIi51aS1idG4iICkKCQkJLm5vdCggIi51aS1zbGlkZXItaGFuZGxlIiApOwoKCQl0aGlzLl9yZW1vdmVGaXJzdExhc3RDbGFzc2VzKCBidXR0b25zICk7CgoJCXVpLmdyb3VwTGVnZW5kLnVud3JhcCgpOwoJCXVpLmNoaWxkV3JhcHBlci5jaGlsZHJlbigpLnVud3JhcCgpOwoJfQp9LCAkLm1vYmlsZS5iZWhhdmlvcnMuYWRkRmlyc3RMYXN0Q2xhc3NlcyApICk7Cgp9KShqUXVlcnkpOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgoJJC53aWRnZXQoICJtb2JpbGUudG9vbGJhciIsIHsKCQlpbml0U2VsZWN0b3I6ICI6anFtRGF0YShyb2xlPSdmb290ZXInKSwgOmpxbURhdGEocm9sZT0naGVhZGVyJykiLAoKCQlvcHRpb25zOiB7CgkJCXRoZW1lOiBudWxsLAoJCQlhZGRCYWNrQnRuOiBmYWxzZSwKCQkJYmFja0J0blRoZW1lOiBudWxsLAoJCQliYWNrQnRuVGV4dDogIkJhY2siCgkJfSwKCgkJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJCXZhciBsZWZ0YnRuLCByaWdodGJ0biwKCQkJCXJvbGUgPSAgdGhpcy5lbGVtZW50LmlzKCAiOmpxbURhdGEocm9sZT0naGVhZGVyJykiICkgPyAiaGVhZGVyIiA6ICJmb290ZXIiLAoJCQkJcGFnZSA9IHRoaXMuZWxlbWVudC5jbG9zZXN0KCAiLnVpLXBhZ2UiICk7CgkJCWlmICggcGFnZS5sZW5ndGggPT09IDAgKSB7CgkJCQlwYWdlID0gZmFsc2U7CgkJCQl0aGlzLl9vbiggdGhpcy5kb2N1bWVudCwgewoJCQkJCSJwYWdlc2hvdyI6ICJyZWZyZXNoIgoJCQkJfSk7CgkJCX0KCQkJJC5leHRlbmQoIHRoaXMsIHsKCQkJCXJvbGU6IHJvbGUsCgkJCQlwYWdlOiBwYWdlLAoJCQkJbGVmdGJ0bjogbGVmdGJ0biwKCQkJCXJpZ2h0YnRuOiByaWdodGJ0biwKCQkJCWJhY2tCdG46IG51bGwKCQkJfSk7CgkJCXRoaXMuZWxlbWVudC5hdHRyKCAicm9sZSIsIHJvbGUgPT09ICJoZWFkZXIiID8gImJhbm5lciIgOiAiY29udGVudGluZm8iICkuYWRkQ2xhc3MoICJ1aS0iICsgcm9sZSApOwoJCQl0aGlzLnJlZnJlc2goKTsKCQkJdGhpcy5fc2V0T3B0aW9ucyggdGhpcy5vcHRpb25zICk7CgkJfSwKCQlfc2V0T3B0aW9uczogZnVuY3Rpb24oIG8gKSB7CgkJCWlmICggby5hZGRCYWNrQnRuICE9PSB1bmRlZmluZWQgKSB7CgkJCQlpZiAoIHRoaXMub3B0aW9ucy5hZGRCYWNrQnRuICYmCgkJCQkJdGhpcy5yb2xlID09PSAiaGVhZGVyIiAmJgoJCQkJCSQoICIudWktcGFnZSIgKS5sZW5ndGggPiAxICYmCgkJCQkJdGhpcy5wYWdlWyAwIF0uZ2V0QXR0cmlidXRlKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidXJsIiApICE9PSAkLm1vYmlsZS5wYXRoLnN0cmlwSGFzaCggbG9jYXRpb24uaGFzaCApICYmCgkJCQkJIXRoaXMubGVmdGJ0biApIHsKCQkJCQkJdGhpcy5fYWRkQmFja0J1dHRvbigpOwoJCQkJfSBlbHNlIHsKCQkJCQl0aGlzLmVsZW1lbnQuZmluZCggIi51aS10b29sYmFyLWJhY2stYnRuIiApLnJlbW92ZSgpOwoJCQkJfQoJCQl9CgkJCWlmICggby5iYWNrQnRuVGhlbWUgIT0gbnVsbCApIHsKCQkJCXRoaXMuZWxlbWVudAoJCQkJCS5maW5kKCAiLnVpLXRvb2xiYXItYmFjay1idG4iICkKCQkJCQkuYWRkQ2xhc3MoICJ1aS1idG4gdWktYnRuLSIgKyBvLmJhY2tCdG5UaGVtZSApOwoJCQl9CgkJCWlmICggby5iYWNrQnRuVGV4dCAhPT0gdW5kZWZpbmVkICkgewoJCQkJdGhpcy5lbGVtZW50LmZpbmQoICIudWktdG9vbGJhci1iYWNrLWJ0biAudWktYnRuLXRleHQiICkudGV4dCggby5iYWNrQnRuVGV4dCApOwoJCQl9CgkJCWlmICggby50aGVtZSAhPT0gdW5kZWZpbmVkICkgewoJCQkJdmFyIGN1cnJlbnRUaGVtZSA9IHRoaXMub3B0aW9ucy50aGVtZSA/IHRoaXMub3B0aW9ucy50aGVtZSA6ICJpbmhlcml0IiwKCQkJCQluZXdUaGVtZSA9IG8udGhlbWUgPyBvLnRoZW1lIDogImluaGVyaXQiOwoKCQkJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggInVpLWJhci0iICsgY3VycmVudFRoZW1lICkuYWRkQ2xhc3MoICJ1aS1iYXItIiArIG5ld1RoZW1lICk7CgkJCX0KCgkJCXRoaXMuX3N1cGVyKCBvICk7CgkJfSwKCQlyZWZyZXNoOiBmdW5jdGlvbigpIHsKCQkJaWYgKCB0aGlzLnJvbGUgPT09ICJoZWFkZXIiICkgewoJCQkJdGhpcy5fYWRkSGVhZGVyQnV0dG9uQ2xhc3NlcygpOwoJCQl9CgkJCWlmICggIXRoaXMucGFnZSApIHsKCQkJCXRoaXMuX3NldFJlbGF0aXZlKCk7CgkJCQlpZiAoIHRoaXMucm9sZSA9PT0gImZvb3RlciIgKSB7CgkJCQkJdGhpcy5lbGVtZW50LmFwcGVuZFRvKCAiYm9keSIgKTsKCQkJCX0KCQkJfQoJCQl0aGlzLl9hZGRIZWFkaW5nQ2xhc3NlcygpOwoJCQl0aGlzLl9idG5NYXJrdXAoKTsKCQl9LAoKCQkvL3dlIG9ubHkgd2FudCB0aGlzIHRvIHJ1biBvbiBub24gZml4ZWQgdG9vbGJhcnMgc28gbWFrZSBpdCBlYXN5IHRvIG92ZXJyaWRlCgkJX3NldFJlbGF0aXZlOiBmdW5jdGlvbigpIHsKCQkJJCggIltkYXRhLSIrICQubW9iaWxlLm5zICsgInJvbGU9J3BhZ2UnXSIgKS5jc3MoeyAicG9zaXRpb24iOiAicmVsYXRpdmUiIH0pOwoJCX0sCgoJCS8vIERlcHJlY2F0ZWQgaW4gMS40LiBBcyBmcm9tIDEuNSBidXR0b24gY2xhc3NlcyBoYXZlIHRvIGJlIHByZXNlbnQgaW4gdGhlIG1hcmt1cC4KCQlfYnRuTWFya3VwOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5lbGVtZW50LmNoaWxkcmVuKCAiYSIgKS5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAicm9sZSIsICJidXR0b24iICk7CgkJCXRoaXMuZWxlbWVudC50cmlnZ2VyKCAiY3JlYXRlIiApOwoJCX0sCgkJLy8gRGVwcmVjYXRlZCBpbiAxLjQuIEFzIGZyb20gMS41IHVpLWJ0bi1sZWZ0L3JpZ2h0IGNsYXNzZXMgaGF2ZSB0byBiZSBwcmVzZW50IGluIHRoZSBtYXJrdXAuCgkJX2FkZEhlYWRlckJ1dHRvbkNsYXNzZXM6IGZ1bmN0aW9uKCkgewoJCQl2YXIgJGhlYWRlcmFuY2hvcnMgPSB0aGlzLmVsZW1lbnQuY2hpbGRyZW4oICJhLCBidXR0b24iICk7CgkJCXRoaXMubGVmdGJ0biA9ICRoZWFkZXJhbmNob3JzLmhhc0NsYXNzKCAidWktYnRuLWxlZnQiICk7CgkJCXRoaXMucmlnaHRidG4gPSAkaGVhZGVyYW5jaG9ycy5oYXNDbGFzcyggInVpLWJ0bi1yaWdodCIgKTsKCgkJCXRoaXMubGVmdGJ0biA9IHRoaXMubGVmdGJ0biB8fCAkaGVhZGVyYW5jaG9ycy5lcSggMCApLm5vdCggIi51aS1idG4tcmlnaHQiICkuYWRkQ2xhc3MoICJ1aS1idG4tbGVmdCIgKS5sZW5ndGg7CgoJCQl0aGlzLnJpZ2h0YnRuID0gdGhpcy5yaWdodGJ0biB8fCAkaGVhZGVyYW5jaG9ycy5lcSggMSApLmFkZENsYXNzKCAidWktYnRuLXJpZ2h0IiApLmxlbmd0aDsKCgkJfSwKCQlfYWRkQmFja0J1dHRvbjogZnVuY3Rpb24oKSB7CgkJCXZhciB0aGVtZSwKCQkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgoJCQlpZiAoICF0aGlzLmJhY2tCdG4gKSB7CgkJCQl0aGVtZSA9IG9wdGlvbnMuYmFja0J0blRoZW1lIHx8IG9wdGlvbnMudGhlbWU7CgkJCQl0aGlzLmJhY2tCdG4gPSAkKCAiPGEgcm9sZT0nYnV0dG9uJyBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCk7JyAiICsKCQkJCQkiY2xhc3M9J3VpLWJ0biB1aS1jb3JuZXItYWxsIHVpLXNoYWRvdyB1aS1idG4tbGVmdCAiICsKCQkJCQkJKCB0aGVtZSA/ICJ1aS1idG4tIiArIHRoZW1lICsgIiAiIDogIiIgKSArCgkJCQkJCSJ1aS10b29sYmFyLWJhY2stYnRuIHVpLWljb24tY2FyYXQtbCB1aS1idG4taWNvbi1sZWZ0JyAiICsKCQkJCQkiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAicmVsPSdiYWNrJz4iICsgb3B0aW9ucy5iYWNrQnRuVGV4dCArICI8L2E+IiApCgkJCQkJCS5wcmVwZW5kVG8oIHRoaXMuZWxlbWVudCApOwoJCQl9CgkJfSwKCQlfYWRkSGVhZGluZ0NsYXNzZXM6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLmVsZW1lbnQuY2hpbGRyZW4oICJoMSwgaDIsIGgzLCBoNCwgaDUsIGg2IiApCgkJCQkuYWRkQ2xhc3MoICJ1aS10aXRsZSIgKQoJCQkJLy8gUmVnYXJkbGVzcyBvZiBoIGVsZW1lbnQgbnVtYmVyIGluIHNyYywgaXQgYmVjb21lcyBoMSBmb3IgdGhlIGVuaGFuY2VkIHBhZ2UKCQkJCS5hdHRyKHsKCQkJCQkicm9sZSI6ICJoZWFkaW5nIiwKCQkJCQkiYXJpYS1sZXZlbCI6ICIxIgoJCQkJfSk7CgkJfQoJfSk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCgkkLndpZGdldCggIm1vYmlsZS50b29sYmFyIiwgJC5tb2JpbGUudG9vbGJhciwgewoJCW9wdGlvbnM6IHsKCQkJcG9zaXRpb246bnVsbCwKCQkJdmlzaWJsZU9uUGFnZVNob3c6IHRydWUsCgkJCWRpc2FibGVQYWdlWm9vbTogdHJ1ZSwKCQkJdHJhbnNpdGlvbjogInNsaWRlIiwgLy9jYW4gYmUgbm9uZSwgZmFkZSwgc2xpZGUgKHNsaWRlIG1hcHMgdG8gc2xpZGV1cCBvciBzbGlkZWRvd24pCgkJCWZ1bGxzY3JlZW46IGZhbHNlLAoJCQl0YXBUb2dnbGU6IHRydWUsCgkJCXRhcFRvZ2dsZUJsYWNrbGlzdDogImEsIGJ1dHRvbiwgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIC51aS1oZWFkZXItZml4ZWQsIC51aS1mb290ZXItZml4ZWQsIC51aS1mbGlwc3dpdGNoLCAudWktcG9wdXAsIC51aS1wYW5lbCwgLnVpLXBhbmVsLWRpc21pc3Mtb3BlbiIsCgkJCWhpZGVEdXJpbmdGb2N1czogImlucHV0LCB0ZXh0YXJlYSwgc2VsZWN0IiwKCQkJdXBkYXRlUGFnZVBhZGRpbmc6IHRydWUsCgkJCXRyYWNrUGVyc2lzdGVudFRvb2xiYXJzOiB0cnVlLAoKCQkJLy8gQnJvd3NlciBkZXRlY3Rpb24hIFdlZWVlLCBoZXJlIHdlIGdvLi4uCgkJCS8vIFVuZm9ydHVuYXRlbHksIHBvc2l0aW9uOmZpeGVkIGlzIGNvc3RseSwgbm90IHRvIG1lbnRpb24gcHJvYmFibHkgaW1wb3NzaWJsZSwgdG8gZmVhdHVyZS1kZXRlY3QgYWNjdXJhdGVseS4KCQkJLy8gU29tZSB0ZXN0cyBleGlzdCwgYnV0IHRoZXkgY3VycmVudGx5IHJldHVybiBmYWxzZSByZXN1bHRzIGluIGNyaXRpY2FsIGRldmljZXMgYW5kIGJyb3dzZXJzLCB3aGljaCBjb3VsZCBsZWFkIHRvIGEgYnJva2VuIGV4cGVyaWVuY2UuCgkJCS8vIFRlc3RpbmcgZml4ZWQgcG9zaXRpb25pbmcgaXMgYWxzbyBwcmV0dHkgb2J0cnVzaXZlIHRvIHBhZ2UgbG9hZCwgcmVxdWlyaW5nIGluamVjdGVkIGVsZW1lbnRzIGFuZCBzY3JvbGxpbmcgdGhlIHdpbmRvdwoJCQkvLyBUaGUgZm9sbG93aW5nIGZ1bmN0aW9uIHNlcnZlcyB0byBydWxlIG91dCBzb21lIHBvcHVsYXIgYnJvd3NlcnMgd2l0aCBrbm93biBmaXhlZC1wb3NpdGlvbmluZyBpc3N1ZXMKCQkJLy8gVGhpcyBpcyBhIHBsdWdpbiBvcHRpb24gbGlrZSBhbnkgb3RoZXIsIHNvIGZlZWwgZnJlZSB0byBpbXByb3ZlIG9yIG92ZXJ3cml0ZSBpdAoJCQlzdXBwb3J0QmxhY2tsaXN0OiBmdW5jdGlvbigpIHsKCQkJCXJldHVybiAhJC5zdXBwb3J0LmZpeGVkUG9zaXRpb247CgkJCX0KCQl9LAoKCQlfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5fc3VwZXIoKTsKCQkJaWYgKCB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICJmaXhlZCIgJiYgIXRoaXMub3B0aW9ucy5zdXBwb3J0QmxhY2tsaXN0KCkgKSB7CgkJCQl0aGlzLl9tYWtlRml4ZWQoKTsKCQkJfQoJCX0sCgoJCV9tYWtlRml4ZWQ6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoICJ1aS0iKyB0aGlzLnJvbGUgKyItZml4ZWQiICk7CgkJCXRoaXMudXBkYXRlUGFnZVBhZGRpbmcoKTsKCQkJdGhpcy5fYWRkVHJhbnNpdGlvbkNsYXNzKCk7CgkJCXRoaXMuX2JpbmRQYWdlRXZlbnRzKCk7CgkJCXRoaXMuX2JpbmRUb2dnbGVIYW5kbGVycygpOwoJCQl0aGlzLl9zZXRPcHRpb25zKCB0aGlzLm9wdGlvbnMgKTsKCQl9LAoKCQlfc2V0T3B0aW9uczogZnVuY3Rpb24oIG8gKSB7CgkJCWlmICggby5wb3NpdGlvbiA9PT0gImZpeGVkIiAmJiB0aGlzLm9wdGlvbnMucG9zaXRpb24gIT09ICJmaXhlZCIgKSB7CgkJCQl0aGlzLl9tYWtlRml4ZWQoKTsKCQkJfQoJCQlpZiAoIHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gImZpeGVkIiAmJiAhdGhpcy5vcHRpb25zLnN1cHBvcnRCbGFja2xpc3QoKSApIHsKCQkJCXZhciAkcGFnZSA9ICggISF0aGlzLnBhZ2UgKT8gdGhpcy5wYWdlOiAoICQoIi51aS1wYWdlLWFjdGl2ZSIpLmxlbmd0aCA+IDAgKT8gJCgiLnVpLXBhZ2UtYWN0aXZlIik6ICQoIi51aS1wYWdlIikuZXEoMCk7CgoJCQkJaWYgKCBvLmZ1bGxzY3JlZW4gIT09IHVuZGVmaW5lZCkgewoJCQkJCWlmICggby5mdWxsc2NyZWVuICkgewoJCQkJCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoICJ1aS0iKyB0aGlzLnJvbGUgKyItZnVsbHNjcmVlbiIgKTsKCQkJCQkJJHBhZ2UuYWRkQ2xhc3MoICJ1aS1wYWdlLSIgKyB0aGlzLnJvbGUgKyAiLWZ1bGxzY3JlZW4iICk7CgkJCQkJfQoJCQkJCS8vIElmIG5vdCBmdWxsc2NyZWVuLCBhZGQgY2xhc3MgdG8gcGFnZSB0byBzZXQgdG9wIG9yIGJvdHRvbSBwYWRkaW5nCgkJCQkJZWxzZSB7CgkJCQkJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggInVpLSIrIHRoaXMucm9sZSArIi1mdWxsc2NyZWVuIiApOwoJCQkJCQkkcGFnZS5yZW1vdmVDbGFzcyggInVpLXBhZ2UtIiArIHRoaXMucm9sZSArICItZnVsbHNjcmVlbiIgKS5hZGRDbGFzcyggInVpLXBhZ2UtIiArIHRoaXMucm9sZSsgIi1maXhlZCIgKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJdGhpcy5fc3VwZXIobyk7CgkJfSwKCgkJX2FkZFRyYW5zaXRpb25DbGFzczogZnVuY3Rpb24oKSB7CgkJCXZhciB0Y2xhc3MgPSB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbjsKCgkJCWlmICggdGNsYXNzICYmIHRjbGFzcyAhPT0gIm5vbmUiICkgewoJCQkJLy8gdXNlIGFwcHJvcHJpYXRlIHNsaWRlIGZvciBoZWFkZXIgb3IgZm9vdGVyCgkJCQlpZiAoIHRjbGFzcyA9PT0gInNsaWRlIiApIHsKCQkJCQl0Y2xhc3MgPSB0aGlzLmVsZW1lbnQuaGFzQ2xhc3MoICJ1aS1oZWFkZXIiICkgPyAic2xpZGVkb3duIiA6ICJzbGlkZXVwIjsKCQkJCX0KCgkJCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoIHRjbGFzcyApOwoJCQl9CgkJfSwKCgkJX2JpbmRQYWdlRXZlbnRzOiBmdW5jdGlvbigpIHsKCQkJdmFyIHBhZ2UgPSAoICEhdGhpcy5wYWdlICk/IHRoaXMuZWxlbWVudC5jbG9zZXN0KCAiLnVpLXBhZ2UiICk6IHRoaXMuZG9jdW1lbnQ7CgkJCS8vcGFnZSBldmVudCBiaW5kaW5ncwoJCQkvLyBGaXhlZCB0b29sYmFycyByZXF1aXJlIHBhZ2Ugem9vbSB0byBiZSBkaXNhYmxlZCwgb3RoZXJ3aXNlIHVzYWJpbGl0eSBpc3N1ZXMgY3JvcCB1cAoJCQkvLyBUaGlzIG1ldGhvZCBpcyBtZWFudCB0byBkaXNhYmxlIHpvb20gd2hpbGUgYSBmaXhlZC1wb3NpdGlvbmVkIHRvb2xiYXIgcGFnZSBpcyB2aXNpYmxlCgkJCXRoaXMuX29uKCBwYWdlICwgewoJCQkJInBhZ2ViZWZvcmVzaG93IjogIl9oYW5kbGVQYWdlQmVmb3JlU2hvdyIsCgkJCQkid2Via2l0QW5pbWF0aW9uU3RhcnQiOiJfaGFuZGxlQW5pbWF0aW9uU3RhcnQiLAoJCQkJImFuaW1hdGlvbnN0YXJ0IjoiX2hhbmRsZUFuaW1hdGlvblN0YXJ0IiwKCQkJCSJ1cGRhdGVsYXlvdXQiOiAiX2hhbmRsZUFuaW1hdGlvblN0YXJ0IiwKCQkJCSJwYWdlc2hvdyI6ICJfaGFuZGxlUGFnZVNob3ciLAoJCQkJInBhZ2ViZWZvcmVoaWRlIjogIl9oYW5kbGVQYWdlQmVmb3JlSGlkZSIKCQkJfSk7CgkJfSwKCgkJX2hhbmRsZVBhZ2VCZWZvcmVTaG93OiBmdW5jdGlvbiggKSB7CgkJCXZhciBvID0gdGhpcy5vcHRpb25zOwoJCQlpZiAoIG8uZGlzYWJsZVBhZ2Vab29tICkgewoJCQkJJC5tb2JpbGUuem9vbS5kaXNhYmxlKCB0cnVlICk7CgkJCX0KCQkJaWYgKCAhby52aXNpYmxlT25QYWdlU2hvdyApIHsKCQkJCXRoaXMuaGlkZSggdHJ1ZSApOwoJCQl9CgkJfSwKCgkJX2hhbmRsZUFuaW1hdGlvblN0YXJ0OiBmdW5jdGlvbigpIHsKCQkJaWYgKCB0aGlzLm9wdGlvbnMudXBkYXRlUGFnZVBhZGRpbmcgKSB7CgkJCQl0aGlzLnVwZGF0ZVBhZ2VQYWRkaW5nKCAoICEhdGhpcy5wYWdlICk/IHRoaXMucGFnZTogIi51aS1wYWdlLWFjdGl2ZSIgKTsKCQkJfQoJCX0sCgoJCV9oYW5kbGVQYWdlU2hvdzogZnVuY3Rpb24oKSB7CgkJCXRoaXMudXBkYXRlUGFnZVBhZGRpbmcoICggISF0aGlzLnBhZ2UgKT8gdGhpcy5wYWdlOiAiLnVpLXBhZ2UtYWN0aXZlIiApOwoJCQlpZiAoIHRoaXMub3B0aW9ucy51cGRhdGVQYWdlUGFkZGluZyApIHsKCQkJCXRoaXMuX29uKCB0aGlzLndpbmRvdywgeyAidGhyb3R0bGVkcmVzaXplIjogInVwZGF0ZVBhZ2VQYWRkaW5nIiB9ICk7CgkJCX0KCQl9LAoKCQlfaGFuZGxlUGFnZUJlZm9yZUhpZGU6IGZ1bmN0aW9uKCBlLCB1aSApIHsKCQkJdmFyIG8gPSB0aGlzLm9wdGlvbnMsCgkJCQl0aGlzRm9vdGVyLCB0aGlzSGVhZGVyLCBuZXh0Rm9vdGVyLCBuZXh0SGVhZGVyOwoKCQkJaWYgKCBvLmRpc2FibGVQYWdlWm9vbSApIHsKCQkJCSQubW9iaWxlLnpvb20uZW5hYmxlKCB0cnVlICk7CgkJCX0KCQkJaWYgKCBvLnVwZGF0ZVBhZ2VQYWRkaW5nICkgewoJCQkJdGhpcy5fb2ZmKCB0aGlzLndpbmRvdywgInRocm90dGxlZHJlc2l6ZSIgKTsKCQkJfQoKCQkJaWYgKCBvLnRyYWNrUGVyc2lzdGVudFRvb2xiYXJzICkgewoJCQkJdGhpc0Zvb3RlciA9ICQoICIudWktZm9vdGVyLWZpeGVkOmpxbURhdGEoaWQpIiwgdGhpcy5wYWdlICk7CgkJCQl0aGlzSGVhZGVyID0gJCggIi51aS1oZWFkZXItZml4ZWQ6anFtRGF0YShpZCkiLCB0aGlzLnBhZ2UgKTsKCQkJCW5leHRGb290ZXIgPSB0aGlzRm9vdGVyLmxlbmd0aCAmJiB1aS5uZXh0UGFnZSAmJiAkKCAiLnVpLWZvb3Rlci1maXhlZDpqcW1EYXRhKGlkPSciICsgdGhpc0Zvb3Rlci5qcW1EYXRhKCAiaWQiICkgKyAiJykiLCB1aS5uZXh0UGFnZSApIHx8ICQoKTsKCQkJCW5leHRIZWFkZXIgPSB0aGlzSGVhZGVyLmxlbmd0aCAmJiB1aS5uZXh0UGFnZSAmJiAkKCAiLnVpLWhlYWRlci1maXhlZDpqcW1EYXRhKGlkPSciICsgdGhpc0hlYWRlci5qcW1EYXRhKCAiaWQiICkgKyAiJykiLCB1aS5uZXh0UGFnZSApIHx8ICQoKTsKCgkJCQlpZiAoIG5leHRGb290ZXIubGVuZ3RoIHx8IG5leHRIZWFkZXIubGVuZ3RoICkgewoKCQkJCQluZXh0Rm9vdGVyLmFkZCggbmV4dEhlYWRlciApLmFwcGVuZFRvKCAkLm1vYmlsZS5wYWdlQ29udGFpbmVyICk7CgoJCQkJCXVpLm5leHRQYWdlLm9uZSggInBhZ2VzaG93IiwgZnVuY3Rpb24oKSB7CgkJCQkJCW5leHRIZWFkZXIucHJlcGVuZFRvKCB0aGlzICk7CgkJCQkJCW5leHRGb290ZXIuYXBwZW5kVG8oIHRoaXMgKTsKCQkJCQl9KTsKCQkJCX0KCQkJfQoJCX0sCgoJCV92aXNpYmxlOiB0cnVlLAoKCQkvLyBUaGlzIHdpbGwgc2V0IHRoZSBjb250ZW50IGVsZW1lbnQncyB0b3Agb3IgYm90dG9tIHBhZGRpbmcgZXF1YWwgdG8gdGhlIHRvb2xiYXIncyBoZWlnaHQKCQl1cGRhdGVQYWdlUGFkZGluZzogZnVuY3Rpb24oIHRiUGFnZSApIHsKCQkJdmFyICRlbCA9IHRoaXMuZWxlbWVudCwKCQkJCWhlYWRlciA9ICggdGhpcy5yb2xlID09PSJoZWFkZXIiICksCgkJCQlwb3MgPSBwYXJzZUZsb2F0KCAkZWwuY3NzKCBoZWFkZXIgPyAidG9wIiA6ICJib3R0b20iICkgKTsKCgkJCS8vIFRoaXMgYmVoYXZpb3Igb25seSBhcHBsaWVzIHRvICJmaXhlZCIsIG5vdCAiZnVsbHNjcmVlbiIKCQkJaWYgKCB0aGlzLm9wdGlvbnMuZnVsbHNjcmVlbiApIHsgcmV0dXJuOyB9CgkJCS8vIHRiUGFnZSBhcmd1bWVudCBjYW4gYmUgYSBQYWdlIG9iamVjdCBvciBhbiBldmVudCwgaWYgY29taW5nIGZyb20gdGhyb3R0bGVkIHJlc2l6ZS4KCQkJdGJQYWdlID0gKCB0YlBhZ2UgJiYgdGJQYWdlLnR5cGUgPT09IHVuZGVmaW5lZCAmJiB0YlBhZ2UgKSB8fCB0aGlzLnBhZ2UgfHwgJGVsLmNsb3Nlc3QoICIudWktcGFnZSIgKTsKCQkJdGJQYWdlID0gKCAhIXRoaXMucGFnZSApPyB0aGlzLnBhZ2U6ICIudWktcGFnZS1hY3RpdmUiOwoJCQkkKCB0YlBhZ2UgKS5jc3MoICJwYWRkaW5nLSIgKyAoIGhlYWRlciA/ICJ0b3AiIDogImJvdHRvbSIgKSwgJGVsLm91dGVySGVpZ2h0KCkgKyBwb3MgKTsKCQl9LAoKCQlfdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24oIG5vdHJhbnNpdGlvbiApIHsKCQkJdmFyICR3aW4gPSB0aGlzLndpbmRvdywKCQkJCSRlbCA9IHRoaXMuZWxlbWVudCwKCQkJCXNjcm9sbCA9ICR3aW4uc2Nyb2xsVG9wKCksCgkJCQllbEhlaWdodCA9ICRlbC5oZWlnaHQoKSwKCQkJCXBIZWlnaHQgPSAoICEhdGhpcy5wYWdlICk/ICRlbC5jbG9zZXN0KCAiLnVpLXBhZ2UiICkuaGVpZ2h0KCk6JCgiLnVpLXBhZ2UtYWN0aXZlIikuaGVpZ2h0KCksCgkJCQl2aWV3cG9ydEhlaWdodCA9ICQubW9iaWxlLmdldFNjcmVlbkhlaWdodCgpOwoKCQkJcmV0dXJuICFub3RyYW5zaXRpb24gJiYKCQkJCSggdGhpcy5vcHRpb25zLnRyYW5zaXRpb24gJiYgdGhpcy5vcHRpb25zLnRyYW5zaXRpb24gIT09ICJub25lIiAmJgoJCQkJKAoJCQkJCSggdGhpcy5yb2xlID09PSAiaGVhZGVyIiAmJiAhdGhpcy5vcHRpb25zLmZ1bGxzY3JlZW4gJiYgc2Nyb2xsID4gZWxIZWlnaHQgKSB8fAoJCQkJCSggdGhpcy5yb2xlID09PSAiZm9vdGVyIiAmJiAhdGhpcy5vcHRpb25zLmZ1bGxzY3JlZW4gJiYgc2Nyb2xsICsgdmlld3BvcnRIZWlnaHQgPCBwSGVpZ2h0IC0gZWxIZWlnaHQgKQoJCQkJKSB8fCB0aGlzLm9wdGlvbnMuZnVsbHNjcmVlbgoJCQkJKTsKCQl9LAoKCQlzaG93OiBmdW5jdGlvbiggbm90cmFuc2l0aW9uICkgewoJCQl2YXIgaGlkZUNsYXNzID0gInVpLWZpeGVkLWhpZGRlbiIsCgkJCQkkZWwgPSB0aGlzLmVsZW1lbnQ7CgoJCQlpZiAoIHRoaXMuX3VzZVRyYW5zaXRpb24oIG5vdHJhbnNpdGlvbiApICkgewoJCQkJJGVsCgkJCQkJLnJlbW92ZUNsYXNzKCAib3V0ICIgKyBoaWRlQ2xhc3MgKQoJCQkJCS5hZGRDbGFzcyggImluIiApCgkJCQkJLmFuaW1hdGlvbkNvbXBsZXRlKGZ1bmN0aW9uICgpIHsKCQkJCQkJJGVsLnJlbW92ZUNsYXNzKCAiaW4iICk7CgkJCQkJfSk7CgkJCX0KCQkJZWxzZSB7CgkJCQkkZWwucmVtb3ZlQ2xhc3MoIGhpZGVDbGFzcyApOwoJCQl9CgkJCXRoaXMuX3Zpc2libGUgPSB0cnVlOwoJCX0sCgoJCWhpZGU6IGZ1bmN0aW9uKCBub3RyYW5zaXRpb24gKSB7CgkJCXZhciBoaWRlQ2xhc3MgPSAidWktZml4ZWQtaGlkZGVuIiwKCQkJCSRlbCA9IHRoaXMuZWxlbWVudCwKCQkJCS8vIGlmIGl0J3MgYSBzbGlkZSB0cmFuc2l0aW9uLCBvdXIgbmV3IHRyYW5zaXRpb25zIG5lZWQgdGhlIHJldmVyc2UgY2xhc3MgYXMgd2VsbCB0byBzbGlkZSBvdXR3YXJkCgkJCQlvdXRjbGFzcyA9ICJvdXQiICsgKCB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbiA9PT0gInNsaWRlIiA/ICIgcmV2ZXJzZSIgOiAiIiApOwoKCQkJaWYgKCB0aGlzLl91c2VUcmFuc2l0aW9uKCBub3RyYW5zaXRpb24gKSApIHsKCQkJCSRlbAoJCQkJCS5hZGRDbGFzcyggb3V0Y2xhc3MgKQoJCQkJCS5yZW1vdmVDbGFzcyggImluIiApCgkJCQkJLmFuaW1hdGlvbkNvbXBsZXRlKGZ1bmN0aW9uKCkgewoJCQkJCQkkZWwuYWRkQ2xhc3MoIGhpZGVDbGFzcyApLnJlbW92ZUNsYXNzKCBvdXRjbGFzcyApOwoJCQkJCX0pOwoJCQl9CgkJCWVsc2UgewoJCQkJJGVsLmFkZENsYXNzKCBoaWRlQ2xhc3MgKS5yZW1vdmVDbGFzcyggb3V0Y2xhc3MgKTsKCQkJfQoJCQl0aGlzLl92aXNpYmxlID0gZmFsc2U7CgkJfSwKCgkJdG9nZ2xlOiBmdW5jdGlvbigpIHsKCQkJdGhpc1sgdGhpcy5fdmlzaWJsZSA/ICJoaWRlIiA6ICJzaG93IiBdKCk7CgkJfSwKCgkJX2JpbmRUb2dnbGVIYW5kbGVyczogZnVuY3Rpb24oKSB7CgkJCXZhciBzZWxmID0gdGhpcywKCQkJCW8gPSBzZWxmLm9wdGlvbnMsCgkJCQlkZWxheVNob3csIGRlbGF5SGlkZSwKCQkJCWlzVmlzaWJsZSA9IHRydWUsCgkJCQlwYWdlID0gKCAhIXRoaXMucGFnZSApPyB0aGlzLnBhZ2U6ICQoIi51aS1wYWdlIik7CgoJCQkvLyB0YXAgdG9nZ2xlCgkJCXBhZ2UKCQkJCS5iaW5kKCAidmNsaWNrIiwgZnVuY3Rpb24oIGUgKSB7CgkJCQkJaWYgKCBvLnRhcFRvZ2dsZSAmJiAhJCggZS50YXJnZXQgKS5jbG9zZXN0KCBvLnRhcFRvZ2dsZUJsYWNrbGlzdCApLmxlbmd0aCApIHsKCQkJCQkJc2VsZi50b2dnbGUoKTsKCQkJCQl9CgkJCQl9KQoJCQkJLmJpbmQoICJmb2N1c2luIGZvY3Vzb3V0IiwgZnVuY3Rpb24oIGUgKSB7CgkJCQkJLy90aGlzIGhpZGVzIHRoZSB0b29sYmFycyBvbiBhIGtleWJvYXJkIHBvcCB0byBnaXZlIG1vcmUgc2NyZWVuIHJvb20gYW5kIHByZXZlbnQgaW9zIGJ1ZyB3aGljaAoJCQkJCS8vcG9zaXRpb25zIGZpeGVkIHRvb2xiYXJzIGluIHRoZSBtaWRkbGUgb2YgdGhlIHNjcmVlbiBvbiBwb3AgaWYgdGhlIGlucHV0IGlzIG5lYXIgdGhlIHRvcCBvcgoJCQkJCS8vYm90dG9tIG9mIHRoZSBzY3JlZW4gYWRkcmVzc2VzIGlzc3VlcyAjNDQxMCBGb290ZXIgbmF2YmFyIG1vdmVzIHVwIHdoZW4gY2xpY2tpbmcgb24gYSB0ZXh0Ym94IGluIGFuIEFuZHJvaWQgZW52aXJvbm1lbnQKCQkJCQkvL2FuZCBpc3N1ZSAjNDExMyBIZWFkZXIgYW5kIGZvb3RlciBjaGFuZ2UgdGhlaXIgcG9zaXRpb24gYWZ0ZXIga2V5Ym9hcmQgcG9wdXAgLSBpT1MKCQkJCQkvL2FuZCBpc3N1ZSAjNDQxMCBGb290ZXIgbmF2YmFyIG1vdmVzIHVwIHdoZW4gY2xpY2tpbmcgb24gYSB0ZXh0Ym94IGluIGFuIEFuZHJvaWQgZW52aXJvbm1lbnQKCQkJCQlpZiAoIHNjcmVlbi53aWR0aCA8IDEwMjUgJiYgJCggZS50YXJnZXQgKS5pcyggby5oaWRlRHVyaW5nRm9jdXMgKSAmJiAhJCggZS50YXJnZXQgKS5jbG9zZXN0KCAiLnVpLWhlYWRlci1maXhlZCwgLnVpLWZvb3Rlci1maXhlZCIgKS5sZW5ndGggKSB7CgkJCQkJCS8vRml4IGZvciBpc3N1ZSAjNDcyNCBNb3ZpbmcgdGhyb3VnaCBmb3JtIGluIE1vYmlsZSBTYWZhcmkgd2l0aCAiTmV4dCIgYW5kICJQcmV2aW91cyIgc3lzdGVtCgkJCQkJCS8vY29udHJvbHMgY2F1c2VzIGZpeGVkIHBvc2l0aW9uLCB0YXAtdG9nZ2xlIGZhbHNlIEhlYWRlciB0byByZXZlYWwgaXRzZWxmCgkJCQkJCS8vIGlzVmlzaWJsZSBpbnN0ZWFkIG9mIHNlbGYuX3Zpc2libGUgYmVjYXVzZSB0aGUgZm9jdXNpbiBhbmQgZm9jdXNvdXQgZXZlbnRzIGZpcmUgdHdpY2UgYXQgdGhlIHNhbWUgdGltZQoJCQkJCQkvLyBBbHNvIHVzZSBhIGRlbGF5IGZvciBoaWRpbmcgdGhlIHRvb2xiYXJzIGJlY2F1c2Ugb24gQW5kcm9pZCBuYXRpdmUgYnJvd3NlciBmb2N1c2luIGlzIGRpcmVjbHR5IGZvbGxvd2VkCgkJCQkJCS8vIGJ5IGEgZm9jdXNvdXQgd2hlbiBhIG5hdGl2ZSBzZWxlY3RzIG9wZW5zIGFuZCB0aGUgb3RoZXIgd2F5IGFyb3VuZCB3aGVuIGl0IGNsb3Nlcy4KCQkJCQkJaWYgKCBlLnR5cGUgPT09ICJmb2N1c291dCIgJiYgIWlzVmlzaWJsZSApIHsKCQkJCQkJCWlzVmlzaWJsZSA9IHRydWU7CgkJCQkJCQkvL3dhaXQgZm9yIHRoZSBzdGFjayB0byB1bndpbmQgYW5kIHNlZSBpZiB3ZSBoYXZlIGp1bXBlZCB0byBhbm90aGVyIGlucHV0CgkJCQkJCQljbGVhclRpbWVvdXQoIGRlbGF5SGlkZSApOwoJCQkJCQkJZGVsYXlTaG93ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCQkJCQkJc2VsZi5zaG93KCk7CgkJCQkJCQl9LCAwICk7CgkJCQkJCX0gZWxzZSBpZiAoIGUudHlwZSA9PT0gImZvY3VzaW4iICYmICEhaXNWaXNpYmxlICkgewoJCQkJCQkJLy9pZiB3ZSBoYXZlIGp1bXBlZCB0byBhbm90aGVyIGlucHV0IGNsZWFyIHRoZSB0aW1lIG91dCB0byBjYW5jZWwgdGhlIHNob3cuCgkJCQkJCQljbGVhclRpbWVvdXQoIGRlbGF5U2hvdyApOwoJCQkJCQkJaXNWaXNpYmxlID0gZmFsc2U7CgkJCQkJCQlkZWxheUhpZGUgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHsKCQkJCQkJCQlzZWxmLmhpZGUoKTsKCQkJCQkJCX0sIDAgKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0pOwoJCX0sCgoJCV9zZXRSZWxhdGl2ZTogZnVuY3Rpb24oKSB7CgkJCWlmKCB0aGlzLm9wdGlvbnMucG9zaXRpb24gIT09ICJmaXhlZCIgKXsKCQkJCSQoICJbZGF0YS0iKyAkLm1vYmlsZS5ucyArICJyb2xlPSdwYWdlJ10iICkuY3NzKHsgInBvc2l0aW9uIjogInJlbGF0aXZlIiB9KTsKCQkJfQoJCX0sCgoJCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQkJdmFyICRlbCA9IHRoaXMuZWxlbWVudCwKCQkJCWhlYWRlciA9ICRlbC5oYXNDbGFzcyggInVpLWhlYWRlciIgKTsKCgkJCSRlbC5jbG9zZXN0KCAiLnVpLXBhZ2UiICkuY3NzKCAicGFkZGluZy0iICsgKCBoZWFkZXIgPyAidG9wIiA6ICJib3R0b20iICksICIiICk7CgkJCSRlbC5yZW1vdmVDbGFzcyggInVpLWhlYWRlci1maXhlZCB1aS1mb290ZXItZml4ZWQgdWktaGVhZGVyLWZ1bGxzY3JlZW4gdWktZm9vdGVyLWZ1bGxzY3JlZW4gaW4gb3V0IGZhZGUgc2xpZGVkb3duIHNsaWRldXAgdWktZml4ZWQtaGlkZGVuIiApOwoJCQkkZWwuY2xvc2VzdCggIi51aS1wYWdlIiApLnJlbW92ZUNsYXNzKCAidWktcGFnZS1oZWFkZXItZml4ZWQgdWktcGFnZS1mb290ZXItZml4ZWQgdWktcGFnZS1oZWFkZXItZnVsbHNjcmVlbiB1aS1wYWdlLWZvb3Rlci1mdWxsc2NyZWVuIiApOwoJCX0KCgl9KTsKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgkkLndpZGdldCggIm1vYmlsZS50b29sYmFyIiwgJC5tb2JpbGUudG9vbGJhciwgewoKCQlfbWFrZUZpeGVkOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5fc3VwZXIoKTsKCQkJdGhpcy5fd29ya2Fyb3VuZHMoKTsKCQl9LAoKCQkvL2NoZWNrIHRoZSBicm93c2VyIGFuZCB2ZXJzaW9uIGFuZCBydW4gbmVlZGVkIHdvcmthcm91bmRzCgkJX3dvcmthcm91bmRzOiBmdW5jdGlvbigpIHsKCQkJdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudCwKCQkJcGxhdGZvcm0gPSBuYXZpZ2F0b3IucGxhdGZvcm0sCgkJCS8vIFJlbmRlcmluZyBlbmdpbmUgaXMgV2Via2l0LCBhbmQgY2FwdHVyZSBtYWpvciB2ZXJzaW9uCgkJCXdrbWF0Y2ggPSB1YS5tYXRjaCggL0FwcGxlV2ViS2l0XC8oWzAtOV0rKS8gKSwKCQkJd2t2ZXJzaW9uID0gISF3a21hdGNoICYmIHdrbWF0Y2hbIDEgXSwKCQkJb3MgPSBudWxsLAoJCQlzZWxmID0gdGhpczsKCQkJLy9zZXQgdGhlIG9zIHdlIGFyZSB3b3JraW5nIGluIGlmIGl0IGRvc2VudCBtYXRjaCBvbmUgd2l0aCB3b3JrYXJvdW5kcyByZXR1cm4KCQkJaWYgKCBwbGF0Zm9ybS5pbmRleE9mKCAiaVBob25lIiApID4gLTEgfHwgcGxhdGZvcm0uaW5kZXhPZiggImlQYWQiICkgPiAtMSAgfHwgcGxhdGZvcm0uaW5kZXhPZiggImlQb2QiICkgPiAtMSApIHsKCQkJCW9zID0gImlvcyI7CgkJCX0gZWxzZSBpZiAoIHVhLmluZGV4T2YoICJBbmRyb2lkIiApID4gLTEgKSB7CgkJCQlvcyA9ICJhbmRyb2lkIjsKCQkJfSBlbHNlIHsKCQkJCXJldHVybjsKCQkJfQoJCQkvL2NoZWNrIG9zIHZlcnNpb24gaWYgaXQgZG9zZW50IG1hdGNoIG9uZSB3aXRoIHdvcmthcm91bmRzIHJldHVybgoJCQlpZiAoIG9zID09PSAiaW9zIiApIHsKCQkJCS8vaU9TICB3b3JrYXJvdW5kcwoJCQkJc2VsZi5fYmluZFNjcm9sbFdvcmthcm91bmQoKTsKCQkJfSBlbHNlIGlmICggb3MgPT09ICJhbmRyb2lkIiAmJiB3a3ZlcnNpb24gJiYgd2t2ZXJzaW9uIDwgNTM0ICkgewoJCQkJLy9BbmRyb2lkIDIuMyBydW4gYWxsIEFuZHJvaWQgMi4zIHdvcmthcm91bmQKCQkJCXNlbGYuX2JpbmRTY3JvbGxXb3JrYXJvdW5kKCk7CgkJCQlzZWxmLl9iaW5kTGlzdFRodW1iV29ya2Fyb3VuZCgpOwoJCQl9IGVsc2UgewoJCQkJcmV0dXJuOwoJCQl9CgkJfSwKCgkJLy9VdGlsaXR5IGNsYXNzIGZvciBjaGVja2luZyBoZWFkZXIgYW5kIGZvb3RlciBwb3NpdGlvbnMgcmVsYXRpdmUgdG8gdmlld3BvcnQKCQlfdmlld3BvcnRPZmZzZXQ6IGZ1bmN0aW9uKCkgewoJCQl2YXIgJGVsID0gdGhpcy5lbGVtZW50LAoJCQkJaGVhZGVyID0gJGVsLmhhc0NsYXNzKCAidWktaGVhZGVyIiApLAoJCQkJb2Zmc2V0ID0gTWF0aC5hYnMoICRlbC5vZmZzZXQoKS50b3AgLSB0aGlzLndpbmRvdy5zY3JvbGxUb3AoKSApOwoJCQlpZiAoICFoZWFkZXIgKSB7CgkJCQlvZmZzZXQgPSBNYXRoLnJvdW5kKCBvZmZzZXQgLSB0aGlzLndpbmRvdy5oZWlnaHQoKSArICRlbC5vdXRlckhlaWdodCgpICkgLSA2MDsKCQkJfQoJCQlyZXR1cm4gb2Zmc2V0OwoJCX0sCgoJCS8vYmluZCBldmVudHMgZm9yIF90cmlnZ2VyUmVkcmF3KCkgZnVuY3Rpb24KCQlfYmluZFNjcm9sbFdvcmthcm91bmQ6IGZ1bmN0aW9uKCkgewoJCQl2YXIgc2VsZiA9IHRoaXM7CgkJCS8vYmluZCB0byBzY3JvbGxzdG9wIGFuZCBjaGVjayBpZiB0aGUgdG9vbGJhcnMgYXJlIGNvcnJlY3RseSBwb3NpdGlvbmVkCgkJCXRoaXMuX29uKCB0aGlzLndpbmRvdywgeyBzY3JvbGxzdG9wOiBmdW5jdGlvbigpIHsKCQkJCXZhciB2aWV3cG9ydE9mZnNldCA9IHNlbGYuX3ZpZXdwb3J0T2Zmc2V0KCk7CgkJCQkvL2NoZWNrIGlmIHRoZSBoZWFkZXIgaXMgdmlzaWJsZSBhbmQgaWYgaXRzIGluIHRoZSByaWdodCBwbGFjZQoJCQkJaWYgKCB2aWV3cG9ydE9mZnNldCA+IDIgJiYgc2VsZi5fdmlzaWJsZSApIHsKCQkJCQlzZWxmLl90cmlnZ2VyUmVkcmF3KCk7CgkJCQl9CgkJCX19KTsKCQl9LAoKCQkvL3RoaXMgYWRkcmVzc2VzIGlzc3VlICM0MjUwIFBlcnNpc3RlbnQgZm9vdGVyIGluc3RhYmlsaXR5IGluIHYxLjEgd2l0aCBsb25nIHNlbGVjdCBsaXN0cyBpbiBBbmRyb2lkIDIuMy4zCgkJLy9hbmQgaXNzdWUgIzM3NDggQW5kcm9pZCAyLng6IFBhZ2UgdHJhbnNpdGlvbnMgYnJva2VuIHdoZW4gZml4ZWQgdG9vbGJhcnMgdXNlZAoJCS8vdGhlIGFic29sdXRlbHkgcG9zaXRpb25lZCB0aHVtYm5haWwgaW4gYSBsaXN0IHZpZXcgY2F1c2VzIHByb2JsZW1zIHdpdGggZml4ZWQgcG9zaXRpb24gYnV0dG9ucyBhYm92ZSBpbiBhIG5hdiBiYXIKCQkvL3NldHRpbmcgdGhlIGxpJ3MgdG8gLXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApOyBzb2x2ZXMgdGhpcyBwcm9ibGVtIHRvIGF2b2lkZSBwb3RlbnRpYWwgaXNzdWVzIGluIG90aGVyCgkJLy9wbGF0Zm9ybXMgd2Ugc2NvcGUgdGhpcyB3aXRoIHRoZSBjbGFzcyB1aS1hbmRyb2lkLTJ4LWZpeAoJCV9iaW5kTGlzdFRodW1iV29ya2Fyb3VuZDogZnVuY3Rpb24oKSB7CgkJCXRoaXMuZWxlbWVudC5jbG9zZXN0KCAiLnVpLXBhZ2UiICkuYWRkQ2xhc3MoICJ1aS1hbmRyb2lkLTJ4LWZpeGVkIiApOwoJCX0sCgkJLy90aGlzIGFkZHJlc3NlcyBpc3N1ZXMgIzQzMzcgRml4ZWQgaGVhZGVyIHByb2JsZW0gYWZ0ZXIgc2Nyb2xsaW5nIGNvbnRlbnQgb24gaU9TIGFuZCBBbmRyb2lkCgkJLy9hbmQgZGV2aWNlIGJ1Z3MgcHJvamVjdCBpc3N1ZSAjMSBGb3JtIGVsZW1lbnRzIGNhbiBsb3NlIGNsaWNrIGhpdCBhcmVhIGluIHBvc2l0aW9uOiBmaXhlZCBjb250YWluZXJzLgoJCS8vdGhpcyBhbHNvIGFkZHJlc3NlcyBub3Qgb24gZml4ZWQgdG9vbGJhcnMgcGFnZSBpbiBkb2NzCgkJLy9hZGRpbmcgMXB4IG9mIHBhZGRpbmcgdG8gdGhlIGJvdHRvbSB0aGVuIHJlbW92aW5nIGl0IGNhdXNlcyBhICJyZWRyYXciCgkJLy93aGljaCBwb3NpdGlvbnMgdGhlIHRvb2xiYXJzIGNvcnJlY3RseSAodGhleSB3aWxsIGFsd2F5cyBiZSB2aXN1YWxseSBjb3JyZWN0KQoJCV90cmlnZ2VyUmVkcmF3OiBmdW5jdGlvbigpIHsKCQkJdmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUZsb2F0KCAkKCAiLnVpLXBhZ2UtYWN0aXZlIiApLmNzcyggInBhZGRpbmctYm90dG9tIiApICk7CgkJCS8vdHJpZ2dlciBwYWdlIHJlZHJhdyB0byBmaXggaW5jb3JyZWN0bHkgcG9zaXRpb25lZCBmaXhlZCBlbGVtZW50cwoJCQkkKCAiLnVpLXBhZ2UtYWN0aXZlIiApLmNzcyggInBhZGRpbmctYm90dG9tIiwgKCBwYWRkaW5nQm90dG9tICsgMSApICsgInB4IiApOwoJCQkvL2lmIHRoZSBwYWRkaW5nIGlzIHJlc2V0IHdpdGggb3V0IGEgdGltZW91dCB0aGUgcmVwb3NpdGlvbiB3aWxsIG5vdCBvY2N1cmUuCgkJCS8vdGhpcyBpcyBpbmRlcGVuZGFudCBvZiBKUU0gdGhlIGJyb3dzZXIgc2VlbXMgdG8gbmVlZCB0aGUgdGltZSB0byByZWFjdC4KCQkJc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCQkkKCAiLnVpLXBhZ2UtYWN0aXZlIiApLmNzcyggInBhZGRpbmctYm90dG9tIiwgcGFkZGluZ0JvdHRvbSArICJweCIgKTsKCQkJfSwgMCApOwoJCX0sCgoJCWRlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLl9zdXBlcigpOwoJCQkvL1JlbW92ZSB0aGUgY2xhc3Mgd2UgYWRkZWQgdG8gdGhlIHBhZ2UgcHJldmlvdXNseSBpbiBhbmRyb2lkIDIueAoJCQl0aGlzLmVsZW1lbnQuY2xvc2VzdCggIi51aS1wYWdlLWFjdGl2ZSIgKS5yZW1vdmVDbGFzcyggInVpLWFuZHJvaWQtMngtZml4IiApOwoJCX0KCX0pOwoKfSkoIGpRdWVyeSApOwoKCiggZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCnZhciBpZUhhY2sgPSAoICQubW9iaWxlLmJyb3dzZXIub2xkSUUgJiYgJC5tb2JpbGUuYnJvd3Nlci5vbGRJRSA8PSA4ICksCgl1aVRlbXBsYXRlID0gJCgKCQkiPGRpdiBjbGFzcz0ndWktcG9wdXAtYXJyb3ctZ3VpZGUnPjwvZGl2PiIgKwoJCSI8ZGl2IGNsYXNzPSd1aS1wb3B1cC1hcnJvdy1jb250YWluZXIiICsgKCBpZUhhY2sgPyAiIGllIiA6ICIiICkgKyAiJz4iICsKCQkJIjxkaXYgY2xhc3M9J3VpLXBvcHVwLWFycm93Jz4iICsKCQkJCSI8ZGl2IGNsYXNzPSd1aS1wb3B1cC1hcnJvdy1iYWNrZ3JvdW5kJz48L2Rpdj4iICsKCQkJIjwvZGl2PiIgKwoJCSI8L2Rpdj4iCgkpLAoJLy8gTmVlZGVkIGZvciB0cmFuc2Zvcm1pbmcgY29vcmRpbmF0ZXMgZnJvbSBzY3JlZW4gdG8gYXJyb3cgYmFja2dyb3VuZAoJdHhGYWN0b3IgPSBNYXRoLnNxcnQoIDIgKSAvIDI7CgpmdW5jdGlvbiBnZXRBcnJvdygpIHsKCXZhciBjbG9uZSA9IHVpVGVtcGxhdGUuY2xvbmUoKSwKCQlnZCA9IGNsb25lLmVxKCAwICksCgkJY3QgPSBjbG9uZS5lcSggMSApLAoJCWFyID0gY3QuY2hpbGRyZW4oKSwKCQliZyA9IGFyLmNoaWxkcmVuKCk7CgoJcmV0dXJuIHsgYXJFbHM6IGN0LmFkZCggZ2QgKSwgZ2Q6IGdkLCBjdDogY3QsIGFyOiBhciwgYmc6IGJnIH07Cn0KCiQud2lkZ2V0KCAibW9iaWxlLnBvcHVwIiwgJC5tb2JpbGUucG9wdXAsIHsKCW9wdGlvbnM6IHsKCgkJYXJyb3c6ICIiCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciBhciwKCQkJcmV0ID0gdGhpcy5fc3VwZXIoKTsKCgkJaWYgKCB0aGlzLm9wdGlvbnMuYXJyb3cgKSB7CgkJCXRoaXMuX3VpLmFycm93ID0gYXIgPSB0aGlzLl9hZGRBcnJvdygpOwoJCX0KCgkJcmV0dXJuIHJldDsKCX0sCgoJX2FkZEFycm93OiBmdW5jdGlvbigpIHsKCQl2YXIgdGhlbWUsCgkJCW9wdHMgPSB0aGlzLm9wdGlvbnMsCgkJCWFyID0gZ2V0QXJyb3coKTsKCgkJdGhlbWUgPSB0aGlzLl90aGVtZUNsYXNzRnJvbU9wdGlvbiggInVpLWJvZHktIiwgb3B0cy50aGVtZSApOwoJCWFyLmFyLmFkZENsYXNzKCB0aGVtZSArICggb3B0cy5zaGFkb3cgPyAiIHVpLW92ZXJsYXktc2hhZG93IiA6ICIiICkgKTsKCQlhci5iZy5hZGRDbGFzcyggdGhlbWUgKTsKCQlhci5hckVscy5oaWRlKCkuYXBwZW5kVG8oIHRoaXMuZWxlbWVudCApOwoKCQlyZXR1cm4gYXI7Cgl9LAoKCV91bmVuaGFuY2U6IGZ1bmN0aW9uKCkgewoJCXZhciBhciA9IHRoaXMuX3VpLmFycm93OwoKCQlpZiAoIGFyICkgewoJCQlhci5hckVscy5yZW1vdmUoKTsKCQl9CgoJCXJldHVybiB0aGlzLl9zdXBlcigpOwoJfSwKCgkvLyBQcmV0ZW5kIHRvIHNob3cgYW4gYXJyb3cgZGVzY3JpYmVkIGJ5IEBwIGFuZCBAZGlyIGFuZCBjYWxjdWxhdGUgdGhlCgkvLyBkaXN0YW5jZSBmcm9tIHRoZSBkZXNpcmVkIHBvaW50LiBJZiBhIGJlc3QtZGlzdGFuY2UgaXMgcGFzc2VkIGluLCByZXR1cm4KCS8vIHRoZSBtaW5pbXVtIG9mIHRoZSBvbmUgcGFzc2VkIGluIGFuZCB0aGUgb25lIGNhbGN1bGF0ZWQuCglfdHJ5QW5BcnJvdzogZnVuY3Rpb24oIHAsIGRpciwgZGVzaXJlZCwgcywgYmVzdCApIHsKCQl2YXIgcmVzdWx0LCByLCBkaWZmLCBkZXNpcmVkRm9yQXJyb3cgPSB7fSwgdGlwID0ge307CgoJCS8vIElmIHRoZSBhcnJvdyBoYXMgbm8gd2lnZ2xlIHJvb20gYWxvbmcgdGhlIGVkZ2Ugb2YgdGhlIHBvcHVwLCBpdCBjYW5ub3QKCQkvLyBiZSBkaXNwbGF5ZWQgYWxvbmcgdGhlIHJlcXVlc3RlZCBlZGdlIHdpdGhvdXQgaXQgc3RpY2tpbmcgb3V0LgoJCWlmICggcy5hckZ1bGxbIHAuZGltS2V5IF0gPiBzLmd1aWRlRGltc1sgcC5kaW1LZXkgXSApIHsKCQkJcmV0dXJuIGJlc3Q7CgkJfQoKCQlkZXNpcmVkRm9yQXJyb3dbIHAuZnN0IF0gPSBkZXNpcmVkWyBwLmZzdCBdICsKCQkJKCBzLmFySGFsZlsgcC5vRGltS2V5IF0gKyBzLm1lbnVIYWxmWyBwLm9EaW1LZXkgXSApICogcC5vZmZzZXRGYWN0b3IgLQoJCQlzLmNvbnRlbnRCb3hbIHAuZnN0IF0gKyAoIHMuY2xhbXBJbmZvLm1lbnVTaXplWyBwLm9EaW1LZXkgXSAtIHMuY29udGVudEJveFsgcC5vRGltS2V5IF0gKSAqIHAuYXJyb3dPZmZzZXRGYWN0b3I7CgkJZGVzaXJlZEZvckFycm93WyBwLnNuZCBdID0gZGVzaXJlZFsgcC5zbmQgXTsKCgkJcmVzdWx0ID0gcy5yZXN1bHQgfHwgdGhpcy5fY2FsY3VsYXRlRmluYWxMb2NhdGlvbiggZGVzaXJlZEZvckFycm93LCBzLmNsYW1wSW5mbyApOwoJCXIgPSB7IHg6IHJlc3VsdC5sZWZ0LCB5OiByZXN1bHQudG9wIH07CgoJCXRpcFsgcC5mc3QgXSA9IHJbIHAuZnN0IF0gKyBzLmNvbnRlbnRCb3hbIHAuZnN0IF0gKyBwLnRpcE9mZnNldDsKCQl0aXBbIHAuc25kIF0gPSBNYXRoLm1heCggcmVzdWx0WyBwLnByb3AgXSArIHMuZ3VpZGVPZmZzZXRbIHAucHJvcCBdICsgcy5hckhhbGZbIHAuZGltS2V5IF0sCgkJCU1hdGgubWluKCByZXN1bHRbIHAucHJvcCBdICsgcy5ndWlkZU9mZnNldFsgcC5wcm9wIF0gKyBzLmd1aWRlRGltc1sgcC5kaW1LZXkgXSAtIHMuYXJIYWxmWyBwLmRpbUtleSBdLAoJCQkJZGVzaXJlZFsgcC5zbmQgXSApICk7CgoJCWRpZmYgPSBNYXRoLmFicyggZGVzaXJlZC54IC0gdGlwLnggKSArIE1hdGguYWJzKCBkZXNpcmVkLnkgLSB0aXAueSApOwoJCWlmICggIWJlc3QgfHwgZGlmZiA8IGJlc3QuZGlmZiApIHsKCQkJLy8gQ29udmVydCB0aXAgb2Zmc2V0IHRvIGNvb3JkaW5hdGVzIGluc2lkZSB0aGUgcG9wdXAKCQkJdGlwWyBwLnNuZCBdIC09IHMuYXJIYWxmWyBwLmRpbUtleSBdICsgcmVzdWx0WyBwLnByb3AgXSArIHMuY29udGVudEJveFsgcC5zbmQgXTsKCQkJYmVzdCA9IHsgZGlyOiBkaXIsIGRpZmY6IGRpZmYsIHJlc3VsdDogcmVzdWx0LCBwb3NQcm9wOiBwLnByb3AsIHBvc1ZhbDogdGlwWyBwLnNuZCBdIH07CgkJfQoKCQlyZXR1cm4gYmVzdDsKCX0sCgoJX2dldFBsYWNlbWVudFN0YXRlOiBmdW5jdGlvbiggY2xhbXAgKSB7CgkJdmFyIG9mZnNldCwgZ2RPZmZzZXQsCgkJCWFyID0gdGhpcy5fdWkuYXJyb3csCgkJCXN0YXRlID0gewoJCQkJY2xhbXBJbmZvOiB0aGlzLl9jbGFtcFBvcHVwV2lkdGgoICFjbGFtcCApLAoJCQkJYXJGdWxsOiB7IGN4OiBhci5jdC53aWR0aCgpLCBjeTogYXIuY3QuaGVpZ2h0KCkgfSwKCQkJCWd1aWRlRGltczogeyBjeDogYXIuZ2Qud2lkdGgoKSwgY3k6IGFyLmdkLmhlaWdodCgpIH0sCgkJCQlndWlkZU9mZnNldDogYXIuZ2Qub2Zmc2V0KCkKCQkJfTsKCgkJb2Zmc2V0ID0gdGhpcy5lbGVtZW50Lm9mZnNldCgpOwoKCQlhci5nZC5jc3MoIHsgbGVmdDogMCwgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwIH0gKTsKCQlnZE9mZnNldCA9IGFyLmdkLm9mZnNldCgpOwoJCXN0YXRlLmNvbnRlbnRCb3ggPSB7CgkJCXg6IGdkT2Zmc2V0LmxlZnQgLSBvZmZzZXQubGVmdCwKCQkJeTogZ2RPZmZzZXQudG9wIC0gb2Zmc2V0LnRvcCwKCQkJY3g6IGFyLmdkLndpZHRoKCksCgkJCWN5OiBhci5nZC5oZWlnaHQoKQoJCX07CgkJYXIuZ2QucmVtb3ZlQXR0ciggInN0eWxlIiApOwoKCQkvLyBUaGUgYXJyb3cgYm94IG1vdmVzIGJldHdlZW4gZ3VpZGVPZmZzZXQgYW5kIGd1aWRlT2Zmc2V0ICsgZ3VpZGVEaW1zIC0gYXJGdWxsCgkJc3RhdGUuZ3VpZGVPZmZzZXQgPSB7IGxlZnQ6IHN0YXRlLmd1aWRlT2Zmc2V0LmxlZnQgLSBvZmZzZXQubGVmdCwgdG9wOiBzdGF0ZS5ndWlkZU9mZnNldC50b3AgLSBvZmZzZXQudG9wIH07CgkJc3RhdGUuYXJIYWxmID0geyBjeDogc3RhdGUuYXJGdWxsLmN4IC8gMiwgY3k6IHN0YXRlLmFyRnVsbC5jeSAvIDIgfTsKCQlzdGF0ZS5tZW51SGFsZiA9IHsgY3g6IHN0YXRlLmNsYW1wSW5mby5tZW51U2l6ZS5jeCAvIDIsIGN5OiBzdGF0ZS5jbGFtcEluZm8ubWVudVNpemUuY3kgLyAyIH07CgoJCXJldHVybiBzdGF0ZTsKCX0sCgoJX3BsYWNlbWVudENvb3JkczogZnVuY3Rpb24oIGRlc2lyZWQgKSB7CgkJdmFyIHN0YXRlLCBiZXN0LCBwYXJhbXMsIGJnT2Zmc2V0LCBlbE9mZnNldCwgZGlmZiwgYmdSZWYsCgkJCW9wdGlvblZhbHVlID0gdGhpcy5vcHRpb25zLmFycm93LAoJCQlhciA9IHRoaXMuX3VpLmFycm93OwoKCQlpZiAoICFhciApIHsKCQkJcmV0dXJuIHRoaXMuX3N1cGVyKCBkZXNpcmVkICk7CgkJfQoKCQlhci5hckVscy5zaG93KCk7CgoJCWJnUmVmID0ge307CgkJc3RhdGUgPSB0aGlzLl9nZXRQbGFjZW1lbnRTdGF0ZSggdHJ1ZSApOwoJCXBhcmFtcyA9IHsKCQkJImwiOiB7IGZzdDogIngiLCBzbmQ6ICJ5IiwgcHJvcDogInRvcCIsIGRpbUtleTogImN5Iiwgb0RpbUtleTogImN4Iiwgb2Zmc2V0RmFjdG9yOiAxLCB0aXBPZmZzZXQ6ICAtc3RhdGUuYXJIYWxmLmN4LCBhcnJvd09mZnNldEZhY3RvcjogMCB9LAoJCQkiciI6IHsgZnN0OiAieCIsIHNuZDogInkiLCBwcm9wOiAidG9wIiwgZGltS2V5OiAiY3kiLCBvRGltS2V5OiAiY3giLCBvZmZzZXRGYWN0b3I6IC0xLCB0aXBPZmZzZXQ6IHN0YXRlLmFySGFsZi5jeCArIHN0YXRlLmNvbnRlbnRCb3guY3gsIGFycm93T2Zmc2V0RmFjdG9yOiAxIH0sCgkJCSJiIjogeyBmc3Q6ICJ5Iiwgc25kOiAieCIsIHByb3A6ICJsZWZ0IiwgZGltS2V5OiAiY3giLCBvRGltS2V5OiAiY3kiLCBvZmZzZXRGYWN0b3I6IC0xLCB0aXBPZmZzZXQ6IHN0YXRlLmFySGFsZi5jeSArIHN0YXRlLmNvbnRlbnRCb3guY3ksIGFycm93T2Zmc2V0RmFjdG9yOiAxIH0sCgkJCSJ0IjogeyBmc3Q6ICJ5Iiwgc25kOiAieCIsIHByb3A6ICJsZWZ0IiwgZGltS2V5OiAiY3giLCBvRGltS2V5OiAiY3kiLCBvZmZzZXRGYWN0b3I6IDEsIHRpcE9mZnNldDogLXN0YXRlLmFySGFsZi5jeSwgYXJyb3dPZmZzZXRGYWN0b3I6IDAgfQoJCX07CgoJCS8vIFRyeSBlYWNoIHNpZGUgc3BlY2lmaWVkIGluIHRoZSBvcHRpb25zIHRvIHNlZSBvbiB3aGljaCBvbmUgdGhlIGFycm93CgkJLy8gc2hvdWxkIGJlIHBsYWNlZCBzdWNoIHRoYXQgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHRpcCBvZiB0aGUgYXJyb3cgYW5kCgkJLy8gdGhlIGRlc2lyZWQgY29vcmRpbmF0ZXMgaXMgdGhlIHNob3J0ZXN0LgoJCSQuZWFjaCggKCBvcHRpb25WYWx1ZSA9PT0gdHJ1ZSA/ICJsLHQscixiIiA6IG9wdGlvblZhbHVlICkuc3BsaXQoICIsIiApLAoJCQkkLnByb3h5KCBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHsKCQkJCWJlc3QgPSB0aGlzLl90cnlBbkFycm93KCBwYXJhbXNbIHZhbHVlIF0sIHZhbHVlLCBkZXNpcmVkLCBzdGF0ZSwgYmVzdCApOwoJCQl9LCB0aGlzICkgKTsKCgkJLy8gQ291bGQgbm90IHBsYWNlIHRoZSBhcnJvdyBhbG9uZyBhbnkgb2YgdGhlIGVkZ2VzIC0gYmVoYXZlIGFzIGlmIHNob3dpbmcKCQkvLyB0aGUgYXJyb3cgd2FzIHR1cm5lZCBvZmYuCgkJaWYgKCAhYmVzdCApIHsKCQkJYXIuYXJFbHMuaGlkZSgpOwoJCQlyZXR1cm4gdGhpcy5fc3VwZXIoIGRlc2lyZWQgKTsKCQl9CgoJCS8vIE1vdmUgdGhlIGFycm93IGludG8gcGxhY2UKCQlhci5jdAoJCQkucmVtb3ZlQ2xhc3MoICJ1aS1wb3B1cC1hcnJvdy1sIHVpLXBvcHVwLWFycm93LXQgdWktcG9wdXAtYXJyb3ctciB1aS1wb3B1cC1hcnJvdy1iIiApCgkJCS5hZGRDbGFzcyggInVpLXBvcHVwLWFycm93LSIgKyBiZXN0LmRpciApCgkJCS5yZW1vdmVBdHRyKCAic3R5bGUiICkuY3NzKCBiZXN0LnBvc1Byb3AsIGJlc3QucG9zVmFsICkKCQkJLnNob3coKTsKCgkJLy8gRG8gbm90IG1vdmUvc2l6ZSB0aGUgYmFja2dyb3VuZCBkaXYgb24gSUUsIGJlY2F1c2Ugd2UgdXNlIHRoZSBhcnJvdyBkaXYgZm9yIGJhY2tncm91bmQgYXMgd2VsbC4KCQlpZiAoICFpZUhhY2sgKSB7CgkJCWVsT2Zmc2V0ID0gdGhpcy5lbGVtZW50Lm9mZnNldCgpOwoJCQliZ1JlZlsgcGFyYW1zWyBiZXN0LmRpciBdLmZzdCBdID0gYXIuY3Qub2Zmc2V0KCk7CgkJCWJnUmVmWyBwYXJhbXNbIGJlc3QuZGlyIF0uc25kIF0gPSB7CgkJCQlsZWZ0OiBlbE9mZnNldC5sZWZ0ICsgc3RhdGUuY29udGVudEJveC54LAoJCQkJdG9wOiBlbE9mZnNldC50b3AgKyBzdGF0ZS5jb250ZW50Qm94LnkKCQkJfTsKCQkJYmdPZmZzZXQgPSBhci5iZwoJCQkJLnJlbW92ZUF0dHIoICJzdHlsZSIgKQoJCQkJLmNzcyggKCAiY3giID09PSBwYXJhbXNbIGJlc3QuZGlyIF0uZGltS2V5ID8gIndpZHRoIiA6ICJoZWlnaHQiICksIHN0YXRlLmNvbnRlbnRCb3hbIHBhcmFtc1sgYmVzdC5kaXIgXS5kaW1LZXkgXSApCgkJCQkub2Zmc2V0KCk7CgkJCWRpZmYgPSB7IGR4OiBiZ1JlZi54LmxlZnQgLSBiZ09mZnNldC5sZWZ0LCBkeTogYmdSZWYueS50b3AgLSBiZ09mZnNldC50b3AgfTsKCQkJYXIuYmcuY3NzKCB7IGxlZnQ6IHR4RmFjdG9yICogZGlmZi5keSArIHR4RmFjdG9yICogZGlmZi5keCwgdG9wOiB0eEZhY3RvciAqIGRpZmYuZHkgLSB0eEZhY3RvciAqIGRpZmYuZHggfSApOwoJCX0KCgkJcmV0dXJuIGJlc3QucmVzdWx0OwoJfSwKCglfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdHMgKSB7CgkJdmFyIG5ld1RoZW1lLAoJCQlvbGRUaGVtZSA9IHRoaXMub3B0aW9ucy50aGVtZSwKCQkJYXIgPSB0aGlzLl91aS5hcnJvdywKCQkJcmV0ID0gdGhpcy5fc3VwZXIoIG9wdHMgKTsKCgkJaWYgKCBvcHRzLmFycm93ICE9PSB1bmRlZmluZWQgKSB7CgkJCWlmICggIWFyICYmIG9wdHMuYXJyb3cgKSB7CgkJCQl0aGlzLl91aS5hcnJvdyA9IHRoaXMuX2FkZEFycm93KCk7CgoJCQkJLy8gSW1wb3J0YW50IHRvIHJldHVybiBoZXJlIHNvIHdlIGRvbid0IHNldCB0aGUgc2FtZSBvcHRpb25zIGFsbCBvdmVyCgkJCQkvLyBhZ2FpbiBiZWxvdy4KCQkJCXJldHVybjsKCQkJfSBlbHNlIGlmICggYXIgJiYgIW9wdHMuYXJyb3cgKSB7CgkJCQlhci5hckVscy5yZW1vdmUoKTsKCQkJCXRoaXMuX3VpLmFycm93ID0gbnVsbDsKCQkJfQoJCX0KCgkJLy8gUmVhc3NpZ24gd2l0aCBwb3RlbnRpYWxseSBuZXcgYXJyb3cKCQlhciA9IHRoaXMuX3VpLmFycm93OwoKCQlpZiAoIGFyICkgewoJCQlpZiAoIG9wdHMudGhlbWUgIT09IHVuZGVmaW5lZCApIHsKCQkJCW9sZFRoZW1lID0gdGhpcy5fdGhlbWVDbGFzc0Zyb21PcHRpb24oICJ1aS1ib2R5LSIsIG9sZFRoZW1lICk7CgkJCQluZXdUaGVtZSA9IHRoaXMuX3RoZW1lQ2xhc3NGcm9tT3B0aW9uKCAidWktYm9keS0iLCBvcHRzLnRoZW1lICk7CgkJCQlhci5hci5yZW1vdmVDbGFzcyggb2xkVGhlbWUgKS5hZGRDbGFzcyggbmV3VGhlbWUgKTsKCQkJCWFyLmJnLnJlbW92ZUNsYXNzKCBvbGRUaGVtZSApLmFkZENsYXNzKCBuZXdUaGVtZSApOwoJCQl9CgoJCQlpZiAoIG9wdHMuc2hhZG93ICE9PSB1bmRlZmluZWQgKSB7CgkJCQlhci5hci50b2dnbGVDbGFzcyggInVpLW92ZXJsYXktc2hhZG93Iiwgb3B0cy5zaGFkb3cgKTsKCQkJfQoJCX0KCgkJcmV0dXJuIHJldDsKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCXZhciBhciA9IHRoaXMuX3VpLmFycm93OwoKCQlpZiAoIGFyICkgewoJCQlhci5hckVscy5yZW1vdmUoKTsKCQl9CgoJCXJldHVybiB0aGlzLl9zdXBlcigpOwoJfQp9KTsKCn0pKCBqUXVlcnkgKTsKCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLnBhbmVsIiwgewoJb3B0aW9uczogewoJCWNsYXNzZXM6IHsKCQkJcGFuZWw6ICJ1aS1wYW5lbCIsCgkJCXBhbmVsT3BlbjogInVpLXBhbmVsLW9wZW4iLAoJCQlwYW5lbENsb3NlZDogInVpLXBhbmVsLWNsb3NlZCIsCgkJCXBhbmVsRml4ZWQ6ICJ1aS1wYW5lbC1maXhlZCIsCgkJCXBhbmVsSW5uZXI6ICJ1aS1wYW5lbC1pbm5lciIsCgkJCW1vZGFsOiAidWktcGFuZWwtZGlzbWlzcyIsCgkJCW1vZGFsT3BlbjogInVpLXBhbmVsLWRpc21pc3Mtb3BlbiIsCgkJCXBhZ2VDb250YWluZXI6ICJ1aS1wYW5lbC1wYWdlLWNvbnRhaW5lciIsCgkJCXBhZ2VXcmFwcGVyOiAidWktcGFuZWwtd3JhcHBlciIsCgkJCXBhZ2VGaXhlZFRvb2xiYXI6ICJ1aS1wYW5lbC1maXhlZC10b29sYmFyIiwKCQkJcGFnZUNvbnRlbnRQcmVmaXg6ICJ1aS1wYW5lbC1wYWdlLWNvbnRlbnQiLCAvKiBVc2VkIGZvciB3cmFwcGVyIGFuZCBmaXhlZCB0b29sYmFycyBwb3NpdGlvbiwgZGlzcGxheSBhbmQgb3BlbiBjbGFzc2VzLiAqLwoJCQlhbmltYXRlOiAidWktcGFuZWwtYW5pbWF0ZSIKCQl9LAoJCWFuaW1hdGU6IHRydWUsCgkJdGhlbWU6IG51bGwsCgkJcG9zaXRpb246ICJsZWZ0IiwKCQlkaXNtaXNzaWJsZTogdHJ1ZSwKCQlkaXNwbGF5OiAicmV2ZWFsIiwgLy9hY2NlcHRzIHJldmVhbCwgcHVzaCwgb3ZlcmxheQoJCXN3aXBlQ2xvc2U6IHRydWUsCgkJcG9zaXRpb25GaXhlZDogZmFsc2UKCX0sCgoJX3BhbmVsSUQ6IG51bGwsCglfY2xvc2VMaW5rOiBudWxsLAoJX3BhcmVudFBhZ2U6IG51bGwsCglfcGFnZTogbnVsbCwKCV9tb2RhbDogbnVsbCwKCV9wYW5lbElubmVyOiBudWxsLAoJX3dyYXBwZXI6IG51bGwsCglfZml4ZWRUb29sYmFyczogbnVsbCwKCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl2YXIgZWwgPSB0aGlzLmVsZW1lbnQsCgkJCXBhcmVudFBhZ2UgPSBlbC5jbG9zZXN0KCAiOmpxbURhdGEocm9sZT0ncGFnZScpIiApOwoKCQkvLyBleHBvc2Ugc29tZSBwcml2YXRlIHByb3BzIHRvIG90aGVyIG1ldGhvZHMKCQkkLmV4dGVuZCggdGhpcywgewoJCQlfcGFuZWxJRDogZWwuYXR0ciggImlkIiApLAoJCQlfY2xvc2VMaW5rOiBlbC5maW5kKCAiOmpxbURhdGEocmVsPSdjbG9zZScpIiApLAoJCQlfcGFyZW50UGFnZTogKCBwYXJlbnRQYWdlLmxlbmd0aCA+IDAgKSA/IHBhcmVudFBhZ2UgOiBmYWxzZSwKCQkJX3BhZ2U6IHRoaXMuX2dldFBhZ2UsCgkJCV9wYW5lbElubmVyOiB0aGlzLl9nZXRQYW5lbElubmVyKCksCgkJCV93cmFwcGVyOiB0aGlzLl9nZXRXcmFwcGVyLAoJCQlfZml4ZWRUb29sYmFyczogdGhpcy5fZ2V0Rml4ZWRUb29sYmFycwoJCX0pOwoKCQl0aGlzLl9hZGRQYW5lbENsYXNzZXMoKTsKCgkJLy8gaWYgYW5pbWF0aW5nLCBhZGQgdGhlIGNsYXNzIHRvIGRvIHNvCgkJaWYgKCAkLnN1cHBvcnQuY3NzVHJhbnNmb3JtM2QgJiYgISF0aGlzLm9wdGlvbnMuYW5pbWF0ZSApIHsKCQkJdGhpcy5lbGVtZW50LmFkZENsYXNzKCB0aGlzLm9wdGlvbnMuY2xhc3Nlcy5hbmltYXRlICk7CgkJfQoKCQl0aGlzLl9iaW5kVXBkYXRlTGF5b3V0KCk7CgkJdGhpcy5fYmluZENsb3NlRXZlbnRzKCk7CgkJdGhpcy5fYmluZExpbmtMaXN0ZW5lcnMoKTsKCQl0aGlzLl9iaW5kUGFnZUV2ZW50cygpOwoKCQlpZiAoICEhdGhpcy5vcHRpb25zLmRpc21pc3NpYmxlICkgewoJCQl0aGlzLl9jcmVhdGVNb2RhbCgpOwoJCX0KCgkJdGhpcy5fYmluZFN3aXBlRXZlbnRzKCk7Cgl9LAoKCV9nZXRQYW5lbElubmVyOiBmdW5jdGlvbigpIHsKCQl2YXIgcGFuZWxJbm5lciA9IHRoaXMuZWxlbWVudC5maW5kKCAiLiIgKyB0aGlzLm9wdGlvbnMuY2xhc3Nlcy5wYW5lbElubmVyICk7CgoJCWlmICggcGFuZWxJbm5lci5sZW5ndGggPT09IDAgKSB7CgkJCXBhbmVsSW5uZXIgPSB0aGlzLmVsZW1lbnQuY2hpbGRyZW4oKS53cmFwQWxsKCAiPGRpdiBjbGFzcz0nIiArIHRoaXMub3B0aW9ucy5jbGFzc2VzLnBhbmVsSW5uZXIgKyAiJyAvPiIgKS5wYXJlbnQoKTsKCQl9CgoJCXJldHVybiBwYW5lbElubmVyOwoJfSwKCglfY3JlYXRlTW9kYWw6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpcywKCQkJdGFyZ2V0ID0gc2VsZi5fcGFyZW50UGFnZSA/IHNlbGYuX3BhcmVudFBhZ2UucGFyZW50KCkgOiBzZWxmLmVsZW1lbnQucGFyZW50KCk7CgoJCXNlbGYuX21vZGFsID0gJCggIjxkaXYgY2xhc3M9JyIgKyBzZWxmLm9wdGlvbnMuY2xhc3Nlcy5tb2RhbCArICInIGRhdGEtcGFuZWxpZD0nIiArIHNlbGYuX3BhbmVsSUQgKyAiJz48L2Rpdj4iICkKCQkJLm9uKCAibW91c2Vkb3duIiwgZnVuY3Rpb24oKSB7CgkJCQlzZWxmLmNsb3NlKCk7CgkJCX0pCgkJCS5hcHBlbmRUbyggdGFyZ2V0ICk7Cgl9LAoKCV9nZXRQYWdlOiBmdW5jdGlvbigpIHsKCQl2YXIgcGFnZSA9IHRoaXMuX3BhcmVudFBhZ2UgPyB0aGlzLl9wYXJlbnRQYWdlIDogJCggIi4iICsgJC5tb2JpbGUuYWN0aXZlUGFnZUNsYXNzICk7CgoJCXJldHVybiBwYWdlOwoJfSwKCglfZ2V0V3JhcHBlcjogZnVuY3Rpb24oKSB7CgkJdmFyIHdyYXBwZXIgPSB0aGlzLl9wYWdlKCkuZmluZCggIi4iICsgdGhpcy5vcHRpb25zLmNsYXNzZXMucGFnZVdyYXBwZXIgKTsKCgkJaWYgKCB3cmFwcGVyLmxlbmd0aCA9PT0gMCApIHsKCQkJd3JhcHBlciA9IHRoaXMuX3BhZ2UoKS5jaGlsZHJlbiggIi51aS1oZWFkZXI6bm90KC51aS1oZWFkZXItZml4ZWQpLCAudWktY29udGVudDpub3QoLnVpLXBvcHVwKSwgLnVpLWZvb3Rlcjpub3QoLnVpLWZvb3Rlci1maXhlZCkiICkKCQkJCS53cmFwQWxsKCAiPGRpdiBjbGFzcz0nIiArIHRoaXMub3B0aW9ucy5jbGFzc2VzLnBhZ2VXcmFwcGVyICsgIic+PC9kaXY+IiApCgkJCQkucGFyZW50KCk7CgkJfQoKCQlyZXR1cm4gd3JhcHBlcjsKCX0sCgoJX2dldEZpeGVkVG9vbGJhcnM6IGZ1bmN0aW9uKCkgewoJCXZhciBleHRGaXhlZFRvb2xiYXJzID0gJCggImJvZHkiICkuY2hpbGRyZW4oICIudWktaGVhZGVyLWZpeGVkLCAudWktZm9vdGVyLWZpeGVkIiApLAoJCQlpbnRGaXhlZFRvb2xiYXJzID0gdGhpcy5fcGFnZSgpLmZpbmQoICIudWktaGVhZGVyLWZpeGVkLCAudWktZm9vdGVyLWZpeGVkIiApLAoJCQlmaXhlZFRvb2xiYXJzID0gZXh0Rml4ZWRUb29sYmFycy5hZGQoIGludEZpeGVkVG9vbGJhcnMgKS5hZGRDbGFzcyggdGhpcy5vcHRpb25zLmNsYXNzZXMucGFnZUZpeGVkVG9vbGJhciApOwoKCQlyZXR1cm4gZml4ZWRUb29sYmFyczsKCX0sCgoJX2dldFBvc0Rpc3BsYXlDbGFzc2VzOiBmdW5jdGlvbiggcHJlZml4ICkgewoJCXJldHVybiBwcmVmaXggKyAiLXBvc2l0aW9uLSIgKyB0aGlzLm9wdGlvbnMucG9zaXRpb24gKyAiICIgKyBwcmVmaXggKyAiLWRpc3BsYXktIiArIHRoaXMub3B0aW9ucy5kaXNwbGF5OwoJfSwKCglfZ2V0UGFuZWxDbGFzc2VzOiBmdW5jdGlvbigpIHsKCQl2YXIgcGFuZWxDbGFzc2VzID0gdGhpcy5vcHRpb25zLmNsYXNzZXMucGFuZWwgKwoJCQkiICIgKyB0aGlzLl9nZXRQb3NEaXNwbGF5Q2xhc3NlcyggdGhpcy5vcHRpb25zLmNsYXNzZXMucGFuZWwgKSArCgkJCSIgIiArIHRoaXMub3B0aW9ucy5jbGFzc2VzLnBhbmVsQ2xvc2VkICsKCQkJIiAiICsgInVpLWJvZHktIiArICggdGhpcy5vcHRpb25zLnRoZW1lID8gdGhpcy5vcHRpb25zLnRoZW1lIDogImluaGVyaXQiICk7CgoJCWlmICggISF0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCApIHsKCQkJcGFuZWxDbGFzc2VzICs9ICIgIiArIHRoaXMub3B0aW9ucy5jbGFzc2VzLnBhbmVsRml4ZWQ7CgkJfQoKCQlyZXR1cm4gcGFuZWxDbGFzc2VzOwoJfSwKCglfYWRkUGFuZWxDbGFzc2VzOiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoIHRoaXMuX2dldFBhbmVsQ2xhc3NlcygpICk7Cgl9LAoKCV9iaW5kQ2xvc2VFdmVudHM6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpczsKCgkJc2VsZi5fY2xvc2VMaW5rLm9uKCAiY2xpY2sucGFuZWwiICwgZnVuY3Rpb24oIGUgKSB7CgkJCWUucHJldmVudERlZmF1bHQoKTsKCQkJc2VsZi5jbG9zZSgpOwoJCQlyZXR1cm4gZmFsc2U7CgkJfSk7CgkJc2VsZi5lbGVtZW50Lm9uKCAiY2xpY2sucGFuZWwiICwgImE6anFtRGF0YShhamF4PSdmYWxzZScpIiwgZnVuY3Rpb24oLyogZSAqLykgewoJCQlzZWxmLmNsb3NlKCk7CgkJfSk7Cgl9LAoKCV9wb3NpdGlvblBhbmVsOiBmdW5jdGlvbigpIHsKCQl2YXIgc2VsZiA9IHRoaXMsCgkJCXBhbmVsSW5uZXJIZWlnaHQgPSBzZWxmLl9wYW5lbElubmVyLm91dGVySGVpZ2h0KCksCgkJCWV4cGFuZCA9IHBhbmVsSW5uZXJIZWlnaHQgPiAkLm1vYmlsZS5nZXRTY3JlZW5IZWlnaHQoKTsKCgkJaWYgKCBleHBhbmQgfHwgIXNlbGYub3B0aW9ucy5wb3NpdGlvbkZpeGVkICkgewoJCQlpZiAoIGV4cGFuZCApIHsKCQkJCXNlbGYuX3VuZml4UGFuZWwoKTsKCQkJCSQubW9iaWxlLnJlc2V0QWN0aXZlUGFnZUhlaWdodCggcGFuZWxJbm5lckhlaWdodCApOwoJCQl9CgkJCXdpbmRvdy5zY3JvbGxUbyggMCwgJC5tb2JpbGUuZGVmYXVsdEhvbWVTY3JvbGwgKTsKCQl9IGVsc2UgewoJCQlzZWxmLl9maXhQYW5lbCgpOwoJCX0KCX0sCgoJX2JpbmRGaXhMaXN0ZW5lcjogZnVuY3Rpb24oKSB7CgkJdGhpcy5fb24oICQoIHdpbmRvdyApLCB7ICJ0aHJvdHRsZWRyZXNpemUiOiAiX3Bvc2l0aW9uUGFuZWwiIH0pOwoJfSwKCglfdW5iaW5kRml4TGlzdGVuZXI6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX29mZiggJCggd2luZG93ICksICJ0aHJvdHRsZWRyZXNpemUiICk7Cgl9LAoKCV91bmZpeFBhbmVsOiBmdW5jdGlvbigpIHsKCQlpZiAoICEhdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQgJiYgJC5zdXBwb3J0LmZpeGVkUG9zaXRpb24gKSB7CgkJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggdGhpcy5vcHRpb25zLmNsYXNzZXMucGFuZWxGaXhlZCApOwoJCX0KCX0sCgoJX2ZpeFBhbmVsOiBmdW5jdGlvbigpIHsKCQlpZiAoICEhdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQgJiYgJC5zdXBwb3J0LmZpeGVkUG9zaXRpb24gKSB7CgkJCXRoaXMuZWxlbWVudC5hZGRDbGFzcyggdGhpcy5vcHRpb25zLmNsYXNzZXMucGFuZWxGaXhlZCApOwoJCX0KCX0sCgoJX2JpbmRVcGRhdGVMYXlvdXQ6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpczsKCgkJc2VsZi5lbGVtZW50Lm9uKCAidXBkYXRlbGF5b3V0IiwgZnVuY3Rpb24oLyogZSAqLykgewoJCQlpZiAoIHNlbGYuX29wZW4gKSB7CgkJCQlzZWxmLl9wb3NpdGlvblBhbmVsKCk7CgkJCX0KCQl9KTsKCX0sCgoJX2JpbmRMaW5rTGlzdGVuZXJzOiBmdW5jdGlvbigpIHsKCQl0aGlzLl9vbiggImJvZHkiLCB7CgkJCSJjbGljayBhIjogIl9oYW5kbGVDbGljayIKCQl9KTsKCgl9LAoKCV9oYW5kbGVDbGljazogZnVuY3Rpb24oIGUgKSB7CgkJaWYgKCAgZS5jdXJyZW50VGFyZ2V0LmhyZWYuc3BsaXQoICIjIiApWyAxIF0gPT09IHRoaXMuX3BhbmVsSUQgJiYgdGhpcy5fcGFuZWxJRCAhPT0gdW5kZWZpbmVkICkgewoJCQllLnByZXZlbnREZWZhdWx0KCk7CgkJCXZhciBsaW5rID0gJCggZS50YXJnZXQgKTsKCQkJaWYgKCBsaW5rLmhhc0NsYXNzKCAidWktYnRuIiApICkgewoJCQkJbGluay5hZGRDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJCXRoaXMuZWxlbWVudC5vbmUoICJwYW5lbG9wZW4gcGFuZWxjbG9zZSIsIGZ1bmN0aW9uKCkgewoJCQkJCWxpbmsucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJCQl9KTsKCQkJfQoJCQl0aGlzLnRvZ2dsZSgpOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJfSwKCglfYmluZFN3aXBlRXZlbnRzOiBmdW5jdGlvbigpIHsKCQl2YXIgc2VsZiA9IHRoaXMsCgkJCWFyZWEgPSBzZWxmLl9tb2RhbCA/IHNlbGYuZWxlbWVudC5hZGQoIHNlbGYuX21vZGFsICkgOiBzZWxmLmVsZW1lbnQ7CgoJCS8vIG9uIHN3aXBlLCBjbG9zZSB0aGUgcGFuZWwKCQlpZiAoICEhc2VsZi5vcHRpb25zLnN3aXBlQ2xvc2UgKSB7CgkJCWlmICggc2VsZi5vcHRpb25zLnBvc2l0aW9uID09PSAibGVmdCIgKSB7CgkJCQlhcmVhLm9uKCAic3dpcGVsZWZ0LnBhbmVsIiwgZnVuY3Rpb24oLyogZSAqLykgewoJCQkJCXNlbGYuY2xvc2UoKTsKCQkJCX0pOwoJCQl9IGVsc2UgewoJCQkJYXJlYS5vbiggInN3aXBlcmlnaHQucGFuZWwiLCBmdW5jdGlvbigvKiBlICovKSB7CgkJCQkJc2VsZi5jbG9zZSgpOwoJCQkJfSk7CgkJCX0KCQl9Cgl9LAoKCV9iaW5kUGFnZUV2ZW50czogZnVuY3Rpb24oKSB7CgkJdmFyIHNlbGYgPSB0aGlzOwoKCQl0aGlzLmRvY3VtZW50CgkJCS8vIENsb3NlIHRoZSBwYW5lbCBpZiBhbm90aGVyIHBhbmVsIG9uIHRoZSBwYWdlIG9wZW5zCgkJCS5vbiggInBhbmVsYmVmb3Jlb3BlbiIsIGZ1bmN0aW9uKCBlICkgewoJCQkJaWYgKCBzZWxmLl9vcGVuICYmIGUudGFyZ2V0ICE9PSBzZWxmLmVsZW1lbnRbIDAgXSApIHsKCQkJCQlzZWxmLmNsb3NlKCk7CgkJCQl9CgkJCX0pCgkJCS8vIE9uIGVzY2FwZSwgY2xvc2U/IG1pZ2h0IG5lZWQgdG8gaGF2ZSBhIHRhcmdldCBjaGVjayB0b28uLi4KCQkJLm9uKCAia2V5dXAucGFuZWwiLCBmdW5jdGlvbiggZSApIHsKCQkJCWlmICggZS5rZXlDb2RlID09PSAyNyAmJiBzZWxmLl9vcGVuICkgewoJCQkJCXNlbGYuY2xvc2UoKTsKCQkJCX0KCQkJfSk7CgoJCS8vIENsZWFuIHVwIG9wZW4gcGFuZWxzIGFmdGVyIHBhZ2UgaGlkZQoJCWlmICggc2VsZi5fcGFyZW50UGFnZSApIHsKCQkJdGhpcy5kb2N1bWVudC5vbiggInBhZ2VoaWRlIiwgIjpqcW1EYXRhKHJvbGU9J3BhZ2UnKSIsIGZ1bmN0aW9uKCkgewoJCQkJaWYgKCBzZWxmLl9vcGVuICkgewoJCQkJCXNlbGYuY2xvc2UoIHRydWUgKTsKCQkJCX0KCQkJfSk7CgkJfSBlbHNlIHsKCQkJdGhpcy5kb2N1bWVudC5vbiggInBhZ2ViZWZvcmVoaWRlIiwgZnVuY3Rpb24oKSB7CgkJCQlpZiAoIHNlbGYuX29wZW4gKSB7CgkJCQkJc2VsZi5jbG9zZSggdHJ1ZSApOwoJCQkJfQoJCQl9KTsKCQl9Cgl9LAoKCS8vIHN0YXRlIHN0b3JhZ2Ugb2Ygb3BlbiBvciBjbG9zZWQKCV9vcGVuOiBmYWxzZSwKCV9wYWdlQ29udGVudE9wZW5DbGFzc2VzOiBudWxsLAoJX21vZGFsT3BlbkNsYXNzZXM6IG51bGwsCgoJb3BlbjogZnVuY3Rpb24oIGltbWVkaWF0ZSApIHsKCQlpZiAoICF0aGlzLl9vcGVuICkgewoJCQl2YXIgc2VsZiA9IHRoaXMsCgkJCQlvID0gc2VsZi5vcHRpb25zLAoKCQkJCV9vcGVuUGFuZWwgPSBmdW5jdGlvbigpIHsKCQkJCQlzZWxmLmRvY3VtZW50Lm9mZiggInBhbmVsY2xvc2UiICk7CgkJCQkJc2VsZi5fcGFnZSgpLmpxbURhdGEoICJwYW5lbCIsICJvcGVuIiApOwoKCQkJCQlpZiAoICQuc3VwcG9ydC5jc3NUcmFuc2Zvcm0zZCAmJiAhIW8uYW5pbWF0ZSAmJiBvLmRpc3BsYXkgIT09ICJvdmVybGF5IiApIHsKCQkJCQkJc2VsZi5fd3JhcHBlcigpLmFkZENsYXNzKCBvLmNsYXNzZXMuYW5pbWF0ZSApOwoJCQkJCQlzZWxmLl9maXhlZFRvb2xiYXJzKCkuYWRkQ2xhc3MoIG8uY2xhc3Nlcy5hbmltYXRlICk7CgkJCQkJfQoKCQkJCQlpZiAoICFpbW1lZGlhdGUgJiYgJC5zdXBwb3J0LmNzc1RyYW5zZm9ybTNkICYmICEhby5hbmltYXRlICkgewoJCQkJCQlzZWxmLmRvY3VtZW50Lm9uKCBzZWxmLl90cmFuc2l0aW9uRW5kRXZlbnRzLCBjb21wbGV0ZSApOwoJCQkJCX0gZWxzZSB7CgkJCQkJCXNldFRpbWVvdXQoIGNvbXBsZXRlLCAwICk7CgkJCQkJfQoKCQkJCQlpZiAoIG8udGhlbWUgJiYgby5kaXNwbGF5ICE9PSAib3ZlcmxheSIgKSB7CgkJCQkJCXNlbGYuX3BhZ2UoKS5wYXJlbnQoKQoJCQkJCQkJLmFkZENsYXNzKCBvLmNsYXNzZXMucGFnZUNvbnRhaW5lciArICItdGhlbWVkICIgKyBvLmNsYXNzZXMucGFnZUNvbnRhaW5lciArICItIiArIG8udGhlbWUgKTsKCQkJCQl9CgoJCQkJCXNlbGYuZWxlbWVudAoJCQkJCQkucmVtb3ZlQ2xhc3MoIG8uY2xhc3Nlcy5wYW5lbENsb3NlZCApCgkJCQkJCS5hZGRDbGFzcyggby5jbGFzc2VzLnBhbmVsT3BlbiApOwoKCQkJCQlzZWxmLl9wb3NpdGlvblBhbmVsKCk7CgoJCQkJCXNlbGYuX3BhZ2VDb250ZW50T3BlbkNsYXNzZXMgPSBzZWxmLl9nZXRQb3NEaXNwbGF5Q2xhc3Nlcyggby5jbGFzc2VzLnBhZ2VDb250ZW50UHJlZml4ICk7CgoJCQkJCWlmICggby5kaXNwbGF5ICE9PSAib3ZlcmxheSIgKSB7CgkJCQkJCXNlbGYuX3BhZ2UoKS5wYXJlbnQoKS5hZGRDbGFzcyggby5jbGFzc2VzLnBhZ2VDb250YWluZXIgKTsKCQkJCQkJc2VsZi5fd3JhcHBlcigpLmFkZENsYXNzKCBzZWxmLl9wYWdlQ29udGVudE9wZW5DbGFzc2VzICk7CgkJCQkJCXNlbGYuX2ZpeGVkVG9vbGJhcnMoKS5hZGRDbGFzcyggc2VsZi5fcGFnZUNvbnRlbnRPcGVuQ2xhc3NlcyApOwoJCQkJCX0KCgkJCQkJc2VsZi5fbW9kYWxPcGVuQ2xhc3NlcyA9IHNlbGYuX2dldFBvc0Rpc3BsYXlDbGFzc2VzKCBvLmNsYXNzZXMubW9kYWwgKSArICIgIiArIG8uY2xhc3Nlcy5tb2RhbE9wZW47CgkJCQkJaWYgKCBzZWxmLl9tb2RhbCApIHsKCQkJCQkJc2VsZi5fbW9kYWwKCQkJCQkJCS5hZGRDbGFzcyggc2VsZi5fbW9kYWxPcGVuQ2xhc3NlcyApCgkJCQkJCQkuaGVpZ2h0KCBNYXRoLm1heCggc2VsZi5fbW9kYWwuaGVpZ2h0KCksIHNlbGYuZG9jdW1lbnQuaGVpZ2h0KCkgKSApOwoJCQkJCX0KCQkJCX0sCgkJCQljb21wbGV0ZSA9IGZ1bmN0aW9uKCkgewoJCQkJCXNlbGYuZG9jdW1lbnQub2ZmKCBzZWxmLl90cmFuc2l0aW9uRW5kRXZlbnRzLCBjb21wbGV0ZSApOwoKCQkJCQlpZiAoIG8uZGlzcGxheSAhPT0gIm92ZXJsYXkiICkgewoJCQkJCQlzZWxmLl93cmFwcGVyKCkuYWRkQ2xhc3MoIG8uY2xhc3Nlcy5wYWdlQ29udGVudFByZWZpeCArICItb3BlbiIgKTsKCQkJCQkJc2VsZi5fZml4ZWRUb29sYmFycygpLmFkZENsYXNzKCBvLmNsYXNzZXMucGFnZUNvbnRlbnRQcmVmaXggKyAiLW9wZW4iICk7CgkJCQkJfQoKCQkJCQlzZWxmLl9iaW5kRml4TGlzdGVuZXIoKTsKCgkJCQkJc2VsZi5fdHJpZ2dlciggIm9wZW4iICk7CgkJCQl9OwoKCQkJc2VsZi5fdHJpZ2dlciggImJlZm9yZW9wZW4iICk7CgoJCQlpZiAoIHNlbGYuX3BhZ2UoKS5qcW1EYXRhKCAicGFuZWwiICkgPT09ICJvcGVuIiApIHsKCQkJCXNlbGYuZG9jdW1lbnQub24oICJwYW5lbGNsb3NlIiwgZnVuY3Rpb24oKSB7CgkJCQkJX29wZW5QYW5lbCgpOwoJCQkJfSk7CgkJCX0gZWxzZSB7CgkJCQlfb3BlblBhbmVsKCk7CgkJCX0KCgkJCXNlbGYuX29wZW4gPSB0cnVlOwoJCX0KCX0sCgoJY2xvc2U6IGZ1bmN0aW9uKCBpbW1lZGlhdGUgKSB7CgkJaWYgKCB0aGlzLl9vcGVuICkgewoJCQl2YXIgc2VsZiA9IHRoaXMsCgkJCQlvID0gdGhpcy5vcHRpb25zLAoKCQkJCV9jbG9zZVBhbmVsID0gZnVuY3Rpb24oKSB7CgkJCQkJaWYgKCAhaW1tZWRpYXRlICYmICQuc3VwcG9ydC5jc3NUcmFuc2Zvcm0zZCAmJiAhIW8uYW5pbWF0ZSApIHsKCQkJCQkJc2VsZi5kb2N1bWVudC5vbiggc2VsZi5fdHJhbnNpdGlvbkVuZEV2ZW50cywgY29tcGxldGUgKTsKCQkJCQl9IGVsc2UgewoJCQkJCQlzZXRUaW1lb3V0KCBjb21wbGV0ZSwgMCApOwoJCQkJCX0KCgkJCQkJc2VsZi5lbGVtZW50LnJlbW92ZUNsYXNzKCBvLmNsYXNzZXMucGFuZWxPcGVuICk7CgoJCQkJCWlmICggby5kaXNwbGF5ICE9PSAib3ZlcmxheSIgKSB7CgkJCQkJCXNlbGYuX3dyYXBwZXIoKS5yZW1vdmVDbGFzcyggc2VsZi5fcGFnZUNvbnRlbnRPcGVuQ2xhc3NlcyApOwoJCQkJCQlzZWxmLl9maXhlZFRvb2xiYXJzKCkucmVtb3ZlQ2xhc3MoIHNlbGYuX3BhZ2VDb250ZW50T3BlbkNsYXNzZXMgKTsKCQkJCQl9CgoJCQkJCWlmICggc2VsZi5fbW9kYWwgKSB7CgkJCQkJCXNlbGYuX21vZGFsLnJlbW92ZUNsYXNzKCBzZWxmLl9tb2RhbE9wZW5DbGFzc2VzICk7CgkJCQkJfQoJCQkJfSwKCQkJCWNvbXBsZXRlID0gZnVuY3Rpb24oKSB7CgkJCQkJc2VsZi5kb2N1bWVudC5vZmYoIHNlbGYuX3RyYW5zaXRpb25FbmRFdmVudHMsIGNvbXBsZXRlICk7CgoJCQkJCWlmICggby50aGVtZSAmJiBvLmRpc3BsYXkgIT09ICJvdmVybGF5IiApIHsKCQkJCQkJc2VsZi5fcGFnZSgpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCBvLmNsYXNzZXMucGFnZUNvbnRhaW5lciArICItdGhlbWVkICIgKyBvLmNsYXNzZXMucGFnZUNvbnRhaW5lciArICItIiArIG8udGhlbWUgKTsKCQkJCQl9CgoJCQkJCXNlbGYuZWxlbWVudC5hZGRDbGFzcyggby5jbGFzc2VzLnBhbmVsQ2xvc2VkICk7CgoJCQkJCWlmICggby5kaXNwbGF5ICE9PSAib3ZlcmxheSIgKSB7CgkJCQkJCXNlbGYuX3BhZ2UoKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyggby5jbGFzc2VzLnBhZ2VDb250YWluZXIgKTsKCQkJCQkJc2VsZi5fd3JhcHBlcigpLnJlbW92ZUNsYXNzKCBvLmNsYXNzZXMucGFnZUNvbnRlbnRQcmVmaXggKyAiLW9wZW4iICk7CgkJCQkJCXNlbGYuX2ZpeGVkVG9vbGJhcnMoKS5yZW1vdmVDbGFzcyggby5jbGFzc2VzLnBhZ2VDb250ZW50UHJlZml4ICsgIi1vcGVuIiApOwoJCQkJCX0KCgkJCQkJaWYgKCAkLnN1cHBvcnQuY3NzVHJhbnNmb3JtM2QgJiYgISFvLmFuaW1hdGUgJiYgby5kaXNwbGF5ICE9PSAib3ZlcmxheSIgKSB7CgkJCQkJCXNlbGYuX3dyYXBwZXIoKS5yZW1vdmVDbGFzcyggby5jbGFzc2VzLmFuaW1hdGUgKTsKCQkJCQkJc2VsZi5fZml4ZWRUb29sYmFycygpLnJlbW92ZUNsYXNzKCBvLmNsYXNzZXMuYW5pbWF0ZSApOwoJCQkJCX0KCgkJCQkJc2VsZi5fZml4UGFuZWwoKTsKCQkJCQlzZWxmLl91bmJpbmRGaXhMaXN0ZW5lcigpOwoJCQkJCSQubW9iaWxlLnJlc2V0QWN0aXZlUGFnZUhlaWdodCgpOwoKCQkJCQlzZWxmLl9wYWdlKCkuanFtUmVtb3ZlRGF0YSggInBhbmVsIiApOwoKCQkJCQlzZWxmLl90cmlnZ2VyKCAiY2xvc2UiICk7CgkJCQl9OwoKCQkJc2VsZi5fdHJpZ2dlciggImJlZm9yZWNsb3NlIiApOwoKCQkJX2Nsb3NlUGFuZWwoKTsKCgkJCXNlbGYuX29wZW4gPSBmYWxzZTsKCQl9Cgl9LAoKCXRvZ2dsZTogZnVuY3Rpb24oKSB7CgkJdGhpc1sgdGhpcy5fb3BlbiA/ICJjbG9zZSIgOiAib3BlbiIgXSgpOwoJfSwKCglfdHJhbnNpdGlvbkVuZEV2ZW50czogIndlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQgdHJhbnNpdGlvbmVuZCBtc1RyYW5zaXRpb25FbmQiLAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQl2YXIgb3RoZXJQYW5lbHMsCgkJbyA9IHRoaXMub3B0aW9ucywKCQltdWx0aXBsZVBhbmVscyA9ICggJCggImJvZHkgPiA6bW9iaWxlLXBhbmVsIiApLmxlbmd0aCArICQubW9iaWxlLmFjdGl2ZVBhZ2UuZmluZCggIjptb2JpbGUtcGFuZWwiICkubGVuZ3RoICkgPiAxOwoKCQlpZiAoIG8uZGlzcGxheSAhPT0gIm92ZXJsYXkiICkgewoKCQkJLy8gIHJlbW92ZSB0aGUgd3JhcHBlciBpZiBub3QgaW4gdXNlIGJ5IGFub3RoZXIgcGFuZWwKCQkJb3RoZXJQYW5lbHMgPSAkKCAiYm9keSA+IDptb2JpbGUtcGFuZWwiICkuYWRkKCAkLm1vYmlsZS5hY3RpdmVQYWdlLmZpbmQoICI6bW9iaWxlLXBhbmVsIiApICk7CgkJCWlmICggb3RoZXJQYW5lbHMubm90KCAiLnVpLXBhbmVsLWRpc3BsYXktb3ZlcmxheSIgKS5ub3QoIHRoaXMuZWxlbWVudCApLmxlbmd0aCA9PT0gMCApIHsKCQkJCXRoaXMuX3dyYXBwZXIoKS5jaGlsZHJlbigpLnVud3JhcCgpOwoJCQl9CgoJCQlpZiAoIHRoaXMuX29wZW4gKSB7CgoJCQkJdGhpcy5fZml4ZWRUb29sYmFycygpLnJlbW92ZUNsYXNzKCBvLmNsYXNzZXMucGFnZUNvbnRlbnRQcmVmaXggKyAiLW9wZW4iICk7CgoJCQkJaWYgKCAkLnN1cHBvcnQuY3NzVHJhbnNmb3JtM2QgJiYgISFvLmFuaW1hdGUgKSB7CgkJCQkJdGhpcy5fZml4ZWRUb29sYmFycygpLnJlbW92ZUNsYXNzKCBvLmNsYXNzZXMuYW5pbWF0ZSApOwoJCQkJfQoKCQkJCXRoaXMuX3BhZ2UoKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyggby5jbGFzc2VzLnBhZ2VDb250YWluZXIgKTsKCgkJCQlpZiAoIG8udGhlbWUgKSB7CgkJCQkJdGhpcy5fcGFnZSgpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCBvLmNsYXNzZXMucGFnZUNvbnRhaW5lciArICItdGhlbWVkICIgKyBvLmNsYXNzZXMucGFnZUNvbnRhaW5lciArICItIiArIG8udGhlbWUgKTsKCQkJCX0KCQkJfQoJCX0KCgkJaWYgKCAhbXVsdGlwbGVQYW5lbHMgKSB7CgoJCQl0aGlzLmRvY3VtZW50Lm9mZiggInBhbmVsb3BlbiBwYW5lbGNsb3NlIiApOwoKCQkJaWYgKCB0aGlzLl9vcGVuICkgewoJCQkJdGhpcy5kb2N1bWVudC5vZmYoIHRoaXMuX3RyYW5zaXRpb25FbmRFdmVudHMgKTsKCQkJCSQubW9iaWxlLnJlc2V0QWN0aXZlUGFnZUhlaWdodCgpOwoJCQl9CgkJfQoKCQlpZiAoIHRoaXMuX29wZW4gKSB7CgkJCXRoaXMuX3BhZ2UoKS5qcW1SZW1vdmVEYXRhKCAicGFuZWwiICk7CgkJfQoKCQl0aGlzLl9wYW5lbElubmVyLmNoaWxkcmVuKCkudW53cmFwKCk7CgoJCXRoaXMuZWxlbWVudAoJCQkucmVtb3ZlQ2xhc3MoIFsgdGhpcy5fZ2V0UGFuZWxDbGFzc2VzKCksIG8uY2xhc3Nlcy5wYW5lbE9wZW4sIG8uY2xhc3Nlcy5hbmltYXRlIF0uam9pbiggIiAiICkgKQoJCQkub2ZmKCAic3dpcGVsZWZ0LnBhbmVsIHN3aXBlcmlnaHQucGFuZWwiICkKCQkJLm9mZiggInBhbmVsYmVmb3Jlb3BlbiIgKQoJCQkub2ZmKCAicGFuZWxoaWRlIiApCgkJCS5vZmYoICJrZXl1cC5wYW5lbCIgKQoJCQkub2ZmKCAidXBkYXRlbGF5b3V0IiApCgkJCS5vZmYoIHRoaXMuX3RyYW5zaXRpb25FbmRFdmVudHMgKTsKCgkJdGhpcy5fY2xvc2VMaW5rLm9mZiggImNsaWNrLnBhbmVsIiApOwoKCQlpZiAoIHRoaXMuX21vZGFsICkgewoJCQl0aGlzLl9tb2RhbC5yZW1vdmUoKTsKCQl9Cgl9Cn0pOwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS50YWJsZSIsIHsKCW9wdGlvbnM6IHsKCQljbGFzc2VzOiB7CgkJCXRhYmxlOiAidWktdGFibGUiCgkJfSwKCQllbmhhbmNlZDogZmFsc2UKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJaWYgKCAhdGhpcy5vcHRpb25zLmVuaGFuY2VkICkgewoJCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoIHRoaXMub3B0aW9ucy5jbGFzc2VzLnRhYmxlICk7CgkJfQoKCQkvLyBleHRlbmQgaGVyZSwgYXNzaWduIG9uIHJlZnJlc2ggPiBfc2V0SGVhZGVycwoJCSQuZXh0ZW5kKCB0aGlzLCB7CgoJCQkvLyBFeHBvc2UgaGVhZGVycyBhbmQgYWxsSGVhZGVycyBwcm9wZXJ0aWVzIG9uIHRoZSB3aWRnZXQKCQkJLy8gaGVhZGVycyByZWZlcmVuY2VzIHRoZSBUSHMgd2l0aGluIHRoZSBmaXJzdCBUUiBpbiB0aGUgdGFibGUKCQkJaGVhZGVyczogdW5kZWZpbmVkLAoKCQkJLy8gYWxsSGVhZGVycyByZWZlcmVuY2VzIGhlYWRlcnMsIHBsdXMgYWxsIFRIcyBpbiB0aGUgdGhlYWQsIHdoaWNoIG1heQoJCQkvLyBpbmNsdWRlIHNldmVyYWwgcm93cywgb3Igbm90CgkJCWFsbEhlYWRlcnM6IHVuZGVmaW5lZAoJCX0pOwoKCQl0aGlzLl9yZWZyZXNoKCB0cnVlICk7Cgl9LAoKCV9zZXRIZWFkZXJzOiBmdW5jdGlvbigpIHsKCQl2YXIgdHJzID0gdGhpcy5lbGVtZW50LmZpbmQoICJ0aGVhZCB0ciIgKTsKCgkJdGhpcy5oZWFkZXJzID0gdGhpcy5lbGVtZW50LmZpbmQoICJ0cjplcSgwKSIgKS5jaGlsZHJlbigpOwoJCXRoaXMuYWxsSGVhZGVycyA9IHRoaXMuaGVhZGVycy5hZGQoIHRycy5jaGlsZHJlbigpICk7Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX3JlZnJlc2goKTsKCX0sCgoJcmVidWlsZDogJC5ub29wLAoKCV9yZWZyZXNoOiBmdW5jdGlvbiggLyogY3JlYXRlICovICkgewoJCXZhciB0YWJsZSA9IHRoaXMuZWxlbWVudCwKCQkJdHJzID0gdGFibGUuZmluZCggInRoZWFkIHRyIiApOwoKCQkvLyB1cGRhdGluZyBoZWFkZXJzIG9uIHJlZnJlc2ggKGZpeGVzICM1ODgwKQoJCXRoaXMuX3NldEhlYWRlcnMoKTsKCgkJLy8gSXRlcmF0ZSBvdmVyIHRoZSB0cnMKCQl0cnMuZWFjaCggZnVuY3Rpb24oKSB7CgkJCXZhciBjb2x1bW5Db3VudCA9IDA7CgoJCQkvLyBJdGVyYXRlIG92ZXIgdGhlIGNoaWxkcmVuIG9mIHRoZSB0cgoJCQkkKCB0aGlzICkuY2hpbGRyZW4oKS5lYWNoKCBmdW5jdGlvbigpIHsKCQkJCXZhciBzcGFuID0gcGFyc2VJbnQoIHRoaXMuZ2V0QXR0cmlidXRlKCAiY29sc3BhbiIgKSwgMTAgKSwKCQkJCQlzZWxlY3RvciA9ICI6bnRoLWNoaWxkKCIgKyAoIGNvbHVtbkNvdW50ICsgMSApICsgIikiLAoJCQkJCWo7CgoJCQkJdGhpcy5zZXRBdHRyaWJ1dGUoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJjb2xzdGFydCIsIGNvbHVtbkNvdW50ICsgMSApOwoKCQkJCWlmICggc3BhbiApIHsKCQkJCQlmb3IoIGogPSAwOyBqIDwgc3BhbiAtIDE7IGorKyApIHsKCQkJCQkJY29sdW1uQ291bnQrKzsKCQkJCQkJc2VsZWN0b3IgKz0gIiwgOm50aC1jaGlsZCgiICsgKCBjb2x1bW5Db3VudCArIDEgKSArICIpIjsKCQkJCQl9CgkJCQl9CgoJCQkJLy8gU3RvcmUgImNlbGxzIiBkYXRhIG9uIGhlYWRlciBhcyBhIHJlZmVyZW5jZSB0byBhbGwgY2VsbHMgaW4gdGhlCgkJCQkvLyBzYW1lIGNvbHVtbiBhcyB0aGlzIFRICgkJCQkkKCB0aGlzICkuanFtRGF0YSggImNlbGxzIiwgdGFibGUuZmluZCggInRyIiApLm5vdCggdHJzLmVxKCAwICkgKS5ub3QoIHRoaXMgKS5jaGlsZHJlbiggc2VsZWN0b3IgKSApOwoKCQkJCWNvbHVtbkNvdW50Kys7CgkJCX0pOwoJCX0pOwoJfQp9KTsKCn0pKCBqUXVlcnkgKTsKCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLnRhYmxlIiwgJC5tb2JpbGUudGFibGUsIHsKCW9wdGlvbnM6IHsKCQltb2RlOiAiY29sdW1udG9nZ2xlIiwKCQljb2x1bW5CdG5UaGVtZTogbnVsbCwKCQljb2x1bW5Qb3B1cFRoZW1lOiBudWxsLAoJCWNvbHVtbkJ0blRleHQ6ICJDb2x1bW5zLi4uIiwKCQljbGFzc2VzOiAkLmV4dGVuZCggJC5tb2JpbGUudGFibGUucHJvdG90eXBlLm9wdGlvbnMuY2xhc3NlcywgewoJCQlwb3B1cDogInVpLXRhYmxlLWNvbHVtbnRvZ2dsZS1wb3B1cCIsCgkJCWNvbHVtbkJ0bjogInVpLXRhYmxlLWNvbHVtbnRvZ2dsZS1idG4iLAoJCQlwcmlvcml0eVByZWZpeDogInVpLXRhYmxlLXByaW9yaXR5LSIsCgkJCWNvbHVtblRvZ2dsZVRhYmxlOiAidWktdGFibGUtY29sdW1udG9nZ2xlIgoJCX0pCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX3N1cGVyKCk7CgoJCWlmICggdGhpcy5vcHRpb25zLm1vZGUgIT09ICJjb2x1bW50b2dnbGUiICkgewoJCQlyZXR1cm47CgkJfQoKCQkkLmV4dGVuZCggdGhpcywgewoJCQlfbWVudTogbnVsbAoJCX0pOwoKCQlpZiAoIHRoaXMub3B0aW9ucy5lbmhhbmNlZCApIHsKCQkJdGhpcy5fbWVudSA9ICQoIHRoaXMuZG9jdW1lbnRbIDAgXS5nZXRFbGVtZW50QnlJZCggdGhpcy5faWQoKSArICItcG9wdXAiICkgKS5jaGlsZHJlbigpLmZpcnN0KCk7CgkJCXRoaXMuX2FkZFRvZ2dsZXMoIHRoaXMuX21lbnUsIHRydWUgKTsKCQkJdGhpcy5fYmluZFRvZ2dsZXMoIHRoaXMuX21lbnUgKTsKCQl9IGVsc2UgewoJCQl0aGlzLl9tZW51ID0gdGhpcy5fZW5oYW5jZUNvbFRvZ2dsZSgpOwoJCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoIHRoaXMub3B0aW9ucy5jbGFzc2VzLmNvbHVtblRvZ2dsZVRhYmxlICk7CgkJfQoKCQl0aGlzLl9zZXR1cEV2ZW50cygpOwoKCQl0aGlzLl9zZXRUb2dnbGVTdGF0ZSgpOwoJfSwKCglfaWQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiAoIHRoaXMuZWxlbWVudC5hdHRyKCAiaWQiICkgfHwgKCB0aGlzLndpZGdldE5hbWUgKyB0aGlzLnV1aWQgKSApOwoJfSwKCglfc2V0dXBFdmVudHM6IGZ1bmN0aW9uKCkgewoJCS8vTk9URTogaW5wdXRzIGFyZSBib3VuZCBpbiBiaW5kVG9nZ2xlcywKCQkvLyBzbyBpdCBjYW4gYmUgY2FsbGVkIG9uIHJlZnJlc2gsIHRvbwoKCQkvLyB1cGRhdGUgY29sdW1uIHRvZ2dsZXMgb24gcmVzaXplCgkJdGhpcy5fb24oIHRoaXMud2luZG93LCB7CgkJCXRocm90dGxlZHJlc2l6ZTogIl9zZXRUb2dnbGVTdGF0ZSIKCQl9KTsKCX0sCgoJX2JpbmRUb2dnbGVzOiBmdW5jdGlvbiggbWVudSApIHsKCQl2YXIgaW5wdXRzID0gbWVudS5maW5kKCAiaW5wdXQiICk7CgoJCXRoaXMuX29uKCBpbnB1dHMsIHsKCQkJY2hhbmdlOiAiX21lbnVJbnB1dENoYW5nZSIKCQl9KTsKCX0sCgoJX2FkZFRvZ2dsZXM6IGZ1bmN0aW9uKCBtZW51LCBrZWVwICkgewoJCXZhciBpbnB1dHMsCgkJCWNoZWNrYm94SW5kZXggPSAwLAoJCQlvcHRzID0gdGhpcy5vcHRpb25zLAoJCQljb250YWluZXIgPSBtZW51LmNvbnRyb2xncm91cCggImNvbnRhaW5lciIgKTsKCgkJLy8gYWxsb3cgdXBkYXRlIG9mIG1lbnUgb24gcmVmcmVzaCAoZml4ZXMgIzU4ODApCgkJaWYgKCBrZWVwICkgewoJCQlpbnB1dHMgPSBtZW51LmZpbmQoICJpbnB1dCIgKTsKCQl9IGVsc2UgewoJCQljb250YWluZXIuZW1wdHkoKTsKCQl9CgoJCS8vIGNyZWF0ZSB0aGUgaGlkZS9zaG93IHRvZ2dsZXMKCQl0aGlzLmhlYWRlcnMubm90KCAidGQiICkuZWFjaCggZnVuY3Rpb24oKSB7CgkJCXZhciBoZWFkZXIgPSAkKCB0aGlzICksCgkJCQlwcmlvcml0eSA9ICQubW9iaWxlLmdldEF0dHJpYnV0ZSggdGhpcywgInByaW9yaXR5IiApLAoJCQkJY2VsbHMgPSBoZWFkZXIuYWRkKCBoZWFkZXIuanFtRGF0YSggImNlbGxzIiApICk7CgoJCQlpZiAoIHByaW9yaXR5ICkgewoJCQkJY2VsbHMuYWRkQ2xhc3MoIG9wdHMuY2xhc3Nlcy5wcmlvcml0eVByZWZpeCArIHByaW9yaXR5ICk7CgoJCQkJKCBrZWVwID8gaW5wdXRzLmVxKCBjaGVja2JveEluZGV4KysgKSA6CgkJCQkJJCgiPGxhYmVsPjxpbnB1dCB0eXBlPSdjaGVja2JveCcgY2hlY2tlZCAvPiIgKwoJCQkJCQkoIGhlYWRlci5jaGlsZHJlbiggImFiYnIiICkuZmlyc3QoKS5hdHRyKCAidGl0bGUiICkgfHwKCQkJCQkJCWhlYWRlci50ZXh0KCkgKSArCgkJCQkJCSI8L2xhYmVsPiIgKQoJCQkJCQkuYXBwZW5kVG8oIGNvbnRhaW5lciApCgkJCQkJCS5jaGlsZHJlbiggMCApCgkJCQkJCS5jaGVja2JveHJhZGlvKCB7CgkJCQkJCQl0aGVtZTogb3B0cy5jb2x1bW5Qb3B1cFRoZW1lCgkJCQkJCX0pICkKCQkJCQkuanFtRGF0YSggImNlbGxzIiwgY2VsbHMgKTsKCQkJfQoJCX0pOwoKCQkvLyBzZXQgYmluZGluZ3MgaGVyZQoJCWlmICggIWtlZXAgKSB7CgkJCW1lbnUuY29udHJvbGdyb3VwKCAicmVmcmVzaCIgKTsKCQkJdGhpcy5fYmluZFRvZ2dsZXMoIG1lbnUgKTsKCQl9Cgl9LAoKCV9tZW51SW5wdXRDaGFuZ2U6IGZ1bmN0aW9uKCBldnQgKSB7CgkJdmFyIGlucHV0ID0gJCggZXZ0LnRhcmdldCApLAoJCQljaGVja2VkID0gaW5wdXRbIDAgXS5jaGVja2VkOwoKCQlpbnB1dC5qcW1EYXRhKCAiY2VsbHMiICkKCQkJLnRvZ2dsZUNsYXNzKCAidWktdGFibGUtY2VsbC1oaWRkZW4iLCAhY2hlY2tlZCApCgkJCS50b2dnbGVDbGFzcyggInVpLXRhYmxlLWNlbGwtdmlzaWJsZSIsIGNoZWNrZWQgKTsKCgkJaWYgKCBpbnB1dFsgMCBdLmdldEF0dHJpYnV0ZSggImxvY2tlZCIgKSApIHsKCQkJaW5wdXQucmVtb3ZlQXR0ciggImxvY2tlZCIgKTsKCgkJCXRoaXMuX3VubG9ja0NlbGxzKCBpbnB1dC5qcW1EYXRhKCAiY2VsbHMiICkgKTsKCQl9IGVsc2UgewoJCQlpbnB1dC5hdHRyKCAibG9ja2VkIiwgdHJ1ZSApOwoJCX0KCX0sCgoJX3VubG9ja0NlbGxzOiBmdW5jdGlvbiggY2VsbHMgKSB7CgkJLy8gYWxsb3cgaGlkZS9zaG93IHZpYSBDU1Mgb25seSA9IHJlbW92ZSBhbGwgdG9nZ2xlLWxvY2tzCgkJY2VsbHMucmVtb3ZlQ2xhc3MoICJ1aS10YWJsZS1jZWxsLWhpZGRlbiB1aS10YWJsZS1jZWxsLXZpc2libGUiKTsKCX0sCgoJX2VuaGFuY2VDb2xUb2dnbGU6IGZ1bmN0aW9uKCkgewoJCXZhciBpZCAsIG1lbnVCdXR0b24sIHBvcHVwLCBtZW51LAoJCQl0YWJsZSA9IHRoaXMuZWxlbWVudCwKCQkJb3B0cyA9IHRoaXMub3B0aW9ucywKCQkJbnMgPSAkLm1vYmlsZS5ucywKCQkJZnJhZ21lbnQgPSB0aGlzLmRvY3VtZW50WyAwIF0uY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwoKCQlpZCA9IHRoaXMuX2lkKCkgKyAiLXBvcHVwIjsKCQltZW51QnV0dG9uID0gJCggIjxhIGhyZWY9JyMiICsgaWQgKyAiJyAiICsKCQkJImNsYXNzPSciICsgb3B0cy5jbGFzc2VzLmNvbHVtbkJ0biArICIgdWktYnRuICIgKwoJCQkidWktYnRuLSIgKyAoIG9wdHMuY29sdW1uQnRuVGhlbWUgfHwgImEiICkgKwoJCQkiIHVpLWNvcm5lci1hbGwgdWktc2hhZG93IHVpLW1pbmknICIgKwoJCQkiZGF0YS0iICsgbnMgKyAicmVsPSdwb3B1cCc+IiArIG9wdHMuY29sdW1uQnRuVGV4dCArICI8L2E+IiApOwoJCXBvcHVwID0gJCggIjxkaXYgY2xhc3M9JyIgKyBvcHRzLmNsYXNzZXMucG9wdXAgKyAiJyBpZD0nIiArIGlkICsgIic+PC9kaXY+IiApOwoJCW1lbnUgPSAkKCAiPGZpZWxkc2V0PjwvZmllbGRzZXQ+IiApLmNvbnRyb2xncm91cCgpOwoKCQkvLyBzZXQgZXh0ZW5zaW9uIGhlcmUsIHNlbmQgImZhbHNlIiB0byB0cmlnZ2VyIGJ1aWxkL3JlYnVpbGQKCQl0aGlzLl9hZGRUb2dnbGVzKCBtZW51LCBmYWxzZSApOwoKCQltZW51LmFwcGVuZFRvKCBwb3B1cCApOwoKCQlmcmFnbWVudC5hcHBlbmRDaGlsZCggcG9wdXBbIDAgXSApOwoJCWZyYWdtZW50LmFwcGVuZENoaWxkKCBtZW51QnV0dG9uWyAwIF0gKTsKCQl0YWJsZS5iZWZvcmUoIGZyYWdtZW50ICk7CgoJCXBvcHVwLnBvcHVwKCk7CgoJCXJldHVybiBtZW51OwoJfSwKCglyZWJ1aWxkOiBmdW5jdGlvbigpIHsKCQl0aGlzLl9zdXBlcigpOwoKCQlpZiAoIHRoaXMub3B0aW9ucy5tb2RlID09PSAiY29sdW1udG9nZ2xlIiApIHsKCQkJLy8gTk9URTogcmVidWlsZCBwYXNzZXMgImZhbHNlIiwgd2hpbGUgcmVmcmVzaCBwYXNzZXMgInVuZGVmaW5lZCIKCQkJLy8gYm90aCByZWZyZXNoIHRoZSB0YWJsZSwgYnV0IGluc2lkZSBhZGRUb2dnbGVzLCAhZmFsc2Ugd2lsbCBiZSB0cnVlLAoJCQkvLyBzbyBhIHJlYnVpbGQgY2FsbCBjYW4gYmUgaW5kZW50aWZpZWQKCQkJdGhpcy5fcmVmcmVzaCggZmFsc2UgKTsKCQl9Cgl9LAoKCV9yZWZyZXNoOiBmdW5jdGlvbiggY3JlYXRlICkgewoJCXRoaXMuX3N1cGVyKCBjcmVhdGUgKTsKCgkJaWYgKCAhY3JlYXRlICYmIHRoaXMub3B0aW9ucy5tb2RlID09PSAiY29sdW1udG9nZ2xlIiApIHsKCQkJLy8gY29sdW1ucyBub3QgYmVpbmcgcmVwbGFjZWQgbXVzdCBiZSBjbGVhcmVkIGZyb20gaW5wdXQgdG9nZ2xlLWxvY2tzCgkJCXRoaXMuX3VubG9ja0NlbGxzKCB0aGlzLmFsbEhlYWRlcnMgKTsKCgkJCS8vIHVwZGF0ZSBjb2x1bW50b2dnbGVzIGFuZCBjZWxscwoJCQl0aGlzLl9hZGRUb2dnbGVzKCB0aGlzLl9tZW51LCBjcmVhdGUgKTsKCgkJCS8vIGNoZWNrL3VuY2hlY2sKCQkJdGhpcy5fc2V0VG9nZ2xlU3RhdGUoKTsKCQl9Cgl9LAoKCV9zZXRUb2dnbGVTdGF0ZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5fbWVudS5maW5kKCAiaW5wdXQiICkuZWFjaCggZnVuY3Rpb24oKSB7CgkJCXZhciBjaGVja2JveCA9ICQoIHRoaXMgKTsKCgkJCXRoaXMuY2hlY2tlZCA9IGNoZWNrYm94LmpxbURhdGEoICJjZWxscyIgKS5lcSggMCApLmNzcyggImRpc3BsYXkiICkgPT09ICJ0YWJsZS1jZWxsIjsKCQkJY2hlY2tib3guY2hlY2tib3hyYWRpbyggInJlZnJlc2giICk7CgkJfSk7Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLl9zdXBlcigpOwoJfQp9KTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC53aWRnZXQoICJtb2JpbGUudGFibGUiLCAkLm1vYmlsZS50YWJsZSwgewoJb3B0aW9uczogewoJCW1vZGU6ICJyZWZsb3ciLAoJCWNsYXNzZXM6ICQuZXh0ZW5kKCAkLm1vYmlsZS50YWJsZS5wcm90b3R5cGUub3B0aW9ucy5jbGFzc2VzLCB7CgkJCXJlZmxvd1RhYmxlOiAidWktdGFibGUtcmVmbG93IiwKCQkJY2VsbExhYmVsczogInVpLXRhYmxlLWNlbGwtbGFiZWwiCgkJfSkKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5fc3VwZXIoKTsKCgkJLy8gSWYgaXQncyBub3QgcmVmbG93IG1vZGUsIHJldHVybiBoZXJlLgoJCWlmICggdGhpcy5vcHRpb25zLm1vZGUgIT09ICJyZWZsb3ciICkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAoICF0aGlzLm9wdGlvbnMuZW5oYW5jZWQgKSB7CgkJCXRoaXMuZWxlbWVudC5hZGRDbGFzcyggdGhpcy5vcHRpb25zLmNsYXNzZXMucmVmbG93VGFibGUgKTsKCgkJCXRoaXMuX3VwZGF0ZVJlZmxvdygpOwoJCX0KCX0sCgoJcmVidWlsZDogZnVuY3Rpb24oKSB7CgkJdGhpcy5fc3VwZXIoKTsKCgkJaWYgKCB0aGlzLm9wdGlvbnMubW9kZSA9PT0gInJlZmxvdyIgKSB7CgkJCXRoaXMuX3JlZnJlc2goIGZhbHNlICk7CgkJfQoJfSwKCglfcmVmcmVzaDogZnVuY3Rpb24oIGNyZWF0ZSApIHsKCQl0aGlzLl9zdXBlciggY3JlYXRlICk7CgkJaWYgKCAhY3JlYXRlICYmIHRoaXMub3B0aW9ucy5tb2RlID09PSAicmVmbG93IiApIHsKCQkJdGhpcy5fdXBkYXRlUmVmbG93KCApOwoJCX0KCX0sCgoJX3VwZGF0ZVJlZmxvdzogZnVuY3Rpb24oKSB7CgkJdmFyIHRhYmxlID0gdGhpcywKCQkJb3B0cyA9IHRoaXMub3B0aW9uczsKCgkJLy8gZ2V0IGhlYWRlcnMgaW4gcmV2ZXJzZSBvcmRlciBzbyB0aGF0IHRvcC1sZXZlbCBoZWFkZXJzIGFyZSBhcHBlbmRlZCBsYXN0CgkJJCggdGFibGUuYWxsSGVhZGVycy5nZXQoKS5yZXZlcnNlKCkgKS5lYWNoKCBmdW5jdGlvbigpIHsKCQkJdmFyIGNlbGxzID0gJCggdGhpcyApLmpxbURhdGEoICJjZWxscyIgKSwKCQkJCWNvbHN0YXJ0ID0gJC5tb2JpbGUuZ2V0QXR0cmlidXRlKCB0aGlzLCAiY29sc3RhcnQiICksCgkJCQloaWVyYXJjaHlDbGFzcyA9IGNlbGxzLm5vdCggdGhpcyApLmZpbHRlciggInRoZWFkIHRoIiApLmxlbmd0aCAmJiAiIHVpLXRhYmxlLWNlbGwtbGFiZWwtdG9wIiwKCQkJCXRleHQgPSAkKCB0aGlzICkudGV4dCgpLAoJCQkJaXRlcmF0aW9uLCBmaWx0ZXI7CgoJCQkJaWYgKCB0ZXh0ICE9PSAiIiAgKSB7CgoJCQkJCWlmICggaGllcmFyY2h5Q2xhc3MgKSB7CgkJCQkJCWl0ZXJhdGlvbiA9IHBhcnNlSW50KCB0aGlzLmdldEF0dHJpYnV0ZSggImNvbHNwYW4iICksIDEwICk7CgkJCQkJCWZpbHRlciA9ICIiOwoKCQkJCQkJaWYgKCBpdGVyYXRpb24gKSB7CgkJCQkJCQlmaWx0ZXIgPSAidGQ6bnRoLWNoaWxkKCIrIGl0ZXJhdGlvbiArIm4gKyAiICsgKCBjb2xzdGFydCApICsiKSI7CgkJCQkJCX0KCgkJCQkJCXRhYmxlLl9hZGRMYWJlbHMoIGNlbGxzLmZpbHRlciggZmlsdGVyICksIG9wdHMuY2xhc3Nlcy5jZWxsTGFiZWxzICsgaGllcmFyY2h5Q2xhc3MsIHRleHQgKTsKCQkJCQl9IGVsc2UgewoJCQkJCQl0YWJsZS5fYWRkTGFiZWxzKCBjZWxscywgb3B0cy5jbGFzc2VzLmNlbGxMYWJlbHMsIHRleHQgKTsKCQkJCQl9CgoJCQkJfQoJCX0pOwoJfSwKCglfYWRkTGFiZWxzOiBmdW5jdGlvbiggY2VsbHMsIGxhYmVsLCB0ZXh0ICkgewoJCS8vIC5ub3QgZml4ZXMgIzYwMDYKCQljZWxscy5ub3QoICI6aGFzKGIuIiArIGxhYmVsICsgIikiICkucHJlcGVuZCggIjxiIGNsYXNzPSciICsgbGFiZWwgKyAiJz4iICsgdGV4dCArICI8L2I+IiAgKTsKCX0KfSk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCi8vIFRPRE8gcmVuYW1lIGZpbHRlckNhbGxiYWNrL2RlcHJlY2F0ZSBhbmQgZGVmYXVsdCB0byB0aGUgaXRlbSBpdHNlbGYgYXMgdGhlIGZpcnN0IGFyZ3VtZW50CnZhciBkZWZhdWx0RmlsdGVyQ2FsbGJhY2sgPSBmdW5jdGlvbiggaW5kZXgsIHNlYXJjaFZhbHVlICkgewoJcmV0dXJuICggKCAiIiArICggJC5tb2JpbGUuZ2V0QXR0cmlidXRlKCB0aGlzLCAiZmlsdGVydGV4dCIgKSB8fCAkKCB0aGlzICkudGV4dCgpICkgKQoJCS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoIHNlYXJjaFZhbHVlICkgPT09IC0xICk7Cn07CgokLndpZGdldCggIm1vYmlsZS5maWx0ZXJhYmxlIiwgewoKCWluaXRTZWxlY3RvcjogIjpqcW1EYXRhKGZpbHRlcj0ndHJ1ZScpIiwKCglvcHRpb25zOiB7CgkJZmlsdGVyUmV2ZWFsOiBmYWxzZSwKCQlmaWx0ZXJDYWxsYmFjazogZGVmYXVsdEZpbHRlckNhbGxiYWNrLAoJCWVuaGFuY2VkOiBmYWxzZSwKCQlpbnB1dDogbnVsbCwKCQljaGlsZHJlbjogIj4gbGksID4gb3B0aW9uLCA+IG9wdGdyb3VwIG9wdGlvbiwgPiB0Ym9keSB0ciwgPiAudWktY29udHJvbGdyb3VwLWNvbnRyb2xzID4gLnVpLWJ0biwgPiAudWktY29udHJvbGdyb3VwLWNvbnRyb2xzID4gLnVpLWNoZWNrYm94LCA+IC51aS1jb250cm9sZ3JvdXAtY29udHJvbHMgPiAudWktcmFkaW8iCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciBvcHRzID0gdGhpcy5vcHRpb25zOwoKCQkkLmV4dGVuZCggdGhpcywgewoJCQlfc2VhcmNoOiBudWxsLAoJCQlfdGltZXI6IDAKCQl9KTsKCgkJdGhpcy5fc2V0SW5wdXQoIG9wdHMuaW5wdXQgKTsKCQlpZiAoICFvcHRzLmVuaGFuY2VkICkgewoJCQl0aGlzLl9maWx0ZXJJdGVtcyggKCAoIHRoaXMuX3NlYXJjaCAmJiB0aGlzLl9zZWFyY2gudmFsKCkgKSB8fCAiIiApLnRvTG93ZXJDYXNlKCkgKTsKCQl9Cgl9LAoKCV9vbktleVVwOiBmdW5jdGlvbigpIHsKCQl2YXIgdmFsLCBsYXN0dmFsLAoJCQlzZWFyY2ggPSB0aGlzLl9zZWFyY2g7CgoJCWlmICggc2VhcmNoICkgewoJCQl2YWwgPSBzZWFyY2gudmFsKCkudG9Mb3dlckNhc2UoKSwKCQkJbGFzdHZhbCA9ICQubW9iaWxlLmdldEF0dHJpYnV0ZSggc2VhcmNoWyAwIF0sICJsYXN0dmFsIiApICsgIiI7CgoJCQlpZiAoIGxhc3R2YWwgJiYgbGFzdHZhbCA9PT0gdmFsICkgewoJCQkJLy8gRXhlY3V0ZSB0aGUgaGFuZGxlciBvbmx5IG9uY2UgcGVyIHZhbHVlIGNoYW5nZQoJCQkJcmV0dXJuOwoJCQl9CgoJCQlpZiAoIHRoaXMuX3RpbWVyICkgewoJCQkJd2luZG93LmNsZWFyVGltZW91dCggdGhpcy5fdGltZXIgKTsKCQkJCXRoaXMuX3RpbWVyID0gMDsKCQkJfQoKCQkJdGhpcy5fdGltZXIgPSB0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7CgkJCQl0aGlzLl90cmlnZ2VyKCAiYmVmb3JlZmlsdGVyIiwgImJlZm9yZWZpbHRlciIsIHsgaW5wdXQ6IHNlYXJjaCB9ICk7CgoJCQkJLy8gQ2hhbmdlIHZhbCBhcyBsYXN0dmFsIGZvciBuZXh0IGV4ZWN1dGlvbgoJCQkJc2VhcmNoWyAwIF0uc2V0QXR0cmlidXRlKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAibGFzdHZhbCIsIHZhbCApOwoKCQkJCXRoaXMuX2ZpbHRlckl0ZW1zKCB2YWwgKTsKCQkJCXRoaXMuX3RpbWVyID0gMDsKCQkJfSwgMjUwICk7CgkJfQoJfSwKCglfZ2V0RmlsdGVyYWJsZUl0ZW1zOiBmdW5jdGlvbigpIHsKCQl2YXIgZWxlbSA9IHRoaXMuZWxlbWVudCwKCQkJY2hpbGRyZW4gPSB0aGlzLm9wdGlvbnMuY2hpbGRyZW4sCgkJCWl0ZW1zID0gIWNoaWxkcmVuID8geyBsZW5ndGg6IDAgfToKCQkJCSQuaXNGdW5jdGlvbiggY2hpbGRyZW4gKSA/IGNoaWxkcmVuKCk6CgkJCQljaGlsZHJlbi5ub2RlTmFtZSA/ICQoIGNoaWxkcmVuICk6CgkJCQljaGlsZHJlbi5qcXVlcnkgPyBjaGlsZHJlbjoKCQkJCXRoaXMuZWxlbWVudC5maW5kKCBjaGlsZHJlbiApOwoKCQlpZiAoIGl0ZW1zLmxlbmd0aCA9PT0gMCApIHsKCQkJaXRlbXMgPSBlbGVtLmNoaWxkcmVuKCk7CgkJfQoKCQlyZXR1cm4gaXRlbXM7Cgl9LAoKCV9maWx0ZXJJdGVtczogZnVuY3Rpb24oIHZhbCApIHsKCQl2YXIgaWR4LCBjYWxsYmFjaywgbGVuZ3RoLCBkc3QsCgkJCXNob3cgPSBbXSwKCQkJaGlkZSA9IFtdLAoJCQlvcHRzID0gdGhpcy5vcHRpb25zLAoJCQlmaWx0ZXJJdGVtcyA9IHRoaXMuX2dldEZpbHRlcmFibGVJdGVtcygpOwoKCQlpZiAoIHZhbCAhPSBudWxsICkgewoJCQljYWxsYmFjayA9IG9wdHMuZmlsdGVyQ2FsbGJhY2sgfHwgZGVmYXVsdEZpbHRlckNhbGxiYWNrOwoJCQlsZW5ndGggPSBmaWx0ZXJJdGVtcy5sZW5ndGg7CgoJCQkvLyBQYXJ0aXRpb24gdGhlIGl0ZW1zIGludG8gdGhvc2UgdG8gYmUgaGlkZGVuIGFuZCB0aG9zZSB0byBiZSBzaG93bgoJCQlmb3IgKCBpZHggPSAwIDsgaWR4IDwgbGVuZ3RoIDsgaWR4KysgKSB7CgkJCQlkc3QgPSAoIGNhbGxiYWNrLmNhbGwoIGZpbHRlckl0ZW1zWyBpZHggXSwgaWR4LCB2YWwgKSApID8gaGlkZSA6IHNob3c7CgkJCQlkc3QucHVzaCggZmlsdGVySXRlbXNbIGlkeCBdICk7CgkJCX0KCQl9CgoJCS8vIElmIG5vdGhpbmcgaXMgaGlkZGVuLCB0aGVuIHRoZSBkZWNpc2lvbiB3aGV0aGVyIHRvIGhpZGUgb3Igc2hvdyB0aGUgaXRlbXMKCQkvLyBpcyBiYXNlZCBvbiB0aGUgImZpbHRlclJldmVhbCIgb3B0aW9uLgoJCWlmICggaGlkZS5sZW5ndGggPT09IDAgKSB7CgkJCWZpbHRlckl0ZW1zWyBvcHRzLmZpbHRlclJldmVhbCA/ICJhZGRDbGFzcyIgOiAicmVtb3ZlQ2xhc3MiIF0oICJ1aS1zY3JlZW4taGlkZGVuIiApOwoJCX0gZWxzZSB7CgkJCSQoIGhpZGUgKS5hZGRDbGFzcyggInVpLXNjcmVlbi1oaWRkZW4iICk7CgkJCSQoIHNob3cgKS5yZW1vdmVDbGFzcyggInVpLXNjcmVlbi1oaWRkZW4iICk7CgkJfQoKCQl0aGlzLl9yZWZyZXNoQ2hpbGRXaWRnZXQoKTsKCX0sCgoJLy8gVGhlIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgX3JlZnJlc2hDaGlsZFdpZGdldCBhdHRlbXB0cyB0byBjYWxsCgkvLyByZWZyZXNoIG9uIGNvbGxhcHNpYmxlc2V0LCBjb250cm9sZ3JvdXAsIHNlbGVjdG1lbnUsIG9yIGxpc3R2aWV3CglfcmVmcmVzaENoaWxkV2lkZ2V0OiBmdW5jdGlvbigpIHsKCQl2YXIgd2lkZ2V0LCBpZHgsCgkJCXJlY29nbml6ZWRXaWRnZXRzID0gWyAiY29sbGFwc2libGVzZXQiLCAic2VsZWN0bWVudSIsICJjb250cm9sZ3JvdXAiLCAibGlzdHZpZXciIF07CgoJCWZvciAoIGlkeCA9IHJlY29nbml6ZWRXaWRnZXRzLmxlbmd0aCAtIDEgOyBpZHggPiAtMSA7IGlkeC0tICkgewoJCQl3aWRnZXQgPSByZWNvZ25pemVkV2lkZ2V0c1sgaWR4IF07CgkJCWlmICggJC5tb2JpbGVbIHdpZGdldCBdICkgewoJCQkJd2lkZ2V0ID0gdGhpcy5lbGVtZW50LmRhdGEoICJtb2JpbGUtIiArIHdpZGdldCApOwoJCQkJaWYgKCB3aWRnZXQgJiYgJC5pc0Z1bmN0aW9uKCB3aWRnZXQucmVmcmVzaCApICkgewoJCQkJCXdpZGdldC5yZWZyZXNoKCk7CgkJCQl9CgkJCX0KCQl9Cgl9LAoKCS8vIFRPRE86IFdoZW4gdGhlIGlucHV0IGlzIG5vdCBpbnRlcm5hbCwgZG8gbm90IGV2ZW4gc3RvcmUgaXQgaW4gdGhpcy5fc2VhcmNoCglfc2V0SW5wdXQ6IGZ1bmN0aW9uICggc2VsZWN0b3IgKSB7CgkJdmFyIHNlYXJjaCA9IHRoaXMuX3NlYXJjaDsKCgkJLy8gU3RvcCBhIHBlbmRpbmcgZmlsdGVyIG9wZXJhdGlvbgoJCWlmICggdGhpcy5fdGltZXIgKSB7CgkJCXdpbmRvdy5jbGVhclRpbWVvdXQoIHRoaXMuX3RpbWVyICk7CgkJCXRoaXMuX3RpbWVyID0gMDsKCQl9CgoJCWlmICggc2VhcmNoICkgewoJCQl0aGlzLl9vZmYoIHNlYXJjaCwgImtleXVwIGNoYW5nZSBpbnB1dCIgKTsKCQkJc2VhcmNoID0gbnVsbDsKCQl9CgoJCWlmICggc2VsZWN0b3IgKSB7CgkJCXNlYXJjaCA9IHNlbGVjdG9yLmpxdWVyeSA/IHNlbGVjdG9yOgoJCQkJc2VsZWN0b3Iubm9kZU5hbWUgPyAkKCBzZWxlY3RvciApOgoJCQkJdGhpcy5kb2N1bWVudC5maW5kKCBzZWxlY3RvciApOwoKCQkJdGhpcy5fb24oIHNlYXJjaCwgewoJCQkJa2V5dXA6ICJfb25LZXlVcCIsCgkJCQljaGFuZ2U6ICJfb25LZXlVcCIsCgkJCQlpbnB1dDogIl9vbktleVVwIgoJCQl9KTsKCQl9CgoJCXRoaXMuX3NlYXJjaCA9IHNlYXJjaDsKCX0sCgoJX3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCXZhciByZWZpbHRlciA9ICEoICggb3B0aW9ucy5maWx0ZXJSZXZlYWwgPT09IHVuZGVmaW5lZCApICYmCgkJCQkoIG9wdGlvbnMuZmlsdGVyQ2FsbGJhY2sgPT09IHVuZGVmaW5lZCApICYmCgkJCQkoIG9wdGlvbnMuY2hpbGRyZW4gPT09IHVuZGVmaW5lZCApICk7CgoJCXRoaXMuX3N1cGVyKCBvcHRpb25zICk7CgoJCWlmICggb3B0aW9ucy5pbnB1dCAhPT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLl9zZXRJbnB1dCggb3B0aW9ucy5pbnB1dCApOwoJCQlyZWZpbHRlciA9IHRydWU7CgkJfQoKCQlpZiAoIHJlZmlsdGVyICkgewoJCQl0aGlzLnJlZnJlc2goKTsKCQl9Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQl2YXIgb3B0cyA9IHRoaXMub3B0aW9ucywKCQkJaXRlbXMgPSB0aGlzLl9nZXRGaWx0ZXJhYmxlSXRlbXMoKTsKCgkJaWYgKCBvcHRzLmVuaGFuY2VkICkgewoJCQlpdGVtcy50b2dnbGVDbGFzcyggInVpLXNjcmVlbi1oaWRkZW4iLCBvcHRzLmZpbHRlclJldmVhbCApOwoJCX0gZWxzZSB7CgkJCWl0ZW1zLnJlbW92ZUNsYXNzKCAidWktc2NyZWVuLWhpZGRlbiIgKTsKCQl9Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCWlmICggdGhpcy5fdGltZXIgKSB7CgkJCXdpbmRvdy5jbGVhclRpbWVvdXQoIHRoaXMuX3RpbWVyICk7CgkJCXRoaXMuX3RpbWVyID0gMDsKCQl9CgkJdGhpcy5fZmlsdGVySXRlbXMoICggKCB0aGlzLl9zZWFyY2ggJiYgdGhpcy5fc2VhcmNoLnZhbCgpICkgfHwgIiIgKS50b0xvd2VyQ2FzZSgpICk7Cgl9Cn0pOwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgovLyBDcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHdpbGwgcmVwbGFjZSB0aGUgX3NldE9wdGlvbnMgZnVuY3Rpb24gb2YgYSB3aWRnZXQsCi8vIGFuZCB3aWxsIHBhc3MgdGhlIG9wdGlvbnMgb24gdG8gdGhlIGlucHV0IG9mIHRoZSBmaWx0ZXJhYmxlLgp2YXIgcmVwbGFjZVNldE9wdGlvbnMgPSBmdW5jdGlvbiggc2VsZiwgb3JpZyApIHsKCQlyZXR1cm4gZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJCW9yaWcuY2FsbCggdGhpcywgb3B0aW9ucyApOwoJCQlzZWxmLl9zeW5jVGV4dElucHV0T3B0aW9ucyggb3B0aW9ucyApOwoJCX07Cgl9LAoJckRpdmlkZXJMaXN0SXRlbSA9IC8oXnxccyl1aS1saS1kaXZpZGVyKFxzfCQpLywKCW9yaWdEZWZhdWx0RmlsdGVyQ2FsbGJhY2sgPSAkLm1vYmlsZS5maWx0ZXJhYmxlLnByb3RvdHlwZS5vcHRpb25zLmZpbHRlckNhbGxiYWNrOwoKLy8gT3ZlcnJpZGUgdGhlIGRlZmF1bHQgZmlsdGVyIGNhbGxiYWNrIHdpdGggb25lIHRoYXQgZG9lcyBub3QgaGlkZSBsaXN0IGRpdmlkZXJzCiQubW9iaWxlLmZpbHRlcmFibGUucHJvdG90eXBlLm9wdGlvbnMuZmlsdGVyQ2FsbGJhY2sgPSBmdW5jdGlvbiggaW5kZXgsIHNlYXJjaFZhbHVlICkgewoJcmV0dXJuICF0aGlzLmNsYXNzTmFtZS5tYXRjaCggckRpdmlkZXJMaXN0SXRlbSApICYmCgkJb3JpZ0RlZmF1bHRGaWx0ZXJDYWxsYmFjay5jYWxsKCB0aGlzLCBpbmRleCwgc2VhcmNoVmFsdWUgKTsKfTsKCiQud2lkZ2V0KCAibW9iaWxlLmZpbHRlcmFibGUiLCAkLm1vYmlsZS5maWx0ZXJhYmxlLCB7CglvcHRpb25zOiB7CgkJZmlsdGVyUGxhY2Vob2xkZXI6ICJGaWx0ZXIgaXRlbXMuLi4iLAoJCWZpbHRlclRoZW1lOiBudWxsCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciBpZHgsIHdpZGdldE5hbWUsCgkJCWVsZW0gPSB0aGlzLmVsZW1lbnQsCgkJCXJlY29nbml6ZWRXaWRnZXRzID0gWyAiY29sbGFwc2libGVzZXQiLCAic2VsZWN0bWVudSIsICJjb250cm9sZ3JvdXAiLCAibGlzdHZpZXciIF0sCgkJCWNyZWF0ZUhhbmRsZXJzID0ge307CgoJCXRoaXMuX3N1cGVyKCk7CgoJCSQuZXh0ZW5kKCB0aGlzLCB7CgkJCV93aWRnZXQ6IG51bGwKCQl9KTsKCgkJZm9yICggaWR4ID0gcmVjb2duaXplZFdpZGdldHMubGVuZ3RoIC0gMSA7IGlkeCA+IC0xIDsgaWR4LS0gKSB7CgkJCXdpZGdldE5hbWUgPSByZWNvZ25pemVkV2lkZ2V0c1sgaWR4IF07CgkJCWlmICggJC5tb2JpbGVbIHdpZGdldE5hbWUgXSApIHsKCQkJCWlmICggdGhpcy5fc2V0V2lkZ2V0KCBlbGVtLmRhdGEoICJtb2JpbGUtIiArIHdpZGdldE5hbWUgKSApICkgewoJCQkJCWJyZWFrOwoJCQkJfSBlbHNlIHsKCQkJCQljcmVhdGVIYW5kbGVyc1sgd2lkZ2V0TmFtZSArICJjcmVhdGUiIF0gPSAiX2hhbmRsZUNyZWF0ZSI7CgkJCQl9CgkJCX0KCQl9CgoJCWlmICggIXRoaXMuX3dpZGdldCApIHsKCQkJdGhpcy5fb24oIGVsZW0sIGNyZWF0ZUhhbmRsZXJzICk7CgkJfQoJfSwKCglfaGFuZGxlQ3JlYXRlOiBmdW5jdGlvbiggZXZ0ICkgewoJCXRoaXMuX3NldFdpZGdldCggdGhpcy5lbGVtZW50LmRhdGEoICJtb2JpbGUtIiArIGV2dC50eXBlLnN1YnN0cmluZyggMCwgZXZ0LnR5cGUubGVuZ3RoIC0gNiApICkgKTsKCX0sCgoJX3NldFdpZGdldDogZnVuY3Rpb24oIHdpZGdldCApIHsKCQlpZiAoICF0aGlzLl93aWRnZXQgJiYgd2lkZ2V0ICkgewoJCQl0aGlzLl93aWRnZXQgPSB3aWRnZXQ7CgkJCXRoaXMuX3dpZGdldC5fc2V0T3B0aW9ucyA9IHJlcGxhY2VTZXRPcHRpb25zKCB0aGlzLCB0aGlzLl93aWRnZXQuX3NldE9wdGlvbnMgKTsKCQl9CgoJCWlmICggISF0aGlzLl93aWRnZXQgKSB7CgkJCXRoaXMuX3N5bmNUZXh0SW5wdXRPcHRpb25zKCB0aGlzLl93aWRnZXQub3B0aW9ucyApOwoJCQlpZiAoIHRoaXMuX3dpZGdldC53aWRnZXROYW1lID09PSAibGlzdHZpZXciICkgewoJCQkJdGhpcy5fd2lkZ2V0Lm9wdGlvbnMuaGlkZWRpdmlkZXJzID0gdHJ1ZTsKCQkJCXRoaXMuX3dpZGdldC5lbGVtZW50Lmxpc3R2aWV3KCAicmVmcmVzaCIgKTsKCQkJfQoJCX0KCgkJcmV0dXJuICEhdGhpcy5fd2lkZ2V0OwoJfSwKCglfaXNTZWFyY2hJbnRlcm5hbDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuICggdGhpcy5fc2VhcmNoICYmIHRoaXMuX3NlYXJjaC5qcW1EYXRhKCAidWktZmlsdGVyYWJsZS0iICsgdGhpcy51dWlkICsgIi1pbnRlcm5hbCIgKSApOwoJfSwKCglfc2V0SW5wdXQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKCQl2YXIgb3B0cyA9IHRoaXMub3B0aW9ucywKCQkJdXBkYXRlUGxhY2Vob2xkZXIgPSB0cnVlLAoJCQl0ZXh0aW5wdXRPcHRzID0ge307CgoJCWlmICggIXNlbGVjdG9yICkgewoJCQlpZiAoIHRoaXMuX2lzU2VhcmNoSW50ZXJuYWwoKSApIHsKCgkJCQkvLyBJZ25vcmUgdGhlIGNhbGwgdG8gc2V0IGEgbmV3IGlucHV0IGlmIHRoZSBzZWxlY3RvciBnb2VzIHRvIGZhbHN5IGFuZAoJCQkJLy8gdGhlIGN1cnJlbnQgdGV4dGlucHV0IGlzIGFscmVhZHkgb2YgdGhlIGludGVybmFsbHkgZ2VuZXJhdGVkIHZhcmlldHkuCgkJCQlyZXR1cm47CgkJCX0gZWxzZSB7CgoJCQkJLy8gR2VuZXJhdGluZyBhIG5ldyB0ZXh0aW5wdXQgd2lkZ2V0LiBObyBuZWVkIHRvIHNldCB0aGUgcGxhY2Vob2xkZXIKCQkJCS8vIGZ1cnRoZXIgZG93biB0aGUgZnVuY3Rpb24uCgkJCQl1cGRhdGVQbGFjZWhvbGRlciA9IGZhbHNlOwoJCQkJc2VsZWN0b3IgPSAkKCAiPGlucHV0ICIgKwoJCQkJCSJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJ0eXBlPSdzZWFyY2gnICIgKwoJCQkJCSJwbGFjZWhvbGRlcj0nIiArIG9wdHMuZmlsdGVyUGxhY2Vob2xkZXIgKyAiJz48L2lucHV0PiIgKQoJCQkJCS5qcW1EYXRhKCAidWktZmlsdGVyYWJsZS0iICsgdGhpcy51dWlkICsgIi1pbnRlcm5hbCIsIHRydWUgKTsKCQkJCSQoICI8Zm9ybSBjbGFzcz0ndWktZmlsdGVyYWJsZSc+PC9mb3JtPiIgKQoJCQkJCS5hcHBlbmQoIHNlbGVjdG9yICkKCQkJCQkuc3VibWl0KCBmdW5jdGlvbiggZXZ0ICkgewoJCQkJCQlldnQucHJldmVudERlZmF1bHQoKTsKCQkJCQkJc2VsZWN0b3IuYmx1cigpOwoJCQkJCX0pCgkJCQkJLmluc2VydEJlZm9yZSggdGhpcy5lbGVtZW50ICk7CgkJCQlpZiAoICQubW9iaWxlLnRleHRpbnB1dCApIHsKCQkJCQlpZiAoIHRoaXMub3B0aW9ucy5maWx0ZXJUaGVtZSAhPSBudWxsICkgewoJCQkJCQl0ZXh0aW5wdXRPcHRzWyAidGhlbWUiIF0gPSBvcHRzLmZpbHRlclRoZW1lOwoJCQkJCX0KCgkJCQkJc2VsZWN0b3IudGV4dGlucHV0KCB0ZXh0aW5wdXRPcHRzICk7CgkJCQl9CgkJCX0KCQl9CgoJCXRoaXMuX3N1cGVyKCBzZWxlY3RvciApOwoKCQlpZiAoIHRoaXMuX2lzU2VhcmNoSW50ZXJuYWwoKSAmJiB1cGRhdGVQbGFjZWhvbGRlciApIHsKCQkJdGhpcy5fc2VhcmNoLmF0dHIoICJwbGFjZWhvbGRlciIsIHRoaXMub3B0aW9ucy5maWx0ZXJQbGFjZWhvbGRlciApOwoJCX0KCX0sCgoJX3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCXZhciByZXQgPSB0aGlzLl9zdXBlciggb3B0aW9ucyApOwoKCQkvLyBOZWVkIHRvIHNldCB0aGUgZmlsdGVyUGxhY2Vob2xkZXIgYWZ0ZXIgaGF2aW5nIGVzdGFibGlzaGVkIHRoZSBzZWFyY2ggaW5wdXQKCQlpZiAoIG9wdGlvbnMuZmlsdGVyUGxhY2Vob2xkZXIgIT09IHVuZGVmaW5lZCApIHsKCQkJaWYgKCB0aGlzLl9pc1NlYXJjaEludGVybmFsKCkgKSB7CgkJCQl0aGlzLl9zZWFyY2guYXR0ciggInBsYWNlaG9sZGVyIiwgb3B0aW9ucy5maWx0ZXJQbGFjZWhvbGRlciApOwoJCQl9CgkJfQoKCQlpZiAoIG9wdGlvbnMuZmlsdGVyVGhlbWUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9zZWFyY2ggJiYgJC5tb2JpbGUudGV4dGlucHV0ICkgewoJCQl0aGlzLl9zZWFyY2gudGV4dGlucHV0KCAib3B0aW9uIiwgInRoZW1lIiwgb3B0aW9ucy5maWx0ZXJUaGVtZSApOwoJCX0KCgkJcmV0dXJuIHJldDsKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCWlmICggdGhpcy5faXNTZWFyY2hJbnRlcm5hbCgpICkgewoJCQl0aGlzLl9zZWFyY2gucmVtb3ZlKCk7CgkJfQoJCXRoaXMuX3N1cGVyKCk7Cgl9LAoKCV9zeW5jVGV4dElucHV0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJdmFyIGlkeCwKCQkJdGV4dGlucHV0T3B0aW9ucyA9IHt9OwoKCQkvLyBXZSBvbmx5IHN5bmMgb3B0aW9ucyBpZiB0aGUgZmlsdGVyYWJsZSdzIHRleHRpbnB1dCBpcyBvZiB0aGUgaW50ZXJuYWxseQoJCS8vIGdlbmVyYXRlZCB2YXJpZXR5LCByYXRoZXIgdGhhbiBvbmUgc3BlY2lmaWVkIGJ5IHRoZSB1c2VyLgoJCWlmICggdGhpcy5faXNTZWFyY2hJbnRlcm5hbCgpICYmICQubW9iaWxlLnRleHRpbnB1dCApIHsKCgkJCS8vIEFwcGx5IG9ubHkgdGhlIG9wdGlvbnMgdW5kZXJzdG9vZCBieSB0ZXh0aW5wdXQKCQkJZm9yICggaWR4IGluICQubW9iaWxlLnRleHRpbnB1dC5wcm90b3R5cGUub3B0aW9ucyApIHsKCQkJCWlmICggb3B0aW9uc1sgaWR4IF0gIT09IHVuZGVmaW5lZCApIHsKCQkJCQlpZiAoIGlkeCA9PT0gInRoZW1lIiAmJiB0aGlzLm9wdGlvbnMuZmlsdGVyVGhlbWUgIT0gbnVsbCApIHsKCQkJCQkJdGV4dGlucHV0T3B0aW9uc1sgaWR4IF0gPSB0aGlzLm9wdGlvbnMuZmlsdGVyVGhlbWU7CgkJCQkJfSBlbHNlIHsKCQkJCQkJdGV4dGlucHV0T3B0aW9uc1sgaWR4IF0gPSBvcHRpb25zWyBpZHggXTsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJdGhpcy5fc2VhcmNoLnRleHRpbnB1dCggIm9wdGlvbiIsIHRleHRpbnB1dE9wdGlvbnMgKTsKCQl9Cgl9Cn0pOwoKfSkoIGpRdWVyeSApOwoKLyohCiAqIGpRdWVyeSBVSSBUYWJzIEBWRVJTSU9OCiAqIGh0dHA6Ly9qcXVlcnl1aS5jb20KICoKICogQ29weXJpZ2h0IDIwMTMgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICoKICogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vdGFicy8KICoKICogRGVwZW5kczoKICoJanF1ZXJ5LnVpLmNvcmUuanMKICoJanF1ZXJ5LnVpLndpZGdldC5qcwogKi8KKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgp2YXIgdGFiSWQgPSAwLAoJcmhhc2ggPSAvIy4qJC87CgpmdW5jdGlvbiBnZXROZXh0VGFiSWQoKSB7CglyZXR1cm4gKyt0YWJJZDsKfQoKZnVuY3Rpb24gaXNMb2NhbCggYW5jaG9yICkgewoJcmV0dXJuIGFuY2hvci5oYXNoLmxlbmd0aCA+IDEgJiYKCQlkZWNvZGVVUklDb21wb25lbnQoIGFuY2hvci5ocmVmLnJlcGxhY2UoIHJoYXNoLCAiIiApICkgPT09CgkJCWRlY29kZVVSSUNvbXBvbmVudCggbG9jYXRpb24uaHJlZi5yZXBsYWNlKCByaGFzaCwgIiIgKSApOwp9CgokLndpZGdldCggInVpLnRhYnMiLCB7Cgl2ZXJzaW9uOiAiQFZFUlNJT04iLAoJZGVsYXk6IDMwMCwKCW9wdGlvbnM6IHsKCQlhY3RpdmU6IG51bGwsCgkJY29sbGFwc2libGU6IGZhbHNlLAoJCWV2ZW50OiAiY2xpY2siLAoJCWhlaWdodFN0eWxlOiAiY29udGVudCIsCgkJaGlkZTogbnVsbCwKCQlzaG93OiBudWxsLAoKCQkvLyBjYWxsYmFja3MKCQlhY3RpdmF0ZTogbnVsbCwKCQliZWZvcmVBY3RpdmF0ZTogbnVsbCwKCQliZWZvcmVMb2FkOiBudWxsLAoJCWxvYWQ6IG51bGwKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdmFyIHRoYXQgPSB0aGlzLAoJCQlvcHRpb25zID0gdGhpcy5vcHRpb25zOwoKCQl0aGlzLnJ1bm5pbmcgPSBmYWxzZTsKCgkJdGhpcy5lbGVtZW50CgkJCS5hZGRDbGFzcyggInVpLXRhYnMgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwiICkKCQkJLnRvZ2dsZUNsYXNzKCAidWktdGFicy1jb2xsYXBzaWJsZSIsIG9wdGlvbnMuY29sbGFwc2libGUgKQoJCQkvLyBQcmV2ZW50IHVzZXJzIGZyb20gZm9jdXNpbmcgZGlzYWJsZWQgdGFicyB2aWEgY2xpY2sKCQkJLmRlbGVnYXRlKCAiLnVpLXRhYnMtbmF2ID4gbGkiLCAibW91c2Vkb3duIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWlmICggJCggdGhpcyApLmlzKCAiLnVpLXN0YXRlLWRpc2FibGVkIiApICkgewoJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQl9CgkJCX0pCgkJCS8vIHN1cHBvcnQ6IElFIDw5CgkJCS8vIFByZXZlbnRpbmcgdGhlIGRlZmF1bHQgYWN0aW9uIGluIG1vdXNlZG93biBkb2Vzbid0IHByZXZlbnQgSUUKCQkJLy8gZnJvbSBmb2N1c2luZyB0aGUgZWxlbWVudCwgc28gaWYgdGhlIGFuY2hvciBnZXRzIGZvY3VzZWQsIGJsdXIuCgkJCS8vIFdlIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgZm9jdXNpbmcgdGhlIHByZXZpb3VzbHkgZm9jdXNlZAoJCQkvLyBlbGVtZW50IHNpbmNlIGNsaWNraW5nIG9uIGEgbm9uLWZvY3VzYWJsZSBlbGVtZW50IHNob3VsZCBmb2N1cwoJCQkvLyB0aGUgYm9keSBhbnl3YXkuCgkJCS5kZWxlZ2F0ZSggIi51aS10YWJzLWFuY2hvciIsICJmb2N1cyIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbigpIHsKCQkJCWlmICggJCggdGhpcyApLmNsb3Nlc3QoICJsaSIgKS5pcyggIi51aS1zdGF0ZS1kaXNhYmxlZCIgKSApIHsKCQkJCQl0aGlzLmJsdXIoKTsKCQkJCX0KCQkJfSk7CgoJCXRoaXMuX3Byb2Nlc3NUYWJzKCk7CgkJb3B0aW9ucy5hY3RpdmUgPSB0aGlzLl9pbml0aWFsQWN0aXZlKCk7CgoJCS8vIFRha2UgZGlzYWJsaW5nIHRhYnMgdmlhIGNsYXNzIGF0dHJpYnV0ZSBmcm9tIEhUTUwKCQkvLyBpbnRvIGFjY291bnQgYW5kIHVwZGF0ZSBvcHRpb24gcHJvcGVybHkuCgkJaWYgKCAkLmlzQXJyYXkoIG9wdGlvbnMuZGlzYWJsZWQgKSApIHsKCQkJb3B0aW9ucy5kaXNhYmxlZCA9ICQudW5pcXVlKCBvcHRpb25zLmRpc2FibGVkLmNvbmNhdCgKCQkJCSQubWFwKCB0aGlzLnRhYnMuZmlsdGVyKCAiLnVpLXN0YXRlLWRpc2FibGVkIiApLCBmdW5jdGlvbiggbGkgKSB7CgkJCQkJcmV0dXJuIHRoYXQudGFicy5pbmRleCggbGkgKTsKCQkJCX0pCgkJCSkgKS5zb3J0KCk7CgkJfQoKCQkvLyBjaGVjayBmb3IgbGVuZ3RoIGF2b2lkcyBlcnJvciB3aGVuIGluaXRpYWxpemluZyBlbXB0eSBsaXN0CgkJaWYgKCB0aGlzLm9wdGlvbnMuYWN0aXZlICE9PSBmYWxzZSAmJiB0aGlzLmFuY2hvcnMubGVuZ3RoICkgewoJCQl0aGlzLmFjdGl2ZSA9IHRoaXMuX2ZpbmRBY3RpdmUoIG9wdGlvbnMuYWN0aXZlICk7CgkJfSBlbHNlIHsKCQkJdGhpcy5hY3RpdmUgPSAkKCk7CgkJfQoKCQl0aGlzLl9yZWZyZXNoKCk7CgoJCWlmICggdGhpcy5hY3RpdmUubGVuZ3RoICkgewoJCQl0aGlzLmxvYWQoIG9wdGlvbnMuYWN0aXZlICk7CgkJfQoJfSwKCglfaW5pdGlhbEFjdGl2ZTogZnVuY3Rpb24oKSB7CgkJdmFyIGFjdGl2ZSA9IHRoaXMub3B0aW9ucy5hY3RpdmUsCgkJCWNvbGxhcHNpYmxlID0gdGhpcy5vcHRpb25zLmNvbGxhcHNpYmxlLAoJCQlsb2NhdGlvbkhhc2ggPSBsb2NhdGlvbi5oYXNoLnN1YnN0cmluZyggMSApOwoKCQlpZiAoIGFjdGl2ZSA9PT0gbnVsbCApIHsKCQkJLy8gY2hlY2sgdGhlIGZyYWdtZW50IGlkZW50aWZpZXIgaW4gdGhlIFVSTAoJCQlpZiAoIGxvY2F0aW9uSGFzaCApIHsKCQkJCXRoaXMudGFicy5lYWNoKGZ1bmN0aW9uKCBpLCB0YWIgKSB7CgkJCQkJaWYgKCAkKCB0YWIgKS5hdHRyKCAiYXJpYS1jb250cm9scyIgKSA9PT0gbG9jYXRpb25IYXNoICkgewoJCQkJCQlhY3RpdmUgPSBpOwoJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJfQoJCQkJfSk7CgkJCX0KCgkJCS8vIGNoZWNrIGZvciBhIHRhYiBtYXJrZWQgYWN0aXZlIHZpYSBhIGNsYXNzCgkJCWlmICggYWN0aXZlID09PSBudWxsICkgewoJCQkJYWN0aXZlID0gdGhpcy50YWJzLmluZGV4KCB0aGlzLnRhYnMuZmlsdGVyKCAiLnVpLXRhYnMtYWN0aXZlIiApICk7CgkJCX0KCgkJCS8vIG5vIGFjdGl2ZSB0YWIsIHNldCB0byBmYWxzZQoJCQlpZiAoIGFjdGl2ZSA9PT0gbnVsbCB8fCBhY3RpdmUgPT09IC0xICkgewoJCQkJYWN0aXZlID0gdGhpcy50YWJzLmxlbmd0aCA/IDAgOiBmYWxzZTsKCQkJfQoJCX0KCgkJLy8gaGFuZGxlIG51bWJlcnM6IG5lZ2F0aXZlLCBvdXQgb2YgcmFuZ2UKCQlpZiAoIGFjdGl2ZSAhPT0gZmFsc2UgKSB7CgkJCWFjdGl2ZSA9IHRoaXMudGFicy5pbmRleCggdGhpcy50YWJzLmVxKCBhY3RpdmUgKSApOwoJCQlpZiAoIGFjdGl2ZSA9PT0gLTEgKSB7CgkJCQlhY3RpdmUgPSBjb2xsYXBzaWJsZSA/IGZhbHNlIDogMDsKCQkJfQoJCX0KCgkJLy8gZG9uJ3QgYWxsb3cgY29sbGFwc2libGU6IGZhbHNlIGFuZCBhY3RpdmU6IGZhbHNlCgkJaWYgKCAhY29sbGFwc2libGUgJiYgYWN0aXZlID09PSBmYWxzZSAmJiB0aGlzLmFuY2hvcnMubGVuZ3RoICkgewoJCQlhY3RpdmUgPSAwOwoJCX0KCgkJcmV0dXJuIGFjdGl2ZTsKCX0sCgoJX2dldENyZWF0ZUV2ZW50RGF0YTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHsKCQkJdGFiOiB0aGlzLmFjdGl2ZSwKCQkJcGFuZWw6ICF0aGlzLmFjdGl2ZS5sZW5ndGggPyAkKCkgOiB0aGlzLl9nZXRQYW5lbEZvclRhYiggdGhpcy5hY3RpdmUgKQoJCX07Cgl9LAoKCV90YWJLZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIGZvY3VzZWRUYWIgPSAkKCB0aGlzLmRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQgKS5jbG9zZXN0KCAibGkiICksCgkJCXNlbGVjdGVkSW5kZXggPSB0aGlzLnRhYnMuaW5kZXgoIGZvY3VzZWRUYWIgKSwKCQkJZ29pbmdGb3J3YXJkID0gdHJ1ZTsKCgkJaWYgKCB0aGlzLl9oYW5kbGVQYWdlTmF2KCBldmVudCApICkgewoJCQlyZXR1cm47CgkJfQoKCQlzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkgewoJCQljYXNlICQudWkua2V5Q29kZS5SSUdIVDoKCQkJY2FzZSAkLnVpLmtleUNvZGUuRE9XTjoKCQkJCXNlbGVjdGVkSW5kZXgrKzsKCQkJCWJyZWFrOwoJCQljYXNlICQudWkua2V5Q29kZS5VUDoKCQkJY2FzZSAkLnVpLmtleUNvZGUuTEVGVDoKCQkJCWdvaW5nRm9yd2FyZCA9IGZhbHNlOwoJCQkJc2VsZWN0ZWRJbmRleC0tOwoJCQkJYnJlYWs7CgkJCWNhc2UgJC51aS5rZXlDb2RlLkVORDoKCQkJCXNlbGVjdGVkSW5kZXggPSB0aGlzLmFuY2hvcnMubGVuZ3RoIC0gMTsKCQkJCWJyZWFrOwoJCQljYXNlICQudWkua2V5Q29kZS5IT01FOgoJCQkJc2VsZWN0ZWRJbmRleCA9IDA7CgkJCQlicmVhazsKCQkJY2FzZSAkLnVpLmtleUNvZGUuU1BBQ0U6CgkJCQkvLyBBY3RpdmF0ZSBvbmx5LCBubyBjb2xsYXBzaW5nCgkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJY2xlYXJUaW1lb3V0KCB0aGlzLmFjdGl2YXRpbmcgKTsKCQkJCXRoaXMuX2FjdGl2YXRlKCBzZWxlY3RlZEluZGV4ICk7CgkJCQlyZXR1cm47CgkJCWNhc2UgJC51aS5rZXlDb2RlLkVOVEVSOgoJCQkJLy8gVG9nZ2xlIChjYW5jZWwgZGVsYXllZCBhY3RpdmF0aW9uLCBhbGxvdyBjb2xsYXBzaW5nKQoJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCWNsZWFyVGltZW91dCggdGhpcy5hY3RpdmF0aW5nICk7CgkJCQkvLyBEZXRlcm1pbmUgaWYgd2Ugc2hvdWxkIGNvbGxhcHNlIG9yIGFjdGl2YXRlCgkJCQl0aGlzLl9hY3RpdmF0ZSggc2VsZWN0ZWRJbmRleCA9PT0gdGhpcy5vcHRpb25zLmFjdGl2ZSA/IGZhbHNlIDogc2VsZWN0ZWRJbmRleCApOwoJCQkJcmV0dXJuOwoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuOwoJCX0KCgkJLy8gRm9jdXMgdGhlIGFwcHJvcHJpYXRlIHRhYiwgYmFzZWQgb24gd2hpY2gga2V5IHdhcyBwcmVzc2VkCgkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQljbGVhclRpbWVvdXQoIHRoaXMuYWN0aXZhdGluZyApOwoJCXNlbGVjdGVkSW5kZXggPSB0aGlzLl9mb2N1c05leHRUYWIoIHNlbGVjdGVkSW5kZXgsIGdvaW5nRm9yd2FyZCApOwoKCQkvLyBOYXZpZ2F0aW5nIHdpdGggY29udHJvbCBrZXkgd2lsbCBwcmV2ZW50IGF1dG9tYXRpYyBhY3RpdmF0aW9uCgkJaWYgKCAhZXZlbnQuY3RybEtleSApIHsKCQkJLy8gVXBkYXRlIGFyaWEtc2VsZWN0ZWQgaW1tZWRpYXRlbHkgc28gdGhhdCBBVCB0aGluayB0aGUgdGFiIGlzIGFscmVhZHkgc2VsZWN0ZWQuCgkJCS8vIE90aGVyd2lzZSBBVCBtYXkgY29uZnVzZSB0aGUgdXNlciBieSBzdGF0aW5nIHRoYXQgdGhleSBuZWVkIHRvIGFjdGl2YXRlIHRoZSB0YWIsCgkJCS8vIGJ1dCB0aGUgdGFiIHdpbGwgYWxyZWFkeSBiZSBhY3RpdmF0ZWQgYnkgdGhlIHRpbWUgdGhlIGFubm91bmNlbWVudCBmaW5pc2hlcy4KCQkJZm9jdXNlZFRhYi5hdHRyKCAiYXJpYS1zZWxlY3RlZCIsICJmYWxzZSIgKTsKCQkJdGhpcy50YWJzLmVxKCBzZWxlY3RlZEluZGV4ICkuYXR0ciggImFyaWEtc2VsZWN0ZWQiLCAidHJ1ZSIgKTsKCgkJCXRoaXMuYWN0aXZhdGluZyA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkgewoJCQkJdGhpcy5vcHRpb24oICJhY3RpdmUiLCBzZWxlY3RlZEluZGV4ICk7CgkJCX0sIHRoaXMuZGVsYXkgKTsKCQl9Cgl9LAoKCV9wYW5lbEtleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHsKCQlpZiAoIHRoaXMuX2hhbmRsZVBhZ2VOYXYoIGV2ZW50ICkgKSB7CgkJCXJldHVybjsKCQl9CgoJCS8vIEN0cmwrdXAgbW92ZXMgZm9jdXMgdG8gdGhlIGN1cnJlbnQgdGFiCgkJaWYgKCBldmVudC5jdHJsS2V5ICYmIGV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5VUCApIHsKCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJdGhpcy5hY3RpdmUuZm9jdXMoKTsKCQl9Cgl9LAoKCS8vIEFsdCtwYWdlIHVwL2Rvd24gbW92ZXMgZm9jdXMgdG8gdGhlIHByZXZpb3VzL25leHQgdGFiIChhbmQgYWN0aXZhdGVzKQoJX2hhbmRsZVBhZ2VOYXY6IGZ1bmN0aW9uKCBldmVudCApIHsKCQlpZiAoIGV2ZW50LmFsdEtleSAmJiBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuUEFHRV9VUCApIHsKCQkJdGhpcy5fYWN0aXZhdGUoIHRoaXMuX2ZvY3VzTmV4dFRhYiggdGhpcy5vcHRpb25zLmFjdGl2ZSAtIDEsIGZhbHNlICkgKTsKCQkJcmV0dXJuIHRydWU7CgkJfQoJCWlmICggZXZlbnQuYWx0S2V5ICYmIGV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5QQUdFX0RPV04gKSB7CgkJCXRoaXMuX2FjdGl2YXRlKCB0aGlzLl9mb2N1c05leHRUYWIoIHRoaXMub3B0aW9ucy5hY3RpdmUgKyAxLCB0cnVlICkgKTsKCQkJcmV0dXJuIHRydWU7CgkJfQoJfSwKCglfZmluZE5leHRUYWI6IGZ1bmN0aW9uKCBpbmRleCwgZ29pbmdGb3J3YXJkICkgewoJCXZhciBsYXN0VGFiSW5kZXggPSB0aGlzLnRhYnMubGVuZ3RoIC0gMTsKCgkJZnVuY3Rpb24gY29uc3RyYWluKCkgewoJCQlpZiAoIGluZGV4ID4gbGFzdFRhYkluZGV4ICkgewoJCQkJaW5kZXggPSAwOwoJCQl9CgkJCWlmICggaW5kZXggPCAwICkgewoJCQkJaW5kZXggPSBsYXN0VGFiSW5kZXg7CgkJCX0KCQkJcmV0dXJuIGluZGV4OwoJCX0KCgkJd2hpbGUgKCAkLmluQXJyYXkoIGNvbnN0cmFpbigpLCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSAhPT0gLTEgKSB7CgkJCWluZGV4ID0gZ29pbmdGb3J3YXJkID8gaW5kZXggKyAxIDogaW5kZXggLSAxOwoJCX0KCgkJcmV0dXJuIGluZGV4OwoJfSwKCglfZm9jdXNOZXh0VGFiOiBmdW5jdGlvbiggaW5kZXgsIGdvaW5nRm9yd2FyZCApIHsKCQlpbmRleCA9IHRoaXMuX2ZpbmROZXh0VGFiKCBpbmRleCwgZ29pbmdGb3J3YXJkICk7CgkJdGhpcy50YWJzLmVxKCBpbmRleCApLmZvY3VzKCk7CgkJcmV0dXJuIGluZGV4OwoJfSwKCglfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHsKCQlpZiAoIGtleSA9PT0gImFjdGl2ZSIgKSB7CgkJCS8vIF9hY3RpdmF0ZSgpIHdpbGwgaGFuZGxlIGludmFsaWQgdmFsdWVzIGFuZCB1cGRhdGUgdGhpcy5vcHRpb25zCgkJCXRoaXMuX2FjdGl2YXRlKCB2YWx1ZSApOwoJCQlyZXR1cm47CgkJfQoKCQlpZiAoIGtleSA9PT0gImRpc2FibGVkIiApIHsKCQkJLy8gZG9uJ3QgdXNlIHRoZSB3aWRnZXQgZmFjdG9yeSdzIGRpc2FibGVkIGhhbmRsaW5nCgkJCXRoaXMuX3NldHVwRGlzYWJsZWQoIHZhbHVlICk7CgkJCXJldHVybjsKCQl9CgoJCXRoaXMuX3N1cGVyKCBrZXksIHZhbHVlKTsKCgkJaWYgKCBrZXkgPT09ICJjb2xsYXBzaWJsZSIgKSB7CgkJCXRoaXMuZWxlbWVudC50b2dnbGVDbGFzcyggInVpLXRhYnMtY29sbGFwc2libGUiLCB2YWx1ZSApOwoJCQkvLyBTZXR0aW5nIGNvbGxhcHNpYmxlOiBmYWxzZSB3aGlsZSBjb2xsYXBzZWQ7IG9wZW4gZmlyc3QgcGFuZWwKCQkJaWYgKCAhdmFsdWUgJiYgdGhpcy5vcHRpb25zLmFjdGl2ZSA9PT0gZmFsc2UgKSB7CgkJCQl0aGlzLl9hY3RpdmF0ZSggMCApOwoJCQl9CgkJfQoKCQlpZiAoIGtleSA9PT0gImV2ZW50IiApIHsKCQkJdGhpcy5fc2V0dXBFdmVudHMoIHZhbHVlICk7CgkJfQoKCQlpZiAoIGtleSA9PT0gImhlaWdodFN0eWxlIiApIHsKCQkJdGhpcy5fc2V0dXBIZWlnaHRTdHlsZSggdmFsdWUgKTsKCQl9Cgl9LAoKCV90YWJJZDogZnVuY3Rpb24oIHRhYiApIHsKCQlyZXR1cm4gdGFiLmF0dHIoICJhcmlhLWNvbnRyb2xzIiApIHx8ICJ1aS10YWJzLSIgKyBnZXROZXh0VGFiSWQoKTsKCX0sCgoJX3Nhbml0aXplU2VsZWN0b3I6IGZ1bmN0aW9uKCBoYXNoICkgewoJCXJldHVybiBoYXNoID8gaGFzaC5yZXBsYWNlKCAvWyEiJCUmJygpKissLlwvOjs8PT4/QFxbXF1cXmB7fH1+XS9nLCAiXFwkJiIgKSA6ICIiOwoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJbGlzID0gdGhpcy50YWJsaXN0LmNoaWxkcmVuKCAiOmhhcyhhW2hyZWZdKSIgKTsKCgkJLy8gZ2V0IGRpc2FibGVkIHRhYnMgZnJvbSBjbGFzcyBhdHRyaWJ1dGUgZnJvbSBIVE1MCgkJLy8gdGhpcyB3aWxsIGdldCBjb252ZXJ0ZWQgdG8gYSBib29sZWFuIGlmIG5lZWRlZCBpbiBfcmVmcmVzaCgpCgkJb3B0aW9ucy5kaXNhYmxlZCA9ICQubWFwKCBsaXMuZmlsdGVyKCAiLnVpLXN0YXRlLWRpc2FibGVkIiApLCBmdW5jdGlvbiggdGFiICkgewoJCQlyZXR1cm4gbGlzLmluZGV4KCB0YWIgKTsKCQl9KTsKCgkJdGhpcy5fcHJvY2Vzc1RhYnMoKTsKCgkJLy8gd2FzIGNvbGxhcHNlZCBvciBubyB0YWJzCgkJaWYgKCBvcHRpb25zLmFjdGl2ZSA9PT0gZmFsc2UgfHwgIXRoaXMuYW5jaG9ycy5sZW5ndGggKSB7CgkJCW9wdGlvbnMuYWN0aXZlID0gZmFsc2U7CgkJCXRoaXMuYWN0aXZlID0gJCgpOwoJCS8vIHdhcyBhY3RpdmUsIGJ1dCBhY3RpdmUgdGFiIGlzIGdvbmUKCQl9IGVsc2UgaWYgKCB0aGlzLmFjdGl2ZS5sZW5ndGggJiYgISQuY29udGFpbnMoIHRoaXMudGFibGlzdFsgMCBdLCB0aGlzLmFjdGl2ZVsgMCBdICkgKSB7CgkJCS8vIGFsbCByZW1haW5pbmcgdGFicyBhcmUgZGlzYWJsZWQKCQkJaWYgKCB0aGlzLnRhYnMubGVuZ3RoID09PSBvcHRpb25zLmRpc2FibGVkLmxlbmd0aCApIHsKCQkJCW9wdGlvbnMuYWN0aXZlID0gZmFsc2U7CgkJCQl0aGlzLmFjdGl2ZSA9ICQoKTsKCQkJLy8gYWN0aXZhdGUgcHJldmlvdXMgdGFiCgkJCX0gZWxzZSB7CgkJCQl0aGlzLl9hY3RpdmF0ZSggdGhpcy5fZmluZE5leHRUYWIoIE1hdGgubWF4KCAwLCBvcHRpb25zLmFjdGl2ZSAtIDEgKSwgZmFsc2UgKSApOwoJCQl9CgkJLy8gd2FzIGFjdGl2ZSwgYWN0aXZlIHRhYiBzdGlsbCBleGlzdHMKCQl9IGVsc2UgewoJCQkvLyBtYWtlIHN1cmUgYWN0aXZlIGluZGV4IGlzIGNvcnJlY3QKCQkJb3B0aW9ucy5hY3RpdmUgPSB0aGlzLnRhYnMuaW5kZXgoIHRoaXMuYWN0aXZlICk7CgkJfQoKCQl0aGlzLl9yZWZyZXNoKCk7Cgl9LAoKCV9yZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl0aGlzLl9zZXR1cERpc2FibGVkKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKTsKCQl0aGlzLl9zZXR1cEV2ZW50cyggdGhpcy5vcHRpb25zLmV2ZW50ICk7CgkJdGhpcy5fc2V0dXBIZWlnaHRTdHlsZSggdGhpcy5vcHRpb25zLmhlaWdodFN0eWxlICk7CgoJCXRoaXMudGFicy5ub3QoIHRoaXMuYWN0aXZlICkuYXR0cih7CgkJCSJhcmlhLXNlbGVjdGVkIjogImZhbHNlIiwKCQkJdGFiSW5kZXg6IC0xCgkJfSk7CgkJdGhpcy5wYW5lbHMubm90KCB0aGlzLl9nZXRQYW5lbEZvclRhYiggdGhpcy5hY3RpdmUgKSApCgkJCS5oaWRlKCkKCQkJLmF0dHIoewoJCQkJImFyaWEtZXhwYW5kZWQiOiAiZmFsc2UiLAoJCQkJImFyaWEtaGlkZGVuIjogInRydWUiCgkJCX0pOwoKCQkvLyBNYWtlIHN1cmUgb25lIHRhYiBpcyBpbiB0aGUgdGFiIG9yZGVyCgkJaWYgKCAhdGhpcy5hY3RpdmUubGVuZ3RoICkgewoJCQl0aGlzLnRhYnMuZXEoIDAgKS5hdHRyKCAidGFiSW5kZXgiLCAwICk7CgkJfSBlbHNlIHsKCQkJdGhpcy5hY3RpdmUKCQkJCS5hZGRDbGFzcyggInVpLXRhYnMtYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSIgKQoJCQkJLmF0dHIoewoJCQkJCSJhcmlhLXNlbGVjdGVkIjogInRydWUiLAoJCQkJCXRhYkluZGV4OiAwCgkJCQl9KTsKCQkJdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRoaXMuYWN0aXZlICkKCQkJCS5zaG93KCkKCQkJCS5hdHRyKHsKCQkJCQkiYXJpYS1leHBhbmRlZCI6ICJ0cnVlIiwKCQkJCQkiYXJpYS1oaWRkZW4iOiAiZmFsc2UiCgkJCQl9KTsKCQl9Cgl9LAoKCV9wcm9jZXNzVGFiczogZnVuY3Rpb24oKSB7CgkJdmFyIHRoYXQgPSB0aGlzOwoKCQl0aGlzLnRhYmxpc3QgPSB0aGlzLl9nZXRMaXN0KCkKCQkJLmFkZENsYXNzKCAidWktdGFicy1uYXYgdWktaGVscGVyLXJlc2V0IHVpLWhlbHBlci1jbGVhcmZpeCB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGwiICkKCQkJLmF0dHIoICJyb2xlIiwgInRhYmxpc3QiICk7CgoJCXRoaXMudGFicyA9IHRoaXMudGFibGlzdC5maW5kKCAiPiBsaTpoYXMoYVtocmVmXSkiICkKCQkJLmFkZENsYXNzKCAidWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItdG9wIiApCgkJCS5hdHRyKHsKCQkJCXJvbGU6ICJ0YWIiLAoJCQkJdGFiSW5kZXg6IC0xCgkJCX0pOwoKCQl0aGlzLmFuY2hvcnMgPSB0aGlzLnRhYnMubWFwKGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICQoICJhIiwgdGhpcyApWyAwIF07CgkJCX0pCgkJCS5hZGRDbGFzcyggInVpLXRhYnMtYW5jaG9yIiApCgkJCS5hdHRyKHsKCQkJCXJvbGU6ICJwcmVzZW50YXRpb24iLAoJCQkJdGFiSW5kZXg6IC0xCgkJCX0pOwoKCQl0aGlzLnBhbmVscyA9ICQoKTsKCgkJdGhpcy5hbmNob3JzLmVhY2goZnVuY3Rpb24oIGksIGFuY2hvciApIHsKCQkJdmFyIHNlbGVjdG9yLCBwYW5lbCwgcGFuZWxJZCwKCQkJCWFuY2hvcklkID0gJCggYW5jaG9yICkudW5pcXVlSWQoKS5hdHRyKCAiaWQiICksCgkJCQl0YWIgPSAkKCBhbmNob3IgKS5jbG9zZXN0KCAibGkiICksCgkJCQlvcmlnaW5hbEFyaWFDb250cm9scyA9IHRhYi5hdHRyKCAiYXJpYS1jb250cm9scyIgKTsKCgkJCS8vIGlubGluZSB0YWIKCQkJaWYgKCBpc0xvY2FsKCBhbmNob3IgKSApIHsKCQkJCXNlbGVjdG9yID0gYW5jaG9yLmhhc2g7CgkJCQlwYW5lbCA9IHRoYXQuZWxlbWVudC5maW5kKCB0aGF0Ll9zYW5pdGl6ZVNlbGVjdG9yKCBzZWxlY3RvciApICk7CgkJCS8vIHJlbW90ZSB0YWIKCQkJfSBlbHNlIHsKCQkJCXBhbmVsSWQgPSB0aGF0Ll90YWJJZCggdGFiICk7CgkJCQlzZWxlY3RvciA9ICIjIiArIHBhbmVsSWQ7CgkJCQlwYW5lbCA9IHRoYXQuZWxlbWVudC5maW5kKCBzZWxlY3RvciApOwoJCQkJaWYgKCAhcGFuZWwubGVuZ3RoICkgewoJCQkJCXBhbmVsID0gdGhhdC5fY3JlYXRlUGFuZWwoIHBhbmVsSWQgKTsKCQkJCQlwYW5lbC5pbnNlcnRBZnRlciggdGhhdC5wYW5lbHNbIGkgLSAxIF0gfHwgdGhhdC50YWJsaXN0ICk7CgkJCQl9CgkJCQlwYW5lbC5hdHRyKCAiYXJpYS1saXZlIiwgInBvbGl0ZSIgKTsKCQkJfQoKCQkJaWYgKCBwYW5lbC5sZW5ndGgpIHsKCQkJCXRoYXQucGFuZWxzID0gdGhhdC5wYW5lbHMuYWRkKCBwYW5lbCApOwoJCQl9CgkJCWlmICggb3JpZ2luYWxBcmlhQ29udHJvbHMgKSB7CgkJCQl0YWIuZGF0YSggInVpLXRhYnMtYXJpYS1jb250cm9scyIsIG9yaWdpbmFsQXJpYUNvbnRyb2xzICk7CgkJCX0KCQkJdGFiLmF0dHIoewoJCQkJImFyaWEtY29udHJvbHMiOiBzZWxlY3Rvci5zdWJzdHJpbmcoIDEgKSwKCQkJCSJhcmlhLWxhYmVsbGVkYnkiOiBhbmNob3JJZAoJCQl9KTsKCQkJcGFuZWwuYXR0ciggImFyaWEtbGFiZWxsZWRieSIsIGFuY2hvcklkICk7CgkJfSk7CgoJCXRoaXMucGFuZWxzCgkJCS5hZGRDbGFzcyggInVpLXRhYnMtcGFuZWwgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSIgKQoJCQkuYXR0ciggInJvbGUiLCAidGFicGFuZWwiICk7Cgl9LAoKCS8vIGFsbG93IG92ZXJyaWRpbmcgaG93IHRvIGZpbmQgdGhlIGxpc3QgZm9yIHJhcmUgdXNhZ2Ugc2NlbmFyaW9zICgjNzcxNSkKCV9nZXRMaXN0OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5lbGVtZW50LmZpbmQoICJvbCx1bCIgKS5lcSggMCApOwoJfSwKCglfY3JlYXRlUGFuZWw6IGZ1bmN0aW9uKCBpZCApIHsKCQlyZXR1cm4gJCggIjxkaXY+IiApCgkJCS5hdHRyKCAiaWQiLCBpZCApCgkJCS5hZGRDbGFzcyggInVpLXRhYnMtcGFuZWwgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSIgKQoJCQkuZGF0YSggInVpLXRhYnMtZGVzdHJveSIsIHRydWUgKTsKCX0sCgoJX3NldHVwRGlzYWJsZWQ6IGZ1bmN0aW9uKCBkaXNhYmxlZCApIHsKCQlpZiAoICQuaXNBcnJheSggZGlzYWJsZWQgKSApIHsKCQkJaWYgKCAhZGlzYWJsZWQubGVuZ3RoICkgewoJCQkJZGlzYWJsZWQgPSBmYWxzZTsKCQkJfSBlbHNlIGlmICggZGlzYWJsZWQubGVuZ3RoID09PSB0aGlzLmFuY2hvcnMubGVuZ3RoICkgewoJCQkJZGlzYWJsZWQgPSB0cnVlOwoJCQl9CgkJfQoKCQkvLyBkaXNhYmxlIHRhYnMKCQlmb3IgKCB2YXIgaSA9IDAsIGxpOyAoIGxpID0gdGhpcy50YWJzWyBpIF0gKTsgaSsrICkgewoJCQlpZiAoIGRpc2FibGVkID09PSB0cnVlIHx8ICQuaW5BcnJheSggaSwgZGlzYWJsZWQgKSAhPT0gLTEgKSB7CgkJCQkkKCBsaSApCgkJCQkJLmFkZENsYXNzKCAidWktc3RhdGUtZGlzYWJsZWQiICkKCQkJCQkuYXR0ciggImFyaWEtZGlzYWJsZWQiLCAidHJ1ZSIgKTsKCQkJfSBlbHNlIHsKCQkJCSQoIGxpICkKCQkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1kaXNhYmxlZCIgKQoJCQkJCS5yZW1vdmVBdHRyKCAiYXJpYS1kaXNhYmxlZCIgKTsKCQkJfQoJCX0KCgkJdGhpcy5vcHRpb25zLmRpc2FibGVkID0gZGlzYWJsZWQ7Cgl9LAoKCV9zZXR1cEV2ZW50czogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBldmVudHMgPSB7CgkJCWNsaWNrOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQl9CgkJfTsKCQlpZiAoIGV2ZW50ICkgewoJCQkkLmVhY2goIGV2ZW50LnNwbGl0KCIgIiksIGZ1bmN0aW9uKCBpbmRleCwgZXZlbnROYW1lICkgewoJCQkJZXZlbnRzWyBldmVudE5hbWUgXSA9ICJfZXZlbnRIYW5kbGVyIjsKCQkJfSk7CgkJfQoKCQl0aGlzLl9vZmYoIHRoaXMuYW5jaG9ycy5hZGQoIHRoaXMudGFicyApLmFkZCggdGhpcy5wYW5lbHMgKSApOwoJCXRoaXMuX29uKCB0aGlzLmFuY2hvcnMsIGV2ZW50cyApOwoJCXRoaXMuX29uKCB0aGlzLnRhYnMsIHsga2V5ZG93bjogIl90YWJLZXlkb3duIiB9ICk7CgkJdGhpcy5fb24oIHRoaXMucGFuZWxzLCB7IGtleWRvd246ICJfcGFuZWxLZXlkb3duIiB9ICk7CgoJCXRoaXMuX2ZvY3VzYWJsZSggdGhpcy50YWJzICk7CgkJdGhpcy5faG92ZXJhYmxlKCB0aGlzLnRhYnMgKTsKCX0sCgoJX3NldHVwSGVpZ2h0U3R5bGU6IGZ1bmN0aW9uKCBoZWlnaHRTdHlsZSApIHsKCQl2YXIgbWF4SGVpZ2h0LAoJCQlwYXJlbnQgPSB0aGlzLmVsZW1lbnQucGFyZW50KCk7CgoJCWlmICggaGVpZ2h0U3R5bGUgPT09ICJmaWxsIiApIHsKCQkJbWF4SGVpZ2h0ID0gcGFyZW50LmhlaWdodCgpOwoJCQltYXhIZWlnaHQgLT0gdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCkgLSB0aGlzLmVsZW1lbnQuaGVpZ2h0KCk7CgoJCQl0aGlzLmVsZW1lbnQuc2libGluZ3MoICI6dmlzaWJsZSIgKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdmFyIGVsZW0gPSAkKCB0aGlzICksCgkJCQkJcG9zaXRpb24gPSBlbGVtLmNzcyggInBvc2l0aW9uIiApOwoKCQkJCWlmICggcG9zaXRpb24gPT09ICJhYnNvbHV0ZSIgfHwgcG9zaXRpb24gPT09ICJmaXhlZCIgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoJCQkJbWF4SGVpZ2h0IC09IGVsZW0ub3V0ZXJIZWlnaHQoIHRydWUgKTsKCQkJfSk7CgoJCQl0aGlzLmVsZW1lbnQuY2hpbGRyZW4oKS5ub3QoIHRoaXMucGFuZWxzICkuZWFjaChmdW5jdGlvbigpIHsKCQkJCW1heEhlaWdodCAtPSAkKCB0aGlzICkub3V0ZXJIZWlnaHQoIHRydWUgKTsKCQkJfSk7CgoJCQl0aGlzLnBhbmVscy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJJCggdGhpcyApLmhlaWdodCggTWF0aC5tYXgoIDAsIG1heEhlaWdodCAtCgkJCQkJJCggdGhpcyApLmlubmVySGVpZ2h0KCkgKyAkKCB0aGlzICkuaGVpZ2h0KCkgKSApOwoJCQl9KQoJCQkuY3NzKCAib3ZlcmZsb3ciLCAiYXV0byIgKTsKCQl9IGVsc2UgaWYgKCBoZWlnaHRTdHlsZSA9PT0gImF1dG8iICkgewoJCQltYXhIZWlnaHQgPSAwOwoJCQl0aGlzLnBhbmVscy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJbWF4SGVpZ2h0ID0gTWF0aC5tYXgoIG1heEhlaWdodCwgJCggdGhpcyApLmhlaWdodCggIiIgKS5oZWlnaHQoKSApOwoJCQl9KS5oZWlnaHQoIG1heEhlaWdodCApOwoJCX0KCX0sCgoJX2V2ZW50SGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLAoJCQlhY3RpdmUgPSB0aGlzLmFjdGl2ZSwKCQkJYW5jaG9yID0gJCggZXZlbnQuY3VycmVudFRhcmdldCApLAoJCQl0YWIgPSBhbmNob3IuY2xvc2VzdCggImxpIiApLAoJCQljbGlja2VkSXNBY3RpdmUgPSB0YWJbIDAgXSA9PT0gYWN0aXZlWyAwIF0sCgkJCWNvbGxhcHNpbmcgPSBjbGlja2VkSXNBY3RpdmUgJiYgb3B0aW9ucy5jb2xsYXBzaWJsZSwKCQkJdG9TaG93ID0gY29sbGFwc2luZyA/ICQoKSA6IHRoaXMuX2dldFBhbmVsRm9yVGFiKCB0YWIgKSwKCQkJdG9IaWRlID0gIWFjdGl2ZS5sZW5ndGggPyAkKCkgOiB0aGlzLl9nZXRQYW5lbEZvclRhYiggYWN0aXZlICksCgkJCWV2ZW50RGF0YSA9IHsKCQkJCW9sZFRhYjogYWN0aXZlLAoJCQkJb2xkUGFuZWw6IHRvSGlkZSwKCQkJCW5ld1RhYjogY29sbGFwc2luZyA/ICQoKSA6IHRhYiwKCQkJCW5ld1BhbmVsOiB0b1Nob3cKCQkJfTsKCgkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCgkJaWYgKCB0YWIuaGFzQ2xhc3MoICJ1aS1zdGF0ZS1kaXNhYmxlZCIgKSB8fAoJCQkJLy8gdGFiIGlzIGFscmVhZHkgbG9hZGluZwoJCQkJdGFiLmhhc0NsYXNzKCAidWktdGFicy1sb2FkaW5nIiApIHx8CgkJCQkvLyBjYW4ndCBzd2l0Y2ggZHVybmluZyBhbiBhbmltYXRpb24KCQkJCXRoaXMucnVubmluZyB8fAoJCQkJLy8gY2xpY2sgb24gYWN0aXZlIGhlYWRlciwgYnV0IG5vdCBjb2xsYXBzaWJsZQoJCQkJKCBjbGlja2VkSXNBY3RpdmUgJiYgIW9wdGlvbnMuY29sbGFwc2libGUgKSB8fAoJCQkJLy8gYWxsb3cgY2FuY2VsaW5nIGFjdGl2YXRpb24KCQkJCSggdGhpcy5fdHJpZ2dlciggImJlZm9yZUFjdGl2YXRlIiwgZXZlbnQsIGV2ZW50RGF0YSApID09PSBmYWxzZSApICkgewoJCQlyZXR1cm47CgkJfQoKCQlvcHRpb25zLmFjdGl2ZSA9IGNvbGxhcHNpbmcgPyBmYWxzZSA6IHRoaXMudGFicy5pbmRleCggdGFiICk7CgoJCXRoaXMuYWN0aXZlID0gY2xpY2tlZElzQWN0aXZlID8gJCgpIDogdGFiOwoJCWlmICggdGhpcy54aHIgKSB7CgkJCXRoaXMueGhyLmFib3J0KCk7CgkJfQoKCQlpZiAoICF0b0hpZGUubGVuZ3RoICYmICF0b1Nob3cubGVuZ3RoICkgewoJCQkkLmVycm9yKCAialF1ZXJ5IFVJIFRhYnM6IE1pc21hdGNoaW5nIGZyYWdtZW50IGlkZW50aWZpZXIuIiApOwoJCX0KCgkJaWYgKCB0b1Nob3cubGVuZ3RoICkgewoJCQl0aGlzLmxvYWQoIHRoaXMudGFicy5pbmRleCggdGFiICksIGV2ZW50ICk7CgkJfQoJCXRoaXMuX3RvZ2dsZSggZXZlbnQsIGV2ZW50RGF0YSApOwoJfSwKCgkvLyBoYW5kbGVzIHNob3cvaGlkZSBmb3Igc2VsZWN0aW5nIHRhYnMKCV90b2dnbGU6IGZ1bmN0aW9uKCBldmVudCwgZXZlbnREYXRhICkgewoJCXZhciB0aGF0ID0gdGhpcywKCQkJdG9TaG93ID0gZXZlbnREYXRhLm5ld1BhbmVsLAoJCQl0b0hpZGUgPSBldmVudERhdGEub2xkUGFuZWw7CgoJCXRoaXMucnVubmluZyA9IHRydWU7CgoJCWZ1bmN0aW9uIGNvbXBsZXRlKCkgewoJCQl0aGF0LnJ1bm5pbmcgPSBmYWxzZTsKCQkJdGhhdC5fdHJpZ2dlciggImFjdGl2YXRlIiwgZXZlbnQsIGV2ZW50RGF0YSApOwoJCX0KCgkJZnVuY3Rpb24gc2hvdygpIHsKCQkJZXZlbnREYXRhLm5ld1RhYi5jbG9zZXN0KCAibGkiICkuYWRkQ2xhc3MoICJ1aS10YWJzLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmUiICk7CgoJCQlpZiAoIHRvU2hvdy5sZW5ndGggJiYgdGhhdC5vcHRpb25zLnNob3cgKSB7CgkJCQl0aGF0Ll9zaG93KCB0b1Nob3csIHRoYXQub3B0aW9ucy5zaG93LCBjb21wbGV0ZSApOwoJCQl9IGVsc2UgewoJCQkJdG9TaG93LnNob3coKTsKCQkJCWNvbXBsZXRlKCk7CgkJCX0KCQl9CgoJCS8vIHN0YXJ0IG91dCBieSBoaWRpbmcsIHRoZW4gc2hvd2luZywgdGhlbiBjb21wbGV0aW5nCgkJaWYgKCB0b0hpZGUubGVuZ3RoICYmIHRoaXMub3B0aW9ucy5oaWRlICkgewoJCQl0aGlzLl9oaWRlKCB0b0hpZGUsIHRoaXMub3B0aW9ucy5oaWRlLCBmdW5jdGlvbigpIHsKCQkJCWV2ZW50RGF0YS5vbGRUYWIuY2xvc2VzdCggImxpIiApLnJlbW92ZUNsYXNzKCAidWktdGFicy1hY3RpdmUgdWktc3RhdGUtYWN0aXZlIiApOwoJCQkJc2hvdygpOwoJCQl9KTsKCQl9IGVsc2UgewoJCQlldmVudERhdGEub2xkVGFiLmNsb3Nlc3QoICJsaSIgKS5yZW1vdmVDbGFzcyggInVpLXRhYnMtYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSIgKTsKCQkJdG9IaWRlLmhpZGUoKTsKCQkJc2hvdygpOwoJCX0KCgkJdG9IaWRlLmF0dHIoewoJCQkiYXJpYS1leHBhbmRlZCI6ICJmYWxzZSIsCgkJCSJhcmlhLWhpZGRlbiI6ICJ0cnVlIgoJCX0pOwoJCWV2ZW50RGF0YS5vbGRUYWIuYXR0ciggImFyaWEtc2VsZWN0ZWQiLCAiZmFsc2UiICk7CgkJLy8gSWYgd2UncmUgc3dpdGNoaW5nIHRhYnMsIHJlbW92ZSB0aGUgb2xkIHRhYiBmcm9tIHRoZSB0YWIgb3JkZXIuCgkJLy8gSWYgd2UncmUgb3BlbmluZyBmcm9tIGNvbGxhcHNlZCBzdGF0ZSwgcmVtb3ZlIHRoZSBwcmV2aW91cyB0YWIgZnJvbSB0aGUgdGFiIG9yZGVyLgoJCS8vIElmIHdlJ3JlIGNvbGxhcHNpbmcsIHRoZW4ga2VlcCB0aGUgY29sbGFwc2luZyB0YWIgaW4gdGhlIHRhYiBvcmRlci4KCQlpZiAoIHRvU2hvdy5sZW5ndGggJiYgdG9IaWRlLmxlbmd0aCApIHsKCQkJZXZlbnREYXRhLm9sZFRhYi5hdHRyKCAidGFiSW5kZXgiLCAtMSApOwoJCX0gZWxzZSBpZiAoIHRvU2hvdy5sZW5ndGggKSB7CgkJCXRoaXMudGFicy5maWx0ZXIoZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gJCggdGhpcyApLmF0dHIoICJ0YWJJbmRleCIgKSA9PT0gMDsKCQkJfSkKCQkJLmF0dHIoICJ0YWJJbmRleCIsIC0xICk7CgkJfQoKCQl0b1Nob3cuYXR0cih7CgkJCSJhcmlhLWV4cGFuZGVkIjogInRydWUiLAoJCQkiYXJpYS1oaWRkZW4iOiAiZmFsc2UiCgkJfSk7CgkJZXZlbnREYXRhLm5ld1RhYi5hdHRyKHsKCQkJImFyaWEtc2VsZWN0ZWQiOiAidHJ1ZSIsCgkJCXRhYkluZGV4OiAwCgkJfSk7Cgl9LAoKCV9hY3RpdmF0ZTogZnVuY3Rpb24oIGluZGV4ICkgewoJCXZhciBhbmNob3IsCgkJCWFjdGl2ZSA9IHRoaXMuX2ZpbmRBY3RpdmUoIGluZGV4ICk7CgoJCS8vIHRyeWluZyB0byBhY3RpdmF0ZSB0aGUgYWxyZWFkeSBhY3RpdmUgcGFuZWwKCQlpZiAoIGFjdGl2ZVsgMCBdID09PSB0aGlzLmFjdGl2ZVsgMCBdICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyB0cnlpbmcgdG8gY29sbGFwc2UsIHNpbXVsYXRlIGEgY2xpY2sgb24gdGhlIGN1cnJlbnQgYWN0aXZlIGhlYWRlcgoJCWlmICggIWFjdGl2ZS5sZW5ndGggKSB7CgkJCWFjdGl2ZSA9IHRoaXMuYWN0aXZlOwoJCX0KCgkJYW5jaG9yID0gYWN0aXZlLmZpbmQoICIudWktdGFicy1hbmNob3IiIClbIDAgXTsKCQl0aGlzLl9ldmVudEhhbmRsZXIoewoJCQl0YXJnZXQ6IGFuY2hvciwKCQkJY3VycmVudFRhcmdldDogYW5jaG9yLAoJCQlwcmV2ZW50RGVmYXVsdDogJC5ub29wCgkJfSk7Cgl9LAoKCV9maW5kQWN0aXZlOiBmdW5jdGlvbiggaW5kZXggKSB7CgkJcmV0dXJuIGluZGV4ID09PSBmYWxzZSA/ICQoKSA6IHRoaXMudGFicy5lcSggaW5kZXggKTsKCX0sCgoJX2dldEluZGV4OiBmdW5jdGlvbiggaW5kZXggKSB7CgkJLy8gbWV0YS1mdW5jdGlvbiB0byBnaXZlIHVzZXJzIG9wdGlvbiB0byBwcm92aWRlIGEgaHJlZiBzdHJpbmcgaW5zdGVhZCBvZiBhIG51bWVyaWNhbCBpbmRleC4KCQlpZiAoIHR5cGVvZiBpbmRleCA9PT0gInN0cmluZyIgKSB7CgkJCWluZGV4ID0gdGhpcy5hbmNob3JzLmluZGV4KCB0aGlzLmFuY2hvcnMuZmlsdGVyKCAiW2hyZWYkPSciICsgaW5kZXggKyAiJ10iICkgKTsKCQl9CgoJCXJldHVybiBpbmRleDsKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCWlmICggdGhpcy54aHIgKSB7CgkJCXRoaXMueGhyLmFib3J0KCk7CgkJfQoKCQl0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoICJ1aS10YWJzIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIHVpLXRhYnMtY29sbGFwc2libGUiICk7CgoJCXRoaXMudGFibGlzdAoJCQkucmVtb3ZlQ2xhc3MoICJ1aS10YWJzLW5hdiB1aS1oZWxwZXItcmVzZXQgdWktaGVscGVyLWNsZWFyZml4IHVpLXdpZGdldC1oZWFkZXIgdWktY29ybmVyLWFsbCIgKQoJCQkucmVtb3ZlQXR0ciggInJvbGUiICk7CgoJCXRoaXMuYW5jaG9ycwoJCQkucmVtb3ZlQ2xhc3MoICJ1aS10YWJzLWFuY2hvciIgKQoJCQkucmVtb3ZlQXR0ciggInJvbGUiICkKCQkJLnJlbW92ZUF0dHIoICJ0YWJJbmRleCIgKQoJCQkucmVtb3ZlVW5pcXVlSWQoKTsKCgkJdGhpcy50YWJzLmFkZCggdGhpcy5wYW5lbHMgKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQlpZiAoICQuZGF0YSggdGhpcywgInVpLXRhYnMtZGVzdHJveSIgKSApIHsKCQkJCSQoIHRoaXMgKS5yZW1vdmUoKTsKCQkJfSBlbHNlIHsKCQkJCSQoIHRoaXMgKQoJCQkJCS5yZW1vdmVDbGFzcyggInVpLXN0YXRlLWRlZmF1bHQgdWktc3RhdGUtYWN0aXZlIHVpLXN0YXRlLWRpc2FibGVkICIgKwoJCQkJCQkidWktY29ybmVyLXRvcCB1aS1jb3JuZXItYm90dG9tIHVpLXdpZGdldC1jb250ZW50IHVpLXRhYnMtYWN0aXZlIHVpLXRhYnMtcGFuZWwiICkKCQkJCQkucmVtb3ZlQXR0ciggInRhYkluZGV4IiApCgkJCQkJLnJlbW92ZUF0dHIoICJhcmlhLWxpdmUiICkKCQkJCQkucmVtb3ZlQXR0ciggImFyaWEtYnVzeSIgKQoJCQkJCS5yZW1vdmVBdHRyKCAiYXJpYS1zZWxlY3RlZCIgKQoJCQkJCS5yZW1vdmVBdHRyKCAiYXJpYS1sYWJlbGxlZGJ5IiApCgkJCQkJLnJlbW92ZUF0dHIoICJhcmlhLWhpZGRlbiIgKQoJCQkJCS5yZW1vdmVBdHRyKCAiYXJpYS1leHBhbmRlZCIgKQoJCQkJCS5yZW1vdmVBdHRyKCAicm9sZSIgKTsKCQkJfQoJCX0pOwoKCQl0aGlzLnRhYnMuZWFjaChmdW5jdGlvbigpIHsKCQkJdmFyIGxpID0gJCggdGhpcyApLAoJCQkJcHJldiA9IGxpLmRhdGEoICJ1aS10YWJzLWFyaWEtY29udHJvbHMiICk7CgkJCWlmICggcHJldiApIHsKCQkJCWxpCgkJCQkJLmF0dHIoICJhcmlhLWNvbnRyb2xzIiwgcHJldiApCgkJCQkJLnJlbW92ZURhdGEoICJ1aS10YWJzLWFyaWEtY29udHJvbHMiICk7CgkJCX0gZWxzZSB7CgkJCQlsaS5yZW1vdmVBdHRyKCAiYXJpYS1jb250cm9scyIgKTsKCQkJfQoJCX0pOwoKCQl0aGlzLnBhbmVscy5zaG93KCk7CgoJCWlmICggdGhpcy5vcHRpb25zLmhlaWdodFN0eWxlICE9PSAiY29udGVudCIgKSB7CgkJCXRoaXMucGFuZWxzLmNzcyggImhlaWdodCIsICIiICk7CgkJfQoJfSwKCgllbmFibGU6IGZ1bmN0aW9uKCBpbmRleCApIHsKCQl2YXIgZGlzYWJsZWQgPSB0aGlzLm9wdGlvbnMuZGlzYWJsZWQ7CgkJaWYgKCBkaXNhYmxlZCA9PT0gZmFsc2UgKSB7CgkJCXJldHVybjsKCQl9CgoJCWlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHsKCQkJZGlzYWJsZWQgPSBmYWxzZTsKCQl9IGVsc2UgewoJCQlpbmRleCA9IHRoaXMuX2dldEluZGV4KCBpbmRleCApOwoJCQlpZiAoICQuaXNBcnJheSggZGlzYWJsZWQgKSApIHsKCQkJCWRpc2FibGVkID0gJC5tYXAoIGRpc2FibGVkLCBmdW5jdGlvbiggbnVtICkgewoJCQkJCXJldHVybiBudW0gIT09IGluZGV4ID8gbnVtIDogbnVsbDsKCQkJCX0pOwoJCQl9IGVsc2UgewoJCQkJZGlzYWJsZWQgPSAkLm1hcCggdGhpcy50YWJzLCBmdW5jdGlvbiggbGksIG51bSApIHsKCQkJCQlyZXR1cm4gbnVtICE9PSBpbmRleCA/IG51bSA6IG51bGw7CgkJCQl9KTsKCQkJfQoJCX0KCQl0aGlzLl9zZXR1cERpc2FibGVkKCBkaXNhYmxlZCApOwoJfSwKCglkaXNhYmxlOiBmdW5jdGlvbiggaW5kZXggKSB7CgkJdmFyIGRpc2FibGVkID0gdGhpcy5vcHRpb25zLmRpc2FibGVkOwoJCWlmICggZGlzYWJsZWQgPT09IHRydWUgKSB7CgkJCXJldHVybjsKCQl9CgoJCWlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHsKCQkJZGlzYWJsZWQgPSB0cnVlOwoJCX0gZWxzZSB7CgkJCWluZGV4ID0gdGhpcy5fZ2V0SW5kZXgoIGluZGV4ICk7CgkJCWlmICggJC5pbkFycmF5KCBpbmRleCwgZGlzYWJsZWQgKSAhPT0gLTEgKSB7CgkJCQlyZXR1cm47CgkJCX0KCQkJaWYgKCAkLmlzQXJyYXkoIGRpc2FibGVkICkgKSB7CgkJCQlkaXNhYmxlZCA9ICQubWVyZ2UoIFsgaW5kZXggXSwgZGlzYWJsZWQgKS5zb3J0KCk7CgkJCX0gZWxzZSB7CgkJCQlkaXNhYmxlZCA9IFsgaW5kZXggXTsKCQkJfQoJCX0KCQl0aGlzLl9zZXR1cERpc2FibGVkKCBkaXNhYmxlZCApOwoJfSwKCglsb2FkOiBmdW5jdGlvbiggaW5kZXgsIGV2ZW50ICkgewoJCWluZGV4ID0gdGhpcy5fZ2V0SW5kZXgoIGluZGV4ICk7CgkJdmFyIHRoYXQgPSB0aGlzLAoJCQl0YWIgPSB0aGlzLnRhYnMuZXEoIGluZGV4ICksCgkJCWFuY2hvciA9IHRhYi5maW5kKCAiLnVpLXRhYnMtYW5jaG9yIiApLAoJCQlwYW5lbCA9IHRoaXMuX2dldFBhbmVsRm9yVGFiKCB0YWIgKSwKCQkJZXZlbnREYXRhID0gewoJCQkJdGFiOiB0YWIsCgkJCQlwYW5lbDogcGFuZWwKCQkJfTsKCgkJLy8gbm90IHJlbW90ZQoJCWlmICggaXNMb2NhbCggYW5jaG9yWyAwIF0gKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJdGhpcy54aHIgPSAkLmFqYXgoIHRoaXMuX2FqYXhTZXR0aW5ncyggYW5jaG9yLCBldmVudCwgZXZlbnREYXRhICkgKTsKCgkJLy8gc3VwcG9ydDogalF1ZXJ5IDwxLjgKCQkvLyBqUXVlcnkgPDEuOCByZXR1cm5zIGZhbHNlIGlmIHRoZSByZXF1ZXN0IGlzIGNhbmNlbGVkIGluIGJlZm9yZVNlbmQsCgkJLy8gYnV0IGFzIG9mIDEuOCwgJC5hamF4KCkgYWx3YXlzIHJldHVybnMgYSBqcVhIUiBvYmplY3QuCgkJaWYgKCB0aGlzLnhociAmJiB0aGlzLnhoci5zdGF0dXNUZXh0ICE9PSAiY2FuY2VsZWQiICkgewoJCQl0YWIuYWRkQ2xhc3MoICJ1aS10YWJzLWxvYWRpbmciICk7CgkJCXBhbmVsLmF0dHIoICJhcmlhLWJ1c3kiLCAidHJ1ZSIgKTsKCgkJCXRoaXMueGhyCgkJCQkuc3VjY2VzcyhmdW5jdGlvbiggcmVzcG9uc2UgKSB7CgkJCQkJLy8gc3VwcG9ydDogalF1ZXJ5IDwxLjgKCQkJCQkvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMTc3OAoJCQkJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgkJCQkJCXBhbmVsLmh0bWwoIHJlc3BvbnNlICk7CgkJCQkJCXRoYXQuX3RyaWdnZXIoICJsb2FkIiwgZXZlbnQsIGV2ZW50RGF0YSApOwoJCQkJCX0sIDEgKTsKCQkJCX0pCgkJCQkuY29tcGxldGUoZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7CgkJCQkJLy8gc3VwcG9ydDogalF1ZXJ5IDwxLjgKCQkJCQkvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMTc3OAoJCQkJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgkJCQkJCWlmICggc3RhdHVzID09PSAiYWJvcnQiICkgewoJCQkJCQkJdGhhdC5wYW5lbHMuc3RvcCggZmFsc2UsIHRydWUgKTsKCQkJCQkJfQoKCQkJCQkJdGFiLnJlbW92ZUNsYXNzKCAidWktdGFicy1sb2FkaW5nIiApOwoJCQkJCQlwYW5lbC5yZW1vdmVBdHRyKCAiYXJpYS1idXN5IiApOwoKCQkJCQkJaWYgKCBqcVhIUiA9PT0gdGhhdC54aHIgKSB7CgkJCQkJCQlkZWxldGUgdGhhdC54aHI7CgkJCQkJCX0KCQkJCQl9LCAxICk7CgkJCQl9KTsKCQl9Cgl9LAoKCV9hamF4U2V0dGluZ3M6IGZ1bmN0aW9uKCBhbmNob3IsIGV2ZW50LCBldmVudERhdGEgKSB7CgkJdmFyIHRoYXQgPSB0aGlzOwoJCXJldHVybiB7CgkJCXVybDogYW5jaG9yLmF0dHIoICJocmVmIiApLAoJCQliZWZvcmVTZW5kOiBmdW5jdGlvbigganFYSFIsIHNldHRpbmdzICkgewoJCQkJcmV0dXJuIHRoYXQuX3RyaWdnZXIoICJiZWZvcmVMb2FkIiwgZXZlbnQsCgkJCQkJJC5leHRlbmQoIHsganFYSFIgOiBqcVhIUiwgYWpheFNldHRpbmdzOiBzZXR0aW5ncyB9LCBldmVudERhdGEgKSApOwoJCQl9CgkJfTsKCX0sCgoJX2dldFBhbmVsRm9yVGFiOiBmdW5jdGlvbiggdGFiICkgewoJCXZhciBpZCA9ICQoIHRhYiApLmF0dHIoICJhcmlhLWNvbnRyb2xzIiApOwoJCXJldHVybiB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5fc2FuaXRpemVTZWxlY3RvciggIiMiICsgaWQgKSApOwoJfQp9KTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB3aW5kb3cgKSB7CgoJJC5tb2JpbGUuaW9zb3JpZW50YXRpb25maXhFbmFibGVkID0gdHJ1ZTsKCgkvLyBUaGlzIGZpeCBhZGRyZXNzZXMgYW4gaU9TIGJ1Zywgc28gcmV0dXJuIGVhcmx5IGlmIHRoZSBVQSBjbGFpbXMgaXQncyBzb21ldGhpbmcgZWxzZS4KCXZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQsCgkJem9vbSwKCQlldnQsIHgsIHksIHosIGFpZzsKCWlmICggISggL2lQaG9uZXxpUGFkfGlQb2QvLnRlc3QoIG5hdmlnYXRvci5wbGF0Zm9ybSApICYmIC9PUyBbMS01XV9bMC05X10qIGxpa2UgTWFjIE9TIFgvaS50ZXN0KCB1YSApICYmIHVhLmluZGV4T2YoICJBcHBsZVdlYktpdCIgKSA+IC0xICkgKSB7CgkJJC5tb2JpbGUuaW9zb3JpZW50YXRpb25maXhFbmFibGVkID0gZmFsc2U7CgkJcmV0dXJuOwoJfQoKCXpvb20gPSAkLm1vYmlsZS56b29tOwoKCWZ1bmN0aW9uIGNoZWNrVGlsdCggZSApIHsKCQlldnQgPSBlLm9yaWdpbmFsRXZlbnQ7CgkJYWlnID0gZXZ0LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHk7CgoJCXggPSBNYXRoLmFicyggYWlnLnggKTsKCQl5ID0gTWF0aC5hYnMoIGFpZy55ICk7CgkJeiA9IE1hdGguYWJzKCBhaWcueiApOwoKCQkvLyBJZiBwb3J0cmFpdCBvcmllbnRhdGlvbiBhbmQgaW4gb25lIG9mIHRoZSBkYW5nZXIgem9uZXMKCQlpZiAoICF3aW5kb3cub3JpZW50YXRpb24gJiYgKCB4ID4gNyB8fCAoICggeiA+IDYgJiYgeSA8IDggfHwgeiA8IDggJiYgeSA+IDYgKSAmJiB4ID4gNSApICkgKSB7CgkJCQlpZiAoIHpvb20uZW5hYmxlZCApIHsKCQkJCQl6b29tLmRpc2FibGUoKTsKCQkJCX0KCQl9CWVsc2UgaWYgKCAhem9vbS5lbmFibGVkICkgewoJCQkJem9vbS5lbmFibGUoKTsKCQl9Cgl9CgoJJC5tb2JpbGUuZG9jdW1lbnQub24oICJtb2JpbGVpbml0IiwgZnVuY3Rpb24oKSB7CgkJaWYgKCAkLm1vYmlsZS5pb3NvcmllbnRhdGlvbmZpeEVuYWJsZWQgKSB7CgkJCSQubW9iaWxlLndpbmRvdwoJCQkJLmJpbmQoICJvcmllbnRhdGlvbmNoYW5nZS5pb3NvcmllbnRhdGlvbmZpeCIsIHpvb20uZW5hYmxlICkKCQkJCS5iaW5kKCAiZGV2aWNlbW90aW9uLmlvc29yaWVudGF0aW9uZml4IiwgY2hlY2tUaWx0ICk7CgkJfQoJfSk7Cgp9KCBqUXVlcnksIHRoaXMgKSk7CgooZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkgewoJdmFyCSRodG1sID0gJCggImh0bWwiICksCgkJJHdpbmRvdyA9ICQubW9iaWxlLndpbmRvdzsKCgkvL3JlbW92ZSBpbml0aWFsIGJ1aWxkIGNsYXNzIChvbmx5IHByZXNlbnQgb24gZmlyc3QgcGFnZXNob3cpCglmdW5jdGlvbiBoaWRlUmVuZGVyaW5nQ2xhc3MoKSB7CgkJJGh0bWwucmVtb3ZlQ2xhc3MoICJ1aS1tb2JpbGUtcmVuZGVyaW5nIiApOwoJfQoKCS8vIHRyaWdnZXIgbW9iaWxlaW5pdCBldmVudCAtIHVzZWZ1bCBob29rIGZvciBjb25maWd1cmluZyAkLm1vYmlsZSBzZXR0aW5ncyBiZWZvcmUgdGhleSdyZSB1c2VkCgkkKCB3aW5kb3cuZG9jdW1lbnQgKS50cmlnZ2VyKCAibW9iaWxlaW5pdCIgKTsKCgkvLyBzdXBwb3J0IGNvbmRpdGlvbnMKCS8vIGlmIGRldmljZSBzdXBwb3J0IGNvbmRpdGlvbihzKSBhcmVuJ3QgbWV0LCBsZWF2ZSB0aGluZ3MgYXMgdGhleSBhcmUgLT4gYSBiYXNpYywgdXNhYmxlIGV4cGVyaWVuY2UsCgkvLyBvdGhlcndpc2UsIHByb2NlZWQgd2l0aCB0aGUgZW5oYW5jZW1lbnRzCglpZiAoICEkLm1vYmlsZS5ncmFkZUEoKSApIHsKCQlyZXR1cm47Cgl9CgoJLy8gb3ZlcnJpZGUgYWpheEVuYWJsZWQgb24gcGxhdGZvcm1zIHRoYXQgaGF2ZSBrbm93biBjb25mbGljdHMgd2l0aCBoYXNoIGhpc3RvcnkgdXBkYXRlcwoJLy8gb3IgZ2VuZXJhbGx5IHdvcmsgYmV0dGVyIGJyb3dzaW5nIGluIHJlZ3VsYXIgaHR0cCBmb3IgZnVsbCBwYWdlIHJlZnJlc2hlcyAoQkI1LCBPcGVyYSBNaW5pKQoJaWYgKCAkLm1vYmlsZS5hamF4QmxhY2tsaXN0ICkgewoJCSQubW9iaWxlLmFqYXhFbmFibGVkID0gZmFsc2U7Cgl9CgoJLy8gQWRkIG1vYmlsZSwgaW5pdGlhbCBsb2FkICJyZW5kZXJpbmciIGNsYXNzZXMgdG8gZG9jRWwKCSRodG1sLmFkZENsYXNzKCAidWktbW9iaWxlIHVpLW1vYmlsZS1yZW5kZXJpbmciICk7CgoJLy8gVGhpcyBpcyBhIGZhbGxiYWNrLiBJZiBhbnl0aGluZyBnb2VzIHdyb25nIChKUyBlcnJvcnMsIGV0YyksIG9yIGV2ZW50cyBkb24ndCBmaXJlLAoJLy8gdGhpcyBlbnN1cmVzIHRoZSByZW5kZXJpbmcgY2xhc3MgaXMgcmVtb3ZlZCBhZnRlciA1IHNlY29uZHMsIHNvIGNvbnRlbnQgaXMgdmlzaWJsZSBhbmQgYWNjZXNzaWJsZQoJc2V0VGltZW91dCggaGlkZVJlbmRlcmluZ0NsYXNzLCA1MDAwICk7CgoJJC5leHRlbmQoICQubW9iaWxlLCB7CgkJLy8gZmluZCBhbmQgZW5oYW5jZSB0aGUgcGFnZXMgaW4gdGhlIGRvbSBhbmQgdHJhbnNpdGlvbiB0byB0aGUgZmlyc3QgcGFnZS4KCQlpbml0aWFsaXplUGFnZTogZnVuY3Rpb24oKSB7CgkJCS8vIGZpbmQgcHJlc2VudCBwYWdlcwoJCQl2YXIgcGF0aCA9ICQubW9iaWxlLnBhdGgsCgkJCQkkcGFnZXMgPSAkKCAiOmpxbURhdGEocm9sZT0ncGFnZScpLCA6anFtRGF0YShyb2xlPSdkaWFsb2cnKSIgKSwKCQkJCWhhc2ggPSBwYXRoLnN0cmlwSGFzaCggcGF0aC5zdHJpcFF1ZXJ5UGFyYW1zKHBhdGgucGFyc2VMb2NhdGlvbigpLmhhc2gpICksCgkJCQloYXNoUGFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBoYXNoICk7CgoJCQkvLyBpZiBubyBwYWdlcyBhcmUgZm91bmQsIGNyZWF0ZSBvbmUgd2l0aCBib2R5J3MgaW5uZXIgaHRtbAoJCQlpZiAoICEkcGFnZXMubGVuZ3RoICkgewoJCQkJJHBhZ2VzID0gJCggImJvZHkiICkud3JhcElubmVyKCAiPGRpdiBkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyb2xlPSdwYWdlJz48L2Rpdj4iICkuY2hpbGRyZW4oIDAgKTsKCQkJfQoKCQkJLy8gYWRkIGRpYWxvZ3MsIHNldCBkYXRhLXVybCBhdHRycwoJCQkkcGFnZXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciAkdGhpcyA9ICQoIHRoaXMgKTsKCgkJCQkvLyB1bmxlc3MgdGhlIGRhdGEgdXJsIGlzIGFscmVhZHkgc2V0IHNldCBpdCB0byB0aGUgcGF0aG5hbWUKCQkJCWlmICggISR0aGlzWyAwIF0uZ2V0QXR0cmlidXRlKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidXJsIiApICkgewoJCQkJCSR0aGlzLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJ1cmwiLCAkdGhpcy5hdHRyKCAiaWQiICkgfHwgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKTsKCQkJCX0KCQkJfSk7CgoJCQkvLyBkZWZpbmUgZmlyc3QgcGFnZSBpbiBkb20gY2FzZSBvbmUgYmFja3Mgb3V0IHRvIHRoZSBkaXJlY3Rvcnkgcm9vdCAobm90IGFsd2F5cyB0aGUgZmlyc3QgcGFnZSB2aXNpdGVkLCBidXQgZGVmaW5lZCBhcyBmYWxsYmFjaykKCQkJJC5tb2JpbGUuZmlyc3RQYWdlID0gJHBhZ2VzLmZpcnN0KCk7CgoJCQkvLyBkZWZpbmUgcGFnZSBjb250YWluZXIKCQkJJC5tb2JpbGUucGFnZUNvbnRhaW5lciA9ICQubW9iaWxlLmZpcnN0UGFnZQoJCQkJLnBhcmVudCgpCgkJCQkuYWRkQ2xhc3MoICJ1aS1tb2JpbGUtdmlld3BvcnQiICkKCQkJCS5wYWdlY29udGFpbmVyKCk7CgoJCQkvLyBpbml0aWFsaXplIG5hdmlnYXRpb24gZXZlbnRzIG5vdywgYWZ0ZXIgbW9iaWxlaW5pdCBoYXMgb2NjdXJyZWQgYW5kIHRoZSBwYWdlIGNvbnRhaW5lcgoJCQkvLyBoYXMgYmVlbiBjcmVhdGVkIGJ1dCBiZWZvcmUgdGhlIHJlc3Qgb2YgdGhlIGxpYnJhcnkgaXMgYWxlcnRlZCB0byB0aGF0IGZhY3QKCQkJJC5tb2JpbGUubmF2cmVhZHlEZWZlcnJlZC5yZXNvbHZlKCk7CgoJCQkvLyBhbGVydCBsaXN0ZW5lcnMgdGhhdCB0aGUgcGFnZWNvbnRhaW5lciBoYXMgYmVlbiBkZXRlcm1pbmVkIGZvciBiaW5kaW5nCgkJCS8vIHRvIGV2ZW50cyB0cmlnZ2VyZWQgb24gaXQKCQkJJHdpbmRvdy50cmlnZ2VyKCAicGFnZWNvbnRhaW5lcmNyZWF0ZSIgKTsKCgkJCS8vIGN1ZSBwYWdlIGxvYWRpbmcgbWVzc2FnZQoJCQkkLm1vYmlsZS5sb2FkaW5nKCAic2hvdyIgKTsKCgkJCS8vcmVtb3ZlIGluaXRpYWwgYnVpbGQgY2xhc3MgKG9ubHkgcHJlc2VudCBvbiBmaXJzdCBwYWdlc2hvdykKCQkJaGlkZVJlbmRlcmluZ0NsYXNzKCk7CgoJCQkvLyBpZiBoYXNoY2hhbmdlIGxpc3RlbmluZyBpcyBkaXNhYmxlZCwgdGhlcmUncyBubyBoYXNoIGRlZXBsaW5rLAoJCQkvLyB0aGUgaGFzaCBpcyBub3QgdmFsaWQgKGNvbnRhaW5zIG1vcmUgdGhhbiBvbmUgIyBvciBkb2VzIG5vdCBzdGFydCB3aXRoICMpCgkJCS8vIG9yIHRoZXJlIGlzIG5vIHBhZ2Ugd2l0aCB0aGF0IGhhc2gsIGNoYW5nZSB0byB0aGUgZmlyc3QgcGFnZSBpbiB0aGUgRE9NCgkJCS8vIFJlbWVtYmVyLCBob3dldmVyLCB0aGF0IHRoZSBoYXNoIGNhbiBhbHNvIGJlIGEgcGF0aCEKCQkJaWYgKCAhICggJC5tb2JpbGUuaGFzaExpc3RlbmluZ0VuYWJsZWQgJiYKCQkJCSQubW9iaWxlLnBhdGguaXNIYXNoVmFsaWQoIGxvY2F0aW9uLmhhc2ggKSAmJgoJCQkJKCAkKCBoYXNoUGFnZSApLmlzKCAiOmpxbURhdGEocm9sZT0ncGFnZScpIiApIHx8CgkJCQkJJC5tb2JpbGUucGF0aC5pc1BhdGgoIGhhc2ggKSB8fAoJCQkJCWhhc2ggPT09ICQubW9iaWxlLmRpYWxvZ0hhc2hLZXkgKSApICkgewoKCQkJCS8vIFN0b3JlIHRoZSBpbml0aWFsIGRlc3RpbmF0aW9uCgkJCQlpZiAoICQubW9iaWxlLnBhdGguaXNIYXNoVmFsaWQoIGxvY2F0aW9uLmhhc2ggKSApIHsKCQkJCQkkLm1vYmlsZS5uYXZpZ2F0ZS5oaXN0b3J5LmluaXRpYWxEc3QgPSBoYXNoLnJlcGxhY2UoICIjIiwgIiIgKTsKCQkJCX0KCgkJCQkvLyBtYWtlIHN1cmUgdG8gc2V0IGluaXRpYWwgcG9wc3RhdGUgc3RhdGUgaWYgaXQgZXhpc3RzCgkJCQkvLyBzbyB0aGF0IG5hdmlnYXRpb24gYmFjayB0byB0aGUgaW5pdGlhbCBwYWdlIHdvcmtzIHByb3Blcmx5CgkJCQlpZiAoICQuZXZlbnQuc3BlY2lhbC5uYXZpZ2F0ZS5pc1B1c2hTdGF0ZUVuYWJsZWQoKSApIHsKCQkJCQkkLm1vYmlsZS5uYXZpZ2F0ZS5uYXZpZ2F0b3Iuc3F1YXNoKCBwYXRoLnBhcnNlTG9jYXRpb24oKS5ocmVmICk7CgkJCQl9CgoJCQkJJC5tb2JpbGUuY2hhbmdlUGFnZSggJC5tb2JpbGUuZmlyc3RQYWdlLCB7CgkJCQkJdHJhbnNpdGlvbjogIm5vbmUiLAoJCQkJCXJldmVyc2U6IHRydWUsCgkJCQkJY2hhbmdlSGFzaDogZmFsc2UsCgkJCQkJZnJvbUhhc2hDaGFuZ2U6IHRydWUKCQkJCX0pOwoJCQl9IGVsc2UgewoJCQkJLy8gdHJpZ2dlciBoYXNoY2hhbmdlIG9yIG5hdmlnYXRlIHRvIHNxdWFzaCBhbmQgcmVjb3JkIHRoZSBjb3JyZWN0CgkJCQkvLyBoaXN0b3J5IGVudHJ5IGZvciBhbiBpbml0aWFsIGhhc2ggcGF0aAoJCQkJaWYgKCAhJC5ldmVudC5zcGVjaWFsLm5hdmlnYXRlLmlzUHVzaFN0YXRlRW5hYmxlZCgpICkgewoJCQkJCSR3aW5kb3cudHJpZ2dlciggImhhc2hjaGFuZ2UiLCBbdHJ1ZV0gKTsKCQkJCX0gZWxzZSB7CgkJCQkJLy8gVE9ETyBmaWd1cmUgb3V0IGhvdyB0byBzaW1wbGlmeSB0aGlzIGludGVyYWN0aW9uIHdpdGggdGhlIGluaXRpYWwgaGlzdG9yeSBlbnRyeQoJCQkJCS8vIGF0IHRoZSBib3R0b20ganMvbmF2aWdhdGUvbmF2aWdhdGUuanMKCQkJCQkkLm1vYmlsZS5uYXZpZ2F0ZS5oaXN0b3J5LnN0YWNrID0gW107CgkJCQkJJC5tb2JpbGUubmF2aWdhdGUoICQubW9iaWxlLnBhdGguaXNQYXRoKCBsb2NhdGlvbi5oYXNoICkgPyBsb2NhdGlvbi5oYXNoIDogbG9jYXRpb24uaHJlZiApOwoJCQkJfQoJCQl9CgkJfQoJfSk7CgoJJChmdW5jdGlvbigpIHsKCQkvL1J1biBpbmxpbmVTVkcgc3VwcG9ydCB0ZXN0CgkJJC5zdXBwb3J0LmlubGluZVNWRygpOwoKCQkvLyBjaGVjayB3aGljaCBzY3JvbGxUb3AgdmFsdWUgc2hvdWxkIGJlIHVzZWQgYnkgc2Nyb2xsaW5nIHRvIDEgaW1tZWRpYXRlbHkgYXQgZG9tcmVhZHkKCQkvLyB0aGVuIGNoZWNrIHdoYXQgdGhlIHNjcm9sbCB0b3AgaXMuIEFuZHJvaWQgd2lsbCByZXBvcnQgMC4uLiBvdGhlcnMgMQoJCS8vIG5vdGUgdGhhdCB0aGlzIGluaXRpYWwgc2Nyb2xsIHdvbid0IGhpZGUgdGhlIGFkZHJlc3MgYmFyLiBJdCdzIGp1c3QgZm9yIHRoZSBjaGVjay4KCgkJLy8gaGlkZSBpT1MgYnJvd3NlciBjaHJvbWUgb24gbG9hZCBpZiBoaWRlVXJsQmFyIGlzIHRydWUgdGhpcyBpcyB0byB0cnkgYW5kIGRvIGl0IGFzIHNvb24gYXMgcG9zc2libGUKCQlpZiAoICQubW9iaWxlLmhpZGVVcmxCYXIgKSB7CgkJCXdpbmRvdy5zY3JvbGxUbyggMCwgMSApOwoJCX0KCgkJLy8gaWYgZGVmYXVsdEhvbWVTY3JvbGwgaGFzbid0IGJlZW4gc2V0IHlldCwgc2VlIGlmIHNjcm9sbFRvcCBpcyAxCgkJLy8gaXQgc2hvdWxkIGJlIDEgaW4gbW9zdCBicm93c2VycywgYnV0IGFuZHJvaWQgdHJlYXRzIDEgYXMgMCAoZm9yIGhpZGluZyBhZGRyIGJhcikKCQkvLyBzbyBpZiBpdCdzIDEsIHVzZSAwIGZyb20gbm93IG9uCgkJJC5tb2JpbGUuZGVmYXVsdEhvbWVTY3JvbGwgPSAoICEkLnN1cHBvcnQuc2Nyb2xsVG9wIHx8ICQubW9iaWxlLndpbmRvdy5zY3JvbGxUb3AoKSA9PT0gMSApID8gMCA6IDE7CgoJCS8vZG9tLXJlYWR5IGluaXRzCgkJaWYgKCAkLm1vYmlsZS5hdXRvSW5pdGlhbGl6ZVBhZ2UgKSB7CgkJCSQubW9iaWxlLmluaXRpYWxpemVQYWdlKCk7CgkJfQoKCQkvLyB3aW5kb3cgbG9hZCBldmVudAoJCS8vIGhpZGUgaU9TIGJyb3dzZXIgY2hyb21lIG9uIGxvYWQgaWYgaGlkZVVybEJhciBpcyB0cnVlIHRoaXMgaXMgYXMgZmFsbCBiYWNrIGluY2FzZSB3ZSB3ZXJlIHRvbyBlYXJseSBiZWZvcmUKCQlpZiAoICQubW9iaWxlLmhpZGVVcmxCYXIgKSB7CgkJCSR3aW5kb3cubG9hZCggJC5tb2JpbGUuc2lsZW50U2Nyb2xsICk7CgkJfQoKCQlpZiAoICEkLnN1cHBvcnQuY3NzUG9pbnRlckV2ZW50cyApIHsKCQkJLy8gSUUgYW5kIE9wZXJhIGRvbid0IHN1cHBvcnQgQ1NTIHBvaW50ZXItZXZlbnRzOiBub25lIHRoYXQgd2UgdXNlIHRvIGRpc2FibGUgbGluay1iYXNlZCBidXR0b25zCgkJCS8vIGJ5IGFkZGluZyB0aGUgJ3VpLWRpc2FibGVkJyBjbGFzcyB0byB0aGVtLiBVc2luZyBhIEphdmFTY3JpcHQgd29ya2Fyb3VuZCBmb3IgdGhvc2UgYnJvd3Nlci4KCQkJLy8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktbW9iaWxlL2lzc3Vlcy8zNTU4CgoJCQkvLyBERVBSRUNBVEVEIGFzIG9mIDEuNC4wIC0gcmVtb3ZlIHVpLWRpc2FibGVkIGFmdGVyIDEuNC4wIHJlbGVhc2UKCQkJLy8gb25seSB1aS1zdGF0ZS1kaXNhYmxlZCBzaG91bGQgYmUgcHJlc2VudCB0aGVyZWFmdGVyCgkJCSQubW9iaWxlLmRvY3VtZW50LmRlbGVnYXRlKCAiLnVpLXN0YXRlLWRpc2FibGVkLC51aS1kaXNhYmxlZCIsICJ2Y2xpY2siLAoJCQkJZnVuY3Rpb24oIGUgKSB7CgkJCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCWUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CgkJCQl9CgkJCSk7CgkJfQoJfSk7Cn0oIGpRdWVyeSwgdGhpcyApKTsKCgp9KSk7Cg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 05:44:43 GMT",
                    "Content-Length": "443146",
                    "Date": "Fri, 07 Nov 2014 05:44:43 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}