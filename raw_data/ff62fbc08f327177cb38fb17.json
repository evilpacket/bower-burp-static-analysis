{
    "url": "http://localhost:9999/MinnPost/minnpost-styles/bower_components/StoryMapJS/build/embed/",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>window.location.search</b> and written to <b>the 'open()' function of an XMLHttpRequest object</b> via the following statements:<ul><li>var qs = window.location.search.replace('?', '');</li><li>var pairs = qs.split('&amp;');</li><li>var p = pairs[i].split('=');</li><li>nvpair[p[0]] = p[1];</li><li>return nvpair;</li><li>var params = parseQuerystring();</li><li>var storymap_url = decodeURIComponent(params['url']);</li><li>xdr.open(\"get\", storymap_url);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/MinnPost/minnpost-styles/bower_components/StoryMapJS/build/embed/",
                "path": "/MinnPost/minnpost-styles/bower_components/StoryMapJS/build/embed/",
                "httpVersion": "HTTP/0.0",
                "method": "GET",
                "headers": {
                    "Referer": "http://localhost:9999/MinnPost/minnpost-styles/bower_components/StoryMapJS/build/embed",
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9NaW5uUG9zdC9taW5ucG9zdC1zdHlsZXMvYm93ZXJfY29tcG9uZW50cy9TdG9yeU1hcEpTL2J1aWxkL2VtYmVkLyBIVFRQLzAuMA0KSG9zdDogbG9jYWxob3N0Ojk5OTkNClJlZmVyZXI6IGh0dHA6Ly9sb2NhbGhvc3Q6OTk5OS9NaW5uUG9zdC9taW5ucG9zdC1zdHlsZXMvYm93ZXJfY29tcG9uZW50cy9TdG9yeU1hcEpTL2J1aWxkL2VtYmVkDQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+Cjx0aXRsZT5TdG9yeU1hcEpTIEVtYmVkPC90aXRsZT4KPG1ldGEgY2hhcnNldD0idXRmLTgiPgo8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iU3RvcnlNYXBKUyBFbWJlZCI+CjxtZXRhIG5hbWU9ImFwcGxlLW1vYmlsZS13ZWItYXBwLWNhcGFibGUiIGNvbnRlbnQ9InllcyI+CjxtZXRhIG5hbWU9ImFwcGxlLXRvdWNoLWZ1bGxzY3JlZW4iIGNvbnRlbnQ9InllcyI+CjxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCI+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLi4vY3NzL3N0b3J5bWFwLmNzcyI+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii4uL2pzL3N0b3J5bWFwLW1pbi5qcyI+PC9zY3JpcHQ+CjxzdHlsZT4KaHRtbCwgYm9keSB7CiAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogMTAwJTsKICAgIHBhZGRpbmc6IDA7CiAgICBtYXJnaW46IDA7Cn0KPC9zdHlsZT4KPCEtLSBIVE1MNSBzaGltLCBmb3IgSUU2LTggc3VwcG9ydCBvZiBIVE1MIGVsZW1lbnRzLS0+PCEtLVtpZiBsdCBJRSA5XT4KPHNjcmlwdCBzcmM9Ii8vaHRtbDVzaGltLmdvb2dsZWNvZGUuY29tL3N2bi90cnVuay9odG1sNS5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CjwvaGVhZD4KPGJvZHk+CjxkaXYgaWQ9InN0b3J5bWFwLWVtYmVkIj48L2Rpdj4KCjwhLS0gR29vZ2xlIEFuYWx5dGljczogZG9uJ3QgbWVzcyB3aXRoIHRoaXMgc3R1ZmYgLS0+CjwhLS0gbmFtZWQgdHJhY2tlciBub3RlcyBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2FuYWx5dGljcy9kZXZndWlkZXMvY29sbGVjdGlvbi9nYWpzLyAtLT4KPCEtLSBtdWx0aS1kb21haW4gdHJhY2tpbmcgbm90ZXMgZnJvbSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hbmFseXRpY3MvZGV2Z3VpZGVzL2NvbGxlY3Rpb24vZ2Fqcy9nYVRyYWNraW5nU2l0ZSAtLT4KPHNjcmlwdD4KICAoZnVuY3Rpb24oaSxzLG8sZyxyLGEsbSl7aVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J109cjtpW3JdPWlbcl18fGZ1bmN0aW9uKCl7CiAgKGlbcl0ucT1pW3JdLnF8fFtdKS5wdXNoKGFyZ3VtZW50cyl9LGlbcl0ubD0xKm5ldyBEYXRlKCk7YT1zLmNyZWF0ZUVsZW1lbnQobyksCiAgbT1zLmdldEVsZW1lbnRzQnlUYWdOYW1lKG8pWzBdO2EuYXN5bmM9MTthLnNyYz1nO20ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxtKQogIH0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnLy93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzLmpzJywnZ2EnKTsKCiAgZ2EoJ2NyZWF0ZScsICdVQS0yNzgyOTgwMi0yJywgJ2tuaWdodGxhYi5jb20nKTsgLyogU3RvcnlNYXAgRW1iZWQgYW5hbHl0aWNzIG9ubHkuIE5vdCBLbmlnaHRMYWIgYnJvYWRseSAqLwogIGdhKCdzZW5kJywgJ3BhZ2V2aWV3Jyk7CiAgZ2EoJ3NlbmQnLCAnZXZlbnQnLCAnU3RvcnlNYXBKUycsICdFbWJlZGRlZEluJywgZG9jdW1lbnQucmVmZXJyZXIpCgo8L3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIEFuYWx5dGljcyAtLT4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCmZ1bmN0aW9uIHBhcnNlUXVlcnlzdHJpbmcoKSB7CiAgICB2YXIgbnZwYWlyID0ge307CiAgICB2YXIgcXMgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnJlcGxhY2UoJz8nLCAnJyk7CiAgICB2YXIgcGFpcnMgPSBxcy5zcGxpdCgnJicpOwogICAgCiAgICBmb3IodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgcCA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7CiAgICAgICAgbnZwYWlyW3BbMF1dID0gcFsxXTsKICAgIH0KICAgIHJldHVybiBudnBhaXI7Cn0KCmZ1bmN0aW9uIGdldFNjcmlwdFBhdGgoc2NyaXB0bmFtZSkgewogICAgdmFyIHNjcmlwdFRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7CiAgICAKCWZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRUYWdzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYoc2NyaXB0VGFnc1tpXS5zcmMubWF0Y2goc2NyaXB0bmFtZSkpIHsKICAgICAgICAgICAgc2NyaXB0X3BhdGggPSBzY3JpcHRUYWdzW2ldLnNyYzsgICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIHNjcmlwdF9wYXRoLnNwbGl0KCc/JylbMF0uc3BsaXQoJy8nKS5zbGljZSgwLCAtMSkuam9pbignLycpOwogICAgICAgIH0KCX0KCXJldHVybiAnJzsKfQoKZnVuY3Rpb24gdXJsX2pvaW4odXJsLCBjb25jYXQpIHsgLy8gc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjY3NjE3OC9qb2luaW5nLXJlbGF0aXZlLXVybHMKICAgIGZ1bmN0aW9uIGJ1aWxkKHBhcnRzLGNvbnRhaW5lcikgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGFydHMubGVuZ3RoOyBpIDwgbDsgaSArKykgewogICAgICAgICAgICBpZiAocGFydHNbaV0gPT0gJy4uJykgewogICAgICAgICAgICAgICAgY29udGFpbmVyLnBvcCgpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRzW2ldID09ICcuJykgewogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb250YWluZXIucHVzaChwYXJ0c1tpXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICB2YXIgdXJsX3BhcnRzID0gWyBdOwogICAgYnVpbGQodXJsLnNwbGl0KCcvJyksdXJsX3BhcnRzKTsKICAgIGJ1aWxkKGNvbmNhdC5zcGxpdCgnLycpLHVybF9wYXJ0cyk7CiAgICByZXR1cm4gdXJsX3BhcnRzLmpvaW4oJy8nKTsKfQoKCnZhciBzdG9yeW1hcCA9IG51bGw7Cgp2YXIgcGFyYW1zID0gcGFyc2VRdWVyeXN0cmluZygpOwp2YXIgc3RvcnltYXBfdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtc1sndXJsJ10pOwoKdmFyIG9wdGlvbnMgPSB7CiAgICBzY3JpcHRfcGF0aDogZ2V0U2NyaXB0UGF0aCgvc3RvcnltYXAoLW1pbik/XC5qcy8pLAogICAgc3RhcnRfYXRfc2xpZGU6IDAsCiAgICBzaG93X2xpbmVzOiB0cnVlCn07CgppZihwYXJhbXMuaGFzT3duUHJvcGVydHkoJ3N0YXJ0X2F0X3NsaWRlJykpIHsKICAgIG9wdGlvbnMuc3RhcnRfYXRfc2xpZGUgPSBwYXJzZUludChwYXJhbXMuc3RhcnRfYXRfc2xpZGUpOwp9CgpmdW5jdGlvbiBzdG9yeW1hcF9vbmxvYWQoZCkgewogICAgdHJhY2UoJ2VtYmVkOiBzdG9yeW1hcCBkYXRhIGxvYWRlZCcpOwoKICAgIGlmIChkICYmIGQuc3RvcnltYXApIHsKICAgICAgICBpZihkLnN0b3J5bWFwLm1hcF90eXBlKSB7CiAgICAgICAgICAgIG9wdGlvbnMubWFwX3R5cGUgPSBkLnN0b3J5bWFwLm1hcF90eXBlOwogICAgICAgIH0KICAgICAgICBpZihkLnN0b3J5bWFwLm1hcF9zdWJkb21haW5zKSB7CiAgICAgICAgICAgIG9wdGlvbnMubWFwX3N1YmRvbWFpbnMgPSBkLnN0b3J5bWFwLm1hcF9zdWJkb21haW5zOwogICAgICAgIH0KICAgICAgICBpZihkLnN0b3J5bWFwLm1hcF9hc19pbWFnZSkgewogICAgICAgICAgICBvcHRpb25zLm1hcF9hc19pbWFnZSA9IGQuc3RvcnltYXAubWFwX2FzX2ltYWdlOyAgICAgICAKICAgICAgICB9CiAgICAgICAgaWYoZC5zdG9yeW1hcC5tYXBfYmFja2dyb3VuZF9jb2xvcikgewogICAgICAgICAgICBvcHRpb25zLm1hcF9iYWNrZ3JvdW5kX2NvbG9yID0gZC5zdG9yeW1hcC5tYXBfYmFja2dyb3VuZF9jb2xvcjsKICAgICAgICB9CiAgICAgICAgaWYoZC5zdG9yeW1hcC5sYW5ndWFnZSkgewogICAgICAgICAgICBvcHRpb25zLmxhbmd1YWdlID0gZC5zdG9yeW1hcC5sYW5ndWFnZTsKICAgICAgICB9CiAgICAgICAgaWYoZC5zdG9yeW1hcC5oYXNPd25Qcm9wZXJ0eSgnc2hvd19saW5lcycpKSB7CiAgICAgICAgICAgIG9wdGlvbnMuc2hvd19saW5lcyA9IGQuc3RvcnltYXAuc2hvd19saW5lczsKICAgICAgICB9CiAgICAgICAgaWYoZC5zdG9yeW1hcC56b29taWZ5KSB7CiAgICAgICAgICAgIG9wdGlvbnMuem9vbWlmeSA9IGQuc3RvcnltYXAuem9vbWlmeTsKICAgICAgICB9CgogICAgICAgIHZhciBmb250ID0gInN0b2NrOmRlZmF1bHQiOwogICAgICAgIGlmKGQuZm9udF9jc3MpIHsKICAgICAgICAgICAgZm9udCA9IGQuZm9udF9jc3M7CiAgICAgICAgfQogICAgICAgIGlmKGZvbnQuaW5kZXhPZigic3RvY2s6IikgPT0gMCkgewogICAgICAgICAgICB2YXIgZm9udF9uYW1lID0gZm9udC5zcGxpdCgnOicpWzFdOwogICAgICAgICAgICB2YXIgYmFzZV91cmwgPSB1cmxfam9pbihvcHRpb25zLnNjcmlwdF9wYXRoLCIuLi9jc3MvZm9udHMiKTsKICAgICAgICAgICAgZm9udCA9IHVybF9qb2luKGJhc2VfdXJsLCAiZm9udC4iICsgZm9udF9uYW1lICsgIi5jc3MiKTsKICAgICAgICB9IGVsc2UgaWYoIWZvbnQubWF0Y2goJ14oaHR0cHxodHRwc3wvLyknKSkgewogICAgICAgICAgICBmb250ID0gdXJsX2pvaW4ob3B0aW9ucy5zY3JpcHRfcGF0aCwgZm9udCk7CiAgICAgICAgfQogICAgICAgIFZDTy5Mb2FkLmNzcyhmb250LGZ1bmN0aW9uKCl7IHRyYWNlKCdmb250IGxvYWRlZDogJyArIGZvbnQpO30pOwogICAgICAgIHN0b3J5bWFwID0gbmV3IFZDTy5TdG9yeU1hcCgnc3RvcnltYXAtZW1iZWQnLCBkLCBvcHRpb25zKTsKICAgIH0KfQoKZnVuY3Rpb24gc3RvcnltYXBfZ2V0anNvbigpIHsKICAgIGlmKCd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpKSB7CiAgICAgICAgLy8gU3VwcG9ydHMgY3Jvc3MtZG9tYWluIHJlcXVlc3RzCiAgICAgICAgdHJhY2UoJ2VtYmVkOiBsb2FkaW5nIGRhdGEgdmlhIFhNTEh0dHBSZXF1ZXN0Jyk7CiAgICAgICAgVkNPLmdldEpTT04oc3RvcnltYXBfdXJsLCBzdG9yeW1hcF9vbmxvYWQpOwogICAgfSBlbHNlIGlmKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPT0gInVuZGVmaW5lZCIpICAgICB7CiAgICAgICAgLy8gVXNlIElFLXNwZWNpZmljICJDT1JTIiBjb2RlIHdpdGggWERSCiAgICAgICAgdHJhY2UoJ2VtYmVkOiBsb2FkaW5nIGRhdGEgdmlhIFhEb21haW5SZXF1ZXN0Jyk7CiAgICAgICAgdmFyIHhkciA9IG5ldyBYRG9tYWluUmVxdWVzdCgpOwogICAgICAgIHhkci5vbmxvYWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgc3RvcnltYXBfb25sb2FkKEpTT04ucGFyc2UoeGRyLnJlc3BvbnNlVGV4dCkpOwogICAgICAgIH07CiAgICAgICAgeGRyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHsgLyogZG9pdCAqLyB9OwogICAgICAgIHhkci5vbnByb2dyZXNzID0gZnVuY3Rpb24oKSB7fTsKICAgICAgICB4ZHIub3BlbigiZ2V0Iiwgc3RvcnltYXBfdXJsKTsKICAgICAgICB4ZHIuc2VuZCgpOwogICAgfQp9Cgp3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7CiAgICBpZihzdG9yeW1hcF91cmwubWF0Y2goJ1xcLmpzJCcpKSB7ICAgICAgICAKICAgICAgICB0cmFjZSgnZW1iZWQ6IGxvYWRpbmcgZGF0YSB2aWEgc2NyaXB0IGluamVjdGlvbicpOwogICAgICAgIHZhciBsb2FkZWQgPSBmYWxzZTsgIAogICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogICAgICAgIHNjcmlwdC5zcmMgID0gc3RvcnltYXBfdXJsOyAgICAKICAgICAgICBzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZighbG9hZGVkICYmICghKGQgPSB0aGlzLnJlYWR5U3RhdGUpIHx8IGQgPT0gImxvYWRlZCIgfHwgZCA9PSAiY29tcGxldGUiKSkgewogICAgICAgICAgICAgICAgbG9hZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHN0b3J5bWFwX29ubG9hZChzdG9yeW1hcF9qc29uKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIAogICAgICAgIC8vIGRvY3VtZW50LmhlYWQgbm90IHN0YW5kYXJkIGJlZm9yZSBIVE1MNQogICAgICAgIHZhciBpbnNlcnRpb25Qb2ludCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKS5pdGVtKDApIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jaGlsZE5vZGVzWzBdOwogICAgICAgIGluc2VydGlvblBvaW50LmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgICB9IGVsc2UgeyAgICAKICAgICAgICBzdG9yeW1hcF9nZXRqc29uKCk7IAogICAgfQp9Cgp3aW5kb3cub25yZXNpemUgPSBmdW5jdGlvbihldmVudCkgewogICAgaWYoc3RvcnltYXApIHsKICAgICAgICBzdG9yeW1hcC51cGRhdGVEaXNwbGF5KCk7CiAgICB9Cn0KPC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 16:09:46 GMT",
                    "Content-Length": "6343",
                    "Date": "Fri, 07 Nov 2014 16:09:47 GMT",
                    "Content-Type": "text/html; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "HTML",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}