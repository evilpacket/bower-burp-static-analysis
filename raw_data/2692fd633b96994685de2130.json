{
    "url": "http://localhost:9999/MinnPost/minnpost-styles/bower_components/StoryMapJS/source/embed/",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>window.location.search</b> and written to <b>the 'open()' function of an XMLHttpRequest object</b> via the following statements:<ul><li>var qs = window.location.search.replace('?', '');</li><li>var pairs = qs.split('&amp;');</li><li>var p = pairs[i].split('=');</li><li>nvpair[p[0]] = p[1];</li><li>return nvpair;</li><li>var params = parseQuerystring();</li><li>var storymap_url = decodeURIComponent(params['url']);</li><li>xdr.open(\"get\", storymap_url);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/MinnPost/minnpost-styles/bower_components/StoryMapJS/source/embed/",
                "path": "/MinnPost/minnpost-styles/bower_components/StoryMapJS/source/embed/",
                "httpVersion": "HTTP/0.0",
                "method": "GET",
                "headers": {
                    "Referer": "http://localhost:9999/MinnPost/minnpost-styles/bower_components/StoryMapJS/source/embed",
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9NaW5uUG9zdC9taW5ucG9zdC1zdHlsZXMvYm93ZXJfY29tcG9uZW50cy9TdG9yeU1hcEpTL3NvdXJjZS9lbWJlZC8gSFRUUC8wLjANCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQpSZWZlcmVyOiBodHRwOi8vbG9jYWxob3N0Ojk5OTkvTWlublBvc3QvbWlubnBvc3Qtc3R5bGVzL2Jvd2VyX2NvbXBvbmVudHMvU3RvcnlNYXBKUy9zb3VyY2UvZW1iZWQNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 16:09:46 GMT",
                    "Content-Length": "6462",
                    "Date": "Fri, 07 Nov 2014 16:09:47 GMT",
                    "Content-Type": "text/html; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "HTML",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}