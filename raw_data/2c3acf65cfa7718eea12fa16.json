{
    "url": "http://localhost:9999/openlayers/openlayers/tests/Test.AnotherWay.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>window.location.href</b> and written to <b>the 'source' property of a DOM element</b> via the following statements:<ul><li>var base = window.location.href;</li><li>base = base.substring(0, q_pos);</li><li>base = base.substring(0, slash_pos + 1);</li><li>loc = base + loc;</li><li>loc = loc.substring(outside_path_correction.length + 1);</li><li>iframe.src = loc;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/openlayers/openlayers/tests/Test.AnotherWay.js",
                "path": "/openlayers/openlayers/tests/Test.AnotherWay.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9vcGVubGF5ZXJzL29wZW5sYXllcnMvdGVzdHMvVGVzdC5Bbm90aGVyV2F5LmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTA1ODE4DQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0DQpEYXRlOiBGcmksIDA3IE5vdiAyMDE0IDIxOjIzOjMwIEdNVA0KTGFzdC1Nb2RpZmllZDogRnJpLCAwNyBOb3YgMjAxNCAyMToyMzoyOCBHTVQNCg0KLyoqCiAqICBUZXN0LkFub3RoZXJXYXkgdmVyc2lvbiAwLjUKICogIAogKiAgQ29weXJpZ2h0IChjKSAyMDA1IEFydGVtIEtob2R1c2gsIGh0dHA6Ly9zdHJheXRyZWUub3JnCiAqICAKICogIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZwogKiAgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCiAqICAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCiAqICB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCiAqICBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8KICogIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0bwogKiAgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgogKiAgCiAqICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZQogKiAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiAqICAKICogIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELAogKiAgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCiAqICBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORAogKiAgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRQogKiAgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTgogKiAgT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OCiAqICBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KICogIAogKi8KCmlmICh0eXBlb2YoVGVzdCkgPT0gInVuZGVmaW5lZCIpIHsKICAgIFRlc3QgPSB7fTsKfQpUZXN0LkFub3RoZXJXYXkgPSB7fTsKClRlc3QuQW5vdGhlcldheS5fZ190ZXN0X2lmcmFtZSA9IG51bGw7IC8vIGZyYW1lIHdoZXJlIHRvIGxvYWQgdGVzdCBwYWdlcwpUZXN0LkFub3RoZXJXYXkuX2dfdGVzdF9mcmFtZV9ub19jbGVhciA9IGZhbHNlOyAvLyB0cnVlIC0gbGVhdmUgbGFzdCBwYWdlIGRpc3BsYXllZCBhZnRlciB0ZXN0cyBlbmQKVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfcGFnZV91cmxzID0gW107IC8vIGFycmF5IG9mOiB7IHVybDogdXJsLCBjb252ZW50aW9uOiAiYW5vdGhlcndheSIgb3IgImpzYW4iIH0KVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3Rfb2JqZWN0X2Zvcl9qc2FuID0gbnVsbDsgLy8gdGVzdCBvYmplY3QgZm9yIGZpbGxpbmcgYnkgdGVzdHMgdGhhdCBhZGhlcmUgdG8ganNhbiBUZXN0LlNpbXBsZSBjYWxsaW5nIGNvbnZlbnRpb24KVGVzdC5Bbm90aGVyV2F5Ll9nX3BhZ2VzX3RvX3J1biA9IG51bGw7IC8vIGxpc3Qgb2YgcGFnZXMgdG8gcnVuIGF1dG9tYXRpY2FsbHkgYWZ0ZXIgbG9hZGluZwpUZXN0LkFub3RoZXJXYXkuX2dfcnVuX29uX21haW5fbG9hZCA9IGZhbHNlOyAvLyBzcGVjaWFsIGhhbmRsaW5nIGZvciBydW5fcGFnZXNfdG9fcnVuIHdoZW4gaXQgbWlnaHQgYmUgY2FsbGVkIGJlZm9yZSBvbmxvYWQgb3IgYmVmb3JlIGxpc3Qgb2YgdGVzdCBwYWdlcyBpcyBrbm93bi4KVGVzdC5Bbm90aGVyV2F5Ll9nX3J1bl9vbl9saXN0X2xvYWQgPSBmYWxzZTsKVGVzdC5Bbm90aGVyV2F5Ll9nX21haW5fbG9hZGVkID0gZmFsc2U7CgpUZXN0LkFub3RoZXJXYXkuX3J1bl9wYWdlc190b19ydW4gPSBmdW5jdGlvbihjYWxsZWRfZnJvbV9vdXRzaWRlKXsKICAgIGlmICghVGVzdC5Bbm90aGVyV2F5Ll9nX21haW5fbG9hZGVkKSB7CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3J1bl9vbl9tYWluX2xvYWQgPSB0cnVlOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgdmFyIGFfcGFnZXMgPSBUZXN0LkFub3RoZXJXYXkuX2dfcGFnZXNfdG9fcnVuOwogICAgICAgIGlmIChhX3BhZ2VzID09ICJhbGwiKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfcGFnZV91cmxzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3J1bl90ZXN0X3BhZ2UoInRlc3QiICsgaSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSAKICAgICAgICAgICAgaWYgKGFfcGFnZXMgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgcnVuX2kgPSAwOyBydW5faSA8IGFfcGFnZXMubGVuZ3RoOyArK3J1bl9pKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJ1bl9wYWdlID0gYV9wYWdlc1tydW5faV07CiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYWxsX2kgPSAwOyBhbGxfaSA8IFRlc3QuQW5vdGhlcldheS5fZ190ZXN0X3BhZ2VfdXJscy5sZW5ndGg7ICsrYWxsX2kpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bl9wYWdlID09IFRlc3QuQW5vdGhlcldheS5fZ190ZXN0X3BhZ2VfdXJsc1thbGxfaV0udXJsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3J1bl90ZXN0X3BhZ2UoInRlc3QiICsgYWxsX2ksIGNhbGxlZF9mcm9tX291dHNpZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3VuZCkgewogICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3Nob3dfZXJyb3IoInBhZ2Ugc3BlY2lmaWVkIHRvIHJ1biBpcyBub3QgZm91bmQgaW4gdGhlIHBhZ2UgbGlzdDogIiArIHJ1bl9wYWdlKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICB9Cn07CgpUZXN0LkFub3RoZXJXYXkuX2FkZF90ZXN0X3BhZ2VfdXJsID0gZnVuY3Rpb24odGVzdF91cmwsIGNvbnZlbnRpb24pewogICAgdmFyIHRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRlc3R0YWJsZSIpOwogICAgdmFyIHJlY29yZF9zZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicmVjb3JkX3NlbGVjdCIpOwogICAgdmFyIGluZGV4ID0gVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfcGFnZV91cmxzLmxlbmd0aDsKICAgIAogICAgLy8gdHJpbSBzcGFjZXMuCiAgICBpZiAodGVzdF91cmwubWF0Y2goIl4oXFxzKikoLipcXFMpKFxccyopJCIpKSB7CiAgICAgICAgdGVzdF91cmwgPSBSZWdFeHAuJDI7CiAgICB9CiAgICAKICAgIFRlc3QuQW5vdGhlcldheS5fZ190ZXN0X3BhZ2VfdXJsc1tpbmRleF0gPSB7CiAgICAgICAgdXJsOiB0ZXN0X3VybCwKICAgICAgICBjb252ZW50aW9uOiBjb252ZW50aW9uCiAgICB9OwogICAgdmFyIHJvdyA9IHRhYmxlLmluc2VydFJvdygtMSk7CiAgICAKICAgIHZhciBjZWxsOwogICAgdmFyIGNlbGxfY2hpbGQ7CiAgICB2YXIgbGluazsKICAgIAogICAgY2VsbCA9IHJvdy5pbnNlcnRDZWxsKC0xKTsKICAgIGNlbGxfY2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwogICAgY2VsbF9jaGlsZC50eXBlID0gImNoZWNrYm94IjsKICAgIGNlbGxfY2hpbGQuaWQgPSAiY2hlY2tib3giICsgaW5kZXg7CiAgICBjZWxsX2NoaWxkLmNoZWNrZWQgPSAnY2hlY2tlZCc7CiAgICBjZWxsX2NoaWxkLmRlZmF1bHRDaGVja2VkID0gJ2NoZWNrZWQnOwogICAgY2VsbC5hcHBlbmRDaGlsZChjZWxsX2NoaWxkKTsKICAgIAogICAgY2VsbCA9IHJvdy5pbnNlcnRDZWxsKC0xKTsKICAgIGNlbGwuc2V0QXR0cmlidXRlKCJ3aWR0aCIsICI3NSUiKTsKICAgIAogICAgY2VsbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXN0X3VybCkpOyAgICAKICAgIAogICAgY2VsbCA9IHJvdy5pbnNlcnRDZWxsKC0xKTsKICAgIGNlbGxfY2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwogICAgY2VsbF9jaGlsZC50eXBlID0gImJ1dHRvbiI7CiAgICBjZWxsX2NoaWxkLmlkID0gInRlc3QiICsgaW5kZXg7CiAgICBjZWxsX2NoaWxkLnZhbHVlID0gIiBydW4gIjsKICAgIGNlbGxfY2hpbGQub25jbGljayA9IFRlc3QuQW5vdGhlcldheS5fcnVuX29uZV9vbmNsaWNrOwogICAgY2VsbC5hcHBlbmRDaGlsZChjZWxsX2NoaWxkKTsKICAgIAogICAgY2VsbCA9IHJvdy5pbnNlcnRDZWxsKC0xKTsKICAgIGNlbGwuc2V0QXR0cmlidXRlKCJ3aWR0aCIsICI4ZW0iKTsKICAgIGNlbGxfY2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7CiAgICBjZWxsLmFwcGVuZENoaWxkKGNlbGxfY2hpbGQpOwogICAgCiAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7CiAgICBvcHRpb24uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGVzdF91cmwpKTsKICAgIHJlY29yZF9zZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTsKfTsKVGVzdC5Bbm90aGVyV2F5Ll9zaG93X2Vycm9yID0gZnVuY3Rpb24obXNnKXsKICAgIHZhciBlcnJvcl9kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZXJyb3IiKTsKICAgIGVycm9yX2Rpdi5pbm5lckhUTUwgPSAiIjsKICAgIGVycm9yX2Rpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShtc2cpKTsKICAgIGVycm9yX2Rpdi5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKfTsKCi8vIHJlYWQgdXJscyBmcm9tIHRoZSBsaXN0IGluIHRoZSBodG1sIGZpbGUgaW5zaWRlIHRoZSBsaXN0X2lmcmFtZQovLyBmaWxsIG9uLXNjcmVlbiBsaXN0IHdpdGggdXJscyBhbmQgInJ1biIgYnV0dG9ucywgYW5kIGZpbGwgdGhlIGdfdGVzdF9wYWdlX3VybHMgb2JqZWN0LgpUZXN0LkFub3RoZXJXYXkuX2xpc3RfaWZyYW1lX29ubG9hZCA9IGZ1bmN0aW9uKCl7CiAgICBpZiAod2luZG93LmZyYW1lcy5saXN0X2lmcmFtZSAhPSBudWxsICYmIHdpbmRvdy5mcmFtZXMubGlzdF9pZnJhbWUubG9jYXRpb24gIT0gIiIgJiYgd2luZG93LmZyYW1lcy5saXN0X2lmcmFtZS5sb2NhdGlvbiAhPSAiYWJvdXQ6YmxhbmsiKSB7CiAgICAgICAgdmFyIGxpc3RfZG9jID0gd2luZG93LmZyYW1lcy5saXN0X2lmcmFtZS5kb2N1bWVudDsKICAgICAgICB2YXIgbGlzdCA9IGxpc3RfZG9jLmdldEVsZW1lbnRCeUlkKCJ0ZXN0bGlzdCIpOwogICAgICAgIGlmIChsaXN0ICE9IG51bGwpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0LmNoaWxkTm9kZXMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgIHZhciBpdGVtID0gbGlzdC5jaGlsZE5vZGVzW2ldOwogICAgICAgICAgICAgICAgaWYgKGl0ZW0ubm9kZU5hbWUgPT0gIkxJIiB8fCBpdGVtLm5vZGVOYW1lID09ICJsaSIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgY29udmVudGlvbiA9ICJhbm90aGVyd2F5IjsKICAgICAgICAgICAgICAgICAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nZXRfY3NzX2NsYXNzKGl0ZW0pID09ICJqc2FuIikgewogICAgICAgICAgICAgICAgICAgICAgICBjb252ZW50aW9uID0gImpzYW4iOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2FkZF90ZXN0X3BhZ2VfdXJsKGl0ZW0uaW5uZXJIVE1MLCBjb252ZW50aW9uKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nX3J1bl9vbl9saXN0X2xvYWQpIHsKICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19ydW5fb25fbGlzdF9sb2FkID0gZmFsc2U7CiAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3J1bl9wYWdlc190b19ydW4oKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9zaG93X2Vycm9yKCJubyBsaXN0IHdpdGggaWQgJ3Rlc3RsaXN0JyBpbiBhIGxpc3QgZmlsZSAiICsgd2luZG93LmZyYW1lcy5saXN0X2lmcmFtZS5sb2NhdGlvbik7CiAgICAgICAgfQogICAgfQp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9tYXBfY2hlY2tib3hlcyA9IGZ1bmN0aW9uKGYpewogICAgdmFyIHRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRlc3R0YWJsZSIpOwogICAgdmFyIGNoZWNrcyA9IHRhYmxlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJJTlBVVCIpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGVja3MubGVuZ3RoOyArK2kpIHsKICAgICAgICBpZiAoY2hlY2tzW2ldLnR5cGUgPT0gImNoZWNrYm94IiAmJiBjaGVja3NbaV0uaWQubWF0Y2goL15jaGVja2JveChcZCspJC8pKSB7CiAgICAgICAgICAgIGYoY2hlY2tzW2ldLCBSZWdFeHAuJDEpOwogICAgICAgIH0KICAgIH0KfTsKClRlc3QuQW5vdGhlcldheS5fcnVuX2FsbF9vbmNsaWNrID0gZnVuY3Rpb24oKXsKICAgIFRlc3QuQW5vdGhlcldheS5fbWFwX2NoZWNrYm94ZXMoZnVuY3Rpb24oYywgaWQpewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fcnVuX3Rlc3RfcGFnZSgidGVzdCIgKyBpZCk7CiAgICB9KTsKfTsKVGVzdC5Bbm90aGVyV2F5Ll9ydW5fc2VsZWN0ZWRfb25jbGljayA9IGZ1bmN0aW9uKCl7CiAgICBUZXN0LkFub3RoZXJXYXkuX21hcF9jaGVja2JveGVzKGZ1bmN0aW9uKGMsIGlkKXsKICAgICAgICBpZiAoYy5jaGVja2VkKSB7CiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fcnVuX3Rlc3RfcGFnZSgidGVzdCIgKyBpZCk7CiAgICAgICAgfQogICAgfSk7Cn07CgpUZXN0LkFub3RoZXJXYXkuX3Vuc2VsZWN0X2FsbF9vbmNsaWNrID0gZnVuY3Rpb24oKXsKICAgIFRlc3QuQW5vdGhlcldheS5fbWFwX2NoZWNrYm94ZXMoZnVuY3Rpb24oYywgaWQpewogICAgICAgIGMuY2hlY2tlZCA9IGZhbHNlOwogICAgfSk7Cn07CgpUZXN0LkFub3RoZXJXYXkuX3J1bl9vbmVfb25jbGljayA9IGZ1bmN0aW9uKCl7CiAgICBUZXN0LkFub3RoZXJXYXkuX3J1bl90ZXN0X3BhZ2UodGhpcy5pZCk7Cn07CgovLyBjb25zdHJ1Y3QgYW4gb2JqZWN0IHRoYXQgd2lsbCBnYXRoZXIgcmVzdWx0cyBvZiBydW5uaW5nIG9uZSB0ZXN0IGZ1bmN0aW9uClRlc3QuQW5vdGhlcldheS5fdGVzdF9vYmplY3RfdCA9IGZ1bmN0aW9uKGZ1bl9uYW1lKXsKICAgIHRoaXMubmFtZSA9IGZ1bl9uYW1lOyAvLyBuYW1lIG9mIHRoZSB0ZXN0IGZ1bmN0aW9uCiAgICB0aGlzLm5fcGxhbiA9IG51bGw7IC8vIHBsYW5uZWQgbnVtYmVyIG9mIGFzc2VydGlvbnMKICAgIHRoaXMubl9vayA9IDA7IC8vICMgb2Ygb2sgYXNzZXJ0aW9ucwogICAgdGhpcy5uX2ZhaWwgPSAwOyAvLyAjIG9mIGZhaWxlZCBhc3NlcnRpb25zCiAgICB0aGlzLmV4Y2VwdGlvbiA9ICIiOyAvLyBpZiB0aGUgZnVuY3Rpb24gdGhyb3dlZCBhbiBleGNlcHRpb24sIGl0J3MgaXRzIG1lc3NhZ2UKICAgIHRoaXMuZXhjZXB0aW9uX3N0YWNrID0gW107IC8vIHN0cmluZ3M6IGZ1bmN0aW9uIGNhbGwgc3RhY2sgZnJvbSB0aGUgZXhjZXB0aW9uCiAgICB0aGlzLmFzc2VydGlvbnMgPSBbXTsgLy8gYXNzZXJ0aW9uIHJlc3VsdHM6IGFycmF5IG9mIHsgb2s6IDEgb3IgMCwgbmFtZTogc3RyaW5nIH0KICAgIHRoaXMud2FpdF9yZXN1bHRfbWlsbGlzZWNvbmRzID0gMDsgLy8gaG93IGxvbmcgdG8gd2FpdCBiZWZvcmUgY29sbGVjdGluZyByZXN1bHRzIGZyb20gdGhlIHRlc3QKICAgIHRoaXMuc2Vjb25kX3dhaXRfbXNnID0gbnVsbDsgLy8gPHA+IHN0YXR1cyBtZXNzYWdlIChpbiBhZGRpdGlvbiB0byB0aGUgcGFnZSB3YWl0X21zZykKICAgIHRoaXMuZGVsYXlfYWN0aW9ucyA9IFtdOyAvLyBhcnJheSBvZiBhY3Rpb25zIHRvIGJlIHBlcmZvbWVkIGFmdGVyIHRoZSB0ZXN0IGZ1bmN0aW9uIHJldHVybnMKICAgIC8vICBhY3Rpb24gOiB7IGFjdG9uX2tpbmQ6ICJjYWxsIiB8ICJ3aW5kb3ciIHwgInJlcGxheSIKICAgIC8vICAgICAgICAgICAgICB3aGVuICJjYWxsIjogICAgICAgIHsgY2FsbF9mbiBjYWxsX2RlbGF5X21pbGxpc2Vjb25kcyB9IGNhbGxfZm4gdGFrZXMgbm90aGluZwogICAgLy8gICAgICAgICAgICAgIHdoZW4gIndpbmRvdyIgOiAgICAgeyB3bmRfdXJsIHduZF93bmQgd25kX2ZuIHduZF90aW1lb3V0X21pbGxpc2Vjb25kcyB3bmRfZG9udF9jbG9zZSB9IHduZF9mbiB0YWtlcyB3bmQKICAgIC8vICAgICAgICAgICAgICB3bmVuICJyZXBsYXkiIDogICAgIHsgcmVwbGF5X3duZCByZXBsYXlfZXZlbnRzIHJlcGxheV9ldmVudF9pIHJlcGxheV9jaGVja3BvaW50cyB9IGNoZWNrcG9pbnRfZm4gdGFrZXMgdGhpcywgd25kCiAgICAvLyAgfQogICAgdGhpcy5kZWxheV9hY3Rpb25faSA9IG51bGw7IC8vIGluZGV4IG9mIGRlbGF5IGFjdGlvbiBjdXJyZW50bHkgYmVpbmcgcGVyZm9ybWVkCiAgICB0aGlzLmRlbGF5X3ByZXZfdGltZXJfdGltZSA9IDA7IC8vIGZvciBjb3VudGluZyB0aW1lIHdoaWxlIHBlcmZvcm1pbmcgZGVsYXlfYWN0aW9ucwogICAgdGhpcy5kZWxheV9jdXJyZW50X21pbGxpc2Vjb25kc19sZWZ0ID0gMDsgLy8gdGltZSBsZWZ0IGJlZm9yZSB0aGUgbmV4dCBhY3Rpb24sIHJ1bnMgZG93bgogICAgdGhpcy5kZWxheV90b3RhbF9taWxsaXNlY29uZHNfbGVmdCA9IDA7IC8vIGZvciBpbmRpY2F0aW9uOiB0b3RhbCBlc3RpbWF0ZWQgdGltZSBmb3IgYWxsIGFjdGlvbnMsIHJ1bnMgdXAgYW5kIGRvd24KfTsKClRlc3QuQW5vdGhlcldheS5fdGVzdF9vYmplY3RfdC5wcm90b3R5cGUub2sgPSBmdW5jdGlvbihjb25kLCBuYW1lKXsKICAgIGlmIChjb25kKSB7CiAgICAgICAgKyt0aGlzLm5fb2s7CiAgICAgICAgY29uZCA9IDE7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICArK3RoaXMubl9mYWlsOwogICAgICAgIGNvbmQgPSAwOwogICAgfQogICAgdGhpcy5hc3NlcnRpb25zLnB1c2goewogICAgICAgIG9rOiBjb25kLAogICAgICAgIG5hbWU6IG5hbWUKICAgIH0pOwp9OwpUZXN0LkFub3RoZXJXYXkuX3Rlc3Rfb2JqZWN0X3QucHJvdG90eXBlLmZhaWwgPSBmdW5jdGlvbihuYW1lKXsKICAgIHRoaXMub2soZmFsc2UsIG5hbWUpOwp9OwpUZXN0LkFub3RoZXJXYXkuX3Rlc3Rfb2JqZWN0X3QucHJvdG90eXBlLnBsYW4gPSBmdW5jdGlvbihuKXsKICAgIHRoaXMubl9wbGFuID0gbjsKfTsKVGVzdC5Bbm90aGVyV2F5Ll90ZXN0X29iamVjdF90LnByb3RvdHlwZS53YWl0X3Jlc3VsdCA9IGZ1bmN0aW9uKHNlY29uZHMpewogICAgdGhpcy53YWl0X3Jlc3VsdF9taWxsaXNlY29uZHMgPSAxMDAwICogc2Vjb25kczsKfTsKVGVzdC5Bbm90aGVyV2F5Ll9lcV9mYWlsX21zZyA9IGZ1bmN0aW9uKHBhdGgsIHdoYXQsIGV4cGVjdGVkLCBnb3QpewogICAgcmV0dXJuICJlcTogIiArIHBhdGggKyAiICIgKyB3aGF0ICsgIiBkaWZmZXI6IGdvdCAiICsgZ290ICsgIiwgYnV0IGV4cGVjdGVkICIgKyBleHBlY3RlZDsKfTsKVGVzdC5Bbm90aGVyV2F5Ll9hcnJheV9lcSA9IGZ1bmN0aW9uKGV4cGVjdGVkLCBnb3QsIHBhdGgsIG1zZyl7CiAgICBpZiAoZXhwZWN0ZWQubGVuZ3RoICE9IGdvdC5sZW5ndGgpIHsKICAgICAgICBtc2cubXNnID0gVGVzdC5Bbm90aGVyV2F5Ll9lcV9mYWlsX21zZyhwYXRoLCAiYXJyYXkgbGVuZ3RoIiwgZXhwZWN0ZWQubGVuZ3RoLCBnb3QubGVuZ3RoKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkLmxlbmd0aDsgKytpKSB7CiAgICAgICAgaWYgKCFUZXN0LkFub3RoZXJXYXkuX3RoaW5nX2VxKGV4cGVjdGVkW2ldLCBnb3RbaV0sIHBhdGggKyAiWyIgKyBpICsgIl0iLCBtc2cpKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKfTsKVGVzdC5Bbm90aGVyV2F5Ll9vYmplY3RfZXEgPSBmdW5jdGlvbihleHBlY3RlZCwgZ290LCBwYXRoLCBtc2cpewogICAgdmFyIHY7CiAgICBmb3IgKHYgaW4gZXhwZWN0ZWQpIHsKICAgICAgICBpZiAoISh2IGluIGdvdCkpIHsKICAgICAgICAgICAgbXNnLm1zZyA9IFRlc3QuQW5vdGhlcldheS5fZXFfZmFpbF9tc2cocGF0aCArICIuIiArIHYsICJwcm9wZXJ0aWVzIiwgZXhwZWN0ZWRbdl0sICJ1bmRlZmluZWQiKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoIVRlc3QuQW5vdGhlcldheS5fdGhpbmdfZXEoZXhwZWN0ZWRbdl0sIGdvdFt2XSwgcGF0aCArICIuIiArIHYsIG1zZykpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgIGZvciAodiBpbiBnb3QpIHsKICAgICAgICBpZiAoISh2IGluIGV4cGVjdGVkKSkgewogICAgICAgICAgICBtc2cubXNnID0gVGVzdC5Bbm90aGVyV2F5Ll9lcV9mYWlsX21zZyhwYXRoICsgIi4iICsgdiwgInByb3BlcnRpZXMiLCAidW5kZWZpbmVkIiwgZ290W3ZdKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB0cnVlOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9jb25zdHJ1Y3Rvcl9uYW1lID0gZnVuY3Rpb24oeCl7CiAgICBpZiAoeCA9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuICIiOwogICAgfQogICAgdmFyIHMgPSAidW5rbm93biI7CiAgICB0cnkgewogICAgICAgIHMgPSB0eXBlb2YoeC5jb25zdHJ1Y3Rvcik7CiAgICAgICAgaWYgKHMgIT0gInVua25vd24iKSB7CiAgICAgICAgICAgIHMgPSB4LmNvbnN0cnVjdG9yLnRvU3RyaW5nKCk7CiAgICAgICAgfQogICAgfSAKICAgIGNhdGNoIChlKSB7CiAgICAgICAgcyA9ICJ1bmtub3duIjsKICAgIH0KICAgIGlmIChzID09ICJ1bmtub3duIikgewogICAgICAgIC8vIGhhY2tpc2ggYXR0ZW1wdCB0byBndWVzcyBhIHR5cGUKICAgICAgICB2YXIgaXNfYXJyYXkgPSB0cnVlOwogICAgICAgIHZhciBpbmRleCA9IDA7CiAgICAgICAgZm9yIChpIGluIHgpIHsKICAgICAgICAgICAgaWYgKGkgIT0gaW5kZXgpIHsKICAgICAgICAgICAgICAgIGlzX2FycmF5ID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgKytpbmRleDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGlzX2FycmF5ID8gIkFycmF5IiA6ICJPYmplY3QiOyAvLyBmb3IgZW1wdHkgYXJyYXlzL29iamVjdHMsIHRoaXMgd2lsbCBiZSB3cm9uZyBoYWxmIHRoZSB0aW1lCiAgICB9CiAgICBlbHNlIAogICAgICAgIGlmIChzLm1hdGNoKC9eXHMqZnVuY3Rpb25ccysoXHcrKVxzKlwoLykpIHsKICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cC4kMTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHZhciBjID0gJyc7CiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHgpIHsKICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6CiAgICAgICAgICAgICAgICAgICAgYyA9ICdTdHJpbmcnOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzoKICAgICAgICAgICAgICAgICAgICBjID0gJ09iamVjdCc7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIGMgPSAnJzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gYzsKICAgICAgICB9Cn07ClRlc3QuQW5vdGhlcldheS5faXNfYXJyYXkgPSBmdW5jdGlvbih4KXsKICAgIHJldHVybiBUZXN0LkFub3RoZXJXYXkuX2NvbnN0cnVjdG9yX25hbWUoeCkgPT0gIkFycmF5IjsKfTsKClRlc3QuQW5vdGhlcldheS5faXNfdmFsdWVfdHlwZSA9IGZ1bmN0aW9uKHgpewogICAgY24gPSBUZXN0LkFub3RoZXJXYXkuX2NvbnN0cnVjdG9yX25hbWUoeCk7CiAgICByZXR1cm4gY24gPT0gIk51bWJlciIgfHwgY24gPT0gIlN0cmluZyIgfHwgY24gPT0gIkJvb2xlYW4iIHx8IGNuID09ICJEYXRlIjsKfTsKClRlc3QuQW5vdGhlcldheS5fdGhpbmdfZXEgPSBmdW5jdGlvbihleHBlY3RlZCwgZ290LCBwYXRoLCBtc2cpewogICAgaWYgKGV4cGVjdGVkID09IG51bGwgJiYgZ290ID09IG51bGwpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGVsc2UgCiAgICAgICAgaWYgKChleHBlY3RlZCA9PSBudWxsICYmIGdvdCAhPSBudWxsKSB8fCAoZXhwZWN0ZWQgIT0gbnVsbCAmJiBnb3QgPT0gbnVsbCkpIHsKICAgICAgICAgICAgbXNnLm1zZyA9IFRlc3QuQW5vdGhlcldheS5fZXFfZmFpbF9tc2cocGF0aCwgInZhbHVlcyIsIGV4cGVjdGVkLCBnb3QpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICB2YXIgZXhwZWN0ZWRfY24gPSBUZXN0LkFub3RoZXJXYXkuX2NvbnN0cnVjdG9yX25hbWUoZXhwZWN0ZWQpOwogICAgICAgICAgICB2YXIgZ290X2NuID0gVGVzdC5Bbm90aGVyV2F5Ll9jb25zdHJ1Y3Rvcl9uYW1lKGdvdCk7CiAgICAgICAgICAgIGlmIChleHBlY3RlZF9jbiAhPSBnb3RfY24pIHsKICAgICAgICAgICAgICAgIG1zZy5tc2cgPSBUZXN0LkFub3RoZXJXYXkuX2VxX2ZhaWxfbXNnKHBhdGgsICJ0eXBlcyIsIGV4cGVjdGVkX2NuLCBnb3RfY24pOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKFRlc3QuQW5vdGhlcldheS5faXNfYXJyYXkoZXhwZWN0ZWQpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRlc3QuQW5vdGhlcldheS5fYXJyYXlfZXEoZXhwZWN0ZWQsIGdvdCwgcGF0aCwgbXNnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICAgICAgaWYgKFRlc3QuQW5vdGhlcldheS5faXNfdmFsdWVfdHlwZShleHBlY3RlZCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4cGVjdGVkICE9IGdvdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLm1zZyA9IFRlc3QuQW5vdGhlcldheS5fZXFfZmFpbF9tc2cocGF0aCwgInZhbHVlcyIsIGV4cGVjdGVkLCBnb3QpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7IC8vIGp1c3QgYSBwbGFpbiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRlc3QuQW5vdGhlcldheS5fb2JqZWN0X2VxKGV4cGVjdGVkLCBnb3QsIHBhdGgsIG1zZyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQp9OwoKVGVzdC5Bbm90aGVyV2F5Ll90ZXN0X29iamVjdF90LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uKGdvdCwgZXhwZWN0ZWQsIG5hbWUpewogICAgdmFyIG1zZyA9IHt9OwogICAgaWYgKFRlc3QuQW5vdGhlcldheS5fdGhpbmdfZXEoZXhwZWN0ZWQsIGdvdCwgIiIsIG1zZykpIHsKICAgICAgICB0aGlzLm9rKDEsIG5hbWUpOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgdGhpcy5mYWlsKG5hbWUgKyAiLiAiICsgbXNnLm1zZyk7CiAgICB9Cn07CgpUZXN0LkFub3RoZXJXYXkuX3Rlc3Rfb2JqZWN0X3QucHJvdG90eXBlLmxpa2UgPSBmdW5jdGlvbihnb3QsIGV4cGVjdGVkLCBuYW1lKXsKICAgIGlmIChnb3QubWF0Y2goZXhwZWN0ZWQpICE9IG51bGwpIHsKICAgICAgICB0aGlzLm9rKDEsIG5hbWUpOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgdGhpcy5mYWlsKG5hbWUgKyAiOiBnb3QgIiArIGdvdCArICIsIGJ1dCBleHBlY3RlZCBpdCB0byBtYXRjaDogIiArIGV4cGVjdGVkKTsKICAgIH0KfTsKClRlc3QuQW5vdGhlcldheS5fZ19odG1sX2VxX3NwYW4gPSBudWxsOwpUZXN0LkFub3RoZXJXYXkuX2h0bWxfZXFfc3RyaW5nX3RvX25vZGUgPSBmdW5jdGlvbihzdHJpbmdfb3Jfbm9kZSwgd2hhdCwgbXNnKXsKICAgIGlmIChzdHJpbmdfb3Jfbm9kZS5ub2RlVHlwZSAhPSBudWxsKSB7CiAgICAgICAgc3RyaW5nX29yX25vZGUgPSBUZXN0LkFub3RoZXJXYXkuX2h0bWxfZXFfbm9kZV90b19zdHJpbmcoc3RyaW5nX29yX25vZGUpOyAvLyBkb3VibGUgdHJpcCAtIHRvIG1ha2UgcHJvcGVydGllcyBhc3NpZ25lZCBpbiBzY3JpcHRzIGF2YWlsYWJsZSBhcyBodG1sIG5vZGUgYXR0cmlidXRlcwogICAgfQogICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ19odG1sX2VxX3NwYW4gPT0gbnVsbCkgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19odG1sX2VxX3NwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7CiAgICB9CiAgICBUZXN0LkFub3RoZXJXYXkuX2dfaHRtbF9lcV9zcGFuLmlubmVySFRNTCA9IHN0cmluZ19vcl9ub2RlOwogICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ19odG1sX2VxX3NwYW4uY2hpbGROb2Rlcy5sZW5ndGggIT0gMSkgewogICAgICAgIG1zZy5tc2cgPSAiYmFkICIgKyB3aGF0ICsgIiBodG1sIHN0cmluZyBnaXZlbiAoc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgb3V0ZXJtb3N0IGVsZW1lbnQpOiAiICsgc3RyaW5nX29yX25vZGU7CiAgICB9CiAgICByZXR1cm4gVGVzdC5Bbm90aGVyV2F5Ll9nX2h0bWxfZXFfc3Bhbi5jaGlsZE5vZGVzWzBdLmNsb25lTm9kZSh0cnVlKTsKfTsKClRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9ub2RlX3RvX3N0cmluZyA9IGZ1bmN0aW9uKG5vZGUpewogICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ19odG1sX2VxX3NwYW4gPT0gbnVsbCkgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19odG1sX2VxX3NwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7CiAgICB9CiAgICBUZXN0LkFub3RoZXJXYXkuX2dfaHRtbF9lcV9zcGFuLmlubmVySFRNTCA9ICIiOwogICAgaWYgKG5vZGUub3V0ZXJIVE1MICE9IG51bGwpIHsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfaHRtbF9lcV9zcGFuLmlubmVySFRNTCA9IG5vZGUub3V0ZXJIVE1MOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgdmFyIGNsb25lID0gbm9kZS5jbG9uZU5vZGUodHJ1ZSk7CiAgICAgICAgdmFyIG5vZGUgPSBUZXN0LkFub3RoZXJXYXkuX2dfaHRtbF9lcV9zcGFuOwogICAgICAgIGlmIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmltcG9ydE5vZGUpIHsKICAgICAgICAgICAgaWYgKG5vZGUub3duZXJEb2N1bWVudCAhPSBjbG9uZS5vd25lckRvY3VtZW50KSB7CiAgICAgICAgICAgICAgICBjbG9uZSA9IG5vZGUub3duZXJEb2N1bWVudC5pbXBvcnROb2RlKGNsb25lLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBub2RlLmFwcGVuZENoaWxkKGNsb25lKTsKICAgIH0KICAgIHJldHVybiBUZXN0LkFub3RoZXJXYXkuX2dfaHRtbF9lcV9zcGFuLmlubmVySFRNTDsKfTsKClRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9wYXRoX21zZyA9IGZ1bmN0aW9uKHBhdGgpewogICAgdmFyIG1zZyA9ICIiOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgKytpKSB7CiAgICAgICAgbXNnICs9ICIgW25vZGUgIiArIHBhdGhbaV0ubm9kZTsKICAgICAgICBpZiAocGF0aFtpXS5pZCAhPSBudWxsICYmIHBhdGhbaV0uaWQgIT0gIiIpIHsKICAgICAgICAgICAgbXNnICs9ICIgaWQgIiArIHBhdGhbaV0uaWQ7CiAgICAgICAgfQogICAgICAgIGVsc2UgCiAgICAgICAgICAgIGlmIChwYXRoW2ldLmluZGV4ICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIG1zZyArPSAiIGF0IGluZGV4ICIgKyBwYXRoW2ldLmluZGV4OwogICAgICAgICAgICB9CiAgICAgICAgbXNnICs9ICJdICI7CiAgICB9CiAgICByZXR1cm4gbXNnOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9odG1sX2VxX2ZhaWxfbXNnID0gZnVuY3Rpb24ocGF0aCwgd2hhdCwgZXhwZWN0ZWQsIGdvdCl7CiAgICByZXR1cm4gVGVzdC5Bbm90aGVyV2F5Ll9odG1sX2VxX3BhdGhfbXNnKHBhdGgpICsgIjogIiArIHdoYXQgKyAiIGRpZmZlcjogZ290ICIgKyBnb3QgKyAiLCBidXQgZXhwZWN0ZWQgIiArIGV4cGVjdGVkOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9odG1sX2VxX3JlbW92ZV9ibGFuayA9IGZ1bmN0aW9uKHRleHQpewogICAgaWYgKHRleHQgPT0gbnVsbCkgewogICAgICAgIHJldHVybiAiIjsKICAgIH0KICAgIGVsc2UgCiAgICAgICAgaWYgKHRleHQubWF0Y2goIl4oXFxzKikoLipcXFMpKFxccyopJCIpKSB7CiAgICAgICAgICAgIHJldHVybiBSZWdFeHAuJDI7CiAgICAgICAgfQogICAgICAgIGVsc2UgCiAgICAgICAgICAgIGlmICh0ZXh0Lm1hdGNoKCJccyoiKSkgewogICAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICByZXR1cm4gdGV4dDsKfTsKClRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9yZW1vdmVfYmxhbmtfbm9kZXMgPSBmdW5jdGlvbihub2RlKXsKICAgIHZhciB0b19yZW1vdmUgPSBbXTsKICAgIGZvciAodmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkOyBjaGlsZCAhPSBudWxsOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7CiAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09IDMpIHsKICAgICAgICAgICAgdmFyIHZhbHVlID0gVGVzdC5Bbm90aGVyV2F5Ll9odG1sX2VxX3JlbW92ZV9ibGFuayhjaGlsZC5ub2RlVmFsdWUpOwogICAgICAgICAgICBpZiAodmFsdWUgPT0gIiIpIHsKICAgICAgICAgICAgICAgIHRvX3JlbW92ZS5wdXNoKGNoaWxkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGNoaWxkLm5vZGVWYWx1ZSA9IHZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b19yZW1vdmUubGVuZ3RoOyArK2kpIHsKICAgICAgICBub2RlLnJlbW92ZUNoaWxkKHRvX3JlbW92ZVtpXSk7CiAgICB9Cn07CgpUZXN0LkFub3RoZXJXYXkuX2h0bWxfbm9kZV90eXBlX3RleHQgPSBmdW5jdGlvbihub2RlX3R5cGUpewogICAgaWYgKG5vZGVfdHlwZSA9PSAxKSB7CiAgICAgICAgcmV0dXJuICIxIChodG1sIGVsZW1lbnQpIjsKICAgIH0KICAgIGVsc2UgCiAgICAgICAgaWYgKG5vZGVfdHlwZSA9PSAzKSB7CiAgICAgICAgICAgIHJldHVybiAiMyAodGV4dCkiOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIG5vZGVfdHlwZTsKICAgICAgICB9Cn07CgpUZXN0LkFub3RoZXJXYXkuX2h0bWxfZXFfbm9kZSA9IGZ1bmN0aW9uKGV4cGVjdGVkLCBnb3QsIHBhdGgsIG1zZywgZXhwZWN0ZWRfbG9jX2Jhc2UsIGdvdF9sb2NfYmFzZSl7CiAgICBpZiAoZXhwZWN0ZWQubm9kZVR5cGUgIT0gZ290Lm5vZGVUeXBlKSB7CiAgICAgICAgbXNnLm1zZyA9IFRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9mYWlsX21zZyhwYXRoLCAibm9kZSB0eXBlcyIsIFRlc3QuQW5vdGhlcldheS5faHRtbF9ub2RlX3R5cGVfdGV4dChleHBlY3RlZC5ub2RlVHlwZSksIFRlc3QuQW5vdGhlcldheS5faHRtbF9ub2RlX3R5cGVfdGV4dChnb3Qubm9kZVR5cGUpKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBlbHNlIAogICAgICAgIGlmIChleHBlY3RlZC5ub2RlVHlwZSA9PSAzKSB7CiAgICAgICAgICAgIGlmIChleHBlY3RlZC5ub2RlVmFsdWUgIT0gZ290Lm5vZGVWYWx1ZSkgewogICAgICAgICAgICAgICAgbXNnLm1zZyA9IFRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9mYWlsX21zZyhwYXRoLCAidGV4dCIsIGV4cGVjdGVkLm5vZGVWYWx1ZSwgZ290Lm5vZGVWYWx1ZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSAKICAgICAgICAgICAgaWYgKGV4cGVjdGVkLm5vZGVUeXBlID09IDEpIHsKICAgICAgICAgICAgICAgIGlmIChleHBlY3RlZC5ub2RlTmFtZSAhPSBnb3Qubm9kZU5hbWUpIHsKICAgICAgICAgICAgICAgICAgICBtc2cubXNnID0gVGVzdC5Bbm90aGVyV2F5Ll9odG1sX2VxX2ZhaWxfbXNnKHBhdGgsICJub2RlIG5hbWVzIiwgZXhwZWN0ZWQubm9kZU5hbWUsIGdvdC5ub2RlTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gY29tcGFyZSBhdHRyaWJ1dGVzCiAgICAgICAgICAgICAgICB2YXIgZXhwZWN0ZWRfYXR0cnMgPSB7fTsKICAgICAgICAgICAgICAgIHZhciBnb3RfYXR0cnMgPSB7fTsKICAgICAgICAgICAgICAgIHZhciBpOwogICAgICAgICAgICAgICAgdmFyIGE7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZXhwZWN0ZWQuYXR0cmlidXRlcy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgICAgIGEgPSBleHBlY3RlZC5hdHRyaWJ1dGVzW2ldOwogICAgICAgICAgICAgICAgICAgIGlmIChhLnNwZWNpZmllZCkgewogICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZF9hdHRyc1thLm5hbWVdID0gMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZ290LmF0dHJpYnV0ZXMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgICAgICBhID0gZ290LmF0dHJpYnV0ZXNbaV07CiAgICAgICAgICAgICAgICAgICAgaWYgKGEuc3BlY2lmaWVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdvdF9hdHRyc1thLm5hbWVdID0gMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKGEgaW4gZXhwZWN0ZWRfYXR0cnMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIShhIGluIGdvdF9hdHRycykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbXNnLm1zZyA9IFRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9wYXRoX21zZyhwYXRoKSArICI6IGF0dHJpYnV0ZSBzZXRzIGRpZmZlcjogZXhwZWN0ZWQgYXR0cmlidXRlICIgKyBhICsgIiBpcyBtaXNzaW5nIjsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAoYSBpbiBnb3RfYXR0cnMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIShhIGluIGV4cGVjdGVkX2F0dHJzKSkgewogICAgICAgICAgICAgICAgICAgICAgICBtc2cubXNnID0gVGVzdC5Bbm90aGVyV2F5Ll9odG1sX2VxX3BhdGhfbXNnKHBhdGgpICsgIjogYXR0cmlidXRlIHNldHMgZGlmZmVyOiBnb3QgZXh0cmEgYXR0cmlidXRlICIgKyBhOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yIChhIGluIGV4cGVjdGVkX2F0dHJzKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGVjdGVkX3ZhbHVlID0gZXhwZWN0ZWQuZ2V0QXR0cmlidXRlKGEpOwogICAgICAgICAgICAgICAgICAgIHZhciBnb3RfdmFsdWUgPSBnb3QuZ2V0QXR0cmlidXRlKGEpOwogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoZXhwZWN0ZWRfdmFsdWUpID09ICJzdHJpbmciICYmIHR5cGVvZihnb3RfdmFsdWUpID09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkX3ZhbHVlID0gVGVzdC5Bbm90aGVyV2F5Ll9odG1sX2VxX3JlbW92ZV9ibGFuayhleHBlY3RlZF92YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGdvdF92YWx1ZSA9IFRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9yZW1vdmVfYmxhbmsoZ290X3ZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9rID0gZXhwZWN0ZWRfdmFsdWUgPT0gZ290X3ZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9rICYmIChhID09ICJocmVmIiB8fCBhID09ICJIUkVGIikpIHsgLy8gdHJ5IHJlbGF0aXZlIGhyZWZzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwZWN0ZWRfcmVsYXRpdmVfdmFsdWUgPSBleHBlY3RlZF92YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHBlY3RlZF9sb2NfYmFzZSAhPSBudWxsICYmIGV4cGVjdGVkX3ZhbHVlLnN1YnN0cmluZygwLCBleHBlY3RlZF9sb2NfYmFzZS5sZW5ndGgpID09IGV4cGVjdGVkX2xvY19iYXNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWRfcmVsYXRpdmVfdmFsdWUgPSBleHBlY3RlZF92YWx1ZS5zdWJzdHJpbmcoZXhwZWN0ZWRfbG9jX2Jhc2UubGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnb3RfcmVsYXRpdmVfdmFsdWUgPSBnb3RfdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ290X2xvY19iYXNlICE9IG51bGwgJiYgZ290X3ZhbHVlLnN1YnN0cmluZygwLCBnb3RfbG9jX2Jhc2UubGVuZ3RoKSA9PSBnb3RfbG9jX2Jhc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb3RfcmVsYXRpdmVfdmFsdWUgPSBnb3RfdmFsdWUuc3Vic3RyaW5nKGdvdF9sb2NfYmFzZS5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2sgPSBleHBlY3RlZF9yZWxhdGl2ZV92YWx1ZSA9PSBnb3RfcmVsYXRpdmVfdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvaykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLm1zZyA9IFRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9mYWlsX21zZyhwYXRoLCAiYXR0cmlidXRlICIgKyBhICsgIiB2YWx1ZXMiLCBleHBlY3RlZF92YWx1ZSwgZ290X3ZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGV4cGVjdGVkX3ZhbHVlKSA9PSAiZnVuY3Rpb24iICYmIHR5cGVvZihnb3RfdmFsdWUpID09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkX3ZhbHVlID0gZXhwZWN0ZWRfdmFsdWUudG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvdF92YWx1ZSA9IGdvdF92YWx1ZS50b1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4cGVjdGVkX3ZhbHVlICE9IGdvdF92YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5tc2cgPSBUZXN0LkFub3RoZXJXYXkuX2h0bWxfZXFfZmFpbF9tc2cocGF0aCwgImF0dHJpYnV0ZSAiICsgYSArICIgdmFsdWVzIiwgZXhwZWN0ZWRfdmFsdWUsIGdvdF92YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlX21zZyA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFUZXN0LkFub3RoZXJXYXkuX3RoaW5nX2VxKGV4cGVjdGVkX3ZhbHVlLCBnb3RfdmFsdWUsICIiLCB2YWx1ZV9tc2cpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLm1zZyA9IFRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9wYXRoX21zZyhwYXRoKSArICI6IGF0dHJpYnV0ZSAiICsgYSArICIgdmFsdWVzIGRpZmZlcjogIiArIHZhbHVlX21zZy5tc2c7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBjb21wYXJlIGNoaWxkIG5vZGVzCiAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2h0bWxfZXFfcmVtb3ZlX2JsYW5rX25vZGVzKGV4cGVjdGVkKTsKICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9yZW1vdmVfYmxhbmtfbm9kZXMoZ290KTsKICAgICAgICAgICAgICAgIHZhciBleHBlY3RlZF9sZW5ndGggPSBleHBlY3RlZC5jaGlsZE5vZGVzLmxlbmd0aDsKICAgICAgICAgICAgICAgIHZhciBnb3RfbGVuZ3RoID0gZ290LmNoaWxkTm9kZXMubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKGV4cGVjdGVkX2xlbmd0aCA8IGdvdF9sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBtc2cubXNnID0gVGVzdC5Bbm90aGVyV2F5Ll9odG1sX2VxX3BhdGhfbXNnKHBhdGgpICsgIjogZ290ICIgKyAoZ290X2xlbmd0aCAtIGV4cGVjdGVkX2xlbmd0aCkgKyAiIGV4dHJhIGNoaWxkIG5vZGVzIjsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgIGlmIChleHBlY3RlZF9sZW5ndGggPiBnb3RfbGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5tc2cgPSBUZXN0LkFub3RoZXJXYXkuX2h0bWxfZXFfcGF0aF9tc2cocGF0aCkgKyAiOiBleHBlY3RlZCAiICsgKGV4cGVjdGVkX2xlbmd0aCAtIGdvdF9sZW5ndGgpICsgIiBtb3JlIGNoaWxkIG5vZGVzIjsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGV4cGVjdGVkX2xlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwZWN0ZWRfbm9kZSA9IGV4cGVjdGVkLmNoaWxkTm9kZXNbaV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGV4cGVjdGVkX25vZGUubm9kZU5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGV4cGVjdGVkX25vZGUuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVxID0gVGVzdC5Bbm90aGVyV2F5Ll9odG1sX2VxX25vZGUoZXhwZWN0ZWRfbm9kZSwgZ290LmNoaWxkTm9kZXNbaV0sIHBhdGgsIG1zZywgZXhwZWN0ZWRfbG9jX2Jhc2UsIGdvdF9sb2NfYmFzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLnBvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlcSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgcmV0dXJuIHRydWU7Cn07CgpUZXN0LkFub3RoZXJXYXkuX2h0bWxfZXFfZ2V0X2xvY19iYXNlID0gZnVuY3Rpb24obm9kZSl7CiAgICB2YXIgbG9jX2Jhc2UgPSBkb2N1bWVudC5sb2NhdGlvbjsKICAgIGlmIChub2RlLm93bmVyRG9jdW1lbnQgIT0gbnVsbCkgewogICAgICAgIGxvY19iYXNlID0gbm9kZS5vd25lckRvY3VtZW50LmxvY2F0aW9uOwogICAgfQogICAgaWYgKGxvY19iYXNlICE9IG51bGwpIHsKICAgICAgICBsb2NfYmFzZSA9IGxvY19iYXNlLmhyZWY7CiAgICAgICAgdmFyIHNsYXNoX3BvcyA9IGxvY19iYXNlLmxhc3RJbmRleE9mKCIvIik7CiAgICAgICAgaWYgKHNsYXNoX3BvcyAhPSAtMSkgewogICAgICAgICAgICBsb2NfYmFzZSA9IGxvY19iYXNlLnN1YnN0cmluZygwLCBzbGFzaF9wb3MgKyAxKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbG9jX2Jhc2U7Cn07CgpUZXN0LkFub3RoZXJXYXkuX3Rlc3Rfb2JqZWN0X3QucHJvdG90eXBlLmh0bWxfZXEgPSBmdW5jdGlvbihnb3QsIGV4cGVjdGVkLCBuYW1lKXsKICAgIHZhciBtc2cgPSB7fTsKICAgIHZhciBleHBlY3RlZF9ub2RlID0gVGVzdC5Bbm90aGVyV2F5Ll9odG1sX2VxX3N0cmluZ190b19ub2RlKGV4cGVjdGVkLCAiZXhwZWN0ZWQiLCBtc2cpOwogICAgaWYgKG1zZy5tc2cgIT0gbnVsbCkgewogICAgICAgIHRoaXMuZmFpbChuYW1lICsgIiBodG1sX2VxOiAiICsgbXNnLm1zZyk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICB2YXIgZ290X25vZGUgPSBUZXN0LkFub3RoZXJXYXkuX2h0bWxfZXFfc3RyaW5nX3RvX25vZGUoZ290LCAiZ290IiwgbXNnKTsKICAgICAgICBpZiAobXNnLm1zZyAhPSBudWxsKSB7CiAgICAgICAgICAgIHRoaXMuZmFpbChuYW1lICsgIiBodG1sX2VxOiAiICsgbXNnLm1zZyk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICB2YXIgZXhwZWN0ZWRfbG9jX2Jhc2UgPSBUZXN0LkFub3RoZXJXYXkuX2h0bWxfZXFfZ2V0X2xvY19iYXNlKGV4cGVjdGVkKTsKICAgICAgICAgICAgdmFyIGdvdF9sb2NfYmFzZSA9IFRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9nZXRfbG9jX2Jhc2UoZ290KTsKICAgICAgICAgICAgaWYgKFRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9ub2RlKGV4cGVjdGVkX25vZGUsIGdvdF9ub2RlLCBbXSwgbXNnLCBleHBlY3RlZF9sb2NfYmFzZSwgZ290X2xvY19iYXNlKSkgewogICAgICAgICAgICAgICAgdGhpcy5vaygxLCBuYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBtc2cgPSBuYW1lICsgIiBodG1sX2VxICIgKyBtc2cubXNnOwogICAgICAgICAgICAgICAgdmFyIGV4cGVjdGVkX3N0ciA9IFRlc3QuQW5vdGhlcldheS5faHRtbF9lcV9ub2RlX3RvX3N0cmluZyhleHBlY3RlZF9ub2RlKTsKICAgICAgICAgICAgICAgIHZhciBnb3Rfc3RyID0gVGVzdC5Bbm90aGVyV2F5Ll9odG1sX2VxX25vZGVfdG9fc3RyaW5nKGdvdF9ub2RlKTsKICAgICAgICAgICAgICAgIG1zZyArPSAiLlxuIGdvdCBodG1sOiAiICsgZ290X3N0cjsKICAgICAgICAgICAgICAgIG1zZyArPSAiLlxuIGV4cGVjdGVkIGh0bWw6ICIgKyBleHBlY3RlZF9zdHI7CiAgICAgICAgICAgICAgICB0aGlzLmZhaWwobXNnKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfTsKClRlc3QuQW5vdGhlcldheS5fZGVidWdfcGFuZV9wcmludCA9IGZ1bmN0aW9uKG1zZyl7CiAgICB2YXIgZCA9IG5ldyBEYXRlKCk7CiAgICB2YXIgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInAiKTsKICAgIHAuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZC50b0xvY2FsZVRpbWVTdHJpbmcoKSArICIgIiArIG1zZykpOwogICAgdmFyIGRlYnVnX3BhbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZGVidWciKTsKICAgIGRlYnVnX3BhbmUuYXBwZW5kQ2hpbGQocCk7CiAgICB2YXIgZGVidWdfdGFiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImRlYnVnX3RhYiIpOwogICAgdmFyIHJlc3VsdHNfdGFiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJlc3VsdHNfdGFiIik7CiAgICBkZWJ1Z190YWIuc3R5bGUudmlzaWJpbGl0eSA9ICJ2aXNpYmxlIjsKICAgIHJlc3VsdHNfdGFiLnN0eWxlLnZpc2liaWxpdHkgPSAidmlzaWJsZSI7Cn07CgpUZXN0LkFub3RoZXJXYXkuX3Rlc3Rfb2JqZWN0X3QucHJvdG90eXBlLmRlYnVnX3ByaW50ID0gZnVuY3Rpb24obXNnKXsKICAgIFRlc3QuQW5vdGhlcldheS5fZGVidWdfcGFuZV9wcmludCh0aGlzLm5hbWUgKyAiOiAiICsgbXNnKTsKfTsKClRlc3QuQW5vdGhlcldheS5fdGVzdF9vYmplY3RfdC5wcm90b3R5cGUuZGVsYXlfY2FsbCA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgdGltZW91dF9tcyA9IDIwMDsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgaWYgKHR5cGVvZihhcmd1bWVudHNbaV0pICE9ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgdGltZW91dF9tcyA9IDEwMDAgKiBhcmd1bWVudHNbaV07CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICB2YXIgYWN0aW9uID0gewogICAgICAgICAgICAgICAgYWN0aW9uX2tpbmQ6ICJjYWxsIiwKICAgICAgICAgICAgICAgIGNhbGxfZGVsYXlfbWlsbGlzZWNvbmRzOiB0aW1lb3V0X21zLAogICAgICAgICAgICAgICAgY2FsbF9mbjogYXJndW1lbnRzW2ldCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuZGVsYXlfdG90YWxfbWlsbGlzZWNvbmRzX2xlZnQgKz0gVGVzdC5Bbm90aGVyV2F5Ll9hY3Rpb25fZXN0aW1hdGVfbWlsbGlzZWNvbmRzKGFjdGlvbik7CiAgICAgICAgICAgIHRoaXMuZGVsYXlfYWN0aW9ucy5wdXNoKGFjdGlvbik7CiAgICAgICAgfQogICAgfQp9OwoKVGVzdC5Bbm90aGVyV2F5Ll90ZXN0X29iamVjdF90LnByb3RvdHlwZS5vcGVuX3dpbmRvdyA9IGZ1bmN0aW9uKHVybCwgZm4sIHRpbWVvdXRfc2Vjb25kcyl7CiAgICBpZiAodGltZW91dF9zZWNvbmRzID09IG51bGwpIHsKICAgICAgICB0aW1lb3V0X3NlY29uZHMgPSA0OwogICAgfQogICAgdmFyIG5vX2Nsb3NlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImRvbnRfY2xvc2VfdGVzdF93aW5kb3dzIik7CiAgICB2YXIgYWN0aW9uID0gewogICAgICAgIGFjdGlvbl9raW5kOiAid2luZG93IiwKICAgICAgICB3bmRfdXJsOiB1cmwudG9TdHJpbmcoKSArICh3aW5kb3cubG9jYXRpb24uc2VhcmNoIHx8ICIiKSwKICAgICAgICB3bmRfd25kOiBudWxsLAogICAgICAgIHduZF9mbjogZm4sCiAgICAgICAgd25kX3RpbWVvdXRfbWlsbGlzZWNvbmRzOiB0aW1lb3V0X3NlY29uZHMgKiAxMDAwLAogICAgICAgIHduZF9ub19jbG9zZTogbm9fY2xvc2UuY2hlY2tlZAogICAgfTsKICAgIHRoaXMuZGVsYXlfdG90YWxfbWlsbGlzZWNvbmRzX2xlZnQgKz0gVGVzdC5Bbm90aGVyV2F5Ll9hY3Rpb25fZXN0aW1hdGVfbWlsbGlzZWNvbmRzKGFjdGlvbik7CiAgICB0aGlzLmRlbGF5X2FjdGlvbnMucHVzaChhY3Rpb24pOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll90ZXN0X29iamVjdF90LnByb3RvdHlwZS5yZXBsYXlfZXZlbnRzID0gZnVuY3Rpb24od25kLCBldmVudHMpewogICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ19ub19yZWNvcmRfbXNnICE9IG51bGwpIHsKICAgICAgICB0aGlzLmZhaWwoInJlcGxheV9ldmVudHM6ICIgKyBUZXN0LkFub3RoZXJXYXkuX2dfbm9fcmVjb3JkX21zZyk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICB2YXIgYWN0aW9uID0gewogICAgICAgICAgICBhY3Rpb25fa2luZDogInJlcGxheSIsCiAgICAgICAgICAgIHJlcGxheV93bmQ6IHduZCwKICAgICAgICAgICAgcmVwbGF5X2V2ZW50czogZXZlbnRzLmV2ZW50cywKICAgICAgICAgICAgcmVwbGF5X2V2ZW50X2k6IG51bGwsCiAgICAgICAgICAgIHJlcGxheV9jaGVja3BvaW50czogZXZlbnRzLmNoZWNrcG9pbnRzCiAgICAgICAgfTsKICAgICAgICB0aGlzLmRlbGF5X3RvdGFsX21pbGxpc2Vjb25kc19sZWZ0ICs9IFRlc3QuQW5vdGhlcldheS5fYWN0aW9uX2VzdGltYXRlX21pbGxpc2Vjb25kcyhhY3Rpb24pOwogICAgICAgIHRoaXMuZGVsYXlfYWN0aW9ucy5wdXNoKGFjdGlvbik7CiAgICB9Cn07CgpUZXN0LkFub3RoZXJXYXkuX2FjdGlvbl9lc3RpbWF0ZV9taWxsaXNlY29uZHMgPSBmdW5jdGlvbihhY3Rpb24pewogICAgdmFyIG1zID0gMDsKICAgIGlmIChhY3Rpb24uYWN0aW9uX2tpbmQgPT0gImNhbGwiKSB7CiAgICAgICAgbXMgPSBhY3Rpb24uY2FsbF9kZWxheV9taWxsaXNlY29uZHM7CiAgICB9CiAgICBlbHNlIAogICAgICAgIGlmIChhY3Rpb24uYWN0aW9uX2tpbmQgPT0gIndpbmRvdyIpIHsKICAgICAgICAgICAgbXMgPSAwOwogICAgICAgIH0KICAgICAgICBlbHNlIAogICAgICAgICAgICBpZiAoYWN0aW9uLmFjdGlvbl9raW5kID09ICJyZXBsYXkiKSB7CiAgICAgICAgICAgICAgICBtcyA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdGlvbi5yZXBsYXlfZXZlbnRzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICAgICAgbXMgKz0gYWN0aW9uLnJlcGxheV9ldmVudHNbaV1bInRpbWUiXSAtIDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgIHJldHVybiBtczsKfTsKClRlc3QuQW5vdGhlcldheS5fZ190aW1lb3V0X2dyYW51bGFyaXR5ID0gMjAwOwpUZXN0LkFub3RoZXJXYXkuX2dfdGVzdHNfcXVldWUgPSBbXTsgLy8gdmVjdG9yIG9mIHsgdXJsOiBzdHJpbmcsIHRlc3Rfb2JqZWN0cyA6IGFycmF5IG9mIHRlc3Rfb2JqZWN0X3QsIHRlc3Rfb2JqZWN0X2k6IGludCwgd2FpdF9tc2c6IDxwPiBvYmplY3QsIGxvYWRpbmdfdGltZW91dF9taWxsaXNlY29uZHM6IGludCwgdGltZW91dF9pZDogaWQgfQovLyBsb2FkIG9uZSBodG1sIHBhZ2UsIHNjaGVkdWxlIGZ1cnRoZXIgcHJvY2Vzc2luZwpUZXN0LkFub3RoZXJXYXkuX3J1bl90ZXN0X3BhZ2UgPSBmdW5jdGlvbihpZCwgY2FsbGVkX2Zyb21fb3V0c2lkZSl7CiAgICBpZiAoaWQubWF0Y2goL150ZXN0KFxkKykvKSkgewogICAgICAgIGlkID0gUmVnRXhwLiQxOwogICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ190ZXN0c19xdWV1ZS5wdXNoKHsKICAgICAgICAgICAgdXJsOiBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdF9wYWdlX3VybHNbaWRdLnVybCwKICAgICAgICAgICAgY29udmVudGlvbjogVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfcGFnZV91cmxzW2lkXS5jb252ZW50aW9uLAogICAgICAgICAgICB0ZXN0X29iamVjdHM6IFtdCiAgICAgICAgfSk7CiAgICAgICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ190ZXN0c19xdWV1ZS5sZW5ndGggPT0gMSkgewogICAgICAgICAgICBpZiAoIWNhbGxlZF9mcm9tX291dHNpZGUpIHsKICAgICAgICAgICAgICAgIC8vIENyYXAuIEJlIGNhcmVmdWwgc3RlcHBpbmcgYXJvdW5kLgogICAgICAgICAgICAgICAgLy8gRm9yIE1vemlsbGEgYW5kIE9wZXJhLCB3aGVuIHRoaXMgZmlsZSBpcyBpbmNsdWRlZCBpbnRvIHRoZSBmcmFtZXNldCBwYWdlIHRoYXQgaXMgaW4gYW5vdGhlciBkaXJlY3RvcnkgKGFuZCBfZ19vdXRzaWRlX3BhdGhfY29ycmVjdGlvbiE9bnVsbCkKICAgICAgICAgICAgICAgIC8vIGJ1dCB0aGUgdGVzdCBwYWdlcyBhcmUgc3RhcnRlZCBmcm9tIHdpdGhpbiBpdCAoYnkgInJ1biIgYnV0dG9ucyksIHRoZW46CiAgICAgICAgICAgICAgICAvLyBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgcGFnZSBpcyB0aGUgZmlyc3Qgb25lIGxvYWRlZCBpbnRvIHRoZSB0ZXN0IGZyYW1lIG9yIG5vdCwKICAgICAgICAgICAgICAgIC8vIHRoZSBiYXNlIHVybCBmb3IgcmVsYXRpdmUgdGVzdCBwYWdlcyBkaWZmZXJzLgogICAgICAgICAgICAgICAgLy8gQ3JhcCwgbGlrZSBJIHNhaWQuCiAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdHNfcXVldWVbMF0uc3VwcHJlc3Nfb3V0c2lkZV9wYXRoX2NvcnJlY3Rpb24gPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fc3RhcnRfbG9hZGluZ19wYWdlKCk7CiAgICAgICAgfQogICAgfQp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9sb2FkX25leHRfcGFnZSA9IGZ1bmN0aW9uKCl7CiAgICBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdHNfcXVldWUuc3BsaWNlKDAsIDEpOwogICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ190ZXN0c19xdWV1ZS5sZW5ndGggPiAwKSB7CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9zdGFydF9sb2FkaW5nX3BhZ2UoKTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIGlmICghVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfZnJhbWVfbm9fY2xlYXIpIHsKICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfaWZyYW1lLmxvY2F0aW9uLnJlcGxhY2UoImFib3V0OmJsYW5rIik7CiAgICAgICAgfQogICAgfQp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9nX29wZXJhX3BhdGhfY29ycmVjdGlvbiA9IG51bGw7IC8vIHVnbHkgd2FydCB0byBzdXBwb3J0IG9wZXJhClRlc3QuQW5vdGhlcldheS5fZ19vdXRzaWRlX3BhdGhfY29ycmVjdGlvbiA9IG51bGw7IC8vIHVnbHkgd2FydCB0byBhY2NvbW9kYXRlIE9wZXJhIGFuZCBNb3ppbGxhLCB3aGVyZSByZWxhdGl2ZSB1cmwgcmVsYXRlcyB0byB0aGUgZGlyZWN0b3J5IHdoZXJlIHRoZSBwYWdlIHRoYXQgY2FsbHMgdGhpcyBmdW5jdGlvbiBpcyBsb2NhdGVkClRlc3QuQW5vdGhlcldheS5fc2V0X2lmcmFtZV9sb2NhdGlvbiA9IGZ1bmN0aW9uKGlmcmFtZSwgbG9jLCBvdXRzaWRlX3BhdGhfY29ycmVjdGlvbil7CiAgICAvLyBhbGxvdyB0byBsb2FkIG9ubHkgbG9jYXRpb25zIHdpdGggdGhlIHNhbWUgb3JpZ2luCiAgICB2YXIgcHJvdG9fZW5kID0gbG9jLmluZGV4T2YoIjovLyIpOwogICAgaWYgKHByb3RvX2VuZCAhPSAtMSkgeyAvLyBvdGhlcndpc2UsIGl0J3Mgc2FmZSB0byBhc3N1bWUgKGZvciBPcGVyYSwgTW96aWxsYSBhbmQgSUUgKSB0aGF0IGxvYyB3aWxsIGJlIHRyZWF0ZWQgYXMgcmVsYXRpdmUKICAgICAgICB2YXIgbWFpbl9sb2MgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICB2YXIgaG9zdF9lbmQgPSBsb2Muc3Vic3RyaW5nKHByb3RvX2VuZCArIDMpLmluZGV4T2YoIi8iKTsKICAgICAgICB2YXIgb2sgPSBmYWxzZTsKICAgICAgICBpZiAoaG9zdF9lbmQgIT0gLTEpIHsKICAgICAgICAgICAgdmFyIGxvY19vcmlnaW4gPSBsb2Muc3Vic3RyaW5nKDAsIHByb3RvX2VuZCArIDMgKyBob3N0X2VuZCArIDEpOwogICAgICAgICAgICBpZiAobWFpbl9sb2MubGVuZ3RoID49IGxvY19vcmlnaW4ubGVuZ3RoICYmIG1haW5fbG9jLnN1YnN0cmluZygwLCBsb2Nfb3JpZ2luLmxlbmd0aCkgPT0gbG9jX29yaWdpbikgewogICAgICAgICAgICAgICAgb2sgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICghb2spIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIG1zZzogInRlc3QgcGFnZXMgbWF5IGhhdmUgb25seSB1cmxzIHdpdGggdGhlIHNhbWUgb3JpZ2luIGFzICIgKyBtYWluX2xvYwogICAgICAgICAgICB9OwogICAgICAgIH0KICAgIH0KICAgIC8vIG9wZXJhIGNhbm5vdCBoYW5kbGUgdXJscyByZWxhdGl2ZSB0byBmaWxlOi8vIHdpdGhvdXQgYXNzaXN0YW5jZQogICAgaWYgKHdpbmRvdy5vcGVyYSAhPSBudWxsICYmIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PSAiZmlsZToiICYmIGxvYy5pbmRleE9mKCI6IikgPT0gLTEpIHsKICAgICAgICB2YXIgYmFzZSA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgICAgIHZhciBxX3BvcyA9IGJhc2UuaW5kZXhPZigiPyIpOwogICAgICAgIGlmIChxX3BvcyAhPSAtMSkgewogICAgICAgICAgICBiYXNlID0gYmFzZS5zdWJzdHJpbmcoMCwgcV9wb3MpOwogICAgICAgIH0KICAgICAgICB2YXIgc2xhc2hfcG9zID0gYmFzZS5sYXN0SW5kZXhPZigiLyIpOwogICAgICAgIGlmIChzbGFzaF9wb3MgIT0gLTEpIHsKICAgICAgICAgICAgYmFzZSA9IGJhc2Uuc3Vic3RyaW5nKDAsIHNsYXNoX3BvcyArIDEpOwogICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfb3BlcmFfcGF0aF9jb3JyZWN0aW9uID0gYmFzZTsKICAgICAgICAgICAgbG9jID0gYmFzZSArIGxvYzsKICAgICAgICB9CiAgICB9CiAgICAvLyBpZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBmcm9tIGFub3RoZXIgcGFnZSwgYW5kIGlmIHRoYXQgcGFnZSBpcyBpbiBhbm90aGVyIGRpcmVjdG9yeSwgY29ycmVjdGlvbiBpcyBuZWVkZWQKICAgIGlmIChvdXRzaWRlX3BhdGhfY29ycmVjdGlvbiAhPSBudWxsKSB7CiAgICAgICAgdmFyIHBvcyA9IGxvYy5pbmRleE9mKG91dHNpZGVfcGF0aF9jb3JyZWN0aW9uKTsKICAgICAgICBpZiAocG9zID09IDApIHsKICAgICAgICAgICAgbG9jID0gbG9jLnN1YnN0cmluZyhvdXRzaWRlX3BhdGhfY29ycmVjdGlvbi5sZW5ndGggKyAxKTsKICAgICAgICB9CiAgICB9CiAgICBpZiAoaWZyYW1lLmxvY2F0aW9uICE9IG51bGwpIHsKICAgICAgICBpZnJhbWUubG9jYXRpb24ucmVwbGFjZShsb2MpOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgaWZyYW1lLnNyYyA9IGxvYzsKICAgIH0KICAgIHJldHVybiB7fTsKfTsKClRlc3QuQW5vdGhlcldheS5fc3RhcnRfbG9hZGluZ19wYWdlID0gZnVuY3Rpb24oKXsKICAgIHZhciB0ZXN0X3BhZ2UgPSBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdHNfcXVldWVbMF07CiAgICB0ZXN0X3BhZ2UubG9hZGluZ190aW1lb3V0X21pbGxpc2Vjb25kcyA9IDEyMDAwOwogICAgdGVzdF9wYWdlLnRpbWVvdXRfaWQgPSBzZXRUaW1lb3V0KFRlc3QuQW5vdGhlcldheS5fbG9hZGluZ190aW1lb3V0LCBUZXN0LkFub3RoZXJXYXkuX2dfdGltZW91dF9ncmFudWxhcml0eSk7CiAgICB0ZXN0X3BhZ2Uud2FpdF9tc2cgPSBUZXN0LkFub3RoZXJXYXkuX3ByaW50X2NvdW50ZXJfcmVzdWx0KHRlc3RfcGFnZS51cmwsICJsb2FkaW5nLi4uIiwgdGVzdF9wYWdlLmxvYWRpbmdfdGltZW91dF9taWxsaXNlY29uZHMsICJsb2FkaW5nIik7CiAgICBpZiAodGVzdF9wYWdlLmNvbnZlbnRpb24gPT0gImpzYW4iKSB7CiAgICAgICAgLy8gdGhlIHRlc3RzIGluIHRoYXQgcGFnZSB3aWxsIHJ1biB3aGVuIGl0J3MgbG9hZGluZywgc28gdGhlIHRlc3Qgb2JqZWN0IG11c3QgYmUgcmVhZHkKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdF9vYmplY3RfZm9yX2pzYW4gPSBuZXcgVGVzdC5Bbm90aGVyV2F5Ll90ZXN0X29iamVjdF90KHRlc3RfcGFnZS51cmwpOwogICAgfQogICAgdmFyIG91dHNpZGVfcGF0aF9jb3JyZWN0aW9uID0gbnVsbDsKICAgIGlmIChUZXN0LkFub3RoZXJXYXkuX2dfb3V0c2lkZV9wYXRoX2NvcnJlY3Rpb24gIT0gbnVsbCAmJiAhdGVzdF9wYWdlLnN1cHByZXNzX291dHNpZGVfcGF0aF9jb3JyZWN0aW9uKSB7CiAgICAgICAgb3V0c2lkZV9wYXRoX2NvcnJlY3Rpb24gPSBUZXN0LkFub3RoZXJXYXkuX2dfb3V0c2lkZV9wYXRoX2NvcnJlY3Rpb247CiAgICB9CiAgICB2YXIgcmVzdWx0ID0gVGVzdC5Bbm90aGVyV2F5Ll9zZXRfaWZyYW1lX2xvY2F0aW9uKFRlc3QuQW5vdGhlcldheS5fZ190ZXN0X2lmcmFtZSwgdGVzdF9wYWdlLnVybCwgb3V0c2lkZV9wYXRoX2NvcnJlY3Rpb24pOwogICAgaWYgKHJlc3VsdC5tc2cgIT0gbnVsbCkgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fdW5wcmludF9yZXN1bHQodGVzdF9wYWdlLndhaXRfbXNnKTsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3ByaW50X3Jlc3VsdCh0ZXN0X3BhZ2UudXJsLCByZXN1bHQubXNnLCAiYmFkdGVzdCIsIG51bGwpOwogICAgICAgIFRlc3QuQW5vdGhlcldheS5fbG9hZF9uZXh0X3BhZ2UoKTsKICAgIH0KfTsKClRlc3QuQW5vdGhlcldheS5fbG9hZGluZ190aW1lb3V0ID0gZnVuY3Rpb24oKXsKICAgIHZhciB0ZXN0X3BhZ2UgPSBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdHNfcXVldWVbMF07CiAgICB0ZXN0X3BhZ2UubG9hZGluZ190aW1lb3V0X21pbGxpc2Vjb25kcyAtPSBUZXN0LkFub3RoZXJXYXkuX2dfdGltZW91dF9ncmFudWxhcml0eTsKICAgIGlmICh0ZXN0X3BhZ2UubG9hZGluZ190aW1lb3V0X21pbGxpc2Vjb25kcyA+IDApIHsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3VwZGF0ZV9tc2dfY291bnRlcih0ZXN0X3BhZ2Uud2FpdF9tc2csICh0ZXN0X3BhZ2UubG9hZGluZ190aW1lb3V0X21pbGxpc2Vjb25kcyAvIDEwMDApLnRvRml4ZWQoKSk7CiAgICAgICAgdGVzdF9wYWdlLnRpbWVvdXRfaWQgPSBzZXRUaW1lb3V0KFRlc3QuQW5vdGhlcldheS5fbG9hZGluZ190aW1lb3V0LCBUZXN0LkFub3RoZXJXYXkuX2dfdGltZW91dF9ncmFudWxhcml0eSk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3VucHJpbnRfcmVzdWx0KHRlc3RfcGFnZS53YWl0X21zZyk7CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9wcmludF9yZXN1bHQodGVzdF9wYWdlLnVybCwgIlVuYWJsZSB0byBsb2FkIHRlc3QgcGFnZS4gVGltZW91dCBleHBpcmVkIiwgImJhZHRlc3QiLCBudWxsKTsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2xvYWRfbmV4dF9wYWdlKCk7CiAgICB9Cn07CgpUZXN0LkFub3RoZXJXYXkuX3N0cmlwX3F1ZXJ5X2FuZF9oYXNoID0gZnVuY3Rpb24ocyl7CiAgICB2YXIgaSA9IHMubGFzdEluZGV4T2YoIiMiKTsKICAgIGlmIChpICE9IC0xKSB7CiAgICAgICAgcyA9IHMuc3Vic3RyaW5nKDAsIGkpOwogICAgfQogICAgaSA9IHMubGFzdEluZGV4T2YoIj8iKTsKICAgIGlmIChpICE9IC0xKSB7CiAgICAgICAgcyA9IHMuc3Vic3RyaW5nKDAsIGkpOwogICAgfQogICAgcmV0dXJuIHM7Cn07CgpUZXN0LkFub3RoZXJXYXkuX2lzX3VybF9sb2FkZWQgPSBmdW5jdGlvbih1cmwsIHduZCl7CiAgICB2YXIgbG9hZGVkID0gZmFsc2U7CiAgICBpZiAod25kICE9IG51bGwgJiYgd25kLmxvY2F0aW9uICE9IG51bGwpIHsKICAgICAgICAvLyBhZnRlciBzb21lIHBvcHVwIGJsb2NrZXIgaW50ZXJmZXJlbmNlLCBsb2NhdGlvbiBtYXkgYmVoYXZlIHN0cmFuZ2UuLgogICAgICAgIHZhciBsb2NhdGlvbl9zID0gIiI7CiAgICAgICAgbG9jYXRpb25fcyArPSB3bmQubG9jYXRpb247CiAgICAgICAgaWYgKGxvY2F0aW9uX3MgIT0gIiIpIHsKICAgICAgICAgICAgdmFyIHBhdGhuYW1lID0gd25kLmxvY2F0aW9uLnBhdGhuYW1lOwogICAgICAgICAgICB2YXIgZXhwZWN0ZWRfdXJsID0gdXJsOwogICAgICAgICAgICB2YXIgaSA9IGV4cGVjdGVkX3VybC5sYXN0SW5kZXhPZigiIyIpOwogICAgICAgICAgICBpZiAoaSAhPSAtMSkgewogICAgICAgICAgICAgICAgZXhwZWN0ZWRfdXJsID0gZXhwZWN0ZWRfdXJsLnN1YnN0cmluZygwLCBpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpID0gZXhwZWN0ZWRfdXJsLmxhc3RJbmRleE9mKCI/Iik7CiAgICAgICAgICAgIGlmIChpICE9IC0xKSB7CiAgICAgICAgICAgICAgICBleHBlY3RlZF91cmwgPSBleHBlY3RlZF91cmwuc3Vic3RyaW5nKDAsIGkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgPSBleHBlY3RlZF91cmwubGFzdEluZGV4T2YoIi8iKTsKICAgICAgICAgICAgaWYgKGkgIT0gLTEgJiYgaSAhPSBleHBlY3RlZF91cmwubGVuZ3RoIC0gMSkgewogICAgICAgICAgICAgICAgZXhwZWN0ZWRfdXJsID0gZXhwZWN0ZWRfdXJsLnN1YnN0cmluZyhpICsgMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaSA9IHBhdGhuYW1lLmluZGV4T2YoZXhwZWN0ZWRfdXJsKTsKICAgICAgICAgICAgaWYgKHduZC5sb2NhdGlvbi5ocmVmID09IHVybCB8fCAoaSAhPSAtMSAmJiBpID09IHBhdGhuYW1lLmxlbmd0aCAtIGV4cGVjdGVkX3VybC5sZW5ndGgpKSB7CiAgICAgICAgICAgICAgICBpZiAoIC8qd2luZG93Lm9wZXJhPT1udWxsKi93bmQuZG9jdW1lbnQucmVhZHlTdGF0ZSA9PSBudWxsIHx8IHduZC5kb2N1bWVudC5yZWFkeVN0YXRlID09ICJjb21wbGV0ZSIpIHsgLy8gZm9yIG9wZXJhIChhbmQgSUU/KSwgZ2V0RWxlbWVudEJ5SWQgZG9lcyBub3Qgd29yayB1bnRpbC4uCiAgICAgICAgICAgICAgICAgICAgbG9hZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBsb2FkZWQ7Cn07Ci8vIGZpbmQgYW5kIHJ1biBhbGwgdGVzdCBmdW5jdGlvbnMgaW4gdGhlIGdfY3VyX3BhZ2UgaHRtbCBwYWdlLgpUZXN0LkFub3RoZXJXYXkuX3Rlc3RfcGFnZV9vbmxvYWQgPSBmdW5jdGlvbigpewogICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ190ZXN0c19xdWV1ZS5sZW5ndGggPT0gMCkgewogICAgICAgIHJldHVybjsKICAgIH0KICAgIHZhciB0ZXN0X3BhZ2UgPSBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdHNfcXVldWVbMF07CiAgICBpZiAoIVRlc3QuQW5vdGhlcldheS5faXNfdXJsX2xvYWRlZCh0ZXN0X3BhZ2UudXJsLCBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdF9pZnJhbWUpKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgY2xlYXJUaW1lb3V0KHRlc3RfcGFnZS50aW1lb3V0X2lkKTsKICAgIFRlc3QuQW5vdGhlcldheS5fdW5wcmludF9yZXN1bHQodGVzdF9wYWdlLndhaXRfbXNnKTsKICAgIAogICAgaWYgKHRlc3RfcGFnZS5jb252ZW50aW9uID09ICJhbm90aGVyd2F5IikgewogICAgICAgIC8vIGdldCB0ZXN0IGZ1bmN0aW9uIG5hbWVzICh0aG9zZSBiZWdpbm5pbmcgd2l0aCAidGVzdCIpCiAgICAgICAgaWYgKHR5cGVvZihUZXN0LkFub3RoZXJXYXkuX2dfdGVzdF9pZnJhbWUuZG9jdW1lbnQuc2NyaXB0cykgIT0gJ3VuZGVmaW5lZCcpIHsgLy8gSUUKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdF9pZnJhbWUuZG9jdW1lbnQuc2NyaXB0cy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgdmFyIHNjcmlwdF90ZXh0ID0gVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfaWZyYW1lLmRvY3VtZW50LnNjcmlwdHNbaV0udGV4dDsKICAgICAgICAgICAgICAgIHZhciBmdW5fc2lnID0gImZ1bmN0aW9uIHRlc3QiOwogICAgICAgICAgICAgICAgdmFyIGZ1bl9zdGFydCA9IHNjcmlwdF90ZXh0LmluZGV4T2YoZnVuX3NpZyk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHdoaWxlIChmdW5fc3RhcnQgIT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICBzY3JpcHRfdGV4dCA9IHNjcmlwdF90ZXh0LnN1YnN0cmluZyhmdW5fc3RhcnQsIHNjcmlwdF90ZXh0Lmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZ1bl9lbmQgPSBzY3JpcHRfdGV4dC5pbmRleE9mKCcoJyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZ1bl9uYW1lID0gc2NyaXB0X3RleHQuc3Vic3RyaW5nKCJmdW5jdGlvbiAiLmxlbmd0aCwgZnVuX2VuZCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIHdoaXRlc3BhY2UgPSBmdW5fbmFtZS5pbmRleE9mKCcgJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlc3BhY2UgPj0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBmdW5fbmFtZSA9IGZ1bl9uYW1lLnN1YnN0cmluZygwLCB3aGl0ZXNwYWNlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdGVzdF9wYWdlLnRlc3Rfb2JqZWN0cy5wdXNoKG5ldyBUZXN0LkFub3RoZXJXYXkuX3Rlc3Rfb2JqZWN0X3QoZnVuX25hbWUpKTsKICAgICAgICAgICAgICAgICAgICBzY3JpcHRfdGV4dCA9IHNjcmlwdF90ZXh0LnN1YnN0cmluZyhmdW5fZW5kLCBzY3JpcHRfdGV4dC5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgIGZ1bl9zdGFydCA9IHNjcmlwdF90ZXh0LmluZGV4T2YoZnVuX3NpZyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7IC8vIG90aGVyd2lzZSAobm90IElFKSBpdCBvdWdodCB0byB3b3JrIGxpa2UgdGhpcwogICAgICAgICAgICBmb3IgKHZhciBpIGluIFRlc3QuQW5vdGhlcldheS5fZ190ZXN0X2lmcmFtZSkgewogICAgICAgICAgICAgICAgLy8gSGFjayB0byBwcmV2ZW50IGZhaWx1cmUgaW4gRkYzLjBiMSAoaW5uZXJXaWR0aC9pbm5lckhlaWdodCkgYW5kIEZGPj0zLjUgKHNlc3Npb25TdG9yYWdlKQogICAgICAgICAgICAgICAgaWYgKGkgPT0gImlubmVyV2lkdGgiIHx8IGkgPT0gImlubmVySGVpZ2h0IiB8fCBpID09ICJzZXNzaW9uU3RvcmFnZSIpIHsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfaWZyYW1lW2ldKSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGkuc3Vic3RyaW5nKDAsIDQpID09ICJ0ZXN0IikgewogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0X3BhZ2UudGVzdF9vYmplY3RzLnB1c2gobmV3IFRlc3QuQW5vdGhlcldheS5fdGVzdF9vYmplY3RfdChpKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgZWxzZSAKICAgICAgICBpZiAodGVzdF9wYWdlLmNvbnZlbnRpb24gPT0gImpzYW4iKSB7CiAgICAgICAgICAgIC8vIHRoZSB0ZXN0IG9iamVjdCBpcyBhbHJlYWR5IGZpbGxlZCB3aXRoIHJlc3VsdHMKICAgICAgICAgICAgdGVzdF9wYWdlLnRlc3Rfb2JqZWN0cy5wdXNoKFRlc3QuQW5vdGhlcldheS5fZ190ZXN0X29iamVjdF9mb3JfanNhbik7CiAgICAgICAgfQogICAgCiAgICBpZiAodGVzdF9wYWdlLnRlc3Rfb2JqZWN0cy5sZW5ndGggPT0gMCkgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fcHJpbnRfcmVzdWx0KHRlc3RfcGFnZS51cmwsICJObyB0ZXN0IGZ1bmN0aW9ucyBkZWZpbmVkIGluIHRoZSBwYWdlIiwgImJhZHRlc3QiLCBudWxsKTsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2xvYWRfbmV4dF9wYWdlKCk7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgCiAgICB0ZXN0X3BhZ2Uud2FpdF9tc2cgPSBUZXN0LkFub3RoZXJXYXkuX3ByaW50X3Jlc3VsdCh0ZXN0X3BhZ2UudXJsLCAicnVubmluZyB0ZXN0cy4uPHNwYW4gY2xhc3M9XCJjb3VudGVyXCI+IiArIHRlc3RfcGFnZS50ZXN0X29iamVjdHMubGVuZ3RoICsgIjwvc3Bhbj4iLCAicnVubmluZyIsIG51bGwpOwogICAgCiAgICB0ZXN0X3BhZ2UudGVzdF9vYmplY3RfaSA9IDA7CiAgICBUZXN0LkFub3RoZXJXYXkuX3J1bl9tb3JlX3Rlc3RzKCk7Cn07CgpUZXN0LkFub3RoZXJXYXkuX2hhbmRsZV9leGNlcHRpb24gPSBmdW5jdGlvbihvLCBlLCB0aXRsZSl7CiAgICB2YXIgcyA9IHRpdGxlICsgIjogIiArIHR5cGVvZihlKSArICI6ICI7CiAgICBpZiAoZS5tZXNzYWdlICE9IG51bGwpIHsKICAgICAgICBzICs9IGUubWVzc2FnZTsKICAgIH0KICAgIGVsc2UgCiAgICAgICAgaWYgKGUuZGVzY3JpcHRpb24gIT0gbnVsbCkgewogICAgICAgICAgICBzICs9IGUuZGVzY3JpcHRpb247CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBzICs9IGUudG9TdHJpbmcoKTsKICAgICAgICB9CiAgICAvLyAgaWYoIGUubG9jYXRpb24hPW51bGwgKSB7ICAvLyBYWFggZmlndXJlIG91dCBob3cgdG8gZGlzcGxheSBleGNlcHRpb24gbG9jYXRpb24gaWYgaXQncyBwcmVzZW50IChsaWtlIGluIG1vemlsbGEpCiAgICAvLyAgICAgIHMrPSIgbG9jYXRpb246ICIrZS5sb2NhdGlvbi50b1N0cmluZygpOwogICAgLy8gIH0KICAgIG8uZXhjZXB0aW9uID0gczsKICAgIHMgPSBbXTsKICAgIGlmIChlLnN0YWNrKSB7CiAgICAgICAgdmFyIGxpbmVzID0gZS5zdGFjay5zcGxpdCgiXG4iKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIC8vIGZvcm1hdCBvZiB0aGUgbGluZTogZnVuY19uYW1lKGFyZ3MpQGZpbGVfbmFtZTpsaW5lX25vCiAgICAgICAgICAgIGlmIChsaW5lc1tpXS5tYXRjaCgvKFx3KilcKChbXlwpXSopXClAKC4qKTooW146XSopJC8pKSB7CiAgICAgICAgICAgICAgICB2YXIgZnVuY19uYW1lID0gUmVnRXhwLiQxOwogICAgICAgICAgICAgICAgaWYgKGZ1bmNfbmFtZS5sZW5ndGggPT0gMCkgewogICAgICAgICAgICAgICAgICAgIGZ1bmNfbmFtZSA9ICI8YW5vbnltb3VzPiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzLnB1c2goImluICIgKyBmdW5jX25hbWUgKyAiKCAiICsgUmVnRXhwLiQyICsgIikgYXQgIiArIFJlZ0V4cC4kMyArICIgbGluZSAiICsgUmVnRXhwLiQ0ICsgIlxuIik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBvLmV4Y2VwdGlvbl9zdGFjayA9IHM7Cn07CgpUZXN0LkFub3RoZXJXYXkuX3J1bl9tb3JlX3Rlc3RzID0gZnVuY3Rpb24oKXsKICAgIHZhciB0ZXN0X3BhZ2UgPSBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdHNfcXVldWVbMF07CiAgICB3aGlsZSAodGVzdF9wYWdlLnRlc3Rfb2JqZWN0X2kgPCB0ZXN0X3BhZ2UudGVzdF9vYmplY3RzLmxlbmd0aCkgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fdXBkYXRlX21zZ19jb3VudGVyKHRlc3RfcGFnZS53YWl0X21zZywgKDEgKyB0ZXN0X3BhZ2UudGVzdF9vYmplY3RfaSkgKyAiLyIgKyB0ZXN0X3BhZ2UudGVzdF9vYmplY3RzLmxlbmd0aCk7CiAgICAgICAgdmFyIG8gPSB0ZXN0X3BhZ2UudGVzdF9vYmplY3RzW3Rlc3RfcGFnZS50ZXN0X29iamVjdF9pXTsKICAgICAgICBpZiAodGVzdF9wYWdlLmNvbnZlbnRpb24gPT0gImFub3RoZXJ3YXkiKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdF9pZnJhbWVbby5uYW1lXShvKTsKICAgICAgICAgICAgfSAKICAgICAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5faGFuZGxlX2V4Y2VwdGlvbihvLCBlLCAiIik7CiAgICAgICAgICAgIH0KICAgICAgICB9IC8vIGZvciAianNhbiIgY29udmVudGlvbiwgdGVzdCBoYXMgcnVuIGFscmVhZHkKICAgICAgICBpZiAoby5kZWxheV9hY3Rpb25zLmxlbmd0aCA+IDAgfHwgby53YWl0X3Jlc3VsdF9taWxsaXNlY29uZHMgPiAwKSB7CiAgICAgICAgICAgIG8uZGVsYXlfdG90YWxfbWlsbGlzZWNvbmRzX2xlZnQgKz0gby53YWl0X3Jlc3VsdF9taWxsaXNlY29uZHM7CiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fZGVsYXlfYWN0aW9uc190aW1lb3V0KCk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgKyt0ZXN0X3BhZ2UudGVzdF9vYmplY3RfaTsKICAgIH0KICAgIFRlc3QuQW5vdGhlcldheS5fdW5wcmludF9yZXN1bHQodGVzdF9wYWdlLndhaXRfbXNnKTsKICAgIFRlc3QuQW5vdGhlcldheS5fcHJpbnRfcmVzdWx0KHRlc3RfcGFnZS51cmwsIG51bGwsIG51bGwsIHRlc3RfcGFnZS50ZXN0X29iamVjdHMpOwogICAgVGVzdC5Bbm90aGVyV2F5Ll9sb2FkX25leHRfcGFnZSgpOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9kZWxheV9hY3Rpb25zX3RpbWVvdXQgPSBmdW5jdGlvbigpewogICAgdmFyIHRlc3RfcGFnZSA9IFRlc3QuQW5vdGhlcldheS5fZ190ZXN0c19xdWV1ZVswXTsKICAgIHZhciB0ZXN0X29iamVjdCA9IHRlc3RfcGFnZS50ZXN0X29iamVjdHNbdGVzdF9wYWdlLnRlc3Rfb2JqZWN0X2ldOwogICAgdmFyIGZpbmlzaGVkID0gdHJ1ZTsKICAgIGlmICh0ZXN0X29iamVjdC5kZWxheV9hY3Rpb25faSA9PSBudWxsKSB7CiAgICAgICAgLy8gc2V0IHVwIHRvIHN0YXJ0IGZpcnN0IGFjdGlvbgogICAgICAgIHRlc3Rfb2JqZWN0LmRlbGF5X2FjdGlvbl9pID0gLTE7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAvLyBwZXJmb3JtIGN1cnJlbnQgYWN0aW9uCiAgICAgICAgdmFyIG1pbGxpc2Vjb25kc19wYXNzZWQgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gdGVzdF9vYmplY3QuZGVsYXlfcHJldl90aW1lcl90aW1lOwogICAgICAgIHRlc3Rfb2JqZWN0LmRlbGF5X2N1cnJlbnRfbWlsbGlzZWNvbmRzX2xlZnQgLT0gbWlsbGlzZWNvbmRzX3Bhc3NlZDsKICAgICAgICB0ZXN0X29iamVjdC5kZWxheV90b3RhbF9taWxsaXNlY29uZHNfbGVmdCAtPSBtaWxsaXNlY29uZHNfcGFzc2VkOwogICAgICAgIGZpbmlzaGVkID0gVGVzdC5Bbm90aGVyV2F5Ll9kZWxheV9jb250aW51ZV9hY3Rpb24odGVzdF9vYmplY3QsIG1pbGxpc2Vjb25kc19wYXNzZWQpOwogICAgfQogICAgd2hpbGUgKGZpbmlzaGVkICYmIHRlc3Rfb2JqZWN0LmRlbGF5X2FjdGlvbl9pIDwgdGVzdF9vYmplY3QuZGVsYXlfYWN0aW9ucy5sZW5ndGgpIHsKICAgICAgICArK3Rlc3Rfb2JqZWN0LmRlbGF5X2FjdGlvbl9pOyAvLyBzdGFydCBuZXh0IGFjdGlvbgogICAgICAgIGZpbmlzaGVkID0gVGVzdC5Bbm90aGVyV2F5Ll9kZWxheV9zdGFydF9hY3Rpb24odGVzdF9vYmplY3QpOwogICAgfQogICAgaWYgKHRlc3Rfb2JqZWN0LmRlbGF5X2FjdGlvbl9pIDw9IHRlc3Rfb2JqZWN0LmRlbGF5X2FjdGlvbnMubGVuZ3RoKSB7IC8vIGFueSBtb3JlIGFjdGlvbnMgbGVmdCA/CiAgICAgICAgdGVzdF9vYmplY3QuZGVsYXlfcHJldl90aW1lcl90aW1lID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsKICAgICAgICB2YXIgbmV4dF90aW1lb3V0ID0gVGVzdC5Bbm90aGVyV2F5Ll9nX3RpbWVvdXRfZ3JhbnVsYXJpdHk7CiAgICAgICAgaWYgKHRlc3Rfb2JqZWN0LmRlbGF5X2N1cnJlbnRfbWlsbGlzZWNvbmRzX2xlZnQgPCBuZXh0X3RpbWVvdXQpIHsKICAgICAgICAgICAgbmV4dF90aW1lb3V0ID0gdGVzdF9vYmplY3QuZGVsYXlfY3VycmVudF9taWxsaXNlY29uZHNfbGVmdDsKICAgICAgICB9CiAgICAgICAgaWYgKHRlc3Rfb2JqZWN0LnNlY29uZF93YWl0X21zZyAhPSBudWxsKSB7CiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fdXBkYXRlX21zZ19jb3VudGVyKHRlc3Rfb2JqZWN0LnNlY29uZF93YWl0X21zZywgKHRlc3Rfb2JqZWN0LmRlbGF5X3RvdGFsX21pbGxpc2Vjb25kc19sZWZ0IC8gMTAwMCkudG9GaXhlZCgpKTsKICAgICAgICB9CiAgICAgICAgc2V0VGltZW91dChUZXN0LkFub3RoZXJXYXkuX2RlbGF5X2FjdGlvbnNfdGltZW91dCwgbmV4dF90aW1lb3V0KTsKICAgIH0KICAgIGVsc2UgeyAvLyBubyBtb3JlIGFjdGlvbnMgbGVmdC4gcnVuIHRoZSBuZXh0IHRlc3QuCiAgICAgICAgaWYgKHRlc3Rfb2JqZWN0LnNlY29uZF93YWl0X21zZyAhPSBudWxsKSB7CiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fdW5wcmludF9yZXN1bHQodGVzdF9vYmplY3Quc2Vjb25kX3dhaXRfbXNnKTsKICAgICAgICAgICAgdGVzdF9vYmplY3Quc2Vjb25kX3dhaXRfbXNnID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgKyt0ZXN0X3BhZ2UudGVzdF9vYmplY3RfaTsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3J1bl9tb3JlX3Rlc3RzKCk7CiAgICB9Cn07CgpUZXN0LkFub3RoZXJXYXkuX2RlbGF5X3N0YXJ0X2FjdGlvbiA9IGZ1bmN0aW9uKHRlc3Rfb2JqZWN0KXsKICAgIHZhciBmaW5pc2hlZCA9IGZhbHNlOwogICAgdmFyIHdhaXRfbXNnID0gIiI7CiAgICBpZiAodGVzdF9vYmplY3QuZGVsYXlfYWN0aW9uX2kgPT0gdGVzdF9vYmplY3QuZGVsYXlfYWN0aW9ucy5sZW5ndGgpIHsKICAgICAgICBpZiAodGVzdF9vYmplY3Qud2FpdF9yZXN1bHRfbWlsbGlzZWNvbmRzID4gMCkgewogICAgICAgICAgICB0ZXN0X29iamVjdC5kZWxheV9jdXJyZW50X21pbGxpc2Vjb25kc19sZWZ0ID0gdGVzdF9vYmplY3Qud2FpdF9yZXN1bHRfbWlsbGlzZWNvbmRzOyAvLyB3YWl0IGZvciByZXN1bHQKICAgICAgICAgICAgd2FpdF9tc2cgPSAid2FpdGluZyBmb3IgcmVzdWx0cy4uIjsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICsrdGVzdF9vYmplY3QuZGVsYXlfYWN0aW9uX2k7IC8vIGRvbnQgd2FpdCBmb3IgcmVzdWx0CiAgICAgICAgfQogICAgfQogICAgZWxzZSB7CiAgICAgICAgdmFyIGFjdGlvbiA9IHRlc3Rfb2JqZWN0LmRlbGF5X2FjdGlvbnNbdGVzdF9vYmplY3QuZGVsYXlfYWN0aW9uX2ldOwogICAgICAgIGlmIChhY3Rpb24uYWN0aW9uX2tpbmQgPT0gImNhbGwiKSB7CiAgICAgICAgICAgIHRlc3Rfb2JqZWN0LmRlbGF5X2N1cnJlbnRfbWlsbGlzZWNvbmRzX2xlZnQgPSBhY3Rpb24uY2FsbF9kZWxheV9taWxsaXNlY29uZHM7CiAgICAgICAgICAgIHdhaXRfbXNnID0gInBlcmZvcm1pbmcgZGVsYXllZCBjYWxscy4uIjsKICAgICAgICB9CiAgICAgICAgZWxzZSAKICAgICAgICAgICAgaWYgKGFjdGlvbi5hY3Rpb25fa2luZCA9PSAid2luZG93IikgewogICAgICAgICAgICAgICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ19vcGVyYV9wYXRoX2NvcnJlY3Rpb24gIT0gbnVsbCAmJiBhY3Rpb24ud25kX3VybC5pbmRleE9mKCI6IikgPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICBhY3Rpb24ud25kX3VybCA9IFRlc3QuQW5vdGhlcldheS5fZ19vcGVyYV9wYXRoX2NvcnJlY3Rpb24gKyBhY3Rpb24ud25kX3VybDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGFjdGlvbi53bmRfd25kID0gd2luZG93Lm9wZW4oYWN0aW9uLnduZF91cmwsICJfYmxhbmsiKTsKICAgICAgICAgICAgICAgIGlmIChhY3Rpb24ud25kX3duZCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgZmluaXNoZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIHRlc3Rfb2JqZWN0LmZhaWwoInVuYWJsZSB0byBvcGVuIHdpbmRvdyBmb3IgIiArIGFjdGlvbi53bmRfdXJsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRlc3Rfb2JqZWN0LmRlbGF5X2N1cnJlbnRfbWlsbGlzZWNvbmRzX2xlZnQgPSBhY3Rpb24ud25kX3RpbWVvdXRfbWlsbGlzZWNvbmRzOwogICAgICAgICAgICAgICAgICAgIHdhaXRfbXNnID0gIm9wZW5pbmcgd2luZG93Li4iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLmFjdGlvbl9raW5kID09ICJyZXBsYXkiKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5yZXBsYXlfZXZlbnRzLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5yZXBsYXlfZXZlbnRfaSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3Rfb2JqZWN0LmRlbGF5X2N1cnJlbnRfbWlsbGlzZWNvbmRzX2xlZnQgPSBhY3Rpb24ucmVwbGF5X2V2ZW50c1swXVsidGltZSJdOwogICAgICAgICAgICAgICAgICAgICAgICB3YWl0X21zZyA9ICJyZXBsYXlpbmcgZXZlbnRzLi4iOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgIH0KICAgIGlmICh0ZXN0X29iamVjdC5zZWNvbmRfd2FpdF9tc2cgIT0gbnVsbCkgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fdW5wcmludF9yZXN1bHQodGVzdF9vYmplY3Quc2Vjb25kX3dhaXRfbXNnKTsKICAgIH0KICAgIGlmICh3YWl0X21zZyAhPSAiIikgewogICAgICAgIHZhciB0ZXN0X3BhZ2UgPSBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdHNfcXVldWVbMF07CiAgICAgICAgdGVzdF9vYmplY3Quc2Vjb25kX3dhaXRfbXNnID0gVGVzdC5Bbm90aGVyV2F5Ll9wcmludF9jb3VudGVyX3Jlc3VsdCh0ZXN0X3BhZ2UudXJsLCB3YWl0X21zZywgdGVzdF9vYmplY3QuZGVsYXlfdG90YWxfbWlsbGlzZWNvbmRzX2xlZnQsICJ3YWl0aW5nIik7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICB0ZXN0X29iamVjdC5zZWNvbmRfd2FpdF9tc2cgPSBudWxsOwogICAgfQogICAgcmV0dXJuIGZpbmlzaGVkOwp9OwpUZXN0LkFub3RoZXJXYXkuX2RlbGF5X2NvbnRpbnVlX2FjdGlvbiA9IGZ1bmN0aW9uKHRlc3Rfb2JqZWN0LCBtaWxsaXNlY29uZHNfcGFzc2VkKXsKICAgIHZhciBmaW5pc2hlZCA9IHRlc3Rfb2JqZWN0LmRlbGF5X2N1cnJlbnRfbWlsbGlzZWNvbmRzX2xlZnQgPD0gMDsKICAgIGlmICh0ZXN0X29iamVjdC5kZWxheV9hY3Rpb25faSA9PSB0ZXN0X29iamVjdC5kZWxheV9hY3Rpb25zLmxlbmd0aCkgeyAvLyBhY3Rpb24gaXMgIndhaXRpbmcgZm9yIHJlc3VsdHMiCiAgICAgICAgaWYgKHRlc3Rfb2JqZWN0Lm5fcGxhbiAhPSBudWxsICYmIHRlc3Rfb2JqZWN0Lm5fcGxhbiA9PSB0ZXN0X29iamVjdC5uX29rICsgdGVzdF9vYmplY3Qubl9mYWlsKSB7CiAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTsgLy8gaWYgYWxsIGFzc2VydGlvbnMgcmVzdWx0cyBhcmUgcmVjb3JkZWQsIGRvbid0IHdhaXQgYW55IG1vcmUKICAgICAgICB9CiAgICAgICAgaWYgKGZpbmlzaGVkKSB7CiAgICAgICAgICAgICsrdGVzdF9vYmplY3QuZGVsYXlfYWN0aW9uX2k7IC8vIG1vdmUgb24gdG8gdGhlIG5leHQgdGVzdAogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIHZhciBhY3Rpb24gPSB0ZXN0X29iamVjdC5kZWxheV9hY3Rpb25zW3Rlc3Rfb2JqZWN0LmRlbGF5X2FjdGlvbl9pXTsKICAgICAgICBpZiAoYWN0aW9uLmFjdGlvbl9raW5kID09ICJjYWxsIikgewogICAgICAgICAgICBpZiAoZmluaXNoZWQpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmNhbGxfZm4oKTsKICAgICAgICAgICAgICAgIH0gCiAgICAgICAgICAgICAgICBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5faGFuZGxlX2V4Y2VwdGlvbih0ZXN0X29iamVjdCwgZSwgImluIGRlbGF5X2NhbGwiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIAogICAgICAgICAgICBpZiAoYWN0aW9uLmFjdGlvbl9raW5kID09ICJ3aW5kb3ciKSB7CiAgICAgICAgICAgICAgICB0ZXN0X29iamVjdC5kZWxheV90b3RhbF9taWxsaXNlY29uZHNfbGVmdCArPSBtaWxsaXNlY29uZHNfcGFzc2VkOyAvLyBmb3IgIndpbmRvdyIsIHRoZSBjb3VudGRvd24gaXMgc3VzcGVuZGVkIHNpbmNlIGl0J3MgdW5rbm93biBob3cgbG9uZyBpdCB3aWxsIHRha2UKICAgICAgICAgICAgICAgIGlmIChUZXN0LkFub3RoZXJXYXkuX2lzX3VybF9sb2FkZWQoYWN0aW9uLnduZF91cmwsIGFjdGlvbi53bmRfd25kKSkgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi53bmRfZm4oYWN0aW9uLnduZF93bmQpOwogICAgICAgICAgICAgICAgICAgIH0gCiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9oYW5kbGVfZXhjZXB0aW9uKHRlc3Rfb2JqZWN0LCBlLCAiaW4gb3Blbl93aW5kb3cgZnVuY3Rpb24gY2FsbCIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgIGlmIChmaW5pc2hlZCkgewogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0X29iamVjdC5mYWlsKCJ1bmFibGUgdG8gb3BlbiB3aW5kb3cgZm9yIHVybCAnIiArIGFjdGlvbi53bmRfdXJsICsgIicuIHRpbWVvdXQgZXhwaXJlZCIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5hY3Rpb25fa2luZCA9PSAicmVwbGF5IikgewogICAgICAgICAgICAgICAgICAgIGlmIChmaW5pc2hlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9kZWxheV9yZXBsYXlfZXZlbnQodGVzdF9vYmplY3QsIGFjdGlvbi5yZXBsYXlfd25kLCBhY3Rpb24ucmVwbGF5X2V2ZW50c1thY3Rpb24ucmVwbGF5X2V2ZW50X2ldLCBhY3Rpb24ucmVwbGF5X2NoZWNrcG9pbnRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgIH1jYXRjaCggZSApIHsgLy8gZGlzYWJsZWQsIHVudGlsIEkga25vdyBob3cgdG8gZ2VsIGxvY2F0aW9uIGluZm8gZnJvbSBhbiBleGNlcHRpb24KICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2hhbmRsZV9leGNlcHRpb24oIHRlc3Rfb2JqZWN0LCBlLCAid2hpbGUgcmVwbGF5aW5nIGV2ZW50IiApOwogICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICArK2FjdGlvbi5yZXBsYXlfZXZlbnRfaTsKICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoZWQgPSBhY3Rpb24ucmVwbGF5X2V2ZW50X2kgPT0gYWN0aW9uLnJlcGxheV9ldmVudHMubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbmlzaGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0X29iamVjdC5kZWxheV9jdXJyZW50X21pbGxpc2Vjb25kc19sZWZ0ID0gYWN0aW9uLnJlcGxheV9ldmVudHNbYWN0aW9uLnJlcGxheV9ldmVudF9pXVsidGltZSJdOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGZpbmlzaGVkOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9kZWxheV9yZXBsYXlfZXZlbnQgPSBmdW5jdGlvbih0ZXN0X29iamVjdCwgd25kLCBldmVudCwgY2hlY2twb2ludHMpewogICAgaWYgKGV2ZW50LnR5cGUgPT0gIl9jaGVja3BvaW50IikgewogICAgICAgIHZhciBjaGVja3BvaW50X24gPSBldmVudC53aGljaDsKICAgICAgICB2YXIgcHJldl9uX2ZhaWwgPSB0ZXN0X29iamVjdC5uX2ZhaWw7CiAgICAgICAgY2hlY2twb2ludHNbY2hlY2twb2ludF9uXSh0ZXN0X29iamVjdCwgd25kKTsKICAgICAgICB2YXIgZmxhc2hfY29sb3IgPSBwcmV2X25fZmFpbCA9PSB0ZXN0X29iamVjdC5uX2ZhaWwgPyAiIzJmMiIgOiAiI2YyMiI7CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfZmxhc2hfYm9yZGVyKGZsYXNoX2NvbG9yKTsKICAgIH0KICAgIGVsc2UgCiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT0gImNsaWNrIiB8fCBldmVudC50eXBlID09ICJtb3VzZW92ZXIiIHx8IGV2ZW50LnR5cGUgPT0gIm1vdXNlb3V0IiB8fCBldmVudC50eXBlID09ICJtb3VzZW1vdmUiIHx8IGV2ZW50LnR5cGUgPT0gIm1vdXNlZG93biIgfHwgZXZlbnQudHlwZSA9PSAibW91c2V1cCIpIHsKICAgICAgICAgICAgdmFyIHRhcmdldCA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX25vZGVfcGF0aF90b19ub2RlKGV2ZW50WyJ0YXJnZXQiXSwgd25kLmRvY3VtZW50KTsKICAgICAgICAgICAgaWYgKHRhcmdldCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX3VwZGF0ZV9oaWdobGlnaHQodGFyZ2V0LCAiYmFsbCIsIGV2ZW50KTsKICAgICAgICAgICAgICAgIHZhciBlID0gd25kLmRvY3VtZW50LmNyZWF0ZUV2ZW50KCJNb3VzZUV2ZW50cyIpOwogICAgICAgICAgICAgICAgdmFyIHJlbGF0ZWRfdGFyZ2V0ID0gVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfbm9kZV9wYXRoX3RvX25vZGUoZXZlbnRbInJlbGF0ZWRUYXJnZXQiXSwgd25kLmRvY3VtZW50KTsKICAgICAgICAgICAgICAgIGUuaW5pdE1vdXNlRXZlbnQoZXZlbnRbInR5cGUiXSwgZXZlbnRbImNhbmNlbGFibGUiXSwgZXZlbnRbImJ1YmJsZXMiXSwgd25kLmRvY3VtZW50LmRlZmF1bHRWaWV3LCBldmVudFsiZGV0YWlsIl0sIGV2ZW50WyJzY3JlZW5YIl0sIGV2ZW50WyJzY3JlZW5ZIl0sIGV2ZW50WyJjbGllbnRYIl0sIGV2ZW50WyJjbGllbnRZIl0sIGV2ZW50WyJjdHJsS2V5Il0sIGV2ZW50WyJhbHRLZXkiXSwgZXZlbnRbInNoaWZ0S2V5Il0sIGV2ZW50WyJtZXRhS2V5Il0sIGV2ZW50WyJidXR0b24iXSwgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfbm9kZV9wYXRoX3RvX25vZGUoZXZlbnRbInJlbGF0ZWRUYXJnZXQiXSwgd25kLmRvY3VtZW50KSk7CiAgICAgICAgICAgICAgICAvLyBGaXJlZm94IDEuMC42IHNvbWVob3cgbG9zZXMgcmVsYXRlZFRhcmdldCBzb21ld2hlcmUgb24gdGhlIHdheS4gUGFzcyB0aHJvdWdoIG91ciBvd24sIGZvciB0aG9zZSB3aG8gY2hvb3NlIHRvIGNhcmUuCiAgICAgICAgICAgICAgICBlLnBhc3NUaHJvdWdoUmVsYXRlZFRhcmdldCA9IHJlbGF0ZWRfdGFyZ2V0OwogICAgICAgICAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSAKICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT0gImtleXVwIiB8fCBldmVudC50eXBlID09ICJrZXlkb3duIiB8fCBldmVudC50eXBlID09ICJrZXlwcmVzcyIpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gd25kLmRvY3VtZW50LmNyZWF0ZUV2ZW50KCJLZXlib2FyZEV2ZW50cyIpOyAvLyBmb3JnZXQgaXQuIEFwcGFyZW50bHkgaXQncyBub3Qgc3VwcG9ydGVkIG5laXRoZXIgYnkgbW96aWxsYSBub3IgYnkgb3BlcmEuCiAgICAgICAgICAgICAgICBlLmluaXRLZXlib2FyZEV2ZW50KGV2ZW50WyJ0eXBlIl0sIGV2ZW50WyJjYW5jZWxhYmxlIl0sIGV2ZW50WyJidWJibGVzIl0sIHduZC5kb2N1bWVudC5kZWZhdWx0VmlldywgZXZlbnRbIndoaWNoIl0sIGV2ZW50WyJ3aGljaCJdLCBldmVudFsiY3RybEtleSJdLCBldmVudFsiYWx0S2V5Il0sIGV2ZW50WyJzaGlmdEtleSJdLCBldmVudFsibWV0YUtleSJdLCBmYWxzZSk7CiAgICAgICAgICAgICAgICB3bmQuZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChlKTsKICAgICAgICAgICAgfQp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9wcmludF9jb3VudGVyX3Jlc3VsdCA9IGZ1bmN0aW9uKHVybCwgbXNnLCBtaWxsaXNlY29uZHMsIHN0eWxlKXsKICAgIHJldHVybiBUZXN0LkFub3RoZXJXYXkuX3ByaW50X3Jlc3VsdCh1cmwsIG1zZyArICI8c3BhbiBjbGFzcz1cImNvdW50ZXJcIj4iICsgKG1pbGxpc2Vjb25kcyAvIDEwMDApLnRvRml4ZWQoKSArICI8L3NwYW4+Iiwgc3R5bGUsIG51bGwpOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9nX3Jlc3VsdF9jb3VudCA9IDA7IC8vIGZvciBhc3NpZ25pbmcgdW5pcXVlIGlkcyB0byByZXN1bHQgcGFyYWdyYXBocwovLyBudW1iZXIgb2YgcGFnZXMgdGVzdGVkClRlc3QuQW5vdGhlcldheS5fZ19va19wYWdlcyA9IDA7ClRlc3QuQW5vdGhlcldheS5fZ19mYWlsX3BhZ2VzID0gMDsKClRlc3QuQW5vdGhlcldheS5fcHJpbnRfcmVzdWx0ID0gZnVuY3Rpb24odXJsLCBtc2csIHN0eWxlLCB0ZXN0X29iamVjdHMpewogICAgdmFyIHJlc3VsdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicmVzdWx0cyIpOwogICAgdmFyIHIgPSByZXN1bHRzLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInAiKSk7CiAgICByLmlkID0gInJlc3VsdCIgKyBUZXN0LkFub3RoZXJXYXkuX2dfcmVzdWx0X2NvdW50OwogICAgKytUZXN0LkFub3RoZXJXYXkuX2dfcmVzdWx0X2NvdW50OwogICAgci5vbmNsaWNrID0gVGVzdC5Bbm90aGVyV2F5Ll90b2dnbGVfZGV0YWlsOwogICAgdmFyIHRleHQgPSAiPHNwYW4gY2xhc3M9XCJidWxsZXRcIj4mbmJzcDsmbmJzcDsmbmJzcDs8L3NwYW4+Jm5ic3A7IjsKICAgIGlmICh1cmwgIT0gIiIpIHsKICAgICAgICB0ZXh0ICs9IHVybCArICI6ICAiOwogICAgfQogICAgaWYgKG1zZyAhPSBudWxsKSB7CiAgICAgICAgdGV4dCArPSBtc2c7CiAgICB9CiAgICBpZiAodGVzdF9vYmplY3RzICE9IG51bGwpIHsKICAgICAgICAvLyBjb21wb3NlIHN1bW1hcnkgYW5kIGRldGFpbCB0ZXh0cwogICAgICAgIHZhciB0b3RhbF9vayA9IDA7CiAgICAgICAgdmFyIHRvdGFsX2RldGFpbF9vayA9IDA7CiAgICAgICAgdmFyIHRvdGFsX2ZhaWwgPSAwOwogICAgICAgIHZhciB0b3RhbF9kZXRhaWxfZmFpbCA9IDA7CiAgICAgICAgdmFyIG5vX3BsYW4gPSAwOwogICAgICAgIAogICAgICAgIHZhciBkZXRhaWwgPSByZXN1bHRzLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpKTsKICAgICAgICAKICAgICAgICBpZiAoci5pZC5tYXRjaCgvXnJlc3VsdChcZCspJC8pKSB7CiAgICAgICAgICAgIGRldGFpbC5pZCA9ICJyZXN1bHRfZGV0YWlsIiArIFJlZ0V4cC4kMTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXN0X29iamVjdHMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgdmFyIG8gPSB0ZXN0X29iamVjdHNbaV07CiAgICAgICAgICAgIHZhciBwOwogICAgICAgICAgICB2YXIgcF90ZXh0OwogICAgICAgICAgICBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiUCIpOwogICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3NldF9jc3NfY2xhc3MocCwgInJlc3VsdF9kZXRhaWwiKTsKICAgICAgICAgICAgcF90ZXh0ID0gby5uYW1lOwogICAgICAgICAgICBpZiAoby5uX2ZhaWwgPiAwIHx8IG8uZXhjZXB0aW9uIHx8IChvLm5fcGxhbiAhPSBudWxsICYmIG8ubl9wbGFuICE9IG8ubl9vayArIG8ubl9mYWlsKSB8fCAoby5uX3BsYW4gPT0gbnVsbCAmJiBvLm5fb2sgPT0gMCAmJiBvLm5fZmFpbCA9PSAwKSkgewogICAgICAgICAgICAgICAgKyt0b3RhbF9mYWlsOwogICAgICAgICAgICAgICAgcF90ZXh0ICs9ICIgPHNwYW4gY2xhc3M9XCJmYWlsXCI+IjsKICAgICAgICAgICAgICAgIGlmIChvLm5fcGxhbiAhPSBudWxsICYmIG8ubl9wbGFuICE9IG8ubl9vayArIG8ubl9mYWlsKSB7CiAgICAgICAgICAgICAgICAgICAgcF90ZXh0ICs9ICJwbGFubmVkICIgKyBvLm5fcGxhbiArICIgYXNzZXJ0aW9ucyBidXQgZ290ICIgKyAoby5uX29rICsgby5uX2ZhaWwpICsgIjsgIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChvLm5fcGxhbiA9PSBudWxsICYmIG8ubl9vayA9PSAwICYmIG8ubl9mYWlsID09IDApIHsKICAgICAgICAgICAgICAgICAgICBwX3RleHQgKz0gInRlc3QgZGlkIG5vdCBvdXRwdXQgYW55dGhpbmciOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcF90ZXh0ICs9ICIgZmFpbCAiICsgby5uX2ZhaWw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwX3RleHQgKz0gIjwvc3Bhbj4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgKyt0b3RhbF9vazsKICAgICAgICAgICAgfQogICAgICAgICAgICBwX3RleHQgKz0gIiBvayAiICsgby5uX29rOwogICAgICAgICAgICBpZiAoby5uX3BsYW4gPT0gbnVsbCkgewogICAgICAgICAgICAgICAgbm9fcGxhbiA9IDE7CiAgICAgICAgICAgICAgICBwX3RleHQgKz0gIiA8c3BhbiBjbGFzcz1cIndhcm5pbmdcIj5ubyBwbGFuPC9zcGFuPiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcC5pbm5lckhUTUwgPSBwX3RleHQ7CiAgICAgICAgICAgIGRldGFpbC5hcHBlbmRDaGlsZChwKTsKICAgICAgICAgICAgaWYgKG8uZXhjZXB0aW9uKSB7CiAgICAgICAgICAgICAgICBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiUCIpOwogICAgICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9zZXRfY3NzX2NsYXNzKHAsICJyZXN1bHRfZXhjZXB0aW9uX2RldGFpbCIpOwogICAgICAgICAgICAgICAgcC5pbm5lckhUTUwgPSAiPHNwYW4gY2xhc3M9XCJmYWlsXCI+ZXhjZXB0aW9uOjwvc3Bhbj4gIiArIG8uZXhjZXB0aW9uOwogICAgICAgICAgICAgICAgZGV0YWlsLmFwcGVuZENoaWxkKHApOwogICAgICAgICAgICAgICAgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIlAiKTsKICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fc2V0X2Nzc19jbGFzcyhwLCAicmVzdWx0X2V4Y2VwdGlvbl9zdGFja19kZXRhaWwiKTsKICAgICAgICAgICAgICAgIHAuaW5uZXJIVE1MID0gby5leGNlcHRpb25fc3RhY2suam9pbigiPGJyLz4iKTsKICAgICAgICAgICAgICAgIGRldGFpbC5hcHBlbmRDaGlsZChwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgby5hc3NlcnRpb25zLmxlbmd0aDsgKytpaSkgewogICAgICAgICAgICAgICAgdmFyIG9vID0gby5hc3NlcnRpb25zW2lpXTsKICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSBvby5vayA/ICJvayIgOiAiPHNwYW4gY2xhc3M9XCJmYWlsXCI+ZmFpbDwvc3Bhbj4iOwogICAgICAgICAgICAgICAgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIlAiKTsKICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fc2V0X2Nzc19jbGFzcyhwLCAicmVzdWx0X21pY3JvX2RldGFpbCIpOwogICAgICAgICAgICAgICAgcC5pbm5lckhUTUwgPSBzdGF0dXM7CiAgICAgICAgICAgICAgICBwLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCIgIiArIG9vLm5hbWUpKTsKICAgICAgICAgICAgICAgIGRldGFpbC5hcHBlbmRDaGlsZChwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0b3RhbF9kZXRhaWxfb2sgKz0gby5uX29rOwogICAgICAgICAgICB0b3RhbF9kZXRhaWxfZmFpbCArPSBvLm5fZmFpbDsKICAgICAgICB9CiAgICAgICAgaWYgKHRvdGFsX2ZhaWwgfHwgdG90YWxfZGV0YWlsX2ZhaWwpIHsKICAgICAgICAgICAgdGV4dCArPSAiIGZhaWwgIiArIHRvdGFsX2ZhaWw7CiAgICAgICAgfQogICAgICAgIHRleHQgKz0gIiBvayAiICsgdG90YWxfb2sgKyAiIChkZXRhaWxlZDoiOwogICAgICAgIGlmICh0b3RhbF9mYWlsIHx8IHRvdGFsX2RldGFpbF9mYWlsKSB7CiAgICAgICAgICAgIHRleHQgKz0gIiBmYWlsICIgKyB0b3RhbF9kZXRhaWxfZmFpbDsKICAgICAgICB9CiAgICAgICAgdGV4dCArPSAiIG9rICIgKyB0b3RhbF9kZXRhaWxfb2sgKyAiKSI7CiAgICAgICAgaWYgKG5vX3BsYW4pIHsKICAgICAgICAgICAgdGV4dCArPSAiIDxzcGFuIGNsYXNzPVwid2FybmluZ1wiPm5vIHBsYW48L3NwYW4+IjsKICAgICAgICB9CiAgICAgICAgc3R5bGUgPSB0b3RhbF9mYWlsID09IDAgPyAib2siIDogImZhaWwiOwogICAgICAgIGRldGFpbC5zdHlsZS5kaXNwbGF5ID0gc3R5bGUgPT0gImZhaWwiID8gImJsb2NrIiA6ICJub25lIjsKICAgICAgICBkZXRhaWwuc3R5bGUuY3Vyc29yID0gInRleHQiOwogICAgfQogICAgaWYgKHN0eWxlICE9IG51bGwpIHsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3NldF9jc3NfY2xhc3Mociwgc3R5bGUpOwogICAgICAgIGlmIChzdHlsZSA9PSAib2siKSB7CiAgICAgICAgICAgICsrVGVzdC5Bbm90aGVyV2F5Ll9nX29rX3BhZ2VzOwogICAgICAgIH0KICAgICAgICBlbHNlIAogICAgICAgICAgICBpZiAoc3R5bGUgPT0gImZhaWwiIHx8IHN0eWxlID09ICJiYWR0ZXN0IikgewogICAgICAgICAgICAgICAgKytUZXN0LkFub3RoZXJXYXkuX2dfZmFpbF9wYWdlczsKICAgICAgICAgICAgfQogICAgICAgIHZhciBwYWdlc190b3RhbCA9ICIiOwogICAgICAgIGlmIChUZXN0LkFub3RoZXJXYXkuX2dfZmFpbF9wYWdlcyA+IDApIHsKICAgICAgICAgICAgcGFnZXNfdG90YWwgKz0gIiBmYWlsICIgKyBUZXN0LkFub3RoZXJXYXkuX2dfZmFpbF9wYWdlczsKICAgICAgICB9CiAgICAgICAgcGFnZXNfdG90YWwgKz0gIiBvayAiICsgVGVzdC5Bbm90aGVyV2F5Ll9nX29rX3BhZ2VzOwogICAgICAgIAogICAgICAgIC8vIGFsc28gY291bnQgb3V0IHRoZSB0b3RhbCBudW1iZXIgb2YgdGVzdHMgaW4gZmFpbCBhbmQgb2sKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX29wZW5sYXllcnNfc3VtX3RvdGFsX2RldGFpbF9vayAgPSBUZXN0LkFub3RoZXJXYXkuX29wZW5sYXllcnNfc3VtX3RvdGFsX2RldGFpbF9vayB8fCAwOwogICAgICAgIFRlc3QuQW5vdGhlcldheS5fb3BlbmxheWVyc19zdW1fdG90YWxfZGV0YWlsX29rICs9ICh0b3RhbF9kZXRhaWxfb2t8fDApOwogICAgICAgIAogICAgICAgIFRlc3QuQW5vdGhlcldheS5fb3BlbmxheWVyc19zdW1fdG90YWxfZGV0YWlsX2ZhaWwgID0gVGVzdC5Bbm90aGVyV2F5Ll9vcGVubGF5ZXJzX3N1bV90b3RhbF9kZXRhaWxfZmFpbCB8fCAwOwogICAgICAgIFRlc3QuQW5vdGhlcldheS5fb3BlbmxheWVyc19zdW1fdG90YWxfZGV0YWlsX2ZhaWwgKz0gKHRvdGFsX2RldGFpbF9mYWlsfHwwKTsKICAgICAgICAKICAgICAgICBwYWdlc190b3RhbCs9IiAoZGV0YWlsZWQ6IGZhaWwgIiArIFRlc3QuQW5vdGhlcldheS5fb3BlbmxheWVyc19zdW1fdG90YWxfZGV0YWlsX2ZhaWwgKyAiIHwgb2sgIiArIFRlc3QuQW5vdGhlcldheS5fb3BlbmxheWVyc19zdW1fdG90YWxfZGV0YWlsX29rICsgIikiOwogICAgICAgIAogICAgICAgIFRlc3QuQW5vdGhlcldheS5fdXBkYXRlX3Jlc3VsdHNfdG90YWwocGFnZXNfdG90YWwpOwogICAgfQogICAgci5pbm5lckhUTUwgPSB0ZXh0OwogICAgaWYgKHJlc3VsdHMuc2Nyb2xsSGVpZ2h0ICE9IG51bGwgJiYgcmVzdWx0cy5zY3JvbGxUb3AgIT0gbnVsbCAmJiByZXN1bHRzLm9mZnNldEhlaWdodCAhPSBudWxsKSB7CiAgICAgICAgcmVzdWx0cy5zY3JvbGxUb3AgPSByZXN1bHRzLnNjcm9sbEhlaWdodCAtIHJlc3VsdHMub2Zmc2V0SGVpZ2h0OwogICAgfQogICAgLy8gd2hlbiB0ZXN0X29iamVjdHMgaXMgbm90IG51bGwsIHRoZSByZXN1bHRzIGFyZSBmaW5hbCAtIGdvb2QgdGltZSB0byBjbGVhbiB1cAogICAgaWYgKHRlc3Rfb2JqZWN0cyAhPSBudWxsKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXN0X29iamVjdHMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSB0ZXN0X29iamVjdHNbaV0uZGVsYXlfYWN0aW9uczsKICAgICAgICAgICAgZm9yICh2YXIgYWN0aW9uX2kgPSAwOyBhY3Rpb25faSA8IGFjdGlvbnMubGVuZ3RoOyArK2FjdGlvbl9pKSB7CiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gYWN0aW9uc1thY3Rpb25faV07CiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLmFjdGlvbl9raW5kID09ICJ3aW5kb3ciICYmIGFjdGlvbi53bmRfd25kICE9IG51bGwgJiYgIWFjdGlvbi53bmRfbm9fY2xvc2UpIHsKICAgICAgICAgICAgICAgICAgICBhY3Rpb24ud25kX3duZC5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgIGFjdGlvbi53bmRfd25kID0gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiByOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll91bnByaW50X3Jlc3VsdCA9IGZ1bmN0aW9uKGNoaWxkKXsKICAgIHZhciByZXN1bHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJlc3VsdHMiKTsKICAgIHJlc3VsdHMucmVtb3ZlQ2hpbGQoY2hpbGQpOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll90b2dnbGVfZGV0YWlsID0gZnVuY3Rpb24oKXsKICAgIGlmICh0aGlzLmlkLm1hdGNoKC9ecmVzdWx0KFxkKykkLykpIHsKICAgICAgICB2YXIgZGV0YWlsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJlc3VsdF9kZXRhaWwiICsgUmVnRXhwLiQxKTsKICAgICAgICBpZiAoZGV0YWlsICE9IG51bGwpIHsKICAgICAgICAgICAgaWYgKGRldGFpbC5zdHlsZS5kaXNwbGF5ID09ICJub25lIikgewogICAgICAgICAgICAgICAgZGV0YWlsLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICBpZiAoZGV0YWlsLnN0eWxlLmRpc3BsYXkgPT0gImJsb2NrIikgewogICAgICAgICAgICAgICAgICAgIGRldGFpbC5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfTsKClRlc3QuQW5vdGhlcldheS5fdXBkYXRlX21zZ19jb3VudGVyID0gZnVuY3Rpb24obXNnLCB0ZXh0KXsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmNoaWxkTm9kZXMubGVuZ3RoOyArK2kpIHsKICAgICAgICB2YXIgaXRlbSA9IG1zZy5jaGlsZE5vZGVzW2ldOwogICAgICAgIGlmIChpdGVtLm5vZGVOYW1lID09ICJTUEFOIiAmJiBUZXN0LkFub3RoZXJXYXkuX2dldF9jc3NfY2xhc3MoaXRlbSkgPT0gImNvdW50ZXIiKSB7CiAgICAgICAgICAgIGl0ZW0uaW5uZXJIVE1MID0gdGV4dDsKICAgICAgICB9CiAgICB9Cn07CgpUZXN0LkFub3RoZXJXYXkuX3VwZGF0ZV9yZXN1bHRzX3RvdGFsID0gZnVuY3Rpb24obXNnKXsKICAgIHZhciB0b3RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0b3RhbCIpOwogICAgaWYgKHRvdGFsKSB7CiAgICAgICAgdG90YWwuaW5uZXJIVE1MID0gbXNnOwogICAgfQp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9yZXN1bHRzX2NsZWFyX29uY2xpY2sgPSBmdW5jdGlvbigpewogICAgdmFyIHJlc3VsdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicmVzdWx0cyIpOwogICAgcmVzdWx0cy5pbm5lckhUTUwgPSAiIjsKICAgIFRlc3QuQW5vdGhlcldheS5fdXBkYXRlX3Jlc3VsdHNfdG90YWwoIiIpOwogICAgVGVzdC5Bbm90aGVyV2F5Ll9nX29rX3BhZ2VzID0gMDsKICAgIFRlc3QuQW5vdGhlcldheS5fZ19mYWlsX3BhZ2VzID0gMDsKICAgIFRlc3QuQW5vdGhlcldheS5fb3BlbmxheWVyc19zdW1fdG90YWxfZGV0YWlsX29rPTA7CiAgICBUZXN0LkFub3RoZXJXYXkuX29wZW5sYXllcnNfc3VtX3RvdGFsX2RldGFpbF9mYWlsPTA7CiAgICB2YXIgZGVidWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZGVidWciKTsKICAgIGRlYnVnLmlubmVySFRNTCA9ICIiOwogICAgVGVzdC5Bbm90aGVyV2F5LnJlc2V0X3J1bm5pbmdfdGltZSgpOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9nZXRfY3NzX2NsYXNzID0gZnVuY3Rpb24obyl7CiAgICB2YXIgYyA9IG8uZ2V0QXR0cmlidXRlKCJjbGFzc05hbWUiKTsKICAgIGlmIChjID09IG51bGwgfHwgYyA9PSAiIikgewogICAgICAgIGMgPSBvLmdldEF0dHJpYnV0ZSgiY2xhc3MiKTsKICAgIH0KICAgIHJldHVybiBjOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9zZXRfY3NzX2NsYXNzID0gZnVuY3Rpb24obywgY3NzX2NsYXNzKXsKICAgIG8uc2V0QXR0cmlidXRlKCJjbGFzc05hbWUiLCBjc3NfY2xhc3MpOwogICAgby5zZXRBdHRyaWJ1dGUoImNsYXNzIiwgY3NzX2NsYXNzKTsKfTsKClRlc3QuQW5vdGhlcldheS5fdGFiX29uY2xpY2sgPSBmdW5jdGlvbigpewogICAgdmFyIHRhYiA9IHRoaXM7CiAgICB2YXIgdGFicyA9IFtkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZGVidWdfdGFiIiksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyZXN1bHRzX3RhYiIpXTsKICAgIHZhciBwYW5lcyA9IFtkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZGVidWciKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJlc3VsdHMiKV07CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhYnMubGVuZ3RoOyArK2kpIHsKICAgICAgICBpZiAodGFiID09IHRhYnNbaV0pIHsKICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9zZXRfY3NzX2NsYXNzKHRhYnNbaV0sICJhY3RpdmVfdGFiIik7CiAgICAgICAgICAgIHBhbmVzW2ldLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9zZXRfY3NzX2NsYXNzKHRhYnNbaV0sICJpbmFjdGl2ZV90YWIiKTsKICAgICAgICAgICAgcGFuZXNbaV0uc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICB9CiAgICB9Cn07ClRlc3QuQW5vdGhlcldheS5fdGFiX21vdXNlb3ZlciA9IGZ1bmN0aW9uKCl7CiAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nZXRfY3NzX2NsYXNzKHRoaXMpID09ICJpbmFjdGl2ZV90YWIiKSB7CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9zZXRfY3NzX2NsYXNzKHRoaXMsICJpbmFjdGl2ZV9tb3VzZW92ZXJfdGFiIik7CiAgICB9Cn07ClRlc3QuQW5vdGhlcldheS5fdGFiX21vdXNlb3V0ID0gZnVuY3Rpb24oKXsKICAgIGlmIChUZXN0LkFub3RoZXJXYXkuX2dldF9jc3NfY2xhc3ModGhpcykgPT0gImluYWN0aXZlX21vdXNlb3Zlcl90YWIiKSB7CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9zZXRfY3NzX2NsYXNzKHRoaXMsICJpbmFjdGl2ZV90YWIiKTsKICAgIH0KfTsKCi8vIHJlY29yZGluZyBtb3VzZSBpbnB1dApUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jaGVja19vbmZvY3VzID0gZnVuY3Rpb24oKXsKICAgIHZhciBvID0gdGhpczsKICAgIHZhciBjaGVja19zZWxlY3QgPSBvLnR5cGUgIT0gInRleHQiOwogICAgdmFyIGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyZWNvcmRfZGl2Iik7CiAgICB2YXIgaW5wdXRzID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJpbnB1dCIpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyArK2kpIHsKICAgICAgICB2YXIgaW5wdXQgPSBpbnB1dHNbaV07CiAgICAgICAgaWYgKGlucHV0LnR5cGUgPT0gInJhZGlvIikgewogICAgICAgICAgICBpZiAoaW5wdXQudmFsdWUgPT0gInNlbGVjdCIpIHsKICAgICAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSBjaGVja19zZWxlY3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSAKICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZSA9PSAiaW5wdXQiKSB7CiAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9ICFjaGVja19zZWxlY3Q7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9nX25vX3JlY29yZF9tc2cgPSBudWxsOyAvLyBub3QgbnVsbCAtIHJlY29yZGluZyBpcyB1bmF2YWlsYWJsZQpUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3RpbWVvdXRfY250ID0gMDsgLy8gb3BlbmluZyB3aW5kb3cgZm9yIGEgcGFnZSBmb3IgcmVjb3JkaW5nClRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfdXJsID0gbnVsbDsKVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF93bmQgPSBudWxsOwpUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3JhbmRvbV9pZCA9IG51bGw7IC8vIGFkZGVkIHRvIGVsZW1lbnQgaWRzIG9mIHJlY29yZF9jb250cm9sIGRpdiBzbyB0aGF0IHRoZXkgZG8gbm90IGNsYXNoIHdpdGggaWRzIGFscmVhZHkgaW4gdGhlIHBhZ2UgZm9yIHdoaWNoIGlucHV0IGlzIHJlY29yZGVkClRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfa2V5ZG93biA9IG51bGw7IC8vIHJlY29yZGluZyBjb250cm9sIC0gd2hpY2gga2V5IGlzIGRvd24KVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9jdHJsX2tleWRvd24gPSBmYWxzZTsKVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9zaGlmdF9rZXlkb3duID0gZmFsc2U7ClRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfY29udHJvbF92aXNpYmxlID0gdHJ1ZTsgLy8gcmVjb3JkaW5nIGNvbnRyb2wgdWkgc3RhdGUKVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9zdGFydGVkOwpUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3BhdXNlZDsKVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9pbmNsdWRlX21vdXNlbW92ZSA9IGZhbHNlOwpUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3N0YXJ0X3RpbWU7IC8vIGZvciB0aW1lIHJlZmVyZW5jZXMKVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9wYXVzZV9zdGFydF90aW1lOwpUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3VwZGF0ZV90aW1lX2ludGVydmFsOyAvLyBzaG93aW5nIHRpbWUgaW4gdGhlIGNvbnRyb2wgdWkKVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF93YWl0aW5nX2Zvcl9yZXN1bHRzID0gZmFsc2U7IC8vIHdhaXRpbmcgZm9yIHJlc3VsdHMgd2luZG93IHRvIG9wZW4KVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ldmVudHM7IC8vIHJlY29yZGVkIGV2ZW50cwpUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3VuZGVyX2N1cnNvcjsgLy8gdHJhY2sgZWxlbWVudCB1bmRlciBjdXJzb3IKVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9jaGVja3BvaW50X2NvdW50OyAvLyBmb3IgY2hlY2twb2ludCBudW1iZXJpbmcKVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9tb3VzZV9vdmVyX3JlY29yZF9jb250cm9sOyAvLyBmb3IgYXZvaWRpbmcgcmVjb3JkIGNvbnRyb2wgaGlnaGxpZ2h0IG9uIG1vdXNlb3ZlcgpUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2hpZ2hsaWdodGVkX2VsZW1lbnQgPSB7CiAgICBlbGVtZW50OiBudWxsLAogICAgeDogbnVsbCwKICAgIHk6IG51bGwKfTsKClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfZ2V0X2VsZW1lbnQgPSBmdW5jdGlvbihpZCl7CiAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF93bmQgIT0gbnVsbCAmJiBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3duZC5kb2N1bWVudCAhPSBudWxsKSB7CiAgICAgICAgcmV0dXJuIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfd25kLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkICsgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9yYW5kb21faWQpOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9Cn07ClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX3N0YXJ0X29uY2xpY2sgPSBmdW5jdGlvbigpIC8vICJyZWNvcmQiIGJ1dHRvbiBvbiB0aGUgcnVuX3Rlc3RzLmh0bWw6IG9wZW4gYSB3aW5kb3cgZm9yIGEgcGFnZSBmb3Igd2hpY2ggaW5wdXQgaXMgcmVjb3JkZWQKewogICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ19ub19yZWNvcmRfbXNnICE9IG51bGwpIHsKICAgICAgICBhbGVydChUZXN0LkFub3RoZXJXYXkuX2dfbm9fcmVjb3JkX21zZyk7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfdGltZW91dF9jbnQgPiAwIHx8CiAgICAoVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF93bmQgIT0gbnVsbCAmJiAoVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF93bmQuY2xvc2VkICE9IG51bGwgJiYgIVRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfd25kLmNsb3NlZCkpKSB7IC8vIGluIG9wZXJhLCBjbG9zZWQgaXMgbnVsbC4KICAgICAgICBhbGVydCgidGhlcmUgaXMgYWxyZWFkeSB3aW5kb3cgb3BlbmVkIGZvciByZWNvcmRpbmcgaW5wdXQgZm9yIGEgcGFnZSAiICsgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF91cmwpOwogICAgICAgIHJldHVybjsKICAgIH0KICAgIHZhciBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicmVjb3JkX2RpdiIpOwogICAgdmFyIGlucHV0cyA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaW5wdXQiKTsKICAgIHZhciB1cmwgPSBudWxsOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyArK2kpIHsKICAgICAgICB2YXIgaW5wdXQgPSBpbnB1dHNbaV07CiAgICAgICAgaWYgKGlucHV0LnR5cGUgPT0gInJhZGlvIikgewogICAgICAgICAgICBpZiAoaW5wdXQudmFsdWUgPT0gInNlbGVjdCIgJiYgaW5wdXQuY2hlY2tlZCkgewogICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJlY29yZF9zZWxlY3QiKS5zZWxlY3RlZEluZGV4OwogICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkgewogICAgICAgICAgICAgICAgICAgIHVybCA9IFRlc3QuQW5vdGhlcldheS5fZ190ZXN0X3BhZ2VfdXJsc1tpbmRleCAtIDFdLnVybDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgaWYgKGlucHV0LnZhbHVlID09ICJpbnB1dCIgJiYgaW5wdXQuY2hlY2tlZCkgewogICAgICAgICAgICAgICAgICAgIHVybCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyZWNvcmRfaW5wdXQiKS52YWx1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBpZiAodXJsICE9IG51bGwpIHsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3VybCA9IHVybDsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3duZCA9IHdpbmRvdy5vcGVuKHVybCwgIl9ibGFuayIpOwogICAgICAgIGlmIChUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3duZCA9PSBudWxsKSB7CiAgICAgICAgICAgIGFsZXJ0KCJ1bmFibGUgdG8gb3BlbiBuZXcgd2luZG93IGZvciBhIHBhZ2U6ICIgKyB1cmwpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF90aW1lb3V0X2NudCA9IDUwOwogICAgICAgICAgICBzZXRUaW1lb3V0KFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX3dpbmRvd190aW1lb3V0LCAxMDApOwogICAgICAgIH0KICAgIH0KfTsKVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfd2luZG93X3RpbWVvdXQgPSBmdW5jdGlvbigpewogICAgaWYgKFRlc3QuQW5vdGhlcldheS5faXNfdXJsX2xvYWRlZChUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3VybCwgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF93bmQpKSB7CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfd2luZG93X3NldHVwKFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfd25kKTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIGlmICgtLVRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfdGltZW91dF9jbnQgPiAwKSB7CiAgICAgICAgICAgIHNldFRpbWVvdXQoVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfd2luZG93X3RpbWVvdXQsIDEwMCk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBhbGVydCgidGltZW91dCBleHBpcmVkIHdoaWxlIG9wZW5pbmcgbmV3IHdpbmRvdyBmb3IgYSBwYWdlOiAiICsgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF91cmwpOwogICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3duZCA9IG51bGw7CiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfdXJsID0gbnVsbDsKICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF90aW1lb3V0X2NudCA9IDA7CiAgICAgICAgfQogICAgfQp9OwpUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX3JhbmRvbWl6ZV9pZCA9IGZ1bmN0aW9uKGUsIHIpewogICAgaWYgKGUuaWQgIT0gIiIpIHsKICAgICAgICBlLmlkID0gZS5pZCArIHI7CiAgICB9CiAgICBmb3IgKHZhciBjID0gZS5maXJzdENoaWxkOyBjICE9IG51bGw7IGMgPSBjLm5leHRTaWJsaW5nKSB7CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF9yYW5kb21pemVfaWQoYywgcik7CiAgICB9Cn07ClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX3dpbmRvd19zZXR1cCA9IGZ1bmN0aW9uKHduZCkgLy8gaW5zZXJ0IHJlY29yZGluZyBjb250cm9sIGludG8gdGhlIHBhZ2UgZm9yIHdoaWNoIGlucHV0IGlzIHJlY29yZGVkCnsKICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfdGltZW91dF9jbnQgPSAwOwogICAgdmFyIHRoaXNfZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJlY29yZF9jb250cm9sIik7CiAgICB2YXIgcmVjb3JkX2NvbnRyb2wgPSB3bmQuZG9jdW1lbnQuaW1wb3J0Tm9kZSh0aGlzX2RpdiwgdHJ1ZSk7CiAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3JhbmRvbV9pZCA9ICgxMDAwICogTWF0aC5yYW5kb20oKSkudG9GaXhlZCgpOwogICAgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF9yYW5kb21pemVfaWQocmVjb3JkX2NvbnRyb2wsIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfcmFuZG9tX2lkKTsKICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfY29udHJvbF92aXNpYmxlID0gdHJ1ZTsKICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfc3RhcnRlZCA9IGZhbHNlOwogICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9wYXVzZWQgPSBmYWxzZTsKICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfY2hlY2twb2ludF9jb3VudCA9IDA7CiAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX21vdXNlX292ZXJfcmVjb3JkX2NvbnRyb2wgPSBmYWxzZTsKICAgIHZhciBkb2MgPSB3bmQuZG9jdW1lbnQ7CiAgICBkb2MuYm9keS5hcHBlbmRDaGlsZChyZWNvcmRfY29udHJvbCk7CiAgICAvLyBvcGVyYSBzYW5zLXNlcmlmIGZvbnQgaXMgZGlmZmVyZW50CiAgICBpZiAod2luZG93Lm9wZXJhKSB7CiAgICAgICAgY3Vyc29yX292ZXJfaW5kaWNhdG9yID0gVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF9nZXRfZWxlbWVudCgicmVjb3JkX2N1cnNvcl9vdmVyIik7CiAgICAgICAgY3Vyc29yX292ZXJfaW5kaWNhdG9yLnN0eWxlLndpZHRoID0gIjE4ZW0iOwogICAgICAgIGN1cnNvcl9vdmVyX2luZGljYXRvci5zdHlsZS5oZWlnaHQgPSAiMmVtIjsKICAgICAgICBjdXJzb3Jfb3Zlcl9pbmRpY2F0b3Iuc3R5bGUuZm9udFNpemUgPSAiN3B0IjsKICAgIH0KICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIiwgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF9rZXlkb3duLCB0cnVlKTsKICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCJrZXl1cCIsIFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfa2V5dXAsIHRydWUpOwogICAgLy8gIGRvYy5hZGRFdmVudExpc3RlbmVyKCAia2V5cHJlc3MiLCBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9ldmVudCwgdHJ1ZSApOyAvLyByZXBsYXlpbmcgaXMgbm90IHN1cHBvcnRlZCBieSBhbnkga25vd24gYnJvd3NlcgogICAgCiAgICBkb2MuYm9keS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW1vdmUiLCBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9vbl9tb3VzZW1vdmUsIHRydWUpOwogICAgZG9jLmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9ldmVudCwgdHJ1ZSk7CiAgICBkb2MuYm9keS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW92ZXIiLCBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9ldmVudCwgdHJ1ZSk7CiAgICBkb2MuYm9keS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW91dCIsIFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2V2ZW50LCB0cnVlKTsKICAgIGRvYy5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlZG93biIsIFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2V2ZW50LCB0cnVlKTsKICAgIGRvYy5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNldXAiLCBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9ldmVudCwgdHJ1ZSk7Cn07ClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfa2V5X2Rpc2FibGVkID0gZnVuY3Rpb24oayl7CiAgICBpZiAoayA9PSAiYyIpIHsKICAgICAgICByZXR1cm4gIVRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfc3RhcnRlZDsKICAgIH0KICAgIGVsc2UgCiAgICAgICAgaWYgKGsgPT0gInAiKSB7CiAgICAgICAgICAgIHJldHVybiAhVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9zdGFydGVkOwogICAgICAgIH0KICAgICAgICBlbHNlIAogICAgICAgICAgICBpZiAoayA9PSAicyIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3dhaXRpbmdfZm9yX3Jlc3VsdHM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KfTsKClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfdXBkYXRlX3VpID0gZnVuY3Rpb24oKXsKICAgIHZhciBrZXlkb3duX2NvbG9yID0gIiNmZmYiOwogICAgdmFyIGRpc2FibGVkX2NvbG9yID0gIiNhYWEiOwogICAgdmFyIGJ1dHRvbl9jb2xvciA9ICIjYWRmIjsKICAgIHZhciBhY3RpdmVfY29sb3IgPSAiI2ZkZiI7CiAgICAKICAgIHZhciBkaXNwbGF5ID0ge307CiAgICBkaXNwbGF5W2ZhbHNlXSA9ICJub25lIjsKICAgIGRpc3BsYXlbdHJ1ZV0gPSAiaW5saW5lIjsKICAgIAogICAgdmFyIHNfYnV0dG9uID0gVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF9nZXRfZWxlbWVudCgicmVjb3JkX3MiKTsKICAgIHZhciByZWNvcmRfb24gPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2dldF9lbGVtZW50KCJyZWNvcmRfb24iKTsKICAgIHZhciByZWNvcmRfb2ZmID0gVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF9nZXRfZWxlbWVudCgicmVjb3JkX29mZiIpOwogICAgCiAgICBzX2J1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2tleV9kaXNhYmxlZCgicyIpID8gZGlzYWJsZWRfY29sb3IgOiBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2tleWRvd24gPT0gInMiID8ga2V5ZG93bl9jb2xvciA6IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfc3RhcnRlZCA/IGFjdGl2ZV9jb2xvciA6IGJ1dHRvbl9jb2xvcjsKICAgIHJlY29yZF9vbi5zdHlsZS5kaXNwbGF5ID0gZGlzcGxheVshVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9zdGFydGVkXTsKICAgIHJlY29yZF9vZmYuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXlbVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9zdGFydGVkXTsKICAgIAogICAgdmFyIGhfYnV0dG9uID0gVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF9nZXRfZWxlbWVudCgicmVjb3JkX2giKTsKICAgIGhfYnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfa2V5ZG93biA9PSAiaCIgPyBrZXlkb3duX2NvbG9yIDogYnV0dG9uX2NvbG9yOwogICAgCiAgICB2YXIgcF9idXR0b24gPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2dldF9lbGVtZW50KCJyZWNvcmRfcCIpOwogICAgdmFyIHJlY29yZF9wYXVzZV9vbiA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfZ2V0X2VsZW1lbnQoInJlY29yZF9wYXVzZV9vbiIpOwogICAgdmFyIHJlY29yZF9wYXVzZV9vZmYgPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2dldF9lbGVtZW50KCJyZWNvcmRfcGF1c2Vfb2ZmIik7CiAgICBwX2J1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2tleV9kaXNhYmxlZCgicCIpID8gZGlzYWJsZWRfY29sb3IgOiBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2tleWRvd24gPT0gInAiID8ga2V5ZG93bl9jb2xvciA6IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfcGF1c2VkID8gYWN0aXZlX2NvbG9yIDogYnV0dG9uX2NvbG9yOwogICAgcmVjb3JkX3BhdXNlX29uLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5WyFUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3BhdXNlZF07CiAgICByZWNvcmRfcGF1c2Vfb2ZmLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5W1Rlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfcGF1c2VkXTsKICAgIAogICAgdmFyIG1fYnV0dG9uID0gVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF9nZXRfZWxlbWVudCgicmVjb3JkX20iKTsKICAgIHZhciByZWNvcmRfaW5jbHVkZV9tb3VzZW1vdmUgPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2dldF9lbGVtZW50KCJyZWNvcmRfaW5jbHVkZV9tb3VzZW1vdmUiKTsKICAgIHZhciByZWNvcmRfb21pdF9tb3VzZW1vdmUgPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2dldF9lbGVtZW50KCJyZWNvcmRfb21pdF9tb3VzZW1vdmUiKTsKICAgIG1fYnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfa2V5ZG93biA9PSAibSIgPyBrZXlkb3duX2NvbG9yIDogVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9pbmNsdWRlX21vdXNlbW92ZSA/IGFjdGl2ZV9jb2xvciA6IGJ1dHRvbl9jb2xvcjsKICAgIHJlY29yZF9pbmNsdWRlX21vdXNlbW92ZS5zdHlsZS5kaXNwbGF5ID0gZGlzcGxheVshVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9pbmNsdWRlX21vdXNlbW92ZV07CiAgICByZWNvcmRfb21pdF9tb3VzZW1vdmUuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXlbVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9pbmNsdWRlX21vdXNlbW92ZV07CiAgICAKICAgIHZhciBjX2J1dHRvbiA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfZ2V0X2VsZW1lbnQoInJlY29yZF9jIik7CiAgICBjX2J1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2tleV9kaXNhYmxlZCgiYyIpID8gZGlzYWJsZWRfY29sb3IgOiBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2tleWRvd24gPT0gImMiID8ga2V5ZG93bl9jb2xvciA6IGJ1dHRvbl9jb2xvcjsKICAgIAogICAgdmFyIHJlY29yZF9pbmRpY2F0b3IgPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2dldF9lbGVtZW50KCJyZWNvcmRfaW5kaWNhdG9yIik7CiAgICByZWNvcmRfaW5kaWNhdG9yLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5W1Rlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfc3RhcnRlZF07CiAgICAKICAgIHZhciBwYXVzZV9pbmRpY2F0b3IgPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2dldF9lbGVtZW50KCJyZWNvcmRfcGF1c2VfaW5kaWNhdG9yIik7CiAgICBwYXVzZV9pbmRpY2F0b3Iuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXlbVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9wYXVzZWRdOwogICAgCiAgICB2YXIgcmVjb3JkX2NvbnRyb2wgPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2dldF9lbGVtZW50KCJyZWNvcmRfY29udHJvbCIpOwogICAgcmVjb3JkX2NvbnRyb2wuc3R5bGUuZGlzcGxheSA9IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfY29udHJvbF92aXNpYmxlID8gImJsb2NrIiA6ICJub25lIjsKICAgIAogICAgdmFyIHNoaWZ0X2J1dHRvbiA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfZ2V0X2VsZW1lbnQoInJlY29yZF9zaGlmdF9rZXkiKTsKICAgIHNoaWZ0X2J1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3NoaWZ0X2tleWRvd24gPyBrZXlkb3duX2NvbG9yIDogYnV0dG9uX2NvbG9yOwogICAgCiAgICB2YXIgY3RybF9idXR0b24gPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2dldF9lbGVtZW50KCJyZWNvcmRfY3RybF9rZXkiKTsKICAgIGN0cmxfYnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfY3RybF9rZXlkb3duID8ga2V5ZG93bl9jb2xvciA6IGJ1dHRvbl9jb2xvcjsKfTsKVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfZm9ybWF0X3RpbWUgPSBmdW5jdGlvbih0KXsKICAgIHQgPSBuZXcgRGF0ZSh0KTsKICAgIHZhciBtID0gdC5nZXRNaW51dGVzKCk7CiAgICB2YXIgcyA9IHQuZ2V0U2Vjb25kcygpOwogICAgdmFyIHN0ciA9IG0gPT0gMCA/ICIiIDogbSArICJtICI7CiAgICBzdHIgKz0gcyArICJzLiI7CiAgICByZXR1cm4gc3RyOwp9OwpUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX3VwZGF0ZV90aW1lID0gZnVuY3Rpb24oKXsKICAgIHZhciB0aW1lX2Rpc3BsYXkgPSBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX2dldF9lbGVtZW50KCJyZWNvcmRfdGltZSIpOwogICAgaWYgKHRpbWVfZGlzcGxheSAhPSBudWxsKSB7CiAgICAgICAgdGltZV9kaXNwbGF5LmlubmVySFRNTCA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2Zvcm1hdF90aW1lKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLSBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3N0YXJ0X3RpbWUpOwogICAgfQp9OwpUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX3VwZGF0ZV9oaWdobGlnaHQgPSBmdW5jdGlvbihlbGVtLCBzdHlsZSwgZXZlbnQpewogICAgaWYgKGVsZW0gPT0gbnVsbCkgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2hpZ2hsaWdodF9ib3JkZXIobnVsbCk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICB2YXIgcG9zID0gVGVzdC5Bbm90aGVyV2F5Ll9nZXRfcGFnZV9jb29yZHMoZWxlbSk7CiAgICAgICAgaWYgKHN0eWxlID09ICJiYWxsIiB8fCBlbGVtICE9IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfaGlnaGxpZ2h0ZWRfZWxlbWVudC5lbGVtZW50IHx8IHBvcy54ICE9IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfaGlnaGxpZ2h0ZWRfZWxlbWVudC54IHx8IHBvcy55ICE9IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfaGlnaGxpZ2h0ZWRfZWxlbWVudC55KSB7CiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfaGlnaGxpZ2h0ZWRfZWxlbWVudCA9IHsKICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW0sCiAgICAgICAgICAgICAgICB4OiBwb3MueCwKICAgICAgICAgICAgICAgIHk6IHBvcy55CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2hpZ2hsaWdodF9ib3JkZXIoZWxlbSwgc3R5bGUsIGV2ZW50KTsKICAgICAgICB9CiAgICB9Cn07ClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2RlY29kZV9rZXkgPSBmdW5jdGlvbihldmVudCl7CiAgICB2YXIgayA9IG51bGw7CiAgICBpZiAoZXZlbnQgPT0gbnVsbCkgewogICAgICAgIGsgPSBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3duZC5ldmVudC5rZXlDb2RlOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgayA9IGV2ZW50LndoaWNoOwogICAgfQogICAgaWYgKGsgPT0gODMpIHsKICAgICAgICByZXR1cm4gInMiOwogICAgfQogICAgZWxzZSAKICAgICAgICBpZiAoayA9PSA3MikgewogICAgICAgICAgICByZXR1cm4gImgiOwogICAgICAgIH0KICAgICAgICBlbHNlIAogICAgICAgICAgICBpZiAoayA9PSA3MykgewogICAgICAgICAgICAgICAgcmV0dXJuICJpIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgaWYgKGsgPT0gODApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gInAiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSAKICAgICAgICAgICAgICAgICAgICBpZiAoayA9PSA2NykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gImMiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoayA9PSA3NykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJtIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT0gMTYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gInNoaWZ0IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT0gMTcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJjdHJsIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT0gMTgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiYWx0IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT0gMTkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gInBhdXNlIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT0gMTIzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiZjEyIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICByZXR1cm4gIiI7Cn07ClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfa2V5ZG93biA9IGZ1bmN0aW9uKGV2ZW50KXsKICAgIHZhciBoYW5kbGVkID0gZmFsc2U7CiAgICB2YXIgayA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2RlY29kZV9rZXkoZXZlbnQpOwogICAgaWYgKGsgPT0gInNoaWZ0IikgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfc2hpZnRfa2V5ZG93biA9IHRydWU7CiAgICB9CiAgICBlbHNlIAogICAgICAgIGlmIChrID09ICJjdHJsIikgewogICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2N0cmxfa2V5ZG93biA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGVsc2UgCiAgICAgICAgICAgIGlmIChrICE9ICIiICYmIChUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2tleWRvd24gPT0gbnVsbCB8fCBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2tleWRvd24gPT0gaykpIHsKICAgICAgICAgICAgICAgIGlmIChUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2N0cmxfa2V5ZG93biAmJiBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3NoaWZ0X2tleWRvd24gJiYgIVRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfa2V5X2Rpc2FibGVkKGspKSB7CiAgICAgICAgICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9rZXlkb3duID0gazsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfa2V5ZG93biA9ICIiOwogICAgICAgICAgICB9CiAgICBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX3VwZGF0ZV91aSgpOwogICAgaWYgKCFoYW5kbGVkKSB7CiAgICAgICAgLy8gICAgICBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9ldmVudCggZXZlbnQgKTsgLy8gcmVwbGF5aW5nIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYW55IGtub3duIGJyb3dzZXIKICAgIH0KICAgIHJldHVybjsKfTsKVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF9rZXl1cCA9IGZ1bmN0aW9uKGV2ZW50KXsKICAgIHZhciBoYW5kbGVkID0gZmFsc2U7CiAgICB2YXIgayA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2RlY29kZV9rZXkoZXZlbnQpOwogICAgaWYgKGsgPT0gInNoaWZ0IikgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfc2hpZnRfa2V5ZG93biA9IGZhbHNlOwogICAgfQogICAgZWxzZSAKICAgICAgICBpZiAoayA9PSAiY3RybCIpIHsKICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9jdHJsX2tleWRvd24gPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgZWxzZSAKICAgICAgICAgICAgaWYgKGsgIT0gIiIgJiYgayA9PSBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2tleWRvd24gJiYgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9jdHJsX2tleWRvd24gJiYgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9zaGlmdF9rZXlkb3duKSB7CiAgICAgICAgICAgICAgICBpZiAoayA9PSAicyIpIHsKICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3N0YXJ0ZWQgPSAhVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9zdGFydGVkOwogICAgICAgICAgICAgICAgICAgIGlmIChUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3N0YXJ0ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ldmVudHMgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9zdGFydF90aW1lID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF91cGRhdGVfdGltZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3VwZGF0ZV90aW1lX2ludGVydmFsID0gd2luZG93LnNldEludGVydmFsKFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfdXBkYXRlX3RpbWUsIDIwMCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX3VwZGF0ZV9oaWdobGlnaHQobnVsbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9wYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfdXBkYXRlX3RpbWVfaW50ZXJ2YWwpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfd2FpdGluZ19mb3JfcmVzdWx0cyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9wZW4gYSBuZXcgd2luZG93IGZvciBzZWxmLCBwYXNzIGEgcGFyYW1ldGVyIHRvIGR1bXAgcmVjb3JkZWQgZXZlbnRzIGFzIGphdmFzY3JpcHQgY29kZSB0aGVyZQogICAgICAgICAgICAgICAgICAgICAgICAvLyAodGhlIGVhc2llc3Qgd2F5IHRvIG9idGFpbiBhIGRvY3VtZW50IGZyb20gdGhlIHNhbWUgb3JpZ2luLCBzbyBpdCdzIHdyaXRhYmxlLCBpcyB0byBvcGVuIHRoaXMgc2FtZSBwYWdlIGFnYWluKQogICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3BhdXNlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9jID0gd2luZG93LmxvY2F0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICBsb2MgPSBsb2MucHJvdG9jb2wgKyAiLy8iICsgbG9jLmhvc3QgKyBsb2MucGF0aG5hbWUgKyAiP3JlY29yZGluZ19yZXN1bHRzPSIgKyBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3JhbmRvbV9pZDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5vcGVuKGxvYywgIl9ibGFuayIpID09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCJ1bmFibGUgdG8gb3BlbiBuZXcgd2luZG93IGZvciByZXN1bHRzIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgIGlmIChrID09ICJoIikgewogICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2NvbnRyb2xfdmlzaWJsZSA9ICFUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2NvbnRyb2xfdmlzaWJsZTsKICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrID09ICJwIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9wYXVzZWQgPSAhVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9wYXVzZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9wYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3BhdXNlX3N0YXJ0X3RpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3N0YXJ0ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF91cGRhdGVfdGltZV9pbnRlcnZhbCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfdXBkYXRlX2hpZ2hsaWdodChudWxsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXVzZV9kdXJhdGlvbiA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLSBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3BhdXNlX3N0YXJ0X3RpbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9zdGFydF90aW1lICs9IHBhdXNlX2R1cmF0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfdXBkYXRlX3RpbWVfaW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF91cGRhdGVfdGltZSwgMjAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoayA9PSAibSIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2luY2x1ZGVfbW91c2Vtb3ZlID0gIVRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfaW5jbHVkZV9tb3VzZW1vdmU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrID09ICJjIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NoZWNrcG9pbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfZGlzcGxheV9jaGVja3BvaW50KG8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9mbGFzaF9ib3JkZXIoIiMyNGQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2tleWRvd24gPSBudWxsOwogICAgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF91cGRhdGVfdWkoKTsKICAgIGlmICghaGFuZGxlZCkgewogICAgICAgIC8vICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfZXZlbnQoIGV2ZW50ICk7IC8vIHJlcGxheWluZyBpcyBub3Qgc3VwcG9ydGVkIGluIGFueSBrbm93biBicm93c2VyCiAgICB9CiAgICByZXR1cm47Cn07ClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2h0bWxfbm9kZV9wYXRoID0gZnVuY3Rpb24obm9kZSl7CiAgICBpZiAobm9kZSA9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgcGF0aCA9IFtdOwogICAgd2hpbGUgKHRydWUpIHsKICAgICAgICBpZiAobm9kZS5pZCAhPSBudWxsICYmIG5vZGUuaWQgIT0gIiIpIHsKICAgICAgICAgICAgcGF0aC51bnNoaWZ0KCIjIiArIG5vZGUuaWQgKyAiICIgKyBub2RlLm5vZGVOYW1lKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICB2YXIgcGFyZW50X25vZGUgPSBub2RlLnBhcmVudE5vZGU7CiAgICAgICAgICAgIGlmIChwYXJlbnRfbm9kZSA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gW107IC8vIG5vIEJPRFkgdXAgdGhlIHBhdGggLSB0aGlzIG5vZGUgaXMgc2NyZXdlZCAoYnJvd3NlcnMgZGlmZmVyIGluIHdoYXQncyBhYm92ZSB0aGUgYm9keSksIGRpc2NhcmQKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBpID0gMDsKICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgZm9yICh2YXIgY2hpbGQgPSBwYXJlbnRfbm9kZS5maXJzdENoaWxkOyBjaGlsZCAhPSBudWxsOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkID09IG5vZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09IDEpIHsgLy8gY291bnQgb25seSBIVE1MIGVsZW1lbnQgbm9kZXMKICAgICAgICAgICAgICAgICAgICAgICAgKytpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICghZm91bmQpIHsKICAgICAgICAgICAgICAgICAgICBpID0gLTE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXRoLnVuc2hpZnQoaSArICIgIiArIG5vZGUubm9kZU5hbWUpOwogICAgICAgICAgICAgICAgaWYgKHBhcmVudF9ub2RlLm5vZGVOYW1lID09ICJCT0RZIiB8fCBwYXJlbnRfbm9kZS5ub2RlTmFtZSA9PSAiYm9keSIpIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG5vZGUgPSBwYXJlbnRfbm9kZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBwYXRoOwp9OwpUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9ub2RlX3BhdGhfdG9fc3RyaW5nID0gZnVuY3Rpb24ocGF0aCl7CiAgICB2YXIgcyA9ICIiOwogICAgaWYgKHBhdGggIT0gbnVsbCkgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7ICsraSkgewogICAgICAgICAgICBzICs9IGkgPT0gMCA/ICIiIDogIiwgIjsKICAgICAgICAgICAgdmFyIGVsZW0gPSBwYXRoW2ldLnNwbGl0KCIgIik7CiAgICAgICAgICAgIGlmIChlbGVtWzBdLmNoYXJBdCgwKSA9PSAiIyIpIHsKICAgICAgICAgICAgICAgIHMgKz0gZWxlbVsxXSArICIgIiArIGVsZW1bMF07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBzICs9IGVsZW1bMV0gKyAiIFsiICsgZWxlbVswXSArICJdIjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBzOwp9OwpUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9ub2RlX3BhdGhfdG9fbm9kZSA9IGZ1bmN0aW9uKHBhdGhfc3RyLCBkb2MpewogICAgaWYgKHBhdGhfc3RyID09IG51bGwpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciBwYXRoID0gcGF0aF9zdHIuc3BsaXQoIiwiKTsKICAgIHZhciBub2RlID0gZG9jLmJvZHk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyArK2kpIHsKICAgICAgICB2YXIgbm9kZV9pID0gcGF0aFtpXS5zcGxpdCgiICIpWzBdOwogICAgICAgIGlmIChub2RlX2kuY2hhckF0KDApID09ICIjIikgewogICAgICAgICAgICBub2RlID0gZG9jLmdldEVsZW1lbnRCeUlkKG5vZGVfaS5zdWJzdHJpbmcoMSkpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYgKG5vZGVfaSA8IDAgfHwgbm9kZV9pID49IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIG5vZGUgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUuZmlyc3RDaGlsZDsKICAgICAgICAgICAgICAgIHdoaWxlIChub2RlICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7IC8vIGNvdW50IG9ubHkgSFRNTCBlbGVtZW50IG5vZGVzCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlX2kgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLS1ub2RlX2k7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChub2RlID09IG51bGwpIHsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG5vZGU7Cn07ClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfY29udGFpbnNfaWQgPSBmdW5jdGlvbihzKXsKICAgIHJldHVybiBzLm1hdGNoKC9eI3JlY29yZF9bXHdfXSsvKSAmJiBzLm1hdGNoKFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfcmFuZG9tX2lkKTsKfTsKVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY2hlY2twb2ludCA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgbyA9IHsKICAgICAgICB0eXBlOiAiX2NoZWNrcG9pbnQiLAogICAgICAgIHRpbWU6IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLSBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3N0YXJ0X3RpbWUsCiAgICAgICAgd2hpY2g6IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfY2hlY2twb2ludF9jb3VudCsrLAogICAgICAgIHRhcmdldDogVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfaHRtbF9ub2RlX3BhdGgoVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF91bmRlcl9jdXJzb3IpCiAgICB9OwogICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ldmVudHMucHVzaChvKTsKICAgIHJldHVybiBvOwp9OwpUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9ldmVudCA9IGZ1bmN0aW9uKGV2ZW50KXsKICAgIHZhciB1bm5lZWRlZCA9IFsicmFuZ2VPZmZzZXQiLCAiZXZlbnRQaGFzZSIsICJ0aW1lU3RhbXAiLCAiaXNUcnVzdGVkIiwgInBvcHVwV2luZG93RmVhdHVyZXMiLCAicmFuZ2VPZmZzZXQiXTsKICAgIGlmIChUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3N0YXJ0ZWQgJiYgIVRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfcGF1c2VkKSB7CiAgICAgICAgdmFyIG8gPSB7fTsKICAgICAgICBmb3IgKHZhciBuIGluIGV2ZW50KSB7CiAgICAgICAgICAgIHZhciBuZWVkZWQgPSAhbi5tYXRjaCgvXltBLVowLTlfXSskLyk7CiAgICAgICAgICAgIGlmIChuZWVkZWQpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHVpID0gMDsgdWkgPCB1bm5lZWRlZC5sZW5ndGg7ICsrdWkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodW5uZWVkZWRbdWldID09IG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmVlZGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChuZWVkZWQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBldmVudFtuXTsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHZhbHVlKSAhPSAib2JqZWN0IiAmJiB0eXBlb2YodmFsdWUpICE9ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb1tuXSA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9PSAidGFyZ2V0IiB8fCBuID09ICJyZWxhdGVkVGFyZ2V0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb1tuXSA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2h0bWxfbm9kZV9wYXRoKHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIG9bInRpbWUiXSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLSBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3N0YXJ0X3RpbWU7CiAgICAgICAgdmFyIG92ZXJfcmVjb3JkX2NvbnRyb2wgPSBvWyJ0YXJnZXQiXSAhPSBudWxsICYmIG9bInRhcmdldCJdWzBdICE9IG51bGwgJiYgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF9jb250YWluc19pZChvWyJ0YXJnZXQiXVswXSk7CiAgICAgICAgaWYgKCFvdmVyX3JlY29yZF9jb250cm9sKSB7CiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfZXZlbnRzLnB1c2gobyk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRydWU7Cn07ClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX29uX21vdXNlbW92ZSA9IGZ1bmN0aW9uKGV2ZW50KXsKICAgIHZhciBwYXRoID0gVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfaHRtbF9ub2RlX3BhdGgoZXZlbnQudGFyZ2V0KTsKICAgIHZhciBuZXdfbW91c2Vfb3Zlcl9yZWNvcmRfY29udHJvbCA9IHBhdGggIT0gbnVsbCAmJiBwYXRoWzBdICE9IG51bGwgJiYgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY29udHJvbF9jb250YWluc19pZChwYXRoWzBdKTsKICAgIGlmIChuZXdfbW91c2Vfb3Zlcl9yZWNvcmRfY29udHJvbCAhPSBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX21vdXNlX292ZXJfcmVjb3JkX2NvbnRyb2wpIHsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX21vdXNlX292ZXJfcmVjb3JkX2NvbnRyb2wgPSBuZXdfbW91c2Vfb3Zlcl9yZWNvcmRfY29udHJvbDsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX3VwZGF0ZV91aSgpOwogICAgfQogICAgaWYgKGV2ZW50LnRhcmdldCAhPSBudWxsICYmIGV2ZW50LnRhcmdldCAhPSBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3VuZGVyX2N1cnNvcikgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfdW5kZXJfY3Vyc29yID0gZXZlbnQudGFyZ2V0OwogICAgICAgIHZhciBzID0gIiI7CiAgICAgICAgaWYgKHBhdGggPT0gbnVsbCB8fCBwYXRoWzBdID09IG51bGwgfHwgIVRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfY29udGFpbnNfaWQocGF0aFswXSkpIHsKICAgICAgICAgICAgcyA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX25vZGVfcGF0aF90b19zdHJpbmcocGF0aCk7CiAgICAgICAgfQogICAgICAgIGlmIChzID09ICIiKSB7CiAgICAgICAgICAgIHMgPSAiJm5ic3A7IjsKICAgICAgICB9CiAgICAgICAgdmFyIGN1cnNvcl9vdmVyX2luZGljYXRvciA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfZ2V0X2VsZW1lbnQoInJlY29yZF9jdXJzb3Jfb3ZlciIpOwogICAgICAgIGN1cnNvcl9vdmVyX2luZGljYXRvci5pbm5lckhUTUwgPSBzOwogICAgfQogICAgCiAgICB2YXIgaGlnaGxpZ2h0X2VsZW1lbnQgPSBudWxsOwogICAgaWYgKCFUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX21vdXNlX292ZXJfcmVjb3JkX2NvbnRyb2wgJiYgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9zdGFydGVkICYmICFUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX3BhdXNlZCkgewogICAgICAgIGhpZ2hsaWdodF9lbGVtZW50ID0gZXZlbnQudGFyZ2V0OwogICAgfQogICAgLy8gaGlnaGxpZ2h0IGJvcmRlciBkaXNhYmxlZCBvbiByZWNvcmRpbmcgLSBpdCBjYXVzZXMgcGFnZSB0byBzY3JvbGwsIGlzc3Vpbmcgc3B1cmlvdXMgbW91c2VvdmVyL21vdXNlb3V0IGV2ZW50CiAgICAvL1Rlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfdXBkYXRlX2hpZ2hsaWdodCggaGlnaGxpZ2h0X2VsZW1lbnQsICJib3JkZXIiICk7CiAgICAKICAgIGlmIChUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2luY2x1ZGVfbW91c2Vtb3ZlKSB7CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfZXZlbnQoZXZlbnQpOwogICAgfQogICAgcmV0dXJuIHRydWU7Cn07ClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2Rpc3BsYXlfY2hlY2twb2ludCA9IGZ1bmN0aW9uKG8pewogICAgdmFyIGNoZWNrcG9pbnRzX2RpdiA9IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NvbnRyb2xfZ2V0X2VsZW1lbnQoInJlY29yZF9jaGVja3BvaW50cyIpOwogICAgdmFyIHAgPSBjaGVja3BvaW50c19kaXYuYXBwZW5kQ2hpbGQoY2hlY2twb2ludHNfZGl2Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikpOwogICAgcC5zdHlsZS5tYXJnaW5Ub3AgPSAiM3B4IjsKICAgIHAuc3R5bGUuZm9udCA9ICJub3JtYWwgbm9ybWFsIDhwdCBzYW5zLXNlcmlmIjsKICAgIHAuc3R5bGUuY29sb3IgPSAiIzAwMCI7CiAgICBwLnN0eWxlLnRleHRBbGlnaCA9ICJsZWZ0IjsKICAgIHAuc3R5bGUucG9zaXRpb24gPSAicmVsYXRpdmUiOwogICAgcC5zdHlsZS53aWR0aCA9ICIxMDAlIjsKICAgIHZhciBjaGVja3BvaW50X3RleHQgPSAiIjsKICAgIGNoZWNrcG9pbnRfdGV4dCArPSAiIyIgKyAoby53aGljaCArIDEpOwogICAgY2hlY2twb2ludF90ZXh0ICs9ICIgICIgKyBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9mb3JtYXRfdGltZShvLnRpbWUpOwogICAgaWYgKG8udGFyZ2V0ICE9IG51bGwpIHsKICAgICAgICBjaGVja3BvaW50X3RleHQgKz0gVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfbm9kZV9wYXRoX3RvX3N0cmluZyhvLnRhcmdldCk7CiAgICB9CiAgICBwLmFwcGVuZENoaWxkKHAub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjaGVja3BvaW50X3RleHQpKTsKfTsKVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfc2F2ZV9yZXN1bHRzID0gZnVuY3Rpb24oZG9jKXsKICAgIC8vIHN0cmFuZ2UsIGJ1dCBET00tc3R5bGUgYXBwZW5kIGRvZXMgbm90IHdvcmsgaGVyZSBpbiBvcGVyYSA4LgogICAgdmFyIGFwcGVuZCA9IGZ1bmN0aW9uKHMpewogICAgICAgIGRvYy53cml0ZSgiPGRpdj4iICsgcyArICI8L2Rpdj4iKTsKICAgIH07CiAgICBhcHBlbmQoIi8qIHBhc3RlIHRoaXMgZGF0YSBpbnRvIHlvdXIgamF2YXNjcmlwdCBhbmQgcGFzcyBpdCBhcyBhbiBhcmd1bWVudCB0byByZXBsYXlfZXZlbnRzIG1ldGhvZCAqLyIpOwogICAgYXBwZW5kKCJ7IGNoZWNrcG9pbnRzOiBbIik7CiAgICB2YXIgZmlyc3RfY2hlY2twb2ludCA9IHRydWU7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfZXZlbnRzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgdmFyIG8gPSBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2V2ZW50c1tpXTsKICAgICAgICBpZiAoby50eXBlID09ICJfY2hlY2twb2ludCIpIHsKICAgICAgICAgICAgdmFyIHN0ciA9IGZpcnN0X2NoZWNrcG9pbnQgPyAiIiA6ICJ9LCAiOwogICAgICAgICAgICBzdHIgKz0gImZ1bmN0aW9uKCB0c3QsIHduZCApIHsgLy8gIyIgKyBvLndoaWNoICsgIiB0aW1lICIgKyBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9mb3JtYXRfdGltZShvLnRpbWUpICsgIiBjdXJzb3Igd2FzIG92ZXIgIiArIFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX25vZGVfcGF0aF90b19zdHJpbmcoby50YXJnZXQpOwogICAgICAgICAgICBhcHBlbmQoc3RyKTsKICAgICAgICAgICAgZmlyc3RfY2hlY2twb2ludCA9IGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgIGlmICghZmlyc3RfY2hlY2twb2ludCkgewogICAgICAgIGFwcGVuZCgifSIpOwogICAgfQogICAgYXBwZW5kKCJdLCBldmVudHM6IFsgIik7CiAgICB2YXIgcHJldl90aW1lID0gMDsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ldmVudHMubGVuZ3RoOyArK2kpIHsKICAgICAgICB2YXIgbyA9IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfZXZlbnRzW2ldOwogICAgICAgIHZhciBzID0gIiI7CiAgICAgICAgcyArPSAieyI7CiAgICAgICAgdmFyIG5fZmlyc3QgPSB0cnVlOwogICAgICAgIGZvciAodmFyIG4gaW4gbykgewogICAgICAgICAgICBpZiAobiA9PSAidGltZSIpIHsgLy8gY29udmVydCB0byByZWxhdGl2ZSB0aW1lCiAgICAgICAgICAgICAgICB2YXIgY3VyX3RpbWUgPSBvW25dIC0gMDsKICAgICAgICAgICAgICAgIG9bbl0gPSBjdXJfdGltZSAtIHByZXZfdGltZTsKICAgICAgICAgICAgICAgIHByZXZfdGltZSA9IGN1cl90aW1lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHMgKz0gbl9maXJzdCA/IG4gOiAiLCAiICsgbjsKICAgICAgICAgICAgcyArPSAiOiI7CiAgICAgICAgICAgIGlmIChvW25dID09IG51bGwpIHsKICAgICAgICAgICAgICAgIHMgKz0gIm51bGwiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcyArPSAiXCIiICsgb1tuXSArICJcIiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbl9maXJzdCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBzICs9IGkgPT0gVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ldmVudHMubGVuZ3RoIC0gMSA/ICJ9IiA6ICJ9LCI7CiAgICAgICAgYXBwZW5kKHMpOwogICAgfQogICAgYXBwZW5kKCJdIH0iKTsKICAgIGFwcGVuZCgiOyIpOwp9OwoKVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXI7IC8vIGJvcmRlciBoaWdobGlnaHRpbmcgZWxlbWVudCB1bmRlciBjdXJzb3IKVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXJfZmxhc2hlcyA9IFtdOyAvLyBhcnJheSBvZiB7IGNvbG9yOiBjb2xvciwgdGltZW91dDogbWlsbGlzZWNvbmRzIH0KVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXJfZmxhc2hpbmcgPSBmYWxzZTsKVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXJfbm9ybWFsX2NvbG9yID0gIiNkNGIiOwpUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9mbGFzaF9ib3JkZXJfdGltZW91dCA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgY29sb3IgPSBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2JvcmRlcl9ub3JtYWxfY29sb3I7CiAgICB2YXIgdGltZW91dCA9IG51bGw7CiAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXJfZmxhc2hlcy5sZW5ndGggIT0gMCkgewogICAgICAgIGNvbG9yID0gVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXJfZmxhc2hlc1swXS5jb2xvcjsKICAgICAgICB0aW1lb3V0ID0gVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXJfZmxhc2hlc1swXS50aW1lb3V0OwogICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfYm9yZGVyX2ZsYXNoZXMuc3BsaWNlKDAsIDEpOwogICAgfQogICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfYm9yZGVyICE9IG51bGwpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfYm9yZGVyLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfYm9yZGVyW2ldLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yOwogICAgICAgIH0KICAgIH0KICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHsKICAgICAgICBzZXRUaW1lb3V0KFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2ZsYXNoX2JvcmRlcl90aW1lb3V0LCB0aW1lb3V0KTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfYm9yZGVyX2ZsYXNoaW5nID0gZmFsc2U7CiAgICB9Cn07ClRlc3QuQW5vdGhlcldheS5fZ2V0X3BhZ2VfY29vcmRzID0gZnVuY3Rpb24oZWxtKXsKICAgIHZhciBwb2ludCA9IHsKICAgICAgICB4OiAwLAogICAgICAgIHk6IDAKICAgIH07CiAgICB3aGlsZSAoZWxtKSB7CiAgICAgICAgcG9pbnQueCArPSBlbG0ub2Zmc2V0TGVmdDsKICAgICAgICBwb2ludC55ICs9IGVsbS5vZmZzZXRUb3A7CiAgICAgICAgZWxtID0gZWxtLm9mZnNldFBhcmVudDsKICAgIH0KICAgIHJldHVybiBwb2ludDsKfTsKVGVzdC5Bbm90aGVyV2F5Ll9zZXRfcGFnZV9jb29yZHMgPSBmdW5jdGlvbihlbG0sIHgsIHkpewogICAgdmFyIHBhcmVudF9jb29yZHMgPSB7CiAgICAgICAgeDogMCwKICAgICAgICB5OiAwCiAgICB9OwogICAgaWYgKGVsbS5vZmZzZXRQYXJlbnQpIHsKICAgICAgICBwYXJlbnRfY29vcmRzID0gVGVzdC5Bbm90aGVyV2F5Ll9nZXRfcGFnZV9jb29yZHMoZWxtLm9mZnNldFBhcmVudCk7CiAgICB9CiAgICB2YXIgbmV3X3ggPSB4IC0gcGFyZW50X2Nvb3Jkcy54OwogICAgaWYgKG5ld194IDwgMCkgewogICAgICAgIG5ld194ID0gMDsKICAgIH0KICAgIGVsbS5zdHlsZS5sZWZ0ID0gbmV3X3ggKyAncHgnOwogICAgdmFyIG5ld195ID0geSAtIHBhcmVudF9jb29yZHMueTsKICAgIGlmIChuZXdfeSA8IDApIHsKICAgICAgICBuZXdfeSA9IDA7CiAgICB9CiAgICBlbG0uc3R5bGUudG9wID0gbmV3X3kgKyAncHgnOwp9OwpUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9zZXR1cF9oaWdobGlnaHRfcG9zaXRpb25zID0gZnVuY3Rpb24oZWxlbWVudCwgc3R5bGUsIGNvb3JkcywgcG9zaXRpb25zKXsKICAgIGlmIChzdHlsZSA9PSAiYm9yZGVyIikgewogICAgICAgIHZhciB3aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7CiAgICAgICAgdmFyIGhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0OwogICAgICAgIHZhciBzdGVwID0gMDsKICAgICAgICB2YXIgdGhpY2tuZXNzID0gMjsKICAgICAgICB2YXIgZnVkZ2VfZXhwYW5kID0gNDsKICAgICAgICBwb3NpdGlvbnMucHVzaCh7CiAgICAgICAgICAgIHg6IGNvb3Jkcy54IC0gc3RlcCAtIHRoaWNrbmVzcywKICAgICAgICAgICAgeTogY29vcmRzLnkgLSBzdGVwIC0gdGhpY2tuZXNzLAogICAgICAgICAgICB3aWR0aDogd2lkdGggKyAyICogc3RlcCArIDIgKiB0aGlja25lc3MgKyBmdWRnZV9leHBhbmQsCiAgICAgICAgICAgIGhlaWdodDogdGhpY2tuZXNzCiAgICAgICAgfSk7CiAgICAgICAgcG9zaXRpb25zLnB1c2goewogICAgICAgICAgICB4OiBjb29yZHMueCArIHdpZHRoICsgc3RlcCArIGZ1ZGdlX2V4cGFuZCwKICAgICAgICAgICAgeTogY29vcmRzLnkgLSBzdGVwIC0gdGhpY2tuZXNzLAogICAgICAgICAgICB3aWR0aDogdGhpY2tuZXNzLAogICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArIDIgKiBzdGVwICsgMiAqIHRoaWNrbmVzcyArIGZ1ZGdlX2V4cGFuZAogICAgICAgIH0pOwogICAgICAgIHBvc2l0aW9ucy5wdXNoKHsKICAgICAgICAgICAgeDogcG9zaXRpb25zWzBdLngsCiAgICAgICAgICAgIHk6IHBvc2l0aW9uc1swXS55LAogICAgICAgICAgICB3aWR0aDogcG9zaXRpb25zWzBdLndpZHRoLAogICAgICAgICAgICBoZWlnaHQ6IHBvc2l0aW9uc1swXS5oZWlnaHQKICAgICAgICB9KTsKICAgICAgICBwb3NpdGlvbnMucHVzaCh7CiAgICAgICAgICAgIHg6IHBvc2l0aW9uc1sxXS54LAogICAgICAgICAgICB5OiBwb3NpdGlvbnNbMV0ueSwKICAgICAgICAgICAgd2lkdGg6IHBvc2l0aW9uc1sxXS53aWR0aCwKICAgICAgICAgICAgaGVpZ2h0OiBwb3NpdGlvbnNbMV0uaGVpZ2h0CiAgICAgICAgfSk7CiAgICAgICAgcG9zaXRpb25zWzJdLnkgKz0gaGVpZ2h0ICsgdGhpY2tuZXNzICsgMiAqIHN0ZXAgKyBmdWRnZV9leHBhbmQ7CiAgICAgICAgcG9zaXRpb25zWzNdLnggLT0gd2lkdGggKyB0aGlja25lc3MgKyAyICogc3RlcCArIGZ1ZGdlX2V4cGFuZDsKICAgIH0KICAgIGVsc2UgCiAgICAgICAgaWYgKHN0eWxlID09ICJiYWxsIikgewogICAgICAgICAgICBwb3NpdGlvbnMucHVzaCh7CiAgICAgICAgICAgICAgICB4OiBjb29yZHMueCArIDIsCiAgICAgICAgICAgICAgICB5OiBjb29yZHMueSwKICAgICAgICAgICAgICAgIHdpZHRoOiAyLAogICAgICAgICAgICAgICAgaGVpZ2h0OiA2CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBwb3NpdGlvbnMucHVzaCh7CiAgICAgICAgICAgICAgICB4OiBjb29yZHMueCwKICAgICAgICAgICAgICAgIHk6IGNvb3Jkcy55ICsgMiwKICAgICAgICAgICAgICAgIHdpZHRoOiA2LAogICAgICAgICAgICAgICAgaGVpZ2h0OiAyCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBwb3NpdGlvbnMucHVzaCh7CiAgICAgICAgICAgICAgICB4OiBjb29yZHMueCArIDEsCiAgICAgICAgICAgICAgICB5OiBjb29yZHMueSArIDEsCiAgICAgICAgICAgICAgICB3aWR0aDogNCwKICAgICAgICAgICAgICAgIGhlaWdodDogNAogICAgICAgICAgICB9KTsKICAgICAgICB9Cn07ClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2hpZ2hsaWdodF9ib3JkZXIgPSBmdW5jdGlvbihlbGVtZW50LCBzdHlsZSwgZXZlbnQpIC8vIG51bGwgLSBoaWRlIGJvcmRlcgp7CiAgICBpZiAoZWxlbWVudCAhPSBudWxsKSB7CiAgICAgICAgaWYgKFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfYm9yZGVyID09IG51bGwgfHwgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXJbMF0ub3duZXJEb2N1bWVudCAhPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpIHsKICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXIgPSBbXTsKICAgICAgICAgICAgdmFyIG4gPSBzdHlsZSA9PSAiYm9yZGVyIiA/IDQgOiBzdHlsZSA9PSAiYmFsbCIgPyAzIDogMDsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHsKICAgICAgICAgICAgICAgIHZhciBiID0gZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICAgICAgYi5zdHlsZS5wb3NpdGlvbiA9ICJhYnNvbHV0ZSI7CiAgICAgICAgICAgICAgICBiLnN0eWxlLnpJbmRleCA9ICIxIjsKICAgICAgICAgICAgICAgIGIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXJfbm9ybWFsX2NvbG9yOwogICAgICAgICAgICAgICAgZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYik7CiAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2JvcmRlci5wdXNoKGIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciBjb29yZHMgPSBudWxsOwogICAgICAgIGlmIChzdHlsZSA9PSAiYm9yZGVyIikgewogICAgICAgICAgICBjb29yZHMgPSBUZXN0LkFub3RoZXJXYXkuX2dldF9wYWdlX2Nvb3JkcyhlbGVtZW50KTsKICAgICAgICB9CiAgICAgICAgZWxzZSAKICAgICAgICAgICAgaWYgKHN0eWxlID09ICJiYWxsIikgewogICAgICAgICAgICAgICAgaWYgKGV2ZW50ICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQucGFnZVggIT0gbnVsbCAmJiBldmVudC5wYWdlWSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkcyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IGV2ZW50LnBhZ2VYIC0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGV2ZW50LnBhZ2VZIC0gMAogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuY2xpZW50WCAhPSBudWxsICYmIGV2ZW50LmNsaWVudFkgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvYyA9IGVsZW1lbnQub3duZXJEb2N1bWVudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2MgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkcyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogKGV2ZW50LmNsaWVudFggLSAwKSArIGRvYy5ib2R5LnNjcm9sbExlZnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IChldmVudC5jbGllbnRZIC0gMCkgKyBkb2MuYm9keS5zY3JvbGxUb3AKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICBpZiAoY29vcmRzICE9IG51bGwgJiYgZWxlbWVudC5jbGllbnRXaWR0aCAhPSBudWxsICYmIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICE9IG51bGwpIHsKICAgICAgICAgICAgdmFyIHBvc2l0aW9ucyA9IFtdOwogICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9zZXR1cF9oaWdobGlnaHRfcG9zaXRpb25zKGVsZW1lbnQsIHN0eWxlLCBjb29yZHMsIHBvc2l0aW9ucyk7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICB2YXIgYiA9IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfYm9yZGVyW2ldOwogICAgICAgICAgICAgICAgdmFyIHAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3NldF9wYWdlX2Nvb3JkcyhiLCBwLngsIHAueSk7CiAgICAgICAgICAgICAgICBiLnN0eWxlLndpZHRoID0gcC53aWR0aCArICJweCI7CiAgICAgICAgICAgICAgICBiLnN0eWxlLmhlaWdodCA9IHAuaGVpZ2h0ICsgInB4IjsKICAgICAgICAgICAgICAgIGIuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXIgIT0gbnVsbCkgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfYm9yZGVyLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2JvcmRlcltpXS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9OwpUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9mbGFzaF9ib3JkZXIgPSBmdW5jdGlvbihjb2xvcil7CiAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXJfZmxhc2hpbmcpIHsgLy9hbHJlYWR5CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXJfZmxhc2hlcy5wdXNoKHsKICAgICAgICAgICAgY29sb3I6IFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfYm9yZGVyX25vcm1hbF9jb2xvciwKICAgICAgICAgICAgdGltZW91dDogMzAwCiAgICAgICAgfSk7CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF9ib3JkZXJfZmxhc2hlcy5wdXNoKHsKICAgICAgICAgICAgY29sb3I6IGNvbG9yLAogICAgICAgICAgICB0aW1lb3V0OiA2MDAKICAgICAgICB9KTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfYm9yZGVyX2ZsYXNoaW5nID0gdHJ1ZTsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcmVjb3JkX2JvcmRlcl9mbGFzaGVzLnB1c2goewogICAgICAgICAgICBjb2xvcjogY29sb3IsCiAgICAgICAgICAgIHRpbWVvdXQ6IDYwMAogICAgICAgIH0pOwogICAgICAgIFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2ZsYXNoX2JvcmRlcl90aW1lb3V0KCk7CiAgICB9Cn07ClRlc3QuQW5vdGhlcldheS5fcmVjb3JkX3ByZXBhcmVfZG9jX2Zvcl9yZXN1bHRzID0gZnVuY3Rpb24oKXsKICAgIGRvY3VtZW50Lm9wZW4oKTsKICAgIGRvY3VtZW50LndyaXRlKCI8IURPQ1RZUEUgSFRNTCBQVUJMSUMgXCItLy9XM0MvL0RURCBIVE1MIDQuMDEvL0VOXCIgXCJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9zdHJpY3QuZHRkXCI+Iik7CiAgICBkb2N1bWVudC53cml0ZSgiPGh0bWw+PGhlYWQ+PHRpdGxlPiBJbnB1dCByZWNvcmRpbmcgcmVzdWx0czwvdGl0bGU+Iik7CiAgICBkb2N1bWVudC53cml0ZSgiPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPiIpOwogICAgZG9jdW1lbnQud3JpdGUoImJvZHkgeyBmb250OiBub3JtYWwgbm9ybWFsIHNtYWxsZXIgc2Fucy1zZXJpZjsgfSIpOwogICAgZG9jdW1lbnQud3JpdGUoImRpdiB7IG1hcmdpbi10b3A6IDNweDsgfSIpOwogICAgZG9jdW1lbnQud3JpdGUoIjwvc3R5bGU+PC9oZWFkPjxib2R5PiIpOwogICAgLy8gb3BlcmEgYW5kIG1vemlsbGEgZGlzYWdyZWUgb3ZlciB3aG8gdGhlIG9wZW5lciBpcy4KICAgIGlmICh0eXBlb2Yod2luZG93Lm9wZW5lci5UZXN0KSAhPSAidW5kZWZpbmVkIiAmJiB0eXBlb2Yod2luZG93Lm9wZW5lci5UZXN0LkFub3RoZXJXYXkpICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgd2luZG93Lm9wZW5lci5UZXN0LkFub3RoZXJXYXkuX3JlY29yZF9zYXZlX3Jlc3VsdHMoZG9jdW1lbnQpOwogICAgICAgIHdpbmRvdy5vcGVuZXIuVGVzdC5Bbm90aGVyV2F5Ll9nX3JlY29yZF93YWl0aW5nX2Zvcl9yZXN1bHRzID0gZmFsc2U7CiAgICAgICAgd2luZG93Lm9wZW5lci5UZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX3VwZGF0ZV91aSgpOwogICAgfQogICAgZWxzZSAKICAgICAgICBpZiAodHlwZW9mKHdpbmRvdy5vcGVuZXIub3BlbmVyLlRlc3QpICE9ICJ1bmRlZmluZWQiICYmIHR5cGVvZih3aW5kb3cub3BlbmVyLm9wZW5lci5UZXN0LkFub3RoZXJXYXkpICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgIHdpbmRvdy5vcGVuZXIub3BlbmVyLlRlc3QuQW5vdGhlcldheS5fcmVjb3JkX3NhdmVfcmVzdWx0cyhkb2N1bWVudCk7CiAgICAgICAgICAgIHdpbmRvdy5vcGVuZXIub3BlbmVyLlRlc3QuQW5vdGhlcldheS5fZ19yZWNvcmRfd2FpdGluZ19mb3JfcmVzdWx0cyA9IGZhbHNlOwogICAgICAgICAgICB3aW5kb3cub3BlbmVyLm9wZW5lci5UZXN0LkFub3RoZXJXYXkuX3JlY29yZF9jb250cm9sX3VwZGF0ZV91aSgpOwogICAgICAgIH0KICAgIGRvY3VtZW50LndyaXRlKCI8L2JvZHk+Iik7CiAgICBkb2N1bWVudC5jbG9zZSgpOwp9OwoKLy8gZ2xvYmFsIGluaXRpYWxpemF0aW9uCm9ubG9hZCA9IGZ1bmN0aW9uKCl7CiAgICBpZiAod2luZG93Lm9wZXJhKSB7CiAgICAgICAgdmFyIGdvb2Rfb3BlcmEgPSB0eXBlb2Yod2luZG93Lm9wZXJhLnZlcnNpb24pID09ICJmdW5jdGlvbiI7CiAgICAgICAgZ29vZF9vcGVyYSA9IGdvb2Rfb3BlcmEgJiYgd2luZG93Lm9wZXJhLnZlcnNpb24oKS5tYXRjaCgvXlxzKihcZCspLyk7CiAgICAgICAgZ29vZF9vcGVyYSA9IGdvb2Rfb3BlcmEgJiYgUmVnRXhwLiQxID49IDg7CiAgICB9CiAgICB2YXIgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIlNQQU4iKTsKICAgIHNwYW4uaW5uZXJIVE1MID0gIjwhLS1baWYgSUVdPjxiciAvPjwhW2VuZGlmXS0iICsgIi0+IjsKICAgIHZhciBpc19pZSA9IHNwYW4uZ2V0RWxlbWVudHNCeVRhZ05hbWUoIkJSIikubGVuZ3RoID4gMDsKICAgIAogICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfaWZyYW1lID0gd2luZG93LmZyYW1lcy50ZXN0X2lmcmFtZTsKICAgIAogICAgdmFyIHF1ZXJ5X3N0ciA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7CiAgICBpZiAocXVlcnlfc3RyLmNoYXJBdCgwKSA9PSAiPyIpIHsKICAgICAgICBxdWVyeV9zdHIgPSBxdWVyeV9zdHIuc3Vic3RyaW5nKDEpOwogICAgfQogICAgdmFyIHRlc3RsaXN0X3BhZ2UgPSAibGlzdC10ZXN0cy5odG1sIjsKICAgIHZhciBhdXRvX3J1biA9IGZhbHNlOwogICAgaWYgKHF1ZXJ5X3N0ciAhPSAiIikgewogICAgICAgIHZhciBwYXJhbXMgPSBbcXVlcnlfc3RyXTsKICAgICAgICBpZiAocXVlcnlfc3RyLmluZGV4T2YoIjsiKSAhPSAtMSkgewogICAgICAgICAgICBwYXJhbXMgPSBxdWVyeV9zdHIuc3BsaXQoIjsiKTsKICAgICAgICB9CiAgICAgICAgZWxzZSAKICAgICAgICAgICAgaWYgKHF1ZXJ5X3N0ci5pbmRleE9mKCImIikgIT0gLTEpIHsKICAgICAgICAgICAgICAgIHBhcmFtcyA9IHF1ZXJ5X3N0ci5zcGxpdCgiJiIpOwogICAgICAgICAgICB9CiAgICAgICAgZm9yICh2YXIgcGFyYW1faSA9IDA7IHBhcmFtX2kgPCBwYXJhbXMubGVuZ3RoOyArK3BhcmFtX2kpIHsKICAgICAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zW3BhcmFtX2ldLnNwbGl0KCI9Iik7CiAgICAgICAgICAgIGlmIChwYXJhbVswXSA9PSAicmVjb3JkaW5nX3Jlc3VsdHMiKSB7CiAgICAgICAgICAgICAgICBpZiAod2luZG93Lm9wZW5lciAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gd2Ugd2VyZSB0b2xkIHRvIHNob3cgcmVjb3JkaW5nIHJlc3VsdHMgLSByZXBsYWNlIGV2ZXJ5dGhpbmcgaW4gdGhlIGRvY3VtZW50IHdpdGggdGhlIHJlc3VsdHMKICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9wcmVwYXJlX2RvY19mb3JfcmVzdWx0cygpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgaWYgKHBhcmFtWzBdID09ICJ0ZXN0cGFnZSIpIHsKICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2FkZF90ZXN0X3BhZ2VfdXJsKGRlY29kZVVSSUNvbXBvbmVudChwYXJhbVsxXSksICJhbm90aGVyd2F5Iik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVswXSA9PSAianNhbnRlc3RwYWdlIikgewogICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2FkZF90ZXN0X3BhZ2VfdXJsKGRlY29kZVVSSUNvbXBvbmVudChwYXJhbVsxXSksICJqc2FuIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVswXSA9PSAidGVzdGxpc3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0bGlzdF9wYWdlID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtWzFdKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtWzBdID09ICJ0ZXN0ZnJhbWUiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5vcGVyYSAmJiAhZ29vZF9vcGVyYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3Nob3dfZXJyb3IoInRlc3RmcmFtZSBwYXJhbWV0ZXIgZG9lcyBub3Qgd29yayBpbiB2ZXJzaW9ucyBvZiBPcGVyYSBwcmlvciB0byA4LjAuIFNvcnJ5IChwYXRoY2hlcyBhcmUgd2VsY29tZSkuIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgNyBiYXJmcyBvbiBhdHRlbXB0IHRvIGFjY2VzcyBmcmFtZS5mcmFtZUVsZW1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgc29tZW9uZSBrbm93cyBhIHdheSB0byBhc3NpZ24gb25sb2FkIGhhbmRsZXIgdG8gdGhhdCBpZnJhbWUgaW4gT3BlcmEgNwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpdGhvdXQgZGlzcnVwdGluZyBjb2RlIHRoYXQgd29ya3MgaW4gb3RoZXIgYnJvd3NlcnMsIHBhdGNoZXMgYXJlIHdlbGNvbWUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJhbWVfcGF0aCA9IHBhcmFtWzFdLnNwbGl0KCIuIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZSA9IHRvcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZnJhbWVfcGF0aF9pID0gMDsgZnJhbWVfcGF0aF9pIDwgZnJhbWVfcGF0aC5sZW5ndGg7ICsrZnJhbWVfcGF0aF9pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZSA9IGZyYW1lW2ZyYW1lX3BhdGhbZnJhbWVfcGF0aF9pXV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyYW1lID09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fc2hvd19lcnJvcigidW5hYmxlIHRvIGZpbmQgZnJhbWUgc3BlY2lmaWVkIGZvciBsb2FkaW5nIHRlc3QgcGFnZXM6ICIgKyBwYXJhbVsxXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWUuZnJhbWVFbGVtZW50ICE9IG51bGwpIHsgLy8gZm9yIHRoZSBmb2xsb3dpbmcgYXNzaWduZW1lbnQgdG8gb25sb2FkIHRvIHdvcmssIGZyYW1lRWxlbWVudCBpcyByZXF1aXJlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lID0gZnJhbWUuZnJhbWVFbGVtZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfaWZyYW1lID0gZnJhbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVswXSA9PSAidGVzdGZyYW1lX25vX2NsZWFyIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdF9mcmFtZV9ub19jbGVhciA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVswXSA9PSAid2luZG93cyIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVsxXSA9PSAibm9uZSIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX3Rlc3Rfb2JqZWN0X3QucHJvdG90eXBlLm9wZW5fd2luZG93ID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtWzBdID09ICJydW4iKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b19ydW4gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVsxXSA9PSAiYWxsIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcGFnZXNfdG9fcnVuID0gImFsbCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nX3BhZ2VzX3RvX3J1biA9PSBudWxsIHx8IFRlc3QuQW5vdGhlcldheS5fZ19wYWdlc190b19ydW4gPT0gImFsbCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19wYWdlc190b19ydW4gPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZXMgPSBwYXJhbVsxXS5zcGxpdCgiLCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZ2VzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcGFnZXNfdG9fcnVuLnB1c2gocGFnZXNbaV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGlmIChUZXN0LkFub3RoZXJXYXkuX2dfdGVzdF9wYWdlX3VybHMubGVuZ3RoID09IDApIHsgLy8gaWYgbm8gaW5kaXZpZHVhbCBwYWdlcyB3ZXJlIGdpdmVuIG9uIHRoZSBjb21tYW5kIGxpbmUsIGxvYWQgdGhlIGxpc3QKICAgICAgICB2YXIgcmVzdWx0ID0gVGVzdC5Bbm90aGVyV2F5Ll9zZXRfaWZyYW1lX2xvY2F0aW9uKHdpbmRvdy5mcmFtZXNbImxpc3RfaWZyYW1lIl0sIHRlc3RsaXN0X3BhZ2UpOwogICAgICAgIGlmIChyZXN1bHQubXNnICE9IG51bGwpIHsKICAgICAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9zaG93X2Vycm9yKHJlc3VsdC5tc2cpOwogICAgICAgIH0KICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcnVuX29uX2xpc3RfbG9hZCA9IGF1dG9fcnVuOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgVGVzdC5Bbm90aGVyV2F5Ll9nX3J1bl9vbl9tYWluX2xvYWQgPSBhdXRvX3J1bjsKICAgIH0KICAgIAogICAgdmFyIGYgPSBUZXN0LkFub3RoZXJXYXkuX2dfdGVzdF9pZnJhbWU7CiAgICB0cnkgewogICAgICAgIGlmIChmLmF0dGFjaEV2ZW50ICE9IG51bGwpIHsKICAgICAgICAgICAgZi5hdHRhY2hFdmVudCgib25sb2FkIiwgVGVzdC5Bbm90aGVyV2F5Ll90ZXN0X3BhZ2Vfb25sb2FkKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGYub25sb2FkID0gVGVzdC5Bbm90aGVyV2F5Ll90ZXN0X3BhZ2Vfb25sb2FkOwogICAgICAgIH0KICAgICAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfaWZyYW1lLm5vZGVUeXBlICE9IG51bGwgJiYgVGVzdC5Bbm90aGVyV2F5Ll9nX3Rlc3RfaWZyYW1lLmNvbnRlbnRXaW5kb3cgIT0gbnVsbCkgeyAvLyBpdCdzIGlmcmFtZSBlbGVtZW50LCBub3QgdGhlIGlmcmFtZS4gd2UgbmVlZCBpZnJhbWUuCiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ190ZXN0X2lmcmFtZSA9IFRlc3QuQW5vdGhlcldheS5fZ190ZXN0X2lmcmFtZS5jb250ZW50V2luZG93OwogICAgICAgIH0KICAgIH0gCiAgICBjYXRjaCAoZSkgewogICAgICAgIC8vIGlnbm9yZSBzdHVwaWQgb3BlcmEgZXJyb3IgaWYgdGhlIGZyYW1lIGhhcyBvbmxvYWQgaGFuZGxlciBhc3NpZ25lZCBpbiB0aGUgaW5saW5lIGh0bWwKICAgIH0KICAgIHZhciBoYW5kbGVycyA9IHsKICAgICAgICAicnVuX2FsbCI6IHsKICAgICAgICAgICAgIm9uY2xpY2siOiBUZXN0LkFub3RoZXJXYXkuX3J1bl9hbGxfb25jbGljawogICAgICAgIH0sCiAgICAgICAgInJ1bl9zZWxlY3RlZCI6IHsKICAgICAgICAgICAgIm9uY2xpY2siOiBUZXN0LkFub3RoZXJXYXkuX3J1bl9zZWxlY3RlZF9vbmNsaWNrCiAgICAgICAgfSwKICAgICAgICAidW5zZWxlY3RfYWxsIjogewogICAgICAgICAgICAib25jbGljayI6IFRlc3QuQW5vdGhlcldheS5fdW5zZWxlY3RfYWxsX29uY2xpY2sKICAgICAgICB9LAogICAgICAgICJyZWNvcmRfc2VsZWN0IjogewogICAgICAgICAgICAib25mb2N1cyI6IFRlc3QuQW5vdGhlcldheS5fcmVjb3JkX2NoZWNrX29uZm9jdXMKICAgICAgICB9LAogICAgICAgICJyZWNvcmRfaW5wdXQiOiB7CiAgICAgICAgICAgICJvbmZvY3VzIjogVGVzdC5Bbm90aGVyV2F5Ll9yZWNvcmRfY2hlY2tfb25mb2N1cwogICAgICAgIH0sCiAgICAgICAgInJlY29yZF9zdGFydCI6IHsKICAgICAgICAgICAgIm9uY2xpY2siOiBUZXN0LkFub3RoZXJXYXkuX3JlY29yZF9zdGFydF9vbmNsaWNrCiAgICAgICAgfSwKICAgICAgICAiY2xlYXJfYnRuIjogewogICAgICAgICAgICAib25jbGljayI6IFRlc3QuQW5vdGhlcldheS5fcmVzdWx0c19jbGVhcl9vbmNsaWNrCiAgICAgICAgfSwKICAgICAgICAicmVzdWx0c190YWIiOiB7CiAgICAgICAgICAgICJvbmNsaWNrIjogVGVzdC5Bbm90aGVyV2F5Ll90YWJfb25jbGljaywKICAgICAgICAgICAgIm9ubW91c2VvdmVyIjogVGVzdC5Bbm90aGVyV2F5Ll90YWJfbW91c2VvdmVyLAogICAgICAgICAgICAib25tb3VzZW91dCI6IFRlc3QuQW5vdGhlcldheS5fdGFiX21vdXNlb3V0CiAgICAgICAgfSwKICAgICAgICAiZGVidWdfdGFiIjogewogICAgICAgICAgICAib25jbGljayI6IFRlc3QuQW5vdGhlcldheS5fdGFiX29uY2xpY2ssCiAgICAgICAgICAgICJvbm1vdXNlb3ZlciI6IFRlc3QuQW5vdGhlcldheS5fdGFiX21vdXNlb3ZlciwKICAgICAgICAgICAgIm9ubW91c2VvdXQiOiBUZXN0LkFub3RoZXJXYXkuX3RhYl9tb3VzZW91dAogICAgICAgIH0KICAgIH07CiAgICBmb3IgKHZhciBocyBpbiBoYW5kbGVycykgewogICAgICAgIHZhciBvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaHMpOwogICAgICAgIGlmIChvICE9IG51bGwpIHsKICAgICAgICAgICAgZm9yICh2YXIgaCBpbiBoYW5kbGVyc1toc10pIHsKICAgICAgICAgICAgICAgIG9baF0gPSBoYW5kbGVyc1toc11baF07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIFRlc3QuQW5vdGhlcldheS5fc2hvd19lcnJvcigidW5hYmxlIHRvIHNldCAiICsgaCArICIgaGFuZGxlcjogaWQgIiArIGhzICsgIiBub3QgZm91bmQiKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGlmICh3aW5kb3cub3BlcmEgJiYgIWdvb2Rfb3BlcmEpIHsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfbm9fcmVjb3JkX21zZyA9ICJJbnB1dCBldmVudHMgcmVjb3JkaW5nIGFuZCByZXBsYXlpbmcgaXMgbm90IGF2YWlsYWJsZSBpbiBvcGVyYSB2ZXJzaW9ucyBwcmlvciB0byA4LjAuIjsKICAgIH0KICAgIGlmIChpc19pZSkgewogICAgICAgIFRlc3QuQW5vdGhlcldheS5fZ19ub19yZWNvcmRfbXNnID0gIklucHV0IGV2ZW50cyByZWNvcmRpbmcgYW5kIHJlcGxheWluZyBpcyBub3QgYXZhaWxhYmxlIGluIGludGVybmV0IGV4cGxvcmVyLiI7CiAgICB9CiAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nX25vX3JlY29yZF9tc2cgIT0gbnVsbCkgewogICAgICAgIHZhciBub19yZWNvcmRfcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyZWNvcmRfbm90X3N1cHBvcnRlZCIpOwogICAgICAgIG5vX3JlY29yZF9wLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwogICAgICAgIG5vX3JlY29yZF9wLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFRlc3QuQW5vdGhlcldheS5fZ19ub19yZWNvcmRfbXNnKSk7CiAgICB9CiAgICAKICAgIFRlc3QuQW5vdGhlcldheS5fZ19tYWluX2xvYWRlZCA9IHRydWU7CiAgICBpZiAoVGVzdC5Bbm90aGVyV2F5Ll9nX3J1bl9vbl9tYWluX2xvYWQpIHsKICAgICAgICBUZXN0LkFub3RoZXJXYXkuX2dfcnVuX29uX21haW5fbG9hZCA9IGZhbHNlOwogICAgICAgIFRlc3QuQW5vdGhlcldheS5fcnVuX3BhZ2VzX3RvX3J1bigpOwogICAgfQp9Owo=",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 21:23:28 GMT",
                    "Content-Length": "105818",
                    "Date": "Fri, 07 Nov 2014 21:23:30 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}