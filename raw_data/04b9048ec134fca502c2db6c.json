{
    "url": "http://localhost:9999/adilyalcin/Keshif/demo/data/html5rocks.html",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>document.location.href</b> and written to <b>window.history.replaceState()</b> via the following statement:<ul><li>window.history.replaceState(             {}, '', document.location.href.replace(/\\?utm_.*/, ''));</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/adilyalcin/Keshif/demo/data/html5rocks.html",
                "path": "/adilyalcin/Keshif/demo/data/html5rocks.html",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hZGlseWFsY2luL0tlc2hpZi9kZW1vL2RhdGEvaHRtbDVyb2Nrcy5odG1sIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "HTTP/1.1 200 OK
Content-Length: 168103
Accept-Ranges: bytes
Content-Type: text/html; charset=utf-8
Date: Fri, 07 Nov 2014 08:00:56 GMT
Last-Modified: Fri, 07 Nov 2014 08:00:54 GMT

<!DOCTYPE html>




<html lang="en" dir="ltr" itemscope itemtype="http://schema.org/Article">
<head>
  <meta charset="utf-8">
  <meta property="twitter:account_id" content="1593210261" />
  <!-- Copyright (c) 2012 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * Author: 
   *
   * 
   *
  -->
  <title>Tutorials - HTML5 Rocks</title>
  <meta name="description" content="A resource for developers looking to put HTML5 to use today, including information on specific features and when to use them in your apps.">
  <meta name="keywords" content="html5,html 5,html5 demos,html5 examples,javascript,css3,notifications,geolocation,web workers,apppcache,file api,filereader,indexeddb,offline,audio,video,drag and drop,chrome,sse,mobile">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">

  <link rel="shortcut icon" href="/favicon.ico">
  <link rel="alternate" type="application/rss+xml" title="HTML5 Rocks RSS" href="http://feeds.feedburner.com/html5rocks">

  <meta itemprop="name" content=" - HTML5 Rocks">
  <meta itemprop="description" content="A resource for developers looking to put HTML5 to use today, including information on specific features and when to use them in your apps.">
  
  <meta itemprop="image" content="http://www.html5rocks.com/static/images/html5rocks-logo-wings.png">
  

  

  
  
  <link rel="publisher" href="https://plus.google.com/+GoogleChromeDevelopers">

  

  
    
    <link rel="stylesheet" media="all" href="/static/css/v2-combined.min.css?20131111">
    

    
  

  <link href="//fonts.googleapis.com/css?family=Open+Sans:300,400,400italic,600,800" rel="stylesheet">

  <link rel="apple-touch-icon" href="/static/images/identity/HTML5_Badge_64.png">
  <link rel="apple-touch-icon-precomposed" href="/static/images/identity/HTML5_Badge_64.png">

  <script src="/static/js/modernizr.custom.82437.js"></script>

  <!--[if lt IE 9]>
  <script src="http://html5shim.googlecode.com/svn/trunk/html5-els.js"></script>
  <![endif]-->

  
</head>
<body data-href="tutorials" onload="" class="article tutorial listing">

  <header class="main" id="siteheader">
    <h1 id="title">
      <a href="/en/" title="HTML5 Rocks">HTML5 Rocks</a>
    </h1>
    <a href="#sitenav" id="navtoggle">Show navigation</a>

    

    <nav id="sitenav">
      <ul>
        
        <li id="home_menu"><a href="/en/" class="home">Home</a></li>
        
        <li id="tutorials_menu"><a href="/en/tutorials/?page=1" class="tutorials">Tutorials</a></li>
        <li id="updates_menu"><a href="/en/updates/" class="updates">Updates</a></li>
        <li id="contrib_menu"><a href="https://github.com/html5rocks/www.html5rocks.com/blob/master/CONTRIBUTING.md" target="_blank">Contribute</a></li>
        <li id="slides_menu"><a href="/en/slides" class="slides">Slides</a></li>
        <li id="resources_menu"><a href="/en/resources" class="resources">Resources</a></li>
      </ul>
    </nav>

    
  </header>

  <div class="body-content">
    
  <section class="title">

    

    <section class="title-text container">
      <h1>Tutorials</h1>
      <a href="/en/" class="watermark">HTML5 Rocks</a>
    </section>
  </section>

  <article class="content-wrapper wide">

    <section class="container">

      <section class="search">
        <form action="/en/search" role="search">
          <legend>Search</legend>
          <label for="q">Search:</label>
          <input type="search" name="q" id="q" autocomplete="off" placeholder="Search" />
          <input type="submit" id="search-button" value="Search">
        </form>
      </section>

      <div class="pager">
        
      </div>

      <div class="articles-list">

        <ul>
        
          <li>
            <a href="/en/tutorials/developertools/chrome-35/">
              <span class="left">
                <span class="author" data-author_id="umarhansa"><img src="/static/images/profiles/75/umarhansa.75.png" alt="Umar Hansa" title="Umar Hansa" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 26th, 2014</span>
                <span class="title">
                  DevTools Digest - Chrome 35: Updates to the Developer Tools in Chrome 35
                </span>
                <span class="description">Updates to the Chrome Developer Tools: CSS property quick search, memory stats for heap snapshots, CodeMirror upgrade and more.</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/es7/observe/">
              <span class="left">
                <span class="author" data-author_id="addyosmani"><img src="/static/images/profiles/75/addyosmani.75.png" alt="Addy Osmani" title="Addy Osmani" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 20th, 2014</span>
                <span class="title">
                  Data-binding Revolutions with Object.observe()
                </span>
                <span class="description">Learn about Object.observe() - a new feature giving JavaScript the power to directly observe changes to objects.</span>
                
                  <span class="tag">object.observe</span>
                
                  <span class="tag">es7</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/async-call-stack/">
              <span class="left">
                <span class="author" data-author_id="pearlchen"><img src="/static/images/profiles/75/pearlchen.75.png" alt="Pearl Chen" title="Pearl Chen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 26th, 2014</span>
                <span class="title">
                  Debugging Asynchronous JavaScript with Chrome DevTools
                </span>
                <span class="description">Up your JavaScript debugging kung fu with asynchronous call stack traces in the Chrome DevTools.</span>
                
                  <span class="tag">devtools</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/buildwithchrome/">
              <span class="left">
                <span class="author" data-author_id="hanseklund"><img src="/static/images/profiles/75/hanseklund.75.png" alt="Hans Eklund" title="Hans Eklund" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 6th, 2014</span>
                <span class="title">
                  Build with Chrome: Bringing LEGO® bricks to the Multi-Device Web
                </span>
                <span class="description">The Build With Chrome team redesigned the site to support both mouse and touch input.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/chrome-33/">
              <span class="left">
                <span class="author" data-author_id="umarhansa"><img src="/static/images/profiles/75/umarhansa.75.png" alt="Umar Hansa" title="Umar Hansa" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 27th, 2014</span>
                <span class="title">
                  DevTools Digest: Updates to the Developer tools in Chrome 33
                </span>
                <span class="description">Updates to the Chrome Developer Tools: async call stacks, edit locations, goto :line:column</span>
                
                  <span class="tag">devtools</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/tooling/supercharging-your-gruntfile/">
              <span class="left">
                <span class="author" data-author_id="paulbakaus"><img src="/static/images/profiles/75/paulbakaus.75.png" alt="Paul Bakaus" title="Paul Bakaus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 13th, 2014</span>
                <span class="title">
                  Supercharging your Gruntfile: How to squeeze the most out of your build configuration.
                </span>
                <span class="description">Learn how to squeeze the most out of your Gruntfile, by splitting it across multiple files, autoloading, concurrent tasks and smart notifications.</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">grunt</span>
                
                  <span class="tag">optimization</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webrtc/datachannels/">
              <span class="left">
                <span class="author" data-author_id="danristic"><img src="/static/images/profiles/75/danristic.75.png" alt="Dan Ristic" title="Dan Ristic" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 4th, 2014</span>
                <span class="title">
                  WebRTC data channels: WebRTC data channels for high performance data exchange
                </span>
                <span class="description">WebRTC data channels for high performance data exchange</span>
                
                  <span class="tag">webrtc</span>
                
                  <span class="tag">data</span>
                
                  <span class="tag">communication</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/offline/quota-research/">
              <span class="left">
                <span class="author" data-author_id="agektmr"><img src="/static/images/profiles/75/agektmr.75.png" alt="Eiji Kitamura" title="Eiji Kitamura" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 28th, 2014</span>
                <span class="title">
                  Working with quota on mobile browsers: A research report on browser storage
                </span>
                <span class="description">An in-depth article about the state of client-side storage on mobile devices.</span>
                
                  <span class="tag">offline</span>
                
                  <span class="tag">storage</span>
                
                  <span class="tag">indexedDB</span>
                
                  <span class="tag">fileSystem</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webperformance/usertiming/">
              <span class="left">
                <span class="author" data-author_id="alexdanilo"><img src="/static/images/profiles/75/alexdanilo.75.png" alt="Alex Danilo" title="Alex Danilo" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 21st, 2014</span>
                <span class="title">
                  User Timing API: Understanding your Web App
                </span>
                <span class="description">Get accurate and detailed timing statistics-natively-for page navigation and load events</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">timing</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/eme/basics/">
              <span class="left">
                <span class="author" data-author_id="dutton"><img src="/static/images/profiles/75/dutton.75.png" alt="Sam Dutton" title="Sam Dutton" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 16th, 2014</span>
                <span class="title">
                  EME WTF?: An introduction to Encrypted Media Extensions
                </span>
                <span class="description">Encrypted Media Extensions provides an API that enables web applications to interact with content protection systems. Learn how to allow playback of encrypted audio and video.</span>
                
                  <span class="tag">eme</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">video</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/es6/promises/">
              <span class="left">
                <span class="author" data-author_id="jakearchibald"><img src="/static/images/profiles/75/jakearchibald.75.png" alt="Jake Archibald" title="Jake Archibald" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 16th, 2013</span>
                <span class="title">
                  JavaScript Promises: There and back again
                </span>
                <span class="description">How to use promises natively in JavaScript.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">es6</span>
                
                  <span class="tag">promises</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/hobbit-front-end/">
              <span class="left">
                <span class="author" data-author_id="einaroberg"><img src="/static/images/profiles/75/einaroberg.75.png" alt="Einar Öberg" title="Einar Öberg" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 11th, 2013</span>
                <span class="title">
                  The Front-end of Middle-earth: A walkthrough of multi-device development
                </span>
                <span class="description">In this article we discuss the challenges, problems and solutions we encountered when creating the rest of the HTML5 experience for Middle-earth.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/devtools-terminal/">
              <span class="left">
                <span class="author" data-author_id="addyosmani"><img src="/static/images/profiles/75/addyosmani.75.png" alt="Addy Osmani" title="Addy Osmani" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 9th, 2013</span>
                <span class="title">
                  Using Your Terminal From The DevTools
                </span>
                <span class="description">How to access a complete terminal from inside the Chrome Developer Tools</span>
                
                  <span class="tag">extensions</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/mobile/">
              <span class="left">
                <span class="author" data-author_id="paulirish"><img src="/static/images/profiles/75/paulirish.75.png" alt="Paul Irish" title="Paul Irish" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 2nd, 2013</span>
                <span class="title">
                  Chrome DevTools for Mobile: Screencast and Emulation
                </span>
                <span class="description">Next-generation remote debugging and proper mobile emulation</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/novdigest/">
              <span class="left">
                <span class="author" data-author_id="deannarubin"><img src="/static/images/profiles/75/deannarubin.75.png" alt="Deanna Rubin" title="Deanna Rubin" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 27th, 2013</span>
                <span class="title">
                  Chrome DevTools November Digest
                </span>
                <span class="description">Updates to the Chrome Developer Tools: UI change, High-resolution JS profiling, Workspaces upgrades</span>
                
                  <span class="tag">devtools</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/tooling/synchronized-cross-device-testing/">
              <span class="left">
                <span class="author" data-author_id="addyosmani"><img src="/static/images/profiles/75/addyosmani.75.png" alt="Addy Osmani" title="Addy Osmani" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 25th, 2013</span>
                <span class="title">
                  Synchronized Cross-device Mobile Testing
                </span>
                <span class="description">Modern tools can help ease your cross-device testing workflow</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">testing</span>
                
                  <span class="tag">crossdevice</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/hobbit/">
              <span class="left">
                <span class="author" data-author_id="danielisaksson"><img src="/static/images/profiles/75/danielisaksson.75.png" alt="Daniel Isaksson" title="Daniel Isaksson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 20th, 2013</span>
                <span class="title">
                  The Hobbit Experience: Bringing Middle-Earth to Life with Mobile WebGL
                </span>
                <span class="description">Learn how North Kingdom built an immersive multimedia experience optimized for modern mobile browsers.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/imports/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 11th, 2013</span>
                <span class="title">
                  HTML Imports: #include for the web
                </span>
                <span class="description">HTML Imports allows you to include HTML/CSS/JS in other HTML documents.</span>
                
                  <span class="tag">imports</span>
                
                  <span class="tag">webcomponents</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/high-performance-animations/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 7th, 2013</span>
                <span class="title">
                  High Performance Animations
                </span>
                <span class="description">A deep dive into getting faster animations in your projects. We&#39;ll discover why modern browsers can animate these four properties cheaply: position, scale, rotation and opacity.</span>
                
                  <span class="tag">animations</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webrtc/infrastructure/">
              <span class="left">
                <span class="author" data-author_id="dutton"><img src="/static/images/profiles/75/dutton.75.png" alt="Sam Dutton" title="Sam Dutton" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 4th, 2013</span>
                <span class="title">
                  WebRTC in the real world: STUN, TURN and signaling
                </span>
                <span class="description">Build the back-end services you need to run a WebRTC application.</span>
                
                  <span class="tag">webrtc</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/fullscreen/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 23rd, 2013</span>
                <span class="title">
                  Building an amazing fullscreen mobile experience
                </span>
                <span class="description">We have the ability to easily make immersive fullscreen web sites and applications, but like anything on the web there are a couple of ways to do it.  Learn how to use the API and build build compelling experiences.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">fullscreen</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/animated-gifs/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 21st, 2013</span>
                <span class="title">
                  Avoiding Unnecessary Paints: Animated GIF Edition
                </span>
                <span class="description">Are animated GIFs slowing down your web app? Find and fix the problem!</span>
                
                  <span class="tag">render</span>
                
                  <span class="tag">painting</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/txt-compression/">
              <span class="left">
                <span class="author" data-author_id="coltmcanlis"><img src="/static/images/profiles/75/coltmcanlis.75.png" alt="Colt McAnlis" title="Colt McAnlis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 15th, 2013</span>
                <span class="title">
                  Text Compression for Web Developers
                </span>
                <span class="description">Reduce your page size by looking under the hood of text compression.</span>
                
                  <span class="tag">javascript</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/yeoman/">
              <span class="left">
                <span class="author" data-author_id="addyosmani"><img src="/static/images/profiles/75/addyosmani.75.png" alt="Addy Osmani" title="Addy Osmani" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 10th, 2013</span>
                <span class="title">
                  Building Web Apps With Yeoman And Polymer: Scaffold your webapps with modern tooling
                </span>
                <span class="description">Tooling for scaffolding Polymer web apps</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">yeoman</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/forms/requestautocomplete/">
              <span class="left">
                <span class="author" data-author_id="jakearchibald"><img src="/static/images/profiles/75/jakearchibald.75.png" alt="Jake Archibald" title="Jake Archibald" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 3rd, 2013</span>
                <span class="title">
                  requestAutocomplete - take my money, not my time
                </span>
                <span class="description">Optimizing website payments using the requestAutocomplete API</span>
                
                  <span class="tag">forms</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/img-compression/">
              <span class="left">
                <span class="author" data-author_id="coltmcanlis"><img src="/static/images/profiles/75/coltmcanlis.75.png" alt="Colt McAnlis" title="Colt McAnlis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 17th, 2013</span>
                <span class="title">
                  Image Compression for Web Developers
                </span>
                <span class="description">Reduce your page size by looking under the hood of image compression.</span>
                
                  <span class="tag">javascript</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/inspection/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 16th, 2013</span>
                <span class="title">
                  Canvas Inspection using Chrome DevTools
                </span>
                <span class="description">A dive into one of the newest features in Chrome DevTools: the ability to capture, replay and analyze your 2D and WebGL render calls.</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">render</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/customelements/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 28th, 2013</span>
                <span class="title">
                  Custom Elements: defining new elements in HTML
                </span>
                <span class="description">This article describes how to use document.register to define custom elements in HTML.</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">customelements</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/revolutions2013/">
              <span class="left">
                <span class="author" data-author_id="arthurevans"><img src="/static/images/profiles/75/arthurevans.75.png" alt="Arthur Evans" title="Arthur Evans" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 12th, 2013</span>
                <span class="title">
                  Chrome DevTools Revolutions 2013
                </span>
                <span class="description">A host of new DevTools features were introduced at Google I/O 2013. Now they&#39;re live in Chrome stable and ready for use!</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/internals/antialiasing-101/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 28th, 2013</span>
                <span class="title">
                  Antialiasing 101
                </span>
                <span class="description">An introduction to antialiasing, explaining how vector shapes and text are rendered smoothly.</span>
                
                  <span class="tag">render</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/static-mem-pools/">
              <span class="left">
                <span class="author" data-author_id="coltmcanlis"><img src="/static/images/profiles/75/coltmcanlis.75.png" alt="Colt McAnlis" title="Colt McAnlis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 21st, 2013</span>
                <span class="title">
                  Static Memory Javascript with Object Pools
                </span>
                <span class="description">Reduce memory churn, and get some of your much-needed performance back.</span>
                
                  <span class="tag">javascript</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/performance/mystery/">
              <span class="left">
                <span class="author" data-author_id="johnmccutchan"><img src="/static/images/profiles/75/johnmccutchan.75.png" alt="John McCutchan" title="John McCutchan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 13th, 2013</span>
                <span class="title">
                  Use forensics and detective work to solve JavaScript performance mysteries
                </span>
                <span class="description">Learn how to surface important signals from deep inside V8 and use them to improve the performance of your site</span>
                
                  <span class="tag">v8</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/memory/effectivemanagement/">
              <span class="left">
                <span class="author" data-author_id="johnmccutchan"><img src="/static/images/profiles/75/johnmccutchan.75.png" alt="John McCutchan" title="John McCutchan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 12th, 2013</span>
                <span class="title">
                  Effectively Managing Memory at Gmail scale
                </span>
                <span class="description">Learn how you to effectively manage memory at GMail scale.</span>
                
                  <span class="tag">memory</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/racer/">
              <span class="left">
                <span class="author" data-author_id="activetheory"><img src="/static/images/profiles/75/activetheory.75.png" alt="Active Theory" title="Active Theory" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 11th, 2013</span>
                <span class="title">
                  Case Study: Building Racer
                </span>
                <span class="description">The making of Racer - A Chrome Experiment</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">paperjs</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">multiplayer</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/racer-sound/">
              <span class="left">
                <span class="author" data-author_id="plan8"><img src="/static/images/profiles/75/plan8.75.png" alt="Plan 8" title="Plan 8" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 11th, 2013</span>
                <span class="title">
                  Case Study: The Sounds of Racer
                </span>
                <span class="description">Exploring how we made the sounds and synced the music between devices in Racer</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/world_wide_maze/">
              <span class="left">
                <span class="author" data-author_id="saqoosha"><img src="/static/images/profiles/75/saqoosha.75.png" alt="Saqoosha  " title="Saqoosha  " width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 6th, 2013</span>
                <span class="title">
                  Case Study: Inside World Wide Maze
                </span>
                <span class="description">The story behind building World Wide Maze.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">three.js</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/script-loading/">
              <span class="left">
                <span class="author" data-author_id="jakearchibald"><img src="/static/images/profiles/75/jakearchibald.75.png" alt="Jake Archibald" title="Jake Archibald" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 5th, 2013</span>
                <span class="title">
                  Deep dive into the murky waters of script loading
                </span>
                <span class="description">How to squeeze more performance out of script loading.</span>
                
                  <span class="tag">script</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/roll-it/">
              <span class="left">
                <span class="author" data-author_id="justingitlin"><img src="/static/images/profiles/75/justingitlin.75.png" alt="Justin Gitlin" title="Justin Gitlin" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 4th, 2013</span>
                <span class="title">
                  Creating Roll It
                </span>
                <span class="description">This case study takes a look at some of the key problems we solved to create Roll It.</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">three.js</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/natgeo/">
              <span class="left">
                <span class="author" data-author_id="christophergammon"><img src="/static/images/profiles/75/christophergammon.75.png" alt="Christopher Gammon" title="Christopher Gammon" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 3rd, 2013</span>
                <span class="title">
                  Next Generation Web Layout: National Geographic Forest Giant
                </span>
                <span class="description">How we built a great mobile experience for National Geographic</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/unnecessary-paints/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 8th, 2013</span>
                <span class="title">
                  Avoiding Unnecessary Paints
                </span>
                <span class="description">Understand how paints affect your performance.</span>
                
                  <span class="tag">render</span>
                
                  <span class="tag">painting</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/css-paint-times/">
              <span class="left">
                <span class="author" data-author_id="coltmcanlis"><img src="/static/images/profiles/75/coltmcanlis.75.png" alt="Colt McAnlis" title="Colt McAnlis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 12th, 2013</span>
                <span class="title">
                  CSS Paint Times and Page Render Weight
                </span>
                <span class="description">Understand how different CSS property combinations can influence the paint-time of your page.</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">render</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/google-io-2013/">
              <span class="left">
                <span class="author" data-author_id="thomasreynolds"><img src="/static/images/profiles/75/thomasreynolds.75.png" alt="Thomas Reynolds" title="Thomas Reynolds" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 12th, 2013</span>
                <span class="title">
                  Case Study: Google I/O 2013 Experiment
                </span>
                <span class="description">Discover how the Google I/O 2013 experiment was developed.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">canvas</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/masking/adobe/">
              <span class="left">
                <span class="author" data-author_id="schulzedirk"><img src="/static/images/profiles/75/schulzedirk.75.png" alt="Dirk Schulze" title="Dirk Schulze" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 4th, 2013</span>
                <span class="title">
                  CSS Masking
                </span>
                <span class="description">Using clipping and masking from CSS.</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/easy-high-dpi-images/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 28th, 2013</span>
                <span class="title">
                  Easy High DPI Images
                </span>
                <span class="description">This article describes a way to do as little work as possible, yet still serve beautiful images for both high and low DPI screens.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">images</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/profiling/">
              <span class="left">
                <span class="author" data-author_id="johnmccutchan"><img src="/static/images/profiles/75/johnmccutchan.75.png" alt="John McCutchan" title="John McCutchan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 26th, 2013</span>
                <span class="title">
                  Profiling Mobile HTML5 Apps With Chrome DevTools
                </span>
                <span class="description">Learn how you can use Chrome DevTools against your mobile device.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/shadowdom-301/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 21st, 2013</span>
                <span class="title">
                  Shadow DOM 301: Advanced Concepts & DOM APIs
                </span>
                <span class="description">Advanced tips and tricks with Shadow DOM.</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">shadowdom</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/shadowdom-201/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 15th, 2013</span>
                <span class="title">
                  Shadow DOM 201: CSS and Styling
                </span>
                <span class="description">Learn about CSS styling options in Shadow DOM.</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">shadowdom</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/touchandmouse/">
              <span class="left">
                <span class="author" data-author_id="chriswilson"><img src="/static/images/profiles/75/chriswilson.75.png" alt="Chris Wilson" title="Chris Wilson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 13th, 2013</span>
                <span class="title">
                  Touch And Mouse: Together Again For The First Time
                </span>
                <span class="description">This article describes techniques to support mouse and touch together.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">touch</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/layers/">
              <span class="left">
                <span class="author" data-author_id="tomwiltzius"><img src="/static/images/profiles/75/tomwiltzius.75.png" alt="Tom Wiltzius" title="Tom Wiltzius" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 11th, 2013</span>
                <span class="title">
                  Accelerated Rendering in Chrome: The Layer Model
                </span>
                <span class="description">This article explains how GPU-accelerated rendering works in Chrome.</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/template/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 26th, 2013</span>
                <span class="title">
                  HTML's New Template Tag: standardizing client-side templating
                </span>
                <span class="description">Introduction to the &amp;lt;template&amp;gt; element.</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/security/transport-layer-security/">
              <span class="left">
                <span class="author" data-author_id="mikewest"><img src="/static/images/profiles/75/mikewest.75.png" alt="Mike West" title="Mike West" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 14th, 2013</span>
                <span class="title">
                  Confound Malicious Middlemen with HTTPS and HTTP Strict Transport Security
                </span>
                <span class="description">Learn why and how you ought to serve your sites over a secure HTTPS connection, rather than wide open and vulnerably over HTTP.</span>
                
                  <span class="tag">security</span>
                
                  <span class="tag">https</span>
                
                  <span class="tag">hsts</span>
                
                  <span class="tag">encryption</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/oz/">
              <span class="left">
                <span class="author" data-author_id="unit9com"><img src="/static/images/profiles/75/unit9com.75.png" alt="unit9 com" title="unit9 com" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 5th, 2013</span>
                <span class="title">
                  Case Study: Find Your Way to Oz
                </span>
                <span class="description">How we made a Magical Chrome Experiment.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">getusermedia</span>
                
                  <span class="tag">shaders</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/audio/scheduling/">
              <span class="left">
                <span class="author" data-author_id="chriswilson"><img src="/static/images/profiles/75/chriswilson.75.png" alt="Chris Wilson" title="Chris Wilson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 9th, 2013</span>
                <span class="title">
                  A Tale of Two Clocks - Scheduling Web Audio with Precision
                </span>
                <span class="description">Learn how to build rock-solid rhythmic timing into Web Audio applications.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">timing</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/shadowdom/">
              <span class="left">
                <span class="author" data-author_id="dominiccooney"><img src="/static/images/profiles/75/dominiccooney.75.png" alt="Dominic Cooney" title="Dominic Cooney" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 4th, 2013</span>
                <span class="title">
                  Shadow DOM 101
                </span>
                <span class="description">Learn how to use Shadow DOM to separate content from presentation.</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">shadowdom</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/security/sandboxed-iframes/">
              <span class="left">
                <span class="author" data-author_id="mikewest"><img src="/static/images/profiles/75/mikewest.75.png" alt="Mike West" title="Mike West" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 4th, 2013</span>
                <span class="title">
                  Play safely in sandboxed IFrames
                </span>
                <span class="description">Learn how to run IFramed content in a sandbox, greatly reducing the risk associated with third-party widgets, and your own application&#39;s code.</span>
                
                  <span class="tag">security</span>
                
                  <span class="tag">xss</span>
                
                  <span class="tag">sandbox</span>
                
                  <span class="tag">iframe</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/scrolling/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 20th, 2012</span>
                <span class="title">
                  Scrolling Performance
                </span>
                <span class="description">This article explains scrolling performance and how to avoid large repaints.</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/parallax/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 20th, 2012</span>
                <span class="title">
                  Parallaxin'
                </span>
                <span class="description">An investigation into the parallax effect and common pitfalls in implementation.</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/jamwithchrome-interaction/">
              <span class="left">
                <span class="author" data-author_id="fredchasen"><img src="/static/images/profiles/75/fredchasen.75.png" alt="Fred Chasen" title="Fred Chasen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 5th, 2012</span>
                <span class="title">
                  Case-study: JAM with Chrome - How we made the UI rock
                </span>
                <span class="description">A deep dive into how the instruments were built for JAM with Chrome</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">svg</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/100000stars/">
              <span class="left">
                <span class="author" data-author_id="michaelchang"><img src="/static/images/profiles/75/michaelchang.75.png" alt="Michael Chang" title="Michael Chang" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 28th, 2012</span>
                <span class="title">
                  Making 100,000 Stars
                </span>
                <span class="description">A case study using THREE.js to visualize space.</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">CSS</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">audio</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/jamwithchrome-audio/">
              <span class="left">
                <span class="author" data-author_id="oskareriksson"><img src="/static/images/profiles/75/oskareriksson.75.png" alt="Oskar Eriksson" title="Oskar Eriksson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 8th, 2012</span>
                <span class="title">
                  Case-study: JAM with Chrome - How we made the audio rock
                </span>
                <span class="description">We take a look at some of the challenges we ecountered during the development of JAM with Chrome, using the Web Audio API</span>
                
                  <span class="tag">webaudio</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/rendering/">
              <span class="left">
                <span class="author" data-author_id="tomwiltzius"><img src="/static/images/profiles/75/tomwiltzius.75.png" alt="Tom Wiltzius" title="Tom Wiltzius" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 2nd, 2012</span>
                <span class="title">
                  Jank Busting for Better Rendering Performance
                </span>
                <span class="description">Techniques for improving rendering performance in web applications.</span>
                
                  <span class="tag">JavaScript</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/pagevisibility/intro/">
              <span class="left">
                <span class="author" data-author_id="joemarini"><img src="/static/images/profiles/75/joemarini.75.png" alt="Joe Marini" title="Joe Marini" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 25th, 2012</span>
                <span class="title">
                  Using the PageVisibility API
                </span>
                <span class="description">An introduction to the PageVisibility API in HTML5.</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/forms/constraintvalidation/">
              <span class="left">
                <span class="author" data-author_id="tjvantoll"><img src="/static/images/profiles/75/tjvantoll.75.png" alt="TJ VanToll" title="TJ VanToll" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 17th, 2012</span>
                <span class="title">
                  Constraint Validation: Native Client Side Validation for Web Forms
                </span>
                <span class="description">A tutorial on HTML5&#39;s constraint validation API and how it can be used to enhance forms.</span>
                
                  <span class="tag">forms</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/svg/mobile_fundamentals/">
              <span class="left">
                <span class="author" data-author_id="alexdanilo"><img src="/static/images/profiles/75/alexdanilo.75.png" alt="Alex Danilo" title="Alex Danilo" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 15th, 2012</span>
                <span class="title">
                  Splash Vector Graphics on your Responsive Site
                </span>
                <span class="description">Tips and techniques for using SVG effectively on mobile browsers.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">svg</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/v8/">
              <span class="left">
                <span class="author" data-author_id="chriswilson"><img src="/static/images/profiles/75/chriswilson.75.png" alt="Chris Wilson" title="Chris Wilson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 11th, 2012</span>
                <span class="title">
                  Performance Tips for JavaScript in V8
                </span>
                <span class="description">Techniques for improving JavaScript performance in web applications, particularly when running in Chrome&#39;s V8 engine.</span>
                
                  <span class="tag">JavaScript</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/streaming/screenshare/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 21st, 2012</span>
                <span class="title">
                  Screensharing a browser tab in HTML5?
                </span>
                <span class="description">Techniques for screensharing the contents of a browser tab.</span>
                
                  <span class="tag">streaming</span>
                
                  <span class="tag">screensharing</span>
                
                  <span class="tag">mutationobservers</span>
                
                  <span class="tag">binary</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/movikantirevo/">
              <span class="left">
                <span class="author" data-author_id="petele"><img src="/static/images/profiles/75/petele.75.png" alt="Pete LePage" title="Pete LePage" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 19th, 2012</span>
                <span class="title">
                  Movi Kanti Revo - Part 1: Building the 3D World
                </span>
                <span class="description">Building the 3D world of Movi.Kanti.Revo.</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">video</span>
                
                  <span class="tag">getusermedia</span>
                
                  <span class="tag">multimedia</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/async/deferred/">
              <span class="left">
                <span class="author" data-author_id="jeremychone"><img src="/static/images/profiles/75/jeremychone.75.png" alt="Jeremy Chone" title="Jeremy Chone" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 29th, 2012</span>
                <span class="title">
                  Asynch JS: The Power Of $.Deferred
                </span>
                <span class="description">A discussion about how to use asynchronous techniques in HTML5.</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">xhr</span>
                
                  <span class="tag">javascript</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/hidpi/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 25th, 2012</span>
                <span class="title">
                  High DPI Canvas
                </span>
                <span class="description">High density displays are here on many devices. The canvas element deals with that in different ways in different browsers - find out how.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/high-dpi/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 22nd, 2012</span>
                <span class="title">
                  High DPI Images for Variable Pixel Densities
                </span>
                <span class="description">Techniques for delivering the best quality images as quickly and efficiently as possible.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">css</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/pointerlock/intro/">
              <span class="left">
                <span class="author" data-author_id="johnmccutchan"><img src="/static/images/profiles/75/johnmccutchan.75.png" alt="John McCutchan" title="John McCutchan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 17th, 2012</span>
                <span class="title">
                  Pointer Lock and First Person Shooter Controls
                </span>
                <span class="description">Learn how to use HTML5 pointer lock and implement first person shooter controls.</span>
                
                  <span class="tag">pointerlock</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/doodles/gamepad/">
              <span class="left">
                <span class="author" data-author_id="marcinwichary"><img src="/static/images/profiles/75/marcinwichary.75.png" alt="Marcin Wichary" title="Marcin Wichary" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 6th, 2012</span>
                <span class="title">
                  Jumping the Hurdles with the Gamepad API
                </span>
                <span class="description">How the Google Doodles team used the Gamepad API to include different user interactions.</span>
                
                  <span class="tag">doodle</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/regions/adobe/">
              <span class="left">
                <span class="author" data-author_id="christiancantrell"><img src="/static/images/profiles/75/christiancantrell.75.png" alt="Christian Cantrell" title="Christian Cantrell" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 3rd, 2012</span>
                <span class="title">
                  Magazine-like Layout for the Web with CSS Regions and Exclusions
                </span>
                <span class="description">Learn how Adobe is helping to bring new capabilities to CSS which enable advanced layout techniques for the modern web.</span>
                
                  <span class="tag">exclusions</span>
                
                  <span class="tag">regions</span>
                
                  <span class="tag">CSS</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/frameworks/angular-websockets/">
              <span class="left">
                <span class="author" data-author_id="brianford"><img src="/static/images/profiles/75/brianford.75.png" alt="Brian Ford" title="Brian Ford" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 27th, 2012</span>
                <span class="title">
                  Writing an AngularJS App with Socket.IO
                </span>
                <span class="description">Create a chat application with AngularJS, Socket.IO, and Node.js.</span>
                
                  <span class="tag">angular</span>
                
                  <span class="tag">node</span>
                
                  <span class="tag">socketio</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/globe/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 26th, 2012</span>
                <span class="title">
                  Making of the World Wonders 3D Globe
                </span>
                <span class="description">How the Google World Wonders 3D Globe was made.</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/subsonic/">
              <span class="left">
                <span class="author" data-author_id="seanmiddleditch"><img src="/static/images/profiles/75/seanmiddleditch.75.png" alt="Sean Middleditch" title="Sean Middleditch" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 25th, 2012</span>
                <span class="title">
                  Case Study: SONAR, HTML5 Game Development
                </span>
                <span class="description">Read how Subsonic built SONAR using the HTML5 FileSystem API to cache 70+ MB of game data.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webrtc/basics/">
              <span class="left">
                <span class="author" data-author_id="dutton"><img src="/static/images/profiles/75/dutton.75.png" alt="Sam Dutton" title="Sam Dutton" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 23rd, 2012</span>
                <span class="title">
                  Getting Started with WebRTC
                </span>
                <span class="description">Plugin-free, realtime communication of video, audio and data using WebRTC.</span>
                
                  <span class="tag">audio</span>
                
                  <span class="tag">video</span>
                
                  <span class="tag">realtime</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/typed_arrays/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 20th, 2012</span>
                <span class="title">
                  Typed Arrays: Binary Data in the Browser
                </span>
                <span class="description">Overview of Typed Arrays APIs and libraries.</span>
                
                  <span class="tag">type_arrays</span>
                
                  <span class="tag">binary</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/indexeddb/uidatabinding/">
              <span class="left">
                <span class="author" data-author_id="raymondcamden"><img src="/static/images/profiles/75/raymondcamden.75.png" alt="Raymond Camden" title="Raymond Camden" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 8th, 2012</span>
                <span class="title">
                  Databinding UI Elements with IndexedDB
                </span>
                <span class="description">Use JQuery UI to bind data from IndexedDB.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">indexeddb</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/webgl_orthographic_3d/">
              <span class="left">
                <span class="author" data-author_id="gman"><img src="/static/images/profiles/75/gman.75.png" alt="Gregg Tavares" title="Gregg Tavares" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 20th, 2012</span>
                <span class="title">
                  WebGL Orthographic 3D
                </span>
                <span class="description">How orthographic 3D transforms work in WebGL.</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/security/content-security-policy/">
              <span class="left">
                <span class="author" data-author_id="mikewest"><img src="/static/images/profiles/75/mikewest.75.png" alt="Mike West" title="Mike West" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 15th, 2012</span>
                <span class="title">
                  An Introduction to Content Security Policy
                </span>
                <span class="description">Mitigate the risk of cross-site scripting attacks by whitelisting trusted origins with a Content Security Policy.</span>
                
                  <span class="tag">xss</span>
                
                  <span class="tag">security</span>
                
                  <span class="tag">csp</span>
                
                  <span class="tag">eval</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/animations/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 28th, 2012</span>
                <span class="title">
                  Leaner, Meaner, Faster Animations with requestAnimationFrame
                </span>
                <span class="description">Let&#39;s take requestAnimationFrame to the next level and use it for debouncing resize events. We&#39;ll also dig into how to debug performance and smooth out your code.</span>
                
                  <span class="tag">animations</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/filters/understanding-css/">
              <span class="left">
                <span class="author" data-author_id="alexdanilo"><img src="/static/images/profiles/75/alexdanilo.75.png" alt="Alex Danilo" title="Alex Danilo" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 25th, 2012</span>
                <span class="title">
                  Understanding CSS Filter Effects
                </span>
                <span class="description">Learn how CSS filters work, their performance impact and what each filter effect does.</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">filters</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/games/abouttracing/">
              <span class="left">
                <span class="author" data-author_id="lillithompson"><img src="/static/images/profiles/75/lillithompson.75.png" alt="Lilli Thompson" title="Lilli Thompson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 24th, 2012</span>
                <span class="title">
                  Profiling your WebGL Game with the about:tracing flag
                </span>
                <span class="description">The about:tracing tool provides the insight that helps you avoid hasty workarounds aimed at performance improvement, but which are essentially well-intentioned guesswork. You’ll save a lot of time and energy, get a clearer picture of what Chrome is doing with each frame, and use this information to optimize your game.</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">internals</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/cross-device/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 24th, 2012</span>
                <span class="title">
                  A non-responsive approach to building cross-device webapps
                </span>
                <span class="description">Responsive design is great for changing the styling of your UIs depending on screen size, but as your projects increase in complexity, you may want to serve custom versions of your client depending on what kind of device your visitors are using. This article covers classifying visitor&#39;s devices into device classes, and serving the appropriate version, while maximizing code reuse between versions.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webaudio/fieldrunners/">
              <span class="left">
                <span class="author" data-author_id="zgoddard"><img src="/static/images/profiles/75/zgoddard.75.png" alt="Z Goddard" title="Z Goddard" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 24th, 2012</span>
                <span class="title">
                  Case Study: A Tale of an HTML5 Game with Web Audio
                </span>
                <span class="description">Gradient Studios ported their award-winning Fieldrunners game to HTML5. This article chronicles their journey in utilizing the Web Audio API to implement sound for Fieldrunners.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/webgl_transforms/">
              <span class="left">
                <span class="author" data-author_id="gman"><img src="/static/images/profiles/75/gman.75.png" alt="Gregg Tavares" title="Gregg Tavares" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 18th, 2012</span>
                <span class="title">
                  WebGL Transforms
                </span>
                <span class="description">How 3D transforms work and how you can use them in WebGL.</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/responsivedesign/">
              <span class="left">
                <span class="author" data-author_id="bradfrost"><img src="/static/images/profiles/75/bradfrost.75.png" alt="Brad Frost" title="Brad Frost" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 16th, 2012</span>
                <span class="title">
                  Creating a Mobile-First Responsive Web Design
                </span>
                <span class="description">Responsive web design gives web creators some tools for making layouts that respond to any screen size. This article uses fluid grids, flexible images and media queries to get the layout looking great regardless of the size of the device&#39;s screen dimensions.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/sourcemaps/">
              <span class="left">
                <span class="author" data-author_id="ryanseddon"><img src="/static/images/profiles/75/ryanseddon.75.png" alt="Ryan Seddon" title="Ryan Seddon" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 21st, 2012</span>
                <span class="title">
                  Introduction to JavaScript Source Maps
                </span>
                <span class="description">Have you ever found yourself wishing you could keep your client-side code readable and more importantly debuggable even after you&#39;ve combined and minified it, without impacting performance? Well now you can through the magic of source maps.</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webaudio/games/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 28th, 2012</span>
                <span class="title">
                  Developing Game Audio with the Web Audio API
                </span>
                <span class="description">Varied intensity background music, overlapping sound effects and randomization, sound source and listener spatialization (and directional sound cones), room effects via convolution, detect and prevent clipping, and implement dynamics compression. Including interactive inline demos!</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/jsartoolkit_webrtc/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 28th, 2012</span>
                <span class="title">
                  Writing Augmented Reality Applications using JSARToolKit
                </span>
                <span class="description">Using the JSARToolKit library with WebRTC to build augmented reality applications in JavaScript.</span>
                
                  <span class="tag">getusermedia</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/technitone/">
              <span class="left">
                <span class="author" data-author_id="gskinnerdotcom"><img src="/static/images/profiles/75/gskinnerdotcom.75.png" alt="gskinnerdot com" title="gskinnerdot com" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 27th, 2012</span>
                <span class="title">
                  Case Study: Building Technitone.com
                </span>
                <span class="description">How Technitone.com was built with the Web Audio API, WebGL, WebSockets, and a decent amount of magic.</span>
                
                  <span class="tag">audio</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/getusermedia/intro/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 22nd, 2012</span>
                <span class="title">
                  Capturing Audio & Video in HTML5
                </span>
                <span class="description">How to capture audio and video using the navigator.getUserMedia() API.</span>
                
                  <span class="tag">getusermedia</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/munkadoo_bouncymouse/">
              <span class="left">
                <span class="author" data-author_id="ericrk"><img src="/static/images/profiles/75/ericrk.75.png" alt="Eric Karl" title="Eric Karl" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 18th, 2012</span>
                <span class="title">
                  Case Study: Bouncy Mouse
                </span>
                <span class="description">Bouncy Mouse is a slingshot platformer by Munkadoo Games. This article talks about porting the game to HTML5 and WebAudio.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webaudio/positional_audio/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 16th, 2012</span>
                <span class="title">
                  Mixing Positional Audio and WebGL
                </span>
                <span class="description">How to use the positional audio features in Web Audio API with Three.js.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/webgl_fundamentals/">
              <span class="left">
                <span class="author" data-author_id="gman"><img src="/static/images/profiles/75/gman.75.png" alt="Gregg Tavares" title="Gregg Tavares" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 9th, 2012</span>
                <span class="title">
                  WebGL Fundamentals
                </span>
                <span class="description">Fundamentals of using WebGL as a 2D drawing API and using shaders for image processing.</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/track/basics/">
              <span class="left">
                <span class="author" data-author_id="dutton"><img src="/static/images/profiles/75/dutton.75.png" alt="Sam Dutton" title="Sam Dutton" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 8th, 2012</span>
                <span class="title">
                  Getting Started With the Track Element
                </span>
                <span class="description">The track element provides a simple, standardized way to add subtitles and captions to video and audio, but can also be used with other kinds of timed data, to improve searchability and enable deep linking.</span>
                
                  <span class="tag">accessibility</span>
                
                  <span class="tag">audio</span>
                
                  <span class="tag">video</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/closure/photographyprize/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 7th, 2012</span>
                <span class="title">
                  Google Photography Prize Gallery
                </span>
                <span class="description">Building the gallery widget for the Google Photography Prize site using Closure.</span>
                
                  <span class="tag">closure</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/million_letters/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 30th, 2012</span>
                <span class="title">
                  Animating a Million Letters Using Three.js
                </span>
                <span class="description">A guide to using shaders to animate large amounts of particles.</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">three.js</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/doodles/lem/">
              <span class="left">
                <span class="author" data-author_id="marcinwichary"><img src="/static/images/profiles/75/marcinwichary.75.png" alt="Marcin Wichary" title="Marcin Wichary" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 21st, 2011</span>
                <span class="title">
                  Case Study: Building the Stanisław Lem Google doodle
                </span>
                <span class="description">A walk through of the HTML5 tech behind the Stanisław Lem Google doodle.</span>
                
                  <span class="tag">doodle</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webdatabase/websql-indexeddb/">
              <span class="left">
                <span class="author" data-author_id="idogreen"><img src="/static/images/profiles/75/idogreen.75.png" alt="Ido Green" title="Ido Green" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 5th, 2011</span>
                <span class="title">
                  Migrating your WebSQL DB to IndexedDB
                </span>
                <span class="description">A look at what it would take to port a WebSQL based application to IndexedDB.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">indexeddb</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/cors/">
              <span class="left">
                <span class="author" data-author_id="monsurhossain"><img src="/static/images/profiles/75/monsurhossain.75.png" alt="Monsur Hossain" title="Monsur Hossain" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 26th, 2011</span>
                <span class="title">
                  Using CORS
                </span>
                <span class="description">An introduction to Cross Origin Resource Sharing (CORS), which gives scripts the ability to make cross-origin XHRs.</span>
                
                  <span class="tag">cors</span>
                
                  <span class="tag">xhr2</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/file/filesystem-sync/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 25th, 2011</span>
                <span class="title">
                  The Synchronous FileSystem API for Workers
                </span>
                <span class="description">The HTML5 FileSystem API offers an synchronous version to be used in the context of Web Workers. The tutorial introduces the Synchronous API, and gives practical examples of using it.</span>
                
                  <span class="tag">filesystem</span>
                
                  <span class="tag">workers</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webaudio/intro/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 14th, 2011</span>
                <span class="title">
                  Getting Started with Web Audio API
                </span>
                <span class="description">A gentle introduction to loading and playing, cross-fading, and filtering sound using the Web Audio API.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/optimization-and-performance/">
              <span class="left">
                <span class="author" data-author_id="wesleyhales"><img src="/static/images/profiles/75/wesleyhales.75.png" alt="Wesley Hales" title="Wesley Hales" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 19th, 2011</span>
                <span class="title">
                  HTML5 Techniques for Optimizing Mobile Performance
                </span>
                <span class="description">Learn the fundamentals of an HTML5 mobile framework. From network detection to sliding, flipping, and more.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/raphael/intro/">
              <span class="left">
                <span class="author" data-author_id="jameswilliams"><img src="/static/images/profiles/75/jameswilliams.75.png" alt="James Williams" title="James Williams" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 8th, 2011</span>
                <span class="title">
                  Introduction to Raphaël.js
                </span>
                <span class="description">Learn how to use Raphaël.js to create cross-platform SVG scenes.</span>
                
                  <span class="tag">svg</span>
                
                  <span class="tag">raphaeljs</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webperformance/basics/">
              <span class="left">
                <span class="author" data-author_id="dutton"><img src="/static/images/profiles/75/dutton.75.png" alt="Sam Dutton" title="Sam Dutton" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 31st, 2011</span>
                <span class="title">
                  Measuring Page Load Speed with Navigation Timing
                </span>
                <span class="description">Get accurate and detailed timing statistics-natively-for page navigation and load events.</span>
                
                  <span class="tag">navigationtiming</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/touch/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 21st, 2011</span>
                <span class="title">
                  Multi-touch Web Development
                </span>
                <span class="description">Introduction on touch events for mobile devices.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/performance/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 16th, 2011</span>
                <span class="title">
                  Improving HTML5 Canvas Performance
                </span>
                <span class="description">Ten tips to make your canvas applications and games faster. Every technique is backed up by a performance test.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/integrating/">
              <span class="left">
                <span class="author" data-author_id="davidtong"><img src="/static/images/profiles/75/davidtong.75.png" alt="David Tong" title="David Tong" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 5th, 2011</span>
                <span class="title">
                  Integrating Canvas into your Web App
                </span>
                <span class="description">Use the HTML5 canvas element to create, edit, open, export images and tips on how these techniques can be applied to an existing web application.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/internals/howbrowserswork/">
              <span class="left">
                <span class="author" data-author_id="taligarsiel"><img src="/static/images/profiles/75/taligarsiel.75.png" alt="Tali Garsiel" title="Tali Garsiel" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 5th, 2011</span>
                <span class="title">
                  How Browsers Work: Behind the scenes of modern web browsers
                </span>
                <span class="description">In this comprehensive primer, you will learn what happens in the browser between when you type google.com in the address bar until you see the Google page on the browser screen.</span>
                
                  <span class="tag">internals</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/gopherwoord-studios-resizing-html5-games/">
              <span class="left">
                <span class="author" data-author_id="derekdetweiler"><img src="/static/images/profiles/75/derekdetweiler.75.png" alt="Derek Detweiler" title="Derek Detweiler" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 3rd, 2011</span>
                <span class="title">
                  Case Study: Auto-Resizing HTML5 Games
                </span>
                <span class="description">Resizing your game to fit a variety of form factors and window sizes.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/games/assetmanager/">
              <span class="left">
                <span class="author" data-author_id="sethladd"><img src="/static/images/profiles/75/sethladd.75.png" alt="Seth Ladd" title="Seth Ladd" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 2nd, 2011</span>
                <span class="title">
                  Simple Asset Management for HTML5 Games
                </span>
                <span class="description">Centralize and manage the asset downloads for your HTML5 game.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/detection/index.html">
              <span class="left">
                <span class="author" data-author_id="mahemoff"><img src="/static/images/profiles/75/mahemoff.75.png" alt="Michael Mahemoff" title="Michael Mahemoff" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 27th, 2011</span>
                <span class="title">
                  Feature, Browser, and Form Factor Detection: It's Good for the Environment
                </span>
                <span class="description">Tune your app to the environment it&#39;s running in using Feature Detection, Browser Detection, and Form Factor detection.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">feature detection</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/nativedebate/">
              <span class="left">
                <span class="author" data-author_id="mahemoff"><img src="/static/images/profiles/75/mahemoff.75.png" alt="Michael Mahemoff" title="Michael Mahemoff" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 3rd, 2011</span>
                <span class="title">
                  HTML5 vs Native: The Mobile App Debate
                </span>
                <span class="description">There are still compelling reasons to go native, and clearly, many developers are indeed going that route. This article is a debate on native versus web. We&#39;ll examine each point in favor of native, then we&#39;ll let the web come in and give its best defense.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/forms/html5forms/">
              <span class="left">
                <span class="author" data-author_id="petele"><img src="/static/images/profiles/75/petele.75.png" alt="Pete LePage" title="Pete LePage" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 2nd, 2011</span>
                <span class="title">
                  Making Forms Fabulous with HTML5
                </span>
                <span class="description">Take advantage of improved forms support in HTML5 to build better forms, more easily.</span>
                
                  <span class="tag">forms</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/shaders/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 2nd, 2011</span>
                <span class="title">
                  An Introduction to Shaders
                </span>
                <span class="description">Want to learn about WebGL shaders but don&#39;t know where to start? I&#39;m here to help!</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">shaders</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/three/intro/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 2nd, 2011</span>
                <span class="title">
                  Getting Started with Three.js
                </span>
                <span class="description">Three.js is a powerful engine for doing native 3D work in your browser. But how do you get going?</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/workingoffthegrid/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 1st, 2011</span>
                <span class="title">
                  Working Off the Grid with HTML5 Offline
                </span>
                <span class="description">This article covers practical techniques and examples for handling connectivity flakiness.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/google-chrome-frame/">
              <span class="left">
                <span class="author" data-author_id="malteubl"><img src="/static/images/profiles/75/malteubl.75.png" alt="Malte Ubl" title="Malte Ubl" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 30th, 2011</span>
                <span class="title">
                  Rendering HTML5 in older browsers with Google Chrome Frame
                </span>
                <span class="description">HTML5 adds a multitude of new awesome tools to the web developer toolbox. Google Chrome Frame helps bringing these features to older browsers. This article will tell you how to use Chrome Frame on your site.</span>
                
                  <span class="tag">chromeframe</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/file/xhr2/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 27th, 2011</span>
                <span class="title">
                  New Tricks in XMLHttpRequest2
                </span>
                <span class="description">There has been a slew of improvements to our old friend &lt;code&gt;XMLHttpRequest&lt;/code&gt; for working with different types of data. This tutorial covers the new hotness.</span>
                
                  <span class="tag">binary</span>
                
                  <span class="tag">xhr2</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/imagefilters/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 25th, 2011</span>
                <span class="title">
                  Image Filters with Canvas
                </span>
                <span class="description">A quick guide to writing custom image filters with &amp;lt;canvas&amp;gt;.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/demoloop/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 25th, 2011</span>
                <span class="title">
                  Chrome Experiments Demo Harness
                </span>
                <span class="description">Experiences from building a kiosk-style demo station with HTML and WebGL.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">wegl</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/device/orientation/">
              <span class="left">
                <span class="author" data-author_id="petele"><img src="/static/images/profiles/75/petele.75.png" alt="Pete LePage" title="Pete LePage" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 29th, 2011</span>
                <span class="title">
                  This End Up: Using Device Orientation
                </span>
                <span class="description">Learn how to use device orientation and device motion events to tell when your computer is moving.</span>
                
                  <span class="tag">device</span>
                
                  <span class="tag">devicemotion</span>
                
                  <span class="tag">deviceorientation</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/sunlight_streamcongress/">
              <span class="left">
                <span class="author" data-author_id="luigimontanez"><img src="/static/images/profiles/75/luigimontanez.75.png" alt="Luigi Montanez" title="Luigi Montanez" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 17th, 2011</span>
                <span class="title">
                  Case Study: Real-time Updates in Stream Congress
                </span>
                <span class="description">Choosing the right technology to accomplish real-time, asynchronous updates.</span>
                
                  <span class="tag">eventsource</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/wordico/">
              <span class="left">
                <span class="author" data-author_id="adammark"><img src="/static/images/profiles/75/adammark.75.png" alt="Adam Mark" title="Adam Mark" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 10th, 2011</span>
                <span class="title">
                  Case Study: Converting Wordico from Flash to HTML5
                </span>
                <span class="description">Learn how we converted our &lt;a href=&quot;https://chrome.google.com/webstore/detail/ehehfnkgbccpcjmfhdkbeakkpibbcfdl&quot;&gt;Wordico&lt;/a&gt; crossword game from Flash to HTML5.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/mobifying/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 3rd, 2011</span>
                <span class="title">
                  "Mobifying" Your HTML5 Site
                </span>
                <span class="description">A guide on how to create a mobile version of an existing HTML5 website. This study looks at what was required to make html5rocks.com friendly to mobile users.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/texteffects/">
              <span class="left">
                <span class="author" data-author_id="mdeal"><img src="/static/images/profiles/75/mdeal.75.png" alt="Michael Deal" title="Michael Deal" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 1st, 2011</span>
                <span class="title">
                  Typographic effects in canvas
                </span>
                <span class="description">Effects in canvas inner/outer shadows, neon-glows, reflections, space-age, pattern/gradient overlays, stereoscopic imaging, and other text/vector-effects...</span>
                
                  <span class="tag">webfonts</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/html5/">
              <span class="left">
                <span class="author" data-author_id="malteubl"><img src="/static/images/profiles/75/malteubl.75.png" alt="Malte Ubl" title="Malte Ubl" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 14th, 2011</span>
                <span class="title">
                  Improving the Performance of your HTML5 App
                </span>
                <span class="description">Optimization strategies and techniques for HTML5 applications.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/onslaught/">
              <span class="left">
                <span class="author" data-author_id="matthackett"><img src="/static/images/profiles/75/matthackett.75.png" alt="Matt Hackett" title="Matt Hackett" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 10th, 2011</span>
                <span class="title">
                  Case Study: Onslaught! Arena
                </span>
                <span class="description">Learn how &lt;a href=&quot;https://chrome.google.com/webstore/detail/khodnfbkbanejphecblcofbghjdgfaih&quot;&gt;Onslaught! Arena&lt;/a&gt; created their fast-paced, arcade-style medieval fantasy shoot &#39;em up.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/notearsgame/">
              <span class="left">
                <span class="author" data-author_id="danielmoore"><img src="/static/images/profiles/75/danielmoore.75.png" alt="Daniel X. Moore" title="Daniel X. Moore" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 1st, 2011</span>
                <span class="title">
                  No Tears Guide to HTML5 Games
                </span>
                <span class="description">Building an HTML5 game using &amp;lt;canvas&amp;gt;, the no tears way.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/mathboard/">
              <span class="left">
                <span class="author" data-author_id="jeremychone"><img src="/static/images/profiles/75/jeremychone.75.png" alt="Jeremy Chone" title="Jeremy Chone" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 28th, 2011</span>
                <span class="title">
                  Case Study: HTML5 MathBoard
                </span>
                <span class="description">A discussion on how the iPad&#39;s popular &lt;a href=&quot;https://chrome.google.com/webstore/detail/elcilkmmbpmchojdmdohhoalmfmkcklk&quot;&gt;MathBoard&lt;/a&gt; application was ported to HTML5.</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/20things_pageflip/">
              <span class="left">
                <span class="author" data-author_id="hakimelhattab"><img src="/static/images/profiles/75/hakimelhattab.75.png" alt="Hakim El Hattab" title="Hakim El Hattab" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 20th, 2011</span>
                <span class="title">
                  Case Study: Page Flip Effect from 20thingsilearned.com
                </span>
                <span class="description">Learn how to re-create the page flip effect found on &lt;a href=&quot;http://www.20thingsilearned.com&quot;&gt;20thingsilearned.com&lt;/a&gt; using the Canvas API.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/file/filesystem/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 4th, 2011</span>
                <span class="title">
                  Exploring the FileSystem APIs
                </span>
                <span class="description">The FileSystem APIs give applications the ability to read/write files and directories in a secure, sandboxed file system on a user&#39;s local machine.</span>
                
                  <span class="tag">filewriter</span>
                
                  <span class="tag">filesystem</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/indexeddb/todo/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 20th, 2010</span>
                <span class="title">
                  A Simple TODO list using HTML5 IndexedDB
                </span>
                <span class="description">IndexedDB represents the future of query-able client-side storage. This tutorial presents a real world application implementing the basics of the IndexedDB API.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">indexeddb</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/entanglement/">
              <span class="left">
                <span class="author" data-author_id="derekdetweiler"><img src="/static/images/profiles/75/derekdetweiler.75.png" alt="Derek Detweiler" title="Derek Detweiler" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 14th, 2010</span>
                <span class="title">
                  Case Study: Getting Entangled with HTML5 Canvas
                </span>
                <span class="description">Entanglement is a puzzle game made by Gopherwood Studios. This article talks about Entanglement&#39;s usage of the &amp;lt;canvas&amp;gt; tag.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/eventsource/basics/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 30th, 2010</span>
                <span class="title">
                  Stream Updates with Server-Sent Events
                </span>
                <span class="description">The EventSource API is designed for receiving push notifications from a server, removing the need for client-size XHR polling.</span>
                
                  <span class="tag">eventsource</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/websockets/basics/">
              <span class="left">
                <span class="author" data-author_id="malteubl"><img src="/static/images/profiles/75/malteubl.75.png" alt="Malte Ubl" title="Malte Ubl" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 20th, 2010</span>
                <span class="title">
                  Introducing WebSockets: Bringing Sockets to the Web
                </span>
                <span class="description">Learn how to use WebSockets to add low latency bidirectional client-server communication to your web app.</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/flexbox/quick/">
              <span class="left">
                <span class="author" data-author_id="paulirish"><img src="/static/images/profiles/75/paulirish.75.png" alt="Paul Irish" title="Paul Irish" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 5th, 2010</span>
                <span class="title">
                  Quick hits with the Flexible Box Model
                </span>
                <span class="description">An introduction to flexbox, an alternative CSS layout scheme based on vboxes and hboxes.</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/offline/storage/">
              <span class="left">
                <span class="author" data-author_id="mahemoff"><img src="/static/images/profiles/75/mahemoff.75.png" alt="Michael Mahemoff" title="Michael Mahemoff" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 1st, 2010</span>
                <span class="title">
                  Client-Side Storage
                </span>
                <span class="description">An overview of client-side storage techniques: Web Storage (local/session storage), Web SQL Database, Indexed Database, Filesystem.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">webdatabase</span>
                
                  <span class="tag">filesystem</span>
                
                  <span class="tag">indexeddb</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/dnd/basics/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 30th, 2010</span>
                <span class="title">
                  Native HTML5 Drag and Drop
                </span>
                <span class="description">Drag-and-drop is yet another first class citizen in HTML5! This article explains how to enhance your web applications by adding native DnD functionality.</span>
                
                  <span class="tag">dnd</span>
                
                  <span class="tag">filereader</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/html5_in_deviantart_muro/">
              <span class="left">
                <span class="author" data-author_id="michaeldewey"><img src="/static/images/profiles/75/michaeldewey.75.png" alt="Mike Dewey" title="Mike Dewey" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 28th, 2010</span>
                <span class="title">
                  Case Study: HTML5 in deviantART muro
                </span>
                <span class="description">Learn how deviantART used HTML5 drawing features in deviantART muro.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">svg</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/box_dnd_download/">
              <span class="left">
                <span class="author" data-author_id="davidtong"><img src="/static/images/profiles/75/davidtong.75.png" alt="David Tong" title="David Tong" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 25th, 2010</span>
                <span class="title">
                  Case Study: Drag and Drop Download in Chrome
                </span>
                <span class="description">Learn how Box.net implemented GMail&#39;s attachment drag and drop to the desktop.</span>
                
                  <span class="tag">dnd</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/3d/css/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 7th, 2010</span>
                <span class="title">
                  3D and CSS
                </span>
                <span class="description">Learn how to build exciting 3D user interfaces using the power of CSS.</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">CSS</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/video/basics/">
              <span class="left">
                <span class="author" data-author_id="petele"><img src="/static/images/profiles/75/petele.75.png" alt="Pete LePage" title="Pete LePage" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 3rd, 2010</span>
                <span class="title">
                  HTML5 Video
                </span>
                <span class="description">Video is one of the most interesting and widely supported features of HTML5. This tutorial covers the mechanics of incorporating native video into your site (without a plugin) and gives interesting examples of using the &amp;gt;video&amp;lt; tag.</span>
                
                  <span class="tag">video</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webfonts/quick/">
              <span class="left">
                <span class="author" data-author_id="paulirish"><img src="/static/images/profiles/75/paulirish.75.png" alt="Paul Irish" title="Paul Irish" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 2nd, 2010</span>
                <span class="title">
                  Quick guide to webfonts via @font-face
                </span>
                <span class="description">Webfonts give new typographic freedom to designers while retaining scalability and accessibility.</span>
                
                  <span class="tag">CSS</span>
                
                  <span class="tag">webfonts</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/offline/whats-offline/">
              <span class="left">
                <span class="author" data-author_id="mahemoff"><img src="/static/images/profiles/75/mahemoff.75.png" alt="Michael Mahemoff" title="Michael Mahemoff" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 2nd, 2010</span>
                <span class="title">
                  "Offline": What does it mean and why should I care?
                </span>
                <span class="description">A discussion of what it means to take an application &quot;offline&quot; and the options available to developers for doing so.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/auditpanel/">
              <span class="left">
                <span class="author" data-author_id="sethladd"><img src="/static/images/profiles/75/sethladd.75.png" alt="Seth Ladd" title="Seth Ladd" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 28th, 2010</span>
                <span class="title">
                  Auditing Your Web App For Speed
                </span>
                <span class="description">The Audit Panel is an excellent tool for examining latency in your web apps. It offers customized recommendations to enhance performance and reduce latency.</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/workers/basics/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 26th, 2010</span>
                <span class="title">
                  The Basics of Web Workers
                </span>
                <span class="description">Web Workers are a means of spawning background scripts in your application, giving thread-like message passing for handling computationally intensive tasks.</span>
                
                  <span class="tag">workers</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/quick/">
              <span class="left">
                <span class="author" data-author_id="paulirish"><img src="/static/images/profiles/75/paulirish.75.png" alt="Paul Irish" title="Paul Irish" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 18th, 2010</span>
                <span class="title">
                  Best Practices for a Faster Web App with HTML5
                </span>
                <span class="description">How to effectively use features from HTML5 to improve the performance and responsiveness of your app.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">appcache</span>
                
                  <span class="tag">webdatabase</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/appcache/beginner/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 18th, 2010</span>
                <span class="title">
                  A Beginner's Guide to Using the Application Cache
                </span>
                <span class="description">A step-by-step guide to taking your web app offline using the application cache APIs.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">appcache</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/part1/">
              <span class="left">
                <span class="author" data-author_id="sethladd"><img src="/static/images/profiles/75/sethladd.75.png" alt="Seth Ladd" title="Seth Ladd" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 18th, 2010</span>
                <span class="title">
                  Introduction to Chrome Developer Tools, Part One
                </span>
                <span class="description">An introduction to the tools available in Google Chrome that make a developer&#39;s life easier!</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/offline/takingappoffline/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 18th, 2010</span>
                <span class="title">
                  Practical Guide to Take Your TODO List Offline
                </span>
                <span class="description">Expanding on the &lt;a href=&quot;/tutorials/webdatabase/todo/&quot;&gt;simple TODO list&lt;/a&gt;, this tutorial gives a practical guide for taking the sample offline using the application cache.</span>
                
                  <span class="tag">appcache</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/file/dndfiles/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 18th, 2010</span>
                <span class="title">
                  Reading files in JavaScript using the File APIs
                </span>
                <span class="description">Starter guide for using the File/FileList/FileReader APIs to process and read binary files in JavaScript.</span>
                
                  <span class="tag">filereader</span>
                
                  <span class="tag">dnd</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/geolocation/trip_meter/">
              <span class="left">
                <span class="author" data-author_id="mahemoff"><img src="/static/images/profiles/75/mahemoff.75.png" alt="Michael Mahemoff" title="Michael Mahemoff" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 24th, 2010</span>
                <span class="title">
                  A Simple Trip Meter using the Geolocation API
                </span>
                <span class="description">Learn how to implement geolocation very quickly including a distance calculator</span>
                
                  <span class="tag">geolocation</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/notifications/quick/">
              <span class="left">
                <span class="author" data-author_id="ernestd"><img src="/static/images/profiles/75/ernestd.75.png" alt="Ernest Delgado" title="Ernest Delgado" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 24th, 2010</span>
                <span class="title">
                  Using the Notifications API
                </span>
                <span class="description">Learn the notification basics creating a twitter notification</span>
                
                  <span class="tag">notifications</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webdatabase/todo/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 17th, 2010</span>
                <span class="title">
                  A Simple TODO list using HTML5 WebDatabases
                </span>
                <span class="description">Create a TODO list which persists data using a client side database.</span>
                
                  <span class="tag">webdatabase</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/audio/quick/">
              <span class="left">
                <span class="author" data-author_id="ernestd"><img src="/static/images/profiles/75/ernestd.75.png" alt="Ernest Delgado" title="Ernest Delgado" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 5th, 2010</span>
                <span class="title">
                  Quick Guide to Implementing the HTML5 Audio Tag
                </span>
                <span class="description">Learn how to use the HTML5 audio tag and fall back to Flash on platforms which do not support it.</span>
                
                  <span class="tag">audio</span>
                
                  <span class="tag">flash</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
      </ul>
      <div class="clear"></div>
      </div>

      <div class="pager">
        
      </div>

    </section>
  </article>

  <div class="padder"></div>

  <footer>
    <div class="container">

      <p class="licensing">
      
        Except as otherwise <a href="http://code.google.com/policies.html#restrictions">noted</a>, the content of this page is licensed under the <a href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 License</a>, and code samples are licensed under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache 2.0 License</a>.
      
      </p>

    </div>
  </footer>


  </div>

  <script>
  (function() {

    // Kill feedburner and marketing tracking arguments, but let them register
    // before we do it.
    setTimeout(function() {
      if (/^\?utm_/.test(document.location.search) &&
          window.history.replaceState) {
        window.history.replaceState(
            {}, '', document.location.href.replace(/\?utm_.*/, ''));
      }
    }, 2000);

    var siteHeader = document.getElementById('siteheader');
    var navToggle = document.getElementById('navtoggle');
    var siteNav = document.getElementById('sitenav');

    function toggle(target, forceActive) {

      if (typeof toc !== 'undefined') {
        // Switch off whichever one is not the
        // current target
        if (target === toc)
          siteNav.classList.remove('active');
        else
          toc.classList.remove('active');
      }

      // Toggle if no force parameter is set
      if (typeof forceActive === 'undefined') {
        target.classList.toggle('active');
      } else {
        if (forceActive)
          target.classList.add('active');
        else
          target.classList.remove('active');
      }

      // now find out what the set state ended up being
      var isActive = target.classList.contains('active');

      if (isActive)
        siteHeader.classList.add('expanded');
      else
        siteHeader.classList.remove('expanded');

    }

    navToggle.addEventListener('click', function(e) {
      toggle(siteNav);
      e.preventDefault();
    });

    
  })();
  </script>
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-15028909-1', 'auto');
  ga('create', 'UA-49880327-4', 'auto', {'name': 'html5rocks'});

  ga('send', 'pageview');
  ga('html5rocks.send', 'pageview');

  </script>
   <!-- Google Tag Manager -->
<noscript><iframe src="//www.googletagmanager.com/ns.html?id=GTM-XXXX"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MB3LRF');</script>
<!-- End Google Tag Manager -->
</body>
</html>
",
                "body": "<!DOCTYPE html>




<html lang="en" dir="ltr" itemscope itemtype="http://schema.org/Article">
<head>
  <meta charset="utf-8">
  <meta property="twitter:account_id" content="1593210261" />
  <!-- Copyright (c) 2012 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * Author: 
   *
   * 
   *
  -->
  <title>Tutorials - HTML5 Rocks</title>
  <meta name="description" content="A resource for developers looking to put HTML5 to use today, including information on specific features and when to use them in your apps.">
  <meta name="keywords" content="html5,html 5,html5 demos,html5 examples,javascript,css3,notifications,geolocation,web workers,apppcache,file api,filereader,indexeddb,offline,audio,video,drag and drop,chrome,sse,mobile">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">

  <link rel="shortcut icon" href="/favicon.ico">
  <link rel="alternate" type="application/rss+xml" title="HTML5 Rocks RSS" href="http://feeds.feedburner.com/html5rocks">

  <meta itemprop="name" content=" - HTML5 Rocks">
  <meta itemprop="description" content="A resource for developers looking to put HTML5 to use today, including information on specific features and when to use them in your apps.">
  
  <meta itemprop="image" content="http://www.html5rocks.com/static/images/html5rocks-logo-wings.png">
  

  

  
  
  <link rel="publisher" href="https://plus.google.com/+GoogleChromeDevelopers">

  

  
    
    <link rel="stylesheet" media="all" href="/static/css/v2-combined.min.css?20131111">
    

    
  

  <link href="//fonts.googleapis.com/css?family=Open+Sans:300,400,400italic,600,800" rel="stylesheet">

  <link rel="apple-touch-icon" href="/static/images/identity/HTML5_Badge_64.png">
  <link rel="apple-touch-icon-precomposed" href="/static/images/identity/HTML5_Badge_64.png">

  <script src="/static/js/modernizr.custom.82437.js"></script>

  <!--[if lt IE 9]>
  <script src="http://html5shim.googlecode.com/svn/trunk/html5-els.js"></script>
  <![endif]-->

  
</head>
<body data-href="tutorials" onload="" class="article tutorial listing">

  <header class="main" id="siteheader">
    <h1 id="title">
      <a href="/en/" title="HTML5 Rocks">HTML5 Rocks</a>
    </h1>
    <a href="#sitenav" id="navtoggle">Show navigation</a>

    

    <nav id="sitenav">
      <ul>
        
        <li id="home_menu"><a href="/en/" class="home">Home</a></li>
        
        <li id="tutorials_menu"><a href="/en/tutorials/?page=1" class="tutorials">Tutorials</a></li>
        <li id="updates_menu"><a href="/en/updates/" class="updates">Updates</a></li>
        <li id="contrib_menu"><a href="https://github.com/html5rocks/www.html5rocks.com/blob/master/CONTRIBUTING.md" target="_blank">Contribute</a></li>
        <li id="slides_menu"><a href="/en/slides" class="slides">Slides</a></li>
        <li id="resources_menu"><a href="/en/resources" class="resources">Resources</a></li>
      </ul>
    </nav>

    
  </header>

  <div class="body-content">
    
  <section class="title">

    

    <section class="title-text container">
      <h1>Tutorials</h1>
      <a href="/en/" class="watermark">HTML5 Rocks</a>
    </section>
  </section>

  <article class="content-wrapper wide">

    <section class="container">

      <section class="search">
        <form action="/en/search" role="search">
          <legend>Search</legend>
          <label for="q">Search:</label>
          <input type="search" name="q" id="q" autocomplete="off" placeholder="Search" />
          <input type="submit" id="search-button" value="Search">
        </form>
      </section>

      <div class="pager">
        
      </div>

      <div class="articles-list">

        <ul>
        
          <li>
            <a href="/en/tutorials/developertools/chrome-35/">
              <span class="left">
                <span class="author" data-author_id="umarhansa"><img src="/static/images/profiles/75/umarhansa.75.png" alt="Umar Hansa" title="Umar Hansa" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 26th, 2014</span>
                <span class="title">
                  DevTools Digest - Chrome 35: Updates to the Developer Tools in Chrome 35
                </span>
                <span class="description">Updates to the Chrome Developer Tools: CSS property quick search, memory stats for heap snapshots, CodeMirror upgrade and more.</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/es7/observe/">
              <span class="left">
                <span class="author" data-author_id="addyosmani"><img src="/static/images/profiles/75/addyosmani.75.png" alt="Addy Osmani" title="Addy Osmani" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 20th, 2014</span>
                <span class="title">
                  Data-binding Revolutions with Object.observe()
                </span>
                <span class="description">Learn about Object.observe() - a new feature giving JavaScript the power to directly observe changes to objects.</span>
                
                  <span class="tag">object.observe</span>
                
                  <span class="tag">es7</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/async-call-stack/">
              <span class="left">
                <span class="author" data-author_id="pearlchen"><img src="/static/images/profiles/75/pearlchen.75.png" alt="Pearl Chen" title="Pearl Chen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 26th, 2014</span>
                <span class="title">
                  Debugging Asynchronous JavaScript with Chrome DevTools
                </span>
                <span class="description">Up your JavaScript debugging kung fu with asynchronous call stack traces in the Chrome DevTools.</span>
                
                  <span class="tag">devtools</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/buildwithchrome/">
              <span class="left">
                <span class="author" data-author_id="hanseklund"><img src="/static/images/profiles/75/hanseklund.75.png" alt="Hans Eklund" title="Hans Eklund" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 6th, 2014</span>
                <span class="title">
                  Build with Chrome: Bringing LEGO® bricks to the Multi-Device Web
                </span>
                <span class="description">The Build With Chrome team redesigned the site to support both mouse and touch input.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/chrome-33/">
              <span class="left">
                <span class="author" data-author_id="umarhansa"><img src="/static/images/profiles/75/umarhansa.75.png" alt="Umar Hansa" title="Umar Hansa" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 27th, 2014</span>
                <span class="title">
                  DevTools Digest: Updates to the Developer tools in Chrome 33
                </span>
                <span class="description">Updates to the Chrome Developer Tools: async call stacks, edit locations, goto :line:column</span>
                
                  <span class="tag">devtools</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/tooling/supercharging-your-gruntfile/">
              <span class="left">
                <span class="author" data-author_id="paulbakaus"><img src="/static/images/profiles/75/paulbakaus.75.png" alt="Paul Bakaus" title="Paul Bakaus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 13th, 2014</span>
                <span class="title">
                  Supercharging your Gruntfile: How to squeeze the most out of your build configuration.
                </span>
                <span class="description">Learn how to squeeze the most out of your Gruntfile, by splitting it across multiple files, autoloading, concurrent tasks and smart notifications.</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">grunt</span>
                
                  <span class="tag">optimization</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webrtc/datachannels/">
              <span class="left">
                <span class="author" data-author_id="danristic"><img src="/static/images/profiles/75/danristic.75.png" alt="Dan Ristic" title="Dan Ristic" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 4th, 2014</span>
                <span class="title">
                  WebRTC data channels: WebRTC data channels for high performance data exchange
                </span>
                <span class="description">WebRTC data channels for high performance data exchange</span>
                
                  <span class="tag">webrtc</span>
                
                  <span class="tag">data</span>
                
                  <span class="tag">communication</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/offline/quota-research/">
              <span class="left">
                <span class="author" data-author_id="agektmr"><img src="/static/images/profiles/75/agektmr.75.png" alt="Eiji Kitamura" title="Eiji Kitamura" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 28th, 2014</span>
                <span class="title">
                  Working with quota on mobile browsers: A research report on browser storage
                </span>
                <span class="description">An in-depth article about the state of client-side storage on mobile devices.</span>
                
                  <span class="tag">offline</span>
                
                  <span class="tag">storage</span>
                
                  <span class="tag">indexedDB</span>
                
                  <span class="tag">fileSystem</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webperformance/usertiming/">
              <span class="left">
                <span class="author" data-author_id="alexdanilo"><img src="/static/images/profiles/75/alexdanilo.75.png" alt="Alex Danilo" title="Alex Danilo" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 21st, 2014</span>
                <span class="title">
                  User Timing API: Understanding your Web App
                </span>
                <span class="description">Get accurate and detailed timing statistics-natively-for page navigation and load events</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">timing</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/eme/basics/">
              <span class="left">
                <span class="author" data-author_id="dutton"><img src="/static/images/profiles/75/dutton.75.png" alt="Sam Dutton" title="Sam Dutton" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 16th, 2014</span>
                <span class="title">
                  EME WTF?: An introduction to Encrypted Media Extensions
                </span>
                <span class="description">Encrypted Media Extensions provides an API that enables web applications to interact with content protection systems. Learn how to allow playback of encrypted audio and video.</span>
                
                  <span class="tag">eme</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">video</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/es6/promises/">
              <span class="left">
                <span class="author" data-author_id="jakearchibald"><img src="/static/images/profiles/75/jakearchibald.75.png" alt="Jake Archibald" title="Jake Archibald" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 16th, 2013</span>
                <span class="title">
                  JavaScript Promises: There and back again
                </span>
                <span class="description">How to use promises natively in JavaScript.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">es6</span>
                
                  <span class="tag">promises</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/hobbit-front-end/">
              <span class="left">
                <span class="author" data-author_id="einaroberg"><img src="/static/images/profiles/75/einaroberg.75.png" alt="Einar Öberg" title="Einar Öberg" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 11th, 2013</span>
                <span class="title">
                  The Front-end of Middle-earth: A walkthrough of multi-device development
                </span>
                <span class="description">In this article we discuss the challenges, problems and solutions we encountered when creating the rest of the HTML5 experience for Middle-earth.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/devtools-terminal/">
              <span class="left">
                <span class="author" data-author_id="addyosmani"><img src="/static/images/profiles/75/addyosmani.75.png" alt="Addy Osmani" title="Addy Osmani" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 9th, 2013</span>
                <span class="title">
                  Using Your Terminal From The DevTools
                </span>
                <span class="description">How to access a complete terminal from inside the Chrome Developer Tools</span>
                
                  <span class="tag">extensions</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/mobile/">
              <span class="left">
                <span class="author" data-author_id="paulirish"><img src="/static/images/profiles/75/paulirish.75.png" alt="Paul Irish" title="Paul Irish" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 2nd, 2013</span>
                <span class="title">
                  Chrome DevTools for Mobile: Screencast and Emulation
                </span>
                <span class="description">Next-generation remote debugging and proper mobile emulation</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/novdigest/">
              <span class="left">
                <span class="author" data-author_id="deannarubin"><img src="/static/images/profiles/75/deannarubin.75.png" alt="Deanna Rubin" title="Deanna Rubin" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 27th, 2013</span>
                <span class="title">
                  Chrome DevTools November Digest
                </span>
                <span class="description">Updates to the Chrome Developer Tools: UI change, High-resolution JS profiling, Workspaces upgrades</span>
                
                  <span class="tag">devtools</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/tooling/synchronized-cross-device-testing/">
              <span class="left">
                <span class="author" data-author_id="addyosmani"><img src="/static/images/profiles/75/addyosmani.75.png" alt="Addy Osmani" title="Addy Osmani" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 25th, 2013</span>
                <span class="title">
                  Synchronized Cross-device Mobile Testing
                </span>
                <span class="description">Modern tools can help ease your cross-device testing workflow</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">testing</span>
                
                  <span class="tag">crossdevice</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/hobbit/">
              <span class="left">
                <span class="author" data-author_id="danielisaksson"><img src="/static/images/profiles/75/danielisaksson.75.png" alt="Daniel Isaksson" title="Daniel Isaksson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 20th, 2013</span>
                <span class="title">
                  The Hobbit Experience: Bringing Middle-Earth to Life with Mobile WebGL
                </span>
                <span class="description">Learn how North Kingdom built an immersive multimedia experience optimized for modern mobile browsers.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/imports/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 11th, 2013</span>
                <span class="title">
                  HTML Imports: #include for the web
                </span>
                <span class="description">HTML Imports allows you to include HTML/CSS/JS in other HTML documents.</span>
                
                  <span class="tag">imports</span>
                
                  <span class="tag">webcomponents</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/high-performance-animations/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 7th, 2013</span>
                <span class="title">
                  High Performance Animations
                </span>
                <span class="description">A deep dive into getting faster animations in your projects. We&#39;ll discover why modern browsers can animate these four properties cheaply: position, scale, rotation and opacity.</span>
                
                  <span class="tag">animations</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webrtc/infrastructure/">
              <span class="left">
                <span class="author" data-author_id="dutton"><img src="/static/images/profiles/75/dutton.75.png" alt="Sam Dutton" title="Sam Dutton" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 4th, 2013</span>
                <span class="title">
                  WebRTC in the real world: STUN, TURN and signaling
                </span>
                <span class="description">Build the back-end services you need to run a WebRTC application.</span>
                
                  <span class="tag">webrtc</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/fullscreen/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 23rd, 2013</span>
                <span class="title">
                  Building an amazing fullscreen mobile experience
                </span>
                <span class="description">We have the ability to easily make immersive fullscreen web sites and applications, but like anything on the web there are a couple of ways to do it.  Learn how to use the API and build build compelling experiences.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">fullscreen</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/animated-gifs/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 21st, 2013</span>
                <span class="title">
                  Avoiding Unnecessary Paints: Animated GIF Edition
                </span>
                <span class="description">Are animated GIFs slowing down your web app? Find and fix the problem!</span>
                
                  <span class="tag">render</span>
                
                  <span class="tag">painting</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/txt-compression/">
              <span class="left">
                <span class="author" data-author_id="coltmcanlis"><img src="/static/images/profiles/75/coltmcanlis.75.png" alt="Colt McAnlis" title="Colt McAnlis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 15th, 2013</span>
                <span class="title">
                  Text Compression for Web Developers
                </span>
                <span class="description">Reduce your page size by looking under the hood of text compression.</span>
                
                  <span class="tag">javascript</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/yeoman/">
              <span class="left">
                <span class="author" data-author_id="addyosmani"><img src="/static/images/profiles/75/addyosmani.75.png" alt="Addy Osmani" title="Addy Osmani" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 10th, 2013</span>
                <span class="title">
                  Building Web Apps With Yeoman And Polymer: Scaffold your webapps with modern tooling
                </span>
                <span class="description">Tooling for scaffolding Polymer web apps</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">yeoman</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/forms/requestautocomplete/">
              <span class="left">
                <span class="author" data-author_id="jakearchibald"><img src="/static/images/profiles/75/jakearchibald.75.png" alt="Jake Archibald" title="Jake Archibald" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 3rd, 2013</span>
                <span class="title">
                  requestAutocomplete - take my money, not my time
                </span>
                <span class="description">Optimizing website payments using the requestAutocomplete API</span>
                
                  <span class="tag">forms</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/img-compression/">
              <span class="left">
                <span class="author" data-author_id="coltmcanlis"><img src="/static/images/profiles/75/coltmcanlis.75.png" alt="Colt McAnlis" title="Colt McAnlis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 17th, 2013</span>
                <span class="title">
                  Image Compression for Web Developers
                </span>
                <span class="description">Reduce your page size by looking under the hood of image compression.</span>
                
                  <span class="tag">javascript</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/inspection/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 16th, 2013</span>
                <span class="title">
                  Canvas Inspection using Chrome DevTools
                </span>
                <span class="description">A dive into one of the newest features in Chrome DevTools: the ability to capture, replay and analyze your 2D and WebGL render calls.</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">render</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/customelements/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 28th, 2013</span>
                <span class="title">
                  Custom Elements: defining new elements in HTML
                </span>
                <span class="description">This article describes how to use document.register to define custom elements in HTML.</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">customelements</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/revolutions2013/">
              <span class="left">
                <span class="author" data-author_id="arthurevans"><img src="/static/images/profiles/75/arthurevans.75.png" alt="Arthur Evans" title="Arthur Evans" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 12th, 2013</span>
                <span class="title">
                  Chrome DevTools Revolutions 2013
                </span>
                <span class="description">A host of new DevTools features were introduced at Google I/O 2013. Now they&#39;re live in Chrome stable and ready for use!</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/internals/antialiasing-101/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 28th, 2013</span>
                <span class="title">
                  Antialiasing 101
                </span>
                <span class="description">An introduction to antialiasing, explaining how vector shapes and text are rendered smoothly.</span>
                
                  <span class="tag">render</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/static-mem-pools/">
              <span class="left">
                <span class="author" data-author_id="coltmcanlis"><img src="/static/images/profiles/75/coltmcanlis.75.png" alt="Colt McAnlis" title="Colt McAnlis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 21st, 2013</span>
                <span class="title">
                  Static Memory Javascript with Object Pools
                </span>
                <span class="description">Reduce memory churn, and get some of your much-needed performance back.</span>
                
                  <span class="tag">javascript</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/performance/mystery/">
              <span class="left">
                <span class="author" data-author_id="johnmccutchan"><img src="/static/images/profiles/75/johnmccutchan.75.png" alt="John McCutchan" title="John McCutchan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 13th, 2013</span>
                <span class="title">
                  Use forensics and detective work to solve JavaScript performance mysteries
                </span>
                <span class="description">Learn how to surface important signals from deep inside V8 and use them to improve the performance of your site</span>
                
                  <span class="tag">v8</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/memory/effectivemanagement/">
              <span class="left">
                <span class="author" data-author_id="johnmccutchan"><img src="/static/images/profiles/75/johnmccutchan.75.png" alt="John McCutchan" title="John McCutchan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 12th, 2013</span>
                <span class="title">
                  Effectively Managing Memory at Gmail scale
                </span>
                <span class="description">Learn how you to effectively manage memory at GMail scale.</span>
                
                  <span class="tag">memory</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/racer/">
              <span class="left">
                <span class="author" data-author_id="activetheory"><img src="/static/images/profiles/75/activetheory.75.png" alt="Active Theory" title="Active Theory" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 11th, 2013</span>
                <span class="title">
                  Case Study: Building Racer
                </span>
                <span class="description">The making of Racer - A Chrome Experiment</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">paperjs</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">multiplayer</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/racer-sound/">
              <span class="left">
                <span class="author" data-author_id="plan8"><img src="/static/images/profiles/75/plan8.75.png" alt="Plan 8" title="Plan 8" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 11th, 2013</span>
                <span class="title">
                  Case Study: The Sounds of Racer
                </span>
                <span class="description">Exploring how we made the sounds and synced the music between devices in Racer</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/world_wide_maze/">
              <span class="left">
                <span class="author" data-author_id="saqoosha"><img src="/static/images/profiles/75/saqoosha.75.png" alt="Saqoosha  " title="Saqoosha  " width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 6th, 2013</span>
                <span class="title">
                  Case Study: Inside World Wide Maze
                </span>
                <span class="description">The story behind building World Wide Maze.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">three.js</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/script-loading/">
              <span class="left">
                <span class="author" data-author_id="jakearchibald"><img src="/static/images/profiles/75/jakearchibald.75.png" alt="Jake Archibald" title="Jake Archibald" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 5th, 2013</span>
                <span class="title">
                  Deep dive into the murky waters of script loading
                </span>
                <span class="description">How to squeeze more performance out of script loading.</span>
                
                  <span class="tag">script</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/roll-it/">
              <span class="left">
                <span class="author" data-author_id="justingitlin"><img src="/static/images/profiles/75/justingitlin.75.png" alt="Justin Gitlin" title="Justin Gitlin" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 4th, 2013</span>
                <span class="title">
                  Creating Roll It
                </span>
                <span class="description">This case study takes a look at some of the key problems we solved to create Roll It.</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">three.js</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/natgeo/">
              <span class="left">
                <span class="author" data-author_id="christophergammon"><img src="/static/images/profiles/75/christophergammon.75.png" alt="Christopher Gammon" title="Christopher Gammon" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 3rd, 2013</span>
                <span class="title">
                  Next Generation Web Layout: National Geographic Forest Giant
                </span>
                <span class="description">How we built a great mobile experience for National Geographic</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/unnecessary-paints/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 8th, 2013</span>
                <span class="title">
                  Avoiding Unnecessary Paints
                </span>
                <span class="description">Understand how paints affect your performance.</span>
                
                  <span class="tag">render</span>
                
                  <span class="tag">painting</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/css-paint-times/">
              <span class="left">
                <span class="author" data-author_id="coltmcanlis"><img src="/static/images/profiles/75/coltmcanlis.75.png" alt="Colt McAnlis" title="Colt McAnlis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 12th, 2013</span>
                <span class="title">
                  CSS Paint Times and Page Render Weight
                </span>
                <span class="description">Understand how different CSS property combinations can influence the paint-time of your page.</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">render</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/google-io-2013/">
              <span class="left">
                <span class="author" data-author_id="thomasreynolds"><img src="/static/images/profiles/75/thomasreynolds.75.png" alt="Thomas Reynolds" title="Thomas Reynolds" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 12th, 2013</span>
                <span class="title">
                  Case Study: Google I/O 2013 Experiment
                </span>
                <span class="description">Discover how the Google I/O 2013 experiment was developed.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">canvas</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/masking/adobe/">
              <span class="left">
                <span class="author" data-author_id="schulzedirk"><img src="/static/images/profiles/75/schulzedirk.75.png" alt="Dirk Schulze" title="Dirk Schulze" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 4th, 2013</span>
                <span class="title">
                  CSS Masking
                </span>
                <span class="description">Using clipping and masking from CSS.</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/easy-high-dpi-images/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 28th, 2013</span>
                <span class="title">
                  Easy High DPI Images
                </span>
                <span class="description">This article describes a way to do as little work as possible, yet still serve beautiful images for both high and low DPI screens.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">images</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/profiling/">
              <span class="left">
                <span class="author" data-author_id="johnmccutchan"><img src="/static/images/profiles/75/johnmccutchan.75.png" alt="John McCutchan" title="John McCutchan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 26th, 2013</span>
                <span class="title">
                  Profiling Mobile HTML5 Apps With Chrome DevTools
                </span>
                <span class="description">Learn how you can use Chrome DevTools against your mobile device.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/shadowdom-301/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 21st, 2013</span>
                <span class="title">
                  Shadow DOM 301: Advanced Concepts & DOM APIs
                </span>
                <span class="description">Advanced tips and tricks with Shadow DOM.</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">shadowdom</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/shadowdom-201/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 15th, 2013</span>
                <span class="title">
                  Shadow DOM 201: CSS and Styling
                </span>
                <span class="description">Learn about CSS styling options in Shadow DOM.</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">shadowdom</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/touchandmouse/">
              <span class="left">
                <span class="author" data-author_id="chriswilson"><img src="/static/images/profiles/75/chriswilson.75.png" alt="Chris Wilson" title="Chris Wilson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 13th, 2013</span>
                <span class="title">
                  Touch And Mouse: Together Again For The First Time
                </span>
                <span class="description">This article describes techniques to support mouse and touch together.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">touch</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/layers/">
              <span class="left">
                <span class="author" data-author_id="tomwiltzius"><img src="/static/images/profiles/75/tomwiltzius.75.png" alt="Tom Wiltzius" title="Tom Wiltzius" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 11th, 2013</span>
                <span class="title">
                  Accelerated Rendering in Chrome: The Layer Model
                </span>
                <span class="description">This article explains how GPU-accelerated rendering works in Chrome.</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/template/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 26th, 2013</span>
                <span class="title">
                  HTML's New Template Tag: standardizing client-side templating
                </span>
                <span class="description">Introduction to the &amp;lt;template&amp;gt; element.</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/security/transport-layer-security/">
              <span class="left">
                <span class="author" data-author_id="mikewest"><img src="/static/images/profiles/75/mikewest.75.png" alt="Mike West" title="Mike West" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 14th, 2013</span>
                <span class="title">
                  Confound Malicious Middlemen with HTTPS and HTTP Strict Transport Security
                </span>
                <span class="description">Learn why and how you ought to serve your sites over a secure HTTPS connection, rather than wide open and vulnerably over HTTP.</span>
                
                  <span class="tag">security</span>
                
                  <span class="tag">https</span>
                
                  <span class="tag">hsts</span>
                
                  <span class="tag">encryption</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/oz/">
              <span class="left">
                <span class="author" data-author_id="unit9com"><img src="/static/images/profiles/75/unit9com.75.png" alt="unit9 com" title="unit9 com" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 5th, 2013</span>
                <span class="title">
                  Case Study: Find Your Way to Oz
                </span>
                <span class="description">How we made a Magical Chrome Experiment.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">getusermedia</span>
                
                  <span class="tag">shaders</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/audio/scheduling/">
              <span class="left">
                <span class="author" data-author_id="chriswilson"><img src="/static/images/profiles/75/chriswilson.75.png" alt="Chris Wilson" title="Chris Wilson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 9th, 2013</span>
                <span class="title">
                  A Tale of Two Clocks - Scheduling Web Audio with Precision
                </span>
                <span class="description">Learn how to build rock-solid rhythmic timing into Web Audio applications.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">timing</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webcomponents/shadowdom/">
              <span class="left">
                <span class="author" data-author_id="dominiccooney"><img src="/static/images/profiles/75/dominiccooney.75.png" alt="Dominic Cooney" title="Dominic Cooney" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 4th, 2013</span>
                <span class="title">
                  Shadow DOM 101
                </span>
                <span class="description">Learn how to use Shadow DOM to separate content from presentation.</span>
                
                  <span class="tag">webcomponents</span>
                
                  <span class="tag">shadowdom</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/security/sandboxed-iframes/">
              <span class="left">
                <span class="author" data-author_id="mikewest"><img src="/static/images/profiles/75/mikewest.75.png" alt="Mike West" title="Mike West" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 4th, 2013</span>
                <span class="title">
                  Play safely in sandboxed IFrames
                </span>
                <span class="description">Learn how to run IFramed content in a sandbox, greatly reducing the risk associated with third-party widgets, and your own application&#39;s code.</span>
                
                  <span class="tag">security</span>
                
                  <span class="tag">xss</span>
                
                  <span class="tag">sandbox</span>
                
                  <span class="tag">iframe</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/scrolling/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 20th, 2012</span>
                <span class="title">
                  Scrolling Performance
                </span>
                <span class="description">This article explains scrolling performance and how to avoid large repaints.</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/parallax/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 20th, 2012</span>
                <span class="title">
                  Parallaxin'
                </span>
                <span class="description">An investigation into the parallax effect and common pitfalls in implementation.</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/jamwithchrome-interaction/">
              <span class="left">
                <span class="author" data-author_id="fredchasen"><img src="/static/images/profiles/75/fredchasen.75.png" alt="Fred Chasen" title="Fred Chasen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 5th, 2012</span>
                <span class="title">
                  Case-study: JAM with Chrome - How we made the UI rock
                </span>
                <span class="description">A deep dive into how the instruments were built for JAM with Chrome</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">svg</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/100000stars/">
              <span class="left">
                <span class="author" data-author_id="michaelchang"><img src="/static/images/profiles/75/michaelchang.75.png" alt="Michael Chang" title="Michael Chang" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 28th, 2012</span>
                <span class="title">
                  Making 100,000 Stars
                </span>
                <span class="description">A case study using THREE.js to visualize space.</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">CSS</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">audio</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/jamwithchrome-audio/">
              <span class="left">
                <span class="author" data-author_id="oskareriksson"><img src="/static/images/profiles/75/oskareriksson.75.png" alt="Oskar Eriksson" title="Oskar Eriksson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 8th, 2012</span>
                <span class="title">
                  Case-study: JAM with Chrome - How we made the audio rock
                </span>
                <span class="description">We take a look at some of the challenges we ecountered during the development of JAM with Chrome, using the Web Audio API</span>
                
                  <span class="tag">webaudio</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/rendering/">
              <span class="left">
                <span class="author" data-author_id="tomwiltzius"><img src="/static/images/profiles/75/tomwiltzius.75.png" alt="Tom Wiltzius" title="Tom Wiltzius" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 2nd, 2012</span>
                <span class="title">
                  Jank Busting for Better Rendering Performance
                </span>
                <span class="description">Techniques for improving rendering performance in web applications.</span>
                
                  <span class="tag">JavaScript</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/pagevisibility/intro/">
              <span class="left">
                <span class="author" data-author_id="joemarini"><img src="/static/images/profiles/75/joemarini.75.png" alt="Joe Marini" title="Joe Marini" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 25th, 2012</span>
                <span class="title">
                  Using the PageVisibility API
                </span>
                <span class="description">An introduction to the PageVisibility API in HTML5.</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/forms/constraintvalidation/">
              <span class="left">
                <span class="author" data-author_id="tjvantoll"><img src="/static/images/profiles/75/tjvantoll.75.png" alt="TJ VanToll" title="TJ VanToll" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 17th, 2012</span>
                <span class="title">
                  Constraint Validation: Native Client Side Validation for Web Forms
                </span>
                <span class="description">A tutorial on HTML5&#39;s constraint validation API and how it can be used to enhance forms.</span>
                
                  <span class="tag">forms</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/svg/mobile_fundamentals/">
              <span class="left">
                <span class="author" data-author_id="alexdanilo"><img src="/static/images/profiles/75/alexdanilo.75.png" alt="Alex Danilo" title="Alex Danilo" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 15th, 2012</span>
                <span class="title">
                  Splash Vector Graphics on your Responsive Site
                </span>
                <span class="description">Tips and techniques for using SVG effectively on mobile browsers.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">svg</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/v8/">
              <span class="left">
                <span class="author" data-author_id="chriswilson"><img src="/static/images/profiles/75/chriswilson.75.png" alt="Chris Wilson" title="Chris Wilson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 11th, 2012</span>
                <span class="title">
                  Performance Tips for JavaScript in V8
                </span>
                <span class="description">Techniques for improving JavaScript performance in web applications, particularly when running in Chrome&#39;s V8 engine.</span>
                
                  <span class="tag">JavaScript</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/streaming/screenshare/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 21st, 2012</span>
                <span class="title">
                  Screensharing a browser tab in HTML5?
                </span>
                <span class="description">Techniques for screensharing the contents of a browser tab.</span>
                
                  <span class="tag">streaming</span>
                
                  <span class="tag">screensharing</span>
                
                  <span class="tag">mutationobservers</span>
                
                  <span class="tag">binary</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/movikantirevo/">
              <span class="left">
                <span class="author" data-author_id="petele"><img src="/static/images/profiles/75/petele.75.png" alt="Pete LePage" title="Pete LePage" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 19th, 2012</span>
                <span class="title">
                  Movi Kanti Revo - Part 1: Building the 3D World
                </span>
                <span class="description">Building the 3D world of Movi.Kanti.Revo.</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">video</span>
                
                  <span class="tag">getusermedia</span>
                
                  <span class="tag">multimedia</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/async/deferred/">
              <span class="left">
                <span class="author" data-author_id="jeremychone"><img src="/static/images/profiles/75/jeremychone.75.png" alt="Jeremy Chone" title="Jeremy Chone" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 29th, 2012</span>
                <span class="title">
                  Asynch JS: The Power Of $.Deferred
                </span>
                <span class="description">A discussion about how to use asynchronous techniques in HTML5.</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">xhr</span>
                
                  <span class="tag">javascript</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/hidpi/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 25th, 2012</span>
                <span class="title">
                  High DPI Canvas
                </span>
                <span class="description">High density displays are here on many devices. The canvas element deals with that in different ways in different browsers - find out how.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/high-dpi/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 22nd, 2012</span>
                <span class="title">
                  High DPI Images for Variable Pixel Densities
                </span>
                <span class="description">Techniques for delivering the best quality images as quickly and efficiently as possible.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">css</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/pointerlock/intro/">
              <span class="left">
                <span class="author" data-author_id="johnmccutchan"><img src="/static/images/profiles/75/johnmccutchan.75.png" alt="John McCutchan" title="John McCutchan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 17th, 2012</span>
                <span class="title">
                  Pointer Lock and First Person Shooter Controls
                </span>
                <span class="description">Learn how to use HTML5 pointer lock and implement first person shooter controls.</span>
                
                  <span class="tag">pointerlock</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/doodles/gamepad/">
              <span class="left">
                <span class="author" data-author_id="marcinwichary"><img src="/static/images/profiles/75/marcinwichary.75.png" alt="Marcin Wichary" title="Marcin Wichary" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 6th, 2012</span>
                <span class="title">
                  Jumping the Hurdles with the Gamepad API
                </span>
                <span class="description">How the Google Doodles team used the Gamepad API to include different user interactions.</span>
                
                  <span class="tag">doodle</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/regions/adobe/">
              <span class="left">
                <span class="author" data-author_id="christiancantrell"><img src="/static/images/profiles/75/christiancantrell.75.png" alt="Christian Cantrell" title="Christian Cantrell" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 3rd, 2012</span>
                <span class="title">
                  Magazine-like Layout for the Web with CSS Regions and Exclusions
                </span>
                <span class="description">Learn how Adobe is helping to bring new capabilities to CSS which enable advanced layout techniques for the modern web.</span>
                
                  <span class="tag">exclusions</span>
                
                  <span class="tag">regions</span>
                
                  <span class="tag">CSS</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/frameworks/angular-websockets/">
              <span class="left">
                <span class="author" data-author_id="brianford"><img src="/static/images/profiles/75/brianford.75.png" alt="Brian Ford" title="Brian Ford" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 27th, 2012</span>
                <span class="title">
                  Writing an AngularJS App with Socket.IO
                </span>
                <span class="description">Create a chat application with AngularJS, Socket.IO, and Node.js.</span>
                
                  <span class="tag">angular</span>
                
                  <span class="tag">node</span>
                
                  <span class="tag">socketio</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/globe/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 26th, 2012</span>
                <span class="title">
                  Making of the World Wonders 3D Globe
                </span>
                <span class="description">How the Google World Wonders 3D Globe was made.</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/subsonic/">
              <span class="left">
                <span class="author" data-author_id="seanmiddleditch"><img src="/static/images/profiles/75/seanmiddleditch.75.png" alt="Sean Middleditch" title="Sean Middleditch" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 25th, 2012</span>
                <span class="title">
                  Case Study: SONAR, HTML5 Game Development
                </span>
                <span class="description">Read how Subsonic built SONAR using the HTML5 FileSystem API to cache 70+ MB of game data.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webrtc/basics/">
              <span class="left">
                <span class="author" data-author_id="dutton"><img src="/static/images/profiles/75/dutton.75.png" alt="Sam Dutton" title="Sam Dutton" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 23rd, 2012</span>
                <span class="title">
                  Getting Started with WebRTC
                </span>
                <span class="description">Plugin-free, realtime communication of video, audio and data using WebRTC.</span>
                
                  <span class="tag">audio</span>
                
                  <span class="tag">video</span>
                
                  <span class="tag">realtime</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/typed_arrays/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 20th, 2012</span>
                <span class="title">
                  Typed Arrays: Binary Data in the Browser
                </span>
                <span class="description">Overview of Typed Arrays APIs and libraries.</span>
                
                  <span class="tag">type_arrays</span>
                
                  <span class="tag">binary</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/indexeddb/uidatabinding/">
              <span class="left">
                <span class="author" data-author_id="raymondcamden"><img src="/static/images/profiles/75/raymondcamden.75.png" alt="Raymond Camden" title="Raymond Camden" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 8th, 2012</span>
                <span class="title">
                  Databinding UI Elements with IndexedDB
                </span>
                <span class="description">Use JQuery UI to bind data from IndexedDB.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">indexeddb</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/webgl_orthographic_3d/">
              <span class="left">
                <span class="author" data-author_id="gman"><img src="/static/images/profiles/75/gman.75.png" alt="Gregg Tavares" title="Gregg Tavares" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 20th, 2012</span>
                <span class="title">
                  WebGL Orthographic 3D
                </span>
                <span class="description">How orthographic 3D transforms work in WebGL.</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/security/content-security-policy/">
              <span class="left">
                <span class="author" data-author_id="mikewest"><img src="/static/images/profiles/75/mikewest.75.png" alt="Mike West" title="Mike West" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 15th, 2012</span>
                <span class="title">
                  An Introduction to Content Security Policy
                </span>
                <span class="description">Mitigate the risk of cross-site scripting attacks by whitelisting trusted origins with a Content Security Policy.</span>
                
                  <span class="tag">xss</span>
                
                  <span class="tag">security</span>
                
                  <span class="tag">csp</span>
                
                  <span class="tag">eval</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/animations/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 28th, 2012</span>
                <span class="title">
                  Leaner, Meaner, Faster Animations with requestAnimationFrame
                </span>
                <span class="description">Let&#39;s take requestAnimationFrame to the next level and use it for debouncing resize events. We&#39;ll also dig into how to debug performance and smooth out your code.</span>
                
                  <span class="tag">animations</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/filters/understanding-css/">
              <span class="left">
                <span class="author" data-author_id="alexdanilo"><img src="/static/images/profiles/75/alexdanilo.75.png" alt="Alex Danilo" title="Alex Danilo" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 25th, 2012</span>
                <span class="title">
                  Understanding CSS Filter Effects
                </span>
                <span class="description">Learn how CSS filters work, their performance impact and what each filter effect does.</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">filters</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/games/abouttracing/">
              <span class="left">
                <span class="author" data-author_id="lillithompson"><img src="/static/images/profiles/75/lillithompson.75.png" alt="Lilli Thompson" title="Lilli Thompson" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 24th, 2012</span>
                <span class="title">
                  Profiling your WebGL Game with the about:tracing flag
                </span>
                <span class="description">The about:tracing tool provides the insight that helps you avoid hasty workarounds aimed at performance improvement, but which are essentially well-intentioned guesswork. You’ll save a lot of time and energy, get a clearer picture of what Chrome is doing with each frame, and use this information to optimize your game.</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">internals</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/cross-device/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 24th, 2012</span>
                <span class="title">
                  A non-responsive approach to building cross-device webapps
                </span>
                <span class="description">Responsive design is great for changing the styling of your UIs depending on screen size, but as your projects increase in complexity, you may want to serve custom versions of your client depending on what kind of device your visitors are using. This article covers classifying visitor&#39;s devices into device classes, and serving the appropriate version, while maximizing code reuse between versions.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webaudio/fieldrunners/">
              <span class="left">
                <span class="author" data-author_id="zgoddard"><img src="/static/images/profiles/75/zgoddard.75.png" alt="Z Goddard" title="Z Goddard" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 24th, 2012</span>
                <span class="title">
                  Case Study: A Tale of an HTML5 Game with Web Audio
                </span>
                <span class="description">Gradient Studios ported their award-winning Fieldrunners game to HTML5. This article chronicles their journey in utilizing the Web Audio API to implement sound for Fieldrunners.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/webgl_transforms/">
              <span class="left">
                <span class="author" data-author_id="gman"><img src="/static/images/profiles/75/gman.75.png" alt="Gregg Tavares" title="Gregg Tavares" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 18th, 2012</span>
                <span class="title">
                  WebGL Transforms
                </span>
                <span class="description">How 3D transforms work and how you can use them in WebGL.</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/responsivedesign/">
              <span class="left">
                <span class="author" data-author_id="bradfrost"><img src="/static/images/profiles/75/bradfrost.75.png" alt="Brad Frost" title="Brad Frost" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 16th, 2012</span>
                <span class="title">
                  Creating a Mobile-First Responsive Web Design
                </span>
                <span class="description">Responsive web design gives web creators some tools for making layouts that respond to any screen size. This article uses fluid grids, flexible images and media queries to get the layout looking great regardless of the size of the device&#39;s screen dimensions.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/sourcemaps/">
              <span class="left">
                <span class="author" data-author_id="ryanseddon"><img src="/static/images/profiles/75/ryanseddon.75.png" alt="Ryan Seddon" title="Ryan Seddon" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 21st, 2012</span>
                <span class="title">
                  Introduction to JavaScript Source Maps
                </span>
                <span class="description">Have you ever found yourself wishing you could keep your client-side code readable and more importantly debuggable even after you&#39;ve combined and minified it, without impacting performance? Well now you can through the magic of source maps.</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webaudio/games/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 28th, 2012</span>
                <span class="title">
                  Developing Game Audio with the Web Audio API
                </span>
                <span class="description">Varied intensity background music, overlapping sound effects and randomization, sound source and listener spatialization (and directional sound cones), room effects via convolution, detect and prevent clipping, and implement dynamics compression. Including interactive inline demos!</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/jsartoolkit_webrtc/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 28th, 2012</span>
                <span class="title">
                  Writing Augmented Reality Applications using JSARToolKit
                </span>
                <span class="description">Using the JSARToolKit library with WebRTC to build augmented reality applications in JavaScript.</span>
                
                  <span class="tag">getusermedia</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/technitone/">
              <span class="left">
                <span class="author" data-author_id="gskinnerdotcom"><img src="/static/images/profiles/75/gskinnerdotcom.75.png" alt="gskinnerdot com" title="gskinnerdot com" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 27th, 2012</span>
                <span class="title">
                  Case Study: Building Technitone.com
                </span>
                <span class="description">How Technitone.com was built with the Web Audio API, WebGL, WebSockets, and a decent amount of magic.</span>
                
                  <span class="tag">audio</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/getusermedia/intro/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 22nd, 2012</span>
                <span class="title">
                  Capturing Audio & Video in HTML5
                </span>
                <span class="description">How to capture audio and video using the navigator.getUserMedia() API.</span>
                
                  <span class="tag">getusermedia</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/munkadoo_bouncymouse/">
              <span class="left">
                <span class="author" data-author_id="ericrk"><img src="/static/images/profiles/75/ericrk.75.png" alt="Eric Karl" title="Eric Karl" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 18th, 2012</span>
                <span class="title">
                  Case Study: Bouncy Mouse
                </span>
                <span class="description">Bouncy Mouse is a slingshot platformer by Munkadoo Games. This article talks about porting the game to HTML5 and WebAudio.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webaudio/positional_audio/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 16th, 2012</span>
                <span class="title">
                  Mixing Positional Audio and WebGL
                </span>
                <span class="description">How to use the positional audio features in Web Audio API with Three.js.</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/webgl_fundamentals/">
              <span class="left">
                <span class="author" data-author_id="gman"><img src="/static/images/profiles/75/gman.75.png" alt="Gregg Tavares" title="Gregg Tavares" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 9th, 2012</span>
                <span class="title">
                  WebGL Fundamentals
                </span>
                <span class="description">Fundamentals of using WebGL as a 2D drawing API and using shaders for image processing.</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/track/basics/">
              <span class="left">
                <span class="author" data-author_id="dutton"><img src="/static/images/profiles/75/dutton.75.png" alt="Sam Dutton" title="Sam Dutton" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 8th, 2012</span>
                <span class="title">
                  Getting Started With the Track Element
                </span>
                <span class="description">The track element provides a simple, standardized way to add subtitles and captions to video and audio, but can also be used with other kinds of timed data, to improve searchability and enable deep linking.</span>
                
                  <span class="tag">accessibility</span>
                
                  <span class="tag">audio</span>
                
                  <span class="tag">video</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/closure/photographyprize/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 7th, 2012</span>
                <span class="title">
                  Google Photography Prize Gallery
                </span>
                <span class="description">Building the gallery widget for the Google Photography Prize site using Closure.</span>
                
                  <span class="tag">closure</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/million_letters/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 30th, 2012</span>
                <span class="title">
                  Animating a Million Letters Using Three.js
                </span>
                <span class="description">A guide to using shaders to animate large amounts of particles.</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">three.js</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/doodles/lem/">
              <span class="left">
                <span class="author" data-author_id="marcinwichary"><img src="/static/images/profiles/75/marcinwichary.75.png" alt="Marcin Wichary" title="Marcin Wichary" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 21st, 2011</span>
                <span class="title">
                  Case Study: Building the Stanisław Lem Google doodle
                </span>
                <span class="description">A walk through of the HTML5 tech behind the Stanisław Lem Google doodle.</span>
                
                  <span class="tag">doodle</span>
                
                  <span class="tag">media</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webdatabase/websql-indexeddb/">
              <span class="left">
                <span class="author" data-author_id="idogreen"><img src="/static/images/profiles/75/idogreen.75.png" alt="Ido Green" title="Ido Green" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 5th, 2011</span>
                <span class="title">
                  Migrating your WebSQL DB to IndexedDB
                </span>
                <span class="description">A look at what it would take to port a WebSQL based application to IndexedDB.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">indexeddb</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/cors/">
              <span class="left">
                <span class="author" data-author_id="monsurhossain"><img src="/static/images/profiles/75/monsurhossain.75.png" alt="Monsur Hossain" title="Monsur Hossain" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 26th, 2011</span>
                <span class="title">
                  Using CORS
                </span>
                <span class="description">An introduction to Cross Origin Resource Sharing (CORS), which gives scripts the ability to make cross-origin XHRs.</span>
                
                  <span class="tag">cors</span>
                
                  <span class="tag">xhr2</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/file/filesystem-sync/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 25th, 2011</span>
                <span class="title">
                  The Synchronous FileSystem API for Workers
                </span>
                <span class="description">The HTML5 FileSystem API offers an synchronous version to be used in the context of Web Workers. The tutorial introduces the Synchronous API, and gives practical examples of using it.</span>
                
                  <span class="tag">filesystem</span>
                
                  <span class="tag">workers</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webaudio/intro/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 14th, 2011</span>
                <span class="title">
                  Getting Started with Web Audio API
                </span>
                <span class="description">A gentle introduction to loading and playing, cross-fading, and filtering sound using the Web Audio API.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">webaudio</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/optimization-and-performance/">
              <span class="left">
                <span class="author" data-author_id="wesleyhales"><img src="/static/images/profiles/75/wesleyhales.75.png" alt="Wesley Hales" title="Wesley Hales" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 19th, 2011</span>
                <span class="title">
                  HTML5 Techniques for Optimizing Mobile Performance
                </span>
                <span class="description">Learn the fundamentals of an HTML5 mobile framework. From network detection to sliding, flipping, and more.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/raphael/intro/">
              <span class="left">
                <span class="author" data-author_id="jameswilliams"><img src="/static/images/profiles/75/jameswilliams.75.png" alt="James Williams" title="James Williams" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 8th, 2011</span>
                <span class="title">
                  Introduction to Raphaël.js
                </span>
                <span class="description">Learn how to use Raphaël.js to create cross-platform SVG scenes.</span>
                
                  <span class="tag">svg</span>
                
                  <span class="tag">raphaeljs</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webperformance/basics/">
              <span class="left">
                <span class="author" data-author_id="dutton"><img src="/static/images/profiles/75/dutton.75.png" alt="Sam Dutton" title="Sam Dutton" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 31st, 2011</span>
                <span class="title">
                  Measuring Page Load Speed with Navigation Timing
                </span>
                <span class="description">Get accurate and detailed timing statistics-natively-for page navigation and load events.</span>
                
                  <span class="tag">navigationtiming</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/touch/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 21st, 2011</span>
                <span class="title">
                  Multi-touch Web Development
                </span>
                <span class="description">Introduction on touch events for mobile devices.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/performance/">
              <span class="left">
                <span class="author" data-author_id="smus"><img src="/static/images/profiles/75/smus.75.png" alt="Boris Smus" title="Boris Smus" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 16th, 2011</span>
                <span class="title">
                  Improving HTML5 Canvas Performance
                </span>
                <span class="description">Ten tips to make your canvas applications and games faster. Every technique is backed up by a performance test.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/integrating/">
              <span class="left">
                <span class="author" data-author_id="davidtong"><img src="/static/images/profiles/75/davidtong.75.png" alt="David Tong" title="David Tong" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 5th, 2011</span>
                <span class="title">
                  Integrating Canvas into your Web App
                </span>
                <span class="description">Use the HTML5 canvas element to create, edit, open, export images and tips on how these techniques can be applied to an existing web application.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/internals/howbrowserswork/">
              <span class="left">
                <span class="author" data-author_id="taligarsiel"><img src="/static/images/profiles/75/taligarsiel.75.png" alt="Tali Garsiel" title="Tali Garsiel" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 5th, 2011</span>
                <span class="title">
                  How Browsers Work: Behind the scenes of modern web browsers
                </span>
                <span class="description">In this comprehensive primer, you will learn what happens in the browser between when you type google.com in the address bar until you see the Google page on the browser screen.</span>
                
                  <span class="tag">internals</span>
                
                  <span class="tag">tooling</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/gopherwoord-studios-resizing-html5-games/">
              <span class="left">
                <span class="author" data-author_id="derekdetweiler"><img src="/static/images/profiles/75/derekdetweiler.75.png" alt="Derek Detweiler" title="Derek Detweiler" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 3rd, 2011</span>
                <span class="title">
                  Case Study: Auto-Resizing HTML5 Games
                </span>
                <span class="description">Resizing your game to fit a variety of form factors and window sizes.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/games/assetmanager/">
              <span class="left">
                <span class="author" data-author_id="sethladd"><img src="/static/images/profiles/75/sethladd.75.png" alt="Seth Ladd" title="Seth Ladd" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 2nd, 2011</span>
                <span class="title">
                  Simple Asset Management for HTML5 Games
                </span>
                <span class="description">Centralize and manage the asset downloads for your HTML5 game.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/detection/index.html">
              <span class="left">
                <span class="author" data-author_id="mahemoff"><img src="/static/images/profiles/75/mahemoff.75.png" alt="Michael Mahemoff" title="Michael Mahemoff" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 27th, 2011</span>
                <span class="title">
                  Feature, Browser, and Form Factor Detection: It's Good for the Environment
                </span>
                <span class="description">Tune your app to the environment it&#39;s running in using Feature Detection, Browser Detection, and Form Factor detection.</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">feature detection</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/nativedebate/">
              <span class="left">
                <span class="author" data-author_id="mahemoff"><img src="/static/images/profiles/75/mahemoff.75.png" alt="Michael Mahemoff" title="Michael Mahemoff" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 3rd, 2011</span>
                <span class="title">
                  HTML5 vs Native: The Mobile App Debate
                </span>
                <span class="description">There are still compelling reasons to go native, and clearly, many developers are indeed going that route. This article is a debate on native versus web. We&#39;ll examine each point in favor of native, then we&#39;ll let the web come in and give its best defense.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/forms/html5forms/">
              <span class="left">
                <span class="author" data-author_id="petele"><img src="/static/images/profiles/75/petele.75.png" alt="Pete LePage" title="Pete LePage" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 2nd, 2011</span>
                <span class="title">
                  Making Forms Fabulous with HTML5
                </span>
                <span class="description">Take advantage of improved forms support in HTML5 to build better forms, more easily.</span>
                
                  <span class="tag">forms</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/shaders/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 2nd, 2011</span>
                <span class="title">
                  An Introduction to Shaders
                </span>
                <span class="description">Want to learn about WebGL shaders but don&#39;t know where to start? I&#39;m here to help!</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">shaders</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/three/intro/">
              <span class="left">
                <span class="author" data-author_id="paullewis"><img src="/static/images/profiles/75/paullewis.75.png" alt="Paul Lewis" title="Paul Lewis" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 2nd, 2011</span>
                <span class="title">
                  Getting Started with Three.js
                </span>
                <span class="description">Three.js is a powerful engine for doing native 3D work in your browser. But how do you get going?</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">webgl</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/workingoffthegrid/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 1st, 2011</span>
                <span class="title">
                  Working Off the Grid with HTML5 Offline
                </span>
                <span class="description">This article covers practical techniques and examples for handling connectivity flakiness.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/google-chrome-frame/">
              <span class="left">
                <span class="author" data-author_id="malteubl"><img src="/static/images/profiles/75/malteubl.75.png" alt="Malte Ubl" title="Malte Ubl" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 30th, 2011</span>
                <span class="title">
                  Rendering HTML5 in older browsers with Google Chrome Frame
                </span>
                <span class="description">HTML5 adds a multitude of new awesome tools to the web developer toolbox. Google Chrome Frame helps bringing these features to older browsers. This article will tell you how to use Chrome Frame on your site.</span>
                
                  <span class="tag">chromeframe</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/file/xhr2/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 27th, 2011</span>
                <span class="title">
                  New Tricks in XMLHttpRequest2
                </span>
                <span class="description">There has been a slew of improvements to our old friend &lt;code&gt;XMLHttpRequest&lt;/code&gt; for working with different types of data. This tutorial covers the new hotness.</span>
                
                  <span class="tag">binary</span>
                
                  <span class="tag">xhr2</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/imagefilters/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 25th, 2011</span>
                <span class="title">
                  Image Filters with Canvas
                </span>
                <span class="description">A quick guide to writing custom image filters with &amp;lt;canvas&amp;gt;.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webgl/demoloop/">
              <span class="left">
                <span class="author" data-author_id="ilmari"><img src="/static/images/profiles/75/ilmari.75.png" alt="Ilmari Heikkinen" title="Ilmari Heikkinen" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 25th, 2011</span>
                <span class="title">
                  Chrome Experiments Demo Harness
                </span>
                <span class="description">Experiences from building a kiosk-style demo station with HTML and WebGL.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">wegl</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/device/orientation/">
              <span class="left">
                <span class="author" data-author_id="petele"><img src="/static/images/profiles/75/petele.75.png" alt="Pete LePage" title="Pete LePage" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">April 29th, 2011</span>
                <span class="title">
                  This End Up: Using Device Orientation
                </span>
                <span class="description">Learn how to use device orientation and device motion events to tell when your computer is moving.</span>
                
                  <span class="tag">device</span>
                
                  <span class="tag">devicemotion</span>
                
                  <span class="tag">deviceorientation</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/sunlight_streamcongress/">
              <span class="left">
                <span class="author" data-author_id="luigimontanez"><img src="/static/images/profiles/75/luigimontanez.75.png" alt="Luigi Montanez" title="Luigi Montanez" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 17th, 2011</span>
                <span class="title">
                  Case Study: Real-time Updates in Stream Congress
                </span>
                <span class="description">Choosing the right technology to accomplish real-time, asynchronous updates.</span>
                
                  <span class="tag">eventsource</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/wordico/">
              <span class="left">
                <span class="author" data-author_id="adammark"><img src="/static/images/profiles/75/adammark.75.png" alt="Adam Mark" title="Adam Mark" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 10th, 2011</span>
                <span class="title">
                  Case Study: Converting Wordico from Flash to HTML5
                </span>
                <span class="description">Learn how we converted our &lt;a href=&quot;https://chrome.google.com/webstore/detail/ehehfnkgbccpcjmfhdkbeakkpibbcfdl&quot;&gt;Wordico&lt;/a&gt; crossword game from Flash to HTML5.</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/mobile/mobifying/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 3rd, 2011</span>
                <span class="title">
                  "Mobifying" Your HTML5 Site
                </span>
                <span class="description">A guide on how to create a mobile version of an existing HTML5 website. This study looks at what was required to make html5rocks.com friendly to mobile users.</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/texteffects/">
              <span class="left">
                <span class="author" data-author_id="mdeal"><img src="/static/images/profiles/75/mdeal.75.png" alt="Michael Deal" title="Michael Deal" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">March 1st, 2011</span>
                <span class="title">
                  Typographic effects in canvas
                </span>
                <span class="description">Effects in canvas inner/outer shadows, neon-glows, reflections, space-age, pattern/gradient overlays, stereoscopic imaging, and other text/vector-effects...</span>
                
                  <span class="tag">webfonts</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/html5/">
              <span class="left">
                <span class="author" data-author_id="malteubl"><img src="/static/images/profiles/75/malteubl.75.png" alt="Malte Ubl" title="Malte Ubl" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 14th, 2011</span>
                <span class="title">
                  Improving the Performance of your HTML5 App
                </span>
                <span class="description">Optimization strategies and techniques for HTML5 applications.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/onslaught/">
              <span class="left">
                <span class="author" data-author_id="matthackett"><img src="/static/images/profiles/75/matthackett.75.png" alt="Matt Hackett" title="Matt Hackett" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 10th, 2011</span>
                <span class="title">
                  Case Study: Onslaught! Arena
                </span>
                <span class="description">Learn how &lt;a href=&quot;https://chrome.google.com/webstore/detail/khodnfbkbanejphecblcofbghjdgfaih&quot;&gt;Onslaught! Arena&lt;/a&gt; created their fast-paced, arcade-style medieval fantasy shoot &#39;em up.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/canvas/notearsgame/">
              <span class="left">
                <span class="author" data-author_id="danielmoore"><img src="/static/images/profiles/75/danielmoore.75.png" alt="Daniel X. Moore" title="Daniel X. Moore" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 1st, 2011</span>
                <span class="title">
                  No Tears Guide to HTML5 Games
                </span>
                <span class="description">Building an HTML5 game using &amp;lt;canvas&amp;gt;, the no tears way.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/mathboard/">
              <span class="left">
                <span class="author" data-author_id="jeremychone"><img src="/static/images/profiles/75/jeremychone.75.png" alt="Jeremy Chone" title="Jeremy Chone" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 28th, 2011</span>
                <span class="title">
                  Case Study: HTML5 MathBoard
                </span>
                <span class="description">A discussion on how the iPad&#39;s popular &lt;a href=&quot;https://chrome.google.com/webstore/detail/elcilkmmbpmchojdmdohhoalmfmkcklk&quot;&gt;MathBoard&lt;/a&gt; application was ported to HTML5.</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/20things_pageflip/">
              <span class="left">
                <span class="author" data-author_id="hakimelhattab"><img src="/static/images/profiles/75/hakimelhattab.75.png" alt="Hakim El Hattab" title="Hakim El Hattab" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 20th, 2011</span>
                <span class="title">
                  Case Study: Page Flip Effect from 20thingsilearned.com
                </span>
                <span class="description">Learn how to re-create the page flip effect found on &lt;a href=&quot;http://www.20thingsilearned.com&quot;&gt;20thingsilearned.com&lt;/a&gt; using the Canvas API.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/file/filesystem/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">January 4th, 2011</span>
                <span class="title">
                  Exploring the FileSystem APIs
                </span>
                <span class="description">The FileSystem APIs give applications the ability to read/write files and directories in a secure, sandboxed file system on a user&#39;s local machine.</span>
                
                  <span class="tag">filewriter</span>
                
                  <span class="tag">filesystem</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/indexeddb/todo/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 20th, 2010</span>
                <span class="title">
                  A Simple TODO list using HTML5 IndexedDB
                </span>
                <span class="description">IndexedDB represents the future of query-able client-side storage. This tutorial presents a real world application implementing the basics of the IndexedDB API.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">indexeddb</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/entanglement/">
              <span class="left">
                <span class="author" data-author_id="derekdetweiler"><img src="/static/images/profiles/75/derekdetweiler.75.png" alt="Derek Detweiler" title="Derek Detweiler" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">December 14th, 2010</span>
                <span class="title">
                  Case Study: Getting Entangled with HTML5 Canvas
                </span>
                <span class="description">Entanglement is a puzzle game made by Gopherwood Studios. This article talks about Entanglement&#39;s usage of the &amp;lt;canvas&amp;gt; tag.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/eventsource/basics/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">November 30th, 2010</span>
                <span class="title">
                  Stream Updates with Server-Sent Events
                </span>
                <span class="description">The EventSource API is designed for receiving push notifications from a server, removing the need for client-size XHR polling.</span>
                
                  <span class="tag">eventsource</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/websockets/basics/">
              <span class="left">
                <span class="author" data-author_id="malteubl"><img src="/static/images/profiles/75/malteubl.75.png" alt="Malte Ubl" title="Malte Ubl" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 20th, 2010</span>
                <span class="title">
                  Introducing WebSockets: Bringing Sockets to the Web
                </span>
                <span class="description">Learn how to use WebSockets to add low latency bidirectional client-server communication to your web app.</span>
                
                  <span class="tag">websockets</span>
                
                  <span class="tag">gaming</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/flexbox/quick/">
              <span class="left">
                <span class="author" data-author_id="paulirish"><img src="/static/images/profiles/75/paulirish.75.png" alt="Paul Irish" title="Paul Irish" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 5th, 2010</span>
                <span class="title">
                  Quick hits with the Flexible Box Model
                </span>
                <span class="description">An introduction to flexbox, an alternative CSS layout scheme based on vboxes and hboxes.</span>
                
                  <span class="tag">css</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/offline/storage/">
              <span class="left">
                <span class="author" data-author_id="mahemoff"><img src="/static/images/profiles/75/mahemoff.75.png" alt="Michael Mahemoff" title="Michael Mahemoff" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">October 1st, 2010</span>
                <span class="title">
                  Client-Side Storage
                </span>
                <span class="description">An overview of client-side storage techniques: Web Storage (local/session storage), Web SQL Database, Indexed Database, Filesystem.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">webdatabase</span>
                
                  <span class="tag">filesystem</span>
                
                  <span class="tag">indexeddb</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/dnd/basics/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 30th, 2010</span>
                <span class="title">
                  Native HTML5 Drag and Drop
                </span>
                <span class="description">Drag-and-drop is yet another first class citizen in HTML5! This article explains how to enhance your web applications by adding native DnD functionality.</span>
                
                  <span class="tag">dnd</span>
                
                  <span class="tag">filereader</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/html5_in_deviantart_muro/">
              <span class="left">
                <span class="author" data-author_id="michaeldewey"><img src="/static/images/profiles/75/michaeldewey.75.png" alt="Mike Dewey" title="Mike Dewey" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 28th, 2010</span>
                <span class="title">
                  Case Study: HTML5 in deviantART muro
                </span>
                <span class="description">Learn how deviantART used HTML5 drawing features in deviantART muro.</span>
                
                  <span class="tag">canvas</span>
                
                  <span class="tag">svg</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/casestudies/box_dnd_download/">
              <span class="left">
                <span class="author" data-author_id="davidtong"><img src="/static/images/profiles/75/davidtong.75.png" alt="David Tong" title="David Tong" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 25th, 2010</span>
                <span class="title">
                  Case Study: Drag and Drop Download in Chrome
                </span>
                <span class="description">Learn how Box.net implemented GMail&#39;s attachment drag and drop to the desktop.</span>
                
                  <span class="tag">dnd</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/3d/css/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">September 7th, 2010</span>
                <span class="title">
                  3D and CSS
                </span>
                <span class="description">Learn how to build exciting 3D user interfaces using the power of CSS.</span>
                
                  <span class="tag">3D</span>
                
                  <span class="tag">CSS</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/video/basics/">
              <span class="left">
                <span class="author" data-author_id="petele"><img src="/static/images/profiles/75/petele.75.png" alt="Pete LePage" title="Pete LePage" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 3rd, 2010</span>
                <span class="title">
                  HTML5 Video
                </span>
                <span class="description">Video is one of the most interesting and widely supported features of HTML5. This tutorial covers the mechanics of incorporating native video into your site (without a plugin) and gives interesting examples of using the &amp;gt;video&amp;lt; tag.</span>
                
                  <span class="tag">video</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webfonts/quick/">
              <span class="left">
                <span class="author" data-author_id="paulirish"><img src="/static/images/profiles/75/paulirish.75.png" alt="Paul Irish" title="Paul Irish" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 2nd, 2010</span>
                <span class="title">
                  Quick guide to webfonts via @font-face
                </span>
                <span class="description">Webfonts give new typographic freedom to designers while retaining scalability and accessibility.</span>
                
                  <span class="tag">CSS</span>
                
                  <span class="tag">webfonts</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/offline/whats-offline/">
              <span class="left">
                <span class="author" data-author_id="mahemoff"><img src="/static/images/profiles/75/mahemoff.75.png" alt="Michael Mahemoff" title="Michael Mahemoff" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">August 2nd, 2010</span>
                <span class="title">
                  "Offline": What does it mean and why should I care?
                </span>
                <span class="description">A discussion of what it means to take an application &quot;offline&quot; and the options available to developers for doing so.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/auditpanel/">
              <span class="left">
                <span class="author" data-author_id="sethladd"><img src="/static/images/profiles/75/sethladd.75.png" alt="Seth Ladd" title="Seth Ladd" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 28th, 2010</span>
                <span class="title">
                  Auditing Your Web App For Speed
                </span>
                <span class="description">The Audit Panel is an excellent tool for examining latency in your web apps. It offers customized recommendations to enhance performance and reduce latency.</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">performance</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/workers/basics/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">July 26th, 2010</span>
                <span class="title">
                  The Basics of Web Workers
                </span>
                <span class="description">Web Workers are a means of spawning background scripts in your application, giving thread-like message passing for handling computationally intensive tasks.</span>
                
                  <span class="tag">workers</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/speed/quick/">
              <span class="left">
                <span class="author" data-author_id="paulirish"><img src="/static/images/profiles/75/paulirish.75.png" alt="Paul Irish" title="Paul Irish" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 18th, 2010</span>
                <span class="title">
                  Best Practices for a Faster Web App with HTML5
                </span>
                <span class="description">How to effectively use features from HTML5 to improve the performance and responsiveness of your app.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">appcache</span>
                
                  <span class="tag">webdatabase</span>
                
                  <span class="tag">performance</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/appcache/beginner/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 18th, 2010</span>
                <span class="title">
                  A Beginner's Guide to Using the Application Cache
                </span>
                <span class="description">A step-by-step guide to taking your web app offline using the application cache APIs.</span>
                
                  <span class="tag">business</span>
                
                  <span class="tag">appcache</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/developertools/part1/">
              <span class="left">
                <span class="author" data-author_id="sethladd"><img src="/static/images/profiles/75/sethladd.75.png" alt="Seth Ladd" title="Seth Ladd" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 18th, 2010</span>
                <span class="title">
                  Introduction to Chrome Developer Tools, Part One
                </span>
                <span class="description">An introduction to the tools available in Google Chrome that make a developer&#39;s life easier!</span>
                
                  <span class="tag">devtools</span>
                
                  <span class="tag">tooling</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/offline/takingappoffline/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 18th, 2010</span>
                <span class="title">
                  Practical Guide to Take Your TODO List Offline
                </span>
                <span class="description">Expanding on the &lt;a href=&quot;/tutorials/webdatabase/todo/&quot;&gt;simple TODO list&lt;/a&gt;, this tutorial gives a practical guide for taking the sample offline using the application cache.</span>
                
                  <span class="tag">appcache</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/file/dndfiles/">
              <span class="left">
                <span class="author" data-author_id="ericbidelman"><img src="/static/images/profiles/75/ericbidelman.75.png" alt="Eric Bidelman" title="Eric Bidelman" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">June 18th, 2010</span>
                <span class="title">
                  Reading files in JavaScript using the File APIs
                </span>
                <span class="description">Starter guide for using the File/FileList/FileReader APIs to process and read binary files in JavaScript.</span>
                
                  <span class="tag">filereader</span>
                
                  <span class="tag">dnd</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/geolocation/trip_meter/">
              <span class="left">
                <span class="author" data-author_id="mahemoff"><img src="/static/images/profiles/75/mahemoff.75.png" alt="Michael Mahemoff" title="Michael Mahemoff" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">May 24th, 2010</span>
                <span class="title">
                  A Simple Trip Meter using the Geolocation API
                </span>
                <span class="description">Learn how to implement geolocation very quickly including a distance calculator</span>
                
                  <span class="tag">geolocation</span>
                
                  <span class="tag">owp</span>
                
                  <span class="tag">mobile</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/notifications/quick/">
              <span class="left">
                <span class="author" data-author_id="ernestd"><img src="/static/images/profiles/75/ernestd.75.png" alt="Ernest Delgado" title="Ernest Delgado" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 24th, 2010</span>
                <span class="title">
                  Using the Notifications API
                </span>
                <span class="description">Learn the notification basics creating a twitter notification</span>
                
                  <span class="tag">notifications</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/webdatabase/todo/">
              <span class="left">
                <span class="author" data-author_id="paulkinlan"><img src="/static/images/profiles/75/paulkinlan.75.png" alt="Paul Kinlan" title="Paul Kinlan" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 17th, 2010</span>
                <span class="title">
                  A Simple TODO list using HTML5 WebDatabases
                </span>
                <span class="description">Create a TODO list which persists data using a client side database.</span>
                
                  <span class="tag">webdatabase</span>
                
                  <span class="tag">mobile</span>
                
                  <span class="tag">owp</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
          <li>
            <a href="/en/tutorials/audio/quick/">
              <span class="left">
                <span class="author" data-author_id="ernestd"><img src="/static/images/profiles/75/ernestd.75.png" alt="Ernest Delgado" title="Ernest Delgado" width="60" height="60"></span>
              </span>

              <span class="right">
                <span class="date">February 5th, 2010</span>
                <span class="title">
                  Quick Guide to Implementing the HTML5 Audio Tag
                </span>
                <span class="description">Learn how to use the HTML5 audio tag and fall back to Flash on platforms which do not support it.</span>
                
                  <span class="tag">audio</span>
                
                  <span class="tag">flash</span>
                
                  <span class="tag">media</span>
                
              </span>

              <span class="clear"></span>
            </a>
          </li>
        
      </ul>
      <div class="clear"></div>
      </div>

      <div class="pager">
        
      </div>

    </section>
  </article>

  <div class="padder"></div>

  <footer>
    <div class="container">

      <p class="licensing">
      
        Except as otherwise <a href="http://code.google.com/policies.html#restrictions">noted</a>, the content of this page is licensed under the <a href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 License</a>, and code samples are licensed under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache 2.0 License</a>.
      
      </p>

    </div>
  </footer>


  </div>

  <script>
  (function() {

    // Kill feedburner and marketing tracking arguments, but let them register
    // before we do it.
    setTimeout(function() {
      if (/^\?utm_/.test(document.location.search) &&
          window.history.replaceState) {
        window.history.replaceState(
            {}, '', document.location.href.replace(/\?utm_.*/, ''));
      }
    }, 2000);

    var siteHeader = document.getElementById('siteheader');
    var navToggle = document.getElementById('navtoggle');
    var siteNav = document.getElementById('sitenav');

    function toggle(target, forceActive) {

      if (typeof toc !== 'undefined') {
        // Switch off whichever one is not the
        // current target
        if (target === toc)
          siteNav.classList.remove('active');
        else
          toc.classList.remove('active');
      }

      // Toggle if no force parameter is set
      if (typeof forceActive === 'undefined') {
        target.classList.toggle('active');
      } else {
        if (forceActive)
          target.classList.add('active');
        else
          target.classList.remove('active');
      }

      // now find out what the set state ended up being
      var isActive = target.classList.contains('active');

      if (isActive)
        siteHeader.classList.add('expanded');
      else
        siteHeader.classList.remove('expanded');

    }

    navToggle.addEventListener('click', function(e) {
      toggle(siteNav);
      e.preventDefault();
    });

    
  })();
  </script>
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-15028909-1', 'auto');
  ga('create', 'UA-49880327-4', 'auto', {'name': 'html5rocks'});

  ga('send', 'pageview');
  ga('html5rocks.send', 'pageview');

  </script>
   <!-- Google Tag Manager -->
<noscript><iframe src="//www.googletagmanager.com/ns.html?id=GTM-XXXX"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MB3LRF');</script>
<!-- End Google Tag Manager -->
</body>
</html>
",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 08:00:54 GMT",
                    "Content-Length": "168103",
                    "Date": "Fri, 07 Nov 2014 08:00:56 GMT",
                    "Content-Type": "text/html; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "HTML",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}