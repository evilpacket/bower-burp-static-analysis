{
    "url": "http://localhost:9999/ariya/phantomjs/src/qt/qtwebkit/Source/WebCore/inspector/front-end/inspector.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>window.location.href</b> and written to <b>document.location</b> via the following statements:<ul><li>var url = window.location.href;</li><li>url = url.substring(0, url.length - queryParams.length);</li><li>document.location = url;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/ariya/phantomjs/src/qt/qtwebkit/Source/WebCore/inspector/front-end/inspector.js",
                "path": "/ariya/phantomjs/src/qt/qtwebkit/Source/WebCore/inspector/front-end/inspector.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hcml5YS9waGFudG9tanMvc3JjL3F0L3F0d2Via2l0L1NvdXJjZS9XZWJDb3JlL2luc3BlY3Rvci9mcm9udC1lbmQvaW5zcGVjdG9yLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNDEyODENCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMjE6NTA6NDcgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDIxOjQ5OjU4IEdNVA0KDQovKgogKiBDb3B5cmlnaHQgKEMpIDIwMDYsIDIwMDcsIDIwMDggQXBwbGUgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogQ29weXJpZ2h0IChDKSAyMDA3IE1hdHQgTGlsZWsgKHBld3Rlcm1vb3NlQGdtYWlsLmNvbSkuCiAqIENvcHlyaWdodCAoQykgMjAwOSBKb3NlcGggUGVjb3Jhcm8KICoKICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0CiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucwogKiBhcmUgbWV0OgogKgogKiAxLiAgUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKICogICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KICogMi4gIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0CiAqICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlCiAqICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgogKiAzLiAgTmVpdGhlciB0aGUgbmFtZSBvZiBBcHBsZSBDb21wdXRlciwgSW5jLiAoIkFwcGxlIikgbm9yIHRoZSBuYW1lcyBvZgogKiAgICAgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZAogKiAgICAgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLgogKgogKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIEFQUExFIEFORCBJVFMgQ09OVFJJQlVUT1JTICJBUyBJUyIgQU5EIEFOWQogKiBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVECiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUKICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgQVBQTEUgT1IgSVRTIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWQogKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUwogKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7CiAqIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORAogKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVAogKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YKICogVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4KICovCgp2YXIgV2ViSW5zcGVjdG9yID0gewogICAgX3BhbmVsRGVzY3JpcHRvcnM6IGZ1bmN0aW9uKCkKICAgIHsKICAgICAgICB0aGlzLnBhbmVscyA9IHt9OwogICAgICAgIFdlYkluc3BlY3Rvci5pbnNwZWN0b3JWaWV3ID0gbmV3IFdlYkluc3BlY3Rvci5JbnNwZWN0b3JWaWV3KCk7CiAgICAgICAgdmFyIHBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFpbiIpOwogICAgICAgIFdlYkluc3BlY3Rvci5pbnNwZWN0b3JWaWV3LnNob3cocGFyZW50RWxlbWVudCk7CiAgICAgICAgV2ViSW5zcGVjdG9yLmluc3BlY3RvclZpZXcuYWRkRXZlbnRMaXN0ZW5lcihXZWJJbnNwZWN0b3IuSW5zcGVjdG9yVmlldy5FdmVudHMuUGFuZWxTZWxlY3RlZCwgdGhpcy5fcGFuZWxTZWxlY3RlZCwgdGhpcyk7CgogICAgICAgIHZhciBlbGVtZW50cyA9IG5ldyBXZWJJbnNwZWN0b3IuRWxlbWVudHNQYW5lbERlc2NyaXB0b3IoKTsKICAgICAgICB2YXIgcmVzb3VyY2VzID0gbmV3IFdlYkluc3BlY3Rvci5QYW5lbERlc2NyaXB0b3IoInJlc291cmNlcyIsIFdlYkluc3BlY3Rvci5VSVN0cmluZygiUmVzb3VyY2VzIiksICJSZXNvdXJjZXNQYW5lbCIsICJSZXNvdXJjZXNQYW5lbC5qcyIpOwogICAgICAgIHZhciBuZXR3b3JrID0gbmV3IFdlYkluc3BlY3Rvci5OZXR3b3JrUGFuZWxEZXNjcmlwdG9yKCk7CiAgICAgICAgdmFyIHNjcmlwdHMgPSBuZXcgV2ViSW5zcGVjdG9yLlNjcmlwdHNQYW5lbERlc2NyaXB0b3IoKTsKICAgICAgICB2YXIgdGltZWxpbmUgPSBuZXcgV2ViSW5zcGVjdG9yLlRpbWVsaW5lUGFuZWxEZXNjcmlwdG9yKCk7CiAgICAgICAgdmFyIHByb2ZpbGVzID0gbmV3IFdlYkluc3BlY3Rvci5Qcm9maWxlc1BhbmVsRGVzY3JpcHRvcigpOwogICAgICAgIHZhciBhdWRpdHMgPSBuZXcgV2ViSW5zcGVjdG9yLlBhbmVsRGVzY3JpcHRvcigiYXVkaXRzIiwgV2ViSW5zcGVjdG9yLlVJU3RyaW5nKCJBdWRpdHMiKSwgIkF1ZGl0c1BhbmVsIiwgIkF1ZGl0c1BhbmVsLmpzIik7CiAgICAgICAgdmFyIGNvbnNvbGUgPSBuZXcgV2ViSW5zcGVjdG9yLlBhbmVsRGVzY3JpcHRvcigiY29uc29sZSIsIFdlYkluc3BlY3Rvci5VSVN0cmluZygiQ29uc29sZSIpLCAiQ29uc29sZVBhbmVsIik7CiAgICAgICAgdmFyIGFsbERlc2NyaXB0b3JzID0gW2VsZW1lbnRzLCByZXNvdXJjZXMsIG5ldHdvcmssIHNjcmlwdHMsIHRpbWVsaW5lLCBwcm9maWxlcywgYXVkaXRzLCBjb25zb2xlXTsKICAgICAgICB2YXIgYWxsUHJvZmlsZXJzID0gW3Byb2ZpbGVzXTsKICAgICAgICBpZiAoV2ViSW5zcGVjdG9yLmV4cGVyaW1lbnRzU2V0dGluZ3Muc2VwYXJhdGVQcm9maWxlcnMuaXNFbmFibGVkKCkpIHsKICAgICAgICAgICAgYWxsUHJvZmlsZXJzID0gW107CiAgICAgICAgICAgIGFsbFByb2ZpbGVycy5wdXNoKG5ldyBXZWJJbnNwZWN0b3IuUGFuZWxEZXNjcmlwdG9yKCJjcHUtcHJvZmlsZXIiLCBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIkNQVSBQcm9maWxlciIpLCAiQ1BVUHJvZmlsZXJQYW5lbCIsICJQcm9maWxlc1BhbmVsLmpzIikpOwogICAgICAgICAgICBpZiAoIVdlYkluc3BlY3Rvci5Xb3JrZXJNYW5hZ2VyLmlzV29ya2VyRnJvbnRlbmQoKSkKICAgICAgICAgICAgICAgIGFsbFByb2ZpbGVycy5wdXNoKG5ldyBXZWJJbnNwZWN0b3IuUGFuZWxEZXNjcmlwdG9yKCJjc3MtcHJvZmlsZXIiLCBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIkNTUyBQcm9maWxlciIpLCAiQ1NTU2VsZWN0b3JQcm9maWxlclBhbmVsIiwgIlByb2ZpbGVzUGFuZWwuanMiKSk7CiAgICAgICAgICAgIGlmIChDYXBhYmlsaXRpZXMuaGVhcFByb2ZpbGVyUHJlc2VudCkKICAgICAgICAgICAgICAgIGFsbFByb2ZpbGVycy5wdXNoKG5ldyBXZWJJbnNwZWN0b3IuUGFuZWxEZXNjcmlwdG9yKCJoZWFwLXByb2ZpbGVyIiwgV2ViSW5zcGVjdG9yLlVJU3RyaW5nKCJIZWFwIFByb2ZpbGVyIiksICJIZWFwUHJvZmlsZXJQYW5lbCIsICJQcm9maWxlc1BhbmVsLmpzIikpOwogICAgICAgICAgICBpZiAoIVdlYkluc3BlY3Rvci5Xb3JrZXJNYW5hZ2VyLmlzV29ya2VyRnJvbnRlbmQoKSAmJiBXZWJJbnNwZWN0b3IuZXhwZXJpbWVudHNTZXR0aW5ncy5jYW52YXNJbnNwZWN0aW9uLmlzRW5hYmxlZCgpKQogICAgICAgICAgICAgICAgYWxsUHJvZmlsZXJzLnB1c2gobmV3IFdlYkluc3BlY3Rvci5QYW5lbERlc2NyaXB0b3IoImNhbnZhcy1wcm9maWxlciIsIFdlYkluc3BlY3Rvci5VSVN0cmluZygiQ2FudmFzIFByb2ZpbGVyIiksICJDYW52YXNQcm9maWxlclBhbmVsIiwgIlByb2ZpbGVzUGFuZWwuanMiKSk7CiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYmluZChhbGxEZXNjcmlwdG9ycywgYWxsRGVzY3JpcHRvcnMuaW5kZXhPZihwcm9maWxlcyksIDEpLmFwcGx5KG51bGwsIGFsbFByb2ZpbGVycyk7CiAgICAgICAgfQoKICAgICAgICB2YXIgcGFuZWxEZXNjcmlwdG9ycyA9IFtdOwogICAgICAgIGlmIChXZWJJbnNwZWN0b3IuV29ya2VyTWFuYWdlci5pc1dvcmtlckZyb250ZW5kKCkpIHsKICAgICAgICAgICAgcGFuZWxEZXNjcmlwdG9ycy5wdXNoKHNjcmlwdHMpOwogICAgICAgICAgICBwYW5lbERlc2NyaXB0b3JzLnB1c2godGltZWxpbmUpOwogICAgICAgICAgICBwYW5lbERlc2NyaXB0b3JzID0gcGFuZWxEZXNjcmlwdG9ycy5jb25jYXQoYWxsUHJvZmlsZXJzKTsKICAgICAgICAgICAgcGFuZWxEZXNjcmlwdG9ycy5wdXNoKGNvbnNvbGUpOwogICAgICAgICAgICByZXR1cm4gcGFuZWxEZXNjcmlwdG9yczsKICAgICAgICB9CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxEZXNjcmlwdG9ycy5sZW5ndGg7ICsraSkKICAgICAgICAgICAgcGFuZWxEZXNjcmlwdG9ycy5wdXNoKGFsbERlc2NyaXB0b3JzW2ldKTsKICAgICAgICByZXR1cm4gcGFuZWxEZXNjcmlwdG9yczsKICAgIH0sCgogICAgX3BhbmVsU2VsZWN0ZWQ6IGZ1bmN0aW9uKCkKICAgIHsKICAgICAgICB0aGlzLl90b2dnbGVDb25zb2xlQnV0dG9uLnNldEVuYWJsZWQoV2ViSW5zcGVjdG9yLmluc3BlY3RvclZpZXcuY3VycmVudFBhbmVsKCkubmFtZSAhPT0gImNvbnNvbGUiKTsKICAgIH0sCgogICAgX2NyZWF0ZUdsb2JhbFN0YXR1c0Jhckl0ZW1zOiBmdW5jdGlvbigpCiAgICB7CiAgICAgICAgdmFyIGJvdHRvbVN0YXR1c0JhckNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJib3R0b20tc3RhdHVzLWJhci1jb250YWluZXIiKTsKCiAgICAgICAgLy8gQ3JlYXRlIG1haW4gZG9jayBidXR0b24gYW5kIG9wdGlvbnMuCiAgICAgICAgdmFyIG1haW5TdGF0dXNCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFpbi1zdGF0dXMtYmFyIik7CiAgICAgICAgbWFpblN0YXR1c0Jhci5pbnNlcnRCZWZvcmUodGhpcy5kb2NrQ29udHJvbGxlci5lbGVtZW50LCBib3R0b21TdGF0dXNCYXJDb250YWluZXIpOwoKICAgICAgICB0aGlzLl90b2dnbGVDb25zb2xlQnV0dG9uID0gbmV3IFdlYkluc3BlY3Rvci5TdGF0dXNCYXJCdXR0b24oV2ViSW5zcGVjdG9yLlVJU3RyaW5nKCJTaG93IGNvbnNvbGUuIiksICJjb25zb2xlLXN0YXR1cy1iYXItaXRlbSIpOwogICAgICAgIHRoaXMuX3RvZ2dsZUNvbnNvbGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCB0aGlzLl90b2dnbGVDb25zb2xlQnV0dG9uQ2xpY2tlZC5iaW5kKHRoaXMpLCBmYWxzZSk7CiAgICAgICAgbWFpblN0YXR1c0Jhci5pbnNlcnRCZWZvcmUodGhpcy5fdG9nZ2xlQ29uc29sZUJ1dHRvbi5lbGVtZW50LCBib3R0b21TdGF0dXNCYXJDb250YWluZXIpOwoKICAgICAgICBpZiAodGhpcy5pbnNwZWN0RWxlbWVudE1vZGVDb250cm9sbGVyKQogICAgICAgICAgICBtYWluU3RhdHVzQmFyLmluc2VydEJlZm9yZSh0aGlzLmluc3BlY3RFbGVtZW50TW9kZUNvbnRyb2xsZXIudG9nZ2xlU2VhcmNoQnV0dG9uLmVsZW1lbnQsIGJvdHRvbVN0YXR1c0JhckNvbnRhaW5lcik7CgogICAgICAgIG1haW5TdGF0dXNCYXIuYXBwZW5kQ2hpbGQodGhpcy5zZXR0aW5nc0NvbnRyb2xsZXIuc3RhdHVzQmFySXRlbSk7CiAgICB9LAoKICAgIF90b2dnbGVDb25zb2xlQnV0dG9uQ2xpY2tlZDogZnVuY3Rpb24oKQogICAgewogICAgICAgIGlmICghdGhpcy5fdG9nZ2xlQ29uc29sZUJ1dHRvbi5lbmFibGVkKCkpCiAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgdGhpcy5fdG9nZ2xlQ29uc29sZUJ1dHRvbi50b2dnbGVkID0gIXRoaXMuX3RvZ2dsZUNvbnNvbGVCdXR0b24udG9nZ2xlZDsKCiAgICAgICAgdmFyIGFuaW1hdGlvblR5cGUgPSB3aW5kb3cuZXZlbnQgJiYgd2luZG93LmV2ZW50LnNoaWZ0S2V5ID8gV2ViSW5zcGVjdG9yLkRyYXdlci5BbmltYXRpb25UeXBlLlNsb3cgOiBXZWJJbnNwZWN0b3IuRHJhd2VyLkFuaW1hdGlvblR5cGUuTm9ybWFsOwogICAgICAgIGlmICh0aGlzLl90b2dnbGVDb25zb2xlQnV0dG9uLnRvZ2dsZWQpIHsKICAgICAgICAgICAgdGhpcy5fdG9nZ2xlQ29uc29sZUJ1dHRvbi50aXRsZSA9IFdlYkluc3BlY3Rvci5VSVN0cmluZygiSGlkZSBjb25zb2xlLiIpOwogICAgICAgICAgICB0aGlzLmRyYXdlci5zaG93KHRoaXMuY29uc29sZVZpZXcsIGFuaW1hdGlvblR5cGUpOwogICAgICAgICAgICB0aGlzLl9jb25zb2xlV2FzU2hvd24gPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuX3RvZ2dsZUNvbnNvbGVCdXR0b24udGl0bGUgPSBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIlNob3cgY29uc29sZS4iKTsKICAgICAgICAgICAgdGhpcy5kcmF3ZXIuaGlkZShhbmltYXRpb25UeXBlKTsKICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NvbnNvbGVXYXNTaG93bjsKICAgICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogQHBhcmFtIHtFbGVtZW50fSBzdGF0dXNCYXJFbGVtZW50CiAgICAgKiBAcGFyYW0ge1dlYkluc3BlY3Rvci5WaWV3fSB2aWV3CiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvbmNsb3NlCiAgICAgKi8KICAgIHNob3dWaWV3SW5EcmF3ZXI6IGZ1bmN0aW9uKHN0YXR1c0JhckVsZW1lbnQsIHZpZXcsIG9uY2xvc2UpCiAgICB7CiAgICAgICAgdGhpcy5fdG9nZ2xlQ29uc29sZUJ1dHRvbi50aXRsZSA9IFdlYkluc3BlY3Rvci5VSVN0cmluZygiSGlkZSBjb25zb2xlLiIpOwogICAgICAgIHRoaXMuX3RvZ2dsZUNvbnNvbGVCdXR0b24udG9nZ2xlZCA9IGZhbHNlOwogICAgICAgIHRoaXMuX2Nsb3NlUHJldmlvdXNEcmF3ZXJWaWV3KCk7CgogICAgICAgIHZhciBkcmF3ZXJTdGF0dXNCYXJIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICBkcmF3ZXJTdGF0dXNCYXJIZWFkZXIuY2xhc3NOYW1lID0gImRyYXdlci1oZWFkZXIgc3RhdHVzLWJhci1pdGVtIjsKICAgICAgICBkcmF3ZXJTdGF0dXNCYXJIZWFkZXIuYXBwZW5kQ2hpbGQoc3RhdHVzQmFyRWxlbWVudCk7CiAgICAgICAgZHJhd2VyU3RhdHVzQmFySGVhZGVyLm9uY2xvc2UgPSBvbmNsb3NlOwoKICAgICAgICB2YXIgY2xvc2VCdXR0b24gPSBkcmF3ZXJTdGF0dXNCYXJIZWFkZXIuY3JlYXRlQ2hpbGQoInNwYW4iKTsKICAgICAgICBjbG9zZUJ1dHRvbi50ZXh0Q29udGVudCA9IFdlYkluc3BlY3Rvci5VSVN0cmluZygiXHUwMEQ3Iik7CiAgICAgICAgY2xvc2VCdXR0b24uYWRkU3R5bGVDbGFzcygiZHJhd2VyLWhlYWRlci1jbG9zZS1idXR0b24iKTsKICAgICAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIHRoaXMuY2xvc2VWaWV3SW5EcmF3ZXIuYmluZCh0aGlzKSwgZmFsc2UpOwoKICAgICAgICB2YXIgcGFuZWxTdGF0dXNCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicGFuZWwtc3RhdHVzLWJhciIpOwogICAgICAgIHZhciBkcmF3ZXJWaWV3QW5jaG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImRyYXdlci12aWV3LWFuY2hvciIpOwogICAgICAgIHBhbmVsU3RhdHVzQmFyLmluc2VydEJlZm9yZShkcmF3ZXJTdGF0dXNCYXJIZWFkZXIsIGRyYXdlclZpZXdBbmNob3IpOwogICAgICAgIHRoaXMuX2RyYXdlclN0YXR1c0JhckhlYWRlciA9IGRyYXdlclN0YXR1c0JhckhlYWRlcjsKICAgICAgICB0aGlzLmRyYXdlci5zaG93KHZpZXcsIFdlYkluc3BlY3Rvci5EcmF3ZXIuQW5pbWF0aW9uVHlwZS5JbW1lZGlhdGVseSk7CiAgICB9LAoKICAgIGNsb3NlVmlld0luRHJhd2VyOiBmdW5jdGlvbigpCiAgICB7CiAgICAgICAgaWYgKHRoaXMuX2RyYXdlclN0YXR1c0JhckhlYWRlcikgewogICAgICAgICAgICB0aGlzLl9jbG9zZVByZXZpb3VzRHJhd2VyVmlldygpOwoKICAgICAgICAgICAgLy8gT25jZSBkcmF3ZXIgaXMgY2xvc2VkIGNvbnNvbGUgc2hvdWxkIGJlIHNob3duIGlmIGl0IHdhcyBzaG93biBiZWZvcmUgY3VycmVudCB2aWV3IHJlcGxhY2VkIGl0IGluIGRyYXdlci4gCiAgICAgICAgICAgIGlmICghdGhpcy5fY29uc29sZVdhc1Nob3duKQogICAgICAgICAgICAgICAgdGhpcy5kcmF3ZXIuaGlkZShXZWJJbnNwZWN0b3IuRHJhd2VyLkFuaW1hdGlvblR5cGUuSW1tZWRpYXRlbHkpOwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB0aGlzLl90b2dnbGVDb25zb2xlQnV0dG9uQ2xpY2tlZCgpOwogICAgICAgIH0KICAgIH0sCgogICAgX2Nsb3NlUHJldmlvdXNEcmF3ZXJWaWV3OiBmdW5jdGlvbigpCiAgICB7CiAgICAgICAgaWYgKHRoaXMuX2RyYXdlclN0YXR1c0JhckhlYWRlcikgewogICAgICAgICAgICB0aGlzLl9kcmF3ZXJTdGF0dXNCYXJIZWFkZXIucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLl9kcmF3ZXJTdGF0dXNCYXJIZWFkZXIpOwogICAgICAgICAgICBpZiAodGhpcy5fZHJhd2VyU3RhdHVzQmFySGVhZGVyLm9uY2xvc2UpCiAgICAgICAgICAgICAgICB0aGlzLl9kcmF3ZXJTdGF0dXNCYXJIZWFkZXIub25jbG9zZSgpOwogICAgICAgICAgICBkZWxldGUgdGhpcy5fZHJhd2VyU3RhdHVzQmFySGVhZGVyOwogICAgICAgIH0KICAgIH0sCgogICAgX3VwZGF0ZUVycm9yQW5kV2FybmluZ0NvdW50czogZnVuY3Rpb24oKQogICAgewogICAgICAgIHZhciBlcnJvcldhcm5pbmdFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVycm9yLXdhcm5pbmctY291bnQiKTsKICAgICAgICBpZiAoIWVycm9yV2FybmluZ0VsZW1lbnQpCiAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgdmFyIGVycm9ycyA9IFdlYkluc3BlY3Rvci5jb25zb2xlLmVycm9yczsKICAgICAgICB2YXIgd2FybmluZ3MgPSBXZWJJbnNwZWN0b3IuY29uc29sZS53YXJuaW5nczsKICAgICAgICBpZiAoIWVycm9ycyAmJiAhd2FybmluZ3MpIHsKICAgICAgICAgICAgZXJyb3JXYXJuaW5nRWxlbWVudC5hZGRTdHlsZUNsYXNzKCJoaWRkZW4iKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgZXJyb3JXYXJuaW5nRWxlbWVudC5yZW1vdmVTdHlsZUNsYXNzKCJoaWRkZW4iKTsKCiAgICAgICAgZXJyb3JXYXJuaW5nRWxlbWVudC5yZW1vdmVDaGlsZHJlbigpOwoKICAgICAgICBpZiAoZXJyb3JzKSB7CiAgICAgICAgICAgIHZhciBlcnJvckltYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImltZyIpOwogICAgICAgICAgICBlcnJvckltYWdlRWxlbWVudC5pZCA9ICJlcnJvci1jb3VudC1pbWciOwogICAgICAgICAgICBlcnJvcldhcm5pbmdFbGVtZW50LmFwcGVuZENoaWxkKGVycm9ySW1hZ2VFbGVtZW50KTsKICAgICAgICAgICAgdmFyIGVycm9yRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICAgICAgICAgICAgZXJyb3JFbGVtZW50LmlkID0gImVycm9yLWNvdW50IjsKICAgICAgICAgICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JzOwogICAgICAgICAgICBlcnJvcldhcm5pbmdFbGVtZW50LmFwcGVuZENoaWxkKGVycm9yRWxlbWVudCk7CiAgICAgICAgfQoKICAgICAgICBpZiAod2FybmluZ3MpIHsKICAgICAgICAgICAgdmFyIHdhcm5pbmdzSW1hZ2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIik7CiAgICAgICAgICAgIHdhcm5pbmdzSW1hZ2VFbGVtZW50LmlkID0gIndhcm5pbmctY291bnQtaW1nIjsKICAgICAgICAgICAgZXJyb3JXYXJuaW5nRWxlbWVudC5hcHBlbmRDaGlsZCh3YXJuaW5nc0ltYWdlRWxlbWVudCk7CiAgICAgICAgICAgIHZhciB3YXJuaW5nc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7CiAgICAgICAgICAgIHdhcm5pbmdzRWxlbWVudC5pZCA9ICJ3YXJuaW5nLWNvdW50IjsKICAgICAgICAgICAgd2FybmluZ3NFbGVtZW50LnRleHRDb250ZW50ID0gd2FybmluZ3M7CiAgICAgICAgICAgIGVycm9yV2FybmluZ0VsZW1lbnQuYXBwZW5kQ2hpbGQod2FybmluZ3NFbGVtZW50KTsKICAgICAgICB9CgogICAgICAgIGlmIChlcnJvcnMpIHsKICAgICAgICAgICAgaWYgKHdhcm5pbmdzKSB7CiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzID09IDEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAod2FybmluZ3MgPT0gMSkKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JXYXJuaW5nRWxlbWVudC50aXRsZSA9IFdlYkluc3BlY3Rvci5VSVN0cmluZygiJWQgZXJyb3IsICVkIHdhcm5pbmciLCBlcnJvcnMsIHdhcm5pbmdzKTsKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yV2FybmluZ0VsZW1lbnQudGl0bGUgPSBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIiVkIGVycm9yLCAlZCB3YXJuaW5ncyIsIGVycm9ycywgd2FybmluZ3MpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3YXJuaW5ncyA9PSAxKQogICAgICAgICAgICAgICAgICAgIGVycm9yV2FybmluZ0VsZW1lbnQudGl0bGUgPSBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIiVkIGVycm9ycywgJWQgd2FybmluZyIsIGVycm9ycywgd2FybmluZ3MpOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGVycm9yV2FybmluZ0VsZW1lbnQudGl0bGUgPSBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIiVkIGVycm9ycywgJWQgd2FybmluZ3MiLCBlcnJvcnMsIHdhcm5pbmdzKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvcnMgPT0gMSkKICAgICAgICAgICAgICAgIGVycm9yV2FybmluZ0VsZW1lbnQudGl0bGUgPSBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIiVkIGVycm9yIiwgZXJyb3JzKTsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgZXJyb3JXYXJuaW5nRWxlbWVudC50aXRsZSA9IFdlYkluc3BlY3Rvci5VSVN0cmluZygiJWQgZXJyb3JzIiwgZXJyb3JzKTsKICAgICAgICB9IGVsc2UgaWYgKHdhcm5pbmdzID09IDEpCiAgICAgICAgICAgIGVycm9yV2FybmluZ0VsZW1lbnQudGl0bGUgPSBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIiVkIHdhcm5pbmciLCB3YXJuaW5ncyk7CiAgICAgICAgZWxzZSBpZiAod2FybmluZ3MpCiAgICAgICAgICAgIGVycm9yV2FybmluZ0VsZW1lbnQudGl0bGUgPSBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIiVkIHdhcm5pbmdzIiwgd2FybmluZ3MpOwogICAgICAgIGVsc2UKICAgICAgICAgICAgZXJyb3JXYXJuaW5nRWxlbWVudC50aXRsZSA9IG51bGw7CiAgICB9LAoKICAgIGdldCBpbnNwZWN0ZWRQYWdlRG9tYWluKCkKICAgIHsKICAgICAgICB2YXIgcGFyc2VkVVJMID0gV2ViSW5zcGVjdG9yLmluc3BlY3RlZFBhZ2VVUkwgJiYgV2ViSW5zcGVjdG9yLmluc3BlY3RlZFBhZ2VVUkwuYXNQYXJzZWRVUkwoKTsKICAgICAgICByZXR1cm4gcGFyc2VkVVJMID8gcGFyc2VkVVJMLmhvc3QgOiAiIjsKICAgIH0sCgogICAgX2luaXRpYWxpemVDYXBhYmlsaXR5OiBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaywgZXJyb3IsIHJlc3VsdCkKICAgIHsKICAgICAgICBDYXBhYmlsaXRpZXNbbmFtZV0gPSByZXN1bHQ7CiAgICAgICAgaWYgKGNhbGxiYWNrKQogICAgICAgICAgICBjYWxsYmFjaygpOwogICAgfSwKCiAgICBfem9vbUluOiBmdW5jdGlvbigpCiAgICB7CiAgICAgICAgdGhpcy5fem9vbUxldmVsID0gTWF0aC5taW4odGhpcy5fem9vbUxldmVsICsgMSwgV2ViSW5zcGVjdG9yLlpvb20uVGFibGUubGVuZ3RoIC0gV2ViSW5zcGVjdG9yLlpvb20uRGVmYXVsdE9mZnNldCAtIDEpOwogICAgICAgIHRoaXMuX3JlcXVlc3Rab29tKCk7CiAgICB9LAoKICAgIF96b29tT3V0OiBmdW5jdGlvbigpCiAgICB7CiAgICAgICAgdGhpcy5fem9vbUxldmVsID0gTWF0aC5tYXgodGhpcy5fem9vbUxldmVsIC0gMSwgLVdlYkluc3BlY3Rvci5ab29tLkRlZmF1bHRPZmZzZXQpOwogICAgICAgIHRoaXMuX3JlcXVlc3Rab29tKCk7CiAgICB9LAoKICAgIF9yZXNldFpvb206IGZ1bmN0aW9uKCkKICAgIHsKICAgICAgICB0aGlzLl96b29tTGV2ZWwgPSAwOwogICAgICAgIHRoaXMuX3JlcXVlc3Rab29tKCk7CiAgICB9LAoKICAgIF9yZXF1ZXN0Wm9vbTogZnVuY3Rpb24oKQogICAgewogICAgICAgIFdlYkluc3BlY3Rvci5zZXR0aW5ncy56b29tTGV2ZWwuc2V0KHRoaXMuX3pvb21MZXZlbCk7CiAgICAgICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB6b29tTGV2ZWwgdGFrZXMgaW50ZWdlcnMgKHdpdGggMCBiZWluZyBkZWZhdWx0IHpvb20pLgogICAgICAgIHZhciBpbmRleCA9IHRoaXMuX3pvb21MZXZlbCArIFdlYkluc3BlY3Rvci5ab29tLkRlZmF1bHRPZmZzZXQ7CiAgICAgICAgaW5kZXggPSBNYXRoLm1pbihXZWJJbnNwZWN0b3IuWm9vbS5UYWJsZS5sZW5ndGggLSAxLCBpbmRleCk7CiAgICAgICAgaW5kZXggPSBNYXRoLm1heCgwLCBpbmRleCk7CiAgICAgICAgSW5zcGVjdG9yRnJvbnRlbmRIb3N0LnNldFpvb21GYWN0b3IoV2ViSW5zcGVjdG9yLlpvb20uVGFibGVbaW5kZXhdKTsKICAgIH0sCgogICAgX2RlYnVnZ2VyUGF1c2VkOiBmdW5jdGlvbigpCiAgICB7CiAgICAgICAgLy8gQ3JlYXRlIHNjcmlwdHMgcGFuZWwgdXBvbiBkZW1hbmQuCiAgICAgICAgV2ViSW5zcGVjdG9yLnBhbmVsKCJzY3JpcHRzIik7CiAgICB9Cn0KCldlYkluc3BlY3Rvci5FdmVudHMgPSB7CiAgICBJbnNwZWN0b3JMb2FkZWQ6ICJJbnNwZWN0b3JMb2FkZWQiLAogICAgSW5zcGVjdG9yQ2xvc2luZzogIkluc3BlY3RvckNsb3NpbmciCn0KCnsoZnVuY3Rpb24gcGFyc2VRdWVyeVBhcmFtZXRlcnMoKQp7CiAgICBXZWJJbnNwZWN0b3IucXVlcnlQYXJhbXNPYmplY3QgPSB7fTsKICAgIHZhciBxdWVyeVBhcmFtcyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7CiAgICBpZiAoIXF1ZXJ5UGFyYW1zKQogICAgICAgIHJldHVybjsKICAgIHZhciBwYXJhbXMgPSBxdWVyeVBhcmFtcy5zdWJzdHJpbmcoMSkuc3BsaXQoIiYiKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgKytpKSB7CiAgICAgICAgdmFyIHBhaXIgPSBwYXJhbXNbaV0uc3BsaXQoIj0iKTsKICAgICAgICBXZWJJbnNwZWN0b3IucXVlcnlQYXJhbXNPYmplY3RbcGFpclswXV0gPSBwYWlyWzFdOwogICAgfQp9KSgpO30KCldlYkluc3BlY3Rvci5zdWdnZXN0UmVsb2FkID0gZnVuY3Rpb24oKQp7CiAgICBpZiAod2luZG93LmNvbmZpcm0oV2ViSW5zcGVjdG9yLlVJU3RyaW5nKCJJdCBpcyByZWNvbW1lbmRlZCB0byByZXN0YXJ0IGluc3BlY3RvciBhZnRlciBtYWtpbmcgdGhlc2UgY2hhbmdlcy4gV291bGQgeW91IGxpa2UgdG8gcmVzdGFydCBpdD8iKSkpCiAgICAgICAgdGhpcy5yZWxvYWQoKTsKfQoKV2ViSW5zcGVjdG9yLnJlbG9hZCA9IGZ1bmN0aW9uKCkKewogICAgdmFyIHF1ZXJ5UGFyYW1zID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDsKICAgIHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgIHVybCA9IHVybC5zdWJzdHJpbmcoMCwgdXJsLmxlbmd0aCAtIHF1ZXJ5UGFyYW1zLmxlbmd0aCk7CiAgICB2YXIgcXVlcnlQYXJhbXNPYmplY3QgPSB7fTsKICAgIGZvciAodmFyIG5hbWUgaW4gV2ViSW5zcGVjdG9yLnF1ZXJ5UGFyYW1zT2JqZWN0KQogICAgICAgIHF1ZXJ5UGFyYW1zT2JqZWN0W25hbWVdID0gV2ViSW5zcGVjdG9yLnF1ZXJ5UGFyYW1zT2JqZWN0W25hbWVdOwogICAgaWYgKHRoaXMuZG9ja0NvbnRyb2xsZXIpCiAgICAgICAgcXVlcnlQYXJhbXNPYmplY3RbImRvY2tTaWRlIl0gPSB0aGlzLmRvY2tDb250cm9sbGVyLmRvY2tTaWRlKCk7CiAgICB2YXIgbmFtZXMgPSBPYmplY3Qua2V5cyhxdWVyeVBhcmFtc09iamVjdCk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKQogICAgICAgIHVybCArPSAoaSA/ICImIiA6ICI/IikgKyBuYW1lc1tpXSArICI9IiArIHF1ZXJ5UGFyYW1zT2JqZWN0W25hbWVzW2ldXTsKCiAgICBJbnNwZWN0b3JCYWNrZW5kLmRpc2Nvbm5lY3QoKTsKICAgIGRvY3VtZW50LmxvY2F0aW9uID0gdXJsOwp9CgpXZWJJbnNwZWN0b3IubG9hZGVkID0gZnVuY3Rpb24oKQp7CiAgICBJbnNwZWN0b3JCYWNrZW5kLmxvYWRGcm9tSlNPTklmTmVlZGVkKCIuLi9JbnNwZWN0b3IuanNvbiIpOwogICAgV2ViSW5zcGVjdG9yLmRvY2tDb250cm9sbGVyID0gbmV3IFdlYkluc3BlY3Rvci5Eb2NrQ29udHJvbGxlcigpOwoKICAgIGlmIChXZWJJbnNwZWN0b3IuV29ya2VyTWFuYWdlci5pc0RlZGljYXRlZFdvcmtlckZyb250ZW5kKCkpIHsKICAgICAgICAvLyBEbyBub3QgY3JlYXRlIHNvY2tldCBmb3IgdGhlIHdvcmtlciBmcm9udC1lbmQuCiAgICAgICAgV2ViSW5zcGVjdG9yLmRvTG9hZGVkRG9uZSgpOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgd3M7CiAgICBpZiAoIndzIiBpbiBXZWJJbnNwZWN0b3IucXVlcnlQYXJhbXNPYmplY3QpCiAgICAgICAgd3MgPSAid3M6Ly8iICsgV2ViSW5zcGVjdG9yLnF1ZXJ5UGFyYW1zT2JqZWN0LndzOwogICAgZWxzZSBpZiAoInBhZ2UiIGluIFdlYkluc3BlY3Rvci5xdWVyeVBhcmFtc09iamVjdCkgewogICAgICAgIHZhciBwYWdlID0gV2ViSW5zcGVjdG9yLnF1ZXJ5UGFyYW1zT2JqZWN0LnBhZ2U7CiAgICAgICAgdmFyIGhvc3QgPSAiaG9zdCIgaW4gV2ViSW5zcGVjdG9yLnF1ZXJ5UGFyYW1zT2JqZWN0ID8gV2ViSW5zcGVjdG9yLnF1ZXJ5UGFyYW1zT2JqZWN0Lmhvc3QgOiB3aW5kb3cubG9jYXRpb24uaG9zdDsKICAgICAgICB3cyA9ICJ3czovLyIgKyBob3N0ICsgIi9kZXZ0b29scy9wYWdlLyIgKyBwYWdlOwogICAgfQoKICAgIGlmICh3cykgewogICAgICAgIFdlYkluc3BlY3Rvci5zb2NrZXQgPSBuZXcgV2ViU29ja2V0KHdzKTsKICAgICAgICBXZWJJbnNwZWN0b3Iuc29ja2V0Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHsgSW5zcGVjdG9yQmFja2VuZC5kaXNwYXRjaChtZXNzYWdlLmRhdGEpOyB9CiAgICAgICAgV2ViSW5zcGVjdG9yLnNvY2tldC5vbmVycm9yID0gZnVuY3Rpb24oZXJyb3IpIHsgY29uc29sZS5lcnJvcihlcnJvcik7IH0KICAgICAgICBXZWJJbnNwZWN0b3Iuc29ja2V0Lm9ub3BlbiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBJbnNwZWN0b3JGcm9udGVuZEhvc3Quc2VuZE1lc3NhZ2VUb0JhY2tlbmQgPSBXZWJJbnNwZWN0b3Iuc29ja2V0LnNlbmQuYmluZChXZWJJbnNwZWN0b3Iuc29ja2V0KTsKICAgICAgICAgICAgV2ViSW5zcGVjdG9yLmRvTG9hZGVkRG9uZSgpOwogICAgICAgIH0KICAgICAgICBXZWJJbnNwZWN0b3Iuc29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCFXZWJJbnNwZWN0b3Iuc29ja2V0Ll9kZXRhY2hSZWFzb24pCiAgICAgICAgICAgICAgICAobmV3IFdlYkluc3BlY3Rvci5SZW1vdGVEZWJ1Z2dpbmdUZXJtaW5hdGVkU2NyZWVuKCJ3ZWJzb2NrZXRfY2xvc2VkIikpLnNob3dNb2RhbCgpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CgogICAgV2ViSW5zcGVjdG9yLmRvTG9hZGVkRG9uZSgpOwoKICAgIC8vIEluIGNhc2Ugb2YgbG9hZGluZyBhcyBhIHdlYiBwYWdlIHdpdGggbm8gYmluZGluZ3MgLyBoYXJuZXNzLCBraWNrIG9mZiBpbml0aWFsaXphdGlvbiBtYW51YWxseS4KICAgIGlmIChJbnNwZWN0b3JGcm9udGVuZEhvc3QuaXNTdHViKSB7CiAgICAgICAgSW5zcGVjdG9yRnJvbnRlbmRBUEkuZGlzcGF0Y2hRdWVyeVBhcmFtZXRlcnMoKTsKICAgICAgICBXZWJJbnNwZWN0b3IuX2RvTG9hZGVkRG9uZVdpdGhDYXBhYmlsaXRpZXMoKTsKICAgIH0KfQoKV2ViSW5zcGVjdG9yLmRvTG9hZGVkRG9uZSA9IGZ1bmN0aW9uKCkKewogICAgLy8gSW5zdGFsbCBzdHlsZXMgYW5kIHRoZW1lcwogICAgV2ViSW5zcGVjdG9yLmluc3RhbGxQb3J0U3R5bGVzKCk7CiAgICBpZiAoV2ViSW5zcGVjdG9yLnNvY2tldCkKICAgICAgICBkb2N1bWVudC5ib2R5LmFkZFN0eWxlQ2xhc3MoInJlbW90ZSIpOwoKICAgIGlmIChXZWJJbnNwZWN0b3IucXVlcnlQYXJhbXNPYmplY3QudG9vbGJhckNvbG9yICYmIFdlYkluc3BlY3Rvci5xdWVyeVBhcmFtc09iamVjdC50ZXh0Q29sb3IpCiAgICAgICAgV2ViSW5zcGVjdG9yLnNldFRvb2xiYXJDb2xvcnMoV2ViSW5zcGVjdG9yLnF1ZXJ5UGFyYW1zT2JqZWN0LnRvb2xiYXJDb2xvciwgV2ViSW5zcGVjdG9yLnF1ZXJ5UGFyYW1zT2JqZWN0LnRleHRDb2xvcik7CgogICAgSW5zcGVjdG9yRnJvbnRlbmRIb3N0LmxvYWRlZCgpOwogICAgV2ViSW5zcGVjdG9yLldvcmtlck1hbmFnZXIubG9hZGVkKCk7CgogICAgRGVidWdnZXJBZ2VudC5jYXVzZXNSZWNvbXBpbGF0aW9uKFdlYkluc3BlY3Rvci5faW5pdGlhbGl6ZUNhcGFiaWxpdHkuYmluZChXZWJJbnNwZWN0b3IsICJkZWJ1Z2dlckNhdXNlc1JlY29tcGlsYXRpb24iLCBudWxsKSk7CiAgICBEZWJ1Z2dlckFnZW50LnN1cHBvcnRzU2VwYXJhdGVTY3JpcHRDb21waWxhdGlvbkFuZEV4ZWN1dGlvbihXZWJJbnNwZWN0b3IuX2luaXRpYWxpemVDYXBhYmlsaXR5LmJpbmQoV2ViSW5zcGVjdG9yLCAic2VwYXJhdGVTY3JpcHRDb21waWxhdGlvbkFuZEV4ZWN1dGlvbkVuYWJsZWQiLCBudWxsKSk7CiAgICBQcm9maWxlckFnZW50LmNhdXNlc1JlY29tcGlsYXRpb24oV2ViSW5zcGVjdG9yLl9pbml0aWFsaXplQ2FwYWJpbGl0eS5iaW5kKFdlYkluc3BlY3RvciwgInByb2ZpbGVyQ2F1c2VzUmVjb21waWxhdGlvbiIsIG51bGwpKTsKICAgIFByb2ZpbGVyQWdlbnQuaXNTYW1wbGluZyhXZWJJbnNwZWN0b3IuX2luaXRpYWxpemVDYXBhYmlsaXR5LmJpbmQoV2ViSW5zcGVjdG9yLCAic2FtcGxpbmdDUFVQcm9maWxlciIsIG51bGwpKTsKICAgIEhlYXBQcm9maWxlckFnZW50Lmhhc0hlYXBQcm9maWxlcihXZWJJbnNwZWN0b3IuX2luaXRpYWxpemVDYXBhYmlsaXR5LmJpbmQoV2ViSW5zcGVjdG9yLCAiaGVhcFByb2ZpbGVyUHJlc2VudCIsIG51bGwpKTsKICAgIFRpbWVsaW5lQWdlbnQuc3VwcG9ydHNGcmFtZUluc3RydW1lbnRhdGlvbihXZWJJbnNwZWN0b3IuX2luaXRpYWxpemVDYXBhYmlsaXR5LmJpbmQoV2ViSW5zcGVjdG9yLCAidGltZWxpbmVTdXBwb3J0c0ZyYW1lSW5zdHJ1bWVudGF0aW9uIiwgbnVsbCkpOwogICAgVGltZWxpbmVBZ2VudC5jYW5Nb25pdG9yTWFpblRocmVhZChXZWJJbnNwZWN0b3IuX2luaXRpYWxpemVDYXBhYmlsaXR5LmJpbmQoV2ViSW5zcGVjdG9yLCAidGltZWxpbmVDYW5Nb25pdG9yTWFpblRocmVhZCIsIG51bGwpKTsKICAgIFBhZ2VBZ2VudC5jYW5TaG93RGVidWdCb3JkZXJzKFdlYkluc3BlY3Rvci5faW5pdGlhbGl6ZUNhcGFiaWxpdHkuYmluZChXZWJJbnNwZWN0b3IsICJjYW5TaG93RGVidWdCb3JkZXJzIiwgbnVsbCkpOwogICAgUGFnZUFnZW50LmNhblNob3dGUFNDb3VudGVyKFdlYkluc3BlY3Rvci5faW5pdGlhbGl6ZUNhcGFiaWxpdHkuYmluZChXZWJJbnNwZWN0b3IsICJjYW5TaG93RlBTQ291bnRlciIsIG51bGwpKTsKICAgIFBhZ2VBZ2VudC5jYW5Db250aW51b3VzbHlQYWludChXZWJJbnNwZWN0b3IuX2luaXRpYWxpemVDYXBhYmlsaXR5LmJpbmQoV2ViSW5zcGVjdG9yLCAiY2FuQ29udGludW91c2x5UGFpbnQiLCBudWxsKSk7CiAgICBQYWdlQWdlbnQuY2FuT3ZlcnJpZGVEZXZpY2VNZXRyaWNzKFdlYkluc3BlY3Rvci5faW5pdGlhbGl6ZUNhcGFiaWxpdHkuYmluZChXZWJJbnNwZWN0b3IsICJjYW5PdmVycmlkZURldmljZU1ldHJpY3MiLCBudWxsKSk7CiAgICBQYWdlQWdlbnQuY2FuT3ZlcnJpZGVHZW9sb2NhdGlvbihXZWJJbnNwZWN0b3IuX2luaXRpYWxpemVDYXBhYmlsaXR5LmJpbmQoV2ViSW5zcGVjdG9yLCAiY2FuT3ZlcnJpZGVHZW9sb2NhdGlvbiIsIG51bGwpKTsKICAgIFdvcmtlckFnZW50LmNhbkluc3BlY3RXb3JrZXJzKFdlYkluc3BlY3Rvci5faW5pdGlhbGl6ZUNhcGFiaWxpdHkuYmluZChXZWJJbnNwZWN0b3IsICJjYW5JbnNwZWN0V29ya2VycyIsIG51bGwpKTsKICAgIFBhZ2VBZ2VudC5jYW5PdmVycmlkZURldmljZU9yaWVudGF0aW9uKFdlYkluc3BlY3Rvci5faW5pdGlhbGl6ZUNhcGFiaWxpdHkuYmluZChXZWJJbnNwZWN0b3IsICJjYW5PdmVycmlkZURldmljZU9yaWVudGF0aW9uIiwgV2ViSW5zcGVjdG9yLl9kb0xvYWRlZERvbmVXaXRoQ2FwYWJpbGl0aWVzLmJpbmQoV2ViSW5zcGVjdG9yKSkpOwp9CgpXZWJJbnNwZWN0b3IuX2RvTG9hZGVkRG9uZVdpdGhDYXBhYmlsaXRpZXMgPSBmdW5jdGlvbigpCnsKICAgIG5ldyBXZWJJbnNwZWN0b3IuVmVyc2lvbkNvbnRyb2xsZXIoKS51cGRhdGVWZXJzaW9uKCk7CgogICAgV2ViSW5zcGVjdG9yLnNob3J0Y3V0c1NjcmVlbiA9IG5ldyBXZWJJbnNwZWN0b3IuU2hvcnRjdXRzU2NyZWVuKCk7CiAgICB0aGlzLl9yZWdpc3RlclNob3J0Y3V0cygpOwoKICAgIC8vIHNldCBvcmRlciBvZiBzb21lIHNlY3Rpb25zIGV4cGxpY2l0bHkKICAgIFdlYkluc3BlY3Rvci5zaG9ydGN1dHNTY3JlZW4uc2VjdGlvbihXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIkNvbnNvbGUiKSk7CiAgICBXZWJJbnNwZWN0b3Iuc2hvcnRjdXRzU2NyZWVuLnNlY3Rpb24oV2ViSW5zcGVjdG9yLlVJU3RyaW5nKCJFbGVtZW50cyBQYW5lbCIpKTsKCiAgICB2YXIgcGFuZWxEZXNjcmlwdG9ycyA9IHRoaXMuX3BhbmVsRGVzY3JpcHRvcnMoKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFuZWxEZXNjcmlwdG9ycy5sZW5ndGg7ICsraSkKICAgICAgICBwYW5lbERlc2NyaXB0b3JzW2ldLnJlZ2lzdGVyU2hvcnRjdXRzKCk7CgogICAgdGhpcy5jb25zb2xlID0gbmV3IFdlYkluc3BlY3Rvci5Db25zb2xlTW9kZWwoKTsKICAgIHRoaXMuY29uc29sZS5hZGRFdmVudExpc3RlbmVyKFdlYkluc3BlY3Rvci5Db25zb2xlTW9kZWwuRXZlbnRzLkNvbnNvbGVDbGVhcmVkLCB0aGlzLl91cGRhdGVFcnJvckFuZFdhcm5pbmdDb3VudHMsIHRoaXMpOwogICAgdGhpcy5jb25zb2xlLmFkZEV2ZW50TGlzdGVuZXIoV2ViSW5zcGVjdG9yLkNvbnNvbGVNb2RlbC5FdmVudHMuTWVzc2FnZUFkZGVkLCB0aGlzLl91cGRhdGVFcnJvckFuZFdhcm5pbmdDb3VudHMsIHRoaXMpOwogICAgdGhpcy5jb25zb2xlLmFkZEV2ZW50TGlzdGVuZXIoV2ViSW5zcGVjdG9yLkNvbnNvbGVNb2RlbC5FdmVudHMuUmVwZWF0Q291bnRVcGRhdGVkLCB0aGlzLl91cGRhdGVFcnJvckFuZFdhcm5pbmdDb3VudHMsIHRoaXMpOwoKICAgIFdlYkluc3BlY3Rvci5DU1NNZXRhZGF0YS5yZXF1ZXN0Q1NTU2hvcnRoYW5kRGF0YSgpOwoKICAgIHRoaXMuZHJhd2VyID0gbmV3IFdlYkluc3BlY3Rvci5EcmF3ZXIoKTsKCiAgICB0aGlzLm5ldHdvcmtNYW5hZ2VyID0gbmV3IFdlYkluc3BlY3Rvci5OZXR3b3JrTWFuYWdlcigpOwogICAgdGhpcy5yZXNvdXJjZVRyZWVNb2RlbCA9IG5ldyBXZWJJbnNwZWN0b3IuUmVzb3VyY2VUcmVlTW9kZWwodGhpcy5uZXR3b3JrTWFuYWdlcik7CiAgICB0aGlzLmRlYnVnZ2VyTW9kZWwgPSBuZXcgV2ViSW5zcGVjdG9yLkRlYnVnZ2VyTW9kZWwoKTsKICAgIHRoaXMuZGVidWdnZXJNb2RlbC5hZGRFdmVudExpc3RlbmVyKFdlYkluc3BlY3Rvci5EZWJ1Z2dlck1vZGVsLkV2ZW50cy5EZWJ1Z2dlclBhdXNlZCwgdGhpcy5fZGVidWdnZXJQYXVzZWQsIHRoaXMpOwogICAgdGhpcy5uZXR3b3JrTG9nID0gbmV3IFdlYkluc3BlY3Rvci5OZXR3b3JrTG9nKCk7CiAgICB0aGlzLmRvbUFnZW50ID0gbmV3IFdlYkluc3BlY3Rvci5ET01BZ2VudCgpOwogICAgdGhpcy5ydW50aW1lTW9kZWwgPSBuZXcgV2ViSW5zcGVjdG9yLlJ1bnRpbWVNb2RlbCh0aGlzLnJlc291cmNlVHJlZU1vZGVsKTsKCiAgICB0aGlzLmNvbnNvbGVWaWV3ID0gbmV3IFdlYkluc3BlY3Rvci5Db25zb2xlVmlldyhXZWJJbnNwZWN0b3IuV29ya2VyTWFuYWdlci5pc1dvcmtlckZyb250ZW5kKCkpOwoKICAgIEluc3BlY3RvckJhY2tlbmQucmVnaXN0ZXJJbnNwZWN0b3JEaXNwYXRjaGVyKHRoaXMpOwoKICAgIHRoaXMuaXNvbGF0ZWRGaWxlU3lzdGVtTWFuYWdlciA9IG5ldyBXZWJJbnNwZWN0b3IuSXNvbGF0ZWRGaWxlU3lzdGVtTWFuYWdlcigpOwogICAgdGhpcy5pc29sYXRlZEZpbGVTeXN0ZW1EaXNwYXRjaGVyID0gbmV3IFdlYkluc3BlY3Rvci5Jc29sYXRlZEZpbGVTeXN0ZW1EaXNwYXRjaGVyKHRoaXMuaXNvbGF0ZWRGaWxlU3lzdGVtTWFuYWdlcik7CiAgICB0aGlzLmZpbGVNYXBwaW5nID0gbmV3IFdlYkluc3BlY3Rvci5GaWxlTWFwcGluZygpOwogICAgdGhpcy53b3Jrc3BhY2UgPSBuZXcgV2ViSW5zcGVjdG9yLldvcmtzcGFjZSh0aGlzLmZpbGVNYXBwaW5nLCB0aGlzLmlzb2xhdGVkRmlsZVN5c3RlbU1hbmFnZXIubWFwcGluZygpKTsKCiAgICB0aGlzLmNzc01vZGVsID0gbmV3IFdlYkluc3BlY3Rvci5DU1NTdHlsZU1vZGVsKHRoaXMud29ya3NwYWNlKTsKICAgIHRoaXMudGltZWxpbmVNYW5hZ2VyID0gbmV3IFdlYkluc3BlY3Rvci5UaW1lbGluZU1hbmFnZXIoKTsKICAgIHRoaXMudXNlckFnZW50U3VwcG9ydCA9IG5ldyBXZWJJbnNwZWN0b3IuVXNlckFnZW50U3VwcG9ydCgpOwoKICAgIHRoaXMuc2VhcmNoQ29udHJvbGxlciA9IG5ldyBXZWJJbnNwZWN0b3IuU2VhcmNoQ29udHJvbGxlcigpOwogICAgdGhpcy5hZHZhbmNlZFNlYXJjaENvbnRyb2xsZXIgPSBuZXcgV2ViSW5zcGVjdG9yLkFkdmFuY2VkU2VhcmNoQ29udHJvbGxlcigpOwogICAgaWYgKCFXZWJJbnNwZWN0b3IuV29ya2VyTWFuYWdlci5pc1dvcmtlckZyb250ZW5kKCkpCiAgICAgICAgdGhpcy5pbnNwZWN0RWxlbWVudE1vZGVDb250cm9sbGVyID0gbmV3IFdlYkluc3BlY3Rvci5JbnNwZWN0RWxlbWVudE1vZGVDb250cm9sbGVyKCk7CgogICAgdGhpcy5zZXR0aW5nc0NvbnRyb2xsZXIgPSBuZXcgV2ViSW5zcGVjdG9yLlNldHRpbmdzQ29udHJvbGxlcigpOwoKICAgIHRoaXMuZG9tQnJlYWtwb2ludHNTaWRlYmFyUGFuZSA9IG5ldyBXZWJJbnNwZWN0b3IuRE9NQnJlYWtwb2ludHNTaWRlYmFyUGFuZSgpOwoKICAgIHRoaXMuX3pvb21MZXZlbCA9IFdlYkluc3BlY3Rvci5zZXR0aW5ncy56b29tTGV2ZWwuZ2V0KCk7CiAgICBpZiAodGhpcy5fem9vbUxldmVsKQogICAgICAgIHRoaXMuX3JlcXVlc3Rab29tKCk7CgogICAgdmFyIGF1dG9zZWxlY3RQYW5lbCA9IFdlYkluc3BlY3Rvci5VSVN0cmluZygiYSBwYW5lbCBjaG9zZW4gYXV0b21hdGljYWxseSIpOwogICAgdmFyIG9wZW5BbmNob3JMb2NhdGlvblNldHRpbmcgPSBXZWJJbnNwZWN0b3Iuc2V0dGluZ3MuY3JlYXRlU2V0dGluZygib3BlbkxpbmtIYW5kbGVyIiwgYXV0b3NlbGVjdFBhbmVsKTsKICAgIHRoaXMub3BlbkFuY2hvckxvY2F0aW9uUmVnaXN0cnkgPSBuZXcgV2ViSW5zcGVjdG9yLkhhbmRsZXJSZWdpc3RyeShvcGVuQW5jaG9yTG9jYXRpb25TZXR0aW5nKTsKICAgIHRoaXMub3BlbkFuY2hvckxvY2F0aW9uUmVnaXN0cnkucmVnaXN0ZXJIYW5kbGVyKGF1dG9zZWxlY3RQYW5lbCwgZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfSk7CgogICAgdGhpcy53b3Jrc3BhY2VDb250cm9sbGVyID0gbmV3IFdlYkluc3BlY3Rvci5Xb3Jrc3BhY2VDb250cm9sbGVyKHRoaXMud29ya3NwYWNlKTsKCiAgICB0aGlzLmZpbGVTeXN0ZW1Xb3Jrc3BhY2VQcm92aWRlciA9IG5ldyBXZWJJbnNwZWN0b3IuRmlsZVN5c3RlbVdvcmtzcGFjZVByb3ZpZGVyKHRoaXMuaXNvbGF0ZWRGaWxlU3lzdGVtTWFuYWdlciwgdGhpcy53b3Jrc3BhY2UpOwoKICAgIHRoaXMubmV0d29ya1dvcmtzcGFjZVByb3ZpZGVyID0gbmV3IFdlYkluc3BlY3Rvci5TaW1wbGVXb3Jrc3BhY2VQcm92aWRlcih0aGlzLndvcmtzcGFjZSwgV2ViSW5zcGVjdG9yLnByb2plY3RUeXBlcy5OZXR3b3JrKTsKICAgIG5ldyBXZWJJbnNwZWN0b3IuTmV0d29ya1VJU291cmNlQ29kZVByb3ZpZGVyKHRoaXMubmV0d29ya1dvcmtzcGFjZVByb3ZpZGVyLCB0aGlzLndvcmtzcGFjZSk7CgogICAgdGhpcy5icmVha3BvaW50TWFuYWdlciA9IG5ldyBXZWJJbnNwZWN0b3IuQnJlYWtwb2ludE1hbmFnZXIoV2ViSW5zcGVjdG9yLnNldHRpbmdzLmJyZWFrcG9pbnRzLCB0aGlzLmRlYnVnZ2VyTW9kZWwsIHRoaXMud29ya3NwYWNlKTsKCiAgICB0aGlzLnNjcmlwdFNuaXBwZXRNb2RlbCA9IG5ldyBXZWJJbnNwZWN0b3IuU2NyaXB0U25pcHBldE1vZGVsKHRoaXMud29ya3NwYWNlKTsKCiAgICBuZXcgV2ViSW5zcGVjdG9yLkRlYnVnZ2VyU2NyaXB0TWFwcGluZyh0aGlzLndvcmtzcGFjZSwgdGhpcy5uZXR3b3JrV29ya3NwYWNlUHJvdmlkZXIpOwogICAgdGhpcy5saXZlRWRpdFN1cHBvcnQgPSBuZXcgV2ViSW5zcGVjdG9yLkxpdmVFZGl0U3VwcG9ydCh0aGlzLndvcmtzcGFjZSk7CiAgICB0aGlzLnN0eWxlQ29udGVudEJpbmRpbmcgPSBuZXcgV2ViSW5zcGVjdG9yLlN0eWxlQ29udGVudEJpbmRpbmcodGhpcy5jc3NNb2RlbCwgdGhpcy53b3Jrc3BhY2UpOwogICAgbmV3IFdlYkluc3BlY3Rvci5TdHlsZXNTb3VyY2VNYXBwaW5nKHRoaXMuY3NzTW9kZWwsIHRoaXMud29ya3NwYWNlKTsKICAgIGlmIChXZWJJbnNwZWN0b3IuZXhwZXJpbWVudHNTZXR0aW5ncy5zYXNzLmlzRW5hYmxlZCgpKQogICAgICAgIG5ldyBXZWJJbnNwZWN0b3IuU0FTU1NvdXJjZU1hcHBpbmcodGhpcy5jc3NNb2RlbCwgdGhpcy53b3Jrc3BhY2UsIHRoaXMubmV0d29ya1dvcmtzcGFjZVByb3ZpZGVyKTsKCiAgICBuZXcgV2ViSW5zcGVjdG9yLlByZXNlbnRhdGlvbkNvbnNvbGVNZXNzYWdlSGVscGVyKHRoaXMud29ya3NwYWNlKTsKCiAgICB0aGlzLl9jcmVhdGVHbG9iYWxTdGF0dXNCYXJJdGVtcygpOwoKICAgIHRoaXMudG9vbGJhciA9IG5ldyBXZWJJbnNwZWN0b3IuVG9vbGJhcigpOwogICAgV2ViSW5zcGVjdG9yLnN0YXJ0QmF0Y2hVcGRhdGUoKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFuZWxEZXNjcmlwdG9ycy5sZW5ndGg7ICsraSkKICAgICAgICBXZWJJbnNwZWN0b3IuaW5zcGVjdG9yVmlldy5hZGRQYW5lbChwYW5lbERlc2NyaXB0b3JzW2ldKTsKICAgIFdlYkluc3BlY3Rvci5lbmRCYXRjaFVwZGF0ZSgpOwoKICAgIHRoaXMuYWRkTWFpbkV2ZW50TGlzdGVuZXJzKGRvY3VtZW50KTsKCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigicmVzaXplIiwgdGhpcy53aW5kb3dSZXNpemUuYmluZCh0aGlzKSwgdHJ1ZSk7CgogICAgdmFyIGVycm9yV2FybmluZ0NvdW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVycm9yLXdhcm5pbmctY291bnQiKTsKICAgIGVycm9yV2FybmluZ0NvdW50LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgdGhpcy5zaG93Q29uc29sZS5iaW5kKHRoaXMpLCBmYWxzZSk7CiAgICB0aGlzLl91cGRhdGVFcnJvckFuZFdhcm5pbmdDb3VudHMoKTsKCiAgICB0aGlzLmV4dGVuc2lvblNlcnZlci5pbml0RXh0ZW5zaW9ucygpOwoKICAgIHRoaXMuY29uc29sZS5lbmFibGVBZ2VudCgpOwoKICAgIGZ1bmN0aW9uIHNob3dJbml0aWFsUGFuZWwoKQogICAgewogICAgICAgIGlmICghV2ViSW5zcGVjdG9yLmluc3BlY3RvclZpZXcuY3VycmVudFBhbmVsKCkpCiAgICAgICAgICAgIFdlYkluc3BlY3Rvci5zaG93UGFuZWwoV2ViSW5zcGVjdG9yLnNldHRpbmdzLmxhc3RBY3RpdmVQYW5lbC5nZXQoKSk7CiAgICB9CgogICAgSW5zcGVjdG9yQWdlbnQuZW5hYmxlKHNob3dJbml0aWFsUGFuZWwpOwogICAgdGhpcy5kYXRhYmFzZU1vZGVsID0gbmV3IFdlYkluc3BlY3Rvci5EYXRhYmFzZU1vZGVsKCk7CiAgICB0aGlzLmRvbVN0b3JhZ2VNb2RlbCA9IG5ldyBXZWJJbnNwZWN0b3IuRE9NU3RvcmFnZU1vZGVsKCk7CgogICAgaWYgKCFDYXBhYmlsaXRpZXMucHJvZmlsZXJDYXVzZXNSZWNvbXBpbGF0aW9uIHx8IFdlYkluc3BlY3Rvci5zZXR0aW5ncy5wcm9maWxlckVuYWJsZWQuZ2V0KCkpCiAgICAgICAgUHJvZmlsZXJBZ2VudC5lbmFibGUoKTsKCiAgICBpZiAoV2ViSW5zcGVjdG9yLnNldHRpbmdzLnNob3dQYWludFJlY3RzLmdldCgpKQogICAgICAgIFBhZ2VBZ2VudC5zZXRTaG93UGFpbnRSZWN0cyh0cnVlKTsKCiAgICBpZiAoV2ViSW5zcGVjdG9yLnNldHRpbmdzLnNob3dEZWJ1Z0JvcmRlcnMuZ2V0KCkpCiAgICAgICAgUGFnZUFnZW50LnNldFNob3dEZWJ1Z0JvcmRlcnModHJ1ZSk7CgogICAgaWYgKFdlYkluc3BlY3Rvci5zZXR0aW5ncy5jb250aW51b3VzUGFpbnRpbmcuZ2V0KCkpCiAgICAgICAgUGFnZUFnZW50LnNldENvbnRpbnVvdXNQYWludGluZ0VuYWJsZWQodHJ1ZSk7CgogICAgaWYgKFdlYkluc3BlY3Rvci5zZXR0aW5ncy5qYXZhU2NyaXB0RGlzYWJsZWQuZ2V0KCkpCiAgICAgICAgUGFnZUFnZW50LnNldFNjcmlwdEV4ZWN1dGlvbkRpc2FibGVkKHRydWUpOwoKICAgIGlmIChXZWJJbnNwZWN0b3Iuc2V0dGluZ3Muc2hvd0ZQU0NvdW50ZXIuZ2V0KCkpCiAgICAgICAgUGFnZUFnZW50LnNldFNob3dGUFNDb3VudGVyKHRydWUpOwoKICAgIHRoaXMuZG9tQWdlbnQuX2VtdWxhdGVUb3VjaEV2ZW50c0NoYW5nZWQoKTsKCiAgICBXZWJJbnNwZWN0b3IuV29ya2VyTWFuYWdlci5sb2FkQ29tcGxldGVkKCk7CiAgICBJbnNwZWN0b3JGcm9udGVuZEFQSS5sb2FkQ29tcGxldGVkKCk7CgogICAgV2ViSW5zcGVjdG9yLm5vdGlmaWNhdGlvbnMuZGlzcGF0Y2hFdmVudFRvTGlzdGVuZXJzKFdlYkluc3BlY3Rvci5FdmVudHMuSW5zcGVjdG9yTG9hZGVkKTsKfQoKdmFyIHdpbmRvd0xvYWRlZCA9IGZ1bmN0aW9uKCkKewogICAgdmFyIGxvY2FsaXplZFN0cmluZ3NVUkwgPSBJbnNwZWN0b3JGcm9udGVuZEhvc3QubG9jYWxpemVkU3RyaW5nc1VSTCgpOwogICAgaWYgKGxvY2FsaXplZFN0cmluZ3NVUkwpIHsKICAgICAgICB2YXIgbG9jYWxpemVkU3RyaW5nc1NjcmlwdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgICAgICBsb2NhbGl6ZWRTdHJpbmdzU2NyaXB0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwgV2ViSW5zcGVjdG9yLmxvYWRlZC5iaW5kKFdlYkluc3BlY3RvciksIGZhbHNlKTsKICAgICAgICBsb2NhbGl6ZWRTdHJpbmdzU2NyaXB0RWxlbWVudC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7CiAgICAgICAgbG9jYWxpemVkU3RyaW5nc1NjcmlwdEVsZW1lbnQuc3JjID0gbG9jYWxpemVkU3RyaW5nc1VSTDsKICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxvY2FsaXplZFN0cmluZ3NTY3JpcHRFbGVtZW50KTsKICAgIH0gZWxzZQogICAgICAgIFdlYkluc3BlY3Rvci5sb2FkZWQoKTsKCiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIHdpbmRvd0xvYWRlZCwgZmFsc2UpOwogICAgZGVsZXRlIHdpbmRvd0xvYWRlZDsKfTsKCndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgd2luZG93TG9hZGVkLCBmYWxzZSk7CgovLyBXZSdkIGxpa2UgdG8gZW5mb3JjZSBhc3luY2hyb25vdXMgaW50ZXJhY3Rpb24gYmV0d2VlbiB0aGUgaW5zcGVjdG9yIGNvbnRyb2xsZXIgYW5kIHRoZSBmcm9udGVuZC4KLy8gSXQgaXMgbmVlZGVkIHRvIHByZXZlbnQgcmUtZW50ZXJpbmcgdGhlIGJhY2tlbmQgY29kZS4KLy8gQWxzbywgbmF0aXZlIGRpc3BhdGNoZXMgZG8gbm90IGd1YXJhbnRlZSBzZXRUaW1lb3V0cyB0byBiZSBzZXJpYWxpemVkLCBzbyB3ZQovLyBlbmZvcmNlIHNlcmlhbGl6YXRpb24gdXNpbmcgJ21lc3NhZ2VzVG9EaXNwYXRjaCcgcXVldWUuIEl0IGlzIGFsc28gaW1wb3J0YW50IHRoYXQgSlNDIGRlYnVnZ2VyCi8vIHRlc3RzIHJlcXVpcmUgdGhhdCBlYWNoIGNvbW1hbmQgd2FzIGRpc3BhdGNoIHdpdGhpbiBpbmRpdmlkdWFsIHRpbWVvdXQgY2FsbGJhY2ssIHNvIHdlIGRvbid0IGJhdGNoIHRoZW0uCgp2YXIgbWVzc2FnZXNUb0Rpc3BhdGNoID0gW107CgpXZWJJbnNwZWN0b3IuZGlzcGF0Y2hRdWV1ZUlzRW1wdHkgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBtZXNzYWdlc1RvRGlzcGF0Y2gubGVuZ3RoID09IDA7Cn0KCldlYkluc3BlY3Rvci5kaXNwYXRjaCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHsKICAgIG1lc3NhZ2VzVG9EaXNwYXRjaC5wdXNoKG1lc3NhZ2UpOwogICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICBJbnNwZWN0b3JCYWNrZW5kLmRpc3BhdGNoKG1lc3NhZ2VzVG9EaXNwYXRjaC5zaGlmdCgpKTsKICAgIH0sIDApOwp9CgpXZWJJbnNwZWN0b3Iud2luZG93UmVzaXplID0gZnVuY3Rpb24oZXZlbnQpCnsKICAgIGlmIChXZWJJbnNwZWN0b3IuaW5zcGVjdG9yVmlldykKICAgICAgICBXZWJJbnNwZWN0b3IuaW5zcGVjdG9yVmlldy5kb1Jlc2l6ZSgpOwogICAgaWYgKFdlYkluc3BlY3Rvci5kcmF3ZXIpCiAgICAgICAgV2ViSW5zcGVjdG9yLmRyYXdlci5yZXNpemUoKTsKICAgIGlmIChXZWJJbnNwZWN0b3IudG9vbGJhcikKICAgICAgICBXZWJJbnNwZWN0b3IudG9vbGJhci5yZXNpemUoKTsKICAgIGlmIChXZWJJbnNwZWN0b3Iuc2V0dGluZ3NDb250cm9sbGVyKQogICAgICAgIFdlYkluc3BlY3Rvci5zZXR0aW5nc0NvbnRyb2xsZXIucmVzaXplKCk7Cn0KCldlYkluc3BlY3Rvci5zZXREb2NraW5nVW5hdmFpbGFibGUgPSBmdW5jdGlvbih1bmF2YWlsYWJsZSkKewogICAgaWYgKHRoaXMuZG9ja0NvbnRyb2xsZXIpCiAgICAgICAgdGhpcy5kb2NrQ29udHJvbGxlci5zZXREb2NraW5nVW5hdmFpbGFibGUodW5hdmFpbGFibGUpOwp9CgpXZWJJbnNwZWN0b3IuY2xvc2UgPSBmdW5jdGlvbihldmVudCkKewogICAgaWYgKHRoaXMuX2lzQ2xvc2luZykKICAgICAgICByZXR1cm47CiAgICB0aGlzLl9pc0Nsb3NpbmcgPSB0cnVlOwogICAgdGhpcy5ub3RpZmljYXRpb25zLmRpc3BhdGNoRXZlbnRUb0xpc3RlbmVycyhXZWJJbnNwZWN0b3IuRXZlbnRzLkluc3BlY3RvckNsb3NpbmcpOwogICAgSW5zcGVjdG9yRnJvbnRlbmRIb3N0LmNsb3NlV2luZG93KCk7Cn0KCldlYkluc3BlY3Rvci5kb2N1bWVudENsaWNrID0gZnVuY3Rpb24oZXZlbnQpCnsKICAgIHZhciBhbmNob3IgPSBldmVudC50YXJnZXQuZW5jbG9zaW5nTm9kZU9yU2VsZldpdGhOb2RlTmFtZSgiYSIpOwogICAgaWYgKCFhbmNob3IgfHwgKGFuY2hvci50YXJnZXQgPT09ICJfYmxhbmsiKSkKICAgICAgICByZXR1cm47CgogICAgLy8gUHJldmVudCB0aGUgbGluayBmcm9tIG5hdmlnYXRpbmcsIHNpbmNlIHdlIGRvbid0IGRvIGFueSBuYXZpZ2F0aW9uIGJ5IGZvbGxvd2luZyBsaW5rcyBub3JtYWxseS4KICAgIGV2ZW50LmNvbnN1bWUodHJ1ZSk7CgogICAgZnVuY3Rpb24gZm9sbG93TGluaygpCiAgICB7CiAgICAgICAgaWYgKFdlYkluc3BlY3Rvci5pc0JlaW5nRWRpdGVkKGV2ZW50LnRhcmdldCkgfHwgV2ViSW5zcGVjdG9yLl9zaG93QW5jaG9yTG9jYXRpb24oYW5jaG9yKSkKICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICBjb25zdCBwcm9maWxlTWF0Y2ggPSBXZWJJbnNwZWN0b3IuUHJvZmlsZXNQYW5lbERlc2NyaXB0b3IuUHJvZmlsZVVSTFJlZ0V4cC5leGVjKGFuY2hvci5ocmVmKTsKICAgICAgICBpZiAocHJvZmlsZU1hdGNoKSB7CiAgICAgICAgICAgIFdlYkluc3BlY3Rvci5zaG93UGFuZWwoInByb2ZpbGVzIikuc2hvd1Byb2ZpbGUocHJvZmlsZU1hdGNoWzFdLCBwcm9maWxlTWF0Y2hbMl0pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgcGFyc2VkVVJMID0gYW5jaG9yLmhyZWYuYXNQYXJzZWRVUkwoKTsKICAgICAgICBpZiAocGFyc2VkVVJMICYmIHBhcnNlZFVSTC5zY2hlbWUgPT09ICJ3ZWJraXQtbGluay1hY3Rpb24iKSB7CiAgICAgICAgICAgIGlmIChwYXJzZWRVUkwuaG9zdCA9PT0gInNob3ctcGFuZWwiKSB7CiAgICAgICAgICAgICAgICB2YXIgcGFuZWwgPSBwYXJzZWRVUkwucGF0aC5zdWJzdHJpbmcoMSk7CiAgICAgICAgICAgICAgICBpZiAoV2ViSW5zcGVjdG9yLnBhbmVsKHBhbmVsKSkKICAgICAgICAgICAgICAgICAgICBXZWJJbnNwZWN0b3Iuc2hvd1BhbmVsKHBhbmVsKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBJbnNwZWN0b3JGcm9udGVuZEhvc3Qub3BlbkluTmV3VGFiKGFuY2hvci5ocmVmKTsKICAgIH0KCiAgICBpZiAoV2ViSW5zcGVjdG9yLmZvbGxvd0xpbmtUaW1lb3V0KQogICAgICAgIGNsZWFyVGltZW91dChXZWJJbnNwZWN0b3IuZm9sbG93TGlua1RpbWVvdXQpOwoKICAgIGlmIChhbmNob3IucHJldmVudEZvbGxvd09uRG91YmxlQ2xpY2spIHsKICAgICAgICAvLyBTdGFydCBhIHRpbWVvdXQgaWYgdGhpcyBpcyB0aGUgZmlyc3QgY2xpY2ssIGlmIHRoZSB0aW1lb3V0IGlzIGNhbmNlbGVkCiAgICAgICAgLy8gYmVmb3JlIGl0IGZpcmVzLCB0aGVuIGEgZG91YmxlIGNsaWNrZWQgaGFwcGVuZWQgb3IgYW5vdGhlciBsaW5rIHdhcyBjbGlja2VkLgogICAgICAgIGlmIChldmVudC5kZXRhaWwgPT09IDEpCiAgICAgICAgICAgIFdlYkluc3BlY3Rvci5mb2xsb3dMaW5rVGltZW91dCA9IHNldFRpbWVvdXQoZm9sbG93TGluaywgMzMzKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgZm9sbG93TGluaygpOwp9CgpXZWJJbnNwZWN0b3Iub3BlblJlc291cmNlID0gZnVuY3Rpb24ocmVzb3VyY2VVUkwsIGluUmVzb3VyY2VzUGFuZWwpCnsKICAgIHZhciByZXNvdXJjZSA9IFdlYkluc3BlY3Rvci5yZXNvdXJjZUZvclVSTChyZXNvdXJjZVVSTCk7CiAgICBpZiAoaW5SZXNvdXJjZXNQYW5lbCAmJiByZXNvdXJjZSkKICAgICAgICBXZWJJbnNwZWN0b3Iuc2hvd1BhbmVsKCJyZXNvdXJjZXMiKS5zaG93UmVzb3VyY2UocmVzb3VyY2UpOwogICAgZWxzZQogICAgICAgIEluc3BlY3RvckZyb250ZW5kSG9zdC5vcGVuSW5OZXdUYWIocmVzb3VyY2VVUkwpOwp9CgpXZWJJbnNwZWN0b3IuX3JlZ2lzdGVyU2hvcnRjdXRzID0gZnVuY3Rpb24oKQp7CiAgICB2YXIgc2hvcnRjdXQgPSBXZWJJbnNwZWN0b3IuS2V5Ym9hcmRTaG9ydGN1dDsKICAgIHZhciBzZWN0aW9uID0gV2ViSW5zcGVjdG9yLnNob3J0Y3V0c1NjcmVlbi5zZWN0aW9uKFdlYkluc3BlY3Rvci5VSVN0cmluZygiQWxsIFBhbmVscyIpKTsKICAgIHZhciBrZXlzID0gWwogICAgICAgIHNob3J0Y3V0Lm1ha2VEZXNjcmlwdG9yKCJbIiwgc2hvcnRjdXQuTW9kaWZpZXJzLkN0cmxPck1ldGEpLAogICAgICAgIHNob3J0Y3V0Lm1ha2VEZXNjcmlwdG9yKCJdIiwgc2hvcnRjdXQuTW9kaWZpZXJzLkN0cmxPck1ldGEpCiAgICBdOwogICAgc2VjdGlvbi5hZGRSZWxhdGVkS2V5cyhrZXlzLCBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIkdvIHRvIHRoZSBwYW5lbCB0byB0aGUgbGVmdC9yaWdodCIpKTsKCiAgICBrZXlzID0gWwogICAgICAgIHNob3J0Y3V0Lm1ha2VEZXNjcmlwdG9yKCJbIiwgc2hvcnRjdXQuTW9kaWZpZXJzLkN0cmxPck1ldGEgfCBzaG9ydGN1dC5Nb2RpZmllcnMuQWx0KSwKICAgICAgICBzaG9ydGN1dC5tYWtlRGVzY3JpcHRvcigiXSIsIHNob3J0Y3V0Lk1vZGlmaWVycy5DdHJsT3JNZXRhIHwgc2hvcnRjdXQuTW9kaWZpZXJzLkFsdCkKICAgIF07CiAgICBzZWN0aW9uLmFkZFJlbGF0ZWRLZXlzKGtleXMsIFdlYkluc3BlY3Rvci5VSVN0cmluZygiR28gYmFjay9mb3J3YXJkIGluIHBhbmVsIGhpc3RvcnkiKSk7CgogICAgc2VjdGlvbi5hZGRLZXkoc2hvcnRjdXQubWFrZURlc2NyaXB0b3Ioc2hvcnRjdXQuS2V5cy5Fc2MpLCBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIlRvZ2dsZSBjb25zb2xlIikpOwogICAgc2VjdGlvbi5hZGRLZXkoc2hvcnRjdXQubWFrZURlc2NyaXB0b3IoImYiLCBzaG9ydGN1dC5Nb2RpZmllcnMuQ3RybE9yTWV0YSksIFdlYkluc3BlY3Rvci5VSVN0cmluZygiU2VhcmNoIikpOwoKICAgIHZhciBhZHZhbmNlZFNlYXJjaFNob3J0Y3V0ID0gV2ViSW5zcGVjdG9yLkFkdmFuY2VkU2VhcmNoQ29udHJvbGxlci5jcmVhdGVTaG9ydGN1dCgpOwogICAgc2VjdGlvbi5hZGRLZXkoYWR2YW5jZWRTZWFyY2hTaG9ydGN1dCwgV2ViSW5zcGVjdG9yLlVJU3RyaW5nKCJTZWFyY2ggYWNyb3NzIGFsbCBzb3VyY2VzIikpOwoKICAgIHZhciBpbnNwZWN0RWxlbWVudE1vZGVTaG9ydGN1dCA9IFdlYkluc3BlY3Rvci5JbnNwZWN0RWxlbWVudE1vZGVDb250cm9sbGVyLmNyZWF0ZVNob3J0Y3V0KCk7CiAgICBzZWN0aW9uLmFkZEtleShpbnNwZWN0RWxlbWVudE1vZGVTaG9ydGN1dCwgV2ViSW5zcGVjdG9yLlVJU3RyaW5nKCJTZWxlY3Qgbm9kZSB0byBpbnNwZWN0IikpOwoKICAgIHZhciBvcGVuUmVzb3VyY2VTaG9ydGN1dCA9IFdlYkluc3BlY3Rvci5LZXlib2FyZFNob3J0Y3V0Lm1ha2VEZXNjcmlwdG9yKCJvIiwgV2ViSW5zcGVjdG9yLktleWJvYXJkU2hvcnRjdXQuTW9kaWZpZXJzLkN0cmxPck1ldGEpOwogICAgc2VjdGlvbi5hZGRLZXkob3BlblJlc291cmNlU2hvcnRjdXQsIFdlYkluc3BlY3Rvci5VSVN0cmluZygiR28gdG8gc291cmNlIikpOwoKICAgIGlmIChXZWJJbnNwZWN0b3IuaXNNYWMoKSkgewogICAgICAgIGtleXMgPSBbCiAgICAgICAgICAgIHNob3J0Y3V0Lm1ha2VEZXNjcmlwdG9yKCJnIiwgc2hvcnRjdXQuTW9kaWZpZXJzLk1ldGEpLAogICAgICAgICAgICBzaG9ydGN1dC5tYWtlRGVzY3JpcHRvcigiZyIsIHNob3J0Y3V0Lk1vZGlmaWVycy5NZXRhIHwgc2hvcnRjdXQuTW9kaWZpZXJzLlNoaWZ0KQogICAgICAgIF07CiAgICAgICAgc2VjdGlvbi5hZGRSZWxhdGVkS2V5cyhrZXlzLCBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIkZpbmQgbmV4dC9wcmV2aW91cyIpKTsKICAgIH0KCiAgICB2YXIgZ29Ub1Nob3J0Y3V0ID0gV2ViSW5zcGVjdG9yLkdvVG9MaW5lRGlhbG9nLmNyZWF0ZVNob3J0Y3V0KCk7CiAgICBzZWN0aW9uLmFkZEtleShnb1RvU2hvcnRjdXQsIFdlYkluc3BlY3Rvci5VSVN0cmluZygiR28gdG8gbGluZSIpKTsKCiAgICBrZXlzID0gWwogICAgICAgIHNob3J0Y3V0LktleXMuRjEsCiAgICAgICAgc2hvcnRjdXQubWFrZURlc2NyaXB0b3IoIj8iKQogICAgXTsKICAgIHNlY3Rpb24uYWRkQWx0ZXJuYXRlS2V5cyhrZXlzLCBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIlNob3cga2V5Ym9hcmQgc2hvcnRjdXRzIikpOwp9CgovKioKICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudAogKi8KV2ViSW5zcGVjdG9yLmRvY3VtZW50S2V5RG93biA9IGZ1bmN0aW9uKGV2ZW50KQp7CiAgICBjb25zdCBoZWxwS2V5ID0gV2ViSW5zcGVjdG9yLmlzTWFjKCkgPyAiVSswMDNGIiA6ICJVKzAwQkYiOyAvLyAiPyIgZm9yIGJvdGggcGxhdGZvcm1zCgogICAgaWYgKGV2ZW50LmtleUlkZW50aWZpZXIgPT09ICJGMSIgfHwKICAgICAgICAoZXZlbnQua2V5SWRlbnRpZmllciA9PT0gaGVscEtleSAmJiBldmVudC5zaGlmdEtleSAmJiAoIVdlYkluc3BlY3Rvci5pc0JlaW5nRWRpdGVkKGV2ZW50LnRhcmdldCkgfHwgZXZlbnQubWV0YUtleSkpKSB7CiAgICAgICAgdGhpcy5zZXR0aW5nc0NvbnRyb2xsZXIuc2hvd1NldHRpbmdzU2NyZWVuKFdlYkluc3BlY3Rvci5TZXR0aW5nc1NjcmVlbi5UYWJzLlNob3J0Y3V0cyk7CiAgICAgICAgZXZlbnQuY29uc3VtZSh0cnVlKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKFdlYkluc3BlY3Rvci5jdXJyZW50Rm9jdXNFbGVtZW50KCkgJiYgV2ViSW5zcGVjdG9yLmN1cnJlbnRGb2N1c0VsZW1lbnQoKS5oYW5kbGVLZXlFdmVudCkgewogICAgICAgIFdlYkluc3BlY3Rvci5jdXJyZW50Rm9jdXNFbGVtZW50KCkuaGFuZGxlS2V5RXZlbnQoZXZlbnQpOwogICAgICAgIGlmIChldmVudC5oYW5kbGVkKSB7CiAgICAgICAgICAgIGV2ZW50LmNvbnN1bWUodHJ1ZSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgaWYgKFdlYkluc3BlY3Rvci5pbnNwZWN0b3JWaWV3LmN1cnJlbnRQYW5lbCgpKSB7CiAgICAgICAgV2ViSW5zcGVjdG9yLmluc3BlY3RvclZpZXcuY3VycmVudFBhbmVsKCkuaGFuZGxlU2hvcnRjdXQoZXZlbnQpOwogICAgICAgIGlmIChldmVudC5oYW5kbGVkKSB7CiAgICAgICAgICAgIGV2ZW50LmNvbnN1bWUodHJ1ZSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgaWYgKFdlYkluc3BlY3Rvci5zZWFyY2hDb250cm9sbGVyLmhhbmRsZVNob3J0Y3V0KGV2ZW50KSkKICAgICAgICByZXR1cm47CiAgICBpZiAoV2ViSW5zcGVjdG9yLmFkdmFuY2VkU2VhcmNoQ29udHJvbGxlci5oYW5kbGVTaG9ydGN1dChldmVudCkpCiAgICAgICAgcmV0dXJuOwogICAgaWYgKFdlYkluc3BlY3Rvci5pbnNwZWN0RWxlbWVudE1vZGVDb250cm9sbGVyICYmIFdlYkluc3BlY3Rvci5pbnNwZWN0RWxlbWVudE1vZGVDb250cm9sbGVyLmhhbmRsZVNob3J0Y3V0KGV2ZW50KSkKICAgICAgICByZXR1cm47CgogICAgc3dpdGNoIChldmVudC5rZXlJZGVudGlmaWVyKSB7CiAgICAgICAgY2FzZSAiVSswMDRGIjogLy8gTyBrZXkKICAgICAgICAgICAgaWYgKCFldmVudC5zaGlmdEtleSAmJiAhZXZlbnQuYWx0S2V5ICYmIFdlYkluc3BlY3Rvci5LZXlib2FyZFNob3J0Y3V0LmV2ZW50SGFzQ3RybE9yTWV0YShldmVudCkpIHsKICAgICAgICAgICAgICAgIFdlYkluc3BlY3Rvci5zaG93UGFuZWwoInNjcmlwdHMiKS5zaG93R29Ub1NvdXJjZURpYWxvZygpOwogICAgICAgICAgICAgICAgZXZlbnQuY29uc3VtZSh0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJVKzAwNTIiOiAvLyBSIGtleQogICAgICAgICAgICBpZiAoV2ViSW5zcGVjdG9yLktleWJvYXJkU2hvcnRjdXQuZXZlbnRIYXNDdHJsT3JNZXRhKGV2ZW50KSkgewogICAgICAgICAgICAgICAgUGFnZUFnZW50LnJlbG9hZChldmVudC5zaGlmdEtleSk7CiAgICAgICAgICAgICAgICBldmVudC5jb25zdW1lKHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh3aW5kb3cuREVCVUcgJiYgZXZlbnQuYWx0S2V5KSB7CiAgICAgICAgICAgICAgICBXZWJJbnNwZWN0b3IucmVsb2FkKCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiRjUiOgogICAgICAgICAgICBpZiAoIVdlYkluc3BlY3Rvci5pc01hYygpKSB7CiAgICAgICAgICAgICAgICBQYWdlQWdlbnQucmVsb2FkKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpOwogICAgICAgICAgICAgICAgZXZlbnQuY29uc3VtZSh0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgIH0KCiAgICB2YXIgaXNWYWxpZFpvb21TaG9ydGN1dCA9IFdlYkluc3BlY3Rvci5LZXlib2FyZFNob3J0Y3V0LmV2ZW50SGFzQ3RybE9yTWV0YShldmVudCkgJiYKICAgICAgICAhZXZlbnQuYWx0S2V5ICYmCiAgICAgICAgIUluc3BlY3RvckZyb250ZW5kSG9zdC5pc1N0dWI7CiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHsKICAgICAgICBjYXNlIDEwNzogLy8gKwogICAgICAgIGNhc2UgMTg3OiAvLyArCiAgICAgICAgICAgIGlmIChpc1ZhbGlkWm9vbVNob3J0Y3V0KSB7CiAgICAgICAgICAgICAgICBXZWJJbnNwZWN0b3IuX3pvb21JbigpOwogICAgICAgICAgICAgICAgZXZlbnQuY29uc3VtZSh0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDEwOTogLy8gLQogICAgICAgIGNhc2UgMTg5OiAvLyAtCiAgICAgICAgICAgIGlmIChpc1ZhbGlkWm9vbVNob3J0Y3V0KSB7CiAgICAgICAgICAgICAgICBXZWJJbnNwZWN0b3IuX3pvb21PdXQoKTsKICAgICAgICAgICAgICAgIGV2ZW50LmNvbnN1bWUodHJ1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSA0ODogLy8gMAogICAgICAgICAgICAvLyBab29tIHJlc2V0IHNob3J0Y3V0IGRvZXMgbm90IGFsbG93ICJTaGlmdCIgd2hlbiBoYW5kbGVkIGJ5IHRoZSBicm93c2VyLgogICAgICAgICAgICBpZiAoaXNWYWxpZFpvb21TaG9ydGN1dCAmJiAhZXZlbnQuc2hpZnRLZXkpIHsKICAgICAgICAgICAgICAgIFdlYkluc3BlY3Rvci5fcmVzZXRab29tKCk7CiAgICAgICAgICAgICAgICBldmVudC5jb25zdW1lKHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgfQp9CgpXZWJJbnNwZWN0b3IucG9zdERvY3VtZW50S2V5RG93biA9IGZ1bmN0aW9uKGV2ZW50KQp7CiAgICBpZiAoZXZlbnQuaGFuZGxlZCkKICAgICAgICByZXR1cm47CgogICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IFdlYkluc3BlY3Rvci5LZXlib2FyZFNob3J0Y3V0LktleXMuRXNjLmNvZGUpIHsKICAgICAgICAvLyBJZiBkcmF3ZXIgaXMgb3BlbiB3aXRoIHNvbWUgdmlldyBvdGhlciB0aGFuIGNvbnNvbGUgdGhlbiBjbG9zZSBpdC4KICAgICAgICBpZiAoIXRoaXMuX3RvZ2dsZUNvbnNvbGVCdXR0b24udG9nZ2xlZCAmJiBXZWJJbnNwZWN0b3IuZHJhd2VyLnZpc2libGUpCiAgICAgICAgICAgIHRoaXMuY2xvc2VWaWV3SW5EcmF3ZXIoKTsKICAgICAgICBlbHNlCiAgICAgICAgICAgIHRoaXMuX3RvZ2dsZUNvbnNvbGVCdXR0b25DbGlja2VkKCk7CiAgICB9Cn0KCldlYkluc3BlY3Rvci5kb2N1bWVudENhbkNvcHkgPSBmdW5jdGlvbihldmVudCkKewogICAgaWYgKFdlYkluc3BlY3Rvci5pbnNwZWN0b3JWaWV3LmN1cnJlbnRQYW5lbCgpICYmIFdlYkluc3BlY3Rvci5pbnNwZWN0b3JWaWV3LmN1cnJlbnRQYW5lbCgpLmhhbmRsZUNvcHlFdmVudCkKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwp9CgpXZWJJbnNwZWN0b3IuZG9jdW1lbnRDb3B5ID0gZnVuY3Rpb24oZXZlbnQpCnsKICAgIGlmIChXZWJJbnNwZWN0b3IuaW5zcGVjdG9yVmlldy5jdXJyZW50UGFuZWwoKSAmJiBXZWJJbnNwZWN0b3IuaW5zcGVjdG9yVmlldy5jdXJyZW50UGFuZWwoKS5oYW5kbGVDb3B5RXZlbnQpCiAgICAgICAgV2ViSW5zcGVjdG9yLmluc3BlY3RvclZpZXcuY3VycmVudFBhbmVsKCkuaGFuZGxlQ29weUV2ZW50KGV2ZW50KTsKICAgIFdlYkluc3BlY3Rvci5kb2N1bWVudENvcHlFdmVudEZpcmVkKGV2ZW50KTsKfQoKV2ViSW5zcGVjdG9yLmRvY3VtZW50Q29weUV2ZW50RmlyZWQgPSBmdW5jdGlvbihldmVudCkKewp9CgpXZWJJbnNwZWN0b3IuY29udGV4dE1lbnVFdmVudEZpcmVkID0gZnVuY3Rpb24oZXZlbnQpCnsKICAgIGlmIChldmVudC5oYW5kbGVkIHx8IGV2ZW50LnRhcmdldC5oYXNTdHlsZUNsYXNzKCJwb3B1cC1nbGFzc3BhbmUiKSkKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwp9CgpXZWJJbnNwZWN0b3Iuc2hvd0NvbnNvbGUgPSBmdW5jdGlvbigpCnsKICAgIGlmIChXZWJJbnNwZWN0b3IuX3RvZ2dsZUNvbnNvbGVCdXR0b24gJiYgIVdlYkluc3BlY3Rvci5fdG9nZ2xlQ29uc29sZUJ1dHRvbi50b2dnbGVkKSB7CiAgICAgICAgaWYgKFdlYkluc3BlY3Rvci5kcmF3ZXIudmlzaWJsZSkKICAgICAgICAgICAgdGhpcy5fY2xvc2VQcmV2aW91c0RyYXdlclZpZXcoKTsKICAgICAgICBXZWJJbnNwZWN0b3IuX3RvZ2dsZUNvbnNvbGVCdXR0b25DbGlja2VkKCk7CiAgICB9Cn0KCldlYkluc3BlY3Rvci5zaG93UGFuZWwgPSBmdW5jdGlvbihwYW5lbCkKewogICAgcmV0dXJuIFdlYkluc3BlY3Rvci5pbnNwZWN0b3JWaWV3LnNob3dQYW5lbChwYW5lbCk7Cn0KCldlYkluc3BlY3Rvci5wYW5lbCA9IGZ1bmN0aW9uKHBhbmVsKQp7CiAgICByZXR1cm4gV2ViSW5zcGVjdG9yLmluc3BlY3RvclZpZXcucGFuZWwocGFuZWwpOwp9CgpXZWJJbnNwZWN0b3IuYnJpbmdUb0Zyb250ID0gZnVuY3Rpb24oKQp7CiAgICBJbnNwZWN0b3JGcm9udGVuZEhvc3QuYnJpbmdUb0Zyb250KCk7Cn0KCi8qKgogKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2VMZXZlbAogKiBAcGFyYW0ge2Jvb2xlYW49fSBzaG93Q29uc29sZQogKi8KV2ViSW5zcGVjdG9yLmxvZyA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG1lc3NhZ2VMZXZlbCwgc2hvd0NvbnNvbGUpCnsKICAgIC8vIHJlbWVtYmVyICd0aGlzJyBmb3Igc2V0SW50ZXJ2YWwoKSBjYWxsYmFjawogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIC8vIHJldHVybiBpbmRpY2F0aW9uIGlmIHdlIGNhbiBhY3R1YWxseSBsb2cgYSBtZXNzYWdlCiAgICBmdW5jdGlvbiBpc0xvZ0F2YWlsYWJsZSgpCiAgICB7CiAgICAgICAgcmV0dXJuIFdlYkluc3BlY3Rvci5Db25zb2xlTWVzc2FnZSAmJiBXZWJJbnNwZWN0b3IuUmVtb3RlT2JqZWN0ICYmIHNlbGYuY29uc29sZTsKICAgIH0KCiAgICAvLyBmbHVzaCB0aGUgcXVldWUgb2YgcGVuZGluZyBtZXNzYWdlcwogICAgZnVuY3Rpb24gZmx1c2hRdWV1ZSgpCiAgICB7CiAgICAgICAgdmFyIHF1ZXVlZCA9IFdlYkluc3BlY3Rvci5sb2cucXVldWVkOwogICAgICAgIGlmICghcXVldWVkKQogICAgICAgICAgICByZXR1cm47CgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWVkLmxlbmd0aDsgKytpKQogICAgICAgICAgICBsb2dNZXNzYWdlKHF1ZXVlZFtpXSk7CgogICAgICAgIGRlbGV0ZSBXZWJJbnNwZWN0b3IubG9nLnF1ZXVlZDsKICAgIH0KCiAgICAvLyBmbHVzaCB0aGUgcXVldWUgaWYgaXQgY29uc29sZSBpcyBhdmFpbGFibGUKICAgIC8vIC0gdGhpcyBmdW5jdGlvbiBpcyBydW4gb24gYW4gaW50ZXJ2YWwKICAgIGZ1bmN0aW9uIGZsdXNoUXVldWVJZkF2YWlsYWJsZSgpCiAgICB7CiAgICAgICAgaWYgKCFpc0xvZ0F2YWlsYWJsZSgpKQogICAgICAgICAgICByZXR1cm47CgogICAgICAgIGNsZWFySW50ZXJ2YWwoV2ViSW5zcGVjdG9yLmxvZy5pbnRlcnZhbCk7CiAgICAgICAgZGVsZXRlIFdlYkluc3BlY3Rvci5sb2cuaW50ZXJ2YWw7CgogICAgICAgIGZsdXNoUXVldWUoKTsKICAgIH0KCiAgICAvLyBhY3R1YWxseSBsb2cgdGhlIG1lc3NhZ2UKICAgIGZ1bmN0aW9uIGxvZ01lc3NhZ2UobWVzc2FnZSkKICAgIHsKICAgICAgICAvLyBwb3N0IHRoZSBtZXNzYWdlCiAgICAgICAgdmFyIG1zZyA9IFdlYkluc3BlY3Rvci5Db25zb2xlTWVzc2FnZS5jcmVhdGUoCiAgICAgICAgICAgIFdlYkluc3BlY3Rvci5Db25zb2xlTWVzc2FnZS5NZXNzYWdlU291cmNlLk90aGVyLAogICAgICAgICAgICBtZXNzYWdlTGV2ZWwgfHwgV2ViSW5zcGVjdG9yLkNvbnNvbGVNZXNzYWdlLk1lc3NhZ2VMZXZlbC5EZWJ1ZywKICAgICAgICAgICAgbWVzc2FnZSk7CgogICAgICAgIHNlbGYuY29uc29sZS5hZGRNZXNzYWdlKG1zZyk7CiAgICAgICAgaWYgKHNob3dDb25zb2xlKQogICAgICAgICAgICBXZWJJbnNwZWN0b3Iuc2hvd0NvbnNvbGUoKTsKICAgIH0KCiAgICAvLyBpZiB3ZSBjYW4ndCBsb2cgdGhlIG1lc3NhZ2UsIHF1ZXVlIGl0CiAgICBpZiAoIWlzTG9nQXZhaWxhYmxlKCkpIHsKICAgICAgICBpZiAoIVdlYkluc3BlY3Rvci5sb2cucXVldWVkKQogICAgICAgICAgICBXZWJJbnNwZWN0b3IubG9nLnF1ZXVlZCA9IFtdOwoKICAgICAgICBXZWJJbnNwZWN0b3IubG9nLnF1ZXVlZC5wdXNoKG1lc3NhZ2UpOwoKICAgICAgICBpZiAoIVdlYkluc3BlY3Rvci5sb2cuaW50ZXJ2YWwpCiAgICAgICAgICAgIFdlYkluc3BlY3Rvci5sb2cuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmbHVzaFF1ZXVlSWZBdmFpbGFibGUsIDEwMDApOwoKICAgICAgICByZXR1cm47CiAgICB9CgogICAgLy8gZmx1c2ggdGhlIHBlbmRpbmcgcXVldWUgaWYgYW55CiAgICBmbHVzaFF1ZXVlKCk7CgogICAgLy8gbG9nIHRoZSBtZXNzYWdlCiAgICBsb2dNZXNzYWdlKG1lc3NhZ2UpOwp9CgpXZWJJbnNwZWN0b3Iuc2hvd0Vycm9yTWVzc2FnZSA9IGZ1bmN0aW9uKGVycm9yKQp7CiAgICBXZWJJbnNwZWN0b3IubG9nKGVycm9yLCBXZWJJbnNwZWN0b3IuQ29uc29sZU1lc3NhZ2UuTWVzc2FnZUxldmVsLkVycm9yLCB0cnVlKTsKfQoKLy8gSW5zcGVjdG9yLmluc3BlY3QgcHJvdG9jb2wgZXZlbnQKV2ViSW5zcGVjdG9yLmluc3BlY3QgPSBmdW5jdGlvbihwYXlsb2FkLCBoaW50cykKewogICAgdmFyIG9iamVjdCA9IFdlYkluc3BlY3Rvci5SZW1vdGVPYmplY3QuZnJvbVBheWxvYWQocGF5bG9hZCk7CiAgICBpZiAob2JqZWN0LnN1YnR5cGUgPT09ICJub2RlIikgewogICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKG5vZGVJZCkKICAgICAgICB7CiAgICAgICAgICAgIFdlYkluc3BlY3Rvci5fdXBkYXRlRm9jdXNlZE5vZGUobm9kZUlkKTsKICAgICAgICAgICAgb2JqZWN0LnJlbGVhc2UoKTsKICAgICAgICB9CiAgICAgICAgb2JqZWN0LnB1c2hOb2RlVG9Gcm9udGVuZChjYWxsYmFjayk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChoaW50cy5kYXRhYmFzZUlkKQogICAgICAgIFdlYkluc3BlY3Rvci5zaG93UGFuZWwoInJlc291cmNlcyIpLnNlbGVjdERhdGFiYXNlKFdlYkluc3BlY3Rvci5kYXRhYmFzZU1vZGVsLmRhdGFiYXNlRm9ySWQoaGludHMuZGF0YWJhc2VJZCkpOwogICAgZWxzZSBpZiAoaGludHMuZG9tU3RvcmFnZUlkKQogICAgICAgIFdlYkluc3BlY3Rvci5zaG93UGFuZWwoInJlc291cmNlcyIpLnNlbGVjdERPTVN0b3JhZ2UoV2ViSW5zcGVjdG9yLmRvbVN0b3JhZ2VNb2RlbC5zdG9yYWdlRm9ySWQoaGludHMuZG9tU3RvcmFnZUlkKSk7CgogICAgb2JqZWN0LnJlbGVhc2UoKTsKfQoKLy8gSW5zcGVjdG9yLmRldGFjaGVkIHByb3RvY29sIGV2ZW50CldlYkluc3BlY3Rvci5kZXRhY2hlZCA9IGZ1bmN0aW9uKHJlYXNvbikKewogICAgV2ViSW5zcGVjdG9yLnNvY2tldC5fZGV0YWNoUmVhc29uID0gcmVhc29uOwogICAgKG5ldyBXZWJJbnNwZWN0b3IuUmVtb3RlRGVidWdnaW5nVGVybWluYXRlZFNjcmVlbihyZWFzb24pKS5zaG93TW9kYWwoKTsKfQoKV2ViSW5zcGVjdG9yLnRhcmdldENyYXNoZWQgPSBmdW5jdGlvbigpCnsKICAgIChuZXcgV2ViSW5zcGVjdG9yLkhlbHBTY3JlZW5VbnRpbFJlbG9hZCgKICAgICAgICBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIkluc3BlY3RlZCB0YXJnZXQgY3Jhc2hlZCIpLAogICAgICAgIFdlYkluc3BlY3Rvci5VSVN0cmluZygiSW5zcGVjdGVkIHRhcmdldCBoYXMgY3Jhc2hlZC4gT25jZSBpdCByZWxvYWRzIHdlIHdpbGwgYXR0YWNoIHRvIGl0IGF1dG9tYXRpY2FsbHkuIikpKS5zaG93TW9kYWwoKTsKfQoKV2ViSW5zcGVjdG9yLl91cGRhdGVGb2N1c2VkTm9kZSA9IGZ1bmN0aW9uKG5vZGVJZCkKewogICAgaWYgKFdlYkluc3BlY3Rvci5pbnNwZWN0RWxlbWVudE1vZGVDb250cm9sbGVyICYmIFdlYkluc3BlY3Rvci5pbnNwZWN0RWxlbWVudE1vZGVDb250cm9sbGVyLmVuYWJsZWQoKSkgewogICAgICAgIEluc3BlY3RvckZyb250ZW5kSG9zdC5icmluZ1RvRnJvbnQoKTsKICAgICAgICBXZWJJbnNwZWN0b3IuaW5zcGVjdEVsZW1lbnRNb2RlQ29udHJvbGxlci5kaXNhYmxlKCk7CiAgICB9CiAgICBXZWJJbnNwZWN0b3Iuc2hvd1BhbmVsKCJlbGVtZW50cyIpLnJldmVhbEFuZFNlbGVjdE5vZGUobm9kZUlkKTsKfQoKV2ViSW5zcGVjdG9yLl9zaG93QW5jaG9yTG9jYXRpb24gPSBmdW5jdGlvbihhbmNob3IpCnsKICAgIGlmIChXZWJJbnNwZWN0b3Iub3BlbkFuY2hvckxvY2F0aW9uUmVnaXN0cnkuZGlzcGF0Y2goeyB1cmw6IGFuY2hvci5ocmVmLCBsaW5lTnVtYmVyOiBhbmNob3IubGluZU51bWJlcn0pKQogICAgICAgIHJldHVybiB0cnVlOwogICAgdmFyIHByZWZlcnJlZFBhbmVsID0gdGhpcy5wYW5lbHNbYW5jaG9yLnByZWZlcnJlZFBhbmVsXTsKICAgIGlmIChwcmVmZXJyZWRQYW5lbCAmJiBXZWJJbnNwZWN0b3IuX3Nob3dBbmNob3JMb2NhdGlvbkluUGFuZWwoYW5jaG9yLCBwcmVmZXJyZWRQYW5lbCkpCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICBpZiAoV2ViSW5zcGVjdG9yLl9zaG93QW5jaG9yTG9jYXRpb25JblBhbmVsKGFuY2hvciwgdGhpcy5wYW5lbCgic2NyaXB0cyIpKSkKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIGlmIChXZWJJbnNwZWN0b3IuX3Nob3dBbmNob3JMb2NhdGlvbkluUGFuZWwoYW5jaG9yLCB0aGlzLnBhbmVsKCJyZXNvdXJjZXMiKSkpCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICBpZiAoV2ViSW5zcGVjdG9yLl9zaG93QW5jaG9yTG9jYXRpb25JblBhbmVsKGFuY2hvciwgdGhpcy5wYW5lbCgibmV0d29yayIpKSkKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIHJldHVybiBmYWxzZTsKfQoKV2ViSW5zcGVjdG9yLl9zaG93QW5jaG9yTG9jYXRpb25JblBhbmVsID0gZnVuY3Rpb24oYW5jaG9yLCBwYW5lbCkKewogICAgaWYgKCFwYW5lbCB8fCAhcGFuZWwuY2FuU2hvd0FuY2hvckxvY2F0aW9uKGFuY2hvcikpCiAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgIC8vIEZJWE1FOiBzdXBwb3J0IHdlYmtpdC1odG1sLWV4dGVybmFsLWxpbmsgbGlua3MgaGVyZS4KICAgIGlmIChhbmNob3IuaGFzU3R5bGVDbGFzcygid2Via2l0LWh0bWwtZXh0ZXJuYWwtbGluayIpKSB7CiAgICAgICAgYW5jaG9yLnJlbW92ZVN0eWxlQ2xhc3MoIndlYmtpdC1odG1sLWV4dGVybmFsLWxpbmsiKTsKICAgICAgICBhbmNob3IuYWRkU3R5bGVDbGFzcygid2Via2l0LWh0bWwtcmVzb3VyY2UtbGluayIpOwogICAgfQoKICAgIFdlYkluc3BlY3Rvci5pbnNwZWN0b3JWaWV3LnNob3dQYW5lbEZvckFuY2hvck5hdmlnYXRpb24ocGFuZWwpOwogICAgcGFuZWwuc2hvd0FuY2hvckxvY2F0aW9uKGFuY2hvcik7CiAgICByZXR1cm4gdHJ1ZTsKfQoKV2ViSW5zcGVjdG9yLmV2YWx1YXRlSW5Db25zb2xlID0gZnVuY3Rpb24oZXhwcmVzc2lvbiwgc2hvd1Jlc3VsdE9ubHkpCnsKICAgIHRoaXMuc2hvd0NvbnNvbGUoKTsKICAgIHRoaXMuY29uc29sZVZpZXcuZXZhbHVhdGVVc2luZ1RleHRQcm9tcHQoZXhwcmVzc2lvbiwgc2hvd1Jlc3VsdE9ubHkpOwp9CgpXZWJJbnNwZWN0b3IuYWRkTWFpbkV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24oZG9jKQp7CiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsIHRoaXMuZG9jdW1lbnRLZXlEb3duLmJpbmQodGhpcyksIHRydWUpOwogICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCB0aGlzLnBvc3REb2N1bWVudEtleURvd24uYmluZCh0aGlzKSwgZmFsc2UpOwogICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoImJlZm9yZWNvcHkiLCB0aGlzLmRvY3VtZW50Q2FuQ29weS5iaW5kKHRoaXMpLCB0cnVlKTsKICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCJjb3B5IiwgdGhpcy5kb2N1bWVudENvcHkuYmluZCh0aGlzKSwgZmFsc2UpOwogICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoImNvbnRleHRtZW51IiwgdGhpcy5jb250ZXh0TWVudUV2ZW50RmlyZWQuYmluZCh0aGlzKSwgdHJ1ZSk7CiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCB0aGlzLmRvY3VtZW50Q2xpY2suYmluZCh0aGlzKSwgdHJ1ZSk7Cn0KCldlYkluc3BlY3Rvci5ab29tID0gewogICAgVGFibGU6IFswLjI1LCAwLjMzLCAwLjUsIDAuNjYsIDAuNzUsIDAuOSwgMSwgMS4xLCAxLjI1LCAxLjUsIDEuNzUsIDIsIDIuNSwgMywgNCwgNV0sCiAgICBEZWZhdWx0T2Zmc2V0OiA2Cn0K",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 21:49:58 GMT",
                    "Content-Length": "41281",
                    "Date": "Fri, 07 Nov 2014 21:50:47 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}