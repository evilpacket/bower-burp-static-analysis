{
    "url": "http://localhost:9999/marcorinck/jquery-mobile-iscrollview/demo/source/javascripts/jquery.mobile-1.0.1.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>location.pathname</b> and written to <b>the 'href' property of a DOM element</b> via the following statement:<ul><li>base[ 0 ].href = href || location.pathname;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/marcorinck/jquery-mobile-iscrollview/demo/source/javascripts/jquery.mobile-1.0.1.js",
                "path": "/marcorinck/jquery-mobile-iscrollview/demo/source/javascripts/jquery.mobile-1.0.1.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9tYXJjb3JpbmNrL2pxdWVyeS1tb2JpbGUtaXNjcm9sbHZpZXcvZGVtby9zb3VyY2UvamF2YXNjcmlwdHMvanF1ZXJ5Lm1vYmlsZS0xLjAuMS5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyoKKiBqUXVlcnkgTW9iaWxlIEZyYW1ld29yayAxLjAuMQoqIGh0dHA6Ly9qcXVlcnltb2JpbGUuY29tCioKKiBDb3B5cmlnaHQgMjAxMS0yMDEyIChjKSBqUXVlcnkgUHJvamVjdAoqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgVmVyc2lvbiAyIGxpY2Vuc2VzLgoqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKKgoqLwovKiEKICogalF1ZXJ5IFVJIFdpZGdldCBAVkVSU0lPTgogKgogKiBDb3B5cmlnaHQgMjAxMCwgQVVUSE9SUy50eHQgKGh0dHA6Ly9qcXVlcnl1aS5jb20vYWJvdXQpCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgVmVyc2lvbiAyIGxpY2Vuc2VzLgogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlCiAqCiAqIGh0dHA6Ly9kb2NzLmpxdWVyeS5jb20vVUkvV2lkZ2V0CiAqLwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgovLyBqUXVlcnkgMS40KwppZiAoICQuY2xlYW5EYXRhICkgewoJdmFyIF9jbGVhbkRhdGEgPSAkLmNsZWFuRGF0YTsKCSQuY2xlYW5EYXRhID0gZnVuY3Rpb24oIGVsZW1zICkgewoJCWZvciAoIHZhciBpID0gMCwgZWxlbTsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkgewoJCQkkKCBlbGVtICkudHJpZ2dlckhhbmRsZXIoICJyZW1vdmUiICk7CgkJfQoJCV9jbGVhbkRhdGEoIGVsZW1zICk7Cgl9Owp9IGVsc2UgewoJdmFyIF9yZW1vdmUgPSAkLmZuLnJlbW92ZTsKCSQuZm4ucmVtb3ZlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBrZWVwRGF0YSApIHsKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQlpZiAoICFrZWVwRGF0YSApIHsKCQkJCWlmICggIXNlbGVjdG9yIHx8ICQuZmlsdGVyKCBzZWxlY3RvciwgWyB0aGlzIF0gKS5sZW5ndGggKSB7CgkJCQkJJCggIioiLCB0aGlzICkuYWRkKCBbIHRoaXMgXSApLmVhY2goZnVuY3Rpb24oKSB7CgkJCQkJCSQoIHRoaXMgKS50cmlnZ2VySGFuZGxlciggInJlbW92ZSIgKTsKCQkJCQl9KTsKCQkJCX0KCQkJfQoJCQlyZXR1cm4gX3JlbW92ZS5jYWxsKCAkKHRoaXMpLCBzZWxlY3Rvciwga2VlcERhdGEgKTsKCQl9KTsKCX07Cn0KCiQud2lkZ2V0ID0gZnVuY3Rpb24oIG5hbWUsIGJhc2UsIHByb3RvdHlwZSApIHsKCXZhciBuYW1lc3BhY2UgPSBuYW1lLnNwbGl0KCAiLiIgKVsgMCBdLAoJCWZ1bGxOYW1lOwoJbmFtZSA9IG5hbWUuc3BsaXQoICIuIiApWyAxIF07CglmdWxsTmFtZSA9IG5hbWVzcGFjZSArICItIiArIG5hbWU7CgoJaWYgKCAhcHJvdG90eXBlICkgewoJCXByb3RvdHlwZSA9IGJhc2U7CgkJYmFzZSA9ICQuV2lkZ2V0OwoJfQoKCS8vIGNyZWF0ZSBzZWxlY3RvciBmb3IgcGx1Z2luCgkkLmV4cHJbICI6IiBdWyBmdWxsTmFtZSBdID0gZnVuY3Rpb24oIGVsZW0gKSB7CgkJcmV0dXJuICEhJC5kYXRhKCBlbGVtLCBuYW1lICk7Cgl9OwoKCSRbIG5hbWVzcGFjZSBdID0gJFsgbmFtZXNwYWNlIF0gfHwge307CgkkWyBuYW1lc3BhY2UgXVsgbmFtZSBdID0gZnVuY3Rpb24oIG9wdGlvbnMsIGVsZW1lbnQgKSB7CgkJLy8gYWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IGluaXRpYWxpemluZyBmb3Igc2ltcGxlIGluaGVyaXRhbmNlCgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoICkgewoJCQl0aGlzLl9jcmVhdGVXaWRnZXQoIG9wdGlvbnMsIGVsZW1lbnQgKTsKCQl9Cgl9OwoKCXZhciBiYXNlUHJvdG90eXBlID0gbmV3IGJhc2UoKTsKCS8vIHdlIG5lZWQgdG8gbWFrZSB0aGUgb3B0aW9ucyBoYXNoIGEgcHJvcGVydHkgZGlyZWN0bHkgb24gdGhlIG5ldyBpbnN0YW5jZQoJLy8gb3RoZXJ3aXNlIHdlJ2xsIG1vZGlmeSB0aGUgb3B0aW9ucyBoYXNoIG9uIHRoZSBwcm90b3R5cGUgdGhhdCB3ZSdyZQoJLy8gaW5oZXJpdGluZyBmcm9tCi8vCSQuZWFjaCggYmFzZVByb3RvdHlwZSwgZnVuY3Rpb24oIGtleSwgdmFsICkgewovLwkJaWYgKCAkLmlzUGxhaW5PYmplY3QodmFsKSApIHsKLy8JCQliYXNlUHJvdG90eXBlWyBrZXkgXSA9ICQuZXh0ZW5kKCB7fSwgdmFsICk7Ci8vCQl9Ci8vCX0pOwoJYmFzZVByb3RvdHlwZS5vcHRpb25zID0gJC5leHRlbmQoIHRydWUsIHt9LCBiYXNlUHJvdG90eXBlLm9wdGlvbnMgKTsKCSRbIG5hbWVzcGFjZSBdWyBuYW1lIF0ucHJvdG90eXBlID0gJC5leHRlbmQoIHRydWUsIGJhc2VQcm90b3R5cGUsIHsKCQluYW1lc3BhY2U6IG5hbWVzcGFjZSwKCQl3aWRnZXROYW1lOiBuYW1lLAoJCXdpZGdldEV2ZW50UHJlZml4OiAkWyBuYW1lc3BhY2UgXVsgbmFtZSBdLnByb3RvdHlwZS53aWRnZXRFdmVudFByZWZpeCB8fCBuYW1lLAoJCXdpZGdldEJhc2VDbGFzczogZnVsbE5hbWUKCX0sIHByb3RvdHlwZSApOwoKCSQud2lkZ2V0LmJyaWRnZSggbmFtZSwgJFsgbmFtZXNwYWNlIF1bIG5hbWUgXSApOwp9OwoKJC53aWRnZXQuYnJpZGdlID0gZnVuY3Rpb24oIG5hbWUsIG9iamVjdCApIHsKCSQuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCXZhciBpc01ldGhvZENhbGwgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gInN0cmluZyIsCgkJCWFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICksCgkJCXJldHVyblZhbHVlID0gdGhpczsKCgkJLy8gYWxsb3cgbXVsdGlwbGUgaGFzaGVzIHRvIGJlIHBhc3NlZCBvbiBpbml0CgkJb3B0aW9ucyA9ICFpc01ldGhvZENhbGwgJiYgYXJncy5sZW5ndGggPwoJCQkkLmV4dGVuZC5hcHBseSggbnVsbCwgWyB0cnVlLCBvcHRpb25zIF0uY29uY2F0KGFyZ3MpICkgOgoJCQlvcHRpb25zOwoKCQkvLyBwcmV2ZW50IGNhbGxzIHRvIGludGVybmFsIG1ldGhvZHMKCQlpZiAoIGlzTWV0aG9kQ2FsbCAmJiBvcHRpb25zLmNoYXJBdCggMCApID09PSAiXyIgKSB7CgkJCXJldHVybiByZXR1cm5WYWx1ZTsKCQl9CgoJCWlmICggaXNNZXRob2RDYWxsICkgewoJCQl0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQl2YXIgaW5zdGFuY2UgPSAkLmRhdGEoIHRoaXMsIG5hbWUgKTsKCQkJCWlmICggIWluc3RhbmNlICkgewoJCQkJCXRocm93ICJjYW5ub3QgY2FsbCBtZXRob2RzIG9uICIgKyBuYW1lICsgIiBwcmlvciB0byBpbml0aWFsaXphdGlvbjsgIiArCgkJCQkJCSJhdHRlbXB0ZWQgdG8gY2FsbCBtZXRob2QgJyIgKyBvcHRpb25zICsgIiciOwoJCQkJfQoJCQkJaWYgKCAhJC5pc0Z1bmN0aW9uKCBpbnN0YW5jZVtvcHRpb25zXSApICkgewoJCQkJCXRocm93ICJubyBzdWNoIG1ldGhvZCAnIiArIG9wdGlvbnMgKyAiJyBmb3IgIiArIG5hbWUgKyAiIHdpZGdldCBpbnN0YW5jZSI7CgkJCQl9CgkJCQl2YXIgbWV0aG9kVmFsdWUgPSBpbnN0YW5jZVsgb3B0aW9ucyBdLmFwcGx5KCBpbnN0YW5jZSwgYXJncyApOwoJCQkJaWYgKCBtZXRob2RWYWx1ZSAhPT0gaW5zdGFuY2UgJiYgbWV0aG9kVmFsdWUgIT09IHVuZGVmaW5lZCApIHsKCQkJCQlyZXR1cm5WYWx1ZSA9IG1ldGhvZFZhbHVlOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfSk7CgkJfSBlbHNlIHsKCQkJdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdmFyIGluc3RhbmNlID0gJC5kYXRhKCB0aGlzLCBuYW1lICk7CgkJCQlpZiAoIGluc3RhbmNlICkgewoJCQkJCWluc3RhbmNlLm9wdGlvbiggb3B0aW9ucyB8fCB7fSApLl9pbml0KCk7CgkJCQl9IGVsc2UgewoJCQkJCSQuZGF0YSggdGhpcywgbmFtZSwgbmV3IG9iamVjdCggb3B0aW9ucywgdGhpcyApICk7CgkJCQl9CgkJCX0pOwoJCX0KCgkJcmV0dXJuIHJldHVyblZhbHVlOwoJfTsKfTsKCiQuV2lkZ2V0ID0gZnVuY3Rpb24oIG9wdGlvbnMsIGVsZW1lbnQgKSB7CgkvLyBhbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgaW5pdGlhbGl6aW5nIGZvciBzaW1wbGUgaW5oZXJpdGFuY2UKCWlmICggYXJndW1lbnRzLmxlbmd0aCApIHsKCQl0aGlzLl9jcmVhdGVXaWRnZXQoIG9wdGlvbnMsIGVsZW1lbnQgKTsKCX0KfTsKCiQuV2lkZ2V0LnByb3RvdHlwZSA9IHsKCXdpZGdldE5hbWU6ICJ3aWRnZXQiLAoJd2lkZ2V0RXZlbnRQcmVmaXg6ICIiLAoJb3B0aW9uczogewoJCWRpc2FibGVkOiBmYWxzZQoJfSwKCV9jcmVhdGVXaWRnZXQ6IGZ1bmN0aW9uKCBvcHRpb25zLCBlbGVtZW50ICkgewoJCS8vICQud2lkZ2V0LmJyaWRnZSBzdG9yZXMgdGhlIHBsdWdpbiBpbnN0YW5jZSwgYnV0IHdlIGRvIGl0IGFueXdheQoJCS8vIHNvIHRoYXQgaXQncyBzdG9yZWQgZXZlbiBiZWZvcmUgdGhlIF9jcmVhdGUgZnVuY3Rpb24gcnVucwoJCSQuZGF0YSggZWxlbWVudCwgdGhpcy53aWRnZXROYW1lLCB0aGlzICk7CgkJdGhpcy5lbGVtZW50ID0gJCggZWxlbWVudCApOwoJCXRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwKCQkJdGhpcy5vcHRpb25zLAoJCQl0aGlzLl9nZXRDcmVhdGVPcHRpb25zKCksCgkJCW9wdGlvbnMgKTsKCgkJdmFyIHNlbGYgPSB0aGlzOwoJCXRoaXMuZWxlbWVudC5iaW5kKCAicmVtb3ZlLiIgKyB0aGlzLndpZGdldE5hbWUsIGZ1bmN0aW9uKCkgewoJCQlzZWxmLmRlc3Ryb3koKTsKCQl9KTsKCgkJdGhpcy5fY3JlYXRlKCk7CgkJdGhpcy5fdHJpZ2dlciggImNyZWF0ZSIgKTsKCQl0aGlzLl9pbml0KCk7Cgl9LAoJX2dldENyZWF0ZU9wdGlvbnM6IGZ1bmN0aW9uKCkgewoJCXZhciBvcHRpb25zID0ge307CgkJaWYgKCAkLm1ldGFkYXRhICkgewoJCQlvcHRpb25zID0gJC5tZXRhZGF0YS5nZXQoIGVsZW1lbnQgKVsgdGhpcy53aWRnZXROYW1lIF07CgkJfQoJCXJldHVybiBvcHRpb25zOwoJfSwKCV9jcmVhdGU6IGZ1bmN0aW9uKCkge30sCglfaW5pdDogZnVuY3Rpb24oKSB7fSwKCglkZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQKCQkJLnVuYmluZCggIi4iICsgdGhpcy53aWRnZXROYW1lICkKCQkJLnJlbW92ZURhdGEoIHRoaXMud2lkZ2V0TmFtZSApOwoJCXRoaXMud2lkZ2V0KCkKCQkJLnVuYmluZCggIi4iICsgdGhpcy53aWRnZXROYW1lICkKCQkJLnJlbW92ZUF0dHIoICJhcmlhLWRpc2FibGVkIiApCgkJCS5yZW1vdmVDbGFzcygKCQkJCXRoaXMud2lkZ2V0QmFzZUNsYXNzICsgIi1kaXNhYmxlZCAiICsKCQkJCSJ1aS1zdGF0ZS1kaXNhYmxlZCIgKTsKCX0sCgoJd2lkZ2V0OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5lbGVtZW50OwoJfSwKCglvcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCXZhciBvcHRpb25zID0ga2V5OwoKCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDAgKSB7CgkJCS8vIGRvbid0IHJldHVybiBhIHJlZmVyZW5jZSB0byB0aGUgaW50ZXJuYWwgaGFzaAoJCQlyZXR1cm4gJC5leHRlbmQoIHt9LCB0aGlzLm9wdGlvbnMgKTsKCQl9CgoJCWlmICAodHlwZW9mIGtleSA9PT0gInN0cmluZyIgKSB7CgkJCWlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHsKCQkJCXJldHVybiB0aGlzLm9wdGlvbnNbIGtleSBdOwoJCQl9CgkJCW9wdGlvbnMgPSB7fTsKCQkJb3B0aW9uc1sga2V5IF0gPSB2YWx1ZTsKCQl9CgoJCXRoaXMuX3NldE9wdGlvbnMoIG9wdGlvbnMgKTsKCgkJcmV0dXJuIHRoaXM7Cgl9LAoJX3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCXZhciBzZWxmID0gdGhpczsKCQkkLmVhY2goIG9wdGlvbnMsIGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCQlzZWxmLl9zZXRPcHRpb24oIGtleSwgdmFsdWUgKTsKCQl9KTsKCgkJcmV0dXJuIHRoaXM7Cgl9LAoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJdGhpcy5vcHRpb25zWyBrZXkgXSA9IHZhbHVlOwoKCQlpZiAoIGtleSA9PT0gImRpc2FibGVkIiApIHsKCQkJdGhpcy53aWRnZXQoKQoJCQkJWyB2YWx1ZSA/ICJhZGRDbGFzcyIgOiAicmVtb3ZlQ2xhc3MiXSgKCQkJCQl0aGlzLndpZGdldEJhc2VDbGFzcyArICItZGlzYWJsZWQiICsgIiAiICsKCQkJCQkidWktc3RhdGUtZGlzYWJsZWQiICkKCQkJCS5hdHRyKCAiYXJpYS1kaXNhYmxlZCIsIHZhbHVlICk7CgkJfQoKCQlyZXR1cm4gdGhpczsKCX0sCgoJZW5hYmxlOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5fc2V0T3B0aW9uKCAiZGlzYWJsZWQiLCBmYWxzZSApOwoJfSwKCWRpc2FibGU6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLl9zZXRPcHRpb24oICJkaXNhYmxlZCIsIHRydWUgKTsKCX0sCgoJX3RyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgZGF0YSApIHsKCQl2YXIgY2FsbGJhY2sgPSB0aGlzLm9wdGlvbnNbIHR5cGUgXTsKCgkJZXZlbnQgPSAkLkV2ZW50KCBldmVudCApOwoJCWV2ZW50LnR5cGUgPSAoIHR5cGUgPT09IHRoaXMud2lkZ2V0RXZlbnRQcmVmaXggPwoJCQl0eXBlIDoKCQkJdGhpcy53aWRnZXRFdmVudFByZWZpeCArIHR5cGUgKS50b0xvd2VyQ2FzZSgpOwoJCWRhdGEgPSBkYXRhIHx8IHt9OwoKCQkvLyBjb3B5IG9yaWdpbmFsIGV2ZW50IHByb3BlcnRpZXMgb3ZlciB0byB0aGUgbmV3IGV2ZW50CgkJLy8gdGhpcyB3b3VsZCBoYXBwZW4gaWYgd2UgY291bGQgY2FsbCAkLmV2ZW50LmZpeCBpbnN0ZWFkIG9mICQuRXZlbnQKCQkvLyBidXQgd2UgZG9uJ3QgaGF2ZSBhIHdheSB0byBmb3JjZSBhbiBldmVudCB0byBiZSBmaXhlZCBtdWx0aXBsZSB0aW1lcwoJCWlmICggZXZlbnQub3JpZ2luYWxFdmVudCApIHsKCQkJZm9yICggdmFyIGkgPSAkLmV2ZW50LnByb3BzLmxlbmd0aCwgcHJvcDsgaTsgKSB7CgkJCQlwcm9wID0gJC5ldmVudC5wcm9wc1sgLS1pIF07CgkJCQlldmVudFsgcHJvcCBdID0gZXZlbnQub3JpZ2luYWxFdmVudFsgcHJvcCBdOwoJCQl9CgkJfQoKCQl0aGlzLmVsZW1lbnQudHJpZ2dlciggZXZlbnQsIGRhdGEgKTsKCgkJcmV0dXJuICEoICQuaXNGdW5jdGlvbihjYWxsYmFjaykgJiYKCQkJY2FsbGJhY2suY2FsbCggdGhpcy5lbGVtZW50WzBdLCBldmVudCwgZGF0YSApID09PSBmYWxzZSB8fAoJCQlldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApOwoJfQp9OwoKfSkoIGpRdWVyeSApOwovKgoqIHdpZGdldCBmYWN0b3J5IGV4dGVudGlvbnMgZm9yIG1vYmlsZQoqLwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS53aWRnZXQiLCB7CgkvLyBkZWNvcmF0ZSB0aGUgcGFyZW50IF9jcmVhdGVXaWRnZXQgdG8gdHJpZ2dlciBgd2lkZ2V0aW5pdGAgZm9yIHVzZXJzCgkvLyB3aG8gd2lzaCB0byBkbyBwb3N0IHBvc3QgYHdpZGdldGNyZWF0ZWAgYWx0ZXJhdGlvbnMvYWRkaXRpb25zCgkvLwoJLy8gVE9ETyBjcmVhdGUgYSBwdWxsIHJlcXVlc3QgZm9yIGpxdWVyeSB1aSB0byB0cmlnZ2VyIHRoaXMgZXZlbnQKCS8vIGluIHRoZSBvcmlnaW5hbCBfY3JlYXRlV2lkZ2V0CglfY3JlYXRlV2lkZ2V0OiBmdW5jdGlvbigpIHsKCQkkLldpZGdldC5wcm90b3R5cGUuX2NyZWF0ZVdpZGdldC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJdGhpcy5fdHJpZ2dlciggJ2luaXQnICk7Cgl9LAoKCV9nZXRDcmVhdGVPcHRpb25zOiBmdW5jdGlvbigpIHsKCgkJdmFyIGVsZW0gPSB0aGlzLmVsZW1lbnQsCgkJCW9wdGlvbnMgPSB7fTsKCgkJJC5lYWNoKCB0aGlzLm9wdGlvbnMsIGZ1bmN0aW9uKCBvcHRpb24gKSB7CgoJCQl2YXIgdmFsdWUgPSBlbGVtLmpxbURhdGEoIG9wdGlvbi5yZXBsYWNlKCAvW0EtWl0vZywgZnVuY3Rpb24oIGMgKSB7CgkJCQkJCQlyZXR1cm4gIi0iICsgYy50b0xvd2VyQ2FzZSgpOwoJCQkJCQl9KQoJCQkJCSk7CgoJCQlpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgkJCQlvcHRpb25zWyBvcHRpb24gXSA9IHZhbHVlOwoJCQl9CgkJfSk7CgoJCXJldHVybiBvcHRpb25zOwoJfSwKCgllbmhhbmNlV2l0aGluOiBmdW5jdGlvbiggdGFyZ2V0ICkgewoJCS8vIFRPRE8gcmVtb3ZlIGRlcGVuZGVuY3kgb24gdGhlIHBhZ2Ugd2lkZ2V0IGZvciB0aGUga2VlcE5hdGl2ZS4KCQkvLyBDdXJyZW50bHkgdGhlIGtlZXBOYXRpdmUgdmFsdWUgaXMgZGVmaW5lZCBvbiB0aGUgcGFnZSBwcm90b3R5cGUgc28KCQkvLyB0aGUgbWV0aG9kIGlzIGFzIHdlbGwKCQl2YXIgcGFnZSA9ICQubW9iaWxlLmNsb3Nlc3RQYWdlRGF0YSggJCh0YXJnZXQpICksCgkJCWtlZXBOYXRpdmUgPSAocGFnZSAmJiBwYWdlLmtlZXBOYXRpdmVTZWxlY3RvcigpKSB8fCAiIjsKCgkJJCggdGhpcy5vcHRpb25zLmluaXRTZWxlY3RvciwgdGFyZ2V0ICkubm90KCBrZWVwTmF0aXZlIClbIHRoaXMud2lkZ2V0TmFtZSBdKCk7Cgl9Cn0pOwoKfSkoIGpRdWVyeSApOwovKgoqIGEgd29ya2Fyb3VuZCBmb3Igd2luZG93Lm1hdGNoTWVkaWEKKi8KCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyICR3aW5kb3cgPSAkKCB3aW5kb3cgKSwKCSRodG1sID0gJCggImh0bWwiICk7CgovKiAkLm1vYmlsZS5tZWRpYSBtZXRob2Q6IHBhc3MgYSBDU1MgbWVkaWEgdHlwZSBvciBxdWVyeSBhbmQgZ2V0IGEgYm9vbCByZXR1cm4KCW5vdGU6IHRoaXMgZmVhdHVyZSByZWxpZXMgb24gYWN0dWFsIG1lZGlhIHF1ZXJ5IHN1cHBvcnQgZm9yIG1lZGlhIHF1ZXJpZXMsIHRob3VnaCB0eXBlcyB3aWxsIHdvcmsgbW9zdCBhbnl3aGVyZQoJZXhhbXBsZXM6CgkJJC5tb2JpbGUubWVkaWEoJ3NjcmVlbicpIC8vPj4gdGVzdHMgZm9yIHNjcmVlbiBtZWRpYSB0eXBlCgkJJC5tb2JpbGUubWVkaWEoJ3NjcmVlbiBhbmQgKG1pbi13aWR0aDogNDgwcHgpJykgLy8+PiB0ZXN0cyBmb3Igc2NyZWVuIG1lZGlhIHR5cGUgd2l0aCB3aW5kb3cgd2lkdGggPiA0ODBweAoJCSQubW9iaWxlLm1lZGlhKCdAbWVkaWEgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKScpIC8vPj4gdGVzdHMgZm9yIHdlYmtpdCAyeCBwaXhlbCByYXRpbyAoaVBob25lIDQpCiovCiQubW9iaWxlLm1lZGlhID0gKGZ1bmN0aW9uKCkgewoJLy8gVE9ETzogdXNlIHdpbmRvdy5tYXRjaE1lZGlhIG9uY2UgYXQgbGVhc3Qgb25lIFVBIGltcGxlbWVudHMgaXQKCXZhciBjYWNoZSA9IHt9LAoJCXRlc3REaXYgPSAkKCAiPGRpdiBpZD0nanF1ZXJ5LW1lZGlhdGVzdCc+IiApLAoJCWZha2VCb2R5ID0gJCggIjxib2R5PiIgKS5hcHBlbmQoIHRlc3REaXYgKTsKCglyZXR1cm4gZnVuY3Rpb24oIHF1ZXJ5ICkgewoJCWlmICggISggcXVlcnkgaW4gY2FjaGUgKSApIHsKCQkJdmFyIHN0eWxlQmxvY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAic3R5bGUiICksCgkJCQljc3NydWxlID0gIkBtZWRpYSAiICsgcXVlcnkgKyAiIHsgI2pxdWVyeS1tZWRpYXRlc3QgeyBwb3NpdGlvbjphYnNvbHV0ZTsgfSB9IjsKCgkJCS8vbXVzdCBzZXQgdHlwZSBmb3IgSUUhCgkJCXN0eWxlQmxvY2sudHlwZSA9ICJ0ZXh0L2NzcyI7CgoJCQlpZiAoIHN0eWxlQmxvY2suc3R5bGVTaGVldCAgKXsKCQkJCXN0eWxlQmxvY2suc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzcnVsZTsKCQkJfSBlbHNlIHsKCQkJCXN0eWxlQmxvY2suYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzc3J1bGUpICk7CgkJCX0KCgkJCSRodG1sLnByZXBlbmQoIGZha2VCb2R5ICkucHJlcGVuZCggc3R5bGVCbG9jayApOwoJCQljYWNoZVsgcXVlcnkgXSA9IHRlc3REaXYuY3NzKCAicG9zaXRpb24iICkgPT09ICJhYnNvbHV0ZSI7CgkJCWZha2VCb2R5LmFkZCggc3R5bGVCbG9jayApLnJlbW92ZSgpOwoJCX0KCQlyZXR1cm4gY2FjaGVbIHF1ZXJ5IF07Cgl9Owp9KSgpOwoKfSkoalF1ZXJ5KTsKLyoKKiBzdXBwb3J0IHRlc3RzCiovCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCnZhciBmYWtlQm9keSA9ICQoICI8Ym9keT4iICkucHJlcGVuZFRvKCAiaHRtbCIgKSwKCWZiQ1NTID0gZmFrZUJvZHlbIDAgXS5zdHlsZSwKCXZlbmRvcnMgPSBbICJXZWJraXQiLCAiTW96IiwgIk8iIF0sCgl3ZWJvcyA9ICJwYWxtR2V0UmVzb3VyY2UiIGluIHdpbmRvdywgLy9vbmx5IHVzZWQgdG8gcnVsZSBvdXQgc2Nyb2xsVG9wCglvcGVyYW1pbmkgPSB3aW5kb3cub3BlcmFtaW5pICYmICh7fSkudG9TdHJpbmcuY2FsbCggd2luZG93Lm9wZXJhbWluaSApID09PSAiW29iamVjdCBPcGVyYU1pbmldIiwKCWJiID0gd2luZG93LmJsYWNrYmVycnk7IC8vb25seSB1c2VkIHRvIHJ1bGUgb3V0IGJveCBzaGFkb3csIGFzIGl0J3MgZmlsbGVkIG9wYXF1ZSBvbiBCQgoKLy8gdGh4IE1vZGVybml6cgpmdW5jdGlvbiBwcm9wRXhpc3RzKCBwcm9wICkgewoJdmFyIHVjX3Byb3AgPSBwcm9wLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnN1YnN0ciggMSApLAoJCXByb3BzID0gKCBwcm9wICsgIiAiICsgdmVuZG9ycy5qb2luKCB1Y19wcm9wICsgIiAiICkgKyB1Y19wcm9wICkuc3BsaXQoICIgIiApOwoKCWZvciAoIHZhciB2IGluIHByb3BzICl7CgkJaWYgKCBmYkNTU1sgcHJvcHNbIHYgXSBdICE9PSB1bmRlZmluZWQgKSB7CgkJCXJldHVybiB0cnVlOwoJCX0KCX0KfQoKLy8gVGVzdCBmb3IgZHluYW1pYy11cGRhdGluZyBiYXNlIHRhZyBzdXBwb3J0ICggYWxsb3dzIHVzIHRvIGF2b2lkIGhyZWYsc3JjIGF0dHIgcmV3cml0aW5nICkKZnVuY3Rpb24gYmFzZVRhZ1Rlc3QoKSB7Cgl2YXIgZmF1eEJhc2UgPSBsb2NhdGlvbi5wcm90b2NvbCArICIvLyIgKyBsb2NhdGlvbi5ob3N0ICsgbG9jYXRpb24ucGF0aG5hbWUgKyAidWktZGlyLyIsCgkJYmFzZSA9ICQoICJoZWFkIGJhc2UiICksCgkJZmF1eEVsZSA9IG51bGwsCgkJaHJlZiA9ICIiLAoJCWxpbmssIHJlYmFzZTsKCglpZiAoICFiYXNlLmxlbmd0aCApIHsKCQliYXNlID0gZmF1eEVsZSA9ICQoICI8YmFzZT4iLCB7ICJocmVmIjogZmF1eEJhc2UgfSkuYXBwZW5kVG8oICJoZWFkIiApOwoJfSBlbHNlIHsKCQlocmVmID0gYmFzZS5hdHRyKCAiaHJlZiIgKTsKCX0KCglsaW5rID0gJCggIjxhIGhyZWY9J3Rlc3R1cmwnIC8+IiApLnByZXBlbmRUbyggZmFrZUJvZHkgKTsKCXJlYmFzZSA9IGxpbmtbIDAgXS5ocmVmOwoJYmFzZVsgMCBdLmhyZWYgPSBocmVmIHx8IGxvY2F0aW9uLnBhdGhuYW1lOwoKCWlmICggZmF1eEVsZSApIHsKCQlmYXV4RWxlLnJlbW92ZSgpOwoJfQoJcmV0dXJuIHJlYmFzZS5pbmRleE9mKCBmYXV4QmFzZSApID09PSAwOwp9CgoKLy8gbm9uLVVBLWJhc2VkIElFIHZlcnNpb24gY2hlY2sgYnkgSmFtZXMgUGFkb2xzZXksIG1vZGlmaWVkIGJ5IGpkYWx0b24gLSBmcm9tIGh0dHA6Ly9naXN0LmdpdGh1Yi5jb20vNTI3NjgzCi8vIGFsbG93cyBmb3IgaW5jbHVzaW9uIG9mIElFIDYrLCBpbmNsdWRpbmcgV2luZG93cyBNb2JpbGUgNwokLm1vYmlsZS5icm93c2VyID0ge307CiQubW9iaWxlLmJyb3dzZXIuaWUgPSAoZnVuY3Rpb24oKSB7Cgl2YXIgdiA9IDMsCglkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApLAoJYSA9IGRpdi5hbGwgfHwgW107CgoJLy8gYWRkZWQge30gdG8gc2lsZW5jZSBjbG9zdXJlIGNvbXBpbGVyIHdhcm5pbmdzLiByZWdpc3RlcmluZyBteSBkaXNsaWtlIG9mIGFsbCB0aGluZ3MKCS8vIG92ZXJseSBjbGV2ZXIgaGVyZSBmb3IgZnV0dXJlIHJlZmVyZW5jZQoJd2hpbGUgKCBkaXYuaW5uZXJIVE1MID0gIjwhLS1baWYgZ3QgSUUgIiArICggKyt2ICkgKyAiXT48YnI+PCFbZW5kaWZdLS0+IiwgYVsgMCBdICl7fTsKCglyZXR1cm4gdiA+IDQgPyB2IDogIXY7Cn0pKCk7CgoKJC5leHRlbmQoICQuc3VwcG9ydCwgewoJb3JpZW50YXRpb246ICJvcmllbnRhdGlvbiIgaW4gd2luZG93ICYmICJvbm9yaWVudGF0aW9uY2hhbmdlIiBpbiB3aW5kb3csCgl0b3VjaDogIm9udG91Y2hlbmQiIGluIGRvY3VtZW50LAoJY3NzVHJhbnNpdGlvbnM6ICJXZWJLaXRUcmFuc2l0aW9uRXZlbnQiIGluIHdpbmRvdywKCXB1c2hTdGF0ZTogInB1c2hTdGF0ZSIgaW4gaGlzdG9yeSAmJiAicmVwbGFjZVN0YXRlIiBpbiBoaXN0b3J5LAoJbWVkaWFxdWVyeTogJC5tb2JpbGUubWVkaWEoICJvbmx5IGFsbCIgKSwKCWNzc1BzZXVkb0VsZW1lbnQ6ICEhcHJvcEV4aXN0cyggImNvbnRlbnQiICksCgl0b3VjaE92ZXJmbG93OiAhIXByb3BFeGlzdHMoICJvdmVyZmxvd1Njcm9sbGluZyIgKSwKCWJveFNoYWRvdzogISFwcm9wRXhpc3RzKCAiYm94U2hhZG93IiApICYmICFiYiwKCXNjcm9sbFRvcDogKCAicGFnZVhPZmZzZXQiIGluIHdpbmRvdyB8fCAic2Nyb2xsVG9wIiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgInNjcm9sbFRvcCIgaW4gZmFrZUJvZHlbIDAgXSApICYmICF3ZWJvcyAmJiAhb3BlcmFtaW5pLAoJZHluYW1pY0Jhc2VUYWc6IGJhc2VUYWdUZXN0KCkKfSk7CgpmYWtlQm9keS5yZW1vdmUoKTsKCgovLyAkLm1vYmlsZS5hamF4QmxhY2tsaXN0IGlzIHVzZWQgdG8gb3ZlcnJpZGUgYWpheEVuYWJsZWQgb24gcGxhdGZvcm1zIHRoYXQgaGF2ZSBrbm93biBjb25mbGljdHMgd2l0aCBoYXNoIGhpc3RvcnkgdXBkYXRlcyAoQkI1LCBTeW1iaWFuKQovLyBvciB0aGF0IGdlbmVyYWxseSB3b3JrIGJldHRlciBicm93c2luZyBpbiByZWd1bGFyIGh0dHAgZm9yIGZ1bGwgcGFnZSByZWZyZXNoZXMgKE9wZXJhIE1pbmkpCi8vIE5vdGU6IFRoaXMgZGV0ZWN0aW9uIGJlbG93IGlzIHVzZWQgYXMgYSBsYXN0IHJlc29ydC4KLy8gV2UgcmVjb21tZW5kIG9ubHkgdXNpbmcgdGhlc2UgZGV0ZWN0aW9uIG1ldGhvZHMgd2hlbiBhbGwgb3RoZXIgbW9yZSByZWxpYWJsZS9mb3J3YXJkLWxvb2tpbmcgYXBwcm9hY2hlcyBhcmUgbm90IHBvc3NpYmxlCnZhciBub2tpYUxURTdfMyA9IChmdW5jdGlvbigpewoKCXZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50OwoKCS8vVGhlIGZvbGxvd2luZyBpcyBhbiBhdHRlbXB0IHRvIG1hdGNoIE5va2lhIGJyb3dzZXJzIHRoYXQgYXJlIHJ1bm5pbmcgU3ltYmlhbi9zNjAsIHdpdGggd2Via2l0LCB2ZXJzaW9uIDcuMyBvciBvbGRlcgoJcmV0dXJuIHVhLmluZGV4T2YoICJOb2tpYSIgKSA+IC0xICYmCgkJCSggdWEuaW5kZXhPZiggIlN5bWJpYW4vMyIgKSA+IC0xIHx8IHVhLmluZGV4T2YoICJTZXJpZXM2MC81IiApID4gLTEgKSAmJgoJCQl1YS5pbmRleE9mKCAiQXBwbGVXZWJLaXQiICkgPiAtMSAmJgoJCQl1YS5tYXRjaCggLyhCcm93c2VyTkd8Tm9raWFCcm93c2VyKVwvN1wuWzAtM10vICk7Cn0pKCk7CgokLm1vYmlsZS5hamF4QmxhY2tsaXN0ID0KCQkJLy8gQmxhY2tCZXJyeSBicm93c2VycywgcHJlLXdlYmtpdAoJCQl3aW5kb3cuYmxhY2tiZXJyeSAmJiAhd2luZG93LldlYktpdFBvaW50IHx8CgkJCS8vIE9wZXJhIE1pbmkKCQkJb3BlcmFtaW5pIHx8CgkJCS8vIFN5bWJpYW4gd2Via2l0cyBwcmUgNy4zCgkJCW5va2lhTFRFN18zOwoKLy8gTGFzdGx5LCB0aGlzIHdvcmthcm91bmQgaXMgdGhlIG9ubHkgd2F5IHdlJ3ZlIGZvdW5kIHNvIGZhciB0byBnZXQgcHJlIDcuMyBTeW1iaWFuIHdlYmtpdCBkZXZpY2VzCi8vIHRvIHJlbmRlciB0aGUgc3R5bGVzaGVldHMgd2hlbiB0aGV5J3JlIHJlZmVyZW5jZWQgYmVmb3JlIHRoaXMgc2NyaXB0LCBhcyB3ZSdkIHJlY29tbWVuZCBkb2luZy4KLy8gVGhpcyBzaW1wbHkgcmVhcHBlbmRzIHRoZSBDU1MgaW4gcGxhY2UsIHdoaWNoIGZvciBzb21lIHJlYXNvbiBtYWtlcyBpdCBhcHBseQppZiAoIG5va2lhTFRFN18zICkgewoJJChmdW5jdGlvbigpIHsKCQkkKCAiaGVhZCBsaW5rW3JlbD0nc3R5bGVzaGVldCddIiApLmF0dHIoICJyZWwiLCAiYWx0ZXJuYXRlIHN0eWxlc2hlZXQiICkuYXR0ciggInJlbCIsICJzdHlsZXNoZWV0IiApOwoJfSk7Cn0KCi8vIEZvciBydWxpbmcgb3V0IHNoYWRvd3MgdmlhIGNzcwppZiAoICEkLnN1cHBvcnQuYm94U2hhZG93ICkgewoJJCggImh0bWwiICkuYWRkQ2xhc3MoICJ1aS1tb2JpbGUtbm9zdXBwb3J0LWJveHNoYWRvdyIgKTsKfQoKfSkoIGpRdWVyeSApOwovKgoqICJtb3VzZSIgcGx1Z2luCiovCgovLyBUaGlzIHBsdWdpbiBpcyBhbiBleHBlcmltZW50IGZvciBhYnN0cmFjdGluZyBhd2F5IHRoZSB0b3VjaCBhbmQgbW91c2UKLy8gZXZlbnRzIHNvIHRoYXQgZGV2ZWxvcGVycyBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IHdoaWNoIG1ldGhvZCBvZiBpbnB1dAovLyB0aGUgZGV2aWNlIHRoZWlyIGRvY3VtZW50IGlzIGxvYWRlZCBvbiBzdXBwb3J0cy4KLy8KLy8gVGhlIGlkZWEgaGVyZSBpcyB0byBhbGxvdyB0aGUgZGV2ZWxvcGVyIHRvIHJlZ2lzdGVyIGxpc3RlbmVycyBmb3IgdGhlCi8vIGJhc2ljIG1vdXNlIGV2ZW50cywgc3VjaCBhcyBtb3VzZWRvd24sIG1vdXNlbW92ZSwgbW91c2V1cCwgYW5kIGNsaWNrLAovLyBhbmQgdGhlIHBsdWdpbiB3aWxsIHRha2UgY2FyZSBvZiByZWdpc3RlcmluZyB0aGUgY29ycmVjdCBsaXN0ZW5lcnMKLy8gYmVoaW5kIHRoZSBzY2VuZXMgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciBhdCB0aGUgZmFzdGVzdCBwb3NzaWJsZSB0aW1lCi8vIGZvciB0aGF0IGRldmljZSwgd2hpbGUgc3RpbGwgcmV0YWluaW5nIHRoZSBvcmRlciBvZiBldmVudCBmaXJpbmcgaW4KLy8gdGhlIHRyYWRpdGlvbmFsIG1vdXNlIGVudmlyb25tZW50LCBzaG91bGQgbXVsdGlwbGUgaGFuZGxlcnMgYmUgcmVnaXN0ZXJlZAovLyBvbiB0aGUgc2FtZSBlbGVtZW50IGZvciBkaWZmZXJlbnQgZXZlbnRzLgovLwovLyBUaGUgY3VycmVudCB2ZXJzaW9uIGV4cG9zZXMgdGhlIGZvbGxvd2luZyB2aXJ0dWFsIGV2ZW50cyB0byBqUXVlcnkgYmluZCBtZXRob2RzOgovLyAidm1vdXNlb3ZlciB2bW91c2Vkb3duIHZtb3VzZW1vdmUgdm1vdXNldXAgdmNsaWNrIHZtb3VzZW91dCB2bW91c2VjYW5jZWwiCgooZnVuY3Rpb24oICQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCApIHsKCnZhciBkYXRhUHJvcGVydHlOYW1lID0gInZpcnR1YWxNb3VzZUJpbmRpbmdzIiwKCXRvdWNoVGFyZ2V0UHJvcGVydHlOYW1lID0gInZpcnR1YWxUb3VjaElEIiwKCXZpcnR1YWxFdmVudE5hbWVzID0gInZtb3VzZW92ZXIgdm1vdXNlZG93biB2bW91c2Vtb3ZlIHZtb3VzZXVwIHZjbGljayB2bW91c2VvdXQgdm1vdXNlY2FuY2VsIi5zcGxpdCggIiAiICksCgl0b3VjaEV2ZW50UHJvcHMgPSAiY2xpZW50WCBjbGllbnRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSIuc3BsaXQoICIgIiApLAoJYWN0aXZlRG9jSGFuZGxlcnMgPSB7fSwKCXJlc2V0VGltZXJJRCA9IDAsCglzdGFydFggPSAwLAoJc3RhcnRZID0gMCwKCWRpZFNjcm9sbCA9IGZhbHNlLAoJY2xpY2tCbG9ja0xpc3QgPSBbXSwKCWJsb2NrTW91c2VUcmlnZ2VycyA9IGZhbHNlLAoJYmxvY2tUb3VjaFRyaWdnZXJzID0gZmFsc2UsCglldmVudENhcHR1cmVTdXBwb3J0ZWQgPSAiYWRkRXZlbnRMaXN0ZW5lciIgaW4gZG9jdW1lbnQsCgkkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApLAoJbmV4dFRvdWNoSUQgPSAxLAoJbGFzdFRvdWNoSUQgPSAwOwoKJC52bW91c2UgPSB7Cgltb3ZlRGlzdGFuY2VUaHJlc2hvbGQ6IDEwLAoJY2xpY2tEaXN0YW5jZVRocmVzaG9sZDogMTAsCglyZXNldFRpbWVyRHVyYXRpb246IDE1MDAKfTsKCmZ1bmN0aW9uIGdldE5hdGl2ZUV2ZW50KCBldmVudCApIHsKCgl3aGlsZSAoIGV2ZW50ICYmIHR5cGVvZiBldmVudC5vcmlnaW5hbEV2ZW50ICE9PSAidW5kZWZpbmVkIiApIHsKCQlldmVudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQ7Cgl9CglyZXR1cm4gZXZlbnQ7Cn0KCmZ1bmN0aW9uIGNyZWF0ZVZpcnR1YWxFdmVudCggZXZlbnQsIGV2ZW50VHlwZSApIHsKCgl2YXIgdCA9IGV2ZW50LnR5cGUsCgkJb2UsIHByb3BzLCBuZSwgcHJvcCwgY3QsIHRvdWNoLCBpLCBqOwoKCWV2ZW50ID0gJC5FdmVudChldmVudCk7CglldmVudC50eXBlID0gZXZlbnRUeXBlOwoKCW9lID0gZXZlbnQub3JpZ2luYWxFdmVudDsKCXByb3BzID0gJC5ldmVudC5wcm9wczsKCgkvLyBjb3B5IG9yaWdpbmFsIGV2ZW50IHByb3BlcnRpZXMgb3ZlciB0byB0aGUgbmV3IGV2ZW50CgkvLyB0aGlzIHdvdWxkIGhhcHBlbiBpZiB3ZSBjb3VsZCBjYWxsICQuZXZlbnQuZml4IGluc3RlYWQgb2YgJC5FdmVudAoJLy8gYnV0IHdlIGRvbid0IGhhdmUgYSB3YXkgdG8gZm9yY2UgYW4gZXZlbnQgdG8gYmUgZml4ZWQgbXVsdGlwbGUgdGltZXMKCWlmICggb2UgKSB7CgkJZm9yICggaSA9IHByb3BzLmxlbmd0aCwgcHJvcDsgaTsgKSB7CgkJCXByb3AgPSBwcm9wc1sgLS1pIF07CgkJCWV2ZW50WyBwcm9wIF0gPSBvZVsgcHJvcCBdOwoJCX0KCX0KCgkvLyBtYWtlIHN1cmUgdGhhdCBpZiB0aGUgbW91c2UgYW5kIGNsaWNrIHZpcnR1YWwgZXZlbnRzIGFyZSBnZW5lcmF0ZWQKCS8vIHdpdGhvdXQgYSAud2hpY2ggb25lIGlzIGRlZmluZWQKCWlmICggdC5zZWFyY2goL21vdXNlKGRvd258dXApfGNsaWNrLykgPiAtMSAmJiAhZXZlbnQud2hpY2ggKXsKCQlldmVudC53aGljaCA9IDE7Cgl9CgoJaWYgKCB0LnNlYXJjaCgvXnRvdWNoLykgIT09IC0xICkgewoJCW5lID0gZ2V0TmF0aXZlRXZlbnQoIG9lICk7CgkJdCA9IG5lLnRvdWNoZXM7CgkJY3QgPSBuZS5jaGFuZ2VkVG91Y2hlczsKCQl0b3VjaCA9ICggdCAmJiB0Lmxlbmd0aCApID8gdFswXSA6ICggKGN0ICYmIGN0Lmxlbmd0aCkgPyBjdFsgMCBdIDogdW5kZWZpbmVkICk7CgoJCWlmICggdG91Y2ggKSB7CgkJCWZvciAoIGogPSAwLCBsZW4gPSB0b3VjaEV2ZW50UHJvcHMubGVuZ3RoOyBqIDwgbGVuOyBqKyspewoJCQkJcHJvcCA9IHRvdWNoRXZlbnRQcm9wc1sgaiBdOwoJCQkJZXZlbnRbIHByb3AgXSA9IHRvdWNoWyBwcm9wIF07CgkJCX0KCQl9Cgl9CgoJcmV0dXJuIGV2ZW50Owp9CgpmdW5jdGlvbiBnZXRWaXJ0dWFsQmluZGluZ0ZsYWdzKCBlbGVtZW50ICkgewoKCXZhciBmbGFncyA9IHt9LAoJCWIsIGs7CgoJd2hpbGUgKCBlbGVtZW50ICkgewoKCQliID0gJC5kYXRhKCBlbGVtZW50LCBkYXRhUHJvcGVydHlOYW1lICk7CgoJCWZvciAoICBrIGluIGIgKSB7CgkJCWlmICggYlsgayBdICkgewoJCQkJZmxhZ3NbIGsgXSA9IGZsYWdzLmhhc1ZpcnR1YWxCaW5kaW5nID0gdHJ1ZTsKCQkJfQoJCX0KCQllbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwoJfQoJcmV0dXJuIGZsYWdzOwp9CgpmdW5jdGlvbiBnZXRDbG9zZXN0RWxlbWVudFdpdGhWaXJ0dWFsQmluZGluZyggZWxlbWVudCwgZXZlbnRUeXBlICkgewoJdmFyIGI7Cgl3aGlsZSAoIGVsZW1lbnQgKSB7CgoJCWIgPSAkLmRhdGEoIGVsZW1lbnQsIGRhdGFQcm9wZXJ0eU5hbWUgKTsKCgkJaWYgKCBiICYmICggIWV2ZW50VHlwZSB8fCBiWyBldmVudFR5cGUgXSApICkgewoJCQlyZXR1cm4gZWxlbWVudDsKCQl9CgkJZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKCX0KCXJldHVybiBudWxsOwp9CgpmdW5jdGlvbiBlbmFibGVUb3VjaEJpbmRpbmdzKCkgewoJYmxvY2tUb3VjaFRyaWdnZXJzID0gZmFsc2U7Cn0KCmZ1bmN0aW9uIGRpc2FibGVUb3VjaEJpbmRpbmdzKCkgewoJYmxvY2tUb3VjaFRyaWdnZXJzID0gdHJ1ZTsKfQoKZnVuY3Rpb24gZW5hYmxlTW91c2VCaW5kaW5ncygpIHsKCWxhc3RUb3VjaElEID0gMDsKCWNsaWNrQmxvY2tMaXN0Lmxlbmd0aCA9IDA7CglibG9ja01vdXNlVHJpZ2dlcnMgPSBmYWxzZTsKCgkvLyBXaGVuIG1vdXNlIGJpbmRpbmdzIGFyZSBlbmFibGVkLCBvdXIKCS8vIHRvdWNoIGJpbmRpbmdzIGFyZSBkaXNhYmxlZC4KCWRpc2FibGVUb3VjaEJpbmRpbmdzKCk7Cn0KCmZ1bmN0aW9uIGRpc2FibGVNb3VzZUJpbmRpbmdzKCkgewoJLy8gV2hlbiBtb3VzZSBiaW5kaW5ncyBhcmUgZGlzYWJsZWQsIG91cgoJLy8gdG91Y2ggYmluZGluZ3MgYXJlIGVuYWJsZWQuCgllbmFibGVUb3VjaEJpbmRpbmdzKCk7Cn0KCmZ1bmN0aW9uIHN0YXJ0UmVzZXRUaW1lcigpIHsKCWNsZWFyUmVzZXRUaW1lcigpOwoJcmVzZXRUaW1lcklEID0gc2V0VGltZW91dChmdW5jdGlvbigpewoJCXJlc2V0VGltZXJJRCA9IDA7CgkJZW5hYmxlTW91c2VCaW5kaW5ncygpOwoJfSwgJC52bW91c2UucmVzZXRUaW1lckR1cmF0aW9uICk7Cn0KCmZ1bmN0aW9uIGNsZWFyUmVzZXRUaW1lcigpIHsKCWlmICggcmVzZXRUaW1lcklEICl7CgkJY2xlYXJUaW1lb3V0KCByZXNldFRpbWVySUQgKTsKCQlyZXNldFRpbWVySUQgPSAwOwoJfQp9CgpmdW5jdGlvbiB0cmlnZ2VyVmlydHVhbEV2ZW50KCBldmVudFR5cGUsIGV2ZW50LCBmbGFncyApIHsKCXZhciB2ZTsKCglpZiAoICggZmxhZ3MgJiYgZmxhZ3NbIGV2ZW50VHlwZSBdICkgfHwKCQkJCSggIWZsYWdzICYmIGdldENsb3Nlc3RFbGVtZW50V2l0aFZpcnR1YWxCaW5kaW5nKCBldmVudC50YXJnZXQsIGV2ZW50VHlwZSApICkgKSB7CgoJCXZlID0gY3JlYXRlVmlydHVhbEV2ZW50KCBldmVudCwgZXZlbnRUeXBlICk7CgoJCSQoIGV2ZW50LnRhcmdldCkudHJpZ2dlciggdmUgKTsKCX0KCglyZXR1cm4gdmU7Cn0KCmZ1bmN0aW9uIG1vdXNlRXZlbnRDYWxsYmFjayggZXZlbnQgKSB7Cgl2YXIgdG91Y2hJRCA9ICQuZGF0YShldmVudC50YXJnZXQsIHRvdWNoVGFyZ2V0UHJvcGVydHlOYW1lKTsKCglpZiAoICFibG9ja01vdXNlVHJpZ2dlcnMgJiYgKCAhbGFzdFRvdWNoSUQgfHwgbGFzdFRvdWNoSUQgIT09IHRvdWNoSUQgKSApewoJCXZhciB2ZSA9IHRyaWdnZXJWaXJ0dWFsRXZlbnQoICJ2IiArIGV2ZW50LnR5cGUsIGV2ZW50ICk7CgkJaWYgKCB2ZSApIHsKCQkJaWYgKCB2ZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHsKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCX0KCQkJaWYgKCB2ZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkgewoJCQkJZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CgkJCX0KCQkJaWYgKCB2ZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkgewoJCQkJZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CgkJCX0KCQl9Cgl9Cn0KCmZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnQoIGV2ZW50ICkgewoKCXZhciB0b3VjaGVzID0gZ2V0TmF0aXZlRXZlbnQoIGV2ZW50ICkudG91Y2hlcywKCQl0YXJnZXQsIGZsYWdzOwoKCWlmICggdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA9PT0gMSApIHsKCgkJdGFyZ2V0ID0gZXZlbnQudGFyZ2V0OwoJCWZsYWdzID0gZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggdGFyZ2V0ICk7CgoJCWlmICggZmxhZ3MuaGFzVmlydHVhbEJpbmRpbmcgKSB7CgoJCQlsYXN0VG91Y2hJRCA9IG5leHRUb3VjaElEKys7CgkJCSQuZGF0YSggdGFyZ2V0LCB0b3VjaFRhcmdldFByb3BlcnR5TmFtZSwgbGFzdFRvdWNoSUQgKTsKCgkJCWNsZWFyUmVzZXRUaW1lcigpOwoKCQkJZGlzYWJsZU1vdXNlQmluZGluZ3MoKTsKCQkJZGlkU2Nyb2xsID0gZmFsc2U7CgoJCQl2YXIgdCA9IGdldE5hdGl2ZUV2ZW50KCBldmVudCApLnRvdWNoZXNbIDAgXTsKCQkJc3RhcnRYID0gdC5wYWdlWDsKCQkJc3RhcnRZID0gdC5wYWdlWTsKCgkJCXRyaWdnZXJWaXJ0dWFsRXZlbnQoICJ2bW91c2VvdmVyIiwgZXZlbnQsIGZsYWdzICk7CgkJCXRyaWdnZXJWaXJ0dWFsRXZlbnQoICJ2bW91c2Vkb3duIiwgZXZlbnQsIGZsYWdzICk7CgkJfQoJfQp9CgpmdW5jdGlvbiBoYW5kbGVTY3JvbGwoIGV2ZW50ICkgewoJaWYgKCBibG9ja1RvdWNoVHJpZ2dlcnMgKSB7CgkJcmV0dXJuOwoJfQoKCWlmICggIWRpZFNjcm9sbCApIHsKCQl0cmlnZ2VyVmlydHVhbEV2ZW50KCAidm1vdXNlY2FuY2VsIiwgZXZlbnQsIGdldFZpcnR1YWxCaW5kaW5nRmxhZ3MoIGV2ZW50LnRhcmdldCApICk7Cgl9CgoJZGlkU2Nyb2xsID0gdHJ1ZTsKCXN0YXJ0UmVzZXRUaW1lcigpOwp9CgpmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoIGV2ZW50ICkgewoJaWYgKCBibG9ja1RvdWNoVHJpZ2dlcnMgKSB7CgkJcmV0dXJuOwoJfQoKCXZhciB0ID0gZ2V0TmF0aXZlRXZlbnQoIGV2ZW50ICkudG91Y2hlc1sgMCBdLAoJCWRpZENhbmNlbCA9IGRpZFNjcm9sbCwKCQltb3ZlVGhyZXNob2xkID0gJC52bW91c2UubW92ZURpc3RhbmNlVGhyZXNob2xkOwoJCWRpZFNjcm9sbCA9IGRpZFNjcm9sbCB8fAoJCQkoIE1hdGguYWJzKHQucGFnZVggLSBzdGFydFgpID4gbW92ZVRocmVzaG9sZCB8fAoJCQkJTWF0aC5hYnModC5wYWdlWSAtIHN0YXJ0WSkgPiBtb3ZlVGhyZXNob2xkICksCgkJZmxhZ3MgPSBnZXRWaXJ0dWFsQmluZGluZ0ZsYWdzKCBldmVudC50YXJnZXQgKTsKCglpZiAoIGRpZFNjcm9sbCAmJiAhZGlkQ2FuY2VsICkgewoJCXRyaWdnZXJWaXJ0dWFsRXZlbnQoICJ2bW91c2VjYW5jZWwiLCBldmVudCwgZmxhZ3MgKTsKCX0KCgl0cmlnZ2VyVmlydHVhbEV2ZW50KCAidm1vdXNlbW92ZSIsIGV2ZW50LCBmbGFncyApOwoJc3RhcnRSZXNldFRpbWVyKCk7Cn0KCmZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKCBldmVudCApIHsKCWlmICggYmxvY2tUb3VjaFRyaWdnZXJzICkgewoJCXJldHVybjsKCX0KCglkaXNhYmxlVG91Y2hCaW5kaW5ncygpOwoKCXZhciBmbGFncyA9IGdldFZpcnR1YWxCaW5kaW5nRmxhZ3MoIGV2ZW50LnRhcmdldCApLAoJCXQ7Cgl0cmlnZ2VyVmlydHVhbEV2ZW50KCAidm1vdXNldXAiLCBldmVudCwgZmxhZ3MgKTsKCglpZiAoICFkaWRTY3JvbGwgKSB7CgkJdmFyIHZlID0gdHJpZ2dlclZpcnR1YWxFdmVudCggInZjbGljayIsIGV2ZW50LCBmbGFncyApOwoJCWlmICggdmUgJiYgdmUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgkJCS8vIFRoZSB0YXJnZXQgb2YgdGhlIG1vdXNlIGV2ZW50cyB0aGF0IGZvbGxvdyB0aGUgdG91Y2hlbmQKCQkJLy8gZXZlbnQgZG9uJ3QgbmVjZXNzYXJpbHkgbWF0Y2ggdGhlIHRhcmdldCB1c2VkIGR1cmluZyB0aGUKCQkJLy8gdG91Y2guIFRoaXMgbWVhbnMgd2UgbmVlZCB0byByZWx5IG9uIGNvb3JkaW5hdGVzIGZvciBibG9ja2luZwoJCQkvLyBhbnkgY2xpY2sgdGhhdCBpcyBnZW5lcmF0ZWQuCgkJCXQgPSBnZXROYXRpdmVFdmVudCggZXZlbnQgKS5jaGFuZ2VkVG91Y2hlc1sgMCBdOwoJCQljbGlja0Jsb2NrTGlzdC5wdXNoKHsKCQkJCXRvdWNoSUQ6IGxhc3RUb3VjaElELAoJCQkJeDogdC5jbGllbnRYLAoJCQkJeTogdC5jbGllbnRZCgkJCX0pOwoKCQkJLy8gUHJldmVudCBhbnkgbW91c2UgZXZlbnRzIHRoYXQgZm9sbG93IGZyb20gdHJpZ2dlcmluZwoJCQkvLyB2aXJ0dWFsIGV2ZW50IG5vdGlmaWNhdGlvbnMuCgkJCWJsb2NrTW91c2VUcmlnZ2VycyA9IHRydWU7CgkJfQoJfQoJdHJpZ2dlclZpcnR1YWxFdmVudCggInZtb3VzZW91dCIsIGV2ZW50LCBmbGFncyk7CglkaWRTY3JvbGwgPSBmYWxzZTsKCglzdGFydFJlc2V0VGltZXIoKTsKfQoKZnVuY3Rpb24gaGFzVmlydHVhbEJpbmRpbmdzKCBlbGUgKSB7Cgl2YXIgYmluZGluZ3MgPSAkLmRhdGEoIGVsZSwgZGF0YVByb3BlcnR5TmFtZSApLAoJCWs7CgoJaWYgKCBiaW5kaW5ncyApIHsKCQlmb3IgKCBrIGluIGJpbmRpbmdzICkgewoJCQlpZiAoIGJpbmRpbmdzWyBrIF0gKSB7CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoJCX0KCX0KCXJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gZHVtbXlNb3VzZUhhbmRsZXIoKXt9CgpmdW5jdGlvbiBnZXRTcGVjaWFsRXZlbnRPYmplY3QoIGV2ZW50VHlwZSApIHsKCXZhciByZWFsVHlwZSA9IGV2ZW50VHlwZS5zdWJzdHIoIDEgKTsKCglyZXR1cm4gewoJCXNldHVwOiBmdW5jdGlvbiggZGF0YSwgbmFtZXNwYWNlICkgewoJCQkvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCB2aXJ0dWFsIG1vdXNlIGJpbmRpbmcgZm9yIHRoaXMgZWxlbWVudCwKCQkJLy8gYWRkIGEgYmluZGluZ3Mgb2JqZWN0IHRvIGl0cyBkYXRhLgoKCQkJaWYgKCAhaGFzVmlydHVhbEJpbmRpbmdzKCB0aGlzICkgKSB7CgkJCQkkLmRhdGEoIHRoaXMsIGRhdGFQcm9wZXJ0eU5hbWUsIHt9KTsKCQkJfQoKCQkJLy8gSWYgc2V0dXAgaXMgY2FsbGVkLCB3ZSBrbm93IGl0IGlzIHRoZSBmaXJzdCBiaW5kaW5nIGZvciB0aGlzCgkJCS8vIGV2ZW50VHlwZSwgc28gaW5pdGlhbGl6ZSB0aGUgY291bnQgZm9yIHRoZSBldmVudFR5cGUgdG8gemVyby4KCQkJdmFyIGJpbmRpbmdzID0gJC5kYXRhKCB0aGlzLCBkYXRhUHJvcGVydHlOYW1lICk7CgkJCWJpbmRpbmdzWyBldmVudFR5cGUgXSA9IHRydWU7CgoJCQkvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCB2aXJ0dWFsIG1vdXNlIGV2ZW50IGZvciB0aGlzIHR5cGUsCgkJCS8vIHJlZ2lzdGVyIGEgZ2xvYmFsIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50LgoKCQkJYWN0aXZlRG9jSGFuZGxlcnNbIGV2ZW50VHlwZSBdID0gKCBhY3RpdmVEb2NIYW5kbGVyc1sgZXZlbnRUeXBlIF0gfHwgMCApICsgMTsKCgkJCWlmICggYWN0aXZlRG9jSGFuZGxlcnNbIGV2ZW50VHlwZSBdID09PSAxICkgewoJCQkJJGRvY3VtZW50LmJpbmQoIHJlYWxUeXBlLCBtb3VzZUV2ZW50Q2FsbGJhY2sgKTsKCQkJfQoKCQkJLy8gU29tZSBicm93c2VycywgbGlrZSBPcGVyYSBNaW5pLCB3b24ndCBkaXNwYXRjaCBtb3VzZS9jbGljayBldmVudHMKCQkJLy8gZm9yIGVsZW1lbnRzIHVubGVzcyB0aGV5IGFjdHVhbGx5IGhhdmUgaGFuZGxlcnMgcmVnaXN0ZXJlZCBvbiB0aGVtLgoJCQkvLyBUbyBnZXQgYXJvdW5kIHRoaXMsIHdlIHJlZ2lzdGVyIGR1bW15IGhhbmRsZXJzIG9uIHRoZSBlbGVtZW50cy4KCgkJCSQoIHRoaXMgKS5iaW5kKCByZWFsVHlwZSwgZHVtbXlNb3VzZUhhbmRsZXIgKTsKCgkJCS8vIEZvciBub3csIGlmIGV2ZW50IGNhcHR1cmUgaXMgbm90IHN1cHBvcnRlZCwgd2UgcmVseSBvbiBtb3VzZSBoYW5kbGVycy4KCQkJaWYgKCBldmVudENhcHR1cmVTdXBwb3J0ZWQgKSB7CgkJCQkvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCB2aXJ0dWFsIG1vdXNlIGJpbmRpbmcgZm9yIHRoZSBkb2N1bWVudCwKCQkJCS8vIHJlZ2lzdGVyIG91ciB0b3VjaHN0YXJ0IGhhbmRsZXIgb24gdGhlIGRvY3VtZW50LgoKCQkJCWFjdGl2ZURvY0hhbmRsZXJzWyAidG91Y2hzdGFydCIgXSA9ICggYWN0aXZlRG9jSGFuZGxlcnNbICJ0b3VjaHN0YXJ0IiBdIHx8IDApICsgMTsKCgkJCQlpZiAoYWN0aXZlRG9jSGFuZGxlcnNbICJ0b3VjaHN0YXJ0IiBdID09PSAxKSB7CgkJCQkJJGRvY3VtZW50LmJpbmQoICJ0b3VjaHN0YXJ0IiwgaGFuZGxlVG91Y2hTdGFydCApCgkJCQkJCS5iaW5kKCAidG91Y2hlbmQiLCBoYW5kbGVUb3VjaEVuZCApCgoJCQkJCQkvLyBPbiB0b3VjaCBwbGF0Zm9ybXMsIHRvdWNoaW5nIHRoZSBzY3JlZW4gYW5kIHRoZW4gZHJhZ2dpbmcgeW91ciBmaW5nZXIKCQkJCQkJLy8gY2F1c2VzIHRoZSB3aW5kb3cgY29udGVudCB0byBzY3JvbGwgYWZ0ZXIgc29tZSBkaXN0YW5jZSB0aHJlc2hvbGQgaXMKCQkJCQkJLy8gZXhjZWVkZWQuIE9uIHRoZXNlIHBsYXRmb3JtcywgYSBzY3JvbGwgcHJldmVudHMgYSBjbGljayBldmVudCBmcm9tIGJlaW5nCgkJCQkJCS8vIGRpc3BhdGNoZWQsIGFuZCBvbiBzb21lIHBsYXRmb3JtcywgZXZlbiB0aGUgdG91Y2hlbmQgaXMgc3VwcHJlc3NlZC4gVG8KCQkJCQkJLy8gbWltaWMgdGhlIHN1cHByZXNzaW9uIG9mIHRoZSBjbGljayBldmVudCwgd2UgbmVlZCB0byB3YXRjaCBmb3IgYSBzY3JvbGwKCQkJCQkJLy8gZXZlbnQuIFVuZm9ydHVuYXRlbHksIHNvbWUgcGxhdGZvcm1zIGxpa2UgaU9TIGRvbid0IGRpc3BhdGNoIHNjcm9sbAoJCQkJCQkvLyBldmVudHMgdW50aWwgKkFGVEVSKiB0aGUgdXNlciBsaWZ0cyB0aGVpciBmaW5nZXIgKHRvdWNoZW5kKS4gVGhpcyBtZWFucwoJCQkJCQkvLyB3ZSBuZWVkIHRvIHdhdGNoIGJvdGggc2Nyb2xsIGFuZCB0b3VjaG1vdmUgZXZlbnRzIHRvIGZpZ3VyZSBvdXQgd2hldGhlcgoJCQkJCQkvLyBvciBub3QgYSBzY3JvbGwgaGFwcGVuZW5zIGJlZm9yZSB0aGUgdG91Y2hlbmQgZXZlbnQgaXMgZmlyZWQuCgoJCQkJCQkuYmluZCggInRvdWNobW92ZSIsIGhhbmRsZVRvdWNoTW92ZSApCgkJCQkJCS5iaW5kKCAic2Nyb2xsIiwgaGFuZGxlU2Nyb2xsICk7CgkJCQl9CgkJCX0KCQl9LAoKCQl0ZWFyZG93bjogZnVuY3Rpb24oIGRhdGEsIG5hbWVzcGFjZSApIHsKCQkJLy8gSWYgdGhpcyBpcyB0aGUgbGFzdCB2aXJ0dWFsIGJpbmRpbmcgZm9yIHRoaXMgZXZlbnRUeXBlLAoJCQkvLyByZW1vdmUgaXRzIGdsb2JhbCBoYW5kbGVyIGZyb20gdGhlIGRvY3VtZW50LgoKCQkJLS1hY3RpdmVEb2NIYW5kbGVyc1sgZXZlbnRUeXBlIF07CgoJCQlpZiAoICFhY3RpdmVEb2NIYW5kbGVyc1sgZXZlbnRUeXBlIF0gKSB7CgkJCQkkZG9jdW1lbnQudW5iaW5kKCByZWFsVHlwZSwgbW91c2VFdmVudENhbGxiYWNrICk7CgkJCX0KCgkJCWlmICggZXZlbnRDYXB0dXJlU3VwcG9ydGVkICkgewoJCQkJLy8gSWYgdGhpcyBpcyB0aGUgbGFzdCB2aXJ0dWFsIG1vdXNlIGJpbmRpbmcgaW4gZXhpc3RlbmNlLAoJCQkJLy8gcmVtb3ZlIG91ciBkb2N1bWVudCB0b3VjaHN0YXJ0IGxpc3RlbmVyLgoKCQkJCS0tYWN0aXZlRG9jSGFuZGxlcnNbICJ0b3VjaHN0YXJ0IiBdOwoKCQkJCWlmICggIWFjdGl2ZURvY0hhbmRsZXJzWyAidG91Y2hzdGFydCIgXSApIHsKCQkJCQkkZG9jdW1lbnQudW5iaW5kKCAidG91Y2hzdGFydCIsIGhhbmRsZVRvdWNoU3RhcnQgKQoJCQkJCQkudW5iaW5kKCAidG91Y2htb3ZlIiwgaGFuZGxlVG91Y2hNb3ZlICkKCQkJCQkJLnVuYmluZCggInRvdWNoZW5kIiwgaGFuZGxlVG91Y2hFbmQgKQoJCQkJCQkudW5iaW5kKCAic2Nyb2xsIiwgaGFuZGxlU2Nyb2xsICk7CgkJCQl9CgkJCX0KCgkJCXZhciAkdGhpcyA9ICQoIHRoaXMgKSwKCQkJCWJpbmRpbmdzID0gJC5kYXRhKCB0aGlzLCBkYXRhUHJvcGVydHlOYW1lICk7CgoJCQkvLyB0ZWFyZG93biBtYXkgYmUgY2FsbGVkIHdoZW4gYW4gZWxlbWVudCB3YXMKCQkJLy8gcmVtb3ZlZCBmcm9tIHRoZSBET00uIElmIHRoaXMgaXMgdGhlIGNhc2UsCgkJCS8vIGpRdWVyeSBjb3JlIG1heSBoYXZlIGFscmVhZHkgc3RyaXBwZWQgdGhlIGVsZW1lbnQKCQkJLy8gb2YgYW55IGRhdGEgYmluZGluZ3Mgc28gd2UgbmVlZCB0byBjaGVjayBpdCBiZWZvcmUKCQkJLy8gdXNpbmcgaXQuCgkJCWlmICggYmluZGluZ3MgKSB7CgkJCQliaW5kaW5nc1sgZXZlbnRUeXBlIF0gPSBmYWxzZTsKCQkJfQoKCQkJLy8gVW5yZWdpc3RlciB0aGUgZHVtbXkgZXZlbnQgaGFuZGxlci4KCgkJCSR0aGlzLnVuYmluZCggcmVhbFR5cGUsIGR1bW15TW91c2VIYW5kbGVyICk7CgoJCQkvLyBJZiB0aGlzIGlzIHRoZSBsYXN0IHZpcnR1YWwgbW91c2UgYmluZGluZyBvbiB0aGUKCQkJLy8gZWxlbWVudCwgcmVtb3ZlIHRoZSBiaW5kaW5nIGRhdGEgZnJvbSB0aGUgZWxlbWVudC4KCgkJCWlmICggIWhhc1ZpcnR1YWxCaW5kaW5ncyggdGhpcyApICkgewoJCQkJJHRoaXMucmVtb3ZlRGF0YSggZGF0YVByb3BlcnR5TmFtZSApOwoJCQl9CgkJfQoJfTsKfQoKLy8gRXhwb3NlIG91ciBjdXN0b20gZXZlbnRzIHRvIHRoZSBqUXVlcnkgYmluZC91bmJpbmQgbWVjaGFuaXNtLgoKZm9yICggdmFyIGkgPSAwOyBpIDwgdmlydHVhbEV2ZW50TmFtZXMubGVuZ3RoOyBpKysgKXsKCSQuZXZlbnQuc3BlY2lhbFsgdmlydHVhbEV2ZW50TmFtZXNbIGkgXSBdID0gZ2V0U3BlY2lhbEV2ZW50T2JqZWN0KCB2aXJ0dWFsRXZlbnROYW1lc1sgaSBdICk7Cn0KCi8vIEFkZCBhIGNhcHR1cmUgY2xpY2sgaGFuZGxlciB0byBibG9jayBjbGlja3MuCi8vIE5vdGUgdGhhdCB3ZSByZXF1aXJlIGV2ZW50IGNhcHR1cmUgc3VwcG9ydCBmb3IgdGhpcyBzbyBpZiB0aGUgZGV2aWNlCi8vIGRvZXNuJ3Qgc3VwcG9ydCBpdCwgd2UgcHVudCBmb3Igbm93IGFuZCByZWx5IHNvbGVseSBvbiBtb3VzZSBldmVudHMuCmlmICggZXZlbnRDYXB0dXJlU3VwcG9ydGVkICkgewoJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggImNsaWNrIiwgZnVuY3Rpb24oIGUgKXsKCQl2YXIgY250ID0gY2xpY2tCbG9ja0xpc3QubGVuZ3RoLAoJCQl0YXJnZXQgPSBlLnRhcmdldCwKCQkJeCwgeSwgZWxlLCBpLCBvLCB0b3VjaElEOwoKCQlpZiAoIGNudCApIHsKCQkJeCA9IGUuY2xpZW50WDsKCQkJeSA9IGUuY2xpZW50WTsKCQkJdGhyZXNob2xkID0gJC52bW91c2UuY2xpY2tEaXN0YW5jZVRocmVzaG9sZDsKCgkJCS8vIFRoZSBpZGVhIGhlcmUgaXMgdG8gcnVuIHRocm91Z2ggdGhlIGNsaWNrQmxvY2tMaXN0IHRvIHNlZSBpZgoJCQkvLyB0aGUgY3VycmVudCBjbGljayBldmVudCBpcyBpbiB0aGUgcHJveGltaXR5IG9mIG9uZSBvZiBvdXIKCQkJLy8gdmNsaWNrIGV2ZW50cyB0aGF0IGhhZCBwcmV2ZW50RGVmYXVsdCgpIGNhbGxlZCBvbiBpdC4gSWYgd2UgZmluZAoJCQkvLyBvbmUsIHRoZW4gd2UgYmxvY2sgdGhlIGNsaWNrLgoJCQkvLwoJCQkvLyBXaHkgZG8gd2UgaGF2ZSB0byByZWx5IG9uIHByb3hpbWl0eT8KCQkJLy8KCQkJLy8gQmVjYXVzZSB0aGUgdGFyZ2V0IG9mIHRoZSB0b3VjaCBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgdmNsaWNrCgkJCS8vIGNhbiBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgdGFyZ2V0IG9mIHRoZSBjbGljayBldmVudCBzeW50aGVzaXplZAoJCQkvLyBieSB0aGUgYnJvd3Nlci4gVGhlIHRhcmdldCBvZiBhIG1vdXNlL2NsaWNrIGV2ZW50IHRoYXQgaXMgc3ludGVoc2l6ZWQKCQkJLy8gZnJvbSBhIHRvdWNoIGV2ZW50IHNlZW1zIHRvIGJlIGltcGxlbWVudGF0aW9uIHNwZWNpZmljLiBGb3IgZXhhbXBsZSwKCQkJLy8gc29tZSBicm93c2VycyB3aWxsIGZpcmUgbW91c2UvY2xpY2sgZXZlbnRzIGZvciBhIGxpbmsgdGhhdCBpcyBuZWFyCgkJCS8vIGEgdG91Y2ggZXZlbnQsIGV2ZW4gdGhvdWdoIHRoZSB0YXJnZXQgb2YgdGhlIHRvdWNoc3RhcnQvdG91Y2hlbmQgZXZlbnQKCQkJLy8gc2F5cyB0aGUgdXNlciB0b3VjaGVkIG91dHNpZGUgdGhlIGxpbmsuIEFsc28sIGl0IHNlZW1zIHRoYXQgd2l0aCBtb3N0CgkJCS8vIGJyb3dzZXJzLCB0aGUgdGFyZ2V0IG9mIHRoZSBtb3VzZS9jbGljayBldmVudCBpcyBub3QgY2FsY3VsYXRlZCB1bnRpbCB0aGUKCQkJLy8gdGltZSBpdCBpcyBkaXNwYXRjaGVkLCBzbyBpZiB5b3UgcmVwbGFjZSBhbiBlbGVtZW50IHRoYXQgeW91IHRvdWNoZWQKCQkJLy8gd2l0aCBhbm90aGVyIGVsZW1lbnQsIHRoZSB0YXJnZXQgb2YgdGhlIG1vdXNlL2NsaWNrIHdpbGwgYmUgdGhlIG5ldwoJCQkvLyBlbGVtZW50IHVuZGVybmVhdGggdGhhdCBwb2ludC4KCQkJLy8KCQkJLy8gQXNpZGUgZnJvbSBwcm94aW1pdHksIHdlIGFsc28gY2hlY2sgdG8gc2VlIGlmIHRoZSB0YXJnZXQgYW5kIGFueQoJCQkvLyBvZiBpdHMgYW5jZXN0b3JzIHdlcmUgdGhlIG9uZXMgdGhhdCBibG9ja2VkIGEgY2xpY2suIFRoaXMgaXMgbmVjZXNzYXJ5CgkJCS8vIGJlY2F1c2Ugb2YgdGhlIHN0cmFuZ2UgbW91c2UvY2xpY2sgdGFyZ2V0IGNhbGN1bGF0aW9uIGRvbmUgaW4gdGhlCgkJCS8vIEFuZHJvaWQgMi4xIGJyb3dzZXIsIHdoZXJlIGlmIHlvdSBjbGljayBvbiBhbiBlbGVtZW50LCBhbmQgdGhlcmUgaXMgYQoJCQkvLyBtb3VzZS9jbGljayBoYW5kbGVyIG9uIG9uZSBvZiBpdHMgYW5jZXN0b3JzLCB0aGUgdGFyZ2V0IHdpbGwgYmUgdGhlCgkJCS8vIGlubmVybW9zdCBjaGlsZCBvZiB0aGUgdG91Y2hlZCBlbGVtZW50LCBldmVuIGlmIHRoYXQgY2hpbGQgaXMgbm8gd2hlcmUKCQkJLy8gbmVhciB0aGUgcG9pbnQgb2YgdG91Y2guCgoJCQllbGUgPSB0YXJnZXQ7CgoJCQl3aGlsZSAoIGVsZSApIHsKCQkJCWZvciAoIGkgPSAwOyBpIDwgY250OyBpKysgKSB7CgkJCQkJbyA9IGNsaWNrQmxvY2tMaXN0WyBpIF07CgkJCQkJdG91Y2hJRCA9IDA7CgoJCQkJCWlmICggKCBlbGUgPT09IHRhcmdldCAmJiBNYXRoLmFicyggby54IC0geCApIDwgdGhyZXNob2xkICYmIE1hdGguYWJzKCBvLnkgLSB5ICkgPCB0aHJlc2hvbGQgKSB8fAoJCQkJCQkJCSQuZGF0YSggZWxlLCB0b3VjaFRhcmdldFByb3BlcnR5TmFtZSApID09PSBvLnRvdWNoSUQgKSB7CgkJCQkJCS8vIFhYWDogV2UgbWF5IHdhbnQgdG8gY29uc2lkZXIgcmVtb3ZpbmcgbWF0Y2hlcyBmcm9tIHRoZSBibG9jayBsaXN0CgkJCQkJCS8vICAgICAgaW5zdGVhZCBvZiB3YWl0aW5nIGZvciB0aGUgcmVzZXQgdGltZXIgdG8gZmlyZS4KCQkJCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCQllLnN0b3BQcm9wYWdhdGlvbigpOwoJCQkJCQlyZXR1cm47CgkJCQkJfQoJCQkJfQoJCQkJZWxlID0gZWxlLnBhcmVudE5vZGU7CgkJCX0KCQl9Cgl9LCB0cnVlKTsKfQp9KSggalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50ICk7Ci8qIAoqICJldmVudHMiIHBsdWdpbiAtIEhhbmRsZXMgZXZlbnRzCiovCgooZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkgewoKLy8gYWRkIG5ldyBldmVudCBzaG9ydGN1dHMKJC5lYWNoKCAoICJ0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCBvcmllbnRhdGlvbmNoYW5nZSB0aHJvdHRsZWRyZXNpemUgIiArCgkJCQkJInRhcCB0YXBob2xkIHN3aXBlIHN3aXBlbGVmdCBzd2lwZXJpZ2h0IHNjcm9sbHN0YXJ0IHNjcm9sbHN0b3AiICkuc3BsaXQoICIgIiApLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKCgkkLmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZm4gKSB7CgkJcmV0dXJuIGZuID8gdGhpcy5iaW5kKCBuYW1lLCBmbiApIDogdGhpcy50cmlnZ2VyKCBuYW1lICk7Cgl9OwoKCSQuYXR0ckZuWyBuYW1lIF0gPSB0cnVlOwp9KTsKCnZhciBzdXBwb3J0VG91Y2ggPSAkLnN1cHBvcnQudG91Y2gsCglzY3JvbGxFdmVudCA9ICJ0b3VjaG1vdmUgc2Nyb2xsIiwKCXRvdWNoU3RhcnRFdmVudCA9IHN1cHBvcnRUb3VjaCA/ICJ0b3VjaHN0YXJ0IiA6ICJtb3VzZWRvd24iLAoJdG91Y2hTdG9wRXZlbnQgPSBzdXBwb3J0VG91Y2ggPyAidG91Y2hlbmQiIDogIm1vdXNldXAiLAoJdG91Y2hNb3ZlRXZlbnQgPSBzdXBwb3J0VG91Y2ggPyAidG91Y2htb3ZlIiA6ICJtb3VzZW1vdmUiOwoKZnVuY3Rpb24gdHJpZ2dlckN1c3RvbUV2ZW50KCBvYmosIGV2ZW50VHlwZSwgZXZlbnQgKSB7Cgl2YXIgb3JpZ2luYWxUeXBlID0gZXZlbnQudHlwZTsKCWV2ZW50LnR5cGUgPSBldmVudFR5cGU7CgkkLmV2ZW50LmhhbmRsZS5jYWxsKCBvYmosIGV2ZW50ICk7CglldmVudC50eXBlID0gb3JpZ2luYWxUeXBlOwp9CgovLyBhbHNvIGhhbmRsZXMgc2Nyb2xsc3RvcAokLmV2ZW50LnNwZWNpYWwuc2Nyb2xsc3RhcnQgPSB7CgoJZW5hYmxlZDogdHJ1ZSwKCglzZXR1cDogZnVuY3Rpb24oKSB7CgoJCXZhciB0aGlzT2JqZWN0ID0gdGhpcywKCQkJJHRoaXMgPSAkKCB0aGlzT2JqZWN0ICksCgkJCXNjcm9sbGluZywKCQkJdGltZXI7CgoJCWZ1bmN0aW9uIHRyaWdnZXIoIGV2ZW50LCBzdGF0ZSApIHsKCQkJc2Nyb2xsaW5nID0gc3RhdGU7CgkJCXRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgc2Nyb2xsaW5nID8gInNjcm9sbHN0YXJ0IiA6ICJzY3JvbGxzdG9wIiwgZXZlbnQgKTsKCQl9CgoJCS8vIGlQaG9uZSB0cmlnZ2VycyBzY3JvbGwgYWZ0ZXIgYSBzbWFsbCBkZWxheTsgdXNlIHRvdWNobW92ZSBpbnN0ZWFkCgkJJHRoaXMuYmluZCggc2Nyb2xsRXZlbnQsIGZ1bmN0aW9uKCBldmVudCApIHsKCgkJCWlmICggISQuZXZlbnQuc3BlY2lhbC5zY3JvbGxzdGFydC5lbmFibGVkICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQlpZiAoICFzY3JvbGxpbmcgKSB7CgkJCQl0cmlnZ2VyKCBldmVudCwgdHJ1ZSApOwoJCQl9CgoJCQljbGVhclRpbWVvdXQoIHRpbWVyICk7CgkJCXRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCXRyaWdnZXIoIGV2ZW50LCBmYWxzZSApOwoJCQl9LCA1MCApOwoJCX0pOwoJfQp9OwoKLy8gYWxzbyBoYW5kbGVzIHRhcGhvbGQKJC5ldmVudC5zcGVjaWFsLnRhcCA9IHsKCXNldHVwOiBmdW5jdGlvbigpIHsKCQl2YXIgdGhpc09iamVjdCA9IHRoaXMsCgkJCSR0aGlzID0gJCggdGhpc09iamVjdCApOwoKCQkkdGhpcy5iaW5kKCAidm1vdXNlZG93biIsIGZ1bmN0aW9uKCBldmVudCApIHsKCgkJCWlmICggZXZlbnQud2hpY2ggJiYgZXZlbnQud2hpY2ggIT09IDEgKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCgkJCXZhciBvcmlnVGFyZ2V0ID0gZXZlbnQudGFyZ2V0LAoJCQkJb3JpZ0V2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCwKCQkJCXRpbWVyOwoKCQkJZnVuY3Rpb24gY2xlYXJUYXBUaW1lcigpIHsKCQkJCWNsZWFyVGltZW91dCggdGltZXIgKTsKCQkJfQoKCQkJZnVuY3Rpb24gY2xlYXJUYXBIYW5kbGVycygpIHsKCQkJCWNsZWFyVGFwVGltZXIoKTsKCgkJCQkkdGhpcy51bmJpbmQoICJ2Y2xpY2siLCBjbGlja0hhbmRsZXIgKQoJCQkJCS51bmJpbmQoICJ2bW91c2V1cCIsIGNsZWFyVGFwVGltZXIgKQoJCQkJCS51bmJpbmQoICJ2bW91c2VjYW5jZWwiLCBjbGVhclRhcEhhbmRsZXJzICk7CgkJCX0KCgkJCWZ1bmN0aW9uIGNsaWNrSGFuZGxlcihldmVudCkgewoJCQkJY2xlYXJUYXBIYW5kbGVycygpOwoKCQkJCS8vIE9OTFkgdHJpZ2dlciBhICd0YXAnIGV2ZW50IGlmIHRoZSBzdGFydCB0YXJnZXQgaXMKCQkJCS8vIHRoZSBzYW1lIGFzIHRoZSBzdG9wIHRhcmdldC4KCQkJCWlmICggb3JpZ1RhcmdldCA9PSBldmVudC50YXJnZXQgKSB7CgkJCQkJdHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCAidGFwIiwgZXZlbnQgKTsKCQkJCX0KCQkJfQoKCQkJJHRoaXMuYmluZCggInZtb3VzZWNhbmNlbCIsIGNsZWFyVGFwSGFuZGxlcnMgKQoJCQkJLmJpbmQoICJ2bW91c2V1cCIsIGNsZWFyVGFwVGltZXIgKQoJCQkJLmJpbmQoICJ2Y2xpY2siLCBjbGlja0hhbmRsZXIgKTsKCgkJCXRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCQl0cmlnZ2VyQ3VzdG9tRXZlbnQoIHRoaXNPYmplY3QsICJ0YXBob2xkIiwgJC5FdmVudCggInRhcGhvbGQiICkgKTsKCQkJfSwgNzUwICk7CgkJfSk7Cgl9Cn07CgovLyBhbHNvIGhhbmRsZXMgc3dpcGVsZWZ0LCBzd2lwZXJpZ2h0CiQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHsKCXNjcm9sbFN1cHJlc3Npb25UaHJlc2hvbGQ6IDEwLCAvLyBNb3JlIHRoYW4gdGhpcyBob3Jpem9udGFsIGRpc3BsYWNlbWVudCwgYW5kIHdlIHdpbGwgc3VwcHJlc3Mgc2Nyb2xsaW5nLgoKCWR1cmF0aW9uVGhyZXNob2xkOiAxMDAwLCAvLyBNb3JlIHRpbWUgdGhhbiB0aGlzLCBhbmQgaXQgaXNuJ3QgYSBzd2lwZS4KCglob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQ6IDMwLCAgLy8gU3dpcGUgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBtb3JlIHRoYW4gdGhpcy4KCgl2ZXJ0aWNhbERpc3RhbmNlVGhyZXNob2xkOiA3NSwgIC8vIFN3aXBlIHZlcnRpY2FsIGRpc3BsYWNlbWVudCBtdXN0IGJlIGxlc3MgdGhhbiB0aGlzLgoKCXNldHVwOiBmdW5jdGlvbigpIHsKCQl2YXIgdGhpc09iamVjdCA9IHRoaXMsCgkJCSR0aGlzID0gJCggdGhpc09iamVjdCApOwoKCQkkdGhpcy5iaW5kKCB0b3VjaFN0YXJ0RXZlbnQsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyIGRhdGEgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgPwoJCQkJCQkJCWV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1sgMCBdIDogZXZlbnQsCgkJCQlzdGFydCA9IHsKCQkJCQl0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksCgkJCQkJY29vcmRzOiBbIGRhdGEucGFnZVgsIGRhdGEucGFnZVkgXSwKCQkJCQlvcmlnaW46ICQoIGV2ZW50LnRhcmdldCApCgkJCQl9LAoJCQkJc3RvcDsKCgkJCWZ1bmN0aW9uIG1vdmVIYW5kbGVyKCBldmVudCApIHsKCgkJCQlpZiAoICFzdGFydCApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJdmFyIGRhdGEgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgPwoJCQkJCQlldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50OwoKCQkJCXN0b3AgPSB7CgkJCQkJdGltZTogKCBuZXcgRGF0ZSgpICkuZ2V0VGltZSgpLAoJCQkJCWNvb3JkczogWyBkYXRhLnBhZ2VYLCBkYXRhLnBhZ2VZIF0KCQkJCX07CgoJCQkJLy8gcHJldmVudCBzY3JvbGxpbmcKCQkJCWlmICggTWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMCBdIC0gc3RvcC5jb29yZHNbIDAgXSApID4gJC5ldmVudC5zcGVjaWFsLnN3aXBlLnNjcm9sbFN1cHJlc3Npb25UaHJlc2hvbGQgKSB7CgkJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCX0KCQkJfQoKCQkJJHRoaXMuYmluZCggdG91Y2hNb3ZlRXZlbnQsIG1vdmVIYW5kbGVyICkKCQkJCS5vbmUoIHRvdWNoU3RvcEV2ZW50LCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJJHRoaXMudW5iaW5kKCB0b3VjaE1vdmVFdmVudCwgbW92ZUhhbmRsZXIgKTsKCgkJCQkJaWYgKCBzdGFydCAmJiBzdG9wICkgewoJCQkJCQlpZiAoIHN0b3AudGltZSAtIHN0YXJ0LnRpbWUgPCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZHVyYXRpb25UaHJlc2hvbGQgJiYKCQkJCQkJCQlNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuaG9yaXpvbnRhbERpc3RhbmNlVGhyZXNob2xkICYmCgkJCQkJCQkJTWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMSBdIC0gc3RvcC5jb29yZHNbIDEgXSApIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLnZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQgKSB7CgoJCQkJCQkJc3RhcnQub3JpZ2luLnRyaWdnZXIoICJzd2lwZSIgKQoJCQkJCQkJCS50cmlnZ2VyKCBzdGFydC5jb29yZHNbMF0gPiBzdG9wLmNvb3Jkc1sgMCBdID8gInN3aXBlbGVmdCIgOiAic3dpcGVyaWdodCIgKTsKCQkJCQkJfQoJCQkJCX0KCQkJCQlzdGFydCA9IHN0b3AgPSB1bmRlZmluZWQ7CgkJCQl9KTsKCQl9KTsKCX0KfTsKCihmdW5jdGlvbiggJCwgd2luZG93ICkgewoJLy8gIkNvd2JveSIgQmVuIEFsbWFuCgoJdmFyIHdpbiA9ICQoIHdpbmRvdyApLAoJCXNwZWNpYWxfZXZlbnQsCgkJZ2V0X29yaWVudGF0aW9uLAoJCWxhc3Rfb3JpZW50YXRpb24sCgkJaW5pdGlhbF9vcmllbnRhdGlvbl9pc19sYW5kc2NhcGUsCgkJaW5pdGlhbF9vcmllbnRhdGlvbl9pc19kZWZhdWx0LAoJCXBvcnRyYWl0X21hcCA9IHsgIjAiOiB0cnVlLCAiMTgwIjogdHJ1ZSB9OwoKCS8vIEl0IHNlZW1zIHRoYXQgc29tZSBkZXZpY2UvYnJvd3NlciB2ZW5kb3JzIHVzZSB3aW5kb3cub3JpZW50YXRpb24gdmFsdWVzIDAgYW5kIDE4MCB0bwoJLy8gZGVub3RlIHRoZSAiZGVmYXVsdCIgb3JpZW50YXRpb24uIEZvciBpT1MgZGV2aWNlcywgYW5kIG1vc3Qgb3RoZXIgc21hcnQtcGhvbmVzIHRlc3RlZCwKCS8vIHRoZSBkZWZhdWx0IG9yaWVudGF0aW9uIGlzIGFsd2F5cyAicG9ydHJhaXQiLCBidXQgaW4gc29tZSBBbmRyb2lkIGFuZCBSSU0gYmFzZWQgdGFibGV0cywKCS8vIHRoZSBkZWZhdWx0IG9yaWVudGF0aW9uIGlzICJsYW5kc2NhcGUiLiBUaGUgZm9sbG93aW5nIGNvZGUgaW5qZWN0cyBhIGxhbmRzY2FwZSBvcmllbnRhdGlvbgoJLy8gbWVkaWEgcXVlcnkgaW50byB0aGUgZG9jdW1lbnQgdG8gZmlndXJlIG91dCB3aGF0IHRoZSBjdXJyZW50IG9yaWVudGF0aW9uIGlzLCBhbmQgdGhlbgoJLy8gbWFrZXMgYWRqdXN0bWVudHMgdG8gdGhlIHBvcnRyYWl0X21hcCBpZiBuZWNlc3NhcnksIHNvIHRoYXQgd2UgY2FuIHByb3Blcmx5CgkvLyBkZWNvZGUgdGhlIHdpbmRvdy5vcmllbnRhdGlvbiB2YWx1ZSB3aGVuZXZlciBnZXRfb3JpZW50YXRpb24oKSBpcyBjYWxsZWQuCglpZiAoICQuc3VwcG9ydC5vcmllbnRhdGlvbiApIHsKCgkJLy8gVXNlIGEgbWVkaWEgcXVlcnkgdG8gZmlndXJlIG91dCB0aGUgdHJ1ZSBvcmllbnRhdGlvbiBvZiB0aGUgZGV2aWNlIGF0IHRoaXMgbW9tZW50LgoJCS8vIE5vdGUgdGhhdCB3ZSd2ZSBpbml0aWFsaXplZCB0aGUgcG9ydHJhaXQgbWFwIHZhbHVlcyB0byAwIGFuZCAxODAsICpBTkQqIHdlIHB1cnBvc2VseQoJCS8vIHVzZSBhIGxhbmRzY2FwZSBtZWRpYSBxdWVyeSBzbyB0aGF0IGlmIHRoZSBkZXZpY2UvYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgcGFydGljdWxhcgoJCS8vIG1lZGlhIHF1ZXJ5LCB3ZSBkZWZhdWx0IHRvIHRoZSBhc3N1bXB0aW9uIHRoYXQgcG9ydHJhaXQgaXMgdGhlIGRlZmF1bHQgb3JpZW50YXRpb24uCgkJaW5pdGlhbF9vcmllbnRhdGlvbl9pc19sYW5kc2NhcGUgPSAkLm1vYmlsZS5tZWRpYSgiYWxsIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSkiKTsKCgkJLy8gTm93IGNoZWNrIHRvIHNlZSBpZiB0aGUgY3VycmVudCB3aW5kb3cub3JpZW50YXRpb24gaXMgMCBvciAxODAuCgkJaW5pdGlhbF9vcmllbnRhdGlvbl9pc19kZWZhdWx0ID0gcG9ydHJhaXRfbWFwWyB3aW5kb3cub3JpZW50YXRpb24gXTsKCgkJLy8gSWYgdGhlIGluaXRpYWwgb3JpZW50YXRpb24gaXMgbGFuZHNjYXBlLCBidXQgd2luZG93Lm9yaWVudGF0aW9uIHJlcG9ydHMgMCBvciAxODAsICpPUioKCQkvLyBpZiB0aGUgaW5pdGlhbCBvcmllbnRhdGlvbiBpcyBwb3J0cmFpdCwgYnV0IHdpbmRvdy5vcmllbnRhdGlvbiByZXBvcnRzIDkwIG9yIC05MCwgd2UKCQkvLyBuZWVkIHRvIGZsaXAgb3VyIHBvcnRyYWl0X21hcCB2YWx1ZXMgYmVjYXVzZSBsYW5kc2NhcGUgaXMgdGhlIGRlZmF1bHQgb3JpZW50YXRpb24gZm9yCgkJLy8gdGhpcyBkZXZpY2UvYnJvd3Nlci4KCQlpZiAoICggaW5pdGlhbF9vcmllbnRhdGlvbl9pc19sYW5kc2NhcGUgJiYgaW5pdGlhbF9vcmllbnRhdGlvbl9pc19kZWZhdWx0ICkgfHwgKCAhaW5pdGlhbF9vcmllbnRhdGlvbl9pc19sYW5kc2NhcGUgJiYgIWluaXRpYWxfb3JpZW50YXRpb25faXNfZGVmYXVsdCApICkgewoJCQlwb3J0cmFpdF9tYXAgPSB7ICItOTAiOiB0cnVlLCAiOTAiOiB0cnVlIH07CgkJfQoJfQoKCSQuZXZlbnQuc3BlY2lhbC5vcmllbnRhdGlvbmNoYW5nZSA9IHNwZWNpYWxfZXZlbnQgPSB7CgkJc2V0dXA6IGZ1bmN0aW9uKCkgewoJCQkvLyBJZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkIG5hdGl2ZWx5LCByZXR1cm4gZmFsc2Ugc28gdGhhdCBqUXVlcnkKCQkJLy8gd2lsbCBiaW5kIHRvIHRoZSBldmVudCB1c2luZyBET00gbWV0aG9kcy4KCQkJaWYgKCAkLnN1cHBvcnQub3JpZW50YXRpb24gJiYgJC5tb2JpbGUub3JpZW50YXRpb25DaGFuZ2VFbmFibGVkICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQkvLyBHZXQgdGhlIGN1cnJlbnQgb3JpZW50YXRpb24gdG8gYXZvaWQgaW5pdGlhbCBkb3VibGUtdHJpZ2dlcmluZy4KCQkJbGFzdF9vcmllbnRhdGlvbiA9IGdldF9vcmllbnRhdGlvbigpOwoKCQkJLy8gQmVjYXVzZSB0aGUgb3JpZW50YXRpb25jaGFuZ2UgZXZlbnQgZG9lc24ndCBleGlzdCwgc2ltdWxhdGUgdGhlCgkJCS8vIGV2ZW50IGJ5IHRlc3Rpbmcgd2luZG93IGRpbWVuc2lvbnMgb24gcmVzaXplLgoJCQl3aW4uYmluZCggInRocm90dGxlZHJlc2l6ZSIsIGhhbmRsZXIgKTsKCQl9LAoJCXRlYXJkb3duOiBmdW5jdGlvbigpewoJCQkvLyBJZiB0aGUgZXZlbnQgaXMgbm90IHN1cHBvcnRlZCBuYXRpdmVseSwgcmV0dXJuIGZhbHNlIHNvIHRoYXQKCQkJLy8galF1ZXJ5IHdpbGwgdW5iaW5kIHRoZSBldmVudCB1c2luZyBET00gbWV0aG9kcy4KCQkJaWYgKCAkLnN1cHBvcnQub3JpZW50YXRpb24gJiYgJC5tb2JpbGUub3JpZW50YXRpb25DaGFuZ2VFbmFibGVkICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQkvLyBCZWNhdXNlIHRoZSBvcmllbnRhdGlvbmNoYW5nZSBldmVudCBkb2Vzbid0IGV4aXN0LCB1bmJpbmQgdGhlCgkJCS8vIHJlc2l6ZSBldmVudCBoYW5kbGVyLgoJCQl3aW4udW5iaW5kKCAidGhyb3R0bGVkcmVzaXplIiwgaGFuZGxlciApOwoJCX0sCgkJYWRkOiBmdW5jdGlvbiggaGFuZGxlT2JqICkgewoJCQkvLyBTYXZlIGEgcmVmZXJlbmNlIHRvIHRoZSBib3VuZCBldmVudCBoYW5kbGVyLgoJCQl2YXIgb2xkX2hhbmRsZXIgPSBoYW5kbGVPYmouaGFuZGxlcjsKCgoJCQloYW5kbGVPYmouaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCS8vIE1vZGlmeSBldmVudCBvYmplY3QsIGFkZGluZyB0aGUgLm9yaWVudGF0aW9uIHByb3BlcnR5LgoJCQkJZXZlbnQub3JpZW50YXRpb24gPSBnZXRfb3JpZW50YXRpb24oKTsKCgkJCQkvLyBDYWxsIHRoZSBvcmlnaW5hbGx5LWJvdW5kIGV2ZW50IGhhbmRsZXIgYW5kIHJldHVybiBpdHMgcmVzdWx0LgoJCQkJcmV0dXJuIG9sZF9oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJfTsKCQl9Cgl9OwoKCS8vIElmIHRoZSBldmVudCBpcyBub3Qgc3VwcG9ydGVkIG5hdGl2ZWx5LCB0aGlzIGhhbmRsZXIgd2lsbCBiZSBib3VuZCB0bwoJLy8gdGhlIHdpbmRvdyByZXNpemUgZXZlbnQgdG8gc2ltdWxhdGUgdGhlIG9yaWVudGF0aW9uY2hhbmdlIGV2ZW50LgoJZnVuY3Rpb24gaGFuZGxlcigpIHsKCQkvLyBHZXQgdGhlIGN1cnJlbnQgb3JpZW50YXRpb24uCgkJdmFyIG9yaWVudGF0aW9uID0gZ2V0X29yaWVudGF0aW9uKCk7CgoJCWlmICggb3JpZW50YXRpb24gIT09IGxhc3Rfb3JpZW50YXRpb24gKSB7CgkJCS8vIFRoZSBvcmllbnRhdGlvbiBoYXMgY2hhbmdlZCwgc28gdHJpZ2dlciB0aGUgb3JpZW50YXRpb25jaGFuZ2UgZXZlbnQuCgkJCWxhc3Rfb3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjsKCQkJd2luLnRyaWdnZXIoICJvcmllbnRhdGlvbmNoYW5nZSIgKTsKCQl9Cgl9CgoJLy8gR2V0IHRoZSBjdXJyZW50IHBhZ2Ugb3JpZW50YXRpb24uIFRoaXMgbWV0aG9kIGlzIGV4cG9zZWQgcHVibGljbHksIHNob3VsZCBpdAoJLy8gYmUgbmVlZGVkLCBhcyBqUXVlcnkuZXZlbnQuc3BlY2lhbC5vcmllbnRhdGlvbmNoYW5nZS5vcmllbnRhdGlvbigpCgkkLmV2ZW50LnNwZWNpYWwub3JpZW50YXRpb25jaGFuZ2Uub3JpZW50YXRpb24gPSBnZXRfb3JpZW50YXRpb24gPSBmdW5jdGlvbigpIHsKCQl2YXIgaXNQb3J0cmFpdCA9IHRydWUsIGVsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CgoJCS8vIHByZWZlciB3aW5kb3cgb3JpZW50YXRpb24gdG8gdGhlIGNhbGN1bGF0aW9uIGJhc2VkIG9uIHNjcmVlbnNpemUgYXMKCQkvLyB0aGUgYWN0dWFsIHNjcmVlbiByZXNpemUgdGFrZXMgcGxhY2UgYmVmb3JlIG9yIGFmdGVyIHRoZSBvcmllbnRhdGlvbiBjaGFuZ2UgZXZlbnQKCQkvLyBoYXMgYmVlbiBmaXJlZCBkZXBlbmRpbmcgb24gaW1wbGVtZW50YXRpb24gKGVnIGFuZHJvaWQgMi4zIGlzIGJlZm9yZSwgaXBob25lIGFmdGVyKS4KCQkvLyBNb3JlIHRlc3RpbmcgaXMgcmVxdWlyZWQgdG8gZGV0ZXJtaW5lIGlmIGEgbW9yZSByZWxpYWJsZSBtZXRob2Qgb2YgZGV0ZXJtaW5pbmcgdGhlIG5ldyBzY3JlZW5zaXplCgkJLy8gaXMgcG9zc2libGUgd2hlbiBvcmllbnRhdGlvbmNoYW5nZSBpcyBmaXJlZC4gKGVnLCB1c2UgbWVkaWEgcXVlcmllcyArIGVsZW1lbnQgKyBvcGFjaXR5KQoJCWlmICggJC5zdXBwb3J0Lm9yaWVudGF0aW9uICkgewoJCQkvLyBpZiB0aGUgd2luZG93IG9yaWVudGF0aW9uIHJlZ2lzdGVycyBhcyAwIG9yIDE4MCBkZWdyZWVzIHJlcG9ydAoJCQkvLyBwb3J0cmFpdCwgb3RoZXJ3aXNlIGxhbmRzY2FwZQoJCQlpc1BvcnRyYWl0ID0gcG9ydHJhaXRfbWFwWyB3aW5kb3cub3JpZW50YXRpb24gXTsKCQl9IGVsc2UgewoJCQlpc1BvcnRyYWl0ID0gZWxlbSAmJiBlbGVtLmNsaWVudFdpZHRoIC8gZWxlbS5jbGllbnRIZWlnaHQgPCAxLjE7CgkJfQoKCQlyZXR1cm4gaXNQb3J0cmFpdCA/ICJwb3J0cmFpdCIgOiAibGFuZHNjYXBlIjsKCX07Cgp9KSggalF1ZXJ5LCB3aW5kb3cgKTsKCgovLyB0aHJvdHRsZWQgcmVzaXplIGV2ZW50CihmdW5jdGlvbigpIHsKCgkkLmV2ZW50LnNwZWNpYWwudGhyb3R0bGVkcmVzaXplID0gewoJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJJCggdGhpcyApLmJpbmQoICJyZXNpemUiLCBoYW5kbGVyICk7CgkJfSwKCQl0ZWFyZG93bjogZnVuY3Rpb24oKXsKCQkJJCggdGhpcyApLnVuYmluZCggInJlc2l6ZSIsIGhhbmRsZXIgKTsKCQl9Cgl9OwoKCXZhciB0aHJvdHRsZSA9IDI1MCwKCQloYW5kbGVyID0gZnVuY3Rpb24oKSB7CgkJCWN1cnIgPSAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCk7CgkJCWRpZmYgPSBjdXJyIC0gbGFzdENhbGw7CgoJCQlpZiAoIGRpZmYgPj0gdGhyb3R0bGUgKSB7CgoJCQkJbGFzdENhbGwgPSBjdXJyOwoJCQkJJCggdGhpcyApLnRyaWdnZXIoICJ0aHJvdHRsZWRyZXNpemUiICk7CgoJCQl9IGVsc2UgewoKCQkJCWlmICggaGVsZENhbGwgKSB7CgkJCQkJY2xlYXJUaW1lb3V0KCBoZWxkQ2FsbCApOwoJCQkJfQoKCQkJCS8vIFByb21pc2UgYSBoZWxkIGNhbGwgd2lsbCBzdGlsbCBleGVjdXRlCgkJCQloZWxkQ2FsbCA9IHNldFRpbWVvdXQoIGhhbmRsZXIsIHRocm90dGxlIC0gZGlmZiApOwoJCQl9CgkJfSwKCQlsYXN0Q2FsbCA9IDAsCgkJaGVsZENhbGwsCgkJY3VyciwKCQlkaWZmOwp9KSgpOwoKCiQuZWFjaCh7CglzY3JvbGxzdG9wOiAic2Nyb2xsc3RhcnQiLAoJdGFwaG9sZDogInRhcCIsCglzd2lwZWxlZnQ6ICJzd2lwZSIsCglzd2lwZXJpZ2h0OiAic3dpcGUiCn0sIGZ1bmN0aW9uKCBldmVudCwgc291cmNlRXZlbnQgKSB7CgoJJC5ldmVudC5zcGVjaWFsWyBldmVudCBdID0gewoJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJJCggdGhpcyApLmJpbmQoIHNvdXJjZUV2ZW50LCAkLm5vb3AgKTsKCQl9Cgl9Owp9KTsKCn0pKCBqUXVlcnksIHRoaXMgKTsKLy8gU2NyaXB0OiBqUXVlcnkgaGFzaGNoYW5nZSBldmVudAovLyAKLy8gKlZlcnNpb246IDEuMywgTGFzdCB1cGRhdGVkOiA3LzIxLzIwMTAqCi8vIAovLyBQcm9qZWN0IEhvbWUgLSBodHRwOi8vYmVuYWxtYW4uY29tL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlLXBsdWdpbi8KLy8gR2l0SHViICAgICAgIC0gaHR0cDovL2dpdGh1Yi5jb20vY293Ym95L2pxdWVyeS1oYXNoY2hhbmdlLwovLyBTb3VyY2UgICAgICAgLSBodHRwOi8vZ2l0aHViLmNvbS9jb3dib3kvanF1ZXJ5LWhhc2hjaGFuZ2UvcmF3L21hc3Rlci9qcXVlcnkuYmEtaGFzaGNoYW5nZS5qcwovLyAoTWluaWZpZWQpICAgLSBodHRwOi8vZ2l0aHViLmNvbS9jb3dib3kvanF1ZXJ5LWhhc2hjaGFuZ2UvcmF3L21hc3Rlci9qcXVlcnkuYmEtaGFzaGNoYW5nZS5taW4uanMgKDAuOGtiIGd6aXBwZWQpCi8vIAovLyBBYm91dDogTGljZW5zZQovLyAKLy8gQ29weXJpZ2h0IChjKSAyMDEwICJDb3dib3kiIEJlbiBBbG1hbiwKLy8gRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGFuZCBHUEwgbGljZW5zZXMuCi8vIGh0dHA6Ly9iZW5hbG1hbi5jb20vYWJvdXQvbGljZW5zZS8KLy8gCi8vIEFib3V0OiBFeGFtcGxlcwovLyAKLy8gVGhlc2Ugd29ya2luZyBleGFtcGxlcywgY29tcGxldGUgd2l0aCBmdWxseSBjb21tZW50ZWQgY29kZSwgaWxsdXN0cmF0ZSBhIGZldwovLyB3YXlzIGluIHdoaWNoIHRoaXMgcGx1Z2luIGNhbiBiZSB1c2VkLgovLyAKLy8gaGFzaGNoYW5nZSBldmVudCAtIGh0dHA6Ly9iZW5hbG1hbi5jb20vY29kZS9wcm9qZWN0cy9qcXVlcnktaGFzaGNoYW5nZS9leGFtcGxlcy9oYXNoY2hhbmdlLwovLyBkb2N1bWVudC5kb21haW4gLSBodHRwOi8vYmVuYWxtYW4uY29tL2NvZGUvcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UvZXhhbXBsZXMvZG9jdW1lbnRfZG9tYWluLwovLyAKLy8gQWJvdXQ6IFN1cHBvcnQgYW5kIFRlc3RpbmcKLy8gCi8vIEluZm9ybWF0aW9uIGFib3V0IHdoYXQgdmVyc2lvbiBvciB2ZXJzaW9ucyBvZiBqUXVlcnkgdGhpcyBwbHVnaW4gaGFzIGJlZW4KLy8gdGVzdGVkIHdpdGgsIHdoYXQgYnJvd3NlcnMgaXQgaGFzIGJlZW4gdGVzdGVkIGluLCBhbmQgd2hlcmUgdGhlIHVuaXQgdGVzdHMKLy8gcmVzaWRlIChzbyB5b3UgY2FuIHRlc3QgaXQgeW91cnNlbGYpLgovLyAKLy8galF1ZXJ5IFZlcnNpb25zIC0gMS4yLjYsIDEuMy4yLCAxLjQuMSwgMS40LjIKLy8gQnJvd3NlcnMgVGVzdGVkIC0gSW50ZXJuZXQgRXhwbG9yZXIgNi04LCBGaXJlZm94IDItNCwgQ2hyb21lIDUtNiwgU2FmYXJpIDMuMi01LAovLyAgICAgICAgICAgICAgICAgICBPcGVyYSA5LjYtMTAuNjAsIGlQaG9uZSAzLjEsIEFuZHJvaWQgMS42LTIuMiwgQmxhY2tCZXJyeSA0LjYtNS4KLy8gVW5pdCBUZXN0cyAgICAgIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlL3VuaXQvCi8vIAovLyBBYm91dDogS25vd24gaXNzdWVzCi8vIAovLyBXaGlsZSB0aGlzIGpRdWVyeSBoYXNoY2hhbmdlIGV2ZW50IGltcGxlbWVudGF0aW9uIGlzIHF1aXRlIHN0YWJsZSBhbmQKLy8gcm9idXN0LCB0aGVyZSBhcmUgYSBmZXcgdW5mb3J0dW5hdGUgYnJvd3NlciBidWdzIHN1cnJvdW5kaW5nIGV4cGVjdGVkCi8vIGhhc2hjaGFuZ2UgZXZlbnQtYmFzZWQgYmVoYXZpb3JzLCBpbmRlcGVuZGVudCBvZiBhbnkgSmF2YVNjcmlwdAovLyB3aW5kb3cub25oYXNoY2hhbmdlIGFic3RyYWN0aW9uLiBTZWUgdGhlIGZvbGxvd2luZyBleGFtcGxlcyBmb3IgbW9yZQovLyBpbmZvcm1hdGlvbjoKLy8gCi8vIENocm9tZTogQmFjayBCdXR0b24gLSBodHRwOi8vYmVuYWxtYW4uY29tL2NvZGUvcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UvZXhhbXBsZXMvYnVnLWNocm9tZS1iYWNrLWJ1dHRvbi8KLy8gRmlyZWZveDogUmVtb3RlIFhNTEh0dHBSZXF1ZXN0IC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlL2V4YW1wbGVzL2J1Zy1maXJlZm94LXJlbW90ZS14aHIvCi8vIFdlYktpdDogQmFjayBCdXR0b24gaW4gYW4gSWZyYW1lIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlL2V4YW1wbGVzL2J1Zy13ZWJraXQtaGFzaC1pZnJhbWUvCi8vIFNhZmFyaTogQmFjayBCdXR0b24gZnJvbSBhIGRpZmZlcmVudCBkb21haW4gLSBodHRwOi8vYmVuYWxtYW4uY29tL2NvZGUvcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UvZXhhbXBsZXMvYnVnLXNhZmFyaS1iYWNrLWZyb20tZGlmZi1kb21haW4vCi8vIAovLyBBbHNvIG5vdGUgdGhhdCBzaG91bGQgYSBicm93c2VyIG5hdGl2ZWx5IHN1cHBvcnQgdGhlIHdpbmRvdy5vbmhhc2hjaGFuZ2UgCi8vIGV2ZW50LCBidXQgbm90IHJlcG9ydCB0aGF0IGl0IGRvZXMsIHRoZSBmYWxsYmFjayBwb2xsaW5nIGxvb3Agd2lsbCBiZSB1c2VkLgovLyAKLy8gQWJvdXQ6IFJlbGVhc2UgSGlzdG9yeQovLyAKLy8gMS4zICAgLSAoNy8yMS8yMDEwKSBSZW9yZ2FuaXplZCBJRTYvNyBJZnJhbWUgY29kZSB0byBtYWtlIGl0IG1vcmUKLy8gICAgICAgICAicmVtb3ZhYmxlIiBmb3IgbW9iaWxlLW9ubHkgZGV2ZWxvcG1lbnQuIEFkZGVkIElFNi83IGRvY3VtZW50LnRpdGxlCi8vICAgICAgICAgc3VwcG9ydC4gQXR0ZW1wdGVkIHRvIG1ha2UgSWZyYW1lIGFzIGhpZGRlbiBhcyBwb3NzaWJsZSBieSB1c2luZwovLyAgICAgICAgIHRlY2huaXF1ZXMgZnJvbSBodHRwOi8vd3d3LnBhY2llbGxvZ3JvdXAuY29tL2Jsb2cvP3A9NjA0LiBBZGRlZCAKLy8gICAgICAgICBzdXBwb3J0IGZvciB0aGUgInNob3J0Y3V0IiBmb3JtYXQgJCh3aW5kb3cpLmhhc2hjaGFuZ2UoIGZuICkgYW5kCi8vICAgICAgICAgJCh3aW5kb3cpLmhhc2hjaGFuZ2UoKSBsaWtlIGpRdWVyeSBwcm92aWRlcyBmb3IgYnVpbHQtaW4gZXZlbnRzLgovLyAgICAgICAgIFJlbmFtZWQgalF1ZXJ5Lmhhc2hjaGFuZ2VEZWxheSB0byA8alF1ZXJ5LmZuLmhhc2hjaGFuZ2UuZGVsYXk+IGFuZAovLyAgICAgICAgIGxvd2VyZWQgaXRzIGRlZmF1bHQgdmFsdWUgdG8gNTAuIEFkZGVkIDxqUXVlcnkuZm4uaGFzaGNoYW5nZS5kb21haW4+Ci8vICAgICAgICAgYW5kIDxqUXVlcnkuZm4uaGFzaGNoYW5nZS5zcmM+IHByb3BlcnRpZXMgcGx1cyBkb2N1bWVudC1kb21haW4uaHRtbAovLyAgICAgICAgIGZpbGUgdG8gYWRkcmVzcyBhY2Nlc3MgZGVuaWVkIGlzc3VlcyB3aGVuIHNldHRpbmcgZG9jdW1lbnQuZG9tYWluIGluCi8vICAgICAgICAgSUU2LzcuCi8vIDEuMiAgIC0gKDIvMTEvMjAxMCkgRml4ZWQgYSBidWcgd2hlcmUgY29taW5nIGJhY2sgdG8gYSBwYWdlIHVzaW5nIHRoaXMgcGx1Z2luCi8vICAgICAgICAgZnJvbSBhIHBhZ2Ugb24gYW5vdGhlciBkb21haW4gd291bGQgY2F1c2UgYW4gZXJyb3IgaW4gU2FmYXJpIDQuIEFsc28sCi8vICAgICAgICAgSUU2LzcgSWZyYW1lIGlzIG5vdyBpbnNlcnRlZCBhZnRlciB0aGUgYm9keSAodGhpcyBhY3R1YWxseSB3b3JrcyksCi8vICAgICAgICAgd2hpY2ggcHJldmVudHMgdGhlIHBhZ2UgZnJvbSBzY3JvbGxpbmcgd2hlbiB0aGUgZXZlbnQgaXMgZmlyc3QgYm91bmQuCi8vICAgICAgICAgRXZlbnQgY2FuIGFsc28gbm93IGJlIGJvdW5kIGJlZm9yZSBET00gcmVhZHksIGJ1dCBpdCB3b24ndCBiZSB1c2FibGUKLy8gICAgICAgICBiZWZvcmUgdGhlbiBpbiBJRTYvNy4KLy8gMS4xICAgLSAoMS8yMS8yMDEwKSBJbmNvcnBvcmF0ZWQgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIHRlc3QgdG8gZml4IElFOCBidWcKLy8gICAgICAgICB3aGVyZSBicm93c2VyIHZlcnNpb24gaXMgaW5jb3JyZWN0bHkgcmVwb3J0ZWQgYXMgOC4wLCBkZXNwaXRlCi8vICAgICAgICAgaW5jbHVzaW9uIG9mIHRoZSBYLVVBLUNvbXBhdGlibGUgSUU9RW11bGF0ZUlFNyBtZXRhIHRhZy4KLy8gMS4wICAgLSAoMS85LzIwMTApIEluaXRpYWwgUmVsZWFzZS4gQnJva2Ugb3V0IHRoZSBqUXVlcnkgQkJRIGV2ZW50LnNwZWNpYWwKLy8gICAgICAgICB3aW5kb3cub25oYXNoY2hhbmdlIGZ1bmN0aW9uYWxpdHkgaW50byBhIHNlcGFyYXRlIHBsdWdpbiBmb3IgdXNlcnMKLy8gICAgICAgICB3aG8gd2FudCBqdXN0IHRoZSBiYXNpYyBldmVudCAmIGJhY2sgYnV0dG9uIHN1cHBvcnQsIHdpdGhvdXQgYWxsIHRoZQovLyAgICAgICAgIGV4dHJhIGF3ZXNvbWVuZXNzIHRoYXQgQkJRIHByb3ZpZGVzLiBUaGlzIHBsdWdpbiB3aWxsIGJlIGluY2x1ZGVkIGFzCi8vICAgICAgICAgcGFydCBvZiBqUXVlcnkgQkJRLCBidXQgYWxzbyBiZSBhdmFpbGFibGUgc2VwYXJhdGVseS4KCihmdW5jdGlvbigkLHdpbmRvdyx1bmRlZmluZWQpewogIC8vIFJldXNlZCBzdHJpbmcuCiAgdmFyIHN0cl9oYXNoY2hhbmdlID0gJ2hhc2hjaGFuZ2UnLAogICAgCiAgICAvLyBNZXRob2QgLyBvYmplY3QgcmVmZXJlbmNlcy4KICAgIGRvYyA9IGRvY3VtZW50LAogICAgZmFrZV9vbmhhc2hjaGFuZ2UsCiAgICBzcGVjaWFsID0gJC5ldmVudC5zcGVjaWFsLAogICAgCiAgICAvLyBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgd2luZG93Lm9uaGFzaGNoYW5nZT8gTm90ZSB0aGF0IElFOCBydW5uaW5nIGluCiAgICAvLyBJRTcgY29tcGF0aWJpbGl0eSBtb2RlIHJlcG9ydHMgdHJ1ZSBmb3IgJ29uaGFzaGNoYW5nZScgaW4gd2luZG93LCBldmVuCiAgICAvLyB0aG91Z2ggdGhlIGV2ZW50IGlzbid0IHN1cHBvcnRlZCwgc28gYWxzbyB0ZXN0IGRvY3VtZW50LmRvY3VtZW50TW9kZS4KICAgIGRvY19tb2RlID0gZG9jLmRvY3VtZW50TW9kZSwKICAgIHN1cHBvcnRzX29uaGFzaGNoYW5nZSA9ICdvbicgKyBzdHJfaGFzaGNoYW5nZSBpbiB3aW5kb3cgJiYgKCBkb2NfbW9kZSA9PT0gdW5kZWZpbmVkIHx8IGRvY19tb2RlID4gNyApOwogIAogIC8vIEdldCBsb2NhdGlvbi5oYXNoIChvciB3aGF0IHlvdSdkIGV4cGVjdCBsb2NhdGlvbi5oYXNoIHRvIGJlKSBzYW5zIGFueQogIC8vIGxlYWRpbmcgIy4gVGhhbmtzIGZvciBtYWtpbmcgdGhpcyBuZWNlc3NhcnksIEZpcmVmb3ghCiAgZnVuY3Rpb24gZ2V0X2ZyYWdtZW50KCB1cmwgKSB7CiAgICB1cmwgPSB1cmwgfHwgbG9jYXRpb24uaHJlZjsKICAgIHJldHVybiAnIycgKyB1cmwucmVwbGFjZSggL15bXiNdKiM/KC4qKSQvLCAnJDEnICk7CiAgfTsKICAKICAvLyBNZXRob2Q6IGpRdWVyeS5mbi5oYXNoY2hhbmdlCiAgLy8gCiAgLy8gQmluZCBhIGhhbmRsZXIgdG8gdGhlIHdpbmRvdy5vbmhhc2hjaGFuZ2UgZXZlbnQgb3IgdHJpZ2dlciBhbGwgYm91bmQKICAvLyB3aW5kb3cub25oYXNoY2hhbmdlIGV2ZW50IGhhbmRsZXJzLiBUaGlzIGJlaGF2aW9yIGlzIGNvbnNpc3RlbnQgd2l0aAogIC8vIGpRdWVyeSdzIGJ1aWx0LWluIGV2ZW50IGhhbmRsZXJzLgogIC8vIAogIC8vIFVzYWdlOgogIC8vIAogIC8vID4galF1ZXJ5KHdpbmRvdykuaGFzaGNoYW5nZSggWyBoYW5kbGVyIF0gKTsKICAvLyAKICAvLyBBcmd1bWVudHM6CiAgLy8gCiAgLy8gIGhhbmRsZXIgLSAoRnVuY3Rpb24pIE9wdGlvbmFsIGhhbmRsZXIgdG8gYmUgYm91bmQgdG8gdGhlIGhhc2hjaGFuZ2UKICAvLyAgICBldmVudC4gVGhpcyBpcyBhICJzaG9ydGN1dCIgZm9yIHRoZSBtb3JlIHZlcmJvc2UgZm9ybToKICAvLyAgICBqUXVlcnkod2luZG93KS5iaW5kKCAnaGFzaGNoYW5nZScsIGhhbmRsZXIgKS4gSWYgaGFuZGxlciBpcyBvbWl0dGVkLAogIC8vICAgIGFsbCBib3VuZCB3aW5kb3cub25oYXNoY2hhbmdlIGV2ZW50IGhhbmRsZXJzIHdpbGwgYmUgdHJpZ2dlcmVkLiBUaGlzCiAgLy8gICAgaXMgYSBzaG9ydGN1dCBmb3IgdGhlIG1vcmUgdmVyYm9zZQogIC8vICAgIGpRdWVyeSh3aW5kb3cpLnRyaWdnZXIoICdoYXNoY2hhbmdlJyApLiBUaGVzZSBmb3JtcyBhcmUgZGVzY3JpYmVkIGluCiAgLy8gICAgdGhlIDxoYXNoY2hhbmdlIGV2ZW50PiBzZWN0aW9uLgogIC8vIAogIC8vIFJldHVybnM6CiAgLy8gCiAgLy8gIChqUXVlcnkpIFRoZSBpbml0aWFsIGpRdWVyeSBjb2xsZWN0aW9uIG9mIGVsZW1lbnRzLgogIAogIC8vIEFsbG93IHRoZSAic2hvcnRjdXQiIGZvcm1hdCAkKGVsZW0pLmhhc2hjaGFuZ2UoIGZuICkgZm9yIGJpbmRpbmcgYW5kCiAgLy8gJChlbGVtKS5oYXNoY2hhbmdlKCkgZm9yIHRyaWdnZXJpbmcsIGxpa2UgalF1ZXJ5IGRvZXMgZm9yIGJ1aWx0LWluIGV2ZW50cy4KICAkLmZuWyBzdHJfaGFzaGNoYW5nZSBdID0gZnVuY3Rpb24oIGZuICkgewogICAgcmV0dXJuIGZuID8gdGhpcy5iaW5kKCBzdHJfaGFzaGNoYW5nZSwgZm4gKSA6IHRoaXMudHJpZ2dlciggc3RyX2hhc2hjaGFuZ2UgKTsKICB9OwogIAogIC8vIFByb3BlcnR5OiBqUXVlcnkuZm4uaGFzaGNoYW5nZS5kZWxheQogIC8vIAogIC8vIFRoZSBudW1lcmljIGludGVydmFsIChpbiBtaWxsaXNlY29uZHMpIGF0IHdoaWNoIHRoZSA8aGFzaGNoYW5nZSBldmVudD4KICAvLyBwb2xsaW5nIGxvb3AgZXhlY3V0ZXMuIERlZmF1bHRzIHRvIDUwLgogIAogIC8vIFByb3BlcnR5OiBqUXVlcnkuZm4uaGFzaGNoYW5nZS5kb21haW4KICAvLyAKICAvLyBJZiB5b3UncmUgc2V0dGluZyBkb2N1bWVudC5kb21haW4gaW4geW91ciBKYXZhU2NyaXB0LCBhbmQgeW91IHdhbnQgaGFzaAogIC8vIGhpc3RvcnkgdG8gd29yayBpbiBJRTYvNywgbm90IG9ubHkgbXVzdCB0aGlzIHByb3BlcnR5IGJlIHNldCwgYnV0IHlvdSBtdXN0CiAgLy8gYWxzbyBzZXQgZG9jdW1lbnQuZG9tYWluIEJFRk9SRSBqUXVlcnkgaXMgbG9hZGVkIGludG8gdGhlIHBhZ2UuIFRoaXMKICAvLyBwcm9wZXJ0eSBpcyBvbmx5IGFwcGxpY2FibGUgaWYgeW91IGFyZSBzdXBwb3J0aW5nIElFNi83IChvciBJRTggb3BlcmF0aW5nCiAgLy8gaW4gIklFNyBjb21wYXRpYmlsaXR5IiBtb2RlKS4KICAvLyAKICAvLyBJbiBhZGRpdGlvbiwgdGhlIDxqUXVlcnkuZm4uaGFzaGNoYW5nZS5zcmM+IHByb3BlcnR5IG11c3QgYmUgc2V0IHRvIHRoZQogIC8vIHBhdGggb2YgdGhlIGluY2x1ZGVkICJkb2N1bWVudC1kb21haW4uaHRtbCIgZmlsZSwgd2hpY2ggY2FuIGJlIHJlbmFtZWQgb3IKICAvLyBtb2RpZmllZCBpZiBuZWNlc3NhcnkgKG5vdGUgdGhhdCB0aGUgZG9jdW1lbnQuZG9tYWluIHNwZWNpZmllZCBtdXN0IGJlIHRoZQogIC8vIHNhbWUgaW4gYm90aCB5b3VyIG1haW4gSmF2YVNjcmlwdCBhcyB3ZWxsIGFzIGluIHRoaXMgZmlsZSkuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8galF1ZXJ5LmZuLmhhc2hjaGFuZ2UuZG9tYWluID0gZG9jdW1lbnQuZG9tYWluOwogIAogIC8vIFByb3BlcnR5OiBqUXVlcnkuZm4uaGFzaGNoYW5nZS5zcmMKICAvLyAKICAvLyBJZiwgZm9yIHNvbWUgcmVhc29uLCB5b3UgbmVlZCB0byBzcGVjaWZ5IGFuIElmcmFtZSBzcmMgZmlsZSAoZm9yIGV4YW1wbGUsCiAgLy8gd2hlbiBzZXR0aW5nIGRvY3VtZW50LmRvbWFpbiBhcyBpbiA8alF1ZXJ5LmZuLmhhc2hjaGFuZ2UuZG9tYWluPiksIHlvdSBjYW4KICAvLyBkbyBzbyB1c2luZyB0aGlzIHByb3BlcnR5LiBOb3RlIHRoYXQgd2hlbiB1c2luZyB0aGlzIHByb3BlcnR5LCBoaXN0b3J5CiAgLy8gd29uJ3QgYmUgcmVjb3JkZWQgaW4gSUU2LzcgdW50aWwgdGhlIElmcmFtZSBzcmMgZmlsZSBsb2Fkcy4gVGhpcyBwcm9wZXJ0eQogIC8vIGlzIG9ubHkgYXBwbGljYWJsZSBpZiB5b3UgYXJlIHN1cHBvcnRpbmcgSUU2LzcgKG9yIElFOCBvcGVyYXRpbmcgaW4gIklFNwogIC8vIGNvbXBhdGliaWxpdHkiIG1vZGUpLgogIC8vIAogIC8vIFVzYWdlOgogIC8vIAogIC8vIGpRdWVyeS5mbi5oYXNoY2hhbmdlLnNyYyA9ICdwYXRoL3RvL2ZpbGUuaHRtbCc7CiAgCiAgJC5mblsgc3RyX2hhc2hjaGFuZ2UgXS5kZWxheSA9IDUwOwogIC8qCiAgJC5mblsgc3RyX2hhc2hjaGFuZ2UgXS5kb21haW4gPSBudWxsOwogICQuZm5bIHN0cl9oYXNoY2hhbmdlIF0uc3JjID0gbnVsbDsKICAqLwogIAogIC8vIEV2ZW50OiBoYXNoY2hhbmdlIGV2ZW50CiAgLy8gCiAgLy8gRmlyZWQgd2hlbiBsb2NhdGlvbi5oYXNoIGNoYW5nZXMuIEluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBpdCwgdGhlIG5hdGl2ZQogIC8vIEhUTUw1IHdpbmRvdy5vbmhhc2hjaGFuZ2UgZXZlbnQgaXMgdXNlZCwgb3RoZXJ3aXNlIGEgcG9sbGluZyBsb29wIGlzCiAgLy8gaW5pdGlhbGl6ZWQsIHJ1bm5pbmcgZXZlcnkgPGpRdWVyeS5mbi5oYXNoY2hhbmdlLmRlbGF5PiBtaWxsaXNlY29uZHMgdG8KICAvLyBzZWUgaWYgdGhlIGhhc2ggaGFzIGNoYW5nZWQuIEluIElFNi83IChhbmQgSUU4IG9wZXJhdGluZyBpbiAiSUU3CiAgLy8gY29tcGF0aWJpbGl0eSIgbW9kZSksIGEgaGlkZGVuIElmcmFtZSBpcyBjcmVhdGVkIHRvIGFsbG93IHRoZSBiYWNrIGJ1dHRvbgogIC8vIGFuZCBoYXNoLWJhc2VkIGhpc3RvcnkgdG8gd29yay4KICAvLyAKICAvLyBVc2FnZSBhcyBkZXNjcmliZWQgaW4gPGpRdWVyeS5mbi5oYXNoY2hhbmdlPjoKICAvLyAKICAvLyA+IC8vIEJpbmQgYW4gZXZlbnQgaGFuZGxlci4KICAvLyA+IGpRdWVyeSh3aW5kb3cpLmhhc2hjaGFuZ2UoIGZ1bmN0aW9uKGUpIHsKICAvLyA+ICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoOwogIC8vID4gICAuLi4KICAvLyA+IH0pOwogIC8vID4gCiAgLy8gPiAvLyBNYW51YWxseSB0cmlnZ2VyIHRoZSBldmVudCBoYW5kbGVyLgogIC8vID4galF1ZXJ5KHdpbmRvdykuaGFzaGNoYW5nZSgpOwogIC8vIAogIC8vIEEgbW9yZSB2ZXJib3NlIHVzYWdlIHRoYXQgYWxsb3dzIGZvciBldmVudCBuYW1lc3BhY2luZzoKICAvLyAKICAvLyA+IC8vIEJpbmQgYW4gZXZlbnQgaGFuZGxlci4KICAvLyA+IGpRdWVyeSh3aW5kb3cpLmJpbmQoICdoYXNoY2hhbmdlJywgZnVuY3Rpb24oZSkgewogIC8vID4gICB2YXIgaGFzaCA9IGxvY2F0aW9uLmhhc2g7CiAgLy8gPiAgIC4uLgogIC8vID4gfSk7CiAgLy8gPiAKICAvLyA+IC8vIE1hbnVhbGx5IHRyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIuCiAgLy8gPiBqUXVlcnkod2luZG93KS50cmlnZ2VyKCAnaGFzaGNoYW5nZScgKTsKICAvLyAKICAvLyBBZGRpdGlvbmFsIE5vdGVzOgogIC8vIAogIC8vICogVGhlIHBvbGxpbmcgbG9vcCBhbmQgSWZyYW1lIGFyZSBub3QgY3JlYXRlZCB1bnRpbCBhdCBsZWFzdCBvbmUgaGFuZGxlcgogIC8vICAgaXMgYWN0dWFsbHkgYm91bmQgdG8gdGhlICdoYXNoY2hhbmdlJyBldmVudC4KICAvLyAqIElmIHlvdSBuZWVkIHRoZSBib3VuZCBoYW5kbGVyKHMpIHRvIGV4ZWN1dGUgaW1tZWRpYXRlbHksIGluIGNhc2VzIHdoZXJlCiAgLy8gICBhIGxvY2F0aW9uLmhhc2ggZXhpc3RzIG9uIHBhZ2UgbG9hZCwgdmlhIGJvb2ttYXJrIG9yIHBhZ2UgcmVmcmVzaCBmb3IKICAvLyAgIGV4YW1wbGUsIHVzZSBqUXVlcnkod2luZG93KS5oYXNoY2hhbmdlKCkgb3IgdGhlIG1vcmUgdmVyYm9zZSAKICAvLyAgIGpRdWVyeSh3aW5kb3cpLnRyaWdnZXIoICdoYXNoY2hhbmdlJyApLgogIC8vICogVGhlIGV2ZW50IGNhbiBiZSBib3VuZCBiZWZvcmUgRE9NIHJlYWR5LCBidXQgc2luY2UgaXQgd29uJ3QgYmUgdXNhYmxlCiAgLy8gICBiZWZvcmUgdGhlbiBpbiBJRTYvNyAoZHVlIHRvIHRoZSBuZWNlc3NhcnkgSWZyYW1lKSwgcmVjb21tZW5kZWQgdXNhZ2UgaXMKICAvLyAgIHRvIGJpbmQgaXQgaW5zaWRlIGEgRE9NIHJlYWR5IGhhbmRsZXIuCiAgCiAgLy8gT3ZlcnJpZGUgZXhpc3RpbmcgJC5ldmVudC5zcGVjaWFsLmhhc2hjaGFuZ2UgbWV0aG9kcyAoYWxsb3dpbmcgdGhpcyBwbHVnaW4KICAvLyB0byBiZSBkZWZpbmVkIGFmdGVyIGpRdWVyeSBCQlEgaW4gQkJRJ3Mgc291cmNlIGNvZGUpLgogIHNwZWNpYWxbIHN0cl9oYXNoY2hhbmdlIF0gPSAkLmV4dGVuZCggc3BlY2lhbFsgc3RyX2hhc2hjaGFuZ2UgXSwgewogICAgCiAgICAvLyBDYWxsZWQgb25seSB3aGVuIHRoZSBmaXJzdCAnaGFzaGNoYW5nZScgZXZlbnQgaXMgYm91bmQgdG8gd2luZG93LgogICAgc2V0dXA6IGZ1bmN0aW9uKCkgewogICAgICAvLyBJZiB3aW5kb3cub25oYXNoY2hhbmdlIGlzIHN1cHBvcnRlZCBuYXRpdmVseSwgdGhlcmUncyBub3RoaW5nIHRvIGRvLi4KICAgICAgaWYgKCBzdXBwb3J0c19vbmhhc2hjaGFuZ2UgKSB7IHJldHVybiBmYWxzZTsgfQogICAgICAKICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBuZWVkIHRvIGNyZWF0ZSBvdXIgb3duLiBBbmQgd2UgZG9uJ3Qgd2FudCB0byBjYWxsIHRoaXMKICAgICAgLy8gdW50aWwgdGhlIHVzZXIgYmluZHMgdG8gdGhlIGV2ZW50LCBqdXN0IGluIGNhc2UgdGhleSBuZXZlciBkbywgc2luY2UgaXQKICAgICAgLy8gd2lsbCBjcmVhdGUgYSBwb2xsaW5nIGxvb3AgYW5kIHBvc3NpYmx5IGV2ZW4gYSBoaWRkZW4gSWZyYW1lLgogICAgICAkKCBmYWtlX29uaGFzaGNoYW5nZS5zdGFydCApOwogICAgfSwKICAgIAogICAgLy8gQ2FsbGVkIG9ubHkgd2hlbiB0aGUgbGFzdCAnaGFzaGNoYW5nZScgZXZlbnQgaXMgdW5ib3VuZCBmcm9tIHdpbmRvdy4KICAgIHRlYXJkb3duOiBmdW5jdGlvbigpIHsKICAgICAgLy8gSWYgd2luZG93Lm9uaGFzaGNoYW5nZSBpcyBzdXBwb3J0ZWQgbmF0aXZlbHksIHRoZXJlJ3Mgbm90aGluZyB0byBkby4uCiAgICAgIGlmICggc3VwcG9ydHNfb25oYXNoY2hhbmdlICkgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgCiAgICAgIC8vIE90aGVyd2lzZSwgd2UgbmVlZCB0byBzdG9wIG91cnMgKGlmIHBvc3NpYmxlKS4KICAgICAgJCggZmFrZV9vbmhhc2hjaGFuZ2Uuc3RvcCApOwogICAgfQogICAgCiAgfSk7CiAgCiAgLy8gZmFrZV9vbmhhc2hjaGFuZ2UgZG9lcyBhbGwgdGhlIHdvcmsgb2YgdHJpZ2dlcmluZyB0aGUgd2luZG93Lm9uaGFzaGNoYW5nZQogIC8vIGV2ZW50IGZvciBicm93c2VycyB0aGF0IGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQsIGluY2x1ZGluZyBjcmVhdGluZyBhCiAgLy8gcG9sbGluZyBsb29wIHRvIHdhdGNoIGZvciBoYXNoIGNoYW5nZXMgYW5kIGluIElFIDYvNyBjcmVhdGluZyBhIGhpZGRlbgogIC8vIElmcmFtZSB0byBlbmFibGUgYmFjayBhbmQgZm9yd2FyZC4KICBmYWtlX29uaGFzaGNoYW5nZSA9IChmdW5jdGlvbigpewogICAgdmFyIHNlbGYgPSB7fSwKICAgICAgdGltZW91dF9pZCwKICAgICAgCiAgICAgIC8vIFJlbWVtYmVyIHRoZSBpbml0aWFsIGhhc2ggc28gaXQgZG9lc24ndCBnZXQgdHJpZ2dlcmVkIGltbWVkaWF0ZWx5LgogICAgICBsYXN0X2hhc2ggPSBnZXRfZnJhZ21lbnQoKSwKICAgICAgCiAgICAgIGZuX3JldHZhbCA9IGZ1bmN0aW9uKHZhbCl7IHJldHVybiB2YWw7IH0sCiAgICAgIGhpc3Rvcnlfc2V0ID0gZm5fcmV0dmFsLAogICAgICBoaXN0b3J5X2dldCA9IGZuX3JldHZhbDsKICAgIAogICAgLy8gU3RhcnQgdGhlIHBvbGxpbmcgbG9vcC4KICAgIHNlbGYuc3RhcnQgPSBmdW5jdGlvbigpIHsKICAgICAgdGltZW91dF9pZCB8fCBwb2xsKCk7CiAgICB9OwogICAgCiAgICAvLyBTdG9wIHRoZSBwb2xsaW5nIGxvb3AuCiAgICBzZWxmLnN0b3AgPSBmdW5jdGlvbigpIHsKICAgICAgdGltZW91dF9pZCAmJiBjbGVhclRpbWVvdXQoIHRpbWVvdXRfaWQgKTsKICAgICAgdGltZW91dF9pZCA9IHVuZGVmaW5lZDsKICAgIH07CiAgICAKICAgIC8vIFRoaXMgcG9sbGluZyBsb29wIGNoZWNrcyBldmVyeSAkLmZuLmhhc2hjaGFuZ2UuZGVsYXkgbWlsbGlzZWNvbmRzIHRvIHNlZQogICAgLy8gaWYgbG9jYXRpb24uaGFzaCBoYXMgY2hhbmdlZCwgYW5kIHRyaWdnZXJzIHRoZSAnaGFzaGNoYW5nZScgZXZlbnQgb24KICAgIC8vIHdpbmRvdyB3aGVuIG5lY2Vzc2FyeS4KICAgIGZ1bmN0aW9uIHBvbGwoKSB7CiAgICAgIHZhciBoYXNoID0gZ2V0X2ZyYWdtZW50KCksCiAgICAgICAgaGlzdG9yeV9oYXNoID0gaGlzdG9yeV9nZXQoIGxhc3RfaGFzaCApOwogICAgICAKICAgICAgaWYgKCBoYXNoICE9PSBsYXN0X2hhc2ggKSB7CiAgICAgICAgaGlzdG9yeV9zZXQoIGxhc3RfaGFzaCA9IGhhc2gsIGhpc3RvcnlfaGFzaCApOwogICAgICAgIAogICAgICAgICQod2luZG93KS50cmlnZ2VyKCBzdHJfaGFzaGNoYW5nZSApOwogICAgICAgIAogICAgICB9IGVsc2UgaWYgKCBoaXN0b3J5X2hhc2ggIT09IGxhc3RfaGFzaCApIHsKICAgICAgICBsb2NhdGlvbi5ocmVmID0gbG9jYXRpb24uaHJlZi5yZXBsYWNlKCAvIy4qLywgJycgKSArIGhpc3RvcnlfaGFzaDsKICAgICAgfQogICAgICAKICAgICAgdGltZW91dF9pZCA9IHNldFRpbWVvdXQoIHBvbGwsICQuZm5bIHN0cl9oYXNoY2hhbmdlIF0uZGVsYXkgKTsKICAgIH07CiAgICAKICAgIC8vIHZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dgogICAgLy8gdnZ2dnZ2dnZ2dnZ2dnZ2dnZ2diBSRU1PVkUgSUYgTk9UIFNVUFBPUlRJTkcgSUU2LzcvOCB2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2CiAgICAvLyB2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnYKICAgICQuYnJvd3Nlci5tc2llICYmICFzdXBwb3J0c19vbmhhc2hjaGFuZ2UgJiYgKGZ1bmN0aW9uKCl7CiAgICAgIC8vIE5vdCBvbmx5IGRvIElFNi83IG5lZWQgdGhlICJtYWdpY2FsIiBJZnJhbWUgdHJlYXRtZW50LCBidXQgc28gZG9lcyBJRTgKICAgICAgLy8gd2hlbiBydW5uaW5nIGluICJJRTcgY29tcGF0aWJpbGl0eSIgbW9kZS4KICAgICAgCiAgICAgIHZhciBpZnJhbWUsCiAgICAgICAgaWZyYW1lX3NyYzsKICAgICAgCiAgICAgIC8vIFdoZW4gdGhlIGV2ZW50IGlzIGJvdW5kIGFuZCBwb2xsaW5nIHN0YXJ0cyBpbiBJRSA2LzcsIGNyZWF0ZSBhIGhpZGRlbgogICAgICAvLyBJZnJhbWUgZm9yIGhpc3RvcnkgaGFuZGxpbmcuCiAgICAgIHNlbGYuc3RhcnQgPSBmdW5jdGlvbigpewogICAgICAgIGlmICggIWlmcmFtZSApIHsKICAgICAgICAgIGlmcmFtZV9zcmMgPSAkLmZuWyBzdHJfaGFzaGNoYW5nZSBdLnNyYzsKICAgICAgICAgIGlmcmFtZV9zcmMgPSBpZnJhbWVfc3JjICYmIGlmcmFtZV9zcmMgKyBnZXRfZnJhZ21lbnQoKTsKICAgICAgICAgIAogICAgICAgICAgLy8gQ3JlYXRlIGhpZGRlbiBJZnJhbWUuIEF0dGVtcHQgdG8gbWFrZSBJZnJhbWUgYXMgaGlkZGVuIGFzIHBvc3NpYmxlCiAgICAgICAgICAvLyBieSB1c2luZyB0ZWNobmlxdWVzIGZyb20gaHR0cDovL3d3dy5wYWNpZWxsb2dyb3VwLmNvbS9ibG9nLz9wPTYwNC4KICAgICAgICAgIGlmcmFtZSA9ICQoJzxpZnJhbWUgdGFiaW5kZXg9Ii0xIiB0aXRsZT0iZW1wdHkiLz4nKS5oaWRlKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFdoZW4gSWZyYW1lIGhhcyBjb21wbGV0ZWx5IGxvYWRlZCwgaW5pdGlhbGl6ZSB0aGUgaGlzdG9yeSBhbmQKICAgICAgICAgICAgLy8gc3RhcnQgcG9sbGluZy4KICAgICAgICAgICAgLm9uZSggJ2xvYWQnLCBmdW5jdGlvbigpewogICAgICAgICAgICAgIGlmcmFtZV9zcmMgfHwgaGlzdG9yeV9zZXQoIGdldF9mcmFnbWVudCgpICk7CiAgICAgICAgICAgICAgcG9sbCgpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAKICAgICAgICAgICAgLy8gTG9hZCBJZnJhbWUgc3JjIGlmIHNwZWNpZmllZCwgb3RoZXJ3aXNlIG5vdGhpbmcuCiAgICAgICAgICAgIC5hdHRyKCAnc3JjJywgaWZyYW1lX3NyYyB8fCAnamF2YXNjcmlwdDowJyApCiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBBcHBlbmQgSWZyYW1lIGFmdGVyIHRoZSBlbmQgb2YgdGhlIGJvZHkgdG8gcHJldmVudCB1bm5lY2Vzc2FyeQogICAgICAgICAgICAvLyBpbml0aWFsIHBhZ2Ugc2Nyb2xsaW5nICh5ZXMsIHRoaXMgd29ya3MpLgogICAgICAgICAgICAuaW5zZXJ0QWZ0ZXIoICdib2R5JyApWzBdLmNvbnRlbnRXaW5kb3c7CiAgICAgICAgICAKICAgICAgICAgIC8vIFdoZW5ldmVyIGBkb2N1bWVudC50aXRsZWAgY2hhbmdlcywgdXBkYXRlIHRoZSBJZnJhbWUncyB0aXRsZSB0bwogICAgICAgICAgLy8gcHJldHRpZnkgdGhlIGJhY2svbmV4dCBoaXN0b3J5IG1lbnUgZW50cmllcy4gU2luY2UgSUUgc29tZXRpbWVzCiAgICAgICAgICAvLyBlcnJvcnMgd2l0aCAiVW5zcGVjaWZpZWQgZXJyb3IiIHRoZSB2ZXJ5IGZpcnN0IHRpbWUgdGhpcyBpcyBzZXQKICAgICAgICAgIC8vICh5ZXMsIHZlcnkgdXNlZnVsKSB3cmFwIHRoaXMgd2l0aCBhIHRyeS9jYXRjaCBibG9jay4KICAgICAgICAgIGRvYy5vbnByb3BlcnR5Y2hhbmdlID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBpZiAoIGV2ZW50LnByb3BlcnR5TmFtZSA9PT0gJ3RpdGxlJyApIHsKICAgICAgICAgICAgICAgIGlmcmFtZS5kb2N1bWVudC50aXRsZSA9IGRvYy50aXRsZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2goZSkge30KICAgICAgICAgIH07CiAgICAgICAgICAKICAgICAgICB9CiAgICAgIH07CiAgICAgIAogICAgICAvLyBPdmVycmlkZSB0aGUgInN0b3AiIG1ldGhvZCBzaW5jZSBhbiBJRTYvNyBJZnJhbWUgd2FzIGNyZWF0ZWQuIEV2ZW4KICAgICAgLy8gaWYgdGhlcmUgYXJlIG5vIGxvbmdlciBhbnkgYm91bmQgZXZlbnQgaGFuZGxlcnMsIHRoZSBwb2xsaW5nIGxvb3AKICAgICAgLy8gaXMgc3RpbGwgbmVjZXNzYXJ5IGZvciBiYWNrL25leHQgdG8gd29yayBhdCBhbGwhCiAgICAgIHNlbGYuc3RvcCA9IGZuX3JldHZhbDsKICAgICAgCiAgICAgIC8vIEdldCBoaXN0b3J5IGJ5IGxvb2tpbmcgYXQgdGhlIGhpZGRlbiBJZnJhbWUncyBsb2NhdGlvbi5oYXNoLgogICAgICBoaXN0b3J5X2dldCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBnZXRfZnJhZ21lbnQoIGlmcmFtZS5sb2NhdGlvbi5ocmVmICk7CiAgICAgIH07CiAgICAgIAogICAgICAvLyBTZXQgYSBuZXcgaGlzdG9yeSBpdGVtIGJ5IG9wZW5pbmcgYW5kIHRoZW4gY2xvc2luZyB0aGUgSWZyYW1lCiAgICAgIC8vIGRvY3VtZW50LCAqdGhlbiogc2V0dGluZyBpdHMgbG9jYXRpb24uaGFzaC4gSWYgZG9jdW1lbnQuZG9tYWluIGhhcwogICAgICAvLyBiZWVuIHNldCwgdXBkYXRlIHRoYXQgYXMgd2VsbC4KICAgICAgaGlzdG9yeV9zZXQgPSBmdW5jdGlvbiggaGFzaCwgaGlzdG9yeV9oYXNoICkgewogICAgICAgIHZhciBpZnJhbWVfZG9jID0gaWZyYW1lLmRvY3VtZW50LAogICAgICAgICAgZG9tYWluID0gJC5mblsgc3RyX2hhc2hjaGFuZ2UgXS5kb21haW47CiAgICAgICAgCiAgICAgICAgaWYgKCBoYXNoICE9PSBoaXN0b3J5X2hhc2ggKSB7CiAgICAgICAgICAvLyBVcGRhdGUgSWZyYW1lIHdpdGggYW55IGluaXRpYWwgYGRvY3VtZW50LnRpdGxlYCB0aGF0IG1pZ2h0IGJlIHNldC4KICAgICAgICAgIGlmcmFtZV9kb2MudGl0bGUgPSBkb2MudGl0bGU7CiAgICAgICAgICAKICAgICAgICAgIC8vIE9wZW5pbmcgdGhlIElmcmFtZSdzIGRvY3VtZW50IGFmdGVyIGl0IGhhcyBiZWVuIGNsb3NlZCBpcyB3aGF0CiAgICAgICAgICAvLyBhY3R1YWxseSBhZGRzIGEgaGlzdG9yeSBlbnRyeS4KICAgICAgICAgIGlmcmFtZV9kb2Mub3BlbigpOwogICAgICAgICAgCiAgICAgICAgICAvLyBTZXQgZG9jdW1lbnQuZG9tYWluIGZvciB0aGUgSWZyYW1lIGRvY3VtZW50IGFzIHdlbGwsIGlmIG5lY2Vzc2FyeS4KICAgICAgICAgIGRvbWFpbiAmJiBpZnJhbWVfZG9jLndyaXRlKCAnPHNjcmlwdD5kb2N1bWVudC5kb21haW49IicgKyBkb21haW4gKyAnIjwvc2NyaXB0PicgKTsKICAgICAgICAgIAogICAgICAgICAgaWZyYW1lX2RvYy5jbG9zZSgpOwogICAgICAgICAgCiAgICAgICAgICAvLyBVcGRhdGUgdGhlIElmcmFtZSdzIGhhc2gsIGZvciBncmVhdCBqdXN0aWNlLgogICAgICAgICAgaWZyYW1lLmxvY2F0aW9uLmhhc2ggPSBoYXNoOwogICAgICAgIH0KICAgICAgfTsKICAgICAgCiAgICB9KSgpOwogICAgLy8gXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eCiAgICAvLyBeXl5eXl5eXl5eXl5eXl5eXl5eIFJFTU9WRSBJRiBOT1QgU1VQUE9SVElORyBJRTYvNy84IF5eXl5eXl5eXl5eXl5eXl5eXl4KICAgIC8vIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXgogICAgCiAgICByZXR1cm4gc2VsZjsKICB9KSgpOwogIAp9KShqUXVlcnksdGhpcyk7Ci8qCiogInBhZ2UiIHBsdWdpbgoqLwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS5wYWdlIiwgJC5tb2JpbGUud2lkZ2V0LCB7CglvcHRpb25zOiB7CgkJdGhlbWU6ICJjIiwKCQlkb21DYWNoZTogZmFsc2UsCgkJa2VlcE5hdGl2ZURlZmF1bHQ6ICI6anFtRGF0YShyb2xlPSdub25lJyksIDpqcW1EYXRhKHJvbGU9J25vanMnKSIKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgoJCXRoaXMuX3RyaWdnZXIoICJiZWZvcmVjcmVhdGUiICk7CgoJCXRoaXMuZWxlbWVudAoJCQkuYXR0ciggInRhYmluZGV4IiwgIjAiICkKCQkJLmFkZENsYXNzKCAidWktcGFnZSB1aS1ib2R5LSIgKyB0aGlzLm9wdGlvbnMudGhlbWUgKTsKCX0sCgoJa2VlcE5hdGl2ZVNlbGVjdG9yOiBmdW5jdGlvbigpIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJa2VlcE5hdGl2ZURlZmluZWQgPSBvcHRpb25zLmtlZXBOYXRpdmUgJiYgJC50cmltKG9wdGlvbnMua2VlcE5hdGl2ZSk7CgoJCWlmKCBrZWVwTmF0aXZlRGVmaW5lZCAmJiBvcHRpb25zLmtlZXBOYXRpdmUgIT09IG9wdGlvbnMua2VlcE5hdGl2ZURlZmF1bHQgKXsKCQkJcmV0dXJuIFtvcHRpb25zLmtlZXBOYXRpdmUsIG9wdGlvbnMua2VlcE5hdGl2ZURlZmF1bHRdLmpvaW4oIiwgIik7CgkJfQoKCQlyZXR1cm4gb3B0aW9ucy5rZWVwTmF0aXZlRGVmYXVsdDsKCX0KfSk7Cn0pKCBqUXVlcnkgKTsKLyoKKiAiY29yZSIgLSBUaGUgYmFzZSBmaWxlIGZvciBqUW0KKi8KCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgoJdmFyIG5zTm9ybWFsaXplRGljdCA9IHt9OwoKCS8vIGpRdWVyeS5tb2JpbGUgY29uZmlndXJhYmxlIG9wdGlvbnMKCSQuZXh0ZW5kKCAkLm1vYmlsZSwgewoKCQkvLyBOYW1lc3BhY2UgdXNlZCBmcmFtZXdvcmstd2lkZSBmb3IgZGF0YS1hdHRycy4gRGVmYXVsdCBpcyBubyBuYW1lc3BhY2UKCQluczogIiIsCgoJCS8vIERlZmluZSB0aGUgdXJsIHBhcmFtZXRlciB1c2VkIGZvciByZWZlcmVuY2luZyB3aWRnZXQtZ2VuZXJhdGVkIHN1Yi1wYWdlcy4KCQkvLyBUcmFuc2xhdGVzIHRvIHRvIGV4YW1wbGUuaHRtbCZ1aS1wYWdlPXN1YnBhZ2VJZGVudGlmaWVyCgkJLy8gaGFzaCBzZWdtZW50IGJlZm9yZSAmdWktcGFnZT0gaXMgdXNlZCB0byBtYWtlIEFqYXggcmVxdWVzdAoJCXN1YlBhZ2VVcmxLZXk6ICJ1aS1wYWdlIiwKCgkJLy8gQ2xhc3MgYXNzaWduZWQgdG8gcGFnZSBjdXJyZW50bHkgaW4gdmlldywgYW5kIGR1cmluZyB0cmFuc2l0aW9ucwoJCWFjdGl2ZVBhZ2VDbGFzczogInVpLXBhZ2UtYWN0aXZlIiwKCgkJLy8gQ2xhc3MgdXNlZCBmb3IgImFjdGl2ZSIgYnV0dG9uIHN0YXRlLCBmcm9tIENTUyBmcmFtZXdvcmsKCQlhY3RpdmVCdG5DbGFzczogInVpLWJ0bi1hY3RpdmUiLAoKCQkvLyBBdXRvbWF0aWNhbGx5IGhhbmRsZSBjbGlja3MgYW5kIGZvcm0gc3VibWlzc2lvbnMgdGhyb3VnaCBBamF4LCB3aGVuIHNhbWUtZG9tYWluCgkJYWpheEVuYWJsZWQ6IHRydWUsCgoJCS8vIEF1dG9tYXRpY2FsbHkgbG9hZCBhbmQgc2hvdyBwYWdlcyBiYXNlZCBvbiBsb2NhdGlvbi5oYXNoCgkJaGFzaExpc3RlbmluZ0VuYWJsZWQ6IHRydWUsCgoJCS8vIGRpc2FibGUgdG8gcHJldmVudCBqcXVlcnkgZnJvbSBib3RoZXJpbmcgd2l0aCBsaW5rcwoJCWxpbmtCaW5kaW5nRW5hYmxlZDogdHJ1ZSwKCgkJLy8gU2V0IGRlZmF1bHQgcGFnZSB0cmFuc2l0aW9uIC0gJ25vbmUnIGZvciBubyB0cmFuc2l0aW9ucwoJCWRlZmF1bHRQYWdlVHJhbnNpdGlvbjogInNsaWRlIiwKCgkJLy8gTWluaW11bSBzY3JvbGwgZGlzdGFuY2UgdGhhdCB3aWxsIGJlIHJlbWVtYmVyZWQgd2hlbiByZXR1cm5pbmcgdG8gYSBwYWdlCgkJbWluU2Nyb2xsQmFjazogMjUwLAoKCQkvLyBTZXQgZGVmYXVsdCBkaWFsb2cgdHJhbnNpdGlvbiAtICdub25lJyBmb3Igbm8gdHJhbnNpdGlvbnMKCQlkZWZhdWx0RGlhbG9nVHJhbnNpdGlvbjogInBvcCIsCgoJCS8vIFNob3cgbG9hZGluZyBtZXNzYWdlIGR1cmluZyBBamF4IHJlcXVlc3RzCgkJLy8gaWYgZmFsc2UsIG1lc3NhZ2Ugd2lsbCBub3QgYXBwZWFyLCBidXQgbG9hZGluZyBjbGFzc2VzIHdpbGwgc3RpbGwgYmUgdG9nZ2xlZCBvbiBodG1sIGVsCgkJbG9hZGluZ01lc3NhZ2U6ICJsb2FkaW5nIiwKCgkJLy8gRXJyb3IgcmVzcG9uc2UgbWVzc2FnZSAtIGFwcGVhcnMgd2hlbiBhbiBBamF4IHBhZ2UgcmVxdWVzdCBmYWlscwoJCXBhZ2VMb2FkRXJyb3JNZXNzYWdlOiAiRXJyb3IgTG9hZGluZyBQYWdlIiwKCgkJLy9hdXRvbWF0aWNhbGx5IGluaXRpYWxpemUgdGhlIERPTSB3aGVuIGl0J3MgcmVhZHkKCQlhdXRvSW5pdGlhbGl6ZVBhZ2U6IHRydWUsCgoJCXB1c2hTdGF0ZUVuYWJsZWQ6IHRydWUsCgoJCS8vIHR1cm4gb2YgYmluZGluZyB0byB0aGUgbmF0aXZlIG9yaWVudGF0aW9uY2hhbmdlIGR1ZSB0byBhbmRyb2lkIG9yaWVudGF0aW9uIGJlaGF2aW9yCgkJb3JpZW50YXRpb25DaGFuZ2VFbmFibGVkOiB0cnVlLAoKCQkvLyBTdXBwb3J0IGNvbmRpdGlvbnMgdGhhdCBtdXN0IGJlIG1ldCBpbiBvcmRlciB0byBwcm9jZWVkCgkJLy8gZGVmYXVsdCBlbmhhbmNlZCBxdWFsaWZpY2F0aW9ucyBhcmUgbWVkaWEgcXVlcnkgc3VwcG9ydCBPUiBJRSA3KwoJCWdyYWRlQTogZnVuY3Rpb24oKXsKCQkJcmV0dXJuICQuc3VwcG9ydC5tZWRpYXF1ZXJ5IHx8ICQubW9iaWxlLmJyb3dzZXIuaWUgJiYgJC5tb2JpbGUuYnJvd3Nlci5pZSA+PSA3OwoJCX0sCgoJCS8vIFRPRE8gbWlnaHQgYmUgdXNlZnVsIHVwc3RyZWFtIGluIGpxdWVyeSBpdHNlbGYgPwoJCWtleUNvZGU6IHsKCQkJQUxUOiAxOCwKCQkJQkFDS1NQQUNFOiA4LAoJCQlDQVBTX0xPQ0s6IDIwLAoJCQlDT01NQTogMTg4LAoJCQlDT01NQU5EOiA5MSwKCQkJQ09NTUFORF9MRUZUOiA5MSwgLy8gQ09NTUFORAoJCQlDT01NQU5EX1JJR0hUOiA5MywKCQkJQ09OVFJPTDogMTcsCgkJCURFTEVURTogNDYsCgkJCURPV046IDQwLAoJCQlFTkQ6IDM1LAoJCQlFTlRFUjogMTMsCgkJCUVTQ0FQRTogMjcsCgkJCUhPTUU6IDM2LAoJCQlJTlNFUlQ6IDQ1LAoJCQlMRUZUOiAzNywKCQkJTUVOVTogOTMsIC8vIENPTU1BTkRfUklHSFQKCQkJTlVNUEFEX0FERDogMTA3LAoJCQlOVU1QQURfREVDSU1BTDogMTEwLAoJCQlOVU1QQURfRElWSURFOiAxMTEsCgkJCU5VTVBBRF9FTlRFUjogMTA4LAoJCQlOVU1QQURfTVVMVElQTFk6IDEwNiwKCQkJTlVNUEFEX1NVQlRSQUNUOiAxMDksCgkJCVBBR0VfRE9XTjogMzQsCgkJCVBBR0VfVVA6IDMzLAoJCQlQRVJJT0Q6IDE5MCwKCQkJUklHSFQ6IDM5LAoJCQlTSElGVDogMTYsCgkJCVNQQUNFOiAzMiwKCQkJVEFCOiA5LAoJCQlVUDogMzgsCgkJCVdJTkRPV1M6IDkxIC8vIENPTU1BTkQKCQl9LAoKCQkvLyBTY3JvbGwgcGFnZSB2ZXJ0aWNhbGx5OiBzY3JvbGwgdG8gMCB0byBoaWRlIGlPUyBhZGRyZXNzIGJhciwgb3IgcGFzcyBhIFkgdmFsdWUKCQlzaWxlbnRTY3JvbGw6IGZ1bmN0aW9uKCB5cG9zICkgewoJCQlpZiAoICQudHlwZSggeXBvcyApICE9PSAibnVtYmVyIiApIHsKCQkJCXlwb3MgPSAkLm1vYmlsZS5kZWZhdWx0SG9tZVNjcm9sbDsKCQkJfQoKCQkJLy8gcHJldmVudCBzY3JvbGxzdGFydCBhbmQgc2Nyb2xsc3RvcCBldmVudHMKCQkJJC5ldmVudC5zcGVjaWFsLnNjcm9sbHN0YXJ0LmVuYWJsZWQgPSBmYWxzZTsKCgkJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgkJCQl3aW5kb3cuc2Nyb2xsVG8oIDAsIHlwb3MgKTsKCQkJCSQoIGRvY3VtZW50ICkudHJpZ2dlciggInNpbGVudHNjcm9sbCIsIHsgeDogMCwgeTogeXBvcyB9KTsKCQkJfSwgMjAgKTsKCgkJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgkJCQkkLmV2ZW50LnNwZWNpYWwuc2Nyb2xsc3RhcnQuZW5hYmxlZCA9IHRydWU7CgkJCX0sIDE1MCApOwoJCX0sCgoJCS8vIEV4cG9zZSBvdXIgY2FjaGUgZm9yIHRlc3RpbmcgcHVycG9zZXMuCgkJbnNOb3JtYWxpemVEaWN0OiBuc05vcm1hbGl6ZURpY3QsCgoJCS8vIFRha2UgYSBkYXRhIGF0dHJpYnV0ZSBwcm9wZXJ0eSwgcHJlcGVuZCB0aGUgbmFtZXNwYWNlCgkJLy8gYW5kIHRoZW4gY2FtZWwgY2FzZSB0aGUgYXR0cmlidXRlIHN0cmluZy4gQWRkIHRoZSByZXN1bHQKCQkvLyB0byBvdXIgbnNOb3JtYWxpemVEaWN0IHNvIHdlIGRvbid0IGhhdmUgdG8gZG8gdGhpcyBhZ2Fpbi4KCQluc05vcm1hbGl6ZTogZnVuY3Rpb24oIHByb3AgKSB7CgkJCWlmICggIXByb3AgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCXJldHVybiBuc05vcm1hbGl6ZURpY3RbIHByb3AgXSB8fCAoIG5zTm9ybWFsaXplRGljdFsgcHJvcCBdID0gJC5jYW1lbENhc2UoICQubW9iaWxlLm5zICsgcHJvcCApICk7CgkJfSwKCgkJZ2V0SW5oZXJpdGVkVGhlbWU6IGZ1bmN0aW9uKCBlbCwgZGVmYXVsdFRoZW1lICkgewoKCQkJLy8gRmluZCB0aGUgY2xvc2VzdCBwYXJlbnQgd2l0aCBhIHRoZW1lIGNsYXNzIG9uIGl0LiBOb3RlIHRoYXQKCQkJLy8gd2UgYXJlIG5vdCB1c2luZyAkLmZuLmNsb3Nlc3QoKSBvbiBwdXJwb3NlIGhlcmUgYmVjYXVzZSB0aGlzCgkJCS8vIG1ldGhvZCBnZXRzIGNhbGxlZCBxdWl0ZSBhIGJpdCBhbmQgd2UgbmVlZCBpdCB0byBiZSBhcyBmYXN0CgkJCS8vIGFzIHBvc3NpYmxlLgoKCQkJdmFyIGUgPSBlbFsgMCBdLAoJCQkJbHRyID0gIiIsCgkJCQlyZSA9IC91aS0oYmFyfGJvZHkpLShbYS16XSlcYi8sCgkJCQljLCBtOwoKCQkJd2hpbGUgKCBlICkgewoJCQkJdmFyIGMgPSBlLmNsYXNzTmFtZSB8fCAiIjsKCQkJCWlmICggKCBtID0gcmUuZXhlYyggYyApICkgJiYgKCBsdHIgPSBtWyAyIF0gKSApIHsKCQkJCQkvLyBXZSBmb3VuZCBhIHBhcmVudCB3aXRoIGEgdGhlbWUgY2xhc3MKCQkJCQkvLyBvbiBpdCBzbyBiYWlsIGZyb20gdGhpcyBsb29wLgoJCQkJCWJyZWFrOwoJCQkJfQoJCQkJZSA9IGUucGFyZW50Tm9kZTsKCQkJfQoKCQkJLy8gUmV0dXJuIHRoZSB0aGVtZSBsZXR0ZXIgd2UgZm91bmQsIGlmIG5vbmUsIHJldHVybiB0aGUKCQkJLy8gc3BlY2lmaWVkIGRlZmF1bHQuCgoJCQlyZXR1cm4gbHRyIHx8IGRlZmF1bHRUaGVtZSB8fCAiYSI7CgkJfSwKCgkJLy8gVE9ETyB0aGUgZm9sbG93aW5nICQgYW5kICQuZm4gZXh0ZW5zaW9ucyBjYW4vcHJvYmFibHkgc2hvdWxkIGJlIG1vdmVkIGludG8ganF1ZXJ5Lm1vYmlsZS5jb3JlLmhlbHBlcnMKCQkvLwoJCS8vIEZpbmQgdGhlIGNsb3Nlc3QgamF2YXNjcmlwdCBwYWdlIGVsZW1lbnQgdG8gZ2F0aGVyIHNldHRpbmdzIGRhdGEganNwZXJmIHRlc3QKCQkvLyBodHRwOi8vanNwZXJmLmNvbS9zaW5nbGUtY29tcGxleC1zZWxlY3Rvci12cy1tYW55LWNvbXBsZXgtc2VsZWN0b3JzL2VkaXQKCQkvLyBwb3NzaWJseSBuYWl2ZSwgYnV0IGl0IHNob3dzIHRoYXQgdGhlIHBhcnNpbmcgb3ZlcmhlYWQgZm9yICpqdXN0KiB0aGUgcGFnZSBzZWxlY3RvciB2cwoJCS8vIHRoZSBwYWdlIGFuZCBkaWFsb2cgc2VsZWN0b3IgaXMgbmVnbGlnYWJsZS4gVGhpcyBjb3VsZCBwcm9iYWJseSBiZSBzcGVlZCB1cCBieQoJCS8vIGRvaW5nIGEgc2ltaWxhciBwYXJlbnQgbm9kZSB0cmF2ZXJzYWwgdG8gdGhlIG9uZSBmb3VuZCBpbiB0aGUgaW5oZXJpdGVkIHRoZW1lIGNvZGUgYWJvdmUKCQljbG9zZXN0UGFnZURhdGE6IGZ1bmN0aW9uKCAkdGFyZ2V0ICkgewoJCQlyZXR1cm4gJHRhcmdldAoJCQkJLmNsb3Nlc3QoJzpqcW1EYXRhKHJvbGU9InBhZ2UiKSwgOmpxbURhdGEocm9sZT0iZGlhbG9nIiknKQoJCQkJLmRhdGEoInBhZ2UiKTsKCQl9Cgl9KTsKCgkvLyBNb2JpbGUgdmVyc2lvbiBvZiBkYXRhIGFuZCByZW1vdmVEYXRhIGFuZCBoYXNEYXRhIG1ldGhvZHMKCS8vIGVuc3VyZXMgYWxsIGRhdGEgaXMgc2V0IGFuZCByZXRyaWV2ZWQgdXNpbmcgalF1ZXJ5IE1vYmlsZSdzIGRhdGEgbmFtZXNwYWNlCgkkLmZuLmpxbURhdGEgPSBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7CgkJdmFyIHJlc3VsdDsKCQlpZiAoIHR5cGVvZiBwcm9wICE9ICJ1bmRlZmluZWQiICkgewoJCQlyZXN1bHQgPSB0aGlzLmRhdGEoIHByb3AgPyAkLm1vYmlsZS5uc05vcm1hbGl6ZSggcHJvcCApIDogcHJvcCwgdmFsdWUgKTsKCQl9CgkJcmV0dXJuIHJlc3VsdDsKCX07CgoJJC5qcW1EYXRhID0gZnVuY3Rpb24oIGVsZW0sIHByb3AsIHZhbHVlICkgewoJCXZhciByZXN1bHQ7CgkJaWYgKCB0eXBlb2YgcHJvcCAhPSAidW5kZWZpbmVkIiApIHsKCQkJcmVzdWx0ID0gJC5kYXRhKCBlbGVtLCBwcm9wID8gJC5tb2JpbGUubnNOb3JtYWxpemUoIHByb3AgKSA6IHByb3AsIHZhbHVlICk7CgkJfQoJCXJldHVybiByZXN1bHQ7Cgl9OwoKCSQuZm4uanFtUmVtb3ZlRGF0YSA9IGZ1bmN0aW9uKCBwcm9wICkgewoJCXJldHVybiB0aGlzLnJlbW92ZURhdGEoICQubW9iaWxlLm5zTm9ybWFsaXplKCBwcm9wICkgKTsKCX07CgoJJC5qcW1SZW1vdmVEYXRhID0gZnVuY3Rpb24oIGVsZW0sIHByb3AgKSB7CgkJcmV0dXJuICQucmVtb3ZlRGF0YSggZWxlbSwgJC5tb2JpbGUubnNOb3JtYWxpemUoIHByb3AgKSApOwoJfTsKCgkkLmZuLnJlbW92ZVdpdGhEZXBlbmRlbnRzID0gZnVuY3Rpb24oKSB7CgkJJC5yZW1vdmVXaXRoRGVwZW5kZW50cyggdGhpcyApOwoJfTsKCgkkLnJlbW92ZVdpdGhEZXBlbmRlbnRzID0gZnVuY3Rpb24oIGVsZW0gKSB7CgkJdmFyICRlbGVtID0gJCggZWxlbSApOwoKCQkoICRlbGVtLmpxbURhdGEoJ2RlcGVuZGVudHMnKSB8fCAkKCkgKS5yZW1vdmUoKTsKCQkkZWxlbS5yZW1vdmUoKTsKCX07CgoJJC5mbi5hZGREZXBlbmRlbnRzID0gZnVuY3Rpb24oIG5ld0RlcGVuZGVudHMgKSB7CgkJJC5hZGREZXBlbmRlbnRzKCAkKHRoaXMpLCBuZXdEZXBlbmRlbnRzICk7Cgl9OwoKCSQuYWRkRGVwZW5kZW50cyA9IGZ1bmN0aW9uKCBlbGVtLCBuZXdEZXBlbmRlbnRzICkgewoJCXZhciBkZXBlbmRlbnRzID0gJChlbGVtKS5qcW1EYXRhKCAnZGVwZW5kZW50cycgKSB8fCAkKCk7CgoJCSQoZWxlbSkuanFtRGF0YSggJ2RlcGVuZGVudHMnLCAkLm1lcmdlKGRlcGVuZGVudHMsIG5ld0RlcGVuZGVudHMpICk7Cgl9OwoKCS8vIG5vdGUgdGhhdCB0aGlzIGhlbHBlciBkb2Vzbid0IGF0dGVtcHQgdG8gaGFuZGxlIHRoZSBjYWxsYmFjawoJLy8gb3Igc2V0dGluZyBvZiBhbiBodG1sIGVsZW1lbnRzIHRleHQsIGl0cyBvbmx5IHB1cnBvc2UgaXMKCS8vIHRvIHJldHVybiB0aGUgaHRtbCBlbmNvZGVkIHZlcnNpb24gb2YgdGhlIHRleHQgaW4gYWxsIGNhc2VzLiAodGh1cyB0aGUgbmFtZSkKCSQuZm4uZ2V0RW5jb2RlZFRleHQgPSBmdW5jdGlvbigpIHsKCQlyZXR1cm4gJCggIjxkaXYvPiIgKS50ZXh0KCAkKHRoaXMpLnRleHQoKSApLmh0bWwoKTsKCX07CgoJLy8gTW9ua2V5LXBhdGNoaW5nIFNpenpsZSB0byBmaWx0ZXIgdGhlIDpqcW1EYXRhIHNlbGVjdG9yCgl2YXIgb2xkRmluZCA9ICQuZmluZCwKCQlqcW1EYXRhUkUgPSAvOmpxbURhdGFcKChbXildKilcKS9nOwoKCSQuZmluZCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmV0LCBleHRyYSApIHsKCQlzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UoIGpxbURhdGFSRSwgIltkYXRhLSIgKyAoICQubW9iaWxlLm5zIHx8ICIiICkgKyAiJDFdIiApOwoKCQlyZXR1cm4gb2xkRmluZC5jYWxsKCB0aGlzLCBzZWxlY3RvciwgY29udGV4dCwgcmV0LCBleHRyYSApOwoJfTsKCgkkLmV4dGVuZCggJC5maW5kLCBvbGRGaW5kICk7CgoJJC5maW5kLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgc2V0ICkgewoJCXJldHVybiAkLmZpbmQoIGV4cHIsIG51bGwsIG51bGwsIHNldCApOwoJfTsKCgkkLmZpbmQubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIG5vZGUsIGV4cHIgKSB7CgkJcmV0dXJuICQuZmluZCggZXhwciwgbnVsbCwgbnVsbCwgWyBub2RlIF0gKS5sZW5ndGggPiAwOwoJfTsKfSkoIGpRdWVyeSwgdGhpcyApOwoKLyoKKiBjb3JlIHV0aWxpdGllcyBmb3IgYXV0byBhamF4IG5hdmlnYXRpb24sIGJhc2UgdGFnIG1nbXQsCiovCgooIGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgoJLy9kZWZpbmUgdmFycyBmb3IgaW50ZXJhbCB1c2UKCXZhciAkd2luZG93ID0gJCggd2luZG93ICksCgkJJGh0bWwgPSAkKCAnaHRtbCcgKSwKCQkkaGVhZCA9ICQoICdoZWFkJyApLAoKCQkvL3VybCBwYXRoIGhlbHBlcnMgZm9yIHVzZSBpbiByZWxhdGl2ZSB1cmwgbWFuYWdlbWVudAoJCXBhdGggPSB7CgoJCQkvLyBUaGlzIHNjYXJ5IGxvb2tpbmcgcmVndWxhciBleHByZXNzaW9uIHBhcnNlcyBhbiBhYnNvbHV0ZSBVUkwgb3IgaXRzIHJlbGF0aXZlCgkJCS8vIHZhcmlhbnRzIChwcm90b2NvbCwgc2l0ZSwgZG9jdW1lbnQsIHF1ZXJ5LCBhbmQgaGFzaCksIGludG8gdGhlIHZhcmlvdXMKCQkJLy8gY29tcG9uZW50cyAocHJvdG9jb2wsIGhvc3QsIHBhdGgsIHF1ZXJ5LCBmcmFnbWVudCwgZXRjIHRoYXQgbWFrZSB1cCB0aGUKCQkJLy8gVVJMIGFzIHdlbGwgYXMgc29tZSBvdGhlciBjb21tb25seSB1c2VkIHN1Yi1wYXJ0cy4gV2hlbiB1c2VkIHdpdGggUmVnRXhwLmV4ZWMoKQoJCQkvLyBvciBTdHJpbmcubWF0Y2gsIGl0IHBhcnNlcyB0aGUgVVJMIGludG8gYSByZXN1bHRzIGFycmF5IHRoYXQgbG9va3MgbGlrZSB0aGlzOgoJCQkvLwoJCQkvLyAgICAgWzBdOiBodHRwOi8vamJsYXM6cGFzc3dvcmRAbXljb21wYW55LmNvbTo4MDgwL21haWwvaW5ib3g/bXNnPTEyMzQmdHlwZT11bnJlYWQjbXNnLWNvbnRlbnQKCQkJLy8gICAgIFsxXTogaHR0cDovL2pibGFzOnBhc3N3b3JkQG15Y29tcGFueS5jb206ODA4MC9tYWlsL2luYm94P21zZz0xMjM0JnR5cGU9dW5yZWFkCgkJCS8vICAgICBbMl06IGh0dHA6Ly9qYmxhczpwYXNzd29yZEBteWNvbXBhbnkuY29tOjgwODAvbWFpbC9pbmJveAoJCQkvLyAgICAgWzNdOiBodHRwOi8vamJsYXM6cGFzc3dvcmRAbXljb21wYW55LmNvbTo4MDgwCgkJCS8vICAgICBbNF06IGh0dHA6CgkJCS8vICAgICBbNV06IC8vCgkJCS8vICAgICBbNl06IGpibGFzOnBhc3N3b3JkQG15Y29tcGFueS5jb206ODA4MAoJCQkvLyAgICAgWzddOiBqYmxhczpwYXNzd29yZAoJCQkvLyAgICAgWzhdOiBqYmxhcwoJCQkvLyAgICAgWzldOiBwYXNzd29yZAoJCQkvLyAgICBbMTBdOiBteWNvbXBhbnkuY29tOjgwODAKCQkJLy8gICAgWzExXTogbXljb21wYW55LmNvbQoJCQkvLyAgICBbMTJdOiA4MDgwCgkJCS8vICAgIFsxM106IC9tYWlsL2luYm94CgkJCS8vICAgIFsxNF06IC9tYWlsLwoJCQkvLyAgICBbMTVdOiBpbmJveAoJCQkvLyAgICBbMTZdOiA/bXNnPTEyMzQmdHlwZT11bnJlYWQKCQkJLy8gICAgWzE3XTogI21zZy1jb250ZW50CgkJCS8vCgkJCXVybFBhcnNlUkU6IC9eKCgoKFteOlwvI1w/XSs6KT8oPzooXC9cLykoKD86KChbXjpAXC8jXD9dKykoPzpcOihbXjpAXC8jXD9dKykpPylAKT8oKFteOlwvI1w/XF1cW10rfFxbW15cL1xdQCM/XStcXSkoPzpcOihbMC05XSspKT8pKT8pPyk/KChcLz8oPzpbXlwvXD8jXStcLyspKikoW15cPyNdKikpKT8oXD9bXiNdKyk/KSgjLiopPy8sCgoJCQkvL1BhcnNlIGEgVVJMIGludG8gYSBzdHJ1Y3R1cmUgdGhhdCBhbGxvd3MgZWFzeSBhY2Nlc3MgdG8KCQkJLy9hbGwgb2YgdGhlIFVSTCBjb21wb25lbnRzIGJ5IG5hbWUuCgkJCXBhcnNlVXJsOiBmdW5jdGlvbiggdXJsICkgewoJCQkJLy8gSWYgd2UncmUgcGFzc2VkIGFuIG9iamVjdCwgd2UnbGwgYXNzdW1lIHRoYXQgaXQgaXMKCQkJCS8vIGEgcGFyc2VkIHVybCBvYmplY3QgYW5kIGp1c3QgcmV0dXJuIGl0IGJhY2sgdG8gdGhlIGNhbGxlci4KCQkJCWlmICggJC50eXBlKCB1cmwgKSA9PT0gIm9iamVjdCIgKSB7CgkJCQkJcmV0dXJuIHVybDsKCQkJCX0KCgkJCQl2YXIgbWF0Y2hlcyA9IHBhdGgudXJsUGFyc2VSRS5leGVjKCB1cmwgfHwgIiIgKSB8fCBbXTsKCgkJCQkJLy8gQ3JlYXRlIGFuIG9iamVjdCB0aGF0IGFsbG93cyB0aGUgY2FsbGVyIHRvIGFjY2VzcyB0aGUgc3ViLW1hdGNoZXMKCQkJCQkvLyBieSBuYW1lLiBOb3RlIHRoYXQgSUUgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcgaW5zdGVhZCBvZiB1bmRlZmluZWQsCgkJCQkJLy8gbGlrZSBhbGwgb3RoZXIgYnJvd3NlcnMgZG8sIHNvIHdlIG5vcm1hbGl6ZSBldmVyeXRoaW5nIHNvIGl0cyBjb25zaXN0ZW50CgkJCQkJLy8gbm8gbWF0dGVyIHdoYXQgYnJvd3NlciB3ZSdyZSBydW5uaW5nIG9uLgoJCQkJCXJldHVybiB7CgkJCQkJCWhyZWY6ICAgICAgICAgbWF0Y2hlc1sgIDAgXSB8fCAiIiwKCQkJCQkJaHJlZk5vSGFzaDogICBtYXRjaGVzWyAgMSBdIHx8ICIiLAoJCQkJCQlocmVmTm9TZWFyY2g6IG1hdGNoZXNbICAyIF0gfHwgIiIsCgkJCQkJCWRvbWFpbjogICAgICAgbWF0Y2hlc1sgIDMgXSB8fCAiIiwKCQkJCQkJcHJvdG9jb2w6ICAgICBtYXRjaGVzWyAgNCBdIHx8ICIiLAoJCQkJCQlkb3VibGVTbGFzaDogIG1hdGNoZXNbICA1IF0gfHwgIiIsCgkJCQkJCWF1dGhvcml0eTogICAgbWF0Y2hlc1sgIDYgXSB8fCAiIiwKCQkJCQkJdXNlcm5hbWU6ICAgICBtYXRjaGVzWyAgOCBdIHx8ICIiLAoJCQkJCQlwYXNzd29yZDogICAgIG1hdGNoZXNbICA5IF0gfHwgIiIsCgkJCQkJCWhvc3Q6ICAgICAgICAgbWF0Y2hlc1sgMTAgXSB8fCAiIiwKCQkJCQkJaG9zdG5hbWU6ICAgICBtYXRjaGVzWyAxMSBdIHx8ICIiLAoJCQkJCQlwb3J0OiAgICAgICAgIG1hdGNoZXNbIDEyIF0gfHwgIiIsCgkJCQkJCXBhdGhuYW1lOiAgICAgbWF0Y2hlc1sgMTMgXSB8fCAiIiwKCQkJCQkJZGlyZWN0b3J5OiAgICBtYXRjaGVzWyAxNCBdIHx8ICIiLAoJCQkJCQlmaWxlbmFtZTogICAgIG1hdGNoZXNbIDE1IF0gfHwgIiIsCgkJCQkJCXNlYXJjaDogICAgICAgbWF0Y2hlc1sgMTYgXSB8fCAiIiwKCQkJCQkJaGFzaDogICAgICAgICBtYXRjaGVzWyAxNyBdIHx8ICIiCgkJCQkJfTsKCQkJfSwKCgkJCS8vVHVybiByZWxQYXRoIGludG8gYW4gYXNib2x1dGUgcGF0aC4gYWJzUGF0aCBpcwoJCQkvL2FuIG9wdGlvbmFsIGFic29sdXRlIHBhdGggd2hpY2ggZGVzY3JpYmVzIHdoYXQKCQkJLy9yZWxQYXRoIGlzIHJlbGF0aXZlIHRvLgoJCQltYWtlUGF0aEFic29sdXRlOiBmdW5jdGlvbiggcmVsUGF0aCwgYWJzUGF0aCApIHsKCQkJCWlmICggcmVsUGF0aCAmJiByZWxQYXRoLmNoYXJBdCggMCApID09PSAiLyIgKSB7CgkJCQkJcmV0dXJuIHJlbFBhdGg7CgkJCQl9CgoJCQkJcmVsUGF0aCA9IHJlbFBhdGggfHwgIiI7CgkJCQlhYnNQYXRoID0gYWJzUGF0aCA/IGFic1BhdGgucmVwbGFjZSggL15cL3woXC9bXlwvXSp8W15cL10rKSQvZywgIiIgKSA6ICIiOwoKCQkJCXZhciBhYnNTdGFjayA9IGFic1BhdGggPyBhYnNQYXRoLnNwbGl0KCAiLyIgKSA6IFtdLAoJCQkJCXJlbFN0YWNrID0gcmVsUGF0aC5zcGxpdCggIi8iICk7CgkJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCByZWxTdGFjay5sZW5ndGg7IGkrKyApIHsKCQkJCQl2YXIgZCA9IHJlbFN0YWNrWyBpIF07CgkJCQkJc3dpdGNoICggZCApIHsKCQkJCQkJY2FzZSAiLiI6CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAiLi4iOgoJCQkJCQkJaWYgKCBhYnNTdGFjay5sZW5ndGggKSB7CgkJCQkJCQkJYWJzU3RhY2sucG9wKCk7CgkJCQkJCQl9CgkJCQkJCQlicmVhazsKCQkJCQkJZGVmYXVsdDoKCQkJCQkJCWFic1N0YWNrLnB1c2goIGQgKTsKCQkJCQkJCWJyZWFrOwoJCQkJCX0KCQkJCX0KCQkJCXJldHVybiAiLyIgKyBhYnNTdGFjay5qb2luKCAiLyIgKTsKCQkJfSwKCgkJCS8vUmV0dXJucyB0cnVlIGlmIGJvdGggdXJscyBoYXZlIHRoZSBzYW1lIGRvbWFpbi4KCQkJaXNTYW1lRG9tYWluOiBmdW5jdGlvbiggYWJzVXJsMSwgYWJzVXJsMiApIHsKCQkJCXJldHVybiBwYXRoLnBhcnNlVXJsKCBhYnNVcmwxICkuZG9tYWluID09PSBwYXRoLnBhcnNlVXJsKCBhYnNVcmwyICkuZG9tYWluOwoJCQl9LAoKCQkJLy9SZXR1cm5zIHRydWUgZm9yIGFueSByZWxhdGl2ZSB2YXJpYW50LgoJCQlpc1JlbGF0aXZlVXJsOiBmdW5jdGlvbiggdXJsICkgewoJCQkJLy8gQWxsIHJlbGF0aXZlIFVybCB2YXJpYW50cyBoYXZlIG9uZSB0aGluZyBpbiBjb21tb24sIG5vIHByb3RvY29sLgoJCQkJcmV0dXJuIHBhdGgucGFyc2VVcmwoIHVybCApLnByb3RvY29sID09PSAiIjsKCQkJfSwKCgkJCS8vUmV0dXJucyB0cnVlIGZvciBhbiBhYnNvbHV0ZSB1cmwuCgkJCWlzQWJzb2x1dGVVcmw6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQlyZXR1cm4gcGF0aC5wYXJzZVVybCggdXJsICkucHJvdG9jb2wgIT09ICIiOwoJCQl9LAoKCQkJLy9UdXJuIHRoZSBzcGVjaWZpZWQgcmVhbHRpdmUgVVJMIGludG8gYW4gYWJzb2x1dGUgb25lLiBUaGlzIGZ1bmN0aW9uCgkJCS8vY2FuIGhhbmRsZSBhbGwgcmVsYXRpdmUgdmFyaWFudHMgKHByb3RvY29sLCBzaXRlLCBkb2N1bWVudCwgcXVlcnksIGZyYWdtZW50KS4KCQkJbWFrZVVybEFic29sdXRlOiBmdW5jdGlvbiggcmVsVXJsLCBhYnNVcmwgKSB7CgkJCQlpZiAoICFwYXRoLmlzUmVsYXRpdmVVcmwoIHJlbFVybCApICkgewoJCQkJCXJldHVybiByZWxVcmw7CgkJCQl9CgoJCQkJdmFyIHJlbE9iaiA9IHBhdGgucGFyc2VVcmwoIHJlbFVybCApLAoJCQkJCWFic09iaiA9IHBhdGgucGFyc2VVcmwoIGFic1VybCApLAoJCQkJCXByb3RvY29sID0gcmVsT2JqLnByb3RvY29sIHx8IGFic09iai5wcm90b2NvbCwKCQkJCQlkb3VibGVTbGFzaCA9IHJlbE9iai5wcm90b2NvbCA/IHJlbE9iai5kb3VibGVTbGFzaCA6ICggcmVsT2JqLmRvdWJsZVNsYXNoIHx8IGFic09iai5kb3VibGVTbGFzaCApLAoJCQkJCWF1dGhvcml0eSA9IHJlbE9iai5hdXRob3JpdHkgfHwgYWJzT2JqLmF1dGhvcml0eSwKCQkJCQloYXNQYXRoID0gcmVsT2JqLnBhdGhuYW1lICE9PSAiIiwKCQkJCQlwYXRobmFtZSA9IHBhdGgubWFrZVBhdGhBYnNvbHV0ZSggcmVsT2JqLnBhdGhuYW1lIHx8IGFic09iai5maWxlbmFtZSwgYWJzT2JqLnBhdGhuYW1lICksCgkJCQkJc2VhcmNoID0gcmVsT2JqLnNlYXJjaCB8fCAoICFoYXNQYXRoICYmIGFic09iai5zZWFyY2ggKSB8fCAiIiwKCQkJCQloYXNoID0gcmVsT2JqLmhhc2g7CgoJCQkJcmV0dXJuIHByb3RvY29sICsgZG91YmxlU2xhc2ggKyBhdXRob3JpdHkgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7CgkJCX0sCgoJCQkvL0FkZCBzZWFyY2ggKGFrYSBxdWVyeSkgcGFyYW1zIHRvIHRoZSBzcGVjaWZpZWQgdXJsLgoJCQlhZGRTZWFyY2hQYXJhbXM6IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcyApIHsKCQkJCXZhciB1ID0gcGF0aC5wYXJzZVVybCggdXJsICksCgkJCQkJcCA9ICggdHlwZW9mIHBhcmFtcyA9PT0gIm9iamVjdCIgKSA/ICQucGFyYW0oIHBhcmFtcyApIDogcGFyYW1zLAoJCQkJCXMgPSB1LnNlYXJjaCB8fCAiPyI7CgkJCQlyZXR1cm4gdS5ocmVmTm9TZWFyY2ggKyBzICsgKCBzLmNoYXJBdCggcy5sZW5ndGggLSAxICkgIT09ICI/IiA/ICImIiA6ICIiICkgKyBwICsgKCB1Lmhhc2ggfHwgIiIgKTsKCQkJfSwKCgkJCWNvbnZlcnRVcmxUb0RhdGFVcmw6IGZ1bmN0aW9uKCBhYnNVcmwgKSB7CgkJCQl2YXIgdSA9IHBhdGgucGFyc2VVcmwoIGFic1VybCApOwoJCQkJaWYgKCBwYXRoLmlzRW1iZWRkZWRQYWdlKCB1ICkgKSB7CgkJCQkgICAgLy8gRm9yIGVtYmVkZGVkIHBhZ2VzLCByZW1vdmUgdGhlIGRpYWxvZyBoYXNoIGtleSBhcyBpbiBnZXRGaWxlUGF0aCgpLAoJCQkJICAgIC8vIG90aGVyd2lzZSB0aGUgRGF0YSBVcmwgd29uJ3QgbWF0Y2ggdGhlIGlkIG9mIHRoZSBlbWJlZGRlZCBQYWdlLgoJCQkJCXJldHVybiB1Lmhhc2guc3BsaXQoIGRpYWxvZ0hhc2hLZXkgKVswXS5yZXBsYWNlKCAvXiMvLCAiIiApOwoJCQkJfSBlbHNlIGlmICggcGF0aC5pc1NhbWVEb21haW4oIHUsIGRvY3VtZW50QmFzZSApICkgewoJCQkJCXJldHVybiB1LmhyZWZOb0hhc2gucmVwbGFjZSggZG9jdW1lbnRCYXNlLmRvbWFpbiwgIiIgKTsKCQkJCX0KCQkJCXJldHVybiBhYnNVcmw7CgkJCX0sCgoJCQkvL2dldCBwYXRoIGZyb20gY3VycmVudCBoYXNoLCBvciBmcm9tIGEgZmlsZSBwYXRoCgkJCWdldDogZnVuY3Rpb24oIG5ld1BhdGggKSB7CgkJCQlpZiggbmV3UGF0aCA9PT0gdW5kZWZpbmVkICkgewoJCQkJCW5ld1BhdGggPSBsb2NhdGlvbi5oYXNoOwoJCQkJfQoJCQkJcmV0dXJuIHBhdGguc3RyaXBIYXNoKCBuZXdQYXRoICkucmVwbGFjZSggL1teXC9dKlwuW15cLypdKyQvLCAnJyApOwoJCQl9LAoKCQkJLy9yZXR1cm4gdGhlIHN1YnN0cmluZyBvZiBhIGZpbGVwYXRoIGJlZm9yZSB0aGUgc3ViLXBhZ2Uga2V5LCBmb3IgbWFraW5nIGEgc2VydmVyIHJlcXVlc3QKCQkJZ2V0RmlsZVBhdGg6IGZ1bmN0aW9uKCBwYXRoICkgewoJCQkJdmFyIHNwbGl0a2V5ID0gJyYnICsgJC5tb2JpbGUuc3ViUGFnZVVybEtleTsKCQkJCXJldHVybiBwYXRoICYmIHBhdGguc3BsaXQoIHNwbGl0a2V5IClbMF0uc3BsaXQoIGRpYWxvZ0hhc2hLZXkgKVswXTsKCQkJfSwKCgkJCS8vc2V0IGxvY2F0aW9uIGhhc2ggdG8gcGF0aAoJCQlzZXQ6IGZ1bmN0aW9uKCBwYXRoICkgewoJCQkJbG9jYXRpb24uaGFzaCA9IHBhdGg7CgkJCX0sCgoJCQkvL3Rlc3QgaWYgYSBnaXZlbiB1cmwgKHN0cmluZykgaXMgYSBwYXRoCgkJCS8vTk9URSBtaWdodCBiZSBleGNlcHRpb25hbGx5IG5haXZlCgkJCWlzUGF0aDogZnVuY3Rpb24oIHVybCApIHsKCQkJCXJldHVybiAoIC9cLy8gKS50ZXN0KCB1cmwgKTsKCQkJfSwKCgkJCS8vcmV0dXJuIGEgdXJsIHBhdGggd2l0aCB0aGUgd2luZG93J3MgbG9jYXRpb24gcHJvdG9jb2wvaG9zdG5hbWUvcGF0aG5hbWUgcmVtb3ZlZAoJCQljbGVhbjogZnVuY3Rpb24oIHVybCApIHsKCQkJCXJldHVybiB1cmwucmVwbGFjZSggZG9jdW1lbnRCYXNlLmRvbWFpbiwgIiIgKTsKCQkJfSwKCgkJCS8vanVzdCByZXR1cm4gdGhlIHVybCB3aXRob3V0IGFuIGluaXRpYWwgIwoJCQlzdHJpcEhhc2g6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQlyZXR1cm4gdXJsLnJlcGxhY2UoIC9eIy8sICIiICk7CgkJCX0sCgoJCQkvL3JlbW92ZSB0aGUgcHJlY2VkaW5nIGhhc2gsIGFueSBxdWVyeSBwYXJhbXMsIGFuZCBkaWFsb2cgbm90YXRpb25zCgkJCWNsZWFuSGFzaDogZnVuY3Rpb24oIGhhc2ggKSB7CgkJCQlyZXR1cm4gcGF0aC5zdHJpcEhhc2goIGhhc2gucmVwbGFjZSggL1w/LiokLywgIiIgKS5yZXBsYWNlKCBkaWFsb2dIYXNoS2V5LCAiIiApICk7CgkJCX0sCgoJCQkvL2NoZWNrIHdoZXRoZXIgYSB1cmwgaXMgcmVmZXJlbmNpbmcgdGhlIHNhbWUgZG9tYWluLCBvciBhbiBleHRlcm5hbCBkb21haW4gb3IgZGlmZmVyZW50IHByb3RvY29sCgkJCS8vY291bGQgYmUgbWFpbHRvLCBldGMKCQkJaXNFeHRlcm5hbDogZnVuY3Rpb24oIHVybCApIHsKCQkJCXZhciB1ID0gcGF0aC5wYXJzZVVybCggdXJsICk7CgkJCQlyZXR1cm4gdS5wcm90b2NvbCAmJiB1LmRvbWFpbiAhPT0gZG9jdW1lbnRVcmwuZG9tYWluID8gdHJ1ZSA6IGZhbHNlOwoJCQl9LAoKCQkJaGFzUHJvdG9jb2w6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQlyZXR1cm4gKCAvXig6P1x3KzopLyApLnRlc3QoIHVybCApOwoJCQl9LAoKCQkJLy9jaGVjayBpZiB0aGUgc3BlY2lmaWVkIHVybCByZWZlcnMgdG8gdGhlIGZpcnN0IHBhZ2UgaW4gdGhlIG1haW4gYXBwbGljYXRpb24gZG9jdW1lbnQuCgkJCWlzRmlyc3RQYWdlVXJsOiBmdW5jdGlvbiggdXJsICkgewoJCQkJLy8gV2Ugb25seSBkZWFsIHdpdGggYWJzb2x1dGUgcGF0aHMuCgkJCQl2YXIgdSA9IHBhdGgucGFyc2VVcmwoIHBhdGgubWFrZVVybEFic29sdXRlKCB1cmwsIGRvY3VtZW50QmFzZSApICksCgoJCQkJCS8vIERvZXMgdGhlIHVybCBoYXZlIHRoZSBzYW1lIHBhdGggYXMgdGhlIGRvY3VtZW50PwoJCQkJCXNhbWVQYXRoID0gdS5ocmVmTm9IYXNoID09PSBkb2N1bWVudFVybC5ocmVmTm9IYXNoIHx8ICggZG9jdW1lbnRCYXNlRGlmZmVycyAmJiB1LmhyZWZOb0hhc2ggPT09IGRvY3VtZW50QmFzZS5ocmVmTm9IYXNoICksCgoJCQkJCS8vIEdldCB0aGUgZmlyc3QgcGFnZSBlbGVtZW50LgoJCQkJCWZwID0gJC5tb2JpbGUuZmlyc3RQYWdlLAoKCQkJCQkvLyBHZXQgdGhlIGlkIG9mIHRoZSBmaXJzdCBwYWdlIGVsZW1lbnQgaWYgaXQgaGFzIG9uZS4KCQkJCQlmcElkID0gZnAgJiYgZnBbMF0gPyBmcFswXS5pZCA6IHVuZGVmaW5lZDsKCgkJCQkJLy8gVGhlIHVybCByZWZlcnMgdG8gdGhlIGZpcnN0IHBhZ2UgaWYgdGhlIHBhdGggbWF0Y2hlcyB0aGUgZG9jdW1lbnQgYW5kCgkJCQkJLy8gaXQgZWl0aGVyIGhhcyBubyBoYXNoIHZhbHVlLCBvciB0aGUgaGFzaCBpcyBleGFjdGx5IGVxdWFsIHRvIHRoZSBpZCBvZiB0aGUKCQkJCQkvLyBmaXJzdCBwYWdlIGVsZW1lbnQuCgkJCQkJcmV0dXJuIHNhbWVQYXRoICYmICggIXUuaGFzaCB8fCB1Lmhhc2ggPT09ICIjIiB8fCAoIGZwSWQgJiYgdS5oYXNoLnJlcGxhY2UoIC9eIy8sICIiICkgPT09IGZwSWQgKSApOwoJCQl9LAoKCQkJaXNFbWJlZGRlZFBhZ2U6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQl2YXIgdSA9IHBhdGgucGFyc2VVcmwoIHVybCApOwoKCQkJCS8vaWYgdGhlIHBhdGggaXMgYWJzb2x1dGUsIHRoZW4gd2UgbmVlZCB0byBjb21wYXJlIHRoZSB1cmwgYWdhaW5zdAoJCQkJLy9ib3RoIHRoZSBkb2N1bWVudFVybCBhbmQgdGhlIGRvY3VtZW50QmFzZS4gVGhlIG1haW4gcmVhc29uIGZvciB0aGlzCgkJCQkvL2lzIHRoYXQgbGlua3MgZW1iZWRkZWQgd2l0aGluIGV4dGVybmFsIGRvY3VtZW50cyB3aWxsIHJlZmVyIHRvIHRoZQoJCQkJLy9hcHBsaWNhdGlvbiBkb2N1bWVudCwgd2hlcmVhcyBsaW5rcyBlbWJlZGRlZCB3aXRoaW4gdGhlIGFwcGxpY2F0aW9uCgkJCQkvL2RvY3VtZW50IHdpbGwgYmUgcmVzb2x2ZWQgYWdhaW5zdCB0aGUgZG9jdW1lbnQgYmFzZS4KCQkJCWlmICggdS5wcm90b2NvbCAhPT0gIiIgKSB7CgkJCQkJcmV0dXJuICggdS5oYXNoICYmICggdS5ocmVmTm9IYXNoID09PSBkb2N1bWVudFVybC5ocmVmTm9IYXNoIHx8ICggZG9jdW1lbnRCYXNlRGlmZmVycyAmJiB1LmhyZWZOb0hhc2ggPT09IGRvY3VtZW50QmFzZS5ocmVmTm9IYXNoICkgKSApOwoJCQkJfQoJCQkJcmV0dXJuICgvXiMvKS50ZXN0KCB1LmhyZWYgKTsKCQkJfSwKCgoJCQkvLyBTb21lIGVtYmVkZGVkIGJyb3dzZXJzLCBsaWtlIHRoZSB3ZWIgdmlldyBpbiBQaG9uZSBHYXAsIGFsbG93IGNyb3NzLWRvbWFpbiBYSFIKCQkJLy8gcmVxdWVzdHMgaWYgdGhlIGRvY3VtZW50IGRvaW5nIHRoZSByZXF1ZXN0IHdhcyBsb2FkZWQgdmlhIHRoZSBmaWxlOi8vIHByb3RvY29sLgoJCQkvLyBUaGlzIGlzIHVzdWFsbHkgdG8gYWxsb3cgdGhlIGFwcGxpY2F0aW9uIHRvICJwaG9uZSBob21lIiBhbmQgZmV0Y2ggYXBwIHNwZWNpZmljCgkJCS8vIGRhdGEuIFdlIG5vcm1hbGx5IGxldCB0aGUgYnJvd3NlciBoYW5kbGUgZXh0ZXJuYWwvY3Jvc3MtZG9tYWluIHVybHMsIGJ1dCBpZiB0aGUKCQkJLy8gYWxsb3dDcm9zc0RvbWFpblBhZ2VzIG9wdGlvbiBpcyB0cnVlLCB3ZSB3aWxsIGFsbG93IGNyb3NzLWRvbWFpbiBodHRwL2h0dHBzCgkJCS8vIHJlcXVlc3RzIHRvIGdvIHRocm91Z2ggb3VyIHBhZ2UgbG9hZGluZyBsb2dpYy4KCQkJaXNQZXJtaXR0ZWRDcm9zc0RvbWFpblJlcXVlc3Q6IGZ1bmN0aW9uKCBkb2NVcmwsIHJlcVVybCApIHsKCQkJCXJldHVybiAkLm1vYmlsZS5hbGxvd0Nyb3NzRG9tYWluUGFnZXMKCQkJCQkmJiBkb2NVcmwucHJvdG9jb2wgPT09ICJmaWxlOiIKCQkJCQkmJiByZXFVcmwuc2VhcmNoKCAvXmh0dHBzPzovICkgIT0gLTE7CgkJCX0KCQl9LAoKCQkvL3dpbGwgYmUgZGVmaW5lZCB3aGVuIGEgbGluayBpcyBjbGlja2VkIGFuZCBnaXZlbiBhbiBhY3RpdmUgY2xhc3MKCQkkYWN0aXZlQ2xpY2tlZExpbmsgPSBudWxsLAoKCQkvL3VybEhpc3RvcnkgaXMgcHVyZWx5IGhlcmUgdG8gbWFrZSBndWVzc2VzIGF0IHdoZXRoZXIgdGhlIGJhY2sgb3IgZm9yd2FyZCBidXR0b24gd2FzIGNsaWNrZWQKCQkvL2FuZCBwcm92aWRlIGFuIGFwcHJvcHJpYXRlIHRyYW5zaXRpb24KCQl1cmxIaXN0b3J5ID0gewoJCQkvLyBBcnJheSBvZiBwYWdlcyB0aGF0IGFyZSB2aXNpdGVkIGR1cmluZyBhIHNpbmdsZSBwYWdlIGxvYWQuCgkJCS8vIEVhY2ggaGFzIGEgdXJsIGFuZCBvcHRpb25hbCB0cmFuc2l0aW9uLCB0aXRsZSwgYW5kIHBhZ2VVcmwgKHdoaWNoIHJlcHJlc2VudHMgdGhlIGZpbGUgcGF0aCwgaW4gY2FzZXMgd2hlcmUgVVJMIGlzIG9ic2N1cmVkLCBzdWNoIGFzIGRpYWxvZ3MpCgkJCXN0YWNrOiBbXSwKCgkJCS8vbWFpbnRhaW4gYW4gaW5kZXggbnVtYmVyIGZvciB0aGUgYWN0aXZlIHBhZ2UgaW4gdGhlIHN0YWNrCgkJCWFjdGl2ZUluZGV4OiAwLAoKCQkJLy9nZXQgYWN0aXZlCgkJCWdldEFjdGl2ZTogZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gdXJsSGlzdG9yeS5zdGFja1sgdXJsSGlzdG9yeS5hY3RpdmVJbmRleCBdOwoJCQl9LAoKCQkJZ2V0UHJldjogZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gdXJsSGlzdG9yeS5zdGFja1sgdXJsSGlzdG9yeS5hY3RpdmVJbmRleCAtIDEgXTsKCQkJfSwKCgkJCWdldE5leHQ6IGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuIHVybEhpc3Rvcnkuc3RhY2tbIHVybEhpc3RvcnkuYWN0aXZlSW5kZXggKyAxIF07CgkJCX0sCgoJCQkvLyBhZGROZXcgaXMgdXNlZCB3aGVuZXZlciBhIG5ldyBwYWdlIGlzIGFkZGVkCgkJCWFkZE5ldzogZnVuY3Rpb24oIHVybCwgdHJhbnNpdGlvbiwgdGl0bGUsIHBhZ2VVcmwsIHJvbGUgKSB7CgkJCQkvL2lmIHRoZXJlJ3MgZm9yd2FyZCBoaXN0b3J5LCB3aXBlIGl0CgkJCQlpZiggdXJsSGlzdG9yeS5nZXROZXh0KCkgKSB7CgkJCQkJdXJsSGlzdG9yeS5jbGVhckZvcndhcmQoKTsKCQkJCX0KCgkJCQl1cmxIaXN0b3J5LnN0YWNrLnB1c2goIHt1cmwgOiB1cmwsIHRyYW5zaXRpb246IHRyYW5zaXRpb24sIHRpdGxlOiB0aXRsZSwgcGFnZVVybDogcGFnZVVybCwgcm9sZTogcm9sZSB9ICk7CgoJCQkJdXJsSGlzdG9yeS5hY3RpdmVJbmRleCA9IHVybEhpc3Rvcnkuc3RhY2subGVuZ3RoIC0gMTsKCQkJfSwKCgkJCS8vd2lwZSB1cmxzIGFoZWFkIG9mIGFjdGl2ZSBpbmRleAoJCQljbGVhckZvcndhcmQ6IGZ1bmN0aW9uKCkgewoJCQkJdXJsSGlzdG9yeS5zdGFjayA9IHVybEhpc3Rvcnkuc3RhY2suc2xpY2UoIDAsIHVybEhpc3RvcnkuYWN0aXZlSW5kZXggKyAxICk7CgkJCX0sCgoJCQlkaXJlY3RIYXNoQ2hhbmdlOiBmdW5jdGlvbiggb3B0cyApIHsKCQkJCXZhciBiYWNrICwgZm9yd2FyZCwgbmV3QWN0aXZlSW5kZXgsIHByZXYgPSB0aGlzLmdldEFjdGl2ZSgpOwoKCQkJCS8vIGNoZWNrIGlmIHVybCBpc3AgaW4gaGlzdG9yeSBhbmQgaWYgaXQncyBhaGVhZCBvciBiZWhpbmQgY3VycmVudCBwYWdlCgkJCQkkLmVhY2goIHVybEhpc3Rvcnkuc3RhY2ssIGZ1bmN0aW9uKCBpLCBoaXN0b3J5RW50cnkgKSB7CgoJCQkJCS8vaWYgdGhlIHVybCBpcyBpbiB0aGUgc3RhY2ssIGl0J3MgYSBmb3J3YXJkIG9yIGEgYmFjawoJCQkJCWlmKCBvcHRzLmN1cnJlbnRVcmwgPT09IGhpc3RvcnlFbnRyeS51cmwgKSB7CgkJCQkJCS8vZGVmaW5lIGJhY2sgYW5kIGZvcndhcmQgYnkgd2hldGhlciB1cmwgaXMgb2xkZXIgb3IgbmV3ZXIgdGhhbiBjdXJyZW50IHBhZ2UKCQkJCQkJYmFjayA9IGkgPCB1cmxIaXN0b3J5LmFjdGl2ZUluZGV4OwoJCQkJCQlmb3J3YXJkID0gIWJhY2s7CgkJCQkJCW5ld0FjdGl2ZUluZGV4ID0gaTsKCQkJCQl9CgkJCQl9KTsKCgkJCQkvLyBzYXZlIG5ldyBwYWdlIGluZGV4LCBudWxsIGNoZWNrIHRvIHByZXZlbnQgZmFsc2V5IDAgcmVzdWx0CgkJCQl0aGlzLmFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXggIT09IHVuZGVmaW5lZCA/IG5ld0FjdGl2ZUluZGV4IDogdGhpcy5hY3RpdmVJbmRleDsKCgkJCQlpZiggYmFjayApIHsKCQkJCQkoIG9wdHMuZWl0aGVyIHx8IG9wdHMuaXNCYWNrICkoIHRydWUgKTsKCQkJCX0gZWxzZSBpZiggZm9yd2FyZCApIHsKCQkJCQkoIG9wdHMuZWl0aGVyIHx8IG9wdHMuaXNGb3J3YXJkICkoIGZhbHNlICk7CgkJCQl9CgkJCX0sCgoJCQkvL2Rpc2FibGUgaGFzaGNoYW5nZSBldmVudCBsaXN0ZW5lciBpbnRlcm5hbGx5IHRvIGlnbm9yZSBvbmUgY2hhbmdlCgkJCS8vdG9nZ2xlZCBpbnRlcm5hbGx5IHdoZW4gbG9jYXRpb24uaGFzaCBpcyB1cGRhdGVkIHRvIG1hdGNoIHRoZSB1cmwgb2YgYSBzdWNjZXNzZnVsIHBhZ2UgbG9hZAoJCQlpZ25vcmVOZXh0SGFzaENoYW5nZTogZmFsc2UKCQl9LAoKCQkvL2RlZmluZSBmaXJzdCBzZWxlY3RvciB0byByZWNlaXZlIGZvY3VzIHdoZW4gYSBwYWdlIGlzIHNob3duCgkJZm9jdXNhYmxlID0gIlt0YWJpbmRleF0sYSxidXR0b246dmlzaWJsZSxzZWxlY3Q6dmlzaWJsZSxpbnB1dCIsCgoJCS8vcXVldWUgdG8gaG9sZCBzaW11bHRhbmlvdXMgcGFnZSB0cmFuc2l0aW9ucwoJCXBhZ2VUcmFuc2l0aW9uUXVldWUgPSBbXSwKCgkJLy9pbmRpY2F0ZXMgd2hldGhlciBvciBub3QgcGFnZSBpcyBpbiBwcm9jZXNzIG9mIHRyYW5zaXRpb25pbmcKCQlpc1BhZ2VUcmFuc2l0aW9uaW5nID0gZmFsc2UsCgoJCS8vbm9uc2Vuc2UgaGFzaCBjaGFuZ2Uga2V5IGZvciBkaWFsb2dzLCBzbyB0aGV5IGNyZWF0ZSBhIGhpc3RvcnkgZW50cnkKCQlkaWFsb2dIYXNoS2V5ID0gIiZ1aS1zdGF0ZT1kaWFsb2ciLAoKCQkvL2V4aXN0aW5nIGJhc2UgdGFnPwoJCSRiYXNlID0gJGhlYWQuY2hpbGRyZW4oICJiYXNlIiApLAoKCQkvL3R1Y2sgYXdheSB0aGUgb3JpZ2luYWwgZG9jdW1lbnQgVVJMIG1pbnVzIGFueSBmcmFnbWVudC4KCQlkb2N1bWVudFVybCA9IHBhdGgucGFyc2VVcmwoIGxvY2F0aW9uLmhyZWYgKSwKCgkJLy9pZiB0aGUgZG9jdW1lbnQgaGFzIGFuIGVtYmVkZGVkIGJhc2UgdGFnLCBkb2N1bWVudEJhc2UgaXMgc2V0IHRvIGl0cwoJCS8vaW5pdGlhbCB2YWx1ZS4gSWYgYSBiYXNlIHRhZyBkb2VzIG5vdCBleGlzdCwgdGhlbiB3ZSBkZWZhdWx0IHRvIHRoZSBkb2N1bWVudFVybC4KCQlkb2N1bWVudEJhc2UgPSAkYmFzZS5sZW5ndGggPyBwYXRoLnBhcnNlVXJsKCBwYXRoLm1ha2VVcmxBYnNvbHV0ZSggJGJhc2UuYXR0ciggImhyZWYiICksIGRvY3VtZW50VXJsLmhyZWYgKSApIDogZG9jdW1lbnRVcmwsCgoJCS8vY2FjaGUgdGhlIGNvbXBhcmlzb24gb25jZS4KCQlkb2N1bWVudEJhc2VEaWZmZXJzID0gKCBkb2N1bWVudFVybC5ocmVmTm9IYXNoICE9PSBkb2N1bWVudEJhc2UuaHJlZk5vSGFzaCApOwoKCQkvL2Jhc2UgZWxlbWVudCBtYW5hZ2VtZW50LCBkZWZpbmVkIGRlcGVuZGluZyBvbiBkeW5hbWljIGJhc2UgdGFnIHN1cHBvcnQKCQl2YXIgYmFzZSA9ICQuc3VwcG9ydC5keW5hbWljQmFzZVRhZyA/IHsKCgkJCS8vZGVmaW5lIGJhc2UgZWxlbWVudCwgZm9yIHVzZSBpbiByb3V0aW5nIGFzc2V0IHVybHMgdGhhdCBhcmUgcmVmZXJlbmNlZCBpbiBBamF4LXJlcXVlc3RlZCBtYXJrdXAKCQkJZWxlbWVudDogKCAkYmFzZS5sZW5ndGggPyAkYmFzZSA6ICQoICI8YmFzZT4iLCB7IGhyZWY6IGRvY3VtZW50QmFzZS5ocmVmTm9IYXNoIH0gKS5wcmVwZW5kVG8oICRoZWFkICkgKSwKCgkJCS8vc2V0IHRoZSBnZW5lcmF0ZWQgQkFTRSBlbGVtZW50J3MgaHJlZiBhdHRyaWJ1dGUgdG8gYSBuZXcgcGFnZSdzIGJhc2UgcGF0aAoJCQlzZXQ6IGZ1bmN0aW9uKCBocmVmICkgewoJCQkJYmFzZS5lbGVtZW50LmF0dHIoICJocmVmIiwgcGF0aC5tYWtlVXJsQWJzb2x1dGUoIGhyZWYsIGRvY3VtZW50QmFzZSApICk7CgkJCX0sCgoJCQkvL3NldCB0aGUgZ2VuZXJhdGVkIEJBU0UgZWxlbWVudCdzIGhyZWYgYXR0cmlidXRlIHRvIGEgbmV3IHBhZ2UncyBiYXNlIHBhdGgKCQkJcmVzZXQ6IGZ1bmN0aW9uKCkgewoJCQkJYmFzZS5lbGVtZW50LmF0dHIoICJocmVmIiwgZG9jdW1lbnRCYXNlLmhyZWZOb0hhc2ggKTsKCQkJfQoKCQl9IDogdW5kZWZpbmVkOwoKLyoKCWludGVybmFsIHV0aWxpdHkgZnVuY3Rpb25zCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoJLy9kaXJlY3QgZm9jdXMgdG8gdGhlIHBhZ2UgdGl0bGUsIG9yIG90aGVyd2lzZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudAoJZnVuY3Rpb24gcmVGb2N1cyggcGFnZSApIHsKCQl2YXIgcGFnZVRpdGxlID0gcGFnZS5maW5kKCAiLnVpLXRpdGxlOmVxKDApIiApOwoKCQlpZiggcGFnZVRpdGxlLmxlbmd0aCApIHsKCQkJcGFnZVRpdGxlLmZvY3VzKCk7CgkJfQoJCWVsc2V7CgkJCXBhZ2UuZm9jdXMoKTsKCQl9Cgl9CgoJLy9yZW1vdmUgYWN0aXZlIGNsYXNzZXMgYWZ0ZXIgcGFnZSB0cmFuc2l0aW9uIG9yIGVycm9yCglmdW5jdGlvbiByZW1vdmVBY3RpdmVMaW5rQ2xhc3MoIGZvcmNlUmVtb3ZhbCApIHsKCQlpZiggISEkYWN0aXZlQ2xpY2tlZExpbmsgJiYgKCAhJGFjdGl2ZUNsaWNrZWRMaW5rLmNsb3Nlc3QoICcudWktcGFnZS1hY3RpdmUnICkubGVuZ3RoIHx8IGZvcmNlUmVtb3ZhbCApICkgewoJCQkkYWN0aXZlQ2xpY2tlZExpbmsucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJfQoJCSRhY3RpdmVDbGlja2VkTGluayA9IG51bGw7Cgl9CgoJZnVuY3Rpb24gcmVsZWFzZVBhZ2VUcmFuc2l0aW9uTG9jaygpIHsKCQlpc1BhZ2VUcmFuc2l0aW9uaW5nID0gZmFsc2U7CgkJaWYoIHBhZ2VUcmFuc2l0aW9uUXVldWUubGVuZ3RoID4gMCApIHsKCQkJJC5tb2JpbGUuY2hhbmdlUGFnZS5hcHBseSggbnVsbCwgcGFnZVRyYW5zaXRpb25RdWV1ZS5wb3AoKSApOwoJCX0KCX0KCgkvLyBTYXZlIHRoZSBsYXN0IHNjcm9sbCBkaXN0YW5jZSBwZXIgcGFnZSwgYmVmb3JlIGl0IGlzIGhpZGRlbgoJdmFyIHNldExhc3RTY3JvbGxFbmFibGVkID0gdHJ1ZSwKCQlmaXJzdFNjcm9sbEVsZW0sIGdldFNjcm9sbEVsZW0sIHNldExhc3RTY3JvbGwsIGRlbGF5ZWRTZXRMYXN0U2Nyb2xsOwoKCWdldFNjcm9sbEVsZW0gPSBmdW5jdGlvbigpIHsKCQl2YXIgc2Nyb2xsRWxlbSA9ICR3aW5kb3csIGFjdGl2ZVBhZ2UsCgkJCXRvdWNoT3ZlcmZsb3cgPSAkLnN1cHBvcnQudG91Y2hPdmVyZmxvdyAmJiAkLm1vYmlsZS50b3VjaE92ZXJmbG93RW5hYmxlZDsKCgkJaWYoIHRvdWNoT3ZlcmZsb3cgKXsKCQkJYWN0aXZlUGFnZSA9ICQoICIudWktcGFnZS1hY3RpdmUiICk7CgkJCXNjcm9sbEVsZW0gPSBhY3RpdmVQYWdlLmlzKCAiLnVpLW5hdGl2ZS1maXhlZCIgKSA/IGFjdGl2ZVBhZ2UuZmluZCggIi51aS1jb250ZW50IiApIDogYWN0aXZlUGFnZTsKCQl9CgoJCXJldHVybiBzY3JvbGxFbGVtOwoJfTsKCglzZXRMYXN0U2Nyb2xsID0gZnVuY3Rpb24oIHNjcm9sbEVsZW0gKSB7CgkJLy8gdGhpcyBiYXJyaWVyIHByZXZlbnRzIHNldHRpbmcgdGhlIHNjcm9sbCB2YWx1ZSBiYXNlZCBvbiB0aGUgYnJvd3NlcgoJCS8vIHNjcm9sbGluZyB0aGUgd2luZG93IGJhc2VkIG9uIGEgaGFzaGNoYW5nZQoJCWlmKCAhc2V0TGFzdFNjcm9sbEVuYWJsZWQgKSB7CgkJCXJldHVybjsKCQl9CgoJCXZhciBhY3RpdmUgPSAkLm1vYmlsZS51cmxIaXN0b3J5LmdldEFjdGl2ZSgpOwoKCQlpZiggYWN0aXZlICkgewoJCQl2YXIgbGFzdFNjcm9sbCA9IHNjcm9sbEVsZW0gJiYgc2Nyb2xsRWxlbS5zY3JvbGxUb3AoKTsKCgkJCS8vIFNldCBhY3RpdmUgcGFnZSdzIGxhc3RTY3JvbGwgcHJvcC4KCQkJLy8gSWYgdGhlIGxvY2F0aW9uIHdlJ3JlIHNjcm9sbGluZyB0byBpcyBsZXNzIHRoYW4gbWluU2Nyb2xsQmFjaywgbGV0IGl0IGdvLgoJCQlhY3RpdmUubGFzdFNjcm9sbCA9IGxhc3RTY3JvbGwgPCAkLm1vYmlsZS5taW5TY3JvbGxCYWNrID8gJC5tb2JpbGUuZGVmYXVsdEhvbWVTY3JvbGwgOiBsYXN0U2Nyb2xsOwoJCX0KCX07CgoJLy8gYmluZCB0byBzY3JvbGxzdG9wIHRvIGdhdGhlciBzY3JvbGwgcG9zaXRpb24uIFRoZSBkZWxheSBhbGxvd3MgZm9yIHRoZSBoYXNoY2hhbmdlCgkvLyBldmVudCB0byBmaXJlIGFuZCBkaXNhYmxlIHNjcm9sbCByZWNvcmRpbmcgaW4gdGhlIGNhc2Ugd2hlcmUgdGhlIGJyb3dzZXIgc2Nyb2xscwoJLy8gdG8gdGhlIGhhc2ggdGFyZ2V0cyBsb2NhdGlvbiAoc29tZXRpbWVzIHRoZSB0b3Agb2YgdGhlIHBhZ2UpLiBvbmNlIHBhZ2VjaGFuZ2UgZmlyZXMKCS8vIGdldExhc3RTY3JvbGwgaXMgYWdhaW4gcGVybWl0dGVkIHRvIG9wZXJhdGUKCWRlbGF5ZWRTZXRMYXN0U2Nyb2xsID0gZnVuY3Rpb24oKSB7CgkJc2V0VGltZW91dCggc2V0TGFzdFNjcm9sbCwgMTAwLCAkKHRoaXMpICk7Cgl9OwoKCS8vIGRpc2FibGUgYW4gc2Nyb2xsIHNldHRpbmcgd2hlbiBhIGhhc2hjaGFuZ2UgaGFzIGJlZW4gZmlyZWQsIHRoaXMgb25seSB3b3JrcwoJLy8gYmVjYXVzZSB0aGUgcmVjb3JkaW5nIG9mIHRoZSBzY3JvbGwgcG9zaXRpb24gaXMgZGVsYXllZCBmb3IgMTAwbXMgYWZ0ZXIKCS8vIHRoZSBicm93c2VyIG1pZ2h0IGhhdmUgY2hhbmdlZCB0aGUgcG9zaXRpb24gYmVjYXVzZSBvZiB0aGUgaGFzaGNoYW5nZQoJJHdpbmRvdy5iaW5kKCAkLnN1cHBvcnQucHVzaFN0YXRlID8gInBvcHN0YXRlIiA6ICJoYXNoY2hhbmdlIiwgZnVuY3Rpb24oKSB7CgkgCXNldExhc3RTY3JvbGxFbmFibGVkID0gZmFsc2U7Cgl9KTsKCgkvLyBoYW5kbGUgaW5pdGlhbCBoYXNoY2hhbmdlIGZyb20gY2hyb21lIDooCgkkd2luZG93Lm9uZSggJC5zdXBwb3J0LnB1c2hTdGF0ZSA/ICJwb3BzdGF0ZSIgOiAiaGFzaGNoYW5nZSIsIGZ1bmN0aW9uKCkgewoJCXNldExhc3RTY3JvbGxFbmFibGVkID0gdHJ1ZTsKCX0pOwoKCS8vIHdhaXQgdW50aWwgdGhlIG1vYmlsZSBwYWdlIGNvbnRhaW5lciBoYXMgYmVlbiBkZXRlcm1pbmVkIHRvIGJpbmQgdG8gcGFnZWNoYW5nZQoJJHdpbmRvdy5vbmUoICJwYWdlY29udGFpbmVyY3JlYXRlIiwgZnVuY3Rpb24oKXsKCQkvLyBvbmNlIHRoZSBwYWdlIGhhcyBjaGFuZ2VkLCByZS1lbmFibGUgdGhlIHNjcm9sbCByZWNvcmRpbmcKCQkkLm1vYmlsZS5wYWdlQ29udGFpbmVyLmJpbmQoICJwYWdlY2hhbmdlIiwgZnVuY3Rpb24oKSB7CgkJCXZhciBzY3JvbGxFbGVtID0gZ2V0U2Nyb2xsRWxlbSgpOwoKCSAJCXNldExhc3RTY3JvbGxFbmFibGVkID0gdHJ1ZTsKCgkJCS8vIHJlbW92ZSBhbnkgYmluZGluZyB0aGF0IHByZXZpb3VzbHkgZXhpc3RlZCBvbiB0aGUgZ2V0IHNjcm9sbAoJCQkvLyB3aGljaCBtYXkgb3IgbWF5IG5vdCBiZSBkaWZmZXJlbnQgdGhhbiB0aGUgc2Nyb2xsIGVsZW1lbnQgZGV0ZXJtaW5lZCBmb3IKCQkJLy8gdGhpcyBwYWdlIHByZXZpb3VzbHkKCQkJc2Nyb2xsRWxlbS51bmJpbmQoICJzY3JvbGxzdG9wIiwgZGVsYXllZFNldExhc3RTY3JvbGwgKTsKCgkJCS8vIGRldGVybWluZSBhbmQgYmluZCB0byB0aGUgY3VycmVudCBzY29sbCBlbGVtZW50IHdoaWNoIG1heSBiZSB0aGUgd2luZG93CgkJCS8vIG9yIGluIHRoZSBjYXNlIG9mIHRvdWNoIG92ZXJmbG93IHRoZSBlbGVtZW50IHdpdGggdG91Y2ggb3ZlcmZsb3cKCQkJc2Nyb2xsRWxlbS5iaW5kKCAic2Nyb2xsc3RvcCIsIGRlbGF5ZWRTZXRMYXN0U2Nyb2xsICk7CgkJfSk7Cgl9KTsKCgkvLyBiaW5kIHRvIHNjcm9sbHN0b3AgZm9yIHRoZSBmaXJzdCBwYWdlIGFzICJwYWdlY2hhbmdlIiB3b24ndCBiZSBmaXJlZCBpbiB0aGF0IGNhc2UKCWdldFNjcm9sbEVsZW0oKS5iaW5kKCAic2Nyb2xsc3RvcCIsIGRlbGF5ZWRTZXRMYXN0U2Nyb2xsICk7CgoJLy8gTWFrZSB0aGUgaU9TIGNsb2NrIHF1aWNrLXNjcm9sbCB3b3JrIGFnYWluIGlmIHdlJ3JlIHVzaW5nIG5hdGl2ZSBvdmVyZmxvdyBzY3JvbGxpbmcKCS8qCglpZiggJC5zdXBwb3J0LnRvdWNoT3ZlcmZsb3cgKXsKCQlpZiggJC5tb2JpbGUudG91Y2hPdmVyZmxvd0VuYWJsZWQgKXsKCQkJJCggd2luZG93ICkuYmluZCggInNjcm9sbHN0b3AiLCBmdW5jdGlvbigpewoJCQkJaWYoICQoIHRoaXMgKS5zY3JvbGxUb3AoKSA9PT0gMCApewoJCQkJCSQubW9iaWxlLmFjdGl2ZVBhZ2Uuc2Nyb2xsVG9wKCAwICk7CgkJCQl9CgkJCX0pOwoJCX0KCX0KCSovCgoJLy9mdW5jdGlvbiBmb3IgdHJhbnNpdGlvbmluZyBiZXR3ZWVuIHR3byBleGlzdGluZyBwYWdlcwoJZnVuY3Rpb24gdHJhbnNpdGlvblBhZ2VzKCB0b1BhZ2UsIGZyb21QYWdlLCB0cmFuc2l0aW9uLCByZXZlcnNlICkgewoKCQkvL2dldCBjdXJyZW50IHNjcm9sbCBkaXN0YW5jZQoJCXZhciBhY3RpdmUJPSAkLm1vYmlsZS51cmxIaXN0b3J5LmdldEFjdGl2ZSgpLAoJCQl0b3VjaE92ZXJmbG93ID0gJC5zdXBwb3J0LnRvdWNoT3ZlcmZsb3cgJiYgJC5tb2JpbGUudG91Y2hPdmVyZmxvd0VuYWJsZWQsCgkJCXRvU2Nyb2xsID0gYWN0aXZlLmxhc3RTY3JvbGwgfHwgKCB0b3VjaE92ZXJmbG93ID8gMCA6ICQubW9iaWxlLmRlZmF1bHRIb21lU2Nyb2xsICksCgkJCXNjcmVlbkhlaWdodCA9IGdldFNjcmVlbkhlaWdodCgpOwoKCQkvLyBTY3JvbGwgdG8gdG9wLCBoaWRlIGFkZHIgYmFyCgkJd2luZG93LnNjcm9sbFRvKCAwLCAkLm1vYmlsZS5kZWZhdWx0SG9tZVNjcm9sbCApOwoKCQlpZiggZnJvbVBhZ2UgKSB7CgkJCS8vdHJpZ2dlciBiZWZvcmUgc2hvdy9oaWRlIGV2ZW50cwoJCQlmcm9tUGFnZS5kYXRhKCAicGFnZSIgKS5fdHJpZ2dlciggImJlZm9yZWhpZGUiLCBudWxsLCB7IG5leHRQYWdlOiB0b1BhZ2UgfSApOwoJCX0KCgkJaWYoICF0b3VjaE92ZXJmbG93KXsKCQkJdG9QYWdlLmhlaWdodCggc2NyZWVuSGVpZ2h0ICsgdG9TY3JvbGwgKTsKCQl9CgoJCXRvUGFnZS5kYXRhKCAicGFnZSIgKS5fdHJpZ2dlciggImJlZm9yZXNob3ciLCBudWxsLCB7IHByZXZQYWdlOiBmcm9tUGFnZSB8fCAkKCAiIiApIH0gKTsKCgkJLy9jbGVhciBwYWdlIGxvYWRlcgoJCSQubW9iaWxlLmhpZGVQYWdlTG9hZGluZ01zZygpOwoKCQlpZiggdG91Y2hPdmVyZmxvdyAmJiB0b1Njcm9sbCApewoKCQkJdG9QYWdlLmFkZENsYXNzKCAidWktbW9iaWxlLXByZS10cmFuc2l0aW9uIiApOwoJCQkvLyBTZW5kIGZvY3VzIHRvIHBhZ2UgYXMgaXQgaXMgbm93IGRpc3BsYXk6IGJsb2NrCgkJCXJlRm9jdXMoIHRvUGFnZSApOwoKCQkJLy9zZXQgcGFnZSdzIHNjcm9sbFRvcCB0byByZW1lbWJlcmVkIGRpc3RhbmNlCgkJCWlmKCB0b1BhZ2UuaXMoICIudWktbmF0aXZlLWZpeGVkIiApICl7CgkJCQl0b1BhZ2UuZmluZCggIi51aS1jb250ZW50IiApLnNjcm9sbFRvcCggdG9TY3JvbGwgKTsKCQkJfQoJCQllbHNlewoJCQkJdG9QYWdlLnNjcm9sbFRvcCggdG9TY3JvbGwgKTsKCQkJfQoJCX0KCgkJLy9maW5kIHRoZSB0cmFuc2l0aW9uIGhhbmRsZXIgZm9yIHRoZSBzcGVjaWZpZWQgdHJhbnNpdGlvbi4gSWYgdGhlcmUKCQkvL2lzbid0IG9uZSBpbiBvdXIgdHJhbnNpdGlvbkhhbmRsZXJzIGRpY3Rpb25hcnksIHVzZSB0aGUgZGVmYXVsdCBvbmUuCgkJLy9jYWxsIHRoZSBoYW5kbGVyIGltbWVkaWF0ZWx5IHRvIGtpY2stb2ZmIHRoZSB0cmFuc2l0aW9uLgoJCXZhciB0aCA9ICQubW9iaWxlLnRyYW5zaXRpb25IYW5kbGVyc1t0cmFuc2l0aW9uIHx8ICJub25lIl0gfHwgJC5tb2JpbGUuZGVmYXVsdFRyYW5zaXRpb25IYW5kbGVyLAoJCQlwcm9taXNlID0gdGgoIHRyYW5zaXRpb24sIHJldmVyc2UsIHRvUGFnZSwgZnJvbVBhZ2UgKTsKCgkJcHJvbWlzZS5kb25lKGZ1bmN0aW9uKCkgewoJCQkvL3Jlc2V0IHRvUGFnZSBoZWlnaHQgYmFjawoJCQlpZiggIXRvdWNoT3ZlcmZsb3cgKXsKCQkJCXRvUGFnZS5oZWlnaHQoICIiICk7CgkJCQkvLyBTZW5kIGZvY3VzIHRvIHRoZSBuZXdseSBzaG93biBwYWdlCgkJCQlyZUZvY3VzKCB0b1BhZ2UgKTsKCQkJfQoKCQkJLy8gSnVtcCB0byB0b3Agb3IgcHJldiBzY3JvbGwsIHNvbWV0aW1lcyBvbiBpT1MgdGhlIHBhZ2UgaGFzIG5vdCByZW5kZXJlZCB5ZXQuCgkJCWlmKCAhdG91Y2hPdmVyZmxvdyApewoJCQkJJC5tb2JpbGUuc2lsZW50U2Nyb2xsKCB0b1Njcm9sbCApOwoJCQl9CgoJCQkvL3RyaWdnZXIgc2hvdy9oaWRlIGV2ZW50cwoJCQlpZiggZnJvbVBhZ2UgKSB7CgkJCQlpZiggIXRvdWNoT3ZlcmZsb3cgKXsKCQkJCQlmcm9tUGFnZS5oZWlnaHQoICIiICk7CgkJCQl9CgoJCQkJZnJvbVBhZ2UuZGF0YSggInBhZ2UiICkuX3RyaWdnZXIoICJoaWRlIiwgbnVsbCwgeyBuZXh0UGFnZTogdG9QYWdlIH0gKTsKCQkJfQoKCQkJLy90cmlnZ2VyIHBhZ2VzaG93LCBkZWZpbmUgcHJldlBhZ2UgYXMgZWl0aGVyIGZyb21QYWdlIG9yIGVtcHR5IGpRdWVyeSBvYmoKCQkJdG9QYWdlLmRhdGEoICJwYWdlIiApLl90cmlnZ2VyKCAic2hvdyIsIG51bGwsIHsgcHJldlBhZ2U6IGZyb21QYWdlIHx8ICQoICIiICkgfSApOwoJCX0pOwoKCQlyZXR1cm4gcHJvbWlzZTsKCX0KCgkvL3NpbXBseSBzZXQgdGhlIGFjdGl2ZSBwYWdlJ3MgbWluaW11bSBoZWlnaHQgdG8gc2NyZWVuIGhlaWdodCwgZGVwZW5kaW5nIG9uIG9yaWVudGF0aW9uCglmdW5jdGlvbiBnZXRTY3JlZW5IZWlnaHQoKXsKCQl2YXIgb3JpZW50YXRpb24gCT0gJC5ldmVudC5zcGVjaWFsLm9yaWVudGF0aW9uY2hhbmdlLm9yaWVudGF0aW9uKCksCgkJCXBvcnQJCQk9IG9yaWVudGF0aW9uID09PSAicG9ydHJhaXQiLAoJCQl3aW5NaW4JCQk9IHBvcnQgPyA0ODAgOiAzMjAsCgkJCXNjcmVlbkhlaWdodAk9IHBvcnQgPyBzY3JlZW4uYXZhaWxIZWlnaHQgOiBzY3JlZW4uYXZhaWxXaWR0aCwKCQkJd2luSGVpZ2h0CQk9IE1hdGgubWF4KCB3aW5NaW4sICQoIHdpbmRvdyApLmhlaWdodCgpICksCgkJCXBhZ2VNaW4JCQk9IE1hdGgubWluKCBzY3JlZW5IZWlnaHQsIHdpbkhlaWdodCApOwoKCQlyZXR1cm4gcGFnZU1pbjsKCX0KCgkkLm1vYmlsZS5nZXRTY3JlZW5IZWlnaHQgPSBnZXRTY3JlZW5IZWlnaHQ7CgoJLy9zaW1wbHkgc2V0IHRoZSBhY3RpdmUgcGFnZSdzIG1pbmltdW0gaGVpZ2h0IHRvIHNjcmVlbiBoZWlnaHQsIGRlcGVuZGluZyBvbiBvcmllbnRhdGlvbgoJZnVuY3Rpb24gcmVzZXRBY3RpdmVQYWdlSGVpZ2h0KCl7CgkJLy8gRG9uJ3QgYXBwbHkgdGhpcyBoZWlnaHQgaW4gdG91Y2ggb3ZlcmZsb3cgZW5hYmxlZCBtb2RlCgkJaWYoICQuc3VwcG9ydC50b3VjaE92ZXJmbG93ICYmICQubW9iaWxlLnRvdWNoT3ZlcmZsb3dFbmFibGVkICl7CgkJCXJldHVybjsKCQl9CgkJJCggIi4iICsgJC5tb2JpbGUuYWN0aXZlUGFnZUNsYXNzICkuY3NzKCAibWluLWhlaWdodCIsIGdldFNjcmVlbkhlaWdodCgpICk7Cgl9CgoJLy9zaGFyZWQgcGFnZSBlbmhhbmNlbWVudHMKCWZ1bmN0aW9uIGVuaGFuY2VQYWdlKCAkcGFnZSwgcm9sZSApIHsKCQkvLyBJZiBhIHJvbGUgd2FzIHNwZWNpZmllZCwgbWFrZSBzdXJlIHRoZSBkYXRhLXJvbGUgYXR0cmlidXRlCgkJLy8gb24gdGhlIHBhZ2UgZWxlbWVudCBpcyBpbiBzeW5jLgoJCWlmKCByb2xlICkgewoJCQkkcGFnZS5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAicm9sZSIsIHJvbGUgKTsKCQl9CgoJCS8vcnVuIHBhZ2UgcGx1Z2luCgkJJHBhZ2UucGFnZSgpOwoJfQoKLyogZXhwb3NlZCAkLm1vYmlsZSBtZXRob2RzCSAqLwoKCS8vYW5pbWF0aW9uIGNvbXBsZXRlIGNhbGxiYWNrCgkkLmZuLmFuaW1hdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24oIGNhbGxiYWNrICkgewoJCWlmKCAkLnN1cHBvcnQuY3NzVHJhbnNpdGlvbnMgKSB7CgkJCXJldHVybiAkKCB0aGlzICkub25lKCAnd2Via2l0QW5pbWF0aW9uRW5kJywgY2FsbGJhY2sgKTsKCQl9CgkJZWxzZXsKCQkJLy8gZGVmZXIgZXhlY3V0aW9uIGZvciBjb25zaXN0ZW5jeSBiZXR3ZWVuIHdlYmtpdC9ub24gd2Via2l0CgkJCXNldFRpbWVvdXQoIGNhbGxiYWNrLCAwICk7CgkJCXJldHVybiAkKCB0aGlzICk7CgkJfQoJfTsKCgkvL2V4cG9zZSBwYXRoIG9iamVjdCBvbiAkLm1vYmlsZQoJJC5tb2JpbGUucGF0aCA9IHBhdGg7CgoJLy9leHBvc2UgYmFzZSBvYmplY3Qgb24gJC5tb2JpbGUKCSQubW9iaWxlLmJhc2UgPSBiYXNlOwoKCS8vaGlzdG9yeSBzdGFjawoJJC5tb2JpbGUudXJsSGlzdG9yeSA9IHVybEhpc3Rvcnk7CgoJJC5tb2JpbGUuZGlhbG9nSGFzaEtleSA9IGRpYWxvZ0hhc2hLZXk7CgoJLy9kZWZhdWx0IG5vbi1hbmltYXRpb24gdHJhbnNpdGlvbiBoYW5kbGVyCgkkLm1vYmlsZS5ub25lVHJhbnNpdGlvbkhhbmRsZXIgPSBmdW5jdGlvbiggbmFtZSwgcmV2ZXJzZSwgJHRvUGFnZSwgJGZyb21QYWdlICkgewoJCWlmICggJGZyb21QYWdlICkgewoJCQkkZnJvbVBhZ2UucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmFjdGl2ZVBhZ2VDbGFzcyApOwoJCX0KCQkkdG9QYWdlLmFkZENsYXNzKCAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKTsKCgkJcmV0dXJuICQuRGVmZXJyZWQoKS5yZXNvbHZlKCBuYW1lLCByZXZlcnNlLCAkdG9QYWdlLCAkZnJvbVBhZ2UgKS5wcm9taXNlKCk7Cgl9OwoKCS8vZGVmYXVsdCBoYW5kbGVyIGZvciB1bmtub3duIHRyYW5zaXRpb25zCgkkLm1vYmlsZS5kZWZhdWx0VHJhbnNpdGlvbkhhbmRsZXIgPSAkLm1vYmlsZS5ub25lVHJhbnNpdGlvbkhhbmRsZXI7CgoJLy90cmFuc2l0aW9uIGhhbmRsZXIgZGljdGlvbmFyeSBmb3IgM3JkIHBhcnR5IHRyYW5zaXRpb25zCgkkLm1vYmlsZS50cmFuc2l0aW9uSGFuZGxlcnMgPSB7CgkJbm9uZTogJC5tb2JpbGUuZGVmYXVsdFRyYW5zaXRpb25IYW5kbGVyCgl9OwoKCS8vZW5hYmxlIGNyb3NzLWRvbWFpbiBwYWdlIHN1cHBvcnQKCSQubW9iaWxlLmFsbG93Q3Jvc3NEb21haW5QYWdlcyA9IGZhbHNlOwoKCS8vcmV0dXJuIHRoZSBvcmlnaW5hbCBkb2N1bWVudCB1cmwKCSQubW9iaWxlLmdldERvY3VtZW50VXJsID0gZnVuY3Rpb24oYXNQYXJzZWRPYmplY3QpIHsKCQlyZXR1cm4gYXNQYXJzZWRPYmplY3QgPyAkLmV4dGVuZCgge30sIGRvY3VtZW50VXJsICkgOiBkb2N1bWVudFVybC5ocmVmOwoJfTsKCgkvL3JldHVybiB0aGUgb3JpZ2luYWwgZG9jdW1lbnQgYmFzZSB1cmwKCSQubW9iaWxlLmdldERvY3VtZW50QmFzZSA9IGZ1bmN0aW9uKGFzUGFyc2VkT2JqZWN0KSB7CgkJcmV0dXJuIGFzUGFyc2VkT2JqZWN0ID8gJC5leHRlbmQoIHt9LCBkb2N1bWVudEJhc2UgKSA6IGRvY3VtZW50QmFzZS5ocmVmOwoJfTsKCgkkLm1vYmlsZS5fYmluZFBhZ2VSZW1vdmUgPSBmdW5jdGlvbigpIHsKCQl2YXIgcGFnZSA9ICQodGhpcyk7CgoJCS8vIHdoZW4gZG9tIGNhY2hpbmcgaXMgbm90IGVuYWJsZWQgb3IgdGhlIHBhZ2UgaXMgZW1iZWRkZWQgYmluZCB0byByZW1vdmUgdGhlIHBhZ2Ugb24gaGlkZQoJCWlmKCAhcGFnZS5kYXRhKCJwYWdlIikub3B0aW9ucy5kb21DYWNoZQoJCQkJJiYgcGFnZS5pcygiOmpxbURhdGEoZXh0ZXJuYWwtcGFnZT0ndHJ1ZScpIikgKSB7CgoJCQlwYWdlLmJpbmQoICdwYWdlaGlkZS5yZW1vdmUnLCBmdW5jdGlvbigpIHsKCQkJCXZhciAkdGhpcyA9ICQoIHRoaXMgKSwKCQkJCQlwckV2ZW50ID0gbmV3ICQuRXZlbnQoICJwYWdlcmVtb3ZlIiApOwoKCQkJCSR0aGlzLnRyaWdnZXIoIHByRXZlbnQgKTsKCgkJCQlpZiggIXByRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKXsKCQkJCQkkdGhpcy5yZW1vdmVXaXRoRGVwZW5kZW50cygpOwoJCQkJfQoJCQl9KTsKCQl9Cgl9OwoKCS8vIExvYWQgYSBwYWdlIGludG8gdGhlIERPTS4KCSQubW9iaWxlLmxvYWRQYWdlID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHsKCQkvLyBUaGlzIGZ1bmN0aW9uIHVzZXMgZGVmZXJyZWQgbm90aWZpY2F0aW9ucyB0byBsZXQgY2FsbGVycwoJCS8vIGtub3cgd2hlbiB0aGUgcGFnZSBpcyBkb25lIGxvYWRpbmcsIG9yIGlmIGFuIGVycm9yIGhhcyBvY2N1cnJlZC4KCQl2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCksCgoJCQkvLyBUaGUgZGVmYXVsdCBsb2FkUGFnZSBvcHRpb25zIHdpdGggb3ZlcnJpZGVzIHNwZWNpZmllZCBieQoJCQkvLyB0aGUgY2FsbGVyLgoJCQlzZXR0aW5ncyA9ICQuZXh0ZW5kKCB7fSwgJC5tb2JpbGUubG9hZFBhZ2UuZGVmYXVsdHMsIG9wdGlvbnMgKSwKCgkJCS8vIFRoZSBET00gZWxlbWVudCBmb3IgdGhlIHBhZ2UgYWZ0ZXIgaXQgaGFzIGJlZW4gbG9hZGVkLgoJCQlwYWdlID0gbnVsbCwKCgkJCS8vIElmIHRoZSByZWxvYWRQYWdlIG9wdGlvbiBpcyB0cnVlLCBhbmQgdGhlIHBhZ2UgaXMgYWxyZWFkeQoJCQkvLyBpbiB0aGUgRE9NLCBkdXBDYWNoZWRQYWdlIHdpbGwgYmUgc2V0IHRvIHRoZSBwYWdlIGVsZW1lbnQKCQkJLy8gc28gdGhhdCBpdCBjYW4gYmUgcmVtb3ZlZCBhZnRlciB0aGUgbmV3IHZlcnNpb24gb2YgdGhlCgkJCS8vIHBhZ2UgaXMgbG9hZGVkIG9mZiB0aGUgbmV0d29yay4KCQkJZHVwQ2FjaGVkUGFnZSA9IG51bGwsCgoJCQkvLyBkZXRlcm1pbmUgdGhlIGN1cnJlbnQgYmFzZSB1cmwKCQkJZmluZEJhc2VXaXRoRGVmYXVsdCA9IGZ1bmN0aW9uKCl7CgkJCQl2YXIgY2xvc2VzdEJhc2UgPSAoICQubW9iaWxlLmFjdGl2ZVBhZ2UgJiYgZ2V0Q2xvc2VzdEJhc2VVcmwoICQubW9iaWxlLmFjdGl2ZVBhZ2UgKSApOwoJCQkJcmV0dXJuIGNsb3Nlc3RCYXNlIHx8IGRvY3VtZW50QmFzZS5ocmVmTm9IYXNoOwoJCQl9LAoKCQkJLy8gVGhlIGFic29sdXRlIHZlcnNpb24gb2YgdGhlIFVSTCBwYXNzZWQgaW50byB0aGUgZnVuY3Rpb24uIFRoaXMKCQkJLy8gdmVyc2lvbiBvZiB0aGUgVVJMIG1heSBjb250YWluIGRpYWxvZy9zdWJwYWdlIHBhcmFtcyBpbiBpdC4KCQkJYWJzVXJsID0gcGF0aC5tYWtlVXJsQWJzb2x1dGUoIHVybCwgZmluZEJhc2VXaXRoRGVmYXVsdCgpICk7CgoKCQkvLyBJZiB0aGUgY2FsbGVyIHByb3ZpZGVkIGRhdGEsIGFuZCB3ZSdyZSB1c2luZyAiZ2V0IiByZXF1ZXN0LAoJCS8vIGFwcGVuZCB0aGUgZGF0YSB0byB0aGUgVVJMLgoJCWlmICggc2V0dGluZ3MuZGF0YSAmJiBzZXR0aW5ncy50eXBlID09PSAiZ2V0IiApIHsKCQkJYWJzVXJsID0gcGF0aC5hZGRTZWFyY2hQYXJhbXMoIGFic1VybCwgc2V0dGluZ3MuZGF0YSApOwoJCQlzZXR0aW5ncy5kYXRhID0gdW5kZWZpbmVkOwoJCX0KCgkJLy8gSWYgdGhlIGNhbGxlciBpcyB1c2luZyBhICJwb3N0IiByZXF1ZXN0LCByZWxvYWRQYWdlIG11c3QgYmUgdHJ1ZQoJCWlmKCAgc2V0dGluZ3MuZGF0YSAmJiBzZXR0aW5ncy50eXBlID09PSAicG9zdCIgKXsKCQkJc2V0dGluZ3MucmVsb2FkUGFnZSA9IHRydWU7CgkJfQoKCQkJLy8gVGhlIGFic29sdXRlIHZlcnNpb24gb2YgdGhlIFVSTCBtaW51cyBhbnkgZGlhbG9nL3N1YnBhZ2UgcGFyYW1zLgoJCQkvLyBJbiBvdGhlcndvcmRzIHRoZSByZWFsIFVSTCBvZiB0aGUgcGFnZSB0byBiZSBsb2FkZWQuCgkJdmFyIGZpbGVVcmwgPSBwYXRoLmdldEZpbGVQYXRoKCBhYnNVcmwgKSwKCgkJCS8vIFRoZSB2ZXJzaW9uIG9mIHRoZSBVcmwgYWN0dWFsbHkgc3RvcmVkIGluIHRoZSBkYXRhLXVybCBhdHRyaWJ1dGUgb2YKCQkJLy8gdGhlIHBhZ2UuIEZvciBlbWJlZGRlZCBwYWdlcywgaXQgaXMganVzdCB0aGUgaWQgb2YgdGhlIHBhZ2UuIEZvciBwYWdlcwoJCQkvLyB3aXRoaW4gdGhlIHNhbWUgZG9tYWluIGFzIHRoZSBkb2N1bWVudCBiYXNlLCBpdCBpcyB0aGUgc2l0ZSByZWxhdGl2ZQoJCQkvLyBwYXRoLiBGb3IgY3Jvc3MtZG9tYWluIHBhZ2VzIChQaG9uZSBHYXAgb25seSkgdGhlIGVudGlyZSBhYnNvbHV0ZSBVcmwKCQkJLy8gdXNlZCB0byBsb2FkIHRoZSBwYWdlLgoJCQlkYXRhVXJsID0gcGF0aC5jb252ZXJ0VXJsVG9EYXRhVXJsKCBhYnNVcmwgKTsKCgkJLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBwYWdlQ29udGFpbmVyIHRvIHdvcmsgd2l0aC4KCQlzZXR0aW5ncy5wYWdlQ29udGFpbmVyID0gc2V0dGluZ3MucGFnZUNvbnRhaW5lciB8fCAkLm1vYmlsZS5wYWdlQ29udGFpbmVyOwoKCQkvLyBDaGVjayB0byBzZWUgaWYgdGhlIHBhZ2UgYWxyZWFkeSBleGlzdHMgaW4gdGhlIERPTS4KCQlwYWdlID0gc2V0dGluZ3MucGFnZUNvbnRhaW5lci5jaGlsZHJlbiggIjpqcW1EYXRhKHVybD0nIiArIGRhdGFVcmwgKyAiJykiICk7CgoJCS8vIElmIHdlIGZhaWxlZCB0byBmaW5kIHRoZSBwYWdlLCBjaGVjayB0byBzZWUgaWYgdGhlIHVybCBpcyBhCgkJLy8gcmVmZXJlbmNlIHRvIGFuIGVtYmVkZGVkIHBhZ2UuIElmIHNvLCBpdCBtYXkgaGF2ZSBiZWVuIGR5bmFtaWNhbGx5CgkJLy8gaW5qZWN0ZWQgYnkgYSBkZXZlbG9wZXIsIGluIHdoaWNoIGNhc2UgaXQgd291bGQgYmUgbGFja2luZyBhIGRhdGEtdXJsCgkJLy8gYXR0cmlidXRlIGFuZCBpbiBuZWVkIG9mIGVuaGFuY2VtZW50LgoJCWlmICggcGFnZS5sZW5ndGggPT09IDAgJiYgZGF0YVVybCAmJiAhcGF0aC5pc1BhdGgoIGRhdGFVcmwgKSApIHsKCQkJcGFnZSA9IHNldHRpbmdzLnBhZ2VDb250YWluZXIuY2hpbGRyZW4oICIjIiArIGRhdGFVcmwgKQoJCQkJLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJ1cmwiLCBkYXRhVXJsICk7CgkJfQoKCQkvLyBJZiB3ZSBmYWlsZWQgdG8gZmluZCBhIHBhZ2UgaW4gdGhlIERPTSwgY2hlY2sgdGhlIFVSTCB0byBzZWUgaWYgaXQKCQkvLyByZWZlcnMgdG8gdGhlIGZpcnN0IHBhZ2UgaW4gdGhlIGFwcGxpY2F0aW9uLiBJZiBpdCBpc24ndCBhIHJlZmVyZW5jZQoJCS8vIHRvIHRoZSBmaXJzdCBwYWdlIGFuZCByZWZlcnMgdG8gbm9uLWV4aXN0ZW50IGVtYmVkZGVkIHBhZ2UsIGVycm9yIG91dC4KCQlpZiAoIHBhZ2UubGVuZ3RoID09PSAwICkgewoJCQlpZiAoICQubW9iaWxlLmZpcnN0UGFnZSAmJiBwYXRoLmlzRmlyc3RQYWdlVXJsKCBmaWxlVXJsICkgKSB7CgkJCQkvLyBDaGVjayB0byBtYWtlIHN1cmUgb3VyIGNhY2hlZC1maXJzdC1wYWdlIGlzIGFjdHVhbGx5CgkJCQkvLyBpbiB0aGUgRE9NLiBTb21lIHVzZXIgZGVwbG95ZWQgYXBwcyBhcmUgcHJ1bmluZyB0aGUgZmlyc3QKCQkJCS8vIHBhZ2UgZnJvbSB0aGUgRE9NIGZvciB2YXJpb3VzIHJlYXNvbnMsIHdlIGNoZWNrIGZvciB0aGlzCgkJCQkvLyBjYXNlIGhlcmUgYmVjYXVzZSB3ZSBkb24ndCB3YW50IGEgZmlyc3QtcGFnZSB3aXRoIGFuIGlkCgkJCQkvLyBmYWxsaW5nIHRocm91Z2ggdG8gdGhlIG5vbi1leGlzdGVudCBlbWJlZGRlZCBwYWdlIGVycm9yCgkJCQkvLyBjYXNlLiBJZiB0aGUgZmlyc3QtcGFnZSBpcyBub3QgaW4gdGhlIERPTSwgdGhlbiB3ZSBsZXQKCQkJCS8vIHRoaW5ncyBmYWxsIHRocm91Z2ggdG8gdGhlIGFqYXggbG9hZGluZyBjb2RlIGJlbG93IHNvCgkJCQkvLyB0aGF0IGl0IGdldHMgcmVsb2FkZWQuCgkJCQlpZiAoICQubW9iaWxlLmZpcnN0UGFnZS5wYXJlbnQoKS5sZW5ndGggKSB7CgkJCQkJcGFnZSA9ICQoICQubW9iaWxlLmZpcnN0UGFnZSApOwoJCQkJfQoJCQl9IGVsc2UgaWYgKCBwYXRoLmlzRW1iZWRkZWRQYWdlKCBmaWxlVXJsICkgICkgewoJCQkJZGVmZXJyZWQucmVqZWN0KCBhYnNVcmwsIG9wdGlvbnMgKTsKCQkJCXJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7CgkJCX0KCQl9CgoJCS8vIFJlc2V0IGJhc2UgdG8gdGhlIGRlZmF1bHQgZG9jdW1lbnQgYmFzZS4KCQlpZiAoIGJhc2UgKSB7CgkJCWJhc2UucmVzZXQoKTsKCQl9CgoJCS8vIElmIHRoZSBwYWdlIHdlIGFyZSBpbnRlcmVzdGVkIGluIGlzIGFscmVhZHkgaW4gdGhlIERPTSwKCQkvLyBhbmQgdGhlIGNhbGxlciBkaWQgbm90IGluZGljYXRlIHRoYXQgd2Ugc2hvdWxkIGZvcmNlIGEKCQkvLyByZWxvYWQgb2YgdGhlIGZpbGUsIHdlIGFyZSBkb25lLiBPdGhlcndpc2UsIHRyYWNrIHRoZQoJCS8vIGV4aXN0aW5nIHBhZ2UgYXMgYSBkdXBsaWNhdGVkLgoJCWlmICggcGFnZS5sZW5ndGggKSB7CgkJCWlmICggIXNldHRpbmdzLnJlbG9hZFBhZ2UgKSB7CgkJCQllbmhhbmNlUGFnZSggcGFnZSwgc2V0dGluZ3Mucm9sZSApOwoJCQkJZGVmZXJyZWQucmVzb2x2ZSggYWJzVXJsLCBvcHRpb25zLCBwYWdlICk7CgkJCQlyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpOwoJCQl9CgkJCWR1cENhY2hlZFBhZ2UgPSBwYWdlOwoJCX0KCgkJdmFyIG1wYyA9IHNldHRpbmdzLnBhZ2VDb250YWluZXIsCgkJCXBibEV2ZW50ID0gbmV3ICQuRXZlbnQoICJwYWdlYmVmb3JlbG9hZCIgKSwKCQkJdHJpZ2dlckRhdGEgPSB7IHVybDogdXJsLCBhYnNVcmw6IGFic1VybCwgZGF0YVVybDogZGF0YVVybCwgZGVmZXJyZWQ6IGRlZmVycmVkLCBvcHRpb25zOiBzZXR0aW5ncyB9OwoKCQkvLyBMZXQgbGlzdGVuZXJzIGtub3cgd2UncmUgYWJvdXQgdG8gbG9hZCBhIHBhZ2UuCgkJbXBjLnRyaWdnZXIoIHBibEV2ZW50LCB0cmlnZ2VyRGF0YSApOwoKCQkvLyBJZiB0aGUgZGVmYXVsdCBiZWhhdmlvciBpcyBwcmV2ZW50ZWQsIHN0b3AgaGVyZSEKCQlpZiggcGJsRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKXsKCQkJcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTsKCQl9CgoJCWlmICggc2V0dGluZ3Muc2hvd0xvYWRNc2cgKSB7CgoJCQkvLyBUaGlzIGNvbmZpZ3VyYWJsZSB0aW1lb3V0IGFsbG93cyBjYWNoZWQgcGFnZXMgYSBicmllZiBkZWxheSB0byBsb2FkIHdpdGhvdXQgc2hvd2luZyBhIG1lc3NhZ2UKCQkJdmFyIGxvYWRNc2dEZWxheSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKCQkJCQkkLm1vYmlsZS5zaG93UGFnZUxvYWRpbmdNc2coKTsKCQkJCX0sIHNldHRpbmdzLmxvYWRNc2dEZWxheSApLAoKCQkJCS8vIFNoYXJlZCBsb2dpYyBmb3IgY2xlYXJpbmcgdGltZW91dCBhbmQgcmVtb3ZpbmcgbWVzc2FnZS4KCQkJCWhpZGVNc2cgPSBmdW5jdGlvbigpewoKCQkJCQkvLyBTdG9wIG1lc3NhZ2Ugc2hvdyB0aW1lcgoJCQkJCWNsZWFyVGltZW91dCggbG9hZE1zZ0RlbGF5ICk7CgoJCQkJCS8vIEhpZGUgbG9hZGluZyBtZXNzYWdlCgkJCQkJJC5tb2JpbGUuaGlkZVBhZ2VMb2FkaW5nTXNnKCk7CgkJCQl9OwoJCX0KCgkJaWYgKCAhKCAkLm1vYmlsZS5hbGxvd0Nyb3NzRG9tYWluUGFnZXMgfHwgcGF0aC5pc1NhbWVEb21haW4oIGRvY3VtZW50VXJsLCBhYnNVcmwgKSApICkgewoJCQlkZWZlcnJlZC5yZWplY3QoIGFic1VybCwgb3B0aW9ucyApOwoJCX0gZWxzZSB7CgkJCS8vIExvYWQgdGhlIG5ldyBwYWdlLgoJCQkkLmFqYXgoewoJCQkJdXJsOiBmaWxlVXJsLAoJCQkJdHlwZTogc2V0dGluZ3MudHlwZSwKCQkJCWRhdGE6IHNldHRpbmdzLmRhdGEsCgkJCQlkYXRhVHlwZTogImh0bWwiLAoJCQkJc3VjY2VzczogZnVuY3Rpb24oIGh0bWwsIHRleHRTdGF0dXMsIHhociApIHsKCQkJCQkvL3ByZS1wYXJzZSBodG1sIHRvIGNoZWNrIGZvciBhIGRhdGEtdXJsLAoJCQkJCS8vdXNlIGl0IGFzIHRoZSBuZXcgZmlsZVVybCwgYmFzZSBwYXRoLCBldGMKCQkJCQl2YXIgYWxsID0gJCggIjxkaXY+PC9kaXY+IiApLAoKCQkJCQkJLy9wYWdlIHRpdGxlIHJlZ2V4cAoJCQkJCQluZXdQYWdlVGl0bGUgPSBodG1sLm1hdGNoKCAvPHRpdGxlW14+XSo+KFtePF0qKS8gKSAmJiBSZWdFeHAuJDEsCgoJCQkJCQkvLyBUT0RPIGhhbmRsZSBkaWFsb2dzIGFnYWluCgkJCQkJCXBhZ2VFbGVtUmVnZXggPSBuZXcgUmVnRXhwKCAiKDxbXj5dK1xcYmRhdGEtIiArICQubW9iaWxlLm5zICsgInJvbGU9W1wiJ10/cGFnZVtcIiddP1tePl0qPikiICksCgkJCQkJCWRhdGFVcmxSZWdleCA9IG5ldyBSZWdFeHAoICJcXGJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJ1cmw9W1wiJ10/KFteXCInPl0qKVtcIiddPyIgKTsKCgoJCQkJCS8vIGRhdGEtdXJsIG11c3QgYmUgcHJvdmlkZWQgZm9yIHRoZSBiYXNlIHRhZyBzbyByZXNvdXJjZSByZXF1ZXN0cyBjYW4gYmUgZGlyZWN0ZWQgdG8gdGhlCgkJCQkJLy8gY29ycmVjdCB1cmwuIGxvYWRpbmcgaW50byBhIHRlbXByb3JhcnkgZWxlbWVudCBtYWtlcyB0aGVzZSByZXF1ZXN0cyBpbW1lZGlhdGVseQoJCQkJCWlmKCBwYWdlRWxlbVJlZ2V4LnRlc3QoIGh0bWwgKQoJCQkJCQkJJiYgUmVnRXhwLiQxCgkJCQkJCQkmJiBkYXRhVXJsUmVnZXgudGVzdCggUmVnRXhwLiQxICkKCQkJCQkJCSYmIFJlZ0V4cC4kMSApIHsKCQkJCQkJdXJsID0gZmlsZVVybCA9IHBhdGguZ2V0RmlsZVBhdGgoIFJlZ0V4cC4kMSApOwoJCQkJCX0KCgkJCQkJaWYgKCBiYXNlICkgewoJCQkJCQliYXNlLnNldCggZmlsZVVybCApOwoJCQkJCX0KCgkJCQkJLy93b3JrYXJvdW5kIHRvIGFsbG93IHNjcmlwdHMgdG8gZXhlY3V0ZSB3aGVuIGluY2x1ZGVkIGluIHBhZ2UgZGl2cwoJCQkJCWFsbC5nZXQoIDAgKS5pbm5lckhUTUwgPSBodG1sOwoJCQkJCXBhZ2UgPSBhbGwuZmluZCggIjpqcW1EYXRhKHJvbGU9J3BhZ2UnKSwgOmpxbURhdGEocm9sZT0nZGlhbG9nJykiICkuZmlyc3QoKTsKCgkJCQkJLy9pZiBwYWdlIGVsZW0gY291bGRuJ3QgYmUgZm91bmQsIGNyZWF0ZSBvbmUgYW5kIGluc2VydCB0aGUgYm9keSBlbGVtZW50J3MgY29udGVudHMKCQkJCQlpZiggIXBhZ2UubGVuZ3RoICl7CgkJCQkJCXBhZ2UgPSAkKCAiPGRpdiBkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyb2xlPSdwYWdlJz4iICsgaHRtbC5zcGxpdCggLzxcLz9ib2R5W14+XSo+L2dtaSApWzFdICsgIjwvZGl2PiIgKTsKCQkJCQl9CgoJCQkJCWlmICggbmV3UGFnZVRpdGxlICYmICFwYWdlLmpxbURhdGEoICJ0aXRsZSIgKSApIHsKCQkJCQkJaWYgKCB+bmV3UGFnZVRpdGxlLmluZGV4T2YoICImIiApICkgewoJCQkJCQkJbmV3UGFnZVRpdGxlID0gJCggIjxkaXY+IiArIG5ld1BhZ2VUaXRsZSArICI8L2Rpdj4iICkudGV4dCgpOwoJCQkJCQl9CgkJCQkJCXBhZ2UuanFtRGF0YSggInRpdGxlIiwgbmV3UGFnZVRpdGxlICk7CgkJCQkJfQoKCQkJCQkvL3Jld3JpdGUgc3JjIGFuZCBocmVmIGF0dHJzIHRvIHVzZSBhIGJhc2UgdXJsCgkJCQkJaWYoICEkLnN1cHBvcnQuZHluYW1pY0Jhc2VUYWcgKSB7CgkJCQkJCXZhciBuZXdQYXRoID0gcGF0aC5nZXQoIGZpbGVVcmwgKTsKCQkJCQkJcGFnZS5maW5kKCAiW3NyY10sIGxpbmtbaHJlZl0sIGFbcmVsPSdleHRlcm5hbCddLCA6anFtRGF0YShhamF4PSdmYWxzZScpLCBhW3RhcmdldF0iICkuZWFjaChmdW5jdGlvbigpIHsKCQkJCQkJCXZhciB0aGlzQXR0ciA9ICQoIHRoaXMgKS5pcyggJ1tocmVmXScgKSA/ICdocmVmJyA6CgkJCQkJCQkJCSQodGhpcykuaXMoJ1tzcmNdJykgPyAnc3JjJyA6ICdhY3Rpb24nLAoJCQkJCQkJCXRoaXNVcmwgPSAkKCB0aGlzICkuYXR0ciggdGhpc0F0dHIgKTsKCgkJCQkJCQkvLyBYWFhfamJsYXM6IFdlIG5lZWQgdG8gZml4IHRoaXMgc28gdGhhdCBpdCByZW1vdmVzIHRoZSBkb2N1bWVudAoJCQkJCQkJLy8gICAgICAgICAgICBiYXNlIFVSTCwgYW5kIHRoZW4gcHJlcGVuZHMgd2l0aCB0aGUgbmV3IHBhZ2UgVVJMLgoJCQkJCQkJLy9pZiBmdWxsIHBhdGggZXhpc3RzIGFuZCBpcyBzYW1lLCBjaG9wIGl0IC0gaGVscHMgSUUgb3V0CgkJCQkJCQl0aGlzVXJsID0gdGhpc1VybC5yZXBsYWNlKCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0ICsgbG9jYXRpb24ucGF0aG5hbWUsICcnICk7CgoJCQkJCQkJaWYoICEvXihcdys6fCN8XC8pLy50ZXN0KCB0aGlzVXJsICkgKSB7CgkJCQkJCQkJJCggdGhpcyApLmF0dHIoIHRoaXNBdHRyLCBuZXdQYXRoICsgdGhpc1VybCApOwoJCQkJCQkJfQoJCQkJCQl9KTsKCQkJCQl9CgoJCQkJCS8vYXBwZW5kIHRvIHBhZ2UgYW5kIGVuaGFuY2UKCQkJCQkvLyBUT0RPIHRhZ2luZyBhIHBhZ2Ugd2l0aCBleHRlcm5hbCB0byBtYWtlIHN1cmUgdGhhdCBlbWJlZGRlZCBwYWdlcyBhcmVuJ3QgcmVtb3ZlZAoJCQkJCS8vICAgICAgYnkgdGhlIHZhcmlvdXMgcGFnZSBoYW5kbGluZyBjb2RlIGlzIGJhZC4gSGF2aW5nIHBhZ2UgaGFuZGxpbmcgY29kZSBpbiBtYW55CgkJCQkJLy8gICAgICBwbGFjZXMgaXMgYmFkLiBTb2x1dGlvbnMgcG9zdCAxLjAKCQkJCQlwYWdlCgkJCQkJCS5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidXJsIiwgcGF0aC5jb252ZXJ0VXJsVG9EYXRhVXJsKCBmaWxlVXJsICkgKQoJCQkJCQkuYXR0ciggImRhdGEtIiArICQubW9iaWxlLm5zICsgImV4dGVybmFsLXBhZ2UiLCB0cnVlICkKCQkJCQkJLmFwcGVuZFRvKCBzZXR0aW5ncy5wYWdlQ29udGFpbmVyICk7CgoJCQkJCS8vIHdhaXQgZm9yIHBhZ2UgY3JlYXRpb24gdG8gbGV2ZXJhZ2Ugb3B0aW9ucyBkZWZpbmVkIG9uIHdpZGdldAoJCQkJCXBhZ2Uub25lKCAncGFnZWNyZWF0ZScsICQubW9iaWxlLl9iaW5kUGFnZVJlbW92ZSApOwoKCQkJCQllbmhhbmNlUGFnZSggcGFnZSwgc2V0dGluZ3Mucm9sZSApOwoKCQkJCQkvLyBFbmhhbmNpbmcgdGhlIHBhZ2UgbWF5IHJlc3VsdCBpbiBuZXcgZGlhbG9ncy9zdWIgcGFnZXMgYmVpbmcgaW5zZXJ0ZWQKCQkJCQkvLyBpbnRvIHRoZSBET00uIElmIHRoZSBvcmlnaW5hbCBhYnNVcmwgcmVmZXJzIHRvIGEgc3ViLXBhZ2UsIHRoYXQgaXMgdGhlCgkJCQkJLy8gcmVhbCBwYWdlIHdlIGFyZSBpbnRlcmVzdGVkIGluLgoJCQkJCWlmICggYWJzVXJsLmluZGV4T2YoICImIiArICQubW9iaWxlLnN1YlBhZ2VVcmxLZXkgKSA+IC0xICkgewoJCQkJCQlwYWdlID0gc2V0dGluZ3MucGFnZUNvbnRhaW5lci5jaGlsZHJlbiggIjpqcW1EYXRhKHVybD0nIiArIGRhdGFVcmwgKyAiJykiICk7CgkJCQkJfQoKCQkJCQkvL2JpbmQgcGFnZUhpZGUgdG8gcmVtb3ZlUGFnZSBhZnRlciBpdCdzIGhpZGRlbiwgaWYgdGhlIHBhZ2Ugb3B0aW9ucyBzcGVjaWZ5IHRvIGRvIHNvCgoJCQkJCS8vIFJlbW92ZSBsb2FkaW5nIG1lc3NhZ2UuCgkJCQkJaWYgKCBzZXR0aW5ncy5zaG93TG9hZE1zZyApIHsKCQkJCQkJaGlkZU1zZygpOwoJCQkJCX0KCgkJCQkJLy8gQWRkIHRoZSBwYWdlIHJlZmVyZW5jZSBhbmQgeGhyIHRvIG91ciB0cmlnZ2VyRGF0YS4KCQkJCQl0cmlnZ2VyRGF0YS54aHIgPSB4aHI7CgkJCQkJdHJpZ2dlckRhdGEudGV4dFN0YXR1cyA9IHRleHRTdGF0dXM7CgkJCQkJdHJpZ2dlckRhdGEucGFnZSA9IHBhZ2U7CgoJCQkJCS8vIExldCBsaXN0ZW5lcnMga25vdyB0aGUgcGFnZSBsb2FkZWQgc3VjY2Vzc2Z1bGx5LgoJCQkJCXNldHRpbmdzLnBhZ2VDb250YWluZXIudHJpZ2dlciggInBhZ2Vsb2FkIiwgdHJpZ2dlckRhdGEgKTsKCgkJCQkJZGVmZXJyZWQucmVzb2x2ZSggYWJzVXJsLCBvcHRpb25zLCBwYWdlLCBkdXBDYWNoZWRQYWdlICk7CgkJCQl9LAoJCQkJZXJyb3I6IGZ1bmN0aW9uKCB4aHIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duICkgewoJCQkJCS8vc2V0IGJhc2UgYmFjayB0byBjdXJyZW50IHBhdGgKCQkJCQlpZiggYmFzZSApIHsKCQkJCQkJYmFzZS5zZXQoIHBhdGguZ2V0KCkgKTsKCQkJCQl9CgoJCQkJCS8vIEFkZCBlcnJvciBpbmZvIHRvIG91ciB0cmlnZ2VyRGF0YS4KCQkJCQl0cmlnZ2VyRGF0YS54aHIgPSB4aHI7CgkJCQkJdHJpZ2dlckRhdGEudGV4dFN0YXR1cyA9IHRleHRTdGF0dXM7CgkJCQkJdHJpZ2dlckRhdGEuZXJyb3JUaHJvd24gPSBlcnJvclRocm93bjsKCgkJCQkJdmFyIHBsZkV2ZW50ID0gbmV3ICQuRXZlbnQoICJwYWdlbG9hZGZhaWxlZCIgKTsKCgkJCQkJLy8gTGV0IGxpc3RlbmVycyBrbm93IHRoZSBwYWdlIGxvYWQgZmFpbGVkLgoJCQkJCXNldHRpbmdzLnBhZ2VDb250YWluZXIudHJpZ2dlciggcGxmRXZlbnQsIHRyaWdnZXJEYXRhICk7CgoJCQkJCS8vIElmIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHByZXZlbnRlZCwgc3RvcCBoZXJlIQoJCQkJCS8vIE5vdGUgdGhhdCBpdCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIGxpc3RlbmVyL2hhbmRsZXIKCQkJCQkvLyB0aGF0IGNhbGxlZCBwcmV2ZW50RGVmYXVsdCgpLCB0byByZXNvbHZlL3JlamVjdCB0aGUKCQkJCQkvLyBkZWZlcnJlZCBvYmplY3Qgd2l0aGluIHRoZSB0cmlnZ2VyRGF0YS4KCQkJCQlpZiggcGxmRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKXsKCQkJCQkJcmV0dXJuOwoJCQkJCX0KCgkJCQkJLy8gUmVtb3ZlIGxvYWRpbmcgbWVzc2FnZS4KCQkJCQlpZiAoIHNldHRpbmdzLnNob3dMb2FkTXNnICkgewoKCQkJCQkJLy8gUmVtb3ZlIGxvYWRpbmcgbWVzc2FnZS4KCQkJCQkJaGlkZU1zZygpOwoKCQkJCQkJLy9zaG93IGVycm9yIG1lc3NhZ2UKCQkJCQkJJCggIjxkaXYgY2xhc3M9J3VpLWxvYWRlciB1aS1vdmVybGF5LXNoYWRvdyB1aS1ib2R5LWUgdWktY29ybmVyLWFsbCc+PGgxPiIrICQubW9iaWxlLnBhZ2VMb2FkRXJyb3JNZXNzYWdlICsiPC9oMT48L2Rpdj4iICkKCQkJCQkJCS5jc3MoeyAiZGlzcGxheSI6ICJibG9jayIsICJvcGFjaXR5IjogMC45NiwgInRvcCI6ICR3aW5kb3cuc2Nyb2xsVG9wKCkgKyAxMDAgfSkKCQkJCQkJCS5hcHBlbmRUbyggc2V0dGluZ3MucGFnZUNvbnRhaW5lciApCgkJCQkJCQkuZGVsYXkoIDgwMCApCgkJCQkJCQkuZmFkZU91dCggNDAwLCBmdW5jdGlvbigpIHsKCQkJCQkJCQkkKCB0aGlzICkucmVtb3ZlKCk7CgkJCQkJCQl9KTsKCQkJCQl9CgoJCQkJCWRlZmVycmVkLnJlamVjdCggYWJzVXJsLCBvcHRpb25zICk7CgkJCQl9CgkJCX0pOwoJCX0KCgkJcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTsKCX07CgoJJC5tb2JpbGUubG9hZFBhZ2UuZGVmYXVsdHMgPSB7CgkJdHlwZTogImdldCIsCgkJZGF0YTogdW5kZWZpbmVkLAoJCXJlbG9hZFBhZ2U6IGZhbHNlLAoJCXJvbGU6IHVuZGVmaW5lZCwgLy8gQnkgZGVmYXVsdCB3ZSByZWx5IG9uIHRoZSByb2xlIGRlZmluZWQgYnkgdGhlIEBkYXRhLXJvbGUgYXR0cmlidXRlLgoJCXNob3dMb2FkTXNnOiBmYWxzZSwKCQlwYWdlQ29udGFpbmVyOiB1bmRlZmluZWQsCgkJbG9hZE1zZ0RlbGF5OiA1MCAvLyBUaGlzIGRlbGF5IGFsbG93cyBsb2FkcyB0aGF0IHB1bGwgZnJvbSBicm93c2VyIGNhY2hlIHRvIG9jY3VyIHdpdGhvdXQgc2hvd2luZyB0aGUgbG9hZGluZyBtZXNzYWdlLgoJfTsKCgkvLyBTaG93IGEgc3BlY2lmaWMgcGFnZSBpbiB0aGUgcGFnZSBjb250YWluZXIuCgkkLm1vYmlsZS5jaGFuZ2VQYWdlID0gZnVuY3Rpb24oIHRvUGFnZSwgb3B0aW9ucyApIHsKCQkvLyBJZiB3ZSBhcmUgaW4gdGhlIG1pZHN0IG9mIGEgdHJhbnNpdGlvbiwgcXVldWUgdGhlIGN1cnJlbnQgcmVxdWVzdC4KCQkvLyBXZSdsbCBjYWxsIGNoYW5nZVBhZ2UoKSBvbmNlIHdlJ3JlIGRvbmUgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uIHRvCgkJLy8gc2VydmljZSB0aGUgcmVxdWVzdC4KCQlpZiggaXNQYWdlVHJhbnNpdGlvbmluZyApIHsKCQkJcGFnZVRyYW5zaXRpb25RdWV1ZS51bnNoaWZ0KCBhcmd1bWVudHMgKTsKCQkJcmV0dXJuOwoJCX0KCgkJdmFyIHNldHRpbmdzID0gJC5leHRlbmQoIHt9LCAkLm1vYmlsZS5jaGFuZ2VQYWdlLmRlZmF1bHRzLCBvcHRpb25zICk7CgoJCS8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgcGFnZUNvbnRhaW5lciB0byB3b3JrIHdpdGguCgkJc2V0dGluZ3MucGFnZUNvbnRhaW5lciA9IHNldHRpbmdzLnBhZ2VDb250YWluZXIgfHwgJC5tb2JpbGUucGFnZUNvbnRhaW5lcjsKCgkJLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBmcm9tUGFnZS4KCQlzZXR0aW5ncy5mcm9tUGFnZSA9IHNldHRpbmdzLmZyb21QYWdlIHx8ICQubW9iaWxlLmFjdGl2ZVBhZ2U7CgoJCXZhciBtcGMgPSBzZXR0aW5ncy5wYWdlQ29udGFpbmVyLAoJCQlwYmNFdmVudCA9IG5ldyAkLkV2ZW50KCAicGFnZWJlZm9yZWNoYW5nZSIgKSwKCQkJdHJpZ2dlckRhdGEgPSB7IHRvUGFnZTogdG9QYWdlLCBvcHRpb25zOiBzZXR0aW5ncyB9OwoKCQkvLyBMZXQgbGlzdGVuZXJzIGtub3cgd2UncmUgYWJvdXQgdG8gY2hhbmdlIHRoZSBjdXJyZW50IHBhZ2UuCgkJbXBjLnRyaWdnZXIoIHBiY0V2ZW50LCB0cmlnZ2VyRGF0YSApOwoKCQkvLyBJZiB0aGUgZGVmYXVsdCBiZWhhdmlvciBpcyBwcmV2ZW50ZWQsIHN0b3AgaGVyZSEKCQlpZiggcGJjRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKXsKCQkJcmV0dXJuOwoJCX0KCgkJLy8gV2UgYWxsb3cgInBhZ2ViZWZvcmVjaGFuZ2UiIG9ic2VydmVycyB0byBtb2RpZnkgdGhlIHRvUGFnZSBpbiB0aGUgdHJpZ2dlcgoJCS8vIGRhdGEgdG8gYWxsb3cgZm9yIHJlZGlyZWN0cy4gTWFrZSBzdXJlIG91ciB0b1BhZ2UgaXMgdXBkYXRlZC4KCgkJdG9QYWdlID0gdHJpZ2dlckRhdGEudG9QYWdlOwoKCQkvLyBTZXQgdGhlIGlzUGFnZVRyYW5zaXRpb25pbmcgZmxhZyB0byBwcmV2ZW50IGFueSByZXF1ZXN0cyBmcm9tCgkJLy8gZW50ZXJpbmcgdGhpcyBtZXRob2Qgd2hpbGUgd2UgYXJlIGluIHRoZSBtaWRzdCBvZiBsb2FkaW5nIGEgcGFnZQoJCS8vIG9yIHRyYW5zaXRpb25pbmcuCgoJCWlzUGFnZVRyYW5zaXRpb25pbmcgPSB0cnVlOwoKCQkvLyBJZiB0aGUgY2FsbGVyIHBhc3NlZCB1cyBhIHVybCwgY2FsbCBsb2FkUGFnZSgpCgkJLy8gdG8gbWFrZSBzdXJlIGl0IGlzIGxvYWRlZCBpbnRvIHRoZSBET00uIFdlJ2xsIGxpc3RlbgoJCS8vIHRvIHRoZSBwcm9taXNlIG9iamVjdCBpdCByZXR1cm5zIHNvIHdlIGtub3cgd2hlbgoJCS8vIGl0IGlzIGRvbmUgbG9hZGluZyBvciBpZiBhbiBlcnJvciBvY3VycmVkLgoJCWlmICggdHlwZW9mIHRvUGFnZSA9PSAic3RyaW5nIiApIHsKCQkJJC5tb2JpbGUubG9hZFBhZ2UoIHRvUGFnZSwgc2V0dGluZ3MgKQoJCQkJLmRvbmUoZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgbmV3UGFnZSwgZHVwQ2FjaGVkUGFnZSApIHsKCQkJCQlpc1BhZ2VUcmFuc2l0aW9uaW5nID0gZmFsc2U7CgkJCQkJb3B0aW9ucy5kdXBsaWNhdGVDYWNoZWRQYWdlID0gZHVwQ2FjaGVkUGFnZTsKCQkJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlKCBuZXdQYWdlLCBvcHRpb25zICk7CgkJCQl9KQoJCQkJLmZhaWwoZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHsKCQkJCQlpc1BhZ2VUcmFuc2l0aW9uaW5nID0gZmFsc2U7CgoJCQkJCS8vY2xlYXIgb3V0IHRoZSBhY3RpdmUgYnV0dG9uIHN0YXRlCgkJCQkJcmVtb3ZlQWN0aXZlTGlua0NsYXNzKCB0cnVlICk7CgoJCQkJCS8vcmVsZWFzZSB0cmFuc2l0aW9uIGxvY2sgc28gbmF2aWdhdGlvbiBpcyBmcmVlIGFnYWluCgkJCQkJcmVsZWFzZVBhZ2VUcmFuc2l0aW9uTG9jaygpOwoJCQkJCXNldHRpbmdzLnBhZ2VDb250YWluZXIudHJpZ2dlciggInBhZ2VjaGFuZ2VmYWlsZWQiLCB0cmlnZ2VyRGF0YSApOwoJCQkJfSk7CgkJCXJldHVybjsKCQl9CgoJCS8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZmlyc3QtcGFnZSBvZiB0aGUgYXBwbGljYXRpb24sIHdlIG5lZWQgdG8gbWFrZQoJCS8vIHN1cmUgc2V0dGluZ3MuZGF0YVVybCBpcyBzZXQgdG8gdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50IHVybC4gVGhpcyBhbGxvd3MKCQkvLyB1cyB0byBhdm9pZCBnZW5lcmF0aW5nIGEgZG9jdW1lbnQgdXJsIHdpdGggYW4gaWQgaGFzaCBpbiB0aGUgY2FzZSB3aGVyZSB0aGUKCQkvLyBmaXJzdC1wYWdlIG9mIHRoZSBkb2N1bWVudCBoYXMgYW4gaWQgYXR0cmlidXRlIHNwZWNpZmllZC4KCQlpZiAoIHRvUGFnZVsgMCBdID09PSAkLm1vYmlsZS5maXJzdFBhZ2VbIDAgXSAmJiAhc2V0dGluZ3MuZGF0YVVybCApIHsKCQkJc2V0dGluZ3MuZGF0YVVybCA9IGRvY3VtZW50VXJsLmhyZWZOb0hhc2g7CgkJfQoKCQkvLyBUaGUgY2FsbGVyIHBhc3NlZCB1cyBhIHJlYWwgcGFnZSBET00gZWxlbWVudC4gVXBkYXRlIG91cgoJCS8vIGludGVybmFsIHN0YXRlIGFuZCB0aGVuIHRyaWdnZXIgYSB0cmFuc2l0aW9uIHRvIHRoZSBwYWdlLgoJCXZhciBmcm9tUGFnZSA9IHNldHRpbmdzLmZyb21QYWdlLAoJCQl1cmwgPSAoIHNldHRpbmdzLmRhdGFVcmwgJiYgcGF0aC5jb252ZXJ0VXJsVG9EYXRhVXJsKCBzZXR0aW5ncy5kYXRhVXJsICkgKSB8fCB0b1BhZ2UuanFtRGF0YSggInVybCIgKSwKCQkJLy8gVGhlIHBhZ2VVcmwgdmFyIGlzIHVzdWFsbHkgdGhlIHNhbWUgYXMgdXJsLCBleGNlcHQgd2hlbiB1cmwgaXMgb2JzY3VyZWQgYXMgYSBkaWFsb2cgdXJsLiBwYWdlVXJsIGFsd2F5cyBjb250YWlucyB0aGUgZmlsZSBwYXRoCgkJCXBhZ2VVcmwgPSB1cmwsCgkJCWZpbGVVcmwgPSBwYXRoLmdldEZpbGVQYXRoKCB1cmwgKSwKCQkJYWN0aXZlID0gdXJsSGlzdG9yeS5nZXRBY3RpdmUoKSwKCQkJYWN0aXZlSXNJbml0aWFsUGFnZSA9IHVybEhpc3RvcnkuYWN0aXZlSW5kZXggPT09IDAsCgkJCWhpc3RvcnlEaXIgPSAwLAoJCQlwYWdlVGl0bGUgPSBkb2N1bWVudC50aXRsZSwKCQkJaXNEaWFsb2cgPSBzZXR0aW5ncy5yb2xlID09PSAiZGlhbG9nIiB8fCB0b1BhZ2UuanFtRGF0YSggInJvbGUiICkgPT09ICJkaWFsb2ciOwoKCQkvLyBCeSBkZWZhdWx0LCB3ZSBwcmV2ZW50IGNoYW5nZVBhZ2UgcmVxdWVzdHMgd2hlbiB0aGUgZnJvbVBhZ2UgYW5kIHRvUGFnZQoJCS8vIGFyZSB0aGUgc2FtZSBlbGVtZW50LCBidXQgZm9sa3MgdGhhdCBnZW5lcmF0ZSBjb250ZW50IG1hbnVhbGx5L2R5bmFtaWNhbGx5CgkJLy8gYW5kIHJldXNlIHBhZ2VzIHdhbnQgdG8gYmUgYWJsZSB0byB0cmFuc2l0aW9uIHRvIHRoZSBzYW1lIHBhZ2UuIFRvIGFsbG93CgkJLy8gdGhpcywgdGhleSB3aWxsIG5lZWQgdG8gY2hhbmdlIHRoZSBkZWZhdWx0IHZhbHVlIG9mIGFsbG93U2FtZVBhZ2VUcmFuc2l0aW9uCgkJLy8gdG8gdHJ1ZSwgKk9SKiwgcGFzcyBpdCBpbiBhcyBhbiBvcHRpb24gd2hlbiB0aGV5IG1hbnVhbGx5IGNhbGwgY2hhbmdlUGFnZSgpLgoJCS8vIEl0IHNob3VsZCBiZSBub3RlZCB0aGF0IG91ciBkZWZhdWx0IHRyYW5zaXRpb24gYW5pbWF0aW9ucyBhc3N1bWUgdGhhdCB0aGUKCQkvLyBmb3JtUGFnZSBhbmQgdG9QYWdlIGFyZSBkaWZmZXJlbnQgZWxlbWVudHMsIHNvIHRoZXkgbWF5IGJlaGF2ZSB1bmV4cGVjdGVkbHkuCgkJLy8gSXQgaXMgdXAgdG8gdGhlIGRldmVsb3BlciB0aGF0IHR1cm5zIG9uIHRoZSBhbGxvd1NhbWVQYWdlVHJhbnNpdGlvbmEgb3B0aW9uCgkJLy8gdG8gZWl0aGVyIHR1cm4gb2ZmIHRyYW5zaXRpb24gYW5pbWF0aW9ucywgb3IgbWFrZSBzdXJlIHRoYXQgYW4gYXBwcm9wcmlhdGUKCQkvLyBhbmltYXRpb24gdHJhbnNpdGlvbiBpcyB1c2VkLgoJCWlmKCBmcm9tUGFnZSAmJiBmcm9tUGFnZVswXSA9PT0gdG9QYWdlWzBdICYmICFzZXR0aW5ncy5hbGxvd1NhbWVQYWdlVHJhbnNpdGlvbiApIHsKCQkJaXNQYWdlVHJhbnNpdGlvbmluZyA9IGZhbHNlOwoJCQltcGMudHJpZ2dlciggInBhZ2VjaGFuZ2UiLCB0cmlnZ2VyRGF0YSApOwoJCQlyZXR1cm47CgkJfQoKCQkvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGUgcGFnZSB3ZSBhcmUgZ2l2ZW4gaGFzIGFscmVhZHkgYmVlbiBlbmhhbmNlZC4KCQllbmhhbmNlUGFnZSggdG9QYWdlLCBzZXR0aW5ncy5yb2xlICk7CgoJCS8vIElmIHRoZSBjaGFuZ2VQYWdlIHJlcXVlc3Qgd2FzIHNlbnQgZnJvbSBhIGhhc2hDaGFuZ2UgZXZlbnQsIGNoZWNrIHRvIHNlZSBpZiB0aGUKCQkvLyBwYWdlIGlzIGFscmVhZHkgd2l0aGluIHRoZSB1cmxIaXN0b3J5IHN0YWNrLiBJZiBzbywgd2UnbGwgYXNzdW1lIHRoZSB1c2VyIGhpdAoJCS8vIHRoZSBmb3J3YXJkL2JhY2sgYnV0dG9uIGFuZCB3aWxsIHRyeSB0byBtYXRjaCB0aGUgdHJhbnNpdGlvbiBhY2NvcmRpbmdseS4KCQlpZiggc2V0dGluZ3MuZnJvbUhhc2hDaGFuZ2UgKSB7CgkJCXVybEhpc3RvcnkuZGlyZWN0SGFzaENoYW5nZSh7CgkJCQljdXJyZW50VXJsOgl1cmwsCgkJCQlpc0JhY2s6CQlmdW5jdGlvbigpIHsgaGlzdG9yeURpciA9IC0xOyB9LAoJCQkJaXNGb3J3YXJkOglmdW5jdGlvbigpIHsgaGlzdG9yeURpciA9IDE7IH0KCQkJfSk7CgkJfQoKCQkvLyBLaWxsIHRoZSBrZXlib2FyZC4KCQkvLyBYWFhfamJsYXM6IFdlIG5lZWQgdG8gc3RvcCBjcmF3bGluZyB0aGUgZW50aXJlIGRvY3VtZW50IHRvIGtpbGwgZm9jdXMuIEluc3RlYWQsCgkJLy8gICAgICAgICAgICB3ZSBzaG91bGQgYmUgdHJhY2tpbmcgZm9jdXMgd2l0aCBhIGRlbGVnYXRlKCkgaGFuZGxlciBzbyB3ZSBhbHJlYWR5IGhhdmUKCQkvLyAgICAgICAgICAgIHRoZSBlbGVtZW50IGluIGhhbmQgYXQgdGhpcyBwb2ludC4KCQkvLyBXcmFwIHRoaXMgaW4gYSB0cnkvY2F0Y2ggYmxvY2sgc2luY2UgSUU5IHRocm93ICJVbnNwZWNpZmllZCBlcnJvciIgaWYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudAoJCS8vIGlzIHVuZGVmaW5lZCB3aGVuIHdlIGFyZSBpbiBhbiBJRnJhbWUuCgkJdHJ5IHsKCQkJaWYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT0gJ2JvZHknKSB7CgkJCQkkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmJsdXIoKTsKCQkJfSBlbHNlIHsKCQkJCSQoICJpbnB1dDpmb2N1cywgdGV4dGFyZWE6Zm9jdXMsIHNlbGVjdDpmb2N1cyIgKS5ibHVyKCk7CgkJCX0KCQl9IGNhdGNoKGUpIHt9CgoJCS8vIElmIHdlJ3JlIGRpc3BsYXlpbmcgdGhlIHBhZ2UgYXMgYSBkaWFsb2csIHdlIGRvbid0IHdhbnQgdGhlIHVybAoJCS8vIGZvciB0aGUgZGlhbG9nIGNvbnRlbnQgdG8gYmUgdXNlZCBpbiB0aGUgaGFzaC4gSW5zdGVhZCwgd2Ugd2FudAoJCS8vIHRvIGFwcGVuZCB0aGUgZGlhbG9nSGFzaEtleSB0byB0aGUgdXJsIG9mIHRoZSBjdXJyZW50IHBhZ2UuCgkJaWYgKCBpc0RpYWxvZyAmJiBhY3RpdmUgKSB7CgkJCS8vIG9uIHRoZSBpbml0aWFsIHBhZ2UgbG9hZCBhY3RpdmUudXJsIGlzIHVuZGVmaW5lZCBhbmQgaW4gdGhhdCBjYXNlIHNob3VsZAoJCQkvLyBiZSBhbiBlbXB0eSBzdHJpbmcuIE1vdmluZyB0aGUgdW5kZWZpbmVkIC0+IGVtcHR5IHN0cmluZyBiYWNrIGludG8KCQkJLy8gdXJsSGlzdG9yeS5hZGROZXcgc2VlbWVkIGltcHJ1ZGVudCBnaXZlbiB1bmRlZmluZWQgYmV0dGVyIHJlcHJlc2VudHMKCQkJLy8gdGhlIHVybCBzdGF0ZQoJCQl1cmwgPSAoIGFjdGl2ZS51cmwgfHwgIiIgKSArIGRpYWxvZ0hhc2hLZXk7CgkJfQoKCQkvLyBTZXQgdGhlIGxvY2F0aW9uIGhhc2guCgkJaWYoIHNldHRpbmdzLmNoYW5nZUhhc2ggIT09IGZhbHNlICYmIHVybCApIHsKCQkJLy9kaXNhYmxlIGhhc2ggbGlzdGVuaW5nIHRlbXBvcmFyaWx5CgkJCXVybEhpc3RvcnkuaWdub3JlTmV4dEhhc2hDaGFuZ2UgPSB0cnVlOwoJCQkvL3VwZGF0ZSBoYXNoIGFuZCBoaXN0b3J5CgkJCXBhdGguc2V0KCB1cmwgKTsKCQl9CgoJCS8vIGlmIHRpdGxlIGVsZW1lbnQgd2Fzbid0IGZvdW5kLCB0cnkgdGhlIHBhZ2UgZGl2IGRhdGEgYXR0ciB0b28KCQkvLyBJZiB0aGlzIGlzIGEgZGVlcC1saW5rIG9yIGEgcmVsb2FkICggYWN0aXZlID09PSB1bmRlZmluZWQgKSB0aGVuIGp1c3QgdXNlIHBhZ2VUaXRsZQoJCXZhciBuZXdQYWdlVGl0bGUgPSAoICFhY3RpdmUgKT8gcGFnZVRpdGxlIDogdG9QYWdlLmpxbURhdGEoICJ0aXRsZSIgKSB8fCB0b1BhZ2UuY2hpbGRyZW4oIjpqcW1EYXRhKHJvbGU9J2hlYWRlcicpIikuZmluZCgiLnVpLXRpdGxlIiApLmdldEVuY29kZWRUZXh0KCk7CgkJaWYoICEhbmV3UGFnZVRpdGxlICYmIHBhZ2VUaXRsZSA9PSBkb2N1bWVudC50aXRsZSApIHsKCQkJcGFnZVRpdGxlID0gbmV3UGFnZVRpdGxlOwoJCX0KCQlpZiAoICF0b1BhZ2UuanFtRGF0YSggInRpdGxlIiApICkgewoJCQl0b1BhZ2UuanFtRGF0YSggInRpdGxlIiwgcGFnZVRpdGxlICk7CgkJfQoKCQkvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhIHRyYW5zaXRpb24gZGVmaW5lZC4KCQlzZXR0aW5ncy50cmFuc2l0aW9uID0gc2V0dGluZ3MudHJhbnNpdGlvbgoJCQl8fCAoICggaGlzdG9yeURpciAmJiAhYWN0aXZlSXNJbml0aWFsUGFnZSApID8gYWN0aXZlLnRyYW5zaXRpb24gOiB1bmRlZmluZWQgKQoJCQl8fCAoIGlzRGlhbG9nID8gJC5tb2JpbGUuZGVmYXVsdERpYWxvZ1RyYW5zaXRpb24gOiAkLm1vYmlsZS5kZWZhdWx0UGFnZVRyYW5zaXRpb24gKTsKCgkJLy9hZGQgcGFnZSB0byBoaXN0b3J5IHN0YWNrIGlmIGl0J3Mgbm90IGJhY2sgb3IgZm9yd2FyZAoJCWlmKCAhaGlzdG9yeURpciApIHsKCQkJdXJsSGlzdG9yeS5hZGROZXcoIHVybCwgc2V0dGluZ3MudHJhbnNpdGlvbiwgcGFnZVRpdGxlLCBwYWdlVXJsLCBzZXR0aW5ncy5yb2xlICk7CgkJfQoKCQkvL3NldCBwYWdlIHRpdGxlCgkJZG9jdW1lbnQudGl0bGUgPSB1cmxIaXN0b3J5LmdldEFjdGl2ZSgpLnRpdGxlOwoKCQkvL3NldCAidG9QYWdlIiBhcyBhY3RpdmVQYWdlCgkJJC5tb2JpbGUuYWN0aXZlUGFnZSA9IHRvUGFnZTsKCgkJLy8gSWYgd2UncmUgbmF2aWdhdGluZyBiYWNrIGluIHRoZSBVUkwgaGlzdG9yeSwgc2V0IHJldmVyc2UgYWNjb3JkaW5nbHkuCgkJc2V0dGluZ3MucmV2ZXJzZSA9IHNldHRpbmdzLnJldmVyc2UgfHwgaGlzdG9yeURpciA8IDA7CgoJCXRyYW5zaXRpb25QYWdlcyggdG9QYWdlLCBmcm9tUGFnZSwgc2V0dGluZ3MudHJhbnNpdGlvbiwgc2V0dGluZ3MucmV2ZXJzZSApCgkJCS5kb25lKGZ1bmN0aW9uKCkgewoJCQkJcmVtb3ZlQWN0aXZlTGlua0NsYXNzKCk7CgoJCQkJLy9pZiB0aGVyZSdzIGEgZHVwbGljYXRlQ2FjaGVkUGFnZSwgcmVtb3ZlIGl0IGZyb20gdGhlIERPTSBub3cgdGhhdCBpdCdzIGhpZGRlbgoJCQkJaWYgKCBzZXR0aW5ncy5kdXBsaWNhdGVDYWNoZWRQYWdlICkgewoJCQkJCXNldHRpbmdzLmR1cGxpY2F0ZUNhY2hlZFBhZ2UucmVtb3ZlKCk7CgkJCQl9CgoJCQkJLy9yZW1vdmUgaW5pdGlhbCBidWlsZCBjbGFzcyAob25seSBwcmVzZW50IG9uIGZpcnN0IHBhZ2VzaG93KQoJCQkJJGh0bWwucmVtb3ZlQ2xhc3MoICJ1aS1tb2JpbGUtcmVuZGVyaW5nIiApOwoKCQkJCXJlbGVhc2VQYWdlVHJhbnNpdGlvbkxvY2soKTsKCgkJCQkvLyBMZXQgbGlzdGVuZXJzIGtub3cgd2UncmUgYWxsIGRvbmUgY2hhbmdpbmcgdGhlIGN1cnJlbnQgcGFnZS4KCQkJCW1wYy50cmlnZ2VyKCAicGFnZWNoYW5nZSIsIHRyaWdnZXJEYXRhICk7CgkJCX0pOwoJfTsKCgkkLm1vYmlsZS5jaGFuZ2VQYWdlLmRlZmF1bHRzID0gewoJCXRyYW5zaXRpb246IHVuZGVmaW5lZCwKCQlyZXZlcnNlOiBmYWxzZSwKCQljaGFuZ2VIYXNoOiB0cnVlLAoJCWZyb21IYXNoQ2hhbmdlOiBmYWxzZSwKCQlyb2xlOiB1bmRlZmluZWQsIC8vIEJ5IGRlZmF1bHQgd2UgcmVseSBvbiB0aGUgcm9sZSBkZWZpbmVkIGJ5IHRoZSBAZGF0YS1yb2xlIGF0dHJpYnV0ZS4KCQlkdXBsaWNhdGVDYWNoZWRQYWdlOiB1bmRlZmluZWQsCgkJcGFnZUNvbnRhaW5lcjogdW5kZWZpbmVkLAoJCXNob3dMb2FkTXNnOiB0cnVlLCAvL2xvYWRpbmcgbWVzc2FnZSBzaG93cyBieSBkZWZhdWx0IHdoZW4gcGFnZXMgYXJlIGJlaW5nIGZldGNoZWQgZHVyaW5nIGNoYW5nZVBhZ2UKCQlkYXRhVXJsOiB1bmRlZmluZWQsCgkJZnJvbVBhZ2U6IHVuZGVmaW5lZCwKCQlhbGxvd1NhbWVQYWdlVHJhbnNpdGlvbjogZmFsc2UKCX07CgovKiBFdmVudCBCaW5kaW5ncyAtIGhhc2hjaGFuZ2UsIHN1Ym1pdCwgYW5kIGNsaWNrICovCglmdW5jdGlvbiBmaW5kQ2xvc2VzdExpbmsoIGVsZSApCgl7CgkJd2hpbGUgKCBlbGUgKSB7CgkJCS8vIExvb2sgZm9yIHRoZSBjbG9zZXN0IGVsZW1lbnQgd2l0aCBhIG5vZGVOYW1lIG9mICJhIi4KCQkJLy8gTm90ZSB0aGF0IHdlIGFyZSBjaGVja2luZyBpZiB3ZSBoYXZlIGEgdmFsaWQgbm9kZU5hbWUKCQkJLy8gYmVmb3JlIGF0dGVtcHRpbmcgdG8gYWNjZXNzIGl0LiBUaGlzIGlzIGJlY2F1c2UgdGhlCgkJCS8vIG5vZGUgd2UgZ2V0IGNhbGxlZCB3aXRoIGNvdWxkIGhhdmUgb3JpZ2luYXRlZCBmcm9tIHdpdGhpbgoJCQkvLyBhbiBlbWJlZGRlZCBTVkcgZG9jdW1lbnQgd2hlcmUgc29tZSBzeW1ib2wgaW5zdGFuY2UgZWxlbWVudHMKCQkJLy8gZG9uJ3QgaGF2ZSBub2RlTmFtZSBkZWZpbmVkIG9uIHRoZW0sIG9yIHN0cmluZ3MgYXJlIG9mIHR5cGUKCQkJLy8gU1ZHQW5pbWF0ZWRTdHJpbmcuCgkJCWlmICggKCB0eXBlb2YgZWxlLm5vZGVOYW1lID09PSAic3RyaW5nIiApICYmIGVsZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09ICJhIiApIHsKCQkJCWJyZWFrOwoJCQl9CgkJCWVsZSA9IGVsZS5wYXJlbnROb2RlOwoJCX0KCQlyZXR1cm4gZWxlOwoJfQoKCS8vIFRoZSBiYXNlIFVSTCBmb3IgYW55IGdpdmVuIGVsZW1lbnQgZGVwZW5kcyBvbiB0aGUgcGFnZSBpdCByZXNpZGVzIGluLgoJZnVuY3Rpb24gZ2V0Q2xvc2VzdEJhc2VVcmwoIGVsZSApCgl7CgkJLy8gRmluZCB0aGUgY2xvc2VzdCBwYWdlIGFuZCBleHRyYWN0IG91dCBpdHMgdXJsLgoJCXZhciB1cmwgPSAkKCBlbGUgKS5jbG9zZXN0KCAiLnVpLXBhZ2UiICkuanFtRGF0YSggInVybCIgKSwKCQkJYmFzZSA9IGRvY3VtZW50QmFzZS5ocmVmTm9IYXNoOwoKCQlpZiAoICF1cmwgfHwgIXBhdGguaXNQYXRoKCB1cmwgKSApIHsKCQkJdXJsID0gYmFzZTsKCQl9CgoJCXJldHVybiBwYXRoLm1ha2VVcmxBYnNvbHV0ZSggdXJsLCBiYXNlKTsKCX0KCgkvL1RoZSBmb2xsb3dpbmcgZXZlbnQgYmluZGluZ3Mgc2hvdWxkIGJlIGJvdW5kIGFmdGVyIG1vYmlsZWluaXQgaGFzIGJlZW4gdHJpZ2dlcmVkCgkvL3RoZSBmb2xsb3dpbmcgZnVuY3Rpb24gaXMgY2FsbGVkIGluIHRoZSBpbml0IGZpbGUKCSQubW9iaWxlLl9yZWdpc3RlckludGVybmFsRXZlbnRzID0gZnVuY3Rpb24oKXsKCgkJLy9iaW5kIHRvIGZvcm0gc3VibWl0IGV2ZW50cywgaGFuZGxlIHdpdGggQWpheAoJCSQoIGRvY3VtZW50ICkuZGVsZWdhdGUoICJmb3JtIiwgInN1Ym1pdCIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyICR0aGlzID0gJCggdGhpcyApOwoJCQlpZiggISQubW9iaWxlLmFqYXhFbmFibGVkIHx8CgkJCQkkdGhpcy5pcyggIjpqcW1EYXRhKGFqYXg9J2ZhbHNlJykiICkgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJdmFyIHR5cGUgPSAkdGhpcy5hdHRyKCAibWV0aG9kIiApLAoJCQkJdGFyZ2V0ID0gJHRoaXMuYXR0ciggInRhcmdldCIgKSwKCQkJCXVybCA9ICR0aGlzLmF0dHIoICJhY3Rpb24iICk7CgoJCQkvLyBJZiBubyBhY3Rpb24gaXMgc3BlY2lmaWVkLCBicm93c2VycyBkZWZhdWx0IHRvIHVzaW5nIHRoZQoJCQkvLyBVUkwgb2YgdGhlIGRvY3VtZW50IGNvbnRhaW5pbmcgdGhlIGZvcm0uIFNpbmNlIHdlIGR5bmFtaWNhbGx5CgkJCS8vIHB1bGwgaW4gcGFnZXMgZnJvbSBleHRlcm5hbCBkb2N1bWVudHMsIHRoZSBmb3JtIHNob3VsZCBzdWJtaXQKCQkJLy8gdG8gdGhlIFVSTCBmb3IgdGhlIHNvdXJjZSBkb2N1bWVudCBvZiB0aGUgcGFnZSBjb250YWluaW5nCgkJCS8vIHRoZSBmb3JtLgoJCQlpZiAoICF1cmwgKSB7CgkJCQkvLyBHZXQgdGhlIEBkYXRhLXVybCBmb3IgdGhlIHBhZ2UgY29udGFpbmluZyB0aGUgZm9ybS4KCQkJCXVybCA9IGdldENsb3Nlc3RCYXNlVXJsKCAkdGhpcyApOwoJCQkJaWYgKCB1cmwgPT09IGRvY3VtZW50QmFzZS5ocmVmTm9IYXNoICkgewoJCQkJCS8vIFRoZSB1cmwgd2UgZ290IGJhY2sgbWF0Y2hlcyB0aGUgZG9jdW1lbnQgYmFzZSwKCQkJCQkvLyB3aGljaCBtZWFucyB0aGUgcGFnZSBtdXN0IGJlIGFuIGludGVybmFsL2VtYmVkZGVkIHBhZ2UsCgkJCQkJLy8gc28gZGVmYXVsdCB0byB1c2luZyB0aGUgYWN0dWFsIGRvY3VtZW50IHVybCBhcyBhIGJyb3dzZXIKCQkJCQkvLyB3b3VsZC4KCQkJCQl1cmwgPSBkb2N1bWVudFVybC5ocmVmTm9TZWFyY2g7CgkJCQl9CgkJCX0KCgkJCXVybCA9IHBhdGgubWFrZVVybEFic29sdXRlKCAgdXJsLCBnZXRDbG9zZXN0QmFzZVVybCgkdGhpcykgKTsKCgkJCWlmKCggcGF0aC5pc0V4dGVybmFsKCB1cmwgKSAmJiAhcGF0aC5pc1Blcm1pdHRlZENyb3NzRG9tYWluUmVxdWVzdChkb2N1bWVudFVybCwgdXJsKSkgfHwgdGFyZ2V0ICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlKAoJCQkJdXJsLAoJCQkJewoJCQkJCXR5cGU6CQl0eXBlICYmIHR5cGUubGVuZ3RoICYmIHR5cGUudG9Mb3dlckNhc2UoKSB8fCAiZ2V0IiwKCQkJCQlkYXRhOgkJJHRoaXMuc2VyaWFsaXplKCksCgkJCQkJdHJhbnNpdGlvbjoJJHRoaXMuanFtRGF0YSggInRyYW5zaXRpb24iICksCgkJCQkJZGlyZWN0aW9uOgkkdGhpcy5qcW1EYXRhKCAiZGlyZWN0aW9uIiApLAoJCQkJCXJlbG9hZFBhZ2U6CXRydWUKCQkJCX0KCQkJKTsKCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQl9KTsKCgkJLy9hZGQgYWN0aXZlIHN0YXRlIG9uIHZjbGljawoJCSQoIGRvY3VtZW50ICkuYmluZCggInZjbGljayIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJLy8gaWYgdGhpcyBpc24ndCBhIGxlZnQgY2xpY2sgd2UgZG9uJ3QgY2FyZS4gSXRzIGltcG9ydGFudCB0byBub3RlCgkJCS8vIHRoYXQgd2hlbiB0aGUgdmlydHVhbCBldmVudCBpcyBnZW5lcmF0ZWQgaXQgd2lsbCBjcmVhdGUKCQkJaWYgKCBldmVudC53aGljaCA+IDEgfHwgISQubW9iaWxlLmxpbmtCaW5kaW5nRW5hYmxlZCApewoJCQkJcmV0dXJuOwoJCQl9CgoJCQl2YXIgbGluayA9IGZpbmRDbG9zZXN0TGluayggZXZlbnQudGFyZ2V0ICk7CgkJCWlmICggbGluayApIHsKCQkJCWlmICggcGF0aC5wYXJzZVVybCggbGluay5nZXRBdHRyaWJ1dGUoICJocmVmIiApIHx8ICIjIiApLmhhc2ggIT09ICIjIiApIHsKCQkJCQlyZW1vdmVBY3RpdmVMaW5rQ2xhc3MoIHRydWUgKTsKCQkJCQkkYWN0aXZlQ2xpY2tlZExpbmsgPSAkKCBsaW5rICkuY2xvc2VzdCggIi51aS1idG4iICkubm90KCAiLnVpLWRpc2FibGVkIiApOwoJCQkJCSRhY3RpdmVDbGlja2VkTGluay5hZGRDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJCQkkKCAiLiIgKyAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKyAiIC51aS1idG4iICkubm90KCBsaW5rICkuYmx1cigpOwoJCQkJfQoJCQl9CgkJfSk7CgoJCS8vIGNsaWNrIHJvdXRpbmcgLSBkaXJlY3QgdG8gSFRUUCBvciBBamF4LCBhY2NvcmRpbmdseQoJCSQoIGRvY3VtZW50ICkuYmluZCggImNsaWNrIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQlpZiggISQubW9iaWxlLmxpbmtCaW5kaW5nRW5hYmxlZCApewoJCQkJcmV0dXJuOwoJCQl9CgoJCQl2YXIgbGluayA9IGZpbmRDbG9zZXN0TGluayggZXZlbnQudGFyZ2V0ICk7CgoJCQkvLyBJZiB0aGVyZSBpcyBubyBsaW5rIGFzc29jaWF0ZWQgd2l0aCB0aGUgY2xpY2sgb3IgaXRzIG5vdCBhIGxlZnQKCQkJLy8gY2xpY2sgd2Ugd2FudCB0byBpZ25vcmUgdGhlIGNsaWNrCgkJCWlmICggIWxpbmsgfHwgZXZlbnQud2hpY2ggPiAxKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCXZhciAkbGluayA9ICQoIGxpbmsgKSwKCQkJCS8vcmVtb3ZlIGFjdGl2ZSBsaW5rIGNsYXNzIGlmIGV4dGVybmFsICh0aGVuIGl0IHdvbid0IGJlIHRoZXJlIGlmIHlvdSBjb21lIGJhY2spCgkJCQlodHRwQ2xlYW51cCA9IGZ1bmN0aW9uKCl7CgkJCQkJd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgeyByZW1vdmVBY3RpdmVMaW5rQ2xhc3MoIHRydWUgKTsgfSwgMjAwICk7CgkJCQl9OwoKCQkJLy9pZiB0aGVyZSdzIGEgZGF0YS1yZWw9YmFjayBhdHRyLCBnbyBiYWNrIGluIGhpc3RvcnkKCQkJaWYoICRsaW5rLmlzKCAiOmpxbURhdGEocmVsPSdiYWNrJykiICkgKSB7CgkJCQl3aW5kb3cuaGlzdG9yeS5iYWNrKCk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCgkJCXZhciBiYXNlVXJsID0gZ2V0Q2xvc2VzdEJhc2VVcmwoICRsaW5rICksCgoJCQkJLy9nZXQgaHJlZiwgaWYgZGVmaW5lZCwgb3RoZXJ3aXNlIGRlZmF1bHQgdG8gZW1wdHkgaGFzaAoJCQkJaHJlZiA9IHBhdGgubWFrZVVybEFic29sdXRlKCAkbGluay5hdHRyKCAiaHJlZiIgKSB8fCAiIyIsIGJhc2VVcmwgKTsKCgkJCS8vaWYgYWpheCBpcyBkaXNhYmxlZCwgZXhpdCBlYXJseQoJCQlpZiggISQubW9iaWxlLmFqYXhFbmFibGVkICYmICFwYXRoLmlzRW1iZWRkZWRQYWdlKCBocmVmICkgKXsKCQkJCWh0dHBDbGVhbnVwKCk7CgkJCQkvL3VzZSBkZWZhdWx0IGNsaWNrIGhhbmRsaW5nCgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIFhYWF9qYmxhczogSWRlYWxseSBsaW5rcyB0byBhcHBsaWNhdGlvbiBwYWdlcyBzaG91bGQgYmUgc3BlY2lmaWVkIGFzCgkJCS8vICAgICAgICAgICAgYW4gdXJsIHRvIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudCB3aXRoIGEgaGFzaCB0aGF0IGlzIGVpdGhlcgoJCQkvLyAgICAgICAgICAgIHRoZSBzaXRlIHJlbGF0aXZlIHBhdGggb3IgaWQgdG8gdGhlIHBhZ2UuIEJ1dCBzb21lIG9mIHRoZQoJCQkvLyAgICAgICAgICAgIGludGVybmFsIGNvZGUgdGhhdCBkeW5hbWljYWxseSBnZW5lcmF0ZXMgc3ViLXBhZ2VzIGZvciBuZXN0ZWQKCQkJLy8gICAgICAgICAgICBsaXN0cyBhbmQgc2VsZWN0IGRpYWxvZ3MsIGp1c3Qgd3JpdGUgYSBoYXNoIGluIHRoZSBsaW5rIHRoZXkKCQkJLy8gICAgICAgICAgICBjcmVhdGUuIFRoaXMgbWVhbnMgdGhlIGFjdHVhbCBVUkwgcGF0aCBpcyBiYXNlZCBvbiB3aGF0ZXZlcgoJCQkvLyAgICAgICAgICAgIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBiYXNlIHRhZyBpcyBhdCB0aGUgdGltZSB0aGlzIGNvZGUKCQkJLy8gICAgICAgICAgICBpcyBjYWxsZWQuIEZvciBub3cgd2UgYXJlIGp1c3QgYXNzdW1pbmcgdGhhdCBhbnkgdXJsIHdpdGggYQoJCQkvLyAgICAgICAgICAgIGhhc2ggaW4gaXQgaXMgYW4gYXBwbGljYXRpb24gcGFnZSByZWZlcmVuY2UuCgkJCWlmICggaHJlZi5zZWFyY2goICIjIiApICE9IC0xICkgewoJCQkJaHJlZiA9IGhyZWYucmVwbGFjZSggL1teI10qIy8sICIiICk7CgkJCQlpZiAoICFocmVmICkgewoJCQkJCS8vbGluayB3YXMgYW4gZW1wdHkgaGFzaCBtZWFudCBwdXJlbHkKCQkJCQkvL2ZvciBpbnRlcmFjdGlvbiwgc28gd2UgaWdub3JlIGl0LgoJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQkJcmV0dXJuOwoJCQkJfSBlbHNlIGlmICggcGF0aC5pc1BhdGgoIGhyZWYgKSApIHsKCQkJCQkvL3dlIGhhdmUgYXBhdGggc28gbWFrZSBpdCB0aGUgaHJlZiB3ZSB3YW50IHRvIGxvYWQuCgkJCQkJaHJlZiA9IHBhdGgubWFrZVVybEFic29sdXRlKCBocmVmLCBiYXNlVXJsICk7CgkJCQl9IGVsc2UgewoJCQkJCS8vd2UgaGF2ZSBhIHNpbXBsZSBpZCBzbyB1c2UgdGhlIGRvY3VtZW50VXJsIGFzIGl0cyBiYXNlLgoJCQkJCWhyZWYgPSBwYXRoLm1ha2VVcmxBYnNvbHV0ZSggIiMiICsgaHJlZiwgZG9jdW1lbnRVcmwuaHJlZk5vSGFzaCApOwoJCQkJfQoJCQl9CgoJCQkJLy8gU2hvdWxkIHdlIGhhbmRsZSB0aGlzIGxpbmssIG9yIGxldCB0aGUgYnJvd3NlciBkZWFsIHdpdGggaXQ/CgkJCXZhciB1c2VEZWZhdWx0VXJsSGFuZGxpbmcgPSAkbGluay5pcyggIltyZWw9J2V4dGVybmFsJ10iICkgfHwgJGxpbmsuaXMoICI6anFtRGF0YShhamF4PSdmYWxzZScpIiApIHx8ICRsaW5rLmlzKCAiW3RhcmdldF0iICksCgoJCQkJLy8gU29tZSBlbWJlZGRlZCBicm93c2VycywgbGlrZSB0aGUgd2ViIHZpZXcgaW4gUGhvbmUgR2FwLCBhbGxvdyBjcm9zcy1kb21haW4gWEhSCgkJCQkvLyByZXF1ZXN0cyBpZiB0aGUgZG9jdW1lbnQgZG9pbmcgdGhlIHJlcXVlc3Qgd2FzIGxvYWRlZCB2aWEgdGhlIGZpbGU6Ly8gcHJvdG9jb2wuCgkJCQkvLyBUaGlzIGlzIHVzdWFsbHkgdG8gYWxsb3cgdGhlIGFwcGxpY2F0aW9uIHRvICJwaG9uZSBob21lIiBhbmQgZmV0Y2ggYXBwIHNwZWNpZmljCgkJCQkvLyBkYXRhLiBXZSBub3JtYWxseSBsZXQgdGhlIGJyb3dzZXIgaGFuZGxlIGV4dGVybmFsL2Nyb3NzLWRvbWFpbiB1cmxzLCBidXQgaWYgdGhlCgkJCQkvLyBhbGxvd0Nyb3NzRG9tYWluUGFnZXMgb3B0aW9uIGlzIHRydWUsIHdlIHdpbGwgYWxsb3cgY3Jvc3MtZG9tYWluIGh0dHAvaHR0cHMKCQkJCS8vIHJlcXVlc3RzIHRvIGdvIHRocm91Z2ggb3VyIHBhZ2UgbG9hZGluZyBsb2dpYy4KCgkJCQkvL2NoZWNrIGZvciBwcm90b2NvbCBvciByZWwgYW5kIGl0cyBub3QgYW4gZW1iZWRkZWQgcGFnZQoJCQkJLy9UT0RPIG92ZXJsYXAgaW4gbG9naWMgZnJvbSBpc0V4dGVybmFsLCByZWw9ZXh0ZXJuYWwgY2hlY2sgc2hvdWxkIGJlCgkJCQkvLyAgICAgbW92ZWQgaW50byBtb3JlIGNvbXByZWhlbnNpdmUgaXNFeHRlcm5hbExpbmsKCQkJCWlzRXh0ZXJuYWwgPSB1c2VEZWZhdWx0VXJsSGFuZGxpbmcgfHwgKCBwYXRoLmlzRXh0ZXJuYWwoIGhyZWYgKSAmJiAhcGF0aC5pc1Blcm1pdHRlZENyb3NzRG9tYWluUmVxdWVzdChkb2N1bWVudFVybCwgaHJlZikgKTsKCgkJCWlmKCBpc0V4dGVybmFsICkgewoJCQkJaHR0cENsZWFudXAoKTsKCQkJCS8vdXNlIGRlZmF1bHQgY2xpY2sgaGFuZGxpbmcKCQkJCXJldHVybjsKCQkJfQoKCQkJLy91c2UgYWpheAoJCQl2YXIgdHJhbnNpdGlvbiA9ICRsaW5rLmpxbURhdGEoICJ0cmFuc2l0aW9uIiApLAoJCQkJZGlyZWN0aW9uID0gJGxpbmsuanFtRGF0YSggImRpcmVjdGlvbiIgKSwKCQkJCXJldmVyc2UgPSAoIGRpcmVjdGlvbiAmJiBkaXJlY3Rpb24gPT09ICJyZXZlcnNlIiApIHx8CgkJCQkJCQkvLyBkZXByZWNhdGVkIC0gcmVtb3ZlIGJ5IDEuMAoJCQkJCQkJJGxpbmsuanFtRGF0YSggImJhY2siICksCgoJCQkJLy90aGlzIG1heSBuZWVkIHRvIGJlIG1vcmUgc3BlY2lmaWMgYXMgd2UgdXNlIGRhdGEtcmVsIG1vcmUKCQkJCXJvbGUgPSAkbGluay5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAicmVsIiApIHx8IHVuZGVmaW5lZDsKCgkJCSQubW9iaWxlLmNoYW5nZVBhZ2UoIGhyZWYsIHsgdHJhbnNpdGlvbjogdHJhbnNpdGlvbiwgcmV2ZXJzZTogcmV2ZXJzZSwgcm9sZTogcm9sZSB9ICk7CgkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJfSk7CgoJCS8vcHJlZmV0Y2ggcGFnZXMgd2hlbiBhbmNob3JzIHdpdGggZGF0YS1wcmVmZXRjaCBhcmUgZW5jb3VudGVyZWQKCQkkKCBkb2N1bWVudCApLmRlbGVnYXRlKCAiLnVpLXBhZ2UiLCAicGFnZXNob3cucHJlZmV0Y2giLCBmdW5jdGlvbigpIHsKCQkJdmFyIHVybHMgPSBbXTsKCQkJJCggdGhpcyApLmZpbmQoICJhOmpxbURhdGEocHJlZmV0Y2gpIiApLmVhY2goZnVuY3Rpb24oKXsKCQkJCXZhciAkbGluayA9ICQodGhpcyksCgkJCQkJdXJsID0gJGxpbmsuYXR0ciggImhyZWYiICk7CgoJCQkJaWYgKCB1cmwgJiYgJC5pbkFycmF5KCB1cmwsIHVybHMgKSA9PT0gLTEgKSB7CgkJCQkJdXJscy5wdXNoKCB1cmwgKTsKCgkJCQkJJC5tb2JpbGUubG9hZFBhZ2UoIHVybCwge3JvbGU6ICRsaW5rLmF0dHIoImRhdGEtIiArICQubW9iaWxlLm5zICsgInJlbCIpfSApOwoJCQkJfQoJCQl9KTsKCQl9KTsKCgkJJC5tb2JpbGUuX2hhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiggaGFzaCApIHsKCQkJLy9maW5kIGZpcnN0IHBhZ2UgdmlhIGhhc2gKCQkJdmFyIHRvID0gcGF0aC5zdHJpcEhhc2goIGhhc2ggKSwKCQkJCS8vdHJhbnNpdGlvbiBpcyBmYWxzZSBpZiBpdCdzIHRoZSBmaXJzdCBwYWdlLCB1bmRlZmluZWQgb3RoZXJ3aXNlIChhbmQgbWF5IGJlIG92ZXJyaWRkZW4gYnkgZGVmYXVsdCkKCQkJCXRyYW5zaXRpb24gPSAkLm1vYmlsZS51cmxIaXN0b3J5LnN0YWNrLmxlbmd0aCA9PT0gMCA/ICJub25lIiA6IHVuZGVmaW5lZCwKCgkJCQkvLyBkZWZhdWx0IG9wdGlvbnMgZm9yIHRoZSBjaGFuZ1BhZ2UgY2FsbHMgbWFkZSBhZnRlciBleGFtaW5pbmcgdGhlIGN1cnJlbnQgc3RhdGUKCQkJCS8vIG9mIHRoZSBwYWdlIGFuZCB0aGUgaGFzaAoJCQkJY2hhbmdlUGFnZU9wdGlvbnMgPSB7CgkJCQkJdHJhbnNpdGlvbjogdHJhbnNpdGlvbiwKCQkJCQljaGFuZ2VIYXNoOiBmYWxzZSwKCQkJCQlmcm9tSGFzaENoYW5nZTogdHJ1ZQoJCQkJfTsKCgkJCS8vaWYgbGlzdGVuaW5nIGlzIGRpc2FibGVkIChlaXRoZXIgZ2xvYmFsbHkgb3IgdGVtcG9yYXJpbHkpLCBvciBpdCdzIGEgZGlhbG9nIGhhc2gKCQkJaWYoICEkLm1vYmlsZS5oYXNoTGlzdGVuaW5nRW5hYmxlZCB8fCB1cmxIaXN0b3J5Lmlnbm9yZU5leHRIYXNoQ2hhbmdlICkgewoJCQkJdXJsSGlzdG9yeS5pZ25vcmVOZXh0SGFzaENoYW5nZSA9IGZhbHNlOwoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBzcGVjaWFsIGNhc2UgZm9yIGRpYWxvZ3MKCQkJaWYoIHVybEhpc3Rvcnkuc3RhY2subGVuZ3RoID4gMSAmJiB0by5pbmRleE9mKCBkaWFsb2dIYXNoS2V5ICkgPiAtMSApIHsKCgkJCQkvLyBJZiBjdXJyZW50IGFjdGl2ZSBwYWdlIGlzIG5vdCBhIGRpYWxvZyBza2lwIHRoZSBkaWFsb2cgYW5kIGNvbnRpbnVlCgkJCQkvLyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24KCQkJCWlmKCEkLm1vYmlsZS5hY3RpdmVQYWdlLmlzKCAiLnVpLWRpYWxvZyIgKSkgewoJCQkJCS8vZGV0ZXJtaW5lIGlmIHdlJ3JlIGhlYWRpbmcgZm9yd2FyZCBvciBiYWNrd2FyZCBhbmQgY29udGludWUgYWNjb3JkaW5nbHkgcGFzdAoJCQkJCS8vdGhlIGN1cnJlbnQgZGlhbG9nCgkJCQkJdXJsSGlzdG9yeS5kaXJlY3RIYXNoQ2hhbmdlKHsKCQkJCQkJY3VycmVudFVybDogdG8sCgkJCQkJCWlzQmFjazogZnVuY3Rpb24oKSB7IHdpbmRvdy5oaXN0b3J5LmJhY2soKTsgfSwKCQkJCQkJaXNGb3J3YXJkOiBmdW5jdGlvbigpIHsgd2luZG93Lmhpc3RvcnkuZm9yd2FyZCgpOyB9CgkJCQkJfSk7CgoJCQkJCS8vIHByZXZlbnQgY2hhbmdlUGFnZSgpCgkJCQkJcmV0dXJuOwoJCQkJfSBlbHNlIHsKCQkJCQkvLyBpZiB0aGUgY3VycmVudCBhY3RpdmUgcGFnZSBpcyBhIGRpYWxvZyBhbmQgd2UncmUgbmF2aWdhdGluZwoJCQkJCS8vIHRvIGEgZGlhbG9nIHVzZSB0aGUgZGlhbG9nIG9iamVjdGVkIHNhdmVkIGluIHRoZSBzdGFjawoJCQkJCXVybEhpc3RvcnkuZGlyZWN0SGFzaENoYW5nZSh7CgkJCQkJCWN1cnJlbnRVcmw6IHRvLAoKCQkJCQkJLy8gcmVnYXJkbGVzcyBvZiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBoaXN0b3J5IGNoYW5nZQoJCQkJCQkvLyBkbyB0aGUgZm9sbG93aW5nCgkJCQkJCWVpdGhlcjogZnVuY3Rpb24oIGlzQmFjayApIHsKCQkJCQkJCXZhciBhY3RpdmUgPSAkLm1vYmlsZS51cmxIaXN0b3J5LmdldEFjdGl2ZSgpOwoKCQkJCQkJCXRvID0gYWN0aXZlLnBhZ2VVcmw7CgoJCQkJCQkJLy8gbWFrZSBzdXJlIHRvIHNldCB0aGUgcm9sZSwgdHJhbnNpdGlvbiBhbmQgcmV2ZXJzYWwKCQkJCQkJCS8vIGFzIG1vc3Qgb2YgdGhpcyBpcyBsb3N0IGJ5IHRoZSBkb21DYWNoZSBjbGVhbmluZwoJCQkJCQkJJC5leHRlbmQoIGNoYW5nZVBhZ2VPcHRpb25zLCB7CgkJCQkJCQkJcm9sZTogYWN0aXZlLnJvbGUsCgkJCQkJCQkJdHJhbnNpdGlvbjoJIGFjdGl2ZS50cmFuc2l0aW9uLAoJCQkJCQkJCXJldmVyc2U6IGlzQmFjawoJCQkJCQkJfSk7CgkJCQkJCX0KCQkJCQl9KTsKCQkJCX0KCQkJfQoKCQkJLy9pZiB0byBpcyBkZWZpbmVkLCBsb2FkIGl0CgkJCWlmICggdG8gKSB7CgkJCQkvLyBBdCB0aGlzIHBvaW50LCAndG8nIGNhbiBiZSBvbmUgb2YgMyB0aGluZ3MsIGEgY2FjaGVkIHBhZ2UgZWxlbWVudCBmcm9tCgkJCQkvLyBhIGhpc3Rvcnkgc3RhY2sgZW50cnksIGFuIGlkLCBvciBzaXRlLXJlbGF0aXZlL2Fic29sdXRlIFVSTC4gSWYgJ3RvJyBpcwoJCQkJLy8gYW4gaWQsIHdlIG5lZWQgdG8gcmVzb2x2ZSBpdCBhZ2FpbnN0IHRoZSBkb2N1bWVudEJhc2UsIG5vdCB0aGUgbG9jYXRpb24uaHJlZiwKCQkJCS8vIHNpbmNlIHRoZSBoYXNoY2hhbmdlIGNvdWxkJ3ZlIGJlZW4gdGhlIHJlc3VsdCBvZiBhIGZvcndhcmQvYmFja3dhcmQgbmF2aWdhdGlvbgoJCQkJLy8gdGhhdCBjcm9zc2VzIGZyb20gYW4gZXh0ZXJuYWwgcGFnZS9kaWFsb2cgdG8gYW4gaW50ZXJuYWwgcGFnZS9kaWFsb2cuCgkJCQl0byA9ICggdHlwZW9mIHRvID09PSAic3RyaW5nIiAmJiAhcGF0aC5pc1BhdGgoIHRvICkgKSA/ICggcGF0aC5tYWtlVXJsQWJzb2x1dGUoICcjJyArIHRvLCBkb2N1bWVudEJhc2UgKSApIDogdG87CgkJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlKCB0bywgY2hhbmdlUGFnZU9wdGlvbnMgKTsKCQkJfQllbHNlIHsKCQkJCS8vdGhlcmUncyBubyBoYXNoLCBnbyB0byB0aGUgZmlyc3QgcGFnZSBpbiB0aGUgZG9tCgkJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlKCAkLm1vYmlsZS5maXJzdFBhZ2UsIGNoYW5nZVBhZ2VPcHRpb25zICk7CgkJCX0KCQl9OwoKCQkvL2hhc2hjaGFuZ2UgZXZlbnQgaGFuZGxlcgoJCSR3aW5kb3cuYmluZCggImhhc2hjaGFuZ2UiLCBmdW5jdGlvbiggZSwgdHJpZ2dlcmVkICkgewoJCQkkLm1vYmlsZS5faGFuZGxlSGFzaENoYW5nZSggbG9jYXRpb24uaGFzaCApOwoJCX0pOwoKCQkvL3NldCBwYWdlIG1pbi1oZWlnaHRzIHRvIGJlIGRldmljZSBzcGVjaWZpYwoJCSQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VzaG93IiwgcmVzZXRBY3RpdmVQYWdlSGVpZ2h0ICk7CgkJJCggd2luZG93ICkuYmluZCggInRocm90dGxlZHJlc2l6ZSIsIHJlc2V0QWN0aXZlUGFnZUhlaWdodCApOwoKCX07Ly9fcmVnaXN0ZXJJbnRlcm5hbEV2ZW50cyBjYWxsYmFjawoKfSkoIGpRdWVyeSApOwovKgoqIGhpc3RvcnkucHVzaFN0YXRlIHN1cHBvcnQsIGxheWVyZWQgb24gdG9wIG9mIGhhc2hjaGFuZ2UKKi8KCiggZnVuY3Rpb24oICQsIHdpbmRvdyApIHsKCS8vIEZvciBub3csIGxldCdzIE1vbmtleXBhdGNoIHRoaXMgb250byB0aGUgZW5kIG9mICQubW9iaWxlLl9yZWdpc3RlckludGVybmFsRXZlbnRzCgkvLyBTY29wZSBzZWxmIHRvIHB1c2hTdGF0ZUhhbmRsZXIgc28gd2UgY2FuIHJlZmVyZW5jZSBpdCBzYW5lbHkgd2l0aGluIHRoZQoJLy8gbWV0aG9kcyBoYW5kZWQgb2ZmIGFzIGV2ZW50IGhhbmRsZXJzCgl2YXIJcHVzaFN0YXRlSGFuZGxlciA9IHt9LAoJCXNlbGYgPSBwdXNoU3RhdGVIYW5kbGVyLAoJCSR3aW4gPSAkKCB3aW5kb3cgKSwKCQl1cmwgPSAkLm1vYmlsZS5wYXRoLnBhcnNlVXJsKCBsb2NhdGlvbi5ocmVmICk7CgoJJC5leHRlbmQoIHB1c2hTdGF0ZUhhbmRsZXIsIHsKCQkvLyBUT0RPIG1vdmUgdG8gYSBwYXRoIGhlbHBlciwgdGhpcyBpcyByYXRoZXIgY29tbW9uIGZ1bmN0aW9uYWxpdHkKCQlpbml0aWFsRmlsZVBhdGg6IChmdW5jdGlvbigpIHsKCQkJcmV0dXJuIHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7CgkJfSkoKSwKCgkJaW5pdGlhbEhyZWY6IHVybC5ocmVmTm9IYXNoLAoKCQkvLyBGbGFnIGZvciB0cmFja2luZyBpZiBhIEhhc2hjaGFuZ2UgbmF0dXJhbGx5IG9jY3VycyBhZnRlciBlYWNoIHBvcHN0YXRlICsgcmVwbGFjZQoJCWhhc2hjaGFuZ2VGaXJlZDogZmFsc2UsCgoJCXN0YXRlOiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuIHsKCQkJCWhhc2g6IGxvY2F0aW9uLmhhc2ggfHwgIiMiICsgc2VsZi5pbml0aWFsRmlsZVBhdGgsCgkJCQl0aXRsZTogZG9jdW1lbnQudGl0bGUsCgoJCQkJLy8gcGVyc2lzdCBhY3Jvc3MgcmVmcmVzaAoJCQkJaW5pdGlhbEhyZWY6IHNlbGYuaW5pdGlhbEhyZWYKCQkJfTsKCQl9LAoKCQlyZXNldFVJS2V5czogZnVuY3Rpb24oIHVybCApIHsKCQkJdmFyIGRpYWxvZyA9ICQubW9iaWxlLmRpYWxvZ0hhc2hLZXksCgkJCQlzdWJrZXkgPSAiJiIgKyAkLm1vYmlsZS5zdWJQYWdlVXJsS2V5LAoJCQkJZGlhbG9nSW5kZXggPSB1cmwuaW5kZXhPZiggZGlhbG9nICk7CgoJCQlpZiggZGlhbG9nSW5kZXggPiAtMSApIHsKCQkJCXVybCA9IHVybC5zbGljZSggMCwgZGlhbG9nSW5kZXggKSArICIjIiArIHVybC5zbGljZSggZGlhbG9nSW5kZXggKTsKCQkJfSBlbHNlIGlmKCB1cmwuaW5kZXhPZiggc3Via2V5ICkgPiAtMSApIHsKCQkJCXVybCA9IHVybC5zcGxpdCggc3Via2V5ICkuam9pbiggIiMiICsgc3Via2V5ICk7CgkJCX0KCgkJCXJldHVybiB1cmw7CgkJfSwKCgkJLy8gVE9ETyBzb3J0IG91dCBhIHNpbmdsZSBiYXJyaWVyIHRvIGhhc2hjaGFuZ2UgZnVuY3Rpb25hbGl0eQoJCW5leHRIYXNoQ2hhbmdlUHJldmVudGVkOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCSQubW9iaWxlLnVybEhpc3RvcnkuaWdub3JlTmV4dEhhc2hDaGFuZ2UgPSB2YWx1ZTsKCQkJc2VsZi5vbkhhc2hDaGFuZ2VEaXNhYmxlZCA9IHZhbHVlOwoJCX0sCgoJCS8vIG9uIGhhc2ggY2hhbmdlIHdlIHdhbnQgdG8gY2xlYW4gdXAgdGhlIHVybAoJCS8vIE5PVEUgdGhpcyB0YWtlcyBwbGFjZSAqYWZ0ZXIqIHRoZSB2YW5pbGxhIG5hdmlnYXRpb24gaGFzaCBjaGFuZ2UKCQkvLyBoYW5kbGluZyBoYXMgdGFrZW4gcGxhY2UgYW5kIHNldCB0aGUgc3RhdGUgb2YgdGhlIERPTQoJCW9uSGFzaENoYW5nZTogZnVuY3Rpb24oIGUgKSB7CgkJCS8vIGRpc2FibGUgdGhpcyBoYXNoIGNoYW5nZQoJCQlpZiggc2VsZi5vbkhhc2hDaGFuZ2VEaXNhYmxlZCApewoJCQkJcmV0dXJuOwoJCQl9CgkJCQoJCQl2YXIgaHJlZiwgc3RhdGUsCgkJCQloYXNoID0gbG9jYXRpb24uaGFzaCwKCQkJCWlzUGF0aCA9ICQubW9iaWxlLnBhdGguaXNQYXRoKCBoYXNoICksCgkJCQlyZXNvbHV0aW9uVXJsID0gaXNQYXRoID8gbG9jYXRpb24uaHJlZiA6ICQubW9iaWxlLmdldERvY3VtZW50VXJsKCk7CgkJCWhhc2ggPSBpc1BhdGggPyBoYXNoLnJlcGxhY2UoICIjIiwgIiIgKSA6IGhhc2g7CgoJCQkvLyBwcm9wdWxhdGUgdGhlIGhhc2ggd2hlbiBpdHMgbm90IGF2YWlsYWJsZQoJCQlzdGF0ZSA9IHNlbGYuc3RhdGUoKTsKCgkJCS8vIG1ha2UgdGhlIGhhc2ggYWJvbHV0ZSB3aXRoIHRoZSBjdXJyZW50IGhyZWYKCQkJaHJlZiA9ICQubW9iaWxlLnBhdGgubWFrZVVybEFic29sdXRlKCBoYXNoLCByZXNvbHV0aW9uVXJsICk7CgoJCQlpZiAoIGlzUGF0aCApIHsKCQkJCWhyZWYgPSBzZWxmLnJlc2V0VUlLZXlzKCBocmVmICk7CgkJCX0KCgkJCS8vIHJlcGxhY2UgdGhlIGN1cnJlbnQgdXJsIHdpdGggdGhlIG5ldyBocmVmIGFuZCBzdG9yZSB0aGUgc3RhdGUKCQkJLy8gTm90ZSB0aGF0IGluIHNvbWUgY2FzZXMgd2UgbWlnaHQgYmUgcmVwbGFjaW5nIGFuIHVybCB3aXRoIHRoZQoJCQkvLyBzYW1lIHVybC4gV2UgZG8gdGhpcyBhbnl3YXlzIGJlY2F1c2Ugd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdAoJCQkvLyBhbGwgb2Ygb3VyIGhpc3RvcnkgZW50cmllcyBoYXZlIGEgc3RhdGUgb2JqZWN0IGFzc29jaWF0ZWQgd2l0aAoJCQkvLyB0aGVtLiBUaGlzIGFsbG93cyB1cyB0byB3b3JrIGFyb3VuZCB0aGUgY2FzZSB3aGVyZSB3aW5kb3cuaGlzdG9yeS5iYWNrKCkKCQkJLy8gaXMgY2FsbGVkIHRvIHRyYW5zaXRpb24gZnJvbSBhbiBleHRlcm5hbCBwYWdlIHRvIGFuIGVtYmVkZGVkIHBhZ2UuCgkJCS8vIEluIHRoYXQgcGFydGljdWxhciBjYXNlLCBhIGhhc2hjaGFuZ2UgZXZlbnQgaXMgKk5PVCogZ2VuZXJhdGVkIGJ5IHRoZSBicm93c2VyLgoJCQkvLyBFbnN1cmluZyBlYWNoIGhpc3RvcnkgZW50cnkgaGFzIGEgc3RhdGUgb2JqZWN0IG1lYW5zIHRoYXQgb25Qb3BTdGF0ZSgpCgkJCS8vIHdpbGwgYWx3YXlzIHRyaWdnZXIgb3VyIGhhc2hjaGFuZ2UgY2FsbGJhY2sgZXZlbiB3aGVuIGEgaGFzaGNoYW5nZSBldmVudAoJCQkvLyBpcyBub3QgZmlyZWQuCgkJCWhpc3RvcnkucmVwbGFjZVN0YXRlKCBzdGF0ZSwgZG9jdW1lbnQudGl0bGUsIGhyZWYgKTsKCQl9LAoKCQkvLyBvbiBwb3BzdGF0ZSAoaWUgYmFjayBvciBmb3J3YXJkKSB3ZSBuZWVkIHRvIHJlcGxhY2UgdGhlIGhhc2ggdGhhdCB3YXMgdGhlcmUgcHJldmlvdXNseQoJCS8vIGNsZWFuZWQgdXAgYnkgdGhlIGFkZGl0aW9uYWwgaGFzaCBoYW5kbGluZwoJCW9uUG9wU3RhdGU6IGZ1bmN0aW9uKCBlICkgewoJCQl2YXIgcG9wcGVkU3RhdGUgPSBlLm9yaWdpbmFsRXZlbnQuc3RhdGUsIGhvbGRuZXh0aGFzaGNoYW5nZSA9IGZhbHNlOwoKCQkJLy8gaWYgdGhlcmUncyBubyBzdGF0ZSBpdHMgbm90IGEgcG9wc3RhdGUgd2UgY2FyZSBhYm91dCwgaWUgY2hyb21lJ3MgaW5pdGlhbCBwb3BzdGF0ZQoJCQkvLyBvciBmb3J3YXJkIHBvcHN0YXRlCgkJCWlmKCBwb3BwZWRTdGF0ZSApIHsKCQkJCS8vIGRpc2FibGUgYW55IGhhc2hjaGFuZ2UgdHJpZ2dlcmVkIGJ5IHRoZSBicm93c2VyCgkJCQlzZWxmLm5leHRIYXNoQ2hhbmdlUHJldmVudGVkKCB0cnVlICk7CgoJCQkJLy8gZGVmZXIgb3VyIG1hbnVhbCBoYXNoY2hhbmdlIHVudGlsIGFmdGVyIHRoZSBicm93c2VyIGZpcmVkCgkJCQkvLyB2ZXJzaW9uIGhhcyBjb21lIGFuZCBnb25lCgkJCQlzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoJCQkJCS8vIG1ha2Ugc3VyZSB0aGF0IHRoZSBtYW51YWwgaGFzaCBoYW5kbGluZyB0YWtlcyBwbGFjZQoJCQkJCXNlbGYubmV4dEhhc2hDaGFuZ2VQcmV2ZW50ZWQoIGZhbHNlICk7CgoJCQkJCS8vIGNoYW5nZSB0aGUgcGFnZSBiYXNlZCBvbiB0aGUgaGFzaAoJCQkJCSQubW9iaWxlLl9oYW5kbGVIYXNoQ2hhbmdlKCBwb3BwZWRTdGF0ZS5oYXNoICk7CgkJCQl9LCAxMDApOwoJCQl9CgkJfSwKCgkJaW5pdDogZnVuY3Rpb24oKSB7CgkJCSR3aW4uYmluZCggImhhc2hjaGFuZ2UiLCBzZWxmLm9uSGFzaENoYW5nZSApOwoKCQkJLy8gSGFuZGxlIHBvcHN0YXRlIGV2ZW50cyB0aGUgb2NjdXIgdGhyb3VnaCBoaXN0b3J5IGNoYW5nZXMKCQkJJHdpbi5iaW5kKCAicG9wc3RhdGUiLCBzZWxmLm9uUG9wU3RhdGUgKTsKCgkJCS8vIGlmIHRoZXJlJ3Mgbm8gaGFzaCwgd2UgbmVlZCB0byByZXBsYWNlc3RhdGUgZm9yIHJldHVybmluZyB0byBob21lCgkJCWlmICggbG9jYXRpb24uaGFzaCA9PT0gIiIgKSB7CgkJCQloaXN0b3J5LnJlcGxhY2VTdGF0ZSggc2VsZi5zdGF0ZSgpLCBkb2N1bWVudC50aXRsZSwgbG9jYXRpb24uaHJlZiApOwoJCQl9CgkJfQoJfSk7CgoJJCggZnVuY3Rpb24oKSB7CgkJaWYoICQubW9iaWxlLnB1c2hTdGF0ZUVuYWJsZWQgJiYgJC5zdXBwb3J0LnB1c2hTdGF0ZSApewoJCQlwdXNoU3RhdGVIYW5kbGVyLmluaXQoKTsKCQl9Cgl9KTsKfSkoIGpRdWVyeSwgdGhpcyApOwovKgoqICJ0cmFuc2l0aW9ucyIgcGx1Z2luIC0gUGFnZSBjaGFuZ2UgdHJhbmlzdGlvbnMKKi8KCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgpmdW5jdGlvbiBjc3MzVHJhbnNpdGlvbkhhbmRsZXIoIG5hbWUsIHJldmVyc2UsICR0bywgJGZyb20gKSB7CgoJdmFyIGRlZmVycmVkID0gbmV3ICQuRGVmZXJyZWQoKSwKCQlyZXZlcnNlQ2xhc3MgPSByZXZlcnNlID8gIiByZXZlcnNlIiA6ICIiLAoJCXZpZXdwb3J0Q2xhc3MgPSAidWktbW9iaWxlLXZpZXdwb3J0LXRyYW5zaXRpb25pbmcgdmlld3BvcnQtIiArIG5hbWUsCgkJZG9uZUZ1bmMgPSBmdW5jdGlvbigpIHsKCgkJCSR0by5hZGQoICRmcm9tICkucmVtb3ZlQ2xhc3MoICJvdXQgaW4gcmV2ZXJzZSAiICsgbmFtZSApOwoKCQkJaWYgKCAkZnJvbSAmJiAkZnJvbVsgMCBdICE9PSAkdG9bIDAgXSApIHsKCQkJCSRmcm9tLnJlbW92ZUNsYXNzKCAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKTsKCQkJfQoKCQkJJHRvLnBhcmVudCgpLnJlbW92ZUNsYXNzKCB2aWV3cG9ydENsYXNzICk7CgoJCQlkZWZlcnJlZC5yZXNvbHZlKCBuYW1lLCByZXZlcnNlLCAkdG8sICRmcm9tICk7CgkJfTsKCgkkdG8uYW5pbWF0aW9uQ29tcGxldGUoIGRvbmVGdW5jICk7CgoJJHRvLnBhcmVudCgpLmFkZENsYXNzKCB2aWV3cG9ydENsYXNzICk7CgoJaWYgKCAkZnJvbSApIHsKCQkkZnJvbS5hZGRDbGFzcyggbmFtZSArICIgb3V0IiArIHJldmVyc2VDbGFzcyApOwoJfQoJJHRvLmFkZENsYXNzKCAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKyAiICIgKyBuYW1lICsgIiBpbiIgKyByZXZlcnNlQ2xhc3MgKTsKCglyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpOwp9CgovLyBNYWtlIG91ciB0cmFuc2l0aW9uIGhhbmRsZXIgcHVibGljLgokLm1vYmlsZS5jc3MzVHJhbnNpdGlvbkhhbmRsZXIgPSBjc3MzVHJhbnNpdGlvbkhhbmRsZXI7CgovLyBJZiB0aGUgZGVmYXVsdCB0cmFuc2l0aW9uIGhhbmRsZXIgaXMgdGhlICdub25lJyBoYW5kbGVyLCByZXBsYWNlIGl0IHdpdGggb3VyIGhhbmRsZXIuCmlmICggJC5tb2JpbGUuZGVmYXVsdFRyYW5zaXRpb25IYW5kbGVyID09PSAkLm1vYmlsZS5ub25lVHJhbnNpdGlvbkhhbmRsZXIgKSB7CgkkLm1vYmlsZS5kZWZhdWx0VHJhbnNpdGlvbkhhbmRsZXIgPSBjc3MzVHJhbnNpdGlvbkhhbmRsZXI7Cn0KCn0pKCBqUXVlcnksIHRoaXMgKTsKLyoKKiAiZGVncmFkZUlucHV0cyIgcGx1Z2luIC0gZGVncmFkZXMgaW5wdXRzIHRvIGFub3RoZXIgdHlwZSBhZnRlciBjdXN0b20gZW5oYW5jZW1lbnRzIGFyZSBtYWRlLgoqLwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLm1vYmlsZS5wYWdlLnByb3RvdHlwZS5vcHRpb25zLmRlZ3JhZGVJbnB1dHMgPSB7Cgljb2xvcjogZmFsc2UsCglkYXRlOiBmYWxzZSwKCWRhdGV0aW1lOiBmYWxzZSwKCSJkYXRldGltZS1sb2NhbCI6IGZhbHNlLAoJZW1haWw6IGZhbHNlLAoJbW9udGg6IGZhbHNlLAoJbnVtYmVyOiBmYWxzZSwKCXJhbmdlOiAibnVtYmVyIiwKCXNlYXJjaDogInRleHQiLAoJdGVsOiBmYWxzZSwKCXRpbWU6IGZhbHNlLAoJdXJsOiBmYWxzZSwKCXdlZWs6IGZhbHNlCn07CgoKLy9hdXRvIHNlbGYtaW5pdCB3aWRnZXRzCiQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKXsKCgl2YXIgcGFnZSA9ICQubW9iaWxlLmNsb3Nlc3RQYWdlRGF0YSggJChlLnRhcmdldCkgKTsKCglpZiggIXBhZ2UgKSB7CgkJcmV0dXJuOwoJfQoKCW9wdGlvbnMgPSBwYWdlLm9wdGlvbnM7CgoJLy8gZGVncmFkZSBpbnB1dHMgdG8gYXZvaWQgcG9vcmx5IGltcGxlbWVudGVkIG5hdGl2ZSBmdW5jdGlvbmFsaXR5CgkkKCBlLnRhcmdldCApLmZpbmQoICJpbnB1dCIgKS5ub3QoIHBhZ2Uua2VlcE5hdGl2ZVNlbGVjdG9yKCkgKS5lYWNoKGZ1bmN0aW9uKCkgewoJCXZhciAkdGhpcyA9ICQoIHRoaXMgKSwKCQkJdHlwZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCAidHlwZSIgKSwKCQkJb3B0VHlwZSA9IG9wdGlvbnMuZGVncmFkZUlucHV0c1sgdHlwZSBdIHx8ICJ0ZXh0IjsKCgkJaWYgKCBvcHRpb25zLmRlZ3JhZGVJbnB1dHNbIHR5cGUgXSApIHsKCQkJdmFyIGh0bWwgPSAkKCAiPGRpdj4iICkuaHRtbCggJHRoaXMuY2xvbmUoKSApLmh0bWwoKSwKCQkJCS8vIEluIElFIGJyb3dzZXJzLCB0aGUgdHlwZSBzb21ldGltZXMgZG9lc24ndCBleGlzdCBpbiB0aGUgY2xvbmVkIG1hcmt1cCwgc28gd2UgcmVwbGFjZSB0aGUgY2xvc2luZyB0YWcgaW5zdGVhZAoJCQkJaGFzVHlwZSA9IGh0bWwuaW5kZXhPZiggIiB0eXBlPSIgKSA+IC0xLAoJCQkJZmluZHN0ciA9IGhhc1R5cGUgPyAvXHMrdHlwZT1bIiddP1x3K1snIl0/LyA6IC9cLz8+LywKCQkJCXJlcHN0ciA9ICIgdHlwZT1cIiIgKyBvcHRUeXBlICsgIlwiIGRhdGEtIiArICQubW9iaWxlLm5zICsgInR5cGU9XCIiICsgdHlwZSArICJcIiIgKyAoIGhhc1R5cGUgPyAiIiA6ICI+IiApOwoKCQkJJHRoaXMucmVwbGFjZVdpdGgoIGh0bWwucmVwbGFjZSggZmluZHN0ciwgcmVwc3RyICkgKTsKCQl9Cgl9KTsKCn0pOwoKfSkoIGpRdWVyeSApOy8qCiogImRpYWxvZyIgcGx1Z2luLgoqLwoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLmRpYWxvZyIsICQubW9iaWxlLndpZGdldCwgewoJb3B0aW9uczogewoJCWNsb3NlQnRuVGV4dCAJOiAiQ2xvc2UiLAoJCW92ZXJsYXlUaGVtZQk6ICJhIiwKCQlpbml0U2VsZWN0b3IJOiAiOmpxbURhdGEocm9sZT0nZGlhbG9nJykiCgl9LAoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdmFyIHNlbGYgPSB0aGlzLAoJCQkkZWwgPSB0aGlzLmVsZW1lbnQsCgkJCWhlYWRlckNsb3NlQnV0dG9uID0gJCggIjxhIGhyZWY9JyMnIGRhdGEtIiArICQubW9iaWxlLm5zICsgImljb249J2RlbGV0ZScgZGF0YS0iICsgJC5tb2JpbGUubnMgKyAiaWNvbnBvcz0nbm90ZXh0Jz4iKyB0aGlzLm9wdGlvbnMuY2xvc2VCdG5UZXh0ICsgIjwvYT4iICk7CgoJCSRlbC5hZGRDbGFzcyggInVpLW92ZXJsYXktIiArIHRoaXMub3B0aW9ucy5vdmVybGF5VGhlbWUgKTsKCgkJLy8gQ2xhc3MgdGhlIG1hcmt1cCBmb3IgZGlhbG9nIHN0eWxpbmcKCQkvLyBTZXQgYXJpYSByb2xlCgkJJGVsLmF0dHIoICJyb2xlIiwgImRpYWxvZyIgKQoJCQkuYWRkQ2xhc3MoICJ1aS1kaWFsb2ciICkKCQkJLmZpbmQoICI6anFtRGF0YShyb2xlPSdoZWFkZXInKSIgKQoJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItdG9wIHVpLW92ZXJsYXktc2hhZG93IiApCgkJCQkucHJlcGVuZCggaGVhZGVyQ2xvc2VCdXR0b24gKQoJCQkuZW5kKCkKCQkJLmZpbmQoICI6anFtRGF0YShyb2xlPSdjb250ZW50JyksOmpxbURhdGEocm9sZT0nZm9vdGVyJykiICkKCQkJCS5hZGRDbGFzcyggInVpLW92ZXJsYXktc2hhZG93IiApCgkJCQkubGFzdCgpCgkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItYm90dG9tIiApOwoKCQkvLyB0aGlzIG11c3QgYmUgYW4gYW5vbnltb3VzIGZ1bmN0aW9uIHNvIHRoYXQgc2VsZWN0IG1lbnUgZGlhbG9ncyBjYW4gcmVwbGFjZQoJCS8vIHRoZSBjbG9zZSBtZXRob2QuIFRoaXMgaXMgYSBjaGFuZ2UgZnJvbSBwcmV2aW91c2x5IGp1c3QgZGVmaW5pbmcgZGF0YS1yZWw9YmFjawoJCS8vIG9uIHRoZSBidXR0b24gYW5kIGxldHRpbmcgbmF2IGhhbmRsZSBpdAoJCS8vCgkJLy8gVXNlIGNsaWNrIHJhdGhlciB0aGFuIHZjbGljayBpbiBvcmRlciB0byBwcmV2ZW50IHRoZSBwb3NzaWJpbGl0eSBvZiB1bmludGVudGlvbmFsbHkKCQkvLyByZW9wZW5pbmcgdGhlIGRpYWxvZyBpZiB0aGUgZGlhbG9nIG9wZW5pbmcgaXRlbSB3YXMgZGlyZWN0bHkgdW5kZXIgdGhlIGNsb3NlIGJ1dHRvbi4KCQloZWFkZXJDbG9zZUJ1dHRvbi5iaW5kKCAiY2xpY2siLCBmdW5jdGlvbigpIHsKCQkJc2VsZi5jbG9zZSgpOwoJCX0pOwoKCQkvKiBiaW5kIGV2ZW50cwoJCQktIGNsaWNrcyBhbmQgc3VibWl0cyBzaG91bGQgdXNlIHRoZSBjbG9zaW5nIHRyYW5zaXRpb24gdGhhdCB0aGUgZGlhbG9nIG9wZW5lZCB3aXRoCgkJCSAgdW5sZXNzIGEgZGF0YS10cmFuc2l0aW9uIGlzIHNwZWNpZmllZCBvbiB0aGUgbGluay9mb3JtCgkJCS0gaWYgdGhlIGNsaWNrIHdhcyBvbiB0aGUgY2xvc2UgYnV0dG9uLCBvciB0aGUgbGluayBoYXMgYSBkYXRhLXJlbD0iYmFjayIgaXQnbGwgZ28gYmFjayBpbiBoaXN0b3J5IG5hdHVyYWxseQoJCSovCgkJJGVsLmJpbmQoICJ2Y2xpY2sgc3VibWl0IiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQl2YXIgJHRhcmdldCA9ICQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIGV2ZW50LnR5cGUgPT09ICJ2Y2xpY2siID8gImEiIDogImZvcm0iICksCgkJCQlhY3RpdmU7CgoJCQlpZiAoICR0YXJnZXQubGVuZ3RoICYmICEkdGFyZ2V0LmpxbURhdGEoICJ0cmFuc2l0aW9uIiApICkgewoKCQkJCWFjdGl2ZSA9ICQubW9iaWxlLnVybEhpc3RvcnkuZ2V0QWN0aXZlKCkgfHwge307CgoJCQkJJHRhcmdldC5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidHJhbnNpdGlvbiIsICggYWN0aXZlLnRyYW5zaXRpb24gfHwgJC5tb2JpbGUuZGVmYXVsdERpYWxvZ1RyYW5zaXRpb24gKSApCgkJCQkJLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJkaXJlY3Rpb24iLCAicmV2ZXJzZSIgKTsKCQkJfQoJCX0pCgkJLmJpbmQoICJwYWdlaGlkZSIsIGZ1bmN0aW9uKCkgewoJCQkkKCB0aGlzICkuZmluZCggIi4iICsgJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKS5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQl9KTsKCX0sCgoJLy8gQ2xvc2UgbWV0aG9kIGdvZXMgYmFjayBpbiBoaXN0b3J5CgljbG9zZTogZnVuY3Rpb24oKSB7CgkJd2luZG93Lmhpc3RvcnkuYmFjaygpOwoJfQp9KTsKCi8vYXV0byBzZWxmLWluaXQgd2lkZ2V0cwokKCBkb2N1bWVudCApLmRlbGVnYXRlKCAkLm1vYmlsZS5kaWFsb2cucHJvdG90eXBlLm9wdGlvbnMuaW5pdFNlbGVjdG9yLCAicGFnZWNyZWF0ZSIsIGZ1bmN0aW9uKCl7CgkkKCB0aGlzICkuZGlhbG9nKCk7Cn0pOwoKfSkoIGpRdWVyeSwgdGhpcyApOwovKgoqIFRoaXMgcGx1Z2luIGhhbmRsZXMgdGhlbWluZyBhbmQgbGF5b3V0IG9mIGhlYWRlcnMsIGZvb3RlcnMsIGFuZCBjb250ZW50IGFyZWFzCiovCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQubW9iaWxlLnBhZ2UucHJvdG90eXBlLm9wdGlvbnMuYmFja0J0blRleHQgID0gIkJhY2siOwokLm1vYmlsZS5wYWdlLnByb3RvdHlwZS5vcHRpb25zLmFkZEJhY2tCdG4gICA9IGZhbHNlOwokLm1vYmlsZS5wYWdlLnByb3RvdHlwZS5vcHRpb25zLmJhY2tCdG5UaGVtZSA9IG51bGw7CiQubW9iaWxlLnBhZ2UucHJvdG90eXBlLm9wdGlvbnMuaGVhZGVyVGhlbWUgID0gImEiOwokLm1vYmlsZS5wYWdlLnByb3RvdHlwZS5vcHRpb25zLmZvb3RlclRoZW1lICA9ICJhIjsKJC5tb2JpbGUucGFnZS5wcm90b3R5cGUub3B0aW9ucy5jb250ZW50VGhlbWUgPSBudWxsOwoKJCggZG9jdW1lbnQgKS5kZWxlZ2F0ZSggIjpqcW1EYXRhKHJvbGU9J3BhZ2UnKSwgOmpxbURhdGEocm9sZT0nZGlhbG9nJykiLCAicGFnZWNyZWF0ZSIsIGZ1bmN0aW9uKCBlICkgewoJCgl2YXIgJHBhZ2UgPSAkKCB0aGlzICksCgkJbyA9ICRwYWdlLmRhdGEoICJwYWdlIiApLm9wdGlvbnMsCgkJcGFnZVJvbGUgPSAkcGFnZS5qcW1EYXRhKCAicm9sZSIgKSwKCQlwYWdlVGhlbWUgPSBvLnRoZW1lOwoJCgkkKCAiOmpxbURhdGEocm9sZT0naGVhZGVyJyksIDpqcW1EYXRhKHJvbGU9J2Zvb3RlcicpLCA6anFtRGF0YShyb2xlPSdjb250ZW50JykiLCB0aGlzICkuZWFjaChmdW5jdGlvbigpIHsKCQl2YXIgJHRoaXMgPSAkKCB0aGlzICksCgkJCXJvbGUgPSAkdGhpcy5qcW1EYXRhKCAicm9sZSIgKSwKCQkJdGhlbWUgPSAkdGhpcy5qcW1EYXRhKCAidGhlbWUiICksCgkJCWNvbnRlbnRUaGVtZSA9IHRoZW1lIHx8IG8uY29udGVudFRoZW1lIHx8ICggcGFnZVJvbGUgPT09ICJkaWFsb2ciICYmIHBhZ2VUaGVtZSApLAoJCQkkaGVhZGVyYW5jaG9ycywKCQkJbGVmdGJ0biwKCQkJcmlnaHRidG4sCgkJCWJhY2tCdG47CgkJCQoJCSR0aGlzLmFkZENsYXNzKCAidWktIiArIHJvbGUgKTsJCgoJCS8vYXBwbHkgdGhlbWluZyBhbmQgbWFya3VwIG1vZGlmaWNhdGlvbnMgdG8gcGFnZSxoZWFkZXIsY29udGVudCxmb290ZXIKCQlpZiAoIHJvbGUgPT09ICJoZWFkZXIiIHx8IHJvbGUgPT09ICJmb290ZXIiICkgewoJCQkKCQkJdmFyIHRoaXNUaGVtZSA9IHRoZW1lIHx8ICggcm9sZSA9PT0gImhlYWRlciIgPyBvLmhlYWRlclRoZW1lIDogby5mb290ZXJUaGVtZSApIHx8IHBhZ2VUaGVtZTsKCgkJCSR0aGlzCgkJCQkvL2FkZCB0aGVtZSBjbGFzcwoJCQkJLmFkZENsYXNzKCAidWktYmFyLSIgKyB0aGlzVGhlbWUgKQoJCQkJLy8gQWRkIEFSSUEgcm9sZQoJCQkJLmF0dHIoICJyb2xlIiwgcm9sZSA9PT0gImhlYWRlciIgPyAiYmFubmVyIiA6ICJjb250ZW50aW5mbyIgKTsKCgkJCS8vIFJpZ2h0LGxlZnQgYnV0dG9ucwoJCQkkaGVhZGVyYW5jaG9ycwk9ICR0aGlzLmNoaWxkcmVuKCAiYSIgKTsKCQkJbGVmdGJ0bgk9ICRoZWFkZXJhbmNob3JzLmhhc0NsYXNzKCAidWktYnRuLWxlZnQiICk7CgkJCXJpZ2h0YnRuID0gJGhlYWRlcmFuY2hvcnMuaGFzQ2xhc3MoICJ1aS1idG4tcmlnaHQiICk7CgoJCQlsZWZ0YnRuID0gbGVmdGJ0biB8fCAkaGVhZGVyYW5jaG9ycy5lcSggMCApLm5vdCggIi51aS1idG4tcmlnaHQiICkuYWRkQ2xhc3MoICJ1aS1idG4tbGVmdCIgKS5sZW5ndGg7CgkJCQoJCQlyaWdodGJ0biA9IHJpZ2h0YnRuIHx8ICRoZWFkZXJhbmNob3JzLmVxKCAxICkuYWRkQ2xhc3MoICJ1aS1idG4tcmlnaHQiICkubGVuZ3RoOwoJCQkKCQkJLy8gQXV0by1hZGQgYmFjayBidG4gb24gcGFnZXMgYmV5b25kIGZpcnN0IHZpZXcKCQkJaWYgKCBvLmFkZEJhY2tCdG4gJiYgCgkJCQlyb2xlID09PSAiaGVhZGVyIiAmJgoJCQkJJCggIi51aS1wYWdlIiApLmxlbmd0aCA+IDEgJiYKCQkJCSR0aGlzLmpxbURhdGEoICJ1cmwiICkgIT09ICQubW9iaWxlLnBhdGguc3RyaXBIYXNoKCBsb2NhdGlvbi5oYXNoICkgJiYKCQkJCSFsZWZ0YnRuICkgewoKCQkJCWJhY2tCdG4gPSAkKCAiPGEgaHJlZj0nIycgY2xhc3M9J3VpLWJ0bi1sZWZ0JyBkYXRhLSIrICQubW9iaWxlLm5zICsicmVsPSdiYWNrJyBkYXRhLSIrICQubW9iaWxlLm5zICsiaWNvbj0nYXJyb3ctbCc+Iisgby5iYWNrQnRuVGV4dCArIjwvYT4iICkKCQkJCQkvLyBJZiB0aGVtZSBpcyBwcm92aWRlZCwgb3ZlcnJpZGUgZGVmYXVsdCBpbmhlcml0YW5jZQoJCQkJCS5hdHRyKCAiZGF0YS0iKyAkLm1vYmlsZS5ucyArInRoZW1lIiwgby5iYWNrQnRuVGhlbWUgfHwgdGhpc1RoZW1lICkKCQkJCQkucHJlcGVuZFRvKCAkdGhpcyApOwkJCQkKCQkJfQoKCQkJLy8gUGFnZSB0aXRsZQoJCQkkdGhpcy5jaGlsZHJlbiggImgxLCBoMiwgaDMsIGg0LCBoNSwgaDYiICkKCQkJCS5hZGRDbGFzcyggInVpLXRpdGxlIiApCgkJCQkvLyBSZWdhcmRsZXNzIG9mIGggZWxlbWVudCBudW1iZXIgaW4gc3JjLCBpdCBiZWNvbWVzIGgxIGZvciB0aGUgZW5oYW5jZWQgcGFnZQoJCQkJLmF0dHIoewoJCQkJCSJ0YWJpbmRleCI6ICIwIiwKCQkJCQkicm9sZSI6ICJoZWFkaW5nIiwKCQkJCQkiYXJpYS1sZXZlbCI6ICIxIgoJCQkJfSk7CgoJCX0gZWxzZSBpZiAoIHJvbGUgPT09ICJjb250ZW50IiApIHsKCQkJaWYgKCBjb250ZW50VGhlbWUgKSB7CgkJCSAgICAkdGhpcy5hZGRDbGFzcyggInVpLWJvZHktIiArICggY29udGVudFRoZW1lICkgKTsKCQkJfQoKCQkJLy8gQWRkIEFSSUEgcm9sZQoJCQkkdGhpcy5hdHRyKCAicm9sZSIsICJtYWluIiApOwoJCX0KCX0pOwp9KTsKCn0pKCBqUXVlcnkgKTsvKgoqICJjb2xsYXBzaWJsZSIgcGx1Z2luCiovCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLmNvbGxhcHNpYmxlIiwgJC5tb2JpbGUud2lkZ2V0LCB7CglvcHRpb25zOiB7CgkJZXhwYW5kQ3VlVGV4dDogIiBjbGljayB0byBleHBhbmQgY29udGVudHMiLAoJCWNvbGxhcHNlQ3VlVGV4dDogIiBjbGljayB0byBjb2xsYXBzZSBjb250ZW50cyIsCgkJY29sbGFwc2VkOiB0cnVlLAoJCWhlYWRpbmc6ICJoMSxoMixoMyxoNCxoNSxoNixsZWdlbmQiLAoJCXRoZW1lOiBudWxsLAoJCWNvbnRlbnRUaGVtZTogbnVsbCwKCQlpY29uVGhlbWU6ICJkIiwKCQlpbml0U2VsZWN0b3I6ICI6anFtRGF0YShyb2xlPSdjb2xsYXBzaWJsZScpIgoJfSwKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoKCQl2YXIgJGVsID0gdGhpcy5lbGVtZW50LAoJCQlvID0gdGhpcy5vcHRpb25zLAoJCQljb2xsYXBzaWJsZSA9ICRlbC5hZGRDbGFzcyggInVpLWNvbGxhcHNpYmxlIiApLAoJCQljb2xsYXBzaWJsZUhlYWRpbmcgPSAkZWwuY2hpbGRyZW4oIG8uaGVhZGluZyApLmZpcnN0KCksCgkJCWNvbGxhcHNpYmxlQ29udGVudCA9IGNvbGxhcHNpYmxlLndyYXBJbm5lciggIjxkaXYgY2xhc3M9J3VpLWNvbGxhcHNpYmxlLWNvbnRlbnQnPjwvZGl2PiIgKS5maW5kKCAiLnVpLWNvbGxhcHNpYmxlLWNvbnRlbnQiICksCgkJCWNvbGxhcHNpYmxlU2V0ID0gJGVsLmNsb3Nlc3QoICI6anFtRGF0YShyb2xlPSdjb2xsYXBzaWJsZS1zZXQnKSIgKS5hZGRDbGFzcyggInVpLWNvbGxhcHNpYmxlLXNldCIgKTsKCgkJLy8gUmVwbGFjZSBjb2xsYXBzaWJsZUhlYWRpbmcgaWYgaXQncyBhIGxlZ2VuZAoJCWlmICggY29sbGFwc2libGVIZWFkaW5nLmlzKCAibGVnZW5kIiApICkgewoJCQljb2xsYXBzaWJsZUhlYWRpbmcgPSAkKCAiPGRpdiByb2xlPSdoZWFkaW5nJz4iKyBjb2xsYXBzaWJsZUhlYWRpbmcuaHRtbCgpICsiPC9kaXY+IiApLmluc2VydEJlZm9yZSggY29sbGFwc2libGVIZWFkaW5nICk7CgkJCWNvbGxhcHNpYmxlSGVhZGluZy5uZXh0KCkucmVtb3ZlKCk7CgkJfQoKCQkvLyBJZiB3ZSBhcmUgaW4gYSBjb2xsYXBzaWJsZSBzZXQKCQlpZiAoIGNvbGxhcHNpYmxlU2V0Lmxlbmd0aCApIHsKCQkJLy8gSW5oZXJpdCB0aGUgdGhlbWUgZnJvbSBjb2xsYXBzaWJsZS1zZXQKCQkJaWYgKCAhby50aGVtZSApIHsKCQkJCW8udGhlbWUgPSBjb2xsYXBzaWJsZVNldC5qcW1EYXRhKCAidGhlbWUiICk7CgkJCX0KCQkJLy8gSW5oZXJpdCB0aGUgY29udGVudC10aGVtZSBmcm9tIGNvbGxhcHNpYmxlLXNldAoJCQlpZiAoICFvLmNvbnRlbnRUaGVtZSApIHsKCQkJCW8uY29udGVudFRoZW1lID0gY29sbGFwc2libGVTZXQuanFtRGF0YSggImNvbnRlbnQtdGhlbWUiICk7CgkJCX0KCQl9CgoJCWNvbGxhcHNpYmxlQ29udGVudC5hZGRDbGFzcyggKCBvLmNvbnRlbnRUaGVtZSApID8gKCAidWktYm9keS0iICsgby5jb250ZW50VGhlbWUgKSA6ICIiKTsKCgkJY29sbGFwc2libGVIZWFkaW5nCgkJCS8vZHJvcCBoZWFkaW5nIGluIGJlZm9yZSBjb250ZW50CgkJCS5pbnNlcnRCZWZvcmUoIGNvbGxhcHNpYmxlQ29udGVudCApCgkJCS8vbW9kaWZ5IG1hcmt1cCAmIGF0dHJpYnV0ZXMKCQkJLmFkZENsYXNzKCAidWktY29sbGFwc2libGUtaGVhZGluZyIgKQoJCQkuYXBwZW5kKCAiPHNwYW4gY2xhc3M9J3VpLWNvbGxhcHNpYmxlLWhlYWRpbmctc3RhdHVzJz48L3NwYW4+IiApCgkJCS53cmFwSW5uZXIoICI8YSBocmVmPScjJyBjbGFzcz0ndWktY29sbGFwc2libGUtaGVhZGluZy10b2dnbGUnPjwvYT4iICkKCQkJLmZpbmQoICJhIiApCgkJCQkuZmlyc3QoKQoJCQkJLmJ1dHRvbk1hcmt1cCh7CgkJCQkJc2hhZG93OiBmYWxzZSwKCQkJCQljb3JuZXJzOiBmYWxzZSwKCQkJCQlpY29uUG9zOiAibGVmdCIsCgkJCQkJaWNvbjogInBsdXMiLAoJCQkJCXRoZW1lOiBvLnRoZW1lCgkJCQl9KQoJCQkuYWRkKCAiLnVpLWJ0bi1pbm5lciIgKQoJCQkJLmFkZENsYXNzKCAidWktY29ybmVyLXRvcCB1aS1jb3JuZXItYm90dG9tIiApOwoKCQkvL2V2ZW50cwoJCWNvbGxhcHNpYmxlCgkJCS5iaW5kKCAiZXhwYW5kIGNvbGxhcHNlIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJaWYgKCAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgoJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgoJCQkJCXZhciAkdGhpcyA9ICQoIHRoaXMgKSwKCQkJCQkJaXNDb2xsYXBzZSA9ICggZXZlbnQudHlwZSA9PT0gImNvbGxhcHNlIiApLAoJCQkJCSAgICBjb250ZW50VGhlbWUgPSBvLmNvbnRlbnRUaGVtZTsKCgkJCQkJY29sbGFwc2libGVIZWFkaW5nCgkJCQkJCS50b2dnbGVDbGFzcyggInVpLWNvbGxhcHNpYmxlLWhlYWRpbmctY29sbGFwc2VkIiwgaXNDb2xsYXBzZSkKCQkJCQkJLmZpbmQoICIudWktY29sbGFwc2libGUtaGVhZGluZy1zdGF0dXMiICkKCQkJCQkJCS50ZXh0KCBpc0NvbGxhcHNlID8gby5leHBhbmRDdWVUZXh0IDogby5jb2xsYXBzZUN1ZVRleHQgKQoJCQkJCQkuZW5kKCkKCQkJCQkJLmZpbmQoICIudWktaWNvbiIgKQoJCQkJCQkJLnRvZ2dsZUNsYXNzKCAidWktaWNvbi1taW51cyIsICFpc0NvbGxhcHNlICkKCQkJCQkJCS50b2dnbGVDbGFzcyggInVpLWljb24tcGx1cyIsIGlzQ29sbGFwc2UgKTsKCgkJCQkJJHRoaXMudG9nZ2xlQ2xhc3MoICJ1aS1jb2xsYXBzaWJsZS1jb2xsYXBzZWQiLCBpc0NvbGxhcHNlICk7CgkJCQkJY29sbGFwc2libGVDb250ZW50LnRvZ2dsZUNsYXNzKCAidWktY29sbGFwc2libGUtY29udGVudC1jb2xsYXBzZWQiLCBpc0NvbGxhcHNlICkuYXR0ciggImFyaWEtaGlkZGVuIiwgaXNDb2xsYXBzZSApOwoKCQkJCQlpZiAoIGNvbnRlbnRUaGVtZSAmJiAoICFjb2xsYXBzaWJsZVNldC5sZW5ndGggfHwgY29sbGFwc2libGUuanFtRGF0YSggImNvbGxhcHNpYmxlLWxhc3QiICkgKSApIHsKCQkJCQkJY29sbGFwc2libGVIZWFkaW5nCgkJCQkJCQkuZmluZCggImEiICkuZmlyc3QoKS5hZGQoIGNvbGxhcHNpYmxlSGVhZGluZy5maW5kKCAiLnVpLWJ0bi1pbm5lciIgKSApCgkJCQkJCQkudG9nZ2xlQ2xhc3MoICJ1aS1jb3JuZXItYm90dG9tIiwgaXNDb2xsYXBzZSApOwoJCQkJCQljb2xsYXBzaWJsZUNvbnRlbnQudG9nZ2xlQ2xhc3MoICJ1aS1jb3JuZXItYm90dG9tIiwgIWlzQ29sbGFwc2UgKTsKCQkJCQl9CgkJCQkJY29sbGFwc2libGVDb250ZW50LnRyaWdnZXIoICJ1cGRhdGVsYXlvdXQiICk7CgkJCQl9CgkJCX0pCgkJCS50cmlnZ2VyKCBvLmNvbGxhcHNlZCA/ICJjb2xsYXBzZSIgOiAiZXhwYW5kIiApOwoKCQljb2xsYXBzaWJsZUhlYWRpbmcKCQkJLmJpbmQoICJjbGljayIsIGZ1bmN0aW9uKCBldmVudCApIHsKCgkJCQl2YXIgdHlwZSA9IGNvbGxhcHNpYmxlSGVhZGluZy5pcyggIi51aS1jb2xsYXBzaWJsZS1oZWFkaW5nLWNvbGxhcHNlZCIgKSA/CgkJCQkJCQkJCQkiZXhwYW5kIiA6ICJjb2xsYXBzZSI7CgoJCQkJY29sbGFwc2libGUudHJpZ2dlciggdHlwZSApOwoKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCX0pOwoJfQp9KTsKCi8vYXV0byBzZWxmLWluaXQgd2lkZ2V0cwokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIGNyZWF0ZSIsIGZ1bmN0aW9uKCBlICl7CgkkKCAkLm1vYmlsZS5jb2xsYXBzaWJsZS5wcm90b3R5cGUub3B0aW9ucy5pbml0U2VsZWN0b3IsIGUudGFyZ2V0ICkuY29sbGFwc2libGUoKTsKfSk7Cgp9KSggalF1ZXJ5ICk7Ci8qCiogImNvbGxhcHNpYmxlc2V0IiBwbHVnaW4KKi8KCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC53aWRnZXQoICJtb2JpbGUuY29sbGFwc2libGVzZXQiLCAkLm1vYmlsZS53aWRnZXQsIHsKCW9wdGlvbnM6IHsKCQlpbml0U2VsZWN0b3I6ICI6anFtRGF0YShyb2xlPSdjb2xsYXBzaWJsZS1zZXQnKSIKCX0sCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl2YXIgJGVsID0gdGhpcy5lbGVtZW50LmFkZENsYXNzKCAidWktY29sbGFwc2libGUtc2V0IiApLAoJCQlvID0gdGhpcy5vcHRpb25zLAoJCQljb2xsYXBzaWJsZXNJblNldCA9ICRlbC5jaGlsZHJlbiggIjpqcW1EYXRhKHJvbGU9J2NvbGxhcHNpYmxlJykiICk7CgoJCS8vIEluaGVyaXQgdGhlIHRoZW1lIGZyb20gY29sbGFwc2libGUtc2V0CgkJaWYgKCAhby50aGVtZSApIHsKCQkJby50aGVtZSA9ICRlbC5qcW1EYXRhKCAidGhlbWUiICk7CgkJfQoJCS8vIEluaGVyaXQgdGhlIGNvbnRlbnQtdGhlbWUgZnJvbSBjb2xsYXBzaWJsZS1zZXQKCQlpZiAoICFvLmNvbnRlbnRUaGVtZSApIHsKCQkJby5jb250ZW50VGhlbWUgPSAkZWwuanFtRGF0YSggImNvbnRlbnQtdGhlbWUiICk7CgkJfQoKCQkvLyBJbml0aWFsaXplIHRoZSBjb2xsYXBzaWJsZSBzZXQgaWYgaXQncyBub3QgYWxyZWFkeSBpbml0aWFsaXplZAoJCWlmICggISRlbC5qcW1EYXRhKCAiY29sbGFwc2libGVib3VuZCIgKSApIHsKCgkJCSRlbAoJCQkJLmpxbURhdGEoICJjb2xsYXBzaWJsZWJvdW5kIiwgdHJ1ZSApCgkJCQkuYmluZCggImV4cGFuZCBjb2xsYXBzZSIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQl2YXIgaXNDb2xsYXBzZSA9ICggZXZlbnQudHlwZSA9PT0gImNvbGxhcHNlIiApLAoJCQkJCQljb2xsYXBzaWJsZSA9ICQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoICIudWktY29sbGFwc2libGUiICksCgkJCQkJCXdpZGdldCA9IGNvbGxhcHNpYmxlLmRhdGEoICJjb2xsYXBzaWJsZSIgKSwKCQkJCQkgICAgY29udGVudFRoZW1lID0gd2lkZ2V0Lm9wdGlvbnMuY29udGVudFRoZW1lOwoJCQkJCWlmICggY29udGVudFRoZW1lICYmIGNvbGxhcHNpYmxlLmpxbURhdGEoICJjb2xsYXBzaWJsZS1sYXN0IiApICkgewoJCQkJCQljb2xsYXBzaWJsZS5maW5kKCB3aWRnZXQub3B0aW9ucy5oZWFkaW5nICkuZmlyc3QoKQoJCQkJCQkJLmZpbmQoICJhIiApLmZpcnN0KCkKCQkJCQkJCS5hZGQoICIudWktYnRuLWlubmVyIiApCgkJCQkJCQkudG9nZ2xlQ2xhc3MoICJ1aS1jb3JuZXItYm90dG9tIiwgaXNDb2xsYXBzZSApOwoJCQkJCQljb2xsYXBzaWJsZS5maW5kKCAiLnVpLWNvbGxhcHNpYmxlLWNvbnRlbnQiICkudG9nZ2xlQ2xhc3MoICJ1aS1jb3JuZXItYm90dG9tIiwgIWlzQ29sbGFwc2UgKTsKCQkJCQl9CgkJCQl9KQoJCQkJLmJpbmQoICJleHBhbmQiLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJJCggZXZlbnQudGFyZ2V0ICkKCQkJCQkJLmNsb3Nlc3QoICIudWktY29sbGFwc2libGUiICkKCQkJCQkJLnNpYmxpbmdzKCAiLnVpLWNvbGxhcHNpYmxlIiApCgkJCQkJCS50cmlnZ2VyKCAiY29sbGFwc2UiICk7CgoJCQkJfSk7CgoJCQkvLyBjbGVhbiB1cCBib3JkZXJzCgkJCWNvbGxhcHNpYmxlc0luU2V0LmVhY2goIGZ1bmN0aW9uKCkgewoJCQkJJCggdGhpcyApLmZpbmQoICQubW9iaWxlLmNvbGxhcHNpYmxlLnByb3RvdHlwZS5vcHRpb25zLmhlYWRpbmcgKQoJCQkJCS5maW5kKCAiYSIgKS5maXJzdCgpCgkJCQkJLmFkZCggIi51aS1idG4taW5uZXIiICkKCQkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20iICk7CgkJCX0pOwoKCQkJY29sbGFwc2libGVzSW5TZXQuZmlyc3QoKQoJCQkJLmZpbmQoICJhIiApCgkJCQkJLmZpcnN0KCkKCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItdG9wIiApCgkJCQkJCS5maW5kKCAiLnVpLWJ0bi1pbm5lciIgKQoJCQkJCQkJLmFkZENsYXNzKCAidWktY29ybmVyLXRvcCIgKTsKCgkJCWNvbGxhcHNpYmxlc0luU2V0Lmxhc3QoKQoJCQkJLmpxbURhdGEoICJjb2xsYXBzaWJsZS1sYXN0IiwgdHJ1ZSApCgkJCQkuZmluZCggImEiICkKCQkJCQkuZmlyc3QoKQoJCQkJCS5hZGRDbGFzcyggInVpLWNvcm5lci1ib3R0b20iICkKCQkJCQkJLmZpbmQoICIudWktYnRuLWlubmVyIiApCgkJCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItYm90dG9tIiApOwoJCX0KCX0KfSk7CgovL2F1dG8gc2VsZi1pbml0IHdpZGdldHMKJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZWNyZWF0ZSBjcmVhdGUiLCBmdW5jdGlvbiggZSApewoJJCggJC5tb2JpbGUuY29sbGFwc2libGVzZXQucHJvdG90eXBlLm9wdGlvbnMuaW5pdFNlbGVjdG9yLCBlLnRhcmdldCApLmNvbGxhcHNpYmxlc2V0KCk7Cn0pOwoKfSkoIGpRdWVyeSApOwovKgoqICJmaWVsZGNvbnRhaW4iIHBsdWdpbiAtIHNpbXBsZSBjbGFzcyBhZGRpdGlvbnMgdG8gbWFrZSBmb3JtIHJvdyBzZXBhcmF0b3JzCiovCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZm4uZmllbGRjb250YWluID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7CglyZXR1cm4gdGhpcy5hZGRDbGFzcyggInVpLWZpZWxkLWNvbnRhaW4gdWktYm9keSB1aS1iciIgKTsKfTsKCi8vYXV0byBzZWxmLWluaXQgd2lkZ2V0cwokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIGNyZWF0ZSIsIGZ1bmN0aW9uKCBlICl7CgkkKCAiOmpxbURhdGEocm9sZT0nZmllbGRjb250YWluJykiLCBlLnRhcmdldCApLmZpZWxkY29udGFpbigpOwp9KTsKCn0pKCBqUXVlcnkgKTsvKgoqIHBsdWdpbiBmb3IgY3JlYXRpbmcgQ1NTIGdyaWRzCiovCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZm4uZ3JpZCA9IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCgkJdmFyICR0aGlzID0gJCggdGhpcyApLAoJCQlvID0gJC5leHRlbmQoewoJCQkJZ3JpZDogbnVsbAoJCQl9LG9wdGlvbnMpLAoJCQkka2lkcyA9ICR0aGlzLmNoaWxkcmVuKCksCgkJCWdyaWRDb2xzID0ge3NvbG86MSwgYToyLCBiOjMsIGM6NCwgZDo1fSwKCQkJZ3JpZCA9IG8uZ3JpZCwKCQkJaXRlcmF0b3I7CgoJCQlpZiAoICFncmlkICkgewoJCQkJaWYgKCAka2lkcy5sZW5ndGggPD0gNSApIHsKCQkJCQlmb3IgKCB2YXIgbGV0dGVyIGluIGdyaWRDb2xzICkgewoJCQkJCQlpZiAoIGdyaWRDb2xzWyBsZXR0ZXIgXSA9PT0gJGtpZHMubGVuZ3RoICkgewoJCQkJCQkJZ3JpZCA9IGxldHRlcjsKCQkJCQkJfQoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJZ3JpZCA9ICJhIjsKCQkJCX0KCQkJfQoJCQlpdGVyYXRvciA9IGdyaWRDb2xzW2dyaWRdOwoKCQkkdGhpcy5hZGRDbGFzcyggInVpLWdyaWQtIiArIGdyaWQgKTsKCgkJJGtpZHMuZmlsdGVyKCAiOm50aC1jaGlsZCgiICsgaXRlcmF0b3IgKyAibisxKSIgKS5hZGRDbGFzcyggInVpLWJsb2NrLWEiICk7CgoJCWlmICggaXRlcmF0b3IgPiAxICkgewoJCQkka2lkcy5maWx0ZXIoICI6bnRoLWNoaWxkKCIgKyBpdGVyYXRvciArICJuKzIpIiApLmFkZENsYXNzKCAidWktYmxvY2stYiIgKTsKCQl9CgkJaWYgKCBpdGVyYXRvciA+IDIgKSB7CgkJCSRraWRzLmZpbHRlciggIjpudGgtY2hpbGQoM24rMykiICkuYWRkQ2xhc3MoICJ1aS1ibG9jay1jIiApOwoJCX0KCQlpZiAoIGl0ZXJhdG9yID4gMyApIHsKCQkJJGtpZHMuZmlsdGVyKCAiOm50aC1jaGlsZCg0bis0KSIgKS5hZGRDbGFzcyggInVpLWJsb2NrLWQiICk7CgkJfQoJCWlmICggaXRlcmF0b3IgPiA0ICkgewoJCQkka2lkcy5maWx0ZXIoICI6bnRoLWNoaWxkKDVuKzUpIiApLmFkZENsYXNzKCAidWktYmxvY2stZSIgKTsKCQl9Cgl9KTsKfTsKfSkoIGpRdWVyeSApOy8qCiogIm5hdmJhciIgcGx1Z2luCiovCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLm5hdmJhciIsICQubW9iaWxlLndpZGdldCwgewoJb3B0aW9uczogewoJCWljb25wb3M6ICJ0b3AiLAoJCWdyaWQ6IG51bGwsCgkJaW5pdFNlbGVjdG9yOiAiOmpxbURhdGEocm9sZT0nbmF2YmFyJykiCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCl7CgoJCXZhciAkbmF2YmFyID0gdGhpcy5lbGVtZW50LAoJCQkkbmF2YnRucyA9ICRuYXZiYXIuZmluZCggImEiICksCgkJCWljb25wb3MgPSAkbmF2YnRucy5maWx0ZXIoICI6anFtRGF0YShpY29uKSIgKS5sZW5ndGggPwoJCQkJCQkJCQl0aGlzLm9wdGlvbnMuaWNvbnBvcyA6IHVuZGVmaW5lZDsKCgkJJG5hdmJhci5hZGRDbGFzcyggInVpLW5hdmJhciIgKQoJCQkuYXR0ciggInJvbGUiLCJuYXZpZ2F0aW9uIiApCgkJCS5maW5kKCAidWwiICkKCQkJCS5ncmlkKHsgZ3JpZDogdGhpcy5vcHRpb25zLmdyaWQgfSk7CgoJCWlmICggIWljb25wb3MgKSB7CgkJCSRuYXZiYXIuYWRkQ2xhc3MoICJ1aS1uYXZiYXItbm9pY29ucyIgKTsKCQl9CgoJCSRuYXZidG5zLmJ1dHRvbk1hcmt1cCh7CgkJCWNvcm5lcnM6CWZhbHNlLAoJCQlzaGFkb3c6CQlmYWxzZSwKCQkJaWNvbnBvczoJaWNvbnBvcwoJCX0pOwoKCQkkbmF2YmFyLmRlbGVnYXRlKCAiYSIsICJ2Y2xpY2siLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCWlmKCAhJChldmVudC50YXJnZXQpLmhhc0NsYXNzKCJ1aS1kaXNhYmxlZCIpICkgewoJCQkJJG5hdmJ0bnMubm90KCAiLnVpLXN0YXRlLXBlcnNpc3QiICkucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJCQkkKCB0aGlzICkuYWRkQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJCX0KCQl9KTsKCX0KfSk7CgovL2F1dG8gc2VsZi1pbml0IHdpZGdldHMKJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZWNyZWF0ZSBjcmVhdGUiLCBmdW5jdGlvbiggZSApewoJJCggJC5tb2JpbGUubmF2YmFyLnByb3RvdHlwZS5vcHRpb25zLmluaXRTZWxlY3RvciwgZS50YXJnZXQgKS5uYXZiYXIoKTsKfSk7Cgp9KSggalF1ZXJ5ICk7Ci8qCiogImxpc3R2aWV3IiBwbHVnaW4KKi8KCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKLy9LZWVwcyB0cmFjayBvZiB0aGUgbnVtYmVyIG9mIGxpc3RzIHBlciBwYWdlIFVJRAovL1RoaXMgYWxsb3dzIHN1cHBvcnQgZm9yIG11bHRpcGxlIG5lc3RlZCBsaXN0IGluIHRoZSBzYW1lIHBhZ2UKLy9odHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS1tb2JpbGUvaXNzdWVzLzE2MTcKdmFyIGxpc3RDb3VudFBlclBhZ2UgPSB7fTsKCiQud2lkZ2V0KCAibW9iaWxlLmxpc3R2aWV3IiwgJC5tb2JpbGUud2lkZ2V0LCB7CglvcHRpb25zOiB7CgkJdGhlbWU6IG51bGwsCgkJY291bnRUaGVtZTogImMiLAoJCWhlYWRlclRoZW1lOiAiYiIsCgkJZGl2aWRlclRoZW1lOiAiYiIsCgkJc3BsaXRJY29uOiAiYXJyb3ctciIsCgkJc3BsaXRUaGVtZTogImIiLAoJCWluc2V0OiBmYWxzZSwKCQlpbml0U2VsZWN0b3I6ICI6anFtRGF0YShyb2xlPSdsaXN0dmlldycpIgoJfSwKCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl2YXIgdCA9IHRoaXM7CgoJCS8vIGNyZWF0ZSBsaXN0dmlldyBtYXJrdXAKCQl0LmVsZW1lbnQuYWRkQ2xhc3MoZnVuY3Rpb24oIGksIG9yaWcgKSB7CgkJCXJldHVybiBvcmlnICsgIiB1aS1saXN0dmlldyAiICsgKCB0Lm9wdGlvbnMuaW5zZXQgPyAiIHVpLWxpc3R2aWV3LWluc2V0IHVpLWNvcm5lci1hbGwgdWktc2hhZG93ICIgOiAiIiApOwoJCX0pOwoKCQl0LnJlZnJlc2goIHRydWUgKTsKCX0sCgoJX3JlbW92ZUNvcm5lcnM6IGZ1bmN0aW9uKCBsaSwgd2hpY2ggKSB7CgkJdmFyIHRvcCA9ICJ1aS1jb3JuZXItdG9wIHVpLWNvcm5lci10ciB1aS1jb3JuZXItdGwiLAoJCQlib3QgPSAidWktY29ybmVyLWJvdHRvbSB1aS1jb3JuZXItYnIgdWktY29ybmVyLWJsIjsKCgkJbGkgPSBsaS5hZGQoIGxpLmZpbmQoICIudWktYnRuLWlubmVyLCAudWktbGktbGluay1hbHQsIC51aS1saS10aHVtYiIgKSApOwoKCQlpZiAoIHdoaWNoID09PSAidG9wIiApIHsKCQkJbGkucmVtb3ZlQ2xhc3MoIHRvcCApOwoJCX0gZWxzZSBpZiAoIHdoaWNoID09PSAiYm90dG9tIiApIHsKCQkJbGkucmVtb3ZlQ2xhc3MoIGJvdCApOwoJCX0gZWxzZSB7CgkJCWxpLnJlbW92ZUNsYXNzKCB0b3AgKyAiICIgKyBib3QgKTsKCQl9Cgl9LAoKCV9yZWZyZXNoQ29ybmVyczogZnVuY3Rpb24oIGNyZWF0ZSApIHsKCQl2YXIgJGxpLAoJCQkkdmlzaWJsZWxpLAoJCQkkdG9wbGksCgkJCSRib3R0b21saTsKCgkJaWYgKCB0aGlzLm9wdGlvbnMuaW5zZXQgKSB7CgkJCSRsaSA9IHRoaXMuZWxlbWVudC5jaGlsZHJlbiggImxpIiApOwoJCQkvLyBhdCBjcmVhdGUgdGltZSB0aGUgbGkgYXJlIG5vdCB2aXNpYmxlIHlldCBzbyB3ZSBuZWVkIHRvIHJlbHkgb24gLnVpLXNjcmVlbi1oaWRkZW4KCQkJJHZpc2libGVsaSA9IGNyZWF0ZT8kbGkubm90KCAiLnVpLXNjcmVlbi1oaWRkZW4iICk6JGxpLmZpbHRlciggIjp2aXNpYmxlIiApOwoKCQkJdGhpcy5fcmVtb3ZlQ29ybmVycyggJGxpICk7CgoJCQkvLyBTZWxlY3QgdGhlIGZpcnN0IHZpc2libGUgbGkgZWxlbWVudAoJCQkkdG9wbGkgPSAkdmlzaWJsZWxpLmZpcnN0KCkKCQkJCS5hZGRDbGFzcyggInVpLWNvcm5lci10b3AiICk7CgoJCQkkdG9wbGkuYWRkKCAkdG9wbGkuZmluZCggIi51aS1idG4taW5uZXIiICkKCQkJCQkubm90KCAiLnVpLWxpLWxpbmstYWx0IHNwYW46Zmlyc3QtY2hpbGQiICkgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggInVpLWNvcm5lci10b3AiICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW5kKCkKCQkJCS5maW5kKCAiLnVpLWxpLWxpbmstYWx0LCAudWktbGktbGluay1hbHQgc3BhbjpmaXJzdC1jaGlsZCIgKQoJCQkJCS5hZGRDbGFzcyggInVpLWNvcm5lci10ciIgKQoJCQkJLmVuZCgpCgkJCQkuZmluZCggIi51aS1saS10aHVtYiIgKQoJCQkJCS5ub3QoIi51aS1saS1pY29uIikKCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItdGwiICk7CgoJCQkvLyBTZWxlY3QgdGhlIGxhc3QgdmlzaWJsZSBsaSBlbGVtZW50CgkJCSRib3R0b21saSA9ICR2aXNpYmxlbGkubGFzdCgpCgkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItYm90dG9tIiApOwoKCQkJJGJvdHRvbWxpLmFkZCggJGJvdHRvbWxpLmZpbmQoICIudWktYnRuLWlubmVyIiApICkKCQkJCS5maW5kKCAiLnVpLWxpLWxpbmstYWx0IiApCgkJCQkJLmFkZENsYXNzKCAidWktY29ybmVyLWJyIiApCgkJCQkuZW5kKCkKCQkJCS5maW5kKCAiLnVpLWxpLXRodW1iIiApCgkJCQkJLm5vdCgiLnVpLWxpLWljb24iKQoJCQkJCS5hZGRDbGFzcyggInVpLWNvcm5lci1ibCIgKTsKCQl9CgkJaWYgKCAhY3JlYXRlICkgewoJCQl0aGlzLmVsZW1lbnQudHJpZ2dlciggInVwZGF0ZWxheW91dCIgKTsKCQl9Cgl9LAoKCS8vIFRoaXMgaXMgYSBnZW5lcmljIHV0aWxpdHkgbWV0aG9kIGZvciBmaW5kaW5nIHRoZSBmaXJzdAoJLy8gbm9kZSB3aXRoIGEgZ2l2ZW4gbm9kZU5hbWUuIEl0IHVzZXMgYmFzaWMgRE9NIHRyYXZlcnNhbAoJLy8gdG8gYmUgZmFzdCBhbmQgaXMgbWVhbnQgdG8gYmUgYSBzdWJzdGl0dXRlIGZvciBzaW1wbGUKCS8vICQuZm4uY2xvc2VzdCgpIGFuZCAkLmZuLmNoaWxkcmVuKCkgY2FsbHMgb24gYSBzaW5nbGUKCS8vIGVsZW1lbnQuIE5vdGUgdGhhdCBjYWxsZXJzIG11c3QgcGFzcyBib3RoIHRoZSBsb3dlckNhc2UKCS8vIGFuZCB1cHBlckNhc2UgdmVyc2lvbiBvZiB0aGUgbm9kZU5hbWUgdGhleSBhcmUgbG9va2luZyBmb3IuCgkvLyBUaGUgbWFpbiByZWFzb24gZm9yIHRoaXMgaXMgdGhhdCB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUKCS8vIGNhbGxlZCBtYW55IHRpbWVzIGFuZCB3ZSB3YW50IHRvIGF2b2lkIGhhdmluZyB0byBsb3dlcmNhc2UKCS8vIHRoZSBub2RlTmFtZSBmcm9tIHRoZSBlbGVtZW50IGV2ZXJ5IHRpbWUgdG8gZW5zdXJlIHdlIGhhdmUKCS8vIGEgbWF0Y2guIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGxpdmVzIGhlcmUgZm9yIG5vdywgYnV0IG1heQoJLy8gYmUgbW92ZWQgaW50byAkLm1vYmlsZSBpZiBvdGhlciBjb21wb25lbnRzIG5lZWQgYSBzaW1pbGFyIG1ldGhvZC4KCV9maW5kRmlyc3RFbGVtZW50QnlUYWdOYW1lOiBmdW5jdGlvbiggZWxlLCBuZXh0UHJvcCwgbGNOYW1lLCB1Y05hbWUgKQoJewoJCXZhciBkaWN0ID0ge307CgkJZGljdFsgbGNOYW1lIF0gPSBkaWN0WyB1Y05hbWUgXSA9IHRydWU7CgkJd2hpbGUgKCBlbGUgKSB7CgkJCWlmICggZGljdFsgZWxlLm5vZGVOYW1lIF0gKSB7CgkJCQlyZXR1cm4gZWxlOwoJCQl9CgkJCWVsZSA9IGVsZVsgbmV4dFByb3AgXTsKCQl9CgkJcmV0dXJuIG51bGw7Cgl9LAoJX2dldENoaWxkcmVuQnlUYWdOYW1lOiBmdW5jdGlvbiggZWxlLCBsY05hbWUsIHVjTmFtZSApCgl7CgkJdmFyIHJlc3VsdHMgPSBbXSwKCQkJZGljdCA9IHt9OwoJCWRpY3RbIGxjTmFtZSBdID0gZGljdFsgdWNOYW1lIF0gPSB0cnVlOwoJCWVsZSA9IGVsZS5maXJzdENoaWxkOwoJCXdoaWxlICggZWxlICkgewoJCQlpZiAoIGRpY3RbIGVsZS5ub2RlTmFtZSBdICkgewoJCQkJcmVzdWx0cy5wdXNoKCBlbGUgKTsKCQkJfQoJCQllbGUgPSBlbGUubmV4dFNpYmxpbmc7CgkJfQoJCXJldHVybiAkKCByZXN1bHRzICk7Cgl9LAoKCV9hZGRUaHVtYkNsYXNzZXM6IGZ1bmN0aW9uKCBjb250YWluZXJzICkKCXsKCQl2YXIgaSwgaW1nLCBsZW4gPSBjb250YWluZXJzLmxlbmd0aDsKCQlmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkgewoJCQlpbWcgPSAkKCB0aGlzLl9maW5kRmlyc3RFbGVtZW50QnlUYWdOYW1lKCBjb250YWluZXJzWyBpIF0uZmlyc3RDaGlsZCwgIm5leHRTaWJsaW5nIiwgImltZyIsICJJTUciICkgKTsKCQkJaWYgKCBpbWcubGVuZ3RoICkgewoJCQkJaW1nLmFkZENsYXNzKCAidWktbGktdGh1bWIiICk7CgkJCQkkKCB0aGlzLl9maW5kRmlyc3RFbGVtZW50QnlUYWdOYW1lKCBpbWdbIDAgXS5wYXJlbnROb2RlLCAicGFyZW50Tm9kZSIsICJsaSIsICJMSSIgKSApLmFkZENsYXNzKCBpbWcuaXMoICIudWktbGktaWNvbiIgKSA/ICJ1aS1saS1oYXMtaWNvbiIgOiAidWktbGktaGFzLXRodW1iIiApOwoJCQl9CgkJfQoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbiggY3JlYXRlICkgewoJCXRoaXMucGFyZW50UGFnZSA9IHRoaXMuZWxlbWVudC5jbG9zZXN0KCAiLnVpLXBhZ2UiICk7CgkJdGhpcy5fY3JlYXRlU3ViUGFnZXMoKTsKCgkJdmFyIG8gPSB0aGlzLm9wdGlvbnMsCgkJCSRsaXN0ID0gdGhpcy5lbGVtZW50LAoJCQlzZWxmID0gdGhpcywKCQkJZGl2aWRlcnRoZW1lID0gJGxpc3QuanFtRGF0YSggImRpdmlkZXJ0aGVtZSIgKSB8fCBvLmRpdmlkZXJUaGVtZSwKCQkJbGlzdHNwbGl0dGhlbWUgPSAkbGlzdC5qcW1EYXRhKCAic3BsaXR0aGVtZSIgKSwKCQkJbGlzdHNwbGl0aWNvbiA9ICRsaXN0LmpxbURhdGEoICJzcGxpdGljb24iICksCgkJCWxpID0gdGhpcy5fZ2V0Q2hpbGRyZW5CeVRhZ05hbWUoICRsaXN0WyAwIF0sICJsaSIsICJMSSIgKSwKCQkJY291bnRlciA9ICQuc3VwcG9ydC5jc3NQc2V1ZG9FbGVtZW50IHx8ICEkLm5vZGVOYW1lKCAkbGlzdFsgMCBdLCAib2wiICkgPyAwIDogMSwKCQkJaXRlbUNsYXNzRGljdCA9IHt9LAoJCQlpdGVtLCBpdGVtQ2xhc3MsIGl0ZW1UaGVtZSwKCQkJYSwgbGFzdCwgc3BsaXR0aGVtZSwgY291bnRQYXJlbnQsIGljb24sIGltZ1BhcmVudHMsIGltZzsKCgkJaWYgKCBjb3VudGVyICkgewoJCQkkbGlzdC5maW5kKCAiLnVpLWxpLWRlYyIgKS5yZW1vdmUoKTsKCQl9CgkJCgkJaWYgKCAhby50aGVtZSApIHsKCQkJby50aGVtZSA9ICQubW9iaWxlLmdldEluaGVyaXRlZFRoZW1lKCB0aGlzLmVsZW1lbnQsICJjIiApOwoJCX0KCgkJZm9yICggdmFyIHBvcyA9IDAsIG51bWxpID0gbGkubGVuZ3RoOyBwb3MgPCBudW1saTsgcG9zKysgKSB7CgkJCWl0ZW0gPSBsaS5lcSggcG9zICk7CgkJCWl0ZW1DbGFzcyA9ICJ1aS1saSI7CgoJCQkvLyBJZiB3ZSdyZSBjcmVhdGluZyB0aGUgZWxlbWVudCwgd2UgdXBkYXRlIGl0IHJlZ2FyZGxlc3MKCQkJaWYgKCBjcmVhdGUgfHwgIWl0ZW0uaGFzQ2xhc3MoICJ1aS1saSIgKSApIHsKCQkJCWl0ZW1UaGVtZSA9IGl0ZW0uanFtRGF0YSgidGhlbWUiKSB8fCBvLnRoZW1lOwoJCQkJYSA9IHRoaXMuX2dldENoaWxkcmVuQnlUYWdOYW1lKCBpdGVtWyAwIF0sICJhIiwgIkEiICk7CgoJCQkJaWYgKCBhLmxlbmd0aCApIHsKCQkJCQlpY29uID0gaXRlbS5qcW1EYXRhKCJpY29uIik7CgoJCQkJCWl0ZW0uYnV0dG9uTWFya3VwKHsKCQkJCQkJd3JhcHBlckVsczogImRpdiIsCgkJCQkJCXNoYWRvdzogZmFsc2UsCgkJCQkJCWNvcm5lcnM6IGZhbHNlLAoJCQkJCQlpY29ucG9zOiAicmlnaHQiLAoJCQkJCQlpY29uOiBhLmxlbmd0aCA+IDEgfHwgaWNvbiA9PT0gZmFsc2UgPyBmYWxzZSA6IGljb24gfHwgImFycm93LXIiLAoJCQkJCQl0aGVtZTogaXRlbVRoZW1lCgkJCQkJfSk7CgoJCQkJCWlmICggKCBpY29uICE9IGZhbHNlICkgJiYgKCBhLmxlbmd0aCA9PSAxICkgKSB7CgkJCQkJCWl0ZW0uYWRkQ2xhc3MoICJ1aS1saS1oYXMtYXJyb3ciICk7CgkJCQkJfQoKCQkJCQlhLmZpcnN0KCkuYWRkQ2xhc3MoICJ1aS1saW5rLWluaGVyaXQiICk7CgoJCQkJCWlmICggYS5sZW5ndGggPiAxICkgewoJCQkJCQlpdGVtQ2xhc3MgKz0gIiB1aS1saS1oYXMtYWx0IjsKCgkJCQkJCWxhc3QgPSBhLmxhc3QoKTsKCQkJCQkJc3BsaXR0aGVtZSA9IGxpc3RzcGxpdHRoZW1lIHx8IGxhc3QuanFtRGF0YSggInRoZW1lIiApIHx8IG8uc3BsaXRUaGVtZTsKCgkJCQkJCWxhc3QuYXBwZW5kVG8oaXRlbSkKCQkJCQkJCS5hdHRyKCAidGl0bGUiLCBsYXN0LmdldEVuY29kZWRUZXh0KCkgKQoJCQkJCQkJLmFkZENsYXNzKCAidWktbGktbGluay1hbHQiICkKCQkJCQkJCS5lbXB0eSgpCgkJCQkJCQkuYnV0dG9uTWFya3VwKHsKCQkJCQkJCQlzaGFkb3c6IGZhbHNlLAoJCQkJCQkJCWNvcm5lcnM6IGZhbHNlLAoJCQkJCQkJCXRoZW1lOiBpdGVtVGhlbWUsCgkJCQkJCQkJaWNvbjogZmFsc2UsCgkJCQkJCQkJaWNvbnBvczogZmFsc2UKCQkJCQkJCX0pCgkJCQkJCQkuZmluZCggIi51aS1idG4taW5uZXIiICkKCQkJCQkJCQkuYXBwZW5kKAoJCQkJCQkJCQkkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAic3BhbiIgKSApLmJ1dHRvbk1hcmt1cCh7CgkJCQkJCQkJCQlzaGFkb3c6IHRydWUsCgkJCQkJCQkJCQljb3JuZXJzOiB0cnVlLAoJCQkJCQkJCQkJdGhlbWU6IHNwbGl0dGhlbWUsCgkJCQkJCQkJCQlpY29ucG9zOiAibm90ZXh0IiwKCQkJCQkJCQkJCWljb246IGxpc3RzcGxpdGljb24gfHwgbGFzdC5qcW1EYXRhKCAiaWNvbiIgKSB8fCBvLnNwbGl0SWNvbgoJCQkJCQkJCQl9KQoJCQkJCQkJCSk7CgkJCQkJfQoJCQkJfSBlbHNlIGlmICggaXRlbS5qcW1EYXRhKCAicm9sZSIgKSA9PT0gImxpc3QtZGl2aWRlciIgKSB7CgoJCQkJCWl0ZW1DbGFzcyArPSAiIHVpLWxpLWRpdmlkZXIgdWktYnRuIHVpLWJhci0iICsgZGl2aWRlcnRoZW1lOwoJCQkJCWl0ZW0uYXR0ciggInJvbGUiLCAiaGVhZGluZyIgKTsKCgkJCQkJLy9yZXNldCBjb3VudGVyIHdoZW4gYSBkaXZpZGVyIGhlYWRpbmcgaXMgZW5jb3VudGVyZWQKCQkJCQlpZiAoIGNvdW50ZXIgKSB7CgkJCQkJCWNvdW50ZXIgPSAxOwoJCQkJCX0KCgkJCQl9IGVsc2UgewoJCQkJCWl0ZW1DbGFzcyArPSAiIHVpLWxpLXN0YXRpYyB1aS1ib2R5LSIgKyBpdGVtVGhlbWU7CgkJCQl9CgkJCX0KCgkJCWlmICggY291bnRlciAmJiBpdGVtQ2xhc3MuaW5kZXhPZiggInVpLWxpLWRpdmlkZXIiICkgPCAwICkgewoJCQkJY291bnRQYXJlbnQgPSBpdGVtLmlzKCAiLnVpLWxpLXN0YXRpYzpmaXJzdCIgKSA/IGl0ZW0gOiBpdGVtLmZpbmQoICIudWktbGluay1pbmhlcml0IiApOwoKCQkJCWNvdW50UGFyZW50LmFkZENsYXNzKCAidWktbGktanNudW1iZXJpbmciICkKCQkJCQkucHJlcGVuZCggIjxzcGFuIGNsYXNzPSd1aS1saS1kZWMnPiIgKyAoY291bnRlcisrKSArICIuIDwvc3Bhbj4iICk7CgkJCX0KCgkJCS8vIEluc3RlYWQgb2Ygc2V0dGluZyBpdGVtIGNsYXNzIGRpcmVjdGx5IG9uIHRoZSBsaXN0IGl0ZW0gYW5kIGl0cwoJCQkvLyBidG4taW5uZXIgYXQgdGhpcyBwb2ludCBpbiB0aW1lLCBwdXNoIHRoZSBpdGVtIGludG8gYSBkaWN0aW9uYXJ5CgkJCS8vIHRoYXQgdGVsbHMgdXMgd2hhdCBjbGFzcyB0byBzZXQgb24gaXQgc28gd2UgY2FuIGRvIHRoaXMgYWZ0ZXIgdGhpcwoJCQkvLyBwcm9jZXNzaW5nIGxvb3AgaXMgZmluaXNoZWQuCgoJCQlpZiAoICFpdGVtQ2xhc3NEaWN0WyBpdGVtQ2xhc3MgXSApIHsKCQkJCWl0ZW1DbGFzc0RpY3RbIGl0ZW1DbGFzcyBdID0gW107CgkJCX0KCgkJCWl0ZW1DbGFzc0RpY3RbIGl0ZW1DbGFzcyBdLnB1c2goIGl0ZW1bIDAgXSApOwoJCX0KCgkJLy8gU2V0IHRoZSBhcHByb3ByaWF0ZSBsaXN0dmlldyBpdGVtIGNsYXNzZXMgb24gZWFjaCBsaXN0IGl0ZW0KCQkvLyBhbmQgdGhlaXIgYnRuLWlubmVyIGVsZW1lbnRzLiBUaGUgbWFpbiByZWFzb24gd2UgZGlkbid0IGRvIHRoaXMKCQkvLyBpbiB0aGUgZm9yLWxvb3AgYWJvdmUgaXMgYmVjYXVzZSB3ZSBjYW4gZWxpbWluYXRlIHBlci1pdGVtIGZ1bmN0aW9uIG92ZXJoZWFkCgkJLy8gYnkgY2FsbGluZyBhZGRDbGFzcygpIGFuZCBjaGlsZHJlbigpIG9uY2Ugb3IgdHdpY2UgYWZ0ZXJ3YXJkcy4gVGhpcwoJCS8vIGNhbiBnaXZlIHVzIGEgc2lnbmlmaWNhbnQgYm9vc3Qgb24gcGxhdGZvcm1zIGxpa2UgV1A3LjUuCgoJCWZvciAoIGl0ZW1DbGFzcyBpbiBpdGVtQ2xhc3NEaWN0ICkgewoJCQkkKCBpdGVtQ2xhc3NEaWN0WyBpdGVtQ2xhc3MgXSApLmFkZENsYXNzKCBpdGVtQ2xhc3MgKS5jaGlsZHJlbiggIi51aS1idG4taW5uZXIiICkuYWRkQ2xhc3MoIGl0ZW1DbGFzcyApOwoJCX0KCgkJJGxpc3QuZmluZCggImgxLCBoMiwgaDMsIGg0LCBoNSwgaDYiICkuYWRkQ2xhc3MoICJ1aS1saS1oZWFkaW5nIiApCgkJCS5lbmQoKQoKCQkJLmZpbmQoICJwLCBkbCIgKS5hZGRDbGFzcyggInVpLWxpLWRlc2MiICkKCQkJLmVuZCgpCgoJCQkuZmluZCggIi51aS1saS1hc2lkZSIgKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJCXZhciAkdGhpcyA9ICQodGhpcyk7CgkJCQkJJHRoaXMucHJlcGVuZFRvKCAkdGhpcy5wYXJlbnQoKSApOyAvL3NoaWZ0IGFzaWRlIHRvIGZyb250IGZvciBjc3MgZmxvYXQKCQkJCX0pCgkJCS5lbmQoKQoKCQkJLmZpbmQoICIudWktbGktY291bnQiICkuZWFjaCggZnVuY3Rpb24oKSB7CgkJCQkJJCggdGhpcyApLmNsb3Nlc3QoICJsaSIgKS5hZGRDbGFzcyggInVpLWxpLWhhcy1jb3VudCIgKTsKCQkJCX0pLmFkZENsYXNzKCAidWktYnRuLXVwLSIgKyAoICRsaXN0LmpxbURhdGEoICJjb3VudHRoZW1lIiApIHx8IHRoaXMub3B0aW9ucy5jb3VudFRoZW1lKSArICIgdWktYnRuLWNvcm5lci1hbGwiICk7CgoJCS8vIFRoZSBpZGVhIGhlcmUgaXMgdG8gbG9vayBhdCB0aGUgZmlyc3QgaW1hZ2UgaW4gdGhlIGxpc3QgaXRlbQoJCS8vIGl0c2VsZiwgYW5kIGFueSAudWktbGluay1pbmhlcml0IGVsZW1lbnQgaXQgbWF5IGNvbnRhaW4sIHNvIHdlCgkJLy8gY2FuIHBsYWNlIHRoZSBhcHByb3ByaWF0ZSBjbGFzc2VzIG9uIHRoZSBpbWFnZSBhbmQgbGlzdCBpdGVtLgoJCS8vIE5vdGUgdGhhdCB3ZSB1c2VkIHRvIHVzZSBzb21ldGhpbmcgbGlrZToKCQkvLwoJCS8vICAgIGxpLmZpbmQoIj5pbWc6ZXEoMCksIC51aS1saW5rLWluaGVyaXQ+aW1nOmVxKDApIikuZWFjaCggLi4uICk7CgkJLy8KCQkvLyBCdXQgZXhlY3V0aW5nIGEgZmluZCgpIGxpa2UgdGhhdCBvbiBXaW5kb3dzIFBob25lIDcuNSB0b29rIGEKCQkvLyByZWFsbHkgbG9uZyB0aW1lLiBXYWxraW5nIHRoaW5ncyBtYW51YWxseSB3aXRoIHRoZSBjb2RlIGJlbG93CgkJLy8gYWxsb3dzIHRoZSA0MDAgbGlzdHZpZXcgaXRlbSBwYWdlIHRvIGxvYWQgaW4gYWJvdXQgMyBzZWNvbmRzIGFzCgkJLy8gb3Bwb3NlZCB0byAzMCBzZWNvbmRzLgoKCQl0aGlzLl9hZGRUaHVtYkNsYXNzZXMoIGxpICk7CgkJdGhpcy5fYWRkVGh1bWJDbGFzc2VzKCAkbGlzdC5maW5kKCAiLnVpLWxpbmstaW5oZXJpdCIgKSApOwoKCQl0aGlzLl9yZWZyZXNoQ29ybmVycyggY3JlYXRlICk7Cgl9LAoKCS8vY3JlYXRlIGEgc3RyaW5nIGZvciBJRC9zdWJwYWdlIHVybCBjcmVhdGlvbgoJX2lkU3RyaW5nRXNjYXBlOiBmdW5jdGlvbiggc3RyICkgewoJCXJldHVybiBzdHIucmVwbGFjZSgvW15hLXpBLVowLTldL2csICctJyk7Cgl9LAoKCV9jcmVhdGVTdWJQYWdlczogZnVuY3Rpb24oKSB7CgkJdmFyIHBhcmVudExpc3QgPSB0aGlzLmVsZW1lbnQsCgkJCXBhcmVudFBhZ2UgPSBwYXJlbnRMaXN0LmNsb3Nlc3QoICIudWktcGFnZSIgKSwKCQkJcGFyZW50VXJsID0gcGFyZW50UGFnZS5qcW1EYXRhKCAidXJsIiApLAoJCQlwYXJlbnRJZCA9IHBhcmVudFVybCB8fCBwYXJlbnRQYWdlWyAwIF1bICQuZXhwYW5kbyBdLAoJCQlwYXJlbnRMaXN0SWQgPSBwYXJlbnRMaXN0LmF0dHIoICJpZCIgKSwKCQkJbyA9IHRoaXMub3B0aW9ucywKCQkJZG5zID0gImRhdGEtIiArICQubW9iaWxlLm5zLAoJCQlzZWxmID0gdGhpcywKCQkJcGVyc2lzdGVudEZvb3RlcklEID0gcGFyZW50UGFnZS5maW5kKCAiOmpxbURhdGEocm9sZT0nZm9vdGVyJykiICkuanFtRGF0YSggImlkIiApLAoJCQloYXNTdWJQYWdlczsKCgkJaWYgKCB0eXBlb2YgbGlzdENvdW50UGVyUGFnZVsgcGFyZW50SWQgXSA9PT0gInVuZGVmaW5lZCIgKSB7CgkJCWxpc3RDb3VudFBlclBhZ2VbIHBhcmVudElkIF0gPSAtMTsKCQl9CgoJCXBhcmVudExpc3RJZCA9IHBhcmVudExpc3RJZCB8fCArK2xpc3RDb3VudFBlclBhZ2VbIHBhcmVudElkIF07CgoJCSQoIHBhcmVudExpc3QuZmluZCggImxpPnVsLCBsaT5vbCIgKS50b0FycmF5KCkucmV2ZXJzZSgpICkuZWFjaChmdW5jdGlvbiggaSApIHsKCQkJdmFyIHNlbGYgPSB0aGlzLAoJCQkJbGlzdCA9ICQoIHRoaXMgKSwKCQkJCWxpc3RJZCA9IGxpc3QuYXR0ciggImlkIiApIHx8IHBhcmVudExpc3RJZCArICItIiArIGksCgkJCQlwYXJlbnQgPSBsaXN0LnBhcmVudCgpLAoJCQkJbm9kZUVscyA9ICQoIGxpc3QucHJldkFsbCgpLnRvQXJyYXkoKS5yZXZlcnNlKCkgKSwKCQkJCW5vZGVFbHMgPSBub2RlRWxzLmxlbmd0aCA/IG5vZGVFbHMgOiAkKCAiPHNwYW4+IiArICQudHJpbShwYXJlbnQuY29udGVudHMoKVsgMCBdLm5vZGVWYWx1ZSkgKyAiPC9zcGFuPiIgKSwKCQkJCXRpdGxlID0gbm9kZUVscy5maXJzdCgpLmdldEVuY29kZWRUZXh0KCksLy91cmwgbGltaXRzIHRvIGZpcnN0IDMwIGNoYXJzIG9mIHRleHQKCQkJCWlkID0gKCBwYXJlbnRVcmwgfHwgIiIgKSArICImIiArICQubW9iaWxlLnN1YlBhZ2VVcmxLZXkgKyAiPSIgKyBsaXN0SWQsCgkJCQl0aGVtZSA9IGxpc3QuanFtRGF0YSggInRoZW1lIiApIHx8IG8udGhlbWUsCgkJCQljb3VudFRoZW1lID0gbGlzdC5qcW1EYXRhKCAiY291bnR0aGVtZSIgKSB8fCBwYXJlbnRMaXN0LmpxbURhdGEoICJjb3VudHRoZW1lIiApIHx8IG8uY291bnRUaGVtZSwKCQkJCW5ld1BhZ2UsIGFuY2hvcjsKCgkJCS8vZGVmaW5lIGhhc1N1YlBhZ2VzIGZvciB1c2UgaW4gbGF0ZXIgcmVtb3ZhbAoJCQloYXNTdWJQYWdlcyA9IHRydWU7CgoJCQluZXdQYWdlID0gbGlzdC5kZXRhY2goKQoJCQkJCQkud3JhcCggIjxkaXYgIiArIGRucyArICJyb2xlPSdwYWdlJyAiICsJZG5zICsgInVybD0nIiArIGlkICsgIicgIiArIGRucyArICJ0aGVtZT0nIiArIHRoZW1lICsgIicgIiArIGRucyArICJjb3VudC10aGVtZT0nIiArIGNvdW50VGhlbWUgKyAiJz48ZGl2ICIgKyBkbnMgKyAicm9sZT0nY29udGVudCc+PC9kaXY+PC9kaXY+IiApCgkJCQkJCS5wYXJlbnQoKQoJCQkJCQkJLmJlZm9yZSggIjxkaXYgIiArIGRucyArICJyb2xlPSdoZWFkZXInICIgKyBkbnMgKyAidGhlbWU9JyIgKyBvLmhlYWRlclRoZW1lICsgIic+PGRpdiBjbGFzcz0ndWktdGl0bGUnPiIgKyB0aXRsZSArICI8L2Rpdj48L2Rpdj4iICkKCQkJCQkJCS5hZnRlciggcGVyc2lzdGVudEZvb3RlcklEID8gJCggIjxkaXYgIiArIGRucyArICJyb2xlPSdmb290ZXInICIgKyBkbnMgKyAiaWQ9JyIrIHBlcnNpc3RlbnRGb290ZXJJRCArIic+IikgOiAiIiApCgkJCQkJCQkucGFyZW50KCkKCQkJCQkJCQkuYXBwZW5kVG8oICQubW9iaWxlLnBhZ2VDb250YWluZXIgKTsKCgkJCW5ld1BhZ2UucGFnZSgpOwoKCQkJYW5jaG9yID0gcGFyZW50LmZpbmQoJ2E6Zmlyc3QnKTsKCgkJCWlmICggIWFuY2hvci5sZW5ndGggKSB7CgkJCQlhbmNob3IgPSAkKCAiPGEvPiIgKS5odG1sKCBub2RlRWxzIHx8IHRpdGxlICkucHJlcGVuZFRvKCBwYXJlbnQuZW1wdHkoKSApOwoJCQl9CgoJCQlhbmNob3IuYXR0ciggImhyZWYiLCAiIyIgKyBpZCApOwoKCQl9KS5saXN0dmlldygpOwoKCQkvLyBvbiBwYWdlaGlkZSwgcmVtb3ZlIGFueSBuZXN0ZWQgcGFnZXMgYWxvbmcgd2l0aCB0aGUgcGFyZW50IHBhZ2UsIGFzIGxvbmcgYXMgdGhleSBhcmVuJ3QgYWN0aXZlCgkJLy8gYW5kIGFyZW4ndCBlbWJlZGRlZAoJCWlmKCBoYXNTdWJQYWdlcyAmJgoJCQlwYXJlbnRQYWdlLmlzKCAiOmpxbURhdGEoZXh0ZXJuYWwtcGFnZT0ndHJ1ZScpIiApICYmCgkJCXBhcmVudFBhZ2UuZGF0YSgicGFnZSIpLm9wdGlvbnMuZG9tQ2FjaGUgPT09IGZhbHNlICkgewoKCQkJdmFyIG5ld1JlbW92ZSA9IGZ1bmN0aW9uKCBlLCB1aSApewoJCQkJdmFyIG5leHRQYWdlID0gdWkubmV4dFBhZ2UsIG5wVVJMOwoKCQkJCWlmKCB1aS5uZXh0UGFnZSApewoJCQkJCW5wVVJMID0gbmV4dFBhZ2UuanFtRGF0YSggInVybCIgKTsKCQkJCQlpZiggbnBVUkwuaW5kZXhPZiggcGFyZW50VXJsICsgIiYiICsgJC5tb2JpbGUuc3ViUGFnZVVybEtleSApICE9PSAwICl7CgkJCQkJCXNlbGYuY2hpbGRQYWdlcygpLnJlbW92ZSgpOwoJCQkJCQlwYXJlbnRQYWdlLnJlbW92ZSgpOwoJCQkJCX0KCQkJCX0KCQkJfTsKCgkJCS8vIHVuYmluZCB0aGUgb3JpZ2luYWwgcGFnZSByZW1vdmUgYW5kIHJlcGxhY2Ugd2l0aCBvdXIgc3BlY2lhbGl6ZWQgdmVyc2lvbgoJCQlwYXJlbnRQYWdlCgkJCQkudW5iaW5kKCAicGFnZWhpZGUucmVtb3ZlIiApCgkJCQkuYmluZCggInBhZ2VoaWRlLnJlbW92ZSIsIG5ld1JlbW92ZSk7CgkJfQoJfSwKCgkvLyBUT0RPIHNvcnQgb3V0IGEgYmV0dGVyIHdheSB0byB0cmFjayBzdWIgcGFnZXMgb2YgdGhlIGxpc3R2aWV3IHRoaXMgaXMgYnJpdHRsZQoJY2hpbGRQYWdlczogZnVuY3Rpb24oKXsKCQl2YXIgcGFyZW50VXJsID0gdGhpcy5wYXJlbnRQYWdlLmpxbURhdGEoICJ1cmwiICk7CgoJCXJldHVybiAkKCAiOmpxbURhdGEodXJsXj0nIisgIHBhcmVudFVybCArICImIiArICQubW9iaWxlLnN1YlBhZ2VVcmxLZXkgKyInKSIpOwoJfQp9KTsKCi8vYXV0byBzZWxmLWluaXQgd2lkZ2V0cwokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIGNyZWF0ZSIsIGZ1bmN0aW9uKCBlICl7CgkkKCAkLm1vYmlsZS5saXN0dmlldy5wcm90b3R5cGUub3B0aW9ucy5pbml0U2VsZWN0b3IsIGUudGFyZ2V0ICkubGlzdHZpZXcoKTsKfSk7Cgp9KSggalF1ZXJ5ICk7Ci8qCiogImxpc3R2aWV3IiBmaWx0ZXIgZXh0ZW5zaW9uCiovCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQubW9iaWxlLmxpc3R2aWV3LnByb3RvdHlwZS5vcHRpb25zLmZpbHRlciA9IGZhbHNlOwokLm1vYmlsZS5saXN0dmlldy5wcm90b3R5cGUub3B0aW9ucy5maWx0ZXJQbGFjZWhvbGRlciA9ICJGaWx0ZXIgaXRlbXMuLi4iOwokLm1vYmlsZS5saXN0dmlldy5wcm90b3R5cGUub3B0aW9ucy5maWx0ZXJUaGVtZSA9ICJjIjsKJC5tb2JpbGUubGlzdHZpZXcucHJvdG90eXBlLm9wdGlvbnMuZmlsdGVyQ2FsbGJhY2sgPSBmdW5jdGlvbiggdGV4dCwgc2VhcmNoVmFsdWUgKXsKCXJldHVybiB0ZXh0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZiggc2VhcmNoVmFsdWUgKSA9PT0gLTE7Cn07CgokKCBkb2N1bWVudCApLmRlbGVnYXRlKCAiOmpxbURhdGEocm9sZT0nbGlzdHZpZXcnKSIsICJsaXN0dmlld2NyZWF0ZSIsIGZ1bmN0aW9uKCkgewoKCXZhciBsaXN0ID0gJCggdGhpcyApLAoJCWxpc3R2aWV3ID0gbGlzdC5kYXRhKCAibGlzdHZpZXciICk7CgoJaWYgKCAhbGlzdHZpZXcub3B0aW9ucy5maWx0ZXIgKSB7CgkJcmV0dXJuOwoJfQoKCXZhciB3cmFwcGVyID0gJCggIjxmb3JtPiIsIHsKCQkJImNsYXNzIjogInVpLWxpc3R2aWV3LWZpbHRlciB1aS1iYXItIiArIGxpc3R2aWV3Lm9wdGlvbnMuZmlsdGVyVGhlbWUsCgkJCSJyb2xlIjogInNlYXJjaCIKCQl9KSwKCQlzZWFyY2ggPSAkKCAiPGlucHV0PiIsIHsKCQkJcGxhY2Vob2xkZXI6IGxpc3R2aWV3Lm9wdGlvbnMuZmlsdGVyUGxhY2Vob2xkZXIKCQl9KQoJCS5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidHlwZSIsICJzZWFyY2giICkKCQkuanFtRGF0YSggImxhc3R2YWwiLCAiIiApCgkJLmJpbmQoICJrZXl1cCBjaGFuZ2UiLCBmdW5jdGlvbigpIHsKCgkJCXZhciAkdGhpcyA9ICQodGhpcyksCgkJCQl2YWwgPSB0aGlzLnZhbHVlLnRvTG93ZXJDYXNlKCksCgkJCQlsaXN0SXRlbXMgPSBudWxsLAoJCQkJbGFzdHZhbCA9ICR0aGlzLmpxbURhdGEoICJsYXN0dmFsIiApICsgIiIsCgkJCQljaGlsZEl0ZW1zID0gZmFsc2UsCgkJCQlpdGVtdGV4dCA9ICIiLAoJCQkJaXRlbTsKCgkJCS8vIENoYW5nZSB2YWwgYXMgbGFzdHZhbCBmb3IgbmV4dCBleGVjdXRpb24KCQkJJHRoaXMuanFtRGF0YSggImxhc3R2YWwiICwgdmFsICk7CgkJCWlmICggdmFsLmxlbmd0aCA8IGxhc3R2YWwubGVuZ3RoIHx8IHZhbC5pbmRleE9mKGxhc3R2YWwpICE9PSAwICkgewoKCQkJCS8vIFJlbW92ZWQgY2hhcnMgb3IgcGFzdGVkIHNvbWV0aGluZyB0b3RhbGx5IGRpZmZlcmVudCwgY2hlY2sgYWxsIGl0ZW1zCgkJCQlsaXN0SXRlbXMgPSBsaXN0LmNoaWxkcmVuKCk7CgkJCX0gZWxzZSB7CgoJCQkJLy8gT25seSBjaGFycyBhZGRlZCwgbm90IHJlbW92ZWQsIG9ubHkgdXNlIHZpc2libGUgc3Vic2V0CgkJCQlsaXN0SXRlbXMgPSBsaXN0LmNoaWxkcmVuKCAiOm5vdCgudWktc2NyZWVuLWhpZGRlbikiICk7CgkJCX0KCgkJCWlmICggdmFsICkgewoKCQkJCS8vIFRoaXMgaGFuZGxlcyBoaWRpbmcgcmVndWxhciByb3dzIHdpdGhvdXQgdGhlIHRleHQgd2Ugc2VhcmNoIGZvcgoJCQkJLy8gYW5kIGFueSBsaXN0IGRpdmlkZXJzIHdpdGhvdXQgcmVndWxhciByb3dzIHNob3duIHVuZGVyIGl0CgoJCQkJZm9yICggdmFyIGkgPSBsaXN0SXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7CgkJCQkJaXRlbSA9ICQoIGxpc3RJdGVtc1sgaSBdICk7CgkJCQkJaXRlbXRleHQgPSBpdGVtLmpxbURhdGEoICJmaWx0ZXJ0ZXh0IiApIHx8IGl0ZW0udGV4dCgpOwoKCQkJCQlpZiAoIGl0ZW0uaXMoICJsaTpqcW1EYXRhKHJvbGU9bGlzdC1kaXZpZGVyKSIgKSApIHsKCgkJCQkJCWl0ZW0udG9nZ2xlQ2xhc3MoICJ1aS1maWx0ZXItaGlkZXF1ZXVlIiAsICFjaGlsZEl0ZW1zICk7CgoJCQkJCQkvLyBOZXcgYnVja2V0IQoJCQkJCQljaGlsZEl0ZW1zID0gZmFsc2U7CgoJCQkJCX0gZWxzZSBpZiAoIGxpc3R2aWV3Lm9wdGlvbnMuZmlsdGVyQ2FsbGJhY2soIGl0ZW10ZXh0LCB2YWwgKSApIHsKCgkJCQkJCS8vbWFyayB0byBiZSBoaWRkZW4KCQkJCQkJaXRlbS50b2dnbGVDbGFzcyggInVpLWZpbHRlci1oaWRlcXVldWUiICwgdHJ1ZSApOwoJCQkJCX0gZWxzZSB7CgoJCQkJCQkvLyBUaGVyZSdzIGEgc2hvd24gaXRlbSBpbiB0aGUgYnVja2V0CgkJCQkJCWNoaWxkSXRlbXMgPSB0cnVlOwoJCQkJCX0KCQkJCX0KCgkJCQkvLyBTaG93IGl0ZW1zLCBub3QgbWFya2VkIHRvIGJlIGhpZGRlbgoJCQkJbGlzdEl0ZW1zCgkJCQkJLmZpbHRlciggIjpub3QoLnVpLWZpbHRlci1oaWRlcXVldWUpIiApCgkJCQkJLnRvZ2dsZUNsYXNzKCAidWktc2NyZWVuLWhpZGRlbiIsIGZhbHNlICk7CgoJCQkJLy8gSGlkZSBpdGVtcywgbWFya2VkIHRvIGJlIGhpZGRlbgoJCQkJbGlzdEl0ZW1zCgkJCQkJLmZpbHRlciggIi51aS1maWx0ZXItaGlkZXF1ZXVlIiApCgkJCQkJLnRvZ2dsZUNsYXNzKCAidWktc2NyZWVuLWhpZGRlbiIsIHRydWUgKQoJCQkJCS50b2dnbGVDbGFzcyggInVpLWZpbHRlci1oaWRlcXVldWUiLCBmYWxzZSApOwoKCQkJfSBlbHNlIHsKCgkJCQkvL2ZpbHRlcnZhbHVlIGlzIGVtcHR5ID0+IHNob3cgYWxsCgkJCQlsaXN0SXRlbXMudG9nZ2xlQ2xhc3MoICJ1aS1zY3JlZW4taGlkZGVuIiwgZmFsc2UgKTsKCQkJfQoJCQlsaXN0dmlldy5fcmVmcmVzaENvcm5lcnMoKTsKCQl9KQoJCS5hcHBlbmRUbyggd3JhcHBlciApCgkJLnRleHRpbnB1dCgpOwoKCWlmICggJCggdGhpcyApLmpxbURhdGEoICJpbnNldCIgKSApIHsKCQl3cmFwcGVyLmFkZENsYXNzKCAidWktbGlzdHZpZXctZmlsdGVyLWluc2V0IiApOwoJfQoKCXdyYXBwZXIuYmluZCggInN1Ym1pdCIsIGZ1bmN0aW9uKCkgewoJCXJldHVybiBmYWxzZTsKCX0pCgkuaW5zZXJ0QmVmb3JlKCBsaXN0ICk7Cn0pOwoKfSkoIGpRdWVyeSApOy8qCiogIm5vanMiIHBsdWdpbiAtIGNsYXNzIHRvIG1ha2UgZWxlbWVudHMgaGlkZGVuIHRvIEEgZ3JhZGUgYnJvd3NlcnMKKi8KCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZWNyZWF0ZSBjcmVhdGUiLCBmdW5jdGlvbiggZSApewoJJCggIjpqcW1EYXRhKHJvbGU9J25vanMnKSIsIGUudGFyZ2V0ICkuYWRkQ2xhc3MoICJ1aS1ub2pzIiApOwoJCn0pOwoKfSkoIGpRdWVyeSApOy8qCiogImNoZWNrYm94cmFkaW8iIHBsdWdpbgoqLwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS5jaGVja2JveHJhZGlvIiwgJC5tb2JpbGUud2lkZ2V0LCB7CglvcHRpb25zOiB7CgkJdGhlbWU6IG51bGwsCgkJaW5pdFNlbGVjdG9yOiAiaW5wdXRbdHlwZT0nY2hlY2tib3gnXSxpbnB1dFt0eXBlPSdyYWRpbyddIgoJfSwKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpcywKCQkJaW5wdXQgPSB0aGlzLmVsZW1lbnQsCgkJCS8vIE5PVEU6IFdpbmRvd3MgUGhvbmUgY291bGQgbm90IGZpbmQgdGhlIGxhYmVsIHRocm91Z2ggYSBzZWxlY3RvcgoJCQkvLyBmaWx0ZXIgd29ya3MgdGhvdWdoLgoJCQlsYWJlbCA9IGlucHV0LmNsb3Nlc3QoICJmb3JtLGZpZWxkc2V0LDpqcW1EYXRhKHJvbGU9J3BhZ2UnKSIgKS5maW5kKCAibGFiZWwiICkuZmlsdGVyKCAiW2Zvcj0nIiArIGlucHV0WyAwIF0uaWQgKyAiJ10iICksCgkJCWlucHV0dHlwZSA9IGlucHV0LmF0dHIoICJ0eXBlIiApLAoJCQljaGVja2VkU3RhdGUgPSBpbnB1dHR5cGUgKyAiLW9uIiwKCQkJdW5jaGVja2VkU3RhdGUgPSBpbnB1dHR5cGUgKyAiLW9mZiIsCgkJCWljb24gPSBpbnB1dC5wYXJlbnRzKCAiOmpxbURhdGEodHlwZT0naG9yaXpvbnRhbCcpIiApLmxlbmd0aCA/IHVuZGVmaW5lZCA6IHVuY2hlY2tlZFN0YXRlLAoJCQlhY3RpdmVCdG4gPSBpY29uID8gIiIgOiAiICIgKyAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcywKCQkJY2hlY2tlZENsYXNzID0gInVpLSIgKyBjaGVja2VkU3RhdGUgKyBhY3RpdmVCdG4sCgkJCXVuY2hlY2tlZENsYXNzID0gInVpLSIgKyB1bmNoZWNrZWRTdGF0ZSwKCQkJY2hlY2tlZGljb24gPSAidWktaWNvbi0iICsgY2hlY2tlZFN0YXRlLAoJCQl1bmNoZWNrZWRpY29uID0gInVpLWljb24tIiArIHVuY2hlY2tlZFN0YXRlOwoKCQlpZiAoIGlucHV0dHlwZSAhPT0gImNoZWNrYm94IiAmJiBpbnB1dHR5cGUgIT09ICJyYWRpbyIgKSB7CgkJCXJldHVybjsKCQl9CgoJCS8vIEV4cG9zZSBmb3Igb3RoZXIgbWV0aG9kcwoJCSQuZXh0ZW5kKCB0aGlzLCB7CgkJCWxhYmVsOiBsYWJlbCwKCQkJaW5wdXR0eXBlOiBpbnB1dHR5cGUsCgkJCWNoZWNrZWRDbGFzczogY2hlY2tlZENsYXNzLAoJCQl1bmNoZWNrZWRDbGFzczogdW5jaGVja2VkQ2xhc3MsCgkJCWNoZWNrZWRpY29uOiBjaGVja2VkaWNvbiwKCQkJdW5jaGVja2VkaWNvbjogdW5jaGVja2VkaWNvbgoJCX0pOwoKCQkvLyBJZiB0aGVyZSdzIG5vIHNlbGVjdGVkIHRoZW1lLi4uCgkJaWYoICF0aGlzLm9wdGlvbnMudGhlbWUgKSB7CgkJCXRoaXMub3B0aW9ucy50aGVtZSA9IHRoaXMuZWxlbWVudC5qcW1EYXRhKCAidGhlbWUiICk7CgkJfQoKCQlsYWJlbC5idXR0b25NYXJrdXAoewoJCQl0aGVtZTogdGhpcy5vcHRpb25zLnRoZW1lLAoJCQlpY29uOiBpY29uLAoJCQlzaGFkb3c6IGZhbHNlCgkJfSk7CgoJCS8vIFdyYXAgdGhlIGlucHV0ICsgbGFiZWwgaW4gYSBkaXYKCQlpbnB1dC5hZGQoIGxhYmVsICkKCQkJLndyYXBBbGwoICI8ZGl2IGNsYXNzPSd1aS0iICsgaW5wdXR0eXBlICsgIic+PC9kaXY+IiApOwoKCQlsYWJlbC5iaW5kKHsKCQkJdm1vdXNlb3ZlcjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJaWYgKCAkKCB0aGlzICkucGFyZW50KCkuaXMoICIudWktZGlzYWJsZWQiICkgKSB7CgkJCQkJZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CgkJCQl9CgkJCX0sCgoJCQl2Y2xpY2s6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWlmICggaW5wdXQuaXMoICI6ZGlzYWJsZWQiICkgKSB7CgkJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJc2VsZi5fY2FjaGVWYWxzKCk7CgoJCQkJaW5wdXQucHJvcCggImNoZWNrZWQiLCBpbnB1dHR5cGUgPT09ICJyYWRpbyIgJiYgdHJ1ZSB8fCAhaW5wdXQucHJvcCggImNoZWNrZWQiICkgKTsKCgkJCQkvLyB0cmlnZ2VyIGNsaWNrIGhhbmRsZXIncyBib3VuZCBkaXJlY3RseSB0byB0aGUgaW5wdXQgYXMgYSBzdWJzdGl0dXRlIGZvcgoJCQkJLy8gaG93IGxhYmVsIGNsaWNrcyBiZWhhdmUgbm9ybWFsbHkgaW4gdGhlIGJyb3dzZXJzCgkJCQkvLyBUT0RPOiBpdCB3b3VsZCBiZSBuaWNlIHRvIGxldCB0aGUgYnJvd3NlcidzIGhhbmRsZSB0aGUgY2xpY2tzIGFuZCBwYXNzIHRoZW0KCQkJCS8vICAgICAgIHRocm91Z2ggdG8gdGhlIGFzc29jaWF0ZSBpbnB1dC4gd2UgY2FuIHN3YWxsb3cgdGhhdCBjbGljayBhdCB0aGUgcGFyZW50CgkJCQkvLyAgICAgICB3cmFwcGVyIGVsZW1lbnQgbGV2ZWwKCQkJCWlucHV0LnRyaWdnZXJIYW5kbGVyKCAnY2xpY2snICk7CgoJCQkJLy8gSW5wdXQgc2V0IGZvciBjb21tb24gcmFkaW8gYnV0dG9ucyB3aWxsIGNvbnRhaW4gYWxsIHRoZSByYWRpbwoJCQkJLy8gYnV0dG9ucywgYnV0IHdpbGwgbm90IGZvciBjaGVja2JveGVzLiBjbGVhcmluZyB0aGUgY2hlY2tlZCBzdGF0dXMKCQkJCS8vIG9mIG90aGVyIHJhZGlvcyBlbnN1cmVzIHRoZSBhY3RpdmUgYnV0dG9uIHN0YXRlIGlzIGFwcGxpZWQgcHJvcGVybHkKCQkJCXNlbGYuX2dldElucHV0U2V0KCkubm90KCBpbnB1dCApLnByb3AoICJjaGVja2VkIiwgZmFsc2UgKTsKCgkJCQlzZWxmLl91cGRhdGVBbGwoKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQl9KTsKCgkJaW5wdXQKCQkJLmJpbmQoewoJCQkJdm1vdXNlZG93bjogZnVuY3Rpb24oKSB7CgkJCQkJc2VsZi5fY2FjaGVWYWxzKCk7CgkJCQl9LAoKCQkJCXZjbGljazogZnVuY3Rpb24oKSB7CgkJCQkJdmFyICR0aGlzID0gJCh0aGlzKTsKCgkJCQkJLy8gQWRkcyBjaGVja2VkIGF0dHJpYnV0ZSB0byBjaGVja2VkIGlucHV0IHdoZW4ga2V5Ym9hcmQgaXMgdXNlZAoJCQkJCWlmICggJHRoaXMuaXMoICI6Y2hlY2tlZCIgKSApIHsKCgkJCQkJCSR0aGlzLnByb3AoICJjaGVja2VkIiwgdHJ1ZSk7CgkJCQkJCXNlbGYuX2dldElucHV0U2V0KCkubm90KCR0aGlzKS5wcm9wKCAiY2hlY2tlZCIsIGZhbHNlICk7CgkJCQkJfSBlbHNlIHsKCgkJCQkJCSR0aGlzLnByb3AoICJjaGVja2VkIiwgZmFsc2UgKTsKCQkJCQl9CgoJCQkJCXNlbGYuX3VwZGF0ZUFsbCgpOwoJCQkJfSwKCgkJCQlmb2N1czogZnVuY3Rpb24oKSB7CgkJCQkJbGFiZWwuYWRkQ2xhc3MoICJ1aS1mb2N1cyIgKTsKCQkJCX0sCgoJCQkJYmx1cjogZnVuY3Rpb24oKSB7CgkJCQkJbGFiZWwucmVtb3ZlQ2xhc3MoICJ1aS1mb2N1cyIgKTsKCQkJCX0KCQkJfSk7CgoJCXRoaXMucmVmcmVzaCgpOwoJfSwKCglfY2FjaGVWYWxzOiBmdW5jdGlvbigpIHsKCQl0aGlzLl9nZXRJbnB1dFNldCgpLmVhY2goZnVuY3Rpb24oKSB7CgkJCXZhciAkdGhpcyA9ICQodGhpcyk7CgoJCQkkdGhpcy5qcW1EYXRhKCAiY2FjaGVWYWwiLCAkdGhpcy5pcyggIjpjaGVja2VkIiApICk7CgkJfSk7Cgl9LAoKCS8vcmV0dXJucyBlaXRoZXIgYSBzZXQgb2YgcmFkaW9zIHdpdGggdGhlIHNhbWUgbmFtZSBhdHRyaWJ1dGUsIG9yIGEgc2luZ2xlIGNoZWNrYm94CglfZ2V0SW5wdXRTZXQ6IGZ1bmN0aW9uKCl7CgkJaWYodGhpcy5pbnB1dHR5cGUgPT0gImNoZWNrYm94IikgewoJCQlyZXR1cm4gdGhpcy5lbGVtZW50OwoJCX0KCgkJcmV0dXJuIHRoaXMuZWxlbWVudC5jbG9zZXN0KCAiZm9ybSxmaWVsZHNldCw6anFtRGF0YShyb2xlPSdwYWdlJykiICkKCQkJLmZpbmQoICJpbnB1dFtuYW1lPSciKyB0aGlzLmVsZW1lbnQuYXR0ciggIm5hbWUiICkgKyInXVt0eXBlPSciKyB0aGlzLmlucHV0dHlwZSArIiddIiApOwoJfSwKCglfdXBkYXRlQWxsOiBmdW5jdGlvbigpIHsKCQl2YXIgc2VsZiA9IHRoaXM7CgoJCXRoaXMuX2dldElucHV0U2V0KCkuZWFjaChmdW5jdGlvbigpIHsKCQkJdmFyICR0aGlzID0gJCh0aGlzKTsKCgkJCWlmICggJHRoaXMuaXMoICI6Y2hlY2tlZCIgKSB8fCBzZWxmLmlucHV0dHlwZSA9PT0gImNoZWNrYm94IiApIHsKCQkJCSR0aGlzLnRyaWdnZXIoICJjaGFuZ2UiICk7CgkJCX0KCQl9KQoJCS5jaGVja2JveHJhZGlvKCAicmVmcmVzaCIgKTsKCX0sCgoJcmVmcmVzaDogZnVuY3Rpb24oKSB7CgkJdmFyIGlucHV0ID0gdGhpcy5lbGVtZW50LAoJCQlsYWJlbCA9IHRoaXMubGFiZWwsCgkJCWljb24gPSBsYWJlbC5maW5kKCAiLnVpLWljb24iICk7CgoJCS8vIGlucHV0WzBdLmNoZWNrZWQgZXhwYW5kbyBkb2Vzbid0IGFsd2F5cyByZXBvcnQgdGhlIHByb3BlciB2YWx1ZQoJCS8vIGZvciBjaGVja2VkPSdjaGVja2VkJwoJCWlmICggJCggaW5wdXRbIDAgXSApLnByb3AoICJjaGVja2VkIiApICkgewoKCQkJbGFiZWwuYWRkQ2xhc3MoIHRoaXMuY2hlY2tlZENsYXNzICkucmVtb3ZlQ2xhc3MoIHRoaXMudW5jaGVja2VkQ2xhc3MgKTsKCQkJaWNvbi5hZGRDbGFzcyggdGhpcy5jaGVja2VkaWNvbiApLnJlbW92ZUNsYXNzKCB0aGlzLnVuY2hlY2tlZGljb24gKTsKCgkJfSBlbHNlIHsKCgkJCWxhYmVsLnJlbW92ZUNsYXNzKCB0aGlzLmNoZWNrZWRDbGFzcyApLmFkZENsYXNzKCB0aGlzLnVuY2hlY2tlZENsYXNzICk7CgkJCWljb24ucmVtb3ZlQ2xhc3MoIHRoaXMuY2hlY2tlZGljb24gKS5hZGRDbGFzcyggdGhpcy51bmNoZWNrZWRpY29uICk7CgkJfQoKCQlpZiAoIGlucHV0LmlzKCAiOmRpc2FibGVkIiApICkgewoJCQl0aGlzLmRpc2FibGUoKTsKCQl9IGVsc2UgewoJCQl0aGlzLmVuYWJsZSgpOwoJCX0KCX0sCgoJZGlzYWJsZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5lbGVtZW50LnByb3AoICJkaXNhYmxlZCIsIHRydWUgKS5wYXJlbnQoKS5hZGRDbGFzcyggInVpLWRpc2FibGVkIiApOwoJfSwKCgllbmFibGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudC5wcm9wKCAiZGlzYWJsZWQiLCBmYWxzZSApLnBhcmVudCgpLnJlbW92ZUNsYXNzKCAidWktZGlzYWJsZWQiICk7Cgl9Cn0pOwoKLy9hdXRvIHNlbGYtaW5pdCB3aWRnZXRzCiQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKXsKCSQubW9iaWxlLmNoZWNrYm94cmFkaW8ucHJvdG90eXBlLmVuaGFuY2VXaXRoaW4oIGUudGFyZ2V0ICk7Cn0pOwoKfSkoIGpRdWVyeSApOwovKgoqICJidXR0b24iIHBsdWdpbiAtIGxpbmtzIHRoYXQgcHJveHkgdG8gbmF0aXZlIGlucHV0L2J1dHRvbnMKKi8KCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC53aWRnZXQoICJtb2JpbGUuYnV0dG9uIiwgJC5tb2JpbGUud2lkZ2V0LCB7CglvcHRpb25zOiB7CgkJdGhlbWU6IG51bGwsCgkJaWNvbjogbnVsbCwKCQlpY29ucG9zOiBudWxsLAoJCWlubGluZTogbnVsbCwKCQljb3JuZXJzOiB0cnVlLAoJCXNoYWRvdzogdHJ1ZSwKCQlpY29uc2hhZG93OiB0cnVlLAoJCWluaXRTZWxlY3RvcjogImJ1dHRvbiwgW3R5cGU9J2J1dHRvbiddLCBbdHlwZT0nc3VibWl0J10sIFt0eXBlPSdyZXNldCddLCBbdHlwZT0naW1hZ2UnXSIKCX0sCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl2YXIgJGVsID0gdGhpcy5lbGVtZW50LAoJCQlvID0gdGhpcy5vcHRpb25zLAoJCQl0eXBlLAoJCQluYW1lLAoJCQkkYnV0dG9uUGxhY2Vob2xkZXI7CgoJCS8vIGlmIHRoaXMgaXMgYSBsaW5rLCBjaGVjayBpZiBpdCdzIGJlZW4gZW5oYW5jZWQgYW5kLCBpZiBub3QsIHVzZSB0aGUgcmlnaHQgZnVuY3Rpb24KCQlpZiggJGVsWyAwIF0udGFnTmFtZSA9PT0gIkEiICkgewoJIAkgCWlmICggISRlbC5oYXNDbGFzcyggInVpLWJ0biIgKSApICRlbC5idXR0b25NYXJrdXAoKTsKCSAJIAlyZXR1cm47CiAJIAl9CgoJCS8vIEFkZCBBUklBIHJvbGUKCQl0aGlzLmJ1dHRvbiA9ICQoICI8ZGl2PjwvZGl2PiIgKQoJCQkudGV4dCggJGVsLnRleHQoKSB8fCAkZWwudmFsKCkgKQoJCQkuaW5zZXJ0QmVmb3JlKCAkZWwgKQoJCQkuYnV0dG9uTWFya3VwKHsKCQkJCXRoZW1lOiBvLnRoZW1lLAoJCQkJaWNvbjogby5pY29uLAoJCQkJaWNvbnBvczogby5pY29ucG9zLAoJCQkJaW5saW5lOiBvLmlubGluZSwKCQkJCWNvcm5lcnM6IG8uY29ybmVycywKCQkJCXNoYWRvdzogby5zaGFkb3csCgkJCQlpY29uc2hhZG93OiBvLmljb25zaGFkb3cKCQkJfSkKCQkJLmFwcGVuZCggJGVsLmFkZENsYXNzKCAidWktYnRuLWhpZGRlbiIgKSApOwoKCQl0eXBlID0gJGVsLmF0dHIoICJ0eXBlIiApOwoJCW5hbWUgPSAkZWwuYXR0ciggIm5hbWUiICk7CgoJCS8vIEFkZCBoaWRkZW4gaW5wdXQgZHVyaW5nIHN1Ym1pdCBpZiBpbnB1dCB0eXBlPSJzdWJtaXQiIGhhcyBhIG5hbWUuCgkJaWYgKCB0eXBlICE9PSAiYnV0dG9uIiAmJiB0eXBlICE9PSAicmVzZXQiICYmIG5hbWUgKSB7CgkJCQkkZWwuYmluZCggInZjbGljayIsIGZ1bmN0aW9uKCkgewoJCQkJCS8vIEFkZCBoaWRkZW4gaW5wdXQgaWYgaXQgZG9lc27igJl0IGFscmVhZHkgZXhpc3QuCgkJCQkJaWYoICRidXR0b25QbGFjZWhvbGRlciA9PT0gdW5kZWZpbmVkICkgewoJCQkJCQkkYnV0dG9uUGxhY2Vob2xkZXIgPSAkKCAiPGlucHV0PiIsIHsKCQkJCQkJCXR5cGU6ICJoaWRkZW4iLAoJCQkJCQkJbmFtZTogJGVsLmF0dHIoICJuYW1lIiApLAoJCQkJCQkJdmFsdWU6ICRlbC5hdHRyKCAidmFsdWUiICkKCQkJCQkJfSkuaW5zZXJ0QmVmb3JlKCAkZWwgKTsKCgkJCQkJCS8vIEJpbmQgdG8gZG9jIHRvIHJlbW92ZSBhZnRlciBzdWJtaXQgaGFuZGxpbmcKCQkJCQkJJCggZG9jdW1lbnQgKS5vbmUoInN1Ym1pdCIsIGZ1bmN0aW9uKCl7CgkJCQkJCQkkYnV0dG9uUGxhY2Vob2xkZXIucmVtb3ZlKCk7CgoJCQkJCQkJLy8gcmVzZXQgdGhlIGxvY2FsIHZhciBzbyB0aGF0IHRoZSBoaWRkZW4gaW5wdXQKCQkJCQkJCS8vIHdpbGwgYmUgcmUtYWRkZWQgb24gc3Vic2VxdWVudCBjbGlja3MKCQkJCQkJCSRidXR0b25QbGFjZWhvbGRlciA9IHVuZGVmaW5lZDsKCQkJCQkJfSk7CgkJCQkJfQoJCQkJfSk7CgkJfQoKCQl0aGlzLnJlZnJlc2goKTsKCX0sCgoJZW5hYmxlOiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQuYXR0ciggImRpc2FibGVkIiwgZmFsc2UgKTsKCQl0aGlzLmJ1dHRvbi5yZW1vdmVDbGFzcyggInVpLWRpc2FibGVkIiApLmF0dHIoICJhcmlhLWRpc2FibGVkIiwgZmFsc2UgKTsKCQlyZXR1cm4gdGhpcy5fc2V0T3B0aW9uKCAiZGlzYWJsZWQiLCBmYWxzZSApOwoJfSwKCglkaXNhYmxlOiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQuYXR0ciggImRpc2FibGVkIiwgdHJ1ZSApOwoJCXRoaXMuYnV0dG9uLmFkZENsYXNzKCAidWktZGlzYWJsZWQiICkuYXR0ciggImFyaWEtZGlzYWJsZWQiLCB0cnVlICk7CgkJcmV0dXJuIHRoaXMuX3NldE9wdGlvbiggImRpc2FibGVkIiwgdHJ1ZSApOwoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl2YXIgJGVsID0gdGhpcy5lbGVtZW50OwoKCQlpZiAoICRlbC5wcm9wKCJkaXNhYmxlZCIpICkgewoJCQl0aGlzLmRpc2FibGUoKTsKCQl9IGVsc2UgewoJCQl0aGlzLmVuYWJsZSgpOwoJCX0KCgkJLy8gdGhlIHRleHRXcmFwcGVyIGlzIHN0b3JlZCBhcyBhIGRhdGEgZWxlbWVudCBvbiB0aGUgYnV0dG9uIG9iamVjdAoJCS8vIHRvIHByZXZlbnQgcmVmZXJlbmNpbmcgYnkgaXQncyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIChlZyAnY2xhc3MnKQoJCXRoaXMuYnV0dG9uLmRhdGEoICd0ZXh0V3JhcHBlcicgKS50ZXh0KCAkZWwudGV4dCgpIHx8ICRlbC52YWwoKSApOwoJfQp9KTsKCi8vYXV0byBzZWxmLWluaXQgd2lkZ2V0cwokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIGNyZWF0ZSIsIGZ1bmN0aW9uKCBlICl7CgkkLm1vYmlsZS5idXR0b24ucHJvdG90eXBlLmVuaGFuY2VXaXRoaW4oIGUudGFyZ2V0ICk7Cn0pOwoKfSkoIGpRdWVyeSApOy8qCiogInNsaWRlciIgcGx1Z2luCiovCgooIGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS5zbGlkZXIiLCAkLm1vYmlsZS53aWRnZXQsIHsKCW9wdGlvbnM6IHsKCQl0aGVtZTogbnVsbCwKCQl0cmFja1RoZW1lOiBudWxsLAoJCWRpc2FibGVkOiBmYWxzZSwKCQlpbml0U2VsZWN0b3I6ICJpbnB1dFt0eXBlPSdyYW5nZSddLCA6anFtRGF0YSh0eXBlPSdyYW5nZScpLCA6anFtRGF0YShyb2xlPSdzbGlkZXInKSIKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgoJCS8vIFRPRE86IEVhY2ggb2YgdGhlc2Ugc2hvdWxkIGhhdmUgY29tbWVudHMgZXhwbGFpbiB3aGF0IHRoZXkncmUgZm9yCgkJdmFyIHNlbGYgPSB0aGlzLAoKCQkJY29udHJvbCA9IHRoaXMuZWxlbWVudCwKCgkJCXBhcmVudFRoZW1lID0gJC5tb2JpbGUuZ2V0SW5oZXJpdGVkVGhlbWUoIGNvbnRyb2wsICJjIiApLAoKCQkJdGhlbWUgPSB0aGlzLm9wdGlvbnMudGhlbWUgfHwgcGFyZW50VGhlbWUsCgoJCQl0cmFja1RoZW1lID0gdGhpcy5vcHRpb25zLnRyYWNrVGhlbWUgfHwgcGFyZW50VGhlbWUsCgoJCQljVHlwZSA9IGNvbnRyb2xbIDAgXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLAoKCQkJc2VsZWN0Q2xhc3MgPSAoIGNUeXBlID09ICJzZWxlY3QiICkgPyAidWktc2xpZGVyLXN3aXRjaCIgOiAiIiwKCgkJCWNvbnRyb2xJRCA9IGNvbnRyb2wuYXR0ciggImlkIiApLAoKCQkJbGFiZWxJRCA9IGNvbnRyb2xJRCArICItbGFiZWwiLAoKCQkJbGFiZWwgPSAkKCAiW2Zvcj0nIisgY29udHJvbElEICsiJ10iICkuYXR0ciggImlkIiwgbGFiZWxJRCApLAoKCQkJdmFsID0gZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gIGNUeXBlID09ICJpbnB1dCIgID8gcGFyc2VGbG9hdCggY29udHJvbC52YWwoKSApIDogY29udHJvbFswXS5zZWxlY3RlZEluZGV4OwoJCQl9LAoKCQkJbWluID0gIGNUeXBlID09ICJpbnB1dCIgPyBwYXJzZUZsb2F0KCBjb250cm9sLmF0dHIoICJtaW4iICkgKSA6IDAsCgoJCQltYXggPSAgY1R5cGUgPT0gImlucHV0IiA/IHBhcnNlRmxvYXQoIGNvbnRyb2wuYXR0ciggIm1heCIgKSApIDogY29udHJvbC5maW5kKCAib3B0aW9uIiApLmxlbmd0aC0xLAoKCQkJc3RlcCA9IHdpbmRvdy5wYXJzZUZsb2F0KCBjb250cm9sLmF0dHIoICJzdGVwIiApIHx8IDEgKSwKCgkJCXNsaWRlciA9ICQoICI8ZGl2IGNsYXNzPSd1aS1zbGlkZXIgIiArIHNlbGVjdENsYXNzICsgIiB1aS1idG4tZG93bi0iICsgdHJhY2tUaGVtZSArCgkJCQkJCQkJCSIgdWktYnRuLWNvcm5lci1hbGwnIHJvbGU9J2FwcGxpY2F0aW9uJz48L2Rpdj4iICksCgoJCQloYW5kbGUgPSAkKCAiPGEgaHJlZj0nIycgY2xhc3M9J3VpLXNsaWRlci1oYW5kbGUnPjwvYT4iICkKCQkJCS5hcHBlbmRUbyggc2xpZGVyICkKCQkJCS5idXR0b25NYXJrdXAoeyBjb3JuZXJzOiB0cnVlLCB0aGVtZTogdGhlbWUsIHNoYWRvdzogdHJ1ZSB9KQoJCQkJLmF0dHIoewoJCQkJCSJyb2xlIjogInNsaWRlciIsCgkJCQkJImFyaWEtdmFsdWVtaW4iOiBtaW4sCgkJCQkJImFyaWEtdmFsdWVtYXgiOiBtYXgsCgkJCQkJImFyaWEtdmFsdWVub3ciOiB2YWwoKSwKCQkJCQkiYXJpYS12YWx1ZXRleHQiOiB2YWwoKSwKCQkJCQkidGl0bGUiOiB2YWwoKSwKCQkJCQkiYXJpYS1sYWJlbGxlZGJ5IjogbGFiZWxJRAoJCQkJfSksCgkJCW9wdGlvbnM7CgoJCSQuZXh0ZW5kKCB0aGlzLCB7CgkJCXNsaWRlcjogc2xpZGVyLAoJCQloYW5kbGU6IGhhbmRsZSwKCQkJZHJhZ2dpbmc6IGZhbHNlLAoJCQliZWZvcmVTdGFydDogbnVsbCwKCQkJdXNlck1vZGlmaWVkOiBmYWxzZSwKCQkJbW91c2VNb3ZlZDogZmFsc2UKCQl9KTsKCgkJaWYgKCBjVHlwZSA9PSAic2VsZWN0IiApIHsKCgkJCXNsaWRlci53cmFwSW5uZXIoICI8ZGl2IGNsYXNzPSd1aS1zbGlkZXItaW5uZXJvZmZzZXQnPjwvZGl2PiIgKTsKCgkJCS8vIG1ha2UgdGhlIGhhbmRsZSBtb3ZlIHdpdGggYSBzbW9vdGggdHJhbnNpdGlvbgoJCQloYW5kbGUuYWRkQ2xhc3MoICJ1aS1zbGlkZXItaGFuZGxlLXNuYXBwaW5nIiApOwoKCQkJb3B0aW9ucyA9IGNvbnRyb2wuZmluZCggIm9wdGlvbiIgKTsKCgkJCWNvbnRyb2wuZmluZCggIm9wdGlvbiIgKS5lYWNoKGZ1bmN0aW9uKCBpICkgewoKCQkJCXZhciBzaWRlID0gIWkgPyAiYiI6ImEiLAoJCQkJCWNvcm5lcnMgPSAhaSA/ICJyaWdodCIgOiJsZWZ0IiwKCQkJCQl0aGVtZSA9ICFpID8gIiB1aS1idG4tZG93bi0iICsgdHJhY2tUaGVtZSA6KCAiICIgKyAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyApOwoKCQkJCSQoICI8ZGl2IGNsYXNzPSd1aS1zbGlkZXItbGFiZWxiZyB1aS1zbGlkZXItbGFiZWxiZy0iICsgc2lkZSArIHRoZW1lICsgIiB1aS1idG4tY29ybmVyLSIgKyBjb3JuZXJzICsgIic+PC9kaXY+IiApCgkJCQkJLnByZXBlbmRUbyggc2xpZGVyICk7CgoJCQkJJCggIjxzcGFuIGNsYXNzPSd1aS1zbGlkZXItbGFiZWwgdWktc2xpZGVyLWxhYmVsLSIgKyBzaWRlICsgdGhlbWUgKyAiIHVpLWJ0bi1jb3JuZXItIiArIGNvcm5lcnMgKyAiJyByb2xlPSdpbWcnPiIgKyAkKCB0aGlzICkuZ2V0RW5jb2RlZFRleHQoKSArICI8L3NwYW4+IiApCgkJCQkJLnByZXBlbmRUbyggaGFuZGxlICk7CgkJCX0pOwoKCQl9CgoJCWxhYmVsLmFkZENsYXNzKCAidWktc2xpZGVyIiApOwoKCQkvLyBtb25pdG9yIHRoZSBpbnB1dCBmb3IgdXBkYXRlZCB2YWx1ZXMKCQljb250cm9sLmFkZENsYXNzKCBjVHlwZSA9PT0gImlucHV0IiA/ICJ1aS1zbGlkZXItaW5wdXQiIDogInVpLXNsaWRlci1zd2l0Y2giICkKCQkJLmNoYW5nZSggZnVuY3Rpb24oKSB7CgkJCQkvLyBpZiB0aGUgdXNlciBkcmFnZ2VkIHRoZSBoYW5kbGUsIHRoZSAiY2hhbmdlIiBldmVudCB3YXMgdHJpZ2dlcmVkIGZyb20gaW5zaWRlIHJlZnJlc2goKTsgZG9uJ3QgY2FsbCByZWZyZXNoKCkgYWdhaW4KCQkJCWlmICghc2VsZi5tb3VzZU1vdmVkKSB7CgkJCQkJc2VsZi5yZWZyZXNoKCB2YWwoKSwgdHJ1ZSApOwoJCQkJfQoJCQl9KQoJCQkua2V5dXAoIGZ1bmN0aW9uKCkgeyAvLyBuZWNlc3Nhcnk/CgkJCQlzZWxmLnJlZnJlc2goIHZhbCgpLCB0cnVlLCB0cnVlICk7CgkJCX0pCgkJCS5ibHVyKCBmdW5jdGlvbigpIHsKCQkJCXNlbGYucmVmcmVzaCggdmFsKCksIHRydWUgKTsKCQkJfSk7CgoJCS8vIHByZXZlbnQgc2NyZWVuIGRyYWcgd2hlbiBzbGlkZXIgYWN0aXZhdGVkCgkJJCggZG9jdW1lbnQgKS5iaW5kKCAidm1vdXNlbW92ZSIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJaWYgKCBzZWxmLmRyYWdnaW5nICkgewoJCQkJLy8gc2VsZi5tb3VzZU1vdmVkIG11c3QgYmUgdXBkYXRlZCBiZWZvcmUgcmVmcmVzaCgpIGJlY2F1c2UgaXQgd2lsbCBiZSB1c2VkIGluIHRoZSBjb250cm9sICJjaGFuZ2UiIGV2ZW50CgkJCQlzZWxmLm1vdXNlTW92ZWQgPSB0cnVlOwoKCQkJCWlmICggY1R5cGUgPT09ICJzZWxlY3QiICkgewoJCQkJCS8vIG1ha2UgdGhlIGhhbmRsZSBtb3ZlIGluIHN5bmMgd2l0aCB0aGUgbW91c2UKCQkJCQloYW5kbGUucmVtb3ZlQ2xhc3MoICJ1aS1zbGlkZXItaGFuZGxlLXNuYXBwaW5nIiApOwoJCQkJfQoKCQkJCXNlbGYucmVmcmVzaCggZXZlbnQgKTsKCgkJCQkvLyBvbmx5IGFmdGVyIHJlZnJlc2goKSB5b3UgY2FuIGNhbGN1bGF0ZSBzZWxmLnVzZXJNb2RpZmllZAoJCQkJc2VsZi51c2VyTW9kaWZpZWQgPSBzZWxmLmJlZm9yZVN0YXJ0ICE9PSBjb250cm9sWzBdLnNlbGVjdGVkSW5kZXg7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQl9KTsKCgkJc2xpZGVyLmJpbmQoICJ2bW91c2Vkb3duIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQlzZWxmLmRyYWdnaW5nID0gdHJ1ZTsKCQkJc2VsZi51c2VyTW9kaWZpZWQgPSBmYWxzZTsKCQkJc2VsZi5tb3VzZU1vdmVkID0gZmFsc2U7CgoJCQlpZiAoIGNUeXBlID09PSAic2VsZWN0IiApIHsKCQkJCXNlbGYuYmVmb3JlU3RhcnQgPSBjb250cm9sWzBdLnNlbGVjdGVkSW5kZXg7CgkJCX0KCgkJCXNlbGYucmVmcmVzaCggZXZlbnQgKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0pOwoKCQlzbGlkZXIuYWRkKCBkb2N1bWVudCApCgkJCS5iaW5kKCAidm1vdXNldXAiLCBmdW5jdGlvbigpIHsKCQkJCWlmICggc2VsZi5kcmFnZ2luZyApIHsKCgkJCQkJc2VsZi5kcmFnZ2luZyA9IGZhbHNlOwoKCQkJCQlpZiAoIGNUeXBlID09PSAic2VsZWN0IikgewoKCQkJCQkJLy8gbWFrZSB0aGUgaGFuZGxlIG1vdmUgd2l0aCBhIHNtb290aCB0cmFuc2l0aW9uCgkJCQkJCWhhbmRsZS5hZGRDbGFzcyggInVpLXNsaWRlci1oYW5kbGUtc25hcHBpbmciICk7CgoJCQkJCQlpZiAoIHNlbGYubW91c2VNb3ZlZCApIHsKCgkJCQkJCQkvLyB0aGlzIGlzIGEgZHJhZywgY2hhbmdlIHRoZSB2YWx1ZSBvbmx5IGlmIHVzZXIgZHJhZ2dlZCBlbm91Z2gKCQkJCQkJCWlmICggc2VsZi51c2VyTW9kaWZpZWQgKSB7CgkJCQkJCQkJc2VsZi5yZWZyZXNoKCBzZWxmLmJlZm9yZVN0YXJ0ID09IDAgPyAxIDogMCApOwoJCQkJCQkJfQoJCQkJCQkJZWxzZSB7CgkJCQkJCQkJc2VsZi5yZWZyZXNoKCBzZWxmLmJlZm9yZVN0YXJ0ICk7CgkJCQkJCQl9CgoJCQkJCQl9CgkJCQkJCWVsc2UgewoJCQkJCQkJLy8gdGhpcyBpcyBqdXN0IGEgY2xpY2ssIGNoYW5nZSB0aGUgdmFsdWUKCQkJCQkJCXNlbGYucmVmcmVzaCggc2VsZi5iZWZvcmVTdGFydCA9PSAwID8gMSA6IDAgKTsKCQkJCQkJfQoKCQkJCQl9CgoJCQkJCXNlbGYubW91c2VNb3ZlZCA9IGZhbHNlOwoKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCX0pOwoKCQlzbGlkZXIuaW5zZXJ0QWZ0ZXIoIGNvbnRyb2wgKTsKCgkJLy8gTk9URSBmb3JjZSBmb2N1cyBvbiBoYW5kbGUKCQl0aGlzLmhhbmRsZQoJCQkuYmluZCggInZtb3VzZWRvd24iLCBmdW5jdGlvbigpIHsKCQkJCSQoIHRoaXMgKS5mb2N1cygpOwoJCQl9KQoJCQkuYmluZCggInZjbGljayIsIGZhbHNlICk7CgoJCXRoaXMuaGFuZGxlCgkJCS5iaW5kKCAia2V5ZG93biIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCXZhciBpbmRleCA9IHZhbCgpOwoKCQkJCWlmICggc2VsZi5vcHRpb25zLmRpc2FibGVkICkgewoJCQkJCXJldHVybjsKCQkJCX0KCgkJCQkvLyBJbiBhbGwgY2FzZXMgcHJldmVudCB0aGUgZGVmYXVsdCBhbmQgbWFyayB0aGUgaGFuZGxlIGFzIGFjdGl2ZQoJCQkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQkJCSBjYXNlICQubW9iaWxlLmtleUNvZGUuSE9NRToKCQkJCSBjYXNlICQubW9iaWxlLmtleUNvZGUuRU5EOgoJCQkJIGNhc2UgJC5tb2JpbGUua2V5Q29kZS5QQUdFX1VQOgoJCQkJIGNhc2UgJC5tb2JpbGUua2V5Q29kZS5QQUdFX0RPV046CgkJCQkgY2FzZSAkLm1vYmlsZS5rZXlDb2RlLlVQOgoJCQkJIGNhc2UgJC5tb2JpbGUua2V5Q29kZS5SSUdIVDoKCQkJCSBjYXNlICQubW9iaWxlLmtleUNvZGUuRE9XTjoKCQkJCSBjYXNlICQubW9iaWxlLmtleUNvZGUuTEVGVDoKCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKCQkJCQlpZiAoICFzZWxmLl9rZXlTbGlkaW5nICkgewoJCQkJCQlzZWxmLl9rZXlTbGlkaW5nID0gdHJ1ZTsKCQkJCQkJJCggdGhpcyApLmFkZENsYXNzKCAidWktc3RhdGUtYWN0aXZlIiApOwoJCQkJCX0KCQkJCQlicmVhazsKCQkJCX0KCgkJCQkvLyBtb3ZlIHRoZSBzbGlkZXIgYWNjb3JkaW5nIHRvIHRoZSBrZXlwcmVzcwoJCQkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQkJCSBjYXNlICQubW9iaWxlLmtleUNvZGUuSE9NRToKCQkJCQlzZWxmLnJlZnJlc2goIG1pbiApOwoJCQkJCWJyZWFrOwoJCQkJIGNhc2UgJC5tb2JpbGUua2V5Q29kZS5FTkQ6CgkJCQkJc2VsZi5yZWZyZXNoKCBtYXggKTsKCQkJCQlicmVhazsKCQkJCSBjYXNlICQubW9iaWxlLmtleUNvZGUuUEFHRV9VUDoKCQkJCSBjYXNlICQubW9iaWxlLmtleUNvZGUuVVA6CgkJCQkgY2FzZSAkLm1vYmlsZS5rZXlDb2RlLlJJR0hUOgoJCQkJCXNlbGYucmVmcmVzaCggaW5kZXggKyBzdGVwICk7CgkJCQkJYnJlYWs7CgkJCQkgY2FzZSAkLm1vYmlsZS5rZXlDb2RlLlBBR0VfRE9XTjoKCQkJCSBjYXNlICQubW9iaWxlLmtleUNvZGUuRE9XTjoKCQkJCSBjYXNlICQubW9iaWxlLmtleUNvZGUuTEVGVDoKCQkJCQlzZWxmLnJlZnJlc2goIGluZGV4IC0gc3RlcCApOwoJCQkJCWJyZWFrOwoJCQkJfQoJCQl9KSAvLyByZW1vdmUgYWN0aXZlIG1hcmsKCQkJLmtleXVwKCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQlpZiAoIHNlbGYuX2tleVNsaWRpbmcgKSB7CgkJCQkJc2VsZi5fa2V5U2xpZGluZyA9IGZhbHNlOwoJCQkJCSQoIHRoaXMgKS5yZW1vdmVDbGFzcyggInVpLXN0YXRlLWFjdGl2ZSIgKTsKCQkJCX0KCQkJfSk7CgoJCXRoaXMucmVmcmVzaCh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSk7Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCB2YWwsIGlzZnJvbUNvbnRyb2wsIHByZXZlbnRJbnB1dFVwZGF0ZSApIHsKCgkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy5lbGVtZW50LmF0dHIoJ2Rpc2FibGVkJykpIHsKCQkJdGhpcy5kaXNhYmxlKCk7CgkJfQoKCQl2YXIgY29udHJvbCA9IHRoaXMuZWxlbWVudCwgcGVyY2VudCwKCQkJY1R5cGUgPSBjb250cm9sWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksCgkJCW1pbiA9IGNUeXBlID09PSAiaW5wdXQiID8gcGFyc2VGbG9hdCggY29udHJvbC5hdHRyKCAibWluIiApICkgOiAwLAoJCQltYXggPSBjVHlwZSA9PT0gImlucHV0IiA/IHBhcnNlRmxvYXQoIGNvbnRyb2wuYXR0ciggIm1heCIgKSApIDogY29udHJvbC5maW5kKCAib3B0aW9uIiApLmxlbmd0aCAtIDEsCgkJCXN0ZXAgPSAoY1R5cGUgPT09ICJpbnB1dCIgJiYgcGFyc2VGbG9hdCggY29udHJvbC5hdHRyKCAic3RlcCIgKSApID4gMCkgPyBwYXJzZUZsb2F0KGNvbnRyb2wuYXR0cigic3RlcCIpKSA6IDE7CgoJCWlmICggdHlwZW9mIHZhbCA9PT0gIm9iamVjdCIgKSB7CgkJCXZhciBkYXRhID0gdmFsLAoJCQkJLy8gYSBzbGlnaHQgdG9sZXJhbmNlIGhlbHBlZCBnZXQgdG8gdGhlIGVuZHMgb2YgdGhlIHNsaWRlcgoJCQkJdG9sID0gODsKCQkJaWYgKCAhdGhpcy5kcmFnZ2luZyB8fAoJCQkJCWRhdGEucGFnZVggPCB0aGlzLnNsaWRlci5vZmZzZXQoKS5sZWZ0IC0gdG9sIHx8CgkJCQkJZGF0YS5wYWdlWCA+IHRoaXMuc2xpZGVyLm9mZnNldCgpLmxlZnQgKyB0aGlzLnNsaWRlci53aWR0aCgpICsgdG9sICkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCXBlcmNlbnQgPSBNYXRoLnJvdW5kKCAoICggZGF0YS5wYWdlWCAtIHRoaXMuc2xpZGVyLm9mZnNldCgpLmxlZnQgKSAvIHRoaXMuc2xpZGVyLndpZHRoKCkgKSAqIDEwMCApOwoJCX0gZWxzZSB7CgkJCWlmICggdmFsID09IG51bGwgKSB7CgkJCQl2YWwgPSBjVHlwZSA9PT0gImlucHV0IiA/IHBhcnNlRmxvYXQoIGNvbnRyb2wudmFsKCkgfHwgMCApIDogY29udHJvbFswXS5zZWxlY3RlZEluZGV4OwoJCQl9CgkJCXBlcmNlbnQgPSAoIHBhcnNlRmxvYXQoIHZhbCApIC0gbWluICkgLyAoIG1heCAtIG1pbiApICogMTAwOwoJCX0KCgkJaWYgKCBpc05hTiggcGVyY2VudCApICkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAoIHBlcmNlbnQgPCAwICkgewoJCQlwZXJjZW50ID0gMDsKCQl9CgoJCWlmICggcGVyY2VudCA+IDEwMCApIHsKCQkJcGVyY2VudCA9IDEwMDsKCQl9CgoJCXZhciBuZXd2YWwgPSAoIHBlcmNlbnQgLyAxMDAgKSAqICggbWF4IC0gbWluICkgKyBtaW47CgoJCS8vZnJvbSBqUXVlcnkgVUkgc2xpZGVyLCB0aGUgZm9sbG93aW5nIHNvdXJjZSB3aWxsIHJvdW5kIHRvIHRoZSBuZWFyZXN0IHN0ZXAKCQl2YXIgdmFsTW9kU3RlcCA9ICggbmV3dmFsIC0gbWluICkgJSBzdGVwOwoJCXZhciBhbGlnblZhbHVlID0gbmV3dmFsIC0gdmFsTW9kU3RlcDsKCgkJaWYgKCBNYXRoLmFicyggdmFsTW9kU3RlcCApICogMiA+PSBzdGVwICkgewoJCQlhbGlnblZhbHVlICs9ICggdmFsTW9kU3RlcCA+IDAgKSA/IHN0ZXAgOiAoIC1zdGVwICk7CgkJfQoJCS8vIFNpbmNlIEphdmFTY3JpcHQgaGFzIHByb2JsZW1zIHdpdGggbGFyZ2UgZmxvYXRzLCByb3VuZAoJCS8vIHRoZSBmaW5hbCB2YWx1ZSB0byA1IGRpZ2l0cyBhZnRlciB0aGUgZGVjaW1hbCBwb2ludCAoc2VlIGpRdWVyeVVJOiAjNDEyNCkKCQluZXd2YWwgPSBwYXJzZUZsb2F0KCBhbGlnblZhbHVlLnRvRml4ZWQoNSkgKTsKCgkJaWYgKCBuZXd2YWwgPCBtaW4gKSB7CgkJCW5ld3ZhbCA9IG1pbjsKCQl9CgoJCWlmICggbmV3dmFsID4gbWF4ICkgewoJCQluZXd2YWwgPSBtYXg7CgkJfQoKCQl0aGlzLmhhbmRsZS5jc3MoICJsZWZ0IiwgcGVyY2VudCArICIlIiApOwoJCXRoaXMuaGFuZGxlLmF0dHIoIHsKCQkJCSJhcmlhLXZhbHVlbm93IjogY1R5cGUgPT09ICJpbnB1dCIgPyBuZXd2YWwgOiBjb250cm9sLmZpbmQoICJvcHRpb24iICkuZXEoIG5ld3ZhbCApLmF0dHIoICJ2YWx1ZSIgKSwKCQkJCSJhcmlhLXZhbHVldGV4dCI6IGNUeXBlID09PSAiaW5wdXQiID8gbmV3dmFsIDogY29udHJvbC5maW5kKCAib3B0aW9uIiApLmVxKCBuZXd2YWwgKS5nZXRFbmNvZGVkVGV4dCgpLAoJCQkJdGl0bGU6IGNUeXBlID09PSAiaW5wdXQiID8gbmV3dmFsIDogY29udHJvbC5maW5kKCAib3B0aW9uIiApLmVxKCBuZXd2YWwgKS5nZXRFbmNvZGVkVGV4dCgpCgkJCX0pOwoKCQkvLyBhZGQvcmVtb3ZlIGNsYXNzZXMgZm9yIGZsaXAgdG9nZ2xlIHN3aXRjaAoJCWlmICggY1R5cGUgPT09ICJzZWxlY3QiICkgewoJCQlpZiAoIG5ld3ZhbCA9PT0gMCApIHsKCQkJCXRoaXMuc2xpZGVyLmFkZENsYXNzKCAidWktc2xpZGVyLXN3aXRjaC1hIiApCgkJCQkJLnJlbW92ZUNsYXNzKCAidWktc2xpZGVyLXN3aXRjaC1iIiApOwoJCQl9IGVsc2UgewoJCQkJdGhpcy5zbGlkZXIuYWRkQ2xhc3MoICJ1aS1zbGlkZXItc3dpdGNoLWIiICkKCQkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1zbGlkZXItc3dpdGNoLWEiICk7CgkJCX0KCQl9CgoJCWlmICggIXByZXZlbnRJbnB1dFVwZGF0ZSApIHsKCQkJdmFyIHZhbHVlQ2hhbmdlZCA9IGZhbHNlOwoKCQkJLy8gdXBkYXRlIGNvbnRyb2wicyB2YWx1ZQoJCQlpZiAoIGNUeXBlID09PSAiaW5wdXQiICkgewoJCQkJdmFsdWVDaGFuZ2VkID0gY29udHJvbC52YWwoKSAhPT0gbmV3dmFsOwoJCQkJY29udHJvbC52YWwoIG5ld3ZhbCApOwoJCQl9IGVsc2UgewoJCQkJdmFsdWVDaGFuZ2VkID0gY29udHJvbFsgMCBdLnNlbGVjdGVkSW5kZXggIT09IG5ld3ZhbDsKCQkJCWNvbnRyb2xbIDAgXS5zZWxlY3RlZEluZGV4ID0gbmV3dmFsOwoJCQl9CgkJCWlmICggIWlzZnJvbUNvbnRyb2wgJiYgdmFsdWVDaGFuZ2VkICkgewoJCQkJY29udHJvbC50cmlnZ2VyKCAiY2hhbmdlIiApOwoJCQl9CgkJfQoJfSwKCgllbmFibGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudC5hdHRyKCAiZGlzYWJsZWQiLCBmYWxzZSApOwoJCXRoaXMuc2xpZGVyLnJlbW92ZUNsYXNzKCAidWktZGlzYWJsZWQiICkuYXR0ciggImFyaWEtZGlzYWJsZWQiLCBmYWxzZSApOwoJCXJldHVybiB0aGlzLl9zZXRPcHRpb24oICJkaXNhYmxlZCIsIGZhbHNlICk7Cgl9LAoKCWRpc2FibGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudC5hdHRyKCAiZGlzYWJsZWQiLCB0cnVlICk7CgkJdGhpcy5zbGlkZXIuYWRkQ2xhc3MoICJ1aS1kaXNhYmxlZCIgKS5hdHRyKCAiYXJpYS1kaXNhYmxlZCIsIHRydWUgKTsKCQlyZXR1cm4gdGhpcy5fc2V0T3B0aW9uKCAiZGlzYWJsZWQiLCB0cnVlICk7Cgl9Cgp9KTsKCi8vYXV0byBzZWxmLWluaXQgd2lkZ2V0cwokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIGNyZWF0ZSIsIGZ1bmN0aW9uKCBlICl7CgkkLm1vYmlsZS5zbGlkZXIucHJvdG90eXBlLmVuaGFuY2VXaXRoaW4oIGUudGFyZ2V0ICk7Cn0pOwoKfSkoIGpRdWVyeSApOwovKgoqICJ0ZXh0aW5wdXQiIHBsdWdpbiBmb3IgdGV4dCBpbnB1dHMsIHRleHRhcmVhcwoqLwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS50ZXh0aW5wdXQiLCAkLm1vYmlsZS53aWRnZXQsIHsKCW9wdGlvbnM6IHsKCQl0aGVtZTogbnVsbCwKCQlpbml0U2VsZWN0b3I6ICJpbnB1dFt0eXBlPSd0ZXh0J10sIGlucHV0W3R5cGU9J3NlYXJjaCddLCA6anFtRGF0YSh0eXBlPSdzZWFyY2gnKSwgaW5wdXRbdHlwZT0nbnVtYmVyJ10sIDpqcW1EYXRhKHR5cGU9J251bWJlcicpLCBpbnB1dFt0eXBlPSdwYXNzd29yZCddLCBpbnB1dFt0eXBlPSdlbWFpbCddLCBpbnB1dFt0eXBlPSd1cmwnXSwgaW5wdXRbdHlwZT0ndGVsJ10sIHRleHRhcmVhLCBpbnB1dFt0eXBlPSd0aW1lJ10sIGlucHV0W3R5cGU9J2RhdGUnXSwgaW5wdXRbdHlwZT0nbW9udGgnXSwgaW5wdXRbdHlwZT0nd2VlayddLCBpbnB1dFt0eXBlPSdkYXRldGltZSddLCBpbnB1dFt0eXBlPSdkYXRldGltZS1sb2NhbCddLCBpbnB1dFt0eXBlPSdjb2xvciddLCBpbnB1dDpub3QoW3R5cGVdKSIKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgoJCXZhciBpbnB1dCA9IHRoaXMuZWxlbWVudCwKCQkJbyA9IHRoaXMub3B0aW9ucywKCQkJdGhlbWUgPSBvLnRoZW1lIHx8ICQubW9iaWxlLmdldEluaGVyaXRlZFRoZW1lKCB0aGlzLmVsZW1lbnQsICJjIiApLAoJCQl0aGVtZWNsYXNzICA9ICIgdWktYm9keS0iICsgdGhlbWUsCgkJCWZvY3VzZWRFbCwgY2xlYXJidG47CgoJCSQoICJsYWJlbFtmb3I9JyIgKyBpbnB1dC5hdHRyKCAiaWQiICkgKyAiJ10iICkuYWRkQ2xhc3MoICJ1aS1pbnB1dC10ZXh0IiApOwoKCQlmb2N1c2VkRWwgPSBpbnB1dC5hZGRDbGFzcygidWktaW5wdXQtdGV4dCB1aS1ib2R5LSIrIHRoZW1lICk7CgoJCS8vIFhYWDogVGVtcG9yYXJ5IHdvcmthcm91bmQgZm9yIGlzc3VlIDc4NSAoQXBwbGUgYnVnIDg5MTA1ODkpLgoJCS8vICAgICAgVHVybiBvZmYgYXV0b2NvcnJlY3QgYW5kIGF1dG9jb21wbGV0ZSBvbiBub24taU9TIDUgZGV2aWNlcwoJCS8vICAgICAgc2luY2UgdGhlIHBvcHVwIHRoZXkgdXNlIGNhbid0IGJlIGRpc21pc3NlZCBieSB0aGUgdXNlci4gTm90ZQoJCS8vICAgICAgdGhhdCB3ZSB0ZXN0IGZvciB0aGUgcHJlc2VuY2Ugb2YgdGhlIGZlYXR1cmUgYnkgbG9va2luZyBmb3IKCQkvLyAgICAgIHRoZSBhdXRvY29ycmVjdCBwcm9wZXJ0eSBvbiB0aGUgaW5wdXQgZWxlbWVudC4gV2UgY3VycmVudGx5CgkJLy8gICAgICBoYXZlIG5vIHRlc3QgZm9yIGlPUyA1IG9yIG5ld2VyIHNvIHdlJ3JlIHRlbXBvcmFyaWx5IHVzaW5nCgkJLy8gICAgICB0aGUgdG91Y2hPdmVyZmxvdyBzdXBwb3J0IGZsYWcgZm9yIGpRTSAxLjAuIFllcywgSSBmZWVsIGRpcnR5LiAtIGpibGFzCgkJaWYgKCB0eXBlb2YgaW5wdXRbMF0uYXV0b2NvcnJlY3QgIT09ICJ1bmRlZmluZWQiICYmICEkLnN1cHBvcnQudG91Y2hPdmVyZmxvdyApIHsKCQkJLy8gU2V0IHRoZSBhdHRyaWJ1dGUgaW5zdGVhZCBvZiB0aGUgcHJvcGVydHkganVzdCBpbiBjYXNlIHRoZXJlCgkJCS8vIGlzIGNvZGUgdGhhdCBhdHRlbXB0cyB0byBtYWtlIG1vZGlmaWNhdGlvbnMgdmlhIEhUTUwuCgkJCWlucHV0WzBdLnNldEF0dHJpYnV0ZSggImF1dG9jb3JyZWN0IiwgIm9mZiIgKTsKCQkJaW5wdXRbMF0uc2V0QXR0cmlidXRlKCAiYXV0b2NvbXBsZXRlIiwgIm9mZiIgKTsKCQl9CgoKCQkvLyJzZWFyY2giIGlucHV0IHdpZGdldAoJCWlmICggaW5wdXQuaXMoICJbdHlwZT0nc2VhcmNoJ10sOmpxbURhdGEodHlwZT0nc2VhcmNoJykiICkgKSB7CgoJCQlmb2N1c2VkRWwgPSBpbnB1dC53cmFwKCAiPGRpdiBjbGFzcz0ndWktaW5wdXQtc2VhcmNoIHVpLXNoYWRvdy1pbnNldCB1aS1idG4tY29ybmVyLWFsbCB1aS1idG4tc2hhZG93IHVpLWljb24tc2VhcmNoZmllbGQiICsgdGhlbWVjbGFzcyArICInPjwvZGl2PiIgKS5wYXJlbnQoKTsKCQkJY2xlYXJidG4gPSAkKCAiPGEgaHJlZj0nIycgY2xhc3M9J3VpLWlucHV0LWNsZWFyJyB0aXRsZT0nY2xlYXIgdGV4dCc+Y2xlYXIgdGV4dDwvYT4iICkKCQkJCS50YXAoZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCWlucHV0LnZhbCggIiIgKS5mb2N1cygpOwoJCQkJCWlucHV0LnRyaWdnZXIoICJjaGFuZ2UiICk7CgkJCQkJY2xlYXJidG4uYWRkQ2xhc3MoICJ1aS1pbnB1dC1jbGVhci1oaWRkZW4iICk7CgkJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCX0pCgkJCQkuYXBwZW5kVG8oIGZvY3VzZWRFbCApCgkJCQkuYnV0dG9uTWFya3VwKHsKCQkJCQlpY29uOiAiZGVsZXRlIiwKCQkJCQlpY29ucG9zOiAibm90ZXh0IiwKCQkJCQljb3JuZXJzOiB0cnVlLAoJCQkJCXNoYWRvdzogdHJ1ZQoJCQkJfSk7CgoJCQlmdW5jdGlvbiB0b2dnbGVDbGVhcigpIHsKCQkJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgkJCQkJY2xlYXJidG4udG9nZ2xlQ2xhc3MoICJ1aS1pbnB1dC1jbGVhci1oaWRkZW4iLCAhaW5wdXQudmFsKCkgKTsKCQkJCX0sIDApOwoJCQl9CgoJCQl0b2dnbGVDbGVhcigpOwoKCQkJaW5wdXQuYmluZCgncGFzdGUgY3V0IGtleXVwIGZvY3VzIGNoYW5nZSBibHVyJywgdG9nZ2xlQ2xlYXIpOwoKCQl9IGVsc2UgewoJCQlpbnB1dC5hZGRDbGFzcyggInVpLWNvcm5lci1hbGwgdWktc2hhZG93LWluc2V0IiArIHRoZW1lY2xhc3MgKTsKCQl9CgoJCWlucHV0LmZvY3VzKGZ1bmN0aW9uKCkgewoJCQkJZm9jdXNlZEVsLmFkZENsYXNzKCAidWktZm9jdXMiICk7CgkJCX0pCgkJCS5ibHVyKGZ1bmN0aW9uKCl7CgkJCQlmb2N1c2VkRWwucmVtb3ZlQ2xhc3MoICJ1aS1mb2N1cyIgKTsKCQkJfSk7CgoJCS8vIEF1dG9ncm93CgkJaWYgKCBpbnB1dC5pcyggInRleHRhcmVhIiApICkgewoJCQl2YXIgZXh0cmFMaW5lSGVpZ2h0ID0gMTUsCgkJCQlrZXl1cFRpbWVvdXRCdWZmZXIgPSAxMDAsCgkJCQlrZXl1cCA9IGZ1bmN0aW9uKCkgewoJCQkJCXZhciBzY3JvbGxIZWlnaHQgPSBpbnB1dFsgMCBdLnNjcm9sbEhlaWdodCwKCQkJCQkJY2xpZW50SGVpZ2h0ID0gaW5wdXRbIDAgXS5jbGllbnRIZWlnaHQ7CgoJCQkJCWlmICggY2xpZW50SGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0ICkgewoJCQkJCQlpbnB1dC5oZWlnaHQoc2Nyb2xsSGVpZ2h0ICsgZXh0cmFMaW5lSGVpZ2h0KTsKCQkJCQl9CgkJCQl9LAoJCQkJa2V5dXBUaW1lb3V0OwoKCQkJaW5wdXQua2V5dXAoZnVuY3Rpb24oKSB7CgkJCQljbGVhclRpbWVvdXQoIGtleXVwVGltZW91dCApOwoJCQkJa2V5dXBUaW1lb3V0ID0gc2V0VGltZW91dCgga2V5dXAsIGtleXVwVGltZW91dEJ1ZmZlciApOwoJCQl9KTsKCgkJCS8vIGJpbmRpbmcgdG8gcGFnZWNoYW5nZSBoZXJlIGVuc3VyZXMgdGhhdCBmb3IgcGFnZXMgbG9hZGVkIHZpYQoJCQkvLyBhamF4IHRoZSBoZWlnaHQgaXMgcmVjYWxjdWxhdGVkIHdpdGhvdXQgdXNlciBpbnB1dAoJCQkkKCBkb2N1bWVudCApLm9uZSggInBhZ2VjaGFuZ2UiLCBrZXl1cCApOwoKCQkJLy8gSXNzdWUgNTA5OiB0aGUgYnJvd3NlciBpcyBub3QgcHJvdmlkaW5nIHNjcm9sbEhlaWdodCBwcm9wZXJseSB1bnRpbCB0aGUgc3R5bGVzIGxvYWQKCQkJaWYgKCAkLnRyaW0oIGlucHV0LnZhbCgpICkgKSB7CgkJCQkvLyBiaW5kIHRvIHRoZSB3aW5kb3cgbG9hZCB0byBtYWtlIHN1cmUgdGhlIGhlaWdodCBpcyBjYWxjdWxhdGVkIGJhc2VkIG9uIEJPVEgKCQkJCS8vIHRoZSBET00gYW5kIENTUwoJCQkJJCggd2luZG93ICkubG9hZCgga2V5dXAgKTsKCQkJfQoJCX0KCX0sCgoJZGlzYWJsZTogZnVuY3Rpb24oKXsKCQkoIHRoaXMuZWxlbWVudC5hdHRyKCAiZGlzYWJsZWQiLCB0cnVlICkuaXMoICJbdHlwZT0nc2VhcmNoJ10sOmpxbURhdGEodHlwZT0nc2VhcmNoJykiICkgPwoJCQl0aGlzLmVsZW1lbnQucGFyZW50KCkgOiB0aGlzLmVsZW1lbnQgKS5hZGRDbGFzcyggInVpLWRpc2FibGVkIiApOwoJfSwKCgllbmFibGU6IGZ1bmN0aW9uKCl7CgkJKCB0aGlzLmVsZW1lbnQuYXR0ciggImRpc2FibGVkIiwgZmFsc2UpLmlzKCAiW3R5cGU9J3NlYXJjaCddLDpqcW1EYXRhKHR5cGU9J3NlYXJjaCcpIiApID8KCQkJdGhpcy5lbGVtZW50LnBhcmVudCgpIDogdGhpcy5lbGVtZW50ICkucmVtb3ZlQ2xhc3MoICJ1aS1kaXNhYmxlZCIgKTsKCX0KfSk7CgovL2F1dG8gc2VsZi1pbml0IHdpZGdldHMKJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZWNyZWF0ZSBjcmVhdGUiLCBmdW5jdGlvbiggZSApewoJJC5tb2JpbGUudGV4dGlucHV0LnByb3RvdHlwZS5lbmhhbmNlV2l0aGluKCBlLnRhcmdldCApOwp9KTsKCn0pKCBqUXVlcnkgKTsKLyoKKiBjdXN0b20gInNlbGVjdG1lbnUiIHBsdWdpbgoqLwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgl2YXIgZXh0ZW5kU2VsZWN0ID0gZnVuY3Rpb24oIHdpZGdldCApewoKCQl2YXIgc2VsZWN0ID0gd2lkZ2V0LnNlbGVjdCwKCQkJc2VsZWN0SUQgID0gd2lkZ2V0LnNlbGVjdElELAoJCQlsYWJlbCA9IHdpZGdldC5sYWJlbCwKCQkJdGhpc1BhZ2UgPSB3aWRnZXQuc2VsZWN0LmNsb3Nlc3QoICIudWktcGFnZSIgKSwKCQkJc2NyZWVuID0gJCggIjxkaXY+IiwgeyJjbGFzcyI6ICJ1aS1zZWxlY3RtZW51LXNjcmVlbiB1aS1zY3JlZW4taGlkZGVuIn0gKS5hcHBlbmRUbyggdGhpc1BhZ2UgKSwKCQkJc2VsZWN0T3B0aW9ucyA9IHdpZGdldC5fc2VsZWN0T3B0aW9ucygpLAoJCQlpc011bHRpcGxlID0gd2lkZ2V0LmlzTXVsdGlwbGUgPSB3aWRnZXQuc2VsZWN0WyAwIF0ubXVsdGlwbGUsCgkJCWJ1dHRvbklkID0gc2VsZWN0SUQgKyAiLWJ1dHRvbiIsCgkJCW1lbnVJZCA9IHNlbGVjdElEICsgIi1tZW51IiwKCQkJbWVudVBhZ2UgPSAkKCAiPGRpdiBkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyb2xlPSdkaWFsb2cnIGRhdGEtIiArJC5tb2JpbGUubnMgKyAidGhlbWU9JyIrIHdpZGdldC5vcHRpb25zLnRoZW1lICsiJyBkYXRhLSIgKyQubW9iaWxlLm5zICsgIm92ZXJsYXktdGhlbWU9JyIrIHdpZGdldC5vcHRpb25zLm92ZXJsYXlUaGVtZSArIic+IiArCgkJCQkiPGRpdiBkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyb2xlPSdoZWFkZXInPiIgKwoJCQkJIjxkaXYgY2xhc3M9J3VpLXRpdGxlJz4iICsgbGFiZWwuZ2V0RW5jb2RlZFRleHQoKSArICI8L2Rpdj4iKwoJCQkJIjwvZGl2PiIrCgkJCQkiPGRpdiBkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyb2xlPSdjb250ZW50Jz48L2Rpdj4iKwoJCQkJIjwvZGl2PiIgKS5hcHBlbmRUbyggJC5tb2JpbGUucGFnZUNvbnRhaW5lciApLnBhZ2UoKSwKCgkJCWxpc3Rib3ggPSAgJCgiPGRpdj4iLCB7ICJjbGFzcyI6ICJ1aS1zZWxlY3RtZW51IHVpLXNlbGVjdG1lbnUtaGlkZGVuIHVpLW92ZXJsYXktc2hhZG93IHVpLWNvcm5lci1hbGwgdWktYm9keS0iICsgd2lkZ2V0Lm9wdGlvbnMub3ZlcmxheVRoZW1lICsgIiAiICsgJC5tb2JpbGUuZGVmYXVsdERpYWxvZ1RyYW5zaXRpb24gfSApLmluc2VydEFmdGVyKHNjcmVlbiksCgoJCQlsaXN0ID0gJCggIjx1bD4iLCB7CgkJCQkiY2xhc3MiOiAidWktc2VsZWN0bWVudS1saXN0IiwKCQkJCSJpZCI6IG1lbnVJZCwKCQkJCSJyb2xlIjogImxpc3Rib3giLAoJCQkJImFyaWEtbGFiZWxsZWRieSI6IGJ1dHRvbklkCgkJCX0pLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJ0aGVtZSIsIHdpZGdldC5vcHRpb25zLnRoZW1lICkuYXBwZW5kVG8oIGxpc3Rib3ggKSwKCgkJCWhlYWRlciA9ICQoICI8ZGl2PiIsIHsKCQkJCSJjbGFzcyI6ICJ1aS1oZWFkZXIgdWktYmFyLSIgKyB3aWRnZXQub3B0aW9ucy50aGVtZQoJCQl9KS5wcmVwZW5kVG8oIGxpc3Rib3ggKSwKCgkJCWhlYWRlclRpdGxlID0gJCggIjxoMT4iLCB7CgkJCQkiY2xhc3MiOiAidWktdGl0bGUiCgkJCX0pLmFwcGVuZFRvKCBoZWFkZXIgKSwKCgkJCWhlYWRlckNsb3NlID0gJCggIjxhPiIsIHsKCQkJCSJ0ZXh0Ijogd2lkZ2V0Lm9wdGlvbnMuY2xvc2VUZXh0LAoJCQkJImhyZWYiOiAiIyIsCgkJCQkiY2xhc3MiOiAidWktYnRuLWxlZnQiCgkJCX0pLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJpY29ucG9zIiwgIm5vdGV4dCIgKS5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAiaWNvbiIsICJkZWxldGUiICkuYXBwZW5kVG8oIGhlYWRlciApLmJ1dHRvbk1hcmt1cCgpLAoKCQkJbWVudVBhZ2VDb250ZW50ID0gbWVudVBhZ2UuZmluZCggIi51aS1jb250ZW50IiApLAoKCQkJbWVudVBhZ2VDbG9zZSA9IG1lbnVQYWdlLmZpbmQoICIudWktaGVhZGVyIGEiICk7CgoKCQkkLmV4dGVuZCggd2lkZ2V0LCB7CgkJCXNlbGVjdDogd2lkZ2V0LnNlbGVjdCwKCQkJc2VsZWN0SUQ6IHNlbGVjdElELAoJCQlidXR0b25JZDogYnV0dG9uSWQsCgkJCW1lbnVJZDogbWVudUlkLAoJCQl0aGlzUGFnZTogdGhpc1BhZ2UsCgkJCW1lbnVQYWdlOiBtZW51UGFnZSwKCQkJbGFiZWw6IGxhYmVsLAoJCQlzY3JlZW46IHNjcmVlbiwKCQkJc2VsZWN0T3B0aW9uczogc2VsZWN0T3B0aW9ucywKCQkJaXNNdWx0aXBsZTogaXNNdWx0aXBsZSwKCQkJdGhlbWU6IHdpZGdldC5vcHRpb25zLnRoZW1lLAoJCQlsaXN0Ym94OiBsaXN0Ym94LAoJCQlsaXN0OiBsaXN0LAoJCQloZWFkZXI6IGhlYWRlciwKCQkJaGVhZGVyVGl0bGU6IGhlYWRlclRpdGxlLAoJCQloZWFkZXJDbG9zZTogaGVhZGVyQ2xvc2UsCgkJCW1lbnVQYWdlQ29udGVudDogbWVudVBhZ2VDb250ZW50LAoJCQltZW51UGFnZUNsb3NlOiBtZW51UGFnZUNsb3NlLAoJCQlwbGFjZWhvbGRlcjogIiIsCgoJCQlidWlsZDogZnVuY3Rpb24oKSB7CgkJCQl2YXIgc2VsZiA9IHRoaXM7CgoJCQkJLy8gQ3JlYXRlIGxpc3QgZnJvbSBzZWxlY3QsIHVwZGF0ZSBzdGF0ZQoJCQkJc2VsZi5yZWZyZXNoKCk7CgoJCQkJc2VsZi5zZWxlY3QuYXR0ciggInRhYmluZGV4IiwgIi0xIiApLmZvY3VzKGZ1bmN0aW9uKCkgewoJCQkJCSQoIHRoaXMgKS5ibHVyKCk7CgkJCQkJc2VsZi5idXR0b24uZm9jdXMoKTsKCQkJCX0pOwoKCQkJCS8vIEJ1dHRvbiBldmVudHMKCQkJCXNlbGYuYnV0dG9uLmJpbmQoICJ2Y2xpY2sga2V5ZG93biIgLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJaWYgKCBldmVudC50eXBlID09ICJ2Y2xpY2siIHx8CgkJCQkJCQkgZXZlbnQua2V5Q29kZSAmJiAoIGV2ZW50LmtleUNvZGUgPT09ICQubW9iaWxlLmtleUNvZGUuRU5URVIgfHwKCQkJCQkJCQkJCQkJCQkJCQlldmVudC5rZXlDb2RlID09PSAkLm1vYmlsZS5rZXlDb2RlLlNQQUNFICkgKSB7CgoJCQkJCQlzZWxmLm9wZW4oKTsKCQkJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCQl9CgkJCQl9KTsKCgkJCQkvLyBFdmVudHMgZm9yIGxpc3QgaXRlbXMKCQkJCXNlbGYubGlzdC5hdHRyKCAicm9sZSIsICJsaXN0Ym94IiApCgkJCQkJLmRlbGVnYXRlKCAiLnVpLWxpPmEiLCAiZm9jdXNpbiIsIGZ1bmN0aW9uKCkgewoJCQkJCQkkKCB0aGlzICkuYXR0ciggInRhYmluZGV4IiwgIjAiICk7CgkJCQkJfSkKCQkJCQkuZGVsZWdhdGUoICIudWktbGk+YSIsICJmb2N1c291dCIsIGZ1bmN0aW9uKCkgewoJCQkJCQkkKCB0aGlzICkuYXR0ciggInRhYmluZGV4IiwgIi0xIiApOwoJCQkJCX0pCgkJCQkJLmRlbGVnYXRlKCAibGk6bm90KC51aS1kaXNhYmxlZCwgLnVpLWxpLWRpdmlkZXIpIiwgImNsaWNrIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoKCQkJCQkJLy8gaW5kZXggb2Ygb3B0aW9uIHRhZyB0byBiZSBzZWxlY3RlZAoJCQkJCQl2YXIgb2xkSW5kZXggPSBzZWxmLnNlbGVjdFsgMCBdLnNlbGVjdGVkSW5kZXgsCgkJCQkJCQluZXdJbmRleCA9IHNlbGYubGlzdC5maW5kKCAibGk6bm90KC51aS1saS1kaXZpZGVyKSIgKS5pbmRleCggdGhpcyApLAoJCQkJCQkJb3B0aW9uID0gc2VsZi5fc2VsZWN0T3B0aW9ucygpLmVxKCBuZXdJbmRleCApWyAwIF07CgoJCQkJCQkvLyB0b2dnbGUgc2VsZWN0ZWQgc3RhdHVzIG9uIHRoZSB0YWcgZm9yIG11bHRpIHNlbGVjdHMKCQkJCQkJb3B0aW9uLnNlbGVjdGVkID0gc2VsZi5pc011bHRpcGxlID8gIW9wdGlvbi5zZWxlY3RlZCA6IHRydWU7CgoJCQkJCQkvLyB0b2dnbGUgY2hlY2tib3ggY2xhc3MgZm9yIG11bHRpcGxlIHNlbGVjdHMKCQkJCQkJaWYgKCBzZWxmLmlzTXVsdGlwbGUgKSB7CgkJCQkJCQkkKCB0aGlzICkuZmluZCggIi51aS1pY29uIiApCgkJCQkJCQkJLnRvZ2dsZUNsYXNzKCAidWktaWNvbi1jaGVja2JveC1vbiIsIG9wdGlvbi5zZWxlY3RlZCApCgkJCQkJCQkJLnRvZ2dsZUNsYXNzKCAidWktaWNvbi1jaGVja2JveC1vZmYiLCAhb3B0aW9uLnNlbGVjdGVkICk7CgkJCQkJCX0KCgkJCQkJCS8vIHRyaWdnZXIgY2hhbmdlIGlmIHZhbHVlIGNoYW5nZWQKCQkJCQkJaWYgKCBzZWxmLmlzTXVsdGlwbGUgfHwgb2xkSW5kZXggIT09IG5ld0luZGV4ICkgewoJCQkJCQkJc2VsZi5zZWxlY3QudHJpZ2dlciggImNoYW5nZSIgKTsKCQkJCQkJfQoKCQkJCQkJLy9oaWRlIGN1c3RvbSBzZWxlY3QgZm9yIHNpbmdsZSBzZWxlY3RzIG9ubHkKCQkJCQkJaWYgKCAhc2VsZi5pc011bHRpcGxlICkgewoJCQkJCQkJc2VsZi5jbG9zZSgpOwoJCQkJCQl9CgoJCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCX0pCgkJCQkJLmtleWRvd24oZnVuY3Rpb24oIGV2ZW50ICkgeyAgLy9rZXlib2FyZCBldmVudHMgZm9yIG1lbnUgaXRlbXMKCQkJCQkJdmFyIHRhcmdldCA9ICQoIGV2ZW50LnRhcmdldCApLAoJCQkJCQkJbGkgPSB0YXJnZXQuY2xvc2VzdCggImxpIiApLAoJCQkJCQkJcHJldiwgbmV4dDsKCgkJCQkJCS8vIHN3aXRjaCBsb2dpYyBiYXNlZCBvbiB3aGljaCBrZXkgd2FzIHByZXNzZWQKCQkJCQkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQkJCQkJCS8vIHVwIG9yIGxlZnQgYXJyb3cga2V5cwoJCQkJCQkgY2FzZSAzODoKCQkJCQkJCXByZXYgPSBsaS5wcmV2KCk7CgoJCQkJCQkJLy8gaWYgdGhlcmUncyBhIHByZXZpb3VzIG9wdGlvbiwgZm9jdXMgaXQKCQkJCQkJCWlmICggcHJldi5sZW5ndGggKSB7CgkJCQkJCQkJdGFyZ2V0CgkJCQkJCQkJCS5ibHVyKCkKCQkJCQkJCQkJLmF0dHIoICJ0YWJpbmRleCIsICItMSIgKTsKCgkJCQkJCQkJcHJldi5maW5kKCAiYSIgKS5maXJzdCgpLmZvY3VzKCk7CgkJCQkJCQl9CgoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQkJYnJlYWs7CgoJCQkJCQkJLy8gZG93biBvciByaWdodCBhcnJvdyBrZXlzCgkJCQkJCSBjYXNlIDQwOgoJCQkJCQkJbmV4dCA9IGxpLm5leHQoKTsKCgkJCQkJCQkvLyBpZiB0aGVyZSdzIGEgbmV4dCBvcHRpb24sIGZvY3VzIGl0CgkJCQkJCQlpZiAoIG5leHQubGVuZ3RoICkgewoJCQkJCQkJCXRhcmdldAoJCQkJCQkJCQkuYmx1cigpCgkJCQkJCQkJCS5hdHRyKCAidGFiaW5kZXgiLCAiLTEiICk7CgoJCQkJCQkJCW5leHQuZmluZCggImEiICkuZmlyc3QoKS5mb2N1cygpOwoJCQkJCQkJfQoKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJCWJyZWFrOwoKCQkJCQkJCS8vIElmIGVudGVyIG9yIHNwYWNlIGlzIHByZXNzZWQsIHRyaWdnZXIgY2xpY2sKCQkJCQkJIGNhc2UgMTM6CgkJCQkJCSBjYXNlIDMyOgoJCQkJCQkJdGFyZ2V0LnRyaWdnZXIoICJjbGljayIgKTsKCgkJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJCQlicmVhazsKCQkJCQkJfQoJCQkJCX0pOwoKCQkJCS8vIGJ1dHRvbiByZWZvY3VzIGVuc3VyZXMgcHJvcGVyIGhlaWdodCBjYWxjdWxhdGlvbgoJCQkJLy8gYnkgcmVtb3ZpbmcgdGhlIGlubGluZSBzdHlsZSBhbmQgZW5zdXJpbmcgcGFnZSBpbmNsdXNpb24KCQkJCXNlbGYubWVudVBhZ2UuYmluZCggInBhZ2VoaWRlIiwgZnVuY3Rpb24oKSB7CgkJCQkJc2VsZi5saXN0LmFwcGVuZFRvKCBzZWxmLmxpc3Rib3ggKTsKCQkJCQlzZWxmLl9mb2N1c0J1dHRvbigpOwoKCQkJCQkvLyBUT0RPIGNlbnRyYWxpemUgcGFnZSByZW1vdmFsIGJpbmRpbmcgLyBoYW5kbGluZyBpbiB0aGUgcGFnZSBwbHVnaW4uCgkJCQkJLy8gU3VnZ2VzdGlvbiBmcm9tIEBqYmxhcyB0byBkbyByZWZjb3VudGluZwoJCQkJCS8vCgkJCQkJLy8gVE9ETyBleHRyZW1lbHkgY29uZnVzaW5nIGRlcGVuZGVuY3kgb24gdGhlIG9wZW4gbWV0aG9kIHdoZXJlIHRoZSBwYWdlaGlkZS5yZW1vdmUKCQkJCQkvLyBiaW5kaW5ncyBhcmUgc3RyaXBwZWQgdG8gcHJldmVudCB0aGUgcGFyZW50IHBhZ2UgZnJvbSBkaXNhcHBlYXJpbmcuIFRoZSB3YXkKCQkJCQkvLyB3ZSdyZSBrZWVwaW5nIHBhZ2VzIGluIHRoZSBET00gcmlnaHQgbm93IHN1Y2tzCgkJCQkJLy8KCQkJCQkvLyByZWJpbmQgdGhlIHBhZ2UgcmVtb3ZlIHRoYXQgd2FzIHVuYm91bmQgaW4gdGhlIG9wZW4gZnVuY3Rpb24KCQkJCQkvLyB0byBhbGxvdyBmb3IgdGhlIHBhcmVudCBwYWdlIHJlbW92YWwgZnJvbSBhY3Rpb25zIG90aGVyIHRoYW4gdGhlIHVzZQoJCQkJCS8vIG9mIGEgZGlhbG9nIHNpemVkIGN1c3RvbSBzZWxlY3QKCQkJCQkvLwoJCQkJCS8vIGRvaW5nIHRoaXMgaGVyZSBwcm92aWRlcyBmb3IgdGhlIGJhY2sgYnV0dG9uIG9uIHRoZSBjdXN0b20gc2VsZWN0IGRpYWxvZwoJCQkJCSQubW9iaWxlLl9iaW5kUGFnZVJlbW92ZS5jYWxsKCBzZWxmLnRoaXNQYWdlICk7CgkJCQl9KTsKCgkJCQkvLyBFdmVudHMgb24gInNjcmVlbiIgb3ZlcmxheQoJCQkJc2VsZi5zY3JlZW4uYmluZCggInZjbGljayIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQlzZWxmLmNsb3NlKCk7CgkJCQl9KTsKCgkJCQkvLyBDbG9zZSBidXR0b24gb24gc21hbGwgb3ZlcmxheXMKCQkJCXNlbGYuaGVhZGVyQ2xvc2UuY2xpY2soIGZ1bmN0aW9uKCkgewoJCQkJCWlmICggc2VsZi5tZW51VHlwZSA9PSAib3ZlcmxheSIgKSB7CgkJCQkJCXNlbGYuY2xvc2UoKTsKCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCX0KCQkJCX0pOwoKCQkJCS8vIHRyYWNrIHRoaXMgZGVwZW5kZW5jeSBzbyB0aGF0IHdoZW4gdGhlIHBhcmVudCBwYWdlCgkJCQkvLyBpcyByZW1vdmVkIG9uIHBhZ2VoaWRlIGl0IHdpbGwgYWxzbyByZW1vdmUgdGhlIG1lbnVwYWdlCgkJCQlzZWxmLnRoaXNQYWdlLmFkZERlcGVuZGVudHMoIHRoaXMubWVudVBhZ2UgKTsKCQkJfSwKCgkJCV9pc1JlYnVpbGRSZXF1aXJlZDogZnVuY3Rpb24oKSB7CgkJCQl2YXIgbGlzdCA9IHRoaXMubGlzdC5maW5kKCAibGkiICksCgkJCQkJb3B0aW9ucyA9IHRoaXMuX3NlbGVjdE9wdGlvbnMoKTsKCgkJCQkvLyBUT0RPIGV4Y2VlZGluZ2x5IG5haXZlIG1ldGhvZCB0byBkZXRlcm1pbmUgZGlmZmVyZW5jZQoJCQkJLy8gaWdub3JlcyB2YWx1ZSBjaGFuZ2VzIGV0YyBpbiBmYXZvciBvZiBhIGZvcmNlZFJlYnVpbGQKCQkJCS8vIGZyb20gdGhlIHVzZXIgaW4gdGhlIHJlZnJlc2ggbWV0aG9kCgkJCQlyZXR1cm4gb3B0aW9ucy50ZXh0KCkgIT09IGxpc3QudGV4dCgpOwoJCQl9LAoKCQkJcmVmcmVzaDogZnVuY3Rpb24oIGZvcmNlUmVidWlsZCAsIGZvbyApewoJCQkJdmFyIHNlbGYgPSB0aGlzLAoJCQkJc2VsZWN0ID0gdGhpcy5lbGVtZW50LAoJCQkJaXNNdWx0aXBsZSA9IHRoaXMuaXNNdWx0aXBsZSwKCQkJCW9wdGlvbnMgPSB0aGlzLl9zZWxlY3RPcHRpb25zKCksCgkJCQlzZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWQoKSwKCQkJCS8vIHJldHVybiBhbiBhcnJheSBvZiBhbGwgc2VsZWN0ZWQgaW5kZXgncwoJCQkJaW5kaWNpZXMgPSB0aGlzLnNlbGVjdGVkSW5kaWNlcygpOwoKCQkJCWlmICggIGZvcmNlUmVidWlsZCB8fCB0aGlzLl9pc1JlYnVpbGRSZXF1aXJlZCgpICkgewoJCQkJCXNlbGYuX2J1aWxkTGlzdCgpOwoJCQkJfQoKCQkJCXNlbGYuc2V0QnV0dG9uVGV4dCgpOwoJCQkJc2VsZi5zZXRCdXR0b25Db3VudCgpOwoKCQkJCXNlbGYubGlzdC5maW5kKCAibGk6bm90KC51aS1saS1kaXZpZGVyKSIgKQoJCQkJCS5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKQoJCQkJCS5hdHRyKCAiYXJpYS1zZWxlY3RlZCIsIGZhbHNlICkKCQkJCQkuZWFjaChmdW5jdGlvbiggaSApIHsKCgkJCQkJCWlmICggJC5pbkFycmF5KCBpLCBpbmRpY2llcyApID4gLTEgKSB7CgkJCQkJCQl2YXIgaXRlbSA9ICQoIHRoaXMgKTsKCgkJCQkJCQkvLyBBcmlhIHNlbGVjdGVkIGF0dHIKCQkJCQkJCWl0ZW0uYXR0ciggImFyaWEtc2VsZWN0ZWQiLCB0cnVlICk7CgoJCQkJCQkJLy8gTXVsdGlwbGUgc2VsZWN0czogYWRkIHRoZSAib24iIGNoZWNrYm94IHN0YXRlIHRvIHRoZSBpY29uCgkJCQkJCQlpZiAoIHNlbGYuaXNNdWx0aXBsZSApIHsKCQkJCQkJCQlpdGVtLmZpbmQoICIudWktaWNvbiIgKS5yZW1vdmVDbGFzcyggInVpLWljb24tY2hlY2tib3gtb2ZmIiApLmFkZENsYXNzKCAidWktaWNvbi1jaGVja2JveC1vbiIgKTsKCQkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJaXRlbS5hZGRDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0pOwoJCQl9LAoKCQkJY2xvc2U6IGZ1bmN0aW9uKCkgewoJCQkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgIXRoaXMuaXNPcGVuICkgewoJCQkJCXJldHVybjsKCQkJCX0KCgkJCQl2YXIgc2VsZiA9IHRoaXM7CgoJCQkJaWYgKCBzZWxmLm1lbnVUeXBlID09ICJwYWdlIiApIHsKCQkJCQkvLyBkb2Vzbid0IHNvbHZlIHRoZSBwb3NzaWJsZSBpc3N1ZSB3aXRoIGNhbGxpbmcgY2hhbmdlIHBhZ2UKCQkJCQkvLyB3aGVyZSB0aGUgb2JqZWN0cyBkb24ndCBkZWZpbmUgZGF0YSB1cmxzIHdoaWNoIHByZXZlbnRzIGRpYWxvZyBrZXkKCQkJCQkvLyBzdHJpcHBpbmcgLSBjaGFuZ2VQYWdlIGhhcyBpbmNvbWluZyByZWZhY3RvcgoJCQkJCXdpbmRvdy5oaXN0b3J5LmJhY2soKTsKCQkJCX0gZWxzZSB7CgkJCQkJc2VsZi5zY3JlZW4uYWRkQ2xhc3MoICJ1aS1zY3JlZW4taGlkZGVuIiApOwoJCQkJCXNlbGYubGlzdGJveC5hZGRDbGFzcyggInVpLXNlbGVjdG1lbnUtaGlkZGVuIiApLnJlbW92ZUF0dHIoICJzdHlsZSIgKS5yZW1vdmVDbGFzcyggImluIiApOwoJCQkJCXNlbGYubGlzdC5hcHBlbmRUbyggc2VsZi5saXN0Ym94ICk7CgkJCQkJc2VsZi5fZm9jdXNCdXR0b24oKTsKCQkJCX0KCgkJCQkvLyBhbGxvdyB0aGUgZGlhbG9nIHRvIGJlIGNsb3NlZCBhZ2FpbgoJCQkJc2VsZi5pc09wZW4gPSBmYWxzZTsKCQkJfSwKCgkJCW9wZW46IGZ1bmN0aW9uKCkgewoJCQkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCXZhciBzZWxmID0gdGhpcywKCQkJCQltZW51SGVpZ2h0ID0gc2VsZi5saXN0LnBhcmVudCgpLm91dGVySGVpZ2h0KCksCgkJCQkJbWVudVdpZHRoID0gc2VsZi5saXN0LnBhcmVudCgpLm91dGVyV2lkdGgoKSwKCQkJCQlhY3RpdmVQYWdlID0gJCggIi51aS1wYWdlLWFjdGl2ZSIgKSwKCQkJCQl0T3ZlcmZsb3cgPSAkLnN1cHBvcnQudG91Y2hPdmVyZmxvdyAmJiAkLm1vYmlsZS50b3VjaE92ZXJmbG93RW5hYmxlZCwKCQkJCQl0U2Nyb2xsRWxlbSA9IGFjdGl2ZVBhZ2UuaXMoICIudWktbmF0aXZlLWZpeGVkIiApID8gYWN0aXZlUGFnZS5maW5kKCAiLnVpLWNvbnRlbnQiICkgOiBhY3RpdmVQYWdlLAoJCQkJCXNjcm9sbFRvcCA9IHRPdmVyZmxvdyA/IHRTY3JvbGxFbGVtLnNjcm9sbFRvcCgpIDogJCggd2luZG93ICkuc2Nyb2xsVG9wKCksCgkJCQkJYnRuT2Zmc2V0ID0gc2VsZi5idXR0b24ub2Zmc2V0KCkudG9wLAoJCQkJCXNjcmVlbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSwKCQkJCQlzY3JlZW5XaWR0aCA9ICQod2luZG93KS53aWR0aCgpOwoKCQkJCS8vYWRkIGFjdGl2ZSBjbGFzcyB0byBidXR0b24KCQkJCXNlbGYuYnV0dG9uLmFkZENsYXNzKCAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyApOwoKCQkJCS8vcmVtb3ZlIGFmdGVyIGRlbGF5CgkJCQlzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHsKCQkJCQlzZWxmLmJ1dHRvbi5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJCX0sIDMwMCk7CgoJCQkJZnVuY3Rpb24gZm9jdXNNZW51SXRlbSgpIHsKCQkJCQlzZWxmLmxpc3QuZmluZCggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKS5mb2N1cygpOwoJCQkJfQoKCQkJCWlmICggbWVudUhlaWdodCA+IHNjcmVlbkhlaWdodCAtIDgwIHx8ICEkLnN1cHBvcnQuc2Nyb2xsVG9wICkgewoJCQkJCS8vIHByZXZlbnQgdGhlIHBhcmVudCBwYWdlIGZyb20gYmVpbmcgcmVtb3ZlZCBmcm9tIHRoZSBET00sCgkJCQkJLy8gb3RoZXJ3aXNlIHRoZSByZXN1bHRzIG9mIHNlbGVjdGluZyBhIGxpc3QgaXRlbSBpbiB0aGUgZGlhbG9nCgkJCQkJLy8gZmFsbCBpbnRvIGEgYmxhY2sgaG9sZQoJCQkJCXNlbGYudGhpc1BhZ2UudW5iaW5kKCAicGFnZWhpZGUucmVtb3ZlIiApOwoKCQkJCQkvL2ZvciBXZWJPUy9PcGVyYSBNaW5pIChzZXQgbGFzdHNjcm9sbCB1c2luZyBidXR0b24gb2Zmc2V0KQoJCQkJCWlmICggc2Nyb2xsVG9wID09IDAgJiYgYnRuT2Zmc2V0ID4gc2NyZWVuSGVpZ2h0ICkgewoJCQkJCQlzZWxmLnRoaXNQYWdlLm9uZSggInBhZ2VoaWRlIiwgZnVuY3Rpb24oKSB7CgkJCQkJCQkkKCB0aGlzICkuanFtRGF0YSggImxhc3RTY3JvbGwiLCBidG5PZmZzZXQgKTsKCQkJCQkJfSk7CgkJCQkJfQoKCQkJCQlzZWxmLm1lbnVQYWdlLm9uZSggInBhZ2VzaG93IiwgZnVuY3Rpb24oKSB7CgkJCQkJCS8vIHNpbGVudFNjcm9sbCgpIGlzIGNhbGxlZCB3aGVuZXZlciBhIHBhZ2UgaXMgc2hvd24gdG8gcmVzdG9yZQoJCQkJCQkvLyBhbnkgcHJldmlvdXMgc2Nyb2xsIHBvc2l0aW9uIHRoZSBwYWdlIG1heSBoYXZlIGhhZC4gV2UgbmVlZCB0bwoJCQkJCQkvLyB3YWl0IGZvciB0aGUgInNpbGVudHNjcm9sbCIgZXZlbnQgYmVmb3JlIHNldHRpbmcgZm9jdXMgdG8gYXZvaWQKCQkJCQkJLy8gdGhlIGJyb3dzZXIicyAiZmVhdHVyZSIgd2hpY2ggb2Zmc2V0cyByZW5kZXJpbmcgdG8gbWFrZSBzdXJlCgkJCQkJCS8vIHdoYXRldmVyIGhhcyBmb2N1cyBpcyBpbiB2aWV3LgoJCQkJCQkkKCB3aW5kb3cgKS5vbmUoICJzaWxlbnRzY3JvbGwiLCBmdW5jdGlvbigpIHsKCQkJCQkJCWZvY3VzTWVudUl0ZW0oKTsKCQkJCQkJfSk7CgoJCQkJCQlzZWxmLmlzT3BlbiA9IHRydWU7CgkJCQkJfSk7CgoJCQkJCXNlbGYubWVudVR5cGUgPSAicGFnZSI7CgkJCQkJc2VsZi5tZW51UGFnZUNvbnRlbnQuYXBwZW5kKCBzZWxmLmxpc3QgKTsKCQkJCQlzZWxmLm1lbnVQYWdlLmZpbmQoImRpdiAudWktdGl0bGUiKS50ZXh0KHNlbGYubGFiZWwudGV4dCgpKTsKCQkJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlKCBzZWxmLm1lbnVQYWdlLCB7CgkJCQkJCXRyYW5zaXRpb246ICQubW9iaWxlLmRlZmF1bHREaWFsb2dUcmFuc2l0aW9uCgkJCQkJfSk7CgkJCQl9IGVsc2UgewoJCQkJCXNlbGYubWVudVR5cGUgPSAib3ZlcmxheSI7CgoJCQkJCXNlbGYuc2NyZWVuLmhlaWdodCggJChkb2N1bWVudCkuaGVpZ2h0KCkgKQoJCQkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1zY3JlZW4taGlkZGVuIiApOwoKCQkJCQkvLyBUcnkgYW5kIGNlbnRlciB0aGUgb3ZlcmxheSBvdmVyIHRoZSBidXR0b24KCQkJCQl2YXIgcm9vbXRvcCA9IGJ0bk9mZnNldCAtIHNjcm9sbFRvcCwKCQkJCQkJcm9vbWJvdCA9IHNjcm9sbFRvcCArIHNjcmVlbkhlaWdodCAtIGJ0bk9mZnNldCwKCQkJCQkJaGFsZmhlaWdodCA9IG1lbnVIZWlnaHQgLyAyLAoJCQkJCQltYXh3aWR0aCA9IHBhcnNlRmxvYXQoIHNlbGYubGlzdC5wYXJlbnQoKS5jc3MoICJtYXgtd2lkdGgiICkgKSwKCQkJCQkJbmV3dG9wLCBuZXdsZWZ0OwoKCQkJCQlpZiAoIHJvb210b3AgPiBtZW51SGVpZ2h0IC8gMiAmJiByb29tYm90ID4gbWVudUhlaWdodCAvIDIgKSB7CgkJCQkJCW5ld3RvcCA9IGJ0bk9mZnNldCArICggc2VsZi5idXR0b24ub3V0ZXJIZWlnaHQoKSAvIDIgKSAtIGhhbGZoZWlnaHQ7CgkJCQkJfSBlbHNlIHsKCQkJCQkJLy8gMzBweCB0b2xlcmFuY2Ugb2ZmIHRoZSBlZGdlcwoJCQkJCQluZXd0b3AgPSByb29tdG9wID4gcm9vbWJvdCA/IHNjcm9sbFRvcCArIHNjcmVlbkhlaWdodCAtIG1lbnVIZWlnaHQgLSAzMCA6IHNjcm9sbFRvcCArIDMwOwoJCQkJCX0KCgkJCQkJLy8gSWYgdGhlIG1lbnV3aWR0aCBpcyBzbWFsbGVyIHRoYW4gdGhlIHNjcmVlbiBjZW50ZXIgaXMKCQkJCQlpZiAoIG1lbnVXaWR0aCA8IG1heHdpZHRoICkgewoJCQkJCQluZXdsZWZ0ID0gKCBzY3JlZW5XaWR0aCAtIG1lbnVXaWR0aCApIC8gMjsKCQkJCQl9IGVsc2UgewoKCQkJCQkJLy9vdGhlcndpc2UgaW5zdXJlIGEgPj0gMzBweCBvZmZzZXQgZnJvbSB0aGUgbGVmdAoJCQkJCQluZXdsZWZ0ID0gc2VsZi5idXR0b24ub2Zmc2V0KCkubGVmdCArIHNlbGYuYnV0dG9uLm91dGVyV2lkdGgoKSAvIDIgLSBtZW51V2lkdGggLyAyOwoKCQkJCQkJLy8gMzBweCB0b2xlcmFuY2Ugb2ZmIHRoZSBlZGdlcwoJCQkJCQlpZiAoIG5ld2xlZnQgPCAzMCApIHsKCQkJCQkJCW5ld2xlZnQgPSAzMDsKCQkJCQkJfSBlbHNlIGlmICggKG5ld2xlZnQgKyBtZW51V2lkdGgpID4gc2NyZWVuV2lkdGggKSB7CgkJCQkJCQluZXdsZWZ0ID0gc2NyZWVuV2lkdGggLSBtZW51V2lkdGggLSAzMDsKCQkJCQkJfQoJCQkJCX0KCgkJCQkJc2VsZi5saXN0Ym94LmFwcGVuZCggc2VsZi5saXN0ICkKCQkJCQkJLnJlbW92ZUNsYXNzKCAidWktc2VsZWN0bWVudS1oaWRkZW4iICkKCQkJCQkJLmNzcyh7CgkJCQkJCQl0b3A6IG5ld3RvcCwKCQkJCQkJCWxlZnQ6IG5ld2xlZnQKCQkJCQkJfSkKCQkJCQkJLmFkZENsYXNzKCAiaW4iICk7CgoJCQkJCWZvY3VzTWVudUl0ZW0oKTsKCgkJCQkJLy8gZHVwbGljYXRlIHdpdGggdmFsdWUgc2V0IGluIHBhZ2Ugc2hvdyBmb3IgZGlhbG9nIHNpemVkIHNlbGVjdHMKCQkJCQlzZWxmLmlzT3BlbiA9IHRydWU7CgkJCQl9CgkJCX0sCgoJCQlfYnVpbGRMaXN0OiBmdW5jdGlvbigpIHsKCQkJCXZhciBzZWxmID0gdGhpcywKCQkJCQlvID0gdGhpcy5vcHRpb25zLAoJCQkJCXBsYWNlaG9sZGVyID0gdGhpcy5wbGFjZWhvbGRlciwKCQkJCQlvcHRncm91cHMgPSBbXSwKCQkJCQlsaXMgPSBbXSwKCQkJCQlkYXRhSWNvbiA9IHNlbGYuaXNNdWx0aXBsZSA/ICJjaGVja2JveC1vZmYiIDogImZhbHNlIjsKCgkJCQlzZWxmLmxpc3QuZW1wdHkoKS5maWx0ZXIoICIudWktbGlzdHZpZXciICkubGlzdHZpZXcoICJkZXN0cm95IiApOwoKCQkJCS8vIFBvcHVsYXRlIG1lbnUgd2l0aCBvcHRpb25zIGZyb20gc2VsZWN0IGVsZW1lbnQKCQkJCXNlbGYuc2VsZWN0LmZpbmQoICJvcHRpb24iICkuZWFjaCggZnVuY3Rpb24oIGkgKSB7CgkJCQkJdmFyICR0aGlzID0gJCggdGhpcyApLAoJCQkJCQkkcGFyZW50ID0gJHRoaXMucGFyZW50KCksCgkJCQkJCXRleHQgPSAkdGhpcy5nZXRFbmNvZGVkVGV4dCgpLAoJCQkJCQlhbmNob3IgPSAiPGEgaHJlZj0nIyc+IisgdGV4dCArIjwvYT4iLAoJCQkJCQljbGFzc2VzID0gW10sCgkJCQkJCWV4dHJhQXR0cnMgPSBbXTsKCgkJCQkJLy8gQXJlIHdlIGluc2lkZSBhbiBvcHRncm91cD8KCQkJCQlpZiAoICRwYXJlbnQuaXMoICJvcHRncm91cCIgKSApIHsKCQkJCQkJdmFyIG9wdExhYmVsID0gJHBhcmVudC5hdHRyKCAibGFiZWwiICk7CgoJCQkJCQkvLyBoYXMgdGhpcyBvcHRncm91cCBhbHJlYWR5IGJlZW4gYnVpbHQgeWV0PwoJCQkJCQlpZiAoICQuaW5BcnJheSggb3B0TGFiZWwsIG9wdGdyb3VwcyApID09PSAtMSApIHsKCQkJCQkJCWxpcy5wdXNoKCAiPGxpIGRhdGEtIiArICQubW9iaWxlLm5zICsgInJvbGU9J2xpc3QtZGl2aWRlcic+Iisgb3B0TGFiZWwgKyI8L2xpPiIgKTsKCQkJCQkJCW9wdGdyb3Vwcy5wdXNoKCBvcHRMYWJlbCApOwoJCQkJCQl9CgkJCQkJfQoKCQkJCQkvLyBGaW5kIHBsYWNlaG9sZGVyIHRleHQKCQkJCQkvLyBUT0RPOiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gdXNlIGdldEF0dHJpYnV0ZT8gXlJXCgkJCQkJaWYgKCAhdGhpcy5nZXRBdHRyaWJ1dGUoICJ2YWx1ZSIgKSB8fCB0ZXh0Lmxlbmd0aCA9PSAwIHx8ICR0aGlzLmpxbURhdGEoICJwbGFjZWhvbGRlciIgKSApIHsKCQkJCQkJaWYgKCBvLmhpZGVQbGFjZWhvbGRlck1lbnVJdGVtcyApIHsKCQkJCQkJCWNsYXNzZXMucHVzaCggInVpLXNlbGVjdG1lbnUtcGxhY2Vob2xkZXIiICk7CgkJCQkJCX0KCQkJCQkJcGxhY2Vob2xkZXIgPSBzZWxmLnBsYWNlaG9sZGVyID0gdGV4dDsKCQkJCQl9CgoJCQkJCS8vIHN1cHBvcnQgZGlzYWJsZWQgb3B0aW9uIHRhZ3MKCQkJCQlpZiAoIHRoaXMuZGlzYWJsZWQgKSB7CgkJCQkJCWNsYXNzZXMucHVzaCggInVpLWRpc2FibGVkIiApOwoJCQkJCQlleHRyYUF0dHJzLnB1c2goICJhcmlhLWRpc2FibGVkPSd0cnVlJyIgKTsKCQkJCQl9CgoJCQkJCWxpcy5wdXNoKCAiPGxpIGRhdGEtIiArICQubW9iaWxlLm5zICsgIm9wdGlvbi1pbmRleD0nIiArIGkgKyAiJyBkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJpY29uPSciKyBkYXRhSWNvbiArIicgY2xhc3M9JyIrIGNsYXNzZXMuam9pbigiICIpICsgIicgIiArIGV4dHJhQXR0cnMuam9pbigiICIpICsiPiIrIGFuY2hvciArIjwvbGk+IiApOwoJCQkJfSk7CgoJCQkJc2VsZi5saXN0Lmh0bWwoIGxpcy5qb2luKCIgIikgKTsKCgkJCQlzZWxmLmxpc3QuZmluZCggImxpIiApCgkJCQkJLmF0dHIoeyAicm9sZSI6ICJvcHRpb24iLCAidGFiaW5kZXgiOiAiLTEiIH0pCgkJCQkJLmZpcnN0KCkuYXR0ciggInRhYmluZGV4IiwgIjAiICk7CgoJCQkJLy8gSGlkZSBoZWFkZXIgY2xvc2UgbGluayBmb3Igc2luZ2xlIHNlbGVjdHMKCQkJCWlmICggIXRoaXMuaXNNdWx0aXBsZSApIHsKCQkJCQl0aGlzLmhlYWRlckNsb3NlLmhpZGUoKTsKCQkJCX0KCgkJCQkvLyBIaWRlIGhlYWRlciBpZiBpdCdzIG5vdCBhIG11bHRpc2VsZWN0IGFuZCB0aGVyZSdzIG5vIHBsYWNlaG9sZGVyCgkJCQlpZiAoICF0aGlzLmlzTXVsdGlwbGUgJiYgIXBsYWNlaG9sZGVyLmxlbmd0aCApIHsKCQkJCQl0aGlzLmhlYWRlci5oaWRlKCk7CgkJCQl9IGVsc2UgewoJCQkJCXRoaXMuaGVhZGVyVGl0bGUudGV4dCggdGhpcy5wbGFjZWhvbGRlciApOwoJCQkJfQoKCQkJCS8vIE5vdyBwb3B1bGF0ZWQsIGNyZWF0ZSBsaXN0dmlldwoJCQkJc2VsZi5saXN0Lmxpc3R2aWV3KCk7CgkJCX0sCgoJCQlfYnV0dG9uOiBmdW5jdGlvbigpewoJCQkJcmV0dXJuICQoICI8YT4iLCB7CgkJCQkJImhyZWYiOiAiIyIsCgkJCQkJInJvbGUiOiAiYnV0dG9uIiwKCQkJCQkvLyBUT0RPIHZhbHVlIGlzIHVuZGVmaW5lZCBhdCBjcmVhdGlvbgoJCQkJCSJpZCI6IHRoaXMuYnV0dG9uSWQsCgkJCQkJImFyaWEtaGFzcG9wdXAiOiAidHJ1ZSIsCgoJCQkJCS8vIFRPRE8gdmFsdWUgaXMgdW5kZWZpbmVkIGF0IGNyZWF0aW9uCgkJCQkJImFyaWEtb3ducyI6IHRoaXMubWVudUlkCgkJCQl9KTsKCQkJfQoJCX0pOwoJfTsKCgkkKCBkb2N1bWVudCApLmRlbGVnYXRlKCAic2VsZWN0IiwgInNlbGVjdG1lbnViZWZvcmVjcmVhdGUiLCBmdW5jdGlvbigpewoJCXZhciBzZWxlY3RtZW51V2lkZ2V0ID0gJCggdGhpcyApLmRhdGEoICJzZWxlY3RtZW51IiApOwoKCQlpZiggIXNlbGVjdG1lbnVXaWRnZXQub3B0aW9ucy5uYXRpdmVNZW51ICl7CgkJCWV4dGVuZFNlbGVjdCggc2VsZWN0bWVudVdpZGdldCApOwoJCX0KCX0pOwp9KSggalF1ZXJ5ICk7Ci8qCiogInNlbGVjdG1lbnUiIHBsdWdpbgoqLwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS5zZWxlY3RtZW51IiwgJC5tb2JpbGUud2lkZ2V0LCB7CglvcHRpb25zOiB7CgkJdGhlbWU6IG51bGwsCgkJZGlzYWJsZWQ6IGZhbHNlLAoJCWljb246ICJhcnJvdy1kIiwKCQlpY29ucG9zOiAicmlnaHQiLAoJCWlubGluZTogbnVsbCwKCQljb3JuZXJzOiB0cnVlLAoJCXNoYWRvdzogdHJ1ZSwKCQlpY29uc2hhZG93OiB0cnVlLAoJCW1lbnVQYWdlVGhlbWU6ICJiIiwKCQlvdmVybGF5VGhlbWU6ICJhIiwKCQloaWRlUGxhY2Vob2xkZXJNZW51SXRlbXM6IHRydWUsCgkJY2xvc2VUZXh0OiAiQ2xvc2UiLAoJCW5hdGl2ZU1lbnU6IHRydWUsCgkJaW5pdFNlbGVjdG9yOiAic2VsZWN0Om5vdCg6anFtRGF0YShyb2xlPSdzbGlkZXInKSkiCgl9LAoKCV9idXR0b246IGZ1bmN0aW9uKCl7CgkJcmV0dXJuICQoICI8ZGl2Lz4iICk7Cgl9LAoKCV9zZXREaXNhYmxlZDogZnVuY3Rpb24oIHZhbHVlICkgewoJCXRoaXMuZWxlbWVudC5hdHRyKCAiZGlzYWJsZWQiLCB2YWx1ZSApOwoJCXRoaXMuYnV0dG9uLmF0dHIoICJhcmlhLWRpc2FibGVkIiwgdmFsdWUgKTsKCQlyZXR1cm4gdGhpcy5fc2V0T3B0aW9uKCAiZGlzYWJsZWQiLCB2YWx1ZSApOwoJfSwKCglfZm9jdXNCdXR0b24gOiBmdW5jdGlvbigpIHsKCQl2YXIgc2VsZiA9IHRoaXM7CgoJCXNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgewoJCQlzZWxmLmJ1dHRvbi5mb2N1cygpOwoJCX0sIDQwKTsKCX0sCgogIF9zZWxlY3RPcHRpb25zOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLnNlbGVjdC5maW5kKCAib3B0aW9uIiApOwogIH0sCgoJLy8gc2V0dXAgaXRlbXMgdGhhdCBhcmUgZ2VuZXJhbGx5IG5lY2Vzc2FyeSBmb3Igc2VsZWN0IG1lbnUgZXh0ZW5zaW9uCglfcHJlRXh0ZW5zaW9uOiBmdW5jdGlvbigpewoJCXRoaXMuc2VsZWN0ID0gdGhpcy5lbGVtZW50LndyYXAoICI8ZGl2IGNsYXNzPSd1aS1zZWxlY3QnPiIgKTsKCQl0aGlzLnNlbGVjdElEICA9IHRoaXMuc2VsZWN0LmF0dHIoICJpZCIgKTsKCQl0aGlzLmxhYmVsID0gJCggImxhYmVsW2Zvcj0nIisgdGhpcy5zZWxlY3RJRCArIiddIiApLmFkZENsYXNzKCAidWktc2VsZWN0IiApOwoJCXRoaXMuaXNNdWx0aXBsZSA9IHRoaXMuc2VsZWN0WyAwIF0ubXVsdGlwbGU7CgkJaWYgKCAhdGhpcy5vcHRpb25zLnRoZW1lICkgewoJCQl0aGlzLm9wdGlvbnMudGhlbWUgPSAkLm1vYmlsZS5nZXRJbmhlcml0ZWRUaGVtZSggdGhpcy5zZWxlY3QsICJjIiApOwoJCX0KCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5fcHJlRXh0ZW5zaW9uKCk7CgogCQkvLyBBbGxvd3MgZm9yIGV4dGVuc2lvbiBvZiB0aGUgbmF0aXZlIHNlbGVjdCBmb3IgY3VzdG9tIHNlbGVjdHMgYW5kIG90aGVyIHBsdWdpbnMKCQkvLyBzZWUgc2VsZWN0LmN1c3RvbSBmb3IgZXhhbXBsZSBleHRlbnNpb24KCQkvLyBUT0RPIGV4cGxvcmUgcGx1Z2luIHJlZ2lzdHJhdGlvbgoJCXRoaXMuX3RyaWdnZXIoICJiZWZvcmVDcmVhdGUiICk7CgoJCXRoaXMuYnV0dG9uID0gdGhpcy5fYnV0dG9uKCk7CgoJCXZhciBzZWxmID0gdGhpcywKCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgoJCQkvLyBJRSB0aHJvd3MgYW4gZXhjZXB0aW9uIGF0IG9wdGlvbnMuaXRlbSgpIGZ1bmN0aW9uIHdoZW4KCQkJLy8gdGhlcmUgaXMgbm8gc2VsZWN0ZWQgaXRlbQoJCQkvLyBzZWxlY3QgZmlyc3QgaW4gdGhpcyBjYXNlCgkJCXNlbGVjdGVkSW5kZXggPSB0aGlzLnNlbGVjdFsgMCBdLnNlbGVjdGVkSW5kZXggPT0gLTEgPyAwIDogdGhpcy5zZWxlY3RbIDAgXS5zZWxlY3RlZEluZGV4LAoKCQkJLy8gVE9ETyB2YWx1ZXMgYnV0dG9uSWQgYW5kIG1lbnVJZCBhcmUgdW5kZWZpbmVkIGhlcmUKCQkJYnV0dG9uID0gdGhpcy5idXR0b24KCQkJCS50ZXh0KCAkKCB0aGlzLnNlbGVjdFsgMCBdLm9wdGlvbnMuaXRlbSggc2VsZWN0ZWRJbmRleCApICkudGV4dCgpICkKCQkJCS5pbnNlcnRCZWZvcmUoIHRoaXMuc2VsZWN0ICkKCQkJCS5idXR0b25NYXJrdXAoIHsKCQkJCQl0aGVtZTogb3B0aW9ucy50aGVtZSwKCQkJCQlpY29uOiBvcHRpb25zLmljb24sCgkJCQkJaWNvbnBvczogb3B0aW9ucy5pY29ucG9zLAoJCQkJCWlubGluZTogb3B0aW9ucy5pbmxpbmUsCgkJCQkJY29ybmVyczogb3B0aW9ucy5jb3JuZXJzLAoJCQkJCXNoYWRvdzogb3B0aW9ucy5zaGFkb3csCgkJCQkJaWNvbnNoYWRvdzogb3B0aW9ucy5pY29uc2hhZG93CgkJCQl9KTsKCgkJLy8gT3BlcmEgZG9lcyBub3QgcHJvcGVybHkgc3VwcG9ydCBvcGFjaXR5IG9uIHNlbGVjdCBlbGVtZW50cwoJCS8vIEluIE1pbmksIGl0IGhpZGVzIHRoZSBlbGVtZW50LCBidXQgbm90IGl0cyB0ZXh0CgkJLy8gT24gdGhlIGRlc2t0b3AsaXQgc2VlbXMgdG8gZG8gdGhlIG9wcG9zaXRlCgkJLy8gZm9yIHRoZXNlIHJlYXNvbnMsIHVzaW5nIHRoZSBuYXRpdmVNZW51IG9wdGlvbiByZXN1bHRzIGluIGEgZnVsbCBuYXRpdmUgc2VsZWN0IGluIE9wZXJhCgkJaWYgKCBvcHRpb25zLm5hdGl2ZU1lbnUgJiYgd2luZG93Lm9wZXJhICYmIHdpbmRvdy5vcGVyYS52ZXJzaW9uICkgewoJCQl0aGlzLnNlbGVjdC5hZGRDbGFzcyggInVpLXNlbGVjdC1uYXRpdmVvbmx5IiApOwoJCX0KCgkJLy8gQWRkIGNvdW50ZXIgZm9yIG11bHRpIHNlbGVjdHMKCQlpZiAoIHRoaXMuaXNNdWx0aXBsZSApIHsKCQkJdGhpcy5idXR0b25Db3VudCA9ICQoICI8c3Bhbj4iICkKCQkJCS5hZGRDbGFzcyggInVpLWxpLWNvdW50IHVpLWJ0bi11cC1jIHVpLWJ0bi1jb3JuZXItYWxsIiApCgkJCQkuaGlkZSgpCgkJCQkuYXBwZW5kVG8oIGJ1dHRvbi5hZGRDbGFzcygndWktbGktaGFzLWNvdW50JykgKTsKCQl9CgoJCS8vIERpc2FibGUgaWYgc3BlY2lmaWVkCgkJaWYgKCBvcHRpb25zLmRpc2FibGVkIHx8IHRoaXMuZWxlbWVudC5hdHRyKCdkaXNhYmxlZCcpKSB7CgkJCXRoaXMuZGlzYWJsZSgpOwoJCX0KCgkJLy8gRXZlbnRzIG9uIG5hdGl2ZSBzZWxlY3QKCQl0aGlzLnNlbGVjdC5jaGFuZ2UoIGZ1bmN0aW9uKCkgewoJCQlzZWxmLnJlZnJlc2goKTsKCQl9KTsKCgkJdGhpcy5idWlsZCgpOwoJfSwKCglidWlsZDogZnVuY3Rpb24oKSB7CgkJdmFyIHNlbGYgPSB0aGlzOwoKCQl0aGlzLnNlbGVjdAoJCQkuYXBwZW5kVG8oIHNlbGYuYnV0dG9uICkKCQkJLmJpbmQoICJ2bW91c2Vkb3duIiwgZnVuY3Rpb24oKSB7CgkJCQkvLyBBZGQgYWN0aXZlIGNsYXNzIHRvIGJ1dHRvbgoJCQkJc2VsZi5idXR0b24uYWRkQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJCX0pCgkJCS5iaW5kKCAiZm9jdXMgdm1vdXNlb3ZlciIsIGZ1bmN0aW9uKCkgewoJCQkJc2VsZi5idXR0b24udHJpZ2dlciggInZtb3VzZW92ZXIiICk7CgkJCX0pCgkJCS5iaW5kKCAidm1vdXNlbW92ZSIsIGZ1bmN0aW9uKCkgewoJCQkJLy8gUmVtb3ZlIGFjdGl2ZSBjbGFzcyBvbiBzY3JvbGwvdG91Y2htb3ZlCgkJCQlzZWxmLmJ1dHRvbi5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJfSkKCQkJLmJpbmQoICJjaGFuZ2UgYmx1ciB2bW91c2VvdXQiLCBmdW5jdGlvbigpIHsKCQkJCXNlbGYuYnV0dG9uLnRyaWdnZXIoICJ2bW91c2VvdXQiICkKCQkJCQkucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJCX0pCgkJCS5iaW5kKCAiY2hhbmdlIGJsdXIiLCBmdW5jdGlvbigpIHsKCQkJCXNlbGYuYnV0dG9uLnJlbW92ZUNsYXNzKCAidWktYnRuLWRvd24tIiArIHNlbGYub3B0aW9ucy50aGVtZSApOwoJCQl9KTsKCX0sCgoJc2VsZWN0ZWQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLl9zZWxlY3RPcHRpb25zKCkuZmlsdGVyKCAiOnNlbGVjdGVkIiApOwoJfSwKCglzZWxlY3RlZEluZGljZXM6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpczsKCgkJcmV0dXJuIHRoaXMuc2VsZWN0ZWQoKS5tYXAoIGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gc2VsZi5fc2VsZWN0T3B0aW9ucygpLmluZGV4KCB0aGlzICk7CgkJfSkuZ2V0KCk7Cgl9LAoKCXNldEJ1dHRvblRleHQ6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpcywgc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkKCk7CgoJCXRoaXMuYnV0dG9uLmZpbmQoICIudWktYnRuLXRleHQiICkudGV4dCggZnVuY3Rpb24oKSB7CgkJCWlmICggIXNlbGYuaXNNdWx0aXBsZSApIHsKCQkJCXJldHVybiBzZWxlY3RlZC50ZXh0KCk7CgkJCX0KCgkJCXJldHVybiBzZWxlY3RlZC5sZW5ndGggPyBzZWxlY3RlZC5tYXAoIGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICQoIHRoaXMgKS50ZXh0KCk7CgkJCX0pLmdldCgpLmpvaW4oICIsICIgKSA6IHNlbGYucGxhY2Vob2xkZXI7CgkJfSk7Cgl9LAoKCXNldEJ1dHRvbkNvdW50OiBmdW5jdGlvbigpIHsKCQl2YXIgc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkKCk7CgoJCS8vIG11bHRpcGxlIGNvdW50IGluc2lkZSBidXR0b24KCQlpZiAoIHRoaXMuaXNNdWx0aXBsZSApIHsKCQkJdGhpcy5idXR0b25Db3VudFsgc2VsZWN0ZWQubGVuZ3RoID4gMSA/ICJzaG93IiA6ICJoaWRlIiBdKCkudGV4dCggc2VsZWN0ZWQubGVuZ3RoICk7CgkJfQoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl0aGlzLnNldEJ1dHRvblRleHQoKTsKCQl0aGlzLnNldEJ1dHRvbkNvdW50KCk7Cgl9LAoKCS8vIG9wZW4gYW5kIGNsb3NlIHByZXNlcnZlZCBpbiBuYXRpdmUgc2VsZWN0cwoJLy8gdG8gc2ltcGxpZnkgdXNlcnMgY29kZSB3aGVuIGxvb3Bpbmcgb3ZlciBzZWxlY3RzCglvcGVuOiAkLm5vb3AsCgljbG9zZTogJC5ub29wLAoKCWRpc2FibGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX3NldERpc2FibGVkKCB0cnVlICk7CgkJdGhpcy5idXR0b24uYWRkQ2xhc3MoICJ1aS1kaXNhYmxlZCIgKTsKCX0sCgoJZW5hYmxlOiBmdW5jdGlvbigpIHsKCQl0aGlzLl9zZXREaXNhYmxlZCggZmFsc2UgKTsKCQl0aGlzLmJ1dHRvbi5yZW1vdmVDbGFzcyggInVpLWRpc2FibGVkIiApOwoJfQp9KTsKCi8vYXV0byBzZWxmLWluaXQgd2lkZ2V0cwokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIGNyZWF0ZSIsIGZ1bmN0aW9uKCBlICl7CgkkLm1vYmlsZS5zZWxlY3RtZW51LnByb3RvdHlwZS5lbmhhbmNlV2l0aGluKCBlLnRhcmdldCApOwp9KTsKfSkoIGpRdWVyeSApOwovKgoqICJidXR0b25zIiBwbHVnaW4gLSBmb3IgbWFraW5nIGJ1dHRvbi1saWtlIGxpbmtzCiovCgooIGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmZuLmJ1dHRvbk1hcmt1cCA9IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJb3B0aW9ucyA9IG9wdGlvbnMgfHwge307Cglmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrICkgewoJCXZhciBlbCA9IHRoaXMuZXEoIGkgKSwKCQkJZSA9IGVsWyAwIF0sCgkJCW8gPSAkLmV4dGVuZCgge30sICQuZm4uYnV0dG9uTWFya3VwLmRlZmF1bHRzLCB7CgkJCQlpY29uOiAgICAgICBvcHRpb25zLmljb24gICAgICAgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuaWNvbiAgICAgICA6IGVsLmpxbURhdGEoICJpY29uIiApLAoJCQkJaWNvbnBvczogICAgb3B0aW9ucy5pY29ucG9zICAgICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmljb25wb3MgICAgOiBlbC5qcW1EYXRhKCAiaWNvbnBvcyIgKSwKCQkJCXRoZW1lOiAgICAgIG9wdGlvbnMudGhlbWUgICAgICAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy50aGVtZSAgICAgIDogZWwuanFtRGF0YSggInRoZW1lIiApLAoJCQkJaW5saW5lOiAgICAgb3B0aW9ucy5pbmxpbmUgICAgICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmlubGluZSAgICAgOiBlbC5qcW1EYXRhKCAiaW5saW5lIiApLAoJCQkJc2hhZG93OiAgICAgb3B0aW9ucy5zaGFkb3cgICAgICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnNoYWRvdyAgICAgOiBlbC5qcW1EYXRhKCAic2hhZG93IiApLAoJCQkJY29ybmVyczogICAgb3B0aW9ucy5jb3JuZXJzICAgICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNvcm5lcnMgICAgOiBlbC5qcW1EYXRhKCAiY29ybmVycyIgKSwKCQkJCWljb25zaGFkb3c6IG9wdGlvbnMuaWNvbnNoYWRvdyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5pY29uc2hhZG93IDogZWwuanFtRGF0YSggImljb25zaGFkb3ciICkKCQkJfSwgb3B0aW9ucyApLAoKCQkJLy8gQ2xhc3NlcyBEZWZpbmVkCgkJCWlubmVyQ2xhc3MgPSAidWktYnRuLWlubmVyIiwKCQkJdGV4dENsYXNzID0gInVpLWJ0bi10ZXh0IiwKCQkJYnV0dG9uQ2xhc3MsIGljb25DbGFzcywKCgkJCS8vIEJ1dHRvbiBpbm5lciBtYXJrdXAKCQkJYnV0dG9uSW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBvLndyYXBwZXJFbHMgKSwKCQkJYnV0dG9uVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIG8ud3JhcHBlckVscyApLAoJCQlidXR0b25JY29uID0gby5pY29uID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggInNwYW4iICkgOiBudWxsOwoKCQkvLyBpZiBzbywgcHJldmVudCBkb3VibGUgZW5oYW5jZW1lbnQsIGFuZCBjb250aW51ZSB3aXRoIHJlc3Qgb2YgdGhlIGVsZW1lbnRzLgoJCWlmKCBlLnRhZ05hbWUgPT09ICJJTlBVVCIgJiYgZWwuanFtRGF0YSgncm9sZScpID09PSAiYnV0dG9uIiApIGNvbnRpbnVlOwoJCQoJCS8vIGlmIHRoaXMgaXMgYSBidXR0b24sIGNoZWNrIGlmIGl0J3MgYmVlbiBlbmhhbmNlZCBhbmQsIGlmIG5vdCwgdXNlIHRoZSByaWdodCBmdW5jdGlvbgoJCWlmKCBlLnRhZ05hbWUgPT09ICJCVVRUT04iICkgewoJIAkgCWlmICggISQoIGUucGFyZW50Tm9kZSApLmhhc0NsYXNzKCAidWktYnRuIiApICkgJCggZSApLmJ1dHRvbigpOwoJIAkgCWNvbnRpbnVlOwogCSAJfQoKCQlpZiAoIGF0dGFjaEV2ZW50cyApIHsKCQkJYXR0YWNoRXZlbnRzKCk7CgkJfQoKCQkvLyBpZiBub3QsIHRyeSB0byBmaW5kIGNsb3Nlc3QgdGhlbWUgY29udGFpbmVyCgkJaWYgKCAhby50aGVtZSApIHsKCQkJby50aGVtZSA9ICQubW9iaWxlLmdldEluaGVyaXRlZFRoZW1lKCBlbCwgImMiICk7CgkJfQoKCQlidXR0b25DbGFzcyA9ICJ1aS1idG4gdWktYnRuLXVwLSIgKyBvLnRoZW1lOwoKCQlpZiAoIG8uaW5saW5lICkgewoJCQlidXR0b25DbGFzcyArPSAiIHVpLWJ0bi1pbmxpbmUiOwoJCX0KCgkJaWYgKCBvLmljb24gKSB7CgkJCW8uaWNvbiA9ICJ1aS1pY29uLSIgKyBvLmljb247CgkJCW8uaWNvbnBvcyA9IG8uaWNvbnBvcyB8fCAibGVmdCI7CgoJCQlpY29uQ2xhc3MgPSAidWktaWNvbiAiICsgby5pY29uOwoKCQkJaWYgKCBvLmljb25zaGFkb3cgKSB7CgkJCQlpY29uQ2xhc3MgKz0gIiB1aS1pY29uLXNoYWRvdyI7CgkJCX0KCQl9CgoJCWlmICggby5pY29ucG9zICkgewoJCQlidXR0b25DbGFzcyArPSAiIHVpLWJ0bi1pY29uLSIgKyBvLmljb25wb3M7CgoJCQlpZiAoIG8uaWNvbnBvcyA9PSAibm90ZXh0IiAmJiAhZWwuYXR0ciggInRpdGxlIiApICkgewoJCQkJZWwuYXR0ciggInRpdGxlIiwgZWwuZ2V0RW5jb2RlZFRleHQoKSApOwoJCQl9CgkJfQoKCQlpZiAoIG8uY29ybmVycyApIHsKCQkJYnV0dG9uQ2xhc3MgKz0gIiB1aS1idG4tY29ybmVyLWFsbCI7CgkJCWlubmVyQ2xhc3MgKz0gIiB1aS1idG4tY29ybmVyLWFsbCI7CgkJfQoKCQlpZiAoIG8uc2hhZG93ICkgewoJCQlidXR0b25DbGFzcyArPSAiIHVpLXNoYWRvdyI7CgkJfQoKCQllLnNldEF0dHJpYnV0ZSggImRhdGEtIiArICQubW9iaWxlLm5zICsgInRoZW1lIiwgby50aGVtZSApOwoJCWVsLmFkZENsYXNzKCBidXR0b25DbGFzcyApOwoKCQlidXR0b25Jbm5lci5jbGFzc05hbWUgPSBpbm5lckNsYXNzOwoKCQlidXR0b25UZXh0LmNsYXNzTmFtZSA9IHRleHRDbGFzczsKCQlidXR0b25Jbm5lci5hcHBlbmRDaGlsZCggYnV0dG9uVGV4dCApOwoKCQlpZiAoIGJ1dHRvbkljb24gKSB7CgkJCWJ1dHRvbkljb24uY2xhc3NOYW1lID0gaWNvbkNsYXNzOwoJCQlidXR0b25Jbm5lci5hcHBlbmRDaGlsZCggYnV0dG9uSWNvbiApOwoJCX0KCgkJd2hpbGUgKCBlLmZpcnN0Q2hpbGQgKSB7CgkJCWJ1dHRvblRleHQuYXBwZW5kQ2hpbGQoIGUuZmlyc3RDaGlsZCApOwoJCX0KCgkJZS5hcHBlbmRDaGlsZCggYnV0dG9uSW5uZXIgKTsKCgkJLy8gVE9ETyBvYnZpb3VzbHkgaXQgd291bGQgYmUgbmljZSB0byBwdWxsIHRoaXMgZWxlbWVudCBvdXQgaW5zdGVhZCBvZgoJCS8vIHJldHJpZXZpbmcgaXQgZnJvbSB0aGUgRE9NIGFnYWluLCBidXQgdGhpcyBjaGFuZ2UgaXMgbXVjaCBsZXNzIG9idHJ1c2l2ZQoJCS8vIGFuZCAxLjAgZHJhd3MgbmlnaAoJCSQuZGF0YSggZSwgJ3RleHRXcmFwcGVyJywgJCggYnV0dG9uVGV4dCApICk7Cgl9CgoJcmV0dXJuIHRoaXM7Cn07CgokLmZuLmJ1dHRvbk1hcmt1cC5kZWZhdWx0cyA9IHsKCWNvcm5lcnM6IHRydWUsCglzaGFkb3c6IHRydWUsCglpY29uc2hhZG93OiB0cnVlLAoJaW5saW5lOiBmYWxzZSwKCXdyYXBwZXJFbHM6ICJzcGFuIgp9OwoKZnVuY3Rpb24gY2xvc2VzdEVuYWJsZWRCdXR0b24oIGVsZW1lbnQgKSB7CiAgICB2YXIgY25hbWU7CgogICAgd2hpbGUgKCBlbGVtZW50ICkgewoJCS8vIE5vdGUgdGhhdCB3ZSBjaGVjayBmb3IgdHlwZW9mIGNsYXNzTmFtZSBiZWxvdyBiZWNhdXNlIHRoZSBlbGVtZW50IHdlCgkJLy8gaGFuZGVkIGNvdWxkIGJlIGluIGFuIFNWRyBET00gd2hlcmUgY2xhc3NOYW1lIG9uIFNWRyBlbGVtZW50cyBpcyBkZWZpbmVkIHRvCgkJLy8gYmUgb2YgYSBkaWZmZXJlbnQgdHlwZSAoU1ZHQW5pbWF0ZWRTdHJpbmcpLiBXZSBvbmx5IG9wZXJhdGUgb24gSFRNTCBET00KCQkvLyBlbGVtZW50cywgc28gd2UgbG9vayBmb3IgcGxhaW4gInN0cmluZyIuCiAgICAgICAgY25hbWUgPSAoIHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycgKSAmJiAoZWxlbWVudC5jbGFzc05hbWUgKyAnICcpOwogICAgICAgIGlmICggY25hbWUgJiYgY25hbWUuaW5kZXhPZigidWktYnRuICIpID4gLTEgJiYgY25hbWUuaW5kZXhPZigidWktZGlzYWJsZWQgIikgPCAwICkgewogICAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CiAgICB9CgogICAgcmV0dXJuIGVsZW1lbnQ7Cn0KCnZhciBhdHRhY2hFdmVudHMgPSBmdW5jdGlvbigpIHsKCSQoIGRvY3VtZW50ICkuYmluZCggewoJCSJ2bW91c2Vkb3duIjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQl2YXIgYnRuID0gY2xvc2VzdEVuYWJsZWRCdXR0b24oIGV2ZW50LnRhcmdldCApLAoJCQkJJGJ0biwgdGhlbWU7CgoJCQlpZiAoIGJ0biApIHsKCQkJCSRidG4gPSAkKCBidG4gKTsKCQkJCXRoZW1lID0gJGJ0bi5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidGhlbWUiICk7CgkJCQkkYnRuLnJlbW92ZUNsYXNzKCAidWktYnRuLXVwLSIgKyB0aGVtZSApLmFkZENsYXNzKCAidWktYnRuLWRvd24tIiArIHRoZW1lICk7CgkJCX0KCQl9LAoJCSJ2bW91c2VjYW5jZWwgdm1vdXNldXAiOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCXZhciBidG4gPSBjbG9zZXN0RW5hYmxlZEJ1dHRvbiggZXZlbnQudGFyZ2V0ICksCgkJCQkkYnRuLCB0aGVtZTsKCgkJCWlmICggYnRuICkgewoJCQkJJGJ0biA9ICQoIGJ0biApOwoJCQkJdGhlbWUgPSAkYnRuLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJ0aGVtZSIgKTsKCQkJCSRidG4ucmVtb3ZlQ2xhc3MoICJ1aS1idG4tZG93bi0iICsgdGhlbWUgKS5hZGRDbGFzcyggInVpLWJ0bi11cC0iICsgdGhlbWUgKTsKCQkJfQoJCX0sCgkJInZtb3VzZW92ZXIgZm9jdXMiOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCXZhciBidG4gPSBjbG9zZXN0RW5hYmxlZEJ1dHRvbiggZXZlbnQudGFyZ2V0ICksCgkJCQkkYnRuLCB0aGVtZTsKCgkJCWlmICggYnRuICkgewoJCQkJJGJ0biA9ICQoIGJ0biApOwoJCQkJdGhlbWUgPSAkYnRuLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJ0aGVtZSIgKTsKCQkJCSRidG4ucmVtb3ZlQ2xhc3MoICJ1aS1idG4tdXAtIiArIHRoZW1lICkuYWRkQ2xhc3MoICJ1aS1idG4taG92ZXItIiArIHRoZW1lICk7CgkJCX0KCQl9LAoJCSJ2bW91c2VvdXQgYmx1ciI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyIGJ0biA9IGNsb3Nlc3RFbmFibGVkQnV0dG9uKCBldmVudC50YXJnZXQgKSwKCQkJCSRidG4sIHRoZW1lOwoKCQkJaWYgKCBidG4gKSB7CgkJCQkkYnRuID0gJCggYnRuICk7CgkJCQl0aGVtZSA9ICRidG4uYXR0ciggImRhdGEtIiArICQubW9iaWxlLm5zICsgInRoZW1lIiApOwoJCQkJJGJ0bi5yZW1vdmVDbGFzcyggInVpLWJ0bi1ob3Zlci0iICsgdGhlbWUgICsgIiB1aS1idG4tZG93bi0iICsgdGhlbWUgKS5hZGRDbGFzcyggInVpLWJ0bi11cC0iICsgdGhlbWUgKTsKCQkJfQoJCX0KCX0pOwoKCWF0dGFjaEV2ZW50cyA9IG51bGw7Cn07CgovL2xpbmtzIGluIGJhcnMsIG9yIHRob3NlIHdpdGggIGRhdGEtcm9sZSBiZWNvbWUgYnV0dG9ucwovL2F1dG8gc2VsZi1pbml0IHdpZGdldHMKJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZWNyZWF0ZSBjcmVhdGUiLCBmdW5jdGlvbiggZSApewoKCSQoICI6anFtRGF0YShyb2xlPSdidXR0b24nKSwgLnVpLWJhciA+IGEsIC51aS1oZWFkZXIgPiBhLCAudWktZm9vdGVyID4gYSwgLnVpLWJhciA+IDpqcW1EYXRhKHJvbGU9J2NvbnRyb2xncm91cCcpID4gYSIsIGUudGFyZ2V0ICkKCQkubm90KCAiLnVpLWJ0biwgOmpxbURhdGEocm9sZT0nbm9uZScpLCA6anFtRGF0YShyb2xlPSdub2pzJykiICkKCQkuYnV0dG9uTWFya3VwKCk7Cn0pOwoKfSkoIGpRdWVyeSApOwovKiAKKiAiY29udHJvbGdyb3VwIiBwbHVnaW4gLSBjb3JuZXItcm91bmRpbmcgZm9yIGdyb3VwcyBvZiBidXR0b25zLCBjaGVja3MsIHJhZGlvcywgZXRjCiovCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZm4uY29udHJvbGdyb3VwID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgoJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCgkJdmFyICRlbCA9ICQoIHRoaXMgKSwKCQkJbyA9ICQuZXh0ZW5kKHsKCQkJCQkJZGlyZWN0aW9uOiAkZWwuanFtRGF0YSggInR5cGUiICkgfHwgInZlcnRpY2FsIiwKCQkJCQkJc2hhZG93OiBmYWxzZSwKCQkJCQkJZXhjbHVkZUludmlzaWJsZTogdHJ1ZQoJCQkJCX0sIG9wdGlvbnMgKSwKCQkJZ3JvdXBoZWFkaW5nID0gJGVsLmNoaWxkcmVuKCAibGVnZW5kIiApLAoJCQlmbENvcm5lcnMgPSBvLmRpcmVjdGlvbiA9PSAiaG9yaXpvbnRhbCIgPyBbICJ1aS1jb3JuZXItbGVmdCIsICJ1aS1jb3JuZXItcmlnaHQiIF0gOiBbICJ1aS1jb3JuZXItdG9wIiwgInVpLWNvcm5lci1ib3R0b20iIF0sCgkJCXR5cGUgPSAkZWwuZmluZCggImlucHV0IiApLmZpcnN0KCkuYXR0ciggInR5cGUiICk7CgoJCS8vIFJlcGxhY2UgbGVnZW5kIHdpdGggbW9yZSBzdHlsYWJsZSByZXBsYWNlbWVudCBkaXYKCQlpZiAoIGdyb3VwaGVhZGluZy5sZW5ndGggKSB7CgkJCSRlbC53cmFwSW5uZXIoICI8ZGl2IGNsYXNzPSd1aS1jb250cm9sZ3JvdXAtY29udHJvbHMnPjwvZGl2PiIgKTsKCQkJJCggIjxkaXYgcm9sZT0naGVhZGluZycgY2xhc3M9J3VpLWNvbnRyb2xncm91cC1sYWJlbCc+IiArIGdyb3VwaGVhZGluZy5odG1sKCkgKyAiPC9kaXY+IiApLmluc2VydEJlZm9yZSggJGVsLmNoaWxkcmVuKDApICk7CgkJCWdyb3VwaGVhZGluZy5yZW1vdmUoKTsKCQl9CgoJCSRlbC5hZGRDbGFzcyggInVpLWNvcm5lci1hbGwgdWktY29udHJvbGdyb3VwIHVpLWNvbnRyb2xncm91cC0iICsgby5kaXJlY3Rpb24gKTsKCgkJLy8gVE9ETzogVGhpcyBzaG91bGQgYmUgbW92ZWQgb3V0IHRvIHRoZSBjbG9zdXJlCgkJLy8gb3RoZXJ3aXNlIGl0IGlzIHJlZGVmaW5lZCBlYWNoIHRpbWUgY29udHJvbGdyb3VwKCkgaXMgY2FsbGVkCgkJZnVuY3Rpb24gZmxpcENsYXNzZXMoIGVscyApIHsKCQkJZWxzLnJlbW92ZUNsYXNzKCAidWktYnRuLWNvcm5lci1hbGwgdWktc2hhZG93IiApCgkJCQkuZXEoIDAgKS5hZGRDbGFzcyggZmxDb3JuZXJzWyAwIF0gKQoJCQkJLmVuZCgpCgkJCQkubGFzdCgpLmFkZENsYXNzKCBmbENvcm5lcnNbIDEgXSApLmFkZENsYXNzKCAidWktY29udHJvbGdyb3VwLWxhc3QiICk7CgkJfQoKCQlmbGlwQ2xhc3NlcyggJGVsLmZpbmQoICIudWktYnRuIiArICggby5leGNsdWRlSW52aXNpYmxlID8gIjp2aXNpYmxlIiA6ICIiICkgKSApOwoJCWZsaXBDbGFzc2VzKCAkZWwuZmluZCggIi51aS1idG4taW5uZXIiICkgKTsKCgkJaWYgKCBvLnNoYWRvdyApIHsKCQkJJGVsLmFkZENsYXNzKCAidWktc2hhZG93IiApOwoJCX0KCX0pOwp9OwoKLy9hdXRvIHNlbGYtaW5pdCB3aWRnZXRzCiQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKXsKCSQoICI6anFtRGF0YShyb2xlPSdjb250cm9sZ3JvdXAnKSIsIGUudGFyZ2V0ICkuY29udHJvbGdyb3VwKHsgZXhjbHVkZUludmlzaWJsZTogZmFsc2UgfSk7Cn0pOwoKfSkoalF1ZXJ5KTsvKgoqICJsaW5rcyIgcGx1Z2luIC0gc2ltcGxlIGNsYXNzIGFkZGl0aW9ucyBmb3IgbGlua3MKKi8KCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZWNyZWF0ZSBjcmVhdGUiLCBmdW5jdGlvbiggZSApewoJCgkvL2xpbmtzIHdpdGhpbiBjb250ZW50IGFyZWFzCgkkKCBlLnRhcmdldCApCgkJLmZpbmQoICJhIiApCgkJLm5vdCggIi51aS1idG4sIC51aS1saW5rLWluaGVyaXQsIDpqcW1EYXRhKHJvbGU9J25vbmUnKSwgOmpxbURhdGEocm9sZT0nbm9qcycpIiApCgkJLmFkZENsYXNzKCAidWktbGluayIgKTsKCn0pOwoKfSkoIGpRdWVyeSApOy8qCiogImZpeEhlYWRlckZvb3RlciIgcGx1Z2luIC0gb24tZGVtYW5kIHBvc2l0aW9uaW5nIGZvciBoZWFkZXJzLGZvb3RlcnMKKi8KCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIHNsaWRlRG93bkNsYXNzID0gInVpLWhlYWRlci1maXhlZCB1aS1maXhlZC1pbmxpbmUgZmFkZSIsCglzbGlkZVVwQ2xhc3MgPSAidWktZm9vdGVyLWZpeGVkIHVpLWZpeGVkLWlubGluZSBmYWRlIiwKCglzbGlkZURvd25TZWxlY3RvciA9ICIudWktaGVhZGVyOmpxbURhdGEocG9zaXRpb249J2ZpeGVkJykiLAoJc2xpZGVVcFNlbGVjdG9yID0gIi51aS1mb290ZXI6anFtRGF0YShwb3NpdGlvbj0nZml4ZWQnKSI7CgokLmZuLmZpeEhlYWRlckZvb3RlciA9IGZ1bmN0aW9uKCBvcHRpb25zICkgewoKCWlmICggISQuc3VwcG9ydC5zY3JvbGxUb3AgfHwgKCAkLnN1cHBvcnQudG91Y2hPdmVyZmxvdyAmJiAkLm1vYmlsZS50b3VjaE92ZXJmbG93RW5hYmxlZCApICkgewoJCXJldHVybiB0aGlzOwoJfQoKCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJdmFyICR0aGlzID0gJCggdGhpcyApOwoKCQlpZiAoICR0aGlzLmpxbURhdGEoICJmdWxsc2NyZWVuIiApICkgewoJCQkkdGhpcy5hZGRDbGFzcyggInVpLXBhZ2UtZnVsbHNjcmVlbiIgKTsKCQl9CgoJCS8vIFNob3VsZCBiZSBzbGlkZWRvd24KCQkkdGhpcy5maW5kKCBzbGlkZURvd25TZWxlY3RvciApLmFkZENsYXNzKCBzbGlkZURvd25DbGFzcyApOwoKCQkvLyBTaG91bGQgYmUgc2xpZGV1cAoJCSR0aGlzLmZpbmQoIHNsaWRlVXBTZWxlY3RvciApLmFkZENsYXNzKCBzbGlkZVVwQ2xhc3MgKTsKCX0pOwp9OwoKLy8gc2luZ2xlIGNvbnRyb2xsZXIgZm9yIGFsbCBzaG93aW5nLGhpZGluZyx0b2dnbGluZwokLm1vYmlsZS5maXhlZFRvb2xiYXJzID0gKGZ1bmN0aW9uKCkgewoKCWlmICggISQuc3VwcG9ydC5zY3JvbGxUb3AgfHwgKCAkLnN1cHBvcnQudG91Y2hPdmVyZmxvdyAmJiAkLm1vYmlsZS50b3VjaE92ZXJmbG93RW5hYmxlZCApICkgewoJCXJldHVybjsKCX0KCgl2YXIgc3RpY2t5Rm9vdGVyLCBkZWxheVRpbWVyLAoJCWN1cnJlbnRzdGF0ZSA9ICJpbmxpbmUiLAoJCWF1dG9IaWRlTW9kZSA9IGZhbHNlLAoJCXNob3dEZWxheSA9IDEwMCwKCQlpZ25vcmVUYXJnZXRzID0gImEsaW5wdXQsdGV4dGFyZWEsc2VsZWN0LGJ1dHRvbixsYWJlbCwudWktaGVhZGVyLWZpeGVkLC51aS1mb290ZXItZml4ZWQiLAoJCXRvb2xiYXJTZWxlY3RvciA9ICIudWktaGVhZGVyLWZpeGVkOmZpcnN0LCAudWktZm9vdGVyLWZpeGVkOm5vdCgudWktZm9vdGVyLWR1cGxpY2F0ZSk6bGFzdCIsCgkJLy8gZm9yIHN0b3JpbmcgcXVpY2sgcmVmZXJlbmNlcyB0byBkdXBsaWNhdGUgZm9vdGVycwoJCXN1cHBvcnRUb3VjaCA9ICQuc3VwcG9ydC50b3VjaCwKCQl0b3VjaFN0YXJ0RXZlbnQgPSBzdXBwb3J0VG91Y2ggPyAidG91Y2hzdGFydCIgOiAibW91c2Vkb3duIiwKCQl0b3VjaFN0b3BFdmVudCA9IHN1cHBvcnRUb3VjaCA/ICJ0b3VjaGVuZCIgOiAibW91c2V1cCIsCgkJc3RhdGVCZWZvcmUgPSBudWxsLAoJCXNjcm9sbFRyaWdnZXJlZCA9IGZhbHNlLAoJCXRvdWNoVG9nZ2xlRW5hYmxlZCA9IHRydWU7CgoJZnVuY3Rpb24gc2hvd0V2ZW50Q2FsbGJhY2soIGV2ZW50ICkgewoJCS8vIEFuIGV2ZW50IHRoYXQgYWZmZWN0cyB0aGUgZGltZW5zaW9ucyBvZiB0aGUgdmlzdWFsIHZpZXdwb3J0IGhhcwoJCS8vIGJlZW4gdHJpZ2dlcmVkLiBJZiB0aGUgaGVhZGVyIGFuZC9vciBmb290ZXIgZm9yIHRoZSBjdXJyZW50IHBhZ2UgYXJlIGluIG92ZXJsYXkKCQkvLyBtb2RlLCB3ZSB3YW50IHRvIGhpZGUgdGhlbSwgYW5kIHRoZW4gZmlyZSBvZmYgYSB0aW1lciB0byBzaG93IHRoZW0gYXQgYSBsYXRlcgoJCS8vIHBvaW50LiBFdmVudHMgbGlrZSBhIHJlc2l6ZSBjYW4gYmUgdHJpZ2dlcmVkIGNvbnRpbnVvdXNseSBkdXJpbmcgYSBzY3JvbGwsIG9uCgkJLy8gc29tZSBwbGF0Zm9ybXMsIHNvIHRoZSB0aW1lciBpcyB1c2VkIHRvIGRlbGF5IHRoZSBhY3R1YWwgcG9zaXRpb25pbmcgdW50aWwgdGhlCgkJLy8gZmxvb2Qgb2YgZXZlbnRzIGhhdmUgc3Vic2lkZWQuCgkJLy8KCQkvLyBJZiB3ZSBhcmUgaW4gYXV0b0hpZGVNb2RlLCB3ZSBkb24ndCBkbyBhbnl0aGluZyBiZWNhdXNlIHdlIGtub3cgdGhlIHNjcm9sbAoJCS8vIGNhbGxiYWNrcyBmb3IgdGhlIHBsdWdpbiB3aWxsIGZpcmUgb2ZmIGEgc2hvdyB3aGVuIHRoZSBzY3JvbGxpbmcgaGFzIHN0b3BwZWQuCgkJaWYgKCAhYXV0b0hpZGVNb2RlICYmIGN1cnJlbnRzdGF0ZSA9PT0gIm92ZXJsYXkiICkgewoJCQlpZiAoICFkZWxheVRpbWVyICkgewoJCQkJJC5tb2JpbGUuZml4ZWRUb29sYmFycy5oaWRlKCB0cnVlICk7CgkJCX0KCgkJCSQubW9iaWxlLmZpeGVkVG9vbGJhcnMuc3RhcnRTaG93VGltZXIoKTsKCQl9Cgl9CgoJJChmdW5jdGlvbigpIHsKCQl2YXIgJGRvY3VtZW50ID0gJCggZG9jdW1lbnQgKSwKCQkJJHdpbmRvdyA9ICQoIHdpbmRvdyApOwoKCQkkZG9jdW1lbnQKCQkJLmJpbmQoICJ2bW91c2Vkb3duIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJaWYgKCB0b3VjaFRvZ2dsZUVuYWJsZWQgKSB7CgkJCQkJc3RhdGVCZWZvcmUgPSBjdXJyZW50c3RhdGU7CgkJCQl9CgkJCX0pCgkJCS5iaW5kKCAidmNsaWNrIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJaWYgKCB0b3VjaFRvZ2dsZUVuYWJsZWQgKSB7CgoJCQkJCWlmICggJChldmVudC50YXJnZXQpLmNsb3Nlc3QoIGlnbm9yZVRhcmdldHMgKS5sZW5ndGggKSB7CgkJCQkJCXJldHVybjsKCQkJCQl9CgoJCQkJCWlmICggIXNjcm9sbFRyaWdnZXJlZCApIHsKCQkJCQkJJC5tb2JpbGUuZml4ZWRUb29sYmFycy50b2dnbGUoIHN0YXRlQmVmb3JlICk7CgkJCQkJCXN0YXRlQmVmb3JlID0gbnVsbDsKCQkJCQl9CgkJCQl9CgkJCX0pCgkJCS5iaW5kKCAic2lsZW50c2Nyb2xsIiwgc2hvd0V2ZW50Q2FsbGJhY2sgKTsKCgoJCS8vIFRoZSBiZWxvdyBjaGVja3MgZmlyc3QgZm9yIGEgJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkgdmFsdWUsIGFuZCBpZiB6ZXJvLCBiaW5kcyBzY3JvbGwgZXZlbnRzIHRvICQod2luZG93KSBpbnN0ZWFkLgoJCS8vIElmIHRoZSBzY3JvbGxUb3AgdmFsdWUgaXMgYWN0dWFsbHkgemVybywgYm90aCB3aWxsIHJldHVybiB6ZXJvIGFueXdheS4KCQkvLwoJCS8vIFdvcmtzIHdpdGggJChkb2N1bWVudCksIG5vdCAkKHdpbmRvdykgOiBPcGVyYSBNb2JpbGUgKFdpbk1PIHBob25lOyBraW5kYSBicm9rZW4gYW55d2F5KQoJCS8vIFdvcmtzIHdpdGggJCh3aW5kb3cpLCBub3QgJChkb2N1bWVudCkgOiBJRSA3LzgKCQkvLyBXb3JrcyB3aXRoIGVpdGhlciAkKHdpbmRvdykgb3IgJChkb2N1bWVudCkgOiBDaHJvbWUsIEZGIDMuNi80LCBBbmRyb2lkIDEuNi8yLjEsIGlPUwoJCS8vIE5lZWRzIHdvcmsgZWl0aGVyIHdheSA6IEJCNSwgT3BlcmEgTW9iaWxlIChpT1MpCgoJCSggKCAkZG9jdW1lbnQuc2Nyb2xsVG9wKCkgPT09IDAgKSA/ICR3aW5kb3cgOiAkZG9jdW1lbnQgKQoJCQkuYmluZCggInNjcm9sbHN0YXJ0IiwgZnVuY3Rpb24oIGV2ZW50ICkgewoKCQkJCXNjcm9sbFRyaWdnZXJlZCA9IHRydWU7CgoJCQkJaWYgKCBzdGF0ZUJlZm9yZSA9PT0gbnVsbCApIHsKCQkJCQlzdGF0ZUJlZm9yZSA9IGN1cnJlbnRzdGF0ZTsKCQkJCX0KCgkJCQkvLyBXZSBvbmx5IGVudGVyIGF1dG9IaWRlTW9kZSBpZiB0aGUgaGVhZGVycy9mb290ZXJzIGFyZSBpbgoJCQkJLy8gYW4gb3ZlcmxheSBzdGF0ZSBvciB0aGUgc2hvdyB0aW1lciB3YXMgc3RhcnRlZC4gSWYgdGhlCgkJCQkvLyBzaG93IHRpbWVyIGlzIHNldCwgY2xlYXIgaXQgc28gdGhlIGhlYWRlcnMvZm9vdGVycyBkb24ndAoJCQkJLy8gc2hvdyB1cCB1bnRpbCBhZnRlciB3ZSdyZSBkb25lIHNjcm9sbGluZy4KCQkJCXZhciBpc092ZXJsYXlTdGF0ZSA9IHN0YXRlQmVmb3JlID09ICJvdmVybGF5IjsKCgkJCQlhdXRvSGlkZU1vZGUgPSBpc092ZXJsYXlTdGF0ZSB8fCAhIWRlbGF5VGltZXI7CgoJCQkJaWYgKCBhdXRvSGlkZU1vZGUgKSB7CgkJCQkJJC5tb2JpbGUuZml4ZWRUb29sYmFycy5jbGVhclNob3dUaW1lcigpOwoKCQkJCQlpZiAoIGlzT3ZlcmxheVN0YXRlICkgewoJCQkJCQkkLm1vYmlsZS5maXhlZFRvb2xiYXJzLmhpZGUoIHRydWUgKTsKCQkJCQl9CgkJCQl9CgkJCX0pCgkJCS5iaW5kKCAic2Nyb2xsc3RvcCIsIGZ1bmN0aW9uKCBldmVudCApIHsKCgkJCQlpZiAoICQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIGlnbm9yZVRhcmdldHMgKS5sZW5ndGggKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCXNjcm9sbFRyaWdnZXJlZCA9IGZhbHNlOwoKCQkJCWlmICggYXV0b0hpZGVNb2RlICkgewoJCQkJCSQubW9iaWxlLmZpeGVkVG9vbGJhcnMuc3RhcnRTaG93VGltZXIoKTsKCQkJCQlhdXRvSGlkZU1vZGUgPSBmYWxzZTsKCQkJCX0KCQkJCXN0YXRlQmVmb3JlID0gbnVsbDsKCQkJfSk7CgoJCQkkd2luZG93LmJpbmQoICJyZXNpemUgdXBkYXRlbGF5b3V0Iiwgc2hvd0V2ZW50Q2FsbGJhY2sgKTsKCX0pOwoKCS8vIDEuIEJlZm9yZSBwYWdlIGlzIHNob3duLCBjaGVjayBmb3IgZHVwbGljYXRlIGZvb3RlcgoJLy8gMi4gQWZ0ZXIgcGFnZSBpcyBzaG93biwgYXBwZW5kIGZvb3RlciB0byBuZXcgcGFnZQoJJCggZG9jdW1lbnQgKS5kZWxlZ2F0ZSggIi51aS1wYWdlIiwgInBhZ2ViZWZvcmVzaG93IiwgZnVuY3Rpb24oIGV2ZW50LCB1aSApIHsKCQkJdmFyIHBhZ2UgPSAkKCBldmVudC50YXJnZXQgKSwKCQkJCWZvb3RlciA9IHBhZ2UuZmluZCggIjpqcW1EYXRhKHJvbGU9J2Zvb3RlcicpIiApLAoJCQkJaWQgPSBmb290ZXIuZGF0YSggImlkIiApLAoJCQkJcHJldlBhZ2UgPSB1aS5wcmV2UGFnZSwKCQkJCXByZXZGb290ZXIgPSBwcmV2UGFnZSAmJiBwcmV2UGFnZS5maW5kKCAiOmpxbURhdGEocm9sZT0nZm9vdGVyJykiICksCgkJCQlwcmV2Rm9vdGVyTWF0Y2hlcyA9IHByZXZGb290ZXIubGVuZ3RoICYmIHByZXZGb290ZXIuanFtRGF0YSggImlkIiApID09PSBpZDsKCgkJCWlmICggaWQgJiYgcHJldkZvb3Rlck1hdGNoZXMgKSB7CgkJCQlzdGlja3lGb290ZXIgPSBmb290ZXI7CgkJCQlzZXRUb3AoIHN0aWNreUZvb3Rlci5yZW1vdmVDbGFzcyggImZhZGUgaW4gb3V0IiApLmFwcGVuZFRvKCAkLm1vYmlsZS5wYWdlQ29udGFpbmVyICkgKTsKCQkJfQoJCX0pCgkJLmRlbGVnYXRlKCAiLnVpLXBhZ2UiLCAicGFnZXNob3ciLCBmdW5jdGlvbiggZXZlbnQsIHVpICkgewoJCQl2YXIgJHRoaXMgPSAkKCB0aGlzICk7CgoJCQlpZiAoIHN0aWNreUZvb3RlciAmJiBzdGlja3lGb290ZXIubGVuZ3RoICkgewoJCQkJc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCQlzZXRUb3AoIHN0aWNreUZvb3Rlci5hcHBlbmRUbyggJHRoaXMgKS5hZGRDbGFzcyggImZhZGUiICkgKTsKCQkJCQlzdGlja3lGb290ZXIgPSBudWxsOwoJCQkJfSwgNTAwKTsKCQkJfQoKCQkJJC5tb2JpbGUuZml4ZWRUb29sYmFycy5zaG93KCB0cnVlLCB0aGlzICk7CgkJfSk7CgoJLy8gV2hlbiBhIGNvbGxhcHNpYmxlIGlzIGhpZGRlbiBvciBzaG93biB3ZSBuZWVkIHRvIHRyaWdnZXIgdGhlIGZpeGVkIHRvb2xiYXIgdG8gcmVwb3NpdGlvbiBpdHNlbGYgKCMxNjM1KQoJJCggZG9jdW1lbnQgKS5kZWxlZ2F0ZSggIi51aS1jb2xsYXBzaWJsZS1jb250YWluIiwgImNvbGxhcHNlIGV4cGFuZCIsIHNob3dFdmVudENhbGxiYWNrICk7CgoJLy8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBpcyBicm9rZW4gaW4gaU9TIDMuMi4xIG9uIHRoZSBpUGFkLiBUaGUKCS8vIGNvb3JkaW5hdGVzIGluc2lkZSBvZiB0aGUgcmVjdCBpdCByZXR1cm5zIGRvbid0IGhhdmUgdGhlIHBhZ2Ugc2Nyb2xsIHBvc2l0aW9uCgkvLyBmYWN0b3JlZCBvdXQgb2YgaXQgbGlrZSB0aGUgb3RoZXIgcGxhdGZvcm1zIGRvLiBUbyBnZXQgYXJvdW5kIHRoaXMsCgkvLyB3ZSdsbCBqdXN0IGNhbGN1bGF0ZSB0aGUgdG9wIG9mZnNldCB0aGUgb2xkIGZhc2hpb25lZCB3YXkgdW50aWwgY29yZSBoYXMKCS8vIGEgY2hhbmNlIHRvIGZpZ3VyZSBvdXQgaG93IHRvIGhhbmRsZSB0aGlzIHNpdHVhdGlvbi4KCS8vCgkvLyBUT0RPOiBXZSdsbCBuZWVkIHRvIGdldCByaWQgb2YgZ2V0T2Zmc2V0VG9wKCkgb25jZSBhIGZpeCBnZXRzIGZvbGRlZCBpbnRvIGNvcmUuCgoJZnVuY3Rpb24gZ2V0T2Zmc2V0VG9wKCBlbGUgKSB7CgkJdmFyIHRvcCA9IDAsCgkJCW9wLCBib2R5OwoKCQlpZiAoIGVsZSApIHsKCQkJYm9keSA9IGRvY3VtZW50LmJvZHk7CgkJCW9wID0gZWxlLm9mZnNldFBhcmVudDsKCQkJdG9wID0gZWxlLm9mZnNldFRvcDsKCgkJCXdoaWxlICggZWxlICYmIGVsZSAhPSBib2R5ICkgewoJCQkJdG9wICs9IGVsZS5zY3JvbGxUb3AgfHwgMDsKCgkJCQlpZiAoIGVsZSA9PSBvcCApIHsKCQkJCQl0b3AgKz0gb3Aub2Zmc2V0VG9wOwoJCQkJCW9wID0gZWxlLm9mZnNldFBhcmVudDsKCQkJCX0KCgkJCQllbGUgPSBlbGUucGFyZW50Tm9kZTsKCQkJfQoJCX0KCQlyZXR1cm4gdG9wOwoJfQoKCWZ1bmN0aW9uIHNldFRvcCggZWwgKSB7CgkJdmFyIGZyb21Ub3AgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCksCgkJCXRoaXNUb3AgPSBnZXRPZmZzZXRUb3AoIGVsWyAwIF0gKSwgLy8gZWwub2Zmc2V0KCkudG9wIHJldHVybnMgdGhlIHdyb25nIHZhbHVlIG9uIGlQYWQgaU9TIDMuMi4xLCBjYWxsIG91ciB3b3JrYXJvdW5kIGluc3RlYWQuCgkJCXRoaXNDU1N0b3AgPSBlbC5jc3MoICJ0b3AiICkgPT0gImF1dG8iID8gMCA6IHBhcnNlRmxvYXQoZWwuY3NzKCAidG9wIiApKSwKCQkJc2NyZWVuSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0LAoJCQl0aGlzSGVpZ2h0ID0gZWwub3V0ZXJIZWlnaHQoKSwKCQkJdXNlUmVsYXRpdmUgPSBlbC5wYXJlbnRzKCAiLnVpLXBhZ2U6bm90KC51aS1wYWdlLWZ1bGxzY3JlZW4pIiApLmxlbmd0aCwKCQkJcmVsdmFsOwoKCQlpZiAoIGVsLmlzKCAiLnVpLWhlYWRlci1maXhlZCIgKSApIHsKCgkJCXJlbHZhbCA9IGZyb21Ub3AgLSB0aGlzVG9wICsgdGhpc0NTU3RvcDsKCgkJCWlmICggcmVsdmFsIDwgdGhpc1RvcCApIHsKCQkJCXJlbHZhbCA9IDA7CgkJCX0KCgkJCXJldHVybiBlbC5jc3MoICJ0b3AiLCB1c2VSZWxhdGl2ZSA/IHJlbHZhbCA6IGZyb21Ub3AgKTsKCQl9IGVsc2UgewoJCQkvLyByZWx2YWwgPSAtMSAqICh0aGlzVG9wIC0gKGZyb21Ub3AgKyBzY3JlZW5IZWlnaHQpICsgdGhpc0NTU3RvcCArIHRoaXNIZWlnaHQpOwoJCQkvLyBpZiAoIHJlbHZhbCA+IHRoaXNUb3AgKSB7IHJlbHZhbCA9IDA7IH0KCQkJcmVsdmFsID0gZnJvbVRvcCArIHNjcmVlbkhlaWdodCAtIHRoaXNIZWlnaHQgLSAodGhpc1RvcCAtIHRoaXNDU1N0b3AgKTsKCgkJCXJldHVybiBlbC5jc3MoICJ0b3AiLCB1c2VSZWxhdGl2ZSA/IHJlbHZhbCA6IGZyb21Ub3AgKyBzY3JlZW5IZWlnaHQgLSB0aGlzSGVpZ2h0ICk7CgkJfQoJfQoKCS8vIEV4cG9zZWQgbWV0aG9kcwoJcmV0dXJuIHsKCgkJc2hvdzogZnVuY3Rpb24oIGltbWVkaWF0ZWx5LCBwYWdlICkgewoKCQkJJC5tb2JpbGUuZml4ZWRUb29sYmFycy5jbGVhclNob3dUaW1lcigpOwoKCQkJY3VycmVudHN0YXRlID0gIm92ZXJsYXkiOwoKCQkJdmFyICRhcCA9IHBhZ2UgPyAkKCBwYWdlICkgOgoJCQkJCSggJC5tb2JpbGUuYWN0aXZlUGFnZSA/ICQubW9iaWxlLmFjdGl2ZVBhZ2UgOgoJCQkJCQkkKCAiLnVpLXBhZ2UtYWN0aXZlIiApICk7CgoJCQlyZXR1cm4gJGFwLmNoaWxkcmVuKCB0b29sYmFyU2VsZWN0b3IgKS5lYWNoKGZ1bmN0aW9uKCkgewoKCQkJCXZhciBlbCA9ICQoIHRoaXMgKSwKCQkJCQlmcm9tVG9wID0gJCggd2luZG93ICkuc2Nyb2xsVG9wKCksCgkJCQkJLy8gZWwub2Zmc2V0KCkudG9wIHJldHVybnMgdGhlIHdyb25nIHZhbHVlIG9uIGlQYWQgaU9TIDMuMi4xLCBjYWxsIG91ciB3b3JrYXJvdW5kIGluc3RlYWQuCgkJCQkJdGhpc1RvcCA9IGdldE9mZnNldFRvcCggZWxbIDAgXSApLAoJCQkJCXNjcmVlbkhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCwKCQkJCQl0aGlzSGVpZ2h0ID0gZWwub3V0ZXJIZWlnaHQoKSwKCQkJCQlhbHJlYWR5VmlzaWJsZSA9ICggZWwuaXMoICIudWktaGVhZGVyLWZpeGVkIiApICYmIGZyb21Ub3AgPD0gdGhpc1RvcCArIHRoaXNIZWlnaHQgKSB8fAoJCQkJCQkJCQkJCQkJCSggZWwuaXMoICIudWktZm9vdGVyLWZpeGVkIiApICYmIHRoaXNUb3AgPD0gZnJvbVRvcCArIHNjcmVlbkhlaWdodCApOwoKCQkJCS8vIEFkZCBzdGF0ZSBjbGFzcwoJCQkJZWwuYWRkQ2xhc3MoICJ1aS1maXhlZC1vdmVybGF5IiApLnJlbW92ZUNsYXNzKCAidWktZml4ZWQtaW5saW5lIiApOwoKCQkJCWlmICggIWFscmVhZHlWaXNpYmxlICYmICFpbW1lZGlhdGVseSApIHsKCQkJCQllbC5hbmltYXRpb25Db21wbGV0ZShmdW5jdGlvbigpIHsKCQkJCQkJZWwucmVtb3ZlQ2xhc3MoICJpbiIgKTsKCQkJCQl9KS5hZGRDbGFzcyggImluIiApOwoJCQkJfQoJCQkJc2V0VG9wKGVsKTsKCQkJfSk7CgkJfSwKCgkJaGlkZTogZnVuY3Rpb24oIGltbWVkaWF0ZWx5ICkgewoKCQkJY3VycmVudHN0YXRlID0gImlubGluZSI7CgoJCQl2YXIgJGFwID0gJC5tb2JpbGUuYWN0aXZlUGFnZSA/ICQubW9iaWxlLmFjdGl2ZVBhZ2UgOgoJCQkJCQkJCQkkKCAiLnVpLXBhZ2UtYWN0aXZlIiApOwoKCQkJcmV0dXJuICRhcC5jaGlsZHJlbiggdG9vbGJhclNlbGVjdG9yICkuZWFjaChmdW5jdGlvbigpIHsKCgkJCQl2YXIgZWwgPSAkKHRoaXMpLAoJCQkJCXRoaXNDU1N0b3AgPSBlbC5jc3MoICJ0b3AiICksCgkJCQkJY2xhc3NlczsKCgkJCQl0aGlzQ1NTdG9wID0gdGhpc0NTU3RvcCA9PSAiYXV0byIgPyAwIDoKCQkJCQkJCQkJCQlwYXJzZUZsb2F0KHRoaXNDU1N0b3ApOwoKCQkJCS8vIEFkZCBzdGF0ZSBjbGFzcwoJCQkJZWwuYWRkQ2xhc3MoICJ1aS1maXhlZC1pbmxpbmUiICkucmVtb3ZlQ2xhc3MoICJ1aS1maXhlZC1vdmVybGF5IiApOwoKCQkJCWlmICggdGhpc0NTU3RvcCA8IDAgfHwgKCBlbC5pcyggIi51aS1oZWFkZXItZml4ZWQiICkgJiYgdGhpc0NTU3RvcCAhPT0gMCApICkgewoKCQkJCQlpZiAoIGltbWVkaWF0ZWx5ICkgewoJCQkJCQllbC5jc3MoICJ0b3AiLCAwKTsKCQkJCQl9IGVsc2UgewoKCQkJCQkJaWYgKCBlbC5jc3MoICJ0b3AiICkgIT09ICJhdXRvIiAmJiBwYXJzZUZsb2F0KCBlbC5jc3MoICJ0b3AiICkgKSAhPT0gMCApIHsKCgkJCQkJCQljbGFzc2VzID0gIm91dCByZXZlcnNlIjsKCgkJCQkJCQllbC5hbmltYXRpb25Db21wbGV0ZShmdW5jdGlvbigpIHsKCQkJCQkJCQllbC5yZW1vdmVDbGFzcyggY2xhc3NlcyApLmNzcyggInRvcCIsIDAgKTsKCQkJCQkJCX0pLmFkZENsYXNzKCBjbGFzc2VzICk7CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0pOwoJCX0sCgoJCXN0YXJ0U2hvd1RpbWVyOiBmdW5jdGlvbigpIHsKCgkJCSQubW9iaWxlLmZpeGVkVG9vbGJhcnMuY2xlYXJTaG93VGltZXIoKTsKCgkJCXZhciBhcmdzID0gW10uc2xpY2UuY2FsbCggYXJndW1lbnRzICk7CgoJCQlkZWxheVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCWRlbGF5VGltZXIgPSB1bmRlZmluZWQ7CgkJCQkkLm1vYmlsZS5maXhlZFRvb2xiYXJzLnNob3cuYXBwbHkoIG51bGwsIGFyZ3MgKTsKCQkJfSwgc2hvd0RlbGF5KTsKCQl9LAoKCQljbGVhclNob3dUaW1lcjogZnVuY3Rpb24oKSB7CgkJCWlmICggZGVsYXlUaW1lciApIHsKCQkJCWNsZWFyVGltZW91dCggZGVsYXlUaW1lciApOwoJCQl9CgkJCWRlbGF5VGltZXIgPSB1bmRlZmluZWQ7CgkJfSwKCgkJdG9nZ2xlOiBmdW5jdGlvbiggZnJvbSApIHsKCQkJaWYgKCBmcm9tICkgewoJCQkJY3VycmVudHN0YXRlID0gZnJvbTsKCQkJfQoJCQlyZXR1cm4gKCBjdXJyZW50c3RhdGUgPT09ICJvdmVybGF5IiApID8gJC5tb2JpbGUuZml4ZWRUb29sYmFycy5oaWRlKCkgOgoJCQkJCQkJCSQubW9iaWxlLmZpeGVkVG9vbGJhcnMuc2hvdygpOwoJCX0sCgoJCXNldFRvdWNoVG9nZ2xlRW5hYmxlZDogZnVuY3Rpb24oIGVuYWJsZWQgKSB7CgkJCXRvdWNoVG9nZ2xlRW5hYmxlZCA9IGVuYWJsZWQ7CgkJfQoJfTsKfSkoKTsKCi8vYXV0byBzZWxmLWluaXQgd2lkZ2V0cwokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIGNyZWF0ZSIsIGZ1bmN0aW9uKCBldmVudCApIHsKCglpZiAoICQoICI6anFtRGF0YShwb3NpdGlvbj0nZml4ZWQnKSIsIGV2ZW50LnRhcmdldCApLmxlbmd0aCApIHsKCgkJJCggZXZlbnQudGFyZ2V0ICkuZWFjaChmdW5jdGlvbigpIHsKCgkJCWlmICggISQuc3VwcG9ydC5zY3JvbGxUb3AgfHwgKCAkLnN1cHBvcnQudG91Y2hPdmVyZmxvdyAmJiAkLm1vYmlsZS50b3VjaE92ZXJmbG93RW5hYmxlZCApICkgewoJCQkJcmV0dXJuIHRoaXM7CgkJCX0KCgkJCXZhciAkdGhpcyA9ICQoIHRoaXMgKTsKCgkJCWlmICggJHRoaXMuanFtRGF0YSggImZ1bGxzY3JlZW4iICkgKSB7CgkJCQkkdGhpcy5hZGRDbGFzcyggInVpLXBhZ2UtZnVsbHNjcmVlbiIgKTsKCQkJfQoKCQkJLy8gU2hvdWxkIGJlIHNsaWRlZG93bgoJCQkkdGhpcy5maW5kKCBzbGlkZURvd25TZWxlY3RvciApLmFkZENsYXNzKCBzbGlkZURvd25DbGFzcyApOwoKCQkJLy8gU2hvdWxkIGJlIHNsaWRldXAKCQkJJHRoaXMuZmluZCggc2xpZGVVcFNlbGVjdG9yICkuYWRkQ2xhc3MoIHNsaWRlVXBDbGFzcyApOwoKCQl9KQoKCX0KfSk7Cgp9KSggalF1ZXJ5ICk7Ci8qCiogImZpeEhlYWRlckZvb3RlciIgbmF0aXZlIHBsdWdpbiAtIEJlaGF2aW9yIGZvciAiZml4ZWQiIGhlYWRlcnMsZm9vdGVycywgYW5kIHNjcm9sbGluZyBpbm5lciBjb250ZW50CiovCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCi8vIEVuYWJsZSB0b3VjaCBvdmVyZmxvdyBzY3JvbGxpbmcgd2hlbiBpdCdzIG5hdGl2ZWx5IHN1cHBvcnRlZAokLm1vYmlsZS50b3VjaE92ZXJmbG93RW5hYmxlZCA9IGZhbHNlOwoKLy8gRW5hYmxlZCB6b29tIHdoZW4gdG91Y2ggb3ZlcmZsb3cgaXMgZW5hYmxlZC4gQ2FuIGNhdXNlIHVzYWJpbGl0eSBpc3N1ZXMsIHVuZm9ydHVuYXRlbHkKJC5tb2JpbGUudG91Y2hPdmVyZmxvd1pvb21FbmFibGVkID0gZmFsc2U7CgokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJaWYoICQuc3VwcG9ydC50b3VjaE92ZXJmbG93ICYmICQubW9iaWxlLnRvdWNoT3ZlcmZsb3dFbmFibGVkICl7CgkJCgkJdmFyICR0YXJnZXQgPSAkKCBldmVudC50YXJnZXQgKSwKCQkJc2Nyb2xsU3RhcnRZID0gMDsKCQkJCgkJaWYoICR0YXJnZXQuaXMoICI6anFtRGF0YShyb2xlPSdwYWdlJykiICkgKXsKCQkJCgkJCSR0YXJnZXQuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciAkcGFnZSA9ICQoIHRoaXMgKSwKCQkJCQkkZml4aWVzID0gJHBhZ2UuZmluZCggIjpqcW1EYXRhKHJvbGU9J2hlYWRlcicpLCA6anFtRGF0YShyb2xlPSdmb290ZXInKSIgKS5maWx0ZXIoICI6anFtRGF0YShwb3NpdGlvbj0nZml4ZWQnKSIgKSwKCQkJCQlmdWxsU2NyZWVuID0gJHBhZ2UuanFtRGF0YSggImZ1bGxzY3JlZW4iICksCgkJCQkJJHNjcm9sbEVsZW0gPSAkZml4aWVzLmxlbmd0aCA/ICRwYWdlLmZpbmQoICIudWktY29udGVudCIgKSA6ICRwYWdlOwoJCQkJCgkJCQkkcGFnZS5hZGRDbGFzcyggInVpLW1vYmlsZS10b3VjaC1vdmVyZmxvdyIgKTsKCQkJCQoJCQkJJHNjcm9sbEVsZW0uYmluZCggInNjcm9sbHN0b3AiLCBmdW5jdGlvbigpewoJCQkJCWlmKCAkc2Nyb2xsRWxlbS5zY3JvbGxUb3AoKSA+IDAgKXsKCQkJCQkJd2luZG93LnNjcm9sbFRvKCAwLCAkLm1vYmlsZS5kZWZhdWx0SG9tZVNjcm9sbCApOwoJCQkJCX0KCQkJCX0pOwkKCQkJCQoJCQkJaWYoICRmaXhpZXMubGVuZ3RoICl7CgkJCQkJCgkJCQkJJHBhZ2UuYWRkQ2xhc3MoICJ1aS1uYXRpdmUtZml4ZWQiICk7CgkJCQkJCgkJCQkJaWYoIGZ1bGxTY3JlZW4gKXsKCgkJCQkJCSRwYWdlLmFkZENsYXNzKCAidWktbmF0aXZlLWZ1bGxzY3JlZW4iICk7CgoJCQkJCQkkZml4aWVzLmFkZENsYXNzKCAiZmFkZSBpbiIgKTsKCgkJCQkJCSQoIGRvY3VtZW50ICkuYmluZCggInZjbGljayIsIGZ1bmN0aW9uKCl7CgkJCQkJCQkkZml4aWVzCgkJCQkJCQkJLnJlbW92ZUNsYXNzKCAidWktbmF0aXZlLWJhcnMtaGlkZGVuIiApCgkJCQkJCQkJLnRvZ2dsZUNsYXNzKCAiaW4gb3V0IiApCgkJCQkJCQkJLmFuaW1hdGlvbkNvbXBsZXRlKGZ1bmN0aW9uKCl7CgkJCQkJCQkJCSQodGhpcykubm90KCAiLmluIiApLmFkZENsYXNzKCAidWktbmF0aXZlLWJhcnMtaGlkZGVuIiApOwoJCQkJCQkJCX0pOwoJCQkJCQl9KTsKCQkJCQl9CgkJCQl9CgkJCX0pOwoJCX0KCX0KfSk7Cgp9KSggalF1ZXJ5ICk7Ci8qCiogImluaXQiIC0gSW5pdGlhbGl6ZSB0aGUgZnJhbWV3b3JrCiovCgooZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkgewoJdmFyCSRodG1sID0gJCggImh0bWwiICksCgkJCSRoZWFkID0gJCggImhlYWQiICksCgkJCSR3aW5kb3cgPSAkKCB3aW5kb3cgKTsKCiAJLy8gdHJpZ2dlciBtb2JpbGVpbml0IGV2ZW50IC0gdXNlZnVsIGhvb2sgZm9yIGNvbmZpZ3VyaW5nICQubW9iaWxlIHNldHRpbmdzIGJlZm9yZSB0aGV5J3JlIHVzZWQKCSQoIHdpbmRvdy5kb2N1bWVudCApLnRyaWdnZXIoICJtb2JpbGVpbml0IiApOwoKCS8vIHN1cHBvcnQgY29uZGl0aW9ucwoJLy8gaWYgZGV2aWNlIHN1cHBvcnQgY29uZGl0aW9uKHMpIGFyZW4ndCBtZXQsIGxlYXZlIHRoaW5ncyBhcyB0aGV5IGFyZSAtPiBhIGJhc2ljLCB1c2FibGUgZXhwZXJpZW5jZSwKCS8vIG90aGVyd2lzZSwgcHJvY2VlZCB3aXRoIHRoZSBlbmhhbmNlbWVudHMKCWlmICggISQubW9iaWxlLmdyYWRlQSgpICkgewoJCXJldHVybjsKCX0KCgkvLyBvdmVycmlkZSBhamF4RW5hYmxlZCBvbiBwbGF0Zm9ybXMgdGhhdCBoYXZlIGtub3duIGNvbmZsaWN0cyB3aXRoIGhhc2ggaGlzdG9yeSB1cGRhdGVzCgkvLyBvciBnZW5lcmFsbHkgd29yayBiZXR0ZXIgYnJvd3NpbmcgaW4gcmVndWxhciBodHRwIGZvciBmdWxsIHBhZ2UgcmVmcmVzaGVzIChCQjUsIE9wZXJhIE1pbmkpCglpZiAoICQubW9iaWxlLmFqYXhCbGFja2xpc3QgKSB7CgkJJC5tb2JpbGUuYWpheEVuYWJsZWQgPSBmYWxzZTsKCX0KCgkvLyBhZGQgbW9iaWxlLCBpbml0aWFsIGxvYWQgInJlbmRlcmluZyIgY2xhc3NlcyB0byBkb2NFbAoJJGh0bWwuYWRkQ2xhc3MoICJ1aS1tb2JpbGUgdWktbW9iaWxlLXJlbmRlcmluZyIgKTsKCgkvLyBsb2FkaW5nIGRpdiB3aGljaCBhcHBlYXJzIGR1cmluZyBBamF4IHJlcXVlc3RzCgkvLyB3aWxsIG5vdCBhcHBlYXIgaWYgJC5tb2JpbGUubG9hZGluZ01lc3NhZ2UgaXMgZmFsc2UKCXZhciAkbG9hZGVyID0gJCggIjxkaXYgY2xhc3M9J3VpLWxvYWRlciB1aS1ib2R5LWEgdWktY29ybmVyLWFsbCc+PHNwYW4gY2xhc3M9J3VpLWljb24gdWktaWNvbi1sb2FkaW5nIHNwaW4nPjwvc3Bhbj48aDE+PC9oMT48L2Rpdj4iICk7CgoJJC5leHRlbmQoJC5tb2JpbGUsIHsKCQkvLyB0dXJuIG9uL29mZiBwYWdlIGxvYWRpbmcgbWVzc2FnZS4KCQlzaG93UGFnZUxvYWRpbmdNc2c6IGZ1bmN0aW9uKCkgewoJCQlpZiAoICQubW9iaWxlLmxvYWRpbmdNZXNzYWdlICkgewoJCQkJdmFyIGFjdGl2ZUJ0biA9ICQoICIuIiArICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICkuZmlyc3QoKTsKCgkJCQkkbG9hZGVyCgkJCQkJLmZpbmQoICJoMSIgKQoJCQkJCQkudGV4dCggJC5tb2JpbGUubG9hZGluZ01lc3NhZ2UgKQoJCQkJCQkuZW5kKCkKCQkJCQkuYXBwZW5kVG8oICQubW9iaWxlLnBhZ2VDb250YWluZXIgKQoJCQkJCS8vIHBvc2l0aW9uIGF0IHkgY2VudGVyIChpZiBzY3JvbGxUb3Agc3VwcG9ydGVkKSwgYWJvdmUgdGhlIGFjdGl2ZUJ0biAoaWYgZGVmaW5lZCksIG9yIGp1c3QgMTAwcHggZnJvbSB0b3AKCQkJCQkuY3NzKHsKCQkJCQkJdG9wOiAkLnN1cHBvcnQuc2Nyb2xsVG9wICYmICR3aW5kb3cuc2Nyb2xsVG9wKCkgKyAkd2luZG93LmhlaWdodCgpIC8gMiB8fAoJCQkJCQlhY3RpdmVCdG4ubGVuZ3RoICYmIGFjdGl2ZUJ0bi5vZmZzZXQoKS50b3AgfHwgMTAwCgkJCQkJfSk7CgkJCX0KCgkJCSRodG1sLmFkZENsYXNzKCAidWktbG9hZGluZyIgKTsKCQl9LAoKCQloaWRlUGFnZUxvYWRpbmdNc2c6IGZ1bmN0aW9uKCkgewoJCQkkaHRtbC5yZW1vdmVDbGFzcyggInVpLWxvYWRpbmciICk7CgkJfSwKCgkJLy8gZmluZCBhbmQgZW5oYW5jZSB0aGUgcGFnZXMgaW4gdGhlIGRvbSBhbmQgdHJhbnNpdGlvbiB0byB0aGUgZmlyc3QgcGFnZS4KCQlpbml0aWFsaXplUGFnZTogZnVuY3Rpb24oKSB7CgkJCS8vIGZpbmQgcHJlc2VudCBwYWdlcwoJCQl2YXIgJGRpYWxvZ3MsICRwYWdlcyA9ICQoICI6anFtRGF0YShyb2xlPSdwYWdlJykiICk7CgoJCQkvLyBpZiBubyBwYWdlcyBhcmUgZm91bmQsIGNoZWNrIGZvciBkaWFsb2dzIG9yIGNyZWF0ZSBvbmUgd2l0aCBib2R5J3MgaW5uZXIgaHRtbAoJCQlpZiAoICEkcGFnZXMubGVuZ3RoICkgewoJCQkJJGRpYWxvZ3MgPSAkKCAiOmpxbURhdGEocm9sZT0nZGlhbG9nJykiICk7CgoJCQkJLy8gaWYgdGhlcmUgYXJlIG5vIHBhZ2VzIGJ1dCBhIGRpYWxvZyBpcyBwcmVzZW50LCBsb2FkIGl0IGFzIGEgcGFnZQoJCQkJaWYoICRkaWFsb2dzLmxlbmd0aCApIHsKCQkJCQkvLyBhbHRlciB0aGUgYXR0cmlidXRlIHNvIGl0IHdpbGwgYmUgdHJlYXRlZCBhcyBhIHBhZ2UgdW5wb24gZW5oYW5jZW1lbnQKCQkJCQkvLyBUT0RPIGFsbG93IGZvciB0aGUgbG9hZGluZyBvZiBhIGRpYWxvZyBhcyB0aGUgZmlyc3QgcGFnZSAobWFueSBjb25zaWRlcmF0aW9ucykKCQkJCQkkZGlhbG9ncy5maXJzdCgpLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyb2xlIiwgInBhZ2UiICk7CgoJCQkJCS8vIHJlbW92ZSB0aGUgZmlyc3QgZGlhbG9nIGZyb20gdGhlIHNldCBvZiBkaWFsb2dzIHNpbmNlIGl0J3Mgbm93IGEgcGFnZQoJCQkJCS8vIGFkZCBpdCB0byB0aGUgZW1wdHkgc2V0IG9mIHBhZ2VzIHRvIGJlIGxvYWRlZCBieSB0aGUgaW5pdGlhbCBjaGFuZ2VwYWdlCgkJCQkJJHBhZ2VzID0gJHBhZ2VzLmFkZCggJGRpYWxvZ3MuZ2V0KCkuc2hpZnQoKSApOwoJCQkJfSBlbHNlIHsKCQkJCQkkcGFnZXMgPSAkKCAiYm9keSIgKS53cmFwSW5uZXIoICI8ZGl2IGRhdGEtIiArICQubW9iaWxlLm5zICsgInJvbGU9J3BhZ2UnPjwvZGl2PiIgKS5jaGlsZHJlbiggMCApOwoJCQkJfQoJCQl9CgoKCQkJLy8gYWRkIGRpYWxvZ3MsIHNldCBkYXRhLXVybCBhdHRycwoJCQkkcGFnZXMuYWRkKCAiOmpxbURhdGEocm9sZT0nZGlhbG9nJykiICkuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciAkdGhpcyA9ICQodGhpcyk7CgoJCQkJLy8gdW5sZXNzIHRoZSBkYXRhIHVybCBpcyBhbHJlYWR5IHNldCBzZXQgaXQgdG8gdGhlIHBhdGhuYW1lCgkJCQlpZiAoICEkdGhpcy5qcW1EYXRhKCJ1cmwiKSApIHsKCQkJCQkkdGhpcy5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidXJsIiwgJHRoaXMuYXR0ciggImlkIiApIHx8IGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICk7CgkJCQl9CgkJCX0pOwoKCQkJLy8gZGVmaW5lIGZpcnN0IHBhZ2UgaW4gZG9tIGNhc2Ugb25lIGJhY2tzIG91dCB0byB0aGUgZGlyZWN0b3J5IHJvb3QgKG5vdCBhbHdheXMgdGhlIGZpcnN0IHBhZ2UgdmlzaXRlZCwgYnV0IGRlZmluZWQgYXMgZmFsbGJhY2spCgkJCSQubW9iaWxlLmZpcnN0UGFnZSA9ICRwYWdlcy5maXJzdCgpOwoKCQkJLy8gZGVmaW5lIHBhZ2UgY29udGFpbmVyCgkJCSQubW9iaWxlLnBhZ2VDb250YWluZXIgPSAkcGFnZXMuZmlyc3QoKS5wYXJlbnQoKS5hZGRDbGFzcyggInVpLW1vYmlsZS12aWV3cG9ydCIgKTsKCgkJCS8vIGFsZXJ0IGxpc3RlbmVycyB0aGF0IHRoZSBwYWdlY29udGFpbmVyIGhhcyBiZWVuIGRldGVybWluZWQgZm9yIGJpbmRpbmcKCQkJLy8gdG8gZXZlbnRzIHRyaWdnZXJlZCBvbiBpdAoJCQkkd2luZG93LnRyaWdnZXIoICJwYWdlY29udGFpbmVyY3JlYXRlIiApOwoKCQkJLy8gY3VlIHBhZ2UgbG9hZGluZyBtZXNzYWdlCgkJCSQubW9iaWxlLnNob3dQYWdlTG9hZGluZ01zZygpOwoKCQkJLy8gaWYgaGFzaGNoYW5nZSBsaXN0ZW5pbmcgaXMgZGlzYWJsZWQgb3IgdGhlcmUncyBubyBoYXNoIGRlZXBsaW5rLCBjaGFuZ2UgdG8gdGhlIGZpcnN0IHBhZ2UgaW4gdGhlIERPTQoJCQlpZiAoICEkLm1vYmlsZS5oYXNoTGlzdGVuaW5nRW5hYmxlZCB8fCAhJC5tb2JpbGUucGF0aC5zdHJpcEhhc2goIGxvY2F0aW9uLmhhc2ggKSApIHsKCQkJCSQubW9iaWxlLmNoYW5nZVBhZ2UoICQubW9iaWxlLmZpcnN0UGFnZSwgeyB0cmFuc2l0aW9uOiAibm9uZSIsIHJldmVyc2U6IHRydWUsIGNoYW5nZUhhc2g6IGZhbHNlLCBmcm9tSGFzaENoYW5nZTogdHJ1ZSB9ICk7CgkJCX0KCQkJLy8gb3RoZXJ3aXNlLCB0cmlnZ2VyIGEgaGFzaGNoYW5nZSB0byBsb2FkIGEgZGVlcGxpbmsKCQkJZWxzZSB7CgkJCQkkd2luZG93LnRyaWdnZXIoICJoYXNoY2hhbmdlIiwgWyB0cnVlIF0gKTsKCQkJfQoJCX0KCX0pOwoJCgkvLyBUaGlzIGZ1bmN0aW9uIGluamVjdHMgYSBtZXRhIHZpZXdwb3J0IHRhZyB0byBwcmV2ZW50IHNjYWxpbmcuIE9mZiBieSBkZWZhdWx0LCBvbiBieSBkZWZhdWx0IHdoZW4gdG91Y2hPdmVyZmxvdyBzY3JvbGxpbmcgaXMgZW5hYmxlZAoJZnVuY3Rpb24gZGlzYWJsZVpvb20oKSB7CgkJdmFyIGNvbnQgPSAidXNlci1zY2FsYWJsZT1ubyIsCgkJCW1ldGEgPSAkKCAibWV0YVtuYW1lPSd2aWV3cG9ydCddIiApOwoJCQkKCQlpZiggbWV0YS5sZW5ndGggKXsKCQkJbWV0YS5hdHRyKCAiY29udGVudCIsIG1ldGEuYXR0ciggImNvbnRlbnQiICkgKyAiLCAiICsgY29udCApOwoJCX0KCQllbHNlewoJCQkkKCAiaGVhZCIgKS5wcmVwZW5kKCAiPG1ldGE+IiwgeyAibmFtZSI6ICJ2aWV3cG9ydCIsICJjb250ZW50IjogY29udCB9ICk7CgkJfQoJfQoJCgkvLyBpZiB0b3VjaC1vdmVyZmxvdyBpcyBlbmFibGVkLCBkaXNhYmxlIHVzZXIgc2NhbGluZywgYXMgaXQgY3JlYXRlcyB1c2FiaWxpdHkgaXNzdWVzCglpZiggJC5zdXBwb3J0LnRvdWNoT3ZlcmZsb3cgJiYgJC5tb2JpbGUudG91Y2hPdmVyZmxvd0VuYWJsZWQgJiYgISQubW9iaWxlLnRvdWNoT3ZlcmZsb3dab29tRW5hYmxlZCApewoJCWRpc2FibGVab29tKCk7Cgl9CgoJLy8gaW5pdGlhbGl6ZSBldmVudHMgbm93LCBhZnRlciBtb2JpbGVpbml0IGhhcyBvY2N1cnJlZAoJJC5tb2JpbGUuX3JlZ2lzdGVySW50ZXJuYWxFdmVudHMoKTsKCgkvLyBjaGVjayB3aGljaCBzY3JvbGxUb3AgdmFsdWUgc2hvdWxkIGJlIHVzZWQgYnkgc2Nyb2xsaW5nIHRvIDEgaW1tZWRpYXRlbHkgYXQgZG9tcmVhZHkKCS8vIHRoZW4gY2hlY2sgd2hhdCB0aGUgc2Nyb2xsIHRvcCBpcy4gQW5kcm9pZCB3aWxsIHJlcG9ydCAwLi4uIG90aGVycyAxCgkvLyBub3RlIHRoYXQgdGhpcyBpbml0aWFsIHNjcm9sbCB3b24ndCBoaWRlIHRoZSBhZGRyZXNzIGJhci4gSXQncyBqdXN0IGZvciB0aGUgY2hlY2suCgkkKGZ1bmN0aW9uKCkgewoJCXdpbmRvdy5zY3JvbGxUbyggMCwgMSApOwoKCQkvLyBpZiBkZWZhdWx0SG9tZVNjcm9sbCBoYXNuJ3QgYmVlbiBzZXQgeWV0LCBzZWUgaWYgc2Nyb2xsVG9wIGlzIDEKCQkvLyBpdCBzaG91bGQgYmUgMSBpbiBtb3N0IGJyb3dzZXJzLCBidXQgYW5kcm9pZCB0cmVhdHMgMSBhcyAwIChmb3IgaGlkaW5nIGFkZHIgYmFyKQoJCS8vIHNvIGlmIGl0J3MgMSwgdXNlIDAgZnJvbSBub3cgb24KCQkkLm1vYmlsZS5kZWZhdWx0SG9tZVNjcm9sbCA9ICggISQuc3VwcG9ydC5zY3JvbGxUb3AgfHwgJCh3aW5kb3cpLnNjcm9sbFRvcCgpID09PSAxICkgPyAwIDogMTsKCgkJLy9kb20tcmVhZHkgaW5pdHMKCQlpZiggJC5tb2JpbGUuYXV0b0luaXRpYWxpemVQYWdlICl7CgkJCSQubW9iaWxlLmluaXRpYWxpemVQYWdlKCk7CgkJfQoKCQkvLyB3aW5kb3cgbG9hZCBldmVudAoJCS8vIGhpZGUgaU9TIGJyb3dzZXIgY2hyb21lIG9uIGxvYWQKCQkkd2luZG93LmxvYWQoICQubW9iaWxlLnNpbGVudFNjcm9sbCApOwoJfSk7Cn0pKCBqUXVlcnksIHRoaXMgKTsK",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 06:49:43 GMT",
                    "Content-Length": "221124",
                    "Date": "Fri, 07 Nov 2014 06:49:43 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}