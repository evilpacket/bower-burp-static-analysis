{
    "url": "http://localhost:9999/DavidDurman/joint/dist/joint.nojquery.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.href</b> and written to <b>location.replace()</b> via the following statements:<ul><li>var href = location.href.replace(/(javascript:|#).*$/, '');</li><li>location.replace(href + '#' + fragment);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/DavidDurman/joint/dist/joint.nojquery.js",
                "path": "/DavidDurman/joint/dist/joint.nojquery.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9EYXZpZER1cm1hbi9qb2ludC9kaXN0L2pvaW50Lm5vanF1ZXJ5LmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyohIEpvaW50SlMgdjAuOS4yIC0gSmF2YVNjcmlwdCBkaWFncmFtbWluZyBsaWJyYXJ5ICAyMDE0LTA5LTE2IAoKClRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWMKTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcwpmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLgogKi8KLyoqCiAqIEBsaWNlbnNlCiAqIExvLURhc2ggMi4yLjEgKEN1c3RvbSBCdWlsZCkgPGh0dHA6Ly9sb2Rhc2guY29tLz4KICogQnVpbGQ6IGBsb2Rhc2ggbW9kZXJuIC1vIC4vZGlzdC9sb2Rhc2guanNgCiAqIENvcHlyaWdodCAyMDEyLTIwMTMgVGhlIERvam8gRm91bmRhdGlvbiA8aHR0cDovL2Rvam9mb3VuZGF0aW9uLm9yZy8+CiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS41LjIgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+CiAqIENvcHlyaWdodCAyMDA5LTIwMTMgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnMKICogQXZhaWxhYmxlIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwOi8vbG9kYXNoLmNvbS9saWNlbnNlPgogKi8KOyhmdW5jdGlvbigpIHsKCiAgLyoqIFVzZWQgYXMgYSBzYWZlIHJlZmVyZW5jZSBmb3IgYHVuZGVmaW5lZGAgaW4gcHJlIEVTNSBlbnZpcm9ubWVudHMgKi8KICB2YXIgdW5kZWZpbmVkOwoKICAvKiogVXNlZCB0byBwb29sIGFycmF5cyBhbmQgb2JqZWN0cyB1c2VkIGludGVybmFsbHkgKi8KICB2YXIgYXJyYXlQb29sID0gW10sCiAgICAgIG9iamVjdFBvb2wgPSBbXTsKCiAgLyoqIFVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcyAqLwogIHZhciBpZENvdW50ZXIgPSAwOwoKICAvKiogVXNlZCB0byBwcmVmaXgga2V5cyB0byBhdm9pZCBpc3N1ZXMgd2l0aCBgX19wcm90b19fYCBhbmQgcHJvcGVydGllcyBvbiBgT2JqZWN0LnByb3RvdHlwZWAgKi8KICB2YXIga2V5UHJlZml4ID0gK25ldyBEYXRlICsgJyc7CgogIC8qKiBVc2VkIGFzIHRoZSBzaXplIHdoZW4gb3B0aW1pemF0aW9ucyBhcmUgZW5hYmxlZCBmb3IgbGFyZ2UgYXJyYXlzICovCiAgdmFyIGxhcmdlQXJyYXlTaXplID0gNzU7CgogIC8qKiBVc2VkIGFzIHRoZSBtYXggc2l6ZSBvZiB0aGUgYGFycmF5UG9vbGAgYW5kIGBvYmplY3RQb29sYCAqLwogIHZhciBtYXhQb29sU2l6ZSA9IDQwOwoKICAvKiogVXNlZCB0byBkZXRlY3QgYW5kIHRlc3Qgd2hpdGVzcGFjZSAqLwogIHZhciB3aGl0ZXNwYWNlID0gKAogICAgLy8gd2hpdGVzcGFjZQogICAgJyBcdFx4MEJcZlx4QTBcdWZlZmYnICsKCiAgICAvLyBsaW5lIHRlcm1pbmF0b3JzCiAgICAnXG5cclx1MjAyOFx1MjAyOScgKwoKICAgIC8vIHVuaWNvZGUgY2F0ZWdvcnkgIlpzIiBzcGFjZSBzZXBhcmF0b3JzCiAgICAnXHUxNjgwXHUxODBlXHUyMDAwXHUyMDAxXHUyMDAyXHUyMDAzXHUyMDA0XHUyMDA1XHUyMDA2XHUyMDA3XHUyMDA4XHUyMDA5XHUyMDBhXHUyMDJmXHUyMDVmXHUzMDAwJwogICk7CgogIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UgKi8KICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXGJfX3AgXCs9ICcnOy9nLAogICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xiKF9fcCBcKz0pICcnIFwrL2csCiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXCguKj9cKXxcYl9fdFwpKSBcK1xuJyc7L2c7CgogIC8qKgogICAqIFVzZWQgdG8gbWF0Y2ggRVM2IHRlbXBsYXRlIGRlbGltaXRlcnMKICAgKiBodHRwOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy03LjguNgogICAqLwogIHZhciByZUVzVGVtcGxhdGUgPSAvXCRceyhbXlxcfV0qKD86XFwuW15cXH1dKikqKVx9L2c7CgogIC8qKiBVc2VkIHRvIG1hdGNoIHJlZ2V4cCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcyAqLwogIHZhciByZUZsYWdzID0gL1x3KiQvOwoKICAvKiogVXNlZCB0byBkZXRlY3RlZCBuYW1lZCBmdW5jdGlvbnMgKi8KICB2YXIgcmVGdW5jTmFtZSA9IC9eZnVuY3Rpb25bIFxuXHJcdF0rXHcvOwoKICAvKiogVXNlZCB0byBtYXRjaCAiaW50ZXJwb2xhdGUiIHRlbXBsYXRlIGRlbGltaXRlcnMgKi8KICB2YXIgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xzXFNdKz8pJT4vZzsKCiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlIGFuZCB6ZXJvcyB0byBiZSByZW1vdmVkICovCiAgdmFyIHJlTGVhZGluZ1NwYWNlc0FuZFplcm9zID0gUmVnRXhwKCdeWycgKyB3aGl0ZXNwYWNlICsgJ10qMCsoPz0uJCknKTsKCiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzICovCiAgdmFyIHJlTm9NYXRjaCA9IC8oJF4pLzsKCiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGZ1bmN0aW9ucyBjb250YWluaW5nIGEgYHRoaXNgIHJlZmVyZW5jZSAqLwogIHZhciByZVRoaXMgPSAvXGJ0aGlzXGIvOwoKICAvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMgKi8KICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcblxyXHRcdTIwMjhcdTIwMjlcXF0vZzsKCiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzICovCiAgdmFyIGNvbnRleHRQcm9wcyA9IFsKICAgICdBcnJheScsICdCb29sZWFuJywgJ0RhdGUnLCAnRnVuY3Rpb24nLCAnTWF0aCcsICdOdW1iZXInLCAnT2JqZWN0JywKICAgICdSZWdFeHAnLCAnU3RyaW5nJywgJ18nLCAnYXR0YWNoRXZlbnQnLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ2lzTmFOJywKICAgICdwYXJzZUludCcsICdzZXRJbW1lZGlhdGUnLCAnc2V0VGltZW91dCcKICBdOwoKICAvKiogVXNlZCB0byBtYWtlIHRlbXBsYXRlIHNvdXJjZVVSTHMgZWFzaWVyIHRvIGlkZW50aWZ5ICovCiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IDA7CgogIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgc2hvcnRjdXRzICovCiAgdmFyIGFyZ3NDbGFzcyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLAogICAgICBhcnJheUNsYXNzID0gJ1tvYmplY3QgQXJyYXldJywKICAgICAgYm9vbENsYXNzID0gJ1tvYmplY3QgQm9vbGVhbl0nLAogICAgICBkYXRlQ2xhc3MgPSAnW29iamVjdCBEYXRlXScsCiAgICAgIGZ1bmNDbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsCiAgICAgIG51bWJlckNsYXNzID0gJ1tvYmplY3QgTnVtYmVyXScsCiAgICAgIG9iamVjdENsYXNzID0gJ1tvYmplY3QgT2JqZWN0XScsCiAgICAgIHJlZ2V4cENsYXNzID0gJ1tvYmplY3QgUmVnRXhwXScsCiAgICAgIHN0cmluZ0NsYXNzID0gJ1tvYmplY3QgU3RyaW5nXSc7CgogIC8qKiBVc2VkIHRvIGlkZW50aWZ5IG9iamVjdCBjbGFzc2lmaWNhdGlvbnMgdGhhdCBgXy5jbG9uZWAgc3VwcG9ydHMgKi8KICB2YXIgY2xvbmVhYmxlQ2xhc3NlcyA9IHt9OwogIGNsb25lYWJsZUNsYXNzZXNbZnVuY0NsYXNzXSA9IGZhbHNlOwogIGNsb25lYWJsZUNsYXNzZXNbYXJnc0NsYXNzXSA9IGNsb25lYWJsZUNsYXNzZXNbYXJyYXlDbGFzc10gPQogIGNsb25lYWJsZUNsYXNzZXNbYm9vbENsYXNzXSA9IGNsb25lYWJsZUNsYXNzZXNbZGF0ZUNsYXNzXSA9CiAgY2xvbmVhYmxlQ2xhc3Nlc1tudW1iZXJDbGFzc10gPSBjbG9uZWFibGVDbGFzc2VzW29iamVjdENsYXNzXSA9CiAgY2xvbmVhYmxlQ2xhc3Nlc1tyZWdleHBDbGFzc10gPSBjbG9uZWFibGVDbGFzc2VzW3N0cmluZ0NsYXNzXSA9IHRydWU7CgogIC8qKiBVc2VkIGFzIGFuIGludGVybmFsIGBfLmRlYm91bmNlYCBvcHRpb25zIG9iamVjdCAqLwogIHZhciBkZWJvdW5jZU9wdGlvbnMgPSB7CiAgICAnbGVhZGluZyc6IGZhbHNlLAogICAgJ21heFdhaXQnOiAwLAogICAgJ3RyYWlsaW5nJzogZmFsc2UKICB9OwoKICAvKiogVXNlZCBhcyB0aGUgcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgYF9fYmluZERhdGFfX2AgKi8KICB2YXIgZGVzY3JpcHRvciA9IHsKICAgICdjb25maWd1cmFibGUnOiBmYWxzZSwKICAgICdlbnVtZXJhYmxlJzogZmFsc2UsCiAgICAndmFsdWUnOiBudWxsLAogICAgJ3dyaXRhYmxlJzogZmFsc2UKICB9OwoKICAvKiogVXNlZCB0byBkZXRlcm1pbmUgaWYgdmFsdWVzIGFyZSBvZiB0aGUgbGFuZ3VhZ2UgdHlwZSBPYmplY3QgKi8KICB2YXIgb2JqZWN0VHlwZXMgPSB7CiAgICAnYm9vbGVhbic6IGZhbHNlLAogICAgJ2Z1bmN0aW9uJzogdHJ1ZSwKICAgICdvYmplY3QnOiB0cnVlLAogICAgJ251bWJlcic6IGZhbHNlLAogICAgJ3N0cmluZyc6IGZhbHNlLAogICAgJ3VuZGVmaW5lZCc6IGZhbHNlCiAgfTsKCiAgLyoqIFVzZWQgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMgKi8KICB2YXIgc3RyaW5nRXNjYXBlcyA9IHsKICAgICdcXCc6ICdcXCcsCiAgICAiJyI6ICInIiwKICAgICdcbic6ICduJywKICAgICdccic6ICdyJywKICAgICdcdCc6ICd0JywKICAgICdcdTIwMjgnOiAndTIwMjgnLAogICAgJ1x1MjAyOSc6ICd1MjAyOScKICB9OwoKICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCAqLwogIHZhciByb290ID0gKG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdykgfHwgdGhpczsKCiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYCAqLwogIHZhciBmcmVlRXhwb3J0cyA9IG9iamVjdFR5cGVzW3R5cGVvZiBleHBvcnRzXSAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7CgogIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYCAqLwogIHZhciBmcmVlTW9kdWxlID0gb2JqZWN0VHlwZXNbdHlwZW9mIG1vZHVsZV0gJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlOwoKICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgICovCiAgdmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHMgJiYgZnJlZUV4cG9ydHM7CgogIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMgb3IgQnJvd3NlcmlmaWVkIGNvZGUgYW5kIHVzZSBpdCBhcyBgcm9vdGAgKi8KICB2YXIgZnJlZUdsb2JhbCA9IG9iamVjdFR5cGVzW3R5cGVvZiBnbG9iYWxdICYmIGdsb2JhbDsKICBpZiAoZnJlZUdsb2JhbCAmJiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpKSB7CiAgICByb290ID0gZnJlZUdsb2JhbDsKICB9CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAvKioKICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGJpbmFyeSBzZWFyY2hlcwogICAqIG9yIGBmcm9tSW5kZXhgIGNvbnN0cmFpbnRzLgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLgogICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuCiAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlIG9yIGAtMWAuCiAgICovCiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHsKICAgIHZhciBpbmRleCA9IChmcm9tSW5kZXggfHwgMCkgLSAxLAogICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDsKCiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkgewogICAgICAgIHJldHVybiBpbmRleDsKICAgICAgfQogICAgfQogICAgcmV0dXJuIC0xOwogIH0KCiAgLyoqCiAgICogQW4gaW1wbGVtZW50YXRpb24gb2YgYF8uY29udGFpbnNgIGZvciBjYWNoZSBvYmplY3RzIHRoYXQgbWltaWNzIHRoZSByZXR1cm4KICAgKiBzaWduYXR1cmUgb2YgYF8uaW5kZXhPZmAgYnkgcmV0dXJuaW5nIGAwYCBpZiB0aGUgdmFsdWUgaXMgZm91bmQsIGVsc2UgYC0xYC4KICAgKgogICAqIEBwcml2YXRlCiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSBvYmplY3QgdG8gaW5zcGVjdC4KICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYDBgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYC0xYC4KICAgKi8KICBmdW5jdGlvbiBjYWNoZUluZGV4T2YoY2FjaGUsIHZhbHVlKSB7CiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTsKICAgIGNhY2hlID0gY2FjaGUuY2FjaGU7CgogICAgaWYgKHR5cGUgPT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09IG51bGwpIHsKICAgICAgcmV0dXJuIGNhY2hlW3ZhbHVlXSA/IDAgOiAtMTsKICAgIH0KICAgIGlmICh0eXBlICE9ICdudW1iZXInICYmIHR5cGUgIT0gJ3N0cmluZycpIHsKICAgICAgdHlwZSA9ICdvYmplY3QnOwogICAgfQogICAgdmFyIGtleSA9IHR5cGUgPT0gJ251bWJlcicgPyB2YWx1ZSA6IGtleVByZWZpeCArIHZhbHVlOwogICAgY2FjaGUgPSAoY2FjaGUgPSBjYWNoZVt0eXBlXSkgJiYgY2FjaGVba2V5XTsKCiAgICByZXR1cm4gdHlwZSA9PSAnb2JqZWN0JwogICAgICA/IChjYWNoZSAmJiBiYXNlSW5kZXhPZihjYWNoZSwgdmFsdWUpID4gLTEgPyAwIDogLTEpCiAgICAgIDogKGNhY2hlID8gMCA6IC0xKTsKICB9CgogIC8qKgogICAqIEFkZHMgYSBnaXZlbiB2YWx1ZSB0byB0aGUgY29ycmVzcG9uZGluZyBjYWNoZSBvYmplY3QuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFkZCB0byB0aGUgY2FjaGUuCiAgICovCiAgZnVuY3Rpb24gY2FjaGVQdXNoKHZhbHVlKSB7CiAgICB2YXIgY2FjaGUgPSB0aGlzLmNhY2hlLAogICAgICAgIHR5cGUgPSB0eXBlb2YgdmFsdWU7CgogICAgaWYgKHR5cGUgPT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09IG51bGwpIHsKICAgICAgY2FjaGVbdmFsdWVdID0gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIGlmICh0eXBlICE9ICdudW1iZXInICYmIHR5cGUgIT0gJ3N0cmluZycpIHsKICAgICAgICB0eXBlID0gJ29iamVjdCc7CiAgICAgIH0KICAgICAgdmFyIGtleSA9IHR5cGUgPT0gJ251bWJlcicgPyB2YWx1ZSA6IGtleVByZWZpeCArIHZhbHVlLAogICAgICAgICAgdHlwZUNhY2hlID0gY2FjaGVbdHlwZV0gfHwgKGNhY2hlW3R5cGVdID0ge30pOwoKICAgICAgaWYgKHR5cGUgPT0gJ29iamVjdCcpIHsKICAgICAgICAodHlwZUNhY2hlW2tleV0gfHwgKHR5cGVDYWNoZVtrZXldID0gW10pKS5wdXNoKHZhbHVlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0eXBlQ2FjaGVba2V5XSA9IHRydWU7CiAgICAgIH0KICAgIH0KICB9CgogIC8qKgogICAqIFVzZWQgYnkgYF8ubWF4YCBhbmQgYF8ubWluYCBhcyB0aGUgZGVmYXVsdCBjYWxsYmFjayB3aGVuIGEgZ2l2ZW4KICAgKiBjb2xsZWN0aW9uIGlzIGEgc3RyaW5nIHZhbHVlLgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIGNoYXJhY3RlciB0byBpbnNwZWN0LgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvZGUgdW5pdCBvZiBnaXZlbiBjaGFyYWN0ZXIuCiAgICovCiAgZnVuY3Rpb24gY2hhckF0Q2FsbGJhY2sodmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KDApOwogIH0KCiAgLyoqCiAgICogVXNlZCBieSBgc29ydEJ5YCB0byBjb21wYXJlIHRyYW5zZm9ybWVkIGBjb2xsZWN0aW9uYCBlbGVtZW50cywgc3RhYmxlIHNvcnRpbmcKICAgKiB0aGVtIGluIGFzY2VuZGluZyBvcmRlci4KICAgKgogICAqIEBwcml2YXRlCiAgICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBjb21wYXJlIHRvIGBiYC4KICAgKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvbXBhcmUgdG8gYGFgLgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIG9mIGAxYCBvciBgLTFgLgogICAqLwogIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcoYSwgYikgewogICAgdmFyIGFjID0gYS5jcml0ZXJpYSwKICAgICAgICBiYyA9IGIuY3JpdGVyaWE7CgogICAgLy8gZW5zdXJlIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMKICAgIC8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwCiAgICBpZiAoYWMgIT09IGJjKSB7CiAgICAgIGlmIChhYyA+IGJjIHx8IHR5cGVvZiBhYyA9PSAndW5kZWZpbmVkJykgewogICAgICAgIHJldHVybiAxOwogICAgICB9CiAgICAgIGlmIChhYyA8IGJjIHx8IHR5cGVvZiBiYyA9PSAndW5kZWZpbmVkJykgewogICAgICAgIHJldHVybiAtMTsKICAgICAgfQogICAgfQogICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnMgbGlrZSBJbkRlc2lnbiBoYXMgYSBidWdneQogICAgLy8gYEFycmF5I3NvcnRgIGltcGxlbWVudGF0aW9uIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsCiAgICAvLyB0byByZXR1cm4gdGhlIHNhbWUgdmFsdWUgZm9yIGBhYCBhbmQgYGJgLgogICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDcKICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDsKICB9CgogIC8qKgogICAqIENyZWF0ZXMgYSBjYWNoZSBvYmplY3QgdG8gb3B0aW1pemUgbGluZWFyIHNlYXJjaGVzIG9mIGxhcmdlIGFycmF5cy4KICAgKgogICAqIEBwcml2YXRlCiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gc2VhcmNoLgogICAqIEByZXR1cm5zIHtudWxsfE9iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgb2JqZWN0IG9yIGBudWxsYCBpZiBjYWNoaW5nIHNob3VsZCBub3QgYmUgdXNlZC4KICAgKi8KICBmdW5jdGlvbiBjcmVhdGVDYWNoZShhcnJheSkgewogICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLAogICAgICAgIGZpcnN0ID0gYXJyYXlbMF0sCiAgICAgICAgbWlkID0gYXJyYXlbKGxlbmd0aCAvIDIpIHwgMF0sCiAgICAgICAgbGFzdCA9IGFycmF5W2xlbmd0aCAtIDFdOwoKICAgIGlmIChmaXJzdCAmJiB0eXBlb2YgZmlyc3QgPT0gJ29iamVjdCcgJiYKICAgICAgICBtaWQgJiYgdHlwZW9mIG1pZCA9PSAnb2JqZWN0JyAmJiBsYXN0ICYmIHR5cGVvZiBsYXN0ID09ICdvYmplY3QnKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHZhciBjYWNoZSA9IGdldE9iamVjdCgpOwogICAgY2FjaGVbJ2ZhbHNlJ10gPSBjYWNoZVsnbnVsbCddID0gY2FjaGVbJ3RydWUnXSA9IGNhY2hlWyd1bmRlZmluZWQnXSA9IGZhbHNlOwoKICAgIHZhciByZXN1bHQgPSBnZXRPYmplY3QoKTsKICAgIHJlc3VsdC5hcnJheSA9IGFycmF5OwogICAgcmVzdWx0LmNhY2hlID0gY2FjaGU7CiAgICByZXN1bHQucHVzaCA9IGNhY2hlUHVzaDsKCiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICByZXN1bHQucHVzaChhcnJheVtpbmRleF0pOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9CgogIC8qKgogICAqIFVzZWQgYnkgYHRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkCiAgICogc3RyaW5nIGxpdGVyYWxzLgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2ggVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS4KICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci4KICAgKi8KICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKG1hdGNoKSB7CiAgICByZXR1cm4gJ1xcJyArIHN0cmluZ0VzY2FwZXNbbWF0Y2hdOwogIH0KCiAgLyoqCiAgICogR2V0cyBhbiBhcnJheSBmcm9tIHRoZSBhcnJheSBwb29sIG9yIGNyZWF0ZXMgYSBuZXcgb25lIGlmIHRoZSBwb29sIGlzIGVtcHR5LgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBmcm9tIHRoZSBwb29sLgogICAqLwogIGZ1bmN0aW9uIGdldEFycmF5KCkgewogICAgcmV0dXJuIGFycmF5UG9vbC5wb3AoKSB8fCBbXTsKICB9CgogIC8qKgogICAqIEdldHMgYW4gb2JqZWN0IGZyb20gdGhlIG9iamVjdCBwb29sIG9yIGNyZWF0ZXMgYSBuZXcgb25lIGlmIHRoZSBwb29sIGlzIGVtcHR5LgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgb2JqZWN0IGZyb20gdGhlIHBvb2wuCiAgICovCiAgZnVuY3Rpb24gZ2V0T2JqZWN0KCkgewogICAgcmV0dXJuIG9iamVjdFBvb2wucG9wKCkgfHwgewogICAgICAnYXJyYXknOiBudWxsLAogICAgICAnY2FjaGUnOiBudWxsLAogICAgICAnY3JpdGVyaWEnOiBudWxsLAogICAgICAnZmFsc2UnOiBmYWxzZSwKICAgICAgJ2luZGV4JzogMCwKICAgICAgJ251bGwnOiBmYWxzZSwKICAgICAgJ251bWJlcic6IG51bGwsCiAgICAgICdvYmplY3QnOiBudWxsLAogICAgICAncHVzaCc6IG51bGwsCiAgICAgICdzdHJpbmcnOiBudWxsLAogICAgICAndHJ1ZSc6IGZhbHNlLAogICAgICAndW5kZWZpbmVkJzogZmFsc2UsCiAgICAgICd2YWx1ZSc6IG51bGwKICAgIH07CiAgfQoKICAvKioKICAgKiBBIG5vLW9wZXJhdGlvbiBmdW5jdGlvbi4KICAgKgogICAqIEBwcml2YXRlCiAgICovCiAgZnVuY3Rpb24gbm9vcCgpIHsKICAgIC8vIG5vIG9wZXJhdGlvbiBwZXJmb3JtZWQKICB9CgogIC8qKgogICAqIFJlbGVhc2VzIHRoZSBnaXZlbiBhcnJheSBiYWNrIHRvIHRoZSBhcnJheSBwb29sLgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byByZWxlYXNlLgogICAqLwogIGZ1bmN0aW9uIHJlbGVhc2VBcnJheShhcnJheSkgewogICAgYXJyYXkubGVuZ3RoID0gMDsKICAgIGlmIChhcnJheVBvb2wubGVuZ3RoIDwgbWF4UG9vbFNpemUpIHsKICAgICAgYXJyYXlQb29sLnB1c2goYXJyYXkpOwogICAgfQogIH0KCiAgLyoqCiAgICogUmVsZWFzZXMgdGhlIGdpdmVuIG9iamVjdCBiYWNrIHRvIHRoZSBvYmplY3QgcG9vbC4KICAgKgogICAqIEBwcml2YXRlCiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcmVsZWFzZS4KICAgKi8KICBmdW5jdGlvbiByZWxlYXNlT2JqZWN0KG9iamVjdCkgewogICAgdmFyIGNhY2hlID0gb2JqZWN0LmNhY2hlOwogICAgaWYgKGNhY2hlKSB7CiAgICAgIHJlbGVhc2VPYmplY3QoY2FjaGUpOwogICAgfQogICAgb2JqZWN0LmFycmF5ID0gb2JqZWN0LmNhY2hlID0gb2JqZWN0LmNyaXRlcmlhID0gb2JqZWN0Lm9iamVjdCA9IG9iamVjdC5udW1iZXIgPSBvYmplY3Quc3RyaW5nID0gb2JqZWN0LnZhbHVlID0gbnVsbDsKICAgIGlmIChvYmplY3RQb29sLmxlbmd0aCA8IG1heFBvb2xTaXplKSB7CiAgICAgIG9iamVjdFBvb2wucHVzaChvYmplY3QpOwogICAgfQogIH0KCiAgLyoqCiAgICogU2xpY2VzIHRoZSBgY29sbGVjdGlvbmAgZnJvbSB0aGUgYHN0YXJ0YCBpbmRleCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsCiAgICogdGhlIGBlbmRgIGluZGV4LgogICAqCiAgICogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGluc3RlYWQgb2YgYEFycmF5I3NsaWNlYCB0byBzdXBwb3J0IG5vZGUgbGlzdHMKICAgKiBpbiBJRSA8IDkgYW5kIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlIHJldHVybmVkLgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2xpY2UuCiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBpbmRleC4KICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgaW5kZXguCiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkuCiAgICovCiAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHsKICAgIHN0YXJ0IHx8IChzdGFydCA9IDApOwogICAgaWYgKHR5cGVvZiBlbmQgPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgZW5kID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwOwogICAgfQogICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQgfHwgMCwKICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGggPCAwID8gMCA6IGxlbmd0aCk7CgogICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W3N0YXJ0ICsgaW5kZXhdOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAvKioKICAgKiBDcmVhdGUgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGdpdmVuIGNvbnRleHQgb2JqZWN0LgogICAqCiAgICogQHN0YXRpYwogICAqIEBtZW1iZXJPZiBfCiAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuCiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi4KICAgKi8KICBmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCkgewogICAgLy8gQXZvaWQgaXNzdWVzIHdpdGggc29tZSBFUzMgZW52aXJvbm1lbnRzIHRoYXQgYXR0ZW1wdCB0byB1c2UgdmFsdWVzLCBuYW1lZAogICAgLy8gYWZ0ZXIgYnVpbHQtaW4gY29uc3RydWN0b3JzIGxpa2UgYE9iamVjdGAsIGZvciB0aGUgY3JlYXRpb24gb2YgbGl0ZXJhbHMuCiAgICAvLyBFUzUgY2xlYXJzIHRoaXMgdXAgYnkgc3RhdGluZyB0aGF0IGxpdGVyYWxzIG11c3QgdXNlIGJ1aWx0LWluIGNvbnN0cnVjdG9ycy4KICAgIC8vIFNlZSBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDExLjEuNS4KICAgIGNvbnRleHQgPSBjb250ZXh0ID8gXy5kZWZhdWx0cyhyb290Lk9iamVjdCgpLCBjb250ZXh0LCBfLnBpY2socm9vdCwgY29udGV4dFByb3BzKSkgOiByb290OwoKICAgIC8qKiBOYXRpdmUgY29uc3RydWN0b3IgcmVmZXJlbmNlcyAqLwogICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSwKICAgICAgICBCb29sZWFuID0gY29udGV4dC5Cb29sZWFuLAogICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsCiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLAogICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsCiAgICAgICAgTnVtYmVyID0gY29udGV4dC5OdW1iZXIsCiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsCiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsCiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsCiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7CgogICAgLyoqCiAgICAgKiBVc2VkIGZvciBgQXJyYXlgIG1ldGhvZCByZWZlcmVuY2VzLgogICAgICoKICAgICAqIE5vcm1hbGx5IGBBcnJheS5wcm90b3R5cGVgIHdvdWxkIHN1ZmZpY2UsIGhvd2V2ZXIsIHVzaW5nIGFuIGFycmF5IGxpdGVyYWwKICAgICAqIGF2b2lkcyBpc3N1ZXMgaW4gTmFyd2hhbC4KICAgICAqLwogICAgdmFyIGFycmF5UmVmID0gW107CgogICAgLyoqIFVzZWQgZm9yIG5hdGl2ZSBtZXRob2QgcmVmZXJlbmNlcyAqLwogICAgdmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTsKCiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBub0NvbmZsaWN0YCAqLwogICAgdmFyIG9sZERhc2ggPSBjb250ZXh0Ll87CgogICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZSAqLwogICAgdmFyIHJlTmF0aXZlID0gUmVnRXhwKCdeJyArCiAgICAgIFN0cmluZyhvYmplY3RQcm90by52YWx1ZU9mKQogICAgICAgIC5yZXBsYWNlKC9bLiorP14ke30oKXxbXF1cXF0vZywgJ1xcJCYnKQogICAgICAgIC5yZXBsYWNlKC92YWx1ZU9mfGZvciBbXlxdXSsvZywgJy4rPycpICsgJyQnCiAgICApOwoKICAgIC8qKiBOYXRpdmUgbWV0aG9kIHNob3J0Y3V0cyAqLwogICAgdmFyIGNlaWwgPSBNYXRoLmNlaWwsCiAgICAgICAgY2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQsCiAgICAgICAgZmxvb3IgPSBNYXRoLmZsb29yLAogICAgICAgIGZuVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcsCiAgICAgICAgZ2V0UHJvdG90eXBlT2YgPSByZU5hdGl2ZS50ZXN0KGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKSAmJiBnZXRQcm90b3R5cGVPZiwKICAgICAgICBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5LAogICAgICAgIG5vdyA9IHJlTmF0aXZlLnRlc3Qobm93ID0gRGF0ZS5ub3cpICYmIG5vdyB8fCBmdW5jdGlvbigpIHsgcmV0dXJuICtuZXcgRGF0ZTsgfSwKICAgICAgICBwdXNoID0gYXJyYXlSZWYucHVzaCwKICAgICAgICBzZXRJbW1lZGlhdGUgPSBjb250ZXh0LnNldEltbWVkaWF0ZSwKICAgICAgICBzZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0LAogICAgICAgIHNwbGljZSA9IGFycmF5UmVmLnNwbGljZSwKICAgICAgICB0b1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nLAogICAgICAgIHVuc2hpZnQgPSBhcnJheVJlZi51bnNoaWZ0OwoKICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHsKICAgICAgdHJ5IHsKICAgICAgICB2YXIgbyA9IHt9LAogICAgICAgICAgICBmdW5jID0gcmVOYXRpdmUudGVzdChmdW5jID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KSAmJiBmdW5jLAogICAgICAgICAgICByZXN1bHQgPSBmdW5jKG8sIG8sIG8pICYmIGZ1bmM7CiAgICAgIH0gY2F0Y2goZSkgeyB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9KCkpOwoKICAgIC8qIE5hdGl2ZSBtZXRob2Qgc2hvcnRjdXRzIGZvciBtZXRob2RzIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzICovCiAgICB2YXIgbmF0aXZlQmluZCA9IHJlTmF0aXZlLnRlc3QobmF0aXZlQmluZCA9IHRvU3RyaW5nLmJpbmQpICYmIG5hdGl2ZUJpbmQsCiAgICAgICAgbmF0aXZlQ3JlYXRlID0gcmVOYXRpdmUudGVzdChuYXRpdmVDcmVhdGUgPSBPYmplY3QuY3JlYXRlKSAmJiBuYXRpdmVDcmVhdGUsCiAgICAgICAgbmF0aXZlSXNBcnJheSA9IHJlTmF0aXZlLnRlc3QobmF0aXZlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkpICYmIG5hdGl2ZUlzQXJyYXksCiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLAogICAgICAgIG5hdGl2ZUlzTmFOID0gY29udGV4dC5pc05hTiwKICAgICAgICBuYXRpdmVLZXlzID0gcmVOYXRpdmUudGVzdChuYXRpdmVLZXlzID0gT2JqZWN0LmtleXMpICYmIG5hdGl2ZUtleXMsCiAgICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsCiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sCiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LAogICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLAogICAgICAgIG5hdGl2ZVNsaWNlID0gYXJyYXlSZWYuc2xpY2U7CgogICAgLyoqIERldGVjdCB2YXJpb3VzIGVudmlyb25tZW50cyAqLwogICAgdmFyIGlzSWVPcGVyYSA9IHJlTmF0aXZlLnRlc3QoY29udGV4dC5hdHRhY2hFdmVudCksCiAgICAgICAgaXNWOCA9IG5hdGl2ZUJpbmQgJiYgIS9cbnx0cnVlLy50ZXN0KG5hdGl2ZUJpbmQgKyBpc0llT3BlcmEpOwoKICAgIC8qKiBVc2VkIHRvIGxvb2t1cCBhIGJ1aWx0LWluIGNvbnN0cnVjdG9yIGJ5IFtbQ2xhc3NdXSAqLwogICAgdmFyIGN0b3JCeUNsYXNzID0ge307CiAgICBjdG9yQnlDbGFzc1thcnJheUNsYXNzXSA9IEFycmF5OwogICAgY3RvckJ5Q2xhc3NbYm9vbENsYXNzXSA9IEJvb2xlYW47CiAgICBjdG9yQnlDbGFzc1tkYXRlQ2xhc3NdID0gRGF0ZTsKICAgIGN0b3JCeUNsYXNzW2Z1bmNDbGFzc10gPSBGdW5jdGlvbjsKICAgIGN0b3JCeUNsYXNzW29iamVjdENsYXNzXSA9IE9iamVjdDsKICAgIGN0b3JCeUNsYXNzW251bWJlckNsYXNzXSA9IE51bWJlcjsKICAgIGN0b3JCeUNsYXNzW3JlZ2V4cENsYXNzXSA9IFJlZ0V4cDsKICAgIGN0b3JCeUNsYXNzW3N0cmluZ0NsYXNzXSA9IFN0cmluZzsKCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgdGhlIGdpdmVuIHZhbHVlIHRvIGVuYWJsZSBpbnR1aXRpdmUKICAgICAqIG1ldGhvZCBjaGFpbmluZy4KICAgICAqCiAgICAgKiBJbiBhZGRpdGlvbiB0byBMby1EYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGFsc28gaGF2ZSB0aGUgZm9sbG93aW5nIGBBcnJheWAgbWV0aG9kczoKICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGByZXZlcnNlYCwgYHNoaWZ0YCwgYHNsaWNlYCwgYHNvcnRgLCBgc3BsaWNlYCwKICAgICAqIGFuZCBgdW5zaGlmdGAKICAgICAqCiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgdmFsdWVgIG1ldGhvZCBpcwogICAgICogaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC4KICAgICAqCiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgZnVuY3Rpb25zIGFyZToKICAgICAqIGBhZnRlcmAsIGBhc3NpZ25gLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2hhaW5gLCBgY29tcGFjdGAsCiAgICAgKiBgY29tcG9zZWAsIGBjb25jYXRgLCBgY291bnRCeWAsIGBjcmVhdGVDYWxsYmFja2AsIGBjdXJyeWAsIGBkZWJvdW5jZWAsCiAgICAgKiBgZGVmYXVsdHNgLCBgZGVmZXJgLCBgZGVsYXlgLCBgZGlmZmVyZW5jZWAsIGBmaWx0ZXJgLCBgZmxhdHRlbmAsIGBmb3JFYWNoYCwKICAgICAqIGBmb3JFYWNoUmlnaHRgLCBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZnVuY3Rpb25zYCwKICAgICAqIGBncm91cEJ5YCwgYGluZGV4QnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW52ZXJ0YCwgYGludm9rZWAsIGBrZXlzYCwKICAgICAqIGBtYXBgLCBgbWF4YCwgYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWluYCwgYG9iamVjdGAsIGBvbWl0YCwgYG9uY2VgLCBgcGFpcnNgLAogICAgICogYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBpY2tgLCBgcGx1Y2tgLCBgcHVsbGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJlamVjdGAsCiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzaHVmZmxlYCwgYHNsaWNlYCwgYHNvcnRgLCBgc29ydEJ5YCwgYHNwbGljZWAsCiAgICAgKiBgdGFwYCwgYHRocm90dGxlYCwgYHRpbWVzYCwgYHRvQXJyYXlgLCBgdHJhbnNmb3JtYCwgYHVuaW9uYCwgYHVuaXFgLCBgdW5zaGlmdGAsCiAgICAgKiBgdW56aXBgLCBgdmFsdWVzYCwgYHdoZXJlYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGFuZCBgemlwYAogICAgICoKICAgICAqIFRoZSBub24tY2hhaW5hYmxlIHdyYXBwZXIgZnVuY3Rpb25zIGFyZToKICAgICAqIGBjbG9uZWAsIGBjbG9uZURlZXBgLCBgY29udGFpbnNgLCBgZXNjYXBlYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwKICAgICAqIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCwgYGZpbmRMYXN0SW5kZXhgLCBgZmluZExhc3RLZXlgLCBgaGFzYCwgYGlkZW50aXR5YCwKICAgICAqIGBpbmRleE9mYCwgYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNCb29sZWFuYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLAogICAgICogYGlzRW1wdHlgLCBgaXNFcXVhbGAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzTmFOYCwgYGlzTnVsbGAsIGBpc051bWJlcmAsCiAgICAgKiBgaXNPYmplY3RgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsIGBpc1N0cmluZ2AsIGBpc1VuZGVmaW5lZGAsIGBqb2luYCwKICAgICAqIGBsYXN0SW5kZXhPZmAsIGBtaXhpbmAsIGBub0NvbmZsaWN0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwKICAgICAqIGByZWR1Y2VSaWdodGAsIGByZXN1bHRgLCBgc2hpZnRgLCBgc2l6ZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHJ1bkluQ29udGV4dGAsCiAgICAgKiBgdGVtcGxhdGVgLCBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBhbmQgYHZhbHVlYAogICAgICoKICAgICAqIFRoZSB3cmFwcGVyIGZ1bmN0aW9ucyBgZmlyc3RgIGFuZCBgbGFzdGAgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIHdoZW4gYG5gIGlzCiAgICAgKiBwcm92aWRlZCwgb3RoZXJ3aXNlIHRoZXkgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMuCiAgICAgKgogICAgICogRXhwbGljaXQgY2hhaW5pbmcgY2FuIGJlIGVuYWJsZWQgYnkgdXNpbmcgdGhlIGBfLmNoYWluYCBtZXRob2QuCiAgICAgKgogICAgICogQG5hbWUgXwogICAgICogQGNvbnN0cnVjdG9yCiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5pbmcKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYSBgbG9kYXNoYCBpbnN0YW5jZS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7CiAgICAgKgogICAgICogLy8gcmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUKICAgICAqIHdyYXBwZWQucmVkdWNlKGZ1bmN0aW9uKHN1bSwgbnVtKSB7CiAgICAgKiAgIHJldHVybiBzdW0gKyBudW07CiAgICAgKiB9KTsKICAgICAqIC8vID0+IDYKICAgICAqCiAgICAgKiAvLyByZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZQogICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChmdW5jdGlvbihudW0pIHsKICAgICAqICAgcmV0dXJuIG51bSAqIG51bTsKICAgICAqIH0pOwogICAgICoKICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKgogICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkgewogICAgICAvLyBkb24ndCB3cmFwIGlmIGFscmVhZHkgd3JhcHBlZCwgZXZlbiBpZiB3cmFwcGVkIGJ5IGEgZGlmZmVyZW50IGBsb2Rhc2hgIGNvbnN0cnVjdG9yCiAgICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmICFpc0FycmF5KHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkKICAgICAgID8gdmFsdWUKICAgICAgIDogbmV3IGxvZGFzaFdyYXBwZXIodmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgICogQSBmYXN0IHBhdGggZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLgogICAgICogQHBhcmFtIHtib29sZWFufSBjaGFpbkFsbCBBIGZsYWcgdG8gZW5hYmxlIGNoYWluaW5nIGZvciBhbGwgbWV0aG9kcwogICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhIGBsb2Rhc2hgIGluc3RhbmNlLgogICAgICovCiAgICBmdW5jdGlvbiBsb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkgewogICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7CiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTsKICAgIH0KICAgIC8vIGVuc3VyZSBgbmV3IGxvZGFzaFdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBsb2Rhc2hgCiAgICBsb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGxvZGFzaC5wcm90b3R5cGU7CgogICAgLyoqCiAgICAgKiBBbiBvYmplY3QgdXNlZCB0byBmbGFnIGVudmlyb25tZW50cyBmZWF0dXJlcy4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQHR5cGUgT2JqZWN0CiAgICAgKi8KICAgIHZhciBzdXBwb3J0ID0gbG9kYXNoLnN1cHBvcnQgPSB7fTsKCiAgICAvKioKICAgICAqIERldGVjdCBpZiBgRnVuY3Rpb24jYmluZGAgZXhpc3RzIGFuZCBpcyBpbmZlcnJlZCB0byBiZSBmYXN0IChhbGwgYnV0IFY4KS4KICAgICAqCiAgICAgKiBAbWVtYmVyT2YgXy5zdXBwb3J0CiAgICAgKiBAdHlwZSBib29sZWFuCiAgICAgKi8KICAgIHN1cHBvcnQuZmFzdEJpbmQgPSBuYXRpdmVCaW5kICYmICFpc1Y4OwoKICAgIC8qKgogICAgICogRGV0ZWN0IGlmIGZ1bmN0aW9ucyBjYW4gYmUgZGVjb21waWxlZCBieSBgRnVuY3Rpb24jdG9TdHJpbmdgCiAgICAgKiAoYWxsIGJ1dCBQUzMgYW5kIG9sZGVyIE9wZXJhIG1vYmlsZSBicm93c2VycyAmIGF2b2lkZWQgaW4gV2luZG93cyA4IGFwcHMpLgogICAgICoKICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnQKICAgICAqIEB0eXBlIGJvb2xlYW4KICAgICAqLwogICAgc3VwcG9ydC5mdW5jRGVjb21wID0gIXJlTmF0aXZlLnRlc3QoY29udGV4dC5XaW5SVEVycm9yKSAmJiByZVRoaXMudGVzdChydW5JbkNvbnRleHQpOwoKICAgIC8qKgogICAgICogRGV0ZWN0IGlmIGBGdW5jdGlvbiNuYW1lYCBpcyBzdXBwb3J0ZWQgKGFsbCBidXQgSUUpLgogICAgICoKICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnQKICAgICAqIEB0eXBlIGJvb2xlYW4KICAgICAqLwogICAgc3VwcG9ydC5mdW5jTmFtZXMgPSB0eXBlb2YgRnVuY3Rpb24ubmFtZSA9PSAnc3RyaW5nJzsKCiAgICAvKioKICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgTG8tRGFzaCBhcmUgc2ltaWxhciB0byB0aG9zZSBpbgogICAgICogZW1iZWRkZWQgUnVieSAoRVJCKS4gQ2hhbmdlIHRoZSBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlCiAgICAgKiBkZWxpbWl0ZXJzLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAdHlwZSBPYmplY3QKICAgICAqLwogICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7CgogICAgICAvKioKICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuCiAgICAgICAqCiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MKICAgICAgICogQHR5cGUgUmVnRXhwCiAgICAgICAqLwogICAgICAnZXNjYXBlJzogLzwlLShbXHNcU10rPyklPi9nLAoKICAgICAgLyoqCiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGNvZGUgdG8gYmUgZXZhbHVhdGVkLgogICAgICAgKgogICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzCiAgICAgICAqIEB0eXBlIFJlZ0V4cAogICAgICAgKi8KICAgICAgJ2V2YWx1YXRlJzogLzwlKFtcc1xTXSs/KSU+L2csCgogICAgICAvKioKICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuCiAgICAgICAqCiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MKICAgICAgICogQHR5cGUgUmVnRXhwCiAgICAgICAqLwogICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLAoKICAgICAgLyoqCiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC4KICAgICAgICoKICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncwogICAgICAgKiBAdHlwZSBzdHJpbmcKICAgICAgICovCiAgICAgICd2YXJpYWJsZSc6ICcnLAoKICAgICAgLyoqCiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS4KICAgICAgICoKICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncwogICAgICAgKiBAdHlwZSBPYmplY3QKICAgICAgICovCiAgICAgICdpbXBvcnRzJzogewoKICAgICAgICAvKioKICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHMKICAgICAgICAgKiBAdHlwZSBGdW5jdGlvbgogICAgICAgICAqLwogICAgICAgICdfJzogbG9kYXNoCiAgICAgIH0KICAgIH07CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLyoqCiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgd2l0aG91dCBhcmd1bWVudCBqdWdnbGluZyBvciBzdXBwb3J0CiAgICAgKiBmb3IgYHRoaXNBcmdgIGJpbmRpbmcuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLgogICAgICogQHBhcmFtIHtib29sZWFufSBbZGVlcD1mYWxzZV0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZyB2YWx1ZXMuCiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tBPVtdXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSBvYmplY3RzLgogICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQj1bXV0gQXNzb2NpYXRlcyBjbG9uZXMgd2l0aCBzb3VyY2UgY291bnRlcnBhcnRzLgogICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS4KICAgICAqLwogICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBkZWVwLCBjYWxsYmFjaywgc3RhY2tBLCBzdGFja0IpIHsKICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKHZhbHVlKTsKICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPSAndW5kZWZpbmVkJykgewogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgIH0KICAgICAgLy8gaW5zcGVjdCBbW0NsYXNzXV0KICAgICAgdmFyIGlzT2JqID0gaXNPYmplY3QodmFsdWUpOwogICAgICBpZiAoaXNPYmopIHsKICAgICAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbCh2YWx1ZSk7CiAgICAgICAgaWYgKCFjbG9uZWFibGVDbGFzc2VzW2NsYXNzTmFtZV0pIHsKICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgdmFyIGN0b3IgPSBjdG9yQnlDbGFzc1tjbGFzc05hbWVdOwogICAgICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7CiAgICAgICAgICBjYXNlIGJvb2xDbGFzczoKICAgICAgICAgIGNhc2UgZGF0ZUNsYXNzOgogICAgICAgICAgICByZXR1cm4gbmV3IGN0b3IoK3ZhbHVlKTsKCiAgICAgICAgICBjYXNlIG51bWJlckNsYXNzOgogICAgICAgICAgY2FzZSBzdHJpbmdDbGFzczoKICAgICAgICAgICAgcmV0dXJuIG5ldyBjdG9yKHZhbHVlKTsKCiAgICAgICAgICBjYXNlIHJlZ2V4cENsYXNzOgogICAgICAgICAgICByZXN1bHQgPSBjdG9yKHZhbHVlLnNvdXJjZSwgcmVGbGFncy5leGVjKHZhbHVlKSk7CiAgICAgICAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSB2YWx1ZS5sYXN0SW5kZXg7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgfQogICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTsKICAgICAgaWYgKGRlZXApIHsKICAgICAgICAvLyBjaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGNvcnJlc3BvbmRpbmcgY2xvbmUKICAgICAgICB2YXIgaW5pdGVkU3RhY2sgPSAhc3RhY2tBOwogICAgICAgIHN0YWNrQSB8fCAoc3RhY2tBID0gZ2V0QXJyYXkoKSk7CiAgICAgICAgc3RhY2tCIHx8IChzdGFja0IgPSBnZXRBcnJheSgpKTsKCiAgICAgICAgdmFyIGxlbmd0aCA9IHN0YWNrQS5sZW5ndGg7CiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICAgICAgICBpZiAoc3RhY2tBW2xlbmd0aF0gPT0gdmFsdWUpIHsKICAgICAgICAgICAgcmV0dXJuIHN0YWNrQltsZW5ndGhdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXN1bHQgPSBpc0FyciA/IGN0b3IodmFsdWUubGVuZ3RoKSA6IHt9OwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIHJlc3VsdCA9IGlzQXJyID8gc2xpY2UodmFsdWUpIDogYXNzaWduKHt9LCB2YWx1ZSk7CiAgICAgIH0KICAgICAgLy8gYWRkIGFycmF5IHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYAogICAgICBpZiAoaXNBcnIpIHsKICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2luZGV4JykpIHsKICAgICAgICAgIHJlc3VsdC5pbmRleCA9IHZhbHVlLmluZGV4OwogICAgICAgIH0KICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2lucHV0JykpIHsKICAgICAgICAgIHJlc3VsdC5pbnB1dCA9IHZhbHVlLmlucHV0OwogICAgICAgIH0KICAgICAgfQogICAgICAvLyBleGl0IGZvciBzaGFsbG93IGNsb25lCiAgICAgIGlmICghZGVlcCkgewogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0KICAgICAgLy8gYWRkIHRoZSBzb3VyY2UgdmFsdWUgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzCiAgICAgIC8vIGFuZCBhc3NvY2lhdGUgaXQgd2l0aCBpdHMgY2xvbmUKICAgICAgc3RhY2tBLnB1c2godmFsdWUpOwogICAgICBzdGFja0IucHVzaChyZXN1bHQpOwoKICAgICAgLy8gcmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKQogICAgICAoaXNBcnIgPyBmb3JFYWNoIDogZm9yT3duKSh2YWx1ZSwgZnVuY3Rpb24ob2JqVmFsdWUsIGtleSkgewogICAgICAgIHJlc3VsdFtrZXldID0gYmFzZUNsb25lKG9ialZhbHVlLCBkZWVwLCBjYWxsYmFjaywgc3RhY2tBLCBzdGFja0IpOwogICAgICB9KTsKCiAgICAgIGlmIChpbml0ZWRTdGFjaykgewogICAgICAgIHJlbGVhc2VBcnJheShzdGFja0EpOwogICAgICAgIHJlbGVhc2VBcnJheShzdGFja0IpOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVDYWxsYmFja2Agd2l0aG91dCBzdXBwb3J0IGZvciBjcmVhdGluZwogICAgICogIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFja3MuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9aWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgY2FsbGJhY2suCiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyZ0NvdW50XSBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0aGUgY2FsbGJhY2sgYWNjZXB0cy4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIGNhbGxiYWNrIGZ1bmN0aW9uLgogICAgICovCiAgICBmdW5jdGlvbiBiYXNlQ3JlYXRlQ2FsbGJhY2soZnVuYywgdGhpc0FyZywgYXJnQ291bnQpIHsKICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHsKICAgICAgICByZXR1cm4gaWRlbnRpdHk7CiAgICAgIH0KICAgICAgLy8gZXhpdCBlYXJseSBpZiB0aGVyZSBpcyBubyBgdGhpc0FyZ2AKICAgICAgaWYgKHR5cGVvZiB0aGlzQXJnID09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgcmV0dXJuIGZ1bmM7CiAgICAgIH0KICAgICAgdmFyIGJpbmREYXRhID0gZnVuYy5fX2JpbmREYXRhX18gfHwgKHN1cHBvcnQuZnVuY05hbWVzICYmICFmdW5jLm5hbWUpOwogICAgICBpZiAodHlwZW9mIGJpbmREYXRhID09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgdmFyIHNvdXJjZSA9IHJlVGhpcyAmJiBmblRvU3RyaW5nLmNhbGwoZnVuYyk7CiAgICAgICAgaWYgKCFzdXBwb3J0LmZ1bmNOYW1lcyAmJiBzb3VyY2UgJiYgIXJlRnVuY05hbWUudGVzdChzb3VyY2UpKSB7CiAgICAgICAgICBiaW5kRGF0YSA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChzdXBwb3J0LmZ1bmNOYW1lcyB8fCAhYmluZERhdGEpIHsKICAgICAgICAgIC8vIGNoZWNrcyBpZiBgZnVuY2AgcmVmZXJlbmNlcyB0aGUgYHRoaXNgIGtleXdvcmQgYW5kIHN0b3JlcyB0aGUgcmVzdWx0CiAgICAgICAgICBiaW5kRGF0YSA9ICFzdXBwb3J0LmZ1bmNEZWNvbXAgfHwgcmVUaGlzLnRlc3Qoc291cmNlKTsKICAgICAgICAgIHNldEJpbmREYXRhKGZ1bmMsIGJpbmREYXRhKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgLy8gZXhpdCBlYXJseSBpZiB0aGVyZSBhcmUgbm8gYHRoaXNgIHJlZmVyZW5jZXMgb3IgYGZ1bmNgIGlzIGJvdW5kCiAgICAgIGlmIChiaW5kRGF0YSAhPT0gdHJ1ZSAmJiAoYmluZERhdGEgJiYgYmluZERhdGFbMV0gJiAxKSkgewogICAgICAgIHJldHVybiBmdW5jOwogICAgICB9CiAgICAgIHN3aXRjaCAoYXJnQ291bnQpIHsKICAgICAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSk7CiAgICAgICAgfTsKICAgICAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKSB7CiAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGEsIGIpOwogICAgICAgIH07CiAgICAgICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7CiAgICAgICAgfTsKICAgICAgICBjYXNlIDQ6IHJldHVybiBmdW5jdGlvbihhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pOwogICAgICAgIH07CiAgICAgIH0KICAgICAgcmV0dXJuIGJpbmQoZnVuYywgdGhpc0FyZyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrCiAgICAgKiBzaG9ydGhhbmRzIG9yIGB0aGlzQXJnYCBiaW5kaW5nLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU2hhbGxvdz1mYWxzZV0gQSBmbGFnIHRvIHJlc3RyaWN0IGZsYXR0ZW5pbmcgdG8gYSBzaW5nbGUgbGV2ZWwuCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0FyZ0FycmF5cz1mYWxzZV0gQSBmbGFnIHRvIHJlc3RyaWN0IGZsYXR0ZW5pbmcgdG8gYXJyYXlzIGFuZCBgYXJndW1lbnRzYCBvYmplY3RzLgogICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHN0YXJ0IGZyb20uCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgZmxhdHRlbmVkIGFycmF5LgogICAgICovCiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgaXNTaGFsbG93LCBpc0FyZ0FycmF5cywgZnJvbUluZGV4KSB7CiAgICAgIHZhciBpbmRleCA9IChmcm9tSW5kZXggfHwgMCkgLSAxLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLAogICAgICAgICAgcmVzdWx0ID0gW107CgogICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTsKCiAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09ICdudW1iZXInCiAgICAgICAgICAgICYmIChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7CiAgICAgICAgICAvLyByZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpCiAgICAgICAgICBpZiAoIWlzU2hhbGxvdykgewogICAgICAgICAgICB2YWx1ZSA9IGJhc2VGbGF0dGVuKHZhbHVlLCBpc1NoYWxsb3csIGlzQXJnQXJyYXlzKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciB2YWxJbmRleCA9IC0xLAogICAgICAgICAgICAgIHZhbExlbmd0aCA9IHZhbHVlLmxlbmd0aCwKICAgICAgICAgICAgICByZXNJbmRleCA9IHJlc3VsdC5sZW5ndGg7CgogICAgICAgICAgcmVzdWx0Lmxlbmd0aCArPSB2YWxMZW5ndGg7CiAgICAgICAgICB3aGlsZSAoKyt2YWxJbmRleCA8IHZhbExlbmd0aCkgewogICAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZVt2YWxJbmRleF07CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICghaXNBcmdBcnJheXMpIHsKICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgLCB3aXRob3V0IHN1cHBvcnQgZm9yIGB0aGlzQXJnYCBiaW5kaW5nLAogICAgICogdGhhdCBhbGxvd3MgcGFydGlhbCAiXy53aGVyZSIgc3R5bGUgY29tcGFyaXNvbnMuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7Kn0gYSBUaGUgdmFsdWUgdG8gY29tcGFyZS4KICAgICAqIEBwYXJhbSB7Kn0gYiBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpbmcgdmFsdWVzLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2lzV2hlcmU9ZmFsc2VdIEEgZmxhZyB0byBpbmRpY2F0ZSBwZXJmb3JtaW5nIHBhcnRpYWwgY29tcGFyaXNvbnMuCiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tBPVtdXSBUcmFja3MgdHJhdmVyc2VkIGBhYCBvYmplY3RzLgogICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQj1bXV0gVHJhY2tzIHRyYXZlcnNlZCBgYmAgb2JqZWN0cy4KICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKGEsIGIsIGNhbGxiYWNrLCBpc1doZXJlLCBzdGFja0EsIHN0YWNrQikgewogICAgICAvLyB1c2VkIHRvIGluZGljYXRlIHRoYXQgd2hlbiBjb21wYXJpbmcgb2JqZWN0cywgYGFgIGhhcyBhdCBsZWFzdCB0aGUgcHJvcGVydGllcyBvZiBgYmAKICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKGEsIGIpOwogICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICByZXR1cm4gISFyZXN1bHQ7CiAgICAgICAgfQogICAgICB9CiAgICAgIC8vIGV4aXQgZWFybHkgZm9yIGlkZW50aWNhbCB2YWx1ZXMKICAgICAgaWYgKGEgPT09IGIpIHsKICAgICAgICAvLyB0cmVhdCBgKzBgIHZzLiBgLTBgIGFzIG5vdCBlcXVhbAogICAgICAgIHJldHVybiBhICE9PSAwIHx8ICgxIC8gYSA9PSAxIC8gYik7CiAgICAgIH0KICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgYSwKICAgICAgICAgIG90aGVyVHlwZSA9IHR5cGVvZiBiOwoKICAgICAgLy8gZXhpdCBlYXJseSBmb3IgdW5saWtlIHByaW1pdGl2ZSB2YWx1ZXMKICAgICAgaWYgKGEgPT09IGEgJiYKICAgICAgICAgICEoYSAmJiBvYmplY3RUeXBlc1t0eXBlXSkgJiYKICAgICAgICAgICEoYiAmJiBvYmplY3RUeXBlc1tvdGhlclR5cGVdKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICAvLyBleGl0IGVhcmx5IGZvciBgbnVsbGAgYW5kIGB1bmRlZmluZWRgIGF2b2lkaW5nIEVTMydzIEZ1bmN0aW9uI2NhbGwgYmVoYXZpb3IKICAgICAgLy8gaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS4zLjQuNAogICAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgewogICAgICAgIHJldHVybiBhID09PSBiOwogICAgICB9CiAgICAgIC8vIGNvbXBhcmUgW1tDbGFzc11dIG5hbWVzCiAgICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpLAogICAgICAgICAgb3RoZXJDbGFzcyA9IHRvU3RyaW5nLmNhbGwoYik7CgogICAgICBpZiAoY2xhc3NOYW1lID09IGFyZ3NDbGFzcykgewogICAgICAgIGNsYXNzTmFtZSA9IG9iamVjdENsYXNzOwogICAgICB9CiAgICAgIGlmIChvdGhlckNsYXNzID09IGFyZ3NDbGFzcykgewogICAgICAgIG90aGVyQ2xhc3MgPSBvYmplY3RDbGFzczsKICAgICAgfQogICAgICBpZiAoY2xhc3NOYW1lICE9IG90aGVyQ2xhc3MpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgc3dpdGNoIChjbGFzc05hbWUpIHsKICAgICAgICBjYXNlIGJvb2xDbGFzczoKICAgICAgICBjYXNlIGRhdGVDbGFzczoKICAgICAgICAgIC8vIGNvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtYmVycywgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzIGFuZCBib29sZWFucwogICAgICAgICAgLy8gdG8gYDFgIG9yIGAwYCB0cmVhdGluZyBpbnZhbGlkIGRhdGVzIGNvZXJjZWQgdG8gYE5hTmAgYXMgbm90IGVxdWFsCiAgICAgICAgICByZXR1cm4gK2EgPT0gK2I7CgogICAgICAgIGNhc2UgbnVtYmVyQ2xhc3M6CiAgICAgICAgICAvLyB0cmVhdCBgTmFOYCB2cy4gYE5hTmAgYXMgZXF1YWwKICAgICAgICAgIHJldHVybiAoYSAhPSArYSkKICAgICAgICAgICAgPyBiICE9ICtiCiAgICAgICAgICAgIC8vIGJ1dCB0cmVhdCBgKzBgIHZzLiBgLTBgIGFzIG5vdCBlcXVhbAogICAgICAgICAgICA6IChhID09IDAgPyAoMSAvIGEgPT0gMSAvIGIpIDogYSA9PSArYik7CgogICAgICAgIGNhc2UgcmVnZXhwQ2xhc3M6CiAgICAgICAgY2FzZSBzdHJpbmdDbGFzczoKICAgICAgICAgIC8vIGNvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgKGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMTAuNi40KQogICAgICAgICAgLy8gdHJlYXQgc3RyaW5nIHByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IGluc3RhbmNlcyBhcyBlcXVhbAogICAgICAgICAgcmV0dXJuIGEgPT0gU3RyaW5nKGIpOwogICAgICB9CiAgICAgIHZhciBpc0FyciA9IGNsYXNzTmFtZSA9PSBhcnJheUNsYXNzOwogICAgICBpZiAoIWlzQXJyKSB7CiAgICAgICAgLy8gdW53cmFwIGFueSBgbG9kYXNoYCB3cmFwcGVkIHZhbHVlcwogICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGEsICdfX3dyYXBwZWRfXyAnKSB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKGIsICdfX3dyYXBwZWRfXycpKSB7CiAgICAgICAgICByZXR1cm4gYmFzZUlzRXF1YWwoYS5fX3dyYXBwZWRfXyB8fCBhLCBiLl9fd3JhcHBlZF9fIHx8IGIsIGNhbGxiYWNrLCBpc1doZXJlLCBzdGFja0EsIHN0YWNrQik7CiAgICAgICAgfQogICAgICAgIC8vIGV4aXQgZm9yIGZ1bmN0aW9ucyBhbmQgRE9NIG5vZGVzCiAgICAgICAgaWYgKGNsYXNzTmFtZSAhPSBvYmplY3RDbGFzcykgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICAvLyBpbiBvbGRlciB2ZXJzaW9ucyBvZiBPcGVyYSwgYGFyZ3VtZW50c2Agb2JqZWN0cyBoYXZlIGBBcnJheWAgY29uc3RydWN0b3JzCiAgICAgICAgdmFyIGN0b3JBID0gYS5jb25zdHJ1Y3RvciwKICAgICAgICAgICAgY3RvckIgPSBiLmNvbnN0cnVjdG9yOwoKICAgICAgICAvLyBub24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbAogICAgICAgIGlmIChjdG9yQSAhPSBjdG9yQiAmJiAhKAogICAgICAgICAgICAgIGlzRnVuY3Rpb24oY3RvckEpICYmIGN0b3JBIGluc3RhbmNlb2YgY3RvckEgJiYKICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGN0b3JCKSAmJiBjdG9yQiBpbnN0YW5jZW9mIGN0b3JCCiAgICAgICAgICAgICkpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgLy8gYXNzdW1lIGN5Y2xpYyBzdHJ1Y3R1cmVzIGFyZSBlcXVhbAogICAgICAvLyB0aGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMQogICAgICAvLyBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gIChodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEyLjMpCiAgICAgIHZhciBpbml0ZWRTdGFjayA9ICFzdGFja0E7CiAgICAgIHN0YWNrQSB8fCAoc3RhY2tBID0gZ2V0QXJyYXkoKSk7CiAgICAgIHN0YWNrQiB8fCAoc3RhY2tCID0gZ2V0QXJyYXkoKSk7CgogICAgICB2YXIgbGVuZ3RoID0gc3RhY2tBLmxlbmd0aDsKICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICAgICAgaWYgKHN0YWNrQVtsZW5ndGhdID09IGEpIHsKICAgICAgICAgIHJldHVybiBzdGFja0JbbGVuZ3RoXSA9PSBiOwogICAgICAgIH0KICAgICAgfQogICAgICB2YXIgc2l6ZSA9IDA7CiAgICAgIHJlc3VsdCA9IHRydWU7CgogICAgICAvLyBhZGQgYGFgIGFuZCBgYmAgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzCiAgICAgIHN0YWNrQS5wdXNoKGEpOwogICAgICBzdGFja0IucHVzaChiKTsKCiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykKICAgICAgaWYgKGlzQXJyKSB7CiAgICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7CiAgICAgICAgc2l6ZSA9IGIubGVuZ3RoOwoKICAgICAgICAvLyBjb21wYXJlIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeQogICAgICAgIHJlc3VsdCA9IHNpemUgPT0gYS5sZW5ndGg7CiAgICAgICAgaWYgKCFyZXN1bHQgJiYgIWlzV2hlcmUpIHsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIC8vIGRlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMKICAgICAgICB3aGlsZSAoc2l6ZS0tKSB7CiAgICAgICAgICB2YXIgaW5kZXggPSBsZW5ndGgsCiAgICAgICAgICAgICAgdmFsdWUgPSBiW3NpemVdOwoKICAgICAgICAgIGlmIChpc1doZXJlKSB7CiAgICAgICAgICAgIHdoaWxlIChpbmRleC0tKSB7CiAgICAgICAgICAgICAgaWYgKChyZXN1bHQgPSBiYXNlSXNFcXVhbChhW2luZGV4XSwgdmFsdWUsIGNhbGxiYWNrLCBpc1doZXJlLCBzdGFja0EsIHN0YWNrQikpKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAoIShyZXN1bHQgPSBiYXNlSXNFcXVhbChhW3NpemVdLCB2YWx1ZSwgY2FsbGJhY2ssIGlzV2hlcmUsIHN0YWNrQSwgc3RhY2tCKSkpIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0KICAgICAgLy8gZGVlcCBjb21wYXJlIG9iamVjdHMgdXNpbmcgYGZvckluYCwgaW5zdGVhZCBvZiBgZm9yT3duYCwgdG8gYXZvaWQgYE9iamVjdC5rZXlzYAogICAgICAvLyB3aGljaCwgaW4gdGhpcyBjYXNlLCBpcyBtb3JlIGNvc3RseQogICAgICBmb3JJbihiLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBiKSB7CiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoYiwga2V5KSkgewogICAgICAgICAgLy8gY291bnQgdGhlIG51bWJlciBvZiBwcm9wZXJ0aWVzLgogICAgICAgICAgc2l6ZSsrOwogICAgICAgICAgLy8gZGVlcCBjb21wYXJlIGVhY2ggcHJvcGVydHkgdmFsdWUuCiAgICAgICAgICByZXR1cm4gKHJlc3VsdCA9IGhhc093blByb3BlcnR5LmNhbGwoYSwga2V5KSAmJiBiYXNlSXNFcXVhbChhW2tleV0sIHZhbHVlLCBjYWxsYmFjaywgaXNXaGVyZSwgc3RhY2tBLCBzdGFja0IpKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgaWYgKHJlc3VsdCAmJiAhaXNXaGVyZSkgewogICAgICAgIC8vIGVuc3VyZSBib3RoIG9iamVjdHMgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllcwogICAgICAgIGZvckluKGEsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGEpIHsKICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGtleSkpIHsKICAgICAgICAgICAgLy8gYHNpemVgIHdpbGwgYmUgYC0xYCBpZiBgYWAgaGFzIG1vcmUgcHJvcGVydGllcyB0aGFuIGBiYAogICAgICAgICAgICByZXR1cm4gKHJlc3VsdCA9IC0tc2l6ZSA+IC0xKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgICBpZiAoaW5pdGVkU3RhY2spIHsKICAgICAgICByZWxlYXNlQXJyYXkoc3RhY2tBKTsKICAgICAgICByZWxlYXNlQXJyYXkoc3RhY2tCKTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgYXJndW1lbnQganVnZ2xpbmcgb3Igc3VwcG9ydAogICAgICogZm9yIGB0aGlzQXJnYCBiaW5kaW5nLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdpbmcgcHJvcGVydGllcy4KICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0E9W11dIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIG9iamVjdHMuCiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tCPVtdXSBBc3NvY2lhdGVzIHZhbHVlcyB3aXRoIHNvdXJjZSBjb3VudGVycGFydHMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgY2FsbGJhY2ssIHN0YWNrQSwgc3RhY2tCKSB7CiAgICAgIChpc0FycmF5KHNvdXJjZSkgPyBmb3JFYWNoIDogZm9yT3duKShzb3VyY2UsIGZ1bmN0aW9uKHNvdXJjZSwga2V5KSB7CiAgICAgICAgdmFyIGZvdW5kLAogICAgICAgICAgICBpc0FyciwKICAgICAgICAgICAgcmVzdWx0ID0gc291cmNlLAogICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldOwoKICAgICAgICBpZiAoc291cmNlICYmICgoaXNBcnIgPSBpc0FycmF5KHNvdXJjZSkpIHx8IGlzUGxhaW5PYmplY3Qoc291cmNlKSkpIHsKICAgICAgICAgIC8vIGF2b2lkIG1lcmdpbmcgcHJldmlvdXNseSBtZXJnZWQgY3ljbGljIHNvdXJjZXMKICAgICAgICAgIHZhciBzdGFja0xlbmd0aCA9IHN0YWNrQS5sZW5ndGg7CiAgICAgICAgICB3aGlsZSAoc3RhY2tMZW5ndGgtLSkgewogICAgICAgICAgICBpZiAoKGZvdW5kID0gc3RhY2tBW3N0YWNrTGVuZ3RoXSA9PSBzb3VyY2UpKSB7CiAgICAgICAgICAgICAgdmFsdWUgPSBzdGFja0Jbc3RhY2tMZW5ndGhdOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIWZvdW5kKSB7CiAgICAgICAgICAgIHZhciBpc1NoYWxsb3c7CiAgICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKHZhbHVlLCBzb3VyY2UpOwogICAgICAgICAgICAgIGlmICgoaXNTaGFsbG93ID0gdHlwZW9mIHJlc3VsdCAhPSAndW5kZWZpbmVkJykpIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWlzU2hhbGxvdykgewogICAgICAgICAgICAgIHZhbHVlID0gaXNBcnIKICAgICAgICAgICAgICAgID8gKGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSkKICAgICAgICAgICAgICAgIDogKGlzUGxhaW5PYmplY3QodmFsdWUpID8gdmFsdWUgOiB7fSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gYWRkIGBzb3VyY2VgIGFuZCBhc3NvY2lhdGVkIGB2YWx1ZWAgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzCiAgICAgICAgICAgIHN0YWNrQS5wdXNoKHNvdXJjZSk7CiAgICAgICAgICAgIHN0YWNrQi5wdXNoKHZhbHVlKTsKCiAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpCiAgICAgICAgICAgIGlmICghaXNTaGFsbG93KSB7CiAgICAgICAgICAgICAgYmFzZU1lcmdlKHZhbHVlLCBzb3VyY2UsIGNhbGxiYWNrLCBzdGFja0EsIHN0YWNrQik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2sodmFsdWUsIHNvdXJjZSk7CiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgcmVzdWx0ID0gc291cmNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPSAndW5kZWZpbmVkJykgewogICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxYCB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrIHNob3J0aGFuZHMKICAgICAqIG9yIGB0aGlzQXJnYCBiaW5kaW5nLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU29ydGVkPWZhbHNlXSBBIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCBgYXJyYXlgIGlzIHNvcnRlZC4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgZHVwbGljYXRlLXZhbHVlLWZyZWUgYXJyYXkuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpc1NvcnRlZCwgY2FsbGJhY2spIHsKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBpbmRleE9mID0gZ2V0SW5kZXhPZigpLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLAogICAgICAgICAgcmVzdWx0ID0gW107CgogICAgICB2YXIgaXNMYXJnZSA9ICFpc1NvcnRlZCAmJiBsZW5ndGggPj0gbGFyZ2VBcnJheVNpemUgJiYgaW5kZXhPZiA9PT0gYmFzZUluZGV4T2YsCiAgICAgICAgICBzZWVuID0gKGNhbGxiYWNrIHx8IGlzTGFyZ2UpID8gZ2V0QXJyYXkoKSA6IHJlc3VsdDsKCiAgICAgIGlmIChpc0xhcmdlKSB7CiAgICAgICAgdmFyIGNhY2hlID0gY3JlYXRlQ2FjaGUoc2Vlbik7CiAgICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgICBpbmRleE9mID0gY2FjaGVJbmRleE9mOwogICAgICAgICAgc2VlbiA9IGNhY2hlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpc0xhcmdlID0gZmFsc2U7CiAgICAgICAgICBzZWVuID0gY2FsbGJhY2sgPyBzZWVuIDogKHJlbGVhc2VBcnJheShzZWVuKSwgcmVzdWx0KTsKICAgICAgICB9CiAgICAgIH0KICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sCiAgICAgICAgICAgIGNvbXB1dGVkID0gY2FsbGJhY2sgPyBjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGFycmF5KSA6IHZhbHVlOwoKICAgICAgICBpZiAoaXNTb3J0ZWQKICAgICAgICAgICAgICA/ICFpbmRleCB8fCBzZWVuW3NlZW4ubGVuZ3RoIC0gMV0gIT09IGNvbXB1dGVkCiAgICAgICAgICAgICAgOiBpbmRleE9mKHNlZW4sIGNvbXB1dGVkKSA8IDAKICAgICAgICAgICAgKSB7CiAgICAgICAgICBpZiAoY2FsbGJhY2sgfHwgaXNMYXJnZSkgewogICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpOwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoaXNMYXJnZSkgewogICAgICAgIHJlbGVhc2VBcnJheShzZWVuLmFycmF5KTsKICAgICAgICByZWxlYXNlT2JqZWN0KHNlZW4pOwogICAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgcmVsZWFzZUFycmF5KHNlZW4pOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGEgY29sbGVjdGlvbiwgY3JlYXRpbmcgYW4gb2JqZWN0IGNvbXBvc2VkCiAgICAgKiBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBjb2xsZWN0aW9uCiAgICAgKiB0aHJvdWdoIGEgY2FsbGJhY2suIFRoZSBnaXZlbiBgc2V0dGVyYCBmdW5jdGlvbiBzZXRzIHRoZSBrZXlzIGFuZCB2YWx1ZXMKICAgICAqIG9mIHRoZSBjb21wb3NlZCBvYmplY3QuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgc2V0dGVyIGZ1bmN0aW9uLgogICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi4KICAgICAqLwogICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IHt9OwogICAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTsKCiAgICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDA7CgogICAgICAgIGlmICh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInKSB7CiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgICAgICB2YXIgdmFsdWUgPSBjb2xsZWN0aW9uW2luZGV4XTsKICAgICAgICAgICAgc2V0dGVyKHJlc3VsdCwgdmFsdWUsIGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbiksIGNvbGxlY3Rpb24pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmb3JPd24oY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikgewogICAgICAgICAgICBzZXR0ZXIocmVzdWx0LCB2YWx1ZSwgY2FsbGJhY2sodmFsdWUsIGtleSwgY29sbGVjdGlvbiksIGNvbGxlY3Rpb24pOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgCiAgICAgKiB3aXRoIGFuIG9wdGlvbmFsIGB0aGlzYCBiaW5kaW5nIGFuZCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byByZWZlcmVuY2UuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBvZiBtZXRob2QgZmxhZ3MgdG8gY29tcG9zZS4KICAgICAqICBUaGUgYml0bWFzayBtYXkgYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBmbGFnczoKICAgICAqICAxIC0gYF8uYmluZGAKICAgICAqICAyIC0gYF8uYmluZEtleWAKICAgICAqICA0IC0gYF8uY3VycnlgCiAgICAgKiAgOCAtIGBfLmN1cnJ5YCAoYm91bmQpCiAgICAgKiAgMTYgLSBgXy5wYXJ0aWFsYAogICAgICogIDMyIC0gYF8ucGFydGlhbFJpZ2h0YAogICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxBcmdzXSBBbiBhcnJheSBvZiBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZQogICAgICogIHByb3ZpZGVkIHRvIHRoZSBuZXcgZnVuY3Rpb24uCiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbFJpZ2h0QXJnc10gQW4gYXJyYXkgb2YgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZQogICAgICogIHByb3ZpZGVkIHRvIHRoZSBuZXcgZnVuY3Rpb24uCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLgogICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLgogICAgICovCiAgICBmdW5jdGlvbiBjcmVhdGVCb3VuZChmdW5jLCBiaXRtYXNrLCBwYXJ0aWFsQXJncywgcGFydGlhbFJpZ2h0QXJncywgdGhpc0FyZywgYXJpdHkpIHsKICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiAxLAogICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIDIsCiAgICAgICAgICBpc0N1cnJ5ID0gYml0bWFzayAmIDQsCiAgICAgICAgICBpc0N1cnJ5Qm91bmQgPSBiaXRtYXNrICYgOCwKICAgICAgICAgIGlzUGFydGlhbCA9IGJpdG1hc2sgJiAxNiwKICAgICAgICAgIGlzUGFydGlhbFJpZ2h0ID0gYml0bWFzayAmIDMyLAogICAgICAgICAga2V5ID0gZnVuYzsKCiAgICAgIGlmICghaXNCaW5kS2V5ICYmICFpc0Z1bmN0aW9uKGZ1bmMpKSB7CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjsKICAgICAgfQogICAgICBpZiAoaXNQYXJ0aWFsICYmICFwYXJ0aWFsQXJncy5sZW5ndGgpIHsKICAgICAgICBiaXRtYXNrICY9IH4xNjsKICAgICAgICBpc1BhcnRpYWwgPSBwYXJ0aWFsQXJncyA9IGZhbHNlOwogICAgICB9CiAgICAgIGlmIChpc1BhcnRpYWxSaWdodCAmJiAhcGFydGlhbFJpZ2h0QXJncy5sZW5ndGgpIHsKICAgICAgICBiaXRtYXNrICY9IH4zMjsKICAgICAgICBpc1BhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodEFyZ3MgPSBmYWxzZTsKICAgICAgfQogICAgICB2YXIgYmluZERhdGEgPSBmdW5jICYmIGZ1bmMuX19iaW5kRGF0YV9fOwogICAgICBpZiAoYmluZERhdGEpIHsKICAgICAgICBpZiAoaXNCaW5kICYmICEoYmluZERhdGFbMV0gJiAxKSkgewogICAgICAgICAgYmluZERhdGFbNF0gPSB0aGlzQXJnOwogICAgICAgIH0KICAgICAgICBpZiAoIWlzQmluZCAmJiBiaW5kRGF0YVsxXSAmIDEpIHsKICAgICAgICAgIGJpdG1hc2sgfD0gODsKICAgICAgICB9CiAgICAgICAgaWYgKGlzQ3VycnkgJiYgIShiaW5kRGF0YVsxXSAmIDQpKSB7CiAgICAgICAgICBiaW5kRGF0YVs1XSA9IGFyaXR5OwogICAgICAgIH0KICAgICAgICBpZiAoaXNQYXJ0aWFsKSB7CiAgICAgICAgICBwdXNoLmFwcGx5KGJpbmREYXRhWzJdIHx8IChiaW5kRGF0YVsyXSA9IFtdKSwgcGFydGlhbEFyZ3MpOwogICAgICAgIH0KICAgICAgICBpZiAoaXNQYXJ0aWFsUmlnaHQpIHsKICAgICAgICAgIHB1c2guYXBwbHkoYmluZERhdGFbM10gfHwgKGJpbmREYXRhWzNdID0gW10pLCBwYXJ0aWFsUmlnaHRBcmdzKTsKICAgICAgICB9CiAgICAgICAgYmluZERhdGFbMV0gfD0gYml0bWFzazsKICAgICAgICByZXR1cm4gY3JlYXRlQm91bmQuYXBwbHkobnVsbCwgYmluZERhdGEpOwogICAgICB9CiAgICAgIC8vIHVzZSBgRnVuY3Rpb24jYmluZGAgaWYgaXQgZXhpc3RzIGFuZCBpcyBmYXN0CiAgICAgIC8vIChpbiBWOCBgRnVuY3Rpb24jYmluZGAgaXMgc2xvd2VyIGV4Y2VwdCB3aGVuIHBhcnRpYWxseSBhcHBsaWVkKQogICAgICBpZiAoaXNCaW5kICYmICEoaXNCaW5kS2V5IHx8IGlzQ3VycnkgfHwgaXNQYXJ0aWFsUmlnaHQpICYmCiAgICAgICAgICAoc3VwcG9ydC5mYXN0QmluZCB8fCAobmF0aXZlQmluZCAmJiBpc1BhcnRpYWwpKSkgewogICAgICAgIGlmIChpc1BhcnRpYWwpIHsKICAgICAgICAgIHZhciBhcmdzID0gW3RoaXNBcmddOwogICAgICAgICAgcHVzaC5hcHBseShhcmdzLCBwYXJ0aWFsQXJncyk7CiAgICAgICAgfQogICAgICAgIHZhciBib3VuZCA9IGlzUGFydGlhbAogICAgICAgICAgPyBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIGFyZ3MpCiAgICAgICAgICA6IG5hdGl2ZUJpbmQuY2FsbChmdW5jLCB0aGlzQXJnKTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBib3VuZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgLy8gYEZ1bmN0aW9uI2JpbmRgIHNwZWMKICAgICAgICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMy40LjUKICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLAogICAgICAgICAgICAgIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXM7CgogICAgICAgICAgaWYgKGlzQ3VycnkgfHwgaXNQYXJ0aWFsIHx8IGlzUGFydGlhbFJpZ2h0KSB7CiAgICAgICAgICAgIGFyZ3MgPSBuYXRpdmVTbGljZS5jYWxsKGFyZ3MpOwogICAgICAgICAgICBpZiAoaXNQYXJ0aWFsKSB7CiAgICAgICAgICAgICAgdW5zaGlmdC5hcHBseShhcmdzLCBwYXJ0aWFsQXJncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGlzUGFydGlhbFJpZ2h0KSB7CiAgICAgICAgICAgICAgcHVzaC5hcHBseShhcmdzLCBwYXJ0aWFsUmlnaHRBcmdzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaXNDdXJyeSAmJiBhcmdzLmxlbmd0aCA8IGFyaXR5KSB7CiAgICAgICAgICAgICAgYml0bWFzayB8PSAxNiAmIH4zMjsKICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQm91bmQoZnVuYywgKGlzQ3VycnlCb3VuZCA/IGJpdG1hc2sgOiBiaXRtYXNrICYgfjMpLCBhcmdzLCBudWxsLCB0aGlzQXJnLCBhcml0eSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChpc0JpbmRLZXkpIHsKICAgICAgICAgICAgZnVuYyA9IHRoaXNCaW5kaW5nW2tleV07CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7CiAgICAgICAgICAgIC8vIGVuc3VyZSBgbmV3IGJvdW5kYCBpcyBhbiBpbnN0YW5jZSBvZiBgZnVuY2AKICAgICAgICAgICAgdGhpc0JpbmRpbmcgPSBjcmVhdGVPYmplY3QoZnVuYy5wcm90b3R5cGUpOwoKICAgICAgICAgICAgLy8gbWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IKICAgICAgICAgICAgLy8gaHR0cDovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpOwogICAgICAgICAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IHRoaXNCaW5kaW5nOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpOwogICAgICAgIH07CiAgICAgIH0KICAgICAgc2V0QmluZERhdGEoYm91bmQsIG5hdGl2ZVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7CiAgICAgIHJldHVybiBib3VuZDsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBgcHJvdG90eXBlYC4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgcHJvdG90eXBlIG9iamVjdC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdChwcm90b3R5cGUpIHsKICAgICAgcmV0dXJuIGlzT2JqZWN0KHByb3RvdHlwZSkgPyBuYXRpdmVDcmVhdGUocHJvdG90eXBlKSA6IHt9OwogICAgfQogICAgLy8gZmFsbGJhY2sgZm9yIGJyb3dzZXJzIHdpdGhvdXQgYE9iamVjdC5jcmVhdGVgCiAgICBpZiAoIW5hdGl2ZUNyZWF0ZSkgewogICAgICBjcmVhdGVPYmplY3QgPSBmdW5jdGlvbihwcm90b3R5cGUpIHsKICAgICAgICBpZiAoaXNPYmplY3QocHJvdG90eXBlKSkgewogICAgICAgICAgbm9vcC5wcm90b3R5cGUgPSBwcm90b3R5cGU7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG5vb3A7CiAgICAgICAgICBub29wLnByb3RvdHlwZSA9IG51bGw7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQgfHwge307CiAgICAgIH07CiAgICB9CgogICAgLyoqCiAgICAgKiBVc2VkIGJ5IGBlc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2ggVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS4KICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLgogICAgICovCiAgICBmdW5jdGlvbiBlc2NhcGVIdG1sQ2hhcihtYXRjaCkgewogICAgICByZXR1cm4gaHRtbEVzY2FwZXNbbWF0Y2hdOwogICAgfQoKICAgIC8qKgogICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgImluZGV4T2YiIGZ1bmN0aW9uLiBJZiB0aGUgYF8uaW5kZXhPZmAgbWV0aG9kIGlzCiAgICAgKiBjdXN0b21pemVkLCB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucwogICAgICogdGhlIGBiYXNlSW5kZXhPZmAgZnVuY3Rpb24uCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgImluZGV4T2YiIGZ1bmN0aW9uLgogICAgICovCiAgICBmdW5jdGlvbiBnZXRJbmRleE9mKCkgewogICAgICB2YXIgcmVzdWx0ID0gKHJlc3VsdCA9IGxvZGFzaC5pbmRleE9mKSA9PT0gaW5kZXhPZiA/IGJhc2VJbmRleE9mIDogcmVzdWx0OwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogU2V0cyBgdGhpc2AgYmluZGluZyBkYXRhIG9uIGEgZ2l2ZW4gZnVuY3Rpb24uCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNldCBkYXRhIG9uLgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LgogICAgICovCiAgICB2YXIgc2V0QmluZERhdGEgPSAhZGVmaW5lUHJvcGVydHkgPyBub29wIDogZnVuY3Rpb24oZnVuYywgdmFsdWUpIHsKICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlOwogICAgICBkZWZpbmVQcm9wZXJ0eShmdW5jLCAnX19iaW5kRGF0YV9fJywgZGVzY3JpcHRvcik7CiAgICB9OwoKICAgIC8qKgogICAgICogQSBmYWxsYmFjayBpbXBsZW1lbnRhdGlvbiBvZiBgaXNQbGFpbk9iamVjdGAgd2hpY2ggY2hlY2tzIGlmIGEgZ2l2ZW4gdmFsdWUKICAgICAqIGlzIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3RvciwgYXNzdW1pbmcgb2JqZWN0cyBjcmVhdGVkCiAgICAgKiBieSB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IgaGF2ZSBubyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFuZCB0aGF0CiAgICAgKiB0aGVyZSBhcmUgbm8gYE9iamVjdC5wcm90b3R5cGVgIGV4dGVuc2lvbnMuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC4KICAgICAqLwogICAgZnVuY3Rpb24gc2hpbUlzUGxhaW5PYmplY3QodmFsdWUpIHsKICAgICAgdmFyIGN0b3IsCiAgICAgICAgICByZXN1bHQ7CgogICAgICAvLyBhdm9pZCBub24gT2JqZWN0IG9iamVjdHMsIGBhcmd1bWVudHNgIG9iamVjdHMsIGFuZCBET00gZWxlbWVudHMKICAgICAgaWYgKCEodmFsdWUgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gb2JqZWN0Q2xhc3MpIHx8CiAgICAgICAgICAoY3RvciA9IHZhbHVlLmNvbnN0cnVjdG9yLCBpc0Z1bmN0aW9uKGN0b3IpICYmICEoY3RvciBpbnN0YW5jZW9mIGN0b3IpKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICAvLyBJbiBtb3N0IGVudmlyb25tZW50cyBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcyBhcmUgaXRlcmF0ZWQgYmVmb3JlCiAgICAgIC8vIGl0cyBpbmhlcml0ZWQgcHJvcGVydGllcy4gSWYgdGhlIGxhc3QgaXRlcmF0ZWQgcHJvcGVydHkgaXMgYW4gb2JqZWN0J3MKICAgICAgLy8gb3duIHByb3BlcnR5IHRoZW4gdGhlcmUgYXJlIG5vIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuCiAgICAgIGZvckluKHZhbHVlLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgICAgcmVzdWx0ID0ga2V5OwogICAgICB9KTsKICAgICAgcmV0dXJuIHR5cGVvZiByZXN1bHQgPT0gJ3VuZGVmaW5lZCcgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgcmVzdWx0KTsKICAgIH0KCiAgICAvKioKICAgICAqIFVzZWQgYnkgYHVuZXNjYXBlYCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS4KICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHVuZXNjYXBlSHRtbENoYXIobWF0Y2gpIHsKICAgICAgcmV0dXJuIGh0bWxVbmVzY2FwZXNbbWF0Y2hdOwogICAgfQoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIChmdW5jdGlvbigpIHsgcmV0dXJuIF8uaXNBcmd1bWVudHMoYXJndW1lbnRzKTsgfSkoMSwgMiwgMyk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKgogICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqLwogICAgZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHsKICAgICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09ICdudW1iZXInICYmCiAgICAgICAgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJnc0NsYXNzIHx8IGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEB0eXBlIEZ1bmN0aW9uCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogKGZ1bmN0aW9uKCkgeyByZXR1cm4gXy5pc0FycmF5KGFyZ3VtZW50cyk7IH0pKCk7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pOwogICAgICogLy8gPT4gdHJ1ZQogICAgICovCiAgICB2YXIgaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09ICdudW1iZXInICYmCiAgICAgICAgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJyYXlDbGFzcyB8fCBmYWxzZTsKICAgIH07CgogICAgLyoqCiAgICAgKiBBIGZhbGxiYWNrIGltcGxlbWVudGF0aW9uIG9mIGBPYmplY3Qua2V5c2Agd2hpY2ggcHJvZHVjZXMgYW4gYXJyYXkgb2YgdGhlCiAgICAgKiBnaXZlbiBvYmplY3QncyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcy4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHR5cGUgRnVuY3Rpb24KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLgogICAgICovCiAgICB2YXIgc2hpbUtleXMgPSBmdW5jdGlvbihvYmplY3QpIHsKICAgICAgdmFyIGluZGV4LCBpdGVyYWJsZSA9IG9iamVjdCwgcmVzdWx0ID0gW107CiAgICAgIGlmICghaXRlcmFibGUpIHJldHVybiByZXN1bHQ7CiAgICAgIGlmICghKG9iamVjdFR5cGVzW3R5cGVvZiBvYmplY3RdKSkgcmV0dXJuIHJlc3VsdDsKICAgICAgICBmb3IgKGluZGV4IGluIGl0ZXJhYmxlKSB7CiAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChpdGVyYWJsZSwgaW5kZXgpKSB7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGluZGV4KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIHJldHVybiByZXN1bHQKICAgIH07CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNvbXBvc2VkIG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBhbiBvYmplY3QuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5rZXlzKHsgJ29uZSc6IDEsICd0d28nOiAyLCAndGhyZWUnOiAzIH0pOwogICAgICogLy8gPT4gWydvbmUnLCAndHdvJywgJ3RocmVlJ10gKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpCiAgICAgKi8KICAgIHZhciBrZXlzID0gIW5hdGl2ZUtleXMgPyBzaGltS2V5cyA6IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHsKICAgICAgICByZXR1cm4gW107CiAgICAgIH0KICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTsKICAgIH07CgogICAgLyoqCiAgICAgKiBVc2VkIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzOgogICAgICoKICAgICAqIFRob3VnaCB0aGUgYD5gIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlIGA+YCBhbmQgYC9gCiAgICAgKiBkb24ndCByZXF1aXJlIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nIHVubGVzcyB0aGV5J3JlIHBhcnQKICAgICAqIG9mIGEgdGFnIG9yIGFuIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4KICAgICAqIGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzICh1bmRlciAic2VtaS1yZWxhdGVkIGZ1biBmYWN0IikKICAgICAqLwogICAgdmFyIGh0bWxFc2NhcGVzID0gewogICAgICAnJic6ICcmYW1wOycsCiAgICAgICc8JzogJyZsdDsnLAogICAgICAnPic6ICcmZ3Q7JywKICAgICAgJyInOiAnJnF1b3Q7JywKICAgICAgIiciOiAnJiMzOTsnCiAgICB9OwoKICAgIC8qKiBVc2VkIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzICovCiAgICB2YXIgaHRtbFVuZXNjYXBlcyA9IGludmVydChodG1sRXNjYXBlcyk7CgogICAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzICovCiAgICB2YXIgcmVFc2NhcGVkSHRtbCA9IFJlZ0V4cCgnKCcgKyBrZXlzKGh0bWxVbmVzY2FwZXMpLmpvaW4oJ3wnKSArICcpJywgJ2cnKSwKICAgICAgICByZVVuZXNjYXBlZEh0bWwgPSBSZWdFeHAoJ1snICsga2V5cyhodG1sRXNjYXBlcykuam9pbignJykgKyAnXScsICdnJyk7CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLyoqCiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdChzKSB0byB0aGUgZGVzdGluYXRpb24KICAgICAqIG9iamVjdC4gU3Vic2VxdWVudCBzb3VyY2VzIHdpbGwgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzCiAgICAgKiBzb3VyY2VzLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGUKICAgICAqIGFzc2lnbmVkIHZhbHVlcy4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHR3bwogICAgICogYXJndW1lbnRzOyAob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlKS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQHR5cGUgRnVuY3Rpb24KICAgICAqIEBhbGlhcyBleHRlbmQKICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuCiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZV0gVGhlIHNvdXJjZSBvYmplY3RzLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmluZyB2YWx1ZXMuCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5hc3NpZ24oeyAnbmFtZSc6ICdtb2UnIH0sIHsgJ2FnZSc6IDQwIH0pOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfQogICAgICoKICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduLCBmdW5jdGlvbihhLCBiKSB7CiAgICAgKiAgIHJldHVybiB0eXBlb2YgYSA9PSAndW5kZWZpbmVkJyA/IGIgOiBhOwogICAgICogfSk7CiAgICAgKgogICAgICogdmFyIGZvb2QgPSB7ICduYW1lJzogJ2FwcGxlJyB9OwogICAgICogZGVmYXVsdHMoZm9vZCwgeyAnbmFtZSc6ICdiYW5hbmEnLCAndHlwZSc6ICdmcnVpdCcgfSk7CiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2FwcGxlJywgJ3R5cGUnOiAnZnJ1aXQnIH0KICAgICAqLwogICAgdmFyIGFzc2lnbiA9IGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBndWFyZCkgewogICAgICB2YXIgaW5kZXgsIGl0ZXJhYmxlID0gb2JqZWN0LCByZXN1bHQgPSBpdGVyYWJsZTsKICAgICAgaWYgKCFpdGVyYWJsZSkgcmV0dXJuIHJlc3VsdDsKICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsCiAgICAgICAgICBhcmdzSW5kZXggPSAwLAogICAgICAgICAgYXJnc0xlbmd0aCA9IHR5cGVvZiBndWFyZCA9PSAnbnVtYmVyJyA/IDIgOiBhcmdzLmxlbmd0aDsKICAgICAgaWYgKGFyZ3NMZW5ndGggPiAzICYmIHR5cGVvZiBhcmdzW2FyZ3NMZW5ndGggLSAyXSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgdmFyIGNhbGxiYWNrID0gYmFzZUNyZWF0ZUNhbGxiYWNrKGFyZ3NbLS1hcmdzTGVuZ3RoIC0gMV0sIGFyZ3NbYXJnc0xlbmd0aC0tXSwgMik7CiAgICAgIH0gZWxzZSBpZiAoYXJnc0xlbmd0aCA+IDIgJiYgdHlwZW9mIGFyZ3NbYXJnc0xlbmd0aCAtIDFdID09ICdmdW5jdGlvbicpIHsKICAgICAgICBjYWxsYmFjayA9IGFyZ3NbLS1hcmdzTGVuZ3RoXTsKICAgICAgfQogICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7CiAgICAgICAgaXRlcmFibGUgPSBhcmdzW2FyZ3NJbmRleF07CiAgICAgICAgaWYgKGl0ZXJhYmxlICYmIG9iamVjdFR5cGVzW3R5cGVvZiBpdGVyYWJsZV0pIHsKICAgICAgICB2YXIgb3duSW5kZXggPSAtMSwKICAgICAgICAgICAgb3duUHJvcHMgPSBvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdICYmIGtleXMoaXRlcmFibGUpLAogICAgICAgICAgICBsZW5ndGggPSBvd25Qcm9wcyA/IG93blByb3BzLmxlbmd0aCA6IDA7CgogICAgICAgIHdoaWxlICgrK293bkluZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgICBpbmRleCA9IG93blByb3BzW293bkluZGV4XTsKICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBjYWxsYmFjayA/IGNhbGxiYWNrKHJlc3VsdFtpbmRleF0sIGl0ZXJhYmxlW2luZGV4XSkgOiBpdGVyYWJsZVtpbmRleF07CiAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0CiAgICB9OwoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB2YWx1ZWAuIElmIGBkZWVwYCBpcyBgdHJ1ZWAgbmVzdGVkIG9iamVjdHMgd2lsbCBhbHNvCiAgICAgKiBiZSBjbG9uZWQsIG90aGVyd2lzZSB0aGV5IHdpbGwgYmUgYXNzaWduZWQgYnkgcmVmZXJlbmNlLiBJZiBhIGNhbGxiYWNrCiAgICAgKiBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZXMuIElmIHRoZQogICAgICogY2FsbGJhY2sgcmV0dXJucyBgdW5kZWZpbmVkYCBjbG9uaW5nIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuCiAgICAgKiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZWVwPWZhbHNlXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nIHZhbHVlcy4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIHN0b29nZXMgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnbGFycnknLCAnYWdlJzogNTAgfQogICAgICogXTsKICAgICAqCiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUoc3Rvb2dlcyk7CiAgICAgKiBzaGFsbG93WzBdID09PSBzdG9vZ2VzWzBdOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIHZhciBkZWVwID0gXy5jbG9uZShzdG9vZ2VzLCB0cnVlKTsKICAgICAqIGRlZXBbMF0gPT09IHN0b29nZXNbMF07CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8ubWl4aW4oewogICAgICogICAnY2xvbmUnOiBfLnBhcnRpYWxSaWdodChfLmNsb25lLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICogICAgIHJldHVybiBfLmlzRWxlbWVudCh2YWx1ZSkgPyB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpIDogdW5kZWZpbmVkOwogICAgICogICB9KQogICAgICogfSk7CiAgICAgKgogICAgICogdmFyIGNsb25lID0gXy5jbG9uZShkb2N1bWVudC5ib2R5KTsKICAgICAqIGNsb25lLmNoaWxkTm9kZXMubGVuZ3RoOwogICAgICogLy8gPT4gMAogICAgICovCiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSwgZGVlcCwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgLy8gYWxsb3dzIHdvcmtpbmcgd2l0aCAiQ29sbGVjdGlvbnMiIG1ldGhvZHMgd2l0aG91dCB1c2luZyB0aGVpciBgaW5kZXhgCiAgICAgIC8vIGFuZCBgY29sbGVjdGlvbmAgYXJndW1lbnRzIGZvciBgZGVlcGAgYW5kIGBjYWxsYmFja2AKICAgICAgaWYgKHR5cGVvZiBkZWVwICE9ICdib29sZWFuJyAmJiBkZWVwICE9IG51bGwpIHsKICAgICAgICB0aGlzQXJnID0gY2FsbGJhY2s7CiAgICAgICAgY2FsbGJhY2sgPSBkZWVwOwogICAgICAgIGRlZXAgPSBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBkZWVwLCB0eXBlb2YgY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJyAmJiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDEpKTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBkZWVwIGNsb25lIG9mIGB2YWx1ZWAuIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZQogICAgICogZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlcy4gSWYgdGhlIGNhbGxiYWNrIHJldHVybnMgYHVuZGVmaW5lZGAKICAgICAqIGNsb25pbmcgd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvCiAgICAgKiBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuCiAgICAgKgogICAgICogTm90ZTogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGUgc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG0uIEZ1bmN0aW9ucwogICAgICogYW5kIERPTSBub2RlcyBhcmUgKipub3QqKiBjbG9uZWQuIFRoZSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhbmQKICAgICAqIG9iamVjdHMgY3JlYXRlZCBieSBjb25zdHJ1Y3RvcnMgb3RoZXIgdGhhbiBgT2JqZWN0YCBhcmUgY2xvbmVkIHRvIHBsYWluIGBPYmplY3RgIG9iamVjdHMuCiAgICAgKiBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNpbnRlcm5hbC1zdHJ1Y3R1cmVkLWNsb25pbmctYWxnb3JpdGhtLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZGVlcCBjbG9uZS4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nIHZhbHVlcy4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgc3Rvb2dlcyA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwKICAgICAqICAgeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9CiAgICAgKiBdOwogICAgICoKICAgICAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAoc3Rvb2dlcyk7CiAgICAgKiBkZWVwWzBdID09PSBzdG9vZ2VzWzBdOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqCiAgICAgKiB2YXIgdmlldyA9IHsKICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLAogICAgICogICAnbm9kZSc6IGVsZW1lbnQKICAgICAqIH07CiAgICAgKgogICAgICogdmFyIGNsb25lID0gXy5jbG9uZURlZXAodmlldywgZnVuY3Rpb24odmFsdWUpIHsKICAgICAqICAgcmV0dXJuIF8uaXNFbGVtZW50KHZhbHVlKSA/IHZhbHVlLmNsb25lTm9kZSh0cnVlKSA6IHVuZGVmaW5lZDsKICAgICAqIH0pOwogICAgICoKICAgICAqIGNsb25lLm5vZGUgPT0gdmlldy5ub2RlOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqLwogICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCB0cnVlLCB0eXBlb2YgY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJyAmJiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDEpKTsKICAgIH0KCiAgICAvKioKICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0KHMpIHRvIHRoZSBkZXN0aW5hdGlvbgogICAgICogb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIE9uY2UgYQogICAgICogcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIGRlZmF1bHRzIG9mIHRoZSBzYW1lIHByb3BlcnR5IHdpbGwgYmUgaWdub3JlZC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQHR5cGUgRnVuY3Rpb24KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuCiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZV0gVGhlIHNvdXJjZSBvYmplY3RzLgogICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEFsbG93cyB3b3JraW5nIHdpdGggYF8ucmVkdWNlYCB3aXRob3V0IHVzaW5nIGl0cwogICAgICogIGBrZXlgIGFuZCBgb2JqZWN0YCBhcmd1bWVudHMgYXMgc291cmNlcy4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIGZvb2QgPSB7ICduYW1lJzogJ2FwcGxlJyB9OwogICAgICogXy5kZWZhdWx0cyhmb29kLCB7ICduYW1lJzogJ2JhbmFuYScsICd0eXBlJzogJ2ZydWl0JyB9KTsKICAgICAqIC8vID0+IHsgJ25hbWUnOiAnYXBwbGUnLCAndHlwZSc6ICdmcnVpdCcgfQogICAgICovCiAgICB2YXIgZGVmYXVsdHMgPSBmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgZ3VhcmQpIHsKICAgICAgdmFyIGluZGV4LCBpdGVyYWJsZSA9IG9iamVjdCwgcmVzdWx0ID0gaXRlcmFibGU7CiAgICAgIGlmICghaXRlcmFibGUpIHJldHVybiByZXN1bHQ7CiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLAogICAgICAgICAgYXJnc0luZGV4ID0gMCwKICAgICAgICAgIGFyZ3NMZW5ndGggPSB0eXBlb2YgZ3VhcmQgPT0gJ251bWJlcicgPyAyIDogYXJncy5sZW5ndGg7CiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHsKICAgICAgICBpdGVyYWJsZSA9IGFyZ3NbYXJnc0luZGV4XTsKICAgICAgICBpZiAoaXRlcmFibGUgJiYgb2JqZWN0VHlwZXNbdHlwZW9mIGl0ZXJhYmxlXSkgewogICAgICAgIHZhciBvd25JbmRleCA9IC0xLAogICAgICAgICAgICBvd25Qcm9wcyA9IG9iamVjdFR5cGVzW3R5cGVvZiBpdGVyYWJsZV0gJiYga2V5cyhpdGVyYWJsZSksCiAgICAgICAgICAgIGxlbmd0aCA9IG93blByb3BzID8gb3duUHJvcHMubGVuZ3RoIDogMDsKCiAgICAgICAgd2hpbGUgKCsrb3duSW5kZXggPCBsZW5ndGgpIHsKICAgICAgICAgIGluZGV4ID0gb3duUHJvcHNbb3duSW5kZXhdOwogICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHRbaW5kZXhdID09ICd1bmRlZmluZWQnKSByZXN1bHRbaW5kZXhdID0gaXRlcmFibGVbaW5kZXhdOwogICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdAogICAgfTsKCiAgICAvKioKICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlCiAgICAgKiBmaXJzdCBlbGVtZW50IHRoYXQgcGFzc2VzIHRoZSBjYWxsYmFjayBjaGVjaywgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gc2VhcmNoLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyCiAgICAgKiAgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0bwogICAgICogIGNyZWF0ZSBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5maW5kS2V5KHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH0sIGZ1bmN0aW9uKG51bSkgewogICAgICogICByZXR1cm4gbnVtICUgMiA9PSAwOwogICAgICogfSk7CiAgICAgKiAvLyA9PiAnYicgKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpCiAgICAgKi8KICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgcmVzdWx0OwogICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7CiAgICAgIGZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkgewogICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QpKSB7CiAgICAgICAgICByZXN1bHQgPSBrZXk7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cwogICAgICogb2YgYSBgY29sbGVjdGlvbmAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHNlYXJjaC4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlcgogICAgICogIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgdG8KICAgICAqICBjcmVhdGUgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uZmluZExhc3RLZXkoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfSwgZnVuY3Rpb24obnVtKSB7CiAgICAgKiAgIHJldHVybiBudW0gJSAyID09IDE7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IHJldHVybnMgYGNgLCBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zIGBhYAogICAgICovCiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciByZXN1bHQ7CiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTsKICAgICAgZm9yT3duUmlnaHQob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHsKICAgICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0KSkgewogICAgICAgICAgcmVzdWx0ID0ga2V5OwogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QsCiAgICAgKiBleGVjdXRpbmcgdGhlIGNhbGxiYWNrIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgCiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBrZXksIG9iamVjdCkuIENhbGxiYWNrcyBtYXkgZXhpdAogICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEB0eXBlIEZ1bmN0aW9uCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBmdW5jdGlvbiBEb2cobmFtZSkgewogICAgICogICB0aGlzLm5hbWUgPSBuYW1lOwogICAgICogfQogICAgICoKICAgICAqIERvZy5wcm90b3R5cGUuYmFyayA9IGZ1bmN0aW9uKCkgewogICAgICogICBjb25zb2xlLmxvZygnV29vZiwgd29vZiEnKTsKICAgICAqIH07CiAgICAgKgogICAgICogXy5mb3JJbihuZXcgRG9nKCdEYWdueScpLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IGxvZ3MgJ2JhcmsnIGFuZCAnbmFtZScgKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpCiAgICAgKi8KICAgIHZhciBmb3JJbiA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciBpbmRleCwgaXRlcmFibGUgPSBjb2xsZWN0aW9uLCByZXN1bHQgPSBpdGVyYWJsZTsKICAgICAgaWYgKCFpdGVyYWJsZSkgcmV0dXJuIHJlc3VsdDsKICAgICAgaWYgKCFvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdKSByZXR1cm4gcmVzdWx0OwogICAgICBjYWxsYmFjayA9IGNhbGxiYWNrICYmIHR5cGVvZiB0aGlzQXJnID09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpOwogICAgICAgIGZvciAoaW5kZXggaW4gaXRlcmFibGUpIHsKICAgICAgICAgIGlmIChjYWxsYmFjayhpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKSA9PT0gZmFsc2UpIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0CiAgICB9OwoKICAgIC8qKgogICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cwogICAgICogb2YgYSBgY29sbGVjdGlvbmAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBmdW5jdGlvbiBEb2cobmFtZSkgewogICAgICogICB0aGlzLm5hbWUgPSBuYW1lOwogICAgICogfQogICAgICoKICAgICAqIERvZy5wcm90b3R5cGUuYmFyayA9IGZ1bmN0aW9uKCkgewogICAgICogICBjb25zb2xlLmxvZygnV29vZiwgd29vZiEnKTsKICAgICAqIH07CiAgICAgKgogICAgICogXy5mb3JJblJpZ2h0KG5ldyBEb2coJ0RhZ255JyksIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgICAqICAgY29uc29sZS5sb2coa2V5KTsKICAgICAqIH0pOwogICAgICogLy8gPT4gbG9ncyAnbmFtZScgYW5kICdiYXJrJyBhc3N1bWluZyBgXy5mb3JJbiBgIGxvZ3MgJ2JhcmsnIGFuZCAnbmFtZScKICAgICAqLwogICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciBwYWlycyA9IFtdOwoKICAgICAgZm9ySW4ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgICAgcGFpcnMucHVzaChrZXksIHZhbHVlKTsKICAgICAgfSk7CgogICAgICB2YXIgbGVuZ3RoID0gcGFpcnMubGVuZ3RoOwogICAgICBjYWxsYmFjayA9IGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7CiAgICAgIHdoaWxlIChsZW5ndGgtLSkgewogICAgICAgIGlmIChjYWxsYmFjayhwYWlyc1tsZW5ndGgtLV0sIHBhaXJzW2xlbmd0aF0sIG9iamVjdCkgPT09IGZhbHNlKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG9iamVjdDsKICAgIH0KCiAgICAvKioKICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QsIGV4ZWN1dGluZyB0aGUgY2FsbGJhY2sKICAgICAqIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUKICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBrZXksIG9iamVjdCkuIENhbGxiYWNrcyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkKICAgICAqIGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEB0eXBlIEZ1bmN0aW9uCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmZvck93bih7ICcwJzogJ3plcm8nLCAnMSc6ICdvbmUnLCAnbGVuZ3RoJzogMiB9LCBmdW5jdGlvbihudW0sIGtleSkgewogICAgICogICBjb25zb2xlLmxvZyhrZXkpOwogICAgICogfSk7CiAgICAgKiAvLyA9PiBsb2dzICcwJywgJzEnLCBhbmQgJ2xlbmd0aCcgKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpCiAgICAgKi8KICAgIHZhciBmb3JPd24gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgaW5kZXgsIGl0ZXJhYmxlID0gY29sbGVjdGlvbiwgcmVzdWx0ID0gaXRlcmFibGU7CiAgICAgIGlmICghaXRlcmFibGUpIHJldHVybiByZXN1bHQ7CiAgICAgIGlmICghb2JqZWN0VHlwZXNbdHlwZW9mIGl0ZXJhYmxlXSkgcmV0dXJuIHJlc3VsdDsKICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayAmJiB0eXBlb2YgdGhpc0FyZyA9PSAndW5kZWZpbmVkJyA/IGNhbGxiYWNrIDogYmFzZUNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTsKICAgICAgICB2YXIgb3duSW5kZXggPSAtMSwKICAgICAgICAgICAgb3duUHJvcHMgPSBvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdICYmIGtleXMoaXRlcmFibGUpLAogICAgICAgICAgICBsZW5ndGggPSBvd25Qcm9wcyA/IG93blByb3BzLmxlbmd0aCA6IDA7CgogICAgICAgIHdoaWxlICgrK293bkluZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgICBpbmRleCA9IG93blByb3BzW293bkluZGV4XTsKICAgICAgICAgIGlmIChjYWxsYmFjayhpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKSA9PT0gZmFsc2UpIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0CiAgICB9OwoKICAgIC8qKgogICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMKICAgICAqIG9mIGEgYGNvbGxlY3Rpb25gIGluIHRoZSBvcHBvc2l0ZSBvcmRlci4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5mb3JPd25SaWdodCh7ICcwJzogJ3plcm8nLCAnMSc6ICdvbmUnLCAnbGVuZ3RoJzogMiB9LCBmdW5jdGlvbihudW0sIGtleSkgewogICAgICogICBjb25zb2xlLmxvZyhrZXkpOwogICAgICogfSk7CiAgICAgKiAvLyA9PiBsb2dzICdsZW5ndGgnLCAnMScsIGFuZCAnMCcgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICcwJywgJzEnLCBhbmQgJ2xlbmd0aCcKICAgICAqLwogICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgcHJvcHMgPSBrZXlzKG9iamVjdCksCiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7CgogICAgICBjYWxsYmFjayA9IGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7CiAgICAgIHdoaWxlIChsZW5ndGgtLSkgewogICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdOwogICAgICAgIGlmIChjYWxsYmFjayhvYmplY3Rba2V5XSwga2V5LCBvYmplY3QpID09PSBmYWxzZSkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBvYmplY3Q7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgc29ydGVkIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIG9mIGFsbCBlbnVtZXJhYmxlIHByb3BlcnRpZXMsCiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCwgb2YgYG9iamVjdGAgdGhhdCBoYXZlIGZ1bmN0aW9uIHZhbHVlcy4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIG1ldGhvZHMKICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyB0aGF0IGhhdmUgZnVuY3Rpb24gdmFsdWVzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmZ1bmN0aW9ucyhfKTsKICAgICAqIC8vID0+IFsnYWxsJywgJ2FueScsICdiaW5kJywgJ2JpbmRBbGwnLCAnY2xvbmUnLCAnY29tcGFjdCcsICdjb21wb3NlJywgLi4uXQogICAgICovCiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7CiAgICAgIHZhciByZXN1bHQgPSBbXTsKICAgICAgZm9ySW4ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7CiAgICAgICAgICByZXN1bHQucHVzaChrZXkpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQuc29ydCgpOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIHRoZSBzcGVjaWZpZWQgb2JqZWN0IGBwcm9wZXJ0eWAgZXhpc3RzIGFuZCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSwKICAgICAqIGluc3RlYWQgb2YgYW4gaW5oZXJpdGVkIHByb3BlcnR5LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLgogICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFRoZSBwcm9wZXJ0eSB0byBjaGVjayBmb3IuCiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYga2V5IGlzIGEgZGlyZWN0IHByb3BlcnR5LCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaGFzKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCAnYicpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICovCiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwcm9wZXJ0eSkgewogICAgICByZXR1cm4gb2JqZWN0ID8gaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSA6IGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNyZWF0ZWQgaW52ZXJ0ZWQgb2JqZWN0LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgXy5pbnZlcnQoeyAnZmlyc3QnOiAnbW9lJywgJ3NlY29uZCc6ICdsYXJyeScgfSk7CiAgICAgKiAvLyA9PiB7ICdtb2UnOiAnZmlyc3QnLCAnbGFycnknOiAnc2Vjb25kJyB9CiAgICAgKi8KICAgIGZ1bmN0aW9uIGludmVydChvYmplY3QpIHsKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBwcm9wcyA9IGtleXMob2JqZWN0KSwKICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCwKICAgICAgICAgIHJlc3VsdCA9IHt9OwoKICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdOwogICAgICAgIHJlc3VsdFtvYmplY3Rba2V5XV0gPSBrZXk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiB2YWx1ZS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgYm9vbGVhbiB2YWx1ZSwgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmlzQm9vbGVhbihudWxsKTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwodmFsdWUpID09IGJvb2xDbGFzczsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZGF0ZS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgZGF0ZSwgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUgPyAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IGRhdGVDbGFzcykgOiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaXNFbGVtZW50KGRvY3VtZW50LmJvZHkpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICovCiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHsKICAgICAgcmV0dXJuIHZhbHVlID8gdmFsdWUubm9kZVR5cGUgPT09IDEgOiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGVtcHR5LiBBcnJheXMsIHN0cmluZ3MsIG9yIGBhcmd1bWVudHNgIG9iamVjdHMgd2l0aCBhCiAgICAgKiBsZW5ndGggb2YgYDBgIGFuZCBvYmplY3RzIHdpdGggbm8gb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBhcmUgY29uc2lkZXJlZAogICAgICogImVtcHR5Ii4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuCiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8uaXNFbXB0eSh7fSk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKgogICAgICogXy5pc0VtcHR5KCcnKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqLwogICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkgewogICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTsKICAgICAgaWYgKCF2YWx1ZSkgewogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0KICAgICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwodmFsdWUpLAogICAgICAgICAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoOwoKICAgICAgaWYgKChjbGFzc05hbWUgPT0gYXJyYXlDbGFzcyB8fCBjbGFzc05hbWUgPT0gc3RyaW5nQ2xhc3MgfHwgY2xhc3NOYW1lID09IGFyZ3NDbGFzcyApIHx8CiAgICAgICAgICAoY2xhc3NOYW1lID09IG9iamVjdENsYXNzICYmIHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgJiYgaXNGdW5jdGlvbih2YWx1ZS5zcGxpY2UpKSkgewogICAgICAgIHJldHVybiAhbGVuZ3RoOwogICAgICB9CiAgICAgIGZvck93bih2YWx1ZSwgZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIChyZXN1bHQgPSBmYWxzZSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZQogICAgICogZXF1aXZhbGVudCB0byBlYWNoIG90aGVyLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQKICAgICAqIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBgdW5kZWZpbmVkYCBjb21wYXJpc29ucyB3aWxsCiAgICAgKiBiZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQKICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOyAoYSwgYikuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0geyp9IGEgVGhlIHZhbHVlIHRvIGNvbXBhcmUuCiAgICAgKiBAcGFyYW0geyp9IGIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaW5nIHZhbHVlcy4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIG1vZSA9IHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH07CiAgICAgKiB2YXIgY29weSA9IHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH07CiAgICAgKgogICAgICogbW9lID09IGNvcHk7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8uaXNFcXVhbChtb2UsIGNvcHkpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIHZhciB3b3JkcyA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddOwogICAgICogdmFyIG90aGVyV29yZHMgPSBbJ2hpJywgJ2dvb2RieWUnXTsKICAgICAqCiAgICAgKiBfLmlzRXF1YWwod29yZHMsIG90aGVyV29yZHMsIGZ1bmN0aW9uKGEsIGIpIHsKICAgICAqICAgdmFyIHJlR3JlZXQgPSAvXig/OmhlbGxvfGhpKSQvaSwKICAgICAqICAgICAgIGFHcmVldCA9IF8uaXNTdHJpbmcoYSkgJiYgcmVHcmVldC50ZXN0KGEpLAogICAgICogICAgICAgYkdyZWV0ID0gXy5pc1N0cmluZyhiKSAmJiByZUdyZWV0LnRlc3QoYik7CiAgICAgKgogICAgICogICByZXR1cm4gKGFHcmVldCB8fCBiR3JlZXQpID8gKGFHcmVldCA9PSBiR3JlZXQpIDogdW5kZWZpbmVkOwogICAgICogfSk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzRXF1YWwoYSwgYiwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsKGEsIGIsIHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nICYmIGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMikpOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMsIG9yIGNhbiBiZSBjb2VyY2VkIHRvLCBhIGZpbml0ZSBudW1iZXIuCiAgICAgKgogICAgICogTm90ZTogVGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgbmF0aXZlIGBpc0Zpbml0ZWAgd2hpY2ggd2lsbCByZXR1cm4gdHJ1ZSBmb3IKICAgICAqIGJvb2xlYW5zIGFuZCBlbXB0eSBzdHJpbmdzLiBTZWUgaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuNS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGZpbml0ZSwgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmlzRmluaXRlKC0xMDEpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIF8uaXNGaW5pdGUoJzEwJyk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKgogICAgICogXy5pc0Zpbml0ZSh0cnVlKTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKgogICAgICogXy5pc0Zpbml0ZSgnJyk7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqLwogICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHsKICAgICAgcmV0dXJuIG5hdGl2ZUlzRmluaXRlKHZhbHVlKSAmJiAhbmF0aXZlSXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pc0Z1bmN0aW9uKF8pOwogICAgICogLy8gPT4gdHJ1ZQogICAgICovCiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJzsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZSBsYW5ndWFnZSB0eXBlIG9mIE9iamVjdC4KICAgICAqIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKQogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaXNPYmplY3Qoe30pOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqCiAgICAgKiBfLmlzT2JqZWN0KDEpOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqLwogICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHsKICAgICAgLy8gY2hlY2sgaWYgdGhlIHZhbHVlIGlzIHRoZSBFQ01BU2NyaXB0IGxhbmd1YWdlIHR5cGUgb2YgT2JqZWN0CiAgICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4OAogICAgICAvLyBhbmQgYXZvaWQgYSBWOCBidWcKICAgICAgLy8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MQogICAgICByZXR1cm4gISEodmFsdWUgJiYgb2JqZWN0VHlwZXNbdHlwZW9mIHZhbHVlXSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgTmFOYC4KICAgICAqCiAgICAgKiBOb3RlOiBUaGlzIGlzIG5vdCB0aGUgc2FtZSBhcyBuYXRpdmUgYGlzTmFOYCB3aGljaCB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yCiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWVyaWMgdmFsdWVzLiBTZWUgaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuNC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaXNOYU4oTmFOKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqCiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKgogICAgICogaXNOYU4odW5kZWZpbmVkKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqCiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICovCiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkgewogICAgICAvLyBgTmFOYCBhcyBhIHByaW1pdGl2ZSBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGYKICAgICAgLy8gKHBlcmZvcm0gdGhlIFtbQ2xhc3NdXSBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lIGhvc3Qgb2JqZWN0cyBpbiBJRSkKICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pc051bGwobnVsbCk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKgogICAgICogXy5pc051bGwodW5kZWZpbmVkKTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIG51bWJlci4KICAgICAqCiAgICAgKiBOb3RlOiBgTmFOYCBpcyBjb25zaWRlcmVkIGEgbnVtYmVyLiBTZWUgaHR0cDovL2VzNS5naXRodWIuaW8vI3g4LjUuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmlzTnVtYmVyKDguNCAqIDUpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICovCiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkgewogICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IHRvU3RyaW5nLmNhbGwodmFsdWUpID09IG51bWJlckNsYXNzOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBmdW5jdGlvbiBTdG9vZ2UobmFtZSwgYWdlKSB7CiAgICAgKiAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgKiAgIHRoaXMuYWdlID0gYWdlOwogICAgICogfQogICAgICoKICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgU3Rvb2dlKCdtb2UnLCA0MCkpOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqCiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKgogICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH0pOwogICAgICogLy8gPT4gdHJ1ZQogICAgICovCiAgICB2YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGlmICghKHZhbHVlICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IG9iamVjdENsYXNzKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICB2YXIgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YsCiAgICAgICAgICBvYmpQcm90byA9IHR5cGVvZiB2YWx1ZU9mID09ICdmdW5jdGlvbicgJiYgKG9ialByb3RvID0gZ2V0UHJvdG90eXBlT2YodmFsdWVPZikpICYmIGdldFByb3RvdHlwZU9mKG9ialByb3RvKTsKCiAgICAgIHJldHVybiBvYmpQcm90bwogICAgICAgID8gKHZhbHVlID09IG9ialByb3RvIHx8IGdldFByb3RvdHlwZU9mKHZhbHVlKSA9PSBvYmpQcm90bykKICAgICAgICA6IHNoaW1Jc1BsYWluT2JqZWN0KHZhbHVlKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgcmVndWxhciBleHByZXNzaW9uLCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaXNSZWdFeHAoL21vZS8pOwogICAgICogLy8gPT4gdHJ1ZQogICAgICovCiAgICBmdW5jdGlvbiBpc1JlZ0V4cCh2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUgPyAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IHJlZ2V4cENsYXNzKSA6IGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmlzU3RyaW5nKCdtb2UnKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqLwogICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHsKICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzdHJpbmdDbGFzczsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pc1VuZGVmaW5lZCh2b2lkIDApOwogICAgICogLy8gPT4gdHJ1ZQogICAgICovCiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkgewogICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICd1bmRlZmluZWQnOwogICAgfQoKICAgIC8qKgogICAgICogUmVjdXJzaXZlbHkgbWVyZ2VzIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgdGhlIHNvdXJjZSBvYmplY3QocyksIHRoYXQKICAgICAqIGRvbid0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgaW50byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBTdWJzZXF1ZW50IHNvdXJjZXMKICAgICAqIHdpbGwgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuIElmIGEgY2FsbGJhY2sgaXMKICAgICAqIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24KICAgICAqIGFuZCBzb3VyY2UgcHJvcGVydGllcy4gSWYgdGhlIGNhbGxiYWNrIHJldHVybnMgYHVuZGVmaW5lZGAgbWVyZ2luZyB3aWxsCiAgICAgKiBiZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQKICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOyAob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlKS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC4KICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlXSBUaGUgc291cmNlIG9iamVjdHMuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2luZyBwcm9wZXJ0aWVzLgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBuYW1lcyA9IHsKICAgICAqICAgJ3N0b29nZXMnOiBbCiAgICAgKiAgICAgeyAnbmFtZSc6ICdtb2UnIH0sCiAgICAgKiAgICAgeyAnbmFtZSc6ICdsYXJyeScgfQogICAgICogICBdCiAgICAgKiB9OwogICAgICoKICAgICAqIHZhciBhZ2VzID0gewogICAgICogICAnc3Rvb2dlcyc6IFsKICAgICAqICAgICB7ICdhZ2UnOiA0MCB9LAogICAgICogICAgIHsgJ2FnZSc6IDUwIH0KICAgICAqICAgXQogICAgICogfTsKICAgICAqCiAgICAgKiBfLm1lcmdlKG5hbWVzLCBhZ2VzKTsKICAgICAqIC8vID0+IHsgJ3N0b29nZXMnOiBbeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwgeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9XSB9CiAgICAgKgogICAgICogdmFyIGZvb2QgPSB7CiAgICAgKiAgICdmcnVpdHMnOiBbJ2FwcGxlJ10sCiAgICAgKiAgICd2ZWdldGFibGVzJzogWydiZWV0J10KICAgICAqIH07CiAgICAgKgogICAgICogdmFyIG90aGVyRm9vZCA9IHsKICAgICAqICAgJ2ZydWl0cyc6IFsnYmFuYW5hJ10sCiAgICAgKiAgICd2ZWdldGFibGVzJzogWydjYXJyb3QnXQogICAgICogfTsKICAgICAqCiAgICAgKiBfLm1lcmdlKGZvb2QsIG90aGVyRm9vZCwgZnVuY3Rpb24oYSwgYikgewogICAgICogICByZXR1cm4gXy5pc0FycmF5KGEpID8gYS5jb25jYXQoYikgOiB1bmRlZmluZWQ7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IHsgJ2ZydWl0cyc6IFsnYXBwbGUnLCAnYmFuYW5hJ10sICd2ZWdldGFibGVzJzogWydiZWV0JywgJ2NhcnJvdF0gfQogICAgICovCiAgICBmdW5jdGlvbiBtZXJnZShvYmplY3QpIHsKICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsCiAgICAgICAgICBsZW5ndGggPSAyOwoKICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7CiAgICAgICAgcmV0dXJuIG9iamVjdDsKICAgICAgfQogICAgICAvLyBhbGxvd3Mgd29ya2luZyB3aXRoIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCB3aXRob3V0IHVzaW5nCiAgICAgIC8vIHRoZWlyIGBpbmRleGAgYW5kIGBjb2xsZWN0aW9uYCBhcmd1bWVudHMKICAgICAgaWYgKHR5cGVvZiBhcmdzWzJdICE9ICdudW1iZXInKSB7CiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7CiAgICAgIH0KICAgICAgaWYgKGxlbmd0aCA+IDMgJiYgdHlwZW9mIGFyZ3NbbGVuZ3RoIC0gMl0gPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHZhciBjYWxsYmFjayA9IGJhc2VDcmVhdGVDYWxsYmFjayhhcmdzWy0tbGVuZ3RoIC0gMV0sIGFyZ3NbbGVuZ3RoLS1dLCAyKTsKICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIHR5cGVvZiBhcmdzW2xlbmd0aCAtIDFdID09ICdmdW5jdGlvbicpIHsKICAgICAgICBjYWxsYmFjayA9IGFyZ3NbLS1sZW5ndGhdOwogICAgICB9CiAgICAgIHZhciBzb3VyY2VzID0gbmF0aXZlU2xpY2UuY2FsbChhcmd1bWVudHMsIDEsIGxlbmd0aCksCiAgICAgICAgICBpbmRleCA9IC0xLAogICAgICAgICAgc3RhY2tBID0gZ2V0QXJyYXkoKSwKICAgICAgICAgIHN0YWNrQiA9IGdldEFycmF5KCk7CgogICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZXNbaW5kZXhdLCBjYWxsYmFjaywgc3RhY2tBLCBzdGFja0IpOwogICAgICB9CiAgICAgIHJlbGVhc2VBcnJheShzdGFja0EpOwogICAgICByZWxlYXNlQXJyYXkoc3RhY2tCKTsKICAgICAgcmV0dXJuIG9iamVjdDsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGBvYmplY3RgIGV4Y2x1ZGluZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuCiAgICAgKiBQcm9wZXJ0eSBuYW1lcyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5cyBvZgogICAgICogcHJvcGVydHkgbmFtZXMuIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBleGVjdXRlZCBmb3IgZWFjaAogICAgICogcHJvcGVydHkgb2YgYG9iamVjdGAgb21pdHRpbmcgdGhlIHByb3BlcnRpZXMgdGhlIGNhbGxiYWNrIHJldHVybnMgdHJ1ZXkKICAgICAqIGZvci4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsKICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258Li4uc3RyaW5nfHN0cmluZ1tdfSBbY2FsbGJhY2tdIFRoZSBwcm9wZXJ0aWVzIHRvIG9taXQgb3IgdGhlCiAgICAgKiAgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGhvdXQgdGhlIG9taXR0ZWQgcHJvcGVydGllcy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5vbWl0KHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH0sICdhZ2UnKTsKICAgICAqIC8vID0+IHsgJ25hbWUnOiAnbW9lJyB9CiAgICAgKgogICAgICogXy5vbWl0KHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH0sIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgKiAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcic7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IHsgJ25hbWUnOiAnbW9lJyB9CiAgICAgKi8KICAgIGZ1bmN0aW9uIG9taXQob2JqZWN0LCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgaW5kZXhPZiA9IGdldEluZGV4T2YoKSwKICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nLAogICAgICAgICAgcmVzdWx0ID0ge307CgogICAgICBpZiAoaXNGdW5jKSB7CiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBwcm9wcyA9IGJhc2VGbGF0dGVuKGFyZ3VtZW50cywgdHJ1ZSwgZmFsc2UsIDEpOwogICAgICB9CiAgICAgIGZvckluKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7CiAgICAgICAgaWYgKGlzRnVuYwogICAgICAgICAgICAgID8gIWNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCkKICAgICAgICAgICAgICA6IGluZGV4T2YocHJvcHMsIGtleSkgPCAwCiAgICAgICAgICAgICkgewogICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhIHR3byBkaW1lbnNpb25hbCBhcnJheSBvZiBhbiBvYmplY3QncyBrZXktdmFsdWUgcGFpcnMsCiAgICAgKiBpLmUuIGBbW2tleTEsIHZhbHVlMV0sIFtrZXkyLCB2YWx1ZTJdXWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBuZXcgYXJyYXkgb2Yga2V5LXZhbHVlIHBhaXJzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnBhaXJzKHsgJ21vZSc6IDMwLCAnbGFycnknOiA0MCB9KTsKICAgICAqIC8vID0+IFtbJ21vZScsIDMwXSwgWydsYXJyeScsIDQwXV0gKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpCiAgICAgKi8KICAgIGZ1bmN0aW9uIHBhaXJzKG9iamVjdCkgewogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIHByb3BzID0ga2V5cyhvYmplY3QpLAogICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLAogICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTsKCiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTsKICAgICAgICByZXN1bHRbaW5kZXhdID0gW2tleSwgb2JqZWN0W2tleV1dOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgb2JqZWN0YCBjb21wb3NlZCBvZiB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuCiAgICAgKiBQcm9wZXJ0eSBuYW1lcyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5cyBvZgogICAgICogcHJvcGVydHkgbmFtZXMuIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBleGVjdXRlZCBmb3IgZWFjaAogICAgICogcHJvcGVydHkgb2YgYG9iamVjdGAgcGlja2luZyB0aGUgcHJvcGVydGllcyB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVleQogICAgICogZm9yLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOwogICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LgogICAgICogQHBhcmFtIHtGdW5jdGlvbnwuLi5zdHJpbmd8c3RyaW5nW119IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIKICAgICAqICBpdGVyYXRpb24gb3IgcHJvcGVydHkgbmFtZXMgdG8gcGljaywgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgcHJvcGVydHkKICAgICAqICBuYW1lcyBvciBhcnJheXMgb2YgcHJvcGVydHkgbmFtZXMuCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgcHJvcGVydGllcy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5waWNrKHsgJ25hbWUnOiAnbW9lJywgJ191c2VyaWQnOiAnbW9lMScgfSwgJ25hbWUnKTsKICAgICAqIC8vID0+IHsgJ25hbWUnOiAnbW9lJyB9CiAgICAgKgogICAgICogXy5waWNrKHsgJ25hbWUnOiAnbW9lJywgJ191c2VyaWQnOiAnbW9lMScgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICogICByZXR1cm4ga2V5LmNoYXJBdCgwKSAhPSAnXyc7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IHsgJ25hbWUnOiAnbW9lJyB9CiAgICAgKi8KICAgIGZ1bmN0aW9uIHBpY2sob2JqZWN0LCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgcmVzdWx0ID0ge307CiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgICBwcm9wcyA9IGJhc2VGbGF0dGVuKGFyZ3VtZW50cywgdHJ1ZSwgZmFsc2UsIDEpLAogICAgICAgICAgICBsZW5ndGggPSBpc09iamVjdChvYmplY3QpID8gcHJvcHMubGVuZ3RoIDogMDsKCiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07CiAgICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkgewogICAgICAgICAgICByZXN1bHRba2V5XSA9IG9iamVjdFtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7CiAgICAgICAgZm9ySW4ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHsKICAgICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QpKSB7CiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWAgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ldwogICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIGVsZW1lbnRzCiAgICAgKiB0aHJvdWdoIGEgY2FsbGJhY2ssIHdpdGggZWFjaCBjYWxsYmFjayBleGVjdXRpb24gcG90ZW50aWFsbHkgbXV0YXRpbmcKICAgICAqIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZAogICAgICogd2l0aCBmb3VyIGFyZ3VtZW50czsgKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLiBDYWxsYmFja3MgbWF5IGV4aXQKICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uCiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgc3F1YXJlcyA9IF8udHJhbnNmb3JtKFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF0sIGZ1bmN0aW9uKHJlc3VsdCwgbnVtKSB7CiAgICAgKiAgIG51bSAqPSBudW07CiAgICAgKiAgIGlmIChudW0gJSAyKSB7CiAgICAgKiAgICAgcmV0dXJuIHJlc3VsdC5wdXNoKG51bSkgPCAzOwogICAgICogICB9CiAgICAgKiB9KTsKICAgICAqIC8vID0+IFsxLCA5LCAyNV0KICAgICAqCiAgICAgKiB2YXIgbWFwcGVkID0gXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIGZ1bmN0aW9uKHJlc3VsdCwgbnVtLCBrZXkpIHsKICAgICAqICAgcmVzdWx0W2tleV0gPSBudW0gKiAzOwogICAgICogfSk7CiAgICAgKiAvLyA9PiB7ICdhJzogMywgJ2InOiA2LCAnYyc6IDkgfQogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBjYWxsYmFjaywgYWNjdW11bGF0b3IsIHRoaXNBcmcpIHsKICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpOwogICAgICBjYWxsYmFjayA9IGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgNCk7CgogICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkgewogICAgICAgIGlmIChpc0FycikgewogICAgICAgICAgYWNjdW11bGF0b3IgPSBbXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIGN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yLAogICAgICAgICAgICAgIHByb3RvID0gY3RvciAmJiBjdG9yLnByb3RvdHlwZTsKCiAgICAgICAgICBhY2N1bXVsYXRvciA9IGNyZWF0ZU9iamVjdChwcm90byk7CiAgICAgICAgfQogICAgICB9CiAgICAgIChpc0FyciA/IGZvckVhY2ggOiBmb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHsKICAgICAgICByZXR1cm4gY2FsbGJhY2soYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTsKICAgICAgfSk7CiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY29tcG9zZWQgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy52YWx1ZXMoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSk7CiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpCiAgICAgKi8KICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHsKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBwcm9wcyA9IGtleXMob2JqZWN0KSwKICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCwKICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7CgogICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIHJlc3VsdFtpbmRleF0gPSBvYmplY3RbcHJvcHNbaW5kZXhdXTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5kZXhlcywgb3Iga2V5cywgb2YgdGhlCiAgICAgKiBgY29sbGVjdGlvbmAuIEluZGV4ZXMgbWF5IGJlIHNwZWNpZmllZCBhcyBpbmRpdmlkdWFsIGFyZ3VtZW50cyBvciBhcyBhcnJheXMKICAgICAqIG9mIGluZGV4ZXMuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXXxzdHJpbmd8c3RyaW5nW10pfSBbaW5kZXhdIFRoZSBpbmRleGVzIG9mIGBjb2xsZWN0aW9uYAogICAgICogICB0byByZXRyaWV2ZSwgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgaW5kZXhlcyBvciBhcnJheXMgb2YgaW5kZXhlcy4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBlbGVtZW50cyBjb3JyZXNwb25kaW5nIHRvIHRoZQogICAgICogIHByb3ZpZGVkIGluZGV4ZXMuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uYXQoWydhJywgJ2InLCAnYycsICdkJywgJ2UnXSwgWzAsIDIsIDRdKTsKICAgICAqIC8vID0+IFsnYScsICdjJywgJ2UnXQogICAgICoKICAgICAqIF8uYXQoWydtb2UnLCAnbGFycnknLCAnY3VybHknXSwgMCwgMik7CiAgICAgKiAvLyA9PiBbJ21vZScsICdjdXJseSddCiAgICAgKi8KICAgIGZ1bmN0aW9uIGF0KGNvbGxlY3Rpb24pIHsKICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsCiAgICAgICAgICBpbmRleCA9IC0xLAogICAgICAgICAgcHJvcHMgPSBiYXNlRmxhdHRlbihhcmdzLCB0cnVlLCBmYWxzZSwgMSksCiAgICAgICAgICBsZW5ndGggPSAoYXJnc1syXSAmJiBhcmdzWzJdW2FyZ3NbMV1dID09PSBjb2xsZWN0aW9uKSA/IDEgOiBwcm9wcy5sZW5ndGgsCiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpOwoKICAgICAgd2hpbGUoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIHJlc3VsdFtpbmRleF0gPSBjb2xsZWN0aW9uW3Byb3BzW2luZGV4XV07CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiBhIGdpdmVuIHZhbHVlIGlzIHByZXNlbnQgaW4gYSBjb2xsZWN0aW9uIHVzaW5nIHN0cmljdCBlcXVhbGl0eQogICAgICogZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQgaXMgdXNlZCBhcyB0aGUKICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBhbGlhcyBpbmNsdWRlCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gY2hlY2sgZm9yLgogICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLgogICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdGFyZ2V0YCBlbGVtZW50IGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uY29udGFpbnMoWzEsIDIsIDNdLCAxKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqCiAgICAgKiBfLmNvbnRhaW5zKFsxLCAyLCAzXSwgMSwgMik7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8uY29udGFpbnMoeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwgJ21vZScpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIF8uY29udGFpbnMoJ2N1cmx5JywgJ3VyJyk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbnRhaW5zKGNvbGxlY3Rpb24sIHRhcmdldCwgZnJvbUluZGV4KSB7CiAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgaW5kZXhPZiA9IGdldEluZGV4T2YoKSwKICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDAsCiAgICAgICAgICByZXN1bHQgPSBmYWxzZTsKCiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggPCAwID8gbmF0aXZlTWF4KDAsIGxlbmd0aCArIGZyb21JbmRleCkgOiBmcm9tSW5kZXgpIHx8IDA7CiAgICAgIGlmIChpc0FycmF5KGNvbGxlY3Rpb24pKSB7CiAgICAgICAgcmVzdWx0ID0gaW5kZXhPZihjb2xsZWN0aW9uLCB0YXJnZXQsIGZyb21JbmRleCkgPiAtMTsKICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInKSB7CiAgICAgICAgcmVzdWx0ID0gKGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbi5pbmRleE9mKHRhcmdldCwgZnJvbUluZGV4KSA6IGluZGV4T2YoY29sbGVjdGlvbiwgdGFyZ2V0LCBmcm9tSW5kZXgpKSA+IC0xOwogICAgICB9IGVsc2UgewogICAgICAgIGZvck93bihjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgaWYgKCsraW5kZXggPj0gZnJvbUluZGV4KSB7CiAgICAgICAgICAgIHJldHVybiAhKHJlc3VsdCA9IHZhbHVlID09PSB0YXJnZXQpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcKICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhyb3VnaCB0aGUgY2FsbGJhY2suIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlCiAgICAgKiBvZiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjay4KICAgICAqIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7CiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuCiAgICAgKgogICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2sKICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsCiAgICAgKiBlbHNlIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkCiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQKICAgICAqICB0byBjcmVhdGUgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uY291bnRCeShbNC4zLCA2LjEsIDYuNF0sIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gTWF0aC5mbG9vcihudW0pOyB9KTsKICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfQogICAgICoKICAgICAqIF8uY291bnRCeShbNC4zLCA2LjEsIDYuNF0sIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gdGhpcy5mbG9vcihudW0pOyB9LCBNYXRoKTsKICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfQogICAgICoKICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpOwogICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9CiAgICAgKi8KICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHsKICAgICAgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpID8gcmVzdWx0W2tleV0rKyA6IHJlc3VsdFtrZXldID0gMSk7CiAgICB9KTsKCiAgICAvKioKICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gY2FsbGJhY2sgcmV0dXJucyB0cnVleSB2YWx1ZSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZgogICAgICogYSBjb2xsZWN0aW9uLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUKICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAYWxpYXMgYWxsCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkCiAgICAgKiAgdG8gY3JlYXRlIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3NlZCB0aGUgY2FsbGJhY2sgY2hlY2ssCiAgICAgKiAgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqCiAgICAgKiB2YXIgc3Rvb2dlcyA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwKICAgICAqICAgeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9CiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8uZXZlcnkoc3Rvb2dlcywgJ2FnZScpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIC8vIHVzaW5nICJfLndoZXJlIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8uZXZlcnkoc3Rvb2dlcywgeyAnYWdlJzogNTAgfSk7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICovCiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTsKICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpOwoKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwOwoKICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicpIHsKICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgICAgaWYgKCEocmVzdWx0ID0gISFjYWxsYmFjayhjb2xsZWN0aW9uW2luZGV4XSwgaW5kZXgsIGNvbGxlY3Rpb24pKSkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yT3duKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikgewogICAgICAgICAgcmV0dXJuIChyZXN1bHQgPSAhIWNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGEgY29sbGVjdGlvbiwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50cwogICAgICogdGhlIGNhbGxiYWNrIHJldHVybnMgdHJ1ZXkgZm9yLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZAogICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAYWxpYXMgc2VsZWN0CiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkCiAgICAgKiAgdG8gY3JlYXRlIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZWxlbWVudHMgdGhhdCBwYXNzZWQgdGhlIGNhbGxiYWNrIGNoZWNrLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgZXZlbnMgPSBfLmZpbHRlcihbMSwgMiwgMywgNCwgNSwgNl0sIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gbnVtICUgMiA9PSAwOyB9KTsKICAgICAqIC8vID0+IFsyLCA0LCA2XQogICAgICoKICAgICAqIHZhciBmb29kID0gWwogICAgICogICB7ICduYW1lJzogJ2FwcGxlJywgICdvcmdhbmljJzogZmFsc2UsICd0eXBlJzogJ2ZydWl0JyB9LAogICAgICogICB7ICduYW1lJzogJ2NhcnJvdCcsICdvcmdhbmljJzogdHJ1ZSwgICd0eXBlJzogJ3ZlZ2V0YWJsZScgfQogICAgICogXTsKICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy5wbHVjayIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLmZpbHRlcihmb29kLCAnb3JnYW5pYycpOwogICAgICogLy8gPT4gW3sgJ25hbWUnOiAnY2Fycm90JywgJ29yZ2FuaWMnOiB0cnVlLCAndHlwZSc6ICd2ZWdldGFibGUnIH1dCiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ud2hlcmUiIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5maWx0ZXIoZm9vZCwgeyAndHlwZSc6ICdmcnVpdCcgfSk7CiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdhcHBsZScsICdvcmdhbmljJzogZmFsc2UsICd0eXBlJzogJ2ZydWl0JyB9XQogICAgICovCiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7CgogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDA7CgogICAgICBpZiAodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJykgewogICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgICB2YXIgdmFsdWUgPSBjb2xsZWN0aW9uW2luZGV4XTsKICAgICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yT3duKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikgewogICAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHsKICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGEgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQKICAgICAqIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5IGZvci4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQKICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS4KICAgICAqCiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ucGx1Y2siIHN0eWxlCiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuCiAgICAgKgogICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIGRldGVjdCwgZmluZFdoZXJlCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkCiAgICAgKiAgdG8gY3JlYXRlIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5maW5kKFsxLCAyLCAzLCA0XSwgZnVuY3Rpb24obnVtKSB7CiAgICAgKiAgIHJldHVybiBudW0gJSAyID09IDA7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IDIKICAgICAqCiAgICAgKiB2YXIgZm9vZCA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdhcHBsZScsICAnb3JnYW5pYyc6IGZhbHNlLCAndHlwZSc6ICdmcnVpdCcgfSwKICAgICAqICAgeyAnbmFtZSc6ICdiYW5hbmEnLCAnb3JnYW5pYyc6IHRydWUsICAndHlwZSc6ICdmcnVpdCcgfSwKICAgICAqICAgeyAnbmFtZSc6ICdiZWV0JywgICAnb3JnYW5pYyc6IGZhbHNlLCAndHlwZSc6ICd2ZWdldGFibGUnIH0KICAgICAqIF07CiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ud2hlcmUiIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5maW5kKGZvb2QsIHsgJ3R5cGUnOiAndmVnZXRhYmxlJyB9KTsKICAgICAqIC8vID0+IHsgJ25hbWUnOiAnYmVldCcsICdvcmdhbmljJzogZmFsc2UsICd0eXBlJzogJ3ZlZ2V0YWJsZScgfQogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8uZmluZChmb29kLCAnb3JnYW5pYycpOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdiYW5hbmEnLCAnb3JnYW5pYyc6IHRydWUsICd0eXBlJzogJ2ZydWl0JyB9CiAgICAgKi8KICAgIGZ1bmN0aW9uIGZpbmQoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpOwoKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwOwoKICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicpIHsKICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgICAgdmFyIHZhbHVlID0gY29sbGVjdGlvbltpbmRleF07CiAgICAgICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkgewogICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHZhciByZXN1bHQ7CiAgICAgICAgZm9yT3duKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikgewogICAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHsKICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMKICAgICAqIG9mIGEgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQKICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZAogICAgICogIHRvIGNyZWF0ZSBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihudW0pIHsKICAgICAqICAgcmV0dXJuIG51bSAlIDIgPT0gMTsKICAgICAqIH0pOwogICAgICogLy8gPT4gMwogICAgICovCiAgICBmdW5jdGlvbiBmaW5kTGFzdChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgcmVzdWx0OwogICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7CiAgICAgIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHsKICAgICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkgewogICAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYSBjb2xsZWN0aW9uLCBleGVjdXRpbmcgdGhlIGNhbGxiYWNrIGZvciBlYWNoCiAgICAgKiBlbGVtZW50LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOwogICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLiBDYWxsYmFja3MgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5CiAgICAgKiBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAYWxpYXMgZWFjaAogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R8c3RyaW5nfSBSZXR1cm5zIGBjb2xsZWN0aW9uYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXyhbMSwgMiwgM10pLmZvckVhY2goZnVuY3Rpb24obnVtKSB7IGNvbnNvbGUubG9nKG51bSk7IH0pLmpvaW4oJywnKTsKICAgICAqIC8vID0+IGxvZ3MgZWFjaCBudW1iZXIgYW5kIHJldHVybnMgJzEsMiwzJwogICAgICoKICAgICAqIF8uZm9yRWFjaCh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9LCBmdW5jdGlvbihudW0pIHsgY29uc29sZS5sb2cobnVtKTsgfSk7CiAgICAgKiAvLyA9PiBsb2dzIGVhY2ggbnVtYmVyIGFuZCByZXR1cm5zIHRoZSBvYmplY3QgKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpCiAgICAgKi8KICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwOwoKICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayAmJiB0eXBlb2YgdGhpc0FyZyA9PSAndW5kZWZpbmVkJyA/IGNhbGxiYWNrIDogYmFzZUNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTsKICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicpIHsKICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgICAgaWYgKGNhbGxiYWNrKGNvbGxlY3Rpb25baW5kZXhdLCBpbmRleCwgY29sbGVjdGlvbikgPT09IGZhbHNlKSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBmb3JPd24oY29sbGVjdGlvbiwgY2FsbGJhY2spOwogICAgICB9CiAgICAgIHJldHVybiBjb2xsZWN0aW9uOwogICAgfQoKICAgIC8qKgogICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JFYWNoYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzCiAgICAgKiBvZiBhIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBhbGlhcyBlYWNoUmlnaHQKICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fHN0cmluZ30gUmV0dXJucyBgY29sbGVjdGlvbmAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8oWzEsIDIsIDNdKS5mb3JFYWNoUmlnaHQoZnVuY3Rpb24obnVtKSB7IGNvbnNvbGUubG9nKG51bSk7IH0pLmpvaW4oJywnKTsKICAgICAqIC8vID0+IGxvZ3MgZWFjaCBudW1iZXIgZnJvbSByaWdodCB0byBsZWZ0IGFuZCByZXR1cm5zICczLDIsMScKICAgICAqLwogICAgZnVuY3Rpb24gZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwOwogICAgICBjYWxsYmFjayA9IGNhbGxiYWNrICYmIHR5cGVvZiB0aGlzQXJnID09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpOwogICAgICBpZiAodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJykgewogICAgICAgIHdoaWxlIChsZW5ndGgtLSkgewogICAgICAgICAgaWYgKGNhbGxiYWNrKGNvbGxlY3Rpb25bbGVuZ3RoXSwgbGVuZ3RoLCBjb2xsZWN0aW9uKSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHZhciBwcm9wcyA9IGtleXMoY29sbGVjdGlvbik7CiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoOwogICAgICAgIGZvck93bihjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgICBrZXkgPSBwcm9wcyA/IHByb3BzWy0tbGVuZ3RoXSA6IC0tbGVuZ3RoOwogICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNvbGxlY3Rpb25ba2V5XSwga2V5LCBjb2xsZWN0aW9uKTsKICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gY29sbGVjdGlvbjsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZwogICAgICogZWFjaCBlbGVtZW50IG9mIGEgY29sbGVjdGlvbiB0aHJvdWdoIHRoZSBjYWxsYmFjay4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUKICAgICAqIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIHRoZSBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LgogICAgICogVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsKICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS4KICAgICAqCiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ucGx1Y2siIHN0eWxlCiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuCiAgICAgKgogICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYAogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkCiAgICAgKiAgdG8gY3JlYXRlIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmdyb3VwQnkoWzQuMiwgNi4xLCA2LjRdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIE1hdGguZmxvb3IobnVtKTsgfSk7CiAgICAgKiAvLyA9PiB7ICc0JzogWzQuMl0sICc2JzogWzYuMSwgNi40XSB9CiAgICAgKgogICAgICogXy5ncm91cEJ5KFs0LjIsIDYuMSwgNi40XSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiB0aGlzLmZsb29yKG51bSk7IH0sIE1hdGgpOwogICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuNF0gfQogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpOwogICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9CiAgICAgKi8KICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHsKICAgICAgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpID8gcmVzdWx0W2tleV0gOiByZXN1bHRba2V5XSA9IFtdKS5wdXNoKHZhbHVlKTsKICAgIH0pOwoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nCiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgdGhlIGNvbGxlY3Rpb24gdGhyb3VnaCB0aGUgZ2l2ZW4gY2FsbGJhY2suIFRoZSBjb3JyZXNwb25kaW5nCiAgICAgKiB2YWx1ZSBvZiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuCiAgICAgKiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOwogICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkCiAgICAgKiAgdG8gY3JlYXRlIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIga2V5cyA9IFsKICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sCiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0KICAgICAqIF07CiAgICAgKgogICAgICogXy5pbmRleEJ5KGtleXMsICdkaXInKTsKICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9CiAgICAgKgogICAgICogXy5pbmRleEJ5KGtleXMsIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShrZXkuY29kZSk7IH0pOwogICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfQogICAgICoKICAgICAqIF8uaW5kZXhCeShzdG9vZ2VzLCBmdW5jdGlvbihrZXkpIHsgdGhpcy5mcm9tQ2hhckNvZGUoa2V5LmNvZGUpOyB9LCBTdHJpbmcpOwogICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfQogICAgICovCiAgICB2YXIgaW5kZXhCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7CiAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7CiAgICB9KTsKCiAgICAvKioKICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBuYW1lZCBieSBgbWV0aG9kTmFtZWAgb24gZWFjaCBlbGVtZW50IGluIHRoZSBgY29sbGVjdGlvbmAKICAgICAqIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBZGRpdGlvbmFsIGFyZ3VtZW50cwogICAgICogd2lsbCBiZSBwcm92aWRlZCB0byBlYWNoIGludm9rZWQgbWV0aG9kLiBJZiBgbWV0aG9kTmFtZWAgaXMgYSBmdW5jdGlvbiBpdAogICAgICogd2lsbCBiZSBpbnZva2VkIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIHRoZSBgY29sbGVjdGlvbmAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yCiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi4KICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ10gQXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pbnZva2UoW1s1LCAxLCA3XSwgWzMsIDIsIDFdXSwgJ3NvcnQnKTsKICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV0KICAgICAqCiAgICAgKiBfLmludm9rZShbMTIzLCA0NTZdLCBTdHJpbmcucHJvdG90eXBlLnNwbGl0LCAnJyk7CiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dCiAgICAgKi8KICAgIGZ1bmN0aW9uIGludm9rZShjb2xsZWN0aW9uLCBtZXRob2ROYW1lKSB7CiAgICAgIHZhciBhcmdzID0gbmF0aXZlU2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLAogICAgICAgICAgaW5kZXggPSAtMSwKICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBtZXRob2ROYW1lID09ICdmdW5jdGlvbicsCiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwLAogICAgICAgICAgcmVzdWx0ID0gQXJyYXkodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyA/IGxlbmd0aCA6IDApOwoKICAgICAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IChpc0Z1bmMgPyBtZXRob2ROYW1lIDogdmFsdWVbbWV0aG9kTmFtZV0pLmFwcGx5KHZhbHVlLCBhcmdzKTsKICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiB0aGUgY29sbGVjdGlvbgogICAgICogdGhyb3VnaCB0aGUgY2FsbGJhY2suIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aAogICAgICogdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuCiAgICAgKgogICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2sKICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsCiAgICAgKiBlbHNlIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBhbGlhcyBjb2xsZWN0CiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkCiAgICAgKiAgdG8gY3JlYXRlIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBgY2FsbGJhY2tgIGV4ZWN1dGlvbi4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5tYXAoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAqIDM7IH0pOwogICAgICogLy8gPT4gWzMsIDYsIDldCiAgICAgKgogICAgICogXy5tYXAoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiBudW0gKiAzOyB9KTsKICAgICAqIC8vID0+IFszLCA2LCA5XSAocHJvcGVydHkgb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQgYWNyb3NzIGVudmlyb25tZW50cykKICAgICAqCiAgICAgKiB2YXIgc3Rvb2dlcyA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwKICAgICAqICAgeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9CiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8ubWFwKHN0b29nZXMsICduYW1lJyk7CiAgICAgKiAvLyA9PiBbJ21vZScsICdsYXJyeSddCiAgICAgKi8KICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDA7CgogICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7CiAgICAgIGlmICh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7CiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBjYWxsYmFjayhjb2xsZWN0aW9uW2luZGV4XSwgaW5kZXgsIGNvbGxlY3Rpb24pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXN1bHQgPSBbXTsKICAgICAgICBmb3JPd24oY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikgewogICAgICAgICAgcmVzdWx0WysraW5kZXhdID0gY2FsbGJhY2sodmFsdWUsIGtleSwgY29sbGVjdGlvbik7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHJpZXZlcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBhIGNvbGxlY3Rpb24uIElmIHRoZSBjb2xsZWN0aW9uIGlzIGVtcHR5IG9yCiAgICAgKiBmYWxzZXkgYC1JbmZpbml0eWAgaXMgcmV0dXJuZWQuIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBleGVjdXRlZAogICAgICogZm9yIGVhY2ggdmFsdWUgaW4gdGhlIGNvbGxlY3Rpb24gdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaCB0aGUgdmFsdWUKICAgICAqIGlzIHJhbmtlZC4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlCiAgICAgKiBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkCiAgICAgKiAgdG8gY3JlYXRlIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5tYXgoWzQsIDIsIDgsIDZdKTsKICAgICAqIC8vID0+IDgKICAgICAqCiAgICAgKiB2YXIgc3Rvb2dlcyA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwKICAgICAqICAgeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9CiAgICAgKiBdOwogICAgICoKICAgICAqIF8ubWF4KHN0b29nZXMsIGZ1bmN0aW9uKHN0b29nZSkgeyByZXR1cm4gc3Rvb2dlLmFnZTsgfSk7CiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2xhcnJ5JywgJ2FnZSc6IDUwIH07CiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5tYXgoc3Rvb2dlcywgJ2FnZScpOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9OwogICAgICovCiAgICBmdW5jdGlvbiBtYXgoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgdmFyIGNvbXB1dGVkID0gLUluZmluaXR5LAogICAgICAgICAgcmVzdWx0ID0gY29tcHV0ZWQ7CgogICAgICBpZiAoIWNhbGxiYWNrICYmIGlzQXJyYXkoY29sbGVjdGlvbikpIHsKICAgICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7CgogICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgICB2YXIgdmFsdWUgPSBjb2xsZWN0aW9uW2luZGV4XTsKICAgICAgICAgIGlmICh2YWx1ZSA+IHJlc3VsdCkgewogICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2FsbGJhY2sgPSAoIWNhbGxiYWNrICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKQogICAgICAgICAgPyBjaGFyQXRDYWxsYmFjawogICAgICAgICAgOiBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpOwoKICAgICAgICBmb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikgewogICAgICAgICAgdmFyIGN1cnJlbnQgPSBjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pOwogICAgICAgICAgaWYgKGN1cnJlbnQgPiBjb21wdXRlZCkgewogICAgICAgICAgICBjb21wdXRlZCA9IGN1cnJlbnQ7CiAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXRyaWV2ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYSBjb2xsZWN0aW9uLiBJZiB0aGUgY29sbGVjdGlvbiBpcyBlbXB0eSBvcgogICAgICogZmFsc2V5IGBJbmZpbml0eWAgaXMgcmV0dXJuZWQuIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBleGVjdXRlZAogICAgICogZm9yIGVhY2ggdmFsdWUgaW4gdGhlIGNvbGxlY3Rpb24gdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaCB0aGUgdmFsdWUKICAgICAqIGlzIHJhbmtlZC4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlCiAgICAgKiBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkCiAgICAgKiAgdG8gY3JlYXRlIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5taW4oWzQsIDIsIDgsIDZdKTsKICAgICAqIC8vID0+IDIKICAgICAqCiAgICAgKiB2YXIgc3Rvb2dlcyA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwKICAgICAqICAgeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9CiAgICAgKiBdOwogICAgICoKICAgICAqIF8ubWluKHN0b29nZXMsIGZ1bmN0aW9uKHN0b29nZSkgeyByZXR1cm4gc3Rvb2dlLmFnZTsgfSk7CiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ21vZScsICdhZ2UnOiA0MCB9OwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8ubWluKHN0b29nZXMsICdhZ2UnKTsKICAgICAqIC8vID0+IHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH07CiAgICAgKi8KICAgIGZ1bmN0aW9uIG1pbihjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgY29tcHV0ZWQgPSBJbmZpbml0eSwKICAgICAgICAgIHJlc3VsdCA9IGNvbXB1dGVkOwoKICAgICAgaWYgKCFjYWxsYmFjayAmJiBpc0FycmF5KGNvbGxlY3Rpb24pKSB7CiAgICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoOwoKICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgICAgdmFyIHZhbHVlID0gY29sbGVjdGlvbltpbmRleF07CiAgICAgICAgICBpZiAodmFsdWUgPCByZXN1bHQpIHsKICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGNhbGxiYWNrID0gKCFjYWxsYmFjayAmJiBpc1N0cmluZyhjb2xsZWN0aW9uKSkKICAgICAgICAgID8gY2hhckF0Q2FsbGJhY2sKICAgICAgICAgIDogbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTsKCiAgICAgICAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHsKICAgICAgICAgIHZhciBjdXJyZW50ID0gY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTsKICAgICAgICAgIGlmIChjdXJyZW50IDwgY29tcHV0ZWQpIHsKICAgICAgICAgICAgY29tcHV0ZWQgPSBjdXJyZW50OwogICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhIHNwZWNpZmllZCBwcm9wZXJ0eSBmcm9tIGFsbCBlbGVtZW50cyBpbiB0aGUgYGNvbGxlY3Rpb25gLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAdHlwZSBGdW5jdGlvbgogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFRoZSBwcm9wZXJ0eSB0byBwbHVjay4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBzdG9vZ2VzID0gWwogICAgICogICB7ICduYW1lJzogJ21vZScsICdhZ2UnOiA0MCB9LAogICAgICogICB7ICduYW1lJzogJ2xhcnJ5JywgJ2FnZSc6IDUwIH0KICAgICAqIF07CiAgICAgKgogICAgICogXy5wbHVjayhzdG9vZ2VzLCAnbmFtZScpOwogICAgICogLy8gPT4gWydtb2UnLCAnbGFycnknXQogICAgICovCiAgICBmdW5jdGlvbiBwbHVjayhjb2xsZWN0aW9uLCBwcm9wZXJ0eSkgewogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDA7CgogICAgICBpZiAodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJykgewogICAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpOwogICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gY29sbGVjdGlvbltpbmRleF1bcHJvcGVydHldOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0IHx8IG1hcChjb2xsZWN0aW9uLCBwcm9wZXJ0eSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWR1Y2VzIGEgY29sbGVjdGlvbiB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZwogICAgICogZWFjaCBlbGVtZW50IGluIHRoZSBjb2xsZWN0aW9uIHRocm91Z2ggdGhlIGNhbGxiYWNrLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmUKICAgICAqIGNhbGxiYWNrIGV4ZWN1dGlvbiBjb25zdW1lcyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cyBleGVjdXRpb24uIElmCiAgICAgKiBgYWNjdW11bGF0b3JgIGlzIG5vdCBwcm92aWRlZCB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgY29sbGVjdGlvbiB3aWxsIGJlCiAgICAgKiB1c2VkIGFzIHRoZSBpbml0aWFsIGBhY2N1bXVsYXRvcmAgdmFsdWUuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AKICAgICAqIGFuZCBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM7IChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBhbGlhcyBmb2xkbCwgaW5qZWN0CiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi4KICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBJbml0aWFsIHZhbHVlIG9mIHRoZSBhY2N1bXVsYXRvci4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgc3VtID0gXy5yZWR1Y2UoWzEsIDIsIDNdLCBmdW5jdGlvbihzdW0sIG51bSkgewogICAgICogICByZXR1cm4gc3VtICsgbnVtOwogICAgICogfSk7CiAgICAgKiAvLyA9PiA2CiAgICAgKgogICAgICogdmFyIG1hcHBlZCA9IF8ucmVkdWNlKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCBmdW5jdGlvbihyZXN1bHQsIG51bSwga2V5KSB7CiAgICAgKiAgIHJlc3VsdFtrZXldID0gbnVtICogMzsKICAgICAqICAgcmV0dXJuIHJlc3VsdDsKICAgICAqIH0sIHt9KTsKICAgICAqIC8vID0+IHsgJ2EnOiAzLCAnYic6IDYsICdjJzogOSB9CiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBjYWxsYmFjaywgYWNjdW11bGF0b3IsIHRoaXNBcmcpIHsKICAgICAgaWYgKCFjb2xsZWN0aW9uKSByZXR1cm4gYWNjdW11bGF0b3I7CiAgICAgIHZhciBub2FjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7CiAgICAgIGNhbGxiYWNrID0gYmFzZUNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCA0KTsKCiAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7CgogICAgICBpZiAodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJykgewogICAgICAgIGlmIChub2FjY3VtKSB7CiAgICAgICAgICBhY2N1bXVsYXRvciA9IGNvbGxlY3Rpb25bKytpbmRleF07CiAgICAgICAgfQogICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgICBhY2N1bXVsYXRvciA9IGNhbGxiYWNrKGFjY3VtdWxhdG9yLCBjb2xsZWN0aW9uW2luZGV4XSwgaW5kZXgsIGNvbGxlY3Rpb24pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBmb3JPd24oY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgICBhY2N1bXVsYXRvciA9IG5vYWNjdW0KICAgICAgICAgICAgPyAobm9hY2N1bSA9IGZhbHNlLCB2YWx1ZSkKICAgICAgICAgICAgOiBjYWxsYmFjayhhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjsKICAgIH0KCiAgICAvKioKICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzCiAgICAgKiBvZiBhIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBhbGlhcyBmb2xkcgogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uCiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gSW5pdGlhbCB2YWx1ZSBvZiB0aGUgYWNjdW11bGF0b3IuCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIGxpc3QgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07CiAgICAgKiB2YXIgZmxhdCA9IF8ucmVkdWNlUmlnaHQobGlzdCwgZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYS5jb25jYXQoYik7IH0sIFtdKTsKICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXQogICAgICovCiAgICBmdW5jdGlvbiByZWR1Y2VSaWdodChjb2xsZWN0aW9uLCBjYWxsYmFjaywgYWNjdW11bGF0b3IsIHRoaXNBcmcpIHsKICAgICAgdmFyIG5vYWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMzsKICAgICAgY2FsbGJhY2sgPSBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDQpOwogICAgICBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgYWNjdW11bGF0b3IgPSBub2FjY3VtCiAgICAgICAgICA/IChub2FjY3VtID0gZmFsc2UsIHZhbHVlKQogICAgICAgICAgOiBjYWxsYmFjayhhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjsKICAgIH0KCiAgICAvKioKICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5maWx0ZXJgIHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGEKICAgICAqIGNvbGxlY3Rpb24gdGhhdCB0aGUgY2FsbGJhY2sgZG9lcyAqKm5vdCoqIHJldHVybiB0cnVleSBmb3IuCiAgICAgKgogICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2sKICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsCiAgICAgKiBlbHNlIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkCiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQKICAgICAqICB0byBjcmVhdGUgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGZhaWxlZCB0aGUgY2FsbGJhY2sgY2hlY2suCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBvZGRzID0gXy5yZWplY3QoWzEsIDIsIDMsIDQsIDUsIDZdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAlIDIgPT0gMDsgfSk7CiAgICAgKiAvLyA9PiBbMSwgMywgNV0KICAgICAqCiAgICAgKiB2YXIgZm9vZCA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdhcHBsZScsICAnb3JnYW5pYyc6IGZhbHNlLCAndHlwZSc6ICdmcnVpdCcgfSwKICAgICAqICAgeyAnbmFtZSc6ICdjYXJyb3QnLCAnb3JnYW5pYyc6IHRydWUsICAndHlwZSc6ICd2ZWdldGFibGUnIH0KICAgICAqIF07CiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5yZWplY3QoZm9vZCwgJ29yZ2FuaWMnKTsKICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2FwcGxlJywgJ29yZ2FuaWMnOiBmYWxzZSwgJ3R5cGUnOiAnZnJ1aXQnIH1dCiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ud2hlcmUiIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5yZWplY3QoZm9vZCwgeyAndHlwZSc6ICdmcnVpdCcgfSk7CiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdjYXJyb3QnLCAnb3JnYW5pYyc6IHRydWUsICd0eXBlJzogJ3ZlZ2V0YWJsZScgfV0KICAgICAqLwogICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTsKICAgICAgcmV0dXJuIGZpbHRlcihjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm4gIWNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogUmV0cmlldmVzIGEgcmFuZG9tIGVsZW1lbnQgb3IgYG5gIHJhbmRvbSBlbGVtZW50cyBmcm9tIGEgY29sbGVjdGlvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLgogICAgICogQHBhcmFtIHtudW1iZXJ9IFtuXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS4KICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBBbGxvd3Mgd29ya2luZyB3aXRoIGZ1bmN0aW9ucywgbGlrZSBgXy5tYXBgLAogICAgICogIHdpdGhvdXQgdXNpbmcgdGhlaXIgYGtleWAgYW5kIGBvYmplY3RgIGFyZ3VtZW50cyBhcyBzb3VyY2VzLgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gc2FtcGxlKHMpIG9mIGBjb2xsZWN0aW9uYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTsKICAgICAqIC8vID0+IDIKICAgICAqCiAgICAgKiBfLnNhbXBsZShbMSwgMiwgMywgNF0sIDIpOwogICAgICogLy8gPT4gWzMsIDFdCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uLCBuLCBndWFyZCkgewogICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMDsKICAgICAgaWYgKHR5cGVvZiBsZW5ndGggIT0gJ251bWJlcicpIHsKICAgICAgICBjb2xsZWN0aW9uID0gdmFsdWVzKGNvbGxlY3Rpb24pOwogICAgICB9CiAgICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHsKICAgICAgICByZXR1cm4gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb25bcmFuZG9tKGxlbmd0aCAtIDEpXSA6IHVuZGVmaW5lZDsKICAgICAgfQogICAgICB2YXIgcmVzdWx0ID0gc2h1ZmZsZShjb2xsZWN0aW9uKTsKICAgICAgcmVzdWx0Lmxlbmd0aCA9IG5hdGl2ZU1pbihuYXRpdmVNYXgoMCwgbiksIHJlc3VsdC5sZW5ndGgpOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGUgRmlzaGVyLVlhdGVzCiAgICAgKiBzaHVmZmxlLiBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBzaHVmZmxlZCBjb2xsZWN0aW9uLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnNodWZmbGUoWzEsIDIsIDMsIDQsIDUsIDZdKTsKICAgICAqIC8vID0+IFs0LCAxLCA2LCAzLCA1LCAyXQogICAgICovCiAgICBmdW5jdGlvbiBzaHVmZmxlKGNvbGxlY3Rpb24pIHsKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwLAogICAgICAgICAgcmVzdWx0ID0gQXJyYXkodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyA/IGxlbmd0aCA6IDApOwoKICAgICAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHZhciByYW5kID0gcmFuZG9tKCsraW5kZXgpOwogICAgICAgIHJlc3VsdFtpbmRleF0gPSByZXN1bHRbcmFuZF07CiAgICAgICAgcmVzdWx0W3JhbmRdID0gdmFsdWU7CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogR2V0cyB0aGUgc2l6ZSBvZiB0aGUgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBgY29sbGVjdGlvbi5sZW5ndGhgIGZvciBhcnJheXMKICAgICAqIGFuZCBhcnJheS1saWtlIG9iamVjdHMgb3IgdGhlIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LgogICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgY29sbGVjdGlvbi5sZW5ndGhgIG9yIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnNpemUoWzEsIDJdKTsKICAgICAqIC8vID0+IDIKICAgICAqCiAgICAgKiBfLnNpemUoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSk7CiAgICAgKiAvLyA9PiAzCiAgICAgKgogICAgICogXy5zaXplKCdjdXJseScpOwogICAgICogLy8gPT4gNQogICAgICovCiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHsKICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDA7CiAgICAgIHJldHVybiB0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInID8gbGVuZ3RoIDoga2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgdGhlIGNhbGxiYWNrIHJldHVybnMgYSB0cnVleSB2YWx1ZSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGEKICAgICAqIGNvbGxlY3Rpb24uIFRoZSBmdW5jdGlvbiByZXR1cm5zIGFzIHNvb24gYXMgaXQgZmluZHMgYSBwYXNzaW5nIHZhbHVlIGFuZAogICAgICogZG9lcyBub3QgaXRlcmF0ZSBvdmVyIHRoZSBlbnRpcmUgY29sbGVjdGlvbi4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvCiAgICAgKiBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS4KICAgICAqCiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ucGx1Y2siIHN0eWxlCiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuCiAgICAgKgogICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIGFueQogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQKICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZAogICAgICogIHRvIGNyZWF0ZSBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlZCB0aGUgY2FsbGJhY2sgY2hlY2ssCiAgICAgKiAgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIHZhciBmb29kID0gWwogICAgICogICB7ICduYW1lJzogJ2FwcGxlJywgICdvcmdhbmljJzogZmFsc2UsICd0eXBlJzogJ2ZydWl0JyB9LAogICAgICogICB7ICduYW1lJzogJ2NhcnJvdCcsICdvcmdhbmljJzogdHJ1ZSwgICd0eXBlJzogJ3ZlZ2V0YWJsZScgfQogICAgICogXTsKICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy5wbHVjayIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLnNvbWUoZm9vZCwgJ29yZ2FuaWMnKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy53aGVyZSIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLnNvbWUoZm9vZCwgeyAndHlwZSc6ICdtZWF0JyB9KTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgdmFyIHJlc3VsdDsKICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpOwoKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwOwoKICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicpIHsKICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgICAgaWYgKChyZXN1bHQgPSBjYWxsYmFjayhjb2xsZWN0aW9uW2luZGV4XSwgaW5kZXgsIGNvbGxlY3Rpb24pKSkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yT3duKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikgewogICAgICAgICAgcmV0dXJuICEocmVzdWx0ID0gY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuICEhcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZgogICAgICogcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uIHRocm91Z2ggdGhlIGNhbGxiYWNrLiBUaGlzIG1ldGhvZAogICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgd2lsbCBwcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgc29ydCBvcmRlcgogICAgICogb2YgZXF1YWwgZWxlbWVudHMuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aAogICAgICogdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuCiAgICAgKgogICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2sKICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsCiAgICAgKiBlbHNlIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkCiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQKICAgICAqICB0byBjcmVhdGUgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBzb3J0ZWQgZWxlbWVudHMuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uc29ydEJ5KFsxLCAyLCAzXSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiBNYXRoLnNpbihudW0pOyB9KTsKICAgICAqIC8vID0+IFszLCAxLCAyXQogICAgICoKICAgICAqIF8uc29ydEJ5KFsxLCAyLCAzXSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiB0aGlzLnNpbihudW0pOyB9LCBNYXRoKTsKICAgICAqIC8vID0+IFszLCAxLCAyXQogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8uc29ydEJ5KFsnYmFuYW5hJywgJ3N0cmF3YmVycnknLCAnYXBwbGUnXSwgJ2xlbmd0aCcpOwogICAgICogLy8gPT4gWydhcHBsZScsICdiYW5hbmEnLCAnc3RyYXdiZXJyeSddCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNvcnRCeShjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDAsCiAgICAgICAgICByZXN1bHQgPSBBcnJheSh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInID8gbGVuZ3RoIDogMCk7CgogICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7CiAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikgewogICAgICAgIHZhciBvYmplY3QgPSByZXN1bHRbKytpbmRleF0gPSBnZXRPYmplY3QoKTsKICAgICAgICBvYmplY3QuY3JpdGVyaWEgPSBjYWxsYmFjayh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTsKICAgICAgICBvYmplY3QuaW5kZXggPSBpbmRleDsKICAgICAgICBvYmplY3QudmFsdWUgPSB2YWx1ZTsKICAgICAgfSk7CgogICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoOwogICAgICByZXN1bHQuc29ydChjb21wYXJlQXNjZW5kaW5nKTsKICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICAgICAgdmFyIG9iamVjdCA9IHJlc3VsdFtsZW5ndGhdOwogICAgICAgIHJlc3VsdFtsZW5ndGhdID0gb2JqZWN0LnZhbHVlOwogICAgICAgIHJlbGVhc2VPYmplY3Qob2JqZWN0KTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQ29udmVydHMgdGhlIGBjb2xsZWN0aW9uYCB0byBhbiBhcnJheS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gY29udmVydC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbnZlcnRlZCBhcnJheS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogKGZ1bmN0aW9uKCkgeyByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cykuc2xpY2UoMSk7IH0pKDEsIDIsIDMsIDQpOwogICAgICogLy8gPT4gWzIsIDMsIDRdCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvQXJyYXkoY29sbGVjdGlvbikgewogICAgICBpZiAoY29sbGVjdGlvbiAmJiB0eXBlb2YgY29sbGVjdGlvbi5sZW5ndGggPT0gJ251bWJlcicpIHsKICAgICAgICByZXR1cm4gc2xpY2UoY29sbGVjdGlvbik7CiAgICAgIH0KICAgICAgcmV0dXJuIHZhbHVlcyhjb2xsZWN0aW9uKTsKICAgIH0KCiAgICAvKioKICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIG9mIGVhY2ggZWxlbWVudCBpbiBhIGBjb2xsZWN0aW9uYCB0byB0aGUgZ2l2ZW4KICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHMgdGhhdCBoYXZlIGVxdWl2YWxlbnQKICAgICAqIHByb3BlcnR5IHZhbHVlcy4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQHR5cGUgRnVuY3Rpb24KICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIGZpbHRlciBieS4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIGdpdmVuIHByb3BlcnRpZXMuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBzdG9vZ2VzID0gWwogICAgICogICB7ICduYW1lJzogJ2N1cmx5JywgJ2FnZSc6IDMwLCAncXVvdGVzJzogWydPaCwgYSB3aXNlIGd1eSwgZWg/JywgJ1BvaWZlY3QhJ10gfSwKICAgICAqICAgeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAsICdxdW90ZXMnOiBbJ1NwcmVhZCBvdXQhJywgJ1lvdSBrbnVja2xlaGVhZCEnXSB9CiAgICAgKiBdOwogICAgICoKICAgICAqIF8ud2hlcmUoc3Rvb2dlcywgeyAnYWdlJzogNDAgfSk7CiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAsICdxdW90ZXMnOiBbJ1NwcmVhZCBvdXQhJywgJ1lvdSBrbnVja2xlaGVhZCEnXSB9XQogICAgICoKICAgICAqIF8ud2hlcmUoc3Rvb2dlcywgeyAncXVvdGVzJzogWydQb2lmZWN0ISddIH0pOwogICAgICogLy8gPT4gW3sgJ25hbWUnOiAnY3VybHknLCAnYWdlJzogMzAsICdxdW90ZXMnOiBbJ09oLCBhIHdpc2UgZ3V5LCBlaD8nLCAnUG9pZmVjdCEnXSB9XQogICAgICovCiAgICB2YXIgd2hlcmUgPSBmaWx0ZXI7CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsCiAgICAgKiBgMGAsIGAiImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGFsbCBmYWxzZXkuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBBcnJheXMKICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTsKICAgICAqIC8vID0+IFsxLCAyLCAzXQogICAgICovCiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7CiAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLAogICAgICAgICAgcmVzdWx0ID0gW107CgogICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTsKICAgICAgICBpZiAodmFsdWUpIHsKICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCB2YWx1ZXMgb2YgdGhlIHByb3ZpZGVkIGFycmF5cyB1c2luZyBzdHJpY3QKICAgICAqIGVxdWFsaXR5IGZvciBjb21wYXJpc29ucywgaS5lLiBgPT09YC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuCiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXldIFRoZSBhcnJheXMgb2YgdmFsdWVzIHRvIGV4Y2x1ZGUuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmRpZmZlcmVuY2UoWzEsIDIsIDMsIDQsIDVdLCBbNSwgMiwgMTBdKTsKICAgICAqIC8vID0+IFsxLCAzLCA0XQogICAgICovCiAgICBmdW5jdGlvbiBkaWZmZXJlbmNlKGFycmF5KSB7CiAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgaW5kZXhPZiA9IGdldEluZGV4T2YoKSwKICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCwKICAgICAgICAgIHNlZW4gPSBiYXNlRmxhdHRlbihhcmd1bWVudHMsIHRydWUsIHRydWUsIDEpLAogICAgICAgICAgcmVzdWx0ID0gW107CgogICAgICB2YXIgaXNMYXJnZSA9IGxlbmd0aCA+PSBsYXJnZUFycmF5U2l6ZSAmJiBpbmRleE9mID09PSBiYXNlSW5kZXhPZjsKCiAgICAgIGlmIChpc0xhcmdlKSB7CiAgICAgICAgdmFyIGNhY2hlID0gY3JlYXRlQ2FjaGUoc2Vlbik7CiAgICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgICBpbmRleE9mID0gY2FjaGVJbmRleE9mOwogICAgICAgICAgc2VlbiA9IGNhY2hlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpc0xhcmdlID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdOwogICAgICAgIGlmIChpbmRleE9mKHNlZW4sIHZhbHVlKSA8IDApIHsKICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGlzTGFyZ2UpIHsKICAgICAgICByZWxlYXNlT2JqZWN0KHNlZW4pOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdAogICAgICogZWxlbWVudCB0aGF0IHBhc3NlcyB0aGUgY2FsbGJhY2sgY2hlY2ssIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQKICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZAogICAgICogIHRvIGNyZWF0ZSBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5maW5kSW5kZXgoWydhcHBsZScsICdiYW5hbmEnLCAnYmVldCddLCBmdW5jdGlvbihmb29kKSB7CiAgICAgKiAgIHJldHVybiAvXmIvLnRlc3QoZm9vZCk7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IDEKICAgICAqLwogICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDsKCiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTsKICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICBpZiAoY2FsbGJhY2soYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7CiAgICAgICAgICByZXR1cm4gaW5kZXg7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiAtMTsKICAgIH0KCiAgICAvKioKICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzCiAgICAgKiBvZiBhIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBBcnJheXMKICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkCiAgICAgKiAgdG8gY3JlYXRlIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmZpbmRMYXN0SW5kZXgoWydhcHBsZScsICdiYW5hbmEnLCAnYmVldCddLCBmdW5jdGlvbihmb29kKSB7CiAgICAgKiAgIHJldHVybiAvXmIvLnRlc3QoZm9vZCk7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IDIKICAgICAqLwogICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDsKICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpOwogICAgICB3aGlsZSAobGVuZ3RoLS0pIHsKICAgICAgICBpZiAoY2FsbGJhY2soYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkpIHsKICAgICAgICAgIHJldHVybiBsZW5ndGg7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiAtMTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb3IgZmlyc3QgYG5gIGVsZW1lbnRzIG9mIGFuIGFycmF5LiBJZiBhIGNhbGxiYWNrCiAgICAgKiBpcyBwcm92aWRlZCBlbGVtZW50cyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheSBhcmUgcmV0dXJuZWQgYXMgbG9uZwogICAgICogYXMgdGhlIGNhbGxiYWNrIHJldHVybnMgdHJ1ZXkuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kCiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4LCBhcnJheSkuCiAgICAgKgogICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2sKICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsCiAgICAgKiBlbHNlIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBhbGlhcyBoZWFkLCB0YWtlCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxudW1iZXJ8c3RyaW5nfSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiBjYWxsZWQKICAgICAqICBwZXIgZWxlbWVudCBvciB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHJldHVybi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yCiAgICAgKiAgb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiCiAgICAgKiAgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQocykgb2YgYGFycmF5YC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5maXJzdChbMSwgMiwgM10pOwogICAgICogLy8gPT4gMQogICAgICoKICAgICAqIF8uZmlyc3QoWzEsIDIsIDNdLCAyKTsKICAgICAqIC8vID0+IFsxLCAyXQogICAgICoKICAgICAqIF8uZmlyc3QoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsKICAgICAqICAgcmV0dXJuIG51bSA8IDM7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IFsxLCAyXQogICAgICoKICAgICAqIHZhciBmb29kID0gWwogICAgICogICB7ICduYW1lJzogJ2JhbmFuYScsICdvcmdhbmljJzogdHJ1ZSB9LAogICAgICogICB7ICduYW1lJzogJ2JlZXQnLCAgICdvcmdhbmljJzogZmFsc2UgfSwKICAgICAqIF07CiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5maXJzdChmb29kLCAnb3JnYW5pYycpOwogICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmFuYW5hJywgJ29yZ2FuaWMnOiB0cnVlIH1dCiAgICAgKgogICAgICogdmFyIGZvb2QgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnYXBwbGUnLCAgJ3R5cGUnOiAnZnJ1aXQnIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnYmFuYW5hJywgJ3R5cGUnOiAnZnJ1aXQnIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnYmVldCcsICAgJ3R5cGUnOiAndmVnZXRhYmxlJyB9CiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLndoZXJlIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8uZmlyc3QoZm9vZCwgeyAndHlwZSc6ICdmcnVpdCcgfSk7CiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdhcHBsZScsICd0eXBlJzogJ2ZydWl0JyB9LCB7ICduYW1lJzogJ2JhbmFuYScsICd0eXBlJzogJ2ZydWl0JyB9XQogICAgICovCiAgICBmdW5jdGlvbiBmaXJzdChhcnJheSwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgdmFyIG4gPSAwLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwOwoKICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7CiAgICAgICAgdmFyIGluZGV4ID0gLTE7CiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpOwogICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGNhbGxiYWNrKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkgewogICAgICAgICAgbisrOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBuID0gY2FsbGJhY2s7CiAgICAgICAgaWYgKG4gPT0gbnVsbCB8fCB0aGlzQXJnKSB7CiAgICAgICAgICByZXR1cm4gYXJyYXkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCAwLCBuYXRpdmVNaW4obmF0aXZlTWF4KDAsIG4pLCBsZW5ndGgpKTsKICAgIH0KCiAgICAvKioKICAgICAqIEZsYXR0ZW5zIGEgbmVzdGVkIGFycmF5ICh0aGUgbmVzdGluZyBjYW4gYmUgdG8gYW55IGRlcHRoKS4gSWYgYGlzU2hhbGxvd2AKICAgICAqIGlzIHRydWV5LCB0aGUgYXJyYXkgd2lsbCBvbmx5IGJlIGZsYXR0ZW5lZCBhIHNpbmdsZSBsZXZlbC4gSWYgYSBjYWxsYmFjawogICAgICogaXMgcHJvdmlkZWQgZWFjaCBlbGVtZW50IG9mIHRoZSBhcnJheSBpcyBwYXNzZWQgdGhyb3VnaCB0aGUgY2FsbGJhY2sgYmVmb3JlCiAgICAgKiBmbGF0dGVuaW5nLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUKICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU2hhbGxvdz1mYWxzZV0gQSBmbGFnIHRvIHJlc3RyaWN0IGZsYXR0ZW5pbmcgdG8gYSBzaW5nbGUgbGV2ZWwuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkCiAgICAgKiAgdG8gY3JlYXRlIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgZmxhdHRlbmVkIGFycmF5LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyXSwgWzMsIFtbNF1dXV0pOwogICAgICogLy8gPT4gWzEsIDIsIDMsIDRdOwogICAgICoKICAgICAqIF8uZmxhdHRlbihbMSwgWzJdLCBbMywgW1s0XV1dXSwgdHJ1ZSk7CiAgICAgKiAvLyA9PiBbMSwgMiwgMywgW1s0XV1dOwogICAgICoKICAgICAqIHZhciBzdG9vZ2VzID0gWwogICAgICogICB7ICduYW1lJzogJ2N1cmx5JywgJ3F1b3Rlcyc6IFsnT2gsIGEgd2lzZSBndXksIGVoPycsICdQb2lmZWN0ISddIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnbW9lJywgJ3F1b3Rlcyc6IFsnU3ByZWFkIG91dCEnLCAnWW91IGtudWNrbGVoZWFkISddIH0KICAgICAqIF07CiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5mbGF0dGVuKHN0b29nZXMsICdxdW90ZXMnKTsKICAgICAqIC8vID0+IFsnT2gsIGEgd2lzZSBndXksIGVoPycsICdQb2lmZWN0IScsICdTcHJlYWQgb3V0IScsICdZb3Uga251Y2tsZWhlYWQhJ10KICAgICAqLwogICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSwgaXNTaGFsbG93LCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICAvLyBqdWdnbGUgYXJndW1lbnRzCiAgICAgIGlmICh0eXBlb2YgaXNTaGFsbG93ICE9ICdib29sZWFuJyAmJiBpc1NoYWxsb3cgIT0gbnVsbCkgewogICAgICAgIHRoaXNBcmcgPSBjYWxsYmFjazsKICAgICAgICBjYWxsYmFjayA9ICEodGhpc0FyZyAmJiB0aGlzQXJnW2lzU2hhbGxvd10gPT09IGFycmF5KSA/IGlzU2hhbGxvdyA6IG51bGw7CiAgICAgICAgaXNTaGFsbG93ID0gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHsKICAgICAgICBhcnJheSA9IG1hcChhcnJheSwgY2FsbGJhY2ssIHRoaXNBcmcpOwogICAgICB9CiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgaXNTaGFsbG93KTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgdXNpbmcKICAgICAqIHN0cmljdCBlcXVhbGl0eSBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuIElmIHRoZSBhcnJheSBpcyBhbHJlYWR5IHNvcnRlZAogICAgICogcHJvdmlkaW5nIGB0cnVlYCBmb3IgYGZyb21JbmRleGAgd2lsbCBydW4gYSBmYXN0ZXIgYmluYXJ5IHNlYXJjaC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC4KICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbSBvciBgdHJ1ZWAKICAgICAqICB0byBwZXJmb3JtIGEgYmluYXJ5IHNlYXJjaCBvbiBhIHNvcnRlZCBhcnJheS4KICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlIG9yIGAtMWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMywgMSwgMiwgM10sIDIpOwogICAgICogLy8gPT4gMQogICAgICoKICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMywgMSwgMiwgM10sIDIsIDMpOwogICAgICogLy8gPT4gNAogICAgICoKICAgICAqIF8uaW5kZXhPZihbMSwgMSwgMiwgMiwgMywgM10sIDIsIHRydWUpOwogICAgICogLy8gPT4gMgogICAgICovCiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7CiAgICAgIGlmICh0eXBlb2YgZnJvbUluZGV4ID09ICdudW1iZXInKSB7CiAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDsKICAgICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4IDwgMCA/IG5hdGl2ZU1heCgwLCBsZW5ndGggKyBmcm9tSW5kZXgpIDogZnJvbUluZGV4IHx8IDApOwogICAgICB9IGVsc2UgaWYgKGZyb21JbmRleCkgewogICAgICAgIHZhciBpbmRleCA9IHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIGFycmF5W2luZGV4XSA9PT0gdmFsdWUgPyBpbmRleCA6IC0xOwogICAgICB9CiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvciBsYXN0IGBuYCBlbGVtZW50cyBvZiBhbiBhcnJheS4gSWYgYQogICAgICogY2FsbGJhY2sgaXMgcHJvdmlkZWQgZWxlbWVudHMgYXQgdGhlIGVuZCBvZiB0aGUgYXJyYXkgYXJlIGV4Y2x1ZGVkIGZyb20KICAgICAqIHRoZSByZXN1bHQgYXMgbG9uZyBhcyB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVleS4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kCiAgICAgKiB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS4KICAgICAqCiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ucGx1Y2siIHN0eWxlCiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuCiAgICAgKgogICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8bnVtYmVyfHN0cmluZ30gW2NhbGxiYWNrPTFdIFRoZSBmdW5jdGlvbiBjYWxsZWQKICAgICAqICBwZXIgZWxlbWVudCBvciB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGV4Y2x1ZGUuIElmIGEgcHJvcGVydHkgbmFtZSBvcgogICAgICogIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIgogICAgICogIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIHNsaWNlIG9mIGBhcnJheWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pOwogICAgICogLy8gPT4gWzEsIDJdCiAgICAgKgogICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSwgMik7CiAgICAgKiAvLyA9PiBbMV0KICAgICAqCiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsKICAgICAqICAgcmV0dXJuIG51bSA+IDE7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IFsxXQogICAgICoKICAgICAqIHZhciBmb29kID0gWwogICAgICogICB7ICduYW1lJzogJ2JlZXQnLCAgICdvcmdhbmljJzogZmFsc2UgfSwKICAgICAqICAgeyAnbmFtZSc6ICdjYXJyb3QnLCAnb3JnYW5pYyc6IHRydWUgfQogICAgICogXTsKICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy5wbHVjayIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLmluaXRpYWwoZm9vZCwgJ29yZ2FuaWMnKTsKICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2JlZXQnLCAgICdvcmdhbmljJzogZmFsc2UgfV0KICAgICAqCiAgICAgKiB2YXIgZm9vZCA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdiYW5hbmEnLCAndHlwZSc6ICdmcnVpdCcgfSwKICAgICAqICAgeyAnbmFtZSc6ICdiZWV0JywgICAndHlwZSc6ICd2ZWdldGFibGUnIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnY2Fycm90JywgJ3R5cGUnOiAndmVnZXRhYmxlJyB9CiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLndoZXJlIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8uaW5pdGlhbChmb29kLCB7ICd0eXBlJzogJ3ZlZ2V0YWJsZScgfSk7CiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdiYW5hbmEnLCAndHlwZSc6ICdmcnVpdCcgfV0KICAgICAqLwogICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgdmFyIG4gPSAwLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwOwoKICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7CiAgICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoOwogICAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTsKICAgICAgICB3aGlsZSAoaW5kZXgtLSAmJiBjYWxsYmFjayhhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHsKICAgICAgICAgIG4rKzsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbiA9IChjYWxsYmFjayA9PSBudWxsIHx8IHRoaXNBcmcpID8gMSA6IGNhbGxiYWNrIHx8IG47CiAgICAgIH0KICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCAwLCBuYXRpdmVNaW4obmF0aXZlTWF4KDAsIGxlbmd0aCAtIG4pLCBsZW5ndGgpKTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyBwcmVzZW50IGluIGFsbCBwcm92aWRlZCBhcnJheXMgdXNpbmcKICAgICAqIHN0cmljdCBlcXVhbGl0eSBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBBcnJheXMKICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheV0gVGhlIGFycmF5cyB0byBpbnNwZWN0LgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIGNvbXBvc2l0ZSB2YWx1ZXMuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaW50ZXJzZWN0aW9uKFsxLCAyLCAzXSwgWzEwMSwgMiwgMSwgMTBdLCBbMiwgMV0pOwogICAgICogLy8gPT4gWzEsIDJdCiAgICAgKi8KICAgIGZ1bmN0aW9uIGludGVyc2VjdGlvbihhcnJheSkgewogICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cywKICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCwKICAgICAgICAgIGFyZ3NJbmRleCA9IC0xLAogICAgICAgICAgY2FjaGVzID0gZ2V0QXJyYXkoKSwKICAgICAgICAgIGluZGV4ID0gLTEsCiAgICAgICAgICBpbmRleE9mID0gZ2V0SW5kZXhPZigpLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLAogICAgICAgICAgcmVzdWx0ID0gW10sCiAgICAgICAgICBzZWVuID0gZ2V0QXJyYXkoKTsKCiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHsKICAgICAgICB2YXIgdmFsdWUgPSBhcmdzW2FyZ3NJbmRleF07CiAgICAgICAgY2FjaGVzW2FyZ3NJbmRleF0gPSBpbmRleE9mID09PSBiYXNlSW5kZXhPZiAmJgogICAgICAgICAgKHZhbHVlID8gdmFsdWUubGVuZ3RoIDogMCkgPj0gbGFyZ2VBcnJheVNpemUgJiYKICAgICAgICAgIGNyZWF0ZUNhY2hlKGFyZ3NJbmRleCA/IGFyZ3NbYXJnc0luZGV4XSA6IHNlZW4pOwogICAgICB9CiAgICAgIG91dGVyOgogICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1swXTsKICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTsKCiAgICAgICAgaWYgKChjYWNoZSA/IGNhY2hlSW5kZXhPZihjYWNoZSwgdmFsdWUpIDogaW5kZXhPZihzZWVuLCB2YWx1ZSkpIDwgMCkgewogICAgICAgICAgYXJnc0luZGV4ID0gYXJnc0xlbmd0aDsKICAgICAgICAgIChjYWNoZSB8fCBzZWVuKS5wdXNoKHZhbHVlKTsKICAgICAgICAgIHdoaWxlICgtLWFyZ3NJbmRleCkgewogICAgICAgICAgICBjYWNoZSA9IGNhY2hlc1thcmdzSW5kZXhdOwogICAgICAgICAgICBpZiAoKGNhY2hlID8gY2FjaGVJbmRleE9mKGNhY2hlLCB2YWx1ZSkgOiBpbmRleE9mKGFyZ3NbYXJnc0luZGV4XSwgdmFsdWUpKSA8IDApIHsKICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpOwogICAgICAgIH0KICAgICAgfQogICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7CiAgICAgICAgY2FjaGUgPSBjYWNoZXNbYXJnc0xlbmd0aF07CiAgICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgICByZWxlYXNlT2JqZWN0KGNhY2hlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmVsZWFzZUFycmF5KGNhY2hlcyk7CiAgICAgIHJlbGVhc2VBcnJheShzZWVuKTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvciBsYXN0IGBuYCBlbGVtZW50cyBvZiBhbiBhcnJheS4gSWYgYSBjYWxsYmFjayBpcwogICAgICogcHJvdmlkZWQgZWxlbWVudHMgYXQgdGhlIGVuZCBvZiB0aGUgYXJyYXkgYXJlIHJldHVybmVkIGFzIGxvbmcgYXMgdGhlCiAgICAgKiBjYWxsYmFjayByZXR1cm5zIHRydWV5LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkCiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxudW1iZXJ8c3RyaW5nfSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiBjYWxsZWQKICAgICAqICBwZXIgZWxlbWVudCBvciB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHJldHVybi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yCiAgICAgKiAgb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiCiAgICAgKiAgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudChzKSBvZiBgYXJyYXlgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTsKICAgICAqIC8vID0+IDMKICAgICAqCiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdLCAyKTsKICAgICAqIC8vID0+IFsyLCAzXQogICAgICoKICAgICAqIF8ubGFzdChbMSwgMiwgM10sIGZ1bmN0aW9uKG51bSkgewogICAgICogICByZXR1cm4gbnVtID4gMTsKICAgICAqIH0pOwogICAgICogLy8gPT4gWzIsIDNdCiAgICAgKgogICAgICogdmFyIGZvb2QgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnYmVldCcsICAgJ29yZ2FuaWMnOiBmYWxzZSB9LAogICAgICogICB7ICduYW1lJzogJ2NhcnJvdCcsICdvcmdhbmljJzogdHJ1ZSB9CiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8ubGFzdChmb29kLCAnb3JnYW5pYycpOwogICAgICogLy8gPT4gW3sgJ25hbWUnOiAnY2Fycm90JywgJ29yZ2FuaWMnOiB0cnVlIH1dCiAgICAgKgogICAgICogdmFyIGZvb2QgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnYmFuYW5hJywgJ3R5cGUnOiAnZnJ1aXQnIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnYmVldCcsICAgJ3R5cGUnOiAndmVnZXRhYmxlJyB9LAogICAgICogICB7ICduYW1lJzogJ2NhcnJvdCcsICd0eXBlJzogJ3ZlZ2V0YWJsZScgfQogICAgICogXTsKICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy53aGVyZSIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLmxhc3QoZm9vZCwgeyAndHlwZSc6ICd2ZWdldGFibGUnIH0pOwogICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmVldCcsICd0eXBlJzogJ3ZlZ2V0YWJsZScgfSwgeyAnbmFtZSc6ICdjYXJyb3QnLCAndHlwZSc6ICd2ZWdldGFibGUnIH1dCiAgICAgKi8KICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXksIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciBuID0gMCwKICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDsKCiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ251bWJlcicgJiYgY2FsbGJhY2sgIT0gbnVsbCkgewogICAgICAgIHZhciBpbmRleCA9IGxlbmd0aDsKICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7CiAgICAgICAgd2hpbGUgKGluZGV4LS0gJiYgY2FsbGJhY2soYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7CiAgICAgICAgICBuKys7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIG4gPSBjYWxsYmFjazsKICAgICAgICBpZiAobiA9PSBudWxsIHx8IHRoaXNBcmcpIHsKICAgICAgICAgIHJldHVybiBhcnJheSA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gc2xpY2UoYXJyYXksIG5hdGl2ZU1heCgwLCBsZW5ndGggLSBuKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgbGFzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgdXNpbmcgc3RyaWN0CiAgICAgKiBlcXVhbGl0eSBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCBpcyB1c2VkCiAgICAgKiBhcyB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC4KICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLgogICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUgb3IgYC0xYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMywgMSwgMiwgM10sIDIpOwogICAgICogLy8gPT4gNAogICAgICoKICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDMsIDEsIDIsIDNdLCAyLCAzKTsKICAgICAqIC8vID0+IDEKICAgICAqLwogICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHsKICAgICAgdmFyIGluZGV4ID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwOwogICAgICBpZiAodHlwZW9mIGZyb21JbmRleCA9PSAnbnVtYmVyJykgewogICAgICAgIGluZGV4ID0gKGZyb21JbmRleCA8IDAgPyBuYXRpdmVNYXgoMCwgaW5kZXggKyBmcm9tSW5kZXgpIDogbmF0aXZlTWluKGZyb21JbmRleCwgaW5kZXggLSAxKSkgKyAxOwogICAgICB9CiAgICAgIHdoaWxlIChpbmRleC0tKSB7CiAgICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHsKICAgICAgICAgIHJldHVybiBpbmRleDsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIC0xOwogICAgfQoKICAgIC8qKgogICAgICogUmVtb3ZlcyBhbGwgcHJvdmlkZWQgdmFsdWVzIGZyb20gdGhlIGdpdmVuIGFycmF5IHVzaW5nIHN0cmljdCBlcXVhbGl0eSBmb3IKICAgICAqIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LgogICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCAxLCAyLCAzXTsKICAgICAqIF8ucHVsbChhcnJheSwgMiwgMyk7CiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7CiAgICAgKiAvLyA9PiBbMSwgMV0KICAgICAqLwogICAgZnVuY3Rpb24gcHVsbChhcnJheSkgewogICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cywKICAgICAgICAgIGFyZ3NJbmRleCA9IDAsCiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsCiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7CgogICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7CiAgICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICAgIHZhbHVlID0gYXJnc1thcmdzSW5kZXhdOwogICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkgewogICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgtLSwgMSk7CiAgICAgICAgICAgIGxlbmd0aC0tOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gYXJyYXk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbQogICAgICogYHN0YXJ0YCB1cCB0byBidXQgbm90IGluY2x1ZGluZyBgZW5kYC4gSWYgYHN0YXJ0YCBpcyBsZXNzIHRoYW4gYHN0b3BgIGEKICAgICAqIHplcm8tbGVuZ3RoIHJhbmdlIGlzIGNyZWF0ZWQgdW5sZXNzIGEgbmVnYXRpdmUgYHN0ZXBgIGlzIHNwZWNpZmllZC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLgogICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyByYW5nZSBhcnJheS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5yYW5nZSgxMCk7CiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOV0KICAgICAqCiAgICAgKiBfLnJhbmdlKDEsIDExKTsKICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF0KICAgICAqCiAgICAgKiBfLnJhbmdlKDAsIDMwLCA1KTsKICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTUsIDIwLCAyNV0KICAgICAqCiAgICAgKiBfLnJhbmdlKDAsIC0xMCwgLTEpOwogICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTMsIC00LCAtNSwgLTYsIC03LCAtOCwgLTldCiAgICAgKgogICAgICogXy5yYW5nZSgxLCA0LCAwKTsKICAgICAqIC8vID0+IFsxLCAxLCAxXQogICAgICoKICAgICAqIF8ucmFuZ2UoMCk7CiAgICAgKiAvLyA9PiBbXQogICAgICovCiAgICBmdW5jdGlvbiByYW5nZShzdGFydCwgZW5kLCBzdGVwKSB7CiAgICAgIHN0YXJ0ID0gK3N0YXJ0IHx8IDA7CiAgICAgIHN0ZXAgPSB0eXBlb2Ygc3RlcCA9PSAnbnVtYmVyJyA/IHN0ZXAgOiAoK3N0ZXAgfHwgMSk7CgogICAgICBpZiAoZW5kID09IG51bGwpIHsKICAgICAgICBlbmQgPSBzdGFydDsKICAgICAgICBzdGFydCA9IDA7CiAgICAgIH0KICAgICAgLy8gdXNlIGBBcnJheShsZW5ndGgpYCBzbyBlbmdpbmVzLCBsaWtlIENoYWtyYSBhbmQgVjgsIGF2b2lkIHNsb3dlciBtb2RlcwogICAgICAvLyBodHRwOi8veW91dHUuYmUvWEFxSXBHVThaWmsjdD0xN20yNXMKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoMCwgY2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpKSwKICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7CgogICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIHJlc3VsdFtpbmRleF0gPSBzdGFydDsKICAgICAgICBzdGFydCArPSBzdGVwOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IHRoYXQgdGhlIGNhbGxiYWNrIHJldHVybnMgdHJ1ZXkgZm9yCiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgCiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQKICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZAogICAgICogIHRvIGNyZWF0ZSBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0LCA1LCA2XTsKICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAlIDIgPT0gMDsgfSk7CiAgICAgKgogICAgICogY29uc29sZS5sb2coYXJyYXkpOwogICAgICogLy8gPT4gWzEsIDMsIDVdCiAgICAgKgogICAgICogY29uc29sZS5sb2coZXZlbnMpOwogICAgICogLy8gPT4gWzIsIDQsIDZdCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsCiAgICAgICAgICByZXN1bHQgPSBbXTsKCiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTsKICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07CiAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7CiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7CiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgtLSwgMSk7CiAgICAgICAgICBsZW5ndGgtLTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5pbml0aWFsYCB0aGlzIG1ldGhvZCBnZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb3IKICAgICAqIGZpcnN0IGBuYCBlbGVtZW50cyBvZiBhbiBhcnJheS4gSWYgYSBjYWxsYmFjayBmdW5jdGlvbiBpcyBwcm92aWRlZCBlbGVtZW50cwogICAgICogYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkgYXJlIGV4Y2x1ZGVkIGZyb20gdGhlIHJlc3VsdCBhcyBsb25nIGFzIHRoZQogICAgICogY2FsbGJhY2sgcmV0dXJucyB0cnVleS4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZAogICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS4KICAgICAqCiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ucGx1Y2siIHN0eWxlCiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuCiAgICAgKgogICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIGRyb3AsIHRhaWwKICAgICAqIEBjYXRlZ29yeSBBcnJheXMKICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fG51bWJlcnxzdHJpbmd9IFtjYWxsYmFjaz0xXSBUaGUgZnVuY3Rpb24gY2FsbGVkCiAgICAgKiAgcGVyIGVsZW1lbnQgb3IgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBleGNsdWRlLiBJZiBhIHByb3BlcnR5IG5hbWUgb3IKICAgICAqICBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIKICAgICAqICBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBzbGljZSBvZiBgYXJyYXlgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnJlc3QoWzEsIDIsIDNdKTsKICAgICAqIC8vID0+IFsyLCAzXQogICAgICoKICAgICAqIF8ucmVzdChbMSwgMiwgM10sIDIpOwogICAgICogLy8gPT4gWzNdCiAgICAgKgogICAgICogXy5yZXN0KFsxLCAyLCAzXSwgZnVuY3Rpb24obnVtKSB7CiAgICAgKiAgIHJldHVybiBudW0gPCAzOwogICAgICogfSk7CiAgICAgKiAvLyA9PiBbM10KICAgICAqCiAgICAgKiB2YXIgZm9vZCA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdiYW5hbmEnLCAnb3JnYW5pYyc6IHRydWUgfSwKICAgICAqICAgeyAnbmFtZSc6ICdiZWV0JywgICAnb3JnYW5pYyc6IGZhbHNlIH0sCiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8ucmVzdChmb29kLCAnb3JnYW5pYycpOwogICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmVldCcsICdvcmdhbmljJzogZmFsc2UgfV0KICAgICAqCiAgICAgKiB2YXIgZm9vZCA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdhcHBsZScsICAndHlwZSc6ICdmcnVpdCcgfSwKICAgICAqICAgeyAnbmFtZSc6ICdiYW5hbmEnLCAndHlwZSc6ICdmcnVpdCcgfSwKICAgICAqICAgeyAnbmFtZSc6ICdiZWV0JywgICAndHlwZSc6ICd2ZWdldGFibGUnIH0KICAgICAqIF07CiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ud2hlcmUiIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5yZXN0KGZvb2QsIHsgJ3R5cGUnOiAnZnJ1aXQnIH0pOwogICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmVldCcsICd0eXBlJzogJ3ZlZ2V0YWJsZScgfV0KICAgICAqLwogICAgZnVuY3Rpb24gcmVzdChhcnJheSwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7CiAgICAgICAgdmFyIG4gPSAwLAogICAgICAgICAgICBpbmRleCA9IC0xLAogICAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7CgogICAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTsKICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBjYWxsYmFjayhhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHsKICAgICAgICAgIG4rKzsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbiA9IChjYWxsYmFjayA9PSBudWxsIHx8IHRoaXNBcmcpID8gMSA6IG5hdGl2ZU1heCgwLCBjYWxsYmFjayk7CiAgICAgIH0KICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCBuKTsKICAgIH0KCiAgICAvKioKICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2ggYSB2YWx1ZQogICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYSBnaXZlbiBzb3J0ZWQgYXJyYXkgaW4gb3JkZXIgdG8gbWFpbnRhaW4gdGhlIHNvcnQKICAgICAqIG9yZGVyIG9mIHRoZSBhcnJheS4gSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIGV4ZWN1dGVkIGZvcgogICAgICogYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZQogICAgICogY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC4KICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQKICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZAogICAgICogIHRvIGNyZWF0ZSBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQKICAgICAqICBpbnRvIGBhcnJheWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uc29ydGVkSW5kZXgoWzIwLCAzMCwgNTBdLCA0MCk7CiAgICAgKiAvLyA9PiAyCiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5zb3J0ZWRJbmRleChbeyAneCc6IDIwIH0sIHsgJ3gnOiAzMCB9LCB7ICd4JzogNTAgfV0sIHsgJ3gnOiA0MCB9LCAneCcpOwogICAgICogLy8gPT4gMgogICAgICoKICAgICAqIHZhciBkaWN0ID0gewogICAgICogICAnd29yZFRvTnVtYmVyJzogeyAndHdlbnR5JzogMjAsICd0aGlydHknOiAzMCwgJ2ZvdXJ0eSc6IDQwLCAnZmlmdHknOiA1MCB9CiAgICAgKiB9OwogICAgICoKICAgICAqIF8uc29ydGVkSW5kZXgoWyd0d2VudHknLCAndGhpcnR5JywgJ2ZpZnR5J10sICdmb3VydHknLCBmdW5jdGlvbih3b3JkKSB7CiAgICAgKiAgIHJldHVybiBkaWN0LndvcmRUb051bWJlclt3b3JkXTsKICAgICAqIH0pOwogICAgICogLy8gPT4gMgogICAgICoKICAgICAqIF8uc29ydGVkSW5kZXgoWyd0d2VudHknLCAndGhpcnR5JywgJ2ZpZnR5J10sICdmb3VydHknLCBmdW5jdGlvbih3b3JkKSB7CiAgICAgKiAgIHJldHVybiB0aGlzLndvcmRUb051bWJlclt3b3JkXTsKICAgICAqIH0sIGRpY3QpOwogICAgICogLy8gPT4gMgogICAgICovCiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciBsb3cgPSAwLAogICAgICAgICAgaGlnaCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogbG93OwoKICAgICAgLy8gZXhwbGljaXRseSByZWZlcmVuY2UgYGlkZW50aXR5YCBmb3IgYmV0dGVyIGlubGluaW5nIGluIEZpcmVmb3gKICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayA/IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMSkgOiBpZGVudGl0eTsKICAgICAgdmFsdWUgPSBjYWxsYmFjayh2YWx1ZSk7CgogICAgICB3aGlsZSAobG93IDwgaGlnaCkgewogICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDE7CiAgICAgICAgKGNhbGxiYWNrKGFycmF5W21pZF0pIDwgdmFsdWUpCiAgICAgICAgICA/IGxvdyA9IG1pZCArIDEKICAgICAgICAgIDogaGlnaCA9IG1pZDsKICAgICAgfQogICAgICByZXR1cm4gbG93OwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgb2YgdGhlIHByb3ZpZGVkIGFycmF5cyB1c2luZwogICAgICogc3RyaWN0IGVxdWFsaXR5IGZvciBjb21wYXJpc29ucywgaS5lLiBgPT09YC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5XSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgY29tcG9zaXRlIHZhbHVlcy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy51bmlvbihbMSwgMiwgM10sIFsxMDEsIDIsIDEsIDEwXSwgWzIsIDFdKTsKICAgICAqIC8vID0+IFsxLCAyLCAzLCAxMDEsIDEwXQogICAgICovCiAgICBmdW5jdGlvbiB1bmlvbihhcnJheSkgewogICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLXZhbHVlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSB1c2luZyBzdHJpY3QgZXF1YWxpdHkKICAgICAqIGZvciBjb21wYXJpc29ucywgaS5lLiBgPT09YC4gSWYgdGhlIGFycmF5IGlzIHNvcnRlZCwgcHJvdmlkaW5nCiAgICAgKiBgdHJ1ZWAgZm9yIGBpc1NvcnRlZGAgd2lsbCB1c2UgYSBmYXN0ZXIgYWxnb3JpdGhtLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkCiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBpcyBwYXNzZWQgdGhyb3VnaCB0aGUgY2FsbGJhY2sgYmVmb3JlIHVuaXF1ZW5lc3MKICAgICAqIGlzIGNvbXB1dGVkLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUKICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAYWxpYXMgdW5pcXVlCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU29ydGVkPWZhbHNlXSBBIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCBgYXJyYXlgIGlzIHNvcnRlZC4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkCiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQKICAgICAqICB0byBjcmVhdGUgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIGR1cGxpY2F0ZS12YWx1ZS1mcmVlIGFycmF5LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnVuaXEoWzEsIDIsIDEsIDMsIDFdKTsKICAgICAqIC8vID0+IFsxLCAyLCAzXQogICAgICoKICAgICAqIF8udW5pcShbMSwgMSwgMiwgMiwgM10sIHRydWUpOwogICAgICogLy8gPT4gWzEsIDIsIDNdCiAgICAgKgogICAgICogXy51bmlxKFsnQScsICdiJywgJ0MnLCAnYScsICdCJywgJ2MnXSwgZnVuY3Rpb24obGV0dGVyKSB7IHJldHVybiBsZXR0ZXIudG9Mb3dlckNhc2UoKTsgfSk7CiAgICAgKiAvLyA9PiBbJ0EnLCAnYicsICdDJ10KICAgICAqCiAgICAgKiBfLnVuaXEoWzEsIDIuNSwgMywgMS41LCAyLCAzLjVdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIHRoaXMuZmxvb3IobnVtKTsgfSwgTWF0aCk7CiAgICAgKiAvLyA9PiBbMSwgMi41LCAzXQogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8udW5pcShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7CiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV0KICAgICAqLwogICAgZnVuY3Rpb24gdW5pcShhcnJheSwgaXNTb3J0ZWQsIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIC8vIGp1Z2dsZSBhcmd1bWVudHMKICAgICAgaWYgKHR5cGVvZiBpc1NvcnRlZCAhPSAnYm9vbGVhbicgJiYgaXNTb3J0ZWQgIT0gbnVsbCkgewogICAgICAgIHRoaXNBcmcgPSBjYWxsYmFjazsKICAgICAgICBjYWxsYmFjayA9ICEodGhpc0FyZyAmJiB0aGlzQXJnW2lzU29ydGVkXSA9PT0gYXJyYXkpID8gaXNTb3J0ZWQgOiBudWxsOwogICAgICAgIGlzU29ydGVkID0gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHsKICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7CiAgICAgIH0KICAgICAgcmV0dXJuIGJhc2VVbmlxKGFycmF5LCBpc1NvcnRlZCwgY2FsbGJhY2spOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIHByb3ZpZGVkIHZhbHVlcyB1c2luZyBzdHJpY3QgZXF1YWxpdHkgZm9yCiAgICAgKiBjb21wYXJpc29ucywgaS5lLiBgPT09YC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbHRlci4KICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLndpdGhvdXQoWzEsIDIsIDEsIDAsIDMsIDEsIDRdLCAwLCAxKTsKICAgICAqIC8vID0+IFsyLCAzLCA0XQogICAgICovCiAgICBmdW5jdGlvbiB3aXRob3V0KGFycmF5KSB7CiAgICAgIHJldHVybiBkaWZmZXJlbmNlKGFycmF5LCBuYXRpdmVTbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlIGZpcnN0CiAgICAgKiBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZSBzZWNvbmQKICAgICAqIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIHVuemlwCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXldIEFycmF5cyB0byBwcm9jZXNzLgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uemlwKFsnbW9lJywgJ2xhcnJ5J10sIFszMCwgNDBdLCBbdHJ1ZSwgZmFsc2VdKTsKICAgICAqIC8vID0+IFtbJ21vZScsIDMwLCB0cnVlXSwgWydsYXJyeScsIDQwLCBmYWxzZV1dCiAgICAgKi8KICAgIGZ1bmN0aW9uIHppcCgpIHsKICAgICAgdmFyIGFycmF5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHMgOiBhcmd1bWVudHNbMF0sCiAgICAgICAgICBpbmRleCA9IC0xLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBtYXgocGx1Y2soYXJyYXksICdsZW5ndGgnKSkgOiAwLAogICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoIDwgMCA/IDAgOiBsZW5ndGgpOwoKICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICByZXN1bHRbaW5kZXhdID0gcGx1Y2soYXJyYXksIGluZGV4KTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgZnJvbSBhcnJheXMgb2YgYGtleXNgIGFuZCBgdmFsdWVzYC4gUHJvdmlkZQogICAgICogZWl0aGVyIGEgc2luZ2xlIHR3byBkaW1lbnNpb25hbCBhcnJheSwgaS5lLiBgW1trZXkxLCB2YWx1ZTFdLCBba2V5MiwgdmFsdWUyXV1gCiAgICAgKiBvciB0d28gYXJyYXlzLCBvbmUgb2YgYGtleXNgIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyBgdmFsdWVzYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIG9iamVjdAogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0ga2V5cyBUaGUgYXJyYXkgb2Yga2V5cy4KICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBhcnJheSBvZiB2YWx1ZXMuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgZ2l2ZW4ga2V5cyBhbmQKICAgICAqICBjb3JyZXNwb25kaW5nIHZhbHVlcy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy56aXBPYmplY3QoWydtb2UnLCAnbGFycnknXSwgWzMwLCA0MF0pOwogICAgICogLy8gPT4geyAnbW9lJzogMzAsICdsYXJyeSc6IDQwIH0KICAgICAqLwogICAgZnVuY3Rpb24gemlwT2JqZWN0KGtleXMsIHZhbHVlcykgewogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIGxlbmd0aCA9IGtleXMgPyBrZXlzLmxlbmd0aCA6IDAsCiAgICAgICAgICByZXN1bHQgPSB7fTsKCiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdOwogICAgICAgIGlmICh2YWx1ZXMpIHsKICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWVzW2luZGV4XTsKICAgICAgICB9IGVsc2UgaWYgKGtleSkgewogICAgICAgICAgcmVzdWx0W2tleVswXV0gPSBrZXlbMV07CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBleGVjdXRlcyBgZnVuY2AsIHdpdGggIHRoZSBgdGhpc2AgYmluZGluZyBhbmQKICAgICAqIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgb25seSBhZnRlciBiZWluZyBjYWxsZWQgYG5gIHRpbWVzLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCBiZWZvcmUKICAgICAqICBgZnVuY2AgaXMgZXhlY3V0ZWQuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddOwogICAgICoKICAgICAqIHZhciBkb25lID0gXy5hZnRlcihzYXZlcy5sZW5ndGgsIGZ1bmN0aW9uKCkgewogICAgICogICBjb25zb2xlLmxvZygnRG9uZSBzYXZpbmchJyk7CiAgICAgKiB9KTsKICAgICAqCiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHsKICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pOwogICAgICogfSk7CiAgICAgKiAvLyA9PiBsb2dzICdEb25lIHNhdmluZyEnLCBhZnRlciBhbGwgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQKICAgICAqLwogICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykgewogICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yOwogICAgICB9CiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoLS1uIDwgMSkgewogICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYAogICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHByZXBlbmRzIGFueSBhZGRpdGlvbmFsIGBiaW5kYCBhcmd1bWVudHMgdG8gdGhvc2UKICAgICAqIHByb3ZpZGVkIHRvIHRoZSBib3VuZCBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEZ1bmN0aW9ucwogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYmluZC4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuCiAgICAgKiBAcGFyYW0gey4uLip9IFthcmddIEFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgZnVuYyA9IGZ1bmN0aW9uKGdyZWV0aW5nKSB7CiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMubmFtZTsKICAgICAqIH07CiAgICAgKgogICAgICogZnVuYyA9IF8uYmluZChmdW5jLCB7ICduYW1lJzogJ21vZScgfSwgJ2hpJyk7CiAgICAgKiBmdW5jKCk7CiAgICAgKiAvLyA9PiAnaGkgbW9lJwogICAgICovCiAgICBmdW5jdGlvbiBiaW5kKGZ1bmMsIHRoaXNBcmcpIHsKICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAyCiAgICAgICAgPyBjcmVhdGVCb3VuZChmdW5jLCAxNywgbmF0aXZlU2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLCBudWxsLCB0aGlzQXJnKQogICAgICAgIDogY3JlYXRlQm91bmQoZnVuYywgMSwgbnVsbCwgbnVsbCwgdGhpc0FyZyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nCiAgICAgKiBtZXRob2QuIE1ldGhvZCBuYW1lcyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5cwogICAgICogb2YgbWV0aG9kIG5hbWVzLiBJZiBubyBtZXRob2QgbmFtZXMgYXJlIHByb3ZpZGVkIGFsbCB0aGUgZnVuY3Rpb24gcHJvcGVydGllcwogICAgICogb2YgYG9iamVjdGAgd2lsbCBiZSBib3VuZC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEZ1bmN0aW9ucwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by4KICAgICAqIEBwYXJhbSB7Li4uc3RyaW5nfSBbbWV0aG9kTmFtZV0gVGhlIG9iamVjdCBtZXRob2QgbmFtZXMgdG8KICAgICAqICBiaW5kLCBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBtZXRob2QgbmFtZXMgb3IgYXJyYXlzIG9mIG1ldGhvZCBuYW1lcy4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciB2aWV3ID0gewogICAgICogICdsYWJlbCc6ICdkb2NzJywKICAgICAqICAnb25DbGljayc6IGZ1bmN0aW9uKCkgeyBjb25zb2xlLmxvZygnY2xpY2tlZCAnICsgdGhpcy5sYWJlbCk7IH0KICAgICAqIH07CiAgICAgKgogICAgICogXy5iaW5kQWxsKHZpZXcpOwogICAgICogalF1ZXJ5KCcjZG9jcycpLm9uKCdjbGljaycsIHZpZXcub25DbGljayk7CiAgICAgKiAvLyA9PiBsb2dzICdjbGlja2VkIGRvY3MnLCB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZAogICAgICovCiAgICBmdW5jdGlvbiBiaW5kQWxsKG9iamVjdCkgewogICAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGJhc2VGbGF0dGVuKGFyZ3VtZW50cywgdHJ1ZSwgZmFsc2UsIDEpIDogZnVuY3Rpb25zKG9iamVjdCksCiAgICAgICAgICBpbmRleCA9IC0xLAogICAgICAgICAgbGVuZ3RoID0gZnVuY3MubGVuZ3RoOwoKICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICB2YXIga2V5ID0gZnVuY3NbaW5kZXhdOwogICAgICAgIG9iamVjdFtrZXldID0gY3JlYXRlQm91bmQob2JqZWN0W2tleV0sIDEsIG51bGwsIG51bGwsIG9iamVjdCk7CiAgICAgIH0KICAgICAgcmV0dXJuIG9iamVjdDsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAKICAgICAqIGFuZCBwcmVwZW5kcyBhbnkgYWRkaXRpb25hbCBgYmluZEtleWAgYXJndW1lbnRzIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBib3VuZAogICAgICogZnVuY3Rpb24uIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG8KICAgICAqIHJlZmVyZW5jZSBtZXRob2RzIHRoYXQgd2lsbCBiZSByZWRlZmluZWQgb3IgZG9uJ3QgeWV0IGV4aXN0LgogICAgICogU2VlIGh0dHA6Ly9taWNoYXV4LmNhL2FydGljbGVzL2xhenktZnVuY3Rpb24tZGVmaW5pdGlvbi1wYXR0ZXJuLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdGhlIG1ldGhvZCBiZWxvbmdzIHRvLgogICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuCiAgICAgKiBAcGFyYW0gey4uLip9IFthcmddIEFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgb2JqZWN0ID0gewogICAgICogICAnbmFtZSc6ICdtb2UnLAogICAgICogICAnZ3JlZXQnOiBmdW5jdGlvbihncmVldGluZykgewogICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMubmFtZTsKICAgICAqICAgfQogICAgICogfTsKICAgICAqCiAgICAgKiB2YXIgZnVuYyA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpOwogICAgICogZnVuYygpOwogICAgICogLy8gPT4gJ2hpIG1vZScKICAgICAqCiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZykgewogICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnLCAnICsgdGhpcy5uYW1lICsgJyEnOwogICAgICogfTsKICAgICAqCiAgICAgKiBmdW5jKCk7CiAgICAgKiAvLyA9PiAnaGksIG1vZSEnCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJpbmRLZXkob2JqZWN0LCBrZXkpIHsKICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAyCiAgICAgICAgPyBjcmVhdGVCb3VuZChrZXksIDE5LCBuYXRpdmVTbGljZS5jYWxsKGFyZ3VtZW50cywgMiksIG51bGwsIG9iamVjdCkKICAgICAgICA6IGNyZWF0ZUJvdW5kKGtleSwgMywgbnVsbCwgbnVsbCwgb2JqZWN0KTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiB0aGUgcHJvdmlkZWQgZnVuY3Rpb25zLAogICAgICogd2hlcmUgZWFjaCBmdW5jdGlvbiBjb25zdW1lcyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuCiAgICAgKiBGb3IgZXhhbXBsZSwgY29tcG9zaW5nIHRoZSBmdW5jdGlvbnMgYGYoKWAsIGBnKClgLCBhbmQgYGgoKWAgcHJvZHVjZXMgYGYoZyhoKCkpKWAuCiAgICAgKiBFYWNoIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjb21wb3NlZCBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEZ1bmN0aW9ucwogICAgICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gW2Z1bmNdIEZ1bmN0aW9ucyB0byBjb21wb3NlLgogICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zZWQgZnVuY3Rpb24uCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciByZWFsTmFtZU1hcCA9IHsKICAgICAqICAgJ2N1cmx5JzogJ2plcm9tZScKICAgICAqIH07CiAgICAgKgogICAgICogdmFyIGZvcm1hdCA9IGZ1bmN0aW9uKG5hbWUpIHsKICAgICAqICAgbmFtZSA9IHJlYWxOYW1lTWFwW25hbWUudG9Mb3dlckNhc2UoKV0gfHwgbmFtZTsKICAgICAqICAgcmV0dXJuIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7CiAgICAgKiB9OwogICAgICoKICAgICAqIHZhciBncmVldCA9IGZ1bmN0aW9uKGZvcm1hdHRlZCkgewogICAgICogICByZXR1cm4gJ0hpeWEgJyArIGZvcm1hdHRlZCArICchJzsKICAgICAqIH07CiAgICAgKgogICAgICogdmFyIHdlbGNvbWUgPSBfLmNvbXBvc2UoZ3JlZXQsIGZvcm1hdCk7CiAgICAgKiB3ZWxjb21lKCdjdXJseScpOwogICAgICogLy8gPT4gJ0hpeWEgSmVyb21lIScKICAgICAqLwogICAgZnVuY3Rpb24gY29tcG9zZSgpIHsKICAgICAgdmFyIGZ1bmNzID0gYXJndW1lbnRzLAogICAgICAgICAgbGVuZ3RoID0gZnVuY3MubGVuZ3RoOwoKICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmNzW2xlbmd0aF0pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsCiAgICAgICAgICAgIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aDsKCiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICAgICAgICBhcmdzID0gW2Z1bmNzW2xlbmd0aF0uYXBwbHkodGhpcywgYXJncyldOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYXJnc1swXTsKICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIFByb2R1Y2VzIGEgY2FsbGJhY2sgYm91bmQgdG8gYW4gb3B0aW9uYWwgYHRoaXNBcmdgLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eQogICAgICogbmFtZSB0aGUgY3JlYXRlZCBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4KICAgICAqIElmIGBmdW5jYCBpcyBhbiBvYmplY3QgdGhlIGNyZWF0ZWQgY2FsbGJhY2sgd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cwogICAgICogdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50IG9iamVjdCBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgd2lsbCByZXR1cm4gYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEZ1bmN0aW9ucwogICAgICogQHBhcmFtIHsqfSBbZnVuYz1pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay4KICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBjYWxsYmFjay4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJnQ291bnRdIFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRoZSBjYWxsYmFjayBhY2NlcHRzLgogICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgY2FsbGJhY2sgZnVuY3Rpb24uCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBzdG9vZ2VzID0gWwogICAgICogICB7ICduYW1lJzogJ21vZScsICdhZ2UnOiA0MCB9LAogICAgICogICB7ICduYW1lJzogJ2xhcnJ5JywgJ2FnZSc6IDUwIH0KICAgICAqIF07CiAgICAgKgogICAgICogLy8gd3JhcCB0byBjcmVhdGUgY3VzdG9tIGNhbGxiYWNrIHNob3J0aGFuZHMKICAgICAqIF8uY3JlYXRlQ2FsbGJhY2sgPSBfLndyYXAoXy5jcmVhdGVDYWxsYmFjaywgZnVuY3Rpb24oZnVuYywgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAqICAgdmFyIG1hdGNoID0gL14oLis/KV9fKFtnbF10KSguKykkLy5leGVjKGNhbGxiYWNrKTsKICAgICAqICAgcmV0dXJuICFtYXRjaCA/IGZ1bmMoY2FsbGJhY2ssIHRoaXNBcmcpIDogZnVuY3Rpb24ob2JqZWN0KSB7CiAgICAgKiAgICAgcmV0dXJuIG1hdGNoWzJdID09ICdndCcgPyBvYmplY3RbbWF0Y2hbMV1dID4gbWF0Y2hbM10gOiBvYmplY3RbbWF0Y2hbMV1dIDwgbWF0Y2hbM107CiAgICAgKiAgIH07CiAgICAgKiB9KTsKICAgICAqCiAgICAgKiBfLmZpbHRlcihzdG9vZ2VzLCAnYWdlX19ndDQ1Jyk7CiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9XQogICAgICovCiAgICBmdW5jdGlvbiBjcmVhdGVDYWxsYmFjayhmdW5jLCB0aGlzQXJnLCBhcmdDb3VudCkgewogICAgICB2YXIgdHlwZSA9IHR5cGVvZiBmdW5jOwogICAgICBpZiAoZnVuYyA9PSBudWxsIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHJldHVybiBiYXNlQ3JlYXRlQ2FsbGJhY2soZnVuYywgdGhpc0FyZywgYXJnQ291bnQpOwogICAgICB9CiAgICAgIC8vIGhhbmRsZSAiXy5wbHVjayIgc3R5bGUgY2FsbGJhY2sgc2hvcnRoYW5kcwogICAgICBpZiAodHlwZSAhPSAnb2JqZWN0JykgewogICAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHsKICAgICAgICAgIHJldHVybiBvYmplY3RbZnVuY107CiAgICAgICAgfTsKICAgICAgfQogICAgICB2YXIgcHJvcHMgPSBrZXlzKGZ1bmMpLAogICAgICAgICAga2V5ID0gcHJvcHNbMF0sCiAgICAgICAgICBhID0gZnVuY1trZXldOwoKICAgICAgLy8gaGFuZGxlICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjayBzaG9ydGhhbmRzCiAgICAgIGlmIChwcm9wcy5sZW5ndGggPT0gMSAmJiBhID09PSBhICYmICFpc09iamVjdChhKSkgewogICAgICAgIC8vIGZhc3QgcGF0aCB0aGUgY29tbW9uIGNhc2Ugb2YgcHJvdmlkaW5nIGFuIG9iamVjdCB3aXRoIGEgc2luZ2xlCiAgICAgICAgLy8gcHJvcGVydHkgY29udGFpbmluZyBhIHByaW1pdGl2ZSB2YWx1ZQogICAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHsKICAgICAgICAgIHZhciBiID0gb2JqZWN0W2tleV07CiAgICAgICAgICByZXR1cm4gYSA9PT0gYiAmJiAoYSAhPT0gMCB8fCAoMSAvIGEgPT0gMSAvIGIpKTsKICAgICAgICB9OwogICAgICB9CiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHsKICAgICAgICB2YXIgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLAogICAgICAgICAgICByZXN1bHQgPSBmYWxzZTsKCiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBiYXNlSXNFcXVhbChvYmplY3RbcHJvcHNbbGVuZ3RoXV0sIGZ1bmNbcHJvcHNbbGVuZ3RoXV0sIG51bGwsIHRydWUpKSkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHRzIG9uZSBvciBtb3JlIGFyZ3VtZW50cyBvZiBgZnVuY2AgdGhhdCB3aGVuCiAgICAgKiBpbnZva2VkIGVpdGhlciBleGVjdXRlcyBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGFsbCBgZnVuY2AgYXJndW1lbnRzCiAgICAgKiBoYXZlIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIG9yIG1vcmUgb2YgdGhlCiAgICAgKiByZW1haW5pbmcgYGZ1bmNgIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIGNhbiBiZSBzcGVjaWZpZWQKICAgICAqIGlmIGBmdW5jLmxlbmd0aGAgaXMgbm90IHN1ZmZpY2llbnQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LgogICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShmdW5jdGlvbihhLCBiLCBjKSB7CiAgICAgKiAgIGNvbnNvbGUubG9nKGEgKyBiICsgYyk7CiAgICAgKiB9KTsKICAgICAqCiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpOwogICAgICogLy8gPT4gNgogICAgICoKICAgICAqIGN1cnJpZWQoMSwgMikoMyk7CiAgICAgKiAvLyA9PiA2CiAgICAgKgogICAgICogY3VycmllZCgxLCAyLCAzKTsKICAgICAqIC8vID0+IDYKICAgICAqLwogICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHkpIHsKICAgICAgYXJpdHkgPSB0eXBlb2YgYXJpdHkgPT0gJ251bWJlcicgPyBhcml0eSA6ICgrYXJpdHkgfHwgZnVuYy5sZW5ndGgpOwogICAgICByZXR1cm4gY3JlYXRlQm91bmQoZnVuYywgNCwgbnVsbCwgbnVsbCwgbnVsbCwgYXJpdHkpOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBkZWxheSB0aGUgZXhlY3V0aW9uIG9mIGBmdW5jYCB1bnRpbCBhZnRlcgogICAgICogYHdhaXRgIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSBpdCB3YXMgaW52b2tlZC4KICAgICAqIFByb3ZpZGUgYW4gb3B0aW9ucyBvYmplY3QgdG8gaW5kaWNhdGUgdGhhdCBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24KICAgICAqIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gU3Vic2VxdWVudCBjYWxscwogICAgICogdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBjYWxsLgogICAgICoKICAgICAqIE5vdGU6IElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAgYGZ1bmNgIHdpbGwgYmUgY2FsbGVkCiAgICAgKiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIGlzCiAgICAgKiBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLgogICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV0gU3BlY2lmeSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XSBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgY2FsbGVkLgogICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXSBTcGVjaWZ5IGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogLy8gYXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eAogICAgICogdmFyIGxhenlMYXlvdXQgPSBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKTsKICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBsYXp5TGF5b3V0KTsKICAgICAqCiAgICAgKiAvLyBleGVjdXRlIGBzZW5kTWFpbGAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscwogICAgICogalF1ZXJ5KCcjcG9zdGJveCcpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwgewogICAgICogICAnbGVhZGluZyc6IHRydWUsCiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlCiAgICAgKiB9KTsKICAgICAqCiAgICAgKiAvLyBlbnN1cmUgYGJhdGNoTG9nYCBpcyBleGVjdXRlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscwogICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpOwogICAgICogc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsKICAgICAqICAgJ21heFdhaXQnOiAxMDAwCiAgICAgKiB9LCBmYWxzZSk7CiAgICAgKi8KICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHsKICAgICAgdmFyIGFyZ3MsCiAgICAgICAgICBtYXhUaW1lb3V0SWQsCiAgICAgICAgICByZXN1bHQsCiAgICAgICAgICBzdGFtcCwKICAgICAgICAgIHRoaXNBcmcsCiAgICAgICAgICB0aW1lb3V0SWQsCiAgICAgICAgICB0cmFpbGluZ0NhbGwsCiAgICAgICAgICBsYXN0Q2FsbGVkID0gMCwKICAgICAgICAgIG1heFdhaXQgPSBmYWxzZSwKICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTsKCiAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3I7CiAgICAgIH0KICAgICAgd2FpdCA9IG5hdGl2ZU1heCgwLCB3YWl0KSB8fCAwOwogICAgICBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkgewogICAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZTsKICAgICAgICB0cmFpbGluZyA9IGZhbHNlOwogICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7CiAgICAgICAgbGVhZGluZyA9IG9wdGlvbnMubGVhZGluZzsKICAgICAgICBtYXhXYWl0ID0gJ21heFdhaXQnIGluIG9wdGlvbnMgJiYgKG5hdGl2ZU1heCh3YWl0LCBvcHRpb25zLm1heFdhaXQpIHx8IDApOwogICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nOwogICAgICB9CiAgICAgIHZhciBkZWxheWVkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93KCkgLSBzdGFtcCk7CiAgICAgICAgaWYgKHJlbWFpbmluZyA8PSAwKSB7CiAgICAgICAgICBpZiAobWF4VGltZW91dElkKSB7CiAgICAgICAgICAgIGNsZWFyVGltZW91dChtYXhUaW1lb3V0SWQpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGlzQ2FsbGVkID0gdHJhaWxpbmdDYWxsOwogICAgICAgICAgbWF4VGltZW91dElkID0gdGltZW91dElkID0gdHJhaWxpbmdDYWxsID0gdW5kZWZpbmVkOwogICAgICAgICAgaWYgKGlzQ2FsbGVkKSB7CiAgICAgICAgICAgIGxhc3RDYWxsZWQgPSBub3coKTsKICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChkZWxheWVkLCByZW1haW5pbmcpOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIHZhciBtYXhEZWxheWVkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKHRpbWVvdXRJZCkgewogICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7CiAgICAgICAgfQogICAgICAgIG1heFRpbWVvdXRJZCA9IHRpbWVvdXRJZCA9IHRyYWlsaW5nQ2FsbCA9IHVuZGVmaW5lZDsKICAgICAgICBpZiAodHJhaWxpbmcgfHwgKG1heFdhaXQgIT09IHdhaXQpKSB7CiAgICAgICAgICBsYXN0Q2FsbGVkID0gbm93KCk7CiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgICAgIHN0YW1wID0gbm93KCk7CiAgICAgICAgdGhpc0FyZyA9IHRoaXM7CiAgICAgICAgdHJhaWxpbmdDYWxsID0gdHJhaWxpbmcgJiYgKHRpbWVvdXRJZCB8fCAhbGVhZGluZyk7CgogICAgICAgIGlmIChtYXhXYWl0ID09PSBmYWxzZSkgewogICAgICAgICAgdmFyIGxlYWRpbmdDYWxsID0gbGVhZGluZyAmJiAhdGltZW91dElkOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoIW1heFRpbWVvdXRJZCAmJiAhbGVhZGluZykgewogICAgICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcmVtYWluaW5nID0gbWF4V2FpdCAtIChzdGFtcCAtIGxhc3RDYWxsZWQpOwogICAgICAgICAgaWYgKHJlbWFpbmluZyA8PSAwKSB7CiAgICAgICAgICAgIGlmIChtYXhUaW1lb3V0SWQpIHsKICAgICAgICAgICAgICBtYXhUaW1lb3V0SWQgPSBjbGVhclRpbWVvdXQobWF4VGltZW91dElkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7CiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmICghbWF4VGltZW91dElkKSB7CiAgICAgICAgICAgIG1heFRpbWVvdXRJZCA9IHNldFRpbWVvdXQobWF4RGVsYXllZCwgcmVtYWluaW5nKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCF0aW1lb3V0SWQgJiYgd2FpdCAhPT0gbWF4V2FpdCkgewogICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChkZWxheWVkLCB3YWl0KTsKICAgICAgICB9CiAgICAgICAgaWYgKGxlYWRpbmdDYWxsKSB7CiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgfQoKICAgIC8qKgogICAgICogRGVmZXJzIGV4ZWN1dGluZyB0aGUgYGZ1bmNgIGZ1bmN0aW9uIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuCiAgICAgKiBBZGRpdGlvbmFsIGFyZ3VtZW50cyB3aWxsIGJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0IGlzIGludm9rZWQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLgogICAgICogQHBhcmFtIHsuLi4qfSBbYXJnXSBBcmd1bWVudHMgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoLgogICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oKSB7IGNvbnNvbGUubG9nKCdkZWZlcnJlZCcpOyB9KTsKICAgICAqIC8vIHJldHVybnMgZnJvbSB0aGUgZnVuY3Rpb24gYmVmb3JlICdkZWZlcnJlZCcgaXMgbG9nZ2VkCiAgICAgKi8KICAgIGZ1bmN0aW9uIGRlZmVyKGZ1bmMpIHsKICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjsKICAgICAgfQogICAgICB2YXIgYXJncyA9IG5hdGl2ZVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgMSk7CiAgICB9CiAgICAvLyB1c2UgYHNldEltbWVkaWF0ZWAgaWYgYXZhaWxhYmxlIGluIE5vZGUuanMKICAgIGlmIChpc1Y4ICYmIG1vZHVsZUV4cG9ydHMgJiYgdHlwZW9mIHNldEltbWVkaWF0ZSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgIGRlZmVyID0gZnVuY3Rpb24oZnVuYykgewogICAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkgewogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNldEltbWVkaWF0ZS5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfQoKICAgIC8qKgogICAgICogRXhlY3V0ZXMgdGhlIGBmdW5jYCBmdW5jdGlvbiBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBZGRpdGlvbmFsIGFyZ3VtZW50cwogICAgICogd2lsbCBiZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCBpcyBpbnZva2VkLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGV4ZWN1dGlvbi4KICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ10gQXJndW1lbnRzIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aC4KICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgbG9nID0gXy5iaW5kKGNvbnNvbGUubG9nLCBjb25zb2xlKTsKICAgICAqIF8uZGVsYXkobG9nLCAxMDAwLCAnbG9nZ2VkIGxhdGVyJyk7CiAgICAgKiAvLyA9PiAnbG9nZ2VkIGxhdGVyJyAoQXBwZWFycyBhZnRlciBvbmUgc2Vjb25kLikKICAgICAqLwogICAgZnVuY3Rpb24gZGVsYXkoZnVuYywgd2FpdCkgewogICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yOwogICAgICB9CiAgICAgIHZhciBhcmdzID0gbmF0aXZlU2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOwogICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzCiAgICAgKiBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdAogICAgICogYmFzZWQgb24gdGhlIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZQogICAgICogZmlyc3QgYXJndW1lbnQgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIGNhY2hlIGtleS4KICAgICAqIFRoZSBgZnVuY2AgaXMgZXhlY3V0ZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLgogICAgICogVGhlIHJlc3VsdCBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEZ1bmN0aW9ucwogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBBIGZ1bmN0aW9uIHVzZWQgdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LgogICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6aW5nIGZ1bmN0aW9uLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgZmlib25hY2NpID0gXy5tZW1vaXplKGZ1bmN0aW9uKG4pIHsKICAgICAqICAgcmV0dXJuIG4gPCAyID8gbiA6IGZpYm9uYWNjaShuIC0gMSkgKyBmaWJvbmFjY2kobiAtIDIpOwogICAgICogfSk7CiAgICAgKgogICAgICogdmFyIGRhdGEgPSB7CiAgICAgKiAgICdtb2UnOiB7ICduYW1lJzogJ21vZScsICdhZ2UnOiA0MCB9LAogICAgICogICAnY3VybHknOiB7ICduYW1lJzogJ2N1cmx5JywgJ2FnZSc6IDYwIH0KICAgICAqIH07CiAgICAgKgogICAgICogLy8gbW9kaWZ5aW5nIHRoZSByZXN1bHQgY2FjaGUKICAgICAqIHZhciBzdG9vZ2UgPSBfLm1lbW9pemUoZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gZGF0YVtuYW1lXTsgfSwgXy5pZGVudGl0eSk7CiAgICAgKiBzdG9vZ2UoJ2N1cmx5Jyk7CiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2N1cmx5JywgJ2FnZSc6IDYwIH0KICAgICAqCiAgICAgKiBzdG9vZ2UuY2FjaGUuY3VybHkubmFtZSA9ICdqZXJvbWUnOwogICAgICogc3Rvb2dlKCdjdXJseScpOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdqZXJvbWUnLCAnYWdlJzogNjAgfQogICAgICovCiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7CiAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3I7CiAgICAgIH0KICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGUsCiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGtleVByZWZpeCArIGFyZ3VtZW50c1swXTsKCiAgICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoY2FjaGUsIGtleSkKICAgICAgICAgID8gY2FjaGVba2V5XQogICAgICAgICAgOiAoY2FjaGVba2V5XSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7CiAgICAgIH0KICAgICAgbWVtb2l6ZWQuY2FjaGUgPSB7fTsKICAgICAgcmV0dXJuIG1lbW9pemVkOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBleGVjdXRlIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHMgdG8KICAgICAqIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGNhbGwuIFRoZSBgZnVuY2AgaXMgZXhlY3V0ZWQKICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTsKICAgICAqIGluaXRpYWxpemUoKTsKICAgICAqIGluaXRpYWxpemUoKTsKICAgICAqIC8vIGBpbml0aWFsaXplYCBleGVjdXRlcyBgY3JlYXRlQXBwbGljYXRpb25gIG9uY2UKICAgICAqLwogICAgZnVuY3Rpb24gb25jZShmdW5jKSB7CiAgICAgIHZhciByYW4sCiAgICAgICAgICByZXN1bHQ7CgogICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yOwogICAgICB9CiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICBpZiAocmFuKSB7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICByYW4gPSB0cnVlOwogICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCiAgICAgICAgLy8gY2xlYXIgdGhlIGBmdW5jYCB2YXJpYWJsZSBzbyB0aGUgZnVuY3Rpb24gbWF5IGJlIGdhcmJhZ2UgY29sbGVjdGVkCiAgICAgICAgZnVuYyA9IG51bGw7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgaW52b2tlcyBgZnVuY2Agd2l0aCBhbnkgYWRkaXRpb25hbAogICAgICogYHBhcnRpYWxgIGFyZ3VtZW50cyBwcmVwZW5kZWQgdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIG5ldyBmdW5jdGlvbi4gVGhpcwogICAgICogbWV0aG9kIGlzIHNpbWlsYXIgdG8gYF8uYmluZGAgZXhjZXB0IGl0IGRvZXMgKipub3QqKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uCiAgICAgKiBAcGFyYW0gey4uLip9IFthcmddIEFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgbmFtZSkgeyByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lOyB9OwogICAgICogdmFyIGhpID0gXy5wYXJ0aWFsKGdyZWV0LCAnaGknKTsKICAgICAqIGhpKCdtb2UnKTsKICAgICAqIC8vID0+ICdoaSBtb2UnCiAgICAgKi8KICAgIGZ1bmN0aW9uIHBhcnRpYWwoZnVuYykgewogICAgICByZXR1cm4gY3JlYXRlQm91bmQoZnVuYywgMTYsIG5hdGl2ZVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IGBwYXJ0aWFsYCBhcmd1bWVudHMgYXJlCiAgICAgKiBhcHBlbmRlZCB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgbmV3IGZ1bmN0aW9uLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLgogICAgICogQHBhcmFtIHsuLi4qfSBbYXJnXSBBcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuCiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIGRlZmF1bHRzRGVlcCA9IF8ucGFydGlhbFJpZ2h0KF8ubWVyZ2UsIF8uZGVmYXVsdHMpOwogICAgICoKICAgICAqIHZhciBvcHRpb25zID0gewogICAgICogICAndmFyaWFibGUnOiAnZGF0YScsCiAgICAgKiAgICdpbXBvcnRzJzogeyAnanEnOiAkIH0KICAgICAqIH07CiAgICAgKgogICAgICogZGVmYXVsdHNEZWVwKG9wdGlvbnMsIF8udGVtcGxhdGVTZXR0aW5ncyk7CiAgICAgKgogICAgICogb3B0aW9ucy52YXJpYWJsZQogICAgICogLy8gPT4gJ2RhdGEnCiAgICAgKgogICAgICogb3B0aW9ucy5pbXBvcnRzCiAgICAgKiAvLyA9PiB7ICdfJzogXywgJ2pxJzogJCB9CiAgICAgKi8KICAgIGZ1bmN0aW9uIHBhcnRpYWxSaWdodChmdW5jKSB7CiAgICAgIHJldHVybiBjcmVhdGVCb3VuZChmdW5jLCAzMiwgbnVsbCwgbmF0aXZlU2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGV4ZWN1dGVkLCB3aWxsIG9ubHkgY2FsbCB0aGUgYGZ1bmNgIGZ1bmN0aW9uCiAgICAgKiBhdCBtb3N0IG9uY2UgcGVyIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFByb3ZpZGUgYW4gb3B0aW9ucyBvYmplY3QgdG8KICAgICAqIGluZGljYXRlIHRoYXQgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlCiAgICAgKiBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsCiAgICAgKiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgY2FsbC4KICAgICAqCiAgICAgKiBOb3RlOiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgIGBmdW5jYCB3aWxsIGJlIGNhbGxlZAogICAgICogb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhlIHRocm90dGxlZCBmdW5jdGlvbiBpcwogICAgICogaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGV4ZWN1dGlvbnMgdG8uCiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXSBTcGVjaWZ5IGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LgogICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXSBTcGVjaWZ5IGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogLy8gYXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZwogICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCk7CiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgdGhyb3R0bGVkKTsKICAgICAqCiAgICAgKiAvLyBleGVjdXRlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMKICAgICAqIGpRdWVyeSgnLmludGVyYWN0aXZlJykub24oJ2NsaWNrJywgXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsKICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2UKICAgICAqIH0pKTsKICAgICAqLwogICAgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykgewogICAgICB2YXIgbGVhZGluZyA9IHRydWUsCiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7CgogICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yOwogICAgICB9CiAgICAgIGlmIChvcHRpb25zID09PSBmYWxzZSkgewogICAgICAgIGxlYWRpbmcgPSBmYWxzZTsKICAgICAgfSBlbHNlIGlmIChpc09iamVjdChvcHRpb25zKSkgewogICAgICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/IG9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7CiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyBvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7CiAgICAgIH0KICAgICAgZGVib3VuY2VPcHRpb25zLmxlYWRpbmcgPSBsZWFkaW5nOwogICAgICBkZWJvdW5jZU9wdGlvbnMubWF4V2FpdCA9IHdhaXQ7CiAgICAgIGRlYm91bmNlT3B0aW9ucy50cmFpbGluZyA9IHRyYWlsaW5nOwoKICAgICAgdmFyIHJlc3VsdCA9IGRlYm91bmNlKGZ1bmMsIHdhaXQsIGRlYm91bmNlT3B0aW9ucyk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIHRoZSB3cmFwcGVyIGZ1bmN0aW9uIGFzIGl0cwogICAgICogZmlyc3QgYXJndW1lbnQuIEFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWQKICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSB3cmFwcGVyIGZ1bmN0aW9uLiBUaGUgd3JhcHBlciBpcyBleGVjdXRlZCB3aXRoCiAgICAgKiB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLgogICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBoZWxsbyA9IGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuICdoZWxsbyAnICsgbmFtZTsgfTsKICAgICAqIGhlbGxvID0gXy53cmFwKGhlbGxvLCBmdW5jdGlvbihmdW5jKSB7CiAgICAgKiAgIHJldHVybiAnYmVmb3JlLCAnICsgZnVuYygnbW9lJykgKyAnLCBhZnRlcic7CiAgICAgKiB9KTsKICAgICAqIGhlbGxvKCk7CiAgICAgKiAvLyA9PiAnYmVmb3JlLCBoZWxsbyBtb2UsIGFmdGVyJwogICAgICovCiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7CiAgICAgIGlmICghaXNGdW5jdGlvbih3cmFwcGVyKSkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3I7CiAgICAgIH0KICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBhcmdzID0gW3ZhbHVlXTsKICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7CiAgICAgICAgcmV0dXJuIHdyYXBwZXIuYXBwbHkodGhpcywgYXJncyk7CiAgICAgIH07CiAgICB9CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLyoqCiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBgJmAsIGA8YCwgYD5gLCBgImAsIGFuZCBgJ2AgaW4gYHN0cmluZ2AgdG8gdGhlaXIKICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGVzY2FwZS4KICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmVzY2FwZSgnTW9lLCBMYXJyeSAmIEN1cmx5Jyk7CiAgICAgKiAvLyA9PiAnTW9lLCBMYXJyeSAmYW1wOyBDdXJseScKICAgICAqLwogICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykgewogICAgICByZXR1cm4gc3RyaW5nID09IG51bGwgPyAnJyA6IFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBwcm92aWRlZCB0byBpdC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuCiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgbW9lID0geyAnbmFtZSc6ICdtb2UnIH07CiAgICAgKiBtb2UgPT09IF8uaWRlbnRpdHkobW9lKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqLwogICAgZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQoKICAgIC8qKgogICAgICogQWRkcyBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlIG9iamVjdCB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24gYW5kCiAgICAgKiBjaGFpbmFibGUgd3JhcHBlci4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9uIHByb3BlcnRpZXMgdG8gYWRkIHRvIGBsb2Rhc2hgLgogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9uIHByb3BlcnRpZXMgdG8gYWRkIHRvIGBsb2Rhc2hgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLm1peGluKHsKICAgICAqICAgJ2NhcGl0YWxpemUnOiBmdW5jdGlvbihzdHJpbmcpIHsKICAgICAqICAgICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7CiAgICAgKiAgIH0KICAgICAqIH0pOwogICAgICoKICAgICAqIF8uY2FwaXRhbGl6ZSgnbW9lJyk7CiAgICAgKiAvLyA9PiAnTW9lJwogICAgICoKICAgICAqIF8oJ21vZScpLmNhcGl0YWxpemUoKTsKICAgICAqIC8vID0+ICdNb2UnCiAgICAgKi8KICAgIGZ1bmN0aW9uIG1peGluKG9iamVjdCwgc291cmNlKSB7CiAgICAgIHZhciBjdG9yID0gb2JqZWN0LAogICAgICAgICAgaXNGdW5jID0gIXNvdXJjZSB8fCBpc0Z1bmN0aW9uKGN0b3IpOwoKICAgICAgaWYgKCFzb3VyY2UpIHsKICAgICAgICBjdG9yID0gbG9kYXNoV3JhcHBlcjsKICAgICAgICBzb3VyY2UgPSBvYmplY3Q7CiAgICAgICAgb2JqZWN0ID0gbG9kYXNoOwogICAgICB9CiAgICAgIGZvckVhY2goZnVuY3Rpb25zKHNvdXJjZSksIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHsKICAgICAgICB2YXIgZnVuYyA9IG9iamVjdFttZXRob2ROYW1lXSA9IHNvdXJjZVttZXRob2ROYW1lXTsKICAgICAgICBpZiAoaXNGdW5jKSB7CiAgICAgICAgICBjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLAogICAgICAgICAgICAgICAgYXJncyA9IFt2YWx1ZV07CgogICAgICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KG9iamVjdCwgYXJncyk7CiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdmFsdWUgPT09IHJlc3VsdCkgewogICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBjdG9yKHJlc3VsdCk7CiAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0aGlzLl9fY2hhaW5fXzsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldmVydHMgdGhlICdfJyB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG8KICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpOwogICAgICovCiAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkgewogICAgICBjb250ZXh0Ll8gPSBvbGREYXNoOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4KICAgICAqIElmIGByYWRpeGAgaXMgYHVuZGVmaW5lZGAgb3IgYDBgIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIHRoZQogICAgICogYHZhbHVlYCBpcyBhIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuCiAgICAgKgogICAgICogTm90ZTogVGhpcyBtZXRob2QgYXZvaWRzIGRpZmZlcmVuY2VzIGluIG5hdGl2ZSBFUzMgYW5kIEVTNSBgcGFyc2VJbnRgCiAgICAgKiBpbXBsZW1lbnRhdGlvbnMuIFNlZSBodHRwOi8vZXM1LmdpdGh1Yi5pby8jRS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXJzZS4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXhdIFRoZSByYWRpeCB1c2VkIHRvIGludGVycHJldCB0aGUgdmFsdWUgdG8gcGFyc2UuCiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBuZXcgaW50ZWdlciB2YWx1ZS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5wYXJzZUludCgnMDgnKTsKICAgICAqIC8vID0+IDgKICAgICAqLwogICAgdmFyIHBhcnNlSW50ID0gbmF0aXZlUGFyc2VJbnQod2hpdGVzcGFjZSArICcwOCcpID09IDggPyBuYXRpdmVQYXJzZUludCA6IGZ1bmN0aW9uKHZhbHVlLCByYWRpeCkgewogICAgICAvLyBGaXJlZm94IGFuZCBPcGVyYSBzdGlsbCBmb2xsb3cgdGhlIEVTMyBzcGVjaWZpZWQgaW1wbGVtZW50YXRpb24gb2YgYHBhcnNlSW50YAogICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQoaXNTdHJpbmcodmFsdWUpID8gdmFsdWUucmVwbGFjZShyZUxlYWRpbmdTcGFjZXNBbmRaZXJvcywgJycpIDogdmFsdWUsIHJhZGl4IHx8IDApOwogICAgfTsKCiAgICAvKioKICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIGBtaW5gIGFuZCBgbWF4YCAoaW5jbHVzaXZlKS4gSWYgb25seSBvbmUKICAgICAqIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyIHdpbGwgYmUKICAgICAqIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIHRydWV5IG9yIGVpdGhlciBgbWluYCBvciBgbWF4YCBhcmUgZmxvYXRzIGEKICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlciB3aWxsIGJlIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHBhcmFtIHtudW1iZXJ9IFttaW49MF0gVGhlIG1pbmltdW0gcG9zc2libGUgdmFsdWUuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heD0xXSBUaGUgbWF4aW11bSBwb3NzaWJsZSB2YWx1ZS4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nPWZhbHNlXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci4KICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYSByYW5kb20gbnVtYmVyLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnJhbmRvbSgwLCA1KTsKICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1CiAgICAgKgogICAgICogXy5yYW5kb20oNSk7CiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1CiAgICAgKgogICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7CiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDUKICAgICAqCiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7CiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCwgZmxvYXRpbmcpIHsKICAgICAgdmFyIG5vTWluID0gbWluID09IG51bGwsCiAgICAgICAgICBub01heCA9IG1heCA9PSBudWxsOwoKICAgICAgaWYgKGZsb2F0aW5nID09IG51bGwpIHsKICAgICAgICBpZiAodHlwZW9mIG1pbiA9PSAnYm9vbGVhbicgJiYgbm9NYXgpIHsKICAgICAgICAgIGZsb2F0aW5nID0gbWluOwogICAgICAgICAgbWluID0gMTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoIW5vTWF4ICYmIHR5cGVvZiBtYXggPT0gJ2Jvb2xlYW4nKSB7CiAgICAgICAgICBmbG9hdGluZyA9IG1heDsKICAgICAgICAgIG5vTWF4ID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKG5vTWluICYmIG5vTWF4KSB7CiAgICAgICAgbWF4ID0gMTsKICAgICAgfQogICAgICBtaW4gPSArbWluIHx8IDA7CiAgICAgIGlmIChub01heCkgewogICAgICAgIG1heCA9IG1pbjsKICAgICAgICBtaW4gPSAwOwogICAgICB9IGVsc2UgewogICAgICAgIG1heCA9ICttYXggfHwgMDsKICAgICAgfQogICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpOwogICAgICByZXR1cm4gKGZsb2F0aW5nIHx8IG1pbiAlIDEgfHwgbWF4ICUgMSkKICAgICAgICA/IG5hdGl2ZU1pbihtaW4gKyAocmFuZCAqIChtYXggLSBtaW4gKyBwYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsnJykubGVuZ3RoIC0gMSkpKSksIG1heCkKICAgICAgICA6IG1pbiArIGZsb29yKHJhbmQgKiAobWF4IC0gbWluICsgMSkpOwogICAgfQoKICAgIC8qKgogICAgICogUmVzb2x2ZXMgdGhlIHZhbHVlIG9mIGBwcm9wZXJ0eWAgb24gYG9iamVjdGAuIElmIGBwcm9wZXJ0eWAgaXMgYSBmdW5jdGlvbgogICAgICogaXQgd2lsbCBiZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBvYmplY3RgIGFuZCBpdHMgcmVzdWx0IHJldHVybmVkLAogICAgICogZWxzZSB0aGUgcHJvcGVydHkgdmFsdWUgaXMgcmV0dXJuZWQuIElmIGBvYmplY3RgIGlzIGZhbHNleSB0aGVuIGB1bmRlZmluZWRgCiAgICAgKiBpcyByZXR1cm5lZC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgVGhlIHByb3BlcnR5IHRvIGdldCB0aGUgdmFsdWUgb2YuCiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBvYmplY3QgPSB7CiAgICAgKiAgICdjaGVlc2UnOiAnY3J1bXBldHMnLAogICAgICogICAnc3R1ZmYnOiBmdW5jdGlvbigpIHsKICAgICAqICAgICByZXR1cm4gJ25vbnNlbnNlJzsKICAgICAqICAgfQogICAgICogfTsKICAgICAqCiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdjaGVlc2UnKTsKICAgICAqIC8vID0+ICdjcnVtcGV0cycKICAgICAqCiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdzdHVmZicpOwogICAgICogLy8gPT4gJ25vbnNlbnNlJwogICAgICovCiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwcm9wZXJ0eSkgewogICAgICBpZiAob2JqZWN0KSB7CiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W3Byb3BlcnR5XTsKICAgICAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSkgPyBvYmplY3RbcHJvcGVydHldKCkgOiB2YWx1ZTsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQSBtaWNyby10ZW1wbGF0aW5nIG1ldGhvZCB0aGF0IGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcwogICAgICogd2hpdGVzcGFjZSwgYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuCiAgICAgKgogICAgICogTm90ZTogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkLCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXMgc291cmNlVVJMcyBmb3IgZWFzaWVyCiAgICAgKiBkZWJ1Z2dpbmcuIFNlZSBodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsCiAgICAgKgogICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWU6CiAgICAgKiBodHRwOi8vbG9kYXNoLmNvbS8jY3VzdG9tLWJ1aWxkcwogICAgICoKICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZToKICAgICAqIGh0dHA6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9zdGFibGUvZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbC5odG1sCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXMKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZW1wbGF0ZSB0ZXh0LgogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgVGhlIGRhdGEgb2JqZWN0IHVzZWQgdG8gcG9wdWxhdGUgdGhlIHRleHQuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC4KICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGVdIFRoZSAiZXNjYXBlIiBkZWxpbWl0ZXIuCiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGVdIFRoZSAiZXZhbHVhdGUiIGRlbGltaXRlci4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzXSBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGxvY2FsIHZhcmlhYmxlcy4KICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZV0gVGhlICJpbnRlcnBvbGF0ZSIgZGVsaW1pdGVyLgogICAgICogQHBhcmFtIHtzdHJpbmd9IFtzb3VyY2VVUkxdIFRoZSBzb3VyY2VVUkwgb2YgdGhlIHRlbXBsYXRlJ3MgY29tcGlsZWQgc291cmNlLgogICAgICogQHBhcmFtIHtzdHJpbmd9IFt2YXJpYWJsZV0gVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuCiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258c3RyaW5nfSBSZXR1cm5zIGEgY29tcGlsZWQgZnVuY3Rpb24gd2hlbiBubyBgZGF0YWAgb2JqZWN0CiAgICAgKiAgaXMgZ2l2ZW4sIGVsc2UgaXQgcmV0dXJucyB0aGUgaW50ZXJwb2xhdGVkIHRleHQuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIC8vIHVzaW5nIHRoZSAiaW50ZXJwb2xhdGUiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZQogICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IG5hbWUgJT4nKTsKICAgICAqIGNvbXBpbGVkKHsgJ25hbWUnOiAnbW9lJyB9KTsKICAgICAqIC8vID0+ICdoZWxsbyBtb2UnCiAgICAgKgogICAgICogLy8gdXNpbmcgdGhlICJlc2NhcGUiIGRlbGltaXRlciB0byBlc2NhcGUgSFRNTCBpbiBkYXRhIHByb3BlcnR5IHZhbHVlcwogICAgICogXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicsIHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTsKICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nCiAgICAgKgogICAgICogLy8gdXNpbmcgdGhlICJldmFsdWF0ZSIgZGVsaW1pdGVyIHRvIGdlbmVyYXRlIEhUTUwKICAgICAqIHZhciBsaXN0ID0gJzwlIF8uZm9yRWFjaChwZW9wbGUsIGZ1bmN0aW9uKG5hbWUpIHsgJT48bGk+PCUtIG5hbWUgJT48L2xpPjwlIH0pOyAlPic7CiAgICAgKiBfLnRlbXBsYXRlKGxpc3QsIHsgJ3Blb3BsZSc6IFsnbW9lJywgJ2xhcnJ5J10gfSk7CiAgICAgKiAvLyA9PiAnPGxpPm1vZTwvbGk+PGxpPmxhcnJ5PC9saT4nCiAgICAgKgogICAgICogLy8gdXNpbmcgdGhlIEVTNiBkZWxpbWl0ZXIgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gdGhlIGRlZmF1bHQgImludGVycG9sYXRlIiBkZWxpbWl0ZXIKICAgICAqIF8udGVtcGxhdGUoJ2hlbGxvICR7IG5hbWUgfScsIHsgJ25hbWUnOiAnY3VybHknIH0pOwogICAgICogLy8gPT4gJ2hlbGxvIGN1cmx5JwogICAgICoKICAgICAqIC8vIHVzaW5nIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluICJldmFsdWF0ZSIgZGVsaW1pdGVycwogICAgICogXy50ZW1wbGF0ZSgnPCUgcHJpbnQoImhlbGxvICIgKyBuYW1lKTsgJT4hJywgeyAnbmFtZSc6ICdsYXJyeScgfSk7CiAgICAgKiAvLyA9PiAnaGVsbG8gbGFycnkhJwogICAgICoKICAgICAqIC8vIHVzaW5nIGEgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMKICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncyA9IHsKICAgICAqICAgJ2ludGVycG9sYXRlJzogL3t7KFtcc1xTXSs/KX19L2cKICAgICAqIH07CiAgICAgKgogICAgICogXy50ZW1wbGF0ZSgnaGVsbG8ge3sgbmFtZSB9fSEnLCB7ICduYW1lJzogJ211c3RhY2hlJyB9KTsKICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnCiAgICAgKgogICAgICogLy8gdXNpbmcgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGpRdWVyeQogICAgICogdmFyIGxpc3QgPSAnPCUgJC5lYWNoKHBlb3BsZSwgZnVuY3Rpb24obmFtZSkgeyAlPjxsaT48JS0gbmFtZSAlPjwvbGk+PCUgfSk7ICU+JzsKICAgICAqIF8udGVtcGxhdGUobGlzdCwgeyAncGVvcGxlJzogWydtb2UnLCAnbGFycnknXSB9LCB7ICdpbXBvcnRzJzogeyAnJCc6IGpRdWVyeSB9IH0pOwogICAgICogLy8gPT4gJzxsaT5tb2U8L2xpPjxsaT5sYXJyeTwvbGk+JwogICAgICoKICAgICAqIC8vIHVzaW5nIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZQogICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IG5hbWUgJT4nLCBudWxsLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7CiAgICAgKiBjb21waWxlZChkYXRhKTsKICAgICAqIC8vID0+IGZpbmQgdGhlIHNvdXJjZSBvZiAiZ3JlZXRpbmcuanN0IiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yCiAgICAgKgogICAgICogLy8gdXNpbmcgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlCiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS5uYW1lICU+IScsIG51bGwsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pOwogICAgICogY29tcGlsZWQuc291cmNlOwogICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkgewogICAgICogICB2YXIgX190LCBfX3AgPSAnJywgX19lID0gXy5lc2NhcGU7CiAgICAgKiAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLm5hbWUgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJzsKICAgICAqICAgcmV0dXJuIF9fcDsKICAgICAqIH0KICAgICAqCiAgICAgKiAvLyB1c2luZyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bAogICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBhIHN0YWNrIHRyYWNlCiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihjd2QsICdqc3QuanMnKSwgJ1wKICAgICAqICAgdmFyIEpTVCA9IHtcCiAgICAgKiAgICAgIm1haW4iOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1wKICAgICAqICAgfTtcCiAgICAgKiAnKTsKICAgICAqLwogICAgZnVuY3Rpb24gdGVtcGxhdGUodGV4dCwgZGF0YSwgb3B0aW9ucykgewogICAgICAvLyBiYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uCiAgICAgIC8vIGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvCiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMKICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVAogICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5nczsKICAgICAgdGV4dCB8fCAodGV4dCA9ICcnKTsKCiAgICAgIC8vIGF2b2lkIG1pc3NpbmcgZGVwZW5kZW5jaWVzIHdoZW4gYGl0ZXJhdG9yVGVtcGxhdGVgIGlzIG5vdCBkZWZpbmVkCiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0cyh7fSwgb3B0aW9ucywgc2V0dGluZ3MpOwoKICAgICAgdmFyIGltcG9ydHMgPSBkZWZhdWx0cyh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzKSwKICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSwKICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSB2YWx1ZXMoaW1wb3J0cyk7CgogICAgICB2YXIgaXNFdmFsdWF0aW5nLAogICAgICAgICAgaW5kZXggPSAwLAogICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCwKICAgICAgICAgIHNvdXJjZSA9ICJfX3AgKz0gJyI7CgogICAgICAvLyBjb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIKICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cCgKICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgKwogICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArCiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgKwogICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJwogICAgICAsICdnJyk7CgogICAgICB0ZXh0LnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7CiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7CgogICAgICAgIC8vIGVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2Fubm90IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscwogICAgICAgIHNvdXJjZSArPSB0ZXh0LnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpOwoKICAgICAgICAvLyByZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cwogICAgICAgIGlmIChlc2NhcGVWYWx1ZSkgewogICAgICAgICAgc291cmNlICs9ICInICtcbl9fZSgiICsgZXNjYXBlVmFsdWUgKyAiKSArXG4nIjsKICAgICAgICB9CiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHsKICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7CiAgICAgICAgICBzb3VyY2UgKz0gIic7XG4iICsgZXZhbHVhdGVWYWx1ZSArICI7XG5fX3AgKz0gJyI7CiAgICAgICAgfQogICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7CiAgICAgICAgICBzb3VyY2UgKz0gIicgK1xuKChfX3QgPSAoIiArIGludGVycG9sYXRlVmFsdWUgKyAiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXG4nIjsKICAgICAgICB9CiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7CgogICAgICAgIC8vIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgcmVxdWlyZXMgcmV0dXJuaW5nIHRoZSBgbWF0Y2hgCiAgICAgICAgLy8gc3RyaW5nIGluIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUKICAgICAgICByZXR1cm4gbWF0Y2g7CiAgICAgIH0pOwoKICAgICAgc291cmNlICs9ICInO1xuIjsKCiAgICAgIC8vIGlmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCwgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkCiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbgogICAgICB2YXIgdmFyaWFibGUgPSBvcHRpb25zLnZhcmlhYmxlLAogICAgICAgICAgaGFzVmFyaWFibGUgPSB2YXJpYWJsZTsKCiAgICAgIGlmICghaGFzVmFyaWFibGUpIHsKICAgICAgICB2YXJpYWJsZSA9ICdvYmonOwogICAgICAgIHNvdXJjZSA9ICd3aXRoICgnICsgdmFyaWFibGUgKyAnKSB7XG4nICsgc291cmNlICsgJ1xufVxuJzsKICAgICAgfQogICAgICAvLyBjbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MKICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpCiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJykKICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsICckMTsnKTsKCiAgICAgIC8vIGZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkKICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyB2YXJpYWJsZSArICcpIHtcbicgKwogICAgICAgIChoYXNWYXJpYWJsZSA/ICcnIDogdmFyaWFibGUgKyAnIHx8ICgnICsgdmFyaWFibGUgKyAnID0ge30pO1xuJykgKwogICAgICAgICJ2YXIgX190LCBfX3AgPSAnJywgX19lID0gXy5lc2NhcGUiICsKICAgICAgICAoaXNFdmFsdWF0aW5nCiAgICAgICAgICA/ICcsIF9faiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xuJyArCiAgICAgICAgICAgICJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cbiIKICAgICAgICAgIDogJztcbicKICAgICAgICApICsKICAgICAgICBzb3VyY2UgKwogICAgICAgICdyZXR1cm4gX19wXG59JzsKCiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy4KICAgICAgLy8gaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybAogICAgICB2YXIgc291cmNlVVJMID0gJ1xuLypcbi8vIyBzb3VyY2VVUkw9JyArIChvcHRpb25zLnNvdXJjZVVSTCB8fCAnL2xvZGFzaC90ZW1wbGF0ZS9zb3VyY2VbJyArICh0ZW1wbGF0ZUNvdW50ZXIrKykgKyAnXScpICsgJ1xuKi8nOwoKICAgICAgdHJ5IHsKICAgICAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24oaW1wb3J0c0tleXMsICdyZXR1cm4gJyArIHNvdXJjZSArIHNvdXJjZVVSTCkuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTsKICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgZS5zb3VyY2UgPSBzb3VyY2U7CiAgICAgICAgdGhyb3cgZTsKICAgICAgfQogICAgICBpZiAoZGF0YSkgewogICAgICAgIHJldHVybiByZXN1bHQoZGF0YSk7CiAgICAgIH0KICAgICAgLy8gcHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24ncyBzb3VyY2UgYnkgaXRzIGB0b1N0cmluZ2AgbWV0aG9kLCBpbgogICAgICAvLyBzdXBwb3J0ZWQgZW52aXJvbm1lbnRzLCBvciB0aGUgYHNvdXJjZWAgcHJvcGVydHkgYXMgYSBjb252ZW5pZW5jZSBmb3IKICAgICAgLy8gaW5saW5pbmcgY29tcGlsZWQgdGVtcGxhdGVzIGR1cmluZyB0aGUgYnVpbGQgcHJvY2VzcwogICAgICByZXN1bHQuc291cmNlID0gc291cmNlOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogRXhlY3V0ZXMgdGhlIGNhbGxiYWNrIGBuYCB0aW1lcywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzCiAgICAgKiBvZiBlYWNoIGNhbGxiYWNrIGV4ZWN1dGlvbi4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZAogICAgICogd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXMKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gZXhlY3V0ZSB0aGUgY2FsbGJhY2suCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uCiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGBjYWxsYmFja2AgZXhlY3V0aW9uLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgZGljZVJvbGxzID0gXy50aW1lcygzLCBfLnBhcnRpYWwoXy5yYW5kb20sIDEsIDYpKTsKICAgICAqIC8vID0+IFszLCA2LCA0XQogICAgICoKICAgICAqIF8udGltZXMoMywgZnVuY3Rpb24obikgeyBtYWdlLmNhc3RTcGVsbChuKTsgfSk7CiAgICAgKiAvLyA9PiBjYWxscyBgbWFnZS5jYXN0U3BlbGwobilgIHRocmVlIHRpbWVzLCBwYXNzaW5nIGBuYCBvZiBgMGAsIGAxYCwgYW5kIGAyYCByZXNwZWN0aXZlbHkKICAgICAqCiAgICAgKiBfLnRpbWVzKDMsIGZ1bmN0aW9uKG4pIHsgdGhpcy5jYXN0KG4pOyB9LCBtYWdlKTsKICAgICAqIC8vID0+IGFsc28gY2FsbHMgYG1hZ2UuY2FzdFNwZWxsKG4pYCB0aHJlZSB0aW1lcwogICAgICovCiAgICBmdW5jdGlvbiB0aW1lcyhuLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICBuID0gKG4gPSArbikgPiAtMSA/IG4gOiAwOwogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG4pOwoKICAgICAgY2FsbGJhY2sgPSBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDEpOwogICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHsKICAgICAgICByZXN1bHRbaW5kZXhdID0gY2FsbGJhY2soaW5kZXgpOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgIHRoaXMgbWV0aG9kIGNvbnZlcnRzIHRoZSBIVE1MIGVudGl0aWVzCiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvIHRoZWlyCiAgICAgKiBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXMKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB1bmVzY2FwZS4KICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8udW5lc2NhcGUoJ01vZSwgTGFycnkgJmFtcDsgQ3VybHknKTsKICAgICAqIC8vID0+ICdNb2UsIExhcnJ5ICYgQ3VybHknCiAgICAgKi8KICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykgewogICAgICByZXR1cm4gc3RyaW5nID09IG51bGwgPyAnJyA6IFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVFc2NhcGVkSHRtbCwgdW5lc2NhcGVIdG1sQ2hhcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIHByb3ZpZGVkIHRoZSBJRCB3aWxsIGJlIGFwcGVuZGVkIHRvIGl0LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeF0gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC4KICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTsKICAgICAqIC8vID0+ICdjb250YWN0XzEwNCcKICAgICAqCiAgICAgKiBfLnVuaXF1ZUlkKCk7CiAgICAgKiAvLyA9PiAnMTA1JwogICAgICovCiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHsKICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7CiAgICAgIHJldHVybiBTdHJpbmcocHJlZml4ID09IG51bGwgPyAnJyA6IHByZWZpeCkgKyBpZDsKICAgIH0KCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3QgdGhhdCB3cmFwcyB0aGUgZ2l2ZW4gdmFsdWUgd2l0aCBleHBsaWNpdAogICAgICogbWV0aG9kIGNoYWluaW5nIGVuYWJsZWQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBDaGFpbmluZwogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgc3Rvb2dlcyA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwKICAgICAqICAgeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9LAogICAgICogICB7ICduYW1lJzogJ2N1cmx5JywgJ2FnZSc6IDYwIH0KICAgICAqIF07CiAgICAgKgogICAgICogdmFyIHlvdW5nZXN0ID0gXy5jaGFpbihzdG9vZ2VzKQogICAgICogICAgIC5zb3J0QnkoJ2FnZScpCiAgICAgKiAgICAgLm1hcChmdW5jdGlvbihzdG9vZ2UpIHsgcmV0dXJuIHN0b29nZS5uYW1lICsgJyBpcyAnICsgc3Rvb2dlLmFnZTsgfSkKICAgICAqICAgICAuZmlyc3QoKQogICAgICogICAgIC52YWx1ZSgpOwogICAgICogLy8gPT4gJ21vZSBpcyA0MCcKICAgICAqLwogICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHsKICAgICAgdmFsdWUgPSBuZXcgbG9kYXNoV3JhcHBlcih2YWx1ZSk7CiAgICAgIHZhbHVlLl9fY2hhaW5fXyA9IHRydWU7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEludm9rZXMgYGludGVyY2VwdG9yYCB3aXRoIHRoZSBgdmFsdWVgIGFzIHRoZSBmaXJzdCBhcmd1bWVudCBhbmQgdGhlbgogICAgICogcmV0dXJucyBgdmFsdWVgLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byAidGFwIGludG8iIGEgbWV0aG9kCiAgICAgKiBjaGFpbiBpbiBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluCiAgICAgKiB0aGUgY2hhaW4uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBDaGFpbmluZwogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS4KICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8oWzEsIDIsIDMsIDRdKQogICAgICogIC5maWx0ZXIoZnVuY3Rpb24obnVtKSB7IHJldHVybiBudW0gJSAyID09IDA7IH0pCiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkgeyBjb25zb2xlLmxvZyhhcnJheSk7IH0pCiAgICAgKiAgLm1hcChmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAqIG51bTsgfSkKICAgICAqICAudmFsdWUoKTsKICAgICAqIC8vID0+IC8vIFsyLCA0XSAobG9nZ2VkKQogICAgICogLy8gPT4gWzQsIDE2XQogICAgICovCiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7CiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQoKICAgIC8qKgogICAgICogRW5hYmxlcyBleHBsaWNpdCBtZXRob2QgY2hhaW5pbmcgb24gdGhlIHdyYXBwZXIgb2JqZWN0LgogICAgICoKICAgICAqIEBuYW1lIGNoYWluCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IENoYWluaW5nCiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBzdG9vZ2VzID0gWwogICAgICogICB7ICduYW1lJzogJ21vZScsICdhZ2UnOiA0MCB9LAogICAgICogICB7ICduYW1lJzogJ2xhcnJ5JywgJ2FnZSc6IDUwIH0KICAgICAqIF07CiAgICAgKgogICAgICogLy8gd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZwogICAgICogXyhzdG9vZ2VzKS5maXJzdCgpOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfQogICAgICoKICAgICAqIC8vIHdpdGggZXhwbGljaXQgY2hhaW5pbmcKICAgICAqIF8oc3Rvb2dlcykuY2hhaW4oKQogICAgICogICAuZmlyc3QoKQogICAgICogICAucGljaygnYWdlJykKICAgICAqICAgLnZhbHVlKCkKICAgICAqIC8vID0+IHsgJ2FnZSc6IDQwIH0KICAgICAqLwogICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkgewogICAgICB0aGlzLl9fY2hhaW5fXyA9IHRydWU7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIC8qKgogICAgICogUHJvZHVjZXMgdGhlIGB0b1N0cmluZ2AgcmVzdWx0IG9mIHRoZSB3cmFwcGVkIHZhbHVlLgogICAgICoKICAgICAqIEBuYW1lIHRvU3RyaW5nCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IENoYWluaW5nCiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcgcmVzdWx0LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfKFsxLCAyLCAzXSkudG9TdHJpbmcoKTsKICAgICAqIC8vID0+ICcxLDIsMycKICAgICAqLwogICAgZnVuY3Rpb24gd3JhcHBlclRvU3RyaW5nKCkgewogICAgICByZXR1cm4gU3RyaW5nKHRoaXMuX193cmFwcGVkX18pOwogICAgfQoKICAgIC8qKgogICAgICogRXh0cmFjdHMgdGhlIHdyYXBwZWQgdmFsdWUuCiAgICAgKgogICAgICogQG5hbWUgdmFsdWVPZgogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBhbGlhcyB2YWx1ZQogICAgICogQGNhdGVnb3J5IENoYWluaW5nCiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgd3JhcHBlZCB2YWx1ZS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXyhbMSwgMiwgM10pLnZhbHVlT2YoKTsKICAgICAqIC8vID0+IFsxLCAyLCAzXQogICAgICovCiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWVPZigpIHsKICAgICAgcmV0dXJuIHRoaXMuX193cmFwcGVkX187CiAgICB9CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLy8gYWRkIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyB3aGVuIGNoYWluaW5nCiAgICBsb2Rhc2guYWZ0ZXIgPSBhZnRlcjsKICAgIGxvZGFzaC5hc3NpZ24gPSBhc3NpZ247CiAgICBsb2Rhc2guYXQgPSBhdDsKICAgIGxvZGFzaC5iaW5kID0gYmluZDsKICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDsKICAgIGxvZGFzaC5iaW5kS2V5ID0gYmluZEtleTsKICAgIGxvZGFzaC5jaGFpbiA9IGNoYWluOwogICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0OwogICAgbG9kYXNoLmNvbXBvc2UgPSBjb21wb3NlOwogICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5OwogICAgbG9kYXNoLmNyZWF0ZUNhbGxiYWNrID0gY3JlYXRlQ2FsbGJhY2s7CiAgICBsb2Rhc2guY3VycnkgPSBjdXJyeTsKICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlOwogICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7CiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjsKICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5OwogICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlOwogICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjsKICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjsKICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDsKICAgIGxvZGFzaC5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7CiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjsKICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDsKICAgIGxvZGFzaC5mb3JPd24gPSBmb3JPd247CiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDsKICAgIGxvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7CiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7CiAgICBsb2Rhc2guaW5kZXhCeSA9IGluZGV4Qnk7CiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7CiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uOwogICAgbG9kYXNoLmludmVydCA9IGludmVydDsKICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7CiAgICBsb2Rhc2gua2V5cyA9IGtleXM7CiAgICBsb2Rhc2gubWFwID0gbWFwOwogICAgbG9kYXNoLm1heCA9IG1heDsKICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTsKICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlOwogICAgbG9kYXNoLm1pbiA9IG1pbjsKICAgIGxvZGFzaC5vbWl0ID0gb21pdDsKICAgIGxvZGFzaC5vbmNlID0gb25jZTsKICAgIGxvZGFzaC5wYWlycyA9IHBhaXJzOwogICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsOwogICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDsKICAgIGxvZGFzaC5waWNrID0gcGljazsKICAgIGxvZGFzaC5wbHVjayA9IHBsdWNrOwogICAgbG9kYXNoLnB1bGwgPSBwdWxsOwogICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7CiAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0OwogICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTsKICAgIGxvZGFzaC5yZXN0ID0gcmVzdDsKICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTsKICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7CiAgICBsb2Rhc2gudGFwID0gdGFwOwogICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7CiAgICBsb2Rhc2gudGltZXMgPSB0aW1lczsKICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTsKICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07CiAgICBsb2Rhc2gudW5pb24gPSB1bmlvbjsKICAgIGxvZGFzaC51bmlxID0gdW5pcTsKICAgIGxvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7CiAgICBsb2Rhc2gud2hlcmUgPSB3aGVyZTsKICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDsKICAgIGxvZGFzaC53cmFwID0gd3JhcDsKICAgIGxvZGFzaC56aXAgPSB6aXA7CiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0OwoKICAgIC8vIGFkZCBhbGlhc2VzCiAgICBsb2Rhc2guY29sbGVjdCA9IG1hcDsKICAgIGxvZGFzaC5kcm9wID0gcmVzdDsKICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDsKICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7CiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduOwogICAgbG9kYXNoLm1ldGhvZHMgPSBmdW5jdGlvbnM7CiAgICBsb2Rhc2gub2JqZWN0ID0gemlwT2JqZWN0OwogICAgbG9kYXNoLnNlbGVjdCA9IGZpbHRlcjsKICAgIGxvZGFzaC50YWlsID0gcmVzdDsKICAgIGxvZGFzaC51bmlxdWUgPSB1bmlxOwogICAgbG9kYXNoLnVuemlwID0gemlwOwoKICAgIC8vIGFkZCBmdW5jdGlvbnMgdG8gYGxvZGFzaC5wcm90b3R5cGVgCiAgICBtaXhpbihsb2Rhc2gpOwoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8vIGFkZCBmdW5jdGlvbnMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyB3aGVuIGNoYWluaW5nCiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTsKICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7CiAgICBsb2Rhc2guY29udGFpbnMgPSBjb250YWluczsKICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7CiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTsKICAgIGxvZGFzaC5maW5kID0gZmluZDsKICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7CiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7CiAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDsKICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDsKICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5OwogICAgbG9kYXNoLmhhcyA9IGhhczsKICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5OwogICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mOwogICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7CiAgICBsb2Rhc2guaXNBcnJheSA9IGlzQXJyYXk7CiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuOwogICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTsKICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7CiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7CiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7CiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTsKICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjsKICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOOwogICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDsKICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyOwogICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7CiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7CiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDsKICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nOwogICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7CiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjsKICAgIGxvZGFzaC5taXhpbiA9IG1peGluOwogICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0OwogICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7CiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tOwogICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTsKICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0OwogICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDsKICAgIGxvZGFzaC5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7CiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7CiAgICBsb2Rhc2guc29tZSA9IHNvbWU7CiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDsKICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlOwogICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7CiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDsKCiAgICAvLyBhZGQgYWxpYXNlcwogICAgbG9kYXNoLmFsbCA9IGV2ZXJ5OwogICAgbG9kYXNoLmFueSA9IHNvbWU7CiAgICBsb2Rhc2guZGV0ZWN0ID0gZmluZDsKICAgIGxvZGFzaC5maW5kV2hlcmUgPSBmaW5kOwogICAgbG9kYXNoLmZvbGRsID0gcmVkdWNlOwogICAgbG9kYXNoLmZvbGRyID0gcmVkdWNlUmlnaHQ7CiAgICBsb2Rhc2guaW5jbHVkZSA9IGNvbnRhaW5zOwogICAgbG9kYXNoLmluamVjdCA9IHJlZHVjZTsKCiAgICBmb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7CiAgICAgIGlmICghbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSkgewogICAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBhcmdzID0gW3RoaXMuX193cmFwcGVkX19dLAogICAgICAgICAgICAgIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX187CgogICAgICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpOwogICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkobG9kYXNoLCBhcmdzKTsKICAgICAgICAgIHJldHVybiBjaGFpbkFsbAogICAgICAgICAgICA/IG5ldyBsb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpCiAgICAgICAgICAgIDogcmVzdWx0OwogICAgICAgIH07CiAgICAgIH0KICAgIH0pOwoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8vIGFkZCBmdW5jdGlvbnMgY2FwYWJsZSBvZiByZXR1cm5pbmcgd3JhcHBlZCBhbmQgdW53cmFwcGVkIHZhbHVlcyB3aGVuIGNoYWluaW5nCiAgICBsb2Rhc2guZmlyc3QgPSBmaXJzdDsKICAgIGxvZGFzaC5sYXN0ID0gbGFzdDsKICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7CgogICAgLy8gYWRkIGFsaWFzZXMKICAgIGxvZGFzaC50YWtlID0gZmlyc3Q7CiAgICBsb2Rhc2guaGVhZCA9IGZpcnN0OwoKICAgIGZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHsKICAgICAgdmFyIGNhbGxiYWNrYWJsZSA9IG1ldGhvZE5hbWUgIT09ICdzYW1wbGUnOwogICAgICBpZiAoIWxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0pIHsKICAgICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdPSBmdW5jdGlvbihuLCBndWFyZCkgewogICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sCiAgICAgICAgICAgICAgcmVzdWx0ID0gZnVuYyh0aGlzLl9fd3JhcHBlZF9fLCBuLCBndWFyZCk7CgogICAgICAgICAgcmV0dXJuICFjaGFpbkFsbCAmJiAobiA9PSBudWxsIHx8IChndWFyZCAmJiAhKGNhbGxiYWNrYWJsZSAmJiB0eXBlb2YgbiA9PSAnZnVuY3Rpb24nKSkpCiAgICAgICAgICAgID8gcmVzdWx0CiAgICAgICAgICAgIDogbmV3IGxvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7CiAgICAgICAgfTsKICAgICAgfQogICAgfSk7CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLyoqCiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEB0eXBlIHN0cmluZwogICAgICovCiAgICBsb2Rhc2guVkVSU0lPTiA9ICcyLjIuMSc7CgogICAgLy8gYWRkICJDaGFpbmluZyIgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyCiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluOwogICAgbG9kYXNoLnByb3RvdHlwZS50b1N0cmluZyA9IHdyYXBwZXJUb1N0cmluZzsKICAgIGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWVPZjsKICAgIGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IHdyYXBwZXJWYWx1ZU9mOwoKICAgIC8vIGFkZCBgQXJyYXlgIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzCiAgICBmb3JFYWNoKFsnam9pbicsICdwb3AnLCAnc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkgewogICAgICB2YXIgZnVuYyA9IGFycmF5UmVmW21ldGhvZE5hbWVdOwogICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sCiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcy5fX3dyYXBwZWRfXywgYXJndW1lbnRzKTsKCiAgICAgICAgcmV0dXJuIGNoYWluQWxsCiAgICAgICAgICA/IG5ldyBsb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpCiAgICAgICAgICA6IHJlc3VsdDsKICAgICAgfTsKICAgIH0pOwoKICAgIC8vIGFkZCBgQXJyYXlgIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB0aGUgd3JhcHBlZCB2YWx1ZQogICAgZm9yRWFjaChbJ3B1c2gnLCAncmV2ZXJzZScsICdzb3J0JywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkgewogICAgICB2YXIgZnVuYyA9IGFycmF5UmVmW21ldGhvZE5hbWVdOwogICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgZnVuYy5hcHBseSh0aGlzLl9fd3JhcHBlZF9fLCBhcmd1bWVudHMpOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9OwogICAgfSk7CgogICAgLy8gYWRkIGBBcnJheWAgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIG5ldyB3cmFwcGVkIHZhbHVlcwogICAgZm9yRWFjaChbJ2NvbmNhdCcsICdzbGljZScsICdzcGxpY2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkgewogICAgICB2YXIgZnVuYyA9IGFycmF5UmVmW21ldGhvZE5hbWVdOwogICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIG5ldyBsb2Rhc2hXcmFwcGVyKGZ1bmMuYXBwbHkodGhpcy5fX3dyYXBwZWRfXywgYXJndW1lbnRzKSwgdGhpcy5fX2NoYWluX18pOwogICAgICB9OwogICAgfSk7CgogICAgcmV0dXJuIGxvZGFzaDsKICB9CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAvLyBleHBvc2UgTG8tRGFzaAogIHZhciBfID0gcnVuSW5Db250ZXh0KCk7CgogIC8vIHNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIGNvbmRpdGlvbiBwYXR0ZXJucyBsaWtlIHRoZSBmb2xsb3dpbmc6CiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7CiAgICAvLyBFeHBvc2UgTG8tRGFzaCB0byB0aGUgZ2xvYmFsIG9iamVjdCBldmVuIHdoZW4gYW4gQU1EIGxvYWRlciBpcyBwcmVzZW50IGluCiAgICAvLyBjYXNlIExvLURhc2ggd2FzIGluamVjdGVkIGJ5IGEgdGhpcmQtcGFydHkgc2NyaXB0IGFuZCBub3QgaW50ZW5kZWQgdG8gYmUKICAgIC8vIGxvYWRlZCBhcyBhIG1vZHVsZS4gVGhlIGdsb2JhbCBhc3NpZ25tZW50IGNhbiBiZSByZXZlcnRlZCBpbiB0aGUgTG8tRGFzaAogICAgLy8gbW9kdWxlIGJ5IGl0cyBgbm9Db25mbGljdCgpYCBtZXRob2QuCiAgICByb290Ll8gPSBfOwoKICAgIC8vIGRlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvLCB0aHJvdWdoIHBhdGggbWFwcGluZywgaXQgY2FuIGJlCiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSAidW5kZXJzY29yZSIgbW9kdWxlCiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBfOwogICAgfSk7CiAgfQogIC8vIGNoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGFuIGBleHBvcnRzYCBvYmplY3QKICBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7CiAgICAvLyBpbiBOb2RlLmpzIG9yIFJpbmdvSlMKICAgIGlmIChtb2R1bGVFeHBvcnRzKSB7CiAgICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXzsKICAgIH0KICAgIC8vIGluIE5hcndoYWwgb3IgUmhpbm8gLXJlcXVpcmUKICAgIGVsc2UgewogICAgICBmcmVlRXhwb3J0cy5fID0gXzsKICAgIH0KICB9CiAgZWxzZSB7CiAgICAvLyBpbiBhIGJyb3dzZXIgb3IgUmhpbm8KICAgIHJvb3QuXyA9IF87CiAgfQp9LmNhbGwodGhpcykpOwoKLy8gICAgIEJhY2tib25lLmpzIDEuMS4yCgovLyAgICAgKGMpIDIwMTAtMjAxNCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9ycwovLyAgICAgQmFja2JvbmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCi8vICAgICBGb3IgYWxsIGRldGFpbHMgYW5kIGRvY3VtZW50YXRpb246Ci8vICAgICBodHRwOi8vYmFja2JvbmVqcy5vcmcKCihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7CgogIC8vIFNldCB1cCBCYWNrYm9uZSBhcHByb3ByaWF0ZWx5IGZvciB0aGUgZW52aXJvbm1lbnQuIFN0YXJ0IHdpdGggQU1ELgogIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsKICAgIGRlZmluZShbJ3VuZGVyc2NvcmUnLCAnanF1ZXJ5JywgJ2V4cG9ydHMnXSwgZnVuY3Rpb24oXywgJCwgZXhwb3J0cykgewogICAgICAvLyBFeHBvcnQgZ2xvYmFsIGV2ZW4gaW4gQU1EIGNhc2UgaW4gY2FzZSB0aGlzIHNjcmlwdCBpcyBsb2FkZWQgd2l0aAogICAgICAvLyBvdGhlcnMgdGhhdCBtYXkgc3RpbGwgZXhwZWN0IGEgZ2xvYmFsIEJhY2tib25lLgogICAgICByb290LkJhY2tib25lID0gZmFjdG9yeShyb290LCBleHBvcnRzLCBfLCAkKTsKICAgIH0pOwoKICAvLyBOZXh0IGZvciBOb2RlLmpzIG9yIENvbW1vbkpTLiBqUXVlcnkgbWF5IG5vdCBiZSBuZWVkZWQgYXMgYSBtb2R1bGUuCiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIHZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpOwogICAgZmFjdG9yeShyb290LCBleHBvcnRzLCBfKTsKCiAgLy8gRmluYWxseSwgYXMgYSBicm93c2VyIGdsb2JhbC4KICB9IGVsc2UgewogICAgcm9vdC5CYWNrYm9uZSA9IGZhY3Rvcnkocm9vdCwge30sIHJvb3QuXywgKHJvb3QualF1ZXJ5IHx8IHJvb3QuWmVwdG8gfHwgcm9vdC5lbmRlciB8fCByb290LiQpKTsKICB9Cgp9KHRoaXMsIGZ1bmN0aW9uKHJvb3QsIEJhY2tib25lLCBfLCAkKSB7CgogIC8vIEluaXRpYWwgU2V0dXAKICAvLyAtLS0tLS0tLS0tLS0tCgogIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgQmFja2JvbmVgIHZhcmlhYmxlLCBzbyB0aGF0IGl0IGNhbiBiZQogIC8vIHJlc3RvcmVkIGxhdGVyIG9uLCBpZiBgbm9Db25mbGljdGAgaXMgdXNlZC4KICB2YXIgcHJldmlvdXNCYWNrYm9uZSA9IHJvb3QuQmFja2JvbmU7CgogIC8vIENyZWF0ZSBsb2NhbCByZWZlcmVuY2VzIHRvIGFycmF5IG1ldGhvZHMgd2UnbGwgd2FudCB0byB1c2UgbGF0ZXIuCiAgdmFyIGFycmF5ID0gW107CiAgdmFyIHB1c2ggPSBhcnJheS5wdXNoOwogIHZhciBzbGljZSA9IGFycmF5LnNsaWNlOwogIHZhciBzcGxpY2UgPSBhcnJheS5zcGxpY2U7CgogIC8vIEN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgbGlicmFyeS4gS2VlcCBpbiBzeW5jIHdpdGggYHBhY2thZ2UuanNvbmAuCiAgQmFja2JvbmUuVkVSU0lPTiA9ICcxLjEuMic7CgogIC8vIEZvciBCYWNrYm9uZSdzIHB1cnBvc2VzLCBqUXVlcnksIFplcHRvLCBFbmRlciwgb3IgTXkgTGlicmFyeSAoa2lkZGluZykgb3ducwogIC8vIHRoZSBgJGAgdmFyaWFibGUuCiAgQmFja2JvbmUuJCA9ICQ7CgogIC8vIFJ1bnMgQmFja2JvbmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYEJhY2tib25lYCB2YXJpYWJsZQogIC8vIHRvIGl0cyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGlzIEJhY2tib25lIG9iamVjdC4KICBCYWNrYm9uZS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7CiAgICByb290LkJhY2tib25lID0gcHJldmlvdXNCYWNrYm9uZTsKICAgIHJldHVybiB0aGlzOwogIH07CgogIC8vIFR1cm4gb24gYGVtdWxhdGVIVFRQYCB0byBzdXBwb3J0IGxlZ2FjeSBIVFRQIHNlcnZlcnMuIFNldHRpbmcgdGhpcyBvcHRpb24KICAvLyB3aWxsIGZha2UgYCJQQVRDSCJgLCBgIlBVVCJgIGFuZCBgIkRFTEVURSJgIHJlcXVlc3RzIHZpYSB0aGUgYF9tZXRob2RgIHBhcmFtZXRlciBhbmQKICAvLyBzZXQgYSBgWC1IdHRwLU1ldGhvZC1PdmVycmlkZWAgaGVhZGVyLgogIEJhY2tib25lLmVtdWxhdGVIVFRQID0gZmFsc2U7CgogIC8vIFR1cm4gb24gYGVtdWxhdGVKU09OYCB0byBzdXBwb3J0IGxlZ2FjeSBzZXJ2ZXJzIHRoYXQgY2FuJ3QgZGVhbCB3aXRoIGRpcmVjdAogIC8vIGBhcHBsaWNhdGlvbi9qc29uYCByZXF1ZXN0cyAuLi4gd2lsbCBlbmNvZGUgdGhlIGJvZHkgYXMKICAvLyBgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkYCBpbnN0ZWFkIGFuZCB3aWxsIHNlbmQgdGhlIG1vZGVsIGluIGEKICAvLyBmb3JtIHBhcmFtIG5hbWVkIGBtb2RlbGAuCiAgQmFja2JvbmUuZW11bGF0ZUpTT04gPSBmYWxzZTsKCiAgLy8gQmFja2JvbmUuRXZlbnRzCiAgLy8gLS0tLS0tLS0tLS0tLS0tCgogIC8vIEEgbW9kdWxlIHRoYXQgY2FuIGJlIG1peGVkIGluIHRvICphbnkgb2JqZWN0KiBpbiBvcmRlciB0byBwcm92aWRlIGl0IHdpdGgKICAvLyBjdXN0b20gZXZlbnRzLiBZb3UgbWF5IGJpbmQgd2l0aCBgb25gIG9yIHJlbW92ZSB3aXRoIGBvZmZgIGNhbGxiYWNrCiAgLy8gZnVuY3Rpb25zIHRvIGFuIGV2ZW50OyBgdHJpZ2dlcmAtaW5nIGFuIGV2ZW50IGZpcmVzIGFsbCBjYWxsYmFja3MgaW4KICAvLyBzdWNjZXNzaW9uLgogIC8vCiAgLy8gICAgIHZhciBvYmplY3QgPSB7fTsKICAvLyAgICAgXy5leHRlbmQob2JqZWN0LCBCYWNrYm9uZS5FdmVudHMpOwogIC8vICAgICBvYmplY3Qub24oJ2V4cGFuZCcsIGZ1bmN0aW9uKCl7IGFsZXJ0KCdleHBhbmRlZCcpOyB9KTsKICAvLyAgICAgb2JqZWN0LnRyaWdnZXIoJ2V4cGFuZCcpOwogIC8vCiAgdmFyIEV2ZW50cyA9IEJhY2tib25lLkV2ZW50cyA9IHsKCiAgICAvLyBCaW5kIGFuIGV2ZW50IHRvIGEgYGNhbGxiYWNrYCBmdW5jdGlvbi4gUGFzc2luZyBgImFsbCJgIHdpbGwgYmluZAogICAgLy8gdGhlIGNhbGxiYWNrIHRvIGFsbCBldmVudHMgZmlyZWQuCiAgICBvbjogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHsKICAgICAgaWYgKCFldmVudHNBcGkodGhpcywgJ29uJywgbmFtZSwgW2NhbGxiYWNrLCBjb250ZXh0XSkgfHwgIWNhbGxiYWNrKSByZXR1cm4gdGhpczsKICAgICAgdGhpcy5fZXZlbnRzIHx8ICh0aGlzLl9ldmVudHMgPSB7fSk7CiAgICAgIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHNbbmFtZV0gfHwgKHRoaXMuX2V2ZW50c1tuYW1lXSA9IFtdKTsKICAgICAgZXZlbnRzLnB1c2goe2NhbGxiYWNrOiBjYWxsYmFjaywgY29udGV4dDogY29udGV4dCwgY3R4OiBjb250ZXh0IHx8IHRoaXN9KTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIEJpbmQgYW4gZXZlbnQgdG8gb25seSBiZSB0cmlnZ2VyZWQgYSBzaW5nbGUgdGltZS4gQWZ0ZXIgdGhlIGZpcnN0IHRpbWUKICAgIC8vIHRoZSBjYWxsYmFjayBpcyBpbnZva2VkLCBpdCB3aWxsIGJlIHJlbW92ZWQuCiAgICBvbmNlOiBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaywgY29udGV4dCkgewogICAgICBpZiAoIWV2ZW50c0FwaSh0aGlzLCAnb25jZScsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pIHx8ICFjYWxsYmFjaykgcmV0dXJuIHRoaXM7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIG9uY2UgPSBfLm9uY2UoZnVuY3Rpb24oKSB7CiAgICAgICAgc2VsZi5vZmYobmFtZSwgb25jZSk7CiAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfSk7CiAgICAgIG9uY2UuX2NhbGxiYWNrID0gY2FsbGJhY2s7CiAgICAgIHJldHVybiB0aGlzLm9uKG5hbWUsIG9uY2UsIGNvbnRleHQpOwogICAgfSwKCiAgICAvLyBSZW1vdmUgb25lIG9yIG1hbnkgY2FsbGJhY2tzLiBJZiBgY29udGV4dGAgaXMgbnVsbCwgcmVtb3ZlcyBhbGwKICAgIC8vIGNhbGxiYWNrcyB3aXRoIHRoYXQgZnVuY3Rpb24uIElmIGBjYWxsYmFja2AgaXMgbnVsbCwgcmVtb3ZlcyBhbGwKICAgIC8vIGNhbGxiYWNrcyBmb3IgdGhlIGV2ZW50LiBJZiBgbmFtZWAgaXMgbnVsbCwgcmVtb3ZlcyBhbGwgYm91bmQKICAgIC8vIGNhbGxiYWNrcyBmb3IgYWxsIGV2ZW50cy4KICAgIG9mZjogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHsKICAgICAgdmFyIHJldGFpbiwgZXYsIGV2ZW50cywgbmFtZXMsIGksIGwsIGosIGs7CiAgICAgIGlmICghdGhpcy5fZXZlbnRzIHx8ICFldmVudHNBcGkodGhpcywgJ29mZicsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pKSByZXR1cm4gdGhpczsKICAgICAgaWYgKCFuYW1lICYmICFjYWxsYmFjayAmJiAhY29udGV4dCkgewogICAgICAgIHRoaXMuX2V2ZW50cyA9IHZvaWQgMDsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgICBuYW1lcyA9IG5hbWUgPyBbbmFtZV0gOiBfLmtleXModGhpcy5fZXZlbnRzKTsKICAgICAgZm9yIChpID0gMCwgbCA9IG5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIG5hbWUgPSBuYW1lc1tpXTsKICAgICAgICBpZiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzW25hbWVdKSB7CiAgICAgICAgICB0aGlzLl9ldmVudHNbbmFtZV0gPSByZXRhaW4gPSBbXTsKICAgICAgICAgIGlmIChjYWxsYmFjayB8fCBjb250ZXh0KSB7CiAgICAgICAgICAgIGZvciAoaiA9IDAsIGsgPSBldmVudHMubGVuZ3RoOyBqIDwgazsgaisrKSB7CiAgICAgICAgICAgICAgZXYgPSBldmVudHNbal07CiAgICAgICAgICAgICAgaWYgKChjYWxsYmFjayAmJiBjYWxsYmFjayAhPT0gZXYuY2FsbGJhY2sgJiYgY2FsbGJhY2sgIT09IGV2LmNhbGxiYWNrLl9jYWxsYmFjaykgfHwKICAgICAgICAgICAgICAgICAgKGNvbnRleHQgJiYgY29udGV4dCAhPT0gZXYuY29udGV4dCkpIHsKICAgICAgICAgICAgICAgIHJldGFpbi5wdXNoKGV2KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghcmV0YWluLmxlbmd0aCkgZGVsZXRlIHRoaXMuX2V2ZW50c1tuYW1lXTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBUcmlnZ2VyIG9uZSBvciBtYW55IGV2ZW50cywgZmlyaW5nIGFsbCBib3VuZCBjYWxsYmFja3MuIENhbGxiYWNrcyBhcmUKICAgIC8vIHBhc3NlZCB0aGUgc2FtZSBhcmd1bWVudHMgYXMgYHRyaWdnZXJgIGlzLCBhcGFydCBmcm9tIHRoZSBldmVudCBuYW1lCiAgICAvLyAodW5sZXNzIHlvdSdyZSBsaXN0ZW5pbmcgb24gYCJhbGwiYCwgd2hpY2ggd2lsbCBjYXVzZSB5b3VyIGNhbGxiYWNrIHRvCiAgICAvLyByZWNlaXZlIHRoZSB0cnVlIG5hbWUgb2YgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBhcmd1bWVudCkuCiAgICB0cmlnZ2VyOiBmdW5jdGlvbihuYW1lKSB7CiAgICAgIGlmICghdGhpcy5fZXZlbnRzKSByZXR1cm4gdGhpczsKICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgIGlmICghZXZlbnRzQXBpKHRoaXMsICd0cmlnZ2VyJywgbmFtZSwgYXJncykpIHJldHVybiB0aGlzOwogICAgICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzW25hbWVdOwogICAgICB2YXIgYWxsRXZlbnRzID0gdGhpcy5fZXZlbnRzLmFsbDsKICAgICAgaWYgKGV2ZW50cykgdHJpZ2dlckV2ZW50cyhldmVudHMsIGFyZ3MpOwogICAgICBpZiAoYWxsRXZlbnRzKSB0cmlnZ2VyRXZlbnRzKGFsbEV2ZW50cywgYXJndW1lbnRzKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFRlbGwgdGhpcyBvYmplY3QgdG8gc3RvcCBsaXN0ZW5pbmcgdG8gZWl0aGVyIHNwZWNpZmljIGV2ZW50cyAuLi4gb3IKICAgIC8vIHRvIGV2ZXJ5IG9iamVjdCBpdCdzIGN1cnJlbnRseSBsaXN0ZW5pbmcgdG8uCiAgICBzdG9wTGlzdGVuaW5nOiBmdW5jdGlvbihvYmosIG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgIHZhciBsaXN0ZW5pbmdUbyA9IHRoaXMuX2xpc3RlbmluZ1RvOwogICAgICBpZiAoIWxpc3RlbmluZ1RvKSByZXR1cm4gdGhpczsKICAgICAgdmFyIHJlbW92ZSA9ICFuYW1lICYmICFjYWxsYmFjazsKICAgICAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIGNhbGxiYWNrID0gdGhpczsKICAgICAgaWYgKG9iaikgKGxpc3RlbmluZ1RvID0ge30pW29iai5fbGlzdGVuSWRdID0gb2JqOwogICAgICBmb3IgKHZhciBpZCBpbiBsaXN0ZW5pbmdUbykgewogICAgICAgIG9iaiA9IGxpc3RlbmluZ1RvW2lkXTsKICAgICAgICBvYmoub2ZmKG5hbWUsIGNhbGxiYWNrLCB0aGlzKTsKICAgICAgICBpZiAocmVtb3ZlIHx8IF8uaXNFbXB0eShvYmouX2V2ZW50cykpIGRlbGV0ZSB0aGlzLl9saXN0ZW5pbmdUb1tpZF07CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogIH07CgogIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHNwbGl0IGV2ZW50IHN0cmluZ3MuCiAgdmFyIGV2ZW50U3BsaXR0ZXIgPSAvXHMrLzsKCiAgLy8gSW1wbGVtZW50IGZhbmN5IGZlYXR1cmVzIG9mIHRoZSBFdmVudHMgQVBJIHN1Y2ggYXMgbXVsdGlwbGUgZXZlbnQKICAvLyBuYW1lcyBgImNoYW5nZSBibHVyImAgYW5kIGpRdWVyeS1zdHlsZSBldmVudCBtYXBzIGB7Y2hhbmdlOiBhY3Rpb259YAogIC8vIGluIHRlcm1zIG9mIHRoZSBleGlzdGluZyBBUEkuCiAgdmFyIGV2ZW50c0FwaSA9IGZ1bmN0aW9uKG9iaiwgYWN0aW9uLCBuYW1lLCByZXN0KSB7CiAgICBpZiAoIW5hbWUpIHJldHVybiB0cnVlOwoKICAgIC8vIEhhbmRsZSBldmVudCBtYXBzLgogICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JykgewogICAgICBmb3IgKHZhciBrZXkgaW4gbmFtZSkgewogICAgICAgIG9ialthY3Rpb25dLmFwcGx5KG9iaiwgW2tleSwgbmFtZVtrZXldXS5jb25jYXQocmVzdCkpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvLyBIYW5kbGUgc3BhY2Ugc2VwYXJhdGVkIGV2ZW50IG5hbWVzLgogICAgaWYgKGV2ZW50U3BsaXR0ZXIudGVzdChuYW1lKSkgewogICAgICB2YXIgbmFtZXMgPSBuYW1lLnNwbGl0KGV2ZW50U3BsaXR0ZXIpOwogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIG9ialthY3Rpb25dLmFwcGx5KG9iaiwgW25hbWVzW2ldXS5jb25jYXQocmVzdCkpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICByZXR1cm4gdHJ1ZTsKICB9OwoKICAvLyBBIGRpZmZpY3VsdC10by1iZWxpZXZlLCBidXQgb3B0aW1pemVkIGludGVybmFsIGRpc3BhdGNoIGZ1bmN0aW9uIGZvcgogIC8vIHRyaWdnZXJpbmcgZXZlbnRzLiBUcmllcyB0byBrZWVwIHRoZSB1c3VhbCBjYXNlcyBzcGVlZHkgKG1vc3QgaW50ZXJuYWwKICAvLyBCYWNrYm9uZSBldmVudHMgaGF2ZSAzIGFyZ3VtZW50cykuCiAgdmFyIHRyaWdnZXJFdmVudHMgPSBmdW5jdGlvbihldmVudHMsIGFyZ3MpIHsKICAgIHZhciBldiwgaSA9IC0xLCBsID0gZXZlbnRzLmxlbmd0aCwgYTEgPSBhcmdzWzBdLCBhMiA9IGFyZ3NbMV0sIGEzID0gYXJnc1syXTsKICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHsKICAgICAgY2FzZSAwOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCk7IHJldHVybjsKICAgICAgY2FzZSAxOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEpOyByZXR1cm47CiAgICAgIGNhc2UgMjogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgsIGExLCBhMik7IHJldHVybjsKICAgICAgY2FzZSAzOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEsIGEyLCBhMyk7IHJldHVybjsKICAgICAgZGVmYXVsdDogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suYXBwbHkoZXYuY3R4LCBhcmdzKTsgcmV0dXJuOwogICAgfQogIH07CgogIHZhciBsaXN0ZW5NZXRob2RzID0ge2xpc3RlblRvOiAnb24nLCBsaXN0ZW5Ub09uY2U6ICdvbmNlJ307CgogIC8vIEludmVyc2lvbi1vZi1jb250cm9sIHZlcnNpb25zIG9mIGBvbmAgYW5kIGBvbmNlYC4gVGVsbCAqdGhpcyogb2JqZWN0IHRvCiAgLy8gbGlzdGVuIHRvIGFuIGV2ZW50IGluIGFub3RoZXIgb2JqZWN0IC4uLiBrZWVwaW5nIHRyYWNrIG9mIHdoYXQgaXQncwogIC8vIGxpc3RlbmluZyB0by4KICBfLmVhY2gobGlzdGVuTWV0aG9kcywgZnVuY3Rpb24oaW1wbGVtZW50YXRpb24sIG1ldGhvZCkgewogICAgRXZlbnRzW21ldGhvZF0gPSBmdW5jdGlvbihvYmosIG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgIHZhciBsaXN0ZW5pbmdUbyA9IHRoaXMuX2xpc3RlbmluZ1RvIHx8ICh0aGlzLl9saXN0ZW5pbmdUbyA9IHt9KTsKICAgICAgdmFyIGlkID0gb2JqLl9saXN0ZW5JZCB8fCAob2JqLl9saXN0ZW5JZCA9IF8udW5pcXVlSWQoJ2wnKSk7CiAgICAgIGxpc3RlbmluZ1RvW2lkXSA9IG9iajsKICAgICAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIGNhbGxiYWNrID0gdGhpczsKICAgICAgb2JqW2ltcGxlbWVudGF0aW9uXShuYW1lLCBjYWxsYmFjaywgdGhpcyk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICB9KTsKCiAgLy8gQWxpYXNlcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuCiAgRXZlbnRzLmJpbmQgICA9IEV2ZW50cy5vbjsKICBFdmVudHMudW5iaW5kID0gRXZlbnRzLm9mZjsKCiAgLy8gQWxsb3cgdGhlIGBCYWNrYm9uZWAgb2JqZWN0IHRvIHNlcnZlIGFzIGEgZ2xvYmFsIGV2ZW50IGJ1cywgZm9yIGZvbGtzIHdobwogIC8vIHdhbnQgZ2xvYmFsICJwdWJzdWIiIGluIGEgY29udmVuaWVudCBwbGFjZS4KICBfLmV4dGVuZChCYWNrYm9uZSwgRXZlbnRzKTsKCiAgLy8gQmFja2JvbmUuTW9kZWwKICAvLyAtLS0tLS0tLS0tLS0tLQoKICAvLyBCYWNrYm9uZSAqKk1vZGVscyoqIGFyZSB0aGUgYmFzaWMgZGF0YSBvYmplY3QgaW4gdGhlIGZyYW1ld29yayAtLQogIC8vIGZyZXF1ZW50bHkgcmVwcmVzZW50aW5nIGEgcm93IGluIGEgdGFibGUgaW4gYSBkYXRhYmFzZSBvbiB5b3VyIHNlcnZlci4KICAvLyBBIGRpc2NyZXRlIGNodW5rIG9mIGRhdGEgYW5kIGEgYnVuY2ggb2YgdXNlZnVsLCByZWxhdGVkIG1ldGhvZHMgZm9yCiAgLy8gcGVyZm9ybWluZyBjb21wdXRhdGlvbnMgYW5kIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGF0IGRhdGEuCgogIC8vIENyZWF0ZSBhIG5ldyBtb2RlbCB3aXRoIHRoZSBzcGVjaWZpZWQgYXR0cmlidXRlcy4gQSBjbGllbnQgaWQgKGBjaWRgKQogIC8vIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGFuZCBhc3NpZ25lZCBmb3IgeW91LgogIHZhciBNb2RlbCA9IEJhY2tib25lLk1vZGVsID0gZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykgewogICAgdmFyIGF0dHJzID0gYXR0cmlidXRlcyB8fCB7fTsKICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICB0aGlzLmNpZCA9IF8udW5pcXVlSWQoJ2MnKTsKICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9OwogICAgaWYgKG9wdGlvbnMuY29sbGVjdGlvbikgdGhpcy5jb2xsZWN0aW9uID0gb3B0aW9ucy5jb2xsZWN0aW9uOwogICAgaWYgKG9wdGlvbnMucGFyc2UpIGF0dHJzID0gdGhpcy5wYXJzZShhdHRycywgb3B0aW9ucykgfHwge307CiAgICBhdHRycyA9IF8uZGVmYXVsdHMoe30sIGF0dHJzLCBfLnJlc3VsdCh0aGlzLCAnZGVmYXVsdHMnKSk7CiAgICB0aGlzLnNldChhdHRycywgb3B0aW9ucyk7CiAgICB0aGlzLmNoYW5nZWQgPSB7fTsKICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07CgogIC8vIEF0dGFjaCBhbGwgaW5oZXJpdGFibGUgbWV0aG9kcyB0byB0aGUgTW9kZWwgcHJvdG90eXBlLgogIF8uZXh0ZW5kKE1vZGVsLnByb3RvdHlwZSwgRXZlbnRzLCB7CgogICAgLy8gQSBoYXNoIG9mIGF0dHJpYnV0ZXMgd2hvc2UgY3VycmVudCBhbmQgcHJldmlvdXMgdmFsdWUgZGlmZmVyLgogICAgY2hhbmdlZDogbnVsbCwKCiAgICAvLyBUaGUgdmFsdWUgcmV0dXJuZWQgZHVyaW5nIHRoZSBsYXN0IGZhaWxlZCB2YWxpZGF0aW9uLgogICAgdmFsaWRhdGlvbkVycm9yOiBudWxsLAoKICAgIC8vIFRoZSBkZWZhdWx0IG5hbWUgZm9yIHRoZSBKU09OIGBpZGAgYXR0cmlidXRlIGlzIGAiaWQiYC4gTW9uZ29EQiBhbmQKICAgIC8vIENvdWNoREIgdXNlcnMgbWF5IHdhbnQgdG8gc2V0IHRoaXMgdG8gYCJfaWQiYC4KICAgIGlkQXR0cmlidXRlOiAnaWQnLAoKICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sCgogICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgbW9kZWwncyBgYXR0cmlidXRlc2Agb2JqZWN0LgogICAgdG9KU09OOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHJldHVybiBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7CiAgICB9LAoKICAgIC8vIFByb3h5IGBCYWNrYm9uZS5zeW5jYCBieSBkZWZhdWx0IC0tIGJ1dCBvdmVycmlkZSB0aGlzIGlmIHlvdSBuZWVkCiAgICAvLyBjdXN0b20gc3luY2luZyBzZW1hbnRpY3MgZm9yICp0aGlzKiBwYXJ0aWN1bGFyIG1vZGVsLgogICAgc3luYzogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBCYWNrYm9uZS5zeW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9LAoKICAgIC8vIEdldCB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlLgogICAgZ2V0OiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbYXR0cl07CiAgICB9LAoKICAgIC8vIEdldCB0aGUgSFRNTC1lc2NhcGVkIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZS4KICAgIGVzY2FwZTogZnVuY3Rpb24oYXR0cikgewogICAgICByZXR1cm4gXy5lc2NhcGUodGhpcy5nZXQoYXR0cikpOwogICAgfSwKCiAgICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXR0cmlidXRlIGNvbnRhaW5zIGEgdmFsdWUgdGhhdCBpcyBub3QgbnVsbAogICAgLy8gb3IgdW5kZWZpbmVkLgogICAgaGFzOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIHJldHVybiB0aGlzLmdldChhdHRyKSAhPSBudWxsOwogICAgfSwKCiAgICAvLyBTZXQgYSBoYXNoIG9mIG1vZGVsIGF0dHJpYnV0ZXMgb24gdGhlIG9iamVjdCwgZmlyaW5nIGAiY2hhbmdlImAuIFRoaXMgaXMKICAgIC8vIHRoZSBjb3JlIHByaW1pdGl2ZSBvcGVyYXRpb24gb2YgYSBtb2RlbCwgdXBkYXRpbmcgdGhlIGRhdGEgYW5kIG5vdGlmeWluZwogICAgLy8gYW55b25lIHdobyBuZWVkcyB0byBrbm93IGFib3V0IHRoZSBjaGFuZ2UgaW4gc3RhdGUuIFRoZSBoZWFydCBvZiB0aGUgYmVhc3QuCiAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsLCBvcHRpb25zKSB7CiAgICAgIHZhciBhdHRyLCBhdHRycywgdW5zZXQsIGNoYW5nZXMsIHNpbGVudCwgY2hhbmdpbmcsIHByZXYsIGN1cnJlbnQ7CiAgICAgIGlmIChrZXkgPT0gbnVsbCkgcmV0dXJuIHRoaXM7CgogICAgICAvLyBIYW5kbGUgYm90aCBgImtleSIsIHZhbHVlYCBhbmQgYHtrZXk6IHZhbHVlfWAgLXN0eWxlIGFyZ3VtZW50cy4KICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgYXR0cnMgPSBrZXk7CiAgICAgICAgb3B0aW9ucyA9IHZhbDsKICAgICAgfSBlbHNlIHsKICAgICAgICAoYXR0cnMgPSB7fSlba2V5XSA9IHZhbDsKICAgICAgfQoKICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKCiAgICAgIC8vIFJ1biB2YWxpZGF0aW9uLgogICAgICBpZiAoIXRoaXMuX3ZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlOwoKICAgICAgLy8gRXh0cmFjdCBhdHRyaWJ1dGVzIGFuZCBvcHRpb25zLgogICAgICB1bnNldCAgICAgICAgICAgPSBvcHRpb25zLnVuc2V0OwogICAgICBzaWxlbnQgICAgICAgICAgPSBvcHRpb25zLnNpbGVudDsKICAgICAgY2hhbmdlcyAgICAgICAgID0gW107CiAgICAgIGNoYW5naW5nICAgICAgICA9IHRoaXMuX2NoYW5naW5nOwogICAgICB0aGlzLl9jaGFuZ2luZyAgPSB0cnVlOwoKICAgICAgaWYgKCFjaGFuZ2luZykgewogICAgICAgIHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA9IF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTsKICAgICAgICB0aGlzLmNoYW5nZWQgPSB7fTsKICAgICAgfQogICAgICBjdXJyZW50ID0gdGhpcy5hdHRyaWJ1dGVzLCBwcmV2ID0gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzOwoKICAgICAgLy8gQ2hlY2sgZm9yIGNoYW5nZXMgb2YgYGlkYC4KICAgICAgaWYgKHRoaXMuaWRBdHRyaWJ1dGUgaW4gYXR0cnMpIHRoaXMuaWQgPSBhdHRyc1t0aGlzLmlkQXR0cmlidXRlXTsKCiAgICAgIC8vIEZvciBlYWNoIGBzZXRgIGF0dHJpYnV0ZSwgdXBkYXRlIG9yIGRlbGV0ZSB0aGUgY3VycmVudCB2YWx1ZS4KICAgICAgZm9yIChhdHRyIGluIGF0dHJzKSB7CiAgICAgICAgdmFsID0gYXR0cnNbYXR0cl07CiAgICAgICAgaWYgKCFfLmlzRXF1YWwoY3VycmVudFthdHRyXSwgdmFsKSkgY2hhbmdlcy5wdXNoKGF0dHIpOwogICAgICAgIGlmICghXy5pc0VxdWFsKHByZXZbYXR0cl0sIHZhbCkpIHsKICAgICAgICAgIHRoaXMuY2hhbmdlZFthdHRyXSA9IHZhbDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVsZXRlIHRoaXMuY2hhbmdlZFthdHRyXTsKICAgICAgICB9CiAgICAgICAgdW5zZXQgPyBkZWxldGUgY3VycmVudFthdHRyXSA6IGN1cnJlbnRbYXR0cl0gPSB2YWw7CiAgICAgIH0KCiAgICAgIC8vIFRyaWdnZXIgYWxsIHJlbGV2YW50IGF0dHJpYnV0ZSBjaGFuZ2VzLgogICAgICBpZiAoIXNpbGVudCkgewogICAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCkgdGhpcy5fcGVuZGluZyA9IG9wdGlvbnM7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGFuZ2VzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgdGhpcy50cmlnZ2VyKCdjaGFuZ2U6JyArIGNoYW5nZXNbaV0sIHRoaXMsIGN1cnJlbnRbY2hhbmdlc1tpXV0sIG9wdGlvbnMpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gWW91IG1pZ2h0IGJlIHdvbmRlcmluZyB3aHkgdGhlcmUncyBhIGB3aGlsZWAgbG9vcCBoZXJlLiBDaGFuZ2VzIGNhbgogICAgICAvLyBiZSByZWN1cnNpdmVseSBuZXN0ZWQgd2l0aGluIGAiY2hhbmdlImAgZXZlbnRzLgogICAgICBpZiAoY2hhbmdpbmcpIHJldHVybiB0aGlzOwogICAgICBpZiAoIXNpbGVudCkgewogICAgICAgIHdoaWxlICh0aGlzLl9wZW5kaW5nKSB7CiAgICAgICAgICBvcHRpb25zID0gdGhpcy5fcGVuZGluZzsKICAgICAgICAgIHRoaXMuX3BlbmRpbmcgPSBmYWxzZTsKICAgICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlJywgdGhpcywgb3B0aW9ucyk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuX3BlbmRpbmcgPSBmYWxzZTsKICAgICAgdGhpcy5fY2hhbmdpbmcgPSBmYWxzZTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFJlbW92ZSBhbiBhdHRyaWJ1dGUgZnJvbSB0aGUgbW9kZWwsIGZpcmluZyBgImNoYW5nZSJgLiBgdW5zZXRgIGlzIGEgbm9vcAogICAgLy8gaWYgdGhlIGF0dHJpYnV0ZSBkb2Vzbid0IGV4aXN0LgogICAgdW5zZXQ6IGZ1bmN0aW9uKGF0dHIsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIHRoaXMuc2V0KGF0dHIsIHZvaWQgMCwgXy5leHRlbmQoe30sIG9wdGlvbnMsIHt1bnNldDogdHJ1ZX0pKTsKICAgIH0sCgogICAgLy8gQ2xlYXIgYWxsIGF0dHJpYnV0ZXMgb24gdGhlIG1vZGVsLCBmaXJpbmcgYCJjaGFuZ2UiYC4KICAgIGNsZWFyOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHZhciBhdHRycyA9IHt9OwogICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5hdHRyaWJ1dGVzKSBhdHRyc1trZXldID0gdm9pZCAwOwogICAgICByZXR1cm4gdGhpcy5zZXQoYXR0cnMsIF8uZXh0ZW5kKHt9LCBvcHRpb25zLCB7dW5zZXQ6IHRydWV9KSk7CiAgICB9LAoKICAgIC8vIERldGVybWluZSBpZiB0aGUgbW9kZWwgaGFzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgYCJjaGFuZ2UiYCBldmVudC4KICAgIC8vIElmIHlvdSBzcGVjaWZ5IGFuIGF0dHJpYnV0ZSBuYW1lLCBkZXRlcm1pbmUgaWYgdGhhdCBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQuCiAgICBoYXNDaGFuZ2VkOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIGlmIChhdHRyID09IG51bGwpIHJldHVybiAhXy5pc0VtcHR5KHRoaXMuY2hhbmdlZCk7CiAgICAgIHJldHVybiBfLmhhcyh0aGlzLmNoYW5nZWQsIGF0dHIpOwogICAgfSwKCiAgICAvLyBSZXR1cm4gYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBhdHRyaWJ1dGVzIHRoYXQgaGF2ZSBjaGFuZ2VkLCBvcgogICAgLy8gZmFsc2UgaWYgdGhlcmUgYXJlIG5vIGNoYW5nZWQgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBkZXRlcm1pbmluZyB3aGF0CiAgICAvLyBwYXJ0cyBvZiBhIHZpZXcgbmVlZCB0byBiZSB1cGRhdGVkIGFuZC9vciB3aGF0IGF0dHJpYnV0ZXMgbmVlZCB0byBiZQogICAgLy8gcGVyc2lzdGVkIHRvIHRoZSBzZXJ2ZXIuIFVuc2V0IGF0dHJpYnV0ZXMgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogICAgLy8gWW91IGNhbiBhbHNvIHBhc3MgYW4gYXR0cmlidXRlcyBvYmplY3QgdG8gZGlmZiBhZ2FpbnN0IHRoZSBtb2RlbCwKICAgIC8vIGRldGVybWluaW5nIGlmIHRoZXJlICp3b3VsZCBiZSogYSBjaGFuZ2UuCiAgICBjaGFuZ2VkQXR0cmlidXRlczogZnVuY3Rpb24oZGlmZikgewogICAgICBpZiAoIWRpZmYpIHJldHVybiB0aGlzLmhhc0NoYW5nZWQoKSA/IF8uY2xvbmUodGhpcy5jaGFuZ2VkKSA6IGZhbHNlOwogICAgICB2YXIgdmFsLCBjaGFuZ2VkID0gZmFsc2U7CiAgICAgIHZhciBvbGQgPSB0aGlzLl9jaGFuZ2luZyA/IHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA6IHRoaXMuYXR0cmlidXRlczsKICAgICAgZm9yICh2YXIgYXR0ciBpbiBkaWZmKSB7CiAgICAgICAgaWYgKF8uaXNFcXVhbChvbGRbYXR0cl0sICh2YWwgPSBkaWZmW2F0dHJdKSkpIGNvbnRpbnVlOwogICAgICAgIChjaGFuZ2VkIHx8IChjaGFuZ2VkID0ge30pKVthdHRyXSA9IHZhbDsKICAgICAgfQogICAgICByZXR1cm4gY2hhbmdlZDsKICAgIH0sCgogICAgLy8gR2V0IHRoZSBwcmV2aW91cyB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUsIHJlY29yZGVkIGF0IHRoZSB0aW1lIHRoZSBsYXN0CiAgICAvLyBgImNoYW5nZSJgIGV2ZW50IHdhcyBmaXJlZC4KICAgIHByZXZpb3VzOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIGlmIChhdHRyID09IG51bGwgfHwgIXRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcykgcmV0dXJuIG51bGw7CiAgICAgIHJldHVybiB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXNbYXR0cl07CiAgICB9LAoKICAgIC8vIEdldCBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIG1vZGVsIGF0IHRoZSB0aW1lIG9mIHRoZSBwcmV2aW91cwogICAgLy8gYCJjaGFuZ2UiYCBldmVudC4KICAgIHByZXZpb3VzQXR0cmlidXRlczogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBfLmNsb25lKHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyk7CiAgICB9LAoKICAgIC8vIEZldGNoIHRoZSBtb2RlbCBmcm9tIHRoZSBzZXJ2ZXIuIElmIHRoZSBzZXJ2ZXIncyByZXByZXNlbnRhdGlvbiBvZiB0aGUKICAgIC8vIG1vZGVsIGRpZmZlcnMgZnJvbSBpdHMgY3VycmVudCBhdHRyaWJ1dGVzLCB0aGV5IHdpbGwgYmUgb3ZlcnJpZGRlbiwKICAgIC8vIHRyaWdnZXJpbmcgYSBgImNoYW5nZSJgIGV2ZW50LgogICAgZmV0Y2g6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307CiAgICAgIGlmIChvcHRpb25zLnBhcnNlID09PSB2b2lkIDApIG9wdGlvbnMucGFyc2UgPSB0cnVlOwogICAgICB2YXIgbW9kZWwgPSB0aGlzOwogICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzczsKICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24ocmVzcCkgewogICAgICAgIGlmICghbW9kZWwuc2V0KG1vZGVsLnBhcnNlKHJlc3AsIG9wdGlvbnMpLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgICBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICB9OwogICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7CiAgICAgIHJldHVybiB0aGlzLnN5bmMoJ3JlYWQnLCB0aGlzLCBvcHRpb25zKTsKICAgIH0sCgogICAgLy8gU2V0IGEgaGFzaCBvZiBtb2RlbCBhdHRyaWJ1dGVzLCBhbmQgc3luYyB0aGUgbW9kZWwgdG8gdGhlIHNlcnZlci4KICAgIC8vIElmIHRoZSBzZXJ2ZXIgcmV0dXJucyBhbiBhdHRyaWJ1dGVzIGhhc2ggdGhhdCBkaWZmZXJzLCB0aGUgbW9kZWwncwogICAgLy8gc3RhdGUgd2lsbCBiZSBgc2V0YCBhZ2Fpbi4KICAgIHNhdmU6IGZ1bmN0aW9uKGtleSwgdmFsLCBvcHRpb25zKSB7CiAgICAgIHZhciBhdHRycywgbWV0aG9kLCB4aHIsIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7CgogICAgICAvLyBIYW5kbGUgYm90aCBgImtleSIsIHZhbHVlYCBhbmQgYHtrZXk6IHZhbHVlfWAgLXN0eWxlIGFyZ3VtZW50cy4KICAgICAgaWYgKGtleSA9PSBudWxsIHx8IHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgYXR0cnMgPSBrZXk7CiAgICAgICAgb3B0aW9ucyA9IHZhbDsKICAgICAgfSBlbHNlIHsKICAgICAgICAoYXR0cnMgPSB7fSlba2V5XSA9IHZhbDsKICAgICAgfQoKICAgICAgb3B0aW9ucyA9IF8uZXh0ZW5kKHt2YWxpZGF0ZTogdHJ1ZX0sIG9wdGlvbnMpOwoKICAgICAgLy8gSWYgd2UncmUgbm90IHdhaXRpbmcgYW5kIGF0dHJpYnV0ZXMgZXhpc3QsIHNhdmUgYWN0cyBhcwogICAgICAvLyBgc2V0KGF0dHIpLnNhdmUobnVsbCwgb3B0cylgIHdpdGggdmFsaWRhdGlvbi4gT3RoZXJ3aXNlLCBjaGVjayBpZgogICAgICAvLyB0aGUgbW9kZWwgd2lsbCBiZSB2YWxpZCB3aGVuIHRoZSBhdHRyaWJ1dGVzLCBpZiBhbnksIGFyZSBzZXQuCiAgICAgIGlmIChhdHRycyAmJiAhb3B0aW9ucy53YWl0KSB7CiAgICAgICAgaWYgKCF0aGlzLnNldChhdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoIXRoaXMuX3ZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICAvLyBTZXQgdGVtcG9yYXJ5IGF0dHJpYnV0ZXMgaWYgYHt3YWl0OiB0cnVlfWAuCiAgICAgIGlmIChhdHRycyAmJiBvcHRpb25zLndhaXQpIHsKICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBfLmV4dGVuZCh7fSwgYXR0cmlidXRlcywgYXR0cnMpOwogICAgICB9CgogICAgICAvLyBBZnRlciBhIHN1Y2Nlc3NmdWwgc2VydmVyLXNpZGUgc2F2ZSwgdGhlIGNsaWVudCBpcyAob3B0aW9uYWxseSkKICAgICAgLy8gdXBkYXRlZCB3aXRoIHRoZSBzZXJ2ZXItc2lkZSBzdGF0ZS4KICAgICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHZvaWQgMCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7CiAgICAgIHZhciBtb2RlbCA9IHRoaXM7CiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzOwogICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7CiAgICAgICAgLy8gRW5zdXJlIGF0dHJpYnV0ZXMgYXJlIHJlc3RvcmVkIGR1cmluZyBzeW5jaHJvbm91cyBzYXZlcy4KICAgICAgICBtb2RlbC5hdHRyaWJ1dGVzID0gYXR0cmlidXRlczsKICAgICAgICB2YXIgc2VydmVyQXR0cnMgPSBtb2RlbC5wYXJzZShyZXNwLCBvcHRpb25zKTsKICAgICAgICBpZiAob3B0aW9ucy53YWl0KSBzZXJ2ZXJBdHRycyA9IF8uZXh0ZW5kKGF0dHJzIHx8IHt9LCBzZXJ2ZXJBdHRycyk7CiAgICAgICAgaWYgKF8uaXNPYmplY3Qoc2VydmVyQXR0cnMpICYmICFtb2RlbC5zZXQoc2VydmVyQXR0cnMsIG9wdGlvbnMpKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgICBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICB9OwogICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7CgogICAgICBtZXRob2QgPSB0aGlzLmlzTmV3KCkgPyAnY3JlYXRlJyA6IChvcHRpb25zLnBhdGNoID8gJ3BhdGNoJyA6ICd1cGRhdGUnKTsKICAgICAgaWYgKG1ldGhvZCA9PT0gJ3BhdGNoJykgb3B0aW9ucy5hdHRycyA9IGF0dHJzOwogICAgICB4aHIgPSB0aGlzLnN5bmMobWV0aG9kLCB0aGlzLCBvcHRpb25zKTsKCiAgICAgIC8vIFJlc3RvcmUgYXR0cmlidXRlcy4KICAgICAgaWYgKGF0dHJzICYmIG9wdGlvbnMud2FpdCkgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlczsKCiAgICAgIHJldHVybiB4aHI7CiAgICB9LAoKICAgIC8vIERlc3Ryb3kgdGhpcyBtb2RlbCBvbiB0aGUgc2VydmVyIGlmIGl0IHdhcyBhbHJlYWR5IHBlcnNpc3RlZC4KICAgIC8vIE9wdGltaXN0aWNhbGx5IHJlbW92ZXMgdGhlIG1vZGVsIGZyb20gaXRzIGNvbGxlY3Rpb24sIGlmIGl0IGhhcyBvbmUuCiAgICAvLyBJZiBgd2FpdDogdHJ1ZWAgaXMgcGFzc2VkLCB3YWl0cyBmb3IgdGhlIHNlcnZlciB0byByZXNwb25kIGJlZm9yZSByZW1vdmFsLgogICAgZGVzdHJveTogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTsKICAgICAgdmFyIG1vZGVsID0gdGhpczsKICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7CgogICAgICB2YXIgZGVzdHJveSA9IGZ1bmN0aW9uKCkgewogICAgICAgIG1vZGVsLnRyaWdnZXIoJ2Rlc3Ryb3knLCBtb2RlbCwgbW9kZWwuY29sbGVjdGlvbiwgb3B0aW9ucyk7CiAgICAgIH07CgogICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7CiAgICAgICAgaWYgKG9wdGlvbnMud2FpdCB8fCBtb2RlbC5pc05ldygpKSBkZXN0cm95KCk7CiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICAgIGlmICghbW9kZWwuaXNOZXcoKSkgbW9kZWwudHJpZ2dlcignc3luYycsIG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgfTsKCiAgICAgIGlmICh0aGlzLmlzTmV3KCkpIHsKICAgICAgICBvcHRpb25zLnN1Y2Nlc3MoKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgd3JhcEVycm9yKHRoaXMsIG9wdGlvbnMpOwoKICAgICAgdmFyIHhociA9IHRoaXMuc3luYygnZGVsZXRlJywgdGhpcywgb3B0aW9ucyk7CiAgICAgIGlmICghb3B0aW9ucy53YWl0KSBkZXN0cm95KCk7CiAgICAgIHJldHVybiB4aHI7CiAgICB9LAoKICAgIC8vIERlZmF1bHQgVVJMIGZvciB0aGUgbW9kZWwncyByZXByZXNlbnRhdGlvbiBvbiB0aGUgc2VydmVyIC0tIGlmIHlvdSdyZQogICAgLy8gdXNpbmcgQmFja2JvbmUncyByZXN0ZnVsIG1ldGhvZHMsIG92ZXJyaWRlIHRoaXMgdG8gY2hhbmdlIHRoZSBlbmRwb2ludAogICAgLy8gdGhhdCB3aWxsIGJlIGNhbGxlZC4KICAgIHVybDogZnVuY3Rpb24oKSB7CiAgICAgIHZhciBiYXNlID0KICAgICAgICBfLnJlc3VsdCh0aGlzLCAndXJsUm9vdCcpIHx8CiAgICAgICAgXy5yZXN1bHQodGhpcy5jb2xsZWN0aW9uLCAndXJsJykgfHwKICAgICAgICB1cmxFcnJvcigpOwogICAgICBpZiAodGhpcy5pc05ldygpKSByZXR1cm4gYmFzZTsKICAgICAgcmV0dXJuIGJhc2UucmVwbGFjZSgvKFteXC9dKSQvLCAnJDEvJykgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5pZCk7CiAgICB9LAoKICAgIC8vICoqcGFyc2UqKiBjb252ZXJ0cyBhIHJlc3BvbnNlIGludG8gdGhlIGhhc2ggb2YgYXR0cmlidXRlcyB0byBiZSBgc2V0YCBvbgogICAgLy8gdGhlIG1vZGVsLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBqdXN0IHRvIHBhc3MgdGhlIHJlc3BvbnNlIGFsb25nLgogICAgcGFyc2U6IGZ1bmN0aW9uKHJlc3AsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIHJlc3A7CiAgICB9LAoKICAgIC8vIENyZWF0ZSBhIG5ldyBtb2RlbCB3aXRoIGlkZW50aWNhbCBhdHRyaWJ1dGVzIHRvIHRoaXMgb25lLgogICAgY2xvbmU6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5hdHRyaWJ1dGVzKTsKICAgIH0sCgogICAgLy8gQSBtb2RlbCBpcyBuZXcgaWYgaXQgaGFzIG5ldmVyIGJlZW4gc2F2ZWQgdG8gdGhlIHNlcnZlciwgYW5kIGxhY2tzIGFuIGlkLgogICAgaXNOZXc6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gIXRoaXMuaGFzKHRoaXMuaWRBdHRyaWJ1dGUpOwogICAgfSwKCiAgICAvLyBDaGVjayBpZiB0aGUgbW9kZWwgaXMgY3VycmVudGx5IGluIGEgdmFsaWQgc3RhdGUuCiAgICBpc1ZhbGlkOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZSh7fSwgXy5leHRlbmQob3B0aW9ucyB8fCB7fSwgeyB2YWxpZGF0ZTogdHJ1ZSB9KSk7CiAgICB9LAoKICAgIC8vIFJ1biB2YWxpZGF0aW9uIGFnYWluc3QgdGhlIG5leHQgY29tcGxldGUgc2V0IG9mIG1vZGVsIGF0dHJpYnV0ZXMsCiAgICAvLyByZXR1cm5pbmcgYHRydWVgIGlmIGFsbCBpcyB3ZWxsLiBPdGhlcndpc2UsIGZpcmUgYW4gYCJpbnZhbGlkImAgZXZlbnQuCiAgICBfdmFsaWRhdGU6IGZ1bmN0aW9uKGF0dHJzLCBvcHRpb25zKSB7CiAgICAgIGlmICghb3B0aW9ucy52YWxpZGF0ZSB8fCAhdGhpcy52YWxpZGF0ZSkgcmV0dXJuIHRydWU7CiAgICAgIGF0dHJzID0gXy5leHRlbmQoe30sIHRoaXMuYXR0cmlidXRlcywgYXR0cnMpOwogICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRpb25FcnJvciA9IHRoaXMudmFsaWRhdGUoYXR0cnMsIG9wdGlvbnMpIHx8IG51bGw7CiAgICAgIGlmICghZXJyb3IpIHJldHVybiB0cnVlOwogICAgICB0aGlzLnRyaWdnZXIoJ2ludmFsaWQnLCB0aGlzLCBlcnJvciwgXy5leHRlbmQob3B0aW9ucywge3ZhbGlkYXRpb25FcnJvcjogZXJyb3J9KSk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgfSk7CgogIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHdlIHdhbnQgdG8gaW1wbGVtZW50IG9uIHRoZSBNb2RlbC4KICB2YXIgbW9kZWxNZXRob2RzID0gWydrZXlzJywgJ3ZhbHVlcycsICdwYWlycycsICdpbnZlcnQnLCAncGljaycsICdvbWl0J107CgogIC8vIE1peCBpbiBlYWNoIFVuZGVyc2NvcmUgbWV0aG9kIGFzIGEgcHJveHkgdG8gYE1vZGVsI2F0dHJpYnV0ZXNgLgogIF8uZWFjaChtb2RlbE1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkgewogICAgTW9kZWwucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgIGFyZ3MudW5zaGlmdCh0aGlzLmF0dHJpYnV0ZXMpOwogICAgICByZXR1cm4gX1ttZXRob2RdLmFwcGx5KF8sIGFyZ3MpOwogICAgfTsKICB9KTsKCiAgLy8gQmFja2JvbmUuQ29sbGVjdGlvbgogIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gSWYgbW9kZWxzIHRlbmQgdG8gcmVwcmVzZW50IGEgc2luZ2xlIHJvdyBvZiBkYXRhLCBhIEJhY2tib25lIENvbGxlY3Rpb24gaXMKICAvLyBtb3JlIGFuYWxhZ291cyB0byBhIHRhYmxlIGZ1bGwgb2YgZGF0YSAuLi4gb3IgYSBzbWFsbCBzbGljZSBvciBwYWdlIG9mIHRoYXQKICAvLyB0YWJsZSwgb3IgYSBjb2xsZWN0aW9uIG9mIHJvd3MgdGhhdCBiZWxvbmcgdG9nZXRoZXIgZm9yIGEgcGFydGljdWxhciByZWFzb24KICAvLyAtLSBhbGwgb2YgdGhlIG1lc3NhZ2VzIGluIHRoaXMgcGFydGljdWxhciBmb2xkZXIsIGFsbCBvZiB0aGUgZG9jdW1lbnRzCiAgLy8gYmVsb25naW5nIHRvIHRoaXMgcGFydGljdWxhciBhdXRob3IsIGFuZCBzbyBvbi4gQ29sbGVjdGlvbnMgbWFpbnRhaW4KICAvLyBpbmRleGVzIG9mIHRoZWlyIG1vZGVscywgYm90aCBpbiBvcmRlciwgYW5kIGZvciBsb29rdXAgYnkgYGlkYC4KCiAgLy8gQ3JlYXRlIGEgbmV3ICoqQ29sbGVjdGlvbioqLCBwZXJoYXBzIHRvIGNvbnRhaW4gYSBzcGVjaWZpYyB0eXBlIG9mIGBtb2RlbGAuCiAgLy8gSWYgYSBgY29tcGFyYXRvcmAgaXMgc3BlY2lmaWVkLCB0aGUgQ29sbGVjdGlvbiB3aWxsIG1haW50YWluCiAgLy8gaXRzIG1vZGVscyBpbiBzb3J0IG9yZGVyLCBhcyB0aGV5J3JlIGFkZGVkIGFuZCByZW1vdmVkLgogIHZhciBDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykgewogICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgIGlmIChvcHRpb25zLm1vZGVsKSB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDsKICAgIGlmIChvcHRpb25zLmNvbXBhcmF0b3IgIT09IHZvaWQgMCkgdGhpcy5jb21wYXJhdG9yID0gb3B0aW9ucy5jb21wYXJhdG9yOwogICAgdGhpcy5fcmVzZXQoKTsKICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgaWYgKG1vZGVscykgdGhpcy5yZXNldChtb2RlbHMsIF8uZXh0ZW5kKHtzaWxlbnQ6IHRydWV9LCBvcHRpb25zKSk7CiAgfTsKCiAgLy8gRGVmYXVsdCBvcHRpb25zIGZvciBgQ29sbGVjdGlvbiNzZXRgLgogIHZhciBzZXRPcHRpb25zID0ge2FkZDogdHJ1ZSwgcmVtb3ZlOiB0cnVlLCBtZXJnZTogdHJ1ZX07CiAgdmFyIGFkZE9wdGlvbnMgPSB7YWRkOiB0cnVlLCByZW1vdmU6IGZhbHNlfTsKCiAgLy8gRGVmaW5lIHRoZSBDb2xsZWN0aW9uJ3MgaW5oZXJpdGFibGUgbWV0aG9kcy4KICBfLmV4dGVuZChDb2xsZWN0aW9uLnByb3RvdHlwZSwgRXZlbnRzLCB7CgogICAgLy8gVGhlIGRlZmF1bHQgbW9kZWwgZm9yIGEgY29sbGVjdGlvbiBpcyBqdXN0IGEgKipCYWNrYm9uZS5Nb2RlbCoqLgogICAgLy8gVGhpcyBzaG91bGQgYmUgb3ZlcnJpZGRlbiBpbiBtb3N0IGNhc2VzLgogICAgbW9kZWw6IE1vZGVsLAoKICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sCgogICAgLy8gVGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYSBDb2xsZWN0aW9uIGlzIGFuIGFycmF5IG9mIHRoZQogICAgLy8gbW9kZWxzJyBhdHRyaWJ1dGVzLgogICAgdG9KU09OOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbihtb2RlbCl7IHJldHVybiBtb2RlbC50b0pTT04ob3B0aW9ucyk7IH0pOwogICAgfSwKCiAgICAvLyBQcm94eSBgQmFja2JvbmUuc3luY2AgYnkgZGVmYXVsdC4KICAgIHN5bmM6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gQmFja2JvbmUuc3luYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfSwKCiAgICAvLyBBZGQgYSBtb2RlbCwgb3IgbGlzdCBvZiBtb2RlbHMgdG8gdGhlIHNldC4KICAgIGFkZDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7CiAgICAgIHJldHVybiB0aGlzLnNldChtb2RlbHMsIF8uZXh0ZW5kKHttZXJnZTogZmFsc2V9LCBvcHRpb25zLCBhZGRPcHRpb25zKSk7CiAgICB9LAoKICAgIC8vIFJlbW92ZSBhIG1vZGVsLCBvciBhIGxpc3Qgb2YgbW9kZWxzIGZyb20gdGhlIHNldC4KICAgIHJlbW92ZTogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7CiAgICAgIHZhciBzaW5ndWxhciA9ICFfLmlzQXJyYXkobW9kZWxzKTsKICAgICAgbW9kZWxzID0gc2luZ3VsYXIgPyBbbW9kZWxzXSA6IF8uY2xvbmUobW9kZWxzKTsKICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgdmFyIGksIGwsIGluZGV4LCBtb2RlbDsKICAgICAgZm9yIChpID0gMCwgbCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICBtb2RlbCA9IG1vZGVsc1tpXSA9IHRoaXMuZ2V0KG1vZGVsc1tpXSk7CiAgICAgICAgaWYgKCFtb2RlbCkgY29udGludWU7CiAgICAgICAgZGVsZXRlIHRoaXMuX2J5SWRbbW9kZWwuaWRdOwogICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLmNpZF07CiAgICAgICAgaW5kZXggPSB0aGlzLmluZGV4T2YobW9kZWwpOwogICAgICAgIHRoaXMubW9kZWxzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgdGhpcy5sZW5ndGgtLTsKICAgICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB7CiAgICAgICAgICBvcHRpb25zLmluZGV4ID0gaW5kZXg7CiAgICAgICAgICBtb2RlbC50cmlnZ2VyKCdyZW1vdmUnLCBtb2RlbCwgdGhpcywgb3B0aW9ucyk7CiAgICAgICAgfQogICAgICAgIHRoaXMuX3JlbW92ZVJlZmVyZW5jZShtb2RlbCwgb3B0aW9ucyk7CiAgICAgIH0KICAgICAgcmV0dXJuIHNpbmd1bGFyID8gbW9kZWxzWzBdIDogbW9kZWxzOwogICAgfSwKCiAgICAvLyBVcGRhdGUgYSBjb2xsZWN0aW9uIGJ5IGBzZXRgLWluZyBhIG5ldyBsaXN0IG9mIG1vZGVscywgYWRkaW5nIG5ldyBvbmVzLAogICAgLy8gcmVtb3ZpbmcgbW9kZWxzIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LCBhbmQgbWVyZ2luZyBtb2RlbHMgdGhhdAogICAgLy8gYWxyZWFkeSBleGlzdCBpbiB0aGUgY29sbGVjdGlvbiwgYXMgbmVjZXNzYXJ5LiBTaW1pbGFyIHRvICoqTW9kZWwjc2V0KiosCiAgICAvLyB0aGUgY29yZSBvcGVyYXRpb24gZm9yIHVwZGF0aW5nIHRoZSBkYXRhIGNvbnRhaW5lZCBieSB0aGUgY29sbGVjdGlvbi4KICAgIHNldDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7CiAgICAgIG9wdGlvbnMgPSBfLmRlZmF1bHRzKHt9LCBvcHRpb25zLCBzZXRPcHRpb25zKTsKICAgICAgaWYgKG9wdGlvbnMucGFyc2UpIG1vZGVscyA9IHRoaXMucGFyc2UobW9kZWxzLCBvcHRpb25zKTsKICAgICAgdmFyIHNpbmd1bGFyID0gIV8uaXNBcnJheShtb2RlbHMpOwogICAgICBtb2RlbHMgPSBzaW5ndWxhciA/IChtb2RlbHMgPyBbbW9kZWxzXSA6IFtdKSA6IF8uY2xvbmUobW9kZWxzKTsKICAgICAgdmFyIGksIGwsIGlkLCBtb2RlbCwgYXR0cnMsIGV4aXN0aW5nLCBzb3J0OwogICAgICB2YXIgYXQgPSBvcHRpb25zLmF0OwogICAgICB2YXIgdGFyZ2V0TW9kZWwgPSB0aGlzLm1vZGVsOwogICAgICB2YXIgc29ydGFibGUgPSB0aGlzLmNvbXBhcmF0b3IgJiYgKGF0ID09IG51bGwpICYmIG9wdGlvbnMuc29ydCAhPT0gZmFsc2U7CiAgICAgIHZhciBzb3J0QXR0ciA9IF8uaXNTdHJpbmcodGhpcy5jb21wYXJhdG9yKSA/IHRoaXMuY29tcGFyYXRvciA6IG51bGw7CiAgICAgIHZhciB0b0FkZCA9IFtdLCB0b1JlbW92ZSA9IFtdLCBtb2RlbE1hcCA9IHt9OwogICAgICB2YXIgYWRkID0gb3B0aW9ucy5hZGQsIG1lcmdlID0gb3B0aW9ucy5tZXJnZSwgcmVtb3ZlID0gb3B0aW9ucy5yZW1vdmU7CiAgICAgIHZhciBvcmRlciA9ICFzb3J0YWJsZSAmJiBhZGQgJiYgcmVtb3ZlID8gW10gOiBmYWxzZTsKCiAgICAgIC8vIFR1cm4gYmFyZSBvYmplY3RzIGludG8gbW9kZWwgcmVmZXJlbmNlcywgYW5kIHByZXZlbnQgaW52YWxpZCBtb2RlbHMKICAgICAgLy8gZnJvbSBiZWluZyBhZGRlZC4KICAgICAgZm9yIChpID0gMCwgbCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICBhdHRycyA9IG1vZGVsc1tpXSB8fCB7fTsKICAgICAgICBpZiAoYXR0cnMgaW5zdGFuY2VvZiBNb2RlbCkgewogICAgICAgICAgaWQgPSBtb2RlbCA9IGF0dHJzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZCA9IGF0dHJzW3RhcmdldE1vZGVsLnByb3RvdHlwZS5pZEF0dHJpYnV0ZSB8fCAnaWQnXTsKICAgICAgICB9CgogICAgICAgIC8vIElmIGEgZHVwbGljYXRlIGlzIGZvdW5kLCBwcmV2ZW50IGl0IGZyb20gYmVpbmcgYWRkZWQgYW5kCiAgICAgICAgLy8gb3B0aW9uYWxseSBtZXJnZSBpdCBpbnRvIHRoZSBleGlzdGluZyBtb2RlbC4KICAgICAgICBpZiAoZXhpc3RpbmcgPSB0aGlzLmdldChpZCkpIHsKICAgICAgICAgIGlmIChyZW1vdmUpIG1vZGVsTWFwW2V4aXN0aW5nLmNpZF0gPSB0cnVlOwogICAgICAgICAgaWYgKG1lcmdlKSB7CiAgICAgICAgICAgIGF0dHJzID0gYXR0cnMgPT09IG1vZGVsID8gbW9kZWwuYXR0cmlidXRlcyA6IGF0dHJzOwogICAgICAgICAgICBpZiAob3B0aW9ucy5wYXJzZSkgYXR0cnMgPSBleGlzdGluZy5wYXJzZShhdHRycywgb3B0aW9ucyk7CiAgICAgICAgICAgIGV4aXN0aW5nLnNldChhdHRycywgb3B0aW9ucyk7CiAgICAgICAgICAgIGlmIChzb3J0YWJsZSAmJiAhc29ydCAmJiBleGlzdGluZy5oYXNDaGFuZ2VkKHNvcnRBdHRyKSkgc29ydCA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgICBtb2RlbHNbaV0gPSBleGlzdGluZzsKCiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIG5ldywgdmFsaWQgbW9kZWwsIHB1c2ggaXQgdG8gdGhlIGB0b0FkZGAgbGlzdC4KICAgICAgICB9IGVsc2UgaWYgKGFkZCkgewogICAgICAgICAgbW9kZWwgPSBtb2RlbHNbaV0gPSB0aGlzLl9wcmVwYXJlTW9kZWwoYXR0cnMsIG9wdGlvbnMpOwogICAgICAgICAgaWYgKCFtb2RlbCkgY29udGludWU7CiAgICAgICAgICB0b0FkZC5wdXNoKG1vZGVsKTsKICAgICAgICAgIHRoaXMuX2FkZFJlZmVyZW5jZShtb2RlbCwgb3B0aW9ucyk7CiAgICAgICAgfQoKICAgICAgICAvLyBEbyBub3QgYWRkIG11bHRpcGxlIG1vZGVscyB3aXRoIHRoZSBzYW1lIGBpZGAuCiAgICAgICAgbW9kZWwgPSBleGlzdGluZyB8fCBtb2RlbDsKICAgICAgICBpZiAob3JkZXIgJiYgKG1vZGVsLmlzTmV3KCkgfHwgIW1vZGVsTWFwW21vZGVsLmlkXSkpIG9yZGVyLnB1c2gobW9kZWwpOwogICAgICAgIG1vZGVsTWFwW21vZGVsLmlkXSA9IHRydWU7CiAgICAgIH0KCiAgICAgIC8vIFJlbW92ZSBub25leGlzdGVudCBtb2RlbHMgaWYgYXBwcm9wcmlhdGUuCiAgICAgIGlmIChyZW1vdmUpIHsKICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHsKICAgICAgICAgIGlmICghbW9kZWxNYXBbKG1vZGVsID0gdGhpcy5tb2RlbHNbaV0pLmNpZF0pIHRvUmVtb3ZlLnB1c2gobW9kZWwpOwogICAgICAgIH0KICAgICAgICBpZiAodG9SZW1vdmUubGVuZ3RoKSB0aGlzLnJlbW92ZSh0b1JlbW92ZSwgb3B0aW9ucyk7CiAgICAgIH0KCiAgICAgIC8vIFNlZSBpZiBzb3J0aW5nIGlzIG5lZWRlZCwgdXBkYXRlIGBsZW5ndGhgIGFuZCBzcGxpY2UgaW4gbmV3IG1vZGVscy4KICAgICAgaWYgKHRvQWRkLmxlbmd0aCB8fCAob3JkZXIgJiYgb3JkZXIubGVuZ3RoKSkgewogICAgICAgIGlmIChzb3J0YWJsZSkgc29ydCA9IHRydWU7CiAgICAgICAgdGhpcy5sZW5ndGggKz0gdG9BZGQubGVuZ3RoOwogICAgICAgIGlmIChhdCAhPSBudWxsKSB7CiAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdG9BZGQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgIHRoaXMubW9kZWxzLnNwbGljZShhdCArIGksIDAsIHRvQWRkW2ldKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKG9yZGVyKSB0aGlzLm1vZGVscy5sZW5ndGggPSAwOwogICAgICAgICAgdmFyIG9yZGVyZWRNb2RlbHMgPSBvcmRlciB8fCB0b0FkZDsKICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBvcmRlcmVkTW9kZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICB0aGlzLm1vZGVscy5wdXNoKG9yZGVyZWRNb2RlbHNbaV0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gU2lsZW50bHkgc29ydCB0aGUgY29sbGVjdGlvbiBpZiBhcHByb3ByaWF0ZS4KICAgICAgaWYgKHNvcnQpIHRoaXMuc29ydCh7c2lsZW50OiB0cnVlfSk7CgogICAgICAvLyBVbmxlc3Mgc2lsZW5jZWQsIGl0J3MgdGltZSB0byBmaXJlIGFsbCBhcHByb3ByaWF0ZSBhZGQvc29ydCBldmVudHMuCiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHsKICAgICAgICBmb3IgKGkgPSAwLCBsID0gdG9BZGQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAobW9kZWwgPSB0b0FkZFtpXSkudHJpZ2dlcignYWRkJywgbW9kZWwsIHRoaXMsIG9wdGlvbnMpOwogICAgICAgIH0KICAgICAgICBpZiAoc29ydCB8fCAob3JkZXIgJiYgb3JkZXIubGVuZ3RoKSkgdGhpcy50cmlnZ2VyKCdzb3J0JywgdGhpcywgb3B0aW9ucyk7CiAgICAgIH0KCiAgICAgIC8vIFJldHVybiB0aGUgYWRkZWQgKG9yIG1lcmdlZCkgbW9kZWwgKG9yIG1vZGVscykuCiAgICAgIHJldHVybiBzaW5ndWxhciA/IG1vZGVsc1swXSA6IG1vZGVsczsKICAgIH0sCgogICAgLy8gV2hlbiB5b3UgaGF2ZSBtb3JlIGl0ZW1zIHRoYW4geW91IHdhbnQgdG8gYWRkIG9yIHJlbW92ZSBpbmRpdmlkdWFsbHksCiAgICAvLyB5b3UgY2FuIHJlc2V0IHRoZSBlbnRpcmUgc2V0IHdpdGggYSBuZXcgbGlzdCBvZiBtb2RlbHMsIHdpdGhvdXQgZmlyaW5nCiAgICAvLyBhbnkgZ3JhbnVsYXIgYGFkZGAgb3IgYHJlbW92ZWAgZXZlbnRzLiBGaXJlcyBgcmVzZXRgIHdoZW4gZmluaXNoZWQuCiAgICAvLyBVc2VmdWwgZm9yIGJ1bGsgb3BlcmF0aW9ucyBhbmQgb3B0aW1pemF0aW9ucy4KICAgIHJlc2V0OiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHsKICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLm1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICB0aGlzLl9yZW1vdmVSZWZlcmVuY2UodGhpcy5tb2RlbHNbaV0sIG9wdGlvbnMpOwogICAgICB9CiAgICAgIG9wdGlvbnMucHJldmlvdXNNb2RlbHMgPSB0aGlzLm1vZGVsczsKICAgICAgdGhpcy5fcmVzZXQoKTsKICAgICAgbW9kZWxzID0gdGhpcy5hZGQobW9kZWxzLCBfLmV4dGVuZCh7c2lsZW50OiB0cnVlfSwgb3B0aW9ucykpOwogICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLnRyaWdnZXIoJ3Jlc2V0JywgdGhpcywgb3B0aW9ucyk7CiAgICAgIHJldHVybiBtb2RlbHM7CiAgICB9LAoKICAgIC8vIEFkZCBhIG1vZGVsIHRvIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uCiAgICBwdXNoOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykgewogICAgICByZXR1cm4gdGhpcy5hZGQobW9kZWwsIF8uZXh0ZW5kKHthdDogdGhpcy5sZW5ndGh9LCBvcHRpb25zKSk7CiAgICB9LAoKICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi4KICAgIHBvcDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICB2YXIgbW9kZWwgPSB0aGlzLmF0KHRoaXMubGVuZ3RoIC0gMSk7CiAgICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIG1vZGVsOwogICAgfSwKCiAgICAvLyBBZGQgYSBtb2RlbCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjb2xsZWN0aW9uLgogICAgdW5zaGlmdDogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIHRoaXMuYWRkKG1vZGVsLCBfLmV4dGVuZCh7YXQ6IDB9LCBvcHRpb25zKSk7CiAgICB9LAoKICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgY29sbGVjdGlvbi4KICAgIHNoaWZ0OiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHZhciBtb2RlbCA9IHRoaXMuYXQoMCk7CiAgICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIG1vZGVsOwogICAgfSwKCiAgICAvLyBTbGljZSBvdXQgYSBzdWItYXJyYXkgb2YgbW9kZWxzIGZyb20gdGhlIGNvbGxlY3Rpb24uCiAgICBzbGljZTogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBzbGljZS5hcHBseSh0aGlzLm1vZGVscywgYXJndW1lbnRzKTsKICAgIH0sCgogICAgLy8gR2V0IGEgbW9kZWwgZnJvbSB0aGUgc2V0IGJ5IGlkLgogICAgZ2V0OiBmdW5jdGlvbihvYmopIHsKICAgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdm9pZCAwOwogICAgICByZXR1cm4gdGhpcy5fYnlJZFtvYmpdIHx8IHRoaXMuX2J5SWRbb2JqLmlkXSB8fCB0aGlzLl9ieUlkW29iai5jaWRdOwogICAgfSwKCiAgICAvLyBHZXQgdGhlIG1vZGVsIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgIGF0OiBmdW5jdGlvbihpbmRleCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbHNbaW5kZXhdOwogICAgfSwKCiAgICAvLyBSZXR1cm4gbW9kZWxzIHdpdGggbWF0Y2hpbmcgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBzaW1wbGUgY2FzZXMgb2YKICAgIC8vIGBmaWx0ZXJgLgogICAgd2hlcmU6IGZ1bmN0aW9uKGF0dHJzLCBmaXJzdCkgewogICAgICBpZiAoXy5pc0VtcHR5KGF0dHJzKSkgcmV0dXJuIGZpcnN0ID8gdm9pZCAwIDogW107CiAgICAgIHJldHVybiB0aGlzW2ZpcnN0ID8gJ2ZpbmQnIDogJ2ZpbHRlciddKGZ1bmN0aW9uKG1vZGVsKSB7CiAgICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7CiAgICAgICAgICBpZiAoYXR0cnNba2V5XSAhPT0gbW9kZWwuZ2V0KGtleSkpIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0pOwogICAgfSwKCiAgICAvLyBSZXR1cm4gdGhlIGZpcnN0IG1vZGVsIHdpdGggbWF0Y2hpbmcgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBzaW1wbGUgY2FzZXMKICAgIC8vIG9mIGBmaW5kYC4KICAgIGZpbmRXaGVyZTogZnVuY3Rpb24oYXR0cnMpIHsKICAgICAgcmV0dXJuIHRoaXMud2hlcmUoYXR0cnMsIHRydWUpOwogICAgfSwKCiAgICAvLyBGb3JjZSB0aGUgY29sbGVjdGlvbiB0byByZS1zb3J0IGl0c2VsZi4gWW91IGRvbid0IG5lZWQgdG8gY2FsbCB0aGlzIHVuZGVyCiAgICAvLyBub3JtYWwgY2lyY3Vtc3RhbmNlcywgYXMgdGhlIHNldCB3aWxsIG1haW50YWluIHNvcnQgb3JkZXIgYXMgZWFjaCBpdGVtCiAgICAvLyBpcyBhZGRlZC4KICAgIHNvcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgaWYgKCF0aGlzLmNvbXBhcmF0b3IpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNvcnQgYSBzZXQgd2l0aG91dCBhIGNvbXBhcmF0b3InKTsKICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKCiAgICAgIC8vIFJ1biBzb3J0IGJhc2VkIG9uIHR5cGUgb2YgYGNvbXBhcmF0b3JgLgogICAgICBpZiAoXy5pc1N0cmluZyh0aGlzLmNvbXBhcmF0b3IpIHx8IHRoaXMuY29tcGFyYXRvci5sZW5ndGggPT09IDEpIHsKICAgICAgICB0aGlzLm1vZGVscyA9IHRoaXMuc29ydEJ5KHRoaXMuY29tcGFyYXRvciwgdGhpcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5tb2RlbHMuc29ydChfLmJpbmQodGhpcy5jb21wYXJhdG9yLCB0aGlzKSk7CiAgICAgIH0KCiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMudHJpZ2dlcignc29ydCcsIHRoaXMsIG9wdGlvbnMpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gUGx1Y2sgYW4gYXR0cmlidXRlIGZyb20gZWFjaCBtb2RlbCBpbiB0aGUgY29sbGVjdGlvbi4KICAgIHBsdWNrOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIHJldHVybiBfLmludm9rZSh0aGlzLm1vZGVscywgJ2dldCcsIGF0dHIpOwogICAgfSwKCiAgICAvLyBGZXRjaCB0aGUgZGVmYXVsdCBzZXQgb2YgbW9kZWxzIGZvciB0aGlzIGNvbGxlY3Rpb24sIHJlc2V0dGluZyB0aGUKICAgIC8vIGNvbGxlY3Rpb24gd2hlbiB0aGV5IGFycml2ZS4gSWYgYHJlc2V0OiB0cnVlYCBpcyBwYXNzZWQsIHRoZSByZXNwb25zZQogICAgLy8gZGF0YSB3aWxsIGJlIHBhc3NlZCB0aHJvdWdoIHRoZSBgcmVzZXRgIG1ldGhvZCBpbnN0ZWFkIG9mIGBzZXRgLgogICAgZmV0Y2g6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307CiAgICAgIGlmIChvcHRpb25zLnBhcnNlID09PSB2b2lkIDApIG9wdGlvbnMucGFyc2UgPSB0cnVlOwogICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzczsKICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzOwogICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7CiAgICAgICAgdmFyIG1ldGhvZCA9IG9wdGlvbnMucmVzZXQgPyAncmVzZXQnIDogJ3NldCc7CiAgICAgICAgY29sbGVjdGlvblttZXRob2RdKHJlc3AsIG9wdGlvbnMpOwogICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKGNvbGxlY3Rpb24sIHJlc3AsIG9wdGlvbnMpOwogICAgICAgIGNvbGxlY3Rpb24udHJpZ2dlcignc3luYycsIGNvbGxlY3Rpb24sIHJlc3AsIG9wdGlvbnMpOwogICAgICB9OwogICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7CiAgICAgIHJldHVybiB0aGlzLnN5bmMoJ3JlYWQnLCB0aGlzLCBvcHRpb25zKTsKICAgIH0sCgogICAgLy8gQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEgbW9kZWwgaW4gdGhpcyBjb2xsZWN0aW9uLiBBZGQgdGhlIG1vZGVsIHRvIHRoZQogICAgLy8gY29sbGVjdGlvbiBpbW1lZGlhdGVseSwgdW5sZXNzIGB3YWl0OiB0cnVlYCBpcyBwYXNzZWQsIGluIHdoaWNoIGNhc2Ugd2UKICAgIC8vIHdhaXQgZm9yIHRoZSBzZXJ2ZXIgdG8gYWdyZWUuCiAgICBjcmVhdGU6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9OwogICAgICBpZiAoIShtb2RlbCA9IHRoaXMuX3ByZXBhcmVNb2RlbChtb2RlbCwgb3B0aW9ucykpKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmICghb3B0aW9ucy53YWl0KSB0aGlzLmFkZChtb2RlbCwgb3B0aW9ucyk7CiAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpczsKICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7CiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKG1vZGVsLCByZXNwKSB7CiAgICAgICAgaWYgKG9wdGlvbnMud2FpdCkgY29sbGVjdGlvbi5hZGQobW9kZWwsIG9wdGlvbnMpOwogICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgfTsKICAgICAgbW9kZWwuc2F2ZShudWxsLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIG1vZGVsOwogICAgfSwKCiAgICAvLyAqKnBhcnNlKiogY29udmVydHMgYSByZXNwb25zZSBpbnRvIGEgbGlzdCBvZiBtb2RlbHMgdG8gYmUgYWRkZWQgdG8gdGhlCiAgICAvLyBjb2xsZWN0aW9uLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBqdXN0IHRvIHBhc3MgaXQgdGhyb3VnaC4KICAgIHBhcnNlOiBmdW5jdGlvbihyZXNwLCBvcHRpb25zKSB7CiAgICAgIHJldHVybiByZXNwOwogICAgfSwKCiAgICAvLyBDcmVhdGUgYSBuZXcgY29sbGVjdGlvbiB3aXRoIGFuIGlkZW50aWNhbCBsaXN0IG9mIG1vZGVscyBhcyB0aGlzIG9uZS4KICAgIGNsb25lOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMubW9kZWxzKTsKICAgIH0sCgogICAgLy8gUHJpdmF0ZSBtZXRob2QgdG8gcmVzZXQgYWxsIGludGVybmFsIHN0YXRlLiBDYWxsZWQgd2hlbiB0aGUgY29sbGVjdGlvbgogICAgLy8gaXMgZmlyc3QgaW5pdGlhbGl6ZWQgb3IgcmVzZXQuCiAgICBfcmVzZXQ6IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmxlbmd0aCA9IDA7CiAgICAgIHRoaXMubW9kZWxzID0gW107CiAgICAgIHRoaXMuX2J5SWQgID0ge307CiAgICB9LAoKICAgIC8vIFByZXBhcmUgYSBoYXNoIG9mIGF0dHJpYnV0ZXMgKG9yIG90aGVyIG1vZGVsKSB0byBiZSBhZGRlZCB0byB0aGlzCiAgICAvLyBjb2xsZWN0aW9uLgogICAgX3ByZXBhcmVNb2RlbDogZnVuY3Rpb24oYXR0cnMsIG9wdGlvbnMpIHsKICAgICAgaWYgKGF0dHJzIGluc3RhbmNlb2YgTW9kZWwpIHJldHVybiBhdHRyczsKICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307CiAgICAgIG9wdGlvbnMuY29sbGVjdGlvbiA9IHRoaXM7CiAgICAgIHZhciBtb2RlbCA9IG5ldyB0aGlzLm1vZGVsKGF0dHJzLCBvcHRpb25zKTsKICAgICAgaWYgKCFtb2RlbC52YWxpZGF0aW9uRXJyb3IpIHJldHVybiBtb2RlbDsKICAgICAgdGhpcy50cmlnZ2VyKCdpbnZhbGlkJywgdGhpcywgbW9kZWwudmFsaWRhdGlvbkVycm9yLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKCiAgICAvLyBJbnRlcm5hbCBtZXRob2QgdG8gY3JlYXRlIGEgbW9kZWwncyB0aWVzIHRvIGEgY29sbGVjdGlvbi4KICAgIF9hZGRSZWZlcmVuY2U6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIHRoaXMuX2J5SWRbbW9kZWwuY2lkXSA9IG1vZGVsOwogICAgICBpZiAobW9kZWwuaWQgIT0gbnVsbCkgdGhpcy5fYnlJZFttb2RlbC5pZF0gPSBtb2RlbDsKICAgICAgaWYgKCFtb2RlbC5jb2xsZWN0aW9uKSBtb2RlbC5jb2xsZWN0aW9uID0gdGhpczsKICAgICAgbW9kZWwub24oJ2FsbCcsIHRoaXMuX29uTW9kZWxFdmVudCwgdGhpcyk7CiAgICB9LAoKICAgIC8vIEludGVybmFsIG1ldGhvZCB0byBzZXZlciBhIG1vZGVsJ3MgdGllcyB0byBhIGNvbGxlY3Rpb24uCiAgICBfcmVtb3ZlUmVmZXJlbmNlOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykgewogICAgICBpZiAodGhpcyA9PT0gbW9kZWwuY29sbGVjdGlvbikgZGVsZXRlIG1vZGVsLmNvbGxlY3Rpb247CiAgICAgIG1vZGVsLm9mZignYWxsJywgdGhpcy5fb25Nb2RlbEV2ZW50LCB0aGlzKTsKICAgIH0sCgogICAgLy8gSW50ZXJuYWwgbWV0aG9kIGNhbGxlZCBldmVyeSB0aW1lIGEgbW9kZWwgaW4gdGhlIHNldCBmaXJlcyBhbiBldmVudC4KICAgIC8vIFNldHMgbmVlZCB0byB1cGRhdGUgdGhlaXIgaW5kZXhlcyB3aGVuIG1vZGVscyBjaGFuZ2UgaWRzLiBBbGwgb3RoZXIKICAgIC8vIGV2ZW50cyBzaW1wbHkgcHJveHkgdGhyb3VnaC4gImFkZCIgYW5kICJyZW1vdmUiIGV2ZW50cyB0aGF0IG9yaWdpbmF0ZQogICAgLy8gaW4gb3RoZXIgY29sbGVjdGlvbnMgYXJlIGlnbm9yZWQuCiAgICBfb25Nb2RlbEV2ZW50OiBmdW5jdGlvbihldmVudCwgbW9kZWwsIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHsKICAgICAgaWYgKChldmVudCA9PT0gJ2FkZCcgfHwgZXZlbnQgPT09ICdyZW1vdmUnKSAmJiBjb2xsZWN0aW9uICE9PSB0aGlzKSByZXR1cm47CiAgICAgIGlmIChldmVudCA9PT0gJ2Rlc3Ryb3knKSB0aGlzLnJlbW92ZShtb2RlbCwgb3B0aW9ucyk7CiAgICAgIGlmIChtb2RlbCAmJiBldmVudCA9PT0gJ2NoYW5nZTonICsgbW9kZWwuaWRBdHRyaWJ1dGUpIHsKICAgICAgICBkZWxldGUgdGhpcy5fYnlJZFttb2RlbC5wcmV2aW91cyhtb2RlbC5pZEF0dHJpYnV0ZSldOwogICAgICAgIGlmIChtb2RlbC5pZCAhPSBudWxsKSB0aGlzLl9ieUlkW21vZGVsLmlkXSA9IG1vZGVsOwogICAgICB9CiAgICAgIHRoaXMudHJpZ2dlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICB9KTsKCiAgLy8gVW5kZXJzY29yZSBtZXRob2RzIHRoYXQgd2Ugd2FudCB0byBpbXBsZW1lbnQgb24gdGhlIENvbGxlY3Rpb24uCiAgLy8gOTAlIG9mIHRoZSBjb3JlIHVzZWZ1bG5lc3Mgb2YgQmFja2JvbmUgQ29sbGVjdGlvbnMgaXMgYWN0dWFsbHkgaW1wbGVtZW50ZWQKICAvLyByaWdodCBoZXJlOgogIHZhciBtZXRob2RzID0gWydmb3JFYWNoJywgJ2VhY2gnLCAnbWFwJywgJ2NvbGxlY3QnLCAncmVkdWNlJywgJ2ZvbGRsJywKICAgICdpbmplY3QnLCAncmVkdWNlUmlnaHQnLCAnZm9sZHInLCAnZmluZCcsICdkZXRlY3QnLCAnZmlsdGVyJywgJ3NlbGVjdCcsCiAgICAncmVqZWN0JywgJ2V2ZXJ5JywgJ2FsbCcsICdzb21lJywgJ2FueScsICdpbmNsdWRlJywgJ2NvbnRhaW5zJywgJ2ludm9rZScsCiAgICAnbWF4JywgJ21pbicsICd0b0FycmF5JywgJ3NpemUnLCAnZmlyc3QnLCAnaGVhZCcsICd0YWtlJywgJ2luaXRpYWwnLCAncmVzdCcsCiAgICAndGFpbCcsICdkcm9wJywgJ2xhc3QnLCAnd2l0aG91dCcsICdkaWZmZXJlbmNlJywgJ2luZGV4T2YnLCAnc2h1ZmZsZScsCiAgICAnbGFzdEluZGV4T2YnLCAnaXNFbXB0eScsICdjaGFpbicsICdzYW1wbGUnXTsKCiAgLy8gTWl4IGluIGVhY2ggVW5kZXJzY29yZSBtZXRob2QgYXMgYSBwcm94eSB0byBgQ29sbGVjdGlvbiNtb2RlbHNgLgogIF8uZWFjaChtZXRob2RzLCBmdW5jdGlvbihtZXRob2QpIHsKICAgIENvbGxlY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgIGFyZ3MudW5zaGlmdCh0aGlzLm1vZGVscyk7CiAgICAgIHJldHVybiBfW21ldGhvZF0uYXBwbHkoXywgYXJncyk7CiAgICB9OwogIH0pOwoKICAvLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB0YWtlIGEgcHJvcGVydHkgbmFtZSBhcyBhbiBhcmd1bWVudC4KICB2YXIgYXR0cmlidXRlTWV0aG9kcyA9IFsnZ3JvdXBCeScsICdjb3VudEJ5JywgJ3NvcnRCeScsICdpbmRleEJ5J107CgogIC8vIFVzZSBhdHRyaWJ1dGVzIGluc3RlYWQgb2YgcHJvcGVydGllcy4KICBfLmVhY2goYXR0cmlidXRlTWV0aG9kcywgZnVuY3Rpb24obWV0aG9kKSB7CiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHsKICAgICAgdmFyIGl0ZXJhdG9yID0gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlIDogZnVuY3Rpb24obW9kZWwpIHsKICAgICAgICByZXR1cm4gbW9kZWwuZ2V0KHZhbHVlKTsKICAgICAgfTsKICAgICAgcmV0dXJuIF9bbWV0aG9kXSh0aGlzLm1vZGVscywgaXRlcmF0b3IsIGNvbnRleHQpOwogICAgfTsKICB9KTsKCiAgLy8gQmFja2JvbmUuVmlldwogIC8vIC0tLS0tLS0tLS0tLS0KCiAgLy8gQmFja2JvbmUgVmlld3MgYXJlIGFsbW9zdCBtb3JlIGNvbnZlbnRpb24gdGhhbiB0aGV5IGFyZSBhY3R1YWwgY29kZS4gQSBWaWV3CiAgLy8gaXMgc2ltcGx5IGEgSmF2YVNjcmlwdCBvYmplY3QgdGhhdCByZXByZXNlbnRzIGEgbG9naWNhbCBjaHVuayBvZiBVSSBpbiB0aGUKICAvLyBET00uIFRoaXMgbWlnaHQgYmUgYSBzaW5nbGUgaXRlbSwgYW4gZW50aXJlIGxpc3QsIGEgc2lkZWJhciBvciBwYW5lbCwgb3IKICAvLyBldmVuIHRoZSBzdXJyb3VuZGluZyBmcmFtZSB3aGljaCB3cmFwcyB5b3VyIHdob2xlIGFwcC4gRGVmaW5pbmcgYSBjaHVuayBvZgogIC8vIFVJIGFzIGEgKipWaWV3KiogYWxsb3dzIHlvdSB0byBkZWZpbmUgeW91ciBET00gZXZlbnRzIGRlY2xhcmF0aXZlbHksIHdpdGhvdXQKICAvLyBoYXZpbmcgdG8gd29ycnkgYWJvdXQgcmVuZGVyIG9yZGVyIC4uLiBhbmQgbWFrZXMgaXQgZWFzeSBmb3IgdGhlIHZpZXcgdG8KICAvLyByZWFjdCB0byBzcGVjaWZpYyBjaGFuZ2VzIGluIHRoZSBzdGF0ZSBvZiB5b3VyIG1vZGVscy4KCiAgLy8gQ3JlYXRpbmcgYSBCYWNrYm9uZS5WaWV3IGNyZWF0ZXMgaXRzIGluaXRpYWwgZWxlbWVudCBvdXRzaWRlIG9mIHRoZSBET00sCiAgLy8gaWYgYW4gZXhpc3RpbmcgZWxlbWVudCBpcyBub3QgcHJvdmlkZWQuLi4KICB2YXIgVmlldyA9IEJhY2tib25lLlZpZXcgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICB0aGlzLmNpZCA9IF8udW5pcXVlSWQoJ3ZpZXcnKTsKICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICBfLmV4dGVuZCh0aGlzLCBfLnBpY2sob3B0aW9ucywgdmlld09wdGlvbnMpKTsKICAgIHRoaXMuX2Vuc3VyZUVsZW1lbnQoKTsKICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpOwogIH07CgogIC8vIENhY2hlZCByZWdleCB0byBzcGxpdCBrZXlzIGZvciBgZGVsZWdhdGVgLgogIHZhciBkZWxlZ2F0ZUV2ZW50U3BsaXR0ZXIgPSAvXihcUyspXHMqKC4qKSQvOwoKICAvLyBMaXN0IG9mIHZpZXcgb3B0aW9ucyB0byBiZSBtZXJnZWQgYXMgcHJvcGVydGllcy4KICB2YXIgdmlld09wdGlvbnMgPSBbJ21vZGVsJywgJ2NvbGxlY3Rpb24nLCAnZWwnLCAnaWQnLCAnYXR0cmlidXRlcycsICdjbGFzc05hbWUnLCAndGFnTmFtZScsICdldmVudHMnXTsKCiAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKkJhY2tib25lLlZpZXcqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLgogIF8uZXh0ZW5kKFZpZXcucHJvdG90eXBlLCBFdmVudHMsIHsKCiAgICAvLyBUaGUgZGVmYXVsdCBgdGFnTmFtZWAgb2YgYSBWaWV3J3MgZWxlbWVudCBpcyBgImRpdiJgLgogICAgdGFnTmFtZTogJ2RpdicsCgogICAgLy8galF1ZXJ5IGRlbGVnYXRlIGZvciBlbGVtZW50IGxvb2t1cCwgc2NvcGVkIHRvIERPTSBlbGVtZW50cyB3aXRoaW4gdGhlCiAgICAvLyBjdXJyZW50IHZpZXcuIFRoaXMgc2hvdWxkIGJlIHByZWZlcnJlZCB0byBnbG9iYWwgbG9va3VwcyB3aGVyZSBwb3NzaWJsZS4KICAgICQ6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CiAgICAgIHJldHVybiB0aGlzLiRlbC5maW5kKHNlbGVjdG9yKTsKICAgIH0sCgogICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duCiAgICAvLyBpbml0aWFsaXphdGlvbiBsb2dpYy4KICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSwKCiAgICAvLyAqKnJlbmRlcioqIGlzIHRoZSBjb3JlIGZ1bmN0aW9uIHRoYXQgeW91ciB2aWV3IHNob3VsZCBvdmVycmlkZSwgaW4gb3JkZXIKICAgIC8vIHRvIHBvcHVsYXRlIGl0cyBlbGVtZW50IChgdGhpcy5lbGApLCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBIVE1MLiBUaGUKICAgIC8vIGNvbnZlbnRpb24gaXMgZm9yICoqcmVuZGVyKiogdG8gYWx3YXlzIHJldHVybiBgdGhpc2AuCiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gUmVtb3ZlIHRoaXMgdmlldyBieSB0YWtpbmcgdGhlIGVsZW1lbnQgb3V0IG9mIHRoZSBET00sIGFuZCByZW1vdmluZyBhbnkKICAgIC8vIGFwcGxpY2FibGUgQmFja2JvbmUuRXZlbnRzIGxpc3RlbmVycy4KICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuJGVsLnJlbW92ZSgpOwogICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIENoYW5nZSB0aGUgdmlldydzIGVsZW1lbnQgKGB0aGlzLmVsYCBwcm9wZXJ0eSksIGluY2x1ZGluZyBldmVudAogICAgLy8gcmUtZGVsZWdhdGlvbi4KICAgIHNldEVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGRlbGVnYXRlKSB7CiAgICAgIGlmICh0aGlzLiRlbCkgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7CiAgICAgIHRoaXMuJGVsID0gZWxlbWVudCBpbnN0YW5jZW9mIEJhY2tib25lLiQgPyBlbGVtZW50IDogQmFja2JvbmUuJChlbGVtZW50KTsKICAgICAgdGhpcy5lbCA9IHRoaXMuJGVsWzBdOwogICAgICBpZiAoZGVsZWdhdGUgIT09IGZhbHNlKSB0aGlzLmRlbGVnYXRlRXZlbnRzKCk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBTZXQgY2FsbGJhY2tzLCB3aGVyZSBgdGhpcy5ldmVudHNgIGlzIGEgaGFzaCBvZgogICAgLy8KICAgIC8vICp7ImV2ZW50IHNlbGVjdG9yIjogImNhbGxiYWNrIn0qCiAgICAvLwogICAgLy8gICAgIHsKICAgIC8vICAgICAgICdtb3VzZWRvd24gLnRpdGxlJzogICdlZGl0JywKICAgIC8vICAgICAgICdjbGljayAuYnV0dG9uJzogICAgICdzYXZlJywKICAgIC8vICAgICAgICdjbGljayAub3Blbic6ICAgICAgIGZ1bmN0aW9uKGUpIHsgLi4uIH0KICAgIC8vICAgICB9CiAgICAvLwogICAgLy8gcGFpcnMuIENhbGxiYWNrcyB3aWxsIGJlIGJvdW5kIHRvIHRoZSB2aWV3LCB3aXRoIGB0aGlzYCBzZXQgcHJvcGVybHkuCiAgICAvLyBVc2VzIGV2ZW50IGRlbGVnYXRpb24gZm9yIGVmZmljaWVuY3kuCiAgICAvLyBPbWl0dGluZyB0aGUgc2VsZWN0b3IgYmluZHMgdGhlIGV2ZW50IHRvIGB0aGlzLmVsYC4KICAgIC8vIFRoaXMgb25seSB3b3JrcyBmb3IgZGVsZWdhdGUtYWJsZSBldmVudHM6IG5vdCBgZm9jdXNgLCBgYmx1cmAsIGFuZAogICAgLy8gbm90IGBjaGFuZ2VgLCBgc3VibWl0YCwgYW5kIGByZXNldGAgaW4gSW50ZXJuZXQgRXhwbG9yZXIuCiAgICBkZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7CiAgICAgIGlmICghKGV2ZW50cyB8fCAoZXZlbnRzID0gXy5yZXN1bHQodGhpcywgJ2V2ZW50cycpKSkpIHJldHVybiB0aGlzOwogICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTsKICAgICAgZm9yICh2YXIga2V5IGluIGV2ZW50cykgewogICAgICAgIHZhciBtZXRob2QgPSBldmVudHNba2V5XTsKICAgICAgICBpZiAoIV8uaXNGdW5jdGlvbihtZXRob2QpKSBtZXRob2QgPSB0aGlzW2V2ZW50c1trZXldXTsKICAgICAgICBpZiAoIW1ldGhvZCkgY29udGludWU7CgogICAgICAgIHZhciBtYXRjaCA9IGtleS5tYXRjaChkZWxlZ2F0ZUV2ZW50U3BsaXR0ZXIpOwogICAgICAgIHZhciBldmVudE5hbWUgPSBtYXRjaFsxXSwgc2VsZWN0b3IgPSBtYXRjaFsyXTsKICAgICAgICBtZXRob2QgPSBfLmJpbmQobWV0aG9kLCB0aGlzKTsKICAgICAgICBldmVudE5hbWUgKz0gJy5kZWxlZ2F0ZUV2ZW50cycgKyB0aGlzLmNpZDsKICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICcnKSB7CiAgICAgICAgICB0aGlzLiRlbC5vbihldmVudE5hbWUsIG1ldGhvZCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJGVsLm9uKGV2ZW50TmFtZSwgc2VsZWN0b3IsIG1ldGhvZCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBDbGVhcnMgYWxsIGNhbGxiYWNrcyBwcmV2aW91c2x5IGJvdW5kIHRvIHRoZSB2aWV3IHdpdGggYGRlbGVnYXRlRXZlbnRzYC4KICAgIC8vIFlvdSB1c3VhbGx5IGRvbid0IG5lZWQgdG8gdXNlIHRoaXMsIGJ1dCBtYXkgd2lzaCB0byBpZiB5b3UgaGF2ZSBtdWx0aXBsZQogICAgLy8gQmFja2JvbmUgdmlld3MgYXR0YWNoZWQgdG8gdGhlIHNhbWUgRE9NIGVsZW1lbnQuCiAgICB1bmRlbGVnYXRlRXZlbnRzOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy4kZWwub2ZmKCcuZGVsZWdhdGVFdmVudHMnICsgdGhpcy5jaWQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gRW5zdXJlIHRoYXQgdGhlIFZpZXcgaGFzIGEgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uCiAgICAvLyBJZiBgdGhpcy5lbGAgaXMgYSBzdHJpbmcsIHBhc3MgaXQgdGhyb3VnaCBgJCgpYCwgdGFrZSB0aGUgZmlyc3QKICAgIC8vIG1hdGNoaW5nIGVsZW1lbnQsIGFuZCByZS1hc3NpZ24gaXQgdG8gYGVsYC4gT3RoZXJ3aXNlLCBjcmVhdGUKICAgIC8vIGFuIGVsZW1lbnQgZnJvbSB0aGUgYGlkYCwgYGNsYXNzTmFtZWAgYW5kIGB0YWdOYW1lYCBwcm9wZXJ0aWVzLgogICAgX2Vuc3VyZUVsZW1lbnQ6IGZ1bmN0aW9uKCkgewogICAgICBpZiAoIXRoaXMuZWwpIHsKICAgICAgICB2YXIgYXR0cnMgPSBfLmV4dGVuZCh7fSwgXy5yZXN1bHQodGhpcywgJ2F0dHJpYnV0ZXMnKSk7CiAgICAgICAgaWYgKHRoaXMuaWQpIGF0dHJzLmlkID0gXy5yZXN1bHQodGhpcywgJ2lkJyk7CiAgICAgICAgaWYgKHRoaXMuY2xhc3NOYW1lKSBhdHRyc1snY2xhc3MnXSA9IF8ucmVzdWx0KHRoaXMsICdjbGFzc05hbWUnKTsKICAgICAgICB2YXIgJGVsID0gQmFja2JvbmUuJCgnPCcgKyBfLnJlc3VsdCh0aGlzLCAndGFnTmFtZScpICsgJz4nKS5hdHRyKGF0dHJzKTsKICAgICAgICB0aGlzLnNldEVsZW1lbnQoJGVsLCBmYWxzZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zZXRFbGVtZW50KF8ucmVzdWx0KHRoaXMsICdlbCcpLCBmYWxzZSk7CiAgICAgIH0KICAgIH0KCiAgfSk7CgogIC8vIEJhY2tib25lLnN5bmMKICAvLyAtLS0tLS0tLS0tLS0tCgogIC8vIE92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gdG8gY2hhbmdlIHRoZSBtYW5uZXIgaW4gd2hpY2ggQmFja2JvbmUgcGVyc2lzdHMKICAvLyBtb2RlbHMgdG8gdGhlIHNlcnZlci4gWW91IHdpbGwgYmUgcGFzc2VkIHRoZSB0eXBlIG9mIHJlcXVlc3QsIGFuZCB0aGUKICAvLyBtb2RlbCBpbiBxdWVzdGlvbi4gQnkgZGVmYXVsdCwgbWFrZXMgYSBSRVNUZnVsIEFqYXggcmVxdWVzdAogIC8vIHRvIHRoZSBtb2RlbCdzIGB1cmwoKWAuIFNvbWUgcG9zc2libGUgY3VzdG9taXphdGlvbnMgY291bGQgYmU6CiAgLy8KICAvLyAqIFVzZSBgc2V0VGltZW91dGAgdG8gYmF0Y2ggcmFwaWQtZmlyZSB1cGRhdGVzIGludG8gYSBzaW5nbGUgcmVxdWVzdC4KICAvLyAqIFNlbmQgdXAgdGhlIG1vZGVscyBhcyBYTUwgaW5zdGVhZCBvZiBKU09OLgogIC8vICogUGVyc2lzdCBtb2RlbHMgdmlhIFdlYlNvY2tldHMgaW5zdGVhZCBvZiBBamF4LgogIC8vCiAgLy8gVHVybiBvbiBgQmFja2JvbmUuZW11bGF0ZUhUVFBgIGluIG9yZGVyIHRvIHNlbmQgYFBVVGAgYW5kIGBERUxFVEVgIHJlcXVlc3RzCiAgLy8gYXMgYFBPU1RgLCB3aXRoIGEgYF9tZXRob2RgIHBhcmFtZXRlciBjb250YWluaW5nIHRoZSB0cnVlIEhUVFAgbWV0aG9kLAogIC8vIGFzIHdlbGwgYXMgYWxsIHJlcXVlc3RzIHdpdGggdGhlIGJvZHkgYXMgYGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZGAKICAvLyBpbnN0ZWFkIG9mIGBhcHBsaWNhdGlvbi9qc29uYCB3aXRoIHRoZSBtb2RlbCBpbiBhIHBhcmFtIG5hbWVkIGBtb2RlbGAuCiAgLy8gVXNlZnVsIHdoZW4gaW50ZXJmYWNpbmcgd2l0aCBzZXJ2ZXItc2lkZSBsYW5ndWFnZXMgbGlrZSAqKlBIUCoqIHRoYXQgbWFrZQogIC8vIGl0IGRpZmZpY3VsdCB0byByZWFkIHRoZSBib2R5IG9mIGBQVVRgIHJlcXVlc3RzLgogIEJhY2tib25lLnN5bmMgPSBmdW5jdGlvbihtZXRob2QsIG1vZGVsLCBvcHRpb25zKSB7CiAgICB2YXIgdHlwZSA9IG1ldGhvZE1hcFttZXRob2RdOwoKICAgIC8vIERlZmF1bHQgb3B0aW9ucywgdW5sZXNzIHNwZWNpZmllZC4KICAgIF8uZGVmYXVsdHMob3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KSwgewogICAgICBlbXVsYXRlSFRUUDogQmFja2JvbmUuZW11bGF0ZUhUVFAsCiAgICAgIGVtdWxhdGVKU09OOiBCYWNrYm9uZS5lbXVsYXRlSlNPTgogICAgfSk7CgogICAgLy8gRGVmYXVsdCBKU09OLXJlcXVlc3Qgb3B0aW9ucy4KICAgIHZhciBwYXJhbXMgPSB7dHlwZTogdHlwZSwgZGF0YVR5cGU6ICdqc29uJ307CgogICAgLy8gRW5zdXJlIHRoYXQgd2UgaGF2ZSBhIFVSTC4KICAgIGlmICghb3B0aW9ucy51cmwpIHsKICAgICAgcGFyYW1zLnVybCA9IF8ucmVzdWx0KG1vZGVsLCAndXJsJykgfHwgdXJsRXJyb3IoKTsKICAgIH0KCiAgICAvLyBFbnN1cmUgdGhhdCB3ZSBoYXZlIHRoZSBhcHByb3ByaWF0ZSByZXF1ZXN0IGRhdGEuCiAgICBpZiAob3B0aW9ucy5kYXRhID09IG51bGwgJiYgbW9kZWwgJiYgKG1ldGhvZCA9PT0gJ2NyZWF0ZScgfHwgbWV0aG9kID09PSAndXBkYXRlJyB8fCBtZXRob2QgPT09ICdwYXRjaCcpKSB7CiAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJzsKICAgICAgcGFyYW1zLmRhdGEgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmF0dHJzIHx8IG1vZGVsLnRvSlNPTihvcHRpb25zKSk7CiAgICB9CgogICAgLy8gRm9yIG9sZGVyIHNlcnZlcnMsIGVtdWxhdGUgSlNPTiBieSBlbmNvZGluZyB0aGUgcmVxdWVzdCBpbnRvIGFuIEhUTUwtZm9ybS4KICAgIGlmIChvcHRpb25zLmVtdWxhdGVKU09OKSB7CiAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOwogICAgICBwYXJhbXMuZGF0YSA9IHBhcmFtcy5kYXRhID8ge21vZGVsOiBwYXJhbXMuZGF0YX0gOiB7fTsKICAgIH0KCiAgICAvLyBGb3Igb2xkZXIgc2VydmVycywgZW11bGF0ZSBIVFRQIGJ5IG1pbWlja2luZyB0aGUgSFRUUCBtZXRob2Qgd2l0aCBgX21ldGhvZGAKICAgIC8vIEFuZCBhbiBgWC1IVFRQLU1ldGhvZC1PdmVycmlkZWAgaGVhZGVyLgogICAgaWYgKG9wdGlvbnMuZW11bGF0ZUhUVFAgJiYgKHR5cGUgPT09ICdQVVQnIHx8IHR5cGUgPT09ICdERUxFVEUnIHx8IHR5cGUgPT09ICdQQVRDSCcpKSB7CiAgICAgIHBhcmFtcy50eXBlID0gJ1BPU1QnOwogICAgICBpZiAob3B0aW9ucy5lbXVsYXRlSlNPTikgcGFyYW1zLmRhdGEuX21ldGhvZCA9IHR5cGU7CiAgICAgIHZhciBiZWZvcmVTZW5kID0gb3B0aW9ucy5iZWZvcmVTZW5kOwogICAgICBvcHRpb25zLmJlZm9yZVNlbmQgPSBmdW5jdGlvbih4aHIpIHsKICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1IVFRQLU1ldGhvZC1PdmVycmlkZScsIHR5cGUpOwogICAgICAgIGlmIChiZWZvcmVTZW5kKSByZXR1cm4gYmVmb3JlU2VuZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfQoKICAgIC8vIERvbid0IHByb2Nlc3MgZGF0YSBvbiBhIG5vbi1HRVQgcmVxdWVzdC4KICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ0dFVCcgJiYgIW9wdGlvbnMuZW11bGF0ZUpTT04pIHsKICAgICAgcGFyYW1zLnByb2Nlc3NEYXRhID0gZmFsc2U7CiAgICB9CgogICAgLy8gSWYgd2UncmUgc2VuZGluZyBhIGBQQVRDSGAgcmVxdWVzdCwgYW5kIHdlJ3JlIGluIGFuIG9sZCBJbnRlcm5ldCBFeHBsb3JlcgogICAgLy8gdGhhdCBzdGlsbCBoYXMgQWN0aXZlWCBlbmFibGVkIGJ5IGRlZmF1bHQsIG92ZXJyaWRlIGpRdWVyeSB0byB1c2UgdGhhdAogICAgLy8gZm9yIFhIUiBpbnN0ZWFkLiBSZW1vdmUgdGhpcyBsaW5lIHdoZW4galF1ZXJ5IHN1cHBvcnRzIGBQQVRDSGAgb24gSUU4LgogICAgaWYgKHBhcmFtcy50eXBlID09PSAnUEFUQ0gnICYmIG5vWGhyUGF0Y2gpIHsKICAgICAgcGFyYW1zLnhociA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTsKICAgICAgfTsKICAgIH0KCiAgICAvLyBNYWtlIHRoZSByZXF1ZXN0LCBhbGxvd2luZyB0aGUgdXNlciB0byBvdmVycmlkZSBhbnkgQWpheCBvcHRpb25zLgogICAgdmFyIHhociA9IG9wdGlvbnMueGhyID0gQmFja2JvbmUuYWpheChfLmV4dGVuZChwYXJhbXMsIG9wdGlvbnMpKTsKICAgIG1vZGVsLnRyaWdnZXIoJ3JlcXVlc3QnLCBtb2RlbCwgeGhyLCBvcHRpb25zKTsKICAgIHJldHVybiB4aHI7CiAgfTsKCiAgdmFyIG5vWGhyUGF0Y2ggPQogICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgISF3aW5kb3cuQWN0aXZlWE9iamVjdCAmJgogICAgICAhKHdpbmRvdy5YTUxIdHRwUmVxdWVzdCAmJiAobmV3IFhNTEh0dHBSZXF1ZXN0KS5kaXNwYXRjaEV2ZW50KTsKCiAgLy8gTWFwIGZyb20gQ1JVRCB0byBIVFRQIGZvciBvdXIgZGVmYXVsdCBgQmFja2JvbmUuc3luY2AgaW1wbGVtZW50YXRpb24uCiAgdmFyIG1ldGhvZE1hcCA9IHsKICAgICdjcmVhdGUnOiAnUE9TVCcsCiAgICAndXBkYXRlJzogJ1BVVCcsCiAgICAncGF0Y2gnOiAgJ1BBVENIJywKICAgICdkZWxldGUnOiAnREVMRVRFJywKICAgICdyZWFkJzogICAnR0VUJwogIH07CgogIC8vIFNldCB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgQmFja2JvbmUuYWpheGAgdG8gcHJveHkgdGhyb3VnaCB0byBgJGAuCiAgLy8gT3ZlcnJpZGUgdGhpcyBpZiB5b3UnZCBsaWtlIHRvIHVzZSBhIGRpZmZlcmVudCBsaWJyYXJ5LgogIEJhY2tib25lLmFqYXggPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBCYWNrYm9uZS4kLmFqYXguYXBwbHkoQmFja2JvbmUuJCwgYXJndW1lbnRzKTsKICB9OwoKICAvLyBCYWNrYm9uZS5Sb3V0ZXIKICAvLyAtLS0tLS0tLS0tLS0tLS0KCiAgLy8gUm91dGVycyBtYXAgZmF1eC1VUkxzIHRvIGFjdGlvbnMsIGFuZCBmaXJlIGV2ZW50cyB3aGVuIHJvdXRlcyBhcmUKICAvLyBtYXRjaGVkLiBDcmVhdGluZyBhIG5ldyBvbmUgc2V0cyBpdHMgYHJvdXRlc2AgaGFzaCwgaWYgbm90IHNldCBzdGF0aWNhbGx5LgogIHZhciBSb3V0ZXIgPSBCYWNrYm9uZS5Sb3V0ZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgaWYgKG9wdGlvbnMucm91dGVzKSB0aGlzLnJvdXRlcyA9IG9wdGlvbnMucm91dGVzOwogICAgdGhpcy5fYmluZFJvdXRlcygpOwogICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKCiAgLy8gQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZm9yIG1hdGNoaW5nIG5hbWVkIHBhcmFtIHBhcnRzIGFuZCBzcGxhdHRlZAogIC8vIHBhcnRzIG9mIHJvdXRlIHN0cmluZ3MuCiAgdmFyIG9wdGlvbmFsUGFyYW0gPSAvXCgoLio/KVwpL2c7CiAgdmFyIG5hbWVkUGFyYW0gICAgPSAvKFwoXD8pPzpcdysvZzsKICB2YXIgc3BsYXRQYXJhbSAgICA9IC9cKlx3Ky9nOwogIHZhciBlc2NhcGVSZWdFeHAgID0gL1tcLXt9XFtcXSs/LixcXFxeJHwjXHNdL2c7CgogIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipCYWNrYm9uZS5Sb3V0ZXIqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLgogIF8uZXh0ZW5kKFJvdXRlci5wcm90b3R5cGUsIEV2ZW50cywgewoKICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sCgogICAgLy8gTWFudWFsbHkgYmluZCBhIHNpbmdsZSBuYW1lZCByb3V0ZSB0byBhIGNhbGxiYWNrLiBGb3IgZXhhbXBsZToKICAgIC8vCiAgICAvLyAgICAgdGhpcy5yb3V0ZSgnc2VhcmNoLzpxdWVyeS9wOm51bScsICdzZWFyY2gnLCBmdW5jdGlvbihxdWVyeSwgbnVtKSB7CiAgICAvLyAgICAgICAuLi4KICAgIC8vICAgICB9KTsKICAgIC8vCiAgICByb3V0ZTogZnVuY3Rpb24ocm91dGUsIG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgIGlmICghXy5pc1JlZ0V4cChyb3V0ZSkpIHJvdXRlID0gdGhpcy5fcm91dGVUb1JlZ0V4cChyb3V0ZSk7CiAgICAgIGlmIChfLmlzRnVuY3Rpb24obmFtZSkpIHsKICAgICAgICBjYWxsYmFjayA9IG5hbWU7CiAgICAgICAgbmFtZSA9ICcnOwogICAgICB9CiAgICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gdGhpc1tuYW1lXTsKICAgICAgdmFyIHJvdXRlciA9IHRoaXM7CiAgICAgIEJhY2tib25lLmhpc3Rvcnkucm91dGUocm91dGUsIGZ1bmN0aW9uKGZyYWdtZW50KSB7CiAgICAgICAgdmFyIGFyZ3MgPSByb3V0ZXIuX2V4dHJhY3RQYXJhbWV0ZXJzKHJvdXRlLCBmcmFnbWVudCk7CiAgICAgICAgcm91dGVyLmV4ZWN1dGUoY2FsbGJhY2ssIGFyZ3MpOwogICAgICAgIHJvdXRlci50cmlnZ2VyLmFwcGx5KHJvdXRlciwgWydyb3V0ZTonICsgbmFtZV0uY29uY2F0KGFyZ3MpKTsKICAgICAgICByb3V0ZXIudHJpZ2dlcigncm91dGUnLCBuYW1lLCBhcmdzKTsKICAgICAgICBCYWNrYm9uZS5oaXN0b3J5LnRyaWdnZXIoJ3JvdXRlJywgcm91dGVyLCBuYW1lLCBhcmdzKTsKICAgICAgfSk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBFeGVjdXRlIGEgcm91dGUgaGFuZGxlciB3aXRoIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXJzLiAgVGhpcyBpcyBhbgogICAgLy8gZXhjZWxsZW50IHBsYWNlIHRvIGRvIHByZS1yb3V0ZSBzZXR1cCBvciBwb3N0LXJvdXRlIGNsZWFudXAuCiAgICBleGVjdXRlOiBmdW5jdGlvbihjYWxsYmFjaywgYXJncykgewogICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpOwogICAgfSwKCiAgICAvLyBTaW1wbGUgcHJveHkgdG8gYEJhY2tib25lLmhpc3RvcnlgIHRvIHNhdmUgYSBmcmFnbWVudCBpbnRvIHRoZSBoaXN0b3J5LgogICAgbmF2aWdhdGU6IGZ1bmN0aW9uKGZyYWdtZW50LCBvcHRpb25zKSB7CiAgICAgIEJhY2tib25lLmhpc3RvcnkubmF2aWdhdGUoZnJhZ21lbnQsIG9wdGlvbnMpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gQmluZCBhbGwgZGVmaW5lZCByb3V0ZXMgdG8gYEJhY2tib25lLmhpc3RvcnlgLiBXZSBoYXZlIHRvIHJldmVyc2UgdGhlCiAgICAvLyBvcmRlciBvZiB0aGUgcm91dGVzIGhlcmUgdG8gc3VwcG9ydCBiZWhhdmlvciB3aGVyZSB0aGUgbW9zdCBnZW5lcmFsCiAgICAvLyByb3V0ZXMgY2FuIGJlIGRlZmluZWQgYXQgdGhlIGJvdHRvbSBvZiB0aGUgcm91dGUgbWFwLgogICAgX2JpbmRSb3V0ZXM6IGZ1bmN0aW9uKCkgewogICAgICBpZiAoIXRoaXMucm91dGVzKSByZXR1cm47CiAgICAgIHRoaXMucm91dGVzID0gXy5yZXN1bHQodGhpcywgJ3JvdXRlcycpOwogICAgICB2YXIgcm91dGUsIHJvdXRlcyA9IF8ua2V5cyh0aGlzLnJvdXRlcyk7CiAgICAgIHdoaWxlICgocm91dGUgPSByb3V0ZXMucG9wKCkpICE9IG51bGwpIHsKICAgICAgICB0aGlzLnJvdXRlKHJvdXRlLCB0aGlzLnJvdXRlc1tyb3V0ZV0pOwogICAgICB9CiAgICB9LAoKICAgIC8vIENvbnZlcnQgYSByb3V0ZSBzdHJpbmcgaW50byBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgc3VpdGFibGUgZm9yIG1hdGNoaW5nCiAgICAvLyBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uIGhhc2guCiAgICBfcm91dGVUb1JlZ0V4cDogZnVuY3Rpb24ocm91dGUpIHsKICAgICAgcm91dGUgPSByb3V0ZS5yZXBsYWNlKGVzY2FwZVJlZ0V4cCwgJ1xcJCYnKQogICAgICAgICAgICAgICAgICAgLnJlcGxhY2Uob3B0aW9uYWxQYXJhbSwgJyg/OiQxKT8nKQogICAgICAgICAgICAgICAgICAgLnJlcGxhY2UobmFtZWRQYXJhbSwgZnVuY3Rpb24obWF0Y2gsIG9wdGlvbmFsKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25hbCA/IG1hdGNoIDogJyhbXi8/XSspJzsKICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAucmVwbGFjZShzcGxhdFBhcmFtLCAnKFteP10qPyknKTsKICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcm91dGUgKyAnKD86XFw/KFtcXHNcXFNdKikpPyQnKTsKICAgIH0sCgogICAgLy8gR2l2ZW4gYSByb3V0ZSwgYW5kIGEgVVJMIGZyYWdtZW50IHRoYXQgaXQgbWF0Y2hlcywgcmV0dXJuIHRoZSBhcnJheSBvZgogICAgLy8gZXh0cmFjdGVkIGRlY29kZWQgcGFyYW1ldGVycy4gRW1wdHkgb3IgdW5tYXRjaGVkIHBhcmFtZXRlcnMgd2lsbCBiZQogICAgLy8gdHJlYXRlZCBhcyBgbnVsbGAgdG8gbm9ybWFsaXplIGNyb3NzLWJyb3dzZXIgYmVoYXZpb3IuCiAgICBfZXh0cmFjdFBhcmFtZXRlcnM6IGZ1bmN0aW9uKHJvdXRlLCBmcmFnbWVudCkgewogICAgICB2YXIgcGFyYW1zID0gcm91dGUuZXhlYyhmcmFnbWVudCkuc2xpY2UoMSk7CiAgICAgIHJldHVybiBfLm1hcChwYXJhbXMsIGZ1bmN0aW9uKHBhcmFtLCBpKSB7CiAgICAgICAgLy8gRG9uJ3QgZGVjb2RlIHRoZSBzZWFyY2ggcGFyYW1zLgogICAgICAgIGlmIChpID09PSBwYXJhbXMubGVuZ3RoIC0gMSkgcmV0dXJuIHBhcmFtIHx8IG51bGw7CiAgICAgICAgcmV0dXJuIHBhcmFtID8gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtKSA6IG51bGw7CiAgICAgIH0pOwogICAgfQoKICB9KTsKCiAgLy8gQmFja2JvbmUuSGlzdG9yeQogIC8vIC0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gSGFuZGxlcyBjcm9zcy1icm93c2VyIGhpc3RvcnkgbWFuYWdlbWVudCwgYmFzZWQgb24gZWl0aGVyCiAgLy8gW3B1c2hTdGF0ZV0oaHR0cDovL2RpdmVpbnRvaHRtbDUuaW5mby9oaXN0b3J5Lmh0bWwpIGFuZCByZWFsIFVSTHMsIG9yCiAgLy8gW29uaGFzaGNoYW5nZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9ET00vd2luZG93Lm9uaGFzaGNoYW5nZSkKICAvLyBhbmQgVVJMIGZyYWdtZW50cy4gSWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgbmVpdGhlciAob2xkIElFLCBuYXRjaCksCiAgLy8gZmFsbHMgYmFjayB0byBwb2xsaW5nLgogIHZhciBIaXN0b3J5ID0gQmFja2JvbmUuSGlzdG9yeSA9IGZ1bmN0aW9uKCkgewogICAgdGhpcy5oYW5kbGVycyA9IFtdOwogICAgXy5iaW5kQWxsKHRoaXMsICdjaGVja1VybCcpOwoKICAgIC8vIEVuc3VyZSB0aGF0IGBIaXN0b3J5YCBjYW4gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBicm93c2VyLgogICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgIHRoaXMubG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247CiAgICAgIHRoaXMuaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5OwogICAgfQogIH07CgogIC8vIENhY2hlZCByZWdleCBmb3Igc3RyaXBwaW5nIGEgbGVhZGluZyBoYXNoL3NsYXNoIGFuZCB0cmFpbGluZyBzcGFjZS4KICB2YXIgcm91dGVTdHJpcHBlciA9IC9eWyNcL118XHMrJC9nOwoKICAvLyBDYWNoZWQgcmVnZXggZm9yIHN0cmlwcGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzLgogIHZhciByb290U3RyaXBwZXIgPSAvXlwvK3xcLyskL2c7CgogIC8vIENhY2hlZCByZWdleCBmb3IgZGV0ZWN0aW5nIE1TSUUuCiAgdmFyIGlzRXhwbG9yZXIgPSAvbXNpZSBbXHcuXSsvOwoKICAvLyBDYWNoZWQgcmVnZXggZm9yIHJlbW92aW5nIGEgdHJhaWxpbmcgc2xhc2guCiAgdmFyIHRyYWlsaW5nU2xhc2ggPSAvXC8kLzsKCiAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBzdHJpcHBpbmcgdXJscyBvZiBoYXNoLgogIHZhciBwYXRoU3RyaXBwZXIgPSAvIy4qJC87CgogIC8vIEhhcyB0aGUgaGlzdG9yeSBoYW5kbGluZyBhbHJlYWR5IGJlZW4gc3RhcnRlZD8KICBIaXN0b3J5LnN0YXJ0ZWQgPSBmYWxzZTsKCiAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKkJhY2tib25lLkhpc3RvcnkqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLgogIF8uZXh0ZW5kKEhpc3RvcnkucHJvdG90eXBlLCBFdmVudHMsIHsKCiAgICAvLyBUaGUgZGVmYXVsdCBpbnRlcnZhbCB0byBwb2xsIGZvciBoYXNoIGNoYW5nZXMsIGlmIG5lY2Vzc2FyeSwgaXMKICAgIC8vIHR3ZW50eSB0aW1lcyBhIHNlY29uZC4KICAgIGludGVydmFsOiA1MCwKCiAgICAvLyBBcmUgd2UgYXQgdGhlIGFwcCByb290PwogICAgYXRSb290OiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvW15cL10kLywgJyQmLycpID09PSB0aGlzLnJvb3Q7CiAgICB9LAoKICAgIC8vIEdldHMgdGhlIHRydWUgaGFzaCB2YWx1ZS4gQ2Fubm90IHVzZSBsb2NhdGlvbi5oYXNoIGRpcmVjdGx5IGR1ZSB0byBidWcKICAgIC8vIGluIEZpcmVmb3ggd2hlcmUgbG9jYXRpb24uaGFzaCB3aWxsIGFsd2F5cyBiZSBkZWNvZGVkLgogICAgZ2V0SGFzaDogZnVuY3Rpb24od2luZG93KSB7CiAgICAgIHZhciBtYXRjaCA9ICh3aW5kb3cgfHwgdGhpcykubG9jYXRpb24uaHJlZi5tYXRjaCgvIyguKikkLyk7CiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJyc7CiAgICB9LAoKICAgIC8vIEdldCB0aGUgY3Jvc3MtYnJvd3NlciBub3JtYWxpemVkIFVSTCBmcmFnbWVudCwgZWl0aGVyIGZyb20gdGhlIFVSTCwKICAgIC8vIHRoZSBoYXNoLCBvciB0aGUgb3ZlcnJpZGUuCiAgICBnZXRGcmFnbWVudDogZnVuY3Rpb24oZnJhZ21lbnQsIGZvcmNlUHVzaFN0YXRlKSB7CiAgICAgIGlmIChmcmFnbWVudCA9PSBudWxsKSB7CiAgICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSB8fCAhdGhpcy5fd2FudHNIYXNoQ2hhbmdlIHx8IGZvcmNlUHVzaFN0YXRlKSB7CiAgICAgICAgICBmcmFnbWVudCA9IGRlY29kZVVSSSh0aGlzLmxvY2F0aW9uLnBhdGhuYW1lICsgdGhpcy5sb2NhdGlvbi5zZWFyY2gpOwogICAgICAgICAgdmFyIHJvb3QgPSB0aGlzLnJvb3QucmVwbGFjZSh0cmFpbGluZ1NsYXNoLCAnJyk7CiAgICAgICAgICBpZiAoIWZyYWdtZW50LmluZGV4T2Yocm9vdCkpIGZyYWdtZW50ID0gZnJhZ21lbnQuc2xpY2Uocm9vdC5sZW5ndGgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZ2V0SGFzaCgpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZnJhZ21lbnQucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7CiAgICB9LAoKICAgIC8vIFN0YXJ0IHRoZSBoYXNoIGNoYW5nZSBoYW5kbGluZywgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgY3VycmVudCBVUkwgbWF0Y2hlcwogICAgLy8gYW4gZXhpc3Rpbmcgcm91dGUsIGFuZCBgZmFsc2VgIG90aGVyd2lzZS4KICAgIHN0YXJ0OiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIGlmIChIaXN0b3J5LnN0YXJ0ZWQpIHRocm93IG5ldyBFcnJvcigiQmFja2JvbmUuaGlzdG9yeSBoYXMgYWxyZWFkeSBiZWVuIHN0YXJ0ZWQiKTsKICAgICAgSGlzdG9yeS5zdGFydGVkID0gdHJ1ZTsKCiAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIGluaXRpYWwgY29uZmlndXJhdGlvbi4gRG8gd2UgbmVlZCBhbiBpZnJhbWU/CiAgICAgIC8vIElzIHB1c2hTdGF0ZSBkZXNpcmVkIC4uLiBpcyBpdCBhdmFpbGFibGU/CiAgICAgIHRoaXMub3B0aW9ucyAgICAgICAgICA9IF8uZXh0ZW5kKHtyb290OiAnLyd9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpOwogICAgICB0aGlzLnJvb3QgICAgICAgICAgICAgPSB0aGlzLm9wdGlvbnMucm9vdDsKICAgICAgdGhpcy5fd2FudHNIYXNoQ2hhbmdlID0gdGhpcy5vcHRpb25zLmhhc2hDaGFuZ2UgIT09IGZhbHNlOwogICAgICB0aGlzLl93YW50c1B1c2hTdGF0ZSAgPSAhIXRoaXMub3B0aW9ucy5wdXNoU3RhdGU7CiAgICAgIHRoaXMuX2hhc1B1c2hTdGF0ZSAgICA9ICEhKHRoaXMub3B0aW9ucy5wdXNoU3RhdGUgJiYgdGhpcy5oaXN0b3J5ICYmIHRoaXMuaGlzdG9yeS5wdXNoU3RhdGUpOwogICAgICB2YXIgZnJhZ21lbnQgICAgICAgICAgPSB0aGlzLmdldEZyYWdtZW50KCk7CiAgICAgIHZhciBkb2NNb2RlICAgICAgICAgICA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTsKICAgICAgdmFyIG9sZElFICAgICAgICAgICAgID0gKGlzRXhwbG9yZXIuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpICYmICghZG9jTW9kZSB8fCBkb2NNb2RlIDw9IDcpKTsKCiAgICAgIC8vIE5vcm1hbGl6ZSByb290IHRvIGFsd2F5cyBpbmNsdWRlIGEgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2guCiAgICAgIHRoaXMucm9vdCA9ICgnLycgKyB0aGlzLnJvb3QgKyAnLycpLnJlcGxhY2Uocm9vdFN0cmlwcGVyLCAnLycpOwoKICAgICAgaWYgKG9sZElFICYmIHRoaXMuX3dhbnRzSGFzaENoYW5nZSkgewogICAgICAgIHZhciBmcmFtZSA9IEJhY2tib25lLiQoJzxpZnJhbWUgc3JjPSJqYXZhc2NyaXB0OjAiIHRhYmluZGV4PSItMSI+Jyk7CiAgICAgICAgdGhpcy5pZnJhbWUgPSBmcmFtZS5oaWRlKCkuYXBwZW5kVG8oJ2JvZHknKVswXS5jb250ZW50V2luZG93OwogICAgICAgIHRoaXMubmF2aWdhdGUoZnJhZ21lbnQpOwogICAgICB9CgogICAgICAvLyBEZXBlbmRpbmcgb24gd2hldGhlciB3ZSdyZSB1c2luZyBwdXNoU3RhdGUgb3IgaGFzaGVzLCBhbmQgd2hldGhlcgogICAgICAvLyAnb25oYXNoY2hhbmdlJyBpcyBzdXBwb3J0ZWQsIGRldGVybWluZSBob3cgd2UgY2hlY2sgdGhlIFVSTCBzdGF0ZS4KICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSkgewogICAgICAgIEJhY2tib25lLiQod2luZG93KS5vbigncG9wc3RhdGUnLCB0aGlzLmNoZWNrVXJsKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UgJiYgKCdvbmhhc2hjaGFuZ2UnIGluIHdpbmRvdykgJiYgIW9sZElFKSB7CiAgICAgICAgQmFja2JvbmUuJCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgdGhpcy5jaGVja1VybCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlKSB7CiAgICAgICAgdGhpcy5fY2hlY2tVcmxJbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMuY2hlY2tVcmwsIHRoaXMuaW50ZXJ2YWwpOwogICAgICB9CgogICAgICAvLyBEZXRlcm1pbmUgaWYgd2UgbmVlZCB0byBjaGFuZ2UgdGhlIGJhc2UgdXJsLCBmb3IgYSBwdXNoU3RhdGUgbGluawogICAgICAvLyBvcGVuZWQgYnkgYSBub24tcHVzaFN0YXRlIGJyb3dzZXIuCiAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudDsKICAgICAgdmFyIGxvYyA9IHRoaXMubG9jYXRpb247CgogICAgICAvLyBUcmFuc2l0aW9uIGZyb20gaGFzaENoYW5nZSB0byBwdXNoU3RhdGUgb3IgdmljZSB2ZXJzYSBpZiBib3RoIGFyZQogICAgICAvLyByZXF1ZXN0ZWQuCiAgICAgIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UgJiYgdGhpcy5fd2FudHNQdXNoU3RhdGUpIHsKCiAgICAgICAgLy8gSWYgd2UndmUgc3RhcnRlZCBvZmYgd2l0aCBhIHJvdXRlIGZyb20gYSBgcHVzaFN0YXRlYC1lbmFibGVkCiAgICAgICAgLy8gYnJvd3NlciwgYnV0IHdlJ3JlIGN1cnJlbnRseSBpbiBhIGJyb3dzZXIgdGhhdCBkb2Vzbid0IHN1cHBvcnQgaXQuLi4KICAgICAgICBpZiAoIXRoaXMuX2hhc1B1c2hTdGF0ZSAmJiAhdGhpcy5hdFJvb3QoKSkgewogICAgICAgICAgdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQobnVsbCwgdHJ1ZSk7CiAgICAgICAgICB0aGlzLmxvY2F0aW9uLnJlcGxhY2UodGhpcy5yb290ICsgJyMnICsgdGhpcy5mcmFnbWVudCk7CiAgICAgICAgICAvLyBSZXR1cm4gaW1tZWRpYXRlbHkgYXMgYnJvd3NlciB3aWxsIGRvIHJlZGlyZWN0IHRvIG5ldyB1cmwKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICAvLyBPciBpZiB3ZSd2ZSBzdGFydGVkIG91dCB3aXRoIGEgaGFzaC1iYXNlZCByb3V0ZSwgYnV0IHdlJ3JlIGN1cnJlbnRseQogICAgICAgIC8vIGluIGEgYnJvd3NlciB3aGVyZSBpdCBjb3VsZCBiZSBgcHVzaFN0YXRlYC1iYXNlZCBpbnN0ZWFkLi4uCiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUgJiYgdGhpcy5hdFJvb3QoKSAmJiBsb2MuaGFzaCkgewogICAgICAgICAgdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0SGFzaCgpLnJlcGxhY2Uocm91dGVTdHJpcHBlciwgJycpOwogICAgICAgICAgdGhpcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgZG9jdW1lbnQudGl0bGUsIHRoaXMucm9vdCArIHRoaXMuZnJhZ21lbnQpOwogICAgICAgIH0KCiAgICAgIH0KCiAgICAgIGlmICghdGhpcy5vcHRpb25zLnNpbGVudCkgcmV0dXJuIHRoaXMubG9hZFVybCgpOwogICAgfSwKCiAgICAvLyBEaXNhYmxlIEJhY2tib25lLmhpc3RvcnksIHBlcmhhcHMgdGVtcG9yYXJpbHkuIE5vdCB1c2VmdWwgaW4gYSByZWFsIGFwcCwKICAgIC8vIGJ1dCBwb3NzaWJseSB1c2VmdWwgZm9yIHVuaXQgdGVzdGluZyBSb3V0ZXJzLgogICAgc3RvcDogZnVuY3Rpb24oKSB7CiAgICAgIEJhY2tib25lLiQod2luZG93KS5vZmYoJ3BvcHN0YXRlJywgdGhpcy5jaGVja1VybCkub2ZmKCdoYXNoY2hhbmdlJywgdGhpcy5jaGVja1VybCk7CiAgICAgIGlmICh0aGlzLl9jaGVja1VybEludGVydmFsKSBjbGVhckludGVydmFsKHRoaXMuX2NoZWNrVXJsSW50ZXJ2YWwpOwogICAgICBIaXN0b3J5LnN0YXJ0ZWQgPSBmYWxzZTsKICAgIH0sCgogICAgLy8gQWRkIGEgcm91dGUgdG8gYmUgdGVzdGVkIHdoZW4gdGhlIGZyYWdtZW50IGNoYW5nZXMuIFJvdXRlcyBhZGRlZCBsYXRlcgogICAgLy8gbWF5IG92ZXJyaWRlIHByZXZpb3VzIHJvdXRlcy4KICAgIHJvdXRlOiBmdW5jdGlvbihyb3V0ZSwgY2FsbGJhY2spIHsKICAgICAgdGhpcy5oYW5kbGVycy51bnNoaWZ0KHtyb3V0ZTogcm91dGUsIGNhbGxiYWNrOiBjYWxsYmFja30pOwogICAgfSwKCiAgICAvLyBDaGVja3MgdGhlIGN1cnJlbnQgVVJMIHRvIHNlZSBpZiBpdCBoYXMgY2hhbmdlZCwgYW5kIGlmIGl0IGhhcywKICAgIC8vIGNhbGxzIGBsb2FkVXJsYCwgbm9ybWFsaXppbmcgYWNyb3NzIHRoZSBoaWRkZW4gaWZyYW1lLgogICAgY2hlY2tVcmw6IGZ1bmN0aW9uKGUpIHsKICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdldEZyYWdtZW50KCk7CiAgICAgIGlmIChjdXJyZW50ID09PSB0aGlzLmZyYWdtZW50ICYmIHRoaXMuaWZyYW1lKSB7CiAgICAgICAgY3VycmVudCA9IHRoaXMuZ2V0RnJhZ21lbnQodGhpcy5nZXRIYXNoKHRoaXMuaWZyYW1lKSk7CiAgICAgIH0KICAgICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuZnJhZ21lbnQpIHJldHVybiBmYWxzZTsKICAgICAgaWYgKHRoaXMuaWZyYW1lKSB0aGlzLm5hdmlnYXRlKGN1cnJlbnQpOwogICAgICB0aGlzLmxvYWRVcmwoKTsKICAgIH0sCgogICAgLy8gQXR0ZW1wdCB0byBsb2FkIHRoZSBjdXJyZW50IFVSTCBmcmFnbWVudC4gSWYgYSByb3V0ZSBzdWNjZWVkcyB3aXRoIGEKICAgIC8vIG1hdGNoLCByZXR1cm5zIGB0cnVlYC4gSWYgbm8gZGVmaW5lZCByb3V0ZXMgbWF0Y2hlcyB0aGUgZnJhZ21lbnQsCiAgICAvLyByZXR1cm5zIGBmYWxzZWAuCiAgICBsb2FkVXJsOiBmdW5jdGlvbihmcmFnbWVudCkgewogICAgICBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KGZyYWdtZW50KTsKICAgICAgcmV0dXJuIF8uYW55KHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uKGhhbmRsZXIpIHsKICAgICAgICBpZiAoaGFuZGxlci5yb3V0ZS50ZXN0KGZyYWdtZW50KSkgewogICAgICAgICAgaGFuZGxlci5jYWxsYmFjayhmcmFnbWVudCk7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKCiAgICAvLyBTYXZlIGEgZnJhZ21lbnQgaW50byB0aGUgaGFzaCBoaXN0b3J5LCBvciByZXBsYWNlIHRoZSBVUkwgc3RhdGUgaWYgdGhlCiAgICAvLyAncmVwbGFjZScgb3B0aW9uIGlzIHBhc3NlZC4gWW91IGFyZSByZXNwb25zaWJsZSBmb3IgcHJvcGVybHkgVVJMLWVuY29kaW5nCiAgICAvLyB0aGUgZnJhZ21lbnQgaW4gYWR2YW5jZS4KICAgIC8vCiAgICAvLyBUaGUgb3B0aW9ucyBvYmplY3QgY2FuIGNvbnRhaW4gYHRyaWdnZXI6IHRydWVgIGlmIHlvdSB3aXNoIHRvIGhhdmUgdGhlCiAgICAvLyByb3V0ZSBjYWxsYmFjayBiZSBmaXJlZCAobm90IHVzdWFsbHkgZGVzaXJhYmxlKSwgb3IgYHJlcGxhY2U6IHRydWVgLCBpZgogICAgLy8geW91IHdpc2ggdG8gbW9kaWZ5IHRoZSBjdXJyZW50IFVSTCB3aXRob3V0IGFkZGluZyBhbiBlbnRyeSB0byB0aGUgaGlzdG9yeS4KICAgIG5hdmlnYXRlOiBmdW5jdGlvbihmcmFnbWVudCwgb3B0aW9ucykgewogICAgICBpZiAoIUhpc3Rvcnkuc3RhcnRlZCkgcmV0dXJuIGZhbHNlOwogICAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucyA9PT0gdHJ1ZSkgb3B0aW9ucyA9IHt0cmlnZ2VyOiAhIW9wdGlvbnN9OwoKICAgICAgdmFyIHVybCA9IHRoaXMucm9vdCArIChmcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoZnJhZ21lbnQgfHwgJycpKTsKCiAgICAgIC8vIFN0cmlwIHRoZSBoYXNoIGZvciBtYXRjaGluZy4KICAgICAgZnJhZ21lbnQgPSBmcmFnbWVudC5yZXBsYWNlKHBhdGhTdHJpcHBlciwgJycpOwoKICAgICAgaWYgKHRoaXMuZnJhZ21lbnQgPT09IGZyYWdtZW50KSByZXR1cm47CiAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudDsKCiAgICAgIC8vIERvbid0IGluY2x1ZGUgYSB0cmFpbGluZyBzbGFzaCBvbiB0aGUgcm9vdC4KICAgICAgaWYgKGZyYWdtZW50ID09PSAnJyAmJiB1cmwgIT09ICcvJykgdXJsID0gdXJsLnNsaWNlKDAsIC0xKTsKCiAgICAgIC8vIElmIHB1c2hTdGF0ZSBpcyBhdmFpbGFibGUsIHdlIHVzZSBpdCB0byBzZXQgdGhlIGZyYWdtZW50IGFzIGEgcmVhbCBVUkwuCiAgICAgIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUpIHsKICAgICAgICB0aGlzLmhpc3Rvcnlbb3B0aW9ucy5yZXBsYWNlID8gJ3JlcGxhY2VTdGF0ZScgOiAncHVzaFN0YXRlJ10oe30sIGRvY3VtZW50LnRpdGxlLCB1cmwpOwoKICAgICAgLy8gSWYgaGFzaCBjaGFuZ2VzIGhhdmVuJ3QgYmVlbiBleHBsaWNpdGx5IGRpc2FibGVkLCB1cGRhdGUgdGhlIGhhc2gKICAgICAgLy8gZnJhZ21lbnQgdG8gc3RvcmUgaGlzdG9yeS4KICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UpIHsKICAgICAgICB0aGlzLl91cGRhdGVIYXNoKHRoaXMubG9jYXRpb24sIGZyYWdtZW50LCBvcHRpb25zLnJlcGxhY2UpOwogICAgICAgIGlmICh0aGlzLmlmcmFtZSAmJiAoZnJhZ21lbnQgIT09IHRoaXMuZ2V0RnJhZ21lbnQodGhpcy5nZXRIYXNoKHRoaXMuaWZyYW1lKSkpKSB7CiAgICAgICAgICAvLyBPcGVuaW5nIGFuZCBjbG9zaW5nIHRoZSBpZnJhbWUgdHJpY2tzIElFNyBhbmQgZWFybGllciB0byBwdXNoIGEKICAgICAgICAgIC8vIGhpc3RvcnkgZW50cnkgb24gaGFzaC10YWcgY2hhbmdlLiAgV2hlbiByZXBsYWNlIGlzIHRydWUsIHdlIGRvbid0CiAgICAgICAgICAvLyB3YW50IHRoaXMuCiAgICAgICAgICBpZighb3B0aW9ucy5yZXBsYWNlKSB0aGlzLmlmcmFtZS5kb2N1bWVudC5vcGVuKCkuY2xvc2UoKTsKICAgICAgICAgIHRoaXMuX3VwZGF0ZUhhc2godGhpcy5pZnJhbWUubG9jYXRpb24sIGZyYWdtZW50LCBvcHRpb25zLnJlcGxhY2UpOwogICAgICAgIH0KCiAgICAgIC8vIElmIHlvdSd2ZSB0b2xkIHVzIHRoYXQgeW91IGV4cGxpY2l0bHkgZG9uJ3Qgd2FudCBmYWxsYmFjayBoYXNoY2hhbmdlLQogICAgICAvLyBiYXNlZCBoaXN0b3J5LCB0aGVuIGBuYXZpZ2F0ZWAgYmVjb21lcyBhIHBhZ2UgcmVmcmVzaC4KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbi5hc3NpZ24odXJsKTsKICAgICAgfQogICAgICBpZiAob3B0aW9ucy50cmlnZ2VyKSByZXR1cm4gdGhpcy5sb2FkVXJsKGZyYWdtZW50KTsKICAgIH0sCgogICAgLy8gVXBkYXRlIHRoZSBoYXNoIGxvY2F0aW9uLCBlaXRoZXIgcmVwbGFjaW5nIHRoZSBjdXJyZW50IGVudHJ5LCBvciBhZGRpbmcKICAgIC8vIGEgbmV3IG9uZSB0byB0aGUgYnJvd3NlciBoaXN0b3J5LgogICAgX3VwZGF0ZUhhc2g6IGZ1bmN0aW9uKGxvY2F0aW9uLCBmcmFnbWVudCwgcmVwbGFjZSkgewogICAgICBpZiAocmVwbGFjZSkgewogICAgICAgIHZhciBocmVmID0gbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8oamF2YXNjcmlwdDp8IykuKiQvLCAnJyk7CiAgICAgICAgbG9jYXRpb24ucmVwbGFjZShocmVmICsgJyMnICsgZnJhZ21lbnQpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFNvbWUgYnJvd3NlcnMgcmVxdWlyZSB0aGF0IGBoYXNoYCBjb250YWlucyBhIGxlYWRpbmcgIy4KICAgICAgICBsb2NhdGlvbi5oYXNoID0gJyMnICsgZnJhZ21lbnQ7CiAgICAgIH0KICAgIH0KCiAgfSk7CgogIC8vIENyZWF0ZSB0aGUgZGVmYXVsdCBCYWNrYm9uZS5oaXN0b3J5LgogIEJhY2tib25lLmhpc3RvcnkgPSBuZXcgSGlzdG9yeTsKCiAgLy8gSGVscGVycwogIC8vIC0tLS0tLS0KCiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvcnJlY3RseSBzZXQgdXAgdGhlIHByb3RvdHlwZSBjaGFpbiwgZm9yIHN1YmNsYXNzZXMuCiAgLy8gU2ltaWxhciB0byBgZ29vZy5pbmhlcml0c2AsIGJ1dCB1c2VzIGEgaGFzaCBvZiBwcm90b3R5cGUgcHJvcGVydGllcyBhbmQKICAvLyBjbGFzcyBwcm9wZXJ0aWVzIHRvIGJlIGV4dGVuZGVkLgogIHZhciBleHRlbmQgPSBmdW5jdGlvbihwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogICAgdmFyIHBhcmVudCA9IHRoaXM7CiAgICB2YXIgY2hpbGQ7CgogICAgLy8gVGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgbmV3IHN1YmNsYXNzIGlzIGVpdGhlciBkZWZpbmVkIGJ5IHlvdQogICAgLy8gKHRoZSAiY29uc3RydWN0b3IiIHByb3BlcnR5IGluIHlvdXIgYGV4dGVuZGAgZGVmaW5pdGlvbiksIG9yIGRlZmF1bHRlZAogICAgLy8gYnkgdXMgdG8gc2ltcGx5IGNhbGwgdGhlIHBhcmVudCdzIGNvbnN0cnVjdG9yLgogICAgaWYgKHByb3RvUHJvcHMgJiYgXy5oYXMocHJvdG9Qcm9wcywgJ2NvbnN0cnVjdG9yJykpIHsKICAgICAgY2hpbGQgPSBwcm90b1Byb3BzLmNvbnN0cnVjdG9yOwogICAgfSBlbHNlIHsKICAgICAgY2hpbGQgPSBmdW5jdGlvbigpeyByZXR1cm4gcGFyZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07CiAgICB9CgogICAgLy8gQWRkIHN0YXRpYyBwcm9wZXJ0aWVzIHRvIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgaWYgc3VwcGxpZWQuCiAgICBfLmV4dGVuZChjaGlsZCwgcGFyZW50LCBzdGF0aWNQcm9wcyk7CgogICAgLy8gU2V0IHRoZSBwcm90b3R5cGUgY2hhaW4gdG8gaW5oZXJpdCBmcm9tIGBwYXJlbnRgLCB3aXRob3V0IGNhbGxpbmcKICAgIC8vIGBwYXJlbnRgJ3MgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAgICB2YXIgU3Vycm9nYXRlID0gZnVuY3Rpb24oKXsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9OwogICAgU3Vycm9nYXRlLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7CiAgICBjaGlsZC5wcm90b3R5cGUgPSBuZXcgU3Vycm9nYXRlOwoKICAgIC8vIEFkZCBwcm90b3R5cGUgcHJvcGVydGllcyAoaW5zdGFuY2UgcHJvcGVydGllcykgdG8gdGhlIHN1YmNsYXNzLAogICAgLy8gaWYgc3VwcGxpZWQuCiAgICBpZiAocHJvdG9Qcm9wcykgXy5leHRlbmQoY2hpbGQucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKCiAgICAvLyBTZXQgYSBjb252ZW5pZW5jZSBwcm9wZXJ0eSBpbiBjYXNlIHRoZSBwYXJlbnQncyBwcm90b3R5cGUgaXMgbmVlZGVkCiAgICAvLyBsYXRlci4KICAgIGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7CgogICAgcmV0dXJuIGNoaWxkOwogIH07CgogIC8vIFNldCB1cCBpbmhlcml0YW5jZSBmb3IgdGhlIG1vZGVsLCBjb2xsZWN0aW9uLCByb3V0ZXIsIHZpZXcgYW5kIGhpc3RvcnkuCiAgTW9kZWwuZXh0ZW5kID0gQ29sbGVjdGlvbi5leHRlbmQgPSBSb3V0ZXIuZXh0ZW5kID0gVmlldy5leHRlbmQgPSBIaXN0b3J5LmV4dGVuZCA9IGV4dGVuZDsKCiAgLy8gVGhyb3cgYW4gZXJyb3Igd2hlbiBhIFVSTCBpcyBuZWVkZWQsIGFuZCBub25lIGlzIHN1cHBsaWVkLgogIHZhciB1cmxFcnJvciA9IGZ1bmN0aW9uKCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdBICJ1cmwiIHByb3BlcnR5IG9yIGZ1bmN0aW9uIG11c3QgYmUgc3BlY2lmaWVkJyk7CiAgfTsKCiAgLy8gV3JhcCBhbiBvcHRpb25hbCBlcnJvciBjYWxsYmFjayB3aXRoIGEgZmFsbGJhY2sgZXJyb3IgZXZlbnQuCiAgdmFyIHdyYXBFcnJvciA9IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7CiAgICB2YXIgZXJyb3IgPSBvcHRpb25zLmVycm9yOwogICAgb3B0aW9ucy5lcnJvciA9IGZ1bmN0aW9uKHJlc3ApIHsKICAgICAgaWYgKGVycm9yKSBlcnJvcihtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgIG1vZGVsLnRyaWdnZXIoJ2Vycm9yJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgfTsKICB9OwoKICByZXR1cm4gQmFja2JvbmU7Cgp9KSk7CgovLyBWZWN0b3JpemVyLgovLyAtLS0tLS0tLS0tLQoKLy8gQSB0aW55IGxpYnJhcnkgZm9yIG1ha2luZyB5b3VyIGxpdmUgZWFzaWVyIHdoZW4gZGVhbGluZyB3aXRoIFNWRy4KCi8vIENvcHlyaWdodCDCqSAyMDEyIC0gMjAxNCBjbGllbnQgSU8gKGh0dHA6Ly9jbGllbnQuaW8pCgooZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkgewoKICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsKICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuCiAgICAgICAgZGVmaW5lKFtdLCBmYWN0b3J5KTsKICAgICAgICAKICAgIH0gZWxzZSB7CiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzLgogICAgICAgIHJvb3QuVmVjdG9yaXplciA9IHJvb3QuViA9IGZhY3RvcnkoKTsKICAgIH0KCn0odGhpcywgZnVuY3Rpb24oKSB7CgogICAgLy8gV2VsbCwgaWYgU1ZHIGlzIG5vdCBzdXBwb3J0ZWQsIHRoaXMgbGlicmFyeSBpcyB1c2VsZXNzLgogICAgdmFyIFNWR3N1cHBvcnRlZCA9ICEhKHdpbmRvdy5TVkdBbmdsZSB8fCBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9mZWF0dXJlI0Jhc2ljU3RydWN0dXJlJywgJzEuMScpKTsKCiAgICAvLyBYTUwgbmFtZXNwYWNlcy4KICAgIHZhciBucyA9IHsKICAgICAgICB4bWxuczogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywKICAgICAgICB4bGluazogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnCiAgICB9OwogICAgLy8gU1ZHIHZlcnNpb24uCiAgICB2YXIgU1ZHdmVyc2lvbiA9ICcxLjEnOwoKICAgIC8vIEEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgY2xpZW50IHNlc3Npb24gd2l0aCBldmVyeSBjYWxsLgogICAgdmFyIGlkQ291bnRlciA9IDA7CiAgICBmdW5jdGlvbiB1bmlxdWVJZCgpIHsKICAgICAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnOwogICAgICAgIHJldHVybiAndi0nICsgaWQ7CiAgICB9CgogICAgLy8gQ3JlYXRlIGFuIFNWRyBkb2N1bWVudCBlbGVtZW50LgogICAgLy8gSWYgYGNvbnRlbnRgIGlzIHBhc3NlZCwgaXQgd2lsbCBiZSB1c2VkIGFzIHRoZSBTVkcgY29udGVudCBvZiB0aGUgYDxzdmc+YCByb290IGVsZW1lbnQuCiAgICBmdW5jdGlvbiBjcmVhdGVTdmdEb2N1bWVudChjb250ZW50KSB7CgogICAgICAgIHZhciBzdmcgPSAnPHN2ZyB4bWxucz0iJyArIG5zLnhtbG5zICsgJyIgeG1sbnM6eGxpbms9IicgKyBucy54bGluayArICciIHZlcnNpb249IicgKyBTVkd2ZXJzaW9uICsgJyI+JyArIChjb250ZW50IHx8ICcnKSArICc8L3N2Zz4nOwogICAgICAgIHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7CiAgICAgICAgcGFyc2VyLmFzeW5jID0gZmFsc2U7CglyZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhzdmcsICd0ZXh0L3htbCcpLmRvY3VtZW50RWxlbWVudDsKICAgIH0KCiAgICAvLyBDcmVhdGUgU1ZHIGVsZW1lbnQuCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudChlbCwgYXR0cnMsIGNoaWxkcmVuKSB7CgogICAgICAgIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgCiAgICAgICAgLy8gSWYgYGVsYCBpcyBhbiBvYmplY3QsIGl0IGlzIHByb2JhYmx5IGEgbmF0aXZlIFNWRyBlbGVtZW50LiBXcmFwIGl0IHRvIFZFbGVtZW50LgogICAgICAgIGlmICh0eXBlb2YgZWwgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgVkVsZW1lbnQoZWwpOwogICAgICAgIH0KICAgICAgICBhdHRycyA9IGF0dHJzIHx8IHt9OwoKICAgICAgICAvLyBJZiBgZWxgIGlzIGEgYCdzdmcnYCBvciBgJ1NWRydgIHN0cmluZywgY3JlYXRlIGEgbmV3IFNWRyBjYW52YXMuCiAgICAgICAgaWYgKGVsLnRvTG93ZXJDYXNlKCkgPT09ICdzdmcnKSB7CiAgICAgICAgICAgIAoJICAgIHJldHVybiBuZXcgVkVsZW1lbnQoY3JlYXRlU3ZnRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSBpZiAoZWxbMF0gPT09ICc8JykgewogICAgICAgICAgICAvLyBDcmVhdGUgZWxlbWVudCBmcm9tIGFuIFNWRyBzdHJpbmcuCiAgICAgICAgICAgIC8vIEFsbG93cyBjb25zdHJ1Y3RzIG9mIHR5cGU6IGBkb2N1bWVudC5hcHBlbmRDaGlsZChWZWN0b3JpemVyKCc8cmVjdD48L3JlY3Q+Jykubm9kZSlgLgogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHN2Z0RvYyA9IGNyZWF0ZVN2Z0RvY3VtZW50KGVsKTsKCiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBgY3JlYXRlRWxlbWVudCgpYCBtaWdodCBhbHNvIHJldHVybiBhbiBhcnJheSBzaG91bGQgdGhlIFNWRyBzdHJpbmcgcGFzc2VkIGFzCiAgICAgICAgICAgIC8vIHRoZSBmaXJzdCBhcmd1bWVudCBjb250YWluIG1vcmUgdGhlbiBvbmUgcm9vdCBlbGVtZW50LgogICAgICAgICAgICBpZiAoc3ZnRG9jLmNoaWxkTm9kZXMubGVuZ3RoID4gMSkgewoKICAgICAgICAgICAgICAgIC8vIE1hcCBjaGlsZCBub2RlcyB0byBgVkVsZW1lbnRgcy4KICAgICAgICAgICAgICAgIHZhciByZXQgPSBbXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzdmdEb2MuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewoKICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gc3ZnRG9jLmNoaWxkTm9kZXNbaV07CiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2gobmV3IFZFbGVtZW50KGRvY3VtZW50LmltcG9ydE5vZGUoY2hpbGROb2RlLCB0cnVlKSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIG5ldyBWRWxlbWVudChkb2N1bWVudC5pbXBvcnROb2RlKHN2Z0RvYy5maXJzdENoaWxkLCB0cnVlKSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zLnhtbG5zLCBlbCk7CgogICAgICAgIC8vIFNldCBhdHRyaWJ1dGVzLgogICAgICAgIGZvciAodmFyIGtleSBpbiBhdHRycykgewoKICAgICAgICAgICAgc2V0QXR0cmlidXRlKGVsLCBrZXksIGF0dHJzW2tleV0pOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBOb3JtYWxpemUgYGNoaWxkcmVuYCBhcnJheS4KICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGNoaWxkcmVuKSAhPSAnW29iamVjdCBBcnJheV0nKSBjaGlsZHJlbiA9IFtjaGlsZHJlbl07CgogICAgICAgIC8vIEFwcGVuZCBjaGlsZHJlbiBpZiB0aGV5IGFyZSBzcGVjaWZpZWQuCiAgICAgICAgdmFyIGkgPSAwLCBsZW4gPSAoY2hpbGRyZW5bMF0gJiYgY2hpbGRyZW4ubGVuZ3RoKSB8fCAwLCBjaGlsZDsKICAgICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07CiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNoaWxkIGluc3RhbmNlb2YgVkVsZW1lbnQgPyBjaGlsZC5ub2RlIDogY2hpbGQpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gbmV3IFZFbGVtZW50KGVsKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUoZWwsIG5hbWUsIHZhbHVlKSB7CiAgICAgICAgCiAgICAgICAgaWYgKG5hbWUuaW5kZXhPZignOicpID4gLTEpIHsKICAgICAgICAgICAgLy8gQXR0cmlidXRlIG5hbWVzIGNhbiBiZSBuYW1lc3BhY2VkLiBFLmcuIGBpbWFnZWAgZWxlbWVudHMKICAgICAgICAgICAgLy8gaGF2ZSBhIGB4bGluazpocmVmYCBhdHRyaWJ1dGUgdG8gc2V0IHRoZSBzb3VyY2Ugb2YgdGhlIGltYWdlLgogICAgICAgICAgICB2YXIgY29tYmluZWRLZXkgPSBuYW1lLnNwbGl0KCc6Jyk7CiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKG5zW2NvbWJpbmVkS2V5WzBdXSwgY29tYmluZWRLZXlbMV0sIHZhbHVlKTsKCiAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnaWQnKSB7CiAgICAgICAgICAgIGVsLmlkID0gdmFsdWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGFyc2VUcmFuc2Zvcm1TdHJpbmcodHJhbnNmb3JtKSB7CiAgICAgICAgdmFyIHRyYW5zbGF0ZSwKICAgICAgICAgICAgcm90YXRlLAogICAgICAgICAgICBzY2FsZTsKCiAgICAgICAgaWYgKHRyYW5zZm9ybSkgewoKICAgICAgICAgICAgdmFyIHNlcGFyYXRvciA9IC9bICxdKy87CgogICAgICAgICAgICB2YXIgdHJhbnNsYXRlTWF0Y2ggPSB0cmFuc2Zvcm0ubWF0Y2goL3RyYW5zbGF0ZVwoKC4qKVwpLyk7CiAgICAgICAgICAgIGlmICh0cmFuc2xhdGVNYXRjaCkgewogICAgICAgICAgICAgICAgdHJhbnNsYXRlID0gdHJhbnNsYXRlTWF0Y2hbMV0uc3BsaXQoc2VwYXJhdG9yKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcm90YXRlTWF0Y2ggPSB0cmFuc2Zvcm0ubWF0Y2goL3JvdGF0ZVwoKC4qKVwpLyk7CiAgICAgICAgICAgIGlmIChyb3RhdGVNYXRjaCkgewogICAgICAgICAgICAgICAgcm90YXRlID0gcm90YXRlTWF0Y2hbMV0uc3BsaXQoc2VwYXJhdG9yKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgc2NhbGVNYXRjaCA9IHRyYW5zZm9ybS5tYXRjaCgvc2NhbGVcKCguKilcKS8pOwogICAgICAgICAgICBpZiAoc2NhbGVNYXRjaCkgewogICAgICAgICAgICAgICAgc2NhbGUgPSBzY2FsZU1hdGNoWzFdLnNwbGl0KHNlcGFyYXRvcik7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBzeCA9IChzY2FsZSAmJiBzY2FsZVswXSkgPyBwYXJzZUZsb2F0KHNjYWxlWzBdKSA6IDE7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgdHJhbnNsYXRlOiB7CiAgICAgICAgICAgICAgICB0eDogKHRyYW5zbGF0ZSAmJiB0cmFuc2xhdGVbMF0pID8gcGFyc2VJbnQodHJhbnNsYXRlWzBdLCAxMCkgOiAwLAogICAgICAgICAgICAgICAgdHk6ICh0cmFuc2xhdGUgJiYgdHJhbnNsYXRlWzFdKSA/IHBhcnNlSW50KHRyYW5zbGF0ZVsxXSwgMTApIDogMAogICAgICAgICAgICB9LAogICAgICAgICAgICByb3RhdGU6IHsKICAgICAgICAgICAgICAgIGFuZ2xlOiAocm90YXRlICYmIHJvdGF0ZVswXSkgPyBwYXJzZUludChyb3RhdGVbMF0sIDEwKSA6IDAsCiAgICAgICAgICAgICAgICBjeDogKHJvdGF0ZSAmJiByb3RhdGVbMV0pID8gcGFyc2VJbnQocm90YXRlWzFdLCAxMCkgOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICBjeTogKHJvdGF0ZSAmJiByb3RhdGVbMl0pID8gcGFyc2VJbnQocm90YXRlWzJdLCAxMCkgOiB1bmRlZmluZWQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2NhbGU6IHsKICAgICAgICAgICAgICAgIHN4OiBzeCwKICAgICAgICAgICAgICAgIHN5OiAoc2NhbGUgJiYgc2NhbGVbMV0pID8gcGFyc2VGbG9hdChzY2FsZVsxXSkgOiBzeAogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH0KCgogICAgLy8gTWF0cml4IGRlY29tcG9zaXRpb24uCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICBmdW5jdGlvbiBkZWx0YVRyYW5zZm9ybVBvaW50KG1hdHJpeCwgcG9pbnQpICB7CiAgICAgICAgCgl2YXIgZHggPSBwb2ludC54ICogbWF0cml4LmEgKyBwb2ludC55ICogbWF0cml4LmMgKyAwOwoJdmFyIGR5ID0gcG9pbnQueCAqIG1hdHJpeC5iICsgcG9pbnQueSAqIG1hdHJpeC5kICsgMDsKCXJldHVybiB7IHg6IGR4LCB5OiBkeSB9OwogICAgfQoKICAgIGZ1bmN0aW9uIGRlY29tcG9zZU1hdHJpeChtYXRyaXgpIHsKCiAgICAgICAgLy8gQHNlZSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS8yMDUyMjQ3CiAgICAgICAgCiAgICAgICAgLy8gY2FsY3VsYXRlIGRlbHRhIHRyYW5zZm9ybSBwb2ludAoJdmFyIHB4ID0gZGVsdGFUcmFuc2Zvcm1Qb2ludChtYXRyaXgsIHsgeDogMCwgeTogMSB9KTsKCXZhciBweSA9IGRlbHRhVHJhbnNmb3JtUG9pbnQobWF0cml4LCB7IHg6IDEsIHk6IDAgfSk7CiAgICAgICAgCgkvLyBjYWxjdWxhdGUgc2tldwoJdmFyIHNrZXdYID0gKCgxODAgLyBNYXRoLlBJKSAqIE1hdGguYXRhbjIocHgueSwgcHgueCkgLSA5MCk7Cgl2YXIgc2tld1kgPSAoKDE4MCAvIE1hdGguUEkpICogTWF0aC5hdGFuMihweS55LCBweS54KSk7CiAgICAgICAgCglyZXR1cm4gewogICAgICAgICAgICAKCSAgICB0cmFuc2xhdGVYOiBtYXRyaXguZSwKCSAgICB0cmFuc2xhdGVZOiBtYXRyaXguZiwKCSAgICBzY2FsZVg6IE1hdGguc3FydChtYXRyaXguYSAqIG1hdHJpeC5hICsgbWF0cml4LmIgKiBtYXRyaXguYiksCgkgICAgc2NhbGVZOiBNYXRoLnNxcnQobWF0cml4LmMgKiBtYXRyaXguYyArIG1hdHJpeC5kICogbWF0cml4LmQpLAoJICAgIHNrZXdYOiBza2V3WCwKCSAgICBza2V3WTogc2tld1ksCgkgICAgcm90YXRpb246IHNrZXdYIC8vIHJvdGF0aW9uIGlzIHRoZSBzYW1lIGFzIHNrZXcgeAoJfTsKICAgIH0KICAgIAogICAgLy8gVkVsZW1lbnQuCiAgICAvLyAtLS0tLS0tLS0KCiAgICBmdW5jdGlvbiBWRWxlbWVudChlbCkgewogICAgICAgIHRoaXMubm9kZSA9IGVsOwogICAgICAgIGlmICghdGhpcy5ub2RlLmlkKSB7CiAgICAgICAgICAgIHRoaXMubm9kZS5pZCA9IHVuaXF1ZUlkKCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIFZFbGVtZW50IHB1YmxpYyBBUEkuCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIFZFbGVtZW50LnByb3RvdHlwZSA9IHsKICAgICAgICAKICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHR4LCB0eSwgb3B0KSB7CgogICAgICAgICAgICBvcHQgPSBvcHQgfHwge307CiAgICAgICAgICAgIHR5ID0gdHkgfHwgMDsKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1BdHRyID0gdGhpcy5hdHRyKCd0cmFuc2Zvcm0nKSB8fCAnJywKICAgICAgICAgICAgICAgIHRyYW5zZm9ybSA9IHBhcnNlVHJhbnNmb3JtU3RyaW5nKHRyYW5zZm9ybUF0dHIpOwoKICAgICAgICAgICAgLy8gSXMgaXQgYSBnZXR0ZXI/CiAgICAgICAgICAgIGlmICh0eXBlb2YgdHggPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtLnRyYW5zbGF0ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgdHJhbnNmb3JtQXR0ciA9IHRyYW5zZm9ybUF0dHIucmVwbGFjZSgvdHJhbnNsYXRlXChbXlwpXSpcKS9nLCAnJykudHJpbSgpOwoKICAgICAgICAgICAgdmFyIG5ld1R4ID0gb3B0LmFic29sdXRlID8gdHggOiB0cmFuc2Zvcm0udHJhbnNsYXRlLnR4ICsgdHgsCiAgICAgICAgICAgICAgICBuZXdUeSA9IG9wdC5hYnNvbHV0ZSA/IHR5IDogdHJhbnNmb3JtLnRyYW5zbGF0ZS50eSArIHR5LAogICAgICAgICAgICAgICAgbmV3VHJhbnNsYXRlID0gJ3RyYW5zbGF0ZSgnICsgbmV3VHggKyAnLCcgKyBuZXdUeSArICcpJzsKCiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBgdHJhbnNsYXRlKClgIGlzIGFsd2F5cyB0aGUgZmlyc3QgdHJhbnNmb3JtYXRpb24uIFRoaXMgaXMKICAgICAgICAgICAgLy8gdXN1YWxseSB0aGUgZGVzaXJlZCBjYXNlLgogICAgICAgICAgICB0aGlzLmF0dHIoJ3RyYW5zZm9ybScsIChuZXdUcmFuc2xhdGUgKyAnICcgKyB0cmFuc2Zvcm1BdHRyKS50cmltKCkpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICByb3RhdGU6IGZ1bmN0aW9uKGFuZ2xlLCBjeCwgY3ksIG9wdCkgewoKICAgICAgICAgICAgb3B0ID0gb3B0IHx8IHt9OwoKICAgICAgICAgICAgdmFyIHRyYW5zZm9ybUF0dHIgPSB0aGlzLmF0dHIoJ3RyYW5zZm9ybScpIHx8ICcnLAogICAgICAgICAgICAgICAgdHJhbnNmb3JtID0gcGFyc2VUcmFuc2Zvcm1TdHJpbmcodHJhbnNmb3JtQXR0cik7CgogICAgICAgICAgICAvLyBJcyBpdCBhIGdldHRlcj8KICAgICAgICAgICAgaWYgKHR5cGVvZiBhbmdsZSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm0ucm90YXRlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICB0cmFuc2Zvcm1BdHRyID0gdHJhbnNmb3JtQXR0ci5yZXBsYWNlKC9yb3RhdGVcKFteXCldKlwpL2csICcnKS50cmltKCk7CgogICAgICAgICAgICBhbmdsZSAlPSAzNjA7CgogICAgICAgICAgICB2YXIgbmV3QW5nbGUgPSBvcHQuYWJzb2x1dGUgPyBhbmdsZTogdHJhbnNmb3JtLnJvdGF0ZS5hbmdsZSArIGFuZ2xlLAogICAgICAgICAgICAgICAgbmV3T3JpZ2luID0gKGN4ICE9PSB1bmRlZmluZWQgJiYgY3kgIT09IHVuZGVmaW5lZCkgPyAnLCcgKyBjeCArICcsJyArIGN5IDogJycsCiAgICAgICAgICAgICAgICBuZXdSb3RhdGUgPSAncm90YXRlKCcgKyBuZXdBbmdsZSArIG5ld09yaWdpbiArICcpJzsKCiAgICAgICAgICAgIHRoaXMuYXR0cigndHJhbnNmb3JtJywgKHRyYW5zZm9ybUF0dHIgKyAnICcgKyBuZXdSb3RhdGUpLnRyaW0oKSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIC8vIE5vdGUgdGhhdCBgc2NhbGVgIGFzIHRoZSBvbmx5IHRyYW5zZm9ybWF0aW9uIGRvZXMgbm90IGNvbWJpbmUgd2l0aCBwcmV2aW91cyB2YWx1ZXMuCiAgICAgICAgc2NhbGU6IGZ1bmN0aW9uKHN4LCBzeSkgewogICAgICAgICAgICBzeSA9ICh0eXBlb2Ygc3kgPT09ICd1bmRlZmluZWQnKSA/IHN4IDogc3k7CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgdHJhbnNmb3JtQXR0ciA9IHRoaXMuYXR0cigndHJhbnNmb3JtJykgfHwgJycsCiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0gPSBwYXJzZVRyYW5zZm9ybVN0cmluZyh0cmFuc2Zvcm1BdHRyKTsKCiAgICAgICAgICAgIC8vIElzIGl0IGEgZ2V0dGVyPwogICAgICAgICAgICBpZiAodHlwZW9mIHN4ID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybS5zY2FsZTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgdHJhbnNmb3JtQXR0ciA9IHRyYW5zZm9ybUF0dHIucmVwbGFjZSgvc2NhbGVcKFteXCldKlwpL2csICcnKS50cmltKCk7CgogICAgICAgICAgICB2YXIgbmV3U2NhbGUgPSAnc2NhbGUoJyArIHN4ICsgJywnICsgc3kgKyAnKSc7CgogICAgICAgICAgICB0aGlzLmF0dHIoJ3RyYW5zZm9ybScsICh0cmFuc2Zvcm1BdHRyICsgJyAnICsgbmV3U2NhbGUpLnRyaW0oKSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIC8vIEdldCBTVkdSZWN0IHRoYXQgY29udGFpbnMgY29vcmRpbmF0ZXMgYW5kIGRpbWVuc2lvbiBvZiB0aGUgcmVhbCBib3VuZGluZyBib3gsCiAgICAgICAgLy8gaS5lLiBhZnRlciB0cmFuc2Zvcm1hdGlvbnMgYXJlIGFwcGxpZWQuCiAgICAgICAgLy8gSWYgYHRhcmdldGAgaXMgc3BlY2lmaWVkLCBib3VuZGluZyBib3ggd2lsbCBiZSBjb21wdXRlZCByZWxhdGl2ZWx5IHRvIGB0YXJnZXRgIGVsZW1lbnQuCiAgICAgICAgYmJveDogZnVuY3Rpb24od2l0aG91dFRyYW5zZm9ybWF0aW9ucywgdGFyZ2V0KSB7CgogICAgICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgaW4gdGhlIGxpdmUgRE9NLCBpdCBkb2VzIG5vdCBoYXZlIGEgYm91bmRpbmcgYm94IGRlZmluZWQgYW5kCiAgICAgICAgICAgIC8vIHNvIGZhbGwgYmFjayB0byAnemVybycgZGltZW5zaW9uIGVsZW1lbnQuCiAgICAgICAgICAgIGlmICghdGhpcy5ub2RlLm93bmVyU1ZHRWxlbWVudCkgcmV0dXJuIHsgeDogMCwgeTogMCwgd2lkdGg6IDAsIGhlaWdodDogMCB9OwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIGJveDsKICAgICAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgICAgICBib3ggPSB0aGlzLm5vZGUuZ2V0QkJveCgpOwoKCQkvLyBPcGVyYSByZXR1cm5zIGluZmluaXRlIHZhbHVlcyBpbiBzb21lIGNhc2VzLgoJCS8vIE5vdGUgdGhhdCBJbmZpbml0eSB8IDAgcHJvZHVjZXMgMCBhcyBvcHBvc2VkIHRvIEluZmluaXR5IHx8IDAuCgkJLy8gV2UgYWxzbyBoYXZlIHRvIGNyZWF0ZSBuZXcgb2JqZWN0IGFzIHRoZSBzdGFuZGFyZCBzYXlzIHRoYXQgeW91IGNhbid0CgkJLy8gbW9kaWZ5IHRoZSBhdHRyaWJ1dGVzIG9mIGEgYmJveC4KCQlib3ggPSB7IHg6IGJveC54IHwgMCwgeTogYm94LnkgfCAwLCB3aWR0aDogYm94LndpZHRoIHwgMCwgaGVpZ2h0OiBib3guaGVpZ2h0IHwgMH07CgogICAgICAgICAgICB9IGNhdGNoIChlKSB7CgogICAgICAgICAgICAgICAgLy8gRmFsbGJhY2sgZm9yIElFLgogICAgICAgICAgICAgICAgYm94ID0gewogICAgICAgICAgICAgICAgICAgIHg6IHRoaXMubm9kZS5jbGllbnRMZWZ0LAogICAgICAgICAgICAgICAgICAgIHk6IHRoaXMubm9kZS5jbGllbnRUb3AsCiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMubm9kZS5jbGllbnRXaWR0aCwKICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMubm9kZS5jbGllbnRIZWlnaHQKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh3aXRob3V0VHJhbnNmb3JtYXRpb25zKSB7CgogICAgICAgICAgICAgICAgcmV0dXJuIGJveDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIG1hdHJpeCA9IHRoaXMubm9kZS5nZXRUcmFuc2Zvcm1Ub0VsZW1lbnQodGFyZ2V0IHx8IHRoaXMubm9kZS5vd25lclNWR0VsZW1lbnQpOwogICAgICAgICAgICB2YXIgY29ybmVycyA9IFtdOwogICAgICAgICAgICB2YXIgcG9pbnQgPSB0aGlzLm5vZGUub3duZXJTVkdFbGVtZW50LmNyZWF0ZVNWR1BvaW50KCk7CgoKICAgICAgICAgICAgcG9pbnQueCA9IGJveC54OwogICAgICAgICAgICBwb2ludC55ID0gYm94Lnk7CiAgICAgICAgICAgIGNvcm5lcnMucHVzaChwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBwb2ludC54ID0gYm94LnggKyBib3gud2lkdGg7CiAgICAgICAgICAgIHBvaW50LnkgPSBib3gueTsKICAgICAgICAgICAgY29ybmVycy5wdXNoKHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHBvaW50LnggPSBib3gueCArIGJveC53aWR0aDsKICAgICAgICAgICAgcG9pbnQueSA9IGJveC55ICsgYm94LmhlaWdodDsKICAgICAgICAgICAgY29ybmVycy5wdXNoKHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHBvaW50LnggPSBib3gueDsKICAgICAgICAgICAgcG9pbnQueSA9IGJveC55ICsgYm94LmhlaWdodDsKICAgICAgICAgICAgY29ybmVycy5wdXNoKHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpKTsKCiAgICAgICAgICAgIHZhciBtaW5YID0gY29ybmVyc1swXS54OwogICAgICAgICAgICB2YXIgbWF4WCA9IG1pblg7CiAgICAgICAgICAgIHZhciBtaW5ZID0gY29ybmVyc1swXS55OwogICAgICAgICAgICB2YXIgbWF4WSA9IG1pblk7CiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgKHZhciBpID0gMSwgbGVuID0gY29ybmVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgeCA9IGNvcm5lcnNbaV0ueDsKICAgICAgICAgICAgICAgIHZhciB5ID0gY29ybmVyc1tpXS55OwoKICAgICAgICAgICAgICAgIGlmICh4IDwgbWluWCkgewogICAgICAgICAgICAgICAgICAgIG1pblggPSB4OwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4ID4gbWF4WCkgewogICAgICAgICAgICAgICAgICAgIG1heFggPSB4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiAoeSA8IG1pblkpIHsKICAgICAgICAgICAgICAgICAgICBtaW5ZID0geTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeSA+IG1heFkpIHsKICAgICAgICAgICAgICAgICAgICBtYXhZID0geTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHg6IG1pblgsCiAgICAgICAgICAgICAgICB5OiBtaW5ZLAogICAgICAgICAgICAgICAgd2lkdGg6IG1heFggLSBtaW5YLAogICAgICAgICAgICAgICAgaGVpZ2h0OiBtYXhZIC0gbWluWQogICAgICAgICAgICB9OwogICAgICAgIH0sCgogICAgICAgIHRleHQ6IGZ1bmN0aW9uKGNvbnRlbnQsIG9wdCkgewoKCSAgICBvcHQgPSBvcHQgfHwge307CiAgICAgICAgICAgIHZhciBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xuJyk7CgkgICAgdmFyIGkgPSAwOwogICAgICAgICAgICB2YXIgdHNwYW47CgogICAgICAgICAgICAvLyBgYWxpZ25tZW50LWJhc2VsaW5lYCBkb2VzIG5vdCB3b3JrIGluIEZpcmVmb3guCgkgICAgLy8gU2V0dGluZyBgZG9taW5hbnQtYmFzZWxpbmVgIG9uIHRoZSBgPHRleHQ+YCBlbGVtZW50IGRvZXNuJ3Qgd29yayBpbiBJRTkuCiAgICAgICAgICAgIC8vIEluIG9yZGVyIHRvIGhhdmUgdGhlIDAsMCBjb29yZGluYXRlIG9mIHRoZSBgPHRleHQ+YCBlbGVtZW50IChvciB0aGUgZmlyc3QgYDx0c3Bhbj5gKQoJICAgIC8vIGluIHRoZSB0b3AgbGVmdCBjb3JuZXIgd2UgdHJhbnNsYXRlIHRoZSBgPHRleHQ+YCBlbGVtZW50IGJ5IGAwLjhlbWAuCgkgICAgLy8gU2VlIGBodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvV0cvd2lraS9Ib3dfdG9fZGV0ZXJtaW5lX2RvbWluYW50X2Jhc2VsaW5lYC4KCSAgICAvLyBTZWUgYWxzbyBgaHR0cDovL2FwaWtlLmNhL3Byb2dfc3ZnX3RleHRfc3R5bGUuaHRtbGAuCgkgICAgdGhpcy5hdHRyKCd5JywgJzAuOGVtJyk7CgogICAgICAgICAgICAvLyBBbiBlbXB0eSB0ZXh0IGdldHMgcmVuZGVyZWQgaW50byB0aGUgRE9NIGluIHdlYmtpdC1iYXNlZCBicm93c2Vycy4KICAgICAgICAgICAgLy8gSW4gb3JkZXIgdG8gdW5pZnkgdGhpcyBiZWhhdmlvdXIgYWNyb3NzIGFsbCBicm93c2VycwogICAgICAgICAgICAvLyB3ZSByYXRoZXIgaGlkZSB0aGUgdGV4dCBlbGVtZW50IHdoZW4gaXQncyBlbXB0eS4KICAgICAgICAgICAgdGhpcy5hdHRyKCdkaXNwbGF5JywgY29udGVudCA/IG51bGwgOiAnbm9uZScpOwoKCSAgICAvLyBQcmVzZXJ2ZSBzcGFjZXMuIEluIG90aGVyIHdvcmRzLCB3ZSBkbyBub3Qgd2FudCBjb25zZWN1dGl2ZSBzcGFjZXMgdG8gZ2V0IGNvbGxhcHNlZCB0byBvbmUuCgkgICAgdGhpcy5ub2RlLnNldEF0dHJpYnV0ZU5TKCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UiLCAieG1sOnNwYWNlIiwicHJlc2VydmUiKTsKCiAgICAgICAgICAgIGlmIChsaW5lcy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgICAgICAgIHRoaXMubm9kZS50ZXh0Q29udGVudCA9IGNvbnRlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBFYXN5IHdheSB0byBlcmFzZSBhbGwgYDx0c3Bhbj5gIGNoaWxkcmVuOwogICAgICAgICAgICB0aGlzLm5vZGUudGV4dENvbnRlbnQgPSAnJzsKICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciAoOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHsKCiAgICAgICAgICAgICAgICAvLyBTaGlmdCBhbGwgdGhlIDx0c3Bhbj4gYnV0IGZpcnN0IGJ5IG9uZSBsaW5lIChgMWVtYCkKICAgICAgICAgICAgICAgIHRzcGFuID0gVigndHNwYW4nLCB7IGR5OiAoaSA9PSAwID8gJzBlbScgOiBvcHQubGluZUhlaWdodCB8fCAnMWVtJyksIHg6IHRoaXMuYXR0cigneCcpIHx8IDB9KTsKCQkvLyBNYWtlIHN1cmUgdGhlIHRleHRDb250ZW50IGlzIG5ldmVyIGVtcHR5LiBJZiBpdCBpcywgYWRkIGFuIGFkZGl0aW9uYWwgCgkJLy8gc3BhY2UgKGFuIGludmlzaWJsZSBjaGFyYWN0ZXIpIHNvIHRoYXQgZm9sbG93aW5nIGxpbmVzIGFyZSBjb3JyZWN0bHkKCQkvLyByZWxhdGl2ZWx5IHBvc2l0aW9uZWQuIGBkeT0xZW1gIHdvbid0IHdvcmsgd2l0aCBlbXB0eSBsaW5lcyBvdGhlcndpc2UuCiAgICAgICAgICAgICAgICB0c3Bhbi5ub2RlLnRleHRDb250ZW50ID0gbGluZXNbaV0gfHwgJyAnOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZCh0c3Bhbik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgICAgICAKICAgICAgICBhdHRyOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlLmdldEF0dHJpYnV0ZShuYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JykgewoKICAgICAgICAgICAgICAgIGZvciAodmFyIGF0dHJOYW1lIGluIG5hbWUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAobmFtZS5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0QXR0cmlidXRlKHRoaXMubm9kZSwgYXR0ck5hbWUsIG5hbWVbYXR0ck5hbWVdKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICBzZXRBdHRyaWJ1dGUodGhpcy5ub2RlLCBuYW1lLCB2YWx1ZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICh0aGlzLm5vZGUucGFyZW50Tm9kZSkgewogICAgICAgICAgICAgICAgdGhpcy5ub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ub2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGFwcGVuZDogZnVuY3Rpb24oZWwpIHsKCiAgICAgICAgICAgIHZhciBlbHMgPSBlbDsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZWwpICE9PSAnW29iamVjdCBBcnJheV0nKSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGVscyA9IFtlbF07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIGVsID0gZWxzW2ldOwogICAgICAgICAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGVsIGluc3RhbmNlb2YgVkVsZW1lbnQgPyBlbC5ub2RlIDogZWwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBwcmVwZW5kOiBmdW5jdGlvbihlbCkgewogICAgICAgICAgICB0aGlzLm5vZGUuaW5zZXJ0QmVmb3JlKGVsIGluc3RhbmNlb2YgVkVsZW1lbnQgPyBlbC5ub2RlIDogZWwsIHRoaXMubm9kZS5maXJzdENoaWxkKTsKICAgICAgICB9LAoKICAgICAgICBzdmc6IGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZSBpbnN0YW5jZW9mIHdpbmRvdy5TVkdTVkdFbGVtZW50ID8gdGhpcyA6IFYodGhpcy5ub2RlLm93bmVyU1ZHRWxlbWVudCk7CiAgICAgICAgfSwKCiAgICAgICAgZGVmczogZnVuY3Rpb24oKSB7CgogICAgICAgICAgICB2YXIgZGVmcyA9IHRoaXMuc3ZnKCkubm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGVmcycpOwogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIChkZWZzICYmIGRlZnMubGVuZ3RoKSA/IFYoZGVmc1swXSkgOiB1bmRlZmluZWQ7CiAgICAgICAgfSwKCiAgICAgICAgY2xvbmU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgY2xvbmUgPSBWKHRoaXMubm9kZS5jbG9uZU5vZGUodHJ1ZSkpOwogICAgICAgICAgICAvLyBOb3RlIHRoYXQgY2xvbmUgaW5oZXJpdHMgYWxzbyBJRC4gVGhlcmVmb3JlLCB3ZSBuZWVkIHRvIGNoYW5nZSBpdCBoZXJlLgogICAgICAgICAgICBjbG9uZS5ub2RlLmlkID0gdW5pcXVlSWQoKTsKICAgICAgICAgICAgcmV0dXJuIGNsb25lOwogICAgICAgIH0sCgogICAgICAgIGZpbmRPbmU6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CgogICAgICAgICAgICB2YXIgZm91bmQgPSB0aGlzLm5vZGUucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7CiAgICAgICAgICAgIHJldHVybiBmb3VuZCA/IFYoZm91bmQpIDogdW5kZWZpbmVkOwogICAgICAgIH0sCgogICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CgogICAgICAgICAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGUucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7CgogICAgICAgICAgICAvLyBNYXAgRE9NIGVsZW1lbnRzIHRvIGBWRWxlbWVudGBzLgogICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbm9kZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIG5vZGVzW2ldID0gVihub2Rlc1tpXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG5vZGVzOwogICAgICAgIH0sCiAgICAgICAgCiAgICAgICAgLy8gQ29udmVydCBnbG9iYWwgcG9pbnQgaW50byB0aGUgY29vcmRpbmF0ZSBzcGFjZSBvZiB0aGlzIGVsZW1lbnQuCiAgICAgICAgdG9Mb2NhbFBvaW50OiBmdW5jdGlvbih4LCB5KSB7CgogICAgICAgICAgICB2YXIgc3ZnID0gdGhpcy5zdmcoKS5ub2RlOwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHAgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTsKICAgICAgICAgICAgcC54ID0geDsKICAgICAgICAgICAgcC55ID0geTsKCgkgICAgdHJ5IHsKCgkJdmFyIGdsb2JhbFBvaW50ID0gcC5tYXRyaXhUcmFuc2Zvcm0oc3ZnLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7CgkJdmFyIGdsb2JhbFRvTG9jYWxNYXRyaXggPSB0aGlzLm5vZGUuZ2V0VHJhbnNmb3JtVG9FbGVtZW50KHN2ZykuaW52ZXJzZSgpOwoKCSAgICB9IGNhdGNoKGUpIHsKCQkvLyBJRTkgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpbiBvZGQgY2FzZXMuIChgVW5leHBlY3RlZCBjYWxsIHRvIG1ldGhvZCBvciBwcm9wZXJ0eSBhY2Nlc3NgKQoJCS8vIFdlIGhhdmUgdG8gbWFrZSBkbyB3aXRoIHRoZSBvcmlnaW5hbCBjb29yZGlhbmF0ZXMuCgkJcmV0dXJuIHA7CgkgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGdsb2JhbFBvaW50Lm1hdHJpeFRyYW5zZm9ybShnbG9iYWxUb0xvY2FsTWF0cml4KTsKICAgICAgICB9LAoKICAgICAgICB0cmFuc2xhdGVDZW50ZXJUb1BvaW50OiBmdW5jdGlvbihwKSB7CgogICAgICAgICAgICB2YXIgYmJveCA9IHRoaXMuYmJveCgpOwogICAgICAgICAgICB2YXIgY2VudGVyID0gZy5yZWN0KGJib3gpLmNlbnRlcigpOwoKICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUocC54IC0gY2VudGVyLngsIHAueSAtIGNlbnRlci55KTsKICAgICAgICB9LAoKICAgICAgICAvLyBFZmZpY2llbnRseSBhdXRvLW9yaWVudCBhbiBlbGVtZW50LiBUaGlzIGJhc2ljYWxseSBpbXBsZW1lbnRzIHRoZSBvcmllbnQ9YXV0byBhdHRyaWJ1dGUKICAgICAgICAvLyBvZiBtYXJrZXJzLiBUaGUgZWFzaWVzdCB3YXkgb2YgdW5kZXJzdGFuZGluZyBvbiB3aGF0IHRoaXMgZG9lcyBpcyB0byBpbWFnaW5lIHRoZSBlbGVtZW50IGlzIGFuCiAgICAgICAgLy8gYXJyb3doZWFkLiBDYWxsaW5nIHRoaXMgbWV0aG9kIG9uIHRoZSBhcnJvd2hlYWQgbWFrZXMgaXQgcG9pbnQgdG8gdGhlIGBwb3NpdGlvbmAgcG9pbnQgd2hpbGUKICAgICAgICAvLyBiZWluZyBhdXRvLW9yaWVudGVkIChwcm9wZXJseSByb3RhdGVkKSB0b3dhcmRzIHRoZSBgcmVmZXJlbmNlYCBwb2ludC4KICAgICAgICAvLyBgdGFyZ2V0YCBpcyB0aGUgZWxlbWVudCByZWxhdGl2ZSB0byB3aGljaCB0aGUgdHJhbnNmb3JtYXRpb25zIGFyZSBhcHBsaWVkLiBVc3VhbGx5IGEgdmlld3BvcnQuCiAgICAgICAgdHJhbnNsYXRlQW5kQXV0b09yaWVudDogZnVuY3Rpb24ocG9zaXRpb24sIHJlZmVyZW5jZSwgdGFyZ2V0KSB7CgogICAgICAgICAgICAvLyBDbGVhbi11cCBwcmV2aW91c2x5IHNldCB0cmFuc2Zvcm1hdGlvbnMgZXhjZXB0IHRoZSBzY2FsZS4gSWYgd2UgZGlkbid0IGNsZWFuIHVwIHRoZQogICAgICAgICAgICAvLyBwcmV2aW91cyB0cmFuc2Zvcm1hdGlvbnMgdGhlbiB0aGV5J2QgYWRkIHVwIHdpdGggdGhlIG9sZCBvbmVzLiBTY2FsZSBpcyBhbiBleGNlcHRpb24gYXMKICAgICAgICAgICAgLy8gaXQgZG9lc24ndCBhZGQgdXAsIGNvbnNpZGVyOiBgdGhpcy5zY2FsZSgyKS5zY2FsZSgyKS5zY2FsZSgyKWAuIFRoZSByZXN1bHQgaXMgdGhhdCB0aGUKICAgICAgICAgICAgLy8gZWxlbWVudCBpcyBzY2FsZWQgYnkgdGhlIGZhY3RvciAyLCBub3QgOC4KCiAgICAgICAgICAgIHZhciBzID0gdGhpcy5zY2FsZSgpOwogICAgICAgICAgICB0aGlzLmF0dHIoJ3RyYW5zZm9ybScsICcnKTsKICAgICAgICAgICAgdGhpcy5zY2FsZShzLnN4LCBzLnN5KTsKCiAgICAgICAgICAgIHZhciBzdmcgPSB0aGlzLnN2ZygpLm5vZGU7CiAgICAgICAgICAgIHZhciBiYm94ID0gdGhpcy5iYm94KGZhbHNlLCB0YXJnZXQpOwoKICAgICAgICAgICAgLy8gMS4gVHJhbnNsYXRlIHRvIG9yaWdpbi4KICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVRvT3JpZ2luID0gc3ZnLmNyZWF0ZVNWR1RyYW5zZm9ybSgpOwogICAgICAgICAgICB0cmFuc2xhdGVUb09yaWdpbi5zZXRUcmFuc2xhdGUoLWJib3gueCAtIGJib3gud2lkdGgvMiwgLWJib3gueSAtIGJib3guaGVpZ2h0LzIpOwoKICAgICAgICAgICAgLy8gMi4gUm90YXRlIGFyb3VuZCBvcmlnaW4uCiAgICAgICAgICAgIHZhciByb3RhdGVBcm91bmRPcmlnaW4gPSBzdmcuY3JlYXRlU1ZHVHJhbnNmb3JtKCk7CiAgICAgICAgICAgIHZhciBhbmdsZSA9IGcucG9pbnQocG9zaXRpb24pLmNoYW5nZUluQW5nbGUocG9zaXRpb24ueCAtIHJlZmVyZW5jZS54LCBwb3NpdGlvbi55IC0gcmVmZXJlbmNlLnksIHJlZmVyZW5jZSk7CiAgICAgICAgICAgIHJvdGF0ZUFyb3VuZE9yaWdpbi5zZXRSb3RhdGUoYW5nbGUsIDAsIDApOwoKICAgICAgICAgICAgLy8gMy4gVHJhbnNsYXRlIHRvIHRoZSBgcG9zaXRpb25gICsgdGhlIG9mZnNldCAoaGFsZiBteSB3aWR0aCkgdG93YXJkcyB0aGUgYHJlZmVyZW5jZWAgcG9pbnQuCiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVGaW5hbCA9IHN2Zy5jcmVhdGVTVkdUcmFuc2Zvcm0oKTsKICAgICAgICAgICAgdmFyIGZpbmFsUG9zaXRpb24gPSBnLnBvaW50KHBvc2l0aW9uKS5tb3ZlKHJlZmVyZW5jZSwgYmJveC53aWR0aC8yKTsKICAgICAgICAgICAgdHJhbnNsYXRlRmluYWwuc2V0VHJhbnNsYXRlKHBvc2l0aW9uLnggKyAocG9zaXRpb24ueCAtIGZpbmFsUG9zaXRpb24ueCksIHBvc2l0aW9uLnkgKyAocG9zaXRpb24ueSAtIGZpbmFsUG9zaXRpb24ueSkpOwoKICAgICAgICAgICAgLy8gNC4gQXBwbHkgdHJhbnNmb3JtYXRpb25zLgogICAgICAgICAgICB2YXIgY3RtID0gdGhpcy5ub2RlLmdldFRyYW5zZm9ybVRvRWxlbWVudCh0YXJnZXQpOwogICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gc3ZnLmNyZWF0ZVNWR1RyYW5zZm9ybSgpOwogICAgICAgICAgICB0cmFuc2Zvcm0uc2V0TWF0cml4KAogICAgICAgICAgICAgICAgdHJhbnNsYXRlRmluYWwubWF0cml4Lm11bHRpcGx5KAogICAgICAgICAgICAgICAgICAgIHJvdGF0ZUFyb3VuZE9yaWdpbi5tYXRyaXgubXVsdGlwbHkoCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVRvT3JpZ2luLm1hdHJpeC5tdWx0aXBseSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0bSkpKQogICAgICAgICAgICApOwoKICAgICAgICAgICAgLy8gSW5zdGVhZCBvZiBkaXJlY3RseSBzZXR0aW5nIHRoZSBgbWF0cml4KClgIHRyYW5zZm9ybSBvbiB0aGUgZWxlbWVudCwgZmlyc3QsIGRlY29tcG9zZQogICAgICAgICAgICAvLyB0aGUgbWF0cml4IGludG8gc2VwYXJhdGUgdHJhbnNmb3Jtcy4gVGhpcyBhbGxvd3MgdXMgdG8gdXNlIG5vcm1hbCBWZWN0b3JpemVyIG1ldGhvZHMKICAgICAgICAgICAgLy8gYXMgdGhleSBkb24ndCB3b3JrIG9uIG1hdHJpY2VzLiBBbiBleGFtcGxlIG9mIHRoaXMgaXMgdG8gcmV0cmlldmUgYSBzY2FsZSBvZiBhbiBlbGVtZW50LgogICAgICAgICAgICAvLyB0aGlzLm5vZGUudHJhbnNmb3JtLmJhc2VWYWwuaW5pdGlhbGl6ZSh0cmFuc2Zvcm0pOwoKICAgICAgICAgICAgdmFyIGRlY29tcG9zaXRpb24gPSBkZWNvbXBvc2VNYXRyaXgodHJhbnNmb3JtLm1hdHJpeCk7CgogICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZShkZWNvbXBvc2l0aW9uLnRyYW5zbGF0ZVgsIGRlY29tcG9zaXRpb24udHJhbnNsYXRlWSk7CiAgICAgICAgICAgIHRoaXMucm90YXRlKGRlY29tcG9zaXRpb24ucm90YXRpb24pOwogICAgICAgICAgICAvLyBOb3RlIHRoYXQgc2NhbGUgaGFzIGJlZW4gYWxyZWFkeSBhcHBsaWVkLCBoZW5jZSB0aGUgZm9sbG93aW5nIGxpbmUgc3RheXMgY29tbWVudGVkLiAoaXQncyBoZXJlIGp1c3QgZm9yIHJlZmVyZW5jZSkuCiAgICAgICAgICAgIC8vdGhpcy5zY2FsZShkZWNvbXBvc2l0aW9uLnNjYWxlWCwgZGVjb21wb3NpdGlvbi5zY2FsZVkpOwoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgYW5pbWF0ZUFsb25nUGF0aDogZnVuY3Rpb24oYXR0cnMsIHBhdGgpIHsKCiAgICAgICAgICAgIHZhciBhbmltYXRlTW90aW9uID0gVignYW5pbWF0ZU1vdGlvbicsIGF0dHJzKTsKICAgICAgICAgICAgdmFyIG1wYXRoID0gVignbXBhdGgnLCB7ICd4bGluazpocmVmJzogJyMnICsgVihwYXRoKS5ub2RlLmlkIH0pOwoKICAgICAgICAgICAgYW5pbWF0ZU1vdGlvbi5hcHBlbmQobXBhdGgpOwoKICAgICAgICAgICAgdGhpcy5hcHBlbmQoYW5pbWF0ZU1vdGlvbik7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBhbmltYXRlTW90aW9uLm5vZGUuYmVnaW5FbGVtZW50KCk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIC8vIEZhbGxiYWNrIGZvciBJRSA5LgoJCS8vIFJ1biB0aGUgYW5pbWF0aW9uIHByb2dyYW1hdGljYWxseSBpZiBGYWtlU21pbGUgKGBodHRwOi8vbGV1bmVuLm1lL2Zha2VzbWlsZS9gKSBwcmVzZW50IAoJCWlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzbWlsaW5nJykgPT09ICdmYWtlJykgewoKCQkgICAgLy8gUmVnaXN0ZXIgdGhlIGFuaW1hdGlvbi4gKFNlZSBgaHR0cHM6Ly9hbnN3ZXJzLmxhdW5jaHBhZC5uZXQvc21pbC8rcXVlc3Rpb24vMjAzMzMzYCkKCQkgICAgdmFyIGFuaW1hdGlvbiA9IGFuaW1hdGVNb3Rpb24ubm9kZTsKCQkgICAgYW5pbWF0aW9uLmFuaW1hdG9ycyA9IFtdOwoKCQkgICAgdmFyIGFuaW1hdGlvbklEID0gYW5pbWF0aW9uLmdldEF0dHJpYnV0ZSgnaWQnKTsKCQkgICAgaWYgKGFuaW1hdGlvbklEKSBpZDJhbmltW2FuaW1hdGlvbklEXSA9IGFuaW1hdGlvbjsKCiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldHMgPSBnZXRUYXJnZXRzKGFuaW1hdGlvbik7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRhcmdldHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRhcmdldHNbaV07CgkJCXZhciBhbmltYXRvciA9IG5ldyBBbmltYXRvcihhbmltYXRpb24sIHRhcmdldCwgaSk7CgkJCWFuaW1hdG9ycy5wdXNoKGFuaW1hdG9yKTsKCQkJYW5pbWF0aW9uLmFuaW1hdG9yc1tpXSA9IGFuaW1hdG9yOwogICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRvci5yZWdpc3RlcigpOwogICAgICAgICAgICAgICAgICAgIH0KCQl9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24oY2xhc3NOYW1lKSB7CgogICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnKFxcc3xeKScgKyBjbGFzc05hbWUgKyAnKFxcc3wkKScpLnRlc3QodGhpcy5ub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSk7CiAgICAgICAgfSwKCiAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzTmFtZSkgewoKICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0NsYXNzKGNsYXNzTmFtZSkpIHsKICAgICAgICAgICAgICAgIHZhciBwcmV2Q2xhc3NlcyA9IHRoaXMubm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7CiAgICAgICAgICAgICAgICB0aGlzLm5vZGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIChwcmV2Q2xhc3NlcyArICcgJyArIGNsYXNzTmFtZSkudHJpbSgpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzTmFtZSkgewoKICAgICAgICAgICAgaWYgKHRoaXMuaGFzQ2xhc3MoY2xhc3NOYW1lKSkgewogICAgICAgICAgICAgICAgdmFyIG5ld0NsYXNzZXMgPSB0aGlzLm5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpLnJlcGxhY2UobmV3IFJlZ0V4cCgnKFxcc3xeKScgKyBjbGFzc05hbWUgKyAnKFxcc3wkKScsICdnJyksICckMicpOwogICAgICAgICAgICAgICAgdGhpcy5ub2RlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBuZXdDbGFzc2VzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzTmFtZSwgdG9BZGQpIHsKCiAgICAgICAgICAgIHZhciB0b1JlbW92ZSA9IHR5cGVvZiB0b0FkZCA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLmhhc0NsYXNzKGNsYXNzTmFtZSkgOiAhdG9BZGQ7CgogICAgICAgICAgICBpZiAodG9SZW1vdmUpIHsKICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2xhc3MoY2xhc3NOYW1lKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQogICAgfTsKCiAgICAvLyBDb252ZXJ0IGEgcmVjdGFuZ2xlIHRvIFNWRyBwYXRoIGNvbW1hbmRzLiBgcmAgaXMgYW4gb2JqZWN0IG9mIHRoZSBmb3JtOgogICAgLy8gYHsgeDogW251bWJlcl0sIHk6IFtudW1iZXJdLCB3aWR0aDogW251bWJlcl0sIGhlaWdodDogW251bWJlcl0sIHRvcC1yeTogW251bWJlcl0sIHRvcC1yeTogW251bWJlcl0sIGJvdHRvbS1yeDogW251bWJlcl0sIGJvdHRvbS1yeTogW251bWJlcl0gfWAsCiAgICAvLyB3aGVyZSBgeCwgeSwgd2lkdGgsIGhlaWdodGAgYXJlIHRoZSB1c3VhbCByZWN0YW5nbGUgYXR0cmlidXRlcyBhbmQgW3RvcC0vYm90dG9tLV1yeC9yeSBhbGxvd3MgZm9yCiAgICAvLyBzcGVjaWZ5aW5nIHJhZGl1cyBvZiB0aGUgcmVjdGFuZ2xlIGZvciBhbGwgaXRzIHNpZGVzIChhcyBvcHBvc2VkIHRvIHRoZSBidWlsdC1pbiBTVkcgcmVjdGFuZ2xlCiAgICAvLyB0aGF0IGhhcyBvbmx5IGByeGAgYW5kIGByeWAgYXR0cmlidXRlcykuCiAgICBmdW5jdGlvbiByZWN0VG9QYXRoKHIpIHsKCiAgICAgICAgdmFyIHRvcFJ4ID0gci5yeCB8fCByWyd0b3AtcngnXSB8fCAwOwogICAgICAgIHZhciBib3R0b21SeCA9IHIucnggfHwgclsnYm90dG9tLXJ4J10gfHwgMDsKICAgICAgICB2YXIgdG9wUnkgPSByLnJ5IHx8IHJbJ3RvcC1yeSddIHx8IDA7CiAgICAgICAgdmFyIGJvdHRvbVJ5ID0gci5yeSB8fCByWydib3R0b20tcnknXSB8fCAwOwoKICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAnTScsIHIueCwgci55ICsgdG9wUnksCiAgICAgICAgICAgICd2Jywgci5oZWlnaHQgLSB0b3BSeSAtIGJvdHRvbVJ5LAogICAgICAgICAgICAnYScsIGJvdHRvbVJ4LCBib3R0b21SeSwgMCwgMCwgMCwgYm90dG9tUngsIGJvdHRvbVJ5LAogICAgICAgICAgICAnaCcsIHIud2lkdGggLSAyICogYm90dG9tUngsCiAgICAgICAgICAgICdhJywgYm90dG9tUngsIGJvdHRvbVJ5LCAwLCAwLCAwLCBib3R0b21SeCwgLWJvdHRvbVJ5LAogICAgICAgICAgICAndicsIC0oci5oZWlnaHQgLSBib3R0b21SeSAtIHRvcFJ5KSwKICAgICAgICAgICAgJ2EnLCB0b3BSeCwgdG9wUnksIDAsIDAsIDAsIC10b3BSeCwgLXRvcFJ5LAogICAgICAgICAgICAnaCcsIC0oci53aWR0aCAtIDIgKiB0b3BSeCksCiAgICAgICAgICAgICdhJywgdG9wUngsIHRvcFJ5LCAwLCAwLCAwLCAtdG9wUngsIHRvcFJ5CiAgICAgICAgXS5qb2luKCcgJyk7CiAgICB9CgogICAgdmFyIFYgPSBjcmVhdGVFbGVtZW50OwoKICAgIFYuZGVjb21wb3NlTWF0cml4ID0gZGVjb21wb3NlTWF0cml4OwogICAgVi5yZWN0VG9QYXRoID0gcmVjdFRvUGF0aDsKCiAgICB2YXIgc3ZnRG9jdW1lbnQgPSBWKCdzdmcnKS5ub2RlOwogICAgCiAgICBWLmNyZWF0ZVNWR01hdHJpeCA9IGZ1bmN0aW9uKG0pIHsKCiAgICAgICAgdmFyIHN2Z01hdHJpeCA9IHN2Z0RvY3VtZW50LmNyZWF0ZVNWR01hdHJpeCgpOwogICAgICAgIGZvciAodmFyIGNvbXBvbmVudCBpbiBtKSB7CiAgICAgICAgICAgIHN2Z01hdHJpeFtjb21wb25lbnRdID0gbVtjb21wb25lbnRdOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gc3ZnTWF0cml4OwogICAgfTsKCiAgICBWLmNyZWF0ZVNWR1RyYW5zZm9ybSA9IGZ1bmN0aW9uKCkgewoKICAgICAgICByZXR1cm4gc3ZnRG9jdW1lbnQuY3JlYXRlU1ZHVHJhbnNmb3JtKCk7CiAgICB9OwoKICAgIFYuY3JlYXRlU1ZHUG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7CgogICAgICAgIHZhciBwID0gc3ZnRG9jdW1lbnQuY3JlYXRlU1ZHUG9pbnQoKTsKICAgICAgICBwLnggPSB4OwogICAgICAgIHAueSA9IHk7CiAgICAgICAgcmV0dXJuIHA7CiAgICB9OwoKICAgIHJldHVybiBWOwoKfSkpOwoKCi8vICAgICAgR2VvbWV0cnkgbGlicmFyeS4KLy8gICAgICAoYykgMjAxMS0yMDEzIGNsaWVudCBJTwoKCihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7CgogICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgewogICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS4KICAgICAgICBkZWZpbmUoW10sIGZhY3RvcnkpOwogICAgICAgIAogICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHsKICAgICAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXQKICAgICAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cywKICAgICAgICAvLyBsaWtlIE5vZGUuCiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7CiAgICAgICAgCiAgICB9IGVsc2UgewogICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFscy4KICAgICAgICByb290LmcgPSBmYWN0b3J5KCk7CiAgICB9Cgp9KHRoaXMsIGZ1bmN0aW9uKCkgewoKCiAgICAvLyBEZWNsYXJlIHNob3J0aGFuZHMgdG8gdGhlIG1vc3QgdXNlZCBtYXRoIGZ1bmN0aW9ucy4KICAgIHZhciBtYXRoID0gTWF0aDsKICAgIHZhciBhYnMgPSBtYXRoLmFiczsKICAgIHZhciBjb3MgPSBtYXRoLmNvczsKICAgIHZhciBzaW4gPSBtYXRoLnNpbjsKICAgIHZhciBzcXJ0ID0gbWF0aC5zcXJ0OwogICAgdmFyIG1taW4gPSBtYXRoLm1pbjsKICAgIHZhciBtbWF4ID0gbWF0aC5tYXg7CiAgICB2YXIgYXRhbiA9IG1hdGguYXRhbjsKICAgIHZhciBhdGFuMiA9IG1hdGguYXRhbjI7CiAgICB2YXIgYWNvcyA9IG1hdGguYWNvczsKICAgIHZhciByb3VuZCA9IG1hdGgucm91bmQ7CiAgICB2YXIgZmxvb3IgPSBtYXRoLmZsb29yOwogICAgdmFyIFBJID0gbWF0aC5QSTsKICAgIHZhciByYW5kb20gPSBtYXRoLnJhbmRvbTsKICAgIHZhciB0b0RlZyA9IGZ1bmN0aW9uKHJhZCkgeyByZXR1cm4gKDE4MCpyYWQgLyBQSSkgJSAzNjA7IH07CiAgICB2YXIgdG9SYWQgPSBmdW5jdGlvbihkZWcsIG92ZXIzNjApIHsKICAgICAgICBvdmVyMzYwID0gb3ZlcjM2MCB8fCBmYWxzZTsKICAgICAgICBkZWcgPSBvdmVyMzYwID8gZGVnIDogKGRlZyAlIDM2MCk7CiAgICAgICAgcmV0dXJuIGRlZyAqIFBJIC8gMTgwOwogICAgfTsKICAgIHZhciBzbmFwVG9HcmlkID0gZnVuY3Rpb24odmFsLCBncmlkU2l6ZSkgeyByZXR1cm4gZ3JpZFNpemUgKiBNYXRoLnJvdW5kKHZhbC9ncmlkU2l6ZSk7IH07CiAgICB2YXIgbm9ybWFsaXplQW5nbGUgPSBmdW5jdGlvbihhbmdsZSkgeyByZXR1cm4gKGFuZ2xlICUgMzYwKSArIChhbmdsZSA8IDAgPyAzNjAgOiAwKTsgfTsKCiAgICAvLyBQb2ludAogICAgLy8gLS0tLS0KCiAgICAvLyBQb2ludCBpcyB0aGUgbW9zdCBiYXNpYyBvYmplY3QgY29uc2lzdGluZyBvZiB4L3kgY29vcmRpbmF0ZSwuCgogICAgLy8gUG9zc2libGUgaW5zdGFudGlhdGlvbnMgYXJlOgoKICAgIC8vICogYHBvaW50KDEwLCAyMClgCiAgICAvLyAqIGBuZXcgcG9pbnQoMTAsIDIwKWAKICAgIC8vICogYHBvaW50KCcxMCAyMCcpYAogICAgLy8gKiBgcG9pbnQocG9pbnQoMTAsIDIwKSlgCiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7CiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIHBvaW50KSkKICAgICAgICAgICAgcmV0dXJuIG5ldyBwb2ludCh4LCB5KTsKICAgICAgICB2YXIgeHk7CiAgICAgICAgaWYgKHkgPT09IHVuZGVmaW5lZCAmJiBPYmplY3QoeCkgIT09IHgpIHsKICAgICAgICAgICAgeHkgPSB4LnNwbGl0KHguaW5kZXhPZignQCcpID09PSAtMSA/ICcgJyA6ICdAJyk7CiAgICAgICAgICAgIHRoaXMueCA9IHBhcnNlSW50KHh5WzBdLCAxMCk7CiAgICAgICAgICAgIHRoaXMueSA9IHBhcnNlSW50KHh5WzFdLCAxMCk7CiAgICAgICAgfSBlbHNlIGlmIChPYmplY3QoeCkgPT09IHgpIHsKICAgICAgICAgICAgdGhpcy54ID0geC54OwogICAgICAgICAgICB0aGlzLnkgPSB4Lnk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy54ID0geDsKICAgICAgICAgICAgdGhpcy55ID0geTsKICAgICAgICB9CiAgICB9CgogICAgcG9pbnQucHJvdG90eXBlID0gewogICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMueCArICJAIiArIHRoaXMueTsKICAgICAgICB9LAogICAgICAgIC8vIElmIHBvaW50IGxpZXMgb3V0c2lkZSByZWN0YW5nbGUgYHJgLCByZXR1cm4gdGhlIG5lYXJlc3QgcG9pbnQgb24gdGhlIGJvdW5kYXJ5IG9mIHJlY3QgYHJgLAogICAgICAgIC8vIG90aGVyd2lzZSByZXR1cm4gcG9pbnQgaXRzZWxmLgogICAgICAgIC8vIChzZWUgU3F1ZWFrIFNtYWxsdGFsaywgUG9pbnQ+PmFkaGVyZVRvOikKICAgICAgICBhZGhlcmVUb1JlY3Q6IGZ1bmN0aW9uKHIpIHsKCSAgICBpZiAoci5jb250YWluc1BvaW50KHRoaXMpKXsKCSAgICAgICAgcmV0dXJuIHRoaXM7CgkgICAgfQoJICAgIHRoaXMueCA9IG1taW4obW1heCh0aGlzLngsIHIueCksIHIueCArIHIud2lkdGgpOwoJICAgIHRoaXMueSA9IG1taW4obW1heCh0aGlzLnksIHIueSksIHIueSArIHIuaGVpZ2h0KTsKCSAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgICAgIC8vIENvbXB1dGUgdGhlIGFuZ2xlIGJldHdlZW4gbWUgYW5kIGBwYCBhbmQgdGhlIHggYXhpcy4KICAgICAgICAvLyAoY2FydGVzaWFuLXRvLXBvbGFyIGNvb3JkaW5hdGVzIGNvbnZlcnNpb24pCiAgICAgICAgLy8gUmV0dXJuIHRoZXRhIGFuZ2xlIGluIGRlZ3JlZXMuCiAgICAgICAgdGhldGE6IGZ1bmN0aW9uKHApIHsKICAgICAgICAgICAgcCA9IHBvaW50KHApOwogICAgICAgICAgICAvLyBJbnZlcnQgdGhlIHktYXhpcy4KCSAgICB2YXIgeSA9IC0ocC55IC0gdGhpcy55KTsKCSAgICB2YXIgeCA9IHAueCAtIHRoaXMueDsKICAgICAgICAgICAgLy8gTWFrZXMgc3VyZSB0aGF0IHRoZSBjb21wYXJpc29uIHdpdGggemVybyB0YWtlcyByb3VuZGluZyBlcnJvcnMgaW50byBhY2NvdW50LgogICAgICAgICAgICB2YXIgUFJFQ0lTSU9OID0gMTA7CiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBgYXRhbjJgIGlzIG5vdCBkZWZpbmVkIGZvciBgeGAsIGB5YCBib3RoIGVxdWFsIHplcm8uCgkgICAgdmFyIHJhZCA9ICh5LnRvRml4ZWQoUFJFQ0lTSU9OKSA9PSAwICYmIHgudG9GaXhlZChQUkVDSVNJT04pID09IDApID8gMCA6IGF0YW4yKHksIHgpOyAKCiAgICAgICAgICAgIC8vIENvcnJlY3Rpb24gZm9yIElJSS4gYW5kIElWLiBxdWFkcmFudC4KCSAgICBpZiAocmFkIDwgMCkgeyAKCSAgICAgICAgcmFkID0gMipQSSArIHJhZDsKCSAgICB9CgkgICAgcmV0dXJuIDE4MCpyYWQgLyBQSTsKICAgICAgICB9LAogICAgICAgIC8vIFJldHVybnMgZGlzdGFuY2UgYmV0d2VlbiBtZSBhbmQgcG9pbnQgYHBgLgogICAgICAgIGRpc3RhbmNlOiBmdW5jdGlvbihwKSB7CgkgICAgcmV0dXJuIGxpbmUodGhpcywgcCkubGVuZ3RoKCk7CiAgICAgICAgfSwKICAgICAgICAvLyBSZXR1cm5zIGEgbWFuaGF0dGFuICh0YXhpLWNhYikgZGlzdGFuY2UgYmV0d2VlbiBtZSBhbmQgcG9pbnQgYHBgLgogICAgICAgIG1hbmhhdHRhbkRpc3RhbmNlOiBmdW5jdGlvbihwKSB7CiAgICAgICAgICAgIHJldHVybiBhYnMocC54IC0gdGhpcy54KSArIGFicyhwLnkgLSB0aGlzLnkpOwogICAgICAgIH0sCiAgICAgICAgLy8gT2Zmc2V0IG1lIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50LgogICAgICAgIG9mZnNldDogZnVuY3Rpb24oZHgsIGR5KSB7CgkgICAgdGhpcy54ICs9IGR4IHx8IDA7CgkgICAgdGhpcy55ICs9IGR5IHx8IDA7CgkgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgICAgICBtYWduaXR1ZGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gc3FydCgodGhpcy54KnRoaXMueCkgKyAodGhpcy55KnRoaXMueSkpIHx8IDAuMDE7CiAgICAgICAgfSwKICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKHgsIHkpIHsKICAgICAgICAgICAgdGhpcy54ID0geCB8fCAwOwogICAgICAgICAgICB0aGlzLnkgPSB5IHx8IDA7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAgICAgcm91bmQ6IGZ1bmN0aW9uKGRlY2ltYWxzKSB7CiAgICAgICAgICAgIHRoaXMueCA9IGRlY2ltYWxzID8gdGhpcy54LnRvRml4ZWQoZGVjaW1hbHMpIDogcm91bmQodGhpcy54KTsKICAgICAgICAgICAgdGhpcy55ID0gZGVjaW1hbHMgPyB0aGlzLnkudG9GaXhlZChkZWNpbWFscykgOiByb3VuZCh0aGlzLnkpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgICAgIC8vIFNjYWxlIHRoZSBsaW5lIHNlZ21lbnQgYmV0d2VlbiAoMCwwKSBhbmQgbWUgdG8gaGF2ZSBhIGxlbmd0aCBvZiBsZW4uCiAgICAgICAgbm9ybWFsaXplOiBmdW5jdGlvbihsZW4pIHsKCSAgICB2YXIgcyA9IChsZW4gfHwgMSkgLyB0aGlzLm1hZ25pdHVkZSgpOwoJICAgIHRoaXMueCA9IHMgKiB0aGlzLng7CgkgICAgdGhpcy55ID0gcyAqIHRoaXMueTsKCSAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgICAgIGRpZmZlcmVuY2U6IGZ1bmN0aW9uKHApIHsKICAgICAgICAgICAgcmV0dXJuIHBvaW50KHRoaXMueCAtIHAueCwgdGhpcy55IC0gcC55KTsKICAgICAgICB9LAogICAgICAgIC8vIFJldHVybiB0aGUgYmVhcmluZyBiZXR3ZWVuIG1lIGFuZCBwb2ludCBgcGAuCiAgICAgICAgYmVhcmluZzogZnVuY3Rpb24ocCkgewogICAgICAgICAgICByZXR1cm4gbGluZSh0aGlzLCBwKS5iZWFyaW5nKCk7CiAgICAgICAgfSwgICAgICAgIAogICAgICAgIC8vIENvbnZlcnRzIHJlY3Rhbmd1bGFyIHRvIHBvbGFyIGNvb3JkaW5hdGVzLgogICAgICAgIC8vIEFuIG9yaWdpbiBjYW4gYmUgc3BlY2lmaWVkLCBvdGhlcndpc2UgaXQncyAwQDAuCiAgICAgICAgdG9Qb2xhcjogZnVuY3Rpb24obykgewogICAgICAgICAgICBvID0gKG8gJiYgcG9pbnQobykpIHx8IHBvaW50KDAsMCk7CiAgICAgICAgICAgIHZhciB4ID0gdGhpcy54OwogICAgICAgICAgICB2YXIgeSA9IHRoaXMueTsKICAgICAgICAgICAgdGhpcy54ID0gc3FydCgoeC1vLngpKih4LW8ueCkgKyAoeS1vLnkpKih5LW8ueSkpOyAgIC8vIHIKICAgICAgICAgICAgdGhpcy55ID0gdG9SYWQoby50aGV0YShwb2ludCh4LHkpKSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAgICAgLy8gUm90YXRlIHBvaW50IGJ5IGFuZ2xlIGFyb3VuZCBvcmlnaW4gby4KICAgICAgICByb3RhdGU6IGZ1bmN0aW9uKG8sIGFuZ2xlKSB7CiAgICAgICAgICAgIGFuZ2xlID0gKGFuZ2xlICsgMzYwKSAlIDM2MDsKICAgICAgICAgICAgdGhpcy50b1BvbGFyKG8pOwogICAgICAgICAgICB0aGlzLnkgKz0gdG9SYWQoYW5nbGUpOwogICAgICAgICAgICB2YXIgcCA9IHBvaW50LmZyb21Qb2xhcih0aGlzLngsIHRoaXMueSwgbyk7CiAgICAgICAgICAgIHRoaXMueCA9IHAueDsKICAgICAgICAgICAgdGhpcy55ID0gcC55OwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgICAgIC8vIE1vdmUgcG9pbnQgb24gbGluZSBzdGFydGluZyBmcm9tIHJlZiBlbmRpbmcgYXQgbWUgYnkKICAgICAgICAvLyBkaXN0YW5jZSBkaXN0YW5jZS4KICAgICAgICBtb3ZlOiBmdW5jdGlvbihyZWYsIGRpc3RhbmNlKSB7CiAgICAgICAgICAgIHZhciB0aGV0YSA9IHRvUmFkKHBvaW50KHJlZikudGhldGEodGhpcykpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQoY29zKHRoZXRhKSAqIGRpc3RhbmNlLCAtc2luKHRoZXRhKSAqIGRpc3RhbmNlKTsKICAgICAgICB9LAogICAgICAgIC8vIFJldHVybnMgY2hhbmdlIGluIGFuZ2xlIGZyb20gbXkgcHJldmlvdXMgcG9zaXRpb24gKC1keCwgLWR5KSB0byBteSBuZXcgcG9zaXRpb24KICAgICAgICAvLyByZWxhdGl2ZSB0byByZWYgcG9pbnQuCiAgICAgICAgY2hhbmdlSW5BbmdsZTogZnVuY3Rpb24oZHgsIGR5LCByZWYpIHsKICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSB0cmFuc2xhdGlvbiBhbmQgbWVhc3VyZSB0aGUgY2hhbmdlIGluIGFuZ2xlIGFyb3VuZCB4LWF4aXMuCiAgICAgICAgICAgIHJldHVybiBwb2ludCh0aGlzKS5vZmZzZXQoLWR4LCAtZHkpLnRoZXRhKHJlZikgLSB0aGlzLnRoZXRhKHJlZik7CiAgICAgICAgfSwKICAgICAgICBlcXVhbHM6IGZ1bmN0aW9uKHApIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMueCA9PT0gcC54ICYmIHRoaXMueSA9PT0gcC55OwogICAgICAgIH0sCiAgICAgICAgc25hcFRvR3JpZDogZnVuY3Rpb24oZ3gsIGd5KSB7CiAgICAgICAgICAgIHRoaXMueCA9IHNuYXBUb0dyaWQodGhpcy54LCBneCkKICAgICAgICAgICAgdGhpcy55ID0gc25hcFRvR3JpZCh0aGlzLnksIGd5IHx8IGd4KQogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgICAgIC8vIFJldHVybnMgYSBwb2ludCB0aGF0IGlzIHRoZSByZWZsZWN0aW9uIG9mIG1lIHdpdGgKICAgICAgICAvLyB0aGUgY2VudGVyIG9mIGludmVyc2lvbiBpbiByZWYgcG9pbnQuCiAgICAgICAgcmVmbGVjdGlvbjogZnVuY3Rpb24ocmVmKSB7CiAgICAgICAgICAgIHJldHVybiBwb2ludChyZWYpLm1vdmUodGhpcywgdGhpcy5kaXN0YW5jZShyZWYpKTsKICAgICAgICB9CiAgICB9OwogICAgLy8gQWx0ZXJuYXRpdmUgY29uc3RydWN0b3IsIGZyb20gcG9sYXIgY29vcmRpbmF0ZXMuCiAgICAvLyBAcGFyYW0ge251bWJlcn0gciBEaXN0YW5jZS4KICAgIC8vIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSBBbmdsZSBpbiByYWRpYW5zLgogICAgLy8gQHBhcmFtIHtwb2ludH0gW29wdGlvbmFsXSBvIE9yaWdpbi4KICAgIHBvaW50LmZyb21Qb2xhciA9IGZ1bmN0aW9uKHIsIGFuZ2xlLCBvKSB7CiAgICAgICAgbyA9IChvICYmIHBvaW50KG8pKSB8fCBwb2ludCgwLDApOwogICAgICAgIHZhciB4ID0gYWJzKHIgKiBjb3MoYW5nbGUpKTsKICAgICAgICB2YXIgeSA9IGFicyhyICogc2luKGFuZ2xlKSk7CiAgICAgICAgdmFyIGRlZyA9IG5vcm1hbGl6ZUFuZ2xlKHRvRGVnKGFuZ2xlKSk7CgogICAgICAgIGlmIChkZWcgPCA5MCkgeSA9IC15OwogICAgICAgIGVsc2UgaWYgKGRlZyA8IDE4MCkgeyB4ID0gLXg7IHkgPSAteTsgfQogICAgICAgIGVsc2UgaWYgKGRlZyA8IDI3MCkgeCA9IC14OwogICAgICAgIAogICAgICAgIHJldHVybiBwb2ludChvLnggKyB4LCBvLnkgKyB5KTsKICAgIH07CgogICAgLy8gQ3JlYXRlIGEgcG9pbnQgd2l0aCByYW5kb20gY29vcmRpbmF0ZXMgdGhhdCBmYWxsIGludG8gdGhlIHJhbmdlIGBbeDEsIHgyXWAgYW5kIGBbeTEsIHkyXWAuCiAgICBwb2ludC5yYW5kb20gPSBmdW5jdGlvbih4MSwgeDIsIHkxLCB5MikgewogICAgICAgIHJldHVybiBwb2ludChmbG9vcihyYW5kb20oKSAqICh4MiAtIHgxICsgMSkgKyB4MSksIGZsb29yKHJhbmRvbSgpICogKHkyIC0geTEgKyAxKSArIHkxKSk7CiAgICB9OwoKICAgIC8vIExpbmUuCiAgICAvLyAtLS0tLQogICAgZnVuY3Rpb24gbGluZShwMSwgcDIpIHsKICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgbGluZSkpCiAgICAgICAgICAgIHJldHVybiBuZXcgbGluZShwMSwgcDIpOwogICAgICAgIHRoaXMuc3RhcnQgPSBwb2ludChwMSk7CiAgICAgICAgdGhpcy5lbmQgPSBwb2ludChwMik7CiAgICB9CiAgICAKICAgIGxpbmUucHJvdG90eXBlID0gewogICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKCSAgICByZXR1cm4gdGhpcy5zdGFydC50b1N0cmluZygpICsgJyAnICsgdGhpcy5lbmQudG9TdHJpbmcoKTsKICAgICAgICB9LAogICAgICAgIC8vIEByZXR1cm4ge2RvdWJsZX0gbGVuZ3RoIG9mIHRoZSBsaW5lCiAgICAgICAgbGVuZ3RoOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHNxcnQodGhpcy5zcXVhcmVkTGVuZ3RoKCkpOwogICAgICAgIH0sCiAgICAgICAgLy8gQHJldHVybiB7aW50ZWdlcn0gbGVuZ3RoIHdpdGhvdXQgc3FydAogICAgICAgIC8vIEBub3RlIGZvciBhcHBsaWNhdGlvbnMgd2hlcmUgdGhlIGV4YWN0IGxlbmd0aCBpcyBub3QgbmVjZXNzYXJ5IChlLmcuIGNvbXBhcmUgb25seSkKICAgICAgICBzcXVhcmVkTGVuZ3RoOiBmdW5jdGlvbigpIHsKCSAgICB2YXIgeDAgPSB0aGlzLnN0YXJ0Lng7CiAgICAgICAgICAgIHZhciB5MCA9IHRoaXMuc3RhcnQueTsKCSAgICB2YXIgeDEgPSB0aGlzLmVuZC54OwogICAgICAgICAgICB2YXIgeTEgPSB0aGlzLmVuZC55OwoJICAgIHJldHVybiAoeDAgLT0geDEpKngwICsgKHkwIC09IHkxKSp5MDsKICAgICAgICB9LAogICAgICAgIC8vIEByZXR1cm4ge3BvaW50fSBteSBtaWRwb2ludAogICAgICAgIG1pZHBvaW50OiBmdW5jdGlvbigpIHsKCSAgICByZXR1cm4gcG9pbnQoKHRoaXMuc3RhcnQueCArIHRoaXMuZW5kLngpIC8gMiwKCQkgICAgICAgICAodGhpcy5zdGFydC55ICsgdGhpcy5lbmQueSkgLyAyKTsKICAgICAgICB9LAogICAgICAgIC8vIEByZXR1cm4ge3BvaW50fSBQb2ludCB3aGVyZSBJJ20gaW50ZXJzZWN0aW5nIGwuCiAgICAgICAgLy8gQHNlZSBTcXVlYWsgU21hbGx0YWxrLCBMaW5lU2VnbWVudD4+aW50ZXJzZWN0aW9uV2l0aDoKICAgICAgICBpbnRlcnNlY3Rpb246IGZ1bmN0aW9uKGwpIHsKCSAgICB2YXIgcHQxRGlyID0gcG9pbnQodGhpcy5lbmQueCAtIHRoaXMuc3RhcnQueCwgdGhpcy5lbmQueSAtIHRoaXMuc3RhcnQueSk7CgkgICAgdmFyIHB0MkRpciA9IHBvaW50KGwuZW5kLnggLSBsLnN0YXJ0LngsIGwuZW5kLnkgLSBsLnN0YXJ0LnkpOwoJICAgIHZhciBkZXQgPSAocHQxRGlyLnggKiBwdDJEaXIueSkgLSAocHQxRGlyLnkgKiBwdDJEaXIueCk7CgkgICAgdmFyIGRlbHRhUHQgPSBwb2ludChsLnN0YXJ0LnggLSB0aGlzLnN0YXJ0LngsIGwuc3RhcnQueSAtIHRoaXMuc3RhcnQueSk7CgkgICAgdmFyIGFscGhhID0gKGRlbHRhUHQueCAqIHB0MkRpci55KSAtIChkZWx0YVB0LnkgKiBwdDJEaXIueCk7CgkgICAgdmFyIGJldGEgPSAoZGVsdGFQdC54ICogcHQxRGlyLnkpIC0gKGRlbHRhUHQueSAqIHB0MURpci54KTsKCgkgICAgaWYgKGRldCA9PT0gMCB8fAoJICAgICAgICBhbHBoYSAqIGRldCA8IDAgfHwKCSAgICAgICAgYmV0YSAqIGRldCA8IDApIHsKICAgICAgICAgICAgICAgIC8vIE5vIGludGVyc2VjdGlvbiBmb3VuZC4KCSAgICAgICAgcmV0dXJuIG51bGw7CQoJICAgIH0KCSAgICBpZiAoZGV0ID4gMCl7CgkgICAgICAgIGlmIChhbHBoYSA+IGRldCB8fCBiZXRhID4gZGV0KXsKCQkgICAgcmV0dXJuIG51bGw7CgkgICAgICAgIH0KCSAgICB9IGVsc2UgewoJICAgICAgICBpZiAoYWxwaGEgPCBkZXQgfHwgYmV0YSA8IGRldCl7CgkJICAgIHJldHVybiBudWxsOwoJICAgICAgICB9CgkgICAgfQoJICAgIHJldHVybiBwb2ludCh0aGlzLnN0YXJ0LnggKyAoYWxwaGEgKiBwdDFEaXIueCAvIGRldCksCgkJICAgICAgICAgdGhpcy5zdGFydC55ICsgKGFscGhhICogcHQxRGlyLnkgLyBkZXQpKTsKICAgICAgICB9LAogICAgICAgIAogICAgICAgIC8vIEByZXR1cm4gdGhlIGJlYXJpbmcgKGNhcmRpbmFsIGRpcmVjdGlvbikgb2YgdGhlIGxpbmUuIEZvciBleGFtcGxlIE4sIFcsIG9yIFNFLgogICAgICAgIC8vIEByZXR1cm5zIHtTdHJpbmd9IE9uZSBvZiB0aGUgZm9sbG93aW5nIGJlYXJpbmdzIDogTkUsIEUsIFNFLCBTLCBTVywgVywgTlcsIE4uCiAgICAgICAgYmVhcmluZzogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgbGF0MSA9IHRvUmFkKHRoaXMuc3RhcnQueSk7CiAgICAgICAgICAgIHZhciBsYXQyID0gdG9SYWQodGhpcy5lbmQueSk7CiAgICAgICAgICAgIHZhciBsb24xID0gdGhpcy5zdGFydC54OwogICAgICAgICAgICB2YXIgbG9uMiA9IHRoaXMuZW5kLng7CiAgICAgICAgICAgIHZhciBkTG9uID0gdG9SYWQobG9uMiAtIGxvbjEpOwogICAgICAgICAgICB2YXIgeSA9IHNpbihkTG9uKSAqIGNvcyhsYXQyKTsKICAgICAgICAgICAgdmFyIHggPSBjb3MobGF0MSkgKiBzaW4obGF0MikgLSBzaW4obGF0MSkgKiBjb3MobGF0MikgKiBjb3MoZExvbik7CiAgICAgICAgICAgIHZhciBicm5nID0gdG9EZWcoYXRhbjIoeSwgeCkpOwoKICAgICAgICAgICAgdmFyIGJlYXJpbmdzID0gWydORScsICdFJywgJ1NFJywgJ1MnLCAnU1cnLCAnVycsICdOVycsICdOJ107CgogICAgICAgICAgICB2YXIgaW5kZXggPSBicm5nIC0gMjIuNTsKICAgICAgICAgICAgaWYgKGluZGV4IDwgMCkKICAgICAgICAgICAgICAgIGluZGV4ICs9IDM2MDsKICAgICAgICAgICAgaW5kZXggPSBwYXJzZUludChpbmRleCAvIDQ1KTsKCiAgICAgICAgICAgIHJldHVybiBiZWFyaW5nc1tpbmRleF07CiAgICAgICAgfSwKCiAgICAgICAgLy8gQHJldHVybiB7cG9pbnR9IG15IHBvaW50IGF0ICd0JyA8MCwxPgogICAgICAgIHBvaW50QXQ6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgdmFyIHggPSAoMSAtIHQpICogdGhpcy5zdGFydC54ICsgdCAqIHRoaXMuZW5kLng7CiAgICAgICAgICAgIHZhciB5ID0gKDEgLSB0KSAqIHRoaXMuc3RhcnQueSArIHQgKiB0aGlzLmVuZC55OwogICAgICAgICAgICByZXR1cm4gcG9pbnQoeCwgeSk7CiAgICAgICAgfQogICAgfTsKCiAgICAvLyBSZWN0YW5nbGUuCiAgICAvLyAtLS0tLS0tLS0tCiAgICBmdW5jdGlvbiByZWN0KHgsIHksIHcsIGgpIHsKICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgcmVjdCkpCiAgICAgICAgICAgIHJldHVybiBuZXcgcmVjdCh4LCB5LCB3LCBoKTsKICAgICAgICBpZiAoeSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHkgPSB4Lnk7CiAgICAgICAgICAgIHcgPSB4LndpZHRoOwogICAgICAgICAgICBoID0geC5oZWlnaHQ7CiAgICAgICAgICAgIHggPSB4Lng7ICAgICAgICAKICAgICAgICB9CiAgICAgICAgdGhpcy54ID0geDsKICAgICAgICB0aGlzLnkgPSB5OwogICAgICAgIHRoaXMud2lkdGggPSB3OwogICAgICAgIHRoaXMuaGVpZ2h0ID0gaDsKICAgIH0KICAgIAogICAgcmVjdC5wcm90b3R5cGUgPSB7CiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkgewoJICAgIHJldHVybiB0aGlzLm9yaWdpbigpLnRvU3RyaW5nKCkgKyAnICcgKyB0aGlzLmNvcm5lcigpLnRvU3RyaW5nKCk7CiAgICAgICAgfSwKICAgICAgICBvcmlnaW46IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gcG9pbnQodGhpcy54LCB0aGlzLnkpOwogICAgICAgIH0sCiAgICAgICAgY29ybmVyOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHBvaW50KHRoaXMueCArIHRoaXMud2lkdGgsIHRoaXMueSArIHRoaXMuaGVpZ2h0KTsKICAgICAgICB9LAogICAgICAgIHRvcFJpZ2h0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHBvaW50KHRoaXMueCArIHRoaXMud2lkdGgsIHRoaXMueSk7CiAgICAgICAgfSwKICAgICAgICBib3R0b21MZWZ0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHBvaW50KHRoaXMueCwgdGhpcy55ICsgdGhpcy5oZWlnaHQpOwogICAgICAgIH0sCiAgICAgICAgY2VudGVyOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHBvaW50KHRoaXMueCArIHRoaXMud2lkdGgvMiwgdGhpcy55ICsgdGhpcy5oZWlnaHQvMik7CiAgICAgICAgfSwKICAgICAgICAvLyBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHJlY3RhbmdsZXMgaW50ZXJzZWN0CiAgICAgICAgaW50ZXJzZWN0OiBmdW5jdGlvbihyKSB7CgkgICAgdmFyIG15T3JpZ2luID0gdGhpcy5vcmlnaW4oKTsKCSAgICB2YXIgbXlDb3JuZXIgPSB0aGlzLmNvcm5lcigpOwoJICAgIHZhciByT3JpZ2luID0gci5vcmlnaW4oKTsKCSAgICB2YXIgckNvcm5lciA9IHIuY29ybmVyKCk7CiAgICAgICAgICAgIAoJICAgIGlmIChyQ29ybmVyLnggPD0gbXlPcmlnaW4ueCB8fAoJICAgICAgICByQ29ybmVyLnkgPD0gbXlPcmlnaW4ueSB8fAoJICAgICAgICByT3JpZ2luLnggPj0gbXlDb3JuZXIueCB8fAoJICAgICAgICByT3JpZ2luLnkgPj0gbXlDb3JuZXIueSkgcmV0dXJuIGZhbHNlOwoJICAgIHJldHVybiB0cnVlOwogICAgICAgIH0sCiAgICAgICAgLy8gQHJldHVybiB7c3RyaW5nfSAobGVmdHxyaWdodHx0b3B8Ym90dG9tKSBzaWRlIHdoaWNoIGlzIG5lYXJlc3QgdG8gcG9pbnQKICAgICAgICAvLyBAc2VlIFNxdWVhayBTbWFsbHRhbGssIFJlY3RhbmdsZT4+c2lkZU5lYXJlc3RUbzoKICAgICAgICBzaWRlTmVhcmVzdFRvUG9pbnQ6IGZ1bmN0aW9uKHApIHsKICAgICAgICAgICAgcCA9IHBvaW50KHApOwoJICAgIHZhciBkaXN0VG9MZWZ0ID0gcC54IC0gdGhpcy54OwoJICAgIHZhciBkaXN0VG9SaWdodCA9ICh0aGlzLnggKyB0aGlzLndpZHRoKSAtIHAueDsKCSAgICB2YXIgZGlzdFRvVG9wID0gcC55IC0gdGhpcy55OwoJICAgIHZhciBkaXN0VG9Cb3R0b20gPSAodGhpcy55ICsgdGhpcy5oZWlnaHQpIC0gcC55OwoJICAgIHZhciBjbG9zZXN0ID0gZGlzdFRvTGVmdDsKCSAgICB2YXIgc2lkZSA9ICdsZWZ0JzsKICAgICAgICAgICAgCgkgICAgaWYgKGRpc3RUb1JpZ2h0IDwgY2xvc2VzdCkgewoJICAgICAgICBjbG9zZXN0ID0gZGlzdFRvUmlnaHQ7CgkgICAgICAgIHNpZGUgPSAncmlnaHQnOwoJICAgIH0KCSAgICBpZiAoZGlzdFRvVG9wIDwgY2xvc2VzdCkgewoJICAgICAgICBjbG9zZXN0ID0gZGlzdFRvVG9wOwoJICAgICAgICBzaWRlID0gJ3RvcCc7CgkgICAgfQoJICAgIGlmIChkaXN0VG9Cb3R0b20gPCBjbG9zZXN0KSB7CgkgICAgICAgIGNsb3Nlc3QgPSBkaXN0VG9Cb3R0b207CgkgICAgICAgIHNpZGUgPSAnYm90dG9tJzsKCSAgICB9CgkgICAgcmV0dXJuIHNpZGU7CiAgICAgICAgfSwKICAgICAgICAvLyBAcmV0dXJuIHtib29sfSB0cnVlIGlmIHBvaW50IHAgaXMgaW5zaWdodCBtZQogICAgICAgIGNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uKHApIHsKICAgICAgICAgICAgcCA9IHBvaW50KHApOwoJICAgIGlmIChwLnggPj0gdGhpcy54ICYmIHAueCA8PSB0aGlzLnggKyB0aGlzLndpZHRoICYmCgkgICAgICAgIHAueSA+PSB0aGlzLnkgJiYgcC55IDw9IHRoaXMueSArIHRoaXMuaGVpZ2h0KSB7CgkgICAgICAgIHJldHVybiB0cnVlOwoJICAgIH0KCSAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSwKICAgICAgICAvLyBBbGdvcml0aG0gcG9ydGVkIGZyb20gamF2YS5hd3QuUmVjdGFuZ2xlIGZyb20gT3BlbkpESy4KICAgICAgICAvLyBAcmV0dXJuIHtib29sfSB0cnVlIGlmIHJlY3RhbmdsZSBgcmAgaXMgaW5zaWRlIG1lLgogICAgICAgIGNvbnRhaW5zUmVjdDogZnVuY3Rpb24ocikgewogICAgICAgICAgICB2YXIgbnIgPSByZWN0KHIpLm5vcm1hbGl6ZSgpOwogICAgICAgICAgICB2YXIgVyA9IG5yLndpZHRoOwogICAgICAgICAgICB2YXIgSCA9IG5yLmhlaWdodDsKICAgICAgICAgICAgdmFyIFggPSBuci54OwogICAgICAgICAgICB2YXIgWSA9IG5yLnk7CiAgICAgICAgICAgIHZhciB3ID0gdGhpcy53aWR0aDsKICAgICAgICAgICAgdmFyIGggPSB0aGlzLmhlaWdodDsKICAgICAgICAgICAgaWYgKCh3IHwgaCB8IFcgfCBIKSA8IDApIHsKICAgICAgICAgICAgICAgIC8vIEF0IGxlYXN0IG9uZSBvZiB0aGUgZGltZW5zaW9ucyBpcyBuZWdhdGl2ZS4uLgogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIE5vdGU6IGlmIGFueSBkaW1lbnNpb24gaXMgemVybywgdGVzdHMgYmVsb3cgbXVzdCByZXR1cm4gZmFsc2UuLi4KICAgICAgICAgICAgdmFyIHggPSB0aGlzLng7CiAgICAgICAgICAgIHZhciB5ID0gdGhpcy55OwogICAgICAgICAgICBpZiAoWCA8IHggfHwgWSA8IHkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB3ICs9IHg7CiAgICAgICAgICAgIFcgKz0gWDsKICAgICAgICAgICAgaWYgKFcgPD0gWCkgewogICAgICAgICAgICAgICAgLy8gWCtXIG92ZXJmbG93ZWQgb3IgVyB3YXMgemVybywgcmV0dXJuIGZhbHNlIGlmLi4uCiAgICAgICAgICAgICAgICAvLyBlaXRoZXIgb3JpZ2luYWwgdyBvciBXIHdhcyB6ZXJvIG9yCiAgICAgICAgICAgICAgICAvLyB4K3cgZGlkIG5vdCBvdmVyZmxvdyBvcgogICAgICAgICAgICAgICAgLy8gdGhlIG92ZXJmbG93ZWQgeCt3IGlzIHNtYWxsZXIgdGhhbiB0aGUgb3ZlcmZsb3dlZCBYK1cKICAgICAgICAgICAgICAgIGlmICh3ID49IHggfHwgVyA+IHcpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIFgrVyBkaWQgbm90IG92ZXJmbG93IGFuZCBXIHdhcyBub3QgemVybywgcmV0dXJuIGZhbHNlIGlmLi4uCiAgICAgICAgICAgICAgICAvLyBvcmlnaW5hbCB3IHdhcyB6ZXJvIG9yCiAgICAgICAgICAgICAgICAvLyB4K3cgZGlkIG5vdCBvdmVyZmxvdyBhbmQgeCt3IGlzIHNtYWxsZXIgdGhhbiBYK1cKICAgICAgICAgICAgICAgIGlmICh3ID49IHggJiYgVyA+IHcpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBoICs9IHk7CiAgICAgICAgICAgIEggKz0gWTsKICAgICAgICAgICAgaWYgKEggPD0gWSkgewogICAgICAgICAgICAgICAgaWYgKGggPj0geSB8fCBIID4gaCkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKGggPj0geSAmJiBIID4gaCkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0sICAgICAgICAKICAgICAgICAvLyBAcmV0dXJuIHtwb2ludH0gYSBwb2ludCBvbiBteSBib3VuZGFyeSBuZWFyZXN0IHRvIHAKICAgICAgICAvLyBAc2VlIFNxdWVhayBTbWFsbHRhbGssIFJlY3RhbmdsZT4+cG9pbnROZWFyZXN0VG86CiAgICAgICAgcG9pbnROZWFyZXN0VG9Qb2ludDogZnVuY3Rpb24ocCkgewogICAgICAgICAgICBwID0gcG9pbnQocCk7CgkgICAgaWYgKHRoaXMuY29udGFpbnNQb2ludChwKSkgewoJICAgICAgICB2YXIgc2lkZSA9IHRoaXMuc2lkZU5lYXJlc3RUb1BvaW50KHApOwoJICAgICAgICBzd2l0Y2ggKHNpZGUpewoJICAgICAgICAgIGNhc2UgInJpZ2h0IjogcmV0dXJuIHBvaW50KHRoaXMueCArIHRoaXMud2lkdGgsIHAueSk7CgkgICAgICAgICAgY2FzZSAibGVmdCI6IHJldHVybiBwb2ludCh0aGlzLngsIHAueSk7CgkgICAgICAgICAgY2FzZSAiYm90dG9tIjogcmV0dXJuIHBvaW50KHAueCwgdGhpcy55ICsgdGhpcy5oZWlnaHQpOwoJICAgICAgICAgIGNhc2UgInRvcCI6IHJldHVybiBwb2ludChwLngsIHRoaXMueSk7CgkgICAgICAgIH0KCSAgICB9CgkgICAgcmV0dXJuIHAuYWRoZXJlVG9SZWN0KHRoaXMpOwogICAgICAgIH0sCiAgICAgICAgLy8gRmluZCBwb2ludCBvbiBteSBib3VuZGFyeSB3aGVyZSBsaW5lIHN0YXJ0aW5nCiAgICAgICAgLy8gZnJvbSBteSBjZW50ZXIgZW5kaW5nIGluIHBvaW50IHAgaW50ZXJzZWN0cyBtZS4KICAgICAgICAvLyBAcGFyYW0ge251bWJlcn0gYW5nbGUgSWYgYW5nbGUgaXMgc3BlY2lmaWVkLCBpbnRlcnNlY3Rpb24gd2l0aCByb3RhdGVkIHJlY3RhbmdsZSBpcyBjb21wdXRlZC4KICAgICAgICBpbnRlcnNlY3Rpb25XaXRoTGluZUZyb21DZW50ZXJUb1BvaW50OiBmdW5jdGlvbihwLCBhbmdsZSkgewogICAgICAgICAgICBwID0gcG9pbnQocCk7CgkgICAgdmFyIGNlbnRlciA9IHBvaW50KHRoaXMueCArIHRoaXMud2lkdGgvMiwgdGhpcy55ICsgdGhpcy5oZWlnaHQvMik7CiAgICAgICAgICAgIHZhciByZXN1bHQ7CiAgICAgICAgICAgIGlmIChhbmdsZSkgcC5yb3RhdGUoY2VudGVyLCBhbmdsZSk7CiAgICAgICAgICAgIAoJICAgIC8vIChjbG9ja3dpc2UsIHN0YXJ0aW5nIGZyb20gdGhlIHRvcCBzaWRlKQoJICAgIHZhciBzaWRlcyA9IFsKCSAgICAgICAgbGluZSh0aGlzLm9yaWdpbigpLCB0aGlzLnRvcFJpZ2h0KCkpLAoJICAgICAgICBsaW5lKHRoaXMudG9wUmlnaHQoKSwgdGhpcy5jb3JuZXIoKSksCgkgICAgICAgIGxpbmUodGhpcy5jb3JuZXIoKSwgdGhpcy5ib3R0b21MZWZ0KCkpLAoJICAgICAgICBsaW5lKHRoaXMuYm90dG9tTGVmdCgpLCB0aGlzLm9yaWdpbigpKQoJICAgIF07CgkgICAgdmFyIGNvbm5lY3RvciA9IGxpbmUoY2VudGVyLCBwKTsKICAgICAgICAgICAgCgkgICAgZm9yICh2YXIgaSA9IHNpZGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXsKCSAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IHNpZGVzW2ldLmludGVyc2VjdGlvbihjb25uZWN0b3IpOwoJICAgICAgICBpZiAoaW50ZXJzZWN0aW9uICE9PSBudWxsKXsKCQkgICAgcmVzdWx0ID0gaW50ZXJzZWN0aW9uOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICB9CgkgICAgfQogICAgICAgICAgICBpZiAocmVzdWx0ICYmIGFuZ2xlKSByZXN1bHQucm90YXRlKGNlbnRlciwgLWFuZ2xlKTsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9LAogICAgICAgIC8vIE1vdmUgYW5kIGV4cGFuZCBtZS4KICAgICAgICAvLyBAcGFyYW0gciB7cmVjdGFuZ2xlfSByZXByZXNlbnRpbmcgZGVsdGFzCiAgICAgICAgbW92ZUFuZEV4cGFuZDogZnVuY3Rpb24ocikgewoJICAgIHRoaXMueCArPSByLng7CgkgICAgdGhpcy55ICs9IHIueTsKCSAgICB0aGlzLndpZHRoICs9IHIud2lkdGg7CgkgICAgdGhpcy5oZWlnaHQgKz0gci5oZWlnaHQ7CgkgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgICAgICByb3VuZDogZnVuY3Rpb24oZGVjaW1hbHMpIHsKICAgICAgICAgICAgdGhpcy54ID0gZGVjaW1hbHMgPyB0aGlzLngudG9GaXhlZChkZWNpbWFscykgOiByb3VuZCh0aGlzLngpOwogICAgICAgICAgICB0aGlzLnkgPSBkZWNpbWFscyA/IHRoaXMueS50b0ZpeGVkKGRlY2ltYWxzKSA6IHJvdW5kKHRoaXMueSk7CiAgICAgICAgICAgIHRoaXMud2lkdGggPSBkZWNpbWFscyA/IHRoaXMud2lkdGgudG9GaXhlZChkZWNpbWFscykgOiByb3VuZCh0aGlzLndpZHRoKTsKICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBkZWNpbWFscyA/IHRoaXMuaGVpZ2h0LnRvRml4ZWQoZGVjaW1hbHMpIDogcm91bmQodGhpcy5oZWlnaHQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgcmVjdGFuZ2xlOyBpLmUuLCBtYWtlIGl0IHNvIHRoYXQgaXQgaGFzIGEgbm9uLW5lZ2F0aXZlIHdpZHRoIGFuZCBoZWlnaHQuCiAgICAgICAgLy8gSWYgd2lkdGggPCAwIHRoZSBmdW5jdGlvbiBzd2FwcyB0aGUgbGVmdCBhbmQgcmlnaHQgY29ybmVycywKICAgICAgICAvLyBhbmQgaXQgc3dhcHMgdGhlIHRvcCBhbmQgYm90dG9tIGNvcm5lcnMgaWYgaGVpZ2h0IDwgMAogICAgICAgIC8vIGxpa2UgaW4gaHR0cDovL3F0LXByb2plY3Qub3JnL2RvYy9xdC00LjgvcXJlY3RmLmh0bWwjbm9ybWFsaXplZAogICAgICAgIG5vcm1hbGl6ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBuZXd4ID0gdGhpcy54OwogICAgICAgICAgICB2YXIgbmV3eSA9IHRoaXMueTsKICAgICAgICAgICAgdmFyIG5ld3dpZHRoID0gdGhpcy53aWR0aDsKICAgICAgICAgICAgdmFyIG5ld2hlaWdodCA9IHRoaXMuaGVpZ2h0OwogICAgICAgICAgICBpZiAodGhpcy53aWR0aCA8IDApIHsKICAgICAgICAgICAgICAgIG5ld3ggPSB0aGlzLnggKyB0aGlzLndpZHRoOwogICAgICAgICAgICAgICAgbmV3d2lkdGggPSAtdGhpcy53aWR0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGhpcy5oZWlnaHQgPCAwKSB7CiAgICAgICAgICAgICAgICBuZXd5ID0gdGhpcy55ICsgdGhpcy5oZWlnaHQ7CiAgICAgICAgICAgICAgICBuZXdoZWlnaHQgPSAtdGhpcy5oZWlnaHQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy54ID0gbmV3eDsKICAgICAgICAgICAgdGhpcy55ID0gbmV3eTsKICAgICAgICAgICAgdGhpcy53aWR0aCA9IG5ld3dpZHRoOwogICAgICAgICAgICB0aGlzLmhlaWdodCA9IG5ld2hlaWdodDsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgICAgICAvLyBGaW5kIG15IGJvdW5kaW5nIGJveCB3aGVuIEknbSByb3RhdGVkIHdpdGggdGhlIGNlbnRlciBvZiByb3RhdGlvbiBpbiB0aGUgY2VudGVyIG9mIG1lLgogICAgICAgIC8vIEByZXR1cm4gciB7cmVjdGFuZ2xlfSByZXByZXNlbnRpbmcgYSBib3VuZGluZyBib3gKICAgICAgICBiYm94OiBmdW5jdGlvbihhbmdsZSkgewogICAgICAgICAgICB2YXIgdGhldGEgPSB0b1JhZChhbmdsZSB8fCAwKTsKICAgICAgICAgICAgdmFyIHN0ID0gYWJzKHNpbih0aGV0YSkpOwogICAgICAgICAgICB2YXIgY3QgPSBhYnMoY29zKHRoZXRhKSk7CiAgICAgICAgICAgIHZhciB3ID0gdGhpcy53aWR0aCAqIGN0ICsgdGhpcy5oZWlnaHQgKiBzdDsKICAgICAgICAgICAgdmFyIGggPSB0aGlzLndpZHRoICogc3QgKyB0aGlzLmhlaWdodCAqIGN0OwogICAgICAgICAgICByZXR1cm4gcmVjdCh0aGlzLnggKyAodGhpcy53aWR0aCAtIHcpIC8gMiwgdGhpcy55ICsgKHRoaXMuaGVpZ2h0IC0gaCkgLyAyLCB3LCBoKTsKICAgICAgICB9CiAgICB9OwoKICAgIC8vIEVsbGlwc2UuCiAgICAvLyAtLS0tLS0tLQogICAgZnVuY3Rpb24gZWxsaXBzZShjLCBhLCBiKSB7CiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIGVsbGlwc2UpKQogICAgICAgICAgICByZXR1cm4gbmV3IGVsbGlwc2UoYywgYSwgYik7CiAgICAgICAgYyA9IHBvaW50KGMpOwogICAgICAgIHRoaXMueCA9IGMueDsKICAgICAgICB0aGlzLnkgPSBjLnk7CiAgICAgICAgdGhpcy5hID0gYTsKICAgICAgICB0aGlzLmIgPSBiOwogICAgfQoKICAgIGVsbGlwc2UucHJvdG90eXBlID0gewogICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHBvaW50KHRoaXMueCwgdGhpcy55KS50b1N0cmluZygpICsgJyAnICsgdGhpcy5hICsgJyAnICsgdGhpcy5iOwogICAgICAgIH0sCiAgICAgICAgYmJveDogZnVuY3Rpb24oKSB7CgkgICAgICAgIHJldHVybiByZWN0KHRoaXMueCAtIHRoaXMuYSwgdGhpcy55IC0gdGhpcy5iLCAyKnRoaXMuYSwgMip0aGlzLmIpOwogICAgICAgIH0sCiAgICAgICAgLy8gRmluZCBwb2ludCBvbiBtZSB3aGVyZSBsaW5lIGZyb20gbXkgY2VudGVyIHRvCiAgICAgICAgLy8gcG9pbnQgcCBpbnRlcnNlY3RzIG15IGJvdW5kYXJ5LgogICAgICAgIC8vIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSBJZiBhbmdsZSBpcyBzcGVjaWZpZWQsIGludGVyc2VjdGlvbiB3aXRoIHJvdGF0ZWQgZWxsaXBzZSBpcyBjb21wdXRlZC4KICAgICAgICBpbnRlcnNlY3Rpb25XaXRoTGluZUZyb21DZW50ZXJUb1BvaW50OiBmdW5jdGlvbihwLCBhbmdsZSkgewoJICAgIHAgPSBwb2ludChwKTsKICAgICAgICAgICAgaWYgKGFuZ2xlKSBwLnJvdGF0ZShwb2ludCh0aGlzLngsIHRoaXMueSksIGFuZ2xlKTsKICAgICAgICAgICAgdmFyIGR4ID0gcC54IC0gdGhpcy54OwoJICAgIHZhciBkeSA9IHAueSAtIHRoaXMueTsKICAgICAgICAgICAgdmFyIHJlc3VsdDsKCSAgICBpZiAoZHggPT09IDApIHsKCSAgICAgICAgcmVzdWx0ID0gdGhpcy5iYm94KCkucG9pbnROZWFyZXN0VG9Qb2ludChwKTsKICAgICAgICAgICAgICAgIGlmIChhbmdsZSkgcmV0dXJuIHJlc3VsdC5yb3RhdGUocG9pbnQodGhpcy54LCB0aGlzLnkpLCAtYW5nbGUpOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKCSAgICB9CgkgICAgdmFyIG0gPSBkeSAvIGR4OwoJICAgIHZhciBtU3F1YXJlZCA9IG0gKiBtOwoJICAgIHZhciBhU3F1YXJlZCA9IHRoaXMuYSAqIHRoaXMuYTsKCSAgICB2YXIgYlNxdWFyZWQgPSB0aGlzLmIgKiB0aGlzLmI7CgkgICAgdmFyIHggPSBzcXJ0KDEgLyAoKDEgLyBhU3F1YXJlZCkgKyAobVNxdWFyZWQgLyBiU3F1YXJlZCkpKTsKCiAgICAgICAgICAgIHggPSBkeCA8IDAgPyAteCA6IHg7CgkgICAgdmFyIHkgPSBtICogeDsKCSAgICByZXN1bHQgPSBwb2ludCh0aGlzLnggKyB4LCB0aGlzLnkgKyB5KTsKICAgICAgICAgICAgaWYgKGFuZ2xlKSByZXR1cm4gcmVzdWx0LnJvdGF0ZShwb2ludCh0aGlzLngsIHRoaXMueSksIC1hbmdsZSk7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgfTsKCiAgICAvLyBCZXppZXIgY3VydmUuCiAgICAvLyAtLS0tLS0tLS0tLS0tCiAgICB2YXIgYmV6aWVyID0gewogICAgICAgIC8vIEN1YmljIEJlemllciBjdXJ2ZSBwYXRoIHRocm91Z2ggcG9pbnRzLgogICAgICAgIC8vIFBvcnRlZCBmcm9tIEMjIGltcGxlbWVudGF0aW9uIGJ5IE9sZWcgVi4gUG9saWthcnBvdGNoa2luIGFuZCBQZXRlciBMZWUgKGh0dHA6Ly93d3cuY29kZXByb2plY3QuY29tL0tCL2dyYXBoaWNzL0JlemllclNwbGluZS5hc3B4KS4KICAgICAgICAvLyBAcGFyYW0ge2FycmF5fSBwb2ludHMgQXJyYXkgb2YgcG9pbnRzIHRocm91Z2ggd2hpY2ggdGhlIHNtb290aCBsaW5lIHdpbGwgZ28uCiAgICAgICAgLy8gQHJldHVybiB7YXJyYXl9IFNWRyBQYXRoIGNvbW1hbmRzIGFzIGFuIGFycmF5CiAgICAgICAgY3VydmVUaHJvdWdoUG9pbnRzOiBmdW5jdGlvbihwb2ludHMpIHsKICAgICAgICAgICAgdmFyIGNvbnRyb2xQb2ludHMgPSB0aGlzLmdldEN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMpOwogICAgICAgICAgICB2YXIgcGF0aCA9IFsnTScsIHBvaW50c1swXS54LCBwb2ludHNbMF0ueV07CgogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRyb2xQb2ludHNbMF0ubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHBhdGgucHVzaCgnQycsIGNvbnRyb2xQb2ludHNbMF1baV0ueCwgY29udHJvbFBvaW50c1swXVtpXS55LCBjb250cm9sUG9pbnRzWzFdW2ldLngsIGNvbnRyb2xQb2ludHNbMV1baV0ueSwgcG9pbnRzW2krMV0ueCwgcG9pbnRzW2krMV0ueSk7ICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcGF0aDsKICAgICAgICB9LAogICAgICAgIAogICAgICAgIC8vIEdldCBvcGVuLWVuZGVkIEJlemllciBTcGxpbmUgQ29udHJvbCBQb2ludHMuCiAgICAgICAgLy8gQHBhcmFtIGtub3RzIElucHV0IEtub3QgQmV6aWVyIHNwbGluZSBwb2ludHMgKEF0IGxlYXN0IHR3byBwb2ludHMhKS4KICAgICAgICAvLyBAcGFyYW0gZmlyc3RDb250cm9sUG9pbnRzIE91dHB1dCBGaXJzdCBDb250cm9sIHBvaW50cy4gQXJyYXkgb2Yga25vdHMubGVuZ3RoIC0gMSBsZW5ndGguCiAgICAgICAgLy8gIEBwYXJhbSBzZWNvbmRDb250cm9sUG9pbnRzIE91dHB1dCBTZWNvbmQgQ29udHJvbCBwb2ludHMuIEFycmF5IG9mIGtub3RzLmxlbmd0aCAtIDEgbGVuZ3RoLgogICAgICAgIGdldEN1cnZlQ29udHJvbFBvaW50czogZnVuY3Rpb24oa25vdHMpIHsKICAgICAgICAgICAgdmFyIGZpcnN0Q29udHJvbFBvaW50cyA9IFtdOwogICAgICAgICAgICB2YXIgc2Vjb25kQ29udHJvbFBvaW50cyA9IFtdOwogICAgICAgICAgICB2YXIgbiA9IGtub3RzLmxlbmd0aCAtIDE7CiAgICAgICAgICAgIHZhciBpOwoKICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlOiBCZXppZXIgY3VydmUgc2hvdWxkIGJlIGEgc3RyYWlnaHQgbGluZS4KICAgICAgICAgICAgaWYgKG4gPT0gMSkgeyAKCSAgICAgICAgLy8gM1AxID0gMlAwICsgUDMKCSAgICAgICAgZmlyc3RDb250cm9sUG9pbnRzWzBdID0gcG9pbnQoKDIgKiBrbm90c1swXS54ICsga25vdHNbMV0ueCkgLyAzLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMiAqIGtub3RzWzBdLnkgKyBrbm90c1sxXS55KSAvIDMpOwoJICAgICAgICAvLyBQMiA9IDJQMSDigJMgUDAKCSAgICAgICAgc2Vjb25kQ29udHJvbFBvaW50c1swXSA9IHBvaW50KDIgKiBmaXJzdENvbnRyb2xQb2ludHNbMF0ueCAtIGtub3RzWzBdLngsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyICogZmlyc3RDb250cm9sUG9pbnRzWzBdLnkgLSBrbm90c1swXS55KTsKCSAgICAgICAgcmV0dXJuIFtmaXJzdENvbnRyb2xQb2ludHMsIHNlY29uZENvbnRyb2xQb2ludHNdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGZpcnN0IEJlemllciBjb250cm9sIHBvaW50cy4KICAgICAgICAgICAgLy8gUmlnaHQgaGFuZCBzaWRlIHZlY3Rvci4KICAgICAgICAgICAgdmFyIHJocyA9IFtdOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gU2V0IHJpZ2h0IGhhbmQgc2lkZSBYIHZhbHVlcy4KICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IG4gLSAxOyBpKyspIHsKICAgICAgICAgICAgICAgIHJoc1tpXSA9IDQgKiBrbm90c1tpXS54ICsgMiAqIGtub3RzW2kgKyAxXS54OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJoc1swXSA9IGtub3RzWzBdLnggKyAyICoga25vdHNbMV0ueDsKICAgICAgICAgICAgcmhzW24gLSAxXSA9ICg4ICoga25vdHNbbiAtIDFdLnggKyBrbm90c1tuXS54KSAvIDIuMDsKICAgICAgICAgICAgLy8gR2V0IGZpcnN0IGNvbnRyb2wgcG9pbnRzIFgtdmFsdWVzLgogICAgICAgICAgICB2YXIgeCA9IHRoaXMuZ2V0Rmlyc3RDb250cm9sUG9pbnRzKHJocyk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBTZXQgcmlnaHQgaGFuZCBzaWRlIFkgdmFsdWVzLgogICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbiAtIDE7ICsraSkgewoJICAgICAgICByaHNbaV0gPSA0ICoga25vdHNbaV0ueSArIDIgKiBrbm90c1tpICsgMV0ueTsKICAgICAgICAgICAgfQogICAgICAgICAgICByaHNbMF0gPSBrbm90c1swXS55ICsgMiAqIGtub3RzWzFdLnk7CiAgICAgICAgICAgIHJoc1tuIC0gMV0gPSAoOCAqIGtub3RzW24gLSAxXS55ICsga25vdHNbbl0ueSkgLyAyLjA7CiAgICAgICAgICAgIC8vIEdldCBmaXJzdCBjb250cm9sIHBvaW50cyBZLXZhbHVlcy4KICAgICAgICAgICAgdmFyIHkgPSB0aGlzLmdldEZpcnN0Q29udHJvbFBvaW50cyhyaHMpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gRmlsbCBvdXRwdXQgYXJyYXlzLgogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7CgkgICAgICAgIC8vIEZpcnN0IGNvbnRyb2wgcG9pbnQuCgkgICAgICAgIGZpcnN0Q29udHJvbFBvaW50cy5wdXNoKHBvaW50KHhbaV0sIHlbaV0pKTsKCSAgICAgICAgLy8gU2Vjb25kIGNvbnRyb2wgcG9pbnQuCgkgICAgICAgIGlmIChpIDwgbiAtIDEpIHsKCSAgICAgICAgICAgIHNlY29uZENvbnRyb2xQb2ludHMucHVzaChwb2ludCgyICoga25vdHMgW2kgKyAxXS54IC0geFtpICsgMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgKiBrbm90c1tpICsgMV0ueSAtIHlbaSArIDFdKSk7CgkgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICBzZWNvbmRDb250cm9sUG9pbnRzLnB1c2gocG9pbnQoKGtub3RzW25dLnggKyB4W24gLSAxXSkgLyAyLAoJCQkJCSAgICAgICAgICAgKGtub3RzW25dLnkgKyB5W24gLSAxXSkgLyAyKSk7CgkgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gW2ZpcnN0Q29udHJvbFBvaW50cywgc2Vjb25kQ29udHJvbFBvaW50c107CiAgICAgICAgfSwKCiAgICAgICAgLy8gU29sdmVzIGEgdHJpZGlhZ29uYWwgc3lzdGVtIGZvciBvbmUgb2YgY29vcmRpbmF0ZXMgKHggb3IgeSkgb2YgZmlyc3QgQmV6aWVyIGNvbnRyb2wgcG9pbnRzLgogICAgICAgIC8vIEBwYXJhbSByaHMgUmlnaHQgaGFuZCBzaWRlIHZlY3Rvci4KICAgICAgICAvLyBAcmV0dXJuIFNvbHV0aW9uIHZlY3Rvci4KICAgICAgICBnZXRGaXJzdENvbnRyb2xQb2ludHM6IGZ1bmN0aW9uKHJocykgewogICAgICAgICAgICB2YXIgbiA9IHJocy5sZW5ndGg7CiAgICAgICAgICAgIC8vIGB4YCBpcyBhIHNvbHV0aW9uIHZlY3Rvci4KICAgICAgICAgICAgdmFyIHggPSBbXTsKICAgICAgICAgICAgdmFyIHRtcCA9IFtdOwogICAgICAgICAgICB2YXIgYiA9IDIuMDsKICAgICAgICAgICAgCiAgICAgICAgICAgIHhbMF0gPSByaHNbMF0gLyBiOwogICAgICAgICAgICAvLyBEZWNvbXBvc2l0aW9uIGFuZCBmb3J3YXJkIHN1YnN0aXR1dGlvbi4KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBuOyBpKyspIHsgCgkgICAgICAgIHRtcFtpXSA9IDEgLyBiOwoJICAgICAgICBiID0gKGkgPCBuIC0gMSA/IDQuMCA6IDMuNSkgLSB0bXBbaV07CgkgICAgICAgIHhbaV0gPSAocmhzW2ldIC0geFtpIC0gMV0pIC8gYjsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbjsgaSsrKSB7CiAgICAgICAgICAgICAgICAvLyBCYWNrc3Vic3RpdHV0aW9uLgoJICAgICAgICB4W24gLSBpIC0gMV0gLT0gdG1wW24gLSBpXSAqIHhbbiAtIGldOyAKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4geDsKICAgICAgICB9LAoKICAgICAgICAvLyBTb2x2ZXMgYW4gaW52ZXJzaW9uIHByb2JsZW0gLS0gR2l2ZW4gdGhlICh4LCB5KSBjb29yZGluYXRlcyBvZiBhIHBvaW50IHdoaWNoIGxpZXMgb24KICAgICAgICAvLyBhIHBhcmFtZXRyaWMgY3VydmUgeCA9IHgodCkvdyh0KSwgeSA9IHkodCkvdyh0KSwg76yBbmQgdGhlIHBhcmFtZXRlciB2YWx1ZSB0CiAgICAgICAgLy8gd2hpY2ggY29ycmVzcG9uZHMgdG8gdGhhdCBwb2ludC4KICAgICAgICAvLyBAcGFyYW0gY29udHJvbCBwb2ludHMgKHN0YXJ0LCBjb250cm9sIHN0YXJ0LCBjb250cm9sIGVuZCwgZW5kKQogICAgICAgIC8vIEByZXR1cm4gYSBmdW5jdGlvbiBhY2NlcHRzIGEgcG9pbnQgYW5kIHJldHVybnMgdC4KICAgICAgICBnZXRJbnZlcnNpb25Tb2x2ZXI6IGZ1bmN0aW9uKHAwLCBwMSwgcDIsIHAzKSB7CiAgICAgICAgICAgIHZhciBwdHMgPSBhcmd1bWVudHM7CiAgICAgICAgICAgIGZ1bmN0aW9uIGwoaSxqKSB7CiAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGVzIGEgZGV0ZXJtaW5hbnQgM3gzCiAgICAgICAgICAgICAgICAvLyBbcC54ICBwLnkgIDFdCiAgICAgICAgICAgICAgICAvLyBbcGkueCBwaS55IDFdCiAgICAgICAgICAgICAgICAvLyBbcGoueCBwai55IDFdCiAgICAgICAgICAgICAgICB2YXIgcGkgPSBwdHNbaV0sIHBqID0gcHRzW2pdOwogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdyA9IChpICUgMyA/IDMgOiAxKSAqIChqICUgMyA/IDMgOiAxKTsKICAgICAgICAgICAgICAgICAgICB2YXIgbGlqID0gcC54ICogKHBpLnkgLSBwai55KSArIHAueSAqIChwai54IC0gcGkueCkgKyBwaS54ICogcGoueSAtIHBpLnkgKiBwai54OwogICAgICAgICAgICAgICAgICAgIHJldHVybiB3ICogbGlqOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gc29sdmVJbnZlcnNpb24ocCkgewogICAgICAgICAgICAgICAgdmFyIGN0ID0gMyAqIGwoMiwzKShwMSk7CiAgICAgICAgICAgICAgICB2YXIgYzEgPSBsKDEsMykocDApIC8gY3Q7CiAgICAgICAgICAgICAgICB2YXIgYzIgPSAtbCgyLDMpKHAwKSAvIGN0OwogICAgICAgICAgICAgICAgdmFyIGxhID0gYzEgKiBsKDMsMSkocCkgKyBjMiAqIChsKDMsMCkocCkgKyBsKDIsMSkocCkpICsgbCgyLDApKHApOwogICAgICAgICAgICAgICAgdmFyIGxiID0gYzEgKiBsKDMsMCkocCkgKyBjMiAqIGwoMiwwKShwKSArIGwoMSwwKShwKTsKICAgICAgICAgICAgICAgIHJldHVybiBsYiAvIChsYiAtIGxhKTsKICAgICAgICAgICAgfTsKICAgICAgICB9LAoKICAgICAgICAvLyBEaXZpZGUgYSBCZXppZXIgY3VydmUgaW50byB0d28gYXQgcG9pbnQgZGVmaW5lZCBieSB2YWx1ZSAndCcgPDAsMT4uCiAgICAgICAgLy8gVXNpbmcgZGVDYXN0ZWxqYXUgYWxnb3JpdGhtLiBodHRwOi8vbWF0aC5zdGFja2V4Y2hhbmdlLmNvbS9hLzMxNzg2NwogICAgICAgIC8vIEBwYXJhbSBjb250cm9sIHBvaW50cyAoc3RhcnQsIGNvbnRyb2wgc3RhcnQsIGNvbnRyb2wgZW5kLCBlbmQpCiAgICAgICAgLy8gQHJldHVybiBhIGZ1bmN0aW9uIGFjY2VwdHMgdCBhbmQgcmV0dXJucyAyIGN1cnZlcyBlYWNoIGRlZmluZWQgYnkgNCBjb250cm9sIHBvaW50cy4KICAgICAgICBnZXRDdXJ2ZURpdmlkZXI6IGZ1bmN0aW9uKHAwLHAxLHAyLHAzKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkaXZpZGVDdXJ2ZSh0KSB7CiAgICAgICAgICAgICAgICB2YXIgbCA9IGxpbmUocDAscDEpLnBvaW50QXQodCk7CiAgICAgICAgICAgICAgICB2YXIgbSA9IGxpbmUocDEscDIpLnBvaW50QXQodCk7CiAgICAgICAgICAgICAgICB2YXIgbiA9IGxpbmUocDIscDMpLnBvaW50QXQodCk7CiAgICAgICAgICAgICAgICB2YXIgcCA9IGxpbmUobCxtKS5wb2ludEF0KHQpOwogICAgICAgICAgICAgICAgdmFyIHEgPSBsaW5lKG0sbikucG9pbnRBdCh0KTsKICAgICAgICAgICAgICAgIHZhciByID0gbGluZShwLHEpLnBvaW50QXQodCk7CiAgICAgICAgICAgICAgICByZXR1cm4gW3sgcDA6IHAwLCBwMTogbCwgcDI6IHAsIHAzOiByIH0sIHsgcDA6IHIsIHAxOiBxLCBwMjogbiwgcDM6IHAzIH1dOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKCiAgICAvLyBTY2FsZS4KICAgIHZhciBzY2FsZSA9IHsKCiAgICAgICAgLy8gUmV0dXJuIHRoZSBgdmFsdWVgIGZyb20gdGhlIGBkb21haW5gIGludGVydmFsIHNjYWxlZCB0byB0aGUgYHJhbmdlYCBpbnRlcnZhbC4KICAgICAgICBsaW5lYXI6IGZ1bmN0aW9uKGRvbWFpbiwgcmFuZ2UsIHZhbHVlKSB7CgogICAgICAgICAgICB2YXIgZG9tYWluU3BhbiA9IGRvbWFpblsxXSAtIGRvbWFpblswXTsKICAgICAgICAgICAgdmFyIHJhbmdlU3BhbiA9IHJhbmdlWzFdIC0gcmFuZ2VbMF07CiAgICAgICAgICAgIHJldHVybiAoKCh2YWx1ZSAtIGRvbWFpblswXSkgLyBkb21haW5TcGFuKSAqIHJhbmdlU3BhbiArIHJhbmdlWzBdKSB8fCAwOwogICAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIHsKCiAgICAgICAgdG9EZWc6IHRvRGVnLAogICAgICAgIHRvUmFkOiB0b1JhZCwKICAgICAgICBzbmFwVG9HcmlkOiBzbmFwVG9HcmlkLAoJbm9ybWFsaXplQW5nbGU6IG5vcm1hbGl6ZUFuZ2xlLAogICAgICAgIHBvaW50OiBwb2ludCwKICAgICAgICBsaW5lOiBsaW5lLAogICAgICAgIHJlY3Q6IHJlY3QsCiAgICAgICAgZWxsaXBzZTogZWxsaXBzZSwKICAgICAgICBiZXppZXI6IGJlemllciwKICAgICAgICBzY2FsZTogc2NhbGUKICAgIH0KfSkpOwoKLy8gICAgICBKb2ludEpTIGxpYnJhcnkuCi8vICAgICAgKGMpIDIwMTEtMjAxMyBjbGllbnQgSU8KCmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHsKCiAgICB2YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpOwp9CgoKLy8gR2xvYmFsIG5hbWVzcGFjZS4KCnZhciBqb2ludCA9IHsKCiAgICB2ZXJzaW9uOiAnWyU9IHBrZy52ZXJzaW9uICVdJywKCiAgICAvLyBgam9pbnQuZGlhYCBuYW1lc3BhY2UuCiAgICBkaWE6IHt9LAoKICAgIC8vIGBqb2ludC51aWAgbmFtZXNwYWNlLgogICAgdWk6IHt9LAoKICAgIC8vIGBqb2ludC5sYXlvdXRgIG5hbWVzcGFjZS4KICAgIGxheW91dDoge30sCgogICAgLy8gYGpvaW50LnNoYXBlc2AgbmFtZXNwYWNlLgogICAgc2hhcGVzOiB7fSwKCiAgICAvLyBgam9pbnQuZm9ybWF0YCBuYW1lc3BhY2UuCiAgICBmb3JtYXQ6IHt9LAoKICAgIC8vIGBqb2ludC5jb25uZWN0b3JzYCBuYW1lc3BhY2UuCiAgICBjb25uZWN0b3JzOiB7fSwKCiAgICAvLyBgam9pbnQucm91dGVyc2AgbmFtZXNwYWNlLgogICAgcm91dGVyczoge30sCgogICAgdXRpbDogewoKICAgICAgICAvLyBSZXR1cm4gYSBzaW1wbGUgaGFzaCBjb2RlIGZyb20gYSBzdHJpbmcuIFNlZSBodHRwOi8vd2VyeGx0ZC5jb20vd3AvMjAxMC8wNS8xMy9qYXZhc2NyaXB0LWltcGxlbWVudGF0aW9uLW9mLWphdmFzLXN0cmluZy1oYXNoY29kZS1tZXRob2QvLgogICAgICAgIGhhc2hDb2RlOiBmdW5jdGlvbihzdHIpIHsKCiAgICAgICAgICAgIHZhciBoYXNoID0gMDsKICAgICAgICAgICAgaWYgKHN0ci5sZW5ndGggPT0gMCkgcmV0dXJuIGhhc2g7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgICAgICAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgYzsKICAgICAgICAgICAgICAgIGhhc2ggPSBoYXNoICYgaGFzaDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGhhc2g7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0QnlQYXRoOiBmdW5jdGlvbihvYmosIHBhdGgsIGRlbGltKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBkZWxpbSA9IGRlbGltIHx8ICcuJzsKICAgICAgICAgICAgdmFyIGtleXMgPSBwYXRoLnNwbGl0KGRlbGltKTsKICAgICAgICAgICAgdmFyIGtleTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkgewogICAgICAgICAgICAgICAga2V5ID0ga2V5cy5zaGlmdCgpOwogICAgICAgICAgICAgICAgaWYgKGtleSBpbiBvYmopIHsKICAgICAgICAgICAgICAgICAgICBvYmogPSBvYmpba2V5XTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gb2JqOwogICAgICAgIH0sCgogICAgICAgIHNldEJ5UGF0aDogZnVuY3Rpb24ob2JqLCBwYXRoLCB2YWx1ZSwgZGVsaW0pIHsKCiAgICAgICAgICAgIGRlbGltID0gZGVsaW0gfHwgJy4nOwoKICAgICAgICAgICAgdmFyIGtleXMgPSBwYXRoLnNwbGl0KGRlbGltKTsKICAgICAgICAgICAgdmFyIGRpdmVyID0gb2JqOwogICAgICAgICAgICB2YXIgaSA9IDA7CgogICAgICAgICAgICBpZiAocGF0aC5pbmRleE9mKGRlbGltKSA+IC0xKSB7CgogICAgICAgICAgICAgICAgZm9yICh2YXIgbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBsZW4gLSAxOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAvLyBkaXZlciBjcmVhdGVzIGFuIGVtcHR5IG9iamVjdCBpZiB0aGVyZSBpcyBubyBuZXN0ZWQgb2JqZWN0IHVuZGVyIHN1Y2ggYSBrZXkuCiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBtZWFucyB0aGF0IG9uZSBjYW4gcG9wdWxhdGUgYW4gZW1wdHkgbmVzdGVkIG9iamVjdCB3aXRoIHNldEJ5UGF0aCgpLgogICAgICAgICAgICAgICAgICAgIGRpdmVyID0gZGl2ZXJba2V5c1tpXV0gfHwgKGRpdmVyW2tleXNbaV1dID0ge30pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGl2ZXJba2V5c1tsZW4gLSAxXV0gPSB2YWx1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG9ialtwYXRoXSA9IHZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBvYmo7CiAgICAgICAgfSwKCiAgICAgICAgdW5zZXRCeVBhdGg6IGZ1bmN0aW9uKG9iaiwgcGF0aCwgZGVsaW0pIHsKCiAgICAgICAgICAgIGRlbGltID0gZGVsaW0gfHwgJy4nOwoKICAgICAgICAgICAgLy8gaW5kZXggb2YgdGhlIGxhc3QgZGVsaW1pdGVyCiAgICAgICAgICAgIHZhciBpID0gcGF0aC5sYXN0SW5kZXhPZihkZWxpbSk7CgogICAgICAgICAgICBpZiAoaSA+IC0xKSB7CgogICAgICAgICAgICAgICAgLy8gdW5zZXR0aW5nIGEgbmVzdGVkIGF0dHJpYnV0ZQogICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGpvaW50LnV0aWwuZ2V0QnlQYXRoKG9iaiwgcGF0aC5zdWJzdHIoMCwgaSksIGRlbGltKTsKCiAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7CgogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJlbnRbcGF0aC5zbGljZShpICsgMSldOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAvLyB1bnNldHRpbmcgYSBwcmltaXRpdmUgYXR0cmlidXRlCiAgICAgICAgICAgICAgICBkZWxldGUgb2JqW3BhdGhdOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gb2JqOwogICAgICAgIH0sCgogICAgICAgIGZsYXR0ZW5PYmplY3Q6IGZ1bmN0aW9uKG9iaiwgZGVsaW0sIHN0b3ApIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIGRlbGltID0gZGVsaW0gfHwgJy4nOwogICAgICAgICAgICB2YXIgcmV0ID0ge307CgkgICAgCgkgICAgZm9yICh2YXIga2V5IGluIG9iaikgewoJCWlmICghb2JqLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlOwoKICAgICAgICAgICAgICAgIHZhciBzaG91bGRHb0RlZXBlciA9IHR5cGVvZiBvYmpba2V5XSA9PT0gJ29iamVjdCc7CiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkR29EZWVwZXIgJiYgc3RvcCAmJiBzdG9wKG9ialtrZXldKSkgewogICAgICAgICAgICAgICAgICAgIHNob3VsZEdvRGVlcGVyID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKCQlpZiAoc2hvdWxkR29EZWVwZXIpIHsKCQkgICAgdmFyIGZsYXRPYmplY3QgPSB0aGlzLmZsYXR0ZW5PYmplY3Qob2JqW2tleV0sIGRlbGltLCBzdG9wKTsKCQkgICAgZm9yICh2YXIgZmxhdEtleSBpbiBmbGF0T2JqZWN0KSB7CgkJCWlmICghZmxhdE9iamVjdC5oYXNPd25Qcm9wZXJ0eShmbGF0S2V5KSkgY29udGludWU7CgkJCQoJCQlyZXRba2V5ICsgZGVsaW0gKyBmbGF0S2V5XSA9IGZsYXRPYmplY3RbZmxhdEtleV07CgkJICAgIH0KCQl9IGVsc2UgewoJCSAgICByZXRba2V5XSA9IG9ialtrZXldOwoJCX0KCSAgICB9CgkgICAgcmV0dXJuIHJldDsKICAgICAgICB9LAoKICAgICAgICB1dWlkOiBmdW5jdGlvbigpIHsKCiAgICAgICAgICAgIC8vIGNyZWRpdDogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3Bvc3RzLzIxMTc1MjMvcmV2aXNpb25zCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkqMTZ8MCwgdiA9IGMgPT0gJ3gnID8gciA6IChyJjB4M3wweDgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICAvLyBHZW5lcmF0ZSBnbG9iYWwgdW5pcXVlIGlkIGZvciBvYmogYW5kIHN0b3JlIGl0IGFzIGEgcHJvcGVydHkgb2YgdGhlIG9iamVjdC4KICAgICAgICBndWlkOiBmdW5jdGlvbihvYmopIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIHRoaXMuZ3VpZC5pZCA9IHRoaXMuZ3VpZC5pZCB8fCAxOwogICAgICAgICAgICBvYmouaWQgPSAob2JqLmlkID09PSB1bmRlZmluZWQgPyAnal8nICsgdGhpcy5ndWlkLmlkKysgOiBvYmouaWQpOwogICAgICAgICAgICByZXR1cm4gb2JqLmlkOwogICAgICAgIH0sCgogICAgICAgIC8vIENvcHkgYWxsIHRoZSBwcm9wZXJ0aWVzIHRvIHRoZSBmaXJzdCBhcmd1bWVudCBmcm9tIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzLgogICAgICAgIC8vIEFsbCB0aGUgcHJvcGVydGllcyB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHRoZSBwcm9wZXJ0aWVzIGZyb20gdGhlIGZvbGxvd2luZwogICAgICAgIC8vIGFyZ3VtZW50cy4gSW5oZXJpdGVkIHByb3BlcnRpZXMgYXJlIGlnbm9yZWQuCiAgICAgICAgbWl4aW46IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHRhcmdldCA9IGFyZ3VtZW50c1swXTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgZXh0ZW5zaW9uID0gYXJndW1lbnRzW2ldOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBPbmx5IGZ1bmN0aW9ucyBhbmQgb2JqZWN0cyBjYW4gYmUgbWl4aW5lZC4KCiAgICAgICAgICAgICAgICBpZiAoKE9iamVjdChleHRlbnNpb24pICE9PSBleHRlbnNpb24pICYmCiAgICAgICAgICAgICAgICAgICAgIV8uaXNGdW5jdGlvbihleHRlbnNpb24pICYmCiAgICAgICAgICAgICAgICAgICAgKGV4dGVuc2lvbiA9PT0gbnVsbCB8fCBleHRlbnNpb24gPT09IHVuZGVmaW5lZCkpIHsKCiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgXy5lYWNoKGV4dGVuc2lvbiwgZnVuY3Rpb24oY29weSwga2V5KSB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWl4aW4uZGVlcCAmJiAoT2JqZWN0KGNvcHkpID09PSBjb3B5KSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRba2V5XSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gXy5pc0FycmF5KGNvcHkpID8gW10gOiB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5taXhpbih0YXJnZXRba2V5XSwgY29weSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFtrZXldICE9PSBjb3B5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWl4aW4uc3VwcGxlbWVudCB8fCAhdGFyZ2V0Lmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoJICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IGNvcHk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7CiAgICAgICAgfSwKCiAgICAgICAgLy8gQ29weSBhbGwgcHJvcGVydGllcyB0byB0aGUgZmlyc3QgYXJndW1lbnQgZnJvbSB0aGUgZm9sbG93aW5nCiAgICAgICAgLy8gYXJndW1lbnRzIG9ubHkgaW4gY2FzZSBpZiB0aGV5IGRvbid0IGV4aXN0cyBpbiB0aGUgZmlyc3QgYXJndW1lbnQuCiAgICAgICAgLy8gQWxsIHRoZSBmdW5jdGlvbiBwcm9wZXJlcnRpZXMgaW4gdGhlIGZpcnN0IGFyZ3VtZW50IHdpbGwgZ2V0CiAgICAgICAgLy8gYWRkaXRpb25hbCBwcm9wZXJ0eSBiYXNlIHBvaW50aW5nIHRvIHRoZSBleHRlbmRlcnMgc2FtZSBuYW1lZAogICAgICAgIC8vIHByb3BlcnR5IGZ1bmN0aW9uJ3MgY2FsbCBtZXRob2QuCiAgICAgICAgc3VwcGxlbWVudDogZnVuY3Rpb24oKSB7CgogICAgICAgICAgICB0aGlzLm1peGluLnN1cHBsZW1lbnQgPSB0cnVlOwogICAgICAgICAgICB2YXIgcmV0ID0gdGhpcy5taXhpbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICB0aGlzLm1peGluLnN1cHBsZW1lbnQgPSBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9LAoKICAgICAgICAvLyBTYW1lIGFzIGBtaXhpbigpYCBidXQgZGVlcCB2ZXJzaW9uLgogICAgICAgIGRlZXBNaXhpbjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICB0aGlzLm1peGluLmRlZXAgPSB0cnVlOwogICAgICAgICAgICB2YXIgcmV0ID0gdGhpcy5taXhpbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICB0aGlzLm1peGluLmRlZXAgPSBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9LAoKICAgICAgICAvLyBTYW1lIGFzIGBzdXBwbGVtZW50KClgIGJ1dCBkZWVwIHZlcnNpb24uCiAgICAgICAgZGVlcFN1cHBsZW1lbnQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAKICAgICAgICAgICAgdGhpcy5taXhpbi5kZWVwID0gdGhpcy5taXhpbi5zdXBwbGVtZW50ID0gdHJ1ZTsKICAgICAgICAgICAgdmFyIHJldCA9IHRoaXMubWl4aW4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgdGhpcy5taXhpbi5kZWVwID0gdGhpcy5taXhpbi5zdXBwbGVtZW50ID0gZmFsc2U7CiAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfSwKCiAgICAgICAgbm9ybWFsaXplRXZlbnQ6IGZ1bmN0aW9uKGV2dCkgewoKICAgICAgICAgICAgcmV0dXJuIChldnQub3JpZ2luYWxFdmVudCAmJiBldnQub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlcyAmJiBldnQub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGgpID8gZXZ0Lm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBldnQ7CiAgICAgICAgfSwKCgluZXh0RnJhbWU6KGZ1bmN0aW9uKCkgewoKCSAgICB2YXIgcmFmOwoJICAgIHZhciBjbGllbnQgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnOwoKCSAgICBpZiAoY2xpZW50KSB7CgoJCXJhZiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgICAgfHwKCQkgICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8CgkgICAgICAgICAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgfHwKCQkgICAgICB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgIHx8CgkJICAgICAgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lOwoKCSAgICB9CgoJICAgIGlmICghcmFmKSB7CgoJCXZhciBsYXN0VGltZSA9IDA7CgoJCXJhZiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CgoJCSAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKCQkgICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSk7CgkJICAgIHZhciBpZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGNhbGxiYWNrKGN1cnJUaW1lICsgdGltZVRvQ2FsbCk7IH0sIHRpbWVUb0NhbGwpOwoJCSAgICBsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDsKCQkgICAgcmV0dXJuIGlkOwoKCQl9OwoJICAgIH0KCgkgICAgcmV0dXJuIGNsaWVudCA/IF8uYmluZChyYWYsIHdpbmRvdykgOiByYWY7Cgl9KSgpLAoKCWNhbmNlbEZyYW1lOiAoZnVuY3Rpb24oKSB7CgoJICAgIHZhciBjYWY7CgkgICAgdmFyIGNsaWVudCA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCc7CgoJICAgIGlmIChjbGllbnQpIHsKCgkJY2FmID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lICAgICAgICAgICAgICB8fAoJCSAgICAgIHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSAgICAgICAgfHwKCSAgICAgICAgICAgICAgd2luZG93LndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fAoJCSAgICAgIHdpbmRvdy5tc0NhbmNlbEFuaW1hdGlvbkZyYW1lICAgICAgICAgICAgfHwKCSAgICAgICAgICAgICAgd2luZG93Lm1zQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICB8fAoJCSAgICAgIHdpbmRvdy5vQ2FuY2VsQW5pbWF0aW9uRnJhbWUgICAgICAgICAgICAgfHwKCSAgICAgICAgICAgICAgd2luZG93Lm9DYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgICB8fAoJICAgICAgICAgICAgICB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgICAgICAgICAgIHx8CgkJICAgICAgd2luZG93Lm1vekNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZTsKCgkgICAgfQoKCSAgICBjYWYgPSBjYWYgfHwgY2xlYXJUaW1lb3V0OwoKCSAgICByZXR1cm4gY2xpZW50ID8gXy5iaW5kKGNhZiwgd2luZG93KSA6IGNhZjsKCX0pKCksCgogICAgICAgIGJyZWFrVGV4dDogZnVuY3Rpb24odGV4dCwgc2l6ZSwgc3R5bGVzLCBvcHQpIHsKCiAgICAgICAgICAgIG9wdCA9IG9wdCB8fCB7fTsKCiAgICAgICAgICAgIHZhciB3aWR0aCA9IHNpemUud2lkdGg7CiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBzaXplLmhlaWdodDsKCiAgICAgICAgICAgIHZhciBzdmdEb2N1bWVudCA9IG9wdC5zdmdEb2N1bWVudCB8fCBWKCdzdmcnKS5ub2RlOwogICAgICAgICAgICB2YXIgdGV4dEVsZW1lbnQgPSBWKCc8dGV4dD48dHNwYW4+PC90c3Bhbj48L3RleHQ+JykuYXR0cihzdHlsZXMgfHwge30pLm5vZGU7CiAgICAgICAgICAgIHZhciB0ZXh0U3BhbiA9IHRleHRFbGVtZW50LmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTsKCiAgICAgICAgICAgIHRleHRTcGFuLmFwcGVuZENoaWxkKHRleHROb2RlKTsKCiAgICAgICAgICAgIHN2Z0RvY3VtZW50LmFwcGVuZENoaWxkKHRleHRFbGVtZW50KTsKCiAgICAgICAgICAgIGlmICghb3B0LnN2Z0RvY3VtZW50KSB7CgogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdmdEb2N1bWVudCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciB3b3JkcyA9IHRleHQuc3BsaXQoJyAnKTsKICAgICAgICAgICAgdmFyIGZ1bGwgPSBbXTsKICAgICAgICAgICAgdmFyIGxpbmVzID0gW107CiAgICAgICAgICAgIHZhciBwOwoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSAwLCBsZW4gPSB3b3Jkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewoKICAgICAgICAgICAgICAgIHZhciB3b3JkID0gd29yZHNbaV07CgogICAgICAgICAgICAgICAgdGV4dE5vZGUuZGF0YSA9IGxpbmVzW2xdID8gbGluZXNbbF0gKyAnICcgKyB3b3JkIDogd29yZDsKCiAgICAgICAgICAgICAgICBpZiAodGV4dFNwYW4uZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCkgPD0gd2lkdGgpIHsKCiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGN1cnJlbnQgbGluZSBmaXRzCiAgICAgICAgICAgICAgICAgICAgbGluZXNbbF0gPSB0ZXh0Tm9kZS5kYXRhOwoKICAgICAgICAgICAgICAgICAgICBpZiAocCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSB3ZXJlIHBhcnRpdGlvbmluZy4gUHV0IHJlc3Qgb2YgdGhlIHdvcmQgb250byBuZXh0IGxpbmUKICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFtsKytdID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBwYXJ0aXRpb25pbmcKICAgICAgICAgICAgICAgICAgICAgICAgcCA9IDA7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgICAgIGlmICghbGluZXNbbF0gfHwgcCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpdGlvbiA9ICEhcDsKCiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSB3b3JkLmxlbmd0aCAtIDE7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydGl0aW9uIHx8ICFwKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd29yZCBoYXMgb25seSBvbmUgY2hhcmFjdGVyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGluZXNbbF0pIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHdvbid0IGZpdCB0aGlzIHRleHQgd2l0aGluIG91ciByZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzID0gW107CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhcnRpdGlvbmluZyBkaWRuJ3QgaGVscCBvbiB0aGUgbm9uLWVtcHR5IGxpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnkgYWdhaW4sIGJ1dCB0aGlzIHRpbWUgc3RhcnQgd2l0aCBhIG5ldyBsaW5lCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBwYXJ0aXRpb25zIGNyZWF0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5zcGxpY2UoaSwyLCB3b3JkICsgd29yZHNbaSsxXSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkanVzdCB3b3JkIGxlbmd0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbi0tOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsW2wrK10gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGktLTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBsYXN0IGxldHRlciB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IHdvcmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzW2ldID0gd29yZC5zdWJzdHJpbmcoMCxwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzW2krMV0gPSB3b3JkLnN1YnN0cmluZyhwKSArIHdvcmRzW2krMV07CgogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGluaXRpYXRlIHBhcnRpdGlvbmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3BsaXQgdGhlIGxvbmcgd29yZCBpbnRvIHR3byB3b3JkcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZHMuc3BsaWNlKGksIDEsIHdvcmQuc3Vic3RyaW5nKDAscCksIHdvcmQuc3Vic3RyaW5nKHApKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGp1c3Qgd29yZHMgbGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4rKzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobCAmJiAhZnVsbFtsLTFdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHByZXZpb3VzIGxpbmUgaXMgbm90IGZ1bGwsIHRyeSB0byBmaXQgbWF4IHBhcnQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgY3VycmVudCB3b3JkIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC0tOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpLS07CgogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGwrKzsKICAgICAgICAgICAgICAgICAgICBpLS07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gaWYgc2l6ZS5oZWlnaHQgaXMgZGVmaW5lZCB3ZSBoYXZlIHRvIGNoZWNrIHdoZXRoZXIgdGhlIGhlaWdodCBvZiB0aGUgZW50aXJlCiAgICAgICAgICAgICAgICAvLyB0ZXh0IGV4Y2VlZHMgdGhlIHJlY3QgaGVpZ2h0CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhlaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHsKCiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGxpbmUgaGVpZ2h0IGFzIHRleHQgaGVpZ2h0IC8gMC44IChhcyB0ZXh0IGhlaWdodCBpcyBhcHByb3guIDAuOGVtCiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGxpbmUgaGVpZ2h0IGlzIDFlbS4gU2VlIHZlY3Rvcml6ZXIudGV4dCgpKQogICAgICAgICAgICAgICAgICAgIHZhciBsaCA9IGxoIHx8IHRleHRFbGVtZW50LmdldEJCb3goKS5oZWlnaHQgKiAxLjI1OwoKICAgICAgICAgICAgICAgICAgICBpZiAobGggKiBsaW5lcy5sZW5ndGggPiBoZWlnaHQpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBvdmVyZmxvd2luZyBsaW5lcwogICAgICAgICAgICAgICAgICAgICAgICBsaW5lcy5zcGxpY2UoTWF0aC5mbG9vcihoZWlnaHQgLyBsaCkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAob3B0LnN2Z0RvY3VtZW50KSB7CgogICAgICAgICAgICAgICAgLy8gc3ZnIGRvY3VtZW50IHdhcyBwcm92aWRlZCwgcmVtb3ZlIHRoZSB0ZXh0IGVsZW1lbnQgb25seQogICAgICAgICAgICAgICAgc3ZnRG9jdW1lbnQucmVtb3ZlQ2hpbGQodGV4dEVsZW1lbnQpOwoKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAvLyBjbGVhbiBzdmcgZG9jdW1lbnQKICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc3ZnRG9jdW1lbnQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gbGluZXMuam9pbignXG4nKTsKICAgICAgICB9LAoKCWltYWdlVG9EYXRhVXJpOiBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7CgoJICAgIGlmICh1cmwuc3Vic3RyKDAsICdkYXRhOicubGVuZ3RoKSA9PT0gJ2RhdGE6JykgewoJCS8vIE5vIG5lZWQgdG8gY29udmVydCB0byBkYXRhIHVyaSBpZiBpdCBpcyBhbHJlYWR5IGluIGRhdGEgdXJpLgoKCQkvLyBUaGlzIG5vdCBvbmx5IGNvbnZlbmllbnQgYnV0IGRlc2lyZWQuIEZvciBleGFtcGxlLCAKCQkvLyBJRSB0aHJvd3MgYSBzZWN1cml0eSBlcnJvciBpZiBkYXRhOmltYWdlL3N2Zyt4bWwgaXMgdXNlZCB0byByZW5kZXIKCQkvLyBhbiBpbWFnZSB0byB0aGUgY2FudmFzIGFuZCBhbiBhdHRlbXB0IGlzIG1hZGUgdG8gcmVhZCBvdXQgZGF0YSB1cmkuCgkJLy8gTm93IGlmIG91ciBpbWFnZSBpcyBhbHJlYWR5IGluIGRhdGEgdXJpLCB0aGVyZSBpcyBubyBuZWVkIHRvIHJlbmRlciBpdCB0byB0aGUgY2FudmFzCgkJLy8gYW5kIHNvIHdlIGNhbiBieXBhc3MgdGhpcyBlcnJvci4KCgkJLy8gS2VlcCB0aGUgYXN5bmMgbmF0dXJlIG9mIHRoZSBmdW5jdGlvbi4KCQlyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2sobnVsbCwgdXJsKSB9LCAwKTsKCSAgICB9CgoJICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTsKICAgICAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpOwoKCSAgICBpbWcub25sb2FkID0gZnVuY3Rpb24oKSB7CgoJCXZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKCgkJY2FudmFzLndpZHRoID0gaW1nLndpZHRoOwoJCWNhbnZhcy5oZWlnaHQgPSBpbWcuaGVpZ2h0OwoKCQljdHguZHJhd0ltYWdlKGltZywgMCwgMCk7CgkJCgkJdHJ5IHsKCgkJICAgIC8vIEd1ZXNzIHRoZSB0eXBlIG9mIHRoZSBpbWFnZSBmcm9tIHRoZSB1cmwgc3VmZml4LgoJCSAgICB2YXIgc3VmZml4ID0gKHVybC5zcGxpdCgnLicpLnBvcCgpKSB8fCAncG5nJzsKCQkgICAgLy8gQSBsaXR0bGUgY29ycmVjdGlvbiBmb3IgSlBFR3MuIFRoZXJlIGlzIG5vIGltYWdlL2pwZyBtaW1lIHR5cGUgYnV0IGltYWdlL2pwZWcuCgkJICAgIHZhciB0eXBlID0gJ2ltYWdlLycgKyAoc3VmZml4ID09PSAnanBnJykgPyAnanBlZycgOiBzdWZmaXg7CgkJICAgIHZhciBkYXRhVXJpID0gY2FudmFzLnRvRGF0YVVSTCh0eXBlKTsKCgkJfSBjYXRjaCAoZSkgewoKCQkgICAgaWYgKC9cLnN2ZyQvLnRlc3QodXJsKSkgewoJCQkvLyBJRSB0aHJvd3MgYSBzZWN1cml0eSBlcnJvciBpZiB3ZSB0cnkgdG8gcmVuZGVyIGFuIFNWRyBpbnRvIHRoZSBjYW52YXMuCgkJCS8vIEx1Y2tpbHkgZm9yIHVzLCB3ZSBkb24ndCBuZWVkIGNhbnZhcyBhdCBhbGwgdG8gY29udmVydAoJCQkvLyBTVkcgdG8gZGF0YSB1cmkuIFdlIGNhbiBqdXN0IHVzZSBBSkFYIHRvIGxvYWQgdGhlIFNWRyBzdHJpbmcKCQkJLy8gYW5kIGNvbnN0cnVjdCB0aGUgZGF0YSB1cmkgb3Vyc2VsdmVzLgoJCQl2YXIgeGhyID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0ID8gbmV3IFhNTEh0dHBSZXF1ZXN0IDogbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJyk7CgkJCXhoci5vcGVuKCdHRVQnLCB1cmwsIGZhbHNlKTsKCQkJeGhyLnNlbmQobnVsbCk7CgkJCXZhciBzdmcgPSB4aHIucmVzcG9uc2VUZXh0OwoKCQkJcmV0dXJuIGNhbGxiYWNrKG51bGwsICdkYXRhOmltYWdlL3N2Zyt4bWwsJyArIGVuY29kZVVSSUNvbXBvbmVudChzdmcpKTsKCQkgICAgfQoKCQkgICAgY29uc29sZS5lcnJvcihpbWcuc3JjLCAnZmFpbHMgdG8gY29udmVydCcsIGUpOwoJCX0KCgkJY2FsbGJhY2sobnVsbCwgZGF0YVVyaSk7CgkgICAgfTsKCgkgICAgaW1nLm9ub25lcnJvciA9IGZ1bmN0aW9uKCkgewoKCQljYWxsYmFjayhuZXcgRXJyb3IoJ0ZhaWxlZCB0byBsb2FkIGltYWdlLicpKTsKCSAgICB9OwoKCSAgICBpbWcuc3JjID0gdXJsOwoJfSwKCgl0aW1pbmc6IHsKCgkgICAgbGluZWFyOiBmdW5jdGlvbih0KSB7CgkJcmV0dXJuIHQ7CgkgICAgfSwKCgkgICAgcXVhZDogZnVuY3Rpb24odCkgewoJCXJldHVybiB0ICogdDsKCSAgICB9LAoKCSAgICBjdWJpYzogZnVuY3Rpb24odCkgewoJCXJldHVybiB0ICogdCAqIHQ7CgkgICAgfSwKCgkgICAgaW5vdXQ6IGZ1bmN0aW9uKHQpIHsKCQlpZiAodCA8PSAwKSByZXR1cm4gMDsKCQlpZiAodCA+PSAxKSByZXR1cm4gMTsKCQl2YXIgdDIgPSB0ICogdCwgdDMgPSB0MiAqIHQ7CgkJcmV0dXJuIDQgKiAodCA8IC41ID8gdDMgOiAzICogKHQgLSB0MikgKyB0MyAtIC43NSk7CgkgICAgfSwKCgkgICAgZXhwb25lbnRpYWw6IGZ1bmN0aW9uKHQpIHsKCQlyZXR1cm4gTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKTsKCSAgICB9LAoKCSAgICBib3VuY2U6IGZ1bmN0aW9uKHQpIHsKCQlmb3IodmFyIGEgPSAwLCBiID0gMTsgMTsgYSArPSBiLCBiIC89IDIpIHsKCQkgICAgaWYgKHQgPj0gKDcgLSA0ICogYSkgLyAxMSkgewoJCQl2YXIgcSA9ICgxMSAtIDYgKiBhIC0gMTEgKiB0KSAvIDQ7CgkJCXJldHVybiAtcSAqIHEgKyBiICogYjsKCQkgICAgfQoJCX0KCSAgICB9LAoKCSAgICByZXZlcnNlOiBmdW5jdGlvbihmKSB7CgkJcmV0dXJuIGZ1bmN0aW9uKHQpIHsKCQkgICAgcmV0dXJuIDEgLSBmKDEgLSB0KQoJCX0KCSAgICB9LAoKCSAgICByZWZsZWN0OiBmdW5jdGlvbihmKSB7CgkJcmV0dXJuIGZ1bmN0aW9uKHQpIHsKCQkgICAgcmV0dXJuIC41ICogKHQgPCAuNSA/IGYoMiAqIHQpIDogKDIgLSBmKDIgLSAyICogdCkpKTsKCQl9OwoJICAgIH0sCgoJICAgIGNsYW1wOiBmdW5jdGlvbihmLG4seCkgewoJCW4gPSBuIHx8IDA7CgkJeCA9IHggfHwgMTsKCQlyZXR1cm4gZnVuY3Rpb24odCkgewoJCSAgICB2YXIgciA9IGYodCk7CgkJICAgIHJldHVybiByIDwgbiA/IG4gOiByID4geCA/IHggOiByOwoJCX0KCSAgICB9LAoKCSAgICBiYWNrOiBmdW5jdGlvbihzKSB7CgkJaWYgKCFzKSBzID0gMS43MDE1ODsKCQlyZXR1cm4gZnVuY3Rpb24odCkgewoJCSAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTsKCQl9OwoJICAgIH0sCgoJICAgIGVsYXN0aWM6IGZ1bmN0aW9uKHgpIHsKCQlpZiAoIXgpIHggPSAxLjU7CgkJcmV0dXJuIGZ1bmN0aW9uKHQpIHsKCQkgICAgcmV0dXJuIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSkgKiBNYXRoLmNvcygyMCpNYXRoLlBJKngvMyp0KTsKCQl9CgkgICAgfQoKCX0sCgoJaW50ZXJwb2xhdGU6IHsKCgkgICAgbnVtYmVyOiBmdW5jdGlvbihhLCBiKSB7CgkJdmFyIGQgPSBiIC0gYTsKCQlyZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gYSArIGQgKiB0OyB9OwoJICAgIH0sCgoJICAgIG9iamVjdDogZnVuY3Rpb24oYSwgYikgewoJCXZhciBzID0gXy5rZXlzKGEpOwoJCXJldHVybiBmdW5jdGlvbih0KSB7CgkJICAgIHZhciBpLCBwLCByID0ge307CgkJICAgIGZvciAoaSA9IHMubGVuZ3RoIC0gMTsgaSAhPSAtMTsgaS0tKSB7CgkJCXAgPSBzW2ldOwoJCQlyW3BdID0gYVtwXSArIChiW3BdIC0gYVtwXSkgKiB0OwoJCSAgICB9CgkJICAgIHJldHVybiAgcjsKCQl9CgkgICAgfSwKCgkgICAgaGV4Q29sb3I6IGZ1bmN0aW9uKGEsIGIpIHsKCgkJdmFyIGNhID0gcGFyc2VJbnQoYS5zbGljZSgxKSwgMTYpLCBjYiA9IHBhcnNlSW50KGIuc2xpY2UoMSksIDE2KTsKCgkJdmFyIHJhID0gY2EgJiAweDAwMDBmZiwgcmQgPSAoY2IgJiAweDAwMDBmZikgLSByYTsKCQl2YXIgZ2EgPSBjYSAmIDB4MDBmZjAwLCBnZCA9IChjYiAmIDB4MDBmZjAwKSAtIGdhOwoJCXZhciBiYSA9IGNhICYgMHhmZjAwMDAsIGJkID0gKGNiICYgMHhmZjAwMDApIC0gYmE7CgoJCXJldHVybiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSAocmEgKyByZCAqIHQpICYgMHgwMDAwMDBmZjsKICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IChnYSArIGdkICogdCkgJiAweDAwMDBmZjAwOwogICAgICAgICAgICAgICAgICAgIHZhciBiID0gKGJhICsgYmQgKiB0KSAmIDB4MDBmZjAwMDA7CgkJICAgIHJldHVybiAnIycgKyAoMSA8PCAyNCB8IHIgfCBnIHwgYiApLnRvU3RyaW5nKDE2KS5zbGljZSgxKTsKCQl9OwoJICAgIH0sCgoJICAgIHVuaXQ6IGZ1bmN0aW9uKGEsIGIpIHsKCgkJdmFyIHIgPSAvKC0/WzAtOV0qLlswLTldKikocHh8ZW18Y218bW18aW58cHR8cGN8JSkvOwoKCQl2YXIgbWEgPSByLmV4ZWMoYSksIG1iID0gci5leGVjKGIpOwoJCXZhciBwID0gbWJbMV0uaW5kZXhPZignLicpLCBmID0gcCA+IDAgPyBtYlsxXS5sZW5ndGggLSBwIC0gMSA6IDA7CgkJdmFyIGEgPSArbWFbMV0sIGQgPSArbWJbMV0gLSBhLCB1ID0gbWFbMl07CgoJCXJldHVybiBmdW5jdGlvbih0KSB7CgkJICAgIHJldHVybiAoYSArIGQgKiB0KS50b0ZpeGVkKGYpICsgdTsKCQl9CgkgICAgfQoJfSwKCiAgICAgICAgLy8gU1ZHIGZpbHRlcnMuCiAgICAgICAgZmlsdGVyOiB7CgogICAgICAgICAgICAvLyBgeGAgLi4uIGhvcml6b250YWwgYmx1cgogICAgICAgICAgICAvLyBgeWAgLi4uIHZlcnRpY2FsIGJsdXIgKG9wdGlvbmFsKQogICAgICAgICAgICBibHVyOiBmdW5jdGlvbihhcmdzKSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciB4ID0gXy5pc0Zpbml0ZShhcmdzLngpID8gYXJncy54IDogMjsKCiAgICAgICAgICAgICAgICByZXR1cm4gXy50ZW1wbGF0ZSgnPGZpbHRlcj48ZmVHYXVzc2lhbkJsdXIgc3RkRGV2aWF0aW9uPSIke3N0ZERldmlhdGlvbn0iLz48L2ZpbHRlcj4nLCB7CiAgICAgICAgICAgICAgICAgICAgc3RkRGV2aWF0aW9uOiBfLmlzRmluaXRlKGFyZ3MueSkgPyBbeCwgYXJncy55XSA6IHgKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gYGR4YCAuLi4gaG9yaXpvbnRhbCBzaGlmdAogICAgICAgICAgICAvLyBgZHlgIC4uLiB2ZXJ0aWNhbCBzaGlmdAogICAgICAgICAgICAvLyBgYmx1cmAgLi4uIGJsdXIKICAgICAgICAgICAgLy8gYGNvbG9yYCAuLi4gY29sb3IKICAgICAgICAgICAgLy8gYG9wYWNpdHlgIC4uLiBvcGFjaXR5CiAgICAgICAgICAgIGRyb3BTaGFkb3c6IGZ1bmN0aW9uKGFyZ3MpIHsKCiAgICAgICAgICAgICAgICB2YXIgdHBsID0gJ1NWR0ZFRHJvcFNoYWRvd0VsZW1lbnQnIGluIHdpbmRvdwogICAgICAgICAgICAgICAgICAgID8gJzxmaWx0ZXI+PGZlRHJvcFNoYWRvdyBzdGREZXZpYXRpb249IiR7Ymx1cn0iIGR4PSIke2R4fSIgZHk9IiR7ZHl9IiBmbG9vZC1jb2xvcj0iJHtjb2xvcn0iIGZsb29kLW9wYWNpdHk9IiR7b3BhY2l0eX0iLz48L2ZpbHRlcj4nCiAgICAgICAgICAgICAgICAgICAgOiAnPGZpbHRlcj48ZmVHYXVzc2lhbkJsdXIgaW49IlNvdXJjZUFscGhhIiBzdGREZXZpYXRpb249IiR7Ymx1cn0iLz48ZmVPZmZzZXQgZHg9IiR7ZHh9IiBkeT0iJHtkeX0iIHJlc3VsdD0ib2Zmc2V0Ymx1ciIvPjxmZUZsb29kIGZsb29kLWNvbG9yPSIke2NvbG9yfSIvPjxmZUNvbXBvc2l0ZSBpbjI9Im9mZnNldGJsdXIiIG9wZXJhdG9yPSJpbiIvPjxmZUNvbXBvbmVudFRyYW5zZmVyPjxmZUZ1bmNBIHR5cGU9ImxpbmVhciIgc2xvcGU9IiR7b3BhY2l0eX0iLz48L2ZlQ29tcG9uZW50VHJhbnNmZXI+PGZlTWVyZ2U+PGZlTWVyZ2VOb2RlLz48ZmVNZXJnZU5vZGUgaW49IlNvdXJjZUdyYXBoaWMiLz48L2ZlTWVyZ2U+PC9maWx0ZXI+JzsKCiAgICAgICAgICAgICAgICByZXR1cm4gXy50ZW1wbGF0ZSh0cGwsIHsKICAgICAgICAgICAgICAgICAgICBkeDogYXJncy5keCB8fCAwLAogICAgICAgICAgICAgICAgICAgIGR5OiBhcmdzLmR5IHx8IDAsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogXy5pc0Zpbml0ZShhcmdzLm9wYWNpdHkpID8gYXJncy5vcGFjaXR5IDogMSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogYXJncy5jb2xvciB8fCAnYmxhY2snLAogICAgICAgICAgICAgICAgICAgIGJsdXI6IF8uaXNGaW5pdGUoYXJncy5ibHVyKSA/IGFyZ3MuYmx1ciA6IDQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gYGFtb3VudGAgLi4uIHRoZSBwcm9wb3J0aW9uIG9mIHRoZSBjb252ZXJzaW9uLiBBIHZhbHVlIG9mIDEgaXMgY29tcGxldGVseSBncmF5c2NhbGUuIEEgdmFsdWUgb2YgMCBsZWF2ZXMgdGhlIGlucHV0IHVuY2hhbmdlZC4KICAgICAgICAgICAgZ3JheXNjYWxlOiBmdW5jdGlvbihhcmdzKSB7CgogICAgICAgICAgICAgICAgdmFyIGFtb3VudCA9IF8uaXNGaW5pdGUoYXJncy5hbW91bnQpID8gYXJncy5hbW91bnQgOiAxOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICByZXR1cm4gXy50ZW1wbGF0ZSgnPGZpbHRlcj48ZmVDb2xvck1hdHJpeCB0eXBlPSJtYXRyaXgiIHZhbHVlcz0iJHthfSAke2J9ICR7Y30gMCAwICR7ZH0gJHtlfSAke2Z9IDAgMCAke2d9ICR7Yn0gJHtofSAwIDAgMCAwIDAgMSAwIi8+PC9maWx0ZXI+JywgewogICAgICAgICAgICAgICAgICAgIGE6IDAuMjEyNiArIDAuNzg3NCAqICgxIC0gYW1vdW50KSwKICAgICAgICAgICAgICAgICAgICBiOiAwLjcxNTIgLSAwLjcxNTIgKiAoMSAtIGFtb3VudCksCiAgICAgICAgICAgICAgICAgICAgYzogMC4wNzIyIC0gMC4wNzIyICogKDEgLSBhbW91bnQpLAogICAgICAgICAgICAgICAgICAgIGQ6IDAuMjEyNiAtIDAuMjEyNiAqICgxIC0gYW1vdW50KSwKICAgICAgICAgICAgICAgICAgICBlOiAwLjcxNTIgKyAwLjI4NDggKiAoMSAtIGFtb3VudCksCiAgICAgICAgICAgICAgICAgICAgZjogMC4wNzIyIC0gMC4wNzIyICogKDEgLSBhbW91bnQpLAogICAgICAgICAgICAgICAgICAgIGc6IDAuMjEyNiAtIDAuMjEyNiAqICgxIC0gYW1vdW50KSwKICAgICAgICAgICAgICAgICAgICBoOiAwLjA3MjIgKyAwLjkyNzggKiAoMSAtIGFtb3VudCkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gYGFtb3VudGAgLi4uIHRoZSBwcm9wb3J0aW9uIG9mIHRoZSBjb252ZXJzaW9uLiBBIHZhbHVlIG9mIDEgaXMgY29tcGxldGVseSBzZXBpYS4gQSB2YWx1ZSBvZiAwIGxlYXZlcyB0aGUgaW5wdXQgdW5jaGFuZ2VkLgogICAgICAgICAgICBzZXBpYTogZnVuY3Rpb24oYXJncykgewoKICAgICAgICAgICAgICAgIHZhciBhbW91bnQgPSBfLmlzRmluaXRlKGFyZ3MuYW1vdW50KSA/IGFyZ3MuYW1vdW50IDogMTsKCiAgICAgICAgICAgICAgICByZXR1cm4gXy50ZW1wbGF0ZSgnPGZpbHRlcj48ZmVDb2xvck1hdHJpeCB0eXBlPSJtYXRyaXgiIHZhbHVlcz0iJHthfSAke2J9ICR7Y30gMCAwICR7ZH0gJHtlfSAke2Z9IDAgMCAke2d9ICR7aH0gJHtpfSAwIDAgMCAwIDAgMSAwIi8+PC9maWx0ZXI+JywgewogICAgICAgICAgICAgICAgICAgIGE6IDAuMzkzICsgMC42MDcgKiAoMSAtIGFtb3VudCksCiAgICAgICAgICAgICAgICAgICAgYjogMC43NjkgLSAwLjc2OSAqICgxIC0gYW1vdW50KSwKICAgICAgICAgICAgICAgICAgICBjOiAwLjE4OSAtIDAuMTg5ICogKDEgLSBhbW91bnQpLAogICAgICAgICAgICAgICAgICAgIGQ6IDAuMzQ5IC0gMC4zNDkgKiAoMSAtIGFtb3VudCksCiAgICAgICAgICAgICAgICAgICAgZTogMC42ODYgKyAwLjMxNCAqICgxIC0gYW1vdW50KSwKICAgICAgICAgICAgICAgICAgICBmOiAwLjE2OCAtIDAuMTY4ICogKDEgLSBhbW91bnQpLAogICAgICAgICAgICAgICAgICAgIGc6IDAuMjcyIC0gMC4yNzIgKiAoMSAtIGFtb3VudCksCiAgICAgICAgICAgICAgICAgICAgaDogMC41MzQgLSAwLjUzNCAqICgxIC0gYW1vdW50KSwKICAgICAgICAgICAgICAgICAgICBpOiAwLjEzMSArIDAuODY5ICogKDEgLSBhbW91bnQpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIGBhbW91bnRgIC4uLiB0aGUgcHJvcG9ydGlvbiBvZiB0aGUgY29udmVyc2lvbi4gQSB2YWx1ZSBvZiAwIGlzIGNvbXBsZXRlbHkgdW4tc2F0dXJhdGVkLiBBIHZhbHVlIG9mIDEgbGVhdmVzIHRoZSBpbnB1dCB1bmNoYW5nZWQuCiAgICAgICAgICAgIHNhdHVyYXRlOiBmdW5jdGlvbihhcmdzKSB7CgogICAgICAgICAgICAgICAgdmFyIGFtb3VudCA9IF8uaXNGaW5pdGUoYXJncy5hbW91bnQpID8gYXJncy5hbW91bnQgOiAxOwoKICAgICAgICAgICAgICAgIHJldHVybiBfLnRlbXBsYXRlKCc8ZmlsdGVyPjxmZUNvbG9yTWF0cml4IHR5cGU9InNhdHVyYXRlIiB2YWx1ZXM9IiR7YW1vdW50fSIvPjwvZmlsdGVyPicsIHsKICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IDEgLSBhbW91bnQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gYGFuZ2xlYCAuLi4gIHRoZSBudW1iZXIgb2YgZGVncmVlcyBhcm91bmQgdGhlIGNvbG9yIGNpcmNsZSB0aGUgaW5wdXQgc2FtcGxlcyB3aWxsIGJlIGFkanVzdGVkLgogICAgICAgICAgICBodWVSb3RhdGU6IGZ1bmN0aW9uKGFyZ3MpIHsKCiAgICAgICAgICAgICAgICByZXR1cm4gXy50ZW1wbGF0ZSgnPGZpbHRlcj48ZmVDb2xvck1hdHJpeCB0eXBlPSJodWVSb3RhdGUiIHZhbHVlcz0iJHthbmdsZX0iLz48L2ZpbHRlcj4nLCB7CiAgICAgICAgICAgICAgICAgICAgYW5nbGU6IGFyZ3MuYW5nbGUgfHwgMAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvLyBgYW1vdW50YCAuLi4gdGhlIHByb3BvcnRpb24gb2YgdGhlIGNvbnZlcnNpb24uIEEgdmFsdWUgb2YgMSBpcyBjb21wbGV0ZWx5IGludmVydGVkLiBBIHZhbHVlIG9mIDAgbGVhdmVzIHRoZSBpbnB1dCB1bmNoYW5nZWQuCiAgICAgICAgICAgIGludmVydDogZnVuY3Rpb24oYXJncykgewoKICAgICAgICAgICAgICAgIHZhciBhbW91bnQgPSBfLmlzRmluaXRlKGFyZ3MuYW1vdW50KSA/IGFyZ3MuYW1vdW50IDogMTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIF8udGVtcGxhdGUoJzxmaWx0ZXI+PGZlQ29tcG9uZW50VHJhbnNmZXI+PGZlRnVuY1IgdHlwZT0idGFibGUiIHRhYmxlVmFsdWVzPSIke2Ftb3VudH0gJHthbW91bnQyfSIvPjxmZUZ1bmNHIHR5cGU9InRhYmxlIiB0YWJsZVZhbHVlcz0iJHthbW91bnR9ICR7YW1vdW50Mn0iLz48ZmVGdW5jQiB0eXBlPSJ0YWJsZSIgdGFibGVWYWx1ZXM9IiR7YW1vdW50fSAke2Ftb3VudDJ9Ii8+PC9mZUNvbXBvbmVudFRyYW5zZmVyPjwvZmlsdGVyPicsIHsKICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKICAgICAgICAgICAgICAgICAgICBhbW91bnQyOiAxIC0gYW1vdW50CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIGBhbW91bnRgIC4uLiBwcm9wb3J0aW9uIG9mIHRoZSBjb252ZXJzaW9uLiBBIHZhbHVlIG9mIDAgd2lsbCBjcmVhdGUgYW4gaW1hZ2UgdGhhdCBpcyBjb21wbGV0ZWx5IGJsYWNrLiBBIHZhbHVlIG9mIDEgbGVhdmVzIHRoZSBpbnB1dCB1bmNoYW5nZWQuCiAgICAgICAgICAgIGJyaWdodG5lc3M6IGZ1bmN0aW9uKGFyZ3MpIHsKCiAgICAgICAgICAgICAgICByZXR1cm4gXy50ZW1wbGF0ZSgnPGZpbHRlcj48ZmVDb21wb25lbnRUcmFuc2Zlcj48ZmVGdW5jUiB0eXBlPSJsaW5lYXIiIHNsb3BlPSIke2Ftb3VudH0iLz48ZmVGdW5jRyB0eXBlPSJsaW5lYXIiIHNsb3BlPSIke2Ftb3VudH0iLz48ZmVGdW5jQiB0eXBlPSJsaW5lYXIiIHNsb3BlPSIke2Ftb3VudH0iLz48L2ZlQ29tcG9uZW50VHJhbnNmZXI+PC9maWx0ZXI+JywgewogICAgICAgICAgICAgICAgICAgIGFtb3VudDogXy5pc0Zpbml0ZShhcmdzLmFtb3VudCkgPyBhcmdzLmFtb3VudCA6IDEKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gYGFtb3VudGAgLi4uIHByb3BvcnRpb24gb2YgdGhlIGNvbnZlcnNpb24uIEEgdmFsdWUgb2YgMCB3aWxsIGNyZWF0ZSBhbiBpbWFnZSB0aGF0IGlzIGNvbXBsZXRlbHkgYmxhY2suIEEgdmFsdWUgb2YgMSBsZWF2ZXMgdGhlIGlucHV0IHVuY2hhbmdlZC4KICAgICAgICAgICAgY29udHJhc3Q6IGZ1bmN0aW9uKGFyZ3MpIHsKCiAgICAgICAgICAgICAgICB2YXIgYW1vdW50ID0gXy5pc0Zpbml0ZShhcmdzLmFtb3VudCkgPyBhcmdzLmFtb3VudCA6IDE7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiBfLnRlbXBsYXRlKCc8ZmlsdGVyPjxmZUNvbXBvbmVudFRyYW5zZmVyPjxmZUZ1bmNSIHR5cGU9ImxpbmVhciIgc2xvcGU9IiR7YW1vdW50fSIgaW50ZXJjZXB0PSIke2Ftb3VudDJ9Ii8+PGZlRnVuY0cgdHlwZT0ibGluZWFyIiBzbG9wZT0iJHthbW91bnR9IiBpbnRlcmNlcHQ9IiR7YW1vdW50Mn0iLz48ZmVGdW5jQiB0eXBlPSJsaW5lYXIiIHNsb3BlPSIke2Ftb3VudH0iIGludGVyY2VwdD0iJHthbW91bnQyfSIvPjwvZmVDb21wb25lbnRUcmFuc2Zlcj48L2ZpbHRlcj4nLCB7CiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCiAgICAgICAgICAgICAgICAgICAgYW1vdW50MjogLjUgLSBhbW91bnQgLyAyCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGZvcm1hdDogewoKICAgICAgICAgICAgLy8gRm9ybWF0dGluZyBudW1iZXJzIHZpYSB0aGUgUHl0aG9uIEZvcm1hdCBTcGVjaWZpY2F0aW9uIE1pbmktbGFuZ3VhZ2UuCiAgICAgICAgICAgIC8vIFNlZSBodHRwOi8vZG9jcy5weXRob24ub3JnL3JlbGVhc2UvMy4xLjMvbGlicmFyeS9zdHJpbmcuaHRtbCNmb3JtYXQtc3BlY2lmaWNhdGlvbi1taW5pLWxhbmd1YWdlLgogICAgICAgICAgICAvLyBIZWF2aWxseSBpbnNwaXJlZCBieSB0aGUgRDMuanMgbGlicmFyeSBpbXBsZW1lbnRhdGlvbi4KICAgICAgICAgICAgbnVtYmVyOiBmdW5jdGlvbihzcGVjaWZpZXIsIHZhbHVlLCBsb2NhbGUpIHsKCiAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2NhbGUgfHwgewoKICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeTogWyckJywgJyddLAogICAgICAgICAgICAgICAgICAgIGRlY2ltYWw6ICcuJywKICAgICAgICAgICAgICAgICAgICB0aG91c2FuZHM6ICcsJywKICAgICAgICAgICAgICAgICAgICBncm91cGluZzogWzNdCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBTZWUgUHl0aG9uIGZvcm1hdCBzcGVjaWZpY2F0aW9uIG1pbmktbGFuZ3VhZ2U6IGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvcmVsZWFzZS8zLjEuMy9saWJyYXJ5L3N0cmluZy5odG1sI2Zvcm1hdC1zcGVjaWZpY2F0aW9uLW1pbmktbGFuZ3VhZ2UuCiAgICAgICAgICAgICAgICAvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW3R5cGVdCiAgICAgICAgICAgICAgICB2YXIgcmUgPSAvKD86KFtee10pPyhbPD49Xl0pKT8oWytcLSBdKT8oWyQjXSk/KDApPyhcZCspPygsKT8oXC4tP1xkKyk/KFthLXolXSk/L2k7CgogICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpOwogICAgICAgICAgICAgICAgdmFyIGZpbGwgPSBtYXRjaFsxXSB8fCAnICc7CiAgICAgICAgICAgICAgICB2YXIgYWxpZ24gPSBtYXRjaFsyXSB8fCAnPic7CiAgICAgICAgICAgICAgICB2YXIgc2lnbiA9IG1hdGNoWzNdIHx8ICcnOwogICAgICAgICAgICAgICAgdmFyIHN5bWJvbCA9IG1hdGNoWzRdIHx8ICcnOwogICAgICAgICAgICAgICAgdmFyIHpmaWxsID0gbWF0Y2hbNV07CiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSArbWF0Y2hbNl07CiAgICAgICAgICAgICAgICB2YXIgY29tbWEgPSBtYXRjaFs3XTsKICAgICAgICAgICAgICAgIHZhciBwcmVjaXNpb24gPSBtYXRjaFs4XTsKICAgICAgICAgICAgICAgIHZhciB0eXBlID0gbWF0Y2hbOV07CiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAxOwogICAgICAgICAgICAgICAgdmFyIHByZWZpeCA9ICcnOwogICAgICAgICAgICAgICAgdmFyIHN1ZmZpeCA9ICcnOwogICAgICAgICAgICAgICAgdmFyIGludGVnZXIgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICBpZiAocHJlY2lzaW9uKSBwcmVjaXNpb24gPSArcHJlY2lzaW9uLnN1YnN0cmluZygxKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKHpmaWxsIHx8IGZpbGwgPT09ICcwJyAmJiBhbGlnbiA9PT0gJz0nKSB7CiAgICAgICAgICAgICAgICAgICAgemZpbGwgPSBmaWxsID0gJzAnOwogICAgICAgICAgICAgICAgICAgIGFsaWduID0gJz0nOwogICAgICAgICAgICAgICAgICAgIGlmIChjb21tYSkgd2lkdGggLT0gTWF0aC5mbG9vcigod2lkdGggLSAxKSAvIDQpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgICAgICAgICBjYXNlICduJzogY29tbWEgPSB0cnVlOyB0eXBlID0gJ2cnOyBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAnJSc6IHNjYWxlID0gMTAwOyBzdWZmaXggPSAnJSc7IHR5cGUgPSAnZic7IGJyZWFrOwogICAgICAgICAgICAgICAgICBjYXNlICdwJzogc2NhbGUgPSAxMDA7IHN1ZmZpeCA9ICclJzsgdHlwZSA9ICdyJzsgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOgogICAgICAgICAgICAgICAgICBjYXNlICdvJzoKICAgICAgICAgICAgICAgICAgY2FzZSAneCc6CiAgICAgICAgICAgICAgICAgIGNhc2UgJ1gnOiBpZiAoc3ltYm9sID09PSAnIycpIHByZWZpeCA9ICcwJyArIHR5cGUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgICAgY2FzZSAnYyc6CiAgICAgICAgICAgICAgICAgIGNhc2UgJ2QnOiBpbnRlZ2VyID0gdHJ1ZTsgcHJlY2lzaW9uID0gMDsgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgJ3MnOiBzY2FsZSA9IC0xOyB0eXBlID0gJ3InOyBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoc3ltYm9sID09PSAnJCcpIHsKICAgICAgICAgICAgICAgICAgICBwcmVmaXggPSBsb2NhbGUuY3VycmVuY3lbMF07CiAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gbG9jYWxlLmN1cnJlbmN5WzFdOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIElmIG5vIHByZWNpc2lvbiBpcyBzcGVjaWZpZWQgZm9yIGAncidgLCBmYWxsYmFjayB0byBnZW5lcmFsIG5vdGF0aW9uLgogICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ3InICYmICFwcmVjaXNpb24pIHR5cGUgPSAnZyc7CgogICAgICAgICAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIHJlcXVlc3RlZCBwcmVjaXNpb24gaXMgaW4gdGhlIHN1cHBvcnRlZCByYW5nZS4KICAgICAgICAgICAgICAgIGlmIChwcmVjaXNpb24gIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICdnJykgcHJlY2lzaW9uID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpOwogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT0gJ2UnIHx8IHR5cGUgPT0gJ2YnKSBwcmVjaXNpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIHpjb21tYSA9IHpmaWxsICYmIGNvbW1hOwoKICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgZW1wdHkgc3RyaW5nIGZvciBmbG9hdHMgZm9ybWF0dGVkIGFzIGludHMuCiAgICAgICAgICAgICAgICBpZiAoaW50ZWdlciAmJiAodmFsdWUgJSAxKSkgcmV0dXJuICcnOwoKICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgbmVnYXRpdmUgdG8gcG9zaXRpdmUsIGFuZCByZWNvcmQgdGhlIHNpZ24gcHJlZml4LgogICAgICAgICAgICAgICAgdmFyIG5lZ2F0aXZlID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAodmFsdWUgPSAtdmFsdWUsICctJykgOiBzaWduOwoKICAgICAgICAgICAgICAgIHZhciBmdWxsU3VmZml4ID0gc3VmZml4OwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBBcHBseSB0aGUgc2NhbGUsIGNvbXB1dGluZyBpdCBmcm9tIHRoZSB2YWx1ZSdzIGV4cG9uZW50IGZvciBzaSBmb3JtYXQuCiAgICAgICAgICAgICAgICAvLyBQcmVzZXJ2ZSB0aGUgZXhpc3Rpbmcgc3VmZml4LCBpZiBhbnksIHN1Y2ggYXMgdGhlIGN1cnJlbmN5IHN5bWJvbC4KICAgICAgICAgICAgICAgIGlmIChzY2FsZSA8IDApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdW5pdCA9IHRoaXMucHJlZml4KHZhbHVlLCBwcmVjaXNpb24pOwogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdW5pdC5zY2FsZSh2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgZnVsbFN1ZmZpeCA9IHVuaXQuc3ltYm9sICsgc3VmZml4OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSAqPSBzY2FsZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRvIHRoZSBkZXNpcmVkIHByZWNpc2lvbi4KICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jb252ZXJ0KHR5cGUsIHZhbHVlLCBwcmVjaXNpb24pOwoKICAgICAgICAgICAgICAgIC8vIEJyZWFrIHRoZSB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIHBhcnQgKGJlZm9yZSkgYW5kIGRlY2ltYWwgcGFydCAoYWZ0ZXIpLgogICAgICAgICAgICAgICAgdmFyIGkgPSB2YWx1ZS5sYXN0SW5kZXhPZignLicpOwogICAgICAgICAgICAgICAgdmFyIGJlZm9yZSA9IGkgPCAwID8gdmFsdWUgOiB2YWx1ZS5zdWJzdHJpbmcoMCwgaSk7CiAgICAgICAgICAgICAgICB2YXIgYWZ0ZXIgPSBpIDwgMCA/ICcnIDogbG9jYWxlLmRlY2ltYWwgKyB2YWx1ZS5zdWJzdHJpbmcoaSArIDEpOwoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdEdyb3VwKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBbXTsKICAgICAgICAgICAgICAgICAgICB2YXIgaiA9IDA7CiAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSBsb2NhbGUuZ3JvdXBpbmdbMF07CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpOwogICAgICAgICAgICAgICAgICAgICAgICBnID0gbG9jYWxlLmdyb3VwaW5nW2ogPSAoaiArIDEpICUgbG9jYWxlLmdyb3VwaW5nLmxlbmd0aF07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKGxvY2FsZS50aG91c2FuZHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IGAnMCdgLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLgogICAgICAgICAgICAgICAgaWYgKCF6ZmlsbCAmJiBjb21tYSAmJiBsb2NhbGUuZ3JvdXBpbmcpIHsKCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlID0gZm9ybWF0R3JvdXAoYmVmb3JlKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gcHJlZml4Lmxlbmd0aCArIGJlZm9yZS5sZW5ndGggKyBhZnRlci5sZW5ndGggKyAoemNvbW1hID8gMCA6IG5lZ2F0aXZlLmxlbmd0aCk7CiAgICAgICAgICAgICAgICB2YXIgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KGxlbmd0aCA9IHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6ICcnOwoKICAgICAgICAgICAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBgJzAnYCwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLgogICAgICAgICAgICAgICAgaWYgKHpjb21tYSkgYmVmb3JlID0gZm9ybWF0R3JvdXAocGFkZGluZyArIGJlZm9yZSk7CgogICAgICAgICAgICAgICAgLy8gQXBwbHkgcHJlZml4LgogICAgICAgICAgICAgICAgbmVnYXRpdmUgKz0gcHJlZml4OwoKICAgICAgICAgICAgICAgIC8vIFJlam9pbiBpbnRlZ2VyIGFuZCBkZWNpbWFsIHBhcnRzLgogICAgICAgICAgICAgICAgdmFsdWUgPSBiZWZvcmUgKyBhZnRlcjsKCiAgICAgICAgICAgICAgICByZXR1cm4gKGFsaWduID09PSAnPCcgPyBuZWdhdGl2ZSArIHZhbHVlICsgcGFkZGluZwogICAgICAgICAgICAgICAgICAgICAgICA6IGFsaWduID09PSAnPicgPyBwYWRkaW5nICsgbmVnYXRpdmUgKyB2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICA6IGFsaWduID09PSAnXicgPyBwYWRkaW5nLnN1YnN0cmluZygwLCBsZW5ndGggPj49IDEpICsgbmVnYXRpdmUgKyB2YWx1ZSArIHBhZGRpbmcuc3Vic3RyaW5nKGxlbmd0aCkKICAgICAgICAgICAgICAgICAgICAgICAgOiBuZWdhdGl2ZSArICh6Y29tbWEgPyB2YWx1ZSA6IHBhZGRpbmcgKyB2YWx1ZSkpICsgZnVsbFN1ZmZpeDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIEZvcm1hdHRpbmcgc3RyaW5nIHZpYSB0aGUgUHl0aG9uIEZvcm1hdCBzdHJpbmcuCiAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvc3RyaW5nLmh0bWwjZm9ybWF0LXN0cmluZy1zeW50YXgpCiAgICAgICAgICAgIHN0cmluZzogZnVuY3Rpb24gKGZvcm1hdFN0cmluZywgdmFsdWUpIHsKICAgICAgICAgICAgICAgIHZhciBmaWVsZERlbGltaXRlckluZGV4OwogICAgICAgICAgICAgICAgdmFyIGZpZWxkRGVsaW1pdGVyID0gJ3snOwogICAgICAgICAgICAgICAgdmFyIGVuZFBsYWNlaG9sZGVyID0gZmFsc2U7CiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkU3RyaW5nQXJyYXkgPSBbXTsKCiAgICAgICAgICAgICAgICB3aGlsZSAoKGZpZWxkRGVsaW1pdGVySW5kZXggPSBmb3JtYXRTdHJpbmcuaW5kZXhPZihmaWVsZERlbGltaXRlcikpICE9PSAtMSkgewoKICAgICAgICAgICAgICAgICAgICB2YXIgcGllY2VGb3JtYXRlZFN0cmluZywgZm9ybWF0U3BlYywgZmllbGROYW1lOwoKICAgICAgICAgICAgICAgICAgICBwaWVjZUZvcm1hdGVkU3RyaW5nID0gZm9ybWF0U3RyaW5nLnNsaWNlKDAsIGZpZWxkRGVsaW1pdGVySW5kZXgpOwoKICAgICAgICAgICAgICAgICAgICBpZiAoZW5kUGxhY2Vob2xkZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0U3BlYyA9IHBpZWNlRm9ybWF0ZWRTdHJpbmcuc3BsaXQoIjoiKTsKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lID0gZm9ybWF0U3BlYy5zaGlmdCgpLnNwbGl0KCIuIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHBpZWNlRm9ybWF0ZWRTdHJpbmcgPSB2YWx1ZTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGROYW1lLmxlbmd0aDsgaSsrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGllY2VGb3JtYXRlZFN0cmluZyA9IHBpZWNlRm9ybWF0ZWRTdHJpbmdbZmllbGROYW1lW2ldXTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRTcGVjLmxlbmd0aCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpZWNlRm9ybWF0ZWRTdHJpbmcgPSB0aGlzLm51bWJlcihmb3JtYXRTcGVjLCBwaWVjZUZvcm1hdGVkU3RyaW5nKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZ0FycmF5LnB1c2gocGllY2VGb3JtYXRlZFN0cmluZyk7CgogICAgICAgICAgICAgICAgICAgIGZvcm1hdFN0cmluZyA9IGZvcm1hdFN0cmluZy5zbGljZShmaWVsZERlbGltaXRlckluZGV4ICsgMSk7CiAgICAgICAgICAgICAgICAgICAgZmllbGREZWxpbWl0ZXIgPSAoZW5kUGxhY2Vob2xkZXIgPSAhZW5kUGxhY2Vob2xkZXIpID8gJ30nIDogJ3snCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmdBcnJheS5wdXNoKGZvcm1hdFN0cmluZyk7CgogICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlZFN0cmluZ0FycmF5LmpvaW4oJycpCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBjb252ZXJ0OiBmdW5jdGlvbiAodHlwZSwgdmFsdWUsIHByZWNpc2lvbikgewoKICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgICAgICAgICBjYXNlICdiJzogcmV0dXJuIHZhbHVlLnRvU3RyaW5nKDIpOwogICAgICAgICAgICAgICAgICBjYXNlICdjJzogcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodmFsdWUpOwogICAgICAgICAgICAgICAgICBjYXNlICdvJzogcmV0dXJuIHZhbHVlLnRvU3RyaW5nKDgpOwogICAgICAgICAgICAgICAgICBjYXNlICd4JzogcmV0dXJuIHZhbHVlLnRvU3RyaW5nKDE2KTsKICAgICAgICAgICAgICAgICAgY2FzZSAnWCc6IHJldHVybiB2YWx1ZS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsKICAgICAgICAgICAgICAgICAgY2FzZSAnZyc6IHJldHVybiB2YWx1ZS50b1ByZWNpc2lvbihwcmVjaXNpb24pOwogICAgICAgICAgICAgICAgICBjYXNlICdlJzogcmV0dXJuIHZhbHVlLnRvRXhwb25lbnRpYWwocHJlY2lzaW9uKTsKICAgICAgICAgICAgICAgICAgY2FzZSAnZic6IHJldHVybiB2YWx1ZS50b0ZpeGVkKHByZWNpc2lvbik7CiAgICAgICAgICAgICAgICAgIGNhc2UgJ3InOiByZXR1cm4gKHZhbHVlID0gdGhpcy5yb3VuZCh2YWx1ZSwgdGhpcy5wcmVjaXNpb24odmFsdWUsIHByZWNpc2lvbikpKS50b0ZpeGVkKE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCB0aGlzLnByZWNpc2lvbih2YWx1ZSAqICgxICsgMWUtMTUpLCBwcmVjaXNpb24pKSkpOwogICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIHZhbHVlICsgJyc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByb3VuZDogZnVuY3Rpb24odmFsdWUsIHByZWNpc2lvbikgewoKICAgICAgICAgICAgICAgIHJldHVybiBwcmVjaXNpb24KICAgICAgICAgICAgICAgICAgICA/IE1hdGgucm91bmQodmFsdWUgKiAocHJlY2lzaW9uID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbikpKSAvIHByZWNpc2lvbgogICAgICAgICAgICAgICAgICAgIDogTWF0aC5yb3VuZCh2YWx1ZSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBwcmVjaXNpb246IGZ1bmN0aW9uKHZhbHVlLCBwcmVjaXNpb24pIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIHByZWNpc2lvbiAtICh2YWx1ZSA/IE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMTApIDogMSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBwcmVmaXg6IGZ1bmN0aW9uKHZhbHVlLCBwcmVjaXNpb24pIHsKCiAgICAgICAgICAgICAgICB2YXIgcHJlZml4ZXMgPSBfLm1hcChbJ3knLCd6JywnYScsJ2YnLCdwJywnbicsJ8K1JywnbScsJycsJ2snLCdNJywnRycsJ1QnLCdQJywnRScsJ1onLCdZJ10sIGZ1bmN0aW9uKGQsIGkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgayA9IE1hdGgucG93KDEwLCBhYnMoOCAtIGkpICogMyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGU6IGkgPiA4ID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZCAvIGs7IH0gOiBmdW5jdGlvbihkKSB7IHJldHVybiBkICogazsgfSwKICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiBkCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7CiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSAqPSAtMTsKICAgICAgICAgICAgICAgICAgICBpZiAocHJlY2lzaW9uKSB2YWx1ZSA9IGQzLnJvdW5kKHZhbHVlLCB0aGlzLnByZWNpc2lvbih2YWx1ZSwgcHJlY2lzaW9uKSk7CiAgICAgICAgICAgICAgICAgICAgaSA9IDEgKyBNYXRoLmZsb29yKDFlLTEyICsgTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjEwKTsKICAgICAgICAgICAgICAgICAgICBpID0gTWF0aC5tYXgoLTI0LCBNYXRoLm1pbigyNCwgTWF0aC5mbG9vcigoaSA8PSAwID8gaSArIDEgOiBpIC0gMSkgLyAzKSAqIDMpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBwcmVmaXhlc1s4ICsgaSAvIDNdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9OwoKaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykgewoKICAgIG1vZHVsZS5leHBvcnRzID0gam9pbnQ7Cn0KCi8vICAgICAgSm9pbnRKUywgdGhlIEphdmFTY3JpcHQgZGlhZ3JhbW1pbmcgbGlicmFyeS4KLy8gICAgICAoYykgMjAxMS0yMDEzIGNsaWVudCBJTwoKCmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHsKCiAgICB2YXIgam9pbnQgPSB7CiAgICAgICAgZGlhOiB7CiAgICAgICAgICAgIExpbms6IHJlcXVpcmUoJy4vam9pbnQuZGlhLmxpbmsnKS5MaW5rLAogICAgICAgICAgICBFbGVtZW50OiByZXF1aXJlKCcuL2pvaW50LmRpYS5lbGVtZW50JykuRWxlbWVudAogICAgICAgIH0sCiAgICAgICAgc2hhcGVzOiByZXF1aXJlKCcuLi9wbHVnaW5zL3NoYXBlcycpCiAgICB9OwogICAgdmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKTsKICAgIHZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7CiAgICB2YXIgZyA9IHJlcXVpcmUoJy4vZ2VvbWV0cnknKTsKfQoKCgpqb2ludC5kaWEuR3JhcGhDZWxscyA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKHsKCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHsKICAgICAgICAKICAgICAgICAvLyBCYWNrYm9uZSBhdXRvbWF0aWNhbGx5IGRvZXNuJ3QgdHJpZ2dlciByZS1zb3J0IGlmIG1vZGVscyBhdHRyaWJ1dGVzIGFyZSBjaGFuZ2VkIGxhdGVyIHdoZW4KICAgICAgICAvLyB0aGV5J3JlIGFscmVhZHkgaW4gdGhlIGNvbGxlY3Rpb24uIFRoZXJlZm9yZSwgd2UncmUgdHJpZ2dlcmluZyBzb3J0IG1hbnVhbGx5IGhlcmUuCiAgICAgICAgdGhpcy5vbignY2hhbmdlOnonLCB0aGlzLnNvcnQsIHRoaXMpOwogICAgfSwKCiAgICBtb2RlbDogZnVuY3Rpb24oYXR0cnMsIG9wdGlvbnMpIHsKCiAgICAgICAgaWYgKGF0dHJzLnR5cGUgPT09ICdsaW5rJykgewoKICAgICAgICAgICAgcmV0dXJuIG5ldyBqb2ludC5kaWEuTGluayhhdHRycywgb3B0aW9ucyk7CiAgICAgICAgfQoKICAgICAgICB2YXIgbW9kdWxlID0gYXR0cnMudHlwZS5zcGxpdCgnLicpWzBdOwogICAgICAgIHZhciBlbnRpdHkgPSBhdHRycy50eXBlLnNwbGl0KCcuJylbMV07CgogICAgICAgIGlmIChqb2ludC5zaGFwZXNbbW9kdWxlXSAmJiBqb2ludC5zaGFwZXNbbW9kdWxlXVtlbnRpdHldKSB7CgogICAgICAgICAgICByZXR1cm4gbmV3IGpvaW50LnNoYXBlc1ttb2R1bGVdW2VudGl0eV0oYXR0cnMsIG9wdGlvbnMpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gbmV3IGpvaW50LmRpYS5FbGVtZW50KGF0dHJzLCBvcHRpb25zKTsKICAgIH0sCgogICAgLy8gYGNvbXBhcmF0b3JgIG1ha2VzIGl0IGVhc3kgdG8gc29ydCBjZWxscyBiYXNlZCBvbiB0aGVpciBgemAgaW5kZXguCiAgICBjb21wYXJhdG9yOiBmdW5jdGlvbihtb2RlbCkgewoKICAgICAgICByZXR1cm4gbW9kZWwuZ2V0KCd6JykgfHwgMDsKICAgIH0sCgogICAgLy8gR2V0IGFsbCBpbmJvdW5kIGFuZCBvdXRib3VuZCBsaW5rcyBjb25uZWN0ZWQgdG8gdGhlIGNlbGwgYG1vZGVsYC4KICAgIGdldENvbm5lY3RlZExpbmtzOiBmdW5jdGlvbihtb2RlbCwgb3B0KSB7CgogICAgICAgIG9wdCA9IG9wdCB8fCB7fTsKCiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQob3B0LmluYm91bmQpICYmIF8uaXNVbmRlZmluZWQob3B0Lm91dGJvdW5kKSkgewogICAgICAgICAgICBvcHQuaW5ib3VuZCA9IG9wdC5vdXRib3VuZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICB2YXIgbGlua3MgPSBbXTsKICAgICAgICAKICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oY2VsbCkgewoKICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGNlbGwuZ2V0KCdzb3VyY2UnKTsKICAgICAgICAgICAgdmFyIHRhcmdldCA9IGNlbGwuZ2V0KCd0YXJnZXQnKTsKCiAgICAgICAgICAgIGlmIChzb3VyY2UgJiYgc291cmNlLmlkID09PSBtb2RlbC5pZCAmJiBvcHQub3V0Ym91bmQpIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgbGlua3MucHVzaChjZWxsKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQuaWQgPT09IG1vZGVsLmlkICYmIG9wdC5pbmJvdW5kKSB7CgogICAgICAgICAgICAgICAgbGlua3MucHVzaChjZWxsKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gbGlua3M7CiAgICB9Cn0pOwoKCmpvaW50LmRpYS5HcmFwaCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7CgogICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7CgogICAgICAgIHRoaXMuc2V0KCdjZWxscycsIG5ldyBqb2ludC5kaWEuR3JhcGhDZWxscyk7CgogICAgICAgIC8vIE1ha2UgYWxsIHRoZSBldmVudHMgZmlyZWQgaW4gdGhlIGBjZWxsc2AgY29sbGVjdGlvbiBhdmFpbGFibGUuCiAgICAgICAgLy8gdG8gdGhlIG91dHNpZGUgd29ybGQuCiAgICAgICAgdGhpcy5nZXQoJ2NlbGxzJykub24oJ2FsbCcsIHRoaXMudHJpZ2dlciwgdGhpcyk7CiAgICAgICAgCiAgICAgICAgdGhpcy5nZXQoJ2NlbGxzJykub24oJ3JlbW92ZScsIHRoaXMucmVtb3ZlQ2VsbCwgdGhpcyk7CiAgICB9LAoKICAgIHRvSlNPTjogZnVuY3Rpb24oKSB7CgogICAgICAgIC8vIEJhY2tib25lIGRvZXMgbm90IHJlY3Vyc2l2ZWx5IGNhbGwgYHRvSlNPTigpYCBvbiBhdHRyaWJ1dGVzIHRoYXQgYXJlIHRoZW1zZWx2ZXMgbW9kZWxzL2NvbGxlY3Rpb25zLgogICAgICAgIC8vIEl0IGp1c3QgY2xvbmVzIHRoZSBhdHRyaWJ1dGVzLiBUaGVyZWZvcmUsIHdlIG11c3QgY2FsbCBgdG9KU09OKClgIG9uIHRoZSBjZWxscyBjb2xsZWN0aW9uIGV4cGxpY2l0ZWx5LgogICAgICAgIHZhciBqc29uID0gQmFja2JvbmUuTW9kZWwucHJvdG90eXBlLnRvSlNPTi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIGpzb24uY2VsbHMgPSB0aGlzLmdldCgnY2VsbHMnKS50b0pTT04oKTsKICAgICAgICByZXR1cm4ganNvbjsKICAgIH0sCgogICAgZnJvbUpTT046IGZ1bmN0aW9uKGpzb24sIG9wdCkgewoKICAgICAgICBpZiAoIWpzb24uY2VsbHMpIHsKCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR3JhcGggSlNPTiBtdXN0IGNvbnRhaW4gY2VsbHMgYXJyYXkuJyk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnNldChfLm9taXQoanNvbiwgJ2NlbGxzJyksIG9wdCk7CiAgICAgICAgdGhpcy5yZXNldENlbGxzKGpzb24uY2VsbHMsIG9wdCk7CiAgICB9LAoKICAgIGNsZWFyOiBmdW5jdGlvbihvcHQpIHsKCiAgICAgICAgdGhpcy50cmlnZ2VyKCdiYXRjaDpzdGFydCcpOwogICAgICAgIHRoaXMuZ2V0KCdjZWxscycpLnJlbW92ZSh0aGlzLmdldCgnY2VsbHMnKS5tb2RlbHMsIG9wdCk7CiAgICAgICAgdGhpcy50cmlnZ2VyKCdiYXRjaDpzdG9wJyk7CiAgICB9LAoKICAgIF9wcmVwYXJlQ2VsbDogZnVuY3Rpb24oY2VsbCkgewoKICAgICAgICBpZiAoY2VsbCBpbnN0YW5jZW9mIEJhY2tib25lLk1vZGVsICYmIF8uaXNVbmRlZmluZWQoY2VsbC5nZXQoJ3onKSkpIHsKCiAgICAgICAgICAgIGNlbGwuc2V0KCd6JywgdGhpcy5tYXhaSW5kZXgoKSArIDEsIHsgc2lsZW50OiB0cnVlIH0pOwogICAgICAgICAgICAKICAgICAgICB9IGVsc2UgaWYgKF8uaXNVbmRlZmluZWQoY2VsbC56KSkgewoKICAgICAgICAgICAgY2VsbC56ID0gdGhpcy5tYXhaSW5kZXgoKSArIDE7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gY2VsbDsKICAgIH0sCgogICAgbWF4WkluZGV4OiBmdW5jdGlvbigpIHsKCiAgICAgICAgdmFyIGxhc3RDZWxsID0gdGhpcy5nZXQoJ2NlbGxzJykubGFzdCgpOwogICAgICAgIHJldHVybiBsYXN0Q2VsbCA/IChsYXN0Q2VsbC5nZXQoJ3onKSB8fCAwKSA6IDA7CiAgICB9LAoKICAgIGFkZENlbGw6IGZ1bmN0aW9uKGNlbGwsIG9wdGlvbnMpIHsKCiAgICAgICAgaWYgKF8uaXNBcnJheShjZWxsKSkgewoKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkQ2VsbHMoY2VsbCwgb3B0aW9ucyk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLmdldCgnY2VsbHMnKS5hZGQodGhpcy5fcHJlcGFyZUNlbGwoY2VsbCksIG9wdGlvbnMgfHwge30pOwoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgYWRkQ2VsbHM6IGZ1bmN0aW9uKGNlbGxzLCBvcHRpb25zKSB7CgogICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgICAgIG9wdGlvbnMucG9zaXRpb24gPSBjZWxscy5sZW5ndGg7CgogICAgICAgIF8uZWFjaChjZWxscywgZnVuY3Rpb24oY2VsbCkgewogICAgICAgICAgICBvcHRpb25zLnBvc2l0aW9uLS07CiAgICAgICAgICAgIHRoaXMuYWRkQ2VsbChjZWxsLCBvcHRpb25zKTsKICAgICAgICB9LCB0aGlzKTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFdoZW4gYWRkaW5nIGEgbG90IG9mIGNlbGxzLCBpdCBpcyBtdWNoIG1vcmUgZWZmaWNpZW50IHRvCiAgICAvLyByZXNldCB0aGUgZW50aXJlIGNlbGxzIGNvbGxlY3Rpb24gaW4gb25lIGdvLgogICAgLy8gVXNlZnVsIGZvciBidWxrIG9wZXJhdGlvbnMgYW5kIG9wdGltaXphdGlvbnMuCiAgICByZXNldENlbGxzOiBmdW5jdGlvbihjZWxscywgb3B0KSB7CiAgICAgICAgCiAgICAgICAgdGhpcy5nZXQoJ2NlbGxzJykucmVzZXQoXy5tYXAoY2VsbHMsIHRoaXMuX3ByZXBhcmVDZWxsLCB0aGlzKSwgb3B0KTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIHJlbW92ZUNlbGw6IGZ1bmN0aW9uKGNlbGwsIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHsKCiAgICAgICAgLy8gQXBwbGljYXRpb25zIG1pZ2h0IHByb3ZpZGUgYSBgZGlzY29ubmVjdExpbmtzYCBvcHRpb24gc2V0IHRvIGB0cnVlYCBpbiBvcmRlciB0bwogICAgICAgIC8vIGRpc2Nvbm5lY3QgbGlua3Mgd2hlbiBhIGNlbGwgaXMgcmVtb3ZlZCByYXRoZXIgdGhlbiByZW1vdmluZyB0aGVtLiBUaGUgZGVmYXVsdAogICAgICAgIC8vIGlzIHRvIHJlbW92ZSBhbGwgdGhlIGFzc29jaWF0ZWQgbGlua3MuCiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5kaXNjb25uZWN0TGlua3MpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdExpbmtzKGNlbGwpOwoKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgdGhpcy5yZW1vdmVMaW5rcyhjZWxsKTsKICAgICAgICB9CgogICAgICAgIC8vIFNpbGVudGx5IHJlbW92ZSB0aGUgY2VsbCBmcm9tIHRoZSBjZWxscyBjb2xsZWN0aW9uLiBTaWxlbnRseSwgYmVjYXVzZQogICAgICAgIC8vIGBqb2ludC5kaWEuQ2VsbC5wcm90b3R5cGUucmVtb3ZlYCBhbHJlYWR5IHRyaWdnZXJzIHRoZSBgcmVtb3ZlYCBldmVudCB3aGljaCBpcwogICAgICAgIC8vIHRoZW4gcHJvcGFnYXRlZCB0byB0aGUgZ3JhcGggbW9kZWwuIElmIHdlIGRpZG4ndCByZW1vdmUgdGhlIGNlbGwgc2lsZW50bHksIHR3byBgcmVtb3ZlYCBldmVudHMKICAgICAgICAvLyB3b3VsZCBiZSB0cmlnZ2VyZWQgb24gdGhlIGdyYXBoIG1vZGVsLgogICAgICAgIHRoaXMuZ2V0KCdjZWxscycpLnJlbW92ZShjZWxsLCB7IHNpbGVudDogdHJ1ZSB9KTsKICAgIH0sCgogICAgLy8gR2V0IGEgY2VsbCBieSBgaWRgLgogICAgZ2V0Q2VsbDogZnVuY3Rpb24oaWQpIHsKCiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdjZWxscycpLmdldChpZCk7CiAgICB9LAoKICAgIGdldEVsZW1lbnRzOiBmdW5jdGlvbigpIHsKCiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdjZWxscycpLmZpbHRlcihmdW5jdGlvbihjZWxsKSB7CgogICAgICAgICAgICByZXR1cm4gY2VsbCBpbnN0YW5jZW9mIGpvaW50LmRpYS5FbGVtZW50OwogICAgICAgIH0pOwogICAgfSwKICAgIAogICAgZ2V0TGlua3M6IGZ1bmN0aW9uKCkgewoKICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ2NlbGxzJykuZmlsdGVyKGZ1bmN0aW9uKGNlbGwpIHsKCiAgICAgICAgICAgIHJldHVybiBjZWxsIGluc3RhbmNlb2Ygam9pbnQuZGlhLkxpbms7CiAgICAgICAgfSk7CiAgICB9LAoKICAgIC8vIEdldCBhbGwgaW5ib3VuZCBhbmQgb3V0Ym91bmQgbGlua3MgY29ubmVjdGVkIHRvIHRoZSBjZWxsIGBtb2RlbGAuCiAgICBnZXRDb25uZWN0ZWRMaW5rczogZnVuY3Rpb24obW9kZWwsIG9wdCkgewoKICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ2NlbGxzJykuZ2V0Q29ubmVjdGVkTGlua3MobW9kZWwsIG9wdCk7CiAgICB9LAoKICAgIGdldE5laWdoYm9yczogZnVuY3Rpb24oZWwpIHsKCiAgICAgICAgdmFyIGxpbmtzID0gdGhpcy5nZXRDb25uZWN0ZWRMaW5rcyhlbCk7CiAgICAgICAgdmFyIG5laWdoYm9ycyA9IFtdOwogICAgICAgIHZhciBjZWxscyA9IHRoaXMuZ2V0KCdjZWxscycpOwogICAgICAgIAogICAgICAgIF8uZWFjaChsaW5rcywgZnVuY3Rpb24obGluaykgewoKICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGxpbmsuZ2V0KCdzb3VyY2UnKTsKICAgICAgICAgICAgdmFyIHRhcmdldCA9IGxpbmsuZ2V0KCd0YXJnZXQnKTsKCiAgICAgICAgICAgIC8vIERpc2NhcmQgaWYgaXQgaXMgYSBwb2ludC4KICAgICAgICAgICAgaWYgKCFzb3VyY2UueCkgewogICAgICAgICAgICAgICAgdmFyIHNvdXJjZUVsZW1lbnQgPSBjZWxscy5nZXQoc291cmNlLmlkKTsKICAgICAgICAgICAgICAgIGlmIChzb3VyY2VFbGVtZW50ICE9PSBlbCkgewoKICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChzb3VyY2VFbGVtZW50KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIXRhcmdldC54KSB7CiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IGNlbGxzLmdldCh0YXJnZXQuaWQpOwogICAgICAgICAgICAgICAgaWYgKHRhcmdldEVsZW1lbnQgIT09IGVsKSB7CgogICAgICAgICAgICAgICAgICAgIG5laWdoYm9ycy5wdXNoKHRhcmdldEVsZW1lbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBuZWlnaGJvcnM7CiAgICB9LAogICAgCiAgICAvLyBEaXNjb25uZWN0IGxpbmtzIGNvbm5lY3RlZCB0byB0aGUgY2VsbCBgbW9kZWxgLgogICAgZGlzY29ubmVjdExpbmtzOiBmdW5jdGlvbihtb2RlbCkgewoKICAgICAgICBfLmVhY2godGhpcy5nZXRDb25uZWN0ZWRMaW5rcyhtb2RlbCksIGZ1bmN0aW9uKGxpbmspIHsKCiAgICAgICAgICAgIGxpbmsuc2V0KGxpbmsuZ2V0KCdzb3VyY2UnKS5pZCA9PT0gbW9kZWwuaWQgPyAnc291cmNlJyA6ICd0YXJnZXQnLCBnLnBvaW50KDAsIDApKTsKICAgICAgICB9KTsKICAgIH0sCgogICAgLy8gUmVtb3ZlIGxpbmtzIGNvbm5lY3RlZCB0byB0aGUgY2VsbCBgbW9kZWxgIGNvbXBsZXRlbHkuCiAgICByZW1vdmVMaW5rczogZnVuY3Rpb24obW9kZWwpIHsKCiAgICAgICAgXy5pbnZva2UodGhpcy5nZXRDb25uZWN0ZWRMaW5rcyhtb2RlbCksICdyZW1vdmUnKTsKICAgIH0sCgogICAgLy8gRmluZCBhbGwgdmlld3MgYXQgZ2l2ZW4gcG9pbnQKICAgIGZpbmRNb2RlbHNGcm9tUG9pbnQ6IGZ1bmN0aW9uKHApIHsKCglyZXR1cm4gXy5maWx0ZXIodGhpcy5nZXRFbGVtZW50cygpLCBmdW5jdGlvbihlbCkgewoJICAgIHJldHVybiBlbC5nZXRCQm94KCkuY29udGFpbnNQb2ludChwKTsKCX0pOwogICAgfSwKCiAgICAvLyBGaW5kIGFsbCB2aWV3cyBpbiBnaXZlbiBhcmVhCiAgICBmaW5kTW9kZWxzSW5BcmVhOiBmdW5jdGlvbihyKSB7CgoJcmV0dXJuIF8uZmlsdGVyKHRoaXMuZ2V0RWxlbWVudHMoKSwgZnVuY3Rpb24oZWwpIHsKCSAgICByZXR1cm4gZWwuZ2V0QkJveCgpLmludGVyc2VjdChyKTsKCX0pOwogICAgfSwKCiAgICAvLyBSZXR1cm4gdGhlIGJvdW5kaW5nIGJveCBvZiBhbGwgYGVsZW1lbnRzYC4KICAgIGdldEJCb3g6IGZ1bmN0aW9uKGVsZW1lbnRzKSB7CgoJdmFyIG9yaWdpbiA9IHsgeDogSW5maW5pdHksIHk6IEluZmluaXR5IH07Cgl2YXIgY29ybmVyID0geyB4OiAwLCB5OiAwIH07CgkKCV8uZWFjaChlbGVtZW50cywgZnVuY3Rpb24oY2VsbCkgewoJICAgIAoJICAgIHZhciBiYm94ID0gY2VsbC5nZXRCQm94KCk7CgkgICAgb3JpZ2luLnggPSBNYXRoLm1pbihvcmlnaW4ueCwgYmJveC54KTsKCSAgICBvcmlnaW4ueSA9IE1hdGgubWluKG9yaWdpbi55LCBiYm94LnkpOwoJICAgIGNvcm5lci54ID0gTWF0aC5tYXgoY29ybmVyLngsIGJib3gueCArIGJib3gud2lkdGgpOwoJICAgIGNvcm5lci55ID0gTWF0aC5tYXgoY29ybmVyLnksIGJib3gueSArIGJib3guaGVpZ2h0KTsKCX0pOwoKCXJldHVybiBnLnJlY3Qob3JpZ2luLngsIG9yaWdpbi55LCBjb3JuZXIueCAtIG9yaWdpbi54LCBjb3JuZXIueSAtIG9yaWdpbi55KTsKICAgIH0KCn0pOwoKCmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHsKCiAgICBtb2R1bGUuZXhwb3J0cy5HcmFwaCA9IGpvaW50LmRpYS5HcmFwaDsKfQoKLy8gICAgICBKb2ludEpTLgovLyAgICAgIChjKSAyMDExLTIwMTMgY2xpZW50IElPCgoKaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykgewoKICAgIHZhciBqb2ludCA9IHsKICAgICAgICB1dGlsOiByZXF1aXJlKCcuL2NvcmUnKS51dGlsLAogICAgICAgIGRpYTogewogICAgICAgICAgICBMaW5rOiByZXF1aXJlKCcuL2pvaW50LmRpYS5saW5rJykuTGluawogICAgICAgIH0KICAgIH07CiAgICB2YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpOwogICAgdmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTsKfQoKCi8vIGpvaW50LmRpYS5DZWxsIGJhc2UgbW9kZWwuCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpqb2ludC5kaWEuQ2VsbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7CgogICAgLy8gVGhpcyBpcyB0aGUgc2FtZSBhcyBCYWNrYm9uZS5Nb2RlbCB3aXRoIHRoZSBvbmx5IGRpZmZlcmVuY2UgdGhhdCBpcyB1c2VzIF8ubWVyZ2UKICAgIC8vIGluc3RlYWQgb2YganVzdCBfLmV4dGVuZC4gVGhlIHJlYXNvbiBpcyB0aGF0IHdlIHdhbnQgdG8gbWl4aW4gYXR0cmlidXRlcyBzZXQgaW4gdXBwZXIgY2xhc3Nlcy4KICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7CgogICAgICAgIHZhciBkZWZhdWx0czsKICAgICAgICB2YXIgYXR0cnMgPSBhdHRyaWJ1dGVzIHx8IHt9OwogICAgICAgIHRoaXMuY2lkID0gXy51bmlxdWVJZCgnYycpOwogICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9OwogICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29sbGVjdGlvbikgdGhpcy5jb2xsZWN0aW9uID0gb3B0aW9ucy5jb2xsZWN0aW9uOwogICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucGFyc2UpIGF0dHJzID0gdGhpcy5wYXJzZShhdHRycywgb3B0aW9ucykgfHwge307CiAgICAgICAgaWYgKGRlZmF1bHRzID0gXy5yZXN1bHQodGhpcywgJ2RlZmF1bHRzJykpIHsKICAgICAgICAgICAgLy88Y3VzdG9tIGNvZGU+CiAgICAgICAgICAgIC8vIFJlcGxhY2VkIHRoZSBjYWxsIHRvIF8uZGVmYXVsdHMgd2l0aCBfLm1lcmdlLgogICAgICAgICAgICBhdHRycyA9IF8ubWVyZ2Uoe30sIGRlZmF1bHRzLCBhdHRycyk7CiAgICAgICAgICAgIC8vPC9jdXN0b20gY29kZT4KICAgICAgICB9CiAgICAgICAgdGhpcy5zZXQoYXR0cnMsIG9wdGlvbnMpOwogICAgICAgIHRoaXMuY2hhbmdlZCA9IHt9OwogICAgICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfSwKCiAgICB0b0pTT046IGZ1bmN0aW9uKCkgewoKICAgICAgICB2YXIgZGVmYXVsdEF0dHJzID0gdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuZGVmYXVsdHMuYXR0cnMgfHwge307CiAgICAgICAgdmFyIGF0dHJzID0gdGhpcy5hdHRyaWJ1dGVzLmF0dHJzOwogICAgICAgIHZhciBmaW5hbEF0dHJzID0ge307CgogICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIGF0dHJpYnV0ZXMgYW5kCiAgICAgICAgLy8gb21pdCB0aGUgZGVmYXVsdCBhdHRyaWJ1dGVzIGFzIHRoZXkgYXJlIGltcGxpY2l0bHkgcmVjb25zdHJ1Y3RhYmxlIGJ5IHRoZSBjZWxsICd0eXBlJy4KICAgICAgICBfLmVhY2goYXR0cnMsIGZ1bmN0aW9uKGF0dHIsIHNlbGVjdG9yKSB7CgogICAgICAgICAgICB2YXIgZGVmYXVsdEF0dHIgPSBkZWZhdWx0QXR0cnNbc2VsZWN0b3JdOwoKICAgICAgICAgICAgXy5lYWNoKGF0dHIsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIGF0dHIgaXMgbWFpbmx5IGZsYXQgdGhvdWdoIGl0IG1pZ2h0IGhhdmUgb25lIG1vcmUgbGV2ZWwgKGNvbnNpZGVyIHRoZSBgc3R5bGVgIGF0dHJpYnV0ZSkuCiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgYHZhbHVlYCBpcyBvYmplY3QgYW5kIGlmIHllcywgZ28gb25lIGxldmVsIGRlZXAuCiAgICAgICAgICAgICAgICBpZiAoXy5pc09iamVjdCh2YWx1ZSkgJiYgIV8uaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBfLmVhY2godmFsdWUsIGZ1bmN0aW9uKHZhbHVlMiwgbmFtZTIpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGVmYXVsdEF0dHIgfHwgIWRlZmF1bHRBdHRyW25hbWVdIHx8ICFfLmlzRXF1YWwoZGVmYXVsdEF0dHJbbmFtZV1bbmFtZTJdLCB2YWx1ZTIpKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxBdHRyc1tzZWxlY3Rvcl0gPSBmaW5hbEF0dHJzW3NlbGVjdG9yXSB8fCB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmaW5hbEF0dHJzW3NlbGVjdG9yXVtuYW1lXSB8fCAoZmluYWxBdHRyc1tzZWxlY3Rvcl1bbmFtZV0gPSB7fSkpW25hbWUyXSA9IHZhbHVlMjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRlZmF1bHRBdHRyIHx8ICFfLmlzRXF1YWwoZGVmYXVsdEF0dHJbbmFtZV0sIHZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgIC8vIGB2YWx1ZWAgaXMgbm90IGFuIG9iamVjdCwgZGVmYXVsdCBhdHRyaWJ1dGUgZm9yIHN1Y2ggYSBzZWxlY3RvciBkb2VzIG5vdCBleGlzdAogICAgICAgICAgICAgICAgICAgIC8vIG9yIGl0IGlzIGRpZmZlcmVudCB0aGFuIHRoZSBhdHRyaWJ1dGUgdmFsdWUgc2V0IG9uIHRoZSBtb2RlbC4KCiAgICAgICAgICAgICAgICAgICAgZmluYWxBdHRyc1tzZWxlY3Rvcl0gPSBmaW5hbEF0dHJzW3NlbGVjdG9yXSB8fCB7fTsKICAgICAgICAgICAgICAgICAgICBmaW5hbEF0dHJzW3NlbGVjdG9yXVtuYW1lXSA9IHZhbHVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBfLmNsb25lRGVlcChfLm9taXQodGhpcy5hdHRyaWJ1dGVzLCAnYXR0cnMnKSk7CiAgICAgICAgLy92YXIgYXR0cmlidXRlcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoXy5vbWl0KHRoaXMuYXR0cmlidXRlcywgJ2F0dHJzJykpKTsKICAgICAgICBhdHRyaWJ1dGVzLmF0dHJzID0gZmluYWxBdHRyczsKCiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXM7CiAgICB9LAoKICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKCiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLmlkKSB7CgogICAgICAgICAgICB0aGlzLnNldCgnaWQnLCBqb2ludC51dGlsLnV1aWQoKSwgeyBzaWxlbnQ6IHRydWUgfSk7CiAgICAgICAgfQoKCXRoaXMuX3RyYW5zaXRpb25JZHMgPSB7fTsKCiAgICAgICAgLy8gQ29sbGVjdCBwb3J0cyBkZWZpbmVkIGluIGBhdHRyc2AgYW5kIGtlZXAgY29sbGVjdGluZyB3aGVuZXZlciBgYXR0cnNgIG9iamVjdCBjaGFuZ2VzLgogICAgICAgIHRoaXMucHJvY2Vzc1BvcnRzKCk7CiAgICAgICAgdGhpcy5vbignY2hhbmdlOmF0dHJzJywgdGhpcy5wcm9jZXNzUG9ydHMsIHRoaXMpOwogICAgfSwKCiAgICBwcm9jZXNzUG9ydHM6IGZ1bmN0aW9uKCkgewoKICAgICAgICAvLyBXaGVuZXZlciBgYXR0cnNgIGNoYW5nZXMsIHdlIGV4dHJhY3QgcG9ydHMgZnJvbSB0aGUgYGF0dHJzYCBvYmplY3QgYW5kIHN0b3JlIGl0CiAgICAgICAgLy8gaW4gYSBtb3JlIGFjY2Vzc2libGUgd2F5LiBBbHNvLCBpZiBhbnkgcG9ydCBnb3QgcmVtb3ZlZCBhbmQgdGhlcmUgd2VyZSBsaW5rcyB0aGF0IGhhZCBgdGFyZ2V0YC9gc291cmNlYAogICAgICAgIC8vIHNldCB0byB0aGF0IHBvcnQsIHdlIHJlbW92ZSB0aG9zZSBsaW5rcyBhcyB3ZWxsICh0byBmb2xsb3cgdGhlIHNhbWUgYmVoYXZpb3VyIGFzCiAgICAgICAgLy8gd2l0aCBhIHJlbW92ZWQgZWxlbWVudCkuCgogICAgICAgIHZhciBwcmV2aW91c1BvcnRzID0gdGhpcy5wb3J0czsKCiAgICAgICAgLy8gQ29sbGVjdCBwb3J0cyBmcm9tIHRoZSBgYXR0cnNgIG9iamVjdC4KICAgICAgICB2YXIgcG9ydHMgPSB7fTsKICAgICAgICBfLmVhY2godGhpcy5nZXQoJ2F0dHJzJyksIGZ1bmN0aW9uKGF0dHJzLCBzZWxlY3RvcikgewoKICAgICAgICAgICAgaWYgKGF0dHJzICYmIGF0dHJzLnBvcnQpIHsKCiAgICAgICAgICAgICAgICAvLyBgcG9ydGAgY2FuIGVpdGhlciBiZSBkaXJlY3RseSBhbiBgaWRgIG9yIGFuIG9iamVjdCBjb250YWluaW5nIGFuIGBpZGAgKGFuZCBwb3RlbnRpYWxseSBvdGhlciBkYXRhKS4KICAgICAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChhdHRycy5wb3J0LmlkKSkgewogICAgICAgICAgICAgICAgICAgIHBvcnRzW2F0dHJzLnBvcnQuaWRdID0gYXR0cnMucG9ydDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcG9ydHNbYXR0cnMucG9ydF0gPSB7IGlkOiBhdHRycy5wb3J0IH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgLy8gQ29sbGVjdCBwb3J0cyB0aGF0IGhhdmUgYmVlbiByZW1vdmVkIChjb21wYXJlZCB0byB0aGUgcHJldmlvdXMgcG9ydHMpIC0gaWYgYW55LgogICAgICAgIC8vIFVzZSBoYXNoIHRhYmxlIGZvciBxdWljayBsb29rdXAuCiAgICAgICAgdmFyIHJlbW92ZWRQb3J0cyA9IHt9OwogICAgICAgIF8uZWFjaChwcmV2aW91c1BvcnRzLCBmdW5jdGlvbihwb3J0LCBpZCkgewoKICAgICAgICAgICAgaWYgKCFwb3J0c1tpZF0pIHJlbW92ZWRQb3J0c1tpZF0gPSB0cnVlOwogICAgICAgIH0pOwoKICAgICAgICAvLyBSZW1vdmUgYWxsIHRoZSBpbmNvbWluZy9vdXRnb2luZyBsaW5rcyB0aGF0IGhhdmUgc291cmNlL3RhcmdldCBwb3J0IHNldCB0byBhbnkgb2YgdGhlIHJlbW92ZWQgcG9ydHMuCiAgICAgICAgaWYgKHRoaXMuY29sbGVjdGlvbiAmJiAhXy5pc0VtcHR5KHJlbW92ZWRQb3J0cykpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBpbmJvdW5kTGlua3MgPSB0aGlzLmNvbGxlY3Rpb24uZ2V0Q29ubmVjdGVkTGlua3ModGhpcywgeyBpbmJvdW5kOiB0cnVlIH0pOwogICAgICAgICAgICBfLmVhY2goaW5ib3VuZExpbmtzLCBmdW5jdGlvbihsaW5rKSB7CgogICAgICAgICAgICAgICAgaWYgKHJlbW92ZWRQb3J0c1tsaW5rLmdldCgndGFyZ2V0JykucG9ydF0pIGxpbmsucmVtb3ZlKCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgdmFyIG91dGJvdW5kTGlua3MgPSB0aGlzLmNvbGxlY3Rpb24uZ2V0Q29ubmVjdGVkTGlua3ModGhpcywgeyBvdXRib3VuZDogdHJ1ZSB9KTsKICAgICAgICAgICAgXy5lYWNoKG91dGJvdW5kTGlua3MsIGZ1bmN0aW9uKGxpbmspIHsKCiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlZFBvcnRzW2xpbmsuZ2V0KCdzb3VyY2UnKS5wb3J0XSkgbGluay5yZW1vdmUoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICAvLyBVcGRhdGUgdGhlIGBwb3J0c2Agb2JqZWN0LgogICAgICAgIHRoaXMucG9ydHMgPSBwb3J0czsKICAgIH0sCgogICAgcmVtb3ZlOiBmdW5jdGlvbihvcHRpb25zKSB7CgoJdmFyIGNvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb247CgoJaWYgKGNvbGxlY3Rpb24pIHsKCSAgICBjb2xsZWN0aW9uLnRyaWdnZXIoJ2JhdGNoOnN0YXJ0Jyk7Cgl9CgogICAgICAgIC8vIEZpcnN0LCB1bmVtYmVkIHRoaXMgY2VsbCBmcm9tIGl0cyBwYXJlbnQgY2VsbCBpZiB0aGVyZSBpcyBvbmUuCiAgICAgICAgdmFyIHBhcmVudENlbGxJZCA9IHRoaXMuZ2V0KCdwYXJlbnQnKTsKICAgICAgICBpZiAocGFyZW50Q2VsbElkKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcGFyZW50Q2VsbCA9IHRoaXMuY29sbGVjdGlvbiAmJiB0aGlzLmNvbGxlY3Rpb24uZ2V0KHBhcmVudENlbGxJZCk7CiAgICAgICAgICAgIHBhcmVudENlbGwudW5lbWJlZCh0aGlzKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgXy5pbnZva2UodGhpcy5nZXRFbWJlZGRlZENlbGxzKCksICdyZW1vdmUnLCBvcHRpb25zKTsKICAgICAgICAKICAgICAgICB0aGlzLnRyaWdnZXIoJ3JlbW92ZScsIHRoaXMsIHRoaXMuY29sbGVjdGlvbiwgb3B0aW9ucyk7CgoJaWYgKGNvbGxlY3Rpb24pIHsKCSAgICBjb2xsZWN0aW9uLnRyaWdnZXIoJ2JhdGNoOnN0b3AnKTsKCX0KCglyZXR1cm4gdGhpczsKICAgIH0sCgogICAgdG9Gcm9udDogZnVuY3Rpb24oKSB7CgogICAgICAgIGlmICh0aGlzLmNvbGxlY3Rpb24pIHsKCiAgICAgICAgICAgIHRoaXMuc2V0KCd6JywgKHRoaXMuY29sbGVjdGlvbi5sYXN0KCkuZ2V0KCd6JykgfHwgMCkgKyAxKTsKICAgICAgICB9CgoJcmV0dXJuIHRoaXM7CiAgICB9LAogICAgCiAgICB0b0JhY2s6IGZ1bmN0aW9uKCkgewoKICAgICAgICBpZiAodGhpcy5jb2xsZWN0aW9uKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICB0aGlzLnNldCgneicsICh0aGlzLmNvbGxlY3Rpb24uZmlyc3QoKS5nZXQoJ3onKSB8fCAwKSAtIDEpOwogICAgICAgIH0KCglyZXR1cm4gdGhpczsKICAgIH0sCgogICAgZW1iZWQ6IGZ1bmN0aW9uKGNlbGwpIHsKCglpZiAodGhpcy5nZXQoJ3BhcmVudCcpID09IGNlbGwuaWQpIHsKCgkgICAgdGhyb3cgbmV3IEVycm9yKCdSZWN1cnNpdmUgZW1iZWRkaW5nIG5vdCBhbGxvd2VkLicpOwoKCX0gZWxzZSB7CgoJICAgIHRoaXMudHJpZ2dlcignYmF0Y2g6c3RhcnQnKTsKCgkgICAgY2VsbC5zZXQoJ3BhcmVudCcsIHRoaXMuaWQpOwoJICAgIHRoaXMuc2V0KCdlbWJlZHMnLCBfLnVuaXEoKHRoaXMuZ2V0KCdlbWJlZHMnKSB8fCBbXSkuY29uY2F0KFtjZWxsLmlkXSkpKTsKCgkgICAgdGhpcy50cmlnZ2VyKCdiYXRjaDpzdG9wJyk7Cgl9CgoJcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIHVuZW1iZWQ6IGZ1bmN0aW9uKGNlbGwpIHsKCgl0aGlzLnRyaWdnZXIoJ2JhdGNoOnN0YXJ0Jyk7CgogICAgICAgIHZhciBjZWxsSWQgPSBjZWxsLmlkOwogICAgICAgIGNlbGwudW5zZXQoJ3BhcmVudCcpOwoKICAgICAgICB0aGlzLnNldCgnZW1iZWRzJywgXy53aXRob3V0KHRoaXMuZ2V0KCdlbWJlZHMnKSwgY2VsbElkKSk7CgoJdGhpcy50cmlnZ2VyKCdiYXRjaDpzdG9wJyk7CgoJcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIGdldEVtYmVkZGVkQ2VsbHM6IGZ1bmN0aW9uKCkgewoKICAgICAgICAvLyBDZWxsIG1vZGVscyBjYW4gb25seSBiZSByZXRyaWV2ZWQgd2hlbiB0aGlzIGVsZW1lbnQgaXMgcGFydCBvZiBhIGNvbGxlY3Rpb24uCiAgICAgICAgLy8gVGhlcmUgaXMgbm8gd2F5IHRoaXMgZWxlbWVudCBrbm93cyBhYm91dCBvdGhlciBjZWxscyBvdGhlcndpc2UuCiAgICAgICAgLy8gVGhpcyBhbHNvIG1lYW5zIHRoYXQgY2FsbGluZyBlLmcuIGB0cmFuc2xhdGUoKWAgb24gYW4gZWxlbWVudCB3aXRoIGVtYmVkcyBiZWZvcmUKICAgICAgICAvLyBhZGRpbmcgaXQgdG8gYSBncmFwaCBkb2VzIG5vdCB0cmFuc2xhdGUgaXRzIGVtYmVkcy4KICAgICAgICBpZiAodGhpcy5jb2xsZWN0aW9uKSB7CgogICAgICAgICAgICByZXR1cm4gXy5tYXAodGhpcy5nZXQoJ2VtYmVkcycpIHx8IFtdLCBmdW5jdGlvbihjZWxsSWQpIHsKCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uLmdldChjZWxsSWQpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0sIHRoaXMpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gW107CiAgICB9LAoKICAgIGNsb25lOiBmdW5jdGlvbihvcHQpIHsKCiAgICAgICAgb3B0ID0gb3B0IHx8IHt9OwoKICAgICAgICB2YXIgY2xvbmUgPSBCYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUuY2xvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAKICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRoZSBjbG9uZSB0byBoYXZlIHRoZSBzYW1lIElEIGFzIHRoZSBvcmlnaW5hbC4KICAgICAgICBjbG9uZS5zZXQoJ2lkJywgam9pbnQudXRpbC51dWlkKCksIHsgc2lsZW50OiB0cnVlIH0pOwogICAgICAgIGNsb25lLnNldCgnZW1iZWRzJywgJycpOwoKICAgICAgICBpZiAoIW9wdC5kZWVwKSByZXR1cm4gY2xvbmU7CgogICAgICAgIC8vIFRoZSByZXN0IG9mIHRoZSBgY2xvbmUoKWAgbWV0aG9kIGRlYWxzIHdpdGggZW1iZWRzLiBJZiBgZGVlcGAgb3B0aW9uIGlzIHNldCB0byBgdHJ1ZWAsCiAgICAgICAgLy8gdGhlIHJldHVybiB2YWx1ZSBpcyBhbiBhcnJheSBvZiBhbGwgdGhlIGVtYmVkZGVkIGNsb25lcyBjcmVhdGVkLgoKICAgICAgICB2YXIgZW1iZWRzID0gXy5zb3J0QnkodGhpcy5nZXRFbWJlZGRlZENlbGxzKCksIGZ1bmN0aW9uKGNlbGwpIHsKICAgICAgICAgICAgLy8gU29ydCBlbWJlZHMgdGhhdCBsaW5rcyBjb21lIGJlZm9yZSBlbGVtZW50cy4KICAgICAgICAgICAgcmV0dXJuIGNlbGwgaW5zdGFuY2VvZiBqb2ludC5kaWEuRWxlbWVudDsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIGNsb25lcyA9IFtjbG9uZV07CgogICAgICAgIC8vIFRoaXMgbWFwcGluZyBzdG9yZXMgY2xvbmVkIGxpbmtzIHVuZGVyIHRoZSBgaWRgcyBvZiB0aGV5IG9yaWdpbmFscy4KICAgICAgICAvLyBUaGlzIHByZXZlbnRzIGNsb25pbmcgYSBsaW5rIG1vcmUgdGhlbiBvbmNlLiBDb25zaWRlciBhIGxpbmsgJ3NlbGYgbG9vcCcgZm9yIGV4YW1wbGUuCiAgICAgICAgdmFyIGxpbmtDbG9uZU1hcHBpbmcgPSB7fTsKICAgICAgICAKICAgICAgICBfLmVhY2goZW1iZWRzLCBmdW5jdGlvbihlbWJlZCkgewoKICAgICAgICAgICAgdmFyIGVtYmVkQ2xvbmVzID0gZW1iZWQuY2xvbmUoeyBkZWVwOiB0cnVlIH0pOwoKICAgICAgICAgICAgLy8gRW1iZWQgdGhlIGZpcnN0IGNsb25lIHJldHVybmVkIGZyb20gYGNsb25lKHsgZGVlcDogdHJ1ZSB9KWAgYWJvdmUuIFRoZSBmaXJzdAogICAgICAgICAgICAvLyBjZWxsIGlzIGFsd2F5cyB0aGUgY2xvbmUgb2YgdGhlIGNlbGwgdGhhdCBjYWxsZWQgdGhlIGBjbG9uZSgpYCBtZXRob2QsIGkuZS4gY2xvbmUgb2YgYGVtYmVkYCBpbiB0aGlzIGNhc2UuCiAgICAgICAgICAgIGNsb25lLmVtYmVkKGVtYmVkQ2xvbmVzWzBdKTsKCiAgICAgICAgICAgIF8uZWFjaChlbWJlZENsb25lcywgZnVuY3Rpb24oZW1iZWRDbG9uZSkgewoKICAgICAgICAgICAgICAgIGlmIChlbWJlZENsb25lIGluc3RhbmNlb2Ygam9pbnQuZGlhLkxpbmspIHsKCiAgICAgICAgICAgICAgICAgICAgaWYgKGVtYmVkQ2xvbmUuZ2V0KCdzb3VyY2UnKS5pZCA9PSB0aGlzLmlkKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBlbWJlZENsb25lLnByb3AoJ3NvdXJjZScsIHsgaWQ6IGNsb25lLmlkIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKGVtYmVkQ2xvbmUuZ2V0KCd0YXJnZXQnKS5pZCA9PSB0aGlzLmlkKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBlbWJlZENsb25lLnByb3AoJ3RhcmdldCcsIHsgaWQ6IGNsb25lLmlkIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgbGlua0Nsb25lTWFwcGluZ1tlbWJlZC5pZF0gPSBlbWJlZENsb25lOwoKICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIGxpbmtzLiBJbmJvdW5kL291dGJvdW5kIGxpbmtzIGFyZSBub3QgcmVsZXZhbnQgZm9yIHRoZW0uCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNsb25lcy5wdXNoKGVtYmVkQ2xvbmUpOwoKICAgICAgICAgICAgICAgIC8vIENvbGxlY3QgYWxsIGluYm91bmQgbGlua3MsIGNsb25lIHRoZW0gKGlmIG5vdCBkb25lIGFscmVhZHkpIGFuZCBzZXQgdGhlaXIgdGFyZ2V0IHRvIHRoZSBgZW1iZWRDbG9uZS5pZGAuCiAgICAgICAgICAgICAgICB2YXIgaW5ib3VuZExpbmtzID0gdGhpcy5jb2xsZWN0aW9uLmdldENvbm5lY3RlZExpbmtzKGVtYmVkLCB7IGluYm91bmQ6IHRydWUgfSk7CgogICAgICAgICAgICAgICAgXy5lYWNoKGluYm91bmRMaW5rcywgZnVuY3Rpb24obGluaykgewoKICAgICAgICAgICAgICAgICAgICB2YXIgbGlua0Nsb25lID0gbGlua0Nsb25lTWFwcGluZ1tsaW5rLmlkXSB8fCBsaW5rLmNsb25lKCk7CgogICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBkb24ndCBjbG9uZSBhIGxpbmsgbW9yZSB0aGVuIG9uY2UuCiAgICAgICAgICAgICAgICAgICAgbGlua0Nsb25lTWFwcGluZ1tsaW5rLmlkXSA9IGxpbmtDbG9uZTsKCiAgICAgICAgICAgICAgICAgICAgbGlua0Nsb25lLnByb3AoJ3RhcmdldCcsIHsgaWQ6IGVtYmVkQ2xvbmUuaWQgfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvLyBDb2xsZWN0IGFsbCBpbmJvdW5kIGxpbmtzLCBjbG9uZSB0aGVtIChpZiBub3QgZG9uZSBhbHJlYWR5KSBhbmQgc2V0IHRoZWlyIHNvdXJjZSB0byB0aGUgYGVtYmVkQ2xvbmUuaWRgLgogICAgICAgICAgICAgICAgdmFyIG91dGJvdW5kTGlua3MgPSB0aGlzLmNvbGxlY3Rpb24uZ2V0Q29ubmVjdGVkTGlua3MoZW1iZWQsIHsgb3V0Ym91bmQ6IHRydWUgfSk7CgogICAgICAgICAgICAgICAgXy5lYWNoKG91dGJvdW5kTGlua3MsIGZ1bmN0aW9uKGxpbmspIHsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmtDbG9uZSA9IGxpbmtDbG9uZU1hcHBpbmdbbGluay5pZF0gfHwgbGluay5jbG9uZSgpOwoKICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZG9uJ3QgY2xvbmUgYSBsaW5rIG1vcmUgdGhlbiBvbmNlLgogICAgICAgICAgICAgICAgICAgIGxpbmtDbG9uZU1hcHBpbmdbbGluay5pZF0gPSBsaW5rQ2xvbmU7CgogICAgICAgICAgICAgICAgICAgIGxpbmtDbG9uZS5wcm9wKCdzb3VyY2UnLCB7IGlkOiBlbWJlZENsb25lLmlkIH0pOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICAgICAgCiAgICAgICAgfSwgdGhpcyk7CgogICAgICAgIC8vIEFkZCBsaW5rIGNsb25lcyB0byB0aGUgYXJyYXkgb2YgYWxsIHRoZSBuZXcgY2xvbmVzLgogICAgICAgIGNsb25lcyA9IGNsb25lcy5jb25jYXQoXy52YWx1ZXMobGlua0Nsb25lTWFwcGluZykpOwoKICAgICAgICByZXR1cm4gY2xvbmVzOwogICAgfSwKCiAgICAvLyBBIGNvbnZlbmllbnQgd2F5IHRvIHNldCBuZXN0ZWQgcHJvcGVydGllcy4KICAgIC8vIFRoaXMgbWV0aG9kIG1lcmdlcyB0aGUgcHJvcGVydGllcyB5b3UnZCBsaWtlIHRvIHNldCB3aXRoIHRoZSBvbmVzCiAgICAvLyBzdG9yZWQgaW4gdGhlIGNlbGwgYW5kIG1ha2VzIHN1cmUgY2hhbmdlIGV2ZW50cyBhcmUgcHJvcGVybHkgdHJpZ2dlcmVkLgogICAgLy8gWW91IGNhbiBlaXRoZXIgc2V0IGEgbmVzdGVkIHByb3BlcnR5IHdpdGggb25lIG9iamVjdAogICAgLy8gb3IgdXNlIGEgcHJvcGVydHkgcGF0aC4gCiAgICAvLyBUaGUgbW9zdCBzaW1wbGUgdXNlIGNhc2UgaXM6CiAgICAvLyBgY2VsbC5wcm9wKCduYW1lL2ZpcnN0JywgJ0pvaG4nKWAgb3IKICAgIC8vIGBjZWxsLnByb3AoeyBuYW1lOiB7IGZpcnN0OiAnSm9obicgfSB9KWAuCiAgICAvLyBOZXN0ZWQgYXJyYXlzIGFyZSBzdXBwb3J0ZWQgdG9vOgogICAgLy8gYGNlbGwucHJvcCgnc2VyaWVzLzAvZGF0YS8wL2RlZ3JlZScsIDUwKWAgb3IKICAgIC8vIGBjZWxsLnByb3AoeyBzZXJpZXM6IFsgeyBkYXRhOiBbIHsgZGVncmVlOiA1MCB9IF0gfSBdIH0pYC4KICAgIHByb3A6IGZ1bmN0aW9uKHByb3BzLCB2YWx1ZSwgb3B0KSB7CgogICAgICAgIHZhciBkZWxpbSA9ICcvJzsKCiAgICAgICAgaWYgKF8uaXNTdHJpbmcocHJvcHMpKSB7CiAgICAgICAgICAgIC8vIEdldC9zZXQgYW4gYXR0cmlidXRlIGJ5IGEgc3BlY2lhbCBwYXRoIHN5bnRheCB0aGF0IGRlbGltaXRzCiAgICAgICAgICAgIC8vIG5lc3RlZCBvYmplY3RzIGJ5IHRoZSBjb2xvbiBjaGFyYWN0ZXIuCgogICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykgewoKCQl2YXIgcGF0aCA9IHByb3BzOwoJCXZhciBwYXRoQXJyYXkgPSBwYXRoLnNwbGl0KCcvJyk7CgkJdmFyIHByb3BlcnR5ID0gcGF0aEFycmF5WzBdOwoKCSAgICAgICAgaWYgKHBhdGhBcnJheS5sZW5ndGggPT0gMSkgewogICAgICAgICAgICAgICAgICAgIC8vIFByb3BlcnR5IGlzIG5vdCBuZXN0ZWQuIFdlIGNhbiBzaW1wbHkgdXNlIGBzZXQoKWAuCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0KHByb3BlcnR5LCB2YWx1ZSwgb3B0KTsKICAgICAgICAgICAgICAgIH0KCgkJdmFyIHVwZGF0ZSA9IHt9OwoJCS8vIEluaXRpYWxpemUgdGhlIG5lc3RlZCBvYmplY3QuIFN1Ym9iamVjdHMgYXJlIGVpdGhlciBhcnJheXMgb3Igb2JqZWN0cy4KCQkvLyBBbiBlbXB0eSBhcnJheSBpcyBjcmVhdGVkIGlmIHRoZSBzdWIta2V5IGlzIGFuIGludGVnZXIuIE90aGVyd2lzZSwgYW4gZW1wdHkgb2JqZWN0IGlzIGNyZWF0ZWQuCgkJLy8gTm90ZSB0aGF0IHRoaXMgaW1wb3NlcyBhIGxpbWl0YXRpb24gb24gb2JqZWN0IGtleXMgb25lIGNhbiB1c2Ugd2l0aCBJbnNwZWN0b3IuCgkJLy8gUHVyZSBpbnRlZ2VyIGtleXMgd2lsbCBjYXVzZSBpc3N1ZXMgYW5kIGFyZSB0aGVyZWZvcmUgbm90IGFsbG93ZWQuCgkJdmFyIGluaXRpYWxpemVyID0gdXBkYXRlOwoJCXZhciBwcmV2UHJvcGVydHkgPSBwcm9wZXJ0eTsKCQlfLmVhY2goXy5yZXN0KHBhdGhBcnJheSksIGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVyID0gaW5pdGlhbGl6ZXJbcHJldlByb3BlcnR5XSA9IChfLmlzRmluaXRlKE51bWJlcihrZXkpKSA/IFtdIDoge30pOwogICAgICAgICAgICAgICAgICAgIHByZXZQcm9wZXJ0eSA9IGtleTsKCQl9KTsKCQkvLyBGaWxsIHVwZGF0ZSB3aXRoIHRoZSBgdmFsdWVgIG9uIGBwYXRoYC4KCQl1cGRhdGUgPSBqb2ludC51dGlsLnNldEJ5UGF0aCh1cGRhdGUsIHBhdGgsIHZhbHVlLCAnLycpOwoJCS8vIE1lcmdlIHVwZGF0ZSB3aXRoIHRoZSBtb2RlbCBhdHRyaWJ1dGVzLgoJCXZhciBhdHRyaWJ1dGVzID0gXy5tZXJnZSh7fSwgdGhpcy5hdHRyaWJ1dGVzLCB1cGRhdGUpOwoJCS8vIEZpbmFsbHksIHNldCB0aGUgcHJvcGVydHkgdG8gdGhlIHVwZGF0ZWQgYXR0cmlidXRlcy4KCQlyZXR1cm4gdGhpcy5zZXQocHJvcGVydHksIGF0dHJpYnV0ZXNbcHJvcGVydHldLCBvcHQpOwoKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICByZXR1cm4gam9pbnQudXRpbC5nZXRCeVBhdGgodGhpcy5hdHRyaWJ1dGVzLCBwcm9wcywgZGVsaW0pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpcy5zZXQoXy5tZXJnZSh7fSwgdGhpcy5hdHRyaWJ1dGVzLCBwcm9wcyksIHZhbHVlKTsKICAgIH0sCgogICAgLy8gQSBjb252ZW5pZW50IHdheSB0byBzZXQgbmVzdGVkIGF0dHJpYnV0ZXMuCiAgICBhdHRyOiBmdW5jdGlvbihhdHRycywgdmFsdWUsIG9wdCkgewoKICAgICAgICB2YXIgY3VycmVudEF0dHJzID0gdGhpcy5nZXQoJ2F0dHJzJyk7CiAgICAgICAgdmFyIGRlbGltID0gJy8nOwogICAgICAgIAogICAgICAgIGlmIChfLmlzU3RyaW5nKGF0dHJzKSkgewogICAgICAgICAgICAvLyBHZXQvc2V0IGFuIGF0dHJpYnV0ZSBieSBhIHNwZWNpYWwgcGF0aCBzeW50YXggdGhhdCBkZWxpbWl0cwogICAgICAgICAgICAvLyBuZXN0ZWQgb2JqZWN0cyBieSB0aGUgY29sb24gY2hhcmFjdGVyLgoKICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAndW5kZWZpbmVkJykgewoKICAgICAgICAgICAgICAgIHZhciBhdHRyID0ge307CiAgICAgICAgICAgICAgICBqb2ludC51dGlsLnNldEJ5UGF0aChhdHRyLCBhdHRycywgdmFsdWUsIGRlbGltKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldCgnYXR0cnMnLCBfLm1lcmdlKHt9LCBjdXJyZW50QXR0cnMsIGF0dHIpLCBvcHQpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiBqb2ludC51dGlsLmdldEJ5UGF0aChjdXJyZW50QXR0cnMsIGF0dHJzLCBkZWxpbSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHRoaXMuc2V0KCdhdHRycycsIF8ubWVyZ2Uoe30sIGN1cnJlbnRBdHRycywgYXR0cnMpLCB2YWx1ZSwgb3B0KTsKICAgIH0sCgogICAgLy8gQSBjb252ZW5pZW50IHdheSB0byB1bnNldCBuZXN0ZWQgYXR0cmlidXRlcwogICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24ocGF0aCwgb3B0KSB7CgogICAgICAgIGlmIChfLmlzQXJyYXkocGF0aCkpIHsKICAgICAgICAgICAgXy5lYWNoKHBhdGgsIGZ1bmN0aW9uKHApIHsgdGhpcy5yZW1vdmVBdHRyKHAsIG9wdCk7IH0sIHRoaXMpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgdmFyIGF0dHJzID0gam9pbnQudXRpbC51bnNldEJ5UGF0aChfLm1lcmdlKHt9LCB0aGlzLmdldCgnYXR0cnMnKSksIHBhdGgsICcvJyk7CgogICAgICAgIHJldHVybiB0aGlzLnNldCgnYXR0cnMnLCBhdHRycywgXy5leHRlbmQoeyBkaXJ0eTogdHJ1ZSB9LCBvcHQpKTsKICAgIH0sCgogICAgdHJhbnNpdGlvbjogZnVuY3Rpb24ocGF0aCwgdmFsdWUsIG9wdCwgZGVsaW0pIHsKCglkZWxpbSA9IGRlbGltIHx8ICcvJzsKCgl2YXIgZGVmYXVsdHMgPSB7CgkgICAgZHVyYXRpb246IDEwMCwKCSAgICBkZWxheTogMTAsCgkgICAgdGltaW5nRnVuY3Rpb246IGpvaW50LnV0aWwudGltaW5nLmxpbmVhciwKCSAgICB2YWx1ZUZ1bmN0aW9uOiBqb2ludC51dGlsLmludGVycG9sYXRlLm51bWJlcgoJfTsKCglvcHQgPSBfLmV4dGVuZChkZWZhdWx0cywgb3B0KTsKCgl2YXIgZmlyc3RGcmFtZVRpbWUgPSAwOwoJdmFyIGludGVycG9sYXRpbmdGdW5jdGlvbjsKCgl2YXIgc2V0dGVyID0gXy5iaW5kKGZ1bmN0aW9uKHJ1bnRpbWUpIHsKCgkgICAgdmFyIGlkLCBwcm9ncmVzcywgcHJvcGVydHlWYWx1ZSwgc3RhdHVzOwoKCSAgICBmaXJzdEZyYW1lVGltZSA9IGZpcnN0RnJhbWVUaW1lIHx8IHJ1bnRpbWU7CgkgICAgcnVudGltZSAtPSBmaXJzdEZyYW1lVGltZTsKCSAgICBwcm9ncmVzcyA9IHJ1bnRpbWUgLyBvcHQuZHVyYXRpb247CgoJICAgIGlmIChwcm9ncmVzcyA8IDEpIHsKCQl0aGlzLl90cmFuc2l0aW9uSWRzW3BhdGhdID0gaWQgPSBqb2ludC51dGlsLm5leHRGcmFtZShzZXR0ZXIpOwoJICAgIH0gZWxzZSB7CgkJcHJvZ3Jlc3MgPSAxOwoJCWRlbGV0ZSB0aGlzLl90cmFuc2l0aW9uSWRzW3BhdGhdOwoJICAgIH0KCgkgICAgcHJvcGVydHlWYWx1ZSA9IGludGVycG9sYXRpbmdGdW5jdGlvbihvcHQudGltaW5nRnVuY3Rpb24ocHJvZ3Jlc3MpKTsKCgkgICAgb3B0LnRyYW5zaXRpb25JZCA9IGlkOwoKCSAgICB0aGlzLnByb3AocGF0aCwgcHJvcGVydHlWYWx1ZSwgb3B0KTsKCgkgICAgaWYgKCFpZCkgdGhpcy50cmlnZ2VyKCd0cmFuc2l0aW9uOmVuZCcsIHRoaXMsIHBhdGgpOwoKCX0sIHRoaXMpOwoKCXZhciBpbml0aWF0b3IgPV8uYmluZChmdW5jdGlvbihjYWxsYmFjaykgewoKCSAgICB0aGlzLnN0b3BUcmFuc2l0aW9ucyhwYXRoKTsKCgkgICAgaW50ZXJwb2xhdGluZ0Z1bmN0aW9uID0gb3B0LnZhbHVlRnVuY3Rpb24oam9pbnQudXRpbC5nZXRCeVBhdGgodGhpcy5hdHRyaWJ1dGVzLCBwYXRoLCBkZWxpbSksIHZhbHVlKTsKCgkgICAgdGhpcy5fdHJhbnNpdGlvbklkc1twYXRoXSA9IGpvaW50LnV0aWwubmV4dEZyYW1lKGNhbGxiYWNrKTsKCgkgICAgdGhpcy50cmlnZ2VyKCd0cmFuc2l0aW9uOnN0YXJ0JywgdGhpcywgcGF0aCk7CgoJfSwgdGhpcyk7CgoJcmV0dXJuIF8uZGVsYXkoaW5pdGlhdG9yLCBvcHQuZGVsYXksIHNldHRlcik7CiAgICB9LAoKICAgIGdldFRyYW5zaXRpb25zOiBmdW5jdGlvbigpIHsKCXJldHVybiBfLmtleXModGhpcy5fdHJhbnNpdGlvbklkcyk7CiAgICB9LAoKICAgIHN0b3BUcmFuc2l0aW9uczogZnVuY3Rpb24ocGF0aCwgZGVsaW0pIHsKCglkZWxpbSA9IGRlbGltIHx8ICcvJzsKCgl2YXIgcGF0aEFycmF5ID0gcGF0aCAmJiBwYXRoLnNwbGl0KGRlbGltKTsKCglfKHRoaXMuX3RyYW5zaXRpb25JZHMpLmtleXMoKS5maWx0ZXIocGF0aEFycmF5ICYmIGZ1bmN0aW9uKGtleSkgewoKCSAgICByZXR1cm4gXy5pc0VxdWFsKHBhdGhBcnJheSwga2V5LnNwbGl0KGRlbGltKS5zbGljZSgwLCBwYXRoQXJyYXkubGVuZ3RoKSk7CgoJfSkuZWFjaChmdW5jdGlvbihrZXkpIHsKCgkgICAgam9pbnQudXRpbC5jYW5jZWxGcmFtZSh0aGlzLl90cmFuc2l0aW9uSWRzW2tleV0pOwoKCSAgICBkZWxldGUgdGhpcy5fdHJhbnNpdGlvbklkc1trZXldOwoKCSAgICB0aGlzLnRyaWdnZXIoJ3RyYW5zaXRpb246ZW5kJywgdGhpcywga2V5KTsKCgl9LCB0aGlzKTsKCglyZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gQSBzaG9yY3V0IG1ha2luZyBpdCBlYXN5IHRvIGNyZWF0ZSBjb25zdHJ1Y3RzIGxpa2UgdGhlIGZvbGxvd2luZzoKICAgIC8vIGB2YXIgZWwgPSAobmV3IGpvaW50LnNoYXBlcy5iYXNpYy5SZWN0KS5hZGRUbyhncmFwaClgLgogICAgYWRkVG86IGZ1bmN0aW9uKGdyYXBoKSB7CgoJZ3JhcGguYWRkQ2VsbCh0aGlzKTsKCXJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBBIHNob3J0Y3V0IGZvciBhbiBlcXVpdmFsZW50IGNhbGw6IGBwYXBlci5maW5kVmlld0J5TW9kZWwoY2VsbClgCiAgICAvLyBtYWtpbmcgaXQgZWFzeSB0byBjcmVhdGUgY29uc3RydWN0cyBsaWtlIHRoZSBmb2xsb3dpbmc6CiAgICAvLyBgY2VsbC5maW5kVmlldyhwYXBlcikuaGlnaGxpZ2h0KClgCiAgICBmaW5kVmlldzogZnVuY3Rpb24ocGFwZXIpIHsKCiAgICAgICAgcmV0dXJuIHBhcGVyLmZpbmRWaWV3QnlNb2RlbCh0aGlzKTsKICAgIH0KfSk7CgovLyBqb2ludC5kaWEuQ2VsbFZpZXcgYmFzZSB2aWV3IGFuZCBjb250cm9sbGVyLgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKLy8gVGhpcyBpcyB0aGUgYmFzZSB2aWV3IGFuZCBjb250cm9sbGVyIGZvciBgam9pbnQuZGlhLkVsZW1lbnRWaWV3YCBhbmQgYGpvaW50LmRpYS5MaW5rVmlld2AuCgpqb2ludC5kaWEuQ2VsbFZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7CgogICAgdGFnTmFtZTogJ2cnLAoKICAgIGF0dHJpYnV0ZXM6IGZ1bmN0aW9uKCkgewoKICAgICAgICByZXR1cm4geyAnbW9kZWwtaWQnOiB0aGlzLm1vZGVsLmlkIH0KICAgIH0sCgogICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKCgl0aGlzLl9jb25maWd1cmUob3B0aW9ucyk7CglCYWNrYm9uZS5WaWV3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9LAoKICAgIF9jb25maWd1cmU6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKCglpZiAodGhpcy5vcHRpb25zKSBvcHRpb25zID0gXy5leHRlbmQoe30sIF8ucmVzdWx0KHRoaXMsICdvcHRpb25zJyksIG9wdGlvbnMpOwoJdGhpcy5vcHRpb25zID0gb3B0aW9uczsKICAgICAgICAvLyBNYWtlIHN1cmUgYSBnbG9iYWwgdW5pcXVlIGlkIGlzIGFzc2lnbmVkIHRvIHRoaXMgdmlldy4gU3RvcmUgdGhpcyBpZCBhbHNvIHRvIHRoZSBwcm9wZXJ0aWVzIG9iamVjdC4KICAgICAgICAvLyBUaGUgZ2xvYmFsIHVuaXF1ZSBpZCBtYWtlcyBzdXJlIHRoYXQgdGhlIHNhbWUgdmlldyBjYW4gYmUgcmVuZGVyZWQgb24gZS5nLiBkaWZmZXJlbnQgbWFjaGluZXMgYW5kCiAgICAgICAgLy8gc3RpbGwgYmUgYXNzb2NpYXRlZCB0byB0aGUgc2FtZSBvYmplY3QgYW1vbmcgYWxsIHRob3NlIGNsaWVudHMuIFRoaXMgaXMgbmVjZXNzYXJ5IGZvciByZWFsLXRpbWUKICAgICAgICAvLyBjb2xsYWJvcmF0aW9uIG1lY2hhbmlzbS4KICAgICAgICB0aGlzLm9wdGlvbnMuaWQgPSB0aGlzLm9wdGlvbnMuaWQgfHwgam9pbnQudXRpbC5ndWlkKHRoaXMpOwogICAgfSwKCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHsKCiAgICAgICAgXy5iaW5kQWxsKHRoaXMsICdyZW1vdmUnLCAndXBkYXRlJyk7CgogICAgICAgIC8vIFN0b3JlIHJlZmVyZW5jZSB0byB0aGlzIHRvIHRoZSA8Zz4gRE9NIGVsZW1lbnQgc28gdGhhdCB0aGUgdmlldyBpcyBhY2Nlc3NpYmxlIHRocm91Z2ggdGhlIERPTSB0cmVlLgogICAgICAgIHRoaXMuJGVsLmRhdGEoJ3ZpZXcnLCB0aGlzKTsKCgl0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsICdyZW1vdmUnLCB0aGlzLnJlbW92ZSk7Cgl0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsICdjaGFuZ2U6YXR0cnMnLCB0aGlzLm9uQ2hhbmdlQXR0cnMpOwogICAgfSwKCiAgICBvbkNoYW5nZUF0dHJzOiBmdW5jdGlvbihjZWxsLCBhdHRycywgb3B0KSB7CgogICAgICAgIGlmIChvcHQuZGlydHkpIHsKCiAgICAgICAgICAgIC8vIGRpcnR5IGZsYWcgY291bGQgYmUgc2V0IHdoZW4gYSBtb2RlbCBhdHRyaWJ1dGUgd2FzIHJlbW92ZWQgYW5kIGl0IG5lZWRzIHRvIGJlIGNsZWFyZWQKICAgICAgICAgICAgLy8gYWxzbyBmcm9tIHRoZSBET00gZWxlbWVudC4gU2VlIGNlbGwucmVtb3ZlQXR0cigpLgogICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIoKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZSgpOwogICAgfSwKCiAgICAvLyBPdmVycmlkZSB0aGUgQmFja2JvbmUgYF9lbnN1cmVFbGVtZW50KClgIG1ldGhvZCBpbiBvcmRlciB0byBjcmVhdGUgYSBgPGc+YCBub2RlIHRoYXQgd3JhcHMKICAgIC8vIGFsbCB0aGUgbm9kZXMgb2YgdGhlIENlbGwgdmlldy4KICAgIF9lbnN1cmVFbGVtZW50OiBmdW5jdGlvbigpIHsKCiAgICAgICAgdmFyIGVsOwoKICAgICAgICBpZiAoIXRoaXMuZWwpIHsKCiAgICAgICAgICAgIHZhciBhdHRycyA9IF8uZXh0ZW5kKHsgaWQ6IHRoaXMuaWQgfSwgXy5yZXN1bHQodGhpcywgJ2F0dHJpYnV0ZXMnKSk7CiAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZSkgYXR0cnNbJ2NsYXNzJ10gPSBfLnJlc3VsdCh0aGlzLCAnY2xhc3NOYW1lJyk7CiAgICAgICAgICAgIGVsID0gVihfLnJlc3VsdCh0aGlzLCAndGFnTmFtZScpLCBhdHRycykubm9kZTsKCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIGVsID0gXy5yZXN1bHQodGhpcywgJ2VsJykKICAgICAgICB9CgogICAgICAgIHRoaXMuc2V0RWxlbWVudChlbCwgZmFsc2UpOwogICAgfSwKICAgIAogICAgZmluZEJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CgogICAgICAgIC8vIFRoZXNlIGFyZSBlaXRoZXIgZGVzY2VuZGFudHMgb2YgYHRoaXMuJGVsYCBvZiBgdGhpcy4kZWxgIGl0c2VsZi4gCiAgICAgICAvLyBgLmAgaXMgYSBzcGVjaWFsIHNlbGVjdG9yIHVzZWQgdG8gc2VsZWN0IHRoZSB3cmFwcGluZyBgPGc+YCBlbGVtZW50LgogICAgICAgIHZhciAkc2VsZWN0ZWQgPSBzZWxlY3RvciA9PT0gJy4nID8gdGhpcy4kZWwgOiB0aGlzLiRlbC5maW5kKHNlbGVjdG9yKTsKICAgICAgICByZXR1cm4gJHNlbGVjdGVkOwogICAgfSwKCiAgICBub3RpZnk6IGZ1bmN0aW9uKGV2dCkgewoKICAgICAgICBpZiAodGhpcy5wYXBlcikgewoKICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwoKICAgICAgICAgICAgLy8gVHJpZ2dlciB0aGUgZXZlbnQgb24gYm90aCB0aGUgZWxlbWVudCBpdHNlbGYgYW5kIGFsc28gb24gdGhlIHBhcGVyLgogICAgICAgICAgICB0aGlzLnRyaWdnZXIuYXBwbHkodGhpcywgW2V2dF0uY29uY2F0KGFyZ3MpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFBhcGVyIGV2ZW50IGhhbmRsZXJzIHJlY2VpdmUgdGhlIHZpZXcgb2JqZWN0IGFzIHRoZSBmaXJzdCBhcmd1bWVudC4KICAgICAgICAgICAgdGhpcy5wYXBlci50cmlnZ2VyLmFwcGx5KHRoaXMucGFwZXIsIFtldnQsIHRoaXNdLmNvbmNhdChhcmdzKSk7CiAgICAgICAgfQogICAgfSwKCiAgICBnZXRTdHJva2VCQm94OiBmdW5jdGlvbihlbCkgewogICAgICAgIC8vIFJldHVybiBhIGJvdW5kaW5nIGJveCByZWN0YW5nbGUgdGhhdCB0YWtlcyBpbnRvIGFjY291bnQgc3Ryb2tlLgogICAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIGlzIGEgbmFpdmUgYW5kIGFkLWhvYyBpbXBsZW1lbnRhdGlvbiB0aGF0IGRvZXMgbm90CiAgICAgICAgLy8gd29ya3Mgb25seSBpbiBjZXJ0YWluIGNhc2VzIGFuZCBzaG91bGQgYmUgcmVwbGFjZWQgYXMgc29vbiBhcyBicm93c2VycyB3aWxsCiAgICAgICAgLy8gc3RhcnQgc3VwcG9ydGluZyB0aGUgZ2V0U3Ryb2tlQkJveCgpIFNWRyBtZXRob2QuCiAgICAgICAgLy8gQFRPRE8gYW55IGJldHRlciBzb2x1dGlvbiBpcyB2ZXJ5IHdlbGNvbWUhCgogICAgICAgIHZhciBpc01hZ25ldCA9ICEhZWw7CiAgICAgICAgCiAgICAgICAgZWwgPSBlbCB8fCB0aGlzLmVsOwogICAgICAgIHZhciBiYm94ID0gVihlbCkuYmJveChmYWxzZSwgdGhpcy5wYXBlci52aWV3cG9ydCk7CgogICAgICAgIHZhciBzdHJva2VXaWR0aDsKICAgICAgICBpZiAoaXNNYWduZXQpIHsKCiAgICAgICAgICAgIHN0cm9rZVdpZHRoID0gVihlbCkuYXR0cignc3Ryb2tlLXdpZHRoJyk7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICBzdHJva2VXaWR0aCA9IHRoaXMubW9kZWwuYXR0cigncmVjdC9zdHJva2Utd2lkdGgnKSB8fCB0aGlzLm1vZGVsLmF0dHIoJ2NpcmNsZS9zdHJva2Utd2lkdGgnKSB8fCB0aGlzLm1vZGVsLmF0dHIoJ2VsbGlwc2Uvc3Ryb2tlLXdpZHRoJykgfHwgdGhpcy5tb2RlbC5hdHRyKCdwYXRoL3N0cm9rZS13aWR0aCcpOwogICAgICAgIH0KCiAgICAgICAgc3Ryb2tlV2lkdGggPSBwYXJzZUZsb2F0KHN0cm9rZVdpZHRoKSB8fCAwOwoKICAgICAgICByZXR1cm4gZy5yZWN0KGJib3gpLm1vdmVBbmRFeHBhbmQoeyB4OiAtc3Ryb2tlV2lkdGgvMiwgeTogLXN0cm9rZVdpZHRoLzIsIHdpZHRoOiBzdHJva2VXaWR0aCwgaGVpZ2h0OiBzdHJva2VXaWR0aCB9KTsKICAgIH0sCiAgICAKICAgIGdldEJCb3g6IGZ1bmN0aW9uKCkgewoKICAgICAgICByZXR1cm4gVih0aGlzLmVsKS5iYm94KCk7CiAgICB9LAoKICAgIGhpZ2hsaWdodDogZnVuY3Rpb24oZWwpIHsKCiAgICAgICAgZWwgPSAhZWwgPyB0aGlzLmVsIDogdGhpcy4kKGVsKVswXSB8fCB0aGlzLmVsOwoKICAgICAgICBWKGVsKS5hZGRDbGFzcygnaGlnaGxpZ2h0ZWQnKTsKICAgIH0sCgogICAgdW5oaWdobGlnaHQ6IGZ1bmN0aW9uKGVsKSB7CgogICAgICAgIGVsID0gIWVsID8gdGhpcy5lbCA6IHRoaXMuJChlbClbMF0gfHwgdGhpcy5lbDsKCiAgICAgICAgVihlbCkucmVtb3ZlQ2xhc3MoJ2hpZ2hsaWdodGVkJyk7CiAgICB9LAoKICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGhhcyB0aGUgYG1hZ25ldGAgYXR0cmlidXRlIHNldCB0byBgdHJ1ZWAuIElmIHRoZXJlIHdhcyBub3Qgc3VjaAogICAgLy8gYW4gZWxlbWVudCBmb3VuZCwgcmV0dXJuIHRoZSByb290IGVsZW1lbnQgb2YgdGhlIGNlbGwgdmlldy4KICAgIGZpbmRNYWduZXQ6IGZ1bmN0aW9uKGVsKSB7CgogICAgICAgIHZhciAkZWwgPSB0aGlzLiQoZWwpOwoKICAgICAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCB8fCAkZWxbMF0gPT09IHRoaXMuZWwpIHsKCiAgICAgICAgICAgIC8vIElmIHRoZSBvdmVyYWxsIGNlbGwgaGFzIHNldCBgbWFnbmV0ID09PSBmYWxzZWAsIHRoZW4gcmV0dXJuIGB1bmRlZmluZWRgIHRvCiAgICAgICAgICAgIC8vIGFubm91bmNlIHRoZXJlIGlzIG5vIG1hZ25ldCBmb3VuZCBmb3IgdGhpcyBjZWxsLgogICAgICAgICAgICAvLyBUaGlzIGlzIGVzcGVjaWFsbHkgdXNlZnVsIHRvIHNldCBvbiBjZWxscyB0aGF0IGhhdmUgJ3BvcnRzJy4gSW4gdGhpcyBjYXNlLAogICAgICAgICAgICAvLyBvbmx5IHRoZSBwb3J0cyBoYXZlIHNldCBgbWFnbmV0ID09PSB0cnVlYCBhbmQgdGhlIG92ZXJhbGwgZWxlbWVudCBoYXMgYG1hZ25ldCA9PT0gZmFsc2VgLgogICAgICAgICAgICB2YXIgYXR0cnMgPSB0aGlzLm1vZGVsLmdldCgnYXR0cnMnKSB8fCB7fTsKICAgICAgICAgICAgaWYgKGF0dHJzWycuJ10gJiYgYXR0cnNbJy4nXVsnbWFnbmV0J10gPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpcy5lbDsKICAgICAgICB9CgogICAgICAgIGlmICgkZWwuYXR0cignbWFnbmV0JykpIHsKCiAgICAgICAgICAgIHJldHVybiAkZWxbMF07CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpcy5maW5kTWFnbmV0KCRlbC5wYXJlbnQoKSk7CiAgICB9LAoKICAgIC8vIGBzZWxlY3RvcmAgaXMgYSBDU1Mgc2VsZWN0b3Igb3IgYCcuJ2AuIGBmaWx0ZXJgIG11c3QgYmUgaW4gdGhlIHNwZWNpYWwgSm9pbnRKUyBmaWx0ZXIgZm9ybWF0OgogICAgLy8gYHsgbmFtZTogPG5hbWUgb2YgdGhlIGZpbHRlcj4sIGFyZ3M6IHsgPGFyZ3VtZW50cz4sIC4uLiB9YC4KICAgIC8vIEFuIGV4YW1wbGUgaXM6IGB7IGZpbHRlcjogeyBuYW1lOiAnYmx1cicsIGFyZ3M6IHsgcmFkaXVzOiA1IH0gfSB9YC4KICAgIGFwcGx5RmlsdGVyOiBmdW5jdGlvbihzZWxlY3RvciwgZmlsdGVyKSB7CgogICAgICAgIHZhciAkc2VsZWN0ZWQgPSB0aGlzLmZpbmRCeVNlbGVjdG9yKHNlbGVjdG9yKTsKCiAgICAgICAgLy8gR2VuZXJhdGUgYSBoYXNoIGNvZGUgZnJvbSB0aGUgc3RyaW5naWZpZWQgZmlsdGVyIGRlZmluaXRpb24uIFRoaXMgZ2l2ZXMgdXMKICAgICAgICAvLyBhIHVuaXF1ZSBmaWx0ZXIgSUQgZm9yIGRpZmZlcmVudCBkZWZpbml0aW9ucy4KICAgICAgICB2YXIgZmlsdGVySWQgPSBmaWx0ZXIubmFtZSArIHRoaXMucGFwZXIuc3ZnLmlkICsgam9pbnQudXRpbC5oYXNoQ29kZShKU09OLnN0cmluZ2lmeShmaWx0ZXIpKTsKCiAgICAgICAgLy8gSWYgdGhlIGZpbHRlciBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgZG9jdW1lbnQsCiAgICAgICAgLy8gd2UncmUgZG9uZSBhbmQgd2UgY2FuIGp1c3QgdXNlIGl0IChyZWZlcmVuY2UgaXQgdXNpbmcgYHVybCgpYCkuCiAgICAgICAgLy8gSWYgbm90LCBjcmVhdGUgb25lLgogICAgICAgIGlmICghdGhpcy5wYXBlci5zdmcuZ2V0RWxlbWVudEJ5SWQoZmlsdGVySWQpKSB7CgogICAgICAgICAgICB2YXIgZmlsdGVyU1ZHU3RyaW5nID0gam9pbnQudXRpbC5maWx0ZXJbZmlsdGVyLm5hbWVdICYmIGpvaW50LnV0aWwuZmlsdGVyW2ZpbHRlci5uYW1lXShmaWx0ZXIuYXJncyB8fCB7fSk7CiAgICAgICAgICAgIGlmICghZmlsdGVyU1ZHU3RyaW5nKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbi1leGlzdGluZyBmaWx0ZXIgJyArIGZpbHRlci5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgZmlsdGVyRWxlbWVudCA9IFYoZmlsdGVyU1ZHU3RyaW5nKTsKCSAgICAvLyBTZXQgdGhlIGZpbHRlciBhcmVhIHRvIGJlIDN4IHRoZSBib3VuZGluZyBib3ggb2YgdGhlIGNlbGwKCSAgICAvLyBhbmQgY2VudGVyIHRoZSBmaWx0ZXIgYXJvdW5kIHRoZSBjZWxsLgoJICAgIGZpbHRlckVsZW1lbnQuYXR0cih7CgkJZmlsdGVyVW5pdHM6ICdvYmplY3RCb3VuZGluZ0JveCcsCgkJeDogLTEsIHk6IC0xLCB3aWR0aDogMywgaGVpZ2h0OiAzCgkgICAgfSk7CiAgICAgICAgICAgIGlmIChmaWx0ZXIuYXR0cnMpIGZpbHRlckVsZW1lbnQuYXR0cihmaWx0ZXIuYXR0cnMpOwogICAgICAgICAgICBmaWx0ZXJFbGVtZW50Lm5vZGUuaWQgPSBmaWx0ZXJJZDsKICAgICAgICAgICAgVih0aGlzLnBhcGVyLnN2ZykuZGVmcygpLmFwcGVuZChmaWx0ZXJFbGVtZW50KTsKICAgICAgICB9CgogICAgICAgICRzZWxlY3RlZC5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAKICAgICAgICAgICAgVih0aGlzKS5hdHRyKCdmaWx0ZXInLCAndXJsKCMnICsgZmlsdGVySWQgKyAnKScpOwogICAgICAgIH0pOwogICAgfSwKCiAgICAvLyBgc2VsZWN0b3JgIGlzIGEgQ1NTIHNlbGVjdG9yIG9yIGAnLidgLiBgYXR0cmAgaXMgZWl0aGVyIGEgYCdmaWxsJ2Agb3IgYCdzdHJva2UnYC4KICAgIC8vIGBncmFkaWVudGAgbXVzdCBiZSBpbiB0aGUgc3BlY2lhbCBKb2ludEpTIGdyYWRpZW50IGZvcm1hdDoKICAgIC8vIGB7IHR5cGU6IDxsaW5lYXJHcmFkaWVudHxyYWRpYWxHcmFkaWVudD4sIHN0b3BzOiBbIHsgb2Zmc2V0OiA8b2Zmc2V0PiwgY29sb3I6IDxjb2xvcj4gfSwgLi4uIF1gLgogICAgLy8gQW4gZXhhbXBsZSBpczogYHsgZmlsbDogeyB0eXBlOiAnbGluZWFyR3JhZGllbnQnLCBzdG9wczogWyB7IG9mZnNldDogJzEwJScsIGNvbG9yOiAnZ3JlZW4nIH0sIHsgb2Zmc2V0OiAnNTAlJywgY29sb3I6ICdibHVlJyB9IF0gfSB9YC4KICAgIGFwcGx5R3JhZGllbnQ6IGZ1bmN0aW9uKHNlbGVjdG9yLCBhdHRyLCBncmFkaWVudCkgewoKICAgICAgICB2YXIgJHNlbGVjdGVkID0gdGhpcy5maW5kQnlTZWxlY3RvcihzZWxlY3Rvcik7CgogICAgICAgIC8vIEdlbmVyYXRlIGEgaGFzaCBjb2RlIGZyb20gdGhlIHN0cmluZ2lmaWVkIGZpbHRlciBkZWZpbml0aW9uLiBUaGlzIGdpdmVzIHVzCiAgICAgICAgLy8gYSB1bmlxdWUgZmlsdGVyIElEIGZvciBkaWZmZXJlbnQgZGVmaW5pdGlvbnMuCiAgICAgICAgdmFyIGdyYWRpZW50SWQgPSBncmFkaWVudC50eXBlICsgdGhpcy5wYXBlci5zdmcuaWQgKyBqb2ludC51dGlsLmhhc2hDb2RlKEpTT04uc3RyaW5naWZ5KGdyYWRpZW50KSk7CgogICAgICAgIC8vIElmIHRoZSBncmFkaWVudCBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgZG9jdW1lbnQsCiAgICAgICAgLy8gd2UncmUgZG9uZSBhbmQgd2UgY2FuIGp1c3QgdXNlIGl0IChyZWZlcmVuY2UgaXQgdXNpbmcgYHVybCgpYCkuCiAgICAgICAgLy8gSWYgbm90LCBjcmVhdGUgb25lLgogICAgICAgIGlmICghdGhpcy5wYXBlci5zdmcuZ2V0RWxlbWVudEJ5SWQoZ3JhZGllbnRJZCkpIHsKCiAgICAgICAgICAgIHZhciBncmFkaWVudFNWR1N0cmluZyA9IFsKICAgICAgICAgICAgICAgICc8JyArIGdyYWRpZW50LnR5cGUgKyAnPicsCiAgICAgICAgICAgICAgICBfLm1hcChncmFkaWVudC5zdG9wcywgZnVuY3Rpb24oc3RvcCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAnPHN0b3Agb2Zmc2V0PSInICsgc3RvcC5vZmZzZXQgKyAnIiBzdG9wLWNvbG9yPSInICsgc3RvcC5jb2xvciArICciIHN0b3Atb3BhY2l0eT0iJyArIChfLmlzRmluaXRlKHN0b3Aub3BhY2l0eSkgPyBzdG9wLm9wYWNpdHkgOiAxKSArICciIC8+JwogICAgICAgICAgICAgICAgfSkuam9pbignJyksCiAgICAgICAgICAgICAgICAnPC8nICsgZ3JhZGllbnQudHlwZSArICc+JwogICAgICAgICAgICBdLmpvaW4oJycpOwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIGdyYWRpZW50RWxlbWVudCA9IFYoZ3JhZGllbnRTVkdTdHJpbmcpOwogICAgICAgICAgICBpZiAoZ3JhZGllbnQuYXR0cnMpIHsgZ3JhZGllbnRFbGVtZW50LmF0dHIoZ3JhZGllbnQuYXR0cnMpOyB9CiAgICAgICAgICAgIGdyYWRpZW50RWxlbWVudC5ub2RlLmlkID0gZ3JhZGllbnRJZDsKICAgICAgICAgICAgVih0aGlzLnBhcGVyLnN2ZykuZGVmcygpLmFwcGVuZChncmFkaWVudEVsZW1lbnQpOwogICAgICAgIH0KCiAgICAgICAgJHNlbGVjdGVkLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBWKHRoaXMpLmF0dHIoYXR0ciwgJ3VybCgjJyArIGdyYWRpZW50SWQgKyAnKScpOwogICAgICAgIH0pOwogICAgfSwKCiAgICAvLyBDb25zdHJ1Y3QgYSB1bmlxdWUgc2VsZWN0b3IgZm9yIHRoZSBgZWxgIGVsZW1lbnQgd2l0aGluIHRoaXMgdmlldy4KICAgIC8vIGBzZWxlY3RvcmAgaXMgYmVpbmcgY29sbGVjdGVkIHRocm91Z2ggdGhlIHJlY3Vyc2l2ZSBjYWxsLiBObyB2YWx1ZSBmb3IgYHNlbGVjdG9yYCBpcyBleHBlY3RlZCB3aGVuIHVzaW5nIHRoaXMgbWV0aG9kLgogICAgZ2V0U2VsZWN0b3I6IGZ1bmN0aW9uKGVsLCBzZWxlY3RvcikgewoKICAgICAgICBpZiAoZWwgPT09IHRoaXMuZWwpIHsKCiAgICAgICAgICAgIHJldHVybiBzZWxlY3RvcjsKICAgICAgICB9CgogICAgICAgIHZhciBpbmRleCA9ICQoZWwpLmluZGV4KCk7CgogICAgICAgIHNlbGVjdG9yID0gZWwudGFnTmFtZSArICc6bnRoLWNoaWxkKCcgKyAoaW5kZXggKyAxKSArICcpJyArICcgJyArIChzZWxlY3RvciB8fCAnJyk7CgogICAgICAgIHJldHVybiB0aGlzLmdldFNlbGVjdG9yKCQoZWwpLnBhcmVudCgpWzBdLCBzZWxlY3RvciArICcgJyk7CiAgICB9LAoKICAgIC8vIEludGVyYWN0aW9uLiBUaGUgY29udHJvbGxlciBwYXJ0LgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgLy8gSW50ZXJhY3Rpb24gaXMgaGFuZGxlZCBieSB0aGUgcGFwZXIgYW5kIGRlbGVnYXRlZCB0byB0aGUgdmlldyBpbiBpbnRlcmVzdC4KICAgIC8vIGB4YCAmIGB5YCBwYXJhbWV0ZXJzIHBhc3NlZCB0byB0aGVzZSBmdW5jdGlvbnMgcmVwcmVzZW50IHRoZSBjb29yZGluYXRlcyBhbHJlYWR5IHNuYXBwZWQgdG8gdGhlIHBhcGVyIGdyaWQuCiAgICAvLyBJZiBuZWNlc3NhcnksIHJlYWwgY29vcmRpbmF0ZXMgY2FuIGJlIG9idGFpbmVkIGZyb20gdGhlIGBldnRgIGV2ZW50IG9iamVjdC4KCiAgICAvLyBUaGVzZSBmdW5jdGlvbnMgYXJlIHN1cHBvc2VkIHRvIGJlIG92ZXJyaWRlbiBieSB0aGUgdmlld3MgdGhhdCBpbmhlcml0IGZyb20gYGpvaW50LmRpYS5DZWxsYCwKICAgIC8vIGkuZS4gYGpvaW50LmRpYS5FbGVtZW50YCBhbmQgYGpvaW50LmRpYS5MaW5rYC4KCiAgICBwb2ludGVyZGJsY2xpY2s6IGZ1bmN0aW9uKGV2dCwgeCwgeSkgewoKICAgICAgICB0aGlzLm5vdGlmeSgnY2VsbDpwb2ludGVyZGJsY2xpY2snLCBldnQsIHgsIHkpOwogICAgfSwKCiAgICBwb2ludGVyY2xpY2s6IGZ1bmN0aW9uKGV2dCwgeCwgeSkgewoKICAgICAgICB0aGlzLm5vdGlmeSgnY2VsbDpwb2ludGVyY2xpY2snLCBldnQsIHgsIHkpOwogICAgfSwKICAgIAogICAgcG9pbnRlcmRvd246IGZ1bmN0aW9uKGV2dCwgeCwgeSkgewoKCWlmICh0aGlzLm1vZGVsLmNvbGxlY3Rpb24pIHsKCSAgICB0aGlzLm1vZGVsLnRyaWdnZXIoJ2JhdGNoOnN0YXJ0Jyk7CgkgICAgdGhpcy5fY29sbGVjdGlvbiA9IHRoaXMubW9kZWwuY29sbGVjdGlvbjsKCX0KCiAgICAgICAgdGhpcy5ub3RpZnkoJ2NlbGw6cG9pbnRlcmRvd24nLCBldnQsIHgsIHkpOwogICAgfSwKICAgIAogICAgcG9pbnRlcm1vdmU6IGZ1bmN0aW9uKGV2dCwgeCwgeSkgewoKICAgICAgICB0aGlzLm5vdGlmeSgnY2VsbDpwb2ludGVybW92ZScsIGV2dCwgeCwgeSk7CiAgICB9LAogICAgCiAgICBwb2ludGVydXA6IGZ1bmN0aW9uKGV2dCwgeCwgeSkgewoKICAgICAgICB0aGlzLm5vdGlmeSgnY2VsbDpwb2ludGVydXAnLCBldnQsIHgsIHkpOwoKCWlmICh0aGlzLl9jb2xsZWN0aW9uKSB7CgkgICAgLy8gd2UgZG9uJ3Qgd2FudCB0byB0cmlnZ2VyIGV2ZW50IG9uIG1vZGVsIGFzIG1vZGVsIGRvZXNuJ3QKCSAgICAvLyBuZWVkIHRvIGJlIG1lbWJlciBvZiBjb2xsZWN0aW9uIGFueW1vcmUgKHJlbW92ZSkKCSAgICB0aGlzLl9jb2xsZWN0aW9uLnRyaWdnZXIoJ2JhdGNoOnN0b3AnKTsKCSAgICBkZWxldGUgdGhpcy5fY29sbGVjdGlvbjsKCX0KCiAgICB9Cn0pOwoKCmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHsKCiAgICBtb2R1bGUuZXhwb3J0cy5DZWxsID0gam9pbnQuZGlhLkNlbGw7CiAgICBtb2R1bGUuZXhwb3J0cy5DZWxsVmlldyA9IGpvaW50LmRpYS5DZWxsVmlldzsKfQoKLy8gICAgICBKb2ludEpTIGxpYnJhcnkuCi8vICAgICAgKGMpIDIwMTEtMjAxMyBjbGllbnQgSU8KCgppZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7CgogICAgdmFyIGpvaW50ID0gewogICAgICAgIHV0aWw6IHJlcXVpcmUoJy4vY29yZScpLnV0aWwsCiAgICAgICAgZGlhOiB7CiAgICAgICAgICAgIENlbGw6IHJlcXVpcmUoJy4vam9pbnQuZGlhLmNlbGwnKS5DZWxsLAogICAgICAgICAgICBDZWxsVmlldzogcmVxdWlyZSgnLi9qb2ludC5kaWEuY2VsbCcpLkNlbGxWaWV3CiAgICAgICAgfQogICAgfTsKICAgIHZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJyk7CiAgICB2YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpOwp9CgoKLy8gam9pbnQuZGlhLkVsZW1lbnQgYmFzZSBtb2RlbC4KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmpvaW50LmRpYS5FbGVtZW50ID0gam9pbnQuZGlhLkNlbGwuZXh0ZW5kKHsKCiAgICBkZWZhdWx0czogewogICAgICAgIHBvc2l0aW9uOiB7IHg6IDAsIHk6IDAgfSwKCXNpemU6IHsgd2lkdGg6IDEsIGhlaWdodDogMSB9LAogICAgICAgIGFuZ2xlOiAwCiAgICB9LAoKICAgIHBvc2l0aW9uOiBmdW5jdGlvbih4LCB5KSB7CgogICAgICAgIHRoaXMuc2V0KCdwb3NpdGlvbicsIHsgeDogeCwgeTogeSB9KTsKICAgIH0sCiAgICAKICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24odHgsIHR5LCBvcHQpIHsKCiAgICAgICAgdHkgPSB0eSB8fCAwOwoKICAgICAgICBpZiAodHggPT09IDAgJiYgdHkgPT09IDApIHsKICAgICAgICAgICAgLy8gTGlrZSBub3RoaW5nIGhhcyBoYXBwZW5lZC4KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQoKICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLmdldCgncG9zaXRpb24nKSB8fCB7IHg6IDAsIHk6IDAgfTsKCXZhciB0cmFuc2xhdGVkUG9zaXRpb24gPSB7IHg6IHBvc2l0aW9uLnggKyB0eCB8fCAwLCB5OiBwb3NpdGlvbi55ICsgdHkgfHwgMCB9OwoKCWlmIChvcHQgJiYgb3B0LnRyYW5zaXRpb24pIHsKCgkgICAgaWYgKCFfLmlzT2JqZWN0KG9wdC50cmFuc2l0aW9uKSkgb3B0LnRyYW5zaXRpb24gPSB7fTsKCgkgICAgdGhpcy50cmFuc2l0aW9uKCdwb3NpdGlvbicsIHRyYW5zbGF0ZWRQb3NpdGlvbiwgXy5leHRlbmQoe30sIG9wdC50cmFuc2l0aW9uLCB7CgkJdmFsdWVGdW5jdGlvbjogam9pbnQudXRpbC5pbnRlcnBvbGF0ZS5vYmplY3QKCSAgICB9KSk7CgoJfSBlbHNlIHsKCiAgICAgICAgICAgIHRoaXMuc2V0KCdwb3NpdGlvbicsIHRyYW5zbGF0ZWRQb3NpdGlvbiwgb3B0KTsKCiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNhbGwgYHRyYW5zbGF0ZSgpYCBvbiBhbGwgdGhlIGVtYmVkcyBjZWxscy4KICAgICAgICAgICAgXy5pbnZva2UodGhpcy5nZXRFbWJlZGRlZENlbGxzKCksICd0cmFuc2xhdGUnLCB0eCwgdHksIG9wdCk7Cgl9CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICByZXNpemU6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHsKCgl0aGlzLnRyaWdnZXIoJ2JhdGNoOnN0YXJ0Jyk7CiAgICAgICAgdGhpcy5zZXQoJ3NpemUnLCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSk7Cgl0aGlzLnRyaWdnZXIoJ2JhdGNoOnN0b3AnKTsKCglyZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gUm90YXRlIGVsZW1lbnQgYnkgYGFuZ2xlYCBkZWdyZWVzLCBvcHRpb25hbGx5IGFyb3VuZCBgb3JpZ2luYCBwb2ludC4KICAgIC8vIElmIGBvcmlnaW5gIGlzIG5vdCBwcm92aWRlZCwgaXQgaXMgY29uc2lkZXJlZCB0byBiZSB0aGUgY2VudGVyIG9mIHRoZSBlbGVtZW50LgogICAgLy8gSWYgYGFic29sdXRlYCBpcyBgdHJ1ZWAsIHRoZSBgYW5nbGVgIGlzIGNvbnNpZGVyZWQgaXMgYWJzbHV0ZSwgaS5lLiBpdCBpcyBub3QKICAgIC8vIHRoZSBkaWZmZXJlbmNlIGZyb20gdGhlIHByZXZpb3VzIGFuZ2xlLgogICAgcm90YXRlOiBmdW5jdGlvbihhbmdsZSwgYWJzb2x1dGUsIG9yaWdpbikgewoJCglpZiAob3JpZ2luKSB7CgoJICAgIHZhciBjZW50ZXIgPSB0aGlzLmdldEJCb3goKS5jZW50ZXIoKTsKCSAgICB2YXIgc2l6ZSA9IHRoaXMuZ2V0KCdzaXplJyk7CgkgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5nZXQoJ3Bvc2l0aW9uJyk7CgkgICAgY2VudGVyLnJvdGF0ZShvcmlnaW4sICh0aGlzLmdldCgnYW5nbGUnKSB8fCAwKSAtIGFuZ2xlKTsKCSAgICB2YXIgZHggPSBjZW50ZXIueCAtIHNpemUud2lkdGgvMiAtIHBvc2l0aW9uLng7CgkgICAgdmFyIGR5ID0gY2VudGVyLnkgLSBzaXplLmhlaWdodC8yIC0gcG9zaXRpb24ueTsKCSAgICB0aGlzLnRyaWdnZXIoJ2JhdGNoOnN0YXJ0Jyk7CgkgICAgdGhpcy50cmFuc2xhdGUoZHgsIGR5KTsKCSAgICB0aGlzLnJvdGF0ZShhbmdsZSwgYWJzb2x1dGUpOwoJICAgIHRoaXMudHJpZ2dlcignYmF0Y2g6c3RvcCcpOwogICAgICAgICAgICAKCX0gZWxzZSB7CgoJICAgIHRoaXMuc2V0KCdhbmdsZScsIGFic29sdXRlID8gYW5nbGUgOiAoKHRoaXMuZ2V0KCdhbmdsZScpIHx8IDApICsgYW5nbGUpICUgMzYwKTsKCX0KCXJldHVybiB0aGlzOwogICAgfSwKCiAgICBnZXRCQm94OiBmdW5jdGlvbigpIHsKCgl2YXIgcG9zaXRpb24gPSB0aGlzLmdldCgncG9zaXRpb24nKTsKCXZhciBzaXplID0gdGhpcy5nZXQoJ3NpemUnKTsKCglyZXR1cm4gZy5yZWN0KHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTsKICAgIH0KfSk7CgovLyBqb2ludC5kaWEuRWxlbWVudCBiYXNlIHZpZXcgYW5kIGNvbnRyb2xsZXIuCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmpvaW50LmRpYS5FbGVtZW50VmlldyA9IGpvaW50LmRpYS5DZWxsVmlldy5leHRlbmQoewoKICAgIGNsYXNzTmFtZTogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuICdlbGVtZW50ICcgKyB0aGlzLm1vZGVsLmdldCgndHlwZScpLnNwbGl0KCcuJykuam9pbignICcpOwogICAgfSwKCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHsKCiAgICAgICAgXy5iaW5kQWxsKHRoaXMsICd0cmFuc2xhdGUnLCAncmVzaXplJywgJ3JvdGF0ZScpOwoKICAgICAgICBqb2ludC5kaWEuQ2VsbFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAKCXRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgJ2NoYW5nZTpwb3NpdGlvbicsIHRoaXMudHJhbnNsYXRlKTsKCXRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgJ2NoYW5nZTpzaXplJywgdGhpcy5yZXNpemUpOwoJdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCAnY2hhbmdlOmFuZ2xlJywgdGhpcy5yb3RhdGUpOwogICAgfSwKCiAgICAvLyBEZWZhdWx0IGlzIHRvIHByb2Nlc3MgdGhlIGBhdHRyc2Agb2JqZWN0IGFuZCBzZXQgYXR0cmlidXRlcyBvbiBzdWJlbGVtZW50cyBiYXNlZCBvbiB0aGUgc2VsZWN0b3JzLgogICAgdXBkYXRlOiBmdW5jdGlvbihjZWxsLCByZW5kZXJpbmdPbmx5QXR0cnMpIHsKCiAgICAgICAgdmFyIGFsbEF0dHJzID0gdGhpcy5tb2RlbC5nZXQoJ2F0dHJzJyk7CgogICAgICAgIHZhciByb3RhdGFibGUgPSBWKHRoaXMuJCgnLnJvdGF0YWJsZScpWzBdKTsKICAgICAgICBpZiAocm90YXRhYmxlKSB7CgogICAgICAgICAgICB2YXIgcm90YXRpb24gPSByb3RhdGFibGUuYXR0cigndHJhbnNmb3JtJyk7CiAgICAgICAgICAgIHJvdGF0YWJsZS5hdHRyKCd0cmFuc2Zvcm0nLCAnJyk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHZhciByZWxhdGl2ZWx5UG9zaXRpb25lZCA9IFtdOwoKICAgICAgICBfLmVhY2gocmVuZGVyaW5nT25seUF0dHJzIHx8IGFsbEF0dHJzLCBmdW5jdGlvbihhdHRycywgc2VsZWN0b3IpIHsKCiAgICAgICAgICAgIC8vIEVsZW1lbnRzIHRoYXQgc2hvdWxkIGJlIHVwZGF0ZWQuCiAgICAgICAgICAgIHZhciAkc2VsZWN0ZWQgPSB0aGlzLmZpbmRCeVNlbGVjdG9yKHNlbGVjdG9yKTsKCiAgICAgICAgICAgIC8vIE5vIGVsZW1lbnQgbWF0Y2hlZCBieSB0aGUgYHNlbGVjdG9yYCB3YXMgZm91bmQuIFdlJ3JlIGRvbmUgdGhlbi4KICAgICAgICAgICAgaWYgKCRzZWxlY3RlZC5sZW5ndGggPT09IDApIHJldHVybjsKCiAgICAgICAgICAgIC8vIFNwZWNpYWwgYXR0cmlidXRlcyBhcmUgdHJlYXRlZCBieSBKb2ludEpTLCBub3QgYnkgU1ZHLgogICAgICAgICAgICB2YXIgc3BlY2lhbEF0dHJpYnV0ZXMgPSBbJ3N0eWxlJywgJ3RleHQnLCAnaHRtbCcsICdyZWYteCcsICdyZWYteScsICdyZWYtZHgnLCAncmVmLWR5JywgJ3JlZi13aWR0aCcsICdyZWYtaGVpZ2h0JywgJ3JlZicsICd4LWFsaWdubWVudCcsICd5LWFsaWdubWVudCcsICdwb3J0J107CgogICAgICAgICAgICAvLyBJZiB0aGUgYGZpbHRlcmAgYXR0cmlidXRlIGlzIGFuIG9iamVjdCwgaXQgaXMgaW4gdGhlIHNwZWNpYWwgSm9pbnRKUyBmaWx0ZXIgZm9ybWF0IGFuZCBzbwogICAgICAgICAgICAvLyBpdCBiZWNvbWVzIGEgc3BlY2lhbCBhdHRyaWJ1dGUgYW5kIGlzIHRyZWF0ZWQgc2VwYXJhdGVseS4KICAgICAgICAgICAgaWYgKF8uaXNPYmplY3QoYXR0cnMuZmlsdGVyKSkgewoKICAgICAgICAgICAgICAgIHNwZWNpYWxBdHRyaWJ1dGVzLnB1c2goJ2ZpbHRlcicpOwogICAgICAgICAgICAgICAgdGhpcy5hcHBseUZpbHRlcihzZWxlY3RvciwgYXR0cnMuZmlsdGVyKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSWYgdGhlIGBmaWxsYCBvciBgc3Ryb2tlYCBhdHRyaWJ1dGUgaXMgYW4gb2JqZWN0LCBpdCBpcyBpbiB0aGUgc3BlY2lhbCBKb2ludEpTIGdyYWRpZW50IGZvcm1hdCBhbmQgc28KICAgICAgICAgICAgLy8gaXQgYmVjb21lcyBhIHNwZWNpYWwgYXR0cmlidXRlIGFuZCBpcyB0cmVhdGVkIHNlcGFyYXRlbHkuCiAgICAgICAgICAgIGlmIChfLmlzT2JqZWN0KGF0dHJzLmZpbGwpKSB7CgogICAgICAgICAgICAgICAgc3BlY2lhbEF0dHJpYnV0ZXMucHVzaCgnZmlsbCcpOwogICAgICAgICAgICAgICAgdGhpcy5hcHBseUdyYWRpZW50KHNlbGVjdG9yLCAnZmlsbCcsIGF0dHJzLmZpbGwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChfLmlzT2JqZWN0KGF0dHJzLnN0cm9rZSkpIHsKCiAgICAgICAgICAgICAgICBzcGVjaWFsQXR0cmlidXRlcy5wdXNoKCdzdHJva2UnKTsKICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlHcmFkaWVudChzZWxlY3RvciwgJ3N0cm9rZScsIGF0dHJzLnN0cm9rZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIE1ha2Ugc3BlY2lhbCBjYXNlIGZvciBgdGV4dGAgYXR0cmlidXRlLiBTbyB0aGF0IHdlIGNhbiBzZXQgdGV4dCBjb250ZW50IG9mIHRoZSBgPHRleHQ+YCBlbGVtZW50CiAgICAgICAgICAgIC8vIHZpYSB0aGUgYGF0dHJzYCBvYmplY3QgYXMgd2VsbC4KICAgICAgICAgICAgLy8gTm90ZSB0aGF0IGl0J3MgaW1wb3J0YW50IHRvIHNldCB0ZXh0IGJlZm9yZSBhcHBseWluZyB0aGUgcmVzdCBvZiB0aGUgZmluYWwgYXR0cmlidXRlcy4KICAgICAgICAgICAgLy8gVmVjdG9yaXplciBgdGV4dCgpYCBtZXRob2Qgc2V0cyBvbiB0aGUgZWxlbWVudCBpdHMgb3duIGF0dHJpYnV0ZXMgYW5kIGl0IGhhcyB0byBiZSBwb3NzaWJsZQogICAgICAgICAgICAvLyB0byByZXdyaXRlIHRoZW0sIGlmIG5lZWRlZC4gKGkuZSBkaXNwbGF5OiAnbm9uZScpCiAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChhdHRycy50ZXh0KSkgewoKICAgICAgICAgICAgICAgICRzZWxlY3RlZC5lYWNoKGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgICAgICAgICBWKHRoaXMpLnRleHQoYXR0cnMudGV4dCArICcnLCB7IGxpbmVIZWlnaHQ6IGF0dHJzLmxpbmVIZWlnaHQgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gU2V0IHJlZ3VsYXIgYXR0cmlidXRlcyBvbiB0aGUgYCRzZWxlY3RlZGAgc3ViZWxlbWVudC4gTm90ZSB0aGF0IHdlIGNhbm5vdCB1c2UgdGhlIGpRdWVyeSBhdHRyKCkKICAgICAgICAgICAgLy8gbWV0aG9kIGFzIHNvbWUgb2YgdGhlIGF0dHJpYnV0ZXMgbWlnaHQgYmUgbmFtZXNwYWNlZCAoZS5nLiB4bGluazpocmVmKSB3aGljaCBmYWlscyB3aXRoIGpRdWVyeSBhdHRyKCkuCiAgICAgICAgICAgIHZhciBmaW5hbEF0dHJpYnV0ZXMgPSBfLm9taXQoYXR0cnMsIHNwZWNpYWxBdHRyaWJ1dGVzKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICRzZWxlY3RlZC5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBWKHRoaXMpLmF0dHIoZmluYWxBdHRyaWJ1dGVzKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyBgcG9ydGAgYXR0cmlidXRlIGNvbnRhaW5zIHRoZSBgaWRgIG9mIHRoZSBwb3J0IHRoYXQgdGhlIHVuZGVybHlpbmcgbWFnbmV0IHJlcHJlc2VudHMuCiAgICAgICAgICAgIGlmIChhdHRycy5wb3J0KSB7CgogICAgICAgICAgICAgICAgJHNlbGVjdGVkLmF0dHIoJ3BvcnQnLCBfLmlzVW5kZWZpbmVkKGF0dHJzLnBvcnQuaWQpID8gYXR0cnMucG9ydCA6IGF0dHJzLnBvcnQuaWQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBgc3R5bGVgIGF0dHJpYnV0ZSBpcyBzcGVjaWFsIGluIHRoZSBzZW5zZSB0aGF0IGl0IHNldHMgdGhlIENTUyBzdHlsZSBvZiB0aGUgc3ViZWxlbWVudC4KICAgICAgICAgICAgaWYgKGF0dHJzLnN0eWxlKSB7CgogICAgICAgICAgICAgICAgJHNlbGVjdGVkLmNzcyhhdHRycy5zdHlsZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChhdHRycy5odG1sKSkgewoKICAgICAgICAgICAgICAgICRzZWxlY3RlZC5lYWNoKGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmh0bWwoYXR0cnMuaHRtbCArICcnKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBTcGVjaWFsIGByZWYteGAgYW5kIGByZWYteWAgYXR0cmlidXRlcyBtYWtlIGl0IHBvc3NpYmxlIHRvIHNldCBib3RoIGFic29sdXRlIG9yCiAgICAgICAgICAgIC8vIHJlbGF0aXZlIHBvc2l0aW9uaW5nIG9mIHN1YmVsZW1lbnRzLgogICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQoYXR0cnNbJ3JlZi14J10pIHx8CiAgICAgICAgICAgICAgICAhXy5pc1VuZGVmaW5lZChhdHRyc1sncmVmLXknXSkgfHwKICAgICAgICAgICAgICAgICFfLmlzVW5kZWZpbmVkKGF0dHJzWydyZWYtZHgnXSkgfHwKICAgICAgICAgICAgICAgICFfLmlzVW5kZWZpbmVkKGF0dHJzWydyZWYtZHknXSkgfHwKCQkhXy5pc1VuZGVmaW5lZChhdHRyc1sneC1hbGlnbm1lbnQnXSkgfHwKCQkhXy5pc1VuZGVmaW5lZChhdHRyc1sneS1hbGlnbm1lbnQnXSkgfHwKICAgICAgICAgICAgICAgICFfLmlzVW5kZWZpbmVkKGF0dHJzWydyZWYtd2lkdGgnXSkgfHwKICAgICAgICAgICAgICAgICFfLmlzVW5kZWZpbmVkKGF0dHJzWydyZWYtaGVpZ2h0J10pCiAgICAgICAgICAgICAgICkgewoKICAgICAgICAgICAgICAgICAgIF8uZWFjaCgkc2VsZWN0ZWQsIGZ1bmN0aW9uKGVsLCBpbmRleCwgbGlzdCkgewogICAgICAgICAgICAgICAgICAgICAgIHZhciAkZWwgPSAkKGVsKTsKICAgICAgICAgICAgICAgICAgICAgICAvLyBjb3B5IG9yaWdpbmFsIGxpc3Qgc2VsZWN0b3IgdG8gdGhlIGVsZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAkZWwuc2VsZWN0b3IgPSBsaXN0LnNlbGVjdG9yOwogICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlbHlQb3NpdGlvbmVkLnB1c2goJGVsKTsKICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgIH0sIHRoaXMpOwoKICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRoZSBzdWIgZWxlbWVudHMgdG8gYWZmZWN0IHRoZSBib3VuZGluZyBib3ggb2YgdGhlIHJvb3QgZWxlbWVudCB3aGVuCiAgICAgICAgLy8gcG9zaXRpb25pbmcgdGhlIHN1YiBlbGVtZW50cyByZWxhdGl2ZWx5IHRvIHRoZSBib3VuZGluZyBib3guCiAgICAgICAgLy9fLmludm9rZShyZWxhdGl2ZWx5UG9zaXRpb25lZCwgJ2hpZGUnKTsKICAgICAgICAvL18uaW52b2tlKHJlbGF0aXZlbHlQb3NpdGlvbmVkLCAnc2hvdycpOwoKICAgICAgICAvLyBOb3RlIHRoYXQgd2UncmUgdXNpbmcgdGhlIGJvdW5kaW5nIGJveCB3aXRob3V0IHRyYW5zZm9ybWF0aW9uIGJlY2F1c2Ugd2UgYXJlIGFscmVhZHkgaW5zaWRlCiAgICAgICAgLy8gYSB0cmFuc2Zvcm1lZCBjb29yZGluYXRlIHN5c3RlbS4KICAgICAgICB2YXIgYmJveCA9IHRoaXMuZWwuZ2V0QkJveCgpOyAgICAgICAgCgogICAgICAgIHJlbmRlcmluZ09ubHlBdHRycyA9IHJlbmRlcmluZ09ubHlBdHRycyB8fCB7fTsKCiAgICAgICAgXy5lYWNoKHJlbGF0aXZlbHlQb3NpdGlvbmVkLCBmdW5jdGlvbigkZWwpIHsKCiAgICAgICAgICAgIC8vIGlmIHRoZXJlIHdhcyBhIHNwZWNpYWwgYXR0cmlidXRlIGFmZmVjdGluZyB0aGUgcG9zaXRpb24gYW1vbmdzdCByZW5kZXJpbmdPbmx5QXR0cmlidXRlcwogICAgICAgICAgICAvLyB3ZSBoYXZlIHRvIG1lcmdlIGl0IHdpdGggcmVzdCBvZiB0aGUgZWxlbWVudCdzIGF0dHJpYnV0ZXMgYXMgdGhleSBhcmUgbmVjZXNzYXJ5CiAgICAgICAgICAgIC8vIHRvIHVwZGF0ZSB0aGUgcG9zaXRpb24gcmVsYXRpdmVseSAoaS5lIGByZWZgKQogICAgICAgICAgICB2YXIgcmVuZGVyaW5nT25seUVsQXR0cnMgPSByZW5kZXJpbmdPbmx5QXR0cnNbJGVsLnNlbGVjdG9yXTsKICAgICAgICAgICAgdmFyIGVsQXR0cnMgPSByZW5kZXJpbmdPbmx5RWxBdHRycwogICAgICAgICAgICAgICAgPyBfLm1lcmdlKHt9LCBhbGxBdHRyc1skZWwuc2VsZWN0b3JdLCByZW5kZXJpbmdPbmx5RWxBdHRycykKICAgICAgICAgICAgICAgIDogYWxsQXR0cnNbJGVsLnNlbGVjdG9yXTsKCiAgICAgICAgICAgIHRoaXMucG9zaXRpb25SZWxhdGl2ZSgkZWwsIGJib3gsIGVsQXR0cnMpOwogICAgICAgICAgICAKICAgICAgICB9LCB0aGlzKTsKCiAgICAgICAgaWYgKHJvdGF0YWJsZSkgewoKICAgICAgICAgICAgcm90YXRhYmxlLmF0dHIoJ3RyYW5zZm9ybScsIHJvdGF0aW9uIHx8ICcnKTsKICAgICAgICB9CiAgICB9LAoKICAgIHBvc2l0aW9uUmVsYXRpdmU6IGZ1bmN0aW9uKCRlbCwgYmJveCwgZWxBdHRycykgewoKICAgICAgICB2YXIgcmVmID0gZWxBdHRyc1sncmVmJ107CiAgICAgICAgdmFyIHJlZlggPSBwYXJzZUZsb2F0KGVsQXR0cnNbJ3JlZi14J10pOwogICAgICAgIHZhciByZWZZID0gcGFyc2VGbG9hdChlbEF0dHJzWydyZWYteSddKTsKICAgICAgICB2YXIgcmVmRHggPSBwYXJzZUZsb2F0KGVsQXR0cnNbJ3JlZi1keCddKTsKICAgICAgICB2YXIgcmVmRHkgPSBwYXJzZUZsb2F0KGVsQXR0cnNbJ3JlZi1keSddKTsKICAgICAgICB2YXIgeUFsaWdubWVudCA9IGVsQXR0cnNbJ3ktYWxpZ25tZW50J107CiAgICAgICAgdmFyIHhBbGlnbm1lbnQgPSBlbEF0dHJzWyd4LWFsaWdubWVudCddOwogICAgICAgIHZhciByZWZXaWR0aCA9IHBhcnNlRmxvYXQoZWxBdHRyc1sncmVmLXdpZHRoJ10pOwogICAgICAgIHZhciByZWZIZWlnaHQgPSBwYXJzZUZsb2F0KGVsQXR0cnNbJ3JlZi1oZWlnaHQnXSk7CgogICAgICAgIC8vIGByZWZgIGlzIHRoZSBzZWxlY3RvciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuIElmIG5vIGByZWZgIGlzIHBhc3NlZCwgcmVmZXJlbmNlCiAgICAgICAgLy8gZWxlbWVudCBpcyB0aGUgcm9vdCBlbGVtZW50LgoKICAgICAgICB2YXIgaXNTY2FsYWJsZSA9IF8uY29udGFpbnMoXy5wbHVjayhfLnBsdWNrKCRlbC5wYXJlbnRzKCdnJyksICdjbGFzc05hbWUnKSwgJ2Jhc2VWYWwnKSwgJ3NjYWxhYmxlJyk7CgogICAgICAgIGlmIChyZWYpIHsKCiAgICAgICAgICAgIC8vIEdldCB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgcm9vdCBgPGc+YCBlbGVtZW50LgogICAgICAgICAgICBiYm94ID0gVih0aGlzLmZpbmRCeVNlbGVjdG9yKHJlZilbMF0pLmJib3goZmFsc2UsIHRoaXMuZWwpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHZlbCA9IFYoJGVsWzBdKTsKCiAgICAgICAgLy8gUmVtb3ZlIHRoZSBwcmV2aW91cyB0cmFuc2xhdGUoKSBmcm9tIHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIGFuZCB0cmFuc2xhdGUgdGhlIGVsZW1lbnQKICAgICAgICAvLyByZWxhdGl2ZSB0byB0aGUgcm9vdCBib3VuZGluZyBib3ggZm9sbG93aW5nIHRoZSBgcmVmLXhgIGFuZCBgcmVmLXlgIGF0dHJpYnV0ZXMuCiAgICAgICAgaWYgKHZlbC5hdHRyKCd0cmFuc2Zvcm0nKSkgewoKICAgICAgICAgICAgdmVsLmF0dHIoJ3RyYW5zZm9ybScsIHZlbC5hdHRyKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKC90cmFuc2xhdGVcKFteKV0qXCkvZywgJycpLnRyaW0oKSB8fCAnJyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpc0RlZmluZWQoeCkgewogICAgICAgICAgICByZXR1cm4gXy5pc051bWJlcih4KSAmJiAhXy5pc05hTih4KTsKICAgICAgICB9CgogICAgICAgIC8vIFRoZSBmaW5hbCB0cmFuc2xhdGlvbiBvZiB0aGUgc3ViZWxlbWVudC4KICAgICAgICB2YXIgdHggPSAwOwogICAgICAgIHZhciB0eSA9IDA7CgogICAgICAgIC8vICdyZWYtd2lkdGgnLydyZWYtaGVpZ2h0JyBkZWZpbmVzIHRoZSB3aWR0aC9oZWlnaHQgb2YgdGhlIHN1YmVsZW1lbnQgcmVsYXRpdmVseSB0bwogICAgICAgIC8vIHRoZSByZWZlcmVuY2UgZWxlbWVudCBzaXplCiAgICAgICAgLy8gdmFsIGluIDAuLjEgICAgICAgICByZWYtd2lkdGggPSAwLjc1IHNldHMgdGhlIHdpZHRoIHRvIDc1JSBvZiB0aGUgcmVmLiBlbC4gd2lkdGgKICAgICAgICAvLyB2YWwgPCAwIHx8IHZhbCA+IDEgIHJlZi1oZWlnaHQgPSAtMjAgc2V0cyB0aGUgaGVpZ2h0IHRvIHRoZSB0aGUgcmVmLiBlbC4gaGVpZ2h0IHNob3J0ZXIgYnkgMjAKCiAgICAgICAgaWYgKGlzRGVmaW5lZChyZWZXaWR0aCkpIHsKCiAgICAgICAgICAgIGlmIChyZWZXaWR0aCA+PSAwICYmIHJlZldpZHRoIDw9IDEpIHsKCiAgICAgICAgICAgICAgICB2ZWwuYXR0cignd2lkdGgnLCByZWZXaWR0aCAqIGJib3gud2lkdGgpOwoKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICB2ZWwuYXR0cignd2lkdGgnLCBNYXRoLm1heChyZWZXaWR0aCArIGJib3gud2lkdGgsIDApKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGlzRGVmaW5lZChyZWZIZWlnaHQpKSB7CgogICAgICAgICAgICBpZiAocmVmSGVpZ2h0ID49IDAgJiYgcmVmSGVpZ2h0IDw9IDEpIHsKCiAgICAgICAgICAgICAgICB2ZWwuYXR0cignaGVpZ2h0JywgcmVmSGVpZ2h0ICogYmJveC5oZWlnaHQpOwoKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICB2ZWwuYXR0cignaGVpZ2h0JywgTWF0aC5tYXgocmVmSGVpZ2h0ICsgYmJveC5oZWlnaHQsIDApKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gYHJlZi1keGAgYW5kIGByZWYtZHlgIGRlZmluZSB0aGUgb2Zmc2V0IG9mIHRoZSBzdWJlbGVtZW50IHJlbGF0aXZlIHRvIHRoZSByaWdodCBhbmQvb3IgYm90dG9tCiAgICAgICAgLy8gY29vcmRpbmF0ZSBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuCiAgICAgICAgaWYgKGlzRGVmaW5lZChyZWZEeCkpIHsKCiAgICAgICAgICAgIGlmIChpc1NjYWxhYmxlKSB7CgogICAgICAgICAgICAgICAgLy8gQ29tcGVuc2F0ZSBmb3IgdGhlIHNjYWxlIGdyaWQgaW4gY2FzZSB0aGUgZWxlbW50IGlzIGluIHRoZSBzY2FsYWJsZSBncm91cC4KICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IFYodGhpcy4kKCcuc2NhbGFibGUnKVswXSkuc2NhbGUoKTsKICAgICAgICAgICAgICAgIHR4ID0gYmJveC54ICsgYmJveC53aWR0aCArIHJlZkR4IC8gc2NhbGUuc3g7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdHggPSBiYm94LnggKyBiYm94LndpZHRoICsgcmVmRHg7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGlzRGVmaW5lZChyZWZEeSkpIHsKCiAgICAgICAgICAgIGlmIChpc1NjYWxhYmxlKSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIENvbXBlbnNhdGUgZm9yIHRoZSBzY2FsZSBncmlkIGluIGNhc2UgdGhlIGVsZW1udCBpcyBpbiB0aGUgc2NhbGFibGUgZ3JvdXAuCiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSBWKHRoaXMuJCgnLnNjYWxhYmxlJylbMF0pLnNjYWxlKCk7CiAgICAgICAgICAgICAgICB0eSA9IGJib3gueSArIGJib3guaGVpZ2h0ICsgcmVmRHkgLyBzY2FsZS5zeTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdHkgPSBiYm94LnkgKyBiYm94LmhlaWdodCArIHJlZkR5OwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBpZiBgcmVmWGAgaXMgaW4gWzAsIDFdIHRoZW4gYHJlZlhgIGlzIGEgZnJhY3Rpb24gb2YgYm91bmRpbmcgYm94IHdpZHRoCiAgICAgICAgLy8gaWYgYHJlZlhgIGlzIDwgMCB0aGVuIGByZWZYYCdzIGFic29sdXRlIHZhbHVlcyBpcyB0aGUgcmlnaHQgY29vcmRpbmF0ZSBvZiB0aGUgYm91bmRpbmcgYm94CiAgICAgICAgLy8gb3RoZXJ3aXNlLCBgcmVmWGAgaXMgdGhlIGxlZnQgY29vcmRpbmF0ZSBvZiB0aGUgYm91bmRpbmcgYm94CiAgICAgICAgLy8gQW5hbG9naWNhbCBydWxlcyBhcHBseSBmb3IgYHJlZllgLgogICAgICAgIGlmIChpc0RlZmluZWQocmVmWCkpIHsKCiAgICAgICAgICAgIGlmIChyZWZYID4gMCAmJiByZWZYIDwgMSkgewoKICAgICAgICAgICAgICAgIHR4ID0gYmJveC54ICsgYmJveC53aWR0aCAqIHJlZlg7CgogICAgICAgICAgICB9IGVsc2UgaWYgKGlzU2NhbGFibGUpIHsKCiAgICAgICAgICAgICAgICAvLyBDb21wZW5zYXRlIGZvciB0aGUgc2NhbGUgZ3JpZCBpbiBjYXNlIHRoZSBlbGVtbnQgaXMgaW4gdGhlIHNjYWxhYmxlIGdyb3VwLgogICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gVih0aGlzLiQoJy5zY2FsYWJsZScpWzBdKS5zY2FsZSgpOwogICAgICAgICAgICAgICAgdHggPSBiYm94LnggKyByZWZYIC8gc2NhbGUuc3g7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICB0eCA9IGJib3gueCArIHJlZlg7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGlzRGVmaW5lZChyZWZZKSkgewoKICAgICAgICAgICAgaWYgKHJlZlkgPiAwICYmIHJlZlkgPCAxKSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHR5ID0gYmJveC55ICsgYmJveC5oZWlnaHQgKiByZWZZOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTY2FsYWJsZSkgewoKICAgICAgICAgICAgICAgIC8vIENvbXBlbnNhdGUgZm9yIHRoZSBzY2FsZSBncmlkIGluIGNhc2UgdGhlIGVsZW1udCBpcyBpbiB0aGUgc2NhbGFibGUgZ3JvdXAuCiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSBWKHRoaXMuJCgnLnNjYWxhYmxlJylbMF0pLnNjYWxlKCk7CiAgICAgICAgICAgICAgICB0eSA9IGJib3gueSArIHJlZlkgLyBzY2FsZS5zeTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAgIHR5ID0gYmJveC55ICsgcmVmWTsKICAgICAgICAgICAgfQogICAgICAgIH0KCgl2YXIgdmVsYmJveCA9IHZlbC5iYm94KGZhbHNlLCB0aGlzLnBhcGVyLnZpZXdwb3J0KTsKICAgICAgICAvLyBgeS1hbGlnbm1lbnRgIHdoZW4gc2V0IHRvIGBtaWRkbGVgIGNhdXNlcyBjZW50ZXJpbmcgb2YgdGhlIHN1YmVsZW1lbnQgYXJvdW5kIGl0cyBuZXcgeSBjb29yZGluYXRlLgogICAgICAgIGlmICh5QWxpZ25tZW50ID09PSAnbWlkZGxlJykgewoKICAgICAgICAgICAgdHkgLT0gdmVsYmJveC5oZWlnaHQvMjsKICAgICAgICAgICAgCiAgICAgICAgfSBlbHNlIGlmIChpc0RlZmluZWQoeUFsaWdubWVudCkpIHsKCiAgICAgICAgICAgIHR5ICs9ICh5QWxpZ25tZW50ID4gLTEgJiYgeUFsaWdubWVudCA8IDEpID8gIHZlbGJib3guaGVpZ2h0ICogeUFsaWdubWVudCA6IHlBbGlnbm1lbnQ7CiAgICAgICAgfQoKICAgICAgICAvLyBgeC1hbGlnbm1lbnRgIHdoZW4gc2V0IHRvIGBtaWRkbGVgIGNhdXNlcyBjZW50ZXJpbmcgb2YgdGhlIHN1YmVsZW1lbnQgYXJvdW5kIGl0cyBuZXcgeCBjb29yZGluYXRlLgogICAgICAgIGlmICh4QWxpZ25tZW50ID09PSAnbWlkZGxlJykgewogICAgICAgICAgICAKICAgICAgICAgICAgdHggLT0gdmVsYmJveC53aWR0aC8yOwogICAgICAgICAgICAKICAgICAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZCh4QWxpZ25tZW50KSkgewoKICAgICAgICAgICAgdHggKz0gKHhBbGlnbm1lbnQgPiAtMSAmJiB4QWxpZ25tZW50IDwgMSkgPyAgdmVsYmJveC53aWR0aCAqIHhBbGlnbm1lbnQgOiB4QWxpZ25tZW50OwogICAgICAgIH0KCiAgICAgICAgdmVsLnRyYW5zbGF0ZSh0eCwgdHkpOwogICAgfSwKCiAgICAvLyBgcHJvdG90eXBlLm1hcmt1cGAgaXMgcmVuZGVyZWQgYnkgZGVmYXVsdC4gU2V0IHRoZSBgbWFya3VwYCBhdHRyaWJ1dGUgb24gdGhlIG1vZGVsIGlmIHRoZQogICAgLy8gZGVmYXVsdCBtYXJrdXAgaXMgbm90IGRlc2lyYWJsZS4KICAgIHJlbmRlck1hcmt1cDogZnVuY3Rpb24oKSB7CiAgICAgICAgCiAgICAgICAgdmFyIG1hcmt1cCA9IHRoaXMubW9kZWwubWFya3VwIHx8IHRoaXMubW9kZWwuZ2V0KCdtYXJrdXAnKTsKICAgICAgICAKICAgICAgICBpZiAobWFya3VwKSB7CgogICAgICAgICAgICB2YXIgbm9kZXMgPSBWKG1hcmt1cCk7CiAgICAgICAgICAgIFYodGhpcy5lbCkuYXBwZW5kKG5vZGVzKTsKICAgICAgICAgICAgCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvcGVydGllcy5tYXJrdXAgaXMgbWlzc2luZyB3aGlsZSB0aGUgZGVmYXVsdCByZW5kZXIoKSBpbXBsZW1lbnRhdGlvbiBpcyB1c2VkLicpOwogICAgICAgIH0KICAgIH0sCgogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsKCiAgICAgICAgdGhpcy4kZWwuZW1wdHkoKTsKCiAgICAgICAgdGhpcy5yZW5kZXJNYXJrdXAoKTsKCiAgICAgICAgdGhpcy51cGRhdGUoKTsKCiAgICAgICAgdGhpcy5yZXNpemUoKTsKICAgICAgICB0aGlzLnJvdGF0ZSgpOwogICAgICAgIHRoaXMudHJhbnNsYXRlKCk7ICAgICAgICAKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFNjYWxlIHRoZSB3aG9sZSBgPGc+YCBncm91cC4gTm90ZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGBzY2FsZSgpYCBhbmQgYHJlc2l6ZSgpYCBoZXJlLgogICAgLy8gYHJlc2l6ZSgpYCBkb2Vzbid0IHNjYWxlIHRoZSB3aG9sZSBgPGc+YCBncm91cCBidXQgcmF0aGVyIGFkanVzdHMgdGhlIGBib3guc3hgL2Bib3guc3lgIG9ubHkuCiAgICAvLyBgdXBkYXRlKClgIGlzIHRoZW4gcmVzcG9uc2libGUgZm9yIHNjYWxpbmcgb25seSB0aG9zZSBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIGBmb2xsb3ctc2NhbGVgCiAgICAvLyBhdHRyaWJ1dGUgc2V0IHRvIGB0cnVlYC4gVGhpcyBpcyBkZXNpcmFibGUgaW4gZWxlbWVudHMgdGhhdCBoYXZlIGUuZy4gYSBgPHRleHQ+YCBzdWJlbGVtZW50CiAgICAvLyB0aGF0IGlzIG5vdCBzdXBwb3NlZCB0byBiZSBzY2FsZWQgdG9nZXRoZXIgd2l0aCBhIHN1cnJvdW5kaW5nIGA8cmVjdD5gIGVsZW1lbnQgdGhhdCBJUyBzdXBwb3NlZAogICAgLy8gYmUgYmUgc2NhbGVkLgogICAgc2NhbGU6IGZ1bmN0aW9uKHN4LCBzeSkgewoKICAgICAgICAvLyBUT0RPOiB0YWtlIGludG8gYWNjb3VudCB0aGUgb3JpZ2luIGNvb3JkaW5hdGVzIGBveGAgYW5kIGBveWAuCiAgICAgICAgVih0aGlzLmVsKS5zY2FsZShzeCwgc3kpOwogICAgfSwKCiAgICByZXNpemU6IGZ1bmN0aW9uKCkgewoKICAgICAgICB2YXIgc2l6ZSA9IHRoaXMubW9kZWwuZ2V0KCdzaXplJykgfHwgeyB3aWR0aDogMSwgaGVpZ2h0OiAxIH07CiAgICAgICAgdmFyIGFuZ2xlID0gdGhpcy5tb2RlbC5nZXQoJ2FuZ2xlJykgfHwgMDsKICAgICAgICAKICAgICAgICB2YXIgc2NhbGFibGUgPSBWKHRoaXMuJCgnLnNjYWxhYmxlJylbMF0pOwogICAgICAgIGlmICghc2NhbGFibGUpIHsKICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gc2NhbGFibGUgZWxlbWVudHMsIHRoYW4gdGhlcmUgaXMgbm90aGluZyB0byByZXNpemUuCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdmFyIHNjYWxhYmxlQmJveCA9IHNjYWxhYmxlLmJib3godHJ1ZSk7CiAgICAgICAgLy8gTWFrZSBzdXJlIGBzY2FsYWJsZUJib3gud2lkdGhgIGFuZCBgc2NhbGFibGVCYm94LmhlaWdodGAgYXJlIG5vdCB6ZXJvIHdoaWNoIGNhbiBoYXBwZW4gaWYgdGhlIGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhbnkgY29udGVudC4gQnkgbWFraW5nCiAgICAgICAgLy8gdGhlIHdpZHRoL2hlaWdodCAxLCB3ZSBwcmV2ZW50IEhUTUwgZXJyb3JzIG9mIHRoZSB0eXBlIGBzY2FsZShJbmZpbml0eSwgSW5maW5pdHkpYC4KICAgICAgICBzY2FsYWJsZS5hdHRyKCd0cmFuc2Zvcm0nLCAnc2NhbGUoJyArIChzaXplLndpZHRoIC8gKHNjYWxhYmxlQmJveC53aWR0aCB8fCAxKSkgKyAnLCcgKyAoc2l6ZS5oZWlnaHQgLyAoc2NhbGFibGVCYm94LmhlaWdodCB8fCAxKSkgKyAnKScpOwoKICAgICAgICAvLyBOb3cgdGhlIGludGVyZXN0aW5nIHBhcnQuIFRoZSBnb2FsIGlzIHRvIGJlIGFibGUgdG8gc3RvcmUgdGhlIG9iamVjdCBnZW9tZXRyeSB2aWEganVzdCBgeGAsIGB5YCwgYGFuZ2xlYCwgYHdpZHRoYCBhbmQgYGhlaWdodGAKICAgICAgICAvLyBPcmRlciBvZiB0cmFuc2Zvcm1hdGlvbnMgaXMgc2lnbmlmaWNhbnQgYnV0IHdlIHdhbnQgdG8gcmVjb25zdHJ1Y3QgdGhlIG9iamVjdCBhbHdheXMgaW4gdGhlIG9yZGVyOgogICAgICAgIC8vIHJlc2l6ZSgpLCByb3RhdGUoKSwgdHJhbnNsYXRlKCkgbm8gbWF0dGVyIG9mIGhvdyB0aGUgb2JqZWN0IHdhcyB0cmFuc2Zvcm1lZC4gRm9yIHRoYXQgdG8gd29yaywKICAgICAgICAvLyB3ZSBtdXN0IGFkanVzdCB0aGUgYHhgIGFuZCBgeWAgY29vcmRpbmF0ZXMgb2YgdGhlIG9iamVjdCB3aGVuZXZlciB3ZSByZXNpemUgaXQgKGJlY2F1c2UgdGhlIG9yaWdpbiBvZiB0aGUKICAgICAgICAvLyByb3RhdGlvbiBjaGFuZ2VzKS4gVGhlIG5ldyBgeGAgYW5kIGB5YCBjb29yZGluYXRlcyBhcmUgY29tcHV0ZWQgYnkgY2FuY2VsaW5nIHRoZSBwcmV2aW91cyByb3RhdGlvbgogICAgICAgIC8vIGFyb3VuZCB0aGUgY2VudGVyIG9mIHRoZSByZXNpemVkIG9iamVjdCAod2hpY2ggaXMgYSBkaWZmZXJlbnQgb3JpZ2luIHRoZW4gdGhlIG9yaWdpbiBvZiB0aGUgcHJldmlvdXMgcm90YXRpb24pCiAgICAgICAgLy8gYW5kIGdldHRpbmcgdGhlIHRvcC1sZWZ0IGNvcm5lciBvZiB0aGUgcmVzdWx0aW5nIG9iamVjdC4gVGhlbiB3ZSBjbGVhbiB1cCB0aGUgcm90YXRpb24gYmFjayB0byB3aGF0IGl0IG9yaWdpbmFsbHkgd2FzLgogICAgICAgIAogICAgICAgIC8vIENhbmNlbCB0aGUgcm90YXRpb24gYnV0IG5vdyBhcm91bmQgYSBkaWZmZXJlbnQgb3JpZ2luLCB3aGljaCBpcyB0aGUgY2VudGVyIG9mIHRoZSBzY2FsZWQgb2JqZWN0LgogICAgICAgIHZhciByb3RhdGFibGUgPSBWKHRoaXMuJCgnLnJvdGF0YWJsZScpWzBdKTsKICAgICAgICB2YXIgcm90YXRpb24gPSByb3RhdGFibGUgJiYgcm90YXRhYmxlLmF0dHIoJ3RyYW5zZm9ybScpOwogICAgICAgIGlmIChyb3RhdGlvbiAmJiByb3RhdGlvbiAhPT0gJ251bGwnKSB7CgogICAgICAgICAgICByb3RhdGFibGUuYXR0cigndHJhbnNmb3JtJywgcm90YXRpb24gKyAnIHJvdGF0ZSgnICsgKC1hbmdsZSkgKyAnLCcgKyAoc2l6ZS53aWR0aC8yKSArICcsJyArIChzaXplLmhlaWdodC8yKSArICcpJyk7CiAgICAgICAgICAgIHZhciByb3RhdGFibGVCYm94ID0gc2NhbGFibGUuYmJveChmYWxzZSwgdGhpcy5wYXBlci52aWV3cG9ydCk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBTdG9yZSBuZXcgeCwgeSBhbmQgcGVyZm9ybSByb3RhdGUoKSBhZ2FpbiBhZ2FpbnN0IHRoZSBuZXcgcm90YXRpb24gb3JpZ2luLgogICAgICAgICAgICB0aGlzLm1vZGVsLnNldCgncG9zaXRpb24nLCB7IHg6IHJvdGF0YWJsZUJib3gueCwgeTogcm90YXRhYmxlQmJveC55IH0pOwogICAgICAgICAgICB0aGlzLnJvdGF0ZSgpOwogICAgICAgIH0KCiAgICAgICAgLy8gVXBkYXRlIG11c3QgYWx3YXlzIGJlIGNhbGxlZCBvbiBub24tcm90YXRlZCBlbGVtZW50LiBPdGhlcndpc2UsIHJlbGF0aXZlIHBvc2l0aW9uaW5nCiAgICAgICAgLy8gd291bGQgd29yayB3aXRoIHdyb25nIChyb3RhdGVkKSBib3VuZGluZyBib3hlcy4KICAgICAgICB0aGlzLnVwZGF0ZSgpOwogICAgfSwKCiAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKG1vZGVsLCBjaGFuZ2VzLCBvcHQpIHsKCiAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5tb2RlbC5nZXQoJ3Bvc2l0aW9uJykgfHwgeyB4OiAwLCB5OiAwIH07CgogICAgICAgIFYodGhpcy5lbCkuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcG9zaXRpb24ueCArICcsJyArIHBvc2l0aW9uLnkgKyAnKScpOwogICAgfSwKCiAgICByb3RhdGU6IGZ1bmN0aW9uKCkgewoKICAgICAgICB2YXIgcm90YXRhYmxlID0gVih0aGlzLiQoJy5yb3RhdGFibGUnKVswXSk7CiAgICAgICAgaWYgKCFyb3RhdGFibGUpIHsKICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gcm90YXRhYmxlIGVsZW1lbnRzLCB0aGVuIHRoZXJlIGlzIG5vdGhpbmcgdG8gcm90YXRlLgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHZhciBhbmdsZSA9IHRoaXMubW9kZWwuZ2V0KCdhbmdsZScpIHx8IDA7CiAgICAgICAgdmFyIHNpemUgPSB0aGlzLm1vZGVsLmdldCgnc2l6ZScpIHx8IHsgd2lkdGg6IDEsIGhlaWdodDogMSB9OwoKICAgICAgICB2YXIgb3ggPSBzaXplLndpZHRoLzI7CiAgICAgICAgdmFyIG95ID0gc2l6ZS5oZWlnaHQvMjsKICAgICAgICAKCiAgICAgICAgcm90YXRhYmxlLmF0dHIoJ3RyYW5zZm9ybScsICdyb3RhdGUoJyArIGFuZ2xlICsgJywnICsgb3ggKyAnLCcgKyBveSArICcpJyk7CiAgICB9LAoKICAgIC8vIEludGVyYWN0aW9uLiBUaGUgY29udHJvbGxlciBwYXJ0LgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgCiAgICBwb2ludGVyZG93bjogZnVuY3Rpb24oZXZ0LCB4LCB5KSB7CgogICAgICAgIGlmICggLy8gdGFyZ2V0IGlzIGEgdmFsaWQgbWFnbmV0IHN0YXJ0IGxpbmtpbmcKICAgICAgICAgICAgZXZ0LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ21hZ25ldCcpICYmCiAgICAgICAgICAgIHRoaXMucGFwZXIub3B0aW9ucy52YWxpZGF0ZU1hZ25ldC5jYWxsKHRoaXMucGFwZXIsIHRoaXMsIGV2dC50YXJnZXQpCiAgICAgICAgKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnRyaWdnZXIoJ2JhdGNoOnN0YXJ0Jyk7CgogICAgICAgICAgICAgICAgdmFyIGxpbmsgPSB0aGlzLnBhcGVyLmdldERlZmF1bHRMaW5rKHRoaXMsIGV2dC50YXJnZXQpOwogICAgICAgICAgICAgICAgbGluay5zZXQoewogICAgICAgICAgICAgICAgICAgIHNvdXJjZTogewogICAgICAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5tb2RlbC5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IHRoaXMuZ2V0U2VsZWN0b3IoZXZ0LnRhcmdldCksCiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6ICQoZXZ0LnRhcmdldCkuYXR0cigncG9ydCcpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHsgeDogeCwgeTogeSB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB0aGlzLnBhcGVyLm1vZGVsLmFkZENlbGwobGluayk7CgoJICAgICAgICB0aGlzLl9saW5rVmlldyA9IHRoaXMucGFwZXIuZmluZFZpZXdCeU1vZGVsKGxpbmspOwogICAgICAgICAgICAgICAgdGhpcy5fbGlua1ZpZXcuc3RhcnRBcnJvd2hlYWRNb3ZlKCd0YXJnZXQnKTsKCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIHRoaXMuX2R4ID0geDsKICAgICAgICAgICAgdGhpcy5fZHkgPSB5OwoKICAgICAgICAgICAgam9pbnQuZGlhLkNlbGxWaWV3LnByb3RvdHlwZS5wb2ludGVyZG93bi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0KICAgIH0sCgogICAgcG9pbnRlcm1vdmU6IGZ1bmN0aW9uKGV2dCwgeCwgeSkgewoKICAgICAgICBpZiAodGhpcy5fbGlua1ZpZXcpIHsKCiAgICAgICAgICAgIC8vIGxldCB0aGUgbGlua3ZpZXcgZGVhbCB3aXRoIHRoaXMgZXZlbnQKICAgICAgICAgICAgdGhpcy5fbGlua1ZpZXcucG9pbnRlcm1vdmUoZXZ0LCB4LCB5KTsKCiAgICAgICAgfSBlbHNlIHsKCgkgICAgdmFyIGdyaWQgPSB0aGlzLnBhcGVyLm9wdGlvbnMuZ3JpZFNpemU7CgoJICAgIHZhciBpbnRlcmFjdGl2ZSA9IF8uaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMuaW50ZXJhY3RpdmUpID8gdGhpcy5vcHRpb25zLmludGVyYWN0aXZlKHRoaXMsICdwb2ludGVybW92ZScpIDogdGhpcy5vcHRpb25zLmludGVyYWN0aXZlOwoKICAgICAgICAgICAgaWYgKGludGVyYWN0aXZlICE9PSBmYWxzZSkgewoKCSAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5tb2RlbC5nZXQoJ3Bvc2l0aW9uJyk7CgoJICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIG5ldyBlbGVtZW50J3MgcG9zaXRpb24gYWx3YXlzIHNuYXBzIHRvIHRoZSBjdXJyZW50IGdyaWQgYWZ0ZXIKCSAgICAgICAgLy8gdHJhbnNsYXRlIGFzIHRoZSBwcmV2aW91cyBvbmUgY291bGQgYmUgY2FsY3VsYXRlZCB3aXRoIGEgZGlmZmVyZW50IGdyaWQgc2l6ZS4KCSAgICAgICAgdGhpcy5tb2RlbC50cmFuc2xhdGUoCgkJICAgIGcuc25hcFRvR3JpZChwb3NpdGlvbi54LCBncmlkKSAtIHBvc2l0aW9uLnggKyBnLnNuYXBUb0dyaWQoeCAtIHRoaXMuX2R4LCBncmlkKSwKCQkgICAgZy5zbmFwVG9HcmlkKHBvc2l0aW9uLnksIGdyaWQpIC0gcG9zaXRpb24ueSArIGcuc25hcFRvR3JpZCh5IC0gdGhpcy5fZHksIGdyaWQpCgkgICAgICAgICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRoaXMuX2R4ID0gZy5zbmFwVG9HcmlkKHgsIGdyaWQpOwogICAgICAgICAgICB0aGlzLl9keSA9IGcuc25hcFRvR3JpZCh5LCBncmlkKTsKCiAgICAgICAgICAgIGpvaW50LmRpYS5DZWxsVmlldy5wcm90b3R5cGUucG9pbnRlcm1vdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9CiAgICB9LAoKICAgIHBvaW50ZXJ1cDogZnVuY3Rpb24oZXZ0LCB4LCB5KSB7CgogICAgICAgIGlmICh0aGlzLl9saW5rVmlldykgewoKICAgICAgICAgICAgLy8gbGV0IHRoZSBsaW5rdmlldyBkZWFsIHdpdGggdGhpcyBldmVudAogICAgICAgICAgICB0aGlzLl9saW5rVmlldy5wb2ludGVydXAoZXZ0LCB4LCB5KTsKCiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saW5rVmlldzsKCiAgICAgICAgICAgIHRoaXMubW9kZWwudHJpZ2dlcignYmF0Y2g6c3RvcCcpOwoKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgam9pbnQuZGlhLkNlbGxWaWV3LnByb3RvdHlwZS5wb2ludGVydXAuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9CiAgICB9Cgp9KTsKCmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHsKCiAgICBtb2R1bGUuZXhwb3J0cy5FbGVtZW50ID0gam9pbnQuZGlhLkVsZW1lbnQ7CiAgICBtb2R1bGUuZXhwb3J0cy5FbGVtZW50VmlldyA9IGpvaW50LmRpYS5FbGVtZW50VmlldzsKfQoKLy8gICAgICBKb2ludEpTIGRpYWdyYW1taW5nIGxpYnJhcnkuCi8vICAgICAgKGMpIDIwMTEtMjAxMyBjbGllbnQgSU8KCgppZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7CgogICAgdmFyIGpvaW50ID0gewogICAgICAgIGRpYTogewogICAgICAgICAgICBDZWxsOiByZXF1aXJlKCcuL2pvaW50LmRpYS5jZWxsJykuQ2VsbCwKICAgICAgICAgICAgQ2VsbFZpZXc6IHJlcXVpcmUoJy4vam9pbnQuZGlhLmNlbGwnKS5DZWxsVmlldwogICAgICAgIH0KICAgIH07CiAgICB2YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpOwogICAgdmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTsKICAgIHZhciBnID0gcmVxdWlyZSgnLi9nZW9tZXRyeScpOwp9CgoKCi8vIGpvaW50LmRpYS5MaW5rIGJhc2UgbW9kZWwuCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCmpvaW50LmRpYS5MaW5rID0gam9pbnQuZGlhLkNlbGwuZXh0ZW5kKHsKCiAgICAvLyBUaGUgZGVmYXVsdCBtYXJrdXAgZm9yIGxpbmtzLgogICAgbWFya3VwOiBbCiAgICAgICAgJzxwYXRoIGNsYXNzPSJjb25uZWN0aW9uIiBzdHJva2U9ImJsYWNrIi8+JywKICAgICAgICAnPHBhdGggY2xhc3M9Im1hcmtlci1zb3VyY2UiIGZpbGw9ImJsYWNrIiBzdHJva2U9ImJsYWNrIiAvPicsCiAgICAgICAgJzxwYXRoIGNsYXNzPSJtYXJrZXItdGFyZ2V0IiBmaWxsPSJibGFjayIgc3Ryb2tlPSJibGFjayIgLz4nLAogICAgICAgICc8cGF0aCBjbGFzcz0iY29ubmVjdGlvbi13cmFwIi8+JywKICAgICAgICAnPGcgY2xhc3M9ImxhYmVscyIvPicsCiAgICAgICAgJzxnIGNsYXNzPSJtYXJrZXItdmVydGljZXMiLz4nLAogICAgICAgICc8ZyBjbGFzcz0ibWFya2VyLWFycm93aGVhZHMiLz4nLAogICAgICAgICc8ZyBjbGFzcz0ibGluay10b29scyIvPicKICAgIF0uam9pbignJyksCgogICAgbGFiZWxNYXJrdXA6IFsKICAgICAgICAnPGcgY2xhc3M9ImxhYmVsIj4nLAogICAgICAgICc8cmVjdCAvPicsCiAgICAgICAgJzx0ZXh0IC8+JywKICAgICAgICAnPC9nPicKICAgIF0uam9pbignJyksCgogICAgdG9vbE1hcmt1cDogWwogICAgICAgICc8ZyBjbGFzcz0ibGluay10b29sIj4nLAogICAgICAgICc8ZyBjbGFzcz0idG9vbC1yZW1vdmUiIGV2ZW50PSJyZW1vdmUiPicsCiAgICAgICAgJzxjaXJjbGUgcj0iMTEiIC8+JywKICAgICAgICAnPHBhdGggdHJhbnNmb3JtPSJzY2FsZSguOCkgdHJhbnNsYXRlKC0xNiwgLTE2KSIgZD0iTTI0Ljc3OCwyMS40MTkgMTkuMjc2LDE1LjkxNyAyNC43NzcsMTAuNDE1IDIxLjk0OSw3LjU4NSAxNi40NDcsMTMuMDg3IDEwLjk0NSw3LjU4NSA4LjExNywxMC40MTUgMTMuNjE4LDE1LjkxNyA4LjExNiwyMS40MTkgMTAuOTQ2LDI0LjI0OCAxNi40NDcsMTguNzQ2IDIxLjk0OCwyNC4yNDh6Ii8+JywKICAgICAgICAnPHRpdGxlPlJlbW92ZSBsaW5rLjwvdGl0bGU+JywKICAgICAgICAnPC9nPicsCiAgICAgICAgJzxnIGNsYXNzPSJ0b29sLW9wdGlvbnMiIGV2ZW50PSJsaW5rOm9wdGlvbnMiPicsCiAgICAgICAgJzxjaXJjbGUgcj0iMTEiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDI1KSIvPicsCiAgICAgICAgJzxwYXRoIGZpbGw9IndoaXRlIiB0cmFuc2Zvcm09InNjYWxlKC41NSkgdHJhbnNsYXRlKDI5LCAtMTYpIiBkPSJNMzEuMjI5LDE3LjczNmMwLjA2NC0wLjU3MSwwLjEwNC0xLjE0OCwwLjEwNC0xLjczNnMtMC4wNC0xLjE2Ni0wLjEwNC0xLjczN2wtNC4zNzctMS41NTdjLTAuMjE4LTAuNzE2LTAuNTA0LTEuNDAxLTAuODUxLTIuMDVsMS45OTMtNC4xOTJjLTAuNzI1LTAuOTEtMS41NDktMS43MzQtMi40NTgtMi40NTlsLTQuMTkzLDEuOTk0Yy0wLjY0Ny0wLjM0Ny0xLjMzNC0wLjYzMi0yLjA0OS0wLjg0OWwtMS41NTgtNC4zNzhDMTcuMTY1LDAuNzA4LDE2LjU4OCwwLjY2NywxNiwwLjY2N3MtMS4xNjYsMC4wNDEtMS43MzcsMC4xMDVMMTIuNzA3LDUuMTVjLTAuNzE2LDAuMjE3LTEuNDAxLDAuNTAyLTIuMDUsMC44NDlMNi40NjQsNC4wMDVDNS41NTQsNC43Myw0LjczLDUuNTU0LDQuMDA1LDYuNDY0bDEuOTk0LDQuMTkyYy0wLjM0NywwLjY0OC0wLjYzMiwxLjMzNC0wLjg0OSwyLjA1bC00LjM3OCwxLjU1N0MwLjcwOCwxNC44MzQsMC42NjcsMTUuNDEyLDAuNjY3LDE2czAuMDQxLDEuMTY1LDAuMTA1LDEuNzM2bDQuMzc4LDEuNTU4YzAuMjE3LDAuNzE1LDAuNTAyLDEuNDAxLDAuODQ5LDIuMDQ5bC0xLjk5NCw0LjE5M2MwLjcyNSwwLjkwOSwxLjU0OSwxLjczMywyLjQ1OSwyLjQ1OGw0LjE5Mi0xLjk5M2MwLjY0OCwwLjM0NywxLjMzNCwwLjYzMywyLjA1LDAuODUxbDEuNTU3LDQuMzc3YzAuNTcxLDAuMDY0LDEuMTQ4LDAuMTA0LDEuNzM3LDAuMTA0YzAuNTg4LDAsMS4xNjUtMC4wNCwxLjczNi0wLjEwNGwxLjU1OC00LjM3N2MwLjcxNS0wLjIxOCwxLjM5OS0wLjUwNCwyLjA0OS0wLjg1MWw0LjE5MywxLjk5M2MwLjkwOS0wLjcyNSwxLjczMy0xLjU0OSwyLjQ1OC0yLjQ1OGwtMS45OTMtNC4xOTNjMC4zNDctMC42NDcsMC42MzMtMS4zMzQsMC44NTEtMi4wNDlMMzEuMjI5LDE3LjczNnpNMTYsMjAuODcxYy0yLjY5LDAtNC44NzItMi4xODItNC44NzItNC44NzFjMC0yLjY5LDIuMTgyLTQuODcyLDQuODcyLTQuODcyYzIuNjg5LDAsNC44NzEsMi4xODIsNC44NzEsNC44NzJDMjAuODcxLDE4LjY4OSwxOC42ODksMjAuODcxLDE2LDIwLjg3MXoiLz4nLAogICAgICAgICc8dGl0bGU+TGluayBvcHRpb25zLjwvdGl0bGU+JywKICAgICAgICAnPC9nPicsCiAgICAgICAgJzwvZz4nCiAgICBdLmpvaW4oJycpLAoKICAgIC8vIFRoZSBkZWZhdWx0IG1hcmt1cCBmb3Igc2hvd2luZy9yZW1vdmluZyB2ZXJ0aWNlcy4gVGhlc2UgZWxlbWVudHMgYXJlIHRoZSBjaGlsZHJlbiBvZiB0aGUgLm1hcmtlci12ZXJ0aWNlcyBlbGVtZW50IChzZWUgYHRoaXMubWFya3VwYCkuCiAgICAvLyBPbmx5IC5tYXJrZXItdmVydGV4IGFuZCAubWFya2VyLXZlcnRleC1yZW1vdmUgZWxlbWVudCBoYXZlIHNwZWNpYWwgbWVhbmluZy4gVGhlIGZvcm1lciBpcyB1c2VkIGZvcgogICAgLy8gZHJhZ2dpbmcgdmVydGljZXMgKGNoYW5naW4gdGhlaXIgcG9zaXRpb24pLiBUaGUgbGF0dGVyIGlzIHVzZWQgZm9yIHJlbW92aW5nIHZlcnRpY2VzLgogICAgdmVydGV4TWFya3VwOiBbCiAgICAgICAgJzxnIGNsYXNzPSJtYXJrZXItdmVydGV4LWdyb3VwIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSg8JT0geCAlPiwgPCU9IHkgJT4pIj4nLAogICAgICAgICc8Y2lyY2xlIGNsYXNzPSJtYXJrZXItdmVydGV4IiBpZHg9IjwlPSBpZHggJT4iIHI9IjEwIiAvPicsCiAgICAgICAgJzxwYXRoIGNsYXNzPSJtYXJrZXItdmVydGV4LXJlbW92ZS1hcmVhIiBpZHg9IjwlPSBpZHggJT4iIGQ9Ik0xNiw1LjMzM2MtNy43MzIsMC0xNCw0LjcwMS0xNCwxMC41YzAsMS45ODIsMC43NDEsMy44MzMsMi4wMTYsNS40MTRMMiwyNS42NjdsNS42MTMtMS40NDFjMi4zMzksMS4zMTcsNS4yMzcsMi4xMDcsOC4zODcsMi4xMDdjNy43MzIsMCwxNC00LjcwMSwxNC0xMC41QzMwLDEwLjAzNCwyMy43MzIsNS4zMzMsMTYsNS4zMzN6IiB0cmFuc2Zvcm09InRyYW5zbGF0ZSg1LCAtMzMpIi8+JywKICAgICAgICAnPHBhdGggY2xhc3M9Im1hcmtlci12ZXJ0ZXgtcmVtb3ZlIiBpZHg9IjwlPSBpZHggJT4iIHRyYW5zZm9ybT0ic2NhbGUoLjgpIHRyYW5zbGF0ZSg5LjUsIC0zNykiIGQ9Ik0yNC43NzgsMjEuNDE5IDE5LjI3NiwxNS45MTcgMjQuNzc3LDEwLjQxNSAyMS45NDksNy41ODUgMTYuNDQ3LDEzLjA4NyAxMC45NDUsNy41ODUgOC4xMTcsMTAuNDE1IDEzLjYxOCwxNS45MTcgOC4xMTYsMjEuNDE5IDEwLjk0NiwyNC4yNDggMTYuNDQ3LDE4Ljc0NiAyMS45NDgsMjQuMjQ4eiI+JywKICAgICAgICAnPHRpdGxlPlJlbW92ZSB2ZXJ0ZXguPC90aXRsZT4nLAogICAgICAgICc8L3BhdGg+JywKICAgICAgICAnPC9nPicKICAgIF0uam9pbignJyksCgogICAgYXJyb3doZWFkTWFya3VwOiBbCiAgICAgICAgJzxnIGNsYXNzPSJtYXJrZXItYXJyb3doZWFkLWdyb3VwIG1hcmtlci1hcnJvd2hlYWQtZ3JvdXAtPCU9IGVuZCAlPiI+JywKICAgICAgICAnPHBhdGggY2xhc3M9Im1hcmtlci1hcnJvd2hlYWQiIGVuZD0iPCU9IGVuZCAlPiIgZD0iTSAyNiAwIEwgMCAxMyBMIDI2IDI2IHoiIC8+JywKICAgICAgICAnPC9nPicKICAgIF0uam9pbignJyksCgogICAgZGVmYXVsdHM6IHsKCiAgICAgICAgdHlwZTogJ2xpbmsnCiAgICB9LAoKICAgIGRpc2Nvbm5lY3Q6IGZ1bmN0aW9uKCkgewoKICAgICAgICByZXR1cm4gdGhpcy5zZXQoeyBzb3VyY2U6IGcucG9pbnQoMCwgMCksIHRhcmdldDogZy5wb2ludCgwLCAwKSB9KTsKICAgIH0sCgogICAgLy8gQSBjb252ZW5pZW50IHdheSB0byBzZXQgbGFiZWxzLiBDdXJyZW50bHkgc2V0IHZhbHVlcyB3aWxsIGJlIG1peGluZWQgd2l0aCBgdmFsdWVgIGlmIHVzZWQgYXMgYSBzZXR0ZXIuCiAgICBsYWJlbDogZnVuY3Rpb24oaWR4LCB2YWx1ZSkgewoKICAgICAgICBpZHggPSBpZHggfHwgMDsKICAgICAgICAKICAgICAgICB2YXIgbGFiZWxzID0gdGhpcy5nZXQoJ2xhYmVscycpIHx8IFtdOwogICAgICAgIAogICAgICAgIC8vIElzIGl0IGEgZ2V0dGVyPwogICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBsYWJlbHNbaWR4XTsKICAgICAgICB9CgogICAgICAgIHZhciBuZXdWYWx1ZSA9IF8ubWVyZ2Uoe30sIGxhYmVsc1tpZHhdLCB2YWx1ZSk7CgogICAgICAgIHZhciBuZXdMYWJlbHMgPSBsYWJlbHMuc2xpY2UoKTsKICAgICAgICBuZXdMYWJlbHNbaWR4XSA9IG5ld1ZhbHVlOwogICAgICAgIAogICAgICAgIHJldHVybiB0aGlzLnNldCh7IGxhYmVsczogbmV3TGFiZWxzIH0pOwogICAgfSwKCiAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHR4LCB0eSwgb3B0KSB7CgogICAgICAgIHZhciBhdHRycyA9IHt9OwogICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldCgnc291cmNlJyk7CiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuZ2V0KCd0YXJnZXQnKTsKICAgICAgICB2YXIgdmVydGljZXMgPSB0aGlzLmdldCgndmVydGljZXMnKTsKCiAgICAgICAgaWYgKCFzb3VyY2UuaWQpIHsKICAgICAgICAgICAgYXR0cnMuc291cmNlID0geyB4OiBzb3VyY2UueCArIHR4LCB5OiBzb3VyY2UueSArIHR5IH07CiAgICAgICAgfQoKICAgICAgICBpZiAoIXRhcmdldC5pZCkgewogICAgICAgICAgICBhdHRycy50YXJnZXQgPSB7IHg6IHRhcmdldC54ICsgdHgsIHk6IHRhcmdldC55ICsgdHkgfTsKICAgICAgICB9CgogICAgICAgIGlmICh2ZXJ0aWNlcyAmJiB2ZXJ0aWNlcy5sZW5ndGgpIHsKICAgICAgICAgICAgYXR0cnMudmVydGljZXMgPSBfLm1hcCh2ZXJ0aWNlcywgZnVuY3Rpb24odmVydGV4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4geyB4OiB2ZXJ0ZXgueCArIHR4LCB5OiB2ZXJ0ZXgueSArIHR5IH07CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRoaXMuc2V0KGF0dHJzLCBvcHQpOwogICAgfQp9KTsKCgovLyBqb2ludC5kaWEuTGluayBiYXNlIHZpZXcgYW5kIGNvbnRyb2xsZXIuCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmpvaW50LmRpYS5MaW5rVmlldyA9IGpvaW50LmRpYS5DZWxsVmlldy5leHRlbmQoewoKICAgIGNsYXNzTmFtZTogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF8udW5pcXVlKHRoaXMubW9kZWwuZ2V0KCd0eXBlJykuc3BsaXQoJy4nKS5jb25jYXQoJ2xpbmsnKSkuam9pbignICcpOwogICAgfSwKCiAgICBvcHRpb25zOiB7CgogICAgICAgIHNob3J0TGlua0xlbmd0aDogMTAwCiAgICB9LAogICAgCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHsKCiAgICAgICAgam9pbnQuZGlhLkNlbGxWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgogICAgICAgIC8vIGNyZWF0ZSBtZXRob2RzIGluIHByb3RvdHlwZSwgc28gdGhleSBjYW4gYmUgYWNjZXNzZWQgZnJvbSBhbnkgaW5zdGFuY2UgYW5kCiAgICAgICAgLy8gZG9uJ3QgbmVlZCB0byBiZSBjcmVhdGUgb3ZlciBhbmQgb3ZlcgogICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUud2F0Y2hTb3VyY2UgIT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUud2F0Y2hTb3VyY2UgPSB0aGlzLl9jcmVhdGVXYXRjaGVyKCdzb3VyY2UnKTsKICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUud2F0Y2hUYXJnZXQgPSB0aGlzLl9jcmVhdGVXYXRjaGVyKCd0YXJnZXQnKTsKICAgICAgICB9CgogICAgICAgIC8vIGBfLmxhYmVsQ2FjaGVgIGlzIGEgbWFwcGluZyBvZiBpbmRleGVzIG9mIGxhYmVscyBpbiB0aGUgYHRoaXMuZ2V0KCdsYWJlbHMnKWAgYXJyYXkgdG8KICAgICAgICAvLyBgPGcgY2xhc3M9ImxhYmVsIj5gIG5vZGVzIHdyYXBwZWQgYnkgVmVjdG9yaXplci4gVGhpcyBhbGxvd3MgZm9yIHF1aWNrIGFjY2VzcyB0byB0aGUKICAgICAgICAvLyBub2RlcyBpbiBgdXBkYXRlTGFiZWxQb3NpdGlvbigpYCBpbiBvcmRlciB0byB1cGRhdGUgdGhlIGxhYmVsIHBvc2l0aW9ucy4KICAgICAgICB0aGlzLl9sYWJlbENhY2hlID0ge307CgogICAgICAgIC8vIGtlZXBzIG1hcmtlcnMgYmJveGVzIGFuZCBwb3NpdGlvbnMgYWdhaW4gZm9yIHF1aWNrZXIgYWNjZXNzCiAgICAgICAgdGhpcy5fbWFya2VyQ2FjaGUgPSB7fTsKCiAgICAgICAgLy8gYmluZCBldmVudHMKICAgICAgICB0aGlzLnN0YXJ0TGlzdGVuaW5nKCk7CiAgICB9LAoKICAgIHN0YXJ0TGlzdGVuaW5nOiBmdW5jdGlvbigpIHsKCgl0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsICdjaGFuZ2U6bWFya3VwJywgdGhpcy5yZW5kZXIpOwoJdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCAnY2hhbmdlOnNtb290aCBjaGFuZ2U6bWFuaGF0dGFuIGNoYW5nZTpyb3V0ZXIgY2hhbmdlOmNvbm5lY3RvcicsIHRoaXMudXBkYXRlKTsKICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsICdjaGFuZ2U6dG9vbE1hcmt1cCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICB0aGlzLnJlbmRlclRvb2xzKCkudXBkYXRlVG9vbHNQb3NpdGlvbigpOwogICAgICAgIH0pOwoJdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCAnY2hhbmdlOmxhYmVscyBjaGFuZ2U6bGFiZWxNYXJrdXAnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5yZW5kZXJMYWJlbHMoKS51cGRhdGVMYWJlbFBvc2l0aW9ucygpOwogICAgICAgIH0pOwogICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgJ2NoYW5nZTp2ZXJ0aWNlcyBjaGFuZ2U6dmVydGV4TWFya3VwJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMucmVuZGVyVmVydGV4TWFya2VycygpLnVwZGF0ZSgpOwogICAgICAgIH0pOwoJdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCAnY2hhbmdlOnNvdXJjZScsIGZ1bmN0aW9uKGNlbGwsIHNvdXJjZSkgewogICAgICAgICAgICB0aGlzLndhdGNoU291cmNlKGNlbGwsIHNvdXJjZSkudXBkYXRlKCk7CiAgICAgICAgfSk7Cgl0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsICdjaGFuZ2U6dGFyZ2V0JywgZnVuY3Rpb24oY2VsbCwgdGFyZ2V0KSB7CiAgICAgICAgICAgIHRoaXMud2F0Y2hUYXJnZXQoY2VsbCwgdGFyZ2V0KS51cGRhdGUoKTsKICAgICAgICB9KTsKICAgIH0sCgogICAgLy8gUmVuZGVyaW5nCiAgICAvLy0tLS0tLS0tLS0KCiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgewoKCXRoaXMuJGVsLmVtcHR5KCk7CgogICAgICAgIC8vIEEgc3BlY2lhbCBtYXJrdXAgY2FuIGJlIGdpdmVuIGluIHRoZSBgcHJvcGVydGllcy5tYXJrdXBgIHByb3BlcnR5LiBUaGlzIG1pZ2h0IGJlIGhhbmR5CiAgICAgICAgLy8gaWYgZS5nLiBhcnJvd2hlYWQgbWFya2VycyBzaG91bGQgYmUgYDxpbWFnZT5gIGVsZW1lbnRzIG9yIGFueSBvdGhlciBlbGVtZW50IHRoYW4gYDxwYXRoPmBzLgogICAgICAgIC8vIGAuY29ubmVjdGlvbmAsIGAuY29ubmVjdGlvbi13cmFwYCwgYC5tYXJrZXItc291cmNlYCBhbmQgYC5tYXJrZXItdGFyZ2V0YCBzZWxlY3RvcnMKICAgICAgICAvLyBvZiBlbGVtZW50cyB3aXRoIHNwZWNpYWwgbWVhbmluZyB0aG91Z2guIFRoZXJlZm9yZSwgdGhvc2UgY2xhc3NlcyBzaG91bGQgYmUgcHJlc2VydmVkIGluIGFueQogICAgICAgIC8vIHNwZWNpYWwgbWFya3VwIHBhc3NlZCBpbiBgcHJvcGVydGllcy5tYXJrdXBgLgogICAgICAgIHZhciBjaGlsZHJlbiA9IFYodGhpcy5tb2RlbC5nZXQoJ21hcmt1cCcpIHx8IHRoaXMubW9kZWwubWFya3VwKTsKCiAgICAgICAgLy8gY3VzdG9tIG1hcmt1cCBtYXkgY29udGFpbiBvbmx5IG9uZSBjaGlsZHJlbgogICAgICAgIGlmICghXy5pc0FycmF5KGNoaWxkcmVuKSkgY2hpbGRyZW4gPSBbY2hpbGRyZW5dOwoKICAgICAgICAvLyBDYWNoZSBhbGwgY2hpbGRyZW4gZWxlbWVudHMgZm9yIHF1aWNrZXIgYWNjZXNzLgogICAgICAgIHRoaXMuX1YgPSB7fTsgLy8gdmVjdG9yaXplZCBtYXJrdXA7CiAgICAgICAgXy5lYWNoKGNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCkgewogICAgICAgICAgICB2YXIgYyA9IGNoaWxkLmF0dHIoJ2NsYXNzJyk7CiAgICAgICAgICAgIGMgJiYgKHRoaXMuX1ZbJC5jYW1lbENhc2UoYyldID0gY2hpbGQpOwogICAgICAgIH0sIHRoaXMpOwoKICAgICAgICAvLyBPbmx5IHRoZSBjb25uZWN0aW9uIHBhdGggaXMgbWFuZGF0b3J5CiAgICAgICAgaWYgKCF0aGlzLl9WLmNvbm5lY3Rpb24pIHRocm93IG5ldyBFcnJvcignbGluazogbm8gY29ubmVjdGlvbiBwYXRoIGluIHRoZSBtYXJrdXAnKTsKCiAgICAgICAgLy8gcGFydGlhbCByZW5kZXJpbmcKICAgICAgICB0aGlzLnJlbmRlclRvb2xzKCk7CiAgICAgICAgdGhpcy5yZW5kZXJWZXJ0ZXhNYXJrZXJzKCk7CiAgICAgICAgdGhpcy5yZW5kZXJBcnJvd2hlYWRNYXJrZXJzKCk7CgogICAgICAgIFYodGhpcy5lbCkuYXBwZW5kKGNoaWxkcmVuKTsKCiAgICAgICAgLy8gcmVuZGVyaW5nIGxhYmVscyBoYXMgdG8gYmUgcnVuIGFmdGVyIHRoZSBsaW5rIGlzIGFwcGVuZGVkIHRvIERPTSB0cmVlLiAob3RoZXJ3aXNlIDxUZXh0PiBiYm94CiAgICAgICAgLy8gcmV0dXJucyB6ZXJvIHZhbHVlcykKICAgICAgICB0aGlzLnJlbmRlckxhYmVscygpOwoKICAgICAgICAvLyBzdGFydCB3YXRjaGluZyB0aGUgZW5kcyBvZiB0aGUgbGluayBmb3IgY2hhbmdlcwogICAgICAgIHRoaXMud2F0Y2hTb3VyY2UodGhpcy5tb2RlbCwgdGhpcy5tb2RlbC5nZXQoJ3NvdXJjZScpKQogICAgICAgICAgICAud2F0Y2hUYXJnZXQodGhpcy5tb2RlbCwgdGhpcy5tb2RlbC5nZXQoJ3RhcmdldCcpKQogICAgICAgICAgICAudXBkYXRlKCk7CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICByZW5kZXJMYWJlbHM6IGZ1bmN0aW9uKCkgewoKICAgICAgICBpZiAoIXRoaXMuX1YubGFiZWxzKSByZXR1cm4gdGhpczsKCiAgICAgICAgdGhpcy5fbGFiZWxDYWNoZSA9IHt9OwogICAgICAgIHZhciAkbGFiZWxzID0gJCh0aGlzLl9WLmxhYmVscy5ub2RlKS5lbXB0eSgpOwoKICAgICAgICB2YXIgbGFiZWxzID0gdGhpcy5tb2RlbC5nZXQoJ2xhYmVscycpIHx8IFtdOwogICAgICAgIGlmICghbGFiZWxzLmxlbmd0aCkgcmV0dXJuIHRoaXM7CiAgICAgICAgCiAgICAgICAgdmFyIGxhYmVsVGVtcGxhdGUgPSBfLnRlbXBsYXRlKHRoaXMubW9kZWwuZ2V0KCdsYWJlbE1hcmt1cCcpIHx8IHRoaXMubW9kZWwubGFiZWxNYXJrdXApOwogICAgICAgIC8vIFRoaXMgaXMgYSBwcmVwYXJlZCBpbnN0YW5jZSBvZiBhIHZlY3Rvcml6ZWQgU1ZHRE9NIG5vZGUgZm9yIHRoZSBsYWJlbCBlbGVtZW50IHJlc3VsdGluZyBmcm9tCiAgICAgICAgLy8gY29tcGlsYXRpb24gb2YgdGhlIGxhYmVsVGVtcGxhdGUuIFRoZSBwdXJwb3NlIGlzIHRoYXQgYWxsIGxhYmVscyB3aWxsIGp1c3QgYGNsb25lKClgIHRoaXMKICAgICAgICAvLyBub2RlIHRvIGNyZWF0ZSBhIGR1cGxpY2F0ZS4KICAgICAgICB2YXIgbGFiZWxOb2RlSW5zdGFuY2UgPSBWKGxhYmVsVGVtcGxhdGUoKSk7CgogICAgICAgIF8uZWFjaChsYWJlbHMsIGZ1bmN0aW9uKGxhYmVsLCBpZHgpIHsKCiAgICAgICAgICAgIHZhciBsYWJlbE5vZGUgPSBsYWJlbE5vZGVJbnN0YW5jZS5jbG9uZSgpLm5vZGU7CiAgICAgICAgICAgIC8vIENhY2hlIGxhYmVsIG5vZGVzIHNvIHRoYXQgdGhlIGB1cGRhdGVMYWJlbHMoKWAgY2FuIGp1c3QgdXBkYXRlIHRoZSBsYWJlbCBub2RlIHBvc2l0aW9ucy4KICAgICAgICAgICAgdGhpcy5fbGFiZWxDYWNoZVtpZHhdID0gVihsYWJlbE5vZGUpOwoKICAgICAgICAgICAgdmFyICR0ZXh0ID0gJChsYWJlbE5vZGUpLmZpbmQoJ3RleHQnKTsKICAgICAgICAgICAgdmFyICRyZWN0ID0gJChsYWJlbE5vZGUpLmZpbmQoJ3JlY3QnKTsKCiAgICAgICAgICAgIC8vIFRleHQgYXR0cmlidXRlcyB3aXRoIHRoZSBkZWZhdWx0IGB0ZXh0LWFuY2hvcmAgYW5kIGZvbnQtc2l6ZSBzZXQuCiAgICAgICAgICAgIHZhciB0ZXh0QXR0cmlidXRlcyA9IF8uZXh0ZW5kKHsgJ3RleHQtYW5jaG9yJzogJ21pZGRsZScsICdmb250LXNpemUnOiAxNCB9LCBqb2ludC51dGlsLmdldEJ5UGF0aChsYWJlbCwgJ2F0dHJzL3RleHQnLCAnLycpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICR0ZXh0LmF0dHIoXy5vbWl0KHRleHRBdHRyaWJ1dGVzLCAndGV4dCcpKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQodGV4dEF0dHJpYnV0ZXMudGV4dCkpIHsKCiAgICAgICAgICAgICAgICBWKCR0ZXh0WzBdKS50ZXh0KHRleHRBdHRyaWJ1dGVzLnRleHQgKyAnJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBmaXJzdCBuZWVkIHRvIGFwcGVuZCB0aGUgYDx0ZXh0PmAgZWxlbWVudCB0byB0aGUgRE9NIGluIG9yZGVyIHRvCiAgICAgICAgICAgIC8vIGdldCBpdHMgYm91bmRpbmcgYm94LgogICAgICAgICAgICAkbGFiZWxzLmFwcGVuZChsYWJlbE5vZGUpOwoKICAgICAgICAgICAgLy8gYHktYWxpZ25tZW50YCAtIGNlbnRlciB0aGUgdGV4dCBlbGVtZW50IGFyb3VuZCBpdHMgeSBjb29yZGluYXRlLgogICAgICAgICAgICB2YXIgdGV4dEJib3ggPSBWKCR0ZXh0WzBdKS5iYm94KHRydWUsICRsYWJlbHNbMF0pOwogICAgICAgICAgICBWKCR0ZXh0WzBdKS50cmFuc2xhdGUoMCwgLXRleHRCYm94LmhlaWdodC8yKTsKCiAgICAgICAgICAgIC8vIEFkZCBkZWZhdWx0IHZhbHVlcy4KICAgICAgICAgICAgdmFyIHJlY3RBdHRyaWJ1dGVzID0gXy5leHRlbmQoewoKICAgICAgICAgICAgICAgIGZpbGw6ICd3aGl0ZScsCiAgICAgICAgICAgICAgICByeDogMywKICAgICAgICAgICAgICAgIHJ5OiAzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfSwgam9pbnQudXRpbC5nZXRCeVBhdGgobGFiZWwsICdhdHRycy9yZWN0JywgJy8nKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICAkcmVjdC5hdHRyKF8uZXh0ZW5kKHJlY3RBdHRyaWJ1dGVzLCB7CgogICAgICAgICAgICAgICAgeDogdGV4dEJib3gueCwKICAgICAgICAgICAgICAgIHk6IHRleHRCYm94LnkgLSB0ZXh0QmJveC5oZWlnaHQvMiwgIC8vIFRha2UgaW50byBhY2NvdW50IHRoZSB5LWFsaWdubWVudCB0cmFuc2xhdGlvbi4KICAgICAgICAgICAgICAgIHdpZHRoOiB0ZXh0QmJveC53aWR0aCwKICAgICAgICAgICAgICAgIGhlaWdodDogdGV4dEJib3guaGVpZ2h0CiAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgCiAgICAgICAgfSwgdGhpcyk7CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICByZW5kZXJUb29sczogZnVuY3Rpb24oKSB7CgogICAgICAgIGlmICghdGhpcy5fVi5saW5rVG9vbHMpIHJldHVybiB0aGlzOwoKICAgICAgICAvLyBUb29scyBhcmUgYSBncm91cCBvZiBjbGlja2FibGUgZWxlbWVudHMgdGhhdCBtYW5pcHVsYXRlIHRoZSB3aG9sZSBsaW5rLgogICAgICAgIC8vIEEgZ29vZCBleGFtcGxlIG9mIHRoaXMgaXMgdGhlIHJlbW92ZSB0b29sIHRoYXQgcmVtb3ZlcyB0aGUgd2hvbGUgbGluay4KICAgICAgICAvLyBUb29scyBhcHBlYXIgYWZ0ZXIgaG92ZXJpbmcgdGhlIGxpbmsgY2xvc2UgdG8gdGhlIGBzb3VyY2VgIGVsZW1lbnQvcG9pbnQgb2YgdGhlIGxpbmsKICAgICAgICAvLyBidXQgYXJlIG9mZnNldCBhIGJpdCBzbyB0aGF0IHRoZXkgZG9uJ3QgY292ZXIgdGhlIGBtYXJrZXItYXJyb3doZWFkYC4KCiAgICAgICAgdmFyICR0b29scyA9ICQodGhpcy5fVi5saW5rVG9vbHMubm9kZSkuZW1wdHkoKTsKICAgICAgICB2YXIgdG9vbFRlbXBsYXRlID0gXy50ZW1wbGF0ZSh0aGlzLm1vZGVsLmdldCgndG9vbE1hcmt1cCcpIHx8IHRoaXMubW9kZWwudG9vbE1hcmt1cCk7CiAgICAgICAgdmFyIHRvb2wgPSBWKHRvb2xUZW1wbGF0ZSgpKTsKCiAgICAgICAgJHRvb2xzLmFwcGVuZCh0b29sLm5vZGUpOwogICAgICAgIAogICAgICAgIC8vIENhY2hlIHRoZSB0b29sIG5vZGUgc28gdGhhdCB0aGUgYHVwZGF0ZVRvb2xzUG9zaXRpb24oKWAgY2FuIHVwZGF0ZSB0aGUgdG9vbCBwb3NpdGlvbiBxdWlja2x5LgogICAgICAgIHRoaXMuX3Rvb2xDYWNoZSA9IHRvb2w7CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICByZW5kZXJWZXJ0ZXhNYXJrZXJzOiBmdW5jdGlvbigpIHsKCiAgICAgICAgaWYgKCF0aGlzLl9WLm1hcmtlclZlcnRpY2VzKSByZXR1cm4gdGhpczsKCiAgICAgICAgdmFyICRtYXJrZXJWZXJ0aWNlcyA9ICQodGhpcy5fVi5tYXJrZXJWZXJ0aWNlcy5ub2RlKS5lbXB0eSgpOwoKICAgICAgICAvLyBBIHNwZWNpYWwgbWFya3VwIGNhbiBiZSBnaXZlbiBpbiB0aGUgYHByb3BlcnRpZXMudmVydGV4TWFya3VwYCBwcm9wZXJ0eS4gVGhpcyBtaWdodCBiZSBoYW5keQogICAgICAgIC8vIGlmIGRlZmF1bHQgc3R5bGluZyAoZWxlbWVudHMpIGFyZSBub3QgZGVzaXJlZC4gVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSB0byB1c2UgYW55CiAgICAgICAgLy8gU1ZHIGVsZW1lbnRzIGZvciAubWFya2VyLXZlcnRleCBhbmQgLm1hcmtlci12ZXJ0ZXgtcmVtb3ZlIHRvb2xzLgogICAgICAgIHZhciBtYXJrdXBUZW1wbGF0ZSA9IF8udGVtcGxhdGUodGhpcy5tb2RlbC5nZXQoJ3ZlcnRleE1hcmt1cCcpIHx8IHRoaXMubW9kZWwudmVydGV4TWFya3VwKTsKICAgICAgICAKICAgICAgICBfLmVhY2godGhpcy5tb2RlbC5nZXQoJ3ZlcnRpY2VzJyksIGZ1bmN0aW9uKHZlcnRleCwgaWR4KSB7CgogICAgICAgICAgICAkbWFya2VyVmVydGljZXMuYXBwZW5kKFYobWFya3VwVGVtcGxhdGUoXy5leHRlbmQoeyBpZHg6IGlkeCB9LCB2ZXJ0ZXgpKSkubm9kZSk7CiAgICAgICAgfSk7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIHJlbmRlckFycm93aGVhZE1hcmtlcnM6IGZ1bmN0aW9uKCkgewoKICAgICAgICAvLyBDdXN0b20gbWFya3VwcyBtaWdodCBub3QgaGF2ZSBhcnJvd2hlYWQgbWFya2Vycy4gVGhlcmVmb3JlLCBqdW1wIG9mIHRoaXMgZnVuY3Rpb24gaW1tZWRpYXRlbHkgaWYgdGhhdCdzIHRoZSBjYXNlLgogICAgICAgIGlmICghdGhpcy5fVi5tYXJrZXJBcnJvd2hlYWRzKSByZXR1cm4gdGhpczsKCiAgICAgICAgdmFyICRtYXJrZXJBcnJvd2hlYWRzID0gJCh0aGlzLl9WLm1hcmtlckFycm93aGVhZHMubm9kZSk7CgogICAgICAgICRtYXJrZXJBcnJvd2hlYWRzLmVtcHR5KCk7CgogICAgICAgIC8vIEEgc3BlY2lhbCBtYXJrdXAgY2FuIGJlIGdpdmVuIGluIHRoZSBgcHJvcGVydGllcy52ZXJ0ZXhNYXJrdXBgIHByb3BlcnR5LiBUaGlzIG1pZ2h0IGJlIGhhbmR5CiAgICAgICAgLy8gaWYgZGVmYXVsdCBzdHlsaW5nIChlbGVtZW50cykgYXJlIG5vdCBkZXNpcmVkLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIHVzZSBhbnkKICAgICAgICAvLyBTVkcgZWxlbWVudHMgZm9yIC5tYXJrZXItdmVydGV4IGFuZCAubWFya2VyLXZlcnRleC1yZW1vdmUgdG9vbHMuCiAgICAgICAgdmFyIG1hcmt1cFRlbXBsYXRlID0gXy50ZW1wbGF0ZSh0aGlzLm1vZGVsLmdldCgnYXJyb3doZWFkTWFya3VwJykgfHwgdGhpcy5tb2RlbC5hcnJvd2hlYWRNYXJrdXApOwoKICAgICAgICB0aGlzLl9WLnNvdXJjZUFycm93aGVhZCA9IFYobWFya3VwVGVtcGxhdGUoeyBlbmQ6ICdzb3VyY2UnIH0pKTsKICAgICAgICB0aGlzLl9WLnRhcmdldEFycm93aGVhZCA9IFYobWFya3VwVGVtcGxhdGUoeyBlbmQ6ICd0YXJnZXQnIH0pKTsKCiAgICAgICAgJG1hcmtlckFycm93aGVhZHMuYXBwZW5kKHRoaXMuX1Yuc291cmNlQXJyb3doZWFkLm5vZGUsIHRoaXMuX1YudGFyZ2V0QXJyb3doZWFkLm5vZGUpOwoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gVXBkYXRpbmcKICAgIC8vLS0tLS0tLS0tCgogICAgLy8gRGVmYXVsdCBpcyB0byBwcm9jZXNzIHRoZSBgYXR0cnNgIG9iamVjdCBhbmQgc2V0IGF0dHJpYnV0ZXMgb24gc3ViZWxlbWVudHMgYmFzZWQgb24gdGhlIHNlbGVjdG9ycy4KICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7CgogICAgICAgIC8vIFVwZGF0ZSBhdHRyaWJ1dGVzLgogICAgICAgIF8uZWFjaCh0aGlzLm1vZGVsLmdldCgnYXR0cnMnKSwgZnVuY3Rpb24oYXR0cnMsIHNlbGVjdG9yKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBJZiB0aGUgYGZpbHRlcmAgYXR0cmlidXRlIGlzIGFuIG9iamVjdCwgaXQgaXMgaW4gdGhlIHNwZWNpYWwgSm9pbnRKUyBmaWx0ZXIgZm9ybWF0IGFuZCBzbwogICAgICAgICAgICAvLyBpdCBiZWNvbWVzIGEgc3BlY2lhbCBhdHRyaWJ1dGUgYW5kIGlzIHRyZWF0ZWQgc2VwYXJhdGVseS4KICAgICAgICAgICAgaWYgKF8uaXNPYmplY3QoYXR0cnMuZmlsdGVyKSkgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aGlzLmZpbmRCeVNlbGVjdG9yKHNlbGVjdG9yKS5hdHRyKF8ub21pdChhdHRycywgJ2ZpbHRlcicpKTsKICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlGaWx0ZXIoc2VsZWN0b3IsIGF0dHJzLmZpbHRlcik7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGhpcy5maW5kQnlTZWxlY3RvcihzZWxlY3RvcikuYXR0cihhdHRycyk7CiAgICAgICAgICAgIH0KICAgICAgICB9LCB0aGlzKTsKCiAgICAgICAgLy8gUGF0aCBmaW5kaW5nCiAgICAgICAgdmFyIHZlcnRpY2VzID0gdGhpcy5yb3V0ZSA9IHRoaXMuZmluZFJvdXRlKHRoaXMubW9kZWwuZ2V0KCd2ZXJ0aWNlcycpIHx8IFtdKTsKCiAgICAgICAgLy8gZmluZHMgYWxsIHRoZSBjb25uZWN0aW9uIHBvaW50cyB0YWtpbmcgbmV3IHZlcnRpY2VzIGludG8gYWNjb3VudAogICAgICAgIHRoaXMuX2ZpbmRDb25uZWN0aW9uUG9pbnRzKHZlcnRpY2VzKTsKCiAgICAgICAgdmFyIHBhdGhEYXRhID0gdGhpcy5nZXRQYXRoRGF0YSh2ZXJ0aWNlcyk7CgogICAgICAgIC8vIFRoZSBtYXJrdXAgbmVlZHMgdG8gY29udGFpbiBhIGAuY29ubmVjdGlvbmAKICAgICAgICB0aGlzLl9WLmNvbm5lY3Rpb24uYXR0cignZCcsIHBhdGhEYXRhKTsKICAgICAgICB0aGlzLl9WLmNvbm5lY3Rpb25XcmFwICYmIHRoaXMuX1YuY29ubmVjdGlvbldyYXAuYXR0cignZCcsIHBhdGhEYXRhKTsKCiAgICAgICAgdGhpcy5fdHJhbnNsYXRlQW5kQXV0b09yaWVudEFycm93cyh0aGlzLl9WLm1hcmtlclNvdXJjZSwgdGhpcy5fVi5tYXJrZXJUYXJnZXQpOwoKICAgICAgICAvL3BhcnRpYWxzIHVwZGF0ZXMKICAgICAgICB0aGlzLnVwZGF0ZUxhYmVsUG9zaXRpb25zKCk7CiAgICAgICAgdGhpcy51cGRhdGVUb29sc1Bvc2l0aW9uKCk7CiAgICAgICAgdGhpcy51cGRhdGVBcnJvd2hlYWRNYXJrZXJzKCk7CgogICAgICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnMucGVycGVuZGljdWxhcjsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIF9maW5kQ29ubmVjdGlvblBvaW50czogZnVuY3Rpb24odmVydGljZXMpIHsKCiAgICAgICAgLy8gY2FjaGUgc291cmNlIGFuZCB0YXJnZXQgcG9pbnRzCiAgICAgICAgdmFyIHNvdXJjZVBvaW50LCB0YXJnZXRQb2ludCwgc291cmNlTWFya2VyUG9pbnQsIHRhcmdldE1hcmtlclBvaW50OwoKICAgICAgICB2YXIgZmlyc3RWZXJ0ZXggPSBfLmZpcnN0KHZlcnRpY2VzKTsKCiAgICAgICAgc291cmNlUG9pbnQgPSB0aGlzLmdldENvbm5lY3Rpb25Qb2ludCgKICAgICAgICAgICAgJ3NvdXJjZScsIHRoaXMubW9kZWwuZ2V0KCdzb3VyY2UnKSwgZmlyc3RWZXJ0ZXggfHwgdGhpcy5tb2RlbC5nZXQoJ3RhcmdldCcpCiAgICAgICAgKS5yb3VuZCgpOwoKICAgICAgICB2YXIgbGFzdFZlcnRleCA9IF8ubGFzdCh2ZXJ0aWNlcyk7CgogICAgICAgIHRhcmdldFBvaW50ID0gdGhpcy5nZXRDb25uZWN0aW9uUG9pbnQoCiAgICAgICAgICAgICd0YXJnZXQnLCB0aGlzLm1vZGVsLmdldCgndGFyZ2V0JyksIGxhc3RWZXJ0ZXggfHwgc291cmNlUG9pbnQKICAgICAgICApLnJvdW5kKCk7CgogICAgICAgIC8vIE1vdmUgdGhlIHNvdXJjZSBwb2ludCBieSB0aGUgd2lkdGggb2YgdGhlIG1hcmtlciB0YWtpbmcgaW50byBhY2NvdW50CiAgICAgICAgLy8gaXRzIHNjYWxlIGFyb3VuZCB4LWF4aXMuIE5vdGUgdGhhdCBzY2FsZSBpcyB0aGUgb25seSB0cmFuc2Zvcm0gdGhhdAogICAgICAgIC8vIG1ha2VzIHNlbnNlIHRvIGJlIHNldCBpbiBgLm1hcmtlci1zb3VyY2VgIGF0dHJpYnV0ZXMgb2JqZWN0CiAgICAgICAgLy8gYXMgYWxsIG90aGVyIHRyYW5zZm9ybXMgKHRyYW5zbGF0ZS9yb3RhdGUpIHdpbGwgYmUgcmVwbGFjZWQKICAgICAgICAvLyBieSB0aGUgYHRyYW5zbGF0ZUFuZEF1dG9PcmllbnQoKWAgZnVuY3Rpb24uCiAgICAgICAgdmFyIGNhY2hlID0gdGhpcy5fbWFya2VyQ2FjaGU7CgogICAgICAgIGlmICh0aGlzLl9WLm1hcmtlclNvdXJjZSkgewoKICAgICAgICAgICAgY2FjaGUuc291cmNlQkJveCA9IGNhY2hlLnNvdXJjZUJCb3ggfHwgdGhpcy5fVi5tYXJrZXJTb3VyY2UuYmJveCh0cnVlKTsKCiAgICAgICAgICAgIHNvdXJjZU1hcmtlclBvaW50ID0gZy5wb2ludChzb3VyY2VQb2ludCkubW92ZSgKICAgICAgICAgICAgICAgIGZpcnN0VmVydGV4IHx8IHRhcmdldFBvaW50LAogICAgICAgICAgICAgICAgY2FjaGUuc291cmNlQkJveC53aWR0aCAqIHRoaXMuX1YubWFya2VyU291cmNlLnNjYWxlKCkuc3ggKiAtMQogICAgICAgICAgICApLnJvdW5kKCk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5fVi5tYXJrZXJUYXJnZXQpIHsKCiAgICAgICAgICAgIGNhY2hlLnRhcmdldEJCb3ggPSBjYWNoZS50YXJnZXRCQm94IHx8IHRoaXMuX1YubWFya2VyVGFyZ2V0LmJib3godHJ1ZSk7CgogICAgICAgICAgICB0YXJnZXRNYXJrZXJQb2ludCA9IGcucG9pbnQodGFyZ2V0UG9pbnQpLm1vdmUoCiAgICAgICAgICAgICAgICBsYXN0VmVydGV4IHx8IHNvdXJjZVBvaW50LAogICAgICAgICAgICAgICAgY2FjaGUudGFyZ2V0QkJveC53aWR0aCAqIHRoaXMuX1YubWFya2VyVGFyZ2V0LnNjYWxlKCkuc3ggKiAtMQogICAgICAgICAgICApLnJvdW5kKCk7CiAgICAgICAgfQoKICAgICAgICAvLyBpZiB0aGVyZSB3YXMgbm8gbWFya3VwIGZvciB0aGUgbWFya2VyLCB1c2UgdGhlIGNvbm5lY3Rpb24gcG9pbnQuCiAgICAgICAgY2FjaGUuc291cmNlUG9pbnQgPSBzb3VyY2VNYXJrZXJQb2ludCB8fCBzb3VyY2VQb2ludDsKICAgICAgICBjYWNoZS50YXJnZXRQb2ludCA9IHRhcmdldE1hcmtlclBvaW50IHx8IHRhcmdldFBvaW50OwoKICAgICAgICAvLyBtYWtlIGNvbm5lY3Rpb24gcG9pbnRzIHB1YmxpYwogICAgICAgIHRoaXMuc291cmNlUG9pbnQgPSBzb3VyY2VQb2ludDsKICAgICAgICB0aGlzLnRhcmdldFBvaW50ID0gdGFyZ2V0UG9pbnQ7CiAgICB9LAoKICAgIHVwZGF0ZUxhYmVsUG9zaXRpb25zOiBmdW5jdGlvbigpIHsKCiAgICAgICAgaWYgKCF0aGlzLl9WLmxhYmVscykgcmV0dXJuIHRoaXM7CgogICAgICAgIC8vIFRoaXMgbWV0aG9kIGFzc3VtZXMgYWxsIHRoZSBsYWJlbCBub2RlcyBhcmUgc3RvcmVkIGluIHRoZSBgdGhpcy5fbGFiZWxDYWNoZWAgaGFzaCB0YWJsZQogICAgICAgIC8vIGJ5IHRoZWlyIGluZGV4ZXMgaW4gdGhlIGB0aGlzLmdldCgnbGFiZWxzJylgIGFycmF5LiBUaGlzIGlzIGRvbmUgaW4gdGhlIGByZW5kZXJMYWJlbHMoKWAgbWV0aG9kLgoKICAgICAgICB2YXIgbGFiZWxzID0gdGhpcy5tb2RlbC5nZXQoJ2xhYmVscycpIHx8IFtdOwogICAgICAgIGlmICghbGFiZWxzLmxlbmd0aCkgcmV0dXJuIHRoaXM7CgogICAgICAgIHZhciBjb25uZWN0aW9uRWxlbWVudCA9IHRoaXMuX1YuY29ubmVjdGlvbi5ub2RlOwogICAgICAgIHZhciBjb25uZWN0aW9uTGVuZ3RoID0gY29ubmVjdGlvbkVsZW1lbnQuZ2V0VG90YWxMZW5ndGgoKTsKCiAgICAgICAgXy5lYWNoKGxhYmVscywgZnVuY3Rpb24obGFiZWwsIGlkeCkgewoKICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gbGFiZWwucG9zaXRpb247CiAgICAgICAgICAgIHBvc2l0aW9uID0gKHBvc2l0aW9uID4gY29ubmVjdGlvbkxlbmd0aCkgPyBjb25uZWN0aW9uTGVuZ3RoIDogcG9zaXRpb247IC8vIHNhbml0eSBjaGVjawogICAgICAgICAgICBwb3NpdGlvbiA9IChwb3NpdGlvbiA8IDApID8gY29ubmVjdGlvbkxlbmd0aCArIHBvc2l0aW9uIDogcG9zaXRpb247CiAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPiAxID8gcG9zaXRpb24gOiBjb25uZWN0aW9uTGVuZ3RoICogcG9zaXRpb247CgogICAgICAgICAgICB2YXIgbGFiZWxDb29yZGluYXRlcyA9IGNvbm5lY3Rpb25FbGVtZW50LmdldFBvaW50QXRMZW5ndGgocG9zaXRpb24pOwoKICAgICAgICAgICAgdGhpcy5fbGFiZWxDYWNoZVtpZHhdLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIGxhYmVsQ29vcmRpbmF0ZXMueCArICcsICcgKyBsYWJlbENvb3JkaW5hdGVzLnkgKyAnKScpOwoKICAgICAgICB9LCB0aGlzKTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKCiAgICB1cGRhdGVUb29sc1Bvc2l0aW9uOiBmdW5jdGlvbigpIHsKCiAgICAgICAgaWYgKCF0aGlzLl9WLmxpbmtUb29scykgcmV0dXJuIHRoaXM7CgogICAgICAgIC8vIE1vdmUgdGhlIHRvb2xzIGEgYml0IHRvIHRoZSB0YXJnZXQgcG9zaXRpb24gYnV0IGRvbid0IGNvdmVyIHRoZSBgc291cmNlQXJyb3doZWFkYCBtYXJrZXIuCiAgICAgICAgLy8gTm90ZSB0aGF0IHRoZSBvZmZzZXQgaXMgaGFyZGNvZGVkIGhlcmUuIFRoZSBvZmZzZXQgc2hvdWxkIGJlIGFsd2F5cwogICAgICAgIC8vIG1vcmUgdGhhbiB0aGUgYHRoaXMuJCgnLm1hcmtlci1hcnJvd2hlYWRbZW5kPSJzb3VyY2UiXScpWzBdLmJib3goKS53aWR0aGAgYnV0IGxvb2tpbmcKICAgICAgICAvLyB0aGlzIHVwIGFsbCB0aGUgdGltZSB3b3VsZCBiZSBzbG93LgoKICAgICAgICB2YXIgc2NhbGUgPSAnJzsKICAgICAgICB2YXIgb2Zmc2V0ID0gNDA7CgogICAgICAgIC8vIElmIHRoZSBsaW5rIGlzIHRvbyBzaG9ydCwgbWFrZSB0aGUgdG9vbHMgaGFsZiB0aGUgc2l6ZSBhbmQgdGhlIG9mZnNldCB0d2ljZSBhcyBsb3cuCiAgICAgICAgaWYgKHRoaXMuZ2V0Q29ubmVjdGlvbkxlbmd0aCgpIDwgdGhpcy5vcHRpb25zLnNob3J0TGlua0xlbmd0aCkgewogICAgICAgICAgICBzY2FsZSA9ICdzY2FsZSguNSknOwogICAgICAgICAgICBvZmZzZXQgLz0gMjsKICAgICAgICB9CgogICAgICAgIHZhciB0b29sUG9zaXRpb24gPSB0aGlzLmdldFBvaW50QXRMZW5ndGgob2Zmc2V0KTsKICAgICAgICAKICAgICAgICB0aGlzLl90b29sQ2FjaGUuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgdG9vbFBvc2l0aW9uLnggKyAnLCAnICsgdG9vbFBvc2l0aW9uLnkgKyAnKSAnICsgc2NhbGUpOwoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0sCgoKICAgIHVwZGF0ZUFycm93aGVhZE1hcmtlcnM6IGZ1bmN0aW9uKCkgewoKICAgICAgICBpZiAoIXRoaXMuX1YubWFya2VyQXJyb3doZWFkcykgcmV0dXJuIHRoaXM7CgogICAgICAgIC8vIGdldHRpbmcgYmJveCBvZiBhbiBlbGVtZW50IHdpdGggYGRpc3BsYXk9Im5vbmUiYCBpbiBJRTkgZW5kcyB1cCB3aXRoIGFjY2VzcyB2aW9sYXRpb24KICAgICAgICBpZiAoJC5jc3ModGhpcy5fVi5tYXJrZXJBcnJvd2hlYWRzLm5vZGUsICdkaXNwbGF5JykgPT09ICdub25lJykgcmV0dXJuIHRoaXM7CgogICAgICAgIHZhciBzeCA9IHRoaXMuZ2V0Q29ubmVjdGlvbkxlbmd0aCgpIDwgdGhpcy5vcHRpb25zLnNob3J0TGlua0xlbmd0aCA/IC41IDogMTsKICAgICAgICB0aGlzLl9WLnNvdXJjZUFycm93aGVhZC5zY2FsZShzeCk7CiAgICAgICAgdGhpcy5fVi50YXJnZXRBcnJvd2hlYWQuc2NhbGUoc3gpOwoKICAgICAgICB0aGlzLl90cmFuc2xhdGVBbmRBdXRvT3JpZW50QXJyb3dzKHRoaXMuX1Yuc291cmNlQXJyb3doZWFkLCB0aGlzLl9WLnRhcmdldEFycm93aGVhZCk7CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gb2JzZXJ2aW5nIGNoYW5nZXMgb24gYW4gZW5kIG9mIHRoZSBsaW5rLiBJZiBhIGNoYW5nZSBoYXBwZW5zIGFuZCBuZXcgZW5kIGlzIGEgbmV3IG1vZGVsLAogICAgLy8gaXQgc3RvcHMgbGlzdGVuaW5nIG9uIHRoZSBwcmV2aW91cyBvbmUgYW5kIHN0YXJ0cyBsaXN0ZW5pbmcgdG8gdGhlIG5ldyBvbmUuCiAgICBfY3JlYXRlV2F0Y2hlcjogZnVuY3Rpb24oZW5kVHlwZSkgewoKICAgICAgICBmdW5jdGlvbiB3YXRjaEVuZChsaW5rLCBlbmQpIHsKCiAgICAgICAgICAgIGVuZCA9IGVuZCB8fCB7fTsKCiAgICAgICAgICAgIHZhciBwcmV2aW91c0VuZCA9IGxpbmsucHJldmlvdXMoZW5kVHlwZSkgfHwge307CgogICAgICAgICAgICAvLyBQaWNrIHVwZGF0ZU1ldGhvZCB0aGlzLl9zb3VyY2VCYm94VXBkYXRlIG9yIHRoaXMuX3RhcmdldEJib3hVcGRhdGUuCiAgICAgICAgICAgIHZhciB1cGRhdGVFbmRGdW5jdGlvbiA9IHRoaXNbJ18nICsgZW5kVHlwZSArICdCQm94VXBkYXRlJ107CgogICAgICAgICAgICBpZiAodGhpcy5faXNNb2RlbChwcmV2aW91c0VuZCkpIHsKICAgICAgICAgICAgICAgIHRoaXMuc3RvcExpc3RlbmluZyh0aGlzLnBhcGVyLmdldE1vZGVsQnlJZChwcmV2aW91c0VuZC5pZCksICdjaGFuZ2UnLCB1cGRhdGVFbmRGdW5jdGlvbik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0aGlzLl9pc01vZGVsKGVuZCkpIHsKICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvYnNlcnZlZCBtb2RlbCBjaGFuZ2VzLCBpdCBjYWNoZXMgYSBuZXcgYmJveCBhbmQgZG8gdGhlIGxpbmsgdXBkYXRlLgogICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLnBhcGVyLmdldE1vZGVsQnlJZChlbmQuaWQpLCAnY2hhbmdlJywgdXBkYXRlRW5kRnVuY3Rpb24pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfLmJpbmQodXBkYXRlRW5kRnVuY3Rpb24sIHRoaXMpKHsgY2FjaGVPbmx5OiB0cnVlIH0pOwoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gd2F0Y2hFbmQ7CiAgICB9LAoKICAgIC8vIEl0J3MgaW1wb3J0YW50IHRvIGtlZXAgYm90aCBtZXRob2RzIChzb3VyY2VCYm94VXBkYXRlIGFuZCB0YXJnZXRCYm94VXBkYXRlKSBhcyB1bmlxdWUgbWV0aG9kcwogICAgLy8gYmVjYXVzZSBvZiBsb29wIGxpbmtzLiBXZSBoYXZlIHRvIGJlIGFibGUgdG8gZGV0ZXJtaW5lLCB3aGljaCBtZXRob2Qgd2Ugd2FudCB0byBzdG9wIGxpc3RlbiB0by4KICAgIC8vIExpc3RlblRvKG1vZGVsLCBldmVudCwgaGFuZGxlcikgYXMgbW9kZWwgYW5kIGV2ZW50IHdpbGwgYmUgaWRlbnRpY2FsLgogICAgX3NvdXJjZUJCb3hVcGRhdGU6IGZ1bmN0aW9uKHVwZGF0ZSkgewoKICAgICAgICAvLyBrZWVwIHRyYWNrIHdoaWNoIGVuZCBoYWQgYmVlbiBjaGFuZ2VkIHZlcnkgbGFzdAogICAgICAgIHRoaXMubGFzdEVuZENoYW5nZSA9ICdzb3VyY2UnOwoKICAgICAgICB1cGRhdGUgPSB1cGRhdGUgfHwge307CiAgICAgICAgdmFyIGVuZCA9IHRoaXMubW9kZWwuZ2V0KCdzb3VyY2UnKTsKCiAgICAgICAgaWYgKHRoaXMuX2lzTW9kZWwoZW5kKSkgewoKICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5fbWFrZVNlbGVjdG9yKGVuZCk7CiAgICAgICAgICAgIHZhciB2aWV3ID0gdGhpcy5wYXBlci5maW5kVmlld0J5TW9kZWwoZW5kLmlkKTsKICAgICAgICAgICAgdmFyIG1hZ25ldEVsZW1lbnQgPSB0aGlzLnBhcGVyLnZpZXdwb3J0LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOwoKICAgICAgICAgICAgdGhpcy5zb3VyY2VCQm94ID0gdmlldy5nZXRTdHJva2VCQm94KG1hZ25ldEVsZW1lbnQpOwoJICAgIHRoaXMuc291cmNlVmlldyA9IHZpZXc7CgkgICAgdGhpcy5zb3VyY2VNYWduZXQgPSBtYWduZXRFbGVtZW50OwoKICAgICAgICB9IGVsc2UgaWYgKGVuZCkgewogICAgICAgICAgICAvLyB0aGUgbGluayBlbmQgaXMgYSBwb2ludCB+IHJlY3QgMXgxCiAgICAgICAgICAgIHRoaXMuc291cmNlQkJveCA9IGcucmVjdChlbmQueCwgZW5kLnksIDEsIDEpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCF1cGRhdGUuY2FjaGVPbmx5KSB0aGlzLnVwZGF0ZSgpOwogICAgfSwKCiAgICBfdGFyZ2V0QkJveFVwZGF0ZTogZnVuY3Rpb24odXBkYXRlKSB7CgogICAgICAgIC8vIGtlZXAgdHJhY2sgd2hpY2ggZW5kIGhhZCBiZWVuIGNoYW5nZWQgdmVyeSBsYXN0CiAgICAgICAgdGhpcy5sYXN0RW5kQ2hhbmdlID0gJ3RhcmdldCc7CgogICAgICAgIHVwZGF0ZSA9IHVwZGF0ZSB8fCB7fTsKICAgICAgICB2YXIgZW5kID0gdGhpcy5tb2RlbC5nZXQoJ3RhcmdldCcpOwoKICAgICAgICBpZiAodGhpcy5faXNNb2RlbChlbmQpKSB7CgogICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLl9tYWtlU2VsZWN0b3IoZW5kKTsKICAgICAgICAgICAgdmFyIHZpZXcgPSB0aGlzLnBhcGVyLmZpbmRWaWV3QnlNb2RlbChlbmQuaWQpOwogICAgICAgICAgICB2YXIgbWFnbmV0RWxlbWVudCA9IHRoaXMucGFwZXIudmlld3BvcnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7CgogICAgICAgICAgICB0aGlzLnRhcmdldEJCb3ggPSB2aWV3LmdldFN0cm9rZUJCb3gobWFnbmV0RWxlbWVudCk7CgkgICAgdGhpcy50YXJnZXRWaWV3ID0gdmlldzsKCSAgICB0aGlzLnRhcmdldE1hZ25ldCA9IG1hZ25ldEVsZW1lbnQ7CgogICAgICAgIH0gZWxzZSBpZiAoZW5kKSB7CiAgICAgICAgICAgIC8vIHRoZSBsaW5rIGVuZCBpcyBhIHBvaW50IH4gcmVjdCAxeDEKICAgICAgICAgICAgdGhpcy50YXJnZXRCQm94ID0gZy5yZWN0KGVuZC54LCBlbmQueSwgMSwgMSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXVwZGF0ZS5jYWNoZU9ubHkpIHRoaXMudXBkYXRlKCk7CiAgICB9LAoKICAgIF90cmFuc2xhdGVBbmRBdXRvT3JpZW50QXJyb3dzOiBmdW5jdGlvbihzb3VyY2VBcnJvdywgdGFyZ2V0QXJyb3cpIHsKCiAgICAgICAgLy8gTWFrZSB0aGUgbWFya2VycyAicG9pbnQiIHRvIHRoZWlyIHN0aWNreSBwb2ludHMgYmVpbmcgYXV0by1vcmllbnRlZCB0b3dhcmRzCiAgICAgICAgLy8gYHRhcmdldFBvc2l0aW9uYC9gc291cmNlUG9zaXRpb25gLiBBbmQgZG8gc28gb25seSBpZiB0aGVyZSBpcyBhIG1hcmt1cCBmb3IgdGhlbS4KICAgICAgICBpZiAoc291cmNlQXJyb3cpIHsKICAgICAgICAgICAgc291cmNlQXJyb3cudHJhbnNsYXRlQW5kQXV0b09yaWVudCgKICAgICAgICAgICAgICAgIHRoaXMuc291cmNlUG9pbnQsCiAgICAgICAgICAgICAgICBfLmZpcnN0KHRoaXMucm91dGUpIHx8IHRoaXMudGFyZ2V0UG9pbnQsCiAgICAgICAgICAgICAgICB0aGlzLnBhcGVyLnZpZXdwb3J0CiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGFyZ2V0QXJyb3cpIHsKICAgICAgICAgICAgdGFyZ2V0QXJyb3cudHJhbnNsYXRlQW5kQXV0b09yaWVudCgKICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0UG9pbnQsCiAgICAgICAgICAgICAgICBfLmxhc3QodGhpcy5yb3V0ZSkgfHwgdGhpcy5zb3VyY2VQb2ludCwKICAgICAgICAgICAgICAgIHRoaXMucGFwZXIudmlld3BvcnQKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9LAoKICAgIHJlbW92ZVZlcnRleDogZnVuY3Rpb24oaWR4KSB7CgogICAgICAgIHZhciB2ZXJ0aWNlcyA9IF8uY2xvbmUodGhpcy5tb2RlbC5nZXQoJ3ZlcnRpY2VzJykpOwogICAgICAgIAogICAgICAgIGlmICh2ZXJ0aWNlcyAmJiB2ZXJ0aWNlcy5sZW5ndGgpIHsKCiAgICAgICAgICAgIHZlcnRpY2VzLnNwbGljZShpZHgsIDEpOwogICAgICAgICAgICB0aGlzLm1vZGVsLnNldCgndmVydGljZXMnLCB2ZXJ0aWNlcyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gVGhpcyBtZXRob2QgYWRzIGEgbmV3IHZlcnRleCB0byB0aGUgYHZlcnRpY2VzYCBhcnJheSBvZiBgLmNvbm5lY3Rpb25gLiBUaGlzIG1ldGhvZAogICAgLy8gdXNlcyBhIGhldXJpc3RpYyB0byBmaW5kIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgbmV3IGB2ZXJ0ZXhgIHNob3VsZCBiZSBwbGFjZWQgYXQgYXNzdW1pbmcKICAgIC8vIHRoZSBuZXcgdmVydGV4IGlzIHNvbWV3aGVyZSBvbiB0aGUgcGF0aC4KICAgIGFkZFZlcnRleDogZnVuY3Rpb24odmVydGV4KSB7CgogICAgICAgIHRoaXMubW9kZWwuc2V0KCdhdHRycycsIHRoaXMubW9kZWwuZ2V0KCdhdHRycycpIHx8IHt9KTsKICAgICAgICB2YXIgYXR0cnMgPSB0aGlzLm1vZGVsLmdldCgnYXR0cnMnKTsKICAgICAgICAKICAgICAgICAvLyBBcyBpdCBpcyB2ZXJ5IGhhcmQgdG8gZmluZCBhIGNvcnJlY3QgaW5kZXggb2YgdGhlIG5ld2x5IGNyZWF0ZWQgdmVydGV4LAogICAgICAgIC8vIGEgbGl0dGxlIGhldXJpc3RpY3MgaXMgdGFraW5nIHBsYWNlIGhlcmUuCiAgICAgICAgLy8gVGhlIGhldXJpc3RpY3MgY2hlY2tzIGlmIGxlbmd0aCBvZiB0aGUgbmV3bHkgY3JlYXRlZAogICAgICAgIC8vIHBhdGggaXMgbG90IG1vcmUgdGhhbiBsZW5ndGggb2YgdGhlIG9sZCBwYXRoLiBJZiB0aGlzIGlzIHRoZSBjYXNlLAogICAgICAgIC8vIG5ldyB2ZXJ0ZXggd2FzIHByb2JhYmx5IHB1dCBpbnRvIGEgd3JvbmcgaW5kZXguCiAgICAgICAgLy8gVHJ5IHRvIHB1dCBpdCBpbnRvIGFub3RoZXIgaW5kZXggYW5kIHJlcGVhdCB0aGUgaGV1cmlzdGljcyBhZ2Fpbi4KCiAgICAgICAgdmFyIHZlcnRpY2VzID0gKHRoaXMubW9kZWwuZ2V0KCd2ZXJ0aWNlcycpIHx8IFtdKS5zbGljZSgpOwogICAgICAgIC8vIFN0b3JlIHRoZSBvcmlnaW5hbCB2ZXJ0aWNlcyBmb3IgYSBsYXRlciByZXZlcnQgaWYgbmVlZGVkLgogICAgICAgIHZhciBvcmlnaW5hbFZlcnRpY2VzID0gdmVydGljZXMuc2xpY2UoKTsKCiAgICAgICAgLy8gQSBgPHBhdGg+YCBlbGVtZW50IHVzZWQgdG8gY29tcHV0ZSB0aGUgbGVuZ3RoIG9mIHRoZSBwYXRoIGR1cmluZyBoZXVyaXN0aWNzLgogICAgICAgIHZhciBwYXRoID0gdGhpcy5fVi5jb25uZWN0aW9uLm5vZGUuY2xvbmVOb2RlKGZhbHNlKTsKICAgICAgICAKICAgICAgICAvLyBMZW5ndGggb2YgdGhlIG9yaWdpbmFsIHBhdGguICAgICAgICAKICAgICAgICB2YXIgb3JpZ2luYWxQYXRoTGVuZ3RoID0gcGF0aC5nZXRUb3RhbExlbmd0aCgpOwogICAgICAgIC8vIEN1cnJlbnQgcGF0aCBsZW5ndGguCiAgICAgICAgdmFyIHBhdGhMZW5ndGg7CiAgICAgICAgLy8gVG9sZXJhbmNlIGRldGVybWluZXMgdGhlIGhpZ2hlc3QgcG9zc2libGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBsZW5ndGgKICAgICAgICAvLyBvZiB0aGUgb2xkIGFuZCBuZXcgcGF0aC4gVGhlIG51bWJlciBoYXMgYmVlbiBjaG9zZW4gaGV1cmlzdGljYWxseS4KICAgICAgICB2YXIgcGF0aExlbmd0aFRvbGVyYW5jZSA9IDIwOwogICAgICAgIC8vIFRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlcyBpbmNsdWRpbmcgc291cmNlIGFuZCB0YXJnZXQgcG9pbnRzLgogICAgICAgIHZhciBpZHggPSB2ZXJ0aWNlcy5sZW5ndGggKyAxOwoKICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHBvc3NpYmxlIGluZGV4ZXMgYW5kIGNoZWNrIGlmIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4KICAgICAgICAvLyBwYXRoIGxlbmd0aHMgY2hhbmdlcyBzaWduaWZpY2FudGx5LiBJZiBub3QsIHRoZSBmb3VuZCBpbmRleCBpcwogICAgICAgIC8vIG1vc3QgcHJvYmFibHkgdGhlIHJpZ2h0IG9uZS4KICAgICAgICB3aGlsZSAoaWR4LS0pIHsKCiAgICAgICAgICAgIHZlcnRpY2VzLnNwbGljZShpZHgsIDAsIHZlcnRleCk7CiAgICAgICAgICAgIFYocGF0aCkuYXR0cignZCcsIHRoaXMuZ2V0UGF0aERhdGEodGhpcy5maW5kUm91dGUodmVydGljZXMpKSk7CgogICAgICAgICAgICBwYXRoTGVuZ3RoID0gcGF0aC5nZXRUb3RhbExlbmd0aCgpOwoKICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHBhdGggbGVuZ3RocyBjaGFuZ2VkIHNpZ25pZmljYW50bHkuCiAgICAgICAgICAgIGlmIChwYXRoTGVuZ3RoIC0gb3JpZ2luYWxQYXRoTGVuZ3RoID4gcGF0aExlbmd0aFRvbGVyYW5jZSkgewoKICAgICAgICAgICAgICAgIC8vIFJldmVydCB2ZXJ0aWNlcyB0byB0aGUgb3JpZ2luYWwgYXJyYXkuIFRoZSBwYXRoIGxlbmd0aCBoYXMgY2hhbmdlZCB0b28gbXVjaAogICAgICAgICAgICAgICAgLy8gc28gdGhhdCB0aGUgaW5kZXggd2FzIG5vdCBmb3VuZCB5ZXQuCiAgICAgICAgICAgICAgICB2ZXJ0aWNlcyA9IG9yaWdpbmFsVmVydGljZXMuc2xpY2UoKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQoKCWlmIChpZHggPT09IC0xKSB7CgkgICAgLy8gSWYgbm8gc3VpdGFibGUgaW5kZXggd2FzIGZvdW5kIGZvciBzdWNoIGEgdmVydGV4LCBtYWtlIHRoZSB2ZXJ0ZXggdGhlIGZpcnN0IG9uZS4KCSAgICBpZHggPSAwOwoJICAgIHZlcnRpY2VzLnNwbGljZShpZHgsIDAsIHZlcnRleCk7Cgl9CgogICAgICAgIHRoaXMubW9kZWwuc2V0KCd2ZXJ0aWNlcycsIHZlcnRpY2VzKTsKCiAgICAgICAgcmV0dXJuIGlkeDsKICAgIH0sCgogICAgLy8gU2VuZCBhIHRva2VuIChhbiBTVkcgZWxlbWVudCwgdXN1YWxseSBhIGNpcmNsZSkgYWxvbmcgdGhlIGNvbm5lY3Rpb24gcGF0aC4KICAgIC8vIEV4YW1wbGU6IGBwYXBlci5maW5kVmlld0J5TW9kZWwobGluaykuc2VuZFRva2VuKFYoJ2NpcmNsZScsIHsgcjogNywgZmlsbDogJ2dyZWVuJyB9KS5ub2RlKWAKICAgIC8vIGBkdXJhdGlvbmAgaXMgb3B0aW9uYWwgYW5kIGlzIGEgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhhdCB0aGUgdG9rZW4gdHJhdmVscyBmcm9tIHRoZSBzb3VyY2UgdG8gdGhlIHRhcmdldCBvZiB0aGUgbGluay4gRGVmYXVsdCBpcyBgMTAwMGAuCiAgICAvLyBgY2FsbGJhY2tgIGlzIG9wdGlvbmFsIGFuZCBpcyBhIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbmNlIHRoZSB0b2tlbiByZWFjaGVzIHRoZSB0YXJnZXQuCiAgICBzZW5kVG9rZW46IGZ1bmN0aW9uKHRva2VuLCBkdXJhdGlvbiwgY2FsbGJhY2spIHsKCglkdXJhdGlvbiA9IGR1cmF0aW9uIHx8IDEwMDA7CgoJVih0aGlzLnBhcGVyLnZpZXdwb3J0KS5hcHBlbmQodG9rZW4pOwoJVih0b2tlbikuYW5pbWF0ZUFsb25nUGF0aCh7IGR1cjogZHVyYXRpb24gKyAnbXMnLCByZXBlYXRDb3VudDogMSB9LCB0aGlzLl9WLmNvbm5lY3Rpb24ubm9kZSk7CglfLmRlbGF5KGZ1bmN0aW9uKCkgeyBWKHRva2VuKS5yZW1vdmUoKTsgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTsgfSwgZHVyYXRpb24pOwogICAgfSwKCiAgICBmaW5kUm91dGU6IGZ1bmN0aW9uKG9sZFZlcnRpY2VzKSB7CgogICAgICAgIHZhciByb3V0ZXIgPSB0aGlzLm1vZGVsLmdldCgncm91dGVyJyk7CgogICAgICAgIGlmICghcm91dGVyKSB7CgogICAgICAgICAgICBpZiAodGhpcy5tb2RlbC5nZXQoJ21hbmhhdHRhbicpKSB7CiAgICAgICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGFiaWxpdHkKICAgICAgICAgICAgICAgIHJvdXRlciA9IHsgbmFtZTogJ29ydGhvZ29uYWwnIH07CiAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgcmV0dXJuIG9sZFZlcnRpY2VzOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgZm4gPSBqb2ludC5yb3V0ZXJzW3JvdXRlci5uYW1lXTsKCiAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24oZm4pKSB7CgogICAgICAgICAgICB0aHJvdyAndW5rbm93biByb3V0ZXI6ICcgKyByb3V0ZXIubmFtZTsKICAgICAgICB9CgogICAgICAgIHZhciBuZXdWZXJ0aWNlcyA9IGZuLmNhbGwodGhpcywgb2xkVmVydGljZXMgfHwgW10sIHJvdXRlci5hcmdzIHx8IHt9LCB0aGlzKTsKCiAgICAgICAgcmV0dXJuIG5ld1ZlcnRpY2VzOwogICAgfSwKCiAgICAvLyBSZXR1cm4gdGhlIGBkYCBhdHRyaWJ1dGUgdmFsdWUgb2YgdGhlIGA8cGF0aD5gIGVsZW1lbnQgcmVwcmVzZW50aW5nIHRoZSBsaW5rCiAgICAvLyBiZXR3ZWVuIGBzb3VyY2VgIGFuZCBgdGFyZ2V0YC4KICAgIGdldFBhdGhEYXRhOiBmdW5jdGlvbih2ZXJ0aWNlcykgewoKICAgICAgICB2YXIgY29ubmVjdG9yID0gdGhpcy5tb2RlbC5nZXQoJ2Nvbm5lY3RvcicpOwoKICAgICAgICBpZiAoIWNvbm5lY3RvcikgewoKICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhYmlsaXR5CiAgICAgICAgICAgIGNvbm5lY3RvciA9IHRoaXMubW9kZWwuZ2V0KCdzbW9vdGgnKSA/IHsgbmFtZTogJ3Ntb290aCcgfSA6IHsgbmFtZTogJ25vcm1hbCcgfTsKICAgICAgICB9CgogICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKGpvaW50LmNvbm5lY3RvcnNbY29ubmVjdG9yLm5hbWVdKSkgewoKICAgICAgICAgICAgdGhyb3cgJ3Vua25vd24gY29ubmVjdG9yOiAnICsgY29ubmVjdG9yLm5hbWU7CiAgICAgICAgfQoKICAgICAgICB2YXIgcGF0aERhdGEgPSBqb2ludC5jb25uZWN0b3JzW2Nvbm5lY3Rvci5uYW1lXS5jYWxsKAogICAgICAgICAgICB0aGlzLAogICAgICAgICAgICB0aGlzLl9tYXJrZXJDYWNoZS5zb3VyY2VQb2ludCwgLy8gTm90ZSB0aGF0IHRoZSB2YWx1ZSBpcyB0cmFuc2xhdGVkIGJ5IHRoZSBzaXplCiAgICAgICAgICAgIHRoaXMuX21hcmtlckNhY2hlLnRhcmdldFBvaW50LCAvLyBvZiB0aGUgbWFya2VyLiAoV2UnciBub3QgdXNpbmcgdGhpcy5zb3VyY2VQb2ludCkKICAgICAgICAgICAgdmVydGljZXMgfHwgKHRoaXMubW9kZWwuZ2V0KCd2ZXJ0aWNlcycpIHx8IHt9KSwKICAgICAgICAgICAgY29ubmVjdG9yLmFyZ3MgfHwge30sIC8vIG9wdGlvbnMKICAgICAgICAgICAgdGhpcwogICAgICAgICk7CgogICAgICAgIHJldHVybiBwYXRoRGF0YTsKICAgIH0sCgogICAgLy8gRmluZCBhIHBvaW50IHRoYXQgaXMgdGhlIHN0YXJ0IG9mIHRoZSBjb25uZWN0aW9uLgogICAgLy8gSWYgYHNlbGVjdG9yT3JQb2ludGAgaXMgYSBwb2ludCwgdGhlbiB3ZSdyZSBkb25lIGFuZCB0aGF0IHBvaW50IGlzIHRoZSBzdGFydCBvZiB0aGUgY29ubmVjdGlvbi4KICAgIC8vIElmIHRoZSBgc2VsZWN0b3JPclBvaW50YCBpcyBhbiBlbGVtZW50IGhvd2V2ZXIsIHdlIG5lZWQgdG8ga25vdyBhIHJlZmVyZW5jZSBwb2ludCAob3IgZWxlbWVudCkKICAgIC8vIHRoYXQgdGhlIGxpbmsgbGVhZHMgdG8gaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIHRoZSBzdGFydCBvZiB0aGUgY29ubmVjdGlvbiBvbiB0aGUgb3JpZ2luYWwgZWxlbWVudC4KICAgIGdldENvbm5lY3Rpb25Qb2ludDogZnVuY3Rpb24oZW5kLCBzZWxlY3Rvck9yUG9pbnQsIHJlZmVyZW5jZVNlbGVjdG9yT3JQb2ludCkgewoKICAgICAgICB2YXIgc3BvdDsKCiAgICAgICAgLy8gSWYgdGhlIGBzZWxlY3Rvck9yUG9pbnRgIChvciBgcmVmZXJlbmNlU2VsZWN0b3JPclBvaW50YCkgaXMgYHVuZGVmaW5lZGAsIHRoZSBgc291cmNlYC9gdGFyZ2V0YCBvZiB0aGUgbGluayBtb2RlbCBpcyBgdW5kZWZpbmVkYC4KICAgICAgICAvLyBXZSB3YW50IHRvIGFsbG93IHRoaXMgaG93ZXZlciBzbyB0aGF0IG9uZSBjYW4gY3JlYXRlIGxpbmtzIHN1Y2ggYXMgYHZhciBsaW5rID0gbmV3IGpvaW50LmRpYS5MaW5rYCBhbmQKICAgICAgICAvLyBzZXQgdGhlIGBzb3VyY2VgL2B0YXJnZXRgIGxhdGVyLgogICAgICAgIHNlbGVjdG9yT3JQb2ludCA9IHNlbGVjdG9yT3JQb2ludCB8fCB7IHg6IDAsIHk6IDAgfTsKICAgICAgICByZWZlcmVuY2VTZWxlY3Rvck9yUG9pbnQgPSByZWZlcmVuY2VTZWxlY3Rvck9yUG9pbnQgfHwgeyB4OiAwLCB5OiAwIH07CgogICAgICAgIGlmICh0aGlzLl9pc1BvaW50KHNlbGVjdG9yT3JQb2ludCkpIHsKCiAgICAgICAgICAgIC8vIElmIHRoZSBzb3VyY2UgaXMgYSBwb2ludCwgd2UgZG9uJ3QgbmVlZCBhIHJlZmVyZW5jZSBwb2ludCB0byBmaW5kIHRoZSBzdGlja3kgcG9pbnQgb2YgY29ubmVjdGlvbi4KICAgICAgICAgICAgc3BvdCA9IGcucG9pbnQoc2VsZWN0b3JPclBvaW50KTsKCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIC8vIElmIHRoZSBzb3VyY2UgaXMgYW4gZWxlbWVudCwgd2UgbmVlZCB0byBmaW5kIGEgcG9pbnQgb24gdGhlIGVsZW1lbnQgYm91bmRhcnkgdGhhdCBpcyBjbG9zZXN0CiAgICAgICAgICAgIC8vIHRvIHRoZSByZWZlcmVuY2UgcG9pbnQgKG9yIHJlZmVyZW5jZSBlbGVtZW50KS4KICAgICAgICAgICAgLy8gR2V0IHRoZSBib3VuZGluZyBib3ggb2YgdGhlIHNwb3QgcmVsYXRpdmUgdG8gdGhlIHBhcGVyIHZpZXdwb3J0LiBUaGlzIGlzIG5lY2Vzc2FyeQogICAgICAgICAgICAvLyBpbiBvcmRlciB0byBmb2xsb3cgcGFwZXIgdmlld3BvcnQgdHJhbnNmb3JtYXRpb25zIChzY2FsZS9yb3RhdGUpLgogICAgICAgICAgICAvLyBgX3NvdXJjZUJib3hgIChgX3RhcmdldEJib3hgKSBjb21lcyBmcm9tIGBfc291cmNlQmJveFVwZGF0ZWAgKGBfc291cmNlQmJveFVwZGF0ZWApCiAgICAgICAgICAgIC8vIG1ldGhvZCwgaXQgZXhpc3RzIHNpbmNlIGZpcnN0IHJlbmRlciBhbmQgYXJlIGF1dG9tYXRpY2FsbHkgdXBkYXRlZAogICAgICAgICAgICB2YXIgc3BvdEJib3ggPSBlbmQgPT09ICdzb3VyY2UnID8gdGhpcy5zb3VyY2VCQm94IDogdGhpcy50YXJnZXRCQm94OwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHJlZmVyZW5jZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICh0aGlzLl9pc1BvaW50KHJlZmVyZW5jZVNlbGVjdG9yT3JQb2ludCkpIHsKCiAgICAgICAgICAgICAgICAvLyBSZWZlcmVuY2Ugd2FzIHBhc3NlZCBhcyBhIHBvaW50LCB0aGVyZWZvcmUsIHdlJ3JlIHJlYWR5IHRvIGZpbmQgdGhlIHN0aWNreSBwb2ludCBvZiBjb25uZWN0aW9uIG9uIHRoZSBzb3VyY2UgZWxlbWVudC4KICAgICAgICAgICAgICAgIHJlZmVyZW5jZSA9IGcucG9pbnQocmVmZXJlbmNlU2VsZWN0b3JPclBvaW50KTsKCiAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgLy8gUmVmZXJlbmNlIHdhcyBwYXNzZWQgYXMgYW4gZWxlbWVudCwgdGhlcmVmb3JlIHdlIG5lZWQgdG8gZmluZCBhIHBvaW50IG9uIHRoZSByZWZlcmVuY2UKICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgYm91bmRhcnkgY2xvc2VzdCB0byB0aGUgc291cmNlIGVsZW1lbnQuCiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgc3BvdCByZWxhdGl2ZSB0byB0aGUgcGFwZXIgdmlld3BvcnQuIFRoaXMgaXMgbmVjZXNzYXJ5CiAgICAgICAgICAgICAgICAvLyBpbiBvcmRlciB0byBmb2xsb3cgcGFwZXIgdmlld3BvcnQgdHJhbnNmb3JtYXRpb25zIChzY2FsZS9yb3RhdGUpLgogICAgICAgICAgICAgICAgdmFyIHJlZmVyZW5jZUJib3ggPSBlbmQgPT09ICdzb3VyY2UnID8gdGhpcy50YXJnZXRCQm94IDogdGhpcy5zb3VyY2VCQm94OwoKICAgICAgICAgICAgICAgIHJlZmVyZW5jZSA9IGcucmVjdChyZWZlcmVuY2VCYm94KS5pbnRlcnNlY3Rpb25XaXRoTGluZUZyb21DZW50ZXJUb1BvaW50KGcucmVjdChzcG90QmJveCkuY2VudGVyKCkpOwogICAgICAgICAgICAgICAgcmVmZXJlbmNlID0gcmVmZXJlbmNlIHx8IGcucmVjdChyZWZlcmVuY2VCYm94KS5jZW50ZXIoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSWYgYHBlcnBlbmRpY3VsYXJMaW5rc2AgZmxhZyBpcyBzZXQgb24gdGhlIHBhcGVyIGFuZCB0aGVyZSBhcmUgdmVydGljZXMKICAgICAgICAgICAgLy8gb24gdGhlIGxpbmssIHRoZW4gdHJ5IHRvIGZpbmQgYSBjb25uZWN0aW9uIHBvaW50IHRoYXQgbWFrZXMgdGhlIGxpbmsgcGVycGVuZGljdWxhcgogICAgICAgICAgICAvLyBldmVuIHRob3VnaCB0aGUgbGluayB3b24ndCBwb2ludCB0byB0aGUgY2VudGVyIG9mIHRoZSB0YXJnZXRlZCBvYmplY3QuCiAgICAgICAgICAgIGlmICh0aGlzLnBhcGVyLm9wdGlvbnMucGVycGVuZGljdWxhckxpbmtzIHx8IHRoaXMub3B0aW9ucy5wZXJwZW5kaWN1bGFyKSB7CgogICAgICAgICAgICAgICAgdmFyIGhvcml6b250YWxMaW5lUmVjdCA9IGcucmVjdCgwLCByZWZlcmVuY2UueSwgdGhpcy5wYXBlci5vcHRpb25zLndpZHRoLCAxKTsKICAgICAgICAgICAgICAgIHZhciB2ZXJ0aWNhbExpbmVSZWN0ID0gZy5yZWN0KHJlZmVyZW5jZS54LCAwLCAxLCB0aGlzLnBhcGVyLm9wdGlvbnMuaGVpZ2h0KTsKICAgICAgICAgICAgICAgIHZhciBuZWFyZXN0U2lkZTsKCiAgICAgICAgICAgICAgICBpZiAoaG9yaXpvbnRhbExpbmVSZWN0LmludGVyc2VjdChnLnJlY3Qoc3BvdEJib3gpKSkgewoKICAgICAgICAgICAgICAgICAgICBuZWFyZXN0U2lkZSA9IGcucmVjdChzcG90QmJveCkuc2lkZU5lYXJlc3RUb1BvaW50KHJlZmVyZW5jZSk7CiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChuZWFyZXN0U2lkZSkgewogICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6CiAgICAgICAgICAgICAgICAgICAgICAgIHNwb3QgPSBnLnBvaW50KHNwb3RCYm94LngsIHJlZmVyZW5jZS55KTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6CiAgICAgICAgICAgICAgICAgICAgICAgIHNwb3QgPSBnLnBvaW50KHNwb3RCYm94LnggKyBzcG90QmJveC53aWR0aCwgcmVmZXJlbmNlLnkpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICBzcG90ID0gZy5yZWN0KHNwb3RCYm94KS5jZW50ZXIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2ZXJ0aWNhbExpbmVSZWN0LmludGVyc2VjdChnLnJlY3Qoc3BvdEJib3gpKSkgewoKICAgICAgICAgICAgICAgICAgICBuZWFyZXN0U2lkZSA9IGcucmVjdChzcG90QmJveCkuc2lkZU5lYXJlc3RUb1BvaW50KHJlZmVyZW5jZSk7CiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChuZWFyZXN0U2lkZSkgewogICAgICAgICAgICAgICAgICAgICAgY2FzZSAndG9wJzoKICAgICAgICAgICAgICAgICAgICAgICAgc3BvdCA9IGcucG9pbnQocmVmZXJlbmNlLngsIHNwb3RCYm94LnkpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6CiAgICAgICAgICAgICAgICAgICAgICAgIHNwb3QgPSBnLnBvaW50KHJlZmVyZW5jZS54LCBzcG90QmJveC55ICsgc3BvdEJib3guaGVpZ2h0KTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgc3BvdCA9IGcucmVjdChzcG90QmJveCkuY2VudGVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbiBob3Jpem9udGFsbHkgb3IgdmVydGljYWxseSB3aXRoIHRoZSBvYmplY3QgYm91bmRpbmcgYm94LAogICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gd2UgZmFsbCBiYWNrIHRvIHRoZSByZWd1bGFyIHNpdHVhdGlvbiBmaW5kaW5nIHN0cmFpZ2h0IGxpbmUgKG5vdCBwZXJwZW5kaWN1bGFyKQogICAgICAgICAgICAgICAgICAgIC8vIGJldHdlZW4gdGhlIG9iamVjdCBhbmQgdGhlIHJlZmVyZW5jZSBwb2ludC4KCiAgICAgICAgICAgICAgICAgICAgc3BvdCA9IGcucmVjdChzcG90QmJveCkuaW50ZXJzZWN0aW9uV2l0aExpbmVGcm9tQ2VudGVyVG9Qb2ludChyZWZlcmVuY2UpOwogICAgICAgICAgICAgICAgICAgIHNwb3QgPSBzcG90IHx8IGcucmVjdChzcG90QmJveCkuY2VudGVyKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBhcGVyLm9wdGlvbnMubGlua0Nvbm5lY3Rpb25Qb2ludCkgewoKCQl2YXIgdmlldyA9IGVuZCA9PT0gJ3RhcmdldCcgPyB0aGlzLnRhcmdldFZpZXcgOiB0aGlzLnNvdXJjZVZpZXc7CgkJdmFyIG1hZ25ldCA9IGVuZCA9PT0gJ3RhcmdldCcgPyB0aGlzLnRhcmdldE1hZ25ldCA6IHRoaXMuc291cmNlTWFnbmV0OwoKCQlzcG90ID0gdGhpcy5wYXBlci5vcHRpb25zLmxpbmtDb25uZWN0aW9uUG9pbnQodGhpcywgdmlldywgbWFnbmV0LCByZWZlcmVuY2UpOwoKCSAgICB9IGVsc2UgewoKICAgICAgICAgICAgCXNwb3QgPSBnLnJlY3Qoc3BvdEJib3gpLmludGVyc2VjdGlvbldpdGhMaW5lRnJvbUNlbnRlclRvUG9pbnQocmVmZXJlbmNlKTsKICAgICAgICAgICAgICAgIHNwb3QgPSBzcG90IHx8IGcucmVjdChzcG90QmJveCkuY2VudGVyKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBzcG90OwogICAgfSwKCiAgICBfaXNNb2RlbDogZnVuY3Rpb24oZW5kKSB7CgogICAgICAgIHJldHVybiBlbmQgJiYgZW5kLmlkOwogICAgfSwKCiAgICBfaXNQb2ludDogZnVuY3Rpb24oZW5kKSB7CgogICAgICAgIHJldHVybiAhdGhpcy5faXNNb2RlbChlbmQpOwogICAgfSwKCiAgICBfbWFrZVNlbGVjdG9yOiBmdW5jdGlvbihlbmQpIHsKCiAgICAgICAgdmFyIHNlbGVjdG9yID0gJ1ttb2RlbC1pZD0iJyArIGVuZC5pZCArICciXSc7CiAgICAgICAgLy8gYHBvcnRgIGhhcyBhIGhpZ2hlciBwcmVjZW5kZW5jZSBvdmVyIGBzZWxlY3RvcmAuIFRoaXMgaXMgYmVjYXVzZSB0aGUgc2VsZWN0b3IgdG8gdGhlIG1hZ25ldAogICAgICAgIC8vIG1pZ2h0IGNoYW5nZSB3aGlsZSB0aGUgbmFtZSBvZiB0aGUgcG9ydCBjYW4gc3RheSB0aGUgc2FtZS4KICAgICAgICBpZiAoZW5kLnBvcnQpIHsKICAgICAgICAgICAgc2VsZWN0b3IgKz0gJyBbcG9ydD0iJyArIGVuZC5wb3J0ICsgJyJdJzsKICAgICAgICB9IGVsc2UgaWYgKGVuZC5zZWxlY3RvcikgewogICAgICAgICAgICBzZWxlY3RvciArPSAnICcgKyBlbmQuc2VsZWN0b3I7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc2VsZWN0b3I7CiAgICB9LAoKICAgIC8vIFB1YmxpYyBBUEkKICAgIC8vIC0tLS0tLS0tLS0KCiAgICBnZXRDb25uZWN0aW9uTGVuZ3RoOiBmdW5jdGlvbigpIHsKCiAgICAgICAgcmV0dXJuIHRoaXMuX1YuY29ubmVjdGlvbi5ub2RlLmdldFRvdGFsTGVuZ3RoKCk7CiAgICB9LAoKICAgIGdldFBvaW50QXRMZW5ndGg6IGZ1bmN0aW9uKGxlbmd0aCkgewoKICAgICAgICByZXR1cm4gdGhpcy5fVi5jb25uZWN0aW9uLm5vZGUuZ2V0UG9pbnRBdExlbmd0aChsZW5ndGgpOwogICAgfSwKCiAgICAvLyBJbnRlcmFjdGlvbi4gVGhlIGNvbnRyb2xsZXIgcGFydC4KICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIF9iZWZvcmVBcnJvd2hlYWRNb3ZlOiBmdW5jdGlvbigpIHsKCiAgICAgICAgdGhpcy5tb2RlbC50cmlnZ2VyKCdiYXRjaDpzdGFydCcpOwoKICAgICAgICB0aGlzLl96ID0gdGhpcy5tb2RlbC5nZXQoJ3onKTsKICAgICAgICB0aGlzLm1vZGVsLnNldCgneicsIE51bWJlci5NQVhfVkFMVUUpOwoKICAgICAgICAvLyBMZXQgdGhlIHBvaW50ZXIgcHJvcGFnYXRlIHRocm91Z2h0IHRoZSBsaW5rIHZpZXcgZWxlbWVudHMgc28gdGhhdAogICAgICAgIC8vIHRoZSBgZXZ0LnRhcmdldGAgaXMgYW5vdGhlciBlbGVtZW50IHVuZGVyIHRoZSBwb2ludGVyLCBub3QgdGhlIGxpbmsgaXRzZWxmLgogICAgICAgIHRoaXMuZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJzsKCiAgICAgICAgaWYgKHRoaXMucGFwZXIub3B0aW9ucy5tYXJrQXZhaWxhYmxlKSB7CiAgICAgICAgICAgIHRoaXMuX21hcmtBdmFpbGFibGVNYWduZXRzKCk7CiAgICAgICAgfQogICAgfSwKCiAgICBfYWZ0ZXJBcnJvd2hlYWRNb3ZlOiBmdW5jdGlvbigpIHsKCiAgICAgICAgaWYgKHRoaXMuX3opIHsKICAgICAgICAgICAgdGhpcy5tb2RlbC5zZXQoJ3onLCB0aGlzLl96KTsKICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3o7CiAgICAgICAgfQoKICAgICAgICAvLyBQdXQgYHBvaW50ZXItZXZlbnRzYCBiYWNrIHRvIGl0cyBvcmlnaW5hbCB2YWx1ZS4gU2VlIGBzdGFydEFycm93aGVhZE1vdmUoKWAgZm9yIGV4cGxhbmF0aW9uLgoJLy8gVmFsdWUgYGF1dG9gIGRvZXNuJ3Qgd29yayBpbiBJRTkuIFdlIGZvcmNlIHRvIHVzZSBgdmlzaWJsZVBhaW50ZWRgIGluc3RlYWQuCgkvLyBTZWUgYGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wb2ludGVyLWV2ZW50c2AuCiAgICAgICAgdGhpcy5lbC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ3Zpc2libGVQYWludGVkJzsKCiAgICAgICAgaWYgKHRoaXMucGFwZXIub3B0aW9ucy5tYXJrQXZhaWxhYmxlKSB7CiAgICAgICAgICAgIHRoaXMuX3VubWFya0F2YWlsYWJsZU1hZ25ldHMoKTsKICAgICAgICB9CgogICAgICAgIHRoaXMubW9kZWwudHJpZ2dlcignYmF0Y2g6c3RvcCcpOwogICAgfSwKCiAgICBfY3JlYXRlVmFsaWRhdGVDb25uZWN0aW9uQXJnczogZnVuY3Rpb24oYXJyb3doZWFkKSB7CiAgICAgICAgLy8gSXQgbWFrZXMgc3VyZSB0aGUgYXJndW1lbnRzIGZvciB2YWxpZGF0ZUNvbm5lY3Rpb24gaGF2ZSB0aGUgZm9sbG93aW5nIGZvcm06CiAgICAgICAgLy8gKHNvdXJjZSB2aWV3LCBzb3VyY2UgbWFnbmV0LCB0YXJnZXQgdmlldywgdGFyZ2V0IG1hZ25ldCBhbmQgbGluayB2aWV3KQogICAgICAgIHZhciBhcmdzID0gW107CgogICAgICAgIGFyZ3NbNF0gPSBhcnJvd2hlYWQ7CiAgICAgICAgYXJnc1s1XSA9IHRoaXM7CgogICAgICAgIHZhciBvcHBvc2l0ZUFycm93aGVhZCwgaSA9IDAsIGogPSAwOwoKICAgICAgICBpZiAoYXJyb3doZWFkID09PSAnc291cmNlJykgewogICAgICAgICAgICBpID0gMjsKICAgICAgICAgICAgb3Bwb3NpdGVBcnJvd2hlYWQgPSAndGFyZ2V0JzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBqID0gMjsKICAgICAgICAgICAgb3Bwb3NpdGVBcnJvd2hlYWQgPSAnc291cmNlJzsKICAgICAgICB9CgogICAgICAgIHZhciBlbmQgPSB0aGlzLm1vZGVsLmdldChvcHBvc2l0ZUFycm93aGVhZCk7CgogICAgICAgIGlmIChlbmQuaWQpIHsKICAgICAgICAgICAgYXJnc1tpXSA9IHRoaXMucGFwZXIuZmluZFZpZXdCeU1vZGVsKGVuZC5pZCk7CiAgICAgICAgICAgIGFyZ3NbaSsxXSA9IGVuZC5zZWxlY3RvciAmJiBhcmdzW2ldLmVsLnF1ZXJ5U2VsZWN0b3IoZW5kLnNlbGVjdG9yKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlQ29ubmVjdGlvbkFyZ3MoY2VsbFZpZXcsIG1hZ25ldCkgewogICAgICAgICAgICBhcmdzW2pdID0gY2VsbFZpZXc7CiAgICAgICAgICAgIGFyZ3NbaisxXSA9IGNlbGxWaWV3LmVsID09PSBtYWduZXQgPyB1bmRlZmluZWQgOiBtYWduZXQ7CiAgICAgICAgICAgIHJldHVybiBhcmdzOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHZhbGlkYXRlQ29ubmVjdGlvbkFyZ3M7CiAgICB9LAoKICAgIF9tYXJrQXZhaWxhYmxlTWFnbmV0czogZnVuY3Rpb24oKSB7CgogICAgICAgIHZhciBlbGVtZW50cyA9IHRoaXMucGFwZXIubW9kZWwuZ2V0RWxlbWVudHMoKTsKICAgICAgICB2YXIgdmFsaWRhdGUgPSB0aGlzLnBhcGVyLm9wdGlvbnMudmFsaWRhdGVDb25uZWN0aW9uOwoKICAgICAgICBfLmNoYWluKGVsZW1lbnRzKS5tYXAodGhpcy5wYXBlci5maW5kVmlld0J5TW9kZWwsIHRoaXMucGFwZXIpLmVhY2goZnVuY3Rpb24odmlldykgewoKICAgICAgICAgICAgdmFyIGlzRWxlbWVudEF2YWlsYWJsZSA9IHZpZXcuZWwuZ2V0QXR0cmlidXRlKCdtYWduZXQnKSAhPT0gJ2ZhbHNlJyAmJgogICAgICAgICAgICAgICAgdmFsaWRhdGUuYXBwbHkodGhpcy5wYXBlciwgdGhpcy5fdmFsaWRhdGVDb25uZWN0aW9uQXJncyh2aWV3LCBudWxsKSk7CgogICAgICAgICAgICB2YXIgYXZhaWxhYmxlTWFnbmV0cyA9IF8uZmlsdGVyKHZpZXcuZWwucXVlcnlTZWxlY3RvckFsbCgnW21hZ25ldF0nKSwgZnVuY3Rpb24obWFnbmV0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWRhdGUuYXBwbHkodGhpcy5wYXBlciwgdGhpcy5fdmFsaWRhdGVDb25uZWN0aW9uQXJncyh2aWV3LCBtYWduZXQpKTsKICAgICAgICAgICAgfSwgdGhpcyk7CgogICAgICAgICAgICBpZiAoaXNFbGVtZW50QXZhaWxhYmxlKSB7CiAgICAgICAgICAgICAgICBWKHZpZXcuZWwpLmFkZENsYXNzKCdhdmFpbGFibGUtbWFnbmV0Jyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF8uZWFjaChhdmFpbGFibGVNYWduZXRzLCBmdW5jdGlvbihtYWduZXQpIHsKICAgICAgICAgICAgICAgIFYobWFnbmV0KS5hZGRDbGFzcygnYXZhaWxhYmxlLW1hZ25ldCcpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChpc0VsZW1lbnRBdmFpbGFibGUgfHwgYXZhaWxhYmxlTWFnbmV0cy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIFYodmlldy5lbCkuYWRkQ2xhc3MoJ2F2YWlsYWJsZS1jZWxsJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgfSwgdGhpcyk7CiAgICB9LAoKICAgIF91bm1hcmtBdmFpbGFibGVNYWduZXRzOiBmdW5jdGlvbigpIHsKCiAgICAgICAgXy5lYWNoKHRoaXMucGFwZXIuZWwucXVlcnlTZWxlY3RvckFsbCgnLmF2YWlsYWJsZS1jZWxsLCAuYXZhaWxhYmxlLW1hZ25ldCcpLCBmdW5jdGlvbihtYWduZXQpIHsKICAgICAgICAgICAgVihtYWduZXQpLnJlbW92ZUNsYXNzKCdhdmFpbGFibGUtbWFnbmV0JykucmVtb3ZlQ2xhc3MoJ2F2YWlsYWJsZS1jZWxsJyk7CiAgICAgICAgfSk7CiAgICB9LAoKICAgIHN0YXJ0QXJyb3doZWFkTW92ZTogZnVuY3Rpb24oZW5kKSB7CiAgICAgICAgLy8gQWxsb3cgdG8gZGVsZWdhdGUgZXZlbnRzIGZyb20gYW4gYW5vdGhlciB2aWV3IHRvIHRoaXMgbGlua1ZpZXcgaW4gb3JkZXIgdG8gdHJpZ2dlciBhcnJvd2hlYWQKICAgICAgICAvLyBtb3ZlIHdpdGhvdXQgbmVlZCB0byBjbGljayBvbiB0aGUgYWN0dWFsIGFycm93aGVhZCBkb20gZWxlbWVudC4KICAgICAgICB0aGlzLl9hY3Rpb24gPSAnYXJyb3doZWFkLW1vdmUnOwogICAgICAgIHRoaXMuX2Fycm93aGVhZCA9IGVuZDsKICAgICAgICB0aGlzLl92YWxpZGF0ZUNvbm5lY3Rpb25BcmdzID0gdGhpcy5fY3JlYXRlVmFsaWRhdGVDb25uZWN0aW9uQXJncyh0aGlzLl9hcnJvd2hlYWQpOwogICAgICAgIHRoaXMuX2JlZm9yZUFycm93aGVhZE1vdmUoKTsKICAgIH0sCgogICAgcG9pbnRlcmRvd246IGZ1bmN0aW9uKGV2dCwgeCwgeSkgewoKICAgICAgICBqb2ludC5kaWEuQ2VsbFZpZXcucHJvdG90eXBlLnBvaW50ZXJkb3duLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgoJdGhpcy5fZHggPSB4OwogICAgICAgIHRoaXMuX2R5ID0geTsKCgl2YXIgaW50ZXJhY3RpdmUgPSBfLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLmludGVyYWN0aXZlKSA/IHRoaXMub3B0aW9ucy5pbnRlcmFjdGl2ZSh0aGlzLCAncG9pbnRlcmRvd24nKSA6IHRoaXMub3B0aW9ucy5pbnRlcmFjdGl2ZTsKCiAgICAgICAgaWYgKGludGVyYWN0aXZlID09PSBmYWxzZSkgcmV0dXJuOwoKCWZ1bmN0aW9uIGNhbihmZWF0dXJlKSB7CgkgICAgaWYgKCFfLmlzT2JqZWN0KGludGVyYWN0aXZlKSB8fCBpbnRlcmFjdGl2ZVtmZWF0dXJlXSAhPT0gZmFsc2UpIHJldHVybiB0cnVlOwoJICAgIHJldHVybiBmYWxzZTsKCX0KCiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGV2dC50YXJnZXQuZ2V0QXR0cmlidXRlKCdjbGFzcycpOwoKICAgICAgICBzd2l0Y2ggKGNsYXNzTmFtZSkgewoKICAgICAgICBjYXNlICdtYXJrZXItdmVydGV4JzoKCSAgICBpZiAoY2FuKCd2ZXJ0ZXhNb3ZlJykpIHsKCQl0aGlzLl9hY3Rpb24gPSAndmVydGV4LW1vdmUnOwoJCXRoaXMuX3ZlcnRleElkeCA9IGV2dC50YXJnZXQuZ2V0QXR0cmlidXRlKCdpZHgnKTsKCSAgICB9CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdtYXJrZXItdmVydGV4LXJlbW92ZSc6CiAgICAgICAgY2FzZSAnbWFya2VyLXZlcnRleC1yZW1vdmUtYXJlYSc6CgkgICAgaWYgKGNhbigndmVydGV4UmVtb3ZlJykpIHsKCQl0aGlzLnJlbW92ZVZlcnRleChldnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnaWR4JykpOwoJICAgIH0KICAgICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ21hcmtlci1hcnJvd2hlYWQnOgoJICAgIGlmIChjYW4oJ2Fycm93aGVhZE1vdmUnKSkgewoJCXRoaXMuc3RhcnRBcnJvd2hlYWRNb3ZlKGV2dC50YXJnZXQuZ2V0QXR0cmlidXRlKCdlbmQnKSk7CgkgICAgfQogICAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDoKCiAgICAgICAgICAgIHZhciB0YXJnZXRQYXJlbnRFdmVudCA9IGV2dC50YXJnZXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2V2ZW50Jyk7CgogICAgICAgICAgICBpZiAodGFyZ2V0UGFyZW50RXZlbnQpIHsKCiAgICAgICAgICAgICAgICAvLyBgcmVtb3ZlYCBldmVudCBpcyBidWlsdC1pbi4gT3RoZXIgY3VzdG9tIGV2ZW50cyBhcmUgdHJpZ2dlcmVkIG9uIHRoZSBwYXBlci4KICAgICAgICAgICAgICAgIGlmICh0YXJnZXRQYXJlbnRFdmVudCA9PT0gJ3JlbW92ZScpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcGVyLnRyaWdnZXIodGFyZ2V0UGFyZW50RXZlbnQsIGV2dCwgdGhpcywgeCwgeSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9IGVsc2UgewoKCQlpZiAoY2FuKCd2ZXJ0ZXhBZGQnKSkgewoKICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIG5ldyB2ZXJ0ZXggaGFzIGp1c3QgYmVlbiBwbGFjZWQuCiAgICAgICAgICAgICAgICAgICAgLy8gV2UnbGwgYmUgdXBkYXRlIHRoZSB2ZXJ5IHNhbWUgdmVydGV4IHBvc2l0aW9uIGluIGBwb2ludGVybW92ZSgpYC4KICAgICAgICAgICAgICAgICAgICB0aGlzLl92ZXJ0ZXhJZHggPSB0aGlzLmFkZFZlcnRleCh7IHg6IHgsIHk6IHkgfSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWN0aW9uID0gJ3ZlcnRleC1tb3ZlJzsKCQl9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRoaXMucGFwZXIudHJpZ2dlcignbGluazpwb2ludGVyZG93bicsIGV2dCwgdGhpcywgeCwgeSk7CiAgICB9LAoKICAgIHBvaW50ZXJtb3ZlOiBmdW5jdGlvbihldnQsIHgsIHkpIHsKCiAgICAgICAgam9pbnQuZGlhLkNlbGxWaWV3LnByb3RvdHlwZS5wb2ludGVybW92ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoKICAgICAgICBzd2l0Y2ggKHRoaXMuX2FjdGlvbikgewoKICAgICAgICAgIGNhc2UgJ3ZlcnRleC1tb3ZlJzoKCiAgICAgICAgICAgIHZhciB2ZXJ0aWNlcyA9IF8uY2xvbmUodGhpcy5tb2RlbC5nZXQoJ3ZlcnRpY2VzJykpOwogICAgICAgICAgICB2ZXJ0aWNlc1t0aGlzLl92ZXJ0ZXhJZHhdID0geyB4OiB4LCB5OiB5IH07CiAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KCd2ZXJ0aWNlcycsIHZlcnRpY2VzKTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAnYXJyb3doZWFkLW1vdmUnOgoKICAgICAgICAgICAgaWYgKHRoaXMucGFwZXIub3B0aW9ucy5zbmFwTGlua3MpIHsKCiAgICAgICAgICAgICAgICAvLyBjaGVja2luZyB2aWV3IGluIGNsb3NlIGFyZWEgb2YgdGhlIHBvaW50ZXIKCiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMucGFwZXIub3B0aW9ucy5zbmFwTGlua3MucmFkaXVzIHx8IDUwOwogICAgICAgICAgICAgICAgdmFyIHZpZXdzSW5BcmVhID0gdGhpcy5wYXBlci5maW5kVmlld3NJbkFyZWEoeyB4OiB4IC0gciwgeTogeSAtIHIsIHdpZHRoOiAyICogciwgaGVpZ2h0OiAyICogciB9KTsKCiAgICAgICAgICAgICAgICB0aGlzLl9jbG9zZXN0VmlldyAmJiB0aGlzLl9jbG9zZXN0Vmlldy51bmhpZ2hsaWdodCh0aGlzLl9jbG9zZXN0RW5kLnNlbGVjdG9yKTsKICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3Nlc3RWaWV3ID0gdGhpcy5fY2xvc2VzdEVuZCA9IG51bGw7CgogICAgICAgICAgICAgICAgdmFyIHBvaW50ZXIgPSBnLnBvaW50KHgseSk7CiAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2UsIG1pbkRpc3RhbmNlID0gTnVtYmVyLk1BWF9WQUxVRTsKCiAgICAgICAgICAgICAgICBfLmVhY2godmlld3NJbkFyZWEsIGZ1bmN0aW9uKHZpZXcpIHsKCiAgICAgICAgICAgICAgICAgICAgLy8gc2tpcCBjb25uZWN0aW5nIHRvIHRoZSBlbGVtZW50IGluIGNhc2UgJy4nOiB7IG1hZ25ldDogZmFsc2UgfSBhdHRyaWJ1dGUgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIGlmICh2aWV3LmVsLmdldEF0dHJpYnV0ZSgnbWFnbmV0JykgIT09ICdmYWxzZScpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgZGlzdGFuY2UgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBtb2RlbCB0byBwb2ludGVyIGNvb3JkaW5hdGVzCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gdmlldy5tb2RlbC5nZXRCQm94KCkuY2VudGVyKCkuZGlzdGFuY2UocG9pbnRlcik7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgY29ubmVjdGlvbiBpcyBsb29rZWQgdXAgaW4gYSBjaXJjbGUgYXJlYSBieSBgZGlzdGFuY2UgPCByYAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCByICYmIGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXBlci5vcHRpb25zLnZhbGlkYXRlQ29ubmVjdGlvbi5hcHBseSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcGVyLCB0aGlzLl92YWxpZGF0ZUNvbm5lY3Rpb25BcmdzKHZpZXcsIG51bGwpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbG9zZXN0VmlldyA9IHZpZXc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xvc2VzdEVuZCA9IHsgaWQ6IHZpZXcubW9kZWwuaWQgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdmlldy4kKCdbbWFnbmV0XScpLmVhY2goXy5iaW5kKGZ1bmN0aW9uKGluZGV4LCBtYWduZXQpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiYm94ID0gVihtYWduZXQpLmJib3goZmFsc2UsIHRoaXMucGFwZXIudmlld3BvcnQpOwoKICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBwb2ludGVyLmRpc3RhbmNlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IGJib3gueCArIGJib3gud2lkdGggLyAyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogYmJveC55ICsgYmJveC5oZWlnaHQgLyAyCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgciAmJiBkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFwZXIub3B0aW9ucy52YWxpZGF0ZUNvbm5lY3Rpb24uYXBwbHkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXBlciwgdGhpcy5fdmFsaWRhdGVDb25uZWN0aW9uQXJncyh2aWV3LCBtYWduZXQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbG9zZXN0VmlldyA9IHZpZXc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xvc2VzdEVuZCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHZpZXcubW9kZWwuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiB2aWV3LmdldFNlbGVjdG9yKG1hZ25ldCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6IG1hZ25ldC5nZXRBdHRyaWJ1dGUoJ3BvcnQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcykpOwoKICAgICAgICAgICAgICAgIH0sIHRoaXMpOwoKICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3Nlc3RWaWV3ICYmIHRoaXMuX2Nsb3Nlc3RWaWV3LmhpZ2hsaWdodCh0aGlzLl9jbG9zZXN0RW5kLnNlbGVjdG9yKTsKCiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldCh0aGlzLl9hcnJvd2hlYWQsIHRoaXMuX2Nsb3Nlc3RFbmQgfHwgeyB4OiB4LCB5OiB5IH0pOwoKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAvLyBjaGVja2luZyB2aWV3cyByaWdodCB1bmRlciB0aGUgcG9pbnRlcgoKICAgICAgICAgICAgICAgIC8vIFRvdWNobW92ZSBldmVudCdzIHRhcmdldCBpcyBub3QgcmVmbGVjdGluZyB0aGUgZWxlbWVudCB1bmRlciB0aGUgY29vcmRpbmF0ZXMgYXMgbW91c2Vtb3ZlIGRvZXMuCiAgICAgICAgICAgICAgICAvLyBJdCBob2xkcyB0aGUgZWxlbWVudCB3aGVuIGEgdG91Y2hzdGFydCB0cmlnZ2VyZWQuCiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gKGV2dC50eXBlID09PSAnbW91c2Vtb3ZlJykKICAgICAgICAgICAgICAgICAgICA/IGV2dC50YXJnZXQKICAgICAgICAgICAgICAgICAgICA6IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoZXZ0LmNsaWVudFgsIGV2dC5jbGllbnRZKTsKCiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGFyZ2V0RXZlbnQgIT09IHRhcmdldCkgewogICAgICAgICAgICAgICAgICAgIC8vIFVuaGlnaGxpZ2h0IHRoZSBwcmV2aW91cyB2aWV3IHVuZGVyIHBvaW50ZXIgaWYgdGhlcmUgd2FzIG9uZS4KICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYWduZXRVbmRlclBvaW50ZXIgJiYgdGhpcy5fdmlld1VuZGVyUG9pbnRlci51bmhpZ2hsaWdodCh0aGlzLl9tYWduZXRVbmRlclBvaW50ZXIpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdVbmRlclBvaW50ZXIgPSB0aGlzLnBhcGVyLmZpbmRWaWV3KHRhcmdldCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZpZXdVbmRlclBvaW50ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgZm91bmQgYSB2aWV3IHRoYXQgaXMgdW5kZXIgdGhlIHBvaW50ZXIsIHdlIG5lZWQgdG8gZmluZCB0aGUgY2xvc2VzdAogICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWduZXQgYmFzZWQgb24gdGhlIHJlYWwgdGFyZ2V0IGVsZW1lbnQgb2YgdGhlIGV2ZW50LgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYWduZXRVbmRlclBvaW50ZXIgPSB0aGlzLl92aWV3VW5kZXJQb2ludGVyLmZpbmRNYWduZXQodGFyZ2V0KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYWduZXRVbmRlclBvaW50ZXIgJiYgdGhpcy5wYXBlci5vcHRpb25zLnZhbGlkYXRlQ29ubmVjdGlvbi5hcHBseSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFwZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWxpZGF0ZUNvbm5lY3Rpb25BcmdzKHRoaXMuX3ZpZXdVbmRlclBvaW50ZXIsIHRoaXMuX21hZ25ldFVuZGVyUG9pbnRlcikKICAgICAgICAgICAgICAgICAgICAgICAgKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgd2FzIG5vIG1hZ25ldCBmb3VuZCwgZG8gbm90IGhpZ2hsaWdodCBhbnl0aGluZyBhbmQgYXNzdW1lIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyBubyB2aWV3IHVuZGVyIHBvaW50ZXIgd2UncmUgaW50ZXJlc3RlZCBpbiByZWNvbm5lY3RpbmcgdG8uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGUgb3ZlcmFsbCBlbGVtZW50IGhhcyB0aGUgYXR0cmlidXRlIGAnLic6IHsgbWFnbmV0OiBmYWxzZSB9YC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21hZ25ldFVuZGVyUG9pbnRlciAmJiB0aGlzLl92aWV3VW5kZXJQb2ludGVyLmhpZ2hsaWdodCh0aGlzLl9tYWduZXRVbmRlclBvaW50ZXIpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB0eXBlIG9mIGNvbm5lY3Rpb24gaXMgbm90IHZhbGlkLiBEaXNyZWdhcmQgdGhpcyBtYWduZXQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYWduZXRVbmRlclBvaW50ZXIgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlJ2xsIGRlbGV0ZSBwcmV2aW91cyBtYWduZXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFnbmV0VW5kZXJQb2ludGVyID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgoJICAgICAgICB0aGlzLl90YXJnZXRFdmVudCA9IHRhcmdldDsKCiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldCh0aGlzLl9hcnJvd2hlYWQsIHsgeDogeCwgeTogeSB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9keCA9IHg7CiAgICAgICAgdGhpcy5fZHkgPSB5OwogICAgfSwKCiAgICBwb2ludGVydXA6IGZ1bmN0aW9uKGV2dCkgewoKICAgICAgICBqb2ludC5kaWEuQ2VsbFZpZXcucHJvdG90eXBlLnBvaW50ZXJ1cC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoKICAgICAgICBpZiAodGhpcy5fYWN0aW9uID09PSAnYXJyb3doZWFkLW1vdmUnKSB7CgogICAgICAgICAgICBpZiAodGhpcy5wYXBlci5vcHRpb25zLnNuYXBMaW5rcykgewoKICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3Nlc3RWaWV3ICYmIHRoaXMuX2Nsb3Nlc3RWaWV3LnVuaGlnaGxpZ2h0KHRoaXMuX2Nsb3Nlc3RFbmQuc2VsZWN0b3IpOwogICAgICAgICAgICAgICAgdGhpcy5fY2xvc2VzdFZpZXcgPSB0aGlzLl9jbG9zZXN0RW5kID0gbnVsbDsKCiAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgaWYgKHRoaXMuX21hZ25ldFVuZGVyUG9pbnRlcikgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdVbmRlclBvaW50ZXIudW5oaWdobGlnaHQodGhpcy5fbWFnbmV0VW5kZXJQb2ludGVyKTsKICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIGEgdW5pcXVlIGBzZWxlY3RvcmAgb2YgdGhlIGVsZW1lbnQgdW5kZXIgcG9pbnRlciB0aGF0IGlzIGEgbWFnbmV0LiBJZiB0aGUKICAgICAgICAgICAgICAgICAgICAvLyBgdGhpcy5fbWFnbmV0VW5kZXJQb2ludGVyYCBpcyB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBgdGhpcy5fdmlld1VuZGVyUG9pbnRlcmAgaXRzZWxmLAogICAgICAgICAgICAgICAgICAgIC8vIHRoZSByZXR1cm5lZCBgc2VsZWN0b3JgIHdpbGwgYmUgYHVuZGVmaW5lZGAuIFRoYXQgbWVhbnMgd2UgY2FuIGRpcmVjdGx5IHBhc3MgaXQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgLy8gYHNvdXJjZWAvYHRhcmdldGAgYXR0cmlidXRlIG9mIHRoZSBsaW5rIG1vZGVsIGJlbG93LgoJCSAgICB0aGlzLm1vZGVsLnNldCh0aGlzLl9hcnJvd2hlYWQsIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuX3ZpZXdVbmRlclBvaW50ZXIubW9kZWwuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiB0aGlzLl92aWV3VW5kZXJQb2ludGVyLmdldFNlbGVjdG9yKHRoaXMuX21hZ25ldFVuZGVyUG9pbnRlciksCiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6ICQodGhpcy5fbWFnbmV0VW5kZXJQb2ludGVyKS5hdHRyKCdwb3J0JykKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fdmlld1VuZGVyUG9pbnRlcjsKICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9tYWduZXRVbmRlclBvaW50ZXI7CiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fc3RhdGljVmlldzsKICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zdGF0aWNNYWduZXQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRoaXMuX2FmdGVyQXJyb3doZWFkTW92ZSgpOwogICAgICAgIH0KCiAgICAgICAgZGVsZXRlIHRoaXMuX2FjdGlvbjsKICAgIH0KfSk7CgoKaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykgewoKICAgIG1vZHVsZS5leHBvcnRzLkxpbmsgPSBqb2ludC5kaWEuTGluazsKICAgIG1vZHVsZS5leHBvcnRzLkxpbmtWaWV3ID0gam9pbnQuZGlhLkxpbmtWaWV3Owp9CgovLyAgICAgIEpvaW50SlMgbGlicmFyeS4KLy8gICAgICAoYykgMjAxMS0yMDEzIGNsaWVudCBJTwoKCmpvaW50LmRpYS5QYXBlciA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHsKCiAgICBjbGFzc05hbWU6ICdwYXBlcicsCgogICAgb3B0aW9uczogewoKICAgICAgICB3aWR0aDogODAwLAogICAgICAgIGhlaWdodDogNjAwLAogICAgICAgIG9yaWdpbjogeyB4OiAwLCB5OiAwIH0sIC8vIHgseSBjb29yZGluYXRlcyBpbiB0b3AtbGVmdCBjb3JuZXIKICAgICAgICBncmlkU2l6ZTogNTAsCiAgICAgICAgcGVycGVuZGljdWxhckxpbmtzOiBmYWxzZSwKICAgICAgICBlbGVtZW50Vmlldzogam9pbnQuZGlhLkVsZW1lbnRWaWV3LAogICAgICAgIGxpbmtWaWV3OiBqb2ludC5kaWEuTGlua1ZpZXcsCiAgICAgICAgc25hcExpbmtzOiBmYWxzZSwgLy8gZmFsc2UsIHRydWUsIHsgcmFkaXVzOiB2YWx1ZSB9CgogICAgICAgIC8vIE1hcmtzIGFsbCBhdmFpbGFibGUgbWFnbmV0cyB3aXRoICdhdmFpbGFibGUtbWFnbmV0JyBjbGFzcyBuYW1lIGFuZCBhbGwgYXZhaWxhYmxlIGNlbGxzIHdpdGgKICAgICAgICAvLyAnYXZhaWxhYmxlLWNlbGwnIGNsYXNzIG5hbWUuIE1hcmtzIHRoZW0gd2hlbiBkcmFnZ2luZyBhIGxpbmsgaXMgc3RhcnRlZCBhbmQgdW5tYXJrCiAgICAgICAgLy8gd2hlbiB0aGUgZHJhZ2dpbmcgaXMgc3RvcHBlZC4KICAgICAgICBtYXJrQXZhaWxhYmxlOiBmYWxzZSwKCiAgICAgICAgLy8gRGVmaW5lcyB3aGF0IGxpbmsgbW9kZWwgaXMgYWRkZWQgdG8gdGhlIGdyYXBoIGFmdGVyIGFuIHVzZXIgY2xpY2tzIG9uIGFuIGFjdGl2ZSBtYWduZXQuCiAgICAgICAgLy8gVmFsdWUgY291bGQgYmUgdGhlIEJhY2tib25lLm1vZGVsIG9yIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBCYWNrYm9uZS5tb2RlbAogICAgICAgIC8vIGRlZmF1bHRMaW5rOiBmdW5jdGlvbihlbGVtZW50VmlldywgbWFnbmV0KSB7IHJldHVybiBjb25kaXRpb24gPyBuZXcgY3VzdG9tTGluazEoKSA6IG5ldyBjdXN0b21MaW5rMigpIH0KICAgICAgICBkZWZhdWx0TGluazogbmV3IGpvaW50LmRpYS5MaW5rLAoKICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRvIGFkZCBhIG5ldyBsaW5rIHRvIHRoZSBncmFwaCB3aGVuIHVzZXIgY2xpY2tzIG9uIGFuIGEgbWFnbmV0LgogICAgICAgIHZhbGlkYXRlTWFnbmV0OiBmdW5jdGlvbihjZWxsVmlldywgbWFnbmV0KSB7CiAgICAgICAgICAgIHJldHVybiBtYWduZXQuZ2V0QXR0cmlidXRlKCdtYWduZXQnKSAhPT0gJ3Bhc3NpdmUnOwogICAgICAgIH0sCgogICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdG8gYWxsb3cgb3IgZGlzYWxsb3cgdGhlIGxpbmsgY29ubmVjdGlvbiB3aGlsZSBhbiBhcnJvd2hlYWQgZW5kIChzb3VyY2UvdGFyZ2V0KQogICAgICAgIC8vIGJlaW5nIGNoYW5nZWQuCiAgICAgICAgdmFsaWRhdGVDb25uZWN0aW9uOiBmdW5jdGlvbihjZWxsVmlld1MsIG1hZ25ldFMsIGNlbGxWaWV3VCwgbWFnbmV0VCwgZW5kLCBsaW5rVmlldykgewogICAgICAgICAgICByZXR1cm4gKGVuZCA9PT0gJ3RhcmdldCcgPyBjZWxsVmlld1QgOiBjZWxsVmlld1MpIGluc3RhbmNlb2Ygam9pbnQuZGlhLkVsZW1lbnRWaWV3OwogICAgICAgIH0KICAgIH0sCgogICAgZXZlbnRzOiB7CgogICAgICAgICdtb3VzZWRvd24nOiAncG9pbnRlcmRvd24nLAogICAgICAgICdkYmxjbGljayc6ICdtb3VzZWRibGNsaWNrJywKICAgICAgICAnY2xpY2snOiAnbW91c2VjbGljaycsCiAgICAgICAgJ3RvdWNoc3RhcnQnOiAncG9pbnRlcmRvd24nLAogICAgICAgICdtb3VzZW1vdmUnOiAncG9pbnRlcm1vdmUnLAogICAgICAgICd0b3VjaG1vdmUnOiAncG9pbnRlcm1vdmUnCiAgICB9LAoKICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbihvcHRpb25zKSB7CgoJdGhpcy5fY29uZmlndXJlKG9wdGlvbnMpOwoJQmFja2JvbmUuVmlldy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfSwKCiAgICBfY29uZmlndXJlOiBmdW5jdGlvbihvcHRpb25zKSB7CgoJaWYgKHRoaXMub3B0aW9ucykgb3B0aW9ucyA9IF8uZXh0ZW5kKHt9LCBfLnJlc3VsdCh0aGlzLCAnb3B0aW9ucycpLCBvcHRpb25zKTsKCXRoaXMub3B0aW9ucyA9IG9wdGlvbnM7CiAgICB9LAoKICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkgewoKICAgICAgICBfLmJpbmRBbGwodGhpcywgJ2FkZENlbGwnLCAnc29ydENlbGxzJywgJ3Jlc2V0Q2VsbHMnLCAncG9pbnRlcnVwJywgJ2FzeW5jUmVuZGVyQ2VsbHMnKTsKCiAgICAgICAgdGhpcy5zdmcgPSBWKCdzdmcnKS5ub2RlOwogICAgICAgIHRoaXMudmlld3BvcnQgPSBWKCdnJykubm9kZTsKCiAgICAgICAgLy8gQXBwZW5kIGA8ZGVmcz5gIGVsZW1lbnQgdG8gdGhlIFNWRyBkb2N1bWVudC4gVGhpcyBpcyB1c2VmdWwgZm9yIGZpbHRlcnMgYW5kIGdyYWRpZW50cy4KICAgICAgICBWKHRoaXMuc3ZnKS5hcHBlbmQoVignZGVmcycpLm5vZGUpOwoKICAgICAgICBWKHRoaXMudmlld3BvcnQpLmF0dHIoeyAnY2xhc3MnOiAndmlld3BvcnQnIH0pOwogICAgICAgIAogICAgICAgIFYodGhpcy5zdmcpLmFwcGVuZCh0aGlzLnZpZXdwb3J0KTsKCiAgICAgICAgdGhpcy4kZWwuYXBwZW5kKHRoaXMuc3ZnKTsKCiAgICAgICAgdGhpcy5zZXRPcmlnaW4oKTsKICAgICAgICB0aGlzLnNldERpbWVuc2lvbnMoKTsKCgl0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsICdhZGQnLCB0aGlzLm9uQWRkQ2VsbCk7Cgl0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsICdyZXNldCcsIHRoaXMucmVzZXRDZWxscyk7Cgl0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsICdzb3J0JywgdGhpcy5zb3J0Q2VsbHMpOwoKCSQoZG9jdW1lbnQpLm9uKCdtb3VzZXVwIHRvdWNoZW5kJywgdGhpcy5wb2ludGVydXApOwoKICAgICAgICAvLyBIb2xkIHRoZSB2YWx1ZSB3aGVuIG1vdXNlIGhhcyBiZWVuIG1vdmVkOiB3aGVuIG1vdXNlIG1vdmVkLCBubyBjbGljayBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC4KICAgICAgICB0aGlzLl9tb3VzZW1vdmVkID0gZmFsc2U7CiAgICB9LAoKICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7CgoJJChkb2N1bWVudCkub2ZmKCdtb3VzZXVwIHRvdWNoZW5kJywgdGhpcy5wb2ludGVydXApOwoKCUJhY2tib25lLlZpZXcucHJvdG90eXBlLnJlbW92ZS5jYWxsKHRoaXMpOwogICAgfSwKCiAgICBzZXREaW1lbnNpb25zOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7CgogICAgICAgIHdpZHRoID0gdGhpcy5vcHRpb25zLndpZHRoID0gd2lkdGggfHwgdGhpcy5vcHRpb25zLndpZHRoOwogICAgICAgIGhlaWdodCA9IHRoaXMub3B0aW9ucy5oZWlnaHQgPSBoZWlnaHQgfHwgdGhpcy5vcHRpb25zLmhlaWdodDsKCiAgICAgICAgVih0aGlzLnN2ZykuYXR0cih7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSk7CgogICAgICAgIHRoaXMudHJpZ2dlcigncmVzaXplJywgd2lkdGgsIGhlaWdodCk7CiAgICB9LAoKICAgIHNldE9yaWdpbjogZnVuY3Rpb24ob3gsIG95KSB7CgogICAgICAgIHRoaXMub3B0aW9ucy5vcmlnaW4ueCA9IG94IHx8IDA7CiAgICAgICAgdGhpcy5vcHRpb25zLm9yaWdpbi55ID0gb3kgfHwgMDsKCiAgICAgICAgVih0aGlzLnZpZXdwb3J0KS50cmFuc2xhdGUob3gsIG95LCB7IGFic29sdXRlOiB0cnVlIH0pOwoKICAgICAgICB0aGlzLnRyaWdnZXIoJ3RyYW5zbGF0ZScsIG94LCBveSk7CiAgICB9LAoKICAgIC8vIEV4cGFuZC9zaHJpbmsgdGhlIHBhcGVyIHRvIGZpdCB0aGUgY29udGVudC4gU25hcCB0aGUgd2lkdGgvaGVpZ2h0IHRvIHRoZSBncmlkCiAgICAvLyBkZWZpbmVkIGluIGBncmlkV2lkdGhgLCBgZ3JpZEhlaWdodGAuIGBwYWRkaW5nYCBhZGRzIHRvIHRoZSByZXN1bHRpbmcgd2lkdGgvaGVpZ2h0IG9mIHRoZSBwYXBlci4KICAgIC8vIFdoZW4gb3B0aW9ucyB7IGZpdE5lZ2F0aXZlOiB0cnVlIH0gaXQgYWxzbyB0cmFuc2xhdGVzIHRoZSB2aWV3cG9ydCBpbiBvcmRlciB0byBtYWtlIGFsbAogICAgLy8gdGhlIGNvbnRlbnQgdmlzaWJsZS4KICAgIGZpdFRvQ29udGVudDogZnVuY3Rpb24oZ3JpZFdpZHRoLCBncmlkSGVpZ2h0LCBwYWRkaW5nLCBvcHQpIHsgLy8gYWx0ZXJuYXRpdmVseSBmdW5jdGlvbihvcHQpCgogICAgICAgIGlmIChfLmlzT2JqZWN0KGdyaWRXaWR0aCkpIHsKICAgICAgICAgICAgLy8gZmlyc3QgcGFyYW1ldGVyIGlzIGFuIG9wdGlvbiBvYmplY3QKICAgICAgICAgICAgb3B0ID0gZ3JpZFdpZHRoOwoJICAgIGdyaWRXaWR0aCA9IG9wdC5ncmlkV2lkdGggfHwgMTsKCSAgICBncmlkSGVpZ2h0ID0gb3B0LmdyaWRIZWlnaHQgfHwgMTsKICAgICAgICAgICAgcGFkZGluZyA9IG9wdC5wYWRkaW5nIHx8IDA7CgogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICBvcHQgPSBvcHQgfHwge307CgkgICAgZ3JpZFdpZHRoID0gZ3JpZFdpZHRoIHx8IDE7CgkgICAgZ3JpZEhlaWdodCA9IGdyaWRIZWlnaHQgfHwgMTsKICAgICAgICAgICAgcGFkZGluZyA9IHBhZGRpbmcgfHwgMDsKICAgICAgICB9CgoJLy8gQ2FsY3VsYXRlIHRoZSBwYXBlciBzaXplIHRvIGFjY29tb2RhdGUgYWxsIHRoZSBncmFwaCdzIGVsZW1lbnRzLgoJdmFyIGJib3ggPSBWKHRoaXMudmlld3BvcnQpLmJib3godHJ1ZSwgdGhpcy5zdmcpOwoKICAgICAgICB2YXIgY3VycmVudFNjYWxlID0gVih0aGlzLnZpZXdwb3J0KS5zY2FsZSgpOwoKICAgICAgICBiYm94LnggKj0gY3VycmVudFNjYWxlLnN4OwogICAgICAgIGJib3gueSAqPSBjdXJyZW50U2NhbGUuc3k7CiAgICAgICAgYmJveC53aWR0aCAqPSBjdXJyZW50U2NhbGUuc3g7CiAgICAgICAgYmJveC5oZWlnaHQgKj0gY3VycmVudFNjYWxlLnN5OwoKCXZhciBjYWxjV2lkdGggPSBNYXRoLm1heChNYXRoLmNlaWwoKGJib3gud2lkdGggKyBiYm94LngpIC8gZ3JpZFdpZHRoKSwgMSkgKiBncmlkV2lkdGg7Cgl2YXIgY2FsY0hlaWdodCA9IE1hdGgubWF4KE1hdGguY2VpbCgoYmJveC5oZWlnaHQgKyBiYm94LnkpIC8gZ3JpZEhlaWdodCksIDEpICogZ3JpZEhlaWdodDsKCiAgICAgICAgdmFyIHR4ID0gMDsKICAgICAgICB2YXIgdHkgPSAwOwoKICAgICAgICBpZiAoKG9wdC5hbGxvd05ld09yaWdpbiA9PSAnbmVnYXRpdmUnICYmIGJib3gueCA8IDApIHx8IChvcHQuYWxsb3dOZXdPcmlnaW4gPT0gJ3Bvc2l0aXZlJyAmJiBiYm94LnggPj0gMCkgfHwgb3B0LmFsbG93TmV3T3JpZ2luID09ICdhbnknKSB7CiAgICAgICAgICAgIHR4ID0gTWF0aC5jZWlsKC1iYm94LnggLyBncmlkV2lkdGgpICogZ3JpZFdpZHRoOwogICAgICAgICAgICB0eCArPSBwYWRkaW5nOwogICAgICAgICAgICBjYWxjV2lkdGggKz0gdHg7CiAgICAgICAgfQoKICAgICAgICBpZiAoKG9wdC5hbGxvd05ld09yaWdpbiA9PSAnbmVnYXRpdmUnICYmIGJib3gueSA8IDApIHx8IChvcHQuYWxsb3dOZXdPcmlnaW4gPT0gJ3Bvc2l0aXZlJyAmJiBiYm94LnkgPj0gMCkgfHwgb3B0LmFsbG93TmV3T3JpZ2luID09ICdhbnknKSB7CiAgICAgICAgICAgIHR5ID0gTWF0aC5jZWlsKC1iYm94LnkgLyBncmlkSGVpZ2h0KSAqIGdyaWRIZWlnaHQ7CiAgICAgICAgICAgIHR5ICs9IHBhZGRpbmc7CiAgICAgICAgICAgIGNhbGNIZWlnaHQgKz0gdHk7CiAgICAgICAgfQoKICAgICAgICBjYWxjV2lkdGggKz0gcGFkZGluZzsKICAgICAgICBjYWxjSGVpZ2h0ICs9IHBhZGRpbmc7CgogICAgICAgIHZhciBkaW1lbnNpb25DaGFuZ2UgPSBjYWxjV2lkdGggIT0gdGhpcy5vcHRpb25zLndpZHRoIHx8IGNhbGNIZWlnaHQgIT0gdGhpcy5vcHRpb25zLmhlaWdodDsKICAgICAgICB2YXIgb3JpZ2luQ2hhbmdlID0gdHggIT0gdGhpcy5vcHRpb25zLm9yaWdpbi54IHx8IHR5ICE9IHRoaXMub3B0aW9ucy5vcmlnaW4ueTsKCgkvLyBDaGFuZ2UgdGhlIGRpbWVuc2lvbnMgb25seSBpZiB0aGVyZSBpcyBhIHNpemUgZGlzY3JlcGVuY3kgb3IgYW4gb3JpZ2luIGNoYW5nZQogICAgICAgIGlmIChvcmlnaW5DaGFuZ2UpIHsKICAgICAgICAgICAgdGhpcy5zZXRPcmlnaW4odHgsIHR5KTsKICAgICAgICB9CglpZiAoZGltZW5zaW9uQ2hhbmdlKSB7CgkgICAgdGhpcy5zZXREaW1lbnNpb25zKGNhbGNXaWR0aCwgY2FsY0hlaWdodCk7Cgl9CiAgICB9LAoKICAgIHNjYWxlQ29udGVudFRvRml0OiBmdW5jdGlvbihvcHQpIHsKCiAgICAgICAgdmFyIGNvbnRlbnRCQm94ID0gdGhpcy5nZXRDb250ZW50QkJveCgpOwoKICAgICAgICBpZiAoIWNvbnRlbnRCQm94LndpZHRoIHx8ICFjb250ZW50QkJveC5oZWlnaHQpIHJldHVybjsKCiAgICAgICAgb3B0ID0gb3B0IHx8IHt9OwoKICAgICAgICBfLmRlZmF1bHRzKG9wdCwgewogICAgICAgICAgICBwYWRkaW5nOiAwLAogICAgICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiB0cnVlLAogICAgICAgICAgICBzY2FsZUdyaWQ6IG51bGwsCiAgICAgICAgICAgIG1pblNjYWxlOiAwLAogICAgICAgICAgICBtYXhTY2FsZTogTnVtYmVyLk1BWF9WQUxVRQogICAgICAgICAgICAvL21pblNjYWxlWAogICAgICAgICAgICAvL21pblNjYWxlWQogICAgICAgICAgICAvL21heFNjYWxlWAogICAgICAgICAgICAvL21heFNjYWxlWQogICAgICAgICAgICAvL2ZpdHRpbmdCQm94CiAgICAgICAgfSk7CgogICAgICAgIHZhciBwYWRkaW5nID0gb3B0LnBhZGRpbmc7CgogICAgICAgIHZhciBtaW5TY2FsZVggPSBvcHQubWluU2NhbGVYIHx8IG9wdC5taW5TY2FsZTsKICAgICAgICB2YXIgbWF4U2NhbGVYID0gb3B0Lm1heFNjYWxlWCB8fCBvcHQubWF4U2NhbGU7CiAgICAgICAgdmFyIG1pblNjYWxlWSA9IG9wdC5taW5TY2FsZVkgfHwgb3B0Lm1pblNjYWxlOwogICAgICAgIHZhciBtYXhTY2FsZVkgPSBvcHQubWF4U2NhbGVZIHx8IG9wdC5tYXhTY2FsZTsKCiAgICAgICAgdmFyIGZpdHRpbmdCQm94ID0gb3B0LmZpdHRpbmdCQm94IHx8ICh7CiAgICAgICAgICAgIHg6IHRoaXMub3B0aW9ucy5vcmlnaW4ueCwKICAgICAgICAgICAgeTogdGhpcy5vcHRpb25zLm9yaWdpbi55LAogICAgICAgICAgICB3aWR0aDogdGhpcy5vcHRpb25zLndpZHRoLAogICAgICAgICAgICBoZWlnaHQ6IHRoaXMub3B0aW9ucy5oZWlnaHQKICAgICAgICB9KTsKCiAgICAgICAgZml0dGluZ0JCb3ggPSBnLnJlY3QoZml0dGluZ0JCb3gpLm1vdmVBbmRFeHBhbmQoewogICAgICAgICAgICB4OiBwYWRkaW5nLAogICAgICAgICAgICB5OiBwYWRkaW5nLAogICAgICAgICAgICB3aWR0aDogLTIgKiBwYWRkaW5nLAogICAgICAgICAgICBoZWlnaHQ6IC0yICogcGFkZGluZwogICAgICAgIH0pOwoKICAgICAgICB2YXIgY3VycmVudFNjYWxlID0gVih0aGlzLnZpZXdwb3J0KS5zY2FsZSgpOwoKICAgICAgICB2YXIgbmV3U3ggPSBmaXR0aW5nQkJveC53aWR0aCAvIGNvbnRlbnRCQm94LndpZHRoICogY3VycmVudFNjYWxlLnN4OwogICAgICAgIHZhciBuZXdTeSA9IGZpdHRpbmdCQm94LmhlaWdodCAvIGNvbnRlbnRCQm94LmhlaWdodCAqIGN1cnJlbnRTY2FsZS5zeTsKCiAgICAgICAgaWYgKG9wdC5wcmVzZXJ2ZUFzcGVjdFJhdGlvKSB7CiAgICAgICAgICAgIG5ld1N4ID0gbmV3U3kgPSBNYXRoLm1pbihuZXdTeCwgbmV3U3kpOwogICAgICAgIH0KCiAgICAgICAgLy8gc25hcCBzY2FsZSB0byBhIGdyaWQKICAgICAgICBpZiAob3B0LnNjYWxlR3JpZCkgewoKICAgICAgICAgICAgdmFyIGdyaWRTaXplID0gb3B0LnNjYWxlR3JpZDsKCiAgICAgICAgICAgIG5ld1N4ID0gZ3JpZFNpemUgKiBNYXRoLmZsb29yKG5ld1N4IC8gZ3JpZFNpemUpOwogICAgICAgICAgICBuZXdTeSA9IGdyaWRTaXplICogTWF0aC5mbG9vcihuZXdTeSAvIGdyaWRTaXplKTsKICAgICAgICB9CgogICAgICAgIC8vIHNjYWxlIG1pbi9tYXggYm91bmRhcmllcwogICAgICAgIG5ld1N4ID0gTWF0aC5taW4obWF4U2NhbGVYLCBNYXRoLm1heChtaW5TY2FsZVgsIG5ld1N4KSk7CiAgICAgICAgbmV3U3kgPSBNYXRoLm1pbihtYXhTY2FsZVksIE1hdGgubWF4KG1pblNjYWxlWSwgbmV3U3kpKTsKCiAgICAgICAgdGhpcy5zY2FsZShuZXdTeCwgbmV3U3kpOwoKICAgICAgICB2YXIgY29udGVudFRyYW5zbGF0aW9uID0gdGhpcy5nZXRDb250ZW50QkJveCgpOwoKICAgICAgICB2YXIgbmV3T3ggPSBmaXR0aW5nQkJveC54IC0gY29udGVudFRyYW5zbGF0aW9uLng7CiAgICAgICAgdmFyIG5ld095ID0gZml0dGluZ0JCb3gueSAtIGNvbnRlbnRUcmFuc2xhdGlvbi55OwoKICAgICAgICB0aGlzLnNldE9yaWdpbihuZXdPeCwgbmV3T3kpOwogICAgfSwKCiAgICBnZXRDb250ZW50QkJveDogZnVuY3Rpb24oKSB7CgogICAgICAgIHZhciBjcmVjdCA9IHRoaXMudmlld3BvcnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CgogICAgICAgIC8vIFVzaW5nIFNjcmVlbiBDVE0gd2FzIHRoZSBvbmx5IHdheSB0byBnZXQgdGhlIHJlYWwgdmlld3BvcnQgYm91bmRpbmcgYm94IHdvcmtpbmcgaW4gYm90aAogICAgICAgIC8vIEdvb2dsZSBDaHJvbWUgYW5kIEZpcmVmb3guCiAgICAgICAgdmFyIHNjcmVlbkNUTSA9IHRoaXMudmlld3BvcnQuZ2V0U2NyZWVuQ1RNKCk7CgogICAgICAgIC8vIGZvciBub24tZGVmYXVsdCBvcmlnaW4gd2UgbmVlZCB0byB0YWtlIHRoZSB2aWV3cG9ydCB0cmFuc2xhdGlvbiBpbnRvIGFjY291bnQKICAgICAgICB2YXIgdmlld3BvcnRDVE0gPSB0aGlzLnZpZXdwb3J0LmdldENUTSgpOwoKICAgICAgICB2YXIgYmJveCA9IGcucmVjdCh7CiAgICAgICAgICAgIHg6IGNyZWN0LmxlZnQgLSBzY3JlZW5DVE0uZSArIHZpZXdwb3J0Q1RNLmUsCiAgICAgICAgICAgIHk6IGNyZWN0LnRvcCAtIHNjcmVlbkNUTS5mICsgdmlld3BvcnRDVE0uZiwKICAgICAgICAgICAgd2lkdGg6IGNyZWN0LndpZHRoLAogICAgICAgICAgICBoZWlnaHQ6IGNyZWN0LmhlaWdodAogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gYmJveDsKICAgIH0sCgogICAgY3JlYXRlVmlld0Zvck1vZGVsOiBmdW5jdGlvbihjZWxsKSB7CgogICAgICAgIHZhciB2aWV3OwogICAgICAgIAogICAgICAgIHZhciB0eXBlID0gY2VsbC5nZXQoJ3R5cGUnKTsKICAgICAgICB2YXIgbW9kdWxlID0gdHlwZS5zcGxpdCgnLicpWzBdOwogICAgICAgIHZhciBlbnRpdHkgPSB0eXBlLnNwbGl0KCcuJylbMV07CgogICAgICAgIC8vIElmIHRoZXJlIGlzIGEgc3BlY2lhbCB2aWV3IGRlZmluZWQgZm9yIHRoaXMgbW9kZWwsIHVzZSB0aGF0IG9uZSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGBlbGVtZW50Vmlld2AvYGxpbmtWaWV3YC4KICAgICAgICBpZiAoam9pbnQuc2hhcGVzW21vZHVsZV0gJiYgam9pbnQuc2hhcGVzW21vZHVsZV1bZW50aXR5ICsgJ1ZpZXcnXSkgewoKICAgICAgICAgICAgdmlldyA9IG5ldyBqb2ludC5zaGFwZXNbbW9kdWxlXVtlbnRpdHkgKyAnVmlldyddKHsgbW9kZWw6IGNlbGwsIGludGVyYWN0aXZlOiB0aGlzLm9wdGlvbnMuaW50ZXJhY3RpdmUgfSk7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSBpZiAoY2VsbCBpbnN0YW5jZW9mIGpvaW50LmRpYS5FbGVtZW50KSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdmlldyA9IG5ldyB0aGlzLm9wdGlvbnMuZWxlbWVudFZpZXcoeyBtb2RlbDogY2VsbCwgaW50ZXJhY3RpdmU6IHRoaXMub3B0aW9ucy5pbnRlcmFjdGl2ZSB9KTsKCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIHZpZXcgPSBuZXcgdGhpcy5vcHRpb25zLmxpbmtWaWV3KHsgbW9kZWw6IGNlbGwsIGludGVyYWN0aXZlOiB0aGlzLm9wdGlvbnMuaW50ZXJhY3RpdmUgfSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdmlldzsKICAgIH0sCgogICAgb25BZGRDZWxsOiBmdW5jdGlvbihjZWxsLCBncmFwaCwgb3B0aW9ucykgewoKICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFzeW5jICYmIG9wdGlvbnMuYXN5bmMgIT09IGZhbHNlICYmIF8uaXNOdW1iZXIob3B0aW9ucy5wb3NpdGlvbikpIHsKCiAgICAgICAgICAgIHRoaXMuX2FzeW5jQ2VsbHMgPSB0aGlzLl9hc3luY0NlbGxzIHx8IFtdOwogICAgICAgICAgICB0aGlzLl9hc3luY0NlbGxzLnB1c2goY2VsbCk7CgogICAgICAgICAgICBpZiAob3B0aW9ucy5wb3NpdGlvbiA9PSAwKSB7CgogICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ZyYW1lSWQpIHRocm93ICdhbm90aGVyIGFzeW5jaHJvbm91cyByZW5kZXJpbmcgaW4gcHJvZ3Jlc3MnOwoKICAgICAgICAgICAgICAgIHRoaXMuYXN5bmNSZW5kZXJDZWxscyh0aGlzLl9hc3luY0NlbGxzKTsKICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9hc3luY0NlbGxzOwogICAgICAgICAgICB9CgogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICB0aGlzLmFkZENlbGwoY2VsbCk7CiAgICAgICAgfQogICAgfSwKCiAgICBhZGRDZWxsOiBmdW5jdGlvbihjZWxsKSB7CgogICAgICAgIHZhciB2aWV3ID0gdGhpcy5jcmVhdGVWaWV3Rm9yTW9kZWwoY2VsbCk7CgogICAgICAgIFYodGhpcy52aWV3cG9ydCkuYXBwZW5kKHZpZXcuZWwpOwogICAgICAgIHZpZXcucGFwZXIgPSB0aGlzOwogICAgICAgIHZpZXcucmVuZGVyKCk7CgogICAgICAgIC8vIFRoaXMgaXMgdGhlIG9ubHkgd2F5IHRvIHByZXZlbnQgaW1hZ2UgZHJhZ2dpbmcgaW4gRmlyZWZveCB0aGF0IHdvcmtzLgogICAgICAgIC8vIFNldHRpbmcgLW1vei11c2VyLXNlbGVjdDogbm9uZSwgZHJhZ2dhYmxlPSJmYWxzZSIgYXR0cmlidXRlIG9yIHVzZXItZHJhZzogbm9uZSBkaWRuJ3QgaGVscC4KICAgICAgICAkKHZpZXcuZWwpLmZpbmQoJ2ltYWdlJykub24oJ2RyYWdzdGFydCcsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH0pOwogICAgfSwKCiAgICByZXNldENlbGxzOiBmdW5jdGlvbihjZWxsc0NvbGxlY3Rpb24pIHsKCiAgICAgICAgJCh0aGlzLnZpZXdwb3J0KS5lbXB0eSgpOwoKICAgICAgICB2YXIgY2VsbHMgPSBjZWxsc0NvbGxlY3Rpb24ubW9kZWxzLnNsaWNlKCk7CgogICAgICAgIC8vIE1ha2Ugc3VyZSBsaW5rcyBhcmUgYWx3YXlzIGFkZGVkIEFGVEVSIGVsZW1lbnRzLgogICAgICAgIC8vIFRoZXkgd291bGRuJ3QgZmluZCB0aGVpciBzb3VyY2VzL3RhcmdldHMgaW4gdGhlIERPTSBvdGhlcndpc2UuCiAgICAgICAgY2VsbHMuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBhIGluc3RhbmNlb2Ygam9pbnQuZGlhLkxpbmsgPyAxIDogLTE7IH0pOwogICAgICAgIAoJaWYgKHRoaXMuX2ZyYW1lSWQpIHsKCgkgICAgam9pbnQudXRpbC5jYW5jZWxGcmFtZSh0aGlzLl9mcmFtZUlkKTsKICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2ZyYW1lSWQ7Cgl9CgoJaWYgKHRoaXMub3B0aW9ucy5hc3luYykgewoKCSAgICB0aGlzLmFzeW5jUmVuZGVyQ2VsbHMoY2VsbHMpOwogICAgICAgICAgICAvLyBTb3J0IHRoZSBjZWxscyBvbmNlIGFsbCBlbGVtZW50cyByZW5kZXJlZCAoc2VlIGFzeW5jUmVuZGVyQ2VsbHMoKSkuCgoJfSBlbHNlIHsKCiAgICAgICAgICAgIF8uZWFjaChjZWxscywgdGhpcy5hZGRDZWxsLCB0aGlzKTsKCiAgICAgICAgICAgIC8vIFNvcnQgdGhlIGNlbGxzIGluIHRoZSBET00gbWFudWFsbHkgYXMgd2UgbWlnaHQgaGF2ZSBjaGFuZ2VkIHRoZSBvcmRlciB0aGV5CiAgICAgICAgICAgIC8vIHdlcmUgYWRkZWQgdG8gdGhlIERPTSAoc2VlIGFib3ZlKS4KICAgICAgICAgICAgdGhpcy5zb3J0Q2VsbHMoKTsKCX0KICAgIH0sCgogICAgYXN5bmNSZW5kZXJDZWxsczogZnVuY3Rpb24oY2VsbHMpIHsKCiAgICAgICAgdmFyIGRvbmUgPSBmYWxzZTsKCiAgICAgICAgaWYgKHRoaXMuX2ZyYW1lSWQpIHsKCiAgICAgICAgICAgIF8uZWFjaChfLnJhbmdlKHRoaXMub3B0aW9ucy5hc3luYyAmJiB0aGlzLm9wdGlvbnMuYXN5bmMuYmF0Y2hTaXplIHx8IDUwKSwgZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgdmFyIGNlbGwgPSBjZWxscy5zaGlmdCgpOwoJICAgICAgICBkb25lID0gIWNlbGw7CiAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHRoaXMuYWRkQ2VsbChjZWxsKTsKCiAgICAgICAgICAgIH0sIHRoaXMpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGRvbmUpIHsKCiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9mcmFtZUlkOwogICAgICAgICAgICB0aGlzLnNvcnRDZWxscygpOwoJICAgIHRoaXMudHJpZ2dlcigncmVuZGVyOmRvbmUnKTsKCgl9IGVsc2UgewoKICAgICAgICAgICAgdGhpcy5fZnJhbWVJZCA9IGpvaW50LnV0aWwubmV4dEZyYW1lKF8uYmluZChmdW5jdGlvbigpIHsKCQl0aGlzLmFzeW5jUmVuZGVyQ2VsbHMoY2VsbHMpOwoJICAgIH0sIHRoaXMpKTsKICAgICAgICB9CiAgICB9LAoKICAgIHNvcnRDZWxsczogZnVuY3Rpb24oKSB7CgogICAgICAgIC8vIFJ1biBpbnNlcnRpb24gc29ydCBhbGdvcml0aG0gaW4gb3JkZXIgdG8gZWZmaWNpZW50bHkgc29ydCBET00gZWxlbWVudHMgYWNjb3JkaW5nIHRvIHRoZWlyCiAgICAgICAgLy8gYXNzb2NpYXRlZCBtb2RlbCBgemAgYXR0cmlidXRlLgoKICAgICAgICB2YXIgJGNlbGxzID0gJCh0aGlzLnZpZXdwb3J0KS5jaGlsZHJlbignW21vZGVsLWlkXScpOwogICAgICAgIHZhciBjZWxscyA9IHRoaXMubW9kZWwuZ2V0KCdjZWxscycpOwoKICAgICAgICB0aGlzLnNvcnRFbGVtZW50cygkY2VsbHMsIGZ1bmN0aW9uKGEsIGIpIHsKCiAgICAgICAgICAgIHZhciBjZWxsQSA9IGNlbGxzLmdldCgkKGEpLmF0dHIoJ21vZGVsLWlkJykpOwogICAgICAgICAgICB2YXIgY2VsbEIgPSBjZWxscy5nZXQoJChiKS5hdHRyKCdtb2RlbC1pZCcpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiAoY2VsbEEuZ2V0KCd6JykgfHwgMCkgPiAoY2VsbEIuZ2V0KCd6JykgfHwgMCkgPyAxIDogLTE7CiAgICAgICAgfSk7CiAgICB9LAoKICAgIC8vIEhpZ2hseSBpbnNwaXJlZCBieSB0aGUganF1ZXJ5LnNvcnRFbGVtZW50cyBwbHVnaW4gYnkgUGFkb2xzZXkuCiAgICAvLyBTZWUgaHR0cDovL2phbWVzLnBhZG9sc2V5LmNvbS9qYXZhc2NyaXB0L3NvcnRpbmctZWxlbWVudHMtd2l0aC1qcXVlcnkvLgogICAgc29ydEVsZW1lbnRzOiBmdW5jdGlvbihlbGVtZW50cywgY29tcGFyYXRvcikgewoKICAgICAgICB2YXIgJGVsZW1lbnRzID0gJChlbGVtZW50cyk7CiAgICAgICAgCiAgICAgICAgdmFyIHBsYWNlbWVudHMgPSAkZWxlbWVudHMubWFwKGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgdmFyIHNvcnRFbGVtZW50ID0gdGhpczsKICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBzb3J0RWxlbWVudC5wYXJlbnROb2RlOwoKICAgICAgICAgICAgLy8gU2luY2UgdGhlIGVsZW1lbnQgaXRzZWxmIHdpbGwgY2hhbmdlIHBvc2l0aW9uLCB3ZSBoYXZlCiAgICAgICAgICAgIC8vIHRvIGhhdmUgc29tZSB3YXkgb2Ygc3RvcmluZyBpdCdzIG9yaWdpbmFsIHBvc2l0aW9uIGluCiAgICAgICAgICAgIC8vIHRoZSBET00uIFRoZSBlYXNpZXN0IHdheSBpcyB0byBoYXZlIGEgJ2ZsYWcnIG5vZGU6CiAgICAgICAgICAgIHZhciBuZXh0U2libGluZyA9IHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKAogICAgICAgICAgICAgICAgZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpLAogICAgICAgICAgICAgICAgc29ydEVsZW1lbnQubmV4dFNpYmxpbmcKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUgPT09IHRoaXMpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgICAgICAgICAgICJZb3UgY2FuJ3Qgc29ydCBlbGVtZW50cyBpZiBhbnkgb25lIGlzIGEgZGVzY2VuZGFudCBvZiBhbm90aGVyLiIKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBJbnNlcnQgYmVmb3JlIGZsYWc6CiAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCBuZXh0U2libGluZyk7CiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZmxhZzoKICAgICAgICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobmV4dFNpYmxpbmcpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH07CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc29ydC5jYWxsKCRlbGVtZW50cywgY29tcGFyYXRvcikuZWFjaChmdW5jdGlvbihpKSB7CiAgICAgICAgICAgIHBsYWNlbWVudHNbaV0uY2FsbCh0aGlzKTsKICAgICAgICB9KTsKICAgIH0sCgogICAgc2NhbGU6IGZ1bmN0aW9uKHN4LCBzeSwgb3gsIG95KSB7CgogICAgICAgIHN5ID0gc3kgfHwgc3g7CgogICAgICAgIGlmIChfLmlzVW5kZWZpbmVkKG94KSkgewoKICAgICAgICAgICAgb3ggPSAwOwogICAgICAgICAgICBveSA9IDA7CiAgICAgICAgfQoKICAgICAgICAvLyBSZW1vdmUgcHJldmlvdXMgdHJhbnNmb3JtIHNvIHRoYXQgdGhlIG5ldyBzY2FsZSBpcyBub3QgYWZmZWN0ZWQgYnkgcHJldmlvdXMgc2NhbGVzLCBlc3BlY2lhbGx5CiAgICAgICAgLy8gdGhlIG9sZCB0cmFuc2xhdGUoKSBkb2VzIG5vdCBhZmZlY3QgdGhlIG5ldyB0cmFuc2xhdGUgaWYgYW4gb3JpZ2luIGlzIHNwZWNpZmllZC4KICAgICAgICBWKHRoaXMudmlld3BvcnQpLmF0dHIoJ3RyYW5zZm9ybScsICcnKTsKCiAgICAgICAgdmFyIG9sZFR4ID0gdGhpcy5vcHRpb25zLm9yaWdpbi54OwogICAgICAgIHZhciBvbGRUeSA9IHRoaXMub3B0aW9ucy5vcmlnaW4ueTsKCiAgICAgICAgLy8gVE9ETzogVi5zY2FsZSgpIGRvZXNuJ3Qgc3VwcG9ydCBzZXR0aW5nIHNjYWxlIG9yaWdpbi4gI0ZpeCAgICAgICAgCiAgICAgICAgaWYgKG94IHx8IG95IHx8IG9sZFR4IHx8IG9sZFR5KSB7CgogICAgICAgICAgICB2YXIgbmV3VHggPSBvbGRUeCAtIG94ICogKHN4IC0gMSk7CiAgICAgICAgICAgIHZhciBuZXdUeSA9IG9sZFR5IC0gb3kgKiAoc3kgLSAxKTsKICAgICAgICAgICAgdGhpcy5zZXRPcmlnaW4obmV3VHgsIG5ld1R5KTsKICAgICAgICB9CgogICAgICAgIFYodGhpcy52aWV3cG9ydCkuc2NhbGUoc3gsIHN5KTsKCgl0aGlzLnRyaWdnZXIoJ3NjYWxlJywgc3gsIHN5LCBveCwgb3kpOwoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgcm90YXRlOiBmdW5jdGlvbihkZWcsIG94LCBveSkgewogICAgICAgIAogICAgICAgIC8vIElmIHRoZSBvcmlnaW4gaXMgbm90IHNldCBleHBsaWNpdGVseSwgcm90YXRlIGFyb3VuZCB0aGUgY2VudGVyLiBOb3RlIHRoYXQKICAgICAgICAvLyB3ZSBtdXN0IHVzZSB0aGUgcGxhaW4gYm91bmRpbmcgYm94IChgdGhpcy5lbC5nZXRCQm94KClgIGluc3RlYWQgb2YgdGhlIG9uZSB0aGF0IGdpdmVzIHVzCiAgICAgICAgLy8gdGhlIHJlYWwgYm91bmRpbmcgYm94IChgYmJveCgpYCkgaW5jbHVkaW5nIHRyYW5zZm9ybWF0aW9ucykuCiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQob3gpKSB7CgogICAgICAgICAgICB2YXIgYmJveCA9IHRoaXMudmlld3BvcnQuZ2V0QkJveCgpOwogICAgICAgICAgICBveCA9IGJib3gud2lkdGgvMjsKICAgICAgICAgICAgb3kgPSBiYm94LmhlaWdodC8yOwogICAgICAgIH0KCiAgICAgICAgVih0aGlzLnZpZXdwb3J0KS5yb3RhdGUoZGVnLCBveCwgb3kpOwogICAgfSwKCiAgICAvLyBGaW5kIHRoZSBmaXJzdCB2aWV3IGNsaW1iaW5nIHVwIHRoZSBET00gdHJlZSBzdGFydGluZyBhdCBlbGVtZW50IGBlbGAuIE5vdGUgdGhhdCBgZWxgIGNhbiBhbHNvCiAgICAvLyBiZSBhIHNlbGVjdG9yIG9yIGEgalF1ZXJ5IG9iamVjdC4KICAgIGZpbmRWaWV3OiBmdW5jdGlvbihlbCkgewoKICAgICAgICB2YXIgJGVsID0gdGhpcy4kKGVsKTsKCiAgICAgICAgaWYgKCRlbC5sZW5ndGggPT09IDAgfHwgJGVsWzBdID09PSB0aGlzLmVsKSB7CgogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgaWYgKCRlbC5kYXRhKCd2aWV3JykpIHsKCiAgICAgICAgICAgIHJldHVybiAkZWwuZGF0YSgndmlldycpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRoaXMuZmluZFZpZXcoJGVsLnBhcmVudCgpKTsKICAgIH0sCgogICAgLy8gRmluZCBhIHZpZXcgZm9yIGEgbW9kZWwgYGNlbGxgLiBgY2VsbGAgY2FuIGFsc28gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgbW9kZWwgYGlkYC4KICAgIGZpbmRWaWV3QnlNb2RlbDogZnVuY3Rpb24oY2VsbCkgewoKICAgICAgICB2YXIgaWQgPSBfLmlzU3RyaW5nKGNlbGwpID8gY2VsbCA6IGNlbGwuaWQ7CiAgICAgICAgCiAgICAgICAgdmFyICR2aWV3ID0gdGhpcy4kKCdbbW9kZWwtaWQ9IicgKyBpZCArICciXScpOwogICAgICAgIGlmICgkdmlldy5sZW5ndGgpIHsKCiAgICAgICAgICAgIHJldHVybiAkdmlldy5kYXRhKCd2aWV3Jyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9LAoKICAgIC8vIEZpbmQgYWxsIHZpZXdzIGF0IGdpdmVuIHBvaW50CiAgICBmaW5kVmlld3NGcm9tUG9pbnQ6IGZ1bmN0aW9uKHApIHsKCglwID0gZy5wb2ludChwKTsKCiAgICAgICAgdmFyIHZpZXdzID0gXy5tYXAodGhpcy5tb2RlbC5nZXRFbGVtZW50cygpLCB0aGlzLmZpbmRWaWV3QnlNb2RlbCk7CgoJcmV0dXJuIF8uZmlsdGVyKHZpZXdzLCBmdW5jdGlvbih2aWV3KSB7CgkgICAgcmV0dXJuIGcucmVjdChWKHZpZXcuZWwpLmJib3goZmFsc2UsIHRoaXMudmlld3BvcnQpKS5jb250YWluc1BvaW50KHApOwoJfSwgdGhpcyk7CiAgICB9LAoKICAgIC8vIEZpbmQgYWxsIHZpZXdzIGluIGdpdmVuIGFyZWEKICAgIGZpbmRWaWV3c0luQXJlYTogZnVuY3Rpb24ocikgewoKCXIgPSBnLnJlY3Qocik7CgogICAgICAgIHZhciB2aWV3cyA9IF8ubWFwKHRoaXMubW9kZWwuZ2V0RWxlbWVudHMoKSwgdGhpcy5maW5kVmlld0J5TW9kZWwpOwoKCXJldHVybiBfLmZpbHRlcih2aWV3cywgZnVuY3Rpb24odmlldykgewoJICAgIHJldHVybiByLmludGVyc2VjdChnLnJlY3QoVih2aWV3LmVsKS5iYm94KGZhbHNlLCB0aGlzLnZpZXdwb3J0KSkpOwoJfSwgdGhpcyk7CiAgICB9LAoKICAgIGdldE1vZGVsQnlJZDogZnVuY3Rpb24oaWQpIHsKCiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZ2V0Q2VsbChpZCk7CiAgICB9LAoKICAgIHNuYXBUb0dyaWQ6IGZ1bmN0aW9uKHApIHsKCiAgICAgICAgLy8gQ29udmVydCBnbG9iYWwgY29vcmRpbmF0ZXMgdG8gdGhlIGxvY2FsIG9uZXMgb2YgdGhlIGB2aWV3cG9ydGAuIE90aGVyd2lzZSwKICAgICAgICAvLyBpbXByb3BlciB0cmFuc2Zvcm1hdGlvbiB3b3VsZCBiZSBhcHBsaWVkIHdoZW4gdGhlIHZpZXdwb3J0IGdldHMgdHJhbnNmb3JtZWQgKHNjYWxlZC9yb3RhdGVkKS4gCiAgICAgICAgdmFyIGxvY2FsUG9pbnQgPSBWKHRoaXMudmlld3BvcnQpLnRvTG9jYWxQb2ludChwLngsIHAueSk7CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHg6IGcuc25hcFRvR3JpZChsb2NhbFBvaW50LngsIHRoaXMub3B0aW9ucy5ncmlkU2l6ZSksCiAgICAgICAgICAgIHk6IGcuc25hcFRvR3JpZChsb2NhbFBvaW50LnksIHRoaXMub3B0aW9ucy5ncmlkU2l6ZSkKICAgICAgICB9OwogICAgfSwKCiAgICBnZXREZWZhdWx0TGluazogZnVuY3Rpb24oY2VsbFZpZXcsIG1hZ25ldCkgewoKICAgICAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5kZWZhdWx0TGluaykKICAgICAgICAvLyBkZWZhdWx0IGxpbmsgaXMgYSBmdW5jdGlvbiBwcm9kdWNpbmcgbGluayBtb2RlbAogICAgICAgICAgICA/IHRoaXMub3B0aW9ucy5kZWZhdWx0TGluay5jYWxsKHRoaXMsIGNlbGxWaWV3LCBtYWduZXQpCiAgICAgICAgLy8gZGVmYXVsdCBsaW5rIGlzIHRoZSBCYWNrYm9uZSBtb2RlbAogICAgICAgICAgICA6IHRoaXMub3B0aW9ucy5kZWZhdWx0TGluay5jbG9uZSgpOwogICAgfSwKCiAgICAvLyBJbnRlcmFjdGlvbi4KICAgIC8vIC0tLS0tLS0tLS0tLQoKICAgIG1vdXNlZGJsY2xpY2s6IGZ1bmN0aW9uKGV2dCkgewogICAgICAgIAogICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGV2dCA9IGpvaW50LnV0aWwubm9ybWFsaXplRXZlbnQoZXZ0KTsKICAgICAgICAKICAgICAgICB2YXIgdmlldyA9IHRoaXMuZmluZFZpZXcoZXZ0LnRhcmdldCk7CiAgICAgICAgdmFyIGxvY2FsUG9pbnQgPSB0aGlzLnNuYXBUb0dyaWQoeyB4OiBldnQuY2xpZW50WCwgeTogZXZ0LmNsaWVudFkgfSk7CgogICAgICAgIGlmICh2aWV3KSB7CiAgICAgICAgICAgIAogICAgICAgICAgICB2aWV3LnBvaW50ZXJkYmxjbGljayhldnQsIGxvY2FsUG9pbnQueCwgbG9jYWxQb2ludC55KTsKICAgICAgICAgICAgCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignYmxhbms6cG9pbnRlcmRibGNsaWNrJywgZXZ0LCBsb2NhbFBvaW50LngsIGxvY2FsUG9pbnQueSk7CiAgICAgICAgfQogICAgfSwKCiAgICBtb3VzZWNsaWNrOiBmdW5jdGlvbihldnQpIHsKCiAgICAgICAgLy8gVHJpZ2dlciBldmVudCB3aGVuIG1vdXNlIG5vdCBtb3ZlZC4KICAgICAgICBpZiAoIXRoaXMuX21vdXNlbW92ZWQpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIGV2dCA9IGpvaW50LnV0aWwubm9ybWFsaXplRXZlbnQoZXZ0KTsKCiAgICAgICAgICAgIHZhciB2aWV3ID0gdGhpcy5maW5kVmlldyhldnQudGFyZ2V0KTsKICAgICAgICAgICAgdmFyIGxvY2FsUG9pbnQgPSB0aGlzLnNuYXBUb0dyaWQoeyB4OiBldnQuY2xpZW50WCwgeTogZXZ0LmNsaWVudFkgfSk7CgogICAgICAgICAgICBpZiAodmlldykgewoKICAgICAgICAgICAgICAgIHZpZXcucG9pbnRlcmNsaWNrKGV2dCwgbG9jYWxQb2ludC54LCBsb2NhbFBvaW50LnkpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdibGFuazpwb2ludGVyY2xpY2snLCBldnQsIGxvY2FsUG9pbnQueCwgbG9jYWxQb2ludC55KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdGhpcy5fbW91c2Vtb3ZlZCA9IGZhbHNlOwogICAgfSwKCiAgICBwb2ludGVyZG93bjogZnVuY3Rpb24oZXZ0KSB7CgogICAgICAgIGV2dCA9IGpvaW50LnV0aWwubm9ybWFsaXplRXZlbnQoZXZ0KTsKICAgICAgICAKICAgICAgICB2YXIgdmlldyA9IHRoaXMuZmluZFZpZXcoZXZ0LnRhcmdldCk7CgogICAgICAgIHZhciBsb2NhbFBvaW50ID0gdGhpcy5zbmFwVG9HcmlkKHsgeDogZXZ0LmNsaWVudFgsIHk6IGV2dC5jbGllbnRZIH0pOwogICAgICAgIAogICAgICAgIGlmICh2aWV3KSB7CgogICAgICAgICAgICB0aGlzLnNvdXJjZVZpZXcgPSB2aWV3OwoKICAgICAgICAgICAgdmlldy5wb2ludGVyZG93bihldnQsIGxvY2FsUG9pbnQueCwgbG9jYWxQb2ludC55KTsKICAgICAgICAgICAgCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignYmxhbms6cG9pbnRlcmRvd24nLCBldnQsIGxvY2FsUG9pbnQueCwgbG9jYWxQb2ludC55KTsKICAgICAgICB9CiAgICB9LAoKICAgIHBvaW50ZXJtb3ZlOiBmdW5jdGlvbihldnQpIHsKCiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgZXZ0ID0gam9pbnQudXRpbC5ub3JtYWxpemVFdmVudChldnQpOwoKICAgICAgICBpZiAodGhpcy5zb3VyY2VWaWV3KSB7CgogICAgICAgICAgICAvLyBNb3VzZSBtb3ZlZC4KICAgICAgICAgICAgdGhpcy5fbW91c2Vtb3ZlZCA9IHRydWU7CgogICAgICAgICAgICB2YXIgbG9jYWxQb2ludCA9IHRoaXMuc25hcFRvR3JpZCh7IHg6IGV2dC5jbGllbnRYLCB5OiBldnQuY2xpZW50WSB9KTsKCiAgICAgICAgICAgIHRoaXMuc291cmNlVmlldy5wb2ludGVybW92ZShldnQsIGxvY2FsUG9pbnQueCwgbG9jYWxQb2ludC55KTsKICAgICAgICB9CiAgICB9LAoKICAgIHBvaW50ZXJ1cDogZnVuY3Rpb24oZXZ0KSB7CgogICAgICAgIGV2dCA9IGpvaW50LnV0aWwubm9ybWFsaXplRXZlbnQoZXZ0KTsKCiAgICAgICAgdmFyIGxvY2FsUG9pbnQgPSB0aGlzLnNuYXBUb0dyaWQoeyB4OiBldnQuY2xpZW50WCwgeTogZXZ0LmNsaWVudFkgfSk7CiAgICAgICAgCiAgICAgICAgaWYgKHRoaXMuc291cmNlVmlldykgewoKICAgICAgICAgICAgdGhpcy5zb3VyY2VWaWV3LnBvaW50ZXJ1cChldnQsIGxvY2FsUG9pbnQueCwgbG9jYWxQb2ludC55KTsKCiAgICAgICAgICAgIC8vImRlbGV0ZSBzb3VyY2VWaWV3IiBvY2Nhc2lvbmFsbHkgdGhyb3dzIGFuIGVycm9yIGluIGNocm9tZSAoaWxsZWdhbCBhY2Nlc3MgZXhjZXB0aW9uKQoJICAgIHRoaXMuc291cmNlVmlldyA9IG51bGw7CgogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2JsYW5rOnBvaW50ZXJ1cCcsIGV2dCwgbG9jYWxQb2ludC54LCBsb2NhbFBvaW50LnkpOwogICAgICAgIH0KICAgIH0KfSk7CgoKLy8gICAgICBKb2ludEpTIGxpYnJhcnkuCi8vICAgICAgKGMpIDIwMTEtMjAxMyBjbGllbnQgSU8KCgppZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7CgogICAgdmFyIGpvaW50ID0gewogICAgICAgIHV0aWw6IHJlcXVpcmUoJy4uL3NyYy9jb3JlJykudXRpbCwKICAgICAgICBzaGFwZXM6IHt9LAogICAgICAgIGRpYTogewogICAgICAgICAgICBFbGVtZW50OiByZXF1aXJlKCcuLi9zcmMvam9pbnQuZGlhLmVsZW1lbnQnKS5FbGVtZW50LAogICAgICAgICAgICBFbGVtZW50VmlldzogcmVxdWlyZSgnLi4vc3JjL2pvaW50LmRpYS5lbGVtZW50JykuRWxlbWVudFZpZXcKICAgICAgICB9CiAgICB9OwogICAgdmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTsKfQoKCmpvaW50LnNoYXBlcy5iYXNpYyA9IHt9OwoKCmpvaW50LnNoYXBlcy5iYXNpYy5HZW5lcmljID0gam9pbnQuZGlhLkVsZW1lbnQuZXh0ZW5kKHsKCiAgICBkZWZhdWx0czogam9pbnQudXRpbC5kZWVwU3VwcGxlbWVudCh7CiAgICAgICAgCiAgICAgICAgdHlwZTogJ2Jhc2ljLkdlbmVyaWMnLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICcuJzogeyBmaWxsOiAnI0ZGRkZGRicsIHN0cm9rZTogJ25vbmUnIH0KICAgICAgICB9CiAgICAgICAgCiAgICB9LCBqb2ludC5kaWEuRWxlbWVudC5wcm90b3R5cGUuZGVmYXVsdHMpCn0pOwoKam9pbnQuc2hhcGVzLmJhc2ljLlJlY3QgPSBqb2ludC5zaGFwZXMuYmFzaWMuR2VuZXJpYy5leHRlbmQoewoKICAgIG1hcmt1cDogJzxnIGNsYXNzPSJyb3RhdGFibGUiPjxnIGNsYXNzPSJzY2FsYWJsZSI+PHJlY3QvPjwvZz48dGV4dC8+PC9nPicsCiAgICAKICAgIGRlZmF1bHRzOiBqb2ludC51dGlsLmRlZXBTdXBwbGVtZW50KHsKICAgIAogICAgICAgIHR5cGU6ICdiYXNpYy5SZWN0JywKICAgICAgICBhdHRyczogewogICAgICAgICAgICAncmVjdCc6IHsgZmlsbDogJyNGRkZGRkYnLCBzdHJva2U6ICdibGFjaycsIHdpZHRoOiAxMDAsIGhlaWdodDogNjAgfSwKICAgICAgICAgICAgJ3RleHQnOiB7ICdmb250LXNpemUnOiAxNCwgdGV4dDogJycsICdyZWYteCc6IC41LCAncmVmLXknOiAuNSwgcmVmOiAncmVjdCcsICd5LWFsaWdubWVudCc6ICdtaWRkbGUnLCAneC1hbGlnbm1lbnQnOiAnbWlkZGxlJywgZmlsbDogJ2JsYWNrJywgJ2ZvbnQtZmFtaWx5JzogJ0FyaWFsLCBoZWx2ZXRpY2EsIHNhbnMtc2VyaWYnIH0KICAgICAgICB9CiAgICAgICAgCiAgICB9LCBqb2ludC5zaGFwZXMuYmFzaWMuR2VuZXJpYy5wcm90b3R5cGUuZGVmYXVsdHMpCn0pOwoKam9pbnQuc2hhcGVzLmJhc2ljLlRleHQgPSBqb2ludC5zaGFwZXMuYmFzaWMuR2VuZXJpYy5leHRlbmQoewoKICAgIG1hcmt1cDogJzxnIGNsYXNzPSJyb3RhdGFibGUiPjxnIGNsYXNzPSJzY2FsYWJsZSI+PHRleHQvPjwvZz48L2c+JywKICAgIAogICAgZGVmYXVsdHM6IGpvaW50LnV0aWwuZGVlcFN1cHBsZW1lbnQoewogICAgICAgIAogICAgICAgIHR5cGU6ICdiYXNpYy5UZXh0JywKICAgICAgICBhdHRyczogewogICAgICAgICAgICAndGV4dCc6IHsgJ2ZvbnQtc2l6ZSc6IDE4LCBmaWxsOiAnYmxhY2snIH0KICAgICAgICB9CiAgICAgICAgCiAgICB9LCBqb2ludC5zaGFwZXMuYmFzaWMuR2VuZXJpYy5wcm90b3R5cGUuZGVmYXVsdHMpCn0pOwoKam9pbnQuc2hhcGVzLmJhc2ljLkNpcmNsZSA9IGpvaW50LnNoYXBlcy5iYXNpYy5HZW5lcmljLmV4dGVuZCh7CgogICAgbWFya3VwOiAnPGcgY2xhc3M9InJvdGF0YWJsZSI+PGcgY2xhc3M9InNjYWxhYmxlIj48Y2lyY2xlLz48L2c+PHRleHQvPjwvZz4nLAogICAgCiAgICBkZWZhdWx0czogam9pbnQudXRpbC5kZWVwU3VwcGxlbWVudCh7CgogICAgICAgIHR5cGU6ICdiYXNpYy5DaXJjbGUnLAogICAgICAgIHNpemU6IHsgd2lkdGg6IDYwLCBoZWlnaHQ6IDYwIH0sCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgJ2NpcmNsZSc6IHsgZmlsbDogJyNGRkZGRkYnLCBzdHJva2U6ICdibGFjaycsIHI6IDMwLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMzAsIDMwKScgfSwKICAgICAgICAgICAgJ3RleHQnOiB7ICdmb250LXNpemUnOiAxNCwgdGV4dDogJycsICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnLCAncmVmLXgnOiAuNSwgJ3JlZi15JzogLjUsIHJlZjogJ2NpcmNsZScsICd5LWFsaWdubWVudCc6ICdtaWRkbGUnLCBmaWxsOiAnYmxhY2snLCAnZm9udC1mYW1pbHknOiAnQXJpYWwsIGhlbHZldGljYSwgc2Fucy1zZXJpZicgfQogICAgICAgIH0KICAgIH0sIGpvaW50LnNoYXBlcy5iYXNpYy5HZW5lcmljLnByb3RvdHlwZS5kZWZhdWx0cykKfSk7Cgpqb2ludC5zaGFwZXMuYmFzaWMuSW1hZ2UgPSBqb2ludC5zaGFwZXMuYmFzaWMuR2VuZXJpYy5leHRlbmQoewoKICAgIG1hcmt1cDogJzxnIGNsYXNzPSJyb3RhdGFibGUiPjxnIGNsYXNzPSJzY2FsYWJsZSI+PGltYWdlLz48L2c+PHRleHQvPjwvZz4nLAogICAgCiAgICBkZWZhdWx0czogam9pbnQudXRpbC5kZWVwU3VwcGxlbWVudCh7CgogICAgICAgIHR5cGU6ICdiYXNpYy5JbWFnZScsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgJ3RleHQnOiB7ICdmb250LXNpemUnOiAxNCwgdGV4dDogJycsICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnLCAncmVmLXgnOiAuNSwgJ3JlZi1keSc6IDIwLCByZWY6ICdpbWFnZScsICd5LWFsaWdubWVudCc6ICdtaWRkbGUnLCBmaWxsOiAnYmxhY2snLCAnZm9udC1mYW1pbHknOiAnQXJpYWwsIGhlbHZldGljYSwgc2Fucy1zZXJpZicgfQogICAgICAgIH0KICAgIH0sIGpvaW50LnNoYXBlcy5iYXNpYy5HZW5lcmljLnByb3RvdHlwZS5kZWZhdWx0cykKfSk7Cgpqb2ludC5zaGFwZXMuYmFzaWMuUGF0aCA9IGpvaW50LnNoYXBlcy5iYXNpYy5HZW5lcmljLmV4dGVuZCh7CgogICAgbWFya3VwOiAnPGcgY2xhc3M9InJvdGF0YWJsZSI+PGcgY2xhc3M9InNjYWxhYmxlIj48cGF0aC8+PC9nPjx0ZXh0Lz48L2c+JywKICAgIAogICAgZGVmYXVsdHM6IGpvaW50LnV0aWwuZGVlcFN1cHBsZW1lbnQoewoKICAgICAgICB0eXBlOiAnYmFzaWMuUGF0aCcsCiAgICAgICAgc2l6ZTogeyB3aWR0aDogNjAsIGhlaWdodDogNjAgfSwKICAgICAgICBhdHRyczogewogICAgICAgICAgICAncGF0aCc6IHsgZmlsbDogJyNGRkZGRkYnLCBzdHJva2U6ICdibGFjaycgfSwKICAgICAgICAgICAgJ3RleHQnOiB7ICdmb250LXNpemUnOiAxNCwgdGV4dDogJycsICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnLCAncmVmLXgnOiAuNSwgJ3JlZi1keSc6IDIwLCByZWY6ICdwYXRoJywgJ3ktYWxpZ25tZW50JzogJ21pZGRsZScsIGZpbGw6ICdibGFjaycsICdmb250LWZhbWlseSc6ICdBcmlhbCwgaGVsdmV0aWNhLCBzYW5zLXNlcmlmJyB9CiAgICAgICAgfQogICAgfSwgam9pbnQuc2hhcGVzLmJhc2ljLkdlbmVyaWMucHJvdG90eXBlLmRlZmF1bHRzKQp9KTsKCmpvaW50LnNoYXBlcy5iYXNpYy5SaG9tYnVzID0gam9pbnQuc2hhcGVzLmJhc2ljLlBhdGguZXh0ZW5kKHsKCiAgICBkZWZhdWx0czogam9pbnQudXRpbC5kZWVwU3VwcGxlbWVudCh7CiAgICAKICAgICAgICB0eXBlOiAnYmFzaWMuUmhvbWJ1cycsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgJ3BhdGgnOiB7IGQ6ICdNIDMwIDAgTCA2MCAzMCAzMCA2MCAwIDMwIHonIH0sCiAgICAgICAgICAgICd0ZXh0JzogeyAncmVmLXknOiAuNSB9CiAgICAgICAgfQogICAgICAgIAogICAgfSwgam9pbnQuc2hhcGVzLmJhc2ljLlBhdGgucHJvdG90eXBlLmRlZmF1bHRzKQp9KTsKCgovLyBQb3J0c01vZGVsSW50ZXJmYWNlIGlzIGEgY29tbW9uIGludGVyZmFjZSBmb3Igc2hhcGVzIHRoYXQgaGF2ZSBwb3J0cy4gVGhpcyBpbnRlcmZhY2UgbWFrZXMgaXQgZWFzeQovLyB0byBjcmVhdGUgbmV3IHNoYXBlcyB3aXRoIHBvcnRzIGZ1bmN0aW9uYWxpdHkuIEl0IGlzIGFzc3VtZWQgdGhhdCB0aGUgbmV3IHNoYXBlcyBoYXZlCi8vIGBpblBvcnRzYCBhbmQgYG91dFBvcnRzYCBhcnJheSBwcm9wZXJ0aWVzLiBPbmx5IHRoZXNlIHByb3BlcnRpZXMgc2hvdWxkIGJlIHVzZWQgdG8gc2V0IHBvcnRzLgovLyBJbiBvdGhlciB3b3JkcywgdXNpbmcgdGhpcyBpbnRlcmZhY2UsIGl0IGlzIG5vIGxvbmdlciByZWNvbW1lbmRlZCB0byBzZXQgcG9ydHMgZGlyZWN0bHkgdGhyb3VnaCB0aGUKLy8gYGF0dHJzYCBvYmplY3QuCgovLyBVc2FnZToKLy8gam9pbnQuc2hhcGVzLmN1c3RvbS5NeUVsZW1lbnRXaXRoUG9ydHMgPSBqb2ludC5zaGFwZXMuYmFzaWMuUGF0aC5leHRlbmQoXy5leHRlbmQoe30sIGpvaW50LnNoYXBlcy5iYXNpYy5Qb3J0c01vZGVsSW50ZXJmYWNlLCB7Ci8vICAgICBnZXRQb3J0QXR0cnM6IGZ1bmN0aW9uKHBvcnROYW1lLCBpbmRleCwgdG90YWwsIHNlbGVjdG9yLCB0eXBlKSB7Ci8vICAgICAgICAgdmFyIGF0dHJzID0ge307Ci8vICAgICAgICAgdmFyIHBvcnRDbGFzcyA9ICdwb3J0JyArIGluZGV4OwovLyAgICAgICAgIHZhciBwb3J0U2VsZWN0b3IgPSBzZWxlY3RvciArICc+LicgKyBwb3J0Q2xhc3M7Ci8vICAgICAgICAgdmFyIHBvcnRUZXh0U2VsZWN0b3IgPSBwb3J0U2VsZWN0b3IgKyAnPnRleHQnOwovLyAgICAgICAgIHZhciBwb3J0Q2lyY2xlU2VsZWN0b3IgPSBwb3J0U2VsZWN0b3IgKyAnPmNpcmNsZSc7Ci8vCi8vICAgICAgICAgYXR0cnNbcG9ydFRleHRTZWxlY3Rvcl0gPSB7IHRleHQ6IHBvcnROYW1lIH07Ci8vICAgICAgICAgYXR0cnNbcG9ydENpcmNsZVNlbGVjdG9yXSA9IHsgcG9ydDogeyBpZDogcG9ydE5hbWUgfHwgXy51bmlxdWVJZCh0eXBlKSAsIHR5cGU6IHR5cGUgfSB9OwovLyAgICAgICAgIGF0dHJzW3BvcnRTZWxlY3Rvcl0gPSB7IHJlZjogJ3JlY3QnLCAncmVmLXknOiAoaW5kZXggKyAwLjUpICogKDEgLyB0b3RhbCkgfTsKLy8KLy8gICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICcub3V0UG9ydHMnKSB7IGF0dHJzW3BvcnRTZWxlY3Rvcl1bJ3JlZi1keCddID0gMDsgfQovLwovLyAgICAgICAgIHJldHVybiBhdHRyczsKLy8gICAgIH0KLy99KSk7CmpvaW50LnNoYXBlcy5iYXNpYy5Qb3J0c01vZGVsSW50ZXJmYWNlID0gewoKICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkgewoKICAgICAgICB0aGlzLnVwZGF0ZVBvcnRzQXR0cnMoKTsKICAgICAgICB0aGlzLm9uKCdjaGFuZ2U6aW5Qb3J0cyBjaGFuZ2U6b3V0UG9ydHMnLCB0aGlzLnVwZGF0ZVBvcnRzQXR0cnMsIHRoaXMpOwoKICAgICAgICAvLyBDYWxsIHRoZSBgaW5pdGlhbGl6ZSgpYCBvZiB0aGUgcGFyZW50LgogICAgICAgIHRoaXMuY29uc3RydWN0b3IuX19zdXBlcl9fLmNvbnN0cnVjdG9yLl9fc3VwZXJfXy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9LAogICAgCiAgICB1cGRhdGVQb3J0c0F0dHJzOiBmdW5jdGlvbihldmVudE5hbWUpIHsKCiAgICAgICAgLy8gRGVsZXRlIHByZXZpb3VzbHkgc2V0IGF0dHJpYnV0ZXMgZm9yIHBvcnRzLgogICAgICAgIHZhciBjdXJyQXR0cnMgPSB0aGlzLmdldCgnYXR0cnMnKTsKICAgICAgICBfLmVhY2godGhpcy5fcG9ydFNlbGVjdG9ycywgZnVuY3Rpb24oc2VsZWN0b3IpIHsKICAgICAgICAgICAgaWYgKGN1cnJBdHRyc1tzZWxlY3Rvcl0pIGRlbGV0ZSBjdXJyQXR0cnNbc2VsZWN0b3JdOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIC8vIFRoaXMgaG9sZHMga2V5cyB0byB0aGUgYGF0dHJzYCBvYmplY3QgZm9yIGFsbCB0aGUgcG9ydCBzcGVjaWZpYyBhdHRyaWJ1dGUgdGhhdAogICAgICAgIC8vIHdlIHNldCBpbiB0aGlzIG1ldGhvZC4gVGhpcyBpcyBuZWNlc3NhcnkgaW4gb3JkZXIgdG8gcmVtb3ZlIHByZXZpb3VzbHkgc2V0CiAgICAgICAgLy8gYXR0cmlidXRlcyBmb3IgcHJldmlvdXMgcG9ydHMuCiAgICAgICAgdGhpcy5fcG9ydFNlbGVjdG9ycyA9IFtdOwogICAgICAgIAogICAgICAgIHZhciBhdHRycyA9IHt9OwogICAgICAgIAogICAgICAgIF8uZWFjaCh0aGlzLmdldCgnaW5Qb3J0cycpLCBmdW5jdGlvbihwb3J0TmFtZSwgaW5kZXgsIHBvcnRzKSB7CiAgICAgICAgICAgIHZhciBwb3J0QXR0cmlidXRlcyA9IHRoaXMuZ2V0UG9ydEF0dHJzKHBvcnROYW1lLCBpbmRleCwgcG9ydHMubGVuZ3RoLCAnLmluUG9ydHMnLCAnaW4nKTsKICAgICAgICAgICAgdGhpcy5fcG9ydFNlbGVjdG9ycyA9IHRoaXMuX3BvcnRTZWxlY3RvcnMuY29uY2F0KF8ua2V5cyhwb3J0QXR0cmlidXRlcykpOwogICAgICAgICAgICBfLmV4dGVuZChhdHRycywgcG9ydEF0dHJpYnV0ZXMpOwogICAgICAgIH0sIHRoaXMpOwogICAgICAgIAogICAgICAgIF8uZWFjaCh0aGlzLmdldCgnb3V0UG9ydHMnKSwgZnVuY3Rpb24ocG9ydE5hbWUsIGluZGV4LCBwb3J0cykgewogICAgICAgICAgICB2YXIgcG9ydEF0dHJpYnV0ZXMgPSB0aGlzLmdldFBvcnRBdHRycyhwb3J0TmFtZSwgaW5kZXgsIHBvcnRzLmxlbmd0aCwgJy5vdXRQb3J0cycsICdvdXQnKTsKICAgICAgICAgICAgdGhpcy5fcG9ydFNlbGVjdG9ycyA9IHRoaXMuX3BvcnRTZWxlY3RvcnMuY29uY2F0KF8ua2V5cyhwb3J0QXR0cmlidXRlcykpOwogICAgICAgICAgICBfLmV4dGVuZChhdHRycywgcG9ydEF0dHJpYnV0ZXMpOwogICAgICAgIH0sIHRoaXMpOwoKICAgICAgICAvLyBTaWxlbnRseSBzZXQgYGF0dHJzYCBvbiB0aGUgY2VsbCBzbyB0aGF0IG5vb25lIGtub3dzIHRoZSBhdHRycyBoYXZlIGNoYW5nZWQuIFRoaXMgbWFrZXMgc3VyZQogICAgICAgIC8vIHRoYXQsIGZvciBleGFtcGxlLCBjb21tYW5kIG1hbmFnZXIgZG9lcyBub3QgcmVnaXN0ZXIgYGNoYW5nZTphdHRyc2AgY29tbWFuZCBidXQgb25seQogICAgICAgIC8vIHRoZSBpbXBvcnRhbnQgYGNoYW5nZTppblBvcnRzYC9gY2hhbmdlOm91dFBvcnRzYCBjb21tYW5kLgogICAgICAgIHRoaXMuYXR0cihhdHRycywgeyBzaWxlbnQ6IHRydWUgfSk7CiAgICAgICAgLy8gTWFudWFsbHkgY2FsbCB0aGUgYHByb2Nlc3NQb3J0cygpYCBtZXRob2QgdGhhdCBpcyBub3JtYWxseSBjYWxsZWQgb24gYGNoYW5nZTphdHRyc2AgKHRoYXQgd2UganVzdCBtYWRlIHNpbGVudCkuCiAgICAgICAgdGhpcy5wcm9jZXNzUG9ydHMoKTsKICAgICAgICAvLyBMZXQgdGhlIG91dHNpZGUgd29ybGQgKG1haW5seSB0aGUgYE1vZGVsVmlld2ApIGtub3cgdGhhdCB3ZSdyZSBkb25lIGNvbmZpZ3VyaW5nIHRoZSBgYXR0cnNgIG9iamVjdC4KICAgICAgICB0aGlzLnRyaWdnZXIoJ3Byb2Nlc3M6cG9ydHMnKTsKICAgIH0sCgogICAgZ2V0UG9ydFNlbGVjdG9yOiBmdW5jdGlvbihuYW1lKSB7CgogICAgICAgIHZhciBzZWxlY3RvciA9ICcuaW5Qb3J0cyc7CiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5nZXQoJ2luUG9ydHMnKS5pbmRleE9mKG5hbWUpOwoKICAgICAgICBpZiAoaW5kZXggPCAwKSB7CiAgICAgICAgICAgIHNlbGVjdG9yID0gJy5vdXRQb3J0cyc7CiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5nZXQoJ291dFBvcnRzJykuaW5kZXhPZihuYW1lKTsKCiAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHRocm93IG5ldyBFcnJvcigiZ2V0UG9ydFNlbGVjdG9yKCk6IFBvcnQgZG9lc24ndCBleGlzdC4iKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzZWxlY3RvciArICc+ZzpudGgtY2hpbGQoJyArIChpbmRleCArIDEpICsgJyk+Y2lyY2xlJzsKICAgIH0KfTsKCmpvaW50LnNoYXBlcy5iYXNpYy5Qb3J0c1ZpZXdJbnRlcmZhY2UgPSB7CiAgICAKICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkgewoKICAgICAgICAvLyBgTW9kZWxgIGVtaXRzIHRoZSBgcHJvY2Vzczpwb3J0c2Agd2hlbmV2ZXIgaXQncyBkb25lIGNvbmZpZ3VyaW5nIHRoZSBgYXR0cnNgIG9iamVjdCBmb3IgcG9ydHMuCiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCAncHJvY2Vzczpwb3J0cycsIHRoaXMudXBkYXRlKTsKICAgICAgICAKICAgICAgICBqb2ludC5kaWEuRWxlbWVudFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0sCgogICAgdXBkYXRlOiBmdW5jdGlvbigpIHsKCiAgICAgICAgLy8gRmlyc3QgcmVuZGVyIHBvcnRzIHNvIHRoYXQgYGF0dHJzYCBjYW4gYmUgYXBwbGllZCB0byB0aG9zZSBuZXdseSBjcmVhdGVkIERPTSBlbGVtZW50cwogICAgICAgIC8vIGluIGBFbGVtZW50Vmlldy5wcm90b3R5cGUudXBkYXRlKClgLgogICAgICAgIHRoaXMucmVuZGVyUG9ydHMoKTsKICAgICAgICBqb2ludC5kaWEuRWxlbWVudFZpZXcucHJvdG90eXBlLnVwZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfSwKCiAgICByZW5kZXJQb3J0czogZnVuY3Rpb24oKSB7CgogICAgICAgIHZhciAkaW5Qb3J0cyA9IHRoaXMuJCgnLmluUG9ydHMnKS5lbXB0eSgpOwogICAgICAgIHZhciAkb3V0UG9ydHMgPSB0aGlzLiQoJy5vdXRQb3J0cycpLmVtcHR5KCk7CgogICAgICAgIHZhciBwb3J0VGVtcGxhdGUgPSBfLnRlbXBsYXRlKHRoaXMubW9kZWwucG9ydE1hcmt1cCk7CgogICAgICAgIF8uZWFjaChfLmZpbHRlcih0aGlzLm1vZGVsLnBvcnRzLCBmdW5jdGlvbihwKSB7IHJldHVybiBwLnR5cGUgPT09ICdpbicgfSksIGZ1bmN0aW9uKHBvcnQsIGluZGV4KSB7CgogICAgICAgICAgICAkaW5Qb3J0cy5hcHBlbmQoVihwb3J0VGVtcGxhdGUoeyBpZDogaW5kZXgsIHBvcnQ6IHBvcnQgfSkpLm5vZGUpOwogICAgICAgIH0pOwogICAgICAgIF8uZWFjaChfLmZpbHRlcih0aGlzLm1vZGVsLnBvcnRzLCBmdW5jdGlvbihwKSB7IHJldHVybiBwLnR5cGUgPT09ICdvdXQnIH0pLCBmdW5jdGlvbihwb3J0LCBpbmRleCkgewoKICAgICAgICAgICAgJG91dFBvcnRzLmFwcGVuZChWKHBvcnRUZW1wbGF0ZSh7IGlkOiBpbmRleCwgcG9ydDogcG9ydCB9KSkubm9kZSk7CiAgICAgICAgfSk7CiAgICB9Cn07Cgpqb2ludC5zaGFwZXMuYmFzaWMuVGV4dEJsb2NrID0gam9pbnQuc2hhcGVzLmJhc2ljLkdlbmVyaWMuZXh0ZW5kKHsKCiAgICBtYXJrdXA6IFsnPGcgY2xhc3M9InJvdGF0YWJsZSI+PGcgY2xhc3M9InNjYWxhYmxlIj48cmVjdC8+PC9nPjxzd2l0Y2g+JywKCiAgICAgICAgICAgICAvLyBpZiBmb3JlaWduT2JqZWN0IHN1cHBvcnRlZAoKICAgICAgICAgICAgICc8Zm9yZWlnbk9iamVjdCByZXF1aXJlZEZlYXR1cmVzPSJodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9mZWF0dXJlI0V4dGVuc2liaWxpdHkiIGNsYXNzPSJmb2JqIj4nLAogICAgICAgICAgICAgJzxib2R5IHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj48ZGl2Lz48L2JvZHk+JywKICAgICAgICAgICAgICc8L2ZvcmVpZ25PYmplY3Q+JywKCiAgICAgICAgICAgICAvLyBlbHNlIGZvcmVpZ25PYmplY3QgaXMgbm90IHN1cHBvcnRlZCAoZmFsbGJhY2sgZm9yIElFKQogICAgICAgICAgICAgJzx0ZXh0IGNsYXNzPSJjb250ZW50Ii8+JywKCiAgICAgICAgICAgICAnPC9zd2l0Y2g+PC9nPiddLmpvaW4oJycpLAoKICAgIGRlZmF1bHRzOiBqb2ludC51dGlsLmRlZXBTdXBwbGVtZW50KHsKCiAgICAgICAgdHlwZTogJ2Jhc2ljLlRleHRCbG9jaycsCgogICAgICAgIC8vIHNlZSBqb2ludC5jc3MgZm9yIG1vcmUgZWxlbWVudCBzdHlsZXMKICAgICAgICBhdHRyczogewogICAgICAgICAgICByZWN0OiB7CiAgICAgICAgICAgICAgICBmaWxsOiAnI2ZmZmZmZicsCiAgICAgICAgICAgICAgICBzdHJva2U6ICcjMDAwMDAwJywKICAgICAgICAgICAgICAgIHdpZHRoOiA4MCwKICAgICAgICAgICAgICAgIGhlaWdodDogMTAwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRleHQ6IHsKICAgICAgICAgICAgICAgIGZpbGw6ICcjMDAwMDAwJywKICAgICAgICAgICAgICAgICdmb250LXNpemUnOiAxNCwKICAgICAgICAgICAgICAgICdmb250LWZhbWlseSc6ICdBcmlhbCwgaGVsdmV0aWNhLCBzYW5zLXNlcmlmJwogICAgICAgICAgICB9LAogICAgICAgICAgICAnLmNvbnRlbnQnOiB7CiAgICAgICAgICAgICAgICB0ZXh0OiAnJywKICAgICAgICAgICAgICAgIHJlZjogJ3JlY3QnLAogICAgICAgICAgICAgICAgJ3JlZi14JzogLjUsCiAgICAgICAgICAgICAgICAncmVmLXknOiAuNSwKICAgICAgICAgICAgICAgICd5LWFsaWdubWVudCc6ICdtaWRkbGUnLAogICAgICAgICAgICAgICAgJ3gtYWxpZ25tZW50JzogJ21pZGRsZScKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGNvbnRlbnQ6ICcnCgogICAgfSwgam9pbnQuc2hhcGVzLmJhc2ljLkdlbmVyaWMucHJvdG90eXBlLmRlZmF1bHRzKSwKCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHsKCiAgICAgICAgaWYgKHR5cGVvZiBTVkdGb3JlaWduT2JqZWN0RWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHsKCiAgICAgICAgICAgIC8vIGZvcmVpZ25PYmplY3Qgc3VwcG9ydGVkCiAgICAgICAgICAgIHRoaXMuc2V0Rm9yZWlnbk9iamVjdFNpemUodGhpcywgdGhpcy5nZXQoJ3NpemUnKSk7CiAgICAgICAgICAgIHRoaXMuc2V0RGl2Q29udGVudCh0aGlzLCB0aGlzLmdldCgnY29udGVudCcpKTsKICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLCAnY2hhbmdlOnNpemUnLCB0aGlzLnNldEZvcmVpZ25PYmplY3RTaXplKTsKICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLCAnY2hhbmdlOmNvbnRlbnQnLCB0aGlzLnNldERpdkNvbnRlbnQpOwoKICAgICAgICB9CgogICAgICAgIGpvaW50LnNoYXBlcy5iYXNpYy5HZW5lcmljLnByb3RvdHlwZS5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9LAoKICAgIHNldEZvcmVpZ25PYmplY3RTaXplOiBmdW5jdGlvbihjZWxsLCBzaXplKSB7CgogICAgICAgIC8vIFNlbGVjdG9yIGBmb3JlaWduT2JqZWN0JyBkb2Vzbid0IHdvcmsgYWNjcm9zcyBhbGwgYnJvd3NlcnMsIHdlJ3IgdXNpbmcgY2xhc3Mgc2VsZWN0b3IgaW5zdGVhZC4KICAgICAgICAvLyBXZSBoYXZlIHRvIGNsb25lIHNpemUgYXMgd2UgZG9uJ3Qgd2FudCBhdHRyaWJ1dGVzLmRpdi5zdHlsZSB0byBiZSBzYW1lIG9iamVjdCBhcyBhdHRyaWJ1dGVzLnNpemUuCiAgICAgICAgY2VsbC5hdHRyKHsKICAgICAgICAgICAgJy5mb2JqJzogXy5jbG9uZShzaXplKSwKICAgICAgICAgICAgZGl2OiB7IHN0eWxlOiBfLmNsb25lKHNpemUpIH0KICAgICAgICB9KTsKICAgIH0sCgogICAgc2V0RGl2Q29udGVudDogZnVuY3Rpb24oY2VsbCwgY29udGVudCkgewoKICAgICAgICAvLyBBcHBlbmQgdGhlIGNvbnRlbnQgdG8gZGl2IGFzIGh0bWwuCiAgICAgICAgY2VsbC5hdHRyKHsgZGl2IDogewogICAgICAgICAgICBodG1sOiBjb250ZW50CiAgICAgICAgfX0pOwogICAgfQoKfSk7CgovLyBUZXh0QmxvY2tWaWV3IGltcGxlbWVudHMgdGhlIGZhbGxiYWNrIGZvciBJRSB3aGVuIG5vIGZvcmVpZ25PYmplY3QgZXhpc3RzIGFuZAovLyB0aGUgdGV4dCBuZWVkcyB0byBiZSBtYW51YWxseSBicm9rZW4uCmpvaW50LnNoYXBlcy5iYXNpYy5UZXh0QmxvY2tWaWV3ID0gam9pbnQuZGlhLkVsZW1lbnRWaWV3LmV4dGVuZCh7CgogICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7CgogICAgICAgIGpvaW50LmRpYS5FbGVtZW50Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoKICAgICAgICBpZiAodHlwZW9mIFNWR0ZvcmVpZ25PYmplY3RFbGVtZW50ID09PSAndW5kZWZpbmVkJykgewoKICAgICAgICAgICAgdGhpcy5ub1NWR0ZvcmVpZ25PYmplY3RFbGVtZW50ID0gdHJ1ZTsKCiAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgJ2NoYW5nZTpjb250ZW50JywgZnVuY3Rpb24oY2VsbCkgewogICAgICAgICAgICAgICAgLy8gYXZvaWRpbmcgcGFzcyBvZiBleHRyYSBwYXJhbXRlcnMKICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQ29udGVudChjZWxsKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfSwKCiAgICB1cGRhdGU6IGZ1bmN0aW9uKGNlbGwsIHJlbmRlcmluZ09ubHlBdHRycykgewoKICAgICAgICBpZiAodGhpcy5ub1NWR0ZvcmVpZ25PYmplY3RFbGVtZW50KSB7CgogICAgICAgICAgICB2YXIgbW9kZWwgPSB0aGlzLm1vZGVsOwoKICAgICAgICAgICAgLy8gVXBkYXRlIGV2ZXJ5dGhpbmcgYnV0IHRoZSBjb250ZW50IGZpcnN0LgogICAgICAgICAgICB2YXIgbm9UZXh0QXR0cnMgPSBfLm9taXQocmVuZGVyaW5nT25seUF0dHJzIHx8IG1vZGVsLmdldCgnYXR0cnMnKSwgJy5jb250ZW50Jyk7CiAgICAgICAgICAgIGpvaW50LmRpYS5FbGVtZW50Vmlldy5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgbW9kZWwsIG5vVGV4dEF0dHJzKTsKCiAgICAgICAgICAgIGlmICghcmVuZGVyaW5nT25seUF0dHJzIHx8IF8uaGFzKHJlbmRlcmluZ09ubHlBdHRycywgJy5jb250ZW50JykpIHsKICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgY29udGVudCBpdHNlbGYuCiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnQobW9kZWwsIHJlbmRlcmluZ09ubHlBdHRycyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIGpvaW50LmRpYS5FbGVtZW50Vmlldy5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgbW9kZWwsIHJlbmRlcmluZ09ubHlBdHRycyk7CiAgICAgICAgfQogICAgfSwKCiAgICB1cGRhdGVDb250ZW50OiBmdW5jdGlvbihjZWxsLCByZW5kZXJpbmdPbmx5QXR0cnMpIHsKCiAgICAgICAgLy8gQ3JlYXRlIGNvcHkgb2YgdGhlIHRleHQgYXR0cmlidXRlcwogICAgICAgIHZhciB0ZXh0QXR0cnMgPSBfLm1lcmdlKHt9LCAocmVuZGVyaW5nT25seUF0dHJzIHx8IGNlbGwuZ2V0KCdhdHRycycpKVsnLmNvbnRlbnQnXSk7CgogICAgICAgIGRlbGV0ZSB0ZXh0QXR0cnMudGV4dDsKCiAgICAgICAgLy8gQnJlYWsgdGhlIGNvbnRlbnQgdG8gZml0IHRoZSBlbGVtZW50IHNpemUgdGFraW5nIGludG8gYWNjb3VudCB0aGUgYXR0cmlidXRlcwogICAgICAgIC8vIHNldCBvbiB0aGUgbW9kZWwuCiAgICAgICAgdmFyIHRleHQgPSBqb2ludC51dGlsLmJyZWFrVGV4dChjZWxsLmdldCgnY29udGVudCcpLCBjZWxsLmdldCgnc2l6ZScpLCB0ZXh0QXR0cnMsIHsKICAgICAgICAgICAgLy8gbWVhc3VyaW5nIHNhbmRib3ggc3ZnIGRvY3VtZW50CiAgICAgICAgICAgIHN2Z0RvY3VtZW50OiB0aGlzLnBhcGVyLnN2ZwogICAgICAgIH0pOwoKICAgICAgICAvLyBDcmVhdGUgYSBuZXcgYXR0cnMgd2l0aCBzYW1lIHN0cnVjdHVyZSBhcyB0aGUgbW9kZWwgYXR0cnMgeyB0ZXh0OiB7ICp0ZXh0QXR0cmlidXRlcyogfX0KICAgICAgICB2YXIgYXR0cnMgPSBqb2ludC51dGlsLnNldEJ5UGF0aCh7fSwgJy5jb250ZW50JywgdGV4dEF0dHJzLCcvJyk7CgogICAgICAgIC8vIFJlcGxhY2UgdGV4dCBhdHRyaWJ1dGUgd2l0aCB0aGUgb25lIHdlIGp1c3QgcHJvY2Vzc2VkLgogICAgICAgIGF0dHJzWycuY29udGVudCddLnRleHQgPSB0ZXh0OwoKICAgICAgICAvLyBVcGRhdGUgdGhlIHZpZXcgdXNpbmcgcmVuZGVyaW5nT25seUF0dHJpYnV0ZXMgcGFyYW1ldGVyLgogICAgICAgIGpvaW50LmRpYS5FbGVtZW50Vmlldy5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgY2VsbCwgYXR0cnMpOwogICAgfQp9KTsKCmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHsKCiAgICBtb2R1bGUuZXhwb3J0cyA9IGpvaW50LnNoYXBlcy5iYXNpYzsKfQoKam9pbnQucm91dGVycy5vcnRob2dvbmFsID0gZnVuY3Rpb24oKSB7CgogICAgdmFyIHNvdXJjZUJCb3gsIHRhcmdldEJCb3g7CgogICAgLy8gUmV0dXJuIHRoZSBkaXJlY3Rpb24gdGhhdCBvbmUgd291bGQgaGF2ZSB0byB0YWtlIHRyYXZlbGluZyBmcm9tIGBwMWAgdG8gYHAyYC4KICAgIC8vIFRoaXMgZnVuY3Rpb24gYXNzdW1lcyB0aGUgbGluZSBiZXR3ZWVuIGBwMWAgYW5kIGBwMmAgaXMgb3J0aG9nb25hbC4KICAgIGZ1bmN0aW9uIGRpcmVjdGlvbihwMSwgcDIpIHsKICAgICAgICAKICAgICAgICBpZiAocDEueSA8IHAyLnkgJiYgcDEueCA9PT0gcDIueCkgewogICAgICAgICAgICByZXR1cm4gJ2Rvd24nOwogICAgICAgIH0gZWxzZSBpZiAocDEueSA+IHAyLnkgJiYgcDEueCA9PT0gcDIueCkgewogICAgICAgICAgICByZXR1cm4gJ3VwJzsKICAgICAgICB9IGVsc2UgaWYgKHAxLnggPCBwMi54ICYmIHAxLnkgPT09IHAyLnkpIHsKICAgICAgICAgICAgcmV0dXJuICdyaWdodCc7CiAgICAgICAgfQogICAgICAgIHJldHVybiAnbGVmdCc7CiAgICB9CgogICAgZnVuY3Rpb24gYmVzdERpcmVjdGlvbihwMSwgcDIsIHByZWZlcnJlZERpcmVjdGlvbikgewoKICAgICAgICB2YXIgZGlyZWN0aW9uczsKCiAgICAgICAgLy8gVGhpcyBicmFuY2hpbmcgZGV0ZXJtaW5lcyBwb3NzaWJsZSBkaXJlY3Rpb25zIHRoYXQgb25lIGNhbiB0YWtlIHRvIHRyYXZlbAogICAgICAgIC8vIGZyb20gYHAxYCB0byBgcDJgLgogICAgICAgIGlmIChwMS54IDwgcDIueCkgewoKICAgICAgICAgICAgaWYgKHAxLnkgPiBwMi55KSB7IGRpcmVjdGlvbnMgPSBbJ3VwJywgJ3JpZ2h0J107IH0KICAgICAgICAgICAgZWxzZSBpZiAocDEueSA8IHAyLnkpIHsgZGlyZWN0aW9ucyA9IFsnZG93bicsICdyaWdodCddOyB9CiAgICAgICAgICAgIGVsc2UgeyBkaXJlY3Rpb25zID0gWydyaWdodCddOyB9CgogICAgICAgIH0gZWxzZSBpZiAocDEueCA+IHAyLngpIHsKCiAgICAgICAgICAgIGlmIChwMS55ID4gcDIueSkgeyBkaXJlY3Rpb25zID0gWyd1cCcsICdsZWZ0J107IH0KICAgICAgICAgICAgZWxzZSBpZiAocDEueSA8IHAyLnkpIHsgZGlyZWN0aW9ucyA9IFsnZG93bicsICdsZWZ0J107IH0KICAgICAgICAgICAgZWxzZSB7IGRpcmVjdGlvbnMgPSBbJ2xlZnQnXTsgfQoKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgaWYgKHAxLnkgPiBwMi55KSB7IGRpcmVjdGlvbnMgPSBbJ3VwJ107IH0KICAgICAgICAgICAgZWxzZSB7IGRpcmVjdGlvbnMgPSBbJ2Rvd24nXTsgfQogICAgICAgIH0KCiAgICAgICAgaWYgKF8uY29udGFpbnMoZGlyZWN0aW9ucywgcHJlZmVycmVkRGlyZWN0aW9uKSkgewogICAgICAgICAgICByZXR1cm4gcHJlZmVycmVkRGlyZWN0aW9uOwogICAgICAgIH0KCiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IF8uZmlyc3QoZGlyZWN0aW9ucyk7CgogICAgICAgIC8vIFNob3VsZCB0aGUgZGlyZWN0aW9uIGJlIHRoZSBleGFjdCBvcHBvc2l0ZSBvZiB0aGUgcHJlZmVycmVkIGRpcmVjdGlvbiwKICAgICAgICAvLyB0cnkgYW5vdGhlciBvbmUgaWYgc3VjaCBkaXJlY3Rpb24gZXhpc3RzLgogICAgICAgIHN3aXRjaCAocHJlZmVycmVkRGlyZWN0aW9uKSB7CiAgICAgICAgY2FzZSAnZG93bic6IGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHJldHVybiBfLmxhc3QoZGlyZWN0aW9ucyk7IGJyZWFrOwogICAgICAgIGNhc2UgJ3VwJzogaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSByZXR1cm4gXy5sYXN0KGRpcmVjdGlvbnMpOyBicmVhazsKICAgICAgICBjYXNlICdsZWZ0JzogaWYgKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgcmV0dXJuIF8ubGFzdChkaXJlY3Rpb25zKTsgYnJlYWs7CiAgICAgICAgY2FzZSAncmlnaHQnOiBpZiAoZGlyZWN0aW9uID09PSAnbGVmdCcpIHJldHVybiBfLmxhc3QoZGlyZWN0aW9ucyk7IGJyZWFrOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZGlyZWN0aW9uOwogICAgfTsKCiAgICAvLyBGaW5kIGEgdmVydGV4IGluIGJldHdlZW4gdGhlIHZlcnRpY2VzIGBwMWAgYW5kIGBwMmAgc28gdGhhdCB0aGUgcm91dGUgYmV0d2VlbiB0aG9zZSB2ZXJ0aWNlcwogICAgLy8gaXMgb3J0aG9nb25hbC4gUHJlZmVyIGdvaW5nIHRoZSBkaXJlY3Rpb24gZGV0ZXJtaW5lZCBieSBgcHJlZmVycmVkRGlyZWN0aW9uYC4KICAgIGZ1bmN0aW9uIGZpbmRNaWRkbGVWZXJ0ZXgocDEsIHAyLCBwcmVmZXJyZWREaXJlY3Rpb24pIHsKICAgICAgICAKICAgICAgICB2YXIgZGlyZWN0aW9uID0gYmVzdERpcmVjdGlvbihwMSwgcDIsIHByZWZlcnJlZERpcmVjdGlvbik7CiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nIHx8IGRpcmVjdGlvbiA9PT0gJ3VwJykgewogICAgICAgICAgICByZXR1cm4geyB4OiBwMS54LCB5OiBwMi55LCBkOiBkaXJlY3Rpb24gfTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHsgeDogcDIueCwgeTogcDEueSwgZDogZGlyZWN0aW9uIH07CiAgICB9CgogICAgLy8gUmV0dXJuIHBvaW50cyB0aGF0IG9uZSBuZWVkcyB0byBkcmF3IGEgY29ubmVjdGlvbiB0aHJvdWdoIGluIG9yZGVyIHRvIGhhdmUgYSBvcnRob2dvbmFsIGxpbmsKICAgIC8vIHJvdXRpbmcgZnJvbSBzb3VyY2UgdG8gdGFyZ2V0IGdvaW5nIHRocm91Z2ggYHZlcnRpY2VzYC4KICAgIGZ1bmN0aW9uIGZpbmRPcnRob2dvbmFsUm91dGUodmVydGljZXMpIHsKCiAgICAgICAgdmVydGljZXMgPSAodmVydGljZXMgfHwgW10pLnNsaWNlKCk7CiAgICAgICAgdmFyIG9ydGhvZ29uYWxWZXJ0aWNlcyA9IFtdOwoKICAgICAgICB2YXIgc291cmNlQ2VudGVyID0gc291cmNlQkJveC5jZW50ZXIoKTsKICAgICAgICB2YXIgdGFyZ2V0Q2VudGVyID0gdGFyZ2V0QkJveC5jZW50ZXIoKTsKCiAgICAgICAgaWYgKCF2ZXJ0aWNlcy5sZW5ndGgpIHsKCiAgICAgICAgICAgIGlmIChNYXRoLmFicyhzb3VyY2VDZW50ZXIueCAtIHRhcmdldENlbnRlci54KSA8IChzb3VyY2VCQm94LndpZHRoIC8gMikgfHwKICAgICAgICAgICAgICAgIE1hdGguYWJzKHNvdXJjZUNlbnRlci55IC0gdGFyZ2V0Q2VudGVyLnkpIDwgKHNvdXJjZUJCb3guaGVpZ2h0IC8gMikKICAgICAgICAgICAgKSB7CgogICAgICAgICAgICAgICAgdmVydGljZXMgPSBbewogICAgICAgICAgICAgICAgICAgIHg6IE1hdGgubWluKHNvdXJjZUNlbnRlci54LCB0YXJnZXRDZW50ZXIueCkgKwogICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyhzb3VyY2VDZW50ZXIueCAtIHRhcmdldENlbnRlci54KSAvIDIsCiAgICAgICAgICAgICAgICAgICAgeTogTWF0aC5taW4oc291cmNlQ2VudGVyLnksIHRhcmdldENlbnRlci55KSArCiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHNvdXJjZUNlbnRlci55IC0gdGFyZ2V0Q2VudGVyLnkpIC8gMgogICAgICAgICAgICAgICAgfV07CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZlcnRpY2VzLnVuc2hpZnQoc291cmNlQ2VudGVyKTsKICAgICAgICB2ZXJ0aWNlcy5wdXNoKHRhcmdldENlbnRlcik7CgogICAgICAgIHZhciBvcnRob2dvbmFsVmVydGV4OwogICAgICAgIHZhciBsYXN0T3J0aG9nb25hbFZlcnRleDsKICAgICAgICB2YXIgdmVydGV4OwogICAgICAgIHZhciBuZXh0VmVydGV4OwoKICAgICAgICAvLyBGb3IgYWxsIHRoZSBwYWlycyBvZiBsaW5rIG1vZGVsIHZlcnRpY2VzLi4uCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGggLSAxOyBpKyspIHsKCiAgICAgICAgICAgIHZlcnRleCA9IHZlcnRpY2VzW2ldOwogICAgICAgICAgICBuZXh0VmVydGV4ID0gdmVydGljZXNbaSArIDFdOwogICAgICAgICAgICBsYXN0T3J0aG9nb25hbFZlcnRleCA9IF8ubGFzdChvcnRob2dvbmFsVmVydGljZXMpOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKGkgPiAwKSB7CiAgICAgICAgICAgICAgICAvLyBQdXNoIGFsbCB0aGUgbGluayB2ZXJ0aWNlcyB0byB0aGUgb3J0aG9nb25hbCByb3V0ZS4KICAgICAgICAgICAgICAgIG9ydGhvZ29uYWxWZXJ0ZXggPSB2ZXJ0ZXg7CiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgYSBkaXJlY3Rpb24gYmV0d2VlbiB0aGUgbGFzdCB2ZXJ0ZXggYW5kIHRoZSBuZXcgb25lLgogICAgICAgICAgICAgICAgLy8gVGhlcmVmb3JlLCBlYWNoIHZlcnRleCBjb250YWlucyB0aGUgYGRgIHByb3BlcnR5IGRlc2NyaWJpbmcgdGhlIGRpcmVjdGlvbiB0aGF0IG9uZQogICAgICAgICAgICAgICAgLy8gd291bGQgaGF2ZSB0byB0YWtlIHRvIHRyYXZlbCB0byB0aGF0IHZlcnRleC4KICAgICAgICAgICAgICAgIG9ydGhvZ29uYWxWZXJ0ZXguZCA9IGxhc3RPcnRob2dvbmFsVmVydGV4CiAgICAgICAgICAgICAgICAgICAgPyBkaXJlY3Rpb24obGFzdE9ydGhvZ29uYWxWZXJ0ZXgsIHZlcnRleCkKICAgICAgICAgICAgICAgICAgICA6ICd0b3AnOwoKICAgICAgICAgICAgICAgIG9ydGhvZ29uYWxWZXJ0aWNlcy5wdXNoKG9ydGhvZ29uYWxWZXJ0ZXgpOwogICAgICAgICAgICAgICAgbGFzdE9ydGhvZ29uYWxWZXJ0ZXggPSBvcnRob2dvbmFsVmVydGV4OwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB3ZSBkb24ndCBjcmVhdGUgYSB2ZXJ0ZXggdGhhdCB3b3VsZCBnbyB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uIHRoZW4KICAgICAgICAgICAgLy8gdGhhdCBvZiB0aGUgcHJldmlvdXMgb25lLgogICAgICAgICAgICAvLyBPdGh3ZXJ3aXNlLCBhICdzcGlrZScgc2VnbWVudCB3b3VsZCBiZSBjcmVhdGVkIHdoaWNoIGlzIG5vdCBkZXNpcmFibGUuCiAgICAgICAgICAgIC8vIEZpbmQgYSBkdW1teSB2ZXJ0ZXggdG8ga2VlcCB0aGUgbGluayBvcnRob2dvbmFsLiBQcmVmZXJhYmx5LCB0YWtlIHRoZSBzYW1lIGRpcmVjdGlvbgogICAgICAgICAgICAvLyBhcyB0aGUgcHJldmlvdXMgb25lLgogICAgICAgICAgICB2YXIgZCA9IGxhc3RPcnRob2dvbmFsVmVydGV4ICYmIGxhc3RPcnRob2dvbmFsVmVydGV4LmQ7CiAgICAgICAgICAgIG9ydGhvZ29uYWxWZXJ0ZXggPSBmaW5kTWlkZGxlVmVydGV4KHZlcnRleCwgbmV4dFZlcnRleCwgZCk7CgogICAgICAgICAgICAvLyBEbyBub3QgYWRkIGEgbmV3IHZlcnRleCB0aGF0IGlzIHRoZSBzYW1lIGFzIG9uZSBvZiB0aGUgdmVydGljZXMgYWxyZWFkeSBhZGRlZC4KICAgICAgICAgICAgaWYgKCFnLnBvaW50KG9ydGhvZ29uYWxWZXJ0ZXgpLmVxdWFscyhnLnBvaW50KHZlcnRleCkpICYmCiAgICAgICAgICAgICAgICAhZy5wb2ludChvcnRob2dvbmFsVmVydGV4KS5lcXVhbHMoZy5wb2ludChuZXh0VmVydGV4KSkpIHsKCiAgICAgICAgICAgICAgICBvcnRob2dvbmFsVmVydGljZXMucHVzaChvcnRob2dvbmFsVmVydGV4KTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gb3J0aG9nb25hbFZlcnRpY2VzOwogICAgfTsKCiAgICByZXR1cm4gZnVuY3Rpb24odmVydGljZXMpIHsKCiAgICAgICAgc291cmNlQkJveCA9IHRoaXMuc291cmNlQkJveDsKICAgICAgICB0YXJnZXRCQm94ID0gdGhpcy50YXJnZXRCQm94OwoKICAgICAgICByZXR1cm4gZmluZE9ydGhvZ29uYWxSb3V0ZSh2ZXJ0aWNlcyk7CiAgICB9OwoKfSgpOwoKam9pbnQucm91dGVycy5tYW5oYXR0YW4gPSAoZnVuY3Rpb24oKSB7CgogICAgJ3VzZSBzdHJpY3QnOwoKICAgIHZhciBjb25maWcgPSB7CgogICAgICAgIC8vIHNpemUgb2YgdGhlIHN0ZXAgdG8gZmluZCBhIHJvdXRlCiAgICAgICAgc3RlcDogMTAsCgogICAgICAgIC8vIHVzZSBvZiB0aGUgcGVycGVuZGljdWxhciBsaW5rVmlldyBvcHRpb24gdG8gY29ubmVjdCBjZW50ZXIgb2YgZWxlbWVudCB3aXRoIGZpcnN0IHZlcnRleAogICAgICAgIHBlcnBlbmRpY3VsYXI6IHRydWUsCgogICAgICAgIC8vIHRlbGxzIGhvdyB0byBkaXZpZGUgdGhlIHBhcGVyIHdoZW4gY3JlYXRpbmcgdGhlIGVsZW1lbnRzIG1hcAogICAgICAgIG1hcEdyaWRTaXplOiAxMDAsCgogICAgICAgIC8vIHNob3VsZCBiZSBzb3VyY2Ugb3IgdGFyZ2V0IG5vdCB0byBiZSBjb25zaWRlciBhcyBhbiBvYnN0YWNsZQogICAgICAgIGV4Y2x1ZGVFbmRzOiBbXSwgLy8gJ3NvdXJjZScsICd0YXJnZXQnCgogICAgICAgIC8vIHNob3VsZCBiZSBhbnkgZWxlbWVudCB3aXRoIGEgY2VydGFpbiB0eXBlIG5vdCB0byBiZSBjb25zaWRlciBhcyBhbiBvYnN0YWNsZQogICAgICAgIGV4Y2x1ZGVUeXBlczogWydiYXNpYy5UZXh0J10sCgogICAgICAgIC8vIGlmIG51bWJlciBvZiByb3V0ZSBmaW5kaW5nIGxvb3BzIGV4Y2VlZCB0aGUgbWF4aW11bSwgc3RvcHMgc2VhcmNoaW5nIGFuZCByZXR1cm5zCiAgICAgICAgLy8gZmFsbGJhY2sgcm91dGUKICAgICAgICBtYXhpbXVtTG9vcHM6IDUwMCwKCiAgICAgICAgLy8gcG9zc2libGUgc3RhcnRpbmcgZGlyZWN0aW9ucyBmcm9tIGFuIGVsZW1lbnQKICAgICAgICBzdGFydERpcmVjdGlvbnM6IFsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ10sCgogICAgICAgIC8vIHBvc3NpYmxlIGVuZGluZyBkaXJlY3Rpb25zIHRvIGFuIGVsZW1lbnQKICAgICAgICBlbmREaXJlY3Rpb25zOiBbJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddLAoKICAgICAgICAvLyBzcGVjaWZ5IGRpcmVjdGlvbnMgYWJvdmUKICAgICAgICBkaXJlY3Rpb25NYXA6IHsKICAgICAgICAgICAgcmlnaHQ6IHsgeDogMSwgeTogMCB9LAogICAgICAgICAgICBib3R0b206IHsgeDogMCwgeTogMSB9LAogICAgICAgICAgICBsZWZ0OiB7IHg6IC0xLCB5OiAwIH0sCiAgICAgICAgICAgIHRvcDogeyB4OiAwLCB5OiAtMSB9CiAgICAgICAgfSwKCiAgICAgICAgLy8gbWF4aW11bSBjaGFuZ2Ugb2YgdGhlIGRpcmVjdGlvbgogICAgICAgIG1heEFsbG93ZWREaXJlY3Rpb25DaGFuZ2U6IDEsCgogICAgICAgIC8vIHBhZGRpbmcgYXBwbGllZCBvbiB0aGUgZWxlbWVudCBib3VuZGluZyBib3hlcwogICAgICAgIHBhZGRpbmdCb3g6IGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgdmFyIHN0ZXAgPSB0aGlzLnN0ZXA7CgogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgeDogLXN0ZXAsCiAgICAgICAgICAgICAgICB5OiAtc3RlcCwKICAgICAgICAgICAgICAgIHdpZHRoOiAyKnN0ZXAsCiAgICAgICAgICAgICAgICBoZWlnaHQ6IDIqc3RlcAogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLy8gYW4gYXJyYXkgb2YgZGlyZWN0aW9ucyB0byBmaW5kIG5leHQgcG9pbnRzIG9uIHRoZSByb3V0ZQogICAgICAgIGRpcmVjdGlvbnM6IGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgdmFyIHN0ZXAgPSB0aGlzLnN0ZXA7CgogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgeyBvZmZzZXRYOiBzdGVwICAsIG9mZnNldFk6IDAgICAgICwgY29zdDogc3RlcCB9LAogICAgICAgICAgICAgICAgeyBvZmZzZXRYOiAwICAgICAsIG9mZnNldFk6IHN0ZXAgICwgY29zdDogc3RlcCB9LAogICAgICAgICAgICAgICAgeyBvZmZzZXRYOiAtc3RlcCAsIG9mZnNldFk6IDAgICAgICwgY29zdDogc3RlcCB9LAogICAgICAgICAgICAgICAgeyBvZmZzZXRYOiAwICAgICAsIG9mZnNldFk6IC1zdGVwICwgY29zdDogc3RlcCB9CiAgICAgICAgICAgIF07CiAgICAgICAgfSwKCiAgICAgICAgLy8gYSBwZW5hbHR5IHJlY2VpdmVkIGZvciBkaXJlY3Rpb24gY2hhbmdlCiAgICAgICAgcGVuYWx0aWVzOiBmdW5jdGlvbigpIHsKCiAgICAgICAgICAgIHJldHVybiBbMCwgdGhpcy5zdGVwIC8gMiwgdGhpcy5zdGVwXTsKICAgICAgICB9LAoKICAgICAgICAvLyBoZXVyZXN0aWMgbWV0aG9kIHRvIGRldGVybWluZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzCiAgICAgICAgZXN0aW1hdGVDb3N0OiBmdW5jdGlvbihmcm9tLCB0bykgewoKICAgICAgICAgICAgcmV0dXJuIGZyb20ubWFuaGF0dGFuRGlzdGFuY2UodG8pOwogICAgICAgIH0sCgogICAgICAgIC8vIGEgc2ltcGxlIHJvdXRlIHVzZWQgaW4gc2l0dWF0aW9ucywgd2hlbiBtYWluIHJvdXRpbmcgbWV0aG9kIGZhaWxzCiAgICAgICAgLy8gKGV4Y2VlZCBsb29wcywgaW5hY2Nlc3NpYmxlKS4KICAgICAgICBmYWxsYmFja1JvdXRlOiBmdW5jdGlvbihmcm9tLCB0bywgb3B0cykgewoKICAgICAgICAgICAgLy8gRmluZCBhbiBvcnRob2dvbmFsIHJvdXRlIGlnbm9yaW5nIG9ic3RhY2xlcy4KCiAgICAgICAgICAgIHZhciBwcmV2RGlySW5kZXhlcyA9IG9wdHMucHJldkRpckluZGV4ZXMgfHwge307CgogICAgICAgICAgICB2YXIgcG9pbnQgPSAocHJldkRpckluZGV4ZXNbZnJvbV0gfHwgMCkgJSAyCiAgICAgICAgICAgICAgICAgICAgPyBnLnBvaW50KGZyb20ueCwgdG8ueSkKICAgICAgICAgICAgICAgICAgICA6IGcucG9pbnQodG8ueCwgZnJvbS55KTsKCiAgICAgICAgICAgIHJldHVybiBbcG9pbnQsIHRvXTsKICAgICAgICB9LAoKICAgICAgICAvLyBpZiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCBpdCdzIHVzZWQgdG8gcm91dGUgdGhlIGxpbmsgd2hpbGUgZHJhZ2dpbmcgYW4gZW5kCiAgICAgICAgLy8gaS5lLiBmdW5jdGlvbihmcm9tLCB0bywgb3B0cykgeyByZXR1cm4gW107IH0KICAgICAgICBkcmFnZ2luZ1JvdXRlOiBudWxsCiAgICB9OwoKICAgIC8vIHJlY29uc3RydWN0cyBhIHJvdXRlIGJ5IGNvbmNhdGluZyBwb2ludHMgd2l0aCB0aGVpciBwYXJlbnRzCiAgICBmdW5jdGlvbiByZWNvbnN0cnVjdFJvdXRlKHBhcmVudHMsIHBvaW50KSB7CgogICAgICAgIHZhciByb3V0ZSA9IFtdOwogICAgICAgIHZhciBwcmV2RGlmZiA9IHsgeDogMCwgeTogMCB9OwogICAgICAgIHZhciBjdXJyZW50ID0gcG9pbnQ7CiAgICAgICAgdmFyIHBhcmVudDsKCiAgICAgICAgd2hpbGUgKChwYXJlbnQgPSBwYXJlbnRzW2N1cnJlbnRdKSkgewoKICAgICAgICAgICAgdmFyIGRpZmYgPSBwYXJlbnQuZGlmZmVyZW5jZShjdXJyZW50KTsKCiAgICAgICAgICAgIGlmICghZGlmZi5lcXVhbHMocHJldkRpZmYpKSB7CgogICAgICAgICAgICAgICAgcm91dGUudW5zaGlmdChjdXJyZW50KTsKICAgICAgICAgICAgICAgIHByZXZEaWZmID0gZGlmZjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY3VycmVudCA9IHBhcmVudDsKICAgICAgICB9CgogICAgICAgIHJvdXRlLnVuc2hpZnQoY3VycmVudCk7CgogICAgICAgIHJldHVybiByb3V0ZTsKICAgIH07CgogICAgLy8gZmluZCBwb2ludHMgYXJvdW5kIHRoZSByZWN0YW5nbGUgdGFraW5nIGdpdmVuIGRpcmVjdGlvbnMgaW4gdGhlIGFjY291bnQKICAgIGZ1bmN0aW9uIGdldFJlY3RQb2ludHMoYmJveCwgZGlyZWN0aW9uTGlzdCwgb3B0cykgewoKICAgICAgICB2YXIgc3RlcCA9IG9wdHMuc3RlcDsKCiAgICAgICAgdmFyIGNlbnRlciA9IGJib3guY2VudGVyKCk7CgogICAgICAgIHZhciBzdGFydFBvaW50cyA9IF8uY2hhaW4ob3B0cy5kaXJlY3Rpb25NYXApLnBpY2soZGlyZWN0aW9uTGlzdCkubWFwKGZ1bmN0aW9uKGRpcmVjdGlvbikgewoKICAgICAgICAgICAgdmFyIHggPSBkaXJlY3Rpb24ueCAqIGJib3gud2lkdGggLyAyOwogICAgICAgICAgICB2YXIgeSA9IGRpcmVjdGlvbi55ICogYmJveC5oZWlnaHQgLyAyOwoKICAgICAgICAgICAgdmFyIHBvaW50ID0gZy5wb2ludChjZW50ZXIpLm9mZnNldCh4LHkpLnNuYXBUb0dyaWQoc3RlcCk7CgogICAgICAgICAgICBpZiAoYmJveC5jb250YWluc1BvaW50KHBvaW50KSkgewoKICAgICAgICAgICAgICAgIHBvaW50Lm9mZnNldChkaXJlY3Rpb24ueCAqIHN0ZXAsIGRpcmVjdGlvbi55ICogc3RlcCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBwb2ludDsKCiAgICAgICAgfSkudmFsdWUoKTsKCiAgICAgICAgcmV0dXJuIHN0YXJ0UG9pbnRzOwogICAgfTsKCiAgICAvLyByZXR1cm5zIGEgZGlyZWN0aW9uIGluZGV4IGZyb20gc3RhcnQgcG9pbnQgdG8gZW5kIHBvaW50CiAgICBmdW5jdGlvbiBnZXREaXJlY3Rpb24oc3RhcnQsIGVuZCwgZGlyTGVuKSB7CgogICAgICAgIHZhciBkaXJBbmdsZSA9IDM2MCAvIGRpckxlbjsKCiAgICAgICAgdmFyIHEgPSBNYXRoLmZsb29yKHN0YXJ0LnRoZXRhKGVuZCkgLyBkaXJBbmdsZSk7CgogICAgICAgIHJldHVybiBkaXJMZW4gLSBxOwogICAgfQoKICAgIC8vIGZpbmRzIHRoZSByb3V0ZSBiZXR3ZWVuIHRvIHBvaW50cy9yZWN0YW5nbGVzIGltcGxlbWVudGluZyBBKiBhbGdob3JpdG0KICAgIGZ1bmN0aW9uIGZpbmRSb3V0ZShzdGFydCwgZW5kLCBtYXAsIG9wdCkgewoKICAgICAgICB2YXIgc3RhcnREaXJlY3Rpb25zID0gb3B0LnJldmVyc2VkID8gb3B0LmVuZERpcmVjdGlvbnMgOiBvcHQuc3RhcnREaXJlY3Rpb25zOwogICAgICAgIHZhciBlbmREaXJlY3Rpb25zID0gb3B0LnJldmVyc2VkID8gb3B0LnN0YXJ0RGlyZWN0aW9ucyA6IG9wdC5lbmREaXJlY3Rpb25zOwoKICAgICAgICAvLyBzZXQgb2YgcG9pbnRzIHdlIHN0YXJ0IHBhdGhmaW5kaW5nIGZyb20KICAgICAgICB2YXIgc3RhcnRTZXQgPSBzdGFydCBpbnN0YW5jZW9mIGcucmVjdAogICAgICAgICAgICAgICAgPyBnZXRSZWN0UG9pbnRzKHN0YXJ0LCBzdGFydERpcmVjdGlvbnMsIG9wdCkKICAgICAgICAgICAgICAgIDogW3N0YXJ0XTsKCiAgICAgICAgLy8gc2V0IG9mIHBvaW50cyB3ZSB3YW50IHRoZSBwYXRoZmluZGluZyB0byBmaW5pc2ggYXQKICAgICAgICB2YXIgZW5kU2V0ID0gZW5kIGluc3RhbmNlb2YgZy5yZWN0CiAgICAgICAgICAgICAgICA/IGdldFJlY3RQb2ludHMoZW5kLCBlbmREaXJlY3Rpb25zLCBvcHQpCiAgICAgICAgICAgICAgICA6IFtlbmRdOwoKICAgICAgICB2YXIgc3RhcnRDZW50ZXIgPSBzdGFydFNldC5sZW5ndGggPiAxID8gc3RhcnQuY2VudGVyKCkgOiBzdGFydFNldFswXTsKICAgICAgICB2YXIgZW5kQ2VudGVyID0gZW5kU2V0Lmxlbmd0aCA+IDEgPyBlbmQuY2VudGVyKCkgOiBlbmRTZXRbMF07CgogICAgICAgIC8vIHRha2UgaW50byBhY2NvdW50ICBvbmx5IGFjY2Vzc2libGUgZW5kIHBvaW50cwogICAgICAgIHZhciBlbmRQb2ludHMgPSBfLmZpbHRlcihlbmRTZXQsIGZ1bmN0aW9uKHBvaW50KSB7CgogICAgICAgICAgICB2YXIgbWFwS2V5ID0gZy5wb2ludChwb2ludCkuc25hcFRvR3JpZChvcHQubWFwR3JpZFNpemUpLnRvU3RyaW5nKCk7CgogICAgICAgICAgICB2YXIgYWNjZXNpYmxlID0gXy5ldmVyeShtYXBbbWFwS2V5XSwgZnVuY3Rpb24ob2JzdGFjbGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiAhb2JzdGFjbGUuY29udGFpbnNQb2ludChwb2ludCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIGFjY2VzaWJsZTsKICAgICAgICB9KTsKCgogICAgICAgIGlmIChlbmRQb2ludHMubGVuZ3RoKSB7CgogICAgICAgICAgICB2YXIgc3RlcCA9IG9wdC5zdGVwOwogICAgICAgICAgICB2YXIgcGVuYWx0aWVzID0gb3B0LnBlbmFsdGllczsKCiAgICAgICAgICAgIC8vIGNob29zZSB0aGUgZW5kIHBvaW50IHdpdGggdGhlIHNob3J0ZXN0IGVzdGltYXRlZCBwYXRoIGNvc3QKICAgICAgICAgICAgdmFyIGVuZFBvaW50ID0gXy5jaGFpbihlbmRQb2ludHMpLmludm9rZSgnc25hcFRvR3JpZCcsIHN0ZXApLm1pbihmdW5jdGlvbihwb2ludCkgewoKICAgICAgICAgICAgICAgIHJldHVybiBvcHQuZXN0aW1hdGVDb3N0KHN0YXJ0Q2VudGVyLCBwb2ludCk7CgogICAgICAgICAgICB9KS52YWx1ZSgpOwoKICAgICAgICAgICAgdmFyIHBhcmVudHMgPSB7fTsKICAgICAgICAgICAgdmFyIGNvc3RGcm9tU3RhcnQgPSB7fTsKICAgICAgICAgICAgdmFyIHRvdGFsQ29zdCA9IHt9OwoKICAgICAgICAgICAgLy8gZGlyZWN0aW9ucwogICAgICAgICAgICB2YXIgZGlycyA9IG9wdC5kaXJlY3Rpb25zOwogICAgICAgICAgICB2YXIgZGlyTGVuID0gZGlycy5sZW5ndGg7CiAgICAgICAgICAgIHZhciBkaXJIYWxmTGVuID0gZGlyTGVuIC8gMjsKICAgICAgICAgICAgdmFyIGRpckluZGV4ZXMgPSBvcHQucHJldmlvdXNEaXJJbmRleGVzIHx8IHt9OwoKICAgICAgICAgICAgLy8gVGhlIHNldCBvZiBwb2ludCBhbHJlYWR5IGV2YWx1YXRlZC4KICAgICAgICAgICAgdmFyIGNsb3NlSGFzaCA9IHt9OyAvLyBrZWVwcyBvbmx5IGluZm9ybWF0aW9uIHdoZXRoZXIgYSBwb2ludCB3YXMgZXZhbHVhdGVkJwoKICAgICAgICAgICAgLy8gVGhlIHNldCBvZiB0ZW50YXRpdmUgcG9pbnRzIHRvIGJlIGV2YWx1YXRlZCwgaW5pdGlhbGx5IGNvbnRhaW5pbmcgdGhlIHN0YXJ0IHBvaW50cwogICAgICAgICAgICB2YXIgb3Blbkhhc2ggPSB7fTsgLy8ga2VlcHMgb25seSBpbmZvcm1hdGlvbiB3aGV0aGVyIGEgcG9pbnQgaXMgdG8gYmUgZXZhbHVhdGVkJwogICAgICAgICAgICB2YXIgb3BlblNldCA9IF8uY2hhaW4oc3RhcnRTZXQpLmludm9rZSgnc25hcFRvR3JpZCcsIHN0ZXApLmVhY2goZnVuY3Rpb24ocG9pbnQpIHsKCiAgICAgICAgICAgICAgICB2YXIga2V5ID0gcG9pbnQudG9TdHJpbmcoKTsKCiAgICAgICAgICAgICAgICBjb3N0RnJvbVN0YXJ0W2tleV0gPSAwOyAvLyBDb3N0IGZyb20gc3RhcnQgYWxvbmcgYmVzdCBrbm93biBwYXRoLgogICAgICAgICAgICAgICAgdG90YWxDb3N0W2tleV0gPSBvcHQuZXN0aW1hdGVDb3N0KHBvaW50LCBlbmRQb2ludCk7CiAgICAgICAgICAgICAgICBkaXJJbmRleGVzW2tleV0gPSBkaXJJbmRleGVzW2tleV0gfHwgZ2V0RGlyZWN0aW9uKHN0YXJ0Q2VudGVyLCBwb2ludCwgZGlyTGVuKTsKICAgICAgICAgICAgICAgIG9wZW5IYXNoW2tleV0gPSB0cnVlOwoKICAgICAgICAgICAgfSkubWFwKGZ1bmN0aW9uKHBvaW50KSB7CgogICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50LnRvU3RyaW5nKCk7CgogICAgICAgICAgICB9KS5zb3J0QnkoZnVuY3Rpb24ocG9pbnRLZXkpIHsKCiAgICAgICAgICAgICAgICByZXR1cm4gdG90YWxDb3N0W3BvaW50S2V5XTsKCiAgICAgICAgICAgIH0pLnZhbHVlKCk7CgogICAgICAgICAgICB2YXIgbG9vcENvdW50ZXIgPSBvcHQubWF4aW11bUxvb3BzOwoKICAgICAgICAgICAgdmFyIG1heEFsbG93ZWREaXJlY3Rpb25DaGFuZ2UgPSBvcHQubWF4QWxsb3dlZERpcmVjdGlvbkNoYW5nZTsKCiAgICAgICAgICAgIC8vIG1haW4gcm91dGUgZmluZGluZyBsb29wCiAgICAgICAgICAgIHdoaWxlIChvcGVuU2V0Lmxlbmd0aCAmJiBsb29wQ291bnRlci0tKSB7CgogICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRLZXkgPSBvcGVuU2V0WzBdOwogICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb2ludCA9IGcucG9pbnQoY3VycmVudEtleSk7CgogICAgICAgICAgICAgICAgaWYgKGVuZFBvaW50LmVxdWFscyhjdXJyZW50UG9pbnQpKSB7CgogICAgICAgICAgICAgICAgICAgIG9wdC5wcmV2aW91c0RpckluZGV4ZXMgPSBfLnBpY2soZGlySW5kZXhlcywgY3VycmVudEtleSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY29uc3RydWN0Um91dGUocGFyZW50cywgY3VycmVudFBvaW50KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyByZW1vdmUgY3VycmVudCBmcm9tIHRoZSBvcGVuIGxpc3QKICAgICAgICAgICAgICAgIG9wZW5TZXQuc3BsaWNlKDAsIDEpOwogICAgICAgICAgICAgICAgb3Blbkhhc2hbbmVpZ2hib3JLZXldID0gbnVsbDsKCiAgICAgICAgICAgICAgICAvLyBhZGQgY3VycmVudCB0byB0aGUgY2xvc2UgbGlzdAogICAgICAgICAgICAgICAgY2xvc2VIYXNoW25laWdoYm9yS2V5XSA9IHRydWU7CgogICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREaXJJbmRleCA9IGRpckluZGV4ZXNbY3VycmVudEtleV07CiAgICAgICAgICAgICAgICB2YXIgY3VycmVudERpc3QgPSBjb3N0RnJvbVN0YXJ0W2N1cnJlbnRLZXldOwoKICAgICAgICAgICAgICAgIGZvciAodmFyIGRpckluZGV4ID0gMDsgZGlySW5kZXggPCBkaXJMZW47IGRpckluZGV4KyspIHsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGRpckNoYW5nZSA9IE1hdGguYWJzKGRpckluZGV4IC0gY3VycmVudERpckluZGV4KTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKGRpckNoYW5nZSA+IGRpckhhbGZMZW4pIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIGRpckNoYW5nZSA9IGRpckxlbiAtIGRpckNoYW5nZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBkaXJlY3Rpb24gY2hhbmdlZCByYXBpZGx5IGRvbid0IHVzZSB0aGlzIHBvaW50CiAgICAgICAgICAgICAgICAgICAgaWYgKGRpckNoYW5nZSA+IG1heEFsbG93ZWREaXJlY3Rpb25DaGFuZ2UpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdmFyIGRpciA9IGRpcnNbZGlySW5kZXhdOwoKICAgICAgICAgICAgICAgICAgICB2YXIgbmVpZ2hib3JQb2ludCA9IGcucG9pbnQoY3VycmVudFBvaW50KS5vZmZzZXQoZGlyLm9mZnNldFgsIGRpci5vZmZzZXRZKTsKICAgICAgICAgICAgICAgICAgICB2YXIgbmVpZ2hib3JLZXkgPSBuZWlnaGJvclBvaW50LnRvU3RyaW5nKCk7CgogICAgICAgICAgICAgICAgICAgIGlmIChjbG9zZUhhc2hbbmVpZ2hib3JLZXldKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIGlzIHBvaW50IGFjY2VzaWJsZSAtIG5vIG9ic3RhY2xlIGluIHRoZSB3YXkKCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcEtleSA9IGcucG9pbnQobmVpZ2hib3JQb2ludCkuc25hcFRvR3JpZChvcHQubWFwR3JpZFNpemUpLnRvU3RyaW5nKCk7CgogICAgICAgICAgICAgICAgICAgIHZhciBpc0FjY2VzaWJsZSA9IF8uZXZlcnkobWFwW21hcEtleV0sIGZ1bmN0aW9uKG9ic3RhY2xlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhb2JzdGFjbGUuY29udGFpbnNQb2ludChuZWlnaGJvclBvaW50KTsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0FjY2VzaWJsZSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB2YXIgaW5PcGVuU2V0ID0gXy5oYXMob3Blbkhhc2gsIG5laWdoYm9yS2V5KTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvc3RUb05laWdoYm9yID0gY3VycmVudERpc3QgKyBkaXIuY29zdDsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbk9wZW5TZXQgfHwgY29zdFRvTmVpZ2hib3IgPCBjb3N0RnJvbVN0YXJ0W25laWdoYm9yS2V5XSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50c1tuZWlnaGJvcktleV0gPSBjdXJyZW50UG9pbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpckluZGV4ZXNbbmVpZ2hib3JLZXldID0gZGlySW5kZXg7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvc3RGcm9tU3RhcnRbbmVpZ2hib3JLZXldID0gY29zdFRvTmVpZ2hib3I7CgogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbENvc3RbbmVpZ2hib3JLZXldID0gY29zdFRvTmVpZ2hib3IgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVzdGltYXRlQ29zdChuZWlnaGJvclBvaW50LCBlbmRQb2ludCkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuYWx0aWVzW2RpckNoYW5nZV07CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWluT3BlblNldCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcGVuSW5kZXggPSBfLnNvcnRlZEluZGV4KG9wZW5TZXQsIG5laWdoYm9yS2V5LCBmdW5jdGlvbihvcGVuS2V5KSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0b3RhbENvc3Rbb3BlbktleV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuU2V0LnNwbGljZShvcGVuSW5kZXgsIDAsIG5laWdoYm9yS2V5KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5IYXNoW25laWdoYm9yS2V5XSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gbm8gcm91dGUgZm91bmQgKCd0bycgcG9pbnQgd2Fzbid0IGVpdGhlciBhY2Nlc3NpYmxlIG9yIGZpbmRpbmcgcm91dGUgdG9vawogICAgICAgIC8vIHdheSB0byBtdWNoIGNhbGN1bGF0aW9ucykKICAgICAgICByZXR1cm4gb3B0LmZhbGxiYWNrUm91dGUoc3RhcnRDZW50ZXIsIGVuZENlbnRlciwgb3B0KTsKICAgIH07CgogICAgLy8gaW5pdGlhdGlvbiBvZiB0aGUgcm91dGUgZmluZGluZwogICAgZnVuY3Rpb24gcm91dGVyKG9sZFZlcnRpY2VzLCBvcHQpIHsKCiAgICAgICAgLy8gcmVzb2x2ZSBzb21lIG9mIHRoZSBvcHRpb25zCiAgICAgICAgb3B0LmRpcmVjdGlvbnMgPSBfLnJlc3VsdChvcHQsICdkaXJlY3Rpb25zJyk7CiAgICAgICAgb3B0LnBlbmFsdGllcyA9IF8ucmVzdWx0KG9wdCwgJ3BlbmFsdGllcycpOwogICAgICAgIG9wdC5wYWRkaW5nQm94ID0gXy5yZXN1bHQob3B0LCAncGFkZGluZ0JveCcpOwoKICAgICAgICAvLyBlbmFibGUvZGlzYWJsZSBsaW5rVmlldyBwZXJwZW5kaWN1bGFyIG9wdGlvbgogICAgICAgIHRoaXMub3B0aW9ucy5wZXJwZW5kaWN1bGFyID0gISFvcHQucGVycGVuZGljdWxhcjsKCiAgICAgICAgLy8gQXMgcm91dGUgY2hhbmdlcyBpdHMgc2hhcGUgcmFwaWRseSB3aGVuIHdlIHN0YXJ0IGZpbmRpbmcgcm91dGUgZnJvbSBkaWZmZXJlbnQgcG9pbnQKICAgICAgICAvLyBpdCdzIG5lY2Vzc2FyeSB0byBzdGFydCBmcm9tIHRoZSBlbGVtZW50IHRoYXQgd2FzIG5vdCBpbnRlcmFjdGVkIHdpdGgKICAgICAgICAvLyAodGhlIHBvc2l0aW9uIHdhcyBjaGFuZ2VkKSBhdCB2ZXJ5IGxhc3QuCiAgICAgICAgdmFyIHJldmVyc2VSb3V0aW5nID0gb3B0LnJldmVyc2VkID0gKHRoaXMubGFzdEVuZENoYW5nZSA9PT0gJ3NvdXJjZScpOwoKICAgICAgICB2YXIgc291cmNlQkJveCA9IHJldmVyc2VSb3V0aW5nID8gZy5yZWN0KHRoaXMudGFyZ2V0QkJveCkgOiBnLnJlY3QodGhpcy5zb3VyY2VCQm94KTsKICAgICAgICB2YXIgdGFyZ2V0QkJveCA9IHJldmVyc2VSb3V0aW5nID8gZy5yZWN0KHRoaXMuc291cmNlQkJveCkgOiBnLnJlY3QodGhpcy50YXJnZXRCQm94KTsKCiAgICAgICAgLy8gZXhwYW5kIGJveGVzIGJ5IHNwZWNpZmljIHBhZGRpbmcKICAgICAgICBzb3VyY2VCQm94Lm1vdmVBbmRFeHBhbmQob3B0LnBhZGRpbmdCb3gpOwogICAgICAgIHRhcmdldEJCb3gubW92ZUFuZEV4cGFuZChvcHQucGFkZGluZ0JveCk7CgogICAgICAgIC8vIGJ1aWxkaW5nIGFuIGVsZW1lbnRzIG1hcAoKICAgICAgICB2YXIgbGluayA9IHRoaXMubW9kZWw7CiAgICAgICAgdmFyIGdyYXBoID0gdGhpcy5wYXBlci5tb2RlbDsKCiAgICAgICAgLy8gc291cmNlIG9yIHRhcmdldCBlbGVtZW50IGNvdWxkIGJlIGV4Y2x1ZGVkIGZyb20gc2V0IG9mIG9ic3RhY2xlcwogICAgICAgIHZhciBleGNsdWRlZEVuZHMgPSBfLmNoYWluKG9wdC5leGNsdWRlRW5kcykKICAgICAgICAgICAgICAgIC5tYXAobGluay5nZXQsIGxpbmspCiAgICAgICAgICAgICAgICAucGx1Y2soJ2lkJykKICAgICAgICAgICAgICAgIC5tYXAoZ3JhcGguZ2V0Q2VsbCwgZ3JhcGgpLnZhbHVlKCk7CgogICAgICAgIHZhciBtYXBHcmlkU2l6ZSA9IG9wdC5tYXBHcmlkU2l6ZTsKCiAgICAgICAgLy8gYnVpbGRzIGEgbWFwIG9mIGFsbCBlbGVtZW50cyBmb3IgcXVpY2tlciBvYnN0YWNsZSBxdWVyaWVzIChpLmUuIGlzIGEgcG9pbnQgY29udGFpbmVkCiAgICAgICAgLy8gaW4gYW55IG9ic3RhY2xlPykgKGEgc2ltcGxpZmllZCBncmlkIHNlYXJjaCkKICAgICAgICAvLyBUaGUgcGFwZXIgaXMgZGl2aWRlZCB0byBzbWFsbGVyIGNlbGxzLCB3aGVyZSBlYWNoIG9mIHRoZW0gaG9sZHMgYW4gaW5mb3JtYXRpb24gd2hpY2gKICAgICAgICAvLyBlbGVtZW50cyBiZWxvbmcgdG8gaXQuIFdoZW4gd2UgcXVlcnkgd2hldGhlciBhIHBvaW50IGlzIGluIGFuIG9ic3RhY2xlIHdlIGRvbid0IG5lZWQKICAgICAgICAvLyB0byBnbyB0aHJvdWdoIGFsbCBvYnN0YWNsZXMsIHdlIGNoZWNrIG9ubHkgdGhvc2UgaW4gYSBwYXJ0aWN1bGFyIGNlbGwuCiAgICAgICAgdmFyIG1hcCA9IF8uY2hhaW4oZ3JhcGguZ2V0RWxlbWVudHMoKSkKICAgICAgICAgICAgLy8gcmVtb3ZlIHNvdXJjZSBhbmQgdGFyZ2V0IGVsZW1lbnQgaWYgcmVxdWlyZWQKICAgICAgICAgICAgLmRpZmZlcmVuY2UoZXhjbHVkZWRFbmRzKQogICAgICAgICAgICAvLyByZW1vdmUgYWxsIGVsZW1lbnRzIHdob3NlIHR5cGUgaXMgbGlzdGVkIGluIGV4Y2x1ZGVkVHlwZXMgYXJyYXkKICAgICAgICAgICAgLnJlamVjdChmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gXy5jb250YWlucyhvcHQuZXhjbHVkZVR5cGVzLCBlbGVtZW50LmdldCgndHlwZScpKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLy8gY2hhbmdlIGVsZW1lbnRzIChtb2RlbHMpIHRvIHRoZWlyIGJvdW5kaW5nIGJveGVzCiAgICAgICAgICAgIC5pbnZva2UoJ2dldEJCb3gnKQogICAgICAgICAgICAvLyBleHBhbmQgdGhlaXIgYm94ZXMgYnkgc3BlY2lmaWMgcGFkZGluZwogICAgICAgICAgICAuaW52b2tlKCdtb3ZlQW5kRXhwYW5kJywgb3B0LnBhZGRpbmdCb3gpCiAgICAgICAgICAgIC8vIGJ1aWxkIHRoZSBtYXAKICAgICAgICAgICAgLmZvbGRsKGZ1bmN0aW9uKHJlcywgYmJveCkgewoKICAgICAgICAgICAgICAgIHZhciBvcmlnaW4gPSBiYm94Lm9yaWdpbigpLnNuYXBUb0dyaWQobWFwR3JpZFNpemUpOwogICAgICAgICAgICAgICAgdmFyIGNvcm5lciA9IGJib3guY29ybmVyKCkuc25hcFRvR3JpZChtYXBHcmlkU2l6ZSk7CgogICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IG9yaWdpbi54OyB4IDw9IGNvcm5lci54OyB4ICs9IG1hcEdyaWRTaXplKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IG9yaWdpbi55OyB5IDw9IGNvcm5lci55OyB5ICs9IG1hcEdyaWRTaXplKSB7CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JpZEtleSA9IHggKyAnQCcgKyB5OwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVzW2dyaWRLZXldID0gcmVzW2dyaWRLZXldIHx8IFtdOwogICAgICAgICAgICAgICAgICAgICAgICByZXNbZ3JpZEtleV0ucHVzaChiYm94KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHJlczsKCiAgICAgICAgICAgIH0sIHt9KS52YWx1ZSgpOwoKICAgICAgICAvLyBwYXRoZmluZGluZwoKICAgICAgICB2YXIgbmV3VmVydGljZXMgPSBbXTsKCiAgICAgICAgdmFyIHBvaW50cyA9IF8ubWFwKG9sZFZlcnRpY2VzLCBnLnBvaW50KTsKCiAgICAgICAgdmFyIHRhaWxQb2ludCA9IHNvdXJjZUJCb3guY2VudGVyKCk7CgogICAgICAgIC8vIGZpbmQgYSByb3V0ZSBieSBjb25jYXRpbmcgYWxsIHBhcnRpYWwgcm91dGVzIChyb3V0ZXMgbmVlZCB0byBnbyB0aHJvdWdoIHRoZSB2ZXJ0aWNlcykKICAgICAgICAvLyBzdGFydEVsZW1lbnQgLT4gdmVydGV4WzFdIC0+IC4uLiAtPiB2ZXJ0ZXhbbl0gLT4gZW5kRWxlbWVudAogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDw9IGxlbjsgaSsrKSB7CgogICAgICAgICAgICB2YXIgcGFydGlhbFJvdXRlID0gbnVsbDsKCiAgICAgICAgICAgIHZhciBmcm9tID0gdG8gfHwgc291cmNlQkJveDsKICAgICAgICAgICAgdmFyIHRvID0gcG9pbnRzW2ldOwoKICAgICAgICAgICAgaWYgKCF0bykgewoKICAgICAgICAgICAgICAgIHRvID0gdGFyZ2V0QkJveDsKCiAgICAgICAgICAgICAgICAvLyAndG8nIGlzIG5vdCBhIHZlcnRleC4gSWYgdGhlIHRhcmdldCBpcyBhIHBvaW50IChpLmUuIGl0J3Mgbm90IGFuIGVsZW1lbnQpLCB3ZQogICAgICAgICAgICAgICAgLy8gbWlnaHQgdXNlIGRyYWdnaW5nIHJvdXRlIGluc3RlYWQgb2YgbWFpbiByb3V0aW5nIG1ldGhvZCBpZiB0aGF0IGlzIGVuYWJsZWQuCiAgICAgICAgICAgICAgICB2YXIgZW5kaW5nQXRQb2ludCA9ICF0aGlzLm1vZGVsLmdldCgnc291cmNlJykuaWQgfHwgIXRoaXMubW9kZWwuZ2V0KCd0YXJnZXQnKS5pZDsKCiAgICAgICAgICAgICAgICBpZiAoZW5kaW5nQXRQb2ludCAmJiBfLmlzRnVuY3Rpb24ob3B0LmRyYWdnaW5nUm91dGUpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIHBhc3NpbmcgcG9pbnRzIG9ubHkgKG5vdCByZWN0cykuCiAgICAgICAgICAgICAgICAgICAgdmFyIGRyYWdGcm9tID0gZnJvbSBpbnN0YW5jZW9mIGcucmVjdCA/IGZyb20uY2VudGVyKCkgOiBmcm9tOwogICAgICAgICAgICAgICAgICAgIHBhcnRpYWxSb3V0ZSA9IG9wdC5kcmFnZ2luZ1JvdXRlKGRyYWdGcm9tLCB0by5vcmlnaW4oKSwgb3B0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gaWYgcGFydGlhbCByb3V0ZSBoYXMgbm90IGJlZW4gY2FsY3VsYXRlZCB5ZXQgdXNlIHRoZSBtYWluIHJvdXRpbmcgbWV0aG9kIHRvIGZpbmQgb25lCiAgICAgICAgICAgIHBhcnRpYWxSb3V0ZSA9IHBhcnRpYWxSb3V0ZSB8fCBmaW5kUm91dGUoZnJvbSwgdG8sIG1hcCwgb3B0KTsKCiAgICAgICAgICAgIHZhciBsZWFkUG9pbnQgPSBfLmZpcnN0KHBhcnRpYWxSb3V0ZSk7CgogICAgICAgICAgICBpZiAobGVhZFBvaW50ICYmIGxlYWRQb2ludC5lcXVhbHModGFpbFBvaW50KSkgewoKICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgZmlyc3QgcG9pbnQgaWYgdGhlIHByZXZpb3VzIHBhcnRpYWwgcm91dGUgaGFkIHRoZSBzYW1lIHBvaW50IGFzIGxhc3QKICAgICAgICAgICAgICAgIHBhcnRpYWxSb3V0ZS5zaGlmdCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0YWlsUG9pbnQgPSBfLmxhc3QocGFydGlhbFJvdXRlKSB8fCB0YWlsUG9pbnQ7CgogICAgICAgICAgICBuZXdWZXJ0aWNlcyA9IG5ld1ZlcnRpY2VzLmNvbmNhdChwYXJ0aWFsUm91dGUpOwogICAgICAgIH07CgogICAgICAgIC8vIHdlIG1pZ2h0IGhhdmUgdG8gcmV2ZXJzZSB0aGUgcmVzdWx0IGlmIHdlIHN3YXBwZWQgc291cmNlIGFuZCB0YXJnZXQgYXQgdGhlIGJlZ2lubmluZwogICAgICAgIHJldHVybiByZXZlcnNlUm91dGluZyA/IG5ld1ZlcnRpY2VzLnJldmVyc2UoKSA6IG5ld1ZlcnRpY2VzOwogICAgfTsKCiAgICAvLyBwdWJsaWMgZnVuY3Rpb24KICAgIHJldHVybiBmdW5jdGlvbih2ZXJ0aWNlcywgb3B0LCBsaW5rVmlldykgewoKICAgICAgICByZXR1cm4gcm91dGVyLmNhbGwobGlua1ZpZXcsIHZlcnRpY2VzLCBfLmV4dGVuZCh7fSwgY29uZmlnLCBvcHQpKTsKICAgIH07Cgp9KSgpOwoKam9pbnQucm91dGVycy5tZXRybyA9IChmdW5jdGlvbigpIHsKCiAgICBpZiAoIV8uaXNGdW5jdGlvbihqb2ludC5yb3V0ZXJzLm1hbmhhdHRhbikpIHsKCiAgICAgICAgdGhyb3coJ01ldHJvIHJlcXVpcmVzIHRoZSBtYW5oYXR0YW4gcm91dGVyLicpOwogICAgfQoKICAgIHZhciBjb25maWcgPSB7CgogICAgICAgIC8vIGNvc3Qgb2YgYSBkaWFnb25hbCBzdGVwIChjYWxjdWxhdGVkIGlmIG5vdCBkZWZpbmVkKS4KICAgICAgICBkaWFnb25hbENvc3Q6IG51bGwsCgogICAgICAgIC8vIGFuIGFycmF5IG9mIGRpcmVjdGlvbnMgdG8gZmluZCBuZXh0IHBvaW50cyBvbiB0aGUgcm91dGUKICAgICAgICBkaXJlY3Rpb25zOiBmdW5jdGlvbigpIHsKCiAgICAgICAgICAgIHZhciBzdGVwID0gdGhpcy5zdGVwOwogICAgICAgICAgICB2YXIgZGlhZ29uYWxDb3N0ID0gdGhpcy5kaWFnb25hbENvc3QgfHwgTWF0aC5jZWlsKE1hdGguc3FydChzdGVwICogc3RlcCA8PCAxKSk7CgogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgeyBvZmZzZXRYOiBzdGVwICAsIG9mZnNldFk6IDAgICAgICwgY29zdDogc3RlcCAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7IG9mZnNldFg6IHN0ZXAgICwgb2Zmc2V0WTogc3RlcCAgLCBjb3N0OiBkaWFnb25hbENvc3QgfSwKICAgICAgICAgICAgICAgIHsgb2Zmc2V0WDogMCAgICAgLCBvZmZzZXRZOiBzdGVwICAsIGNvc3Q6IHN0ZXAgICAgICAgICB9LAogICAgICAgICAgICAgICAgeyBvZmZzZXRYOiAtc3RlcCAsIG9mZnNldFk6IHN0ZXAgICwgY29zdDogZGlhZ29uYWxDb3N0IH0sCiAgICAgICAgICAgICAgICB7IG9mZnNldFg6IC1zdGVwICwgb2Zmc2V0WTogMCAgICAgLCBjb3N0OiBzdGVwICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsgb2Zmc2V0WDogLXN0ZXAgLCBvZmZzZXRZOiAtc3RlcCAsIGNvc3Q6IGRpYWdvbmFsQ29zdCB9LAogICAgICAgICAgICAgICAgeyBvZmZzZXRYOiAwICAgICAsIG9mZnNldFk6IC1zdGVwICwgY29zdDogc3RlcCAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7IG9mZnNldFg6IHN0ZXAgICwgb2Zmc2V0WTogLXN0ZXAgLCBjb3N0OiBkaWFnb25hbENvc3QgfQogICAgICAgICAgICBdOwogICAgICAgIH0sCgogICAgICAgIC8vIGEgc2ltcGxlIHJvdXRlIHVzZWQgaW4gc2l0dWF0aW9ucywgd2hlbiBtYWluIHJvdXRpbmcgbWV0aG9kIGZhaWxzCiAgICAgICAgLy8gKGV4Y2VlZCBsb29wcywgaW5hY2Nlc3NpYmxlKS4KICAgICAgICBmYWxsYmFja1JvdXRlOiBmdW5jdGlvbihmcm9tLCB0bywgb3B0cykgewoKICAgICAgICAgICAgLy8gRmluZCBhIHJvdXRlIHdoaWNoIGJyZWFrcyBieSA0NSBkZWdyZWVzIGlnbm9yaW5nIGFsbCBvYnN0YWNsZXMuCgogICAgICAgICAgICB2YXIgdGhldGEgPSBmcm9tLnRoZXRhKHRvKTsKCiAgICAgICAgICAgIHZhciBhID0geyB4OiB0by54LCB5OiBmcm9tLnkgfTsKICAgICAgICAgICAgdmFyIGIgPSB7IHg6IGZyb20ueCwgeTogdG8ueSB9OwoKICAgICAgICAgICAgaWYgKHRoZXRhICUgMTgwID4gOTApIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gYTsKICAgICAgICAgICAgICAgIGEgPSBiOwogICAgICAgICAgICAgICAgYiA9IHQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBwMSA9ICh0aGV0YSAlIDkwKSA8IDQ1ID8gYSA6IGI7CgogICAgICAgICAgICB2YXIgbDEgPSBnLmxpbmUoZnJvbSwgcDEpOwoKICAgICAgICAgICAgdmFyIGFscGhhID0gOTAgKiBNYXRoLmNlaWwodGhldGEgLyA5MCk7CgogICAgICAgICAgICB2YXIgcDIgPSBnLnBvaW50LmZyb21Qb2xhcihsMS5zcXVhcmVkTGVuZ3RoKCksIGcudG9SYWQoYWxwaGEgKyAxMzUpLCBwMSk7CgogICAgICAgICAgICB2YXIgbDIgPSBnLmxpbmUodG8sIHAyKTsKCiAgICAgICAgICAgIHZhciBwb2ludCA9IGwxLmludGVyc2VjdGlvbihsMik7CgogICAgICAgICAgICByZXR1cm4gcG9pbnQgPyBbcG9pbnQucm91bmQoKSwgdG9dIDogW3RvXTsKICAgICAgICB9CiAgICB9OwoKICAgIC8vIHB1YmxpYyBmdW5jdGlvbgogICAgcmV0dXJuIGZ1bmN0aW9uKHZlcnRpY2VzLCBvcHRzLCBsaW5rVmlldykgewoKICAgICAgICByZXR1cm4gam9pbnQucm91dGVycy5tYW5oYXR0YW4odmVydGljZXMsIF8uZXh0ZW5kKHt9LCBjb25maWcsIG9wdHMpLCBsaW5rVmlldyk7CiAgICB9OwoKfSkoKTsKCmpvaW50LmNvbm5lY3RvcnMubm9ybWFsID0gZnVuY3Rpb24oc291cmNlUG9pbnQsIHRhcmdldFBvaW50LCB2ZXJ0aWNlcykgewoKICAgIC8vIENvbnN0cnVjdCB0aGUgYGRgIGF0dHJpYnV0ZSBvZiB0aGUgYDxwYXRoPmAgZWxlbWVudC4KICAgIHZhciBkID0gWydNJywgc291cmNlUG9pbnQueCwgc291cmNlUG9pbnQueV07CgogICAgXy5lYWNoKHZlcnRpY2VzLCBmdW5jdGlvbih2ZXJ0ZXgpIHsKCiAgICAgICAgZC5wdXNoKHZlcnRleC54LCB2ZXJ0ZXgueSk7CiAgICB9KTsKCiAgICBkLnB1c2godGFyZ2V0UG9pbnQueCwgdGFyZ2V0UG9pbnQueSk7CgogICAgcmV0dXJuIGQuam9pbignICcpOwp9OwoKam9pbnQuY29ubmVjdG9ycy5yb3VuZGVkID0gZnVuY3Rpb24oc291cmNlUG9pbnQsIHRhcmdldFBvaW50LCB2ZXJ0aWNlcywgb3B0cykgewoKICAgIHZhciBvZmZzZXQgPSBvcHRzLnJhZGl1cyB8fCAxMDsKCiAgICB2YXIgYzEsIGMyLCBkMSwgZDIsIHByZXYsIG5leHQ7CgogICAgLy8gQ29uc3RydWN0IHRoZSBgZGAgYXR0cmlidXRlIG9mIHRoZSBgPHBhdGg+YCBlbGVtZW50LgogICAgdmFyIGQgPSBbJ00nLCBzb3VyY2VQb2ludC54LCBzb3VyY2VQb2ludC55XTsKCiAgICBfLmVhY2godmVydGljZXMsIGZ1bmN0aW9uKHZlcnRleCwgaW5kZXgpIHsKCiAgICAgICAgLy8gdGhlIGNsb3Nlc3QgdmVydGljZXMKICAgICAgICBwcmV2ID0gdmVydGljZXNbaW5kZXgtMV0gfHwgc291cmNlUG9pbnQ7CiAgICAgICAgbmV4dCA9IHZlcnRpY2VzW2luZGV4KzFdIHx8IHRhcmdldFBvaW50OwoKICAgICAgICAvLyBhIGhhbGYgZGlzdGFuY2UgdG8gdGhlIGNsb3Nlc3QgdmVydGV4CiAgICAgICAgZDEgPSBkMiB8fCBnLnBvaW50KHZlcnRleCkuZGlzdGFuY2UocHJldikgLyAyOwogICAgICAgIGQyID0gZy5wb2ludCh2ZXJ0ZXgpLmRpc3RhbmNlKG5leHQpIC8gMjsKCiAgICAgICAgLy8gY29udHJvbCBwb2ludHMKICAgICAgICBjMSA9IGcucG9pbnQodmVydGV4KS5tb3ZlKHByZXYsIC1NYXRoLm1pbihvZmZzZXQsIGQxKSkucm91bmQoKTsKICAgICAgICBjMiA9IGcucG9pbnQodmVydGV4KS5tb3ZlKG5leHQsIC1NYXRoLm1pbihvZmZzZXQsIGQyKSkucm91bmQoKTsKCiAgICAgICAgZC5wdXNoKGMxLngsIGMxLnksICdTJywgdmVydGV4LngsIHZlcnRleC55LCBjMi54LCBjMi55LCAnTCcpOwogICAgfSk7CgogICAgZC5wdXNoKHRhcmdldFBvaW50LngsIHRhcmdldFBvaW50LnkpOwoKICAgIHJldHVybiBkLmpvaW4oJyAnKTsKfTsKCmpvaW50LmNvbm5lY3RvcnMuc21vb3RoID0gZnVuY3Rpb24oc291cmNlUG9pbnQsIHRhcmdldFBvaW50LCB2ZXJ0aWNlcykgewoKICAgIHZhciBkOwoKICAgIGlmICh2ZXJ0aWNlcy5sZW5ndGgpIHsKCiAgICAgICAgZCA9IGcuYmV6aWVyLmN1cnZlVGhyb3VnaFBvaW50cyhbc291cmNlUG9pbnRdLmNvbmNhdCh2ZXJ0aWNlcykuY29uY2F0KFt0YXJnZXRQb2ludF0pKTsKCiAgICB9IGVsc2UgewogICAgICAgIC8vIGlmIHdlIGhhdmUgbm8gdmVydGljZXMgdXNlIGEgZGVmYXVsdCBjdWJpYyBiZXppZXIgY3VydmUsIGN1YmljIGJlemllciByZXF1aXJlcwogICAgICAgIC8vIHR3byBjb250cm9sIHBvaW50cy4gVGhlIHR3byBjb250cm9sIHBvaW50cyBhcmUgYm90aCBkZWZpbmVkIHdpdGggWCBhcyBtaWQgd2F5CiAgICAgICAgLy8gYmV0d2VlbiB0aGUgc291cmNlIGFuZCB0YXJnZXQgcG9pbnRzLiBTb3VyY2VDb250cm9sUG9pbnQgWSBpcyBlcXVhbCB0byBzb3VyY2VQb2ludCBZCiAgICAgICAgLy8gYW5kIHRhcmdldENvbnRyb2xQb2ludFkgYmVpbmcgZXF1YWwgdG8gdGFyZ2V0UG9pbnRZLiBIYW5kbGUgc2l0dWF0aW9uIHdlcmUKICAgICAgICAvLyBzb3VyY2VQb2ludFggaXMgZ3JlYXRlciBvciBsZXNzIHRoZW4gdGFyZ2V0UG9pbnRYLgogICAgICAgIHZhciBjb250cm9sUG9pbnRYID0gKHNvdXJjZVBvaW50LnggPCB0YXJnZXRQb2ludC54KSAKICAgICAgICAgICAgICAgID8gdGFyZ2V0UG9pbnQueCAtICgodGFyZ2V0UG9pbnQueCAtIHNvdXJjZVBvaW50LngpIC8gMikKICAgICAgICAgICAgICAgIDogc291cmNlUG9pbnQueCAtICgoc291cmNlUG9pbnQueCAtIHRhcmdldFBvaW50LngpIC8gMik7CgogICAgICAgIGQgPSBbCiAgICAgICAgICAgICdNJywgc291cmNlUG9pbnQueCwgc291cmNlUG9pbnQueSwKICAgICAgICAgICAgJ0MnLCBjb250cm9sUG9pbnRYLCBzb3VyY2VQb2ludC55LCBjb250cm9sUG9pbnRYLCB0YXJnZXRQb2ludC55LAogICAgICAgICAgICB0YXJnZXRQb2ludC54LCB0YXJnZXRQb2ludC55CiAgICAgICAgXTsKICAgIH0KCiAgICByZXR1cm4gZC5qb2luKCcgJyk7Cn07Cg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 05:41:43 GMT",
                    "Content-Length": "528769",
                    "Date": "Fri, 07 Nov 2014 05:41:44 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}