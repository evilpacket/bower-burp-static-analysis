{
    "url": "http://localhost:9999/sillypog/jquery.tmpl.loader/bower_components/jquery-tmpl/tests/qunit.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.href</b> and written to <b>the 'innerHTML' property of a DOM element</b> via the following statements:<ul><li>var mainPageLocation = location.href.slice(0, paramsIndex);</li><li>banner.innerHTML = '&lt;a href=\"' + mainPageLocation + '\"&gt;' + banner.innerHTML + '&lt;/a&gt; &amp;#8250; &lt;a href=\"\"&gt;' + testName + '&lt;/a&gt;';</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/sillypog/jquery.tmpl.loader/bower_components/jquery-tmpl/tests/qunit.js",
                "path": "/sillypog/jquery.tmpl.loader/bower_components/jquery-tmpl/tests/qunit.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9zaWxseXBvZy9qcXVlcnkudG1wbC5sb2FkZXIvYm93ZXJfY29tcG9uZW50cy9qcXVlcnktdG1wbC90ZXN0cy9xdW5pdC5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMzYwOTQNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMDc6MTY6MzEgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDA3OjE2OjMxIEdNVA0KDQovKgogKiBRVW5pdCAtIEEgSmF2YVNjcmlwdCBVbml0IFRlc3RpbmcgRnJhbWV3b3JrCiAqCiAqIGh0dHA6Ly9kb2NzLmpxdWVyeS5jb20vUVVuaXQKICoKICogQ29weXJpZ2h0IChjKSAyMDA5IEpvaG4gUmVzaWcsIErDtnJuIFphZWZmZXJlcgogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgKE1JVC1MSUNFTlNFLnR4dCkKICogYW5kIEdQTCAoR1BMLUxJQ0VOU0UudHh0KSBsaWNlbnNlcy4KICovCgooZnVuY3Rpb24od2luZG93KSB7Cgp2YXIgZGVmaW5lZCA9IHsKCXNldFRpbWVvdXQ6IHR5cGVvZiB3aW5kb3cuc2V0VGltZW91dCAhPT0gInVuZGVmaW5lZCIsCglzZXNzaW9uU3RvcmFnZTogKGZ1bmN0aW9uKCkgewoJCXRyeSB7CgkJCXJldHVybiAhIXNlc3Npb25TdG9yYWdlLmdldEl0ZW07CgkJfSBjYXRjaChlKXsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KICB9KSgpCn0KCnZhciB0ZXN0SWQgPSAwOwoKdmFyIFRlc3QgPSBmdW5jdGlvbihuYW1lLCB0ZXN0TmFtZSwgZXhwZWN0ZWQsIHRlc3RFbnZpcm9ubWVudEFyZywgYXN5bmMsIGNhbGxiYWNrKSB7Cgl0aGlzLm5hbWUgPSBuYW1lOwoJdGhpcy50ZXN0TmFtZSA9IHRlc3ROYW1lOwoJdGhpcy5leHBlY3RlZCA9IGV4cGVjdGVkOwoJdGhpcy50ZXN0RW52aXJvbm1lbnRBcmcgPSB0ZXN0RW52aXJvbm1lbnRBcmc7Cgl0aGlzLmFzeW5jID0gYXN5bmM7Cgl0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7Cgl0aGlzLmFzc2VydGlvbnMgPSBbXTsKfTsKVGVzdC5wcm90b3R5cGUgPSB7Cglpbml0OiBmdW5jdGlvbigpIHsKCQl2YXIgdGVzdHMgPSBpZCgicXVuaXQtdGVzdHMiKTsKCQlpZiAodGVzdHMpIHsKCQkJdmFyIGIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHJvbmciKTsKCQkJCWIuaW5uZXJIVE1MID0gIlJ1bm5pbmcgIiArIHRoaXMubmFtZTsKCQkJdmFyIGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGkiKTsKCQkJCWxpLmFwcGVuZENoaWxkKCBiICk7CgkJCQlsaS5pZCA9IHRoaXMuaWQgPSAidGVzdC1vdXRwdXQiICsgdGVzdElkKys7CgkJCXRlc3RzLmFwcGVuZENoaWxkKCBsaSApOwoJCX0KCX0sCglzZXR1cDogZnVuY3Rpb24oKSB7CgkJaWYgKHRoaXMubW9kdWxlICE9IGNvbmZpZy5wcmV2aW91c01vZHVsZSkgewoJCQlpZiAoIHRoaXMucHJldmlvdXNNb2R1bGUgKSB7CgkJCQlRVW5pdC5tb2R1bGVEb25lKCB0aGlzLm1vZHVsZSwgY29uZmlnLm1vZHVsZVN0YXRzLmJhZCwgY29uZmlnLm1vZHVsZVN0YXRzLmFsbCApOwoJCQl9CgkJCWNvbmZpZy5wcmV2aW91c01vZHVsZSA9IHRoaXMubW9kdWxlOwoJCQljb25maWcubW9kdWxlU3RhdHMgPSB7IGFsbDogMCwgYmFkOiAwIH07CgkJCVFVbml0Lm1vZHVsZVN0YXJ0KCB0aGlzLm1vZHVsZSwgdGhpcy5tb2R1bGVUZXN0RW52aXJvbm1lbnQgKTsKCQl9CgoJCWNvbmZpZy5jdXJyZW50ID0gdGhpczsKCQl0aGlzLnRlc3RFbnZpcm9ubWVudCA9IGV4dGVuZCh7CgkJCXNldHVwOiBmdW5jdGlvbigpIHt9LAoJCQl0ZWFyZG93bjogZnVuY3Rpb24oKSB7fQoJCX0sIHRoaXMubW9kdWxlVGVzdEVudmlyb25tZW50KTsKCQlpZiAodGhpcy50ZXN0RW52aXJvbm1lbnRBcmcpIHsKCQkJZXh0ZW5kKHRoaXMudGVzdEVudmlyb25tZW50LCB0aGlzLnRlc3RFbnZpcm9ubWVudEFyZyk7CgkJfQoKCQlRVW5pdC50ZXN0U3RhcnQoIHRoaXMudGVzdE5hbWUsIHRoaXMudGVzdEVudmlyb25tZW50ICk7CgoJCS8vIGFsbG93IHV0aWxpdHkgZnVuY3Rpb25zIHRvIGFjY2VzcyB0aGUgY3VycmVudCB0ZXN0IGVudmlyb25tZW50CgkJLy8gVE9ETyB3aHk/PwoJCVFVbml0LmN1cnJlbnRfdGVzdEVudmlyb25tZW50ID0gdGhpcy50ZXN0RW52aXJvbm1lbnQ7CgoJCXRyeSB7CgkJCWlmICggIWNvbmZpZy5wb2xsdXRpb24gKSB7CgkJCQlzYXZlR2xvYmFsKCk7CgkJCX0KCgkJCXRoaXMudGVzdEVudmlyb25tZW50LnNldHVwLmNhbGwodGhpcy50ZXN0RW52aXJvbm1lbnQpOwoJCX0gY2F0Y2goZSkgewoJCQkvLyBUT0RPIHVzZSB0ZXN0TmFtZSBpbnN0ZWFkIG9mIG5hbWUgZm9yIG5vLW1hcmt1cCBtZXNzYWdlPwoJCQlRVW5pdC5vayggZmFsc2UsICJTZXR1cCBmYWlsZWQgb24gIiArIHRoaXMubmFtZSArICI6ICIgKyBlLm1lc3NhZ2UgKTsKCQl9Cgl9LAoJcnVuOiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMuYXN5bmMgKSB7CgkJCVFVbml0LnN0b3AoKTsKCQl9CgoJCXRyeSB7CgkJCXRoaXMuY2FsbGJhY2suY2FsbCh0aGlzLnRlc3RFbnZpcm9ubWVudCk7CgkJfSBjYXRjaChlKSB7CgkJCS8vIFRPRE8gdXNlIHRlc3ROYW1lIGluc3RlYWQgb2YgbmFtZSBmb3Igbm8tbWFya3VwIG1lc3NhZ2U/CgkJCWZhaWwoIlRlc3QgIiArIHRoaXMubmFtZSArICIgZGllZCwgZXhjZXB0aW9uIGFuZCB0ZXN0IGZvbGxvd3MiLCBlLCB0aGlzLmNhbGxiYWNrKTsKCQkJUVVuaXQub2soIGZhbHNlLCAiRGllZCBvbiB0ZXN0ICMiICsgKHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGggKyAxKSArICI6ICIgKyBlLm1lc3NhZ2UgKyAiIC0gIiArIFFVbml0LmpzRHVtcC5wYXJzZShlKSApOwoJCQkvLyBlbHNlIG5leHQgdGVzdCB3aWxsIGNhcnJ5IHRoZSByZXNwb25zaWJpbGl0eQoJCQlzYXZlR2xvYmFsKCk7CgoJCQkvLyBSZXN0YXJ0IHRoZSB0ZXN0cyBpZiB0aGV5J3JlIGJsb2NraW5nCgkJCWlmICggY29uZmlnLmJsb2NraW5nICkgewoJCQkJc3RhcnQoKTsKCQkJfQoJCX0KCX0sCgl0ZWFyZG93bjogZnVuY3Rpb24oKSB7CgkJdHJ5IHsKCQkJY2hlY2tQb2xsdXRpb24oKTsKCQkJdGhpcy50ZXN0RW52aXJvbm1lbnQudGVhcmRvd24uY2FsbCh0aGlzLnRlc3RFbnZpcm9ubWVudCk7CgkJfSBjYXRjaChlKSB7CgkJCS8vIFRPRE8gdXNlIHRlc3ROYW1lIGluc3RlYWQgb2YgbmFtZSBmb3Igbm8tbWFya3VwIG1lc3NhZ2U/CgkJCVFVbml0Lm9rKCBmYWxzZSwgIlRlYXJkb3duIGZhaWxlZCBvbiAiICsgdGhpcy5uYW1lICsgIjogIiArIGUubWVzc2FnZSApOwoJCX0KCX0sCglmaW5pc2g6IGZ1bmN0aW9uKCkgewoJCWlmICggdGhpcy5leHBlY3RlZCAmJiB0aGlzLmV4cGVjdGVkICE9IHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGggKSB7CgkJCVFVbml0Lm9rKCBmYWxzZSwgIkV4cGVjdGVkICIgKyB0aGlzLmV4cGVjdGVkICsgIiBhc3NlcnRpb25zLCBidXQgIiArIHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGggKyAiIHdlcmUgcnVuIiApOwoJCX0KCgkJdmFyIGdvb2QgPSAwLCBiYWQgPSAwLAoJCQl0ZXN0cyA9IGlkKCJxdW5pdC10ZXN0cyIpOwoKCQljb25maWcuc3RhdHMuYWxsICs9IHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGg7CgkJY29uZmlnLm1vZHVsZVN0YXRzLmFsbCArPSB0aGlzLmFzc2VydGlvbnMubGVuZ3RoOwoKCQlpZiAoIHRlc3RzICkgewoJCQl2YXIgb2wgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib2wiKTsKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGg7IGkrKyApIHsKCQkJCXZhciBhc3NlcnRpb24gPSB0aGlzLmFzc2VydGlvbnNbaV07CgoJCQkJdmFyIGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGkiKTsKCQkJCWxpLmNsYXNzTmFtZSA9IGFzc2VydGlvbi5yZXN1bHQgPyAicGFzcyIgOiAiZmFpbCI7CgkJCQlsaS5pbm5lckhUTUwgPSBhc3NlcnRpb24ubWVzc2FnZSB8fCAoYXNzZXJ0aW9uLnJlc3VsdCA/ICJva2F5IiA6ICJmYWlsZWQiKTsKCQkJCW9sLmFwcGVuZENoaWxkKCBsaSApOwoKCQkJCWlmICggYXNzZXJ0aW9uLnJlc3VsdCApIHsKCQkJCQlnb29kKys7CgkJCQl9IGVsc2UgewoJCQkJCWJhZCsrOwoJCQkJCWNvbmZpZy5zdGF0cy5iYWQrKzsKCQkJCQljb25maWcubW9kdWxlU3RhdHMuYmFkKys7CgkJCQl9CgkJCX0KCgkJCS8vIHN0b3JlIHJlc3VsdCB3aGVuIHBvc3NpYmxlCgkJCWRlZmluZWQuc2Vzc2lvblN0b3JhZ2UgJiYgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgicXVuaXQtIiArIHRoaXMudGVzdE5hbWUsIGJhZCk7CgoJCQlpZiAoYmFkID09IDApIHsKCQkJCW9sLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CgkJCX0KCgkJCXZhciBiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3Ryb25nIik7CgkJCWIuaW5uZXJIVE1MID0gdGhpcy5uYW1lICsgIiA8YiBjbGFzcz0nY291bnRzJz4oPGIgY2xhc3M9J2ZhaWxlZCc+IiArIGJhZCArICI8L2I+LCA8YiBjbGFzcz0ncGFzc2VkJz4iICsgZ29vZCArICI8L2I+LCAiICsgdGhpcy5hc3NlcnRpb25zLmxlbmd0aCArICIpPC9iPiI7CgoJCQlhZGRFdmVudChiLCAiY2xpY2siLCBmdW5jdGlvbigpIHsKCQkJCXZhciBuZXh0ID0gYi5uZXh0U2libGluZywgZGlzcGxheSA9IG5leHQuc3R5bGUuZGlzcGxheTsKCQkJCW5leHQuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXkgPT09ICJub25lIiA/ICJibG9jayIgOiAibm9uZSI7CgkJCX0pOwoKCQkJYWRkRXZlbnQoYiwgImRibGNsaWNrIiwgZnVuY3Rpb24oZSkgewoJCQkJdmFyIHRhcmdldCA9IGUgJiYgZS50YXJnZXQgPyBlLnRhcmdldCA6IHdpbmRvdy5ldmVudC5zcmNFbGVtZW50OwoJCQkJaWYgKCB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSAic3BhbiIgfHwgdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gImIiICkgewoJCQkJCXRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlOwoJCQkJfQoJCQkJaWYgKCB3aW5kb3cubG9jYXRpb24gJiYgdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJzdHJvbmciICkgewoJCQkJCXdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggPSAiPyIgKyBlbmNvZGVVUklDb21wb25lbnQoZ2V0VGV4dChbdGFyZ2V0XSkucmVwbGFjZSgvXCguK1wpJC8sICIiKS5yZXBsYWNlKC8oXlxzKnxccyokKS9nLCAiIikpOwoJCQkJfQoJCQl9KTsKCgkJCXZhciBsaSA9IGlkKHRoaXMuaWQpOwoJCQlsaS5jbGFzc05hbWUgPSBiYWQgPyAiZmFpbCIgOiAicGFzcyI7CgkJCWxpLnN0eWxlLmRpc3BsYXkgPSByZXN1bHREaXNwbGF5U3R5bGUoIWJhZCk7CgkJCWxpLnJlbW92ZUNoaWxkKCBsaS5maXJzdENoaWxkICk7CgkJCWxpLmFwcGVuZENoaWxkKCBiICk7CgkJCWxpLmFwcGVuZENoaWxkKCBvbCApOwoKCQkJaWYgKCBiYWQgKSB7CgkJCQl2YXIgdG9vbGJhciA9IGlkKCJxdW5pdC10ZXN0cnVubmVyLXRvb2xiYXIiKTsKCQkJCWlmICggdG9vbGJhciApIHsKCQkJCQl0b29sYmFyLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwoJCQkJCWlkKCJxdW5pdC1maWx0ZXItcGFzcyIpLmRpc2FibGVkID0gbnVsbDsKCQkJCX0KCQkJfQoKCQl9IGVsc2UgewoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmFzc2VydGlvbnMubGVuZ3RoOyBpKysgKSB7CgkJCQlpZiAoICF0aGlzLmFzc2VydGlvbnNbaV0ucmVzdWx0ICkgewoJCQkJCWJhZCsrOwoJCQkJCWNvbmZpZy5zdGF0cy5iYWQrKzsKCQkJCQljb25maWcubW9kdWxlU3RhdHMuYmFkKys7CgkJCQl9CgkJCX0KCQl9CgoJCXRyeSB7CgkJCVFVbml0LnJlc2V0KCk7CgkJfSBjYXRjaChlKSB7CgkJCS8vIFRPRE8gdXNlIHRlc3ROYW1lIGluc3RlYWQgb2YgbmFtZSBmb3Igbm8tbWFya3VwIG1lc3NhZ2U/CgkJCWZhaWwoInJlc2V0KCkgZmFpbGVkLCBmb2xsb3dpbmcgVGVzdCAiICsgdGhpcy5uYW1lICsgIiwgZXhjZXB0aW9uIGFuZCByZXNldCBmbiBmb2xsb3dzIiwgZSwgUVVuaXQucmVzZXQpOwoJCX0KCgkJUVVuaXQudGVzdERvbmUoIHRoaXMudGVzdE5hbWUsIGJhZCwgdGhpcy5hc3NlcnRpb25zLmxlbmd0aCApOwoJfSwKCglxdWV1ZTogZnVuY3Rpb24oKSB7CgkJdmFyIHRlc3QgPSB0aGlzOwoJCXN5bmNocm9uaXplKGZ1bmN0aW9uKCkgewoJCQl0ZXN0LmluaXQoKTsKCQl9KTsKCQlmdW5jdGlvbiBydW4oKSB7CgkJCS8vIGVhY2ggb2YgdGhlc2UgY2FuIGJ5IGFzeW5jCgkJCXN5bmNocm9uaXplKGZ1bmN0aW9uKCkgewoJCQkJdGVzdC5zZXR1cCgpOwoJCQl9KTsKCQkJc3luY2hyb25pemUoZnVuY3Rpb24oKSB7CgkJCQl0ZXN0LnJ1bigpOwoJCQl9KTsKCQkJc3luY2hyb25pemUoZnVuY3Rpb24oKSB7CgkJCQl0ZXN0LnRlYXJkb3duKCk7CgkJCX0pOwoJCQlzeW5jaHJvbml6ZShmdW5jdGlvbigpIHsKCQkJCXRlc3QuZmluaXNoKCk7CgkJCX0pOwoJCX0KCQkvLyBkZWZlciB3aGVuIHByZXZpb3VzIHRlc3QgcnVuIHBhc3NlZCwgaWYgc3RvcmFnZSBpcyBhdmFpbGFibGUKCQl2YXIgYmFkID0gZGVmaW5lZC5zZXNzaW9uU3RvcmFnZSAmJiArc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgicXVuaXQtIiArIHRoaXMudGVzdE5hbWUpOwoJCWlmIChiYWQpIHsKCQkJcnVuKCk7CgkJfSBlbHNlIHsKCQkJc3luY2hyb25pemUocnVuKTsKCQl9OwoJfQoKfQoKdmFyIFFVbml0ID0gewoKCS8vIGNhbGwgb24gc3RhcnQgb2YgbW9kdWxlIHRlc3QgdG8gcHJlcGVuZCBuYW1lIHRvIGFsbCB0ZXN0cwoJbW9kdWxlOiBmdW5jdGlvbihuYW1lLCB0ZXN0RW52aXJvbm1lbnQpIHsKCQljb25maWcucHJldmlvdXNNb2R1bGUgPSBjb25maWcuY3VycmVudE1vZHVsZTsKCQljb25maWcuY3VycmVudE1vZHVsZSA9IG5hbWU7CgkJY29uZmlnLmN1cnJlbnRNb2R1bGVUZXN0RW52aXJvbWVudCA9IHRlc3RFbnZpcm9ubWVudDsKCX0sCgoJYXN5bmNUZXN0OiBmdW5jdGlvbih0ZXN0TmFtZSwgZXhwZWN0ZWQsIGNhbGxiYWNrKSB7CgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAyICkgewoJCQljYWxsYmFjayA9IGV4cGVjdGVkOwoJCQlleHBlY3RlZCA9IDA7CgkJfQoKCQlRVW5pdC50ZXN0KHRlc3ROYW1lLCBleHBlY3RlZCwgY2FsbGJhY2ssIHRydWUpOwoJfSwKCgl0ZXN0OiBmdW5jdGlvbih0ZXN0TmFtZSwgZXhwZWN0ZWQsIGNhbGxiYWNrLCBhc3luYykgewoJCXZhciBuYW1lID0gJzxzcGFuIGNsYXNzPSJ0ZXN0LW5hbWUiPicgKyB0ZXN0TmFtZSArICc8L3NwYW4+JywgdGVzdEVudmlyb25tZW50QXJnOwoKCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDIgKSB7CgkJCWNhbGxiYWNrID0gZXhwZWN0ZWQ7CgkJCWV4cGVjdGVkID0gbnVsbDsKCQl9CgkJLy8gaXMgMm5kIGFyZ3VtZW50IGEgdGVzdEVudmlyb25tZW50PwoJCWlmICggZXhwZWN0ZWQgJiYgdHlwZW9mIGV4cGVjdGVkID09PSAnb2JqZWN0JykgewoJCQl0ZXN0RW52aXJvbm1lbnRBcmcgPSAgZXhwZWN0ZWQ7CgkJCWV4cGVjdGVkID0gbnVsbDsKCQl9CgoJCWlmICggY29uZmlnLmN1cnJlbnRNb2R1bGUgKSB7CgkJCW5hbWUgPSAnPHNwYW4gY2xhc3M9Im1vZHVsZS1uYW1lIj4nICsgY29uZmlnLmN1cnJlbnRNb2R1bGUgKyAiPC9zcGFuPjogIiArIG5hbWU7CgkJfQoKCQlpZiAoICF2YWxpZFRlc3QoY29uZmlnLmN1cnJlbnRNb2R1bGUgKyAiOiAiICsgdGVzdE5hbWUpICkgewoJCQlyZXR1cm47CgkJfQoKCQl2YXIgdGVzdCA9IG5ldyBUZXN0KG5hbWUsIHRlc3ROYW1lLCBleHBlY3RlZCwgdGVzdEVudmlyb25tZW50QXJnLCBhc3luYywgY2FsbGJhY2spOwoJCXRlc3QucHJldmlvdXNNb2R1bGUgPSBjb25maWcucHJldmlvdXNNb2R1bGU7CgkJdGVzdC5tb2R1bGUgPSBjb25maWcuY3VycmVudE1vZHVsZTsKCQl0ZXN0Lm1vZHVsZVRlc3RFbnZpcm9ubWVudCA9IGNvbmZpZy5jdXJyZW50TW9kdWxlVGVzdEVudmlyb21lbnQ7CgkJdGVzdC5xdWV1ZSgpOwoJfSwKCgkvKioKCSAqIFNwZWNpZnkgdGhlIG51bWJlciBvZiBleHBlY3RlZCBhc3NlcnRpb25zIHRvIGd1cmFudGVlIHRoYXQgZmFpbGVkIHRlc3QgKG5vIGFzc2VydGlvbnMgYXJlIHJ1biBhdCBhbGwpIGRvbid0IHNsaXAgdGhyb3VnaC4KCSAqLwoJZXhwZWN0OiBmdW5jdGlvbihhc3NlcnRzKSB7CgkJY29uZmlnLmN1cnJlbnQuZXhwZWN0ZWQgPSBhc3NlcnRzOwoJfSwKCgkvKioKCSAqIEFzc2VydHMgdHJ1ZS4KCSAqIEBleGFtcGxlIG9rKCAiYXNkZmFzZGYiLmxlbmd0aCA+IDUsICJUaGVyZSBtdXN0IGJlIGF0IGxlYXN0IDUgY2hhcnMiICk7CgkgKi8KCW9rOiBmdW5jdGlvbihhLCBtc2cpIHsKCQlhID0gISFhOwoJCXZhciBkZXRhaWxzID0gewoJCQlyZXN1bHQ6IGEsCgkJCW1lc3NhZ2U6IG1zZwoJCX07CgkJbXNnID0gZXNjYXBlSHRtbChtc2cpOwoJCVFVbml0LmxvZyhhLCBtc2csIGRldGFpbHMpOwoJCWNvbmZpZy5jdXJyZW50LmFzc2VydGlvbnMucHVzaCh7CgkJCXJlc3VsdDogYSwKCQkJbWVzc2FnZTogbXNnCgkJfSk7Cgl9LAoKCS8qKgoJICogQ2hlY2tzIHRoYXQgdGhlIGZpcnN0IHR3byBhcmd1bWVudHMgYXJlIGVxdWFsLCB3aXRoIGFuIG9wdGlvbmFsIG1lc3NhZ2UuCgkgKiBQcmludHMgb3V0IGJvdGggYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMuCgkgKgoJICogUHJlZmVyZWQgdG8gb2soIGFjdHVhbCA9PSBleHBlY3RlZCwgbWVzc2FnZSApCgkgKgoJICogQGV4YW1wbGUgZXF1YWwoIGZvcm1hdCgiUmVjZWl2ZWQgezB9IGJ5dGVzLiIsIDIpLCAiUmVjZWl2ZWQgMiBieXRlcy4iICk7CgkgKgoJICogQHBhcmFtIE9iamVjdCBhY3R1YWwKCSAqIEBwYXJhbSBPYmplY3QgZXhwZWN0ZWQKCSAqIEBwYXJhbSBTdHJpbmcgbWVzc2FnZSAob3B0aW9uYWwpCgkgKi8KCWVxdWFsOiBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CgkJUVVuaXQucHVzaChleHBlY3RlZCA9PSBhY3R1YWwsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOwoJfSwKCglub3RFcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewoJCVFVbml0LnB1c2goZXhwZWN0ZWQgIT0gYWN0dWFsLCBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKTsKCX0sCgoJZGVlcEVxdWFsOiBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CgkJUVVuaXQucHVzaChRVW5pdC5lcXVpdihhY3R1YWwsIGV4cGVjdGVkKSwgYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSk7Cgl9LAoKCW5vdERlZXBFcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewoJCVFVbml0LnB1c2goIVFVbml0LmVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQpLCBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKTsKCX0sCgoJc3RyaWN0RXF1YWw6IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKCQlRVW5pdC5wdXNoKGV4cGVjdGVkID09PSBhY3R1YWwsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOwoJfSwKCglub3RTdHJpY3RFcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewoJCVFVbml0LnB1c2goZXhwZWN0ZWQgIT09IGFjdHVhbCwgYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSk7Cgl9LAoKCXJhaXNlczogZnVuY3Rpb24oYmxvY2ssIGV4cGVjdGVkLCBtZXNzYWdlKSB7CgkJdmFyIGFjdHVhbCwgb2sgPSBmYWxzZTsKCgkJaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycpIHsKCQkJbWVzc2FnZSA9IGV4cGVjdGVkOwoJCQlleHBlY3RlZCA9IG51bGw7CgkJfQoKCQl0cnkgewoJCQlibG9jaygpOwoJCX0gY2F0Y2ggKGUpIHsKCQkJYWN0dWFsID0gZTsKCQl9CgoJCWlmIChhY3R1YWwpIHsKCQkJLy8gd2UgZG9uJ3Qgd2FudCB0byB2YWxpZGF0ZSB0aHJvd24gZXJyb3IKCQkJaWYgKCFleHBlY3RlZCkgewoJCQkJb2sgPSB0cnVlOwoJCQkvLyBleHBlY3RlZCBpcyBhIHJlZ2V4cAoJCQl9IGVsc2UgaWYgKFFVbml0Lm9iamVjdFR5cGUoZXhwZWN0ZWQpID09PSAicmVnZXhwIikgewoJCQkJb2sgPSBleHBlY3RlZC50ZXN0KGFjdHVhbCk7CgkJCS8vIGV4cGVjdGVkIGlzIGEgY29uc3RydWN0b3IKCQkJfSBlbHNlIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBleHBlY3RlZCkgewoJCQkJb2sgPSB0cnVlOwoJCQkvLyBleHBlY3RlZCBpcyBhIHZhbGlkYXRpb24gZnVuY3Rpb24gd2hpY2ggcmV0dXJucyB0cnVlIGlzIHZhbGlkYXRpb24gcGFzc2VkCgkJCX0gZWxzZSBpZiAoZXhwZWN0ZWQuY2FsbCh7fSwgYWN0dWFsKSA9PT0gdHJ1ZSkgewoJCQkJb2sgPSB0cnVlOwoJCQl9CgkJfQoKCQlRVW5pdC5vayhvaywgbWVzc2FnZSk7Cgl9LAoKCXN0YXJ0OiBmdW5jdGlvbigpIHsKCQkvLyBBIHNsaWdodCBkZWxheSwgdG8gYXZvaWQgYW55IGN1cnJlbnQgY2FsbGJhY2tzCgkJaWYgKCBkZWZpbmVkLnNldFRpbWVvdXQgKSB7CgkJCXdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoJCQkJaWYgKCBjb25maWcudGltZW91dCApIHsKCQkJCQljbGVhclRpbWVvdXQoY29uZmlnLnRpbWVvdXQpOwoJCQkJfQoKCQkJCWNvbmZpZy5ibG9ja2luZyA9IGZhbHNlOwoJCQkJcHJvY2VzcygpOwoJCQl9LCAxMyk7CgkJfSBlbHNlIHsKCQkJY29uZmlnLmJsb2NraW5nID0gZmFsc2U7CgkJCXByb2Nlc3MoKTsKCQl9Cgl9LAoKCXN0b3A6IGZ1bmN0aW9uKHRpbWVvdXQpIHsKCQljb25maWcuYmxvY2tpbmcgPSB0cnVlOwoKCQlpZiAoIHRpbWVvdXQgJiYgZGVmaW5lZC5zZXRUaW1lb3V0ICkgewoJCQljb25maWcudGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoJCQkJUVVuaXQub2soIGZhbHNlLCAiVGVzdCB0aW1lZCBvdXQiICk7CgkJCQlRVW5pdC5zdGFydCgpOwoJCQl9LCB0aW1lb3V0KTsKCQl9Cgl9Cgp9OwoKLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHksIGRlcHJlY2F0ZWQKUVVuaXQuZXF1YWxzID0gUVVuaXQuZXF1YWw7ClFVbml0LnNhbWUgPSBRVW5pdC5kZWVwRXF1YWw7CgovLyBNYWludGFpbiBpbnRlcm5hbCBzdGF0ZQp2YXIgY29uZmlnID0gewoJLy8gVGhlIHF1ZXVlIG9mIHRlc3RzIHRvIHJ1bgoJcXVldWU6IFtdLAoKCS8vIGJsb2NrIHVudGlsIGRvY3VtZW50IHJlYWR5CglibG9ja2luZzogdHJ1ZQp9OwoKLy8gTG9hZCBwYXJhbWF0ZXJzCihmdW5jdGlvbigpIHsKCXZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbiB8fCB7IHNlYXJjaDogIiIsIHByb3RvY29sOiAiZmlsZToiIH0sCgkJR0VUUGFyYW1zID0gbG9jYXRpb24uc2VhcmNoLnNsaWNlKDEpLnNwbGl0KCcmJyk7CgoJZm9yICggdmFyIGkgPSAwOyBpIDwgR0VUUGFyYW1zLmxlbmd0aDsgaSsrICkgewoJCUdFVFBhcmFtc1tpXSA9IGRlY29kZVVSSUNvbXBvbmVudCggR0VUUGFyYW1zW2ldICk7CgkJaWYgKCBHRVRQYXJhbXNbaV0gPT09ICJub2dsb2JhbHMiICkgewoJCQlHRVRQYXJhbXMuc3BsaWNlKCBpLCAxICk7CgkJCWktLTsKCQkJY29uZmlnLm5vZ2xvYmFscyA9IHRydWU7CgkJfSBlbHNlIGlmICggR0VUUGFyYW1zW2ldLnNlYXJjaCgnPScpID4gLTEgKSB7CgkJCUdFVFBhcmFtcy5zcGxpY2UoIGksIDEgKTsKCQkJaS0tOwoJCX0KCX0KCgkvLyByZXN0cmljdCBtb2R1bGVzL3Rlc3RzIGJ5IGdldCBwYXJhbWV0ZXJzCgljb25maWcuZmlsdGVycyA9IEdFVFBhcmFtczsKCgkvLyBGaWd1cmUgb3V0IGlmIHdlJ3JlIHJ1bm5pbmcgdGhlIHRlc3RzIGZyb20gYSBzZXJ2ZXIgb3Igbm90CglRVW5pdC5pc0xvY2FsID0gISEobG9jYXRpb24ucHJvdG9jb2wgPT09ICdmaWxlOicpOwp9KSgpOwoKLy8gRXhwb3NlIHRoZSBBUEkgYXMgZ2xvYmFsIHZhcmlhYmxlcywgdW5sZXNzIGFuICdleHBvcnRzJwovLyBvYmplY3QgZXhpc3RzLCBpbiB0aGF0IGNhc2Ugd2UgYXNzdW1lIHdlJ3JlIGluIENvbW1vbkpTCmlmICggdHlwZW9mIGV4cG9ydHMgPT09ICJ1bmRlZmluZWQiIHx8IHR5cGVvZiByZXF1aXJlID09PSAidW5kZWZpbmVkIiApIHsKCWV4dGVuZCh3aW5kb3csIFFVbml0KTsKCXdpbmRvdy5RVW5pdCA9IFFVbml0Owp9IGVsc2UgewoJZXh0ZW5kKGV4cG9ydHMsIFFVbml0KTsKCWV4cG9ydHMuUVVuaXQgPSBRVW5pdDsKfQoKLy8gZGVmaW5lIHRoZXNlIGFmdGVyIGV4cG9zaW5nIGdsb2JhbHMgdG8ga2VlcCB0aGVtIGluIHRoZXNlIFFVbml0IG5hbWVzcGFjZSBvbmx5CmV4dGVuZChRVW5pdCwgewoJY29uZmlnOiBjb25maWcsCgoJLy8gSW5pdGlhbGl6ZSB0aGUgY29uZmlndXJhdGlvbiBvcHRpb25zCglpbml0OiBmdW5jdGlvbigpIHsKCQlleHRlbmQoY29uZmlnLCB7CgkJCXN0YXRzOiB7IGFsbDogMCwgYmFkOiAwIH0sCgkJCW1vZHVsZVN0YXRzOiB7IGFsbDogMCwgYmFkOiAwIH0sCgkJCXN0YXJ0ZWQ6ICtuZXcgRGF0ZSwKCQkJdXBkYXRlUmF0ZTogMTAwMCwKCQkJYmxvY2tpbmc6IGZhbHNlLAoJCQlhdXRvc3RhcnQ6IHRydWUsCgkJCWF1dG9ydW46IGZhbHNlLAoJCQlmaWx0ZXJzOiBbXSwKCQkJcXVldWU6IFtdCgkJfSk7CgoJCXZhciB0ZXN0cyA9IGlkKCJxdW5pdC10ZXN0cyIpLAoJCQliYW5uZXIgPSBpZCgicXVuaXQtYmFubmVyIiksCgkJCXJlc3VsdCA9IGlkKCJxdW5pdC10ZXN0cmVzdWx0Iik7CgoJCWlmICggdGVzdHMgKSB7CgkJCXRlc3RzLmlubmVySFRNTCA9ICIiOwoJCX0KCgkJaWYgKCBiYW5uZXIgKSB7CgkJCWJhbm5lci5jbGFzc05hbWUgPSAiIjsKCQl9CgoJCWlmICggcmVzdWx0ICkgewoJCQlyZXN1bHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggcmVzdWx0ICk7CgkJfQoJfSwKCgkvKioKCSAqIFJlc2V0cyB0aGUgdGVzdCBzZXR1cC4gVXNlZnVsIGZvciB0ZXN0cyB0aGF0IG1vZGlmeSB0aGUgRE9NLgoJICoKCSAqIElmIGpRdWVyeSBpcyBhdmFpbGFibGUsIHVzZXMgalF1ZXJ5J3MgaHRtbCgpLCBvdGhlcndpc2UganVzdCBpbm5lckhUTUwuCgkgKi8KCXJlc2V0OiBmdW5jdGlvbigpIHsKCQlpZiAoIHdpbmRvdy5qUXVlcnkgKSB7CgkJCWpRdWVyeSggIiNtYWluLCAjcXVuaXQtZml4dHVyZSIgKS5odG1sKCBjb25maWcuZml4dHVyZSApOwoJCX0gZWxzZSB7CgkJCXZhciBtYWluID0gaWQoICdtYWluJyApIHx8IGlkKCAncXVuaXQtZml4dHVyZScgKTsKCQkJaWYgKCBtYWluICkgewoJCQkJbWFpbi5pbm5lckhUTUwgPSBjb25maWcuZml4dHVyZTsKCQkJfQoJCX0KCX0sCgoJLyoqCgkgKiBUcmlnZ2VyIGFuIGV2ZW50IG9uIGFuIGVsZW1lbnQuCgkgKgoJICogQGV4YW1wbGUgdHJpZ2dlckV2ZW50KCBkb2N1bWVudC5ib2R5LCAiY2xpY2siICk7CgkgKgoJICogQHBhcmFtIERPTUVsZW1lbnQgZWxlbQoJICogQHBhcmFtIFN0cmluZyB0eXBlCgkgKi8KCXRyaWdnZXJFdmVudDogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGV2ZW50ICkgewoJCWlmICggZG9jdW1lbnQuY3JlYXRlRXZlbnQgKSB7CgkJCWV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoIk1vdXNlRXZlbnRzIik7CgkJCWV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldywKCQkJCTAsIDAsIDAsIDAsIDAsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTsKCQkJZWxlbS5kaXNwYXRjaEV2ZW50KCBldmVudCApOwoKCQl9IGVsc2UgaWYgKCBlbGVtLmZpcmVFdmVudCApIHsKCQkJZWxlbS5maXJlRXZlbnQoIm9uIit0eXBlKTsKCQl9Cgl9LAoKCS8vIFNhZmUgb2JqZWN0IHR5cGUgY2hlY2tpbmcKCWlzOiBmdW5jdGlvbiggdHlwZSwgb2JqICkgewoJCXJldHVybiBRVW5pdC5vYmplY3RUeXBlKCBvYmogKSA9PSB0eXBlOwoJfSwKCglvYmplY3RUeXBlOiBmdW5jdGlvbiggb2JqICkgewoJCWlmICh0eXBlb2Ygb2JqID09PSAidW5kZWZpbmVkIikgewoJCQkJcmV0dXJuICJ1bmRlZmluZWQiOwoKCQkvLyBjb25zaWRlcjogdHlwZW9mIG51bGwgPT09IG9iamVjdAoJCX0KCQlpZiAob2JqID09PSBudWxsKSB7CgkJCQlyZXR1cm4gIm51bGwiOwoJCX0KCgkJdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoIG9iaiApCgkJCS5tYXRjaCgvXlxbb2JqZWN0XHMoLiopXF0kLylbMV0gfHwgJyc7CgoJCXN3aXRjaCAodHlwZSkgewoJCQkJY2FzZSAnTnVtYmVyJzoKCQkJCQkJaWYgKGlzTmFOKG9iaikpIHsKCQkJCQkJCQlyZXR1cm4gIm5hbiI7CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJcmV0dXJuICJudW1iZXIiOwoJCQkJCQl9CgkJCQljYXNlICdTdHJpbmcnOgoJCQkJY2FzZSAnQm9vbGVhbic6CgkJCQljYXNlICdBcnJheSc6CgkJCQljYXNlICdEYXRlJzoKCQkJCWNhc2UgJ1JlZ0V4cCc6CgkJCQljYXNlICdGdW5jdGlvbic6CgkJCQkJCXJldHVybiB0eXBlLnRvTG93ZXJDYXNlKCk7CgkJfQoJCWlmICh0eXBlb2Ygb2JqID09PSAib2JqZWN0IikgewoJCQkJcmV0dXJuICJvYmplY3QiOwoJCX0KCQlyZXR1cm4gdW5kZWZpbmVkOwoJfSwKCglwdXNoOiBmdW5jdGlvbihyZXN1bHQsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKCQl2YXIgZGV0YWlscyA9IHsKCQkJcmVzdWx0OiByZXN1bHQsCgkJCW1lc3NhZ2U6IG1lc3NhZ2UsCgkJCWFjdHVhbDogYWN0dWFsLAoJCQlleHBlY3RlZDogZXhwZWN0ZWQKCQl9OwoKCQltZXNzYWdlID0gZXNjYXBlSHRtbChtZXNzYWdlKSB8fCAocmVzdWx0ID8gIm9rYXkiIDogImZhaWxlZCIpOwoJCW1lc3NhZ2UgPSAnPHNwYW4gY2xhc3M9InRlc3QtbWVzc2FnZSI+JyArIG1lc3NhZ2UgKyAiPC9zcGFuPiI7CgkJZXhwZWN0ZWQgPSBlc2NhcGVIdG1sKFFVbml0LmpzRHVtcC5wYXJzZShleHBlY3RlZCkpOwoJCWFjdHVhbCA9IGVzY2FwZUh0bWwoUVVuaXQuanNEdW1wLnBhcnNlKGFjdHVhbCkpOwoJCXZhciBvdXRwdXQgPSBtZXNzYWdlICsgJzx0YWJsZT48dHIgY2xhc3M9InRlc3QtZXhwZWN0ZWQiPjx0aD5FeHBlY3RlZDogPC90aD48dGQ+PHByZT4nICsgZXhwZWN0ZWQgKyAnPC9wcmU+PC90ZD48L3RyPic7CgkJaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkgewoJCQlvdXRwdXQgKz0gJzx0ciBjbGFzcz0idGVzdC1hY3R1YWwiPjx0aD5SZXN1bHQ6IDwvdGg+PHRkPjxwcmU+JyArIGFjdHVhbCArICc8L3ByZT48L3RkPjwvdHI+JzsKCQkJb3V0cHV0ICs9ICc8dHIgY2xhc3M9InRlc3QtZGlmZiI+PHRoPkRpZmY6IDwvdGg+PHRkPjxwcmU+JyArIFFVbml0LmRpZmYoZXhwZWN0ZWQsIGFjdHVhbCkgKyc8L3ByZT48L3RkPjwvdHI+JzsKCQl9CgkJaWYgKCFyZXN1bHQpIHsKCQkJdmFyIHNvdXJjZSA9IHNvdXJjZUZyb21TdGFja3RyYWNlKCk7CgkJCWlmIChzb3VyY2UpIHsKCQkJCWRldGFpbHMuc291cmNlID0gc291cmNlOwoJCQkJb3V0cHV0ICs9ICc8dHIgY2xhc3M9InRlc3Qtc291cmNlIj48dGg+U291cmNlOiA8L3RoPjx0ZD48cHJlPicgKyBzb3VyY2UgKyc8L3ByZT48L3RkPjwvdHI+JzsKCQkJfQoJCX0KCQlvdXRwdXQgKz0gIjwvdGFibGU+IjsKCgkJUVVuaXQubG9nKHJlc3VsdCwgbWVzc2FnZSwgZGV0YWlscyk7CgoJCWNvbmZpZy5jdXJyZW50LmFzc2VydGlvbnMucHVzaCh7CgkJCXJlc3VsdDogISFyZXN1bHQsCgkJCW1lc3NhZ2U6IG91dHB1dAoJCX0pOwoJfSwKCgkvLyBMb2dnaW5nIGNhbGxiYWNrcwoJYmVnaW46IGZ1bmN0aW9uKCkge30sCglkb25lOiBmdW5jdGlvbihmYWlsdXJlcywgdG90YWwpIHt9LAoJbG9nOiBmdW5jdGlvbihyZXN1bHQsIG1lc3NhZ2UpIHt9LAoJdGVzdFN0YXJ0OiBmdW5jdGlvbihuYW1lLCB0ZXN0RW52aXJvbm1lbnQpIHt9LAoJdGVzdERvbmU6IGZ1bmN0aW9uKG5hbWUsIGZhaWx1cmVzLCB0b3RhbCkge30sCgltb2R1bGVTdGFydDogZnVuY3Rpb24obmFtZSwgdGVzdEVudmlyb25tZW50KSB7fSwKCW1vZHVsZURvbmU6IGZ1bmN0aW9uKG5hbWUsIGZhaWx1cmVzLCB0b3RhbCkge30KfSk7CgppZiAoIHR5cGVvZiBkb2N1bWVudCA9PT0gInVuZGVmaW5lZCIgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gImNvbXBsZXRlIiApIHsKCWNvbmZpZy5hdXRvcnVuID0gdHJ1ZTsKfQoKYWRkRXZlbnQod2luZG93LCAibG9hZCIsIGZ1bmN0aW9uKCkgewoJUVVuaXQuYmVnaW4oKTsKCgkvLyBJbml0aWFsaXplIHRoZSBjb25maWcsIHNhdmluZyB0aGUgZXhlY3V0aW9uIHF1ZXVlCgl2YXIgb2xkY29uZmlnID0gZXh0ZW5kKHt9LCBjb25maWcpOwoJUVVuaXQuaW5pdCgpOwoJZXh0ZW5kKGNvbmZpZywgb2xkY29uZmlnKTsKCgljb25maWcuYmxvY2tpbmcgPSBmYWxzZTsKCgl2YXIgdXNlckFnZW50ID0gaWQoInF1bml0LXVzZXJBZ2VudCIpOwoJaWYgKCB1c2VyQWdlbnQgKSB7CgkJdXNlckFnZW50LmlubmVySFRNTCA9IG5hdmlnYXRvci51c2VyQWdlbnQ7Cgl9Cgl2YXIgYmFubmVyID0gaWQoInF1bml0LWhlYWRlciIpOwoJaWYgKCBiYW5uZXIgKSB7CgkJdmFyIHBhcmFtc0luZGV4ID0gbG9jYXRpb24uaHJlZi5sYXN0SW5kZXhPZihsb2NhdGlvbi5zZWFyY2gpOwoJCWlmICggcGFyYW1zSW5kZXggPiAtMSApIHsKCQkJdmFyIG1haW5QYWdlTG9jYXRpb24gPSBsb2NhdGlvbi5ocmVmLnNsaWNlKDAsIHBhcmFtc0luZGV4KTsKCQkJaWYgKCBtYWluUGFnZUxvY2F0aW9uID09IGxvY2F0aW9uLmhyZWYgKSB7CgkJCQliYW5uZXIuaW5uZXJIVE1MID0gJzxhIGhyZWY9IiI+ICcgKyBiYW5uZXIuaW5uZXJIVE1MICsgJzwvYT4gJzsKCQkJfSBlbHNlIHsKCQkJCXZhciB0ZXN0TmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChsb2NhdGlvbi5zZWFyY2guc2xpY2UoMSkpOwoJCQkJYmFubmVyLmlubmVySFRNTCA9ICc8YSBocmVmPSInICsgbWFpblBhZ2VMb2NhdGlvbiArICciPicgKyBiYW5uZXIuaW5uZXJIVE1MICsgJzwvYT4gJiM4MjUwOyA8YSBocmVmPSIiPicgKyB0ZXN0TmFtZSArICc8L2E+JzsKCQkJfQoJCX0KCX0KCgl2YXIgdG9vbGJhciA9IGlkKCJxdW5pdC10ZXN0cnVubmVyLXRvb2xiYXIiKTsKCWlmICggdG9vbGJhciApIHsKCQl0b29sYmFyLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CgoJCXZhciBmaWx0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwoJCWZpbHRlci50eXBlID0gImNoZWNrYm94IjsKCQlmaWx0ZXIuaWQgPSAicXVuaXQtZmlsdGVyLXBhc3MiOwoJCWZpbHRlci5kaXNhYmxlZCA9IHRydWU7CgkJYWRkRXZlbnQoIGZpbHRlciwgImNsaWNrIiwgZnVuY3Rpb24oKSB7CgkJCXZhciBsaSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJsaSIpOwoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBsaS5sZW5ndGg7IGkrKyApIHsKCQkJCWlmICggbGlbaV0uY2xhc3NOYW1lLmluZGV4T2YoInBhc3MiKSA+IC0xICkgewoJCQkJCWxpW2ldLnN0eWxlLmRpc3BsYXkgPSBmaWx0ZXIuY2hlY2tlZCA/ICJub25lIiA6ICIiOwoJCQkJfQoJCQl9CgkJfSk7CgkJdG9vbGJhci5hcHBlbmRDaGlsZCggZmlsdGVyICk7CgoJCXZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxhYmVsIik7CgkJbGFiZWwuc2V0QXR0cmlidXRlKCJmb3IiLCAicXVuaXQtZmlsdGVyLXBhc3MiKTsKCQlsYWJlbC5pbm5lckhUTUwgPSAiSGlkZSBwYXNzZWQgdGVzdHMiOwoJCXRvb2xiYXIuYXBwZW5kQ2hpbGQoIGxhYmVsICk7Cgl9CgoJdmFyIG1haW4gPSBpZCgnbWFpbicpIHx8IGlkKCdxdW5pdC1maXh0dXJlJyk7CglpZiAoIG1haW4gKSB7CgkJY29uZmlnLmZpeHR1cmUgPSBtYWluLmlubmVySFRNTDsKCX0KCglpZiAoY29uZmlnLmF1dG9zdGFydCkgewoJCVFVbml0LnN0YXJ0KCk7Cgl9Cn0pOwoKZnVuY3Rpb24gZG9uZSgpIHsKCWNvbmZpZy5hdXRvcnVuID0gdHJ1ZTsKCgkvLyBMb2cgdGhlIGxhc3QgbW9kdWxlIHJlc3VsdHMKCWlmICggY29uZmlnLmN1cnJlbnRNb2R1bGUgKSB7CgkJUVVuaXQubW9kdWxlRG9uZSggY29uZmlnLmN1cnJlbnRNb2R1bGUsIGNvbmZpZy5tb2R1bGVTdGF0cy5iYWQsIGNvbmZpZy5tb2R1bGVTdGF0cy5hbGwgKTsKCX0KCgl2YXIgYmFubmVyID0gaWQoInF1bml0LWJhbm5lciIpLAoJCXRlc3RzID0gaWQoInF1bml0LXRlc3RzIiksCgkJaHRtbCA9IFsnVGVzdHMgY29tcGxldGVkIGluICcsCgkJK25ldyBEYXRlIC0gY29uZmlnLnN0YXJ0ZWQsICcgbWlsbGlzZWNvbmRzLjxici8+JywKCQknPHNwYW4gY2xhc3M9InBhc3NlZCI+JywgY29uZmlnLnN0YXRzLmFsbCAtIGNvbmZpZy5zdGF0cy5iYWQsICc8L3NwYW4+IHRlc3RzIG9mIDxzcGFuIGNsYXNzPSJ0b3RhbCI+JywgY29uZmlnLnN0YXRzLmFsbCwgJzwvc3Bhbj4gcGFzc2VkLCA8c3BhbiBjbGFzcz0iZmFpbGVkIj4nLCBjb25maWcuc3RhdHMuYmFkLCc8L3NwYW4+IGZhaWxlZC4nXS5qb2luKCcnKTsKCglpZiAoIGJhbm5lciApIHsKCQliYW5uZXIuY2xhc3NOYW1lID0gKGNvbmZpZy5zdGF0cy5iYWQgPyAicXVuaXQtZmFpbCIgOiAicXVuaXQtcGFzcyIpOwoJfQoKCWlmICggdGVzdHMgKSB7CgkJdmFyIHJlc3VsdCA9IGlkKCJxdW5pdC10ZXN0cmVzdWx0Iik7CgoJCWlmICggIXJlc3VsdCApIHsKCQkJcmVzdWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgicCIpOwoJCQlyZXN1bHQuaWQgPSAicXVuaXQtdGVzdHJlc3VsdCI7CgkJCXJlc3VsdC5jbGFzc05hbWUgPSAicmVzdWx0IjsKCQkJdGVzdHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIHJlc3VsdCwgdGVzdHMubmV4dFNpYmxpbmcgKTsKCQl9CgoJCXJlc3VsdC5pbm5lckhUTUwgPSBodG1sOwoJfQoKCVFVbml0LmRvbmUoIGNvbmZpZy5zdGF0cy5iYWQsIGNvbmZpZy5zdGF0cy5hbGwgKTsKfQoKZnVuY3Rpb24gdmFsaWRUZXN0KCBuYW1lICkgewoJdmFyIGkgPSBjb25maWcuZmlsdGVycy5sZW5ndGgsCgkJcnVuID0gZmFsc2U7CgoJaWYgKCAhaSApIHsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgl3aGlsZSAoIGktLSApIHsKCQl2YXIgZmlsdGVyID0gY29uZmlnLmZpbHRlcnNbaV0sCgkJCW5vdCA9IGZpbHRlci5jaGFyQXQoMCkgPT0gJyEnOwoKCQlpZiAoIG5vdCApIHsKCQkJZmlsdGVyID0gZmlsdGVyLnNsaWNlKDEpOwoJCX0KCgkJaWYgKCBuYW1lLmluZGV4T2YoZmlsdGVyKSAhPT0gLTEgKSB7CgkJCXJldHVybiAhbm90OwoJCX0KCgkJaWYgKCBub3QgKSB7CgkJCXJ1biA9IHRydWU7CgkJfQoJfQoKCXJldHVybiBydW47Cn0KCi8vIHNvIGZhciBzdXBwb3J0cyBvbmx5IEZpcmVmb3gsIENocm9tZSBhbmQgT3BlcmEgKGJ1Z2d5KQovLyBjb3VsZCBiZSBleHRlbmRlZCBpbiB0aGUgZnV0dXJlIHRvIHVzZSBzb21ldGhpbmcgbGlrZSBodHRwczovL2dpdGh1Yi5jb20vY3Nub3Zlci9UcmFjZUtpdApmdW5jdGlvbiBzb3VyY2VGcm9tU3RhY2t0cmFjZSgpIHsKCXRyeSB7CgkJdGhyb3cgbmV3IEVycm9yKCk7Cgl9IGNhdGNoICggZSApIHsKCQlpZiAoZS5zdGFja3RyYWNlKSB7CgkJCS8vIE9wZXJhCgkJCXJldHVybiBlLnN0YWNrdHJhY2Uuc3BsaXQoIlxuIilbNl07CgkJfSBlbHNlIGlmIChlLnN0YWNrKSB7CgkJCS8vIEZpcmVmb3gsIENocm9tZQoJCQlyZXR1cm4gZS5zdGFjay5zcGxpdCgiXG4iKVs0XTsKCQl9Cgl9Cn0KCmZ1bmN0aW9uIHJlc3VsdERpc3BsYXlTdHlsZShwYXNzZWQpIHsKCXJldHVybiBwYXNzZWQgJiYgaWQoInF1bml0LWZpbHRlci1wYXNzIikgJiYgaWQoInF1bml0LWZpbHRlci1wYXNzIikuY2hlY2tlZCA/ICdub25lJyA6ICcnOwp9CgpmdW5jdGlvbiBlc2NhcGVIdG1sKHMpIHsKCWlmICghcykgewoJCXJldHVybiAiIjsKCX0KCXMgPSBzICsgIiI7CglyZXR1cm4gcy5yZXBsYWNlKC9bXCYiPD5cXF0vZywgZnVuY3Rpb24ocykgewoJCXN3aXRjaChzKSB7CgkJCWNhc2UgIiYiOiByZXR1cm4gIiZhbXA7IjsKCQkJY2FzZSAiXFwiOiByZXR1cm4gIlxcXFwiOwoJCQljYXNlICciJzogcmV0dXJuICdcIic7CgkJCWNhc2UgIjwiOiByZXR1cm4gIiZsdDsiOwoJCQljYXNlICI+IjogcmV0dXJuICImZ3Q7IjsKCQkJZGVmYXVsdDogcmV0dXJuIHM7CgkJfQoJfSk7Cn0KCmZ1bmN0aW9uIHN5bmNocm9uaXplKCBjYWxsYmFjayApIHsKCWNvbmZpZy5xdWV1ZS5wdXNoKCBjYWxsYmFjayApOwoKCWlmICggY29uZmlnLmF1dG9ydW4gJiYgIWNvbmZpZy5ibG9ja2luZyApIHsKCQlwcm9jZXNzKCk7Cgl9Cn0KCmZ1bmN0aW9uIHByb2Nlc3MoKSB7Cgl2YXIgc3RhcnQgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpOwoKCXdoaWxlICggY29uZmlnLnF1ZXVlLmxlbmd0aCAmJiAhY29uZmlnLmJsb2NraW5nICkgewoJCWlmICggY29uZmlnLnVwZGF0ZVJhdGUgPD0gMCB8fCAoKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLSBzdGFydCkgPCBjb25maWcudXBkYXRlUmF0ZSkgKSB7CgkJCWNvbmZpZy5xdWV1ZS5zaGlmdCgpKCk7CgkJfSBlbHNlIHsKCQkJd2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MsIDEzICk7CgkJCWJyZWFrOwoJCX0KCX0KICBpZiAoIWNvbmZpZy5ibG9ja2luZyAmJiAhY29uZmlnLnF1ZXVlLmxlbmd0aCkgewogICAgZG9uZSgpOwogIH0KfQoKZnVuY3Rpb24gc2F2ZUdsb2JhbCgpIHsKCWNvbmZpZy5wb2xsdXRpb24gPSBbXTsKCglpZiAoIGNvbmZpZy5ub2dsb2JhbHMgKSB7CgkJZm9yICggdmFyIGtleSBpbiB3aW5kb3cgKSB7CgkJCWNvbmZpZy5wb2xsdXRpb24ucHVzaCgga2V5ICk7CgkJfQoJfQp9CgpmdW5jdGlvbiBjaGVja1BvbGx1dGlvbiggbmFtZSApIHsKCXZhciBvbGQgPSBjb25maWcucG9sbHV0aW9uOwoJc2F2ZUdsb2JhbCgpOwoKCXZhciBuZXdHbG9iYWxzID0gZGlmZiggb2xkLCBjb25maWcucG9sbHV0aW9uICk7CglpZiAoIG5ld0dsb2JhbHMubGVuZ3RoID4gMCApIHsKCQlvayggZmFsc2UsICJJbnRyb2R1Y2VkIGdsb2JhbCB2YXJpYWJsZShzKTogIiArIG5ld0dsb2JhbHMuam9pbigiLCAiKSApOwoJCWNvbmZpZy5jdXJyZW50LmV4cGVjdGVkKys7Cgl9CgoJdmFyIGRlbGV0ZWRHbG9iYWxzID0gZGlmZiggY29uZmlnLnBvbGx1dGlvbiwgb2xkICk7CglpZiAoIGRlbGV0ZWRHbG9iYWxzLmxlbmd0aCA+IDAgKSB7CgkJb2soIGZhbHNlLCAiRGVsZXRlZCBnbG9iYWwgdmFyaWFibGUocyk6ICIgKyBkZWxldGVkR2xvYmFscy5qb2luKCIsICIpICk7CgkJY29uZmlnLmN1cnJlbnQuZXhwZWN0ZWQrKzsKCX0KfQoKLy8gcmV0dXJucyBhIG5ldyBBcnJheSB3aXRoIHRoZSBlbGVtZW50cyB0aGF0IGFyZSBpbiBhIGJ1dCBub3QgaW4gYgpmdW5jdGlvbiBkaWZmKCBhLCBiICkgewoJdmFyIHJlc3VsdCA9IGEuc2xpY2UoKTsKCWZvciAoIHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKyApIHsKCQlmb3IgKCB2YXIgaiA9IDA7IGogPCBiLmxlbmd0aDsgaisrICkgewoJCQlpZiAoIHJlc3VsdFtpXSA9PT0gYltqXSApIHsKCQkJCXJlc3VsdC5zcGxpY2UoaSwgMSk7CgkJCQlpLS07CgkJCQlicmVhazsKCQkJfQoJCX0KCX0KCXJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIGZhaWwobWVzc2FnZSwgZXhjZXB0aW9uLCBjYWxsYmFjaykgewoJaWYgKCB0eXBlb2YgY29uc29sZSAhPT0gInVuZGVmaW5lZCIgJiYgY29uc29sZS5lcnJvciAmJiBjb25zb2xlLndhcm4gKSB7CgkJY29uc29sZS5lcnJvcihtZXNzYWdlKTsKCQljb25zb2xlLmVycm9yKGV4Y2VwdGlvbik7CgkJY29uc29sZS53YXJuKGNhbGxiYWNrLnRvU3RyaW5nKCkpOwoKCX0gZWxzZSBpZiAoIHdpbmRvdy5vcGVyYSAmJiBvcGVyYS5wb3N0RXJyb3IgKSB7CgkJb3BlcmEucG9zdEVycm9yKG1lc3NhZ2UsIGV4Y2VwdGlvbiwgY2FsbGJhY2sudG9TdHJpbmcpOwoJfQp9CgpmdW5jdGlvbiBleHRlbmQoYSwgYikgewoJZm9yICggdmFyIHByb3AgaW4gYiApIHsKCQlhW3Byb3BdID0gYltwcm9wXTsKCX0KCglyZXR1cm4gYTsKfQoKZnVuY3Rpb24gYWRkRXZlbnQoZWxlbSwgdHlwZSwgZm4pIHsKCWlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkgewoJCWVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZm4sIGZhbHNlICk7Cgl9IGVsc2UgaWYgKCBlbGVtLmF0dGFjaEV2ZW50ICkgewoJCWVsZW0uYXR0YWNoRXZlbnQoICJvbiIgKyB0eXBlLCBmbiApOwoJfSBlbHNlIHsKCQlmbigpOwoJfQp9CgpmdW5jdGlvbiBpZChuYW1lKSB7CglyZXR1cm4gISEodHlwZW9mIGRvY3VtZW50ICE9PSAidW5kZWZpbmVkIiAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCkgJiYKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbmFtZSApOwp9CgovLyBUZXN0IGZvciBlcXVhbGl0eSBhbnkgSmF2YVNjcmlwdCB0eXBlLgovLyBEaXNjdXNzaW9ucyBhbmQgcmVmZXJlbmNlOiBodHRwOi8vcGhpbHJhdGhlLmNvbS9hcnRpY2xlcy9lcXVpdgovLyBUZXN0IHN1aXRlczogaHR0cDovL3BoaWxyYXRoZS5jb20vdGVzdHMvZXF1aXYKLy8gQXV0aG9yOiBQaGlsaXBwZSBSYXRow6kgPHByYXRoZUBnbWFpbC5jb20+ClFVbml0LmVxdWl2ID0gZnVuY3Rpb24gKCkgewoKICAgIHZhciBpbm5lckVxdWl2OyAvLyB0aGUgcmVhbCBlcXVpdiBmdW5jdGlvbgogICAgdmFyIGNhbGxlcnMgPSBbXTsgLy8gc3RhY2sgdG8gZGVjaWRlIGJldHdlZW4gc2tpcC9hYm9ydCBmdW5jdGlvbnMKICAgIHZhciBwYXJlbnRzID0gW107IC8vIHN0YWNrIHRvIGF2b2lkaW5nIGxvb3BzIGZyb20gY2lyY3VsYXIgcmVmZXJlbmNpbmcKCiAgICAvLyBDYWxsIHRoZSBvIHJlbGF0ZWQgY2FsbGJhY2sgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzLgogICAgZnVuY3Rpb24gYmluZENhbGxiYWNrcyhvLCBjYWxsYmFja3MsIGFyZ3MpIHsKICAgICAgICB2YXIgcHJvcCA9IFFVbml0Lm9iamVjdFR5cGUobyk7CiAgICAgICAgaWYgKHByb3ApIHsKICAgICAgICAgICAgaWYgKFFVbml0Lm9iamVjdFR5cGUoY2FsbGJhY2tzW3Byb3BdKSA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrc1twcm9wXS5hcHBseShjYWxsYmFja3MsIGFyZ3MpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrc1twcm9wXTsgLy8gb3IgdW5kZWZpbmVkCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgdmFyIGNhbGxiYWNrcyA9IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgLy8gZm9yIHN0cmluZywgYm9vbGVhbiwgbnVtYmVyIGFuZCBudWxsCiAgICAgICAgZnVuY3Rpb24gdXNlU3RyaWN0RXF1YWxpdHkoYiwgYSkgewogICAgICAgICAgICBpZiAoYiBpbnN0YW5jZW9mIGEuY29uc3RydWN0b3IgfHwgYSBpbnN0YW5jZW9mIGIuY29uc3RydWN0b3IpIHsKICAgICAgICAgICAgICAgIC8vIHRvIGNhdGNoIHNob3J0IGFubm90YWlvbiBWUyAnbmV3JyBhbm5vdGF0aW9uIG9mIGEgZGVjbGFyYXRpb24KICAgICAgICAgICAgICAgIC8vIGUuZy4gdmFyIGkgPSAxOwogICAgICAgICAgICAgICAgLy8gICAgICB2YXIgaiA9IG5ldyBOdW1iZXIoMSk7CiAgICAgICAgICAgICAgICByZXR1cm4gYSA9PSBiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGEgPT09IGI7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICJzdHJpbmciOiB1c2VTdHJpY3RFcXVhbGl0eSwKICAgICAgICAgICAgImJvb2xlYW4iOiB1c2VTdHJpY3RFcXVhbGl0eSwKICAgICAgICAgICAgIm51bWJlciI6IHVzZVN0cmljdEVxdWFsaXR5LAogICAgICAgICAgICAibnVsbCI6IHVzZVN0cmljdEVxdWFsaXR5LAogICAgICAgICAgICAidW5kZWZpbmVkIjogdXNlU3RyaWN0RXF1YWxpdHksCgogICAgICAgICAgICAibmFuIjogZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBpc05hTihiKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICJkYXRlIjogZnVuY3Rpb24gKGIsIGEpIHsKICAgICAgICAgICAgICAgIHJldHVybiBRVW5pdC5vYmplY3RUeXBlKGIpID09PSAiZGF0ZSIgJiYgYS52YWx1ZU9mKCkgPT09IGIudmFsdWVPZigpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgInJlZ2V4cCI6IGZ1bmN0aW9uIChiLCBhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gUVVuaXQub2JqZWN0VHlwZShiKSA9PT0gInJlZ2V4cCIgJiYKICAgICAgICAgICAgICAgICAgICBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgLy8gdGhlIHJlZ2V4IGl0c2VsZgogICAgICAgICAgICAgICAgICAgIGEuZ2xvYmFsID09PSBiLmdsb2JhbCAmJiAvLyBhbmQgaXRzIG1vZGlmZXJzIChnbWkpIC4uLgogICAgICAgICAgICAgICAgICAgIGEuaWdub3JlQ2FzZSA9PT0gYi5pZ25vcmVDYXNlICYmCiAgICAgICAgICAgICAgICAgICAgYS5tdWx0aWxpbmUgPT09IGIubXVsdGlsaW5lOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gLSBza2lwIHdoZW4gdGhlIHByb3BlcnR5IGlzIGEgbWV0aG9kIG9mIGFuIGluc3RhbmNlIChPT1ApCiAgICAgICAgICAgIC8vIC0gYWJvcnQgb3RoZXJ3aXNlLAogICAgICAgICAgICAvLyAgIGluaXRpYWwgPT09IHdvdWxkIGhhdmUgY2F0Y2ggaWRlbnRpY2FsIHJlZmVyZW5jZXMgYW55d2F5CiAgICAgICAgICAgICJmdW5jdGlvbiI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBjYWxsZXIgPSBjYWxsZXJzW2NhbGxlcnMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGVyICE9PSBPYmplY3QgJiYKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNhbGxlciAhPT0gInVuZGVmaW5lZCI7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAiYXJyYXkiOiBmdW5jdGlvbiAoYiwgYSkgewogICAgICAgICAgICAgICAgdmFyIGksIGosIGxvb3A7CiAgICAgICAgICAgICAgICB2YXIgbGVuOwoKICAgICAgICAgICAgICAgIC8vIGIgY291bGQgYmUgYW4gb2JqZWN0IGxpdGVyYWwgaGVyZQogICAgICAgICAgICAgICAgaWYgKCAhIChRVW5pdC5vYmplY3RUeXBlKGIpID09PSAiYXJyYXkiKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBsZW4gPSBhLmxlbmd0aDsKICAgICAgICAgICAgICAgIGlmIChsZW4gIT09IGIubGVuZ3RoKSB7IC8vIHNhZmUgYW5kIGZhc3RlcgogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvL3RyYWNrIHJlZmVyZW5jZSB0byBhdm9pZCBjaXJjdWxhciByZWZlcmVuY2VzCiAgICAgICAgICAgICAgICBwYXJlbnRzLnB1c2goYSk7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBsb29wID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgZm9yKGo9MDtqPHBhcmVudHMubGVuZ3RoO2orKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhcmVudHNbal0gPT09IGFbaV0pewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcCA9IHRydWU7Ly9kb250IHJld2FsayBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICghbG9vcCAmJiAhIGlubmVyRXF1aXYoYVtpXSwgYltpXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50cy5wb3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcmVudHMucG9wKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICJvYmplY3QiOiBmdW5jdGlvbiAoYiwgYSkgewogICAgICAgICAgICAgICAgdmFyIGksIGosIGxvb3A7CiAgICAgICAgICAgICAgICB2YXIgZXEgPSB0cnVlOyAvLyB1bmxlc3Mgd2UgY2FuIHByb292ZSBpdAogICAgICAgICAgICAgICAgdmFyIGFQcm9wZXJ0aWVzID0gW10sIGJQcm9wZXJ0aWVzID0gW107IC8vIGNvbGxlY3Rpb24gb2Ygc3RyaW5ncwoKICAgICAgICAgICAgICAgIC8vIGNvbXBhcmluZyBjb25zdHJ1Y3RvcnMgaXMgbW9yZSBzdHJpY3QgdGhhbiB1c2luZyBpbnN0YW5jZW9mCiAgICAgICAgICAgICAgICBpZiAoIGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gc3RhY2sgY29uc3RydWN0b3IgYmVmb3JlIHRyYXZlcnNpbmcgcHJvcGVydGllcwogICAgICAgICAgICAgICAgY2FsbGVycy5wdXNoKGEuY29uc3RydWN0b3IpOwogICAgICAgICAgICAgICAgLy90cmFjayByZWZlcmVuY2UgdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcwogICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGEpOwoKICAgICAgICAgICAgICAgIGZvciAoaSBpbiBhKSB7IC8vIGJlIHN0cmljdDogZG9uJ3QgZW5zdXJlcyBoYXNPd25Qcm9wZXJ0eSBhbmQgZ28gZGVlcAogICAgICAgICAgICAgICAgICAgIGxvb3AgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBmb3Ioaj0wO2o8cGFyZW50cy5sZW5ndGg7aisrKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYocGFyZW50c1tqXSA9PT0gYVtpXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3AgPSB0cnVlOyAvL2Rvbid0IGdvIGRvd24gdGhlIHNhbWUgcGF0aCB0d2ljZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBhUHJvcGVydGllcy5wdXNoKGkpOyAvLyBjb2xsZWN0IGEncyBwcm9wZXJ0aWVzCgogICAgICAgICAgICAgICAgICAgIGlmICghbG9vcCAmJiAhIGlubmVyRXF1aXYoYVtpXSwgYltpXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXEgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNhbGxlcnMucG9wKCk7IC8vIHVuc3RhY2ssIHdlIGFyZSBkb25lCiAgICAgICAgICAgICAgICBwYXJlbnRzLnBvcCgpOwoKICAgICAgICAgICAgICAgIGZvciAoaSBpbiBiKSB7CiAgICAgICAgICAgICAgICAgICAgYlByb3BlcnRpZXMucHVzaChpKTsgLy8gY29sbGVjdCBiJ3MgcHJvcGVydGllcwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIEVuc3VyZXMgaWRlbnRpY2FsIHByb3BlcnRpZXMgbmFtZQogICAgICAgICAgICAgICAgcmV0dXJuIGVxICYmIGlubmVyRXF1aXYoYVByb3BlcnRpZXMuc29ydCgpLCBiUHJvcGVydGllcy5zb3J0KCkpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH0oKTsKCiAgICBpbm5lckVxdWl2ID0gZnVuY3Rpb24gKCkgeyAvLyBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMKICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpOwogICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIGVuZCB0cmFuc2l0aW9uCiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgIGlmIChhID09PSBiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gY2F0Y2ggdGhlIG1vc3QgeW91IGNhbgogICAgICAgICAgICB9IGVsc2UgaWYgKGEgPT09IG51bGwgfHwgYiA9PT0gbnVsbCB8fCB0eXBlb2YgYSA9PT0gInVuZGVmaW5lZCIgfHwgdHlwZW9mIGIgPT09ICJ1bmRlZmluZWQiIHx8IFFVbml0Lm9iamVjdFR5cGUoYSkgIT09IFFVbml0Lm9iamVjdFR5cGUoYikpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gZG9uJ3QgbG9zZSB0aW1lIHdpdGggZXJyb3IgcHJvbmUgY2FzZXMKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBiaW5kQ2FsbGJhY2tzKGEsIGNhbGxiYWNrcywgW2IsIGFdKTsKICAgICAgICAgICAgfQoKICAgICAgICAvLyBhcHBseSB0cmFuc2l0aW9uIHdpdGggKDEuLm4pIGFyZ3VtZW50cwogICAgICAgIH0pKGFyZ3NbMF0sIGFyZ3NbMV0pICYmIGFyZ3VtZW50cy5jYWxsZWUuYXBwbHkodGhpcywgYXJncy5zcGxpY2UoMSwgYXJncy5sZW5ndGggLTEpKTsKICAgIH07CgogICAgcmV0dXJuIGlubmVyRXF1aXY7Cgp9KCk7CgovKioKICoganNEdW1wCiAqIENvcHlyaWdodCAoYykgMjAwOCBBcmllbCBGbGVzbGVyIC0gYWZsZXNsZXIoYXQpZ21haWwoZG90KWNvbSB8IGh0dHA6Ly9mbGVzbGVyLmJsb2dzcG90LmNvbQogKiBMaWNlbnNlZCB1bmRlciBCU0QgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvYnNkLWxpY2Vuc2UucGhwKQogKiBEYXRlOiA1LzE1LzIwMDgKICogQHByb2plY3REZXNjcmlwdGlvbiBBZHZhbmNlZCBhbmQgZXh0ZW5zaWJsZSBkYXRhIGR1bXBpbmcgZm9yIEphdmFzY3JpcHQuCiAqIEB2ZXJzaW9uIDEuMC4wCiAqIEBhdXRob3IgQXJpZWwgRmxlc2xlcgogKiBAbGluayB7aHR0cDovL2ZsZXNsZXIuYmxvZ3Nwb3QuY29tLzIwMDgvMDUvanNkdW1wLXByZXR0eS1kdW1wLW9mLWFueS1qYXZhc2NyaXB0Lmh0bWx9CiAqLwpRVW5pdC5qc0R1bXAgPSAoZnVuY3Rpb24oKSB7CglmdW5jdGlvbiBxdW90ZSggc3RyICkgewoJCXJldHVybiAnIicgKyBzdHIudG9TdHJpbmcoKS5yZXBsYWNlKC8iL2csICdcXCInKSArICciJzsKCX07CglmdW5jdGlvbiBsaXRlcmFsKCBvICkgewoJCXJldHVybiBvICsgJyc7Cgl9OwoJZnVuY3Rpb24gam9pbiggcHJlLCBhcnIsIHBvc3QgKSB7CgkJdmFyIHMgPSBqc0R1bXAuc2VwYXJhdG9yKCksCgkJCWJhc2UgPSBqc0R1bXAuaW5kZW50KCksCgkJCWlubmVyID0ganNEdW1wLmluZGVudCgxKTsKCQlpZiAoIGFyci5qb2luICkKCQkJYXJyID0gYXJyLmpvaW4oICcsJyArIHMgKyBpbm5lciApOwoJCWlmICggIWFyciApCgkJCXJldHVybiBwcmUgKyBwb3N0OwoJCXJldHVybiBbIHByZSwgaW5uZXIgKyBhcnIsIGJhc2UgKyBwb3N0IF0uam9pbihzKTsKCX07CglmdW5jdGlvbiBhcnJheSggYXJyICkgewoJCXZhciBpID0gYXJyLmxlbmd0aCwJcmV0ID0gQXJyYXkoaSk7CgkJdGhpcy51cCgpOwoJCXdoaWxlICggaS0tICkKCQkJcmV0W2ldID0gdGhpcy5wYXJzZSggYXJyW2ldICk7CgkJdGhpcy5kb3duKCk7CgkJcmV0dXJuIGpvaW4oICdbJywgcmV0LCAnXScgKTsKCX07CgoJdmFyIHJlTmFtZSA9IC9eZnVuY3Rpb24gKFx3KykvOwoKCXZhciBqc0R1bXAgPSB7CgkJcGFyc2U6ZnVuY3Rpb24oIG9iaiwgdHlwZSApIHsgLy90eXBlIGlzIHVzZWQgbW9zdGx5IGludGVybmFsbHksIHlvdSBjYW4gZml4IGEgKGN1c3RvbSl0eXBlIGluIGFkdmFuY2UKCQkJdmFyCXBhcnNlciA9IHRoaXMucGFyc2Vyc1sgdHlwZSB8fCB0aGlzLnR5cGVPZihvYmopIF07CgkJCXR5cGUgPSB0eXBlb2YgcGFyc2VyOwoKCQkJcmV0dXJuIHR5cGUgPT0gJ2Z1bmN0aW9uJyA/IHBhcnNlci5jYWxsKCB0aGlzLCBvYmogKSA6CgkJCQkgICB0eXBlID09ICdzdHJpbmcnID8gcGFyc2VyIDoKCQkJCSAgIHRoaXMucGFyc2Vycy5lcnJvcjsKCQl9LAoJCXR5cGVPZjpmdW5jdGlvbiggb2JqICkgewoJCQl2YXIgdHlwZTsKCQkJaWYgKCBvYmogPT09IG51bGwgKSB7CgkJCQl0eXBlID0gIm51bGwiOwoJCQl9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICJ1bmRlZmluZWQiKSB7CgkJCQl0eXBlID0gInVuZGVmaW5lZCI7CgkJCX0gZWxzZSBpZiAoUVVuaXQuaXMoIlJlZ0V4cCIsIG9iaikpIHsKCQkJCXR5cGUgPSAicmVnZXhwIjsKCQkJfSBlbHNlIGlmIChRVW5pdC5pcygiRGF0ZSIsIG9iaikpIHsKCQkJCXR5cGUgPSAiZGF0ZSI7CgkJCX0gZWxzZSBpZiAoUVVuaXQuaXMoIkZ1bmN0aW9uIiwgb2JqKSkgewoJCQkJdHlwZSA9ICJmdW5jdGlvbiI7CgkJCX0gZWxzZSBpZiAodHlwZW9mIG9iai5zZXRJbnRlcnZhbCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvYmouZG9jdW1lbnQgIT09ICJ1bmRlZmluZWQiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgPT09ICJ1bmRlZmluZWQiKSB7CgkJCQl0eXBlID0gIndpbmRvdyI7CgkJCX0gZWxzZSBpZiAob2JqLm5vZGVUeXBlID09PSA5KSB7CgkJCQl0eXBlID0gImRvY3VtZW50IjsKCQkJfSBlbHNlIGlmIChvYmoubm9kZVR5cGUpIHsKCQkJCXR5cGUgPSAibm9kZSI7CgkJCX0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gIm9iamVjdCIgJiYgdHlwZW9mIG9iai5sZW5ndGggPT09ICJudW1iZXIiICYmIG9iai5sZW5ndGggPj0gMCkgewoJCQkJdHlwZSA9ICJhcnJheSI7CgkJCX0gZWxzZSB7CgkJCQl0eXBlID0gdHlwZW9mIG9iajsKCQkJfQoJCQlyZXR1cm4gdHlwZTsKCQl9LAoJCXNlcGFyYXRvcjpmdW5jdGlvbigpIHsKCQkJcmV0dXJuIHRoaXMubXVsdGlsaW5lID8JdGhpcy5IVE1MID8gJzxiciAvPicgOiAnXG4nIDogdGhpcy5IVE1MID8gJyZuYnNwOycgOiAnICc7CgkJfSwKCQlpbmRlbnQ6ZnVuY3Rpb24oIGV4dHJhICkgey8vIGV4dHJhIGNhbiBiZSBhIG51bWJlciwgc2hvcnRjdXQgZm9yIGluY3JlYXNpbmctY2FsbGluZy1kZWNyZWFzaW5nCgkJCWlmICggIXRoaXMubXVsdGlsaW5lICkKCQkJCXJldHVybiAnJzsKCQkJdmFyIGNociA9IHRoaXMuaW5kZW50Q2hhcjsKCQkJaWYgKCB0aGlzLkhUTUwgKQoJCQkJY2hyID0gY2hyLnJlcGxhY2UoL1x0L2csJyAgICcpLnJlcGxhY2UoLyAvZywnJm5ic3A7Jyk7CgkJCXJldHVybiBBcnJheSggdGhpcy5fZGVwdGhfICsgKGV4dHJhfHwwKSApLmpvaW4oY2hyKTsKCQl9LAoJCXVwOmZ1bmN0aW9uKCBhICkgewoJCQl0aGlzLl9kZXB0aF8gKz0gYSB8fCAxOwoJCX0sCgkJZG93bjpmdW5jdGlvbiggYSApIHsKCQkJdGhpcy5fZGVwdGhfIC09IGEgfHwgMTsKCQl9LAoJCXNldFBhcnNlcjpmdW5jdGlvbiggbmFtZSwgcGFyc2VyICkgewoJCQl0aGlzLnBhcnNlcnNbbmFtZV0gPSBwYXJzZXI7CgkJfSwKCQkvLyBUaGUgbmV4dCAzIGFyZSBleHBvc2VkIHNvIHlvdSBjYW4gdXNlIHRoZW0KCQlxdW90ZTpxdW90ZSwKCQlsaXRlcmFsOmxpdGVyYWwsCgkJam9pbjpqb2luLAoJCS8vCgkJX2RlcHRoXzogMSwKCQkvLyBUaGlzIGlzIHRoZSBsaXN0IG9mIHBhcnNlcnMsIHRvIG1vZGlmeSB0aGVtLCB1c2UganNEdW1wLnNldFBhcnNlcgoJCXBhcnNlcnM6ewoJCQl3aW5kb3c6ICdbV2luZG93XScsCgkJCWRvY3VtZW50OiAnW0RvY3VtZW50XScsCgkJCWVycm9yOidbRVJST1JdJywgLy93aGVuIG5vIHBhcnNlciBpcyBmb3VuZCwgc2hvdWxkbid0IGhhcHBlbgoJCQl1bmtub3duOiAnW1Vua25vd25dJywKCQkJJ251bGwnOidudWxsJywKCQkJdW5kZWZpbmVkOid1bmRlZmluZWQnLAoJCQknZnVuY3Rpb24nOmZ1bmN0aW9uKCBmbiApIHsKCQkJCXZhciByZXQgPSAnZnVuY3Rpb24nLAoJCQkJCW5hbWUgPSAnbmFtZScgaW4gZm4gPyBmbi5uYW1lIDogKHJlTmFtZS5leGVjKGZuKXx8W10pWzFdOy8vZnVuY3Rpb25zIG5ldmVyIGhhdmUgbmFtZSBpbiBJRQoJCQkJaWYgKCBuYW1lICkKCQkJCQlyZXQgKz0gJyAnICsgbmFtZTsKCQkJCXJldCArPSAnKCc7CgoJCQkJcmV0ID0gWyByZXQsIFFVbml0LmpzRHVtcC5wYXJzZSggZm4sICdmdW5jdGlvbkFyZ3MnICksICcpeyddLmpvaW4oJycpOwoJCQkJcmV0dXJuIGpvaW4oIHJldCwgUVVuaXQuanNEdW1wLnBhcnNlKGZuLCdmdW5jdGlvbkNvZGUnKSwgJ30nICk7CgkJCX0sCgkJCWFycmF5OiBhcnJheSwKCQkJbm9kZWxpc3Q6IGFycmF5LAoJCQlhcmd1bWVudHM6IGFycmF5LAoJCQlvYmplY3Q6ZnVuY3Rpb24oIG1hcCApIHsKCQkJCXZhciByZXQgPSBbIF07CgkJCQlRVW5pdC5qc0R1bXAudXAoKTsKCQkJCWZvciAoIHZhciBrZXkgaW4gbWFwICkKCQkJCQlyZXQucHVzaCggUVVuaXQuanNEdW1wLnBhcnNlKGtleSwna2V5JykgKyAnOiAnICsgUVVuaXQuanNEdW1wLnBhcnNlKG1hcFtrZXldKSApOwoJCQkJUVVuaXQuanNEdW1wLmRvd24oKTsKCQkJCXJldHVybiBqb2luKCAneycsIHJldCwgJ30nICk7CgkJCX0sCgkJCW5vZGU6ZnVuY3Rpb24oIG5vZGUgKSB7CgkJCQl2YXIgb3BlbiA9IFFVbml0LmpzRHVtcC5IVE1MID8gJyZsdDsnIDogJzwnLAoJCQkJCWNsb3NlID0gUVVuaXQuanNEdW1wLkhUTUwgPyAnJmd0OycgOiAnPic7CgoJCQkJdmFyIHRhZyA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwKCQkJCQlyZXQgPSBvcGVuICsgdGFnOwoKCQkJCWZvciAoIHZhciBhIGluIFFVbml0LmpzRHVtcC5ET01BdHRycyApIHsKCQkJCQl2YXIgdmFsID0gbm9kZVtRVW5pdC5qc0R1bXAuRE9NQXR0cnNbYV1dOwoJCQkJCWlmICggdmFsICkKCQkJCQkJcmV0ICs9ICcgJyArIGEgKyAnPScgKyBRVW5pdC5qc0R1bXAucGFyc2UoIHZhbCwgJ2F0dHJpYnV0ZScgKTsKCQkJCX0KCQkJCXJldHVybiByZXQgKyBjbG9zZSArIG9wZW4gKyAnLycgKyB0YWcgKyBjbG9zZTsKCQkJfSwKCQkJZnVuY3Rpb25BcmdzOmZ1bmN0aW9uKCBmbiApIHsvL2Z1bmN0aW9uIGNhbGxzIGl0IGludGVybmFsbHksIGl0J3MgdGhlIGFyZ3VtZW50cyBwYXJ0IG9mIHRoZSBmdW5jdGlvbgoJCQkJdmFyIGwgPSBmbi5sZW5ndGg7CgkJCQlpZiAoICFsICkgcmV0dXJuICcnOwoKCQkJCXZhciBhcmdzID0gQXJyYXkobCk7CgkJCQl3aGlsZSAoIGwtLSApCgkJCQkJYXJnc1tsXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoOTcrbCk7Ly85NyBpcyAnYScKCQkJCXJldHVybiAnICcgKyBhcmdzLmpvaW4oJywgJykgKyAnICc7CgkJCX0sCgkJCWtleTpxdW90ZSwgLy9vYmplY3QgY2FsbHMgaXQgaW50ZXJuYWxseSwgdGhlIGtleSBwYXJ0IG9mIGFuIGl0ZW0gaW4gYSBtYXAKCQkJZnVuY3Rpb25Db2RlOidbY29kZV0nLCAvL2Z1bmN0aW9uIGNhbGxzIGl0IGludGVybmFsbHksIGl0J3MgdGhlIGNvbnRlbnQgb2YgdGhlIGZ1bmN0aW9uCgkJCWF0dHJpYnV0ZTpxdW90ZSwgLy9ub2RlIGNhbGxzIGl0IGludGVybmFsbHksIGl0J3MgYW4gaHRtbCBhdHRyaWJ1dGUgdmFsdWUKCQkJc3RyaW5nOnF1b3RlLAoJCQlkYXRlOnF1b3RlLAoJCQlyZWdleHA6bGl0ZXJhbCwgLy9yZWdleAoJCQludW1iZXI6bGl0ZXJhbCwKCQkJJ2Jvb2xlYW4nOmxpdGVyYWwKCQl9LAoJCURPTUF0dHJzOnsvL2F0dHJpYnV0ZXMgdG8gZHVtcCBmcm9tIG5vZGVzLCBuYW1lPT5yZWFsTmFtZQoJCQlpZDonaWQnLAoJCQluYW1lOiduYW1lJywKCQkJJ2NsYXNzJzonY2xhc3NOYW1lJwoJCX0sCgkJSFRNTDpmYWxzZSwvL2lmIHRydWUsIGVudGl0aWVzIGFyZSBlc2NhcGVkICggPCwgPiwgXHQsIHNwYWNlIGFuZCBcbiApCgkJaW5kZW50Q2hhcjonICAnLC8vaW5kZW50YXRpb24gdW5pdAoJCW11bHRpbGluZTp0cnVlIC8vaWYgdHJ1ZSwgaXRlbXMgaW4gYSBjb2xsZWN0aW9uLCBhcmUgc2VwYXJhdGVkIGJ5IGEgXG4sIGVsc2UganVzdCBhIHNwYWNlLgoJfTsKCglyZXR1cm4ganNEdW1wOwp9KSgpOwoKLy8gZnJvbSBTaXp6bGUuanMKZnVuY3Rpb24gZ2V0VGV4dCggZWxlbXMgKSB7Cgl2YXIgcmV0ID0gIiIsIGVsZW07CgoJZm9yICggdmFyIGkgPSAwOyBlbGVtc1tpXTsgaSsrICkgewoJCWVsZW0gPSBlbGVtc1tpXTsKCgkJLy8gR2V0IHRoZSB0ZXh0IGZyb20gdGV4dCBub2RlcyBhbmQgQ0RBVEEgbm9kZXMKCQlpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gNCApIHsKCQkJcmV0ICs9IGVsZW0ubm9kZVZhbHVlOwoKCQkvLyBUcmF2ZXJzZSBldmVyeXRoaW5nIGVsc2UsIGV4Y2VwdCBjb21tZW50IG5vZGVzCgkJfSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSAhPT0gOCApIHsKCQkJcmV0ICs9IGdldFRleHQoIGVsZW0uY2hpbGROb2RlcyApOwoJCX0KCX0KCglyZXR1cm4gcmV0Owp9OwoKLyoKICogSmF2YXNjcmlwdCBEaWZmIEFsZ29yaXRobQogKiAgQnkgSm9obiBSZXNpZyAoaHR0cDovL2Vqb2huLm9yZy8pCiAqICBNb2RpZmllZCBieSBDaHUgQWxhbiAic3ByaXRlIgogKgogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqCiAqIE1vcmUgSW5mbzoKICogIGh0dHA6Ly9lam9obi5vcmcvcHJvamVjdHMvamF2YXNjcmlwdC1kaWZmLWFsZ29yaXRobS8KICoKICogVXNhZ2U6IFFVbml0LmRpZmYoZXhwZWN0ZWQsIGFjdHVhbCkKICoKICogUVVuaXQuZGlmZigidGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciIsICJ0aGUgcXVpY2sgZm94IGp1bXBzIG92ZXIiKSA9PSAidGhlICBxdWljayA8ZGVsPmJyb3duIDwvZGVsPiBmb3ggPGRlbD5qdW1wZWQgPC9kZWw+PGlucz5qdW1wcyA8L2lucz4gb3ZlciIKICovClFVbml0LmRpZmYgPSAoZnVuY3Rpb24oKSB7CglmdW5jdGlvbiBkaWZmKG8sIG4pewoJCXZhciBucyA9IG5ldyBPYmplY3QoKTsKCQl2YXIgb3MgPSBuZXcgT2JqZWN0KCk7CgoJCWZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKykgewoJCQlpZiAobnNbbltpXV0gPT0gbnVsbCkKCQkJCW5zW25baV1dID0gewoJCQkJCXJvd3M6IG5ldyBBcnJheSgpLAoJCQkJCW86IG51bGwKCQkJCX07CgkJCW5zW25baV1dLnJvd3MucHVzaChpKTsKCQl9CgoJCWZvciAodmFyIGkgPSAwOyBpIDwgby5sZW5ndGg7IGkrKykgewoJCQlpZiAob3Nbb1tpXV0gPT0gbnVsbCkKCQkJCW9zW29baV1dID0gewoJCQkJCXJvd3M6IG5ldyBBcnJheSgpLAoJCQkJCW46IG51bGwKCQkJCX07CgkJCW9zW29baV1dLnJvd3MucHVzaChpKTsKCQl9CgoJCWZvciAodmFyIGkgaW4gbnMpIHsKCQkJaWYgKG5zW2ldLnJvd3MubGVuZ3RoID09IDEgJiYgdHlwZW9mKG9zW2ldKSAhPSAidW5kZWZpbmVkIiAmJiBvc1tpXS5yb3dzLmxlbmd0aCA9PSAxKSB7CgkJCQluW25zW2ldLnJvd3NbMF1dID0gewoJCQkJCXRleHQ6IG5bbnNbaV0ucm93c1swXV0sCgkJCQkJcm93OiBvc1tpXS5yb3dzWzBdCgkJCQl9OwoJCQkJb1tvc1tpXS5yb3dzWzBdXSA9IHsKCQkJCQl0ZXh0OiBvW29zW2ldLnJvd3NbMF1dLAoJCQkJCXJvdzogbnNbaV0ucm93c1swXQoJCQkJfTsKCQkJfQoJCX0KCgkJZm9yICh2YXIgaSA9IDA7IGkgPCBuLmxlbmd0aCAtIDE7IGkrKykgewoJCQlpZiAobltpXS50ZXh0ICE9IG51bGwgJiYgbltpICsgMV0udGV4dCA9PSBudWxsICYmIG5baV0ucm93ICsgMSA8IG8ubGVuZ3RoICYmIG9bbltpXS5yb3cgKyAxXS50ZXh0ID09IG51bGwgJiYKCQkJbltpICsgMV0gPT0gb1tuW2ldLnJvdyArIDFdKSB7CgkJCQluW2kgKyAxXSA9IHsKCQkJCQl0ZXh0OiBuW2kgKyAxXSwKCQkJCQlyb3c6IG5baV0ucm93ICsgMQoJCQkJfTsKCQkJCW9bbltpXS5yb3cgKyAxXSA9IHsKCQkJCQl0ZXh0OiBvW25baV0ucm93ICsgMV0sCgkJCQkJcm93OiBpICsgMQoJCQkJfTsKCQkJfQoJCX0KCgkJZm9yICh2YXIgaSA9IG4ubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkgewoJCQlpZiAobltpXS50ZXh0ICE9IG51bGwgJiYgbltpIC0gMV0udGV4dCA9PSBudWxsICYmIG5baV0ucm93ID4gMCAmJiBvW25baV0ucm93IC0gMV0udGV4dCA9PSBudWxsICYmCgkJCW5baSAtIDFdID09IG9bbltpXS5yb3cgLSAxXSkgewoJCQkJbltpIC0gMV0gPSB7CgkJCQkJdGV4dDogbltpIC0gMV0sCgkJCQkJcm93OiBuW2ldLnJvdyAtIDEKCQkJCX07CgkJCQlvW25baV0ucm93IC0gMV0gPSB7CgkJCQkJdGV4dDogb1tuW2ldLnJvdyAtIDFdLAoJCQkJCXJvdzogaSAtIDEKCQkJCX07CgkJCX0KCQl9CgoJCXJldHVybiB7CgkJCW86IG8sCgkJCW46IG4KCQl9OwoJfQoKCXJldHVybiBmdW5jdGlvbihvLCBuKXsKCQlvID0gby5yZXBsYWNlKC9ccyskLywgJycpOwoJCW4gPSBuLnJlcGxhY2UoL1xzKyQvLCAnJyk7CgkJdmFyIG91dCA9IGRpZmYobyA9PSAiIiA/IFtdIDogby5zcGxpdCgvXHMrLyksIG4gPT0gIiIgPyBbXSA6IG4uc3BsaXQoL1xzKy8pKTsKCgkJdmFyIHN0ciA9ICIiOwoKCQl2YXIgb1NwYWNlID0gby5tYXRjaCgvXHMrL2cpOwoJCWlmIChvU3BhY2UgPT0gbnVsbCkgewoJCQlvU3BhY2UgPSBbIiAiXTsKCQl9CgkJZWxzZSB7CgkJCW9TcGFjZS5wdXNoKCIgIik7CgkJfQoJCXZhciBuU3BhY2UgPSBuLm1hdGNoKC9ccysvZyk7CgkJaWYgKG5TcGFjZSA9PSBudWxsKSB7CgkJCW5TcGFjZSA9IFsiICJdOwoJCX0KCQllbHNlIHsKCQkJblNwYWNlLnB1c2goIiAiKTsKCQl9CgoJCWlmIChvdXQubi5sZW5ndGggPT0gMCkgewoJCQlmb3IgKHZhciBpID0gMDsgaSA8IG91dC5vLmxlbmd0aDsgaSsrKSB7CgkJCQlzdHIgKz0gJzxkZWw+JyArIG91dC5vW2ldICsgb1NwYWNlW2ldICsgIjwvZGVsPiI7CgkJCX0KCQl9CgkJZWxzZSB7CgkJCWlmIChvdXQublswXS50ZXh0ID09IG51bGwpIHsKCQkJCWZvciAobiA9IDA7IG4gPCBvdXQuby5sZW5ndGggJiYgb3V0Lm9bbl0udGV4dCA9PSBudWxsOyBuKyspIHsKCQkJCQlzdHIgKz0gJzxkZWw+JyArIG91dC5vW25dICsgb1NwYWNlW25dICsgIjwvZGVsPiI7CgkJCQl9CgkJCX0KCgkJCWZvciAodmFyIGkgPSAwOyBpIDwgb3V0Lm4ubGVuZ3RoOyBpKyspIHsKCQkJCWlmIChvdXQubltpXS50ZXh0ID09IG51bGwpIHsKCQkJCQlzdHIgKz0gJzxpbnM+JyArIG91dC5uW2ldICsgblNwYWNlW2ldICsgIjwvaW5zPiI7CgkJCQl9CgkJCQllbHNlIHsKCQkJCQl2YXIgcHJlID0gIiI7CgoJCQkJCWZvciAobiA9IG91dC5uW2ldLnJvdyArIDE7IG4gPCBvdXQuby5sZW5ndGggJiYgb3V0Lm9bbl0udGV4dCA9PSBudWxsOyBuKyspIHsKCQkJCQkJcHJlICs9ICc8ZGVsPicgKyBvdXQub1tuXSArIG9TcGFjZVtuXSArICI8L2RlbD4iOwoJCQkJCX0KCQkJCQlzdHIgKz0gIiAiICsgb3V0Lm5baV0udGV4dCArIG5TcGFjZVtpXSArIHByZTsKCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIHN0cjsKCX07Cn0pKCk7Cgp9KSh0aGlzKTsK",
                "body": "LyoKICogUVVuaXQgLSBBIEphdmFTY3JpcHQgVW5pdCBUZXN0aW5nIEZyYW1ld29yawogKgogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1FVbml0CiAqCiAqIENvcHlyaWdodCAoYykgMjAwOSBKb2huIFJlc2lnLCBKw7ZybiBaYWVmZmVyZXIKICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIChNSVQtTElDRU5TRS50eHQpCiAqIGFuZCBHUEwgKEdQTC1MSUNFTlNFLnR4dCkgbGljZW5zZXMuCiAqLwoKKGZ1bmN0aW9uKHdpbmRvdykgewoKdmFyIGRlZmluZWQgPSB7CglzZXRUaW1lb3V0OiB0eXBlb2Ygd2luZG93LnNldFRpbWVvdXQgIT09ICJ1bmRlZmluZWQiLAoJc2Vzc2lvblN0b3JhZ2U6IChmdW5jdGlvbigpIHsKCQl0cnkgewoJCQlyZXR1cm4gISFzZXNzaW9uU3RvcmFnZS5nZXRJdGVtOwoJCX0gY2F0Y2goZSl7CgkJCXJldHVybiBmYWxzZTsKCQl9CiAgfSkoKQp9Cgp2YXIgdGVzdElkID0gMDsKCnZhciBUZXN0ID0gZnVuY3Rpb24obmFtZSwgdGVzdE5hbWUsIGV4cGVjdGVkLCB0ZXN0RW52aXJvbm1lbnRBcmcsIGFzeW5jLCBjYWxsYmFjaykgewoJdGhpcy5uYW1lID0gbmFtZTsKCXRoaXMudGVzdE5hbWUgPSB0ZXN0TmFtZTsKCXRoaXMuZXhwZWN0ZWQgPSBleHBlY3RlZDsKCXRoaXMudGVzdEVudmlyb25tZW50QXJnID0gdGVzdEVudmlyb25tZW50QXJnOwoJdGhpcy5hc3luYyA9IGFzeW5jOwoJdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrOwoJdGhpcy5hc3NlcnRpb25zID0gW107Cn07ClRlc3QucHJvdG90eXBlID0gewoJaW5pdDogZnVuY3Rpb24oKSB7CgkJdmFyIHRlc3RzID0gaWQoInF1bml0LXRlc3RzIik7CgkJaWYgKHRlc3RzKSB7CgkJCXZhciBiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3Ryb25nIik7CgkJCQliLmlubmVySFRNTCA9ICJSdW5uaW5nICIgKyB0aGlzLm5hbWU7CgkJCXZhciBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxpIik7CgkJCQlsaS5hcHBlbmRDaGlsZCggYiApOwoJCQkJbGkuaWQgPSB0aGlzLmlkID0gInRlc3Qtb3V0cHV0IiArIHRlc3RJZCsrOwoJCQl0ZXN0cy5hcHBlbmRDaGlsZCggbGkgKTsKCQl9Cgl9LAoJc2V0dXA6IGZ1bmN0aW9uKCkgewoJCWlmICh0aGlzLm1vZHVsZSAhPSBjb25maWcucHJldmlvdXNNb2R1bGUpIHsKCQkJaWYgKCB0aGlzLnByZXZpb3VzTW9kdWxlICkgewoJCQkJUVVuaXQubW9kdWxlRG9uZSggdGhpcy5tb2R1bGUsIGNvbmZpZy5tb2R1bGVTdGF0cy5iYWQsIGNvbmZpZy5tb2R1bGVTdGF0cy5hbGwgKTsKCQkJfQoJCQljb25maWcucHJldmlvdXNNb2R1bGUgPSB0aGlzLm1vZHVsZTsKCQkJY29uZmlnLm1vZHVsZVN0YXRzID0geyBhbGw6IDAsIGJhZDogMCB9OwoJCQlRVW5pdC5tb2R1bGVTdGFydCggdGhpcy5tb2R1bGUsIHRoaXMubW9kdWxlVGVzdEVudmlyb25tZW50ICk7CgkJfQoKCQljb25maWcuY3VycmVudCA9IHRoaXM7CgkJdGhpcy50ZXN0RW52aXJvbm1lbnQgPSBleHRlbmQoewoJCQlzZXR1cDogZnVuY3Rpb24oKSB7fSwKCQkJdGVhcmRvd246IGZ1bmN0aW9uKCkge30KCQl9LCB0aGlzLm1vZHVsZVRlc3RFbnZpcm9ubWVudCk7CgkJaWYgKHRoaXMudGVzdEVudmlyb25tZW50QXJnKSB7CgkJCWV4dGVuZCh0aGlzLnRlc3RFbnZpcm9ubWVudCwgdGhpcy50ZXN0RW52aXJvbm1lbnRBcmcpOwoJCX0KCgkJUVVuaXQudGVzdFN0YXJ0KCB0aGlzLnRlc3ROYW1lLCB0aGlzLnRlc3RFbnZpcm9ubWVudCApOwoKCQkvLyBhbGxvdyB1dGlsaXR5IGZ1bmN0aW9ucyB0byBhY2Nlc3MgdGhlIGN1cnJlbnQgdGVzdCBlbnZpcm9ubWVudAoJCS8vIFRPRE8gd2h5Pz8KCQlRVW5pdC5jdXJyZW50X3Rlc3RFbnZpcm9ubWVudCA9IHRoaXMudGVzdEVudmlyb25tZW50OwoKCQl0cnkgewoJCQlpZiAoICFjb25maWcucG9sbHV0aW9uICkgewoJCQkJc2F2ZUdsb2JhbCgpOwoJCQl9CgoJCQl0aGlzLnRlc3RFbnZpcm9ubWVudC5zZXR1cC5jYWxsKHRoaXMudGVzdEVudmlyb25tZW50KTsKCQl9IGNhdGNoKGUpIHsKCQkJLy8gVE9ETyB1c2UgdGVzdE5hbWUgaW5zdGVhZCBvZiBuYW1lIGZvciBuby1tYXJrdXAgbWVzc2FnZT8KCQkJUVVuaXQub2soIGZhbHNlLCAiU2V0dXAgZmFpbGVkIG9uICIgKyB0aGlzLm5hbWUgKyAiOiAiICsgZS5tZXNzYWdlICk7CgkJfQoJfSwKCXJ1bjogZnVuY3Rpb24oKSB7CgkJaWYgKCB0aGlzLmFzeW5jICkgewoJCQlRVW5pdC5zdG9wKCk7CgkJfQoKCQl0cnkgewoJCQl0aGlzLmNhbGxiYWNrLmNhbGwodGhpcy50ZXN0RW52aXJvbm1lbnQpOwoJCX0gY2F0Y2goZSkgewoJCQkvLyBUT0RPIHVzZSB0ZXN0TmFtZSBpbnN0ZWFkIG9mIG5hbWUgZm9yIG5vLW1hcmt1cCBtZXNzYWdlPwoJCQlmYWlsKCJUZXN0ICIgKyB0aGlzLm5hbWUgKyAiIGRpZWQsIGV4Y2VwdGlvbiBhbmQgdGVzdCBmb2xsb3dzIiwgZSwgdGhpcy5jYWxsYmFjayk7CgkJCVFVbml0Lm9rKCBmYWxzZSwgIkRpZWQgb24gdGVzdCAjIiArICh0aGlzLmFzc2VydGlvbnMubGVuZ3RoICsgMSkgKyAiOiAiICsgZS5tZXNzYWdlICsgIiAtICIgKyBRVW5pdC5qc0R1bXAucGFyc2UoZSkgKTsKCQkJLy8gZWxzZSBuZXh0IHRlc3Qgd2lsbCBjYXJyeSB0aGUgcmVzcG9uc2liaWxpdHkKCQkJc2F2ZUdsb2JhbCgpOwoKCQkJLy8gUmVzdGFydCB0aGUgdGVzdHMgaWYgdGhleSdyZSBibG9ja2luZwoJCQlpZiAoIGNvbmZpZy5ibG9ja2luZyApIHsKCQkJCXN0YXJ0KCk7CgkJCX0KCQl9Cgl9LAoJdGVhcmRvd246IGZ1bmN0aW9uKCkgewoJCXRyeSB7CgkJCWNoZWNrUG9sbHV0aW9uKCk7CgkJCXRoaXMudGVzdEVudmlyb25tZW50LnRlYXJkb3duLmNhbGwodGhpcy50ZXN0RW52aXJvbm1lbnQpOwoJCX0gY2F0Y2goZSkgewoJCQkvLyBUT0RPIHVzZSB0ZXN0TmFtZSBpbnN0ZWFkIG9mIG5hbWUgZm9yIG5vLW1hcmt1cCBtZXNzYWdlPwoJCQlRVW5pdC5vayggZmFsc2UsICJUZWFyZG93biBmYWlsZWQgb24gIiArIHRoaXMubmFtZSArICI6ICIgKyBlLm1lc3NhZ2UgKTsKCQl9Cgl9LAoJZmluaXNoOiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMuZXhwZWN0ZWQgJiYgdGhpcy5leHBlY3RlZCAhPSB0aGlzLmFzc2VydGlvbnMubGVuZ3RoICkgewoJCQlRVW5pdC5vayggZmFsc2UsICJFeHBlY3RlZCAiICsgdGhpcy5leHBlY3RlZCArICIgYXNzZXJ0aW9ucywgYnV0ICIgKyB0aGlzLmFzc2VydGlvbnMubGVuZ3RoICsgIiB3ZXJlIHJ1biIgKTsKCQl9CgoJCXZhciBnb29kID0gMCwgYmFkID0gMCwKCQkJdGVzdHMgPSBpZCgicXVuaXQtdGVzdHMiKTsKCgkJY29uZmlnLnN0YXRzLmFsbCArPSB0aGlzLmFzc2VydGlvbnMubGVuZ3RoOwoJCWNvbmZpZy5tb2R1bGVTdGF0cy5hbGwgKz0gdGhpcy5hc3NlcnRpb25zLmxlbmd0aDsKCgkJaWYgKCB0ZXN0cyApIHsKCQkJdmFyIG9sICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9sIik7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmFzc2VydGlvbnMubGVuZ3RoOyBpKysgKSB7CgkJCQl2YXIgYXNzZXJ0aW9uID0gdGhpcy5hc3NlcnRpb25zW2ldOwoKCQkJCXZhciBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxpIik7CgkJCQlsaS5jbGFzc05hbWUgPSBhc3NlcnRpb24ucmVzdWx0ID8gInBhc3MiIDogImZhaWwiOwoJCQkJbGkuaW5uZXJIVE1MID0gYXNzZXJ0aW9uLm1lc3NhZ2UgfHwgKGFzc2VydGlvbi5yZXN1bHQgPyAib2theSIgOiAiZmFpbGVkIik7CgkJCQlvbC5hcHBlbmRDaGlsZCggbGkgKTsKCgkJCQlpZiAoIGFzc2VydGlvbi5yZXN1bHQgKSB7CgkJCQkJZ29vZCsrOwoJCQkJfSBlbHNlIHsKCQkJCQliYWQrKzsKCQkJCQljb25maWcuc3RhdHMuYmFkKys7CgkJCQkJY29uZmlnLm1vZHVsZVN0YXRzLmJhZCsrOwoJCQkJfQoJCQl9CgoJCQkvLyBzdG9yZSByZXN1bHQgd2hlbiBwb3NzaWJsZQoJCQlkZWZpbmVkLnNlc3Npb25TdG9yYWdlICYmIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oInF1bml0LSIgKyB0aGlzLnRlc3ROYW1lLCBiYWQpOwoKCQkJaWYgKGJhZCA9PSAwKSB7CgkJCQlvbC5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQl9CgoJCQl2YXIgYiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0cm9uZyIpOwoJCQliLmlubmVySFRNTCA9IHRoaXMubmFtZSArICIgPGIgY2xhc3M9J2NvdW50cyc+KDxiIGNsYXNzPSdmYWlsZWQnPiIgKyBiYWQgKyAiPC9iPiwgPGIgY2xhc3M9J3Bhc3NlZCc+IiArIGdvb2QgKyAiPC9iPiwgIiArIHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGggKyAiKTwvYj4iOwoKCQkJYWRkRXZlbnQoYiwgImNsaWNrIiwgZnVuY3Rpb24oKSB7CgkJCQl2YXIgbmV4dCA9IGIubmV4dFNpYmxpbmcsIGRpc3BsYXkgPSBuZXh0LnN0eWxlLmRpc3BsYXk7CgkJCQluZXh0LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5ID09PSAibm9uZSIgPyAiYmxvY2siIDogIm5vbmUiOwoJCQl9KTsKCgkJCWFkZEV2ZW50KGIsICJkYmxjbGljayIsIGZ1bmN0aW9uKGUpIHsKCQkJCXZhciB0YXJnZXQgPSBlICYmIGUudGFyZ2V0ID8gZS50YXJnZXQgOiB3aW5kb3cuZXZlbnQuc3JjRWxlbWVudDsKCQkJCWlmICggdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gInNwYW4iIHx8IHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09ICJiIiApIHsKCQkJCQl0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTsKCQkJCX0KCQkJCWlmICggd2luZG93LmxvY2F0aW9uICYmIHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAic3Ryb25nIiApIHsKCQkJCQl3aW5kb3cubG9jYXRpb24uc2VhcmNoID0gIj8iICsgZW5jb2RlVVJJQ29tcG9uZW50KGdldFRleHQoW3RhcmdldF0pLnJlcGxhY2UoL1woLitcKSQvLCAiIikucmVwbGFjZSgvKF5ccyp8XHMqJCkvZywgIiIpKTsKCQkJCX0KCQkJfSk7CgoJCQl2YXIgbGkgPSBpZCh0aGlzLmlkKTsKCQkJbGkuY2xhc3NOYW1lID0gYmFkID8gImZhaWwiIDogInBhc3MiOwoJCQlsaS5zdHlsZS5kaXNwbGF5ID0gcmVzdWx0RGlzcGxheVN0eWxlKCFiYWQpOwoJCQlsaS5yZW1vdmVDaGlsZCggbGkuZmlyc3RDaGlsZCApOwoJCQlsaS5hcHBlbmRDaGlsZCggYiApOwoJCQlsaS5hcHBlbmRDaGlsZCggb2wgKTsKCgkJCWlmICggYmFkICkgewoJCQkJdmFyIHRvb2xiYXIgPSBpZCgicXVuaXQtdGVzdHJ1bm5lci10b29sYmFyIik7CgkJCQlpZiAoIHRvb2xiYXIgKSB7CgkJCQkJdG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCQkJCQlpZCgicXVuaXQtZmlsdGVyLXBhc3MiKS5kaXNhYmxlZCA9IG51bGw7CgkJCQl9CgkJCX0KCgkJfSBlbHNlIHsKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5hc3NlcnRpb25zLmxlbmd0aDsgaSsrICkgewoJCQkJaWYgKCAhdGhpcy5hc3NlcnRpb25zW2ldLnJlc3VsdCApIHsKCQkJCQliYWQrKzsKCQkJCQljb25maWcuc3RhdHMuYmFkKys7CgkJCQkJY29uZmlnLm1vZHVsZVN0YXRzLmJhZCsrOwoJCQkJfQoJCQl9CgkJfQoKCQl0cnkgewoJCQlRVW5pdC5yZXNldCgpOwoJCX0gY2F0Y2goZSkgewoJCQkvLyBUT0RPIHVzZSB0ZXN0TmFtZSBpbnN0ZWFkIG9mIG5hbWUgZm9yIG5vLW1hcmt1cCBtZXNzYWdlPwoJCQlmYWlsKCJyZXNldCgpIGZhaWxlZCwgZm9sbG93aW5nIFRlc3QgIiArIHRoaXMubmFtZSArICIsIGV4Y2VwdGlvbiBhbmQgcmVzZXQgZm4gZm9sbG93cyIsIGUsIFFVbml0LnJlc2V0KTsKCQl9CgoJCVFVbml0LnRlc3REb25lKCB0aGlzLnRlc3ROYW1lLCBiYWQsIHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGggKTsKCX0sCgoJcXVldWU6IGZ1bmN0aW9uKCkgewoJCXZhciB0ZXN0ID0gdGhpczsKCQlzeW5jaHJvbml6ZShmdW5jdGlvbigpIHsKCQkJdGVzdC5pbml0KCk7CgkJfSk7CgkJZnVuY3Rpb24gcnVuKCkgewoJCQkvLyBlYWNoIG9mIHRoZXNlIGNhbiBieSBhc3luYwoJCQlzeW5jaHJvbml6ZShmdW5jdGlvbigpIHsKCQkJCXRlc3Quc2V0dXAoKTsKCQkJfSk7CgkJCXN5bmNocm9uaXplKGZ1bmN0aW9uKCkgewoJCQkJdGVzdC5ydW4oKTsKCQkJfSk7CgkJCXN5bmNocm9uaXplKGZ1bmN0aW9uKCkgewoJCQkJdGVzdC50ZWFyZG93bigpOwoJCQl9KTsKCQkJc3luY2hyb25pemUoZnVuY3Rpb24oKSB7CgkJCQl0ZXN0LmZpbmlzaCgpOwoJCQl9KTsKCQl9CgkJLy8gZGVmZXIgd2hlbiBwcmV2aW91cyB0ZXN0IHJ1biBwYXNzZWQsIGlmIHN0b3JhZ2UgaXMgYXZhaWxhYmxlCgkJdmFyIGJhZCA9IGRlZmluZWQuc2Vzc2lvblN0b3JhZ2UgJiYgK3Nlc3Npb25TdG9yYWdlLmdldEl0ZW0oInF1bml0LSIgKyB0aGlzLnRlc3ROYW1lKTsKCQlpZiAoYmFkKSB7CgkJCXJ1bigpOwoJCX0gZWxzZSB7CgkJCXN5bmNocm9uaXplKHJ1bik7CgkJfTsKCX0KCn0KCnZhciBRVW5pdCA9IHsKCgkvLyBjYWxsIG9uIHN0YXJ0IG9mIG1vZHVsZSB0ZXN0IHRvIHByZXBlbmQgbmFtZSB0byBhbGwgdGVzdHMKCW1vZHVsZTogZnVuY3Rpb24obmFtZSwgdGVzdEVudmlyb25tZW50KSB7CgkJY29uZmlnLnByZXZpb3VzTW9kdWxlID0gY29uZmlnLmN1cnJlbnRNb2R1bGU7CgkJY29uZmlnLmN1cnJlbnRNb2R1bGUgPSBuYW1lOwoJCWNvbmZpZy5jdXJyZW50TW9kdWxlVGVzdEVudmlyb21lbnQgPSB0ZXN0RW52aXJvbm1lbnQ7Cgl9LAoKCWFzeW5jVGVzdDogZnVuY3Rpb24odGVzdE5hbWUsIGV4cGVjdGVkLCBjYWxsYmFjaykgewoJCWlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMiApIHsKCQkJY2FsbGJhY2sgPSBleHBlY3RlZDsKCQkJZXhwZWN0ZWQgPSAwOwoJCX0KCgkJUVVuaXQudGVzdCh0ZXN0TmFtZSwgZXhwZWN0ZWQsIGNhbGxiYWNrLCB0cnVlKTsKCX0sCgoJdGVzdDogZnVuY3Rpb24odGVzdE5hbWUsIGV4cGVjdGVkLCBjYWxsYmFjaywgYXN5bmMpIHsKCQl2YXIgbmFtZSA9ICc8c3BhbiBjbGFzcz0idGVzdC1uYW1lIj4nICsgdGVzdE5hbWUgKyAnPC9zcGFuPicsIHRlc3RFbnZpcm9ubWVudEFyZzsKCgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAyICkgewoJCQljYWxsYmFjayA9IGV4cGVjdGVkOwoJCQlleHBlY3RlZCA9IG51bGw7CgkJfQoJCS8vIGlzIDJuZCBhcmd1bWVudCBhIHRlc3RFbnZpcm9ubWVudD8KCQlpZiAoIGV4cGVjdGVkICYmIHR5cGVvZiBleHBlY3RlZCA9PT0gJ29iamVjdCcpIHsKCQkJdGVzdEVudmlyb25tZW50QXJnID0gIGV4cGVjdGVkOwoJCQlleHBlY3RlZCA9IG51bGw7CgkJfQoKCQlpZiAoIGNvbmZpZy5jdXJyZW50TW9kdWxlICkgewoJCQluYW1lID0gJzxzcGFuIGNsYXNzPSJtb2R1bGUtbmFtZSI+JyArIGNvbmZpZy5jdXJyZW50TW9kdWxlICsgIjwvc3Bhbj46ICIgKyBuYW1lOwoJCX0KCgkJaWYgKCAhdmFsaWRUZXN0KGNvbmZpZy5jdXJyZW50TW9kdWxlICsgIjogIiArIHRlc3ROYW1lKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJdmFyIHRlc3QgPSBuZXcgVGVzdChuYW1lLCB0ZXN0TmFtZSwgZXhwZWN0ZWQsIHRlc3RFbnZpcm9ubWVudEFyZywgYXN5bmMsIGNhbGxiYWNrKTsKCQl0ZXN0LnByZXZpb3VzTW9kdWxlID0gY29uZmlnLnByZXZpb3VzTW9kdWxlOwoJCXRlc3QubW9kdWxlID0gY29uZmlnLmN1cnJlbnRNb2R1bGU7CgkJdGVzdC5tb2R1bGVUZXN0RW52aXJvbm1lbnQgPSBjb25maWcuY3VycmVudE1vZHVsZVRlc3RFbnZpcm9tZW50OwoJCXRlc3QucXVldWUoKTsKCX0sCgoJLyoqCgkgKiBTcGVjaWZ5IHRoZSBudW1iZXIgb2YgZXhwZWN0ZWQgYXNzZXJ0aW9ucyB0byBndXJhbnRlZSB0aGF0IGZhaWxlZCB0ZXN0IChubyBhc3NlcnRpb25zIGFyZSBydW4gYXQgYWxsKSBkb24ndCBzbGlwIHRocm91Z2guCgkgKi8KCWV4cGVjdDogZnVuY3Rpb24oYXNzZXJ0cykgewoJCWNvbmZpZy5jdXJyZW50LmV4cGVjdGVkID0gYXNzZXJ0czsKCX0sCgoJLyoqCgkgKiBBc3NlcnRzIHRydWUuCgkgKiBAZXhhbXBsZSBvayggImFzZGZhc2RmIi5sZW5ndGggPiA1LCAiVGhlcmUgbXVzdCBiZSBhdCBsZWFzdCA1IGNoYXJzIiApOwoJICovCglvazogZnVuY3Rpb24oYSwgbXNnKSB7CgkJYSA9ICEhYTsKCQl2YXIgZGV0YWlscyA9IHsKCQkJcmVzdWx0OiBhLAoJCQltZXNzYWdlOiBtc2cKCQl9OwoJCW1zZyA9IGVzY2FwZUh0bWwobXNnKTsKCQlRVW5pdC5sb2coYSwgbXNnLCBkZXRhaWxzKTsKCQljb25maWcuY3VycmVudC5hc3NlcnRpb25zLnB1c2goewoJCQlyZXN1bHQ6IGEsCgkJCW1lc3NhZ2U6IG1zZwoJCX0pOwoJfSwKCgkvKioKCSAqIENoZWNrcyB0aGF0IHRoZSBmaXJzdCB0d28gYXJndW1lbnRzIGFyZSBlcXVhbCwgd2l0aCBhbiBvcHRpb25hbCBtZXNzYWdlLgoJICogUHJpbnRzIG91dCBib3RoIGFjdHVhbCBhbmQgZXhwZWN0ZWQgdmFsdWVzLgoJICoKCSAqIFByZWZlcmVkIHRvIG9rKCBhY3R1YWwgPT0gZXhwZWN0ZWQsIG1lc3NhZ2UgKQoJICoKCSAqIEBleGFtcGxlIGVxdWFsKCBmb3JtYXQoIlJlY2VpdmVkIHswfSBieXRlcy4iLCAyKSwgIlJlY2VpdmVkIDIgYnl0ZXMuIiApOwoJICoKCSAqIEBwYXJhbSBPYmplY3QgYWN0dWFsCgkgKiBAcGFyYW0gT2JqZWN0IGV4cGVjdGVkCgkgKiBAcGFyYW0gU3RyaW5nIG1lc3NhZ2UgKG9wdGlvbmFsKQoJICovCgllcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewoJCVFVbml0LnB1c2goZXhwZWN0ZWQgPT0gYWN0dWFsLCBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKTsKCX0sCgoJbm90RXF1YWw6IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKCQlRVW5pdC5wdXNoKGV4cGVjdGVkICE9IGFjdHVhbCwgYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSk7Cgl9LAoKCWRlZXBFcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewoJCVFVbml0LnB1c2goUVVuaXQuZXF1aXYoYWN0dWFsLCBleHBlY3RlZCksIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOwoJfSwKCglub3REZWVwRXF1YWw6IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKCQlRVW5pdC5wdXNoKCFRVW5pdC5lcXVpdihhY3R1YWwsIGV4cGVjdGVkKSwgYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSk7Cgl9LAoKCXN0cmljdEVxdWFsOiBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CgkJUVVuaXQucHVzaChleHBlY3RlZCA9PT0gYWN0dWFsLCBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKTsKCX0sCgoJbm90U3RyaWN0RXF1YWw6IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKCQlRVW5pdC5wdXNoKGV4cGVjdGVkICE9PSBhY3R1YWwsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOwoJfSwKCglyYWlzZXM6IGZ1bmN0aW9uKGJsb2NrLCBleHBlY3RlZCwgbWVzc2FnZSkgewoJCXZhciBhY3R1YWwsIG9rID0gZmFsc2U7CgoJCWlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnKSB7CgkJCW1lc3NhZ2UgPSBleHBlY3RlZDsKCQkJZXhwZWN0ZWQgPSBudWxsOwoJCX0KCgkJdHJ5IHsKCQkJYmxvY2soKTsKCQl9IGNhdGNoIChlKSB7CgkJCWFjdHVhbCA9IGU7CgkJfQoKCQlpZiAoYWN0dWFsKSB7CgkJCS8vIHdlIGRvbid0IHdhbnQgdG8gdmFsaWRhdGUgdGhyb3duIGVycm9yCgkJCWlmICghZXhwZWN0ZWQpIHsKCQkJCW9rID0gdHJ1ZTsKCQkJLy8gZXhwZWN0ZWQgaXMgYSByZWdleHAKCQkJfSBlbHNlIGlmIChRVW5pdC5vYmplY3RUeXBlKGV4cGVjdGVkKSA9PT0gInJlZ2V4cCIpIHsKCQkJCW9rID0gZXhwZWN0ZWQudGVzdChhY3R1YWwpOwoJCQkvLyBleHBlY3RlZCBpcyBhIGNvbnN0cnVjdG9yCgkJCX0gZWxzZSBpZiAoYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHsKCQkJCW9rID0gdHJ1ZTsKCQkJLy8gZXhwZWN0ZWQgaXMgYSB2YWxpZGF0aW9uIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgdHJ1ZSBpcyB2YWxpZGF0aW9uIHBhc3NlZAoJCQl9IGVsc2UgaWYgKGV4cGVjdGVkLmNhbGwoe30sIGFjdHVhbCkgPT09IHRydWUpIHsKCQkJCW9rID0gdHJ1ZTsKCQkJfQoJCX0KCgkJUVVuaXQub2sob2ssIG1lc3NhZ2UpOwoJfSwKCglzdGFydDogZnVuY3Rpb24oKSB7CgkJLy8gQSBzbGlnaHQgZGVsYXksIHRvIGF2b2lkIGFueSBjdXJyZW50IGNhbGxiYWNrcwoJCWlmICggZGVmaW5lZC5zZXRUaW1lb3V0ICkgewoJCQl3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCWlmICggY29uZmlnLnRpbWVvdXQgKSB7CgkJCQkJY2xlYXJUaW1lb3V0KGNvbmZpZy50aW1lb3V0KTsKCQkJCX0KCgkJCQljb25maWcuYmxvY2tpbmcgPSBmYWxzZTsKCQkJCXByb2Nlc3MoKTsKCQkJfSwgMTMpOwoJCX0gZWxzZSB7CgkJCWNvbmZpZy5ibG9ja2luZyA9IGZhbHNlOwoJCQlwcm9jZXNzKCk7CgkJfQoJfSwKCglzdG9wOiBmdW5jdGlvbih0aW1lb3V0KSB7CgkJY29uZmlnLmJsb2NraW5nID0gdHJ1ZTsKCgkJaWYgKCB0aW1lb3V0ICYmIGRlZmluZWQuc2V0VGltZW91dCApIHsKCQkJY29uZmlnLnRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCVFVbml0Lm9rKCBmYWxzZSwgIlRlc3QgdGltZWQgb3V0IiApOwoJCQkJUVVuaXQuc3RhcnQoKTsKCQkJfSwgdGltZW91dCk7CgkJfQoJfQoKfTsKCi8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCBkZXByZWNhdGVkClFVbml0LmVxdWFscyA9IFFVbml0LmVxdWFsOwpRVW5pdC5zYW1lID0gUVVuaXQuZGVlcEVxdWFsOwoKLy8gTWFpbnRhaW4gaW50ZXJuYWwgc3RhdGUKdmFyIGNvbmZpZyA9IHsKCS8vIFRoZSBxdWV1ZSBvZiB0ZXN0cyB0byBydW4KCXF1ZXVlOiBbXSwKCgkvLyBibG9jayB1bnRpbCBkb2N1bWVudCByZWFkeQoJYmxvY2tpbmc6IHRydWUKfTsKCi8vIExvYWQgcGFyYW1hdGVycwooZnVuY3Rpb24oKSB7Cgl2YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24gfHwgeyBzZWFyY2g6ICIiLCBwcm90b2NvbDogImZpbGU6IiB9LAoJCUdFVFBhcmFtcyA9IGxvY2F0aW9uLnNlYXJjaC5zbGljZSgxKS5zcGxpdCgnJicpOwoKCWZvciAoIHZhciBpID0gMDsgaSA8IEdFVFBhcmFtcy5sZW5ndGg7IGkrKyApIHsKCQlHRVRQYXJhbXNbaV0gPSBkZWNvZGVVUklDb21wb25lbnQoIEdFVFBhcmFtc1tpXSApOwoJCWlmICggR0VUUGFyYW1zW2ldID09PSAibm9nbG9iYWxzIiApIHsKCQkJR0VUUGFyYW1zLnNwbGljZSggaSwgMSApOwoJCQlpLS07CgkJCWNvbmZpZy5ub2dsb2JhbHMgPSB0cnVlOwoJCX0gZWxzZSBpZiAoIEdFVFBhcmFtc1tpXS5zZWFyY2goJz0nKSA+IC0xICkgewoJCQlHRVRQYXJhbXMuc3BsaWNlKCBpLCAxICk7CgkJCWktLTsKCQl9Cgl9CgoJLy8gcmVzdHJpY3QgbW9kdWxlcy90ZXN0cyBieSBnZXQgcGFyYW1ldGVycwoJY29uZmlnLmZpbHRlcnMgPSBHRVRQYXJhbXM7CgoJLy8gRmlndXJlIG91dCBpZiB3ZSdyZSBydW5uaW5nIHRoZSB0ZXN0cyBmcm9tIGEgc2VydmVyIG9yIG5vdAoJUVVuaXQuaXNMb2NhbCA9ICEhKGxvY2F0aW9uLnByb3RvY29sID09PSAnZmlsZTonKTsKfSkoKTsKCi8vIEV4cG9zZSB0aGUgQVBJIGFzIGdsb2JhbCB2YXJpYWJsZXMsIHVubGVzcyBhbiAnZXhwb3J0cycKLy8gb2JqZWN0IGV4aXN0cywgaW4gdGhhdCBjYXNlIHdlIGFzc3VtZSB3ZSdyZSBpbiBDb21tb25KUwppZiAoIHR5cGVvZiBleHBvcnRzID09PSAidW5kZWZpbmVkIiB8fCB0eXBlb2YgcmVxdWlyZSA9PT0gInVuZGVmaW5lZCIgKSB7CglleHRlbmQod2luZG93LCBRVW5pdCk7Cgl3aW5kb3cuUVVuaXQgPSBRVW5pdDsKfSBlbHNlIHsKCWV4dGVuZChleHBvcnRzLCBRVW5pdCk7CglleHBvcnRzLlFVbml0ID0gUVVuaXQ7Cn0KCi8vIGRlZmluZSB0aGVzZSBhZnRlciBleHBvc2luZyBnbG9iYWxzIHRvIGtlZXAgdGhlbSBpbiB0aGVzZSBRVW5pdCBuYW1lc3BhY2Ugb25seQpleHRlbmQoUVVuaXQsIHsKCWNvbmZpZzogY29uZmlnLAoKCS8vIEluaXRpYWxpemUgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucwoJaW5pdDogZnVuY3Rpb24oKSB7CgkJZXh0ZW5kKGNvbmZpZywgewoJCQlzdGF0czogeyBhbGw6IDAsIGJhZDogMCB9LAoJCQltb2R1bGVTdGF0czogeyBhbGw6IDAsIGJhZDogMCB9LAoJCQlzdGFydGVkOiArbmV3IERhdGUsCgkJCXVwZGF0ZVJhdGU6IDEwMDAsCgkJCWJsb2NraW5nOiBmYWxzZSwKCQkJYXV0b3N0YXJ0OiB0cnVlLAoJCQlhdXRvcnVuOiBmYWxzZSwKCQkJZmlsdGVyczogW10sCgkJCXF1ZXVlOiBbXQoJCX0pOwoKCQl2YXIgdGVzdHMgPSBpZCgicXVuaXQtdGVzdHMiKSwKCQkJYmFubmVyID0gaWQoInF1bml0LWJhbm5lciIpLAoJCQlyZXN1bHQgPSBpZCgicXVuaXQtdGVzdHJlc3VsdCIpOwoKCQlpZiAoIHRlc3RzICkgewoJCQl0ZXN0cy5pbm5lckhUTUwgPSAiIjsKCQl9CgoJCWlmICggYmFubmVyICkgewoJCQliYW5uZXIuY2xhc3NOYW1lID0gIiI7CgkJfQoKCQlpZiAoIHJlc3VsdCApIHsKCQkJcmVzdWx0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHJlc3VsdCApOwoJCX0KCX0sCgoJLyoqCgkgKiBSZXNldHMgdGhlIHRlc3Qgc2V0dXAuIFVzZWZ1bCBmb3IgdGVzdHMgdGhhdCBtb2RpZnkgdGhlIERPTS4KCSAqCgkgKiBJZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCB1c2VzIGpRdWVyeSdzIGh0bWwoKSwgb3RoZXJ3aXNlIGp1c3QgaW5uZXJIVE1MLgoJICovCglyZXNldDogZnVuY3Rpb24oKSB7CgkJaWYgKCB3aW5kb3cualF1ZXJ5ICkgewoJCQlqUXVlcnkoICIjbWFpbiwgI3F1bml0LWZpeHR1cmUiICkuaHRtbCggY29uZmlnLmZpeHR1cmUgKTsKCQl9IGVsc2UgewoJCQl2YXIgbWFpbiA9IGlkKCAnbWFpbicgKSB8fCBpZCggJ3F1bml0LWZpeHR1cmUnICk7CgkJCWlmICggbWFpbiApIHsKCQkJCW1haW4uaW5uZXJIVE1MID0gY29uZmlnLmZpeHR1cmU7CgkJCX0KCQl9Cgl9LAoKCS8qKgoJICogVHJpZ2dlciBhbiBldmVudCBvbiBhbiBlbGVtZW50LgoJICoKCSAqIEBleGFtcGxlIHRyaWdnZXJFdmVudCggZG9jdW1lbnQuYm9keSwgImNsaWNrIiApOwoJICoKCSAqIEBwYXJhbSBET01FbGVtZW50IGVsZW0KCSAqIEBwYXJhbSBTdHJpbmcgdHlwZQoJICovCgl0cmlnZ2VyRXZlbnQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBldmVudCApIHsKCQlpZiAoIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICkgewoJCQlldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCJNb3VzZUV2ZW50cyIpOwoJCQlldmVudC5pbml0TW91c2VFdmVudCh0eXBlLCB0cnVlLCB0cnVlLCBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcsCgkJCQkwLCAwLCAwLCAwLCAwLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7CgkJCWVsZW0uZGlzcGF0Y2hFdmVudCggZXZlbnQgKTsKCgkJfSBlbHNlIGlmICggZWxlbS5maXJlRXZlbnQgKSB7CgkJCWVsZW0uZmlyZUV2ZW50KCJvbiIrdHlwZSk7CgkJfQoJfSwKCgkvLyBTYWZlIG9iamVjdCB0eXBlIGNoZWNraW5nCglpczogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHsKCQlyZXR1cm4gUVVuaXQub2JqZWN0VHlwZSggb2JqICkgPT0gdHlwZTsKCX0sCgoJb2JqZWN0VHlwZTogZnVuY3Rpb24oIG9iaiApIHsKCQlpZiAodHlwZW9mIG9iaiA9PT0gInVuZGVmaW5lZCIpIHsKCQkJCXJldHVybiAidW5kZWZpbmVkIjsKCgkJLy8gY29uc2lkZXI6IHR5cGVvZiBudWxsID09PSBvYmplY3QKCQl9CgkJaWYgKG9iaiA9PT0gbnVsbCkgewoJCQkJcmV0dXJuICJudWxsIjsKCQl9CgoJCXZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCBvYmogKQoJCQkubWF0Y2goL15cW29iamVjdFxzKC4qKVxdJC8pWzFdIHx8ICcnOwoKCQlzd2l0Y2ggKHR5cGUpIHsKCQkJCWNhc2UgJ051bWJlcic6CgkJCQkJCWlmIChpc05hTihvYmopKSB7CgkJCQkJCQkJcmV0dXJuICJuYW4iOwoJCQkJCQl9IGVsc2UgewoJCQkJCQkJCXJldHVybiAibnVtYmVyIjsKCQkJCQkJfQoJCQkJY2FzZSAnU3RyaW5nJzoKCQkJCWNhc2UgJ0Jvb2xlYW4nOgoJCQkJY2FzZSAnQXJyYXknOgoJCQkJY2FzZSAnRGF0ZSc6CgkJCQljYXNlICdSZWdFeHAnOgoJCQkJY2FzZSAnRnVuY3Rpb24nOgoJCQkJCQlyZXR1cm4gdHlwZS50b0xvd2VyQ2FzZSgpOwoJCX0KCQlpZiAodHlwZW9mIG9iaiA9PT0gIm9iamVjdCIpIHsKCQkJCXJldHVybiAib2JqZWN0IjsKCQl9CgkJcmV0dXJuIHVuZGVmaW5lZDsKCX0sCgoJcHVzaDogZnVuY3Rpb24ocmVzdWx0LCBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CgkJdmFyIGRldGFpbHMgPSB7CgkJCXJlc3VsdDogcmVzdWx0LAoJCQltZXNzYWdlOiBtZXNzYWdlLAoJCQlhY3R1YWw6IGFjdHVhbCwKCQkJZXhwZWN0ZWQ6IGV4cGVjdGVkCgkJfTsKCgkJbWVzc2FnZSA9IGVzY2FwZUh0bWwobWVzc2FnZSkgfHwgKHJlc3VsdCA/ICJva2F5IiA6ICJmYWlsZWQiKTsKCQltZXNzYWdlID0gJzxzcGFuIGNsYXNzPSJ0ZXN0LW1lc3NhZ2UiPicgKyBtZXNzYWdlICsgIjwvc3Bhbj4iOwoJCWV4cGVjdGVkID0gZXNjYXBlSHRtbChRVW5pdC5qc0R1bXAucGFyc2UoZXhwZWN0ZWQpKTsKCQlhY3R1YWwgPSBlc2NhcGVIdG1sKFFVbml0LmpzRHVtcC5wYXJzZShhY3R1YWwpKTsKCQl2YXIgb3V0cHV0ID0gbWVzc2FnZSArICc8dGFibGU+PHRyIGNsYXNzPSJ0ZXN0LWV4cGVjdGVkIj48dGg+RXhwZWN0ZWQ6IDwvdGg+PHRkPjxwcmU+JyArIGV4cGVjdGVkICsgJzwvcHJlPjwvdGQ+PC90cj4nOwoJCWlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIHsKCQkJb3V0cHV0ICs9ICc8dHIgY2xhc3M9InRlc3QtYWN0dWFsIj48dGg+UmVzdWx0OiA8L3RoPjx0ZD48cHJlPicgKyBhY3R1YWwgKyAnPC9wcmU+PC90ZD48L3RyPic7CgkJCW91dHB1dCArPSAnPHRyIGNsYXNzPSJ0ZXN0LWRpZmYiPjx0aD5EaWZmOiA8L3RoPjx0ZD48cHJlPicgKyBRVW5pdC5kaWZmKGV4cGVjdGVkLCBhY3R1YWwpICsnPC9wcmU+PC90ZD48L3RyPic7CgkJfQoJCWlmICghcmVzdWx0KSB7CgkJCXZhciBzb3VyY2UgPSBzb3VyY2VGcm9tU3RhY2t0cmFjZSgpOwoJCQlpZiAoc291cmNlKSB7CgkJCQlkZXRhaWxzLnNvdXJjZSA9IHNvdXJjZTsKCQkJCW91dHB1dCArPSAnPHRyIGNsYXNzPSJ0ZXN0LXNvdXJjZSI+PHRoPlNvdXJjZTogPC90aD48dGQ+PHByZT4nICsgc291cmNlICsnPC9wcmU+PC90ZD48L3RyPic7CgkJCX0KCQl9CgkJb3V0cHV0ICs9ICI8L3RhYmxlPiI7CgoJCVFVbml0LmxvZyhyZXN1bHQsIG1lc3NhZ2UsIGRldGFpbHMpOwoKCQljb25maWcuY3VycmVudC5hc3NlcnRpb25zLnB1c2goewoJCQlyZXN1bHQ6ICEhcmVzdWx0LAoJCQltZXNzYWdlOiBvdXRwdXQKCQl9KTsKCX0sCgoJLy8gTG9nZ2luZyBjYWxsYmFja3MKCWJlZ2luOiBmdW5jdGlvbigpIHt9LAoJZG9uZTogZnVuY3Rpb24oZmFpbHVyZXMsIHRvdGFsKSB7fSwKCWxvZzogZnVuY3Rpb24ocmVzdWx0LCBtZXNzYWdlKSB7fSwKCXRlc3RTdGFydDogZnVuY3Rpb24obmFtZSwgdGVzdEVudmlyb25tZW50KSB7fSwKCXRlc3REb25lOiBmdW5jdGlvbihuYW1lLCBmYWlsdXJlcywgdG90YWwpIHt9LAoJbW9kdWxlU3RhcnQ6IGZ1bmN0aW9uKG5hbWUsIHRlc3RFbnZpcm9ubWVudCkge30sCgltb2R1bGVEb25lOiBmdW5jdGlvbihuYW1lLCBmYWlsdXJlcywgdG90YWwpIHt9Cn0pOwoKaWYgKCB0eXBlb2YgZG9jdW1lbnQgPT09ICJ1bmRlZmluZWQiIHx8IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIgKSB7Cgljb25maWcuYXV0b3J1biA9IHRydWU7Cn0KCmFkZEV2ZW50KHdpbmRvdywgImxvYWQiLCBmdW5jdGlvbigpIHsKCVFVbml0LmJlZ2luKCk7CgoJLy8gSW5pdGlhbGl6ZSB0aGUgY29uZmlnLCBzYXZpbmcgdGhlIGV4ZWN1dGlvbiBxdWV1ZQoJdmFyIG9sZGNvbmZpZyA9IGV4dGVuZCh7fSwgY29uZmlnKTsKCVFVbml0LmluaXQoKTsKCWV4dGVuZChjb25maWcsIG9sZGNvbmZpZyk7CgoJY29uZmlnLmJsb2NraW5nID0gZmFsc2U7CgoJdmFyIHVzZXJBZ2VudCA9IGlkKCJxdW5pdC11c2VyQWdlbnQiKTsKCWlmICggdXNlckFnZW50ICkgewoJCXVzZXJBZ2VudC5pbm5lckhUTUwgPSBuYXZpZ2F0b3IudXNlckFnZW50OwoJfQoJdmFyIGJhbm5lciA9IGlkKCJxdW5pdC1oZWFkZXIiKTsKCWlmICggYmFubmVyICkgewoJCXZhciBwYXJhbXNJbmRleCA9IGxvY2F0aW9uLmhyZWYubGFzdEluZGV4T2YobG9jYXRpb24uc2VhcmNoKTsKCQlpZiAoIHBhcmFtc0luZGV4ID4gLTEgKSB7CgkJCXZhciBtYWluUGFnZUxvY2F0aW9uID0gbG9jYXRpb24uaHJlZi5zbGljZSgwLCBwYXJhbXNJbmRleCk7CgkJCWlmICggbWFpblBhZ2VMb2NhdGlvbiA9PSBsb2NhdGlvbi5ocmVmICkgewoJCQkJYmFubmVyLmlubmVySFRNTCA9ICc8YSBocmVmPSIiPiAnICsgYmFubmVyLmlubmVySFRNTCArICc8L2E+ICc7CgkJCX0gZWxzZSB7CgkJCQl2YXIgdGVzdE5hbWUgPSBkZWNvZGVVUklDb21wb25lbnQobG9jYXRpb24uc2VhcmNoLnNsaWNlKDEpKTsKCQkJCWJhbm5lci5pbm5lckhUTUwgPSAnPGEgaHJlZj0iJyArIG1haW5QYWdlTG9jYXRpb24gKyAnIj4nICsgYmFubmVyLmlubmVySFRNTCArICc8L2E+ICYjODI1MDsgPGEgaHJlZj0iIj4nICsgdGVzdE5hbWUgKyAnPC9hPic7CgkJCX0KCQl9Cgl9CgoJdmFyIHRvb2xiYXIgPSBpZCgicXVuaXQtdGVzdHJ1bm5lci10b29sYmFyIik7CglpZiAoIHRvb2xiYXIgKSB7CgkJdG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoKCQl2YXIgZmlsdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKTsKCQlmaWx0ZXIudHlwZSA9ICJjaGVja2JveCI7CgkJZmlsdGVyLmlkID0gInF1bml0LWZpbHRlci1wYXNzIjsKCQlmaWx0ZXIuZGlzYWJsZWQgPSB0cnVlOwoJCWFkZEV2ZW50KCBmaWx0ZXIsICJjbGljayIsIGZ1bmN0aW9uKCkgewoJCQl2YXIgbGkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgibGkiKTsKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgbGkubGVuZ3RoOyBpKysgKSB7CgkJCQlpZiAoIGxpW2ldLmNsYXNzTmFtZS5pbmRleE9mKCJwYXNzIikgPiAtMSApIHsKCQkJCQlsaVtpXS5zdHlsZS5kaXNwbGF5ID0gZmlsdGVyLmNoZWNrZWQgPyAibm9uZSIgOiAiIjsKCQkJCX0KCQkJfQoJCX0pOwoJCXRvb2xiYXIuYXBwZW5kQ2hpbGQoIGZpbHRlciApOwoKCQl2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsYWJlbCIpOwoJCWxhYmVsLnNldEF0dHJpYnV0ZSgiZm9yIiwgInF1bml0LWZpbHRlci1wYXNzIik7CgkJbGFiZWwuaW5uZXJIVE1MID0gIkhpZGUgcGFzc2VkIHRlc3RzIjsKCQl0b29sYmFyLmFwcGVuZENoaWxkKCBsYWJlbCApOwoJfQoKCXZhciBtYWluID0gaWQoJ21haW4nKSB8fCBpZCgncXVuaXQtZml4dHVyZScpOwoJaWYgKCBtYWluICkgewoJCWNvbmZpZy5maXh0dXJlID0gbWFpbi5pbm5lckhUTUw7Cgl9CgoJaWYgKGNvbmZpZy5hdXRvc3RhcnQpIHsKCQlRVW5pdC5zdGFydCgpOwoJfQp9KTsKCmZ1bmN0aW9uIGRvbmUoKSB7Cgljb25maWcuYXV0b3J1biA9IHRydWU7CgoJLy8gTG9nIHRoZSBsYXN0IG1vZHVsZSByZXN1bHRzCglpZiAoIGNvbmZpZy5jdXJyZW50TW9kdWxlICkgewoJCVFVbml0Lm1vZHVsZURvbmUoIGNvbmZpZy5jdXJyZW50TW9kdWxlLCBjb25maWcubW9kdWxlU3RhdHMuYmFkLCBjb25maWcubW9kdWxlU3RhdHMuYWxsICk7Cgl9CgoJdmFyIGJhbm5lciA9IGlkKCJxdW5pdC1iYW5uZXIiKSwKCQl0ZXN0cyA9IGlkKCJxdW5pdC10ZXN0cyIpLAoJCWh0bWwgPSBbJ1Rlc3RzIGNvbXBsZXRlZCBpbiAnLAoJCStuZXcgRGF0ZSAtIGNvbmZpZy5zdGFydGVkLCAnIG1pbGxpc2Vjb25kcy48YnIvPicsCgkJJzxzcGFuIGNsYXNzPSJwYXNzZWQiPicsIGNvbmZpZy5zdGF0cy5hbGwgLSBjb25maWcuc3RhdHMuYmFkLCAnPC9zcGFuPiB0ZXN0cyBvZiA8c3BhbiBjbGFzcz0idG90YWwiPicsIGNvbmZpZy5zdGF0cy5hbGwsICc8L3NwYW4+IHBhc3NlZCwgPHNwYW4gY2xhc3M9ImZhaWxlZCI+JywgY29uZmlnLnN0YXRzLmJhZCwnPC9zcGFuPiBmYWlsZWQuJ10uam9pbignJyk7CgoJaWYgKCBiYW5uZXIgKSB7CgkJYmFubmVyLmNsYXNzTmFtZSA9IChjb25maWcuc3RhdHMuYmFkID8gInF1bml0LWZhaWwiIDogInF1bml0LXBhc3MiKTsKCX0KCglpZiAoIHRlc3RzICkgewoJCXZhciByZXN1bHQgPSBpZCgicXVuaXQtdGVzdHJlc3VsdCIpOwoKCQlpZiAoICFyZXN1bHQgKSB7CgkJCXJlc3VsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInAiKTsKCQkJcmVzdWx0LmlkID0gInF1bml0LXRlc3RyZXN1bHQiOwoJCQlyZXN1bHQuY2xhc3NOYW1lID0gInJlc3VsdCI7CgkJCXRlc3RzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCByZXN1bHQsIHRlc3RzLm5leHRTaWJsaW5nICk7CgkJfQoKCQlyZXN1bHQuaW5uZXJIVE1MID0gaHRtbDsKCX0KCglRVW5pdC5kb25lKCBjb25maWcuc3RhdHMuYmFkLCBjb25maWcuc3RhdHMuYWxsICk7Cn0KCmZ1bmN0aW9uIHZhbGlkVGVzdCggbmFtZSApIHsKCXZhciBpID0gY29uZmlnLmZpbHRlcnMubGVuZ3RoLAoJCXJ1biA9IGZhbHNlOwoKCWlmICggIWkgKSB7CgkJcmV0dXJuIHRydWU7Cgl9CgoJd2hpbGUgKCBpLS0gKSB7CgkJdmFyIGZpbHRlciA9IGNvbmZpZy5maWx0ZXJzW2ldLAoJCQlub3QgPSBmaWx0ZXIuY2hhckF0KDApID09ICchJzsKCgkJaWYgKCBub3QgKSB7CgkJCWZpbHRlciA9IGZpbHRlci5zbGljZSgxKTsKCQl9CgoJCWlmICggbmFtZS5pbmRleE9mKGZpbHRlcikgIT09IC0xICkgewoJCQlyZXR1cm4gIW5vdDsKCQl9CgoJCWlmICggbm90ICkgewoJCQlydW4gPSB0cnVlOwoJCX0KCX0KCglyZXR1cm4gcnVuOwp9CgovLyBzbyBmYXIgc3VwcG9ydHMgb25seSBGaXJlZm94LCBDaHJvbWUgYW5kIE9wZXJhIChidWdneSkKLy8gY291bGQgYmUgZXh0ZW5kZWQgaW4gdGhlIGZ1dHVyZSB0byB1c2Ugc29tZXRoaW5nIGxpa2UgaHR0cHM6Ly9naXRodWIuY29tL2Nzbm92ZXIvVHJhY2VLaXQKZnVuY3Rpb24gc291cmNlRnJvbVN0YWNrdHJhY2UoKSB7Cgl0cnkgewoJCXRocm93IG5ldyBFcnJvcigpOwoJfSBjYXRjaCAoIGUgKSB7CgkJaWYgKGUuc3RhY2t0cmFjZSkgewoJCQkvLyBPcGVyYQoJCQlyZXR1cm4gZS5zdGFja3RyYWNlLnNwbGl0KCJcbiIpWzZdOwoJCX0gZWxzZSBpZiAoZS5zdGFjaykgewoJCQkvLyBGaXJlZm94LCBDaHJvbWUKCQkJcmV0dXJuIGUuc3RhY2suc3BsaXQoIlxuIilbNF07CgkJfQoJfQp9CgpmdW5jdGlvbiByZXN1bHREaXNwbGF5U3R5bGUocGFzc2VkKSB7CglyZXR1cm4gcGFzc2VkICYmIGlkKCJxdW5pdC1maWx0ZXItcGFzcyIpICYmIGlkKCJxdW5pdC1maWx0ZXItcGFzcyIpLmNoZWNrZWQgPyAnbm9uZScgOiAnJzsKfQoKZnVuY3Rpb24gZXNjYXBlSHRtbChzKSB7CglpZiAoIXMpIHsKCQlyZXR1cm4gIiI7Cgl9CglzID0gcyArICIiOwoJcmV0dXJuIHMucmVwbGFjZSgvW1wmIjw+XFxdL2csIGZ1bmN0aW9uKHMpIHsKCQlzd2l0Y2gocykgewoJCQljYXNlICImIjogcmV0dXJuICImYW1wOyI7CgkJCWNhc2UgIlxcIjogcmV0dXJuICJcXFxcIjsKCQkJY2FzZSAnIic6IHJldHVybiAnXCInOwoJCQljYXNlICI8IjogcmV0dXJuICImbHQ7IjsKCQkJY2FzZSAiPiI6IHJldHVybiAiJmd0OyI7CgkJCWRlZmF1bHQ6IHJldHVybiBzOwoJCX0KCX0pOwp9CgpmdW5jdGlvbiBzeW5jaHJvbml6ZSggY2FsbGJhY2sgKSB7Cgljb25maWcucXVldWUucHVzaCggY2FsbGJhY2sgKTsKCglpZiAoIGNvbmZpZy5hdXRvcnVuICYmICFjb25maWcuYmxvY2tpbmcgKSB7CgkJcHJvY2VzcygpOwoJfQp9CgpmdW5jdGlvbiBwcm9jZXNzKCkgewoJdmFyIHN0YXJ0ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsKCgl3aGlsZSAoIGNvbmZpZy5xdWV1ZS5sZW5ndGggJiYgIWNvbmZpZy5ibG9ja2luZyApIHsKCQlpZiAoIGNvbmZpZy51cGRhdGVSYXRlIDw9IDAgfHwgKCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gc3RhcnQpIDwgY29uZmlnLnVwZGF0ZVJhdGUpICkgewoJCQljb25maWcucXVldWUuc2hpZnQoKSgpOwoJCX0gZWxzZSB7CgkJCXdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzLCAxMyApOwoJCQlicmVhazsKCQl9Cgl9CiAgaWYgKCFjb25maWcuYmxvY2tpbmcgJiYgIWNvbmZpZy5xdWV1ZS5sZW5ndGgpIHsKICAgIGRvbmUoKTsKICB9Cn0KCmZ1bmN0aW9uIHNhdmVHbG9iYWwoKSB7Cgljb25maWcucG9sbHV0aW9uID0gW107CgoJaWYgKCBjb25maWcubm9nbG9iYWxzICkgewoJCWZvciAoIHZhciBrZXkgaW4gd2luZG93ICkgewoJCQljb25maWcucG9sbHV0aW9uLnB1c2goIGtleSApOwoJCX0KCX0KfQoKZnVuY3Rpb24gY2hlY2tQb2xsdXRpb24oIG5hbWUgKSB7Cgl2YXIgb2xkID0gY29uZmlnLnBvbGx1dGlvbjsKCXNhdmVHbG9iYWwoKTsKCgl2YXIgbmV3R2xvYmFscyA9IGRpZmYoIG9sZCwgY29uZmlnLnBvbGx1dGlvbiApOwoJaWYgKCBuZXdHbG9iYWxzLmxlbmd0aCA+IDAgKSB7CgkJb2soIGZhbHNlLCAiSW50cm9kdWNlZCBnbG9iYWwgdmFyaWFibGUocyk6ICIgKyBuZXdHbG9iYWxzLmpvaW4oIiwgIikgKTsKCQljb25maWcuY3VycmVudC5leHBlY3RlZCsrOwoJfQoKCXZhciBkZWxldGVkR2xvYmFscyA9IGRpZmYoIGNvbmZpZy5wb2xsdXRpb24sIG9sZCApOwoJaWYgKCBkZWxldGVkR2xvYmFscy5sZW5ndGggPiAwICkgewoJCW9rKCBmYWxzZSwgIkRlbGV0ZWQgZ2xvYmFsIHZhcmlhYmxlKHMpOiAiICsgZGVsZXRlZEdsb2JhbHMuam9pbigiLCAiKSApOwoJCWNvbmZpZy5jdXJyZW50LmV4cGVjdGVkKys7Cgl9Cn0KCi8vIHJldHVybnMgYSBuZXcgQXJyYXkgd2l0aCB0aGUgZWxlbWVudHMgdGhhdCBhcmUgaW4gYSBidXQgbm90IGluIGIKZnVuY3Rpb24gZGlmZiggYSwgYiApIHsKCXZhciByZXN1bHQgPSBhLnNsaWNlKCk7Cglmb3IgKCB2YXIgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKysgKSB7CgkJZm9yICggdmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGorKyApIHsKCQkJaWYgKCByZXN1bHRbaV0gPT09IGJbal0gKSB7CgkJCQlyZXN1bHQuc3BsaWNlKGksIDEpOwoJCQkJaS0tOwoJCQkJYnJlYWs7CgkJCX0KCQl9Cgl9CglyZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBmYWlsKG1lc3NhZ2UsIGV4Y2VwdGlvbiwgY2FsbGJhY2spIHsKCWlmICggdHlwZW9mIGNvbnNvbGUgIT09ICJ1bmRlZmluZWQiICYmIGNvbnNvbGUuZXJyb3IgJiYgY29uc29sZS53YXJuICkgewoJCWNvbnNvbGUuZXJyb3IobWVzc2FnZSk7CgkJY29uc29sZS5lcnJvcihleGNlcHRpb24pOwoJCWNvbnNvbGUud2FybihjYWxsYmFjay50b1N0cmluZygpKTsKCgl9IGVsc2UgaWYgKCB3aW5kb3cub3BlcmEgJiYgb3BlcmEucG9zdEVycm9yICkgewoJCW9wZXJhLnBvc3RFcnJvcihtZXNzYWdlLCBleGNlcHRpb24sIGNhbGxiYWNrLnRvU3RyaW5nKTsKCX0KfQoKZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHsKCWZvciAoIHZhciBwcm9wIGluIGIgKSB7CgkJYVtwcm9wXSA9IGJbcHJvcF07Cgl9CgoJcmV0dXJuIGE7Cn0KCmZ1bmN0aW9uIGFkZEV2ZW50KGVsZW0sIHR5cGUsIGZuKSB7CglpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHsKCQllbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGZuLCBmYWxzZSApOwoJfSBlbHNlIGlmICggZWxlbS5hdHRhY2hFdmVudCApIHsKCQllbGVtLmF0dGFjaEV2ZW50KCAib24iICsgdHlwZSwgZm4gKTsKCX0gZWxzZSB7CgkJZm4oKTsKCX0KfQoKZnVuY3Rpb24gaWQobmFtZSkgewoJcmV0dXJuICEhKHR5cGVvZiBkb2N1bWVudCAhPT0gInVuZGVmaW5lZCIgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQpICYmCgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG5hbWUgKTsKfQoKLy8gVGVzdCBmb3IgZXF1YWxpdHkgYW55IEphdmFTY3JpcHQgdHlwZS4KLy8gRGlzY3Vzc2lvbnMgYW5kIHJlZmVyZW5jZTogaHR0cDovL3BoaWxyYXRoZS5jb20vYXJ0aWNsZXMvZXF1aXYKLy8gVGVzdCBzdWl0ZXM6IGh0dHA6Ly9waGlscmF0aGUuY29tL3Rlc3RzL2VxdWl2Ci8vIEF1dGhvcjogUGhpbGlwcGUgUmF0aMOpIDxwcmF0aGVAZ21haWwuY29tPgpRVW5pdC5lcXVpdiA9IGZ1bmN0aW9uICgpIHsKCiAgICB2YXIgaW5uZXJFcXVpdjsgLy8gdGhlIHJlYWwgZXF1aXYgZnVuY3Rpb24KICAgIHZhciBjYWxsZXJzID0gW107IC8vIHN0YWNrIHRvIGRlY2lkZSBiZXR3ZWVuIHNraXAvYWJvcnQgZnVuY3Rpb25zCiAgICB2YXIgcGFyZW50cyA9IFtdOyAvLyBzdGFjayB0byBhdm9pZGluZyBsb29wcyBmcm9tIGNpcmN1bGFyIHJlZmVyZW5jaW5nCgogICAgLy8gQ2FsbCB0aGUgbyByZWxhdGVkIGNhbGxiYWNrIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50cy4KICAgIGZ1bmN0aW9uIGJpbmRDYWxsYmFja3MobywgY2FsbGJhY2tzLCBhcmdzKSB7CiAgICAgICAgdmFyIHByb3AgPSBRVW5pdC5vYmplY3RUeXBlKG8pOwogICAgICAgIGlmIChwcm9wKSB7CiAgICAgICAgICAgIGlmIChRVW5pdC5vYmplY3RUeXBlKGNhbGxiYWNrc1twcm9wXSkgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFja3NbcHJvcF0uYXBwbHkoY2FsbGJhY2tzLCBhcmdzKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFja3NbcHJvcF07IC8vIG9yIHVuZGVmaW5lZAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHZhciBjYWxsYmFja3MgPSBmdW5jdGlvbiAoKSB7CgogICAgICAgIC8vIGZvciBzdHJpbmcsIGJvb2xlYW4sIG51bWJlciBhbmQgbnVsbAogICAgICAgIGZ1bmN0aW9uIHVzZVN0cmljdEVxdWFsaXR5KGIsIGEpIHsKICAgICAgICAgICAgaWYgKGIgaW5zdGFuY2VvZiBhLmNvbnN0cnVjdG9yIHx8IGEgaW5zdGFuY2VvZiBiLmNvbnN0cnVjdG9yKSB7CiAgICAgICAgICAgICAgICAvLyB0byBjYXRjaCBzaG9ydCBhbm5vdGFpb24gVlMgJ25ldycgYW5ub3RhdGlvbiBvZiBhIGRlY2xhcmF0aW9uCiAgICAgICAgICAgICAgICAvLyBlLmcuIHZhciBpID0gMTsKICAgICAgICAgICAgICAgIC8vICAgICAgdmFyIGogPSBuZXcgTnVtYmVyKDEpOwogICAgICAgICAgICAgICAgcmV0dXJuIGEgPT0gYjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBhID09PSBiOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAic3RyaW5nIjogdXNlU3RyaWN0RXF1YWxpdHksCiAgICAgICAgICAgICJib29sZWFuIjogdXNlU3RyaWN0RXF1YWxpdHksCiAgICAgICAgICAgICJudW1iZXIiOiB1c2VTdHJpY3RFcXVhbGl0eSwKICAgICAgICAgICAgIm51bGwiOiB1c2VTdHJpY3RFcXVhbGl0eSwKICAgICAgICAgICAgInVuZGVmaW5lZCI6IHVzZVN0cmljdEVxdWFsaXR5LAoKICAgICAgICAgICAgIm5hbiI6IGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaXNOYU4oYik7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAiZGF0ZSI6IGZ1bmN0aW9uIChiLCBhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gUVVuaXQub2JqZWN0VHlwZShiKSA9PT0gImRhdGUiICYmIGEudmFsdWVPZigpID09PSBiLnZhbHVlT2YoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICJyZWdleHAiOiBmdW5jdGlvbiAoYiwgYSkgewogICAgICAgICAgICAgICAgcmV0dXJuIFFVbml0Lm9iamVjdFR5cGUoYikgPT09ICJyZWdleHAiICYmCiAgICAgICAgICAgICAgICAgICAgYS5zb3VyY2UgPT09IGIuc291cmNlICYmIC8vIHRoZSByZWdleCBpdHNlbGYKICAgICAgICAgICAgICAgICAgICBhLmdsb2JhbCA9PT0gYi5nbG9iYWwgJiYgLy8gYW5kIGl0cyBtb2RpZmVycyAoZ21pKSAuLi4KICAgICAgICAgICAgICAgICAgICBhLmlnbm9yZUNhc2UgPT09IGIuaWdub3JlQ2FzZSAmJgogICAgICAgICAgICAgICAgICAgIGEubXVsdGlsaW5lID09PSBiLm11bHRpbGluZTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIC0gc2tpcCB3aGVuIHRoZSBwcm9wZXJ0eSBpcyBhIG1ldGhvZCBvZiBhbiBpbnN0YW5jZSAoT09QKQogICAgICAgICAgICAvLyAtIGFib3J0IG90aGVyd2lzZSwKICAgICAgICAgICAgLy8gICBpbml0aWFsID09PSB3b3VsZCBoYXZlIGNhdGNoIGlkZW50aWNhbCByZWZlcmVuY2VzIGFueXdheQogICAgICAgICAgICAiZnVuY3Rpb24iOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgY2FsbGVyID0gY2FsbGVyc1tjYWxsZXJzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxlciAhPT0gT2JqZWN0ICYmCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjYWxsZXIgIT09ICJ1bmRlZmluZWQiOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgImFycmF5IjogZnVuY3Rpb24gKGIsIGEpIHsKICAgICAgICAgICAgICAgIHZhciBpLCBqLCBsb29wOwogICAgICAgICAgICAgICAgdmFyIGxlbjsKCiAgICAgICAgICAgICAgICAvLyBiIGNvdWxkIGJlIGFuIG9iamVjdCBsaXRlcmFsIGhlcmUKICAgICAgICAgICAgICAgIGlmICggISAoUVVuaXQub2JqZWN0VHlwZShiKSA9PT0gImFycmF5IikpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbGVuID0gYS5sZW5ndGg7CiAgICAgICAgICAgICAgICBpZiAobGVuICE9PSBiLmxlbmd0aCkgeyAvLyBzYWZlIGFuZCBmYXN0ZXIKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy90cmFjayByZWZlcmVuY2UgdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcwogICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGEpOwogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgbG9vcCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGZvcihqPTA7ajxwYXJlbnRzLmxlbmd0aDtqKyspewogICAgICAgICAgICAgICAgICAgICAgICBpZihwYXJlbnRzW2pdID09PSBhW2ldKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3AgPSB0cnVlOy8vZG9udCByZXdhbGsgYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoIWxvb3AgJiYgISBpbm5lckVxdWl2KGFbaV0sIGJbaV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJlbnRzLnBvcCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAib2JqZWN0IjogZnVuY3Rpb24gKGIsIGEpIHsKICAgICAgICAgICAgICAgIHZhciBpLCBqLCBsb29wOwogICAgICAgICAgICAgICAgdmFyIGVxID0gdHJ1ZTsgLy8gdW5sZXNzIHdlIGNhbiBwcm9vdmUgaXQKICAgICAgICAgICAgICAgIHZhciBhUHJvcGVydGllcyA9IFtdLCBiUHJvcGVydGllcyA9IFtdOyAvLyBjb2xsZWN0aW9uIG9mIHN0cmluZ3MKCiAgICAgICAgICAgICAgICAvLyBjb21wYXJpbmcgY29uc3RydWN0b3JzIGlzIG1vcmUgc3RyaWN0IHRoYW4gdXNpbmcgaW5zdGFuY2VvZgogICAgICAgICAgICAgICAgaWYgKCBhLmNvbnN0cnVjdG9yICE9PSBiLmNvbnN0cnVjdG9yKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIHN0YWNrIGNvbnN0cnVjdG9yIGJlZm9yZSB0cmF2ZXJzaW5nIHByb3BlcnRpZXMKICAgICAgICAgICAgICAgIGNhbGxlcnMucHVzaChhLmNvbnN0cnVjdG9yKTsKICAgICAgICAgICAgICAgIC8vdHJhY2sgcmVmZXJlbmNlIHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMKICAgICAgICAgICAgICAgIHBhcmVudHMucHVzaChhKTsKCiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gYSkgeyAvLyBiZSBzdHJpY3Q6IGRvbid0IGVuc3VyZXMgaGFzT3duUHJvcGVydHkgYW5kIGdvIGRlZXAKICAgICAgICAgICAgICAgICAgICBsb29wID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgZm9yKGo9MDtqPHBhcmVudHMubGVuZ3RoO2orKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhcmVudHNbal0gPT09IGFbaV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wID0gdHJ1ZTsgLy9kb24ndCBnbyBkb3duIHRoZSBzYW1lIHBhdGggdHdpY2UKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYVByb3BlcnRpZXMucHVzaChpKTsgLy8gY29sbGVjdCBhJ3MgcHJvcGVydGllcwoKICAgICAgICAgICAgICAgICAgICBpZiAoIWxvb3AgJiYgISBpbm5lckVxdWl2KGFbaV0sIGJbaV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVxID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjYWxsZXJzLnBvcCgpOyAvLyB1bnN0YWNrLCB3ZSBhcmUgZG9uZQogICAgICAgICAgICAgICAgcGFyZW50cy5wb3AoKTsKCiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gYikgewogICAgICAgICAgICAgICAgICAgIGJQcm9wZXJ0aWVzLnB1c2goaSk7IC8vIGNvbGxlY3QgYidzIHByb3BlcnRpZXMKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBFbnN1cmVzIGlkZW50aWNhbCBwcm9wZXJ0aWVzIG5hbWUKICAgICAgICAgICAgICAgIHJldHVybiBlcSAmJiBpbm5lckVxdWl2KGFQcm9wZXJ0aWVzLnNvcnQoKSwgYlByb3BlcnRpZXMuc29ydCgpKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9KCk7CgogICAgaW5uZXJFcXVpdiA9IGZ1bmN0aW9uICgpIHsgLy8gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzCiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKTsKICAgICAgICBpZiAoYXJncy5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBlbmQgdHJhbnNpdGlvbgogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICBpZiAoYSA9PT0gYikgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIGNhdGNoIHRoZSBtb3N0IHlvdSBjYW4KICAgICAgICAgICAgfSBlbHNlIGlmIChhID09PSBudWxsIHx8IGIgPT09IG51bGwgfHwgdHlwZW9mIGEgPT09ICJ1bmRlZmluZWQiIHx8IHR5cGVvZiBiID09PSAidW5kZWZpbmVkIiB8fCBRVW5pdC5vYmplY3RUeXBlKGEpICE9PSBRVW5pdC5vYmplY3RUeXBlKGIpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGRvbid0IGxvc2UgdGltZSB3aXRoIGVycm9yIHByb25lIGNhc2VzCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYmluZENhbGxiYWNrcyhhLCBjYWxsYmFja3MsIFtiLCBhXSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgLy8gYXBwbHkgdHJhbnNpdGlvbiB3aXRoICgxLi5uKSBhcmd1bWVudHMKICAgICAgICB9KShhcmdzWzBdLCBhcmdzWzFdKSAmJiBhcmd1bWVudHMuY2FsbGVlLmFwcGx5KHRoaXMsIGFyZ3Muc3BsaWNlKDEsIGFyZ3MubGVuZ3RoIC0xKSk7CiAgICB9OwoKICAgIHJldHVybiBpbm5lckVxdWl2OwoKfSgpOwoKLyoqCiAqIGpzRHVtcAogKiBDb3B5cmlnaHQgKGMpIDIwMDggQXJpZWwgRmxlc2xlciAtIGFmbGVzbGVyKGF0KWdtYWlsKGRvdCljb20gfCBodHRwOi8vZmxlc2xlci5ibG9nc3BvdC5jb20KICogTGljZW5zZWQgdW5kZXIgQlNEIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL2JzZC1saWNlbnNlLnBocCkKICogRGF0ZTogNS8xNS8yMDA4CiAqIEBwcm9qZWN0RGVzY3JpcHRpb24gQWR2YW5jZWQgYW5kIGV4dGVuc2libGUgZGF0YSBkdW1waW5nIGZvciBKYXZhc2NyaXB0LgogKiBAdmVyc2lvbiAxLjAuMAogKiBAYXV0aG9yIEFyaWVsIEZsZXNsZXIKICogQGxpbmsge2h0dHA6Ly9mbGVzbGVyLmJsb2dzcG90LmNvbS8yMDA4LzA1L2pzZHVtcC1wcmV0dHktZHVtcC1vZi1hbnktamF2YXNjcmlwdC5odG1sfQogKi8KUVVuaXQuanNEdW1wID0gKGZ1bmN0aW9uKCkgewoJZnVuY3Rpb24gcXVvdGUoIHN0ciApIHsKCQlyZXR1cm4gJyInICsgc3RyLnRvU3RyaW5nKCkucmVwbGFjZSgvIi9nLCAnXFwiJykgKyAnIic7Cgl9OwoJZnVuY3Rpb24gbGl0ZXJhbCggbyApIHsKCQlyZXR1cm4gbyArICcnOwoJfTsKCWZ1bmN0aW9uIGpvaW4oIHByZSwgYXJyLCBwb3N0ICkgewoJCXZhciBzID0ganNEdW1wLnNlcGFyYXRvcigpLAoJCQliYXNlID0ganNEdW1wLmluZGVudCgpLAoJCQlpbm5lciA9IGpzRHVtcC5pbmRlbnQoMSk7CgkJaWYgKCBhcnIuam9pbiApCgkJCWFyciA9IGFyci5qb2luKCAnLCcgKyBzICsgaW5uZXIgKTsKCQlpZiAoICFhcnIgKQoJCQlyZXR1cm4gcHJlICsgcG9zdDsKCQlyZXR1cm4gWyBwcmUsIGlubmVyICsgYXJyLCBiYXNlICsgcG9zdCBdLmpvaW4ocyk7Cgl9OwoJZnVuY3Rpb24gYXJyYXkoIGFyciApIHsKCQl2YXIgaSA9IGFyci5sZW5ndGgsCXJldCA9IEFycmF5KGkpOwoJCXRoaXMudXAoKTsKCQl3aGlsZSAoIGktLSApCgkJCXJldFtpXSA9IHRoaXMucGFyc2UoIGFycltpXSApOwoJCXRoaXMuZG93bigpOwoJCXJldHVybiBqb2luKCAnWycsIHJldCwgJ10nICk7Cgl9OwoKCXZhciByZU5hbWUgPSAvXmZ1bmN0aW9uIChcdyspLzsKCgl2YXIganNEdW1wID0gewoJCXBhcnNlOmZ1bmN0aW9uKCBvYmosIHR5cGUgKSB7IC8vdHlwZSBpcyB1c2VkIG1vc3RseSBpbnRlcm5hbGx5LCB5b3UgY2FuIGZpeCBhIChjdXN0b20pdHlwZSBpbiBhZHZhbmNlCgkJCXZhcglwYXJzZXIgPSB0aGlzLnBhcnNlcnNbIHR5cGUgfHwgdGhpcy50eXBlT2Yob2JqKSBdOwoJCQl0eXBlID0gdHlwZW9mIHBhcnNlcjsKCgkJCXJldHVybiB0eXBlID09ICdmdW5jdGlvbicgPyBwYXJzZXIuY2FsbCggdGhpcywgb2JqICkgOgoJCQkJICAgdHlwZSA9PSAnc3RyaW5nJyA/IHBhcnNlciA6CgkJCQkgICB0aGlzLnBhcnNlcnMuZXJyb3I7CgkJfSwKCQl0eXBlT2Y6ZnVuY3Rpb24oIG9iaiApIHsKCQkJdmFyIHR5cGU7CgkJCWlmICggb2JqID09PSBudWxsICkgewoJCQkJdHlwZSA9ICJudWxsIjsKCQkJfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAidW5kZWZpbmVkIikgewoJCQkJdHlwZSA9ICJ1bmRlZmluZWQiOwoJCQl9IGVsc2UgaWYgKFFVbml0LmlzKCJSZWdFeHAiLCBvYmopKSB7CgkJCQl0eXBlID0gInJlZ2V4cCI7CgkJCX0gZWxzZSBpZiAoUVVuaXQuaXMoIkRhdGUiLCBvYmopKSB7CgkJCQl0eXBlID0gImRhdGUiOwoJCQl9IGVsc2UgaWYgKFFVbml0LmlzKCJGdW5jdGlvbiIsIG9iaikpIHsKCQkJCXR5cGUgPSAiZnVuY3Rpb24iOwoJCQl9IGVsc2UgaWYgKHR5cGVvZiBvYmouc2V0SW50ZXJ2YWwgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2JqLmRvY3VtZW50ICE9PSAidW5kZWZpbmVkIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlID09PSAidW5kZWZpbmVkIikgewoJCQkJdHlwZSA9ICJ3aW5kb3ciOwoJCQl9IGVsc2UgaWYgKG9iai5ub2RlVHlwZSA9PT0gOSkgewoJCQkJdHlwZSA9ICJkb2N1bWVudCI7CgkJCX0gZWxzZSBpZiAob2JqLm5vZGVUeXBlKSB7CgkJCQl0eXBlID0gIm5vZGUiOwoJCQl9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICJvYmplY3QiICYmIHR5cGVvZiBvYmoubGVuZ3RoID09PSAibnVtYmVyIiAmJiBvYmoubGVuZ3RoID49IDApIHsKCQkJCXR5cGUgPSAiYXJyYXkiOwoJCQl9IGVsc2UgewoJCQkJdHlwZSA9IHR5cGVvZiBvYmo7CgkJCX0KCQkJcmV0dXJuIHR5cGU7CgkJfSwKCQlzZXBhcmF0b3I6ZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLm11bHRpbGluZSA/CXRoaXMuSFRNTCA/ICc8YnIgLz4nIDogJ1xuJyA6IHRoaXMuSFRNTCA/ICcmbmJzcDsnIDogJyAnOwoJCX0sCgkJaW5kZW50OmZ1bmN0aW9uKCBleHRyYSApIHsvLyBleHRyYSBjYW4gYmUgYSBudW1iZXIsIHNob3J0Y3V0IGZvciBpbmNyZWFzaW5nLWNhbGxpbmctZGVjcmVhc2luZwoJCQlpZiAoICF0aGlzLm11bHRpbGluZSApCgkJCQlyZXR1cm4gJyc7CgkJCXZhciBjaHIgPSB0aGlzLmluZGVudENoYXI7CgkJCWlmICggdGhpcy5IVE1MICkKCQkJCWNociA9IGNoci5yZXBsYWNlKC9cdC9nLCcgICAnKS5yZXBsYWNlKC8gL2csJyZuYnNwOycpOwoJCQlyZXR1cm4gQXJyYXkoIHRoaXMuX2RlcHRoXyArIChleHRyYXx8MCkgKS5qb2luKGNocik7CgkJfSwKCQl1cDpmdW5jdGlvbiggYSApIHsKCQkJdGhpcy5fZGVwdGhfICs9IGEgfHwgMTsKCQl9LAoJCWRvd246ZnVuY3Rpb24oIGEgKSB7CgkJCXRoaXMuX2RlcHRoXyAtPSBhIHx8IDE7CgkJfSwKCQlzZXRQYXJzZXI6ZnVuY3Rpb24oIG5hbWUsIHBhcnNlciApIHsKCQkJdGhpcy5wYXJzZXJzW25hbWVdID0gcGFyc2VyOwoJCX0sCgkJLy8gVGhlIG5leHQgMyBhcmUgZXhwb3NlZCBzbyB5b3UgY2FuIHVzZSB0aGVtCgkJcXVvdGU6cXVvdGUsCgkJbGl0ZXJhbDpsaXRlcmFsLAoJCWpvaW46am9pbiwKCQkvLwoJCV9kZXB0aF86IDEsCgkJLy8gVGhpcyBpcyB0aGUgbGlzdCBvZiBwYXJzZXJzLCB0byBtb2RpZnkgdGhlbSwgdXNlIGpzRHVtcC5zZXRQYXJzZXIKCQlwYXJzZXJzOnsKCQkJd2luZG93OiAnW1dpbmRvd10nLAoJCQlkb2N1bWVudDogJ1tEb2N1bWVudF0nLAoJCQllcnJvcjonW0VSUk9SXScsIC8vd2hlbiBubyBwYXJzZXIgaXMgZm91bmQsIHNob3VsZG4ndCBoYXBwZW4KCQkJdW5rbm93bjogJ1tVbmtub3duXScsCgkJCSdudWxsJzonbnVsbCcsCgkJCXVuZGVmaW5lZDondW5kZWZpbmVkJywKCQkJJ2Z1bmN0aW9uJzpmdW5jdGlvbiggZm4gKSB7CgkJCQl2YXIgcmV0ID0gJ2Z1bmN0aW9uJywKCQkJCQluYW1lID0gJ25hbWUnIGluIGZuID8gZm4ubmFtZSA6IChyZU5hbWUuZXhlYyhmbil8fFtdKVsxXTsvL2Z1bmN0aW9ucyBuZXZlciBoYXZlIG5hbWUgaW4gSUUKCQkJCWlmICggbmFtZSApCgkJCQkJcmV0ICs9ICcgJyArIG5hbWU7CgkJCQlyZXQgKz0gJygnOwoKCQkJCXJldCA9IFsgcmV0LCBRVW5pdC5qc0R1bXAucGFyc2UoIGZuLCAnZnVuY3Rpb25BcmdzJyApLCAnKXsnXS5qb2luKCcnKTsKCQkJCXJldHVybiBqb2luKCByZXQsIFFVbml0LmpzRHVtcC5wYXJzZShmbiwnZnVuY3Rpb25Db2RlJyksICd9JyApOwoJCQl9LAoJCQlhcnJheTogYXJyYXksCgkJCW5vZGVsaXN0OiBhcnJheSwKCQkJYXJndW1lbnRzOiBhcnJheSwKCQkJb2JqZWN0OmZ1bmN0aW9uKCBtYXAgKSB7CgkJCQl2YXIgcmV0ID0gWyBdOwoJCQkJUVVuaXQuanNEdW1wLnVwKCk7CgkJCQlmb3IgKCB2YXIga2V5IGluIG1hcCApCgkJCQkJcmV0LnB1c2goIFFVbml0LmpzRHVtcC5wYXJzZShrZXksJ2tleScpICsgJzogJyArIFFVbml0LmpzRHVtcC5wYXJzZShtYXBba2V5XSkgKTsKCQkJCVFVbml0LmpzRHVtcC5kb3duKCk7CgkJCQlyZXR1cm4gam9pbiggJ3snLCByZXQsICd9JyApOwoJCQl9LAoJCQlub2RlOmZ1bmN0aW9uKCBub2RlICkgewoJCQkJdmFyIG9wZW4gPSBRVW5pdC5qc0R1bXAuSFRNTCA/ICcmbHQ7JyA6ICc8JywKCQkJCQljbG9zZSA9IFFVbml0LmpzRHVtcC5IVE1MID8gJyZndDsnIDogJz4nOwoKCQkJCXZhciB0YWcgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksCgkJCQkJcmV0ID0gb3BlbiArIHRhZzsKCgkJCQlmb3IgKCB2YXIgYSBpbiBRVW5pdC5qc0R1bXAuRE9NQXR0cnMgKSB7CgkJCQkJdmFyIHZhbCA9IG5vZGVbUVVuaXQuanNEdW1wLkRPTUF0dHJzW2FdXTsKCQkJCQlpZiAoIHZhbCApCgkJCQkJCXJldCArPSAnICcgKyBhICsgJz0nICsgUVVuaXQuanNEdW1wLnBhcnNlKCB2YWwsICdhdHRyaWJ1dGUnICk7CgkJCQl9CgkJCQlyZXR1cm4gcmV0ICsgY2xvc2UgKyBvcGVuICsgJy8nICsgdGFnICsgY2xvc2U7CgkJCX0sCgkJCWZ1bmN0aW9uQXJnczpmdW5jdGlvbiggZm4gKSB7Ly9mdW5jdGlvbiBjYWxscyBpdCBpbnRlcm5hbGx5LCBpdCdzIHRoZSBhcmd1bWVudHMgcGFydCBvZiB0aGUgZnVuY3Rpb24KCQkJCXZhciBsID0gZm4ubGVuZ3RoOwoJCQkJaWYgKCAhbCApIHJldHVybiAnJzsKCgkJCQl2YXIgYXJncyA9IEFycmF5KGwpOwoJCQkJd2hpbGUgKCBsLS0gKQoJCQkJCWFyZ3NbbF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDk3K2wpOy8vOTcgaXMgJ2EnCgkJCQlyZXR1cm4gJyAnICsgYXJncy5qb2luKCcsICcpICsgJyAnOwoJCQl9LAoJCQlrZXk6cXVvdGUsIC8vb2JqZWN0IGNhbGxzIGl0IGludGVybmFsbHksIHRoZSBrZXkgcGFydCBvZiBhbiBpdGVtIGluIGEgbWFwCgkJCWZ1bmN0aW9uQ29kZTonW2NvZGVdJywgLy9mdW5jdGlvbiBjYWxscyBpdCBpbnRlcm5hbGx5LCBpdCdzIHRoZSBjb250ZW50IG9mIHRoZSBmdW5jdGlvbgoJCQlhdHRyaWJ1dGU6cXVvdGUsIC8vbm9kZSBjYWxscyBpdCBpbnRlcm5hbGx5LCBpdCdzIGFuIGh0bWwgYXR0cmlidXRlIHZhbHVlCgkJCXN0cmluZzpxdW90ZSwKCQkJZGF0ZTpxdW90ZSwKCQkJcmVnZXhwOmxpdGVyYWwsIC8vcmVnZXgKCQkJbnVtYmVyOmxpdGVyYWwsCgkJCSdib29sZWFuJzpsaXRlcmFsCgkJfSwKCQlET01BdHRyczp7Ly9hdHRyaWJ1dGVzIHRvIGR1bXAgZnJvbSBub2RlcywgbmFtZT0+cmVhbE5hbWUKCQkJaWQ6J2lkJywKCQkJbmFtZTonbmFtZScsCgkJCSdjbGFzcyc6J2NsYXNzTmFtZScKCQl9LAoJCUhUTUw6ZmFsc2UsLy9pZiB0cnVlLCBlbnRpdGllcyBhcmUgZXNjYXBlZCAoIDwsID4sIFx0LCBzcGFjZSBhbmQgXG4gKQoJCWluZGVudENoYXI6JyAgJywvL2luZGVudGF0aW9uIHVuaXQKCQltdWx0aWxpbmU6dHJ1ZSAvL2lmIHRydWUsIGl0ZW1zIGluIGEgY29sbGVjdGlvbiwgYXJlIHNlcGFyYXRlZCBieSBhIFxuLCBlbHNlIGp1c3QgYSBzcGFjZS4KCX07CgoJcmV0dXJuIGpzRHVtcDsKfSkoKTsKCi8vIGZyb20gU2l6emxlLmpzCmZ1bmN0aW9uIGdldFRleHQoIGVsZW1zICkgewoJdmFyIHJldCA9ICIiLCBlbGVtOwoKCWZvciAoIHZhciBpID0gMDsgZWxlbXNbaV07IGkrKyApIHsKCQllbGVtID0gZWxlbXNbaV07CgoJCS8vIEdldCB0aGUgdGV4dCBmcm9tIHRleHQgbm9kZXMgYW5kIENEQVRBIG5vZGVzCgkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDQgKSB7CgkJCXJldCArPSBlbGVtLm5vZGVWYWx1ZTsKCgkJLy8gVHJhdmVyc2UgZXZlcnl0aGluZyBlbHNlLCBleGNlcHQgY29tbWVudCBub2RlcwoJCX0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgIT09IDggKSB7CgkJCXJldCArPSBnZXRUZXh0KCBlbGVtLmNoaWxkTm9kZXMgKTsKCQl9Cgl9CgoJcmV0dXJuIHJldDsKfTsKCi8qCiAqIEphdmFzY3JpcHQgRGlmZiBBbGdvcml0aG0KICogIEJ5IEpvaG4gUmVzaWcgKGh0dHA6Ly9lam9obi5vcmcvKQogKiAgTW9kaWZpZWQgYnkgQ2h1IEFsYW4gInNwcml0ZSIKICoKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKgogKiBNb3JlIEluZm86CiAqICBodHRwOi8vZWpvaG4ub3JnL3Byb2plY3RzL2phdmFzY3JpcHQtZGlmZi1hbGdvcml0aG0vCiAqCiAqIFVzYWdlOiBRVW5pdC5kaWZmKGV4cGVjdGVkLCBhY3R1YWwpCiAqCiAqIFFVbml0LmRpZmYoInRoZSBxdWljayBicm93biBmb3gganVtcGVkIG92ZXIiLCAidGhlIHF1aWNrIGZveCBqdW1wcyBvdmVyIikgPT0gInRoZSAgcXVpY2sgPGRlbD5icm93biA8L2RlbD4gZm94IDxkZWw+anVtcGVkIDwvZGVsPjxpbnM+anVtcHMgPC9pbnM+IG92ZXIiCiAqLwpRVW5pdC5kaWZmID0gKGZ1bmN0aW9uKCkgewoJZnVuY3Rpb24gZGlmZihvLCBuKXsKCQl2YXIgbnMgPSBuZXcgT2JqZWN0KCk7CgkJdmFyIG9zID0gbmV3IE9iamVjdCgpOwoKCQlmb3IgKHZhciBpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspIHsKCQkJaWYgKG5zW25baV1dID09IG51bGwpCgkJCQluc1tuW2ldXSA9IHsKCQkJCQlyb3dzOiBuZXcgQXJyYXkoKSwKCQkJCQlvOiBudWxsCgkJCQl9OwoJCQluc1tuW2ldXS5yb3dzLnB1c2goaSk7CgkJfQoKCQlmb3IgKHZhciBpID0gMDsgaSA8IG8ubGVuZ3RoOyBpKyspIHsKCQkJaWYgKG9zW29baV1dID09IG51bGwpCgkJCQlvc1tvW2ldXSA9IHsKCQkJCQlyb3dzOiBuZXcgQXJyYXkoKSwKCQkJCQluOiBudWxsCgkJCQl9OwoJCQlvc1tvW2ldXS5yb3dzLnB1c2goaSk7CgkJfQoKCQlmb3IgKHZhciBpIGluIG5zKSB7CgkJCWlmIChuc1tpXS5yb3dzLmxlbmd0aCA9PSAxICYmIHR5cGVvZihvc1tpXSkgIT0gInVuZGVmaW5lZCIgJiYgb3NbaV0ucm93cy5sZW5ndGggPT0gMSkgewoJCQkJbltuc1tpXS5yb3dzWzBdXSA9IHsKCQkJCQl0ZXh0OiBuW25zW2ldLnJvd3NbMF1dLAoJCQkJCXJvdzogb3NbaV0ucm93c1swXQoJCQkJfTsKCQkJCW9bb3NbaV0ucm93c1swXV0gPSB7CgkJCQkJdGV4dDogb1tvc1tpXS5yb3dzWzBdXSwKCQkJCQlyb3c6IG5zW2ldLnJvd3NbMF0KCQkJCX07CgkJCX0KCQl9CgoJCWZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGggLSAxOyBpKyspIHsKCQkJaWYgKG5baV0udGV4dCAhPSBudWxsICYmIG5baSArIDFdLnRleHQgPT0gbnVsbCAmJiBuW2ldLnJvdyArIDEgPCBvLmxlbmd0aCAmJiBvW25baV0ucm93ICsgMV0udGV4dCA9PSBudWxsICYmCgkJCW5baSArIDFdID09IG9bbltpXS5yb3cgKyAxXSkgewoJCQkJbltpICsgMV0gPSB7CgkJCQkJdGV4dDogbltpICsgMV0sCgkJCQkJcm93OiBuW2ldLnJvdyArIDEKCQkJCX07CgkJCQlvW25baV0ucm93ICsgMV0gPSB7CgkJCQkJdGV4dDogb1tuW2ldLnJvdyArIDFdLAoJCQkJCXJvdzogaSArIDEKCQkJCX07CgkJCX0KCQl9CgoJCWZvciAodmFyIGkgPSBuLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHsKCQkJaWYgKG5baV0udGV4dCAhPSBudWxsICYmIG5baSAtIDFdLnRleHQgPT0gbnVsbCAmJiBuW2ldLnJvdyA+IDAgJiYgb1tuW2ldLnJvdyAtIDFdLnRleHQgPT0gbnVsbCAmJgoJCQluW2kgLSAxXSA9PSBvW25baV0ucm93IC0gMV0pIHsKCQkJCW5baSAtIDFdID0gewoJCQkJCXRleHQ6IG5baSAtIDFdLAoJCQkJCXJvdzogbltpXS5yb3cgLSAxCgkJCQl9OwoJCQkJb1tuW2ldLnJvdyAtIDFdID0gewoJCQkJCXRleHQ6IG9bbltpXS5yb3cgLSAxXSwKCQkJCQlyb3c6IGkgLSAxCgkJCQl9OwoJCQl9CgkJfQoKCQlyZXR1cm4gewoJCQlvOiBvLAoJCQluOiBuCgkJfTsKCX0KCglyZXR1cm4gZnVuY3Rpb24obywgbil7CgkJbyA9IG8ucmVwbGFjZSgvXHMrJC8sICcnKTsKCQluID0gbi5yZXBsYWNlKC9ccyskLywgJycpOwoJCXZhciBvdXQgPSBkaWZmKG8gPT0gIiIgPyBbXSA6IG8uc3BsaXQoL1xzKy8pLCBuID09ICIiID8gW10gOiBuLnNwbGl0KC9ccysvKSk7CgoJCXZhciBzdHIgPSAiIjsKCgkJdmFyIG9TcGFjZSA9IG8ubWF0Y2goL1xzKy9nKTsKCQlpZiAob1NwYWNlID09IG51bGwpIHsKCQkJb1NwYWNlID0gWyIgIl07CgkJfQoJCWVsc2UgewoJCQlvU3BhY2UucHVzaCgiICIpOwoJCX0KCQl2YXIgblNwYWNlID0gbi5tYXRjaCgvXHMrL2cpOwoJCWlmIChuU3BhY2UgPT0gbnVsbCkgewoJCQluU3BhY2UgPSBbIiAiXTsKCQl9CgkJZWxzZSB7CgkJCW5TcGFjZS5wdXNoKCIgIik7CgkJfQoKCQlpZiAob3V0Lm4ubGVuZ3RoID09IDApIHsKCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBvdXQuby5sZW5ndGg7IGkrKykgewoJCQkJc3RyICs9ICc8ZGVsPicgKyBvdXQub1tpXSArIG9TcGFjZVtpXSArICI8L2RlbD4iOwoJCQl9CgkJfQoJCWVsc2UgewoJCQlpZiAob3V0Lm5bMF0udGV4dCA9PSBudWxsKSB7CgkJCQlmb3IgKG4gPSAwOyBuIDwgb3V0Lm8ubGVuZ3RoICYmIG91dC5vW25dLnRleHQgPT0gbnVsbDsgbisrKSB7CgkJCQkJc3RyICs9ICc8ZGVsPicgKyBvdXQub1tuXSArIG9TcGFjZVtuXSArICI8L2RlbD4iOwoJCQkJfQoJCQl9CgoJCQlmb3IgKHZhciBpID0gMDsgaSA8IG91dC5uLmxlbmd0aDsgaSsrKSB7CgkJCQlpZiAob3V0Lm5baV0udGV4dCA9PSBudWxsKSB7CgkJCQkJc3RyICs9ICc8aW5zPicgKyBvdXQubltpXSArIG5TcGFjZVtpXSArICI8L2lucz4iOwoJCQkJfQoJCQkJZWxzZSB7CgkJCQkJdmFyIHByZSA9ICIiOwoKCQkJCQlmb3IgKG4gPSBvdXQubltpXS5yb3cgKyAxOyBuIDwgb3V0Lm8ubGVuZ3RoICYmIG91dC5vW25dLnRleHQgPT0gbnVsbDsgbisrKSB7CgkJCQkJCXByZSArPSAnPGRlbD4nICsgb3V0Lm9bbl0gKyBvU3BhY2Vbbl0gKyAiPC9kZWw+IjsKCQkJCQl9CgkJCQkJc3RyICs9ICIgIiArIG91dC5uW2ldLnRleHQgKyBuU3BhY2VbaV0gKyBwcmU7CgkJCQl9CgkJCX0KCQl9CgoJCXJldHVybiBzdHI7Cgl9Owp9KSgpOwoKfSkodGhpcyk7Cg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 07:16:31 GMT",
                    "Content-Length": "36094",
                    "Date": "Fri, 07 Nov 2014 07:16:31 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}