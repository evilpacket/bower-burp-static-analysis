{
    "url": "http://localhost:9999/driftyco/ng-cordova/demo/www/lib/ionic/js/ionic.bundle.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>the 'name' property of a DOM element</b> via the following statement:<ul><li>window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/driftyco/ng-cordova/demo/www/lib/ionic/js/ionic.bundle.js",
                "path": "/driftyco/ng-cordova/demo/www/lib/ionic/js/ionic.bundle.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9kcmlmdHljby9uZy1jb3Jkb3ZhL2RlbW8vd3d3L2xpYi9pb25pYy9qcy9pb25pYy5idW5kbGUuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "HTTP/1.1 200 OK
Content-Length: 1569910
Accept-Ranges: bytes
Content-Type: application/javascript
Date: Fri, 07 Nov 2014 19:00:04 GMT
Last-Modified: Fri, 07 Nov 2014 18:59:35 GMT

/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/*!
 * Copyright 2014 Drifty Co.
 * http://drifty.com/
 *
 * Ionic, v1.0.0-beta.11
 * A powerful HTML5 mobile app framework.
 * http://ionicframework.com/
 *
 * By @maxlynch, @benjsperry, @adamdbradley <3
 *
 * Licensed under the MIT license. Please see LICENSE for more information.
 *
 */

(function() {

// Create namespaces
//
  window.ionic = {
    controllers: {},
    views: {},
    version: '1.0.0-beta.11'
  };

  (function(window, document, ionic) {

    var readyCallbacks = [];
    var isDomReady = false;

    function domReady() {
      isDomReady = true;
      for(var x=0; x<readyCallbacks.length; x++) {
        ionic.requestAnimationFrame(readyCallbacks[x]);
      }
      readyCallbacks = [];
      document.removeEventListener('DOMContentLoaded', domReady);
    }
    document.addEventListener('DOMContentLoaded', domReady);

    // From the man himself, Mr. Paul Irish.
    // The requestAnimationFrame polyfill
    // Put it on window just to preserve its context
    // without having to use .call
    window._rAF = (function(){
      return  window.requestAnimationFrame       ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame    ||
        function( callback ){
          window.setTimeout(callback, 16);
        };
    })();

    var cancelAnimationFrame = window.cancelAnimationFrame ||
      window.webkitCancelAnimationFrame ||
      window.mozCancelAnimationFrame ||
      window.webkitCancelRequestAnimationFrame;

    /**
     * @ngdoc utility
     * @name ionic.DomUtil
     * @module ionic
     */
    ionic.DomUtil = {
      //Call with proper context
      /**
       * @ngdoc method
       * @name ionic.DomUtil#requestAnimationFrame
       * @alias ionic.requestAnimationFrame
       * @description Calls [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame), or a polyfill if not available.
       * @param {function} callback The function to call when the next frame
       * happens.
       */
      requestAnimationFrame: function(cb) {
        return window._rAF(cb);
      },

      cancelAnimationFrame: function(requestId) {
        cancelAnimationFrame(requestId);
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#animationFrameThrottle
       * @alias ionic.animationFrameThrottle
       * @description
       * When given a callback, if that callback is called 100 times between
       * animation frames, adding Throttle will make it only run the last of
       * the 100 calls.
       *
       * @param {function} callback a function which will be throttled to
       * requestAnimationFrame
       * @returns {function} A function which will then call the passed in callback.
       * The passed in callback will receive the context the returned function is
       * called with.
       */
      animationFrameThrottle: function(cb) {
        var args, isQueued, context;
        return function() {
          args = arguments;
          context = this;
          if (!isQueued) {
            isQueued = true;
            ionic.requestAnimationFrame(function() {
              cb.apply(context, args);
              isQueued = false;
            });
          }
        };
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#getPositionInParent
       * @description
       * Find an element's scroll offset within its container.
       * @param {DOMElement} element The element to find the offset of.
       * @returns {object} A position object with the following properties:
       *   - `{number}` `left` The left offset of the element.
       *   - `{number}` `top` The top offset of the element.
       */
      getPositionInParent: function(el) {
        return {
          left: el.offsetLeft,
          top: el.offsetTop
        };
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#ready
       * @description
       * Call a function when the DOM is ready, or if it is already ready
       * call the function immediately.
       * @param {function} callback The function to be called.
       */
      ready: function(cb) {
        if(isDomReady || document.readyState === "complete") {
          ionic.requestAnimationFrame(cb);
        } else {
          readyCallbacks.push(cb);
        }
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#getTextBounds
       * @description
       * Get a rect representing the bounds of the given textNode.
       * @param {DOMElement} textNode The textNode to find the bounds of.
       * @returns {object} An object representing the bounds of the node. Properties:
       *   - `{number}` `left` The left positton of the textNode.
       *   - `{number}` `right` The right positton of the textNode.
       *   - `{number}` `top` The top positton of the textNode.
       *   - `{number}` `bottom` The bottom position of the textNode.
       *   - `{number}` `width` The width of the textNode.
       *   - `{number}` `height` The height of the textNode.
       */
      getTextBounds: function(textNode) {
        if(document.createRange) {
          var range = document.createRange();
          range.selectNodeContents(textNode);
          if(range.getBoundingClientRect) {
            var rect = range.getBoundingClientRect();
            if(rect) {
              var sx = window.scrollX;
              var sy = window.scrollY;

              return {
                top: rect.top + sy,
                left: rect.left + sx,
                right: rect.left + sx + rect.width,
                bottom: rect.top + sy + rect.height,
                width: rect.width,
                height: rect.height
              };
            }
          }
        }
        return null;
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#getChildIndex
       * @description
       * Get the first index of a child node within the given element of the
       * specified type.
       * @param {DOMElement} element The element to find the index of.
       * @param {string} type The nodeName to match children of element against.
       * @returns {number} The index, or -1, of a child with nodeName matching type.
       */
      getChildIndex: function(element, type) {
        if(type) {
          var ch = element.parentNode.children;
          var c;
          for(var i = 0, k = 0, j = ch.length; i < j; i++) {
            c = ch[i];
            if(c.nodeName && c.nodeName.toLowerCase() == type) {
              if(c == element) {
                return k;
              }
              k++;
            }
          }
        }
        return Array.prototype.slice.call(element.parentNode.children).indexOf(element);
      },

      /**
       * @private
       */
      swapNodes: function(src, dest) {
        dest.parentNode.insertBefore(src, dest);
      },

      /**
       * @private
       */
      centerElementByMargin: function(el) {
        el.style.marginLeft = (-el.offsetWidth) / 2 + 'px';
        el.style.marginTop = (-el.offsetHeight) / 2 + 'px';
      },
      //Center twice, after raf, to fix a bug with ios and showing elements
      //that have just been attached to the DOM.
      centerElementByMarginTwice: function(el) {
        ionic.requestAnimationFrame(function() {
          ionic.DomUtil.centerElementByMargin(el);
          setTimeout(function() {
            ionic.DomUtil.centerElementByMargin(el);
            setTimeout(function() {
              ionic.DomUtil.centerElementByMargin(el);
            });
          });
        });
      },

      elementIsDescendant: function(el, parent, stopAt) {
        var current = el;
        do {
          if (current === parent) return true;
          current = current.parentNode;
        } while (current && current !== stopAt);
        return false;
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#getParentWithClass
       * @param {DOMElement} element
       * @param {string} className
       * @returns {DOMElement} The closest parent of element matching the
       * className, or null.
       */
      getParentWithClass: function(e, className, depth) {
        depth = depth || 10;
        while(e.parentNode && depth--) {
          if(e.parentNode.classList && e.parentNode.classList.contains(className)) {
            return e.parentNode;
          }
          e = e.parentNode;
        }
        return null;
      },
      /**
       * @ngdoc method
       * @name ionic.DomUtil#getParentOrSelfWithClass
       * @param {DOMElement} element
       * @param {string} className
       * @returns {DOMElement} The closest parent or self matching the
       * className, or null.
       */
      getParentOrSelfWithClass: function(e, className, depth) {
        depth = depth || 10;
        while(e && depth--) {
          if(e.classList && e.classList.contains(className)) {
            return e;
          }
          e = e.parentNode;
        }
        return null;
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#rectContains
       * @param {number} x
       * @param {number} y
       * @param {number} x1
       * @param {number} y1
       * @param {number} x2
       * @param {number} y2
       * @returns {boolean} Whether {x,y} fits within the rectangle defined by
       * {x1,y1,x2,y2}.
       */
      rectContains: function(x, y, x1, y1, x2, y2) {
        if(x < x1 || x > x2) return false;
        if(y < y1 || y > y2) return false;
        return true;
      }
    };

    //Shortcuts
    ionic.requestAnimationFrame = ionic.DomUtil.requestAnimationFrame;
    ionic.cancelAnimationFrame = ionic.DomUtil.cancelAnimationFrame;
    ionic.animationFrameThrottle = ionic.DomUtil.animationFrameThrottle;
  })(window, document, ionic);

  /**
   * ion-events.js
   *
   * Author: Max Lynch <max@drifty.com>
   *
   * Framework events handles various mobile browser events, and
   * detects special events like tap/swipe/etc. and emits them
   * as custom events that can be used in an app.
   *
   * Portions lovingly adapted from github.com/maker/ratchet and github.com/alexgibson/tap.js - thanks guys!
   */

  (function(ionic) {

    // Custom event polyfill
    ionic.CustomEvent = (function() {
      if( typeof window.CustomEvent === 'function' ) return CustomEvent;

      var customEvent = function(event, params) {
        var evt;
        params = params || {
          bubbles: false,
          cancelable: false,
          detail: undefined
        };
        try {
          evt = document.createEvent("CustomEvent");
          evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        } catch (error) {
          // fallback for browsers that don't support createEvent('CustomEvent')
          evt = document.createEvent("Event");
          for (var param in params) {
            evt[param] = params[param];
          }
          evt.initEvent(event, params.bubbles, params.cancelable);
        }
        return evt;
      };
      customEvent.prototype = window.Event.prototype;
      return customEvent;
    })();


    /**
     * @ngdoc utility
     * @name ionic.EventController
     * @module ionic
     */
    ionic.EventController = {
      VIRTUALIZED_EVENTS: ['tap', 'swipe', 'swiperight', 'swipeleft', 'drag', 'hold', 'release'],

      /**
       * @ngdoc method
       * @name ionic.EventController#trigger
       * @alias ionic.trigger
       * @param {string} eventType The event to trigger.
       * @param {object} data The data for the event. Hint: pass in
       * `{target: targetElement}`
       * @param {boolean=} bubbles Whether the event should bubble up the DOM.
       * @param {boolean=} cancelable Whether the event should be cancelable.
       */
      // Trigger a new event
      trigger: function(eventType, data, bubbles, cancelable) {
        var event = new ionic.CustomEvent(eventType, {
          detail: data,
          bubbles: !!bubbles,
          cancelable: !!cancelable
        });

        // Make sure to trigger the event on the given target, or dispatch it from
        // the window if we don't have an event target
        data && data.target && data.target.dispatchEvent && data.target.dispatchEvent(event) || window.dispatchEvent(event);
      },

      /**
       * @ngdoc method
       * @name ionic.EventController#on
       * @alias ionic.on
       * @description Listen to an event on an element.
       * @param {string} type The event to listen for.
       * @param {function} callback The listener to be called.
       * @param {DOMElement} element The element to listen for the event on.
       */
      on: function(type, callback, element) {
        var e = element || window;

        // Bind a gesture if it's a virtual event
        for(var i = 0, j = this.VIRTUALIZED_EVENTS.length; i < j; i++) {
          if(type == this.VIRTUALIZED_EVENTS[i]) {
            var gesture = new ionic.Gesture(element);
            gesture.on(type, callback);
            return gesture;
          }
        }

        // Otherwise bind a normal event
        e.addEventListener(type, callback);
      },

      /**
       * @ngdoc method
       * @name ionic.EventController#off
       * @alias ionic.off
       * @description Remove an event listener.
       * @param {string} type
       * @param {function} callback
       * @param {DOMElement} element
       */
      off: function(type, callback, element) {
        element.removeEventListener(type, callback);
      },

      /**
       * @ngdoc method
       * @name ionic.EventController#onGesture
       * @alias ionic.onGesture
       * @description Add an event listener for a gesture on an element.
       *
       * Available eventTypes (from [hammer.js](http://eightmedia.github.io/hammer.js/)):
       *
       * `hold`, `tap`, `doubletap`, `drag`, `dragstart`, `dragend`, `dragup`, `dragdown`, <br/>
       * `dragleft`, `dragright`, `swipe`, `swipeup`, `swipedown`, `swipeleft`, `swiperight`, <br/>
       * `transform`, `transformstart`, `transformend`, `rotate`, `pinch`, `pinchin`, `pinchout`, </br>
       * `touch`, `release`
       *
       * @param {string} eventType The gesture event to listen for.
       * @param {function(e)} callback The function to call when the gesture
       * happens.
       * @param {DOMElement} element The angular element to listen for the event on.
       */
      onGesture: function(type, callback, element) {
        var gesture = new ionic.Gesture(element);
        gesture.on(type, callback);
        return gesture;
      },

      /**
       * @ngdoc method
       * @name ionic.EventController#offGesture
       * @alias ionic.offGesture
       * @description Remove an event listener for a gesture on an element.
       * @param {string} eventType The gesture event.
       * @param {function(e)} callback The listener that was added earlier.
       * @param {DOMElement} element The element the listener was added on.
       */
      offGesture: function(gesture, type, callback) {
        gesture.off(type, callback);
      },

      handlePopState: function(event) {}
    };


    // Map some convenient top-level functions for event handling
    ionic.on = function() { ionic.EventController.on.apply(ionic.EventController, arguments); };
    ionic.off = function() { ionic.EventController.off.apply(ionic.EventController, arguments); };
    ionic.trigger = ionic.EventController.trigger;//function() { ionic.EventController.trigger.apply(ionic.EventController.trigger, arguments); };
    ionic.onGesture = function() { return ionic.EventController.onGesture.apply(ionic.EventController.onGesture, arguments); };
    ionic.offGesture = function() { return ionic.EventController.offGesture.apply(ionic.EventController.offGesture, arguments); };

  })(window.ionic);

  /**
   * Simple gesture controllers with some common gestures that emit
   * gesture events.
   *
   * Ported from github.com/EightMedia/hammer.js Gestures - thanks!
   */
  (function(ionic) {

    /**
     * ionic.Gestures
     * use this to create instances
     * @param   {HTMLElement}   element
     * @param   {Object}        options
     * @returns {ionic.Gestures.Instance}
     * @constructor
     */
    ionic.Gesture = function(element, options) {
      return new ionic.Gestures.Instance(element, options || {});
    };

    ionic.Gestures = {};

    // default settings
    ionic.Gestures.defaults = {
      // add css to the element to prevent the browser from doing
      // its native behavior. this doesnt prevent the scrolling,
      // but cancels the contextmenu, tap highlighting etc
      // set to false to disable this
      stop_browser_behavior: 'disable-user-behavior'
    };

    // detect touchevents
    ionic.Gestures.HAS_POINTEREVENTS = window.navigator.pointerEnabled || window.navigator.msPointerEnabled;
    ionic.Gestures.HAS_TOUCHEVENTS = ('ontouchstart' in window);

    // dont use mouseevents on mobile devices
    ionic.Gestures.MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android|silk/i;
    ionic.Gestures.NO_MOUSEEVENTS = ionic.Gestures.HAS_TOUCHEVENTS && window.navigator.userAgent.match(ionic.Gestures.MOBILE_REGEX);

    // eventtypes per touchevent (start, move, end)
    // are filled by ionic.Gestures.event.determineEventTypes on setup
    ionic.Gestures.EVENT_TYPES = {};

    // direction defines
    ionic.Gestures.DIRECTION_DOWN = 'down';
    ionic.Gestures.DIRECTION_LEFT = 'left';
    ionic.Gestures.DIRECTION_UP = 'up';
    ionic.Gestures.DIRECTION_RIGHT = 'right';

    // pointer type
    ionic.Gestures.POINTER_MOUSE = 'mouse';
    ionic.Gestures.POINTER_TOUCH = 'touch';
    ionic.Gestures.POINTER_PEN = 'pen';

    // touch event defines
    ionic.Gestures.EVENT_START = 'start';
    ionic.Gestures.EVENT_MOVE = 'move';
    ionic.Gestures.EVENT_END = 'end';

    // hammer document where the base events are added at
    ionic.Gestures.DOCUMENT = window.document;

    // plugins namespace
    ionic.Gestures.plugins = {};

    // if the window events are set...
    ionic.Gestures.READY = false;

    /**
     * setup events to detect gestures on the document
     */
    function setup() {
      if(ionic.Gestures.READY) {
        return;
      }

      // find what eventtypes we add listeners to
      ionic.Gestures.event.determineEventTypes();

      // Register all gestures inside ionic.Gestures.gestures
      for(var name in ionic.Gestures.gestures) {
        if(ionic.Gestures.gestures.hasOwnProperty(name)) {
          ionic.Gestures.detection.register(ionic.Gestures.gestures[name]);
        }
      }

      // Add touch events on the document
      ionic.Gestures.event.onTouch(ionic.Gestures.DOCUMENT, ionic.Gestures.EVENT_MOVE, ionic.Gestures.detection.detect);
      ionic.Gestures.event.onTouch(ionic.Gestures.DOCUMENT, ionic.Gestures.EVENT_END, ionic.Gestures.detection.detect);

      // ionic.Gestures is ready...!
      ionic.Gestures.READY = true;
    }

    /**
     * create new hammer instance
     * all methods should return the instance itself, so it is chainable.
     * @param   {HTMLElement}       element
     * @param   {Object}            [options={}]
     * @returns {ionic.Gestures.Instance}
     * @name Gesture.Instance
     * @constructor
     */
    ionic.Gestures.Instance = function(element, options) {
      var self = this;

      // A null element was passed into the instance, which means
      // whatever lookup was done to find this element failed to find it
      // so we can't listen for events on it.
      if(element === null) {
        void 0;
        return;
      }

      // setup ionic.GesturesJS window events and register all gestures
      // this also sets up the default options
      setup();

      this.element = element;

      // start/stop detection option
      this.enabled = true;

      // merge options
      this.options = ionic.Gestures.utils.extend(
        ionic.Gestures.utils.extend({}, ionic.Gestures.defaults),
          options || {});

      // add some css to the element to prevent the browser from doing its native behavoir
      if(this.options.stop_browser_behavior) {
        ionic.Gestures.utils.stopDefaultBrowserBehavior(this.element, this.options.stop_browser_behavior);
      }

      // start detection on touchstart
      ionic.Gestures.event.onTouch(element, ionic.Gestures.EVENT_START, function(ev) {
        if(self.enabled) {
          ionic.Gestures.detection.startDetect(self, ev);
        }
      });

      // return instance
      return this;
    };


    ionic.Gestures.Instance.prototype = {
      /**
       * bind events to the instance
       * @param   {String}      gesture
       * @param   {Function}    handler
       * @returns {ionic.Gestures.Instance}
       */
      on: function onEvent(gesture, handler){
        var gestures = gesture.split(' ');
        for(var t=0; t<gestures.length; t++) {
          this.element.addEventListener(gestures[t], handler, false);
        }
        return this;
      },


      /**
       * unbind events to the instance
       * @param   {String}      gesture
       * @param   {Function}    handler
       * @returns {ionic.Gestures.Instance}
       */
      off: function offEvent(gesture, handler){
        var gestures = gesture.split(' ');
        for(var t=0; t<gestures.length; t++) {
          this.element.removeEventListener(gestures[t], handler, false);
        }
        return this;
      },


      /**
       * trigger gesture event
       * @param   {String}      gesture
       * @param   {Object}      eventData
       * @returns {ionic.Gestures.Instance}
       */
      trigger: function triggerEvent(gesture, eventData){
        // create DOM event
        var event = ionic.Gestures.DOCUMENT.createEvent('Event');
        event.initEvent(gesture, true, true);
        event.gesture = eventData;

        // trigger on the target if it is in the instance element,
        // this is for event delegation tricks
        var element = this.element;
        if(ionic.Gestures.utils.hasParent(eventData.target, element)) {
          element = eventData.target;
        }

        element.dispatchEvent(event);
        return this;
      },


      /**
       * enable of disable hammer.js detection
       * @param   {Boolean}   state
       * @returns {ionic.Gestures.Instance}
       */
      enable: function enable(state) {
        this.enabled = state;
        return this;
      }
    };

    /**
     * this holds the last move event,
     * used to fix empty touchend issue
     * see the onTouch event for an explanation
     * type {Object}
     */
    var last_move_event = null;


    /**
     * when the mouse is hold down, this is true
     * type {Boolean}
     */
    var enable_detect = false;


    /**
     * when touch events have been fired, this is true
     * type {Boolean}
     */
    var touch_triggered = false;


    ionic.Gestures.event = {
      /**
       * simple addEventListener
       * @param   {HTMLElement}   element
       * @param   {String}        type
       * @param   {Function}      handler
       */
      bindDom: function(element, type, handler) {
        var types = type.split(' ');
        for(var t=0; t<types.length; t++) {
          element.addEventListener(types[t], handler, false);
        }
      },


      /**
       * touch events with mouse fallback
       * @param   {HTMLElement}   element
       * @param   {String}        eventType        like ionic.Gestures.EVENT_MOVE
       * @param   {Function}      handler
       */
      onTouch: function onTouch(element, eventType, handler) {
        var self = this;

        this.bindDom(element, ionic.Gestures.EVENT_TYPES[eventType], function bindDomOnTouch(ev) {
          var sourceEventType = ev.type.toLowerCase();

          // onmouseup, but when touchend has been fired we do nothing.
          // this is for touchdevices which also fire a mouseup on touchend
          if(sourceEventType.match(/mouse/) && touch_triggered) {
            return;
          }

          // mousebutton must be down or a touch event
          else if( sourceEventType.match(/touch/) ||   // touch events are always on screen
            sourceEventType.match(/pointerdown/) || // pointerevents touch
            (sourceEventType.match(/mouse/) && ev.which === 1)   // mouse is pressed
            ){
            enable_detect = true;
          }

          // mouse isn't pressed
          else if(sourceEventType.match(/mouse/) && ev.which !== 1) {
            enable_detect = false;
          }


          // we are in a touch event, set the touch triggered bool to true,
          // this for the conflicts that may occur on ios and android
          if(sourceEventType.match(/touch|pointer/)) {
            touch_triggered = true;
          }

          // count the total touches on the screen
          var count_touches = 0;

          // when touch has been triggered in this detection session
          // and we are now handling a mouse event, we stop that to prevent conflicts
          if(enable_detect) {
            // update pointerevent
            if(ionic.Gestures.HAS_POINTEREVENTS && eventType != ionic.Gestures.EVENT_END) {
              count_touches = ionic.Gestures.PointerEvent.updatePointer(eventType, ev);
            }
            // touch
            else if(sourceEventType.match(/touch/)) {
              count_touches = ev.touches.length;
            }
            // mouse
            else if(!touch_triggered) {
              count_touches = sourceEventType.match(/up/) ? 0 : 1;
            }

            // if we are in a end event, but when we remove one touch and
            // we still have enough, set eventType to move
            if(count_touches > 0 && eventType == ionic.Gestures.EVENT_END) {
              eventType = ionic.Gestures.EVENT_MOVE;
            }
            // no touches, force the end event
            else if(!count_touches) {
              eventType = ionic.Gestures.EVENT_END;
            }

            // store the last move event
            if(count_touches || last_move_event === null) {
              last_move_event = ev;
            }

            // trigger the handler
            handler.call(ionic.Gestures.detection, self.collectEventData(element, eventType, self.getTouchList(last_move_event, eventType), ev));

            // remove pointerevent from list
            if(ionic.Gestures.HAS_POINTEREVENTS && eventType == ionic.Gestures.EVENT_END) {
              count_touches = ionic.Gestures.PointerEvent.updatePointer(eventType, ev);
            }
          }

          //debug(sourceEventType +" "+ eventType);

          // on the end we reset everything
          if(!count_touches) {
            last_move_event = null;
            enable_detect = false;
            touch_triggered = false;
            ionic.Gestures.PointerEvent.reset();
          }
        });
      },


      /**
       * we have different events for each device/browser
       * determine what we need and set them in the ionic.Gestures.EVENT_TYPES constant
       */
      determineEventTypes: function determineEventTypes() {
        // determine the eventtype we want to set
        var types;

        // pointerEvents magic
        if(ionic.Gestures.HAS_POINTEREVENTS) {
          types = ionic.Gestures.PointerEvent.getEvents();
        }
        // on Android, iOS, blackberry, windows mobile we dont want any mouseevents
        else if(ionic.Gestures.NO_MOUSEEVENTS) {
          types = [
            'touchstart',
            'touchmove',
            'touchend touchcancel'];
        }
        // for non pointer events browsers and mixed browsers,
        // like chrome on windows8 touch laptop
        else {
          types = [
            'touchstart mousedown',
            'touchmove mousemove',
            'touchend touchcancel mouseup'];
        }

        ionic.Gestures.EVENT_TYPES[ionic.Gestures.EVENT_START]  = types[0];
        ionic.Gestures.EVENT_TYPES[ionic.Gestures.EVENT_MOVE]   = types[1];
        ionic.Gestures.EVENT_TYPES[ionic.Gestures.EVENT_END]    = types[2];
      },


      /**
       * create touchlist depending on the event
       * @param   {Object}    ev
       * @param   {String}    eventType   used by the fakemultitouch plugin
       */
      getTouchList: function getTouchList(ev/*, eventType*/) {
        // get the fake pointerEvent touchlist
        if(ionic.Gestures.HAS_POINTEREVENTS) {
          return ionic.Gestures.PointerEvent.getTouchList();
        }
        // get the touchlist
        else if(ev.touches) {
          return ev.touches;
        }
        // make fake touchlist from mouse position
        else {
          ev.identifier = 1;
          return [ev];
        }
      },


      /**
       * collect event data for ionic.Gestures js
       * @param   {HTMLElement}   element
       * @param   {String}        eventType        like ionic.Gestures.EVENT_MOVE
       * @param   {Object}        eventData
       */
      collectEventData: function collectEventData(element, eventType, touches, ev) {

        // find out pointerType
        var pointerType = ionic.Gestures.POINTER_TOUCH;
        if(ev.type.match(/mouse/) || ionic.Gestures.PointerEvent.matchType(ionic.Gestures.POINTER_MOUSE, ev)) {
          pointerType = ionic.Gestures.POINTER_MOUSE;
        }

        return {
          center      : ionic.Gestures.utils.getCenter(touches),
          timeStamp   : new Date().getTime(),
          target      : ev.target,
          touches     : touches,
          eventType   : eventType,
          pointerType : pointerType,
          srcEvent    : ev,

          /**
           * prevent the browser default actions
           * mostly used to disable scrolling of the browser
           */
          preventDefault: function() {
            if(this.srcEvent.preventManipulation) {
              this.srcEvent.preventManipulation();
            }

            if(this.srcEvent.preventDefault) {
              //this.srcEvent.preventDefault();
            }
          },

          /**
           * stop bubbling the event up to its parents
           */
          stopPropagation: function() {
            this.srcEvent.stopPropagation();
          },

          /**
           * immediately stop gesture detection
           * might be useful after a swipe was detected
           * @return {*}
           */
          stopDetect: function() {
            return ionic.Gestures.detection.stopDetect();
          }
        };
      }
    };

    ionic.Gestures.PointerEvent = {
      /**
       * holds all pointers
       * type {Object}
       */
      pointers: {},

      /**
       * get a list of pointers
       * @returns {Array}     touchlist
       */
      getTouchList: function() {
        var self = this;
        var touchlist = [];

        // we can use forEach since pointerEvents only is in IE10
        Object.keys(self.pointers).sort().forEach(function(id) {
          touchlist.push(self.pointers[id]);
        });
        return touchlist;
      },

      /**
       * update the position of a pointer
       * @param   {String}   type             ionic.Gestures.EVENT_END
       * @param   {Object}   pointerEvent
       */
      updatePointer: function(type, pointerEvent) {
        if(type == ionic.Gestures.EVENT_END) {
          this.pointers = {};
        }
        else {
          pointerEvent.identifier = pointerEvent.pointerId;
          this.pointers[pointerEvent.pointerId] = pointerEvent;
        }

        return Object.keys(this.pointers).length;
      },

      /**
       * check if ev matches pointertype
       * @param   {String}        pointerType     ionic.Gestures.POINTER_MOUSE
       * @param   {PointerEvent}  ev
       */
      matchType: function(pointerType, ev) {
        if(!ev.pointerType) {
          return false;
        }

        var types = {};
        types[ionic.Gestures.POINTER_MOUSE] = (ev.pointerType == ev.MSPOINTER_TYPE_MOUSE || ev.pointerType == ionic.Gestures.POINTER_MOUSE);
        types[ionic.Gestures.POINTER_TOUCH] = (ev.pointerType == ev.MSPOINTER_TYPE_TOUCH || ev.pointerType == ionic.Gestures.POINTER_TOUCH);
        types[ionic.Gestures.POINTER_PEN] = (ev.pointerType == ev.MSPOINTER_TYPE_PEN || ev.pointerType == ionic.Gestures.POINTER_PEN);
        return types[pointerType];
      },


      /**
       * get events
       */
      getEvents: function() {
        return [
          'pointerdown MSPointerDown',
          'pointermove MSPointerMove',
          'pointerup pointercancel MSPointerUp MSPointerCancel'
        ];
      },

      /**
       * reset the list
       */
      reset: function() {
        this.pointers = {};
      }
    };


    ionic.Gestures.utils = {
      /**
       * extend method,
       * also used for cloning when dest is an empty object
       * @param   {Object}    dest
       * @param   {Object}    src
       * @param	{Boolean}	merge		do a merge
       * @returns {Object}    dest
       */
      extend: function extend(dest, src, merge) {
        for (var key in src) {
          if(dest[key] !== undefined && merge) {
            continue;
          }
          dest[key] = src[key];
        }
        return dest;
      },


      /**
       * find if a node is in the given parent
       * used for event delegation tricks
       * @param   {HTMLElement}   node
       * @param   {HTMLElement}   parent
       * @returns {boolean}       has_parent
       */
      hasParent: function(node, parent) {
        while(node){
          if(node == parent) {
            return true;
          }
          node = node.parentNode;
        }
        return false;
      },


      /**
       * get the center of all the touches
       * @param   {Array}     touches
       * @returns {Object}    center
       */
      getCenter: function getCenter(touches) {
        var valuesX = [], valuesY = [];

        for(var t= 0,len=touches.length; t<len; t++) {
          valuesX.push(touches[t].pageX);
          valuesY.push(touches[t].pageY);
        }

        return {
          pageX: ((Math.min.apply(Math, valuesX) + Math.max.apply(Math, valuesX)) / 2),
          pageY: ((Math.min.apply(Math, valuesY) + Math.max.apply(Math, valuesY)) / 2)
        };
      },


      /**
       * calculate the velocity between two points
       * @param   {Number}    delta_time
       * @param   {Number}    delta_x
       * @param   {Number}    delta_y
       * @returns {Object}    velocity
       */
      getVelocity: function getVelocity(delta_time, delta_x, delta_y) {
        return {
          x: Math.abs(delta_x / delta_time) || 0,
          y: Math.abs(delta_y / delta_time) || 0
        };
      },


      /**
       * calculate the angle between two coordinates
       * @param   {Touch}     touch1
       * @param   {Touch}     touch2
       * @returns {Number}    angle
       */
      getAngle: function getAngle(touch1, touch2) {
        var y = touch2.pageY - touch1.pageY,
          x = touch2.pageX - touch1.pageX;
        return Math.atan2(y, x) * 180 / Math.PI;
      },


      /**
       * angle to direction define
       * @param   {Touch}     touch1
       * @param   {Touch}     touch2
       * @returns {String}    direction constant, like ionic.Gestures.DIRECTION_LEFT
       */
      getDirection: function getDirection(touch1, touch2) {
        var x = Math.abs(touch1.pageX - touch2.pageX),
          y = Math.abs(touch1.pageY - touch2.pageY);

        if(x >= y) {
          return touch1.pageX - touch2.pageX > 0 ? ionic.Gestures.DIRECTION_LEFT : ionic.Gestures.DIRECTION_RIGHT;
        }
        else {
          return touch1.pageY - touch2.pageY > 0 ? ionic.Gestures.DIRECTION_UP : ionic.Gestures.DIRECTION_DOWN;
        }
      },


      /**
       * calculate the distance between two touches
       * @param   {Touch}     touch1
       * @param   {Touch}     touch2
       * @returns {Number}    distance
       */
      getDistance: function getDistance(touch1, touch2) {
        var x = touch2.pageX - touch1.pageX,
          y = touch2.pageY - touch1.pageY;
        return Math.sqrt((x*x) + (y*y));
      },


      /**
       * calculate the scale factor between two touchLists (fingers)
       * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
       * @param   {Array}     start
       * @param   {Array}     end
       * @returns {Number}    scale
       */
      getScale: function getScale(start, end) {
        // need two fingers...
        if(start.length >= 2 && end.length >= 2) {
          return this.getDistance(end[0], end[1]) /
            this.getDistance(start[0], start[1]);
        }
        return 1;
      },


      /**
       * calculate the rotation degrees between two touchLists (fingers)
       * @param   {Array}     start
       * @param   {Array}     end
       * @returns {Number}    rotation
       */
      getRotation: function getRotation(start, end) {
        // need two fingers
        if(start.length >= 2 && end.length >= 2) {
          return this.getAngle(end[1], end[0]) -
            this.getAngle(start[1], start[0]);
        }
        return 0;
      },


      /**
       * boolean if the direction is vertical
       * @param    {String}    direction
       * @returns  {Boolean}   is_vertical
       */
      isVertical: function isVertical(direction) {
        return (direction == ionic.Gestures.DIRECTION_UP || direction == ionic.Gestures.DIRECTION_DOWN);
      },


      /**
       * stop browser default behavior with css class
       * @param   {HtmlElement}   element
       * @param   {Object}        css_class
       */
      stopDefaultBrowserBehavior: function stopDefaultBrowserBehavior(element, css_class) {
        // changed from making many style changes to just adding a preset classname
        // less DOM manipulations, less code, and easier to control in the CSS side of things
        // hammer.js doesn't come with CSS, but ionic does, which is why we prefer this method
        if(element && element.classList) {
          element.classList.add(css_class);
          element.onselectstart = function() {
            return false;
          };
        }
      }
    };


    ionic.Gestures.detection = {
      // contains all registred ionic.Gestures.gestures in the correct order
      gestures: [],

      // data of the current ionic.Gestures.gesture detection session
      current: null,

      // the previous ionic.Gestures.gesture session data
      // is a full clone of the previous gesture.current object
      previous: null,

      // when this becomes true, no gestures are fired
      stopped: false,


      /**
       * start ionic.Gestures.gesture detection
       * @param   {ionic.Gestures.Instance}   inst
       * @param   {Object}            eventData
       */
      startDetect: function startDetect(inst, eventData) {
        // already busy with a ionic.Gestures.gesture detection on an element
        if(this.current) {
          return;
        }

        this.stopped = false;

        this.current = {
          inst        : inst, // reference to ionic.GesturesInstance we're working for
          startEvent  : ionic.Gestures.utils.extend({}, eventData), // start eventData for distances, timing etc
          lastEvent   : false, // last eventData
          name        : '' // current gesture we're in/detected, can be 'tap', 'hold' etc
        };

        this.detect(eventData);
      },


      /**
       * ionic.Gestures.gesture detection
       * @param   {Object}    eventData
       */
      detect: function detect(eventData) {
        if(!this.current || this.stopped) {
          return;
        }

        // extend event data with calculations about scale, distance etc
        eventData = this.extendEventData(eventData);

        // instance options
        var inst_options = this.current.inst.options;

        // call ionic.Gestures.gesture handlers
        for(var g=0,len=this.gestures.length; g<len; g++) {
          var gesture = this.gestures[g];

          // only when the instance options have enabled this gesture
          if(!this.stopped && inst_options[gesture.name] !== false) {
            // if a handler returns false, we stop with the detection
            if(gesture.handler.call(gesture, eventData, this.current.inst) === false) {
              this.stopDetect();
              break;
            }
          }
        }

        // store as previous event event
        if(this.current) {
          this.current.lastEvent = eventData;
        }

        // endevent, but not the last touch, so dont stop
        if(eventData.eventType == ionic.Gestures.EVENT_END && !eventData.touches.length-1) {
          this.stopDetect();
        }

        return eventData;
      },


      /**
       * clear the ionic.Gestures.gesture vars
       * this is called on endDetect, but can also be used when a final ionic.Gestures.gesture has been detected
       * to stop other ionic.Gestures.gestures from being fired
       */
      stopDetect: function stopDetect() {
        // clone current data to the store as the previous gesture
        // used for the double tap gesture, since this is an other gesture detect session
        this.previous = ionic.Gestures.utils.extend({}, this.current);

        // reset the current
        this.current = null;

        // stopped!
        this.stopped = true;
      },


      /**
       * extend eventData for ionic.Gestures.gestures
       * @param   {Object}   ev
       * @returns {Object}   ev
       */
      extendEventData: function extendEventData(ev) {
        var startEv = this.current.startEvent;

        // if the touches change, set the new touches over the startEvent touches
        // this because touchevents don't have all the touches on touchstart, or the
        // user must place his fingers at the EXACT same time on the screen, which is not realistic
        // but, sometimes it happens that both fingers are touching at the EXACT same time
        if(startEv && (ev.touches.length != startEv.touches.length || ev.touches === startEv.touches)) {
          // extend 1 level deep to get the touchlist with the touch objects
          startEv.touches = [];
          for(var i=0,len=ev.touches.length; i<len; i++) {
            startEv.touches.push(ionic.Gestures.utils.extend({}, ev.touches[i]));
          }
        }

        var delta_time = ev.timeStamp - startEv.timeStamp,
          delta_x = ev.center.pageX - startEv.center.pageX,
          delta_y = ev.center.pageY - startEv.center.pageY,
          velocity = ionic.Gestures.utils.getVelocity(delta_time, delta_x, delta_y);

        ionic.Gestures.utils.extend(ev, {
          deltaTime   : delta_time,

          deltaX      : delta_x,
          deltaY      : delta_y,

          velocityX   : velocity.x,
          velocityY   : velocity.y,

          distance    : ionic.Gestures.utils.getDistance(startEv.center, ev.center),
          angle       : ionic.Gestures.utils.getAngle(startEv.center, ev.center),
          direction   : ionic.Gestures.utils.getDirection(startEv.center, ev.center),

          scale       : ionic.Gestures.utils.getScale(startEv.touches, ev.touches),
          rotation    : ionic.Gestures.utils.getRotation(startEv.touches, ev.touches),

          startEvent  : startEv
        });

        return ev;
      },


      /**
       * register new gesture
       * @param   {Object}    gesture object, see gestures.js for documentation
       * @returns {Array}     gestures
       */
      register: function register(gesture) {
        // add an enable gesture options if there is no given
        var options = gesture.defaults || {};
        if(options[gesture.name] === undefined) {
          options[gesture.name] = true;
        }

        // extend ionic.Gestures default options with the ionic.Gestures.gesture options
        ionic.Gestures.utils.extend(ionic.Gestures.defaults, options, true);

        // set its index
        gesture.index = gesture.index || 1000;

        // add ionic.Gestures.gesture to the list
        this.gestures.push(gesture);

        // sort the list by index
        this.gestures.sort(function(a, b) {
          if (a.index < b.index) {
            return -1;
          }
          if (a.index > b.index) {
            return 1;
          }
          return 0;
        });

        return this.gestures;
      }
    };


    ionic.Gestures.gestures = ionic.Gestures.gestures || {};

    /**
     * Custom gestures
     * ==============================
     *
     * Gesture object
     * --------------------
     * The object structure of a gesture:
     *
     * { name: 'mygesture',
   *   index: 1337,
   *   defaults: {
   *     mygesture_option: true
   *   }
   *   handler: function(type, ev, inst) {
   *     // trigger gesture event
   *     inst.trigger(this.name, ev);
   *   }
   * }

     * @param   {String}    name
     * this should be the name of the gesture, lowercase
     * it is also being used to disable/enable the gesture per instance config.
     *
     * @param   {Number}    [index=1000]
     * the index of the gesture, where it is going to be in the stack of gestures detection
     * like when you build an gesture that depends on the drag gesture, it is a good
     * idea to place it after the index of the drag gesture.
     *
     * @param   {Object}    [defaults={}]
     * the default settings of the gesture. these are added to the instance settings,
     * and can be overruled per instance. you can also add the name of the gesture,
     * but this is also added by default (and set to true).
     *
     * @param   {Function}  handler
     * this handles the gesture detection of your custom gesture and receives the
     * following arguments:
     *
     *      @param  {Object}    eventData
     *      event data containing the following properties:
     *          timeStamp   {Number}        time the event occurred
     *          target      {HTMLElement}   target element
     *          touches     {Array}         touches (fingers, pointers, mouse) on the screen
     *          pointerType {String}        kind of pointer that was used. matches ionic.Gestures.POINTER_MOUSE|TOUCH
     *          center      {Object}        center position of the touches. contains pageX and pageY
     *          deltaTime   {Number}        the total time of the touches in the screen
     *          deltaX      {Number}        the delta on x axis we haved moved
     *          deltaY      {Number}        the delta on y axis we haved moved
     *          velocityX   {Number}        the velocity on the x
     *          velocityY   {Number}        the velocity on y
     *          angle       {Number}        the angle we are moving
     *          direction   {String}        the direction we are moving. matches ionic.Gestures.DIRECTION_UP|DOWN|LEFT|RIGHT
     *          distance    {Number}        the distance we haved moved
     *          scale       {Number}        scaling of the touches, needs 2 touches
     *          rotation    {Number}        rotation of the touches, needs 2 touches *
     *          eventType   {String}        matches ionic.Gestures.EVENT_START|MOVE|END
     *          srcEvent    {Object}        the source event, like TouchStart or MouseDown *
     *          startEvent  {Object}        contains the same properties as above,
     *                                      but from the first touch. this is used to calculate
     *                                      distances, deltaTime, scaling etc
     *
     *      @param  {ionic.Gestures.Instance}    inst
     *      the instance we are doing the detection for. you can get the options from
     *      the inst.options object and trigger the gesture event by calling inst.trigger
     *
     *
     * Handle gestures
     * --------------------
     * inside the handler you can get/set ionic.Gestures.detectionic.current. This is the current
     * detection sessionic. It has the following properties
     *      @param  {String}    name
     *      contains the name of the gesture we have detected. it has not a real function,
     *      only to check in other gestures if something is detected.
     *      like in the drag gesture we set it to 'drag' and in the swipe gesture we can
     *      check if the current gesture is 'drag' by accessing ionic.Gestures.detectionic.current.name
     *
     *      readonly
     *      @param  {ionic.Gestures.Instance}    inst
     *      the instance we do the detection for
     *
     *      readonly
     *      @param  {Object}    startEvent
     *      contains the properties of the first gesture detection in this sessionic.
     *      Used for calculations about timing, distance, etc.
     *
     *      readonly
     *      @param  {Object}    lastEvent
     *      contains all the properties of the last gesture detect in this sessionic.
     *
     * after the gesture detection session has been completed (user has released the screen)
     * the ionic.Gestures.detectionic.current object is copied into ionic.Gestures.detectionic.previous,
     * this is usefull for gestures like doubletap, where you need to know if the
     * previous gesture was a tap
     *
     * options that have been set by the instance can be received by calling inst.options
     *
     * You can trigger a gesture event by calling inst.trigger("mygesture", event).
     * The first param is the name of your gesture, the second the event argument
     *
     *
     * Register gestures
     * --------------------
     * When an gesture is added to the ionic.Gestures.gestures object, it is auto registered
     * at the setup of the first ionic.Gestures instance. You can also call ionic.Gestures.detectionic.register
     * manually and pass your gesture object as a param
     *
     */

    /**
     * Hold
     * Touch stays at the same place for x time
     * events  hold
     */
    ionic.Gestures.gestures.Hold = {
      name: 'hold',
      index: 10,
      defaults: {
        hold_timeout	: 500,
        hold_threshold	: 1
      },
      timer: null,
      handler: function holdGesture(ev, inst) {
        switch(ev.eventType) {
          case ionic.Gestures.EVENT_START:
            // clear any running timers
            clearTimeout(this.timer);

            // set the gesture so we can check in the timeout if it still is
            ionic.Gestures.detection.current.name = this.name;

            // set timer and if after the timeout it still is hold,
            // we trigger the hold event
            this.timer = setTimeout(function() {
              if(ionic.Gestures.detection.current.name == 'hold') {
                ionic.tap.cancelClick();
                inst.trigger('hold', ev);
              }
            }, inst.options.hold_timeout);
            break;

          // when you move or end we clear the timer
          case ionic.Gestures.EVENT_MOVE:
            if(ev.distance > inst.options.hold_threshold) {
              clearTimeout(this.timer);
            }
            break;

          case ionic.Gestures.EVENT_END:
            clearTimeout(this.timer);
            break;
        }
      }
    };


    /**
     * Tap/DoubleTap
     * Quick touch at a place or double at the same place
     * events  tap, doubletap
     */
    ionic.Gestures.gestures.Tap = {
      name: 'tap',
      index: 100,
      defaults: {
        tap_max_touchtime	: 250,
        tap_max_distance	: 10,
        tap_always			: true,
        doubletap_distance	: 20,
        doubletap_interval	: 300
      },
      handler: function tapGesture(ev, inst) {
        if(ev.eventType == ionic.Gestures.EVENT_END && ev.srcEvent.type != 'touchcancel') {
          // previous gesture, for the double tap since these are two different gesture detections
          var prev = ionic.Gestures.detection.previous,
            did_doubletap = false;

          // when the touchtime is higher then the max touch time
          // or when the moving distance is too much
          if(ev.deltaTime > inst.options.tap_max_touchtime ||
            ev.distance > inst.options.tap_max_distance) {
            return;
          }

          // check if double tap
          if(prev && prev.name == 'tap' &&
            (ev.timeStamp - prev.lastEvent.timeStamp) < inst.options.doubletap_interval &&
            ev.distance < inst.options.doubletap_distance) {
            inst.trigger('doubletap', ev);
            did_doubletap = true;
          }

          // do a single tap
          if(!did_doubletap || inst.options.tap_always) {
            ionic.Gestures.detection.current.name = 'tap';
            inst.trigger('tap', ev);
          }
        }
      }
    };


    /**
     * Swipe
     * triggers swipe events when the end velocity is above the threshold
     * events  swipe, swipeleft, swiperight, swipeup, swipedown
     */
    ionic.Gestures.gestures.Swipe = {
      name: 'swipe',
      index: 40,
      defaults: {
        // set 0 for unlimited, but this can conflict with transform
        swipe_max_touches  : 1,
        swipe_velocity     : 0.7
      },
      handler: function swipeGesture(ev, inst) {
        if(ev.eventType == ionic.Gestures.EVENT_END) {
          // max touches
          if(inst.options.swipe_max_touches > 0 &&
            ev.touches.length > inst.options.swipe_max_touches) {
            return;
          }

          // when the distance we moved is too small we skip this gesture
          // or we can be already in dragging
          if(ev.velocityX > inst.options.swipe_velocity ||
            ev.velocityY > inst.options.swipe_velocity) {
            // trigger swipe events
            inst.trigger(this.name, ev);
            inst.trigger(this.name + ev.direction, ev);
          }
        }
      }
    };


    /**
     * Drag
     * Move with x fingers (default 1) around on the page. Blocking the scrolling when
     * moving left and right is a good practice. When all the drag events are blocking
     * you disable scrolling on that area.
     * events  drag, drapleft, dragright, dragup, dragdown
     */
    ionic.Gestures.gestures.Drag = {
      name: 'drag',
      index: 50,
      defaults: {
        drag_min_distance : 10,
        // Set correct_for_drag_min_distance to true to make the starting point of the drag
        // be calculated from where the drag was triggered, not from where the touch started.
        // Useful to avoid a jerk-starting drag, which can make fine-adjustments
        // through dragging difficult, and be visually unappealing.
        correct_for_drag_min_distance : true,
        // set 0 for unlimited, but this can conflict with transform
        drag_max_touches  : 1,
        // prevent default browser behavior when dragging occurs
        // be careful with it, it makes the element a blocking element
        // when you are using the drag gesture, it is a good practice to set this true
        drag_block_horizontal   : true,
        drag_block_vertical     : true,
        // drag_lock_to_axis keeps the drag gesture on the axis that it started on,
        // It disallows vertical directions if the initial direction was horizontal, and vice versa.
        drag_lock_to_axis       : false,
        // drag lock only kicks in when distance > drag_lock_min_distance
        // This way, locking occurs only when the distance has become large enough to reliably determine the direction
        drag_lock_min_distance : 25
      },
      triggered: false,
      handler: function dragGesture(ev, inst) {
        // current gesture isnt drag, but dragged is true
        // this means an other gesture is busy. now call dragend
        if(ionic.Gestures.detection.current.name != this.name && this.triggered) {
          inst.trigger(this.name +'end', ev);
          this.triggered = false;
          return;
        }

        // max touches
        if(inst.options.drag_max_touches > 0 &&
          ev.touches.length > inst.options.drag_max_touches) {
          return;
        }

        switch(ev.eventType) {
          case ionic.Gestures.EVENT_START:
            this.triggered = false;
            break;

          case ionic.Gestures.EVENT_MOVE:
            // when the distance we moved is too small we skip this gesture
            // or we can be already in dragging
            if(ev.distance < inst.options.drag_min_distance &&
              ionic.Gestures.detection.current.name != this.name) {
              return;
            }

            // we are dragging!
            if(ionic.Gestures.detection.current.name != this.name) {
              ionic.Gestures.detection.current.name = this.name;
              if (inst.options.correct_for_drag_min_distance) {
                // When a drag is triggered, set the event center to drag_min_distance pixels from the original event center.
                // Without this correction, the dragged distance would jumpstart at drag_min_distance pixels instead of at 0.
                // It might be useful to save the original start point somewhere
                var factor = Math.abs(inst.options.drag_min_distance/ev.distance);
                ionic.Gestures.detection.current.startEvent.center.pageX += ev.deltaX * factor;
                ionic.Gestures.detection.current.startEvent.center.pageY += ev.deltaY * factor;

                // recalculate event data using new start point
                ev = ionic.Gestures.detection.extendEventData(ev);
              }
            }

            // lock drag to axis?
            if(ionic.Gestures.detection.current.lastEvent.drag_locked_to_axis || (inst.options.drag_lock_to_axis && inst.options.drag_lock_min_distance<=ev.distance)) {
              ev.drag_locked_to_axis = true;
            }
            var last_direction = ionic.Gestures.detection.current.lastEvent.direction;
            if(ev.drag_locked_to_axis && last_direction !== ev.direction) {
              // keep direction on the axis that the drag gesture started on
              if(ionic.Gestures.utils.isVertical(last_direction)) {
                ev.direction = (ev.deltaY < 0) ? ionic.Gestures.DIRECTION_UP : ionic.Gestures.DIRECTION_DOWN;
              }
              else {
                ev.direction = (ev.deltaX < 0) ? ionic.Gestures.DIRECTION_LEFT : ionic.Gestures.DIRECTION_RIGHT;
              }
            }

            // first time, trigger dragstart event
            if(!this.triggered) {
              inst.trigger(this.name +'start', ev);
              this.triggered = true;
            }

            // trigger normal event
            inst.trigger(this.name, ev);

            // direction event, like dragdown
            inst.trigger(this.name + ev.direction, ev);

            // block the browser events
            if( (inst.options.drag_block_vertical && ionic.Gestures.utils.isVertical(ev.direction)) ||
              (inst.options.drag_block_horizontal && !ionic.Gestures.utils.isVertical(ev.direction))) {
              ev.preventDefault();
            }
            break;

          case ionic.Gestures.EVENT_END:
            // trigger dragend
            if(this.triggered) {
              inst.trigger(this.name +'end', ev);
            }

            this.triggered = false;
            break;
        }
      }
    };


    /**
     * Transform
     * User want to scale or rotate with 2 fingers
     * events  transform, pinch, pinchin, pinchout, rotate
     */
    ionic.Gestures.gestures.Transform = {
      name: 'transform',
      index: 45,
      defaults: {
        // factor, no scale is 1, zoomin is to 0 and zoomout until higher then 1
        transform_min_scale     : 0.01,
        // rotation in degrees
        transform_min_rotation  : 1,
        // prevent default browser behavior when two touches are on the screen
        // but it makes the element a blocking element
        // when you are using the transform gesture, it is a good practice to set this true
        transform_always_block  : false
      },
      triggered: false,
      handler: function transformGesture(ev, inst) {
        // current gesture isnt drag, but dragged is true
        // this means an other gesture is busy. now call dragend
        if(ionic.Gestures.detection.current.name != this.name && this.triggered) {
          inst.trigger(this.name +'end', ev);
          this.triggered = false;
          return;
        }

        // atleast multitouch
        if(ev.touches.length < 2) {
          return;
        }

        // prevent default when two fingers are on the screen
        if(inst.options.transform_always_block) {
          ev.preventDefault();
        }

        switch(ev.eventType) {
          case ionic.Gestures.EVENT_START:
            this.triggered = false;
            break;

          case ionic.Gestures.EVENT_MOVE:
            var scale_threshold = Math.abs(1-ev.scale);
            var rotation_threshold = Math.abs(ev.rotation);

            // when the distance we moved is too small we skip this gesture
            // or we can be already in dragging
            if(scale_threshold < inst.options.transform_min_scale &&
              rotation_threshold < inst.options.transform_min_rotation) {
              return;
            }

            // we are transforming!
            ionic.Gestures.detection.current.name = this.name;

            // first time, trigger dragstart event
            if(!this.triggered) {
              inst.trigger(this.name +'start', ev);
              this.triggered = true;
            }

            inst.trigger(this.name, ev); // basic transform event

            // trigger rotate event
            if(rotation_threshold > inst.options.transform_min_rotation) {
              inst.trigger('rotate', ev);
            }

            // trigger pinch event
            if(scale_threshold > inst.options.transform_min_scale) {
              inst.trigger('pinch', ev);
              inst.trigger('pinch'+ ((ev.scale < 1) ? 'in' : 'out'), ev);
            }
            break;

          case ionic.Gestures.EVENT_END:
            // trigger dragend
            if(this.triggered) {
              inst.trigger(this.name +'end', ev);
            }

            this.triggered = false;
            break;
        }
      }
    };


    /**
     * Touch
     * Called as first, tells the user has touched the screen
     * events  touch
     */
    ionic.Gestures.gestures.Touch = {
      name: 'touch',
      index: -Infinity,
      defaults: {
        // call preventDefault at touchstart, and makes the element blocking by
        // disabling the scrolling of the page, but it improves gestures like
        // transforming and dragging.
        // be careful with using this, it can be very annoying for users to be stuck
        // on the page
        prevent_default: false,

        // disable mouse events, so only touch (or pen!) input triggers events
        prevent_mouseevents: false
      },
      handler: function touchGesture(ev, inst) {
        if(inst.options.prevent_mouseevents && ev.pointerType == ionic.Gestures.POINTER_MOUSE) {
          ev.stopDetect();
          return;
        }

        if(inst.options.prevent_default) {
          ev.preventDefault();
        }

        if(ev.eventType ==  ionic.Gestures.EVENT_START) {
          inst.trigger(this.name, ev);
        }
      }
    };


    /**
     * Release
     * Called as last, tells the user has released the screen
     * events  release
     */
    ionic.Gestures.gestures.Release = {
      name: 'release',
      index: Infinity,
      handler: function releaseGesture(ev, inst) {
        if(ev.eventType ==  ionic.Gestures.EVENT_END) {
          inst.trigger(this.name, ev);
        }
      }
    };
  })(window.ionic);

  (function(window, document, ionic) {

    var IOS = 'ios';
    var ANDROID = 'android';
    var WINDOWS_PHONE = 'windowsphone';

    /**
     * @ngdoc utility
     * @name ionic.Platform
     * @module ionic
     */
    ionic.Platform = {

      // Put navigator on platform so it can be mocked and set
      // the browser does not allow window.navigator to be set
      navigator: window.navigator,

      /**
       * @ngdoc property
       * @name ionic.Platform#isReady
       * @returns {boolean} Whether the device is ready.
       */
      isReady: false,
      /**
       * @ngdoc property
       * @name ionic.Platform#isFullScreen
       * @returns {boolean} Whether the device is fullscreen.
       */
      isFullScreen: false,
      /**
       * @ngdoc property
       * @name ionic.Platform#platforms
       * @returns {Array(string)} An array of all platforms found.
       */
      platforms: null,
      /**
       * @ngdoc property
       * @name ionic.Platform#grade
       * @returns {string} What grade the current platform is.
       */
      grade: null,
      ua: navigator.userAgent,

      /**
       * @ngdoc method
       * @name ionic.Platform#ready
       * @description
       * Trigger a callback once the device is ready, or immediately
       * if the device is already ready. This method can be run from
       * anywhere and does not need to be wrapped by any additonal methods.
       * When the app is within a WebView (Cordova), it'll fire
       * the callback once the device is ready. If the app is within
       * a web browser, it'll fire the callback after `window.load`.
       * @param {function} callback The function to call.
       */
      ready: function(cb) {
        // run through tasks to complete now that the device is ready
        if(this.isReady) {
          cb();
        } else {
          // the platform isn't ready yet, add it to this array
          // which will be called once the platform is ready
          readyCallbacks.push(cb);
        }
      },

      /**
       * @private
       */
      detect: function() {
        ionic.Platform._checkPlatforms();

        ionic.requestAnimationFrame(function(){
          // only add to the body class if we got platform info
          for(var i = 0; i < ionic.Platform.platforms.length; i++) {
            document.body.classList.add('platform-' + ionic.Platform.platforms[i]);
          }
        });
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#setGrade
       * @description Set the grade of the device: 'a', 'b', or 'c'. 'a' is the best
       * (most css features enabled), 'c' is the worst.  By default, sets the grade
       * depending on the current device.
       * @param {string} grade The new grade to set.
       */
      setGrade: function(grade) {
        var oldGrade = this.grade;
        this.grade = grade;
        ionic.requestAnimationFrame(function() {
          if (oldGrade) {
            document.body.classList.remove('grade-' + oldGrade);
          }
          document.body.classList.add('grade-' + grade);
        });
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#device
       * @description Return the current device (given by cordova).
       * @returns {object} The device object.
       */
      device: function() {
        if(window.device) return window.device;
        if(this.isWebView()) void 0;
        return {};
      },

      _checkPlatforms: function(platforms) {
        this.platforms = [];
        var grade = 'a';

        if(this.isWebView()) {
          this.platforms.push('webview');
          this.platforms.push('cordova');
        } else {
          this.platforms.push('browser');
        }
        if(this.isIPad()) this.platforms.push('ipad');

        var platform = this.platform();
        if(platform) {
          this.platforms.push(platform);

          var version = this.version();
          if(version) {
            var v = version.toString();
            if(v.indexOf('.') > 0) {
              v = v.replace('.', '_');
            } else {
              v += '_0';
            }
            this.platforms.push(platform + v.split('_')[0]);
            this.platforms.push(platform + v);

            if(this.isAndroid() && version < 4.4) {
              grade = (version < 4 ? 'c' : 'b');
            } else if(this.isWindowsPhone()) {
              grade = 'b';
            }
          }
        }

        this.setGrade(grade);
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#isWebView
       * @returns {boolean} Check if we are running within a WebView (such as Cordova).
       */
      isWebView: function() {
        return !(!window.cordova && !window.PhoneGap && !window.phonegap);
      },
      /**
       * @ngdoc method
       * @name ionic.Platform#isIPad
       * @returns {boolean} Whether we are running on iPad.
       */
      isIPad: function() {
        if( /iPad/i.test(ionic.Platform.navigator.platform) ) {
          return true;
        }
        return /iPad/i.test(this.ua);
      },
      /**
       * @ngdoc method
       * @name ionic.Platform#isIOS
       * @returns {boolean} Whether we are running on iOS.
       */
      isIOS: function() {
        return this.is(IOS);
      },
      /**
       * @ngdoc method
       * @name ionic.Platform#isAndroid
       * @returns {boolean} Whether we are running on Android.
       */
      isAndroid: function() {
        return this.is(ANDROID);
      },
      /**
       * @ngdoc method
       * @name ionic.Platform#isWindowsPhone
       * @returns {boolean} Whether we are running on Windows Phone.
       */
      isWindowsPhone: function() {
        return this.is(WINDOWS_PHONE);
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#platform
       * @returns {string} The name of the current platform.
       */
      platform: function() {
        // singleton to get the platform name
        if(platformName === null) this.setPlatform(this.device().platform);
        return platformName;
      },

      /**
       * @private
       */
      setPlatform: function(n) {
        if(typeof n != 'undefined' && n !== null && n.length) {
          platformName = n.toLowerCase();
        } else if(this.ua.indexOf('Android') > 0) {
          platformName = ANDROID;
        } else if(this.ua.indexOf('iPhone') > -1 || this.ua.indexOf('iPad') > -1 || this.ua.indexOf('iPod') > -1) {
          platformName = IOS;
        } else if(this.ua.indexOf('Windows Phone') > -1) {
          platformName = WINDOWS_PHONE;
        } else {
          platformName = ionic.Platform.navigator.platform && navigator.platform.toLowerCase().split(' ')[0] || '';
        }
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#version
       * @returns {string} The version of the current device platform.
       */
      version: function() {
        // singleton to get the platform version
        if(platformVersion === null) this.setVersion(this.device().version);
        return platformVersion;
      },

      /**
       * @private
       */
      setVersion: function(v) {
        if(typeof v != 'undefined' && v !== null) {
          v = v.split('.');
          v = parseFloat(v[0] + '.' + (v.length > 1 ? v[1] : 0));
          if(!isNaN(v)) {
            platformVersion = v;
            return;
          }
        }

        platformVersion = 0;

        // fallback to user-agent checking
        var pName = this.platform();
        var versionMatch = {
          'android': /Android (\d+).(\d+)?/,
          'ios': /OS (\d+)_(\d+)?/,
          'windowsphone': /Windows Phone (\d+).(\d+)?/
        };
        if(versionMatch[pName]) {
          v = this.ua.match( versionMatch[pName] );
          if(v &&  v.length > 2) {
            platformVersion = parseFloat( v[1] + '.' + v[2] );
          }
        }
      },

      // Check if the platform is the one detected by cordova
      is: function(type) {
        type = type.toLowerCase();
        // check if it has an array of platforms
        if(this.platforms) {
          for(var x = 0; x < this.platforms.length; x++) {
            if(this.platforms[x] === type) return true;
          }
        }
        // exact match
        var pName = this.platform();
        if(pName) {
          return pName === type.toLowerCase();
        }

        // A quick hack for to check userAgent
        return this.ua.toLowerCase().indexOf(type) >= 0;
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#exitApp
       * @description Exit the app.
       */
      exitApp: function() {
        this.ready(function(){
          navigator.app && navigator.app.exitApp && navigator.app.exitApp();
        });
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#showStatusBar
       * @description Shows or hides the device status bar (in Cordova).
       * @param {boolean} shouldShow Whether or not to show the status bar.
       */
      showStatusBar: function(val) {
        // Only useful when run within cordova
        this._showStatusBar = val;
        this.ready(function(){
          // run this only when or if the platform (cordova) is ready
          ionic.requestAnimationFrame(function(){
            if(ionic.Platform._showStatusBar) {
              // they do not want it to be full screen
              window.StatusBar && window.StatusBar.show();
              document.body.classList.remove('status-bar-hide');
            } else {
              // it should be full screen
              window.StatusBar && window.StatusBar.hide();
              document.body.classList.add('status-bar-hide');
            }
          });
        });
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#fullScreen
       * @description
       * Sets whether the app is fullscreen or not (in Cordova).
       * @param {boolean=} showFullScreen Whether or not to set the app to fullscreen. Defaults to true.
       * @param {boolean=} showStatusBar Whether or not to show the device's status bar. Defaults to false.
       */
      fullScreen: function(showFullScreen, showStatusBar) {
        // showFullScreen: default is true if no param provided
        this.isFullScreen = (showFullScreen !== false);

        // add/remove the fullscreen classname to the body
        ionic.DomUtil.ready(function(){
          // run this only when or if the DOM is ready
          ionic.requestAnimationFrame(function(){
            if(ionic.Platform.isFullScreen) {
              document.body.classList.add('fullscreen');
            } else {
              document.body.classList.remove('fullscreen');
            }
          });
          // showStatusBar: default is false if no param provided
          ionic.Platform.showStatusBar( (showStatusBar === true) );
        });
      }

    };

    var platformName = null, // just the name, like iOS or Android
      platformVersion = null, // a float of the major and minor, like 7.1
      readyCallbacks = [];

    // setup listeners to know when the device is ready to go
    function onWindowLoad() {
      if(ionic.Platform.isWebView()) {
        // the window and scripts are fully loaded, and a cordova/phonegap
        // object exists then let's listen for the deviceready
        document.addEventListener("deviceready", onPlatformReady, false);
      } else {
        // the window and scripts are fully loaded, but the window object doesn't have the
        // cordova/phonegap object, so its just a browser, not a webview wrapped w/ cordova
        onPlatformReady();
      }
      window.removeEventListener("load", onWindowLoad, false);
    }
    window.addEventListener("load", onWindowLoad, false);

    function onPlatformReady() {
      // the device is all set to go, init our own stuff then fire off our event
      ionic.Platform.isReady = true;
      ionic.Platform.detect();
      for(var x=0; x<readyCallbacks.length; x++) {
        // fire off all the callbacks that were added before the platform was ready
        readyCallbacks[x]();
      }
      readyCallbacks = [];
      ionic.trigger('platformready', { target: document });

      ionic.requestAnimationFrame(function(){
        document.body.classList.add('platform-ready');
      });
    }

  })(this, document, ionic);

  (function(document, ionic) {
    'use strict';

    // Ionic CSS polyfills
    ionic.CSS = {};

    (function() {

      // transform
      var i, keys = ['webkitTransform', 'transform', '-webkit-transform', 'webkit-transform',
        '-moz-transform', 'moz-transform', 'MozTransform', 'mozTransform', 'msTransform'];

      for(i = 0; i < keys.length; i++) {
        if(document.documentElement.style[keys[i]] !== undefined) {
          ionic.CSS.TRANSFORM = keys[i];
          break;
        }
      }

      // transition
      keys = ['webkitTransition', 'mozTransition', 'msTransition', 'transition'];
      for(i = 0; i < keys.length; i++) {
        if(document.documentElement.style[keys[i]] !== undefined) {
          ionic.CSS.TRANSITION = keys[i];
          break;
        }
      }

    })();

    // classList polyfill for them older Androids
    // https://gist.github.com/devongovett/1381839
    if (!("classList" in document.documentElement) && Object.defineProperty && typeof HTMLElement !== 'undefined') {
      Object.defineProperty(HTMLElement.prototype, 'classList', {
        get: function() {
          var self = this;
          function update(fn) {
            return function() {
              var x, classes = self.className.split(/\s+/);

              for(x=0; x<arguments.length; x++) {
                fn(classes, classes.indexOf(arguments[x]), arguments[x]);
              }

              self.className = classes.join(" ");
            };
          }

          return {
            add: update(function(classes, index, value) {
              ~index || classes.push(value);
            }),

            remove: update(function(classes, index) {
              ~index && classes.splice(index, 1);
            }),

            toggle: update(function(classes, index, value) {
              ~index ? classes.splice(index, 1) : classes.push(value);
            }),

            contains: function(value) {
              return !!~self.className.split(/\s+/).indexOf(value);
            },

            item: function(i) {
              return self.className.split(/\s+/)[i] || null;
            }
          };

        }
      });
    }

  })(document, ionic);


  /**
   * @ngdoc page
   * @name tap
   * @module ionic
   * @description
   * On touch devices such as a phone or tablet, some browsers implement a 300ms delay between
   * the time the user stops touching the display and the moment the browser executes the
   * click. This delay was initially introduced so the browser can know whether the user wants to
   * double-tap to zoom in on the webpage.  Basically, the browser waits roughly 300ms to see if
   * the user is double-tapping, or just tapping on the display once.
   *
   * Out of the box, Ionic automatically removes the 300ms delay in order to make Ionic apps
   * feel more "native" like. Resultingly, other solutions such as
   * [fastclick](https://github.com/ftlabs/fastclick) and Angular's
   * [ngTouch](https://docs.angularjs.org/api/ngTouch) should not be included, to avoid conflicts.
   *
   * Some browsers already remove the delay with certain settings, such as the CSS property
   * `touch-events: none` or with specific meta tag viewport values. However, each of these
   * browsers still handle clicks differently, such as when to fire off or cancel the event
   * (like scrolling when the target is a button, or holding a button down).
   * For browsers that already remove the 300ms delay, consider Ionic's tap system as a way to
   * normalize how clicks are handled across the various devices so there's an expected response
   * no matter what the device, platform or version. Additionally, Ionic will prevent
   * ghostclicks which even browsers that remove the delay still experience.
   *
   * In some cases, third-party libraries may also be working with touch events which can interfere
   * with the tap system. For example, mapping libraries like Google or Leaflet Maps often implement
   * a touch detection system which conflicts with Ionic's tap system.
   *
   * ### Disabling the tap system
   *
   * To disable the tap for an element and all of its children elements,
   * add the attribute `data-tap-disabled="true"`.
   *
   * ```html
   * <div data-tap-disabled="true">
   *     <div id="google-map"></div>
   * </div>
   * ```
   *
   * ### Additional Notes:
   *
   * - Ionic tap  works with Ionic's JavaScript scrolling
   * - Elements can come and go from the DOM and Ionic tap doesn't keep adding and removing
   *   listeners
   * - No "tap delay" after the first "tap" (you can tap as fast as you want, they all click)
   * - Minimal events listeners, only being added to document
   * - Correct focus in/out on each input type (select, textearea, range) on each platform/device
   * - Shows and hides virtual keyboard correctly for each platform/device
   * - Works with labels surrounding inputs
   * - Does not fire off a click if the user moves the pointer too far
   * - Adds and removes an 'activated' css class
   * - Multiple [unit tests](https://github.com/driftyco/ionic/blob/master/test/unit/utils/tap.unit.js) for each scenario
   *
   */
  /*

   IONIC TAP
   ---------------
   - Both touch and mouse events are added to the document.body on DOM ready
   - If a touch event happens, it does not use mouse event listeners
   - On touchend, if the distance between start and end was small, trigger a click
   - In the triggered click event, add a 'isIonicTap' property
   - The triggered click receives the same x,y coordinates as as the end event
   - On document.body click listener (with useCapture=true), only allow clicks with 'isIonicTap'
   - Triggering clicks with mouse events work the same as touch, except with mousedown/mouseup
   - Tapping inputs is disabled during scrolling
   */

  var tapDoc; // the element which the listeners are on (document.body)
  var tapActiveEle; // the element which is active (probably has focus)
  var tapEnabledTouchEvents;
  var tapMouseResetTimer;
  var tapPointerMoved;
  var tapPointerStart;
  var tapTouchFocusedInput;
  var tapLastTouchTarget;
  var tapTouchMoveListener = 'touchmove';

// how much the coordinates can be off between start/end, but still a click
  var TAP_RELEASE_TOLERANCE = 6; // default tolerance
  var TAP_RELEASE_BUTTON_TOLERANCE = 50; // button elements should have a larger tolerance

  var tapEventListeners = {
    'click': tapClickGateKeeper,

    'mousedown': tapMouseDown,
    'mouseup': tapMouseUp,
    'mousemove': tapMouseMove,

    'touchstart': tapTouchStart,
    'touchend': tapTouchEnd,
    'touchcancel': tapTouchCancel,
    'touchmove': tapTouchMove,

    'pointerdown': tapTouchStart,
    'pointerup': tapTouchEnd,
    'pointercancel': tapTouchCancel,
    'pointermove': tapTouchMove,

    'MSPointerDown': tapTouchStart,
    'MSPointerUp': tapTouchEnd,
    'MSPointerCancel': tapTouchCancel,
    'MSPointerMove': tapTouchMove,

    'focusin': tapFocusIn,
    'focusout': tapFocusOut
  };

  ionic.tap = {

    register: function(ele) {
      tapDoc = ele;

      tapEventListener('click', true, true);
      tapEventListener('mouseup');
      tapEventListener('mousedown');

      if( window.navigator.pointerEnabled ) {
        tapEventListener('pointerdown');
        tapEventListener('pointerup');
        tapEventListener('pointcancel');
        tapTouchMoveListener = 'pointermove';

      } else if (window.navigator.msPointerEnabled) {
        tapEventListener('MSPointerDown');
        tapEventListener('MSPointerUp');
        tapEventListener('MSPointerCancel');
        tapTouchMoveListener = 'MSPointerMove';

      } else {
        tapEventListener('touchstart');
        tapEventListener('touchend');
        tapEventListener('touchcancel');
      }

      tapEventListener('focusin');
      tapEventListener('focusout');

      return function() {
        for(var type in tapEventListeners) {
          tapEventListener(type, false);
        }
        tapDoc = null;
        tapActiveEle = null;
        tapEnabledTouchEvents = false;
        tapPointerMoved = false;
        tapPointerStart = null;
      };
    },

    ignoreScrollStart: function(e) {
      return (e.defaultPrevented) ||  // defaultPrevented has been assigned by another component handling the event
        (e.target.isContentEditable) ||
        (/^(file|range)$/i).test(e.target.type) ||
        (e.target.dataset ? e.target.dataset.preventScroll : e.target.getAttribute('data-prevent-default')) == 'true' || // manually set within an elements attributes
        (!!(/^(object|embed)$/i).test(e.target.tagName)) ||  // flash/movie/object touches should not try to scroll
        ionic.tap.isElementTapDisabled(e.target); // check if this element, or an ancestor, has `data-tap-disabled` attribute
    },

    isTextInput: function(ele) {
      return !!ele &&
        (ele.tagName == 'TEXTAREA' ||
          ele.contentEditable === 'true' ||
          (ele.tagName == 'INPUT' && !(/^(radio|checkbox|range|file|submit|reset)$/i).test(ele.type)) );
    },

    isDateInput: function(ele) {
      return !!ele &&
        (ele.tagName == 'INPUT' && (/^(date|time|datetime-local|month|week)$/i).test(ele.type));
    },

    isLabelWithTextInput: function(ele) {
      var container = tapContainingElement(ele, false);

      return !!container &&
        ionic.tap.isTextInput( tapTargetElement( container ) );
    },

    containsOrIsTextInput: function(ele) {
      return ionic.tap.isTextInput(ele) || ionic.tap.isLabelWithTextInput(ele);
    },

    cloneFocusedInput: function(container, scrollIntance) {
      if(ionic.tap.hasCheckedClone) return;
      ionic.tap.hasCheckedClone = true;

      ionic.requestAnimationFrame(function(){
        var focusInput = container.querySelector(':focus');
        if( ionic.tap.isTextInput(focusInput) ) {
          var clonedInput = focusInput.parentElement.querySelector('.cloned-text-input');
          if(!clonedInput) {
            clonedInput = document.createElement(focusInput.tagName);
            clonedInput.placeholder = focusInput.placeholder;
            clonedInput.type = focusInput.type;
            clonedInput.value = focusInput.value;
            clonedInput.style = focusInput.style;
            clonedInput.className = focusInput.className;
            clonedInput.classList.add('cloned-text-input');
            clonedInput.readOnly = true;
            focusInput.parentElement.insertBefore(clonedInput, focusInput);
            focusInput.style.top = focusInput.offsetTop;
            focusInput.classList.add('previous-input-focus');
          }
        }
      });
    },

    hasCheckedClone: false,

    removeClonedInputs: function(container, scrollIntance) {
      ionic.tap.hasCheckedClone = false;

      ionic.requestAnimationFrame(function(){
        var clonedInputs = container.querySelectorAll('.cloned-text-input');
        var previousInputFocus = container.querySelectorAll('.previous-input-focus');
        var x;

        for(x=0; x<clonedInputs.length; x++) {
          clonedInputs[x].parentElement.removeChild( clonedInputs[x] );
        }

        for(x=0; x<previousInputFocus.length; x++) {
          previousInputFocus[x].classList.remove('previous-input-focus');
          previousInputFocus[x].style.top = '';
          previousInputFocus[x].focus();
        }
      });
    },

    requiresNativeClick: function(ele) {
      if(!ele || ele.disabled || (/^(file|range)$/i).test(ele.type) || (/^(object|video)$/i).test(ele.tagName) || ionic.tap.isLabelContainingFileInput(ele) ) {
        return true;
      }
      return ionic.tap.isElementTapDisabled(ele);
    },

    isLabelContainingFileInput: function(ele) {
      var lbl = tapContainingElement(ele);
      if(lbl.tagName !== 'LABEL') return false;
      var fileInput = lbl.querySelector('input[type=file]');
      if(fileInput && fileInput.disabled === false) return true;
      return false;
    },

    isElementTapDisabled: function(ele) {
      if(ele && ele.nodeType === 1) {
        var element = ele;
        while(element) {
          if( (element.dataset ? element.dataset.tapDisabled : element.getAttribute('data-tap-disabled')) == 'true' ) {
            return true;
          }
          element = element.parentElement;
        }
      }
      return false;
    },

    setTolerance: function(releaseTolerance, releaseButtonTolerance) {
      TAP_RELEASE_TOLERANCE = releaseTolerance;
      TAP_RELEASE_BUTTON_TOLERANCE = releaseButtonTolerance;
    },

    cancelClick: function() {
      // used to cancel any simulated clicks which may happen on a touchend/mouseup
      // gestures uses this method within its tap and hold events
      tapPointerMoved = true;
    }

  };

  function tapEventListener(type, enable, useCapture) {
    if(enable !== false) {
      tapDoc.addEventListener(type, tapEventListeners[type], useCapture);
    } else {
      tapDoc.removeEventListener(type, tapEventListeners[type]);
    }
  }

  function tapClick(e) {
    // simulate a normal click by running the element's click method then focus on it
    var container = tapContainingElement(e.target);
    var ele = tapTargetElement(container);

    if( ionic.tap.requiresNativeClick(ele) || tapPointerMoved ) return false;

    var c = getPointerCoordinates(e);

    void 0;
    triggerMouseEvent('click', ele, c.x, c.y);

    // if it's an input, focus in on the target, otherwise blur
    tapHandleFocus(ele);
  }

  function triggerMouseEvent(type, ele, x, y) {
    // using initMouseEvent instead of MouseEvent for our Android friends
    var clickEvent = document.createEvent("MouseEvents");
    clickEvent.initMouseEvent(type, true, true, window, 1, 0, 0, x, y, false, false, false, false, 0, null);
    clickEvent.isIonicTap = true;
    ele.dispatchEvent(clickEvent);
  }

  function tapClickGateKeeper(e) {
    if(e.target.type == 'submit' && e.detail === 0) {
      // do not prevent click if it came from an "Enter" or "Go" keypress submit
      return;
    }

    // do not allow through any click events that were not created by ionic.tap
    if( (ionic.scroll.isScrolling && ionic.tap.containsOrIsTextInput(e.target) ) ||
      (!e.isIonicTap && !ionic.tap.requiresNativeClick(e.target)) ) {
      void 0;
      e.stopPropagation();

      if( !ionic.tap.isLabelWithTextInput(e.target) ) {
        // labels clicks from native should not preventDefault othersize keyboard will not show on input focus
        e.preventDefault();
      }
      return false;
    }
  }

// MOUSE
  function tapMouseDown(e) {
    if(e.isIonicTap || tapIgnoreEvent(e)) return;

    if(tapEnabledTouchEvents) {
      void 0;
      e.stopPropagation();

      if( (!ionic.tap.isTextInput(e.target) || tapLastTouchTarget !== e.target) && !(/^(select|option)$/i).test(e.target.tagName) ) {
        // If you preventDefault on a text input then you cannot move its text caret/cursor.
        // Allow through only the text input default. However, without preventDefault on an
        // input the 300ms delay can change focus on inputs after the keyboard shows up.
        // The focusin event handles the chance of focus changing after the keyboard shows.
        e.preventDefault();
      }

      return false;
    }

    tapPointerMoved = false;
    tapPointerStart = getPointerCoordinates(e);

    tapEventListener('mousemove');
    ionic.activator.start(e);
  }

  function tapMouseUp(e) {
    if(tapEnabledTouchEvents) {
      e.stopPropagation();
      e.preventDefault();
      return false;
    }

    if( tapIgnoreEvent(e) || (/^(select|option)$/i).test(e.target.tagName) ) return false;

    if( !tapHasPointerMoved(e) ) {
      tapClick(e);
    }
    tapEventListener('mousemove', false);
    ionic.activator.end();
    tapPointerMoved = false;
  }

  function tapMouseMove(e) {
    if( tapHasPointerMoved(e) ) {
      tapEventListener('mousemove', false);
      ionic.activator.end();
      tapPointerMoved = true;
      return false;
    }
  }


// TOUCH
  function tapTouchStart(e) {
    if( tapIgnoreEvent(e) ) return;

    tapPointerMoved = false;

    tapEnableTouchEvents();
    tapPointerStart = getPointerCoordinates(e);

    tapEventListener(tapTouchMoveListener);
    ionic.activator.start(e);

    if( ionic.Platform.isIOS() && ionic.tap.isLabelWithTextInput(e.target) ) {
      // if the tapped element is a label, which has a child input
      // then preventDefault so iOS doesn't ugly auto scroll to the input
      // but do not prevent default on Android or else you cannot move the text caret
      // and do not prevent default on Android or else no virtual keyboard shows up

      var textInput = tapTargetElement( tapContainingElement(e.target) );
      if( textInput !== tapActiveEle ) {
        // don't preventDefault on an already focused input or else iOS's text caret isn't usable
        e.preventDefault();
      }
    }
  }

  function tapTouchEnd(e) {
    if( tapIgnoreEvent(e) ) return;

    tapEnableTouchEvents();
    if( !tapHasPointerMoved(e) ) {
      tapClick(e);

      if( (/^(select|option)$/i).test(e.target.tagName) ) {
        e.preventDefault();
      }
    }

    tapLastTouchTarget = e.target;
    tapTouchCancel();
  }

  function tapTouchMove(e) {
    if( tapHasPointerMoved(e) ) {
      tapPointerMoved = true;
      tapEventListener(tapTouchMoveListener, false);
      ionic.activator.end();
      return false;
    }
  }

  function tapTouchCancel(e) {
    tapEventListener(tapTouchMoveListener, false);
    ionic.activator.end();
    tapPointerMoved = false;
  }

  function tapEnableTouchEvents() {
    tapEnabledTouchEvents = true;
    clearTimeout(tapMouseResetTimer);
    tapMouseResetTimer = setTimeout(function(){
      tapEnabledTouchEvents = false;
    }, 2000);
  }

  function tapIgnoreEvent(e) {
    if(e.isTapHandled) return true;
    e.isTapHandled = true;

    if( ionic.scroll.isScrolling && ionic.tap.containsOrIsTextInput(e.target) ) {
      e.preventDefault();
      return true;
    }
  }

  function tapHandleFocus(ele) {
    tapTouchFocusedInput = null;

    var triggerFocusIn = false;

    if(ele.tagName == 'SELECT') {
      // trick to force Android options to show up
      triggerMouseEvent('mousedown', ele, 0, 0);
      ele.focus && ele.focus();
      triggerFocusIn = true;

    } else if(tapActiveElement() === ele) {
      // already is the active element and has focus
      triggerFocusIn = true;

    } else if( (/^(input|textarea)$/i).test(ele.tagName) ) {
      triggerFocusIn = true;
      ele.focus && ele.focus();
      ele.value = ele.value;
      if( tapEnabledTouchEvents ) {
        tapTouchFocusedInput = ele;
      }

    } else {
      tapFocusOutActive();
    }

    if(triggerFocusIn) {
      tapActiveElement(ele);
      ionic.trigger('ionic.focusin', {
        target: ele
      }, true);
    }
  }

  function tapFocusOutActive() {
    var ele = tapActiveElement();
    if(ele && (/^(input|textarea|select)$/i).test(ele.tagName) ) {
      void 0;
      ele.blur();
    }
    tapActiveElement(null);
  }

  function tapFocusIn(e) {
    // Because a text input doesn't preventDefault (so the caret still works) there's a chance
    // that it's mousedown event 300ms later will change the focus to another element after
    // the keyboard shows up.

    if( tapEnabledTouchEvents &&
      ionic.tap.isTextInput( tapActiveElement() ) &&
      ionic.tap.isTextInput(tapTouchFocusedInput) &&
      tapTouchFocusedInput !== e.target ) {

      // 1) The pointer is from touch events
      // 2) There is an active element which is a text input
      // 3) A text input was just set to be focused on by a touch event
      // 4) A new focus has been set, however the target isn't the one the touch event wanted
      void 0;
      tapTouchFocusedInput.focus();
      tapTouchFocusedInput = null;
    }
    ionic.scroll.isScrolling = false;
  }

  function tapFocusOut() {
    tapActiveElement(null);
  }

  function tapActiveElement(ele) {
    if(arguments.length) {
      tapActiveEle = ele;
    }
    return tapActiveEle || document.activeElement;
  }

  function tapHasPointerMoved(endEvent) {
    if(!endEvent || endEvent.target.nodeType !== 1 || !tapPointerStart || ( tapPointerStart.x === 0 && tapPointerStart.y === 0 )) {
      return false;
    }
    var endCoordinates = getPointerCoordinates(endEvent);

    var hasClassList = !!(endEvent.target.classList && endEvent.target.classList.contains);
    var releaseTolerance = hasClassList & endEvent.target.classList.contains('button') ?
      TAP_RELEASE_BUTTON_TOLERANCE :
      TAP_RELEASE_TOLERANCE;

    return Math.abs(tapPointerStart.x - endCoordinates.x) > releaseTolerance ||
      Math.abs(tapPointerStart.y - endCoordinates.y) > releaseTolerance;
  }

  function getPointerCoordinates(event) {
    // This method can get coordinates for both a mouse click
    // or a touch depending on the given event
    var c = { x:0, y:0 };
    if(event) {
      var touches = event.touches && event.touches.length ? event.touches : [event];
      var e = (event.changedTouches && event.changedTouches[0]) || touches[0];
      if(e) {
        c.x = e.clientX || e.pageX || 0;
        c.y = e.clientY || e.pageY || 0;
      }
    }
    return c;
  }

  function tapContainingElement(ele, allowSelf) {
    var climbEle = ele;
    for(var x=0; x<6; x++) {
      if(!climbEle) break;
      if(climbEle.tagName === 'LABEL') return climbEle;
      climbEle = climbEle.parentElement;
    }
    if(allowSelf !== false) return ele;
  }

  function tapTargetElement(ele) {
    if(ele && ele.tagName === 'LABEL') {
      if(ele.control) return ele.control;

      // older devices do not support the "control" property
      if(ele.querySelector) {
        var control = ele.querySelector('input,textarea,select');
        if(control) return control;
      }
    }
    return ele;
  }

  ionic.DomUtil.ready(function(){
    var ng = typeof angular !== 'undefined' ? angular : null;
    //do nothing for e2e tests
    if (!ng || (ng && !ng.scenario)) {
      ionic.tap.register(document);
    }
  });

  (function(document, ionic) {
    'use strict';

    var queueElements = {};   // elements that should get an active state in XX milliseconds
    var activeElements = {};  // elements that are currently active
    var keyId = 0;            // a counter for unique keys for the above ojects
    var ACTIVATED_CLASS = 'activated';

    ionic.activator = {

      start: function(e) {
        var self = this;

        // when an element is touched/clicked, it climbs up a few
        // parents to see if it is an .item or .button element
        ionic.requestAnimationFrame(function(){
          if ( ionic.tap.requiresNativeClick(e.target) ) return;
          var ele = e.target;
          var eleToActivate;

          for(var x=0; x<4; x++) {
            if(!ele || ele.nodeType !== 1) break;
            if(eleToActivate && ele.classList.contains('item')) {
              eleToActivate = ele;
              break;
            }
            if( ele.tagName == 'A' || ele.tagName == 'BUTTON' || ele.hasAttribute('ng-click') ) {
              eleToActivate = ele;
              break;
            }
            if( ele.classList.contains('button') ) {
              eleToActivate = ele;
              break;
            }
            ele = ele.parentElement;
          }

          if(eleToActivate) {
            // queue that this element should be set to active
            queueElements[keyId] = eleToActivate;

            // in XX milliseconds, set the queued elements to active
            if(e.type === 'touchstart') {
              self._activateTimeout = setTimeout(activateElements, 80);
            } else {
              ionic.requestAnimationFrame(activateElements);
            }

            keyId = (keyId > 19 ? 0 : keyId + 1);
          }

        });
      },

      end: function() {
        // clear out any active/queued elements after XX milliseconds
        clearTimeout(this._activateTimeout);
        setTimeout(clear, 200);
      }

    };

    function clear() {
      // clear out any elements that are queued to be set to active
      queueElements = {};

      // in the next frame, remove the active class from all active elements
      ionic.requestAnimationFrame(deactivateElements);
    }

    function activateElements() {
      // activate all elements in the queue
      for(var key in queueElements) {
        if(queueElements[key]) {
          queueElements[key].classList.add(ACTIVATED_CLASS);
          activeElements[key] = queueElements[key];
        }
      }
      queueElements = {};
    }

    function deactivateElements() {
      for(var key in activeElements) {
        if(activeElements[key]) {
          activeElements[key].classList.remove(ACTIVATED_CLASS);
          delete activeElements[key];
        }
      }
    }

  })(document, ionic);

  (function(ionic) {

    /* for nextUid() function below */
    var uid = ['0','0','0'];

    /**
     * Various utilities used throughout Ionic
     *
     * Some of these are adopted from underscore.js and backbone.js, both also MIT licensed.
     */
    ionic.Utils = {

      arrayMove: function (arr, old_index, new_index) {
        if (new_index >= arr.length) {
          var k = new_index - arr.length;
          while ((k--) + 1) {
            arr.push(undefined);
          }
        }
        arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
        return arr;
      },

      /**
       * Return a function that will be called with the given context
       */
      proxy: function(func, context) {
        var args = Array.prototype.slice.call(arguments, 2);
        return function() {
          return func.apply(context, args.concat(Array.prototype.slice.call(arguments)));
        };
      },

      /**
       * Only call a function once in the given interval.
       *
       * @param func {Function} the function to call
       * @param wait {int} how long to wait before/after to allow function calls
       * @param immediate {boolean} whether to call immediately or after the wait interval
       */
      debounce: function(func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        return function() {
          context = this;
          args = arguments;
          timestamp = new Date();
          var later = function() {
            var last = (new Date()) - timestamp;
            if (last < wait) {
              timeout = setTimeout(later, wait - last);
            } else {
              timeout = null;
              if (!immediate) result = func.apply(context, args);
            }
          };
          var callNow = immediate && !timeout;
          if (!timeout) {
            timeout = setTimeout(later, wait);
          }
          if (callNow) result = func.apply(context, args);
          return result;
        };
      },

      /**
       * Throttle the given fun, only allowing it to be
       * called at most every `wait` ms.
       */
      throttle: function(func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        options || (options = {});
        var later = function() {
          previous = options.leading === false ? 0 : Date.now();
          timeout = null;
          result = func.apply(context, args);
        };
        return function() {
          var now = Date.now();
          if (!previous && options.leading === false) previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
      },
      // Borrowed from Backbone.js's extend
      // Helper function to correctly set up the prototype chain, for subclasses.
      // Similar to `goog.inherits`, but uses a hash of prototype properties and
      // class properties to be extended.
      inherit: function(protoProps, staticProps) {
        var parent = this;
        var child;

        // The constructor function for the new subclass is either defined by you
        // (the "constructor" property in your `extend` definition), or defaulted
        // by us to simply call the parent's constructor.
        if (protoProps && protoProps.hasOwnProperty('constructor')) {
          child = protoProps.constructor;
        } else {
          child = function(){ return parent.apply(this, arguments); };
        }

        // Add static properties to the constructor function, if supplied.
        ionic.extend(child, parent, staticProps);

        // Set the prototype chain to inherit from `parent`, without calling
        // `parent`'s constructor function.
        var Surrogate = function(){ this.constructor = child; };
        Surrogate.prototype = parent.prototype;
        child.prototype = new Surrogate();

        // Add prototype properties (instance properties) to the subclass,
        // if supplied.
        if (protoProps) ionic.extend(child.prototype, protoProps);

        // Set a convenience property in case the parent's prototype is needed
        // later.
        child.__super__ = parent.prototype;

        return child;
      },

      // Extend adapted from Underscore.js
      extend: function(obj) {
        var args = Array.prototype.slice.call(arguments, 1);
        for(var i = 0; i < args.length; i++) {
          var source = args[i];
          if (source) {
            for (var prop in source) {
              obj[prop] = source[prop];
            }
          }
        }
        return obj;
      },

      /**
       * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric
       * characters such as '012ABC'. The reason why we are not using simply a number counter is that
       * the number string gets longer over time, and it can also overflow, where as the nextId
       * will grow much slower, it is a string, and it will never overflow.
       *
       * @returns an unique alpha-numeric string
       */
      nextUid: function() {
        var index = uid.length;
        var digit;

        while(index) {
          index--;
          digit = uid[index].charCodeAt(0);
          if (digit == 57 /*'9'*/) {
            uid[index] = 'A';
            return uid.join('');
          }
          if (digit == 90  /*'Z'*/) {
            uid[index] = '0';
          } else {
            uid[index] = String.fromCharCode(digit + 1);
            return uid.join('');
          }
        }
        uid.unshift('0');
        return uid.join('');
      }
    };

    // Bind a few of the most useful functions to the ionic scope
    ionic.inherit = ionic.Utils.inherit;
    ionic.extend = ionic.Utils.extend;
    ionic.throttle = ionic.Utils.throttle;
    ionic.proxy = ionic.Utils.proxy;
    ionic.debounce = ionic.Utils.debounce;

  })(window.ionic);

  /**
   * @ngdoc page
   * @name keyboard
   * @module ionic
   * @description
   * On both Android and iOS, Ionic will attempt to prevent the keyboard from
   * obscuring inputs and focusable elements when it appears by scrolling them
   * into view.  In order for this to work, any focusable elements must be within
   * a [Scroll View](http://ionicframework.com/docs/api/directive/ionScroll/)
   * or a directive such as [Content](http://ionicframework.com/docs/api/directive/ionContent/)
   * that has a Scroll View.
   *
   * It will also attempt to prevent the native overflow scrolling on focus,
   * which can cause layout issues such as pushing headers up and out of view.
   *
   * The keyboard fixes work best in conjunction with the
   * [Ionic Keyboard Plugin](https://github.com/driftyco/ionic-plugins-keyboard),
   * although it will perform reasonably well without.  However, if you are using
   * Cordova there is no reason not to use the plugin.
   *
   * ### Hide when keyboard shows
   *
   * To hide an element when the keyboard is open, add the class `hide-on-keyboard-open`.
   *
   * ```html
   * <div class="hide-on-keyboard-open">
   *   <div id="google-map"></div>
   * </div>
   * ```
   * ----------
   *
   * ### Plugin Usage
   * Information on using the plugin can be found at
   * [https://github.com/driftyco/ionic-plugins-keyboard](https://github.com/driftyco/ionic-plugins-keyboard).
   *
   * ----------
   *
   * ### Android Notes
   * - If your app is running in fullscreen, i.e. you have
   *   `<preference name="Fullscreen" value="true" />` in your `config.xml` file
   *   you will need to set `ionic.Platform.isFullScreen = true` manually.
   *
   * - You can configure the behavior of the web view when the keyboard shows by setting
   *   [android:windowSoftInputMode](http://developer.android.com/reference/android/R.attr.html#windowSoftInputMode)
   *   to either `adjustPan`, `adjustResize` or `adjustNothing` in your app's
   *   activity in `AndroidManifest.xml`. `adjustResize` is the recommended setting
   *   for Ionic, but if for some reason you do use `adjustPan` you will need to
   *   set `ionic.Platform.isFullScreen = true`.
   *
   *   ```xml
   *   <activity android:windowSoftInputMode="adjustResize">
   *
   *   ```
   *
   * ### iOS Notes
   * - If the content of your app (including the header) is being pushed up and
   *   out of view on input focus, try setting `cordova.plugins.Keyboard.disableScroll(true)`.
   *   This does **not** disable scrolling in the Ionic scroll view, rather it
   *   disables the native overflow scrolling that happens automatically as a
   *   result of focusing on inputs below the keyboard.
   *
   */

  var keyboardViewportHeight = window.innerHeight;
  var keyboardIsOpen;
  var keyboardActiveElement;
  var keyboardFocusOutTimer;
  var keyboardFocusInTimer;
  var keyboardLastShow = 0;

  var KEYBOARD_OPEN_CSS = 'keyboard-open';
  var SCROLL_CONTAINER_CSS = 'scroll';

  ionic.keyboard = {
    isOpen: false,
    height: null,
    landscape: false,
  };

  function keyboardInit() {
    if( keyboardHasPlugin() ) {
      window.addEventListener('native.keyboardshow', keyboardNativeShow);
      window.addEventListener('native.keyboardhide', keyboardFocusOut);

      //deprecated
      window.addEventListener('native.showkeyboard', keyboardNativeShow);
      window.addEventListener('native.hidekeyboard', keyboardFocusOut);
    }
    else {
      document.body.addEventListener('focusout', keyboardFocusOut);
    }

    document.body.addEventListener('ionic.focusin', keyboardBrowserFocusIn);
    document.body.addEventListener('focusin', keyboardBrowserFocusIn);

    document.body.addEventListener('orientationchange', keyboardOrientationChange);

    document.removeEventListener('touchstart', keyboardInit);
  }

  function keyboardNativeShow(e) {
    clearTimeout(keyboardFocusOutTimer);
    ionic.keyboard.height = e.keyboardHeight;
  }

  function keyboardBrowserFocusIn(e) {
    if( !e.target || !ionic.tap.isTextInput(e.target) || ionic.tap.isDateInput(e.target) || !keyboardIsWithinScroll(e.target) ) return;

    document.addEventListener('keydown', keyboardOnKeyDown, false);

    document.body.scrollTop = 0;
    document.body.querySelector('.scroll-content').scrollTop = 0;

    keyboardActiveElement = e.target;

    keyboardSetShow(e);
  }

  function keyboardSetShow(e) {
    clearTimeout(keyboardFocusInTimer);
    clearTimeout(keyboardFocusOutTimer);

    keyboardFocusInTimer = setTimeout(function(){
      if ( keyboardLastShow + 350 > Date.now() ) return;
      keyboardLastShow = Date.now();
      var keyboardHeight;
      var elementBounds = keyboardActiveElement.getBoundingClientRect();
      var count = 0;

      var pollKeyboardHeight = setInterval(function(){

        keyboardHeight = keyboardGetHeight();
        if (count > 10){
          clearInterval(pollKeyboardHeight);
          //waited long enough, just guess
          keyboardHeight = 275;
        }
        if (keyboardHeight){
          keyboardShow(e.target, elementBounds.top, elementBounds.bottom, keyboardViewportHeight, keyboardHeight);
          clearInterval(pollKeyboardHeight);
        }
        count++;

      }, 100);
    }, 32);
  }

  function keyboardShow(element, elementTop, elementBottom, viewportHeight, keyboardHeight) {
    var details = {
      target: element,
      elementTop: Math.round(elementTop),
      elementBottom: Math.round(elementBottom),
      keyboardHeight: keyboardHeight,
      viewportHeight: viewportHeight
    };

    details.hasPlugin = keyboardHasPlugin();

    details.contentHeight = viewportHeight - keyboardHeight;

    void 0;

    // figure out if the element is under the keyboard
    details.isElementUnderKeyboard = (details.elementBottom > details.contentHeight);

    ionic.keyboard.isOpen = true;

    // send event so the scroll view adjusts
    keyboardActiveElement = element;
    ionic.trigger('scrollChildIntoView', details, true);

    ionic.requestAnimationFrame(function(){
      document.body.classList.add(KEYBOARD_OPEN_CSS);
    });

    // any showing part of the document that isn't within the scroll the user
    // could touchmove and cause some ugly changes to the app, so disable
    // any touchmove events while the keyboard is open using e.preventDefault()
    document.addEventListener('touchmove', keyboardPreventDefault, false);

    return details;
  }

  function keyboardFocusOut(e) {
    clearTimeout(keyboardFocusOutTimer);

    keyboardFocusOutTimer = setTimeout(keyboardHide, 350);
  }

  function keyboardHide() {
    void 0;
    ionic.keyboard.isOpen = false;

    ionic.trigger('resetScrollView', {
      target: keyboardActiveElement
    }, true);

    ionic.requestAnimationFrame(function(){
      document.body.classList.remove(KEYBOARD_OPEN_CSS);
    });

    // the keyboard is gone now, remove the touchmove that disables native scroll
    document.removeEventListener('touchmove', keyboardPreventDefault);
    document.removeEventListener('keydown', keyboardOnKeyDown);
  }

  function keyboardUpdateViewportHeight() {
    if( window.innerHeight > keyboardViewportHeight ) {
      keyboardViewportHeight = window.innerHeight;
    }
  }

  function keyboardOnKeyDown(e) {
    if( ionic.scroll.isScrolling ) {
      keyboardPreventDefault(e);
    }
  }

  function keyboardPreventDefault(e) {
    if( e.target.tagName !== 'TEXTAREA' ) {
      e.preventDefault();
    }
  }

  function keyboardOrientationChange() {
    var updatedViewportHeight = window.innerHeight;

    //too slow, have to wait for updated height
    if (updatedViewportHeight === keyboardViewportHeight){
      var count = 0;
      var pollViewportHeight = setInterval(function(){
        //give up
        if (count > 10){
          clearInterval(pollViewportHeight);
        }

        updatedViewportHeight = window.innerHeight;

        if (updatedViewportHeight !== keyboardViewportHeight){
          if (updatedViewportHeight < keyboardViewportHeight){
            ionic.keyboard.landscape = true;
          }
          else {
            ionic.keyboard.landscape = false;
          }
          keyboardViewportHeight = updatedViewportHeight;
          clearInterval(pollViewportHeight);
        }
        count++;

      }, 50);
    }
    else {
      keyboardViewportHeight = updatedViewportHeight;
    }
  }

  function keyboardGetHeight() {
    // check if we are already have a keyboard height from the plugin
    if ( ionic.keyboard.height ) {
      return ionic.keyboard.height;
    }

    if ( ionic.Platform.isAndroid() ){
      //should be using the plugin, no way to know how big the keyboard is, so guess
      if ( ionic.Platform.isFullScreen ){
        return 275;
      }
      //otherwise, wait for the screen to resize
      if ( window.innerHeight < keyboardViewportHeight ){
        return keyboardViewportHeight - window.innerHeight;
      }
      else {
        return 0;
      }
    }

    // fallback for when its the webview without the plugin
    // or for just the standard web browser
    if( ionic.Platform.isIOS() ) {
      if ( ionic.keyboard.landscape ){
        return 206;
      }

      if (!ionic.Platform.isWebView()){
        return 216;
      }

      return 260;
    }

    // safe guess
    return 275;
  }

  function keyboardIsWithinScroll(ele) {
    while(ele) {
      if(ele.classList.contains(SCROLL_CONTAINER_CSS)) {
        return true;
      }
      ele = ele.parentElement;
    }
    return false;
  }

  function keyboardHasPlugin() {
    return !!(window.cordova && cordova.plugins && cordova.plugins.Keyboard);
  }

  ionic.Platform.ready(function() {
    keyboardUpdateViewportHeight();

    // Android sometimes reports bad innerHeight on window.load
    // try it again in a lil bit to play it safe
    setTimeout(keyboardUpdateViewportHeight, 999);

    // only initialize the adjustments for the virtual keyboard
    // if a touchstart event happens
    document.addEventListener('touchstart', keyboardInit, false);
  });



  var viewportTag;
  var viewportProperties = {};

  ionic.viewport = {
    orientation: function() {
      // 0 = Portrait
      // 90 = Landscape
      // not using window.orientation because each device has a different implementation
      return (window.innerWidth > window.innerHeight ? 90 : 0);
    }
  };

  function viewportLoadTag() {
    var x;

    for(x=0; x<document.head.children.length; x++) {
      if(document.head.children[x].name == 'viewport') {
        viewportTag = document.head.children[x];
        break;
      }
    }

    if(viewportTag) {
      var props = viewportTag.content.toLowerCase().replace(/\s+/g, '').split(',');
      var keyValue;
      for(x=0; x<props.length; x++) {
        if(props[x]) {
          keyValue = props[x].split('=');
          viewportProperties[ keyValue[0] ] = (keyValue.length > 1 ? keyValue[1] : '_');
        }
      }
      viewportUpdate();
    }
  }

  function viewportUpdate() {
    // unit tests in viewport.unit.js

    var initWidth = viewportProperties.width;
    var initHeight = viewportProperties.height;
    var p = ionic.Platform;
    var version = p.version();
    var DEVICE_WIDTH = 'device-width';
    var DEVICE_HEIGHT = 'device-height';
    var orientation = ionic.viewport.orientation();

    // Most times we're removing the height and adding the width
    // So this is the default to start with, then modify per platform/version/oreintation
    delete viewportProperties.height;
    viewportProperties.width = DEVICE_WIDTH;

    if( p.isIPad() ) {
      // iPad

      if( version > 7 ) {
        // iPad >= 7.1
        // https://issues.apache.org/jira/browse/CB-4323
        delete viewportProperties.width;

      } else {
        // iPad <= 7.0

        if( p.isWebView() ) {
          // iPad <= 7.0 WebView

          if( orientation == 90 ) {
            // iPad <= 7.0 WebView Landscape
            viewportProperties.height = '0';

          } else if(version == 7) {
            // iPad <= 7.0 WebView Portait
            viewportProperties.height = DEVICE_HEIGHT;
          }
        } else {
          // iPad <= 6.1 Browser
          if(version < 7) {
            viewportProperties.height = '0';
          }
        }
      }

    } else if( p.isIOS() ) {
      // iPhone

      if( p.isWebView() ) {
        // iPhone WebView

        if(version > 7) {
          // iPhone >= 7.1 WebView
          delete viewportProperties.width;

        } else if(version < 7) {
          // iPhone <= 6.1 WebView
          // if height was set it needs to get removed with this hack for <= 6.1
          if( initHeight ) viewportProperties.height = '0';

        } else if(version == 7) {
          //iPhone == 7.0 WebView
          viewportProperties.height = DEVICE_HEIGHT;
        }

      } else {
        // iPhone Browser

        if (version < 7) {
          // iPhone <= 6.1 Browser
          // if height was set it needs to get removed with this hack for <= 6.1
          if( initHeight ) viewportProperties.height = '0';
        }
      }

    }

    // only update the viewport tag if there was a change
    if(initWidth !== viewportProperties.width || initHeight !== viewportProperties.height) {
      viewportTagUpdate();
    }
  }

  function viewportTagUpdate() {
    var key, props = [];
    for(key in viewportProperties) {
      if( viewportProperties[key] ) {
        props.push(key + (viewportProperties[key] == '_' ? '' : '=' + viewportProperties[key]) );
      }
    }

    viewportTag.content = props.join(', ');
  }

  ionic.Platform.ready(function() {
    viewportLoadTag();

    window.addEventListener("orientationchange", function(){
      setTimeout(viewportUpdate, 1000);
    }, false);
  });

  (function(ionic) {
    'use strict';
    ionic.views.View = function() {
      this.initialize.apply(this, arguments);
    };

    ionic.views.View.inherit = ionic.inherit;

    ionic.extend(ionic.views.View.prototype, {
      initialize: function() {}
    });

  })(window.ionic);

  /*
   * Scroller
   * http://github.com/zynga/scroller
   *
   * Copyright 2011, Zynga Inc.
   * Licensed under the MIT License.
   * https://raw.github.com/zynga/scroller/master/MIT-LICENSE.txt
   *
   * Based on the work of: Unify Project (unify-project.org)
   * http://unify-project.org
   * Copyright 2011, Deutsche Telekom AG
   * License: MIT + Apache (V2)
   */

  /* jshint eqnull: true */

  /**
   * Generic animation class with support for dropped frames both optional easing and duration.
   *
   * Optional duration is useful when the lifetime is defined by another condition than time
   * e.g. speed of an animating object, etc.
   *
   * Dropped frame logic allows to keep using the same updater logic independent from the actual
   * rendering. This eases a lot of cases where it might be pretty complex to break down a state
   * based on the pure time difference.
   */
  var zyngaCore = { effect: {} };
  (function(global) {
    var time = Date.now || function() {
      return +new Date();
    };
    var desiredFrames = 60;
    var millisecondsPerSecond = 1000;
    var running = {};
    var counter = 1;

    zyngaCore.effect.Animate = {

      /**
       * A requestAnimationFrame wrapper / polyfill.
       *
       * @param callback {Function} The callback to be invoked before the next repaint.
       * @param root {HTMLElement} The root element for the repaint
       */
      requestAnimationFrame: (function() {

        // Check for request animation Frame support
        var requestFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame;
        var isNative = !!requestFrame;

        if (requestFrame && !/requestAnimationFrame\(\)\s*\{\s*\[native code\]\s*\}/i.test(requestFrame.toString())) {
          isNative = false;
        }

        if (isNative) {
          return function(callback, root) {
            requestFrame(callback, root);
          };
        }

        var TARGET_FPS = 60;
        var requests = {};
        var requestCount = 0;
        var rafHandle = 1;
        var intervalHandle = null;
        var lastActive = +new Date();

        return function(callback, root) {
          var callbackHandle = rafHandle++;

          // Store callback
          requests[callbackHandle] = callback;
          requestCount++;

          // Create timeout at first request
          if (intervalHandle === null) {

            intervalHandle = setInterval(function() {

              var time = +new Date();
              var currentRequests = requests;

              // Reset data structure before executing callbacks
              requests = {};
              requestCount = 0;

              for(var key in currentRequests) {
                if (currentRequests.hasOwnProperty(key)) {
                  currentRequests[key](time);
                  lastActive = time;
                }
              }

              // Disable the timeout when nothing happens for a certain
              // period of time
              if (time - lastActive > 2500) {
                clearInterval(intervalHandle);
                intervalHandle = null;
              }

            }, 1000 / TARGET_FPS);
          }

          return callbackHandle;
        };

      })(),


      /**
       * Stops the given animation.
       *
       * @param id {Integer} Unique animation ID
       * @return {Boolean} Whether the animation was stopped (aka, was running before)
       */
      stop: function(id) {
        var cleared = running[id] != null;
        if (cleared) {
          running[id] = null;
        }

        return cleared;
      },


      /**
       * Whether the given animation is still running.
       *
       * @param id {Integer} Unique animation ID
       * @return {Boolean} Whether the animation is still running
       */
      isRunning: function(id) {
        return running[id] != null;
      },


      /**
       * Start the animation.
       *
       * @param stepCallback {Function} Pointer to function which is executed on every step.
       *   Signature of the method should be `function(percent, now, virtual) { return continueWithAnimation; }`
       * @param verifyCallback {Function} Executed before every animation step.
       *   Signature of the method should be `function() { return continueWithAnimation; }`
       * @param completedCallback {Function}
       *   Signature of the method should be `function(droppedFrames, finishedAnimation) {}`
       * @param duration {Integer} Milliseconds to run the animation
       * @param easingMethod {Function} Pointer to easing function
       *   Signature of the method should be `function(percent) { return modifiedValue; }`
       * @param root {Element} Render root, when available. Used for internal
       *   usage of requestAnimationFrame.
       * @return {Integer} Identifier of animation. Can be used to stop it any time.
       */
      start: function(stepCallback, verifyCallback, completedCallback, duration, easingMethod, root) {

        var start = time();
        var lastFrame = start;
        var percent = 0;
        var dropCounter = 0;
        var id = counter++;

        if (!root) {
          root = document.body;
        }

        // Compacting running db automatically every few new animations
        if (id % 20 === 0) {
          var newRunning = {};
          for (var usedId in running) {
            newRunning[usedId] = true;
          }
          running = newRunning;
        }

        // This is the internal step method which is called every few milliseconds
        var step = function(virtual) {

          // Normalize virtual value
          var render = virtual !== true;

          // Get current time
          var now = time();

          // Verification is executed before next animation step
          if (!running[id] || (verifyCallback && !verifyCallback(id))) {

            running[id] = null;
            completedCallback && completedCallback(desiredFrames - (dropCounter / ((now - start) / millisecondsPerSecond)), id, false);
            return;

          }

          // For the current rendering to apply let's update omitted steps in memory.
          // This is important to bring internal state variables up-to-date with progress in time.
          if (render) {

            var droppedFrames = Math.round((now - lastFrame) / (millisecondsPerSecond / desiredFrames)) - 1;
            for (var j = 0; j < Math.min(droppedFrames, 4); j++) {
              step(true);
              dropCounter++;
            }

          }

          // Compute percent value
          if (duration) {
            percent = (now - start) / duration;
            if (percent > 1) {
              percent = 1;
            }
          }

          // Execute step callback, then...
          var value = easingMethod ? easingMethod(percent) : percent;
          if ((stepCallback(value, now, render) === false || percent === 1) && render) {
            running[id] = null;
            completedCallback && completedCallback(desiredFrames - (dropCounter / ((now - start) / millisecondsPerSecond)), id, percent === 1 || duration == null);
          } else if (render) {
            lastFrame = now;
            zyngaCore.effect.Animate.requestAnimationFrame(step, root);
          }
        };

        // Mark as running
        running[id] = true;

        // Init first step
        zyngaCore.effect.Animate.requestAnimationFrame(step, root);

        // Return unique animation ID
        return id;
      }
    };
  })(this);

  /*
   * Scroller
   * http://github.com/zynga/scroller
   *
   * Copyright 2011, Zynga Inc.
   * Licensed under the MIT License.
   * https://raw.github.com/zynga/scroller/master/MIT-LICENSE.txt
   *
   * Based on the work of: Unify Project (unify-project.org)
   * http://unify-project.org
   * Copyright 2011, Deutsche Telekom AG
   * License: MIT + Apache (V2)
   */

  var Scroller;

  (function(ionic) {
    var NOOP = function(){};

    // Easing Equations (c) 2003 Robert Penner, all rights reserved.
    // Open source under the BSD License.

    /**
     * @param pos {Number} position between 0 (start of effect) and 1 (end of effect)
     **/
    var easeOutCubic = function(pos) {
      return (Math.pow((pos - 1), 3) + 1);
    };

    /**
     * @param pos {Number} position between 0 (start of effect) and 1 (end of effect)
     **/
    var easeInOutCubic = function(pos) {
      if ((pos /= 0.5) < 1) {
        return 0.5 * Math.pow(pos, 3);
      }

      return 0.5 * (Math.pow((pos - 2), 3) + 2);
    };


    /**
     * ionic.views.Scroll
     * A powerful scroll view with support for bouncing, pull to refresh, and paging.
     * @param   {Object}        options options for the scroll view
     * @class A scroll view system
     * @memberof ionic.views
     */
    ionic.views.Scroll = ionic.views.View.inherit({
      initialize: function(options) {
        var self = this;

        this.__container = options.el;
        this.__content = options.el.firstElementChild;

        //Remove any scrollTop attached to these elements; they are virtual scroll now
        //This also stops on-load-scroll-to-window.location.hash that the browser does
        setTimeout(function() {
          if (self.__container && self.__content) {
            self.__container.scrollTop = 0;
            self.__content.scrollTop = 0;
          }
        });

        this.options = {

          /** Disable scrolling on x-axis by default */
          scrollingX: false,
          scrollbarX: true,

          /** Enable scrolling on y-axis */
          scrollingY: true,
          scrollbarY: true,

          startX: 0,
          startY: 0,

          /** The amount to dampen mousewheel events */
          wheelDampen: 6,

          /** The minimum size the scrollbars scale to while scrolling */
          minScrollbarSizeX: 5,
          minScrollbarSizeY: 5,

          /** Scrollbar fading after scrolling */
          scrollbarsFade: true,
          scrollbarFadeDelay: 300,
          /** The initial fade delay when the pane is resized or initialized */
          scrollbarResizeFadeDelay: 1000,

          /** Enable animations for deceleration, snap back, zooming and scrolling */
          animating: true,

          /** duration for animations triggered by scrollTo/zoomTo */
          animationDuration: 250,

          /** Enable bouncing (content can be slowly moved outside and jumps back after releasing) */
          bouncing: true,

          /** Enable locking to the main axis if user moves only slightly on one of them at start */
          locking: true,

          /** Enable pagination mode (switching between full page content panes) */
          paging: false,

          /** Enable snapping of content to a configured pixel grid */
          snapping: false,

          /** Enable zooming of content via API, fingers and mouse wheel */
          zooming: false,

          /** Minimum zoom level */
          minZoom: 0.5,

          /** Maximum zoom level */
          maxZoom: 3,

          /** Multiply or decrease scrolling speed **/
          speedMultiplier: 1,

          deceleration: 0.97,

          /** Callback that is fired on the later of touch end or deceleration end,
           provided that another scrolling action has not begun. Used to know
           when to fade out a scrollbar. */
          scrollingComplete: NOOP,

          /** This configures the amount of change applied to deceleration when reaching boundaries  **/
          penetrationDeceleration : 0.03,

          /** This configures the amount of change applied to acceleration when reaching boundaries  **/
          penetrationAcceleration : 0.08,

          // The ms interval for triggering scroll events
          scrollEventInterval: 10,

          getContentWidth: function() {
            return Math.max(self.__content.scrollWidth, self.__content.offsetWidth);
          },
          getContentHeight: function() {
            return Math.max(self.__content.scrollHeight, self.__content.offsetHeight + self.__content.offsetTop);
          }
        };

        for (var key in options) {
          this.options[key] = options[key];
        }

        this.hintResize = ionic.debounce(function() {
          self.resize();
        }, 1000, true);

        this.onScroll = function() {

          if(!ionic.scroll.isScrolling) {
            setTimeout(self.setScrollStart, 50);
          } else {
            clearTimeout(self.scrollTimer);
            self.scrollTimer = setTimeout(self.setScrollStop, 80);
          }

        };

        this.setScrollStart = function() {
          ionic.scroll.isScrolling = Math.abs(ionic.scroll.lastTop - self.__scrollTop) > 1;
          clearTimeout(self.scrollTimer);
          self.scrollTimer = setTimeout(self.setScrollStop, 80);
        };

        this.setScrollStop = function() {
          ionic.scroll.isScrolling = false;
          ionic.scroll.lastTop = self.__scrollTop;
        };

        this.triggerScrollEvent = ionic.throttle(function() {
          self.onScroll();
          ionic.trigger('scroll', {
            scrollTop: self.__scrollTop,
            scrollLeft: self.__scrollLeft,
            target: self.__container
          });
        }, this.options.scrollEventInterval);

        this.triggerScrollEndEvent = function() {
          ionic.trigger('scrollend', {
            scrollTop: self.__scrollTop,
            scrollLeft: self.__scrollLeft,
            target: self.__container
          });
        };

        this.__scrollLeft = this.options.startX;
        this.__scrollTop = this.options.startY;

        // Get the render update function, initialize event handlers,
        // and calculate the size of the scroll container
        this.__callback = this.getRenderFn();
        this.__initEventHandlers();
        this.__createScrollbars();

      },

      run: function() {
        this.resize();

        // Fade them out
        this.__fadeScrollbars('out', this.options.scrollbarResizeFadeDelay);
      },



      /*
       ---------------------------------------------------------------------------
       INTERNAL FIELDS :: STATUS
       ---------------------------------------------------------------------------
       */

      /** Whether only a single finger is used in touch handling */
      __isSingleTouch: false,

      /** Whether a touch event sequence is in progress */
      __isTracking: false,

      /** Whether a deceleration animation went to completion. */
      __didDecelerationComplete: false,

      /**
       * Whether a gesture zoom/rotate event is in progress. Activates when
       * a gesturestart event happens. This has higher priority than dragging.
       */
      __isGesturing: false,

      /**
       * Whether the user has moved by such a distance that we have enabled
       * dragging mode. Hint: It's only enabled after some pixels of movement to
       * not interrupt with clicks etc.
       */
      __isDragging: false,

      /**
       * Not touching and dragging anymore, and smoothly animating the
       * touch sequence using deceleration.
       */
      __isDecelerating: false,

      /**
       * Smoothly animating the currently configured change
       */
      __isAnimating: false,



      /*
       ---------------------------------------------------------------------------
       INTERNAL FIELDS :: DIMENSIONS
       ---------------------------------------------------------------------------
       */

      /** Available outer left position (from document perspective) */
      __clientLeft: 0,

      /** Available outer top position (from document perspective) */
      __clientTop: 0,

      /** Available outer width */
      __clientWidth: 0,

      /** Available outer height */
      __clientHeight: 0,

      /** Outer width of content */
      __contentWidth: 0,

      /** Outer height of content */
      __contentHeight: 0,

      /** Snapping width for content */
      __snapWidth: 100,

      /** Snapping height for content */
      __snapHeight: 100,

      /** Height to assign to refresh area */
      __refreshHeight: null,

      /** Whether the refresh process is enabled when the event is released now */
      __refreshActive: false,

      /** Callback to execute on activation. This is for signalling the user about a refresh is about to happen when he release */
      __refreshActivate: null,

      /** Callback to execute on deactivation. This is for signalling the user about the refresh being cancelled */
      __refreshDeactivate: null,

      /** Callback to execute to start the actual refresh. Call {@link #refreshFinish} when done */
      __refreshStart: null,

      /** Zoom level */
      __zoomLevel: 1,

      /** Scroll position on x-axis */
      __scrollLeft: 0,

      /** Scroll position on y-axis */
      __scrollTop: 0,

      /** Maximum allowed scroll position on x-axis */
      __maxScrollLeft: 0,

      /** Maximum allowed scroll position on y-axis */
      __maxScrollTop: 0,

      /* Scheduled left position (final position when animating) */
      __scheduledLeft: 0,

      /* Scheduled top position (final position when animating) */
      __scheduledTop: 0,

      /* Scheduled zoom level (final scale when animating) */
      __scheduledZoom: 0,



      /*
       ---------------------------------------------------------------------------
       INTERNAL FIELDS :: LAST POSITIONS
       ---------------------------------------------------------------------------
       */

      /** Left position of finger at start */
      __lastTouchLeft: null,

      /** Top position of finger at start */
      __lastTouchTop: null,

      /** Timestamp of last move of finger. Used to limit tracking range for deceleration speed. */
      __lastTouchMove: null,

      /** List of positions, uses three indexes for each state: left, top, timestamp */
      __positions: null,



      /*
       ---------------------------------------------------------------------------
       INTERNAL FIELDS :: DECELERATION SUPPORT
       ---------------------------------------------------------------------------
       */

      /** Minimum left scroll position during deceleration */
      __minDecelerationScrollLeft: null,

      /** Minimum top scroll position during deceleration */
      __minDecelerationScrollTop: null,

      /** Maximum left scroll position during deceleration */
      __maxDecelerationScrollLeft: null,

      /** Maximum top scroll position during deceleration */
      __maxDecelerationScrollTop: null,

      /** Current factor to modify horizontal scroll position with on every step */
      __decelerationVelocityX: null,

      /** Current factor to modify vertical scroll position with on every step */
      __decelerationVelocityY: null,


      /** the browser-specific property to use for transforms */
      __transformProperty: null,
      __perspectiveProperty: null,

      /** scrollbar indicators */
      __indicatorX: null,
      __indicatorY: null,

      /** Timeout for scrollbar fading */
      __scrollbarFadeTimeout: null,

      /** whether we've tried to wait for size already */
      __didWaitForSize: null,
      __sizerTimeout: null,

      __initEventHandlers: function() {
        var self = this;

        // Event Handler
        var container = this.__container;

        //Broadcasted when keyboard is shown on some platforms.
        //See js/utils/keyboard.js
        container.addEventListener('scrollChildIntoView', function(e) {

          //distance from bottom of scrollview to top of viewport
          var scrollBottomOffsetToTop;

          if( !self.isScrolledIntoView ) {
            // shrink scrollview so we can actually scroll if the input is hidden
            // if it isn't shrink so we can scroll to inputs under the keyboard
            if (ionic.Platform.isIOS() || ionic.Platform.isFullScreen){
              // if there are things below the scroll view account for them and
              // subtract them from the keyboard height when resizing
              scrollBottomOffsetToTop = container.getBoundingClientRect().bottom;
              var scrollBottomOffsetToBottom = e.detail.viewportHeight - scrollBottomOffsetToTop;
              var keyboardOffset = Math.max(0, e.detail.keyboardHeight - scrollBottomOffsetToBottom);
              container.style.height = (container.clientHeight - keyboardOffset) + "px";
              container.style.overflow = "visible";
              //update scroll view
              self.resize();
            }
            self.isScrolledIntoView = true;
          }

          //If the element is positioned under the keyboard...
          if( e.detail.isElementUnderKeyboard ) {
            var delay;
            // Wait on android for web view to resize
            if ( ionic.Platform.isAndroid() && !ionic.Platform.isFullScreen ) {
              // android y u resize so slow
              if ( ionic.Platform.version() < 4.4) {
                delay = 500;
              } else {
                // probably overkill for chrome
                delay = 350;
              }
            } else {
              delay = 80;
            }

            //Put element in middle of visible screen
            //Wait for android to update view height and resize() to reset scroll position
            ionic.scroll.isScrolling = true;
            setTimeout(function(){
              //middle of the scrollview, where we want to scroll to
              var scrollMidpointOffset = container.clientHeight * 0.5;

              scrollBottomOffsetToTop = container.getBoundingClientRect().bottom;
              //distance from top of focused element to the bottom of the scroll view
              var elementTopOffsetToScrollBottom = e.detail.elementTop - scrollBottomOffsetToTop;

              var scrollTop = elementTopOffsetToScrollBottom  + scrollMidpointOffset;

              if (scrollTop > 0){
                ionic.tap.cloneFocusedInput(container, self);
                self.scrollBy(0, scrollTop, true);
                self.onScroll();
              }
            }, delay);
          }

          //Only the first scrollView parent of the element that broadcasted this event
          //(the active element that needs to be shown) should receive this event
          e.stopPropagation();
        });

        container.addEventListener('resetScrollView', function(e) {
          //return scrollview to original height once keyboard has hidden
          self.isScrolledIntoView = false;
          container.style.height = "";
          container.style.overflow = "";
          self.resize();
          ionic.scroll.isScrolling = false;
        });

        function getEventTouches(e) {
          return e.touches && e.touches.length ? e.touches : [{
            pageX: e.pageX,
            pageY: e.pageY
          }];
        }

        self.touchStart = function(e) {
          self.startCoordinates = getPointerCoordinates(e);

          if ( ionic.tap.ignoreScrollStart(e) ) {
            return;
          }

          self.__isDown = true;

          if( ionic.tap.containsOrIsTextInput(e.target) || e.target.tagName === 'SELECT' ) {
            // do not start if the target is a text input
            // if there is a touchmove on this input, then we can start the scroll
            self.__hasStarted = false;
            return;
          }

          self.__isSelectable = true;
          self.__enableScrollY = true;
          self.__hasStarted = true;
          self.doTouchStart(getEventTouches(e), e.timeStamp);
          e.preventDefault();
        };

        self.touchMove = function(e) {
          if(!self.__isDown ||
            e.defaultPrevented ||
            (e.target.tagName === 'TEXTAREA' && e.target.parentElement.querySelector(':focus')) ) {
            return;
          }

          if( !self.__hasStarted && ( ionic.tap.containsOrIsTextInput(e.target) || e.target.tagName === 'SELECT' ) ) {
            // the target is a text input and scroll has started
            // since the text input doesn't start on touchStart, do it here
            self.__hasStarted = true;
            self.doTouchStart(getEventTouches(e), e.timeStamp);
            e.preventDefault();
            return;
          }

          if(self.startCoordinates) {
            // we have start coordinates, so get this touch move's current coordinates
            var currentCoordinates = getPointerCoordinates(e);

            if( self.__isSelectable &&
              ionic.tap.isTextInput(e.target) &&
              Math.abs(self.startCoordinates.x - currentCoordinates.x) > 20 ) {
              // user slid the text input's caret on its x axis, disable any future y scrolling
              self.__enableScrollY = false;
              self.__isSelectable = true;
            }

            if( self.__enableScrollY && Math.abs(self.startCoordinates.y - currentCoordinates.y) > 10 ) {
              // user scrolled the entire view on the y axis
              // disabled being able to select text on an input
              // hide the input which has focus, and show a cloned one that doesn't have focus
              self.__isSelectable = false;
              ionic.tap.cloneFocusedInput(container, self);
            }
          }

          self.doTouchMove(getEventTouches(e), e.timeStamp, e.scale);
          self.__isDown = true;
        };

        self.touchEnd = function(e) {
          if(!self.__isDown) return;

          self.doTouchEnd(e.timeStamp);
          self.__isDown = false;
          self.__hasStarted = false;
          self.__isSelectable = true;
          self.__enableScrollY = true;

          if( !self.__isDragging && !self.__isDecelerating && !self.__isAnimating ) {
            ionic.tap.removeClonedInputs(container, self);
          }
        };

        self.options.orgScrollingComplete = self.options.scrollingComplete;
        self.options.scrollingComplete = function() {
          ionic.tap.removeClonedInputs(container, self);
          self.options.orgScrollingComplete();
        };

        if ('ontouchstart' in window) {
          // Touch Events
          container.addEventListener("touchstart", self.touchStart, false);
          document.addEventListener("touchmove", self.touchMove, false);
          document.addEventListener("touchend", self.touchEnd, false);
          document.addEventListener("touchcancel", self.touchEnd, false);

        } else if (window.navigator.pointerEnabled) {
          // Pointer Events
          container.addEventListener("pointerdown", self.touchStart, false);
          document.addEventListener("pointermove", self.touchMove, false);
          document.addEventListener("pointerup", self.touchEnd, false);
          document.addEventListener("pointercancel", self.touchEnd, false);

        } else if (window.navigator.msPointerEnabled) {
          // IE10, WP8 (Pointer Events)
          container.addEventListener("MSPointerDown", self.touchStart, false);
          document.addEventListener("MSPointerMove", self.touchMove, false);
          document.addEventListener("MSPointerUp", self.touchEnd, false);
          document.addEventListener("MSPointerCancel", self.touchEnd, false);

        } else {
          // Mouse Events
          var mousedown = false;

          self.mouseDown = function(e) {
            if ( ionic.tap.ignoreScrollStart(e) || e.target.tagName === 'SELECT' ) {
              return;
            }
            self.doTouchStart(getEventTouches(e), e.timeStamp);

            if( !ionic.tap.isTextInput(e.target) ) {
              e.preventDefault();
            }
            mousedown = true;
          };

          self.mouseMove = function(e) {
            if (!mousedown || e.defaultPrevented) {
              return;
            }

            self.doTouchMove(getEventTouches(e), e.timeStamp);

            mousedown = true;
          };

          self.mouseUp = function(e) {
            if (!mousedown) {
              return;
            }

            self.doTouchEnd(e.timeStamp);

            mousedown = false;
          };

          self.mouseWheel = ionic.animationFrameThrottle(function(e) {
            var scrollParent = ionic.DomUtil.getParentOrSelfWithClass(e.target, 'ionic-scroll');
            if (scrollParent === self.__container) {

              self.hintResize();
              self.scrollBy(
                  e.wheelDeltaX/self.options.wheelDampen,
                  -e.wheelDeltaY/self.options.wheelDampen
              );

              self.__fadeScrollbars('in');
              clearTimeout(self.__wheelHideBarTimeout);
              self.__wheelHideBarTimeout = setTimeout(function() {
                self.__fadeScrollbars('out');
              }, 100);
            }
          });

          container.addEventListener("mousedown", self.mouseDown, false);
          document.addEventListener("mousemove", self.mouseMove, false);
          document.addEventListener("mouseup", self.mouseUp, false);
          document.addEventListener('mousewheel', self.mouseWheel, false);
        }
      },

      __removeEventHandlers: function() {
        var container = this.__container;

        container.removeEventListener('touchstart', self.touchStart);
        document.removeEventListener('touchmove', self.touchMove);
        document.removeEventListener('touchend', self.touchEnd);
        document.removeEventListener('touchcancel', self.touchCancel);

        container.removeEventListener("pointerdown", self.touchStart);
        document.removeEventListener("pointermove", self.touchMove);
        document.removeEventListener("pointerup", self.touchEnd);
        document.removeEventListener("pointercancel", self.touchEnd);

        container.removeEventListener("MSPointerDown", self.touchStart);
        document.removeEventListener("MSPointerMove", self.touchMove);
        document.removeEventListener("MSPointerUp", self.touchEnd);
        document.removeEventListener("MSPointerCancel", self.touchEnd);

        container.removeEventListener("mousedown", self.mouseDown);
        document.removeEventListener("mousemove", self.mouseMove);
        document.removeEventListener("mouseup", self.mouseUp);
        document.removeEventListener('mousewheel', self.mouseWheel);
      },

      /** Create a scroll bar div with the given direction **/
      __createScrollbar: function(direction) {
        var bar = document.createElement('div'),
          indicator = document.createElement('div');

        indicator.className = 'scroll-bar-indicator';

        if(direction == 'h') {
          bar.className = 'scroll-bar scroll-bar-h';
        } else {
          bar.className = 'scroll-bar scroll-bar-v';
        }

        bar.appendChild(indicator);
        return bar;
      },

      __createScrollbars: function() {
        var indicatorX, indicatorY;

        if(this.options.scrollingX) {
          indicatorX = {
            el: this.__createScrollbar('h'),
            sizeRatio: 1
          };
          indicatorX.indicator = indicatorX.el.children[0];

          if(this.options.scrollbarX) {
            this.__container.appendChild(indicatorX.el);
          }
          this.__indicatorX = indicatorX;
        }

        if(this.options.scrollingY) {
          indicatorY = {
            el: this.__createScrollbar('v'),
            sizeRatio: 1
          };
          indicatorY.indicator = indicatorY.el.children[0];

          if(this.options.scrollbarY) {
            this.__container.appendChild(indicatorY.el);
          }
          this.__indicatorY = indicatorY;
        }
      },

      __resizeScrollbars: function() {
        var self = this;

        // Update horiz bar
        if(self.__indicatorX) {
          var width = Math.max(Math.round(self.__clientWidth * self.__clientWidth / (self.__contentWidth)), 20);
          if(width > self.__contentWidth) {
            width = 0;
          }
          self.__indicatorX.size = width;
          self.__indicatorX.minScale = this.options.minScrollbarSizeX / width;
          self.__indicatorX.indicator.style.width = width + 'px';
          self.__indicatorX.maxPos = self.__clientWidth - width;
          self.__indicatorX.sizeRatio = self.__maxScrollLeft ? self.__indicatorX.maxPos / self.__maxScrollLeft : 1;
        }

        // Update vert bar
        if(self.__indicatorY) {
          var height = Math.max(Math.round(self.__clientHeight * self.__clientHeight / (self.__contentHeight)), 20);
          if(height > self.__contentHeight) {
            height = 0;
          }
          self.__indicatorY.size = height;
          self.__indicatorY.minScale = this.options.minScrollbarSizeY / height;
          self.__indicatorY.maxPos = self.__clientHeight - height;
          self.__indicatorY.indicator.style.height = height + 'px';
          self.__indicatorY.sizeRatio = self.__maxScrollTop ? self.__indicatorY.maxPos / self.__maxScrollTop : 1;
        }
      },

      /**
       * Move and scale the scrollbars as the page scrolls.
       */
      __repositionScrollbars: function() {
        var self = this, width, heightScale,
          widthDiff, heightDiff,
          x, y,
          xstop = 0, ystop = 0;

        if(self.__indicatorX) {
          // Handle the X scrollbar

          // Don't go all the way to the right if we have a vertical scrollbar as well
          if(self.__indicatorY) xstop = 10;

          x = Math.round(self.__indicatorX.sizeRatio * self.__scrollLeft) || 0,

            // The the difference between the last content X position, and our overscrolled one
            widthDiff = self.__scrollLeft - (self.__maxScrollLeft - xstop);

          if(self.__scrollLeft < 0) {

            widthScale = Math.max(self.__indicatorX.minScale,
                (self.__indicatorX.size - Math.abs(self.__scrollLeft)) / self.__indicatorX.size);

            // Stay at left
            x = 0;

            // Make sure scale is transformed from the left/center origin point
            self.__indicatorX.indicator.style[self.__transformOriginProperty] = 'left center';
          } else if(widthDiff > 0) {

            widthScale = Math.max(self.__indicatorX.minScale,
                (self.__indicatorX.size - widthDiff) / self.__indicatorX.size);

            // Stay at the furthest x for the scrollable viewport
            x = self.__indicatorX.maxPos - xstop;

            // Make sure scale is transformed from the right/center origin point
            self.__indicatorX.indicator.style[self.__transformOriginProperty] = 'right center';

          } else {

            // Normal motion
            x = Math.min(self.__maxScrollLeft, Math.max(0, x));
            widthScale = 1;

          }

          self.__indicatorX.indicator.style[self.__transformProperty] = 'translate3d(' + x + 'px, 0, 0) scaleX(' + widthScale + ')';
        }

        if(self.__indicatorY) {

          y = Math.round(self.__indicatorY.sizeRatio * self.__scrollTop) || 0;

          // Don't go all the way to the right if we have a vertical scrollbar as well
          if(self.__indicatorX) ystop = 10;

          heightDiff = self.__scrollTop - (self.__maxScrollTop - ystop);

          if(self.__scrollTop < 0) {

            heightScale = Math.max(self.__indicatorY.minScale, (self.__indicatorY.size - Math.abs(self.__scrollTop)) / self.__indicatorY.size);

            // Stay at top
            y = 0;

            // Make sure scale is transformed from the center/top origin point
            self.__indicatorY.indicator.style[self.__transformOriginProperty] = 'center top';

          } else if(heightDiff > 0) {

            heightScale = Math.max(self.__indicatorY.minScale, (self.__indicatorY.size - heightDiff) / self.__indicatorY.size);

            // Stay at bottom of scrollable viewport
            y = self.__indicatorY.maxPos - ystop;

            // Make sure scale is transformed from the center/bottom origin point
            self.__indicatorY.indicator.style[self.__transformOriginProperty] = 'center bottom';

          } else {

            // Normal motion
            y = Math.min(self.__maxScrollTop, Math.max(0, y));
            heightScale = 1;

          }

          self.__indicatorY.indicator.style[self.__transformProperty] = 'translate3d(0,' + y + 'px, 0) scaleY(' + heightScale + ')';
        }
      },

      __fadeScrollbars: function(direction, delay) {
        var self = this;

        if(!this.options.scrollbarsFade) {
          return;
        }

        var className = 'scroll-bar-fade-out';

        if(self.options.scrollbarsFade === true) {
          clearTimeout(self.__scrollbarFadeTimeout);

          if(direction == 'in') {
            if(self.__indicatorX) { self.__indicatorX.indicator.classList.remove(className); }
            if(self.__indicatorY) { self.__indicatorY.indicator.classList.remove(className); }
          } else {
            self.__scrollbarFadeTimeout = setTimeout(function() {
              if(self.__indicatorX) { self.__indicatorX.indicator.classList.add(className); }
              if(self.__indicatorY) { self.__indicatorY.indicator.classList.add(className); }
            }, delay || self.options.scrollbarFadeDelay);
          }
        }
      },

      __scrollingComplete: function() {
        var self = this;
        self.options.scrollingComplete();

        self.__fadeScrollbars('out');
      },

      resize: function() {
        // Update Scroller dimensions for changed content
        // Add padding to bottom of content
        this.setDimensions(
          this.__container.clientWidth,
          this.__container.clientHeight,
          this.options.getContentWidth(),
          this.options.getContentHeight()
        );
      },
      /*
       ---------------------------------------------------------------------------
       PUBLIC API
       ---------------------------------------------------------------------------
       */

      getRenderFn: function() {
        var self = this;

        var content = this.__content;

        var docStyle = document.documentElement.style;

        var engine;
        if ('MozAppearance' in docStyle) {
          engine = 'gecko';
        } else if ('WebkitAppearance' in docStyle) {
          engine = 'webkit';
        } else if (typeof navigator.cpuClass === 'string') {
          engine = 'trident';
        }

        var vendorPrefix = {
          trident: 'ms',
          gecko: 'Moz',
          webkit: 'Webkit',
          presto: 'O'
        }[engine];

        var helperElem = document.createElement("div");
        var undef;

        var perspectiveProperty = vendorPrefix + "Perspective";
        var transformProperty = vendorPrefix + "Transform";
        var transformOriginProperty = vendorPrefix + 'TransformOrigin';

        self.__perspectiveProperty = transformProperty;
        self.__transformProperty = transformProperty;
        self.__transformOriginProperty = transformOriginProperty;

        if (helperElem.style[perspectiveProperty] !== undef) {

          return function(left, top, zoom, wasResize) {
            content.style[transformProperty] = 'translate3d(' + (-left) + 'px,' + (-top) + 'px,0) scale(' + zoom + ')';
            self.__repositionScrollbars();
            if(!wasResize) {
              self.triggerScrollEvent();
            }
          };

        } else if (helperElem.style[transformProperty] !== undef) {

          return function(left, top, zoom, wasResize) {
            content.style[transformProperty] = 'translate(' + (-left) + 'px,' + (-top) + 'px) scale(' + zoom + ')';
            self.__repositionScrollbars();
            if(!wasResize) {
              self.triggerScrollEvent();
            }
          };

        } else {

          return function(left, top, zoom, wasResize) {
            content.style.marginLeft = left ? (-left/zoom) + 'px' : '';
            content.style.marginTop = top ? (-top/zoom) + 'px' : '';
            content.style.zoom = zoom || '';
            self.__repositionScrollbars();
            if(!wasResize) {
              self.triggerScrollEvent();
            }
          };

        }
      },


      /**
       * Configures the dimensions of the client (outer) and content (inner) elements.
       * Requires the available space for the outer element and the outer size of the inner element.
       * All values which are falsy (null or zero etc.) are ignored and the old value is kept.
       *
       * @param clientWidth {Integer} Inner width of outer element
       * @param clientHeight {Integer} Inner height of outer element
       * @param contentWidth {Integer} Outer width of inner element
       * @param contentHeight {Integer} Outer height of inner element
       */
      setDimensions: function(clientWidth, clientHeight, contentWidth, contentHeight) {
        var self = this;

        // Only update values which are defined
        if (clientWidth === +clientWidth) {
          self.__clientWidth = clientWidth;
        }

        if (clientHeight === +clientHeight) {
          self.__clientHeight = clientHeight;
        }

        if (contentWidth === +contentWidth) {
          self.__contentWidth = contentWidth;
        }

        if (contentHeight === +contentHeight) {
          self.__contentHeight = contentHeight;
        }

        // Refresh maximums
        self.__computeScrollMax();
        self.__resizeScrollbars();

        // Refresh scroll position
        self.scrollTo(self.__scrollLeft, self.__scrollTop, true, null, true);

      },


      /**
       * Sets the client coordinates in relation to the document.
       *
       * @param left {Integer} Left position of outer element
       * @param top {Integer} Top position of outer element
       */
      setPosition: function(left, top) {

        var self = this;

        self.__clientLeft = left || 0;
        self.__clientTop = top || 0;

      },


      /**
       * Configures the snapping (when snapping is active)
       *
       * @param width {Integer} Snapping width
       * @param height {Integer} Snapping height
       */
      setSnapSize: function(width, height) {

        var self = this;

        self.__snapWidth = width;
        self.__snapHeight = height;

      },


      /**
       * Activates pull-to-refresh. A special zone on the top of the list to start a list refresh whenever
       * the user event is released during visibility of this zone. This was introduced by some apps on iOS like
       * the official Twitter client.
       *
       * @param height {Integer} Height of pull-to-refresh zone on top of rendered list
       * @param activateCallback {Function} Callback to execute on activation. This is for signalling the user about a refresh is about to happen when he release.
       * @param deactivateCallback {Function} Callback to execute on deactivation. This is for signalling the user about the refresh being cancelled.
       * @param startCallback {Function} Callback to execute to start the real async refresh action. Call {@link #finishPullToRefresh} after finish of refresh.
       */
      activatePullToRefresh: function(height, activateCallback, deactivateCallback, startCallback) {

        var self = this;

        self.__refreshHeight = height;
        self.__refreshActivate = activateCallback;
        self.__refreshDeactivate = deactivateCallback;
        self.__refreshStart = startCallback;

      },


      /**
       * Starts pull-to-refresh manually.
       */
      triggerPullToRefresh: function() {
        // Use publish instead of scrollTo to allow scrolling to out of boundary position
        // We don't need to normalize scrollLeft, zoomLevel, etc. here because we only y-scrolling when pull-to-refresh is enabled
        this.__publish(this.__scrollLeft, -this.__refreshHeight, this.__zoomLevel, true);

        if (this.__refreshStart) {
          this.__refreshStart();
        }
      },


      /**
       * Signalizes that pull-to-refresh is finished.
       */
      finishPullToRefresh: function() {

        var self = this;

        self.__refreshActive = false;
        if (self.__refreshDeactivate) {
          self.__refreshDeactivate();
        }

        self.scrollTo(self.__scrollLeft, self.__scrollTop, true);

      },


      /**
       * Returns the scroll position and zooming values
       *
       * @return {Map} `left` and `top` scroll position and `zoom` level
       */
      getValues: function() {

        var self = this;

        return {
          left: self.__scrollLeft,
          top: self.__scrollTop,
          zoom: self.__zoomLevel
        };

      },


      /**
       * Returns the maximum scroll values
       *
       * @return {Map} `left` and `top` maximum scroll values
       */
      getScrollMax: function() {

        var self = this;

        return {
          left: self.__maxScrollLeft,
          top: self.__maxScrollTop
        };

      },


      /**
       * Zooms to the given level. Supports optional animation. Zooms
       * the center when no coordinates are given.
       *
       * @param level {Number} Level to zoom to
       * @param animate {Boolean} Whether to use animation
       * @param originLeft {Number} Zoom in at given left coordinate
       * @param originTop {Number} Zoom in at given top coordinate
       */
      zoomTo: function(level, animate, originLeft, originTop) {

        var self = this;

        if (!self.options.zooming) {
          throw new Error("Zooming is not enabled!");
        }

        // Stop deceleration
        if (self.__isDecelerating) {
          zyngaCore.effect.Animate.stop(self.__isDecelerating);
          self.__isDecelerating = false;
        }

        var oldLevel = self.__zoomLevel;

        // Normalize input origin to center of viewport if not defined
        if (originLeft == null) {
          originLeft = self.__clientWidth / 2;
        }

        if (originTop == null) {
          originTop = self.__clientHeight / 2;
        }

        // Limit level according to configuration
        level = Math.max(Math.min(level, self.options.maxZoom), self.options.minZoom);

        // Recompute maximum values while temporary tweaking maximum scroll ranges
        self.__computeScrollMax(level);

        // Recompute left and top coordinates based on new zoom level
        var left = ((originLeft + self.__scrollLeft) * level / oldLevel) - originLeft;
        var top = ((originTop + self.__scrollTop) * level / oldLevel) - originTop;

        // Limit x-axis
        if (left > self.__maxScrollLeft) {
          left = self.__maxScrollLeft;
        } else if (left < 0) {
          left = 0;
        }

        // Limit y-axis
        if (top > self.__maxScrollTop) {
          top = self.__maxScrollTop;
        } else if (top < 0) {
          top = 0;
        }

        // Push values out
        self.__publish(left, top, level, animate);

      },


      /**
       * Zooms the content by the given factor.
       *
       * @param factor {Number} Zoom by given factor
       * @param animate {Boolean} Whether to use animation
       * @param originLeft {Number} Zoom in at given left coordinate
       * @param originTop {Number} Zoom in at given top coordinate
       */
      zoomBy: function(factor, animate, originLeft, originTop) {

        var self = this;

        self.zoomTo(self.__zoomLevel * factor, animate, originLeft, originTop);

      },


      /**
       * Scrolls to the given position. Respect limitations and snapping automatically.
       *
       * @param left {Number} Horizontal scroll position, keeps current if value is <code>null</code>
       * @param top {Number} Vertical scroll position, keeps current if value is <code>null</code>
       * @param animate {Boolean} Whether the scrolling should happen using an animation
       * @param zoom {Number} Zoom level to go to
       */
      scrollTo: function(left, top, animate, zoom, wasResize) {
        var self = this;

        // Stop deceleration
        if (self.__isDecelerating) {
          zyngaCore.effect.Animate.stop(self.__isDecelerating);
          self.__isDecelerating = false;
        }

        // Correct coordinates based on new zoom level
        if (zoom != null && zoom !== self.__zoomLevel) {

          if (!self.options.zooming) {
            throw new Error("Zooming is not enabled!");
          }

          left *= zoom;
          top *= zoom;

          // Recompute maximum values while temporary tweaking maximum scroll ranges
          self.__computeScrollMax(zoom);

        } else {

          // Keep zoom when not defined
          zoom = self.__zoomLevel;

        }

        if (!self.options.scrollingX) {

          left = self.__scrollLeft;

        } else {

          if (self.options.paging) {
            left = Math.round(left / self.__clientWidth) * self.__clientWidth;
          } else if (self.options.snapping) {
            left = Math.round(left / self.__snapWidth) * self.__snapWidth;
          }

        }

        if (!self.options.scrollingY) {

          top = self.__scrollTop;

        } else {

          if (self.options.paging) {
            top = Math.round(top / self.__clientHeight) * self.__clientHeight;
          } else if (self.options.snapping) {
            top = Math.round(top / self.__snapHeight) * self.__snapHeight;
          }

        }

        // Limit for allowed ranges
        left = Math.max(Math.min(self.__maxScrollLeft, left), 0);
        top = Math.max(Math.min(self.__maxScrollTop, top), 0);

        // Don't animate when no change detected, still call publish to make sure
        // that rendered position is really in-sync with internal data
        if (left === self.__scrollLeft && top === self.__scrollTop) {
          animate = false;
        }

        // Publish new values
        self.__publish(left, top, zoom, animate, wasResize);

      },


      /**
       * Scroll by the given offset
       *
       * @param left {Number} Scroll x-axis by given offset
       * @param top {Number} Scroll y-axis by given offset
       * @param animate {Boolean} Whether to animate the given change
       */
      scrollBy: function(left, top, animate) {

        var self = this;

        var startLeft = self.__isAnimating ? self.__scheduledLeft : self.__scrollLeft;
        var startTop = self.__isAnimating ? self.__scheduledTop : self.__scrollTop;

        self.scrollTo(startLeft + (left || 0), startTop + (top || 0), animate);

      },



      /*
       ---------------------------------------------------------------------------
       EVENT CALLBACKS
       ---------------------------------------------------------------------------
       */

      /**
       * Mouse wheel handler for zooming support
       */
      doMouseZoom: function(wheelDelta, timeStamp, pageX, pageY) {

        var self = this;
        var change = wheelDelta > 0 ? 0.97 : 1.03;

        return self.zoomTo(self.__zoomLevel * change, false, pageX - self.__clientLeft, pageY - self.__clientTop);

      },

      /**
       * Touch start handler for scrolling support
       */
      doTouchStart: function(touches, timeStamp) {
        this.hintResize();

        if (timeStamp instanceof Date) {
          timeStamp = timeStamp.valueOf();
        }
        if (typeof timeStamp !== "number") {
          timeStamp = Date.now();
        }

        var self = this;

        // Reset interruptedAnimation flag
        self.__interruptedAnimation = true;

        // Stop deceleration
        if (self.__isDecelerating) {
          zyngaCore.effect.Animate.stop(self.__isDecelerating);
          self.__isDecelerating = false;
          self.__interruptedAnimation = true;
        }

        // Stop animation
        if (self.__isAnimating) {
          zyngaCore.effect.Animate.stop(self.__isAnimating);
          self.__isAnimating = false;
          self.__interruptedAnimation = true;
        }

        // Use center point when dealing with two fingers
        var currentTouchLeft, currentTouchTop;
        var isSingleTouch = touches.length === 1;
        if (isSingleTouch) {
          currentTouchLeft = touches[0].pageX;
          currentTouchTop = touches[0].pageY;
        } else {
          currentTouchLeft = Math.abs(touches[0].pageX + touches[1].pageX) / 2;
          currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
        }

        // Store initial positions
        self.__initialTouchLeft = currentTouchLeft;
        self.__initialTouchTop = currentTouchTop;

        // Store initial touchList for scale calculation
        self.__initialTouches = touches;

        // Store current zoom level
        self.__zoomLevelStart = self.__zoomLevel;

        // Store initial touch positions
        self.__lastTouchLeft = currentTouchLeft;
        self.__lastTouchTop = currentTouchTop;

        // Store initial move time stamp
        self.__lastTouchMove = timeStamp;

        // Reset initial scale
        self.__lastScale = 1;

        // Reset locking flags
        self.__enableScrollX = !isSingleTouch && self.options.scrollingX;
        self.__enableScrollY = !isSingleTouch && self.options.scrollingY;

        // Reset tracking flag
        self.__isTracking = true;

        // Reset deceleration complete flag
        self.__didDecelerationComplete = false;

        // Dragging starts directly with two fingers, otherwise lazy with an offset
        self.__isDragging = !isSingleTouch;

        // Some features are disabled in multi touch scenarios
        self.__isSingleTouch = isSingleTouch;

        // Clearing data structure
        self.__positions = [];

      },


      /**
       * Touch move handler for scrolling support
       */
      doTouchMove: function(touches, timeStamp, scale) {
        if (timeStamp instanceof Date) {
          timeStamp = timeStamp.valueOf();
        }
        if (typeof timeStamp !== "number") {
          timeStamp = Date.now();
        }

        var self = this;

        // Ignore event when tracking is not enabled (event might be outside of element)
        if (!self.__isTracking) {
          return;
        }

        var currentTouchLeft, currentTouchTop;

        // Compute move based around of center of fingers
        if (touches.length === 2) {
          currentTouchLeft = Math.abs(touches[0].pageX + touches[1].pageX) / 2;
          currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;

          // Calculate scale when not present and only when touches are used
          if (!scale && self.options.zooming) {
            scale = self.__getScale(self.__initialTouches, touches);
          }
        } else {
          currentTouchLeft = touches[0].pageX;
          currentTouchTop = touches[0].pageY;
        }

        var positions = self.__positions;

        // Are we already is dragging mode?
        if (self.__isDragging) {

          // Compute move distance
          var moveX = currentTouchLeft - self.__lastTouchLeft;
          var moveY = currentTouchTop - self.__lastTouchTop;

          // Read previous scroll position and zooming
          var scrollLeft = self.__scrollLeft;
          var scrollTop = self.__scrollTop;
          var level = self.__zoomLevel;

          // Work with scaling
          if (scale != null && self.options.zooming) {

            var oldLevel = level;

            // Recompute level based on previous scale and new scale
            level = level / self.__lastScale * scale;

            // Limit level according to configuration
            level = Math.max(Math.min(level, self.options.maxZoom), self.options.minZoom);

            // Only do further compution when change happened
            if (oldLevel !== level) {

              // Compute relative event position to container
              var currentTouchLeftRel = currentTouchLeft - self.__clientLeft;
              var currentTouchTopRel = currentTouchTop - self.__clientTop;

              // Recompute left and top coordinates based on new zoom level
              scrollLeft = ((currentTouchLeftRel + scrollLeft) * level / oldLevel) - currentTouchLeftRel;
              scrollTop = ((currentTouchTopRel + scrollTop) * level / oldLevel) - currentTouchTopRel;

              // Recompute max scroll values
              self.__computeScrollMax(level);

            }
          }

          if (self.__enableScrollX) {

            scrollLeft -= moveX * this.options.speedMultiplier;
            var maxScrollLeft = self.__maxScrollLeft;

            if (scrollLeft > maxScrollLeft || scrollLeft < 0) {

              // Slow down on the edges
              if (self.options.bouncing) {

                scrollLeft += (moveX / 2  * this.options.speedMultiplier);

              } else if (scrollLeft > maxScrollLeft) {

                scrollLeft = maxScrollLeft;

              } else {

                scrollLeft = 0;

              }
            }
          }

          // Compute new vertical scroll position
          if (self.__enableScrollY) {

            scrollTop -= moveY * this.options.speedMultiplier;
            var maxScrollTop = self.__maxScrollTop;

            if (scrollTop > maxScrollTop || scrollTop < 0) {

              // Slow down on the edges
              if (self.options.bouncing || (self.__refreshHeight && scrollTop < 0)) {

                scrollTop += (moveY / 2 * this.options.speedMultiplier);

                // Support pull-to-refresh (only when only y is scrollable)
                if (!self.__enableScrollX && self.__refreshHeight != null) {

                  if (!self.__refreshActive && scrollTop <= -self.__refreshHeight) {

                    self.__refreshActive = true;
                    if (self.__refreshActivate) {
                      self.__refreshActivate();
                    }

                  } else if (self.__refreshActive && scrollTop > -self.__refreshHeight) {

                    self.__refreshActive = false;
                    if (self.__refreshDeactivate) {
                      self.__refreshDeactivate();
                    }

                  }
                }

              } else if (scrollTop > maxScrollTop) {

                scrollTop = maxScrollTop;

              } else {

                scrollTop = 0;

              }
            }
          }

          // Keep list from growing infinitely (holding min 10, max 20 measure points)
          if (positions.length > 60) {
            positions.splice(0, 30);
          }

          // Track scroll movement for decleration
          positions.push(scrollLeft, scrollTop, timeStamp);

          // Sync scroll position
          self.__publish(scrollLeft, scrollTop, level);

          // Otherwise figure out whether we are switching into dragging mode now.
        } else {

          var minimumTrackingForScroll = self.options.locking ? 3 : 0;
          var minimumTrackingForDrag = 5;

          var distanceX = Math.abs(currentTouchLeft - self.__initialTouchLeft);
          var distanceY = Math.abs(currentTouchTop - self.__initialTouchTop);

          self.__enableScrollX = self.options.scrollingX && distanceX >= minimumTrackingForScroll;
          self.__enableScrollY = self.options.scrollingY && distanceY >= minimumTrackingForScroll;

          positions.push(self.__scrollLeft, self.__scrollTop, timeStamp);

          self.__isDragging = (self.__enableScrollX || self.__enableScrollY) && (distanceX >= minimumTrackingForDrag || distanceY >= minimumTrackingForDrag);
          if (self.__isDragging) {
            self.__interruptedAnimation = false;
            self.__fadeScrollbars('in');
          }

        }

        // Update last touch positions and time stamp for next event
        self.__lastTouchLeft = currentTouchLeft;
        self.__lastTouchTop = currentTouchTop;
        self.__lastTouchMove = timeStamp;
        self.__lastScale = scale;

      },


      /**
       * Touch end handler for scrolling support
       */
      doTouchEnd: function(timeStamp) {
        if (timeStamp instanceof Date) {
          timeStamp = timeStamp.valueOf();
        }
        if (typeof timeStamp !== "number") {
          timeStamp = Date.now();
        }

        var self = this;

        // Ignore event when tracking is not enabled (no touchstart event on element)
        // This is required as this listener ('touchmove') sits on the document and not on the element itself.
        if (!self.__isTracking) {
          return;
        }

        // Not touching anymore (when two finger hit the screen there are two touch end events)
        self.__isTracking = false;

        // Be sure to reset the dragging flag now. Here we also detect whether
        // the finger has moved fast enough to switch into a deceleration animation.
        if (self.__isDragging) {

          // Reset dragging flag
          self.__isDragging = false;

          // Start deceleration
          // Verify that the last move detected was in some relevant time frame
          if (self.__isSingleTouch && self.options.animating && (timeStamp - self.__lastTouchMove) <= 100) {

            // Then figure out what the scroll position was about 100ms ago
            var positions = self.__positions;
            var endPos = positions.length - 1;
            var startPos = endPos;

            // Move pointer to position measured 100ms ago
            for (var i = endPos; i > 0 && positions[i] > (self.__lastTouchMove - 100); i -= 3) {
              startPos = i;
            }

            // If start and stop position is identical in a 100ms timeframe,
            // we cannot compute any useful deceleration.
            if (startPos !== endPos) {

              // Compute relative movement between these two points
              var timeOffset = positions[endPos] - positions[startPos];
              var movedLeft = self.__scrollLeft - positions[startPos - 2];
              var movedTop = self.__scrollTop - positions[startPos - 1];

              // Based on 50ms compute the movement to apply for each render step
              self.__decelerationVelocityX = movedLeft / timeOffset * (1000 / 60);
              self.__decelerationVelocityY = movedTop / timeOffset * (1000 / 60);

              // How much velocity is required to start the deceleration
              var minVelocityToStartDeceleration = self.options.paging || self.options.snapping ? 4 : 1;

              // Verify that we have enough velocity to start deceleration
              if (Math.abs(self.__decelerationVelocityX) > minVelocityToStartDeceleration || Math.abs(self.__decelerationVelocityY) > minVelocityToStartDeceleration) {

                // Deactivate pull-to-refresh when decelerating
                if (!self.__refreshActive) {
                  self.__startDeceleration(timeStamp);
                }
              }
            } else {
              self.__scrollingComplete();
            }
          } else if ((timeStamp - self.__lastTouchMove) > 100) {
            self.__scrollingComplete();
          }
        }

        // If this was a slower move it is per default non decelerated, but this
        // still means that we want snap back to the bounds which is done here.
        // This is placed outside the condition above to improve edge case stability
        // e.g. touchend fired without enabled dragging. This should normally do not
        // have modified the scroll positions or even showed the scrollbars though.
        if (!self.__isDecelerating) {

          if (self.__refreshActive && self.__refreshStart) {

            // Use publish instead of scrollTo to allow scrolling to out of boundary position
            // We don't need to normalize scrollLeft, zoomLevel, etc. here because we only y-scrolling when pull-to-refresh is enabled
            self.__publish(self.__scrollLeft, -self.__refreshHeight, self.__zoomLevel, true);

            if (self.__refreshStart) {
              self.__refreshStart();
            }

          } else {

            if (self.__interruptedAnimation || self.__isDragging) {
              self.__scrollingComplete();
            }
            self.scrollTo(self.__scrollLeft, self.__scrollTop, true, self.__zoomLevel);

            // Directly signalize deactivation (nothing todo on refresh?)
            if (self.__refreshActive) {

              self.__refreshActive = false;
              if (self.__refreshDeactivate) {
                self.__refreshDeactivate();
              }

            }
          }
        }

        // Fully cleanup list
        self.__positions.length = 0;

      },



      /*
       ---------------------------------------------------------------------------
       PRIVATE API
       ---------------------------------------------------------------------------
       */

      /**
       * Applies the scroll position to the content element
       *
       * @param left {Number} Left scroll position
       * @param top {Number} Top scroll position
       * @param animate {Boolean} Whether animation should be used to move to the new coordinates
       */
      __publish: function(left, top, zoom, animate, wasResize) {

        var self = this;

        // Remember whether we had an animation, then we try to continue based on the current "drive" of the animation
        var wasAnimating = self.__isAnimating;
        if (wasAnimating) {
          zyngaCore.effect.Animate.stop(wasAnimating);
          self.__isAnimating = false;
        }

        if (animate && self.options.animating) {

          // Keep scheduled positions for scrollBy/zoomBy functionality
          self.__scheduledLeft = left;
          self.__scheduledTop = top;
          self.__scheduledZoom = zoom;

          var oldLeft = self.__scrollLeft;
          var oldTop = self.__scrollTop;
          var oldZoom = self.__zoomLevel;

          var diffLeft = left - oldLeft;
          var diffTop = top - oldTop;
          var diffZoom = zoom - oldZoom;

          var step = function(percent, now, render) {

            if (render) {

              self.__scrollLeft = oldLeft + (diffLeft * percent);
              self.__scrollTop = oldTop + (diffTop * percent);
              self.__zoomLevel = oldZoom + (diffZoom * percent);

              // Push values out
              if (self.__callback) {
                self.__callback(self.__scrollLeft, self.__scrollTop, self.__zoomLevel, wasResize);
              }

            }
          };

          var verify = function(id) {
            return self.__isAnimating === id;
          };

          var completed = function(renderedFramesPerSecond, animationId, wasFinished) {
            if (animationId === self.__isAnimating) {
              self.__isAnimating = false;
            }
            if (self.__didDecelerationComplete || wasFinished) {
              self.__scrollingComplete();
            }

            if (self.options.zooming) {
              self.__computeScrollMax();
            }
          };

          // When continuing based on previous animation we choose an ease-out animation instead of ease-in-out
          self.__isAnimating = zyngaCore.effect.Animate.start(step, verify, completed, self.options.animationDuration, wasAnimating ? easeOutCubic : easeInOutCubic);

        } else {

          self.__scheduledLeft = self.__scrollLeft = left;
          self.__scheduledTop = self.__scrollTop = top;
          self.__scheduledZoom = self.__zoomLevel = zoom;

          // Push values out
          if (self.__callback) {
            self.__callback(left, top, zoom, wasResize);
          }

          // Fix max scroll ranges
          if (self.options.zooming) {
            self.__computeScrollMax();
          }
        }
      },


      /**
       * Recomputes scroll minimum values based on client dimensions and content dimensions.
       */
      __computeScrollMax: function(zoomLevel) {

        var self = this;

        if (zoomLevel == null) {
          zoomLevel = self.__zoomLevel;
        }

        self.__maxScrollLeft = Math.max((self.__contentWidth * zoomLevel) - self.__clientWidth, 0);
        self.__maxScrollTop = Math.max((self.__contentHeight * zoomLevel) - self.__clientHeight, 0);

        if(!self.__didWaitForSize && !self.__maxScrollLeft && !self.__maxScrollTop) {
          self.__didWaitForSize = true;
          self.__waitForSize();
        }
      },


      /**
       * If the scroll view isn't sized correctly on start, wait until we have at least some size
       */
      __waitForSize: function() {

        var self = this;

        clearTimeout(self.__sizerTimeout);

        var sizer = function() {
          self.resize();

          if((self.options.scrollingX && !self.__maxScrollLeft) || (self.options.scrollingY && !self.__maxScrollTop)) {
            //self.__sizerTimeout = setTimeout(sizer, 1000);
          }
        };

        sizer();
        self.__sizerTimeout = setTimeout(sizer, 1000);
      },

      /*
       ---------------------------------------------------------------------------
       ANIMATION (DECELERATION) SUPPORT
       ---------------------------------------------------------------------------
       */

      /**
       * Called when a touch sequence end and the speed of the finger was high enough
       * to switch into deceleration mode.
       */
      __startDeceleration: function(timeStamp) {

        var self = this;

        if (self.options.paging) {

          var scrollLeft = Math.max(Math.min(self.__scrollLeft, self.__maxScrollLeft), 0);
          var scrollTop = Math.max(Math.min(self.__scrollTop, self.__maxScrollTop), 0);
          var clientWidth = self.__clientWidth;
          var clientHeight = self.__clientHeight;

          // We limit deceleration not to the min/max values of the allowed range, but to the size of the visible client area.
          // Each page should have exactly the size of the client area.
          self.__minDecelerationScrollLeft = Math.floor(scrollLeft / clientWidth) * clientWidth;
          self.__minDecelerationScrollTop = Math.floor(scrollTop / clientHeight) * clientHeight;
          self.__maxDecelerationScrollLeft = Math.ceil(scrollLeft / clientWidth) * clientWidth;
          self.__maxDecelerationScrollTop = Math.ceil(scrollTop / clientHeight) * clientHeight;

        } else {

          self.__minDecelerationScrollLeft = 0;
          self.__minDecelerationScrollTop = 0;
          self.__maxDecelerationScrollLeft = self.__maxScrollLeft;
          self.__maxDecelerationScrollTop = self.__maxScrollTop;

        }

        // Wrap class method
        var step = function(percent, now, render) {
          self.__stepThroughDeceleration(render);
        };

        // How much velocity is required to keep the deceleration running
        self.__minVelocityToKeepDecelerating = self.options.snapping ? 4 : 0.1;

        // Detect whether it's still worth to continue animating steps
        // If we are already slow enough to not being user perceivable anymore, we stop the whole process here.
        var verify = function() {
          var shouldContinue = Math.abs(self.__decelerationVelocityX) >= self.__minVelocityToKeepDecelerating ||
            Math.abs(self.__decelerationVelocityY) >= self.__minVelocityToKeepDecelerating;
          if (!shouldContinue) {
            self.__didDecelerationComplete = true;

            //Make sure the scroll values are within the boundaries after a bounce,
            //not below 0 or above maximum
            if (self.options.bouncing) {
              self.scrollTo(
                Math.min( Math.max(self.__scrollLeft, 0), self.__maxScrollLeft ),
                Math.min( Math.max(self.__scrollTop, 0), self.__maxScrollTop ),
                false
              );
            }
          }
          return shouldContinue;
        };

        var completed = function(renderedFramesPerSecond, animationId, wasFinished) {
          self.__isDecelerating = false;
          if (self.__didDecelerationComplete) {
            self.__scrollingComplete();
          }

          // Animate to grid when snapping is active, otherwise just fix out-of-boundary positions
          if(self.options.paging) {
            self.scrollTo(self.__scrollLeft, self.__scrollTop, self.options.snapping);
          }
        };

        // Start animation and switch on flag
        self.__isDecelerating = zyngaCore.effect.Animate.start(step, verify, completed);

      },


      /**
       * Called on every step of the animation
       *
       * @param inMemory {Boolean} Whether to not render the current step, but keep it in memory only. Used internally only!
       */
      __stepThroughDeceleration: function(render) {

        var self = this;


        //
        // COMPUTE NEXT SCROLL POSITION
        //

        // Add deceleration to scroll position
        var scrollLeft = self.__scrollLeft + self.__decelerationVelocityX;// * self.options.deceleration);
        var scrollTop = self.__scrollTop + self.__decelerationVelocityY;// * self.options.deceleration);


        //
        // HARD LIMIT SCROLL POSITION FOR NON BOUNCING MODE
        //

        if (!self.options.bouncing) {

          var scrollLeftFixed = Math.max(Math.min(self.__maxDecelerationScrollLeft, scrollLeft), self.__minDecelerationScrollLeft);
          if (scrollLeftFixed !== scrollLeft) {
            scrollLeft = scrollLeftFixed;
            self.__decelerationVelocityX = 0;
          }

          var scrollTopFixed = Math.max(Math.min(self.__maxDecelerationScrollTop, scrollTop), self.__minDecelerationScrollTop);
          if (scrollTopFixed !== scrollTop) {
            scrollTop = scrollTopFixed;
            self.__decelerationVelocityY = 0;
          }

        }


        //
        // UPDATE SCROLL POSITION
        //

        if (render) {

          self.__publish(scrollLeft, scrollTop, self.__zoomLevel);

        } else {

          self.__scrollLeft = scrollLeft;
          self.__scrollTop = scrollTop;

        }


        //
        // SLOW DOWN
        //

        // Slow down velocity on every iteration
        if (!self.options.paging) {

          // This is the factor applied to every iteration of the animation
          // to slow down the process. This should emulate natural behavior where
          // objects slow down when the initiator of the movement is removed
          var frictionFactor = self.options.deceleration;

          self.__decelerationVelocityX *= frictionFactor;
          self.__decelerationVelocityY *= frictionFactor;

        }


        //
        // BOUNCING SUPPORT
        //

        if (self.options.bouncing) {

          var scrollOutsideX = 0;
          var scrollOutsideY = 0;

          // This configures the amount of change applied to deceleration/acceleration when reaching boundaries
          var penetrationDeceleration = self.options.penetrationDeceleration;
          var penetrationAcceleration = self.options.penetrationAcceleration;

          // Check limits
          if (scrollLeft < self.__minDecelerationScrollLeft) {
            scrollOutsideX = self.__minDecelerationScrollLeft - scrollLeft;
          } else if (scrollLeft > self.__maxDecelerationScrollLeft) {
            scrollOutsideX = self.__maxDecelerationScrollLeft - scrollLeft;
          }

          if (scrollTop < self.__minDecelerationScrollTop) {
            scrollOutsideY = self.__minDecelerationScrollTop - scrollTop;
          } else if (scrollTop > self.__maxDecelerationScrollTop) {
            scrollOutsideY = self.__maxDecelerationScrollTop - scrollTop;
          }

          // Slow down until slow enough, then flip back to snap position
          if (scrollOutsideX !== 0) {
            var isHeadingOutwardsX = scrollOutsideX * self.__decelerationVelocityX <= self.__minDecelerationScrollLeft;
            if (isHeadingOutwardsX) {
              self.__decelerationVelocityX += scrollOutsideX * penetrationDeceleration;
            }
            var isStoppedX = Math.abs(self.__decelerationVelocityX) <= self.__minVelocityToKeepDecelerating;
            //If we're not heading outwards, or if the above statement got us below minDeceleration, go back towards bounds
            if (!isHeadingOutwardsX || isStoppedX) {
              self.__decelerationVelocityX = scrollOutsideX * penetrationAcceleration;
            }
          }

          if (scrollOutsideY !== 0) {
            var isHeadingOutwardsY = scrollOutsideY * self.__decelerationVelocityY <= self.__minDecelerationScrollTop;
            if (isHeadingOutwardsY) {
              self.__decelerationVelocityY += scrollOutsideY * penetrationDeceleration;
            }
            var isStoppedY = Math.abs(self.__decelerationVelocityY) <= self.__minVelocityToKeepDecelerating;
            //If we're not heading outwards, or if the above statement got us below minDeceleration, go back towards bounds
            if (!isHeadingOutwardsY || isStoppedY) {
              self.__decelerationVelocityY = scrollOutsideY * penetrationAcceleration;
            }
          }
        }
      },


      /**
       * calculate the distance between two touches
       * @param   {Touch}     touch1
       * @param   {Touch}     touch2
       * @returns {Number}    distance
       */
      __getDistance: function getDistance(touch1, touch2) {
        var x = touch2.pageX - touch1.pageX,
          y = touch2.pageY - touch1.pageY;
        return Math.sqrt((x*x) + (y*y));
      },


      /**
       * calculate the scale factor between two touchLists (fingers)
       * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
       * @param   {Array}     start
       * @param   {Array}     end
       * @returns {Number}    scale
       */
      __getScale: function getScale(start, end) {

        var self = this;

        // need two fingers...
        if(start.length >= 2 && end.length >= 2) {
          return self.__getDistance(end[0], end[1]) /
            self.__getDistance(start[0], start[1]);
        }
        return 1;
      }
    });

    ionic.scroll = {
      isScrolling: false,
      lastTop: 0
    };

  })(ionic);

  (function(ionic) {
    'use strict';

    ionic.views.HeaderBar = ionic.views.View.inherit({
      initialize: function(opts) {
        this.el = opts.el;

        ionic.extend(this, {
          alignTitle: 'center'
        }, opts);

        this.align();
      },

      align: function(align) {

        align || (align = this.alignTitle);

        // Find the titleEl element
        var titleEl = this.el.querySelector('.title');
        if(!titleEl) {
          return;
        }

        var self = this;
        //We have to rAF here so all of the elements have time to initialize
        ionic.requestAnimationFrame(function() {
          var i, c, childSize;
          var childNodes = self.el.childNodes;
          var leftWidth = 0;
          var rightWidth = 0;
          var isCountingRightWidth = false;

          // Compute how wide the left children are
          // Skip all titles (there may still be two titles, one leaving the dom)
          // Once we encounter a titleEl, realize we are now counting the right-buttons, not left
          for(i = 0; i < childNodes.length; i++) {
            c = childNodes[i];
            if (c.tagName && c.tagName.toLowerCase() == 'h1') {
              isCountingRightWidth = true;
              continue;
            }

            childSize = null;
            if(c.nodeType == 3) {
              var bounds = ionic.DomUtil.getTextBounds(c);
              if(bounds) {
                childSize = bounds.width;
              }
            } else if(c.nodeType == 1) {
              childSize = c.offsetWidth;
            }
            if(childSize) {
              if (isCountingRightWidth) {
                rightWidth += childSize;
              } else {
                leftWidth += childSize;
              }
            }
          }

          var margin = Math.max(leftWidth, rightWidth) + 10;

          //Reset left and right before setting again
          titleEl.style.left = titleEl.style.right = '';

          // Size and align the header titleEl based on the sizes of the left and
          // right children, and the desired alignment mode
          if(align == 'center') {
            if(margin > 10) {
              titleEl.style.left = margin + 'px';
              titleEl.style.right = margin + 'px';
            }
            if(titleEl.offsetWidth < titleEl.scrollWidth) {
              if(rightWidth > 0) {
                titleEl.style.right = (rightWidth + 5) + 'px';
              }
            }
          } else if(align == 'left') {
            titleEl.classList.add('title-left');
            if(leftWidth > 0) {
              titleEl.style.left = (leftWidth + 15) + 'px';
            }
          } else if(align == 'right') {
            titleEl.classList.add('title-right');
            if(rightWidth > 0) {
              titleEl.style.right = (rightWidth + 15) + 'px';
            }
          }
        });
      }
    });

  })(ionic);

  (function(ionic) {
    'use strict';

    var ITEM_CLASS = 'item';
    var ITEM_CONTENT_CLASS = 'item-content';
    var ITEM_SLIDING_CLASS = 'item-sliding';
    var ITEM_OPTIONS_CLASS = 'item-options';
    var ITEM_PLACEHOLDER_CLASS = 'item-placeholder';
    var ITEM_REORDERING_CLASS = 'item-reordering';
    var ITEM_REORDER_BTN_CLASS = 'item-reorder';

    var DragOp = function() {};
    DragOp.prototype = {
      start: function(e) {
      },
      drag: function(e) {
      },
      end: function(e) {
      },
      isSameItem: function(item) {
        return false;
      }
    };

    var SlideDrag = function(opts) {
      this.dragThresholdX = opts.dragThresholdX || 10;
      this.el = opts.el;
      this.canSwipe = opts.canSwipe;
    };

    SlideDrag.prototype = new DragOp();

    SlideDrag.prototype.start = function(e) {
      var content, buttons, offsetX, buttonsWidth;

      if (!this.canSwipe()) {
        return;
      }

      if(e.target.classList.contains(ITEM_CONTENT_CLASS)) {
        content = e.target;
      } else if(e.target.classList.contains(ITEM_CLASS)) {
        content = e.target.querySelector('.' + ITEM_CONTENT_CLASS);
      } else {
        content = ionic.DomUtil.getParentWithClass(e.target, ITEM_CONTENT_CLASS);
      }

      // If we don't have a content area as one of our children (or ourselves), skip
      if(!content) {
        return;
      }

      // Make sure we aren't animating as we slide
      content.classList.remove(ITEM_SLIDING_CLASS);

      // Grab the starting X point for the item (for example, so we can tell whether it is open or closed to start)
      offsetX = parseFloat(content.style[ionic.CSS.TRANSFORM].replace('translate3d(', '').split(',')[0]) || 0;

      // Grab the buttons
      buttons = content.parentNode.querySelector('.' + ITEM_OPTIONS_CLASS);
      if(!buttons) {
        return;
      }
      buttons.classList.remove('invisible');

      buttonsWidth = buttons.offsetWidth;

      this._currentDrag = {
        buttons: buttons,
        buttonsWidth: buttonsWidth,
        content: content,
        startOffsetX: offsetX
      };
    };

    /**
     * Check if this is the same item that was previously dragged.
     */
    SlideDrag.prototype.isSameItem = function(op) {
      if(op._lastDrag && this._currentDrag) {
        return this._currentDrag.content == op._lastDrag.content;
      }
      return false;
    };

    SlideDrag.prototype.clean = function(e) {
      var lastDrag = this._lastDrag;

      if(!lastDrag) return;

      lastDrag.content.style[ionic.CSS.TRANSITION] = '';
      lastDrag.content.style[ionic.CSS.TRANSFORM] = '';
      ionic.requestAnimationFrame(function() {
        setTimeout(function() {
          lastDrag.buttons && lastDrag.buttons.classList.add('invisible');
        }, 250);
      });
    };

    SlideDrag.prototype.drag = ionic.animationFrameThrottle(function(e) {
      var buttonsWidth;

      // We really aren't dragging
      if(!this._currentDrag) {
        return;
      }

      // Check if we should start dragging. Check if we've dragged past the threshold,
      // or we are starting from the open state.
      if(!this._isDragging &&
        ((Math.abs(e.gesture.deltaX) > this.dragThresholdX) ||
          (Math.abs(this._currentDrag.startOffsetX) > 0)))
      {
        this._isDragging = true;
      }

      if(this._isDragging) {
        buttonsWidth = this._currentDrag.buttonsWidth;

        // Grab the new X point, capping it at zero
        var newX = Math.min(0, this._currentDrag.startOffsetX + e.gesture.deltaX);

        // If the new X position is past the buttons, we need to slow down the drag (rubber band style)
        if(newX < -buttonsWidth) {
          // Calculate the new X position, capped at the top of the buttons
          newX = Math.min(-buttonsWidth, -buttonsWidth + (((e.gesture.deltaX + buttonsWidth) * 0.4)));
        }

        this._currentDrag.content.style[ionic.CSS.TRANSFORM] = 'translate3d(' + newX + 'px, 0, 0)';
        this._currentDrag.content.style[ionic.CSS.TRANSITION] = 'none';
      }
    });

    SlideDrag.prototype.end = function(e, doneCallback) {
      var _this = this;

      // There is no drag, just end immediately
      if(!this._currentDrag) {
        doneCallback && doneCallback();
        return;
      }

      // If we are currently dragging, we want to snap back into place
      // The final resting point X will be the width of the exposed buttons
      var restingPoint = -this._currentDrag.buttonsWidth;

      // Check if the drag didn't clear the buttons mid-point
      // and we aren't moving fast enough to swipe open
      if(e.gesture.deltaX > -(this._currentDrag.buttonsWidth/2)) {

        // If we are going left but too slow, or going right, go back to resting
        if(e.gesture.direction == "left" && Math.abs(e.gesture.velocityX) < 0.3) {
          restingPoint = 0;
        } else if(e.gesture.direction == "right") {
          restingPoint = 0;
        }

      }

      ionic.requestAnimationFrame(function() {
        if(restingPoint === 0) {
          _this._currentDrag.content.style[ionic.CSS.TRANSFORM] = '';
          var buttons = _this._currentDrag.buttons;
          setTimeout(function() {
            buttons && buttons.classList.add('invisible');
          }, 250);
        } else {
          _this._currentDrag.content.style[ionic.CSS.TRANSFORM] = 'translate3d(' + restingPoint + 'px, 0, 0)';
        }
        _this._currentDrag.content.style[ionic.CSS.TRANSITION] = '';


        // Kill the current drag
        _this._lastDrag = _this._currentDrag;
        _this._currentDrag = null;

        // We are done, notify caller
        doneCallback && doneCallback();
      });
    };

    var ReorderDrag = function(opts) {
      this.dragThresholdY = opts.dragThresholdY || 0;
      this.onReorder = opts.onReorder;
      this.listEl = opts.listEl;
      this.el = opts.el;
      this.scrollEl = opts.scrollEl;
      this.scrollView = opts.scrollView;
      // Get the True Top of the list el http://www.quirksmode.org/js/findpos.html
      this.listElTrueTop = 0;
      if (this.listEl.offsetParent) {
        var obj = this.listEl;
        do {
          this.listElTrueTop += obj.offsetTop;
          obj = obj.offsetParent;
        } while (obj);
      }
    };

    ReorderDrag.prototype = new DragOp();

    ReorderDrag.prototype._moveElement = function(e) {
      var y = e.gesture.center.pageY +
        this.scrollView.getValues().top -
        (this._currentDrag.elementHeight / 2) -
        this.listElTrueTop;
      this.el.style[ionic.CSS.TRANSFORM] = 'translate3d(0, '+y+'px, 0)';
    };

    ReorderDrag.prototype.start = function(e) {
      var content;

      var startIndex = ionic.DomUtil.getChildIndex(this.el, this.el.nodeName.toLowerCase());
      var elementHeight = this.el.scrollHeight;
      var placeholder = this.el.cloneNode(true);

      placeholder.classList.add(ITEM_PLACEHOLDER_CLASS);

      this.el.parentNode.insertBefore(placeholder, this.el);
      this.el.classList.add(ITEM_REORDERING_CLASS);

      this._currentDrag = {
        elementHeight: elementHeight,
        startIndex: startIndex,
        placeholder: placeholder,
        scrollHeight: scroll,
        list: placeholder.parentNode
      };

      this._moveElement(e);
    };

    ReorderDrag.prototype.drag = ionic.animationFrameThrottle(function(e) {
      // We really aren't dragging
      var self = this;
      if(!this._currentDrag) {
        return;
      }

      var scrollY = 0;
      var pageY = e.gesture.center.pageY;
      var offset = this.listElTrueTop;

      //If we have a scrollView, check scroll boundaries for dragged element and scroll if necessary
      if (this.scrollView) {

        var container = this.scrollView.__container;
        scrollY = this.scrollView.getValues().top;

        var containerTop = container.offsetTop;
        var pixelsPastTop = containerTop - pageY + this._currentDrag.elementHeight/2;
        var pixelsPastBottom = pageY + this._currentDrag.elementHeight/2 - containerTop - container.offsetHeight;

        if (e.gesture.deltaY < 0 && pixelsPastTop > 0 && scrollY > 0) {
          this.scrollView.scrollBy(null, -pixelsPastTop);
          //Trigger another drag so the scrolling keeps going
          ionic.requestAnimationFrame(function() {
            self.drag(e);
          });
        }
        if (e.gesture.deltaY > 0 && pixelsPastBottom > 0) {
          if (scrollY < this.scrollView.getScrollMax().top) {
            this.scrollView.scrollBy(null, pixelsPastBottom);
            //Trigger another drag so the scrolling keeps going
            ionic.requestAnimationFrame(function() {
              self.drag(e);
            });
          }
        }
      }

      // Check if we should start dragging. Check if we've dragged past the threshold,
      // or we are starting from the open state.
      if(!this._isDragging && Math.abs(e.gesture.deltaY) > this.dragThresholdY) {
        this._isDragging = true;
      }

      if(this._isDragging) {
        this._moveElement(e);

        this._currentDrag.currentY = scrollY + pageY - offset;

        // this._reorderItems();
      }
    });

    // When an item is dragged, we need to reorder any items for sorting purposes
    ReorderDrag.prototype._getReorderIndex = function() {
      var self = this;
      var placeholder = this._currentDrag.placeholder;
      var siblings = Array.prototype.slice.call(this._currentDrag.placeholder.parentNode.children)
        .filter(function(el) {
          return el.nodeName === self.el.nodeName && el !== self.el;
        });

      var dragOffsetTop = this._currentDrag.currentY;
      var el;
      for (var i = 0, len = siblings.length; i < len; i++) {
        el = siblings[i];
        if (i === len - 1) {
          if (dragOffsetTop > el.offsetTop) {
            return i;
          }
        } else if (i === 0) {
          if (dragOffsetTop < el.offsetTop + el.offsetHeight) {
            return i;
          }
        } else if (dragOffsetTop > el.offsetTop - el.offsetHeight / 2 &&
          dragOffsetTop < el.offsetTop + el.offsetHeight * 1.5) {
          return i;
        }
      }
      return this._currentDrag.startIndex;
    };

    ReorderDrag.prototype.end = function(e, doneCallback) {
      if(!this._currentDrag) {
        doneCallback && doneCallback();
        return;
      }

      var placeholder = this._currentDrag.placeholder;
      var finalIndex = this._getReorderIndex();

      // Reposition the element
      this.el.classList.remove(ITEM_REORDERING_CLASS);
      this.el.style[ionic.CSS.TRANSFORM] = '';

      placeholder.parentNode.insertBefore(this.el, placeholder);
      placeholder.parentNode.removeChild(placeholder);

      this.onReorder && this.onReorder(this.el, this._currentDrag.startIndex, finalIndex);

      this._currentDrag = null;
      doneCallback && doneCallback();
    };



    /**
     * The ListView handles a list of items. It will process drag animations, edit mode,
     * and other operations that are common on mobile lists or table views.
     */
    ionic.views.ListView = ionic.views.View.inherit({
      initialize: function(opts) {
        var _this = this;

        opts = ionic.extend({
          onReorder: function(el, oldIndex, newIndex) {},
          virtualRemoveThreshold: -200,
          virtualAddThreshold: 200,
          canSwipe: function() {
            return true;
          }
        }, opts);

        ionic.extend(this, opts);

        if(!this.itemHeight && this.listEl) {
          this.itemHeight = this.listEl.children[0] && parseInt(this.listEl.children[0].style.height, 10);
        }

        //ionic.views.ListView.__super__.initialize.call(this, opts);

        this.onRefresh = opts.onRefresh || function() {};
        this.onRefreshOpening = opts.onRefreshOpening || function() {};
        this.onRefreshHolding = opts.onRefreshHolding || function() {};

        window.ionic.onGesture('release', function(e) {
          _this._handleEndDrag(e);
        }, this.el);

        window.ionic.onGesture('drag', function(e) {
          _this._handleDrag(e);
        }, this.el);
        // Start the drag states
        this._initDrag();
      },
      /**
       * Called to tell the list to stop refreshing. This is useful
       * if you are refreshing the list and are done with refreshing.
       */
      stopRefreshing: function() {
        var refresher = this.el.querySelector('.list-refresher');
        refresher.style.height = '0px';
      },

      /**
       * If we scrolled and have virtual mode enabled, compute the window
       * of active elements in order to figure out the viewport to render.
       */
      didScroll: function(e) {
        if(this.isVirtual) {
          var itemHeight = this.itemHeight;

          // TODO: This would be inaccurate if we are windowed
          var totalItems = this.listEl.children.length;

          // Grab the total height of the list
          var scrollHeight = e.target.scrollHeight;

          // Get the viewport height
          var viewportHeight = this.el.parentNode.offsetHeight;

          // scrollTop is the current scroll position
          var scrollTop = e.scrollTop;

          // High water is the pixel position of the first element to include (everything before
          // that will be removed)
          var highWater = Math.max(0, e.scrollTop + this.virtualRemoveThreshold);

          // Low water is the pixel position of the last element to include (everything after
          // that will be removed)
          var lowWater = Math.min(scrollHeight, Math.abs(e.scrollTop) + viewportHeight + this.virtualAddThreshold);

          // Compute how many items per viewport size can show
          var itemsPerViewport = Math.floor((lowWater - highWater) / itemHeight);

          // Get the first and last elements in the list based on how many can fit
          // between the pixel range of lowWater and highWater
          var first = parseInt(Math.abs(highWater / itemHeight), 10);
          var last = parseInt(Math.abs(lowWater / itemHeight), 10);

          // Get the items we need to remove
          this._virtualItemsToRemove = Array.prototype.slice.call(this.listEl.children, 0, first);

          // Grab the nodes we will be showing
          var nodes = Array.prototype.slice.call(this.listEl.children, first, first + itemsPerViewport);

          this.renderViewport && this.renderViewport(highWater, lowWater, first, last);
        }
      },

      didStopScrolling: function(e) {
        if(this.isVirtual) {
          for(var i = 0; i < this._virtualItemsToRemove.length; i++) {
            var el = this._virtualItemsToRemove[i];
            //el.parentNode.removeChild(el);
            this.didHideItem && this.didHideItem(i);
          }
          // Once scrolling stops, check if we need to remove old items

        }
      },

      /**
       * Clear any active drag effects on the list.
       */
      clearDragEffects: function() {
        if(this._lastDragOp) {
          this._lastDragOp.clean && this._lastDragOp.clean();
          this._lastDragOp = null;
        }
      },

      _initDrag: function() {
        //ionic.views.ListView.__super__._initDrag.call(this);

        // Store the last one
        this._lastDragOp = this._dragOp;

        this._dragOp = null;
      },

      // Return the list item from the given target
      _getItem: function(target) {
        while(target) {
          if(target.classList && target.classList.contains(ITEM_CLASS)) {
            return target;
          }
          target = target.parentNode;
        }
        return null;
      },


      _startDrag: function(e) {
        var _this = this;

        var didStart = false;

        this._isDragging = false;

        var lastDragOp = this._lastDragOp;
        var item;

        // Check if this is a reorder drag
        if(ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_REORDER_BTN_CLASS) && (e.gesture.direction == 'up' || e.gesture.direction == 'down')) {
          item = this._getItem(e.target);

          if(item) {
            this._dragOp = new ReorderDrag({
              listEl: this.el,
              el: item,
              scrollEl: this.scrollEl,
              scrollView: this.scrollView,
              onReorder: function(el, start, end) {
                _this.onReorder && _this.onReorder(el, start, end);
              }
            });
            this._dragOp.start(e);
            e.preventDefault();
          }
        }

        // Or check if this is a swipe to the side drag
        else if(!this._didDragUpOrDown && (e.gesture.direction == 'left' || e.gesture.direction == 'right') && Math.abs(e.gesture.deltaX) > 5) {

          // Make sure this is an item with buttons
          item = this._getItem(e.target);
          if(item && item.querySelector('.item-options')) {
            this._dragOp = new SlideDrag({ el: this.el, canSwipe: this.canSwipe });
            this._dragOp.start(e);
            e.preventDefault();
          }
        }

        // If we had a last drag operation and this is a new one on a different item, clean that last one
        if(lastDragOp && this._dragOp && !this._dragOp.isSameItem(lastDragOp) && e.defaultPrevented) {
          lastDragOp.clean && lastDragOp.clean();
        }
      },


      _handleEndDrag: function(e) {
        var _this = this;

        this._didDragUpOrDown = false;

        if(!this._dragOp) {
          //ionic.views.ListView.__super__._handleEndDrag.call(this, e);
          return;
        }

        this._dragOp.end(e, function() {
          _this._initDrag();
        });
      },

      /**
       * Process the drag event to move the item to the left or right.
       */
      _handleDrag: function(e) {
        var _this = this, content, buttons;

        if(Math.abs(e.gesture.deltaY) > 5) {
          this._didDragUpOrDown = true;
        }

        // If we get a drag event, make sure we aren't in another drag, then check if we should
        // start one
        if(!this.isDragging && !this._dragOp) {
          this._startDrag(e);
        }

        // No drag still, pass it up
        if(!this._dragOp) {
          //ionic.views.ListView.__super__._handleDrag.call(this, e);
          return;
        }

        e.gesture.srcEvent.preventDefault();
        this._dragOp.drag(e);
      }

    });

  })(ionic);

  (function(ionic) {
    'use strict';

    ionic.views.Modal = ionic.views.View.inherit({
      initialize: function(opts) {
        opts = ionic.extend({
          focusFirstInput: false,
          unfocusOnHide: true,
          focusFirstDelay: 600,
          backdropClickToClose: true,
          hardwareBackButtonClose: true,
        }, opts);

        ionic.extend(this, opts);

        this.el = opts.el;
      },
      show: function() {
        var self = this;

        if(self.focusFirstInput) {
          // Let any animations run first
          window.setTimeout(function() {
            var input = self.el.querySelector('input, textarea');
            input && input.focus && input.focus();
          }, self.focusFirstDelay);
        }
      },
      hide: function() {
        // Unfocus all elements
        if(this.unfocusOnHide) {
          var inputs = this.el.querySelectorAll('input, textarea');
          // Let any animations run first
          window.setTimeout(function() {
            for(var i = 0; i < inputs.length; i++) {
              inputs[i].blur && inputs[i].blur();
            }
          });
        }
      }
    });

  })(ionic);

  (function(ionic) {
    'use strict';

    /**
     * The side menu view handles one of the side menu's in a Side Menu Controller
     * configuration.
     * It takes a DOM reference to that side menu element.
     */
    ionic.views.SideMenu = ionic.views.View.inherit({
      initialize: function(opts) {
        this.el = opts.el;
        this.isEnabled = (typeof opts.isEnabled === 'undefined') ? true : opts.isEnabled;
        this.setWidth(opts.width);
      },

      getFullWidth: function() {
        return this.width;
      },
      setWidth: function(width) {
        this.width = width;
        this.el.style.width = width + 'px';
      },
      setIsEnabled: function(isEnabled) {
        this.isEnabled = isEnabled;
      },
      bringUp: function() {
        if(this.el.style.zIndex !== '0') {
          this.el.style.zIndex = '0';
        }
      },
      pushDown: function() {
        if(this.el.style.zIndex !== '-1') {
          this.el.style.zIndex = '-1';
        }
      }
    });

    ionic.views.SideMenuContent = ionic.views.View.inherit({
      initialize: function(opts) {
        var _this = this;

        ionic.extend(this, {
          animationClass: 'menu-animated',
          onDrag: function(e) {},
          onEndDrag: function(e) {},
        }, opts);

        ionic.onGesture('drag', ionic.proxy(this._onDrag, this), this.el);
        ionic.onGesture('release', ionic.proxy(this._onEndDrag, this), this.el);
      },
      _onDrag: function(e) {
        this.onDrag && this.onDrag(e);
      },
      _onEndDrag: function(e) {
        this.onEndDrag && this.onEndDrag(e);
      },
      disableAnimation: function() {
        this.el.classList.remove(this.animationClass);
      },
      enableAnimation: function() {
        this.el.classList.add(this.animationClass);
      },
      getTranslateX: function() {
        return parseFloat(this.el.style[ionic.CSS.TRANSFORM].replace('translate3d(', '').split(',')[0]);
      },
      setTranslateX: ionic.animationFrameThrottle(function(x) {
        this.el.style[ionic.CSS.TRANSFORM] = 'translate3d(' + x + 'px, 0, 0)';
      })
    });

  })(ionic);

  /*
   * Adapted from Swipe.js 2.0
   *
   * Brad Birdsall
   * Copyright 2013, MIT License
   *
   */

  (function(ionic) {
    'use strict';

    ionic.views.Slider = ionic.views.View.inherit({
      initialize: function (options) {
        var slider = this;

        // utilities
        var noop = function() {}; // simple no operation function
        var offloadFn = function(fn) { setTimeout(fn || noop, 0); }; // offload a functions execution

        // check browser capabilities
        var browser = {
          addEventListener: !!window.addEventListener,
          touch: ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch,
          transitions: (function(temp) {
            var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];
            for ( var i in props ) if (temp.style[ props[i] ] !== undefined) return true;
            return false;
          })(document.createElement('swipe'))
        };


        var container = options.el;

        // quit if no root element
        if (!container) return;
        var element = container.children[0];
        var slides, slidePos, width, length;
        options = options || {};
        var index = parseInt(options.startSlide, 10) || 0;
        var speed = options.speed || 300;
        options.continuous = options.continuous !== undefined ? options.continuous : true;

        function setup() {

          // cache slides
          slides = element.children;
          length = slides.length;

          // set continuous to false if only one slide
          if (slides.length < 2) options.continuous = false;

          //special case if two slides
          if (browser.transitions && options.continuous && slides.length < 3) {
            element.appendChild(slides[0].cloneNode(true));
            element.appendChild(element.children[1].cloneNode(true));
            slides = element.children;
          }

          // create an array to store current positions of each slide
          slidePos = new Array(slides.length);

          // determine width of each slide
          width = container.offsetWidth || container.getBoundingClientRect().width;

          element.style.width = (slides.length * width) + 'px';

          // stack elements
          var pos = slides.length;
          while(pos--) {

            var slide = slides[pos];

            slide.style.width = width + 'px';
            slide.setAttribute('data-index', pos);

            if (browser.transitions) {
              slide.style.left = (pos * -width) + 'px';
              move(pos, index > pos ? -width : (index < pos ? width : 0), 0);
            }

          }

          // reposition elements before and after index
          if (options.continuous && browser.transitions) {
            move(circle(index-1), -width, 0);
            move(circle(index+1), width, 0);
          }

          if (!browser.transitions) element.style.left = (index * -width) + 'px';

          container.style.visibility = 'visible';

          options.slidesChanged && options.slidesChanged();
        }

        function prev() {

          if (options.continuous) slide(index-1);
          else if (index) slide(index-1);

        }

        function next() {

          if (options.continuous) slide(index+1);
          else if (index < slides.length - 1) slide(index+1);

        }

        function circle(index) {

          // a simple positive modulo using slides.length
          return (slides.length + (index % slides.length)) % slides.length;

        }

        function slide(to, slideSpeed) {

          // do nothing if already on requested slide
          if (index == to) return;

          if (browser.transitions) {

            var direction = Math.abs(index-to) / (index-to); // 1: backward, -1: forward

            // get the actual position of the slide
            if (options.continuous) {
              var natural_direction = direction;
              direction = -slidePos[circle(to)] / width;

              // if going forward but to < index, use to = slides.length + to
              // if going backward but to > index, use to = -slides.length + to
              if (direction !== natural_direction) to =  -direction * slides.length + to;

            }

            var diff = Math.abs(index-to) - 1;

            // move all the slides between index and to in the right direction
            while (diff--) move( circle((to > index ? to : index) - diff - 1), width * direction, 0);

            to = circle(to);

            move(index, width * direction, slideSpeed || speed);
            move(to, 0, slideSpeed || speed);

            if (options.continuous) move(circle(to - direction), -(width * direction), 0); // we need to get the next in place

          } else {

            to = circle(to);
            animate(index * -width, to * -width, slideSpeed || speed);
            //no fallback for a circular continuous if the browser does not accept transitions
          }

          index = to;
          offloadFn(options.callback && options.callback(index, slides[index]));
        }

        function move(index, dist, speed) {

          translate(index, dist, speed);
          slidePos[index] = dist;

        }

        function translate(index, dist, speed) {

          var slide = slides[index];
          var style = slide && slide.style;

          if (!style) return;

          style.webkitTransitionDuration =
            style.MozTransitionDuration =
              style.msTransitionDuration =
                style.OTransitionDuration =
                  style.transitionDuration = speed + 'ms';

          style.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';
          style.msTransform =
            style.MozTransform =
              style.OTransform = 'translateX(' + dist + 'px)';

        }

        function animate(from, to, speed) {

          // if not an animation, just reposition
          if (!speed) {

            element.style.left = to + 'px';
            return;

          }

          var start = +new Date();

          var timer = setInterval(function() {

            var timeElap = +new Date() - start;

            if (timeElap > speed) {

              element.style.left = to + 'px';

              if (delay) begin();

              options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

              clearInterval(timer);
              return;

            }

            element.style.left = (( (to - from) * (Math.floor((timeElap / speed) * 100) / 100) ) + from) + 'px';

          }, 4);

        }

        // setup auto slideshow
        var delay = options.auto || 0;
        var interval;

        function begin() {

          interval = setTimeout(next, delay);

        }

        function stop() {

          delay = options.auto || 0;
          clearTimeout(interval);

        }


        // setup initial vars
        var start = {};
        var delta = {};
        var isScrolling;

        // setup event capturing
        var events = {

          handleEvent: function(event) {
            if(event.type == 'mousedown' || event.type == 'mouseup' || event.type == 'mousemove') {
              event.touches = [{
                pageX: event.pageX,
                pageY: event.pageY
              }];
            }

            switch (event.type) {
              case 'mousedown': this.start(event); break;
              case 'touchstart': this.start(event); break;
              case 'touchmove': this.touchmove(event); break;
              case 'mousemove': this.touchmove(event); break;
              case 'touchend': offloadFn(this.end(event)); break;
              case 'mouseup': offloadFn(this.end(event)); break;
              case 'webkitTransitionEnd':
              case 'msTransitionEnd':
              case 'oTransitionEnd':
              case 'otransitionend':
              case 'transitionend': offloadFn(this.transitionEnd(event)); break;
              case 'resize': offloadFn(setup); break;
            }

            if (options.stopPropagation) event.stopPropagation();

          },
          start: function(event) {

            var touches = event.touches[0];

            // measure start values
            start = {

              // get initial touch coords
              x: touches.pageX,
              y: touches.pageY,

              // store time to determine touch duration
              time: +new Date()

            };

            // used for testing first move event
            isScrolling = undefined;

            // reset delta and end measurements
            delta = {};

            // attach touchmove and touchend listeners
            if(browser.touch) {
              element.addEventListener('touchmove', this, false);
              element.addEventListener('touchend', this, false);
            } else {
              element.addEventListener('mousemove', this, false);
              element.addEventListener('mouseup', this, false);
              document.addEventListener('mouseup', this, false);
            }
          },
          touchmove: function(event) {

            // ensure swiping with one touch and not pinching
            // ensure sliding is enabled
            if (event.touches.length > 1 ||
              event.scale && event.scale !== 1 ||
              slider.slideIsDisabled) {
              return;
            }

            if (options.disableScroll) event.preventDefault();

            var touches = event.touches[0];

            // measure change in x and y
            delta = {
              x: touches.pageX - start.x,
              y: touches.pageY - start.y
            };

            // determine if scrolling test has run - one time test
            if ( typeof isScrolling == 'undefined') {
              isScrolling = !!( isScrolling || Math.abs(delta.x) < Math.abs(delta.y) );
            }

            // if user is not trying to scroll vertically
            if (!isScrolling) {

              // prevent native scrolling
              event.preventDefault();

              // stop slideshow
              stop();

              // increase resistance if first or last slide
              if (options.continuous) { // we don't add resistance at the end

                translate(circle(index-1), delta.x + slidePos[circle(index-1)], 0);
                translate(index, delta.x + slidePos[index], 0);
                translate(circle(index+1), delta.x + slidePos[circle(index+1)], 0);

              } else {

                delta.x =
                  delta.x /
                  ( (!index && delta.x > 0 ||         // if first slide and sliding left
                    index == slides.length - 1 &&     // or if last slide and sliding right
                    delta.x < 0                       // and if sliding at all
                    ) ?
                    ( Math.abs(delta.x) / width + 1 )      // determine resistance level
                    : 1 );                                 // no resistance if false

                // translate 1:1
                translate(index-1, delta.x + slidePos[index-1], 0);
                translate(index, delta.x + slidePos[index], 0);
                translate(index+1, delta.x + slidePos[index+1], 0);
              }

            }

          },
          end: function(event) {

            // measure duration
            var duration = +new Date() - start.time;

            // determine if slide attempt triggers next/prev slide
            var isValidSlide =
              Number(duration) < 250 &&         // if slide duration is less than 250ms
              Math.abs(delta.x) > 20 ||         // and if slide amt is greater than 20px
              Math.abs(delta.x) > width/2;      // or if slide amt is greater than half the width

            // determine if slide attempt is past start and end
            var isPastBounds = (!index && delta.x > 0) ||      // if first slide and slide amt is greater than 0
              (index == slides.length - 1 && delta.x < 0); // or if last slide and slide amt is less than 0

            if (options.continuous) isPastBounds = false;

            // determine direction of swipe (true:right, false:left)
            var direction = delta.x < 0;

            // if not scrolling vertically
            if (!isScrolling) {

              if (isValidSlide && !isPastBounds) {

                if (direction) {

                  if (options.continuous) { // we need to get the next in this direction in place

                    move(circle(index-1), -width, 0);
                    move(circle(index+2), width, 0);

                  } else {
                    move(index-1, -width, 0);
                  }

                  move(index, slidePos[index]-width, speed);
                  move(circle(index+1), slidePos[circle(index+1)]-width, speed);
                  index = circle(index+1);

                } else {
                  if (options.continuous) { // we need to get the next in this direction in place

                    move(circle(index+1), width, 0);
                    move(circle(index-2), -width, 0);

                  } else {
                    move(index+1, width, 0);
                  }

                  move(index, slidePos[index]+width, speed);
                  move(circle(index-1), slidePos[circle(index-1)]+width, speed);
                  index = circle(index-1);

                }

                options.callback && options.callback(index, slides[index]);

              } else {

                if (options.continuous) {

                  move(circle(index-1), -width, speed);
                  move(index, 0, speed);
                  move(circle(index+1), width, speed);

                } else {

                  move(index-1, -width, speed);
                  move(index, 0, speed);
                  move(index+1, width, speed);
                }

              }

            }

            // kill touchmove and touchend event listeners until touchstart called again
            if(browser.touch) {
              element.removeEventListener('touchmove', events, false);
              element.removeEventListener('touchend', events, false);
            } else {
              element.removeEventListener('mousemove', events, false);
              element.removeEventListener('mouseup', events, false);
              document.removeEventListener('mouseup', events, false);
            }

          },
          transitionEnd: function(event) {

            if (parseInt(event.target.getAttribute('data-index'), 10) == index) {

              if (delay) begin();

              options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

            }

          }

        };

        // Public API
        this.update = function() {
          setTimeout(setup);
        };
        this.setup = function() {
          setup();
        };

        this.enableSlide = function(shouldEnable) {
          if (arguments.length) {
            this.slideIsDisabled = !shouldEnable;
          }
          return !this.slideIsDisabled;
        },
          this.slide = function(to, speed) {
            // cancel slideshow
            stop();

            slide(to, speed);
          };

        this.prev = this.previous = function() {
          // cancel slideshow
          stop();

          prev();
        };

        this.next = function() {
          // cancel slideshow
          stop();

          next();
        };

        this.stop = function() {
          // cancel slideshow
          stop();
        };

        this.start = function() {
          begin();
        };

        this.currentIndex = function() {
          // return current index position
          return index;
        };

        this.slidesCount = function() {
          // return total number of slides
          return length;
        };

        this.kill = function() {
          // cancel slideshow
          stop();

          // reset element
          element.style.width = '';
          element.style.left = '';

          // reset slides
          var pos = slides.length;
          while(pos--) {

            var slide = slides[pos];
            slide.style.width = '';
            slide.style.left = '';

            if (browser.transitions) translate(pos, 0, 0);

          }

          // removed event listeners
          if (browser.addEventListener) {

            // remove current event listeners
            element.removeEventListener('touchstart', events, false);
            element.removeEventListener('webkitTransitionEnd', events, false);
            element.removeEventListener('msTransitionEnd', events, false);
            element.removeEventListener('oTransitionEnd', events, false);
            element.removeEventListener('otransitionend', events, false);
            element.removeEventListener('transitionend', events, false);
            window.removeEventListener('resize', events, false);

          }
          else {

            window.onresize = null;

          }
        };

        this.load = function() {
          // trigger setup
          setup();

          // start auto slideshow if applicable
          if (delay) begin();


          // add event listeners
          if (browser.addEventListener) {

            // set touchstart event on element
            if (browser.touch) {
              element.addEventListener('touchstart', events, false);
            } else {
              element.addEventListener('mousedown', events, false);
            }

            if (browser.transitions) {
              element.addEventListener('webkitTransitionEnd', events, false);
              element.addEventListener('msTransitionEnd', events, false);
              element.addEventListener('oTransitionEnd', events, false);
              element.addEventListener('otransitionend', events, false);
              element.addEventListener('transitionend', events, false);
            }

            // set resize event on window
            window.addEventListener('resize', events, false);

          } else {

            window.onresize = function () { setup(); }; // to play nice with old IE

          }
        };

      }
    });

  })(ionic);

  (function(ionic) {
    'use strict';

    ionic.views.Toggle = ionic.views.View.inherit({
      initialize: function(opts) {
        var self = this;

        this.el = opts.el;
        this.checkbox = opts.checkbox;
        this.track = opts.track;
        this.handle = opts.handle;
        this.openPercent = -1;
        this.onChange = opts.onChange || function() {};

        this.triggerThreshold = opts.triggerThreshold || 20;

        this.dragStartHandler = function(e) {
          self.dragStart(e);
        };
        this.dragHandler = function(e) {
          self.drag(e);
        };
        this.holdHandler = function(e) {
          self.hold(e);
        };
        this.releaseHandler = function(e) {
          self.release(e);
        };

        this.dragStartGesture = ionic.onGesture('dragstart', this.dragStartHandler, this.el);
        this.dragGesture = ionic.onGesture('drag', this.dragHandler, this.el);
        this.dragHoldGesture = ionic.onGesture('hold', this.holdHandler, this.el);
        this.dragReleaseGesture = ionic.onGesture('release', this.releaseHandler, this.el);
      },

      destroy: function() {
        ionic.offGesture(this.dragStartGesture, 'dragstart', this.dragStartGesture);
        ionic.offGesture(this.dragGesture, 'drag', this.dragGesture);
        ionic.offGesture(this.dragHoldGesture, 'hold', this.holdHandler);
        ionic.offGesture(this.dragReleaseGesture, 'release', this.releaseHandler);
      },

      tap: function(e) {
        if(this.el.getAttribute('disabled') !== 'disabled') {
          this.val( !this.checkbox.checked );
        }
      },

      dragStart: function(e) {
        if(this.checkbox.disabled) return;

        this._dragInfo = {
          width: this.el.offsetWidth,
          left: this.el.offsetLeft,
          right: this.el.offsetLeft + this.el.offsetWidth,
          triggerX: this.el.offsetWidth / 2,
          initialState: this.checkbox.checked
        };

        // Stop any parent dragging
        e.gesture.srcEvent.preventDefault();

        // Trigger hold styles
        this.hold(e);
      },

      drag: function(e) {
        var self = this;
        if(!this._dragInfo) { return; }

        // Stop any parent dragging
        e.gesture.srcEvent.preventDefault();

        ionic.requestAnimationFrame(function(amount) {
          if (!self._dragInfo) { return; }

          var slidePageLeft = self.track.offsetLeft + (self.handle.offsetWidth / 2);
          var slidePageRight = self.track.offsetLeft + self.track.offsetWidth - (self.handle.offsetWidth / 2);
          var dx = e.gesture.deltaX;

          var px = e.gesture.touches[0].pageX - self._dragInfo.left;
          var mx = self._dragInfo.width - self.triggerThreshold;

          // The initial state was on, so "tend towards" on
          if(self._dragInfo.initialState) {
            if(px < self.triggerThreshold) {
              self.setOpenPercent(0);
            } else if(px > self._dragInfo.triggerX) {
              self.setOpenPercent(100);
            }
          } else {
            // The initial state was off, so "tend towards" off
            if(px < self._dragInfo.triggerX) {
              self.setOpenPercent(0);
            } else if(px > mx) {
              self.setOpenPercent(100);
            }
          }
        });
      },

      endDrag: function(e) {
        this._dragInfo = null;
      },

      hold: function(e) {
        this.el.classList.add('dragging');
      },
      release: function(e) {
        this.el.classList.remove('dragging');
        this.endDrag(e);
      },


      setOpenPercent: function(openPercent) {
        // only make a change if the new open percent has changed
        if(this.openPercent < 0 || (openPercent < (this.openPercent - 3) || openPercent > (this.openPercent + 3) ) ) {
          this.openPercent = openPercent;

          if(openPercent === 0) {
            this.val(false);
          } else if(openPercent === 100) {
            this.val(true);
          } else {
            var openPixel = Math.round( (openPercent / 100) * this.track.offsetWidth - (this.handle.offsetWidth) );
            openPixel = (openPixel < 1 ? 0 : openPixel);
            this.handle.style[ionic.CSS.TRANSFORM] = 'translate3d(' + openPixel + 'px,0,0)';
          }
        }
      },

      val: function(value) {
        if(value === true || value === false) {
          if(this.handle.style[ionic.CSS.TRANSFORM] !== "") {
            this.handle.style[ionic.CSS.TRANSFORM] = "";
          }
          this.checkbox.checked = value;
          this.openPercent = (value ? 100 : 0);
          this.onChange && this.onChange();
        }
        return this.checkbox.checked;
      }

    });

  })(ionic);

  (function(ionic) {
    'use strict';
    ionic.controllers.ViewController = function(options) {
      this.initialize.apply(this, arguments);
    };

    ionic.controllers.ViewController.inherit = ionic.inherit;

    ionic.extend(ionic.controllers.ViewController.prototype, {
      initialize: function() {},
      // Destroy this view controller, including all child views
      destroy: function() {
      }
    });

  })(window.ionic);

  (function(ionic) {
    'use strict';

    /**
     * The SideMenuController is a controller with a left and/or right menu that
     * can be slid out and toggled. Seen on many an app.
     *
     * The right or left menu can be disabled or not used at all, if desired.
     */
    ionic.controllers.SideMenuController = ionic.controllers.ViewController.inherit({
      initialize: function(options) {
        var self = this;

        this.left = options.left;
        this.right = options.right;
        this.content = options.content;
        this.dragThresholdX = options.dragThresholdX || 10;

        this._rightShowing = false;
        this._leftShowing = false;
        this._isDragging = false;

        if(this.content) {
          this.content.onDrag = function(e) {
            self._handleDrag(e);
          };

          this.content.onEndDrag =function(e) {
            self._endDrag(e);
          };
        }
      },
      /**
       * Set the content view controller if not passed in the constructor options.
       *
       * @param {object} content
       */
      setContent: function(content) {
        var self = this;

        this.content = content;

        this.content.onDrag = function(e) {
          self._handleDrag(e);
        };

        this.content.endDrag = function(e) {
          self._endDrag(e);
        };
      },

      isOpenLeft: function() {
        return this.getOpenAmount() > 0;
      },

      isOpenRight: function() {
        return this.getOpenAmount() < 0;
      },

      /**
       * Toggle the left menu to open 100%
       */
      toggleLeft: function(shouldOpen) {
        var openAmount = this.getOpenAmount();
        if (arguments.length === 0) {
          shouldOpen = openAmount <= 0;
        }
        this.content.enableAnimation();
        if(!shouldOpen) {
          this.openPercentage(0);
        } else {
          this.openPercentage(100);
        }
      },

      /**
       * Toggle the right menu to open 100%
       */
      toggleRight: function(shouldOpen) {
        var openAmount = this.getOpenAmount();
        if (arguments.length === 0) {
          shouldOpen = openAmount >= 0;
        }
        this.content.enableAnimation();
        if(!shouldOpen) {
          this.openPercentage(0);
        } else {
          this.openPercentage(-100);
        }
      },

      /**
       * Close all menus.
       */
      close: function() {
        this.openPercentage(0);
      },

      /**
       * @return {float} The amount the side menu is open, either positive or negative for left (positive), or right (negative)
       */
      getOpenAmount: function() {
        return this.content && this.content.getTranslateX() || 0;
      },

      /**
       * @return {float} The ratio of open amount over menu width. For example, a
       * menu of width 100 open 50 pixels would be open 50% or a ratio of 0.5. Value is negative
       * for right menu.
       */
      getOpenRatio: function() {
        var amount = this.getOpenAmount();
        if(amount >= 0) {
          return amount / this.left.width;
        }
        return amount / this.right.width;
      },

      isOpen: function() {
        return this.getOpenAmount() !== 0;
      },

      /**
       * @return {float} The percentage of open amount over menu width. For example, a
       * menu of width 100 open 50 pixels would be open 50%. Value is negative
       * for right menu.
       */
      getOpenPercentage: function() {
        return this.getOpenRatio() * 100;
      },

      /**
       * Open the menu with a given percentage amount.
       * @param {float} percentage The percentage (positive or negative for left/right) to open the menu.
       */
      openPercentage: function(percentage) {
        var p = percentage / 100;

        if(this.left && percentage >= 0) {
          this.openAmount(this.left.width * p);
        } else if(this.right && percentage < 0) {
          var maxRight = this.right.width;
          this.openAmount(this.right.width * p);
        }

        if(percentage !== 0) {
          document.body.classList.add('menu-open');
        } else {
          document.body.classList.remove('menu-open');
        }
      },

      /**
       * Open the menu the given pixel amount.
       * @param {float} amount the pixel amount to open the menu. Positive value for left menu,
       * negative value for right menu (only one menu will be visible at a time).
       */
      openAmount: function(amount) {
        var maxLeft = this.left && this.left.width || 0;
        var maxRight = this.right && this.right.width || 0;

        // Check if we can move to that side, depending if the left/right panel is enabled
        if(!(this.left && this.left.isEnabled) && amount > 0) {
          this.content.setTranslateX(0);
          return;
        }

        if(!(this.right && this.right.isEnabled) && amount < 0) {
          this.content.setTranslateX(0);
          return;
        }

        if(this._leftShowing && amount > maxLeft) {
          this.content.setTranslateX(maxLeft);
          return;
        }

        if(this._rightShowing && amount < -maxRight) {
          this.content.setTranslateX(-maxRight);
          return;
        }

        this.content.setTranslateX(amount);

        if(amount >= 0) {
          this._leftShowing = true;
          this._rightShowing = false;

          if(amount > 0) {
            // Push the z-index of the right menu down
            this.right && this.right.pushDown && this.right.pushDown();
            // Bring the z-index of the left menu up
            this.left && this.left.bringUp && this.left.bringUp();
          }
        } else {
          this._rightShowing = true;
          this._leftShowing = false;

          // Bring the z-index of the right menu up
          this.right && this.right.bringUp && this.right.bringUp();
          // Push the z-index of the left menu down
          this.left && this.left.pushDown && this.left.pushDown();
        }
      },

      /**
       * Given an event object, find the final resting position of this side
       * menu. For example, if the user "throws" the content to the right and
       * releases the touch, the left menu should snap open (animated, of course).
       *
       * @param {Event} e the gesture event to use for snapping
       */
      snapToRest: function(e) {
        // We want to animate at the end of this
        this.content.enableAnimation();
        this._isDragging = false;

        // Check how much the panel is open after the drag, and
        // what the drag velocity is
        var ratio = this.getOpenRatio();

        if(ratio === 0) {
          // Just to be safe
          this.openPercentage(0);
          return;
        }

        var velocityThreshold = 0.3;
        var velocityX = e.gesture.velocityX;
        var direction = e.gesture.direction;

        // Less than half, going left
        //if(ratio > 0 && ratio < 0.5 && direction == 'left' && velocityX < velocityThreshold) {
        //this.openPercentage(0);
        //}

        // Going right, less than half, too slow (snap back)
        if(ratio > 0 && ratio < 0.5 && direction == 'right' && velocityX < velocityThreshold) {
          this.openPercentage(0);
        }

        // Going left, more than half, too slow (snap back)
        else if(ratio > 0.5 && direction == 'left' && velocityX < velocityThreshold) {
          this.openPercentage(100);
        }

        // Going left, less than half, too slow (snap back)
        else if(ratio < 0 && ratio > -0.5 && direction == 'left' && velocityX < velocityThreshold) {
          this.openPercentage(0);
        }

        // Going right, more than half, too slow (snap back)
        else if(ratio < 0.5 && direction == 'right' && velocityX < velocityThreshold) {
          this.openPercentage(-100);
        }

        // Going right, more than half, or quickly (snap open)
        else if(direction == 'right' && ratio >= 0 && (ratio >= 0.5 || velocityX > velocityThreshold)) {
          this.openPercentage(100);
        }

        // Going left, more than half, or quickly (span open)
        else if(direction == 'left' && ratio <= 0 && (ratio <= -0.5 || velocityX > velocityThreshold)) {
          this.openPercentage(-100);
        }

        // Snap back for safety
        else {
          this.openPercentage(0);
        }
      },

      // End a drag with the given event
      _endDrag: function(e) {
        if(this._isDragging) {
          this.snapToRest(e);
        }
        this._startX = null;
        this._lastX = null;
        this._offsetX = null;
      },

      // Handle a drag event
      _handleDrag: function(e) {

        // If we don't have start coords, grab and store them
        if(!this._startX) {
          this._startX = e.gesture.touches[0].pageX;
          this._lastX = this._startX;
        } else {
          // Grab the current tap coords
          this._lastX = e.gesture.touches[0].pageX;
        }

        // Calculate difference from the tap points
        if(!this._isDragging && Math.abs(this._lastX - this._startX) > this.dragThresholdX) {
          // if the difference is greater than threshold, start dragging using the current
          // point as the starting point
          this._startX = this._lastX;

          this._isDragging = true;
          // Initialize dragging
          this.content.disableAnimation();
          this._offsetX = this.getOpenAmount();
        }

        if(this._isDragging) {
          this.openAmount(this._offsetX + (this._lastX - this._startX));
        }
      }
    });

  })(ionic);

})();
/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/**
 * @license AngularJS v1.2.17
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, document, undefined) {'use strict';

  /**
   * @description
   *
   * This object provides a utility for producing rich Error messages within
   * Angular. It can be called as follows:
   *
   * var exampleMinErr = minErr('example');
   * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
   *
   * The above creates an instance of minErr in the example namespace. The
   * resulting error will have a namespaced error code of example.one.  The
   * resulting error will replace {0} with the value of foo, and {1} with the
   * value of bar. The object is not restricted in the number of arguments it can
   * take.
   *
   * If fewer arguments are specified than necessary for interpolation, the extra
   * interpolation markers will be preserved in the final string.
   *
   * Since data will be parsed statically during a build step, some restrictions
   * are applied with respect to how minErr instances are created and called.
   * Instances should have names of the form namespaceMinErr for a minErr created
   * using minErr('namespace') . Error codes, namespaces and template strings
   * should all be static strings, not variables or general expressions.
   *
   * @param {string} module The namespace to use for the new minErr instance.
   * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
   */

  function minErr(module) {
    return function () {
      var code = arguments[0],
        prefix = '[' + (module ? module + ':' : '') + code + '] ',
        template = arguments[1],
        templateArgs = arguments,
        stringify = function (obj) {
          if (typeof obj === 'function') {
            return obj.toString().replace(/ \{[\s\S]*$/, '');
          } else if (typeof obj === 'undefined') {
            return 'undefined';
          } else if (typeof obj !== 'string') {
            return JSON.stringify(obj);
          }
          return obj;
        },
        message, i;

      message = prefix + template.replace(/\{\d+\}/g, function (match) {
        var index = +match.slice(1, -1), arg;

        if (index + 2 < templateArgs.length) {
          arg = templateArgs[index + 2];
          if (typeof arg === 'function') {
            return arg.toString().replace(/ ?\{[\s\S]*$/, '');
          } else if (typeof arg === 'undefined') {
            return 'undefined';
          } else if (typeof arg !== 'string') {
            return toJson(arg);
          }
          return arg;
        }
        return match;
      });

      message = message + '\nhttp://errors.angularjs.org/1.2.17/' +
        (module ? module + '/' : '') + code;
      for (i = 2; i < arguments.length; i++) {
        message = message + (i == 2 ? '?' : '&') + 'p' + (i-2) + '=' +
          encodeURIComponent(stringify(arguments[i]));
      }

      return new Error(message);
    };
  }

  /* We need to tell jshint what variables are being exported */
  /* global
   -angular,
   -msie,
   -jqLite,
   -jQuery,
   -slice,
   -push,
   -toString,
   -ngMinErr,
   -angularModule,
   -nodeName_,
   -uid,

   -lowercase,
   -uppercase,
   -manualLowercase,
   -manualUppercase,
   -nodeName_,
   -isArrayLike,
   -forEach,
   -sortedKeys,
   -forEachSorted,
   -reverseParams,
   -nextUid,
   -setHashKey,
   -extend,
   -int,
   -inherit,
   -noop,
   -identity,
   -valueFn,
   -isUndefined,
   -isDefined,
   -isObject,
   -isString,
   -isNumber,
   -isDate,
   -isArray,
   -isFunction,
   -isRegExp,
   -isWindow,
   -isScope,
   -isFile,
   -isBlob,
   -isBoolean,
   -trim,
   -isElement,
   -makeMap,
   -map,
   -size,
   -includes,
   -indexOf,
   -arrayRemove,
   -isLeafNode,
   -copy,
   -shallowCopy,
   -equals,
   -csp,
   -concat,
   -sliceArgs,
   -bind,
   -toJsonReplacer,
   -toJson,
   -fromJson,
   -toBoolean,
   -startingTag,
   -tryDecodeURIComponent,
   -parseKeyValue,
   -toKeyValue,
   -encodeUriSegment,
   -encodeUriQuery,
   -angularInit,
   -bootstrap,
   -snake_case,
   -bindJQuery,
   -assertArg,
   -assertArgFn,
   -assertNotHasOwnProperty,
   -getter,
   -getBlockElements,
   -hasOwnProperty,

   */

////////////////////////////////////

  /**
   * @ngdoc module
   * @name ng
   * @module ng
   * @description
   *
   * # ng (core module)
   * The ng module is loaded by default when an AngularJS application is started. The module itself
   * contains the essential components for an AngularJS application to function. The table below
   * lists a high level breakdown of each of the services/factories, filters, directives and testing
   * components available within this core module.
   *
   * <div doc-module-components="ng"></div>
   */

  /**
   * @ngdoc function
   * @name angular.lowercase
   * @module ng
   * @kind function
   *
   * @description Converts the specified string to lowercase.
   * @param {string} string String to be converted to lowercase.
   * @returns {string} Lowercased string.
   */
  var lowercase = function(string){return isString(string) ? string.toLowerCase() : string;};
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  /**
   * @ngdoc function
   * @name angular.uppercase
   * @module ng
   * @kind function
   *
   * @description Converts the specified string to uppercase.
   * @param {string} string String to be converted to uppercase.
   * @returns {string} Uppercased string.
   */
  var uppercase = function(string){return isString(string) ? string.toUpperCase() : string;};


  var manualLowercase = function(s) {
    /* jshint bitwise: false */
    return isString(s)
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
      : s;
  };
  var manualUppercase = function(s) {
    /* jshint bitwise: false */
    return isString(s)
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
      : s;
  };


// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives.
  if ('i' !== 'I'.toLowerCase()) {
    lowercase = manualLowercase;
    uppercase = manualUppercase;
  }


  var /** holds major version number for IE or NaN for real browsers */
    msie,
    jqLite,           // delay binding since jQuery could be loaded after us.
    jQuery,           // delay binding
    slice             = [].slice,
    push              = [].push,
    toString          = Object.prototype.toString,
    ngMinErr          = minErr('ng'),

    /** @name angular */
    angular           = window.angular || (window.angular = {}),
    angularModule,
    nodeName_,
    uid               = ['0', '0', '0'];

  /**
   * IE 11 changed the format of the UserAgent string.
   * See http://msdn.microsoft.com/en-us/library/ms537503.aspx
   */
  msie = int((/msie (\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
  if (isNaN(msie)) {
    msie = int((/trident\/.*; rv:(\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
  }


  /**
   * @private
   * @param {*} obj
   * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
   *                   String ...)
   */
  function isArrayLike(obj) {
    if (obj == null || isWindow(obj)) {
      return false;
    }

    var length = obj.length;

    if (obj.nodeType === 1 && length) {
      return true;
    }

    return isString(obj) || isArray(obj) || length === 0 ||
      typeof length === 'number' && length > 0 && (length - 1) in obj;
  }

  /**
   * @ngdoc function
   * @name angular.forEach
   * @module ng
   * @kind function
   *
   * @description
   * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
   * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`
   * is the value of an object property or an array element and `key` is the object property key or
   * array element index. Specifying a `context` for the function is optional.
   *
   * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
   * using the `hasOwnProperty` method.
   *
   ```js
   var values = {name: 'misko', gender: 'male'};
   var log = [];
   angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
   expect(log).toEqual(['name: misko', 'gender: male']);
   ```
   *
   * @param {Object|Array} obj Object to iterate over.
   * @param {Function} iterator Iterator function.
   * @param {Object=} context Object to become context (`this`) for the iterator function.
   * @returns {Object|Array} Reference to `obj`.
   */
  function forEach(obj, iterator, context) {
    var key;
    if (obj) {
      if (isFunction(obj)) {
        for (key in obj) {
          // Need to check if hasOwnProperty exists,
          // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
          if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
            iterator.call(context, obj[key], key);
          }
        }
      } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context);
      } else if (isArrayLike(obj)) {
        for (key = 0; key < obj.length; key++)
          iterator.call(context, obj[key], key);
      } else {
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            iterator.call(context, obj[key], key);
          }
        }
      }
    }
    return obj;
  }

  function sortedKeys(obj) {
    var keys = [];
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        keys.push(key);
      }
    }
    return keys.sort();
  }

  function forEachSorted(obj, iterator, context) {
    var keys = sortedKeys(obj);
    for ( var i = 0; i < keys.length; i++) {
      iterator.call(context, obj[keys[i]], keys[i]);
    }
    return keys;
  }


  /**
   * when using forEach the params are value, key, but it is often useful to have key, value.
   * @param {function(string, *)} iteratorFn
   * @returns {function(*, string)}
   */
  function reverseParams(iteratorFn) {
    return function(value, key) { iteratorFn(key, value); };
  }

  /**
   * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric
   * characters such as '012ABC'. The reason why we are not using simply a number counter is that
   * the number string gets longer over time, and it can also overflow, where as the nextId
   * will grow much slower, it is a string, and it will never overflow.
   *
   * @returns {string} an unique alpha-numeric string
   */
  function nextUid() {
    var index = uid.length;
    var digit;

    while(index) {
      index--;
      digit = uid[index].charCodeAt(0);
      if (digit == 57 /*'9'*/) {
        uid[index] = 'A';
        return uid.join('');
      }
      if (digit == 90  /*'Z'*/) {
        uid[index] = '0';
      } else {
        uid[index] = String.fromCharCode(digit + 1);
        return uid.join('');
      }
    }
    uid.unshift('0');
    return uid.join('');
  }


  /**
   * Set or clear the hashkey for an object.
   * @param obj object
   * @param h the hashkey (!truthy to delete the hashkey)
   */
  function setHashKey(obj, h) {
    if (h) {
      obj.$$hashKey = h;
    }
    else {
      delete obj.$$hashKey;
    }
  }

  /**
   * @ngdoc function
   * @name angular.extend
   * @module ng
   * @kind function
   *
   * @description
   * Extends the destination object `dst` by copying all of the properties from the `src` object(s)
   * to `dst`. You can specify multiple `src` objects.
   *
   * @param {Object} dst Destination object.
   * @param {...Object} src Source object(s).
   * @returns {Object} Reference to `dst`.
   */
  function extend(dst) {
    var h = dst.$$hashKey;
    forEach(arguments, function(obj) {
      if (obj !== dst) {
        forEach(obj, function(value, key) {
          dst[key] = value;
        });
      }
    });

    setHashKey(dst,h);
    return dst;
  }

  function int(str) {
    return parseInt(str, 10);
  }


  function inherit(parent, extra) {
    return extend(new (extend(function() {}, {prototype:parent}))(), extra);
  }

  /**
   * @ngdoc function
   * @name angular.noop
   * @module ng
   * @kind function
   *
   * @description
   * A function that performs no operations. This function can be useful when writing code in the
   * functional style.
   ```js
   function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
   */
  function noop() {}
  noop.$inject = [];


  /**
   * @ngdoc function
   * @name angular.identity
   * @module ng
   * @kind function
   *
   * @description
   * A function that returns its first argument. This function is useful when writing code in the
   * functional style.
   *
   ```js
   function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   ```
   */
  function identity($) {return $;}
  identity.$inject = [];


  function valueFn(value) {return function() {return value;};}

  /**
   * @ngdoc function
   * @name angular.isUndefined
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is undefined.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is undefined.
   */
  function isUndefined(value){return typeof value === 'undefined';}


  /**
   * @ngdoc function
   * @name angular.isDefined
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is defined.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is defined.
   */
  function isDefined(value){return typeof value !== 'undefined';}


  /**
   * @ngdoc function
   * @name angular.isObject
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
   * considered to be objects. Note that JavaScript arrays are objects.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is an `Object` but not `null`.
   */
  function isObject(value){return value != null && typeof value === 'object';}


  /**
   * @ngdoc function
   * @name angular.isString
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a `String`.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `String`.
   */
  function isString(value){return typeof value === 'string';}


  /**
   * @ngdoc function
   * @name angular.isNumber
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a `Number`.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `Number`.
   */
  function isNumber(value){return typeof value === 'number';}


  /**
   * @ngdoc function
   * @name angular.isDate
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a value is a date.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `Date`.
   */
  function isDate(value) {
    return toString.call(value) === '[object Date]';
  }


  /**
   * @ngdoc function
   * @name angular.isArray
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is an `Array`.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is an `Array`.
   */
  function isArray(value) {
    return toString.call(value) === '[object Array]';
  }


  /**
   * @ngdoc function
   * @name angular.isFunction
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a `Function`.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `Function`.
   */
  function isFunction(value){return typeof value === 'function';}


  /**
   * Determines if a value is a regular expression object.
   *
   * @private
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `RegExp`.
   */
  function isRegExp(value) {
    return toString.call(value) === '[object RegExp]';
  }


  /**
   * Checks if `obj` is a window object.
   *
   * @private
   * @param {*} obj Object to check
   * @returns {boolean} True if `obj` is a window obj.
   */
  function isWindow(obj) {
    return obj && obj.document && obj.location && obj.alert && obj.setInterval;
  }


  function isScope(obj) {
    return obj && obj.$evalAsync && obj.$watch;
  }


  function isFile(obj) {
    return toString.call(obj) === '[object File]';
  }


  function isBlob(obj) {
    return toString.call(obj) === '[object Blob]';
  }


  function isBoolean(value) {
    return typeof value === 'boolean';
  }


  var trim = (function() {
    // native trim is way faster: http://jsperf.com/angular-trim-test
    // but IE doesn't have it... :-(
    // TODO: we should move this into IE/ES5 polyfill
    if (!String.prototype.trim) {
      return function(value) {
        return isString(value) ? value.replace(/^\s\s*/, '').replace(/\s\s*$/, '') : value;
      };
    }
    return function(value) {
      return isString(value) ? value.trim() : value;
    };
  })();


  /**
   * @ngdoc function
   * @name angular.isElement
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a DOM element (or wrapped jQuery element).
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
   */
  function isElement(node) {
    return !!(node &&
      (node.nodeName  // we are a direct element
        || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
  }

  /**
   * @param str 'key1,key2,...'
   * @returns {object} in the form of {key1:true, key2:true, ...}
   */
  function makeMap(str) {
    var obj = {}, items = str.split(","), i;
    for ( i = 0; i < items.length; i++ )
      obj[ items[i] ] = true;
    return obj;
  }


  if (msie < 9) {
    nodeName_ = function(element) {
      element = element.nodeName ? element : element[0];
      return (element.scopeName && element.scopeName != 'HTML')
        ? uppercase(element.scopeName + ':' + element.nodeName) : element.nodeName;
    };
  } else {
    nodeName_ = function(element) {
      return element.nodeName ? element.nodeName : element[0].nodeName;
    };
  }


  function map(obj, iterator, context) {
    var results = [];
    forEach(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  }


  /**
   * @description
   * Determines the number of elements in an array, the number of properties an object has, or
   * the length of a string.
   *
   * Note: This function is used to augment the Object type in Angular expressions. See
   * {@link angular.Object} for more information about Angular arrays.
   *
   * @param {Object|Array|string} obj Object, array, or string to inspect.
   * @param {boolean} [ownPropsOnly=false] Count only "own" properties in an object
   * @returns {number} The size of `obj` or `0` if `obj` is neither an object nor an array.
   */
  function size(obj, ownPropsOnly) {
    var count = 0, key;

    if (isArray(obj) || isString(obj)) {
      return obj.length;
    } else if (isObject(obj)) {
      for (key in obj)
        if (!ownPropsOnly || obj.hasOwnProperty(key))
          count++;
    }

    return count;
  }


  function includes(array, obj) {
    return indexOf(array, obj) != -1;
  }

  function indexOf(array, obj) {
    if (array.indexOf) return array.indexOf(obj);

    for (var i = 0; i < array.length; i++) {
      if (obj === array[i]) return i;
    }
    return -1;
  }

  function arrayRemove(array, value) {
    var index = indexOf(array, value);
    if (index >=0)
      array.splice(index, 1);
    return value;
  }

  function isLeafNode (node) {
    if (node) {
      switch (node.nodeName) {
        case "OPTION":
        case "PRE":
        case "TITLE":
          return true;
      }
    }
    return false;
  }

  /**
   * @ngdoc function
   * @name angular.copy
   * @module ng
   * @kind function
   *
   * @description
   * Creates a deep copy of `source`, which should be an object or an array.
   *
   * * If no destination is supplied, a copy of the object or array is created.
   * * If a destination is provided, all of its elements (for array) or properties (for objects)
   *   are deleted and then all elements/properties from the source are copied to it.
   * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
   * * If `source` is identical to 'destination' an exception will be thrown.
   *
   * @param {*} source The source that will be used to make a copy.
   *                   Can be any type, including primitives, `null`, and `undefined`.
   * @param {(Object|Array)=} destination Destination into which the source is copied. If
   *     provided, must be of the same type as `source`.
   * @returns {*} The copy or updated `destination`, if `destination` was specified.
   *
   * @example
   <example>
   <file name="index.html">
   <div ng-controller="Controller">
   <form novalidate class="simple-form">
   Name: <input type="text" ng-model="user.name" /><br />
   E-mail: <input type="email" ng-model="user.email" /><br />
   Gender: <input type="radio" ng-model="user.gender" value="male" />male
   <input type="radio" ng-model="user.gender" value="female" />female<br />
   <button ng-click="reset()">RESET</button>
   <button ng-click="update(user)">SAVE</button>
   </form>
   <pre>form = {{user | json}}</pre>
   <pre>master = {{master | json}}</pre>
   </div>

   <script>
   function Controller($scope) {
    $scope.master= {};

    $scope.update = function(user) {
      // Example with 1 argument
      $scope.master= angular.copy(user);
    };

    $scope.reset = function() {
      // Example with 2 arguments
      angular.copy($scope.master, $scope.user);
    };

    $scope.reset();
  }
   </script>
   </file>
   </example>
   */
  function copy(source, destination, stackSource, stackDest) {
    if (isWindow(source) || isScope(source)) {
      throw ngMinErr('cpws',
        "Can't copy! Making copies of Window or Scope instances is not supported.");
    }

    if (!destination) {
      destination = source;
      if (source) {
        if (isArray(source)) {
          destination = copy(source, [], stackSource, stackDest);
        } else if (isDate(source)) {
          destination = new Date(source.getTime());
        } else if (isRegExp(source)) {
          destination = new RegExp(source.source);
        } else if (isObject(source)) {
          destination = copy(source, {}, stackSource, stackDest);
        }
      }
    } else {
      if (source === destination) throw ngMinErr('cpi',
        "Can't copy! Source and destination are identical.");

      stackSource = stackSource || [];
      stackDest = stackDest || [];

      if (isObject(source)) {
        var index = indexOf(stackSource, source);
        if (index !== -1) return stackDest[index];

        stackSource.push(source);
        stackDest.push(destination);
      }

      var result;
      if (isArray(source)) {
        destination.length = 0;
        for ( var i = 0; i < source.length; i++) {
          result = copy(source[i], null, stackSource, stackDest);
          if (isObject(source[i])) {
            stackSource.push(source[i]);
            stackDest.push(result);
          }
          destination.push(result);
        }
      } else {
        var h = destination.$$hashKey;
        forEach(destination, function(value, key) {
          delete destination[key];
        });
        for ( var key in source) {
          result = copy(source[key], null, stackSource, stackDest);
          if (isObject(source[key])) {
            stackSource.push(source[key]);
            stackDest.push(result);
          }
          destination[key] = result;
        }
        setHashKey(destination,h);
      }

    }
    return destination;
  }

  /**
   * Creates a shallow copy of an object, an array or a primitive
   */
  function shallowCopy(src, dst) {
    if (isArray(src)) {
      dst = dst || [];

      for ( var i = 0; i < src.length; i++) {
        dst[i] = src[i];
      }
    } else if (isObject(src)) {
      dst = dst || {};

      for (var key in src) {
        if (hasOwnProperty.call(src, key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
          dst[key] = src[key];
        }
      }
    }

    return dst || src;
  }


  /**
   * @ngdoc function
   * @name angular.equals
   * @module ng
   * @kind function
   *
   * @description
   * Determines if two objects or two values are equivalent. Supports value types, regular
   * expressions, arrays and objects.
   *
   * Two objects or values are considered equivalent if at least one of the following is true:
   *
   * * Both objects or values pass `===` comparison.
   * * Both objects or values are of the same type and all of their properties are equal by
   *   comparing them with `angular.equals`.
   * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
   * * Both values represent the same regular expression (In JavaScript,
   *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
   *   representation matches).
   *
   * During a property comparison, properties of `function` type and properties with names
   * that begin with `$` are ignored.
   *
   * Scope and DOMWindow objects are being compared only by identify (`===`).
   *
   * @param {*} o1 Object or value to compare.
   * @param {*} o2 Object or value to compare.
   * @returns {boolean} True if arguments are equal.
   */
  function equals(o1, o2) {
    if (o1 === o2) return true;
    if (o1 === null || o2 === null) return false;
    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
    var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
    if (t1 == t2) {
      if (t1 == 'object') {
        if (isArray(o1)) {
          if (!isArray(o2)) return false;
          if ((length = o1.length) == o2.length) {
            for(key=0; key<length; key++) {
              if (!equals(o1[key], o2[key])) return false;
            }
            return true;
          }
        } else if (isDate(o1)) {
          return isDate(o2) && o1.getTime() == o2.getTime();
        } else if (isRegExp(o1) && isRegExp(o2)) {
          return o1.toString() == o2.toString();
        } else {
          if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2)) return false;
          keySet = {};
          for(key in o1) {
            if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
            if (!equals(o1[key], o2[key])) return false;
            keySet[key] = true;
          }
          for(key in o2) {
            if (!keySet.hasOwnProperty(key) &&
              key.charAt(0) !== '$' &&
              o2[key] !== undefined &&
              !isFunction(o2[key])) return false;
          }
          return true;
        }
      }
    }
    return false;
  }


  function csp() {
    return (document.securityPolicy && document.securityPolicy.isActive) ||
      (document.querySelector &&
        !!(document.querySelector('[ng-csp]') || document.querySelector('[data-ng-csp]')));
  }


  function concat(array1, array2, index) {
    return array1.concat(slice.call(array2, index));
  }

  function sliceArgs(args, startIndex) {
    return slice.call(args, startIndex || 0);
  }


  /* jshint -W101 */
  /**
   * @ngdoc function
   * @name angular.bind
   * @module ng
   * @kind function
   *
   * @description
   * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
   * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
   * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
   * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
   *
   * @param {Object} self Context which `fn` should be evaluated in.
   * @param {function()} fn Function to be bound.
   * @param {...*} args Optional arguments to be prebound to the `fn` function call.
   * @returns {function()} Function that wraps the `fn` with all the specified bindings.
   */
  /* jshint +W101 */
  function bind(self, fn) {
    var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
    if (isFunction(fn) && !(fn instanceof RegExp)) {
      return curryArgs.length
        ? function() {
        return arguments.length
          ? fn.apply(self, curryArgs.concat(slice.call(arguments, 0)))
          : fn.apply(self, curryArgs);
      }
        : function() {
        return arguments.length
          ? fn.apply(self, arguments)
          : fn.call(self);
      };
    } else {
      // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
      return fn;
    }
  }


  function toJsonReplacer(key, value) {
    var val = value;

    if (typeof key === 'string' && key.charAt(0) === '$') {
      val = undefined;
    } else if (isWindow(value)) {
      val = '$WINDOW';
    } else if (value &&  document === value) {
      val = '$DOCUMENT';
    } else if (isScope(value)) {
      val = '$SCOPE';
    }

    return val;
  }


  /**
   * @ngdoc function
   * @name angular.toJson
   * @module ng
   * @kind function
   *
   * @description
   * Serializes input into a JSON-formatted string. Properties with leading $ characters will be
   * stripped since angular uses this notation internally.
   *
   * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
   * @param {boolean=} pretty If set to true, the JSON output will contain newlines and whitespace.
   * @returns {string|undefined} JSON-ified string representing `obj`.
   */
  function toJson(obj, pretty) {
    if (typeof obj === 'undefined') return undefined;
    return JSON.stringify(obj, toJsonReplacer, pretty ? '  ' : null);
  }


  /**
   * @ngdoc function
   * @name angular.fromJson
   * @module ng
   * @kind function
   *
   * @description
   * Deserializes a JSON string.
   *
   * @param {string} json JSON string to deserialize.
   * @returns {Object|Array|string|number} Deserialized thingy.
   */
  function fromJson(json) {
    return isString(json)
      ? JSON.parse(json)
      : json;
  }


  function toBoolean(value) {
    if (typeof value === 'function') {
      value = true;
    } else if (value && value.length !== 0) {
      var v = lowercase("" + value);
      value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
    } else {
      value = false;
    }
    return value;
  }

  /**
   * @returns {string} Returns the string representation of the element.
   */
  function startingTag(element) {
    element = jqLite(element).clone();
    try {
      // turns out IE does not let you set .html() on elements which
      // are not allowed to have children. So we just ignore it.
      element.empty();
    } catch(e) {}
    // As Per DOM Standards
    var TEXT_NODE = 3;
    var elemHtml = jqLite('<div>').append(element).html();
    try {
      return element[0].nodeType === TEXT_NODE ? lowercase(elemHtml) :
        elemHtml.
          match(/^(<[^>]+>)/)[1].
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });
    } catch(e) {
      return lowercase(elemHtml);
    }

  }


/////////////////////////////////////////////////

  /**
   * Tries to decode the URI component without throwing an exception.
   *
   * @private
   * @param str value potential URI component to check.
   * @returns {boolean} True if `value` can be decoded
   * with the decodeURIComponent function.
   */
  function tryDecodeURIComponent(value) {
    try {
      return decodeURIComponent(value);
    } catch(e) {
      // Ignore any invalid uri component
    }
  }


  /**
   * Parses an escaped url query string into key-value pairs.
   * @returns {Object.<string,boolean|Array>}
   */
  function parseKeyValue(/**string*/keyValue) {
    var obj = {}, key_value, key;
    forEach((keyValue || "").split('&'), function(keyValue) {
      if ( keyValue ) {
        key_value = keyValue.split('=');
        key = tryDecodeURIComponent(key_value[0]);
        if ( isDefined(key) ) {
          var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
          if (!obj[key]) {
            obj[key] = val;
          } else if(isArray(obj[key])) {
            obj[key].push(val);
          } else {
            obj[key] = [obj[key],val];
          }
        }
      }
    });
    return obj;
  }

  function toKeyValue(obj) {
    var parts = [];
    forEach(obj, function(value, key) {
      if (isArray(value)) {
        forEach(value, function(arrayValue) {
          parts.push(encodeUriQuery(key, true) +
            (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
        });
      } else {
        parts.push(encodeUriQuery(key, true) +
          (value === true ? '' : '=' + encodeUriQuery(value, true)));
      }
    });
    return parts.length ? parts.join('&') : '';
  }


  /**
   * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
   * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
   * segments:
   *    segment       = *pchar
   *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
   *    pct-encoded   = "%" HEXDIG HEXDIG
   *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
   *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
   *                     / "*" / "+" / "," / ";" / "="
   */
  function encodeUriSegment(val) {
    return encodeUriQuery(val, true).
      replace(/%26/gi, '&').
      replace(/%3D/gi, '=').
      replace(/%2B/gi, '+');
  }


  /**
   * This method is intended for encoding *key* or *value* parts of query component. We need a custom
   * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
   * encoded per http://tools.ietf.org/html/rfc3986:
   *    query       = *( pchar / "/" / "?" )
   *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
   *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
   *    pct-encoded   = "%" HEXDIG HEXDIG
   *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
   *                     / "*" / "+" / "," / ";" / "="
   */
  function encodeUriQuery(val, pctEncodeSpaces) {
    return encodeURIComponent(val).
      replace(/%40/gi, '@').
      replace(/%3A/gi, ':').
      replace(/%24/g, '$').
      replace(/%2C/gi, ',').
      replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
  }


  /**
   * @ngdoc directive
   * @name ngApp
   * @module ng
   *
   * @element ANY
   * @param {angular.Module} ngApp an optional application
   *   {@link angular.module module} name to load.
   *
   * @description
   *
   * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
   * designates the **root element** of the application and is typically placed near the root element
   * of the page - e.g. on the `<body>` or `<html>` tags.
   *
   * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
   * found in the document will be used to define the root element to auto-bootstrap as an
   * application. To run multiple applications in an HTML document you must manually bootstrap them using
   * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
   *
   * You can specify an **AngularJS module** to be used as the root module for the application.  This
   * module will be loaded into the {@link auto.$injector} when the application is bootstrapped and
   * should contain the application code needed or have dependencies on other modules that will
   * contain the code. See {@link angular.module} for more information.
   *
   * In the example below if the `ngApp` directive were not placed on the `html` element then the
   * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
   * would not be resolved to `3`.
   *
   * `ngApp` is the easiest, and most common, way to bootstrap an application.
   *
   <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
   I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
   </example>
   *
   */
  function angularInit(element, bootstrap) {
    var elements = [element],
      appElement,
      module,
      names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],
      NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;

    function append(element) {
      element && elements.push(element);
    }

    forEach(names, function(name) {
      names[name] = true;
      append(document.getElementById(name));
      name = name.replace(':', '\\:');
      if (element.querySelectorAll) {
        forEach(element.querySelectorAll('.' + name), append);
        forEach(element.querySelectorAll('.' + name + '\\:'), append);
        forEach(element.querySelectorAll('[' + name + ']'), append);
      }
    });

    forEach(elements, function(element) {
      if (!appElement) {
        var className = ' ' + element.className + ' ';
        var match = NG_APP_CLASS_REGEXP.exec(className);
        if (match) {
          appElement = element;
          module = (match[2] || '').replace(/\s+/g, ',');
        } else {
          forEach(element.attributes, function(attr) {
            if (!appElement && names[attr.name]) {
              appElement = element;
              module = attr.value;
            }
          });
        }
      }
    });
    if (appElement) {
      bootstrap(appElement, module ? [module] : []);
    }
  }

  /**
   * @ngdoc function
   * @name angular.bootstrap
   * @module ng
   * @description
   * Use this function to manually start up angular application.
   *
   * See: {@link guide/bootstrap Bootstrap}
   *
   * Note that ngScenario-based end-to-end tests cannot use this function to bootstrap manually.
   * They must use {@link ng.directive:ngApp ngApp}.
   *
   * Angular will detect if it has been loaded into the browser more than once and only allow the
   * first loaded script to be bootstrapped and will report a warning to the browser console for
   * each of the subsequent scripts.   This prevents strange results in applications, where otherwise
   * multiple instances of Angular try to work on the DOM.
   *
   * <example name="multi-bootstrap" module="multi-bootstrap">
   * <file name="index.html">
   * <script src="../../../angular.js"></script>
   * <div ng-controller="BrokenTable">
   *   <table>
   *   <tr>
   *     <th ng-repeat="heading in headings">{{heading}}</th>
   *   </tr>
   *   <tr ng-repeat="filling in fillings">
   *     <td ng-repeat="fill in filling">{{fill}}</td>
   *   </tr>
   * </table>
   * </div>
   * </file>
   * <file name="controller.js">
   * var app = angular.module('multi-bootstrap', [])
   *
   * .controller('BrokenTable', function($scope) {
 *     $scope.headings = ['One', 'Two', 'Three'];
 *     $scope.fillings = [[1, 2, 3], ['A', 'B', 'C'], [7, 8, 9]];
 * });
   * </file>
   * <file name="protractor.js" type="protractor">
   * it('should only insert one table cell for each item in $scope.fillings', function() {
 *  expect(element.all(by.css('td')).count())
 *      .toBe(9);
 * });
   * </file>
   * </example>
   *
   * @param {DOMElement} element DOM element which is the root of angular application.
   * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
   *     Each item in the array should be the name of a predefined module or a (DI annotated)
   *     function that will be invoked by the injector as a run block.
   *     See: {@link angular.module modules}
   * @returns {auto.$injector} Returns the newly created injector for this app.
   */
  function bootstrap(element, modules) {
    var doBootstrap = function() {
      element = jqLite(element);

      if (element.injector()) {
        var tag = (element[0] === document) ? 'document' : startingTag(element);
        throw ngMinErr('btstrpd', "App Already Bootstrapped with this Element '{0}'", tag);
      }

      modules = modules || [];
      modules.unshift(['$provide', function($provide) {
        $provide.value('$rootElement', element);
      }]);
      modules.unshift('ng');
      var injector = createInjector(modules);
      injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector', '$animate',
          function(scope, element, compile, injector, animate) {
            scope.$apply(function() {
              element.data('$injector', injector);
              compile(element)(scope);
            });
          }]
      );
      return injector;
    };

    var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

    if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
      return doBootstrap();
    }

    window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
    angular.resumeBootstrap = function(extraModules) {
      forEach(extraModules, function(module) {
        modules.push(module);
      });
      doBootstrap();
    };
  }

  var SNAKE_CASE_REGEXP = /[A-Z]/g;
  function snake_case(name, separator) {
    separator = separator || '_';
    return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }

  function bindJQuery() {
    // bind to jQuery if present;
    jQuery = window.jQuery;
    // Use jQuery if it exists with proper functionality, otherwise default to us.
    // Angular 1.2+ requires jQuery 1.7.1+ for on()/off() support.
    if (jQuery && jQuery.fn.on) {
      jqLite = jQuery;
      extend(jQuery.fn, {
        scope: JQLitePrototype.scope,
        isolateScope: JQLitePrototype.isolateScope,
        controller: JQLitePrototype.controller,
        injector: JQLitePrototype.injector,
        inheritedData: JQLitePrototype.inheritedData
      });
      // Method signature:
      //     jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments)
      jqLitePatchJQueryRemove('remove', true, true, false);
      jqLitePatchJQueryRemove('empty', false, false, false);
      jqLitePatchJQueryRemove('html', false, false, true);
    } else {
      jqLite = JQLite;
    }
    angular.element = jqLite;
  }

  /**
   * throw error if the argument is falsy.
   */
  function assertArg(arg, name, reason) {
    if (!arg) {
      throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
    }
    return arg;
  }

  function assertArgFn(arg, name, acceptArrayAnnotation) {
    if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
    }

    assertArg(isFunction(arg), name, 'not a function, got ' +
      (arg && typeof arg == 'object' ? arg.constructor.name || 'Object' : typeof arg));
    return arg;
  }

  /**
   * throw error if the name given is hasOwnProperty
   * @param  {String} name    the name to test
   * @param  {String} context the context in which the name is used, such as module or directive
   */
  function assertNotHasOwnProperty(name, context) {
    if (name === 'hasOwnProperty') {
      throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
    }
  }

  /**
   * Return the value accessible from the object by path. Any undefined traversals are ignored
   * @param {Object} obj starting object
   * @param {String} path path to traverse
   * @param {boolean} [bindFnToScope=true]
   * @returns {Object} value as accessible by path
   */
//TODO(misko): this function needs to be removed
  function getter(obj, path, bindFnToScope) {
    if (!path) return obj;
    var keys = path.split('.');
    var key;
    var lastInstance = obj;
    var len = keys.length;

    for (var i = 0; i < len; i++) {
      key = keys[i];
      if (obj) {
        obj = (lastInstance = obj)[key];
      }
    }
    if (!bindFnToScope && isFunction(obj)) {
      return bind(lastInstance, obj);
    }
    return obj;
  }

  /**
   * Return the DOM siblings between the first and last node in the given array.
   * @param {Array} array like object
   * @returns {DOMElement} object containing the elements
   */
  function getBlockElements(nodes) {
    var startNode = nodes[0],
      endNode = nodes[nodes.length - 1];
    if (startNode === endNode) {
      return jqLite(startNode);
    }

    var element = startNode;
    var elements = [element];

    do {
      element = element.nextSibling;
      if (!element) break;
      elements.push(element);
    } while (element !== endNode);

    return jqLite(elements);
  }

  /**
   * @ngdoc type
   * @name angular.Module
   * @module ng
   * @description
   *
   * Interface for configuring angular {@link angular.module modules}.
   */

  function setupModuleLoader(window) {

    var $injectorMinErr = minErr('$injector');
    var ngMinErr = minErr('ng');

    function ensure(obj, name, factory) {
      return obj[name] || (obj[name] = factory());
    }

    var angular = ensure(window, 'angular', Object);

    // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
    angular.$$minErr = angular.$$minErr || minErr;

    return ensure(angular, 'module', function() {
      /** @type {Object.<string, angular.Module>} */
      var modules = {};

      /**
       * @ngdoc function
       * @name angular.module
       * @module ng
       * @description
       *
       * The `angular.module` is a global place for creating, registering and retrieving Angular
       * modules.
       * All modules (angular core or 3rd party) that should be available to an application must be
       * registered using this mechanism.
       *
       * When passed two or more arguments, a new module is created.  If passed only one argument, an
       * existing module (the name passed as the first argument to `module`) is retrieved.
       *
       *
       * # Module
       *
       * A module is a collection of services, directives, filters, and configuration information.
       * `angular.module` is used to configure the {@link auto.$injector $injector}.
       *
       * ```js
       * // Create a new module
       * var myModule = angular.module('myModule', []);
       *
       * // register a new service
       * myModule.value('appName', 'MyCoolApp');
       *
       * // configure existing services inside initialization blocks.
       * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
       * ```
       *
       * Then you can create an injector and load your modules like this:
       *
       * ```js
       * var injector = angular.injector(['ng', 'myModule'])
       * ```
       *
       * However it's more likely that you'll just use
       * {@link ng.directive:ngApp ngApp} or
       * {@link angular.bootstrap} to simplify this process for you.
       *
       * @param {!string} name The name of the module to create or retrieve.
       <<<<<* @param {!Array.<string>=} requires If specified then new module is being created. If
       >>>>>*        unspecified then the module is being retrieved for further configuration.
       * @param {Function} configFn Optional configuration function for the module. Same as
       *        {@link angular.Module#config Module#config()}.
       * @returns {module} new module with the {@link angular.Module} api.
       */
      return function module(name, requires, configFn) {
        var assertNotHasOwnProperty = function(name, context) {
          if (name === 'hasOwnProperty') {
            throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
          }
        };

        assertNotHasOwnProperty(name, 'module');
        if (requires && modules.hasOwnProperty(name)) {
          modules[name] = null;
        }
        return ensure(modules, name, function() {
          if (!requires) {
            throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
              "the module name or forgot to load it. If registering a module ensure that you " +
              "specify the dependencies as the second argument.", name);
          }

          /** @type {!Array.<Array.<*>>} */
          var invokeQueue = [];

          /** @type {!Array.<Function>} */
          var runBlocks = [];

          var config = invokeLater('$injector', 'invoke');

          /** @type {angular.Module} */
          var moduleInstance = {
            // Private state
            _invokeQueue: invokeQueue,
            _runBlocks: runBlocks,

            /**
             * @ngdoc property
             * @name angular.Module#requires
             * @module ng
             * @returns {Array.<string>} List of module names which must be loaded before this module.
             * @description
             * Holds the list of modules which the injector will load before the current module is
             * loaded.
             */
            requires: requires,

            /**
             * @ngdoc property
             * @name angular.Module#name
             * @module ng
             * @returns {string} Name of the module.
             * @description
             */
            name: name,


            /**
             * @ngdoc method
             * @name angular.Module#provider
             * @module ng
             * @param {string} name service name
             * @param {Function} providerType Construction function for creating new instance of the
             *                                service.
             * @description
             * See {@link auto.$provide#provider $provide.provider()}.
             */
            provider: invokeLater('$provide', 'provider'),

            /**
             * @ngdoc method
             * @name angular.Module#factory
             * @module ng
             * @param {string} name service name
             * @param {Function} providerFunction Function for creating new instance of the service.
             * @description
             * See {@link auto.$provide#factory $provide.factory()}.
             */
            factory: invokeLater('$provide', 'factory'),

            /**
             * @ngdoc method
             * @name angular.Module#service
             * @module ng
             * @param {string} name service name
             * @param {Function} constructor A constructor function that will be instantiated.
             * @description
             * See {@link auto.$provide#service $provide.service()}.
             */
            service: invokeLater('$provide', 'service'),

            /**
             * @ngdoc method
             * @name angular.Module#value
             * @module ng
             * @param {string} name service name
             * @param {*} object Service instance object.
             * @description
             * See {@link auto.$provide#value $provide.value()}.
             */
            value: invokeLater('$provide', 'value'),

            /**
             * @ngdoc method
             * @name angular.Module#constant
             * @module ng
             * @param {string} name constant name
             * @param {*} object Constant value.
             * @description
             * Because the constant are fixed, they get applied before other provide methods.
             * See {@link auto.$provide#constant $provide.constant()}.
             */
            constant: invokeLater('$provide', 'constant', 'unshift'),

            /**
             * @ngdoc method
             * @name angular.Module#animation
             * @module ng
             * @param {string} name animation name
             * @param {Function} animationFactory Factory function for creating new instance of an
             *                                    animation.
             * @description
             *
             * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
             *
             *
             * Defines an animation hook that can be later used with
             * {@link ngAnimate.$animate $animate} service and directives that use this service.
             *
             * ```js
             * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
             * ```
             *
             * See {@link ngAnimate.$animateProvider#register $animateProvider.register()} and
             * {@link ngAnimate ngAnimate module} for more information.
             */
            animation: invokeLater('$animateProvider', 'register'),

            /**
             * @ngdoc method
             * @name angular.Module#filter
             * @module ng
             * @param {string} name Filter name.
             * @param {Function} filterFactory Factory function for creating new instance of filter.
             * @description
             * See {@link ng.$filterProvider#register $filterProvider.register()}.
             */
            filter: invokeLater('$filterProvider', 'register'),

            /**
             * @ngdoc method
             * @name angular.Module#controller
             * @module ng
             * @param {string|Object} name Controller name, or an object map of controllers where the
             *    keys are the names and the values are the constructors.
             * @param {Function} constructor Controller constructor function.
             * @description
             * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
             */
            controller: invokeLater('$controllerProvider', 'register'),

            /**
             * @ngdoc method
             * @name angular.Module#directive
             * @module ng
             * @param {string|Object} name Directive name, or an object map of directives where the
             *    keys are the names and the values are the factories.
             * @param {Function} directiveFactory Factory function for creating new instance of
             * directives.
             * @description
             * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
             */
            directive: invokeLater('$compileProvider', 'directive'),

            /**
             * @ngdoc method
             * @name angular.Module#config
             * @module ng
             * @param {Function} configFn Execute this function on module load. Useful for service
             *    configuration.
             * @description
             * Use this method to register work which needs to be performed on module loading.
             * For more about how to configure services, see
             * {@link providers#providers_provider-recipe Provider Recipe}.
             */
            config: config,

            /**
             * @ngdoc method
             * @name angular.Module#run
             * @module ng
             * @param {Function} initializationFn Execute this function after injector creation.
             *    Useful for application initialization.
             * @description
             * Use this method to register work which should be performed when the injector is done
             * loading all modules.
             */
            run: function(block) {
              runBlocks.push(block);
              return this;
            }
          };

          if (configFn) {
            config(configFn);
          }

          return  moduleInstance;

          /**
           * @param {string} provider
           * @param {string} method
           * @param {String=} insertMethod
           * @returns {angular.Module}
           */
          function invokeLater(provider, method, insertMethod) {
            return function() {
              invokeQueue[insertMethod || 'push']([provider, method, arguments]);
              return moduleInstance;
            };
          }
        });
      };
    });

  }

  /* global
   angularModule: true,
   version: true,

   $LocaleProvider,
   $CompileProvider,

   htmlAnchorDirective,
   inputDirective,
   inputDirective,
   formDirective,
   scriptDirective,
   selectDirective,
   styleDirective,
   optionDirective,
   ngBindDirective,
   ngBindHtmlDirective,
   ngBindTemplateDirective,
   ngClassDirective,
   ngClassEvenDirective,
   ngClassOddDirective,
   ngCspDirective,
   ngCloakDirective,
   ngControllerDirective,
   ngFormDirective,
   ngHideDirective,
   ngIfDirective,
   ngIncludeDirective,
   ngIncludeFillContentDirective,
   ngInitDirective,
   ngNonBindableDirective,
   ngPluralizeDirective,
   ngRepeatDirective,
   ngShowDirective,
   ngStyleDirective,
   ngSwitchDirective,
   ngSwitchWhenDirective,
   ngSwitchDefaultDirective,
   ngOptionsDirective,
   ngTranscludeDirective,
   ngModelDirective,
   ngListDirective,
   ngChangeDirective,
   requiredDirective,
   requiredDirective,
   ngValueDirective,
   ngAttributeAliasDirectives,
   ngEventDirectives,

   $AnchorScrollProvider,
   $AnimateProvider,
   $BrowserProvider,
   $CacheFactoryProvider,
   $ControllerProvider,
   $DocumentProvider,
   $ExceptionHandlerProvider,
   $FilterProvider,
   $InterpolateProvider,
   $IntervalProvider,
   $HttpProvider,
   $HttpBackendProvider,
   $LocationProvider,
   $LogProvider,
   $ParseProvider,
   $RootScopeProvider,
   $QProvider,
   $$SanitizeUriProvider,
   $SceProvider,
   $SceDelegateProvider,
   $SnifferProvider,
   $TemplateCacheProvider,
   $TimeoutProvider,
   $$RAFProvider,
   $$AsyncCallbackProvider,
   $WindowProvider
   */


  /**
   * @ngdoc object
   * @name angular.version
   * @module ng
   * @description
   * An object that contains information about the current AngularJS version. This object has the
   * following properties:
   *
   * - `full` – `{string}` – Full version string, such as "0.9.18".
   * - `major` – `{number}` – Major version number, such as "0".
   * - `minor` – `{number}` – Minor version number, such as "9".
   * - `dot` – `{number}` – Dot version number, such as "18".
   * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
   */
  var version = {
    full: '1.2.17',    // all of these placeholder strings will be replaced by grunt's
    major: 1,    // package task
    minor: 2,
    dot: 17,
    codeName: 'quantum-disentanglement'
  };


  function publishExternalAPI(angular){
    extend(angular, {
      'bootstrap': bootstrap,
      'copy': copy,
      'extend': extend,
      'equals': equals,
      'element': jqLite,
      'forEach': forEach,
      'injector': createInjector,
      'noop':noop,
      'bind':bind,
      'toJson': toJson,
      'fromJson': fromJson,
      'identity':identity,
      'isUndefined': isUndefined,
      'isDefined': isDefined,
      'isString': isString,
      'isFunction': isFunction,
      'isObject': isObject,
      'isNumber': isNumber,
      'isElement': isElement,
      'isArray': isArray,
      'version': version,
      'isDate': isDate,
      'lowercase': lowercase,
      'uppercase': uppercase,
      'callbacks': {counter: 0},
      '$$minErr': minErr,
      '$$csp': csp
    });

    angularModule = setupModuleLoader(window);
    try {
      angularModule('ngLocale');
    } catch (e) {
      angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
    }

    angularModule('ng', ['ngLocale'], ['$provide',
      function ngModule($provide) {
        // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
        $provide.provider({
          $$sanitizeUri: $$SanitizeUriProvider
        });
        $provide.provider('$compile', $CompileProvider).
          directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            style: styleDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            ngValue: ngValueDirective
          }).
          directive({
            ngInclude: ngIncludeFillContentDirective
          }).
          directive(ngAttributeAliasDirectives).
          directive(ngEventDirectives);
        $provide.provider({
          $anchorScroll: $AnchorScrollProvider,
          $animate: $AnimateProvider,
          $browser: $BrowserProvider,
          $cacheFactory: $CacheFactoryProvider,
          $controller: $ControllerProvider,
          $document: $DocumentProvider,
          $exceptionHandler: $ExceptionHandlerProvider,
          $filter: $FilterProvider,
          $interpolate: $InterpolateProvider,
          $interval: $IntervalProvider,
          $http: $HttpProvider,
          $httpBackend: $HttpBackendProvider,
          $location: $LocationProvider,
          $log: $LogProvider,
          $parse: $ParseProvider,
          $rootScope: $RootScopeProvider,
          $q: $QProvider,
          $sce: $SceProvider,
          $sceDelegate: $SceDelegateProvider,
          $sniffer: $SnifferProvider,
          $templateCache: $TemplateCacheProvider,
          $timeout: $TimeoutProvider,
          $window: $WindowProvider,
          $$rAF: $$RAFProvider,
          $$asyncCallback : $$AsyncCallbackProvider
        });
      }
    ]);
  }

  /* global

   -JQLitePrototype,
   -addEventListenerFn,
   -removeEventListenerFn,
   -BOOLEAN_ATTR
   */

//////////////////////////////////
//JQLite
//////////////////////////////////

  /**
   * @ngdoc function
   * @name angular.element
   * @module ng
   * @kind function
   *
   * @description
   * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
   *
   * If jQuery is available, `angular.element` is an alias for the
   * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
   * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
   *
   * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
   * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
   * commonly needed functionality with the goal of having a very small footprint.</div>
   *
   * To use jQuery, simply load it before `DOMContentLoaded` event fired.
   *
   * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
   * jqLite; they are never raw DOM references.</div>
   *
   * ## Angular's jqLite
   * jqLite provides only the following jQuery methods:
   *
   * - [`addClass()`](http://api.jquery.com/addClass/)
   * - [`after()`](http://api.jquery.com/after/)
   * - [`append()`](http://api.jquery.com/append/)
   * - [`attr()`](http://api.jquery.com/attr/)
   * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
   * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
   * - [`clone()`](http://api.jquery.com/clone/)
   * - [`contents()`](http://api.jquery.com/contents/)
   * - [`css()`](http://api.jquery.com/css/)
   * - [`data()`](http://api.jquery.com/data/)
   * - [`empty()`](http://api.jquery.com/empty/)
   * - [`eq()`](http://api.jquery.com/eq/)
   * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
   * - [`hasClass()`](http://api.jquery.com/hasClass/)
   * - [`html()`](http://api.jquery.com/html/)
   * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
   * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
   * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
   * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
   * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
   * - [`prepend()`](http://api.jquery.com/prepend/)
   * - [`prop()`](http://api.jquery.com/prop/)
   * - [`ready()`](http://api.jquery.com/ready/)
   * - [`remove()`](http://api.jquery.com/remove/)
   * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
   * - [`removeClass()`](http://api.jquery.com/removeClass/)
   * - [`removeData()`](http://api.jquery.com/removeData/)
   * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
   * - [`text()`](http://api.jquery.com/text/)
   * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
   * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
   * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
   * - [`val()`](http://api.jquery.com/val/)
   * - [`wrap()`](http://api.jquery.com/wrap/)
   *
   * ## jQuery/jqLite Extras
   * Angular also provides the following additional methods and events to both jQuery and jqLite:
   *
   * ### Events
   * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
   *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
   *    element before it is removed.
   *
   * ### Methods
   * - `controller(name)` - retrieves the controller of the current element or its parent. By default
   *   retrieves controller associated with the `ngController` directive. If `name` is provided as
   *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
   *   `'ngModel'`).
   * - `injector()` - retrieves the injector of the current element or its parent.
   * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
   *   element or its parent.
   * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
   *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
   *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
   * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
   *   parent element is reached.
   *
   * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
   * @returns {Object} jQuery object.
   */

  var jqCache = JQLite.cache = {},
    jqName = JQLite.expando = 'ng' + new Date().getTime(),
    jqId = 1,
    addEventListenerFn = (window.document.addEventListener
      ? function(element, type, fn) {element.addEventListener(type, fn, false);}
      : function(element, type, fn) {element.attachEvent('on' + type, fn);}),
    removeEventListenerFn = (window.document.removeEventListener
      ? function(element, type, fn) {element.removeEventListener(type, fn, false); }
      : function(element, type, fn) {element.detachEvent('on' + type, fn); });

  /*
   * !!! This is an undocumented "private" function !!!
   */
  var jqData = JQLite._data = function(node) {
    //jQuery always returns an object on cache miss
    return this.cache[node[this.expando]] || {};
  };

  function jqNextId() { return ++jqId; }


  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
  var MOZ_HACK_REGEXP = /^moz([A-Z])/;
  var jqLiteMinErr = minErr('jqLite');

  /**
   * Converts snake_case to camelCase.
   * Also there is special case for Moz prefix starting with upper case letter.
   * @param name Name to normalize
   */
  function camelCase(name) {
    return name.
      replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
        return offset ? letter.toUpperCase() : letter;
      }).
      replace(MOZ_HACK_REGEXP, 'Moz$1');
  }

/////////////////////////////////////////////
// jQuery mutation patch
//
// In conjunction with bindJQuery intercepts all jQuery's DOM destruction apis and fires a
// $destroy event on all DOM nodes being removed.
//
/////////////////////////////////////////////

  function jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments) {
    var originalJqFn = jQuery.fn[name];
    originalJqFn = originalJqFn.$original || originalJqFn;
    removePatch.$original = originalJqFn;
    jQuery.fn[name] = removePatch;

    function removePatch(param) {
      // jshint -W040
      var list = filterElems && param ? [this.filter(param)] : [this],
        fireEvent = dispatchThis,
        set, setIndex, setLength,
        element, childIndex, childLength, children;

      if (!getterIfNoArguments || param != null) {
        while(list.length) {
          set = list.shift();
          for(setIndex = 0, setLength = set.length; setIndex < setLength; setIndex++) {
            element = jqLite(set[setIndex]);
            if (fireEvent) {
              element.triggerHandler('$destroy');
            } else {
              fireEvent = !fireEvent;
            }
            for(childIndex = 0, childLength = (children = element.children()).length;
                childIndex < childLength;
                childIndex++) {
              list.push(jQuery(children[childIndex]));
            }
          }
        }
      }
      return originalJqFn.apply(this, arguments);
    }
  }

  var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
  var HTML_REGEXP = /<|&#?\w+;/;
  var TAG_NAME_REGEXP = /<([\w:]+)/;
  var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;

  var wrapMap = {
    'option': [1, '<select multiple="multiple">', '</select>'],

    'thead': [1, '<table>', '</table>'],
    'col': [2, '<table><colgroup>', '</colgroup></table>'],
    'tr': [2, '<table><tbody>', '</tbody></table>'],
    'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
    '_default': [0, "", ""]
  };

  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  function jqLiteIsTextNode(html) {
    return !HTML_REGEXP.test(html);
  }

  function jqLiteBuildFragment(html, context) {
    var elem, tmp, tag, wrap,
      fragment = context.createDocumentFragment(),
      nodes = [], i, j, jj;

    if (jqLiteIsTextNode(html)) {
      // Convert non-html into a text node
      nodes.push(context.createTextNode(html));
    } else {
      tmp = fragment.appendChild(context.createElement('div'));
      // Convert html into DOM nodes
      tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
      wrap = wrapMap[tag] || wrapMap._default;
      tmp.innerHTML = '<div>&#160;</div>' +
        wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];
      tmp.removeChild(tmp.firstChild);

      // Descend through wrappers to the right content
      i = wrap[0];
      while (i--) {
        tmp = tmp.lastChild;
      }

      for (j=0, jj=tmp.childNodes.length; j<jj; ++j) nodes.push(tmp.childNodes[j]);

      tmp = fragment.firstChild;
      tmp.textContent = "";
    }

    // Remove wrapper from fragment
    fragment.textContent = "";
    fragment.innerHTML = ""; // Clear inner HTML
    return nodes;
  }

  function jqLiteParseHTML(html, context) {
    context = context || document;
    var parsed;

    if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
      return [context.createElement(parsed[1])];
    }

    return jqLiteBuildFragment(html, context);
  }

/////////////////////////////////////////////
  function JQLite(element) {
    if (element instanceof JQLite) {
      return element;
    }
    if (isString(element)) {
      element = trim(element);
    }
    if (!(this instanceof JQLite)) {
      if (isString(element) && element.charAt(0) != '<') {
        throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
      }
      return new JQLite(element);
    }

    if (isString(element)) {
      jqLiteAddNodes(this, jqLiteParseHTML(element));
      var fragment = jqLite(document.createDocumentFragment());
      fragment.append(this);
    } else {
      jqLiteAddNodes(this, element);
    }
  }

  function jqLiteClone(element) {
    return element.cloneNode(true);
  }

  function jqLiteDealoc(element){
    jqLiteRemoveData(element);
    for ( var i = 0, children = element.childNodes || []; i < children.length; i++) {
      jqLiteDealoc(children[i]);
    }
  }

  function jqLiteOff(element, type, fn, unsupported) {
    if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

    var events = jqLiteExpandoStore(element, 'events'),
      handle = jqLiteExpandoStore(element, 'handle');

    if (!handle) return; //no listeners registered

    if (isUndefined(type)) {
      forEach(events, function(eventHandler, type) {
        removeEventListenerFn(element, type, eventHandler);
        delete events[type];
      });
    } else {
      forEach(type.split(' '), function(type) {
        if (isUndefined(fn)) {
          removeEventListenerFn(element, type, events[type]);
          delete events[type];
        } else {
          arrayRemove(events[type] || [], fn);
        }
      });
    }
  }

  function jqLiteRemoveData(element, name) {
    var expandoId = element[jqName],
      expandoStore = jqCache[expandoId];

    if (expandoStore) {
      if (name) {
        delete jqCache[expandoId].data[name];
        return;
      }

      if (expandoStore.handle) {
        expandoStore.events.$destroy && expandoStore.handle({}, '$destroy');
        jqLiteOff(element);
      }
      delete jqCache[expandoId];
      element[jqName] = undefined; // ie does not allow deletion of attributes on elements.
    }
  }

  function jqLiteExpandoStore(element, key, value) {
    var expandoId = element[jqName],
      expandoStore = jqCache[expandoId || -1];

    if (isDefined(value)) {
      if (!expandoStore) {
        element[jqName] = expandoId = jqNextId();
        expandoStore = jqCache[expandoId] = {};
      }
      expandoStore[key] = value;
    } else {
      return expandoStore && expandoStore[key];
    }
  }

  function jqLiteData(element, key, value) {
    var data = jqLiteExpandoStore(element, 'data'),
      isSetter = isDefined(value),
      keyDefined = !isSetter && isDefined(key),
      isSimpleGetter = keyDefined && !isObject(key);

    if (!data && !isSimpleGetter) {
      jqLiteExpandoStore(element, 'data', data = {});
    }

    if (isSetter) {
      data[key] = value;
    } else {
      if (keyDefined) {
        if (isSimpleGetter) {
          // don't create data in this case.
          return data && data[key];
        } else {
          extend(data, key);
        }
      } else {
        return data;
      }
    }
  }

  function jqLiteHasClass(element, selector) {
    if (!element.getAttribute) return false;
    return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
      indexOf( " " + selector + " " ) > -1);
  }

  function jqLiteRemoveClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      forEach(cssClasses.split(' '), function(cssClass) {
        element.setAttribute('class', trim(
            (" " + (element.getAttribute('class') || '') + " ")
              .replace(/[\n\t]/g, " ")
              .replace(" " + trim(cssClass) + " ", " "))
        );
      });
    }
  }

  function jqLiteAddClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
        .replace(/[\n\t]/g, " ");

      forEach(cssClasses.split(' '), function(cssClass) {
        cssClass = trim(cssClass);
        if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
          existingClasses += cssClass + ' ';
        }
      });

      element.setAttribute('class', trim(existingClasses));
    }
  }

  function jqLiteAddNodes(root, elements) {
    if (elements) {
      elements = (!elements.nodeName && isDefined(elements.length) && !isWindow(elements))
        ? elements
        : [ elements ];
      for(var i=0; i < elements.length; i++) {
        root.push(elements[i]);
      }
    }
  }

  function jqLiteController(element, name) {
    return jqLiteInheritedData(element, '$' + (name || 'ngController' ) + 'Controller');
  }

  function jqLiteInheritedData(element, name, value) {
    element = jqLite(element);

    // if element is the document object work with the html element instead
    // this makes $(document).scope() possible
    if(element[0].nodeType == 9) {
      element = element.find('html');
    }
    var names = isArray(name) ? name : [name];

    while (element.length) {
      var node = element[0];
      for (var i = 0, ii = names.length; i < ii; i++) {
        if ((value = element.data(names[i])) !== undefined) return value;
      }

      // If dealing with a document fragment node with a host element, and no parent, use the host
      // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
      // to lookup parent controllers.
      element = jqLite(node.parentNode || (node.nodeType === 11 && node.host));
    }
  }

  function jqLiteEmpty(element) {
    for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
      jqLiteDealoc(childNodes[i]);
    }
    while (element.firstChild) {
      element.removeChild(element.firstChild);
    }
  }

//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
  var JQLitePrototype = JQLite.prototype = {
    ready: function(fn) {
      var fired = false;

      function trigger() {
        if (fired) return;
        fired = true;
        fn();
      }

      // check if document already is loaded
      if (document.readyState === 'complete'){
        setTimeout(trigger);
      } else {
        this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
        // we can not use jqLite since we are not done loading and jQuery could be loaded later.
        // jshint -W064
        JQLite(window).on('load', trigger); // fallback to window.onload for others
        // jshint +W064
      }
    },
    toString: function() {
      var value = [];
      forEach(this, function(e){ value.push('' + e);});
      return '[' + value.join(', ') + ']';
    },

    eq: function(index) {
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
    },

    length: 0,
    push: push,
    sort: [].sort,
    splice: [].splice
  };

//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
  var BOOLEAN_ATTR = {};
  forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
    BOOLEAN_ATTR[lowercase(value)] = value;
  });
  var BOOLEAN_ELEMENTS = {};
  forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
    BOOLEAN_ELEMENTS[uppercase(value)] = true;
  });

  function getBooleanAttrName(element, name) {
    // check dom last since we will most likely fail on name
    var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

    // booleanAttr is here twice to minimize DOM access
    return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;
  }

  forEach({
    data: jqLiteData,
    inheritedData: jqLiteInheritedData,

    scope: function(element) {
      // Can't use jqLiteData here directly so we stay compatible with jQuery!
      return jqLite(element).data('$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
    },

    isolateScope: function(element) {
      // Can't use jqLiteData here directly so we stay compatible with jQuery!
      return jqLite(element).data('$isolateScope') || jqLite(element).data('$isolateScopeNoTemplate');
    },

    controller: jqLiteController,

    injector: function(element) {
      return jqLiteInheritedData(element, '$injector');
    },

    removeAttr: function(element,name) {
      element.removeAttribute(name);
    },

    hasClass: jqLiteHasClass,

    css: function(element, name, value) {
      name = camelCase(name);

      if (isDefined(value)) {
        element.style[name] = value;
      } else {
        var val;

        if (msie <= 8) {
          // this is some IE specific weirdness that jQuery 1.6.4 does not sure why
          val = element.currentStyle && element.currentStyle[name];
          if (val === '') val = 'auto';
        }

        val = val || element.style[name];

        if (msie <= 8) {
          // jquery weirdness :-/
          val = (val === '') ? undefined : val;
        }

        return  val;
      }
    },

    attr: function(element, name, value){
      var lowercasedName = lowercase(name);
      if (BOOLEAN_ATTR[lowercasedName]) {
        if (isDefined(value)) {
          if (!!value) {
            element[name] = true;
            element.setAttribute(name, lowercasedName);
          } else {
            element[name] = false;
            element.removeAttribute(lowercasedName);
          }
        } else {
          return (element[name] ||
            (element.attributes.getNamedItem(name)|| noop).specified)
            ? lowercasedName
            : undefined;
        }
      } else if (isDefined(value)) {
        element.setAttribute(name, value);
      } else if (element.getAttribute) {
        // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
        // some elements (e.g. Document) don't have get attribute, so return undefined
        var ret = element.getAttribute(name, 2);
        // normalize non-existing attributes to undefined (as jQuery)
        return ret === null ? undefined : ret;
      }
    },

    prop: function(element, name, value) {
      if (isDefined(value)) {
        element[name] = value;
      } else {
        return element[name];
      }
    },

    text: (function() {
      var NODE_TYPE_TEXT_PROPERTY = [];
      if (msie < 9) {
        NODE_TYPE_TEXT_PROPERTY[1] = 'innerText';    /** Element **/
        NODE_TYPE_TEXT_PROPERTY[3] = 'nodeValue';    /** Text **/
      } else {
        NODE_TYPE_TEXT_PROPERTY[1] =                 /** Element **/
          NODE_TYPE_TEXT_PROPERTY[3] = 'textContent';  /** Text **/
      }
      getText.$dv = '';
      return getText;

      function getText(element, value) {
        var textProp = NODE_TYPE_TEXT_PROPERTY[element.nodeType];
        if (isUndefined(value)) {
          return textProp ? element[textProp] : '';
        }
        element[textProp] = value;
      }
    })(),

    val: function(element, value) {
      if (isUndefined(value)) {
        if (nodeName_(element) === 'SELECT' && element.multiple) {
          var result = [];
          forEach(element.options, function (option) {
            if (option.selected) {
              result.push(option.value || option.text);
            }
          });
          return result.length === 0 ? null : result;
        }
        return element.value;
      }
      element.value = value;
    },

    html: function(element, value) {
      if (isUndefined(value)) {
        return element.innerHTML;
      }
      for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
        jqLiteDealoc(childNodes[i]);
      }
      element.innerHTML = value;
    },

    empty: jqLiteEmpty
  }, function(fn, name){
    /**
     * Properties: writes return selection, reads return first value
     */
    JQLite.prototype[name] = function(arg1, arg2) {
      var i, key;

      // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
      // in a way that survives minification.
      // jqLiteEmpty takes no arguments but is a setter.
      if (fn !== jqLiteEmpty &&
        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {
        if (isObject(arg1)) {

          // we are a write, but the object properties are the key/values
          for (i = 0; i < this.length; i++) {
            if (fn === jqLiteData) {
              // data() takes the whole object in jQuery
              fn(this[i], arg1);
            } else {
              for (key in arg1) {
                fn(this[i], key, arg1[key]);
              }
            }
          }
          // return self for chaining
          return this;
        } else {
          // we are a read, so read the first child.
          var value = fn.$dv;
          // Only if we have $dv do we iterate over all, otherwise it is just the first element.
          var jj = (value === undefined) ? Math.min(this.length, 1) : this.length;
          for (var j = 0; j < jj; j++) {
            var nodeValue = fn(this[j], arg1, arg2);
            value = value ? value + nodeValue : nodeValue;
          }
          return value;
        }
      } else {
        // we are a write, so apply to all children
        for (i = 0; i < this.length; i++) {
          fn(this[i], arg1, arg2);
        }
        // return self for chaining
        return this;
      }
    };
  });

  function createEventHandler(element, events) {
    var eventHandler = function (event, type) {
      if (!event.preventDefault) {
        event.preventDefault = function() {
          event.returnValue = false; //ie
        };
      }

      if (!event.stopPropagation) {
        event.stopPropagation = function() {
          event.cancelBubble = true; //ie
        };
      }

      if (!event.target) {
        event.target = event.srcElement || document;
      }

      if (isUndefined(event.defaultPrevented)) {
        var prevent = event.preventDefault;
        event.preventDefault = function() {
          event.defaultPrevented = true;
          prevent.call(event);
        };
        event.defaultPrevented = false;
      }

      event.isDefaultPrevented = function() {
        return event.defaultPrevented || event.returnValue === false;
      };

      // Copy event handlers in case event handlers array is modified during execution.
      var eventHandlersCopy = shallowCopy(events[type || event.type] || []);

      forEach(eventHandlersCopy, function(fn) {
        fn.call(element, event);
      });

      // Remove monkey-patched methods (IE),
      // as they would cause memory leaks in IE8.
      if (msie <= 8) {
        // IE7/8 does not allow to delete property on native object
        event.preventDefault = null;
        event.stopPropagation = null;
        event.isDefaultPrevented = null;
      } else {
        // It shouldn't affect normal browsers (native methods are defined on prototype).
        delete event.preventDefault;
        delete event.stopPropagation;
        delete event.isDefaultPrevented;
      }
    };
    eventHandler.elem = element;
    return eventHandler;
  }

//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
  forEach({
    removeData: jqLiteRemoveData,

    dealoc: jqLiteDealoc,

    on: function onFn(element, type, fn, unsupported){
      if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

      var events = jqLiteExpandoStore(element, 'events'),
        handle = jqLiteExpandoStore(element, 'handle');

      if (!events) jqLiteExpandoStore(element, 'events', events = {});
      if (!handle) jqLiteExpandoStore(element, 'handle', handle = createEventHandler(element, events));

      forEach(type.split(' '), function(type){
        var eventFns = events[type];

        if (!eventFns) {
          if (type == 'mouseenter' || type == 'mouseleave') {
            var contains = document.body.contains || document.body.compareDocumentPosition ?
              function( a, b ) {
                // jshint bitwise: false
                var adown = a.nodeType === 9 ? a.documentElement : a,
                  bup = b && b.parentNode;
                return a === bup || !!( bup && bup.nodeType === 1 && (
                  adown.contains ?
                    adown.contains( bup ) :
                    a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
                  ));
              } :
              function( a, b ) {
                if ( b ) {
                  while ( (b = b.parentNode) ) {
                    if ( b === a ) {
                      return true;
                    }
                  }
                }
                return false;
              };

            events[type] = [];

            // Refer to jQuery's implementation of mouseenter & mouseleave
            // Read about mouseenter and mouseleave:
            // http://www.quirksmode.org/js/events_mouse.html#link8
            var eventmap = { mouseleave : "mouseout", mouseenter : "mouseover"};

            onFn(element, eventmap[type], function(event) {
              var target = this, related = event.relatedTarget;
              // For mousenter/leave call the handler if related is outside the target.
              // NB: No relatedTarget if the mouse left/entered the browser window
              if ( !related || (related !== target && !contains(target, related)) ){
                handle(event, type);
              }
            });

          } else {
            addEventListenerFn(element, type, handle);
            events[type] = [];
          }
          eventFns = events[type];
        }
        eventFns.push(fn);
      });
    },

    off: jqLiteOff,

    one: function(element, type, fn) {
      element = jqLite(element);

      //add the listener twice so that when it is called
      //you can remove the original function and still be
      //able to call element.off(ev, fn) normally
      element.on(type, function onFn() {
        element.off(type, fn);
        element.off(type, onFn);
      });
      element.on(type, fn);
    },

    replaceWith: function(element, replaceNode) {
      var index, parent = element.parentNode;
      jqLiteDealoc(element);
      forEach(new JQLite(replaceNode), function(node){
        if (index) {
          parent.insertBefore(node, index.nextSibling);
        } else {
          parent.replaceChild(node, element);
        }
        index = node;
      });
    },

    children: function(element) {
      var children = [];
      forEach(element.childNodes, function(element){
        if (element.nodeType === 1)
          children.push(element);
      });
      return children;
    },

    contents: function(element) {
      return element.contentDocument || element.childNodes || [];
    },

    append: function(element, node) {
      forEach(new JQLite(node), function(child){
        if (element.nodeType === 1 || element.nodeType === 11) {
          element.appendChild(child);
        }
      });
    },

    prepend: function(element, node) {
      if (element.nodeType === 1) {
        var index = element.firstChild;
        forEach(new JQLite(node), function(child){
          element.insertBefore(child, index);
        });
      }
    },

    wrap: function(element, wrapNode) {
      wrapNode = jqLite(wrapNode)[0];
      var parent = element.parentNode;
      if (parent) {
        parent.replaceChild(wrapNode, element);
      }
      wrapNode.appendChild(element);
    },

    remove: function(element) {
      jqLiteDealoc(element);
      var parent = element.parentNode;
      if (parent) parent.removeChild(element);
    },

    after: function(element, newElement) {
      var index = element, parent = element.parentNode;
      forEach(new JQLite(newElement), function(node){
        parent.insertBefore(node, index.nextSibling);
        index = node;
      });
    },

    addClass: jqLiteAddClass,
    removeClass: jqLiteRemoveClass,

    toggleClass: function(element, selector, condition) {
      if (selector) {
        forEach(selector.split(' '), function(className){
          var classCondition = condition;
          if (isUndefined(classCondition)) {
            classCondition = !jqLiteHasClass(element, className);
          }
          (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
        });
      }
    },

    parent: function(element) {
      var parent = element.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },

    next: function(element) {
      if (element.nextElementSibling) {
        return element.nextElementSibling;
      }

      // IE8 doesn't have nextElementSibling
      var elm = element.nextSibling;
      while (elm != null && elm.nodeType !== 1) {
        elm = elm.nextSibling;
      }
      return elm;
    },

    find: function(element, selector) {
      if (element.getElementsByTagName) {
        return element.getElementsByTagName(selector);
      } else {
        return [];
      }
    },

    clone: jqLiteClone,

    triggerHandler: function(element, eventName, eventData) {
      var eventFns = (jqLiteExpandoStore(element, 'events') || {})[eventName];

      eventData = eventData || [];

      var event = [{
        preventDefault: noop,
        stopPropagation: noop
      }];

      forEach(eventFns, function(fn) {
        fn.apply(element, event.concat(eventData));
      });
    }
  }, function(fn, name){
    /**
     * chaining functions
     */
    JQLite.prototype[name] = function(arg1, arg2, arg3) {
      var value;
      for(var i=0; i < this.length; i++) {
        if (isUndefined(value)) {
          value = fn(this[i], arg1, arg2, arg3);
          if (isDefined(value)) {
            // any function which returns a value needs to be wrapped
            value = jqLite(value);
          }
        } else {
          jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
        }
      }
      return isDefined(value) ? value : this;
    };

    // bind legacy bind/unbind to on/off
    JQLite.prototype.bind = JQLite.prototype.on;
    JQLite.prototype.unbind = JQLite.prototype.off;
  });

  /**
   * Computes a hash of an 'obj'.
   * Hash of a:
   *  string is string
   *  number is number as string
   *  object is either result of calling $$hashKey function on the object or uniquely generated id,
   *         that is also assigned to the $$hashKey property of the object.
   *
   * @param obj
   * @returns {string} hash string such that the same input will have the same hash string.
   *         The resulting string key is in 'type:hashKey' format.
   */
  function hashKey(obj) {
    var objType = typeof obj,
      key;

    if (objType == 'object' && obj !== null) {
      if (typeof (key = obj.$$hashKey) == 'function') {
        // must invoke on object to keep the right this
        key = obj.$$hashKey();
      } else if (key === undefined) {
        key = obj.$$hashKey = nextUid();
      }
    } else {
      key = obj;
    }

    return objType + ':' + key;
  }

  /**
   * HashMap which can use objects as keys
   */
  function HashMap(array){
    forEach(array, this.put, this);
  }
  HashMap.prototype = {
    /**
     * Store key value pair
     * @param key key to store can be any type
     * @param value value to store can be any type
     */
    put: function(key, value) {
      this[hashKey(key)] = value;
    },

    /**
     * @param key
     * @returns {Object} the value for the key
     */
    get: function(key) {
      return this[hashKey(key)];
    },

    /**
     * Remove the key/value pair
     * @param key
     */
    remove: function(key) {
      var value = this[key = hashKey(key)];
      delete this[key];
      return value;
    }
  };

  /**
   * @ngdoc function
   * @module ng
   * @name angular.injector
   * @kind function
   *
   * @description
   * Creates an injector function that can be used for retrieving services as well as for
   * dependency injection (see {@link guide/di dependency injection}).
   *

   * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
   *        {@link angular.module}. The `ng` module must be explicitly added.
   * @returns {function()} Injector function. See {@link auto.$injector $injector}.
   *
   * @example
   * Typical usage
   * ```js
   *   // create an injector
   *   var $injector = angular.injector(['ng']);
   *
   *   // use the injector to kick off your application
   *   // use the type inference to auto inject arguments, or use implicit injection
   *   $injector.invoke(function($rootScope, $compile, $document){
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
   * ```
   *
   * Sometimes you want to get access to the injector of a currently running Angular app
   * from outside Angular. Perhaps, you want to inject and compile some markup after the
   * application has been bootstrapped. You can do this using the extra `injector()` added
   * to JQuery/jqLite elements. See {@link angular.element}.
   *
   * *This is fairly rare but could be the case if a third party library is injecting the
   * markup.*
   *
   * In the following example a new block of HTML containing a `ng-controller`
   * directive is added to the end of the document body by JQuery. We then compile and link
   * it into the current AngularJS scope.
   *
   * ```js
   * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
   * $(document.body).append($div);
   *
   * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
   * ```
   */


  /**
   * @ngdoc module
   * @name auto
   * @description
   *
   * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
   */

  var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
  var FN_ARG_SPLIT = /,/;
  var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
  var $injectorMinErr = minErr('$injector');
  function annotate(fn) {
    var $inject,
      fnText,
      argDecl,
      last;

    if (typeof fn == 'function') {
      if (!($inject = fn.$inject)) {
        $inject = [];
        if (fn.length) {
          fnText = fn.toString().replace(STRIP_COMMENTS, '');
          argDecl = fnText.match(FN_ARGS);
          forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg){
            arg.replace(FN_ARG, function(all, underscore, name){
              $inject.push(name);
            });
          });
        }
        fn.$inject = $inject;
      }
    } else if (isArray(fn)) {
      last = fn.length - 1;
      assertArgFn(fn[last], 'fn');
      $inject = fn.slice(0, last);
    } else {
      assertArgFn(fn, 'fn', true);
    }
    return $inject;
  }

///////////////////////////////////////

  /**
   * @ngdoc service
   * @name $injector
   * @kind function
   *
   * @description
   *
   * `$injector` is used to retrieve object instances as defined by
   * {@link auto.$provide provider}, instantiate types, invoke methods,
   * and load modules.
   *
   * The following always holds true:
   *
   * ```js
   *   var $injector = angular.injector();
   *   expect($injector.get('$injector')).toBe($injector);
   *   expect($injector.invoke(function($injector){
 *     return $injector;
 *   }).toBe($injector);
   * ```
   *
   * # Injection Function Annotation
   *
   * JavaScript does not have annotations, and annotations are needed for dependency injection. The
   * following are all valid ways of annotating function with injection arguments and are equivalent.
   *
   * ```js
   *   // inferred (only works if code not minified/obfuscated)
   *   $injector.invoke(function(serviceA){});
   *
   *   // annotated
   *   function explicit(serviceA) {};
   *   explicit.$inject = ['serviceA'];
   *   $injector.invoke(explicit);
   *
   *   // inline
   *   $injector.invoke(['serviceA', function(serviceA){}]);
   * ```
   *
   * ## Inference
   *
   * In JavaScript calling `toString()` on a function returns the function definition. The definition
   * can then be parsed and the function arguments can be extracted. *NOTE:* This does not work with
   * minification, and obfuscation tools since these tools change the argument names.
   *
   * ## `$inject` Annotation
   * By adding an `$inject` property onto a function the injection parameters can be specified.
   *
   * ## Inline
   * As an array of injection names, where the last item in the array is the function to call.
   */

  /**
   * @ngdoc method
   * @name $injector#get
   *
   * @description
   * Return an instance of the service.
   *
   * @param {string} name The name of the instance to retrieve.
   * @return {*} The instance.
   */

  /**
   * @ngdoc method
   * @name $injector#invoke
   *
   * @description
   * Invoke the method and supply the method arguments from the `$injector`.
   *
   * @param {!Function} fn The function to invoke. Function parameters are injected according to the
   *   {@link guide/di $inject Annotation} rules.
   * @param {Object=} self The `this` for the invoked method.
   * @param {Object=} locals Optional object. If preset then any argument names are read from this
   *                         object first, before the `$injector` is consulted.
   * @returns {*} the value returned by the invoked `fn` function.
   */

  /**
   * @ngdoc method
   * @name $injector#has
   *
   * @description
   * Allows the user to query if the particular service exists.
   *
   * @param {string} Name of the service to query.
   * @returns {boolean} returns true if injector has given service.
   */

  /**
   * @ngdoc method
   * @name $injector#instantiate
   * @description
   * Create a new instance of JS type. The method takes a constructor function, invokes the new
   * operator, and supplies all of the arguments to the constructor function as specified by the
   * constructor annotation.
   *
   * @param {Function} Type Annotated constructor function.
   * @param {Object=} locals Optional object. If preset then any argument names are read from this
   * object first, before the `$injector` is consulted.
   * @returns {Object} new instance of `Type`.
   */

  /**
   * @ngdoc method
   * @name $injector#annotate
   *
   * @description
   * Returns an array of service names which the function is requesting for injection. This API is
   * used by the injector to determine which services need to be injected into the function when the
   * function is invoked. There are three ways in which the function can be annotated with the needed
   * dependencies.
   *
   * # Argument names
   *
   * The simplest form is to extract the dependencies from the arguments of the function. This is done
   * by converting the function into a string using `toString()` method and extracting the argument
   * names.
   * ```js
   *   // Given
   *   function MyController($scope, $route) {
 *     // ...
 *   }
   *
   *   // Then
   *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
   * ```
   *
   * This method does not work with code minification / obfuscation. For this reason the following
   * annotation strategies are supported.
   *
   * # The `$inject` property
   *
   * If a function has an `$inject` property and its value is an array of strings, then the strings
   * represent names of services to be injected into the function.
   * ```js
   *   // Given
   *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
   *   // Define function dependencies
   *   MyController['$inject'] = ['$scope', '$route'];
   *
   *   // Then
   *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
   * ```
   *
   * # The array notation
   *
   * It is often desirable to inline Injected functions and that's when setting the `$inject` property
   * is very inconvenient. In these situations using the array notation to specify the dependencies in
   * a way that survives minification is a better choice:
   *
   * ```js
   *   // We wish to write this (not minification / obfuscation safe)
   *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
   *
   *   // We are forced to write break inlining
   *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
   *   tmpFn.$inject = ['$compile', '$rootScope'];
   *   injector.invoke(tmpFn);
   *
   *   // To better support inline function the inline annotation is supported
   *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
   *
   *   // Therefore
   *   expect(injector.annotate(
   *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
   *    ).toEqual(['$compile', '$rootScope']);
   * ```
   *
   * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
   * be retrieved as described above.
   *
   * @returns {Array.<string>} The names of the services which the function requires.
   */




  /**
   * @ngdoc object
   * @name $provide
   *
   * @description
   *
   * The {@link auto.$provide $provide} service has a number of methods for registering components
   * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
   * {@link angular.Module}.
   *
   * An Angular **service** is a singleton object created by a **service factory**.  These **service
   * factories** are functions which, in turn, are created by a **service provider**.
   * The **service providers** are constructor functions. When instantiated they must contain a
   * property called `$get`, which holds the **service factory** function.
   *
   * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
   * correct **service provider**, instantiating it and then calling its `$get` **service factory**
   * function to get the instance of the **service**.
   *
   * Often services have no configuration options and there is no need to add methods to the service
   * provider.  The provider will be no more than a constructor function with a `$get` property. For
   * these cases the {@link auto.$provide $provide} service has additional helper methods to register
   * services without specifying a provider.
   *
   * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
   *     {@link auto.$injector $injector}
   * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
   *     providers and services.
   * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
   *     services, not providers.
   * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
   *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
   *     given factory function.
   * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
   *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
   *      a new object using the given constructor function.
   *
   * See the individual methods for more information and examples.
   */

  /**
   * @ngdoc method
   * @name $provide#provider
   * @description
   *
   * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
   * are constructor functions, whose instances are responsible for "providing" a factory for a
   * service.
   *
   * Service provider names start with the name of the service they provide followed by `Provider`.
   * For example, the {@link ng.$log $log} service has a provider called
   * {@link ng.$logProvider $logProvider}.
   *
   * Service provider objects can have additional methods which allow configuration of the provider
   * and its service. Importantly, you can configure what kind of service is created by the `$get`
   * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
   * method {@link ng.$logProvider#debugEnabled debugEnabled}
   * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
   * console or not.
   *
   * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
   'Provider'` key.
   * @param {(Object|function())} provider If the provider is:
   *
   *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
   *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
   *   - `Constructor`: a new instance of the provider will be created using
   *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
   *
   * @returns {Object} registered provider instance

   * @example
   *
   * The following example shows how to create a simple event tracking service and register it using
   * {@link auto.$provide#provider $provide.provider()}.
   *
   * ```js
   *  // Define the eventTracker provider
   *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
   *
   *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
   * ```
   */

  /**
   * @ngdoc method
   * @name $provide#factory
   * @description
   *
   * Register a **service factory**, which will be called to return the service instance.
   * This is short for registering a service where its provider consists of only a `$get` property,
   * which is the given service factory function.
   * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
   * configure your service in a provider.
   *
   * @param {string} name The name of the instance.
   * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand
   *                            for `$provide.provider(name, {$get: $getFn})`.
   * @returns {Object} registered provider instance
   *
   * @example
   * Here is an example of registering a service
   * ```js
   *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
   * ```
   * You would then inject and use this service like this:
   * ```js
   *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
   * ```
   */


  /**
   * @ngdoc method
   * @name $provide#service
   * @description
   *
   * Register a **service constructor**, which will be invoked with `new` to create the service
   * instance.
   * This is short for registering a service where its provider's `$get` property is the service
   * constructor function that will be used to instantiate the service instance.
   *
   * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
   * as a type/class.
   *
   * @param {string} name The name of the instance.
   * @param {Function} constructor A class (constructor function) that will be instantiated.
   * @returns {Object} registered provider instance
   *
   * @example
   * Here is an example of registering a service using
   * {@link auto.$provide#service $provide.service(class)}.
   * ```js
   *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
   *
   *   Ping.$inject = ['$http'];
   *
   *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
   *   $provide.service('ping', Ping);
   * ```
   * You would then inject and use this service like this:
   * ```js
   *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
   * ```
   */


  /**
   * @ngdoc method
   * @name $provide#value
   * @description
   *
   * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
   * number, an array, an object or a function.  This is short for registering a service where its
   * provider's `$get` property is a factory function that takes no arguments and returns the **value
   * service**.
   *
   * Value services are similar to constant services, except that they cannot be injected into a
   * module configuration function (see {@link angular.Module#config}) but they can be overridden by
   * an Angular
   * {@link auto.$provide#decorator decorator}.
   *
   * @param {string} name The name of the instance.
   * @param {*} value The value.
   * @returns {Object} registered provider instance
   *
   * @example
   * Here are some examples of creating value services.
   * ```js
   *   $provide.value('ADMIN_USER', 'admin');
   *
   *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
   *
   *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
   * ```
   */


  /**
   * @ngdoc method
   * @name $provide#constant
   * @description
   *
   * Register a **constant service**, such as a string, a number, an array, an object or a function,
   * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
   * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
   * be overridden by an Angular {@link auto.$provide#decorator decorator}.
   *
   * @param {string} name The name of the constant.
   * @param {*} value The constant value.
   * @returns {Object} registered instance
   *
   * @example
   * Here a some examples of creating constants:
   * ```js
   *   $provide.constant('SHARD_HEIGHT', 306);
   *
   *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
   *
   *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
   * ```
   */


  /**
   * @ngdoc method
   * @name $provide#decorator
   * @description
   *
   * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
   * intercepts the creation of a service, allowing it to override or modify the behaviour of the
   * service. The object returned by the decorator may be the original service, or a new service
   * object which replaces or wraps and delegates to the original service.
   *
   * @param {string} name The name of the service to decorate.
   * @param {function()} decorator This function will be invoked when the service needs to be
   *    instantiated and should return the decorated service instance. The function is called using
   *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
   *    Local injection arguments:
   *
   *    * `$delegate` - The original service instance, which can be monkey patched, configured,
   *      decorated or delegated to.
   *
   * @example
   * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
   * calls to {@link ng.$log#error $log.warn()}.
   * ```js
   *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
   * ```
   */


  function createInjector(modulesToLoad) {
    var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new HashMap(),
      providerCache = {
        $provide: {
          provider: supportObject(provider),
          factory: supportObject(factory),
          service: supportObject(service),
          value: supportObject(value),
          constant: supportObject(constant),
          decorator: decorator
        }
      },
      providerInjector = (providerCache.$injector =
        createInternalInjector(providerCache, function() {
          throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
        })),
      instanceCache = {},
      instanceInjector = (instanceCache.$injector =
        createInternalInjector(instanceCache, function(servicename) {
          var provider = providerInjector.get(servicename + providerSuffix);
          return instanceInjector.invoke(provider.$get, provider);
        }));


    forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });

    return instanceInjector;

    ////////////////////////////////////
    // $provider
    ////////////////////////////////////

    function supportObject(delegate) {
      return function(key, value) {
        if (isObject(key)) {
          forEach(key, reverseParams(delegate));
        } else {
          return delegate(key, value);
        }
      };
    }

    function provider(name, provider_) {
      assertNotHasOwnProperty(name, 'service');
      if (isFunction(provider_) || isArray(provider_)) {
        provider_ = providerInjector.instantiate(provider_);
      }
      if (!provider_.$get) {
        throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
      }
      return providerCache[name + providerSuffix] = provider_;
    }

    function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }

    function service(name, constructor) {
      return factory(name, ['$injector', function($injector) {
        return $injector.instantiate(constructor);
      }]);
    }

    function value(name, val) { return factory(name, valueFn(val)); }

    function constant(name, value) {
      assertNotHasOwnProperty(name, 'constant');
      providerCache[name] = value;
      instanceCache[name] = value;
    }

    function decorator(serviceName, decorFn) {
      var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get;

      origProvider.$get = function() {
        var origInstance = instanceInjector.invoke(orig$get, origProvider);
        return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
      };
    }

    ////////////////////////////////////
    // Module Loading
    ////////////////////////////////////
    function loadModules(modulesToLoad){
      var runBlocks = [], moduleFn, invokeQueue, i, ii;
      forEach(modulesToLoad, function(module) {
        if (loadedModules.get(module)) return;
        loadedModules.put(module, true);

        try {
          if (isString(module)) {
            moduleFn = angularModule(module);
            runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);

            for(invokeQueue = moduleFn._invokeQueue, i = 0, ii = invokeQueue.length; i < ii; i++) {
              var invokeArgs = invokeQueue[i],
                provider = providerInjector.get(invokeArgs[0]);

              provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
            }
          } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else {
            assertArgFn(module, 'module');
          }
        } catch (e) {
          if (isArray(module)) {
            module = module[module.length - 1];
          }
          if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
            // Safari & FF's stack traces don't contain error.message content
            // unlike those of Chrome and IE
            // So if stack doesn't contain message, we create a new string that contains both.
            // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
            /* jshint -W022 */
            e = e.message + '\n' + e.stack;
          }
          throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
            module, e.stack || e.message || e);
        }
      });
      return runBlocks;
    }

    ////////////////////////////////////
    // internal Injector
    ////////////////////////////////////

    function createInternalInjector(cache, factory) {

      function getService(serviceName) {
        if (cache.hasOwnProperty(serviceName)) {
          if (cache[serviceName] === INSTANTIATING) {
            throw $injectorMinErr('cdep', 'Circular dependency found: {0}', path.join(' <- '));
          }
          return cache[serviceName];
        } else {
          try {
            path.unshift(serviceName);
            cache[serviceName] = INSTANTIATING;
            return cache[serviceName] = factory(serviceName);
          } catch (err) {
            if (cache[serviceName] === INSTANTIATING) {
              delete cache[serviceName];
            }
            throw err;
          } finally {
            path.shift();
          }
        }
      }

      function invoke(fn, self, locals){
        var args = [],
          $inject = annotate(fn),
          length, i,
          key;

        for(i = 0, length = $inject.length; i < length; i++) {
          key = $inject[i];
          if (typeof key !== 'string') {
            throw $injectorMinErr('itkn',
              'Incorrect injection token! Expected service name as string, got {0}', key);
          }
          args.push(
              locals && locals.hasOwnProperty(key)
              ? locals[key]
              : getService(key)
          );
        }
        if (!fn.$inject) {
          // this means that we must be an array.
          fn = fn[length];
        }

        // http://jsperf.com/angularjs-invoke-apply-vs-switch
        // #5388
        return fn.apply(self, args);
      }

      function instantiate(Type, locals) {
        var Constructor = function() {},
          instance, returnedValue;

        // Check if Type is annotated and use just the given function at n-1 as parameter
        // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
        Constructor.prototype = (isArray(Type) ? Type[Type.length - 1] : Type).prototype;
        instance = new Constructor();
        returnedValue = invoke(Type, instance, locals);

        return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
      }

      return {
        invoke: invoke,
        instantiate: instantiate,
        get: getService,
        annotate: annotate,
        has: function(name) {
          return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
        }
      };
    }
  }

  /**
   * @ngdoc service
   * @name $anchorScroll
   * @kind function
   * @requires $window
   * @requires $location
   * @requires $rootScope
   *
   * @description
   * When called, it checks current value of `$location.hash()` and scrolls to the related element,
   * according to rules specified in
   * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
   *
   * It also watches the `$location.hash()` and scrolls whenever it changes to match any anchor.
   * This can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.
   *
   * @example
   <example>
   <file name="index.html">
   <div id="scrollArea" ng-controller="ScrollCtrl">
   <a ng-click="gotoBottom()">Go to bottom</a>
   <a id="bottom"></a> You're at the bottom!
   </div>
   </file>
   <file name="script.js">
   function ScrollCtrl($scope, $location, $anchorScroll) {
         $scope.gotoBottom = function (){
           // set the location.hash to the id of
           // the element you wish to scroll to.
           $location.hash('bottom');

           // call $anchorScroll()
           $anchorScroll();
         };
       }
   </file>
   <file name="style.css">
   #scrollArea {
         height: 350px;
         overflow: auto;
       }

   #bottom {
         display: block;
         margin-top: 2000px;
       }
   </file>
   </example>
   */
  function $AnchorScrollProvider() {

    var autoScrollingEnabled = true;

    this.disableAutoScrolling = function() {
      autoScrollingEnabled = false;
    };

    this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
      var document = $window.document;

      // helper function to get first anchor from a NodeList
      // can't use filter.filter, as it accepts only instances of Array
      // and IE can't convert NodeList to an array using [].slice
      // TODO(vojta): use filter if we change it to accept lists as well
      function getFirstAnchor(list) {
        var result = null;
        forEach(list, function(element) {
          if (!result && lowercase(element.nodeName) === 'a') result = element;
        });
        return result;
      }

      function scroll() {
        var hash = $location.hash(), elm;

        // empty hash, scroll to the top of the page
        if (!hash) $window.scrollTo(0, 0);

        // element with given id
        else if ((elm = document.getElementById(hash))) elm.scrollIntoView();

        // first anchor with given name :-D
        else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) elm.scrollIntoView();

        // no element and hash == 'top', scroll to the top of the page
        else if (hash === 'top') $window.scrollTo(0, 0);
      }

      // does not scroll when user clicks on anchor link that is currently on
      // (no url change, no $location.hash() change), browser native does scroll
      if (autoScrollingEnabled) {
        $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
          function autoScrollWatchAction() {
            $rootScope.$evalAsync(scroll);
          });
      }

      return scroll;
    }];
  }

  var $animateMinErr = minErr('$animate');

  /**
   * @ngdoc provider
   * @name $animateProvider
   *
   * @description
   * Default implementation of $animate that doesn't perform any animations, instead just
   * synchronously performs DOM
   * updates and calls done() callbacks.
   *
   * In order to enable animations the ngAnimate module has to be loaded.
   *
   * To see the functional implementation check out src/ngAnimate/animate.js
   */
  var $AnimateProvider = ['$provide', function($provide) {


    this.$$selectors = {};


    /**
     * @ngdoc method
     * @name $animateProvider#register
     *
     * @description
     * Registers a new injectable animation factory function. The factory function produces the
     * animation object which contains callback functions for each event that is expected to be
     * animated.
     *
     *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`
     *   must be called once the element animation is complete. If a function is returned then the
     *   animation service will use this function to cancel the animation whenever a cancel event is
     *   triggered.
     *
     *
     * ```js
     *   return {
     *     eventFn : function(element, done) {
     *       //code to run the animation
     *       //once complete, then run done()
     *       return function cancellationFunction() {
     *         //code to cancel the animation
     *       }
     *     }
     *   }
     * ```
     *
     * @param {string} name The name of the animation.
     * @param {Function} factory The factory function that will be executed to return the animation
     *                           object.
     */
    this.register = function(name, factory) {
      var key = name + '-animation';
      if (name && name.charAt(0) != '.') throw $animateMinErr('notcsel',
        "Expecting class selector starting with '.' got '{0}'.", name);
      this.$$selectors[name.substr(1)] = key;
      $provide.factory(key, factory);
    };

    /**
     * @ngdoc method
     * @name $animateProvider#classNameFilter
     *
     * @description
     * Sets and/or returns the CSS class regular expression that is checked when performing
     * an animation. Upon bootstrap the classNameFilter value is not set at all and will
     * therefore enable $animate to attempt to perform an animation on any element.
     * When setting the classNameFilter value, animations will only be performed on elements
     * that successfully match the filter expression. This in turn can boost performance
     * for low-powered devices as well as applications containing a lot of structural operations.
     * @param {RegExp=} expression The className expression which will be checked against all animations
     * @return {RegExp} The current CSS className expression value. If null then there is no expression value
     */
    this.classNameFilter = function(expression) {
      if(arguments.length === 1) {
        this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
      }
      return this.$$classNameFilter;
    };

    this.$get = ['$timeout', '$$asyncCallback', function($timeout, $$asyncCallback) {

      function async(fn) {
        fn && $$asyncCallback(fn);
      }

      /**
       *
       * @ngdoc service
       * @name $animate
       * @description The $animate service provides rudimentary DOM manipulation functions to
       * insert, remove and move elements within the DOM, as well as adding and removing classes.
       * This service is the core service used by the ngAnimate $animator service which provides
       * high-level animation hooks for CSS and JavaScript.
       *
       * $animate is available in the AngularJS core, however, the ngAnimate module must be included
       * to enable full out animation support. Otherwise, $animate will only perform simple DOM
       * manipulation operations.
       *
       * To learn more about enabling animation support, click here to visit the {@link ngAnimate
     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service
     * page}.
       */
      return {

        /**
         *
         * @ngdoc method
         * @name $animate#enter
         * @kind function
         * @description Inserts the element into the DOM either after the `after` element or within
         *   the `parent` element. Once complete, the done() callback will be fired (if provided).
         * @param {DOMElement} element the element which will be inserted into the DOM
         * @param {DOMElement} parent the parent element which will append the element as
         *   a child (if the after element is not present)
         * @param {DOMElement} after the sibling element which will append the element
         *   after itself
         * @param {Function=} done callback function that will be called after the element has been
         *   inserted into the DOM
         */
        enter : function(element, parent, after, done) {
          if (after) {
            after.after(element);
          } else {
            if (!parent || !parent[0]) {
              parent = after.parent();
            }
            parent.append(element);
          }
          async(done);
        },

        /**
         *
         * @ngdoc method
         * @name $animate#leave
         * @kind function
         * @description Removes the element from the DOM. Once complete, the done() callback will be
         *   fired (if provided).
         * @param {DOMElement} element the element which will be removed from the DOM
         * @param {Function=} done callback function that will be called after the element has been
         *   removed from the DOM
         */
        leave : function(element, done) {
          element.remove();
          async(done);
        },

        /**
         *
         * @ngdoc method
         * @name $animate#move
         * @kind function
         * @description Moves the position of the provided element within the DOM to be placed
         * either after the `after` element or inside of the `parent` element. Once complete, the
         * done() callback will be fired (if provided).
         *
         * @param {DOMElement} element the element which will be moved around within the
         *   DOM
         * @param {DOMElement} parent the parent element where the element will be
         *   inserted into (if the after element is not present)
         * @param {DOMElement} after the sibling element where the element will be
         *   positioned next to
         * @param {Function=} done the callback function (if provided) that will be fired after the
         *   element has been moved to its new position
         */
        move : function(element, parent, after, done) {
          // Do not remove element before insert. Removing will cause data associated with the
          // element to be dropped. Insert will implicitly do the remove.
          this.enter(element, parent, after, done);
        },

        /**
         *
         * @ngdoc method
         * @name $animate#addClass
         * @kind function
         * @description Adds the provided className CSS class value to the provided element. Once
         * complete, the done() callback will be fired (if provided).
         * @param {DOMElement} element the element which will have the className value
         *   added to it
         * @param {string} className the CSS class which will be added to the element
         * @param {Function=} done the callback function (if provided) that will be fired after the
         *   className value has been added to the element
         */
        addClass : function(element, className, done) {
          className = isString(className) ?
            className :
            isArray(className) ? className.join(' ') : '';
          forEach(element, function (element) {
            jqLiteAddClass(element, className);
          });
          async(done);
        },

        /**
         *
         * @ngdoc method
         * @name $animate#removeClass
         * @kind function
         * @description Removes the provided className CSS class value from the provided element.
         * Once complete, the done() callback will be fired (if provided).
         * @param {DOMElement} element the element which will have the className value
         *   removed from it
         * @param {string} className the CSS class which will be removed from the element
         * @param {Function=} done the callback function (if provided) that will be fired after the
         *   className value has been removed from the element
         */
        removeClass : function(element, className, done) {
          className = isString(className) ?
            className :
            isArray(className) ? className.join(' ') : '';
          forEach(element, function (element) {
            jqLiteRemoveClass(element, className);
          });
          async(done);
        },

        /**
         *
         * @ngdoc method
         * @name $animate#setClass
         * @kind function
         * @description Adds and/or removes the given CSS classes to and from the element.
         * Once complete, the done() callback will be fired (if provided).
         * @param {DOMElement} element the element which will have its CSS classes changed
         *   removed from it
         * @param {string} add the CSS classes which will be added to the element
         * @param {string} remove the CSS class which will be removed from the element
         * @param {Function=} done the callback function (if provided) that will be fired after the
         *   CSS classes have been set on the element
         */
        setClass : function(element, add, remove, done) {
          forEach(element, function (element) {
            jqLiteAddClass(element, add);
            jqLiteRemoveClass(element, remove);
          });
          async(done);
        },

        enabled : noop
      };
    }];
  }];

  function $$AsyncCallbackProvider(){
    this.$get = ['$$rAF', '$timeout', function($$rAF, $timeout) {
      return $$rAF.supported
        ? function(fn) { return $$rAF(fn); }
        : function(fn) {
        return $timeout(fn, 0, false);
      };
    }];
  }

  /**
   * ! This is a private undocumented service !
   *
   * @name $browser
   * @requires $log
   * @description
   * This object has two goals:
   *
   * - hide all the global state in the browser caused by the window object
   * - abstract away all the browser specific features and inconsistencies
   *
   * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
   * service, which can be used for convenient testing of the application without the interaction with
   * the real browser apis.
   */
  /**
   * @param {object} window The global window object.
   * @param {object} document jQuery wrapped document.
   * @param {function()} XHR XMLHttpRequest constructor.
   * @param {object} $log console.log or an object with the same interface.
   * @param {object} $sniffer $sniffer service
   */
  function Browser(window, document, $log, $sniffer) {
    var self = this,
      rawDocument = document[0],
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {};

    self.isMock = false;

    var outstandingRequestCount = 0;
    var outstandingRequestCallbacks = [];

    // TODO(vojta): remove this temporary api
    self.$$completeOutstandingRequest = completeOutstandingRequest;
    self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

    /**
     * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
     * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
     */
    function completeOutstandingRequest(fn) {
      try {
        fn.apply(null, sliceArgs(arguments, 1));
      } finally {
        outstandingRequestCount--;
        if (outstandingRequestCount === 0) {
          while(outstandingRequestCallbacks.length) {
            try {
              outstandingRequestCallbacks.pop()();
            } catch (e) {
              $log.error(e);
            }
          }
        }
      }
    }

    /**
     * @private
     * Note: this method is used only by scenario runner
     * TODO(vojta): prefix this method with $$ ?
     * @param {function()} callback Function that will be called when no outstanding request
     */
    self.notifyWhenNoOutstandingRequests = function(callback) {
      // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
      // at some deterministic time in respect to the test runner's actions. Leaving things up to the
      // regular poller would result in flaky tests.
      forEach(pollFns, function(pollFn){ pollFn(); });

      if (outstandingRequestCount === 0) {
        callback();
      } else {
        outstandingRequestCallbacks.push(callback);
      }
    };

    //////////////////////////////////////////////////////////////
    // Poll Watcher API
    //////////////////////////////////////////////////////////////
    var pollFns = [],
      pollTimeout;

    /**
     * @name $browser#addPollFn
     *
     * @param {function()} fn Poll function to add
     *
     * @description
     * Adds a function to the list of functions that poller periodically executes,
     * and starts polling if not started yet.
     *
     * @returns {function()} the added function
     */
    self.addPollFn = function(fn) {
      if (isUndefined(pollTimeout)) startPoller(100, setTimeout);
      pollFns.push(fn);
      return fn;
    };

    /**
     * @param {number} interval How often should browser call poll functions (ms)
     * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
     *
     * @description
     * Configures the poller to run in the specified intervals, using the specified
     * setTimeout fn and kicks it off.
     */
    function startPoller(interval, setTimeout) {
      (function check() {
        forEach(pollFns, function(pollFn){ pollFn(); });
        pollTimeout = setTimeout(check, interval);
      })();
    }

    //////////////////////////////////////////////////////////////
    // URL API
    //////////////////////////////////////////////////////////////

    var lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      newLocation = null;

    /**
     * @name $browser#url
     *
     * @description
     * GETTER:
     * Without any argument, this method just returns current value of location.href.
     *
     * SETTER:
     * With at least one argument, this method sets url to new value.
     * If html5 history api supported, pushState/replaceState is used, otherwise
     * location.href/location.replace is used.
     * Returns its own instance to allow chaining
     *
     * NOTE: this api is intended for use only by the $location service. Please use the
     * {@link ng.$location $location service} to change url.
     *
     * @param {string} url New url (when used as setter)
     * @param {boolean=} replace Should new url replace current history record ?
     */
    self.url = function(url, replace) {
      // Android Browser BFCache causes location, history reference to become stale.
      if (location !== window.location) location = window.location;
      if (history !== window.history) history = window.history;

      // setter
      if (url) {
        if (lastBrowserUrl == url) return;
        lastBrowserUrl = url;
        if ($sniffer.history) {
          if (replace) history.replaceState(null, '', url);
          else {
            history.pushState(null, '', url);
            // Crazy Opera Bug: http://my.opera.com/community/forums/topic.dml?id=1185462
            baseElement.attr('href', baseElement.attr('href'));
          }
        } else {
          newLocation = url;
          if (replace) {
            location.replace(url);
          } else {
            location.href = url;
          }
        }
        return self;
        // getter
      } else {
        // - newLocation is a workaround for an IE7-9 issue with location.replace and location.href
        //   methods not updating location.href synchronously.
        // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
        return newLocation || location.href.replace(/%27/g,"'");
      }
    };

    var urlChangeListeners = [],
      urlChangeInit = false;

    function fireUrlChange() {
      newLocation = null;
      if (lastBrowserUrl == self.url()) return;

      lastBrowserUrl = self.url();
      forEach(urlChangeListeners, function(listener) {
        listener(self.url());
      });
    }

    /**
     * @name $browser#onUrlChange
     *
     * @description
     * Register callback function that will be called, when url changes.
     *
     * It's only called when the url is changed from outside of angular:
     * - user types different url into address bar
     * - user clicks on history (forward/back) button
     * - user clicks on a link
     *
     * It's not called when url is changed by $browser.url() method
     *
     * The listener gets called with new url as parameter.
     *
     * NOTE: this api is intended for use only by the $location service. Please use the
     * {@link ng.$location $location service} to monitor url changes in angular apps.
     *
     * @param {function(string)} listener Listener function to be called when url changes.
     * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
     */
    self.onUrlChange = function(callback) {
      // TODO(vojta): refactor to use node's syntax for events
      if (!urlChangeInit) {
        // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
        // don't fire popstate when user change the address bar and don't fire hashchange when url
        // changed by push/replaceState

        // html5 history api - popstate event
        if ($sniffer.history) jqLite(window).on('popstate', fireUrlChange);
        // hashchange event
        if ($sniffer.hashchange) jqLite(window).on('hashchange', fireUrlChange);
        // polling
        else self.addPollFn(fireUrlChange);

        urlChangeInit = true;
      }

      urlChangeListeners.push(callback);
      return callback;
    };

    //////////////////////////////////////////////////////////////
    // Misc API
    //////////////////////////////////////////////////////////////

    /**
     * @name $browser#baseHref
     *
     * @description
     * Returns current <base href>
     * (always relative - without domain)
     *
     * @returns {string} The current base href
     */
    self.baseHref = function() {
      var href = baseElement.attr('href');
      return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
    };

    //////////////////////////////////////////////////////////////
    // Cookies API
    //////////////////////////////////////////////////////////////
    var lastCookies = {};
    var lastCookieString = '';
    var cookiePath = self.baseHref();

    /**
     * @name $browser#cookies
     *
     * @param {string=} name Cookie name
     * @param {string=} value Cookie value
     *
     * @description
     * The cookies method provides a 'private' low level access to browser cookies.
     * It is not meant to be used directly, use the $cookie service instead.
     *
     * The return values vary depending on the arguments that the method was called with as follows:
     *
     * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify
     *   it
     * - cookies(name, value) -> set name to value, if value is undefined delete the cookie
     * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that
     *   way)
     *
     * @returns {Object} Hash of all cookies (if called without any parameter)
     */
    self.cookies = function(name, value) {
      /* global escape: false, unescape: false */
      var cookieLength, cookieArray, cookie, i, index;

      if (name) {
        if (value === undefined) {
          rawDocument.cookie = escape(name) + "=;path=" + cookiePath +
            ";expires=Thu, 01 Jan 1970 00:00:00 GMT";
        } else {
          if (isString(value)) {
            cookieLength = (rawDocument.cookie = escape(name) + '=' + escape(value) +
              ';path=' + cookiePath).length + 1;

            // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
            // - 300 cookies
            // - 20 cookies per unique domain
            // - 4096 bytes per cookie
            if (cookieLength > 4096) {
              $log.warn("Cookie '"+ name +
                "' possibly not set or overflowed because it was too large ("+
                cookieLength + " > 4096 bytes)!");
            }
          }
        }
      } else {
        if (rawDocument.cookie !== lastCookieString) {
          lastCookieString = rawDocument.cookie;
          cookieArray = lastCookieString.split("; ");
          lastCookies = {};

          for (i = 0; i < cookieArray.length; i++) {
            cookie = cookieArray[i];
            index = cookie.indexOf('=');
            if (index > 0) { //ignore nameless cookies
              name = unescape(cookie.substring(0, index));
              // the first value that is seen for a cookie is the most
              // specific one.  values for the same cookie name that
              // follow are for less specific paths.
              if (lastCookies[name] === undefined) {
                lastCookies[name] = unescape(cookie.substring(index + 1));
              }
            }
          }
        }
        return lastCookies;
      }
    };


    /**
     * @name $browser#defer
     * @param {function()} fn A function, who's execution should be deferred.
     * @param {number=} [delay=0] of milliseconds to defer the function execution.
     * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
     *
     * @description
     * Executes a fn asynchronously via `setTimeout(fn, delay)`.
     *
     * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
     * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
     * via `$browser.defer.flush()`.
     *
     */
    self.defer = function(fn, delay) {
      var timeoutId;
      outstandingRequestCount++;
      timeoutId = setTimeout(function() {
        delete pendingDeferIds[timeoutId];
        completeOutstandingRequest(fn);
      }, delay || 0);
      pendingDeferIds[timeoutId] = true;
      return timeoutId;
    };


    /**
     * @name $browser#defer.cancel
     *
     * @description
     * Cancels a deferred task identified with `deferId`.
     *
     * @param {*} deferId Token returned by the `$browser.defer` function.
     * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
     *                    canceled.
     */
    self.defer.cancel = function(deferId) {
      if (pendingDeferIds[deferId]) {
        delete pendingDeferIds[deferId];
        clearTimeout(deferId);
        completeOutstandingRequest(noop);
        return true;
      }
      return false;
    };

  }

  function $BrowserProvider(){
    this.$get = ['$window', '$log', '$sniffer', '$document',
      function( $window,   $log,   $sniffer,   $document){
        return new Browser($window, $document, $log, $sniffer);
      }];
  }

  /**
   * @ngdoc service
   * @name $cacheFactory
   *
   * @description
   * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
   * them.
   *
   * ```js
   *
   *  var cache = $cacheFactory('cacheId');
   *  expect($cacheFactory.get('cacheId')).toBe(cache);
   *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
   *
   *  cache.put("key", "value");
   *  cache.put("another key", "another value");
   *
   *  // We've specified no options on creation
   *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
   *
   * ```
   *
   *
   * @param {string} cacheId Name or id of the newly created cache.
   * @param {object=} options Options object that specifies the cache behavior. Properties:
   *
   *   - `{number=}` `capacity` — turns the cache into LRU cache.
   *
   * @returns {object} Newly created cache object with the following set of methods:
   *
   * - `{object}` `info()` — Returns id, size, and options of cache.
   * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
   *   it.
   * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
   * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
   * - `{void}` `removeAll()` — Removes all cached values.
   * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
   *
   * @example
   <example module="cacheExampleApp">
   <file name="index.html">
   <div ng-controller="CacheController">
   <input ng-model="newCacheKey" placeholder="Key">
   <input ng-model="newCacheValue" placeholder="Value">
   <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

   <p ng-if="keys.length">Cached Values</p>
   <div ng-repeat="key in keys">
   <span ng-bind="key"></span>
   <span>: </span>
   <b ng-bind="cache.get(key)"></b>
   </div>

   <p>Cache Info</p>
   <div ng-repeat="(key, value) in cache.info()">
   <span ng-bind="key"></span>
   <span>: </span>
   <b ng-bind="value"></b>
   </div>
   </div>
   </file>
   <file name="script.js">
   angular.module('cacheExampleApp', []).
   controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             $scope.cache.put(key, value);
             $scope.keys.push(key);
           };
         }]);
   </file>
   <file name="style.css">
   p {
         margin: 10px 0 3px;
       }
   </file>
   </example>
   */
  function $CacheFactoryProvider() {

    this.$get = function() {
      var caches = {};

      function cacheFactory(cacheId, options) {
        if (cacheId in caches) {
          throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
        }

        var size = 0,
          stats = extend({}, options, {id: cacheId}),
          data = {},
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = {},
          freshEnd = null,
          staleEnd = null;

        /**
         * @ngdoc type
         * @name $cacheFactory.Cache
         *
         * @description
         * A cache object used to store and retrieve data, primarily used by
         * {@link $http $http} and the {@link ng.directive:script script} directive to cache
         * templates and other data.
         *
         * ```js
         *  angular.module('superCache')
         *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
         * ```
         *
         * Example test:
         *
         * ```js
         *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
         * ```
         */
        return caches[cacheId] = {

          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#put
           * @kind function
           *
           * @description
           * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
           * retrieved later, and incrementing the size of the cache if the key was not already
           * present in the cache. If behaving like an LRU cache, it will also remove stale
           * entries from the set.
           *
           * It will not insert undefined values into the cache.
           *
           * @param {string} key the key under which the cached data is stored.
           * @param {*} value the value to store alongside the key. If it is undefined, the key
           *    will not be stored.
           * @returns {*} the value stored.
           */
          put: function(key, value) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

              refresh(lruEntry);
            }

            if (isUndefined(value)) return;
            if (!(key in data)) size++;
            data[key] = value;

            if (size > capacity) {
              this.remove(staleEnd.key);
            }

            return value;
          },

          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#get
           * @kind function
           *
           * @description
           * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
           *
           * @param {string} key the key of the data to be retrieved
           * @returns {*} the value stored.
           */
          get: function(key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];

              if (!lruEntry) return;

              refresh(lruEntry);
            }

            return data[key];
          },


          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#remove
           * @kind function
           *
           * @description
           * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
           *
           * @param {string} key the key of the entry to be removed
           */
          remove: function(key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];

              if (!lruEntry) return;

              if (lruEntry == freshEnd) freshEnd = lruEntry.p;
              if (lruEntry == staleEnd) staleEnd = lruEntry.n;
              link(lruEntry.n,lruEntry.p);

              delete lruHash[key];
            }

            delete data[key];
            size--;
          },


          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#removeAll
           * @kind function
           *
           * @description
           * Clears the cache object of any entries.
           */
          removeAll: function() {
            data = {};
            size = 0;
            lruHash = {};
            freshEnd = staleEnd = null;
          },


          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#destroy
           * @kind function
           *
           * @description
           * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
           * removing it from the {@link $cacheFactory $cacheFactory} set.
           */
          destroy: function() {
            data = null;
            stats = null;
            lruHash = null;
            delete caches[cacheId];
          },


          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#info
           * @kind function
           *
           * @description
           * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
           *
           * @returns {object} an object with the following properties:
           *   <ul>
           *     <li>**id**: the id of the cache instance</li>
           *     <li>**size**: the number of entries kept in the cache instance</li>
           *     <li>**...**: any additional properties from the options object when creating the
           *       cache.</li>
           *   </ul>
           */
          info: function() {
            return extend({}, stats, {size: size});
          }
        };


        /**
         * makes the `entry` the freshEnd of the LRU linked list
         */
        function refresh(entry) {
          if (entry != freshEnd) {
            if (!staleEnd) {
              staleEnd = entry;
            } else if (staleEnd == entry) {
              staleEnd = entry.n;
            }

            link(entry.n, entry.p);
            link(entry, freshEnd);
            freshEnd = entry;
            freshEnd.n = null;
          }
        }


        /**
         * bidirectionally links two entries of the LRU linked list
         */
        function link(nextEntry, prevEntry) {
          if (nextEntry != prevEntry) {
            if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
            if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
          }
        }
      }


      /**
       * @ngdoc method
       * @name $cacheFactory#info
       *
       * @description
       * Get information about all the caches that have been created
       *
       * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
       */
      cacheFactory.info = function() {
        var info = {};
        forEach(caches, function(cache, cacheId) {
          info[cacheId] = cache.info();
        });
        return info;
      };


      /**
       * @ngdoc method
       * @name $cacheFactory#get
       *
       * @description
       * Get access to a cache object by the `cacheId` used when it was created.
       *
       * @param {string} cacheId Name or id of a cache to access.
       * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
       */
      cacheFactory.get = function(cacheId) {
        return caches[cacheId];
      };


      return cacheFactory;
    };
  }

  /**
   * @ngdoc service
   * @name $templateCache
   *
   * @description
   * The first time a template is used, it is loaded in the template cache for quick retrieval. You
   * can load templates directly into the cache in a `script` tag, or by consuming the
   * `$templateCache` service directly.
   *
   * Adding via the `script` tag:
   *
   * ```html
   *   <script type="text/ng-template" id="templateId.html">
   *     <p>This is the content of the template</p>
   *   </script>
   * ```
   *
   * **Note:** the `script` tag containing the template does not need to be included in the `head` of
   * the document, but it must be below the `ng-app` definition.
   *
   * Adding via the $templateCache service:
   *
   * ```js
   * var myApp = angular.module('myApp', []);
   * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
   * ```
   *
   * To retrieve the template later, simply use it in your HTML:
   * ```html
   * <div ng-include=" 'templateId.html' "></div>
   * ```
   *
   * or get it via Javascript:
   * ```js
   * $templateCache.get('templateId.html')
   * ```
   *
   * See {@link ng.$cacheFactory $cacheFactory}.
   *
   */
  function $TemplateCacheProvider() {
    this.$get = ['$cacheFactory', function($cacheFactory) {
      return $cacheFactory('templates');
    }];
  }

  /* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
   *
   * DOM-related variables:
   *
   * - "node" - DOM Node
   * - "element" - DOM Element or Node
   * - "$node" or "$element" - jqLite-wrapped node or element
   *
   *
   * Compiler related stuff:
   *
   * - "linkFn" - linking fn of a single directive
   * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
   * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
   * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
   */


  /**
   * @ngdoc service
   * @name $compile
   * @kind function
   *
   * @description
   * Compiles an HTML string or DOM into a template and produces a template function, which
   * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
   *
   * The compilation is a process of walking the DOM tree and matching DOM elements to
   * {@link ng.$compileProvider#directive directives}.
   *
   * <div class="alert alert-warning">
   * **Note:** This document is an in-depth reference of all directive options.
   * For a gentle introduction to directives with examples of common use cases,
   * see the {@link guide/directive directive guide}.
   * </div>
   *
   * ## Comprehensive Directive API
   *
   * There are many different options for a directive.
   *
   * The difference resides in the return value of the factory function.
   * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
   * or just the `postLink` function (all other properties will have the default values).
   *
   * <div class="alert alert-success">
   * **Best Practice:** It's recommended to use the "directive definition object" form.
   * </div>
   *
   * Here's an example directive declared with a Directive Definition Object:
   *
   * ```js
   *   var myModule = angular.module(...);
   *
   *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       transclude: false,
 *       restrict: 'A',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       controllerAs: 'stringAlias',
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
   * ```
   *
   * <div class="alert alert-warning">
   * **Note:** Any unspecified options will use the default value. You can see the default values below.
   * </div>
   *
   * Therefore the above can be simplified as:
   *
   * ```js
   *   var myModule = angular.module(...);
   *
   *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
   * ```
   *
   *
   *
   * ### Directive Definition Object
   *
   * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
   *
   * #### `priority`
   * When there are multiple directives defined on a single DOM element, sometimes it
   * is necessary to specify the order in which the directives are applied. The `priority` is used
   * to sort the directives before their `compile` functions get called. Priority is defined as a
   * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
   * are also run in priority order, but post-link functions are run in reverse order. The order
   * of directives with the same priority is undefined. The default priority is `0`.
   *
   * #### `terminal`
   * If set to true then the current `priority` will be the last set of directives
   * which will execute (any directives at the current priority will still execute
   * as the order of execution on same `priority` is undefined).
   *
   * #### `scope`
   * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
   * same element request a new scope, only one new scope is created. The new scope rule does not
   * apply for the root of the template since the root of the template always gets a new scope.
   *
   * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
   * normal scope in that it does not prototypically inherit from the parent scope. This is useful
   * when creating reusable components, which should not accidentally read or modify data in the
   * parent scope.
   *
   * The 'isolate' scope takes an object hash which defines a set of local scope properties
   * derived from the parent scope. These local properties are useful for aliasing values for
   * templates. Locals definition is a hash of local scope property to its source:
   *
   * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
   *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
   *   attribute name is assumed to be the same as the local name.
   *   Given `<widget my-attr="hello {{name}}">` and widget definition
   *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
   *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
   *   `localName` property on the widget scope. The `name` is read from the parent scope (not
   *   component scope).
   *
   * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
   *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
   *   name is specified then the attribute name is assumed to be the same as the local name.
   *   Given `<widget my-attr="parentModel">` and widget definition of
   *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
   *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
   *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
   *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
   *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional.
   *
   * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
   *   If no `attr` name is specified then the attribute name is assumed to be the same as the
   *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
   *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
   *   a function wrapper for the `count = count + value` expression. Often it's desirable to
   *   pass data from the isolated scope via an expression and to the parent scope, this can be
   *   done by passing a map of local variable names and values into the expression wrapper fn.
   *   For example, if the expression is `increment(amount)` then we can specify the amount value
   *   by calling the `localFn` as `localFn({amount: 22})`.
   *
   *
   *
   * #### `controller`
   * Controller constructor function. The controller is instantiated before the
   * pre-linking phase and it is shared with other directives (see
   * `require` attribute). This allows the directives to communicate with each other and augment
   * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
   *
   * * `$scope` - Current scope associated with the element
   * * `$element` - Current element
   * * `$attrs` - Current attributes object for the element
   * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope.
   *    The scope can be overridden by an optional first argument.
   *   `function([scope], cloneLinkingFn)`.
   *
   *
   * #### `require`
   * Require another directive and inject its controller as the fourth argument to the linking function. The
   * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
   * injected argument will be an array in corresponding order. If no such directive can be
   * found, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:
   *
   * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
   * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
   * * `^` - Locate the required controller by searching the element's parents. Throw an error if not found.
   * * `?^` - Attempt to locate the required controller by searching the element's parents or pass `null` to the
   *   `link` fn if not found.
   *
   *
   * #### `controllerAs`
   * Controller alias at the directive scope. An alias for the controller so it
   * can be referenced at the directive template. The directive needs to define a scope for this
   * configuration to be used. Useful in the case when directive is used as component.
   *
   *
   * #### `restrict`
   * String of subset of `EACM` which restricts the directive to a specific directive
   * declaration style. If omitted, the default (attributes only) is used.
   *
   * * `E` - Element name: `<my-directive></my-directive>`
   * * `A` - Attribute (default): `<div my-directive="exp"></div>`
   * * `C` - Class: `<div class="my-directive: exp;"></div>`
   * * `M` - Comment: `<!-- directive: my-directive exp -->`
   *
   *
   * #### `template`
   * replace the current element with the contents of the HTML. The replacement process
   * migrates all of the attributes / classes from the old element to the new one. See the
   * {@link guide/directive#creating-custom-directives_creating-directives_template-expanding-directive
 * Directives Guide} for an example.
   *
   * You can specify `template` as a string representing the template or as a function which takes
   * two arguments `tElement` and `tAttrs` (described in the `compile` function api below) and
   * returns a string value representing the template.
   *
   *
   * #### `templateUrl`
   * Same as `template` but the template is loaded from the specified URL. Because
   * the template loading is asynchronous the compilation/linking is suspended until the template
   * is loaded.
   *
   * You can specify `templateUrl` as a string representing the URL or as a function which takes two
   * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
   * a string value representing the url.  In either case, the template URL is passed through {@link
    * api/ng.$sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
   *
   *
   * #### `replace` ([*DEPRECATED*!], will be removed in next major release)
   * specify where the template should be inserted. Defaults to `false`.
   *
   * * `true` - the template will replace the current element.
   * * `false` - the template will replace the contents of the current element.
   *
   *
   * #### `transclude`
   * compile the content of the element and make it available to the directive.
   * Typically used with {@link ng.directive:ngTransclude
 * ngTransclude}. The advantage of transclusion is that the linking function receives a
   * transclusion function which is pre-bound to the correct scope. In a typical setup the widget
   * creates an `isolate` scope, but the transclusion is not a child, but a sibling of the `isolate`
   * scope. This makes it possible for the widget to have private state, and the transclusion to
   * be bound to the parent (pre-`isolate`) scope.
   *
   * * `true` - transclude the content of the directive.
   * * `'element'` - transclude the whole element including any directives defined at lower priority.
   *
   *
   * #### `compile`
   *
   * ```js
   *   function compile(tElement, tAttrs, transclude) { ... }
   * ```
   *
   * The compile function deals with transforming the template DOM. Since most directives do not do
   * template transformation, it is not used often. The compile function takes the following arguments:
   *
   *   * `tElement` - template element - The element where the directive has been declared. It is
   *     safe to do template transformation on the element and child elements only.
   *
   *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
   *     between all directive compile functions.
   *
   *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
   *
   * <div class="alert alert-warning">
   * **Note:** The template instance and the link instance may be different objects if the template has
   * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
   * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
   * should be done in a linking function rather than in a compile function.
   * </div>

   * <div class="alert alert-warning">
   * **Note:** The compile function cannot handle directives that recursively use themselves in their
   * own templates or compile functions. Compiling these directives results in an infinite loop and a
   * stack overflow errors.
   *
   * This can be avoided by manually using $compile in the postLink function to imperatively compile
   * a directive's template instead of relying on automatic template compilation via `template` or
   * `templateUrl` declaration or manual compilation inside the compile function.
   * </div>
   *
   * <div class="alert alert-error">
   * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
   *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
   *   to the link function instead.
   * </div>

   * A compile function can have a return value which can be either a function or an object.
   *
   * * returning a (post-link) function - is equivalent to registering the linking function via the
   *   `link` property of the config object when the compile function is empty.
   *
   * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
   *   control when a linking function should be called during the linking phase. See info about
   *   pre-linking and post-linking functions below.
   *
   *
   * #### `link`
   * This property is used only if the `compile` property is not defined.
   *
   * ```js
   *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
   * ```
   *
   * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
   * executed after the template has been cloned. This is where most of the directive logic will be
   * put.
   *
   *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
   *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
   *
   *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
   *     manipulate the children of the element only in `postLink` function since the children have
   *     already been linked.
   *
   *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
   *     between all directive linking functions.
   *
   *   * `controller` - a controller instance - A controller instance if at least one directive on the
   *     element defines a controller. The controller is shared among all the directives, which allows
   *     the directives to use the controllers as a communication channel.
   *
   *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
   *     The scope can be overridden by an optional first argument. This is the same as the `$transclude`
   *     parameter of directive controllers.
   *     `function([scope], cloneLinkingFn)`.
   *
   *
   * #### Pre-linking function
   *
   * Executed before the child elements are linked. Not safe to do DOM transformation since the
   * compiler linking function will fail to locate the correct elements for linking.
   *
   * #### Post-linking function
   *
   * Executed after the child elements are linked. It is safe to do DOM transformation in the post-linking function.
   *
   * <a name="Attributes"></a>
   * ### Attributes
   *
   * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
   * `link()` or `compile()` functions. It has a variety of uses.
   *
   * accessing *Normalized attribute names:*
   * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
   * the attributes object allows for normalized access to
   *   the attributes.
   *
   * * *Directive inter-communication:* All directives share the same instance of the attributes
   *   object which allows the directives to use the attributes object as inter directive
   *   communication.
   *
   * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
   *   allowing other directives to read the interpolated value.
   *
   * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
   *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
   *   the only way to easily get the actual value because during the linking phase the interpolation
   *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
   *
   * ```js
   * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
   * ```
   *
   * Below is an example using `$compileProvider`.
   *
   * <div class="alert alert-warning">
   * **Note**: Typically directives are registered with `module.directive`. The example below is
   * to illustrate how `$compile` works.
   * </div>
   *
   <example module="compile">
   <file name="index.html">
   <script>
   angular.module('compile', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        })
      });

   function Ctrl($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }
   </script>
   <div ng-controller="Ctrl">
   <input ng-model="name"> <br>
   <textarea ng-model="html"></textarea> <br>
   <div compile="html"></div>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
   </example>

   *
   *
   * @param {string|DOMElement} element Element or HTML string to compile into a template function.
   * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives.
   * @param {number} maxPriority only apply directives lower than given priority (Only effects the
   *                 root element(s), not their children)
   * @returns {function(scope, cloneAttachFn=)} a link function which is used to bind template
   * (a DOM element/tree) to a scope. Where:
   *
   *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
   *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
   *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
   *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
   *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:
   *
   *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
   *      * `scope` - is the current scope with which the linking function is working with.
   *
   * Calling the linking function returns the element of the template. It is either the original
   * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
   *
   * After linking the view is not updated until after a call to $digest which typically is done by
   * Angular automatically.
   *
   * If you need access to the bound view, there are two ways to do it:
   *
   * - If you are not asking the linking function to clone the template, create the DOM element(s)
   *   before you send them to the compiler and keep this reference around.
   *   ```js
   *     var element = $compile('<p>{{total}}</p>')(scope);
   *   ```
   *
   * - if on the other hand, you need the element to be cloned, the view reference from the original
   *   example would not point to the clone, but rather to the original template that was cloned. In
   *   this case, you can access the clone via the cloneAttachFn:
   *   ```js
   *     var templateElement = angular.element('<p>{{total}}</p>'),
   *         scope = ....;
   *
   *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
   *
   *     //now we have reference to the cloned DOM via `clonedElement`
   *   ```
   *
   *
   * For information on how the compiler works, see the
   * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
   */

  var $compileMinErr = minErr('$compile');

  /**
   * @ngdoc provider
   * @name $compileProvider
   * @kind function
   *
   * @description
   */
  $CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
  function $CompileProvider($provide, $$sanitizeUriProvider) {
    var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\d\w_\-]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\d\w_\-]+)(?:\:([^;]+))?;?)/;

    // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
    // The assumption is that future DOM event attribute names will begin with
    // 'on' and be composed of only English letters.
    var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

    /**
     * @ngdoc method
     * @name $compileProvider#directive
     * @kind function
     *
     * @description
     * Register a new directive with the compiler.
     *
     * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
     *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
     *    names and the values are the factories.
     * @param {Function|Array} directiveFactory An injectable directive factory function. See
     *    {@link guide/directive} for more info.
     * @returns {ng.$compileProvider} Self for chaining.
     */
    this.directive = function registerDirective(name, directiveFactory) {
      assertNotHasOwnProperty(name, 'directive');
      if (isString(name)) {
        assertArg(directiveFactory, 'directiveFactory');
        if (!hasDirectives.hasOwnProperty(name)) {
          hasDirectives[name] = [];
          $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
            function($injector, $exceptionHandler) {
              var directives = [];
              forEach(hasDirectives[name], function(directiveFactory, index) {
                try {
                  var directive = $injector.invoke(directiveFactory);
                  if (isFunction(directive)) {
                    directive = { compile: valueFn(directive) };
                  } else if (!directive.compile && directive.link) {
                    directive.compile = valueFn(directive.link);
                  }
                  directive.priority = directive.priority || 0;
                  directive.index = index;
                  directive.name = directive.name || name;
                  directive.require = directive.require || (directive.controller && directive.name);
                  directive.restrict = directive.restrict || 'A';
                  directives.push(directive);
                } catch (e) {
                  $exceptionHandler(e);
                }
              });
              return directives;
            }]);
        }
        hasDirectives[name].push(directiveFactory);
      } else {
        forEach(name, reverseParams(registerDirective));
      }
      return this;
    };


    /**
     * @ngdoc method
     * @name $compileProvider#aHrefSanitizationWhitelist
     * @kind function
     *
     * @description
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe
     * urls during a[href] sanitization.
     *
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.
     *
     * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
     * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
     *
     * @param {RegExp=} regexp New regexp to whitelist urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.aHrefSanitizationWhitelist = function(regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
      }
    };


    /**
     * @ngdoc method
     * @name $compileProvider#imgSrcSanitizationWhitelist
     * @kind function
     *
     * @description
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe
     * urls during img[src] sanitization.
     *
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.
     *
     * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
     * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
     *
     * @param {RegExp=} regexp New regexp to whitelist urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.imgSrcSanitizationWhitelist = function(regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
      }
    };

    this.$get = [
      '$injector', '$interpolate', '$exceptionHandler', '$http', '$templateCache', '$parse',
      '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
      function($injector,   $interpolate,   $exceptionHandler,   $http,   $templateCache,   $parse,
               $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {

        var Attributes = function(element, attr) {
          this.$$element = element;
          this.$attr = attr || {};
        };

        Attributes.prototype = {
          $normalize: directiveNormalize,


          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$addClass
           * @kind function
           *
           * @description
           * Adds the CSS class value specified by the classVal parameter to the element. If animations
           * are enabled then an animation will be triggered for the class addition.
           *
           * @param {string} classVal The className value that will be added to the element
           */
          $addClass : function(classVal) {
            if(classVal && classVal.length > 0) {
              $animate.addClass(this.$$element, classVal);
            }
          },

          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$removeClass
           * @kind function
           *
           * @description
           * Removes the CSS class value specified by the classVal parameter from the element. If
           * animations are enabled then an animation will be triggered for the class removal.
           *
           * @param {string} classVal The className value that will be removed from the element
           */
          $removeClass : function(classVal) {
            if(classVal && classVal.length > 0) {
              $animate.removeClass(this.$$element, classVal);
            }
          },

          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$updateClass
           * @kind function
           *
           * @description
           * Adds and removes the appropriate CSS class values to the element based on the difference
           * between the new and old CSS class values (specified as newClasses and oldClasses).
           *
           * @param {string} newClasses The current CSS className value
           * @param {string} oldClasses The former CSS className value
           */
          $updateClass : function(newClasses, oldClasses) {
            var toAdd = tokenDifference(newClasses, oldClasses);
            var toRemove = tokenDifference(oldClasses, newClasses);

            if(toAdd.length === 0) {
              $animate.removeClass(this.$$element, toRemove);
            } else if(toRemove.length === 0) {
              $animate.addClass(this.$$element, toAdd);
            } else {
              $animate.setClass(this.$$element, toAdd, toRemove);
            }
          },

          /**
           * Set a normalized attribute on the element in a way such that all directives
           * can share the attribute. This function properly handles boolean attributes.
           * @param {string} key Normalized key. (ie ngAttribute)
           * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
           * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
           *     Defaults to true.
           * @param {string=} attrName Optional none normalized name. Defaults to key.
           */
          $set: function(key, value, writeAttr, attrName) {
            // TODO: decide whether or not to throw an error if "class"
            //is set through this function since it may cause $updateClass to
            //become unstable.

            var booleanKey = getBooleanAttrName(this.$$element[0], key),
              normalizedVal,
              nodeName;

            if (booleanKey) {
              this.$$element.prop(key, value);
              attrName = booleanKey;
            }

            this[key] = value;

            // translate normalized key to actual key
            if (attrName) {
              this.$attr[key] = attrName;
            } else {
              attrName = this.$attr[key];
              if (!attrName) {
                this.$attr[key] = attrName = snake_case(key, '-');
              }
            }

            nodeName = nodeName_(this.$$element);

            // sanitize a[href] and img[src] values
            if ((nodeName === 'A' && key === 'href') ||
              (nodeName === 'IMG' && key === 'src')) {
              this[key] = value = $$sanitizeUri(value, key === 'src');
            }

            if (writeAttr !== false) {
              if (value === null || value === undefined) {
                this.$$element.removeAttr(attrName);
              } else {
                this.$$element.attr(attrName, value);
              }
            }

            // fire observers
            var $$observers = this.$$observers;
            $$observers && forEach($$observers[key], function(fn) {
              try {
                fn(value);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
          },


          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$observe
           * @kind function
           *
           * @description
           * Observes an interpolated attribute.
           *
           * The observer function will be invoked once during the next `$digest` following
           * compilation. The observer is then invoked whenever the interpolated value
           * changes.
           *
           * @param {string} key Normalized key. (ie ngAttribute) .
           * @param {function(interpolatedValue)} fn Function that will be called whenever
           the interpolated value of the attribute changes.
           *        See the {@link guide/directive#Attributes Directives} guide for more info.
           * @returns {function()} the `fn` parameter.
           */
          $observe: function(key, fn) {
            var attrs = this,
              $$observers = (attrs.$$observers || (attrs.$$observers = {})),
              listeners = ($$observers[key] || ($$observers[key] = []));

            listeners.push(fn);
            $rootScope.$evalAsync(function() {
              if (!listeners.$$inter) {
                // no one registered attribute interpolation function, so lets call it manually
                fn(attrs[key]);
              }
            });
            return fn;
          }
        };

        var startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')
            ? identity
            : function denormalizeTemplate(template) {
            return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
          },
          NG_ATTR_BINDING = /^ngAttr[A-Z]/;


        return compile;

        //================================

        function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
                         previousCompileContext) {
          if (!($compileNodes instanceof jqLite)) {
            // jquery always rewraps, whereas we need to preserve the original selector so that we can
            // modify it.
            $compileNodes = jqLite($compileNodes);
          }
          // We can not compile top level text elements since text nodes can be merged and we will
          // not be able to attach scope data to them, so we will wrap them in <span>
          forEach($compileNodes, function(node, index){
            if (node.nodeType == 3 /* text node */ && node.nodeValue.match(/\S+/) /* non-empty */ ) {
              $compileNodes[index] = node = jqLite(node).wrap('<span></span>').parent()[0];
            }
          });
          var compositeLinkFn =
            compileNodes($compileNodes, transcludeFn, $compileNodes,
              maxPriority, ignoreDirective, previousCompileContext);
          safeAddClass($compileNodes, 'ng-scope');
          return function publicLinkFn(scope, cloneConnectFn, transcludeControllers){
            assertArg(scope, 'scope');
            // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
            // and sometimes changes the structure of the DOM.
            var $linkNode = cloneConnectFn
              ? JQLitePrototype.clone.call($compileNodes) // IMPORTANT!!!
              : $compileNodes;

            forEach(transcludeControllers, function(instance, name) {
              $linkNode.data('$' + name + 'Controller', instance);
            });

            // Attach scope only to non-text nodes.
            for(var i = 0, ii = $linkNode.length; i<ii; i++) {
              var node = $linkNode[i],
                nodeType = node.nodeType;
              if (nodeType === 1 /* element */ || nodeType === 9 /* document */) {
                $linkNode.eq(i).data('$scope', scope);
              }
            }

            if (cloneConnectFn) cloneConnectFn($linkNode, scope);
            if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode);
            return $linkNode;
          };
        }

        function safeAddClass($element, className) {
          try {
            $element.addClass(className);
          } catch(e) {
            // ignore, since it means that we are trying to set class on
            // SVG element, where class name is read-only.
          }
        }

        /**
         * Compile function matches each node in nodeList against the directives. Once all directives
         * for a particular node are collected their compile functions are executed. The compile
         * functions return values - the linking functions - are combined into a composite linking
         * function, which is the a linking function for the node.
         *
         * @param {NodeList} nodeList an array of nodes or NodeList to compile
         * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
         *        scope argument is auto-generated to the new child of the transcluded parent scope.
         * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
         *        the rootElement must be set the jqLite collection of the compile root. This is
         *        needed so that the jqLite collection items can be replaced with widgets.
         * @param {number=} maxPriority Max directive priority.
         * @returns {Function} A composite linking function of all of the matched directives or null.
         */
        function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
                              previousCompileContext) {
          var linkFns = [],
            attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound;

          for (var i = 0; i < nodeList.length; i++) {
            attrs = new Attributes();

            // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
            directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
              ignoreDirective);

            nodeLinkFn = (directives.length)
              ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
              null, [], [], previousCompileContext)
              : null;

            if (nodeLinkFn && nodeLinkFn.scope) {
              safeAddClass(jqLite(nodeList[i]), 'ng-scope');
            }

            childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
              !(childNodes = nodeList[i].childNodes) ||
              !childNodes.length)
              ? null
              : compileNodes(childNodes,
              nodeLinkFn ? nodeLinkFn.transclude : transcludeFn);

            linkFns.push(nodeLinkFn, childLinkFn);
            linkFnFound = linkFnFound || nodeLinkFn || childLinkFn;
            //use the previous context only for the first element in the virtual group
            previousCompileContext = null;
          }

          // return a linking function if we have found anything, null otherwise
          return linkFnFound ? compositeLinkFn : null;

          function compositeLinkFn(scope, nodeList, $rootElement, boundTranscludeFn) {
            var nodeLinkFn, childLinkFn, node, $node, childScope, childTranscludeFn, i, ii, n;

            // copy nodeList so that linking doesn't break due to live list updates.
            var nodeListLength = nodeList.length,
              stableNodeList = new Array(nodeListLength);
            for (i = 0; i < nodeListLength; i++) {
              stableNodeList[i] = nodeList[i];
            }

            for(i = 0, n = 0, ii = linkFns.length; i < ii; n++) {
              node = stableNodeList[n];
              nodeLinkFn = linkFns[i++];
              childLinkFn = linkFns[i++];
              $node = jqLite(node);

              if (nodeLinkFn) {
                if (nodeLinkFn.scope) {
                  childScope = scope.$new();
                  $node.data('$scope', childScope);
                } else {
                  childScope = scope;
                }
                childTranscludeFn = nodeLinkFn.transclude;
                if (childTranscludeFn || (!boundTranscludeFn && transcludeFn)) {
                  nodeLinkFn(childLinkFn, childScope, node, $rootElement,
                    createBoundTranscludeFn(scope, childTranscludeFn || transcludeFn)
                  );
                } else {
                  nodeLinkFn(childLinkFn, childScope, node, $rootElement, boundTranscludeFn);
                }
              } else if (childLinkFn) {
                childLinkFn(scope, node.childNodes, undefined, boundTranscludeFn);
              }
            }
          }
        }

        function createBoundTranscludeFn(scope, transcludeFn) {
          return function boundTranscludeFn(transcludedScope, cloneFn, controllers) {
            var scopeCreated = false;

            if (!transcludedScope) {
              transcludedScope = scope.$new();
              transcludedScope.$$transcluded = true;
              scopeCreated = true;
            }

            var clone = transcludeFn(transcludedScope, cloneFn, controllers);
            if (scopeCreated) {
              clone.on('$destroy', bind(transcludedScope, transcludedScope.$destroy));
            }
            return clone;
          };
        }

        /**
         * Looks for directives on the given node and adds them to the directive collection which is
         * sorted.
         *
         * @param node Node to search.
         * @param directives An array to which the directives are added to. This array is sorted before
         *        the function returns.
         * @param attrs The shared attrs object which is used to populate the normalized attributes.
         * @param {number=} maxPriority Max directive priority.
         */
        function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
          var nodeType = node.nodeType,
            attrsMap = attrs.$attr,
            match,
            className;

          switch(nodeType) {
            case 1: /* Element */
              // use the node name: <directive>
              addDirective(directives,
                directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority, ignoreDirective);

              // iterate over the attributes
              for (var attr, name, nName, ngAttrName, value, nAttrs = node.attributes,
                     j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
                var attrStartName = false;
                var attrEndName = false;

                attr = nAttrs[j];
                if (!msie || msie >= 8 || attr.specified) {
                  name = attr.name;
                  // support ngAttr attribute binding
                  ngAttrName = directiveNormalize(name);
                  if (NG_ATTR_BINDING.test(ngAttrName)) {
                    name = snake_case(ngAttrName.substr(6), '-');
                  }

                  var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
                  if (ngAttrName === directiveNName + 'Start') {
                    attrStartName = name;
                    attrEndName = name.substr(0, name.length - 5) + 'end';
                    name = name.substr(0, name.length - 6);
                  }

                  nName = directiveNormalize(name.toLowerCase());
                  attrsMap[nName] = name;
                  attrs[nName] = value = trim(attr.value);
                  if (getBooleanAttrName(node, nName)) {
                    attrs[nName] = true; // presence means true
                  }
                  addAttrInterpolateDirective(node, directives, value, nName);
                  addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
                    attrEndName);
                }
              }

              // use class as directive
              className = node.className;
              if (isString(className) && className !== '') {
                while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
                  nName = directiveNormalize(match[2]);
                  if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                    attrs[nName] = trim(match[3]);
                  }
                  className = className.substr(match.index + match[0].length);
                }
              }
              break;
            case 3: /* Text Node */
              addTextInterpolateDirective(directives, node.nodeValue);
              break;
            case 8: /* Comment */
              try {
                match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
                if (match) {
                  nName = directiveNormalize(match[1]);
                  if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                    attrs[nName] = trim(match[2]);
                  }
                }
              } catch (e) {
                // turns out that under some circumstances IE9 throws errors when one attempts to read
                // comment's node value.
                // Just ignore it and continue. (Can't seem to reproduce in test case.)
              }
              break;
          }

          directives.sort(byPriority);
          return directives;
        }

        /**
         * Given a node with an directive-start it collects all of the siblings until it finds
         * directive-end.
         * @param node
         * @param attrStart
         * @param attrEnd
         * @returns {*}
         */
        function groupScan(node, attrStart, attrEnd) {
          var nodes = [];
          var depth = 0;
          if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
            var startNode = node;
            do {
              if (!node) {
                throw $compileMinErr('uterdir',
                  "Unterminated attribute, found '{0}' but no matching '{1}' found.",
                  attrStart, attrEnd);
              }
              if (node.nodeType == 1 /** Element **/) {
                if (node.hasAttribute(attrStart)) depth++;
                if (node.hasAttribute(attrEnd)) depth--;
              }
              nodes.push(node);
              node = node.nextSibling;
            } while (depth > 0);
          } else {
            nodes.push(node);
          }

          return jqLite(nodes);
        }

        /**
         * Wrapper for linking function which converts normal linking function into a grouped
         * linking function.
         * @param linkFn
         * @param attrStart
         * @param attrEnd
         * @returns {Function}
         */
        function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
          return function(scope, element, attrs, controllers, transcludeFn) {
            element = groupScan(element[0], attrStart, attrEnd);
            return linkFn(scope, element, attrs, controllers, transcludeFn);
          };
        }

        /**
         * Once the directives have been collected, their compile functions are executed. This method
         * is responsible for inlining directive templates as well as terminating the application
         * of the directives if the terminal directive has been reached.
         *
         * @param {Array} directives Array of collected directives to execute their compile function.
         *        this needs to be pre-sorted by priority order.
         * @param {Node} compileNode The raw DOM node to apply the compile functions to
         * @param {Object} templateAttrs The shared attribute function
         * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
         *                                                  scope argument is auto-generated to the new
         *                                                  child of the transcluded parent scope.
         * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
         *                              argument has the root jqLite array so that we can replace nodes
         *                              on it.
         * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
         *                                           compiling the transclusion.
         * @param {Array.<Function>} preLinkFns
         * @param {Array.<Function>} postLinkFns
         * @param {Object} previousCompileContext Context used for previous compilation of the current
         *                                        node
         * @returns {Function} linkFn
         */
        function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
                                       jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
                                       previousCompileContext) {
          previousCompileContext = previousCompileContext || {};

          var terminalPriority = -Number.MAX_VALUE,
            newScopeDirective,
            controllerDirectives = previousCompileContext.controllerDirectives,
            newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
            templateDirective = previousCompileContext.templateDirective,
            nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
            hasTranscludeDirective = false,
            hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
            $compileNode = templateAttrs.$$element = jqLite(compileNode),
            directive,
            directiveName,
            $template,
            replaceDirective = originalReplaceDirective,
            childTranscludeFn = transcludeFn,
            linkFn,
            directiveValue;

          // executes all directives on the current element
          for(var i = 0, ii = directives.length; i < ii; i++) {
            directive = directives[i];
            var attrStart = directive.$$start;
            var attrEnd = directive.$$end;

            // collect multiblock sections
            if (attrStart) {
              $compileNode = groupScan(compileNode, attrStart, attrEnd);
            }
            $template = undefined;

            if (terminalPriority > directive.priority) {
              break; // prevent further processing of directives
            }

            if (directiveValue = directive.scope) {
              newScopeDirective = newScopeDirective || directive;

              // skip the check for directives with async templates, we'll check the derived sync
              // directive when the template arrives
              if (!directive.templateUrl) {
                assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
                  $compileNode);
                if (isObject(directiveValue)) {
                  newIsolateScopeDirective = directive;
                }
              }
            }

            directiveName = directive.name;

            if (!directive.templateUrl && directive.controller) {
              directiveValue = directive.controller;
              controllerDirectives = controllerDirectives || {};
              assertNoDuplicate("'" + directiveName + "' controller",
                controllerDirectives[directiveName], directive, $compileNode);
              controllerDirectives[directiveName] = directive;
            }

            if (directiveValue = directive.transclude) {
              hasTranscludeDirective = true;

              // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
              // This option should only be used by directives that know how to safely handle element transclusion,
              // where the transcluded nodes are added or replaced after linking.
              if (!directive.$$tlb) {
                assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
                nonTlbTranscludeDirective = directive;
              }

              if (directiveValue == 'element') {
                hasElementTranscludeDirective = true;
                terminalPriority = directive.priority;
                $template = groupScan(compileNode, attrStart, attrEnd);
                $compileNode = templateAttrs.$$element =
                  jqLite(document.createComment(' ' + directiveName + ': ' +
                    templateAttrs[directiveName] + ' '));
                compileNode = $compileNode[0];
                replaceWith(jqCollection, jqLite(sliceArgs($template)), compileNode);

                childTranscludeFn = compile($template, transcludeFn, terminalPriority,
                    replaceDirective && replaceDirective.name, {
                    // Don't pass in:
                    // - controllerDirectives - otherwise we'll create duplicates controllers
                    // - newIsolateScopeDirective or templateDirective - combining templates with
                    //   element transclusion doesn't make sense.
                    //
                    // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                    // on the same element more than once.
                    nonTlbTranscludeDirective: nonTlbTranscludeDirective
                  });
              } else {
                $template = jqLite(jqLiteClone(compileNode)).contents();
                $compileNode.empty(); // clear contents
                childTranscludeFn = compile($template, transcludeFn);
              }
            }

            if (directive.template) {
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;

              directiveValue = (isFunction(directive.template))
                ? directive.template($compileNode, templateAttrs)
                : directive.template;

              directiveValue = denormalizeTemplate(directiveValue);

              if (directive.replace) {
                replaceDirective = directive;
                if (jqLiteIsTextNode(directiveValue)) {
                  $template = [];
                } else {
                  $template = jqLite(trim(directiveValue));
                }
                compileNode = $template[0];

                if ($template.length != 1 || compileNode.nodeType !== 1) {
                  throw $compileMinErr('tplrt',
                    "Template for directive '{0}' must have exactly one root element. {1}",
                    directiveName, '');
                }

                replaceWith(jqCollection, $compileNode, compileNode);

                var newTemplateAttrs = {$attr: {}};

                // combine directives from the original node and from the template:
                // - take the array of directives for this element
                // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
                // - collect directives from the template and sort them by priority
                // - combine directives as: processed + template + unprocessed
                var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
                var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

                if (newIsolateScopeDirective) {
                  markDirectivesAsIsolate(templateDirectives);
                }
                directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

                ii = directives.length;
              } else {
                $compileNode.html(directiveValue);
              }
            }

            if (directive.templateUrl) {
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;

              if (directive.replace) {
                replaceDirective = directive;
              }

              nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
                templateAttrs, jqCollection, childTranscludeFn, preLinkFns, postLinkFns, {
                  controllerDirectives: controllerDirectives,
                  newIsolateScopeDirective: newIsolateScopeDirective,
                  templateDirective: templateDirective,
                  nonTlbTranscludeDirective: nonTlbTranscludeDirective
                });
              ii = directives.length;
            } else if (directive.compile) {
              try {
                linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                if (isFunction(linkFn)) {
                  addLinkFns(null, linkFn, attrStart, attrEnd);
                } else if (linkFn) {
                  addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
                }
              } catch (e) {
                $exceptionHandler(e, startingTag($compileNode));
              }
            }

            if (directive.terminal) {
              nodeLinkFn.terminal = true;
              terminalPriority = Math.max(terminalPriority, directive.priority);
            }

          }

          nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
          nodeLinkFn.transclude = hasTranscludeDirective && childTranscludeFn;
          previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

          // might be normal or delayed nodeLinkFn depending on if templateUrl is present
          return nodeLinkFn;

          ////////////////////

          function addLinkFns(pre, post, attrStart, attrEnd) {
            if (pre) {
              if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
              pre.require = directive.require;
              pre.directiveName = directiveName;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                pre = cloneAndAnnotateFn(pre, {isolateScope: true});
              }
              preLinkFns.push(pre);
            }
            if (post) {
              if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
              post.require = directive.require;
              post.directiveName = directiveName;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                post = cloneAndAnnotateFn(post, {isolateScope: true});
              }
              postLinkFns.push(post);
            }
          }


          function getControllers(directiveName, require, $element, elementControllers) {
            var value, retrievalMethod = 'data', optional = false;
            if (isString(require)) {
              while((value = require.charAt(0)) == '^' || value == '?') {
                require = require.substr(1);
                if (value == '^') {
                  retrievalMethod = 'inheritedData';
                }
                optional = optional || value == '?';
              }
              value = null;

              if (elementControllers && retrievalMethod === 'data') {
                value = elementControllers[require];
              }
              value = value || $element[retrievalMethod]('$' + require + 'Controller');

              if (!value && !optional) {
                throw $compileMinErr('ctreq',
                  "Controller '{0}', required by directive '{1}', can't be found!",
                  require, directiveName);
              }
              return value;
            } else if (isArray(require)) {
              value = [];
              forEach(require, function(require) {
                value.push(getControllers(directiveName, require, $element, elementControllers));
              });
            }
            return value;
          }


          function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
            var attrs, $element, i, ii, linkFn, controller, isolateScope, elementControllers = {}, transcludeFn;

            if (compileNode === linkNode) {
              attrs = templateAttrs;
            } else {
              attrs = shallowCopy(templateAttrs, new Attributes(jqLite(linkNode), templateAttrs.$attr));
            }
            $element = attrs.$$element;

            if (newIsolateScopeDirective) {
              var LOCAL_REGEXP = /^\s*([@=&])(\??)\s*(\w*)\s*$/;
              var $linkNode = jqLite(linkNode);

              isolateScope = scope.$new(true);

              if (templateDirective && (templateDirective === newIsolateScopeDirective ||
                templateDirective === newIsolateScopeDirective.$$originalDirective)) {
                $linkNode.data('$isolateScope', isolateScope) ;
              } else {
                $linkNode.data('$isolateScopeNoTemplate', isolateScope);
              }



              safeAddClass($linkNode, 'ng-isolate-scope');

              forEach(newIsolateScopeDirective.scope, function(definition, scopeName) {
                var match = definition.match(LOCAL_REGEXP) || [],
                  attrName = match[3] || scopeName,
                  optional = (match[2] == '?'),
                  mode = match[1], // @, =, or &
                  lastValue,
                  parentGet, parentSet, compare;

                isolateScope.$$isolateBindings[scopeName] = mode + attrName;

                switch (mode) {

                  case '@':
                    attrs.$observe(attrName, function(value) {
                      isolateScope[scopeName] = value;
                    });
                    attrs.$$observers[attrName].$$scope = scope;
                    if( attrs[attrName] ) {
                      // If the attribute has been provided then we trigger an interpolation to ensure
                      // the value is there for use in the link fn
                      isolateScope[scopeName] = $interpolate(attrs[attrName])(scope);
                    }
                    break;

                  case '=':
                    if (optional && !attrs[attrName]) {
                      return;
                    }
                    parentGet = $parse(attrs[attrName]);
                    if (parentGet.literal) {
                      compare = equals;
                    } else {
                      compare = function(a,b) { return a === b; };
                    }
                    parentSet = parentGet.assign || function() {
                      // reset the change, or we will throw this exception on every $digest
                      lastValue = isolateScope[scopeName] = parentGet(scope);
                      throw $compileMinErr('nonassign',
                        "Expression '{0}' used with directive '{1}' is non-assignable!",
                        attrs[attrName], newIsolateScopeDirective.name);
                    };
                    lastValue = isolateScope[scopeName] = parentGet(scope);
                    isolateScope.$watch(function parentValueWatch() {
                      var parentValue = parentGet(scope);
                      if (!compare(parentValue, isolateScope[scopeName])) {
                        // we are out of sync and need to copy
                        if (!compare(parentValue, lastValue)) {
                          // parent changed and it has precedence
                          isolateScope[scopeName] = parentValue;
                        } else {
                          // if the parent can be assigned then do so
                          parentSet(scope, parentValue = isolateScope[scopeName]);
                        }
                      }
                      return lastValue = parentValue;
                    }, null, parentGet.literal);
                    break;

                  case '&':
                    parentGet = $parse(attrs[attrName]);
                    isolateScope[scopeName] = function(locals) {
                      return parentGet(scope, locals);
                    };
                    break;

                  default:
                    throw $compileMinErr('iscp',
                        "Invalid isolate scope definition for directive '{0}'." +
                        " Definition: {... {1}: '{2}' ...}",
                      newIsolateScopeDirective.name, scopeName, definition);
                }
              });
            }
            transcludeFn = boundTranscludeFn && controllersBoundTransclude;
            if (controllerDirectives) {
              forEach(controllerDirectives, function(directive) {
                var locals = {
                  $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                  $element: $element,
                  $attrs: attrs,
                  $transclude: transcludeFn
                }, controllerInstance;

                controller = directive.controller;
                if (controller == '@') {
                  controller = attrs[directive.name];
                }

                controllerInstance = $controller(controller, locals);
                // For directives with element transclusion the element is a comment,
                // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
                // clean up (http://bugs.jquery.com/ticket/8335).
                // Instead, we save the controllers for the element in a local hash and attach to .data
                // later, once we have the actual element.
                elementControllers[directive.name] = controllerInstance;
                if (!hasElementTranscludeDirective) {
                  $element.data('$' + directive.name + 'Controller', controllerInstance);
                }

                if (directive.controllerAs) {
                  locals.$scope[directive.controllerAs] = controllerInstance;
                }
              });
            }

            // PRELINKING
            for(i = 0, ii = preLinkFns.length; i < ii; i++) {
              try {
                linkFn = preLinkFns[i];
                linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs,
                    linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
              } catch (e) {
                $exceptionHandler(e, startingTag($element));
              }
            }

            // RECURSION
            // We only pass the isolate scope, if the isolate directive has a template,
            // otherwise the child elements do not belong to the isolate directive.
            var scopeToChild = scope;
            if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
              scopeToChild = isolateScope;
            }
            childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

            // POSTLINKING
            for(i = postLinkFns.length - 1; i >= 0; i--) {
              try {
                linkFn = postLinkFns[i];
                linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs,
                    linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
              } catch (e) {
                $exceptionHandler(e, startingTag($element));
              }
            }

            // This is the function that is injected as `$transclude`.
            function controllersBoundTransclude(scope, cloneAttachFn) {
              var transcludeControllers;

              // no scope passed
              if (arguments.length < 2) {
                cloneAttachFn = scope;
                scope = undefined;
              }

              if (hasElementTranscludeDirective) {
                transcludeControllers = elementControllers;
              }

              return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers);
            }
          }
        }

        function markDirectivesAsIsolate(directives) {
          // mark all directives as needing isolate scope.
          for (var j = 0, jj = directives.length; j < jj; j++) {
            directives[j] = inherit(directives[j], {$$isolateScope: true});
          }
        }

        /**
         * looks up the directive and decorates it with exception handling and proper parameters. We
         * call this the boundDirective.
         *
         * @param {string} name name of the directive to look up.
         * @param {string} location The directive must be found in specific format.
         *   String containing any of theses characters:
         *
         *   * `E`: element name
         *   * `A': attribute
         *   * `C`: class
         *   * `M`: comment
         * @returns {boolean} true if directive was added.
         */
        function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
                              endAttrName) {
          if (name === ignoreDirective) return null;
          var match = null;
          if (hasDirectives.hasOwnProperty(name)) {
            for(var directive, directives = $injector.get(name + Suffix),
                  i = 0, ii = directives.length; i<ii; i++) {
              try {
                directive = directives[i];
                if ( (maxPriority === undefined || maxPriority > directive.priority) &&
                  directive.restrict.indexOf(location) != -1) {
                  if (startAttrName) {
                    directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
                  }
                  tDirectives.push(directive);
                  match = directive;
                }
              } catch(e) { $exceptionHandler(e); }
            }
          }
          return match;
        }


        /**
         * When the element is replaced with HTML template then the new attributes
         * on the template need to be merged with the existing attributes in the DOM.
         * The desired effect is to have both of the attributes present.
         *
         * @param {object} dst destination attributes (original DOM)
         * @param {object} src source attributes (from the directive template)
         */
        function mergeTemplateAttributes(dst, src) {
          var srcAttr = src.$attr,
            dstAttr = dst.$attr,
            $element = dst.$$element;

          // reapply the old attributes to the new element
          forEach(dst, function(value, key) {
            if (key.charAt(0) != '$') {
              if (src[key] && src[key] !== value) {
                value += (key === 'style' ? ';' : ' ') + src[key];
              }
              dst.$set(key, value, true, srcAttr[key]);
            }
          });

          // copy the new attributes on the old attrs object
          forEach(src, function(value, key) {
            if (key == 'class') {
              safeAddClass($element, value);
              dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
            } else if (key == 'style') {
              $element.attr('style', $element.attr('style') + ';' + value);
              dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
              // `dst` will never contain hasOwnProperty as DOM parser won't let it.
              // You will get an "InvalidCharacterError: DOM Exception 5" error if you
              // have an attribute like "has-own-property" or "data-has-own-property", etc.
            } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
              dst[key] = value;
              dstAttr[key] = srcAttr[key];
            }
          });
        }


        function compileTemplateUrl(directives, $compileNode, tAttrs,
                                    $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
          var linkQueue = [],
            afterTemplateNodeLinkFn,
            afterTemplateChildLinkFn,
            beforeTemplateCompileNode = $compileNode[0],
            origAsyncDirective = directives.shift(),
          // The fact that we have to copy and patch the directive seems wrong!
            derivedSyncDirective = extend({}, origAsyncDirective, {
              templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
            }),
            templateUrl = (isFunction(origAsyncDirective.templateUrl))
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl;

          $compileNode.empty();

          $http.get($sce.getTrustedResourceUrl(templateUrl), {cache: $templateCache}).
            success(function(content) {
              var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

              content = denormalizeTemplate(content);

              if (origAsyncDirective.replace) {
                if (jqLiteIsTextNode(content)) {
                  $template = [];
                } else {
                  $template = jqLite(trim(content));
                }
                compileNode = $template[0];

                if ($template.length != 1 || compileNode.nodeType !== 1) {
                  throw $compileMinErr('tplrt',
                    "Template for directive '{0}' must have exactly one root element. {1}",
                    origAsyncDirective.name, templateUrl);
                }

                tempTemplateAttrs = {$attr: {}};
                replaceWith($rootElement, $compileNode, compileNode);
                var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

                if (isObject(origAsyncDirective.scope)) {
                  markDirectivesAsIsolate(templateDirectives);
                }
                directives = templateDirectives.concat(directives);
                mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
              } else {
                compileNode = beforeTemplateCompileNode;
                $compileNode.html(content);
              }

              directives.unshift(derivedSyncDirective);

              afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
                childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
                previousCompileContext);
              forEach($rootElement, function(node, i) {
                if (node == compileNode) {
                  $rootElement[i] = $compileNode[0];
                }
              });
              afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);


              while(linkQueue.length) {
                var scope = linkQueue.shift(),
                  beforeTemplateLinkNode = linkQueue.shift(),
                  linkRootElement = linkQueue.shift(),
                  boundTranscludeFn = linkQueue.shift(),
                  linkNode = $compileNode[0];

                if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                  var oldClasses = beforeTemplateLinkNode.className;

                  if (!(previousCompileContext.hasElementTranscludeDirective &&
                    origAsyncDirective.replace)) {
                    // it was cloned therefore we have to clone as well.
                    linkNode = jqLiteClone(compileNode);
                  }

                  replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

                  // Copy in CSS classes from original node
                  safeAddClass(jqLite(linkNode), oldClasses);
                }
                if (afterTemplateNodeLinkFn.transclude) {
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude);
                } else {
                  childBoundTranscludeFn = boundTranscludeFn;
                }
                afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
                  childBoundTranscludeFn);
              }
              linkQueue = null;
            }).
            error(function(response, code, headers, config) {
              throw $compileMinErr('tpload', 'Failed to load template: {0}', config.url);
            });

          return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
            if (linkQueue) {
              linkQueue.push(scope);
              linkQueue.push(node);
              linkQueue.push(rootElement);
              linkQueue.push(boundTranscludeFn);
            } else {
              afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, boundTranscludeFn);
            }
          };
        }


        /**
         * Sorting function for bound directives.
         */
        function byPriority(a, b) {
          var diff = b.priority - a.priority;
          if (diff !== 0) return diff;
          if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
          return a.index - b.index;
        }


        function assertNoDuplicate(what, previousDirective, directive, element) {
          if (previousDirective) {
            throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}',
              previousDirective.name, directive.name, what, startingTag(element));
          }
        }


        function addTextInterpolateDirective(directives, text) {
          var interpolateFn = $interpolate(text, true);
          if (interpolateFn) {
            directives.push({
              priority: 0,
              compile: valueFn(function textInterpolateLinkFn(scope, node) {
                var parent = node.parent(),
                  bindings = parent.data('$binding') || [];
                bindings.push(interpolateFn);
                safeAddClass(parent.data('$binding', bindings), 'ng-binding');
                scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                  node[0].nodeValue = value;
                });
              })
            });
          }
        }


        function getTrustedContext(node, attrNormalizedName) {
          if (attrNormalizedName == "srcdoc") {
            return $sce.HTML;
          }
          var tag = nodeName_(node);
          // maction[xlink:href] can source SVG.  It's not limited to <maction>.
          if (attrNormalizedName == "xlinkHref" ||
            (tag == "FORM" && attrNormalizedName == "action") ||
            (tag != "IMG" && (attrNormalizedName == "src" ||
              attrNormalizedName == "ngSrc"))) {
            return $sce.RESOURCE_URL;
          }
        }


        function addAttrInterpolateDirective(node, directives, value, name) {
          var interpolateFn = $interpolate(value, true);

          // no interpolation found -> ignore
          if (!interpolateFn) return;


          if (name === "multiple" && nodeName_(node) === "SELECT") {
            throw $compileMinErr("selmulti",
              "Binding to the 'multiple' attribute is not supported. Element: {0}",
              startingTag(node));
          }

          directives.push({
            priority: 100,
            compile: function() {
              return {
                pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                  var $$observers = (attr.$$observers || (attr.$$observers = {}));

                  if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                    throw $compileMinErr('nodomevents',
                        "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
                        "ng- versions (such as ng-click instead of onclick) instead.");
                  }

                  // we need to interpolate again, in case the attribute value has been updated
                  // (e.g. by another directive's compile function)
                  interpolateFn = $interpolate(attr[name], true, getTrustedContext(node, name));

                  // if attribute was updated so that there is no interpolation going on we don't want to
                  // register any observers
                  if (!interpolateFn) return;

                  // TODO(i): this should likely be attr.$set(name, iterpolateFn(scope) so that we reset the
                  // actual attr value
                  attr[name] = interpolateFn(scope);
                  ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                  (attr.$$observers && attr.$$observers[name].$$scope || scope).
                    $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                      //special case for class attribute addition + removal
                      //so that class changes can tap into the animation
                      //hooks provided by the $animate service. Be sure to
                      //skip animations when the first digest occurs (when
                      //both the new and the old values are the same) since
                      //the CSS classes are the non-interpolated values
                      if(name === 'class' && newValue != oldValue) {
                        attr.$updateClass(newValue, oldValue);
                      } else {
                        attr.$set(name, newValue);
                      }
                    });
                }
              };
            }
          });
        }


        /**
         * This is a special jqLite.replaceWith, which can replace items which
         * have no parents, provided that the containing jqLite collection is provided.
         *
         * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
         *                               in the root of the tree.
         * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
         *                                  the shell, but replace its DOM node reference.
         * @param {Node} newNode The new DOM node.
         */
        function replaceWith($rootElement, elementsToRemove, newNode) {
          var firstElementToRemove = elementsToRemove[0],
            removeCount = elementsToRemove.length,
            parent = firstElementToRemove.parentNode,
            i, ii;

          if ($rootElement) {
            for(i = 0, ii = $rootElement.length; i < ii; i++) {
              if ($rootElement[i] == firstElementToRemove) {
                $rootElement[i++] = newNode;
                for (var j = i, j2 = j + removeCount - 1,
                       jj = $rootElement.length;
                     j < jj; j++, j2++) {
                  if (j2 < jj) {
                    $rootElement[j] = $rootElement[j2];
                  } else {
                    delete $rootElement[j];
                  }
                }
                $rootElement.length -= removeCount - 1;
                break;
              }
            }
          }

          if (parent) {
            parent.replaceChild(newNode, firstElementToRemove);
          }
          var fragment = document.createDocumentFragment();
          fragment.appendChild(firstElementToRemove);
          newNode[jqLite.expando] = firstElementToRemove[jqLite.expando];
          for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
            var element = elementsToRemove[k];
            jqLite(element).remove(); // must do this way to clean up expando
            fragment.appendChild(element);
            delete elementsToRemove[k];
          }

          elementsToRemove[0] = newNode;
          elementsToRemove.length = 1;
        }


        function cloneAndAnnotateFn(fn, annotation) {
          return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
        }
      }];
  }

  var PREFIX_REGEXP = /^(x[\:\-_]|data[\:\-_])/i;
  /**
   * Converts all accepted directives format into proper directive name.
   * All of these will become 'myDirective':
   *   my:Directive
   *   my-directive
   *   x-my-directive
   *   data-my:directive
   *
   * Also there is special case for Moz prefix starting with upper case letter.
   * @param name Name to normalize
   */
  function directiveNormalize(name) {
    return camelCase(name.replace(PREFIX_REGEXP, ''));
  }

  /**
   * @ngdoc type
   * @name $compile.directive.Attributes
   *
   * @description
   * A shared object between directive compile / linking functions which contains normalized DOM
   * element attributes. The values reflect current binding state `{{ }}`. The normalization is
   * needed since all of these are treated as equivalent in Angular:
   *
   * ```
   *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
   * ```
   */

  /**
   * @ngdoc property
   * @name $compile.directive.Attributes#$attr
   * @returns {object} A map of DOM element attribute names to the normalized name. This is
   *                   needed to do reverse lookup from normalized name back to actual name.
   */


  /**
   * @ngdoc method
   * @name $compile.directive.Attributes#$set
   * @kind function
   *
   * @description
   * Set DOM element attribute value.
   *
   *
   * @param {string} name Normalized element attribute name of the property to modify. The name is
   *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
   *          property to the original name.
   * @param {string} value Value to set the attribute to. The value can be an interpolated string.
   */



  /**
   * Closure compiler type information
   */

  function nodesetLinkingFn(
    /* angular.Scope */ scope,
    /* NodeList */ nodeList,
    /* Element */ rootElement,
    /* function(Function) */ boundTranscludeFn
    ){}

  function directiveLinkingFn(
    /* nodesetLinkingFn */ nodesetLinkingFn,
    /* angular.Scope */ scope,
    /* Node */ node,
    /* Element */ rootElement,
    /* function(Function) */ boundTranscludeFn
    ){}

  function tokenDifference(str1, str2) {
    var values = '',
      tokens1 = str1.split(/\s+/),
      tokens2 = str2.split(/\s+/);

    outer:
      for(var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for(var j = 0; j < tokens2.length; j++) {
          if(token == tokens2[j]) continue outer;
        }
        values += (values.length > 0 ? ' ' : '') + token;
      }
    return values;
  }

  /**
   * @ngdoc provider
   * @name $controllerProvider
   * @description
   * The {@link ng.$controller $controller service} is used by Angular to create new
   * controllers.
   *
   * This provider allows controller registration via the
   * {@link ng.$controllerProvider#register register} method.
   */
  function $ControllerProvider() {
    var controllers = {},
      CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;


    /**
     * @ngdoc method
     * @name $controllerProvider#register
     * @param {string|Object} name Controller name, or an object map of controllers where the keys are
     *    the names and the values are the constructors.
     * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
     *    annotations in the array notation).
     */
    this.register = function(name, constructor) {
      assertNotHasOwnProperty(name, 'controller');
      if (isObject(name)) {
        extend(controllers, name);
      } else {
        controllers[name] = constructor;
      }
    };


    this.$get = ['$injector', '$window', function($injector, $window) {

      /**
       * @ngdoc service
       * @name $controller
       * @requires $injector
       *
       * @param {Function|string} constructor If called with a function then it's considered to be the
       *    controller constructor function. Otherwise it's considered to be a string which is used
       *    to retrieve the controller constructor using the following steps:
       *
       *    * check if a controller with given name is registered via `$controllerProvider`
       *    * check if evaluating the string on the current scope returns a constructor
       *    * check `window[constructor]` on the global `window` object
       *
       * @param {Object} locals Injection locals for Controller.
       * @return {Object} Instance of given controller.
       *
       * @description
       * `$controller` service is responsible for instantiating controllers.
       *
       * It's just a simple call to {@link auto.$injector $injector}, but extracted into
       * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
       */
      return function(expression, locals) {
        var instance, match, constructor, identifier;

        if(isString(expression)) {
          match = expression.match(CNTRL_REG),
            constructor = match[1],
            identifier = match[3];
          expression = controllers.hasOwnProperty(constructor)
            ? controllers[constructor]
            : getter(locals.$scope, constructor, true) || getter($window, constructor, true);

          assertArgFn(expression, constructor, true);
        }

        instance = $injector.instantiate(expression, locals);

        if (identifier) {
          if (!(locals && typeof locals.$scope == 'object')) {
            throw minErr('$controller')('noscp',
              "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
                constructor || expression.name, identifier);
          }

          locals.$scope[identifier] = instance;
        }

        return instance;
      };
    }];
  }

  /**
   * @ngdoc service
   * @name $document
   * @requires $window
   *
   * @description
   * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
   *
   * @example
   <example>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <p>$document title: <b ng-bind="title"></b></p>
   <p>window.document title: <b ng-bind="windowTitle"></b></p>
   </div>
   </file>
   <file name="script.js">
   function MainCtrl($scope, $document) {
         $scope.title = $document[0].title;
         $scope.windowTitle = angular.element(window.document)[0].title;
       }
   </file>
   </example>
   */
  function $DocumentProvider(){
    this.$get = ['$window', function(window){
      return jqLite(window.document);
    }];
  }

  /**
   * @ngdoc service
   * @name $exceptionHandler
   * @requires ng.$log
   *
   * @description
   * Any uncaught exception in angular expressions is delegated to this service.
   * The default implementation simply delegates to `$log.error` which logs it into
   * the browser console.
   *
   * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
   * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
   *
   * ## Example:
   *
   * ```js
   *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function () {
 *     return function (exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
   * ```
   *
   * This example will override the normal action of `$exceptionHandler`, to make angular
   * exceptions fail hard when they happen, instead of just logging to the console.
   *
   * @param {Error} exception Exception associated with the error.
   * @param {string=} cause optional information about the context in which
   *       the error was thrown.
   *
   */
  function $ExceptionHandlerProvider() {
    this.$get = ['$log', function($log) {
      return function(exception, cause) {
        $log.error.apply($log, arguments);
      };
    }];
  }

  /**
   * Parse headers into key value object
   *
   * @param {string} headers Raw headers as a string
   * @returns {Object} Parsed headers as key value object
   */
  function parseHeaders(headers) {
    var parsed = {}, key, val, i;

    if (!headers) return parsed;

    forEach(headers.split('\n'), function(line) {
      i = line.indexOf(':');
      key = lowercase(trim(line.substr(0, i)));
      val = trim(line.substr(i + 1));

      if (key) {
        if (parsed[key]) {
          parsed[key] += ', ' + val;
        } else {
          parsed[key] = val;
        }
      }
    });

    return parsed;
  }


  /**
   * Returns a function that provides access to parsed headers.
   *
   * Headers are lazy parsed when first requested.
   * @see parseHeaders
   *
   * @param {(string|Object)} headers Headers to provide access to.
   * @returns {function(string=)} Returns a getter function which if called with:
   *
   *   - if called with single an argument returns a single header value or null
   *   - if called with no arguments returns an object containing all headers.
   */
  function headersGetter(headers) {
    var headersObj = isObject(headers) ? headers : undefined;

    return function(name) {
      if (!headersObj) headersObj =  parseHeaders(headers);

      if (name) {
        return headersObj[lowercase(name)] || null;
      }

      return headersObj;
    };
  }


  /**
   * Chain all given functions
   *
   * This function is used for both request and response transforming
   *
   * @param {*} data Data to transform.
   * @param {function(string=)} headers Http headers getter fn.
   * @param {(Function|Array.<Function>)} fns Function or an array of functions.
   * @returns {*} Transformed data.
   */
  function transformData(data, headers, fns) {
    if (isFunction(fns))
      return fns(data, headers);

    forEach(fns, function(fn) {
      data = fn(data, headers);
    });

    return data;
  }


  function isSuccess(status) {
    return 200 <= status && status < 300;
  }


  function $HttpProvider() {
    var JSON_START = /^\s*(\[|\{[^\{])/,
      JSON_END = /[\}\]]\s*$/,
      PROTECTION_PREFIX = /^\)\]\}',?\n/,
      CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': 'application/json;charset=utf-8'};

    var defaults = this.defaults = {
      // transform incoming response data
      transformResponse: [function(data) {
        if (isString(data)) {
          // strip json vulnerability protection prefix
          data = data.replace(PROTECTION_PREFIX, '');
          if (JSON_START.test(data) && JSON_END.test(data))
            data = fromJson(data);
        }
        return data;
      }],

      // transform outgoing request data
      transformRequest: [function(d) {
        return isObject(d) && !isFile(d) && !isBlob(d) ? toJson(d) : d;
      }],

      // default headers
      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        },
        post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
        put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
        patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
      },

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN'
    };

    /**
     * Are ordered by request, i.e. they are applied in the same order as the
     * array, on request, but reverse order, on response.
     */
    var interceptorFactories = this.interceptors = [];

    /**
     * For historical reasons, response interceptors are ordered by the order in which
     * they are applied to the response. (This is the opposite of interceptorFactories)
     */
    var responseInterceptorFactories = this.responseInterceptors = [];

    this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',
      function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {

        var defaultCache = $cacheFactory('$http');

        /**
         * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
         * The reversal is needed so that we can build up the interception chain around the
         * server request.
         */
        var reversedInterceptors = [];

        forEach(interceptorFactories, function(interceptorFactory) {
          reversedInterceptors.unshift(isString(interceptorFactory)
            ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
        });

        forEach(responseInterceptorFactories, function(interceptorFactory, index) {
          var responseFn = isString(interceptorFactory)
            ? $injector.get(interceptorFactory)
            : $injector.invoke(interceptorFactory);

          /**
           * Response interceptors go before "around" interceptors (no real reason, just
           * had to pick one.) But they are already reversed, so we can't use unshift, hence
           * the splice.
           */
          reversedInterceptors.splice(index, 0, {
            response: function(response) {
              return responseFn($q.when(response));
            },
            responseError: function(response) {
              return responseFn($q.reject(response));
            }
          });
        });


        /**
         * @ngdoc service
         * @kind function
         * @name $http
         * @requires ng.$httpBackend
         * @requires $cacheFactory
         * @requires $rootScope
         * @requires $q
         * @requires $injector
         *
         * @description
         * The `$http` service is a core Angular service that facilitates communication with the remote
         * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
         * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
         *
         * For unit testing applications that use `$http` service, see
         * {@link ngMock.$httpBackend $httpBackend mock}.
         *
         * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
         *
         * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
         * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
         * it is important to familiarize yourself with these APIs and the guarantees they provide.
         *
         *
         * # General usage
         * The `$http` service is a function which takes a single argument — a configuration object —
         * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
         * with two $http specific methods: `success` and `error`.
         *
         * ```js
         *   $http({method: 'GET', url: '/someUrl'}).
         *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
         *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
         * ```
         *
         * Since the returned value of calling the $http function is a `promise`, you can also use
         * the `then` method to register callbacks, and these callbacks will receive a single argument –
         * an object representing the response. See the API signature and type info below for more
         * details.
         *
         * A response status code between 200 and 299 is considered a success status and
         * will result in the success callback being called. Note that if the response is a redirect,
         * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
         * called for such responses.
         *
         * # Writing Unit Tests that use $http
         * When unit testing (using {@link ngMock ngMock}), it is necessary to call
         * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
         * request using trained responses.
         *
         * ```
         * $httpBackend.expectGET(...);
         * $http.get(...);
         * $httpBackend.flush();
         * ```
         *
         * # Shortcut methods
         *
         * Shortcut methods are also available. All shortcut methods require passing in the URL, and
         * request data must be passed in for POST/PUT requests.
         *
         * ```js
         *   $http.get('/someUrl').success(successCallback);
         *   $http.post('/someUrl', data).success(successCallback);
         * ```
         *
         * Complete list of shortcut methods:
         *
         * - {@link ng.$http#get $http.get}
         * - {@link ng.$http#head $http.head}
         * - {@link ng.$http#post $http.post}
         * - {@link ng.$http#put $http.put}
         * - {@link ng.$http#delete $http.delete}
         * - {@link ng.$http#jsonp $http.jsonp}
         *
         *
         * # Setting HTTP Headers
         *
         * The $http service will automatically add certain HTTP headers to all requests. These defaults
         * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
         * object, which currently contains this default configuration:
         *
         * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
         *   - `Accept: application/json, text/plain, * / *`
         * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
         *   - `Content-Type: application/json`
         * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
         *   - `Content-Type: application/json`
         *
         * To add or overwrite these defaults, simply add or remove a property from these configuration
         * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
         * with the lowercased HTTP method name as the key, e.g.
         * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.
         *
         * The defaults can also be set at runtime via the `$http.defaults` object in the same
         * fashion. For example:
         *
         * ```
         * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
     * });
         * ```
         *
         * In addition, you can supply a `headers` property in the config object passed when
         * calling `$http(config)`, which overrides the defaults without changing them globally.
         *
         *
         * # Transforming Requests and Responses
         *
         * Both requests and responses can be transformed using transform functions. By default, Angular
         * applies these transformations:
         *
         * Request transformations:
         *
         * - If the `data` property of the request configuration object contains an object, serialize it
         *   into JSON format.
         *
         * Response transformations:
         *
         *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
         *  - If JSON response is detected, deserialize it using a JSON parser.
         *
         * To globally augment or override the default transforms, modify the
         * `$httpProvider.defaults.transformRequest` and `$httpProvider.defaults.transformResponse`
         * properties. These properties are by default an array of transform functions, which allows you
         * to `push` or `unshift` a new transformation function into the transformation chain. You can
         * also decide to completely override any default transformations by assigning your
         * transformation functions to these properties directly without the array wrapper.  These defaults
         * are again available on the $http factory at run-time, which may be useful if you have run-time
         * services you wish to be involved in your transformations.
         *
         * Similarly, to locally override the request/response transforms, augment the
         * `transformRequest` and/or `transformResponse` properties of the configuration object passed
         * into `$http`.
         *
         *
         * # Caching
         *
         * To enable caching, set the request configuration `cache` property to `true` (to use default
         * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
         * When the cache is enabled, `$http` stores the response from the server in the specified
         * cache. The next time the same request is made, the response is served from the cache without
         * sending a request to the server.
         *
         * Note that even if the response is served from cache, delivery of the data is asynchronous in
         * the same way that real requests are.
         *
         * If there are multiple GET requests for the same URL that should be cached using the same
         * cache, but the cache is not populated yet, only one request to the server will be made and
         * the remaining requests will be fulfilled using the response from the first request.
         *
         * You can change the default cache to a new object (built with
         * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
         * {@link ng.$http#properties_defaults `$http.defaults.cache`} property. All requests who set
         * their `cache` property to `true` will now use this cache object.
         *
         * If you set the default cache to `false` then only requests that specify their own custom
         * cache object will be cached.
         *
         * # Interceptors
         *
         * Before you start creating interceptors, be sure to understand the
         * {@link ng.$q $q and deferred/promise APIs}.
         *
         * For purposes of global error handling, authentication, or any kind of synchronous or
         * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
         * able to intercept requests before they are handed to the server and
         * responses before they are handed over to the application code that
         * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
         *
         * The interceptors are service factories that are registered with the `$httpProvider` by
         * adding them to the `$httpProvider.interceptors` array. The factory is called and
         * injected with dependencies (if specified) and returns the interceptor.
         *
         * There are two kinds of interceptors (and two kinds of rejection interceptors):
         *
         *   * `request`: interceptors get called with a http `config` object. The function is free to
         *     modify the `config` object or create a new one. The function needs to return the `config`
         *     object directly, or a promise containing the `config` or a new `config` object.
         *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
         *     resolved with a rejection.
         *   * `response`: interceptors get called with http `response` object. The function is free to
         *     modify the `response` object or create a new one. The function needs to return the `response`
         *     object directly, or as a promise containing the `response` or a new `response` object.
         *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
         *     resolved with a rejection.
         *
         *
         * ```js
         *   // register the interceptor as a service
         *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
         *
         *   $httpProvider.interceptors.push('myHttpInterceptor');
         *
         *
         *   // alternatively, register the interceptor via an anonymous factory
         *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
         * ```
         *
         * # Response interceptors (DEPRECATED)
         *
         * Before you start creating interceptors, be sure to understand the
         * {@link ng.$q $q and deferred/promise APIs}.
         *
         * For purposes of global error handling, authentication or any kind of synchronous or
         * asynchronous preprocessing of received responses, it is desirable to be able to intercept
         * responses for http requests before they are handed over to the application code that
         * initiated these requests. The response interceptors leverage the {@link ng.$q
     * promise apis} to fulfil this need for both synchronous and asynchronous preprocessing.
         *
         * The interceptors are service factories that are registered with the $httpProvider by
         * adding them to the `$httpProvider.responseInterceptors` array. The factory is called and
         * injected with dependencies (if specified) and returns the interceptor  — a function that
         * takes a {@link ng.$q promise} and returns the original or a new promise.
         *
         * ```js
         *   // register the interceptor as a service
         *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       return promise.then(function(response) {
     *         // do something on success
     *         return response;
     *       }, function(response) {
     *         // do something on error
     *         if (canRecover(response)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(response);
     *       });
     *     }
     *   });
         *
         *   $httpProvider.responseInterceptors.push('myHttpInterceptor');
         *
         *
         *   // register the interceptor via an anonymous factory
         *   $httpProvider.responseInterceptors.push(function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       // same as above
     *     }
     *   });
         * ```
         *
         *
         * # Security Considerations
         *
         * When designing web applications, consider security threats from:
         *
         * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
         * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
         *
         * Both server and the client must cooperate in order to eliminate these threats. Angular comes
         * pre-configured with strategies that address these issues, but for this to work backend server
         * cooperation is required.
         *
         * ## JSON Vulnerability Protection
         *
         * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
         * allows third party website to turn your JSON resource URL into
         * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
         * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
         * Angular will automatically strip the prefix before processing it as JSON.
         *
         * For example if your server needs to return:
         * ```js
         * ['one','two']
         * ```
         *
         * which is vulnerable to attack, your server can return:
         * ```js
         * )]}',
         * ['one','two']
         * ```
         *
         * Angular will strip the prefix, before processing the JSON.
         *
         *
         * ## Cross Site Request Forgery (XSRF) Protection
         *
         * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
         * an unauthorized site can gain your user's private data. Angular provides a mechanism
         * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
         * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
         * JavaScript that runs on your domain could read the cookie, your server can be assured that
         * the XHR came from JavaScript running on your domain. The header will not be set for
         * cross-domain requests.
         *
         * To take advantage of this, your server needs to set a token in a JavaScript readable session
         * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
         * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
         * that only JavaScript running on your domain could have sent the request. The token must be
         * unique for each user and must be verifiable by the server (to prevent the JavaScript from
         * making up its own tokens). We recommend that the token is a digest of your site's
         * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography))
         * for added security.
         *
         * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
         * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
         * or the per-request config object.
         *
         *
         * @param {object} config Object describing the request to be made and how it should be
         *    processed. The object has following properties:
         *
         *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
         *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
         *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
         *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
         *      JSONified.
         *    - **data** – `{string|Object}` – Data to be sent as the request message data.
         *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
         *      HTTP headers to send to the server. If the return value of a function is null, the
         *      header will not be sent.
         *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
         *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
         *    - **transformRequest** –
         *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
         *      transform function or an array of such functions. The transform function takes the http
         *      request body and headers and returns its transformed (typically serialized) version.
         *    - **transformResponse** –
         *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
         *      transform function or an array of such functions. The transform function takes the http
         *      response body and headers and returns its transformed (typically deserialized) version.
         *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
         *      GET request, otherwise if a cache instance built with
         *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
         *      caching.
         *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
         *      that should abort the request when resolved.
         *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
         *      XHR object. See [requests with credentials]https://developer.mozilla.org/en/http_access_control#section_5
         *      for more information.
         *    - **responseType** - `{string}` - see
         *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
         *
         * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
         *   standard `then` method and two http specific methods: `success` and `error`. The `then`
         *   method takes two arguments a success and an error callback which will be called with a
         *   response object. The `success` and `error` methods take a single argument - a function that
         *   will be called when the request succeeds or fails respectively. The arguments passed into
         *   these functions are destructured representation of the response object passed into the
         *   `then` method. The response object has these properties:
         *
         *   - **data** – `{string|Object}` – The response body transformed with the transform
         *     functions.
         *   - **status** – `{number}` – HTTP status code of the response.
         *   - **headers** – `{function([headerName])}` – Header getter function.
         *   - **config** – `{Object}` – The configuration object that was used to generate the request.
         *   - **statusText** – `{string}` – HTTP status text of the response.
         *
         * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
         *   requests. This is primarily meant to be used for debugging purposes.
         *
         *
         * @example
         <example>
         <file name="index.html">
         <div ng-controller="FetchCtrl">
         <select ng-model="method">
         <option>GET</option>
         <option>JSONP</option>
         </select>
         <input type="text" ng-model="url" size="80"/>
         <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
         <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
         <button id="samplejsonpbtn"
         ng-click="updateModel('JSONP',
         'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
         Sample JSONP
         </button>
         <button id="invalidjsonpbtn"
         ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
         Invalid JSONP
         </button>
         <pre>http status code: {{status}}</pre>
         <pre>http response data: {{data}}</pre>
         </div>
         </file>
         <file name="script.js">
         function FetchCtrl($scope, $http, $templateCache) {
    $scope.method = 'GET';
    $scope.url = 'http-hello.html';

    $scope.fetch = function() {
      $scope.code = null;
      $scope.response = null;

      $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
        success(function(data, status) {
          $scope.status = status;
          $scope.data = data;
        }).
        error(function(data, status) {
          $scope.data = data || "Request failed";
          $scope.status = status;
      });
    };

    $scope.updateModel = function(method, url) {
      $scope.method = method;
      $scope.url = url;
    };
  }
         </file>
         <file name="http-hello.html">
         Hello, $http!
         </file>
         <file name="protractor.js" type="protractor">
         var status = element(by.binding('status'));
         var data = element(by.binding('data'));
         var fetchBtn = element(by.id('fetchbtn'));
         var sampleGetBtn = element(by.id('samplegetbtn'));
         var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
         var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

         it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

         it('should make a JSONP request to angularjs.org', function() {
    sampleJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Super Hero!/);
  });

         it('should make JSONP request to invalid URL and invoke the error handler',
         function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
         </file>
         </example>
         */
        function $http(requestConfig) {
          var config = {
            method: 'get',
            transformRequest: defaults.transformRequest,
            transformResponse: defaults.transformResponse
          };
          var headers = mergeHeaders(requestConfig);

          extend(config, requestConfig);
          config.headers = headers;
          config.method = uppercase(config.method);

          var xsrfValue = urlIsSameOrigin(config.url)
            ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]
            : undefined;
          if (xsrfValue) {
            headers[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
          }


          var serverRequest = function(config) {
            headers = config.headers;
            var reqData = transformData(config.data, headersGetter(headers), config.transformRequest);

            // strip content-type if data is undefined
            if (isUndefined(config.data)) {
              forEach(headers, function(value, header) {
                if (lowercase(header) === 'content-type') {
                  delete headers[header];
                }
              });
            }

            if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
              config.withCredentials = defaults.withCredentials;
            }

            // send request
            return sendReq(config, reqData, headers).then(transformResponse, transformResponse);
          };

          var chain = [serverRequest, undefined];
          var promise = $q.when(config);

          // apply interceptors
          forEach(reversedInterceptors, function(interceptor) {
            if (interceptor.request || interceptor.requestError) {
              chain.unshift(interceptor.request, interceptor.requestError);
            }
            if (interceptor.response || interceptor.responseError) {
              chain.push(interceptor.response, interceptor.responseError);
            }
          });

          while(chain.length) {
            var thenFn = chain.shift();
            var rejectFn = chain.shift();

            promise = promise.then(thenFn, rejectFn);
          }

          promise.success = function(fn) {
            promise.then(function(response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };

          promise.error = function(fn) {
            promise.then(null, function(response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };

          return promise;

          function transformResponse(response) {
            // make a copy since the response must be cacheable
            var resp = extend({}, response, {
              data: transformData(response.data, response.headers, config.transformResponse)
            });
            return (isSuccess(response.status))
              ? resp
              : $q.reject(resp);
          }

          function mergeHeaders(config) {
            var defHeaders = defaults.headers,
              reqHeaders = extend({}, config.headers),
              defHeaderName, lowercaseDefHeaderName, reqHeaderName;

            defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

            // execute if header value is function
            execHeaders(defHeaders);
            execHeaders(reqHeaders);

            // using for-in instead of forEach to avoid unecessary iteration after header has been found
            defaultHeadersIteration:
              for (defHeaderName in defHeaders) {
                lowercaseDefHeaderName = lowercase(defHeaderName);

                for (reqHeaderName in reqHeaders) {
                  if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                    continue defaultHeadersIteration;
                  }
                }

                reqHeaders[defHeaderName] = defHeaders[defHeaderName];
              }

            return reqHeaders;

            function execHeaders(headers) {
              var headerContent;

              forEach(headers, function(headerFn, header) {
                if (isFunction(headerFn)) {
                  headerContent = headerFn();
                  if (headerContent != null) {
                    headers[header] = headerContent;
                  } else {
                    delete headers[header];
                  }
                }
              });
            }
          }
        }

        $http.pendingRequests = [];

        /**
         * @ngdoc method
         * @name $http#get
         *
         * @description
         * Shortcut method to perform `GET` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */

        /**
         * @ngdoc method
         * @name $http#delete
         *
         * @description
         * Shortcut method to perform `DELETE` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */

        /**
         * @ngdoc method
         * @name $http#head
         *
         * @description
         * Shortcut method to perform `HEAD` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */

        /**
         * @ngdoc method
         * @name $http#jsonp
         *
         * @description
         * Shortcut method to perform `JSONP` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request.
         *                     Should contain `JSON_CALLBACK` string.
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */
        createShortMethods('get', 'delete', 'head', 'jsonp');

        /**
         * @ngdoc method
         * @name $http#post
         *
         * @description
         * Shortcut method to perform `POST` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {*} data Request content
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */

        /**
         * @ngdoc method
         * @name $http#put
         *
         * @description
         * Shortcut method to perform `PUT` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {*} data Request content
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */
        createShortMethodsWithData('post', 'put');

        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
        $http.defaults = defaults;


        return $http;


        function createShortMethods(names) {
          forEach(arguments, function(name) {
            $http[name] = function(url, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url
              }));
            };
          });
        }


        function createShortMethodsWithData(name) {
          forEach(arguments, function(name) {
            $http[name] = function(url, data, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url,
                data: data
              }));
            };
          });
        }


        /**
         * Makes the request.
         *
         * !!! ACCESSES CLOSURE VARS:
         * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
         */
        function sendReq(config, reqData, reqHeaders) {
          var deferred = $q.defer(),
            promise = deferred.promise,
            cache,
            cachedResp,
            url = buildUrl(config.url, config.params);

          $http.pendingRequests.push(config);
          promise.then(removePendingReq, removePendingReq);


          if ((config.cache || defaults.cache) && config.cache !== false && config.method == 'GET') {
            cache = isObject(config.cache) ? config.cache
              : isObject(defaults.cache) ? defaults.cache
              : defaultCache;
          }

          if (cache) {
            cachedResp = cache.get(url);
            if (isDefined(cachedResp)) {
              if (cachedResp.then) {
                // cached request has already been sent, but there is no response yet
                cachedResp.then(removePendingReq, removePendingReq);
                return cachedResp;
              } else {
                // serving from cache
                if (isArray(cachedResp)) {
                  resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
                } else {
                  resolvePromise(cachedResp, 200, {}, 'OK');
                }
              }
            } else {
              // put the promise for the non-transformed response into cache as a placeholder
              cache.put(url, promise);
            }
          }

          // if we won't have the response in cache, send the request to the backend
          if (isUndefined(cachedResp)) {
            $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
              config.withCredentials, config.responseType);
          }

          return promise;


          /**
           * Callback registered to $httpBackend():
           *  - caches the response if desired
           *  - resolves the raw $http promise
           *  - calls $apply
           */
          function done(status, response, headersString, statusText) {
            if (cache) {
              if (isSuccess(status)) {
                cache.put(url, [status, response, parseHeaders(headersString), statusText]);
              } else {
                // remove promise from the cache
                cache.remove(url);
              }
            }

            resolvePromise(response, status, headersString, statusText);
            if (!$rootScope.$$phase) $rootScope.$apply();
          }


          /**
           * Resolves the raw $http promise.
           */
          function resolvePromise(response, status, headers, statusText) {
            // normalize internal statuses to 0
            status = Math.max(status, 0);

            (isSuccess(status) ? deferred.resolve : deferred.reject)({
              data: response,
              status: status,
              headers: headersGetter(headers),
              config: config,
              statusText : statusText
            });
          }


          function removePendingReq() {
            var idx = indexOf($http.pendingRequests, config);
            if (idx !== -1) $http.pendingRequests.splice(idx, 1);
          }
        }


        function buildUrl(url, params) {
          if (!params) return url;
          var parts = [];
          forEachSorted(params, function(value, key) {
            if (value === null || isUndefined(value)) return;
            if (!isArray(value)) value = [value];

            forEach(value, function(v) {
              if (isObject(v)) {
                v = toJson(v);
              }
              parts.push(encodeUriQuery(key) + '=' +
                encodeUriQuery(v));
            });
          });
          if(parts.length > 0) {
            url += ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');
          }
          return url;
        }


      }];
  }

  function createXhr(method) {
    //if IE and the method is not RFC2616 compliant, or if XMLHttpRequest
    //is not available, try getting an ActiveXObject. Otherwise, use XMLHttpRequest
    //if it is available
    if (msie <= 8 && (!method.match(/^(get|post|head|put|delete|options)$/i) ||
      !window.XMLHttpRequest)) {
      return new window.ActiveXObject("Microsoft.XMLHTTP");
    } else if (window.XMLHttpRequest) {
      return new window.XMLHttpRequest();
    }

    throw minErr('$httpBackend')('noxhr', "This browser does not support XMLHttpRequest.");
  }

  /**
   * @ngdoc service
   * @name $httpBackend
   * @requires $window
   * @requires $document
   *
   * @description
   * HTTP backend used by the {@link ng.$http service} that delegates to
   * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
   *
   * You should never need to use this service directly, instead use the higher-level abstractions:
   * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
   *
   * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
   */
  function $HttpBackendProvider() {
    this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {
      return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
    }];
  }

  function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
    var ABORTED = -1;

    // TODO(vojta): fix the signature
    return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
      var status;
      $browser.$$incOutstandingRequestCount();
      url = url || $browser.url();

      if (lowercase(method) == 'jsonp') {
        var callbackId = '_' + (callbacks.counter++).toString(36);
        callbacks[callbackId] = function(data) {
          callbacks[callbackId].data = data;
          callbacks[callbackId].called = true;
        };

        var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
          callbackId, function(status, text) {
            completeRequest(callback, status, callbacks[callbackId].data, "", text);
            callbacks[callbackId] = noop;
          });
      } else {

        var xhr = createXhr(method);

        xhr.open(method, url, true);
        forEach(headers, function(value, key) {
          if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
          }
        });

        // In IE6 and 7, this might be called synchronously when xhr.send below is called and the
        // response is in the cache. the promise api will ensure that to the app code the api is
        // always async
        xhr.onreadystatechange = function() {
          // onreadystatechange might get called multiple times with readyState === 4 on mobile webkit caused by
          // xhrs that are resolved while the app is in the background (see #5426).
          // since calling completeRequest sets the `xhr` variable to null, we just check if it's not null before
          // continuing
          //
          // we can't set xhr.onreadystatechange to undefined or delete it because that breaks IE8 (method=PATCH) and
          // Safari respectively.
          if (xhr && xhr.readyState == 4) {
            var responseHeaders = null,
              response = null;

            if(status !== ABORTED) {
              responseHeaders = xhr.getAllResponseHeaders();

              // responseText is the old-school way of retrieving response (supported by IE8 & 9)
              // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
              response = ('response' in xhr) ? xhr.response : xhr.responseText;
            }

            completeRequest(callback,
                status || xhr.status,
              response,
              responseHeaders,
                xhr.statusText || '');
          }
        };

        if (withCredentials) {
          xhr.withCredentials = true;
        }

        if (responseType) {
          try {
            xhr.responseType = responseType;
          } catch (e) {
            // WebKit added support for the json responseType value on 09/03/2013
            // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
            // known to throw when setting the value "json" as the response type. Other older
            // browsers implementing the responseType
            //
            // The json response type can be ignored if not supported, because JSON payloads are
            // parsed on the client-side regardless.
            if (responseType !== 'json') {
              throw e;
            }
          }
        }

        xhr.send(post || null);
      }

      if (timeout > 0) {
        var timeoutId = $browserDefer(timeoutRequest, timeout);
      } else if (timeout && timeout.then) {
        timeout.then(timeoutRequest);
      }


      function timeoutRequest() {
        status = ABORTED;
        jsonpDone && jsonpDone();
        xhr && xhr.abort();
      }

      function completeRequest(callback, status, response, headersString, statusText) {
        // cancel timeout and subsequent timeout promise resolution
        timeoutId && $browserDefer.cancel(timeoutId);
        jsonpDone = xhr = null;

        // fix status code when it is 0 (0 status is undocumented).
        // Occurs when accessing file resources or on Android 4.1 stock browser
        // while retrieving files from application cache.
        if (status === 0) {
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
        }

        // normalize IE bug (http://bugs.jquery.com/ticket/1450)
        status = status === 1223 ? 204 : status;
        statusText = statusText || '';

        callback(status, response, headersString, statusText);
        $browser.$$completeOutstandingRequest(noop);
      }
    };

    function jsonpReq(url, callbackId, done) {
      // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:
      // - fetches local scripts via XHR and evals them
      // - adds and immediately removes script elements from the document
      var script = rawDocument.createElement('script'), callback = null;
      script.type = "text/javascript";
      script.src = url;
      script.async = true;

      callback = function(event) {
        removeEventListenerFn(script, "load", callback);
        removeEventListenerFn(script, "error", callback);
        rawDocument.body.removeChild(script);
        script = null;
        var status = -1;
        var text = "unknown";

        if (event) {
          if (event.type === "load" && !callbacks[callbackId].called) {
            event = { type: "error" };
          }
          text = event.type;
          status = event.type === "error" ? 404 : 200;
        }

        if (done) {
          done(status, text);
        }
      };

      addEventListenerFn(script, "load", callback);
      addEventListenerFn(script, "error", callback);

      if (msie <= 8) {
        script.onreadystatechange = function() {
          if (isString(script.readyState) && /loaded|complete/.test(script.readyState)) {
            script.onreadystatechange = null;
            callback({
              type: 'load'
            });
          }
        };
      }

      rawDocument.body.appendChild(script);
      return callback;
    }
  }

  var $interpolateMinErr = minErr('$interpolate');

  /**
   * @ngdoc provider
   * @name $interpolateProvider
   * @kind function
   *
   * @description
   *
   * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
   *
   * @example
   <example module="customInterpolationApp">
   <file name="index.html">
   <script>
   var customInterpolationApp = angular.module('customInterpolationApp', []);

   customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


   customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
   </script>
   <div ng-app="App" ng-controller="DemoController as demo">
   //demo.label//
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
   </file>
   </example>
   */
  function $InterpolateProvider() {
    var startSymbol = '{{';
    var endSymbol = '}}';

    /**
     * @ngdoc method
     * @name $interpolateProvider#startSymbol
     * @description
     * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
     * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
     */
    this.startSymbol = function(value){
      if (value) {
        startSymbol = value;
        return this;
      } else {
        return startSymbol;
      }
    };

    /**
     * @ngdoc method
     * @name $interpolateProvider#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * @param {string=} value new value to set the ending symbol to.
     * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
     */
    this.endSymbol = function(value){
      if (value) {
        endSymbol = value;
        return this;
      } else {
        return endSymbol;
      }
    };


    this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
      var startSymbolLength = startSymbol.length,
        endSymbolLength = endSymbol.length;

      /**
       * @ngdoc service
       * @name $interpolate
       * @kind function
       *
       * @requires $parse
       * @requires $sce
       *
       * @description
       *
       * Compiles a string with markup into an interpolation function. This service is used by the
       * HTML {@link ng.$compile $compile} service for data binding. See
       * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
       * interpolation markup.
       *
       *
       * ```js
       *   var $interpolate = ...; // injected
       *   var exp = $interpolate('Hello {{name | uppercase}}!');
       *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
       * ```
       *
       *
       * @param {string} text The text with markup to interpolate.
       * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
       *    embedded expression in order to return an interpolation function. Strings with no
       *    embedded expression will return null for the interpolation function.
       * @param {string=} trustedContext when provided, the returned function passes the interpolated
       *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
       *    provides Strict Contextual Escaping for details.
       * @returns {function(context)} an interpolation function which is used to compute the
       *    interpolated string. The function has these parameters:
       *
       *    * `context`: an object against which any expressions embedded in the strings are evaluated
       *      against.
       *
       */
      function $interpolate(text, mustHaveExpression, trustedContext) {
        var startIndex,
          endIndex,
          index = 0,
          parts = [],
          length = text.length,
          hasInterpolation = false,
          fn,
          exp,
          concat = [];

        while(index < length) {
          if ( ((startIndex = text.indexOf(startSymbol, index)) != -1) &&
            ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) ) {
            (index != startIndex) && parts.push(text.substring(index, startIndex));
            parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex)));
            fn.exp = exp;
            index = endIndex + endSymbolLength;
            hasInterpolation = true;
          } else {
            // we did not find anything, so we have to add the remainder to the parts array
            (index != length) && parts.push(text.substring(index));
            index = length;
          }
        }

        if (!(length = parts.length)) {
          // we added, nothing, must have been an empty string.
          parts.push('');
          length = 1;
        }

        // Concatenating expressions makes it hard to reason about whether some combination of
        // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
        // single expression be used for iframe[src], object[src], etc., we ensure that the value
        // that's used is assigned or constructed by some JS code somewhere that is more testable or
        // make it obvious that you bound the value to some user controlled value.  This helps reduce
        // the load when auditing for XSS issues.
        if (trustedContext && parts.length > 1) {
          throw $interpolateMinErr('noconcat',
              "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
              "interpolations that concatenate multiple expressions when a trusted value is " +
              "required.  See http://docs.angularjs.org/api/ng.$sce", text);
        }

        if (!mustHaveExpression  || hasInterpolation) {
          concat.length = length;
          fn = function(context) {
            try {
              for(var i = 0, ii = length, part; i<ii; i++) {
                if (typeof (part = parts[i]) == 'function') {
                  part = part(context);
                  if (trustedContext) {
                    part = $sce.getTrusted(trustedContext, part);
                  } else {
                    part = $sce.valueOf(part);
                  }
                  if (part == null) { // null || undefined
                    part = '';
                  } else {
                    switch (typeof part) {
                      case 'string':
                      {
                        break;
                      }
                      case 'number':
                      {
                        part = '' + part;
                        break;
                      }
                      default:
                      {
                        part = toJson(part);
                      }
                    }
                  }
                }
                concat[i] = part;
              }
              return concat.join('');
            }
            catch(err) {
              var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
                err.toString());
              $exceptionHandler(newErr);
            }
          };
          fn.exp = text;
          fn.parts = parts;
          return fn;
        }
      }


      /**
       * @ngdoc method
       * @name $interpolate#startSymbol
       * @description
       * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol $interpolateProvider#startSymbol} to change
       * the symbol.
       *
       * @returns {string} start symbol.
       */
      $interpolate.startSymbol = function() {
        return startSymbol;
      };


      /**
       * @ngdoc method
       * @name $interpolate#endSymbol
       * @description
       * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
       *
       * Use {@link ng.$interpolateProvider#endSymbol $interpolateProvider#endSymbol} to change
       * the symbol.
       *
       * @returns {string} end symbol.
       */
      $interpolate.endSymbol = function() {
        return endSymbol;
      };

      return $interpolate;
    }];
  }

  function $IntervalProvider() {
    this.$get = ['$rootScope', '$window', '$q',
      function($rootScope,   $window,   $q) {
        var intervals = {};


        /**
         * @ngdoc service
         * @name $interval
         *
         * @description
         * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
         * milliseconds.
         *
         * The return value of registering an interval function is a promise. This promise will be
         * notified upon each tick of the interval, and will be resolved after `count` iterations, or
         * run indefinitely if `count` is not defined. The value of the notification will be the
         * number of iterations that have run.
         * To cancel an interval, call `$interval.cancel(promise)`.
         *
         * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
         * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
         * time.
         *
         * <div class="alert alert-warning">
         * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
         * with them.  In particular they are not automatically destroyed when a controller's scope or a
         * directive's element are destroyed.
         * You should take this into consideration and make sure to always cancel the interval at the
         * appropriate moment.  See the example below for more details on how and when to do this.
         * </div>
         *
         * @param {function()} fn A function that should be called repeatedly.
         * @param {number} delay Number of milliseconds between each function call.
         * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
         *   indefinitely.
         * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
         *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
         * @returns {promise} A promise which will be notified on each iteration.
         *
         * @example
         * <example module="time">
         *   <file name="index.html">
         *     <script>
         *       function Ctrl2($scope,$interval) {
      *         $scope.format = 'M/d/yy h:mm:ss a';
      *         $scope.blood_1 = 100;
      *         $scope.blood_2 = 120;
      *
      *         var stop;
      *         $scope.fight = function() {
      *           // Don't start a new fight if we are already fighting
      *           if ( angular.isDefined(stop) ) return;
      *
      *           stop = $interval(function() {
      *             if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *                 $scope.blood_1 = $scope.blood_1 - 3;
      *                 $scope.blood_2 = $scope.blood_2 - 4;
      *             } else {
      *                 $scope.stopFight();
      *             }
      *           }, 100);
      *         };
      *
      *         $scope.stopFight = function() {
      *           if (angular.isDefined(stop)) {
      *             $interval.cancel(stop);
      *             stop = undefined;
      *           }
      *         };
      *
      *         $scope.resetFight = function() {
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *         }
      *
      *         $scope.$on('$destroy', function() {
      *           // Make sure that the interval is destroyed too
      *           $scope.stopFight();
      *         });
      *       }
         *
         *       angular.module('time', [])
         *         // Register the 'myCurrentTime' directive factory method.
         *         // We inject $interval and dateFilter service since the factory method is DI.
         *         .directive('myCurrentTime', function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *             stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time ofter the DOM element was removed.
      *             element.bind('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         });
         *     </script>
         *
         *     <div>
         *       <div ng-controller="Ctrl2">
         *         Date format: <input ng-model="format"> <hr/>
         *         Current time is: <span my-current-time="format"></span>
         *         <hr/>
         *         Blood 1 : <font color='red'>{{blood_1}}</font>
         *         Blood 2 : <font color='red'>{{blood_2}}</font>
         *         <button type="button" data-ng-click="fight()">Fight</button>
         *         <button type="button" data-ng-click="stopFight()">StopFight</button>
         *         <button type="button" data-ng-click="resetFight()">resetFight</button>
         *       </div>
         *     </div>
         *
         *   </file>
         * </example>
         */
        function interval(fn, delay, count, invokeApply) {
          var setInterval = $window.setInterval,
            clearInterval = $window.clearInterval,
            deferred = $q.defer(),
            promise = deferred.promise,
            iteration = 0,
            skipApply = (isDefined(invokeApply) && !invokeApply);

          count = isDefined(count) ? count : 0;

          promise.then(null, null, fn);

          promise.$$intervalId = setInterval(function tick() {
            deferred.notify(iteration++);

            if (count > 0 && iteration >= count) {
              deferred.resolve(iteration);
              clearInterval(promise.$$intervalId);
              delete intervals[promise.$$intervalId];
            }

            if (!skipApply) $rootScope.$apply();

          }, delay);

          intervals[promise.$$intervalId] = deferred;

          return promise;
        }


        /**
         * @ngdoc method
         * @name $interval#cancel
         *
         * @description
         * Cancels a task associated with the `promise`.
         *
         * @param {promise} promise returned by the `$interval` function.
         * @returns {boolean} Returns `true` if the task was successfully canceled.
         */
        interval.cancel = function(promise) {
          if (promise && promise.$$intervalId in intervals) {
            intervals[promise.$$intervalId].reject('canceled');
            clearInterval(promise.$$intervalId);
            delete intervals[promise.$$intervalId];
            return true;
          }
          return false;
        };

        return interval;
      }];
  }

  /**
   * @ngdoc service
   * @name $locale
   *
   * @description
   * $locale service provides localization rules for various Angular components. As of right now the
   * only public api is:
   *
   * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
   */
  function $LocaleProvider(){
    this.$get = function() {
      return {
        id: 'en-us',

        NUMBER_FORMATS: {
          DECIMAL_SEP: '.',
          GROUP_SEP: ',',
          PATTERNS: [
            { // Decimal Pattern
              minInt: 1,
              minFrac: 0,
              maxFrac: 3,
              posPre: '',
              posSuf: '',
              negPre: '-',
              negSuf: '',
              gSize: 3,
              lgSize: 3
            },{ //Currency Pattern
              minInt: 1,
              minFrac: 2,
              maxFrac: 2,
              posPre: '\u00A4',
              posSuf: '',
              negPre: '(\u00A4',
              negSuf: ')',
              gSize: 3,
              lgSize: 3
            }
          ],
          CURRENCY_SYM: '$'
        },

        DATETIME_FORMATS: {
          MONTH:
            'January,February,March,April,May,June,July,August,September,October,November,December'
              .split(','),
          SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
          DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
          SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
          AMPMS: ['AM','PM'],
          medium: 'MMM d, y h:mm:ss a',
          short: 'M/d/yy h:mm a',
          fullDate: 'EEEE, MMMM d, y',
          longDate: 'MMMM d, y',
          mediumDate: 'MMM d, y',
          shortDate: 'M/d/yy',
          mediumTime: 'h:mm:ss a',
          shortTime: 'h:mm a'
        },

        pluralCat: function(num) {
          if (num === 1) {
            return 'one';
          }
          return 'other';
        }
      };
    };
  }

  var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
  var $locationMinErr = minErr('$location');


  /**
   * Encode path using encodeUriSegment, ignoring forward slashes
   *
   * @param {string} path Path to encode
   * @returns {string}
   */
  function encodePath(path) {
    var segments = path.split('/'),
      i = segments.length;

    while (i--) {
      segments[i] = encodeUriSegment(segments[i]);
    }

    return segments.join('/');
  }

  function parseAbsoluteUrl(absoluteUrl, locationObj, appBase) {
    var parsedUrl = urlResolve(absoluteUrl, appBase);

    locationObj.$$protocol = parsedUrl.protocol;
    locationObj.$$host = parsedUrl.hostname;
    locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
  }


  function parseAppUrl(relativeUrl, locationObj, appBase) {
    var prefixed = (relativeUrl.charAt(0) !== '/');
    if (prefixed) {
      relativeUrl = '/' + relativeUrl;
    }
    var match = urlResolve(relativeUrl, appBase);
    locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
      match.pathname.substring(1) : match.pathname);
    locationObj.$$search = parseKeyValue(match.search);
    locationObj.$$hash = decodeURIComponent(match.hash);

    // make sure path starts with '/';
    if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
      locationObj.$$path = '/' + locationObj.$$path;
    }
  }


  /**
   *
   * @param {string} begin
   * @param {string} whole
   * @returns {string} returns text from whole after begin or undefined if it does not begin with
   *                   expected string.
   */
  function beginsWith(begin, whole) {
    if (whole.indexOf(begin) === 0) {
      return whole.substr(begin.length);
    }
  }


  function stripHash(url) {
    var index = url.indexOf('#');
    return index == -1 ? url : url.substr(0, index);
  }


  function stripFile(url) {
    return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
  }

  /* return the server only (scheme://host:port) */
  function serverBase(url) {
    return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
  }


  /**
   * LocationHtml5Url represents an url
   * This object is exposed as $location service when HTML5 mode is enabled and supported
   *
   * @constructor
   * @param {string} appBase application base URL
   * @param {string} basePrefix url path prefix
   */
  function LocationHtml5Url(appBase, basePrefix) {
    this.$$html5 = true;
    basePrefix = basePrefix || '';
    var appBaseNoFile = stripFile(appBase);
    parseAbsoluteUrl(appBase, this, appBase);


    /**
     * Parse given html5 (regular) url string into properties
     * @param {string} newAbsoluteUrl HTML5 url
     * @private
     */
    this.$$parse = function(url) {
      var pathUrl = beginsWith(appBaseNoFile, url);
      if (!isString(pathUrl)) {
        throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
          appBaseNoFile);
      }

      parseAppUrl(pathUrl, this, appBase);

      if (!this.$$path) {
        this.$$path = '/';
      }

      this.$$compose();
    };

    /**
     * Compose url and update `absUrl` property
     * @private
     */
    this.$$compose = function() {
      var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
    };

    this.$$rewrite = function(url) {
      var appUrl, prevAppUrl;

      if ( (appUrl = beginsWith(appBase, url)) !== undefined ) {
        prevAppUrl = appUrl;
        if ( (appUrl = beginsWith(basePrefix, appUrl)) !== undefined ) {
          return appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
        } else {
          return appBase + prevAppUrl;
        }
      } else if ( (appUrl = beginsWith(appBaseNoFile, url)) !== undefined ) {
        return appBaseNoFile + appUrl;
      } else if (appBaseNoFile == url + '/') {
        return appBaseNoFile;
      }
    };
  }


  /**
   * LocationHashbangUrl represents url
   * This object is exposed as $location service when developer doesn't opt into html5 mode.
   * It also serves as the base class for html5 mode fallback on legacy browsers.
   *
   * @constructor
   * @param {string} appBase application base URL
   * @param {string} hashPrefix hashbang prefix
   */
  function LocationHashbangUrl(appBase, hashPrefix) {
    var appBaseNoFile = stripFile(appBase);

    parseAbsoluteUrl(appBase, this, appBase);


    /**
     * Parse given hashbang url into properties
     * @param {string} url Hashbang url
     * @private
     */
    this.$$parse = function(url) {
      var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
      var withoutHashUrl = withoutBaseUrl.charAt(0) == '#'
        ? beginsWith(hashPrefix, withoutBaseUrl)
        : (this.$$html5)
        ? withoutBaseUrl
        : '';

      if (!isString(withoutHashUrl)) {
        throw $locationMinErr('ihshprfx', 'Invalid url "{0}", missing hash prefix "{1}".', url,
          hashPrefix);
      }
      parseAppUrl(withoutHashUrl, this, appBase);

      this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

      this.$$compose();

      /*
       * In Windows, on an anchor node on documents loaded from
       * the filesystem, the browser will return a pathname
       * prefixed with the drive name ('/C:/path') when a
       * pathname without a drive is set:
       *  * a.setAttribute('href', '/foo')
       *   * a.pathname === '/C:/foo' //true
       *
       * Inside of Angular, we're always using pathnames that
       * do not include drive names for routing.
       */
      function removeWindowsDriveName (path, url, base) {
        /*
         Matches paths for file protocol on windows,
         such as /C:/foo/bar, and captures only /foo/bar.
         */
        var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

        var firstPathSegmentMatch;

        //Get the relative path from the input URL.
        if (url.indexOf(base) === 0) {
          url = url.replace(base, '');
        }

        // The input URL intentionally contains a first path segment that ends with a colon.
        if (windowsFilePathExp.exec(url)) {
          return path;
        }

        firstPathSegmentMatch = windowsFilePathExp.exec(path);
        return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
      }
    };

    /**
     * Compose hashbang url and update `absUrl` property
     * @private
     */
    this.$$compose = function() {
      var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
    };

    this.$$rewrite = function(url) {
      if(stripHash(appBase) == stripHash(url)) {
        return url;
      }
    };
  }


  /**
   * LocationHashbangUrl represents url
   * This object is exposed as $location service when html5 history api is enabled but the browser
   * does not support it.
   *
   * @constructor
   * @param {string} appBase application base URL
   * @param {string} hashPrefix hashbang prefix
   */
  function LocationHashbangInHtml5Url(appBase, hashPrefix) {
    this.$$html5 = true;
    LocationHashbangUrl.apply(this, arguments);

    var appBaseNoFile = stripFile(appBase);

    this.$$rewrite = function(url) {
      var appUrl;

      if ( appBase == stripHash(url) ) {
        return url;
      } else if ( (appUrl = beginsWith(appBaseNoFile, url)) ) {
        return appBase + hashPrefix + appUrl;
      } else if ( appBaseNoFile === url + '/') {
        return appBaseNoFile;
      }
    };

    this.$$compose = function() {
      var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
      this.$$absUrl = appBase + hashPrefix + this.$$url;
    };

  }


  LocationHashbangInHtml5Url.prototype =
    LocationHashbangUrl.prototype =
      LocationHtml5Url.prototype = {

        /**
         * Are we in html5 mode?
         * @private
         */
        $$html5: false,

        /**
         * Has any change been replacing ?
         * @private
         */
        $$replace: false,

        /**
         * @ngdoc method
         * @name $location#absUrl
         *
         * @description
         * This method is getter only.
         *
         * Return full url representation with all segments encoded according to rules specified in
         * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
         *
         * @return {string} full url
         */
        absUrl: locationGetter('$$absUrl'),

        /**
         * @ngdoc method
         * @name $location#url
         *
         * @description
         * This method is getter / setter.
         *
         * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
         *
         * Change path, search and hash, when called with parameter and return `$location`.
         *
         * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
         * @param {string=} replace The path that will be changed
         * @return {string} url
         */
        url: function(url, replace) {
          if (isUndefined(url))
            return this.$$url;

          var match = PATH_MATCH.exec(url);
          if (match[1]) this.path(decodeURIComponent(match[1]));
          if (match[2] || match[1]) this.search(match[3] || '');
          this.hash(match[5] || '', replace);

          return this;
        },

        /**
         * @ngdoc method
         * @name $location#protocol
         *
         * @description
         * This method is getter only.
         *
         * Return protocol of current url.
         *
         * @return {string} protocol of current url
         */
        protocol: locationGetter('$$protocol'),

        /**
         * @ngdoc method
         * @name $location#host
         *
         * @description
         * This method is getter only.
         *
         * Return host of current url.
         *
         * @return {string} host of current url.
         */
        host: locationGetter('$$host'),

        /**
         * @ngdoc method
         * @name $location#port
         *
         * @description
         * This method is getter only.
         *
         * Return port of current url.
         *
         * @return {Number} port
         */
        port: locationGetter('$$port'),

        /**
         * @ngdoc method
         * @name $location#path
         *
         * @description
         * This method is getter / setter.
         *
         * Return path of current url when called without any parameter.
         *
         * Change path when called with parameter and return `$location`.
         *
         * Note: Path should always begin with forward slash (/), this method will add the forward slash
         * if it is missing.
         *
         * @param {string=} path New path
         * @return {string} path
         */
        path: locationGetterSetter('$$path', function(path) {
          return path.charAt(0) == '/' ? path : '/' + path;
        }),

        /**
         * @ngdoc method
         * @name $location#search
         *
         * @description
         * This method is getter / setter.
         *
         * Return search part (as object) of current url when called without any parameter.
         *
         * Change search part when called with parameter and return `$location`.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var searchObject = $location.search();
         * // => {foo: 'bar', baz: 'xoxo'}
         *
         *
         * // set foo to 'yipee'
         * $location.search('foo', 'yipee');
         * // => $location
         * ```
         *
         * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
         * hash object.
         *
         * When called with a single argument the method acts as a setter, setting the `search` component
         * of `$location` to the specified value.
         *
         * If the argument is a hash object containing an array of values, these values will be encoded
         * as duplicate search parameters in the url.
         *
         * @param {(string|Array<string>)=} paramValue If `search` is a string, then `paramValue` will
         * override only a single search property.
         *
         * If `paramValue` is an array, it will override the property of the `search` component of
         * `$location` specified via the first argument.
         *
         * If `paramValue` is `null`, the property specified via the first argument will be deleted.
         *
         * @return {Object} If called with no arguments returns the parsed `search` object. If called with
         * one or more arguments returns `$location` object itself.
         */
        search: function(search, paramValue) {
          switch (arguments.length) {
            case 0:
              return this.$$search;
            case 1:
              if (isString(search)) {
                this.$$search = parseKeyValue(search);
              } else if (isObject(search)) {
                this.$$search = search;
              } else {
                throw $locationMinErr('isrcharg',
                  'The first argument of the `$location#search()` call must be a string or an object.');
              }
              break;
            default:
              if (isUndefined(paramValue) || paramValue === null) {
                delete this.$$search[search];
              } else {
                this.$$search[search] = paramValue;
              }
          }

          this.$$compose();
          return this;
        },

        /**
         * @ngdoc method
         * @name $location#hash
         *
         * @description
         * This method is getter / setter.
         *
         * Return hash fragment when called without any parameter.
         *
         * Change hash fragment when called with parameter and return `$location`.
         *
         * @param {string=} hash New hash fragment
         * @return {string} hash
         */
        hash: locationGetterSetter('$$hash', identity),

        /**
         * @ngdoc method
         * @name $location#replace
         *
         * @description
         * If called, all changes to $location during current `$digest` will be replacing current history
         * record, instead of adding new one.
         */
        replace: function() {
          this.$$replace = true;
          return this;
        }
      };

  function locationGetter(property) {
    return function() {
      return this[property];
    };
  }


  function locationGetterSetter(property, preprocess) {
    return function(value) {
      if (isUndefined(value))
        return this[property];

      this[property] = preprocess(value);
      this.$$compose();

      return this;
    };
  }


  /**
   * @ngdoc service
   * @name $location
   *
   * @requires $rootElement
   *
   * @description
   * The $location service parses the URL in the browser address bar (based on the
   * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
   * available to your application. Changes to the URL in the address bar are reflected into
   * $location service and changes to $location are reflected into the browser address bar.
   *
   * **The $location service:**
   *
   * - Exposes the current URL in the browser address bar, so you can
   *   - Watch and observe the URL.
   *   - Change the URL.
   * - Synchronizes the URL with the browser when the user
   *   - Changes the address bar.
   *   - Clicks the back or forward button (or clicks a History link).
   *   - Clicks on a link.
   * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
   *
   * For more information see {@link guide/$location Developer Guide: Using $location}
   */

  /**
   * @ngdoc provider
   * @name $locationProvider
   * @description
   * Use the `$locationProvider` to configure how the application deep linking paths are stored.
   */
  function $LocationProvider(){
    var hashPrefix = '',
      html5Mode = false;

    /**
     * @ngdoc property
     * @name $locationProvider#hashPrefix
     * @description
     * @param {string=} prefix Prefix for hash part (containing path and search)
     * @returns {*} current value if used as getter or itself (chaining) if used as setter
     */
    this.hashPrefix = function(prefix) {
      if (isDefined(prefix)) {
        hashPrefix = prefix;
        return this;
      } else {
        return hashPrefix;
      }
    };

    /**
     * @ngdoc property
     * @name $locationProvider#html5Mode
     * @description
     * @param {boolean=} mode Use HTML5 strategy if available.
     * @returns {*} current value if used as getter or itself (chaining) if used as setter
     */
    this.html5Mode = function(mode) {
      if (isDefined(mode)) {
        html5Mode = mode;
        return this;
      } else {
        return html5Mode;
      }
    };

    /**
     * @ngdoc event
     * @name $location#$locationChangeStart
     * @eventType broadcast on root scope
     * @description
     * Broadcasted before a URL will change. This change can be prevented by calling
     * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
     * details about event object. Upon successful change
     * {@link ng.$location#events_$locationChangeSuccess $locationChangeSuccess} is fired.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {string} newUrl New URL
     * @param {string=} oldUrl URL that was before it was changed.
     */

    /**
     * @ngdoc event
     * @name $location#$locationChangeSuccess
     * @eventType broadcast on root scope
     * @description
     * Broadcasted after a URL was changed.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {string} newUrl New URL
     * @param {string=} oldUrl URL that was before it was changed.
     */

    this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement',
      function( $rootScope,   $browser,   $sniffer,   $rootElement) {
        var $location,
          LocationMode,
          baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
          initialUrl = $browser.url(),
          appBase;

        if (html5Mode) {
          appBase = serverBase(initialUrl) + (baseHref || '/');
          LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
        } else {
          appBase = stripHash(initialUrl);
          LocationMode = LocationHashbangUrl;
        }
        $location = new LocationMode(appBase, '#' + hashPrefix);
        $location.$$parse($location.$$rewrite(initialUrl));

        $rootElement.on('click', function(event) {
          // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
          // currently we open nice url link and redirect then

          if (event.ctrlKey || event.metaKey || event.which == 2) return;

          var elm = jqLite(event.target);

          // traverse the DOM up to find first A tag
          while (lowercase(elm[0].nodeName) !== 'a') {
            // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
            if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
          }

          var absHref = elm.prop('href');

          if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
            // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
            // an animation.
            absHref = urlResolve(absHref.animVal).href;
          }

          // Make relative links work in HTML5 mode for legacy browsers (or at least IE8 & 9)
          // The href should be a regular url e.g. /link/somewhere or link/somewhere or ../somewhere or
          // somewhere#anchor or http://example.com/somewhere
          if (LocationMode === LocationHashbangInHtml5Url) {
            // get the actual href attribute - see
            // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
            var href = elm.attr('href') || elm.attr('xlink:href');

            if (href.indexOf('://') < 0) {         // Ignore absolute URLs
              var prefix = '#' + hashPrefix;
              if (href[0] == '/') {
                // absolute path - replace old path
                absHref = appBase + prefix + href;
              } else if (href[0] == '#') {
                // local anchor
                absHref = appBase + prefix + ($location.path() || '/') + href;
              } else {
                // relative path - join with current path
                var stack = $location.path().split("/"),
                  parts = href.split("/");
                for (var i=0; i<parts.length; i++) {
                  if (parts[i] == ".")
                    continue;
                  else if (parts[i] == "..")
                    stack.pop();
                  else if (parts[i].length)
                    stack.push(parts[i]);
                }
                absHref = appBase + prefix + stack.join('/');
              }
            }
          }

          var rewrittenUrl = $location.$$rewrite(absHref);

          if (absHref && !elm.attr('target') && rewrittenUrl && !event.isDefaultPrevented()) {
            event.preventDefault();
            if (rewrittenUrl != $browser.url()) {
              // update location manually
              $location.$$parse(rewrittenUrl);
              $rootScope.$apply();
              // hack to work around FF6 bug 684208 when scenario runner clicks on links
              window.angular['ff-684208-preventDefault'] = true;
            }
          }
        });


        // rewrite hashbang url <> html5 url
        if ($location.absUrl() != initialUrl) {
          $browser.url($location.absUrl(), true);
        }

        // update $location when $browser url changes
        $browser.onUrlChange(function(newUrl) {
          if ($location.absUrl() != newUrl) {
            $rootScope.$evalAsync(function() {
              var oldUrl = $location.absUrl();

              $location.$$parse(newUrl);
              if ($rootScope.$broadcast('$locationChangeStart', newUrl,
                oldUrl).defaultPrevented) {
                $location.$$parse(oldUrl);
                $browser.url(oldUrl);
              } else {
                afterLocationChange(oldUrl);
              }
            });
            if (!$rootScope.$$phase) $rootScope.$digest();
          }
        });

        // update browser
        var changeCounter = 0;
        $rootScope.$watch(function $locationWatch() {
          var oldUrl = $browser.url();
          var currentReplace = $location.$$replace;

          if (!changeCounter || oldUrl != $location.absUrl()) {
            changeCounter++;
            $rootScope.$evalAsync(function() {
              if ($rootScope.$broadcast('$locationChangeStart', $location.absUrl(), oldUrl).
                defaultPrevented) {
                $location.$$parse(oldUrl);
              } else {
                $browser.url($location.absUrl(), currentReplace);
                afterLocationChange(oldUrl);
              }
            });
          }
          $location.$$replace = false;

          return changeCounter;
        });

        return $location;

        function afterLocationChange(oldUrl) {
          $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl);
        }
      }];
  }

  /**
   * @ngdoc service
   * @name $log
   * @requires $window
   *
   * @description
   * Simple service for logging. Default implementation safely writes the message
   * into the browser's console (if present).
   *
   * The main purpose of this service is to simplify debugging and troubleshooting.
   *
   * The default is to log `debug` messages. You can use
   * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
   *
   * @example
   <example>
   <file name="script.js">
   function LogCtrl($scope, $log) {
         $scope.$log = $log;
         $scope.message = 'Hello World!';
       }
   </file>
   <file name="index.html">
   <div ng-controller="LogCtrl">
   <p>Reload this page with open console, enter text and hit the log button...</p>
   Message:
   <input type="text" ng-model="message"/>
   <button ng-click="$log.log(message)">log</button>
   <button ng-click="$log.warn(message)">warn</button>
   <button ng-click="$log.info(message)">info</button>
   <button ng-click="$log.error(message)">error</button>
   </div>
   </file>
   </example>
   */

  /**
   * @ngdoc provider
   * @name $logProvider
   * @description
   * Use the `$logProvider` to configure how the application logs messages
   */
  function $LogProvider(){
    var debug = true,
      self = this;

    /**
     * @ngdoc property
     * @name $logProvider#debugEnabled
     * @description
     * @param {boolean=} flag enable or disable debug level messages
     * @returns {*} current value if used as getter or itself (chaining) if used as setter
     */
    this.debugEnabled = function(flag) {
      if (isDefined(flag)) {
        debug = flag;
        return this;
      } else {
        return debug;
      }
    };

    this.$get = ['$window', function($window){
      return {
        /**
         * @ngdoc method
         * @name $log#log
         *
         * @description
         * Write a log message
         */
        log: consoleLog('log'),

        /**
         * @ngdoc method
         * @name $log#info
         *
         * @description
         * Write an information message
         */
        info: consoleLog('info'),

        /**
         * @ngdoc method
         * @name $log#warn
         *
         * @description
         * Write a warning message
         */
        warn: consoleLog('warn'),

        /**
         * @ngdoc method
         * @name $log#error
         *
         * @description
         * Write an error message
         */
        error: consoleLog('error'),

        /**
         * @ngdoc method
         * @name $log#debug
         *
         * @description
         * Write a debug message
         */
        debug: (function () {
          var fn = consoleLog('debug');

          return function() {
            if (debug) {
              fn.apply(self, arguments);
            }
          };
        }())
      };

      function formatError(arg) {
        if (arg instanceof Error) {
          if (arg.stack) {
            arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
              ? 'Error: ' + arg.message + '\n' + arg.stack
              : arg.stack;
          } else if (arg.sourceURL) {
            arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
          }
        }
        return arg;
      }

      function consoleLog(type) {
        var console = $window.console || {},
          logFn = console[type] || console.log || noop,
          hasApply = false;

        // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
        // The reason behind this is that console.log has type "object" in IE8...
        try {
          hasApply = !!logFn.apply;
        } catch (e) {}

        if (hasApply) {
          return function() {
            var args = [];
            forEach(arguments, function(arg) {
              args.push(formatError(arg));
            });
            return logFn.apply(console, args);
          };
        }

        // we are IE which either doesn't have window.console => this is noop and we do nothing,
        // or we are IE where console.log doesn't have apply so we log at least first 2 args
        return function(arg1, arg2) {
          logFn(arg1, arg2 == null ? '' : arg2);
        };
      }
    }];
  }

  var $parseMinErr = minErr('$parse');
  var promiseWarningCache = {};
  var promiseWarning;

// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are generally considered safe because these expressions only have direct
// access to $scope and locals. However, one can obtain the ability to execute arbitrary JS code by
// obtaining a reference to native JS functions such as the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor(alert("evil JS code"))
//
// We want to prevent this type of access. For the sake of performance, during the lexing phase we
// disallow any "dotted" access to any member named "constructor".
//
// For reflective calls (a[b]) we check that the value of the lookup is not the Function constructor
// while evaluating the expression, which is a stronger but more expensive test. Since reflective
// calls are expensive anyway, this is not such a big deal compared to static dereferencing.
//
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
// against the expression language, but not to prevent exploits that were enabled by exposing
// sensitive JavaScript or browser apis on Scope. Exposing such objects on a Scope is never a good
// practice and therefore we are not even trying to protect against interaction with an object
// explicitly exposed in this way.
//
// A developer could foil the name check by aliasing the Function constructor under a different
// name on the scope.
//
// In general, it is not possible to access a Window object from an angular expression unless a
// window or some DOM object that has a reference to window is published onto a Scope.

  function ensureSafeMemberName(name, fullExpression) {
    if (name === "constructor") {
      throw $parseMinErr('isecfld',
        'Referencing "constructor" field in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    }
    return name;
  }

  function ensureSafeObject(obj, fullExpression) {
    // nifty check if obj is Function that is fast and works across iframes and other contexts
    if (obj) {
      if (obj.constructor === obj) {
        throw $parseMinErr('isecfn',
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
      } else if (// isWindow(obj)
        obj.document && obj.location && obj.alert && obj.setInterval) {
        throw $parseMinErr('isecwindow',
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
      } else if (// isElement(obj)
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
        throw $parseMinErr('isecdom',
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
      }
    }
    return obj;
  }

  var OPERATORS = {
    /* jshint bitwise : false */
    'null':function(){return null;},
    'true':function(){return true;},
    'false':function(){return false;},
    undefined:noop,
    '+':function(self, locals, a,b){
      a=a(self, locals); b=b(self, locals);
      if (isDefined(a)) {
        if (isDefined(b)) {
          return a + b;
        }
        return a;
      }
      return isDefined(b)?b:undefined;},
    '-':function(self, locals, a,b){
      a=a(self, locals); b=b(self, locals);
      return (isDefined(a)?a:0)-(isDefined(b)?b:0);
    },
    '*':function(self, locals, a,b){return a(self, locals)*b(self, locals);},
    '/':function(self, locals, a,b){return a(self, locals)/b(self, locals);},
    '%':function(self, locals, a,b){return a(self, locals)%b(self, locals);},
    '^':function(self, locals, a,b){return a(self, locals)^b(self, locals);},
    '=':noop,
    '===':function(self, locals, a, b){return a(self, locals)===b(self, locals);},
    '!==':function(self, locals, a, b){return a(self, locals)!==b(self, locals);},
    '==':function(self, locals, a,b){return a(self, locals)==b(self, locals);},
    '!=':function(self, locals, a,b){return a(self, locals)!=b(self, locals);},
    '<':function(self, locals, a,b){return a(self, locals)<b(self, locals);},
    '>':function(self, locals, a,b){return a(self, locals)>b(self, locals);},
    '<=':function(self, locals, a,b){return a(self, locals)<=b(self, locals);},
    '>=':function(self, locals, a,b){return a(self, locals)>=b(self, locals);},
    '&&':function(self, locals, a,b){return a(self, locals)&&b(self, locals);},
    '||':function(self, locals, a,b){return a(self, locals)||b(self, locals);},
    '&':function(self, locals, a,b){return a(self, locals)&b(self, locals);},
//    '|':function(self, locals, a,b){return a|b;},
    '|':function(self, locals, a,b){return b(self, locals)(self, locals, a(self, locals));},
    '!':function(self, locals, a){return !a(self, locals);}
  };
  /* jshint bitwise: true */
  var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


/////////////////////////////////////////


  /**
   * @constructor
   */
  var Lexer = function (options) {
    this.options = options;
  };

  Lexer.prototype = {
    constructor: Lexer,

    lex: function (text) {
      this.text = text;

      this.index = 0;
      this.ch = undefined;
      this.lastCh = ':'; // can start regexp

      this.tokens = [];

      while (this.index < this.text.length) {
        this.ch = this.text.charAt(this.index);
        if (this.is('"\'')) {
          this.readString(this.ch);
        } else if (this.isNumber(this.ch) || this.is('.') && this.isNumber(this.peek())) {
          this.readNumber();
        } else if (this.isIdent(this.ch)) {
          this.readIdent();
        } else if (this.is('(){}[].,;:?')) {
          this.tokens.push({
            index: this.index,
            text: this.ch
          });
          this.index++;
        } else if (this.isWhitespace(this.ch)) {
          this.index++;
          continue;
        } else {
          var ch2 = this.ch + this.peek();
          var ch3 = ch2 + this.peek(2);
          var fn = OPERATORS[this.ch];
          var fn2 = OPERATORS[ch2];
          var fn3 = OPERATORS[ch3];
          if (fn3) {
            this.tokens.push({index: this.index, text: ch3, fn: fn3});
            this.index += 3;
          } else if (fn2) {
            this.tokens.push({index: this.index, text: ch2, fn: fn2});
            this.index += 2;
          } else if (fn) {
            this.tokens.push({
              index: this.index,
              text: this.ch,
              fn: fn
            });
            this.index += 1;
          } else {
            this.throwError('Unexpected next character ', this.index, this.index + 1);
          }
        }
        this.lastCh = this.ch;
      }
      return this.tokens;
    },

    is: function(chars) {
      return chars.indexOf(this.ch) !== -1;
    },

    was: function(chars) {
      return chars.indexOf(this.lastCh) !== -1;
    },

    peek: function(i) {
      var num = i || 1;
      return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
    },

    isNumber: function(ch) {
      return ('0' <= ch && ch <= '9');
    },

    isWhitespace: function(ch) {
      // IE treats non-breaking space as \u00A0
      return (ch === ' ' || ch === '\r' || ch === '\t' ||
        ch === '\n' || ch === '\v' || ch === '\u00A0');
    },

    isIdent: function(ch) {
      return ('a' <= ch && ch <= 'z' ||
        'A' <= ch && ch <= 'Z' ||
        '_' === ch || ch === '$');
    },

    isExpOperator: function(ch) {
      return (ch === '-' || ch === '+' || this.isNumber(ch));
    },

    throwError: function(error, start, end) {
      end = end || this.index;
      var colStr = (isDefined(start)
        ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
        : ' ' + end);
      throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
        error, colStr, this.text);
    },

    readNumber: function() {
      var number = '';
      var start = this.index;
      while (this.index < this.text.length) {
        var ch = lowercase(this.text.charAt(this.index));
        if (ch == '.' || this.isNumber(ch)) {
          number += ch;
        } else {
          var peekCh = this.peek();
          if (ch == 'e' && this.isExpOperator(peekCh)) {
            number += ch;
          } else if (this.isExpOperator(ch) &&
            peekCh && this.isNumber(peekCh) &&
            number.charAt(number.length - 1) == 'e') {
            number += ch;
          } else if (this.isExpOperator(ch) &&
            (!peekCh || !this.isNumber(peekCh)) &&
            number.charAt(number.length - 1) == 'e') {
            this.throwError('Invalid exponent');
          } else {
            break;
          }
        }
        this.index++;
      }
      number = 1 * number;
      this.tokens.push({
        index: start,
        text: number,
        literal: true,
        constant: true,
        fn: function() { return number; }
      });
    },

    readIdent: function() {
      var parser = this;

      var ident = '';
      var start = this.index;

      var lastDot, peekIndex, methodName, ch;

      while (this.index < this.text.length) {
        ch = this.text.charAt(this.index);
        if (ch === '.' || this.isIdent(ch) || this.isNumber(ch)) {
          if (ch === '.') lastDot = this.index;
          ident += ch;
        } else {
          break;
        }
        this.index++;
      }

      //check if this is not a method invocation and if it is back out to last dot
      if (lastDot) {
        peekIndex = this.index;
        while (peekIndex < this.text.length) {
          ch = this.text.charAt(peekIndex);
          if (ch === '(') {
            methodName = ident.substr(lastDot - start + 1);
            ident = ident.substr(0, lastDot - start);
            this.index = peekIndex;
            break;
          }
          if (this.isWhitespace(ch)) {
            peekIndex++;
          } else {
            break;
          }
        }
      }


      var token = {
        index: start,
        text: ident
      };

      // OPERATORS is our own object so we don't need to use special hasOwnPropertyFn
      if (OPERATORS.hasOwnProperty(ident)) {
        token.fn = OPERATORS[ident];
        token.literal = true;
        token.constant = true;
      } else {
        var getter = getterFn(ident, this.options, this.text);
        token.fn = extend(function(self, locals) {
          return (getter(self, locals));
        }, {
          assign: function(self, value) {
            return setter(self, ident, value, parser.text, parser.options);
          }
        });
      }

      this.tokens.push(token);

      if (methodName) {
        this.tokens.push({
          index:lastDot,
          text: '.'
        });
        this.tokens.push({
          index: lastDot + 1,
          text: methodName
        });
      }
    },

    readString: function(quote) {
      var start = this.index;
      this.index++;
      var string = '';
      var rawString = quote;
      var escape = false;
      while (this.index < this.text.length) {
        var ch = this.text.charAt(this.index);
        rawString += ch;
        if (escape) {
          if (ch === 'u') {
            var hex = this.text.substring(this.index + 1, this.index + 5);
            if (!hex.match(/[\da-f]{4}/i))
              this.throwError('Invalid unicode escape [\\u' + hex + ']');
            this.index += 4;
            string += String.fromCharCode(parseInt(hex, 16));
          } else {
            var rep = ESCAPE[ch];
            if (rep) {
              string += rep;
            } else {
              string += ch;
            }
          }
          escape = false;
        } else if (ch === '\\') {
          escape = true;
        } else if (ch === quote) {
          this.index++;
          this.tokens.push({
            index: start,
            text: rawString,
            string: string,
            literal: true,
            constant: true,
            fn: function() { return string; }
          });
          return;
        } else {
          string += ch;
        }
        this.index++;
      }
      this.throwError('Unterminated quote', start);
    }
  };


  /**
   * @constructor
   */
  var Parser = function (lexer, $filter, options) {
    this.lexer = lexer;
    this.$filter = $filter;
    this.options = options;
  };

  Parser.ZERO = extend(function () {
    return 0;
  }, {
    constant: true
  });

  Parser.prototype = {
    constructor: Parser,

    parse: function (text) {
      this.text = text;

      this.tokens = this.lexer.lex(text);

      var value = this.statements();

      if (this.tokens.length !== 0) {
        this.throwError('is an unexpected token', this.tokens[0]);
      }

      value.literal = !!value.literal;
      value.constant = !!value.constant;

      return value;
    },

    primary: function () {
      var primary;
      if (this.expect('(')) {
        primary = this.filterChain();
        this.consume(')');
      } else if (this.expect('[')) {
        primary = this.arrayDeclaration();
      } else if (this.expect('{')) {
        primary = this.object();
      } else {
        var token = this.expect();
        primary = token.fn;
        if (!primary) {
          this.throwError('not a primary expression', token);
        }
        primary.literal = !!token.literal;
        primary.constant = !!token.constant;
      }

      var next, context;
      while ((next = this.expect('(', '[', '.'))) {
        if (next.text === '(') {
          primary = this.functionCall(primary, context);
          context = null;
        } else if (next.text === '[') {
          context = primary;
          primary = this.objectIndex(primary);
        } else if (next.text === '.') {
          context = primary;
          primary = this.fieldAccess(primary);
        } else {
          this.throwError('IMPOSSIBLE');
        }
      }
      return primary;
    },

    throwError: function(msg, token) {
      throw $parseMinErr('syntax',
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
        token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
    },

    peekToken: function() {
      if (this.tokens.length === 0)
        throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
      return this.tokens[0];
    },

    peek: function(e1, e2, e3, e4) {
      if (this.tokens.length > 0) {
        var token = this.tokens[0];
        var t = token.text;
        if (t === e1 || t === e2 || t === e3 || t === e4 ||
          (!e1 && !e2 && !e3 && !e4)) {
          return token;
        }
      }
      return false;
    },

    expect: function(e1, e2, e3, e4){
      var token = this.peek(e1, e2, e3, e4);
      if (token) {
        this.tokens.shift();
        return token;
      }
      return false;
    },

    consume: function(e1){
      if (!this.expect(e1)) {
        this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
      }
    },

    unaryFn: function(fn, right) {
      return extend(function(self, locals) {
        return fn(self, locals, right);
      }, {
        constant:right.constant
      });
    },

    ternaryFn: function(left, middle, right){
      return extend(function(self, locals){
        return left(self, locals) ? middle(self, locals) : right(self, locals);
      }, {
        constant: left.constant && middle.constant && right.constant
      });
    },

    binaryFn: function(left, fn, right) {
      return extend(function(self, locals) {
        return fn(self, locals, left, right);
      }, {
        constant:left.constant && right.constant
      });
    },

    statements: function() {
      var statements = [];
      while (true) {
        if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
          statements.push(this.filterChain());
        if (!this.expect(';')) {
          // optimize for the common case where there is only one statement.
          // TODO(size): maybe we should not support multiple statements?
          return (statements.length === 1)
            ? statements[0]
            : function(self, locals) {
            var value;
            for (var i = 0; i < statements.length; i++) {
              var statement = statements[i];
              if (statement) {
                value = statement(self, locals);
              }
            }
            return value;
          };
        }
      }
    },

    filterChain: function() {
      var left = this.expression();
      var token;
      while (true) {
        if ((token = this.expect('|'))) {
          left = this.binaryFn(left, token.fn, this.filter());
        } else {
          return left;
        }
      }
    },

    filter: function() {
      var token = this.expect();
      var fn = this.$filter(token.text);
      var argsFn = [];
      while (true) {
        if ((token = this.expect(':'))) {
          argsFn.push(this.expression());
        } else {
          var fnInvoke = function(self, locals, input) {
            var args = [input];
            for (var i = 0; i < argsFn.length; i++) {
              args.push(argsFn[i](self, locals));
            }
            return fn.apply(self, args);
          };
          return function() {
            return fnInvoke;
          };
        }
      }
    },

    expression: function() {
      return this.assignment();
    },

    assignment: function() {
      var left = this.ternary();
      var right;
      var token;
      if ((token = this.expect('='))) {
        if (!left.assign) {
          this.throwError('implies assignment but [' +
            this.text.substring(0, token.index) + '] can not be assigned to', token);
        }
        right = this.ternary();
        return function(scope, locals) {
          return left.assign(scope, right(scope, locals), locals);
        };
      }
      return left;
    },

    ternary: function() {
      var left = this.logicalOR();
      var middle;
      var token;
      if ((token = this.expect('?'))) {
        middle = this.ternary();
        if ((token = this.expect(':'))) {
          return this.ternaryFn(left, middle, this.ternary());
        } else {
          this.throwError('expected :', token);
        }
      } else {
        return left;
      }
    },

    logicalOR: function() {
      var left = this.logicalAND();
      var token;
      while (true) {
        if ((token = this.expect('||'))) {
          left = this.binaryFn(left, token.fn, this.logicalAND());
        } else {
          return left;
        }
      }
    },

    logicalAND: function() {
      var left = this.equality();
      var token;
      if ((token = this.expect('&&'))) {
        left = this.binaryFn(left, token.fn, this.logicalAND());
      }
      return left;
    },

    equality: function() {
      var left = this.relational();
      var token;
      if ((token = this.expect('==','!=','===','!=='))) {
        left = this.binaryFn(left, token.fn, this.equality());
      }
      return left;
    },

    relational: function() {
      var left = this.additive();
      var token;
      if ((token = this.expect('<', '>', '<=', '>='))) {
        left = this.binaryFn(left, token.fn, this.relational());
      }
      return left;
    },

    additive: function() {
      var left = this.multiplicative();
      var token;
      while ((token = this.expect('+','-'))) {
        left = this.binaryFn(left, token.fn, this.multiplicative());
      }
      return left;
    },

    multiplicative: function() {
      var left = this.unary();
      var token;
      while ((token = this.expect('*','/','%'))) {
        left = this.binaryFn(left, token.fn, this.unary());
      }
      return left;
    },

    unary: function() {
      var token;
      if (this.expect('+')) {
        return this.primary();
      } else if ((token = this.expect('-'))) {
        return this.binaryFn(Parser.ZERO, token.fn, this.unary());
      } else if ((token = this.expect('!'))) {
        return this.unaryFn(token.fn, this.unary());
      } else {
        return this.primary();
      }
    },

    fieldAccess: function(object) {
      var parser = this;
      var field = this.expect().text;
      var getter = getterFn(field, this.options, this.text);

      return extend(function(scope, locals, self) {
        return getter(self || object(scope, locals));
      }, {
        assign: function(scope, value, locals) {
          return setter(object(scope, locals), field, value, parser.text, parser.options);
        }
      });
    },

    objectIndex: function(obj) {
      var parser = this;

      var indexFn = this.expression();
      this.consume(']');

      return extend(function(self, locals) {
        var o = obj(self, locals),
          i = indexFn(self, locals),
          v, p;

        if (!o) return undefined;
        v = ensureSafeObject(o[i], parser.text);
        if (v && v.then && parser.options.unwrapPromises) {
          p = v;
          if (!('$$v' in v)) {
            p.$$v = undefined;
            p.then(function(val) { p.$$v = val; });
          }
          v = v.$$v;
        }
        return v;
      }, {
        assign: function(self, value, locals) {
          var key = indexFn(self, locals);
          // prevent overwriting of Function.constructor which would break ensureSafeObject check
          var safe = ensureSafeObject(obj(self, locals), parser.text);
          return safe[key] = value;
        }
      });
    },

    functionCall: function(fn, contextGetter) {
      var argsFn = [];
      if (this.peekToken().text !== ')') {
        do {
          argsFn.push(this.expression());
        } while (this.expect(','));
      }
      this.consume(')');

      var parser = this;

      return function(scope, locals) {
        var args = [];
        var context = contextGetter ? contextGetter(scope, locals) : scope;

        for (var i = 0; i < argsFn.length; i++) {
          args.push(argsFn[i](scope, locals));
        }
        var fnPtr = fn(scope, locals, context) || noop;

        ensureSafeObject(context, parser.text);
        ensureSafeObject(fnPtr, parser.text);

        // IE stupidity! (IE doesn't have apply for some native functions)
        var v = fnPtr.apply
          ? fnPtr.apply(context, args)
          : fnPtr(args[0], args[1], args[2], args[3], args[4]);

        return ensureSafeObject(v, parser.text);
      };
    },

    // This is used with json array declaration
    arrayDeclaration: function () {
      var elementFns = [];
      var allConstant = true;
      if (this.peekToken().text !== ']') {
        do {
          if (this.peek(']')) {
            // Support trailing commas per ES5.1.
            break;
          }
          var elementFn = this.expression();
          elementFns.push(elementFn);
          if (!elementFn.constant) {
            allConstant = false;
          }
        } while (this.expect(','));
      }
      this.consume(']');

      return extend(function(self, locals) {
        var array = [];
        for (var i = 0; i < elementFns.length; i++) {
          array.push(elementFns[i](self, locals));
        }
        return array;
      }, {
        literal: true,
        constant: allConstant
      });
    },

    object: function () {
      var keyValues = [];
      var allConstant = true;
      if (this.peekToken().text !== '}') {
        do {
          if (this.peek('}')) {
            // Support trailing commas per ES5.1.
            break;
          }
          var token = this.expect(),
            key = token.string || token.text;
          this.consume(':');
          var value = this.expression();
          keyValues.push({key: key, value: value});
          if (!value.constant) {
            allConstant = false;
          }
        } while (this.expect(','));
      }
      this.consume('}');

      return extend(function(self, locals) {
        var object = {};
        for (var i = 0; i < keyValues.length; i++) {
          var keyValue = keyValues[i];
          object[keyValue.key] = keyValue.value(self, locals);
        }
        return object;
      }, {
        literal: true,
        constant: allConstant
      });
    }
  };


//////////////////////////////////////////////////
// Parser helper functions
//////////////////////////////////////////////////

  function setter(obj, path, setValue, fullExp, options) {
    //needed?
    options = options || {};

    var element = path.split('.'), key;
    for (var i = 0; element.length > 1; i++) {
      key = ensureSafeMemberName(element.shift(), fullExp);
      var propertyObj = obj[key];
      if (!propertyObj) {
        propertyObj = {};
        obj[key] = propertyObj;
      }
      obj = propertyObj;
      if (obj.then && options.unwrapPromises) {
        promiseWarning(fullExp);
        if (!("$$v" in obj)) {
          (function(promise) {
            promise.then(function(val) { promise.$$v = val; }); }
            )(obj);
        }
        if (obj.$$v === undefined) {
          obj.$$v = {};
        }
        obj = obj.$$v;
      }
    }
    key = ensureSafeMemberName(element.shift(), fullExp);
    obj[key] = setValue;
    return setValue;
  }

  var getterFnCache = {};

  /**
   * Implementation of the "Black Hole" variant from:
   * - http://jsperf.com/angularjs-parse-getter/4
   * - http://jsperf.com/path-evaluation-simplified/7
   */
  function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, options) {
    ensureSafeMemberName(key0, fullExp);
    ensureSafeMemberName(key1, fullExp);
    ensureSafeMemberName(key2, fullExp);
    ensureSafeMemberName(key3, fullExp);
    ensureSafeMemberName(key4, fullExp);

    return !options.unwrapPromises
      ? function cspSafeGetter(scope, locals) {
      var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope;

      if (pathVal == null) return pathVal;
      pathVal = pathVal[key0];

      if (!key1) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key1];

      if (!key2) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key2];

      if (!key3) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key3];

      if (!key4) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key4];

      return pathVal;
    }
      : function cspSafePromiseEnabledGetter(scope, locals) {
      var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope,
        promise;

      if (pathVal == null) return pathVal;

      pathVal = pathVal[key0];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!("$$v" in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function(val) { promise.$$v = val; });
        }
        pathVal = pathVal.$$v;
      }

      if (!key1) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key1];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!("$$v" in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function(val) { promise.$$v = val; });
        }
        pathVal = pathVal.$$v;
      }

      if (!key2) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key2];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!("$$v" in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function(val) { promise.$$v = val; });
        }
        pathVal = pathVal.$$v;
      }

      if (!key3) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key3];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!("$$v" in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function(val) { promise.$$v = val; });
        }
        pathVal = pathVal.$$v;
      }

      if (!key4) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key4];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!("$$v" in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function(val) { promise.$$v = val; });
        }
        pathVal = pathVal.$$v;
      }
      return pathVal;
    };
  }

  function simpleGetterFn1(key0, fullExp) {
    ensureSafeMemberName(key0, fullExp);

    return function simpleGetterFn1(scope, locals) {
      if (scope == null) return undefined;
      return ((locals && locals.hasOwnProperty(key0)) ? locals : scope)[key0];
    };
  }

  function simpleGetterFn2(key0, key1, fullExp) {
    ensureSafeMemberName(key0, fullExp);
    ensureSafeMemberName(key1, fullExp);

    return function simpleGetterFn2(scope, locals) {
      if (scope == null) return undefined;
      scope = ((locals && locals.hasOwnProperty(key0)) ? locals : scope)[key0];
      return scope == null ? undefined : scope[key1];
    };
  }

  function getterFn(path, options, fullExp) {
    // Check whether the cache has this getter already.
    // We can use hasOwnProperty directly on the cache because we ensure,
    // see below, that the cache never stores a path called 'hasOwnProperty'
    if (getterFnCache.hasOwnProperty(path)) {
      return getterFnCache[path];
    }

    var pathKeys = path.split('.'),
      pathKeysLength = pathKeys.length,
      fn;

    // When we have only 1 or 2 tokens, use optimized special case closures.
    // http://jsperf.com/angularjs-parse-getter/6
    if (!options.unwrapPromises && pathKeysLength === 1) {
      fn = simpleGetterFn1(pathKeys[0], fullExp);
    } else if (!options.unwrapPromises && pathKeysLength === 2) {
      fn = simpleGetterFn2(pathKeys[0], pathKeys[1], fullExp);
    } else if (options.csp) {
      if (pathKeysLength < 6) {
        fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp,
          options);
      } else {
        fn = function(scope, locals) {
          var i = 0, val;
          do {
            val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++],
              pathKeys[i++], fullExp, options)(scope, locals);

            locals = undefined; // clear after first iteration
            scope = val;
          } while (i < pathKeysLength);
          return val;
        };
      }
    } else {
      var code = 'var p;\n';
      forEach(pathKeys, function(key, index) {
        ensureSafeMemberName(key, fullExp);
        code += 'if(s == null) return undefined;\n' +
          's='+ (index
          // we simply dereference 's' on any .dot notation
          ? 's'
          // but if we are first then we check locals first, and if so read it first
          : '((k&&k.hasOwnProperty("' + key + '"))?k:s)') + '["' + key + '"]' + ';\n' +
          (options.unwrapPromises
            ? 'if (s && s.then) {\n' +
            ' pw("' + fullExp.replace(/(["\r\n])/g, '\\$1') + '");\n' +
            ' if (!("$$v" in s)) {\n' +
            ' p=s;\n' +
            ' p.$$v = undefined;\n' +
            ' p.then(function(v) {p.$$v=v;});\n' +
            '}\n' +
            ' s=s.$$v\n' +
            '}\n'
            : '');
      });
      code += 'return s;';

      /* jshint -W054 */
      var evaledFnGetter = new Function('s', 'k', 'pw', code); // s=scope, k=locals, pw=promiseWarning
      /* jshint +W054 */
      evaledFnGetter.toString = valueFn(code);
      fn = options.unwrapPromises ? function(scope, locals) {
        return evaledFnGetter(scope, locals, promiseWarning);
      } : evaledFnGetter;
    }

    // Only cache the value if it's not going to mess up the cache object
    // This is more performant that using Object.prototype.hasOwnProperty.call
    if (path !== 'hasOwnProperty') {
      getterFnCache[path] = fn;
    }
    return fn;
  }

///////////////////////////////////

  /**
   * @ngdoc service
   * @name $parse
   * @kind function
   *
   * @description
   *
   * Converts Angular {@link guide/expression expression} into a function.
   *
   * ```js
   *   var getter = $parse('user.name');
   *   var setter = getter.assign;
   *   var context = {user:{name:'angular'}};
   *   var locals = {user:{name:'local'}};
   *
   *   expect(getter(context)).toEqual('angular');
   *   setter(context, 'newValue');
   *   expect(context.user.name).toEqual('newValue');
   *   expect(getter(context, locals)).toEqual('local');
   * ```
   *
   *
   * @param {string} expression String expression to compile.
   * @returns {function(context, locals)} a function which represents the compiled expression:
   *
   *    * `context` – `{object}` – an object against which any expressions embedded in the strings
   *      are evaluated against (typically a scope object).
   *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
   *      `context`.
   *
   *    The returned function also has the following properties:
   *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
   *        literal.
   *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
   *        constant literals.
   *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
   *        set to a function to change its value on the given context.
   *
   */


  /**
   * @ngdoc provider
   * @name $parseProvider
   * @kind function
   *
   * @description
   * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
   *  service.
   */
  function $ParseProvider() {
    var cache = {};

    var $parseOptions = {
      csp: false,
      unwrapPromises: false,
      logPromiseWarnings: true
    };


    /**
     * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
     *
     * @ngdoc method
     * @name $parseProvider#unwrapPromises
     * @description
     *
     * **This feature is deprecated, see deprecation notes below for more info**
     *
     * If set to true (default is false), $parse will unwrap promises automatically when a promise is
     * found at any part of the expression. In other words, if set to true, the expression will always
     * result in a non-promise value.
     *
     * While the promise is unresolved, it's treated as undefined, but once resolved and fulfilled,
     * the fulfillment value is used in place of the promise while evaluating the expression.
     *
     * **Deprecation notice**
     *
     * This is a feature that didn't prove to be wildly useful or popular, primarily because of the
     * dichotomy between data access in templates (accessed as raw values) and controller code
     * (accessed as promises).
     *
     * In most code we ended up resolving promises manually in controllers anyway and thus unifying
     * the model access there.
     *
     * Other downsides of automatic promise unwrapping:
     *
     * - when building components it's often desirable to receive the raw promises
     * - adds complexity and slows down expression evaluation
     * - makes expression code pre-generation unattractive due to the amount of code that needs to be
     *   generated
     * - makes IDE auto-completion and tool support hard
     *
     * **Warning Logs**
     *
     * If the unwrapping is enabled, Angular will log a warning about each expression that unwraps a
     * promise (to reduce the noise, each expression is logged only once). To disable this logging use
     * `$parseProvider.logPromiseWarnings(false)` api.
     *
     *
     * @param {boolean=} value New value.
     * @returns {boolean|self} Returns the current setting when used as getter and self if used as
     *                         setter.
     */
    this.unwrapPromises = function(value) {
      if (isDefined(value)) {
        $parseOptions.unwrapPromises = !!value;
        return this;
      } else {
        return $parseOptions.unwrapPromises;
      }
    };


    /**
     * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
     *
     * @ngdoc method
     * @name $parseProvider#logPromiseWarnings
     * @description
     *
     * Controls whether Angular should log a warning on any encounter of a promise in an expression.
     *
     * The default is set to `true`.
     *
     * This setting applies only if `$parseProvider.unwrapPromises` setting is set to true as well.
     *
     * @param {boolean=} value New value.
     * @returns {boolean|self} Returns the current setting when used as getter and self if used as
     *                         setter.
     */
    this.logPromiseWarnings = function(value) {
      if (isDefined(value)) {
        $parseOptions.logPromiseWarnings = value;
        return this;
      } else {
        return $parseOptions.logPromiseWarnings;
      }
    };


    this.$get = ['$filter', '$sniffer', '$log', function($filter, $sniffer, $log) {
      $parseOptions.csp = $sniffer.csp;

      promiseWarning = function promiseWarningFn(fullExp) {
        if (!$parseOptions.logPromiseWarnings || promiseWarningCache.hasOwnProperty(fullExp)) return;
        promiseWarningCache[fullExp] = true;
        $log.warn('[$parse] Promise found in the expression `' + fullExp + '`. ' +
          'Automatic unwrapping of promises in Angular expressions is deprecated.');
      };

      return function(exp) {
        var parsedExpression;

        switch (typeof exp) {
          case 'string':

            if (cache.hasOwnProperty(exp)) {
              return cache[exp];
            }

            var lexer = new Lexer($parseOptions);
            var parser = new Parser(lexer, $filter, $parseOptions);
            parsedExpression = parser.parse(exp);

            if (exp !== 'hasOwnProperty') {
              // Only cache the value if it's not going to mess up the cache object
              // This is more performant that using Object.prototype.hasOwnProperty.call
              cache[exp] = parsedExpression;
            }

            return parsedExpression;

          case 'function':
            return exp;

          default:
            return noop;
        }
      };
    }];
  }

  /**
   * @ngdoc service
   * @name $q
   * @requires $rootScope
   *
   * @description
   * A promise/deferred implementation inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
   *
   * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
   * interface for interacting with an object that represents the result of an action that is
   * performed asynchronously, and may or may not be finished at any given point in time.
   *
   * From the perspective of dealing with error handling, deferred and promise APIs are to
   * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
   *
   * ```js
   *   // for the purpose of this example let's assume that variables `$q`, `scope` and `okToGreet`
   *   // are available in the current lexical scope (they could have been injected or passed in).
   *
   *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       // since this fn executes async in a future turn of the event loop, we need to wrap
 *       // our code into an $apply call so that the model changes are properly observed.
 *       scope.$apply(function() {
 *         deferred.notify('About to greet ' + name + '.');
 *
 *         if (okToGreet(name)) {
 *           deferred.resolve('Hello, ' + name + '!');
 *         } else {
 *           deferred.reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       });
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
   *
   *   var promise = asyncGreet('Robin Hood');
   *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
   * ```
   *
   * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
   * comes in the way of guarantees that promise and deferred APIs make, see
   * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
   *
   * Additionally the promise api allows for composition that is very hard to do with the
   * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
   * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
   * section on serial or parallel joining of promises.
   *
   *
   * # The Deferred API
   *
   * A new instance of deferred is constructed by calling `$q.defer()`.
   *
   * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
   * that can be used for signaling the successful or unsuccessful completion, as well as the status
   * of the task.
   *
   * **Methods**
   *
   * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
   *   constructed via `$q.reject`, the promise will be rejected instead.
   * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
   *   resolving it with a rejection constructed via `$q.reject`.
   * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
   *   multiple times before the promise is either resolved or rejected.
   *
   * **Properties**
   *
   * - promise – `{Promise}` – promise object associated with this deferred.
   *
   *
   * # The Promise API
   *
   * A new promise instance is created when a deferred instance is created and can be retrieved by
   * calling `deferred.promise`.
   *
   * The purpose of the promise object is to allow for interested parties to get access to the result
   * of the deferred task when it completes.
   *
   * **Methods**
   *
   * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
   *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
   *   as soon as the result is available. The callbacks are called with a single argument: the result
   *   or rejection reason. Additionally, the notify callback may be called zero or more times to
   *   provide a progress indication, before the promise is resolved or rejected.
   *
   *   This method *returns a new promise* which is resolved or rejected via the return value of the
   *   `successCallback`, `errorCallback`. It also notifies via the return value of the
   *   `notifyCallback` method. The promise can not be resolved or rejected from the notifyCallback
   *   method.
   *
   * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
   *
   * - `finally(callback)` – allows you to observe either the fulfillment or rejection of a promise,
   *   but to do so without modifying the final value. This is useful to release resources or do some
   *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
   *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
   *   more information.
   *
   *   Because `finally` is a reserved word in JavaScript and reserved keywords are not supported as
   *   property names by ES3, you'll need to invoke the method like `promise['finally'](callback)` to
   *   make your code IE8 and Android 2.x compatible.
   *
   * # Chaining promises
   *
   * Because calling the `then` method of a promise returns a new derived promise, it is easily
   * possible to create a chain of promises:
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
   *
   *   // promiseB will be resolved immediately after promiseA is resolved and its value
   *   // will be the result of promiseA incremented by 1
   * ```
   *
   * It is possible to create chains of any length and since a promise can be resolved with another
   * promise (which will defer its resolution further), it is possible to pause/defer resolution of
   * the promises at any point in the chain. This makes it possible to implement powerful APIs like
   * $http's response interceptors.
   *
   *
   * # Differences between Kris Kowal's Q and $q
   *
   *  There are two main differences:
   *
   * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
   *   mechanism in angular, which means faster propagation of resolution or rejection into your
   *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
   * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
   *   all the important functionality needed for common async tasks.
   *
   *  # Testing
   *
   *  ```js
   *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
   *  ```
   */
  function $QProvider() {

    this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
      return qFactory(function(callback) {
        $rootScope.$evalAsync(callback);
      }, $exceptionHandler);
    }];
  }


  /**
   * Constructs a promise manager.
   *
   * @param {function(Function)} nextTick Function for executing functions in the next turn.
   * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
   *     debugging purposes.
   * @returns {object} Promise manager.
   */
  function qFactory(nextTick, exceptionHandler) {

    /**
     * @ngdoc method
     * @name $q#defer
     * @kind function
     *
     * @description
     * Creates a `Deferred` object which represents a task which will finish in the future.
     *
     * @returns {Deferred} Returns a new instance of deferred.
     */
    var defer = function() {
      var pending = [],
        value, deferred;

      deferred = {

        resolve: function(val) {
          if (pending) {
            var callbacks = pending;
            pending = undefined;
            value = ref(val);

            if (callbacks.length) {
              nextTick(function() {
                var callback;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  callback = callbacks[i];
                  value.then(callback[0], callback[1], callback[2]);
                }
              });
            }
          }
        },


        reject: function(reason) {
          deferred.resolve(createInternalRejectedPromise(reason));
        },


        notify: function(progress) {
          if (pending) {
            var callbacks = pending;

            if (pending.length) {
              nextTick(function() {
                var callback;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  callback = callbacks[i];
                  callback[2](progress);
                }
              });
            }
          }
        },


        promise: {
          then: function(callback, errback, progressback) {
            var result = defer();

            var wrappedCallback = function(value) {
              try {
                result.resolve((isFunction(callback) ? callback : defaultCallback)(value));
              } catch(e) {
                result.reject(e);
                exceptionHandler(e);
              }
            };

            var wrappedErrback = function(reason) {
              try {
                result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
              } catch(e) {
                result.reject(e);
                exceptionHandler(e);
              }
            };

            var wrappedProgressback = function(progress) {
              try {
                result.notify((isFunction(progressback) ? progressback : defaultCallback)(progress));
              } catch(e) {
                exceptionHandler(e);
              }
            };

            if (pending) {
              pending.push([wrappedCallback, wrappedErrback, wrappedProgressback]);
            } else {
              value.then(wrappedCallback, wrappedErrback, wrappedProgressback);
            }

            return result.promise;
          },

          "catch": function(callback) {
            return this.then(null, callback);
          },

          "finally": function(callback) {

            function makePromise(value, resolved) {
              var result = defer();
              if (resolved) {
                result.resolve(value);
              } else {
                result.reject(value);
              }
              return result.promise;
            }

            function handleCallback(value, isResolved) {
              var callbackOutput = null;
              try {
                callbackOutput = (callback ||defaultCallback)();
              } catch(e) {
                return makePromise(e, false);
              }
              if (callbackOutput && isFunction(callbackOutput.then)) {
                return callbackOutput.then(function() {
                  return makePromise(value, isResolved);
                }, function(error) {
                  return makePromise(error, false);
                });
              } else {
                return makePromise(value, isResolved);
              }
            }

            return this.then(function(value) {
              return handleCallback(value, true);
            }, function(error) {
              return handleCallback(error, false);
            });
          }
        }
      };

      return deferred;
    };


    var ref = function(value) {
      if (value && isFunction(value.then)) return value;
      return {
        then: function(callback) {
          var result = defer();
          nextTick(function() {
            result.resolve(callback(value));
          });
          return result.promise;
        }
      };
    };


    /**
     * @ngdoc method
     * @name $q#reject
     * @kind function
     *
     * @description
     * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
     * used to forward rejection in a chain of promises. If you are dealing with the last promise in
     * a promise chain, you don't need to worry about it.
     *
     * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
     * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
     * a promise error callback and you want to forward the error to the promise derived from the
     * current promise, you have to "rethrow" the error by returning a rejection constructed via
     * `reject`.
     *
     * ```js
     *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
     * ```
     *
     * @param {*} reason Constant, message, exception or an object representing the rejection reason.
     * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
     */
    var reject = function(reason) {
      var result = defer();
      result.reject(reason);
      return result.promise;
    };

    var createInternalRejectedPromise = function(reason) {
      return {
        then: function(callback, errback) {
          var result = defer();
          nextTick(function() {
            try {
              result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
            } catch(e) {
              result.reject(e);
              exceptionHandler(e);
            }
          });
          return result.promise;
        }
      };
    };


    /**
     * @ngdoc method
     * @name $q#when
     * @kind function
     *
     * @description
     * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
     * This is useful when you are dealing with an object that might or might not be a promise, or if
     * the promise comes from a source that can't be trusted.
     *
     * @param {*} value Value or a promise
     * @returns {Promise} Returns a promise of the passed value or promise
     */
    var when = function(value, callback, errback, progressback) {
      var result = defer(),
        done;

      var wrappedCallback = function(value) {
        try {
          return (isFunction(callback) ? callback : defaultCallback)(value);
        } catch (e) {
          exceptionHandler(e);
          return reject(e);
        }
      };

      var wrappedErrback = function(reason) {
        try {
          return (isFunction(errback) ? errback : defaultErrback)(reason);
        } catch (e) {
          exceptionHandler(e);
          return reject(e);
        }
      };

      var wrappedProgressback = function(progress) {
        try {
          return (isFunction(progressback) ? progressback : defaultCallback)(progress);
        } catch (e) {
          exceptionHandler(e);
        }
      };

      nextTick(function() {
        ref(value).then(function(value) {
          if (done) return;
          done = true;
          result.resolve(ref(value).then(wrappedCallback, wrappedErrback, wrappedProgressback));
        }, function(reason) {
          if (done) return;
          done = true;
          result.resolve(wrappedErrback(reason));
        }, function(progress) {
          if (done) return;
          result.notify(wrappedProgressback(progress));
        });
      });

      return result.promise;
    };


    function defaultCallback(value) {
      return value;
    }


    function defaultErrback(reason) {
      return reject(reason);
    }


    /**
     * @ngdoc method
     * @name $q#all
     * @kind function
     *
     * @description
     * Combines multiple promises into a single promise that is resolved when all of the input
     * promises are resolved.
     *
     * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
     * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
     *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
     *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
     *   with the same rejection value.
     */
    function all(promises) {
      var deferred = defer(),
        counter = 0,
        results = isArray(promises) ? [] : {};

      forEach(promises, function(promise, key) {
        counter++;
        ref(promise).then(function(value) {
          if (results.hasOwnProperty(key)) return;
          results[key] = value;
          if (!(--counter)) deferred.resolve(results);
        }, function(reason) {
          if (results.hasOwnProperty(key)) return;
          deferred.reject(reason);
        });
      });

      if (counter === 0) {
        deferred.resolve(results);
      }

      return deferred.promise;
    }

    return {
      defer: defer,
      reject: reject,
      when: when,
      all: all
    };
  }

  function $$RAFProvider(){ //rAF
    this.$get = ['$window', '$timeout', function($window, $timeout) {
      var requestAnimationFrame = $window.requestAnimationFrame ||
        $window.webkitRequestAnimationFrame ||
        $window.mozRequestAnimationFrame;

      var cancelAnimationFrame = $window.cancelAnimationFrame ||
        $window.webkitCancelAnimationFrame ||
        $window.mozCancelAnimationFrame ||
        $window.webkitCancelRequestAnimationFrame;

      var rafSupported = !!requestAnimationFrame;
      var raf = rafSupported
        ? function(fn) {
        var id = requestAnimationFrame(fn);
        return function() {
          cancelAnimationFrame(id);
        };
      }
        : function(fn) {
        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
        return function() {
          $timeout.cancel(timer);
        };
      };

      raf.supported = rafSupported;

      return raf;
    }];
  }

  /**
   * DESIGN NOTES
   *
   * The design decisions behind the scope are heavily favored for speed and memory consumption.
   *
   * The typical use of scope is to watch the expressions, which most of the time return the same
   * value as last time so we optimize the operation.
   *
   * Closures construction is expensive in terms of speed as well as memory:
   *   - No closures, instead use prototypical inheritance for API
   *   - Internal state needs to be stored on scope directly, which means that private state is
   *     exposed as $$____ properties
   *
   * Loop operations are optimized by using while(count--) { ... }
   *   - this means that in order to keep the same order of execution as addition we have to add
   *     items to the array at the beginning (unshift) instead of at the end (push)
   *
   * Child scopes are created and removed often
   *   - Using an array would be slow since inserts in middle are expensive so we use linked list
   *
   * There are few watches then a lot of observers. This is why you don't want the observer to be
   * implemented in the same way as watch. Watch requires return of initialization function which
   * are expensive to construct.
   */


  /**
   * @ngdoc provider
   * @name $rootScopeProvider
   * @description
   *
   * Provider for the $rootScope service.
   */

  /**
   * @ngdoc method
   * @name $rootScopeProvider#digestTtl
   * @description
   *
   * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
   * assuming that the model is unstable.
   *
   * The current default is 10 iterations.
   *
   * In complex applications it's possible that the dependencies between `$watch`s will result in
   * several digest iterations. However if an application needs more than the default 10 digest
   * iterations for its model to stabilize then you should investigate what is causing the model to
   * continuously change during the digest.
   *
   * Increasing the TTL could have performance implications, so you should not change it without
   * proper justification.
   *
   * @param {number} limit The number of digest iterations.
   */


  /**
   * @ngdoc service
   * @name $rootScope
   * @description
   *
   * Every application has a single root {@link ng.$rootScope.Scope scope}.
   * All other scopes are descendant scopes of the root scope. Scopes provide separation
   * between the model and the view, via a mechanism for watching the model for changes.
   * They also provide an event emission/broadcast and subscription facility. See the
   * {@link guide/scope developer guide on scopes}.
   */
  function $RootScopeProvider(){
    var TTL = 10;
    var $rootScopeMinErr = minErr('$rootScope');
    var lastDirtyWatch = null;

    this.digestTtl = function(value) {
      if (arguments.length) {
        TTL = value;
      }
      return TTL;
    };

    this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
      function( $injector,   $exceptionHandler,   $parse,   $browser) {

        /**
         * @ngdoc type
         * @name $rootScope.Scope
         *
         * @description
         * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
         * {@link auto.$injector $injector}. Child scopes are created using the
         * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
         * compiled HTML template is executed.)
         *
         * Here is a simple scope snippet to show how you can interact with the scope.
         * ```html
         * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
         * ```
         *
         * # Inheritance
         * A scope can inherit from a parent scope, as in this example:
         * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         child.name = "World";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
         * ```
         *
         *
         * @param {Object.<string, function()>=} providers Map of service factory which need to be
         *                                       provided for the current scope. Defaults to {@link ng}.
         * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
         *                              append/override services provided by `providers`. This is handy
         *                              when unit-testing and having the need to override a default
         *                              service.
         * @returns {Object} Newly created scope.
         *
         */
        function Scope() {
          this.$id = nextUid();
          this.$$phase = this.$parent = this.$$watchers =
            this.$$nextSibling = this.$$prevSibling =
              this.$$childHead = this.$$childTail = null;
          this['this'] = this.$root =  this;
          this.$$destroyed = false;
          this.$$asyncQueue = [];
          this.$$postDigestQueue = [];
          this.$$listeners = {};
          this.$$listenerCount = {};
          this.$$isolateBindings = {};
        }

        /**
         * @ngdoc property
         * @name $rootScope.Scope#$id
         * @returns {number} Unique scope ID (monotonically increasing alphanumeric sequence) useful for
         *   debugging.
         */


        Scope.prototype = {
          constructor: Scope,
          /**
           * @ngdoc method
           * @name $rootScope.Scope#$new
           * @kind function
           *
           * @description
           * Creates a new child {@link ng.$rootScope.Scope scope}.
           *
           * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} and
           * {@link ng.$rootScope.Scope#$digest $digest()} events. The scope can be removed from the
           * scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
           *
           * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
           * desired for the scope and its child scopes to be permanently detached from the parent and
           * thus stop participating in model change detection and listener notification by invoking.
           *
           * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
           *         parent scope. The scope is isolated, as it can not see parent scope properties.
           *         When creating widgets, it is useful for the widget to not accidentally read parent
           *         state.
           *
           * @returns {Object} The newly created child scope.
           *
           */
          $new: function(isolate) {
            var ChildScope,
              child;

            if (isolate) {
              child = new Scope();
              child.$root = this.$root;
              // ensure that there is just one async queue per $rootScope and its children
              child.$$asyncQueue = this.$$asyncQueue;
              child.$$postDigestQueue = this.$$postDigestQueue;
            } else {
              // Only create a child scope class if somebody asks for one,
              // but cache it to allow the VM to optimize lookups.
              if (!this.$$childScopeClass) {
                this.$$childScopeClass = function() {
                  this.$$watchers = this.$$nextSibling =
                    this.$$childHead = this.$$childTail = null;
                  this.$$listeners = {};
                  this.$$listenerCount = {};
                  this.$id = nextUid();
                  this.$$childScopeClass = null;
                };
                this.$$childScopeClass.prototype = this;
              }
              child = new this.$$childScopeClass();
            }
            child['this'] = child;
            child.$parent = this;
            child.$$prevSibling = this.$$childTail;
            if (this.$$childHead) {
              this.$$childTail.$$nextSibling = child;
              this.$$childTail = child;
            } else {
              this.$$childHead = this.$$childTail = child;
            }
            return child;
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$watch
           * @kind function
           *
           * @description
           * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
           *
           * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
       *   $digest()} and should return the value that will be watched. (Since
           *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the
           *   `watchExpression` can execute multiple times per
           *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)
           * - The `listener` is called only when the value from the current `watchExpression` and the
           *   previous call to `watchExpression` are not equal (with the exception of the initial run,
           *   see below). Inequality is determined according to reference inequality,
           *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
           *    via the `!==` Javascript operator, unless `objectEquality == true`
           *   (see next point)
           * - When `objectEquality == true`, inequality of the `watchExpression` is determined
           *   according to the {@link angular.equals} function. To save the value of the object for
           *   later comparison, the {@link angular.copy} function is used. This therefore means that
           *   watching complex objects will have adverse memory and performance implications.
           * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
           *   This is achieved by rerunning the watchers until no changes are detected. The rerun
           *   iteration limit is 10 to prevent an infinite loop deadlock.
           *
           *
           * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
           * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`
           * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a
           * change is detected, be prepared for multiple calls to your listener.)
           *
           * After a watcher is registered with the scope, the `listener` fn is called asynchronously
           * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
           * watcher. In rare cases, this is undesirable because the listener is called when the result
           * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
           * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
           * listener was called due to initialization.
           *
           * The example below contains an illustration of using a function as your $watch listener
           *
           *
           * # Example
           * ```js
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);



           // Using a listener function
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
           // This is the listener function
           function() { return food; },
           // This is the change handler
           function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

           * ```
           *
           *
           *
           * @param {(function()|string)} watchExpression Expression that is evaluated on each
           *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
           *    a call to the `listener`.
           *
           *    - `string`: Evaluated as {@link guide/expression expression}
           *    - `function(scope)`: called with current `scope` as a parameter.
           * @param {(function()|string)=} listener Callback called whenever the return value of
           *   the `watchExpression` changes.
           *
           *    - `string`: Evaluated as {@link guide/expression expression}
           *    - `function(newValue, oldValue, scope)`: called with current and previous values as
           *      parameters.
           *
           * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of
           *     comparing for reference equality.
           * @returns {function()} Returns a deregistration function for this listener.
           */
          $watch: function(watchExp, listener, objectEquality) {
            var scope = this,
              get = compileToFn(watchExp, 'watch'),
              array = scope.$$watchers,
              watcher = {
                fn: listener,
                last: initWatchVal,
                get: get,
                exp: watchExp,
                eq: !!objectEquality
              };

            lastDirtyWatch = null;

            // in the case user pass string, we need to compile it, do we really need this ?
            if (!isFunction(listener)) {
              var listenFn = compileToFn(listener || noop, 'listener');
              watcher.fn = function(newVal, oldVal, scope) {listenFn(scope);};
            }

            if (typeof watchExp == 'string' && get.constant) {
              var originalFn = watcher.fn;
              watcher.fn = function(newVal, oldVal, scope) {
                originalFn.call(this, newVal, oldVal, scope);
                arrayRemove(array, watcher);
              };
            }

            if (!array) {
              array = scope.$$watchers = [];
            }
            // we use unshift since we use a while loop in $digest for speed.
            // the while loop reads in reverse order.
            array.unshift(watcher);

            return function deregisterWatch() {
              arrayRemove(array, watcher);
              lastDirtyWatch = null;
            };
          },


          /**
           * @ngdoc method
           * @name $rootScope.Scope#$watchCollection
           * @kind function
           *
           * @description
           * Shallow watches the properties of an object and fires whenever any of the properties change
           * (for arrays, this implies watching the array items; for object maps, this implies watching
           * the properties). If a change is detected, the `listener` callback is fired.
           *
           * - The `obj` collection is observed via standard $watch operation and is examined on every
           *   call to $digest() to see if any items have been added, removed, or moved.
           * - The `listener` is called whenever anything within the `obj` has changed. Examples include
           *   adding, removing, and moving items belonging to an object or array.
           *
           *
           * # Example
           * ```js
           $scope.names = ['igor', 'matias', 'misko', 'james'];
           $scope.dataCount = 4;

           $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

           expect($scope.dataCount).toEqual(4);
           $scope.$digest();

           //still at 4 ... no changes
           expect($scope.dataCount).toEqual(4);

           $scope.names.pop();
           $scope.$digest();

           //now there's been a change
           expect($scope.dataCount).toEqual(3);
           * ```
           *
           *
           * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
           *    expression value should evaluate to an object or an array which is observed on each
           *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
           *    collection will trigger a call to the `listener`.
           *
           * @param {function(newCollection, oldCollection, scope)} listener a callback function called
           *    when a change is detected.
           *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
           *    - The `oldCollection` object is a copy of the former collection data.
           *      Due to performance considerations, the`oldCollection` value is computed only if the
           *      `listener` function declares two or more arguments.
           *    - The `scope` argument refers to the current scope.
           *
           * @returns {function()} Returns a de-registration function for this listener. When the
           *    de-registration function is executed, the internal watch operation is terminated.
           */
          $watchCollection: function(obj, listener) {
            var self = this;
            // the current value, updated on each dirty-check run
            var newValue;
            // a shallow copy of the newValue from the last dirty-check run,
            // updated to match newValue during dirty-check run
            var oldValue;
            // a shallow copy of the newValue from when the last change happened
            var veryOldValue;
            // only track veryOldValue if the listener is asking for it
            var trackVeryOldValue = (listener.length > 1);
            var changeDetected = 0;
            var objGetter = $parse(obj);
            var internalArray = [];
            var internalObject = {};
            var initRun = true;
            var oldLength = 0;

            function $watchCollectionWatch() {
              newValue = objGetter(self);
              var newLength, key;

              if (!isObject(newValue)) { // if primitive
                if (oldValue !== newValue) {
                  oldValue = newValue;
                  changeDetected++;
                }
              } else if (isArrayLike(newValue)) {
                if (oldValue !== internalArray) {
                  // we are transitioning from something which was not an array into array.
                  oldValue = internalArray;
                  oldLength = oldValue.length = 0;
                  changeDetected++;
                }

                newLength = newValue.length;

                if (oldLength !== newLength) {
                  // if lengths do not match we need to trigger change notification
                  changeDetected++;
                  oldValue.length = oldLength = newLength;
                }
                // copy the items to oldValue and look for changes.
                for (var i = 0; i < newLength; i++) {
                  var bothNaN = (oldValue[i] !== oldValue[i]) &&
                    (newValue[i] !== newValue[i]);
                  if (!bothNaN && (oldValue[i] !== newValue[i])) {
                    changeDetected++;
                    oldValue[i] = newValue[i];
                  }
                }
              } else {
                if (oldValue !== internalObject) {
                  // we are transitioning from something which was not an object into object.
                  oldValue = internalObject = {};
                  oldLength = 0;
                  changeDetected++;
                }
                // copy the items to oldValue and look for changes.
                newLength = 0;
                for (key in newValue) {
                  if (newValue.hasOwnProperty(key)) {
                    newLength++;
                    if (oldValue.hasOwnProperty(key)) {
                      if (oldValue[key] !== newValue[key]) {
                        changeDetected++;
                        oldValue[key] = newValue[key];
                      }
                    } else {
                      oldLength++;
                      oldValue[key] = newValue[key];
                      changeDetected++;
                    }
                  }
                }
                if (oldLength > newLength) {
                  // we used to have more keys, need to find them and destroy them.
                  changeDetected++;
                  for(key in oldValue) {
                    if (oldValue.hasOwnProperty(key) && !newValue.hasOwnProperty(key)) {
                      oldLength--;
                      delete oldValue[key];
                    }
                  }
                }
              }
              return changeDetected;
            }

            function $watchCollectionAction() {
              if (initRun) {
                initRun = false;
                listener(newValue, newValue, self);
              } else {
                listener(newValue, veryOldValue, self);
              }

              // make a copy for the next time a collection is changed
              if (trackVeryOldValue) {
                if (!isObject(newValue)) {
                  //primitive
                  veryOldValue = newValue;
                } else if (isArrayLike(newValue)) {
                  veryOldValue = new Array(newValue.length);
                  for (var i = 0; i < newValue.length; i++) {
                    veryOldValue[i] = newValue[i];
                  }
                } else { // if object
                  veryOldValue = {};
                  for (var key in newValue) {
                    if (hasOwnProperty.call(newValue, key)) {
                      veryOldValue[key] = newValue[key];
                    }
                  }
                }
              }
            }

            return this.$watch($watchCollectionWatch, $watchCollectionAction);
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$digest
           * @kind function
           *
           * @description
           * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
           * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
           * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
           * until no more listeners are firing. This means that it is possible to get into an infinite
           * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
           * iterations exceeds 10.
           *
           * Usually, you don't call `$digest()` directly in
           * {@link ng.directive:ngController controllers} or in
           * {@link ng.$compileProvider#directive directives}.
           * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
           * a {@link ng.$compileProvider#directive directives}), which will force a `$digest()`.
           *
           * If you want to be notified whenever `$digest()` is called,
           * you can register a `watchExpression` function with
           * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
           *
           * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
           *
           * # Example
           * ```js
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);
           * ```
           *
           */
          $digest: function() {
            var watch, value, last,
              watchers,
              asyncQueue = this.$$asyncQueue,
              postDigestQueue = this.$$postDigestQueue,
              length,
              dirty, ttl = TTL,
              next, current, target = this,
              watchLog = [],
              logIdx, logMsg, asyncTask;

            beginPhase('$digest');

            lastDirtyWatch = null;

            do { // "while dirty" loop
              dirty = false;
              current = target;

              while(asyncQueue.length) {
                try {
                  asyncTask = asyncQueue.shift();
                  asyncTask.scope.$eval(asyncTask.expression);
                } catch (e) {
                  clearPhase();
                  $exceptionHandler(e);
                }
                lastDirtyWatch = null;
              }

              traverseScopesLoop:
                do { // "traverse the scopes" loop
                  if ((watchers = current.$$watchers)) {
                    // process our watches
                    length = watchers.length;
                    while (length--) {
                      try {
                        watch = watchers[length];
                        // Most common watches are on primitives, in which case we can short
                        // circuit it with === operator, only when === fails do we use .equals
                        if (watch) {
                          if ((value = watch.get(current)) !== (last = watch.last) &&
                            !(watch.eq
                              ? equals(value, last)
                              : (typeof value == 'number' && typeof last == 'number'
                              && isNaN(value) && isNaN(last)))) {
                            dirty = true;
                            lastDirtyWatch = watch;
                            watch.last = watch.eq ? copy(value, null) : value;
                            watch.fn(value, ((last === initWatchVal) ? value : last), current);
                            if (ttl < 5) {
                              logIdx = 4 - ttl;
                              if (!watchLog[logIdx]) watchLog[logIdx] = [];
                              logMsg = (isFunction(watch.exp))
                                ? 'fn: ' + (watch.exp.name || watch.exp.toString())
                                : watch.exp;
                              logMsg += '; newVal: ' + toJson(value) + '; oldVal: ' + toJson(last);
                              watchLog[logIdx].push(logMsg);
                            }
                          } else if (watch === lastDirtyWatch) {
                            // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                            // have already been tested.
                            dirty = false;
                            break traverseScopesLoop;
                          }
                        }
                      } catch (e) {
                        clearPhase();
                        $exceptionHandler(e);
                      }
                    }
                  }

                  // Insanity Warning: scope depth-first traversal
                  // yes, this code is a bit crazy, but it works and we have tests to prove it!
                  // this piece should be kept in sync with the traversal in $broadcast
                  if (!(next = (current.$$childHead ||
                    (current !== target && current.$$nextSibling)))) {
                    while(current !== target && !(next = current.$$nextSibling)) {
                      current = current.$parent;
                    }
                  }
                } while ((current = next));

              // `break traverseScopesLoop;` takes us to here

              if((dirty || asyncQueue.length) && !(ttl--)) {
                clearPhase();
                throw $rootScopeMinErr('infdig',
                    '{0} $digest() iterations reached. Aborting!\n' +
                    'Watchers fired in the last 5 iterations: {1}',
                  TTL, toJson(watchLog));
              }

            } while (dirty || asyncQueue.length);

            clearPhase();

            while(postDigestQueue.length) {
              try {
                postDigestQueue.shift()();
              } catch (e) {
                $exceptionHandler(e);
              }
            }
          },


          /**
           * @ngdoc event
           * @name $rootScope.Scope#$destroy
           * @eventType broadcast on scope being destroyed
           *
           * @description
           * Broadcasted when a scope and its children are being destroyed.
           *
           * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
           * clean up DOM bindings before an element is removed from the DOM.
           */

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$destroy
           * @kind function
           *
           * @description
           * Removes the current scope (and all of its children) from the parent scope. Removal implies
           * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
           * propagate to the current scope and its children. Removal also implies that the current
           * scope is eligible for garbage collection.
           *
           * The `$destroy()` is usually used by directives such as
           * {@link ng.directive:ngRepeat ngRepeat} for managing the
           * unrolling of the loop.
           *
           * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
           * Application code can register a `$destroy` event handler that will give it a chance to
           * perform any necessary cleanup.
           *
           * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
           * clean up DOM bindings before an element is removed from the DOM.
           */
          $destroy: function() {
            // we can't destroy the root scope or a scope that has been already destroyed
            if (this.$$destroyed) return;
            var parent = this.$parent;

            this.$broadcast('$destroy');
            this.$$destroyed = true;
            if (this === $rootScope) return;

            forEach(this.$$listenerCount, bind(null, decrementListenerCount, this));

            // sever all the references to parent scopes (after this cleanup, the current scope should
            // not be retained by any of our references and should be eligible for garbage collection)
            if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
            if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
            if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
            if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;


            // All of the code below is bogus code that works around V8's memory leak via optimized code
            // and inline caches.
            //
            // see:
            // - https://code.google.com/p/v8/issues/detail?id=2073#c26
            // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
            // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

            this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
              this.$$childTail = this.$root = null;

            // don't reset these to null in case some async task tries to register a listener/watch/task
            this.$$listeners = {};
            this.$$watchers = this.$$asyncQueue = this.$$postDigestQueue = [];

            // prevent NPEs since these methods have references to properties we nulled out
            this.$destroy = this.$digest = this.$apply = noop;
            this.$on = this.$watch = function() { return noop; };
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$eval
           * @kind function
           *
           * @description
           * Executes the `expression` on the current scope and returns the result. Any exceptions in
           * the expression are propagated (uncaught). This is useful when evaluating Angular
           * expressions.
           *
           * # Example
           * ```js
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
           * ```
           *
           * @param {(string|function())=} expression An angular expression to be executed.
           *
           *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
           *    - `function(scope)`: execute the function with the current `scope` parameter.
           *
           * @param {(object)=} locals Local variables object, useful for overriding values in scope.
           * @returns {*} The result of evaluating the expression.
           */
          $eval: function(expr, locals) {
            return $parse(expr)(this, locals);
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$evalAsync
           * @kind function
           *
           * @description
           * Executes the expression on the current scope at a later point in time.
           *
           * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
           * that:
           *
           *   - it will execute after the function that scheduled the evaluation (preferably before DOM
           *     rendering).
           *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
           *     `expression` execution.
           *
           * Any exceptions from the execution of the expression are forwarded to the
           * {@link ng.$exceptionHandler $exceptionHandler} service.
           *
           * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
           * will be scheduled. However, it is encouraged to always call code that changes the model
           * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
           *
           * @param {(string|function())=} expression An angular expression to be executed.
           *
           *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
           *    - `function(scope)`: execute the function with the current `scope` parameter.
           *
           */
          $evalAsync: function(expr) {
            // if we are outside of an $digest loop and this is the first time we are scheduling async
            // task also schedule async auto-flush
            if (!$rootScope.$$phase && !$rootScope.$$asyncQueue.length) {
              $browser.defer(function() {
                if ($rootScope.$$asyncQueue.length) {
                  $rootScope.$digest();
                }
              });
            }

            this.$$asyncQueue.push({scope: this, expression: expr});
          },

          $$postDigest : function(fn) {
            this.$$postDigestQueue.push(fn);
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$apply
           * @kind function
           *
           * @description
           * `$apply()` is used to execute an expression in angular from outside of the angular
           * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
           * Because we are calling into the angular framework we need to perform proper scope life
           * cycle of {@link ng.$exceptionHandler exception handling},
           * {@link ng.$rootScope.Scope#$digest executing watches}.
           *
           * ## Life cycle
           *
           * # Pseudo-Code of `$apply()`
           * ```js
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
           * ```
           *
           *
           * Scope's `$apply()` method transitions through the following stages:
           *
           * 1. The {@link guide/expression expression} is executed using the
           *    {@link ng.$rootScope.Scope#$eval $eval()} method.
           * 2. Any exceptions from the execution of the expression are forwarded to the
           *    {@link ng.$exceptionHandler $exceptionHandler} service.
           * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
           *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
           *
           *
           * @param {(string|function())=} exp An angular expression to be executed.
           *
           *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
           *    - `function(scope)`: execute the function with current `scope` parameter.
           *
           * @returns {*} The result of evaluating the expression.
           */
          $apply: function(expr) {
            try {
              beginPhase('$apply');
              return this.$eval(expr);
            } catch (e) {
              $exceptionHandler(e);
            } finally {
              clearPhase();
              try {
                $rootScope.$digest();
              } catch (e) {
                $exceptionHandler(e);
                throw e;
              }
            }
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$on
           * @kind function
           *
           * @description
           * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
           * discussion of event life cycle.
           *
           * The event listener function format is: `function(event, args...)`. The `event` object
           * passed into the listener has the following attributes:
           *
           *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
           *     `$broadcast`-ed.
           *   - `currentScope` - `{Scope}`: the current scope which is handling the event.
           *   - `name` - `{string}`: name of the event.
           *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
           *     further event propagation (available only for events that were `$emit`-ed).
           *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
           *     to true.
           *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
           *
           * @param {string} name Event name to listen on.
           * @param {function(event, ...args)} listener Function to call when the event is emitted.
           * @returns {function()} Returns a deregistration function for this listener.
           */
          $on: function(name, listener) {
            var namedListeners = this.$$listeners[name];
            if (!namedListeners) {
              this.$$listeners[name] = namedListeners = [];
            }
            namedListeners.push(listener);

            var current = this;
            do {
              if (!current.$$listenerCount[name]) {
                current.$$listenerCount[name] = 0;
              }
              current.$$listenerCount[name]++;
            } while ((current = current.$parent));

            var self = this;
            return function() {
              namedListeners[indexOf(namedListeners, listener)] = null;
              decrementListenerCount(self, 1, name);
            };
          },


          /**
           * @ngdoc method
           * @name $rootScope.Scope#$emit
           * @kind function
           *
           * @description
           * Dispatches an event `name` upwards through the scope hierarchy notifying the
           * registered {@link ng.$rootScope.Scope#$on} listeners.
           *
           * The event life cycle starts at the scope on which `$emit` was called. All
           * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
           * notified. Afterwards, the event traverses upwards toward the root scope and calls all
           * registered listeners along the way. The event will stop propagating if one of the listeners
           * cancels it.
           *
           * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
           * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
           *
           * @param {string} name Event name to emit.
           * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
           * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
           */
          $emit: function(name, args) {
            var empty = [],
              namedListeners,
              scope = this,
              stopPropagation = false,
              event = {
                name: name,
                targetScope: scope,
                stopPropagation: function() {stopPropagation = true;},
                preventDefault: function() {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              },
              listenerArgs = concat([event], arguments, 1),
              i, length;

            do {
              namedListeners = scope.$$listeners[name] || empty;
              event.currentScope = scope;
              for (i=0, length=namedListeners.length; i<length; i++) {

                // if listeners were deregistered, defragment the array
                if (!namedListeners[i]) {
                  namedListeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }
                try {
                  //allow all listeners attached to the current scope to run
                  namedListeners[i].apply(null, listenerArgs);
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              //if any listener on the current scope stops propagation, prevent bubbling
              if (stopPropagation) return event;
              //traverse upwards
              scope = scope.$parent;
            } while (scope);

            return event;
          },


          /**
           * @ngdoc method
           * @name $rootScope.Scope#$broadcast
           * @kind function
           *
           * @description
           * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
           * registered {@link ng.$rootScope.Scope#$on} listeners.
           *
           * The event life cycle starts at the scope on which `$broadcast` was called. All
           * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
           * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
           * scope and calls all registered listeners along the way. The event cannot be canceled.
           *
           * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
           * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
           *
           * @param {string} name Event name to broadcast.
           * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
           * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
           */
          $broadcast: function(name, args) {
            var target = this,
              current = target,
              next = target,
              event = {
                name: name,
                targetScope: target,
                preventDefault: function() {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              },
              listenerArgs = concat([event], arguments, 1),
              listeners, i, length;

            //down while you can, then up and next sibling or up and next sibling until back at root
            while ((current = next)) {
              event.currentScope = current;
              listeners = current.$$listeners[name] || [];
              for (i=0, length = listeners.length; i<length; i++) {
                // if listeners were deregistered, defragment the array
                if (!listeners[i]) {
                  listeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }

                try {
                  listeners[i].apply(null, listenerArgs);
                } catch(e) {
                  $exceptionHandler(e);
                }
              }

              // Insanity Warning: scope depth-first traversal
              // yes, this code is a bit crazy, but it works and we have tests to prove it!
              // this piece should be kept in sync with the traversal in $digest
              // (though it differs due to having the extra check for $$listenerCount)
              if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
                (current !== target && current.$$nextSibling)))) {
                while(current !== target && !(next = current.$$nextSibling)) {
                  current = current.$parent;
                }
              }
            }

            return event;
          }
        };

        var $rootScope = new Scope();

        return $rootScope;


        function beginPhase(phase) {
          if ($rootScope.$$phase) {
            throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
          }

          $rootScope.$$phase = phase;
        }

        function clearPhase() {
          $rootScope.$$phase = null;
        }

        function compileToFn(exp, name) {
          var fn = $parse(exp);
          assertArgFn(fn, name);
          return fn;
        }

        function decrementListenerCount(current, count, name) {
          do {
            current.$$listenerCount[name] -= count;

            if (current.$$listenerCount[name] === 0) {
              delete current.$$listenerCount[name];
            }
          } while ((current = current.$parent));
        }

        /**
         * function used as an initial value for watchers.
         * because it's unique we can easily tell it apart from other values
         */
        function initWatchVal() {}
      }];
  }

  /**
   * @description
   * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
   */
  function $$SanitizeUriProvider() {
    var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
      imgSrcSanitizationWhitelist = /^\s*(https?|ftp|file):|data:image\//;

    /**
     * @description
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe
     * urls during a[href] sanitization.
     *
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.
     *
     * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
     * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
     *
     * @param {RegExp=} regexp New regexp to whitelist urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.aHrefSanitizationWhitelist = function(regexp) {
      if (isDefined(regexp)) {
        aHrefSanitizationWhitelist = regexp;
        return this;
      }
      return aHrefSanitizationWhitelist;
    };


    /**
     * @description
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe
     * urls during img[src] sanitization.
     *
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.
     *
     * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
     * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
     *
     * @param {RegExp=} regexp New regexp to whitelist urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.imgSrcSanitizationWhitelist = function(regexp) {
      if (isDefined(regexp)) {
        imgSrcSanitizationWhitelist = regexp;
        return this;
      }
      return imgSrcSanitizationWhitelist;
    };

    this.$get = function() {
      return function sanitizeUri(uri, isImage) {
        var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
        var normalizedVal;
        // NOTE: urlResolve() doesn't support IE < 8 so we don't sanitize for that case.
        if (!msie || msie >= 8 ) {
          normalizedVal = urlResolve(uri).href;
          if (normalizedVal !== '' && !normalizedVal.match(regex)) {
            return 'unsafe:'+normalizedVal;
          }
        }
        return uri;
      };
    };
  }

  var $sceMinErr = minErr('$sce');

  var SCE_CONTEXTS = {
    HTML: 'html',
    CSS: 'css',
    URL: 'url',
    // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
    // url.  (e.g. ng-include, script src, templateUrl)
    RESOURCE_URL: 'resourceUrl',
    JS: 'js'
  };

// Helper functions follow.

// Copied from:
// http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962
// Prereq: s is a string.
  function escapeForRegexp(s) {
    return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
      replace(/\x08/g, '\\x08');
  }


  function adjustMatcher(matcher) {
    if (matcher === 'self') {
      return matcher;
    } else if (isString(matcher)) {
      // Strings match exactly except for 2 wildcards - '*' and '**'.
      // '*' matches any character except those from the set ':/.?&'.
      // '**' matches any character (like .* in a RegExp).
      // More than 2 *'s raises an error as it's ill defined.
      if (matcher.indexOf('***') > -1) {
        throw $sceMinErr('iwcard',
          'Illegal sequence *** in string matcher.  String: {0}', matcher);
      }
      matcher = escapeForRegexp(matcher).
        replace('\\*\\*', '.*').
        replace('\\*', '[^:/.?&;]*');
      return new RegExp('^' + matcher + '$');
    } else if (isRegExp(matcher)) {
      // The only other type of matcher allowed is a Regexp.
      // Match entire URL / disallow partial matches.
      // Flags are reset (i.e. no global, ignoreCase or multiline)
      return new RegExp('^' + matcher.source + '$');
    } else {
      throw $sceMinErr('imatcher',
        'Matchers may only be "self", string patterns or RegExp objects');
    }
  }


  function adjustMatchers(matchers) {
    var adjustedMatchers = [];
    if (isDefined(matchers)) {
      forEach(matchers, function(matcher) {
        adjustedMatchers.push(adjustMatcher(matcher));
      });
    }
    return adjustedMatchers;
  }


  /**
   * @ngdoc service
   * @name $sceDelegate
   * @kind function
   *
   * @description
   *
   * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
   *
   * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
   * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
   * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
   * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
   * work because `$sce` delegates to `$sceDelegate` for these operations.
   *
   * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
   *
   * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
   * can override it completely to change the behavior of `$sce`, the common case would
   * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
   * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
   * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
    * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
   */

  /**
   * @ngdoc provider
   * @name $sceDelegateProvider
   * @description
   *
   * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
   * that the URLs used for sourcing Angular templates are safe.  Refer {@link
    * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
   * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
   *
   * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
   *
   * **Example**:  Consider the following case. <a name="example"></a>
   *
   * - your app is hosted at url `http://myapp.example.com/`
   * - but some of your templates are hosted on other domains you control such as
   *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
   * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
   *
   * Here is what a secure configuration for this scenario might look like:
   *
   * <pre class="prettyprint">
   *    angular.module('myApp', []).config(function($sceDelegateProvider) {
 *      $sceDelegateProvider.resourceUrlWhitelist([
 *        // Allow same origin resource loads.
 *        'self',
 *        // Allow loading from our assets domain.  Notice the difference between * and **.
 *        'http://srv*.assets.example.com/**']);
 *
 *      // The blacklist overrides the whitelist so the open redirect here is blocked.
 *      $sceDelegateProvider.resourceUrlBlacklist([
 *        'http://myapp.example.com/clickThru**']);
 *      });
   * </pre>
   */

  function $SceDelegateProvider() {
    this.SCE_CONTEXTS = SCE_CONTEXTS;

    // Resource URLs can also be trusted by policy.
    var resourceUrlWhitelist = ['self'],
      resourceUrlBlacklist = [];

    /**
     * @ngdoc method
     * @name $sceDelegateProvider#resourceUrlWhitelist
     * @kind function
     *
     * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
     *     provided.  This must be an array or null.  A snapshot of this array is used so further
     *     changes to the array are ignored.
     *
     *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
     *     allowed in this array.
     *
     *     Note: **an empty whitelist array will block all URLs**!
     *
     * @return {Array} the currently set whitelist array.
     *
     * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
     * same origin resource requests.
     *
     * @description
     * Sets/Gets the whitelist of trusted resource URLs.
     */
    this.resourceUrlWhitelist = function (value) {
      if (arguments.length) {
        resourceUrlWhitelist = adjustMatchers(value);
      }
      return resourceUrlWhitelist;
    };

    /**
     * @ngdoc method
     * @name $sceDelegateProvider#resourceUrlBlacklist
     * @kind function
     *
     * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
     *     provided.  This must be an array or null.  A snapshot of this array is used so further
     *     changes to the array are ignored.
     *
     *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
     *     allowed in this array.
     *
     *     The typical usage for the blacklist is to **block
     *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
     *     these would otherwise be trusted but actually return content from the redirected domain.
     *
     *     Finally, **the blacklist overrides the whitelist** and has the final say.
     *
     * @return {Array} the currently set blacklist array.
     *
     * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
     * is no blacklist.)
     *
     * @description
     * Sets/Gets the blacklist of trusted resource URLs.
     */

    this.resourceUrlBlacklist = function (value) {
      if (arguments.length) {
        resourceUrlBlacklist = adjustMatchers(value);
      }
      return resourceUrlBlacklist;
    };

    this.$get = ['$injector', function($injector) {

      var htmlSanitizer = function htmlSanitizer(html) {
        throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
      };

      if ($injector.has('$sanitize')) {
        htmlSanitizer = $injector.get('$sanitize');
      }


      function matchUrl(matcher, parsedUrl) {
        if (matcher === 'self') {
          return urlIsSameOrigin(parsedUrl);
        } else {
          // definitely a regex.  See adjustMatchers()
          return !!matcher.exec(parsedUrl.href);
        }
      }

      function isResourceUrlAllowedByPolicy(url) {
        var parsedUrl = urlResolve(url.toString());
        var i, n, allowed = false;
        // Ensure that at least one item from the whitelist allows this url.
        for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
          if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
            allowed = true;
            break;
          }
        }
        if (allowed) {
          // Ensure that no item from the blacklist blocked this url.
          for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
            if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
              allowed = false;
              break;
            }
          }
        }
        return allowed;
      }

      function generateHolderType(Base) {
        var holderType = function TrustedValueHolderType(trustedValue) {
          this.$$unwrapTrustedValue = function() {
            return trustedValue;
          };
        };
        if (Base) {
          holderType.prototype = new Base();
        }
        holderType.prototype.valueOf = function sceValueOf() {
          return this.$$unwrapTrustedValue();
        };
        holderType.prototype.toString = function sceToString() {
          return this.$$unwrapTrustedValue().toString();
        };
        return holderType;
      }

      var trustedValueHolderBase = generateHolderType(),
        byType = {};

      byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
      byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
      byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
      byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
      byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

      /**
       * @ngdoc method
       * @name $sceDelegate#trustAs
       *
       * @description
       * Returns an object that is trusted by angular for use in specified strict
       * contextual escaping contexts (such as ng-bind-html, ng-include, any src
       * attribute interpolation, any dom event binding attribute interpolation
       * such as for onclick,  etc.) that uses the provided value.
       * See {@link ng.$sce $sce} for enabling strict contextual escaping.
       *
       * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
       *   resourceUrl, html, js and css.
       * @param {*} value The value that that should be considered trusted/safe.
       * @returns {*} A value that can be used to stand in for the provided `value` in places
       * where Angular expects a $sce.trustAs() return value.
       */
      function trustAs(type, trustedValue) {
        var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
        if (!Constructor) {
          throw $sceMinErr('icontext',
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
            type, trustedValue);
        }
        if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
          return trustedValue;
        }
        // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
        // mutable objects, we ensure here that the value passed in is actually a string.
        if (typeof trustedValue !== 'string') {
          throw $sceMinErr('itype',
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
            type);
        }
        return new Constructor(trustedValue);
      }

      /**
       * @ngdoc method
       * @name $sceDelegate#valueOf
       *
       * @description
       * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
        * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
       *
       * If the passed parameter is not a value that had been returned by {@link
        * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
       *
       * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
       *      call or anything else.
       * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
       *     `value` unchanged.
       */
      function valueOf(maybeTrusted) {
        if (maybeTrusted instanceof trustedValueHolderBase) {
          return maybeTrusted.$$unwrapTrustedValue();
        } else {
          return maybeTrusted;
        }
      }

      /**
       * @ngdoc method
       * @name $sceDelegate#getTrusted
       *
       * @description
       * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
       * returns the originally supplied value if the queried context type is a supertype of the
       * created type.  If this condition isn't satisfied, throws an exception.
       *
       * @param {string} type The kind of context in which this value is to be used.
       * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
       * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
       */
      function getTrusted(type, maybeTrusted) {
        if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
          return maybeTrusted;
        }
        var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
        if (constructor && maybeTrusted instanceof constructor) {
          return maybeTrusted.$$unwrapTrustedValue();
        }
        // If we get here, then we may only take one of two actions.
        // 1. sanitize the value for the requested type, or
        // 2. throw an exception.
        if (type === SCE_CONTEXTS.RESOURCE_URL) {
          if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
            return maybeTrusted;
          } else {
            throw $sceMinErr('insecurl',
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
              maybeTrusted.toString());
          }
        } else if (type === SCE_CONTEXTS.HTML) {
          return htmlSanitizer(maybeTrusted);
        }
        throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
      }

      return { trustAs: trustAs,
        getTrusted: getTrusted,
        valueOf: valueOf };
    }];
  }


  /**
   * @ngdoc provider
   * @name $sceProvider
   * @description
   *
   * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
   * -   enable/disable Strict Contextual Escaping (SCE) in a module
   * -   override the default implementation with a custom delegate
   *
   * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
   */

  /* jshint maxlen: false*/

  /**
   * @ngdoc service
   * @name $sce
   * @kind function
   *
   * @description
   *
   * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
   *
   * # Strict Contextual Escaping
   *
   * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
   * contexts to result in a value that is marked as safe to use for that context.  One example of
   * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
   * to these contexts as privileged or SCE contexts.
   *
   * As of version 1.2, Angular ships with SCE enabled by default.
   *
   * Note:  When enabled (the default), IE8 in quirks mode is not supported.  In this mode, IE8 allows
   * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
   * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
   * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
   * to the top of your HTML document.
   *
   * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
   * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
   *
   * Here's an example of a binding in a privileged context:
   *
   * <pre class="prettyprint">
   *     <input ng-model="userHtml">
   *     <div ng-bind-html="userHtml">
   * </pre>
   *
   * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
   * disabled, this application allows the user to render arbitrary HTML into the DIV.
   * In a more realistic example, one may be rendering user comments, blog articles, etc. via
   * bindings.  (HTML is just one example of a context where rendering user controlled input creates
   * security vulnerabilities.)
   *
   * For the case of HTML, you might use a library, either on the client side, or on the server side,
   * to sanitize unsafe HTML before binding to the value and rendering it in the document.
   *
   * How would you ensure that every place that used these types of bindings was bound to a value that
   * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
   * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
   * properties/fields and forgot to update the binding to the sanitized value?
   *
   * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
   * determine that something explicitly says it's safe to use a value for binding in that
   * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
   * for those values that you can easily tell are safe - because they were received from your server,
   * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
   * allowing only the files in a specific directory to do this.  Ensuring that the internal API
   * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
   *
   * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
   * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
   * obtain values that will be accepted by SCE / privileged contexts.
   *
   *
   * ## How does it work?
   *
   * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
    * ng.$sce#parse $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
   * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
   *
   * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
    * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
   * simplified):
   *
   * <pre class="prettyprint">
   *   var ngBindHtmlDirective = ['$sce', function($sce) {
 *     return function(scope, element, attr) {
 *       scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *         element.html(value || '');
 *       });
 *     };
 *   }];
   * </pre>
   *
   * ## Impact on loading templates
   *
   * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
   * `templateUrl`'s specified by {@link guide/directive directives}.
   *
   * By default, Angular only loads templates from the same domain and protocol as the application
   * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
   * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
   *
   * *Please note*:
   * The browser's
   * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
   * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
   * policy apply in addition to this and may further restrict whether the template is successfully
   * loaded.  This means that without the right CORS policy, loading templates from a different domain
   * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
   * browsers.
   *
   * ## This feels like too much overhead for the developer?
   *
   * It's important to remember that SCE only applies to interpolation expressions.
   *
   * If your expressions are constant literals, they're automatically trusted and you don't need to
   * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
   * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
   *
   * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
   * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
   *
   * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
   * templates in `ng-include` from your application's domain without having to even know about SCE.
   * It blocks loading templates from other domains or loading templates over http from an https
   * served document.  You can change these by setting your own custom {@link
    * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
    * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
   *
   * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
   * application that's secure and can be audited to verify that with much more ease than bolting
   * security onto an application later.
   *
   * <a name="contexts"></a>
   * ## What trusted context types are supported?
   *
   * | Context             | Notes          |
   * |---------------------|----------------|
   * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
   * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
   * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
   * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
   * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
   *
   * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
   *
   *  Each element in these arrays must be one of the following:
   *
   *  - **'self'**
   *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
   *      domain** as the application document using the **same protocol**.
   *  - **String** (except the special value `'self'`)
   *    - The string is matched against the full *normalized / absolute URL* of the resource
   *      being tested (substring matches are not good enough.)
   *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
   *      match themselves.
   *    - `*`: matches zero or more occurrences of any character other than one of the following 6
   *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
   *      in a whitelist.
   *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
   *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
   *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
   *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
   *      http://foo.example.com/templates/**).
   *  - **RegExp** (*see caveat below*)
   *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
   *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
   *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
   *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
   *      small number of cases.  A `.` character in the regex used when matching the scheme or a
   *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
   *      is highly recommended to use the string patterns and only fall back to regular expressions
   *      if they as a last resort.
   *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
   *      matched against the **entire** *normalized / absolute URL* of the resource being tested
   *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
   *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
   *    - If you are generating your JavaScript from some other templating engine (not
   *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
   *      remember to escape your regular expression (and be aware that you might need more than
   *      one level of escaping depending on your templating engine and the way you interpolated
   *      the value.)  Do make use of your platform's escaping mechanism as it might be good
   *      enough before coding your own.  e.g. Ruby has
   *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
   *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
   *      Javascript lacks a similar built in function for escaping.  Take a look at Google
   *      Closure library's [goog.string.regExpEscape(s)](
   *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
   *
   * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
   *
   * ## Show me an example using SCE.
   *
   * @example
   <example module="mySceApp" deps="angular-sanitize.js">
   <file name="index.html">
   <div ng-controller="myAppController as myCtrl">
   <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
   <b>User comments</b><br>
   By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
   $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
   exploit.
   <div class="well">
   <div ng-repeat="userComment in myCtrl.userComments">
   <b>{{userComment.name}}</b>:
   <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
   <br>
   </div>
   </div>
   </div>
   </file>

   <file name="script.js">
   var mySceApp = angular.module('mySceApp', ['ngSanitize']);

   mySceApp.controller("myAppController", function myAppController($http, $templateCache, $sce) {
    var self = this;
    $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
      self.userComments = userComments;
    });
    self.explicitlyTrustedHtml = $sce.trustAsHtml(
        '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
        'sanitization.&quot;">Hover over this text.</span>');
  });
   </file>

   <file name="test_data.json">
   [
   { "name": "Alice",
    "htmlComment":
        "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
  },
   { "name": "Bob",
    "htmlComment": "<i>Yes!</i>  Am I the only other one?"
  }
   ]
   </file>

   <file name="protractor.js" type="protractor">
   describe('SCE doc demo', function() {
    it('should sanitize untrusted values', function() {
      expect(element(by.css('.htmlComment')).getInnerHtml())
          .toBe('<span>Is <i>anyone</i> reading this?</span>');
    });

    it('should NOT sanitize explicitly trusted values', function() {
      expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
          '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
          'sanitization.&quot;">Hover over this text.</span>');
    });
  });
   </file>
   </example>
   *
   *
   *
   * ## Can I disable SCE completely?
   *
   * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
   * for little coding overhead.  It will be much harder to take an SCE disabled application and
   * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
   * for cases where you have a lot of existing code that was written before SCE was introduced and
   * you're migrating them a module at a time.
   *
   * That said, here's how you can completely disable SCE:
   *
   * <pre class="prettyprint">
   *   angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *     // Completely disable SCE.  For demonstration purposes only!
 *     // Do not use in new projects.
 *     $sceProvider.enabled(false);
 *   });
   * </pre>
   *
   */
  /* jshint maxlen: 100 */

  function $SceProvider() {
    var enabled = true;

    /**
     * @ngdoc method
     * @name $sceProvider#enabled
     * @kind function
     *
     * @param {boolean=} value If provided, then enables/disables SCE.
     * @return {boolean} true if SCE is enabled, false otherwise.
     *
     * @description
     * Enables/disables SCE and returns the current value.
     */
    this.enabled = function (value) {
      if (arguments.length) {
        enabled = !!value;
      }
      return enabled;
    };


    /* Design notes on the default implementation for SCE.
     *
     * The API contract for the SCE delegate
     * -------------------------------------
     * The SCE delegate object must provide the following 3 methods:
     *
     * - trustAs(contextEnum, value)
     *     This method is used to tell the SCE service that the provided value is OK to use in the
     *     contexts specified by contextEnum.  It must return an object that will be accepted by
     *     getTrusted() for a compatible contextEnum and return this value.
     *
     * - valueOf(value)
     *     For values that were not produced by trustAs(), return them as is.  For values that were
     *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
     *     trustAs is wrapping the given values into some type, this operation unwraps it when given
     *     such a value.
     *
     * - getTrusted(contextEnum, value)
     *     This function should return the a value that is safe to use in the context specified by
     *     contextEnum or throw and exception otherwise.
     *
     * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
     * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
     * instance, an implementation could maintain a registry of all trusted objects by context.  In
     * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
     * return the same object passed in if it was found in the registry under a compatible context or
     * throw an exception otherwise.  An implementation might only wrap values some of the time based
     * on some criteria.  getTrusted() might return a value and not throw an exception for special
     * constants or objects even if not wrapped.  All such implementations fulfill this contract.
     *
     *
     * A note on the inheritance model for SCE contexts
     * ------------------------------------------------
     * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
     * is purely an implementation details.
     *
     * The contract is simply this:
     *
     *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
     *     will also succeed.
     *
     * Inheritance happens to capture this in a natural way.  In some future, we
     * may not use inheritance anymore.  That is OK because no code outside of
     * sce.js and sceSpecs.js would need to be aware of this detail.
     */

    this.$get = ['$parse', '$sniffer', '$sceDelegate', function(
      $parse,   $sniffer,   $sceDelegate) {
      // Prereq: Ensure that we're not running in IE8 quirks mode.  In that mode, IE allows
      // the "expression(javascript expression)" syntax which is insecure.
      if (enabled && $sniffer.msie && $sniffer.msieDocumentMode < 8) {
        throw $sceMinErr('iequirks',
            'Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks ' +
            'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
            'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
      }

      var sce = shallowCopy(SCE_CONTEXTS);

      /**
       * @ngdoc method
       * @name $sce#isEnabled
       * @kind function
       *
       * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
       * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
       *
       * @description
       * Returns a boolean indicating if SCE is enabled.
       */
      sce.isEnabled = function () {
        return enabled;
      };
      sce.trustAs = $sceDelegate.trustAs;
      sce.getTrusted = $sceDelegate.getTrusted;
      sce.valueOf = $sceDelegate.valueOf;

      if (!enabled) {
        sce.trustAs = sce.getTrusted = function(type, value) { return value; };
        sce.valueOf = identity;
      }

      /**
       * @ngdoc method
       * @name $sce#parse
       *
       * @description
       * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
        * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
       * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
       *
       * @param {string} type The kind of SCE context in which this result will be used.
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */
      sce.parseAs = function sceParseAs(type, expr) {
        var parsed = $parse(expr);
        if (parsed.literal && parsed.constant) {
          return parsed;
        } else {
          return function sceParseAsTrusted(self, locals) {
            return sce.getTrusted(type, parsed(self, locals));
          };
        }
      };

      /**
       * @ngdoc method
       * @name $sce#trustAs
       *
       * @description
       * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
       * returns an object that is trusted by angular for use in specified strict contextual
       * escaping contexts (such as ng-bind-html, ng-include, any src attribute
       * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
       * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
       * escaping.
       *
       * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
       *   resource_url, html, js and css.
       * @param {*} value The value that that should be considered trusted/safe.
       * @returns {*} A value that can be used to stand in for the provided `value` in places
       * where Angular expects a $sce.trustAs() return value.
       */

      /**
       * @ngdoc method
       * @name $sce#trustAsHtml
       *
       * @description
       * Shorthand method.  `$sce.trustAsHtml(value)` →
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
       *
       * @param {*} value The value to trustAs.
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
       *     only accept expressions that are either literal constants or are the
       *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
       */

      /**
       * @ngdoc method
       * @name $sce#trustAsUrl
       *
       * @description
       * Shorthand method.  `$sce.trustAsUrl(value)` →
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
       *
       * @param {*} value The value to trustAs.
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
       *     only accept expressions that are either literal constants or are the
       *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
       */

      /**
       * @ngdoc method
       * @name $sce#trustAsResourceUrl
       *
       * @description
       * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
       *
       * @param {*} value The value to trustAs.
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
       *     only accept expressions that are either literal constants or are the return
       *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
       */

      /**
       * @ngdoc method
       * @name $sce#trustAsJs
       *
       * @description
       * Shorthand method.  `$sce.trustAsJs(value)` →
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
       *
       * @param {*} value The value to trustAs.
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
       *     only accept expressions that are either literal constants or are the
       *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
       */

      /**
       * @ngdoc method
       * @name $sce#getTrusted
       *
       * @description
       * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
       * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
       * originally supplied value if the queried context type is a supertype of the created type.
       * If this condition isn't satisfied, throws an exception.
       *
       * @param {string} type The kind of context in which this value is to be used.
       * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
       *                         call.
       * @returns {*} The value the was originally provided to
       *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
       *              Otherwise, throws an exception.
       */

      /**
       * @ngdoc method
       * @name $sce#getTrustedHtml
       *
       * @description
       * Shorthand method.  `$sce.getTrustedHtml(value)` →
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
       *
       * @param {*} value The value to pass to `$sce.getTrusted`.
       * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
       */

      /**
       * @ngdoc method
       * @name $sce#getTrustedCss
       *
       * @description
       * Shorthand method.  `$sce.getTrustedCss(value)` →
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
       *
       * @param {*} value The value to pass to `$sce.getTrusted`.
       * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
       */

      /**
       * @ngdoc method
       * @name $sce#getTrustedUrl
       *
       * @description
       * Shorthand method.  `$sce.getTrustedUrl(value)` →
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
       *
       * @param {*} value The value to pass to `$sce.getTrusted`.
       * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
       */

      /**
       * @ngdoc method
       * @name $sce#getTrustedResourceUrl
       *
       * @description
       * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
       *
       * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
       * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
       */

      /**
       * @ngdoc method
       * @name $sce#getTrustedJs
       *
       * @description
       * Shorthand method.  `$sce.getTrustedJs(value)` →
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
       *
       * @param {*} value The value to pass to `$sce.getTrusted`.
       * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
       */

      /**
       * @ngdoc method
       * @name $sce#parseAsHtml
       *
       * @description
       * Shorthand method.  `$sce.parseAsHtml(expression string)` →
       *     {@link ng.$sce#parse `$sce.parseAs($sce.HTML, value)`}
       *
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */

      /**
       * @ngdoc method
       * @name $sce#parseAsCss
       *
       * @description
       * Shorthand method.  `$sce.parseAsCss(value)` →
       *     {@link ng.$sce#parse `$sce.parseAs($sce.CSS, value)`}
       *
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */

      /**
       * @ngdoc method
       * @name $sce#parseAsUrl
       *
       * @description
       * Shorthand method.  `$sce.parseAsUrl(value)` →
       *     {@link ng.$sce#parse `$sce.parseAs($sce.URL, value)`}
       *
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */

      /**
       * @ngdoc method
       * @name $sce#parseAsResourceUrl
       *
       * @description
       * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
       *     {@link ng.$sce#parse `$sce.parseAs($sce.RESOURCE_URL, value)`}
       *
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */

      /**
       * @ngdoc method
       * @name $sce#parseAsJs
       *
       * @description
       * Shorthand method.  `$sce.parseAsJs(value)` →
       *     {@link ng.$sce#parse `$sce.parseAs($sce.JS, value)`}
       *
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */

      // Shorthand delegations.
      var parse = sce.parseAs,
        getTrusted = sce.getTrusted,
        trustAs = sce.trustAs;

      forEach(SCE_CONTEXTS, function (enumValue, name) {
        var lName = lowercase(name);
        sce[camelCase("parse_as_" + lName)] = function (expr) {
          return parse(enumValue, expr);
        };
        sce[camelCase("get_trusted_" + lName)] = function (value) {
          return getTrusted(enumValue, value);
        };
        sce[camelCase("trust_as_" + lName)] = function (value) {
          return trustAs(enumValue, value);
        };
      });

      return sce;
    }];
  }

  /**
   * !!! This is an undocumented "private" service !!!
   *
   * @name $sniffer
   * @requires $window
   * @requires $document
   *
   * @property {boolean} history Does the browser support html5 history api ?
   * @property {boolean} hashchange Does the browser support hashchange event ?
   * @property {boolean} transitions Does the browser support CSS transition events ?
   * @property {boolean} animations Does the browser support CSS animation events ?
   *
   * @description
   * This is very simple implementation of testing browser's features.
   */
  function $SnifferProvider() {
    this.$get = ['$window', '$document', function($window, $document) {
      var eventSupport = {},
        android =
          int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
        document = $document[0] || {},
        documentMode = document.documentMode,
        vendorPrefix,
        vendorRegex = /^(Moz|webkit|O|ms)(?=[A-Z])/,
        bodyStyle = document.body && document.body.style,
        transitions = false,
        animations = false,
        match;

      if (bodyStyle) {
        for(var prop in bodyStyle) {
          if(match = vendorRegex.exec(prop)) {
            vendorPrefix = match[0];
            vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
            break;
          }
        }

        if(!vendorPrefix) {
          vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
        }

        transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
        animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

        if (android && (!transitions||!animations)) {
          transitions = isString(document.body.style.webkitTransition);
          animations = isString(document.body.style.webkitAnimation);
        }
      }


      return {
        // Android has history.pushState, but it does not update location correctly
        // so let's not use the history API at all.
        // http://code.google.com/p/android/issues/detail?id=17471
        // https://github.com/angular/angular.js/issues/904

        // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
        // so let's not use the history API also
        // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
        // jshint -W018
        history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
        // jshint +W018
        hashchange: 'onhashchange' in $window &&
          // IE8 compatible mode lies
          (!documentMode || documentMode > 7),
        hasEvent: function(event) {
          // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
          // it. In particular the event is not fired when backspace or delete key are pressed or
          // when cut operation is performed.
          if (event == 'input' && msie == 9) return false;

          if (isUndefined(eventSupport[event])) {
            var divElm = document.createElement('div');
            eventSupport[event] = 'on' + event in divElm;
          }

          return eventSupport[event];
        },
        csp: csp(),
        vendorPrefix: vendorPrefix,
        transitions : transitions,
        animations : animations,
        android: android,
        msie : msie,
        msieDocumentMode: documentMode
      };
    }];
  }

  function $TimeoutProvider() {
    this.$get = ['$rootScope', '$browser', '$q', '$exceptionHandler',
      function($rootScope,   $browser,   $q,   $exceptionHandler) {
        var deferreds = {};


        /**
         * @ngdoc service
         * @name $timeout
         *
         * @description
         * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
         * block and delegates any exceptions to
         * {@link ng.$exceptionHandler $exceptionHandler} service.
         *
         * The return value of registering a timeout function is a promise, which will be resolved when
         * the timeout is reached and the timeout function is executed.
         *
         * To cancel a timeout request, call `$timeout.cancel(promise)`.
         *
         * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
         * synchronously flush the queue of deferred functions.
         *
         * @param {function()} fn A function, whose execution should be delayed.
         * @param {number=} [delay=0] Delay in milliseconds.
         * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
         *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
         * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
         *   promise will be resolved with is the return value of the `fn` function.
         *
         */
        function timeout(fn, delay, invokeApply) {
          var deferred = $q.defer(),
            promise = deferred.promise,
            skipApply = (isDefined(invokeApply) && !invokeApply),
            timeoutId;

          timeoutId = $browser.defer(function() {
            try {
              deferred.resolve(fn());
            } catch(e) {
              deferred.reject(e);
              $exceptionHandler(e);
            }
            finally {
              delete deferreds[promise.$$timeoutId];
            }

            if (!skipApply) $rootScope.$apply();
          }, delay);

          promise.$$timeoutId = timeoutId;
          deferreds[timeoutId] = deferred;

          return promise;
        }


        /**
         * @ngdoc method
         * @name $timeout#cancel
         *
         * @description
         * Cancels a task associated with the `promise`. As a result of this, the promise will be
         * resolved with a rejection.
         *
         * @param {Promise=} promise Promise returned by the `$timeout` function.
         * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
         *   canceled.
         */
        timeout.cancel = function(promise) {
          if (promise && promise.$$timeoutId in deferreds) {
            deferreds[promise.$$timeoutId].reject('canceled');
            delete deferreds[promise.$$timeoutId];
            return $browser.defer.cancel(promise.$$timeoutId);
          }
          return false;
        };

        return timeout;
      }];
  }

// NOTE:  The usage of window and document instead of $window and $document here is
// deliberate.  This service depends on the specific behavior of anchor nodes created by the
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
// doesn't know about mocked locations and resolves URLs to the real document - which is
// exactly the behavior needed here.  There is little value is mocking these out for this
// service.
  var urlParsingNode = document.createElement("a");
  var originUrl = urlResolve(window.location.href, true);


  /**
   *
   * Implementation Notes for non-IE browsers
   * ----------------------------------------
   * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
   * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
   * URL will be resolved into an absolute URL in the context of the application document.
   * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
   * properties are all populated to reflect the normalized URL.  This approach has wide
   * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
   * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
   *
   * Implementation Notes for IE
   * ---------------------------
   * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
   * browsers.  However, the parsed components will not be set if the URL assigned did not specify
   * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
   * work around that by performing the parsing in a 2nd step by taking a previously normalized
   * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
   * properties such as protocol, hostname, port, etc.
   *
   * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
   * uses the inner HTML approach to assign the URL as part of an HTML snippet -
   * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
   * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
   * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
   * method and IE < 8 is unsupported.
   *
   * References:
   *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
   *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
   *   http://url.spec.whatwg.org/#urlutils
   *   https://github.com/angular/angular.js/pull/2902
   *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
   *
   * @kind function
   * @param {string} url The URL to be parsed.
   * @description Normalizes and parses a URL.
   * @returns {object} Returns the normalized URL as a dictionary.
   *
   *   | member name   | Description    |
   *   |---------------|----------------|
   *   | href          | A normalized version of the provided URL if it was not an absolute URL |
   *   | protocol      | The protocol including the trailing colon                              |
   *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
   *   | search        | The search params, minus the question mark                             |
   *   | hash          | The hash string, minus the hash symbol
   *   | hostname      | The hostname
   *   | port          | The port, without ":"
   *   | pathname      | The pathname, beginning with "/"
   *
   */
  function urlResolve(url, base) {
    var href = url;

    if (msie) {
      // Normalize before parse.  Refer Implementation Notes on why this is
      // done in two steps on IE.
      urlParsingNode.setAttribute("href", href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href);

    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: (urlParsingNode.pathname.charAt(0) === '/')
        ? urlParsingNode.pathname
        : '/' + urlParsingNode.pathname
    };
  }

  /**
   * Parse a request URL and determine whether this is a same-origin request as the application document.
   *
   * @param {string|object} requestUrl The url of the request as a string that will be resolved
   * or a parsed URL object.
   * @returns {boolean} Whether the request is for the same origin as the application document.
   */
  function urlIsSameOrigin(requestUrl) {
    var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
    return (parsed.protocol === originUrl.protocol &&
      parsed.host === originUrl.host);
  }

  /**
   * @ngdoc service
   * @name $window
   *
   * @description
   * A reference to the browser's `window` object. While `window`
   * is globally available in JavaScript, it causes testability problems, because
   * it is a global variable. In angular we always refer to it through the
   * `$window` service, so it may be overridden, removed or mocked for testing.
   *
   * Expressions, like the one defined for the `ngClick` directive in the example
   * below, are evaluated with respect to the current scope.  Therefore, there is
   * no risk of inadvertently coding in a dependency on a global value in such an
   * expression.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope, $window) {
           $scope.greeting = 'Hello, World!';
           $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
           };
         }
   </script>
   <div ng-controller="Ctrl">
   <input type="text" ng-model="greeting" />
   <button ng-click="doGreeting(greeting)">ALERT</button>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
   </file>
   </example>
   */
  function $WindowProvider(){
    this.$get = valueFn(window);
  }

  /**
   * @ngdoc provider
   * @name $filterProvider
   * @description
   *
   * Filters are just functions which transform input to an output. However filters need to be
   * Dependency Injected. To achieve this a filter definition consists of a factory function which is
   * annotated with dependencies and is responsible for creating a filter function.
   *
   * ```js
   *   // Filter registration
   *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
   * ```
   *
   * The filter function is registered with the `$injector` under the filter name suffix with
   * `Filter`.
   *
   * ```js
   *   it('should be the same instance', inject(
   *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
   *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
   * ```
   *
   *
   * For more information about how angular filters work, and how to create your own filters, see
   * {@link guide/filter Filters} in the Angular Developer Guide.
   */
  /**
   * @ngdoc method
   * @name $filterProvider#register
   * @description
   * Register filter factory function.
   *
   * @param {String} name Name of the filter.
   * @param {Function} fn The filter factory function which is injectable.
   */


  /**
   * @ngdoc service
   * @name $filter
   * @kind function
   * @description
   * Filters are used for formatting data displayed to the user.
   *
   * The general syntax in templates is as follows:
   *
   *         {{ expression [| filter_name[:parameter_value] ... ] }}
   *
   * @param {String} name Name of the filter function to retrieve
   * @return {Function} the filter function
   * @example
   <example name="$filter" module="filterExample">
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <h3>{{ originalText }}</h3>
   <h3>{{ filteredText }}</h3>
   </div>
   </file>

   <file name="script.js">
   angular.module('filterExample', [])
   .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
   </file>
   </example>
   */
  $FilterProvider.$inject = ['$provide'];
  function $FilterProvider($provide) {
    var suffix = 'Filter';

    /**
     * @ngdoc method
     * @name $controllerProvider#register
     * @param {string|Object} name Name of the filter function, or an object map of filters where
     *    the keys are the filter names and the values are the filter factories.
     * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
     *    of the registered filter instances.
     */
    function register(name, factory) {
      if(isObject(name)) {
        var filters = {};
        forEach(name, function(filter, key) {
          filters[key] = register(key, filter);
        });
        return filters;
      } else {
        return $provide.factory(name + suffix, factory);
      }
    }
    this.register = register;

    this.$get = ['$injector', function($injector) {
      return function(name) {
        return $injector.get(name + suffix);
      };
    }];

    ////////////////////////////////////////

    /* global
     currencyFilter: false,
     dateFilter: false,
     filterFilter: false,
     jsonFilter: false,
     limitToFilter: false,
     lowercaseFilter: false,
     numberFilter: false,
     orderByFilter: false,
     uppercaseFilter: false,
     */

    register('currency', currencyFilter);
    register('date', dateFilter);
    register('filter', filterFilter);
    register('json', jsonFilter);
    register('limitTo', limitToFilter);
    register('lowercase', lowercaseFilter);
    register('number', numberFilter);
    register('orderBy', orderByFilter);
    register('uppercase', uppercaseFilter);
  }

  /**
   * @ngdoc filter
   * @name filter
   * @kind function
   *
   * @description
   * Selects a subset of items from `array` and returns it as a new array.
   *
   * @param {Array} array The source array.
   * @param {string|Object|function()} expression The predicate to be used for selecting items from
   *   `array`.
   *
   *   Can be one of:
   *
   *   - `string`: The string is evaluated as an expression and the resulting value is used for substring match against
   *     the contents of the `array`. All strings or objects with string properties in `array` that contain this string
   *     will be returned. The predicate can be negated by prefixing the string with `!`.
   *
   *   - `Object`: A pattern object can be used to filter specific properties on objects contained
   *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
   *     which have property `name` containing "M" and property `phone` containing "1". A special
   *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
   *     property of the object. That's equivalent to the simple substring match with a `string`
   *     as described above.
   *
   *   - `function(value)`: A predicate function can be used to write arbitrary filters. The function is
   *     called for each element of `array`. The final result is an array of those elements that
   *     the predicate returned true for.
   *
   * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
   *     determining if the expected value (from the filter expression) and actual value (from
   *     the object in the array) should be considered a match.
   *
   *   Can be one of:
   *
   *   - `function(actual, expected)`:
   *     The function will be given the object value and the predicate value to compare and
   *     should return true if the item should be included in filtered result.
   *
   *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(expected, actual)}`.
   *     this is essentially strict comparison of expected and actual.
   *
   *   - `false|undefined`: A short hand for a function which will look for a substring match in case
   *     insensitive way.
   *
   * @example
   <example>
   <file name="index.html">
   <div ng-init="friends = [{name:'John', phone:'555-1276'},
   {name:'Mary', phone:'800-BIG-MARY'},
   {name:'Mike', phone:'555-4321'},
   {name:'Adam', phone:'555-5678'},
   {name:'Julie', phone:'555-8765'},
   {name:'Juliette', phone:'555-5678'}]"></div>

   Search: <input ng-model="searchText">
   <table id="searchTextResults">
   <tr><th>Name</th><th>Phone</th></tr>
   <tr ng-repeat="friend in friends | filter:searchText">
   <td>{{friend.name}}</td>
   <td>{{friend.phone}}</td>
   </tr>
   </table>
   <hr>
   Any: <input ng-model="search.$"> <br>
   Name only <input ng-model="search.name"><br>
   Phone only <input ng-model="search.phone"><br>
   Equality <input type="checkbox" ng-model="strict"><br>
   <table id="searchObjResults">
   <tr><th>Name</th><th>Phone</th></tr>
   <tr ng-repeat="friendObj in friends | filter:search:strict">
   <td>{{friendObj.name}}</td>
   <td>{{friendObj.phone}}</td>
   </tr>
   </table>
   </file>
   <file name="protractor.js" type="protractor">
   var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

   it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

   it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
   it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
   </file>
   </example>
   */
  function filterFilter() {
    return function(array, expression, comparator) {
      if (!isArray(array)) return array;

      var comparatorType = typeof(comparator),
        predicates = [];

      predicates.check = function(value) {
        for (var j = 0; j < predicates.length; j++) {
          if(!predicates[j](value)) {
            return false;
          }
        }
        return true;
      };

      if (comparatorType !== 'function') {
        if (comparatorType === 'boolean' && comparator) {
          comparator = function(obj, text) {
            return angular.equals(obj, text);
          };
        } else {
          comparator = function(obj, text) {
            if (obj && text && typeof obj === 'object' && typeof text === 'object') {
              for (var objKey in obj) {
                if (objKey.charAt(0) !== '$' && hasOwnProperty.call(obj, objKey) &&
                  comparator(obj[objKey], text[objKey])) {
                  return true;
                }
              }
              return false;
            }
            text = (''+text).toLowerCase();
            return (''+obj).toLowerCase().indexOf(text) > -1;
          };
        }
      }

      var search = function(obj, text){
        if (typeof text == 'string' && text.charAt(0) === '!') {
          return !search(obj, text.substr(1));
        }
        switch (typeof obj) {
          case "boolean":
          case "number":
          case "string":
            return comparator(obj, text);
          case "object":
            switch (typeof text) {
              case "object":
                return comparator(obj, text);
              default:
                for ( var objKey in obj) {
                  if (objKey.charAt(0) !== '$' && search(obj[objKey], text)) {
                    return true;
                  }
                }
                break;
            }
            return false;
          case "array":
            for ( var i = 0; i < obj.length; i++) {
              if (search(obj[i], text)) {
                return true;
              }
            }
            return false;
          default:
            return false;
        }
      };
      switch (typeof expression) {
        case "boolean":
        case "number":
        case "string":
          // Set up expression object and fall through
          expression = {$:expression};
        // jshint -W086
        case "object":
          // jshint +W086
          for (var key in expression) {
            (function(path) {
              if (typeof expression[path] == 'undefined') return;
              predicates.push(function(value) {
                return search(path == '$' ? value : (value && value[path]), expression[path]);
              });
            })(key);
          }
          break;
        case 'function':
          predicates.push(expression);
          break;
        default:
          return array;
      }
      var filtered = [];
      for ( var j = 0; j < array.length; j++) {
        var value = array[j];
        if (predicates.check(value)) {
          filtered.push(value);
        }
      }
      return filtered;
    };
  }

  /**
   * @ngdoc filter
   * @name currency
   * @kind function
   *
   * @description
   * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
   * symbol for current locale is used.
   *
   * @param {number} amount Input to filter.
   * @param {string=} symbol Currency symbol or identifier to be displayed.
   * @returns {string} Formatted number.
   *
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.amount = 1234.56;
         }
   </script>
   <div ng-controller="Ctrl">
   <input type="number" ng-model="amount"> <br>
   default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
   custom currency identifier (USD$): <span>{{amount | currency:"USD$"}}</span>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.binding('amount | currency:"USD$"')).getText()).toBe('USD$1,234.56');
       });
   it('should update', function() {
         if (browser.params.browser == 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
         expect(element(by.binding('amount | currency:"USD$"')).getText()).toBe('(USD$1,234.00)');
       });
   </file>
   </example>
   */
  currencyFilter.$inject = ['$locale'];
  function currencyFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function(amount, currencySymbol){
      if (isUndefined(currencySymbol)) currencySymbol = formats.CURRENCY_SYM;
      return formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, 2).
        replace(/\u00A4/g, currencySymbol);
    };
  }

  /**
   * @ngdoc filter
   * @name number
   * @kind function
   *
   * @description
   * Formats a number as text.
   *
   * If the input is not a number an empty string is returned.
   *
   * @param {number|string} number Number to format.
   * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
   * If this is not provided then the fraction size is computed from the current locale's number
   * formatting pattern. In the case of the default locale, it will be 3.
   * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.val = 1234.56789;
         }
   </script>
   <div ng-controller="Ctrl">
   Enter number: <input ng-model='val'><br>
   Default formatting: <span id='number-default'>{{val | number}}</span><br>
   No fractions: <span>{{val | number:0}}</span><br>
   Negative number: <span>{{-val | number:4}}</span>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

   it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
   </file>
   </example>
   */


  numberFilter.$inject = ['$locale'];
  function numberFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function(number, fractionSize) {
      return formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
        fractionSize);
    };
  }

  var DECIMAL_SEP = '.';
  function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
    if (number == null || !isFinite(number) || isObject(number)) return '';

    var isNegative = number < 0;
    number = Math.abs(number);
    var numStr = number + '',
      formatedText = '',
      parts = [];

    var hasExponent = false;
    if (numStr.indexOf('e') !== -1) {
      var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
      if (match && match[2] == '-' && match[3] > fractionSize + 1) {
        numStr = '0';
      } else {
        formatedText = numStr;
        hasExponent = true;
      }
    }

    if (!hasExponent) {
      var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

      // determine fractionSize if it is not specified
      if (isUndefined(fractionSize)) {
        fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
      }

      var pow = Math.pow(10, fractionSize + 1);
      number = Math.floor(number * pow + 5) / pow;
      var fraction = ('' + number).split(DECIMAL_SEP);
      var whole = fraction[0];
      fraction = fraction[1] || '';

      var i, pos = 0,
        lgroup = pattern.lgSize,
        group = pattern.gSize;

      if (whole.length >= (lgroup + group)) {
        pos = whole.length - lgroup;
        for (i = 0; i < pos; i++) {
          if ((pos - i)%group === 0 && i !== 0) {
            formatedText += groupSep;
          }
          formatedText += whole.charAt(i);
        }
      }

      for (i = pos; i < whole.length; i++) {
        if ((whole.length - i)%lgroup === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }

      // format fraction part.
      while(fraction.length < fractionSize) {
        fraction += '0';
      }

      if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
    } else {

      if (fractionSize > 0 && number > -1 && number < 1) {
        formatedText = number.toFixed(fractionSize);
      }
    }

    parts.push(isNegative ? pattern.negPre : pattern.posPre);
    parts.push(formatedText);
    parts.push(isNegative ? pattern.negSuf : pattern.posSuf);
    return parts.join('');
  }

  function padNumber(num, digits, trim) {
    var neg = '';
    if (num < 0) {
      neg =  '-';
      num = -num;
    }
    num = '' + num;
    while(num.length < digits) num = '0' + num;
    if (trim)
      num = num.substr(num.length - digits);
    return neg + num;
  }


  function dateGetter(name, size, offset, trim) {
    offset = offset || 0;
    return function(date) {
      var value = date['get' + name]();
      if (offset > 0 || value > -offset)
        value += offset;
      if (value === 0 && offset == -12 ) value = 12;
      return padNumber(value, size, trim);
    };
  }

  function dateStrGetter(name, shortForm) {
    return function(date, formats) {
      var value = date['get' + name]();
      var get = uppercase(shortForm ? ('SHORT' + name) : name);

      return formats[get][value];
    };
  }

  function timeZoneGetter(date) {
    var zone = -1 * date.getTimezoneOffset();
    var paddedZone = (zone >= 0) ? "+" : "";

    paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
      padNumber(Math.abs(zone % 60), 2);

    return paddedZone;
  }

  function ampmGetter(date, formats) {
    return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
  }

  var DATE_FORMATS = {
    yyyy: dateGetter('FullYear', 4),
    yy: dateGetter('FullYear', 2, 0, true),
    y: dateGetter('FullYear', 1),
    MMMM: dateStrGetter('Month'),
    MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
    M: dateGetter('Month', 1, 1),
    dd: dateGetter('Date', 2),
    d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
    H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
    h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
    m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
    s: dateGetter('Seconds', 1),
    // while ISO 8601 requires fractions to be prefixed with `.` or `,`
    // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
    sss: dateGetter('Milliseconds', 3),
    EEEE: dateStrGetter('Day'),
    EEE: dateStrGetter('Day', true),
    a: ampmGetter,
    Z: timeZoneGetter
  };

  var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,
    NUMBER_STRING = /^\-?\d+$/;

  /**
   * @ngdoc filter
   * @name date
   * @kind function
   *
   * @description
   *   Formats `date` to a string based on the requested `format`.
   *
   *   `format` string can be composed of the following elements:
   *
   *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
   *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
   *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
   *   * `'MMMM'`: Month in year (January-December)
   *   * `'MMM'`: Month in year (Jan-Dec)
   *   * `'MM'`: Month in year, padded (01-12)
   *   * `'M'`: Month in year (1-12)
   *   * `'dd'`: Day in month, padded (01-31)
   *   * `'d'`: Day in month (1-31)
   *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
   *   * `'EEE'`: Day in Week, (Sun-Sat)
   *   * `'HH'`: Hour in day, padded (00-23)
   *   * `'H'`: Hour in day (0-23)
   *   * `'hh'`: Hour in am/pm, padded (01-12)
   *   * `'h'`: Hour in am/pm, (1-12)
   *   * `'mm'`: Minute in hour, padded (00-59)
   *   * `'m'`: Minute in hour (0-59)
   *   * `'ss'`: Second in minute, padded (00-59)
   *   * `'s'`: Second in minute (0-59)
   *   * `'.sss' or ',sss'`: Millisecond in second, padded (000-999)
   *   * `'a'`: am/pm marker
   *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
   *
   *   `format` string can also be one of the following predefined
   *   {@link guide/i18n localizable formats}:
   *
   *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
   *     (e.g. Sep 3, 2010 12:05:08 pm)
   *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)
   *   * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale
   *     (e.g. Friday, September 3, 2010)
   *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
   *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
   *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
   *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)
   *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)
   *
   *   `format` string can contain literal values. These need to be quoted with single quotes (e.g.
   *   `"h 'in the morning'"`). In order to output single quote, use two single quotes in a sequence
   *   (e.g. `"h 'o''clock'"`).
   *
   * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
   *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.SSSZ and its
   *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
   *    specified in the string input, the time is considered to be in the local timezone.
   * @param {string=} format Formatting rules (see Description). If not specified,
   *    `mediumDate` is used.
   * @returns {string} Formatted string or the input if input is not recognized as date/millis.
   *
   * @example
   <example>
   <file name="index.html">
   <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
   <span>{{1288323623006 | date:'medium'}}</span><br>
   <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
   <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
   <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
   <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
   </file>
   <file name="protractor.js" type="protractor">
   it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
   toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
   });
   </file>
   </example>
   */
  dateFilter.$inject = ['$locale'];
  function dateFilter($locale) {


    var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    // 1        2       3         4          5          6          7          8  9     10      11
    function jsonStringToDate(string) {
      var match;
      if (match = string.match(R_ISO8601_STR)) {
        var date = new Date(0),
          tzHour = 0,
          tzMin  = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours;

        if (match[9]) {
          tzHour = int(match[9] + match[10]);
          tzMin = int(match[9] + match[11]);
        }
        dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
        var h = int(match[4]||0) - tzHour;
        var m = int(match[5]||0) - tzMin;
        var s = int(match[6]||0);
        var ms = Math.round(parseFloat('0.' + (match[7]||0)) * 1000);
        timeSetter.call(date, h, m, s, ms);
        return date;
      }
      return string;
    }


    return function(date, format) {
      var text = '',
        parts = [],
        fn, match;

      format = format || 'mediumDate';
      format = $locale.DATETIME_FORMATS[format] || format;
      if (isString(date)) {
        if (NUMBER_STRING.test(date)) {
          date = int(date);
        } else {
          date = jsonStringToDate(date);
        }
      }

      if (isNumber(date)) {
        date = new Date(date);
      }

      if (!isDate(date)) {
        return date;
      }

      while(format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
          parts = concat(parts, match, 1);
          format = parts.pop();
        } else {
          parts.push(format);
          format = null;
        }
      }

      forEach(parts, function(value){
        fn = DATE_FORMATS[value];
        text += fn ? fn(date, $locale.DATETIME_FORMATS)
          : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
      });

      return text;
    };
  }


  /**
   * @ngdoc filter
   * @name json
   * @kind function
   *
   * @description
   *   Allows you to convert a JavaScript object into JSON string.
   *
   *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
   *   the binding is automatically converted to JSON.
   *
   * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
   * @returns {string} JSON string.
   *
   *
   * @example
   <example>
   <file name="index.html">
   <pre>{{ {'name':'value'} | json }}</pre>
   </file>
   <file name="protractor.js" type="protractor">
   it('should jsonify filtered objects', function() {
         expect(element(by.binding("{'name':'value'}")).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
       });
   </file>
   </example>
   *
   */
  function jsonFilter() {
    return function(object) {
      return toJson(object, true);
    };
  }


  /**
   * @ngdoc filter
   * @name lowercase
   * @kind function
   * @description
   * Converts string to lowercase.
   * @see angular.lowercase
   */
  var lowercaseFilter = valueFn(lowercase);


  /**
   * @ngdoc filter
   * @name uppercase
   * @kind function
   * @description
   * Converts string to uppercase.
   * @see angular.uppercase
   */
  var uppercaseFilter = valueFn(uppercase);

  /**
   * @ngdoc filter
   * @name limitTo
   * @kind function
   *
   * @description
   * Creates a new array or string containing only a specified number of elements. The elements
   * are taken from either the beginning or the end of the source array or string, as specified by
   * the value and sign (positive or negative) of `limit`.
   *
   * @param {Array|string} input Source array or string to be limited.
   * @param {string|number} limit The length of the returned array or string. If the `limit` number
   *     is positive, `limit` number of items from the beginning of the source array/string are copied.
   *     If the number is negative, `limit` number  of items from the end of the source array/string
   *     are copied. The `limit` will be trimmed if it exceeds `array.length`
   * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
   *     had less than `limit` elements.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.numbers = [1,2,3,4,5,6,7,8,9];
           $scope.letters = "abcdefghi";
           $scope.numLimit = 3;
           $scope.letterLimit = 3;
         }
   </script>
   <div ng-controller="Ctrl">
   Limit {{numbers}} to: <input type="integer" ng-model="numLimit">
   <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
   Limit {{letters}} to: <input type="integer" ng-model="letterLimit">
   <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   var numLimitInput = element(by.model('numLimit'));
   var letterLimitInput = element(by.model('letterLimit'));
   var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
   var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));

   it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
       });

   it('should update the output when -3 is entered', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('-3');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('-3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       });

   it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
       });
   </file>
   </example>
   */
  function limitToFilter(){
    return function(input, limit) {
      if (!isArray(input) && !isString(input)) return input;

      if (Math.abs(Number(limit)) === Infinity) {
        limit = Number(limit);
      } else {
        limit = int(limit);
      }

      if (isString(input)) {
        //NaN check on limit
        if (limit) {
          return limit >= 0 ? input.slice(0, limit) : input.slice(limit, input.length);
        } else {
          return "";
        }
      }

      var out = [],
        i, n;

      // if abs(limit) exceeds maximum length, trim it
      if (limit > input.length)
        limit = input.length;
      else if (limit < -input.length)
        limit = -input.length;

      if (limit > 0) {
        i = 0;
        n = limit;
      } else {
        i = input.length + limit;
        n = input.length;
      }

      for (; i<n; i++) {
        out.push(input[i]);
      }

      return out;
    };
  }

  /**
   * @ngdoc filter
   * @name orderBy
   * @kind function
   *
   * @description
   * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
   * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
   * correctly, make sure they are actually being saved as numbers and not strings.
   *
   * @param {Array} array The array to sort.
   * @param {function(*)|string|Array.<(function(*)|string)>} expression A predicate to be
   *    used by the comparator to determine the order of elements.
   *
   *    Can be one of:
   *
   *    - `function`: Getter function. The result of this function will be sorted using the
   *      `<`, `=`, `>` operator.
   *    - `string`: An Angular expression which evaluates to an object to order by, such as 'name'
   *      to sort by a property called 'name'. Optionally prefixed with `+` or `-` to control
   *      ascending or descending sort order (for example, +name or -name).
   *    - `Array`: An array of function or string predicates. The first predicate in the array
   *      is used for sorting, but when two items are equivalent, the next predicate is used.
   *
   * @param {boolean=} reverse Reverse the order of the array.
   * @returns {Array} Sorted copy of the source array.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.friends =
               [{name:'John', phone:'555-1212', age:10},
                {name:'Mary', phone:'555-9876', age:19},
                {name:'Mike', phone:'555-4321', age:21},
                {name:'Adam', phone:'555-5678', age:35},
                {name:'Julie', phone:'555-8765', age:29}]
           $scope.predicate = '-age';
         }
   </script>
   <div ng-controller="Ctrl">
   <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
   <hr/>
   [ <a href="" ng-click="predicate=''">unsorted</a> ]
   <table class="friend">
   <tr>
   <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
   (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
   <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
   <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
   </tr>
   <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
   <td>{{friend.name}}</td>
   <td>{{friend.phone}}</td>
   <td>{{friend.age}}</td>
   </tr>
   </table>
   </div>
   </file>
   </example>
   *
   * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
   * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
   * desired parameters.
   *
   * Example:
   *
   * @example
   <example>
   <file name="index.html">
   <div ng-controller="Ctrl">
   <table class="friend">
   <tr>
   <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
   (<a href="" ng-click="order('-name',false)">^</a>)</th>
   <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
   <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
   </tr>
   <tr ng-repeat="friend in friends">
   <td>{{friend.name}}</td>
   <td>{{friend.phone}}</td>
   <td>{{friend.age}}</td>
   </tr>
   </table>
   </div>
   </file>

   <file name="script.js">
   function Ctrl($scope, $filter) {
        var orderBy = $filter('orderBy');
        $scope.friends = [
          { name: 'John',    phone: '555-1212',    age: 10 },
          { name: 'Mary',    phone: '555-9876',    age: 19 },
          { name: 'Mike',    phone: '555-4321',    age: 21 },
          { name: 'Adam',    phone: '555-5678',    age: 35 },
          { name: 'Julie',   phone: '555-8765',    age: 29 }
        ];

        $scope.order = function(predicate, reverse) {
          $scope.friends = orderBy($scope.friends, predicate, reverse);
        };
        $scope.order('-age',false);
      }
   </file>
   </example>
   */
  orderByFilter.$inject = ['$parse'];
  function orderByFilter($parse){
    return function(array, sortPredicate, reverseOrder) {
      if (!isArray(array)) return array;
      if (!sortPredicate) return array;
      sortPredicate = isArray(sortPredicate) ? sortPredicate: [sortPredicate];
      sortPredicate = map(sortPredicate, function(predicate){
        var descending = false, get = predicate || identity;
        if (isString(predicate)) {
          if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
            descending = predicate.charAt(0) == '-';
            predicate = predicate.substring(1);
          }
          get = $parse(predicate);
          if (get.constant) {
            var key = get();
            return reverseComparator(function(a,b) {
              return compare(a[key], b[key]);
            }, descending);
          }
        }
        return reverseComparator(function(a,b){
          return compare(get(a),get(b));
        }, descending);
      });
      var arrayCopy = [];
      for ( var i = 0; i < array.length; i++) { arrayCopy.push(array[i]); }
      return arrayCopy.sort(reverseComparator(comparator, reverseOrder));

      function comparator(o1, o2){
        for ( var i = 0; i < sortPredicate.length; i++) {
          var comp = sortPredicate[i](o1, o2);
          if (comp !== 0) return comp;
        }
        return 0;
      }
      function reverseComparator(comp, descending) {
        return toBoolean(descending)
          ? function(a,b){return comp(b,a);}
          : comp;
      }
      function compare(v1, v2){
        var t1 = typeof v1;
        var t2 = typeof v2;
        if (t1 == t2) {
          if (t1 == "string") {
            v1 = v1.toLowerCase();
            v2 = v2.toLowerCase();
          }
          if (v1 === v2) return 0;
          return v1 < v2 ? -1 : 1;
        } else {
          return t1 < t2 ? -1 : 1;
        }
      }
    };
  }

  function ngDirective(directive) {
    if (isFunction(directive)) {
      directive = {
        link: directive
      };
    }
    directive.restrict = directive.restrict || 'AC';
    return valueFn(directive);
  }

  /**
   * @ngdoc directive
   * @name a
   * @restrict E
   *
   * @description
   * Modifies the default behavior of the html A tag so that the default action is prevented when
   * the href attribute is empty.
   *
   * This change permits the easy creation of action links with the `ngClick` directive
   * without changing the location or causing page reloads, e.g.:
   * `<a href="" ng-click="list.addItem()">Add Item</a>`
   */
  var htmlAnchorDirective = valueFn({
    restrict: 'E',
    compile: function(element, attr) {

      if (msie <= 8) {

        // turn <a href ng-click="..">link</a> into a stylable link in IE
        // but only if it doesn't have name attribute, in which case it's an anchor
        if (!attr.href && !attr.name) {
          attr.$set('href', '');
        }

        // add a comment node to anchors to workaround IE bug that causes element content to be reset
        // to new attribute content if attribute is updated with value containing @ and element also
        // contains value with @
        // see issue #1949
        element.append(document.createComment('IE fix'));
      }

      if (!attr.href && !attr.xlinkHref && !attr.name) {
        return function(scope, element) {
          // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
          var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
            'xlink:href' : 'href';
          element.on('click', function(event){
            // if we have no href url, then don't navigate anywhere.
            if (!element.attr(href)) {
              event.preventDefault();
            }
          });
        };
      }
    }
  });

  /**
   * @ngdoc directive
   * @name ngHref
   * @restrict A
   * @priority 99
   *
   * @description
   * Using Angular markup like `{{hash}}` in an href attribute will
   * make the link go to the wrong URL if the user clicks it before
   * Angular has a chance to replace the `{{hash}}` markup with its
   * value. Until Angular replaces the markup the link will be broken
   * and will most likely return a 404 error.
   *
   * The `ngHref` directive solves this problem.
   *
   * The wrong way to write it:
   * ```html
   * <a href="http://www.gravatar.com/avatar/{{hash}}"/>
   * ```
   *
   * The correct way to write it:
   * ```html
   * <a ng-href="http://www.gravatar.com/avatar/{{hash}}"/>
   * ```
   *
   * @element A
   * @param {template} ngHref any string which can contain `{{}}` markup.
   *
   * @example
   * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
   * in links and their different behaviors:
   <example>
   <file name="index.html">
   <input ng-model="value" /><br />
   <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
   <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
   <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
   <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
   <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
   <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
   </file>
   <file name="protractor.js" type="protractor">
   it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

   it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

   it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 1000, 'page should navigate to /123');
        });

   xit('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

   it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

   it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 1000, 'page should navigate to /6');
        });
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngSrc
   * @restrict A
   * @priority 99
   *
   * @description
   * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
   * work right: The browser will fetch from the URL with the literal
   * text `{{hash}}` until Angular replaces the expression inside
   * `{{hash}}`. The `ngSrc` directive solves this problem.
   *
   * The buggy way to write it:
   * ```html
   * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
   * ```
   *
   * The correct way to write it:
   * ```html
   * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
   * ```
   *
   * @element IMG
   * @param {template} ngSrc any string which can contain `{{}}` markup.
   */

  /**
   * @ngdoc directive
   * @name ngSrcset
   * @restrict A
   * @priority 99
   *
   * @description
   * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
   * work right: The browser will fetch from the URL with the literal
   * text `{{hash}}` until Angular replaces the expression inside
   * `{{hash}}`. The `ngSrcset` directive solves this problem.
   *
   * The buggy way to write it:
   * ```html
   * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
   * ```
   *
   * The correct way to write it:
   * ```html
   * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
   * ```
   *
   * @element IMG
   * @param {template} ngSrcset any string which can contain `{{}}` markup.
   */

  /**
   * @ngdoc directive
   * @name ngDisabled
   * @restrict A
   * @priority 100
   *
   * @description
   *
   * The following markup will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:
   * ```html
   * <div ng-init="scope = { isDisabled: false }">
   *  <button disabled="{{scope.isDisabled}}">Disabled</button>
   * </div>
   * ```
   *
   * The HTML specification does not require browsers to preserve the values of boolean attributes
   * such as disabled. (Their presence means true and their absence means false.)
   * If we put an Angular interpolation expression into such an attribute then the
   * binding information would be lost when the browser removes the attribute.
   * The `ngDisabled` directive solves this problem for the `disabled` attribute.
   * This complementary directive is not removed by the browser and so provides
   * a permanent reliable place to store the binding information.
   *
   * @example
   <example>
   <file name="index.html">
   Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
   <button ng-model="button" ng-disabled="checked">Button</button>
   </file>
   <file name="protractor.js" type="protractor">
   it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
   </file>
   </example>
   *
   * @element INPUT
   * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
   *     then special attribute "disabled" will be set on the element
   */


  /**
   * @ngdoc directive
   * @name ngChecked
   * @restrict A
   * @priority 100
   *
   * @description
   * The HTML specification does not require browsers to preserve the values of boolean attributes
   * such as checked. (Their presence means true and their absence means false.)
   * If we put an Angular interpolation expression into such an attribute then the
   * binding information would be lost when the browser removes the attribute.
   * The `ngChecked` directive solves this problem for the `checked` attribute.
   * This complementary directive is not removed by the browser and so provides
   * a permanent reliable place to store the binding information.
   * @example
   <example>
   <file name="index.html">
   Check me to check both: <input type="checkbox" ng-model="master"><br/>
   <input id="checkSlave" type="checkbox" ng-checked="master">
   </file>
   <file name="protractor.js" type="protractor">
   it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
   </file>
   </example>
   *
   * @element INPUT
   * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
   *     then special attribute "checked" will be set on the element
   */


  /**
   * @ngdoc directive
   * @name ngReadonly
   * @restrict A
   * @priority 100
   *
   * @description
   * The HTML specification does not require browsers to preserve the values of boolean attributes
   * such as readonly. (Their presence means true and their absence means false.)
   * If we put an Angular interpolation expression into such an attribute then the
   * binding information would be lost when the browser removes the attribute.
   * The `ngReadonly` directive solves this problem for the `readonly` attribute.
   * This complementary directive is not removed by the browser and so provides
   * a permanent reliable place to store the binding information.
   * @example
   <example>
   <file name="index.html">
   Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
   <input type="text" ng-readonly="checked" value="I'm Angular"/>
   </file>
   <file name="protractor.js" type="protractor">
   it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
   </file>
   </example>
   *
   * @element INPUT
   * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
   *     then special attribute "readonly" will be set on the element
   */


  /**
   * @ngdoc directive
   * @name ngSelected
   * @restrict A
   * @priority 100
   *
   * @description
   * The HTML specification does not require browsers to preserve the values of boolean attributes
   * such as selected. (Their presence means true and their absence means false.)
   * If we put an Angular interpolation expression into such an attribute then the
   * binding information would be lost when the browser removes the attribute.
   * The `ngSelected` directive solves this problem for the `selected` attribute.
   * This complementary directive is not removed by the browser and so provides
   * a permanent reliable place to store the binding information.
   *
   * @example
   <example>
   <file name="index.html">
   Check me to select: <input type="checkbox" ng-model="selected"><br/>
   <select>
   <option>Hello!</option>
   <option id="greet" ng-selected="selected">Greetings!</option>
   </select>
   </file>
   <file name="protractor.js" type="protractor">
   it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
   </file>
   </example>
   *
   * @element OPTION
   * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
   *     then special attribute "selected" will be set on the element
   */

  /**
   * @ngdoc directive
   * @name ngOpen
   * @restrict A
   * @priority 100
   *
   * @description
   * The HTML specification does not require browsers to preserve the values of boolean attributes
   * such as open. (Their presence means true and their absence means false.)
   * If we put an Angular interpolation expression into such an attribute then the
   * binding information would be lost when the browser removes the attribute.
   * The `ngOpen` directive solves this problem for the `open` attribute.
   * This complementary directive is not removed by the browser and so provides
   * a permanent reliable place to store the binding information.
   * @example
   <example>
   <file name="index.html">
   Check me check multiple: <input type="checkbox" ng-model="open"><br/>
   <details id="details" ng-open="open">
   <summary>Show/Hide me</summary>
   </details>
   </file>
   <file name="protractor.js" type="protractor">
   it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
   </file>
   </example>
   *
   * @element DETAILS
   * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
   *     then special attribute "open" will be set on the element
   */

  var ngAttributeAliasDirectives = {};


// boolean attrs are evaluated
  forEach(BOOLEAN_ATTR, function(propName, attrName) {
    // binding to multiple is not supported
    if (propName == "multiple") return;

    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function() {
      return {
        priority: 100,
        link: function(scope, element, attr) {
          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
            attr.$set(attrName, !!value);
          });
        }
      };
    };
  });


// ng-src, ng-srcset, ng-href are interpolated
  forEach(['src', 'srcset', 'href'], function(attrName) {
    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function() {
      return {
        priority: 99, // it needs to run after the attributes are interpolated
        link: function(scope, element, attr) {
          var propName = attrName,
            name = attrName;

          if (attrName === 'href' &&
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
            name = 'xlinkHref';
            attr.$attr[name] = 'xlink:href';
            propName = null;
          }

          attr.$observe(normalized, function(value) {
            if (!value)
              return;

            attr.$set(name, value);

            // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
            // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
            // to set the property as well to achieve the desired effect.
            // we use attr[attrName] value since $set can sanitize the url.
            if (msie && propName) element.prop(propName, attr[name]);
          });
        }
      };
    };
  });

  /* global -nullFormCtrl */
  var nullFormCtrl = {
    $addControl: noop,
    $removeControl: noop,
    $setValidity: noop,
    $setDirty: noop,
    $setPristine: noop
  };

  /**
   * @ngdoc type
   * @name form.FormController
   *
   * @property {boolean} $pristine True if user has not interacted with the form yet.
   * @property {boolean} $dirty True if user has already interacted with the form.
   * @property {boolean} $valid True if all of the containing forms and controls are valid.
   * @property {boolean} $invalid True if at least one containing control or form is invalid.
   *
   * @property {Object} $error Is an object hash, containing references to all invalid controls or
   *  forms, where:
   *
   *  - keys are validation tokens (error names),
   *  - values are arrays of controls or forms that are invalid for given error name.
   *
   *
   *  Built-in validation tokens:
   *
   *  - `email`
   *  - `max`
   *  - `maxlength`
   *  - `min`
   *  - `minlength`
   *  - `number`
   *  - `pattern`
   *  - `required`
   *  - `url`
   *
   * @description
   * `FormController` keeps track of all its controls and nested forms as well as the state of them,
   * such as being valid/invalid or dirty/pristine.
   *
   * Each {@link ng.directive:form form} directive creates an instance
   * of `FormController`.
   *
   */
//asks for $scope to fool the BC controller module
  FormController.$inject = ['$element', '$attrs', '$scope', '$animate'];
  function FormController(element, attrs, $scope, $animate) {
    var form = this,
      parentForm = element.parent().controller('form') || nullFormCtrl,
      invalidCount = 0, // used to easily determine if we are valid
      errors = form.$error = {},
      controls = [];

    // init state
    form.$name = attrs.name || attrs.ngForm;
    form.$dirty = false;
    form.$pristine = true;
    form.$valid = true;
    form.$invalid = false;

    parentForm.$addControl(form);

    // Setup initial state of the control
    element.addClass(PRISTINE_CLASS);
    toggleValidCss(true);

    // convenience method for easy toggling of classes
    function toggleValidCss(isValid, validationErrorKey) {
      validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
      $animate.removeClass(element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
      $animate.addClass(element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
    }

    /**
     * @ngdoc method
     * @name form.FormController#$addControl
     *
     * @description
     * Register a control with the form.
     *
     * Input elements using ngModelController do this automatically when they are linked.
     */
    form.$addControl = function(control) {
      // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
      // and not added to the scope.  Now we throw an error.
      assertNotHasOwnProperty(control.$name, 'input');
      controls.push(control);

      if (control.$name) {
        form[control.$name] = control;
      }
    };

    /**
     * @ngdoc method
     * @name form.FormController#$removeControl
     *
     * @description
     * Deregister a control from the form.
     *
     * Input elements using ngModelController do this automatically when they are destroyed.
     */
    form.$removeControl = function(control) {
      if (control.$name && form[control.$name] === control) {
        delete form[control.$name];
      }
      forEach(errors, function(queue, validationToken) {
        form.$setValidity(validationToken, true, control);
      });

      arrayRemove(controls, control);
    };

    /**
     * @ngdoc method
     * @name form.FormController#$setValidity
     *
     * @description
     * Sets the validity of a form control.
     *
     * This method will also propagate to parent forms.
     */
    form.$setValidity = function(validationToken, isValid, control) {
      var queue = errors[validationToken];

      if (isValid) {
        if (queue) {
          arrayRemove(queue, control);
          if (!queue.length) {
            invalidCount--;
            if (!invalidCount) {
              toggleValidCss(isValid);
              form.$valid = true;
              form.$invalid = false;
            }
            errors[validationToken] = false;
            toggleValidCss(true, validationToken);
            parentForm.$setValidity(validationToken, true, form);
          }
        }

      } else {
        if (!invalidCount) {
          toggleValidCss(isValid);
        }
        if (queue) {
          if (includes(queue, control)) return;
        } else {
          errors[validationToken] = queue = [];
          invalidCount++;
          toggleValidCss(false, validationToken);
          parentForm.$setValidity(validationToken, false, form);
        }
        queue.push(control);

        form.$valid = false;
        form.$invalid = true;
      }
    };

    /**
     * @ngdoc method
     * @name form.FormController#$setDirty
     *
     * @description
     * Sets the form to a dirty state.
     *
     * This method can be called to add the 'ng-dirty' class and set the form to a dirty
     * state (ng-dirty class). This method will also propagate to parent forms.
     */
    form.$setDirty = function() {
      $animate.removeClass(element, PRISTINE_CLASS);
      $animate.addClass(element, DIRTY_CLASS);
      form.$dirty = true;
      form.$pristine = false;
      parentForm.$setDirty();
    };

    /**
     * @ngdoc method
     * @name form.FormController#$setPristine
     *
     * @description
     * Sets the form to its pristine state.
     *
     * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
     * state (ng-pristine class). This method will also propagate to all the controls contained
     * in this form.
     *
     * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
     * saving or resetting it.
     */
    form.$setPristine = function () {
      $animate.removeClass(element, DIRTY_CLASS);
      $animate.addClass(element, PRISTINE_CLASS);
      form.$dirty = false;
      form.$pristine = true;
      forEach(controls, function(control) {
        control.$setPristine();
      });
    };
  }


  /**
   * @ngdoc directive
   * @name ngForm
   * @restrict EAC
   *
   * @description
   * Nestable alias of {@link ng.directive:form `form`} directive. HTML
   * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
   * sub-group of controls needs to be determined.
   *
   * Note: the purpose of `ngForm` is to group controls,
   * but not to be a replacement for the `<form>` tag with all of its capabilities
   * (e.g. posting to the server, ...).
   *
   * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
   *                       related scope, under this name.
   *
   */

  /**
   * @ngdoc directive
   * @name form
   * @restrict E
   *
   * @description
   * Directive that instantiates
   * {@link form.FormController FormController}.
   *
   * If the `name` attribute is specified, the form controller is published onto the current scope under
   * this name.
   *
   * # Alias: {@link ng.directive:ngForm `ngForm`}
   *
   * In Angular forms can be nested. This means that the outer form is valid when all of the child
   * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
   * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
   * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
   * using Angular validation directives in forms that are dynamically generated using the
   * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
   * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
   * `ngForm` directive and nest these in an outer `form` element.
   *
   *
   * # CSS classes
   *  - `ng-valid` is set if the form is valid.
   *  - `ng-invalid` is set if the form is invalid.
   *  - `ng-pristine` is set if the form is pristine.
   *  - `ng-dirty` is set if the form is dirty.
   *
   * Keep in mind that ngAnimate can detect each of these classes when added and removed.
   *
   *
   * # Submitting a form and preventing the default action
   *
   * Since the role of forms in client-side Angular applications is different than in classical
   * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
   * page reload that sends the data to the server. Instead some javascript logic should be triggered
   * to handle the form submission in an application-specific way.
   *
   * For this reason, Angular prevents the default action (form submission to the server) unless the
   * `<form>` element has an `action` attribute specified.
   *
   * You can use one of the following two ways to specify what javascript method should be called when
   * a form is submitted:
   *
   * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
   * - {@link ng.directive:ngClick ngClick} directive on the first
   *  button or input field of type submit (input[type=submit])
   *
   * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
   * or {@link ng.directive:ngClick ngClick} directives.
   * This is because of the following form submission rules in the HTML specification:
   *
   * - If a form has only one input field then hitting enter in this field triggers form submit
   * (`ngSubmit`)
   * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
   * doesn't trigger submit
   * - if a form has one or more input fields and one or more buttons or input[type=submit] then
   * hitting enter in any of the input fields will trigger the click handler on the *first* button or
   * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
   *
   * @param {string=} name Name of the form. If specified, the form controller will be published into
   *                       related scope, under this name.
   *
   * ## Animation Hooks
   *
   * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
   * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
   * other validations that are performed within the form. Animations in ngForm are similar to how
   * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
   * as JS animations.
   *
   * The following example shows a simple way to utilize CSS transitions to style a form element
   * that has been rendered as invalid after it has been validated:
   *
   * <pre>
   * //be sure to include ngAnimate as a module to hook into more
   * //advanced animations
   * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
   * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
   * </pre>
   *
   * @example
   <example deps="angular-animate.js" animations="true" fixBase="true">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.userType = 'guest';
         }
   </script>
   <style>
   .my-form {
          -webkit-transition:all linear 0.5s;
          transition:all linear 0.5s;
          background: transparent;
        }
   .my-form.ng-invalid {
          background: red;
        }
   </style>
   <form name="myForm" ng-controller="Ctrl" class="my-form">
   userType: <input name="input" ng-model="userType" required>
   <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
   <tt>userType = {{userType}}</tt><br>
   <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>
   <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>
   <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
   <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
   </form>
   </file>
   <file name="protractor.js" type="protractor">
   it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

   it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
   </file>
   </example>
   *
   */
  var formDirectiveFactory = function(isNgForm) {
    return ['$timeout', function($timeout) {
      var formDirective = {
        name: 'form',
        restrict: isNgForm ? 'EAC' : 'E',
        controller: FormController,
        compile: function() {
          return {
            pre: function(scope, formElement, attr, controller) {
              if (!attr.action) {
                // we can't use jq events because if a form is destroyed during submission the default
                // action is not prevented. see #1238
                //
                // IE 9 is not affected because it doesn't fire a submit event and try to do a full
                // page reload if the form was destroyed by submission of the form via a click handler
                // on a button in the form. Looks like an IE9 specific bug.
                var preventDefaultListener = function(event) {
                  event.preventDefault
                    ? event.preventDefault()
                    : event.returnValue = false; // IE
                };

                addEventListenerFn(formElement[0], 'submit', preventDefaultListener);

                // unregister the preventDefault listener so that we don't not leak memory but in a
                // way that will achieve the prevention of the default action.
                formElement.on('$destroy', function() {
                  $timeout(function() {
                    removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);
                  }, 0, false);
                });
              }

              var parentFormCtrl = formElement.parent().controller('form'),
                alias = attr.name || attr.ngForm;

              if (alias) {
                setter(scope, alias, controller, alias);
              }
              if (parentFormCtrl) {
                formElement.on('$destroy', function() {
                  parentFormCtrl.$removeControl(controller);
                  if (alias) {
                    setter(scope, alias, undefined, alias);
                  }
                  extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
                });
              }
            }
          };
        }
      };

      return formDirective;
    }];
  };

  var formDirective = formDirectiveFactory();
  var ngFormDirective = formDirectiveFactory(true);

  /* global

   -VALID_CLASS,
   -INVALID_CLASS,
   -PRISTINE_CLASS,
   -DIRTY_CLASS
   */

  var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
  var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\.[a-z0-9-]+)*$/i;
  var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;

  var inputType = {

    /**
     * @ngdoc input
     * @name input[text]
     *
     * @description
     * Standard HTML text input with angular data binding.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} required Adds `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
     *    minlength.
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
     *    maxlength.
     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
     *    patterns defined as scope expressions.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
     *
     * @example
     <example name="text-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.text = 'guest';
             $scope.word = /^\s*\w*\s*$/;
           }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     Single word: <input type="text" name="input" ng-model="text"
     ng-pattern="word" required ng-trim="false">
     <span class="error" ng-show="myForm.input.$error.required">
     Required!</span>
     <span class="error" ng-show="myForm.input.$error.pattern">
     Single word only!</span>

     <tt>text = {{text}}</tt><br/>
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
     </file>
     <file name="protractor.js" type="protractor">
     var text = element(by.binding('text'));
     var valid = element(by.binding('myForm.input.$valid'));
     var input = element(by.model('text'));

     it('should initialize to model', function() {
            expect(text.getText()).toContain('guest');
            expect(valid.getText()).toContain('true');
          });

     it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

     it('should be invalid if multi word', function() {
            input.clear();
            input.sendKeys('hello world');

            expect(valid.getText()).toContain('false');
          });
     </file>
     </example>
     */
    'text': textInputType,


    /**
     * @ngdoc input
     * @name input[number]
     *
     * @description
     * Text input with number validation and transformation. Sets the `number` validation
     * error if not a valid number.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
     *    minlength.
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
     *    maxlength.
     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
     *    patterns defined as scope expressions.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="number-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.value = 12;
           }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     Number: <input type="number" name="input" ng-model="value"
     min="0" max="99" required>
     <span class="error" ng-show="myForm.input.$error.required">
     Required!</span>
     <span class="error" ng-show="myForm.input.$error.number">
     Not valid number!</span>
     <tt>value = {{value}}</tt><br/>
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
     </file>
     <file name="protractor.js" type="protractor">
     var value = element(by.binding('value'));
     var valid = element(by.binding('myForm.input.$valid'));
     var input = element(by.model('value'));

     it('should initialize to model', function() {
            expect(value.getText()).toContain('12');
            expect(valid.getText()).toContain('true');
          });

     it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });

     it('should be invalid if over max', function() {
            input.clear();
            input.sendKeys('123');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });
     </file>
     </example>
     */
    'number': numberInputType,


    /**
     * @ngdoc input
     * @name input[url]
     *
     * @description
     * Text input with URL validation. Sets the `url` validation error key if the content is not a
     * valid URL.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
     *    minlength.
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
     *    maxlength.
     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
     *    patterns defined as scope expressions.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="url-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.text = 'http://google.com';
           }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     URL: <input type="url" name="input" ng-model="text" required>
     <span class="error" ng-show="myForm.input.$error.required">
     Required!</span>
     <span class="error" ng-show="myForm.input.$error.url">
     Not valid url!</span>
     <tt>text = {{text}}</tt><br/>
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
     </form>
     </file>
     <file name="protractor.js" type="protractor">
     var text = element(by.binding('text'));
     var valid = element(by.binding('myForm.input.$valid'));
     var input = element(by.model('text'));

     it('should initialize to model', function() {
            expect(text.getText()).toContain('http://google.com');
            expect(valid.getText()).toContain('true');
          });

     it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

     it('should be invalid if not url', function() {
            input.clear();
            input.sendKeys('box');

            expect(valid.getText()).toContain('false');
          });
     </file>
     </example>
     */
    'url': urlInputType,


    /**
     * @ngdoc input
     * @name input[email]
     *
     * @description
     * Text input with email validation. Sets the `email` validation error key if not a valid email
     * address.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
     *    minlength.
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
     *    maxlength.
     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
     *    patterns defined as scope expressions.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="email-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.text = 'me@example.com';
     }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     Email: <input type="email" name="input" ng-model="text" required>
     <span class="error" ng-show="myForm.input.$error.required">
     Required!</span>
     <span class="error" ng-show="myForm.input.$error.email">
     Not valid email!</span>
     <tt>text = {{text}}</tt><br/>
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
     </form>
     </file>
     <file name="protractor.js" type="protractor">
     var text = element(by.binding('text'));
     var valid = element(by.binding('myForm.input.$valid'));
     var input = element(by.model('text'));

     it('should initialize to model', function() {
            expect(text.getText()).toContain('me@example.com');
     expect(valid.getText()).toContain('true');
     });

     it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

     it('should be invalid if not email', function() {
            input.clear();
            input.sendKeys('xxx');

            expect(valid.getText()).toContain('false');
          });
     </file>
     </example>
     */
    'email': emailInputType,


    /**
     * @ngdoc input
     * @name input[radio]
     *
     * @description
     * HTML radio button.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string} value The value to which the expression should be set when selected.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     * @param {string} ngValue Angular expression which sets the value to which the expression should
     *    be set when selected.
     *
     * @example
     <example name="radio-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.color = 'blue';
             $scope.specialValue = {
               "id": "12345",
               "value": "green"
             };
           }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     <input type="radio" ng-model="color" value="red">  Red <br/>
     <input type="radio" ng-model="color" ng-value="specialValue"> Green <br/>
     <input type="radio" ng-model="color" value="blue"> Blue <br/>
     <tt>color = {{color | json}}</tt><br/>
     </form>
     Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
     </file>
     <file name="protractor.js" type="protractor">
     it('should change state', function() {
            var color = element(by.binding('color'));

            expect(color.getText()).toContain('blue');

            element.all(by.model('color')).get(0).click();

            expect(color.getText()).toContain('red');
          });
     </file>
     </example>
     */
    'radio': radioInputType,


    /**
     * @ngdoc input
     * @name input[checkbox]
     *
     * @description
     * HTML checkbox.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} ngTrueValue The value to which the expression should be set when selected.
     * @param {string=} ngFalseValue The value to which the expression should be set when not selected.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="checkbox-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.value1 = true;
             $scope.value2 = 'YES'
           }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     Value1: <input type="checkbox" ng-model="value1"> <br/>
     Value2: <input type="checkbox" ng-model="value2"
     ng-true-value="YES" ng-false-value="NO"> <br/>
     <tt>value1 = {{value1}}</tt><br/>
     <tt>value2 = {{value2}}</tt><br/>
     </form>
     </file>
     <file name="protractor.js" type="protractor">
     it('should change state', function() {
            var value1 = element(by.binding('value1'));
            var value2 = element(by.binding('value2'));

            expect(value1.getText()).toContain('true');
            expect(value2.getText()).toContain('YES');

            element(by.model('value1')).click();
            element(by.model('value2')).click();

            expect(value1.getText()).toContain('false');
            expect(value2.getText()).toContain('NO');
          });
     </file>
     </example>
     */
    'checkbox': checkboxInputType,

    'hidden': noop,
    'button': noop,
    'submit': noop,
    'reset': noop,
    'file': noop
  };

// A helper function to call $setValidity and return the value / undefined,
// a pattern that is repeated a lot in the input validation logic.
  function validate(ctrl, validatorName, validity, value){
    ctrl.$setValidity(validatorName, validity);
    return validity ? value : undefined;
  }


  function addNativeHtml5Validators(ctrl, validatorName, element) {
    var validity = element.prop('validity');
    if (isObject(validity)) {
      var validator = function(value) {
        // Don't overwrite previous validation, don't consider valueMissing to apply (ng-required can
        // perform the required validation)
        if (!ctrl.$error[validatorName] && (validity.badInput || validity.customError ||
          validity.typeMismatch) && !validity.valueMissing) {
          ctrl.$setValidity(validatorName, false);
          return;
        }
        return value;
      };
      ctrl.$parsers.push(validator);
    }
  }

  function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    var validity = element.prop('validity');
    var placeholder = element[0].placeholder, noevent = {};

    // In composition mode, users are still inputing intermediate text buffer,
    // hold the listener until composition is done.
    // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
    if (!$sniffer.android) {
      var composing = false;

      element.on('compositionstart', function(data) {
        composing = true;
      });

      element.on('compositionend', function() {
        composing = false;
        listener();
      });
    }

    var listener = function(ev) {
      if (composing) return;
      var value = element.val();

      // IE (11 and under) seem to emit an 'input' event if the placeholder value changes.
      // We don't want to dirty the value when this happens, so we abort here. Unfortunately,
      // IE also sends input events for other non-input-related things, (such as focusing on a
      // form control), so this change is not entirely enough to solve this.
      if (msie && (ev || noevent).type === 'input' && element[0].placeholder !== placeholder) {
        placeholder = element[0].placeholder;
        return;
      }

      // By default we will trim the value
      // If the attribute ng-trim exists we will avoid trimming
      // e.g. <input ng-model="foo" ng-trim="false">
      if (toBoolean(attr.ngTrim || 'T')) {
        value = trim(value);
      }

      if (ctrl.$viewValue !== value ||
        // If the value is still empty/falsy, and there is no `required` error, run validators
        // again. This enables HTML5 constraint validation errors to affect Angular validation
        // even when the first character entered causes an error.
        (validity && value === '' && !validity.valueMissing)) {
        if (scope.$$phase) {
          ctrl.$setViewValue(value);
        } else {
          scope.$apply(function() {
            ctrl.$setViewValue(value);
          });
        }
      }
    };

    // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
    // input event on backspace, delete or cut
    if ($sniffer.hasEvent('input')) {
      element.on('input', listener);
    } else {
      var timeout;

      var deferListener = function() {
        if (!timeout) {
          timeout = $browser.defer(function() {
            listener();
            timeout = null;
          });
        }
      };

      element.on('keydown', function(event) {
        var key = event.keyCode;

        // ignore
        //    command            modifiers                   arrows
        if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

        deferListener();
      });

      // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
      if ($sniffer.hasEvent('paste')) {
        element.on('paste cut', deferListener);
      }
    }

    // if user paste into input using mouse on older browser
    // or form autocomplete on newer browser, we need "change" event to catch it
    element.on('change', listener);

    ctrl.$render = function() {
      element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
    };

    // pattern validator
    var pattern = attr.ngPattern,
      patternValidator,
      match;

    if (pattern) {
      var validateRegex = function(regexp, value) {
        return validate(ctrl, 'pattern', ctrl.$isEmpty(value) || regexp.test(value), value);
      };
      match = pattern.match(/^\/(.*)\/([gim]*)$/);
      if (match) {
        pattern = new RegExp(match[1], match[2]);
        patternValidator = function(value) {
          return validateRegex(pattern, value);
        };
      } else {
        patternValidator = function(value) {
          var patternObj = scope.$eval(pattern);

          if (!patternObj || !patternObj.test) {
            throw minErr('ngPattern')('noregexp',
              'Expected {0} to be a RegExp but was {1}. Element: {2}', pattern,
              patternObj, startingTag(element));
          }
          return validateRegex(patternObj, value);
        };
      }

      ctrl.$formatters.push(patternValidator);
      ctrl.$parsers.push(patternValidator);
    }

    // min length validator
    if (attr.ngMinlength) {
      var minlength = int(attr.ngMinlength);
      var minLengthValidator = function(value) {
        return validate(ctrl, 'minlength', ctrl.$isEmpty(value) || value.length >= minlength, value);
      };

      ctrl.$parsers.push(minLengthValidator);
      ctrl.$formatters.push(minLengthValidator);
    }

    // max length validator
    if (attr.ngMaxlength) {
      var maxlength = int(attr.ngMaxlength);
      var maxLengthValidator = function(value) {
        return validate(ctrl, 'maxlength', ctrl.$isEmpty(value) || value.length <= maxlength, value);
      };

      ctrl.$parsers.push(maxLengthValidator);
      ctrl.$formatters.push(maxLengthValidator);
    }
  }

  function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);

    ctrl.$parsers.push(function(value) {
      var empty = ctrl.$isEmpty(value);
      if (empty || NUMBER_REGEXP.test(value)) {
        ctrl.$setValidity('number', true);
        return value === '' ? null : (empty ? value : parseFloat(value));
      } else {
        ctrl.$setValidity('number', false);
        return undefined;
      }
    });

    addNativeHtml5Validators(ctrl, 'number', element);

    ctrl.$formatters.push(function(value) {
      return ctrl.$isEmpty(value) ? '' : '' + value;
    });

    if (attr.min) {
      var minValidator = function(value) {
        var min = parseFloat(attr.min);
        return validate(ctrl, 'min', ctrl.$isEmpty(value) || value >= min, value);
      };

      ctrl.$parsers.push(minValidator);
      ctrl.$formatters.push(minValidator);
    }

    if (attr.max) {
      var maxValidator = function(value) {
        var max = parseFloat(attr.max);
        return validate(ctrl, 'max', ctrl.$isEmpty(value) || value <= max, value);
      };

      ctrl.$parsers.push(maxValidator);
      ctrl.$formatters.push(maxValidator);
    }

    ctrl.$formatters.push(function(value) {
      return validate(ctrl, 'number', ctrl.$isEmpty(value) || isNumber(value), value);
    });
  }

  function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);

    var urlValidator = function(value) {
      return validate(ctrl, 'url', ctrl.$isEmpty(value) || URL_REGEXP.test(value), value);
    };

    ctrl.$formatters.push(urlValidator);
    ctrl.$parsers.push(urlValidator);
  }

  function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);

    var emailValidator = function(value) {
      return validate(ctrl, 'email', ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value), value);
    };

    ctrl.$formatters.push(emailValidator);
    ctrl.$parsers.push(emailValidator);
  }

  function radioInputType(scope, element, attr, ctrl) {
    // make the name unique, if not defined
    if (isUndefined(attr.name)) {
      element.attr('name', nextUid());
    }

    element.on('click', function() {
      if (element[0].checked) {
        scope.$apply(function() {
          ctrl.$setViewValue(attr.value);
        });
      }
    });

    ctrl.$render = function() {
      var value = attr.value;
      element[0].checked = (value == ctrl.$viewValue);
    };

    attr.$observe('value', ctrl.$render);
  }

  function checkboxInputType(scope, element, attr, ctrl) {
    var trueValue = attr.ngTrueValue,
      falseValue = attr.ngFalseValue;

    if (!isString(trueValue)) trueValue = true;
    if (!isString(falseValue)) falseValue = false;

    element.on('click', function() {
      scope.$apply(function() {
        ctrl.$setViewValue(element[0].checked);
      });
    });

    ctrl.$render = function() {
      element[0].checked = ctrl.$viewValue;
    };

    // Override the standard `$isEmpty` because a value of `false` means empty in a checkbox.
    ctrl.$isEmpty = function(value) {
      return value !== trueValue;
    };

    ctrl.$formatters.push(function(value) {
      return value === trueValue;
    });

    ctrl.$parsers.push(function(value) {
      return value ? trueValue : falseValue;
    });
  }


  /**
   * @ngdoc directive
   * @name textarea
   * @restrict E
   *
   * @description
   * HTML textarea element control with angular data-binding. The data-binding and validation
   * properties of this element are exactly the same as those of the
   * {@link ng.directive:input input element}.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   */


  /**
   * @ngdoc directive
   * @name input
   * @restrict E
   *
   * @description
   * HTML input element control with angular data-binding. Input control follows HTML5 input types
   * and polyfills the HTML5 validation behavior for older browsers.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {boolean=} ngRequired Sets `required` attribute if set to true
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="input-directive">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.user = {name: 'guest', last: 'visitor'};
         }
   </script>
   <div ng-controller="Ctrl">
   <form name="myForm">
   User name: <input type="text" name="userName" ng-model="user.name" required>
   <span class="error" ng-show="myForm.userName.$error.required">
   Required!</span><br>
   Last name: <input type="text" name="lastName" ng-model="user.last"
   ng-minlength="3" ng-maxlength="10">
   <span class="error" ng-show="myForm.lastName.$error.minlength">
   Too short!</span>
   <span class="error" ng-show="myForm.lastName.$error.maxlength">
   Too long!</span><br>
   </form>
   <hr>
   <tt>user = {{user}}</tt><br/>
   <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
   <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
   <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
   <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
   <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
   <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
   <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
   <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   var user = element(by.binding('{{user}}'));
   var userNameValid = element(by.binding('myForm.userName.$valid'));
   var lastNameValid = element(by.binding('myForm.lastName.$valid'));
   var lastNameError = element(by.binding('myForm.lastName.$error'));
   var formValid = element(by.binding('myForm.$valid'));
   var userNameInput = element(by.model('user.name'));
   var userLastInput = element(by.model('user.last'));

   it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

   it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

   it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

   it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

   it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
   </file>
   </example>
   */
  var inputDirective = ['$browser', '$sniffer', function($browser, $sniffer) {
    return {
      restrict: 'E',
      require: '?ngModel',
      link: function(scope, element, attr, ctrl) {
        if (ctrl) {
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer,
            $browser);
        }
      }
    };
  }];

  var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty';

  /**
   * @ngdoc type
   * @name ngModel.NgModelController
   *
   * @property {string} $viewValue Actual string value in the view.
   * @property {*} $modelValue The value in the model, that the control is bound to.
   * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
   the control reads value from the DOM.  Each function is called, in turn, passing the value
   through to the next. The last return value is used to populate the model.
   Used to sanitize / convert the value as well as validation. For validation,
   the parsers should update the validity state using
   {@link ngModel.NgModelController#$setValidity $setValidity()},
   and return `undefined` for invalid values.

   *
   * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
   the model value changes. Each function is called, in turn, passing the value through to the
   next. Used to format / convert values for display in the control and validation.
   * ```js
   * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
   * ngModel.$formatters.push(formatter);
   * ```
   *
   * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
   *     view value has changed. It is called with no arguments, and its return value is ignored.
   *     This can be used in place of additional $watches against the model value.
   *
   * @property {Object} $error An object hash with all errors as keys.
   *
   * @property {boolean} $pristine True if user has not interacted with the control yet.
   * @property {boolean} $dirty True if user has already interacted with the control.
   * @property {boolean} $valid True if there is no error.
   * @property {boolean} $invalid True if at least one error on the control.
   *
   * @description
   *
   * `NgModelController` provides API for the `ng-model` directive. The controller contains
   * services for data-binding, validation, CSS updates, and value formatting and parsing. It
   * purposefully does not contain any logic which deals with DOM rendering or listening to
   * DOM events. Such DOM related logic should be provided by other directives which make use of
   * `NgModelController` for data-binding.
   *
   * ## Custom Control Example
   * This example shows how to use `NgModelController` with a custom control to achieve
   * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
   * collaborate together to achieve the desired result.
   *
   * Note that `contenteditable` is an HTML5 attribute, which tells the browser to let the element
   * contents be edited in place by the user.  This will not work on older browsers.
   *
   * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
   * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
   * However, as we are using `$sce` the model can still decide to to provide unsafe content if it marks
   * that content using the `$sce` service.
   *
   * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
   <file name="style.css">
   [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

   .ng-invalid {
        border: 1px solid red;
      }

   </file>
   <file name="script.js">
   angular.module('customControl', ['ngSanitize']).
   directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if(!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$apply(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
   </file>
   <file name="index.html">
   <form name="myForm">
   <div contenteditable
   name="myWidget" ng-model="userContent"
   strip-br="true"
   required>Change me!</div>
   <span ng-show="myForm.myWidget.$error.required">Required!</span>
   <hr>
   <textarea ng-model="userContent"></textarea>
   </form>
   </file>
   <file name="protractor.js" type="protractor">
   it('should data-bind and become invalid', function() {
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
   </file>
   * </example>
   *
   *
   */
  var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate) {
      this.$viewValue = Number.NaN;
      this.$modelValue = Number.NaN;
      this.$parsers = [];
      this.$formatters = [];
      this.$viewChangeListeners = [];
      this.$pristine = true;
      this.$dirty = false;
      this.$valid = true;
      this.$invalid = false;
      this.$name = $attr.name;

      var ngModelGet = $parse($attr.ngModel),
        ngModelSet = ngModelGet.assign;

      if (!ngModelSet) {
        throw minErr('ngModel')('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
          $attr.ngModel, startingTag($element));
      }

      /**
       * @ngdoc method
       * @name ngModel.NgModelController#$render
       *
       * @description
       * Called when the view needs to be updated. It is expected that the user of the ng-model
       * directive will implement this method.
       */
      this.$render = noop;

      /**
       * @ngdoc method
       * @name ngModel.NgModelController#$isEmpty
       *
       * @description
       * This is called when we need to determine if the value of the input is empty.
       *
       * For instance, the required directive does this to work out if the input has data or not.
       * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
       *
       * You can override this for input directives whose concept of being empty is different to the
       * default. The `checkboxInputType` directive does this because in its case a value of `false`
       * implies empty.
       *
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is empty.
       */
      this.$isEmpty = function(value) {
        return isUndefined(value) || value === '' || value === null || value !== value;
      };

      var parentForm = $element.inheritedData('$formController') || nullFormCtrl,
        invalidCount = 0, // used to easily determine if we are valid
        $error = this.$error = {}; // keep invalid keys here


      // Setup initial state of the control
      $element.addClass(PRISTINE_CLASS);
      toggleValidCss(true);

      // convenience method for easy toggling of classes
      function toggleValidCss(isValid, validationErrorKey) {
        validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
        $animate.removeClass($element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
        $animate.addClass($element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
      }

      /**
       * @ngdoc method
       * @name ngModel.NgModelController#$setValidity
       *
       * @description
       * Change the validity state, and notifies the form when the control changes validity. (i.e. it
       * does not notify form if given validator is already marked as invalid).
       *
       * This method should be called by validators - i.e. the parser or formatter functions.
       *
       * @param {string} validationErrorKey Name of the validator. the `validationErrorKey` will assign
       *        to `$error[validationErrorKey]=isValid` so that it is available for data-binding.
       *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
       *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
       *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
       * @param {boolean} isValid Whether the current state is valid (true) or invalid (false).
       */
      this.$setValidity = function(validationErrorKey, isValid) {
        // Purposeful use of ! here to cast isValid to boolean in case it is undefined
        // jshint -W018
        if ($error[validationErrorKey] === !isValid) return;
        // jshint +W018

        if (isValid) {
          if ($error[validationErrorKey]) invalidCount--;
          if (!invalidCount) {
            toggleValidCss(true);
            this.$valid = true;
            this.$invalid = false;
          }
        } else {
          toggleValidCss(false);
          this.$invalid = true;
          this.$valid = false;
          invalidCount++;
        }

        $error[validationErrorKey] = !isValid;
        toggleValidCss(isValid, validationErrorKey);

        parentForm.$setValidity(validationErrorKey, isValid, this);
      };

      /**
       * @ngdoc method
       * @name ngModel.NgModelController#$setPristine
       *
       * @description
       * Sets the control to its pristine state.
       *
       * This method can be called to remove the 'ng-dirty' class and set the control to its pristine
       * state (ng-pristine class).
       */
      this.$setPristine = function () {
        this.$dirty = false;
        this.$pristine = true;
        $animate.removeClass($element, DIRTY_CLASS);
        $animate.addClass($element, PRISTINE_CLASS);
      };

      /**
       * @ngdoc method
       * @name ngModel.NgModelController#$setViewValue
       *
       * @description
       * Update the view value.
       *
       * This method should be called when the view value changes, typically from within a DOM event handler.
       * For example {@link ng.directive:input input} and
       * {@link ng.directive:select select} directives call it.
       *
       * It will update the $viewValue, then pass this value through each of the functions in `$parsers`,
       * which includes any validators. The value that comes out of this `$parsers` pipeline, be applied to
       * `$modelValue` and the **expression** specified in the `ng-model` attribute.
       *
       * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
       *
       * Note that calling this function does not trigger a `$digest`.
       *
       * @param {string} value Value from the view.
       */
      this.$setViewValue = function(value) {
        this.$viewValue = value;

        // change to dirty
        if (this.$pristine) {
          this.$dirty = true;
          this.$pristine = false;
          $animate.removeClass($element, PRISTINE_CLASS);
          $animate.addClass($element, DIRTY_CLASS);
          parentForm.$setDirty();
        }

        forEach(this.$parsers, function(fn) {
          value = fn(value);
        });

        if (this.$modelValue !== value) {
          this.$modelValue = value;
          ngModelSet($scope, value);
          forEach(this.$viewChangeListeners, function(listener) {
            try {
              listener();
            } catch(e) {
              $exceptionHandler(e);
            }
          });
        }
      };

      // model -> value
      var ctrl = this;

      $scope.$watch(function ngModelWatch() {
        var value = ngModelGet($scope);

        // if scope model value and ngModel value are out of sync
        if (ctrl.$modelValue !== value) {

          var formatters = ctrl.$formatters,
            idx = formatters.length;

          ctrl.$modelValue = value;
          while(idx--) {
            value = formatters[idx](value);
          }

          if (ctrl.$viewValue !== value) {
            ctrl.$viewValue = value;
            ctrl.$render();
          }
        }

        return value;
      });
    }];


  /**
   * @ngdoc directive
   * @name ngModel
   *
   * @element input
   *
   * @description
   * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
   * property on the scope using {@link ngModel.NgModelController NgModelController},
   * which is created and exposed by this directive.
   *
   * `ngModel` is responsible for:
   *
   * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
   *   require.
   * - Providing validation behavior (i.e. required, number, email, url).
   * - Keeping the state of the control (valid/invalid, dirty/pristine, validation errors).
   * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`) including animations.
   * - Registering the control with its parent {@link ng.directive:form form}.
   *
   * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
   * current scope. If the property doesn't already exist on this scope, it will be created
   * implicitly and added to the scope.
   *
   * For best practices on using `ngModel`, see:
   *
   *  - [https://github.com/angular/angular.js/wiki/Understanding-Scopes]
   *
   * For basic examples, how to use `ngModel`, see:
   *
   *  - {@link ng.directive:input input}
   *    - {@link input[text] text}
   *    - {@link input[checkbox] checkbox}
   *    - {@link input[radio] radio}
   *    - {@link input[number] number}
   *    - {@link input[email] email}
   *    - {@link input[url] url}
   *  - {@link ng.directive:select select}
   *  - {@link ng.directive:textarea textarea}
   *
   * # CSS classes
   * The following CSS classes are added and removed on the associated input/select/textarea element
   * depending on the validity of the model.
   *
   *  - `ng-valid` is set if the model is valid.
   *  - `ng-invalid` is set if the model is invalid.
   *  - `ng-pristine` is set if the model is pristine.
   *  - `ng-dirty` is set if the model is dirty.
   *
   * Keep in mind that ngAnimate can detect each of these classes when added and removed.
   *
   * ## Animation Hooks
   *
   * Animations within models are triggered when any of the associated CSS classes are added and removed
   * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
   * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
   * The animations that are triggered within ngModel are similar to how they work in ngClass and
   * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
   *
   * The following example shows a simple way to utilize CSS transitions to style an input element
   * that has been rendered as invalid after it has been validated:
   *
   * <pre>
   * //be sure to include ngAnimate as a module to hook into more
   * //advanced animations
   * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
   * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
   * </pre>
   *
   * @example
   * <example deps="angular-animate.js" animations="true" fixBase="true">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
          $scope.val = '1';
        }
   </script>
   <style>
   .my-input {
           -webkit-transition:all linear 0.5s;
           transition:all linear 0.5s;
           background: transparent;
         }
   .my-input.ng-invalid {
           color:white;
           background: red;
         }
   </style>
   Update input to see transitions when valid/invalid.
   Integer is a valid value.
   <form name="testForm" ng-controller="Ctrl">
   <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input" />
   </form>
   </file>
   * </example>
   */
  var ngModelDirective = function() {
    return {
      require: ['ngModel', '^?form'],
      controller: NgModelController,
      link: function(scope, element, attr, ctrls) {
        // notify others, especially parent forms

        var modelCtrl = ctrls[0],
          formCtrl = ctrls[1] || nullFormCtrl;

        formCtrl.$addControl(modelCtrl);

        scope.$on('$destroy', function() {
          formCtrl.$removeControl(modelCtrl);
        });
      }
    };
  };


  /**
   * @ngdoc directive
   * @name ngChange
   *
   * @description
   * Evaluate the given expression when the user changes the input.
   * The expression is evaluated immediately, unlike the JavaScript onchange event
   * which only triggers at the end of a change (usually, when the user leaves the
   * form element or presses the return key).
   * The expression is not evaluated when the value change is coming from the model.
   *
   * Note, this directive requires `ngModel` to be present.
   *
   * @element input
   * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
   * in input value.
   *
   * @example
   * <example name="ngChange-directive">
   *   <file name="index.html">
   *     <script>
   *       function Controller($scope) {
 *         $scope.counter = 0;
 *         $scope.change = function() {
 *           $scope.counter++;
 *         };
 *       }
   *     </script>
   *     <div ng-controller="Controller">
   *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
   *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
   *       <label for="ng-change-example2">Confirmed</label><br />
   *       <tt>debug = {{confirmed}}</tt><br/>
   *       <tt>counter = {{counter}}</tt><br/>
   *     </div>
   *   </file>
   *   <file name="protractor.js" type="protractor">
   *     var counter = element(by.binding('counter'));
   *     var debug = element(by.binding('confirmed'));
   *
   *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
   *
   *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
   *   </file>
   * </example>
   */
  var ngChangeDirective = valueFn({
    require: 'ngModel',
    link: function(scope, element, attr, ctrl) {
      ctrl.$viewChangeListeners.push(function() {
        scope.$eval(attr.ngChange);
      });
    }
  });


  var requiredDirective = function() {
    return {
      require: '?ngModel',
      link: function(scope, elm, attr, ctrl) {
        if (!ctrl) return;
        attr.required = true; // force truthy in case we are on non input element

        var validator = function(value) {
          if (attr.required && ctrl.$isEmpty(value)) {
            ctrl.$setValidity('required', false);
            return;
          } else {
            ctrl.$setValidity('required', true);
            return value;
          }
        };

        ctrl.$formatters.push(validator);
        ctrl.$parsers.unshift(validator);

        attr.$observe('required', function() {
          validator(ctrl.$viewValue);
        });
      }
    };
  };


  /**
   * @ngdoc directive
   * @name ngList
   *
   * @description
   * Text input that converts between a delimited string and an array of strings. The delimiter
   * can be a fixed string (by default a comma) or a regular expression.
   *
   * @element input
   * @param {string=} ngList optional delimiter that should be used to split the value. If
   *   specified in form `/something/` then the value will be converted into a regular expression.
   *
   * @example
   <example name="ngList-directive">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.names = ['igor', 'misko', 'vojta'];
         }
   </script>
   <form name="myForm" ng-controller="Ctrl">
   List: <input name="namesInput" ng-model="names" ng-list required>
   <span class="error" ng-show="myForm.namesInput.$error.required">
   Required!</span>
   <br>
   <tt>names = {{names}}</tt><br/>
   <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
   <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
   <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
   <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
   </form>
   </file>
   <file name="protractor.js" type="protractor">
   var listInput = element(by.model('names'));
   var names = element(by.binding('{{names}}'));
   var valid = element(by.binding('myForm.namesInput.$valid'));
   var error = element(by.css('span.error'));

   it('should initialize to model', function() {
          expect(names.getText()).toContain('["igor","misko","vojta"]');
          expect(valid.getText()).toContain('true');
          expect(error.getCssValue('display')).toBe('none');
        });

   it('should be invalid if empty', function() {
          listInput.clear();
          listInput.sendKeys('');

          expect(names.getText()).toContain('');
          expect(valid.getText()).toContain('false');
          expect(error.getCssValue('display')).not.toBe('none');        });
   </file>
   </example>
   */
  var ngListDirective = function() {
    return {
      require: 'ngModel',
      link: function(scope, element, attr, ctrl) {
        var match = /\/(.*)\//.exec(attr.ngList),
          separator = match && new RegExp(match[1]) || attr.ngList || ',';

        var parse = function(viewValue) {
          // If the viewValue is invalid (say required but empty) it will be `undefined`
          if (isUndefined(viewValue)) return;

          var list = [];

          if (viewValue) {
            forEach(viewValue.split(separator), function(value) {
              if (value) list.push(trim(value));
            });
          }

          return list;
        };

        ctrl.$parsers.push(parse);
        ctrl.$formatters.push(function(value) {
          if (isArray(value)) {
            return value.join(', ');
          }

          return undefined;
        });

        // Override the standard $isEmpty because an empty array means the input is empty.
        ctrl.$isEmpty = function(value) {
          return !value || !value.length;
        };
      }
    };
  };


  var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
  /**
   * @ngdoc directive
   * @name ngValue
   *
   * @description
   * Binds the given expression to the value of `input[select]` or `input[radio]`, so
   * that when the element is selected, the `ngModel` of that element is set to the
   * bound value.
   *
   * `ngValue` is useful when dynamically generating lists of radio buttons using `ng-repeat`, as
   * shown below.
   *
   * @element input
   * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
   *   of the `input` element
   *
   * @example
   <example name="ngValue-directive">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
            $scope.names = ['pizza', 'unicorns', 'robots'];
            $scope.my = { favorite: 'unicorns' };
          }
   </script>
   <form ng-controller="Ctrl">
   <h2>Which is your favorite?</h2>
   <label ng-repeat="name in names" for="{{name}}">
   {{name}}
   <input type="radio"
   ng-model="my.favorite"
   ng-value="name"
   id="{{name}}"
   name="favorite">
   </label>
   <div>You chose {{my.favorite}}</div>
   </form>
   </file>
   <file name="protractor.js" type="protractor">
   var favorite = element(by.binding('my.favorite'));

   it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
   it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
   </file>
   </example>
   */
  var ngValueDirective = function() {
    return {
      priority: 100,
      compile: function(tpl, tplAttr) {
        if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
          return function ngValueConstantLink(scope, elm, attr) {
            attr.$set('value', scope.$eval(attr.ngValue));
          };
        } else {
          return function ngValueLink(scope, elm, attr) {
            scope.$watch(attr.ngValue, function valueWatchAction(value) {
              attr.$set('value', value);
            });
          };
        }
      }
    };
  };

  /**
   * @ngdoc directive
   * @name ngBind
   * @restrict AC
   *
   * @description
   * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
   * with the value of a given expression, and to update the text content when the value of that
   * expression changes.
   *
   * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
   * `{{ expression }}` which is similar but less verbose.
   *
   * It is preferable to use `ngBind` instead of `{{ expression }}` when a template is momentarily
   * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
   * element attribute, it makes the bindings invisible to the user while the page is loading.
   *
   * An alternative solution to this problem would be using the
   * {@link ng.directive:ngCloak ngCloak} directive.
   *
   *
   * @element ANY
   * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
   *
   * @example
   * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.name = 'Whirled';
         }
   </script>
   <div ng-controller="Ctrl">
   Enter name: <input type="text" ng-model="name"><br>
   Hello <span ng-bind="name"></span>!
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
   </file>
   </example>
   */
  var ngBindDirective = ngDirective(function(scope, element, attr) {
    element.addClass('ng-binding').data('$binding', attr.ngBind);
    scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
      // We are purposefully using == here rather than === because we want to
      // catch when value is "null or undefined"
      // jshint -W041
      element.text(value == undefined ? '' : value);
    });
  });


  /**
   * @ngdoc directive
   * @name ngBindTemplate
   *
   * @description
   * The `ngBindTemplate` directive specifies that the element
   * text content should be replaced with the interpolation of the template
   * in the `ngBindTemplate` attribute.
   * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
   * expressions. This directive is needed since some HTML elements
   * (such as TITLE and OPTION) cannot contain SPAN elements.
   *
   * @element ANY
   * @param {string} ngBindTemplate template of form
   *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
   *
   * @example
   * Try it here: enter text in text box and watch the greeting change.
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.salutation = 'Hello';
           $scope.name = 'World';
         }
   </script>
   <div ng-controller="Ctrl">
   Salutation: <input type="text" ng-model="salutation"><br>
   Name: <input type="text" ng-model="name"><br>
   <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
   </file>
   </example>
   */
  var ngBindTemplateDirective = ['$interpolate', function($interpolate) {
    return function(scope, element, attr) {
      // TODO: move this to scenario runner
      var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
      element.addClass('ng-binding').data('$binding', interpolateFn);
      attr.$observe('ngBindTemplate', function(value) {
        element.text(value);
      });
    };
  }];


  /**
   * @ngdoc directive
   * @name ngBindHtml
   *
   * @description
   * Creates a binding that will innerHTML the result of evaluating the `expression` into the current
   * element in a secure way.  By default, the innerHTML-ed content will be sanitized using the {@link
    * ngSanitize.$sanitize $sanitize} service.  To utilize this functionality, ensure that `$sanitize`
   * is available, for example, by including {@link ngSanitize} in your module's dependencies (not in
   * core Angular.)  You may also bypass sanitization for values you know are safe. To do so, bind to
   * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
   * under {@link ng.$sce#Example Strict Contextual Escaping (SCE)}.
   *
   * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
   * will have an exception (instead of an exploit.)
   *
   * @element ANY
   * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
   *
   * @example
   Try it here: enter text in text box and watch the greeting change.

   <example module="ngBindHtmlExample" deps="angular-sanitize.js">
   <file name="index.html">
   <div ng-controller="ngBindHtmlCtrl">
   <p ng-bind-html="myHTML"></p>
   </div>
   </file>

   <file name="script.js">
   angular.module('ngBindHtmlExample', ['ngSanitize'])

   .controller('ngBindHtmlCtrl', ['$scope', function ngBindHtmlCtrl($scope) {
         $scope.myHTML =
            'I am an <code>HTML</code>string with <a href="#">links!</a> and other <em>stuff</em>';
       }]);
   </file>

   <file name="protractor.js" type="protractor">
   it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
   </file>
   </example>
   */
  var ngBindHtmlDirective = ['$sce', '$parse', function($sce, $parse) {
    return function(scope, element, attr) {
      element.addClass('ng-binding').data('$binding', attr.ngBindHtml);

      var parsed = $parse(attr.ngBindHtml);
      function getStringValue() { return (parsed(scope) || '').toString(); }

      scope.$watch(getStringValue, function ngBindHtmlWatchAction(value) {
        element.html($sce.getTrustedHtml(parsed(scope)) || '');
      });
    };
  }];

  function classDirective(name, selector) {
    name = 'ngClass' + name;
    return ['$animate', function($animate) {
      return {
        restrict: 'AC',
        link: function(scope, element, attr) {
          var oldVal;

          scope.$watch(attr[name], ngClassWatchAction, true);

          attr.$observe('class', function(value) {
            ngClassWatchAction(scope.$eval(attr[name]));
          });


          if (name !== 'ngClass') {
            scope.$watch('$index', function($index, old$index) {
              // jshint bitwise: false
              var mod = $index & 1;
              if (mod !== (old$index & 1)) {
                var classes = arrayClasses(scope.$eval(attr[name]));
                mod === selector ?
                  addClasses(classes) :
                  removeClasses(classes);
              }
            });
          }

          function addClasses(classes) {
            var newClasses = digestClassCounts(classes, 1);
            attr.$addClass(newClasses);
          }

          function removeClasses(classes) {
            var newClasses = digestClassCounts(classes, -1);
            attr.$removeClass(newClasses);
          }

          function digestClassCounts (classes, count) {
            var classCounts = element.data('$classCounts') || {};
            var classesToUpdate = [];
            forEach(classes, function (className) {
              if (count > 0 || classCounts[className]) {
                classCounts[className] = (classCounts[className] || 0) + count;
                if (classCounts[className] === +(count > 0)) {
                  classesToUpdate.push(className);
                }
              }
            });
            element.data('$classCounts', classCounts);
            return classesToUpdate.join(' ');
          }

          function updateClasses (oldClasses, newClasses) {
            var toAdd = arrayDifference(newClasses, oldClasses);
            var toRemove = arrayDifference(oldClasses, newClasses);
            toRemove = digestClassCounts(toRemove, -1);
            toAdd = digestClassCounts(toAdd, 1);

            if (toAdd.length === 0) {
              $animate.removeClass(element, toRemove);
            } else if (toRemove.length === 0) {
              $animate.addClass(element, toAdd);
            } else {
              $animate.setClass(element, toAdd, toRemove);
            }
          }

          function ngClassWatchAction(newVal) {
            if (selector === true || scope.$index % 2 === selector) {
              var newClasses = arrayClasses(newVal || []);
              if (!oldVal) {
                addClasses(newClasses);
              } else if (!equals(newVal,oldVal)) {
                var oldClasses = arrayClasses(oldVal);
                updateClasses(oldClasses, newClasses);
              }
            }
            oldVal = shallowCopy(newVal);
          }
        }
      };

      function arrayDifference(tokens1, tokens2) {
        var values = [];

        outer:
          for(var i = 0; i < tokens1.length; i++) {
            var token = tokens1[i];
            for(var j = 0; j < tokens2.length; j++) {
              if(token == tokens2[j]) continue outer;
            }
            values.push(token);
          }
        return values;
      }

      function arrayClasses (classVal) {
        if (isArray(classVal)) {
          return classVal;
        } else if (isString(classVal)) {
          return classVal.split(' ');
        } else if (isObject(classVal)) {
          var classes = [], i = 0;
          forEach(classVal, function(v, k) {
            if (v) {
              classes = classes.concat(k.split(' '));
            }
          });
          return classes;
        }
        return classVal;
      }
    }];
  }

  /**
   * @ngdoc directive
   * @name ngClass
   * @restrict AC
   *
   * @description
   * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
   * an expression that represents all classes to be added.
   *
   * The directive operates in three different ways, depending on which of three types the expression
   * evaluates to:
   *
   * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
   * names.
   *
   * 2. If the expression evaluates to an array, each element of the array should be a string that is
   * one or more space-delimited class names.
   *
   * 3. If the expression evaluates to an object, then for each key-value pair of the
   * object with a truthy value the corresponding key is used as a class name.
   *
   * The directive won't add duplicate classes if a particular class was already set.
   *
   * When the expression changes, the previously added classes are removed and only then the
   * new classes are added.
   *
   * @animations
   * add - happens just before the class is applied to the element
   * remove - happens just before the class is removed from the element
   *
   * @element ANY
   * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
   *   of the evaluation can be a string representing space delimited class
   *   names, an array, or a map of class names to boolean values. In the case of a map, the
   *   names of the properties whose values are truthy will be added as css classes to the
   *   element.
   *
   * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
   <file name="index.html">
   <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
   <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>
   <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>
   <input type="checkbox" ng-model="error"> error (apply "red" class)
   <hr>
   <p ng-class="style">Using String Syntax</p>
   <input type="text" ng-model="style" placeholder="Type: bold strike red">
   <hr>
   <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
   <input ng-model="style1" placeholder="Type: bold, strike or red"><br>
   <input ng-model="style2" placeholder="Type: bold, strike or red"><br>
   <input ng-model="style3" placeholder="Type: bold, strike or red"><br>
   </file>
   <file name="style.css">
   .strike {
         text-decoration: line-through;
       }
   .bold {
           font-weight: bold;
       }
   .red {
           color: red;
       }
   </file>
   <file name="protractor.js" type="protractor">
   var ps = element.all(by.css('p'));

   it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/red/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/red/);
       });

   it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

   it('array example should have 3 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.last().getAttribute('class')).toBe('bold strike red');
       });
   </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
   <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
   <br>
   <span class="base-class" ng-class="myVar">Sample Text</span>
   </file>
   <file name="style.css">
   .base-class {
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

   .base-class.my-class {
         color: red;
         font-size:3em;
       }
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
   </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link ngAnimate.$animate#addclass $animate.addClass} and
   {@link ngAnimate.$animate#removeclass $animate.removeClass}.
   */
  var ngClassDirective = classDirective('', true);

  /**
   * @ngdoc directive
   * @name ngClassOdd
   * @restrict AC
   *
   * @description
   * The `ngClassOdd` and `ngClassEven` directives work exactly as
   * {@link ng.directive:ngClass ngClass}, except they work in
   * conjunction with `ngRepeat` and take effect only on odd (even) rows.
   *
   * This directive can be applied only within the scope of an
   * {@link ng.directive:ngRepeat ngRepeat}.
   *
   * @element ANY
   * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
   *   of the evaluation can be a string representing space delimited class names or an array.
   *
   * @example
   <example>
   <file name="index.html">
   <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
   <li ng-repeat="name in names">
   <span ng-class-odd="'odd'" ng-class-even="'even'">
   {{name}}
   </span>
   </li>
   </ol>
   </file>
   <file name="style.css">
   .odd {
         color: red;
       }
   .even {
         color: blue;
       }
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
   </file>
   </example>
   */
  var ngClassOddDirective = classDirective('Odd', 0);

  /**
   * @ngdoc directive
   * @name ngClassEven
   * @restrict AC
   *
   * @description
   * The `ngClassOdd` and `ngClassEven` directives work exactly as
   * {@link ng.directive:ngClass ngClass}, except they work in
   * conjunction with `ngRepeat` and take effect only on odd (even) rows.
   *
   * This directive can be applied only within the scope of an
   * {@link ng.directive:ngRepeat ngRepeat}.
   *
   * @element ANY
   * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
   *   result of the evaluation can be a string representing space delimited class names or an array.
   *
   * @example
   <example>
   <file name="index.html">
   <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
   <li ng-repeat="name in names">
   <span ng-class-odd="'odd'" ng-class-even="'even'">
   {{name}} &nbsp; &nbsp; &nbsp;
   </span>
   </li>
   </ol>
   </file>
   <file name="style.css">
   .odd {
         color: red;
       }
   .even {
         color: blue;
       }
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
   </file>
   </example>
   */
  var ngClassEvenDirective = classDirective('Even', 1);

  /**
   * @ngdoc directive
   * @name ngCloak
   * @restrict AC
   *
   * @description
   * The `ngCloak` directive is used to prevent the Angular html template from being briefly
   * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
   * directive to avoid the undesirable flicker effect caused by the html template display.
   *
   * The directive can be applied to the `<body>` element, but the preferred usage is to apply
   * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
   * of the browser view.
   *
   * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
   * `angular.min.js`.
   * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
   *
   * ```css
   * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
   * ```
   *
   * When this css rule is loaded by the browser, all html elements (including their children) that
   * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
   * during the compilation of the template it deletes the `ngCloak` element attribute, making
   * the compiled element visible.
   *
   * For the best result, the `angular.js` script must be loaded in the head section of the html
   * document; alternatively, the css rule above must be included in the external stylesheet of the
   * application.
   *
   * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they
   * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css
   * class `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.
   *
   * @element ANY
   *
   * @example
   <example>
   <file name="index.html">
   <div id="template1" ng-cloak>{{ 'hello' }}</div>
   <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
   </file>
   </example>
   *
   */
  var ngCloakDirective = ngDirective({
    compile: function(element, attr) {
      attr.$set('ngCloak', undefined);
      element.removeClass('ng-cloak');
    }
  });

  /**
   * @ngdoc directive
   * @name ngController
   *
   * @description
   * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
   * supports the principles behind the Model-View-Controller design pattern.
   *
   * MVC components in angular:
   *
   * * Model — The Model is scope properties; scopes are attached to the DOM where scope properties
   *   are accessed through bindings.
   * * View — The template (HTML with data bindings) that is rendered into the View.
   * * Controller — The `ngController` directive specifies a Controller class; the class contains business
   *   logic behind the application to decorate the scope with functions and values
   *
   * Note that you can also attach controllers to the DOM by declaring it in a route definition
   * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
   * again using `ng-controller` in the template itself.  This will cause the controller to be attached
   * and executed twice.
   *
   * @element ANY
   * @scope
   * @param {expression} ngController Name of a globally accessible constructor function or an
   *     {@link guide/expression expression} that on the current scope evaluates to a
   *     constructor function. The controller instance can be published into a scope property
   *     by specifying `as propertyName`.
   *
   * @example
   * Here is a simple form for editing user contact information. Adding, removing, clearing, and
   * greeting are methods declared on the controller (see source tab). These methods can
   * easily be called from the angular markup. Any changes to the data are automatically reflected
   * in the View without the need for a manual update.
   *
   * Two different declaration styles are included below:
   *
   * * one binds methods and properties directly onto the controller using `this`:
   * `ng-controller="SettingsController1 as settings"`
   * * one injects `$scope` into the controller:
   * `ng-controller="SettingsController2"`
   *
   * The second option is more common in the Angular community, and is generally used in boilerplates
   * and in this guide. However, there are advantages to binding properties directly to the controller
   * and avoiding scope.
   *
   * * Using `controller as` makes it obvious which controller you are accessing in the template when
   * multiple controllers apply to an element.
   * * If you are writing your controllers as classes you have easier access to the properties and
   * methods, which will appear on the scope, from inside the controller code.
   * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
   * inheritance masking primitives.
   *
   * This example demonstrates the `controller as` syntax.
   *
   * <example name="ngControllerAs">
   *   <file name="index.html">
   *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
   *      Name: <input type="text" ng-model="settings.name"/>
   *      [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
   *      Contact:
   *      <ul>
   *        <li ng-repeat="contact in settings.contacts">
   *          <select ng-model="contact.type">
   *             <option>phone</option>
   *             <option>email</option>
   *          </select>
   *          <input type="text" ng-model="contact.value"/>
   *          [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
   *          | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
   *        </li>
   *        <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
   *     </ul>
   *    </div>
   *   </file>
   *   <file name="app.js">
   *    function SettingsController1() {
 *      this.name = "John Smith";
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'} ];
   *    }
   *
   *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
   *
   *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
   *    };
   *
   *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
   *
   *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
   *   </file>
   *   <file name="protractor.js" type="protractor">
   *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.findElement(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.findElement(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.findElement(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.findElement(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
   *
   *       firstRepeat.findElement(by.linkText('clear')).click();
   *
   *       expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))
   *           .toBe('');
   *
   *       container.findElement(by.linkText('add')).click();
   *
   *       expect(container.findElement(by.repeater('contact in settings.contacts').row(2))
   *           .findElement(by.model('contact.value'))
   *           .getAttribute('value'))
   *           .toBe('yourname@example.org');
   *     });
   *   </file>
   * </example>
   *
   * This example demonstrates the "attach to `$scope`" style of controller.
   *
   * <example name="ngController">
   *  <file name="index.html">
   *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
   *     Name: <input type="text" ng-model="name"/>
   *     [ <a href="" ng-click="greet()">greet</a> ]<br/>
   *     Contact:
   *     <ul>
   *       <li ng-repeat="contact in contacts">
   *         <select ng-model="contact.type">
   *            <option>phone</option>
   *            <option>email</option>
   *         </select>
   *         <input type="text" ng-model="contact.value"/>
   *         [ <a href="" ng-click="clearContact(contact)">clear</a>
   *         | <a href="" ng-click="removeContact(contact)">X</a> ]
   *       </li>
   *       <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
   *    </ul>
   *   </div>
   *  </file>
   *  <file name="app.js">
   *   function SettingsController2($scope) {
 *     $scope.name = "John Smith";
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'} ];
   *
   *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
   *
   *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
   *     };
   *
   *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
   *
   *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
   *   }
   *  </file>
   *  <file name="protractor.js" type="protractor">
   *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.findElement(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.findElement(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.findElement(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.findElement(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
   *
   *      firstRepeat.findElement(by.linkText('clear')).click();
   *
   *      expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))
   *          .toBe('');
   *
   *      container.findElement(by.linkText('add')).click();
   *
   *      expect(container.findElement(by.repeater('contact in contacts').row(2))
   *          .findElement(by.model('contact.value'))
   *          .getAttribute('value'))
   *          .toBe('yourname@example.org');
   *    });
   *  </file>
   *</example>

   */
  var ngControllerDirective = [function() {
    return {
      scope: true,
      controller: '@',
      priority: 500
    };
  }];

  /**
   * @ngdoc directive
   * @name ngCsp
   *
   * @element html
   * @description
   * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
   *
   * This is necessary when developing things like Google Chrome Extensions.
   *
   * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
   * For us to be compatible, we just need to implement the "getterFn" in $parse without violating
   * any of these restrictions.
   *
   * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
   * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
   * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
   * be raised.
   *
   * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
   * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
   * To make those directives work in CSP mode, include the `angular-csp.css` manually.
   *
   * In order to use this feature put the `ngCsp` directive on the root element of the application.
   *
   * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
   *
   * @example
   * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
   <!doctype html>
   <html ng-app ng-csp>
   ...
   ...
   </html>
   ```
   */

// ngCsp is not implemented as a proper directive any more, because we need it be processed while we bootstrap
// the system (before $parse is instantiated), for this reason we just have a csp() fn that looks for ng-csp attribute
// anywhere in the current doc

  /**
   * @ngdoc directive
   * @name ngClick
   *
   * @description
   * The ngClick directive allows you to specify custom behavior when
   * an element is clicked.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
   * click. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-click="count = count + 1" ng-init="count=0">
   Increment
   </button>
   count: {{count}}
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
   </file>
   </example>
   */
  /*
   * A directive that allows creation of custom onclick handlers that are defined as angular
   * expressions and are compiled and executed within the current scope.
   *
   * Events that are handled via these handler are always configured not to propagate further.
   */
  var ngEventDirectives = {};
  forEach(
    'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
    function(name) {
      var directiveName = directiveNormalize('ng-' + name);
      ngEventDirectives[directiveName] = ['$parse', function($parse) {
        return {
          compile: function($element, attr) {
            var fn = $parse(attr[directiveName]);
            return function(scope, element, attr) {
              element.on(lowercase(name), function(event) {
                scope.$apply(function() {
                  fn(scope, {$event:event});
                });
              });
            };
          }
        };
      }];
    }
  );

  /**
   * @ngdoc directive
   * @name ngDblclick
   *
   * @description
   * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
   * a dblclick. (The Event object is available as `$event`)
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-dblclick="count = count + 1" ng-init="count=0">
   Increment (on double click)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngMousedown
   *
   * @description
   * The ngMousedown directive allows you to specify custom behavior on mousedown event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
   * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mousedown="count = count + 1" ng-init="count=0">
   Increment (on mouse down)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngMouseup
   *
   * @description
   * Specify custom behavior on mouseup event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
   * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mouseup="count = count + 1" ng-init="count=0">
   Increment (on mouse up)
   </button>
   count: {{count}}
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngMouseover
   *
   * @description
   * Specify custom behavior on mouseover event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
   * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mouseover="count = count + 1" ng-init="count=0">
   Increment (when mouse is over)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngMouseenter
   *
   * @description
   * Specify custom behavior on mouseenter event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
   * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mouseenter="count = count + 1" ng-init="count=0">
   Increment (when mouse enters)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngMouseleave
   *
   * @description
   * Specify custom behavior on mouseleave event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
   * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mouseleave="count = count + 1" ng-init="count=0">
   Increment (when mouse leaves)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngMousemove
   *
   * @description
   * Specify custom behavior on mousemove event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
   * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mousemove="count = count + 1" ng-init="count=0">
   Increment (when mouse moves)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngKeydown
   *
   * @description
   * Specify custom behavior on keydown event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
   * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
   *
   * @example
   <example>
   <file name="index.html">
   <input ng-keydown="count = count + 1" ng-init="count=0">
   key down count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngKeyup
   *
   * @description
   * Specify custom behavior on keyup event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
   * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
   *
   * @example
   <example>
   <file name="index.html">
   <p>Typing in the input box below updates the key count</p>
   <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

   <p>Typing in the input box below updates the keycode</p>
   <input ng-keyup="event=$event">
   <p>event keyCode: {{ event.keyCode }}</p>
   <p>event altKey: {{ event.altKey }}</p>
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngKeypress
   *
   * @description
   * Specify custom behavior on keypress event.
   *
   * @element ANY
   * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
   * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
   * and can be interrogated for keyCode, altKey, etc.)
   *
   * @example
   <example>
   <file name="index.html">
   <input ng-keypress="count = count + 1" ng-init="count=0">
   key press count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngSubmit
   *
   * @description
   * Enables binding angular expressions to onsubmit events.
   *
   * Additionally it prevents the default action (which for form means sending the request to the
   * server and reloading the current page), but only if the form does not contain `action`,
   * `data-action`, or `x-action` attributes.
   *
   * @element form
   * @priority 0
   * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
   * ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
          $scope.list = [];
          $scope.text = 'hello';
          $scope.submit = function() {
            if ($scope.text) {
              $scope.list.push(this.text);
              $scope.text = '';
            }
          };
        }
   </script>
   <form ng-submit="submit()" ng-controller="Ctrl">
   Enter text and hit enter:
   <input type="text" ng-model="text" name="text" />
   <input type="submit" id="submit" value="Submit" />
   <pre>list={{list}}</pre>
   </form>
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.input('text')).getAttribute('value')).toBe('');
       });
   it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngFocus
   *
   * @description
   * Specify custom behavior on focus event.
   *
   * @element window, input, select, textarea, a
   * @priority 0
   * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
   * focus. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   * See {@link ng.directive:ngClick ngClick}
   */

  /**
   * @ngdoc directive
   * @name ngBlur
   *
   * @description
   * Specify custom behavior on blur event.
   *
   * @element window, input, select, textarea, a
   * @priority 0
   * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
   * blur. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   * See {@link ng.directive:ngClick ngClick}
   */

  /**
   * @ngdoc directive
   * @name ngCopy
   *
   * @description
   * Specify custom behavior on copy event.
   *
   * @element window, input, select, textarea, a
   * @priority 0
   * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
   * copy. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
   copied: {{copied}}
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngCut
   *
   * @description
   * Specify custom behavior on cut event.
   *
   * @element window, input, select, textarea, a
   * @priority 0
   * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
   * cut. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
   cut: {{cut}}
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngPaste
   *
   * @description
   * Specify custom behavior on paste event.
   *
   * @element window, input, select, textarea, a
   * @priority 0
   * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
   * paste. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
   pasted: {{paste}}
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngIf
   * @restrict A
   *
   * @description
   * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
   * {expression}. If the expression assigned to `ngIf` evaluates to a false
   * value then the element is removed from the DOM, otherwise a clone of the
   * element is reinserted into the DOM.
   *
   * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
   * element in the DOM rather than changing its visibility via the `display` css property.  A common
   * case when this difference is significant is when using css selectors that rely on an element's
   * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
   *
   * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
   * is created when the element is restored.  The scope created within `ngIf` inherits from
   * its parent scope using
   * [prototypal inheritance](https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance).
   * An important implication of this is if `ngModel` is used within `ngIf` to bind to
   * a javascript primitive defined in the parent scope. In this case any modifications made to the
   * variable within the child scope will override (hide) the value in the parent scope.
   *
   * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
   * is if an element's class attribute is directly modified after it's compiled, using something like
   * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
   * the added class will be lost because the original compiled state is used to regenerate the element.
   *
   * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
   * and `leave` effects.
   *
   * @animations
   * enter - happens just after the ngIf contents change and a new DOM element is created and injected into the ngIf container
   * leave - happens just before the ngIf contents are removed from the DOM
   *
   * @element ANY
   * @scope
   * @priority 600
   * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
   *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
   *     element is added to the DOM tree.
   *
   * @example
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
   Show when checked:
   <span ng-if="checked" class="animate-if">
   I'm removed when the checkbox is unchecked.
   </span>
   </file>
   <file name="animations.css">
   .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

   .animate-if.ng-enter, .animate-if.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

   .animate-if.ng-enter,
   .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

   .animate-if.ng-leave,
   .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
   </file>
   </example>
   */
  var ngIfDirective = ['$animate', function($animate) {
    return {
      transclude: 'element',
      priority: 600,
      terminal: true,
      restrict: 'A',
      $$tlb: true,
      link: function ($scope, $element, $attr, ctrl, $transclude) {
        var block, childScope, previousElements;
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

          if (toBoolean(value)) {
            if (!childScope) {
              childScope = $scope.$new();
              $transclude(childScope, function (clone) {
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block = {
                  clone: clone
                };
                $animate.enter(clone, $element.parent(), $element);
              });
            }
          } else {
            if(previousElements) {
              previousElements.remove();
              previousElements = null;
            }
            if(childScope) {
              childScope.$destroy();
              childScope = null;
            }
            if(block) {
              previousElements = getBlockElements(block.clone);
              $animate.leave(previousElements, function() {
                previousElements = null;
              });
              block = null;
            }
          }
        });
      }
    };
  }];

  /**
   * @ngdoc directive
   * @name ngInclude
   * @restrict ECA
   *
   * @description
   * Fetches, compiles and includes an external HTML fragment.
   *
   * By default, the template URL is restricted to the same domain and protocol as the
   * application document. This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
   * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
   * [wrap them](ng.$sce#trustAsResourceUrl) as trusted values. Refer to Angular's {@link
    * ng.$sce Strict Contextual Escaping}.
   *
   * In addition, the browser's
   * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
   * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
   * policy may further restrict whether the template is successfully loaded.
   * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
   * access on some browsers.
   *
   * @animations
   * enter - animation is used to bring new content into the browser.
   * leave - animation is used to animate existing content away.
   *
   * The enter and leave animation occur concurrently.
   *
   * @scope
   * @priority 400
   *
   * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
   *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
   * @param {string=} onload Expression to evaluate when a new partial is loaded.
   *
   * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
   *
   *                  - If the attribute is not set, disable scrolling.
   *                  - If the attribute is set without value, enable scrolling.
   *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
   *
   * @example
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   <div ng-controller="Ctrl">
   <select ng-model="template" ng-options="t.name for t in templates">
   <option value="">(blank)</option>
   </select>
   url of the template: <tt>{{template.url}}</tt>
   <hr/>
   <div class="slide-animate-container">
   <div class="slide-animate" ng-include="template.url"></div>
   </div>
   </div>
   </file>
   <file name="script.js">
   function Ctrl($scope) {
        $scope.templates =
          [ { name: 'template1.html', url: 'template1.html'},
            { name: 'template2.html', url: 'template2.html'} ];
        $scope.template = $scope.templates[0];
      }
   </file>
   <file name="template1.html">
   Content of template1.html
   </file>
   <file name="template2.html">
   Content of template2.html
   </file>
   <file name="animations.css">
   .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

   .slide-animate {
        padding:10px;
      }

   .slide-animate.ng-enter, .slide-animate.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

   .slide-animate.ng-enter {
        top:-50px;
      }
   .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

   .slide-animate.ng-leave {
        top:0;
      }
   .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
   </file>
   <file name="protractor.js" type="protractor">
   var templateSelect = element(by.model('template'));
   var includeElem = element(by.css('[ng-include]'));

   it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

   it('should load template2.html', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.element.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

   it('should change to blank', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.element.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
   </file>
   </example>
   */


  /**
   * @ngdoc event
   * @name ngInclude#$includeContentRequested
   * @eventType emit on the scope ngInclude was declared in
   * @description
   * Emitted every time the ngInclude content is requested.
   */


  /**
   * @ngdoc event
   * @name ngInclude#$includeContentLoaded
   * @eventType emit on the current ngInclude scope
   * @description
   * Emitted every time the ngInclude content is reloaded.
   */
  var ngIncludeDirective = ['$http', '$templateCache', '$anchorScroll', '$animate', '$sce',
    function($http,   $templateCache,   $anchorScroll,   $animate,   $sce) {
      return {
        restrict: 'ECA',
        priority: 400,
        terminal: true,
        transclude: 'element',
        controller: angular.noop,
        compile: function(element, attr) {
          var srcExp = attr.ngInclude || attr.src,
            onloadExp = attr.onload || '',
            autoScrollExp = attr.autoscroll;

          return function(scope, $element, $attr, ctrl, $transclude) {
            var changeCounter = 0,
              currentScope,
              previousElement,
              currentElement;

            var cleanupLastIncludeContent = function() {
              if(previousElement) {
                previousElement.remove();
                previousElement = null;
              }
              if(currentScope) {
                currentScope.$destroy();
                currentScope = null;
              }
              if(currentElement) {
                $animate.leave(currentElement, function() {
                  previousElement = null;
                });
                previousElement = currentElement;
                currentElement = null;
              }
            };

            scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
              var afterAnimation = function() {
                if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                  $anchorScroll();
                }
              };
              var thisChangeId = ++changeCounter;

              if (src) {
                $http.get(src, {cache: $templateCache}).success(function(response) {
                  if (thisChangeId !== changeCounter) return;
                  var newScope = scope.$new();
                  ctrl.template = response;

                  // Note: This will also link all children of ng-include that were contained in the original
                  // html. If that content contains controllers, ... they could pollute/change the scope.
                  // However, using ng-include on an element with additional content does not make sense...
                  // Note: We can't remove them in the cloneAttchFn of $transclude as that
                  // function is called before linking the content, which would apply child
                  // directives to non existing elements.
                  var clone = $transclude(newScope, function(clone) {
                    cleanupLastIncludeContent();
                    $animate.enter(clone, null, $element, afterAnimation);
                  });

                  currentScope = newScope;
                  currentElement = clone;

                  currentScope.$emit('$includeContentLoaded');
                  scope.$eval(onloadExp);
                }).error(function() {
                  if (thisChangeId === changeCounter) cleanupLastIncludeContent();
                });
                scope.$emit('$includeContentRequested');
              } else {
                cleanupLastIncludeContent();
                ctrl.template = null;
              }
            });
          };
        }
      };
    }];

// This directive is called during the $transclude call of the first `ngInclude` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngInclude
// is called.
  var ngIncludeFillContentDirective = ['$compile',
    function($compile) {
      return {
        restrict: 'ECA',
        priority: -400,
        require: 'ngInclude',
        link: function(scope, $element, $attr, ctrl) {
          $element.html(ctrl.template);
          $compile($element.contents())(scope);
        }
      };
    }];

  /**
   * @ngdoc directive
   * @name ngInit
   * @restrict AC
   *
   * @description
   * The `ngInit` directive allows you to evaluate an expression in the
   * current scope.
   *
   * <div class="alert alert-error">
   * The only appropriate use of `ngInit` is for aliasing special properties of
   * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
   * should use {@link guide/controller controllers} rather than `ngInit`
   * to initialize values on a scope.
   * </div>
   * <div class="alert alert-warning">
   * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
   * sure you have parenthesis for correct precedence:
   * <pre class="prettyprint">
   *   <div ng-init="test1 = (data | orderBy:'name')"></div>
   * </pre>
   * </div>
   *
   * @priority 450
   *
   * @element ANY
   * @param {expression} ngInit {@link guide/expression Expression} to eval.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
       $scope.list = [['a', 'b'], ['c', 'd']];
     }
   </script>
   <div ng-controller="Ctrl">
   <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
   <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
   <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
   </div>
   </div>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
   </file>
   </example>
   */
  var ngInitDirective = ngDirective({
    priority: 450,
    compile: function() {
      return {
        pre: function(scope, element, attrs) {
          scope.$eval(attrs.ngInit);
        }
      };
    }
  });

  /**
   * @ngdoc directive
   * @name ngNonBindable
   * @restrict AC
   * @priority 1000
   *
   * @description
   * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
   * DOM element. This is useful if the element contains what appears to be Angular directives and
   * bindings but which should be ignored by Angular. This could be the case if you have a site that
   * displays snippets of code, for instance.
   *
   * @element ANY
   *
   * @example
   * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
   * but the one wrapped in `ngNonBindable` is left alone.
   *
   * @example
   <example>
   <file name="index.html">
   <div>Normal: {{1 + 2}}</div>
   <div ng-non-bindable>Ignored: {{1 + 2}}</div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
   </file>
   </example>
   */
  var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

  /**
   * @ngdoc directive
   * @name ngPluralize
   * @restrict EA
   *
   * @description
   * `ngPluralize` is a directive that displays messages according to en-US localization rules.
   * These rules are bundled with angular.js, but can be overridden
   * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
   * by specifying the mappings between
   * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
   * and the strings to be displayed.
   *
   * # Plural categories and explicit number rules
   * There are two
   * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
   * in Angular's default en-US locale: "one" and "other".
   *
   * While a plural category may match many numbers (for example, in en-US locale, "other" can match
   * any number that is not 1), an explicit number rule can only match one number. For example, the
   * explicit number rule for "3" matches the number 3. There are examples of plural categories
   * and explicit number rules throughout the rest of this documentation.
   *
   * # Configuring ngPluralize
   * You configure ngPluralize by providing 2 attributes: `count` and `when`.
   * You can also provide an optional attribute, `offset`.
   *
   * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
   *
   * The `when` attribute specifies the mappings between plural categories and the actual
   * string to be displayed. The value of the attribute should be a JSON object.
   *
   * The following example shows how to configure ngPluralize:
   *
   * ```html
   * <ng-pluralize count="personCount"
   when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
   * </ng-pluralize>
   *```
   *
   * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
   * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
   * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
   * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
   * show "a dozen people are viewing".
   *
   * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
   * into pluralized strings. In the previous example, Angular will replace `{}` with
   * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
   * for <span ng-non-bindable>{{numberExpression}}</span>.
   *
   * # Configuring ngPluralize with offset
   * The `offset` attribute allows further customization of pluralized text, which can result in
   * a better user experience. For example, instead of the message "4 people are viewing this document",
   * you might display "John, Kate and 2 others are viewing this document".
   * The offset attribute allows you to offset a number by any desired value.
   * Let's take a look at an example:
   *
   * ```html
   * <ng-pluralize count="personCount" offset=2
   *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
   * </ng-pluralize>
   * ```
   *
   * Notice that we are still using two plural categories(one, other), but we added
   * three explicit number rules 0, 1 and 2.
   * When one person, perhaps John, views the document, "John is viewing" will be shown.
   * When three people view the document, no explicit number rule is found, so
   * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
   * In this case, plural category 'one' is matched and "John, Marry and one other person are viewing"
   * is shown.
   *
   * Note that when you specify offsets, you must provide explicit number rules for
   * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
   * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
   * plural categories "one" and "other".
   *
   * @param {string|expression} count The variable to be bound to.
   * @param {string} when The mapping between plural category to its corresponding strings.
   * @param {number=} offset Offset to deduct from the total number.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
            $scope.person1 = 'Igor';
            $scope.person2 = 'Misko';
            $scope.personCount = 1;
          }
   </script>
   <div ng-controller="Ctrl">
   Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
   Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
   Number of People:<input type="text" ng-model="personCount" value="1" /><br/>

   <!--- Example with simple pluralization rules for en locale --->
   Without Offset:
   <ng-pluralize count="personCount"
   when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
   </ng-pluralize><br>

   <!--- Example with offset --->
   With Offset(2):
   <ng-pluralize count="personCount" offset=2
   when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
   </ng-pluralize>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
   it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
   </file>
   </example>
   */
  var ngPluralizeDirective = ['$locale', '$interpolate', function($locale, $interpolate) {
    var BRACE = /{}/g;
    return {
      restrict: 'EA',
      link: function(scope, element, attr) {
        var numberExp = attr.count,
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
          offset = attr.offset || 0,
          whens = scope.$eval(whenExp) || {},
          whensExpFns = {},
          startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          isWhen = /^when(Minus)?(.+)$/;

        forEach(attr, function(expression, attributeName) {
          if (isWhen.test(attributeName)) {
            whens[lowercase(attributeName.replace('when', '').replace('Minus', '-'))] =
              element.attr(attr.$attr[attributeName]);
          }
        });
        forEach(whens, function(expression, key) {
          whensExpFns[key] =
            $interpolate(expression.replace(BRACE, startSymbol + numberExp + '-' +
              offset + endSymbol));
        });

        scope.$watch(function ngPluralizeWatch() {
          var value = parseFloat(scope.$eval(numberExp));

          if (!isNaN(value)) {
            //if explicit number rule such as 1, 2, 3... is defined, just use it. Otherwise,
            //check it against pluralization rules in $locale service
            if (!(value in whens)) value = $locale.pluralCat(value - offset);
            return whensExpFns[value](scope, element, true);
          } else {
            return '';
          }
        }, function ngPluralizeWatchAction(newVal) {
          element.text(newVal);
        });
      }
    };
  }];

  /**
   * @ngdoc directive
   * @name ngRepeat
   *
   * @description
   * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
   * instance gets its own scope, where the given loop variable is set to the current collection item,
   * and `$index` is set to the item index or key.
   *
   * Special properties are exposed on the local scope of each template instance, including:
   *
   * | Variable  | Type            | Details                                                                     |
   * |-----------|-----------------|-----------------------------------------------------------------------------|
   * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
   * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
   * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
   * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
   * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
   * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
   *
   * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
   * This may be useful when, for instance, nesting ngRepeats.
   *
   * # Special repeat start and end points
   * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
   * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
   * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
   * up to and including the ending HTML tag where **ng-repeat-end** is placed.
   *
   * The example below makes use of this feature:
   * ```html
   *   <header ng-repeat-start="item in items">
   *     Header {{ item }}
   *   </header>
   *   <div class="body">
   *     Body {{ item }}
   *   </div>
   *   <footer ng-repeat-end>
   *     Footer {{ item }}
   *   </footer>
   * ```
   *
   * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
   * ```html
   *   <header>
   *     Header A
   *   </header>
   *   <div class="body">
   *     Body A
   *   </div>
   *   <footer>
   *     Footer A
   *   </footer>
   *   <header>
   *     Header B
   *   </header>
   *   <div class="body">
   *     Body B
   *   </div>
   *   <footer>
   *     Footer B
   *   </footer>
   * ```
   *
   * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
   * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
   *
   * @animations
   * **.enter** - when a new item is added to the list or when an item is revealed after a filter
   *
   * **.leave** - when an item is removed from the list or when an item is filtered out
   *
   * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
   *
   * @element ANY
   * @scope
   * @priority 1000
   * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
   *   formats are currently supported:
   *
   *   * `variable in expression` – where variable is the user defined loop variable and `expression`
   *     is a scope expression giving the collection to enumerate.
   *
   *     For example: `album in artist.albums`.
   *
   *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
   *     and `expression` is the scope expression giving the collection to enumerate.
   *
   *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
   *
   *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function
   *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
   *     is specified the ng-repeat associates elements by identity in the collection. It is an error to have
   *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
   *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
   *     before specifying a tracking expression.
   *
   *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
   *     will be associated by item identity in the array.
   *
   *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
   *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
   *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
   *     element in the same way in the DOM.
   *
   *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
   *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
   *     property is same.
   *
   *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
   *     to items in conjunction with a tracking expression.
   *
   * @example
   * This example initializes the scope to a list of names and
   * then uses `ngRepeat` to display every person:
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   <div ng-init="friends = [
   {name:'John', age:25, gender:'boy'},
   {name:'Jessie', age:30, gender:'girl'},
   {name:'Johanna', age:28, gender:'girl'},
   {name:'Joy', age:15, gender:'girl'},
   {name:'Mary', age:28, gender:'girl'},
   {name:'Peter', age:95, gender:'boy'},
   {name:'Sebastian', age:50, gender:'boy'},
   {name:'Erika', age:27, gender:'girl'},
   {name:'Patrick', age:40, gender:'boy'},
   {name:'Samantha', age:60, gender:'girl'}
   ]">
   I have {{friends.length}} friends. They are:
   <input type="search" ng-model="q" placeholder="filter friends..." />
   <ul class="example-animate-container">
   <li class="animate-repeat" ng-repeat="friend in friends | filter:q">
   [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
   </li>
   </ul>
   </div>
   </file>
   <file name="animations.css">
   .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

   .animate-repeat {
        line-height:40px;
        list-style:none;
        box-sizing:border-box;
      }

   .animate-repeat.ng-move,
   .animate-repeat.ng-enter,
   .animate-repeat.ng-leave {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
      }

   .animate-repeat.ng-leave.ng-leave-active,
   .animate-repeat.ng-move,
   .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

   .animate-repeat.ng-leave,
   .animate-repeat.ng-move.ng-move-active,
   .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:40px;
      }
   </file>
   <file name="protractor.js" type="protractor">
   var friends = element.all(by.repeater('friend in friends'));

   it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

   it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
   </file>
   </example>
   */
  var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
    var NG_REMOVED = '$$NG_REMOVED';
    var ngRepeatMinErr = minErr('ngRepeat');
    return {
      transclude: 'element',
      priority: 1000,
      terminal: true,
      $$tlb: true,
      link: function($scope, $element, $attr, ctrl, $transclude){
        var expression = $attr.ngRepeat;
        var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),
          trackByExp, trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn,
          lhs, rhs, valueIdentifier, keyIdentifier,
          hashFnLocals = {$id: hashKey};

        if (!match) {
          throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);
        }

        lhs = match[1];
        rhs = match[2];
        trackByExp = match[3];

        if (trackByExp) {
          trackByExpGetter = $parse(trackByExp);
          trackByIdExpFn = function(key, value, index) {
            // assign key, value, and $index to the locals so that they can be used in hash functions
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
            hashFnLocals[valueIdentifier] = value;
            hashFnLocals.$index = index;
            return trackByExpGetter($scope, hashFnLocals);
          };
        } else {
          trackByIdArrayFn = function(key, value) {
            return hashKey(value);
          };
          trackByIdObjFn = function(key) {
            return key;
          };
        }

        match = lhs.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);
        if (!match) {
          throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);
        }
        valueIdentifier = match[3] || match[1];
        keyIdentifier = match[2];

        // Store a list of elements from previous run. This is a hash where key is the item from the
        // iterator, and the value is objects with following properties.
        //   - scope: bound scope
        //   - element: previous element.
        //   - index: position
        var lastBlockMap = {};

        //watch props
        $scope.$watchCollection(rhs, function ngRepeatAction(collection){
          var index, length,
            previousNode = $element[0],     // current position of the node
            nextNode,
          // Same as lastBlockMap but it has the current state. It will become the
          // lastBlockMap on the next iteration.
            nextBlockMap = {},
            arrayLength,
            childScope,
            key, value, // key/value of iteration
            trackById,
            trackByIdFn,
            collectionKeys,
            block,       // last object information {scope, element, id}
            nextBlockOrder = [],
            elementsToRemove;


          if (isArrayLike(collection)) {
            collectionKeys = collection;
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
          } else {
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
            // if object, extract keys, sort them and use to determine order of iteration over obj props
            collectionKeys = [];
            for (key in collection) {
              if (collection.hasOwnProperty(key) && key.charAt(0) != '$') {
                collectionKeys.push(key);
              }
            }
            collectionKeys.sort();
          }

          arrayLength = collectionKeys.length;

          // locate existing items
          length = nextBlockOrder.length = collectionKeys.length;
          for(index = 0; index < length; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            trackById = trackByIdFn(key, value, index);
            assertNotHasOwnProperty(trackById, '`track by` id');
            if(lastBlockMap.hasOwnProperty(trackById)) {
              block = lastBlockMap[trackById];
              delete lastBlockMap[trackById];
              nextBlockMap[trackById] = block;
              nextBlockOrder[index] = block;
            } else if (nextBlockMap.hasOwnProperty(trackById)) {
              // restore lastBlockMap
              forEach(nextBlockOrder, function(block) {
                if (block && block.scope) lastBlockMap[block.id] = block;
              });
              // This is a duplicate and we need to throw an error
              throw ngRepeatMinErr('dupes', "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}",
                expression,       trackById);
            } else {
              // new never before seen block
              nextBlockOrder[index] = { id: trackById };
              nextBlockMap[trackById] = false;
            }
          }

          // remove existing items
          for (key in lastBlockMap) {
            // lastBlockMap is our own object so we don't need to use special hasOwnPropertyFn
            if (lastBlockMap.hasOwnProperty(key)) {
              block = lastBlockMap[key];
              elementsToRemove = getBlockElements(block.clone);
              $animate.leave(elementsToRemove);
              forEach(elementsToRemove, function(element) { element[NG_REMOVED] = true; });
              block.scope.$destroy();
            }
          }

          // we are not using forEach for perf reasons (trying to avoid #call)
          for (index = 0, length = collectionKeys.length; index < length; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            block = nextBlockOrder[index];
            if (nextBlockOrder[index - 1]) previousNode = getBlockEnd(nextBlockOrder[index - 1]);

            if (block.scope) {
              // if we have already seen this object, then we need to reuse the
              // associated scope/element
              childScope = block.scope;

              nextNode = previousNode;
              do {
                nextNode = nextNode.nextSibling;
              } while(nextNode && nextNode[NG_REMOVED]);

              if (getBlockStart(block) != nextNode) {
                // existing item which got moved
                $animate.move(getBlockElements(block.clone), null, jqLite(previousNode));
              }
              previousNode = getBlockEnd(block);
            } else {
              // new item which we don't know about
              childScope = $scope.$new();
            }

            childScope[valueIdentifier] = value;
            if (keyIdentifier) childScope[keyIdentifier] = key;
            childScope.$index = index;
            childScope.$first = (index === 0);
            childScope.$last = (index === (arrayLength - 1));
            childScope.$middle = !(childScope.$first || childScope.$last);
            // jshint bitwise: false
            childScope.$odd = !(childScope.$even = (index&1) === 0);
            // jshint bitwise: true

            if (!block.scope) {
              $transclude(childScope, function(clone) {
                clone[clone.length++] = document.createComment(' end ngRepeat: ' + expression + ' ');
                $animate.enter(clone, null, jqLite(previousNode));
                previousNode = clone;
                block.scope = childScope;
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block.clone = clone;
                nextBlockMap[block.id] = block;
              });
            }
          }
          lastBlockMap = nextBlockMap;
        });
      }
    };

    function getBlockStart(block) {
      return block.clone[0];
    }

    function getBlockEnd(block) {
      return block.clone[block.clone.length - 1];
    }
  }];

  /**
   * @ngdoc directive
   * @name ngShow
   *
   * @description
   * The `ngShow` directive shows or hides the given HTML element based on the expression
   * provided to the ngShow attribute. The element is shown or hidden by removing or adding
   * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
   * in AngularJS and sets the display style to none (using an !important flag).
   * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
   *
   * ```html
   * <!-- when $scope.myValue is truthy (element is visible) -->
   * <div ng-show="myValue"></div>
   *
   * <!-- when $scope.myValue is falsy (element is hidden) -->
   * <div ng-show="myValue" class="ng-hide"></div>
   * ```
   *
   * When the ngShow expression evaluates to false then the ng-hide CSS class is added to the class attribute
   * on the element causing it to become hidden. When true, the ng-hide CSS class is removed
   * from the element causing the element not to appear hidden.
   *
   * <div class="alert alert-warning">
   * **Note:** Here is a list of values that ngShow will consider as a falsy value (case insensitive):<br />
   * "f" / "0" / "false" / "no" / "n" / "[]"
   * </div>
   *
   * ## Why is !important used?
   *
   * You may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector
   * can be easily overridden by heavier selectors. For example, something as simple
   * as changing the display style on a HTML list item would make hidden elements appear visible.
   * This also becomes a bigger issue when dealing with CSS frameworks.
   *
   * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
   * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
   * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
   *
   * ### Overriding .ng-hide
   *
   * By default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change
   * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
   * class in CSS:
   *
   * ```css
   * .ng-hide {
 *   //this is just another form of hiding an element
 *   display:block!important;
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
   * ```
   *
   * By default you don't need to override in CSS anything and the animations will work around the display style.
   *
   * ## A note about animations with ngShow
   *
   * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
   * is true and false. This system works like the animation system present with ngClass except that
   * you must also include the !important flag to override the display property
   * so that you can perform an animation when the element is hidden during the time of the animation.
   *
   * ```css
   * //
   * //a working example can be found at the bottom of this page
   * //
   * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 * }
   *
   * .my-element.ng-hide-add { ... }
   * .my-element.ng-hide-add.ng-hide-add-active { ... }
   * .my-element.ng-hide-remove { ... }
   * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
   * ```
   *
   * Keep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display
   * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
   *
   * @animations
   * addClass: .ng-hide - happens after the ngShow expression evaluates to a truthy value and the just before contents are set to visible
   * removeClass: .ng-hide - happens after the ngShow expression evaluates to a non truthy value and just before the contents are set to hidden
   *
   * @element ANY
   * @param {expression} ngShow If the {@link guide/expression expression} is truthy
   *     then the element is shown or hidden respectively.
   *
   * @example
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   Click me: <input type="checkbox" ng-model="checked"><br/>
   <div>
   Show:
   <div class="check-element animate-show" ng-show="checked">
   <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
   </div>
   </div>
   <div>
   Hide:
   <div class="check-element animate-show" ng-hide="checked">
   <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
   </div>
   </div>
   </file>
   <file name="glyphicons.css">
   @import url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);
   </file>
   <file name="animations.css">
   .animate-show {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

   .animate-show.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

   .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
   </file>
   <file name="protractor.js" type="protractor">
   var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
   var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

   it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
   </file>
   </example>
   */
  var ngShowDirective = ['$animate', function($animate) {
    return function(scope, element, attr) {
      scope.$watch(attr.ngShow, function ngShowWatchAction(value){
        $animate[toBoolean(value) ? 'removeClass' : 'addClass'](element, 'ng-hide');
      });
    };
  }];


  /**
   * @ngdoc directive
   * @name ngHide
   *
   * @description
   * The `ngHide` directive shows or hides the given HTML element based on the expression
   * provided to the ngHide attribute. The element is shown or hidden by removing or adding
   * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
   * in AngularJS and sets the display style to none (using an !important flag).
   * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
   *
   * ```html
   * <!-- when $scope.myValue is truthy (element is hidden) -->
   * <div ng-hide="myValue" class="ng-hide"></div>
   *
   * <!-- when $scope.myValue is falsy (element is visible) -->
   * <div ng-hide="myValue"></div>
   * ```
   *
   * When the ngHide expression evaluates to true then the .ng-hide CSS class is added to the class attribute
   * on the element causing it to become hidden. When false, the ng-hide CSS class is removed
   * from the element causing the element not to appear hidden.
   *
   * <div class="alert alert-warning">
   * **Note:** Here is a list of values that ngHide will consider as a falsy value (case insensitive):<br />
   * "f" / "0" / "false" / "no" / "n" / "[]"
   * </div>
   *
   * ## Why is !important used?
   *
   * You may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector
   * can be easily overridden by heavier selectors. For example, something as simple
   * as changing the display style on a HTML list item would make hidden elements appear visible.
   * This also becomes a bigger issue when dealing with CSS frameworks.
   *
   * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
   * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
   * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
   *
   * ### Overriding .ng-hide
   *
   * By default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change
   * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
   * class in CSS:
   *
   * ```css
   * .ng-hide {
 *   //this is just another form of hiding an element
 *   display:block!important;
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
   * ```
   *
   * By default you don't need to override in CSS anything and the animations will work around the display style.
   *
   * ## A note about animations with ngHide
   *
   * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
   * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
   * CSS class is added and removed for you instead of your own CSS class.
   *
   * ```css
   * //
   * //a working example can be found at the bottom of this page
   * //
   * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 * }
   *
   * .my-element.ng-hide-add { ... }
   * .my-element.ng-hide-add.ng-hide-add-active { ... }
   * .my-element.ng-hide-remove { ... }
   * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
   * ```
   *
   * Keep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display
   * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
   *
   * @animations
   * removeClass: .ng-hide - happens after the ngHide expression evaluates to a truthy value and just before the contents are set to hidden
   * addClass: .ng-hide - happens after the ngHide expression evaluates to a non truthy value and just before the contents are set to visible
   *
   * @element ANY
   * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
   *     the element is shown or hidden respectively.
   *
   * @example
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   Click me: <input type="checkbox" ng-model="checked"><br/>
   <div>
   Show:
   <div class="check-element animate-hide" ng-show="checked">
   <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
   </div>
   </div>
   <div>
   Hide:
   <div class="check-element animate-hide" ng-hide="checked">
   <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
   </div>
   </div>
   </file>
   <file name="glyphicons.css">
   @import url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);
   </file>
   <file name="animations.css">
   .animate-hide {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

   .animate-hide.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

   .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
   </file>
   <file name="protractor.js" type="protractor">
   var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
   var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

   it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
   </file>
   </example>
   */
  var ngHideDirective = ['$animate', function($animate) {
    return function(scope, element, attr) {
      scope.$watch(attr.ngHide, function ngHideWatchAction(value){
        $animate[toBoolean(value) ? 'addClass' : 'removeClass'](element, 'ng-hide');
      });
    };
  }];

  /**
   * @ngdoc directive
   * @name ngStyle
   * @restrict AC
   *
   * @description
   * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
   *
   * @element ANY
   * @param {expression} ngStyle
   *
   * {@link guide/expression Expression} which evals to an
   * object whose keys are CSS style names and values are corresponding values for those CSS
   * keys.
   *
   * Since some CSS style names are not valid keys for an object, they must be quoted.
   * See the 'background-color' style in the example below.
   *
   * @example
   <example>
   <file name="index.html">
   <input type="button" value="set color" ng-click="myStyle={color:'red'}">
   <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
   <input type="button" value="clear" ng-click="myStyle={}">
   <br/>
   <span ng-style="myStyle">Sample Text</span>
   <pre>myStyle={{myStyle}}</pre>
   </file>
   <file name="style.css">
   span {
         color: black;
       }
   </file>
   <file name="protractor.js" type="protractor">
   var colorSpan = element(by.css('span'));

   iit('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
   </file>
   </example>
   */
  var ngStyleDirective = ngDirective(function(scope, element, attr) {
    scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
      if (oldStyles && (newStyles !== oldStyles)) {
        forEach(oldStyles, function(val, style) { element.css(style, '');});
      }
      if (newStyles) element.css(newStyles);
    }, true);
  });

  /**
   * @ngdoc directive
   * @name ngSwitch
   * @restrict EA
   *
   * @description
   * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
   * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
   * as specified in the template.
   *
   * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
   * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
   * matches the value obtained from the evaluated expression. In other words, you define a container element
   * (where you place the directive), place an expression on the **`on="..."` attribute**
   * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
   * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
   * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
   * attribute is displayed.
   *
   * <div class="alert alert-info">
   * Be aware that the attribute values to match against cannot be expressions. They are interpreted
   * as literal string values to match against.
   * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
   * value of the expression `$scope.someVal`.
   * </div>

   * @animations
   * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
   * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
   *
   * @usage
   *
   * ```
   * <ANY ng-switch="expression">
   *   <ANY ng-switch-when="matchValue1">...</ANY>
   *   <ANY ng-switch-when="matchValue2">...</ANY>
   *   <ANY ng-switch-default>...</ANY>
   * </ANY>
   * ```
   *
   *
   * @scope
   * @priority 800
   * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.
   * On child elements add:
   *
   * * `ngSwitchWhen`: the case statement to match against. If match then this
   *   case will be displayed. If the same match appears multiple times, all the
   *   elements will be displayed.
   * * `ngSwitchDefault`: the default case when no other case match. If there
   *   are multiple default cases, all of them will be displayed when no other
   *   case match.
   *
   *
   * @example
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   <div ng-controller="Ctrl">
   <select ng-model="selection" ng-options="item for item in items">
   </select>
   <tt>selection={{selection}}</tt>
   <hr/>
   <div class="animate-switch-container"
   ng-switch on="selection">
   <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
   <div class="animate-switch" ng-switch-when="home">Home Span</div>
   <div class="animate-switch" ng-switch-default>default</div>
   </div>
   </div>
   </file>
   <file name="script.js">
   function Ctrl($scope) {
        $scope.items = ['settings', 'home', 'other'];
        $scope.selection = $scope.items[0];
      }
   </file>
   <file name="animations.css">
   .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

   .animate-switch {
        padding:10px;
      }

   .animate-switch.ng-animate {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

   .animate-switch.ng-leave.ng-leave-active,
   .animate-switch.ng-enter {
        top:-50px;
      }
   .animate-switch.ng-leave,
   .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
   </file>
   <file name="protractor.js" type="protractor">
   var switchElem = element(by.css('[ng-switch]'));
   var select = element(by.model('selection'));

   it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
   it('should change to home', function() {
        select.element.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
   it('should select default', function() {
        select.element.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
   </file>
   </example>
   */
  var ngSwitchDirective = ['$animate', function($animate) {
    return {
      restrict: 'EA',
      require: 'ngSwitch',

      // asks for $scope to fool the BC controller module
      controller: ['$scope', function ngSwitchController() {
        this.cases = {};
      }],
      link: function(scope, element, attr, ngSwitchController) {
        var watchExpr = attr.ngSwitch || attr.on,
          selectedTranscludes = [],
          selectedElements = [],
          previousElements = [],
          selectedScopes = [];

        scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
          var i, ii;
          for (i = 0, ii = previousElements.length; i < ii; ++i) {
            previousElements[i].remove();
          }
          previousElements.length = 0;

          for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
            var selected = selectedElements[i];
            selectedScopes[i].$destroy();
            previousElements[i] = selected;
            $animate.leave(selected, function() {
              previousElements.splice(i, 1);
            });
          }

          selectedElements.length = 0;
          selectedScopes.length = 0;

          if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
            scope.$eval(attr.change);
            forEach(selectedTranscludes, function(selectedTransclude) {
              var selectedScope = scope.$new();
              selectedScopes.push(selectedScope);
              selectedTransclude.transclude(selectedScope, function(caseElement) {
                var anchor = selectedTransclude.element;

                selectedElements.push(caseElement);
                $animate.enter(caseElement, anchor.parent(), anchor);
              });
            });
          }
        });
      }
    };
  }];

  var ngSwitchWhenDirective = ngDirective({
    transclude: 'element',
    priority: 800,
    require: '^ngSwitch',
    link: function(scope, element, attrs, ctrl, $transclude) {
      ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
      ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
    }
  });

  var ngSwitchDefaultDirective = ngDirective({
    transclude: 'element',
    priority: 800,
    require: '^ngSwitch',
    link: function(scope, element, attr, ctrl, $transclude) {
      ctrl.cases['?'] = (ctrl.cases['?'] || []);
      ctrl.cases['?'].push({ transclude: $transclude, element: element });
    }
  });

  /**
   * @ngdoc directive
   * @name ngTransclude
   * @restrict AC
   *
   * @description
   * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
   *
   * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
   *
   * @element ANY
   *
   * @example
   <example module="transclude">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }

   angular.module('transclude', [])
   .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
   template: '<div style="border: 1px solid black;">' +
   '<div style="background-color: gray">{{title}}</div>' +
   '<div ng-transclude></div>' +
   '</div>'
   };
   });
   </script>
   <div ng-controller="Ctrl">
   <input ng-model="title"><br>
   <textarea ng-model="text"></textarea> <br/>
   <pane title="{{title}}">{{text}}</pane>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should have transcluded', function() {
          var titleElement = element(by.model('title'));
          titleElement.clear();
          titleElement.sendKeys('TITLE');
          var textElement = element(by.model('text'));
          textElement.clear();
          textElement.sendKeys('TEXT');
          expect(element(by.binding('title')).getText()).toEqual('TITLE');
          expect(element(by.binding('text')).getText()).toEqual('TEXT');
        });
   </file>
   </example>
   *
   */
  var ngTranscludeDirective = ngDirective({
    link: function($scope, $element, $attrs, controller, $transclude) {
      if (!$transclude) {
        throw minErr('ngTransclude')('orphan',
            'Illegal use of ngTransclude directive in the template! ' +
            'No parent directive that requires a transclusion found. ' +
            'Element: {0}',
          startingTag($element));
      }

      $transclude(function(clone) {
        $element.empty();
        $element.append(clone);
      });
    }
  });

  /**
   * @ngdoc directive
   * @name script
   * @restrict E
   *
   * @description
   * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
   * template can be used by {@link ng.directive:ngInclude `ngInclude`},
   * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
   * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
   * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
   *
   * @param {string} type Must be set to `'text/ng-template'`.
   * @param {string} id Cache name of the template.
   *
   * @example
   <example>
   <file name="index.html">
   <script type="text/ng-template" id="/tpl.html">
   Content of the template.
   </script>

   <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
   <div id="tpl-content" ng-include src="currentTpl"></div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
   </file>
   </example>
   */
  var scriptDirective = ['$templateCache', function($templateCache) {
    return {
      restrict: 'E',
      terminal: true,
      compile: function(element, attr) {
        if (attr.type == 'text/ng-template') {
          var templateUrl = attr.id,
          // IE is not consistent, in scripts we have to read .text but in other nodes we have to read .textContent
            text = element[0].text;

          $templateCache.put(templateUrl, text);
        }
      }
    };
  }];

  var ngOptionsMinErr = minErr('ngOptions');
  /**
   * @ngdoc directive
   * @name select
   * @restrict E
   *
   * @description
   * HTML `SELECT` element with angular data-binding.
   *
   * # `ngOptions`
   *
   * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
   * elements for the `<select>` element using the array or object obtained by evaluating the
   * `ngOptions` comprehension_expression.
   *
   * When an item in the `<select>` menu is selected, the array element or object property
   * represented by the selected option will be bound to the model identified by the `ngModel`
   * directive.
   *
   * <div class="alert alert-warning">
   * **Note:** `ngModel` compares by reference, not value. This is important when binding to an
   * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).
   * </div>
   *
   * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
   * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
   * option. See example below for demonstration.
   *
   * <div class="alert alert-warning">
   * **Note:** `ngOptions` provides an iterator facility for the `<option>` element which should be used instead
   * of {@link ng.directive:ngRepeat ngRepeat} when you want the
   * `select` model to be bound to a non-string value. This is because an option element can only
   * be bound to string values at present.
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required The control is considered valid only if value is entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {comprehension_expression=} ngOptions in one of the following forms:
   *
   *   * for array data sources:
   *     * `label` **`for`** `value` **`in`** `array`
   *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
   *     * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`
   *     * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
   *   * for object data sources:
   *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
   *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
   *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
   *     * `select` **`as`** `label` **`group by`** `group`
   *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
   *
   * Where:
   *
   *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
   *   * `value`: local variable which will refer to each item in the `array` or each property value
   *      of `object` during iteration.
   *   * `key`: local variable which will refer to a property name in `object` during iteration.
   *   * `label`: The result of this expression will be the label for `<option>` element. The
   *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
   *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
   *      element. If not specified, `select` expression will default to `value`.
   *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
   *      DOM element.
   *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
   *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
   *     `value` variable (e.g. `value.propertyName`).
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function MyCntrl($scope) {
          $scope.colors = [
            {name:'black', shade:'dark'},
            {name:'white', shade:'light'},
            {name:'red', shade:'dark'},
            {name:'blue', shade:'dark'},
            {name:'yellow', shade:'light'}
          ];
          $scope.myColor = $scope.colors[2]; // red
        }
   </script>
   <div ng-controller="MyCntrl">
   <ul>
   <li ng-repeat="color in colors">
   Name: <input ng-model="color.name">
   [<a href ng-click="colors.splice($index, 1)">X</a>]
   </li>
   <li>
   [<a href ng-click="colors.push({})">add</a>]
   </li>
   </ul>
   <hr/>
   Color (null not allowed):
   <select ng-model="myColor" ng-options="color.name for color in colors"></select><br>

   Color (null allowed):
   <span  class="nullable">
   <select ng-model="myColor" ng-options="color.name for color in colors">
   <option value="">-- choose color --</option>
   </select>
   </span><br/>

   Color grouped by shade:
   <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
   </select><br/>


   Select <a href ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</a>.<br>
   <hr/>
   Currently selected: {{ {selected_color:myColor}  }}
   <div style="border:solid 1px black; height:20px"
   ng-style="{'background-color':myColor.name}">
   </div>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.select('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
   </file>
   </example>
   */

  var ngOptionsDirective = valueFn({ terminal: true });
// jshint maxlen: false
  var selectDirective = ['$compile', '$parse', function($compile,   $parse) {
    //000011111111110000000000022222222220000000000000000000003333333333000000000000004444444444444440000000005555555555555550000000666666666666666000000000000000777777777700000000000000000008888888888
    var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
      nullModelCtrl = {$setViewValue: noop};
// jshint maxlen: 100

    return {
      restrict: 'E',
      require: ['select', '?ngModel'],
      controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {
        var self = this,
          optionsMap = {},
          ngModelCtrl = nullModelCtrl,
          nullOption,
          unknownOption;


        self.databound = $attrs.ngModel;


        self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {
          ngModelCtrl = ngModelCtrl_;
          nullOption = nullOption_;
          unknownOption = unknownOption_;
        };


        self.addOption = function(value) {
          assertNotHasOwnProperty(value, '"option value"');
          optionsMap[value] = true;

          if (ngModelCtrl.$viewValue == value) {
            $element.val(value);
            if (unknownOption.parent()) unknownOption.remove();
          }
        };


        self.removeOption = function(value) {
          if (this.hasOption(value)) {
            delete optionsMap[value];
            if (ngModelCtrl.$viewValue == value) {
              this.renderUnknownOption(value);
            }
          }
        };


        self.renderUnknownOption = function(val) {
          var unknownVal = '? ' + hashKey(val) + ' ?';
          unknownOption.val(unknownVal);
          $element.prepend(unknownOption);
          $element.val(unknownVal);
          unknownOption.prop('selected', true); // needed for IE
        };


        self.hasOption = function(value) {
          return optionsMap.hasOwnProperty(value);
        };

        $scope.$on('$destroy', function() {
          // disable unknown option so that we don't do work when the whole select is being destroyed
          self.renderUnknownOption = noop;
        });
      }],

      link: function(scope, element, attr, ctrls) {
        // if ngModel is not defined, we don't need to do anything
        if (!ctrls[1]) return;

        var selectCtrl = ctrls[0],
          ngModelCtrl = ctrls[1],
          multiple = attr.multiple,
          optionsExp = attr.ngOptions,
          nullOption = false, // if false, user will not be able to select it (used by ngOptions)
          emptyOption,
        // we can't just jqLite('<option>') since jqLite is not smart enough
        // to create it in <select> and IE barfs otherwise.
          optionTemplate = jqLite(document.createElement('option')),
          optGroupTemplate =jqLite(document.createElement('optgroup')),
          unknownOption = optionTemplate.clone();

        // find "null" option
        for(var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
          if (children[i].value === '') {
            emptyOption = nullOption = children.eq(i);
            break;
          }
        }

        selectCtrl.init(ngModelCtrl, nullOption, unknownOption);

        // required validator
        if (multiple) {
          ngModelCtrl.$isEmpty = function(value) {
            return !value || value.length === 0;
          };
        }

        if (optionsExp) setupAsOptions(scope, element, ngModelCtrl);
        else if (multiple) setupAsMultiple(scope, element, ngModelCtrl);
        else setupAsSingle(scope, element, ngModelCtrl, selectCtrl);


        ////////////////////////////



        function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
          ngModelCtrl.$render = function() {
            var viewValue = ngModelCtrl.$viewValue;

            if (selectCtrl.hasOption(viewValue)) {
              if (unknownOption.parent()) unknownOption.remove();
              selectElement.val(viewValue);
              if (viewValue === '') emptyOption.prop('selected', true); // to make IE9 happy
            } else {
              if (isUndefined(viewValue) && emptyOption) {
                selectElement.val('');
              } else {
                selectCtrl.renderUnknownOption(viewValue);
              }
            }
          };

          selectElement.on('change', function() {
            scope.$apply(function() {
              if (unknownOption.parent()) unknownOption.remove();
              ngModelCtrl.$setViewValue(selectElement.val());
            });
          });
        }

        function setupAsMultiple(scope, selectElement, ctrl) {
          var lastView;
          ctrl.$render = function() {
            var items = new HashMap(ctrl.$viewValue);
            forEach(selectElement.find('option'), function(option) {
              option.selected = isDefined(items.get(option.value));
            });
          };

          // we have to do it on each watch since ngModel watches reference, but
          // we need to work of an array, so we need to see if anything was inserted/removed
          scope.$watch(function selectMultipleWatch() {
            if (!equals(lastView, ctrl.$viewValue)) {
              lastView = shallowCopy(ctrl.$viewValue);
              ctrl.$render();
            }
          });

          selectElement.on('change', function() {
            scope.$apply(function() {
              var array = [];
              forEach(selectElement.find('option'), function(option) {
                if (option.selected) {
                  array.push(option.value);
                }
              });
              ctrl.$setViewValue(array);
            });
          });
        }

        function setupAsOptions(scope, selectElement, ctrl) {
          var match;

          if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
            throw ngOptionsMinErr('iexp',
                "Expected expression in form of " +
                "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
                " but got '{0}'. Element: {1}",
              optionsExp, startingTag(selectElement));
          }

          var displayFn = $parse(match[2] || match[1]),
            valueName = match[4] || match[6],
            keyName = match[5],
            groupByFn = $parse(match[3] || ''),
            valueFn = $parse(match[2] ? match[1] : valueName),
            valuesFn = $parse(match[7]),
            track = match[8],
            trackFn = track ? $parse(match[8]) : null,
          // This is an array of array of existing option groups in DOM.
          // We try to reuse these if possible
          // - optionGroupsCache[0] is the options with no option group
          // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element
            optionGroupsCache = [[{element: selectElement, label:''}]];

          if (nullOption) {
            // compile the element since there might be bindings in it
            $compile(nullOption)(scope);

            // remove the class, which is added automatically because we recompile the element and it
            // becomes the compilation root
            nullOption.removeClass('ng-scope');

            // we need to remove it before calling selectElement.empty() because otherwise IE will
            // remove the label from the element. wtf?
            nullOption.remove();
          }

          // clear contents, we'll add what's needed based on the model
          selectElement.empty();

          selectElement.on('change', function() {
            scope.$apply(function() {
              var optionGroup,
                collection = valuesFn(scope) || [],
                locals = {},
                key, value, optionElement, index, groupIndex, length, groupLength, trackIndex;

              if (multiple) {
                value = [];
                for (groupIndex = 0, groupLength = optionGroupsCache.length;
                     groupIndex < groupLength;
                     groupIndex++) {
                  // list of options for that group. (first item has the parent)
                  optionGroup = optionGroupsCache[groupIndex];

                  for(index = 1, length = optionGroup.length; index < length; index++) {
                    if ((optionElement = optionGroup[index].element)[0].selected) {
                      key = optionElement.val();
                      if (keyName) locals[keyName] = key;
                      if (trackFn) {
                        for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                          locals[valueName] = collection[trackIndex];
                          if (trackFn(scope, locals) == key) break;
                        }
                      } else {
                        locals[valueName] = collection[key];
                      }
                      value.push(valueFn(scope, locals));
                    }
                  }
                }
              } else {
                key = selectElement.val();
                if (key == '?') {
                  value = undefined;
                } else if (key === ''){
                  value = null;
                } else {
                  if (trackFn) {
                    for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                      locals[valueName] = collection[trackIndex];
                      if (trackFn(scope, locals) == key) {
                        value = valueFn(scope, locals);
                        break;
                      }
                    }
                  } else {
                    locals[valueName] = collection[key];
                    if (keyName) locals[keyName] = key;
                    value = valueFn(scope, locals);
                  }
                }
                // Update the null option's selected property here so $render cleans it up correctly
                if (optionGroupsCache[0].length > 1) {
                  if (optionGroupsCache[0][1].id !== key) {
                    optionGroupsCache[0][1].selected = false;
                  }
                }
              }
              ctrl.$setViewValue(value);
            });
          });

          ctrl.$render = render;

          // TODO(vojta): can't we optimize this ?
          scope.$watch(render);

          function render() {
            // Temporary location for the option groups before we render them
            var optionGroups = {'':[]},
              optionGroupNames = [''],
              optionGroupName,
              optionGroup,
              option,
              existingParent, existingOptions, existingOption,
              modelValue = ctrl.$modelValue,
              values = valuesFn(scope) || [],
              keys = keyName ? sortedKeys(values) : values,
              key,
              groupLength, length,
              groupIndex, index,
              locals = {},
              selected,
              selectedSet = false, // nothing is selected yet
              lastElement,
              element,
              label;

            if (multiple) {
              if (trackFn && isArray(modelValue)) {
                selectedSet = new HashMap([]);
                for (var trackIndex = 0; trackIndex < modelValue.length; trackIndex++) {
                  locals[valueName] = modelValue[trackIndex];
                  selectedSet.put(trackFn(scope, locals), modelValue[trackIndex]);
                }
              } else {
                selectedSet = new HashMap(modelValue);
              }
            }

            // We now build up the list of options we need (we merge later)
            for (index = 0; length = keys.length, index < length; index++) {

              key = index;
              if (keyName) {
                key = keys[index];
                if ( key.charAt(0) === '$' ) continue;
                locals[keyName] = key;
              }

              locals[valueName] = values[key];

              optionGroupName = groupByFn(scope, locals) || '';
              if (!(optionGroup = optionGroups[optionGroupName])) {
                optionGroup = optionGroups[optionGroupName] = [];
                optionGroupNames.push(optionGroupName);
              }
              if (multiple) {
                selected = isDefined(
                  selectedSet.remove(trackFn ? trackFn(scope, locals) : valueFn(scope, locals))
                );
              } else {
                if (trackFn) {
                  var modelCast = {};
                  modelCast[valueName] = modelValue;
                  selected = trackFn(scope, modelCast) === trackFn(scope, locals);
                } else {
                  selected = modelValue === valueFn(scope, locals);
                }
                selectedSet = selectedSet || selected; // see if at least one item is selected
              }
              label = displayFn(scope, locals); // what will be seen by the user

              // doing displayFn(scope, locals) || '' overwrites zero values
              label = isDefined(label) ? label : '';
              optionGroup.push({
                // either the index into array or key from object
                id: trackFn ? trackFn(scope, locals) : (keyName ? keys[index] : index),
                label: label,
                selected: selected                   // determine if we should be selected
              });
            }
            if (!multiple) {
              if (nullOption || modelValue === null) {
                // insert null option if we have a placeholder, or the model is null
                optionGroups[''].unshift({id:'', label:'', selected:!selectedSet});
              } else if (!selectedSet) {
                // option could not be found, we have to insert the undefined item
                optionGroups[''].unshift({id:'?', label:'', selected:true});
              }
            }

            // Now we need to update the list of DOM nodes to match the optionGroups we computed above
            for (groupIndex = 0, groupLength = optionGroupNames.length;
                 groupIndex < groupLength;
                 groupIndex++) {
              // current option group name or '' if no group
              optionGroupName = optionGroupNames[groupIndex];

              // list of options for that group. (first item has the parent)
              optionGroup = optionGroups[optionGroupName];

              if (optionGroupsCache.length <= groupIndex) {
                // we need to grow the optionGroups
                existingParent = {
                  element: optGroupTemplate.clone().attr('label', optionGroupName),
                  label: optionGroup.label
                };
                existingOptions = [existingParent];
                optionGroupsCache.push(existingOptions);
                selectElement.append(existingParent.element);
              } else {
                existingOptions = optionGroupsCache[groupIndex];
                existingParent = existingOptions[0];  // either SELECT (no group) or OPTGROUP element

                // update the OPTGROUP label if not the same.
                if (existingParent.label != optionGroupName) {
                  existingParent.element.attr('label', existingParent.label = optionGroupName);
                }
              }

              lastElement = null;  // start at the beginning
              for(index = 0, length = optionGroup.length; index < length; index++) {
                option = optionGroup[index];
                if ((existingOption = existingOptions[index+1])) {
                  // reuse elements
                  lastElement = existingOption.element;
                  if (existingOption.label !== option.label) {
                    lastElement.text(existingOption.label = option.label);
                  }
                  if (existingOption.id !== option.id) {
                    lastElement.val(existingOption.id = option.id);
                  }
                  // lastElement.prop('selected') provided by jQuery has side-effects
                  if (existingOption.selected !== option.selected) {
                    lastElement.prop('selected', (existingOption.selected = option.selected));
                  }
                } else {
                  // grow elements

                  // if it's a null option
                  if (option.id === '' && nullOption) {
                    // put back the pre-compiled element
                    element = nullOption;
                  } else {
                    // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but
                    // in this version of jQuery on some browser the .text() returns a string
                    // rather then the element.
                    (element = optionTemplate.clone())
                      .val(option.id)
                      .attr('selected', option.selected)
                      .text(option.label);
                  }

                  existingOptions.push(existingOption = {
                    element: element,
                    label: option.label,
                    id: option.id,
                    selected: option.selected
                  });
                  if (lastElement) {
                    lastElement.after(element);
                  } else {
                    existingParent.element.append(element);
                  }
                  lastElement = element;
                }
              }
              // remove any excessive OPTIONs in a group
              index++; // increment since the existingOptions[0] is parent element not OPTION
              while(existingOptions.length > index) {
                existingOptions.pop().element.remove();
              }
            }
            // remove any excessive OPTGROUPs from select
            while(optionGroupsCache.length > groupIndex) {
              optionGroupsCache.pop()[0].element.remove();
            }
          }
        }
      }
    };
  }];

  var optionDirective = ['$interpolate', function($interpolate) {
    var nullSelectCtrl = {
      addOption: noop,
      removeOption: noop
    };

    return {
      restrict: 'E',
      priority: 100,
      compile: function(element, attr) {
        if (isUndefined(attr.value)) {
          var interpolateFn = $interpolate(element.text(), true);
          if (!interpolateFn) {
            attr.$set('value', element.text());
          }
        }

        return function (scope, element, attr) {
          var selectCtrlName = '$selectController',
            parent = element.parent(),
            selectCtrl = parent.data(selectCtrlName) ||
              parent.parent().data(selectCtrlName); // in case we are in optgroup

          if (selectCtrl && selectCtrl.databound) {
            // For some reason Opera defaults to true and if not overridden this messes up the repeater.
            // We don't want the view to drive the initialization of the model anyway.
            element.prop('selected', false);
          } else {
            selectCtrl = nullSelectCtrl;
          }

          if (interpolateFn) {
            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
              attr.$set('value', newVal);
              if (newVal !== oldVal) selectCtrl.removeOption(oldVal);
              selectCtrl.addOption(newVal);
            });
          } else {
            selectCtrl.addOption(attr.value);
          }

          element.on('$destroy', function() {
            selectCtrl.removeOption(attr.value);
          });
        };
      }
    };
  }];

  var styleDirective = valueFn({
    restrict: 'E',
    terminal: true
  });

  if (window.angular.bootstrap) {
    //AngularJS is already loaded, so we can return here...
    console.log('WARNING: Tried to load angular more than once.');
    return;
  }

  //try to bind to jquery now so that one can write angular.element().read()
  //but we will rebind on bootstrap again.
  bindJQuery();

  publishExternalAPI(angular);

  jqLite(document).ready(function() {
    angularInit(document, bootstrap);
  });

})(window, document);

!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}.ng-hide-add-active,.ng-hide-remove{display:block!important;}</style>');
/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/**
 * @license AngularJS v1.2.17
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

  /* jshint maxlen: false */

  /**
   * @ngdoc module
   * @name ngAnimate
   * @description
   *
   * # ngAnimate
   *
   * The `ngAnimate` module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.
   *
   *
   * <div doc-module-components="ngAnimate"></div>
   *
   * # Usage
   *
   * To see animations in action, all that is required is to define the appropriate CSS classes
   * or to register a JavaScript animation via the myModule.animation() function. The directives that support animation automatically are:
   * `ngRepeat`, `ngInclude`, `ngIf`, `ngSwitch`, `ngShow`, `ngHide`, `ngView` and `ngClass`. Custom directives can take advantage of animation
   * by using the `$animate` service.
   *
   * Below is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:
   *
   * | Directive                                                 | Supported Animations                               |
   * |---------------------------------------------------------- |----------------------------------------------------|
   * | {@link ng.directive:ngRepeat#usage_animations ngRepeat}         | enter, leave and move                              |
   * | {@link ngRoute.directive:ngView#usage_animations ngView}        | enter and leave                                    |
   * | {@link ng.directive:ngInclude#usage_animations ngInclude}       | enter and leave                                    |
   * | {@link ng.directive:ngSwitch#usage_animations ngSwitch}         | enter and leave                                    |
   * | {@link ng.directive:ngIf#usage_animations ngIf}                 | enter and leave                                    |
   * | {@link ng.directive:ngClass#usage_animations ngClass}           | add and remove                                     |
   * | {@link ng.directive:ngShow#usage_animations ngShow & ngHide}    | add and remove (the ng-hide class value)           |
   * | {@link ng.directive:form#usage_animations form}                 | add and remove (dirty, pristine, valid, invalid & all other validations)                |
   * | {@link ng.directive:ngModel#usage_animations ngModel}           | add and remove (dirty, pristine, valid, invalid & all other validations)                |
   *
   * You can find out more information about animations upon visiting each directive page.
   *
   * Below is an example of how to apply animations to a directive that supports animation hooks:
   *
   * ```html
   * <style type="text/css">
   * .slide.ng-enter, .slide.ng-leave {
 *   -webkit-transition:0.5s linear all;
 *   transition:0.5s linear all;
 * }
   *
   * .slide.ng-enter { }        /&#42; starting animations for enter &#42;/
   * .slide.ng-enter-active { } /&#42; terminal animations for enter &#42;/
   * .slide.ng-leave { }        /&#42; starting animations for leave &#42;/
   * .slide.ng-leave-active { } /&#42; terminal animations for leave &#42;/
   * </style>
   *
   * <!--
   * the animate service will automatically add .ng-enter and .ng-leave to the element
   * to trigger the CSS transition/animations
   * -->
   * <ANY class="slide" ng-include="..."></ANY>
   * ```
   *
   * Keep in mind that if an animation is running, any child elements cannot be animated until the parent element's
   * animation has completed.
   *
   * <h2>CSS-defined Animations</h2>
   * The animate service will automatically apply two CSS classes to the animated element and these two CSS classes
   * are designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported
   * and can be used to play along with this naming structure.
   *
   * The following code below demonstrates how to perform animations using **CSS transitions** with Angular:
   *
   * ```html
   * <style type="text/css">
   * /&#42;
   *  The animate class is apart of the element and the ng-enter class
   *  is attached to the element once the enter animation event is triggered
   * &#42;/
   * .reveal-animation.ng-enter {
 *  -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/
 *  transition: 1s linear all; /&#42; All other modern browsers and IE10+ &#42;/
 *
 *  /&#42; The animation preparation code &#42;/
 *  opacity: 0;
 * }
   *
   * /&#42;
   *  Keep in mind that you want to combine both CSS
   *  classes together to avoid any CSS-specificity
   *  conflicts
   * &#42;/
   * .reveal-animation.ng-enter.ng-enter-active {
 *  /&#42; The animation code itself &#42;/
 *  opacity: 1;
 * }
   * </style>
   *
   * <div class="view-container">
   *   <div ng-view class="reveal-animation"></div>
   * </div>
   * ```
   *
   * The following code below demonstrates how to perform animations using **CSS animations** with Angular:
   *
   * ```html
   * <style type="text/css">
   * .reveal-animation.ng-enter {
 *   -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/
 *   animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/
 * }
   * @-webkit-keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
   * @keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
   * </style>
   *
   * <div class="view-container">
   *   <div ng-view class="reveal-animation"></div>
   * </div>
   * ```
   *
   * Both CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.
   *
   * Upon DOM mutation, the event class is added first (something like `ng-enter`), then the browser prepares itself to add
   * the active class (in this case `ng-enter-active`) which then triggers the animation. The animation module will automatically
   * detect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be
   * removed from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end
   * immediately resulting in a DOM element that is at its final state. This final state is when the DOM element
   * has no CSS transition/animation classes applied to it.
   *
   * <h3>CSS Staggering Animations</h3>
   * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
   * curtain-like effect. The ngAnimate module, as of 1.2.0, supports staggering animations and the stagger effect can be
   * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
   * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
   * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
   *
   * ```css
   * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   -webkit-transition: 1s linear all;
 *   transition: 1s linear all;
 *   opacity:0;
 * }
   * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   -webkit-transition-delay: 0.1s;
 *   transition-delay: 0.1s;
 *
 *   /&#42; in case the stagger doesn't work then these two values
 *    must be set to 0 to avoid an accidental CSS inheritance &#42;/
 *   -webkit-transition-duration: 0s;
 *   transition-duration: 0s;
 * }
   * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
   * ```
   *
   * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
   * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
   * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
   * will also be reset if more than 10ms has passed after the last animation has been fired.
   *
   * The following code will issue the **ng-leave-stagger** event on the element provided:
   *
   * ```js
   * var kids = parent.children();
   *
   * $animate.leave(kids[0]); //stagger index=0
   * $animate.leave(kids[1]); //stagger index=1
   * $animate.leave(kids[2]); //stagger index=2
   * $animate.leave(kids[3]); //stagger index=3
   * $animate.leave(kids[4]); //stagger index=4
   *
   * $timeout(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 * }, 100, false);
   * ```
   *
   * Stagger animations are currently only supported within CSS-defined animations.
   *
   * <h2>JavaScript-defined Animations</h2>
   * In the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not
   * yet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.
   *
   * ```js
   * //!annotate="YourApp" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.
   * var ngModule = angular.module('YourApp', ['ngAnimate']);
   * ngModule.animation('.my-crazy-animation', function() {
 *   return {
 *     enter: function(element, done) {
 *       //run the animation here and call done when the animation is complete
 *       return function(cancelled) {
 *         //this (optional) function will be called when the animation
 *         //completes or when the animation is cancelled (the cancelled
 *         //flag will be set to true if cancelled).
 *       };
 *     },
 *     leave: function(element, done) { },
 *     move: function(element, done) { },
 *
 *     //animation that can be triggered before the class is added
 *     beforeAddClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is added
 *     addClass: function(element, className, done) { },
 *
 *     //animation that can be triggered before the class is removed
 *     beforeRemoveClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is removed
 *     removeClass: function(element, className, done) { }
 *   };
 * });
   * ```
   *
   * JavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run
   * a javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits
   * the element's CSS class attribute value and then run the matching animation event function (if found).
   * In other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function will
   * be executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).
   *
   * Within a JavaScript animation, an object containing various event callback animation functions is expected to be returned.
   * As explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run,
   * and the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation
   * or transition code that is defined via a stylesheet).
   *
   */

  angular.module('ngAnimate', ['ng'])

  /**
   * @ngdoc provider
   * @name $animateProvider
   * @description
   *
   * The `$animateProvider` allows developers to register JavaScript animation event handlers directly inside of a module.
   * When an animation is triggered, the $animate service will query the $animate service to find any animations that match
   * the provided name value.
   *
   * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
   *
   * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
   *
   */

    //this private service is only used within CSS-enabled animations
    //IE8 + IE9 do not support rAF natively, but that is fine since they
    //also don't support transitions and keyframes which means that the code
    //below will never be used by the two browsers.
    .factory('$$animateReflow', ['$$rAF', '$document', function($$rAF, $document) {
      var bod = $document[0].body;
      return function(fn) {
        //the returned function acts as the cancellation function
        return $$rAF(function() {
          //the line below will force the browser to perform a repaint
          //so that all the animated elements within the animation frame
          //will be properly updated and drawn on screen. This is
          //required to perform multi-class CSS based animations with
          //Firefox. DO NOT REMOVE THIS LINE.
          var a = bod.offsetWidth + 1;
          fn();
        });
      };
    }])

    .config(['$provide', '$animateProvider', function($provide, $animateProvider) {
      var noop = angular.noop;
      var forEach = angular.forEach;
      var selectors = $animateProvider.$$selectors;

      var ELEMENT_NODE = 1;
      var NG_ANIMATE_STATE = '$$ngAnimateState';
      var NG_ANIMATE_CLASS_NAME = 'ng-animate';
      var rootAnimateState = {running: true};

      function extractElementNode(element) {
        for(var i = 0; i < element.length; i++) {
          var elm = element[i];
          if(elm.nodeType == ELEMENT_NODE) {
            return elm;
          }
        }
      }

      function prepareElement(element) {
        return element && angular.element(element);
      }

      function stripCommentsFromElement(element) {
        return angular.element(extractElementNode(element));
      }

      function isMatchingElement(elm1, elm2) {
        return extractElementNode(elm1) == extractElementNode(elm2);
      }

      $provide.decorator('$animate', ['$delegate', '$injector', '$sniffer', '$rootElement', '$$asyncCallback', '$rootScope', '$document',
        function($delegate,   $injector,   $sniffer,   $rootElement,   $$asyncCallback,    $rootScope,   $document) {

          var globalAnimationCounter = 0;
          $rootElement.data(NG_ANIMATE_STATE, rootAnimateState);

          // disable animations during bootstrap, but once we bootstrapped, wait again
          // for another digest until enabling animations. The reason why we digest twice
          // is because all structural animations (enter, leave and move) all perform a
          // post digest operation before animating. If we only wait for a single digest
          // to pass then the structural animation would render its animation on page load.
          // (which is what we're trying to avoid when the application first boots up.)
          $rootScope.$$postDigest(function() {
            $rootScope.$$postDigest(function() {
              rootAnimateState.running = false;
            });
          });

          var classNameFilter = $animateProvider.classNameFilter();
          var isAnimatableClassName = !classNameFilter
            ? function() { return true; }
            : function(className) {
            return classNameFilter.test(className);
          };

          function lookup(name) {
            if (name) {
              var matches = [],
                flagMap = {},
                classes = name.substr(1).split('.');

              //the empty string value is the default animation
              //operation which performs CSS transition and keyframe
              //animations sniffing. This is always included for each
              //element animation procedure if the browser supports
              //transitions and/or keyframe animations. The default
              //animation is added to the top of the list to prevent
              //any previous animations from affecting the element styling
              //prior to the element being animated.
              if ($sniffer.transitions || $sniffer.animations) {
                matches.push($injector.get(selectors['']));
              }

              for(var i=0; i < classes.length; i++) {
                var klass = classes[i],
                  selectorFactoryName = selectors[klass];
                if(selectorFactoryName && !flagMap[klass]) {
                  matches.push($injector.get(selectorFactoryName));
                  flagMap[klass] = true;
                }
              }
              return matches;
            }
          }

          function animationRunner(element, animationEvent, className) {
            //transcluded directives may sometimes fire an animation using only comment nodes
            //best to catch this early on to prevent any animation operations from occurring
            var node = element[0];
            if(!node) {
              return;
            }

            var isSetClassOperation = animationEvent == 'setClass';
            var isClassBased = isSetClassOperation ||
              animationEvent == 'addClass' ||
              animationEvent == 'removeClass';

            var classNameAdd, classNameRemove;
            if(angular.isArray(className)) {
              classNameAdd = className[0];
              classNameRemove = className[1];
              className = classNameAdd + ' ' + classNameRemove;
            }

            var currentClassName = element.attr('class');
            var classes = currentClassName + ' ' + className;
            if(!isAnimatableClassName(classes)) {
              return;
            }

            var beforeComplete = noop,
              beforeCancel = [],
              before = [],
              afterComplete = noop,
              afterCancel = [],
              after = [];

            var animationLookup = (' ' + classes).replace(/\s+/g,'.');
            forEach(lookup(animationLookup), function(animationFactory) {
              var created = registerAnimation(animationFactory, animationEvent);
              if(!created && isSetClassOperation) {
                registerAnimation(animationFactory, 'addClass');
                registerAnimation(animationFactory, 'removeClass');
              }
            });

            function registerAnimation(animationFactory, event) {
              var afterFn = animationFactory[event];
              var beforeFn = animationFactory['before' + event.charAt(0).toUpperCase() + event.substr(1)];
              if(afterFn || beforeFn) {
                if(event == 'leave') {
                  beforeFn = afterFn;
                  //when set as null then animation knows to skip this phase
                  afterFn = null;
                }
                after.push({
                  event : event, fn : afterFn
                });
                before.push({
                  event : event, fn : beforeFn
                });
                return true;
              }
            }

            function run(fns, cancellations, allCompleteFn) {
              var animations = [];
              forEach(fns, function(animation) {
                animation.fn && animations.push(animation);
              });

              var count = 0;
              function afterAnimationComplete(index) {
                if(cancellations) {
                  (cancellations[index] || noop)();
                  if(++count < animations.length) return;
                  cancellations = null;
                }
                allCompleteFn();
              }

              //The code below adds directly to the array in order to work with
              //both sync and async animations. Sync animations are when the done()
              //operation is called right away. DO NOT REFACTOR!
              forEach(animations, function(animation, index) {
                var progress = function() {
                  afterAnimationComplete(index);
                };
                switch(animation.event) {
                  case 'setClass':
                    cancellations.push(animation.fn(element, classNameAdd, classNameRemove, progress));
                    break;
                  case 'addClass':
                    cancellations.push(animation.fn(element, classNameAdd || className,     progress));
                    break;
                  case 'removeClass':
                    cancellations.push(animation.fn(element, classNameRemove || className,  progress));
                    break;
                  default:
                    cancellations.push(animation.fn(element, progress));
                    break;
                }
              });

              if(cancellations && cancellations.length === 0) {
                allCompleteFn();
              }
            }

            return {
              node : node,
              event : animationEvent,
              className : className,
              isClassBased : isClassBased,
              isSetClassOperation : isSetClassOperation,
              before : function(allCompleteFn) {
                beforeComplete = allCompleteFn;
                run(before, beforeCancel, function() {
                  beforeComplete = noop;
                  allCompleteFn();
                });
              },
              after : function(allCompleteFn) {
                afterComplete = allCompleteFn;
                run(after, afterCancel, function() {
                  afterComplete = noop;
                  allCompleteFn();
                });
              },
              cancel : function() {
                if(beforeCancel) {
                  forEach(beforeCancel, function(cancelFn) {
                    (cancelFn || noop)(true);
                  });
                  beforeComplete(true);
                }
                if(afterCancel) {
                  forEach(afterCancel, function(cancelFn) {
                    (cancelFn || noop)(true);
                  });
                  afterComplete(true);
                }
              }
            };
          }

          /**
           * @ngdoc service
           * @name $animate
           * @kind function
           *
           * @description
           * The `$animate` service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations.
           * When any of these operations are run, the $animate service
           * will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object)
           * as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.
           *
           * The `$animate` service is used behind the scenes with pre-existing directives and animation with these directives
           * will work out of the box without any extra configuration.
           *
           * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
           *
           * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
           *
           */
          return {
            /**
             * @ngdoc method
             * @name $animate#enter
             * @kind function
             *
             * @description
             * Appends the element to the parentElement element that resides in the document and then runs the enter animation. Once
             * the animation is started, the following CSS classes will be present on the element for the duration of the animation:
             *
             * Below is a breakdown of each step that occurs during enter animation:
             *
             * | Animation Step                                                                               | What the element class attribute looks like |
             * |----------------------------------------------------------------------------------------------|---------------------------------------------|
             * | 1. $animate.enter(...) is called                                                             | class="my-animation"                        |
             * | 2. element is inserted into the parentElement element or beside the afterElement element     | class="my-animation"                        |
             * | 3. $animate runs any JavaScript-defined animations on the element                            | class="my-animation ng-animate"             |
             * | 4. the .ng-enter class is added to the element                                               | class="my-animation ng-animate ng-enter"    |
             * | 5. $animate scans the element styles to get the CSS transition/animation duration and delay  | class="my-animation ng-animate ng-enter"    |
             * | 6. $animate waits for 10ms (this performs a reflow)                                          | class="my-animation ng-animate ng-enter"    |
             * | 7. the .ng-enter-active and .ng-animate-active classes are added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active ng-enter ng-enter-active" |
             * | 8. $animate waits for X milliseconds for the animation to complete                           | class="my-animation ng-animate ng-animate-active ng-enter ng-enter-active" |
             * | 9. The animation ends and all generated CSS classes are removed from the element             | class="my-animation"                        |
             * | 10. The doneCallback() callback is fired (if provided)                                       | class="my-animation"                        |
             *
             * @param {DOMElement} element the element that will be the focus of the enter animation
             * @param {DOMElement} parentElement the parent element of the element that will be the focus of the enter animation
             * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the enter animation
             * @param {function()=} doneCallback the callback function that will be called once the animation is complete
             */
            enter : function(element, parentElement, afterElement, doneCallback) {
              element = angular.element(element);
              parentElement = prepareElement(parentElement);
              afterElement = prepareElement(afterElement);

              this.enabled(false, element);
              $delegate.enter(element, parentElement, afterElement);
              $rootScope.$$postDigest(function() {
                element = stripCommentsFromElement(element);
                performAnimation('enter', 'ng-enter', element, parentElement, afterElement, noop, doneCallback);
              });
            },

            /**
             * @ngdoc method
             * @name $animate#leave
             * @kind function
             *
             * @description
             * Runs the leave animation operation and, upon completion, removes the element from the DOM. Once
             * the animation is started, the following CSS classes will be added for the duration of the animation:
             *
             * Below is a breakdown of each step that occurs during leave animation:
             *
             * | Animation Step                                                                               | What the element class attribute looks like |
             * |----------------------------------------------------------------------------------------------|---------------------------------------------|
             * | 1. $animate.leave(...) is called                                                             | class="my-animation"                        |
             * | 2. $animate runs any JavaScript-defined animations on the element                            | class="my-animation ng-animate"             |
             * | 3. the .ng-leave class is added to the element                                               | class="my-animation ng-animate ng-leave"    |
             * | 4. $animate scans the element styles to get the CSS transition/animation duration and delay  | class="my-animation ng-animate ng-leave"    |
             * | 5. $animate waits for 10ms (this performs a reflow)                                          | class="my-animation ng-animate ng-leave"    |
             * | 6. the .ng-leave-active and .ng-animate-active classes is added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active ng-leave ng-leave-active" |
             * | 7. $animate waits for X milliseconds for the animation to complete                           | class="my-animation ng-animate ng-animate-active ng-leave ng-leave-active" |
             * | 8. The animation ends and all generated CSS classes are removed from the element             | class="my-animation"                        |
             * | 9. The element is removed from the DOM                                                       | ...                                         |
             * | 10. The doneCallback() callback is fired (if provided)                                       | ...                                         |
             *
             * @param {DOMElement} element the element that will be the focus of the leave animation
             * @param {function()=} doneCallback the callback function that will be called once the animation is complete
             */
            leave : function(element, doneCallback) {
              element = angular.element(element);
              cancelChildAnimations(element);
              this.enabled(false, element);
              $rootScope.$$postDigest(function() {
                performAnimation('leave', 'ng-leave', stripCommentsFromElement(element), null, null, function() {
                  $delegate.leave(element);
                }, doneCallback);
              });
            },

            /**
             * @ngdoc method
             * @name $animate#move
             * @kind function
             *
             * @description
             * Fires the move DOM operation. Just before the animation starts, the animate service will either append it into the parentElement container or
             * add the element directly after the afterElement element if present. Then the move animation will be run. Once
             * the animation is started, the following CSS classes will be added for the duration of the animation:
             *
             * Below is a breakdown of each step that occurs during move animation:
             *
             * | Animation Step                                                                               | What the element class attribute looks like |
             * |----------------------------------------------------------------------------------------------|---------------------------------------------|
             * | 1. $animate.move(...) is called                                                              | class="my-animation"                        |
             * | 2. element is moved into the parentElement element or beside the afterElement element        | class="my-animation"                        |
             * | 3. $animate runs any JavaScript-defined animations on the element                            | class="my-animation ng-animate"             |
             * | 4. the .ng-move class is added to the element                                                | class="my-animation ng-animate ng-move"     |
             * | 5. $animate scans the element styles to get the CSS transition/animation duration and delay  | class="my-animation ng-animate ng-move"     |
             * | 6. $animate waits for 10ms (this performs a reflow)                                          | class="my-animation ng-animate ng-move"     |
             * | 7. the .ng-move-active and .ng-animate-active classes is added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active ng-move ng-move-active" |
             * | 8. $animate waits for X milliseconds for the animation to complete                           | class="my-animation ng-animate ng-animate-active ng-move ng-move-active" |
             * | 9. The animation ends and all generated CSS classes are removed from the element             | class="my-animation"                        |
             * | 10. The doneCallback() callback is fired (if provided)                                       | class="my-animation"                        |
             *
             * @param {DOMElement} element the element that will be the focus of the move animation
             * @param {DOMElement} parentElement the parentElement element of the element that will be the focus of the move animation
             * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the move animation
             * @param {function()=} doneCallback the callback function that will be called once the animation is complete
             */
            move : function(element, parentElement, afterElement, doneCallback) {
              element = angular.element(element);
              parentElement = prepareElement(parentElement);
              afterElement = prepareElement(afterElement);

              cancelChildAnimations(element);
              this.enabled(false, element);
              $delegate.move(element, parentElement, afterElement);
              $rootScope.$$postDigest(function() {
                element = stripCommentsFromElement(element);
                performAnimation('move', 'ng-move', element, parentElement, afterElement, noop, doneCallback);
              });
            },

            /**
             * @ngdoc method
             * @name $animate#addClass
             *
             * @description
             * Triggers a custom animation event based off the className variable and then attaches the className value to the element as a CSS class.
             * Unlike the other animation methods, the animate service will suffix the className value with {@type -add} in order to provide
             * the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if no CSS transitions
             * or keyframes are defined on the -add or base CSS class).
             *
             * Below is a breakdown of each step that occurs during addClass animation:
             *
             * | Animation Step                                                                                 | What the element class attribute looks like |
             * |------------------------------------------------------------------------------------------------|---------------------------------------------|
             * | 1. $animate.addClass(element, 'super') is called                                               | class="my-animation"                        |
             * | 2. $animate runs any JavaScript-defined animations on the element                              | class="my-animation ng-animate"             |
             * | 3. the .super-add class are added to the element                                               | class="my-animation ng-animate super-add"   |
             * | 4. $animate scans the element styles to get the CSS transition/animation duration and delay    | class="my-animation ng-animate super-add"   |
             * | 5. $animate waits for 10ms (this performs a reflow)                                            | class="my-animation ng-animate super-add"   |
             * | 6. the .super, .super-add-active and .ng-animate-active classes are added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active super super-add super-add-active"          |
             * | 7. $animate waits for X milliseconds for the animation to complete                             | class="my-animation super super-add super-add-active"  |
             * | 8. The animation ends and all generated CSS classes are removed from the element               | class="my-animation super"                  |
             * | 9. The super class is kept on the element                                                      | class="my-animation super"                  |
             * | 10. The doneCallback() callback is fired (if provided)                                         | class="my-animation super"                  |
             *
             * @param {DOMElement} element the element that will be animated
             * @param {string} className the CSS class that will be added to the element and then animated
             * @param {function()=} doneCallback the callback function that will be called once the animation is complete
             */
            addClass : function(element, className, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('addClass', className, element, null, null, function() {
                $delegate.addClass(element, className);
              }, doneCallback);
            },

            /**
             * @ngdoc method
             * @name $animate#removeClass
             *
             * @description
             * Triggers a custom animation event based off the className variable and then removes the CSS class provided by the className value
             * from the element. Unlike the other animation methods, the animate service will suffix the className value with {@type -remove} in
             * order to provide the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if
             * no CSS transitions or keyframes are defined on the -remove or base CSS classes).
             *
             * Below is a breakdown of each step that occurs during removeClass animation:
             *
             * | Animation Step                                                                                | What the element class attribute looks like     |
             * |-----------------------------------------------------------------------------------------------|---------------------------------------------|
             * | 1. $animate.removeClass(element, 'super') is called                                           | class="my-animation super"                  |
             * | 2. $animate runs any JavaScript-defined animations on the element                             | class="my-animation super ng-animate"       |
             * | 3. the .super-remove class are added to the element                                           | class="my-animation super ng-animate super-remove"|
             * | 4. $animate scans the element styles to get the CSS transition/animation duration and delay   | class="my-animation super ng-animate super-remove"   |
             * | 5. $animate waits for 10ms (this performs a reflow)                                           | class="my-animation super ng-animate super-remove"   |
             * | 6. the .super-remove-active and .ng-animate-active classes are added and .super is removed (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active super-remove super-remove-active"          |
             * | 7. $animate waits for X milliseconds for the animation to complete                            | class="my-animation ng-animate ng-animate-active super-remove super-remove-active"   |
             * | 8. The animation ends and all generated CSS classes are removed from the element              | class="my-animation"                        |
             * | 9. The doneCallback() callback is fired (if provided)                                         | class="my-animation"                        |
             *
             *
             * @param {DOMElement} element the element that will be animated
             * @param {string} className the CSS class that will be animated and then removed from the element
             * @param {function()=} doneCallback the callback function that will be called once the animation is complete
             */
            removeClass : function(element, className, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('removeClass', className, element, null, null, function() {
                $delegate.removeClass(element, className);
              }, doneCallback);
            },

            /**
             *
             * @ngdoc function
             * @name $animate#setClass
             * @function
             * @description Adds and/or removes the given CSS classes to and from the element.
             * Once complete, the done() callback will be fired (if provided).
             * @param {DOMElement} element the element which will its CSS classes changed
             *   removed from it
             * @param {string} add the CSS classes which will be added to the element
             * @param {string} remove the CSS class which will be removed from the element
             * @param {Function=} done the callback function (if provided) that will be fired after the
             *   CSS classes have been set on the element
             */
            setClass : function(element, add, remove, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('setClass', [add, remove], element, null, null, function() {
                $delegate.setClass(element, add, remove);
              }, doneCallback);
            },

            /**
             * @ngdoc method
             * @name $animate#enabled
             * @kind function
             *
             * @param {boolean=} value If provided then set the animation on or off.
             * @param {DOMElement} element If provided then the element will be used to represent the enable/disable operation
             * @return {boolean} Current animation state.
             *
             * @description
             * Globally enables/disables animations.
             *
             */
            enabled : function(value, element) {
              switch(arguments.length) {
                case 2:
                  if(value) {
                    cleanup(element);
                  } else {
                    var data = element.data(NG_ANIMATE_STATE) || {};
                    data.disabled = true;
                    element.data(NG_ANIMATE_STATE, data);
                  }
                  break;

                case 1:
                  rootAnimateState.disabled = !value;
                  break;

                default:
                  value = !rootAnimateState.disabled;
                  break;
              }
              return !!value;
            }
          };

          /*
           all animations call this shared animation triggering function internally.
           The animationEvent variable refers to the JavaScript animation event that will be triggered
           and the className value is the name of the animation that will be applied within the
           CSS code. Element, parentElement and afterElement are provided DOM elements for the animation
           and the onComplete callback will be fired once the animation is fully complete.
           */
          function performAnimation(animationEvent, className, element, parentElement, afterElement, domOperation, doneCallback) {

            var runner = animationRunner(element, animationEvent, className);
            if(!runner) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              closeAnimation();
              return;
            }

            className = runner.className;
            var elementEvents = angular.element._data(runner.node);
            elementEvents = elementEvents && elementEvents.events;

            if (!parentElement) {
              parentElement = afterElement ? afterElement.parent() : element.parent();
            }

            var ngAnimateState  = element.data(NG_ANIMATE_STATE) || {};
            var runningAnimations     = ngAnimateState.active || {};
            var totalActiveAnimations = ngAnimateState.totalActive || 0;
            var lastAnimation         = ngAnimateState.last;

            //only allow animations if the currently running animation is not structural
            //or if there is no animation running at all
            var skipAnimations = runner.isClassBased ?
              ngAnimateState.disabled || (lastAnimation && !lastAnimation.isClassBased) :
              false;

            //skip the animation if animations are disabled, a parent is already being animated,
            //the element is not currently attached to the document body or then completely close
            //the animation if any matching animations are not found at all.
            //NOTE: IE8 + IE9 should close properly (run closeAnimation()) in case an animation was found.
            if (skipAnimations || animationsDisabled(element, parentElement)) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              closeAnimation();
              return;
            }

            var skipAnimation = false;
            if(totalActiveAnimations > 0) {
              var animationsToCancel = [];
              if(!runner.isClassBased) {
                if(animationEvent == 'leave' && runningAnimations['ng-leave']) {
                  skipAnimation = true;
                } else {
                  //cancel all animations when a structural animation takes place
                  for(var klass in runningAnimations) {
                    animationsToCancel.push(runningAnimations[klass]);
                    cleanup(element, klass);
                  }
                  runningAnimations = {};
                  totalActiveAnimations = 0;
                }
              } else if(lastAnimation.event == 'setClass') {
                animationsToCancel.push(lastAnimation);
                cleanup(element, className);
              }
              else if(runningAnimations[className]) {
                var current = runningAnimations[className];
                if(current.event == animationEvent) {
                  skipAnimation = true;
                } else {
                  animationsToCancel.push(current);
                  cleanup(element, className);
                }
              }

              if(animationsToCancel.length > 0) {
                forEach(animationsToCancel, function(operation) {
                  operation.cancel();
                });
              }
            }

            if(runner.isClassBased && !runner.isSetClassOperation && !skipAnimation) {
              skipAnimation = (animationEvent == 'addClass') == element.hasClass(className); //opposite of XOR
            }

            if(skipAnimation) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              fireDoneCallbackAsync();
              return;
            }

            if(animationEvent == 'leave') {
              //there's no need to ever remove the listener since the element
              //will be removed (destroyed) after the leave animation ends or
              //is cancelled midway
              element.one('$destroy', function(e) {
                var element = angular.element(this);
                var state = element.data(NG_ANIMATE_STATE);
                if(state) {
                  var activeLeaveAnimation = state.active['ng-leave'];
                  if(activeLeaveAnimation) {
                    activeLeaveAnimation.cancel();
                    cleanup(element, 'ng-leave');
                  }
                }
              });
            }

            //the ng-animate class does nothing, but it's here to allow for
            //parent animations to find and cancel child animations when needed
            element.addClass(NG_ANIMATE_CLASS_NAME);

            var localAnimationCount = globalAnimationCounter++;
            totalActiveAnimations++;
            runningAnimations[className] = runner;

            element.data(NG_ANIMATE_STATE, {
              last : runner,
              active : runningAnimations,
              index : localAnimationCount,
              totalActive : totalActiveAnimations
            });

            //first we run the before animations and when all of those are complete
            //then we perform the DOM operation and run the next set of animations
            fireBeforeCallbackAsync();
            runner.before(function(cancelled) {
              var data = element.data(NG_ANIMATE_STATE);
              cancelled = cancelled ||
                !data || !data.active[className] ||
                (runner.isClassBased && data.active[className].event != animationEvent);

              fireDOMOperation();
              if(cancelled === true) {
                closeAnimation();
              } else {
                fireAfterCallbackAsync();
                runner.after(closeAnimation);
              }
            });

            function fireDOMCallback(animationPhase) {
              var eventName = '$animate:' + animationPhase;
              if(elementEvents && elementEvents[eventName] && elementEvents[eventName].length > 0) {
                $$asyncCallback(function() {
                  element.triggerHandler(eventName, {
                    event : animationEvent,
                    className : className
                  });
                });
              }
            }

            function fireBeforeCallbackAsync() {
              fireDOMCallback('before');
            }

            function fireAfterCallbackAsync() {
              fireDOMCallback('after');
            }

            function fireDoneCallbackAsync() {
              fireDOMCallback('close');
              if(doneCallback) {
                $$asyncCallback(function() {
                  doneCallback();
                });
              }
            }

            //it is less complicated to use a flag than managing and canceling
            //timeouts containing multiple callbacks.
            function fireDOMOperation() {
              if(!fireDOMOperation.hasBeenRun) {
                fireDOMOperation.hasBeenRun = true;
                domOperation();
              }
            }

            function closeAnimation() {
              if(!closeAnimation.hasBeenRun) {
                closeAnimation.hasBeenRun = true;
                var data = element.data(NG_ANIMATE_STATE);
                if(data) {
                  /* only structural animations wait for reflow before removing an
                   animation, but class-based animations don't. An example of this
                   failing would be when a parent HTML tag has a ng-class attribute
                   causing ALL directives below to skip animations during the digest */
                  if(runner && runner.isClassBased) {
                    cleanup(element, className);
                  } else {
                    $$asyncCallback(function() {
                      var data = element.data(NG_ANIMATE_STATE) || {};
                      if(localAnimationCount == data.index) {
                        cleanup(element, className, animationEvent);
                      }
                    });
                    element.data(NG_ANIMATE_STATE, data);
                  }
                }
                fireDoneCallbackAsync();
              }
            }
          }

          function cancelChildAnimations(element) {
            var node = extractElementNode(element);
            if (node) {
              var nodes = angular.isFunction(node.getElementsByClassName) ?
                node.getElementsByClassName(NG_ANIMATE_CLASS_NAME) :
                node.querySelectorAll('.' + NG_ANIMATE_CLASS_NAME);
              forEach(nodes, function(element) {
                element = angular.element(element);
                var data = element.data(NG_ANIMATE_STATE);
                if(data && data.active) {
                  forEach(data.active, function(runner) {
                    runner.cancel();
                  });
                }
              });
            }
          }

          function cleanup(element, className) {
            if(isMatchingElement(element, $rootElement)) {
              if(!rootAnimateState.disabled) {
                rootAnimateState.running = false;
                rootAnimateState.structural = false;
              }
            } else if(className) {
              var data = element.data(NG_ANIMATE_STATE) || {};

              var removeAnimations = className === true;
              if(!removeAnimations && data.active && data.active[className]) {
                data.totalActive--;
                delete data.active[className];
              }

              if(removeAnimations || !data.totalActive) {
                element.removeClass(NG_ANIMATE_CLASS_NAME);
                element.removeData(NG_ANIMATE_STATE);
              }
            }
          }

          function animationsDisabled(element, parentElement) {
            if (rootAnimateState.disabled) return true;

            if(isMatchingElement(element, $rootElement)) {
              return rootAnimateState.disabled || rootAnimateState.running;
            }

            do {
              //the element did not reach the root element which means that it
              //is not apart of the DOM. Therefore there is no reason to do
              //any animations on it
              if(parentElement.length === 0) break;

              var isRoot = isMatchingElement(parentElement, $rootElement);
              var state = isRoot ? rootAnimateState : parentElement.data(NG_ANIMATE_STATE);
              var result = state && (!!state.disabled || state.running || state.totalActive > 0);
              if(isRoot || result) {
                return result;
              }

              if(isRoot) return true;
            }
            while(parentElement = parentElement.parent());

            return true;
          }
        }]);

      $animateProvider.register('', ['$window', '$sniffer', '$timeout', '$$animateReflow',
        function($window,   $sniffer,   $timeout,   $$animateReflow) {
          // Detect proper transitionend/animationend event names.
          var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

          // If unprefixed events are not supported but webkit-prefixed are, use the latter.
          // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
          // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
          // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
          // Register both events in case `window.onanimationend` is not supported because of that,
          // do the same for `transitionend` as Safari is likely to exhibit similar behavior.
          // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
          // therefore there is no reason to test anymore for other vendor prefixes: http://caniuse.com/#search=transition
          if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
            CSS_PREFIX = '-webkit-';
            TRANSITION_PROP = 'WebkitTransition';
            TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
          } else {
            TRANSITION_PROP = 'transition';
            TRANSITIONEND_EVENT = 'transitionend';
          }

          if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
            CSS_PREFIX = '-webkit-';
            ANIMATION_PROP = 'WebkitAnimation';
            ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
          } else {
            ANIMATION_PROP = 'animation';
            ANIMATIONEND_EVENT = 'animationend';
          }

          var DURATION_KEY = 'Duration';
          var PROPERTY_KEY = 'Property';
          var DELAY_KEY = 'Delay';
          var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
          var NG_ANIMATE_PARENT_KEY = '$$ngAnimateKey';
          var NG_ANIMATE_CSS_DATA_KEY = '$$ngAnimateCSS3Data';
          var NG_ANIMATE_BLOCK_CLASS_NAME = 'ng-animate-block-transitions';
          var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
          var CLOSING_TIME_BUFFER = 1.5;
          var ONE_SECOND = 1000;

          var lookupCache = {};
          var parentCounter = 0;
          var animationReflowQueue = [];
          var cancelAnimationReflow;
          function afterReflow(element, callback) {
            if(cancelAnimationReflow) {
              cancelAnimationReflow();
            }
            animationReflowQueue.push(callback);
            cancelAnimationReflow = $$animateReflow(function() {
              forEach(animationReflowQueue, function(fn) {
                fn();
              });

              animationReflowQueue = [];
              cancelAnimationReflow = null;
              lookupCache = {};
            });
          }

          var closingTimer = null;
          var closingTimestamp = 0;
          var animationElementQueue = [];
          function animationCloseHandler(element, totalTime) {
            var node = extractElementNode(element);
            element = angular.element(node);

            //this item will be garbage collected by the closing
            //animation timeout
            animationElementQueue.push(element);

            //but it may not need to cancel out the existing timeout
            //if the timestamp is less than the previous one
            var futureTimestamp = Date.now() + totalTime;
            if(futureTimestamp <= closingTimestamp) {
              return;
            }

            $timeout.cancel(closingTimer);

            closingTimestamp = futureTimestamp;
            closingTimer = $timeout(function() {
              closeAllAnimations(animationElementQueue);
              animationElementQueue = [];
            }, totalTime, false);
          }

          function closeAllAnimations(elements) {
            forEach(elements, function(element) {
              var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
              if(elementData) {
                (elementData.closeAnimationFn || noop)();
              }
            });
          }

          function getElementAnimationDetails(element, cacheKey) {
            var data = cacheKey ? lookupCache[cacheKey] : null;
            if(!data) {
              var transitionDuration = 0;
              var transitionDelay = 0;
              var animationDuration = 0;
              var animationDelay = 0;
              var transitionDelayStyle;
              var animationDelayStyle;
              var transitionDurationStyle;
              var transitionPropertyStyle;

              //we want all the styles defined before and after
              forEach(element, function(element) {
                if (element.nodeType == ELEMENT_NODE) {
                  var elementStyles = $window.getComputedStyle(element) || {};

                  transitionDurationStyle = elementStyles[TRANSITION_PROP + DURATION_KEY];

                  transitionDuration = Math.max(parseMaxTime(transitionDurationStyle), transitionDuration);

                  transitionPropertyStyle = elementStyles[TRANSITION_PROP + PROPERTY_KEY];

                  transitionDelayStyle = elementStyles[TRANSITION_PROP + DELAY_KEY];

                  transitionDelay  = Math.max(parseMaxTime(transitionDelayStyle), transitionDelay);

                  animationDelayStyle = elementStyles[ANIMATION_PROP + DELAY_KEY];

                  animationDelay   = Math.max(parseMaxTime(animationDelayStyle), animationDelay);

                  var aDuration  = parseMaxTime(elementStyles[ANIMATION_PROP + DURATION_KEY]);

                  if(aDuration > 0) {
                    aDuration *= parseInt(elementStyles[ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY], 10) || 1;
                  }

                  animationDuration = Math.max(aDuration, animationDuration);
                }
              });
              data = {
                total : 0,
                transitionPropertyStyle: transitionPropertyStyle,
                transitionDurationStyle: transitionDurationStyle,
                transitionDelayStyle: transitionDelayStyle,
                transitionDelay: transitionDelay,
                transitionDuration: transitionDuration,
                animationDelayStyle: animationDelayStyle,
                animationDelay: animationDelay,
                animationDuration: animationDuration
              };
              if(cacheKey) {
                lookupCache[cacheKey] = data;
              }
            }
            return data;
          }

          function parseMaxTime(str) {
            var maxValue = 0;
            var values = angular.isString(str) ?
              str.split(/\s*,\s*/) :
              [];
            forEach(values, function(value) {
              maxValue = Math.max(parseFloat(value) || 0, maxValue);
            });
            return maxValue;
          }

          function getCacheKey(element) {
            var parentElement = element.parent();
            var parentID = parentElement.data(NG_ANIMATE_PARENT_KEY);
            if(!parentID) {
              parentElement.data(NG_ANIMATE_PARENT_KEY, ++parentCounter);
              parentID = parentCounter;
            }
            return parentID + '-' + extractElementNode(element).getAttribute('class');
          }

          function animateSetup(animationEvent, element, className, calculationDecorator) {
            var cacheKey = getCacheKey(element);
            var eventCacheKey = cacheKey + ' ' + className;
            var itemIndex = lookupCache[eventCacheKey] ? ++lookupCache[eventCacheKey].total : 0;

            var stagger = {};
            if(itemIndex > 0) {
              var staggerClassName = className + '-stagger';
              var staggerCacheKey = cacheKey + ' ' + staggerClassName;
              var applyClasses = !lookupCache[staggerCacheKey];

              applyClasses && element.addClass(staggerClassName);

              stagger = getElementAnimationDetails(element, staggerCacheKey);

              applyClasses && element.removeClass(staggerClassName);
            }

            /* the animation itself may need to add/remove special CSS classes
             * before calculating the anmation styles */
            calculationDecorator = calculationDecorator ||
              function(fn) { return fn(); };

            element.addClass(className);

            var formerData = element.data(NG_ANIMATE_CSS_DATA_KEY) || {};

            var timings = calculationDecorator(function() {
              return getElementAnimationDetails(element, eventCacheKey);
            });

            var transitionDuration = timings.transitionDuration;
            var animationDuration = timings.animationDuration;
            if(transitionDuration === 0 && animationDuration === 0) {
              element.removeClass(className);
              return false;
            }

            element.data(NG_ANIMATE_CSS_DATA_KEY, {
              running : formerData.running || 0,
              itemIndex : itemIndex,
              stagger : stagger,
              timings : timings,
              closeAnimationFn : noop
            });

            //temporarily disable the transition so that the enter styles
            //don't animate twice (this is here to avoid a bug in Chrome/FF).
            var isCurrentlyAnimating = formerData.running > 0 || animationEvent == 'setClass';
            if(transitionDuration > 0) {
              blockTransitions(element, className, isCurrentlyAnimating);
            }

            //staggering keyframe animations work by adjusting the `animation-delay` CSS property
            //on the given element, however, the delay value can only calculated after the reflow
            //since by that time $animate knows how many elements are being animated. Therefore,
            //until the reflow occurs the element needs to be blocked (where the keyframe animation
            //is set to `none 0s`). This blocking mechanism should only be set for when a stagger
            //animation is detected and when the element item index is greater than 0.
            if(animationDuration > 0 && stagger.animationDelay > 0 && stagger.animationDuration === 0) {
              blockKeyframeAnimations(element);
            }

            return true;
          }

          function isStructuralAnimation(className) {
            return className == 'ng-enter' || className == 'ng-move' || className == 'ng-leave';
          }

          function blockTransitions(element, className, isAnimating) {
            if(isStructuralAnimation(className) || !isAnimating) {
              extractElementNode(element).style[TRANSITION_PROP + PROPERTY_KEY] = 'none';
            } else {
              element.addClass(NG_ANIMATE_BLOCK_CLASS_NAME);
            }
          }

          function blockKeyframeAnimations(element) {
            extractElementNode(element).style[ANIMATION_PROP] = 'none 0s';
          }

          function unblockTransitions(element, className) {
            var prop = TRANSITION_PROP + PROPERTY_KEY;
            var node = extractElementNode(element);
            if(node.style[prop] && node.style[prop].length > 0) {
              node.style[prop] = '';
            }
            element.removeClass(NG_ANIMATE_BLOCK_CLASS_NAME);
          }

          function unblockKeyframeAnimations(element) {
            var prop = ANIMATION_PROP;
            var node = extractElementNode(element);
            if(node.style[prop] && node.style[prop].length > 0) {
              node.style[prop] = '';
            }
          }

          function animateRun(animationEvent, element, className, activeAnimationComplete) {
            var node = extractElementNode(element);
            var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
            if(node.getAttribute('class').indexOf(className) == -1 || !elementData) {
              activeAnimationComplete();
              return;
            }

            var activeClassName = '';
            forEach(className.split(' '), function(klass, i) {
              activeClassName += (i > 0 ? ' ' : '') + klass + '-active';
            });

            var stagger = elementData.stagger;
            var timings = elementData.timings;
            var itemIndex = elementData.itemIndex;
            var maxDuration = Math.max(timings.transitionDuration, timings.animationDuration);
            var maxDelay = Math.max(timings.transitionDelay, timings.animationDelay);
            var maxDelayTime = maxDelay * ONE_SECOND;

            var startTime = Date.now();
            var css3AnimationEvents = ANIMATIONEND_EVENT + ' ' + TRANSITIONEND_EVENT;

            var style = '', appliedStyles = [];
            if(timings.transitionDuration > 0) {
              var propertyStyle = timings.transitionPropertyStyle;
              if(propertyStyle.indexOf('all') == -1) {
                style += CSS_PREFIX + 'transition-property: ' + propertyStyle + ';';
                style += CSS_PREFIX + 'transition-duration: ' + timings.transitionDurationStyle + ';';
                appliedStyles.push(CSS_PREFIX + 'transition-property');
                appliedStyles.push(CSS_PREFIX + 'transition-duration');
              }
            }

            if(itemIndex > 0) {
              if(stagger.transitionDelay > 0 && stagger.transitionDuration === 0) {
                var delayStyle = timings.transitionDelayStyle;
                style += CSS_PREFIX + 'transition-delay: ' +
                  prepareStaggerDelay(delayStyle, stagger.transitionDelay, itemIndex) + '; ';
                appliedStyles.push(CSS_PREFIX + 'transition-delay');
              }

              if(stagger.animationDelay > 0 && stagger.animationDuration === 0) {
                style += CSS_PREFIX + 'animation-delay: ' +
                  prepareStaggerDelay(timings.animationDelayStyle, stagger.animationDelay, itemIndex) + '; ';
                appliedStyles.push(CSS_PREFIX + 'animation-delay');
              }
            }

            if(appliedStyles.length > 0) {
              //the element being animated may sometimes contain comment nodes in
              //the jqLite object, so we're safe to use a single variable to house
              //the styles since there is always only one element being animated
              var oldStyle = node.getAttribute('style') || '';
              node.setAttribute('style', oldStyle + '; ' + style);
            }

            element.on(css3AnimationEvents, onAnimationProgress);
            element.addClass(activeClassName);
            elementData.closeAnimationFn = function() {
              onEnd();
              activeAnimationComplete();
            };

            var staggerTime       = itemIndex * (Math.max(stagger.animationDelay, stagger.transitionDelay) || 0);
            var animationTime     = (maxDelay + maxDuration) * CLOSING_TIME_BUFFER;
            var totalTime         = (staggerTime + animationTime) * ONE_SECOND;

            elementData.running++;
            animationCloseHandler(element, totalTime);
            return onEnd;

            // This will automatically be called by $animate so
            // there is no need to attach this internally to the
            // timeout done method.
            function onEnd(cancelled) {
              element.off(css3AnimationEvents, onAnimationProgress);
              element.removeClass(activeClassName);
              animateClose(element, className);
              var node = extractElementNode(element);
              for (var i in appliedStyles) {
                node.style.removeProperty(appliedStyles[i]);
              }
            }

            function onAnimationProgress(event) {
              event.stopPropagation();
              var ev = event.originalEvent || event;
              var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();

              /* Firefox (or possibly just Gecko) likes to not round values up
               * when a ms measurement is used for the animation */
              var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

              /* $manualTimeStamp is a mocked timeStamp value which is set
               * within browserTrigger(). This is only here so that tests can
               * mock animations properly. Real events fallback to event.timeStamp,
               * or, if they don't, then a timeStamp is automatically created for them.
               * We're checking to see if the timeStamp surpasses the expected delay,
               * but we're using elapsedTime instead of the timeStamp on the 2nd
               * pre-condition since animations sometimes close off early */
              if(Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
                activeAnimationComplete();
              }
            }
          }

          function prepareStaggerDelay(delayStyle, staggerDelay, index) {
            var style = '';
            forEach(delayStyle.split(','), function(val, i) {
              style += (i > 0 ? ',' : '') +
                (index * staggerDelay + parseInt(val, 10)) + 's';
            });
            return style;
          }

          function animateBefore(animationEvent, element, className, calculationDecorator) {
            if(animateSetup(animationEvent, element, className, calculationDecorator)) {
              return function(cancelled) {
                cancelled && animateClose(element, className);
              };
            }
          }

          function animateAfter(animationEvent, element, className, afterAnimationComplete) {
            if(element.data(NG_ANIMATE_CSS_DATA_KEY)) {
              return animateRun(animationEvent, element, className, afterAnimationComplete);
            } else {
              animateClose(element, className);
              afterAnimationComplete();
            }
          }

          function animate(animationEvent, element, className, animationComplete) {
            //If the animateSetup function doesn't bother returning a
            //cancellation function then it means that there is no animation
            //to perform at all
            var preReflowCancellation = animateBefore(animationEvent, element, className);
            if(!preReflowCancellation) {
              animationComplete();
              return;
            }

            //There are two cancellation functions: one is before the first
            //reflow animation and the second is during the active state
            //animation. The first function will take care of removing the
            //data from the element which will not make the 2nd animation
            //happen in the first place
            var cancel = preReflowCancellation;
            afterReflow(element, function() {
              unblockTransitions(element, className);
              unblockKeyframeAnimations(element);
              //once the reflow is complete then we point cancel to
              //the new cancellation function which will remove all of the
              //animation properties from the active animation
              cancel = animateAfter(animationEvent, element, className, animationComplete);
            });

            return function(cancelled) {
              (cancel || noop)(cancelled);
            };
          }

          function animateClose(element, className) {
            element.removeClass(className);
            var data = element.data(NG_ANIMATE_CSS_DATA_KEY);
            if(data) {
              if(data.running) {
                data.running--;
              }
              if(!data.running || data.running === 0) {
                element.removeData(NG_ANIMATE_CSS_DATA_KEY);
              }
            }
          }

          return {
            enter : function(element, animationCompleted) {
              return animate('enter', element, 'ng-enter', animationCompleted);
            },

            leave : function(element, animationCompleted) {
              return animate('leave', element, 'ng-leave', animationCompleted);
            },

            move : function(element, animationCompleted) {
              return animate('move', element, 'ng-move', animationCompleted);
            },

            beforeSetClass : function(element, add, remove, animationCompleted) {
              var className = suffixClasses(remove, '-remove') + ' ' +
                suffixClasses(add, '-add');
              var cancellationMethod = animateBefore('setClass', element, className, function(fn) {
                /* when classes are removed from an element then the transition style
                 * that is applied is the transition defined on the element without the
                 * CSS class being there. This is how CSS3 functions outside of ngAnimate.
                 * http://plnkr.co/edit/j8OzgTNxHTb4n3zLyjGW?p=preview */
                var klass = element.attr('class');
                element.removeClass(remove);
                element.addClass(add);
                var timings = fn();
                element.attr('class', klass);
                return timings;
              });

              if(cancellationMethod) {
                afterReflow(element, function() {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              animationCompleted();
            },

            beforeAddClass : function(element, className, animationCompleted) {
              var cancellationMethod = animateBefore('addClass', element, suffixClasses(className, '-add'), function(fn) {

                /* when a CSS class is added to an element then the transition style that
                 * is applied is the transition defined on the element when the CSS class
                 * is added at the time of the animation. This is how CSS3 functions
                 * outside of ngAnimate. */
                element.addClass(className);
                var timings = fn();
                element.removeClass(className);
                return timings;
              });

              if(cancellationMethod) {
                afterReflow(element, function() {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              animationCompleted();
            },

            setClass : function(element, add, remove, animationCompleted) {
              remove = suffixClasses(remove, '-remove');
              add = suffixClasses(add, '-add');
              var className = remove + ' ' + add;
              return animateAfter('setClass', element, className, animationCompleted);
            },

            addClass : function(element, className, animationCompleted) {
              return animateAfter('addClass', element, suffixClasses(className, '-add'), animationCompleted);
            },

            beforeRemoveClass : function(element, className, animationCompleted) {
              var cancellationMethod = animateBefore('removeClass', element, suffixClasses(className, '-remove'), function(fn) {
                /* when classes are removed from an element then the transition style
                 * that is applied is the transition defined on the element without the
                 * CSS class being there. This is how CSS3 functions outside of ngAnimate.
                 * http://plnkr.co/edit/j8OzgTNxHTb4n3zLyjGW?p=preview */
                var klass = element.attr('class');
                element.removeClass(className);
                var timings = fn();
                element.attr('class', klass);
                return timings;
              });

              if(cancellationMethod) {
                afterReflow(element, function() {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              animationCompleted();
            },

            removeClass : function(element, className, animationCompleted) {
              return animateAfter('removeClass', element, suffixClasses(className, '-remove'), animationCompleted);
            }
          };

          function suffixClasses(classes, suffix) {
            var className = '';
            classes = angular.isArray(classes) ? classes : classes.split(/\s+/);
            forEach(classes, function(klass, i) {
              if(klass && klass.length > 0) {
                className += (i > 0 ? ' ' : '') + klass + suffix;
              }
            });
            return className;
          }
        }]);
    }]);


})(window, window.angular);

/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/**
 * @license AngularJS v1.2.17
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

  var $sanitizeMinErr = angular.$$minErr('$sanitize');

  /**
   * @ngdoc module
   * @name ngSanitize
   * @description
   *
   * # ngSanitize
   *
   * The `ngSanitize` module provides functionality to sanitize HTML.
   *
   *
   * <div doc-module-components="ngSanitize"></div>
   *
   * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
   */

  /*
   * HTML Parser By Misko Hevery (misko@hevery.com)
   * based on:  HTML Parser By John Resig (ejohn.org)
   * Original code by Erik Arvidsson, Mozilla Public License
   * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
   *
   * // Use like so:
   * htmlParser(htmlString, {
   *     start: function(tag, attrs, unary) {},
   *     end: function(tag) {},
   *     chars: function(text) {},
   *     comment: function(text) {}
   * });
   *
   */


  /**
   * @ngdoc service
   * @name $sanitize
   * @kind function
   *
   * @description
   *   The input is sanitized by parsing the html into tokens. All safe tokens (from a whitelist) are
   *   then serialized back to properly escaped html string. This means that no unsafe input can make
   *   it into the returned string, however, since our parser is more strict than a typical browser
   *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a
   *   browser, won't make it through the sanitizer.
   *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and
   *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.
   *
   * @param {string} html Html input.
   * @returns {string} Sanitized html.
   *
   * @example
   <example module="ngSanitize" deps="angular-sanitize.js">
   <file name="index.html">
   <script>
   function Ctrl($scope, $sce) {
         $scope.snippet =
           '<p style="color:blue">an html\n' +
           '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
           'snippet</p>';
         $scope.deliberatelyTrustDangerousSnippet = function() {
           return $sce.trustAsHtml($scope.snippet);
         };
       }
   </script>
   <div ng-controller="Ctrl">
   Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
   <table>
   <tr>
   <td>Directive</td>
   <td>How</td>
   <td>Source</td>
   <td>Rendered</td>
   </tr>
   <tr id="bind-html-with-sanitize">
   <td>ng-bind-html</td>
   <td>Automatically uses $sanitize</td>
   <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
   <td><div ng-bind-html="snippet"></div></td>
   </tr>
   <tr id="bind-html-with-trust">
   <td>ng-bind-html</td>
   <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
   <td>
   <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
   &lt;/div&gt;</pre>
   </td>
   <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
   </tr>
   <tr id="bind-default">
   <td>ng-bind</td>
   <td>Automatically escapes</td>
   <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
   <td><div ng-bind="snippet"></div></td>
   </tr>
   </table>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should sanitize the html snippet by default', function() {
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
     });

   it('should inline raw snippet if bound to a trusted value', function() {
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).
         toBe("<p style=\"color:blue\">an html\n" +
              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
              "snippet</p>");
     });

   it('should escape snippet without any filter', function() {
       expect(element(by.css('#bind-default div')).getInnerHtml()).
         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
              "snippet&lt;/p&gt;");
     });

   it('should update', function() {
       element(by.model('snippet')).clear();
       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('new <b>text</b>');
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(
         'new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(
         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
     });
   </file>
   </example>
   */
  function $SanitizeProvider() {
    this.$get = ['$$sanitizeUri', function($$sanitizeUri) {
      return function(html) {
        var buf = [];
        htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
          return !/^unsafe/.test($$sanitizeUri(uri, isImage));
        }));
        return buf.join('');
      };
    }];
  }

  function sanitizeText(chars) {
    var buf = [];
    var writer = htmlSanitizeWriter(buf, angular.noop);
    writer.chars(chars);
    return buf.join('');
  }


// Regular Expressions for parsing tags and attributes
  var START_TAG_REGEXP =
      /^<\s*([\w:-]+)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*>/,
    END_TAG_REGEXP = /^<\s*\/\s*([\w:-]+)[^>]*>/,
    ATTR_REGEXP = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,
    BEGIN_TAG_REGEXP = /^</,
    BEGING_END_TAGE_REGEXP = /^<\s*\//,
    COMMENT_REGEXP = /<!--(.*?)-->/g,
    DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i,
    CDATA_REGEXP = /<!\[CDATA\[(.*?)]]>/g,
    SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
  // Match everything outside of normal chars and " (quote character)
    NON_ALPHANUMERIC_REGEXP = /([^\#-~| |!])/g;


// Good source of info about elements and attributes
// http://dev.w3.org/html5/spec/Overview.html#semantics
// http://simon.html5.org/html-elements

// Safe Void Elements - HTML5
// http://dev.w3.org/html5/spec/Overview.html#void-elements
  var voidElements = makeMap("area,br,col,hr,img,wbr");

// Elements that you can, intentionally, leave open (and which close themselves)
// http://dev.w3.org/html5/spec/Overview.html#optional-tags
  var optionalEndTagBlockElements = makeMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
    optionalEndTagInlineElements = makeMap("rp,rt"),
    optionalEndTagElements = angular.extend({},
      optionalEndTagInlineElements,
      optionalEndTagBlockElements);

// Safe Block Elements - HTML5
  var blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap("address,article," +
    "aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," +
    "h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul"));

// Inline Elements - HTML5
  var inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap("a,abbr,acronym,b," +
    "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s," +
    "samp,small,span,strike,strong,sub,sup,time,tt,u,var"));


// Special Elements (can contain anything)
  var specialElements = makeMap("script,style");

  var validElements = angular.extend({},
    voidElements,
    blockElements,
    inlineElements,
    optionalEndTagElements);

//Attributes that have href and hence need to be sanitized
  var uriAttrs = makeMap("background,cite,href,longdesc,src,usemap");
  var validAttrs = angular.extend({}, uriAttrs, makeMap(
      'abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,'+
      'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,'+
      'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,'+
      'scope,scrolling,shape,size,span,start,summary,target,title,type,'+
      'valign,value,vspace,width'));

  function makeMap(str) {
    var obj = {}, items = str.split(','), i;
    for (i = 0; i < items.length; i++) obj[items[i]] = true;
    return obj;
  }


  /**
   * @example
   * htmlParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
   *
   * @param {string} html string
   * @param {object} handler
   */
  function htmlParser( html, handler ) {
    var index, chars, match, stack = [], last = html;
    stack.last = function() { return stack[ stack.length - 1 ]; };

    while ( html ) {
      chars = true;

      // Make sure we're not in a script or style element
      if ( !stack.last() || !specialElements[ stack.last() ] ) {

        // Comment
        if ( html.indexOf("<!--") === 0 ) {
          // comments containing -- are not allowed unless they terminate the comment
          index = html.indexOf("--", 4);

          if ( index >= 0 && html.lastIndexOf("-->", index) === index) {
            if (handler.comment) handler.comment( html.substring( 4, index ) );
            html = html.substring( index + 3 );
            chars = false;
          }
          // DOCTYPE
        } else if ( DOCTYPE_REGEXP.test(html) ) {
          match = html.match( DOCTYPE_REGEXP );

          if ( match ) {
            html = html.replace( match[0], '');
            chars = false;
          }
          // end tag
        } else if ( BEGING_END_TAGE_REGEXP.test(html) ) {
          match = html.match( END_TAG_REGEXP );

          if ( match ) {
            html = html.substring( match[0].length );
            match[0].replace( END_TAG_REGEXP, parseEndTag );
            chars = false;
          }

          // start tag
        } else if ( BEGIN_TAG_REGEXP.test(html) ) {
          match = html.match( START_TAG_REGEXP );

          if ( match ) {
            html = html.substring( match[0].length );
            match[0].replace( START_TAG_REGEXP, parseStartTag );
            chars = false;
          }
        }

        if ( chars ) {
          index = html.indexOf("<");

          var text = index < 0 ? html : html.substring( 0, index );
          html = index < 0 ? "" : html.substring( index );

          if (handler.chars) handler.chars( decodeEntities(text) );
        }

      } else {
        html = html.replace(new RegExp("(.*)<\\s*\\/\\s*" + stack.last() + "[^>]*>", 'i'),
          function(all, text){
            text = text.replace(COMMENT_REGEXP, "$1").replace(CDATA_REGEXP, "$1");

            if (handler.chars) handler.chars( decodeEntities(text) );

            return "";
          });

        parseEndTag( "", stack.last() );
      }

      if ( html == last ) {
        throw $sanitizeMinErr('badparse', "The sanitizer was unable to parse the following block " +
          "of html: {0}", html);
      }
      last = html;
    }

    // Clean up any remaining tags
    parseEndTag();

    function parseStartTag( tag, tagName, rest, unary ) {
      tagName = angular.lowercase(tagName);
      if ( blockElements[ tagName ] ) {
        while ( stack.last() && inlineElements[ stack.last() ] ) {
          parseEndTag( "", stack.last() );
        }
      }

      if ( optionalEndTagElements[ tagName ] && stack.last() == tagName ) {
        parseEndTag( "", tagName );
      }

      unary = voidElements[ tagName ] || !!unary;

      if ( !unary )
        stack.push( tagName );

      var attrs = {};

      rest.replace(ATTR_REGEXP,
        function(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {
          var value = doubleQuotedValue
            || singleQuotedValue
            || unquotedValue
            || '';

          attrs[name] = decodeEntities(value);
        });
      if (handler.start) handler.start( tagName, attrs, unary );
    }

    function parseEndTag( tag, tagName ) {
      var pos = 0, i;
      tagName = angular.lowercase(tagName);
      if ( tagName )
      // Find the closest opened tag of the same type
        for ( pos = stack.length - 1; pos >= 0; pos-- )
          if ( stack[ pos ] == tagName )
            break;

      if ( pos >= 0 ) {
        // Close all the open elements, up the stack
        for ( i = stack.length - 1; i >= pos; i-- )
          if (handler.end) handler.end( stack[ i ] );

        // Remove the open elements from the stack
        stack.length = pos;
      }
    }
  }

  var hiddenPre=document.createElement("pre");
  var spaceRe = /^(\s*)([\s\S]*?)(\s*)$/;
  /**
   * decodes all entities into regular string
   * @param value
   * @returns {string} A string with decoded entities.
   */
  function decodeEntities(value) {
    if (!value) { return ''; }

    // Note: IE8 does not preserve spaces at the start/end of innerHTML
    // so we must capture them and reattach them afterward
    var parts = spaceRe.exec(value);
    var spaceBefore = parts[1];
    var spaceAfter = parts[3];
    var content = parts[2];
    if (content) {
      hiddenPre.innerHTML=content.replace(/</g,"&lt;");
      // innerText depends on styling as it doesn't display hidden elements.
      // Therefore, it's better to use textContent not to cause unnecessary
      // reflows. However, IE<9 don't support textContent so the innerText
      // fallback is necessary.
      content = 'textContent' in hiddenPre ?
        hiddenPre.textContent : hiddenPre.innerText;
    }
    return spaceBefore + content + spaceAfter;
  }

  /**
   * Escapes all potentially dangerous characters, so that the
   * resulting string can be safely inserted into attribute or
   * element text.
   * @param value
   * @returns {string} escaped text
   */
  function encodeEntities(value) {
    return value.
      replace(/&/g, '&amp;').
      replace(SURROGATE_PAIR_REGEXP, function (value) {
        var hi = value.charCodeAt(0);
        var low = value.charCodeAt(1);
        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
      }).
      replace(NON_ALPHANUMERIC_REGEXP, function(value){
        return '&#' + value.charCodeAt(0) + ';';
      }).
      replace(/</g, '&lt;').
      replace(/>/g, '&gt;');
  }

  /**
   * create an HTML/XML writer which writes to buffer
   * @param {Array} buf use buf.jain('') to get out sanitized html string
   * @returns {object} in the form of {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * }
   */
  function htmlSanitizeWriter(buf, uriValidator){
    var ignore = false;
    var out = angular.bind(buf, buf.push);
    return {
      start: function(tag, attrs, unary){
        tag = angular.lowercase(tag);
        if (!ignore && specialElements[tag]) {
          ignore = tag;
        }
        if (!ignore && validElements[tag] === true) {
          out('<');
          out(tag);
          angular.forEach(attrs, function(value, key){
            var lkey=angular.lowercase(key);
            var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');
            if (validAttrs[lkey] === true &&
              (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
              out(' ');
              out(key);
              out('="');
              out(encodeEntities(value));
              out('"');
            }
          });
          out(unary ? '/>' : '>');
        }
      },
      end: function(tag){
        tag = angular.lowercase(tag);
        if (!ignore && validElements[tag] === true) {
          out('</');
          out(tag);
          out('>');
        }
        if (tag == ignore) {
          ignore = false;
        }
      },
      chars: function(chars){
        if (!ignore) {
          out(encodeEntities(chars));
        }
      }
    };
  }


// define ngSanitize module and register $sanitize service
  angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);

  /* global sanitizeText: false */

  /**
   * @ngdoc filter
   * @name linky
   * @kind function
   *
   * @description
   * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and
   * plain email address links.
   *
   * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
   *
   * @param {string} text Input text.
   * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.
   * @returns {string} Html-linkified text.
   *
   * @usage
   <span ng-bind-html="linky_expression | linky"></span>
   *
   * @example
   <example module="ngSanitize" deps="angular-sanitize.js">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.snippet =
             'Pretty text with some links:\n'+
             'http://angularjs.org/,\n'+
             'mailto:us@somewhere.org,\n'+
   'another@somewhere.org,\n'+
   'and one more: ftp://127.0.0.1/.';
   $scope.snippetWithTarget = 'http://angularjs.org/';
   }
   </script>
   <div ng-controller="Ctrl">
   Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
   <table>
   <tr>
   <td>Filter</td>
   <td>Source</td>
   <td>Rendered</td>
   </tr>
   <tr id="linky-filter">
   <td>linky filter</td>
   <td>
   <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
   </td>
   <td>
   <div ng-bind-html="snippet | linky"></div>
   </td>
   </tr>
   <tr id="linky-target">
   <td>linky target</td>
   <td>
   <pre>&lt;div ng-bind-html="snippetWithTarget | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
   </td>
   <td>
   <div ng-bind-html="snippetWithTarget | linky:'_blank'"></div>
   </td>
   </tr>
   <tr id="escaped-html">
   <td>no filter</td>
   <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
   <td><div ng-bind="snippet"></div></td>
   </tr>
   </table>
   </file>
   <file name="protractor.js" type="protractor">
   it('should linkify the snippet with urls', function() {
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
   'another@somewhere.org, and one more: ftp://127.0.0.1/.');
   expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
   });

   it('should not linkify snippet without the linky filter', function() {
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
   'another@somewhere.org, and one more: ftp://127.0.0.1/.');
   expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
   });

   it('should update', function() {
         element(by.model('snippet')).clear();
         element(by.model('snippet')).sendKeys('new http://link.');
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('new http://link.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
             .toBe('new http://link.');
       });

   it('should work with the target property', function() {
        expect(element(by.id('linky-target')).
            element(by.binding("snippetWithTarget | linky:'_blank'")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
       });
   </file>
   </example>
   */
  angular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {
    var LINKY_URL_REGEXP =
        /((ftp|https?):\/\/|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>]/,
      MAILTO_REGEXP = /^mailto:/;

    return function(text, target) {
      if (!text) return text;
      var match;
      var raw = text;
      var html = [];
      var url;
      var i;
      while ((match = raw.match(LINKY_URL_REGEXP))) {
        // We can not end in these as they are sometimes found at the end of the sentence
        url = match[0];
        // if we did not match ftp/http/mailto then assume mailto
        if (match[2] == match[3]) url = 'mailto:' + url;
        i = match.index;
        addText(raw.substr(0, i));
        addLink(url, match[0].replace(MAILTO_REGEXP, ''));
        raw = raw.substring(i + match[0].length);
      }
      addText(raw);
      return $sanitize(html.join(''));

      function addText(text) {
        if (!text) {
          return;
        }
        html.push(sanitizeText(text));
      }

      function addLink(url, text) {
        html.push('<a ');
        if (angular.isDefined(target)) {
          html.push('target="');
          html.push(target);
          html.push('" ');
        }
        html.push('href="');
        html.push(url);
        html.push('">');
        addText(text);
        html.push('</a>');
      }
    };
  }]);


})(window, window.angular);

/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/**
 * State-based routing for AngularJS
 * @version v0.2.10
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
  module.exports = 'ui.router';
}

(function (window, angular, undefined) {
  /*jshint globalstrict:true*/
  /*global angular:false*/
  'use strict';

  var isDefined = angular.isDefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy;

  function inherit(parent, extra) {
    return extend(new (extend(function() {}, { prototype: parent }))(), extra);
  }

  function merge(dst) {
    forEach(arguments, function(obj) {
      if (obj !== dst) {
        forEach(obj, function(value, key) {
          if (!dst.hasOwnProperty(key)) dst[key] = value;
        });
      }
    });
    return dst;
  }

  /**
   * Finds the common ancestor path between two states.
   *
   * @param {Object} first The first state.
   * @param {Object} second The second state.
   * @return {Array} Returns an array of state names in descending order, not including the root.
   */
  function ancestors(first, second) {
    var path = [];

    for (var n in first.path) {
      if (first.path[n] !== second.path[n]) break;
      path.push(first.path[n]);
    }
    return path;
  }

  /**
   * IE8-safe wrapper for `Object.keys()`.
   *
   * @param {Object} object A JavaScript object.
   * @return {Array} Returns the keys of the object as an array.
   */
  function keys(object) {
    if (Object.keys) {
      return Object.keys(object);
    }
    var result = [];

    angular.forEach(object, function(val, key) {
      result.push(key);
    });
    return result;
  }

  /**
   * IE8-safe wrapper for `Array.prototype.indexOf()`.
   *
   * @param {Array} array A JavaScript array.
   * @param {*} value A value to search the array for.
   * @return {Number} Returns the array index value of `value`, or `-1` if not present.
   */
  function arraySearch(array, value) {
    if (Array.prototype.indexOf) {
      return array.indexOf(value, Number(arguments[2]) || 0);
    }
    var len = array.length >>> 0, from = Number(arguments[2]) || 0;
    from = (from < 0) ? Math.ceil(from) : Math.floor(from);

    if (from < 0) from += len;

    for (; from < len; from++) {
      if (from in array && array[from] === value) return from;
    }
    return -1;
  }

  /**
   * Merges a set of parameters with all parameters inherited between the common parents of the
   * current state and a given destination state.
   *
   * @param {Object} currentParams The value of the current state parameters ($stateParams).
   * @param {Object} newParams The set of parameters which will be composited with inherited params.
   * @param {Object} $current Internal definition of object representing the current state.
   * @param {Object} $to Internal definition of object representing state to transition to.
   */
  function inheritParams(currentParams, newParams, $current, $to) {
    var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

    for (var i in parents) {
      if (!parents[i].params || !parents[i].params.length) continue;
      parentParams = parents[i].params;

      for (var j in parentParams) {
        if (arraySearch(inheritList, parentParams[j]) >= 0) continue;
        inheritList.push(parentParams[j]);
        inherited[parentParams[j]] = currentParams[parentParams[j]];
      }
    }
    return extend({}, inherited, newParams);
  }

  /**
   * Normalizes a set of values to string or `null`, filtering them by a list of keys.
   *
   * @param {Array} keys The list of keys to normalize/return.
   * @param {Object} values An object hash of values to normalize.
   * @return {Object} Returns an object hash of normalized string values.
   */
  function normalize(keys, values) {
    var normalized = {};

    forEach(keys, function (name) {
      var value = values[name];
      normalized[name] = (value != null) ? String(value) : null;
    });
    return normalized;
  }

  /**
   * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
   *
   * @param {Object} a The first object.
   * @param {Object} b The second object.
   * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
   *                     it defaults to the list of keys in `a`.
   * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
   */
  function equalForKeys(a, b, keys) {
    if (!keys) {
      keys = [];
      for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
    }

    for (var i=0; i<keys.length; i++) {
      var k = keys[i];
      if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
    }
    return true;
  }

  /**
   * Returns the subset of an object, based on a list of keys.
   *
   * @param {Array} keys
   * @param {Object} values
   * @return {Boolean} Returns a subset of `values`.
   */
  function filterByKeys(keys, values) {
    var filtered = {};

    forEach(keys, function (name) {
      filtered[name] = values[name];
    });
    return filtered;
  }
  /**
   * @ngdoc overview
   * @name ui.router.util
   *
   * @description
   * # ui.router.util sub-module
   *
   * This module is a dependency of other sub-modules. Do not include this module as a dependency
   * in your angular app (use {@link ui.router} module instead).
   *
   */
  angular.module('ui.router.util', ['ng']);

  /**
   * @ngdoc overview
   * @name ui.router.router
   *
   * @requires ui.router.util
   *
   * @description
   * # ui.router.router sub-module
   *
   * This module is a dependency of other sub-modules. Do not include this module as a dependency
   * in your angular app (use {@link ui.router} module instead).
   */
  angular.module('ui.router.router', ['ui.router.util']);

  /**
   * @ngdoc overview
   * @name ui.router.state
   *
   * @requires ui.router.router
   * @requires ui.router.util
   *
   * @description
   * # ui.router.state sub-module
   *
   * This module is a dependency of the main ui.router module. Do not include this module as a dependency
   * in your angular app (use {@link ui.router} module instead).
   *
   */
  angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

  /**
   * @ngdoc overview
   * @name ui.router
   *
   * @requires ui.router.state
   *
   * @description
   * # ui.router
   *
   * ## The main module for ui.router
   * There are several sub-modules included with the ui.router module, however only this module is needed
   * as a dependency within your angular app. The other modules are for organization purposes.
   *
   * The modules are:
   * * ui.router - the main "umbrella" module
   * * ui.router.router -
   *
   * *You'll need to include **only** this module as the dependency within your angular app.*
   *
   * <pre>
   * <!doctype html>
   * <html ng-app="myApp">
   * <head>
   *   <script src="js/angular.js"></script>
   *   <!-- Include the ui-router script -->
   *   <script src="js/angular-ui-router.min.js"></script>
   *   <script>
   *     // ...and add 'ui.router' as a dependency
   *     var myApp = angular.module('myApp', ['ui.router']);
   *   </script>
   * </head>
   * <body>
   * </body>
   * </html>
   * </pre>
   */
  angular.module('ui.router', ['ui.router.state']);

  angular.module('ui.router.compat', ['ui.router']);

  /**
   * @ngdoc object
   * @name ui.router.util.$resolve
   *
   * @requires $q
   * @requires $injector
   *
   * @description
   * Manages resolution of (acyclic) graphs of promises.
   */
  $Resolve.$inject = ['$q', '$injector'];
  function $Resolve(  $q,    $injector) {

    var VISIT_IN_PROGRESS = 1,
      VISIT_DONE = 2,
      NOTHING = {},
      NO_DEPENDENCIES = [],
      NO_LOCALS = NOTHING,
      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });


    /**
     * @ngdoc function
     * @name ui.router.util.$resolve#study
     * @methodOf ui.router.util.$resolve
     *
     * @description
     * Studies a set of invocables that are likely to be used multiple times.
     * <pre>
     * $resolve.study(invocables)(locals, parent, self)
     * </pre>
     * is equivalent to
     * <pre>
     * $resolve.resolve(invocables, locals, parent, self)
     * </pre>
     * but the former is more efficient (in fact `resolve` just calls `study`
     * internally).
     *
     * @param {object} invocables Invocable objects
     * @return {function} a function to pass in locals, parent and self
     */
    this.study = function (invocables) {
      if (!isObject(invocables)) throw new Error("'invocables' must be an object");

      // Perform a topological sort of invocables to build an ordered plan
      var plan = [], cycle = [], visited = {};
      function visit(value, key) {
        if (visited[key] === VISIT_DONE) return;

        cycle.push(key);
        if (visited[key] === VISIT_IN_PROGRESS) {
          cycle.splice(0, cycle.indexOf(key));
          throw new Error("Cyclic dependency: " + cycle.join(" -> "));
        }
        visited[key] = VISIT_IN_PROGRESS;

        if (isString(value)) {
          plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
        } else {
          var params = $injector.annotate(value);
          forEach(params, function (param) {
            if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
          });
          plan.push(key, value, params);
        }

        cycle.pop();
        visited[key] = VISIT_DONE;
      }
      forEach(invocables, visit);
      invocables = cycle = visited = null; // plan is all that's required

      function isResolve(value) {
        return isObject(value) && value.then && value.$$promises;
      }

      return function (locals, parent, self) {
        if (isResolve(locals) && self === undefined) {
          self = parent; parent = locals; locals = null;
        }
        if (!locals) locals = NO_LOCALS;
        else if (!isObject(locals)) {
          throw new Error("'locals' must be an object");
        }
        if (!parent) parent = NO_PARENT;
        else if (!isResolve(parent)) {
          throw new Error("'parent' must be a promise returned by $resolve.resolve()");
        }

        // To complete the overall resolution, we have to wait for the parent
        // promise and for the promise for each invokable in our plan.
        var resolution = $q.defer(),
          result = resolution.promise,
          promises = result.$$promises = {},
          values = extend({}, locals),
          wait = 1 + plan.length/3,
          merged = false;

        function done() {
          // Merge parent values we haven't got yet and publish our own $$values
          if (!--wait) {
            if (!merged) merge(values, parent.$$values);
            result.$$values = values;
            result.$$promises = true; // keep for isResolve()
            resolution.resolve(values);
          }
        }

        function fail(reason) {
          result.$$failure = reason;
          resolution.reject(reason);
        }

        // Short-circuit if parent has already failed
        if (isDefined(parent.$$failure)) {
          fail(parent.$$failure);
          return result;
        }

        // Merge parent values if the parent has already resolved, or merge
        // parent promises and wait if the parent resolve is still in progress.
        if (parent.$$values) {
          merged = merge(values, parent.$$values);
          done();
        } else {
          extend(promises, parent.$$promises);
          parent.then(done, fail);
        }

        // Process each invocable in the plan, but ignore any where a local of the same name exists.
        for (var i=0, ii=plan.length; i<ii; i+=3) {
          if (locals.hasOwnProperty(plan[i])) done();
          else invoke(plan[i], plan[i+1], plan[i+2]);
        }

        function invoke(key, invocable, params) {
          // Create a deferred for this invocation. Failures will propagate to the resolution as well.
          var invocation = $q.defer(), waitParams = 0;
          function onfailure(reason) {
            invocation.reject(reason);
            fail(reason);
          }
          // Wait for any parameter that we have a promise for (either from parent or from this
          // resolve; in that case study() will have made sure it's ordered before us in the plan).
          forEach(params, function (dep) {
            if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
              waitParams++;
              promises[dep].then(function (result) {
                values[dep] = result;
                if (!(--waitParams)) proceed();
              }, onfailure);
            }
          });
          if (!waitParams) proceed();
          function proceed() {
            if (isDefined(result.$$failure)) return;
            try {
              invocation.resolve($injector.invoke(invocable, self, values));
              invocation.promise.then(function (result) {
                values[key] = result;
                done();
              }, onfailure);
            } catch (e) {
              onfailure(e);
            }
          }
          // Publish promise synchronously; invocations further down in the plan may depend on it.
          promises[key] = invocation.promise;
        }

        return result;
      };
    };

    /**
     * @ngdoc function
     * @name ui.router.util.$resolve#resolve
     * @methodOf ui.router.util.$resolve
     *
     * @description
     * Resolves a set of invocables. An invocable is a function to be invoked via
     * `$injector.invoke()`, and can have an arbitrary number of dependencies.
     * An invocable can either return a value directly,
     * or a `$q` promise. If a promise is returned it will be resolved and the
     * resulting value will be used instead. Dependencies of invocables are resolved
     * (in this order of precedence)
     *
     * - from the specified `locals`
     * - from another invocable that is part of this `$resolve` call
     * - from an invocable that is inherited from a `parent` call to `$resolve`
     *   (or recursively
     * - from any ancestor `$resolve` of that parent).
     *
     * The return value of `$resolve` is a promise for an object that contains
     * (in this order of precedence)
     *
     * - any `locals` (if specified)
     * - the resolved return values of all injectables
     * - any values inherited from a `parent` call to `$resolve` (if specified)
     *
     * The promise will resolve after the `parent` promise (if any) and all promises
     * returned by injectables have been resolved. If any invocable
     * (or `$injector.invoke`) throws an exception, or if a promise returned by an
     * invocable is rejected, the `$resolve` promise is immediately rejected with the
     * same error. A rejection of a `parent` promise (if specified) will likewise be
     * propagated immediately. Once the `$resolve` promise has been rejected, no
     * further invocables will be called.
     *
     * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
     * to throw an error. As a special case, an injectable can depend on a parameter
     * with the same name as the injectable, which will be fulfilled from the `parent`
     * injectable of the same name. This allows inherited values to be decorated.
     * Note that in this case any other injectable in the same `$resolve` with the same
     * dependency would see the decorated value, not the inherited value.
     *
     * Note that missing dependencies -- unlike cyclic dependencies -- will cause an
     * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous)
     * exception.
     *
     * Invocables are invoked eagerly as soon as all dependencies are available.
     * This is true even for dependencies inherited from a `parent` call to `$resolve`.
     *
     * As a special case, an invocable can be a string, in which case it is taken to
     * be a service name to be passed to `$injector.get()`. This is supported primarily
     * for backwards-compatibility with the `resolve` property of `$routeProvider`
     * routes.
     *
     * @param {object} invocables functions to invoke or
     * `$injector` services to fetch.
     * @param {object} locals  values to make available to the injectables
     * @param {object} parent  a promise returned by another call to `$resolve`.
     * @param {object} self  the `this` for the invoked methods
     * @return {object} Promise for an object that contains the resolved return value
     * of all invocables, as well as any inherited and local values.
     */
    this.resolve = function (invocables, locals, parent, self) {
      return this.study(invocables)(locals, parent, self);
    };
  }

  angular.module('ui.router.util').service('$resolve', $Resolve);


  /**
   * @ngdoc object
   * @name ui.router.util.$templateFactory
   *
   * @requires $http
   * @requires $templateCache
   * @requires $injector
   *
   * @description
   * Service. Manages loading of templates.
   */
  $TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
  function $TemplateFactory(  $http,   $templateCache,   $injector) {

    /**
     * @ngdoc function
     * @name ui.router.util.$templateFactory#fromConfig
     * @methodOf ui.router.util.$templateFactory
     *
     * @description
     * Creates a template from a configuration object.
     *
     * @param {object} config Configuration object for which to load a template.
     * The following properties are search in the specified order, and the first one
     * that is defined is used to create the template:
     *
     * @param {string|object} config.template html string template or function to
     * load via {@link ui.router.util.$templateFactory#fromString fromString}.
     * @param {string|object} config.templateUrl url to load or a function returning
     * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
     * @param {Function} config.templateProvider function to invoke via
     * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
     * @param {object} params  Parameters to pass to the template function.
     * @param {object} locals Locals to pass to `invoke` if the template is loaded
     * via a `templateProvider`. Defaults to `{ params: params }`.
     *
     * @return {string|object}  The template html as a string, or a promise for
     * that string,or `null` if no template is configured.
     */
    this.fromConfig = function (config, params, locals) {
      return (
        isDefined(config.template) ? this.fromString(config.template, params) :
          isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
            isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
              null
        );
    };

    /**
     * @ngdoc function
     * @name ui.router.util.$templateFactory#fromString
     * @methodOf ui.router.util.$templateFactory
     *
     * @description
     * Creates a template from a string or a function returning a string.
     *
     * @param {string|object} template html template as a string or function that
     * returns an html template as a string.
     * @param {object} params Parameters to pass to the template function.
     *
     * @return {string|object} The template html as a string, or a promise for that
     * string.
     */
    this.fromString = function (template, params) {
      return isFunction(template) ? template(params) : template;
    };

    /**
     * @ngdoc function
     * @name ui.router.util.$templateFactory#fromUrl
     * @methodOf ui.router.util.$templateFactory
     *
     * @description
     * Loads a template from the a URL via `$http` and `$templateCache`.
     *
     * @param {string|Function} url url of the template to load, or a function
     * that returns a url.
     * @param {Object} params Parameters to pass to the url function.
     * @return {string|Promise.<string>} The template html as a string, or a promise
     * for that string.
     */
    this.fromUrl = function (url, params) {
      if (isFunction(url)) url = url(params);
      if (url == null) return null;
      else return $http
        .get(url, { cache: $templateCache })
        .then(function(response) { return response.data; });
    };

    /**
     * @ngdoc function
     * @name ui.router.util.$templateFactory#fromUrl
     * @methodOf ui.router.util.$templateFactory
     *
     * @description
     * Creates a template by invoking an injectable provider function.
     *
     * @param {Function} provider Function to invoke via `$injector.invoke`
     * @param {Object} params Parameters for the template.
     * @param {Object} locals Locals to pass to `invoke`. Defaults to
     * `{ params: params }`.
     * @return {string|Promise.<string>} The template html as a string, or a promise
     * for that string.
     */
    this.fromProvider = function (provider, params, locals) {
      return $injector.invoke(provider, null, locals || { params: params });
    };
  }

  angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

  /**
   * @ngdoc object
   * @name ui.router.util.type:UrlMatcher
   *
   * @description
   * Matches URLs against patterns and extracts named parameters from the path or the search
   * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
   * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
   * do not influence whether or not a URL is matched, but their values are passed through into
   * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
   *
   * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
   * syntax, which optionally allows a regular expression for the parameter to be specified:
   *
   * * `':'` name - colon placeholder
   * * `'*'` name - catch-all placeholder
   * * `'{' name '}'` - curly placeholder
   * * `'{' name ':' regexp '}'` - curly placeholder with regexp. Should the regexp itself contain
   *   curly braces, they must be in matched pairs or escaped with a backslash.
   *
   * Parameter names may contain only word characters (latin letters, digits, and underscore) and
   * must be unique within the pattern (across both path and search parameters). For colon
   * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
   * number of characters other than '/'. For catch-all placeholders the path parameter matches
   * any number of characters.
   *
   * Examples:
   *
   * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
   *   trailing slashes, and patterns have to match the entire path, not just a prefix.
   * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
   *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
   * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
   * * `'/user/{id:[^/]*}'` - Same as the previous example.
   * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
   *   parameter consists of 1 to 8 hex digits.
   * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
   *   path into the parameter 'path'.
   * * `'/files/*path'` - ditto.
   *
   * @param {string} pattern  the pattern to compile into a matcher.
   *
   * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
   *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
   *   non-null) will start with this prefix.
   *
   * @property {string} source  The pattern that was passed into the contructor
   *
   * @property {string} sourcePath  The path portion of the source property
   *
   * @property {string} sourceSearch  The search portion of the source property
   *
   * @property {string} regex  The constructed regex that will be used to match against the url when
   *   it is time to determine which url will match.
   *
   * @returns {Object}  New UrlMatcher object
   */
  function UrlMatcher(pattern) {

    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
    //   '*' name
    //   ':' name
    //   '{' name '}'
    //   '{' name ':' regexp '}'
    // The regular expression is somewhat complicated due to the need to allow curly braces
    // inside the regular expression. The placeholder regexp breaks down as follows:
    //    ([:*])(\w+)               classic placeholder ($1 / $2)
    //    \{(\w+)(?:\:( ... ))?\}   curly brace placeholder ($3) with optional regexp ... ($4)
    //    (?: ... | ... | ... )+    the regexp consists of any number of atoms, an atom being either
    //    [^{}\\]+                  - anything other than curly braces or backslash
    //    \\.                       - a backslash escape
    //    \{(?:[^{}\\]+|\\.)*\}     - a matched set of curly braces containing other atoms
    var placeholder = /([:*])(\w+)|\{(\w+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      names = {}, compiled = '^', last = 0, m,
      segments = this.segments = [],
      params = this.params = [];

    function addParameter(id) {
      if (!/^\w+(-+\w+)*$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
      if (names[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
      names[id] = true;
      params.push(id);
    }

    function quoteRegExp(string) {
      return string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
    }

    this.source = pattern;

    // Split into static segments separated by path parameter placeholders.
    // The number of segments is always 1 more than the number of parameters.
    var id, regexp, segment;
    while ((m = placeholder.exec(pattern))) {
      id = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
      regexp = m[4] || (m[1] == '*' ? '.*' : '[^/]*');
      segment = pattern.substring(last, m.index);
      if (segment.indexOf('?') >= 0) break; // we're into the search part
      compiled += quoteRegExp(segment) + '(' + regexp + ')';
      addParameter(id);
      segments.push(segment);
      last = placeholder.lastIndex;
    }
    segment = pattern.substring(last);

    // Find any search parameter names and remove them from the last segment
    var i = segment.indexOf('?');
    if (i >= 0) {
      var search = this.sourceSearch = segment.substring(i);
      segment = segment.substring(0, i);
      this.sourcePath = pattern.substring(0, last+i);

      // Allow parameters to be separated by '?' as well as '&' to make concat() easier
      forEach(search.substring(1).split(/[&?]/), addParameter);
    } else {
      this.sourcePath = pattern;
      this.sourceSearch = '';
    }

    compiled += quoteRegExp(segment) + '$';
    segments.push(segment);
    this.regexp = new RegExp(compiled);
    this.prefix = segments[0];
  }

  /**
   * @ngdoc function
   * @name ui.router.util.type:UrlMatcher#concat
   * @methodOf ui.router.util.type:UrlMatcher
   *
   * @description
   * Returns a new matcher for a pattern constructed by appending the path part and adding the
   * search parameters of the specified pattern to this pattern. The current pattern is not
   * modified. This can be understood as creating a pattern for URLs that are relative to (or
   * suffixes of) the current pattern.
   *
   * @example
   * The following two matchers are equivalent:
   * ```
   * new UrlMatcher('/user/{id}?q').concat('/details?date');
   * new UrlMatcher('/user/{id}/details?q&date');
   * ```
   *
   * @param {string} pattern  The pattern to append.
   * @returns {ui.router.util.type:UrlMatcher}  A matcher for the concatenated pattern.
   */
  UrlMatcher.prototype.concat = function (pattern) {
    // Because order of search parameters is irrelevant, we can add our own search
    // parameters to the end of the new pattern. Parse the new pattern by itself
    // and then join the bits together, but it's much easier to do this on a string level.
    return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch);
  };

  UrlMatcher.prototype.toString = function () {
    return this.source;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.type:UrlMatcher#exec
   * @methodOf ui.router.util.type:UrlMatcher
   *
   * @description
   * Tests the specified path against this matcher, and returns an object containing the captured
   * parameter values, or null if the path does not match. The returned object contains the values
   * of any search parameters that are mentioned in the pattern, but their value may be null if
   * they are not present in `searchParams`. This means that search parameters are always treated
   * as optional.
   *
   * @example
   * ```
   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', { x:'1', q:'hello' });
   * // returns { id:'bob', q:'hello', r:null }
   * ```
   *
   * @param {string} path  The URL path to match, e.g. `$location.path()`.
   * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
   * @returns {Object}  The captured parameter values.
   */
  UrlMatcher.prototype.exec = function (path, searchParams) {
    var m = this.regexp.exec(path);
    if (!m) return null;

    var params = this.params, nTotal = params.length,
      nPath = this.segments.length-1,
      values = {}, i;

    if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

    for (i=0; i<nPath; i++) values[params[i]] = m[i+1];
    for (/**/; i<nTotal; i++) values[params[i]] = searchParams[params[i]];

    return values;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.type:UrlMatcher#parameters
   * @methodOf ui.router.util.type:UrlMatcher
   *
   * @description
   * Returns the names of all path and search parameters of this pattern in an unspecified order.
   *
   * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
   *    pattern has no parameters, an empty array is returned.
   */
  UrlMatcher.prototype.parameters = function () {
    return this.params;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.type:UrlMatcher#format
   * @methodOf ui.router.util.type:UrlMatcher
   *
   * @description
   * Creates a URL that matches this pattern by substituting the specified values
   * for the path and search parameters. Null values for path parameters are
   * treated as empty strings.
   *
   * @example
   * ```
   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
   * // returns '/user/bob?q=yes'
   * ```
   *
   * @param {Object} values  the values to substitute for the parameters in this pattern.
   * @returns {string}  the formatted URL (path and optionally search part).
   */
  UrlMatcher.prototype.format = function (values) {
    var segments = this.segments, params = this.params;
    if (!values) return segments.join('');

    var nPath = segments.length-1, nTotal = params.length,
      result = segments[0], i, search, value;

    for (i=0; i<nPath; i++) {
      value = values[params[i]];
      // TODO: Maybe we should throw on null here? It's not really good style to use '' and null interchangeabley
      if (value != null) result += encodeURIComponent(value);
      result += segments[i+1];
    }
    for (/**/; i<nTotal; i++) {
      value = values[params[i]];
      if (value != null) {
        result += (search ? '&' : '?') + params[i] + '=' + encodeURIComponent(value);
        search = true;
      }
    }

    return result;
  };



  /**
   * @ngdoc object
   * @name ui.router.util.$urlMatcherFactory
   *
   * @description
   * Factory for {@link ui.router.util.type:UrlMatcher} instances. The factory is also available to providers
   * under the name `$urlMatcherFactoryProvider`.
   */
  function $UrlMatcherFactory() {

    /**
     * @ngdoc function
     * @name ui.router.util.$urlMatcherFactory#compile
     * @methodOf ui.router.util.$urlMatcherFactory
     *
     * @description
     * Creates a {@link ui.router.util.type:UrlMatcher} for the specified pattern.
     *
     * @param {string} pattern  The URL pattern.
     * @returns {ui.router.util.type:UrlMatcher}  The UrlMatcher.
     */
    this.compile = function (pattern) {
      return new UrlMatcher(pattern);
    };

    /**
     * @ngdoc function
     * @name ui.router.util.$urlMatcherFactory#isMatcher
     * @methodOf ui.router.util.$urlMatcherFactory
     *
     * @description
     * Returns true if the specified object is a UrlMatcher, or false otherwise.
     *
     * @param {Object} object  The object to perform the type check against.
     * @returns {Boolean}  Returns `true` if the object has the following functions: `exec`, `format`, and `concat`.
     */
    this.isMatcher = function (o) {
      return isObject(o) && isFunction(o.exec) && isFunction(o.format) && isFunction(o.concat);
    };

    /* No need to document $get, since it returns this */
    this.$get = function () {
      return this;
    };
  }

// Register as a provider so it's available to other providers
  angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider
   *
   * @requires ui.router.util.$urlMatcherFactoryProvider
   *
   * @description
   * `$urlRouterProvider` has the responsibility of watching `$location`.
   * When `$location` changes it runs through a list of rules one by one until a
   * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify
   * a url in a state configuration. All urls are compiled into a UrlMatcher object.
   *
   * There are several methods on `$urlRouterProvider` that make it useful to use directly
   * in your module config.
   */
  $UrlRouterProvider.$inject = ['$urlMatcherFactoryProvider'];
  function $UrlRouterProvider(  $urlMatcherFactory) {
    var rules = [],
      otherwise = null;

    // Returns a string that is a prefix of all strings matching the RegExp
    function regExpPrefix(re) {
      var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
      return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
    }

    // Interpolates matched values into a String.replace()-style pattern
    function interpolate(pattern, match) {
      return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
        return match[what === '$' ? 0 : Number(what)];
      });
    }

    /**
     * @ngdoc function
     * @name ui.router.router.$urlRouterProvider#rule
     * @methodOf ui.router.router.$urlRouterProvider
     *
     * @description
     * Defines rules that are used by `$urlRouterProvider to find matches for
     * specific URLs.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router.router']);
     *
     * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
     * </pre>
     *
     * @param {object} rule Handler function that takes `$injector` and `$location`
     * services as arguments. You can use them to return a valid path as a string.
     *
     * @return {object} $urlRouterProvider - $urlRouterProvider instance
     */
    this.rule =
      function (rule) {
        if (!isFunction(rule)) throw new Error("'rule' must be a function");
        rules.push(rule);
        return this;
      };

    /**
     * @ngdoc object
     * @name ui.router.router.$urlRouterProvider#otherwise
     * @methodOf ui.router.router.$urlRouterProvider
     *
     * @description
     * Defines a path that is used when an invalied route is requested.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router.router']);
     *
     * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     ...
   *   });
   * });
     * </pre>
     *
     * @param {string|object} rule The url path you want to redirect to or a function
     * rule that returns the url path. The function version is passed two params:
     * `$injector` and `$location` services.
     *
     * @return {object} $urlRouterProvider - $urlRouterProvider instance
     */
    this.otherwise =
      function (rule) {
        if (isString(rule)) {
          var redirect = rule;
          rule = function () { return redirect; };
        }
        else if (!isFunction(rule)) throw new Error("'rule' must be a function");
        otherwise = rule;
        return this;
      };


    function handleIfMatch($injector, handler, match) {
      if (!match) return false;
      var result = $injector.invoke(handler, handler, { $match: match });
      return isDefined(result) ? result : true;
    }

    /**
     * @ngdoc function
     * @name ui.router.router.$urlRouterProvider#when
     * @methodOf ui.router.router.$urlRouterProvider
     *
     * @description
     * Registers a handler for a given url matching. if handle is a string, it is
     * treated as a redirect, and is interpolated according to the syyntax of match
     * (i.e. like String.replace() for RegExp, or like a UrlMatcher pattern otherwise).
     *
     * If the handler is a function, it is injectable. It gets invoked if `$location`
     * matches. You have the option of inject the match object as `$match`.
     *
     * The handler can return
     *
     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
     *   will continue trying to find another one that matches.
     * - **string** which is treated as a redirect and passed to `$location.url()`
     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router.router']);
     *
     * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
     * </pre>
     *
     * @param {string|object} what The incoming path that you want to redirect.
     * @param {string|object} handler The path you want to redirect your user to.
     */
    this.when =
      function (what, handler) {
        var redirect, handlerIsString = isString(handler);
        if (isString(what)) what = $urlMatcherFactory.compile(what);

        if (!handlerIsString && !isFunction(handler) && !isArray(handler))
          throw new Error("invalid 'handler' in when()");

        var strategies = {
          matcher: function (what, handler) {
            if (handlerIsString) {
              redirect = $urlMatcherFactory.compile(handler);
              handler = ['$match', function ($match) { return redirect.format($match); }];
            }
            return extend(function ($injector, $location) {
              return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
            }, {
              prefix: isString(what.prefix) ? what.prefix : ''
            });
          },
          regex: function (what, handler) {
            if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

            if (handlerIsString) {
              redirect = handler;
              handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
            }
            return extend(function ($injector, $location) {
              return handleIfMatch($injector, handler, what.exec($location.path()));
            }, {
              prefix: regExpPrefix(what)
            });
          }
        };

        var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

        for (var n in check) {
          if (check[n]) {
            return this.rule(strategies[n](what, handler));
          }
        }

        throw new Error("invalid 'what' in when()");
      };

    /**
     * @ngdoc object
     * @name ui.router.router.$urlRouter
     *
     * @requires $location
     * @requires $rootScope
     * @requires $injector
     *
     * @description
     *
     */
    this.$get =
      [        '$location', '$rootScope', '$injector',
        function ($location,   $rootScope,   $injector) {
          // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
          function update(evt) {
            if (evt && evt.defaultPrevented) return;
            function check(rule) {
              var handled = rule($injector, $location);
              if (handled) {
                if (isString(handled)) $location.replace().url(handled);
                return true;
              }
              return false;
            }
            var n=rules.length, i;
            for (i=0; i<n; i++) {
              if (check(rules[i])) return;
            }
            // always check otherwise last to allow dynamic updates to the set of rules
            if (otherwise) check(otherwise);
          }

          $rootScope.$on('$locationChangeSuccess', update);

          return {
            /**
             * @ngdoc function
             * @name ui.router.router.$urlRouter#sync
             * @methodOf ui.router.router.$urlRouter
             *
             * @description
             * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
             * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
             * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
             * with the transition by calling `$urlRouter.sync()`.
             *
             * @example
             * <pre>
             * angular.module('app', ['ui.router']);
             *   .run(function($rootScope, $urlRouter) {
         *     $rootScope.$on('$locationChangeSuccess', function(evt) {
         *       // Halt state change from even starting
         *       evt.preventDefault();
         *       // Perform custom logic
         *       var meetsRequirement = ...
         *       // Continue with the update and state transition if logic allows
         *       if (meetsRequirement) $urlRouter.sync();
         *     });
         * });
             * </pre>
             */
            sync: function () {
              update();
            }
          };
        }];
  }

  angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

  /**
   * @ngdoc object
   * @name ui.router.state.$stateProvider
   *
   * @requires ui.router.router.$urlRouterProvider
   * @requires ui.router.util.$urlMatcherFactoryProvider
   * @requires $locationProvider
   *
   * @description
   * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
   * on state.
   *
   * A state corresponds to a "place" in the application in terms of the overall UI and
   * navigation. A state describes (via the controller / template / view properties) what
   * the UI looks like and does at that place.
   *
   * States often have things in common, and the primary way of factoring out these
   * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
   * nested states.
   *
   * The `$stateProvider` provides interfaces to declare these states for your app.
   */
  $StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider', '$locationProvider'];
  function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory,           $locationProvider) {

    var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

    // Builds state properties from definition passed to registerState()
    var stateBuilder = {

      // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
      // state.children = [];
      // if (parent) parent.children.push(state);
      parent: function(state) {
        if (isDefined(state.parent) && state.parent) return findState(state.parent);
        // regex matches any valid composite state name
        // would match "contact.list" but not "contacts"
        var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
        return compositeName ? findState(compositeName[1]) : root;
      },

      // inherit 'data' from parent and override by own values (if any)
      data: function(state) {
        if (state.parent && state.parent.data) {
          state.data = state.self.data = extend({}, state.parent.data, state.data);
        }
        return state.data;
      },

      // Build a URLMatcher if necessary, either via a relative or absolute URL
      url: function(state) {
        var url = state.url;

        if (isString(url)) {
          if (url.charAt(0) == '^') {
            return $urlMatcherFactory.compile(url.substring(1));
          }
          return (state.parent.navigable || root).url.concat(url);
        }

        if ($urlMatcherFactory.isMatcher(url) || url == null) {
          return url;
        }
        throw new Error("Invalid url '" + url + "' in state '" + state + "'");
      },

      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
      navigable: function(state) {
        return state.url ? state : (state.parent ? state.parent.navigable : null);
      },

      // Derive parameters for this state and ensure they're a super-set of parent's parameters
      params: function(state) {
        if (!state.params) {
          return state.url ? state.url.parameters() : state.parent.params;
        }
        if (!isArray(state.params)) throw new Error("Invalid params in state '" + state + "'");
        if (state.url) throw new Error("Both params and url specicified in state '" + state + "'");
        return state.params;
      },

      // If there is no explicit multi-view configuration, make one up so we don't have
      // to handle both cases in the view directive later. Note that having an explicit
      // 'views' property will mean the default unnamed view properties are ignored. This
      // is also a good time to resolve view names to absolute names, so everything is a
      // straight lookup at link time.
      views: function(state) {
        var views = {};

        forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
          if (name.indexOf('@') < 0) name += '@' + state.parent.name;
          views[name] = view;
        });
        return views;
      },

      ownParams: function(state) {
        if (!state.parent) {
          return state.params;
        }
        var paramNames = {}; forEach(state.params, function (p) { paramNames[p] = true; });

        forEach(state.parent.params, function (p) {
          if (!paramNames[p]) {
            throw new Error("Missing required parameter '" + p + "' in state '" + state.name + "'");
          }
          paramNames[p] = false;
        });
        var ownParams = [];

        forEach(paramNames, function (own, p) {
          if (own) ownParams.push(p);
        });
        return ownParams;
      },

      // Keep a full path from the root down to this state as this is needed for state activation.
      path: function(state) {
        return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
      },

      // Speed up $state.contains() as it's used a lot
      includes: function(state) {
        var includes = state.parent ? extend({}, state.parent.includes) : {};
        includes[state.name] = true;
        return includes;
      },

      $delegates: {}
    };

    function isRelative(stateName) {
      return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
    }

    function findState(stateOrName, base) {
      var isStr = isString(stateOrName),
        name  = isStr ? stateOrName : stateOrName.name,
        path  = isRelative(name);

      if (path) {
        if (!base) throw new Error("No reference point given for path '"  + name + "'");
        var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

        for (; i < pathLength; i++) {
          if (rel[i] === "" && i === 0) {
            current = base;
            continue;
          }
          if (rel[i] === "^") {
            if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
            current = current.parent;
            continue;
          }
          break;
        }
        rel = rel.slice(i).join(".");
        name = current.name + (current.name && rel ? "." : "") + rel;
      }
      var state = states[name];

      if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
        return state;
      }
      return undefined;
    }

    function queueState(parentName, state) {
      if (!queue[parentName]) {
        queue[parentName] = [];
      }
      queue[parentName].push(state);
    }

    function registerState(state) {
      // Wrap a new object around the state so we can store our private details easily.
      state = inherit(state, {
        self: state,
        resolve: state.resolve || {},
        toString: function() { return this.name; }
      });

      var name = state.name;
      if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
      if (states.hasOwnProperty(name)) throw new Error("State '" + name + "'' is already defined");

      // Get parent name
      var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
        : (isString(state.parent)) ? state.parent
        : '';

      // If parent is not registered yet, add state to queue and register later
      if (parentName && !states[parentName]) {
        return queueState(parentName, state.self);
      }

      for (var key in stateBuilder) {
        if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
      }
      states[name] = state;

      // Register the state in the global state list and with $urlRouter if necessary.
      if (!state[abstractKey] && state.url) {
        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
          if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
            $state.transitionTo(state, $match, { location: false });
          }
        }]);
      }

      // Register any queued children
      if (queue[name]) {
        for (var i = 0; i < queue[name].length; i++) {
          registerState(queue[name][i]);
        }
      }

      return state;
    }

    // Checks text to see if it looks like a glob.
    function isGlob (text) {
      return text.indexOf('*') > -1;
    }

    // Returns true if glob matches current $state name.
    function doesStateMatchGlob (glob) {
      var globSegments = glob.split('.'),
        segments = $state.$current.name.split('.');

      //match greedy starts
      if (globSegments[0] === '**') {
        segments = segments.slice(segments.indexOf(globSegments[1]));
        segments.unshift('**');
      }
      //match greedy ends
      if (globSegments[globSegments.length - 1] === '**') {
        segments.splice(segments.indexOf(globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
        segments.push('**');
      }

      if (globSegments.length != segments.length) {
        return false;
      }

      //match single stars
      for (var i = 0, l = globSegments.length; i < l; i++) {
        if (globSegments[i] === '*') {
          segments[i] = '*';
        }
      }

      return segments.join('') === globSegments.join('');
    }


    // Implicit root state that is always active
    root = registerState({
      name: '',
      url: '^',
      views: null,
      'abstract': true
    });
    root.navigable = null;


    /**
     * @ngdoc function
     * @name ui.router.state.$stateProvider#decorator
     * @methodOf ui.router.state.$stateProvider
     *
     * @description
     * Allows you to extend (carefully) or override (at your own peril) the
     * `stateBuilder` object used internally by `$stateProvider`. This can be used
     * to add custom functionality to ui-router, for example inferring templateUrl
     * based on the state name.
     *
     * When passing only a name, it returns the current (original or decorated) builder
     * function that matches `name`.
     *
     * The builder functions that can be decorated are listed below. Though not all
     * necessarily have a good use case for decoration, that is up to you to decide.
     *
     * In addition, users can attach custom decorators, which will generate new
     * properties within the state's internal definition. There is currently no clear
     * use-case for this beyond accessing internal states (i.e. $state.$current),
     * however, expect this to become increasingly relevant as we introduce additional
     * meta-programming features.
     *
     * **Warning**: Decorators should not be interdependent because the order of
     * execution of the builder functions in non-deterministic. Builder functions
     * should only be dependent on the state definition object and super function.
     *
     *
     * Existing builder functions and current return values:
     *
     * - **parent** `{object}` - returns the parent state object.
     * - **data** `{object}` - returns state data, including any inherited data that is not
     *   overridden by own values (if any).
     * - **url** `{object}` - returns a {link ui.router.util.type:UrlMatcher} or null.
     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is
     *   navigable).
     * - **params** `{object}` - returns an array of state params that are ensured to
     *   be a super-set of parent's params.
     * - **views** `{object}` - returns a views object where each key is an absolute view
     *   name (i.e. "viewName@stateName") and each value is the config object
     *   (template, controller) for the view. Even when you don't use the views object
     *   explicitly on a state config, one is still created for you internally.
     *   So by decorating this builder function you have access to decorating template
     *   and controller properties.
     * - **ownParams** `{object}` - returns an array of params that belong to the state,
     *   not including any params defined by ancestor states.
     * - **path** `{string}` - returns the full path from the root down to this state.
     *   Needed for state activation.
     * - **includes** `{object}` - returns an object that includes every state that
     *   would pass a '$state.includes()' test.
     *
     * @example
     * <pre>
     * // Override the internal 'views' builder with a function that takes the state
     * // definition, and a reference to the internal function being overridden:
     * $stateProvider.decorator('views', function ($state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(view, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
     *
     * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
     *
     * // ...
     *
     * $state.go('home');
     * // Auto-populates list and item views with /partials/home/contact/list.html,
     * // and /partials/home/contact/item.html, respectively.
     * </pre>
     *
     * @param {string} name The name of the builder function to decorate.
     * @param {object} func A function that is responsible for decorating the original
     * builder function. The function receives two parameters:
     *
     *   - `{object}` - state - The state config object.
     *   - `{object}` - super - The original builder function.
     *
     * @return {object} $stateProvider - $stateProvider instance
     */
    this.decorator = decorator;
    function decorator(name, func) {
      /*jshint validthis: true */
      if (isString(name) && !isDefined(func)) {
        return stateBuilder[name];
      }
      if (!isFunction(func) || !isString(name)) {
        return this;
      }
      if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
        stateBuilder.$delegates[name] = stateBuilder[name];
      }
      stateBuilder[name] = func;
      return this;
    }

    /**
     * @ngdoc function
     * @name ui.router.state.$stateProvider#state
     * @methodOf ui.router.state.$stateProvider
     *
     * @description
     * Registers a state configuration under a given state name. The stateConfig object
     * has the following acceptable properties.
     *
     * <a id='template'></a>
     *
     * - **`template`** - {string|function=} - html template as a string or a function that returns
     *   an html template as a string which should be used by the uiView directives. This property
     *   takes precedence over templateUrl.
     *
     *   If `template` is a function, it will be called with the following parameters:
     *
     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
     *     applying the current state
     *
     * <a id='templateUrl'></a>
     *
     * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html
     *   template that should be used by uiView.
     *
     *   If `templateUrl` is a function, it will be called with the following parameters:
     *
     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
     *     applying the current state
     *
     * <a id='templateProvider'></a>
     *
     * - **`templateProvider`** - {function=} - Provider function that returns HTML content
     *   string.
     *
     * <a id='controller'></a>
     *
     * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly
     *   related scope or the name of a registered controller if passed as a string.
     *
     * <a id='controllerProvider'></a>
     *
     * - **`controllerProvider`** - {function=} - Injectable provider function that returns
     *   the actual controller or string.
     *
     * <a id='controllerAs'></a>
     *
     * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be
     *   published to scope under the controllerAs name.
     *
     * <a id='resolve'></a>
     *
     * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which
     *   should be injected into the controller. If any of these dependencies are promises,
     *   the router will wait for them all to be resolved or one to be rejected before the
     *   controller is instantiated. If all the promises are resolved successfully, the values
     *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any
     *   of the promises are rejected the $stateChangeError event is fired. The map object is:
     *
     *   - key - {string}: name of dependency to be injected into controller
     *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,
     *     it is injected and return value it treated as dependency. If result is a promise, it is
     *     resolved before its value is injected into controller.
     *
     * <a id='url'></a>
     *
     * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or
     *   transitioned to, the `$stateParams` service will be populated with any
     *   parameters that were passed.
     *
     * <a id='params'></a>
     *
     * - **`params`** - {object=} - An array of parameter names or regular expressions. Only
     *   use this within a state if you are not using url. Otherwise you can specify your
     *   parameters within the url. When a state is navigated or transitioned to, the
     *   $stateParams service will be populated with any parameters that were passed.
     *
     * <a id='views'></a>
     *
     * - **`views`** - {object=} - Use the views property to set up multiple views or to target views
     *   manually/explicitly.
     *
     * <a id='abstract'></a>
     *
     * - **`abstract`** - {boolean=} - An abstract state will never be directly activated,
     *   but can provide inherited properties to its common children states.
     *
     * <a id='onEnter'></a>
     *
     * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way
     *   to trigger an action or dispatch an event, such as opening a dialog.
     *
     * <a id='onExit'></a>
     *
     * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to
     *   trigger an action or dispatch an event, such as opening a dialog.
     *
     * <a id='reloadOnSearch'></a>
     *
     * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state
     *   just because a search/query parameter has changed (via $location.search() or $location.hash()).
     *   Useful for when you'd like to modify $location.search() without triggering a reload.
     *
     * <a id='data'></a>
     *
     * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.
     *
     * @example
     * <pre>
     * // Some state name examples
     *
     * // stateName can be a single top-level name (must be unique).
     * $stateProvider.state("home", {});
     *
     * // Or it can be a nested state name. This state is a child of the
     * // above "home" state.
     * $stateProvider.state("home.newest", {});
     *
     * // Nest states as deeply as needed.
     * $stateProvider.state("home.newest.abc.xyz.inception", {});
     *
     * // state() returns $stateProvider, so you can chain state declarations.
     * $stateProvider
     *   .state("home", {})
     *   .state("about", {})
     *   .state("contacts", {});
     * </pre>
     *
     * @param {string} name A unique state name, e.g. "home", "about", "contacts".
     * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
     * @param {object} definition State configuration object.
     */
    this.state = state;
    function state(name, definition) {
      /*jshint validthis: true */
      if (isObject(name)) definition = name;
      else definition.name = name;
      registerState(definition);
      return this;
    }

    /**
     * @ngdoc object
     * @name ui.router.state.$state
     *
     * @requires $rootScope
     * @requires $q
     * @requires ui.router.state.$view
     * @requires $injector
     * @requires ui.router.util.$resolve
     * @requires ui.router.state.$stateParams
     *
     * @property {object} params A param object, e.g. {sectionId: section.id)}, that
     * you'd like to test against the current active state.
     * @property {object} current A reference to the state's config object. However
     * you passed it in. Useful for accessing custom data.
     * @property {object} transition Currently pending transition. A promise that'll
     * resolve or reject.
     *
     * @description
     * `$state` service is responsible for representing states as well as transitioning
     * between them. It also provides interfaces to ask for current state or even states
     * you're coming from.
     */
      // $urlRouter is injected just to ensure it gets instantiated
    this.$get = $get;
    $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$location', '$urlRouter', '$browser'];
    function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $location,   $urlRouter,   $browser) {

      var TransitionSuperseded = $q.reject(new Error('transition superseded'));
      var TransitionPrevented = $q.reject(new Error('transition prevented'));
      var TransitionAborted = $q.reject(new Error('transition aborted'));
      var TransitionFailed = $q.reject(new Error('transition failed'));
      var currentLocation = $location.url();
      var baseHref = $browser.baseHref();

      function syncUrl() {
        if ($location.url() !== currentLocation) {
          $location.url(currentLocation);
          $location.replace();
        }
      }

      root.locals = { resolve: null, globals: { $stateParams: {} } };
      $state = {
        params: {},
        current: root.self,
        $current: root,
        transition: null
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#reload
       * @methodOf ui.router.state.$state
       *
       * @description
       * A method that force reloads the current state. All resolves are re-resolved, events are not re-fired,
       * and controllers reinstantiated (bug with controllers reinstantiating right now, fixing soon).
       *
       * @example
       * <pre>
       * var app angular.module('app', ['ui.router']);
       *
       * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
       * </pre>
       *
       * `reload()` is just an alias for:
       * <pre>
       * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: false 
     * });
       * </pre>
       */
      $state.reload = function reload() {
        $state.transitionTo($state.current, $stateParams, { reload: true, inherit: false, notify: false });
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#go
       * @methodOf ui.router.state.$state
       *
       * @description
       * Convenience method for transitioning to a new state. `$state.go` calls
       * `$state.transitionTo` internally but automatically sets options to
       * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.
       * This allows you to easily use an absolute or relative to path and specify
       * only the parameters you'd like to update (while letting unspecified parameters
       * inherit from the currently active ancestor states).
       *
       * @example
       * <pre>
       * var app = angular.module('app', ['ui.router']);
       *
       * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
       * </pre>
       * <img src='../ngdoc_assets/StateGoExamples.png'/>
       *
       * @param {string} to Absolute state name or relative state path. Some examples:
       *
       * - `$state.go('contact.detail')` - will go to the `contact.detail` state
       * - `$state.go('^')` - will go to a parent state
       * - `$state.go('^.sibling')` - will go to a sibling state
       * - `$state.go('.child.grandchild')` - will go to grandchild state
       *
       * @param {object=} params A map of the parameters that will be sent to the state,
       * will populate $stateParams. Any parameters that are not specified will be inherited from currently
       * defined parameters. This allows, for example, going to a sibling state that shares parameters
       * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
       * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
       * will get you all current parameters, etc.
       * @param {object=} options Options object. The options are:
       *
       * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
       *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
       * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
       * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
       *    defines which state to be relative from.
       * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
       * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
       *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
       *    use this when you want to force a reload when *everything* is the same, including search params.
       *
       * @returns {promise} A promise representing the state of the new transition.
       *
       * Possible success values:
       *
       * - $state.current
       *
       * <br/>Possible rejection values:
       *
       * - 'transition superseded' - when a newer transition has been started after this one
       * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
       * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
       *   when a `$stateNotFound` `event.retry` promise errors.
       * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
       * - *resolve error* - when an error has occurred with a `resolve`
       *
       */
      $state.go = function go(to, params, options) {
        return this.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#transitionTo
       * @methodOf ui.router.state.$state
       *
       * @description
       * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
       * uses `transitionTo` internally. `$state.go` is recommended in most situations.
       *
       * @example
       * <pre>
       * var app = angular.module('app', ['ui.router']);
       *
       * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
       * </pre>
       *
       * @param {string} to State name.
       * @param {object=} toParams A map of the parameters that will be sent to the state,
       * will populate $stateParams.
       * @param {object=} options Options object. The options are:
       *
       * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
       *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
       * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
       * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),
       *    defines which state to be relative from.
       * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
       * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
       *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
       *    use this when you want to force a reload when *everything* is the same, including search params.
       *
       * @returns {promise} A promise representing the state of the new transition. See
       * {@link ui.router.state.$state#methods_go $state.go}.
       */
      $state.transitionTo = function transitionTo(to, toParams, options) {
        toParams = toParams || {};
        options = extend({
          location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
        }, options || {});

        var from = $state.$current, fromParams = $state.params, fromPath = from.path;
        var evt, toState = findState(to, options.relative);

        if (!isDefined(toState)) {
          // Broadcast not found event and abort the transition if prevented
          var redirect = { to: to, toParams: toParams, options: options };

          /**
           * @ngdoc event
           * @name ui.router.state.$state#$stateNotFound
           * @eventOf ui.router.state.$state
           * @eventType broadcast on root scope
           * @description
           * Fired when a requested state **cannot be found** using the provided state name during transition.
           * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
           * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
           * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
           * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
           *
           * @param {Object} event Event object.
           * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
           * @param {State} fromState Current state object.
           * @param {Object} fromParams Current state params.
           *
           * @example
           *
           * <pre>
           * // somewhere, assume lazy.state has not been defined
           * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
           *
           * // somewhere else
           * $scope.$on('$stateNotFound',
           * function(event, unfoundState, fromState, fromParams){
         *     console.log(unfoundState.to); // "lazy.state"
         *     console.log(unfoundState.toParams); // {a:1, b:2}
         *     console.log(unfoundState.options); // {inherit:false} + default options
         * })
           * </pre>
           */
          evt = $rootScope.$broadcast('$stateNotFound', redirect, from.self, fromParams);
          if (evt.defaultPrevented) {
            syncUrl();
            return TransitionAborted;
          }

          // Allow the handler to return a promise to defer state lookup retry
          if (evt.retry) {
            if (options.$retry) {
              syncUrl();
              return TransitionFailed;
            }
            var retryTransition = $state.transition = $q.when(evt.retry);
            retryTransition.then(function() {
              if (retryTransition !== $state.transition) return TransitionSuperseded;
              redirect.options.$retry = true;
              return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
            }, function() {
              return TransitionAborted;
            });
            syncUrl();
            return retryTransition;
          }

          // Always retry once if the $stateNotFound was not prevented
          // (handles either redirect changed or state lazy-definition)
          to = redirect.to;
          toParams = redirect.toParams;
          options = redirect.options;
          toState = findState(to, options.relative);
          if (!isDefined(toState)) {
            if (options.relative) throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
            throw new Error("No such state '" + to + "'");
          }
        }
        if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
        if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
        to = toState;

        var toPath = to.path;

        // Starting from the root of the path, keep all levels that haven't changed
        var keep, state, locals = root.locals, toLocals = [];
        for (keep = 0, state = toPath[keep];
             state && state === fromPath[keep] && equalForKeys(toParams, fromParams, state.ownParams) && !options.reload;
             keep++, state = toPath[keep]) {
          locals = toLocals[keep] = state.locals;
        }

        // If we're going to the same state and all locals are kept, we've got nothing to do.
        // But clear 'transition', as we still want to cancel any other pending transitions.
        // TODO: We may not want to bump 'transition' if we're called from a location change that we've initiated ourselves,
        // because we might accidentally abort a legitimate transition initiated from code?
        if (shouldTriggerReload(to, from, locals, options) ) {
          if ( to.self.reloadOnSearch !== false )
            syncUrl();
          $state.transition = null;
          return $q.when($state.current);
        }

        // Normalize/filter parameters before we pass them to event handlers etc.
        toParams = normalize(to.params, toParams || {});

        // Broadcast start event and cancel the transition if requested
        if (options.notify) {
          /**
           * @ngdoc event
           * @name ui.router.state.$state#$stateChangeStart
           * @eventOf ui.router.state.$state
           * @eventType broadcast on root scope
           * @description
           * Fired when the state transition **begins**. You can use `event.preventDefault()`
           * to prevent the transition from happening and then the transition promise will be
           * rejected with a `'transition prevented'` value.
           *
           * @param {Object} event Event object.
           * @param {State} toState The state being transitioned to.
           * @param {Object} toParams The params supplied to the `toState`.
           * @param {State} fromState The current state, pre-transition.
           * @param {Object} fromParams The params supplied to the `fromState`.
           *
           * @example
           *
           * <pre>
           * $rootScope.$on('$stateChangeStart',
           * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
           * </pre>
           */
          evt = $rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams);
          if (evt.defaultPrevented) {
            syncUrl();
            return TransitionPrevented;
          }
        }

        // Resolve locals for the remaining states, but don't update any global state just
        // yet -- if anything fails to resolve the current state needs to remain untouched.
        // We also set up an inheritance chain for the locals here. This allows the view directive
        // to quickly look up the correct definition for each view in the current state. Even
        // though we create the locals object itself outside resolveState(), it is initially
        // empty and gets filled asynchronously. We need to keep track of the promise for the
        // (fully resolved) current locals, and pass this down the chain.
        var resolved = $q.when(locals);
        for (var l=keep; l<toPath.length; l++, state=toPath[l]) {
          locals = toLocals[l] = inherit(locals);
          resolved = resolveState(state, toParams, state===to, resolved, locals);
        }

        // Once everything is resolved, we are ready to perform the actual transition
        // and return a promise for the new state. We also keep track of what the
        // current promise is, so that we can detect overlapping transitions and
        // keep only the outcome of the last transition.
        var transition = $state.transition = resolved.then(function () {
          var l, entering, exiting;

          if ($state.transition !== transition) return TransitionSuperseded;

          // Exit 'from' states not kept
          for (l=fromPath.length-1; l>=keep; l--) {
            exiting = fromPath[l];
            if (exiting.self.onExit) {
              $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
            }
            exiting.locals = null;
          }

          // Enter 'to' states not kept
          for (l=keep; l<toPath.length; l++) {
            entering = toPath[l];
            entering.locals = toLocals[l];
            if (entering.self.onEnter) {
              $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
            }
          }

          // Run it again, to catch any transitions in callbacks
          if ($state.transition !== transition) return TransitionSuperseded;

          // Update globals in $state
          $state.$current = to;
          $state.current = to.self;
          $state.params = toParams;
          copy($state.params, $stateParams);
          $state.transition = null;

          // Update $location
          var toNav = to.navigable;
          if (options.location && toNav) {
            $location.url(toNav.url.format(toNav.locals.globals.$stateParams));

            if (options.location === 'replace') {
              $location.replace();
            }
          }

          if (options.notify) {
            /**
             * @ngdoc event
             * @name ui.router.state.$state#$stateChangeSuccess
             * @eventOf ui.router.state.$state
             * @eventType broadcast on root scope
             * @description
             * Fired once the state transition is **complete**.
             *
             * @param {Object} event Event object.
             * @param {State} toState The state being transitioned to.
             * @param {Object} toParams The params supplied to the `toState`.
             * @param {State} fromState The current state, pre-transition.
             * @param {Object} fromParams The params supplied to the `fromState`.
             */
            $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
          }
          currentLocation = $location.url();

          return $state.current;
        }, function (error) {
          if ($state.transition !== transition) return TransitionSuperseded;

          $state.transition = null;
          /**
           * @ngdoc event
           * @name ui.router.state.$state#$stateChangeError
           * @eventOf ui.router.state.$state
           * @eventType broadcast on root scope
           * @description
           * Fired when an **error occurs** during transition. It's important to note that if you
           * have any errors in your resolve functions (javascript errors, non-existent services, etc)
           * they will not throw traditionally. You must listen for this $stateChangeError event to
           * catch **ALL** errors.
           *
           * @param {Object} event Event object.
           * @param {State} toState The state being transitioned to.
           * @param {Object} toParams The params supplied to the `toState`.
           * @param {State} fromState The current state, pre-transition.
           * @param {Object} fromParams The params supplied to the `fromState`.
           * @param {Error} error The resolve error object.
           */
          $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);
          syncUrl();

          return $q.reject(error);
        });

        return transition;
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#is
       * @methodOf ui.router.state.$state
       *
       * @description
       * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
       * but only checks for the full state name. If params is supplied then it will be
       * tested for strict equality against the current active params object, so all params
       * must match with none missing and no extras.
       *
       * @example
       * <pre>
       * $state.is('contact.details.item'); // returns true
       * $state.is(contactDetailItemStateObject); // returns true
       *
       * // everything else would return false
       * </pre>
       *
       * @param {string|object} stateName The state name or state object you'd like to check.
       * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
       * to test against the current active state.
       * @returns {boolean} Returns true if it is the state.
       */
      $state.is = function is(stateOrName, params) {
        var state = findState(stateOrName);

        if (!isDefined(state)) {
          return undefined;
        }

        if ($state.$current !== state) {
          return false;
        }

        return isDefined(params) && params !== null ? angular.equals($stateParams, params) : true;
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#includes
       * @methodOf ui.router.state.$state
       *
       * @description
       * A method to determine if the current active state is equal to or is the child of the
       * state stateName. If any params are passed then they will be tested for a match as well.
       * Not all the parameters need to be passed, just the ones you'd like to test for equality.
       *
       * @example
       * <pre>
       * $state.$current.name = 'contacts.details.item';
       *
       * $state.includes("contacts"); // returns true
       * $state.includes("contacts.details"); // returns true
       * $state.includes("contacts.details.item"); // returns true
       * $state.includes("contacts.list"); // returns false
       * $state.includes("about"); // returns false
       * </pre>
       *
       * @description
       * Basic globing patterns will also work.
       *
       * @example
       * <pre>
       * $state.$current.name = 'contacts.details.item.url';
       *
       * $state.includes("*.details.*.*"); // returns true
       * $state.includes("*.details.**"); // returns true
       * $state.includes("**.item.**"); // returns true
       * $state.includes("*.details.item.url"); // returns true
       * $state.includes("*.details.*.url"); // returns true
       * $state.includes("*.details.*"); // returns false
       * $state.includes("item.**"); // returns false
       * </pre>
       *
       * @param {string} stateOrName A partial name to be searched for within the current state name.
       * @param {object} params A param object, e.g. `{sectionId: section.id}`,
       * that you'd like to test against the current active state.
       * @returns {boolean} Returns true if it does include the state
       */

      $state.includes = function includes(stateOrName, params) {
        if (isString(stateOrName) && isGlob(stateOrName)) {
          if (doesStateMatchGlob(stateOrName)) {
            stateOrName = $state.$current.name;
          } else {
            return false;
          }
        }

        var state = findState(stateOrName);
        if (!isDefined(state)) {
          return undefined;
        }

        if (!isDefined($state.$current.includes[state.name])) {
          return false;
        }

        var validParams = true;
        angular.forEach(params, function(value, key) {
          if (!isDefined($stateParams[key]) || $stateParams[key] !== value) {
            validParams = false;
          }
        });
        return validParams;
      };


      /**
       * @ngdoc function
       * @name ui.router.state.$state#href
       * @methodOf ui.router.state.$state
       *
       * @description
       * A url generation method that returns the compiled url for the given state populated with the given params.
       *
       * @example
       * <pre>
       * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
       * </pre>
       *
       * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
       * @param {object=} params An object of parameter values to fill the state's required parameters.
       * @param {object=} options Options object. The options are:
       *
       * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
       *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
       *    ancestor with a valid url).
       * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
       * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
       *    defines which state to be relative from.
       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
       *
       * @returns {string} compiled state url
       */
      $state.href = function href(stateOrName, params, options) {
        options = extend({ lossy: true, inherit: false, absolute: false, relative: $state.$current }, options || {});
        var state = findState(stateOrName, options.relative);
        if (!isDefined(state)) return null;

        params = inheritParams($stateParams, params || {}, $state.$current, state);
        var nav = (state && options.lossy) ? state.navigable : state;
        var url = (nav && nav.url) ? nav.url.format(normalize(state.params, params || {})) : null;
        if (!$locationProvider.html5Mode() && url) {
          url = "#" + $locationProvider.hashPrefix() + url;
        }

        if (baseHref !== '/') {
          if ($locationProvider.html5Mode()) {
            url = baseHref.slice(0, -1) + url;
          } else if (options.absolute){
            url = baseHref.slice(1) + url;
          }
        }

        if (options.absolute && url) {
          url = $location.protocol() + '://' +
            $location.host() +
            ($location.port() == 80 || $location.port() == 443 ? '' : ':' + $location.port()) +
            (!$locationProvider.html5Mode() && url ? '/' : '') +
            url;
        }
        return url;
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#get
       * @methodOf ui.router.state.$state
       *
       * @description
       * Returns the state configuration object for any specific state or all states.
       *
       * @param {string|object=} stateOrName If provided, will only get the config for
       * the requested state. If not provided, returns an array of ALL state configs.
       * @returns {object|array} State configuration object or array of all objects.
       */
      $state.get = function (stateOrName, context) {
        if (!isDefined(stateOrName)) {
          var list = [];
          forEach(states, function(state) { list.push(state.self); });
          return list;
        }
        var state = findState(stateOrName, context);
        return (state && state.self) ? state.self : null;
      };

      function resolveState(state, params, paramsAreFiltered, inherited, dst) {
        // Make a restricted $stateParams with only the parameters that apply to this state if
        // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
        // we also need $stateParams to be available for any $injector calls we make during the
        // dependency resolution process.
        var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params, params);
        var locals = { $stateParams: $stateParams };

        // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
        // We're also including $stateParams in this; that way the parameters are restricted
        // to the set that should be visible to the state, and are independent of when we update
        // the global $state and $stateParams values.
        dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
        var promises = [ dst.resolve.then(function (globals) {
          dst.globals = globals;
        }) ];
        if (inherited) promises.push(inherited);

        // Resolve template and dependencies for all views.
        forEach(state.views, function (view, name) {
          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
          injectables.$template = [ function () {
            return $view.load(name, { view: view, locals: locals, params: $stateParams, notify: false }) || '';
          }];

          promises.push($resolve.resolve(injectables, locals, dst.resolve, state).then(function (result) {
            // References to the controller (only instantiated at link time)
            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
              var injectLocals = angular.extend({}, injectables, locals);
              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
            } else {
              result.$$controller = view.controller;
            }
            // Provide access to the state itself for internal use
            result.$$state = state;
            result.$$controllerAs = view.controllerAs;
            dst[name] = result;
          }));
        });

        // Wait for all the promises and then return the activation object
        return $q.all(promises).then(function (values) {
          return dst;
        });
      }

      return $state;
    }

    function shouldTriggerReload(to, from, locals, options) {
      if ( to === from && ((locals === from.locals && !options.reload) || (to.self.reloadOnSearch === false)) ) {
        return true;
      }
    }
  }

  angular.module('ui.router.state')
    .value('$stateParams', {})
    .provider('$state', $StateProvider);


  $ViewProvider.$inject = [];
  function $ViewProvider() {

    this.$get = $get;
    /**
     * @ngdoc object
     * @name ui.router.state.$view
     *
     * @requires ui.router.util.$templateFactory
     * @requires $rootScope
     *
     * @description
     *
     */
    $get.$inject = ['$rootScope', '$templateFactory'];
    function $get(   $rootScope,   $templateFactory) {
      return {
        // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
        /**
         * @ngdoc function
         * @name ui.router.state.$view#load
         * @methodOf ui.router.state.$view
         *
         * @description
         *
         * @param {string} name name
         * @param {object} options option object.
         */
        load: function load(name, options) {
          var result, defaults = {
            template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
          };
          options = extend(defaults, options);

          if (options.view) {
            result = $templateFactory.fromConfig(options.view, options.params, options.locals);
          }
          if (result && options.notify) {
            /**
             * @ngdoc event
             * @name ui.router.state.$state#$viewContentLoading
             * @eventOf ui.router.state.$view
             * @eventType broadcast on root scope
             * @description
             *
             * Fired once the view **begins loading**, *before* the DOM is rendered.
             *
             * @param {Object} event Event object.
             * @param {Object} viewConfig The view config properties (template, controller, etc).
             *
             * @example
             *
             * <pre>
             * $scope.$on('$viewContentLoading',
             * function(event, viewConfig){
         *     // Access to all the view config properties.
         *     // and one special property 'targetView'
         *     // viewConfig.targetView
         * });
             * </pre>
             */
            $rootScope.$broadcast('$viewContentLoading', options);
          }
          return result;
        }
      };
    }
  }

  angular.module('ui.router.state').provider('$view', $ViewProvider);

  /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
   */
  function $ViewScrollProvider() {

    var useAnchorScroll = false;

    /**
     * @ngdoc function
     * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
     * @methodOf ui.router.state.$uiViewScrollProvider
     *
     * @description
     * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
     * scrolling based on the url anchor.
     */
    this.useAnchorScroll = function () {
      useAnchorScroll = true;
    };

    /**
     * @ngdoc object
     * @name ui.router.state.$uiViewScroll
     *
     * @requires $anchorScroll
     * @requires $timeout
     *
     * @description
     * When called with a jqLite element, it scrolls the element into view (after a
     * `$timeout` so the DOM has time to refresh).
     *
     * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
     * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
     */
    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
      if (useAnchorScroll) {
        return $anchorScroll;
      }

      return function ($element) {
        $timeout(function () {
          $element[0].scrollIntoView();
        }, 0, false);
      };
    }];
  }

  angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

  /**
   * @ngdoc directive
   * @name ui.router.state.directive:ui-view
   *
   * @requires ui.router.state.$state
   * @requires $compile
   * @requires $controller
   * @requires $injector
   * @requires ui.router.state.$uiViewScroll
   * @requires $document
   *
   * @restrict ECA
   *
   * @description
   * The ui-view directive tells $state where to place your templates.
   *
   * @param {string=} ui-view A view name. The name should be unique amongst the other views in the
   * same state. You can have views of the same name that live in different states.
   *
   * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
   * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
   * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
   * scroll ui-view elements into view when they are populated during a state activation.
   *
   * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
   * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
   *
   * @param {string=} onload Expression to evaluate whenever the view updates.
   *
   * @example
   * A view can be unnamed or named.
   * <pre>
   * <!-- Unnamed -->
   * <div ui-view></div>
   *
   * <!-- Named -->
   * <div ui-view="viewName"></div>
   * </pre>
   *
   * You can only have one unnamed view within any template (or root html). If you are only using a
   * single view and it is unnamed then you can populate it like so:
   * <pre>
   * <div ui-view></div>
   * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
   * </pre>
   *
   * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
   * config property, by name, in this case an empty name:
   * <pre>
   * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
   * </pre>
   *
   * But typically you'll only use the views property if you name your view or have more than one view
   * in the same template. There's not really a compelling reason to name a view if its the only one,
   * but you could if you wanted, like so:
   * <pre>
   * <div ui-view="main"></div>
   * </pre>
   * <pre>
   * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
   * </pre>
   *
   * Really though, you'll use views to set up multiple views:
   * <pre>
   * <div ui-view></div>
   * <div ui-view="chart"></div>
   * <div ui-view="data"></div>
   * </pre>
   *
   * <pre>
   * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
   * </pre>
   *
   * Examples for `autoscroll`:
   *
   * <pre>
   * <!-- If autoscroll present with no expression,
   *      then scroll ui-view into view -->
   * <ui-view autoscroll/>
   *
   * <!-- If autoscroll present with valid expression,
   *      then scroll ui-view into view if expression evaluates to true -->
   * <ui-view autoscroll='true'/>
   * <ui-view autoscroll='false'/>
   * <ui-view autoscroll='scopeVariable'/>
   * </pre>
   */
  $ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll'];
  function $ViewDirective(   $state,   $injector,   $uiViewScroll) {

    function getService() {
      return ($injector.has) ? function(service) {
        return $injector.has(service) ? $injector.get(service) : null;
      } : function(service) {
        try {
          return $injector.get(service);
        } catch (e) {
          return null;
        }
      };
    }

    var service = getService(),
      $animator = service('$animator'),
      $animate = service('$animate');

    // Returns a set of DOM manipulation functions based on which Angular version
    // it should use
    function getRenderer(attrs, scope) {
      var statics = function() {
        return {
          enter: function (element, target, cb) { target.after(element); cb(); },
          leave: function (element, cb) { element.remove(); cb(); }
        };
      };

      if ($animate) {
        return {
          enter: function(element, target, cb) { $animate.enter(element, null, target, cb); },
          leave: function(element, cb) { $animate.leave(element, cb); }
        };
      }

      if ($animator) {
        var animate = $animator && $animator(scope, attrs);

        return {
          enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
          leave: function(element, cb) { animate.leave(element); cb(); }
        };
      }

      return statics();
    }

    var directive = {
      restrict: 'ECA',
      terminal: true,
      priority: 400,
      transclude: 'element',
      compile: function (tElement, tAttrs, $transclude) {
        return function (scope, $element, attrs) {
          var previousEl, currentEl, currentScope, latestLocals,
            onloadExp     = attrs.onload || '',
            autoScrollExp = attrs.autoscroll,
            renderer      = getRenderer(attrs, scope);

          scope.$on('$stateChangeSuccess', function() {
            updateView(false);
          });
          scope.$on('$viewContentLoading', function() {
            updateView(false);
          });

          updateView(true);

          function cleanupLastView() {
            if (previousEl) {
              previousEl.remove();
              previousEl = null;
            }

            if (currentScope) {
              currentScope.$destroy();
              currentScope = null;
            }

            if (currentEl) {
              renderer.leave(currentEl, function() {
                previousEl = null;
              });

              previousEl = currentEl;
              currentEl = null;
            }
          }

          function updateView(firstTime) {
            var newScope        = scope.$new(),
              name            = currentEl && currentEl.data('$uiViewName'),
              previousLocals  = name && $state.$current && $state.$current.locals[name];

            if (!firstTime && previousLocals === latestLocals) return; // nothing to do

            var clone = $transclude(newScope, function(clone) {
              renderer.enter(clone, $element, function onUiViewEnter() {
                if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                  $uiViewScroll(clone);
                }
              });
              cleanupLastView();
            });

            latestLocals = $state.$current.locals[clone.data('$uiViewName')];

            currentEl = clone;
            currentScope = newScope;
            /**
             * @ngdoc event
             * @name ui.router.state.directive:ui-view#$viewContentLoaded
             * @eventOf ui.router.state.directive:ui-view
             * @eventType emits on ui-view directive scope
             * @description           *
             * Fired once the view is **loaded**, *after* the DOM is rendered.
             *
             * @param {Object} event Event object.
             */
            currentScope.$emit('$viewContentLoaded');
            currentScope.$eval(onloadExp);
          }
        };
      }
    };

    return directive;
  }

  $ViewDirectiveFill.$inject = ['$compile', '$controller', '$state'];
  function $ViewDirectiveFill ($compile, $controller, $state) {
    return {
      restrict: 'ECA',
      priority: -400,
      compile: function (tElement) {
        var initial = tElement.html();
        return function (scope, $element, attrs) {
          var name      = attrs.uiView || attrs.name || '',
            inherited = $element.inheritedData('$uiView');

          if (name.indexOf('@') < 0) {
            name = name + '@' + (inherited ? inherited.state.name : '');
          }

          $element.data('$uiViewName', name);

          var current = $state.$current,
            locals  = current && current.locals[name];

          if (! locals) {
            return;
          }

          $element.data('$uiView', { name: name, state: locals.$$state });
          $element.html(locals.$template ? locals.$template : initial);

          var link = $compile($element.contents());

          if (locals.$$controller) {
            locals.$scope = scope;
            var controller = $controller(locals.$$controller, locals);
            if (locals.$$controllerAs) {
              scope[locals.$$controllerAs] = controller;
            }
            $element.data('$ngControllerController', controller);
            $element.children().data('$ngControllerController', controller);
          }

          link(scope);
        };
      }
    };
  }

  angular.module('ui.router.state').directive('uiView', $ViewDirective);
  angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

  function parseStateRef(ref) {
    var parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
    if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
    return { state: parsed[1], paramExpr: parsed[3] || null };
  }

  function stateContext(el) {
    var stateData = el.parent().inheritedData('$uiView');

    if (stateData && stateData.state && stateData.state.name) {
      return stateData.state;
    }
  }

  /**
   * @ngdoc directive
   * @name ui.router.state.directive:ui-sref
   *
   * @requires ui.router.state.$state
   * @requires $timeout
   *
   * @restrict A
   *
   * @description
   * A directive that binds a link (`<a>` tag) to a state. If the state has an associated
   * URL, the directive will automatically generate & update the `href` attribute via
   * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking
   * the link will trigger a state transition with optional parameters.
   *
   * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
   * handled natively by the browser.
   *
   * You can also use relative state paths within ui-sref, just like the relative
   * paths passed to `$state.go()`. You just need to be aware that the path is relative
   * to the state that the link lives in, in other words the state that loaded the
   * template containing the link.
   *
   * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
   * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
   * and `reload`.
   *
   * @example
   * Here's an example of how you'd use ui-sref and how it would compile. If you have the
   * following template:
   * <pre>
   * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a>
   *
   * <ul>
   *     <li ng-repeat="contact in contacts">
   *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
   *     </li>
   * </ul>
   * </pre>
   *
   * Then the compiled html would be (assuming Html5Mode is off):
   * <pre>
   * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a>
   *
   * <ul>
   *     <li ng-repeat="contact in contacts">
   *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
   *     </li>
   *     <li ng-repeat="contact in contacts">
   *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
   *     </li>
   *     <li ng-repeat="contact in contacts">
   *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
   *     </li>
   * </ul>
   *
   * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
   * </pre>
   *
   * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
   * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
   */
  $StateRefDirective.$inject = ['$state', '$timeout'];
  function $StateRefDirective($state, $timeout) {
    var allowedOptions = ['location', 'inherit', 'reload'];

    return {
      restrict: 'A',
      require: '?^uiSrefActive',
      link: function(scope, element, attrs, uiSrefActive) {
        var ref = parseStateRef(attrs.uiSref);
        var params = null, url = null, base = stateContext(element) || $state.$current;
        var isForm = element[0].nodeName === "FORM";
        var attr = isForm ? "action" : "href", nav = true;

        var options = {
          relative: base
        };
        var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};
        angular.forEach(allowedOptions, function(option) {
          if (option in optionsOverride) {
            options[option] = optionsOverride[option];
          }
        });

        var update = function(newVal) {
          if (newVal) params = newVal;
          if (!nav) return;

          var newHref = $state.href(ref.state, params, options);

          if (uiSrefActive) {
            uiSrefActive.$$setStateInfo(ref.state, params);
          }
          if (!newHref) {
            nav = false;
            return false;
          }
          element[0][attr] = newHref;
        };

        if (ref.paramExpr) {
          scope.$watch(ref.paramExpr, function(newVal, oldVal) {
            if (newVal !== params) update(newVal);
          }, true);
          params = scope.$eval(ref.paramExpr);
        }
        update();

        if (isForm) return;

        element.bind("click", function(e) {
          var button = e.which || e.button;
          if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {
            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
            $timeout(function() {
              $state.go(ref.state, params, options);
            });
            e.preventDefault();
          }
        });
      }
    };
  }

  /**
   * @ngdoc directive
   * @name ui.router.state.directive:ui-sref-active
   *
   * @requires ui.router.state.$state
   * @requires ui.router.state.$stateParams
   * @requires $interpolate
   *
   * @restrict A
   *
   * @description
   * A directive working alongside ui-sref to add classes to an element when the
   * related ui-sref directive's state is active, and removing them when it is inactive.
   * The primary use-case is to simplify the special appearance of navigation menus
   * relying on `ui-sref`, by having the "active" state's menu button appear different,
   * distinguishing it from the inactive menu items.
   *
   * @example
   * Given the following template:
   * <pre>
   * <ul>
   *   <li ui-sref-active="active" class="item">
   *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
   *   </li>
   * </ul>
   * </pre>
   *
   * When the app state is "app.user", and contains the state parameter "user" with value "bilbobaggins",
   * the resulting HTML will appear as (note the 'active' class):
   * <pre>
   * <ul>
   *   <li ui-sref-active="active" class="item active">
   *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
   *   </li>
   * </ul>
   * </pre>
   *
   * The class name is interpolated **once** during the directives link time (any further changes to the
   * interpolated value are ignored).
   *
   * Multiple classes may be specified in a space-separated format:
   * <pre>
   * <ul>
   *   <li ui-sref-active='class1 class2 class3'>
   *     <a ui-sref="app.user">link</a>
   *   </li>
   * </ul>
   * </pre>
   */
  $StateActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
  function $StateActiveDirective($state, $stateParams, $interpolate) {
    return {
      restrict: "A",
      controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {
        var state, params, activeClass;

        // There probably isn't much point in $observing this
        activeClass = $interpolate($attrs.uiSrefActive || '', false)($scope);

        // Allow uiSref to communicate with uiSrefActive
        this.$$setStateInfo = function(newState, newParams) {
          state = $state.get(newState, stateContext($element));
          params = newParams;
          update();
        };

        $scope.$on('$stateChangeSuccess', update);

        // Update route state
        function update() {
          if ($state.$current.self === state && matchesParams()) {
            $element.addClass(activeClass);
          } else {
            $element.removeClass(activeClass);
          }
        }

        function matchesParams() {
          return !params || equalForKeys(params, $stateParams);
        }
      }]
    };
  }

  angular.module('ui.router.state')
    .directive('uiSref', $StateRefDirective)
    .directive('uiSrefActive', $StateActiveDirective);

  /**
   * @ngdoc filter
   * @name ui.router.state.filter:isState
   *
   * @requires ui.router.state.$state
   *
   * @description
   * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
   */
  $IsStateFilter.$inject = ['$state'];
  function $IsStateFilter($state) {
    return function(state) {
      return $state.is(state);
    };
  }

  /**
   * @ngdoc filter
   * @name ui.router.state.filter:includedByState
   *
   * @requires ui.router.state.$state
   *
   * @description
   * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
   */
  $IncludedByStateFilter.$inject = ['$state'];
  function $IncludedByStateFilter($state) {
    return function(state) {
      return $state.includes(state);
    };
  }

  angular.module('ui.router.state')
    .filter('isState', $IsStateFilter)
    .filter('includedByState', $IncludedByStateFilter);

  /*
   * @ngdoc object
   * @name ui.router.compat.$routeProvider
   *
   * @requires ui.router.state.$stateProvider
   * @requires ui.router.router.$urlRouterProvider
   *
   * @description
   * `$routeProvider` of the `ui.router.compat` module overwrites the existing
   * `routeProvider` from the core. This is done to provide compatibility between
   * the UI Router and the core router.
   *
   * It also provides a `when()` method to register routes that map to certain urls.
   * Behind the scenes it actually delegates either to 
   * {@link ui.router.router.$urlRouterProvider $urlRouterProvider} or to the 
   * {@link ui.router.state.$stateProvider $stateProvider} to postprocess the given 
   * router definition object.
   */
  $RouteProvider.$inject = ['$stateProvider', '$urlRouterProvider'];
  function $RouteProvider(  $stateProvider,    $urlRouterProvider) {

    var routes = [];

    onEnterRoute.$inject = ['$$state'];
    function onEnterRoute(   $$state) {
      /*jshint validthis: true */
      this.locals = $$state.locals.globals;
      this.params = this.locals.$stateParams;
    }

    function onExitRoute() {
      /*jshint validthis: true */
      this.locals = null;
      this.params = null;
    }

    this.when = when;
    /*
     * @ngdoc function
     * @name ui.router.compat.$routeProvider#when
     * @methodOf ui.router.compat.$routeProvider
     *
     * @description
     * Registers a route with a given route definition object. The route definition
     * object has the same interface the angular core route definition object has.
     * 
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router.compat']);
     *
     * app.config(function ($routeProvider) {
     *   $routeProvider.when('home', {
     *     controller: function () { ... },
     *     templateUrl: 'path/to/template'
     *   });
     * });
     * </pre>
     *
     * @param {string} url URL as string
     * @param {object} route Route definition object
     *
     * @return {object} $routeProvider - $routeProvider instance
     */
    function when(url, route) {
      /*jshint validthis: true */
      if (route.redirectTo != null) {
        // Redirect, configure directly on $urlRouterProvider
        var redirect = route.redirectTo, handler;
        if (isString(redirect)) {
          handler = redirect; // leave $urlRouterProvider to handle
        } else if (isFunction(redirect)) {
          // Adapt to $urlRouterProvider API
          handler = function (params, $location) {
            return redirect(params, $location.path(), $location.search());
          };
        } else {
          throw new Error("Invalid 'redirectTo' in when()");
        }
        $urlRouterProvider.when(url, handler);
      } else {
        // Regular route, configure as state
        $stateProvider.state(inherit(route, {
          parent: null,
          name: 'route:' + encodeURIComponent(url),
          url: url,
          onEnter: onEnterRoute,
          onExit: onExitRoute
        }));
      }
      routes.push(route);
      return this;
    }

    /*
     * @ngdoc object
     * @name ui.router.compat.$route
     *
     * @requires ui.router.state.$state
     * @requires $rootScope
     * @requires $routeParams
     *
     * @property {object} routes - Array of registered routes.
     * @property {object} params - Current route params as object.
     * @property {string} current - Name of the current route.
     *
     * @description
     * The `$route` service provides interfaces to access defined routes. It also let's
     * you access route params through `$routeParams` service, so you have fully
     * control over all the stuff you would actually get from angular's core `$route`
     * service.
     */
    this.$get = $get;
    $get.$inject = ['$state', '$rootScope', '$routeParams'];
    function $get(   $state,   $rootScope,   $routeParams) {

      var $route = {
        routes: routes,
        params: $routeParams,
        current: undefined
      };

      function stateAsRoute(state) {
        return (state.name !== '') ? state : undefined;
      }

      $rootScope.$on('$stateChangeStart', function (ev, to, toParams, from, fromParams) {
        $rootScope.$broadcast('$routeChangeStart', stateAsRoute(to), stateAsRoute(from));
      });

      $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
        $route.current = stateAsRoute(to);
        $rootScope.$broadcast('$routeChangeSuccess', stateAsRoute(to), stateAsRoute(from));
        copy(toParams, $route.params);
      });

      $rootScope.$on('$stateChangeError', function (ev, to, toParams, from, fromParams, error) {
        $rootScope.$broadcast('$routeChangeError', stateAsRoute(to), stateAsRoute(from), error);
      });

      return $route;
    }
  }

  angular.module('ui.router.compat')
    .provider('$route', $RouteProvider)
    .directive('ngView', $ViewDirective);
})(window, window.angular);
/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/*!
 * Copyright 2014 Drifty Co.
 * http://drifty.com/
 *
 * Ionic, v1.0.0-beta.11
 * A powerful HTML5 mobile app framework.
 * http://ionicframework.com/
 *
 * By @maxlynch, @benjsperry, @adamdbradley <3
 *
 * Licensed under the MIT license. Please see LICENSE for more information.
 *
 */

(function() {
  /*
   * deprecated.js
   * https://github.com/wearefractal/deprecated/
   * Copyright (c) 2014 Fractal <contact@wearefractal.com>
   * License MIT
   */
//Interval object
  var deprecated = {
    method: function(msg, log, fn) {
      var called = false;
      return function deprecatedMethod(){
        if (!called) {
          called = true;
          log(msg);
        }
        return fn.apply(this, arguments);
      };
    },

    field: function(msg, log, parent, field, val) {
      var called = false;
      var getter = function(){
        if (!called) {
          called = true;
          log(msg);
        }
        return val;
      };
      var setter = function(v) {
        if (!called) {
          called = true;
          log(msg);
        }
        val = v;
        return v;
      };
      Object.defineProperty(parent, field, {
        get: getter,
        set: setter,
        enumerable: true
      });
      return;
    }
  };


  var IonicModule = angular.module('ionic', ['ngAnimate', 'ngSanitize', 'ui.router']),
    extend = angular.extend,
    forEach = angular.forEach,
    isDefined = angular.isDefined,
    isString = angular.isString,
    jqLite = angular.element;


  /**
   * @ngdoc service
   * @name $ionicActionSheet
   * @module ionic
   * @description
   * The Action Sheet is a slide-up pane that lets the user choose from a set of options.
   * Dangerous options are highlighted in red and made obvious.
   *
   * There are easy ways to cancel out of the action sheet, such as tapping the backdrop or even
   * hitting escape on the keyboard for desktop testing.
   *
   * ![Action Sheet](http://ionicframework.com.s3.amazonaws.com/docs/controllers/actionSheet.gif)
   *
   * @usage
   * To trigger an Action Sheet in your code, use the $ionicActionSheet service in your angular controllers:
   *
   * ```js
   * angular.module('mySuperApp', ['ionic'])
   * .controller(function($scope, $ionicActionSheet, $timeout) {
 *
 *  // Triggered on a button click, or some other target
 *  $scope.show = function() {
 *
 *    // Show the action sheet
 *    var hideSheet = $ionicActionSheet.show({
 *      buttons: [
 *        { text: '<b>Share</b> This' },
 *        { text: 'Move' }
 *      ],
 *      destructiveText: 'Delete',
 *      titleText: 'Modify your album',
 *      cancelText: 'Cancel',
 *      cancel: function() {
          // add cancel code..
        },
 *      buttonClicked: function(index) {
 *        return true;
 *      }
 *    });
 *
 *    // For example's sake, hide the sheet after two seconds
 *    $timeout(function() {
 *      hideSheet();
 *    }, 2000);
 *
 *  };
 * });
   * ```
   *
   */
  IonicModule
    .factory('$ionicActionSheet', [
      '$rootScope',
      '$document',
      '$compile',
      '$animate',
      '$timeout',
      '$ionicTemplateLoader',
      '$ionicPlatform',
      function($rootScope, $document, $compile, $animate, $timeout, $ionicTemplateLoader, $ionicPlatform) {

        return {
          show: actionSheet
        };

        /**
         * @ngdoc method
         * @name $ionicActionSheet#show
         * @description
         * Load and return a new action sheet.
         *
         * A new isolated scope will be created for the
         * action sheet and the new element will be appended into the body.
         *
         * @param {object} options The options for this ActionSheet. Properties:
         *
         *  - `[Object]` `buttons` Which buttons to show.  Each button is an object with a `text` field.
         *  - `{string}` `titleText` The title to show on the action sheet.
         *  - `{string=}` `cancelText` the text for a 'cancel' button on the action sheet.
         *  - `{string=}` `destructiveText` The text for a 'danger' on the action sheet.
         *  - `{function=}` `cancel` Called if the cancel button is pressed, the backdrop is tapped or
         *     the hardware back button is pressed.
         *  - `{function=}` `buttonClicked` Called when one of the non-destructive buttons is clicked,
         *     with the index of the button that was clicked and the button object. Return true to close
         *     the action sheet, or false to keep it opened.
         *  - `{function=}` `destructiveButtonClicked` Called when the destructive button is clicked.
         *     Return true to close the action sheet, or false to keep it opened.
         *  -  `{boolean=}` `cancelOnStateChange` Whether to cancel the actionSheet when navigating
         *     to a new state.  Default true.
         *
         * @returns {function} `hideSheet` A function which, when called, hides & cancels the action sheet.
         */
        function actionSheet(opts) {
          var scope = $rootScope.$new(true);

          angular.extend(scope, {
            cancel: angular.noop,
            destructiveButtonClicked: angular.noop,
            buttonClicked: angular.noop,
            $deregisterBackButton: angular.noop,
            buttons: [],
            cancelOnStateChange: true
          }, opts || {});


          // Compile the template
          var element = scope.element = $compile('<ion-action-sheet buttons="buttons"></ion-action-sheet>')(scope);

          // Grab the sheet element for animation
          var sheetEl = jqLite(element[0].querySelector('.action-sheet-wrapper'));

          var stateChangeListenDone = scope.cancelOnStateChange ?
            $rootScope.$on('$stateChangeSuccess', function() { scope.cancel(); }) :
            angular.noop;

          // removes the actionSheet from the screen
          scope.removeSheet = function(done) {
            if (scope.removed) return;

            scope.removed = true;
            sheetEl.removeClass('action-sheet-up');
            $document[0].body.classList.remove('action-sheet-open');
            scope.$deregisterBackButton();
            stateChangeListenDone();

            $animate.removeClass(element, 'active', function() {
              scope.$destroy();
              element.remove();
              // scope.cancel.$scope is defined near the bottom
              scope.cancel.$scope = null;
              (done || angular.noop)();
            });
          };

          scope.showSheet = function(done) {
            if (scope.removed) return;

            $document[0].body.appendChild(element[0]);
            $document[0].body.classList.add('action-sheet-open');

            $animate.addClass(element, 'active', function() {
              if (scope.removed) return;
              (done || angular.noop)();
            });
            $timeout(function(){
              if (scope.removed) return;
              sheetEl.addClass('action-sheet-up');
            }, 20, false);
          };

          // registerBackButtonAction returns a callback to deregister the action
          scope.$deregisterBackButton = $ionicPlatform.registerBackButtonAction(
            function() {
              $timeout(scope.cancel);
            },
            PLATFORM_BACK_BUTTON_PRIORITY_ACTION_SHEET
          );

          // called when the user presses the cancel button
          scope.cancel = function() {
            // after the animation is out, call the cancel callback
            scope.removeSheet(opts.cancel);
          };

          scope.buttonClicked = function(index) {
            // Check if the button click event returned true, which means
            // we can close the action sheet
            if (opts.buttonClicked(index, opts.buttons[index]) === true) {
              scope.removeSheet();
            }
          };

          scope.destructiveButtonClicked = function() {
            // Check if the destructive button click event returned true, which means
            // we can close the action sheet
            if (opts.destructiveButtonClicked() === true) {
              scope.removeSheet();
            }
          };

          scope.showSheet();

          // Expose the scope on $ionicActionSheet's return value for the sake
          // of testing it.
          scope.cancel.$scope = scope;

          return scope.cancel;
        }
      }]);


  jqLite.prototype.addClass = function(cssClasses) {
    var x, y, cssClass, el, splitClasses, existingClasses;
    if (cssClasses && cssClasses != 'ng-scope' && cssClasses != 'ng-isolate-scope') {
      for(x=0; x<this.length; x++) {
        el = this[x];
        if(el.setAttribute) {

          if(cssClasses.indexOf(' ') < 0) {
            el.classList.add(cssClasses);
          } else {
            existingClasses = (' ' + (el.getAttribute('class') || '') + ' ')
              .replace(/[\n\t]/g, " ");
            splitClasses = cssClasses.split(' ');

            for (y=0; y<splitClasses.length; y++) {
              cssClass = splitClasses[y].trim();
              if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
                existingClasses += cssClass + ' ';
              }
            }
            el.setAttribute('class', existingClasses.trim());
          }
        }
      }
    }
    return this;
  };

  jqLite.prototype.removeClass = function(cssClasses) {
    var x, y, splitClasses, cssClass, el;
    if (cssClasses) {
      for(x=0; x<this.length; x++) {
        el = this[x];
        if(el.getAttribute) {
          if(cssClasses.indexOf(' ') < 0) {
            el.classList.remove(cssClasses);
          } else {
            splitClasses = cssClasses.split(' ');

            for (y=0; y<splitClasses.length; y++) {
              cssClass = splitClasses[y];
              el.setAttribute('class', (
                  (" " + (el.getAttribute('class') || '') + " ")
                    .replace(/[\n\t]/g, " ")
                    .replace(" " + cssClass.trim() + " ", " ")).trim()
              );
            }
          }
        }
      }
    }
    return this;
  };

  /**
   * @ngdoc service
   * @name $ionicBackdrop
   * @module ionic
   * @description
   * Shows and hides a backdrop over the UI.  Appears behind popups, loading,
   * and other overlays.
   *
   * Often, multiple UI components require a backdrop, but only one backdrop is
   * ever needed in the DOM at a time.
   *
   * Therefore, each component that requires the backdrop to be shown calls
   * `$ionicBackdrop.retain()` when it wants the backdrop, then `$ionicBackdrop.release()`
   * when it is done with the backdrop.
   *
   * For each time `retain` is called, the backdrop will be shown until `release` is called.
   *
   * For example, if `retain` is called three times, the backdrop will be shown until `release`
   * is called three times.
   *
   * @usage
   *
   * ```js
   * function MyController($scope, $ionicBackdrop, $timeout) {
 *   //Show a backdrop for one second
 *   $scope.action = function() {
 *     $ionicBackdrop.retain();
 *     $timeout(function() {
 *       $ionicBackdrop.release();
 *     }, 1000);
 *   };
 * }
   * ```
   */
  IonicModule
    .factory('$ionicBackdrop', [
      '$document', '$timeout',
      function($document, $timeout) {

        var el = jqLite('<div class="backdrop">');
        var backdropHolds = 0;

        $document[0].body.appendChild(el[0]);

        return {
          /**
           * @ngdoc method
           * @name $ionicBackdrop#retain
           * @description Retains the backdrop.
           */
          retain: retain,
          /**
           * @ngdoc method
           * @name $ionicBackdrop#release
           * @description
           * Releases the backdrop.
           */
          release: release,

          getElement: getElement,

          // exposed for testing
          _element: el
        };

        function retain() {
          if ( (++backdropHolds) === 1 ) {
            el.addClass('visible');
            ionic.requestAnimationFrame(function() {
              backdropHolds && el.addClass('active');
            });
          }
        }
        function release() {
          if ( (--backdropHolds) === 0 ) {
            el.removeClass('active');
            $timeout(function() {
              !backdropHolds && el.removeClass('visible');
            }, 400, false);
          }
        }

        function getElement() {
          return el;
        }

      }]);

  /**
   * @private
   */
  IonicModule
    .factory('$ionicBind', ['$parse', '$interpolate', function($parse, $interpolate) {
      var LOCAL_REGEXP = /^\s*([@=&])(\??)\s*(\w*)\s*$/;
      return function(scope, attrs, bindDefinition) {
        forEach(bindDefinition || {}, function (definition, scopeName) {
          //Adapted from angular.js $compile
          var match = definition.match(LOCAL_REGEXP) || [],
            attrName = match[3] || scopeName,
            mode = match[1], // @, =, or &
            parentGet,
            unwatch;

          switch(mode) {
            case '@':
              if (!attrs[attrName]) {
                return;
              }
              attrs.$observe(attrName, function(value) {
                scope[scopeName] = value;
              });
              // we trigger an interpolation to ensure
              // the value is there for use immediately
              if (attrs[attrName]) {
                scope[scopeName] = $interpolate(attrs[attrName])(scope);
              }
              break;

            case '=':
              if (!attrs[attrName]) {
                return;
              }
              unwatch = scope.$watch(attrs[attrName], function(value) {
                scope[scopeName] = value;
              });
              //Destroy parent scope watcher when this scope is destroyed
              scope.$on('$destroy', unwatch);
              break;

            case '&':
              /* jshint -W044 */
              if (attrs[attrName] && attrs[attrName].match(RegExp(scopeName + '\(.*?\)'))) {
                throw new Error('& expression binding "' + scopeName + '" looks like it will recursively call "' +
                  attrs[attrName] + '" and cause a stack overflow! Please choose a different scopeName.');
              }
              parentGet = $parse(attrs[attrName]);
              scope[scopeName] = function(locals) {
                return parentGet(scope, locals);
              };
              break;
          }
        });
      };
    }]);

  IonicModule
    .factory('$collectionDataSource', [
      '$cacheFactory',
      '$parse',
      '$rootScope',
      function($cacheFactory, $parse, $rootScope) {
        function hideWithTransform(element) {
          element.css(ionic.CSS.TRANSFORM, 'translate3d(-2000px,-2000px,0)');
        }

        function CollectionRepeatDataSource(options) {
          var self = this;
          this.scope = options.scope;
          this.transcludeFn = options.transcludeFn;
          this.transcludeParent = options.transcludeParent;
          this.element = options.element;

          this.keyExpr = options.keyExpr;
          this.listExpr = options.listExpr;
          this.trackByExpr = options.trackByExpr;

          this.heightGetter = options.heightGetter;
          this.widthGetter = options.widthGetter;

          this.dimensions = [];
          this.data = [];

          if (this.trackByExpr) {
            var trackByGetter = $parse(this.trackByExpr);
            var hashFnLocals = {$id: hashKey};
            this.itemHashGetter = function(index, value) {
              hashFnLocals[self.keyExpr] = value;
              hashFnLocals.$index = index;
              return trackByGetter(self.scope, hashFnLocals);
            };
          } else {
            this.itemHashGetter = function(index, value) {
              return hashKey(value);
            };
          }

          this.attachedItems = {};
          this.BACKUP_ITEMS_LENGTH = 10;
          this.backupItemsArray = [];
        }
        CollectionRepeatDataSource.prototype = {
          setup: function() {
            for (var i = 0; i < this.BACKUP_ITEMS_LENGTH; i++) {
              this.detachItem(this.createItem());
            }
          },
          destroy: function() {
            this.dimensions.length = 0;
            this.data = null;
            this.backupItemsArray.length = 0;
            this.attachedItems = {};
          },
          calculateDataDimensions: function() {
            var locals = {};
            this.dimensions = this.data.map(function(value, index) {
              locals[this.keyExpr] = value;
              locals.$index = index;
              return {
                width: this.widthGetter(this.scope, locals),
                height: this.heightGetter(this.scope, locals)
              };
            }, this);
            this.dimensions = this.beforeSiblings.concat(this.dimensions).concat(this.afterSiblings);
            this.dataStartIndex = this.beforeSiblings.length;
          },
          createItem: function() {
            var item = {};
            item.scope = this.scope.$new();

            this.transcludeFn(item.scope, function(clone) {
              clone.css('position', 'absolute');
              item.element = clone;
            });

            this.transcludeParent.append(item.element);

            return item;
          },
          getItem: function(hash) {
            if ( (item = this.attachedItems[hash]) ) {
              //do nothing, the item is good
            } else if ( (item = this.backupItemsArray.pop()) ) {
              reconnectScope(item.scope);
            } else {
              item = this.createItem();
            }
            return item;
          },
          attachItemAtIndex: function(index) {
            var value = this.data[index];

            if (index < this.dataStartIndex) {
              return this.beforeSiblings[index];
            } else if (index > this.data.length) {
              return this.afterSiblings[index - this.data.length - this.dataStartIndex];
            }

            var hash = this.itemHashGetter(index, value);
            var item = this.getItem(hash);

            if (item.scope.$index !== index || item.scope[this.keyExpr] !== value) {
              item.scope[this.keyExpr] = value;
              item.scope.$index = index;
              item.scope.$first = (index === 0);
              item.scope.$last = (index === (this.getLength() - 1));
              item.scope.$middle = !(item.scope.$first || item.scope.$last);
              item.scope.$odd = !(item.scope.$even = (index&1) === 0);

              //We changed the scope, so digest if needed
              if (!$rootScope.$$phase) {
                item.scope.$digest();
              }
            }

            item.hash = hash;
            this.attachedItems[hash] = item;

            return item;
          },
          destroyItem: function(item) {
            item.element.remove();
            item.scope.$destroy();
            item.scope = null;
            item.element = null;
          },
          detachItem: function(item) {
            delete this.attachedItems[item.hash];

            //If it's an outside item, only hide it. These items aren't part of collection
            //repeat's list, only sit outside
            if (item.isOutside) {
              hideWithTransform(item.element);

              // If we are at the limit of backup items, just get rid of the this element
            } else if (this.backupItemsArray.length >= this.BACKUP_ITEMS_LENGTH) {
              this.destroyItem(item);
              // Otherwise, add it to our backup items
            } else {
              this.backupItemsArray.push(item);
              hideWithTransform(item.element);
              //Don't .$destroy(), just stop watchers and events firing
              disconnectScope(item.scope);
            }

          },
          getLength: function() {
            return this.dimensions && this.dimensions.length || 0;
          },
          setData: function(value, beforeSiblings, afterSiblings) {
            this.data = value || [];
            this.beforeSiblings = beforeSiblings || [];
            this.afterSiblings = afterSiblings || [];
            this.calculateDataDimensions();

            this.afterSiblings.forEach(function(item) {
              item.element.css({position: 'absolute', top: '0', left: '0' });
              hideWithTransform(item.element);
            });
          },
        };

        return CollectionRepeatDataSource;
      }]);

  /**
   * Computes a hash of an 'obj'.
   * Hash of a:
   *  string is string
   *  number is number as string
   *  object is either result of calling $$hashKey function on the object or uniquely generated id,
   *         that is also assigned to the $$hashKey property of the object.
   *
   * @param obj
   * @returns {string} hash string such that the same input will have the same hash string.
   *         The resulting string key is in 'type:hashKey' format.
   */
  function hashKey(obj) {
    var objType = typeof obj,
      key;

    if (objType == 'object' && obj !== null) {
      if (typeof (key = obj.$$hashKey) == 'function') {
        // must invoke on object to keep the right this
        key = obj.$$hashKey();
      } else if (key === undefined) {
        key = obj.$$hashKey = ionic.Utils.nextUid();
      }
    } else {
      key = obj;
    }

    return objType + ':' + key;
  }

  function disconnectScope(scope) {
    if (scope.$root === scope) {
      return; // we can't disconnect the root node;
    }
    var parent = scope.$parent;
    scope.$$disconnected = true;
    // See Scope.$destroy
    if (parent.$$childHead === scope) {
      parent.$$childHead = scope.$$nextSibling;
    }
    if (parent.$$childTail === scope) {
      parent.$$childTail = scope.$$prevSibling;
    }
    if (scope.$$prevSibling) {
      scope.$$prevSibling.$$nextSibling = scope.$$nextSibling;
    }
    if (scope.$$nextSibling) {
      scope.$$nextSibling.$$prevSibling = scope.$$prevSibling;
    }
    scope.$$nextSibling = scope.$$prevSibling = null;
  }

  function reconnectScope(scope) {
    if (scope.$root === scope) {
      return; // we can't disconnect the root node;
    }
    if (!scope.$$disconnected) {
      return;
    }
    var parent = scope.$parent;
    scope.$$disconnected = false;
    // See Scope.$new for this logic...
    scope.$$prevSibling = parent.$$childTail;
    if (parent.$$childHead) {
      parent.$$childTail.$$nextSibling = scope;
      parent.$$childTail = scope;
    } else {
      parent.$$childHead = parent.$$childTail = scope;
    }
  }


  IonicModule
    .factory('$collectionRepeatManager', [
      '$rootScope',
      '$timeout',
      function($rootScope, $timeout) {
        /**
         * Vocabulary: "primary" and "secondary" size/direction/position mean
         * "y" and "x" for vertical scrolling, or "x" and "y" for horizontal scrolling.
         */
        function CollectionRepeatManager(options) {
          var self = this;
          this.dataSource = options.dataSource;
          this.element = options.element;
          this.scrollView = options.scrollView;

          this.isVertical = !!this.scrollView.options.scrollingY;
          this.renderedItems = {};
          this.dimensions = [];
          this.setCurrentIndex(0);

          //Override scrollview's render callback
          this.scrollView.__$callback = this.scrollView.__callback;
          this.scrollView.__callback = angular.bind(this, this.renderScroll);

          function getViewportSize() { return self.viewportSize; }
          //Set getters and setters to match whether this scrollview is vertical or not
          if (this.isVertical) {
            this.scrollView.options.getContentHeight = getViewportSize;

            this.scrollValue = function() {
              return this.scrollView.__scrollTop;
            };
            this.scrollMaxValue = function() {
              return this.scrollView.__maxScrollTop;
            };
            this.scrollSize = function() {
              return this.scrollView.__clientHeight;
            };
            this.secondaryScrollSize = function() {
              return this.scrollView.__clientWidth;
            };
            this.transformString = function(y, x) {
              return 'translate3d('+x+'px,'+y+'px,0)';
            };
            this.primaryDimension = function(dim) {
              return dim.height;
            };
            this.secondaryDimension = function(dim) {
              return dim.width;
            };
          } else {
            this.scrollView.options.getContentWidth = getViewportSize;

            this.scrollValue = function() {
              return this.scrollView.__scrollLeft;
            };
            this.scrollMaxValue = function() {
              return this.scrollView.__maxScrollLeft;
            };
            this.scrollSize = function() {
              return this.scrollView.__clientWidth;
            };
            this.secondaryScrollSize = function() {
              return this.scrollView.__clientHeight;
            };
            this.transformString = function(x, y) {
              return 'translate3d('+x+'px,'+y+'px,0)';
            };
            this.primaryDimension = function(dim) {
              return dim.width;
            };
            this.secondaryDimension = function(dim) {
              return dim.height;
            };
          }
        }

        CollectionRepeatManager.prototype = {
          destroy: function() {
            this.renderedItems = {};
            this.render = angular.noop;
            this.calculateDimensions = angular.noop;
            this.dimensions = [];
          },

          /*
           * Pre-calculate the position of all items in the data list.
           * Do this using the provided width and height (primarySize and secondarySize)
           * provided by the dataSource.
           */
          calculateDimensions: function() {
            /*
             * For the sake of explanations below, we're going to pretend we are scrolling
             * vertically: Items are laid out with primarySize being height,
             * secondarySize being width.
             */
            var primaryPos = 0;
            var secondaryPos = 0;
            var secondaryScrollSize = this.secondaryScrollSize();
            var previousItem;

            this.dataSource.beforeSiblings && this.dataSource.beforeSiblings.forEach(calculateSize, this);
            var beforeSize = primaryPos + (previousItem ? previousItem.primarySize : 0);

            primaryPos = secondaryPos = 0;
            previousItem = null;


            var dimensions = this.dataSource.dimensions.map(calculateSize, this);
            var totalSize = primaryPos + (previousItem ? previousItem.primarySize : 0);

            return {
              beforeSize: beforeSize,
              totalSize: totalSize,
              dimensions: dimensions
            };

            function calculateSize(dim) {

              //Each dimension is an object {width: Number, height: Number} provided by
              //the dataSource
              var rect = {
                //Get the height out of the dimension object
                primarySize: this.primaryDimension(dim),
                //Max out the item's width to the width of the scrollview
                secondarySize: Math.min(this.secondaryDimension(dim), secondaryScrollSize)
              };

              //If this isn't the first item
              if (previousItem) {
                //Move the item's x position over by the width of the previous item
                secondaryPos += previousItem.secondarySize;
                //If the y position is the same as the previous item and
                //the x position is bigger than the scroller's width
                if (previousItem.primaryPos === primaryPos &&
                  secondaryPos + rect.secondarySize > secondaryScrollSize) {
                  //Then go to the next row, with x position 0
                  secondaryPos = 0;
                  primaryPos += previousItem.primarySize;
                }
              }

              rect.primaryPos = primaryPos;
              rect.secondaryPos = secondaryPos;

              previousItem = rect;
              return rect;
            }
          },
          resize: function() {
            var result = this.calculateDimensions();
            this.dimensions = result.dimensions;
            this.viewportSize = result.totalSize;
            this.beforeSize = result.beforeSize;
            this.setCurrentIndex(0);
            this.render(true);
            if (!this.dataSource.backupItemsArray.length) {
              this.dataSource.setup();
            }
          },
          /*
           * setCurrentIndex sets the index in the list that matches the scroller's position.
           * Also save the position in the scroller for next and previous items (if they exist)
           */
          setCurrentIndex: function(index, height) {
            var currentPos = (this.dimensions[index] || {}).primaryPos || 0;
            this.currentIndex = index;

            this.hasPrevIndex = index > 0;
            if (this.hasPrevIndex) {
              this.previousPos = Math.max(
                  currentPos - this.dimensions[index - 1].primarySize,
                this.dimensions[index - 1].primaryPos
              );
            }
            this.hasNextIndex = index + 1 < this.dataSource.getLength();
            if (this.hasNextIndex) {
              this.nextPos = Math.min(
                  currentPos + this.dimensions[index + 1].primarySize,
                this.dimensions[index + 1].primaryPos
              );
            }
          },
          /**
           * override the scroller's render callback to check if we need to
           * re-render our collection
           */
          renderScroll: ionic.animationFrameThrottle(function(transformLeft, transformTop, zoom, wasResize) {
            if (this.isVertical) {
              this.renderIfNeeded(transformTop);
            } else {
              this.renderIfNeeded(transformLeft);
            }
            return this.scrollView.__$callback(transformLeft, transformTop, zoom, wasResize);
          }),
          renderIfNeeded: function(scrollPos) {
            if ((this.hasNextIndex && scrollPos >= this.nextPos) ||
              (this.hasPrevIndex && scrollPos < this.previousPos)) {
              // Math.abs(transformPos - this.lastRenderScrollValue) > 100) {
              this.render();
            }
          },
          /*
           * getIndexForScrollValue: Given the most recent data index and a new scrollValue,
           * find the data index that matches that scrollValue.
           *
           * Strategy (if we are scrolling down): keep going forward in the dimensions list,
           * starting at the given index, until an item with height matching the new scrollValue
           * is found.
           *
           * This is a while loop. In the worst case it will have to go through the whole list
           * (eg to scroll from top to bottom).  The most common case is to scroll
           * down 1-3 items at a time.
           *
           * While this is not as efficient as it could be, optimizing it gives no noticeable
           * benefit.  We would have to use a new memory-intensive data structure for dimensions
           * to fully optimize it.
           */
          getIndexForScrollValue: function(i, scrollValue) {
            var rect;
            //Scrolling up
            if (scrollValue <= this.dimensions[i].primaryPos) {
              while ( (rect = this.dimensions[i - 1]) && rect.primaryPos > scrollValue) {
                i--;
              }
              //Scrolling down
            } else {
              while ( (rect = this.dimensions[i + 1]) && rect.primaryPos < scrollValue) {
                i++;
              }
            }
            return i;
          },
          /*
           * render: Figure out the scroll position, the index matching it, and then tell
           * the data source to render the correct items into the DOM.
           */
          render: function(shouldRedrawAll) {
            var self = this;
            var i;
            var isOutOfBounds = ( this.currentIndex >= this.dataSource.getLength() );
            // We want to remove all the items and redraw everything if we're out of bounds
            // or a flag is passed in.
            if (isOutOfBounds || shouldRedrawAll) {
              for (i in this.renderedItems) {
                this.removeItem(i);
              }
              // Just don't render anything if we're out of bounds
              if (isOutOfBounds) return;
            }

            var rect;
            var scrollValue = this.scrollValue();
            // Scroll size = how many pixels are visible in the scroller at one time
            var scrollSize = this.scrollSize();
            // We take the current scroll value and add it to the scrollSize to get
            // what scrollValue the current visible scroll area ends at.
            var scrollSizeEnd = scrollSize + scrollValue;
            // Get the new start index for scrolling, based on the current scrollValue and
            // the most recent known index
            var startIndex = this.getIndexForScrollValue(this.currentIndex, scrollValue);

            // If we aren't on the first item, add one row of items before so that when the user is
            // scrolling up he sees the previous item
            var renderStartIndex = Math.max(startIndex - 1, 0);
            // Keep adding items to the 'extra row above' until we get to a new row.
            // This is for the case where there are multiple items on one row above
            // the current item; we want to keep adding items above until
            // a new row is reached.
            while (renderStartIndex > 0 &&
              (rect = this.dimensions[renderStartIndex]) &&
              rect.primaryPos === this.dimensions[startIndex - 1].primaryPos) {
              renderStartIndex--;
            }

            // Keep rendering items, adding them until we are past the end of the visible scroll area
            i = renderStartIndex;
            while ((rect = this.dimensions[i]) && (rect.primaryPos - rect.primarySize < scrollSizeEnd)) {
              doRender(i++);
            }
            //Add two more items at the end
            doRender(i++);
            doRender(i);
            var renderEndIndex = i;

            // Remove any items that were rendered and aren't visible anymore
            for (i in this.renderedItems) {
              if (i < renderStartIndex || i > renderEndIndex) {
                this.removeItem(i);
              }
            }

            this.setCurrentIndex(startIndex);

            function doRender(dataIndex) {
              var rect = self.dimensions[dataIndex];
              if (!rect) {

              }else if (dataIndex < self.dataSource.dataStartIndex) {
                // do nothing
              } else {
                self.renderItem(dataIndex, rect.primaryPos - self.beforeSize, rect.secondaryPos);
              }
            }
          },
          renderItem: function(dataIndex, primaryPos, secondaryPos) {
            // Attach an item, and set its transform position to the required value
            var item = this.dataSource.attachItemAtIndex(dataIndex);
            if (item && item.element) {
              if (item.primaryPos !== primaryPos || item.secondaryPos !== secondaryPos) {
                item.element.css(ionic.CSS.TRANSFORM, this.transformString(
                  primaryPos, secondaryPos
                ));
                item.primaryPos = primaryPos;
                item.secondaryPos = secondaryPos;
              }
              // Save the item in rendered items
              this.renderedItems[dataIndex] = item;
            } else {
              // If an item at this index doesn't exist anymore, be sure to delete
              // it from rendered items
              delete this.renderedItems[dataIndex];
            }
          },
          removeItem: function(dataIndex) {
            // Detach a given item
            var item = this.renderedItems[dataIndex];
            if (item) {
              item.primaryPos = item.secondaryPos = null;
              this.dataSource.detachItem(item);
              delete this.renderedItems[dataIndex];
            }
          }
        };

        var exceptions = {'renderScroll':1, 'renderIfNeeded':1};
        forEach(CollectionRepeatManager.prototype, function(method, key) {
          if (exceptions[key]) return;
          CollectionRepeatManager.prototype[key] = function() {
            void 0;
            return method.apply(this, arguments);
          };
        });

        return CollectionRepeatManager;
      }]);


  function delegateService(methodNames) {
    return ['$log', function($log) {
      var delegate = this;

      var instances = this._instances = [];
      this._registerInstance = function(instance, handle) {
        instance.$$delegateHandle = handle;
        instances.push(instance);

        return function deregister() {
          var index = instances.indexOf(instance);
          if (index !== -1) {
            instances.splice(index, 1);
          }
        };
      };

      this.$getByHandle = function(handle) {
        if (!handle) {
          return delegate;
        }
        return new InstanceForHandle(handle);
      };

      /*
       * Creates a new object that will have all the methodNames given,
       * and call them on the given the controller instance matching given
       * handle.
       * The reason we don't just let $getByHandle return the controller instance
       * itself is that the controller instance might not exist yet.
       *
       * We want people to be able to do
       * `var instance = $ionicScrollDelegate.$getByHandle('foo')` on controller
       * instantiation, but on controller instantiation a child directive
       * may not have been compiled yet!
       *
       * So this is our way of solving this problem: we create an object
       * that will only try to fetch the controller with given handle
       * once the methods are actually called.
       */
      function InstanceForHandle(handle) {
        this.handle = handle;
      }
      methodNames.forEach(function(methodName) {
        InstanceForHandle.prototype[methodName] = function() {
          var handle = this.handle;
          var args = arguments;
          var matchingInstancesFound = 0;
          var finalResult;
          var result;

          //This logic is repeated below; we could factor some of it out to a function
          //but don't because it lets this method be more performant (one loop versus 2)
          instances.forEach(function(instance) {
            if (instance.$$delegateHandle === handle) {
              matchingInstancesFound++;
              result = instance[methodName].apply(instance, args);
              //Only return the value from the first call
              if (matchingInstancesFound === 1) {
                finalResult = result;
              }
            }
          });

          if (!matchingInstancesFound) {
            return $log.warn(
                'Delegate for handle "'+this.handle+'" could not find a ' +
                'corresponding element with delegate-handle="'+this.handle+'"! ' +
                methodName + '() was not called!\n' +
                'Possible cause: If you are calling ' + methodName + '() immediately, and ' +
                'your element with delegate-handle="' + this.handle + '" is a child of your ' +
                'controller, then your element may not be compiled yet. Put a $timeout ' +
                'around your call to ' + methodName + '() and try again.'
            );
          }

          return finalResult;
        };
        delegate[methodName] = function() {
          var args = arguments;
          var finalResult;
          var result;

          //This logic is repeated above
          instances.forEach(function(instance, index) {
            result = instance[methodName].apply(instance, args);
            //Only return the value from the first call
            if (index === 0) {
              finalResult = result;
            }
          });

          return finalResult;
        };

        function callMethod(instancesToUse, methodName, args) {
          var finalResult;
          var result;
          instancesToUse.forEach(function(instance, index) {
            result = instance[methodName].apply(instance, args);
            //Make it so the first result is the one returned
            if (index === 0) {
              finalResult = result;
            }
          });
          return finalResult;
        }
      });
    }];
  }

  /**
   * @ngdoc service
   * @name $ionicGesture
   * @module ionic
   * @description An angular service exposing ionic
   * {@link ionic.utility:ionic.EventController}'s gestures.
   */
  IonicModule
    .factory('$ionicGesture', [function() {
      return {
        /**
         * @ngdoc method
         * @name $ionicGesture#on
         * @description Add an event listener for a gesture on an element. See {@link ionic.utility:ionic.EventController#onGesture}.
         * @param {string} eventType The gesture event to listen for.
         * @param {function(e)} callback The function to call when the gesture
         * happens.
         * @param {element} $element The angular element to listen for the event on.
         * @returns {ionic.Gesture} The gesture object (use this to remove the gesture later on).
         */
        on: function(eventType, cb, $element) {
          return window.ionic.onGesture(eventType, cb, $element[0]);
        },
        /**
         * @ngdoc method
         * @name $ionicGesture#off
         * @description Remove an event listener for a gesture on an element. See {@link ionic.utility:ionic.EventController#offGesture}.
         * @param {ionic.Gesture} gesture The gesture that should be removed.
         * @param {string} eventType The gesture event to remove the listener for.
         * @param {function(e)} callback The listener to remove.
         */
        off: function(gesture, eventType, cb) {
          return window.ionic.offGesture(gesture, eventType, cb);
        }
      };
    }]);


  var LOADING_TPL =
    '<div class="loading-container">' +
    '<div class="loading">' +
    '</div>' +
    '</div>';

  var LOADING_HIDE_DEPRECATED = '$ionicLoading instance.hide() has been deprecated. Use $ionicLoading.hide().';
  var LOADING_SHOW_DEPRECATED = '$ionicLoading instance.show() has been deprecated. Use $ionicLoading.show().';
  var LOADING_SET_DEPRECATED = '$ionicLoading instance.setContent() has been deprecated. Use $ionicLoading.show({ template: \'my content\' }).';

  /**
   * @ngdoc service
   * @name $ionicLoading
   * @module ionic
   * @description
   * An overlay that can be used to indicate activity while blocking user
   * interaction.
   *
   * @usage
   * ```js
   * angular.module('LoadingApp', ['ionic'])
   * .controller('LoadingCtrl', function($scope, $ionicLoading) {
 *   $scope.show = function() {
 *     $ionicLoading.show({
 *       template: 'Loading...'
 *     });
 *   };
 *   $scope.hide = function(){
 *     $ionicLoading.hide();
 *   };
 * });
   * ```
   */
  /**
   * @ngdoc object
   * @name $ionicLoadingConfig
   * @module ionic
   * @description
   * Set the default options to be passed to the {@link ionic.service:$ionicLoading} service.
   *
   * @usage
   * ```js
   * var app = angular.module('myApp', ['ionic'])
   * app.constant('$ionicLoadingConfig', {
 *   template: 'Default Loading Template...'
 * });
   * app.controller('AppCtrl', function($scope, $ionicLoading) {
 *   $scope.showLoading = function() {
 *     $ionicLoading.show(); //options default to values in $ionicLoadingConfig
 *   };
 * });
   * ```
   */
  IonicModule
    .constant('$ionicLoadingConfig', {
      template: '<i class="ion-loading-d"></i>'
    })
    .factory('$ionicLoading', [
      '$ionicLoadingConfig',
      '$document',
      '$ionicTemplateLoader',
      '$ionicBackdrop',
      '$timeout',
      '$q',
      '$log',
      '$compile',
      '$ionicPlatform',
      function($ionicLoadingConfig, $document, $ionicTemplateLoader, $ionicBackdrop, $timeout, $q, $log, $compile, $ionicPlatform) {

        var loaderInstance;
        //default values
        var deregisterBackAction = angular.noop;
        var loadingShowDelay = $q.when();

        return {
          /**
           * @ngdoc method
           * @name $ionicLoading#show
           * @description Shows a loading indicator. If the indicator is already shown,
           * it will set the options given and keep the indicator shown.
           * @param {object} opts The options for the loading indicator. Available properties:
           *  - `{string=}` `template` The html content of the indicator.
           *  - `{string=}` `templateUrl` The url of an html template to load as the content of the indicator.
           *  - `{boolean=}` `noBackdrop` Whether to hide the backdrop. By default it will be shown.
           *  - `{number=}` `delay` How many milliseconds to delay showing the indicator. By default there is no delay.
           *  - `{number=}` `duration` How many milliseconds to wait until automatically
           *  hiding the indicator. By default, the indicator will be shown until `.hide()` is called.
           */
          show: showLoader,
          /**
           * @ngdoc method
           * @name $ionicLoading#hide
           * @description Hides the loading indicator, if shown.
           */
          hide: hideLoader,
          /**
           * @private for testing
           */
          _getLoader: getLoader
        };

        function getLoader() {
          if (!loaderInstance) {
            loaderInstance = $ionicTemplateLoader.compile({
              template: LOADING_TPL,
              appendTo: $document[0].body
            })
              .then(function(loader) {
                var self = loader;

                loader.show = function(options) {
                  var templatePromise = options.templateUrl ?
                    $ionicTemplateLoader.load(options.templateUrl) :
                    //options.content: deprecated
                    $q.when(options.template || options.content || '');


                  if (!this.isShown) {
                    //options.showBackdrop: deprecated
                    this.hasBackdrop = !options.noBackdrop && options.showBackdrop !== false;
                    if (this.hasBackdrop) {
                      $ionicBackdrop.retain();
                      $ionicBackdrop.getElement().addClass('backdrop-loading');
                    }
                  }

                  if (options.duration) {
                    $timeout.cancel(this.durationTimeout);
                    this.durationTimeout = $timeout(
                      angular.bind(this, this.hide),
                      +options.duration
                    );
                  }

                  templatePromise.then(function(html) {
                    if (html) {
                      var loading = self.element.children();
                      loading.html(html);
                      $compile(loading.contents())(self.scope);
                    }

                    //Don't show until template changes
                    if (self.isShown) {
                      self.element.addClass('visible');
                      ionic.requestAnimationFrame(function() {
                        self.isShown && self.element.addClass('active');
                        $document[0].body.classList.add('loading-active');
                      });
                    }
                  });

                  this.isShown = true;
                };
                loader.hide = function() {
                  if (this.isShown) {
                    if (this.hasBackdrop) {
                      $ionicBackdrop.release();
                      $ionicBackdrop.getElement().removeClass('backdrop-loading');
                    }
                    self.element.removeClass('active');
                    $document[0].body.classList.remove('loading-active');
                    setTimeout(function() {
                      !self.isShown && self.element.removeClass('visible');
                    }, 200);
                  }
                  $timeout.cancel(this.durationTimeout);
                  this.isShown = false;
                };

                return loader;
              });
          }
          return loaderInstance;
        }

        function showLoader(options) {
          options = extend($ionicLoadingConfig || {}, options || {});
          var delay = options.delay || options.showDelay || 0;

          //If loading.show() was called previously, cancel it and show with our new options
          loadingShowDelay && $timeout.cancel(loadingShowDelay);
          loadingShowDelay = $timeout(angular.noop, delay);

          loadingShowDelay.then(getLoader).then(function(loader) {
            deregisterBackAction();
            //Disable hardware back button while loading
            deregisterBackAction = $ionicPlatform.registerBackButtonAction(
              angular.noop,
              PLATFORM_BACK_BUTTON_PRIORITY_LOADING
            );
            return loader.show(options);
          });

          return {
            hide: deprecated.method(LOADING_HIDE_DEPRECATED, $log.error, hideLoader),
            show: deprecated.method(LOADING_SHOW_DEPRECATED, $log.error, function() {
              showLoader(options);
            }),
            setContent: deprecated.method(LOADING_SET_DEPRECATED, $log.error, function(content) {
              getLoader().then(function(loader) {
                loader.show({ template: content });
              });
            })
          };
        }

        function hideLoader() {
          deregisterBackAction();
          $timeout.cancel(loadingShowDelay);
          getLoader().then(function(loader) {
            loader.hide();
          });
        }
      }]);

  /**
   * @ngdoc service
   * @name $ionicModal
   * @module ionic
   * @description
   *
   * Related: {@link ionic.controller:ionicModal ionicModal controller}.
   *
   * The Modal is a content pane that can go over the user's main view
   * temporarily.  Usually used for making a choice or editing an item.
   *
   * Put the content of the modal inside of an `<ion-modal-view>` element.
   *
   * Note: a modal will broadcast 'modal.shown', 'modal.hidden', and 'modal.removed' events from its originating
   * scope, passing in itself as an event argument. Both the modal.removed and modal.hidden events are
   * called when the modal is removed.
   *
   * @usage
   * ```html
   * <script id="my-modal.html" type="text/ng-template">
   *   <ion-modal-view>
   *     <ion-header-bar>
   *       <h1 class="title">My Modal title</h1>
   *     </ion-header-bar>
   *     <ion-content>
   *       Hello!
   *     </ion-content>
   *   </ion-modal-view>
   * </script>
   * ```
   * ```js
   * angular.module('testApp', ['ionic'])
   * .controller('MyController', function($scope, $ionicModal) {
 *   $ionicModal.fromTemplateUrl('my-modal.html', {
 *     scope: $scope,
 *     animation: 'slide-in-up'
 *   }).then(function(modal) {
 *     $scope.modal = modal;
 *   });
 *   $scope.openModal = function() {
 *     $scope.modal.show();
 *   };
 *   $scope.closeModal = function() {
 *     $scope.modal.hide();
 *   };
 *   //Cleanup the modal when we're done with it!
 *   $scope.$on('$destroy', function() {
 *     $scope.modal.remove();
 *   });
 *   // Execute action on hide modal
 *   $scope.$on('modal.hidden', function() {
 *     // Execute action
 *   });
 *   // Execute action on remove modal
 *   $scope.$on('modal.removed', function() {
 *     // Execute action
 *   });
 * });
   * ```
   */
  IonicModule
    .factory('$ionicModal', [
      '$rootScope',
      '$document',
      '$compile',
      '$timeout',
      '$ionicPlatform',
      '$ionicTemplateLoader',
      '$q',
      '$log',
      function($rootScope, $document, $compile, $timeout, $ionicPlatform, $ionicTemplateLoader, $q, $log) {

        /**
         * @ngdoc controller
         * @name ionicModal
         * @module ionic
         * @description
         * Instantiated by the {@link ionic.service:$ionicModal} service.
         *
         * Be sure to call [remove()](#remove) when you are done with each modal
         * to clean it up and avoid memory leaks.
         *
         * Note: a modal will broadcast 'modal.shown', 'modal.hidden', and 'modal.removed' events from its originating
         * scope, passing in itself as an event argument. Note: both modal.removed and modal.hidden are
         * called when the modal is removed.
         */
        var ModalView = ionic.views.Modal.inherit({
          /**
           * @ngdoc method
           * @name ionicModal#initialize
           * @description Creates a new modal controller instance.
           * @param {object} options An options object with the following properties:
           *  - `{object=}` `scope` The scope to be a child of.
           *    Default: creates a child of $rootScope.
           *  - `{string=}` `animation` The animation to show & hide with.
           *    Default: 'slide-in-up'
           *  - `{boolean=}` `focusFirstInput` Whether to autofocus the first input of
           *    the modal when shown.  Default: false.
           *  - `{boolean=}` `backdropClickToClose` Whether to close the modal on clicking the backdrop.
           *    Default: true.
           *  - `{boolean=}` `hardwareBackButtonClose` Whether the modal can be closed using the hardware
           *    back button on Android and similar devices.  Default: true.
           */
          initialize: function(opts) {
            ionic.views.Modal.prototype.initialize.call(this, opts);
            this.animation = opts.animation || 'slide-in-up';
          },

          /**
           * @ngdoc method
           * @name ionicModal#show
           * @description Show this modal instance.
           * @returns {promise} A promise which is resolved when the modal is finished animating in.
           */
          show: function(target) {
            var self = this;

            if(self.scope.$$destroyed) {
              $log.error('Cannot call ' +  self.viewType + '.show() after remove(). Please create a new ' +  self.viewType + ' instance.');
              return;
            }

            var modalEl = jqLite(self.modalEl);

            self.el.classList.remove('hide');
            $timeout(function(){
              $document[0].body.classList.add(self.viewType + '-open');
            }, 400);

            if(!self.el.parentElement) {
              modalEl.addClass(self.animation);
              $document[0].body.appendChild(self.el);
            }

            if(target && self.positionView) {
              self.positionView(target, modalEl);
            }

            modalEl.addClass('ng-enter active')
              .removeClass('ng-leave ng-leave-active');

            self._isShown = true;
            self._deregisterBackButton = $ionicPlatform.registerBackButtonAction(
              self.hardwareBackButtonClose ? angular.bind(self, self.hide) : angular.noop,
              PLATFORM_BACK_BUTTON_PRIORITY_MODAL
            );

            self._isOpenPromise = $q.defer();

            ionic.views.Modal.prototype.show.call(self);

            $timeout(function(){
              modalEl.addClass('ng-enter-active');
              ionic.trigger('resize');
              self.scope.$parent && self.scope.$parent.$broadcast(self.viewType + '.shown', self);
              self.el.classList.add('active');
            }, 20);

            return $timeout(function() {
              //After animating in, allow hide on backdrop click
              self.$el.on('click', function(e) {
                if (self.backdropClickToClose && e.target === self.el) {
                  self.hide();
                }
              });
            }, 400);
          },

          /**
           * @ngdoc method
           * @name ionicModal#hide
           * @description Hide this modal instance.
           * @returns {promise} A promise which is resolved when the modal is finished animating out.
           */
          hide: function() {
            var self = this;
            var modalEl = jqLite(self.modalEl);

            self.el.classList.remove('active');
            modalEl.addClass('ng-leave');

            $timeout(function(){
              modalEl.addClass('ng-leave-active')
                .removeClass('ng-enter ng-enter-active active');
            }, 20);

            self.$el.off('click');
            self._isShown = false;
            self.scope.$parent && self.scope.$parent.$broadcast(self.viewType + '.hidden', self);
            self._deregisterBackButton && self._deregisterBackButton();

            ionic.views.Modal.prototype.hide.call(self);

            return $timeout(function(){
              $document[0].body.classList.remove(self.viewType + '-open');
              self.el.classList.add('hide');
            }, self.hideDelay || 500);
          },

          /**
           * @ngdoc method
           * @name ionicModal#remove
           * @description Remove this modal instance from the DOM and clean up.
           * @returns {promise} A promise which is resolved when the modal is finished animating out.
           */
          remove: function() {
            var self = this;
            self.scope.$parent && self.scope.$parent.$broadcast(self.viewType + '.removed', self);

            return self.hide().then(function() {
              self.scope.$destroy();
              self.$el.remove();
            });
          },

          /**
           * @ngdoc method
           * @name ionicModal#isShown
           * @returns boolean Whether this modal is currently shown.
           */
          isShown: function() {
            return !!this._isShown;
          }
        });

        var createModal = function(templateString, options) {
          // Create a new scope for the modal
          var scope = options.scope && options.scope.$new() || $rootScope.$new(true);

          options.viewType = options.viewType || 'modal';

          extend(scope, {
            $hasHeader: false,
            $hasSubheader: false,
            $hasFooter: false,
            $hasSubfooter: false,
            $hasTabs: false,
            $hasTabsTop: false
          });

          // Compile the template
          var element = $compile('<ion-' + options.viewType + '>' + templateString + '</ion-' + options.viewType + '>')(scope);

          options.$el = element;
          options.el = element[0];
          options.modalEl = options.el.querySelector('.' + options.viewType);
          var modal = new ModalView(options);

          modal.scope = scope;

          // If this wasn't a defined scope, we can assign the viewType to the isolated scope
          // we created
          if(!options.scope) {
            scope[ options.viewType ] = modal;
          }

          return modal;
        };

        return {
          /**
           * @ngdoc method
           * @name $ionicModal#fromTemplate
           * @param {string} templateString The template string to use as the modal's
           * content.
           * @param {object} options Options to be passed {@link ionic.controller:ionicModal#initialize ionicModal#initialize} method.
           * @returns {object} An instance of an {@link ionic.controller:ionicModal}
           * controller.
           */
          fromTemplate: function(templateString, options) {
            var modal = createModal(templateString, options || {});
            return modal;
          },
          /**
           * @ngdoc method
           * @name $ionicModal#fromTemplateUrl
           * @param {string} templateUrl The url to load the template from.
           * @param {object} options Options to be passed {@link ionic.controller:ionicModal#initialize ionicModal#initialize} method.
           * options object.
           * @returns {promise} A promise that will be resolved with an instance of
           * an {@link ionic.controller:ionicModal} controller.
           */
          fromTemplateUrl: function(url, options, _) {
            var cb;
            //Deprecated: allow a callback as second parameter. Now we return a promise.
            if (angular.isFunction(options)) {
              cb = options;
              options = _;
            }
            return $ionicTemplateLoader.load(url).then(function(templateString) {
              var modal = createModal(templateString, options || {});
              cb && cb(modal);
              return modal;
            });
          }
        };
      }]);


  /**
   * @ngdoc service
   * @name $ionicNavBarDelegate
   * @module ionic
   * @description
   * Delegate for controlling the {@link ionic.directive:ionNavBar} directive.
   *
   * @usage
   *
   * ```html
   * <body ng-controller="MyCtrl">
   *   <ion-nav-bar>
   *     <button ng-click="setNavTitle('banana')">
   *       Set title to banana!
   *     </button>
   *   </ion-nav-bar>
   * </body>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicNavBarDelegate) {
 *   $scope.setNavTitle = function(title) {
 *     $ionicNavBarDelegate.setTitle(title);
 *   }
 * }
   * ```
   */
  IonicModule
    .service('$ionicNavBarDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#back
     * @description Goes back in the view history.
     * @param {DOMEvent=} event The event object (eg from a tap event)
     */
      'back',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#align
     * @description Aligns the title with the buttons in a given direction.
     * @param {string=} direction The direction to the align the title text towards.
     * Available: 'left', 'right', 'center'. Default: 'center'.
     */
      'align',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#showBackButton
     * @description
     * Set/get whether the {@link ionic.directive:ionNavBackButton} is shown
     * (if it exists).
     * @param {boolean=} show Whether to show the back button.
     * @returns {boolean} Whether the back button is shown.
     */
      'showBackButton',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#showBar
     * @description
     * Set/get whether the {@link ionic.directive:ionNavBar} is shown.
     * @param {boolean} show Whether to show the bar.
     * @returns {boolean} Whether the bar is shown.
     */
      'showBar',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#setTitle
     * @description
     * Set the title for the {@link ionic.directive:ionNavBar}.
     * @param {string} title The new title to show.
     */
      'setTitle',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#changeTitle
     * @description
     * Change the title, transitioning the new title in and the old one out in a given direction.
     * @param {string} title The new title to show.
     * @param {string} direction The direction to transition the new title in.
     * Available: 'forward', 'back'.
     */
      'changeTitle',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#getTitle
     * @returns {string} The current title of the navbar.
     */
      'getTitle',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#getPreviousTitle
     * @returns {string} The previous title of the navbar.
     */
      'getPreviousTitle'
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * navBars with delegate-handle matching the given handle.
     *
     * Example: `$ionicNavBarDelegate.$getByHandle('myHandle').setTitle('newTitle')`
     */
    ]));

  var PLATFORM_BACK_BUTTON_PRIORITY_VIEW = 100;
  var PLATFORM_BACK_BUTTON_PRIORITY_SIDE_MENU = 150;
  var PLATFORM_BACK_BUTTON_PRIORITY_MODAL = 200;
  var PLATFORM_BACK_BUTTON_PRIORITY_ACTION_SHEET = 300;
  var PLATFORM_BACK_BUTTON_PRIORITY_POPUP = 400;
  var PLATFORM_BACK_BUTTON_PRIORITY_LOADING = 500;

  function componentConfig(defaults) {
    defaults.$get = function() { return defaults; };
    return defaults;
  }

  IonicModule
    .constant('$ionicPlatformDefaults', {
      'ios': {
        '$ionicNavBarConfig': {
          transition: 'nav-title-slide-ios7',
          alignTitle: 'center',
          backButtonIcon: 'ion-ios7-arrow-back'
        },
        '$ionicNavViewConfig': {
          transition: 'slide-left-right-ios7'
        },
        '$ionicTabsConfig': {
          type: '',
          position: ''
        }
      },
      'android': {
        '$ionicNavBarConfig': {
          transition: 'nav-title-slide-ios7',
          alignTitle: 'center',
          backButtonIcon: 'ion-ios7-arrow-back'
        },
        '$ionicNavViewConfig': {
          transition: 'slide-left-right-ios7'
        },
        '$ionicTabsConfig': {
          type: 'tabs-striped',
          position: ''
        }
      }
    });


  IonicModule.config([
    '$ionicPlatformDefaults',

    '$injector',

    function($ionicPlatformDefaults, $injector) {
      var platform = ionic.Platform.platform();

      var applyConfig = function(platformDefaults) {
        forEach(platformDefaults, function(defaults, constantName) {
          extend($injector.get(constantName), defaults);
        });
      };

      switch(platform) {
        case 'ios':
          applyConfig($ionicPlatformDefaults.ios);
          break;
        case 'android':
          applyConfig($ionicPlatformDefaults.android);
          break;
      }
    }]);

  /**
   * @ngdoc service
   * @name $ionicPlatform
   * @module ionic
   * @description
   * An angular abstraction of {@link ionic.utility:ionic.Platform}.
   *
   * Used to detect the current platform, as well as do things like override the
   * Android back button in PhoneGap/Cordova.
   */
  IonicModule
    .provider('$ionicPlatform', function() {
      return {
        $get: ['$q', '$rootScope', function($q, $rootScope) {
          var self = {

            /**
             * @ngdoc method
             * @name $ionicPlatform#onHardwareBackButton
             * @description
             * Some platforms have a hardware back button, so this is one way to
             * bind to it.
             * @param {function} callback the callback to trigger when this event occurs
             */
            onHardwareBackButton: function(cb) {
              ionic.Platform.ready(function() {
                document.addEventListener('backbutton', cb, false);
              });
            },

            /**
             * @ngdoc method
             * @name $ionicPlatform#offHardwareBackButton
             * @description
             * Remove an event listener for the backbutton.
             * @param {function} callback The listener function that was
             * originally bound.
             */
            offHardwareBackButton: function(fn) {
              ionic.Platform.ready(function() {
                document.removeEventListener('backbutton', fn);
              });
            },

            /**
             * @ngdoc method
             * @name $ionicPlatform#registerBackButtonAction
             * @description
             * Register a hardware back button action. Only one action will execute
             * when the back button is clicked, so this method decides which of
             * the registered back button actions has the highest priority.
             *
             * For example, if an actionsheet is showing, the back button should
             * close the actionsheet, but it should not also go back a page view
             * or close a modal which may be open.
             *
             * @param {function} callback Called when the back button is pressed,
             * if this listener is the highest priority.
             * @param {number} priority Only the highest priority will execute.
             * @param {*=} actionId The id to assign this action. Default: a
             * random unique id.
             * @returns {function} A function that, when called, will deregister
             * this backButtonAction.
             */
            $backButtonActions: {},
            registerBackButtonAction: function(fn, priority, actionId) {

              if(!self._hasBackButtonHandler) {
                // add a back button listener if one hasn't been setup yet
                self.$backButtonActions = {};
                self.onHardwareBackButton(self.hardwareBackButtonClick);
                self._hasBackButtonHandler = true;
              }

              var action = {
                id: (actionId ? actionId : ionic.Utils.nextUid()),
                priority: (priority ? priority : 0),
                fn: fn
              };
              self.$backButtonActions[action.id] = action;

              // return a function to de-register this back button action
              return function() {
                delete self.$backButtonActions[action.id];
              };
            },

            /**
             * @private
             */
            hardwareBackButtonClick: function(e){
              // loop through all the registered back button actions
              // and only run the last one of the highest priority
              var priorityAction, actionId;
              for(actionId in self.$backButtonActions) {
                if(!priorityAction || self.$backButtonActions[actionId].priority >= priorityAction.priority) {
                  priorityAction = self.$backButtonActions[actionId];
                }
              }
              if(priorityAction) {
                priorityAction.fn(e);
                return priorityAction;
              }
            },

            is: function(type) {
              return ionic.Platform.is(type);
            },

            /**
             * @ngdoc method
             * @name $ionicPlatform#ready
             * @description
             * Trigger a callback once the device is ready,
             * or immediately if the device is already ready.
             * @param {function=} callback The function to call.
             * @returns {promise} A promise which is resolved when the device is ready.
             */
            ready: function(cb) {
              var q = $q.defer();

              ionic.Platform.ready(function(){
                q.resolve();
                cb && cb();
              });

              return q.promise;
            }
          };
          return self;
        }]
      };

    });


  /**
   * @ngdoc service
   * @name $ionicPopover
   * @module ionic
   * @description
   *
   * Related: {@link ionic.controller:ionicPopover ionicPopover controller}.
   *
   * The Popover is a view that floats above an app’s content. Popovers provide an
   * easy way to present or gather information from the user and are
   * commonly used in the following situations:
   *
   * - Show more info about the current view
   * - Select a commonly used tool or configuration
   * - Present a list of actions to perform inside one of your views
   *
   * Put the content of the popover inside of an `<ion-popover-view>` element.
   *
   * @usage
   * ```html
   * <p>
   *   <button ng-click="openPopover($event)">Open Popover</button>
   * </p>
   *
   * <script id="my-popover.html" type="text/ng-template">
   *   <ion-popover-view>
   *     <ion-header-bar>
   *       <h1 class="title">My Popover Title</h1>
   *     </ion-header-bar>
   *     <ion-content>
   *       Hello!
   *     </ion-content>
   *   </ion-popover-view>
   * </script>
   * ```
   * ```js
   * angular.module('testApp', ['ionic'])
   * .controller('MyController', function($scope, $ionicPopover) {
 *   $ionicPopover.fromTemplateUrl('my-popover.html', {
 *     scope: $scope,
 *   }).then(function(popover) {
 *     $scope.popover = popover;
 *   });
 *   $scope.openPopover = function($event) {
 *     $scope.popover.show($event);
 *   };
 *   $scope.closePopover = function() {
 *     $scope.popover.hide();
 *   };
 *   //Cleanup the popover when we're done with it!
 *   $scope.$on('$destroy', function() {
 *     $scope.popover.remove();
 *   });
 *   // Execute action on hide popover
 *   $scope.$on('popover.hidden', function() {
 *     // Execute action
 *   });
 *   // Execute action on remove popover
 *   $scope.$on('popover.removed', function() {
 *     // Execute action
 *   });
 * });
   * ```
   */


  IonicModule
    .factory('$ionicPopover', ['$ionicModal', '$ionicPosition', '$document',
      function($ionicModal, $ionicPosition, $document) {

        var POPOVER_BODY_PADDING = 6;

        var POPOVER_OPTIONS = {
          viewType: 'popover',
          hideDelay: 1,
          animation: 'none',
          positionView: positionView
        };

        function positionView(target, popoverEle) {
          var targetEle = angular.element(target.target || target);
          var buttonOffset = $ionicPosition.offset( targetEle );
          var popoverWidth = popoverEle.prop('offsetWidth');
          var bodyWidth = $document[0].body.clientWidth;
          var bodyHeight = $document[0].body.clientHeight;

          var popoverCSS = {
            top: buttonOffset.top + buttonOffset.height,
            left: buttonOffset.left + buttonOffset.width / 2 - popoverWidth / 2
          };

          if(popoverCSS.left < POPOVER_BODY_PADDING) {
            popoverCSS.left = POPOVER_BODY_PADDING;
          } else if(popoverCSS.left + popoverWidth + POPOVER_BODY_PADDING > bodyWidth) {
            popoverCSS.left = bodyWidth - popoverWidth - POPOVER_BODY_PADDING;
          }

          var arrowEle = popoverEle[0].querySelector('.popover-arrow');
          angular.element(arrowEle).css({
            left: (buttonOffset.left - popoverCSS.left) + (buttonOffset.width / 2) - (arrowEle.offsetWidth / 2) + 'px'
          });

          popoverEle.css({
            top: popoverCSS.top + 'px',
            left: popoverCSS.left + 'px',
            marginLeft: '0',
            opacity: '1'
          });

        }

        /**
         * @ngdoc controller
         * @name ionicPopover
         * @module ionic
         * @description
         * Instantiated by the {@link ionic.service:$ionicPopover} service.
         *
         * Be sure to call [remove()](#remove) when you are done with each popover
         * to clean it up and avoid memory leaks.
         *
         * Note: a popover will broadcast 'popover.shown', 'popover.hidden', and 'popover.removed' events from its originating
         * scope, passing in itself as an event argument. Both the popover.removed and popover.hidden events are
         * called when the popover is removed.
         */

        /**
         * @ngdoc method
         * @name ionicPopover#initialize
         * @description Creates a new popover controller instance.
         * @param {object} options An options object with the following properties:
         *  - `{object=}` `scope` The scope to be a child of.
         *    Default: creates a child of $rootScope.
         *  - `{boolean=}` `focusFirstInput` Whether to autofocus the first input of
         *    the popover when shown.  Default: false.
         *  - `{boolean=}` `backdropClickToClose` Whether to close the popover on clicking the backdrop.
         *    Default: true.
         *  - `{boolean=}` `hardwareBackButtonClose` Whether the popover can be closed using the hardware
         *    back button on Android and similar devices.  Default: true.
         */

        /**
         * @ngdoc method
         * @name ionicPopover#show
         * @description Show this popover instance.
         * @param {$event} $event The $event or target element which the popover should align
         * itself next to.
         * @returns {promise} A promise which is resolved when the popover is finished animating in.
         */

        /**
         * @ngdoc method
         * @name ionicPopover#hide
         * @description Hide this popover instance.
         * @returns {promise} A promise which is resolved when the popover is finished animating out.
         */

        /**
         * @ngdoc method
         * @name ionicPopover#remove
         * @description Remove this popover instance from the DOM and clean up.
         * @returns {promise} A promise which is resolved when the popover is finished animating out.
         */

        /**
         * @ngdoc method
         * @name ionicPopover#isShown
         * @returns boolean Whether this popover is currently shown.
         */

        return {
          /**
           * @ngdoc method
           * @name $ionicPopover#fromTemplate
           * @param {string} templateString The template string to use as the popovers's
           * content.
           * @param {object} options Options to be passed to the initialize method.
           * @returns {object} An instance of an {@link ionic.controller:ionicPopover}
           * controller ($ionicPopover is built on top of $ionicPopover).
           */
          fromTemplate: function(templateString, options) {
            return $ionicModal.fromTemplate(templateString, ionic.Utils.extend(options || {}, POPOVER_OPTIONS) );
          },
          /**
           * @ngdoc method
           * @name $ionicPopover#fromTemplateUrl
           * @param {string} templateUrl The url to load the template from.
           * @param {object} options Options to be passed to the initialize method.
           * @returns {promise} A promise that will be resolved with an instance of
           * an {@link ionic.controller:ionicPopover} controller ($ionicPopover is built on top of $ionicPopover).
           */
          fromTemplateUrl: function(url, options, _) {
            return $ionicModal.fromTemplateUrl(url, options, ionic.Utils.extend(options || {}, POPOVER_OPTIONS) );
          }
        };

      }]);


  var POPUP_TPL =
    '<div class="popup">' +
    '<div class="popup-head">' +
    '<h3 class="popup-title" ng-bind-html="title"></h3>' +
    '<h5 class="popup-sub-title" ng-bind-html="subTitle" ng-if="subTitle"></h5>' +
    '</div>' +
    '<div class="popup-body">' +
    '</div>' +
    '<div class="popup-buttons row">' +
    '<button ng-repeat="button in buttons" ng-click="$buttonTapped(button, $event)" class="button col" ng-class="button.type || \'button-default\'" ng-bind-html="button.text"></button>' +
    '</div>' +
    '</div>';

  /**
   * @ngdoc service
   * @name $ionicPopup
   * @module ionic
   * @restrict E
   * @codepen zkmhJ
   * @description
   *
   * The Ionic Popup service allows programmatically creating and showing popup
   * windows that require the user to respond in order to continue.
   *
   * The popup system has support for more flexible versions of the built in `alert()`, `prompt()`,
   * and `confirm()` functions that users are used to, in addition to allowing popups with completely
   * custom content and look.
   *
   * An input can be given an `autofocus` attribute so it automatically receives focus when
   * the popup first shows. However, depending on certain use-cases this can cause issues with
   * the tap/click system, which is why Ionic prefers using the `autofocus` attribute as
   * an opt-in feature and not the default.
   *
   * @usage
   * A few basic examples, see below for details about all of the options available.
   *
   * ```js
   *angular.module('mySuperApp', ['ionic'])
   *.controller('PopupCtrl',function($scope, $ionicPopup, $timeout) {
 *
 * // Triggered on a button click, or some other target
 * $scope.showPopup = function() {
 *   $scope.data = {}
 *
 *   // An elaborate, custom popup
 *   var myPopup = $ionicPopup.show({
 *     template: '<input type="password" ng-model="data.wifi">',
 *     title: 'Enter Wi-Fi Password',
 *     subTitle: 'Please use normal things',
 *     scope: $scope,
 *     buttons: [
 *       { text: 'Cancel' },
 *       {
 *         text: '<b>Save</b>',
 *         type: 'button-positive',
 *         onTap: function(e) {
 *           if (!$scope.data.wifi) {
 *             //don't allow the user to close unless he enters wifi password
 *             e.preventDefault();
 *           } else {
 *             return $scope.data.wifi;
 *           }
 *         }
 *       },
 *     ]
 *   });
 *   myPopup.then(function(res) {
 *     console.log('Tapped!', res);
 *   });
 *   $timeout(function() {
 *      myPopup.close(); //close the popup after 3 seconds for some reason
 *   }, 3000);
 *  };
 *  // A confirm dialog
 *  $scope.showConfirm = function() {
 *    var confirmPopup = $ionicPopup.confirm({
 *      title: 'Consume Ice Cream',
 *      template: 'Are you sure you want to eat this ice cream?'
 *    });
 *    confirmPopup.then(function(res) {
 *      if(res) {
 *        console.log('You are sure');
 *      } else {
 *        console.log('You are not sure');
 *      }
 *    });
 *  };
 *
 *  // An alert dialog
 *  $scope.showAlert = function() {
 *    var alertPopup = $ionicPopup.alert({
 *      title: 'Don\'t eat that!',
 *      template: 'It might taste good'
 *    });
 *    alertPopup.then(function(res) {
 *      console.log('Thank you for not eating my delicious ice cream cone');
 *    });
 *  };
 *});
   *```
   */

  IonicModule
    .factory('$ionicPopup', [
      '$ionicTemplateLoader',
      '$ionicBackdrop',
      '$q',
      '$timeout',
      '$rootScope',
      '$document',
      '$compile',
      '$ionicPlatform',
      function($ionicTemplateLoader, $ionicBackdrop, $q, $timeout, $rootScope, $document, $compile, $ionicPlatform) {
        //TODO allow this to be configured
        var config = {
          stackPushDelay: 50
        };
        var popupStack = [];
        var $ionicPopup = {
          /**
           * @ngdoc method
           * @description
           * Show a complex popup. This is the master show function for all popups.
           *
           * A complex popup has a `buttons` array, with each button having a `text` and `type`
           * field, in addition to an `onTap` function.  The `onTap` function, called when
           * the correspondingbutton on the popup is tapped, will by default close the popup
           * and resolve the popup promise with its return value.  If you wish to prevent the
           * default and keep the popup open on button tap, call `event.preventDefault()` on the
           * passed in tap event.  Details below.
           *
           * @name $ionicPopup#show
           * @param {object} options The options for the new popup, of the form:
           *
           * ```
           * {
     *   title: '', // String. The title of the popup.
     *   subTitle: '', // String (optional). The sub-title of the popup.
     *   template: '', // String (optional). The html template to place in the popup body.
     *   templateUrl: '', // String (optional). The URL of an html template to place in the popup   body.
     *   scope: null, // Scope (optional). A scope to link to the popup content.
     *   buttons: [{ //Array[Object] (optional). Buttons to place in the popup footer.
     *     text: 'Cancel',
     *     type: 'button-default',
     *     onTap: function(e) {
     *       // e.preventDefault() will stop the popup from closing when tapped.
     *       e.preventDefault();
     *     }
     *   }, {
     *     text: 'OK',
     *     type: 'button-positive',
     *     onTap: function(e) {
     *       // Returning a value will cause the promise to resolve with the given value.
     *       return scope.data.response;
     *     }
     *   }]
     * }
           * ```
           *
           * @returns {object} A promise which is resolved when the popup is closed. Has an additional
           * `close` function, which can be used to programmatically close the popup.
           */
          show: showPopup,

          /**
           * @ngdoc method
           * @name $ionicPopup#alert
           * @description Show a simple alert popup with a message and one button that the user can
           * tap to close the popup.
           *
           * @param {object} options The options for showing the alert, of the form:
           *
           * ```
           * {
     *   title: '', // String. The title of the popup.
     *   subTitle: '', // String (optional). The sub-title of the popup.
     *   template: '', // String (optional). The html template to place in the popup body.
     *   templateUrl: '', // String (optional). The URL of an html template to place in the popup   body.
     *   okText: '', // String (default: 'OK'). The text of the OK button.
     *   okType: '', // String (default: 'button-positive'). The type of the OK button.
     * }
           * ```
           *
           * @returns {object} A promise which is resolved when the popup is closed. Has one additional
           * function `close`, which can be called with any value to programmatically close the popup
           * with the given value.
           */
          alert: showAlert,

          /**
           * @ngdoc method
           * @name $ionicPopup#confirm
           * @description
           * Show a simple confirm popup with a Cancel and OK button.
           *
           * Resolves the promise with true if the user presses the OK button, and false if the
           * user presses the Cancel button.
           *
           * @param {object} options The options for showing the confirm popup, of the form:
           *
           * ```
           * {
     *   title: '', // String. The title of the popup.
     *   subTitle: '', // String (optional). The sub-title of the popup.
     *   template: '', // String (optional). The html template to place in the popup body.
     *   templateUrl: '', // String (optional). The URL of an html template to place in the popup   body.
     *   cancelText: '', // String (default: 'Cancel'). The text of the Cancel button.
     *   cancelType: '', // String (default: 'button-default'). The type of the Cancel button.
     *   okText: '', // String (default: 'OK'). The text of the OK button.
     *   okType: '', // String (default: 'button-positive'). The type of the OK button.
     * }
           * ```
           *
           * @returns {object} A promise which is resolved when the popup is closed. Has one additional
           * function `close`, which can be called with any value to programmatically close the popup
           * with the given value.
           */
          confirm: showConfirm,

          /**
           * @ngdoc method
           * @name $ionicPopup#prompt
           * @description Show a simple prompt popup, which has an input, OK button, and Cancel button.
           * Resolves the promise with the value of the input if the user presses OK, and with undefined
           * if the user presses Cancel.
           *
           * ```javascript
           *  $ionicPopup.prompt({
     *    title: 'Password Check',
     *    template: 'Enter your secret password',
     *    inputType: 'password',
     *    inputPlaceholder: 'Your password'
     *  }).then(function(res) {
     *    console.log('Your password is', res);
     *  });
           * ```
           * @param {object} options The options for showing the prompt popup, of the form:
           *
           * ```
           * {
     *   title: '', // String. The title of the popup.
     *   subTitle: '', // String (optional). The sub-title of the popup.
     *   template: '', // String (optional). The html template to place in the popup body.
     *   templateUrl: '', // String (optional). The URL of an html template to place in the popup   body.
     *   inputType: // String (default: 'text'). The type of input to use
     *   inputPlaceholder: // String (default: ''). A placeholder to use for the input.
     *   cancelText: // String (default: 'Cancel'. The text of the Cancel button.
     *   cancelType: // String (default: 'button-default'). The type of the Cancel button.
     *   okText: // String (default: 'OK'). The text of the OK button.
     *   okType: // String (default: 'button-positive'). The type of the OK button.
     * }
           * ```
           *
           * @returns {object} A promise which is resolved when the popup is closed. Has one additional
           * function `close`, which can be called with any value to programmatically close the popup
           * with the given value.
           */
          prompt: showPrompt,
          /**
           * @private for testing
           */
          _createPopup: createPopup,
          _popupStack: popupStack
        };

        return $ionicPopup;

        function createPopup(options) {
          options = extend({
            scope: null,
            title: '',
            buttons: [],
          }, options || {});

          var popupPromise = $ionicTemplateLoader.compile({
            template: POPUP_TPL,
            scope: options.scope && options.scope.$new(),
            appendTo: $document[0].body
          });
          var contentPromise = options.templateUrl ?
            $ionicTemplateLoader.load(options.templateUrl) :
            $q.when(options.template || options.content || '');

          return $q.all([popupPromise, contentPromise])
            .then(function(results) {
              var self = results[0];
              var content = results[1];
              var responseDeferred = $q.defer();

              self.responseDeferred = responseDeferred;

              //Can't ng-bind-html for popup-body because it can be insecure html
              //(eg an input in case of prompt)
              var body = jqLite(self.element[0].querySelector('.popup-body'));
              if (content) {
                body.html(content);
                $compile(body.contents())(self.scope);
              } else {
                body.remove();
              }

              extend(self.scope, {
                title: options.title,
                buttons: options.buttons,
                subTitle: options.subTitle,
                $buttonTapped: function(button, event) {
                  var result = (button.onTap || angular.noop)(event);
                  event = event.originalEvent || event; //jquery events

                  if (!event.defaultPrevented) {
                    responseDeferred.resolve(result);
                  }
                }
              });

              self.show = function() {
                if (self.isShown) return;

                self.isShown = true;
                ionic.requestAnimationFrame(function() {
                  //if hidden while waiting for raf, don't show
                  if (!self.isShown) return;

                  //if the popup is taller than the window, make the popup body scrollable
                  if(self.element[0].offsetHeight > window.innerHeight - 20){
                    self.element[0].style.height = window.innerHeight - 20+'px';
                    popupBody = self.element[0].querySelectorAll('.popup-body');
                    popupHead = self.element[0].querySelectorAll('.popup-head');
                    popupButtons = self.element[0].querySelectorAll('.popup-buttons');
                    self.element.addClass('popup-tall');
                    newHeight = window.innerHeight - popupHead[0].offsetHeight - popupButtons[0].offsetHeight -20;
                    popupBody[0].style.height =  newHeight + 'px';
                  }

                  self.element.removeClass('popup-hidden');
                  self.element.addClass('popup-showing active');
                  ionic.DomUtil.centerElementByMarginTwice(self.element[0]);
                  focusInput(self.element);
                });
              };
              self.hide = function(callback) {
                callback = callback || angular.noop;
                if (!self.isShown) return callback();

                self.isShown = false;
                self.element.removeClass('active');
                self.element.addClass('popup-hidden');
                $timeout(callback, 250);
              };
              self.remove = function() {
                if (self.removed) return;

                self.hide(function() {
                  self.element.remove();
                  self.scope.$destroy();
                });

                self.removed = true;
              };

              return self;
            });
        }

        function onHardwareBackButton(e) {
          popupStack[0] && popupStack[0].responseDeferred.resolve();
        }

        function showPopup(options) {
          var popupPromise = $ionicPopup._createPopup(options);
          var previousPopup = popupStack[0];

          if (previousPopup) {
            previousPopup.hide();
          }

          var resultPromise = $timeout(angular.noop, previousPopup ? config.stackPushDelay : 0)
            .then(function() { return popupPromise; })
            .then(function(popup) {
              if (!previousPopup) {
                //Add popup-open & backdrop if this is first popup
                document.body.classList.add('popup-open');
                $ionicBackdrop.retain();
                $ionicPopup._backButtonActionDone = $ionicPlatform.registerBackButtonAction(
                  onHardwareBackButton,
                  PLATFORM_BACK_BUTTON_PRIORITY_POPUP
                );
              }
              popupStack.unshift(popup);
              popup.show();

              //DEPRECATED: notify the promise with an object with a close method
              popup.responseDeferred.notify({
                close: resultPromise.close
              });

              return popup.responseDeferred.promise.then(function(result) {
                var index = popupStack.indexOf(popup);
                if (index !== -1) {
                  popupStack.splice(index, 1);
                }
                popup.remove();

                var previousPopup = popupStack[0];
                if (previousPopup) {
                  previousPopup.show();
                } else {
                  //Remove popup-open & backdrop if this is last popup
                  document.body.classList.remove('popup-open');
                  ($ionicPopup._backButtonActionDone || angular.noop)();
                }
                // always release the backdrop since it has an internal backdrop counter
                $ionicBackdrop.release();
                return result;
              });
            });

          function close(result) {
            popupPromise.then(function(popup) {
              if (!popup.removed) {
                popup.responseDeferred.resolve(result);
              }
            });
          }
          resultPromise.close = close;

          return resultPromise;
        }

        function focusInput(element) {
          var focusOn = element[0].querySelector('[autofocus]');
          if (focusOn) {
            focusOn.focus();
          }
        }

        function showAlert(opts) {
          return showPopup( extend({
            buttons: [{
              text: opts.okText || 'OK',
              type: opts.okType || 'button-positive',
              onTap: function(e) {
                return true;
              }
            }]
          }, opts || {}) );
        }

        function showConfirm(opts) {
          return showPopup( extend({
            buttons: [{
              text: opts.cancelText || 'Cancel' ,
              type: opts.cancelType || 'button-default',
              onTap: function(e) { return false; }
            }, {
              text: opts.okText || 'OK',
              type: opts.okType || 'button-positive',
              onTap: function(e) { return true; }
            }]
          }, opts || {}) );
        }

        function showPrompt(opts) {
          var scope = $rootScope.$new(true);
          scope.data = {};
          return showPopup( extend({
            template: '<input ng-model="data.response" type="' + (opts.inputType || 'text') +
              '" placeholder="' + (opts.inputPlaceholder || '') + '">',
            scope: scope,
            buttons: [{
              text: opts.cancelText || 'Cancel',
              type: opts.cancelType|| 'button-default',
              onTap: function(e) {}
            }, {
              text: opts.okText || 'OK',
              type: opts.okType || 'button-positive',
              onTap: function(e) {
                return scope.data.response || '';
              }
            }]
          }, opts || {}) );
        }
      }]);


  /**
   * @ngdoc service
   * @name $ionicPosition
   * @module ionic
   * @description
   * A set of utility methods that can be use to retrieve position of DOM elements.
   * It is meant to be used where we need to absolute-position DOM elements in
   * relation to other, existing elements (this is the case for tooltips, popovers, etc.).
   *
   * Adapted from [AngularUI Bootstrap](https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js),
   * ([license](https://github.com/angular-ui/bootstrap/blob/master/LICENSE))
   */
  IonicModule
    .factory('$ionicPosition', ['$document', '$window', function ($document, $window) {

      function getStyle(el, cssprop) {
        if (el.currentStyle) { //IE
          return el.currentStyle[cssprop];
        } else if ($window.getComputedStyle) {
          return $window.getComputedStyle(el)[cssprop];
        }
        // finally try and get inline style
        return el.style[cssprop];
      }

      /**
       * Checks if a given element is statically positioned
       * @param element - raw DOM element
       */
      function isStaticPositioned(element) {
        return (getStyle(element, 'position') || 'static' ) === 'static';
      }

      /**
       * returns the closest, non-statically positioned parentOffset of a given element
       * @param element
       */
      var parentOffsetEl = function (element) {
        var docDomEl = $document[0];
        var offsetParent = element.offsetParent || docDomEl;
        while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent) ) {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || docDomEl;
      };

      return {
        /**
         * @ngdoc method
         * @name $ionicPosition#position
         * @description Get the current coordinates of the element, relative to the offset parent.
         * Read-only equivalent of [jQuery's position function](http://api.jquery.com/position/).
         * @param {element} element The element to get the position of.
         * @returns {object} Returns an object containing the properties top, left, width and height.
         */
        position: function (element) {
          var elBCR = this.offset(element);
          var offsetParentBCR = { top: 0, left: 0 };
          var offsetParentEl = parentOffsetEl(element[0]);
          if (offsetParentEl != $document[0]) {
            offsetParentBCR = this.offset(angular.element(offsetParentEl));
            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
          }

          var boundingClientRect = element[0].getBoundingClientRect();
          return {
            width: boundingClientRect.width || element.prop('offsetWidth'),
            height: boundingClientRect.height || element.prop('offsetHeight'),
            top: elBCR.top - offsetParentBCR.top,
            left: elBCR.left - offsetParentBCR.left
          };
        },

        /**
         * @ngdoc method
         * @name $ionicPosition#offset
         * @description Get the current coordinates of the element, relative to the document.
         * Read-only equivalent of [jQuery's offset function](http://api.jquery.com/offset/).
         * @param {element} element The element to get the offset of.
         * @returns {object} Returns an object containing the properties top, left, width and height.
         */
        offset: function (element) {
          var boundingClientRect = element[0].getBoundingClientRect();
          return {
            width: boundingClientRect.width || element.prop('offsetWidth'),
            height: boundingClientRect.height || element.prop('offsetHeight'),
            top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
            left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
          };
        }

      };
    }]);


  /**
   * @ngdoc service
   * @name $ionicScrollDelegate
   * @module ionic
   * @description
   * Delegate for controlling scrollViews (created by
   * {@link ionic.directive:ionContent} and
   * {@link ionic.directive:ionScroll} directives).
   *
   * Methods called directly on the $ionicScrollDelegate service will control all scroll
   * views.  Use the {@link ionic.service:$ionicScrollDelegate#$getByHandle $getByHandle}
   * method to control specific scrollViews.
   *
   * @usage
   *
   * ```html
   * <body ng-controller="MainCtrl">
   *   <ion-content>
   *     <button ng-click="scrollTop()">Scroll to Top!</button>
   *   </ion-content>
   * </body>
   * ```
   * ```js
   * function MainCtrl($scope, $ionicScrollDelegate) {
 *   $scope.scrollTop = function() {
 *     $ionicScrollDelegate.scrollTop();
 *   };
 * }
   * ```
   *
   * Example of advanced usage, with two scroll areas using `delegate-handle`
   * for fine control.
   *
   * ```html
   * <body ng-controller="MainCtrl">
   *   <ion-content delegate-handle="mainScroll">
   *     <button ng-click="scrollMainToTop()">
   *       Scroll content to top!
   *     </button>
   *     <ion-scroll delegate-handle="small" style="height: 100px;">
   *       <button ng-click="scrollSmallToTop()">
   *         Scroll small area to top!
   *       </button>
   *     </ion-scroll>
   *   </ion-content>
   * </body>
   * ```
   * ```js
   * function MainCtrl($scope, $ionicScrollDelegate) {
 *   $scope.scrollMainToTop = function() {
 *     $ionicScrollDelegate.$getByHandle('mainScroll').scrollTop();
 *   };
 *   $scope.scrollSmallToTop = function() {
 *     $ionicScrollDelegate.$getByHandle('small').scrollTop();
 *   };
 * }
   * ```
   */
  IonicModule
    .service('$ionicScrollDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#resize
     * @description Tell the scrollView to recalculate the size of its container.
     */
      'resize',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#scrollTop
     * @param {boolean=} shouldAnimate Whether the scroll should animate.
     */
      'scrollTop',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#scrollBottom
     * @param {boolean=} shouldAnimate Whether the scroll should animate.
     */
      'scrollBottom',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#scrollTo
     * @param {number} left The x-value to scroll to.
     * @param {number} top The y-value to scroll to.
     * @param {boolean=} shouldAnimate Whether the scroll should animate.
     */
      'scrollTo',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#scrollBy
     * @param {number} left The x-offset to scroll by.
     * @param {number} top The y-offset to scroll by.
     * @param {boolean=} shouldAnimate Whether the scroll should animate.
     */
      'scrollBy',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#getScrollPosition
     * @returns {object} The scroll position of this view, with the following properties:
     *  - `{number}` `left` The distance the user has scrolled from the left (starts at 0).
     *  - `{number}` `top` The distance the user has scrolled from the top (starts at 0).
     */
      'getScrollPosition',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#anchorScroll
     * @description Tell the scrollView to scroll to the element with an id
     * matching window.location.hash.
     *
     * If no matching element is found, it will scroll to top.
     *
     * @param {boolean=} shouldAnimate Whether the scroll should animate.
     */
      'anchorScroll',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#getScrollView
     * @returns {object} The scrollView associated with this delegate.
     */
      'getScrollView',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#rememberScrollPosition
     * @description
     * Will make it so, when this scrollView is destroyed (user leaves the page),
     * the last scroll position the page was on will be saved, indexed by the
     * given id.
     *
     * Note: for pages associated with a view under an ion-nav-view,
     * rememberScrollPosition automatically saves their scroll.
     *
     * Related methods: scrollToRememberedPosition, forgetScrollPosition (below).
     *
     * In the following example, the scroll position of the ion-scroll element
     * will persist, even when the user changes the toggle switch.
     *
     * ```html
     * <ion-toggle ng-model="shouldShowScrollView"></ion-toggle>
     * <ion-scroll delegate-handle="myScroll" ng-if="shouldShowScrollView">
     *   <div ng-controller="ScrollCtrl">
     *     <ion-list>
     *       {% raw %}<ion-item ng-repeat="i in items">{{i}}</ion-item>{% endraw %}
     *     </ion-list>
     *   </div>
     * </ion-scroll>
     * ```
     * ```js
     * function ScrollCtrl($scope, $ionicScrollDelegate) {
   *   var delegate = $ionicScrollDelegate.$getByHandle('myScroll');
   *
   *   // Put any unique ID here.  The point of this is: every time the controller is recreated
   *   // we want to load the correct remembered scroll values.
   *   delegate.rememberScrollPosition('my-scroll-id');
   *   delegate.scrollToRememberedPosition();
   *   $scope.items = [];
   *   for (var i=0; i<100; i++) {
   *     $scope.items.push(i);
   *   }
   * }
     * ```
     *
     * @param {string} id The id to remember the scroll position of this
     * scrollView by.
     */
      'rememberScrollPosition',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#forgetScrollPosition
     * @description
     * Stop remembering the scroll position for this scrollView.
     */
      'forgetScrollPosition',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#scrollToRememberedPosition
     * @description
     * If this scrollView has an id associated with its scroll position,
     * (through calling rememberScrollPosition), and that position is remembered,
     * load the position and scroll to it.
     * @param {boolean=} shouldAnimate Whether to animate the scroll.
     */
      'scrollToRememberedPosition'
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * scrollViews with `delegate-handle` matching the given handle.
     *
     * Example: `$ionicScrollDelegate.$getByHandle('my-handle').scrollTop();`
     */
    ]));


  /**
   * @ngdoc service
   * @name $ionicSideMenuDelegate
   * @module ionic
   *
   * @description
   * Delegate for controlling the {@link ionic.directive:ionSideMenus} directive.
   *
   * Methods called directly on the $ionicSideMenuDelegate service will control all side
   * menus.  Use the {@link ionic.service:$ionicSideMenuDelegate#$getByHandle $getByHandle}
   * method to control specific ionSideMenus instances.
   *
   * @usage
   *
   * ```html
   * <body ng-controller="MainCtrl">
   *   <ion-side-menus>
   *     <ion-side-menu-content>
   *       Content!
   *       <button ng-click="toggleLeftSideMenu()">
   *         Toggle Left Side Menu
   *       </button>
   *     </ion-side-menu-content>
   *     <ion-side-menu side="left">
   *       Left Menu!
   *     <ion-side-menu>
   *   </ion-side-menus>
   * </body>
   * ```
   * ```js
   * function MainCtrl($scope, $ionicSideMenuDelegate) {
 *   $scope.toggleLeftSideMenu = function() {
 *     $ionicSideMenuDelegate.toggleLeft();
 *   };
 * }
   * ```
   */
  IonicModule
    .service('$ionicSideMenuDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#toggleLeft
     * @description Toggle the left side menu (if it exists).
     * @param {boolean=} isOpen Whether to open or close the menu.
     * Default: Toggles the menu.
     */
      'toggleLeft',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#toggleRight
     * @description Toggle the right side menu (if it exists).
     * @param {boolean=} isOpen Whether to open or close the menu.
     * Default: Toggles the menu.
     */
      'toggleRight',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#getOpenRatio
     * @description Gets the ratio of open amount over menu width. For example, a
     * menu of width 100 that is opened by 50 pixels is 50% opened, and would return
     * a ratio of 0.5.
     *
     * @returns {float} 0 if nothing is open, between 0 and 1 if left menu is
     * opened/opening, and between 0 and -1 if right menu is opened/opening.
     */
      'getOpenRatio',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#isOpen
     * @returns {boolean} Whether either the left or right menu is currently opened.
     */
      'isOpen',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#isOpenLeft
     * @returns {boolean} Whether the left menu is currently opened.
     */
      'isOpenLeft',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#isOpenRight
     * @returns {boolean} Whether the right menu is currently opened.
     */
      'isOpenRight',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#canDragContent
     * @param {boolean=} canDrag Set whether the content can or cannot be dragged to open
     * side menus.
     * @returns {boolean} Whether the content can be dragged to open side menus.
     */
      'canDragContent',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#edgeDragThreshold
     * @param {boolean|number=} value Set whether the content drag can only start if it is below a certain threshold distance from the edge of the screen. Accepts three different values:
     *  - If a non-zero number is given, that many pixels is used as the maximum allowed distance from the edge that starts dragging the side menu.
     *  - If true is given, the default number of pixels (25) is used as the maximum allowed distance.
     *  - If false or 0 is given, the edge drag threshold is disabled, and dragging from anywhere on the content is allowed.
     * @returns {boolean} Whether the drag can start only from within the edge of screen threshold.
     */
      'edgeDragThreshold',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * {@link ionic.directive:ionSideMenus} directives with `delegate-handle` matching
     * the given handle.
     *
     * Example: `$ionicSideMenuDelegate.$getByHandle('my-handle').toggleLeft();`
     */
    ]));


  /**
   * @ngdoc service
   * @name $ionicSlideBoxDelegate
   * @module ionic
   * @description
   * Delegate that controls the {@link ionic.directive:ionSlideBox} directive.
   *
   * Methods called directly on the $ionicSlideBoxDelegate service will control all slide boxes.  Use the {@link ionic.service:$ionicSlideBoxDelegate#$getByHandle $getByHandle}
   * method to control specific slide box instances.
   *
   * @usage
   *
   * ```html
   * <body ng-controller="MyCtrl">
   *   <ion-slide-box>
   *     <ion-slide>
   *       <div class="box blue">
   *         <button ng-click="nextSlide()">Next slide!</button>
   *       </div>
   *     </ion-slide>
   *     <ion-slide>
   *       <div class="box red">
   *         Slide 2!
   *       </div>
   *     </ion-slide>
   *   </ion-slide-box>
   * </body>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicSlideBoxDelegate) {
 *   $scope.nextSlide = function() {
 *     $ionicSlideBoxDelegate.next();
 *   }
 * }
   * ```
   */
  IonicModule
    .service('$ionicSlideBoxDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#update
     * @description
     * Update the slidebox (for example if using Angular with ng-repeat,
     * resize it for the elements inside).
     */
      'update',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#slide
     * @param {number} to The index to slide to.
     * @param {number=} speed The number of milliseconds for the change to take.
     */
      'slide',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#enableSlide
     * @param {boolean=} shouldEnable Whether to enable sliding the slidebox.
     * @returns {boolean} Whether sliding is enabled.
     */
      'enableSlide',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#previous
     * @description Go to the previous slide. Wraps around if at the beginning.
     */
      'previous',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#next
     * @description Go to the next slide. Wraps around if at the end.
     */
      'next',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#stop
     * @description Stop sliding. The slideBox will not move again until
     * explicitly told to do so.
     */
      'stop',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#start
     * @description Start sliding again if the slideBox was stopped.
     */
      'start',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#currentIndex
     * @returns number The index of the current slide.
     */
      'currentIndex',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#slidesCount
     * @returns number The number of slides there are currently.
     */
      'slidesCount'
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * {@link ionic.directive:ionSlideBox} directives with `delegate-handle` matching
     * the given handle.
     *
     * Example: `$ionicSlideBoxDelegate.$getByHandle('my-handle').stop();`
     */
    ]));


  /**
   * @ngdoc service
   * @name $ionicTabsDelegate
   * @module ionic
   *
   * @description
   * Delegate for controlling the {@link ionic.directive:ionTabs} directive.
   *
   * Methods called directly on the $ionicTabsDelegate service will control all ionTabs
   * directives. Use the {@link ionic.service:$ionicTabsDelegate#$getByHandle $getByHandle}
   * method to control specific ionTabs instances.
   *
   * @usage
   *
   * ```html
   * <body ng-controller="MyCtrl">
   *   <ion-tabs>
   *
   *     <ion-tab title="Tab 1">
   *       Hello tab 1!
   *       <button ng-click="selectTabWithIndex(1)">Select tab 2!</button>
   *     </ion-tab>
   *     <ion-tab title="Tab 2">Hello tab 2!</ion-tab>
   *
   *   </ion-tabs>
   * </body>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicTabsDelegate) {
 *   $scope.selectTabWithIndex = function(index) {
 *     $ionicTabsDelegate.select(index);
 *   }
 * }
   * ```
   */
  IonicModule
    .service('$ionicTabsDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicTabsDelegate#select
     * @description Select the tab matching the given index.
     *
     * @param {number} index Index of the tab to select.
     * @param {boolean=} shouldChangeHistory Whether this selection should load this tab's
     * view history (if it exists) and use it, or just load the default page.
     * Default false.
     * Hint: you probably want this to be true if you have an
     * {@link ionic.directive:ionNavView} inside your tab.
     */
      'select',
    /**
     * @ngdoc method
     * @name $ionicTabsDelegate#selectedIndex
     * @returns `number` The index of the selected tab, or -1.
     */
      'selectedIndex'
    /**
     * @ngdoc method
     * @name $ionicTabsDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * {@link ionic.directive:ionTabs} directives with `delegate-handle` matching
     * the given handle.
     *
     * Example: `$ionicTabsDelegate.$getByHandle('my-handle').select(0);`
     */
    ]));


  IonicModule
    .factory('$ionicTemplateLoader', [
      '$compile',
      '$controller',
      '$http',
      '$q',
      '$rootScope',
      '$templateCache',
      function($compile, $controller, $http, $q, $rootScope, $templateCache) {

        return {
          load: fetchTemplate,
          compile: loadAndCompile
        };

        function fetchTemplate(url) {
          return $http.get(url, {cache: $templateCache})
            .then(function(response) {
              return response.data && response.data.trim();
            });
        }

        function loadAndCompile(options) {
          options = extend({
            template: '',
            templateUrl: '',
            scope: null,
            controller: null,
            locals: {},
            appendTo: null
          }, options || {});

          var templatePromise = options.templateUrl ?
            this.load(options.templateUrl) :
            $q.when(options.template);

          return templatePromise.then(function(template) {
            var controller;
            var scope = options.scope || $rootScope.$new();

            //Incase template doesn't have just one root element, do this
            var element = jqLite('<div>').html(template).contents();

            if (options.controller) {
              controller = $controller(
                options.controller,
                extend(options.locals, {
                  $scope: scope
                })
              );
              element.children().data('$ngControllerController', controller);
            }
            if (options.appendTo) {
              jqLite(options.appendTo).append(element);
            }

            $compile(element)(scope);

            return {
              element: element,
              scope: scope
            };
          });
        }

      }]);

  /**
   * @private
   * TODO document
   */
  IonicModule
    .run([
      '$rootScope',
      '$state',
      '$location',
      '$document',
      '$animate',
      '$ionicPlatform',
      '$ionicViewService',
      function($rootScope, $state, $location, $document, $animate, $ionicPlatform, $ionicViewService) {

        // init the variables that keep track of the view history
        $rootScope.$viewHistory = {
          histories: { root: { historyId: 'root', parentHistoryId: null, stack: [], cursor: -1 } },
          views: {},
          backView: null,
          forwardView: null,
          currentView: null,
          disabledRegistrableTagNames: []
        };

        // set that these directives should not animate when transitioning
        // to it. Instead, the children <tab> directives would animate
        if ($ionicViewService.disableRegisterByTagName) {
          $ionicViewService.disableRegisterByTagName('ion-tabs');
          $ionicViewService.disableRegisterByTagName('ion-side-menus');
        }

        $rootScope.$on('viewState.changeHistory', function(e, data) {
          if(!data) return;

          var hist = (data.historyId ? $rootScope.$viewHistory.histories[ data.historyId ] : null );
          if(hist && hist.cursor > -1 && hist.cursor < hist.stack.length) {
            // the history they're going to already exists
            // go to it's last view in its stack
            var view = hist.stack[ hist.cursor ];
            return view.go(data);
          }

          // this history does not have a URL, but it does have a uiSref
          // figure out its URL from the uiSref
          if(!data.url && data.uiSref) {
            data.url = $state.href(data.uiSref);
          }

          if(data.url) {
            // don't let it start with a #, messes with $location.url()
            if(data.url.indexOf('#') === 0) {
              data.url = data.url.replace('#', '');
            }
            if(data.url !== $location.url()) {
              // we've got a good URL, ready GO!
              $location.url(data.url);
            }
          }
        });

        // Set the document title when a new view is shown
        $rootScope.$on('viewState.viewEnter', function(e, data) {
          if(data && data.title) {
            $document[0].title = data.title;
          }
        });

        // Triggered when devices with a hardware back button (Android) is clicked by the user
        // This is a Cordova/Phonegap platform specifc method
        function onHardwareBackButton(e) {
          if($rootScope.$viewHistory.backView) {
            // there is a back view, go to it
            $rootScope.$viewHistory.backView.go();
          } else {
            // there is no back view, so close the app instead
            ionic.Platform.exitApp();
          }
          e.preventDefault();
          return false;
        }
        $ionicPlatform.registerBackButtonAction(
          onHardwareBackButton,
          PLATFORM_BACK_BUTTON_PRIORITY_VIEW
        );

      }])

    .factory('$ionicViewService', [
      '$rootScope',
      '$state',
      '$location',
      '$window',
      '$injector',
      '$animate',
      '$ionicNavViewConfig',
      function($rootScope, $state, $location, $window, $injector, $animate, $ionicNavViewConfig) {

        var View = function(){};
        View.prototype.initialize = function(data) {
          if(data) {
            for(var name in data) this[name] = data[name];
            return this;
          }
          return null;
        };
        View.prototype.go = function() {

          if(this.stateName) {
            return $state.go(this.stateName, this.stateParams);
          }

          if(this.url && this.url !== $location.url()) {

            if($rootScope.$viewHistory.backView === this) {
              return $window.history.go(-1);
            } else if($rootScope.$viewHistory.forwardView === this) {
              return $window.history.go(1);
            }

            $location.url(this.url);
            return;
          }

          return null;
        };
        View.prototype.destroy = function() {
          if(this.scope) {
            this.scope.$destroy && this.scope.$destroy();
            this.scope = null;
          }
        };

        function createViewId(stateId) {
          return ionic.Utils.nextUid();
        }

        return {

          register: function(containerScope, element) {

            var viewHistory = $rootScope.$viewHistory,
              currentStateId = this.getCurrentStateId(),
              hist = this._getHistory(containerScope),
              currentView = viewHistory.currentView,
              backView = viewHistory.backView,
              forwardView = viewHistory.forwardView,
              nextViewOptions = this.nextViewOptions(),
              rsp = {
                viewId: null,
                navAction: null,
                navDirection: null,
                historyId: hist.historyId
              };

            if(element && !this.isTagNameRegistrable(element)) {
              // first check to see if this element can even be registered as a view.
              // Certain tags are only containers for views, but are not views themselves.
              // For example, the <ion-tabs> directive contains a <ion-tab> and the <ion-tab> is the
              // view, but the <ion-tabs> directive itself should not be registered as a view.
              rsp.navAction = 'disabledByTagName';
              return rsp;
            }

            if(currentView &&
              currentView.stateId === currentStateId &&
              currentView.historyId === hist.historyId) {
              // do nothing if its the same stateId in the same history
              rsp.navAction = 'noChange';
              return rsp;
            }

            if(viewHistory.forcedNav) {
              // we've previously set exactly what to do
              ionic.Utils.extend(rsp, viewHistory.forcedNav);
              $rootScope.$viewHistory.forcedNav = null;

            } else if(backView && backView.stateId === currentStateId) {
              // they went back one, set the old current view as a forward view
              rsp.viewId = backView.viewId;
              rsp.navAction = 'moveBack';
              rsp.viewId = backView.viewId;
              if(backView.historyId === currentView.historyId) {
                // went back in the same history
                rsp.navDirection = 'back';
              }

            } else if(forwardView && forwardView.stateId === currentStateId) {
              // they went to the forward one, set the forward view to no longer a forward view
              rsp.viewId = forwardView.viewId;
              rsp.navAction = 'moveForward';
              if(forwardView.historyId === currentView.historyId) {
                rsp.navDirection = 'forward';
              }

              var parentHistory = this._getParentHistoryObj(containerScope);
              if(forwardView.historyId && parentHistory.scope) {
                // if a history has already been created by the forward view then make sure it stays the same
                parentHistory.scope.$historyId = forwardView.historyId;
                rsp.historyId = forwardView.historyId;
              }

            } else if(currentView && currentView.historyId !== hist.historyId &&
              hist.cursor > -1 && hist.stack.length > 0 && hist.cursor < hist.stack.length &&
              hist.stack[hist.cursor].stateId === currentStateId) {
              // they just changed to a different history and the history already has views in it
              rsp.viewId = hist.stack[hist.cursor].viewId;
              rsp.navAction = 'moveBack';

            } else {

              // set a new unique viewId
              rsp.viewId = createViewId(currentStateId);

              if(currentView) {
                // set the forward view if there is a current view (ie: if its not the first view)
                currentView.forwardViewId = rsp.viewId;

                // its only moving forward if its in the same history
                if(hist.historyId === currentView.historyId) {
                  rsp.navDirection = 'forward';
                }
                rsp.navAction = 'newView';

                // check if there is a new forward view
                if(forwardView && currentView.stateId !== forwardView.stateId) {
                  // they navigated to a new view but the stack already has a forward view
                  // since its a new view remove any forwards that existed
                  var forwardsHistory = this._getHistoryById(forwardView.historyId);
                  if(forwardsHistory) {
                    // the forward has a history
                    for(var x=forwardsHistory.stack.length - 1; x >= forwardView.index; x--) {
                      // starting from the end destroy all forwards in this history from this point
                      forwardsHistory.stack[x].destroy();
                      forwardsHistory.stack.splice(x);
                    }
                  }
                }

              } else {
                // there's no current view, so this must be the initial view
                rsp.navAction = 'initialView';
              }

              // add the new view
              viewHistory.views[rsp.viewId] = this.createView({
                viewId: rsp.viewId,
                index: hist.stack.length,
                historyId: hist.historyId,
                backViewId: (currentView && currentView.viewId ? currentView.viewId : null),
                forwardViewId: null,
                stateId: currentStateId,
                stateName: this.getCurrentStateName(),
                stateParams: this.getCurrentStateParams(),
                url: $location.url(),
              });

              if (rsp.navAction == 'moveBack') {
                //moveBack(from, to);
                $rootScope.$emit('$viewHistory.viewBack', currentView.viewId, rsp.viewId);
              }

              // add the new view to this history's stack
              hist.stack.push(viewHistory.views[rsp.viewId]);
            }

            if(nextViewOptions) {
              if(nextViewOptions.disableAnimate) rsp.navDirection = null;
              if(nextViewOptions.disableBack) viewHistory.views[rsp.viewId].backViewId = null;
              this.nextViewOptions(null);
            }

            this.setNavViews(rsp.viewId);

            hist.cursor = viewHistory.currentView.index;

            return rsp;
          },

          setNavViews: function(viewId) {
            var viewHistory = $rootScope.$viewHistory;

            viewHistory.currentView = this._getViewById(viewId);
            viewHistory.backView = this._getBackView(viewHistory.currentView);
            viewHistory.forwardView = this._getForwardView(viewHistory.currentView);

            $rootScope.$broadcast('$viewHistory.historyChange', {
              showBack: (viewHistory.backView && viewHistory.backView.historyId === viewHistory.currentView.historyId)
            });
          },

          registerHistory: function(scope) {
            scope.$historyId = ionic.Utils.nextUid();
          },

          createView: function(data) {
            var newView = new View();
            return newView.initialize(data);
          },

          getCurrentView: function() {
            return $rootScope.$viewHistory.currentView;
          },

          getBackView: function() {
            return $rootScope.$viewHistory.backView;
          },

          getForwardView: function() {
            return $rootScope.$viewHistory.forwardView;
          },

          getNavDirection: function() {
            return $rootScope.$viewHistory.navDirection;
          },

          getCurrentStateName: function() {
            return ($state && $state.current ? $state.current.name : null);
          },

          isCurrentStateNavView: function(navView) {
            return ($state &&
              $state.current &&
              $state.current.views &&
              $state.current.views[navView] ? true : false);
          },

          getCurrentStateParams: function() {
            var rtn;
            if ($state && $state.params) {
              for(var key in $state.params) {
                if($state.params.hasOwnProperty(key)) {
                  rtn = rtn || {};
                  rtn[key] = $state.params[key];
                }
              }
            }
            return rtn;
          },

          getCurrentStateId: function() {
            var id;
            if($state && $state.current && $state.current.name) {
              id = $state.current.name;
              if($state.params) {
                for(var key in $state.params) {
                  if($state.params.hasOwnProperty(key) && $state.params[key]) {
                    id += "_" + key + "=" + $state.params[key];
                  }
                }
              }
              return id;
            }
            // if something goes wrong make sure its got a unique stateId
            return ionic.Utils.nextUid();
          },

          goToHistoryRoot: function(historyId) {
            if(historyId) {
              var hist = $rootScope.$viewHistory.histories[ historyId ];
              if(hist && hist.stack.length) {
                if($rootScope.$viewHistory.currentView && $rootScope.$viewHistory.currentView.viewId === hist.stack[0].viewId) {
                  return;
                }
                $rootScope.$viewHistory.forcedNav = {
                  viewId: hist.stack[0].viewId,
                  navAction: 'moveBack',
                  navDirection: 'back'
                };
                hist.stack[0].go();
              }
            }
          },

          _getViewById: function(viewId) {
            return (viewId ? $rootScope.$viewHistory.views[ viewId ] : null );
          },

          _getBackView: function(view) {
            return (view ? this._getViewById(view.backViewId) : null );
          },

          _getForwardView: function(view) {
            return (view ? this._getViewById(view.forwardViewId) : null );
          },

          _getHistoryById: function(historyId) {
            return (historyId ? $rootScope.$viewHistory.histories[ historyId ] : null );
          },

          _getHistory: function(scope) {
            var histObj = this._getParentHistoryObj(scope);

            if( !$rootScope.$viewHistory.histories[ histObj.historyId ] ) {
              // this history object exists in parent scope, but doesn't
              // exist in the history data yet
              $rootScope.$viewHistory.histories[ histObj.historyId ] = {
                historyId: histObj.historyId,
                parentHistoryId: this._getParentHistoryObj(histObj.scope.$parent).historyId,
                stack: [],
                cursor: -1
              };
            }

            return $rootScope.$viewHistory.histories[ histObj.historyId ];
          },

          _getParentHistoryObj: function(scope) {
            var parentScope = scope;
            while(parentScope) {
              if(parentScope.hasOwnProperty('$historyId')) {
                // this parent scope has a historyId
                return { historyId: parentScope.$historyId, scope: parentScope };
              }
              // nothing found keep climbing up
              parentScope = parentScope.$parent;
            }
            // no history for for the parent, use the root
            return { historyId: 'root', scope: $rootScope };
          },

          nextViewOptions: function(opts) {
            if(arguments.length) {
              this._nextOpts = opts;
            } else {
              return this._nextOpts;
            }
          },

          getRenderer: function(navViewElement, navViewAttrs, navViewScope) {
            var service = this;
            var registerData;
            var doAnimation;

            // climb up the DOM and see which animation classname to use, if any
            var animationClass = getParentAnimationClass(navViewElement[0]);

            function getParentAnimationClass(el) {
              var className = '';
              while(!className && el) {
                className = el.getAttribute('animation');
                el = el.parentElement;
              }

              // If they don't have an animation set explicitly, use the value in the config
              if(!className) {
                return $ionicNavViewConfig.transition;
              }

              return className;
            }

            function setAnimationClass() {
              // add the animation CSS class we're gonna use to transition between views
              if (animationClass) {
                navViewElement[0].classList.add(animationClass);
              }

              if(registerData.navDirection === 'back') {
                // animate like we're moving backward
                navViewElement[0].classList.add('reverse');
              } else {
                // defaults to animate forward
                // make sure the reverse class isn't already added
                navViewElement[0].classList.remove('reverse');
              }
            }

            return function(shouldAnimate) {

              return {

                enter: function(element) {

                  if(doAnimation && shouldAnimate) {
                    // enter with an animation
                    setAnimationClass();

                    element.addClass('ng-enter');
                    document.body.classList.add('disable-pointer-events');

                    $animate.enter(element, navViewElement, null, function() {
                      document.body.classList.remove('disable-pointer-events');
                      if (animationClass) {
                        navViewElement[0].classList.remove(animationClass);
                      }
                    });
                    return;
                  } else if(!doAnimation) {
                    document.body.classList.remove('disable-pointer-events');
                  }

                  // no animation
                  navViewElement.append(element);
                },

                leave: function() {
                  var element = navViewElement.contents();

                  if(doAnimation && shouldAnimate) {
                    // leave with an animation
                    setAnimationClass();

                    $animate.leave(element, function() {
                      element.remove();
                    });
                    return;
                  }

                  // no animation
                  element.remove();
                },

                register: function(element) {
                  // register a new view
                  registerData = service.register(navViewScope, element);
                  doAnimation = (animationClass !== null && registerData.navDirection !== null);
                  return registerData;
                }

              };
            };
          },

          disableRegisterByTagName: function(tagName) {
            // not every element should animate betwee transitions
            // For example, the <ion-tabs> directive should not animate when it enters,
            // but instead the <ion-tabs> directve would just show, and its children
            // <ion-tab> directives would do the animating, but <ion-tabs> itself is not a view
            $rootScope.$viewHistory.disabledRegistrableTagNames.push(tagName.toUpperCase());
          },

          isTagNameRegistrable: function(element) {
            // check if this element has a tagName (at its root, not recursively)
            // that shouldn't be animated, like <ion-tabs> or <ion-side-menu>
            var x, y, disabledTags = $rootScope.$viewHistory.disabledRegistrableTagNames;
            for(x=0; x<element.length; x++) {
              if(element[x].nodeType !== 1) continue;
              for(y=0; y<disabledTags.length; y++) {
                if(element[x].tagName === disabledTags[y]) {
                  return false;
                }
              }
            }
            return true;
          },

          clearHistory: function() {
            var
              histories = $rootScope.$viewHistory.histories,
              currentView = $rootScope.$viewHistory.currentView;

            if(histories) {
              for(var historyId in histories) {

                if(histories[historyId].stack) {
                  histories[historyId].stack = [];
                  histories[historyId].cursor = -1;
                }

                if(currentView && currentView.historyId === historyId) {
                  currentView.backViewId = null;
                  currentView.forwardViewId = null;
                  histories[historyId].stack.push(currentView);
                } else if(histories[historyId].destroy) {
                  histories[historyId].destroy();
                }

              }
            }

            for(var viewId in $rootScope.$viewHistory.views) {
              if(viewId !== currentView.viewId) {
                delete $rootScope.$viewHistory.views[viewId];
              }
            }

            if(currentView) {
              this.setNavViews(currentView.viewId);
            }
          }

        };

      }]);

  /**
   * @private
   */
  IonicModule.config([
    '$provide',
    function($provide) {
      function $LocationDecorator($location, $timeout) {

        $location.__hash = $location.hash;
        //Fix: when window.location.hash is set, the scrollable area
        //found nearest to body's scrollTop is set to scroll to an element
        //with that ID.
        $location.hash = function(value) {
          if (angular.isDefined(value)) {
            $timeout(function() {
              var scroll = document.querySelector('.scroll-content');
              if (scroll)
                scroll.scrollTop = 0;
            }, 0, false);
          }
          return $location.__hash(value);
        };

        return $location;
      }

      $provide.decorator('$location', ['$delegate', '$timeout', $LocationDecorator]);
    }]);


  /**
   * @ngdoc service
   * @name $ionicListDelegate
   * @module ionic
   *
   * @description
   * Delegate for controlling the {@link ionic.directive:ionList} directive.
   *
   * Methods called directly on the $ionicListDelegate service will control all lists.
   * Use the {@link ionic.service:$ionicListDelegate#$getByHandle $getByHandle}
   * method to control specific ionList instances.
   *
   * @usage
   *
   * ````html
   * <ion-content ng-controller="MyCtrl">
   *   <button class="button" ng-click="showDeleteButtons()"></button>
   *   <ion-list>
   *     <ion-item ng-repeat="i in items">>
   *       {% raw %}Hello, {{i}}!{% endraw %}
   *       <ion-delete-button class="ion-minus-circled"></ion-delete-button>
   *     </ion-item>
   *   </ion-list>
   * </ion-content>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicListDelegate) {
 *   $scope.showDeleteButtons = function() {
 *     $ionicListDelegate.showDelete(true);
 *   };
 * }
   * ```
   */
  IonicModule
    .service('$ionicListDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicListDelegate#showReorder
     * @param {boolean=} showReorder Set whether or not this list is showing its reorder buttons.
     * @returns {boolean} Whether the reorder buttons are shown.
     */
      'showReorder',
    /**
     * @ngdoc method
     * @name $ionicListDelegate#showDelete
     * @param {boolean=} showReorder Set whether or not this list is showing its delete buttons.
     * @returns {boolean} Whether the delete buttons are shown.
     */
      'showDelete',
    /**
     * @ngdoc method
     * @name $ionicListDelegate#canSwipeItems
     * @param {boolean=} showReorder Set whether or not this list is able to swipe to show
     * option buttons.
     * @returns {boolean} Whether the list is able to swipe to show option buttons.
     */
      'canSwipeItems',
    /**
     * @ngdoc method
     * @name $ionicListDelegate#closeOptionButtons
     * @description Closes any option buttons on the list that are swiped open.
     */
      'closeOptionButtons',
    /**
     * @ngdoc method
     * @name $ionicListDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * {@link ionic.directive:ionList} directives with `delegate-handle` matching
     * the given handle.
     *
     * Example: `$ionicListDelegate.$getByHandle('my-handle').showReorder(true);`
     */
    ]))

    .controller('$ionicList', [
      '$scope',
      '$attrs',
      '$parse',
      '$ionicListDelegate',
      function($scope, $attrs, $parse, $ionicListDelegate) {

        var isSwipeable = true;
        var isReorderShown = false;
        var isDeleteShown = false;

        var deregisterInstance = $ionicListDelegate._registerInstance(this, $attrs.delegateHandle);
        $scope.$on('$destroy', deregisterInstance);

        this.showReorder = function(show) {
          if (arguments.length) {
            isReorderShown = !!show;
          }
          return isReorderShown;
        };

        this.showDelete = function(show) {
          if (arguments.length) {
            isDeleteShown = !!show;
          }
          return isDeleteShown;
        };

        this.canSwipeItems = function(can) {
          if (arguments.length) {
            isSwipeable = !!can;
          }
          return isSwipeable;
        };

        this.closeOptionButtons = function() {
          this.listView && this.listView.clearDragEffects();
        };
      }]);

  IonicModule
    .controller('$ionicNavBar', [
      '$scope',
      '$element',
      '$attrs',
      '$ionicViewService',
      '$animate',
      '$compile',
      '$ionicNavBarDelegate',
      function($scope, $element, $attrs, $ionicViewService, $animate, $compile, $ionicNavBarDelegate) {
        //Let the parent know about our controller too so that children of
        //sibling content elements can know about us
        $element.parent().data('$ionNavBarController', this);

        var deregisterInstance = $ionicNavBarDelegate._registerInstance(this, $attrs.delegateHandle);

        $scope.$on('$destroy', deregisterInstance);

        var self = this;

        this.leftButtonsElement = jqLite(
          $element[0].querySelector('.buttons.left-buttons')
        );
        this.rightButtonsElement = jqLite(
          $element[0].querySelector('.buttons.right-buttons')
        );

        this.back = function() {
          var backView = $ionicViewService.getBackView();
          backView && backView.go();
          return false;
        };

        this.align = function(direction) {
          this._headerBarView.align(direction);
        };

        this.showBackButton = function(show) {
          if (arguments.length) {
            $scope.backButtonShown = !!show;
          }
          return !!($scope.hasBackButton && $scope.backButtonShown);
        };

        this.showBar = function(show) {
          if (arguments.length) {
            $scope.isInvisible = !show;
            $scope.$parent.$hasHeader = !!show;
          }
          return !$scope.isInvisible;
        };

        this.setTitle = function(title) {
          if ($scope.title === title) {
            return;
          }
          $scope.oldTitle = $scope.title;
          $scope.title = title || '';
        };

        this.changeTitle = function(title, direction) {
          if ($scope.title === title) {
            return false;
          }
          this.setTitle(title);
          $scope.isReverse = direction == 'back';
          $scope.shouldAnimate = !!direction;

          if (!$scope.shouldAnimate) {
            //We're done!
            this._headerBarView.align();
          } else {
            this._animateTitles();
          }
          return true;
        };

        this.getTitle = function() {
          return $scope.title || '';
        };

        this.getPreviousTitle = function() {
          return $scope.oldTitle || '';
        };

        /**
         * Exposed for testing
         */
        this._animateTitles = function() {
          var oldTitleEl, newTitleEl, currentTitles;

          //If we have any title right now
          //(or more than one, they could be transitioning on switch),
          //replace the first one with an oldTitle element
          currentTitles = $element[0].querySelectorAll('.title');
          if (currentTitles.length) {
            oldTitleEl = $compile('<h1 class="title" ng-bind-html="oldTitle"></h1>')($scope);
            jqLite(currentTitles[0]).replaceWith(oldTitleEl);
          }
          //Compile new title
          newTitleEl = $compile('<h1 class="title invisible" ng-bind-html="title"></h1>')($scope);

          //Animate in on next frame
          ionic.requestAnimationFrame(function() {

            oldTitleEl && $animate.leave(jqLite(oldTitleEl));

            var insert = oldTitleEl && jqLite(oldTitleEl) || null;
            $animate.enter(newTitleEl, $element, insert, function() {
              self._headerBarView.align();
            });

            //Cleanup any old titles leftover (besides the one we already did replaceWith on)
            forEach(currentTitles, function(el) {
              if (el && el.parentNode) {
                //Use .remove() to cleanup things like .data()
                jqLite(el).remove();
              }
            });

            //$apply so bindings fire
            $scope.$digest();

            //Stop flicker of new title on ios7
            ionic.requestAnimationFrame(function() {
              newTitleEl[0].classList.remove('invisible');
            });
          });
        };
      }]);


  /**
   * @private
   */
  IonicModule

    .factory('$$scrollValueCache', function() {
      return {};
    })

    .controller('$ionicScroll', [
      '$scope',
      'scrollViewOptions',
      '$timeout',
      '$window',
      '$$scrollValueCache',
      '$location',
      '$rootScope',
      '$document',
      '$ionicScrollDelegate',
      function($scope, scrollViewOptions, $timeout, $window, $$scrollValueCache, $location, $rootScope, $document, $ionicScrollDelegate) {

        var self = this;

        this._scrollViewOptions = scrollViewOptions; //for testing

        var element = this.element = scrollViewOptions.el;
        var $element = this.$element = jqLite(element);
        var scrollView = this.scrollView = new ionic.views.Scroll(scrollViewOptions);

        //Attach self to element as a controller so other directives can require this controller
        //through `require: '$ionicScroll'
        //Also attach to parent so that sibling elements can require this
        ($element.parent().length ? $element.parent() : $element)
          .data('$$ionicScrollController', this);

        var deregisterInstance = $ionicScrollDelegate._registerInstance(
          this, scrollViewOptions.delegateHandle
        );

        if (!angular.isDefined(scrollViewOptions.bouncing)) {
          ionic.Platform.ready(function() {
            scrollView.options.bouncing = true;

            if(ionic.Platform.isAndroid()) {
              // No bouncing by default on Android
              scrollView.options.bouncing = false;
              // Faster scroll decel
              scrollView.options.deceleration = 0.95;
            } else {
            }
          });
        }

        var resize = angular.bind(scrollView, scrollView.resize);
        ionic.on('resize', resize, $window);

        // set by rootScope listener if needed
        var backListenDone = angular.noop;

        $scope.$on('$destroy', function() {
          deregisterInstance();
          scrollView.__removeEventHandlers();
          ionic.off('resize', resize, $window);
          $window.removeEventListener('resize', resize);
          backListenDone();
          if (self._rememberScrollId) {
            $$scrollValueCache[self._rememberScrollId] = scrollView.getValues();
          }
        });

        $element.on('scroll', function(e) {
          var detail = (e.originalEvent || e).detail || {};
          $scope.$onScroll && $scope.$onScroll({
            event: e,
            scrollTop: detail.scrollTop || 0,
            scrollLeft: detail.scrollLeft || 0
          });
        });

        $scope.$on('$viewContentLoaded', function(e, historyData) {
          //only the top-most scroll area under a view should remember that view's
          //scroll position
          if (e.defaultPrevented) { return; }
          e.preventDefault();

          var viewId = historyData && historyData.viewId || $scope.$historyId;
          if (viewId) {
            $timeout(function() {
              self.rememberScrollPosition(viewId);
              self.scrollToRememberedPosition();

              backListenDone = $rootScope.$on('$viewHistory.viewBack', function(e, fromViewId, toViewId) {
                //When going back from this view, forget its saved scroll position
                if (viewId === fromViewId) {
                  self.forgetScrollPosition();
                }
              });
            }, 0, false);
          }
        });

        $timeout(function() {
          scrollView.run();
        });

        this._rememberScrollId = null;

        this.getScrollView = function() {
          return this.scrollView;
        };

        this.getScrollPosition = function() {
          return this.scrollView.getValues();
        };

        this.resize = function() {
          return $timeout(resize);
        };

        this.scrollTop = function(shouldAnimate) {
          this.resize().then(function() {
            scrollView.scrollTo(0, 0, !!shouldAnimate);
          });
        };

        this.scrollBottom = function(shouldAnimate) {
          this.resize().then(function() {
            var max = scrollView.getScrollMax();
            scrollView.scrollTo(max.left, max.top, !!shouldAnimate);
          });
        };

        this.scrollTo = function(left, top, shouldAnimate) {
          this.resize().then(function() {
            scrollView.scrollTo(left, top, !!shouldAnimate);
          });
        };

        this.scrollBy = function(left, top, shouldAnimate) {
          this.resize().then(function() {
            scrollView.scrollBy(left, top, !!shouldAnimate);
          });
        };

        this.anchorScroll = function(shouldAnimate) {
          this.resize().then(function() {
            var hash = $location.hash();
            var elm = hash && $document[0].getElementById(hash);
            if (!(hash && elm)) {
              scrollView.scrollTo(0,0, !!shouldAnimate);
              return;
            }
            var curElm = elm;
            var scrollLeft = 0, scrollTop = 0, levelsClimbed = 0;
            do {
              if(curElm !== null)scrollLeft += curElm.offsetLeft;
              if(curElm !== null)scrollTop += curElm.offsetTop;
              curElm = curElm.offsetParent;
              levelsClimbed++;
            } while (curElm.attributes != self.element.attributes && curElm.offsetParent);
            scrollView.scrollTo(scrollLeft, scrollTop, !!shouldAnimate);
          });
        };

        this.rememberScrollPosition = function(id) {
          if (!id) {
            throw new Error("Must supply an id to remember the scroll by!");
          }
          this._rememberScrollId = id;
        };
        this.forgetScrollPosition = function() {
          delete $$scrollValueCache[this._rememberScrollId];
          this._rememberScrollId = null;
        };
        this.scrollToRememberedPosition = function(shouldAnimate) {
          var values = $$scrollValueCache[this._rememberScrollId];
          if (values) {
            this.resize().then(function() {
              scrollView.scrollTo(+values.left, +values.top, shouldAnimate);
            });
          }
        };

        /**
         * @private
         */
        this._setRefresher = function(refresherScope, refresherElement) {
          var refresher = this.refresher = refresherElement;
          var refresherHeight = self.refresher.clientHeight || 0;
          scrollView.activatePullToRefresh(refresherHeight, function() {
            refresher.classList.add('active');
            refresherScope.$onPulling();
          }, function() {
            refresher.classList.remove('refreshing');
            refresher.classList.remove('active');
          }, function() {
            refresher.classList.add('refreshing');
            refresherScope.$onRefresh();
          });
        };
      }]);


  IonicModule
    .controller('$ionicSideMenus', [
      '$scope',
      '$attrs',
      '$ionicSideMenuDelegate',
      '$ionicPlatform',
      function($scope, $attrs, $ionicSideMenuDelegate, $ionicPlatform) {
        var self = this;
        extend(this, ionic.controllers.SideMenuController.prototype);

        this.$scope = $scope;

        ionic.controllers.SideMenuController.call(this, {
          left: { width: 275 },
          right: { width: 275 }
        });

        this.canDragContent = function(canDrag) {
          if (arguments.length) {
            $scope.dragContent = !!canDrag;
          }
          return $scope.dragContent;
        };

        this.edgeThreshold = 25;
        this.edgeThresholdEnabled = false;
        this.edgeDragThreshold = function(value) {
          if (arguments.length) {
            if (angular.isNumber(value) && value > 0) {
              this.edgeThreshold = value;
              this.edgeThresholdEnabled = true;
            } else {
              this.edgeThresholdEnabled = !!value;
            }
          }
          return this.edgeThresholdEnabled;
        };

        this.isDraggableTarget = function(e) {
          //Only restrict edge when sidemenu is closed and restriction is enabled
          var shouldOnlyAllowEdgeDrag = self.edgeThresholdEnabled && !self.isOpen();
          var startX = e.gesture.startEvent && e.gesture.startEvent.center &&
            e.gesture.startEvent.center.pageX;

          var dragIsWithinBounds = !shouldOnlyAllowEdgeDrag ||
            startX <= self.edgeThreshold ||
            startX >= self.content.offsetWidth - self.edgeThreshold;

          return ($scope.dragContent || self.isOpen()) &&
            dragIsWithinBounds &&
            !e.gesture.srcEvent.defaultPrevented &&
            !e.target.tagName.match(/input|textarea|select|object|embed/i) &&
            !e.target.isContentEditable &&
            !(e.target.dataset ? e.target.dataset.preventScroll : e.target.getAttribute('data-prevent-default') == 'true');
        };

        $scope.sideMenuContentTranslateX = 0;


        var deregisterBackButtonAction = angular.noop;
        var closeSideMenu = angular.bind(this, this.close);
        $scope.$watch(function() {
          return self.getOpenAmount() !== 0;
        }, function(isOpen) {
          deregisterBackButtonAction();
          if (isOpen) {
            deregisterBackButtonAction = $ionicPlatform.registerBackButtonAction(
              closeSideMenu,
              PLATFORM_BACK_BUTTON_PRIORITY_SIDE_MENU
            );
          }
        });

        var deregisterInstance = $ionicSideMenuDelegate._registerInstance(
          this, $attrs.delegateHandle
        );
        $scope.$on('$destroy', function() {
          deregisterInstance();
          deregisterBackButtonAction();
        });
      }]);

  IonicModule
    .controller('$ionicTab', [
      '$scope',
      '$ionicViewService',
      '$attrs',
      '$location',
      '$state',
      function($scope, $ionicViewService, $attrs, $location, $state) {
        this.$scope = $scope;

        //All of these exposed for testing
        this.hrefMatchesState = function() {
          return $attrs.href && $location.path().indexOf(
            $attrs.href.replace(/^#/, '').replace(/\/$/, '')
          ) === 0;
        };
        this.srefMatchesState = function() {
          return $attrs.uiSref && $state.includes( $attrs.uiSref.split('(')[0] );
        };
        this.navNameMatchesState = function() {
          return this.navViewName && $ionicViewService.isCurrentStateNavView(this.navViewName);
        };

        this.tabMatchesState = function() {
          return this.hrefMatchesState() || this.srefMatchesState() || this.navNameMatchesState();
        };
      }]);

  IonicModule
    .controller('$ionicTabs', [
      '$scope',
      '$ionicViewService',
      '$element',
      function($scope, $ionicViewService, $element) {
        var _selectedTab = null;
        var self = this;
        self.tabs = [];

        self.selectedIndex = function() {
          return self.tabs.indexOf(_selectedTab);
        };
        self.selectedTab = function() {
          return _selectedTab;
        };

        self.add = function(tab) {
          $ionicViewService.registerHistory(tab);
          self.tabs.push(tab);
          if(self.tabs.length === 1) {
            self.select(tab);
          }
        };

        self.remove = function(tab) {
          var tabIndex = self.tabs.indexOf(tab);
          if (tabIndex === -1) {
            return;
          }
          //Use a field like '$tabSelected' so developers won't accidentally set it in controllers etc
          if (tab.$tabSelected) {
            self.deselect(tab);
            //Try to select a new tab if we're removing a tab
            if (self.tabs.length === 1) {
              //do nothing if there are no other tabs to select
            } else {
              //Select previous tab if it's the last tab, else select next tab
              var newTabIndex = tabIndex === self.tabs.length - 1 ? tabIndex - 1 : tabIndex + 1;
              self.select(self.tabs[newTabIndex]);
            }
          }
          self.tabs.splice(tabIndex, 1);
        };

        self.deselect = function(tab) {
          if (tab.$tabSelected) {
            _selectedTab = null;
            tab.$tabSelected = false;
            (tab.onDeselect || angular.noop)();
          }
        };

        self.select = function(tab, shouldEmitEvent) {
          var tabIndex;
          if (angular.isNumber(tab)) {
            tabIndex = tab;
            tab = self.tabs[tabIndex];
          } else {
            tabIndex = self.tabs.indexOf(tab);
          }
          if (!tab || tabIndex == -1) {
            throw new Error('Cannot select tab "' + tabIndex + '"!');
          }

          if (_selectedTab && _selectedTab.$historyId == tab.$historyId) {
            if (shouldEmitEvent) {
              $ionicViewService.goToHistoryRoot(tab.$historyId);
            }
          } else {
            forEach(self.tabs, function(tab) {
              self.deselect(tab);
            });

            _selectedTab = tab;
            //Use a funny name like $tabSelected so the developer doesn't overwrite the var in a child scope
            tab.$tabSelected = true;
            (tab.onSelect || angular.noop)();

            if (shouldEmitEvent) {
              var viewData = {
                type: 'tab',
                tabIndex: tabIndex,
                historyId: tab.$historyId,
                navViewName: tab.navViewName,
                hasNavView: !!tab.navViewName,
                title: tab.title,
                //Skip the first character of href if it's #
                url: tab.href,
                uiSref: tab.uiSref
              };
              $scope.$emit('viewState.changeHistory', viewData);
            }
          }
        };
      }]);


  /*
   * We don't document the ionActionSheet directive, we instead document
   * the $ionicActionSheet service
   */
  IonicModule
    .directive('ionActionSheet', ['$document', function($document) {
      return {
        restrict: 'E',
        scope: true,
        replace: true,
        link: function($scope, $element){
          var keyUp = function(e) {
            if(e.which == 27) {
              $scope.cancel();
              $scope.$apply();
            }
          };

          var backdropClick = function(e) {
            if(e.target == $element[0]) {
              $scope.cancel();
              $scope.$apply();
            }
          };
          $scope.$on('$destroy', function() {
            $element.remove();
            $document.unbind('keyup', keyUp);
          });

          $document.bind('keyup', keyUp);
          $element.bind('click', backdropClick);
        },
        template: '<div class="action-sheet-backdrop">' +
          '<div class="action-sheet-wrapper">' +
          '<div class="action-sheet">' +
          '<div class="action-sheet-group">' +
          '<div class="action-sheet-title" ng-if="titleText" ng-bind-html="titleText"></div>' +
          '<button class="button" ng-click="buttonClicked($index)" ng-repeat="button in buttons" ng-bind-html="button.text"></button>' +
          '</div>' +
          '<div class="action-sheet-group" ng-if="destructiveText">' +
          '<button class="button destructive" ng-click="destructiveButtonClicked()" ng-bind-html="destructiveText"></button>' +
          '</div>' +
          '<div class="action-sheet-group" ng-if="cancelText">' +
          '<button class="button" ng-click="cancel()" ng-bind-html="cancelText"></button>' +
          '</div>' +
          '</div>' +
          '</div>' +
          '</div>'
      };
    }]);


  /**
   * @ngdoc directive
   * @name ionCheckbox
   * @module ionic
   * @restrict E
   * @codepen hqcju
   * @description
   * The checkbox is no different than the HTML checkbox input, except it's styled differently.
   *
   * The checkbox behaves like any [AngularJS checkbox](http://docs.angularjs.org/api/ng/input/input[checkbox]).
   *
   * @usage
   * ```html
   * <ion-checkbox ng-model="isChecked">Checkbox Label</ion-checkbox>
   * ```
   */

  IonicModule
    .directive('ionCheckbox', function() {
      return {
        restrict: 'E',
        replace: true,
        require: '?ngModel',
        transclude: true,
        template:
          '<label class="item item-checkbox">' +
          '<div class="checkbox checkbox-input-hidden disable-pointer-events">' +
          '<input type="checkbox">' +
          '<i class="checkbox-icon"></i>' +
          '</div>' +
          '<div class="item-content disable-pointer-events" ng-transclude></div>' +
          '</label>',
        compile: function(element, attr) {
          var input = element.find('input');
          forEach({
            'name': attr.name,
            'ng-value': attr.ngValue,
            'ng-model': attr.ngModel,
            'ng-checked': attr.ngChecked,
            'ng-disabled': attr.ngDisabled,
            'ng-true-value': attr.ngTrueValue,
            'ng-false-value': attr.ngFalseValue,
            'ng-change': attr.ngChange
          }, function(value, name) {
            if (isDefined(value)) {
              input.attr(name, value);
            }
          });
        }

      };
    });

  /**
   * @ngdoc directive
   * @module ionic
   * @name collectionRepeat
   * @restrict A
   * @codepen mFygh
   * @description
   * `collection-repeat` is a directive that allows you to render lists with
   * thousands of items in them, and experience little to no performance penalty.
   *
   * Demo:
   *
   * The directive renders onto the screen only the items that should be currently visible.
   * So if you have 1,000 items in your list but only ten fit on your screen,
   * collection-repeat will only render into the DOM the ten that are in the current
   * scroll position.
   *
   * Here are a few things to keep in mind while using collection-repeat:
   *
   * 1. The data supplied to collection-repeat must be an array.
   * 2. You must explicitly tell the directive what size your items will be in the DOM, using directive attributes.
   * Pixel amounts or percentages are allowed (see below).
   * 3. The elements rendered will be absolutely positioned: be sure to let your CSS work with
   * this (see below).
   * 4. Each collection-repeat list will take up all of its parent scrollView's space.
   * If you wish to have multiple lists on one page, put each list within its own
   * {@link ionic.directive:ionScroll ionScroll} container.
   * 5. You should not use the ng-show and ng-hide directives on your ion-content/ion-scroll elements that
   * have a collection-repeat inside.  ng-show and ng-hide apply the `display: none` css rule to the content's
   * style, causing the scrollView to read the width and height of the content as 0.  Resultingly,
   * collection-repeat will render elements that have just been un-hidden incorrectly.
   *
   *
   * @usage
   *
   * #### Basic Usage (single rows of items)
   *
   * Notice two things here: we use ng-style to set the height of the item to match
   * what the repeater thinks our item height is.  Additionally, we add a css rule
   * to make our item stretch to fit the full screen (since it will be absolutely
   * positioned).
   *
   * ```html
   * <ion-content ng-controller="ContentCtrl">
   *   <div class="list">
   *     <div class="item my-item"
   *       collection-repeat="item in items"
   *       collection-item-width="'100%'"
   *       collection-item-height="getItemHeight(item, $index)"
   *       ng-style="{height: getItemHeight(item, $index)}">
   *       {% raw %}{{item}}{% endraw %}
   *     </div>
   *   </div>
   * </div>
   * ```
   * ```js
   * function ContentCtrl($scope) {
 *   $scope.items = [];
 *   for (var i = 0; i < 1000; i++) {
 *     $scope.items.push('Item ' + i);
 *   }
 *
 *   $scope.getItemHeight = function(item, index) {
 *     //Make evenly indexed items be 10px taller, for the sake of example
 *     return (index % 2) === 0 ? 50 : 60;
 *   };
 * }
   * ```
   * ```css
   * .my-item {
 *   left: 0;
 *   right: 0;
 * }
   * ```
   *
   * #### Grid Usage (three items per row)
   *
   * ```html
   * <ion-content>
   *   <div class="item item-avatar my-image-item"
   *     collection-repeat="image in images"
   *     collection-item-width="'33%'"
   *     collection-item-height="'33%'">
   *     <img ng-src="{{image.src}}">
   *   </div>
   * </ion-content>
   * ```
   * Percentage of total visible list dimensions. This example shows a 3 by 3 matrix that fits on the screen (3 rows and 3 colums). Note that dimensions are used in the creation of the element and therefore a measurement of the item cannnot be used as an input dimension.
   * ```css
   * .my-image-item img {
 *   height: 33%;
 *   width: 33%;
 * }
   * ```
   *
   * @param {expression} collection-repeat The expression indicating how to enumerate a collection. These
   *   formats are currently supported:
   *
   *   * `variable in expression` – where variable is the user defined loop variable and `expression`
   *     is a scope expression giving the collection to enumerate.
   *
   *     For example: `album in artist.albums`.
   *
   *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function
   *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
   *     is specified the collection-repeat associates elements by identity in the collection. It is an error to have
   *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
   *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
   *     before specifying a tracking expression.
   *
   *     For example: `item in items` is equivalent to `item in items track by $id(item)'. This implies that the DOM elements
   *     will be associated by item identity in the array.
   *
   *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
   *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
   *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
   *     element in the same way in the DOM.
   *
   *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
   *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
   *     property is same.
   *
   *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
   *     to items in conjunction with a tracking expression.
   *
   * @param {expression} collection-item-width The width of the repeated element.  Can be a number (in pixels) or a percentage.
   * @param {expression} collection-item-height The height of the repeated element.  Can be a number (in pixels), or a percentage.
   *
   */
  var COLLECTION_REPEAT_SCROLLVIEW_XY_ERROR = "Cannot create a collection-repeat within a scrollView that is scrollable on both x and y axis.  Choose either x direction or y direction.";
  var COLLECTION_REPEAT_ATTR_HEIGHT_ERROR = "collection-repeat expected attribute collection-item-height to be a an expression that returns a number (in pixels) or percentage.";
  var COLLECTION_REPEAT_ATTR_WIDTH_ERROR = "collection-repeat expected attribute collection-item-width to be a an expression that returns a number (in pixels) or percentage.";
  var COLLECTION_REPEAT_ATTR_REPEAT_ERROR = "collection-repeat expected expression in form of '_item_ in _collection_[ track by _id_]' but got '%'";

  IonicModule
    .directive({
      ngSrc: collectionRepeatSrcDirective('ngSrc', 'src'),
      ngSrcset: collectionRepeatSrcDirective('ngSrcset', 'srcset'),
      ngHref: collectionRepeatSrcDirective('ngHref', 'href')
    })
    .directive('collectionRepeat', [
      '$collectionRepeatManager',
      '$collectionDataSource',
      '$parse',
      function($collectionRepeatManager, $collectionDataSource, $parse) {
        return {
          priority: 1000,
          transclude: 'element',
          terminal: true,
          $$tlb: true,
          require: '^$ionicScroll',
          controller: [function(){}],
          link: function($scope, $element, $attr, scrollCtrl, $transclude) {
            var wrap = jqLite('<div style="position:relative;">');
            $element.parent()[0].insertBefore(wrap[0], $element[0]);
            wrap.append($element);

            var scrollView = scrollCtrl.scrollView;
            if (scrollView.options.scrollingX && scrollView.options.scrollingY) {
              throw new Error(COLLECTION_REPEAT_SCROLLVIEW_XY_ERROR);
            }

            var isVertical = !!scrollView.options.scrollingY;
            if (isVertical && !$attr.collectionItemHeight) {
              throw new Error(COLLECTION_REPEAT_ATTR_HEIGHT_ERROR);
            } else if (!isVertical && !$attr.collectionItemWidth) {
              throw new Error(COLLECTION_REPEAT_ATTR_WIDTH_ERROR);
            }

            var heightParsed = $parse($attr.collectionItemHeight || '"100%"');
            var widthParsed = $parse($attr.collectionItemWidth || '"100%"');

            var heightGetter = function(scope, locals) {
              var result = heightParsed(scope, locals);
              if (isString(result) && result.indexOf('%') > -1) {
                return Math.floor(parseInt(result, 10) / 100 * scrollView.__clientHeight);
              }
              return result;
            };
            var widthGetter = function(scope, locals) {
              var result = widthParsed(scope, locals);
              if (isString(result) && result.indexOf('%') > -1) {
                return Math.floor(parseInt(result, 10) / 100 * scrollView.__clientWidth);
              }
              return result;
            };

            var match = $attr.collectionRepeat.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
            if (!match) {
              throw new Error(COLLECTION_REPEAT_ATTR_REPEAT_ERROR
                .replace('%', $attr.collectionRepeat));
            }
            var keyExpr = match[1];
            var listExpr = match[2];
            var trackByExpr = match[3];

            var dataSource = new $collectionDataSource({
              scope: $scope,
              transcludeFn: $transclude,
              transcludeParent: $element.parent(),
              keyExpr: keyExpr,
              listExpr: listExpr,
              trackByExpr: trackByExpr,
              heightGetter: heightGetter,
              widthGetter: widthGetter
            });
            var collectionRepeatManager = new $collectionRepeatManager({
              dataSource: dataSource,
              element: scrollCtrl.$element,
              scrollView: scrollCtrl.scrollView,
            });

            $scope.$watchCollection(listExpr, function(value) {
              if (value && !angular.isArray(value)) {
                throw new Error("collection-repeat expects an array to repeat over, but instead got '" + typeof value + "'.");
              }
              rerender(value);
            });

            var scrollViewContent = scrollCtrl.scrollView.__content;
            function rerender(value) {
              var beforeSiblings = [];
              var afterSiblings = [];
              var before = true;
              forEach(scrollViewContent.children, function(node, i) {
                if ( ionic.DomUtil.elementIsDescendant($element[0], node, scrollViewContent) ) {
                  before = false;
                } else {
                  var width = node.offsetWidth;
                  var height = node.offsetHeight;
                  if (width && height) {
                    var element = jqLite(node);
                    (before ? beforeSiblings : afterSiblings).push({
                      width: node.offsetWidth,
                      height: node.offsetHeight,
                      element: element,
                      scope: element.isolateScope() || element.scope(),
                      isOutside: true
                    });
                  }
                }
              });

              scrollView.resize();
              dataSource.setData(value, beforeSiblings, afterSiblings);
              collectionRepeatManager.resize();
            }
            function onWindowResize() {
              rerender($scope.$eval(listExpr));
            }

            ionic.on('resize', onWindowResize, window);

            $scope.$on('$destroy', function() {
              collectionRepeatManager.destroy();
              dataSource.destroy();
              ionic.off('resize', onWindowResize, window);
            });
          }
        };
      }]);

// Fix for #1674
// Problem: if an ngSrc or ngHref expression evaluates to a falsy value, it will
// not erase the previous truthy value of the href.
// In collectionRepeat, we re-use elements from before. So if the ngHref expression
// evaluates to truthy for item 1 and then falsy for item 2, if an element changes
// from representing item 1 to representing item 2, item 2 will still have
// item 1's href value.
// Solution:  erase the href or src attribute if ngHref/ngSrc are falsy.
  function collectionRepeatSrcDirective(ngAttrName, attrName) {
    return [function() {
      return {
        priority: '99', // it needs to run after the attributes are interpolated
        link: function(scope, element, attr, collectionRepeatCtrl) {
          if (!collectionRepeatCtrl) return;
          attr.$observe(ngAttrName, function(value) {
            element[0][attr] = '';
            setTimeout(function() {
              element[0][attr] = value;
            });
          });
        }
      };
    }];
  }

  /**
   * @ngdoc directive
   * @name ionContent
   * @module ionic
   * @delegate ionic.service:$ionicScrollDelegate
   * @restrict E
   *
   * @description
   * The ionContent directive provides an easy to use content area that can be configured
   * to use Ionic's custom Scroll View, or the built in overflow scrolling of the browser.
   *
   * While we recommend using the custom Scroll features in Ionic in most cases, sometimes
   * (for performance reasons) only the browser's native overflow scrolling will suffice,
   * and so we've made it easy to toggle between the Ionic scroll implementation and
   * overflow scrolling.
   *
   * You can implement pull-to-refresh with the {@link ionic.directive:ionRefresher}
   * directive, and infinite scrolling with the {@link ionic.directive:ionInfiniteScroll}
   * directive.
   *
   * Be aware that this directive gets its own child scope. If you do not understand why this
   * is important, you can read [https://docs.angularjs.org/guide/scope](https://docs.angularjs.org/guide/scope).
   *
   * @param {string=} delegate-handle The handle used to identify this scrollView
   * with {@link ionic.service:$ionicScrollDelegate}.
   * @param {string=} direction Which way to scroll. 'x' or 'y' or 'xy'. Default 'y'.
   * @param {boolean=} padding Whether to add padding to the content.
   * of the content.  Defaults to true on iOS, false on Android.
   * @param {boolean=} scroll Whether to allow scrolling of content.  Defaults to true.
   * @param {boolean=} overflow-scroll Whether to use overflow-scrolling instead of
   * Ionic scroll.
   * @param {boolean=} scrollbar-x Whether to show the horizontal scrollbar. Default true.
   * @param {boolean=} scrollbar-y Whether to show the vertical scrollbar. Default true.
   * @param {string=} start-y Initial vertical scroll position. Default 0.
   * of the content.  Defaults to true on iOS, false on Android.
   * @param {expression=} on-scroll Expression to evaluate when the content is scrolled.
   * @param {expression=} on-scroll-complete Expression to evaluate when a scroll action completes.
   * @param {boolean=} has-bouncing Whether to allow scrolling to bounce past the edges
   * of the content.  Defaults to true on iOS, false on Android.
   */
  IonicModule
    .directive('ionContent', [
      '$timeout',
      '$controller',
      '$ionicBind',
      function($timeout, $controller, $ionicBind) {
        return {
          restrict: 'E',
          require: '^?ionNavView',
          scope: true,
          priority: 800,
          compile: function(element, attr) {
            var innerElement;

            element.addClass('scroll-content ionic-scroll');

            if (attr.scroll != 'false') {
              //We cannot use normal transclude here because it breaks element.data()
              //inheritance on compile
              innerElement = jqLite('<div class="scroll"></div>');
              innerElement.append(element.contents());
              element.append(innerElement);
            } else {
              element.addClass('scroll-content-false');
            }

            return { pre: prelink };
            function prelink($scope, $element, $attr, navViewCtrl) {
              var parentScope = $scope.$parent;
              $scope.$watch(function() {
                return (parentScope.$hasHeader ? ' has-header' : '')  +
                  (parentScope.$hasSubheader ? ' has-subheader' : '') +
                  (parentScope.$hasFooter ? ' has-footer' : '') +
                  (parentScope.$hasSubfooter ? ' has-subfooter' : '') +
                  (parentScope.$hasTabs ? ' has-tabs' : '') +
                  (parentScope.$hasTabsTop ? ' has-tabs-top' : '');
              }, function(className, oldClassName) {
                $element.removeClass(oldClassName);
                $element.addClass(className);
              });

              //Only this ionContent should use these variables from parent scopes
              $scope.$hasHeader = $scope.$hasSubheader =
                $scope.$hasFooter = $scope.$hasSubfooter =
                  $scope.$hasTabs = $scope.$hasTabsTop =
                    false;
              $ionicBind($scope, $attr, {
                $onScroll: '&onScroll',
                $onScrollComplete: '&onScrollComplete',
                hasBouncing: '@',
                padding: '@',
                direction: '@',
                scrollbarX: '@',
                scrollbarY: '@',
                startX: '@',
                startY: '@',
                scrollEventInterval: '@'
              });
              $scope.direction = $scope.direction || 'y';

              if (angular.isDefined($attr.padding)) {
                $scope.$watch($attr.padding, function(newVal) {
                  (innerElement || $element).toggleClass('padding', !!newVal);
                });
              }

              if ($attr.scroll === "false") {
                //do nothing
              } else if(attr.overflowScroll === "true") {
                $element.addClass('overflow-scroll');
              } else {
                $controller('$ionicScroll', {
                  $scope: $scope,
                  scrollViewOptions: {
                    el: $element[0],
                    delegateHandle: attr.delegateHandle,
                    bouncing: $scope.$eval($scope.hasBouncing),
                    startX: $scope.$eval($scope.startX) || 0,
                    startY: $scope.$eval($scope.startY) || 0,
                    scrollbarX: $scope.$eval($scope.scrollbarX) !== false,
                    scrollbarY: $scope.$eval($scope.scrollbarY) !== false,
                    scrollingX: $scope.direction.indexOf('x') >= 0,
                    scrollingY: $scope.direction.indexOf('y') >= 0,
                    scrollEventInterval: parseInt($scope.scrollEventInterval, 10) || 10,
                    scrollingComplete: function() {
                      $scope.$onScrollComplete({
                        scrollTop: this.__scrollTop,
                        scrollLeft: this.__scrollLeft
                      });
                    }
                  }
                });
              }

            }
          }
        };
      }]);

  var GESTURE_DIRECTIVES = 'onHold onTap onTouch onRelease onDrag onDragUp onDragRight onDragDown onDragLeft onSwipe onSwipeUp onSwipeRight onSwipeDown onSwipeLeft'.split(' ');

  GESTURE_DIRECTIVES.forEach(function(name) {
    IonicModule.directive(name, gestureDirective(name));
  });


  /**
   * @ngdoc directive
   * @name onHold
   * @module ionic
   * @restrict A
   *
   * @description
   * Touch stays at the same location for 500ms.
   *
   * @usage
   * ```html
   * <button on-hold="onHold()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onTap
   * @module ionic
   * @restrict A
   *
   * @description
   * Quick touch at a location. If the duration of the touch goes
   * longer than 250ms it is no longer a tap gesture.
   *
   * @usage
   * ```html
   * <button on-tap="onTap()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onTouch
   * @module ionic
   * @restrict A
   *
   * @description
   * Called immediately when the user first begins a touch. This
   * gesture does not wait for a touchend/mouseup.
   *
   * @usage
   * ```html
   * <button on-touch="onTouch()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onRelease
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when the user ends a touch.
   *
   * @usage
   * ```html
   * <button on-release="onRelease()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onDrag
   * @module ionic
   * @restrict A
   *
   * @description
   * Move with one touch around on the page. Blocking the scrolling when
   * moving left and right is a good practice. When all the drag events are
   * blocking you disable scrolling on that area.
   *
   * @usage
   * ```html
   * <button on-drag="onDrag()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onDragUp
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when the element is dragged up.
   *
   * @usage
   * ```html
   * <button on-drag-up="onDragUp()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onDragRight
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when the element is dragged to the right.
   *
   * @usage
   * ```html
   * <button on-drag-right="onDragRight()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onDragDown
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when the element is dragged down.
   *
   * @usage
   * ```html
   * <button on-drag-down="onDragDown()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onDragLeft
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when the element is dragged to the left.
   *
   * @usage
   * ```html
   * <button on-drag-left="onDragLeft()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onSwipe
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when a moving touch has a high velocity in any direction.
   *
   * @usage
   * ```html
   * <button on-swipe="onSwipe()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onSwipeUp
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when a moving touch has a high velocity moving up.
   *
   * @usage
   * ```html
   * <button on-swipe-up="onSwipeUp()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onSwipeRight
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when a moving touch has a high velocity moving to the right.
   *
   * @usage
   * ```html
   * <button on-swipe-right="onSwipeRight()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onSwipeDown
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when a moving touch has a high velocity moving down.
   *
   * @usage
   * ```html
   * <button on-swipe-down="onSwipeDown()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onSwipeLeft
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when a moving touch has a high velocity moving to the left.
   *
   * @usage
   * ```html
   * <button on-swipe-left="onSwipeLeft()" class="button">Test</button>
   * ```
   */


  function gestureDirective(directiveName) {
    return ['$ionicGesture', '$parse', function($ionicGesture, $parse) {
      var eventType = directiveName.substr(2).toLowerCase();

      return function(scope, element, attr) {
        var fn = $parse( attr[directiveName] );

        var listener = function(ev) {
          scope.$apply(function() {
            fn(scope, {
              $event: ev
            });
          });
        };

        var gesture = $ionicGesture.on(eventType, listener, element);

        scope.$on('$destroy', function() {
          $ionicGesture.off(gesture, eventType, listener);
        });
      };
    }];
  }


  IonicModule
    .directive('ionNavBar', tapScrollToTopDirective())
    .directive('ionHeaderBar', tapScrollToTopDirective())

  /**
   * @ngdoc directive
   * @name ionHeaderBar
   * @module ionic
   * @restrict E
   *
   * @description
   * Adds a fixed header bar above some content.
   *
   * Can also be a subheader (lower down) if the 'bar-subheader' class is applied.
   * See [the header CSS docs](/docs/components/#subheader).
   *
   * Note: If you use ionHeaderBar in combination with ng-if, the surrounding content
   * will not align correctly.  This will be fixed soon.
   *
   * @param {string=} align-title Where to align the title.
   * Available: 'left', 'right', or 'center'.  Defaults to 'center'.
   * @param {boolean=} no-tap-scroll By default, the header bar will scroll the
   * content to the top when tapped.  Set no-tap-scroll to true to disable this
   * behavior.
   * Available: true or false.  Defaults to false.
   *
   * @usage
   * ```html
   * <ion-header-bar align-title="left" class="bar-positive">
   *   <div class="buttons">
   *     <button class="button" ng-click="doSomething()">Left Button</button>
   *   </div>
   *   <h1 class="title">Title!</h1>
   *   <div class="buttons">
   *     <button class="button">Right Button</button>
   *   </div>
   * </ion-header-bar>
   * <ion-content>
   *   Some content!
   * </ion-content>
   * ```
   */
    .directive('ionHeaderBar', headerFooterBarDirective(true))

  /**
   * @ngdoc directive
   * @name ionFooterBar
   * @module ionic
   * @restrict E
   *
   * @description
   * Adds a fixed footer bar below some content.
   *
   * Can also be a subfooter (higher up) if the 'bar-subfooter' class is applied.
   * See [the footer CSS docs](/docs/components/#footer).
   *
   * Note: If you use ionFooterBar in combination with ng-if, the surrounding content
   * will not align correctly.  This will be fixed soon.
   *
   * @param {string=} align-title Where to align the title.
   * Available: 'left', 'right', or 'center'.  Defaults to 'center'.
   *
   * @usage
   * ```html
   * <ion-content>
   *   Some content!
   * </ion-content>
   * <ion-footer-bar align-title="left" class="bar-assertive">
   *   <div class="buttons">
   *     <button class="button">Left Button</button>
   *   </div>
   *   <h1 class="title">Title!</h1>
   *   <div class="buttons" ng-click="doSomething()">
   *     <button class="button">Right Button</button>
   *   </div>
   * </ion-footer-bar>
   * ```
   */
    .directive('ionFooterBar', headerFooterBarDirective(false));

  function tapScrollToTopDirective() {
    return ['$ionicScrollDelegate', function($ionicScrollDelegate) {
      return {
        restrict: 'E',
        link: function($scope, $element, $attr) {
          if ($attr.noTapScroll == 'true') {
            return;
          }
          ionic.on('tap', onTap, $element[0]);
          $scope.$on('$destroy', function() {
            ionic.off('tap', onTap, $element[0]);
          });

          function onTap(e) {
            var depth = 3;
            var current = e.target;
            //Don't scroll to top in certain cases
            while (depth-- && current) {
              if (current.classList.contains('button') ||
                current.tagName.match(/input|textarea|select/i) ||
                current.isContentEditable) {
                return;
              }
              current = current.parentNode;
            }
            var touch = e.gesture && e.gesture.touches[0] || e.detail.touches[0];
            var bounds = $element[0].getBoundingClientRect();
            if (ionic.DomUtil.rectContains(
              touch.pageX, touch.pageY,
              bounds.left, bounds.top - 20,
                bounds.left + bounds.width, bounds.top + bounds.height
            )) {
              $ionicScrollDelegate.scrollTop(true);
            }
          }
        }
      };
    }];
  }

  function headerFooterBarDirective(isHeader) {
    return [function() {
      return {
        restrict: 'E',
        compile: function($element, $attr) {
          $element.addClass(isHeader ? 'bar bar-header' : 'bar bar-footer');
          var parent = $element[0].parentNode;
          if(parent.querySelector('.tabs-top'))$element.addClass('has-tabs-top');
          return { pre: prelink };
          function prelink($scope, $element, $attr) {
            var hb = new ionic.views.HeaderBar({
              el: $element[0],
              alignTitle: $attr.alignTitle || 'center'
            });

            var el = $element[0];

            if (isHeader) {
              $scope.$watch(function() { return el.className; }, function(value) {
                var isShown = value.indexOf('ng-hide') === -1;
                var isSubheader = value.indexOf('bar-subheader') !== -1;
                $scope.$hasHeader = isShown && !isSubheader;
                $scope.$hasSubheader = isShown && isSubheader;
              });
              $scope.$on('$destroy', function() {
                delete $scope.$hasHeader;
                delete $scope.$hasSubheader;
              });
            } else {
              $scope.$watch(function() { return el.className; }, function(value) {
                var isShown = value.indexOf('ng-hide') === -1;
                var isSubfooter = value.indexOf('bar-subfooter') !== -1;
                $scope.$hasFooter = isShown && !isSubfooter;
                $scope.$hasSubfooter = isShown && isSubfooter;
              });
              $scope.$on('$destroy', function() {
                delete $scope.$hasFooter;
                delete $scope.$hasSubfooter;
              });
              $scope.$watch('$hasTabs', function(val) {
                $element.toggleClass('has-tabs', !!val);
              });
            }
          }
        }
      };
    }];
  }

  /**
   * @ngdoc directive
   * @name ionInfiniteScroll
   * @module ionic
   * @parent ionic.directive:ionContent, ionic.directive:ionScroll
   * @restrict E
   *
   * @description
   * The ionInfiniteScroll directive allows you to call a function whenever
   * the user gets to the bottom of the page or near the bottom of the page.
   *
   * The expression you pass in for `on-infinite` is called when the user scrolls
   * greater than `distance` away from the bottom of the content.  Once `on-infinite`
   * is done loading new data, it should broadcast the `scroll.infiniteScrollComplete`
   * event from your controller (see below example).
   *
   * @param {expression} on-infinite What to call when the scroller reaches the
   * bottom.
   * @param {string=} distance The distance from the bottom that the scroll must
   * reach to trigger the on-infinite expression. Default: 1%.
   * @param {string=} icon The icon to show while loading. Default: 'ion-loading-d'.
   *
   * @usage
   * ```html
   * <ion-content ng-controller="MyController">
   *   <ion-infinite-scroll
   *     on-infinite="loadMore()"
   *     distance="1%">
   *   </ion-infinite-scroll>
   * </ion-content>
   * ```
   * ```js
   * function MyController($scope, $http) {
 *   $scope.items = [];
 *   $scope.loadMore = function() {
 *     $http.get('/more-items').success(function(items) {
 *       useItems(items);
 *       $scope.$broadcast('scroll.infiniteScrollComplete');
 *     });
 *   };
 *
 *   $scope.$on('stateChangeSuccess', function() {
 *     $scope.loadMore();
 *   });
 * }
   * ```
   *
   * An easy to way to stop infinite scroll once there is no more data to load
   * is to use angular's `ng-if` directive:
   *
   * ```html
   * <ion-infinite-scroll
   *   ng-if="moreDataCanBeLoaded()"
   *   icon="ion-loading-c"
   *   on-infinite="loadMoreData()">
   * </ion-infinite-scroll>
   * ```
   */
  IonicModule
    .directive('ionInfiniteScroll', ['$timeout', function($timeout) {
      function calculateMaxValue(distance, maximum, isPercent) {
        return isPercent ?
          maximum * (1 - parseFloat(distance,10) / 100) :
          maximum - parseFloat(distance, 10);
      }
      return {
        restrict: 'E',
        require: ['^$ionicScroll', 'ionInfiniteScroll'],
        template: '<i class="icon {{icon()}} icon-refreshing"></i>',
        scope: true,
        controller: ['$scope', '$attrs', function($scope, $attrs) {
          this.isLoading = false;
          this.scrollView = null; //given by link function
          this.getMaxScroll = function() {
            var distance = ($attrs.distance || '2.5%').trim();
            var isPercent = distance.indexOf('%') !== -1;
            var maxValues = this.scrollView.getScrollMax();
            return {
              left: this.scrollView.options.scrollingX ?
                calculateMaxValue(distance, maxValues.left, isPercent) :
                -1,
              top: this.scrollView.options.scrollingY ?
                calculateMaxValue(distance, maxValues.top, isPercent) :
                -1
            };
          };
        }],
        link: function($scope, $element, $attrs, ctrls) {
          var scrollCtrl = ctrls[0];
          var infiniteScrollCtrl = ctrls[1];
          var scrollView = infiniteScrollCtrl.scrollView = scrollCtrl.scrollView;

          $scope.icon = function() {
            return angular.isDefined($attrs.icon) ? $attrs.icon : 'ion-loading-d';
          };

          var onInfinite = function() {
            $element[0].classList.add('active');
            infiniteScrollCtrl.isLoading = true;
            $scope.$parent && $scope.$parent.$apply($attrs.onInfinite || '');
          };

          var finishInfiniteScroll = function() {
            $element[0].classList.remove('active');
            $timeout(function() {
              scrollView.resize();
              checkBounds();
            }, 0, false);
            infiniteScrollCtrl.isLoading = false;
          };

          $scope.$on('scroll.infiniteScrollComplete', function() {
            finishInfiniteScroll();
          });

          $scope.$on('$destroy', function() {
            scrollCtrl.$element.off('scroll', checkBounds);
          });

          var checkBounds = ionic.animationFrameThrottle(checkInfiniteBounds);

          //Check bounds on start, after scrollView is fully rendered
          setTimeout(checkBounds);
          scrollCtrl.$element.on('scroll', checkBounds);

          function checkInfiniteBounds() {
            if (infiniteScrollCtrl.isLoading) return;

            var scrollValues = scrollView.getValues();
            var maxScroll = infiniteScrollCtrl.getMaxScroll();

            if ((maxScroll.left !== -1 && scrollValues.left >= maxScroll.left) ||
              (maxScroll.top !== -1 && scrollValues.top >= maxScroll.top)) {
              onInfinite();
            }
          }
        }
      };
    }]);

  var ITEM_TPL_CONTENT_ANCHOR =
    '<a class="item-content" ng-href="{{$href()}}" target="{{$target()}}"></a>';
  var ITEM_TPL_CONTENT =
    '<div class="item-content"></div>';
  /**
   * @ngdoc directive
   * @name ionItem
   * @parent ionic.directive:ionList
   * @module ionic
   * @restrict E
   * Creates a list-item that can easily be swiped,
   * deleted, reordered, edited, and more.
   *
   * See {@link ionic.directive:ionList} for a complete example & explanation.
   *
   * Can be assigned any item class name. See the
   * [list CSS documentation](/docs/components/#list).
   *
   * @usage
   *
   * ```html
   * <ion-list>
   *   <ion-item>Hello!</ion-item>
   * </ion-list>
   * ```
   */
  IonicModule
    .directive('ionItem', [
      '$animate',
      '$compile',
      function($animate, $compile) {
        return {
          restrict: 'E',
          controller: ['$scope', '$element', function($scope, $element) {
            this.$scope = $scope;
            this.$element = $element;
          }],
          scope: true,
          compile: function($element, $attrs) {
            var isAnchor = angular.isDefined($attrs.href) ||
              angular.isDefined($attrs.ngHref) ||
              angular.isDefined($attrs.uiSref);
            var isComplexItem = isAnchor ||
              //Lame way of testing, but we have to know at compile what to do with the element
              /ion-(delete|option|reorder)-button/i.test($element.html());

            if (isComplexItem) {
              var innerElement = jqLite(isAnchor ? ITEM_TPL_CONTENT_ANCHOR : ITEM_TPL_CONTENT);
              innerElement.append($element.contents());

              $element.append(innerElement);
              $element.addClass('item item-complex');
            } else {
              $element.addClass('item');
            }

            return function link($scope, $element, $attrs) {
              $scope.$href = function() {
                return $attrs.href || $attrs.ngHref;
              };
              $scope.$target = function() {
                return $attrs.target || '_self';
              };
            };
          }
        };
      }]);


  var ITEM_TPL_DELETE_BUTTON =
    '<div class="item-left-edit item-delete enable-pointer-events">' +
    '</div>';
  /**
   * @ngdoc directive
   * @name ionDeleteButton
   * @parent ionic.directive:ionItem
   * @module ionic
   * @restrict E
   * Creates a delete button inside a list item, that is visible when the
   * {@link ionic.directive:ionList ionList parent's} `show-delete` evaluates to true or
   * `$ionicListDelegate.showDelete(true)` is called.
   *
   * Takes any ionicon as a class.
   *
   * See {@link ionic.directive:ionList} for a complete example & explanation.
   *
   * @usage
   *
   * ```html
   * <ion-list show-delete="shouldShowDelete">
   *   <ion-item>
   *     <ion-delete-button class="ion-minus-circled"></ion-delete-button>
   *     Hello, list item!
   *   </ion-item>
   * </ion-list>
   * <ion-toggle ng-model="shouldShowDelete">
   *   Show Delete?
   * </ion-toggle>
   * ```
   */
  IonicModule
    .directive('ionDeleteButton', ['$animate', function($animate) {
      return {
        restrict: 'E',
        require: ['^ionItem', '^?ionList'],
        //Run before anything else, so we can move it before other directives process
        //its location (eg ngIf relies on the location of the directive in the dom)
        priority: Number.MAX_VALUE,
        compile: function($element, $attr) {
          //Add the classes we need during the compile phase, so that they stay
          //even if something else like ngIf removes the element and re-addss it
          $attr.$set('class', ($attr['class'] || '') + ' button icon button-icon', true);
          return function($scope, $element, $attr, ctrls) {
            var itemCtrl = ctrls[0];
            var listCtrl = ctrls[1];
            var container = jqLite(ITEM_TPL_DELETE_BUTTON);
            container.append($element);
            itemCtrl.$element.append(container).addClass('item-left-editable');

            if (listCtrl && listCtrl.showDelete()) {
              container.addClass('visible active');
            }
          };
        }
      };
    }]);


  IonicModule
    .directive('itemFloatingLabel', function() {
      return {
        restrict: 'C',
        link: function(scope, element) {
          var el = element[0];
          var input = el.querySelector('input, textarea');
          var inputLabel = el.querySelector('.input-label');

          if ( !input || !inputLabel ) return;

          var onInput = function() {
            if ( input.value ) {
              inputLabel.classList.add('has-input');
            } else {
              inputLabel.classList.remove('has-input');
            }
          };

          input.addEventListener('input', onInput);

          var ngModelCtrl = angular.element(input).controller('ngModel');
          if ( ngModelCtrl ) {
            ngModelCtrl.$render = function() {
              input.value = ngModelCtrl.$viewValue || '';
              onInput();
            };
          }

          scope.$on('$destroy', function() {
            input.removeEventListener('input', onInput);
          });
        }
      };
    });

  var ITEM_TPL_OPTION_BUTTONS =
    '<div class="item-options invisible">' +
    '</div>';
  /**
   * @ngdoc directive
   * @name ionOptionButton
   * @parent ionic.directive:ionItem
   * @module ionic
   * @restrict E
   * Creates an option button inside a list item, that is visible when the item is swiped
   * to the left by the user.  Swiped open option buttons can be hidden with
   * {@link ionic.service:$ionicListDelegate#closeOptionButtons $ionicListDelegate#closeOptionButtons}.
   *
   * Can be assigned any button class.
   *
   * See {@link ionic.directive:ionList} for a complete example & explanation.
   *
   * @usage
   *
   * ```html
   * <ion-list>
   *   <ion-item>
   *     I love kittens!
   *     <ion-option-button class="button-positive">Share</ion-option-button>
   *     <ion-option-button class="button-assertive">Edit</ion-option-button>
   *   </ion-item>
   * </ion-list>
   * ```
   */
  IonicModule
    .directive('ionOptionButton', ['$compile', function($compile) {
      function stopPropagation(e) {
        e.stopPropagation();
      }
      return {
        restrict: 'E',
        require: '^ionItem',
        priority: Number.MAX_VALUE,
        compile: function($element, $attr) {
          $attr.$set('class', ($attr['class'] || '') + ' button', true);
          return function($scope, $element, $attr, itemCtrl) {
            if (!itemCtrl.optionsContainer) {
              itemCtrl.optionsContainer = jqLite(ITEM_TPL_OPTION_BUTTONS);
              itemCtrl.$element.append(itemCtrl.optionsContainer);
            }
            itemCtrl.optionsContainer.append($element);

            //Don't bubble click up to main .item
            $element.on('click', stopPropagation);
          };
        }
      };
    }]);

  var ITEM_TPL_REORDER_BUTTON =
    '<div data-prevent-scroll="true" class="item-right-edit item-reorder enable-pointer-events">' +
    '</div>';

  /**
   * @ngdoc directive
   * @name ionReorderButton
   * @parent ionic.directive:ionItem
   * @module ionic
   * @restrict E
   * Creates a reorder button inside a list item, that is visible when the
   * {@link ionic.directive:ionList ionList parent's} `show-reorder` evaluates to true or
   * `$ionicListDelegate.showReorder(true)` is called.
   *
   * Can be dragged to reorder items in the list. Takes any ionicon class.
   *
   * Note: Reordering works best when used with `ng-repeat`.  Be sure that all `ion-item` children of an `ion-list` are part of the same `ng-repeat` expression.
   *
   * When an item reorder is complete, the expression given in the `on-reorder` attribute is called. The `on-reorder` expression is given two locals that can be used: `$fromIndex` and `$toIndex`.  See below for an example.
   *
   * Look at {@link ionic.directive:ionList} for more examples.
   *
   * @usage
   *
   * ```html
   * <ion-list ng-controller="MyCtrl">
   *   <ion-item ng-repeat="item in items">
   *     Item {{item}}
   *     <ion-reorder-button class="ion-navicon"
   *                         on-reorder="moveItem(item, $fromIndex, $toIndex)">
   *     </ion-reorder>
   *   </ion-item>
   * </ion-list>
   * ```
   * ```js
   * function MyCtrl($scope) {
*   $scope.items = [1, 2, 3, 4];
*   $scope.moveItem = function(item, fromIndex, toIndex) {
*     //Move the item in the array
*     $scope.items.splice(fromIndex, 1);
*     $scope.items.splice(toIndex, 0, item);
*   };
* }
   * ```
   *
   * @param {expression=} on-reorder Expression to call when an item is reordered.
   * Parameters given: $fromIndex, $toIndex.
   */
  IonicModule
    .directive('ionReorderButton', ['$animate', '$parse', function($animate, $parse) {
      return {
        restrict: 'E',
        require: ['^ionItem', '^?ionList'],
        priority: Number.MAX_VALUE,
        compile: function($element, $attr) {
          $attr.$set('class', ($attr['class'] || '') + ' button icon button-icon', true);
          $element[0].setAttribute('data-prevent-scroll', true);
          return function($scope, $element, $attr, ctrls) {
            var itemCtrl = ctrls[0];
            var listCtrl = ctrls[1];
            var onReorderFn = $parse($attr.onReorder);

            $scope.$onReorder = function(oldIndex, newIndex) {
              onReorderFn($scope, {
                $fromIndex: oldIndex,
                $toIndex: newIndex
              });
            };

            var container = jqLite(ITEM_TPL_REORDER_BUTTON);
            container.append($element);
            itemCtrl.$element.append(container).addClass('item-right-editable');

            if (listCtrl && listCtrl.showReorder()) {
              container.addClass('visible active');
            }
          };
        }
      };
    }]);

  /**
   * @ngdoc directive
   * @name keyboardAttach
   * @module ionic
   * @restrict A
   *
   * @description
   * keyboard-attach is an attribute directive which will cause an element to float above
   * the keyboard when the keyboard shows. Currently only supports the
   * [ion-footer-bar]({{ page.versionHref }}/api/directive/ionFooterBar/) directive.
   *
   * ### Notes
   * - This directive requires the
   * [Ionic Keyboard Plugin](https://github.com/driftyco/ionic-plugins-keyboard).
   * - On Android not in fullscreen mode, i.e. you have
   *   `<preference name="Fullscreen" value="false" />` or no preference in your `config.xml` file,
   *   this directive is unnecessary since it is the default behavior.
   * - On iOS, if there is an input in your footer, you will need to set
   *   `cordova.plugins.Keyboard.disableScroll(true)`.
   *
   * @usage
   *
   * ```html
   *  <ion-footer-bar align-title="left" keyboard-attach class="bar-assertive">
   *    <h1 class="title">Title!</h1>
   *  </ion-footer-bar>
   * ```
   */

  IonicModule
    .directive('keyboardAttach', function() {
      return function(scope, element, attrs) {
        ionic.on('native.keyboardshow', onShow, window);
        ionic.on('native.keyboardhide', onHide, window);

        //deprecated
        ionic.on('native.showkeyboard', onShow, window);
        ionic.on('native.hidekeyboard', onHide, window);


        var scrollCtrl;

        function onShow(e) {
          if (ionic.Platform.isAndroid() && !ionic.Platform.isFullScreen) {
            return;
          }

          //for testing
          var keyboardHeight = e.keyboardHeight || e.detail.keyboardHeight;
          element.css('bottom', keyboardHeight + "px");
          scrollCtrl = element.controller('$ionicScroll');
          if ( scrollCtrl ) {
            scrollCtrl.scrollView.__container.style.bottom = keyboardHeight + keyboardAttachGetClientHeight(element[0]) + "px";
          }
        }

        function onHide() {
          if (ionic.Platform.isAndroid() && !ionic.Platform.isFullScreen) {
            return;
          }

          element.css('bottom', '');
          if ( scrollCtrl ) {
            scrollCtrl.scrollView.__container.style.bottom = '';
          }
        }

        scope.$on('$destroy', function() {
          ionic.off('native.keyboardshow', onShow, window);
          ionic.off('native.keyboardhide', onHide, window);

          //deprecated
          ionic.off('native.showkeyboard', onShow, window);
          ionic.off('native.hidekeyboard', onHide, window);
        });
      };
    });

  function keyboardAttachGetClientHeight(element) {
    return element.clientHeight;
  }

  /**
   * @ngdoc directive
   * @name ionList
   * @module ionic
   * @delegate ionic.service:$ionicListDelegate
   * @codepen JsHjf
   * @restrict E
   * @description
   * The List is a widely used interface element in almost any mobile app, and can include
   * content ranging from basic text all the way to buttons, toggles, icons, and thumbnails.
   *
   * Both the list, which contains items, and the list items themselves can be any HTML
   * element. The containing element requires the `list` class and each list item requires
   * the `item` class.
   *
   * However, using the ionList and ionItem directives make it easy to support various
   * interaction modes such as swipe to edit, drag to reorder, and removing items.
   *
   * Related: {@link ionic.directive:ionItem}, {@link ionic.directive:ionOptionButton}
   * {@link ionic.directive:ionReorderButton}, {@link ionic.directive:ionDeleteButton}, [`list CSS documentation`](/docs/components/#list).
   *
   * @usage
   *
   * Basic Usage:
   *
   * ```html
   * <ion-list>
   *   <ion-item ng-repeat="item in items">
   *     {% raw %}Hello, {{item}}!{% endraw %}
   *   </ion-item>
   * </ion-list>
   * ```
   *
   * Advanced Usage: Thumbnails, Delete buttons, Reordering, Swiping
   *
   * ```html
   * <ion-list ng-controller="MyCtrl"
   *           show-delete="shouldShowDelete"
   *           show-reorder="shouldShowReorder"
   *           can-swipe="listCanSwipe">
   *   <ion-item ng-repeat="item in items"
   *             class="item-thumbnail-left">
   *
   *     {% raw %}<img ng-src="{{item.img}}">
   *     <h2>{{item.title}}</h2>
   *     <p>{{item.description}}</p>{% endraw %}
   *     <ion-option-button class="button-positive"
   *                        ng-click="share(item)">
   *       Share
   *     </ion-option-button>
   *     <ion-option-button class="button-info"
   *                        ng-click="edit(item)">
   *       Edit
   *     </ion-option-button>
   *     <ion-delete-button class="ion-minus-circled"
   *                        ng-click="items.splice($index, 1)">
   *     </ion-delete-button>
   *     <ion-reorder-button class="ion-navicon"
   *                         on-reorder="reorderItem(item, $fromIndex, $toIndex)">
   *     </ion-reorder-button>
   *
   *   </ion-item>
   * </ion-list>
   * ```
   *
   * @param {string=} delegate-handle The handle used to identify this list with
   * {@link ionic.service:$ionicListDelegate}.
   * @param type {string=} The type of list to use (for example, list-inset for an inset list)
   * @param show-delete {boolean=} Whether the delete buttons for the items in the list are
   * currently shown or hidden.
   * @param show-reorder {boolean=} Whether the reorder buttons for the items in the list are
   * currently shown or hidden.
   * @param can-swipe {boolean=} Whether the items in the list are allowed to be swiped to reveal
   * option buttons. Default: true.
   */
  IonicModule
    .directive('ionList', [
      '$animate',
      '$timeout',
      function($animate, $timeout) {
        return {
          restrict: 'E',
          require: ['ionList', '^?$ionicScroll'],
          controller: '$ionicList',
          compile: function($element, $attr) {
            var listEl = jqLite('<div class="list">')
              .append( $element.contents() )
              .addClass($attr.type);
            $element.append(listEl);

            return function($scope, $element, $attrs, ctrls) {
              var listCtrl = ctrls[0];
              var scrollCtrl = ctrls[1];

              //Wait for child elements to render...
              $timeout(init);

              function init() {
                var listView = listCtrl.listView = new ionic.views.ListView({
                  el: $element[0],
                  listEl: $element.children()[0],
                  scrollEl: scrollCtrl && scrollCtrl.element,
                  scrollView: scrollCtrl && scrollCtrl.scrollView,
                  onReorder: function(el, oldIndex, newIndex) {
                    var itemScope = jqLite(el).scope();
                    if (itemScope && itemScope.$onReorder) {
                      //Make sure onReorder is called in apply cycle,
                      //but also make sure it has no conflicts by doing
                      //$evalAsync
                      $timeout(function() {
                        itemScope.$onReorder(oldIndex, newIndex);
                      });
                    }
                  },
                  canSwipe: function() {
                    return listCtrl.canSwipeItems();
                  }
                });

                if (isDefined($attr.canSwipe)) {
                  $scope.$watch('!!(' + $attr.canSwipe + ')', function(value) {
                    listCtrl.canSwipeItems(value);
                  });
                }
                if (isDefined($attr.showDelete)) {
                  $scope.$watch('!!(' + $attr.showDelete + ')', function(value) {
                    listCtrl.showDelete(value);
                  });
                }
                if (isDefined($attr.showReorder)) {
                  $scope.$watch('!!(' + $attr.showReorder + ')', function(value) {
                    listCtrl.showReorder(value);
                  });
                }

                $scope.$watch(function() {
                  return listCtrl.showDelete();
                }, function(isShown, wasShown) {
                  //Only use isShown=false if it was already shown
                  if (!isShown && !wasShown) { return; }

                  if (isShown) listCtrl.closeOptionButtons();
                  listCtrl.canSwipeItems(!isShown);

                  $element.children().toggleClass('list-left-editing', isShown);
                  $element.toggleClass('disable-pointer-events', isShown);

                  var deleteButton = jqLite($element[0].getElementsByClassName('item-delete'));
                  setButtonShown(deleteButton, listCtrl.showDelete);
                });

                $scope.$watch(function() {
                  return listCtrl.showReorder();
                }, function(isShown, wasShown) {
                  //Only use isShown=false if it was already shown
                  if (!isShown && !wasShown) { return; }

                  if (isShown) listCtrl.closeOptionButtons();
                  listCtrl.canSwipeItems(!isShown);

                  $element.children().toggleClass('list-right-editing', isShown);
                  $element.toggleClass('disable-pointer-events', isShown);

                  var reorderButton = jqLite($element[0].getElementsByClassName('item-reorder'));
                  setButtonShown(reorderButton, listCtrl.showReorder);
                });

                function setButtonShown(el, shown) {
                  shown() && el.addClass('visible') || el.removeClass('active');
                  ionic.requestAnimationFrame(function() {
                    shown() && el.addClass('active') || el.removeClass('invisible');
                  });
                }
              }

            };
          }
        };
      }]);

  /**
   * @ngdoc directive
   * @name menuClose
   * @module ionic
   * @restrict AC
   *
   * @description
   * Closes a side menu which is currently opened.
   *
   * @usage
   * Below is an example of a link within a side menu. Tapping this link would
   * automatically close the currently opened menu.
   *
   * ```html
   * <a menu-close href="#/home" class="item">Home</a>
   * ```
   */
  IonicModule
    .directive('menuClose', ['$ionicViewService', function($ionicViewService) {
      return {
        restrict: 'AC',
        require: '^ionSideMenus',
        link: function($scope, $element, $attr, sideMenuCtrl) {
          $element.bind('click', function(){
            sideMenuCtrl.close();
          });
        }
      };
    }]);

  /**
   * @ngdoc directive
   * @name menuToggle
   * @module ionic
   * @restrict AC
   *
   * @description
   * Toggle a side menu on the given side
   *
   * @usage
   * Below is an example of a link within a nav bar. Tapping this link would
   * automatically open the given side menu
   *
   * ```html
   * <ion-view>
   *   <ion-nav-buttons side="left">
   *    <button menu-toggle="left" class="button button-icon icon ion-navicon"></button>
   *   </ion-nav-buttons>
   *  ...
   * </ion-view>
   * ```
   */
  IonicModule
    .directive('menuToggle', ['$ionicViewService', function($ionicViewService) {
      return {
        restrict: 'AC',
        require: '^ionSideMenus',
        link: function($scope, $element, $attr, sideMenuCtrl) {
          var side = $attr.menuToggle || 'left';
          $element.bind('click', function(){
            if(side === 'left') {
              sideMenuCtrl.toggleLeft();
            } else if(side === 'right') {
              sideMenuCtrl.toggleRight();
            }
          });
        }
      };
    }]);


  /*
   * We don't document the ionModal directive, we instead document
   * the $ionicModal service
   */
  IonicModule
    .directive('ionModal', [function() {
      return {
        restrict: 'E',
        transclude: true,
        replace: true,
        controller: [function(){}],
        template: '<div class="modal-backdrop">' +
          '<div class="modal-wrapper" ng-transclude></div>' +
          '</div>'
      };
    }]);

  IonicModule
    .directive('ionModalView', function() {
      return {
        restrict: 'E',
        compile: function(element, attr) {
          element.addClass('modal');
        }
      };
    });

  /**
   * @ngdoc directive
   * @name ionNavBackButton
   * @module ionic
   * @restrict E
   * @parent ionNavBar
   * @description
   * Creates a back button inside an {@link ionic.directive:ionNavBar}.
   *
   * Will show up when the user is able to go back in the current navigation stack.
   *
   * By default, will go back when clicked.  If you wish for more advanced behavior, see the
   * examples below.
   *
   * @usage
   *
   * With default click action:
   *
   * ```html
   * <ion-nav-bar>
   *   <ion-nav-back-button class="button-clear">
   *     <i class="ion-arrow-left-c"></i> Back
   *   </ion-nav-back-button>
   * </ion-nav-bar>
   * ```
   *
   * With custom click action, using {@link ionic.service:$ionicNavBarDelegate}:
   *
   * ```html
   * <ion-nav-bar ng-controller="MyCtrl">
   *   <ion-nav-back-button class="button-clear"
   *     ng-click="goBack()">
   *     <i class="ion-arrow-left-c"></i> Back
   *   </ion-nav-back-button>
   * </ion-nav-bar>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicNavBarDelegate) {
 *   $scope.goBack = function() {
 *     $ionicNavBarDelegate.back();
 *   };
 * }
   * ```
   *
   * Displaying the previous title on the back button, again using
   * {@link ionic.service:$ionicNavBarDelegate}.
   *
   * ```html
   * <ion-nav-bar ng-controller="MyCtrl">
   *   <ion-nav-back-button class="button-icon">
   *     <i class="icon ion-arrow-left-c"></i>{% raw %}{{getPreviousTitle() || 'Back'}}{% endraw %}
   *   </ion-nav-back-button>
   * </ion-nav-bar>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicNavBarDelegate) {
 *   $scope.getPreviousTitle = function() {
 *     return $ionicNavBarDelegate.getPreviousTitle();
 *   };
 * }
   * ```
   */
  IonicModule
    .directive('ionNavBackButton', [
      '$animate',
      '$rootScope',
      '$sanitize',
      '$ionicNavBarConfig',
      '$ionicNgClick',
      function($animate, $rootScope, $sanitize, $ionicNavBarConfig, $ionicNgClick) {
        var backIsShown = false;
        //If the current viewstate does not allow a back button,
        //always hide it.
        $rootScope.$on('$viewHistory.historyChange', function(e, data) {
          backIsShown = !!data.showBack;
        });
        return {
          restrict: 'E',
          require: '^ionNavBar',
          compile: function(tElement, tAttrs) {
            tElement.addClass('button back-button ng-hide');

            var hasIconChild = !!(tElement.html() || '').match(/class=.*?ion-/);

            return function($scope, $element, $attr, navBarCtrl) {

              // Add a default back button icon based on the nav config, unless one is set
              if (!hasIconChild && $element[0].className.indexOf('ion-') === -1) {
                $element.addClass($ionicNavBarConfig.backButtonIcon);
              }

              //Default to ngClick going back, but don't override a custom one
              if (!isDefined($attr.ngClick)) {
                $ionicNgClick($scope, $element, navBarCtrl.back);
              }

              //Make sure both that a backButton is allowed in the first place,
              //and that it is shown by the current view.
              $scope.$watch(function() {
                if(isDefined($attr.fromTitle)) {
                  $element[0].innerHTML = '<span class="back-button-title">' + $sanitize($scope.oldTitle) + '</span>';
                }
                return !!(backIsShown && $scope.backButtonShown);
              }, ionic.animationFrameThrottle(function(show) {
                if (show) $animate.removeClass($element, 'ng-hide');
                else $animate.addClass($element, 'ng-hide');
              }));
            };
          }
        };
      }]);


  IonicModule.constant('$ionicNavBarConfig', {
    transition: 'nav-title-slide-ios7',
    alignTitle: 'center',
    backButtonIcon: 'ion-ios7-arrow-back'
  });

  /**
   * @ngdoc directive
   * @name ionNavBar
   * @module ionic
   * @delegate ionic.service:$ionicNavBarDelegate
   * @restrict E
   *
   * @description
   * If we have an {@link ionic.directive:ionNavView} directive, we can also create an
   * `<ion-nav-bar>`, which will create a topbar that updates as the application state changes.
   *
   * We can add a back button by putting an {@link ionic.directive:ionNavBackButton} inside.
   *
   * We can add buttons depending on the currently visible view using
   * {@link ionic.directive:ionNavButtons}.
   *
   * Add an [animation class](/docs/components#animations) to the element via the
   * `animation` attribute to enable animated changing of titles
   * (recommended: 'nav-title-slide-ios7').
   *
   * Note that the ion-nav-bar element will only work correctly if your content has an
   * ionView around it.
   *
   * @usage
   *
   * ```html
   * <body ng-app="starter">
   *   <!-- The nav bar that will be updated as we navigate -->
   *   <ion-nav-bar class="bar-positive" animation="nav-title-slide-ios7">
   *   </ion-nav-bar>
   *
   *   <!-- where the initial view template will be rendered -->
   *   <ion-nav-view>
   *     <ion-view>
   *       <ion-content>Hello!</ion-content>
   *     </ion-view>
   *   </ion-nav-view>
   * </body>
   * ```
   *
   * @param {string=} delegate-handle The handle used to identify this navBar
   * with {@link ionic.service:$ionicNavBarDelegate}.
   * @param align-title {string=} Where to align the title of the navbar.
   * Available: 'left', 'right', 'center'. Defaults to 'center'.
   * @param {boolean=} no-tap-scroll By default, the navbar will scroll the content
   * to the top when tapped.  Set no-tap-scroll to true to disable this behavior.
   *
   * </table><br/>
   *
   * ### Alternative Usage
   *
   * Alternatively, you may put ion-nav-bar inside of each individual view's ion-view element.
   * This will allow you to have the whole navbar, not just its contents, transition every view change.
   *
   * This is similar to using a header bar inside your ion-view, except it will have all the power of a navbar.
   *
   * If you do this, simply put nav buttons inside the navbar itself; do not use `<ion-nav-buttons>`.
   *
   *
   * ```html
   * <ion-view title="myTitle">
   *   <ion-nav-bar class="bar-positive">
   *     <ion-nav-back-button>
   *       Back
   *     </ion-nav-back-button>
   *     <div class="buttons right-buttons">
   *       <button class="button">
   *         Right Button
   *       </button>
   *     </div>
   *   </ion-nav-bar>
   * </ion-view>
   * ```
   */
  IonicModule
    .directive('ionNavBar', [
      '$ionicViewService',
      '$rootScope',
      '$animate',
      '$compile',
      '$ionicNavBarConfig',
      function($ionicViewService, $rootScope, $animate, $compile, $ionicNavBarConfig) {

        return {
          restrict: 'E',
          controller: '$ionicNavBar',
          scope: true,
          compile: function(tElement, tAttrs) {
            //We cannot transclude here because it breaks element.data() inheritance on compile
            tElement
              .addClass('bar bar-header nav-bar')
              .append(
                '<div class="buttons left-buttons"> ' +
                '</div>' +
                '<h1 ng-bind-html="title" class="title"></h1>' +
                '<div class="buttons right-buttons"> ' +
                '</div>'
            );

            if (isDefined(tAttrs.animation)) {
              tElement.addClass(tAttrs.animation);
            } else {
              tElement.addClass($ionicNavBarConfig.transition);
            }

            return { pre: prelink };
            function prelink($scope, $element, $attr, navBarCtrl) {
              navBarCtrl._headerBarView = new ionic.views.HeaderBar({
                el: $element[0],
                alignTitle: $attr.alignTitle || $ionicNavBarConfig.alignTitle || 'center'
              });

              //defaults
              $scope.backButtonShown = false;
              $scope.shouldAnimate = true;
              $scope.isReverse = false;
              $scope.isInvisible = true;

              $scope.$on('$destroy', function() {
                $scope.$parent.$hasHeader = false;
              });

              $scope.$watch(function() {
                return ($scope.isReverse ? ' reverse' : '') +
                  ($scope.isInvisible ? ' invisible' : '') +
                  (!$scope.shouldAnimate ? ' no-animation' : '');
              }, function(className, oldClassName) {
                $element.removeClass(oldClassName);
                $element.addClass(className);
              });

            }
          }
        };
      }]);


  /**
   * @ngdoc directive
   * @name ionNavButtons
   * @module ionic
   * @restrict E
   * @parent ionNavView
   *
   * @description
   * Use ionNavButtons to set the buttons on your {@link ionic.directive:ionNavBar}
   * from within an {@link ionic.directive:ionView}.
   *
   * Any buttons you declare will be placed onto the navbar's corresponding side,
   * and then destroyed when the user leaves their parent view.
   *
   * @usage
   * ```html
   * <ion-nav-bar>
   * </ion-nav-bar>
   * <ion-nav-view>
   *   <ion-view>
   *     <ion-nav-buttons side="left">
   *       <button class="button" ng-click="doSomething()">
   *         I'm a button on the left of the navbar!
   *       </button>
   *     </ion-nav-buttons>
   *     <ion-content>
   *       Some super content here!
   *     </ion-content>
   *   </ion-view>
   * </ion-nav-view>
   * ```
   *
   * @param {string} side The side to place the buttons on in the parent
   * {@link ionic.directive:ionNavBar}. Available: 'left' or 'right'.
   */
  IonicModule
    .directive('ionNavButtons', ['$compile', '$animate', function($compile, $animate) {
      return {
        require: '^ionNavBar',
        restrict: 'E',
        compile: function($element, $attrs) {
          var content = $element.contents().remove();
          return function($scope, $element, $attrs, navBarCtrl) {
            var navElement = $attrs.side === 'right' ?
              navBarCtrl.rightButtonsElement :
              navBarCtrl.leftButtonsElement;

            //Put all of our inside buttons into their own span,
            //so we can remove them all when this element dies -
            //even if the buttons have changed through an ng-repeat or the like,
            //we just remove their div parent and they are gone.
            var buttons = jqLite('<span>').append(content);

            //Compile buttons inside content so they have access to everything
            //something inside content does (eg parent ionicScroll)
            $element.append(buttons);
            $compile(buttons)($scope);

            //Append buttons to navbar
            ionic.requestAnimationFrame(function() {
              //If the scope is destroyed before raf runs, be sure not to enter
              if (!$scope.$$destroyed) {
                $animate.enter(buttons, navElement);
              }
            });

            //When our ion-nav-buttons container is destroyed,
            //destroy everything in the navbar
            $scope.$on('$destroy', function() {
              $animate.leave(buttons);
            });

            // The original element is just a completely empty <ion-nav-buttons> element.
            // make it invisible just to be sure it doesn't change any layout
            $element.css('display', 'none');
          };
        }
      };
    }]);


  /**
   * @ngdoc directive
   * @name navClear
   * @module ionic
   * @restrict AC
   *
   * @description
   * nav-clear is an attribute directive which should be used with an element that changes
   * the view on click, for example an `<a href>` or a `<button ui-sref>`.
   *
   * nav-clear will cause the given element, when clicked, to disable the next view transition.
   * This directive is useful, for example, for links within a sideMenu.
   *
   * @usage
   * Below is a link in a side menu, with the nav-clear directive added to it.
   * Tapping this link will disable any animations that would normally occur
   * between views.
   *
   * ```html
   * <a nav-clear menu-close href="#/home" class="item">Home</a>
   * ```
   */
  IonicModule
    .directive('navClear', [
      '$ionicViewService',
      '$state',
      '$location',
      '$window',
      '$rootScope',
      function($ionicViewService, $location, $state, $window, $rootScope) {
        $rootScope.$on('$stateChangeError', function() {
          $ionicViewService.nextViewOptions(null);
        });
        return {
          priority: 100,
          restrict: 'AC',
          compile: function($element) {
            return { pre: prelink };
            function prelink($scope, $element, $attrs) {
              var unregisterListener;
              function listenForStateChange() {
                unregisterListener = $scope.$on('$stateChangeStart', function() {
                  $ionicViewService.nextViewOptions({
                    disableAnimate: true,
                    disableBack: true
                  });
                  unregisterListener();
                });
                $window.setTimeout(unregisterListener, 300);
              }

              $element.on('click', listenForStateChange);
            }
          }
        };
      }]);

  IonicModule.constant('$ionicNavViewConfig', {
    transition: 'slide-left-right-ios7'
  });

  /**
   * @ngdoc directive
   * @name ionNavView
   * @module ionic
   * @restrict E
   * @codepen odqCz
   *
   * @description
   * As a user navigates throughout your app, Ionic is able to keep track of their
   * navigation history. By knowing their history, transitions between views
   * correctly slide either left or right, or no transition at all. An additional
   * benefit to Ionic's navigation system is its ability to manage multiple
   * histories.
   *
   * Ionic uses the AngularUI Router module so app interfaces can be organized
   * into various "states". Like Angular's core $route service, URLs can be used
   * to control the views. However, the AngularUI Router provides a more powerful
   * state manager in that states are bound to named, nested, and parallel views,
   * allowing more than one template to be rendered on the same page.
   * Additionally, each state is not required to be bound to a URL, and data can
   * be pushed to each state which allows much flexibility.
   *
   * The ionNavView directive is used to render templates in your application. Each template
   * is part of a state. States are usually mapped to a url, and are defined programatically
   * using angular-ui-router (see [their docs](https://github.com/angular-ui/ui-router/wiki),
   * and remember to replace ui-view with ion-nav-view in examples).
   *
   * @usage
   * In this example, we will create a navigation view that contains our different states for the app.
   *
   * To do this, in our markup we use ionNavView top level directive. To display a header bar we use
   * the {@link ionic.directive:ionNavBar} directive that updates as we navigate through the
   * navigation stack.
   *
   * You can use any [animation class](/docs/components#animation) on the navView's `animation` attribute
   * to have its pages animate.
   *
   * Recommended for page transitions: 'slide-left-right', 'slide-left-right-ios7', 'slide-in-up'.
   *
   * ```html
   * <ion-nav-bar></ion-nav-bar>
   * <ion-nav-view animation="slide-left-right">
   *   <!-- Center content -->
   * </ion-nav-view>
   * ```
   *
   * Next, we need to setup our states that will be rendered.
   *
   * ```js
   * var app = angular.module('myApp', ['ionic']);
   * app.config(function($stateProvider) {
 *   $stateProvider
 *   .state('index', {
 *     url: '/',
 *     templateUrl: 'home.html'
 *   })
 *   .state('music', {
 *     url: '/music',
 *     templateUrl: 'music.html'
 *   });
 * });
   * ```
   * Then on app start, $stateProvider will look at the url, see it matches the index state,
   * and then try to load home.html into the `<ion-nav-view>`.
   *
   * Pages are loaded by the URLs given. One simple way to create templates in Angular is to put
   * them directly into your HTML file and use the `<script type="text/ng-template">` syntax.
   * So here is one way to put home.html into our app:
   *
   * ```html
   * <script id="home" type="text/ng-template">
   *   <!-- The title of the ion-view will be shown on the navbar -->
   *   <ion-view title="'Home'">
   *     <ion-content ng-controller="HomeCtrl">
   *       <!-- The content of the page -->
   *       <a href="#/music">Go to music page!</a>
   *     </ion-content>
   *   </ion-view>
   * </script>
   * ```
   *
   * This is good to do because the template will be cached for very fast loading, instead of
   * having to fetch them from the network.
   *
   * Please visit [AngularUI Router's docs](https://github.com/angular-ui/ui-router/wiki) for
   * more info. Below is a great video by the AngularUI Router guys that may help to explain
   * how it all works:
   *
   * <iframe width="560" height="315" src="//www.youtube.com/embed/dqJRoh8MnBo"
   * frameborder="0" allowfullscreen></iframe>
   *
   * @param {string=} name A view name. The name should be unique amongst the other views in the
   * same state. You can have views of the same name that live in different states. For more
   * information, see ui-router's [ui-view documentation](http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.directive:ui-view).
   */
  IonicModule
    .directive('ionNavView', [
      '$ionicViewService',
      '$state',
      '$compile',
      '$controller',
      '$animate',
      function( $ionicViewService,   $state,   $compile,   $controller,   $animate) {
        // IONIC's fork of Angular UI Router, v0.2.7
        // the navView handles registering views in the history, which animation to use, and which
        var viewIsUpdating = false;

        var directive = {
          restrict: 'E',
          terminal: true,
          priority: 2000,
          transclude: true,
          controller: function(){},
          compile: function (element, attr, transclude) {
            return function(scope, element, attr, navViewCtrl) {
              var viewScope, viewLocals,
                name = attr[directive.name] || attr.name || '',
                onloadExp = attr.onload || '',
                initialView = transclude(scope);

              // Put back the compiled initial view
              element.append(initialView);

              // Find the details of the parent view directive (if any) and use it
              // to derive our own qualified view name, then hang our own details
              // off the DOM so child directives can find it.
              var parent = element.parent().inheritedData('$uiView');
              if (name.indexOf('@') < 0) name  = name + '@' + ((parent && parent.state) ? parent.state.name : '');
              var view = { name: name, state: null };
              element.data('$uiView', view);

              var eventHook = function() {
                if (viewIsUpdating) return;
                viewIsUpdating = true;

                try { updateView(true); } catch (e) {
                  viewIsUpdating = false;
                  throw e;
                }
                viewIsUpdating = false;
              };

              scope.$on('$stateChangeSuccess', eventHook);
              // scope.$on('$viewContentLoading', eventHook);
              updateView(false);

              function updateView(doAnimate) {
                //===false because $animate.enabled() is a noop without angular-animate included
                if ($animate.enabled() === false) {
                  doAnimate = false;
                }

                var locals = $state.$current && $state.$current.locals[name];
                if (locals === viewLocals) return; // nothing to do
                var renderer = $ionicViewService.getRenderer(element, attr, scope);

                // Destroy previous view scope
                if (viewScope) {
                  viewScope.$destroy();
                  viewScope = null;
                }

                if (!locals) {
                  viewLocals = null;
                  view.state = null;

                  // Restore the initial view
                  return element.append(initialView);
                }

                var newElement = jqLite('<div></div>').html(locals.$template).contents();
                var viewRegisterData = renderer().register(newElement);

                // Remove existing content
                renderer(doAnimate).leave();

                viewLocals = locals;
                view.state = locals.$$state;

                renderer(doAnimate).enter(newElement);

                var link = $compile(newElement);
                viewScope = scope.$new();

                viewScope.$navDirection = viewRegisterData.navDirection;

                if (locals.$$controller) {
                  locals.$scope = viewScope;
                  var controller = $controller(locals.$$controller, locals);
                  element.children().data('$ngControllerController', controller);
                }
                link(viewScope);

                var viewHistoryData = $ionicViewService._getViewById(viewRegisterData.viewId) || {};
                viewScope.$broadcast('$viewContentLoaded', viewHistoryData);

                if (onloadExp) viewScope.$eval(onloadExp);

                newElement = null;
              }
            };
          }
        };
        return directive;
      }]);


  IonicModule

    .config(['$provide', function($provide) {
      $provide.decorator('ngClickDirective', ['$delegate', function($delegate) {
        // drop the default ngClick directive
        $delegate.shift();
        return $delegate;
      }]);
    }])

  /**
   * @private
   */
    .factory('$ionicNgClick', ['$parse', function($parse) {
      return function(scope, element, clickExpr) {
        var clickHandler = angular.isFunction(clickExpr) ?
          clickExpr :
          $parse(clickExpr);

        element.on('click', function(event) {
          scope.$apply(function() {
            clickHandler(scope, {$event: (event)});
          });
        });

        // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
        // something else nearby.
        element.onclick = function(event) { };
      };
    }])

    .directive('ngClick', ['$ionicNgClick', function($ionicNgClick) {
      return function(scope, element, attr) {
        $ionicNgClick(scope, element, attr.ngClick);
      };
    }])

    .directive('ionStopEvent', function () {
      return {
        restrict: 'A',
        link: function (scope, element, attr) {
          element.bind(attr.ionStopEvent, eventStopPropagation);
        }
      };
    });
  function eventStopPropagation(e) {
    e.stopPropagation();
  }


  /**
   * @ngdoc directive
   * @name ionPane
   * @module ionic
   * @restrict E
   *
   * @description A simple container that fits content, with no side effects.  Adds the 'pane' class to the element.
   */
  IonicModule
    .directive('ionPane', function() {
      return {
        restrict: 'E',
        link: function(scope, element, attr) {
          element.addClass('pane');
        }
      };
    });

  /*
   * We don't document the ionPopover directive, we instead document
   * the $ionicPopover service
   */
  IonicModule
    .directive('ionPopover', [function() {
      return {
        restrict: 'E',
        transclude: true,
        replace: true,
        controller: [function(){}],
        template: '<div class="popover-backdrop">' +
          '<div class="popover-wrapper" ng-transclude></div>' +
          '</div>'
      };
    }]);

  IonicModule
    .directive('ionPopoverView', function() {
      return {
        restrict: 'E',
        compile: function(element) {
          element.append( angular.element('<div class="popover-arrow"></div>') );
          element.addClass('popover');
        }
      };
    });

  /**
   * @ngdoc directive
   * @name ionRadio
   * @module ionic
   * @restrict E
   * @codepen saoBG
   * @description
   * The radio directive is no different than the HTML radio input, except it's styled differently.
   *
   * Radio behaves like any [AngularJS radio](http://docs.angularjs.org/api/ng/input/input[radio]).
   *
   * @usage
   * ```html
   * <ion-radio ng-model="choice" ng-value="'A'">Choose A</ion-radio>
   * <ion-radio ng-model="choice" ng-value="'B'">Choose B</ion-radio>
   * <ion-radio ng-model="choice" ng-value="'C'">Choose C</ion-radio>
   * ```
   */
  IonicModule
    .directive('ionRadio', function() {
      return {
        restrict: 'E',
        replace: true,
        require: '?ngModel',
        transclude: true,
        template:
          '<label class="item item-radio">' +
          '<input type="radio" name="radio-group">' +
          '<div class="item-content disable-pointer-events" ng-transclude></div>' +
          '<i class="radio-icon disable-pointer-events icon ion-checkmark"></i>' +
          '</label>',

        compile: function(element, attr) {
          if(attr.icon) element.children().eq(2).removeClass('ion-checkmark').addClass(attr.icon);
          var input = element.find('input');
          forEach({
            'name': attr.name,
            'value': attr.value,
            'disabled': attr.disabled,
            'ng-value': attr.ngValue,
            'ng-model': attr.ngModel,
            'ng-disabled': attr.ngDisabled,
            'ng-change': attr.ngChange
          }, function(value, name) {
            if (isDefined(value)) {
              input.attr(name, value);
            }
          });

          return function(scope, element, attr) {
            scope.getValue = function() {
              return scope.ngValue || attr.value;
            };
          };
        }
      };
    });


  /**
   * @ngdoc directive
   * @name ionRefresher
   * @module ionic
   * @restrict E
   * @parent ionic.directive:ionContent, ionic.directive:ionScroll
   * @description
   * Allows you to add pull-to-refresh to a scrollView.
   *
   * Place it as the first child of your {@link ionic.directive:ionContent} or
   * {@link ionic.directive:ionScroll} element.
   *
   * When refreshing is complete, $broadcast the 'scroll.refreshComplete' event
   * from your controller.
   *
   * @usage
   *
   * ```html
   * <ion-content ng-controller="MyController">
   *   <ion-refresher
   *     pulling-text="Pull to refresh..."
   *     on-refresh="doRefresh()">
   *   </ion-refresher>
   *   <ion-list>
   *     <ion-item ng-repeat="item in items"></ion-item>
   *   </ion-list>
   * </ion-content>
   * ```
   * ```js
   * angular.module('testApp', ['ionic'])
   * .controller('MyController', function($scope, $http) {
 *   $scope.items = [1,2,3];
 *   $scope.doRefresh = function() {
 *     $http.get('/new-items')
 *      .success(function(newItems) {
 *        $scope.items = newItems;
 *      })
 *      .finally(function() {
 *        // Stop the ion-refresher from spinning
 *        $scope.$broadcast('scroll.refreshComplete');
 *      });
 *   };
 * });
   * ```
   *
   * @param {expression=} on-refresh Called when the user pulls down enough and lets go
   * of the refresher.
   * @param {expression=} on-pulling Called when the user starts to pull down
   * on the refresher.
   * @param {string=} pulling-icon The icon to display while the user is pulling down.
   * Default: 'ion-arrow-down-c'.
   * @param {string=} pulling-text The text to display while the user is pulling down.
   * @param {string=} refreshing-icon The icon to display after user lets go of the
   * refresher.
   * @param {string=} refreshing-text The text to display after the user lets go of
   * the refresher.
   *
   */
  IonicModule
    .directive('ionRefresher', ['$ionicBind', function($ionicBind) {
      return {
        restrict: 'E',
        replace: true,
        require: '^$ionicScroll',
        template:
          '<div class="scroll-refresher">' +
          '<div class="ionic-refresher-content" ' +
          'ng-class="{\'ionic-refresher-with-text\': pullingText || refreshingText}">' +
          '<div class="icon-pulling">' +
          '<i class="icon {{pullingIcon}}"></i>' +
          '</div>' +
          '<div class="text-pulling" ng-bind-html="pullingText"></div>' +
          '<i class="icon {{refreshingIcon}} icon-refreshing"></i>' +
          '<div class="text-refreshing" ng-bind-html="refreshingText"></div>' +
          '</div>' +
          '</div>',
        compile: function($element, $attrs) {
          if (angular.isUndefined($attrs.pullingIcon)) {
            $attrs.$set('pullingIcon', 'ion-arrow-down-c');
          }
          if (angular.isUndefined($attrs.refreshingIcon)) {
            $attrs.$set('refreshingIcon', 'ion-loading-d');
          }
          return function($scope, $element, $attrs, scrollCtrl) {
            $ionicBind($scope, $attrs, {
              pullingIcon: '@',
              pullingText: '@',
              refreshingIcon: '@',
              refreshingText: '@',
              $onRefresh: '&onRefresh',
              $onPulling: '&onPulling'
            });

            scrollCtrl._setRefresher($scope, $element[0]);
            $scope.$on('scroll.refreshComplete', function() {
              $scope.$evalAsync(function() {
                $element[0].classList.remove('active');
                scrollCtrl.scrollView.finishPullToRefresh();
              });
            });
          };
        }
      };
    }]);

  /**
   * @ngdoc directive
   * @name ionScroll
   * @module ionic
   * @delegate ionic.service:$ionicScrollDelegate
   * @codepen mwFuh
   * @restrict E
   *
   * @description
   * Creates a scrollable container for all content inside.
   *
   * @usage
   *
   * Basic usage:
   *
   * ```html
   * <ion-scroll zooming="true" direction="xy" style="width: 500px; height: 500px">
   *   <div style="width: 5000px; height: 5000px; background: url('https://upload.wikimedia.org/wikipedia/commons/a/ad/Europe_geological_map-en.jpg') repeat"></div>
   *  </ion-scroll>
   * ```
   *
   * Note that it's important to set the height of the scroll box as well as the height of the inner
   * content to enable scrolling. This makes it possible to have full control over scrollable areas.
   *
   * If you'd just like to have a center content scrolling area, use {@link ionic.directive:ionContent} instead.
   *
   * @param {string=} delegate-handle The handle used to identify this scrollView
   * with {@link ionic.service:$ionicScrollDelegate}.
   * @param {string=} direction Which way to scroll. 'x' or 'y' or 'xy'. Default 'y'.
   * @param {boolean=} paging Whether to scroll with paging.
   * @param {expression=} on-refresh Called on pull-to-refresh, triggered by an {@link ionic.directive:ionRefresher}.
   * @param {expression=} on-scroll Called whenever the user scrolls.
   * @param {boolean=} scrollbar-x Whether to show the horizontal scrollbar. Default true.
   * @param {boolean=} scrollbar-y Whether to show the vertical scrollbar. Default true.
   * @param {boolean=} zooming Whether to support pinch-to-zoom
   * @param {integer=} min-zoom The smallest zoom amount allowed (default is 0.5)
   * @param {integer=} max-zoom The largest zoom amount allowed (default is 3)
   * @param {boolean=} has-bouncing Whether to allow scrolling to bounce past the edges
   * of the content.  Defaults to true on iOS, false on Android.
   */
  IonicModule
    .directive('ionScroll', [
      '$timeout',
      '$controller',
      '$ionicBind',
      function($timeout, $controller, $ionicBind) {
        return {
          restrict: 'E',
          scope: true,
          controller: function() {},
          compile: function(element, attr) {
            element.addClass('scroll-view ionic-scroll');

            //We cannot transclude here because it breaks element.data() inheritance on compile
            var innerElement = jqLite('<div class="scroll"></div>');
            innerElement.append(element.contents());
            element.append(innerElement);

            return { pre: prelink };
            function prelink($scope, $element, $attr) {
              var scrollView, scrollCtrl;

              $ionicBind($scope, $attr, {
                direction: '@',
                paging: '@',
                $onScroll: '&onScroll',
                scroll: '@',
                scrollbarX: '@',
                scrollbarY: '@',
                zooming: '@',
                minZoom: '@',
                maxZoom: '@'
              });
              $scope.direction = $scope.direction || 'y';

              if (angular.isDefined($attr.padding)) {
                $scope.$watch($attr.padding, function(newVal) {
                  innerElement.toggleClass('padding', !!newVal);
                });
              }
              if($scope.$eval($scope.paging) === true) {
                innerElement.addClass('scroll-paging');
              }

              if(!$scope.direction) { $scope.direction = 'y'; }
              var isPaging = $scope.$eval($scope.paging) === true;

              var scrollViewOptions= {
                el: $element[0],
                delegateHandle: $attr.delegateHandle,
                bouncing: $scope.$eval($attr.hasBouncing),
                paging: isPaging,
                scrollbarX: $scope.$eval($scope.scrollbarX) !== false,
                scrollbarY: $scope.$eval($scope.scrollbarY) !== false,
                scrollingX: $scope.direction.indexOf('x') >= 0,
                scrollingY: $scope.direction.indexOf('y') >= 0,
                zooming: $scope.$eval($scope.zooming) === true,
                maxZoom: $scope.$eval($scope.maxZoom) || 3,
                minZoom: $scope.$eval($scope.minZoom) || 0.5
              };
              if (isPaging) {
                scrollViewOptions.speedMultiplier = 0.8;
                scrollViewOptions.bouncing = false;
              }

              scrollCtrl = $controller('$ionicScroll', {
                $scope: $scope,
                scrollViewOptions: scrollViewOptions
              });
              scrollView = $scope.$parent.scrollView = scrollCtrl.scrollView;
            }
          }
        };
      }]);

  /**
   * @ngdoc directive
   * @name ionSideMenu
   * @module ionic
   * @restrict E
   * @parent ionic.directive:ionSideMenus
   *
   * @description
   * A container for a side menu, sibling to an {@link ionic.directive:ionSideMenuContent} directive.
   *
   * @usage
   * ```html
   * <ion-side-menu
   *   side="left"
   *   width="myWidthValue + 20"
   *   is-enabled="shouldLeftSideMenuBeEnabled()">
   * </ion-side-menu>
   * ```
   * For a complete side menu example, see the
   * {@link ionic.directive:ionSideMenus} documentation.
   *
   * @param {string} side Which side the side menu is currently on.  Allowed values: 'left' or 'right'.
   * @param {boolean=} is-enabled Whether this side menu is enabled.
   * @param {number=} width How many pixels wide the side menu should be.  Defaults to 275.
   */
  IonicModule
    .directive('ionSideMenu', function() {
      return {
        restrict: 'E',
        require: '^ionSideMenus',
        scope: true,
        compile: function(element, attr) {
          angular.isUndefined(attr.isEnabled) && attr.$set('isEnabled', 'true');
          angular.isUndefined(attr.width) && attr.$set('width', '275');

          element.addClass('menu menu-' + attr.side);

          return function($scope, $element, $attr, sideMenuCtrl) {
            $scope.side = $attr.side || 'left';

            var sideMenu = sideMenuCtrl[$scope.side] = new ionic.views.SideMenu({
              width: 275,
              el: $element[0],
              isEnabled: true
            });

            $scope.$watch($attr.width, function(val) {
              var numberVal = +val;
              if (numberVal && numberVal == val) {
                sideMenu.setWidth(+val);
              }
            });
            $scope.$watch($attr.isEnabled, function(val) {
              sideMenu.setIsEnabled(!!val);
            });
          };
        }
      };
    });


  /**
   * @ngdoc directive
   * @name ionSideMenuContent
   * @module ionic
   * @restrict E
   * @parent ionic.directive:ionSideMenus
   *
   * @description
   * A container for the main visible content, sibling to one or more
   * {@link ionic.directive:ionSideMenu} directives.
   *
   * @usage
   * ```html
   * <ion-side-menu-content
   *   edge-drag-threshold="true"
   *   drag-content="true">
   * </ion-side-menu-content>
   * ```
   * For a complete side menu example, see the
   * {@link ionic.directive:ionSideMenus} documentation.
   *
   * @param {boolean=} drag-content Whether the content can be dragged. Default true.
   * @param {boolean|number=} edge-drag-threshold Whether the content drag can only start if it is below a certain threshold distance from the edge of the screen.  Default false. Accepts three types of values:
   *  - If a non-zero number is given, that many pixels is used as the maximum allowed distance from the edge that starts dragging the side menu.
   *  - If true is given, the default number of pixels (25) is used as the maximum allowed distance.
   *  - If false or 0 is given, the edge drag threshold is disabled, and dragging from anywhere on the content is allowed.
   *
   */
  IonicModule
    .directive('ionSideMenuContent', [
      '$timeout',
      '$ionicGesture',
      function($timeout, $ionicGesture) {

        return {
          restrict: 'EA', //DEPRECATED 'A'
          require: '^ionSideMenus',
          scope: true,
          compile: function(element, attr) {
            return { pre: prelink };
            function prelink($scope, $element, $attr, sideMenuCtrl) {

              $element.addClass('menu-content pane');

              if (isDefined(attr.dragContent)) {
                $scope.$watch(attr.dragContent, function(value) {
                  sideMenuCtrl.canDragContent(value);
                });
              } else {
                sideMenuCtrl.canDragContent(true);
              }

              if (isDefined(attr.edgeDragThreshold)) {
                $scope.$watch(attr.edgeDragThreshold, function(value) {
                  sideMenuCtrl.edgeDragThreshold(value);
                });
              }

              var defaultPrevented = false;
              var isDragging = false;

              // Listen for taps on the content to close the menu
              function contentTap(e) {
                if(sideMenuCtrl.getOpenAmount() !== 0) {
                  sideMenuCtrl.close();
                  e.gesture.srcEvent.preventDefault();
                }
              }
              ionic.on('tap', contentTap, $element[0]);

              var dragFn = function(e) {
                if(defaultPrevented || !sideMenuCtrl.isDraggableTarget(e)) return;
                isDragging = true;
                sideMenuCtrl._handleDrag(e);
                e.gesture.srcEvent.preventDefault();
              };

              var dragVertFn = function(e) {
                if(isDragging) {
                  e.gesture.srcEvent.preventDefault();
                }
              };

              //var dragGesture = Gesture.on('drag', dragFn, $element);
              var dragRightGesture = $ionicGesture.on('dragright', dragFn, $element);
              var dragLeftGesture = $ionicGesture.on('dragleft', dragFn, $element);
              var dragUpGesture = $ionicGesture.on('dragup', dragVertFn, $element);
              var dragDownGesture = $ionicGesture.on('dragdown', dragVertFn, $element);

              var dragReleaseFn = function(e) {
                isDragging = false;
                if(!defaultPrevented) {
                  sideMenuCtrl._endDrag(e);
                }
                defaultPrevented = false;
              };

              var releaseGesture = $ionicGesture.on('release', dragReleaseFn, $element);

              sideMenuCtrl.setContent({
                element: element[0],
                onDrag: function(e) {},
                endDrag: function(e) {},
                getTranslateX: function() {
                  return $scope.sideMenuContentTranslateX || 0;
                },
                setTranslateX: ionic.animationFrameThrottle(function(amount) {
                  $element[0].style[ionic.CSS.TRANSFORM] = 'translate3d(' + amount + 'px, 0, 0)';
                  $timeout(function() {
                    $scope.sideMenuContentTranslateX = amount;
                  });
                }),
                enableAnimation: function() {
                  //this.el.classList.add(this.animateClass);
                  $scope.animationEnabled = true;
                  $element[0].classList.add('menu-animated');
                },
                disableAnimation: function() {
                  //this.el.classList.remove(this.animateClass);
                  $scope.animationEnabled = false;
                  $element[0].classList.remove('menu-animated');
                }
              });

              // Cleanup
              $scope.$on('$destroy', function() {
                $ionicGesture.off(dragLeftGesture, 'dragleft', dragFn);
                $ionicGesture.off(dragRightGesture, 'dragright', dragFn);
                $ionicGesture.off(dragUpGesture, 'dragup', dragFn);
                $ionicGesture.off(dragDownGesture, 'dragdown', dragFn);
                $ionicGesture.off(releaseGesture, 'release', dragReleaseFn);
                ionic.off('tap', contentTap, $element[0]);
              });
            }
          }
        };
      }]);

  IonicModule

  /**
   * @ngdoc directive
   * @name ionSideMenus
   * @module ionic
   * @delegate ionic.service:$ionicSideMenuDelegate
   * @restrict E
   *
   * @description
   * A container element for side menu(s) and the main content. Allows the left
   * and/or right side menu to be toggled by dragging the main content area side
   * to side.
   *
   * To automatically close an opened menu you can add the {@link ionic.directive:menuClose}
   * attribute directive. Including the `menu-close` attribute is usually added to
   * links and buttons within `ion-side-menu` content, so that when the element is
   * clicked then the opened side menu will automatically close.
   *
   * ![Side Menu](http://ionicframework.com.s3.amazonaws.com/docs/controllers/sidemenu.gif)
   *
   * For more information on side menus, check out:
   *
   * - {@link ionic.directive:ionSideMenuContent}
   * - {@link ionic.directive:ionSideMenu}
   * - {@link ionic.directive:menuClose}
   *
   * @usage
   * To use side menus, add an `<ion-side-menus>` parent element,
   * an `<ion-side-menu-content>` for the center content,
   * and one or more `<ion-side-menu>` directives.
   *
   * ```html
   * <ion-side-menus>
   *   <!-- Center content -->
   *   <ion-side-menu-content ng-controller="ContentController">
   *   </ion-side-menu-content>
   *
   *   <!-- Left menu -->
   *   <ion-side-menu side="left">
   *   </ion-side-menu>
   *
   *   <!-- Right menu -->
   *   <ion-side-menu side="right">
   *   </ion-side-menu>
   * </ion-side-menus>
   * ```
   * ```js
   * function ContentController($scope, $ionicSideMenuDelegate) {
 *   $scope.toggleLeft = function() {
 *     $ionicSideMenuDelegate.toggleLeft();
 *   };
 * }
   * ```
   *
   * @param {string=} delegate-handle The handle used to identify this side menu
   * with {@link ionic.service:$ionicSideMenuDelegate}.
   *
   */
    .directive('ionSideMenus', ['$document', function($document) {
      return {
        restrict: 'ECA',
        controller: '$ionicSideMenus',
        compile: function(element, attr) {
          attr.$set('class', (attr['class'] || '') + ' view');

          return function($scope) {
            $scope.$on('$destroy', function(){
              $document[0].body.classList.remove('menu-open');
            });

          };
        }
      };
    }]);


  /**
   * @ngdoc directive
   * @name ionSlideBox
   * @module ionic
   * @delegate ionic.service:$ionicSlideBoxDelegate
   * @restrict E
   * @description
   * The Slide Box is a multi-page container where each page can be swiped or dragged between:
   *
   * ![SlideBox](http://ionicframework.com.s3.amazonaws.com/docs/controllers/slideBox.gif)
   *
   * @usage
   * ```html
   * <ion-slide-box on-slide-changed="slideHasChanged($index)">
   *   <ion-slide>
   *     <div class="box blue"><h1>BLUE</h1></div>
   *   </ion-slide>
   *   <ion-slide>
   *     <div class="box yellow"><h1>YELLOW</h1></div>
   *   </ion-slide>
   *   <ion-slide>
   *     <div class="box pink"><h1>PINK</h1></div>
   *   </ion-slide>
   * </ion-slide-box>
   * ```
   *
   * @param {string=} delegate-handle The handle used to identify this slideBox
   * with {@link ionic.service:$ionicSlideBoxDelegate}.
   * @param {boolean=} does-continue Whether the slide box should loop.
   * @param {boolean=} auto-play Whether the slide box should automatically slide. Default true if does-continue is true.
   * @param {number=} slide-interval How many milliseconds to wait to change slides (if does-continue is true). Defaults to 4000.
   * @param {boolean=} show-pager Whether a pager should be shown for this slide box.
   * @param {expression=} pager-click Expression to call when a pager is clicked (if show-pager is true). Is passed the 'index' variable.
   * @param {expression=} on-slide-changed Expression called whenever the slide is changed.  Is passed an '$index' variable.
   * @param {expression=} active-slide Model to bind the current slide to.
   */
  IonicModule
    .directive('ionSlideBox', [
      '$timeout',
      '$compile',
      '$ionicSlideBoxDelegate',
      function($timeout, $compile, $ionicSlideBoxDelegate) {
        return {
          restrict: 'E',
          replace: true,
          transclude: true,
          scope: {
            autoPlay: '=',
            doesContinue: '@',
            slideInterval: '@',
            showPager: '@',
            pagerClick: '&',
            disableScroll: '@',
            onSlideChanged: '&',
            activeSlide: '=?'
          },
          controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {
            var _this = this;

            var continuous = $scope.$eval($scope.doesContinue) === true;
            var shouldAutoPlay = isDefined($attrs.autoPlay) ? !!$scope.autoPlay : false;
            var slideInterval = shouldAutoPlay ? $scope.$eval($scope.slideInterval) || 4000 : 0;

            var slider = new ionic.views.Slider({
              el: $element[0],
              auto: slideInterval,
              continuous: continuous,
              startSlide: $scope.activeSlide,
              slidesChanged: function() {
                $scope.currentSlide = slider.currentIndex();

                // Try to trigger a digest
                $timeout(function() {});
              },
              callback: function(slideIndex) {
                $scope.currentSlide = slideIndex;
                $scope.onSlideChanged({ index: $scope.currentSlide, $index: $scope.currentSlide});
                $scope.$parent.$broadcast('slideBox.slideChanged', slideIndex);
                $scope.activeSlide = slideIndex;
                // Try to trigger a digest
                $timeout(function() {});
              }
            });

            slider.enableSlide($scope.$eval($attrs.disableScroll) !== true);

            $scope.$watch('activeSlide', function(nv) {
              if(angular.isDefined(nv)){
                slider.slide(nv);
              }
            });

            $scope.$on('slideBox.nextSlide', function() {
              slider.next();
            });

            $scope.$on('slideBox.prevSlide', function() {
              slider.prev();
            });

            $scope.$on('slideBox.setSlide', function(e, index) {
              slider.slide(index);
            });

            //Exposed for testing
            this.__slider = slider;

            var deregisterInstance = $ionicSlideBoxDelegate._registerInstance(slider, $attrs.delegateHandle);
            $scope.$on('$destroy', deregisterInstance);

            this.slidesCount = function() {
              return slider.slidesCount();
            };

            this.onPagerClick = function(index) {
              void 0;
              $scope.pagerClick({index: index});
            };

            $timeout(function() {
              slider.load();
            });
          }],
          template: '<div class="slider">' +
            '<div class="slider-slides" ng-transclude>' +
            '</div>' +
            '</div>',

          link: function($scope, $element, $attr, slideBoxCtrl) {
            // If the pager should show, append it to the slide box
            if($scope.$eval($scope.showPager) !== false) {
              var childScope = $scope.$new();
              var pager = jqLite('<ion-pager></ion-pager>');
              $element.append(pager);
              $compile(pager)(childScope);
            }
          }
        };
      }])
    .directive('ionSlide', function() {
      return {
        restrict: 'E',
        require: '^ionSlideBox',
        compile: function(element, attr) {
          element.addClass('slider-slide');
          return function($scope, $element, $attr) {
          };
        },
      };
    })

    .directive('ionPager', function() {
      return {
        restrict: 'E',
        replace: true,
        require: '^ionSlideBox',
        template: '<div class="slider-pager"><span class="slider-pager-page" ng-repeat="slide in numSlides() track by $index" ng-class="{active: $index == currentSlide}" ng-click="pagerClick($index)"><i class="icon ion-record"></i></span></div>',
        link: function($scope, $element, $attr, slideBox) {
          var selectPage = function(index) {
            var children = $element[0].children;
            var length = children.length;
            for(var i = 0; i < length; i++) {
              if(i == index) {
                children[i].classList.add('active');
              } else {
                children[i].classList.remove('active');
              }
            }
          };

          $scope.pagerClick = function(index) {
            slideBox.onPagerClick(index);
          };

          $scope.numSlides = function() {
            return new Array(slideBox.slidesCount());
          };

          $scope.$watch('currentSlide', function(v) {
            selectPage(v);
          });
        }
      };

    });

  IonicModule.constant('$ionicTabConfig', {
    type: ''
  });

  /**
   * @ngdoc directive
   * @name ionTab
   * @module ionic
   * @restrict E
   * @parent ionic.directive:ionTabs
   *
   * @description
   * Contains a tab's content.  The content only exists while the given tab is selected.
   *
   * Each ionTab has its own view history.
   *
   * @usage
   * ```html
   * <ion-tab
   *   title="Tab!"
   *   icon="my-icon"
   *   href="#/tab/tab-link"
   *   on-select="onTabSelected()"
   *   on-deselect="onTabDeselected()">
   * </ion-tab>
   * ```
   * For a complete, working tab bar example, see the {@link ionic.directive:ionTabs} documentation.
   *
   * @param {string} title The title of the tab.
   * @param {string=} href The link that this tab will navigate to when tapped.
   * @param {string=} icon The icon of the tab. If given, this will become the default for icon-on and icon-off.
   * @param {string=} icon-on The icon of the tab while it is selected.
   * @param {string=} icon-off The icon of the tab while it is not selected.
   * @param {expression=} badge The badge to put on this tab (usually a number).
   * @param {expression=} badge-style The style of badge to put on this tab (eg tabs-positive).
   * @param {expression=} on-select Called when this tab is selected.
   * @param {expression=} on-deselect Called when this tab is deselected.
   * @param {expression=} ng-click By default, the tab will be selected on click. If ngClick is set, it will not.  You can explicitly switch tabs using {@link ionic.service:$ionicTabsDelegate#select $ionicTabsDelegate.select()}.
   */
  IonicModule
    .directive('ionTab', [
      '$rootScope',
      '$animate',
      '$ionicBind',
      '$compile',
      function($rootScope, $animate, $ionicBind, $compile) {

        //Returns ' key="value"' if value exists
        function attrStr(k,v) {
          return angular.isDefined(v) ? ' ' + k + '="' + v + '"' : '';
        }
        return {
          restrict: 'E',
          require: ['^ionTabs', 'ionTab'],
          replace: true,
          controller: '$ionicTab',
          scope: true,
          compile: function(element, attr) {

            //We create the tabNavTemplate in the compile phase so that the
            //attributes we pass down won't be interpolated yet - we want
            //to pass down the 'raw' versions of the attributes
            var tabNavTemplate = '<ion-tab-nav' +
              attrStr('ng-click', attr.ngClick) +
              attrStr('title', attr.title) +
              attrStr('icon', attr.icon) +
              attrStr('icon-on', attr.iconOn) +
              attrStr('icon-off', attr.iconOff) +
              attrStr('badge', attr.badge) +
              attrStr('badge-style', attr.badgeStyle) +
              attrStr('hidden', attr.hidden) +
              attrStr('class', attr['class']) +
              '></ion-tab-nav>';

            //Remove the contents of the element so we can compile them later, if tab is selected
            //We don't use regular transclusion because it breaks element inheritance
            var tabContent = jqLite('<div class="pane">')
              .append( element.contents().remove() );

            return function link($scope, $element, $attr, ctrls) {
              var childScope;
              var childElement;
              var tabsCtrl = ctrls[0];
              var tabCtrl = ctrls[1];

              var navView = tabContent[0].querySelector('ion-nav-view') ||
                tabContent[0].querySelector('data-ion-nav-view');
              var navViewName = navView && navView.getAttribute('name');

              $ionicBind($scope, $attr, {
                animate: '=',
                onSelect: '&',
                onDeselect: '&',
                title: '@',
                uiSref: '@',
                href: '@',
              });

              tabsCtrl.add($scope);
              $scope.$on('$destroy', function() {
                tabsCtrl.remove($scope);
                tabNavElement.isolateScope().$destroy();
                tabNavElement.remove();
              });

              //Remove title attribute so browser-tooltip does not apear
              $element[0].removeAttribute('title');

              if (navViewName) {
                tabCtrl.navViewName = navViewName;
              }
              $scope.$on('$stateChangeSuccess', selectIfMatchesState);
              selectIfMatchesState();
              function selectIfMatchesState() {
                if (tabCtrl.tabMatchesState()) {
                  tabsCtrl.select($scope);
                }
              }

              var tabNavElement = jqLite(tabNavTemplate);
              tabNavElement.data('$ionTabsController', tabsCtrl);
              tabNavElement.data('$ionTabController', tabCtrl);
              tabsCtrl.$tabsElement.append($compile(tabNavElement)($scope));

              $scope.$watch('$tabSelected', function(value) {
                childScope && childScope.$destroy();
                childScope = null;
                childElement && $animate.leave(childElement);
                childElement = null;
                if (value) {
                  childScope = $scope.$new();
                  childElement = tabContent.clone();
                  $animate.enter(childElement, tabsCtrl.$element);
                  $compile(childElement)(childScope);
                }
              });

            };
          }
        };
      }]);

  IonicModule
    .directive('ionTabNav', [function() {
      return {
        restrict: 'E',
        replace: true,
        require: ['^ionTabs', '^ionTab'],
        template:
          '<a ng-class="{\'tab-item-active\': isTabActive(), \'has-badge\':badge, \'tab-hidden\':isHidden()}" ' +
          ' class="tab-item">' +
          '<span class="badge {{badgeStyle}}" ng-if="badge">{{badge}}</span>' +
          '<i class="icon {{getIconOn()}}" ng-if="getIconOn() && isTabActive()"></i>' +
          '<i class="icon {{getIconOff()}}" ng-if="getIconOff() && !isTabActive()"></i>' +
          '<span class="tab-title" ng-bind-html="title"></span>' +
          '</a>',
        scope: {
          title: '@',
          icon: '@',
          iconOn: '@',
          iconOff: '@',
          badge: '=',
          hidden: '@',
          badgeStyle: '@',
          'class': '@'
        },
        compile: function(element, attr, transclude) {
          return function link($scope, $element, $attrs, ctrls) {
            var tabsCtrl = ctrls[0],
              tabCtrl = ctrls[1];

            //Remove title attribute so browser-tooltip does not apear
            $element[0].removeAttribute('title');

            $scope.selectTab = function(e) {
              e.preventDefault();
              tabsCtrl.select(tabCtrl.$scope, true);
            };
            if (!$attrs.ngClick) {
              $element.on('click', function(event) {
                $scope.$apply(function() {
                  $scope.selectTab(event);
                });
              });
            }

            $scope.isHidden = function() {
              if($attrs.hidden === 'true' || $attrs.hidden === true)return true;
              return false;
            };

            $scope.getIconOn = function() {
              return $scope.iconOn || $scope.icon;
            };
            $scope.getIconOff = function() {
              return $scope.iconOff || $scope.icon;
            };

            $scope.isTabActive = function() {
              return tabsCtrl.selectedTab() === tabCtrl.$scope;
            };
          };
        }
      };
    }]);

  IonicModule.constant('$ionicTabsConfig', {
    position: '',
    type: ''
  });

  /**
   * @ngdoc directive
   * @name ionTabs
   * @module ionic
   * @delegate ionic.service:$ionicTabsDelegate
   * @restrict E
   * @codepen KbrzJ
   *
   * @description
   * Powers a multi-tabbed interface with a Tab Bar and a set of "pages" that can be tabbed
   * through.
   *
   * Assign any [tabs class](/docs/components#tabs) or
   * [animation class](/docs/components#animation) to the element to define
   * its look and feel.
   *
   * See the {@link ionic.directive:ionTab} directive's documentation for more details on
   * individual tabs.
   *
   * Note: do not place ion-tabs inside of an ion-content element; it has been known to cause a
   * certain CSS bug.
   *
   * @usage
   * ```html
   * <ion-tabs class="tabs-positive tabs-icon-only">
   *
   *   <ion-tab title="Home" icon-on="ion-ios7-filing" icon-off="ion-ios7-filing-outline">
   *     <!-- Tab 1 content -->
   *   </ion-tab>
   *
   *   <ion-tab title="About" icon-on="ion-ios7-clock" icon-off="ion-ios7-clock-outline">
   *     <!-- Tab 2 content -->
   *   </ion-tab>
   *
   *   <ion-tab title="Settings" icon-on="ion-ios7-gear" icon-off="ion-ios7-gear-outline">
   *     <!-- Tab 3 content -->
   *   </ion-tab>
   *
   * </ion-tabs>
   * ```
   *
   * @param {string=} delegate-handle The handle used to identify these tabs
   * with {@link ionic.service:$ionicTabsDelegate}.
   */

  IonicModule
    .directive('ionTabs', [
      '$ionicViewService',
      '$ionicTabsDelegate',
      '$ionicTabsConfig',
      function($ionicViewService, $ionicTabsDelegate, $ionicTabsConfig) {
        return {
          restrict: 'E',
          scope: true,
          controller: '$ionicTabs',
          compile: function(element, attr) {
            element.addClass('view');
            //We cannot use regular transclude here because it breaks element.data()
            //inheritance on compile
            var innerElement = jqLite('<div class="tabs"></div>');
            innerElement.append(element.contents());
            element.append(innerElement);
            element.addClass($ionicTabsConfig.position);
            element.addClass($ionicTabsConfig.type);

            return { pre: prelink };
            function prelink($scope, $element, $attr, tabsCtrl) {
              var deregisterInstance = $ionicTabsDelegate._registerInstance(
                tabsCtrl, $attr.delegateHandle
              );

              $scope.$on('$destroy', deregisterInstance);

              tabsCtrl.$scope = $scope;
              tabsCtrl.$element = $element;
              tabsCtrl.$tabsElement = jqLite($element[0].querySelector('.tabs'));

              var el = $element[0];
              $scope.$watch(function() { return el.className; }, function(value) {
                var isTabsTop = value.indexOf('tabs-top') !== -1;
                var isHidden = value.indexOf('tabs-item-hide') !== -1;
                $scope.$hasTabs = !isTabsTop && !isHidden;
                $scope.$hasTabsTop = isTabsTop && !isHidden;
              });
              $scope.$on('$destroy', function() {
                delete $scope.$hasTabs;
                delete $scope.$hasTabsTop;
              });
            }
          }
        };
      }]);

  /**
   * @ngdoc directive
   * @name ionToggle
   * @module ionic
   * @codepen tfAzj
   * @restrict E
   *
   * @description
   * A toggle is an animated switch which binds a given model to a boolean.
   *
   * Allows dragging of the switch's nub.
   *
   * The toggle behaves like any [AngularJS checkbox](http://docs.angularjs.org/api/ng/input/input[checkbox]) otherwise.
   *
   * @param toggle-class {string=} Sets the CSS class on the inner `label.toggle` element created by the directive.
   *
   * @usage
   * Below is an example of a toggle directive which is wired up to the `airplaneMode` model
   * and has the `toggle-calm` CSS class assigned to the inner element.
   *
   * ```html
   * <ion-toggle ng-model="airplaneMode" toggle-class="toggle-calm">Airplane Mode</ion-toggle>
   * ```
   */
  IonicModule
    .directive('ionToggle', [
      '$ionicGesture',
      '$timeout',
      function($ionicGesture, $timeout) {

        return {
          restrict: 'E',
          replace: true,
          require: '?ngModel',
          transclude: true,
          template:
            '<div class="item item-toggle">' +
            '<div ng-transclude></div>' +
            '<label class="toggle">' +
            '<input type="checkbox">' +
            '<div class="track">' +
            '<div class="handle"></div>' +
            '</div>' +
            '</label>' +
            '</div>',

          compile: function(element, attr) {
            var input = element.find('input');
            forEach({
              'name': attr.name,
              'ng-value': attr.ngValue,
              'ng-model': attr.ngModel,
              'ng-checked': attr.ngChecked,
              'ng-disabled': attr.ngDisabled,
              'ng-true-value': attr.ngTrueValue,
              'ng-false-value': attr.ngFalseValue,
              'ng-change': attr.ngChange
            }, function(value, name) {
              if (isDefined(value)) {
                input.attr(name, value);
              }
            });

            if(attr.toggleClass) {
              element[0].getElementsByTagName('label')[0].classList.add(attr.toggleClass);
            }

            return function($scope, $element, $attr) {
              var el, checkbox, track, handle;

              el = $element[0].getElementsByTagName('label')[0];
              checkbox = el.children[0];
              track = el.children[1];
              handle = track.children[0];

              var ngModelController = jqLite(checkbox).controller('ngModel');

              $scope.toggle = new ionic.views.Toggle({
                el: el,
                track: track,
                checkbox: checkbox,
                handle: handle,
                onChange: function() {
                  if(checkbox.checked) {
                    ngModelController.$setViewValue(true);
                  } else {
                    ngModelController.$setViewValue(false);
                  }
                  $scope.$apply();
                }
              });

              $scope.$on('$destroy', function() {
                $scope.toggle.destroy();
              });
            };
          }

        };
      }]);

  /**
   * @ngdoc directive
   * @name ionView
   * @module ionic
   * @restrict E
   * @parent ionNavView
   *
   * @description
   * A container for content, used to tell a parent {@link ionic.directive:ionNavBar}
   * about the current view.
   *
   * @usage
   * Below is an example where our page will load with a navbar containing "My Page" as the title.
   *
   * ```html
   * <ion-nav-bar></ion-nav-bar>
   * <ion-nav-view class="slide-left-right">
   *   <ion-view title="My Page">
   *     <ion-content>
   *       Hello!
   *     </ion-content>
   *   </ion-view>
   * </ion-nav-view>
   * ```
   *
   * @param {string=} title The title to display on the parent {@link ionic.directive:ionNavBar}.
   * @param {boolean=} hide-back-button Whether to hide the back button on the parent
   * {@link ionic.directive:ionNavBar} by default.
   * @param {boolean=} hide-nav-bar Whether to hide the parent
   * {@link ionic.directive:ionNavBar} by default.
   */
  IonicModule
    .directive('ionView', ['$ionicViewService', '$rootScope', '$animate',
      function( $ionicViewService,   $rootScope,   $animate) {
        return {
          restrict: 'EA',
          priority: 1000,
          require: ['^?ionNavBar', '^?ionModal'],
          compile: function(tElement, tAttrs, transclude) {
            tElement.addClass('pane');
            tElement[0].removeAttribute('title');

            return function link($scope, $element, $attr, ctrls) {
              var navBarCtrl = ctrls[0];
              var modalCtrl = ctrls[1];

              //Don't use the ionView if we're inside a modal or there's no navbar
              if (!navBarCtrl || modalCtrl) {
                return;
              }

              if (angular.isDefined($attr.title)) {

                var initialTitle = $attr.title;
                navBarCtrl.changeTitle(initialTitle, $scope.$navDirection);

                // watch for changes in the title, don't set initial value as changeTitle does that
                $attr.$observe('title', function(val, oldVal) {
                  navBarCtrl.setTitle(val);
                });
              }

              var hideBackAttr = angular.isDefined($attr.hideBackButton) ?
                $attr.hideBackButton :
                'false';
              $scope.$watch(hideBackAttr, function(value) {
                // Should we hide a back button when this tab is shown
                navBarCtrl.showBackButton(!value);
              });

              var hideNavAttr = angular.isDefined($attr.hideNavBar) ?
                $attr.hideNavBar :
                'false';
              $scope.$watch(hideNavAttr, function(value) {
                // Should the nav bar be hidden for this view or not?
                navBarCtrl.showBar(!value);
              });

            };
          }
        };
      }]);

})();",
                "body": "/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/*!
 * Copyright 2014 Drifty Co.
 * http://drifty.com/
 *
 * Ionic, v1.0.0-beta.11
 * A powerful HTML5 mobile app framework.
 * http://ionicframework.com/
 *
 * By @maxlynch, @benjsperry, @adamdbradley <3
 *
 * Licensed under the MIT license. Please see LICENSE for more information.
 *
 */

(function() {

// Create namespaces
//
  window.ionic = {
    controllers: {},
    views: {},
    version: '1.0.0-beta.11'
  };

  (function(window, document, ionic) {

    var readyCallbacks = [];
    var isDomReady = false;

    function domReady() {
      isDomReady = true;
      for(var x=0; x<readyCallbacks.length; x++) {
        ionic.requestAnimationFrame(readyCallbacks[x]);
      }
      readyCallbacks = [];
      document.removeEventListener('DOMContentLoaded', domReady);
    }
    document.addEventListener('DOMContentLoaded', domReady);

    // From the man himself, Mr. Paul Irish.
    // The requestAnimationFrame polyfill
    // Put it on window just to preserve its context
    // without having to use .call
    window._rAF = (function(){
      return  window.requestAnimationFrame       ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame    ||
        function( callback ){
          window.setTimeout(callback, 16);
        };
    })();

    var cancelAnimationFrame = window.cancelAnimationFrame ||
      window.webkitCancelAnimationFrame ||
      window.mozCancelAnimationFrame ||
      window.webkitCancelRequestAnimationFrame;

    /**
     * @ngdoc utility
     * @name ionic.DomUtil
     * @module ionic
     */
    ionic.DomUtil = {
      //Call with proper context
      /**
       * @ngdoc method
       * @name ionic.DomUtil#requestAnimationFrame
       * @alias ionic.requestAnimationFrame
       * @description Calls [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame), or a polyfill if not available.
       * @param {function} callback The function to call when the next frame
       * happens.
       */
      requestAnimationFrame: function(cb) {
        return window._rAF(cb);
      },

      cancelAnimationFrame: function(requestId) {
        cancelAnimationFrame(requestId);
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#animationFrameThrottle
       * @alias ionic.animationFrameThrottle
       * @description
       * When given a callback, if that callback is called 100 times between
       * animation frames, adding Throttle will make it only run the last of
       * the 100 calls.
       *
       * @param {function} callback a function which will be throttled to
       * requestAnimationFrame
       * @returns {function} A function which will then call the passed in callback.
       * The passed in callback will receive the context the returned function is
       * called with.
       */
      animationFrameThrottle: function(cb) {
        var args, isQueued, context;
        return function() {
          args = arguments;
          context = this;
          if (!isQueued) {
            isQueued = true;
            ionic.requestAnimationFrame(function() {
              cb.apply(context, args);
              isQueued = false;
            });
          }
        };
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#getPositionInParent
       * @description
       * Find an element's scroll offset within its container.
       * @param {DOMElement} element The element to find the offset of.
       * @returns {object} A position object with the following properties:
       *   - `{number}` `left` The left offset of the element.
       *   - `{number}` `top` The top offset of the element.
       */
      getPositionInParent: function(el) {
        return {
          left: el.offsetLeft,
          top: el.offsetTop
        };
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#ready
       * @description
       * Call a function when the DOM is ready, or if it is already ready
       * call the function immediately.
       * @param {function} callback The function to be called.
       */
      ready: function(cb) {
        if(isDomReady || document.readyState === "complete") {
          ionic.requestAnimationFrame(cb);
        } else {
          readyCallbacks.push(cb);
        }
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#getTextBounds
       * @description
       * Get a rect representing the bounds of the given textNode.
       * @param {DOMElement} textNode The textNode to find the bounds of.
       * @returns {object} An object representing the bounds of the node. Properties:
       *   - `{number}` `left` The left positton of the textNode.
       *   - `{number}` `right` The right positton of the textNode.
       *   - `{number}` `top` The top positton of the textNode.
       *   - `{number}` `bottom` The bottom position of the textNode.
       *   - `{number}` `width` The width of the textNode.
       *   - `{number}` `height` The height of the textNode.
       */
      getTextBounds: function(textNode) {
        if(document.createRange) {
          var range = document.createRange();
          range.selectNodeContents(textNode);
          if(range.getBoundingClientRect) {
            var rect = range.getBoundingClientRect();
            if(rect) {
              var sx = window.scrollX;
              var sy = window.scrollY;

              return {
                top: rect.top + sy,
                left: rect.left + sx,
                right: rect.left + sx + rect.width,
                bottom: rect.top + sy + rect.height,
                width: rect.width,
                height: rect.height
              };
            }
          }
        }
        return null;
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#getChildIndex
       * @description
       * Get the first index of a child node within the given element of the
       * specified type.
       * @param {DOMElement} element The element to find the index of.
       * @param {string} type The nodeName to match children of element against.
       * @returns {number} The index, or -1, of a child with nodeName matching type.
       */
      getChildIndex: function(element, type) {
        if(type) {
          var ch = element.parentNode.children;
          var c;
          for(var i = 0, k = 0, j = ch.length; i < j; i++) {
            c = ch[i];
            if(c.nodeName && c.nodeName.toLowerCase() == type) {
              if(c == element) {
                return k;
              }
              k++;
            }
          }
        }
        return Array.prototype.slice.call(element.parentNode.children).indexOf(element);
      },

      /**
       * @private
       */
      swapNodes: function(src, dest) {
        dest.parentNode.insertBefore(src, dest);
      },

      /**
       * @private
       */
      centerElementByMargin: function(el) {
        el.style.marginLeft = (-el.offsetWidth) / 2 + 'px';
        el.style.marginTop = (-el.offsetHeight) / 2 + 'px';
      },
      //Center twice, after raf, to fix a bug with ios and showing elements
      //that have just been attached to the DOM.
      centerElementByMarginTwice: function(el) {
        ionic.requestAnimationFrame(function() {
          ionic.DomUtil.centerElementByMargin(el);
          setTimeout(function() {
            ionic.DomUtil.centerElementByMargin(el);
            setTimeout(function() {
              ionic.DomUtil.centerElementByMargin(el);
            });
          });
        });
      },

      elementIsDescendant: function(el, parent, stopAt) {
        var current = el;
        do {
          if (current === parent) return true;
          current = current.parentNode;
        } while (current && current !== stopAt);
        return false;
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#getParentWithClass
       * @param {DOMElement} element
       * @param {string} className
       * @returns {DOMElement} The closest parent of element matching the
       * className, or null.
       */
      getParentWithClass: function(e, className, depth) {
        depth = depth || 10;
        while(e.parentNode && depth--) {
          if(e.parentNode.classList && e.parentNode.classList.contains(className)) {
            return e.parentNode;
          }
          e = e.parentNode;
        }
        return null;
      },
      /**
       * @ngdoc method
       * @name ionic.DomUtil#getParentOrSelfWithClass
       * @param {DOMElement} element
       * @param {string} className
       * @returns {DOMElement} The closest parent or self matching the
       * className, or null.
       */
      getParentOrSelfWithClass: function(e, className, depth) {
        depth = depth || 10;
        while(e && depth--) {
          if(e.classList && e.classList.contains(className)) {
            return e;
          }
          e = e.parentNode;
        }
        return null;
      },

      /**
       * @ngdoc method
       * @name ionic.DomUtil#rectContains
       * @param {number} x
       * @param {number} y
       * @param {number} x1
       * @param {number} y1
       * @param {number} x2
       * @param {number} y2
       * @returns {boolean} Whether {x,y} fits within the rectangle defined by
       * {x1,y1,x2,y2}.
       */
      rectContains: function(x, y, x1, y1, x2, y2) {
        if(x < x1 || x > x2) return false;
        if(y < y1 || y > y2) return false;
        return true;
      }
    };

    //Shortcuts
    ionic.requestAnimationFrame = ionic.DomUtil.requestAnimationFrame;
    ionic.cancelAnimationFrame = ionic.DomUtil.cancelAnimationFrame;
    ionic.animationFrameThrottle = ionic.DomUtil.animationFrameThrottle;
  })(window, document, ionic);

  /**
   * ion-events.js
   *
   * Author: Max Lynch <max@drifty.com>
   *
   * Framework events handles various mobile browser events, and
   * detects special events like tap/swipe/etc. and emits them
   * as custom events that can be used in an app.
   *
   * Portions lovingly adapted from github.com/maker/ratchet and github.com/alexgibson/tap.js - thanks guys!
   */

  (function(ionic) {

    // Custom event polyfill
    ionic.CustomEvent = (function() {
      if( typeof window.CustomEvent === 'function' ) return CustomEvent;

      var customEvent = function(event, params) {
        var evt;
        params = params || {
          bubbles: false,
          cancelable: false,
          detail: undefined
        };
        try {
          evt = document.createEvent("CustomEvent");
          evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        } catch (error) {
          // fallback for browsers that don't support createEvent('CustomEvent')
          evt = document.createEvent("Event");
          for (var param in params) {
            evt[param] = params[param];
          }
          evt.initEvent(event, params.bubbles, params.cancelable);
        }
        return evt;
      };
      customEvent.prototype = window.Event.prototype;
      return customEvent;
    })();


    /**
     * @ngdoc utility
     * @name ionic.EventController
     * @module ionic
     */
    ionic.EventController = {
      VIRTUALIZED_EVENTS: ['tap', 'swipe', 'swiperight', 'swipeleft', 'drag', 'hold', 'release'],

      /**
       * @ngdoc method
       * @name ionic.EventController#trigger
       * @alias ionic.trigger
       * @param {string} eventType The event to trigger.
       * @param {object} data The data for the event. Hint: pass in
       * `{target: targetElement}`
       * @param {boolean=} bubbles Whether the event should bubble up the DOM.
       * @param {boolean=} cancelable Whether the event should be cancelable.
       */
      // Trigger a new event
      trigger: function(eventType, data, bubbles, cancelable) {
        var event = new ionic.CustomEvent(eventType, {
          detail: data,
          bubbles: !!bubbles,
          cancelable: !!cancelable
        });

        // Make sure to trigger the event on the given target, or dispatch it from
        // the window if we don't have an event target
        data && data.target && data.target.dispatchEvent && data.target.dispatchEvent(event) || window.dispatchEvent(event);
      },

      /**
       * @ngdoc method
       * @name ionic.EventController#on
       * @alias ionic.on
       * @description Listen to an event on an element.
       * @param {string} type The event to listen for.
       * @param {function} callback The listener to be called.
       * @param {DOMElement} element The element to listen for the event on.
       */
      on: function(type, callback, element) {
        var e = element || window;

        // Bind a gesture if it's a virtual event
        for(var i = 0, j = this.VIRTUALIZED_EVENTS.length; i < j; i++) {
          if(type == this.VIRTUALIZED_EVENTS[i]) {
            var gesture = new ionic.Gesture(element);
            gesture.on(type, callback);
            return gesture;
          }
        }

        // Otherwise bind a normal event
        e.addEventListener(type, callback);
      },

      /**
       * @ngdoc method
       * @name ionic.EventController#off
       * @alias ionic.off
       * @description Remove an event listener.
       * @param {string} type
       * @param {function} callback
       * @param {DOMElement} element
       */
      off: function(type, callback, element) {
        element.removeEventListener(type, callback);
      },

      /**
       * @ngdoc method
       * @name ionic.EventController#onGesture
       * @alias ionic.onGesture
       * @description Add an event listener for a gesture on an element.
       *
       * Available eventTypes (from [hammer.js](http://eightmedia.github.io/hammer.js/)):
       *
       * `hold`, `tap`, `doubletap`, `drag`, `dragstart`, `dragend`, `dragup`, `dragdown`, <br/>
       * `dragleft`, `dragright`, `swipe`, `swipeup`, `swipedown`, `swipeleft`, `swiperight`, <br/>
       * `transform`, `transformstart`, `transformend`, `rotate`, `pinch`, `pinchin`, `pinchout`, </br>
       * `touch`, `release`
       *
       * @param {string} eventType The gesture event to listen for.
       * @param {function(e)} callback The function to call when the gesture
       * happens.
       * @param {DOMElement} element The angular element to listen for the event on.
       */
      onGesture: function(type, callback, element) {
        var gesture = new ionic.Gesture(element);
        gesture.on(type, callback);
        return gesture;
      },

      /**
       * @ngdoc method
       * @name ionic.EventController#offGesture
       * @alias ionic.offGesture
       * @description Remove an event listener for a gesture on an element.
       * @param {string} eventType The gesture event.
       * @param {function(e)} callback The listener that was added earlier.
       * @param {DOMElement} element The element the listener was added on.
       */
      offGesture: function(gesture, type, callback) {
        gesture.off(type, callback);
      },

      handlePopState: function(event) {}
    };


    // Map some convenient top-level functions for event handling
    ionic.on = function() { ionic.EventController.on.apply(ionic.EventController, arguments); };
    ionic.off = function() { ionic.EventController.off.apply(ionic.EventController, arguments); };
    ionic.trigger = ionic.EventController.trigger;//function() { ionic.EventController.trigger.apply(ionic.EventController.trigger, arguments); };
    ionic.onGesture = function() { return ionic.EventController.onGesture.apply(ionic.EventController.onGesture, arguments); };
    ionic.offGesture = function() { return ionic.EventController.offGesture.apply(ionic.EventController.offGesture, arguments); };

  })(window.ionic);

  /**
   * Simple gesture controllers with some common gestures that emit
   * gesture events.
   *
   * Ported from github.com/EightMedia/hammer.js Gestures - thanks!
   */
  (function(ionic) {

    /**
     * ionic.Gestures
     * use this to create instances
     * @param   {HTMLElement}   element
     * @param   {Object}        options
     * @returns {ionic.Gestures.Instance}
     * @constructor
     */
    ionic.Gesture = function(element, options) {
      return new ionic.Gestures.Instance(element, options || {});
    };

    ionic.Gestures = {};

    // default settings
    ionic.Gestures.defaults = {
      // add css to the element to prevent the browser from doing
      // its native behavior. this doesnt prevent the scrolling,
      // but cancels the contextmenu, tap highlighting etc
      // set to false to disable this
      stop_browser_behavior: 'disable-user-behavior'
    };

    // detect touchevents
    ionic.Gestures.HAS_POINTEREVENTS = window.navigator.pointerEnabled || window.navigator.msPointerEnabled;
    ionic.Gestures.HAS_TOUCHEVENTS = ('ontouchstart' in window);

    // dont use mouseevents on mobile devices
    ionic.Gestures.MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android|silk/i;
    ionic.Gestures.NO_MOUSEEVENTS = ionic.Gestures.HAS_TOUCHEVENTS && window.navigator.userAgent.match(ionic.Gestures.MOBILE_REGEX);

    // eventtypes per touchevent (start, move, end)
    // are filled by ionic.Gestures.event.determineEventTypes on setup
    ionic.Gestures.EVENT_TYPES = {};

    // direction defines
    ionic.Gestures.DIRECTION_DOWN = 'down';
    ionic.Gestures.DIRECTION_LEFT = 'left';
    ionic.Gestures.DIRECTION_UP = 'up';
    ionic.Gestures.DIRECTION_RIGHT = 'right';

    // pointer type
    ionic.Gestures.POINTER_MOUSE = 'mouse';
    ionic.Gestures.POINTER_TOUCH = 'touch';
    ionic.Gestures.POINTER_PEN = 'pen';

    // touch event defines
    ionic.Gestures.EVENT_START = 'start';
    ionic.Gestures.EVENT_MOVE = 'move';
    ionic.Gestures.EVENT_END = 'end';

    // hammer document where the base events are added at
    ionic.Gestures.DOCUMENT = window.document;

    // plugins namespace
    ionic.Gestures.plugins = {};

    // if the window events are set...
    ionic.Gestures.READY = false;

    /**
     * setup events to detect gestures on the document
     */
    function setup() {
      if(ionic.Gestures.READY) {
        return;
      }

      // find what eventtypes we add listeners to
      ionic.Gestures.event.determineEventTypes();

      // Register all gestures inside ionic.Gestures.gestures
      for(var name in ionic.Gestures.gestures) {
        if(ionic.Gestures.gestures.hasOwnProperty(name)) {
          ionic.Gestures.detection.register(ionic.Gestures.gestures[name]);
        }
      }

      // Add touch events on the document
      ionic.Gestures.event.onTouch(ionic.Gestures.DOCUMENT, ionic.Gestures.EVENT_MOVE, ionic.Gestures.detection.detect);
      ionic.Gestures.event.onTouch(ionic.Gestures.DOCUMENT, ionic.Gestures.EVENT_END, ionic.Gestures.detection.detect);

      // ionic.Gestures is ready...!
      ionic.Gestures.READY = true;
    }

    /**
     * create new hammer instance
     * all methods should return the instance itself, so it is chainable.
     * @param   {HTMLElement}       element
     * @param   {Object}            [options={}]
     * @returns {ionic.Gestures.Instance}
     * @name Gesture.Instance
     * @constructor
     */
    ionic.Gestures.Instance = function(element, options) {
      var self = this;

      // A null element was passed into the instance, which means
      // whatever lookup was done to find this element failed to find it
      // so we can't listen for events on it.
      if(element === null) {
        void 0;
        return;
      }

      // setup ionic.GesturesJS window events and register all gestures
      // this also sets up the default options
      setup();

      this.element = element;

      // start/stop detection option
      this.enabled = true;

      // merge options
      this.options = ionic.Gestures.utils.extend(
        ionic.Gestures.utils.extend({}, ionic.Gestures.defaults),
          options || {});

      // add some css to the element to prevent the browser from doing its native behavoir
      if(this.options.stop_browser_behavior) {
        ionic.Gestures.utils.stopDefaultBrowserBehavior(this.element, this.options.stop_browser_behavior);
      }

      // start detection on touchstart
      ionic.Gestures.event.onTouch(element, ionic.Gestures.EVENT_START, function(ev) {
        if(self.enabled) {
          ionic.Gestures.detection.startDetect(self, ev);
        }
      });

      // return instance
      return this;
    };


    ionic.Gestures.Instance.prototype = {
      /**
       * bind events to the instance
       * @param   {String}      gesture
       * @param   {Function}    handler
       * @returns {ionic.Gestures.Instance}
       */
      on: function onEvent(gesture, handler){
        var gestures = gesture.split(' ');
        for(var t=0; t<gestures.length; t++) {
          this.element.addEventListener(gestures[t], handler, false);
        }
        return this;
      },


      /**
       * unbind events to the instance
       * @param   {String}      gesture
       * @param   {Function}    handler
       * @returns {ionic.Gestures.Instance}
       */
      off: function offEvent(gesture, handler){
        var gestures = gesture.split(' ');
        for(var t=0; t<gestures.length; t++) {
          this.element.removeEventListener(gestures[t], handler, false);
        }
        return this;
      },


      /**
       * trigger gesture event
       * @param   {String}      gesture
       * @param   {Object}      eventData
       * @returns {ionic.Gestures.Instance}
       */
      trigger: function triggerEvent(gesture, eventData){
        // create DOM event
        var event = ionic.Gestures.DOCUMENT.createEvent('Event');
        event.initEvent(gesture, true, true);
        event.gesture = eventData;

        // trigger on the target if it is in the instance element,
        // this is for event delegation tricks
        var element = this.element;
        if(ionic.Gestures.utils.hasParent(eventData.target, element)) {
          element = eventData.target;
        }

        element.dispatchEvent(event);
        return this;
      },


      /**
       * enable of disable hammer.js detection
       * @param   {Boolean}   state
       * @returns {ionic.Gestures.Instance}
       */
      enable: function enable(state) {
        this.enabled = state;
        return this;
      }
    };

    /**
     * this holds the last move event,
     * used to fix empty touchend issue
     * see the onTouch event for an explanation
     * type {Object}
     */
    var last_move_event = null;


    /**
     * when the mouse is hold down, this is true
     * type {Boolean}
     */
    var enable_detect = false;


    /**
     * when touch events have been fired, this is true
     * type {Boolean}
     */
    var touch_triggered = false;


    ionic.Gestures.event = {
      /**
       * simple addEventListener
       * @param   {HTMLElement}   element
       * @param   {String}        type
       * @param   {Function}      handler
       */
      bindDom: function(element, type, handler) {
        var types = type.split(' ');
        for(var t=0; t<types.length; t++) {
          element.addEventListener(types[t], handler, false);
        }
      },


      /**
       * touch events with mouse fallback
       * @param   {HTMLElement}   element
       * @param   {String}        eventType        like ionic.Gestures.EVENT_MOVE
       * @param   {Function}      handler
       */
      onTouch: function onTouch(element, eventType, handler) {
        var self = this;

        this.bindDom(element, ionic.Gestures.EVENT_TYPES[eventType], function bindDomOnTouch(ev) {
          var sourceEventType = ev.type.toLowerCase();

          // onmouseup, but when touchend has been fired we do nothing.
          // this is for touchdevices which also fire a mouseup on touchend
          if(sourceEventType.match(/mouse/) && touch_triggered) {
            return;
          }

          // mousebutton must be down or a touch event
          else if( sourceEventType.match(/touch/) ||   // touch events are always on screen
            sourceEventType.match(/pointerdown/) || // pointerevents touch
            (sourceEventType.match(/mouse/) && ev.which === 1)   // mouse is pressed
            ){
            enable_detect = true;
          }

          // mouse isn't pressed
          else if(sourceEventType.match(/mouse/) && ev.which !== 1) {
            enable_detect = false;
          }


          // we are in a touch event, set the touch triggered bool to true,
          // this for the conflicts that may occur on ios and android
          if(sourceEventType.match(/touch|pointer/)) {
            touch_triggered = true;
          }

          // count the total touches on the screen
          var count_touches = 0;

          // when touch has been triggered in this detection session
          // and we are now handling a mouse event, we stop that to prevent conflicts
          if(enable_detect) {
            // update pointerevent
            if(ionic.Gestures.HAS_POINTEREVENTS && eventType != ionic.Gestures.EVENT_END) {
              count_touches = ionic.Gestures.PointerEvent.updatePointer(eventType, ev);
            }
            // touch
            else if(sourceEventType.match(/touch/)) {
              count_touches = ev.touches.length;
            }
            // mouse
            else if(!touch_triggered) {
              count_touches = sourceEventType.match(/up/) ? 0 : 1;
            }

            // if we are in a end event, but when we remove one touch and
            // we still have enough, set eventType to move
            if(count_touches > 0 && eventType == ionic.Gestures.EVENT_END) {
              eventType = ionic.Gestures.EVENT_MOVE;
            }
            // no touches, force the end event
            else if(!count_touches) {
              eventType = ionic.Gestures.EVENT_END;
            }

            // store the last move event
            if(count_touches || last_move_event === null) {
              last_move_event = ev;
            }

            // trigger the handler
            handler.call(ionic.Gestures.detection, self.collectEventData(element, eventType, self.getTouchList(last_move_event, eventType), ev));

            // remove pointerevent from list
            if(ionic.Gestures.HAS_POINTEREVENTS && eventType == ionic.Gestures.EVENT_END) {
              count_touches = ionic.Gestures.PointerEvent.updatePointer(eventType, ev);
            }
          }

          //debug(sourceEventType +" "+ eventType);

          // on the end we reset everything
          if(!count_touches) {
            last_move_event = null;
            enable_detect = false;
            touch_triggered = false;
            ionic.Gestures.PointerEvent.reset();
          }
        });
      },


      /**
       * we have different events for each device/browser
       * determine what we need and set them in the ionic.Gestures.EVENT_TYPES constant
       */
      determineEventTypes: function determineEventTypes() {
        // determine the eventtype we want to set
        var types;

        // pointerEvents magic
        if(ionic.Gestures.HAS_POINTEREVENTS) {
          types = ionic.Gestures.PointerEvent.getEvents();
        }
        // on Android, iOS, blackberry, windows mobile we dont want any mouseevents
        else if(ionic.Gestures.NO_MOUSEEVENTS) {
          types = [
            'touchstart',
            'touchmove',
            'touchend touchcancel'];
        }
        // for non pointer events browsers and mixed browsers,
        // like chrome on windows8 touch laptop
        else {
          types = [
            'touchstart mousedown',
            'touchmove mousemove',
            'touchend touchcancel mouseup'];
        }

        ionic.Gestures.EVENT_TYPES[ionic.Gestures.EVENT_START]  = types[0];
        ionic.Gestures.EVENT_TYPES[ionic.Gestures.EVENT_MOVE]   = types[1];
        ionic.Gestures.EVENT_TYPES[ionic.Gestures.EVENT_END]    = types[2];
      },


      /**
       * create touchlist depending on the event
       * @param   {Object}    ev
       * @param   {String}    eventType   used by the fakemultitouch plugin
       */
      getTouchList: function getTouchList(ev/*, eventType*/) {
        // get the fake pointerEvent touchlist
        if(ionic.Gestures.HAS_POINTEREVENTS) {
          return ionic.Gestures.PointerEvent.getTouchList();
        }
        // get the touchlist
        else if(ev.touches) {
          return ev.touches;
        }
        // make fake touchlist from mouse position
        else {
          ev.identifier = 1;
          return [ev];
        }
      },


      /**
       * collect event data for ionic.Gestures js
       * @param   {HTMLElement}   element
       * @param   {String}        eventType        like ionic.Gestures.EVENT_MOVE
       * @param   {Object}        eventData
       */
      collectEventData: function collectEventData(element, eventType, touches, ev) {

        // find out pointerType
        var pointerType = ionic.Gestures.POINTER_TOUCH;
        if(ev.type.match(/mouse/) || ionic.Gestures.PointerEvent.matchType(ionic.Gestures.POINTER_MOUSE, ev)) {
          pointerType = ionic.Gestures.POINTER_MOUSE;
        }

        return {
          center      : ionic.Gestures.utils.getCenter(touches),
          timeStamp   : new Date().getTime(),
          target      : ev.target,
          touches     : touches,
          eventType   : eventType,
          pointerType : pointerType,
          srcEvent    : ev,

          /**
           * prevent the browser default actions
           * mostly used to disable scrolling of the browser
           */
          preventDefault: function() {
            if(this.srcEvent.preventManipulation) {
              this.srcEvent.preventManipulation();
            }

            if(this.srcEvent.preventDefault) {
              //this.srcEvent.preventDefault();
            }
          },

          /**
           * stop bubbling the event up to its parents
           */
          stopPropagation: function() {
            this.srcEvent.stopPropagation();
          },

          /**
           * immediately stop gesture detection
           * might be useful after a swipe was detected
           * @return {*}
           */
          stopDetect: function() {
            return ionic.Gestures.detection.stopDetect();
          }
        };
      }
    };

    ionic.Gestures.PointerEvent = {
      /**
       * holds all pointers
       * type {Object}
       */
      pointers: {},

      /**
       * get a list of pointers
       * @returns {Array}     touchlist
       */
      getTouchList: function() {
        var self = this;
        var touchlist = [];

        // we can use forEach since pointerEvents only is in IE10
        Object.keys(self.pointers).sort().forEach(function(id) {
          touchlist.push(self.pointers[id]);
        });
        return touchlist;
      },

      /**
       * update the position of a pointer
       * @param   {String}   type             ionic.Gestures.EVENT_END
       * @param   {Object}   pointerEvent
       */
      updatePointer: function(type, pointerEvent) {
        if(type == ionic.Gestures.EVENT_END) {
          this.pointers = {};
        }
        else {
          pointerEvent.identifier = pointerEvent.pointerId;
          this.pointers[pointerEvent.pointerId] = pointerEvent;
        }

        return Object.keys(this.pointers).length;
      },

      /**
       * check if ev matches pointertype
       * @param   {String}        pointerType     ionic.Gestures.POINTER_MOUSE
       * @param   {PointerEvent}  ev
       */
      matchType: function(pointerType, ev) {
        if(!ev.pointerType) {
          return false;
        }

        var types = {};
        types[ionic.Gestures.POINTER_MOUSE] = (ev.pointerType == ev.MSPOINTER_TYPE_MOUSE || ev.pointerType == ionic.Gestures.POINTER_MOUSE);
        types[ionic.Gestures.POINTER_TOUCH] = (ev.pointerType == ev.MSPOINTER_TYPE_TOUCH || ev.pointerType == ionic.Gestures.POINTER_TOUCH);
        types[ionic.Gestures.POINTER_PEN] = (ev.pointerType == ev.MSPOINTER_TYPE_PEN || ev.pointerType == ionic.Gestures.POINTER_PEN);
        return types[pointerType];
      },


      /**
       * get events
       */
      getEvents: function() {
        return [
          'pointerdown MSPointerDown',
          'pointermove MSPointerMove',
          'pointerup pointercancel MSPointerUp MSPointerCancel'
        ];
      },

      /**
       * reset the list
       */
      reset: function() {
        this.pointers = {};
      }
    };


    ionic.Gestures.utils = {
      /**
       * extend method,
       * also used for cloning when dest is an empty object
       * @param   {Object}    dest
       * @param   {Object}    src
       * @param	{Boolean}	merge		do a merge
       * @returns {Object}    dest
       */
      extend: function extend(dest, src, merge) {
        for (var key in src) {
          if(dest[key] !== undefined && merge) {
            continue;
          }
          dest[key] = src[key];
        }
        return dest;
      },


      /**
       * find if a node is in the given parent
       * used for event delegation tricks
       * @param   {HTMLElement}   node
       * @param   {HTMLElement}   parent
       * @returns {boolean}       has_parent
       */
      hasParent: function(node, parent) {
        while(node){
          if(node == parent) {
            return true;
          }
          node = node.parentNode;
        }
        return false;
      },


      /**
       * get the center of all the touches
       * @param   {Array}     touches
       * @returns {Object}    center
       */
      getCenter: function getCenter(touches) {
        var valuesX = [], valuesY = [];

        for(var t= 0,len=touches.length; t<len; t++) {
          valuesX.push(touches[t].pageX);
          valuesY.push(touches[t].pageY);
        }

        return {
          pageX: ((Math.min.apply(Math, valuesX) + Math.max.apply(Math, valuesX)) / 2),
          pageY: ((Math.min.apply(Math, valuesY) + Math.max.apply(Math, valuesY)) / 2)
        };
      },


      /**
       * calculate the velocity between two points
       * @param   {Number}    delta_time
       * @param   {Number}    delta_x
       * @param   {Number}    delta_y
       * @returns {Object}    velocity
       */
      getVelocity: function getVelocity(delta_time, delta_x, delta_y) {
        return {
          x: Math.abs(delta_x / delta_time) || 0,
          y: Math.abs(delta_y / delta_time) || 0
        };
      },


      /**
       * calculate the angle between two coordinates
       * @param   {Touch}     touch1
       * @param   {Touch}     touch2
       * @returns {Number}    angle
       */
      getAngle: function getAngle(touch1, touch2) {
        var y = touch2.pageY - touch1.pageY,
          x = touch2.pageX - touch1.pageX;
        return Math.atan2(y, x) * 180 / Math.PI;
      },


      /**
       * angle to direction define
       * @param   {Touch}     touch1
       * @param   {Touch}     touch2
       * @returns {String}    direction constant, like ionic.Gestures.DIRECTION_LEFT
       */
      getDirection: function getDirection(touch1, touch2) {
        var x = Math.abs(touch1.pageX - touch2.pageX),
          y = Math.abs(touch1.pageY - touch2.pageY);

        if(x >= y) {
          return touch1.pageX - touch2.pageX > 0 ? ionic.Gestures.DIRECTION_LEFT : ionic.Gestures.DIRECTION_RIGHT;
        }
        else {
          return touch1.pageY - touch2.pageY > 0 ? ionic.Gestures.DIRECTION_UP : ionic.Gestures.DIRECTION_DOWN;
        }
      },


      /**
       * calculate the distance between two touches
       * @param   {Touch}     touch1
       * @param   {Touch}     touch2
       * @returns {Number}    distance
       */
      getDistance: function getDistance(touch1, touch2) {
        var x = touch2.pageX - touch1.pageX,
          y = touch2.pageY - touch1.pageY;
        return Math.sqrt((x*x) + (y*y));
      },


      /**
       * calculate the scale factor between two touchLists (fingers)
       * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
       * @param   {Array}     start
       * @param   {Array}     end
       * @returns {Number}    scale
       */
      getScale: function getScale(start, end) {
        // need two fingers...
        if(start.length >= 2 && end.length >= 2) {
          return this.getDistance(end[0], end[1]) /
            this.getDistance(start[0], start[1]);
        }
        return 1;
      },


      /**
       * calculate the rotation degrees between two touchLists (fingers)
       * @param   {Array}     start
       * @param   {Array}     end
       * @returns {Number}    rotation
       */
      getRotation: function getRotation(start, end) {
        // need two fingers
        if(start.length >= 2 && end.length >= 2) {
          return this.getAngle(end[1], end[0]) -
            this.getAngle(start[1], start[0]);
        }
        return 0;
      },


      /**
       * boolean if the direction is vertical
       * @param    {String}    direction
       * @returns  {Boolean}   is_vertical
       */
      isVertical: function isVertical(direction) {
        return (direction == ionic.Gestures.DIRECTION_UP || direction == ionic.Gestures.DIRECTION_DOWN);
      },


      /**
       * stop browser default behavior with css class
       * @param   {HtmlElement}   element
       * @param   {Object}        css_class
       */
      stopDefaultBrowserBehavior: function stopDefaultBrowserBehavior(element, css_class) {
        // changed from making many style changes to just adding a preset classname
        // less DOM manipulations, less code, and easier to control in the CSS side of things
        // hammer.js doesn't come with CSS, but ionic does, which is why we prefer this method
        if(element && element.classList) {
          element.classList.add(css_class);
          element.onselectstart = function() {
            return false;
          };
        }
      }
    };


    ionic.Gestures.detection = {
      // contains all registred ionic.Gestures.gestures in the correct order
      gestures: [],

      // data of the current ionic.Gestures.gesture detection session
      current: null,

      // the previous ionic.Gestures.gesture session data
      // is a full clone of the previous gesture.current object
      previous: null,

      // when this becomes true, no gestures are fired
      stopped: false,


      /**
       * start ionic.Gestures.gesture detection
       * @param   {ionic.Gestures.Instance}   inst
       * @param   {Object}            eventData
       */
      startDetect: function startDetect(inst, eventData) {
        // already busy with a ionic.Gestures.gesture detection on an element
        if(this.current) {
          return;
        }

        this.stopped = false;

        this.current = {
          inst        : inst, // reference to ionic.GesturesInstance we're working for
          startEvent  : ionic.Gestures.utils.extend({}, eventData), // start eventData for distances, timing etc
          lastEvent   : false, // last eventData
          name        : '' // current gesture we're in/detected, can be 'tap', 'hold' etc
        };

        this.detect(eventData);
      },


      /**
       * ionic.Gestures.gesture detection
       * @param   {Object}    eventData
       */
      detect: function detect(eventData) {
        if(!this.current || this.stopped) {
          return;
        }

        // extend event data with calculations about scale, distance etc
        eventData = this.extendEventData(eventData);

        // instance options
        var inst_options = this.current.inst.options;

        // call ionic.Gestures.gesture handlers
        for(var g=0,len=this.gestures.length; g<len; g++) {
          var gesture = this.gestures[g];

          // only when the instance options have enabled this gesture
          if(!this.stopped && inst_options[gesture.name] !== false) {
            // if a handler returns false, we stop with the detection
            if(gesture.handler.call(gesture, eventData, this.current.inst) === false) {
              this.stopDetect();
              break;
            }
          }
        }

        // store as previous event event
        if(this.current) {
          this.current.lastEvent = eventData;
        }

        // endevent, but not the last touch, so dont stop
        if(eventData.eventType == ionic.Gestures.EVENT_END && !eventData.touches.length-1) {
          this.stopDetect();
        }

        return eventData;
      },


      /**
       * clear the ionic.Gestures.gesture vars
       * this is called on endDetect, but can also be used when a final ionic.Gestures.gesture has been detected
       * to stop other ionic.Gestures.gestures from being fired
       */
      stopDetect: function stopDetect() {
        // clone current data to the store as the previous gesture
        // used for the double tap gesture, since this is an other gesture detect session
        this.previous = ionic.Gestures.utils.extend({}, this.current);

        // reset the current
        this.current = null;

        // stopped!
        this.stopped = true;
      },


      /**
       * extend eventData for ionic.Gestures.gestures
       * @param   {Object}   ev
       * @returns {Object}   ev
       */
      extendEventData: function extendEventData(ev) {
        var startEv = this.current.startEvent;

        // if the touches change, set the new touches over the startEvent touches
        // this because touchevents don't have all the touches on touchstart, or the
        // user must place his fingers at the EXACT same time on the screen, which is not realistic
        // but, sometimes it happens that both fingers are touching at the EXACT same time
        if(startEv && (ev.touches.length != startEv.touches.length || ev.touches === startEv.touches)) {
          // extend 1 level deep to get the touchlist with the touch objects
          startEv.touches = [];
          for(var i=0,len=ev.touches.length; i<len; i++) {
            startEv.touches.push(ionic.Gestures.utils.extend({}, ev.touches[i]));
          }
        }

        var delta_time = ev.timeStamp - startEv.timeStamp,
          delta_x = ev.center.pageX - startEv.center.pageX,
          delta_y = ev.center.pageY - startEv.center.pageY,
          velocity = ionic.Gestures.utils.getVelocity(delta_time, delta_x, delta_y);

        ionic.Gestures.utils.extend(ev, {
          deltaTime   : delta_time,

          deltaX      : delta_x,
          deltaY      : delta_y,

          velocityX   : velocity.x,
          velocityY   : velocity.y,

          distance    : ionic.Gestures.utils.getDistance(startEv.center, ev.center),
          angle       : ionic.Gestures.utils.getAngle(startEv.center, ev.center),
          direction   : ionic.Gestures.utils.getDirection(startEv.center, ev.center),

          scale       : ionic.Gestures.utils.getScale(startEv.touches, ev.touches),
          rotation    : ionic.Gestures.utils.getRotation(startEv.touches, ev.touches),

          startEvent  : startEv
        });

        return ev;
      },


      /**
       * register new gesture
       * @param   {Object}    gesture object, see gestures.js for documentation
       * @returns {Array}     gestures
       */
      register: function register(gesture) {
        // add an enable gesture options if there is no given
        var options = gesture.defaults || {};
        if(options[gesture.name] === undefined) {
          options[gesture.name] = true;
        }

        // extend ionic.Gestures default options with the ionic.Gestures.gesture options
        ionic.Gestures.utils.extend(ionic.Gestures.defaults, options, true);

        // set its index
        gesture.index = gesture.index || 1000;

        // add ionic.Gestures.gesture to the list
        this.gestures.push(gesture);

        // sort the list by index
        this.gestures.sort(function(a, b) {
          if (a.index < b.index) {
            return -1;
          }
          if (a.index > b.index) {
            return 1;
          }
          return 0;
        });

        return this.gestures;
      }
    };


    ionic.Gestures.gestures = ionic.Gestures.gestures || {};

    /**
     * Custom gestures
     * ==============================
     *
     * Gesture object
     * --------------------
     * The object structure of a gesture:
     *
     * { name: 'mygesture',
   *   index: 1337,
   *   defaults: {
   *     mygesture_option: true
   *   }
   *   handler: function(type, ev, inst) {
   *     // trigger gesture event
   *     inst.trigger(this.name, ev);
   *   }
   * }

     * @param   {String}    name
     * this should be the name of the gesture, lowercase
     * it is also being used to disable/enable the gesture per instance config.
     *
     * @param   {Number}    [index=1000]
     * the index of the gesture, where it is going to be in the stack of gestures detection
     * like when you build an gesture that depends on the drag gesture, it is a good
     * idea to place it after the index of the drag gesture.
     *
     * @param   {Object}    [defaults={}]
     * the default settings of the gesture. these are added to the instance settings,
     * and can be overruled per instance. you can also add the name of the gesture,
     * but this is also added by default (and set to true).
     *
     * @param   {Function}  handler
     * this handles the gesture detection of your custom gesture and receives the
     * following arguments:
     *
     *      @param  {Object}    eventData
     *      event data containing the following properties:
     *          timeStamp   {Number}        time the event occurred
     *          target      {HTMLElement}   target element
     *          touches     {Array}         touches (fingers, pointers, mouse) on the screen
     *          pointerType {String}        kind of pointer that was used. matches ionic.Gestures.POINTER_MOUSE|TOUCH
     *          center      {Object}        center position of the touches. contains pageX and pageY
     *          deltaTime   {Number}        the total time of the touches in the screen
     *          deltaX      {Number}        the delta on x axis we haved moved
     *          deltaY      {Number}        the delta on y axis we haved moved
     *          velocityX   {Number}        the velocity on the x
     *          velocityY   {Number}        the velocity on y
     *          angle       {Number}        the angle we are moving
     *          direction   {String}        the direction we are moving. matches ionic.Gestures.DIRECTION_UP|DOWN|LEFT|RIGHT
     *          distance    {Number}        the distance we haved moved
     *          scale       {Number}        scaling of the touches, needs 2 touches
     *          rotation    {Number}        rotation of the touches, needs 2 touches *
     *          eventType   {String}        matches ionic.Gestures.EVENT_START|MOVE|END
     *          srcEvent    {Object}        the source event, like TouchStart or MouseDown *
     *          startEvent  {Object}        contains the same properties as above,
     *                                      but from the first touch. this is used to calculate
     *                                      distances, deltaTime, scaling etc
     *
     *      @param  {ionic.Gestures.Instance}    inst
     *      the instance we are doing the detection for. you can get the options from
     *      the inst.options object and trigger the gesture event by calling inst.trigger
     *
     *
     * Handle gestures
     * --------------------
     * inside the handler you can get/set ionic.Gestures.detectionic.current. This is the current
     * detection sessionic. It has the following properties
     *      @param  {String}    name
     *      contains the name of the gesture we have detected. it has not a real function,
     *      only to check in other gestures if something is detected.
     *      like in the drag gesture we set it to 'drag' and in the swipe gesture we can
     *      check if the current gesture is 'drag' by accessing ionic.Gestures.detectionic.current.name
     *
     *      readonly
     *      @param  {ionic.Gestures.Instance}    inst
     *      the instance we do the detection for
     *
     *      readonly
     *      @param  {Object}    startEvent
     *      contains the properties of the first gesture detection in this sessionic.
     *      Used for calculations about timing, distance, etc.
     *
     *      readonly
     *      @param  {Object}    lastEvent
     *      contains all the properties of the last gesture detect in this sessionic.
     *
     * after the gesture detection session has been completed (user has released the screen)
     * the ionic.Gestures.detectionic.current object is copied into ionic.Gestures.detectionic.previous,
     * this is usefull for gestures like doubletap, where you need to know if the
     * previous gesture was a tap
     *
     * options that have been set by the instance can be received by calling inst.options
     *
     * You can trigger a gesture event by calling inst.trigger("mygesture", event).
     * The first param is the name of your gesture, the second the event argument
     *
     *
     * Register gestures
     * --------------------
     * When an gesture is added to the ionic.Gestures.gestures object, it is auto registered
     * at the setup of the first ionic.Gestures instance. You can also call ionic.Gestures.detectionic.register
     * manually and pass your gesture object as a param
     *
     */

    /**
     * Hold
     * Touch stays at the same place for x time
     * events  hold
     */
    ionic.Gestures.gestures.Hold = {
      name: 'hold',
      index: 10,
      defaults: {
        hold_timeout	: 500,
        hold_threshold	: 1
      },
      timer: null,
      handler: function holdGesture(ev, inst) {
        switch(ev.eventType) {
          case ionic.Gestures.EVENT_START:
            // clear any running timers
            clearTimeout(this.timer);

            // set the gesture so we can check in the timeout if it still is
            ionic.Gestures.detection.current.name = this.name;

            // set timer and if after the timeout it still is hold,
            // we trigger the hold event
            this.timer = setTimeout(function() {
              if(ionic.Gestures.detection.current.name == 'hold') {
                ionic.tap.cancelClick();
                inst.trigger('hold', ev);
              }
            }, inst.options.hold_timeout);
            break;

          // when you move or end we clear the timer
          case ionic.Gestures.EVENT_MOVE:
            if(ev.distance > inst.options.hold_threshold) {
              clearTimeout(this.timer);
            }
            break;

          case ionic.Gestures.EVENT_END:
            clearTimeout(this.timer);
            break;
        }
      }
    };


    /**
     * Tap/DoubleTap
     * Quick touch at a place or double at the same place
     * events  tap, doubletap
     */
    ionic.Gestures.gestures.Tap = {
      name: 'tap',
      index: 100,
      defaults: {
        tap_max_touchtime	: 250,
        tap_max_distance	: 10,
        tap_always			: true,
        doubletap_distance	: 20,
        doubletap_interval	: 300
      },
      handler: function tapGesture(ev, inst) {
        if(ev.eventType == ionic.Gestures.EVENT_END && ev.srcEvent.type != 'touchcancel') {
          // previous gesture, for the double tap since these are two different gesture detections
          var prev = ionic.Gestures.detection.previous,
            did_doubletap = false;

          // when the touchtime is higher then the max touch time
          // or when the moving distance is too much
          if(ev.deltaTime > inst.options.tap_max_touchtime ||
            ev.distance > inst.options.tap_max_distance) {
            return;
          }

          // check if double tap
          if(prev && prev.name == 'tap' &&
            (ev.timeStamp - prev.lastEvent.timeStamp) < inst.options.doubletap_interval &&
            ev.distance < inst.options.doubletap_distance) {
            inst.trigger('doubletap', ev);
            did_doubletap = true;
          }

          // do a single tap
          if(!did_doubletap || inst.options.tap_always) {
            ionic.Gestures.detection.current.name = 'tap';
            inst.trigger('tap', ev);
          }
        }
      }
    };


    /**
     * Swipe
     * triggers swipe events when the end velocity is above the threshold
     * events  swipe, swipeleft, swiperight, swipeup, swipedown
     */
    ionic.Gestures.gestures.Swipe = {
      name: 'swipe',
      index: 40,
      defaults: {
        // set 0 for unlimited, but this can conflict with transform
        swipe_max_touches  : 1,
        swipe_velocity     : 0.7
      },
      handler: function swipeGesture(ev, inst) {
        if(ev.eventType == ionic.Gestures.EVENT_END) {
          // max touches
          if(inst.options.swipe_max_touches > 0 &&
            ev.touches.length > inst.options.swipe_max_touches) {
            return;
          }

          // when the distance we moved is too small we skip this gesture
          // or we can be already in dragging
          if(ev.velocityX > inst.options.swipe_velocity ||
            ev.velocityY > inst.options.swipe_velocity) {
            // trigger swipe events
            inst.trigger(this.name, ev);
            inst.trigger(this.name + ev.direction, ev);
          }
        }
      }
    };


    /**
     * Drag
     * Move with x fingers (default 1) around on the page. Blocking the scrolling when
     * moving left and right is a good practice. When all the drag events are blocking
     * you disable scrolling on that area.
     * events  drag, drapleft, dragright, dragup, dragdown
     */
    ionic.Gestures.gestures.Drag = {
      name: 'drag',
      index: 50,
      defaults: {
        drag_min_distance : 10,
        // Set correct_for_drag_min_distance to true to make the starting point of the drag
        // be calculated from where the drag was triggered, not from where the touch started.
        // Useful to avoid a jerk-starting drag, which can make fine-adjustments
        // through dragging difficult, and be visually unappealing.
        correct_for_drag_min_distance : true,
        // set 0 for unlimited, but this can conflict with transform
        drag_max_touches  : 1,
        // prevent default browser behavior when dragging occurs
        // be careful with it, it makes the element a blocking element
        // when you are using the drag gesture, it is a good practice to set this true
        drag_block_horizontal   : true,
        drag_block_vertical     : true,
        // drag_lock_to_axis keeps the drag gesture on the axis that it started on,
        // It disallows vertical directions if the initial direction was horizontal, and vice versa.
        drag_lock_to_axis       : false,
        // drag lock only kicks in when distance > drag_lock_min_distance
        // This way, locking occurs only when the distance has become large enough to reliably determine the direction
        drag_lock_min_distance : 25
      },
      triggered: false,
      handler: function dragGesture(ev, inst) {
        // current gesture isnt drag, but dragged is true
        // this means an other gesture is busy. now call dragend
        if(ionic.Gestures.detection.current.name != this.name && this.triggered) {
          inst.trigger(this.name +'end', ev);
          this.triggered = false;
          return;
        }

        // max touches
        if(inst.options.drag_max_touches > 0 &&
          ev.touches.length > inst.options.drag_max_touches) {
          return;
        }

        switch(ev.eventType) {
          case ionic.Gestures.EVENT_START:
            this.triggered = false;
            break;

          case ionic.Gestures.EVENT_MOVE:
            // when the distance we moved is too small we skip this gesture
            // or we can be already in dragging
            if(ev.distance < inst.options.drag_min_distance &&
              ionic.Gestures.detection.current.name != this.name) {
              return;
            }

            // we are dragging!
            if(ionic.Gestures.detection.current.name != this.name) {
              ionic.Gestures.detection.current.name = this.name;
              if (inst.options.correct_for_drag_min_distance) {
                // When a drag is triggered, set the event center to drag_min_distance pixels from the original event center.
                // Without this correction, the dragged distance would jumpstart at drag_min_distance pixels instead of at 0.
                // It might be useful to save the original start point somewhere
                var factor = Math.abs(inst.options.drag_min_distance/ev.distance);
                ionic.Gestures.detection.current.startEvent.center.pageX += ev.deltaX * factor;
                ionic.Gestures.detection.current.startEvent.center.pageY += ev.deltaY * factor;

                // recalculate event data using new start point
                ev = ionic.Gestures.detection.extendEventData(ev);
              }
            }

            // lock drag to axis?
            if(ionic.Gestures.detection.current.lastEvent.drag_locked_to_axis || (inst.options.drag_lock_to_axis && inst.options.drag_lock_min_distance<=ev.distance)) {
              ev.drag_locked_to_axis = true;
            }
            var last_direction = ionic.Gestures.detection.current.lastEvent.direction;
            if(ev.drag_locked_to_axis && last_direction !== ev.direction) {
              // keep direction on the axis that the drag gesture started on
              if(ionic.Gestures.utils.isVertical(last_direction)) {
                ev.direction = (ev.deltaY < 0) ? ionic.Gestures.DIRECTION_UP : ionic.Gestures.DIRECTION_DOWN;
              }
              else {
                ev.direction = (ev.deltaX < 0) ? ionic.Gestures.DIRECTION_LEFT : ionic.Gestures.DIRECTION_RIGHT;
              }
            }

            // first time, trigger dragstart event
            if(!this.triggered) {
              inst.trigger(this.name +'start', ev);
              this.triggered = true;
            }

            // trigger normal event
            inst.trigger(this.name, ev);

            // direction event, like dragdown
            inst.trigger(this.name + ev.direction, ev);

            // block the browser events
            if( (inst.options.drag_block_vertical && ionic.Gestures.utils.isVertical(ev.direction)) ||
              (inst.options.drag_block_horizontal && !ionic.Gestures.utils.isVertical(ev.direction))) {
              ev.preventDefault();
            }
            break;

          case ionic.Gestures.EVENT_END:
            // trigger dragend
            if(this.triggered) {
              inst.trigger(this.name +'end', ev);
            }

            this.triggered = false;
            break;
        }
      }
    };


    /**
     * Transform
     * User want to scale or rotate with 2 fingers
     * events  transform, pinch, pinchin, pinchout, rotate
     */
    ionic.Gestures.gestures.Transform = {
      name: 'transform',
      index: 45,
      defaults: {
        // factor, no scale is 1, zoomin is to 0 and zoomout until higher then 1
        transform_min_scale     : 0.01,
        // rotation in degrees
        transform_min_rotation  : 1,
        // prevent default browser behavior when two touches are on the screen
        // but it makes the element a blocking element
        // when you are using the transform gesture, it is a good practice to set this true
        transform_always_block  : false
      },
      triggered: false,
      handler: function transformGesture(ev, inst) {
        // current gesture isnt drag, but dragged is true
        // this means an other gesture is busy. now call dragend
        if(ionic.Gestures.detection.current.name != this.name && this.triggered) {
          inst.trigger(this.name +'end', ev);
          this.triggered = false;
          return;
        }

        // atleast multitouch
        if(ev.touches.length < 2) {
          return;
        }

        // prevent default when two fingers are on the screen
        if(inst.options.transform_always_block) {
          ev.preventDefault();
        }

        switch(ev.eventType) {
          case ionic.Gestures.EVENT_START:
            this.triggered = false;
            break;

          case ionic.Gestures.EVENT_MOVE:
            var scale_threshold = Math.abs(1-ev.scale);
            var rotation_threshold = Math.abs(ev.rotation);

            // when the distance we moved is too small we skip this gesture
            // or we can be already in dragging
            if(scale_threshold < inst.options.transform_min_scale &&
              rotation_threshold < inst.options.transform_min_rotation) {
              return;
            }

            // we are transforming!
            ionic.Gestures.detection.current.name = this.name;

            // first time, trigger dragstart event
            if(!this.triggered) {
              inst.trigger(this.name +'start', ev);
              this.triggered = true;
            }

            inst.trigger(this.name, ev); // basic transform event

            // trigger rotate event
            if(rotation_threshold > inst.options.transform_min_rotation) {
              inst.trigger('rotate', ev);
            }

            // trigger pinch event
            if(scale_threshold > inst.options.transform_min_scale) {
              inst.trigger('pinch', ev);
              inst.trigger('pinch'+ ((ev.scale < 1) ? 'in' : 'out'), ev);
            }
            break;

          case ionic.Gestures.EVENT_END:
            // trigger dragend
            if(this.triggered) {
              inst.trigger(this.name +'end', ev);
            }

            this.triggered = false;
            break;
        }
      }
    };


    /**
     * Touch
     * Called as first, tells the user has touched the screen
     * events  touch
     */
    ionic.Gestures.gestures.Touch = {
      name: 'touch',
      index: -Infinity,
      defaults: {
        // call preventDefault at touchstart, and makes the element blocking by
        // disabling the scrolling of the page, but it improves gestures like
        // transforming and dragging.
        // be careful with using this, it can be very annoying for users to be stuck
        // on the page
        prevent_default: false,

        // disable mouse events, so only touch (or pen!) input triggers events
        prevent_mouseevents: false
      },
      handler: function touchGesture(ev, inst) {
        if(inst.options.prevent_mouseevents && ev.pointerType == ionic.Gestures.POINTER_MOUSE) {
          ev.stopDetect();
          return;
        }

        if(inst.options.prevent_default) {
          ev.preventDefault();
        }

        if(ev.eventType ==  ionic.Gestures.EVENT_START) {
          inst.trigger(this.name, ev);
        }
      }
    };


    /**
     * Release
     * Called as last, tells the user has released the screen
     * events  release
     */
    ionic.Gestures.gestures.Release = {
      name: 'release',
      index: Infinity,
      handler: function releaseGesture(ev, inst) {
        if(ev.eventType ==  ionic.Gestures.EVENT_END) {
          inst.trigger(this.name, ev);
        }
      }
    };
  })(window.ionic);

  (function(window, document, ionic) {

    var IOS = 'ios';
    var ANDROID = 'android';
    var WINDOWS_PHONE = 'windowsphone';

    /**
     * @ngdoc utility
     * @name ionic.Platform
     * @module ionic
     */
    ionic.Platform = {

      // Put navigator on platform so it can be mocked and set
      // the browser does not allow window.navigator to be set
      navigator: window.navigator,

      /**
       * @ngdoc property
       * @name ionic.Platform#isReady
       * @returns {boolean} Whether the device is ready.
       */
      isReady: false,
      /**
       * @ngdoc property
       * @name ionic.Platform#isFullScreen
       * @returns {boolean} Whether the device is fullscreen.
       */
      isFullScreen: false,
      /**
       * @ngdoc property
       * @name ionic.Platform#platforms
       * @returns {Array(string)} An array of all platforms found.
       */
      platforms: null,
      /**
       * @ngdoc property
       * @name ionic.Platform#grade
       * @returns {string} What grade the current platform is.
       */
      grade: null,
      ua: navigator.userAgent,

      /**
       * @ngdoc method
       * @name ionic.Platform#ready
       * @description
       * Trigger a callback once the device is ready, or immediately
       * if the device is already ready. This method can be run from
       * anywhere and does not need to be wrapped by any additonal methods.
       * When the app is within a WebView (Cordova), it'll fire
       * the callback once the device is ready. If the app is within
       * a web browser, it'll fire the callback after `window.load`.
       * @param {function} callback The function to call.
       */
      ready: function(cb) {
        // run through tasks to complete now that the device is ready
        if(this.isReady) {
          cb();
        } else {
          // the platform isn't ready yet, add it to this array
          // which will be called once the platform is ready
          readyCallbacks.push(cb);
        }
      },

      /**
       * @private
       */
      detect: function() {
        ionic.Platform._checkPlatforms();

        ionic.requestAnimationFrame(function(){
          // only add to the body class if we got platform info
          for(var i = 0; i < ionic.Platform.platforms.length; i++) {
            document.body.classList.add('platform-' + ionic.Platform.platforms[i]);
          }
        });
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#setGrade
       * @description Set the grade of the device: 'a', 'b', or 'c'. 'a' is the best
       * (most css features enabled), 'c' is the worst.  By default, sets the grade
       * depending on the current device.
       * @param {string} grade The new grade to set.
       */
      setGrade: function(grade) {
        var oldGrade = this.grade;
        this.grade = grade;
        ionic.requestAnimationFrame(function() {
          if (oldGrade) {
            document.body.classList.remove('grade-' + oldGrade);
          }
          document.body.classList.add('grade-' + grade);
        });
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#device
       * @description Return the current device (given by cordova).
       * @returns {object} The device object.
       */
      device: function() {
        if(window.device) return window.device;
        if(this.isWebView()) void 0;
        return {};
      },

      _checkPlatforms: function(platforms) {
        this.platforms = [];
        var grade = 'a';

        if(this.isWebView()) {
          this.platforms.push('webview');
          this.platforms.push('cordova');
        } else {
          this.platforms.push('browser');
        }
        if(this.isIPad()) this.platforms.push('ipad');

        var platform = this.platform();
        if(platform) {
          this.platforms.push(platform);

          var version = this.version();
          if(version) {
            var v = version.toString();
            if(v.indexOf('.') > 0) {
              v = v.replace('.', '_');
            } else {
              v += '_0';
            }
            this.platforms.push(platform + v.split('_')[0]);
            this.platforms.push(platform + v);

            if(this.isAndroid() && version < 4.4) {
              grade = (version < 4 ? 'c' : 'b');
            } else if(this.isWindowsPhone()) {
              grade = 'b';
            }
          }
        }

        this.setGrade(grade);
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#isWebView
       * @returns {boolean} Check if we are running within a WebView (such as Cordova).
       */
      isWebView: function() {
        return !(!window.cordova && !window.PhoneGap && !window.phonegap);
      },
      /**
       * @ngdoc method
       * @name ionic.Platform#isIPad
       * @returns {boolean} Whether we are running on iPad.
       */
      isIPad: function() {
        if( /iPad/i.test(ionic.Platform.navigator.platform) ) {
          return true;
        }
        return /iPad/i.test(this.ua);
      },
      /**
       * @ngdoc method
       * @name ionic.Platform#isIOS
       * @returns {boolean} Whether we are running on iOS.
       */
      isIOS: function() {
        return this.is(IOS);
      },
      /**
       * @ngdoc method
       * @name ionic.Platform#isAndroid
       * @returns {boolean} Whether we are running on Android.
       */
      isAndroid: function() {
        return this.is(ANDROID);
      },
      /**
       * @ngdoc method
       * @name ionic.Platform#isWindowsPhone
       * @returns {boolean} Whether we are running on Windows Phone.
       */
      isWindowsPhone: function() {
        return this.is(WINDOWS_PHONE);
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#platform
       * @returns {string} The name of the current platform.
       */
      platform: function() {
        // singleton to get the platform name
        if(platformName === null) this.setPlatform(this.device().platform);
        return platformName;
      },

      /**
       * @private
       */
      setPlatform: function(n) {
        if(typeof n != 'undefined' && n !== null && n.length) {
          platformName = n.toLowerCase();
        } else if(this.ua.indexOf('Android') > 0) {
          platformName = ANDROID;
        } else if(this.ua.indexOf('iPhone') > -1 || this.ua.indexOf('iPad') > -1 || this.ua.indexOf('iPod') > -1) {
          platformName = IOS;
        } else if(this.ua.indexOf('Windows Phone') > -1) {
          platformName = WINDOWS_PHONE;
        } else {
          platformName = ionic.Platform.navigator.platform && navigator.platform.toLowerCase().split(' ')[0] || '';
        }
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#version
       * @returns {string} The version of the current device platform.
       */
      version: function() {
        // singleton to get the platform version
        if(platformVersion === null) this.setVersion(this.device().version);
        return platformVersion;
      },

      /**
       * @private
       */
      setVersion: function(v) {
        if(typeof v != 'undefined' && v !== null) {
          v = v.split('.');
          v = parseFloat(v[0] + '.' + (v.length > 1 ? v[1] : 0));
          if(!isNaN(v)) {
            platformVersion = v;
            return;
          }
        }

        platformVersion = 0;

        // fallback to user-agent checking
        var pName = this.platform();
        var versionMatch = {
          'android': /Android (\d+).(\d+)?/,
          'ios': /OS (\d+)_(\d+)?/,
          'windowsphone': /Windows Phone (\d+).(\d+)?/
        };
        if(versionMatch[pName]) {
          v = this.ua.match( versionMatch[pName] );
          if(v &&  v.length > 2) {
            platformVersion = parseFloat( v[1] + '.' + v[2] );
          }
        }
      },

      // Check if the platform is the one detected by cordova
      is: function(type) {
        type = type.toLowerCase();
        // check if it has an array of platforms
        if(this.platforms) {
          for(var x = 0; x < this.platforms.length; x++) {
            if(this.platforms[x] === type) return true;
          }
        }
        // exact match
        var pName = this.platform();
        if(pName) {
          return pName === type.toLowerCase();
        }

        // A quick hack for to check userAgent
        return this.ua.toLowerCase().indexOf(type) >= 0;
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#exitApp
       * @description Exit the app.
       */
      exitApp: function() {
        this.ready(function(){
          navigator.app && navigator.app.exitApp && navigator.app.exitApp();
        });
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#showStatusBar
       * @description Shows or hides the device status bar (in Cordova).
       * @param {boolean} shouldShow Whether or not to show the status bar.
       */
      showStatusBar: function(val) {
        // Only useful when run within cordova
        this._showStatusBar = val;
        this.ready(function(){
          // run this only when or if the platform (cordova) is ready
          ionic.requestAnimationFrame(function(){
            if(ionic.Platform._showStatusBar) {
              // they do not want it to be full screen
              window.StatusBar && window.StatusBar.show();
              document.body.classList.remove('status-bar-hide');
            } else {
              // it should be full screen
              window.StatusBar && window.StatusBar.hide();
              document.body.classList.add('status-bar-hide');
            }
          });
        });
      },

      /**
       * @ngdoc method
       * @name ionic.Platform#fullScreen
       * @description
       * Sets whether the app is fullscreen or not (in Cordova).
       * @param {boolean=} showFullScreen Whether or not to set the app to fullscreen. Defaults to true.
       * @param {boolean=} showStatusBar Whether or not to show the device's status bar. Defaults to false.
       */
      fullScreen: function(showFullScreen, showStatusBar) {
        // showFullScreen: default is true if no param provided
        this.isFullScreen = (showFullScreen !== false);

        // add/remove the fullscreen classname to the body
        ionic.DomUtil.ready(function(){
          // run this only when or if the DOM is ready
          ionic.requestAnimationFrame(function(){
            if(ionic.Platform.isFullScreen) {
              document.body.classList.add('fullscreen');
            } else {
              document.body.classList.remove('fullscreen');
            }
          });
          // showStatusBar: default is false if no param provided
          ionic.Platform.showStatusBar( (showStatusBar === true) );
        });
      }

    };

    var platformName = null, // just the name, like iOS or Android
      platformVersion = null, // a float of the major and minor, like 7.1
      readyCallbacks = [];

    // setup listeners to know when the device is ready to go
    function onWindowLoad() {
      if(ionic.Platform.isWebView()) {
        // the window and scripts are fully loaded, and a cordova/phonegap
        // object exists then let's listen for the deviceready
        document.addEventListener("deviceready", onPlatformReady, false);
      } else {
        // the window and scripts are fully loaded, but the window object doesn't have the
        // cordova/phonegap object, so its just a browser, not a webview wrapped w/ cordova
        onPlatformReady();
      }
      window.removeEventListener("load", onWindowLoad, false);
    }
    window.addEventListener("load", onWindowLoad, false);

    function onPlatformReady() {
      // the device is all set to go, init our own stuff then fire off our event
      ionic.Platform.isReady = true;
      ionic.Platform.detect();
      for(var x=0; x<readyCallbacks.length; x++) {
        // fire off all the callbacks that were added before the platform was ready
        readyCallbacks[x]();
      }
      readyCallbacks = [];
      ionic.trigger('platformready', { target: document });

      ionic.requestAnimationFrame(function(){
        document.body.classList.add('platform-ready');
      });
    }

  })(this, document, ionic);

  (function(document, ionic) {
    'use strict';

    // Ionic CSS polyfills
    ionic.CSS = {};

    (function() {

      // transform
      var i, keys = ['webkitTransform', 'transform', '-webkit-transform', 'webkit-transform',
        '-moz-transform', 'moz-transform', 'MozTransform', 'mozTransform', 'msTransform'];

      for(i = 0; i < keys.length; i++) {
        if(document.documentElement.style[keys[i]] !== undefined) {
          ionic.CSS.TRANSFORM = keys[i];
          break;
        }
      }

      // transition
      keys = ['webkitTransition', 'mozTransition', 'msTransition', 'transition'];
      for(i = 0; i < keys.length; i++) {
        if(document.documentElement.style[keys[i]] !== undefined) {
          ionic.CSS.TRANSITION = keys[i];
          break;
        }
      }

    })();

    // classList polyfill for them older Androids
    // https://gist.github.com/devongovett/1381839
    if (!("classList" in document.documentElement) && Object.defineProperty && typeof HTMLElement !== 'undefined') {
      Object.defineProperty(HTMLElement.prototype, 'classList', {
        get: function() {
          var self = this;
          function update(fn) {
            return function() {
              var x, classes = self.className.split(/\s+/);

              for(x=0; x<arguments.length; x++) {
                fn(classes, classes.indexOf(arguments[x]), arguments[x]);
              }

              self.className = classes.join(" ");
            };
          }

          return {
            add: update(function(classes, index, value) {
              ~index || classes.push(value);
            }),

            remove: update(function(classes, index) {
              ~index && classes.splice(index, 1);
            }),

            toggle: update(function(classes, index, value) {
              ~index ? classes.splice(index, 1) : classes.push(value);
            }),

            contains: function(value) {
              return !!~self.className.split(/\s+/).indexOf(value);
            },

            item: function(i) {
              return self.className.split(/\s+/)[i] || null;
            }
          };

        }
      });
    }

  })(document, ionic);


  /**
   * @ngdoc page
   * @name tap
   * @module ionic
   * @description
   * On touch devices such as a phone or tablet, some browsers implement a 300ms delay between
   * the time the user stops touching the display and the moment the browser executes the
   * click. This delay was initially introduced so the browser can know whether the user wants to
   * double-tap to zoom in on the webpage.  Basically, the browser waits roughly 300ms to see if
   * the user is double-tapping, or just tapping on the display once.
   *
   * Out of the box, Ionic automatically removes the 300ms delay in order to make Ionic apps
   * feel more "native" like. Resultingly, other solutions such as
   * [fastclick](https://github.com/ftlabs/fastclick) and Angular's
   * [ngTouch](https://docs.angularjs.org/api/ngTouch) should not be included, to avoid conflicts.
   *
   * Some browsers already remove the delay with certain settings, such as the CSS property
   * `touch-events: none` or with specific meta tag viewport values. However, each of these
   * browsers still handle clicks differently, such as when to fire off or cancel the event
   * (like scrolling when the target is a button, or holding a button down).
   * For browsers that already remove the 300ms delay, consider Ionic's tap system as a way to
   * normalize how clicks are handled across the various devices so there's an expected response
   * no matter what the device, platform or version. Additionally, Ionic will prevent
   * ghostclicks which even browsers that remove the delay still experience.
   *
   * In some cases, third-party libraries may also be working with touch events which can interfere
   * with the tap system. For example, mapping libraries like Google or Leaflet Maps often implement
   * a touch detection system which conflicts with Ionic's tap system.
   *
   * ### Disabling the tap system
   *
   * To disable the tap for an element and all of its children elements,
   * add the attribute `data-tap-disabled="true"`.
   *
   * ```html
   * <div data-tap-disabled="true">
   *     <div id="google-map"></div>
   * </div>
   * ```
   *
   * ### Additional Notes:
   *
   * - Ionic tap  works with Ionic's JavaScript scrolling
   * - Elements can come and go from the DOM and Ionic tap doesn't keep adding and removing
   *   listeners
   * - No "tap delay" after the first "tap" (you can tap as fast as you want, they all click)
   * - Minimal events listeners, only being added to document
   * - Correct focus in/out on each input type (select, textearea, range) on each platform/device
   * - Shows and hides virtual keyboard correctly for each platform/device
   * - Works with labels surrounding inputs
   * - Does not fire off a click if the user moves the pointer too far
   * - Adds and removes an 'activated' css class
   * - Multiple [unit tests](https://github.com/driftyco/ionic/blob/master/test/unit/utils/tap.unit.js) for each scenario
   *
   */
  /*

   IONIC TAP
   ---------------
   - Both touch and mouse events are added to the document.body on DOM ready
   - If a touch event happens, it does not use mouse event listeners
   - On touchend, if the distance between start and end was small, trigger a click
   - In the triggered click event, add a 'isIonicTap' property
   - The triggered click receives the same x,y coordinates as as the end event
   - On document.body click listener (with useCapture=true), only allow clicks with 'isIonicTap'
   - Triggering clicks with mouse events work the same as touch, except with mousedown/mouseup
   - Tapping inputs is disabled during scrolling
   */

  var tapDoc; // the element which the listeners are on (document.body)
  var tapActiveEle; // the element which is active (probably has focus)
  var tapEnabledTouchEvents;
  var tapMouseResetTimer;
  var tapPointerMoved;
  var tapPointerStart;
  var tapTouchFocusedInput;
  var tapLastTouchTarget;
  var tapTouchMoveListener = 'touchmove';

// how much the coordinates can be off between start/end, but still a click
  var TAP_RELEASE_TOLERANCE = 6; // default tolerance
  var TAP_RELEASE_BUTTON_TOLERANCE = 50; // button elements should have a larger tolerance

  var tapEventListeners = {
    'click': tapClickGateKeeper,

    'mousedown': tapMouseDown,
    'mouseup': tapMouseUp,
    'mousemove': tapMouseMove,

    'touchstart': tapTouchStart,
    'touchend': tapTouchEnd,
    'touchcancel': tapTouchCancel,
    'touchmove': tapTouchMove,

    'pointerdown': tapTouchStart,
    'pointerup': tapTouchEnd,
    'pointercancel': tapTouchCancel,
    'pointermove': tapTouchMove,

    'MSPointerDown': tapTouchStart,
    'MSPointerUp': tapTouchEnd,
    'MSPointerCancel': tapTouchCancel,
    'MSPointerMove': tapTouchMove,

    'focusin': tapFocusIn,
    'focusout': tapFocusOut
  };

  ionic.tap = {

    register: function(ele) {
      tapDoc = ele;

      tapEventListener('click', true, true);
      tapEventListener('mouseup');
      tapEventListener('mousedown');

      if( window.navigator.pointerEnabled ) {
        tapEventListener('pointerdown');
        tapEventListener('pointerup');
        tapEventListener('pointcancel');
        tapTouchMoveListener = 'pointermove';

      } else if (window.navigator.msPointerEnabled) {
        tapEventListener('MSPointerDown');
        tapEventListener('MSPointerUp');
        tapEventListener('MSPointerCancel');
        tapTouchMoveListener = 'MSPointerMove';

      } else {
        tapEventListener('touchstart');
        tapEventListener('touchend');
        tapEventListener('touchcancel');
      }

      tapEventListener('focusin');
      tapEventListener('focusout');

      return function() {
        for(var type in tapEventListeners) {
          tapEventListener(type, false);
        }
        tapDoc = null;
        tapActiveEle = null;
        tapEnabledTouchEvents = false;
        tapPointerMoved = false;
        tapPointerStart = null;
      };
    },

    ignoreScrollStart: function(e) {
      return (e.defaultPrevented) ||  // defaultPrevented has been assigned by another component handling the event
        (e.target.isContentEditable) ||
        (/^(file|range)$/i).test(e.target.type) ||
        (e.target.dataset ? e.target.dataset.preventScroll : e.target.getAttribute('data-prevent-default')) == 'true' || // manually set within an elements attributes
        (!!(/^(object|embed)$/i).test(e.target.tagName)) ||  // flash/movie/object touches should not try to scroll
        ionic.tap.isElementTapDisabled(e.target); // check if this element, or an ancestor, has `data-tap-disabled` attribute
    },

    isTextInput: function(ele) {
      return !!ele &&
        (ele.tagName == 'TEXTAREA' ||
          ele.contentEditable === 'true' ||
          (ele.tagName == 'INPUT' && !(/^(radio|checkbox|range|file|submit|reset)$/i).test(ele.type)) );
    },

    isDateInput: function(ele) {
      return !!ele &&
        (ele.tagName == 'INPUT' && (/^(date|time|datetime-local|month|week)$/i).test(ele.type));
    },

    isLabelWithTextInput: function(ele) {
      var container = tapContainingElement(ele, false);

      return !!container &&
        ionic.tap.isTextInput( tapTargetElement( container ) );
    },

    containsOrIsTextInput: function(ele) {
      return ionic.tap.isTextInput(ele) || ionic.tap.isLabelWithTextInput(ele);
    },

    cloneFocusedInput: function(container, scrollIntance) {
      if(ionic.tap.hasCheckedClone) return;
      ionic.tap.hasCheckedClone = true;

      ionic.requestAnimationFrame(function(){
        var focusInput = container.querySelector(':focus');
        if( ionic.tap.isTextInput(focusInput) ) {
          var clonedInput = focusInput.parentElement.querySelector('.cloned-text-input');
          if(!clonedInput) {
            clonedInput = document.createElement(focusInput.tagName);
            clonedInput.placeholder = focusInput.placeholder;
            clonedInput.type = focusInput.type;
            clonedInput.value = focusInput.value;
            clonedInput.style = focusInput.style;
            clonedInput.className = focusInput.className;
            clonedInput.classList.add('cloned-text-input');
            clonedInput.readOnly = true;
            focusInput.parentElement.insertBefore(clonedInput, focusInput);
            focusInput.style.top = focusInput.offsetTop;
            focusInput.classList.add('previous-input-focus');
          }
        }
      });
    },

    hasCheckedClone: false,

    removeClonedInputs: function(container, scrollIntance) {
      ionic.tap.hasCheckedClone = false;

      ionic.requestAnimationFrame(function(){
        var clonedInputs = container.querySelectorAll('.cloned-text-input');
        var previousInputFocus = container.querySelectorAll('.previous-input-focus');
        var x;

        for(x=0; x<clonedInputs.length; x++) {
          clonedInputs[x].parentElement.removeChild( clonedInputs[x] );
        }

        for(x=0; x<previousInputFocus.length; x++) {
          previousInputFocus[x].classList.remove('previous-input-focus');
          previousInputFocus[x].style.top = '';
          previousInputFocus[x].focus();
        }
      });
    },

    requiresNativeClick: function(ele) {
      if(!ele || ele.disabled || (/^(file|range)$/i).test(ele.type) || (/^(object|video)$/i).test(ele.tagName) || ionic.tap.isLabelContainingFileInput(ele) ) {
        return true;
      }
      return ionic.tap.isElementTapDisabled(ele);
    },

    isLabelContainingFileInput: function(ele) {
      var lbl = tapContainingElement(ele);
      if(lbl.tagName !== 'LABEL') return false;
      var fileInput = lbl.querySelector('input[type=file]');
      if(fileInput && fileInput.disabled === false) return true;
      return false;
    },

    isElementTapDisabled: function(ele) {
      if(ele && ele.nodeType === 1) {
        var element = ele;
        while(element) {
          if( (element.dataset ? element.dataset.tapDisabled : element.getAttribute('data-tap-disabled')) == 'true' ) {
            return true;
          }
          element = element.parentElement;
        }
      }
      return false;
    },

    setTolerance: function(releaseTolerance, releaseButtonTolerance) {
      TAP_RELEASE_TOLERANCE = releaseTolerance;
      TAP_RELEASE_BUTTON_TOLERANCE = releaseButtonTolerance;
    },

    cancelClick: function() {
      // used to cancel any simulated clicks which may happen on a touchend/mouseup
      // gestures uses this method within its tap and hold events
      tapPointerMoved = true;
    }

  };

  function tapEventListener(type, enable, useCapture) {
    if(enable !== false) {
      tapDoc.addEventListener(type, tapEventListeners[type], useCapture);
    } else {
      tapDoc.removeEventListener(type, tapEventListeners[type]);
    }
  }

  function tapClick(e) {
    // simulate a normal click by running the element's click method then focus on it
    var container = tapContainingElement(e.target);
    var ele = tapTargetElement(container);

    if( ionic.tap.requiresNativeClick(ele) || tapPointerMoved ) return false;

    var c = getPointerCoordinates(e);

    void 0;
    triggerMouseEvent('click', ele, c.x, c.y);

    // if it's an input, focus in on the target, otherwise blur
    tapHandleFocus(ele);
  }

  function triggerMouseEvent(type, ele, x, y) {
    // using initMouseEvent instead of MouseEvent for our Android friends
    var clickEvent = document.createEvent("MouseEvents");
    clickEvent.initMouseEvent(type, true, true, window, 1, 0, 0, x, y, false, false, false, false, 0, null);
    clickEvent.isIonicTap = true;
    ele.dispatchEvent(clickEvent);
  }

  function tapClickGateKeeper(e) {
    if(e.target.type == 'submit' && e.detail === 0) {
      // do not prevent click if it came from an "Enter" or "Go" keypress submit
      return;
    }

    // do not allow through any click events that were not created by ionic.tap
    if( (ionic.scroll.isScrolling && ionic.tap.containsOrIsTextInput(e.target) ) ||
      (!e.isIonicTap && !ionic.tap.requiresNativeClick(e.target)) ) {
      void 0;
      e.stopPropagation();

      if( !ionic.tap.isLabelWithTextInput(e.target) ) {
        // labels clicks from native should not preventDefault othersize keyboard will not show on input focus
        e.preventDefault();
      }
      return false;
    }
  }

// MOUSE
  function tapMouseDown(e) {
    if(e.isIonicTap || tapIgnoreEvent(e)) return;

    if(tapEnabledTouchEvents) {
      void 0;
      e.stopPropagation();

      if( (!ionic.tap.isTextInput(e.target) || tapLastTouchTarget !== e.target) && !(/^(select|option)$/i).test(e.target.tagName) ) {
        // If you preventDefault on a text input then you cannot move its text caret/cursor.
        // Allow through only the text input default. However, without preventDefault on an
        // input the 300ms delay can change focus on inputs after the keyboard shows up.
        // The focusin event handles the chance of focus changing after the keyboard shows.
        e.preventDefault();
      }

      return false;
    }

    tapPointerMoved = false;
    tapPointerStart = getPointerCoordinates(e);

    tapEventListener('mousemove');
    ionic.activator.start(e);
  }

  function tapMouseUp(e) {
    if(tapEnabledTouchEvents) {
      e.stopPropagation();
      e.preventDefault();
      return false;
    }

    if( tapIgnoreEvent(e) || (/^(select|option)$/i).test(e.target.tagName) ) return false;

    if( !tapHasPointerMoved(e) ) {
      tapClick(e);
    }
    tapEventListener('mousemove', false);
    ionic.activator.end();
    tapPointerMoved = false;
  }

  function tapMouseMove(e) {
    if( tapHasPointerMoved(e) ) {
      tapEventListener('mousemove', false);
      ionic.activator.end();
      tapPointerMoved = true;
      return false;
    }
  }


// TOUCH
  function tapTouchStart(e) {
    if( tapIgnoreEvent(e) ) return;

    tapPointerMoved = false;

    tapEnableTouchEvents();
    tapPointerStart = getPointerCoordinates(e);

    tapEventListener(tapTouchMoveListener);
    ionic.activator.start(e);

    if( ionic.Platform.isIOS() && ionic.tap.isLabelWithTextInput(e.target) ) {
      // if the tapped element is a label, which has a child input
      // then preventDefault so iOS doesn't ugly auto scroll to the input
      // but do not prevent default on Android or else you cannot move the text caret
      // and do not prevent default on Android or else no virtual keyboard shows up

      var textInput = tapTargetElement( tapContainingElement(e.target) );
      if( textInput !== tapActiveEle ) {
        // don't preventDefault on an already focused input or else iOS's text caret isn't usable
        e.preventDefault();
      }
    }
  }

  function tapTouchEnd(e) {
    if( tapIgnoreEvent(e) ) return;

    tapEnableTouchEvents();
    if( !tapHasPointerMoved(e) ) {
      tapClick(e);

      if( (/^(select|option)$/i).test(e.target.tagName) ) {
        e.preventDefault();
      }
    }

    tapLastTouchTarget = e.target;
    tapTouchCancel();
  }

  function tapTouchMove(e) {
    if( tapHasPointerMoved(e) ) {
      tapPointerMoved = true;
      tapEventListener(tapTouchMoveListener, false);
      ionic.activator.end();
      return false;
    }
  }

  function tapTouchCancel(e) {
    tapEventListener(tapTouchMoveListener, false);
    ionic.activator.end();
    tapPointerMoved = false;
  }

  function tapEnableTouchEvents() {
    tapEnabledTouchEvents = true;
    clearTimeout(tapMouseResetTimer);
    tapMouseResetTimer = setTimeout(function(){
      tapEnabledTouchEvents = false;
    }, 2000);
  }

  function tapIgnoreEvent(e) {
    if(e.isTapHandled) return true;
    e.isTapHandled = true;

    if( ionic.scroll.isScrolling && ionic.tap.containsOrIsTextInput(e.target) ) {
      e.preventDefault();
      return true;
    }
  }

  function tapHandleFocus(ele) {
    tapTouchFocusedInput = null;

    var triggerFocusIn = false;

    if(ele.tagName == 'SELECT') {
      // trick to force Android options to show up
      triggerMouseEvent('mousedown', ele, 0, 0);
      ele.focus && ele.focus();
      triggerFocusIn = true;

    } else if(tapActiveElement() === ele) {
      // already is the active element and has focus
      triggerFocusIn = true;

    } else if( (/^(input|textarea)$/i).test(ele.tagName) ) {
      triggerFocusIn = true;
      ele.focus && ele.focus();
      ele.value = ele.value;
      if( tapEnabledTouchEvents ) {
        tapTouchFocusedInput = ele;
      }

    } else {
      tapFocusOutActive();
    }

    if(triggerFocusIn) {
      tapActiveElement(ele);
      ionic.trigger('ionic.focusin', {
        target: ele
      }, true);
    }
  }

  function tapFocusOutActive() {
    var ele = tapActiveElement();
    if(ele && (/^(input|textarea|select)$/i).test(ele.tagName) ) {
      void 0;
      ele.blur();
    }
    tapActiveElement(null);
  }

  function tapFocusIn(e) {
    // Because a text input doesn't preventDefault (so the caret still works) there's a chance
    // that it's mousedown event 300ms later will change the focus to another element after
    // the keyboard shows up.

    if( tapEnabledTouchEvents &&
      ionic.tap.isTextInput( tapActiveElement() ) &&
      ionic.tap.isTextInput(tapTouchFocusedInput) &&
      tapTouchFocusedInput !== e.target ) {

      // 1) The pointer is from touch events
      // 2) There is an active element which is a text input
      // 3) A text input was just set to be focused on by a touch event
      // 4) A new focus has been set, however the target isn't the one the touch event wanted
      void 0;
      tapTouchFocusedInput.focus();
      tapTouchFocusedInput = null;
    }
    ionic.scroll.isScrolling = false;
  }

  function tapFocusOut() {
    tapActiveElement(null);
  }

  function tapActiveElement(ele) {
    if(arguments.length) {
      tapActiveEle = ele;
    }
    return tapActiveEle || document.activeElement;
  }

  function tapHasPointerMoved(endEvent) {
    if(!endEvent || endEvent.target.nodeType !== 1 || !tapPointerStart || ( tapPointerStart.x === 0 && tapPointerStart.y === 0 )) {
      return false;
    }
    var endCoordinates = getPointerCoordinates(endEvent);

    var hasClassList = !!(endEvent.target.classList && endEvent.target.classList.contains);
    var releaseTolerance = hasClassList & endEvent.target.classList.contains('button') ?
      TAP_RELEASE_BUTTON_TOLERANCE :
      TAP_RELEASE_TOLERANCE;

    return Math.abs(tapPointerStart.x - endCoordinates.x) > releaseTolerance ||
      Math.abs(tapPointerStart.y - endCoordinates.y) > releaseTolerance;
  }

  function getPointerCoordinates(event) {
    // This method can get coordinates for both a mouse click
    // or a touch depending on the given event
    var c = { x:0, y:0 };
    if(event) {
      var touches = event.touches && event.touches.length ? event.touches : [event];
      var e = (event.changedTouches && event.changedTouches[0]) || touches[0];
      if(e) {
        c.x = e.clientX || e.pageX || 0;
        c.y = e.clientY || e.pageY || 0;
      }
    }
    return c;
  }

  function tapContainingElement(ele, allowSelf) {
    var climbEle = ele;
    for(var x=0; x<6; x++) {
      if(!climbEle) break;
      if(climbEle.tagName === 'LABEL') return climbEle;
      climbEle = climbEle.parentElement;
    }
    if(allowSelf !== false) return ele;
  }

  function tapTargetElement(ele) {
    if(ele && ele.tagName === 'LABEL') {
      if(ele.control) return ele.control;

      // older devices do not support the "control" property
      if(ele.querySelector) {
        var control = ele.querySelector('input,textarea,select');
        if(control) return control;
      }
    }
    return ele;
  }

  ionic.DomUtil.ready(function(){
    var ng = typeof angular !== 'undefined' ? angular : null;
    //do nothing for e2e tests
    if (!ng || (ng && !ng.scenario)) {
      ionic.tap.register(document);
    }
  });

  (function(document, ionic) {
    'use strict';

    var queueElements = {};   // elements that should get an active state in XX milliseconds
    var activeElements = {};  // elements that are currently active
    var keyId = 0;            // a counter for unique keys for the above ojects
    var ACTIVATED_CLASS = 'activated';

    ionic.activator = {

      start: function(e) {
        var self = this;

        // when an element is touched/clicked, it climbs up a few
        // parents to see if it is an .item or .button element
        ionic.requestAnimationFrame(function(){
          if ( ionic.tap.requiresNativeClick(e.target) ) return;
          var ele = e.target;
          var eleToActivate;

          for(var x=0; x<4; x++) {
            if(!ele || ele.nodeType !== 1) break;
            if(eleToActivate && ele.classList.contains('item')) {
              eleToActivate = ele;
              break;
            }
            if( ele.tagName == 'A' || ele.tagName == 'BUTTON' || ele.hasAttribute('ng-click') ) {
              eleToActivate = ele;
              break;
            }
            if( ele.classList.contains('button') ) {
              eleToActivate = ele;
              break;
            }
            ele = ele.parentElement;
          }

          if(eleToActivate) {
            // queue that this element should be set to active
            queueElements[keyId] = eleToActivate;

            // in XX milliseconds, set the queued elements to active
            if(e.type === 'touchstart') {
              self._activateTimeout = setTimeout(activateElements, 80);
            } else {
              ionic.requestAnimationFrame(activateElements);
            }

            keyId = (keyId > 19 ? 0 : keyId + 1);
          }

        });
      },

      end: function() {
        // clear out any active/queued elements after XX milliseconds
        clearTimeout(this._activateTimeout);
        setTimeout(clear, 200);
      }

    };

    function clear() {
      // clear out any elements that are queued to be set to active
      queueElements = {};

      // in the next frame, remove the active class from all active elements
      ionic.requestAnimationFrame(deactivateElements);
    }

    function activateElements() {
      // activate all elements in the queue
      for(var key in queueElements) {
        if(queueElements[key]) {
          queueElements[key].classList.add(ACTIVATED_CLASS);
          activeElements[key] = queueElements[key];
        }
      }
      queueElements = {};
    }

    function deactivateElements() {
      for(var key in activeElements) {
        if(activeElements[key]) {
          activeElements[key].classList.remove(ACTIVATED_CLASS);
          delete activeElements[key];
        }
      }
    }

  })(document, ionic);

  (function(ionic) {

    /* for nextUid() function below */
    var uid = ['0','0','0'];

    /**
     * Various utilities used throughout Ionic
     *
     * Some of these are adopted from underscore.js and backbone.js, both also MIT licensed.
     */
    ionic.Utils = {

      arrayMove: function (arr, old_index, new_index) {
        if (new_index >= arr.length) {
          var k = new_index - arr.length;
          while ((k--) + 1) {
            arr.push(undefined);
          }
        }
        arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
        return arr;
      },

      /**
       * Return a function that will be called with the given context
       */
      proxy: function(func, context) {
        var args = Array.prototype.slice.call(arguments, 2);
        return function() {
          return func.apply(context, args.concat(Array.prototype.slice.call(arguments)));
        };
      },

      /**
       * Only call a function once in the given interval.
       *
       * @param func {Function} the function to call
       * @param wait {int} how long to wait before/after to allow function calls
       * @param immediate {boolean} whether to call immediately or after the wait interval
       */
      debounce: function(func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        return function() {
          context = this;
          args = arguments;
          timestamp = new Date();
          var later = function() {
            var last = (new Date()) - timestamp;
            if (last < wait) {
              timeout = setTimeout(later, wait - last);
            } else {
              timeout = null;
              if (!immediate) result = func.apply(context, args);
            }
          };
          var callNow = immediate && !timeout;
          if (!timeout) {
            timeout = setTimeout(later, wait);
          }
          if (callNow) result = func.apply(context, args);
          return result;
        };
      },

      /**
       * Throttle the given fun, only allowing it to be
       * called at most every `wait` ms.
       */
      throttle: function(func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        options || (options = {});
        var later = function() {
          previous = options.leading === false ? 0 : Date.now();
          timeout = null;
          result = func.apply(context, args);
        };
        return function() {
          var now = Date.now();
          if (!previous && options.leading === false) previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
      },
      // Borrowed from Backbone.js's extend
      // Helper function to correctly set up the prototype chain, for subclasses.
      // Similar to `goog.inherits`, but uses a hash of prototype properties and
      // class properties to be extended.
      inherit: function(protoProps, staticProps) {
        var parent = this;
        var child;

        // The constructor function for the new subclass is either defined by you
        // (the "constructor" property in your `extend` definition), or defaulted
        // by us to simply call the parent's constructor.
        if (protoProps && protoProps.hasOwnProperty('constructor')) {
          child = protoProps.constructor;
        } else {
          child = function(){ return parent.apply(this, arguments); };
        }

        // Add static properties to the constructor function, if supplied.
        ionic.extend(child, parent, staticProps);

        // Set the prototype chain to inherit from `parent`, without calling
        // `parent`'s constructor function.
        var Surrogate = function(){ this.constructor = child; };
        Surrogate.prototype = parent.prototype;
        child.prototype = new Surrogate();

        // Add prototype properties (instance properties) to the subclass,
        // if supplied.
        if (protoProps) ionic.extend(child.prototype, protoProps);

        // Set a convenience property in case the parent's prototype is needed
        // later.
        child.__super__ = parent.prototype;

        return child;
      },

      // Extend adapted from Underscore.js
      extend: function(obj) {
        var args = Array.prototype.slice.call(arguments, 1);
        for(var i = 0; i < args.length; i++) {
          var source = args[i];
          if (source) {
            for (var prop in source) {
              obj[prop] = source[prop];
            }
          }
        }
        return obj;
      },

      /**
       * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric
       * characters such as '012ABC'. The reason why we are not using simply a number counter is that
       * the number string gets longer over time, and it can also overflow, where as the nextId
       * will grow much slower, it is a string, and it will never overflow.
       *
       * @returns an unique alpha-numeric string
       */
      nextUid: function() {
        var index = uid.length;
        var digit;

        while(index) {
          index--;
          digit = uid[index].charCodeAt(0);
          if (digit == 57 /*'9'*/) {
            uid[index] = 'A';
            return uid.join('');
          }
          if (digit == 90  /*'Z'*/) {
            uid[index] = '0';
          } else {
            uid[index] = String.fromCharCode(digit + 1);
            return uid.join('');
          }
        }
        uid.unshift('0');
        return uid.join('');
      }
    };

    // Bind a few of the most useful functions to the ionic scope
    ionic.inherit = ionic.Utils.inherit;
    ionic.extend = ionic.Utils.extend;
    ionic.throttle = ionic.Utils.throttle;
    ionic.proxy = ionic.Utils.proxy;
    ionic.debounce = ionic.Utils.debounce;

  })(window.ionic);

  /**
   * @ngdoc page
   * @name keyboard
   * @module ionic
   * @description
   * On both Android and iOS, Ionic will attempt to prevent the keyboard from
   * obscuring inputs and focusable elements when it appears by scrolling them
   * into view.  In order for this to work, any focusable elements must be within
   * a [Scroll View](http://ionicframework.com/docs/api/directive/ionScroll/)
   * or a directive such as [Content](http://ionicframework.com/docs/api/directive/ionContent/)
   * that has a Scroll View.
   *
   * It will also attempt to prevent the native overflow scrolling on focus,
   * which can cause layout issues such as pushing headers up and out of view.
   *
   * The keyboard fixes work best in conjunction with the
   * [Ionic Keyboard Plugin](https://github.com/driftyco/ionic-plugins-keyboard),
   * although it will perform reasonably well without.  However, if you are using
   * Cordova there is no reason not to use the plugin.
   *
   * ### Hide when keyboard shows
   *
   * To hide an element when the keyboard is open, add the class `hide-on-keyboard-open`.
   *
   * ```html
   * <div class="hide-on-keyboard-open">
   *   <div id="google-map"></div>
   * </div>
   * ```
   * ----------
   *
   * ### Plugin Usage
   * Information on using the plugin can be found at
   * [https://github.com/driftyco/ionic-plugins-keyboard](https://github.com/driftyco/ionic-plugins-keyboard).
   *
   * ----------
   *
   * ### Android Notes
   * - If your app is running in fullscreen, i.e. you have
   *   `<preference name="Fullscreen" value="true" />` in your `config.xml` file
   *   you will need to set `ionic.Platform.isFullScreen = true` manually.
   *
   * - You can configure the behavior of the web view when the keyboard shows by setting
   *   [android:windowSoftInputMode](http://developer.android.com/reference/android/R.attr.html#windowSoftInputMode)
   *   to either `adjustPan`, `adjustResize` or `adjustNothing` in your app's
   *   activity in `AndroidManifest.xml`. `adjustResize` is the recommended setting
   *   for Ionic, but if for some reason you do use `adjustPan` you will need to
   *   set `ionic.Platform.isFullScreen = true`.
   *
   *   ```xml
   *   <activity android:windowSoftInputMode="adjustResize">
   *
   *   ```
   *
   * ### iOS Notes
   * - If the content of your app (including the header) is being pushed up and
   *   out of view on input focus, try setting `cordova.plugins.Keyboard.disableScroll(true)`.
   *   This does **not** disable scrolling in the Ionic scroll view, rather it
   *   disables the native overflow scrolling that happens automatically as a
   *   result of focusing on inputs below the keyboard.
   *
   */

  var keyboardViewportHeight = window.innerHeight;
  var keyboardIsOpen;
  var keyboardActiveElement;
  var keyboardFocusOutTimer;
  var keyboardFocusInTimer;
  var keyboardLastShow = 0;

  var KEYBOARD_OPEN_CSS = 'keyboard-open';
  var SCROLL_CONTAINER_CSS = 'scroll';

  ionic.keyboard = {
    isOpen: false,
    height: null,
    landscape: false,
  };

  function keyboardInit() {
    if( keyboardHasPlugin() ) {
      window.addEventListener('native.keyboardshow', keyboardNativeShow);
      window.addEventListener('native.keyboardhide', keyboardFocusOut);

      //deprecated
      window.addEventListener('native.showkeyboard', keyboardNativeShow);
      window.addEventListener('native.hidekeyboard', keyboardFocusOut);
    }
    else {
      document.body.addEventListener('focusout', keyboardFocusOut);
    }

    document.body.addEventListener('ionic.focusin', keyboardBrowserFocusIn);
    document.body.addEventListener('focusin', keyboardBrowserFocusIn);

    document.body.addEventListener('orientationchange', keyboardOrientationChange);

    document.removeEventListener('touchstart', keyboardInit);
  }

  function keyboardNativeShow(e) {
    clearTimeout(keyboardFocusOutTimer);
    ionic.keyboard.height = e.keyboardHeight;
  }

  function keyboardBrowserFocusIn(e) {
    if( !e.target || !ionic.tap.isTextInput(e.target) || ionic.tap.isDateInput(e.target) || !keyboardIsWithinScroll(e.target) ) return;

    document.addEventListener('keydown', keyboardOnKeyDown, false);

    document.body.scrollTop = 0;
    document.body.querySelector('.scroll-content').scrollTop = 0;

    keyboardActiveElement = e.target;

    keyboardSetShow(e);
  }

  function keyboardSetShow(e) {
    clearTimeout(keyboardFocusInTimer);
    clearTimeout(keyboardFocusOutTimer);

    keyboardFocusInTimer = setTimeout(function(){
      if ( keyboardLastShow + 350 > Date.now() ) return;
      keyboardLastShow = Date.now();
      var keyboardHeight;
      var elementBounds = keyboardActiveElement.getBoundingClientRect();
      var count = 0;

      var pollKeyboardHeight = setInterval(function(){

        keyboardHeight = keyboardGetHeight();
        if (count > 10){
          clearInterval(pollKeyboardHeight);
          //waited long enough, just guess
          keyboardHeight = 275;
        }
        if (keyboardHeight){
          keyboardShow(e.target, elementBounds.top, elementBounds.bottom, keyboardViewportHeight, keyboardHeight);
          clearInterval(pollKeyboardHeight);
        }
        count++;

      }, 100);
    }, 32);
  }

  function keyboardShow(element, elementTop, elementBottom, viewportHeight, keyboardHeight) {
    var details = {
      target: element,
      elementTop: Math.round(elementTop),
      elementBottom: Math.round(elementBottom),
      keyboardHeight: keyboardHeight,
      viewportHeight: viewportHeight
    };

    details.hasPlugin = keyboardHasPlugin();

    details.contentHeight = viewportHeight - keyboardHeight;

    void 0;

    // figure out if the element is under the keyboard
    details.isElementUnderKeyboard = (details.elementBottom > details.contentHeight);

    ionic.keyboard.isOpen = true;

    // send event so the scroll view adjusts
    keyboardActiveElement = element;
    ionic.trigger('scrollChildIntoView', details, true);

    ionic.requestAnimationFrame(function(){
      document.body.classList.add(KEYBOARD_OPEN_CSS);
    });

    // any showing part of the document that isn't within the scroll the user
    // could touchmove and cause some ugly changes to the app, so disable
    // any touchmove events while the keyboard is open using e.preventDefault()
    document.addEventListener('touchmove', keyboardPreventDefault, false);

    return details;
  }

  function keyboardFocusOut(e) {
    clearTimeout(keyboardFocusOutTimer);

    keyboardFocusOutTimer = setTimeout(keyboardHide, 350);
  }

  function keyboardHide() {
    void 0;
    ionic.keyboard.isOpen = false;

    ionic.trigger('resetScrollView', {
      target: keyboardActiveElement
    }, true);

    ionic.requestAnimationFrame(function(){
      document.body.classList.remove(KEYBOARD_OPEN_CSS);
    });

    // the keyboard is gone now, remove the touchmove that disables native scroll
    document.removeEventListener('touchmove', keyboardPreventDefault);
    document.removeEventListener('keydown', keyboardOnKeyDown);
  }

  function keyboardUpdateViewportHeight() {
    if( window.innerHeight > keyboardViewportHeight ) {
      keyboardViewportHeight = window.innerHeight;
    }
  }

  function keyboardOnKeyDown(e) {
    if( ionic.scroll.isScrolling ) {
      keyboardPreventDefault(e);
    }
  }

  function keyboardPreventDefault(e) {
    if( e.target.tagName !== 'TEXTAREA' ) {
      e.preventDefault();
    }
  }

  function keyboardOrientationChange() {
    var updatedViewportHeight = window.innerHeight;

    //too slow, have to wait for updated height
    if (updatedViewportHeight === keyboardViewportHeight){
      var count = 0;
      var pollViewportHeight = setInterval(function(){
        //give up
        if (count > 10){
          clearInterval(pollViewportHeight);
        }

        updatedViewportHeight = window.innerHeight;

        if (updatedViewportHeight !== keyboardViewportHeight){
          if (updatedViewportHeight < keyboardViewportHeight){
            ionic.keyboard.landscape = true;
          }
          else {
            ionic.keyboard.landscape = false;
          }
          keyboardViewportHeight = updatedViewportHeight;
          clearInterval(pollViewportHeight);
        }
        count++;

      }, 50);
    }
    else {
      keyboardViewportHeight = updatedViewportHeight;
    }
  }

  function keyboardGetHeight() {
    // check if we are already have a keyboard height from the plugin
    if ( ionic.keyboard.height ) {
      return ionic.keyboard.height;
    }

    if ( ionic.Platform.isAndroid() ){
      //should be using the plugin, no way to know how big the keyboard is, so guess
      if ( ionic.Platform.isFullScreen ){
        return 275;
      }
      //otherwise, wait for the screen to resize
      if ( window.innerHeight < keyboardViewportHeight ){
        return keyboardViewportHeight - window.innerHeight;
      }
      else {
        return 0;
      }
    }

    // fallback for when its the webview without the plugin
    // or for just the standard web browser
    if( ionic.Platform.isIOS() ) {
      if ( ionic.keyboard.landscape ){
        return 206;
      }

      if (!ionic.Platform.isWebView()){
        return 216;
      }

      return 260;
    }

    // safe guess
    return 275;
  }

  function keyboardIsWithinScroll(ele) {
    while(ele) {
      if(ele.classList.contains(SCROLL_CONTAINER_CSS)) {
        return true;
      }
      ele = ele.parentElement;
    }
    return false;
  }

  function keyboardHasPlugin() {
    return !!(window.cordova && cordova.plugins && cordova.plugins.Keyboard);
  }

  ionic.Platform.ready(function() {
    keyboardUpdateViewportHeight();

    // Android sometimes reports bad innerHeight on window.load
    // try it again in a lil bit to play it safe
    setTimeout(keyboardUpdateViewportHeight, 999);

    // only initialize the adjustments for the virtual keyboard
    // if a touchstart event happens
    document.addEventListener('touchstart', keyboardInit, false);
  });



  var viewportTag;
  var viewportProperties = {};

  ionic.viewport = {
    orientation: function() {
      // 0 = Portrait
      // 90 = Landscape
      // not using window.orientation because each device has a different implementation
      return (window.innerWidth > window.innerHeight ? 90 : 0);
    }
  };

  function viewportLoadTag() {
    var x;

    for(x=0; x<document.head.children.length; x++) {
      if(document.head.children[x].name == 'viewport') {
        viewportTag = document.head.children[x];
        break;
      }
    }

    if(viewportTag) {
      var props = viewportTag.content.toLowerCase().replace(/\s+/g, '').split(',');
      var keyValue;
      for(x=0; x<props.length; x++) {
        if(props[x]) {
          keyValue = props[x].split('=');
          viewportProperties[ keyValue[0] ] = (keyValue.length > 1 ? keyValue[1] : '_');
        }
      }
      viewportUpdate();
    }
  }

  function viewportUpdate() {
    // unit tests in viewport.unit.js

    var initWidth = viewportProperties.width;
    var initHeight = viewportProperties.height;
    var p = ionic.Platform;
    var version = p.version();
    var DEVICE_WIDTH = 'device-width';
    var DEVICE_HEIGHT = 'device-height';
    var orientation = ionic.viewport.orientation();

    // Most times we're removing the height and adding the width
    // So this is the default to start with, then modify per platform/version/oreintation
    delete viewportProperties.height;
    viewportProperties.width = DEVICE_WIDTH;

    if( p.isIPad() ) {
      // iPad

      if( version > 7 ) {
        // iPad >= 7.1
        // https://issues.apache.org/jira/browse/CB-4323
        delete viewportProperties.width;

      } else {
        // iPad <= 7.0

        if( p.isWebView() ) {
          // iPad <= 7.0 WebView

          if( orientation == 90 ) {
            // iPad <= 7.0 WebView Landscape
            viewportProperties.height = '0';

          } else if(version == 7) {
            // iPad <= 7.0 WebView Portait
            viewportProperties.height = DEVICE_HEIGHT;
          }
        } else {
          // iPad <= 6.1 Browser
          if(version < 7) {
            viewportProperties.height = '0';
          }
        }
      }

    } else if( p.isIOS() ) {
      // iPhone

      if( p.isWebView() ) {
        // iPhone WebView

        if(version > 7) {
          // iPhone >= 7.1 WebView
          delete viewportProperties.width;

        } else if(version < 7) {
          // iPhone <= 6.1 WebView
          // if height was set it needs to get removed with this hack for <= 6.1
          if( initHeight ) viewportProperties.height = '0';

        } else if(version == 7) {
          //iPhone == 7.0 WebView
          viewportProperties.height = DEVICE_HEIGHT;
        }

      } else {
        // iPhone Browser

        if (version < 7) {
          // iPhone <= 6.1 Browser
          // if height was set it needs to get removed with this hack for <= 6.1
          if( initHeight ) viewportProperties.height = '0';
        }
      }

    }

    // only update the viewport tag if there was a change
    if(initWidth !== viewportProperties.width || initHeight !== viewportProperties.height) {
      viewportTagUpdate();
    }
  }

  function viewportTagUpdate() {
    var key, props = [];
    for(key in viewportProperties) {
      if( viewportProperties[key] ) {
        props.push(key + (viewportProperties[key] == '_' ? '' : '=' + viewportProperties[key]) );
      }
    }

    viewportTag.content = props.join(', ');
  }

  ionic.Platform.ready(function() {
    viewportLoadTag();

    window.addEventListener("orientationchange", function(){
      setTimeout(viewportUpdate, 1000);
    }, false);
  });

  (function(ionic) {
    'use strict';
    ionic.views.View = function() {
      this.initialize.apply(this, arguments);
    };

    ionic.views.View.inherit = ionic.inherit;

    ionic.extend(ionic.views.View.prototype, {
      initialize: function() {}
    });

  })(window.ionic);

  /*
   * Scroller
   * http://github.com/zynga/scroller
   *
   * Copyright 2011, Zynga Inc.
   * Licensed under the MIT License.
   * https://raw.github.com/zynga/scroller/master/MIT-LICENSE.txt
   *
   * Based on the work of: Unify Project (unify-project.org)
   * http://unify-project.org
   * Copyright 2011, Deutsche Telekom AG
   * License: MIT + Apache (V2)
   */

  /* jshint eqnull: true */

  /**
   * Generic animation class with support for dropped frames both optional easing and duration.
   *
   * Optional duration is useful when the lifetime is defined by another condition than time
   * e.g. speed of an animating object, etc.
   *
   * Dropped frame logic allows to keep using the same updater logic independent from the actual
   * rendering. This eases a lot of cases where it might be pretty complex to break down a state
   * based on the pure time difference.
   */
  var zyngaCore = { effect: {} };
  (function(global) {
    var time = Date.now || function() {
      return +new Date();
    };
    var desiredFrames = 60;
    var millisecondsPerSecond = 1000;
    var running = {};
    var counter = 1;

    zyngaCore.effect.Animate = {

      /**
       * A requestAnimationFrame wrapper / polyfill.
       *
       * @param callback {Function} The callback to be invoked before the next repaint.
       * @param root {HTMLElement} The root element for the repaint
       */
      requestAnimationFrame: (function() {

        // Check for request animation Frame support
        var requestFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame;
        var isNative = !!requestFrame;

        if (requestFrame && !/requestAnimationFrame\(\)\s*\{\s*\[native code\]\s*\}/i.test(requestFrame.toString())) {
          isNative = false;
        }

        if (isNative) {
          return function(callback, root) {
            requestFrame(callback, root);
          };
        }

        var TARGET_FPS = 60;
        var requests = {};
        var requestCount = 0;
        var rafHandle = 1;
        var intervalHandle = null;
        var lastActive = +new Date();

        return function(callback, root) {
          var callbackHandle = rafHandle++;

          // Store callback
          requests[callbackHandle] = callback;
          requestCount++;

          // Create timeout at first request
          if (intervalHandle === null) {

            intervalHandle = setInterval(function() {

              var time = +new Date();
              var currentRequests = requests;

              // Reset data structure before executing callbacks
              requests = {};
              requestCount = 0;

              for(var key in currentRequests) {
                if (currentRequests.hasOwnProperty(key)) {
                  currentRequests[key](time);
                  lastActive = time;
                }
              }

              // Disable the timeout when nothing happens for a certain
              // period of time
              if (time - lastActive > 2500) {
                clearInterval(intervalHandle);
                intervalHandle = null;
              }

            }, 1000 / TARGET_FPS);
          }

          return callbackHandle;
        };

      })(),


      /**
       * Stops the given animation.
       *
       * @param id {Integer} Unique animation ID
       * @return {Boolean} Whether the animation was stopped (aka, was running before)
       */
      stop: function(id) {
        var cleared = running[id] != null;
        if (cleared) {
          running[id] = null;
        }

        return cleared;
      },


      /**
       * Whether the given animation is still running.
       *
       * @param id {Integer} Unique animation ID
       * @return {Boolean} Whether the animation is still running
       */
      isRunning: function(id) {
        return running[id] != null;
      },


      /**
       * Start the animation.
       *
       * @param stepCallback {Function} Pointer to function which is executed on every step.
       *   Signature of the method should be `function(percent, now, virtual) { return continueWithAnimation; }`
       * @param verifyCallback {Function} Executed before every animation step.
       *   Signature of the method should be `function() { return continueWithAnimation; }`
       * @param completedCallback {Function}
       *   Signature of the method should be `function(droppedFrames, finishedAnimation) {}`
       * @param duration {Integer} Milliseconds to run the animation
       * @param easingMethod {Function} Pointer to easing function
       *   Signature of the method should be `function(percent) { return modifiedValue; }`
       * @param root {Element} Render root, when available. Used for internal
       *   usage of requestAnimationFrame.
       * @return {Integer} Identifier of animation. Can be used to stop it any time.
       */
      start: function(stepCallback, verifyCallback, completedCallback, duration, easingMethod, root) {

        var start = time();
        var lastFrame = start;
        var percent = 0;
        var dropCounter = 0;
        var id = counter++;

        if (!root) {
          root = document.body;
        }

        // Compacting running db automatically every few new animations
        if (id % 20 === 0) {
          var newRunning = {};
          for (var usedId in running) {
            newRunning[usedId] = true;
          }
          running = newRunning;
        }

        // This is the internal step method which is called every few milliseconds
        var step = function(virtual) {

          // Normalize virtual value
          var render = virtual !== true;

          // Get current time
          var now = time();

          // Verification is executed before next animation step
          if (!running[id] || (verifyCallback && !verifyCallback(id))) {

            running[id] = null;
            completedCallback && completedCallback(desiredFrames - (dropCounter / ((now - start) / millisecondsPerSecond)), id, false);
            return;

          }

          // For the current rendering to apply let's update omitted steps in memory.
          // This is important to bring internal state variables up-to-date with progress in time.
          if (render) {

            var droppedFrames = Math.round((now - lastFrame) / (millisecondsPerSecond / desiredFrames)) - 1;
            for (var j = 0; j < Math.min(droppedFrames, 4); j++) {
              step(true);
              dropCounter++;
            }

          }

          // Compute percent value
          if (duration) {
            percent = (now - start) / duration;
            if (percent > 1) {
              percent = 1;
            }
          }

          // Execute step callback, then...
          var value = easingMethod ? easingMethod(percent) : percent;
          if ((stepCallback(value, now, render) === false || percent === 1) && render) {
            running[id] = null;
            completedCallback && completedCallback(desiredFrames - (dropCounter / ((now - start) / millisecondsPerSecond)), id, percent === 1 || duration == null);
          } else if (render) {
            lastFrame = now;
            zyngaCore.effect.Animate.requestAnimationFrame(step, root);
          }
        };

        // Mark as running
        running[id] = true;

        // Init first step
        zyngaCore.effect.Animate.requestAnimationFrame(step, root);

        // Return unique animation ID
        return id;
      }
    };
  })(this);

  /*
   * Scroller
   * http://github.com/zynga/scroller
   *
   * Copyright 2011, Zynga Inc.
   * Licensed under the MIT License.
   * https://raw.github.com/zynga/scroller/master/MIT-LICENSE.txt
   *
   * Based on the work of: Unify Project (unify-project.org)
   * http://unify-project.org
   * Copyright 2011, Deutsche Telekom AG
   * License: MIT + Apache (V2)
   */

  var Scroller;

  (function(ionic) {
    var NOOP = function(){};

    // Easing Equations (c) 2003 Robert Penner, all rights reserved.
    // Open source under the BSD License.

    /**
     * @param pos {Number} position between 0 (start of effect) and 1 (end of effect)
     **/
    var easeOutCubic = function(pos) {
      return (Math.pow((pos - 1), 3) + 1);
    };

    /**
     * @param pos {Number} position between 0 (start of effect) and 1 (end of effect)
     **/
    var easeInOutCubic = function(pos) {
      if ((pos /= 0.5) < 1) {
        return 0.5 * Math.pow(pos, 3);
      }

      return 0.5 * (Math.pow((pos - 2), 3) + 2);
    };


    /**
     * ionic.views.Scroll
     * A powerful scroll view with support for bouncing, pull to refresh, and paging.
     * @param   {Object}        options options for the scroll view
     * @class A scroll view system
     * @memberof ionic.views
     */
    ionic.views.Scroll = ionic.views.View.inherit({
      initialize: function(options) {
        var self = this;

        this.__container = options.el;
        this.__content = options.el.firstElementChild;

        //Remove any scrollTop attached to these elements; they are virtual scroll now
        //This also stops on-load-scroll-to-window.location.hash that the browser does
        setTimeout(function() {
          if (self.__container && self.__content) {
            self.__container.scrollTop = 0;
            self.__content.scrollTop = 0;
          }
        });

        this.options = {

          /** Disable scrolling on x-axis by default */
          scrollingX: false,
          scrollbarX: true,

          /** Enable scrolling on y-axis */
          scrollingY: true,
          scrollbarY: true,

          startX: 0,
          startY: 0,

          /** The amount to dampen mousewheel events */
          wheelDampen: 6,

          /** The minimum size the scrollbars scale to while scrolling */
          minScrollbarSizeX: 5,
          minScrollbarSizeY: 5,

          /** Scrollbar fading after scrolling */
          scrollbarsFade: true,
          scrollbarFadeDelay: 300,
          /** The initial fade delay when the pane is resized or initialized */
          scrollbarResizeFadeDelay: 1000,

          /** Enable animations for deceleration, snap back, zooming and scrolling */
          animating: true,

          /** duration for animations triggered by scrollTo/zoomTo */
          animationDuration: 250,

          /** Enable bouncing (content can be slowly moved outside and jumps back after releasing) */
          bouncing: true,

          /** Enable locking to the main axis if user moves only slightly on one of them at start */
          locking: true,

          /** Enable pagination mode (switching between full page content panes) */
          paging: false,

          /** Enable snapping of content to a configured pixel grid */
          snapping: false,

          /** Enable zooming of content via API, fingers and mouse wheel */
          zooming: false,

          /** Minimum zoom level */
          minZoom: 0.5,

          /** Maximum zoom level */
          maxZoom: 3,

          /** Multiply or decrease scrolling speed **/
          speedMultiplier: 1,

          deceleration: 0.97,

          /** Callback that is fired on the later of touch end or deceleration end,
           provided that another scrolling action has not begun. Used to know
           when to fade out a scrollbar. */
          scrollingComplete: NOOP,

          /** This configures the amount of change applied to deceleration when reaching boundaries  **/
          penetrationDeceleration : 0.03,

          /** This configures the amount of change applied to acceleration when reaching boundaries  **/
          penetrationAcceleration : 0.08,

          // The ms interval for triggering scroll events
          scrollEventInterval: 10,

          getContentWidth: function() {
            return Math.max(self.__content.scrollWidth, self.__content.offsetWidth);
          },
          getContentHeight: function() {
            return Math.max(self.__content.scrollHeight, self.__content.offsetHeight + self.__content.offsetTop);
          }
        };

        for (var key in options) {
          this.options[key] = options[key];
        }

        this.hintResize = ionic.debounce(function() {
          self.resize();
        }, 1000, true);

        this.onScroll = function() {

          if(!ionic.scroll.isScrolling) {
            setTimeout(self.setScrollStart, 50);
          } else {
            clearTimeout(self.scrollTimer);
            self.scrollTimer = setTimeout(self.setScrollStop, 80);
          }

        };

        this.setScrollStart = function() {
          ionic.scroll.isScrolling = Math.abs(ionic.scroll.lastTop - self.__scrollTop) > 1;
          clearTimeout(self.scrollTimer);
          self.scrollTimer = setTimeout(self.setScrollStop, 80);
        };

        this.setScrollStop = function() {
          ionic.scroll.isScrolling = false;
          ionic.scroll.lastTop = self.__scrollTop;
        };

        this.triggerScrollEvent = ionic.throttle(function() {
          self.onScroll();
          ionic.trigger('scroll', {
            scrollTop: self.__scrollTop,
            scrollLeft: self.__scrollLeft,
            target: self.__container
          });
        }, this.options.scrollEventInterval);

        this.triggerScrollEndEvent = function() {
          ionic.trigger('scrollend', {
            scrollTop: self.__scrollTop,
            scrollLeft: self.__scrollLeft,
            target: self.__container
          });
        };

        this.__scrollLeft = this.options.startX;
        this.__scrollTop = this.options.startY;

        // Get the render update function, initialize event handlers,
        // and calculate the size of the scroll container
        this.__callback = this.getRenderFn();
        this.__initEventHandlers();
        this.__createScrollbars();

      },

      run: function() {
        this.resize();

        // Fade them out
        this.__fadeScrollbars('out', this.options.scrollbarResizeFadeDelay);
      },



      /*
       ---------------------------------------------------------------------------
       INTERNAL FIELDS :: STATUS
       ---------------------------------------------------------------------------
       */

      /** Whether only a single finger is used in touch handling */
      __isSingleTouch: false,

      /** Whether a touch event sequence is in progress */
      __isTracking: false,

      /** Whether a deceleration animation went to completion. */
      __didDecelerationComplete: false,

      /**
       * Whether a gesture zoom/rotate event is in progress. Activates when
       * a gesturestart event happens. This has higher priority than dragging.
       */
      __isGesturing: false,

      /**
       * Whether the user has moved by such a distance that we have enabled
       * dragging mode. Hint: It's only enabled after some pixels of movement to
       * not interrupt with clicks etc.
       */
      __isDragging: false,

      /**
       * Not touching and dragging anymore, and smoothly animating the
       * touch sequence using deceleration.
       */
      __isDecelerating: false,

      /**
       * Smoothly animating the currently configured change
       */
      __isAnimating: false,



      /*
       ---------------------------------------------------------------------------
       INTERNAL FIELDS :: DIMENSIONS
       ---------------------------------------------------------------------------
       */

      /** Available outer left position (from document perspective) */
      __clientLeft: 0,

      /** Available outer top position (from document perspective) */
      __clientTop: 0,

      /** Available outer width */
      __clientWidth: 0,

      /** Available outer height */
      __clientHeight: 0,

      /** Outer width of content */
      __contentWidth: 0,

      /** Outer height of content */
      __contentHeight: 0,

      /** Snapping width for content */
      __snapWidth: 100,

      /** Snapping height for content */
      __snapHeight: 100,

      /** Height to assign to refresh area */
      __refreshHeight: null,

      /** Whether the refresh process is enabled when the event is released now */
      __refreshActive: false,

      /** Callback to execute on activation. This is for signalling the user about a refresh is about to happen when he release */
      __refreshActivate: null,

      /** Callback to execute on deactivation. This is for signalling the user about the refresh being cancelled */
      __refreshDeactivate: null,

      /** Callback to execute to start the actual refresh. Call {@link #refreshFinish} when done */
      __refreshStart: null,

      /** Zoom level */
      __zoomLevel: 1,

      /** Scroll position on x-axis */
      __scrollLeft: 0,

      /** Scroll position on y-axis */
      __scrollTop: 0,

      /** Maximum allowed scroll position on x-axis */
      __maxScrollLeft: 0,

      /** Maximum allowed scroll position on y-axis */
      __maxScrollTop: 0,

      /* Scheduled left position (final position when animating) */
      __scheduledLeft: 0,

      /* Scheduled top position (final position when animating) */
      __scheduledTop: 0,

      /* Scheduled zoom level (final scale when animating) */
      __scheduledZoom: 0,



      /*
       ---------------------------------------------------------------------------
       INTERNAL FIELDS :: LAST POSITIONS
       ---------------------------------------------------------------------------
       */

      /** Left position of finger at start */
      __lastTouchLeft: null,

      /** Top position of finger at start */
      __lastTouchTop: null,

      /** Timestamp of last move of finger. Used to limit tracking range for deceleration speed. */
      __lastTouchMove: null,

      /** List of positions, uses three indexes for each state: left, top, timestamp */
      __positions: null,



      /*
       ---------------------------------------------------------------------------
       INTERNAL FIELDS :: DECELERATION SUPPORT
       ---------------------------------------------------------------------------
       */

      /** Minimum left scroll position during deceleration */
      __minDecelerationScrollLeft: null,

      /** Minimum top scroll position during deceleration */
      __minDecelerationScrollTop: null,

      /** Maximum left scroll position during deceleration */
      __maxDecelerationScrollLeft: null,

      /** Maximum top scroll position during deceleration */
      __maxDecelerationScrollTop: null,

      /** Current factor to modify horizontal scroll position with on every step */
      __decelerationVelocityX: null,

      /** Current factor to modify vertical scroll position with on every step */
      __decelerationVelocityY: null,


      /** the browser-specific property to use for transforms */
      __transformProperty: null,
      __perspectiveProperty: null,

      /** scrollbar indicators */
      __indicatorX: null,
      __indicatorY: null,

      /** Timeout for scrollbar fading */
      __scrollbarFadeTimeout: null,

      /** whether we've tried to wait for size already */
      __didWaitForSize: null,
      __sizerTimeout: null,

      __initEventHandlers: function() {
        var self = this;

        // Event Handler
        var container = this.__container;

        //Broadcasted when keyboard is shown on some platforms.
        //See js/utils/keyboard.js
        container.addEventListener('scrollChildIntoView', function(e) {

          //distance from bottom of scrollview to top of viewport
          var scrollBottomOffsetToTop;

          if( !self.isScrolledIntoView ) {
            // shrink scrollview so we can actually scroll if the input is hidden
            // if it isn't shrink so we can scroll to inputs under the keyboard
            if (ionic.Platform.isIOS() || ionic.Platform.isFullScreen){
              // if there are things below the scroll view account for them and
              // subtract them from the keyboard height when resizing
              scrollBottomOffsetToTop = container.getBoundingClientRect().bottom;
              var scrollBottomOffsetToBottom = e.detail.viewportHeight - scrollBottomOffsetToTop;
              var keyboardOffset = Math.max(0, e.detail.keyboardHeight - scrollBottomOffsetToBottom);
              container.style.height = (container.clientHeight - keyboardOffset) + "px";
              container.style.overflow = "visible";
              //update scroll view
              self.resize();
            }
            self.isScrolledIntoView = true;
          }

          //If the element is positioned under the keyboard...
          if( e.detail.isElementUnderKeyboard ) {
            var delay;
            // Wait on android for web view to resize
            if ( ionic.Platform.isAndroid() && !ionic.Platform.isFullScreen ) {
              // android y u resize so slow
              if ( ionic.Platform.version() < 4.4) {
                delay = 500;
              } else {
                // probably overkill for chrome
                delay = 350;
              }
            } else {
              delay = 80;
            }

            //Put element in middle of visible screen
            //Wait for android to update view height and resize() to reset scroll position
            ionic.scroll.isScrolling = true;
            setTimeout(function(){
              //middle of the scrollview, where we want to scroll to
              var scrollMidpointOffset = container.clientHeight * 0.5;

              scrollBottomOffsetToTop = container.getBoundingClientRect().bottom;
              //distance from top of focused element to the bottom of the scroll view
              var elementTopOffsetToScrollBottom = e.detail.elementTop - scrollBottomOffsetToTop;

              var scrollTop = elementTopOffsetToScrollBottom  + scrollMidpointOffset;

              if (scrollTop > 0){
                ionic.tap.cloneFocusedInput(container, self);
                self.scrollBy(0, scrollTop, true);
                self.onScroll();
              }
            }, delay);
          }

          //Only the first scrollView parent of the element that broadcasted this event
          //(the active element that needs to be shown) should receive this event
          e.stopPropagation();
        });

        container.addEventListener('resetScrollView', function(e) {
          //return scrollview to original height once keyboard has hidden
          self.isScrolledIntoView = false;
          container.style.height = "";
          container.style.overflow = "";
          self.resize();
          ionic.scroll.isScrolling = false;
        });

        function getEventTouches(e) {
          return e.touches && e.touches.length ? e.touches : [{
            pageX: e.pageX,
            pageY: e.pageY
          }];
        }

        self.touchStart = function(e) {
          self.startCoordinates = getPointerCoordinates(e);

          if ( ionic.tap.ignoreScrollStart(e) ) {
            return;
          }

          self.__isDown = true;

          if( ionic.tap.containsOrIsTextInput(e.target) || e.target.tagName === 'SELECT' ) {
            // do not start if the target is a text input
            // if there is a touchmove on this input, then we can start the scroll
            self.__hasStarted = false;
            return;
          }

          self.__isSelectable = true;
          self.__enableScrollY = true;
          self.__hasStarted = true;
          self.doTouchStart(getEventTouches(e), e.timeStamp);
          e.preventDefault();
        };

        self.touchMove = function(e) {
          if(!self.__isDown ||
            e.defaultPrevented ||
            (e.target.tagName === 'TEXTAREA' && e.target.parentElement.querySelector(':focus')) ) {
            return;
          }

          if( !self.__hasStarted && ( ionic.tap.containsOrIsTextInput(e.target) || e.target.tagName === 'SELECT' ) ) {
            // the target is a text input and scroll has started
            // since the text input doesn't start on touchStart, do it here
            self.__hasStarted = true;
            self.doTouchStart(getEventTouches(e), e.timeStamp);
            e.preventDefault();
            return;
          }

          if(self.startCoordinates) {
            // we have start coordinates, so get this touch move's current coordinates
            var currentCoordinates = getPointerCoordinates(e);

            if( self.__isSelectable &&
              ionic.tap.isTextInput(e.target) &&
              Math.abs(self.startCoordinates.x - currentCoordinates.x) > 20 ) {
              // user slid the text input's caret on its x axis, disable any future y scrolling
              self.__enableScrollY = false;
              self.__isSelectable = true;
            }

            if( self.__enableScrollY && Math.abs(self.startCoordinates.y - currentCoordinates.y) > 10 ) {
              // user scrolled the entire view on the y axis
              // disabled being able to select text on an input
              // hide the input which has focus, and show a cloned one that doesn't have focus
              self.__isSelectable = false;
              ionic.tap.cloneFocusedInput(container, self);
            }
          }

          self.doTouchMove(getEventTouches(e), e.timeStamp, e.scale);
          self.__isDown = true;
        };

        self.touchEnd = function(e) {
          if(!self.__isDown) return;

          self.doTouchEnd(e.timeStamp);
          self.__isDown = false;
          self.__hasStarted = false;
          self.__isSelectable = true;
          self.__enableScrollY = true;

          if( !self.__isDragging && !self.__isDecelerating && !self.__isAnimating ) {
            ionic.tap.removeClonedInputs(container, self);
          }
        };

        self.options.orgScrollingComplete = self.options.scrollingComplete;
        self.options.scrollingComplete = function() {
          ionic.tap.removeClonedInputs(container, self);
          self.options.orgScrollingComplete();
        };

        if ('ontouchstart' in window) {
          // Touch Events
          container.addEventListener("touchstart", self.touchStart, false);
          document.addEventListener("touchmove", self.touchMove, false);
          document.addEventListener("touchend", self.touchEnd, false);
          document.addEventListener("touchcancel", self.touchEnd, false);

        } else if (window.navigator.pointerEnabled) {
          // Pointer Events
          container.addEventListener("pointerdown", self.touchStart, false);
          document.addEventListener("pointermove", self.touchMove, false);
          document.addEventListener("pointerup", self.touchEnd, false);
          document.addEventListener("pointercancel", self.touchEnd, false);

        } else if (window.navigator.msPointerEnabled) {
          // IE10, WP8 (Pointer Events)
          container.addEventListener("MSPointerDown", self.touchStart, false);
          document.addEventListener("MSPointerMove", self.touchMove, false);
          document.addEventListener("MSPointerUp", self.touchEnd, false);
          document.addEventListener("MSPointerCancel", self.touchEnd, false);

        } else {
          // Mouse Events
          var mousedown = false;

          self.mouseDown = function(e) {
            if ( ionic.tap.ignoreScrollStart(e) || e.target.tagName === 'SELECT' ) {
              return;
            }
            self.doTouchStart(getEventTouches(e), e.timeStamp);

            if( !ionic.tap.isTextInput(e.target) ) {
              e.preventDefault();
            }
            mousedown = true;
          };

          self.mouseMove = function(e) {
            if (!mousedown || e.defaultPrevented) {
              return;
            }

            self.doTouchMove(getEventTouches(e), e.timeStamp);

            mousedown = true;
          };

          self.mouseUp = function(e) {
            if (!mousedown) {
              return;
            }

            self.doTouchEnd(e.timeStamp);

            mousedown = false;
          };

          self.mouseWheel = ionic.animationFrameThrottle(function(e) {
            var scrollParent = ionic.DomUtil.getParentOrSelfWithClass(e.target, 'ionic-scroll');
            if (scrollParent === self.__container) {

              self.hintResize();
              self.scrollBy(
                  e.wheelDeltaX/self.options.wheelDampen,
                  -e.wheelDeltaY/self.options.wheelDampen
              );

              self.__fadeScrollbars('in');
              clearTimeout(self.__wheelHideBarTimeout);
              self.__wheelHideBarTimeout = setTimeout(function() {
                self.__fadeScrollbars('out');
              }, 100);
            }
          });

          container.addEventListener("mousedown", self.mouseDown, false);
          document.addEventListener("mousemove", self.mouseMove, false);
          document.addEventListener("mouseup", self.mouseUp, false);
          document.addEventListener('mousewheel', self.mouseWheel, false);
        }
      },

      __removeEventHandlers: function() {
        var container = this.__container;

        container.removeEventListener('touchstart', self.touchStart);
        document.removeEventListener('touchmove', self.touchMove);
        document.removeEventListener('touchend', self.touchEnd);
        document.removeEventListener('touchcancel', self.touchCancel);

        container.removeEventListener("pointerdown", self.touchStart);
        document.removeEventListener("pointermove", self.touchMove);
        document.removeEventListener("pointerup", self.touchEnd);
        document.removeEventListener("pointercancel", self.touchEnd);

        container.removeEventListener("MSPointerDown", self.touchStart);
        document.removeEventListener("MSPointerMove", self.touchMove);
        document.removeEventListener("MSPointerUp", self.touchEnd);
        document.removeEventListener("MSPointerCancel", self.touchEnd);

        container.removeEventListener("mousedown", self.mouseDown);
        document.removeEventListener("mousemove", self.mouseMove);
        document.removeEventListener("mouseup", self.mouseUp);
        document.removeEventListener('mousewheel', self.mouseWheel);
      },

      /** Create a scroll bar div with the given direction **/
      __createScrollbar: function(direction) {
        var bar = document.createElement('div'),
          indicator = document.createElement('div');

        indicator.className = 'scroll-bar-indicator';

        if(direction == 'h') {
          bar.className = 'scroll-bar scroll-bar-h';
        } else {
          bar.className = 'scroll-bar scroll-bar-v';
        }

        bar.appendChild(indicator);
        return bar;
      },

      __createScrollbars: function() {
        var indicatorX, indicatorY;

        if(this.options.scrollingX) {
          indicatorX = {
            el: this.__createScrollbar('h'),
            sizeRatio: 1
          };
          indicatorX.indicator = indicatorX.el.children[0];

          if(this.options.scrollbarX) {
            this.__container.appendChild(indicatorX.el);
          }
          this.__indicatorX = indicatorX;
        }

        if(this.options.scrollingY) {
          indicatorY = {
            el: this.__createScrollbar('v'),
            sizeRatio: 1
          };
          indicatorY.indicator = indicatorY.el.children[0];

          if(this.options.scrollbarY) {
            this.__container.appendChild(indicatorY.el);
          }
          this.__indicatorY = indicatorY;
        }
      },

      __resizeScrollbars: function() {
        var self = this;

        // Update horiz bar
        if(self.__indicatorX) {
          var width = Math.max(Math.round(self.__clientWidth * self.__clientWidth / (self.__contentWidth)), 20);
          if(width > self.__contentWidth) {
            width = 0;
          }
          self.__indicatorX.size = width;
          self.__indicatorX.minScale = this.options.minScrollbarSizeX / width;
          self.__indicatorX.indicator.style.width = width + 'px';
          self.__indicatorX.maxPos = self.__clientWidth - width;
          self.__indicatorX.sizeRatio = self.__maxScrollLeft ? self.__indicatorX.maxPos / self.__maxScrollLeft : 1;
        }

        // Update vert bar
        if(self.__indicatorY) {
          var height = Math.max(Math.round(self.__clientHeight * self.__clientHeight / (self.__contentHeight)), 20);
          if(height > self.__contentHeight) {
            height = 0;
          }
          self.__indicatorY.size = height;
          self.__indicatorY.minScale = this.options.minScrollbarSizeY / height;
          self.__indicatorY.maxPos = self.__clientHeight - height;
          self.__indicatorY.indicator.style.height = height + 'px';
          self.__indicatorY.sizeRatio = self.__maxScrollTop ? self.__indicatorY.maxPos / self.__maxScrollTop : 1;
        }
      },

      /**
       * Move and scale the scrollbars as the page scrolls.
       */
      __repositionScrollbars: function() {
        var self = this, width, heightScale,
          widthDiff, heightDiff,
          x, y,
          xstop = 0, ystop = 0;

        if(self.__indicatorX) {
          // Handle the X scrollbar

          // Don't go all the way to the right if we have a vertical scrollbar as well
          if(self.__indicatorY) xstop = 10;

          x = Math.round(self.__indicatorX.sizeRatio * self.__scrollLeft) || 0,

            // The the difference between the last content X position, and our overscrolled one
            widthDiff = self.__scrollLeft - (self.__maxScrollLeft - xstop);

          if(self.__scrollLeft < 0) {

            widthScale = Math.max(self.__indicatorX.minScale,
                (self.__indicatorX.size - Math.abs(self.__scrollLeft)) / self.__indicatorX.size);

            // Stay at left
            x = 0;

            // Make sure scale is transformed from the left/center origin point
            self.__indicatorX.indicator.style[self.__transformOriginProperty] = 'left center';
          } else if(widthDiff > 0) {

            widthScale = Math.max(self.__indicatorX.minScale,
                (self.__indicatorX.size - widthDiff) / self.__indicatorX.size);

            // Stay at the furthest x for the scrollable viewport
            x = self.__indicatorX.maxPos - xstop;

            // Make sure scale is transformed from the right/center origin point
            self.__indicatorX.indicator.style[self.__transformOriginProperty] = 'right center';

          } else {

            // Normal motion
            x = Math.min(self.__maxScrollLeft, Math.max(0, x));
            widthScale = 1;

          }

          self.__indicatorX.indicator.style[self.__transformProperty] = 'translate3d(' + x + 'px, 0, 0) scaleX(' + widthScale + ')';
        }

        if(self.__indicatorY) {

          y = Math.round(self.__indicatorY.sizeRatio * self.__scrollTop) || 0;

          // Don't go all the way to the right if we have a vertical scrollbar as well
          if(self.__indicatorX) ystop = 10;

          heightDiff = self.__scrollTop - (self.__maxScrollTop - ystop);

          if(self.__scrollTop < 0) {

            heightScale = Math.max(self.__indicatorY.minScale, (self.__indicatorY.size - Math.abs(self.__scrollTop)) / self.__indicatorY.size);

            // Stay at top
            y = 0;

            // Make sure scale is transformed from the center/top origin point
            self.__indicatorY.indicator.style[self.__transformOriginProperty] = 'center top';

          } else if(heightDiff > 0) {

            heightScale = Math.max(self.__indicatorY.minScale, (self.__indicatorY.size - heightDiff) / self.__indicatorY.size);

            // Stay at bottom of scrollable viewport
            y = self.__indicatorY.maxPos - ystop;

            // Make sure scale is transformed from the center/bottom origin point
            self.__indicatorY.indicator.style[self.__transformOriginProperty] = 'center bottom';

          } else {

            // Normal motion
            y = Math.min(self.__maxScrollTop, Math.max(0, y));
            heightScale = 1;

          }

          self.__indicatorY.indicator.style[self.__transformProperty] = 'translate3d(0,' + y + 'px, 0) scaleY(' + heightScale + ')';
        }
      },

      __fadeScrollbars: function(direction, delay) {
        var self = this;

        if(!this.options.scrollbarsFade) {
          return;
        }

        var className = 'scroll-bar-fade-out';

        if(self.options.scrollbarsFade === true) {
          clearTimeout(self.__scrollbarFadeTimeout);

          if(direction == 'in') {
            if(self.__indicatorX) { self.__indicatorX.indicator.classList.remove(className); }
            if(self.__indicatorY) { self.__indicatorY.indicator.classList.remove(className); }
          } else {
            self.__scrollbarFadeTimeout = setTimeout(function() {
              if(self.__indicatorX) { self.__indicatorX.indicator.classList.add(className); }
              if(self.__indicatorY) { self.__indicatorY.indicator.classList.add(className); }
            }, delay || self.options.scrollbarFadeDelay);
          }
        }
      },

      __scrollingComplete: function() {
        var self = this;
        self.options.scrollingComplete();

        self.__fadeScrollbars('out');
      },

      resize: function() {
        // Update Scroller dimensions for changed content
        // Add padding to bottom of content
        this.setDimensions(
          this.__container.clientWidth,
          this.__container.clientHeight,
          this.options.getContentWidth(),
          this.options.getContentHeight()
        );
      },
      /*
       ---------------------------------------------------------------------------
       PUBLIC API
       ---------------------------------------------------------------------------
       */

      getRenderFn: function() {
        var self = this;

        var content = this.__content;

        var docStyle = document.documentElement.style;

        var engine;
        if ('MozAppearance' in docStyle) {
          engine = 'gecko';
        } else if ('WebkitAppearance' in docStyle) {
          engine = 'webkit';
        } else if (typeof navigator.cpuClass === 'string') {
          engine = 'trident';
        }

        var vendorPrefix = {
          trident: 'ms',
          gecko: 'Moz',
          webkit: 'Webkit',
          presto: 'O'
        }[engine];

        var helperElem = document.createElement("div");
        var undef;

        var perspectiveProperty = vendorPrefix + "Perspective";
        var transformProperty = vendorPrefix + "Transform";
        var transformOriginProperty = vendorPrefix + 'TransformOrigin';

        self.__perspectiveProperty = transformProperty;
        self.__transformProperty = transformProperty;
        self.__transformOriginProperty = transformOriginProperty;

        if (helperElem.style[perspectiveProperty] !== undef) {

          return function(left, top, zoom, wasResize) {
            content.style[transformProperty] = 'translate3d(' + (-left) + 'px,' + (-top) + 'px,0) scale(' + zoom + ')';
            self.__repositionScrollbars();
            if(!wasResize) {
              self.triggerScrollEvent();
            }
          };

        } else if (helperElem.style[transformProperty] !== undef) {

          return function(left, top, zoom, wasResize) {
            content.style[transformProperty] = 'translate(' + (-left) + 'px,' + (-top) + 'px) scale(' + zoom + ')';
            self.__repositionScrollbars();
            if(!wasResize) {
              self.triggerScrollEvent();
            }
          };

        } else {

          return function(left, top, zoom, wasResize) {
            content.style.marginLeft = left ? (-left/zoom) + 'px' : '';
            content.style.marginTop = top ? (-top/zoom) + 'px' : '';
            content.style.zoom = zoom || '';
            self.__repositionScrollbars();
            if(!wasResize) {
              self.triggerScrollEvent();
            }
          };

        }
      },


      /**
       * Configures the dimensions of the client (outer) and content (inner) elements.
       * Requires the available space for the outer element and the outer size of the inner element.
       * All values which are falsy (null or zero etc.) are ignored and the old value is kept.
       *
       * @param clientWidth {Integer} Inner width of outer element
       * @param clientHeight {Integer} Inner height of outer element
       * @param contentWidth {Integer} Outer width of inner element
       * @param contentHeight {Integer} Outer height of inner element
       */
      setDimensions: function(clientWidth, clientHeight, contentWidth, contentHeight) {
        var self = this;

        // Only update values which are defined
        if (clientWidth === +clientWidth) {
          self.__clientWidth = clientWidth;
        }

        if (clientHeight === +clientHeight) {
          self.__clientHeight = clientHeight;
        }

        if (contentWidth === +contentWidth) {
          self.__contentWidth = contentWidth;
        }

        if (contentHeight === +contentHeight) {
          self.__contentHeight = contentHeight;
        }

        // Refresh maximums
        self.__computeScrollMax();
        self.__resizeScrollbars();

        // Refresh scroll position
        self.scrollTo(self.__scrollLeft, self.__scrollTop, true, null, true);

      },


      /**
       * Sets the client coordinates in relation to the document.
       *
       * @param left {Integer} Left position of outer element
       * @param top {Integer} Top position of outer element
       */
      setPosition: function(left, top) {

        var self = this;

        self.__clientLeft = left || 0;
        self.__clientTop = top || 0;

      },


      /**
       * Configures the snapping (when snapping is active)
       *
       * @param width {Integer} Snapping width
       * @param height {Integer} Snapping height
       */
      setSnapSize: function(width, height) {

        var self = this;

        self.__snapWidth = width;
        self.__snapHeight = height;

      },


      /**
       * Activates pull-to-refresh. A special zone on the top of the list to start a list refresh whenever
       * the user event is released during visibility of this zone. This was introduced by some apps on iOS like
       * the official Twitter client.
       *
       * @param height {Integer} Height of pull-to-refresh zone on top of rendered list
       * @param activateCallback {Function} Callback to execute on activation. This is for signalling the user about a refresh is about to happen when he release.
       * @param deactivateCallback {Function} Callback to execute on deactivation. This is for signalling the user about the refresh being cancelled.
       * @param startCallback {Function} Callback to execute to start the real async refresh action. Call {@link #finishPullToRefresh} after finish of refresh.
       */
      activatePullToRefresh: function(height, activateCallback, deactivateCallback, startCallback) {

        var self = this;

        self.__refreshHeight = height;
        self.__refreshActivate = activateCallback;
        self.__refreshDeactivate = deactivateCallback;
        self.__refreshStart = startCallback;

      },


      /**
       * Starts pull-to-refresh manually.
       */
      triggerPullToRefresh: function() {
        // Use publish instead of scrollTo to allow scrolling to out of boundary position
        // We don't need to normalize scrollLeft, zoomLevel, etc. here because we only y-scrolling when pull-to-refresh is enabled
        this.__publish(this.__scrollLeft, -this.__refreshHeight, this.__zoomLevel, true);

        if (this.__refreshStart) {
          this.__refreshStart();
        }
      },


      /**
       * Signalizes that pull-to-refresh is finished.
       */
      finishPullToRefresh: function() {

        var self = this;

        self.__refreshActive = false;
        if (self.__refreshDeactivate) {
          self.__refreshDeactivate();
        }

        self.scrollTo(self.__scrollLeft, self.__scrollTop, true);

      },


      /**
       * Returns the scroll position and zooming values
       *
       * @return {Map} `left` and `top` scroll position and `zoom` level
       */
      getValues: function() {

        var self = this;

        return {
          left: self.__scrollLeft,
          top: self.__scrollTop,
          zoom: self.__zoomLevel
        };

      },


      /**
       * Returns the maximum scroll values
       *
       * @return {Map} `left` and `top` maximum scroll values
       */
      getScrollMax: function() {

        var self = this;

        return {
          left: self.__maxScrollLeft,
          top: self.__maxScrollTop
        };

      },


      /**
       * Zooms to the given level. Supports optional animation. Zooms
       * the center when no coordinates are given.
       *
       * @param level {Number} Level to zoom to
       * @param animate {Boolean} Whether to use animation
       * @param originLeft {Number} Zoom in at given left coordinate
       * @param originTop {Number} Zoom in at given top coordinate
       */
      zoomTo: function(level, animate, originLeft, originTop) {

        var self = this;

        if (!self.options.zooming) {
          throw new Error("Zooming is not enabled!");
        }

        // Stop deceleration
        if (self.__isDecelerating) {
          zyngaCore.effect.Animate.stop(self.__isDecelerating);
          self.__isDecelerating = false;
        }

        var oldLevel = self.__zoomLevel;

        // Normalize input origin to center of viewport if not defined
        if (originLeft == null) {
          originLeft = self.__clientWidth / 2;
        }

        if (originTop == null) {
          originTop = self.__clientHeight / 2;
        }

        // Limit level according to configuration
        level = Math.max(Math.min(level, self.options.maxZoom), self.options.minZoom);

        // Recompute maximum values while temporary tweaking maximum scroll ranges
        self.__computeScrollMax(level);

        // Recompute left and top coordinates based on new zoom level
        var left = ((originLeft + self.__scrollLeft) * level / oldLevel) - originLeft;
        var top = ((originTop + self.__scrollTop) * level / oldLevel) - originTop;

        // Limit x-axis
        if (left > self.__maxScrollLeft) {
          left = self.__maxScrollLeft;
        } else if (left < 0) {
          left = 0;
        }

        // Limit y-axis
        if (top > self.__maxScrollTop) {
          top = self.__maxScrollTop;
        } else if (top < 0) {
          top = 0;
        }

        // Push values out
        self.__publish(left, top, level, animate);

      },


      /**
       * Zooms the content by the given factor.
       *
       * @param factor {Number} Zoom by given factor
       * @param animate {Boolean} Whether to use animation
       * @param originLeft {Number} Zoom in at given left coordinate
       * @param originTop {Number} Zoom in at given top coordinate
       */
      zoomBy: function(factor, animate, originLeft, originTop) {

        var self = this;

        self.zoomTo(self.__zoomLevel * factor, animate, originLeft, originTop);

      },


      /**
       * Scrolls to the given position. Respect limitations and snapping automatically.
       *
       * @param left {Number} Horizontal scroll position, keeps current if value is <code>null</code>
       * @param top {Number} Vertical scroll position, keeps current if value is <code>null</code>
       * @param animate {Boolean} Whether the scrolling should happen using an animation
       * @param zoom {Number} Zoom level to go to
       */
      scrollTo: function(left, top, animate, zoom, wasResize) {
        var self = this;

        // Stop deceleration
        if (self.__isDecelerating) {
          zyngaCore.effect.Animate.stop(self.__isDecelerating);
          self.__isDecelerating = false;
        }

        // Correct coordinates based on new zoom level
        if (zoom != null && zoom !== self.__zoomLevel) {

          if (!self.options.zooming) {
            throw new Error("Zooming is not enabled!");
          }

          left *= zoom;
          top *= zoom;

          // Recompute maximum values while temporary tweaking maximum scroll ranges
          self.__computeScrollMax(zoom);

        } else {

          // Keep zoom when not defined
          zoom = self.__zoomLevel;

        }

        if (!self.options.scrollingX) {

          left = self.__scrollLeft;

        } else {

          if (self.options.paging) {
            left = Math.round(left / self.__clientWidth) * self.__clientWidth;
          } else if (self.options.snapping) {
            left = Math.round(left / self.__snapWidth) * self.__snapWidth;
          }

        }

        if (!self.options.scrollingY) {

          top = self.__scrollTop;

        } else {

          if (self.options.paging) {
            top = Math.round(top / self.__clientHeight) * self.__clientHeight;
          } else if (self.options.snapping) {
            top = Math.round(top / self.__snapHeight) * self.__snapHeight;
          }

        }

        // Limit for allowed ranges
        left = Math.max(Math.min(self.__maxScrollLeft, left), 0);
        top = Math.max(Math.min(self.__maxScrollTop, top), 0);

        // Don't animate when no change detected, still call publish to make sure
        // that rendered position is really in-sync with internal data
        if (left === self.__scrollLeft && top === self.__scrollTop) {
          animate = false;
        }

        // Publish new values
        self.__publish(left, top, zoom, animate, wasResize);

      },


      /**
       * Scroll by the given offset
       *
       * @param left {Number} Scroll x-axis by given offset
       * @param top {Number} Scroll y-axis by given offset
       * @param animate {Boolean} Whether to animate the given change
       */
      scrollBy: function(left, top, animate) {

        var self = this;

        var startLeft = self.__isAnimating ? self.__scheduledLeft : self.__scrollLeft;
        var startTop = self.__isAnimating ? self.__scheduledTop : self.__scrollTop;

        self.scrollTo(startLeft + (left || 0), startTop + (top || 0), animate);

      },



      /*
       ---------------------------------------------------------------------------
       EVENT CALLBACKS
       ---------------------------------------------------------------------------
       */

      /**
       * Mouse wheel handler for zooming support
       */
      doMouseZoom: function(wheelDelta, timeStamp, pageX, pageY) {

        var self = this;
        var change = wheelDelta > 0 ? 0.97 : 1.03;

        return self.zoomTo(self.__zoomLevel * change, false, pageX - self.__clientLeft, pageY - self.__clientTop);

      },

      /**
       * Touch start handler for scrolling support
       */
      doTouchStart: function(touches, timeStamp) {
        this.hintResize();

        if (timeStamp instanceof Date) {
          timeStamp = timeStamp.valueOf();
        }
        if (typeof timeStamp !== "number") {
          timeStamp = Date.now();
        }

        var self = this;

        // Reset interruptedAnimation flag
        self.__interruptedAnimation = true;

        // Stop deceleration
        if (self.__isDecelerating) {
          zyngaCore.effect.Animate.stop(self.__isDecelerating);
          self.__isDecelerating = false;
          self.__interruptedAnimation = true;
        }

        // Stop animation
        if (self.__isAnimating) {
          zyngaCore.effect.Animate.stop(self.__isAnimating);
          self.__isAnimating = false;
          self.__interruptedAnimation = true;
        }

        // Use center point when dealing with two fingers
        var currentTouchLeft, currentTouchTop;
        var isSingleTouch = touches.length === 1;
        if (isSingleTouch) {
          currentTouchLeft = touches[0].pageX;
          currentTouchTop = touches[0].pageY;
        } else {
          currentTouchLeft = Math.abs(touches[0].pageX + touches[1].pageX) / 2;
          currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
        }

        // Store initial positions
        self.__initialTouchLeft = currentTouchLeft;
        self.__initialTouchTop = currentTouchTop;

        // Store initial touchList for scale calculation
        self.__initialTouches = touches;

        // Store current zoom level
        self.__zoomLevelStart = self.__zoomLevel;

        // Store initial touch positions
        self.__lastTouchLeft = currentTouchLeft;
        self.__lastTouchTop = currentTouchTop;

        // Store initial move time stamp
        self.__lastTouchMove = timeStamp;

        // Reset initial scale
        self.__lastScale = 1;

        // Reset locking flags
        self.__enableScrollX = !isSingleTouch && self.options.scrollingX;
        self.__enableScrollY = !isSingleTouch && self.options.scrollingY;

        // Reset tracking flag
        self.__isTracking = true;

        // Reset deceleration complete flag
        self.__didDecelerationComplete = false;

        // Dragging starts directly with two fingers, otherwise lazy with an offset
        self.__isDragging = !isSingleTouch;

        // Some features are disabled in multi touch scenarios
        self.__isSingleTouch = isSingleTouch;

        // Clearing data structure
        self.__positions = [];

      },


      /**
       * Touch move handler for scrolling support
       */
      doTouchMove: function(touches, timeStamp, scale) {
        if (timeStamp instanceof Date) {
          timeStamp = timeStamp.valueOf();
        }
        if (typeof timeStamp !== "number") {
          timeStamp = Date.now();
        }

        var self = this;

        // Ignore event when tracking is not enabled (event might be outside of element)
        if (!self.__isTracking) {
          return;
        }

        var currentTouchLeft, currentTouchTop;

        // Compute move based around of center of fingers
        if (touches.length === 2) {
          currentTouchLeft = Math.abs(touches[0].pageX + touches[1].pageX) / 2;
          currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;

          // Calculate scale when not present and only when touches are used
          if (!scale && self.options.zooming) {
            scale = self.__getScale(self.__initialTouches, touches);
          }
        } else {
          currentTouchLeft = touches[0].pageX;
          currentTouchTop = touches[0].pageY;
        }

        var positions = self.__positions;

        // Are we already is dragging mode?
        if (self.__isDragging) {

          // Compute move distance
          var moveX = currentTouchLeft - self.__lastTouchLeft;
          var moveY = currentTouchTop - self.__lastTouchTop;

          // Read previous scroll position and zooming
          var scrollLeft = self.__scrollLeft;
          var scrollTop = self.__scrollTop;
          var level = self.__zoomLevel;

          // Work with scaling
          if (scale != null && self.options.zooming) {

            var oldLevel = level;

            // Recompute level based on previous scale and new scale
            level = level / self.__lastScale * scale;

            // Limit level according to configuration
            level = Math.max(Math.min(level, self.options.maxZoom), self.options.minZoom);

            // Only do further compution when change happened
            if (oldLevel !== level) {

              // Compute relative event position to container
              var currentTouchLeftRel = currentTouchLeft - self.__clientLeft;
              var currentTouchTopRel = currentTouchTop - self.__clientTop;

              // Recompute left and top coordinates based on new zoom level
              scrollLeft = ((currentTouchLeftRel + scrollLeft) * level / oldLevel) - currentTouchLeftRel;
              scrollTop = ((currentTouchTopRel + scrollTop) * level / oldLevel) - currentTouchTopRel;

              // Recompute max scroll values
              self.__computeScrollMax(level);

            }
          }

          if (self.__enableScrollX) {

            scrollLeft -= moveX * this.options.speedMultiplier;
            var maxScrollLeft = self.__maxScrollLeft;

            if (scrollLeft > maxScrollLeft || scrollLeft < 0) {

              // Slow down on the edges
              if (self.options.bouncing) {

                scrollLeft += (moveX / 2  * this.options.speedMultiplier);

              } else if (scrollLeft > maxScrollLeft) {

                scrollLeft = maxScrollLeft;

              } else {

                scrollLeft = 0;

              }
            }
          }

          // Compute new vertical scroll position
          if (self.__enableScrollY) {

            scrollTop -= moveY * this.options.speedMultiplier;
            var maxScrollTop = self.__maxScrollTop;

            if (scrollTop > maxScrollTop || scrollTop < 0) {

              // Slow down on the edges
              if (self.options.bouncing || (self.__refreshHeight && scrollTop < 0)) {

                scrollTop += (moveY / 2 * this.options.speedMultiplier);

                // Support pull-to-refresh (only when only y is scrollable)
                if (!self.__enableScrollX && self.__refreshHeight != null) {

                  if (!self.__refreshActive && scrollTop <= -self.__refreshHeight) {

                    self.__refreshActive = true;
                    if (self.__refreshActivate) {
                      self.__refreshActivate();
                    }

                  } else if (self.__refreshActive && scrollTop > -self.__refreshHeight) {

                    self.__refreshActive = false;
                    if (self.__refreshDeactivate) {
                      self.__refreshDeactivate();
                    }

                  }
                }

              } else if (scrollTop > maxScrollTop) {

                scrollTop = maxScrollTop;

              } else {

                scrollTop = 0;

              }
            }
          }

          // Keep list from growing infinitely (holding min 10, max 20 measure points)
          if (positions.length > 60) {
            positions.splice(0, 30);
          }

          // Track scroll movement for decleration
          positions.push(scrollLeft, scrollTop, timeStamp);

          // Sync scroll position
          self.__publish(scrollLeft, scrollTop, level);

          // Otherwise figure out whether we are switching into dragging mode now.
        } else {

          var minimumTrackingForScroll = self.options.locking ? 3 : 0;
          var minimumTrackingForDrag = 5;

          var distanceX = Math.abs(currentTouchLeft - self.__initialTouchLeft);
          var distanceY = Math.abs(currentTouchTop - self.__initialTouchTop);

          self.__enableScrollX = self.options.scrollingX && distanceX >= minimumTrackingForScroll;
          self.__enableScrollY = self.options.scrollingY && distanceY >= minimumTrackingForScroll;

          positions.push(self.__scrollLeft, self.__scrollTop, timeStamp);

          self.__isDragging = (self.__enableScrollX || self.__enableScrollY) && (distanceX >= minimumTrackingForDrag || distanceY >= minimumTrackingForDrag);
          if (self.__isDragging) {
            self.__interruptedAnimation = false;
            self.__fadeScrollbars('in');
          }

        }

        // Update last touch positions and time stamp for next event
        self.__lastTouchLeft = currentTouchLeft;
        self.__lastTouchTop = currentTouchTop;
        self.__lastTouchMove = timeStamp;
        self.__lastScale = scale;

      },


      /**
       * Touch end handler for scrolling support
       */
      doTouchEnd: function(timeStamp) {
        if (timeStamp instanceof Date) {
          timeStamp = timeStamp.valueOf();
        }
        if (typeof timeStamp !== "number") {
          timeStamp = Date.now();
        }

        var self = this;

        // Ignore event when tracking is not enabled (no touchstart event on element)
        // This is required as this listener ('touchmove') sits on the document and not on the element itself.
        if (!self.__isTracking) {
          return;
        }

        // Not touching anymore (when two finger hit the screen there are two touch end events)
        self.__isTracking = false;

        // Be sure to reset the dragging flag now. Here we also detect whether
        // the finger has moved fast enough to switch into a deceleration animation.
        if (self.__isDragging) {

          // Reset dragging flag
          self.__isDragging = false;

          // Start deceleration
          // Verify that the last move detected was in some relevant time frame
          if (self.__isSingleTouch && self.options.animating && (timeStamp - self.__lastTouchMove) <= 100) {

            // Then figure out what the scroll position was about 100ms ago
            var positions = self.__positions;
            var endPos = positions.length - 1;
            var startPos = endPos;

            // Move pointer to position measured 100ms ago
            for (var i = endPos; i > 0 && positions[i] > (self.__lastTouchMove - 100); i -= 3) {
              startPos = i;
            }

            // If start and stop position is identical in a 100ms timeframe,
            // we cannot compute any useful deceleration.
            if (startPos !== endPos) {

              // Compute relative movement between these two points
              var timeOffset = positions[endPos] - positions[startPos];
              var movedLeft = self.__scrollLeft - positions[startPos - 2];
              var movedTop = self.__scrollTop - positions[startPos - 1];

              // Based on 50ms compute the movement to apply for each render step
              self.__decelerationVelocityX = movedLeft / timeOffset * (1000 / 60);
              self.__decelerationVelocityY = movedTop / timeOffset * (1000 / 60);

              // How much velocity is required to start the deceleration
              var minVelocityToStartDeceleration = self.options.paging || self.options.snapping ? 4 : 1;

              // Verify that we have enough velocity to start deceleration
              if (Math.abs(self.__decelerationVelocityX) > minVelocityToStartDeceleration || Math.abs(self.__decelerationVelocityY) > minVelocityToStartDeceleration) {

                // Deactivate pull-to-refresh when decelerating
                if (!self.__refreshActive) {
                  self.__startDeceleration(timeStamp);
                }
              }
            } else {
              self.__scrollingComplete();
            }
          } else if ((timeStamp - self.__lastTouchMove) > 100) {
            self.__scrollingComplete();
          }
        }

        // If this was a slower move it is per default non decelerated, but this
        // still means that we want snap back to the bounds which is done here.
        // This is placed outside the condition above to improve edge case stability
        // e.g. touchend fired without enabled dragging. This should normally do not
        // have modified the scroll positions or even showed the scrollbars though.
        if (!self.__isDecelerating) {

          if (self.__refreshActive && self.__refreshStart) {

            // Use publish instead of scrollTo to allow scrolling to out of boundary position
            // We don't need to normalize scrollLeft, zoomLevel, etc. here because we only y-scrolling when pull-to-refresh is enabled
            self.__publish(self.__scrollLeft, -self.__refreshHeight, self.__zoomLevel, true);

            if (self.__refreshStart) {
              self.__refreshStart();
            }

          } else {

            if (self.__interruptedAnimation || self.__isDragging) {
              self.__scrollingComplete();
            }
            self.scrollTo(self.__scrollLeft, self.__scrollTop, true, self.__zoomLevel);

            // Directly signalize deactivation (nothing todo on refresh?)
            if (self.__refreshActive) {

              self.__refreshActive = false;
              if (self.__refreshDeactivate) {
                self.__refreshDeactivate();
              }

            }
          }
        }

        // Fully cleanup list
        self.__positions.length = 0;

      },



      /*
       ---------------------------------------------------------------------------
       PRIVATE API
       ---------------------------------------------------------------------------
       */

      /**
       * Applies the scroll position to the content element
       *
       * @param left {Number} Left scroll position
       * @param top {Number} Top scroll position
       * @param animate {Boolean} Whether animation should be used to move to the new coordinates
       */
      __publish: function(left, top, zoom, animate, wasResize) {

        var self = this;

        // Remember whether we had an animation, then we try to continue based on the current "drive" of the animation
        var wasAnimating = self.__isAnimating;
        if (wasAnimating) {
          zyngaCore.effect.Animate.stop(wasAnimating);
          self.__isAnimating = false;
        }

        if (animate && self.options.animating) {

          // Keep scheduled positions for scrollBy/zoomBy functionality
          self.__scheduledLeft = left;
          self.__scheduledTop = top;
          self.__scheduledZoom = zoom;

          var oldLeft = self.__scrollLeft;
          var oldTop = self.__scrollTop;
          var oldZoom = self.__zoomLevel;

          var diffLeft = left - oldLeft;
          var diffTop = top - oldTop;
          var diffZoom = zoom - oldZoom;

          var step = function(percent, now, render) {

            if (render) {

              self.__scrollLeft = oldLeft + (diffLeft * percent);
              self.__scrollTop = oldTop + (diffTop * percent);
              self.__zoomLevel = oldZoom + (diffZoom * percent);

              // Push values out
              if (self.__callback) {
                self.__callback(self.__scrollLeft, self.__scrollTop, self.__zoomLevel, wasResize);
              }

            }
          };

          var verify = function(id) {
            return self.__isAnimating === id;
          };

          var completed = function(renderedFramesPerSecond, animationId, wasFinished) {
            if (animationId === self.__isAnimating) {
              self.__isAnimating = false;
            }
            if (self.__didDecelerationComplete || wasFinished) {
              self.__scrollingComplete();
            }

            if (self.options.zooming) {
              self.__computeScrollMax();
            }
          };

          // When continuing based on previous animation we choose an ease-out animation instead of ease-in-out
          self.__isAnimating = zyngaCore.effect.Animate.start(step, verify, completed, self.options.animationDuration, wasAnimating ? easeOutCubic : easeInOutCubic);

        } else {

          self.__scheduledLeft = self.__scrollLeft = left;
          self.__scheduledTop = self.__scrollTop = top;
          self.__scheduledZoom = self.__zoomLevel = zoom;

          // Push values out
          if (self.__callback) {
            self.__callback(left, top, zoom, wasResize);
          }

          // Fix max scroll ranges
          if (self.options.zooming) {
            self.__computeScrollMax();
          }
        }
      },


      /**
       * Recomputes scroll minimum values based on client dimensions and content dimensions.
       */
      __computeScrollMax: function(zoomLevel) {

        var self = this;

        if (zoomLevel == null) {
          zoomLevel = self.__zoomLevel;
        }

        self.__maxScrollLeft = Math.max((self.__contentWidth * zoomLevel) - self.__clientWidth, 0);
        self.__maxScrollTop = Math.max((self.__contentHeight * zoomLevel) - self.__clientHeight, 0);

        if(!self.__didWaitForSize && !self.__maxScrollLeft && !self.__maxScrollTop) {
          self.__didWaitForSize = true;
          self.__waitForSize();
        }
      },


      /**
       * If the scroll view isn't sized correctly on start, wait until we have at least some size
       */
      __waitForSize: function() {

        var self = this;

        clearTimeout(self.__sizerTimeout);

        var sizer = function() {
          self.resize();

          if((self.options.scrollingX && !self.__maxScrollLeft) || (self.options.scrollingY && !self.__maxScrollTop)) {
            //self.__sizerTimeout = setTimeout(sizer, 1000);
          }
        };

        sizer();
        self.__sizerTimeout = setTimeout(sizer, 1000);
      },

      /*
       ---------------------------------------------------------------------------
       ANIMATION (DECELERATION) SUPPORT
       ---------------------------------------------------------------------------
       */

      /**
       * Called when a touch sequence end and the speed of the finger was high enough
       * to switch into deceleration mode.
       */
      __startDeceleration: function(timeStamp) {

        var self = this;

        if (self.options.paging) {

          var scrollLeft = Math.max(Math.min(self.__scrollLeft, self.__maxScrollLeft), 0);
          var scrollTop = Math.max(Math.min(self.__scrollTop, self.__maxScrollTop), 0);
          var clientWidth = self.__clientWidth;
          var clientHeight = self.__clientHeight;

          // We limit deceleration not to the min/max values of the allowed range, but to the size of the visible client area.
          // Each page should have exactly the size of the client area.
          self.__minDecelerationScrollLeft = Math.floor(scrollLeft / clientWidth) * clientWidth;
          self.__minDecelerationScrollTop = Math.floor(scrollTop / clientHeight) * clientHeight;
          self.__maxDecelerationScrollLeft = Math.ceil(scrollLeft / clientWidth) * clientWidth;
          self.__maxDecelerationScrollTop = Math.ceil(scrollTop / clientHeight) * clientHeight;

        } else {

          self.__minDecelerationScrollLeft = 0;
          self.__minDecelerationScrollTop = 0;
          self.__maxDecelerationScrollLeft = self.__maxScrollLeft;
          self.__maxDecelerationScrollTop = self.__maxScrollTop;

        }

        // Wrap class method
        var step = function(percent, now, render) {
          self.__stepThroughDeceleration(render);
        };

        // How much velocity is required to keep the deceleration running
        self.__minVelocityToKeepDecelerating = self.options.snapping ? 4 : 0.1;

        // Detect whether it's still worth to continue animating steps
        // If we are already slow enough to not being user perceivable anymore, we stop the whole process here.
        var verify = function() {
          var shouldContinue = Math.abs(self.__decelerationVelocityX) >= self.__minVelocityToKeepDecelerating ||
            Math.abs(self.__decelerationVelocityY) >= self.__minVelocityToKeepDecelerating;
          if (!shouldContinue) {
            self.__didDecelerationComplete = true;

            //Make sure the scroll values are within the boundaries after a bounce,
            //not below 0 or above maximum
            if (self.options.bouncing) {
              self.scrollTo(
                Math.min( Math.max(self.__scrollLeft, 0), self.__maxScrollLeft ),
                Math.min( Math.max(self.__scrollTop, 0), self.__maxScrollTop ),
                false
              );
            }
          }
          return shouldContinue;
        };

        var completed = function(renderedFramesPerSecond, animationId, wasFinished) {
          self.__isDecelerating = false;
          if (self.__didDecelerationComplete) {
            self.__scrollingComplete();
          }

          // Animate to grid when snapping is active, otherwise just fix out-of-boundary positions
          if(self.options.paging) {
            self.scrollTo(self.__scrollLeft, self.__scrollTop, self.options.snapping);
          }
        };

        // Start animation and switch on flag
        self.__isDecelerating = zyngaCore.effect.Animate.start(step, verify, completed);

      },


      /**
       * Called on every step of the animation
       *
       * @param inMemory {Boolean} Whether to not render the current step, but keep it in memory only. Used internally only!
       */
      __stepThroughDeceleration: function(render) {

        var self = this;


        //
        // COMPUTE NEXT SCROLL POSITION
        //

        // Add deceleration to scroll position
        var scrollLeft = self.__scrollLeft + self.__decelerationVelocityX;// * self.options.deceleration);
        var scrollTop = self.__scrollTop + self.__decelerationVelocityY;// * self.options.deceleration);


        //
        // HARD LIMIT SCROLL POSITION FOR NON BOUNCING MODE
        //

        if (!self.options.bouncing) {

          var scrollLeftFixed = Math.max(Math.min(self.__maxDecelerationScrollLeft, scrollLeft), self.__minDecelerationScrollLeft);
          if (scrollLeftFixed !== scrollLeft) {
            scrollLeft = scrollLeftFixed;
            self.__decelerationVelocityX = 0;
          }

          var scrollTopFixed = Math.max(Math.min(self.__maxDecelerationScrollTop, scrollTop), self.__minDecelerationScrollTop);
          if (scrollTopFixed !== scrollTop) {
            scrollTop = scrollTopFixed;
            self.__decelerationVelocityY = 0;
          }

        }


        //
        // UPDATE SCROLL POSITION
        //

        if (render) {

          self.__publish(scrollLeft, scrollTop, self.__zoomLevel);

        } else {

          self.__scrollLeft = scrollLeft;
          self.__scrollTop = scrollTop;

        }


        //
        // SLOW DOWN
        //

        // Slow down velocity on every iteration
        if (!self.options.paging) {

          // This is the factor applied to every iteration of the animation
          // to slow down the process. This should emulate natural behavior where
          // objects slow down when the initiator of the movement is removed
          var frictionFactor = self.options.deceleration;

          self.__decelerationVelocityX *= frictionFactor;
          self.__decelerationVelocityY *= frictionFactor;

        }


        //
        // BOUNCING SUPPORT
        //

        if (self.options.bouncing) {

          var scrollOutsideX = 0;
          var scrollOutsideY = 0;

          // This configures the amount of change applied to deceleration/acceleration when reaching boundaries
          var penetrationDeceleration = self.options.penetrationDeceleration;
          var penetrationAcceleration = self.options.penetrationAcceleration;

          // Check limits
          if (scrollLeft < self.__minDecelerationScrollLeft) {
            scrollOutsideX = self.__minDecelerationScrollLeft - scrollLeft;
          } else if (scrollLeft > self.__maxDecelerationScrollLeft) {
            scrollOutsideX = self.__maxDecelerationScrollLeft - scrollLeft;
          }

          if (scrollTop < self.__minDecelerationScrollTop) {
            scrollOutsideY = self.__minDecelerationScrollTop - scrollTop;
          } else if (scrollTop > self.__maxDecelerationScrollTop) {
            scrollOutsideY = self.__maxDecelerationScrollTop - scrollTop;
          }

          // Slow down until slow enough, then flip back to snap position
          if (scrollOutsideX !== 0) {
            var isHeadingOutwardsX = scrollOutsideX * self.__decelerationVelocityX <= self.__minDecelerationScrollLeft;
            if (isHeadingOutwardsX) {
              self.__decelerationVelocityX += scrollOutsideX * penetrationDeceleration;
            }
            var isStoppedX = Math.abs(self.__decelerationVelocityX) <= self.__minVelocityToKeepDecelerating;
            //If we're not heading outwards, or if the above statement got us below minDeceleration, go back towards bounds
            if (!isHeadingOutwardsX || isStoppedX) {
              self.__decelerationVelocityX = scrollOutsideX * penetrationAcceleration;
            }
          }

          if (scrollOutsideY !== 0) {
            var isHeadingOutwardsY = scrollOutsideY * self.__decelerationVelocityY <= self.__minDecelerationScrollTop;
            if (isHeadingOutwardsY) {
              self.__decelerationVelocityY += scrollOutsideY * penetrationDeceleration;
            }
            var isStoppedY = Math.abs(self.__decelerationVelocityY) <= self.__minVelocityToKeepDecelerating;
            //If we're not heading outwards, or if the above statement got us below minDeceleration, go back towards bounds
            if (!isHeadingOutwardsY || isStoppedY) {
              self.__decelerationVelocityY = scrollOutsideY * penetrationAcceleration;
            }
          }
        }
      },


      /**
       * calculate the distance between two touches
       * @param   {Touch}     touch1
       * @param   {Touch}     touch2
       * @returns {Number}    distance
       */
      __getDistance: function getDistance(touch1, touch2) {
        var x = touch2.pageX - touch1.pageX,
          y = touch2.pageY - touch1.pageY;
        return Math.sqrt((x*x) + (y*y));
      },


      /**
       * calculate the scale factor between two touchLists (fingers)
       * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
       * @param   {Array}     start
       * @param   {Array}     end
       * @returns {Number}    scale
       */
      __getScale: function getScale(start, end) {

        var self = this;

        // need two fingers...
        if(start.length >= 2 && end.length >= 2) {
          return self.__getDistance(end[0], end[1]) /
            self.__getDistance(start[0], start[1]);
        }
        return 1;
      }
    });

    ionic.scroll = {
      isScrolling: false,
      lastTop: 0
    };

  })(ionic);

  (function(ionic) {
    'use strict';

    ionic.views.HeaderBar = ionic.views.View.inherit({
      initialize: function(opts) {
        this.el = opts.el;

        ionic.extend(this, {
          alignTitle: 'center'
        }, opts);

        this.align();
      },

      align: function(align) {

        align || (align = this.alignTitle);

        // Find the titleEl element
        var titleEl = this.el.querySelector('.title');
        if(!titleEl) {
          return;
        }

        var self = this;
        //We have to rAF here so all of the elements have time to initialize
        ionic.requestAnimationFrame(function() {
          var i, c, childSize;
          var childNodes = self.el.childNodes;
          var leftWidth = 0;
          var rightWidth = 0;
          var isCountingRightWidth = false;

          // Compute how wide the left children are
          // Skip all titles (there may still be two titles, one leaving the dom)
          // Once we encounter a titleEl, realize we are now counting the right-buttons, not left
          for(i = 0; i < childNodes.length; i++) {
            c = childNodes[i];
            if (c.tagName && c.tagName.toLowerCase() == 'h1') {
              isCountingRightWidth = true;
              continue;
            }

            childSize = null;
            if(c.nodeType == 3) {
              var bounds = ionic.DomUtil.getTextBounds(c);
              if(bounds) {
                childSize = bounds.width;
              }
            } else if(c.nodeType == 1) {
              childSize = c.offsetWidth;
            }
            if(childSize) {
              if (isCountingRightWidth) {
                rightWidth += childSize;
              } else {
                leftWidth += childSize;
              }
            }
          }

          var margin = Math.max(leftWidth, rightWidth) + 10;

          //Reset left and right before setting again
          titleEl.style.left = titleEl.style.right = '';

          // Size and align the header titleEl based on the sizes of the left and
          // right children, and the desired alignment mode
          if(align == 'center') {
            if(margin > 10) {
              titleEl.style.left = margin + 'px';
              titleEl.style.right = margin + 'px';
            }
            if(titleEl.offsetWidth < titleEl.scrollWidth) {
              if(rightWidth > 0) {
                titleEl.style.right = (rightWidth + 5) + 'px';
              }
            }
          } else if(align == 'left') {
            titleEl.classList.add('title-left');
            if(leftWidth > 0) {
              titleEl.style.left = (leftWidth + 15) + 'px';
            }
          } else if(align == 'right') {
            titleEl.classList.add('title-right');
            if(rightWidth > 0) {
              titleEl.style.right = (rightWidth + 15) + 'px';
            }
          }
        });
      }
    });

  })(ionic);

  (function(ionic) {
    'use strict';

    var ITEM_CLASS = 'item';
    var ITEM_CONTENT_CLASS = 'item-content';
    var ITEM_SLIDING_CLASS = 'item-sliding';
    var ITEM_OPTIONS_CLASS = 'item-options';
    var ITEM_PLACEHOLDER_CLASS = 'item-placeholder';
    var ITEM_REORDERING_CLASS = 'item-reordering';
    var ITEM_REORDER_BTN_CLASS = 'item-reorder';

    var DragOp = function() {};
    DragOp.prototype = {
      start: function(e) {
      },
      drag: function(e) {
      },
      end: function(e) {
      },
      isSameItem: function(item) {
        return false;
      }
    };

    var SlideDrag = function(opts) {
      this.dragThresholdX = opts.dragThresholdX || 10;
      this.el = opts.el;
      this.canSwipe = opts.canSwipe;
    };

    SlideDrag.prototype = new DragOp();

    SlideDrag.prototype.start = function(e) {
      var content, buttons, offsetX, buttonsWidth;

      if (!this.canSwipe()) {
        return;
      }

      if(e.target.classList.contains(ITEM_CONTENT_CLASS)) {
        content = e.target;
      } else if(e.target.classList.contains(ITEM_CLASS)) {
        content = e.target.querySelector('.' + ITEM_CONTENT_CLASS);
      } else {
        content = ionic.DomUtil.getParentWithClass(e.target, ITEM_CONTENT_CLASS);
      }

      // If we don't have a content area as one of our children (or ourselves), skip
      if(!content) {
        return;
      }

      // Make sure we aren't animating as we slide
      content.classList.remove(ITEM_SLIDING_CLASS);

      // Grab the starting X point for the item (for example, so we can tell whether it is open or closed to start)
      offsetX = parseFloat(content.style[ionic.CSS.TRANSFORM].replace('translate3d(', '').split(',')[0]) || 0;

      // Grab the buttons
      buttons = content.parentNode.querySelector('.' + ITEM_OPTIONS_CLASS);
      if(!buttons) {
        return;
      }
      buttons.classList.remove('invisible');

      buttonsWidth = buttons.offsetWidth;

      this._currentDrag = {
        buttons: buttons,
        buttonsWidth: buttonsWidth,
        content: content,
        startOffsetX: offsetX
      };
    };

    /**
     * Check if this is the same item that was previously dragged.
     */
    SlideDrag.prototype.isSameItem = function(op) {
      if(op._lastDrag && this._currentDrag) {
        return this._currentDrag.content == op._lastDrag.content;
      }
      return false;
    };

    SlideDrag.prototype.clean = function(e) {
      var lastDrag = this._lastDrag;

      if(!lastDrag) return;

      lastDrag.content.style[ionic.CSS.TRANSITION] = '';
      lastDrag.content.style[ionic.CSS.TRANSFORM] = '';
      ionic.requestAnimationFrame(function() {
        setTimeout(function() {
          lastDrag.buttons && lastDrag.buttons.classList.add('invisible');
        }, 250);
      });
    };

    SlideDrag.prototype.drag = ionic.animationFrameThrottle(function(e) {
      var buttonsWidth;

      // We really aren't dragging
      if(!this._currentDrag) {
        return;
      }

      // Check if we should start dragging. Check if we've dragged past the threshold,
      // or we are starting from the open state.
      if(!this._isDragging &&
        ((Math.abs(e.gesture.deltaX) > this.dragThresholdX) ||
          (Math.abs(this._currentDrag.startOffsetX) > 0)))
      {
        this._isDragging = true;
      }

      if(this._isDragging) {
        buttonsWidth = this._currentDrag.buttonsWidth;

        // Grab the new X point, capping it at zero
        var newX = Math.min(0, this._currentDrag.startOffsetX + e.gesture.deltaX);

        // If the new X position is past the buttons, we need to slow down the drag (rubber band style)
        if(newX < -buttonsWidth) {
          // Calculate the new X position, capped at the top of the buttons
          newX = Math.min(-buttonsWidth, -buttonsWidth + (((e.gesture.deltaX + buttonsWidth) * 0.4)));
        }

        this._currentDrag.content.style[ionic.CSS.TRANSFORM] = 'translate3d(' + newX + 'px, 0, 0)';
        this._currentDrag.content.style[ionic.CSS.TRANSITION] = 'none';
      }
    });

    SlideDrag.prototype.end = function(e, doneCallback) {
      var _this = this;

      // There is no drag, just end immediately
      if(!this._currentDrag) {
        doneCallback && doneCallback();
        return;
      }

      // If we are currently dragging, we want to snap back into place
      // The final resting point X will be the width of the exposed buttons
      var restingPoint = -this._currentDrag.buttonsWidth;

      // Check if the drag didn't clear the buttons mid-point
      // and we aren't moving fast enough to swipe open
      if(e.gesture.deltaX > -(this._currentDrag.buttonsWidth/2)) {

        // If we are going left but too slow, or going right, go back to resting
        if(e.gesture.direction == "left" && Math.abs(e.gesture.velocityX) < 0.3) {
          restingPoint = 0;
        } else if(e.gesture.direction == "right") {
          restingPoint = 0;
        }

      }

      ionic.requestAnimationFrame(function() {
        if(restingPoint === 0) {
          _this._currentDrag.content.style[ionic.CSS.TRANSFORM] = '';
          var buttons = _this._currentDrag.buttons;
          setTimeout(function() {
            buttons && buttons.classList.add('invisible');
          }, 250);
        } else {
          _this._currentDrag.content.style[ionic.CSS.TRANSFORM] = 'translate3d(' + restingPoint + 'px, 0, 0)';
        }
        _this._currentDrag.content.style[ionic.CSS.TRANSITION] = '';


        // Kill the current drag
        _this._lastDrag = _this._currentDrag;
        _this._currentDrag = null;

        // We are done, notify caller
        doneCallback && doneCallback();
      });
    };

    var ReorderDrag = function(opts) {
      this.dragThresholdY = opts.dragThresholdY || 0;
      this.onReorder = opts.onReorder;
      this.listEl = opts.listEl;
      this.el = opts.el;
      this.scrollEl = opts.scrollEl;
      this.scrollView = opts.scrollView;
      // Get the True Top of the list el http://www.quirksmode.org/js/findpos.html
      this.listElTrueTop = 0;
      if (this.listEl.offsetParent) {
        var obj = this.listEl;
        do {
          this.listElTrueTop += obj.offsetTop;
          obj = obj.offsetParent;
        } while (obj);
      }
    };

    ReorderDrag.prototype = new DragOp();

    ReorderDrag.prototype._moveElement = function(e) {
      var y = e.gesture.center.pageY +
        this.scrollView.getValues().top -
        (this._currentDrag.elementHeight / 2) -
        this.listElTrueTop;
      this.el.style[ionic.CSS.TRANSFORM] = 'translate3d(0, '+y+'px, 0)';
    };

    ReorderDrag.prototype.start = function(e) {
      var content;

      var startIndex = ionic.DomUtil.getChildIndex(this.el, this.el.nodeName.toLowerCase());
      var elementHeight = this.el.scrollHeight;
      var placeholder = this.el.cloneNode(true);

      placeholder.classList.add(ITEM_PLACEHOLDER_CLASS);

      this.el.parentNode.insertBefore(placeholder, this.el);
      this.el.classList.add(ITEM_REORDERING_CLASS);

      this._currentDrag = {
        elementHeight: elementHeight,
        startIndex: startIndex,
        placeholder: placeholder,
        scrollHeight: scroll,
        list: placeholder.parentNode
      };

      this._moveElement(e);
    };

    ReorderDrag.prototype.drag = ionic.animationFrameThrottle(function(e) {
      // We really aren't dragging
      var self = this;
      if(!this._currentDrag) {
        return;
      }

      var scrollY = 0;
      var pageY = e.gesture.center.pageY;
      var offset = this.listElTrueTop;

      //If we have a scrollView, check scroll boundaries for dragged element and scroll if necessary
      if (this.scrollView) {

        var container = this.scrollView.__container;
        scrollY = this.scrollView.getValues().top;

        var containerTop = container.offsetTop;
        var pixelsPastTop = containerTop - pageY + this._currentDrag.elementHeight/2;
        var pixelsPastBottom = pageY + this._currentDrag.elementHeight/2 - containerTop - container.offsetHeight;

        if (e.gesture.deltaY < 0 && pixelsPastTop > 0 && scrollY > 0) {
          this.scrollView.scrollBy(null, -pixelsPastTop);
          //Trigger another drag so the scrolling keeps going
          ionic.requestAnimationFrame(function() {
            self.drag(e);
          });
        }
        if (e.gesture.deltaY > 0 && pixelsPastBottom > 0) {
          if (scrollY < this.scrollView.getScrollMax().top) {
            this.scrollView.scrollBy(null, pixelsPastBottom);
            //Trigger another drag so the scrolling keeps going
            ionic.requestAnimationFrame(function() {
              self.drag(e);
            });
          }
        }
      }

      // Check if we should start dragging. Check if we've dragged past the threshold,
      // or we are starting from the open state.
      if(!this._isDragging && Math.abs(e.gesture.deltaY) > this.dragThresholdY) {
        this._isDragging = true;
      }

      if(this._isDragging) {
        this._moveElement(e);

        this._currentDrag.currentY = scrollY + pageY - offset;

        // this._reorderItems();
      }
    });

    // When an item is dragged, we need to reorder any items for sorting purposes
    ReorderDrag.prototype._getReorderIndex = function() {
      var self = this;
      var placeholder = this._currentDrag.placeholder;
      var siblings = Array.prototype.slice.call(this._currentDrag.placeholder.parentNode.children)
        .filter(function(el) {
          return el.nodeName === self.el.nodeName && el !== self.el;
        });

      var dragOffsetTop = this._currentDrag.currentY;
      var el;
      for (var i = 0, len = siblings.length; i < len; i++) {
        el = siblings[i];
        if (i === len - 1) {
          if (dragOffsetTop > el.offsetTop) {
            return i;
          }
        } else if (i === 0) {
          if (dragOffsetTop < el.offsetTop + el.offsetHeight) {
            return i;
          }
        } else if (dragOffsetTop > el.offsetTop - el.offsetHeight / 2 &&
          dragOffsetTop < el.offsetTop + el.offsetHeight * 1.5) {
          return i;
        }
      }
      return this._currentDrag.startIndex;
    };

    ReorderDrag.prototype.end = function(e, doneCallback) {
      if(!this._currentDrag) {
        doneCallback && doneCallback();
        return;
      }

      var placeholder = this._currentDrag.placeholder;
      var finalIndex = this._getReorderIndex();

      // Reposition the element
      this.el.classList.remove(ITEM_REORDERING_CLASS);
      this.el.style[ionic.CSS.TRANSFORM] = '';

      placeholder.parentNode.insertBefore(this.el, placeholder);
      placeholder.parentNode.removeChild(placeholder);

      this.onReorder && this.onReorder(this.el, this._currentDrag.startIndex, finalIndex);

      this._currentDrag = null;
      doneCallback && doneCallback();
    };



    /**
     * The ListView handles a list of items. It will process drag animations, edit mode,
     * and other operations that are common on mobile lists or table views.
     */
    ionic.views.ListView = ionic.views.View.inherit({
      initialize: function(opts) {
        var _this = this;

        opts = ionic.extend({
          onReorder: function(el, oldIndex, newIndex) {},
          virtualRemoveThreshold: -200,
          virtualAddThreshold: 200,
          canSwipe: function() {
            return true;
          }
        }, opts);

        ionic.extend(this, opts);

        if(!this.itemHeight && this.listEl) {
          this.itemHeight = this.listEl.children[0] && parseInt(this.listEl.children[0].style.height, 10);
        }

        //ionic.views.ListView.__super__.initialize.call(this, opts);

        this.onRefresh = opts.onRefresh || function() {};
        this.onRefreshOpening = opts.onRefreshOpening || function() {};
        this.onRefreshHolding = opts.onRefreshHolding || function() {};

        window.ionic.onGesture('release', function(e) {
          _this._handleEndDrag(e);
        }, this.el);

        window.ionic.onGesture('drag', function(e) {
          _this._handleDrag(e);
        }, this.el);
        // Start the drag states
        this._initDrag();
      },
      /**
       * Called to tell the list to stop refreshing. This is useful
       * if you are refreshing the list and are done with refreshing.
       */
      stopRefreshing: function() {
        var refresher = this.el.querySelector('.list-refresher');
        refresher.style.height = '0px';
      },

      /**
       * If we scrolled and have virtual mode enabled, compute the window
       * of active elements in order to figure out the viewport to render.
       */
      didScroll: function(e) {
        if(this.isVirtual) {
          var itemHeight = this.itemHeight;

          // TODO: This would be inaccurate if we are windowed
          var totalItems = this.listEl.children.length;

          // Grab the total height of the list
          var scrollHeight = e.target.scrollHeight;

          // Get the viewport height
          var viewportHeight = this.el.parentNode.offsetHeight;

          // scrollTop is the current scroll position
          var scrollTop = e.scrollTop;

          // High water is the pixel position of the first element to include (everything before
          // that will be removed)
          var highWater = Math.max(0, e.scrollTop + this.virtualRemoveThreshold);

          // Low water is the pixel position of the last element to include (everything after
          // that will be removed)
          var lowWater = Math.min(scrollHeight, Math.abs(e.scrollTop) + viewportHeight + this.virtualAddThreshold);

          // Compute how many items per viewport size can show
          var itemsPerViewport = Math.floor((lowWater - highWater) / itemHeight);

          // Get the first and last elements in the list based on how many can fit
          // between the pixel range of lowWater and highWater
          var first = parseInt(Math.abs(highWater / itemHeight), 10);
          var last = parseInt(Math.abs(lowWater / itemHeight), 10);

          // Get the items we need to remove
          this._virtualItemsToRemove = Array.prototype.slice.call(this.listEl.children, 0, first);

          // Grab the nodes we will be showing
          var nodes = Array.prototype.slice.call(this.listEl.children, first, first + itemsPerViewport);

          this.renderViewport && this.renderViewport(highWater, lowWater, first, last);
        }
      },

      didStopScrolling: function(e) {
        if(this.isVirtual) {
          for(var i = 0; i < this._virtualItemsToRemove.length; i++) {
            var el = this._virtualItemsToRemove[i];
            //el.parentNode.removeChild(el);
            this.didHideItem && this.didHideItem(i);
          }
          // Once scrolling stops, check if we need to remove old items

        }
      },

      /**
       * Clear any active drag effects on the list.
       */
      clearDragEffects: function() {
        if(this._lastDragOp) {
          this._lastDragOp.clean && this._lastDragOp.clean();
          this._lastDragOp = null;
        }
      },

      _initDrag: function() {
        //ionic.views.ListView.__super__._initDrag.call(this);

        // Store the last one
        this._lastDragOp = this._dragOp;

        this._dragOp = null;
      },

      // Return the list item from the given target
      _getItem: function(target) {
        while(target) {
          if(target.classList && target.classList.contains(ITEM_CLASS)) {
            return target;
          }
          target = target.parentNode;
        }
        return null;
      },


      _startDrag: function(e) {
        var _this = this;

        var didStart = false;

        this._isDragging = false;

        var lastDragOp = this._lastDragOp;
        var item;

        // Check if this is a reorder drag
        if(ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_REORDER_BTN_CLASS) && (e.gesture.direction == 'up' || e.gesture.direction == 'down')) {
          item = this._getItem(e.target);

          if(item) {
            this._dragOp = new ReorderDrag({
              listEl: this.el,
              el: item,
              scrollEl: this.scrollEl,
              scrollView: this.scrollView,
              onReorder: function(el, start, end) {
                _this.onReorder && _this.onReorder(el, start, end);
              }
            });
            this._dragOp.start(e);
            e.preventDefault();
          }
        }

        // Or check if this is a swipe to the side drag
        else if(!this._didDragUpOrDown && (e.gesture.direction == 'left' || e.gesture.direction == 'right') && Math.abs(e.gesture.deltaX) > 5) {

          // Make sure this is an item with buttons
          item = this._getItem(e.target);
          if(item && item.querySelector('.item-options')) {
            this._dragOp = new SlideDrag({ el: this.el, canSwipe: this.canSwipe });
            this._dragOp.start(e);
            e.preventDefault();
          }
        }

        // If we had a last drag operation and this is a new one on a different item, clean that last one
        if(lastDragOp && this._dragOp && !this._dragOp.isSameItem(lastDragOp) && e.defaultPrevented) {
          lastDragOp.clean && lastDragOp.clean();
        }
      },


      _handleEndDrag: function(e) {
        var _this = this;

        this._didDragUpOrDown = false;

        if(!this._dragOp) {
          //ionic.views.ListView.__super__._handleEndDrag.call(this, e);
          return;
        }

        this._dragOp.end(e, function() {
          _this._initDrag();
        });
      },

      /**
       * Process the drag event to move the item to the left or right.
       */
      _handleDrag: function(e) {
        var _this = this, content, buttons;

        if(Math.abs(e.gesture.deltaY) > 5) {
          this._didDragUpOrDown = true;
        }

        // If we get a drag event, make sure we aren't in another drag, then check if we should
        // start one
        if(!this.isDragging && !this._dragOp) {
          this._startDrag(e);
        }

        // No drag still, pass it up
        if(!this._dragOp) {
          //ionic.views.ListView.__super__._handleDrag.call(this, e);
          return;
        }

        e.gesture.srcEvent.preventDefault();
        this._dragOp.drag(e);
      }

    });

  })(ionic);

  (function(ionic) {
    'use strict';

    ionic.views.Modal = ionic.views.View.inherit({
      initialize: function(opts) {
        opts = ionic.extend({
          focusFirstInput: false,
          unfocusOnHide: true,
          focusFirstDelay: 600,
          backdropClickToClose: true,
          hardwareBackButtonClose: true,
        }, opts);

        ionic.extend(this, opts);

        this.el = opts.el;
      },
      show: function() {
        var self = this;

        if(self.focusFirstInput) {
          // Let any animations run first
          window.setTimeout(function() {
            var input = self.el.querySelector('input, textarea');
            input && input.focus && input.focus();
          }, self.focusFirstDelay);
        }
      },
      hide: function() {
        // Unfocus all elements
        if(this.unfocusOnHide) {
          var inputs = this.el.querySelectorAll('input, textarea');
          // Let any animations run first
          window.setTimeout(function() {
            for(var i = 0; i < inputs.length; i++) {
              inputs[i].blur && inputs[i].blur();
            }
          });
        }
      }
    });

  })(ionic);

  (function(ionic) {
    'use strict';

    /**
     * The side menu view handles one of the side menu's in a Side Menu Controller
     * configuration.
     * It takes a DOM reference to that side menu element.
     */
    ionic.views.SideMenu = ionic.views.View.inherit({
      initialize: function(opts) {
        this.el = opts.el;
        this.isEnabled = (typeof opts.isEnabled === 'undefined') ? true : opts.isEnabled;
        this.setWidth(opts.width);
      },

      getFullWidth: function() {
        return this.width;
      },
      setWidth: function(width) {
        this.width = width;
        this.el.style.width = width + 'px';
      },
      setIsEnabled: function(isEnabled) {
        this.isEnabled = isEnabled;
      },
      bringUp: function() {
        if(this.el.style.zIndex !== '0') {
          this.el.style.zIndex = '0';
        }
      },
      pushDown: function() {
        if(this.el.style.zIndex !== '-1') {
          this.el.style.zIndex = '-1';
        }
      }
    });

    ionic.views.SideMenuContent = ionic.views.View.inherit({
      initialize: function(opts) {
        var _this = this;

        ionic.extend(this, {
          animationClass: 'menu-animated',
          onDrag: function(e) {},
          onEndDrag: function(e) {},
        }, opts);

        ionic.onGesture('drag', ionic.proxy(this._onDrag, this), this.el);
        ionic.onGesture('release', ionic.proxy(this._onEndDrag, this), this.el);
      },
      _onDrag: function(e) {
        this.onDrag && this.onDrag(e);
      },
      _onEndDrag: function(e) {
        this.onEndDrag && this.onEndDrag(e);
      },
      disableAnimation: function() {
        this.el.classList.remove(this.animationClass);
      },
      enableAnimation: function() {
        this.el.classList.add(this.animationClass);
      },
      getTranslateX: function() {
        return parseFloat(this.el.style[ionic.CSS.TRANSFORM].replace('translate3d(', '').split(',')[0]);
      },
      setTranslateX: ionic.animationFrameThrottle(function(x) {
        this.el.style[ionic.CSS.TRANSFORM] = 'translate3d(' + x + 'px, 0, 0)';
      })
    });

  })(ionic);

  /*
   * Adapted from Swipe.js 2.0
   *
   * Brad Birdsall
   * Copyright 2013, MIT License
   *
   */

  (function(ionic) {
    'use strict';

    ionic.views.Slider = ionic.views.View.inherit({
      initialize: function (options) {
        var slider = this;

        // utilities
        var noop = function() {}; // simple no operation function
        var offloadFn = function(fn) { setTimeout(fn || noop, 0); }; // offload a functions execution

        // check browser capabilities
        var browser = {
          addEventListener: !!window.addEventListener,
          touch: ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch,
          transitions: (function(temp) {
            var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];
            for ( var i in props ) if (temp.style[ props[i] ] !== undefined) return true;
            return false;
          })(document.createElement('swipe'))
        };


        var container = options.el;

        // quit if no root element
        if (!container) return;
        var element = container.children[0];
        var slides, slidePos, width, length;
        options = options || {};
        var index = parseInt(options.startSlide, 10) || 0;
        var speed = options.speed || 300;
        options.continuous = options.continuous !== undefined ? options.continuous : true;

        function setup() {

          // cache slides
          slides = element.children;
          length = slides.length;

          // set continuous to false if only one slide
          if (slides.length < 2) options.continuous = false;

          //special case if two slides
          if (browser.transitions && options.continuous && slides.length < 3) {
            element.appendChild(slides[0].cloneNode(true));
            element.appendChild(element.children[1].cloneNode(true));
            slides = element.children;
          }

          // create an array to store current positions of each slide
          slidePos = new Array(slides.length);

          // determine width of each slide
          width = container.offsetWidth || container.getBoundingClientRect().width;

          element.style.width = (slides.length * width) + 'px';

          // stack elements
          var pos = slides.length;
          while(pos--) {

            var slide = slides[pos];

            slide.style.width = width + 'px';
            slide.setAttribute('data-index', pos);

            if (browser.transitions) {
              slide.style.left = (pos * -width) + 'px';
              move(pos, index > pos ? -width : (index < pos ? width : 0), 0);
            }

          }

          // reposition elements before and after index
          if (options.continuous && browser.transitions) {
            move(circle(index-1), -width, 0);
            move(circle(index+1), width, 0);
          }

          if (!browser.transitions) element.style.left = (index * -width) + 'px';

          container.style.visibility = 'visible';

          options.slidesChanged && options.slidesChanged();
        }

        function prev() {

          if (options.continuous) slide(index-1);
          else if (index) slide(index-1);

        }

        function next() {

          if (options.continuous) slide(index+1);
          else if (index < slides.length - 1) slide(index+1);

        }

        function circle(index) {

          // a simple positive modulo using slides.length
          return (slides.length + (index % slides.length)) % slides.length;

        }

        function slide(to, slideSpeed) {

          // do nothing if already on requested slide
          if (index == to) return;

          if (browser.transitions) {

            var direction = Math.abs(index-to) / (index-to); // 1: backward, -1: forward

            // get the actual position of the slide
            if (options.continuous) {
              var natural_direction = direction;
              direction = -slidePos[circle(to)] / width;

              // if going forward but to < index, use to = slides.length + to
              // if going backward but to > index, use to = -slides.length + to
              if (direction !== natural_direction) to =  -direction * slides.length + to;

            }

            var diff = Math.abs(index-to) - 1;

            // move all the slides between index and to in the right direction
            while (diff--) move( circle((to > index ? to : index) - diff - 1), width * direction, 0);

            to = circle(to);

            move(index, width * direction, slideSpeed || speed);
            move(to, 0, slideSpeed || speed);

            if (options.continuous) move(circle(to - direction), -(width * direction), 0); // we need to get the next in place

          } else {

            to = circle(to);
            animate(index * -width, to * -width, slideSpeed || speed);
            //no fallback for a circular continuous if the browser does not accept transitions
          }

          index = to;
          offloadFn(options.callback && options.callback(index, slides[index]));
        }

        function move(index, dist, speed) {

          translate(index, dist, speed);
          slidePos[index] = dist;

        }

        function translate(index, dist, speed) {

          var slide = slides[index];
          var style = slide && slide.style;

          if (!style) return;

          style.webkitTransitionDuration =
            style.MozTransitionDuration =
              style.msTransitionDuration =
                style.OTransitionDuration =
                  style.transitionDuration = speed + 'ms';

          style.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';
          style.msTransform =
            style.MozTransform =
              style.OTransform = 'translateX(' + dist + 'px)';

        }

        function animate(from, to, speed) {

          // if not an animation, just reposition
          if (!speed) {

            element.style.left = to + 'px';
            return;

          }

          var start = +new Date();

          var timer = setInterval(function() {

            var timeElap = +new Date() - start;

            if (timeElap > speed) {

              element.style.left = to + 'px';

              if (delay) begin();

              options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

              clearInterval(timer);
              return;

            }

            element.style.left = (( (to - from) * (Math.floor((timeElap / speed) * 100) / 100) ) + from) + 'px';

          }, 4);

        }

        // setup auto slideshow
        var delay = options.auto || 0;
        var interval;

        function begin() {

          interval = setTimeout(next, delay);

        }

        function stop() {

          delay = options.auto || 0;
          clearTimeout(interval);

        }


        // setup initial vars
        var start = {};
        var delta = {};
        var isScrolling;

        // setup event capturing
        var events = {

          handleEvent: function(event) {
            if(event.type == 'mousedown' || event.type == 'mouseup' || event.type == 'mousemove') {
              event.touches = [{
                pageX: event.pageX,
                pageY: event.pageY
              }];
            }

            switch (event.type) {
              case 'mousedown': this.start(event); break;
              case 'touchstart': this.start(event); break;
              case 'touchmove': this.touchmove(event); break;
              case 'mousemove': this.touchmove(event); break;
              case 'touchend': offloadFn(this.end(event)); break;
              case 'mouseup': offloadFn(this.end(event)); break;
              case 'webkitTransitionEnd':
              case 'msTransitionEnd':
              case 'oTransitionEnd':
              case 'otransitionend':
              case 'transitionend': offloadFn(this.transitionEnd(event)); break;
              case 'resize': offloadFn(setup); break;
            }

            if (options.stopPropagation) event.stopPropagation();

          },
          start: function(event) {

            var touches = event.touches[0];

            // measure start values
            start = {

              // get initial touch coords
              x: touches.pageX,
              y: touches.pageY,

              // store time to determine touch duration
              time: +new Date()

            };

            // used for testing first move event
            isScrolling = undefined;

            // reset delta and end measurements
            delta = {};

            // attach touchmove and touchend listeners
            if(browser.touch) {
              element.addEventListener('touchmove', this, false);
              element.addEventListener('touchend', this, false);
            } else {
              element.addEventListener('mousemove', this, false);
              element.addEventListener('mouseup', this, false);
              document.addEventListener('mouseup', this, false);
            }
          },
          touchmove: function(event) {

            // ensure swiping with one touch and not pinching
            // ensure sliding is enabled
            if (event.touches.length > 1 ||
              event.scale && event.scale !== 1 ||
              slider.slideIsDisabled) {
              return;
            }

            if (options.disableScroll) event.preventDefault();

            var touches = event.touches[0];

            // measure change in x and y
            delta = {
              x: touches.pageX - start.x,
              y: touches.pageY - start.y
            };

            // determine if scrolling test has run - one time test
            if ( typeof isScrolling == 'undefined') {
              isScrolling = !!( isScrolling || Math.abs(delta.x) < Math.abs(delta.y) );
            }

            // if user is not trying to scroll vertically
            if (!isScrolling) {

              // prevent native scrolling
              event.preventDefault();

              // stop slideshow
              stop();

              // increase resistance if first or last slide
              if (options.continuous) { // we don't add resistance at the end

                translate(circle(index-1), delta.x + slidePos[circle(index-1)], 0);
                translate(index, delta.x + slidePos[index], 0);
                translate(circle(index+1), delta.x + slidePos[circle(index+1)], 0);

              } else {

                delta.x =
                  delta.x /
                  ( (!index && delta.x > 0 ||         // if first slide and sliding left
                    index == slides.length - 1 &&     // or if last slide and sliding right
                    delta.x < 0                       // and if sliding at all
                    ) ?
                    ( Math.abs(delta.x) / width + 1 )      // determine resistance level
                    : 1 );                                 // no resistance if false

                // translate 1:1
                translate(index-1, delta.x + slidePos[index-1], 0);
                translate(index, delta.x + slidePos[index], 0);
                translate(index+1, delta.x + slidePos[index+1], 0);
              }

            }

          },
          end: function(event) {

            // measure duration
            var duration = +new Date() - start.time;

            // determine if slide attempt triggers next/prev slide
            var isValidSlide =
              Number(duration) < 250 &&         // if slide duration is less than 250ms
              Math.abs(delta.x) > 20 ||         // and if slide amt is greater than 20px
              Math.abs(delta.x) > width/2;      // or if slide amt is greater than half the width

            // determine if slide attempt is past start and end
            var isPastBounds = (!index && delta.x > 0) ||      // if first slide and slide amt is greater than 0
              (index == slides.length - 1 && delta.x < 0); // or if last slide and slide amt is less than 0

            if (options.continuous) isPastBounds = false;

            // determine direction of swipe (true:right, false:left)
            var direction = delta.x < 0;

            // if not scrolling vertically
            if (!isScrolling) {

              if (isValidSlide && !isPastBounds) {

                if (direction) {

                  if (options.continuous) { // we need to get the next in this direction in place

                    move(circle(index-1), -width, 0);
                    move(circle(index+2), width, 0);

                  } else {
                    move(index-1, -width, 0);
                  }

                  move(index, slidePos[index]-width, speed);
                  move(circle(index+1), slidePos[circle(index+1)]-width, speed);
                  index = circle(index+1);

                } else {
                  if (options.continuous) { // we need to get the next in this direction in place

                    move(circle(index+1), width, 0);
                    move(circle(index-2), -width, 0);

                  } else {
                    move(index+1, width, 0);
                  }

                  move(index, slidePos[index]+width, speed);
                  move(circle(index-1), slidePos[circle(index-1)]+width, speed);
                  index = circle(index-1);

                }

                options.callback && options.callback(index, slides[index]);

              } else {

                if (options.continuous) {

                  move(circle(index-1), -width, speed);
                  move(index, 0, speed);
                  move(circle(index+1), width, speed);

                } else {

                  move(index-1, -width, speed);
                  move(index, 0, speed);
                  move(index+1, width, speed);
                }

              }

            }

            // kill touchmove and touchend event listeners until touchstart called again
            if(browser.touch) {
              element.removeEventListener('touchmove', events, false);
              element.removeEventListener('touchend', events, false);
            } else {
              element.removeEventListener('mousemove', events, false);
              element.removeEventListener('mouseup', events, false);
              document.removeEventListener('mouseup', events, false);
            }

          },
          transitionEnd: function(event) {

            if (parseInt(event.target.getAttribute('data-index'), 10) == index) {

              if (delay) begin();

              options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

            }

          }

        };

        // Public API
        this.update = function() {
          setTimeout(setup);
        };
        this.setup = function() {
          setup();
        };

        this.enableSlide = function(shouldEnable) {
          if (arguments.length) {
            this.slideIsDisabled = !shouldEnable;
          }
          return !this.slideIsDisabled;
        },
          this.slide = function(to, speed) {
            // cancel slideshow
            stop();

            slide(to, speed);
          };

        this.prev = this.previous = function() {
          // cancel slideshow
          stop();

          prev();
        };

        this.next = function() {
          // cancel slideshow
          stop();

          next();
        };

        this.stop = function() {
          // cancel slideshow
          stop();
        };

        this.start = function() {
          begin();
        };

        this.currentIndex = function() {
          // return current index position
          return index;
        };

        this.slidesCount = function() {
          // return total number of slides
          return length;
        };

        this.kill = function() {
          // cancel slideshow
          stop();

          // reset element
          element.style.width = '';
          element.style.left = '';

          // reset slides
          var pos = slides.length;
          while(pos--) {

            var slide = slides[pos];
            slide.style.width = '';
            slide.style.left = '';

            if (browser.transitions) translate(pos, 0, 0);

          }

          // removed event listeners
          if (browser.addEventListener) {

            // remove current event listeners
            element.removeEventListener('touchstart', events, false);
            element.removeEventListener('webkitTransitionEnd', events, false);
            element.removeEventListener('msTransitionEnd', events, false);
            element.removeEventListener('oTransitionEnd', events, false);
            element.removeEventListener('otransitionend', events, false);
            element.removeEventListener('transitionend', events, false);
            window.removeEventListener('resize', events, false);

          }
          else {

            window.onresize = null;

          }
        };

        this.load = function() {
          // trigger setup
          setup();

          // start auto slideshow if applicable
          if (delay) begin();


          // add event listeners
          if (browser.addEventListener) {

            // set touchstart event on element
            if (browser.touch) {
              element.addEventListener('touchstart', events, false);
            } else {
              element.addEventListener('mousedown', events, false);
            }

            if (browser.transitions) {
              element.addEventListener('webkitTransitionEnd', events, false);
              element.addEventListener('msTransitionEnd', events, false);
              element.addEventListener('oTransitionEnd', events, false);
              element.addEventListener('otransitionend', events, false);
              element.addEventListener('transitionend', events, false);
            }

            // set resize event on window
            window.addEventListener('resize', events, false);

          } else {

            window.onresize = function () { setup(); }; // to play nice with old IE

          }
        };

      }
    });

  })(ionic);

  (function(ionic) {
    'use strict';

    ionic.views.Toggle = ionic.views.View.inherit({
      initialize: function(opts) {
        var self = this;

        this.el = opts.el;
        this.checkbox = opts.checkbox;
        this.track = opts.track;
        this.handle = opts.handle;
        this.openPercent = -1;
        this.onChange = opts.onChange || function() {};

        this.triggerThreshold = opts.triggerThreshold || 20;

        this.dragStartHandler = function(e) {
          self.dragStart(e);
        };
        this.dragHandler = function(e) {
          self.drag(e);
        };
        this.holdHandler = function(e) {
          self.hold(e);
        };
        this.releaseHandler = function(e) {
          self.release(e);
        };

        this.dragStartGesture = ionic.onGesture('dragstart', this.dragStartHandler, this.el);
        this.dragGesture = ionic.onGesture('drag', this.dragHandler, this.el);
        this.dragHoldGesture = ionic.onGesture('hold', this.holdHandler, this.el);
        this.dragReleaseGesture = ionic.onGesture('release', this.releaseHandler, this.el);
      },

      destroy: function() {
        ionic.offGesture(this.dragStartGesture, 'dragstart', this.dragStartGesture);
        ionic.offGesture(this.dragGesture, 'drag', this.dragGesture);
        ionic.offGesture(this.dragHoldGesture, 'hold', this.holdHandler);
        ionic.offGesture(this.dragReleaseGesture, 'release', this.releaseHandler);
      },

      tap: function(e) {
        if(this.el.getAttribute('disabled') !== 'disabled') {
          this.val( !this.checkbox.checked );
        }
      },

      dragStart: function(e) {
        if(this.checkbox.disabled) return;

        this._dragInfo = {
          width: this.el.offsetWidth,
          left: this.el.offsetLeft,
          right: this.el.offsetLeft + this.el.offsetWidth,
          triggerX: this.el.offsetWidth / 2,
          initialState: this.checkbox.checked
        };

        // Stop any parent dragging
        e.gesture.srcEvent.preventDefault();

        // Trigger hold styles
        this.hold(e);
      },

      drag: function(e) {
        var self = this;
        if(!this._dragInfo) { return; }

        // Stop any parent dragging
        e.gesture.srcEvent.preventDefault();

        ionic.requestAnimationFrame(function(amount) {
          if (!self._dragInfo) { return; }

          var slidePageLeft = self.track.offsetLeft + (self.handle.offsetWidth / 2);
          var slidePageRight = self.track.offsetLeft + self.track.offsetWidth - (self.handle.offsetWidth / 2);
          var dx = e.gesture.deltaX;

          var px = e.gesture.touches[0].pageX - self._dragInfo.left;
          var mx = self._dragInfo.width - self.triggerThreshold;

          // The initial state was on, so "tend towards" on
          if(self._dragInfo.initialState) {
            if(px < self.triggerThreshold) {
              self.setOpenPercent(0);
            } else if(px > self._dragInfo.triggerX) {
              self.setOpenPercent(100);
            }
          } else {
            // The initial state was off, so "tend towards" off
            if(px < self._dragInfo.triggerX) {
              self.setOpenPercent(0);
            } else if(px > mx) {
              self.setOpenPercent(100);
            }
          }
        });
      },

      endDrag: function(e) {
        this._dragInfo = null;
      },

      hold: function(e) {
        this.el.classList.add('dragging');
      },
      release: function(e) {
        this.el.classList.remove('dragging');
        this.endDrag(e);
      },


      setOpenPercent: function(openPercent) {
        // only make a change if the new open percent has changed
        if(this.openPercent < 0 || (openPercent < (this.openPercent - 3) || openPercent > (this.openPercent + 3) ) ) {
          this.openPercent = openPercent;

          if(openPercent === 0) {
            this.val(false);
          } else if(openPercent === 100) {
            this.val(true);
          } else {
            var openPixel = Math.round( (openPercent / 100) * this.track.offsetWidth - (this.handle.offsetWidth) );
            openPixel = (openPixel < 1 ? 0 : openPixel);
            this.handle.style[ionic.CSS.TRANSFORM] = 'translate3d(' + openPixel + 'px,0,0)';
          }
        }
      },

      val: function(value) {
        if(value === true || value === false) {
          if(this.handle.style[ionic.CSS.TRANSFORM] !== "") {
            this.handle.style[ionic.CSS.TRANSFORM] = "";
          }
          this.checkbox.checked = value;
          this.openPercent = (value ? 100 : 0);
          this.onChange && this.onChange();
        }
        return this.checkbox.checked;
      }

    });

  })(ionic);

  (function(ionic) {
    'use strict';
    ionic.controllers.ViewController = function(options) {
      this.initialize.apply(this, arguments);
    };

    ionic.controllers.ViewController.inherit = ionic.inherit;

    ionic.extend(ionic.controllers.ViewController.prototype, {
      initialize: function() {},
      // Destroy this view controller, including all child views
      destroy: function() {
      }
    });

  })(window.ionic);

  (function(ionic) {
    'use strict';

    /**
     * The SideMenuController is a controller with a left and/or right menu that
     * can be slid out and toggled. Seen on many an app.
     *
     * The right or left menu can be disabled or not used at all, if desired.
     */
    ionic.controllers.SideMenuController = ionic.controllers.ViewController.inherit({
      initialize: function(options) {
        var self = this;

        this.left = options.left;
        this.right = options.right;
        this.content = options.content;
        this.dragThresholdX = options.dragThresholdX || 10;

        this._rightShowing = false;
        this._leftShowing = false;
        this._isDragging = false;

        if(this.content) {
          this.content.onDrag = function(e) {
            self._handleDrag(e);
          };

          this.content.onEndDrag =function(e) {
            self._endDrag(e);
          };
        }
      },
      /**
       * Set the content view controller if not passed in the constructor options.
       *
       * @param {object} content
       */
      setContent: function(content) {
        var self = this;

        this.content = content;

        this.content.onDrag = function(e) {
          self._handleDrag(e);
        };

        this.content.endDrag = function(e) {
          self._endDrag(e);
        };
      },

      isOpenLeft: function() {
        return this.getOpenAmount() > 0;
      },

      isOpenRight: function() {
        return this.getOpenAmount() < 0;
      },

      /**
       * Toggle the left menu to open 100%
       */
      toggleLeft: function(shouldOpen) {
        var openAmount = this.getOpenAmount();
        if (arguments.length === 0) {
          shouldOpen = openAmount <= 0;
        }
        this.content.enableAnimation();
        if(!shouldOpen) {
          this.openPercentage(0);
        } else {
          this.openPercentage(100);
        }
      },

      /**
       * Toggle the right menu to open 100%
       */
      toggleRight: function(shouldOpen) {
        var openAmount = this.getOpenAmount();
        if (arguments.length === 0) {
          shouldOpen = openAmount >= 0;
        }
        this.content.enableAnimation();
        if(!shouldOpen) {
          this.openPercentage(0);
        } else {
          this.openPercentage(-100);
        }
      },

      /**
       * Close all menus.
       */
      close: function() {
        this.openPercentage(0);
      },

      /**
       * @return {float} The amount the side menu is open, either positive or negative for left (positive), or right (negative)
       */
      getOpenAmount: function() {
        return this.content && this.content.getTranslateX() || 0;
      },

      /**
       * @return {float} The ratio of open amount over menu width. For example, a
       * menu of width 100 open 50 pixels would be open 50% or a ratio of 0.5. Value is negative
       * for right menu.
       */
      getOpenRatio: function() {
        var amount = this.getOpenAmount();
        if(amount >= 0) {
          return amount / this.left.width;
        }
        return amount / this.right.width;
      },

      isOpen: function() {
        return this.getOpenAmount() !== 0;
      },

      /**
       * @return {float} The percentage of open amount over menu width. For example, a
       * menu of width 100 open 50 pixels would be open 50%. Value is negative
       * for right menu.
       */
      getOpenPercentage: function() {
        return this.getOpenRatio() * 100;
      },

      /**
       * Open the menu with a given percentage amount.
       * @param {float} percentage The percentage (positive or negative for left/right) to open the menu.
       */
      openPercentage: function(percentage) {
        var p = percentage / 100;

        if(this.left && percentage >= 0) {
          this.openAmount(this.left.width * p);
        } else if(this.right && percentage < 0) {
          var maxRight = this.right.width;
          this.openAmount(this.right.width * p);
        }

        if(percentage !== 0) {
          document.body.classList.add('menu-open');
        } else {
          document.body.classList.remove('menu-open');
        }
      },

      /**
       * Open the menu the given pixel amount.
       * @param {float} amount the pixel amount to open the menu. Positive value for left menu,
       * negative value for right menu (only one menu will be visible at a time).
       */
      openAmount: function(amount) {
        var maxLeft = this.left && this.left.width || 0;
        var maxRight = this.right && this.right.width || 0;

        // Check if we can move to that side, depending if the left/right panel is enabled
        if(!(this.left && this.left.isEnabled) && amount > 0) {
          this.content.setTranslateX(0);
          return;
        }

        if(!(this.right && this.right.isEnabled) && amount < 0) {
          this.content.setTranslateX(0);
          return;
        }

        if(this._leftShowing && amount > maxLeft) {
          this.content.setTranslateX(maxLeft);
          return;
        }

        if(this._rightShowing && amount < -maxRight) {
          this.content.setTranslateX(-maxRight);
          return;
        }

        this.content.setTranslateX(amount);

        if(amount >= 0) {
          this._leftShowing = true;
          this._rightShowing = false;

          if(amount > 0) {
            // Push the z-index of the right menu down
            this.right && this.right.pushDown && this.right.pushDown();
            // Bring the z-index of the left menu up
            this.left && this.left.bringUp && this.left.bringUp();
          }
        } else {
          this._rightShowing = true;
          this._leftShowing = false;

          // Bring the z-index of the right menu up
          this.right && this.right.bringUp && this.right.bringUp();
          // Push the z-index of the left menu down
          this.left && this.left.pushDown && this.left.pushDown();
        }
      },

      /**
       * Given an event object, find the final resting position of this side
       * menu. For example, if the user "throws" the content to the right and
       * releases the touch, the left menu should snap open (animated, of course).
       *
       * @param {Event} e the gesture event to use for snapping
       */
      snapToRest: function(e) {
        // We want to animate at the end of this
        this.content.enableAnimation();
        this._isDragging = false;

        // Check how much the panel is open after the drag, and
        // what the drag velocity is
        var ratio = this.getOpenRatio();

        if(ratio === 0) {
          // Just to be safe
          this.openPercentage(0);
          return;
        }

        var velocityThreshold = 0.3;
        var velocityX = e.gesture.velocityX;
        var direction = e.gesture.direction;

        // Less than half, going left
        //if(ratio > 0 && ratio < 0.5 && direction == 'left' && velocityX < velocityThreshold) {
        //this.openPercentage(0);
        //}

        // Going right, less than half, too slow (snap back)
        if(ratio > 0 && ratio < 0.5 && direction == 'right' && velocityX < velocityThreshold) {
          this.openPercentage(0);
        }

        // Going left, more than half, too slow (snap back)
        else if(ratio > 0.5 && direction == 'left' && velocityX < velocityThreshold) {
          this.openPercentage(100);
        }

        // Going left, less than half, too slow (snap back)
        else if(ratio < 0 && ratio > -0.5 && direction == 'left' && velocityX < velocityThreshold) {
          this.openPercentage(0);
        }

        // Going right, more than half, too slow (snap back)
        else if(ratio < 0.5 && direction == 'right' && velocityX < velocityThreshold) {
          this.openPercentage(-100);
        }

        // Going right, more than half, or quickly (snap open)
        else if(direction == 'right' && ratio >= 0 && (ratio >= 0.5 || velocityX > velocityThreshold)) {
          this.openPercentage(100);
        }

        // Going left, more than half, or quickly (span open)
        else if(direction == 'left' && ratio <= 0 && (ratio <= -0.5 || velocityX > velocityThreshold)) {
          this.openPercentage(-100);
        }

        // Snap back for safety
        else {
          this.openPercentage(0);
        }
      },

      // End a drag with the given event
      _endDrag: function(e) {
        if(this._isDragging) {
          this.snapToRest(e);
        }
        this._startX = null;
        this._lastX = null;
        this._offsetX = null;
      },

      // Handle a drag event
      _handleDrag: function(e) {

        // If we don't have start coords, grab and store them
        if(!this._startX) {
          this._startX = e.gesture.touches[0].pageX;
          this._lastX = this._startX;
        } else {
          // Grab the current tap coords
          this._lastX = e.gesture.touches[0].pageX;
        }

        // Calculate difference from the tap points
        if(!this._isDragging && Math.abs(this._lastX - this._startX) > this.dragThresholdX) {
          // if the difference is greater than threshold, start dragging using the current
          // point as the starting point
          this._startX = this._lastX;

          this._isDragging = true;
          // Initialize dragging
          this.content.disableAnimation();
          this._offsetX = this.getOpenAmount();
        }

        if(this._isDragging) {
          this.openAmount(this._offsetX + (this._lastX - this._startX));
        }
      }
    });

  })(ionic);

})();
/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/**
 * @license AngularJS v1.2.17
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, document, undefined) {'use strict';

  /**
   * @description
   *
   * This object provides a utility for producing rich Error messages within
   * Angular. It can be called as follows:
   *
   * var exampleMinErr = minErr('example');
   * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
   *
   * The above creates an instance of minErr in the example namespace. The
   * resulting error will have a namespaced error code of example.one.  The
   * resulting error will replace {0} with the value of foo, and {1} with the
   * value of bar. The object is not restricted in the number of arguments it can
   * take.
   *
   * If fewer arguments are specified than necessary for interpolation, the extra
   * interpolation markers will be preserved in the final string.
   *
   * Since data will be parsed statically during a build step, some restrictions
   * are applied with respect to how minErr instances are created and called.
   * Instances should have names of the form namespaceMinErr for a minErr created
   * using minErr('namespace') . Error codes, namespaces and template strings
   * should all be static strings, not variables or general expressions.
   *
   * @param {string} module The namespace to use for the new minErr instance.
   * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
   */

  function minErr(module) {
    return function () {
      var code = arguments[0],
        prefix = '[' + (module ? module + ':' : '') + code + '] ',
        template = arguments[1],
        templateArgs = arguments,
        stringify = function (obj) {
          if (typeof obj === 'function') {
            return obj.toString().replace(/ \{[\s\S]*$/, '');
          } else if (typeof obj === 'undefined') {
            return 'undefined';
          } else if (typeof obj !== 'string') {
            return JSON.stringify(obj);
          }
          return obj;
        },
        message, i;

      message = prefix + template.replace(/\{\d+\}/g, function (match) {
        var index = +match.slice(1, -1), arg;

        if (index + 2 < templateArgs.length) {
          arg = templateArgs[index + 2];
          if (typeof arg === 'function') {
            return arg.toString().replace(/ ?\{[\s\S]*$/, '');
          } else if (typeof arg === 'undefined') {
            return 'undefined';
          } else if (typeof arg !== 'string') {
            return toJson(arg);
          }
          return arg;
        }
        return match;
      });

      message = message + '\nhttp://errors.angularjs.org/1.2.17/' +
        (module ? module + '/' : '') + code;
      for (i = 2; i < arguments.length; i++) {
        message = message + (i == 2 ? '?' : '&') + 'p' + (i-2) + '=' +
          encodeURIComponent(stringify(arguments[i]));
      }

      return new Error(message);
    };
  }

  /* We need to tell jshint what variables are being exported */
  /* global
   -angular,
   -msie,
   -jqLite,
   -jQuery,
   -slice,
   -push,
   -toString,
   -ngMinErr,
   -angularModule,
   -nodeName_,
   -uid,

   -lowercase,
   -uppercase,
   -manualLowercase,
   -manualUppercase,
   -nodeName_,
   -isArrayLike,
   -forEach,
   -sortedKeys,
   -forEachSorted,
   -reverseParams,
   -nextUid,
   -setHashKey,
   -extend,
   -int,
   -inherit,
   -noop,
   -identity,
   -valueFn,
   -isUndefined,
   -isDefined,
   -isObject,
   -isString,
   -isNumber,
   -isDate,
   -isArray,
   -isFunction,
   -isRegExp,
   -isWindow,
   -isScope,
   -isFile,
   -isBlob,
   -isBoolean,
   -trim,
   -isElement,
   -makeMap,
   -map,
   -size,
   -includes,
   -indexOf,
   -arrayRemove,
   -isLeafNode,
   -copy,
   -shallowCopy,
   -equals,
   -csp,
   -concat,
   -sliceArgs,
   -bind,
   -toJsonReplacer,
   -toJson,
   -fromJson,
   -toBoolean,
   -startingTag,
   -tryDecodeURIComponent,
   -parseKeyValue,
   -toKeyValue,
   -encodeUriSegment,
   -encodeUriQuery,
   -angularInit,
   -bootstrap,
   -snake_case,
   -bindJQuery,
   -assertArg,
   -assertArgFn,
   -assertNotHasOwnProperty,
   -getter,
   -getBlockElements,
   -hasOwnProperty,

   */

////////////////////////////////////

  /**
   * @ngdoc module
   * @name ng
   * @module ng
   * @description
   *
   * # ng (core module)
   * The ng module is loaded by default when an AngularJS application is started. The module itself
   * contains the essential components for an AngularJS application to function. The table below
   * lists a high level breakdown of each of the services/factories, filters, directives and testing
   * components available within this core module.
   *
   * <div doc-module-components="ng"></div>
   */

  /**
   * @ngdoc function
   * @name angular.lowercase
   * @module ng
   * @kind function
   *
   * @description Converts the specified string to lowercase.
   * @param {string} string String to be converted to lowercase.
   * @returns {string} Lowercased string.
   */
  var lowercase = function(string){return isString(string) ? string.toLowerCase() : string;};
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  /**
   * @ngdoc function
   * @name angular.uppercase
   * @module ng
   * @kind function
   *
   * @description Converts the specified string to uppercase.
   * @param {string} string String to be converted to uppercase.
   * @returns {string} Uppercased string.
   */
  var uppercase = function(string){return isString(string) ? string.toUpperCase() : string;};


  var manualLowercase = function(s) {
    /* jshint bitwise: false */
    return isString(s)
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
      : s;
  };
  var manualUppercase = function(s) {
    /* jshint bitwise: false */
    return isString(s)
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
      : s;
  };


// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives.
  if ('i' !== 'I'.toLowerCase()) {
    lowercase = manualLowercase;
    uppercase = manualUppercase;
  }


  var /** holds major version number for IE or NaN for real browsers */
    msie,
    jqLite,           // delay binding since jQuery could be loaded after us.
    jQuery,           // delay binding
    slice             = [].slice,
    push              = [].push,
    toString          = Object.prototype.toString,
    ngMinErr          = minErr('ng'),

    /** @name angular */
    angular           = window.angular || (window.angular = {}),
    angularModule,
    nodeName_,
    uid               = ['0', '0', '0'];

  /**
   * IE 11 changed the format of the UserAgent string.
   * See http://msdn.microsoft.com/en-us/library/ms537503.aspx
   */
  msie = int((/msie (\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
  if (isNaN(msie)) {
    msie = int((/trident\/.*; rv:(\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
  }


  /**
   * @private
   * @param {*} obj
   * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
   *                   String ...)
   */
  function isArrayLike(obj) {
    if (obj == null || isWindow(obj)) {
      return false;
    }

    var length = obj.length;

    if (obj.nodeType === 1 && length) {
      return true;
    }

    return isString(obj) || isArray(obj) || length === 0 ||
      typeof length === 'number' && length > 0 && (length - 1) in obj;
  }

  /**
   * @ngdoc function
   * @name angular.forEach
   * @module ng
   * @kind function
   *
   * @description
   * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
   * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`
   * is the value of an object property or an array element and `key` is the object property key or
   * array element index. Specifying a `context` for the function is optional.
   *
   * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
   * using the `hasOwnProperty` method.
   *
   ```js
   var values = {name: 'misko', gender: 'male'};
   var log = [];
   angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
   expect(log).toEqual(['name: misko', 'gender: male']);
   ```
   *
   * @param {Object|Array} obj Object to iterate over.
   * @param {Function} iterator Iterator function.
   * @param {Object=} context Object to become context (`this`) for the iterator function.
   * @returns {Object|Array} Reference to `obj`.
   */
  function forEach(obj, iterator, context) {
    var key;
    if (obj) {
      if (isFunction(obj)) {
        for (key in obj) {
          // Need to check if hasOwnProperty exists,
          // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
          if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
            iterator.call(context, obj[key], key);
          }
        }
      } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context);
      } else if (isArrayLike(obj)) {
        for (key = 0; key < obj.length; key++)
          iterator.call(context, obj[key], key);
      } else {
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            iterator.call(context, obj[key], key);
          }
        }
      }
    }
    return obj;
  }

  function sortedKeys(obj) {
    var keys = [];
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        keys.push(key);
      }
    }
    return keys.sort();
  }

  function forEachSorted(obj, iterator, context) {
    var keys = sortedKeys(obj);
    for ( var i = 0; i < keys.length; i++) {
      iterator.call(context, obj[keys[i]], keys[i]);
    }
    return keys;
  }


  /**
   * when using forEach the params are value, key, but it is often useful to have key, value.
   * @param {function(string, *)} iteratorFn
   * @returns {function(*, string)}
   */
  function reverseParams(iteratorFn) {
    return function(value, key) { iteratorFn(key, value); };
  }

  /**
   * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric
   * characters such as '012ABC'. The reason why we are not using simply a number counter is that
   * the number string gets longer over time, and it can also overflow, where as the nextId
   * will grow much slower, it is a string, and it will never overflow.
   *
   * @returns {string} an unique alpha-numeric string
   */
  function nextUid() {
    var index = uid.length;
    var digit;

    while(index) {
      index--;
      digit = uid[index].charCodeAt(0);
      if (digit == 57 /*'9'*/) {
        uid[index] = 'A';
        return uid.join('');
      }
      if (digit == 90  /*'Z'*/) {
        uid[index] = '0';
      } else {
        uid[index] = String.fromCharCode(digit + 1);
        return uid.join('');
      }
    }
    uid.unshift('0');
    return uid.join('');
  }


  /**
   * Set or clear the hashkey for an object.
   * @param obj object
   * @param h the hashkey (!truthy to delete the hashkey)
   */
  function setHashKey(obj, h) {
    if (h) {
      obj.$$hashKey = h;
    }
    else {
      delete obj.$$hashKey;
    }
  }

  /**
   * @ngdoc function
   * @name angular.extend
   * @module ng
   * @kind function
   *
   * @description
   * Extends the destination object `dst` by copying all of the properties from the `src` object(s)
   * to `dst`. You can specify multiple `src` objects.
   *
   * @param {Object} dst Destination object.
   * @param {...Object} src Source object(s).
   * @returns {Object} Reference to `dst`.
   */
  function extend(dst) {
    var h = dst.$$hashKey;
    forEach(arguments, function(obj) {
      if (obj !== dst) {
        forEach(obj, function(value, key) {
          dst[key] = value;
        });
      }
    });

    setHashKey(dst,h);
    return dst;
  }

  function int(str) {
    return parseInt(str, 10);
  }


  function inherit(parent, extra) {
    return extend(new (extend(function() {}, {prototype:parent}))(), extra);
  }

  /**
   * @ngdoc function
   * @name angular.noop
   * @module ng
   * @kind function
   *
   * @description
   * A function that performs no operations. This function can be useful when writing code in the
   * functional style.
   ```js
   function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
   */
  function noop() {}
  noop.$inject = [];


  /**
   * @ngdoc function
   * @name angular.identity
   * @module ng
   * @kind function
   *
   * @description
   * A function that returns its first argument. This function is useful when writing code in the
   * functional style.
   *
   ```js
   function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   ```
   */
  function identity($) {return $;}
  identity.$inject = [];


  function valueFn(value) {return function() {return value;};}

  /**
   * @ngdoc function
   * @name angular.isUndefined
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is undefined.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is undefined.
   */
  function isUndefined(value){return typeof value === 'undefined';}


  /**
   * @ngdoc function
   * @name angular.isDefined
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is defined.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is defined.
   */
  function isDefined(value){return typeof value !== 'undefined';}


  /**
   * @ngdoc function
   * @name angular.isObject
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
   * considered to be objects. Note that JavaScript arrays are objects.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is an `Object` but not `null`.
   */
  function isObject(value){return value != null && typeof value === 'object';}


  /**
   * @ngdoc function
   * @name angular.isString
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a `String`.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `String`.
   */
  function isString(value){return typeof value === 'string';}


  /**
   * @ngdoc function
   * @name angular.isNumber
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a `Number`.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `Number`.
   */
  function isNumber(value){return typeof value === 'number';}


  /**
   * @ngdoc function
   * @name angular.isDate
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a value is a date.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `Date`.
   */
  function isDate(value) {
    return toString.call(value) === '[object Date]';
  }


  /**
   * @ngdoc function
   * @name angular.isArray
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is an `Array`.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is an `Array`.
   */
  function isArray(value) {
    return toString.call(value) === '[object Array]';
  }


  /**
   * @ngdoc function
   * @name angular.isFunction
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a `Function`.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `Function`.
   */
  function isFunction(value){return typeof value === 'function';}


  /**
   * Determines if a value is a regular expression object.
   *
   * @private
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `RegExp`.
   */
  function isRegExp(value) {
    return toString.call(value) === '[object RegExp]';
  }


  /**
   * Checks if `obj` is a window object.
   *
   * @private
   * @param {*} obj Object to check
   * @returns {boolean} True if `obj` is a window obj.
   */
  function isWindow(obj) {
    return obj && obj.document && obj.location && obj.alert && obj.setInterval;
  }


  function isScope(obj) {
    return obj && obj.$evalAsync && obj.$watch;
  }


  function isFile(obj) {
    return toString.call(obj) === '[object File]';
  }


  function isBlob(obj) {
    return toString.call(obj) === '[object Blob]';
  }


  function isBoolean(value) {
    return typeof value === 'boolean';
  }


  var trim = (function() {
    // native trim is way faster: http://jsperf.com/angular-trim-test
    // but IE doesn't have it... :-(
    // TODO: we should move this into IE/ES5 polyfill
    if (!String.prototype.trim) {
      return function(value) {
        return isString(value) ? value.replace(/^\s\s*/, '').replace(/\s\s*$/, '') : value;
      };
    }
    return function(value) {
      return isString(value) ? value.trim() : value;
    };
  })();


  /**
   * @ngdoc function
   * @name angular.isElement
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a DOM element (or wrapped jQuery element).
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
   */
  function isElement(node) {
    return !!(node &&
      (node.nodeName  // we are a direct element
        || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
  }

  /**
   * @param str 'key1,key2,...'
   * @returns {object} in the form of {key1:true, key2:true, ...}
   */
  function makeMap(str) {
    var obj = {}, items = str.split(","), i;
    for ( i = 0; i < items.length; i++ )
      obj[ items[i] ] = true;
    return obj;
  }


  if (msie < 9) {
    nodeName_ = function(element) {
      element = element.nodeName ? element : element[0];
      return (element.scopeName && element.scopeName != 'HTML')
        ? uppercase(element.scopeName + ':' + element.nodeName) : element.nodeName;
    };
  } else {
    nodeName_ = function(element) {
      return element.nodeName ? element.nodeName : element[0].nodeName;
    };
  }


  function map(obj, iterator, context) {
    var results = [];
    forEach(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  }


  /**
   * @description
   * Determines the number of elements in an array, the number of properties an object has, or
   * the length of a string.
   *
   * Note: This function is used to augment the Object type in Angular expressions. See
   * {@link angular.Object} for more information about Angular arrays.
   *
   * @param {Object|Array|string} obj Object, array, or string to inspect.
   * @param {boolean} [ownPropsOnly=false] Count only "own" properties in an object
   * @returns {number} The size of `obj` or `0` if `obj` is neither an object nor an array.
   */
  function size(obj, ownPropsOnly) {
    var count = 0, key;

    if (isArray(obj) || isString(obj)) {
      return obj.length;
    } else if (isObject(obj)) {
      for (key in obj)
        if (!ownPropsOnly || obj.hasOwnProperty(key))
          count++;
    }

    return count;
  }


  function includes(array, obj) {
    return indexOf(array, obj) != -1;
  }

  function indexOf(array, obj) {
    if (array.indexOf) return array.indexOf(obj);

    for (var i = 0; i < array.length; i++) {
      if (obj === array[i]) return i;
    }
    return -1;
  }

  function arrayRemove(array, value) {
    var index = indexOf(array, value);
    if (index >=0)
      array.splice(index, 1);
    return value;
  }

  function isLeafNode (node) {
    if (node) {
      switch (node.nodeName) {
        case "OPTION":
        case "PRE":
        case "TITLE":
          return true;
      }
    }
    return false;
  }

  /**
   * @ngdoc function
   * @name angular.copy
   * @module ng
   * @kind function
   *
   * @description
   * Creates a deep copy of `source`, which should be an object or an array.
   *
   * * If no destination is supplied, a copy of the object or array is created.
   * * If a destination is provided, all of its elements (for array) or properties (for objects)
   *   are deleted and then all elements/properties from the source are copied to it.
   * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
   * * If `source` is identical to 'destination' an exception will be thrown.
   *
   * @param {*} source The source that will be used to make a copy.
   *                   Can be any type, including primitives, `null`, and `undefined`.
   * @param {(Object|Array)=} destination Destination into which the source is copied. If
   *     provided, must be of the same type as `source`.
   * @returns {*} The copy or updated `destination`, if `destination` was specified.
   *
   * @example
   <example>
   <file name="index.html">
   <div ng-controller="Controller">
   <form novalidate class="simple-form">
   Name: <input type="text" ng-model="user.name" /><br />
   E-mail: <input type="email" ng-model="user.email" /><br />
   Gender: <input type="radio" ng-model="user.gender" value="male" />male
   <input type="radio" ng-model="user.gender" value="female" />female<br />
   <button ng-click="reset()">RESET</button>
   <button ng-click="update(user)">SAVE</button>
   </form>
   <pre>form = {{user | json}}</pre>
   <pre>master = {{master | json}}</pre>
   </div>

   <script>
   function Controller($scope) {
    $scope.master= {};

    $scope.update = function(user) {
      // Example with 1 argument
      $scope.master= angular.copy(user);
    };

    $scope.reset = function() {
      // Example with 2 arguments
      angular.copy($scope.master, $scope.user);
    };

    $scope.reset();
  }
   </script>
   </file>
   </example>
   */
  function copy(source, destination, stackSource, stackDest) {
    if (isWindow(source) || isScope(source)) {
      throw ngMinErr('cpws',
        "Can't copy! Making copies of Window or Scope instances is not supported.");
    }

    if (!destination) {
      destination = source;
      if (source) {
        if (isArray(source)) {
          destination = copy(source, [], stackSource, stackDest);
        } else if (isDate(source)) {
          destination = new Date(source.getTime());
        } else if (isRegExp(source)) {
          destination = new RegExp(source.source);
        } else if (isObject(source)) {
          destination = copy(source, {}, stackSource, stackDest);
        }
      }
    } else {
      if (source === destination) throw ngMinErr('cpi',
        "Can't copy! Source and destination are identical.");

      stackSource = stackSource || [];
      stackDest = stackDest || [];

      if (isObject(source)) {
        var index = indexOf(stackSource, source);
        if (index !== -1) return stackDest[index];

        stackSource.push(source);
        stackDest.push(destination);
      }

      var result;
      if (isArray(source)) {
        destination.length = 0;
        for ( var i = 0; i < source.length; i++) {
          result = copy(source[i], null, stackSource, stackDest);
          if (isObject(source[i])) {
            stackSource.push(source[i]);
            stackDest.push(result);
          }
          destination.push(result);
        }
      } else {
        var h = destination.$$hashKey;
        forEach(destination, function(value, key) {
          delete destination[key];
        });
        for ( var key in source) {
          result = copy(source[key], null, stackSource, stackDest);
          if (isObject(source[key])) {
            stackSource.push(source[key]);
            stackDest.push(result);
          }
          destination[key] = result;
        }
        setHashKey(destination,h);
      }

    }
    return destination;
  }

  /**
   * Creates a shallow copy of an object, an array or a primitive
   */
  function shallowCopy(src, dst) {
    if (isArray(src)) {
      dst = dst || [];

      for ( var i = 0; i < src.length; i++) {
        dst[i] = src[i];
      }
    } else if (isObject(src)) {
      dst = dst || {};

      for (var key in src) {
        if (hasOwnProperty.call(src, key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
          dst[key] = src[key];
        }
      }
    }

    return dst || src;
  }


  /**
   * @ngdoc function
   * @name angular.equals
   * @module ng
   * @kind function
   *
   * @description
   * Determines if two objects or two values are equivalent. Supports value types, regular
   * expressions, arrays and objects.
   *
   * Two objects or values are considered equivalent if at least one of the following is true:
   *
   * * Both objects or values pass `===` comparison.
   * * Both objects or values are of the same type and all of their properties are equal by
   *   comparing them with `angular.equals`.
   * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
   * * Both values represent the same regular expression (In JavaScript,
   *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
   *   representation matches).
   *
   * During a property comparison, properties of `function` type and properties with names
   * that begin with `$` are ignored.
   *
   * Scope and DOMWindow objects are being compared only by identify (`===`).
   *
   * @param {*} o1 Object or value to compare.
   * @param {*} o2 Object or value to compare.
   * @returns {boolean} True if arguments are equal.
   */
  function equals(o1, o2) {
    if (o1 === o2) return true;
    if (o1 === null || o2 === null) return false;
    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
    var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
    if (t1 == t2) {
      if (t1 == 'object') {
        if (isArray(o1)) {
          if (!isArray(o2)) return false;
          if ((length = o1.length) == o2.length) {
            for(key=0; key<length; key++) {
              if (!equals(o1[key], o2[key])) return false;
            }
            return true;
          }
        } else if (isDate(o1)) {
          return isDate(o2) && o1.getTime() == o2.getTime();
        } else if (isRegExp(o1) && isRegExp(o2)) {
          return o1.toString() == o2.toString();
        } else {
          if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2)) return false;
          keySet = {};
          for(key in o1) {
            if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
            if (!equals(o1[key], o2[key])) return false;
            keySet[key] = true;
          }
          for(key in o2) {
            if (!keySet.hasOwnProperty(key) &&
              key.charAt(0) !== '$' &&
              o2[key] !== undefined &&
              !isFunction(o2[key])) return false;
          }
          return true;
        }
      }
    }
    return false;
  }


  function csp() {
    return (document.securityPolicy && document.securityPolicy.isActive) ||
      (document.querySelector &&
        !!(document.querySelector('[ng-csp]') || document.querySelector('[data-ng-csp]')));
  }


  function concat(array1, array2, index) {
    return array1.concat(slice.call(array2, index));
  }

  function sliceArgs(args, startIndex) {
    return slice.call(args, startIndex || 0);
  }


  /* jshint -W101 */
  /**
   * @ngdoc function
   * @name angular.bind
   * @module ng
   * @kind function
   *
   * @description
   * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
   * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
   * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
   * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
   *
   * @param {Object} self Context which `fn` should be evaluated in.
   * @param {function()} fn Function to be bound.
   * @param {...*} args Optional arguments to be prebound to the `fn` function call.
   * @returns {function()} Function that wraps the `fn` with all the specified bindings.
   */
  /* jshint +W101 */
  function bind(self, fn) {
    var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
    if (isFunction(fn) && !(fn instanceof RegExp)) {
      return curryArgs.length
        ? function() {
        return arguments.length
          ? fn.apply(self, curryArgs.concat(slice.call(arguments, 0)))
          : fn.apply(self, curryArgs);
      }
        : function() {
        return arguments.length
          ? fn.apply(self, arguments)
          : fn.call(self);
      };
    } else {
      // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
      return fn;
    }
  }


  function toJsonReplacer(key, value) {
    var val = value;

    if (typeof key === 'string' && key.charAt(0) === '$') {
      val = undefined;
    } else if (isWindow(value)) {
      val = '$WINDOW';
    } else if (value &&  document === value) {
      val = '$DOCUMENT';
    } else if (isScope(value)) {
      val = '$SCOPE';
    }

    return val;
  }


  /**
   * @ngdoc function
   * @name angular.toJson
   * @module ng
   * @kind function
   *
   * @description
   * Serializes input into a JSON-formatted string. Properties with leading $ characters will be
   * stripped since angular uses this notation internally.
   *
   * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
   * @param {boolean=} pretty If set to true, the JSON output will contain newlines and whitespace.
   * @returns {string|undefined} JSON-ified string representing `obj`.
   */
  function toJson(obj, pretty) {
    if (typeof obj === 'undefined') return undefined;
    return JSON.stringify(obj, toJsonReplacer, pretty ? '  ' : null);
  }


  /**
   * @ngdoc function
   * @name angular.fromJson
   * @module ng
   * @kind function
   *
   * @description
   * Deserializes a JSON string.
   *
   * @param {string} json JSON string to deserialize.
   * @returns {Object|Array|string|number} Deserialized thingy.
   */
  function fromJson(json) {
    return isString(json)
      ? JSON.parse(json)
      : json;
  }


  function toBoolean(value) {
    if (typeof value === 'function') {
      value = true;
    } else if (value && value.length !== 0) {
      var v = lowercase("" + value);
      value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
    } else {
      value = false;
    }
    return value;
  }

  /**
   * @returns {string} Returns the string representation of the element.
   */
  function startingTag(element) {
    element = jqLite(element).clone();
    try {
      // turns out IE does not let you set .html() on elements which
      // are not allowed to have children. So we just ignore it.
      element.empty();
    } catch(e) {}
    // As Per DOM Standards
    var TEXT_NODE = 3;
    var elemHtml = jqLite('<div>').append(element).html();
    try {
      return element[0].nodeType === TEXT_NODE ? lowercase(elemHtml) :
        elemHtml.
          match(/^(<[^>]+>)/)[1].
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });
    } catch(e) {
      return lowercase(elemHtml);
    }

  }


/////////////////////////////////////////////////

  /**
   * Tries to decode the URI component without throwing an exception.
   *
   * @private
   * @param str value potential URI component to check.
   * @returns {boolean} True if `value` can be decoded
   * with the decodeURIComponent function.
   */
  function tryDecodeURIComponent(value) {
    try {
      return decodeURIComponent(value);
    } catch(e) {
      // Ignore any invalid uri component
    }
  }


  /**
   * Parses an escaped url query string into key-value pairs.
   * @returns {Object.<string,boolean|Array>}
   */
  function parseKeyValue(/**string*/keyValue) {
    var obj = {}, key_value, key;
    forEach((keyValue || "").split('&'), function(keyValue) {
      if ( keyValue ) {
        key_value = keyValue.split('=');
        key = tryDecodeURIComponent(key_value[0]);
        if ( isDefined(key) ) {
          var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
          if (!obj[key]) {
            obj[key] = val;
          } else if(isArray(obj[key])) {
            obj[key].push(val);
          } else {
            obj[key] = [obj[key],val];
          }
        }
      }
    });
    return obj;
  }

  function toKeyValue(obj) {
    var parts = [];
    forEach(obj, function(value, key) {
      if (isArray(value)) {
        forEach(value, function(arrayValue) {
          parts.push(encodeUriQuery(key, true) +
            (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
        });
      } else {
        parts.push(encodeUriQuery(key, true) +
          (value === true ? '' : '=' + encodeUriQuery(value, true)));
      }
    });
    return parts.length ? parts.join('&') : '';
  }


  /**
   * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
   * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
   * segments:
   *    segment       = *pchar
   *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
   *    pct-encoded   = "%" HEXDIG HEXDIG
   *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
   *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
   *                     / "*" / "+" / "," / ";" / "="
   */
  function encodeUriSegment(val) {
    return encodeUriQuery(val, true).
      replace(/%26/gi, '&').
      replace(/%3D/gi, '=').
      replace(/%2B/gi, '+');
  }


  /**
   * This method is intended for encoding *key* or *value* parts of query component. We need a custom
   * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
   * encoded per http://tools.ietf.org/html/rfc3986:
   *    query       = *( pchar / "/" / "?" )
   *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
   *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
   *    pct-encoded   = "%" HEXDIG HEXDIG
   *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
   *                     / "*" / "+" / "," / ";" / "="
   */
  function encodeUriQuery(val, pctEncodeSpaces) {
    return encodeURIComponent(val).
      replace(/%40/gi, '@').
      replace(/%3A/gi, ':').
      replace(/%24/g, '$').
      replace(/%2C/gi, ',').
      replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
  }


  /**
   * @ngdoc directive
   * @name ngApp
   * @module ng
   *
   * @element ANY
   * @param {angular.Module} ngApp an optional application
   *   {@link angular.module module} name to load.
   *
   * @description
   *
   * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
   * designates the **root element** of the application and is typically placed near the root element
   * of the page - e.g. on the `<body>` or `<html>` tags.
   *
   * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
   * found in the document will be used to define the root element to auto-bootstrap as an
   * application. To run multiple applications in an HTML document you must manually bootstrap them using
   * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
   *
   * You can specify an **AngularJS module** to be used as the root module for the application.  This
   * module will be loaded into the {@link auto.$injector} when the application is bootstrapped and
   * should contain the application code needed or have dependencies on other modules that will
   * contain the code. See {@link angular.module} for more information.
   *
   * In the example below if the `ngApp` directive were not placed on the `html` element then the
   * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
   * would not be resolved to `3`.
   *
   * `ngApp` is the easiest, and most common, way to bootstrap an application.
   *
   <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
   I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
   </example>
   *
   */
  function angularInit(element, bootstrap) {
    var elements = [element],
      appElement,
      module,
      names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],
      NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;

    function append(element) {
      element && elements.push(element);
    }

    forEach(names, function(name) {
      names[name] = true;
      append(document.getElementById(name));
      name = name.replace(':', '\\:');
      if (element.querySelectorAll) {
        forEach(element.querySelectorAll('.' + name), append);
        forEach(element.querySelectorAll('.' + name + '\\:'), append);
        forEach(element.querySelectorAll('[' + name + ']'), append);
      }
    });

    forEach(elements, function(element) {
      if (!appElement) {
        var className = ' ' + element.className + ' ';
        var match = NG_APP_CLASS_REGEXP.exec(className);
        if (match) {
          appElement = element;
          module = (match[2] || '').replace(/\s+/g, ',');
        } else {
          forEach(element.attributes, function(attr) {
            if (!appElement && names[attr.name]) {
              appElement = element;
              module = attr.value;
            }
          });
        }
      }
    });
    if (appElement) {
      bootstrap(appElement, module ? [module] : []);
    }
  }

  /**
   * @ngdoc function
   * @name angular.bootstrap
   * @module ng
   * @description
   * Use this function to manually start up angular application.
   *
   * See: {@link guide/bootstrap Bootstrap}
   *
   * Note that ngScenario-based end-to-end tests cannot use this function to bootstrap manually.
   * They must use {@link ng.directive:ngApp ngApp}.
   *
   * Angular will detect if it has been loaded into the browser more than once and only allow the
   * first loaded script to be bootstrapped and will report a warning to the browser console for
   * each of the subsequent scripts.   This prevents strange results in applications, where otherwise
   * multiple instances of Angular try to work on the DOM.
   *
   * <example name="multi-bootstrap" module="multi-bootstrap">
   * <file name="index.html">
   * <script src="../../../angular.js"></script>
   * <div ng-controller="BrokenTable">
   *   <table>
   *   <tr>
   *     <th ng-repeat="heading in headings">{{heading}}</th>
   *   </tr>
   *   <tr ng-repeat="filling in fillings">
   *     <td ng-repeat="fill in filling">{{fill}}</td>
   *   </tr>
   * </table>
   * </div>
   * </file>
   * <file name="controller.js">
   * var app = angular.module('multi-bootstrap', [])
   *
   * .controller('BrokenTable', function($scope) {
 *     $scope.headings = ['One', 'Two', 'Three'];
 *     $scope.fillings = [[1, 2, 3], ['A', 'B', 'C'], [7, 8, 9]];
 * });
   * </file>
   * <file name="protractor.js" type="protractor">
   * it('should only insert one table cell for each item in $scope.fillings', function() {
 *  expect(element.all(by.css('td')).count())
 *      .toBe(9);
 * });
   * </file>
   * </example>
   *
   * @param {DOMElement} element DOM element which is the root of angular application.
   * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
   *     Each item in the array should be the name of a predefined module or a (DI annotated)
   *     function that will be invoked by the injector as a run block.
   *     See: {@link angular.module modules}
   * @returns {auto.$injector} Returns the newly created injector for this app.
   */
  function bootstrap(element, modules) {
    var doBootstrap = function() {
      element = jqLite(element);

      if (element.injector()) {
        var tag = (element[0] === document) ? 'document' : startingTag(element);
        throw ngMinErr('btstrpd', "App Already Bootstrapped with this Element '{0}'", tag);
      }

      modules = modules || [];
      modules.unshift(['$provide', function($provide) {
        $provide.value('$rootElement', element);
      }]);
      modules.unshift('ng');
      var injector = createInjector(modules);
      injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector', '$animate',
          function(scope, element, compile, injector, animate) {
            scope.$apply(function() {
              element.data('$injector', injector);
              compile(element)(scope);
            });
          }]
      );
      return injector;
    };

    var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

    if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
      return doBootstrap();
    }

    window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
    angular.resumeBootstrap = function(extraModules) {
      forEach(extraModules, function(module) {
        modules.push(module);
      });
      doBootstrap();
    };
  }

  var SNAKE_CASE_REGEXP = /[A-Z]/g;
  function snake_case(name, separator) {
    separator = separator || '_';
    return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }

  function bindJQuery() {
    // bind to jQuery if present;
    jQuery = window.jQuery;
    // Use jQuery if it exists with proper functionality, otherwise default to us.
    // Angular 1.2+ requires jQuery 1.7.1+ for on()/off() support.
    if (jQuery && jQuery.fn.on) {
      jqLite = jQuery;
      extend(jQuery.fn, {
        scope: JQLitePrototype.scope,
        isolateScope: JQLitePrototype.isolateScope,
        controller: JQLitePrototype.controller,
        injector: JQLitePrototype.injector,
        inheritedData: JQLitePrototype.inheritedData
      });
      // Method signature:
      //     jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments)
      jqLitePatchJQueryRemove('remove', true, true, false);
      jqLitePatchJQueryRemove('empty', false, false, false);
      jqLitePatchJQueryRemove('html', false, false, true);
    } else {
      jqLite = JQLite;
    }
    angular.element = jqLite;
  }

  /**
   * throw error if the argument is falsy.
   */
  function assertArg(arg, name, reason) {
    if (!arg) {
      throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
    }
    return arg;
  }

  function assertArgFn(arg, name, acceptArrayAnnotation) {
    if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
    }

    assertArg(isFunction(arg), name, 'not a function, got ' +
      (arg && typeof arg == 'object' ? arg.constructor.name || 'Object' : typeof arg));
    return arg;
  }

  /**
   * throw error if the name given is hasOwnProperty
   * @param  {String} name    the name to test
   * @param  {String} context the context in which the name is used, such as module or directive
   */
  function assertNotHasOwnProperty(name, context) {
    if (name === 'hasOwnProperty') {
      throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
    }
  }

  /**
   * Return the value accessible from the object by path. Any undefined traversals are ignored
   * @param {Object} obj starting object
   * @param {String} path path to traverse
   * @param {boolean} [bindFnToScope=true]
   * @returns {Object} value as accessible by path
   */
//TODO(misko): this function needs to be removed
  function getter(obj, path, bindFnToScope) {
    if (!path) return obj;
    var keys = path.split('.');
    var key;
    var lastInstance = obj;
    var len = keys.length;

    for (var i = 0; i < len; i++) {
      key = keys[i];
      if (obj) {
        obj = (lastInstance = obj)[key];
      }
    }
    if (!bindFnToScope && isFunction(obj)) {
      return bind(lastInstance, obj);
    }
    return obj;
  }

  /**
   * Return the DOM siblings between the first and last node in the given array.
   * @param {Array} array like object
   * @returns {DOMElement} object containing the elements
   */
  function getBlockElements(nodes) {
    var startNode = nodes[0],
      endNode = nodes[nodes.length - 1];
    if (startNode === endNode) {
      return jqLite(startNode);
    }

    var element = startNode;
    var elements = [element];

    do {
      element = element.nextSibling;
      if (!element) break;
      elements.push(element);
    } while (element !== endNode);

    return jqLite(elements);
  }

  /**
   * @ngdoc type
   * @name angular.Module
   * @module ng
   * @description
   *
   * Interface for configuring angular {@link angular.module modules}.
   */

  function setupModuleLoader(window) {

    var $injectorMinErr = minErr('$injector');
    var ngMinErr = minErr('ng');

    function ensure(obj, name, factory) {
      return obj[name] || (obj[name] = factory());
    }

    var angular = ensure(window, 'angular', Object);

    // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
    angular.$$minErr = angular.$$minErr || minErr;

    return ensure(angular, 'module', function() {
      /** @type {Object.<string, angular.Module>} */
      var modules = {};

      /**
       * @ngdoc function
       * @name angular.module
       * @module ng
       * @description
       *
       * The `angular.module` is a global place for creating, registering and retrieving Angular
       * modules.
       * All modules (angular core or 3rd party) that should be available to an application must be
       * registered using this mechanism.
       *
       * When passed two or more arguments, a new module is created.  If passed only one argument, an
       * existing module (the name passed as the first argument to `module`) is retrieved.
       *
       *
       * # Module
       *
       * A module is a collection of services, directives, filters, and configuration information.
       * `angular.module` is used to configure the {@link auto.$injector $injector}.
       *
       * ```js
       * // Create a new module
       * var myModule = angular.module('myModule', []);
       *
       * // register a new service
       * myModule.value('appName', 'MyCoolApp');
       *
       * // configure existing services inside initialization blocks.
       * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
       * ```
       *
       * Then you can create an injector and load your modules like this:
       *
       * ```js
       * var injector = angular.injector(['ng', 'myModule'])
       * ```
       *
       * However it's more likely that you'll just use
       * {@link ng.directive:ngApp ngApp} or
       * {@link angular.bootstrap} to simplify this process for you.
       *
       * @param {!string} name The name of the module to create or retrieve.
       <<<<<* @param {!Array.<string>=} requires If specified then new module is being created. If
       >>>>>*        unspecified then the module is being retrieved for further configuration.
       * @param {Function} configFn Optional configuration function for the module. Same as
       *        {@link angular.Module#config Module#config()}.
       * @returns {module} new module with the {@link angular.Module} api.
       */
      return function module(name, requires, configFn) {
        var assertNotHasOwnProperty = function(name, context) {
          if (name === 'hasOwnProperty') {
            throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
          }
        };

        assertNotHasOwnProperty(name, 'module');
        if (requires && modules.hasOwnProperty(name)) {
          modules[name] = null;
        }
        return ensure(modules, name, function() {
          if (!requires) {
            throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
              "the module name or forgot to load it. If registering a module ensure that you " +
              "specify the dependencies as the second argument.", name);
          }

          /** @type {!Array.<Array.<*>>} */
          var invokeQueue = [];

          /** @type {!Array.<Function>} */
          var runBlocks = [];

          var config = invokeLater('$injector', 'invoke');

          /** @type {angular.Module} */
          var moduleInstance = {
            // Private state
            _invokeQueue: invokeQueue,
            _runBlocks: runBlocks,

            /**
             * @ngdoc property
             * @name angular.Module#requires
             * @module ng
             * @returns {Array.<string>} List of module names which must be loaded before this module.
             * @description
             * Holds the list of modules which the injector will load before the current module is
             * loaded.
             */
            requires: requires,

            /**
             * @ngdoc property
             * @name angular.Module#name
             * @module ng
             * @returns {string} Name of the module.
             * @description
             */
            name: name,


            /**
             * @ngdoc method
             * @name angular.Module#provider
             * @module ng
             * @param {string} name service name
             * @param {Function} providerType Construction function for creating new instance of the
             *                                service.
             * @description
             * See {@link auto.$provide#provider $provide.provider()}.
             */
            provider: invokeLater('$provide', 'provider'),

            /**
             * @ngdoc method
             * @name angular.Module#factory
             * @module ng
             * @param {string} name service name
             * @param {Function} providerFunction Function for creating new instance of the service.
             * @description
             * See {@link auto.$provide#factory $provide.factory()}.
             */
            factory: invokeLater('$provide', 'factory'),

            /**
             * @ngdoc method
             * @name angular.Module#service
             * @module ng
             * @param {string} name service name
             * @param {Function} constructor A constructor function that will be instantiated.
             * @description
             * See {@link auto.$provide#service $provide.service()}.
             */
            service: invokeLater('$provide', 'service'),

            /**
             * @ngdoc method
             * @name angular.Module#value
             * @module ng
             * @param {string} name service name
             * @param {*} object Service instance object.
             * @description
             * See {@link auto.$provide#value $provide.value()}.
             */
            value: invokeLater('$provide', 'value'),

            /**
             * @ngdoc method
             * @name angular.Module#constant
             * @module ng
             * @param {string} name constant name
             * @param {*} object Constant value.
             * @description
             * Because the constant are fixed, they get applied before other provide methods.
             * See {@link auto.$provide#constant $provide.constant()}.
             */
            constant: invokeLater('$provide', 'constant', 'unshift'),

            /**
             * @ngdoc method
             * @name angular.Module#animation
             * @module ng
             * @param {string} name animation name
             * @param {Function} animationFactory Factory function for creating new instance of an
             *                                    animation.
             * @description
             *
             * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
             *
             *
             * Defines an animation hook that can be later used with
             * {@link ngAnimate.$animate $animate} service and directives that use this service.
             *
             * ```js
             * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
             * ```
             *
             * See {@link ngAnimate.$animateProvider#register $animateProvider.register()} and
             * {@link ngAnimate ngAnimate module} for more information.
             */
            animation: invokeLater('$animateProvider', 'register'),

            /**
             * @ngdoc method
             * @name angular.Module#filter
             * @module ng
             * @param {string} name Filter name.
             * @param {Function} filterFactory Factory function for creating new instance of filter.
             * @description
             * See {@link ng.$filterProvider#register $filterProvider.register()}.
             */
            filter: invokeLater('$filterProvider', 'register'),

            /**
             * @ngdoc method
             * @name angular.Module#controller
             * @module ng
             * @param {string|Object} name Controller name, or an object map of controllers where the
             *    keys are the names and the values are the constructors.
             * @param {Function} constructor Controller constructor function.
             * @description
             * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
             */
            controller: invokeLater('$controllerProvider', 'register'),

            /**
             * @ngdoc method
             * @name angular.Module#directive
             * @module ng
             * @param {string|Object} name Directive name, or an object map of directives where the
             *    keys are the names and the values are the factories.
             * @param {Function} directiveFactory Factory function for creating new instance of
             * directives.
             * @description
             * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
             */
            directive: invokeLater('$compileProvider', 'directive'),

            /**
             * @ngdoc method
             * @name angular.Module#config
             * @module ng
             * @param {Function} configFn Execute this function on module load. Useful for service
             *    configuration.
             * @description
             * Use this method to register work which needs to be performed on module loading.
             * For more about how to configure services, see
             * {@link providers#providers_provider-recipe Provider Recipe}.
             */
            config: config,

            /**
             * @ngdoc method
             * @name angular.Module#run
             * @module ng
             * @param {Function} initializationFn Execute this function after injector creation.
             *    Useful for application initialization.
             * @description
             * Use this method to register work which should be performed when the injector is done
             * loading all modules.
             */
            run: function(block) {
              runBlocks.push(block);
              return this;
            }
          };

          if (configFn) {
            config(configFn);
          }

          return  moduleInstance;

          /**
           * @param {string} provider
           * @param {string} method
           * @param {String=} insertMethod
           * @returns {angular.Module}
           */
          function invokeLater(provider, method, insertMethod) {
            return function() {
              invokeQueue[insertMethod || 'push']([provider, method, arguments]);
              return moduleInstance;
            };
          }
        });
      };
    });

  }

  /* global
   angularModule: true,
   version: true,

   $LocaleProvider,
   $CompileProvider,

   htmlAnchorDirective,
   inputDirective,
   inputDirective,
   formDirective,
   scriptDirective,
   selectDirective,
   styleDirective,
   optionDirective,
   ngBindDirective,
   ngBindHtmlDirective,
   ngBindTemplateDirective,
   ngClassDirective,
   ngClassEvenDirective,
   ngClassOddDirective,
   ngCspDirective,
   ngCloakDirective,
   ngControllerDirective,
   ngFormDirective,
   ngHideDirective,
   ngIfDirective,
   ngIncludeDirective,
   ngIncludeFillContentDirective,
   ngInitDirective,
   ngNonBindableDirective,
   ngPluralizeDirective,
   ngRepeatDirective,
   ngShowDirective,
   ngStyleDirective,
   ngSwitchDirective,
   ngSwitchWhenDirective,
   ngSwitchDefaultDirective,
   ngOptionsDirective,
   ngTranscludeDirective,
   ngModelDirective,
   ngListDirective,
   ngChangeDirective,
   requiredDirective,
   requiredDirective,
   ngValueDirective,
   ngAttributeAliasDirectives,
   ngEventDirectives,

   $AnchorScrollProvider,
   $AnimateProvider,
   $BrowserProvider,
   $CacheFactoryProvider,
   $ControllerProvider,
   $DocumentProvider,
   $ExceptionHandlerProvider,
   $FilterProvider,
   $InterpolateProvider,
   $IntervalProvider,
   $HttpProvider,
   $HttpBackendProvider,
   $LocationProvider,
   $LogProvider,
   $ParseProvider,
   $RootScopeProvider,
   $QProvider,
   $$SanitizeUriProvider,
   $SceProvider,
   $SceDelegateProvider,
   $SnifferProvider,
   $TemplateCacheProvider,
   $TimeoutProvider,
   $$RAFProvider,
   $$AsyncCallbackProvider,
   $WindowProvider
   */


  /**
   * @ngdoc object
   * @name angular.version
   * @module ng
   * @description
   * An object that contains information about the current AngularJS version. This object has the
   * following properties:
   *
   * - `full` – `{string}` – Full version string, such as "0.9.18".
   * - `major` – `{number}` – Major version number, such as "0".
   * - `minor` – `{number}` – Minor version number, such as "9".
   * - `dot` – `{number}` – Dot version number, such as "18".
   * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
   */
  var version = {
    full: '1.2.17',    // all of these placeholder strings will be replaced by grunt's
    major: 1,    // package task
    minor: 2,
    dot: 17,
    codeName: 'quantum-disentanglement'
  };


  function publishExternalAPI(angular){
    extend(angular, {
      'bootstrap': bootstrap,
      'copy': copy,
      'extend': extend,
      'equals': equals,
      'element': jqLite,
      'forEach': forEach,
      'injector': createInjector,
      'noop':noop,
      'bind':bind,
      'toJson': toJson,
      'fromJson': fromJson,
      'identity':identity,
      'isUndefined': isUndefined,
      'isDefined': isDefined,
      'isString': isString,
      'isFunction': isFunction,
      'isObject': isObject,
      'isNumber': isNumber,
      'isElement': isElement,
      'isArray': isArray,
      'version': version,
      'isDate': isDate,
      'lowercase': lowercase,
      'uppercase': uppercase,
      'callbacks': {counter: 0},
      '$$minErr': minErr,
      '$$csp': csp
    });

    angularModule = setupModuleLoader(window);
    try {
      angularModule('ngLocale');
    } catch (e) {
      angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
    }

    angularModule('ng', ['ngLocale'], ['$provide',
      function ngModule($provide) {
        // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
        $provide.provider({
          $$sanitizeUri: $$SanitizeUriProvider
        });
        $provide.provider('$compile', $CompileProvider).
          directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            style: styleDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            ngValue: ngValueDirective
          }).
          directive({
            ngInclude: ngIncludeFillContentDirective
          }).
          directive(ngAttributeAliasDirectives).
          directive(ngEventDirectives);
        $provide.provider({
          $anchorScroll: $AnchorScrollProvider,
          $animate: $AnimateProvider,
          $browser: $BrowserProvider,
          $cacheFactory: $CacheFactoryProvider,
          $controller: $ControllerProvider,
          $document: $DocumentProvider,
          $exceptionHandler: $ExceptionHandlerProvider,
          $filter: $FilterProvider,
          $interpolate: $InterpolateProvider,
          $interval: $IntervalProvider,
          $http: $HttpProvider,
          $httpBackend: $HttpBackendProvider,
          $location: $LocationProvider,
          $log: $LogProvider,
          $parse: $ParseProvider,
          $rootScope: $RootScopeProvider,
          $q: $QProvider,
          $sce: $SceProvider,
          $sceDelegate: $SceDelegateProvider,
          $sniffer: $SnifferProvider,
          $templateCache: $TemplateCacheProvider,
          $timeout: $TimeoutProvider,
          $window: $WindowProvider,
          $$rAF: $$RAFProvider,
          $$asyncCallback : $$AsyncCallbackProvider
        });
      }
    ]);
  }

  /* global

   -JQLitePrototype,
   -addEventListenerFn,
   -removeEventListenerFn,
   -BOOLEAN_ATTR
   */

//////////////////////////////////
//JQLite
//////////////////////////////////

  /**
   * @ngdoc function
   * @name angular.element
   * @module ng
   * @kind function
   *
   * @description
   * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
   *
   * If jQuery is available, `angular.element` is an alias for the
   * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
   * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
   *
   * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
   * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
   * commonly needed functionality with the goal of having a very small footprint.</div>
   *
   * To use jQuery, simply load it before `DOMContentLoaded` event fired.
   *
   * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
   * jqLite; they are never raw DOM references.</div>
   *
   * ## Angular's jqLite
   * jqLite provides only the following jQuery methods:
   *
   * - [`addClass()`](http://api.jquery.com/addClass/)
   * - [`after()`](http://api.jquery.com/after/)
   * - [`append()`](http://api.jquery.com/append/)
   * - [`attr()`](http://api.jquery.com/attr/)
   * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
   * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
   * - [`clone()`](http://api.jquery.com/clone/)
   * - [`contents()`](http://api.jquery.com/contents/)
   * - [`css()`](http://api.jquery.com/css/)
   * - [`data()`](http://api.jquery.com/data/)
   * - [`empty()`](http://api.jquery.com/empty/)
   * - [`eq()`](http://api.jquery.com/eq/)
   * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
   * - [`hasClass()`](http://api.jquery.com/hasClass/)
   * - [`html()`](http://api.jquery.com/html/)
   * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
   * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
   * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
   * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
   * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
   * - [`prepend()`](http://api.jquery.com/prepend/)
   * - [`prop()`](http://api.jquery.com/prop/)
   * - [`ready()`](http://api.jquery.com/ready/)
   * - [`remove()`](http://api.jquery.com/remove/)
   * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
   * - [`removeClass()`](http://api.jquery.com/removeClass/)
   * - [`removeData()`](http://api.jquery.com/removeData/)
   * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
   * - [`text()`](http://api.jquery.com/text/)
   * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
   * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
   * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
   * - [`val()`](http://api.jquery.com/val/)
   * - [`wrap()`](http://api.jquery.com/wrap/)
   *
   * ## jQuery/jqLite Extras
   * Angular also provides the following additional methods and events to both jQuery and jqLite:
   *
   * ### Events
   * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
   *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
   *    element before it is removed.
   *
   * ### Methods
   * - `controller(name)` - retrieves the controller of the current element or its parent. By default
   *   retrieves controller associated with the `ngController` directive. If `name` is provided as
   *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
   *   `'ngModel'`).
   * - `injector()` - retrieves the injector of the current element or its parent.
   * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
   *   element or its parent.
   * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
   *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
   *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
   * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
   *   parent element is reached.
   *
   * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
   * @returns {Object} jQuery object.
   */

  var jqCache = JQLite.cache = {},
    jqName = JQLite.expando = 'ng' + new Date().getTime(),
    jqId = 1,
    addEventListenerFn = (window.document.addEventListener
      ? function(element, type, fn) {element.addEventListener(type, fn, false);}
      : function(element, type, fn) {element.attachEvent('on' + type, fn);}),
    removeEventListenerFn = (window.document.removeEventListener
      ? function(element, type, fn) {element.removeEventListener(type, fn, false); }
      : function(element, type, fn) {element.detachEvent('on' + type, fn); });

  /*
   * !!! This is an undocumented "private" function !!!
   */
  var jqData = JQLite._data = function(node) {
    //jQuery always returns an object on cache miss
    return this.cache[node[this.expando]] || {};
  };

  function jqNextId() { return ++jqId; }


  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
  var MOZ_HACK_REGEXP = /^moz([A-Z])/;
  var jqLiteMinErr = minErr('jqLite');

  /**
   * Converts snake_case to camelCase.
   * Also there is special case for Moz prefix starting with upper case letter.
   * @param name Name to normalize
   */
  function camelCase(name) {
    return name.
      replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
        return offset ? letter.toUpperCase() : letter;
      }).
      replace(MOZ_HACK_REGEXP, 'Moz$1');
  }

/////////////////////////////////////////////
// jQuery mutation patch
//
// In conjunction with bindJQuery intercepts all jQuery's DOM destruction apis and fires a
// $destroy event on all DOM nodes being removed.
//
/////////////////////////////////////////////

  function jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments) {
    var originalJqFn = jQuery.fn[name];
    originalJqFn = originalJqFn.$original || originalJqFn;
    removePatch.$original = originalJqFn;
    jQuery.fn[name] = removePatch;

    function removePatch(param) {
      // jshint -W040
      var list = filterElems && param ? [this.filter(param)] : [this],
        fireEvent = dispatchThis,
        set, setIndex, setLength,
        element, childIndex, childLength, children;

      if (!getterIfNoArguments || param != null) {
        while(list.length) {
          set = list.shift();
          for(setIndex = 0, setLength = set.length; setIndex < setLength; setIndex++) {
            element = jqLite(set[setIndex]);
            if (fireEvent) {
              element.triggerHandler('$destroy');
            } else {
              fireEvent = !fireEvent;
            }
            for(childIndex = 0, childLength = (children = element.children()).length;
                childIndex < childLength;
                childIndex++) {
              list.push(jQuery(children[childIndex]));
            }
          }
        }
      }
      return originalJqFn.apply(this, arguments);
    }
  }

  var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
  var HTML_REGEXP = /<|&#?\w+;/;
  var TAG_NAME_REGEXP = /<([\w:]+)/;
  var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;

  var wrapMap = {
    'option': [1, '<select multiple="multiple">', '</select>'],

    'thead': [1, '<table>', '</table>'],
    'col': [2, '<table><colgroup>', '</colgroup></table>'],
    'tr': [2, '<table><tbody>', '</tbody></table>'],
    'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
    '_default': [0, "", ""]
  };

  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  function jqLiteIsTextNode(html) {
    return !HTML_REGEXP.test(html);
  }

  function jqLiteBuildFragment(html, context) {
    var elem, tmp, tag, wrap,
      fragment = context.createDocumentFragment(),
      nodes = [], i, j, jj;

    if (jqLiteIsTextNode(html)) {
      // Convert non-html into a text node
      nodes.push(context.createTextNode(html));
    } else {
      tmp = fragment.appendChild(context.createElement('div'));
      // Convert html into DOM nodes
      tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
      wrap = wrapMap[tag] || wrapMap._default;
      tmp.innerHTML = '<div>&#160;</div>' +
        wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];
      tmp.removeChild(tmp.firstChild);

      // Descend through wrappers to the right content
      i = wrap[0];
      while (i--) {
        tmp = tmp.lastChild;
      }

      for (j=0, jj=tmp.childNodes.length; j<jj; ++j) nodes.push(tmp.childNodes[j]);

      tmp = fragment.firstChild;
      tmp.textContent = "";
    }

    // Remove wrapper from fragment
    fragment.textContent = "";
    fragment.innerHTML = ""; // Clear inner HTML
    return nodes;
  }

  function jqLiteParseHTML(html, context) {
    context = context || document;
    var parsed;

    if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
      return [context.createElement(parsed[1])];
    }

    return jqLiteBuildFragment(html, context);
  }

/////////////////////////////////////////////
  function JQLite(element) {
    if (element instanceof JQLite) {
      return element;
    }
    if (isString(element)) {
      element = trim(element);
    }
    if (!(this instanceof JQLite)) {
      if (isString(element) && element.charAt(0) != '<') {
        throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
      }
      return new JQLite(element);
    }

    if (isString(element)) {
      jqLiteAddNodes(this, jqLiteParseHTML(element));
      var fragment = jqLite(document.createDocumentFragment());
      fragment.append(this);
    } else {
      jqLiteAddNodes(this, element);
    }
  }

  function jqLiteClone(element) {
    return element.cloneNode(true);
  }

  function jqLiteDealoc(element){
    jqLiteRemoveData(element);
    for ( var i = 0, children = element.childNodes || []; i < children.length; i++) {
      jqLiteDealoc(children[i]);
    }
  }

  function jqLiteOff(element, type, fn, unsupported) {
    if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

    var events = jqLiteExpandoStore(element, 'events'),
      handle = jqLiteExpandoStore(element, 'handle');

    if (!handle) return; //no listeners registered

    if (isUndefined(type)) {
      forEach(events, function(eventHandler, type) {
        removeEventListenerFn(element, type, eventHandler);
        delete events[type];
      });
    } else {
      forEach(type.split(' '), function(type) {
        if (isUndefined(fn)) {
          removeEventListenerFn(element, type, events[type]);
          delete events[type];
        } else {
          arrayRemove(events[type] || [], fn);
        }
      });
    }
  }

  function jqLiteRemoveData(element, name) {
    var expandoId = element[jqName],
      expandoStore = jqCache[expandoId];

    if (expandoStore) {
      if (name) {
        delete jqCache[expandoId].data[name];
        return;
      }

      if (expandoStore.handle) {
        expandoStore.events.$destroy && expandoStore.handle({}, '$destroy');
        jqLiteOff(element);
      }
      delete jqCache[expandoId];
      element[jqName] = undefined; // ie does not allow deletion of attributes on elements.
    }
  }

  function jqLiteExpandoStore(element, key, value) {
    var expandoId = element[jqName],
      expandoStore = jqCache[expandoId || -1];

    if (isDefined(value)) {
      if (!expandoStore) {
        element[jqName] = expandoId = jqNextId();
        expandoStore = jqCache[expandoId] = {};
      }
      expandoStore[key] = value;
    } else {
      return expandoStore && expandoStore[key];
    }
  }

  function jqLiteData(element, key, value) {
    var data = jqLiteExpandoStore(element, 'data'),
      isSetter = isDefined(value),
      keyDefined = !isSetter && isDefined(key),
      isSimpleGetter = keyDefined && !isObject(key);

    if (!data && !isSimpleGetter) {
      jqLiteExpandoStore(element, 'data', data = {});
    }

    if (isSetter) {
      data[key] = value;
    } else {
      if (keyDefined) {
        if (isSimpleGetter) {
          // don't create data in this case.
          return data && data[key];
        } else {
          extend(data, key);
        }
      } else {
        return data;
      }
    }
  }

  function jqLiteHasClass(element, selector) {
    if (!element.getAttribute) return false;
    return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
      indexOf( " " + selector + " " ) > -1);
  }

  function jqLiteRemoveClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      forEach(cssClasses.split(' '), function(cssClass) {
        element.setAttribute('class', trim(
            (" " + (element.getAttribute('class') || '') + " ")
              .replace(/[\n\t]/g, " ")
              .replace(" " + trim(cssClass) + " ", " "))
        );
      });
    }
  }

  function jqLiteAddClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
        .replace(/[\n\t]/g, " ");

      forEach(cssClasses.split(' '), function(cssClass) {
        cssClass = trim(cssClass);
        if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
          existingClasses += cssClass + ' ';
        }
      });

      element.setAttribute('class', trim(existingClasses));
    }
  }

  function jqLiteAddNodes(root, elements) {
    if (elements) {
      elements = (!elements.nodeName && isDefined(elements.length) && !isWindow(elements))
        ? elements
        : [ elements ];
      for(var i=0; i < elements.length; i++) {
        root.push(elements[i]);
      }
    }
  }

  function jqLiteController(element, name) {
    return jqLiteInheritedData(element, '$' + (name || 'ngController' ) + 'Controller');
  }

  function jqLiteInheritedData(element, name, value) {
    element = jqLite(element);

    // if element is the document object work with the html element instead
    // this makes $(document).scope() possible
    if(element[0].nodeType == 9) {
      element = element.find('html');
    }
    var names = isArray(name) ? name : [name];

    while (element.length) {
      var node = element[0];
      for (var i = 0, ii = names.length; i < ii; i++) {
        if ((value = element.data(names[i])) !== undefined) return value;
      }

      // If dealing with a document fragment node with a host element, and no parent, use the host
      // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
      // to lookup parent controllers.
      element = jqLite(node.parentNode || (node.nodeType === 11 && node.host));
    }
  }

  function jqLiteEmpty(element) {
    for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
      jqLiteDealoc(childNodes[i]);
    }
    while (element.firstChild) {
      element.removeChild(element.firstChild);
    }
  }

//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
  var JQLitePrototype = JQLite.prototype = {
    ready: function(fn) {
      var fired = false;

      function trigger() {
        if (fired) return;
        fired = true;
        fn();
      }

      // check if document already is loaded
      if (document.readyState === 'complete'){
        setTimeout(trigger);
      } else {
        this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
        // we can not use jqLite since we are not done loading and jQuery could be loaded later.
        // jshint -W064
        JQLite(window).on('load', trigger); // fallback to window.onload for others
        // jshint +W064
      }
    },
    toString: function() {
      var value = [];
      forEach(this, function(e){ value.push('' + e);});
      return '[' + value.join(', ') + ']';
    },

    eq: function(index) {
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
    },

    length: 0,
    push: push,
    sort: [].sort,
    splice: [].splice
  };

//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
  var BOOLEAN_ATTR = {};
  forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
    BOOLEAN_ATTR[lowercase(value)] = value;
  });
  var BOOLEAN_ELEMENTS = {};
  forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
    BOOLEAN_ELEMENTS[uppercase(value)] = true;
  });

  function getBooleanAttrName(element, name) {
    // check dom last since we will most likely fail on name
    var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

    // booleanAttr is here twice to minimize DOM access
    return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;
  }

  forEach({
    data: jqLiteData,
    inheritedData: jqLiteInheritedData,

    scope: function(element) {
      // Can't use jqLiteData here directly so we stay compatible with jQuery!
      return jqLite(element).data('$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
    },

    isolateScope: function(element) {
      // Can't use jqLiteData here directly so we stay compatible with jQuery!
      return jqLite(element).data('$isolateScope') || jqLite(element).data('$isolateScopeNoTemplate');
    },

    controller: jqLiteController,

    injector: function(element) {
      return jqLiteInheritedData(element, '$injector');
    },

    removeAttr: function(element,name) {
      element.removeAttribute(name);
    },

    hasClass: jqLiteHasClass,

    css: function(element, name, value) {
      name = camelCase(name);

      if (isDefined(value)) {
        element.style[name] = value;
      } else {
        var val;

        if (msie <= 8) {
          // this is some IE specific weirdness that jQuery 1.6.4 does not sure why
          val = element.currentStyle && element.currentStyle[name];
          if (val === '') val = 'auto';
        }

        val = val || element.style[name];

        if (msie <= 8) {
          // jquery weirdness :-/
          val = (val === '') ? undefined : val;
        }

        return  val;
      }
    },

    attr: function(element, name, value){
      var lowercasedName = lowercase(name);
      if (BOOLEAN_ATTR[lowercasedName]) {
        if (isDefined(value)) {
          if (!!value) {
            element[name] = true;
            element.setAttribute(name, lowercasedName);
          } else {
            element[name] = false;
            element.removeAttribute(lowercasedName);
          }
        } else {
          return (element[name] ||
            (element.attributes.getNamedItem(name)|| noop).specified)
            ? lowercasedName
            : undefined;
        }
      } else if (isDefined(value)) {
        element.setAttribute(name, value);
      } else if (element.getAttribute) {
        // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
        // some elements (e.g. Document) don't have get attribute, so return undefined
        var ret = element.getAttribute(name, 2);
        // normalize non-existing attributes to undefined (as jQuery)
        return ret === null ? undefined : ret;
      }
    },

    prop: function(element, name, value) {
      if (isDefined(value)) {
        element[name] = value;
      } else {
        return element[name];
      }
    },

    text: (function() {
      var NODE_TYPE_TEXT_PROPERTY = [];
      if (msie < 9) {
        NODE_TYPE_TEXT_PROPERTY[1] = 'innerText';    /** Element **/
        NODE_TYPE_TEXT_PROPERTY[3] = 'nodeValue';    /** Text **/
      } else {
        NODE_TYPE_TEXT_PROPERTY[1] =                 /** Element **/
          NODE_TYPE_TEXT_PROPERTY[3] = 'textContent';  /** Text **/
      }
      getText.$dv = '';
      return getText;

      function getText(element, value) {
        var textProp = NODE_TYPE_TEXT_PROPERTY[element.nodeType];
        if (isUndefined(value)) {
          return textProp ? element[textProp] : '';
        }
        element[textProp] = value;
      }
    })(),

    val: function(element, value) {
      if (isUndefined(value)) {
        if (nodeName_(element) === 'SELECT' && element.multiple) {
          var result = [];
          forEach(element.options, function (option) {
            if (option.selected) {
              result.push(option.value || option.text);
            }
          });
          return result.length === 0 ? null : result;
        }
        return element.value;
      }
      element.value = value;
    },

    html: function(element, value) {
      if (isUndefined(value)) {
        return element.innerHTML;
      }
      for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
        jqLiteDealoc(childNodes[i]);
      }
      element.innerHTML = value;
    },

    empty: jqLiteEmpty
  }, function(fn, name){
    /**
     * Properties: writes return selection, reads return first value
     */
    JQLite.prototype[name] = function(arg1, arg2) {
      var i, key;

      // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
      // in a way that survives minification.
      // jqLiteEmpty takes no arguments but is a setter.
      if (fn !== jqLiteEmpty &&
        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {
        if (isObject(arg1)) {

          // we are a write, but the object properties are the key/values
          for (i = 0; i < this.length; i++) {
            if (fn === jqLiteData) {
              // data() takes the whole object in jQuery
              fn(this[i], arg1);
            } else {
              for (key in arg1) {
                fn(this[i], key, arg1[key]);
              }
            }
          }
          // return self for chaining
          return this;
        } else {
          // we are a read, so read the first child.
          var value = fn.$dv;
          // Only if we have $dv do we iterate over all, otherwise it is just the first element.
          var jj = (value === undefined) ? Math.min(this.length, 1) : this.length;
          for (var j = 0; j < jj; j++) {
            var nodeValue = fn(this[j], arg1, arg2);
            value = value ? value + nodeValue : nodeValue;
          }
          return value;
        }
      } else {
        // we are a write, so apply to all children
        for (i = 0; i < this.length; i++) {
          fn(this[i], arg1, arg2);
        }
        // return self for chaining
        return this;
      }
    };
  });

  function createEventHandler(element, events) {
    var eventHandler = function (event, type) {
      if (!event.preventDefault) {
        event.preventDefault = function() {
          event.returnValue = false; //ie
        };
      }

      if (!event.stopPropagation) {
        event.stopPropagation = function() {
          event.cancelBubble = true; //ie
        };
      }

      if (!event.target) {
        event.target = event.srcElement || document;
      }

      if (isUndefined(event.defaultPrevented)) {
        var prevent = event.preventDefault;
        event.preventDefault = function() {
          event.defaultPrevented = true;
          prevent.call(event);
        };
        event.defaultPrevented = false;
      }

      event.isDefaultPrevented = function() {
        return event.defaultPrevented || event.returnValue === false;
      };

      // Copy event handlers in case event handlers array is modified during execution.
      var eventHandlersCopy = shallowCopy(events[type || event.type] || []);

      forEach(eventHandlersCopy, function(fn) {
        fn.call(element, event);
      });

      // Remove monkey-patched methods (IE),
      // as they would cause memory leaks in IE8.
      if (msie <= 8) {
        // IE7/8 does not allow to delete property on native object
        event.preventDefault = null;
        event.stopPropagation = null;
        event.isDefaultPrevented = null;
      } else {
        // It shouldn't affect normal browsers (native methods are defined on prototype).
        delete event.preventDefault;
        delete event.stopPropagation;
        delete event.isDefaultPrevented;
      }
    };
    eventHandler.elem = element;
    return eventHandler;
  }

//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
  forEach({
    removeData: jqLiteRemoveData,

    dealoc: jqLiteDealoc,

    on: function onFn(element, type, fn, unsupported){
      if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

      var events = jqLiteExpandoStore(element, 'events'),
        handle = jqLiteExpandoStore(element, 'handle');

      if (!events) jqLiteExpandoStore(element, 'events', events = {});
      if (!handle) jqLiteExpandoStore(element, 'handle', handle = createEventHandler(element, events));

      forEach(type.split(' '), function(type){
        var eventFns = events[type];

        if (!eventFns) {
          if (type == 'mouseenter' || type == 'mouseleave') {
            var contains = document.body.contains || document.body.compareDocumentPosition ?
              function( a, b ) {
                // jshint bitwise: false
                var adown = a.nodeType === 9 ? a.documentElement : a,
                  bup = b && b.parentNode;
                return a === bup || !!( bup && bup.nodeType === 1 && (
                  adown.contains ?
                    adown.contains( bup ) :
                    a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
                  ));
              } :
              function( a, b ) {
                if ( b ) {
                  while ( (b = b.parentNode) ) {
                    if ( b === a ) {
                      return true;
                    }
                  }
                }
                return false;
              };

            events[type] = [];

            // Refer to jQuery's implementation of mouseenter & mouseleave
            // Read about mouseenter and mouseleave:
            // http://www.quirksmode.org/js/events_mouse.html#link8
            var eventmap = { mouseleave : "mouseout", mouseenter : "mouseover"};

            onFn(element, eventmap[type], function(event) {
              var target = this, related = event.relatedTarget;
              // For mousenter/leave call the handler if related is outside the target.
              // NB: No relatedTarget if the mouse left/entered the browser window
              if ( !related || (related !== target && !contains(target, related)) ){
                handle(event, type);
              }
            });

          } else {
            addEventListenerFn(element, type, handle);
            events[type] = [];
          }
          eventFns = events[type];
        }
        eventFns.push(fn);
      });
    },

    off: jqLiteOff,

    one: function(element, type, fn) {
      element = jqLite(element);

      //add the listener twice so that when it is called
      //you can remove the original function and still be
      //able to call element.off(ev, fn) normally
      element.on(type, function onFn() {
        element.off(type, fn);
        element.off(type, onFn);
      });
      element.on(type, fn);
    },

    replaceWith: function(element, replaceNode) {
      var index, parent = element.parentNode;
      jqLiteDealoc(element);
      forEach(new JQLite(replaceNode), function(node){
        if (index) {
          parent.insertBefore(node, index.nextSibling);
        } else {
          parent.replaceChild(node, element);
        }
        index = node;
      });
    },

    children: function(element) {
      var children = [];
      forEach(element.childNodes, function(element){
        if (element.nodeType === 1)
          children.push(element);
      });
      return children;
    },

    contents: function(element) {
      return element.contentDocument || element.childNodes || [];
    },

    append: function(element, node) {
      forEach(new JQLite(node), function(child){
        if (element.nodeType === 1 || element.nodeType === 11) {
          element.appendChild(child);
        }
      });
    },

    prepend: function(element, node) {
      if (element.nodeType === 1) {
        var index = element.firstChild;
        forEach(new JQLite(node), function(child){
          element.insertBefore(child, index);
        });
      }
    },

    wrap: function(element, wrapNode) {
      wrapNode = jqLite(wrapNode)[0];
      var parent = element.parentNode;
      if (parent) {
        parent.replaceChild(wrapNode, element);
      }
      wrapNode.appendChild(element);
    },

    remove: function(element) {
      jqLiteDealoc(element);
      var parent = element.parentNode;
      if (parent) parent.removeChild(element);
    },

    after: function(element, newElement) {
      var index = element, parent = element.parentNode;
      forEach(new JQLite(newElement), function(node){
        parent.insertBefore(node, index.nextSibling);
        index = node;
      });
    },

    addClass: jqLiteAddClass,
    removeClass: jqLiteRemoveClass,

    toggleClass: function(element, selector, condition) {
      if (selector) {
        forEach(selector.split(' '), function(className){
          var classCondition = condition;
          if (isUndefined(classCondition)) {
            classCondition = !jqLiteHasClass(element, className);
          }
          (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
        });
      }
    },

    parent: function(element) {
      var parent = element.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },

    next: function(element) {
      if (element.nextElementSibling) {
        return element.nextElementSibling;
      }

      // IE8 doesn't have nextElementSibling
      var elm = element.nextSibling;
      while (elm != null && elm.nodeType !== 1) {
        elm = elm.nextSibling;
      }
      return elm;
    },

    find: function(element, selector) {
      if (element.getElementsByTagName) {
        return element.getElementsByTagName(selector);
      } else {
        return [];
      }
    },

    clone: jqLiteClone,

    triggerHandler: function(element, eventName, eventData) {
      var eventFns = (jqLiteExpandoStore(element, 'events') || {})[eventName];

      eventData = eventData || [];

      var event = [{
        preventDefault: noop,
        stopPropagation: noop
      }];

      forEach(eventFns, function(fn) {
        fn.apply(element, event.concat(eventData));
      });
    }
  }, function(fn, name){
    /**
     * chaining functions
     */
    JQLite.prototype[name] = function(arg1, arg2, arg3) {
      var value;
      for(var i=0; i < this.length; i++) {
        if (isUndefined(value)) {
          value = fn(this[i], arg1, arg2, arg3);
          if (isDefined(value)) {
            // any function which returns a value needs to be wrapped
            value = jqLite(value);
          }
        } else {
          jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
        }
      }
      return isDefined(value) ? value : this;
    };

    // bind legacy bind/unbind to on/off
    JQLite.prototype.bind = JQLite.prototype.on;
    JQLite.prototype.unbind = JQLite.prototype.off;
  });

  /**
   * Computes a hash of an 'obj'.
   * Hash of a:
   *  string is string
   *  number is number as string
   *  object is either result of calling $$hashKey function on the object or uniquely generated id,
   *         that is also assigned to the $$hashKey property of the object.
   *
   * @param obj
   * @returns {string} hash string such that the same input will have the same hash string.
   *         The resulting string key is in 'type:hashKey' format.
   */
  function hashKey(obj) {
    var objType = typeof obj,
      key;

    if (objType == 'object' && obj !== null) {
      if (typeof (key = obj.$$hashKey) == 'function') {
        // must invoke on object to keep the right this
        key = obj.$$hashKey();
      } else if (key === undefined) {
        key = obj.$$hashKey = nextUid();
      }
    } else {
      key = obj;
    }

    return objType + ':' + key;
  }

  /**
   * HashMap which can use objects as keys
   */
  function HashMap(array){
    forEach(array, this.put, this);
  }
  HashMap.prototype = {
    /**
     * Store key value pair
     * @param key key to store can be any type
     * @param value value to store can be any type
     */
    put: function(key, value) {
      this[hashKey(key)] = value;
    },

    /**
     * @param key
     * @returns {Object} the value for the key
     */
    get: function(key) {
      return this[hashKey(key)];
    },

    /**
     * Remove the key/value pair
     * @param key
     */
    remove: function(key) {
      var value = this[key = hashKey(key)];
      delete this[key];
      return value;
    }
  };

  /**
   * @ngdoc function
   * @module ng
   * @name angular.injector
   * @kind function
   *
   * @description
   * Creates an injector function that can be used for retrieving services as well as for
   * dependency injection (see {@link guide/di dependency injection}).
   *

   * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
   *        {@link angular.module}. The `ng` module must be explicitly added.
   * @returns {function()} Injector function. See {@link auto.$injector $injector}.
   *
   * @example
   * Typical usage
   * ```js
   *   // create an injector
   *   var $injector = angular.injector(['ng']);
   *
   *   // use the injector to kick off your application
   *   // use the type inference to auto inject arguments, or use implicit injection
   *   $injector.invoke(function($rootScope, $compile, $document){
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
   * ```
   *
   * Sometimes you want to get access to the injector of a currently running Angular app
   * from outside Angular. Perhaps, you want to inject and compile some markup after the
   * application has been bootstrapped. You can do this using the extra `injector()` added
   * to JQuery/jqLite elements. See {@link angular.element}.
   *
   * *This is fairly rare but could be the case if a third party library is injecting the
   * markup.*
   *
   * In the following example a new block of HTML containing a `ng-controller`
   * directive is added to the end of the document body by JQuery. We then compile and link
   * it into the current AngularJS scope.
   *
   * ```js
   * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
   * $(document.body).append($div);
   *
   * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
   * ```
   */


  /**
   * @ngdoc module
   * @name auto
   * @description
   *
   * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
   */

  var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
  var FN_ARG_SPLIT = /,/;
  var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
  var $injectorMinErr = minErr('$injector');
  function annotate(fn) {
    var $inject,
      fnText,
      argDecl,
      last;

    if (typeof fn == 'function') {
      if (!($inject = fn.$inject)) {
        $inject = [];
        if (fn.length) {
          fnText = fn.toString().replace(STRIP_COMMENTS, '');
          argDecl = fnText.match(FN_ARGS);
          forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg){
            arg.replace(FN_ARG, function(all, underscore, name){
              $inject.push(name);
            });
          });
        }
        fn.$inject = $inject;
      }
    } else if (isArray(fn)) {
      last = fn.length - 1;
      assertArgFn(fn[last], 'fn');
      $inject = fn.slice(0, last);
    } else {
      assertArgFn(fn, 'fn', true);
    }
    return $inject;
  }

///////////////////////////////////////

  /**
   * @ngdoc service
   * @name $injector
   * @kind function
   *
   * @description
   *
   * `$injector` is used to retrieve object instances as defined by
   * {@link auto.$provide provider}, instantiate types, invoke methods,
   * and load modules.
   *
   * The following always holds true:
   *
   * ```js
   *   var $injector = angular.injector();
   *   expect($injector.get('$injector')).toBe($injector);
   *   expect($injector.invoke(function($injector){
 *     return $injector;
 *   }).toBe($injector);
   * ```
   *
   * # Injection Function Annotation
   *
   * JavaScript does not have annotations, and annotations are needed for dependency injection. The
   * following are all valid ways of annotating function with injection arguments and are equivalent.
   *
   * ```js
   *   // inferred (only works if code not minified/obfuscated)
   *   $injector.invoke(function(serviceA){});
   *
   *   // annotated
   *   function explicit(serviceA) {};
   *   explicit.$inject = ['serviceA'];
   *   $injector.invoke(explicit);
   *
   *   // inline
   *   $injector.invoke(['serviceA', function(serviceA){}]);
   * ```
   *
   * ## Inference
   *
   * In JavaScript calling `toString()` on a function returns the function definition. The definition
   * can then be parsed and the function arguments can be extracted. *NOTE:* This does not work with
   * minification, and obfuscation tools since these tools change the argument names.
   *
   * ## `$inject` Annotation
   * By adding an `$inject` property onto a function the injection parameters can be specified.
   *
   * ## Inline
   * As an array of injection names, where the last item in the array is the function to call.
   */

  /**
   * @ngdoc method
   * @name $injector#get
   *
   * @description
   * Return an instance of the service.
   *
   * @param {string} name The name of the instance to retrieve.
   * @return {*} The instance.
   */

  /**
   * @ngdoc method
   * @name $injector#invoke
   *
   * @description
   * Invoke the method and supply the method arguments from the `$injector`.
   *
   * @param {!Function} fn The function to invoke. Function parameters are injected according to the
   *   {@link guide/di $inject Annotation} rules.
   * @param {Object=} self The `this` for the invoked method.
   * @param {Object=} locals Optional object. If preset then any argument names are read from this
   *                         object first, before the `$injector` is consulted.
   * @returns {*} the value returned by the invoked `fn` function.
   */

  /**
   * @ngdoc method
   * @name $injector#has
   *
   * @description
   * Allows the user to query if the particular service exists.
   *
   * @param {string} Name of the service to query.
   * @returns {boolean} returns true if injector has given service.
   */

  /**
   * @ngdoc method
   * @name $injector#instantiate
   * @description
   * Create a new instance of JS type. The method takes a constructor function, invokes the new
   * operator, and supplies all of the arguments to the constructor function as specified by the
   * constructor annotation.
   *
   * @param {Function} Type Annotated constructor function.
   * @param {Object=} locals Optional object. If preset then any argument names are read from this
   * object first, before the `$injector` is consulted.
   * @returns {Object} new instance of `Type`.
   */

  /**
   * @ngdoc method
   * @name $injector#annotate
   *
   * @description
   * Returns an array of service names which the function is requesting for injection. This API is
   * used by the injector to determine which services need to be injected into the function when the
   * function is invoked. There are three ways in which the function can be annotated with the needed
   * dependencies.
   *
   * # Argument names
   *
   * The simplest form is to extract the dependencies from the arguments of the function. This is done
   * by converting the function into a string using `toString()` method and extracting the argument
   * names.
   * ```js
   *   // Given
   *   function MyController($scope, $route) {
 *     // ...
 *   }
   *
   *   // Then
   *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
   * ```
   *
   * This method does not work with code minification / obfuscation. For this reason the following
   * annotation strategies are supported.
   *
   * # The `$inject` property
   *
   * If a function has an `$inject` property and its value is an array of strings, then the strings
   * represent names of services to be injected into the function.
   * ```js
   *   // Given
   *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
   *   // Define function dependencies
   *   MyController['$inject'] = ['$scope', '$route'];
   *
   *   // Then
   *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
   * ```
   *
   * # The array notation
   *
   * It is often desirable to inline Injected functions and that's when setting the `$inject` property
   * is very inconvenient. In these situations using the array notation to specify the dependencies in
   * a way that survives minification is a better choice:
   *
   * ```js
   *   // We wish to write this (not minification / obfuscation safe)
   *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
   *
   *   // We are forced to write break inlining
   *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
   *   tmpFn.$inject = ['$compile', '$rootScope'];
   *   injector.invoke(tmpFn);
   *
   *   // To better support inline function the inline annotation is supported
   *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
   *
   *   // Therefore
   *   expect(injector.annotate(
   *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
   *    ).toEqual(['$compile', '$rootScope']);
   * ```
   *
   * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
   * be retrieved as described above.
   *
   * @returns {Array.<string>} The names of the services which the function requires.
   */




  /**
   * @ngdoc object
   * @name $provide
   *
   * @description
   *
   * The {@link auto.$provide $provide} service has a number of methods for registering components
   * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
   * {@link angular.Module}.
   *
   * An Angular **service** is a singleton object created by a **service factory**.  These **service
   * factories** are functions which, in turn, are created by a **service provider**.
   * The **service providers** are constructor functions. When instantiated they must contain a
   * property called `$get`, which holds the **service factory** function.
   *
   * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
   * correct **service provider**, instantiating it and then calling its `$get` **service factory**
   * function to get the instance of the **service**.
   *
   * Often services have no configuration options and there is no need to add methods to the service
   * provider.  The provider will be no more than a constructor function with a `$get` property. For
   * these cases the {@link auto.$provide $provide} service has additional helper methods to register
   * services without specifying a provider.
   *
   * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
   *     {@link auto.$injector $injector}
   * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
   *     providers and services.
   * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
   *     services, not providers.
   * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
   *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
   *     given factory function.
   * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
   *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
   *      a new object using the given constructor function.
   *
   * See the individual methods for more information and examples.
   */

  /**
   * @ngdoc method
   * @name $provide#provider
   * @description
   *
   * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
   * are constructor functions, whose instances are responsible for "providing" a factory for a
   * service.
   *
   * Service provider names start with the name of the service they provide followed by `Provider`.
   * For example, the {@link ng.$log $log} service has a provider called
   * {@link ng.$logProvider $logProvider}.
   *
   * Service provider objects can have additional methods which allow configuration of the provider
   * and its service. Importantly, you can configure what kind of service is created by the `$get`
   * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
   * method {@link ng.$logProvider#debugEnabled debugEnabled}
   * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
   * console or not.
   *
   * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
   'Provider'` key.
   * @param {(Object|function())} provider If the provider is:
   *
   *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
   *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
   *   - `Constructor`: a new instance of the provider will be created using
   *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
   *
   * @returns {Object} registered provider instance

   * @example
   *
   * The following example shows how to create a simple event tracking service and register it using
   * {@link auto.$provide#provider $provide.provider()}.
   *
   * ```js
   *  // Define the eventTracker provider
   *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
   *
   *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
   * ```
   */

  /**
   * @ngdoc method
   * @name $provide#factory
   * @description
   *
   * Register a **service factory**, which will be called to return the service instance.
   * This is short for registering a service where its provider consists of only a `$get` property,
   * which is the given service factory function.
   * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
   * configure your service in a provider.
   *
   * @param {string} name The name of the instance.
   * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand
   *                            for `$provide.provider(name, {$get: $getFn})`.
   * @returns {Object} registered provider instance
   *
   * @example
   * Here is an example of registering a service
   * ```js
   *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
   * ```
   * You would then inject and use this service like this:
   * ```js
   *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
   * ```
   */


  /**
   * @ngdoc method
   * @name $provide#service
   * @description
   *
   * Register a **service constructor**, which will be invoked with `new` to create the service
   * instance.
   * This is short for registering a service where its provider's `$get` property is the service
   * constructor function that will be used to instantiate the service instance.
   *
   * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
   * as a type/class.
   *
   * @param {string} name The name of the instance.
   * @param {Function} constructor A class (constructor function) that will be instantiated.
   * @returns {Object} registered provider instance
   *
   * @example
   * Here is an example of registering a service using
   * {@link auto.$provide#service $provide.service(class)}.
   * ```js
   *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
   *
   *   Ping.$inject = ['$http'];
   *
   *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
   *   $provide.service('ping', Ping);
   * ```
   * You would then inject and use this service like this:
   * ```js
   *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
   * ```
   */


  /**
   * @ngdoc method
   * @name $provide#value
   * @description
   *
   * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
   * number, an array, an object or a function.  This is short for registering a service where its
   * provider's `$get` property is a factory function that takes no arguments and returns the **value
   * service**.
   *
   * Value services are similar to constant services, except that they cannot be injected into a
   * module configuration function (see {@link angular.Module#config}) but they can be overridden by
   * an Angular
   * {@link auto.$provide#decorator decorator}.
   *
   * @param {string} name The name of the instance.
   * @param {*} value The value.
   * @returns {Object} registered provider instance
   *
   * @example
   * Here are some examples of creating value services.
   * ```js
   *   $provide.value('ADMIN_USER', 'admin');
   *
   *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
   *
   *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
   * ```
   */


  /**
   * @ngdoc method
   * @name $provide#constant
   * @description
   *
   * Register a **constant service**, such as a string, a number, an array, an object or a function,
   * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
   * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
   * be overridden by an Angular {@link auto.$provide#decorator decorator}.
   *
   * @param {string} name The name of the constant.
   * @param {*} value The constant value.
   * @returns {Object} registered instance
   *
   * @example
   * Here a some examples of creating constants:
   * ```js
   *   $provide.constant('SHARD_HEIGHT', 306);
   *
   *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
   *
   *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
   * ```
   */


  /**
   * @ngdoc method
   * @name $provide#decorator
   * @description
   *
   * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
   * intercepts the creation of a service, allowing it to override or modify the behaviour of the
   * service. The object returned by the decorator may be the original service, or a new service
   * object which replaces or wraps and delegates to the original service.
   *
   * @param {string} name The name of the service to decorate.
   * @param {function()} decorator This function will be invoked when the service needs to be
   *    instantiated and should return the decorated service instance. The function is called using
   *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
   *    Local injection arguments:
   *
   *    * `$delegate` - The original service instance, which can be monkey patched, configured,
   *      decorated or delegated to.
   *
   * @example
   * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
   * calls to {@link ng.$log#error $log.warn()}.
   * ```js
   *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
   * ```
   */


  function createInjector(modulesToLoad) {
    var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new HashMap(),
      providerCache = {
        $provide: {
          provider: supportObject(provider),
          factory: supportObject(factory),
          service: supportObject(service),
          value: supportObject(value),
          constant: supportObject(constant),
          decorator: decorator
        }
      },
      providerInjector = (providerCache.$injector =
        createInternalInjector(providerCache, function() {
          throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
        })),
      instanceCache = {},
      instanceInjector = (instanceCache.$injector =
        createInternalInjector(instanceCache, function(servicename) {
          var provider = providerInjector.get(servicename + providerSuffix);
          return instanceInjector.invoke(provider.$get, provider);
        }));


    forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });

    return instanceInjector;

    ////////////////////////////////////
    // $provider
    ////////////////////////////////////

    function supportObject(delegate) {
      return function(key, value) {
        if (isObject(key)) {
          forEach(key, reverseParams(delegate));
        } else {
          return delegate(key, value);
        }
      };
    }

    function provider(name, provider_) {
      assertNotHasOwnProperty(name, 'service');
      if (isFunction(provider_) || isArray(provider_)) {
        provider_ = providerInjector.instantiate(provider_);
      }
      if (!provider_.$get) {
        throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
      }
      return providerCache[name + providerSuffix] = provider_;
    }

    function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }

    function service(name, constructor) {
      return factory(name, ['$injector', function($injector) {
        return $injector.instantiate(constructor);
      }]);
    }

    function value(name, val) { return factory(name, valueFn(val)); }

    function constant(name, value) {
      assertNotHasOwnProperty(name, 'constant');
      providerCache[name] = value;
      instanceCache[name] = value;
    }

    function decorator(serviceName, decorFn) {
      var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get;

      origProvider.$get = function() {
        var origInstance = instanceInjector.invoke(orig$get, origProvider);
        return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
      };
    }

    ////////////////////////////////////
    // Module Loading
    ////////////////////////////////////
    function loadModules(modulesToLoad){
      var runBlocks = [], moduleFn, invokeQueue, i, ii;
      forEach(modulesToLoad, function(module) {
        if (loadedModules.get(module)) return;
        loadedModules.put(module, true);

        try {
          if (isString(module)) {
            moduleFn = angularModule(module);
            runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);

            for(invokeQueue = moduleFn._invokeQueue, i = 0, ii = invokeQueue.length; i < ii; i++) {
              var invokeArgs = invokeQueue[i],
                provider = providerInjector.get(invokeArgs[0]);

              provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
            }
          } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else {
            assertArgFn(module, 'module');
          }
        } catch (e) {
          if (isArray(module)) {
            module = module[module.length - 1];
          }
          if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
            // Safari & FF's stack traces don't contain error.message content
            // unlike those of Chrome and IE
            // So if stack doesn't contain message, we create a new string that contains both.
            // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
            /* jshint -W022 */
            e = e.message + '\n' + e.stack;
          }
          throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
            module, e.stack || e.message || e);
        }
      });
      return runBlocks;
    }

    ////////////////////////////////////
    // internal Injector
    ////////////////////////////////////

    function createInternalInjector(cache, factory) {

      function getService(serviceName) {
        if (cache.hasOwnProperty(serviceName)) {
          if (cache[serviceName] === INSTANTIATING) {
            throw $injectorMinErr('cdep', 'Circular dependency found: {0}', path.join(' <- '));
          }
          return cache[serviceName];
        } else {
          try {
            path.unshift(serviceName);
            cache[serviceName] = INSTANTIATING;
            return cache[serviceName] = factory(serviceName);
          } catch (err) {
            if (cache[serviceName] === INSTANTIATING) {
              delete cache[serviceName];
            }
            throw err;
          } finally {
            path.shift();
          }
        }
      }

      function invoke(fn, self, locals){
        var args = [],
          $inject = annotate(fn),
          length, i,
          key;

        for(i = 0, length = $inject.length; i < length; i++) {
          key = $inject[i];
          if (typeof key !== 'string') {
            throw $injectorMinErr('itkn',
              'Incorrect injection token! Expected service name as string, got {0}', key);
          }
          args.push(
              locals && locals.hasOwnProperty(key)
              ? locals[key]
              : getService(key)
          );
        }
        if (!fn.$inject) {
          // this means that we must be an array.
          fn = fn[length];
        }

        // http://jsperf.com/angularjs-invoke-apply-vs-switch
        // #5388
        return fn.apply(self, args);
      }

      function instantiate(Type, locals) {
        var Constructor = function() {},
          instance, returnedValue;

        // Check if Type is annotated and use just the given function at n-1 as parameter
        // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
        Constructor.prototype = (isArray(Type) ? Type[Type.length - 1] : Type).prototype;
        instance = new Constructor();
        returnedValue = invoke(Type, instance, locals);

        return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
      }

      return {
        invoke: invoke,
        instantiate: instantiate,
        get: getService,
        annotate: annotate,
        has: function(name) {
          return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
        }
      };
    }
  }

  /**
   * @ngdoc service
   * @name $anchorScroll
   * @kind function
   * @requires $window
   * @requires $location
   * @requires $rootScope
   *
   * @description
   * When called, it checks current value of `$location.hash()` and scrolls to the related element,
   * according to rules specified in
   * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
   *
   * It also watches the `$location.hash()` and scrolls whenever it changes to match any anchor.
   * This can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.
   *
   * @example
   <example>
   <file name="index.html">
   <div id="scrollArea" ng-controller="ScrollCtrl">
   <a ng-click="gotoBottom()">Go to bottom</a>
   <a id="bottom"></a> You're at the bottom!
   </div>
   </file>
   <file name="script.js">
   function ScrollCtrl($scope, $location, $anchorScroll) {
         $scope.gotoBottom = function (){
           // set the location.hash to the id of
           // the element you wish to scroll to.
           $location.hash('bottom');

           // call $anchorScroll()
           $anchorScroll();
         };
       }
   </file>
   <file name="style.css">
   #scrollArea {
         height: 350px;
         overflow: auto;
       }

   #bottom {
         display: block;
         margin-top: 2000px;
       }
   </file>
   </example>
   */
  function $AnchorScrollProvider() {

    var autoScrollingEnabled = true;

    this.disableAutoScrolling = function() {
      autoScrollingEnabled = false;
    };

    this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
      var document = $window.document;

      // helper function to get first anchor from a NodeList
      // can't use filter.filter, as it accepts only instances of Array
      // and IE can't convert NodeList to an array using [].slice
      // TODO(vojta): use filter if we change it to accept lists as well
      function getFirstAnchor(list) {
        var result = null;
        forEach(list, function(element) {
          if (!result && lowercase(element.nodeName) === 'a') result = element;
        });
        return result;
      }

      function scroll() {
        var hash = $location.hash(), elm;

        // empty hash, scroll to the top of the page
        if (!hash) $window.scrollTo(0, 0);

        // element with given id
        else if ((elm = document.getElementById(hash))) elm.scrollIntoView();

        // first anchor with given name :-D
        else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) elm.scrollIntoView();

        // no element and hash == 'top', scroll to the top of the page
        else if (hash === 'top') $window.scrollTo(0, 0);
      }

      // does not scroll when user clicks on anchor link that is currently on
      // (no url change, no $location.hash() change), browser native does scroll
      if (autoScrollingEnabled) {
        $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
          function autoScrollWatchAction() {
            $rootScope.$evalAsync(scroll);
          });
      }

      return scroll;
    }];
  }

  var $animateMinErr = minErr('$animate');

  /**
   * @ngdoc provider
   * @name $animateProvider
   *
   * @description
   * Default implementation of $animate that doesn't perform any animations, instead just
   * synchronously performs DOM
   * updates and calls done() callbacks.
   *
   * In order to enable animations the ngAnimate module has to be loaded.
   *
   * To see the functional implementation check out src/ngAnimate/animate.js
   */
  var $AnimateProvider = ['$provide', function($provide) {


    this.$$selectors = {};


    /**
     * @ngdoc method
     * @name $animateProvider#register
     *
     * @description
     * Registers a new injectable animation factory function. The factory function produces the
     * animation object which contains callback functions for each event that is expected to be
     * animated.
     *
     *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`
     *   must be called once the element animation is complete. If a function is returned then the
     *   animation service will use this function to cancel the animation whenever a cancel event is
     *   triggered.
     *
     *
     * ```js
     *   return {
     *     eventFn : function(element, done) {
     *       //code to run the animation
     *       //once complete, then run done()
     *       return function cancellationFunction() {
     *         //code to cancel the animation
     *       }
     *     }
     *   }
     * ```
     *
     * @param {string} name The name of the animation.
     * @param {Function} factory The factory function that will be executed to return the animation
     *                           object.
     */
    this.register = function(name, factory) {
      var key = name + '-animation';
      if (name && name.charAt(0) != '.') throw $animateMinErr('notcsel',
        "Expecting class selector starting with '.' got '{0}'.", name);
      this.$$selectors[name.substr(1)] = key;
      $provide.factory(key, factory);
    };

    /**
     * @ngdoc method
     * @name $animateProvider#classNameFilter
     *
     * @description
     * Sets and/or returns the CSS class regular expression that is checked when performing
     * an animation. Upon bootstrap the classNameFilter value is not set at all and will
     * therefore enable $animate to attempt to perform an animation on any element.
     * When setting the classNameFilter value, animations will only be performed on elements
     * that successfully match the filter expression. This in turn can boost performance
     * for low-powered devices as well as applications containing a lot of structural operations.
     * @param {RegExp=} expression The className expression which will be checked against all animations
     * @return {RegExp} The current CSS className expression value. If null then there is no expression value
     */
    this.classNameFilter = function(expression) {
      if(arguments.length === 1) {
        this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
      }
      return this.$$classNameFilter;
    };

    this.$get = ['$timeout', '$$asyncCallback', function($timeout, $$asyncCallback) {

      function async(fn) {
        fn && $$asyncCallback(fn);
      }

      /**
       *
       * @ngdoc service
       * @name $animate
       * @description The $animate service provides rudimentary DOM manipulation functions to
       * insert, remove and move elements within the DOM, as well as adding and removing classes.
       * This service is the core service used by the ngAnimate $animator service which provides
       * high-level animation hooks for CSS and JavaScript.
       *
       * $animate is available in the AngularJS core, however, the ngAnimate module must be included
       * to enable full out animation support. Otherwise, $animate will only perform simple DOM
       * manipulation operations.
       *
       * To learn more about enabling animation support, click here to visit the {@link ngAnimate
     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service
     * page}.
       */
      return {

        /**
         *
         * @ngdoc method
         * @name $animate#enter
         * @kind function
         * @description Inserts the element into the DOM either after the `after` element or within
         *   the `parent` element. Once complete, the done() callback will be fired (if provided).
         * @param {DOMElement} element the element which will be inserted into the DOM
         * @param {DOMElement} parent the parent element which will append the element as
         *   a child (if the after element is not present)
         * @param {DOMElement} after the sibling element which will append the element
         *   after itself
         * @param {Function=} done callback function that will be called after the element has been
         *   inserted into the DOM
         */
        enter : function(element, parent, after, done) {
          if (after) {
            after.after(element);
          } else {
            if (!parent || !parent[0]) {
              parent = after.parent();
            }
            parent.append(element);
          }
          async(done);
        },

        /**
         *
         * @ngdoc method
         * @name $animate#leave
         * @kind function
         * @description Removes the element from the DOM. Once complete, the done() callback will be
         *   fired (if provided).
         * @param {DOMElement} element the element which will be removed from the DOM
         * @param {Function=} done callback function that will be called after the element has been
         *   removed from the DOM
         */
        leave : function(element, done) {
          element.remove();
          async(done);
        },

        /**
         *
         * @ngdoc method
         * @name $animate#move
         * @kind function
         * @description Moves the position of the provided element within the DOM to be placed
         * either after the `after` element or inside of the `parent` element. Once complete, the
         * done() callback will be fired (if provided).
         *
         * @param {DOMElement} element the element which will be moved around within the
         *   DOM
         * @param {DOMElement} parent the parent element where the element will be
         *   inserted into (if the after element is not present)
         * @param {DOMElement} after the sibling element where the element will be
         *   positioned next to
         * @param {Function=} done the callback function (if provided) that will be fired after the
         *   element has been moved to its new position
         */
        move : function(element, parent, after, done) {
          // Do not remove element before insert. Removing will cause data associated with the
          // element to be dropped. Insert will implicitly do the remove.
          this.enter(element, parent, after, done);
        },

        /**
         *
         * @ngdoc method
         * @name $animate#addClass
         * @kind function
         * @description Adds the provided className CSS class value to the provided element. Once
         * complete, the done() callback will be fired (if provided).
         * @param {DOMElement} element the element which will have the className value
         *   added to it
         * @param {string} className the CSS class which will be added to the element
         * @param {Function=} done the callback function (if provided) that will be fired after the
         *   className value has been added to the element
         */
        addClass : function(element, className, done) {
          className = isString(className) ?
            className :
            isArray(className) ? className.join(' ') : '';
          forEach(element, function (element) {
            jqLiteAddClass(element, className);
          });
          async(done);
        },

        /**
         *
         * @ngdoc method
         * @name $animate#removeClass
         * @kind function
         * @description Removes the provided className CSS class value from the provided element.
         * Once complete, the done() callback will be fired (if provided).
         * @param {DOMElement} element the element which will have the className value
         *   removed from it
         * @param {string} className the CSS class which will be removed from the element
         * @param {Function=} done the callback function (if provided) that will be fired after the
         *   className value has been removed from the element
         */
        removeClass : function(element, className, done) {
          className = isString(className) ?
            className :
            isArray(className) ? className.join(' ') : '';
          forEach(element, function (element) {
            jqLiteRemoveClass(element, className);
          });
          async(done);
        },

        /**
         *
         * @ngdoc method
         * @name $animate#setClass
         * @kind function
         * @description Adds and/or removes the given CSS classes to and from the element.
         * Once complete, the done() callback will be fired (if provided).
         * @param {DOMElement} element the element which will have its CSS classes changed
         *   removed from it
         * @param {string} add the CSS classes which will be added to the element
         * @param {string} remove the CSS class which will be removed from the element
         * @param {Function=} done the callback function (if provided) that will be fired after the
         *   CSS classes have been set on the element
         */
        setClass : function(element, add, remove, done) {
          forEach(element, function (element) {
            jqLiteAddClass(element, add);
            jqLiteRemoveClass(element, remove);
          });
          async(done);
        },

        enabled : noop
      };
    }];
  }];

  function $$AsyncCallbackProvider(){
    this.$get = ['$$rAF', '$timeout', function($$rAF, $timeout) {
      return $$rAF.supported
        ? function(fn) { return $$rAF(fn); }
        : function(fn) {
        return $timeout(fn, 0, false);
      };
    }];
  }

  /**
   * ! This is a private undocumented service !
   *
   * @name $browser
   * @requires $log
   * @description
   * This object has two goals:
   *
   * - hide all the global state in the browser caused by the window object
   * - abstract away all the browser specific features and inconsistencies
   *
   * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
   * service, which can be used for convenient testing of the application without the interaction with
   * the real browser apis.
   */
  /**
   * @param {object} window The global window object.
   * @param {object} document jQuery wrapped document.
   * @param {function()} XHR XMLHttpRequest constructor.
   * @param {object} $log console.log or an object with the same interface.
   * @param {object} $sniffer $sniffer service
   */
  function Browser(window, document, $log, $sniffer) {
    var self = this,
      rawDocument = document[0],
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {};

    self.isMock = false;

    var outstandingRequestCount = 0;
    var outstandingRequestCallbacks = [];

    // TODO(vojta): remove this temporary api
    self.$$completeOutstandingRequest = completeOutstandingRequest;
    self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

    /**
     * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
     * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
     */
    function completeOutstandingRequest(fn) {
      try {
        fn.apply(null, sliceArgs(arguments, 1));
      } finally {
        outstandingRequestCount--;
        if (outstandingRequestCount === 0) {
          while(outstandingRequestCallbacks.length) {
            try {
              outstandingRequestCallbacks.pop()();
            } catch (e) {
              $log.error(e);
            }
          }
        }
      }
    }

    /**
     * @private
     * Note: this method is used only by scenario runner
     * TODO(vojta): prefix this method with $$ ?
     * @param {function()} callback Function that will be called when no outstanding request
     */
    self.notifyWhenNoOutstandingRequests = function(callback) {
      // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
      // at some deterministic time in respect to the test runner's actions. Leaving things up to the
      // regular poller would result in flaky tests.
      forEach(pollFns, function(pollFn){ pollFn(); });

      if (outstandingRequestCount === 0) {
        callback();
      } else {
        outstandingRequestCallbacks.push(callback);
      }
    };

    //////////////////////////////////////////////////////////////
    // Poll Watcher API
    //////////////////////////////////////////////////////////////
    var pollFns = [],
      pollTimeout;

    /**
     * @name $browser#addPollFn
     *
     * @param {function()} fn Poll function to add
     *
     * @description
     * Adds a function to the list of functions that poller periodically executes,
     * and starts polling if not started yet.
     *
     * @returns {function()} the added function
     */
    self.addPollFn = function(fn) {
      if (isUndefined(pollTimeout)) startPoller(100, setTimeout);
      pollFns.push(fn);
      return fn;
    };

    /**
     * @param {number} interval How often should browser call poll functions (ms)
     * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
     *
     * @description
     * Configures the poller to run in the specified intervals, using the specified
     * setTimeout fn and kicks it off.
     */
    function startPoller(interval, setTimeout) {
      (function check() {
        forEach(pollFns, function(pollFn){ pollFn(); });
        pollTimeout = setTimeout(check, interval);
      })();
    }

    //////////////////////////////////////////////////////////////
    // URL API
    //////////////////////////////////////////////////////////////

    var lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      newLocation = null;

    /**
     * @name $browser#url
     *
     * @description
     * GETTER:
     * Without any argument, this method just returns current value of location.href.
     *
     * SETTER:
     * With at least one argument, this method sets url to new value.
     * If html5 history api supported, pushState/replaceState is used, otherwise
     * location.href/location.replace is used.
     * Returns its own instance to allow chaining
     *
     * NOTE: this api is intended for use only by the $location service. Please use the
     * {@link ng.$location $location service} to change url.
     *
     * @param {string} url New url (when used as setter)
     * @param {boolean=} replace Should new url replace current history record ?
     */
    self.url = function(url, replace) {
      // Android Browser BFCache causes location, history reference to become stale.
      if (location !== window.location) location = window.location;
      if (history !== window.history) history = window.history;

      // setter
      if (url) {
        if (lastBrowserUrl == url) return;
        lastBrowserUrl = url;
        if ($sniffer.history) {
          if (replace) history.replaceState(null, '', url);
          else {
            history.pushState(null, '', url);
            // Crazy Opera Bug: http://my.opera.com/community/forums/topic.dml?id=1185462
            baseElement.attr('href', baseElement.attr('href'));
          }
        } else {
          newLocation = url;
          if (replace) {
            location.replace(url);
          } else {
            location.href = url;
          }
        }
        return self;
        // getter
      } else {
        // - newLocation is a workaround for an IE7-9 issue with location.replace and location.href
        //   methods not updating location.href synchronously.
        // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
        return newLocation || location.href.replace(/%27/g,"'");
      }
    };

    var urlChangeListeners = [],
      urlChangeInit = false;

    function fireUrlChange() {
      newLocation = null;
      if (lastBrowserUrl == self.url()) return;

      lastBrowserUrl = self.url();
      forEach(urlChangeListeners, function(listener) {
        listener(self.url());
      });
    }

    /**
     * @name $browser#onUrlChange
     *
     * @description
     * Register callback function that will be called, when url changes.
     *
     * It's only called when the url is changed from outside of angular:
     * - user types different url into address bar
     * - user clicks on history (forward/back) button
     * - user clicks on a link
     *
     * It's not called when url is changed by $browser.url() method
     *
     * The listener gets called with new url as parameter.
     *
     * NOTE: this api is intended for use only by the $location service. Please use the
     * {@link ng.$location $location service} to monitor url changes in angular apps.
     *
     * @param {function(string)} listener Listener function to be called when url changes.
     * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
     */
    self.onUrlChange = function(callback) {
      // TODO(vojta): refactor to use node's syntax for events
      if (!urlChangeInit) {
        // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
        // don't fire popstate when user change the address bar and don't fire hashchange when url
        // changed by push/replaceState

        // html5 history api - popstate event
        if ($sniffer.history) jqLite(window).on('popstate', fireUrlChange);
        // hashchange event
        if ($sniffer.hashchange) jqLite(window).on('hashchange', fireUrlChange);
        // polling
        else self.addPollFn(fireUrlChange);

        urlChangeInit = true;
      }

      urlChangeListeners.push(callback);
      return callback;
    };

    //////////////////////////////////////////////////////////////
    // Misc API
    //////////////////////////////////////////////////////////////

    /**
     * @name $browser#baseHref
     *
     * @description
     * Returns current <base href>
     * (always relative - without domain)
     *
     * @returns {string} The current base href
     */
    self.baseHref = function() {
      var href = baseElement.attr('href');
      return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
    };

    //////////////////////////////////////////////////////////////
    // Cookies API
    //////////////////////////////////////////////////////////////
    var lastCookies = {};
    var lastCookieString = '';
    var cookiePath = self.baseHref();

    /**
     * @name $browser#cookies
     *
     * @param {string=} name Cookie name
     * @param {string=} value Cookie value
     *
     * @description
     * The cookies method provides a 'private' low level access to browser cookies.
     * It is not meant to be used directly, use the $cookie service instead.
     *
     * The return values vary depending on the arguments that the method was called with as follows:
     *
     * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify
     *   it
     * - cookies(name, value) -> set name to value, if value is undefined delete the cookie
     * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that
     *   way)
     *
     * @returns {Object} Hash of all cookies (if called without any parameter)
     */
    self.cookies = function(name, value) {
      /* global escape: false, unescape: false */
      var cookieLength, cookieArray, cookie, i, index;

      if (name) {
        if (value === undefined) {
          rawDocument.cookie = escape(name) + "=;path=" + cookiePath +
            ";expires=Thu, 01 Jan 1970 00:00:00 GMT";
        } else {
          if (isString(value)) {
            cookieLength = (rawDocument.cookie = escape(name) + '=' + escape(value) +
              ';path=' + cookiePath).length + 1;

            // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
            // - 300 cookies
            // - 20 cookies per unique domain
            // - 4096 bytes per cookie
            if (cookieLength > 4096) {
              $log.warn("Cookie '"+ name +
                "' possibly not set or overflowed because it was too large ("+
                cookieLength + " > 4096 bytes)!");
            }
          }
        }
      } else {
        if (rawDocument.cookie !== lastCookieString) {
          lastCookieString = rawDocument.cookie;
          cookieArray = lastCookieString.split("; ");
          lastCookies = {};

          for (i = 0; i < cookieArray.length; i++) {
            cookie = cookieArray[i];
            index = cookie.indexOf('=');
            if (index > 0) { //ignore nameless cookies
              name = unescape(cookie.substring(0, index));
              // the first value that is seen for a cookie is the most
              // specific one.  values for the same cookie name that
              // follow are for less specific paths.
              if (lastCookies[name] === undefined) {
                lastCookies[name] = unescape(cookie.substring(index + 1));
              }
            }
          }
        }
        return lastCookies;
      }
    };


    /**
     * @name $browser#defer
     * @param {function()} fn A function, who's execution should be deferred.
     * @param {number=} [delay=0] of milliseconds to defer the function execution.
     * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
     *
     * @description
     * Executes a fn asynchronously via `setTimeout(fn, delay)`.
     *
     * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
     * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
     * via `$browser.defer.flush()`.
     *
     */
    self.defer = function(fn, delay) {
      var timeoutId;
      outstandingRequestCount++;
      timeoutId = setTimeout(function() {
        delete pendingDeferIds[timeoutId];
        completeOutstandingRequest(fn);
      }, delay || 0);
      pendingDeferIds[timeoutId] = true;
      return timeoutId;
    };


    /**
     * @name $browser#defer.cancel
     *
     * @description
     * Cancels a deferred task identified with `deferId`.
     *
     * @param {*} deferId Token returned by the `$browser.defer` function.
     * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
     *                    canceled.
     */
    self.defer.cancel = function(deferId) {
      if (pendingDeferIds[deferId]) {
        delete pendingDeferIds[deferId];
        clearTimeout(deferId);
        completeOutstandingRequest(noop);
        return true;
      }
      return false;
    };

  }

  function $BrowserProvider(){
    this.$get = ['$window', '$log', '$sniffer', '$document',
      function( $window,   $log,   $sniffer,   $document){
        return new Browser($window, $document, $log, $sniffer);
      }];
  }

  /**
   * @ngdoc service
   * @name $cacheFactory
   *
   * @description
   * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
   * them.
   *
   * ```js
   *
   *  var cache = $cacheFactory('cacheId');
   *  expect($cacheFactory.get('cacheId')).toBe(cache);
   *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
   *
   *  cache.put("key", "value");
   *  cache.put("another key", "another value");
   *
   *  // We've specified no options on creation
   *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
   *
   * ```
   *
   *
   * @param {string} cacheId Name or id of the newly created cache.
   * @param {object=} options Options object that specifies the cache behavior. Properties:
   *
   *   - `{number=}` `capacity` — turns the cache into LRU cache.
   *
   * @returns {object} Newly created cache object with the following set of methods:
   *
   * - `{object}` `info()` — Returns id, size, and options of cache.
   * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
   *   it.
   * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
   * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
   * - `{void}` `removeAll()` — Removes all cached values.
   * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
   *
   * @example
   <example module="cacheExampleApp">
   <file name="index.html">
   <div ng-controller="CacheController">
   <input ng-model="newCacheKey" placeholder="Key">
   <input ng-model="newCacheValue" placeholder="Value">
   <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

   <p ng-if="keys.length">Cached Values</p>
   <div ng-repeat="key in keys">
   <span ng-bind="key"></span>
   <span>: </span>
   <b ng-bind="cache.get(key)"></b>
   </div>

   <p>Cache Info</p>
   <div ng-repeat="(key, value) in cache.info()">
   <span ng-bind="key"></span>
   <span>: </span>
   <b ng-bind="value"></b>
   </div>
   </div>
   </file>
   <file name="script.js">
   angular.module('cacheExampleApp', []).
   controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             $scope.cache.put(key, value);
             $scope.keys.push(key);
           };
         }]);
   </file>
   <file name="style.css">
   p {
         margin: 10px 0 3px;
       }
   </file>
   </example>
   */
  function $CacheFactoryProvider() {

    this.$get = function() {
      var caches = {};

      function cacheFactory(cacheId, options) {
        if (cacheId in caches) {
          throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
        }

        var size = 0,
          stats = extend({}, options, {id: cacheId}),
          data = {},
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = {},
          freshEnd = null,
          staleEnd = null;

        /**
         * @ngdoc type
         * @name $cacheFactory.Cache
         *
         * @description
         * A cache object used to store and retrieve data, primarily used by
         * {@link $http $http} and the {@link ng.directive:script script} directive to cache
         * templates and other data.
         *
         * ```js
         *  angular.module('superCache')
         *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
         * ```
         *
         * Example test:
         *
         * ```js
         *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
         * ```
         */
        return caches[cacheId] = {

          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#put
           * @kind function
           *
           * @description
           * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
           * retrieved later, and incrementing the size of the cache if the key was not already
           * present in the cache. If behaving like an LRU cache, it will also remove stale
           * entries from the set.
           *
           * It will not insert undefined values into the cache.
           *
           * @param {string} key the key under which the cached data is stored.
           * @param {*} value the value to store alongside the key. If it is undefined, the key
           *    will not be stored.
           * @returns {*} the value stored.
           */
          put: function(key, value) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

              refresh(lruEntry);
            }

            if (isUndefined(value)) return;
            if (!(key in data)) size++;
            data[key] = value;

            if (size > capacity) {
              this.remove(staleEnd.key);
            }

            return value;
          },

          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#get
           * @kind function
           *
           * @description
           * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
           *
           * @param {string} key the key of the data to be retrieved
           * @returns {*} the value stored.
           */
          get: function(key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];

              if (!lruEntry) return;

              refresh(lruEntry);
            }

            return data[key];
          },


          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#remove
           * @kind function
           *
           * @description
           * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
           *
           * @param {string} key the key of the entry to be removed
           */
          remove: function(key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];

              if (!lruEntry) return;

              if (lruEntry == freshEnd) freshEnd = lruEntry.p;
              if (lruEntry == staleEnd) staleEnd = lruEntry.n;
              link(lruEntry.n,lruEntry.p);

              delete lruHash[key];
            }

            delete data[key];
            size--;
          },


          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#removeAll
           * @kind function
           *
           * @description
           * Clears the cache object of any entries.
           */
          removeAll: function() {
            data = {};
            size = 0;
            lruHash = {};
            freshEnd = staleEnd = null;
          },


          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#destroy
           * @kind function
           *
           * @description
           * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
           * removing it from the {@link $cacheFactory $cacheFactory} set.
           */
          destroy: function() {
            data = null;
            stats = null;
            lruHash = null;
            delete caches[cacheId];
          },


          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#info
           * @kind function
           *
           * @description
           * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
           *
           * @returns {object} an object with the following properties:
           *   <ul>
           *     <li>**id**: the id of the cache instance</li>
           *     <li>**size**: the number of entries kept in the cache instance</li>
           *     <li>**...**: any additional properties from the options object when creating the
           *       cache.</li>
           *   </ul>
           */
          info: function() {
            return extend({}, stats, {size: size});
          }
        };


        /**
         * makes the `entry` the freshEnd of the LRU linked list
         */
        function refresh(entry) {
          if (entry != freshEnd) {
            if (!staleEnd) {
              staleEnd = entry;
            } else if (staleEnd == entry) {
              staleEnd = entry.n;
            }

            link(entry.n, entry.p);
            link(entry, freshEnd);
            freshEnd = entry;
            freshEnd.n = null;
          }
        }


        /**
         * bidirectionally links two entries of the LRU linked list
         */
        function link(nextEntry, prevEntry) {
          if (nextEntry != prevEntry) {
            if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
            if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
          }
        }
      }


      /**
       * @ngdoc method
       * @name $cacheFactory#info
       *
       * @description
       * Get information about all the caches that have been created
       *
       * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
       */
      cacheFactory.info = function() {
        var info = {};
        forEach(caches, function(cache, cacheId) {
          info[cacheId] = cache.info();
        });
        return info;
      };


      /**
       * @ngdoc method
       * @name $cacheFactory#get
       *
       * @description
       * Get access to a cache object by the `cacheId` used when it was created.
       *
       * @param {string} cacheId Name or id of a cache to access.
       * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
       */
      cacheFactory.get = function(cacheId) {
        return caches[cacheId];
      };


      return cacheFactory;
    };
  }

  /**
   * @ngdoc service
   * @name $templateCache
   *
   * @description
   * The first time a template is used, it is loaded in the template cache for quick retrieval. You
   * can load templates directly into the cache in a `script` tag, or by consuming the
   * `$templateCache` service directly.
   *
   * Adding via the `script` tag:
   *
   * ```html
   *   <script type="text/ng-template" id="templateId.html">
   *     <p>This is the content of the template</p>
   *   </script>
   * ```
   *
   * **Note:** the `script` tag containing the template does not need to be included in the `head` of
   * the document, but it must be below the `ng-app` definition.
   *
   * Adding via the $templateCache service:
   *
   * ```js
   * var myApp = angular.module('myApp', []);
   * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
   * ```
   *
   * To retrieve the template later, simply use it in your HTML:
   * ```html
   * <div ng-include=" 'templateId.html' "></div>
   * ```
   *
   * or get it via Javascript:
   * ```js
   * $templateCache.get('templateId.html')
   * ```
   *
   * See {@link ng.$cacheFactory $cacheFactory}.
   *
   */
  function $TemplateCacheProvider() {
    this.$get = ['$cacheFactory', function($cacheFactory) {
      return $cacheFactory('templates');
    }];
  }

  /* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
   *
   * DOM-related variables:
   *
   * - "node" - DOM Node
   * - "element" - DOM Element or Node
   * - "$node" or "$element" - jqLite-wrapped node or element
   *
   *
   * Compiler related stuff:
   *
   * - "linkFn" - linking fn of a single directive
   * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
   * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
   * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
   */


  /**
   * @ngdoc service
   * @name $compile
   * @kind function
   *
   * @description
   * Compiles an HTML string or DOM into a template and produces a template function, which
   * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
   *
   * The compilation is a process of walking the DOM tree and matching DOM elements to
   * {@link ng.$compileProvider#directive directives}.
   *
   * <div class="alert alert-warning">
   * **Note:** This document is an in-depth reference of all directive options.
   * For a gentle introduction to directives with examples of common use cases,
   * see the {@link guide/directive directive guide}.
   * </div>
   *
   * ## Comprehensive Directive API
   *
   * There are many different options for a directive.
   *
   * The difference resides in the return value of the factory function.
   * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
   * or just the `postLink` function (all other properties will have the default values).
   *
   * <div class="alert alert-success">
   * **Best Practice:** It's recommended to use the "directive definition object" form.
   * </div>
   *
   * Here's an example directive declared with a Directive Definition Object:
   *
   * ```js
   *   var myModule = angular.module(...);
   *
   *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       transclude: false,
 *       restrict: 'A',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       controllerAs: 'stringAlias',
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
   * ```
   *
   * <div class="alert alert-warning">
   * **Note:** Any unspecified options will use the default value. You can see the default values below.
   * </div>
   *
   * Therefore the above can be simplified as:
   *
   * ```js
   *   var myModule = angular.module(...);
   *
   *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
   * ```
   *
   *
   *
   * ### Directive Definition Object
   *
   * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
   *
   * #### `priority`
   * When there are multiple directives defined on a single DOM element, sometimes it
   * is necessary to specify the order in which the directives are applied. The `priority` is used
   * to sort the directives before their `compile` functions get called. Priority is defined as a
   * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
   * are also run in priority order, but post-link functions are run in reverse order. The order
   * of directives with the same priority is undefined. The default priority is `0`.
   *
   * #### `terminal`
   * If set to true then the current `priority` will be the last set of directives
   * which will execute (any directives at the current priority will still execute
   * as the order of execution on same `priority` is undefined).
   *
   * #### `scope`
   * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
   * same element request a new scope, only one new scope is created. The new scope rule does not
   * apply for the root of the template since the root of the template always gets a new scope.
   *
   * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
   * normal scope in that it does not prototypically inherit from the parent scope. This is useful
   * when creating reusable components, which should not accidentally read or modify data in the
   * parent scope.
   *
   * The 'isolate' scope takes an object hash which defines a set of local scope properties
   * derived from the parent scope. These local properties are useful for aliasing values for
   * templates. Locals definition is a hash of local scope property to its source:
   *
   * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
   *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
   *   attribute name is assumed to be the same as the local name.
   *   Given `<widget my-attr="hello {{name}}">` and widget definition
   *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
   *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
   *   `localName` property on the widget scope. The `name` is read from the parent scope (not
   *   component scope).
   *
   * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
   *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
   *   name is specified then the attribute name is assumed to be the same as the local name.
   *   Given `<widget my-attr="parentModel">` and widget definition of
   *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
   *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
   *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
   *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
   *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional.
   *
   * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
   *   If no `attr` name is specified then the attribute name is assumed to be the same as the
   *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
   *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
   *   a function wrapper for the `count = count + value` expression. Often it's desirable to
   *   pass data from the isolated scope via an expression and to the parent scope, this can be
   *   done by passing a map of local variable names and values into the expression wrapper fn.
   *   For example, if the expression is `increment(amount)` then we can specify the amount value
   *   by calling the `localFn` as `localFn({amount: 22})`.
   *
   *
   *
   * #### `controller`
   * Controller constructor function. The controller is instantiated before the
   * pre-linking phase and it is shared with other directives (see
   * `require` attribute). This allows the directives to communicate with each other and augment
   * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
   *
   * * `$scope` - Current scope associated with the element
   * * `$element` - Current element
   * * `$attrs` - Current attributes object for the element
   * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope.
   *    The scope can be overridden by an optional first argument.
   *   `function([scope], cloneLinkingFn)`.
   *
   *
   * #### `require`
   * Require another directive and inject its controller as the fourth argument to the linking function. The
   * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
   * injected argument will be an array in corresponding order. If no such directive can be
   * found, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:
   *
   * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
   * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
   * * `^` - Locate the required controller by searching the element's parents. Throw an error if not found.
   * * `?^` - Attempt to locate the required controller by searching the element's parents or pass `null` to the
   *   `link` fn if not found.
   *
   *
   * #### `controllerAs`
   * Controller alias at the directive scope. An alias for the controller so it
   * can be referenced at the directive template. The directive needs to define a scope for this
   * configuration to be used. Useful in the case when directive is used as component.
   *
   *
   * #### `restrict`
   * String of subset of `EACM` which restricts the directive to a specific directive
   * declaration style. If omitted, the default (attributes only) is used.
   *
   * * `E` - Element name: `<my-directive></my-directive>`
   * * `A` - Attribute (default): `<div my-directive="exp"></div>`
   * * `C` - Class: `<div class="my-directive: exp;"></div>`
   * * `M` - Comment: `<!-- directive: my-directive exp -->`
   *
   *
   * #### `template`
   * replace the current element with the contents of the HTML. The replacement process
   * migrates all of the attributes / classes from the old element to the new one. See the
   * {@link guide/directive#creating-custom-directives_creating-directives_template-expanding-directive
 * Directives Guide} for an example.
   *
   * You can specify `template` as a string representing the template or as a function which takes
   * two arguments `tElement` and `tAttrs` (described in the `compile` function api below) and
   * returns a string value representing the template.
   *
   *
   * #### `templateUrl`
   * Same as `template` but the template is loaded from the specified URL. Because
   * the template loading is asynchronous the compilation/linking is suspended until the template
   * is loaded.
   *
   * You can specify `templateUrl` as a string representing the URL or as a function which takes two
   * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
   * a string value representing the url.  In either case, the template URL is passed through {@link
    * api/ng.$sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
   *
   *
   * #### `replace` ([*DEPRECATED*!], will be removed in next major release)
   * specify where the template should be inserted. Defaults to `false`.
   *
   * * `true` - the template will replace the current element.
   * * `false` - the template will replace the contents of the current element.
   *
   *
   * #### `transclude`
   * compile the content of the element and make it available to the directive.
   * Typically used with {@link ng.directive:ngTransclude
 * ngTransclude}. The advantage of transclusion is that the linking function receives a
   * transclusion function which is pre-bound to the correct scope. In a typical setup the widget
   * creates an `isolate` scope, but the transclusion is not a child, but a sibling of the `isolate`
   * scope. This makes it possible for the widget to have private state, and the transclusion to
   * be bound to the parent (pre-`isolate`) scope.
   *
   * * `true` - transclude the content of the directive.
   * * `'element'` - transclude the whole element including any directives defined at lower priority.
   *
   *
   * #### `compile`
   *
   * ```js
   *   function compile(tElement, tAttrs, transclude) { ... }
   * ```
   *
   * The compile function deals with transforming the template DOM. Since most directives do not do
   * template transformation, it is not used often. The compile function takes the following arguments:
   *
   *   * `tElement` - template element - The element where the directive has been declared. It is
   *     safe to do template transformation on the element and child elements only.
   *
   *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
   *     between all directive compile functions.
   *
   *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
   *
   * <div class="alert alert-warning">
   * **Note:** The template instance and the link instance may be different objects if the template has
   * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
   * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
   * should be done in a linking function rather than in a compile function.
   * </div>

   * <div class="alert alert-warning">
   * **Note:** The compile function cannot handle directives that recursively use themselves in their
   * own templates or compile functions. Compiling these directives results in an infinite loop and a
   * stack overflow errors.
   *
   * This can be avoided by manually using $compile in the postLink function to imperatively compile
   * a directive's template instead of relying on automatic template compilation via `template` or
   * `templateUrl` declaration or manual compilation inside the compile function.
   * </div>
   *
   * <div class="alert alert-error">
   * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
   *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
   *   to the link function instead.
   * </div>

   * A compile function can have a return value which can be either a function or an object.
   *
   * * returning a (post-link) function - is equivalent to registering the linking function via the
   *   `link` property of the config object when the compile function is empty.
   *
   * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
   *   control when a linking function should be called during the linking phase. See info about
   *   pre-linking and post-linking functions below.
   *
   *
   * #### `link`
   * This property is used only if the `compile` property is not defined.
   *
   * ```js
   *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
   * ```
   *
   * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
   * executed after the template has been cloned. This is where most of the directive logic will be
   * put.
   *
   *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
   *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
   *
   *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
   *     manipulate the children of the element only in `postLink` function since the children have
   *     already been linked.
   *
   *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
   *     between all directive linking functions.
   *
   *   * `controller` - a controller instance - A controller instance if at least one directive on the
   *     element defines a controller. The controller is shared among all the directives, which allows
   *     the directives to use the controllers as a communication channel.
   *
   *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
   *     The scope can be overridden by an optional first argument. This is the same as the `$transclude`
   *     parameter of directive controllers.
   *     `function([scope], cloneLinkingFn)`.
   *
   *
   * #### Pre-linking function
   *
   * Executed before the child elements are linked. Not safe to do DOM transformation since the
   * compiler linking function will fail to locate the correct elements for linking.
   *
   * #### Post-linking function
   *
   * Executed after the child elements are linked. It is safe to do DOM transformation in the post-linking function.
   *
   * <a name="Attributes"></a>
   * ### Attributes
   *
   * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
   * `link()` or `compile()` functions. It has a variety of uses.
   *
   * accessing *Normalized attribute names:*
   * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
   * the attributes object allows for normalized access to
   *   the attributes.
   *
   * * *Directive inter-communication:* All directives share the same instance of the attributes
   *   object which allows the directives to use the attributes object as inter directive
   *   communication.
   *
   * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
   *   allowing other directives to read the interpolated value.
   *
   * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
   *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
   *   the only way to easily get the actual value because during the linking phase the interpolation
   *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
   *
   * ```js
   * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
   * ```
   *
   * Below is an example using `$compileProvider`.
   *
   * <div class="alert alert-warning">
   * **Note**: Typically directives are registered with `module.directive`. The example below is
   * to illustrate how `$compile` works.
   * </div>
   *
   <example module="compile">
   <file name="index.html">
   <script>
   angular.module('compile', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        })
      });

   function Ctrl($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }
   </script>
   <div ng-controller="Ctrl">
   <input ng-model="name"> <br>
   <textarea ng-model="html"></textarea> <br>
   <div compile="html"></div>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
   </example>

   *
   *
   * @param {string|DOMElement} element Element or HTML string to compile into a template function.
   * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives.
   * @param {number} maxPriority only apply directives lower than given priority (Only effects the
   *                 root element(s), not their children)
   * @returns {function(scope, cloneAttachFn=)} a link function which is used to bind template
   * (a DOM element/tree) to a scope. Where:
   *
   *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
   *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
   *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
   *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
   *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:
   *
   *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
   *      * `scope` - is the current scope with which the linking function is working with.
   *
   * Calling the linking function returns the element of the template. It is either the original
   * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
   *
   * After linking the view is not updated until after a call to $digest which typically is done by
   * Angular automatically.
   *
   * If you need access to the bound view, there are two ways to do it:
   *
   * - If you are not asking the linking function to clone the template, create the DOM element(s)
   *   before you send them to the compiler and keep this reference around.
   *   ```js
   *     var element = $compile('<p>{{total}}</p>')(scope);
   *   ```
   *
   * - if on the other hand, you need the element to be cloned, the view reference from the original
   *   example would not point to the clone, but rather to the original template that was cloned. In
   *   this case, you can access the clone via the cloneAttachFn:
   *   ```js
   *     var templateElement = angular.element('<p>{{total}}</p>'),
   *         scope = ....;
   *
   *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
   *
   *     //now we have reference to the cloned DOM via `clonedElement`
   *   ```
   *
   *
   * For information on how the compiler works, see the
   * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
   */

  var $compileMinErr = minErr('$compile');

  /**
   * @ngdoc provider
   * @name $compileProvider
   * @kind function
   *
   * @description
   */
  $CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
  function $CompileProvider($provide, $$sanitizeUriProvider) {
    var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\d\w_\-]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\d\w_\-]+)(?:\:([^;]+))?;?)/;

    // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
    // The assumption is that future DOM event attribute names will begin with
    // 'on' and be composed of only English letters.
    var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

    /**
     * @ngdoc method
     * @name $compileProvider#directive
     * @kind function
     *
     * @description
     * Register a new directive with the compiler.
     *
     * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
     *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
     *    names and the values are the factories.
     * @param {Function|Array} directiveFactory An injectable directive factory function. See
     *    {@link guide/directive} for more info.
     * @returns {ng.$compileProvider} Self for chaining.
     */
    this.directive = function registerDirective(name, directiveFactory) {
      assertNotHasOwnProperty(name, 'directive');
      if (isString(name)) {
        assertArg(directiveFactory, 'directiveFactory');
        if (!hasDirectives.hasOwnProperty(name)) {
          hasDirectives[name] = [];
          $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
            function($injector, $exceptionHandler) {
              var directives = [];
              forEach(hasDirectives[name], function(directiveFactory, index) {
                try {
                  var directive = $injector.invoke(directiveFactory);
                  if (isFunction(directive)) {
                    directive = { compile: valueFn(directive) };
                  } else if (!directive.compile && directive.link) {
                    directive.compile = valueFn(directive.link);
                  }
                  directive.priority = directive.priority || 0;
                  directive.index = index;
                  directive.name = directive.name || name;
                  directive.require = directive.require || (directive.controller && directive.name);
                  directive.restrict = directive.restrict || 'A';
                  directives.push(directive);
                } catch (e) {
                  $exceptionHandler(e);
                }
              });
              return directives;
            }]);
        }
        hasDirectives[name].push(directiveFactory);
      } else {
        forEach(name, reverseParams(registerDirective));
      }
      return this;
    };


    /**
     * @ngdoc method
     * @name $compileProvider#aHrefSanitizationWhitelist
     * @kind function
     *
     * @description
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe
     * urls during a[href] sanitization.
     *
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.
     *
     * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
     * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
     *
     * @param {RegExp=} regexp New regexp to whitelist urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.aHrefSanitizationWhitelist = function(regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
      }
    };


    /**
     * @ngdoc method
     * @name $compileProvider#imgSrcSanitizationWhitelist
     * @kind function
     *
     * @description
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe
     * urls during img[src] sanitization.
     *
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.
     *
     * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
     * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
     *
     * @param {RegExp=} regexp New regexp to whitelist urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.imgSrcSanitizationWhitelist = function(regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
      }
    };

    this.$get = [
      '$injector', '$interpolate', '$exceptionHandler', '$http', '$templateCache', '$parse',
      '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
      function($injector,   $interpolate,   $exceptionHandler,   $http,   $templateCache,   $parse,
               $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {

        var Attributes = function(element, attr) {
          this.$$element = element;
          this.$attr = attr || {};
        };

        Attributes.prototype = {
          $normalize: directiveNormalize,


          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$addClass
           * @kind function
           *
           * @description
           * Adds the CSS class value specified by the classVal parameter to the element. If animations
           * are enabled then an animation will be triggered for the class addition.
           *
           * @param {string} classVal The className value that will be added to the element
           */
          $addClass : function(classVal) {
            if(classVal && classVal.length > 0) {
              $animate.addClass(this.$$element, classVal);
            }
          },

          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$removeClass
           * @kind function
           *
           * @description
           * Removes the CSS class value specified by the classVal parameter from the element. If
           * animations are enabled then an animation will be triggered for the class removal.
           *
           * @param {string} classVal The className value that will be removed from the element
           */
          $removeClass : function(classVal) {
            if(classVal && classVal.length > 0) {
              $animate.removeClass(this.$$element, classVal);
            }
          },

          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$updateClass
           * @kind function
           *
           * @description
           * Adds and removes the appropriate CSS class values to the element based on the difference
           * between the new and old CSS class values (specified as newClasses and oldClasses).
           *
           * @param {string} newClasses The current CSS className value
           * @param {string} oldClasses The former CSS className value
           */
          $updateClass : function(newClasses, oldClasses) {
            var toAdd = tokenDifference(newClasses, oldClasses);
            var toRemove = tokenDifference(oldClasses, newClasses);

            if(toAdd.length === 0) {
              $animate.removeClass(this.$$element, toRemove);
            } else if(toRemove.length === 0) {
              $animate.addClass(this.$$element, toAdd);
            } else {
              $animate.setClass(this.$$element, toAdd, toRemove);
            }
          },

          /**
           * Set a normalized attribute on the element in a way such that all directives
           * can share the attribute. This function properly handles boolean attributes.
           * @param {string} key Normalized key. (ie ngAttribute)
           * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
           * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
           *     Defaults to true.
           * @param {string=} attrName Optional none normalized name. Defaults to key.
           */
          $set: function(key, value, writeAttr, attrName) {
            // TODO: decide whether or not to throw an error if "class"
            //is set through this function since it may cause $updateClass to
            //become unstable.

            var booleanKey = getBooleanAttrName(this.$$element[0], key),
              normalizedVal,
              nodeName;

            if (booleanKey) {
              this.$$element.prop(key, value);
              attrName = booleanKey;
            }

            this[key] = value;

            // translate normalized key to actual key
            if (attrName) {
              this.$attr[key] = attrName;
            } else {
              attrName = this.$attr[key];
              if (!attrName) {
                this.$attr[key] = attrName = snake_case(key, '-');
              }
            }

            nodeName = nodeName_(this.$$element);

            // sanitize a[href] and img[src] values
            if ((nodeName === 'A' && key === 'href') ||
              (nodeName === 'IMG' && key === 'src')) {
              this[key] = value = $$sanitizeUri(value, key === 'src');
            }

            if (writeAttr !== false) {
              if (value === null || value === undefined) {
                this.$$element.removeAttr(attrName);
              } else {
                this.$$element.attr(attrName, value);
              }
            }

            // fire observers
            var $$observers = this.$$observers;
            $$observers && forEach($$observers[key], function(fn) {
              try {
                fn(value);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
          },


          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$observe
           * @kind function
           *
           * @description
           * Observes an interpolated attribute.
           *
           * The observer function will be invoked once during the next `$digest` following
           * compilation. The observer is then invoked whenever the interpolated value
           * changes.
           *
           * @param {string} key Normalized key. (ie ngAttribute) .
           * @param {function(interpolatedValue)} fn Function that will be called whenever
           the interpolated value of the attribute changes.
           *        See the {@link guide/directive#Attributes Directives} guide for more info.
           * @returns {function()} the `fn` parameter.
           */
          $observe: function(key, fn) {
            var attrs = this,
              $$observers = (attrs.$$observers || (attrs.$$observers = {})),
              listeners = ($$observers[key] || ($$observers[key] = []));

            listeners.push(fn);
            $rootScope.$evalAsync(function() {
              if (!listeners.$$inter) {
                // no one registered attribute interpolation function, so lets call it manually
                fn(attrs[key]);
              }
            });
            return fn;
          }
        };

        var startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')
            ? identity
            : function denormalizeTemplate(template) {
            return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
          },
          NG_ATTR_BINDING = /^ngAttr[A-Z]/;


        return compile;

        //================================

        function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
                         previousCompileContext) {
          if (!($compileNodes instanceof jqLite)) {
            // jquery always rewraps, whereas we need to preserve the original selector so that we can
            // modify it.
            $compileNodes = jqLite($compileNodes);
          }
          // We can not compile top level text elements since text nodes can be merged and we will
          // not be able to attach scope data to them, so we will wrap them in <span>
          forEach($compileNodes, function(node, index){
            if (node.nodeType == 3 /* text node */ && node.nodeValue.match(/\S+/) /* non-empty */ ) {
              $compileNodes[index] = node = jqLite(node).wrap('<span></span>').parent()[0];
            }
          });
          var compositeLinkFn =
            compileNodes($compileNodes, transcludeFn, $compileNodes,
              maxPriority, ignoreDirective, previousCompileContext);
          safeAddClass($compileNodes, 'ng-scope');
          return function publicLinkFn(scope, cloneConnectFn, transcludeControllers){
            assertArg(scope, 'scope');
            // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
            // and sometimes changes the structure of the DOM.
            var $linkNode = cloneConnectFn
              ? JQLitePrototype.clone.call($compileNodes) // IMPORTANT!!!
              : $compileNodes;

            forEach(transcludeControllers, function(instance, name) {
              $linkNode.data('$' + name + 'Controller', instance);
            });

            // Attach scope only to non-text nodes.
            for(var i = 0, ii = $linkNode.length; i<ii; i++) {
              var node = $linkNode[i],
                nodeType = node.nodeType;
              if (nodeType === 1 /* element */ || nodeType === 9 /* document */) {
                $linkNode.eq(i).data('$scope', scope);
              }
            }

            if (cloneConnectFn) cloneConnectFn($linkNode, scope);
            if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode);
            return $linkNode;
          };
        }

        function safeAddClass($element, className) {
          try {
            $element.addClass(className);
          } catch(e) {
            // ignore, since it means that we are trying to set class on
            // SVG element, where class name is read-only.
          }
        }

        /**
         * Compile function matches each node in nodeList against the directives. Once all directives
         * for a particular node are collected their compile functions are executed. The compile
         * functions return values - the linking functions - are combined into a composite linking
         * function, which is the a linking function for the node.
         *
         * @param {NodeList} nodeList an array of nodes or NodeList to compile
         * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
         *        scope argument is auto-generated to the new child of the transcluded parent scope.
         * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
         *        the rootElement must be set the jqLite collection of the compile root. This is
         *        needed so that the jqLite collection items can be replaced with widgets.
         * @param {number=} maxPriority Max directive priority.
         * @returns {Function} A composite linking function of all of the matched directives or null.
         */
        function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
                              previousCompileContext) {
          var linkFns = [],
            attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound;

          for (var i = 0; i < nodeList.length; i++) {
            attrs = new Attributes();

            // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
            directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
              ignoreDirective);

            nodeLinkFn = (directives.length)
              ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
              null, [], [], previousCompileContext)
              : null;

            if (nodeLinkFn && nodeLinkFn.scope) {
              safeAddClass(jqLite(nodeList[i]), 'ng-scope');
            }

            childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
              !(childNodes = nodeList[i].childNodes) ||
              !childNodes.length)
              ? null
              : compileNodes(childNodes,
              nodeLinkFn ? nodeLinkFn.transclude : transcludeFn);

            linkFns.push(nodeLinkFn, childLinkFn);
            linkFnFound = linkFnFound || nodeLinkFn || childLinkFn;
            //use the previous context only for the first element in the virtual group
            previousCompileContext = null;
          }

          // return a linking function if we have found anything, null otherwise
          return linkFnFound ? compositeLinkFn : null;

          function compositeLinkFn(scope, nodeList, $rootElement, boundTranscludeFn) {
            var nodeLinkFn, childLinkFn, node, $node, childScope, childTranscludeFn, i, ii, n;

            // copy nodeList so that linking doesn't break due to live list updates.
            var nodeListLength = nodeList.length,
              stableNodeList = new Array(nodeListLength);
            for (i = 0; i < nodeListLength; i++) {
              stableNodeList[i] = nodeList[i];
            }

            for(i = 0, n = 0, ii = linkFns.length; i < ii; n++) {
              node = stableNodeList[n];
              nodeLinkFn = linkFns[i++];
              childLinkFn = linkFns[i++];
              $node = jqLite(node);

              if (nodeLinkFn) {
                if (nodeLinkFn.scope) {
                  childScope = scope.$new();
                  $node.data('$scope', childScope);
                } else {
                  childScope = scope;
                }
                childTranscludeFn = nodeLinkFn.transclude;
                if (childTranscludeFn || (!boundTranscludeFn && transcludeFn)) {
                  nodeLinkFn(childLinkFn, childScope, node, $rootElement,
                    createBoundTranscludeFn(scope, childTranscludeFn || transcludeFn)
                  );
                } else {
                  nodeLinkFn(childLinkFn, childScope, node, $rootElement, boundTranscludeFn);
                }
              } else if (childLinkFn) {
                childLinkFn(scope, node.childNodes, undefined, boundTranscludeFn);
              }
            }
          }
        }

        function createBoundTranscludeFn(scope, transcludeFn) {
          return function boundTranscludeFn(transcludedScope, cloneFn, controllers) {
            var scopeCreated = false;

            if (!transcludedScope) {
              transcludedScope = scope.$new();
              transcludedScope.$$transcluded = true;
              scopeCreated = true;
            }

            var clone = transcludeFn(transcludedScope, cloneFn, controllers);
            if (scopeCreated) {
              clone.on('$destroy', bind(transcludedScope, transcludedScope.$destroy));
            }
            return clone;
          };
        }

        /**
         * Looks for directives on the given node and adds them to the directive collection which is
         * sorted.
         *
         * @param node Node to search.
         * @param directives An array to which the directives are added to. This array is sorted before
         *        the function returns.
         * @param attrs The shared attrs object which is used to populate the normalized attributes.
         * @param {number=} maxPriority Max directive priority.
         */
        function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
          var nodeType = node.nodeType,
            attrsMap = attrs.$attr,
            match,
            className;

          switch(nodeType) {
            case 1: /* Element */
              // use the node name: <directive>
              addDirective(directives,
                directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority, ignoreDirective);

              // iterate over the attributes
              for (var attr, name, nName, ngAttrName, value, nAttrs = node.attributes,
                     j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
                var attrStartName = false;
                var attrEndName = false;

                attr = nAttrs[j];
                if (!msie || msie >= 8 || attr.specified) {
                  name = attr.name;
                  // support ngAttr attribute binding
                  ngAttrName = directiveNormalize(name);
                  if (NG_ATTR_BINDING.test(ngAttrName)) {
                    name = snake_case(ngAttrName.substr(6), '-');
                  }

                  var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
                  if (ngAttrName === directiveNName + 'Start') {
                    attrStartName = name;
                    attrEndName = name.substr(0, name.length - 5) + 'end';
                    name = name.substr(0, name.length - 6);
                  }

                  nName = directiveNormalize(name.toLowerCase());
                  attrsMap[nName] = name;
                  attrs[nName] = value = trim(attr.value);
                  if (getBooleanAttrName(node, nName)) {
                    attrs[nName] = true; // presence means true
                  }
                  addAttrInterpolateDirective(node, directives, value, nName);
                  addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
                    attrEndName);
                }
              }

              // use class as directive
              className = node.className;
              if (isString(className) && className !== '') {
                while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
                  nName = directiveNormalize(match[2]);
                  if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                    attrs[nName] = trim(match[3]);
                  }
                  className = className.substr(match.index + match[0].length);
                }
              }
              break;
            case 3: /* Text Node */
              addTextInterpolateDirective(directives, node.nodeValue);
              break;
            case 8: /* Comment */
              try {
                match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
                if (match) {
                  nName = directiveNormalize(match[1]);
                  if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                    attrs[nName] = trim(match[2]);
                  }
                }
              } catch (e) {
                // turns out that under some circumstances IE9 throws errors when one attempts to read
                // comment's node value.
                // Just ignore it and continue. (Can't seem to reproduce in test case.)
              }
              break;
          }

          directives.sort(byPriority);
          return directives;
        }

        /**
         * Given a node with an directive-start it collects all of the siblings until it finds
         * directive-end.
         * @param node
         * @param attrStart
         * @param attrEnd
         * @returns {*}
         */
        function groupScan(node, attrStart, attrEnd) {
          var nodes = [];
          var depth = 0;
          if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
            var startNode = node;
            do {
              if (!node) {
                throw $compileMinErr('uterdir',
                  "Unterminated attribute, found '{0}' but no matching '{1}' found.",
                  attrStart, attrEnd);
              }
              if (node.nodeType == 1 /** Element **/) {
                if (node.hasAttribute(attrStart)) depth++;
                if (node.hasAttribute(attrEnd)) depth--;
              }
              nodes.push(node);
              node = node.nextSibling;
            } while (depth > 0);
          } else {
            nodes.push(node);
          }

          return jqLite(nodes);
        }

        /**
         * Wrapper for linking function which converts normal linking function into a grouped
         * linking function.
         * @param linkFn
         * @param attrStart
         * @param attrEnd
         * @returns {Function}
         */
        function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
          return function(scope, element, attrs, controllers, transcludeFn) {
            element = groupScan(element[0], attrStart, attrEnd);
            return linkFn(scope, element, attrs, controllers, transcludeFn);
          };
        }

        /**
         * Once the directives have been collected, their compile functions are executed. This method
         * is responsible for inlining directive templates as well as terminating the application
         * of the directives if the terminal directive has been reached.
         *
         * @param {Array} directives Array of collected directives to execute their compile function.
         *        this needs to be pre-sorted by priority order.
         * @param {Node} compileNode The raw DOM node to apply the compile functions to
         * @param {Object} templateAttrs The shared attribute function
         * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
         *                                                  scope argument is auto-generated to the new
         *                                                  child of the transcluded parent scope.
         * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
         *                              argument has the root jqLite array so that we can replace nodes
         *                              on it.
         * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
         *                                           compiling the transclusion.
         * @param {Array.<Function>} preLinkFns
         * @param {Array.<Function>} postLinkFns
         * @param {Object} previousCompileContext Context used for previous compilation of the current
         *                                        node
         * @returns {Function} linkFn
         */
        function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
                                       jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
                                       previousCompileContext) {
          previousCompileContext = previousCompileContext || {};

          var terminalPriority = -Number.MAX_VALUE,
            newScopeDirective,
            controllerDirectives = previousCompileContext.controllerDirectives,
            newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
            templateDirective = previousCompileContext.templateDirective,
            nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
            hasTranscludeDirective = false,
            hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
            $compileNode = templateAttrs.$$element = jqLite(compileNode),
            directive,
            directiveName,
            $template,
            replaceDirective = originalReplaceDirective,
            childTranscludeFn = transcludeFn,
            linkFn,
            directiveValue;

          // executes all directives on the current element
          for(var i = 0, ii = directives.length; i < ii; i++) {
            directive = directives[i];
            var attrStart = directive.$$start;
            var attrEnd = directive.$$end;

            // collect multiblock sections
            if (attrStart) {
              $compileNode = groupScan(compileNode, attrStart, attrEnd);
            }
            $template = undefined;

            if (terminalPriority > directive.priority) {
              break; // prevent further processing of directives
            }

            if (directiveValue = directive.scope) {
              newScopeDirective = newScopeDirective || directive;

              // skip the check for directives with async templates, we'll check the derived sync
              // directive when the template arrives
              if (!directive.templateUrl) {
                assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
                  $compileNode);
                if (isObject(directiveValue)) {
                  newIsolateScopeDirective = directive;
                }
              }
            }

            directiveName = directive.name;

            if (!directive.templateUrl && directive.controller) {
              directiveValue = directive.controller;
              controllerDirectives = controllerDirectives || {};
              assertNoDuplicate("'" + directiveName + "' controller",
                controllerDirectives[directiveName], directive, $compileNode);
              controllerDirectives[directiveName] = directive;
            }

            if (directiveValue = directive.transclude) {
              hasTranscludeDirective = true;

              // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
              // This option should only be used by directives that know how to safely handle element transclusion,
              // where the transcluded nodes are added or replaced after linking.
              if (!directive.$$tlb) {
                assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
                nonTlbTranscludeDirective = directive;
              }

              if (directiveValue == 'element') {
                hasElementTranscludeDirective = true;
                terminalPriority = directive.priority;
                $template = groupScan(compileNode, attrStart, attrEnd);
                $compileNode = templateAttrs.$$element =
                  jqLite(document.createComment(' ' + directiveName + ': ' +
                    templateAttrs[directiveName] + ' '));
                compileNode = $compileNode[0];
                replaceWith(jqCollection, jqLite(sliceArgs($template)), compileNode);

                childTranscludeFn = compile($template, transcludeFn, terminalPriority,
                    replaceDirective && replaceDirective.name, {
                    // Don't pass in:
                    // - controllerDirectives - otherwise we'll create duplicates controllers
                    // - newIsolateScopeDirective or templateDirective - combining templates with
                    //   element transclusion doesn't make sense.
                    //
                    // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                    // on the same element more than once.
                    nonTlbTranscludeDirective: nonTlbTranscludeDirective
                  });
              } else {
                $template = jqLite(jqLiteClone(compileNode)).contents();
                $compileNode.empty(); // clear contents
                childTranscludeFn = compile($template, transcludeFn);
              }
            }

            if (directive.template) {
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;

              directiveValue = (isFunction(directive.template))
                ? directive.template($compileNode, templateAttrs)
                : directive.template;

              directiveValue = denormalizeTemplate(directiveValue);

              if (directive.replace) {
                replaceDirective = directive;
                if (jqLiteIsTextNode(directiveValue)) {
                  $template = [];
                } else {
                  $template = jqLite(trim(directiveValue));
                }
                compileNode = $template[0];

                if ($template.length != 1 || compileNode.nodeType !== 1) {
                  throw $compileMinErr('tplrt',
                    "Template for directive '{0}' must have exactly one root element. {1}",
                    directiveName, '');
                }

                replaceWith(jqCollection, $compileNode, compileNode);

                var newTemplateAttrs = {$attr: {}};

                // combine directives from the original node and from the template:
                // - take the array of directives for this element
                // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
                // - collect directives from the template and sort them by priority
                // - combine directives as: processed + template + unprocessed
                var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
                var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

                if (newIsolateScopeDirective) {
                  markDirectivesAsIsolate(templateDirectives);
                }
                directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

                ii = directives.length;
              } else {
                $compileNode.html(directiveValue);
              }
            }

            if (directive.templateUrl) {
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;

              if (directive.replace) {
                replaceDirective = directive;
              }

              nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
                templateAttrs, jqCollection, childTranscludeFn, preLinkFns, postLinkFns, {
                  controllerDirectives: controllerDirectives,
                  newIsolateScopeDirective: newIsolateScopeDirective,
                  templateDirective: templateDirective,
                  nonTlbTranscludeDirective: nonTlbTranscludeDirective
                });
              ii = directives.length;
            } else if (directive.compile) {
              try {
                linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                if (isFunction(linkFn)) {
                  addLinkFns(null, linkFn, attrStart, attrEnd);
                } else if (linkFn) {
                  addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
                }
              } catch (e) {
                $exceptionHandler(e, startingTag($compileNode));
              }
            }

            if (directive.terminal) {
              nodeLinkFn.terminal = true;
              terminalPriority = Math.max(terminalPriority, directive.priority);
            }

          }

          nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
          nodeLinkFn.transclude = hasTranscludeDirective && childTranscludeFn;
          previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

          // might be normal or delayed nodeLinkFn depending on if templateUrl is present
          return nodeLinkFn;

          ////////////////////

          function addLinkFns(pre, post, attrStart, attrEnd) {
            if (pre) {
              if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
              pre.require = directive.require;
              pre.directiveName = directiveName;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                pre = cloneAndAnnotateFn(pre, {isolateScope: true});
              }
              preLinkFns.push(pre);
            }
            if (post) {
              if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
              post.require = directive.require;
              post.directiveName = directiveName;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                post = cloneAndAnnotateFn(post, {isolateScope: true});
              }
              postLinkFns.push(post);
            }
          }


          function getControllers(directiveName, require, $element, elementControllers) {
            var value, retrievalMethod = 'data', optional = false;
            if (isString(require)) {
              while((value = require.charAt(0)) == '^' || value == '?') {
                require = require.substr(1);
                if (value == '^') {
                  retrievalMethod = 'inheritedData';
                }
                optional = optional || value == '?';
              }
              value = null;

              if (elementControllers && retrievalMethod === 'data') {
                value = elementControllers[require];
              }
              value = value || $element[retrievalMethod]('$' + require + 'Controller');

              if (!value && !optional) {
                throw $compileMinErr('ctreq',
                  "Controller '{0}', required by directive '{1}', can't be found!",
                  require, directiveName);
              }
              return value;
            } else if (isArray(require)) {
              value = [];
              forEach(require, function(require) {
                value.push(getControllers(directiveName, require, $element, elementControllers));
              });
            }
            return value;
          }


          function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
            var attrs, $element, i, ii, linkFn, controller, isolateScope, elementControllers = {}, transcludeFn;

            if (compileNode === linkNode) {
              attrs = templateAttrs;
            } else {
              attrs = shallowCopy(templateAttrs, new Attributes(jqLite(linkNode), templateAttrs.$attr));
            }
            $element = attrs.$$element;

            if (newIsolateScopeDirective) {
              var LOCAL_REGEXP = /^\s*([@=&])(\??)\s*(\w*)\s*$/;
              var $linkNode = jqLite(linkNode);

              isolateScope = scope.$new(true);

              if (templateDirective && (templateDirective === newIsolateScopeDirective ||
                templateDirective === newIsolateScopeDirective.$$originalDirective)) {
                $linkNode.data('$isolateScope', isolateScope) ;
              } else {
                $linkNode.data('$isolateScopeNoTemplate', isolateScope);
              }



              safeAddClass($linkNode, 'ng-isolate-scope');

              forEach(newIsolateScopeDirective.scope, function(definition, scopeName) {
                var match = definition.match(LOCAL_REGEXP) || [],
                  attrName = match[3] || scopeName,
                  optional = (match[2] == '?'),
                  mode = match[1], // @, =, or &
                  lastValue,
                  parentGet, parentSet, compare;

                isolateScope.$$isolateBindings[scopeName] = mode + attrName;

                switch (mode) {

                  case '@':
                    attrs.$observe(attrName, function(value) {
                      isolateScope[scopeName] = value;
                    });
                    attrs.$$observers[attrName].$$scope = scope;
                    if( attrs[attrName] ) {
                      // If the attribute has been provided then we trigger an interpolation to ensure
                      // the value is there for use in the link fn
                      isolateScope[scopeName] = $interpolate(attrs[attrName])(scope);
                    }
                    break;

                  case '=':
                    if (optional && !attrs[attrName]) {
                      return;
                    }
                    parentGet = $parse(attrs[attrName]);
                    if (parentGet.literal) {
                      compare = equals;
                    } else {
                      compare = function(a,b) { return a === b; };
                    }
                    parentSet = parentGet.assign || function() {
                      // reset the change, or we will throw this exception on every $digest
                      lastValue = isolateScope[scopeName] = parentGet(scope);
                      throw $compileMinErr('nonassign',
                        "Expression '{0}' used with directive '{1}' is non-assignable!",
                        attrs[attrName], newIsolateScopeDirective.name);
                    };
                    lastValue = isolateScope[scopeName] = parentGet(scope);
                    isolateScope.$watch(function parentValueWatch() {
                      var parentValue = parentGet(scope);
                      if (!compare(parentValue, isolateScope[scopeName])) {
                        // we are out of sync and need to copy
                        if (!compare(parentValue, lastValue)) {
                          // parent changed and it has precedence
                          isolateScope[scopeName] = parentValue;
                        } else {
                          // if the parent can be assigned then do so
                          parentSet(scope, parentValue = isolateScope[scopeName]);
                        }
                      }
                      return lastValue = parentValue;
                    }, null, parentGet.literal);
                    break;

                  case '&':
                    parentGet = $parse(attrs[attrName]);
                    isolateScope[scopeName] = function(locals) {
                      return parentGet(scope, locals);
                    };
                    break;

                  default:
                    throw $compileMinErr('iscp',
                        "Invalid isolate scope definition for directive '{0}'." +
                        " Definition: {... {1}: '{2}' ...}",
                      newIsolateScopeDirective.name, scopeName, definition);
                }
              });
            }
            transcludeFn = boundTranscludeFn && controllersBoundTransclude;
            if (controllerDirectives) {
              forEach(controllerDirectives, function(directive) {
                var locals = {
                  $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                  $element: $element,
                  $attrs: attrs,
                  $transclude: transcludeFn
                }, controllerInstance;

                controller = directive.controller;
                if (controller == '@') {
                  controller = attrs[directive.name];
                }

                controllerInstance = $controller(controller, locals);
                // For directives with element transclusion the element is a comment,
                // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
                // clean up (http://bugs.jquery.com/ticket/8335).
                // Instead, we save the controllers for the element in a local hash and attach to .data
                // later, once we have the actual element.
                elementControllers[directive.name] = controllerInstance;
                if (!hasElementTranscludeDirective) {
                  $element.data('$' + directive.name + 'Controller', controllerInstance);
                }

                if (directive.controllerAs) {
                  locals.$scope[directive.controllerAs] = controllerInstance;
                }
              });
            }

            // PRELINKING
            for(i = 0, ii = preLinkFns.length; i < ii; i++) {
              try {
                linkFn = preLinkFns[i];
                linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs,
                    linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
              } catch (e) {
                $exceptionHandler(e, startingTag($element));
              }
            }

            // RECURSION
            // We only pass the isolate scope, if the isolate directive has a template,
            // otherwise the child elements do not belong to the isolate directive.
            var scopeToChild = scope;
            if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
              scopeToChild = isolateScope;
            }
            childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

            // POSTLINKING
            for(i = postLinkFns.length - 1; i >= 0; i--) {
              try {
                linkFn = postLinkFns[i];
                linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs,
                    linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
              } catch (e) {
                $exceptionHandler(e, startingTag($element));
              }
            }

            // This is the function that is injected as `$transclude`.
            function controllersBoundTransclude(scope, cloneAttachFn) {
              var transcludeControllers;

              // no scope passed
              if (arguments.length < 2) {
                cloneAttachFn = scope;
                scope = undefined;
              }

              if (hasElementTranscludeDirective) {
                transcludeControllers = elementControllers;
              }

              return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers);
            }
          }
        }

        function markDirectivesAsIsolate(directives) {
          // mark all directives as needing isolate scope.
          for (var j = 0, jj = directives.length; j < jj; j++) {
            directives[j] = inherit(directives[j], {$$isolateScope: true});
          }
        }

        /**
         * looks up the directive and decorates it with exception handling and proper parameters. We
         * call this the boundDirective.
         *
         * @param {string} name name of the directive to look up.
         * @param {string} location The directive must be found in specific format.
         *   String containing any of theses characters:
         *
         *   * `E`: element name
         *   * `A': attribute
         *   * `C`: class
         *   * `M`: comment
         * @returns {boolean} true if directive was added.
         */
        function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
                              endAttrName) {
          if (name === ignoreDirective) return null;
          var match = null;
          if (hasDirectives.hasOwnProperty(name)) {
            for(var directive, directives = $injector.get(name + Suffix),
                  i = 0, ii = directives.length; i<ii; i++) {
              try {
                directive = directives[i];
                if ( (maxPriority === undefined || maxPriority > directive.priority) &&
                  directive.restrict.indexOf(location) != -1) {
                  if (startAttrName) {
                    directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
                  }
                  tDirectives.push(directive);
                  match = directive;
                }
              } catch(e) { $exceptionHandler(e); }
            }
          }
          return match;
        }


        /**
         * When the element is replaced with HTML template then the new attributes
         * on the template need to be merged with the existing attributes in the DOM.
         * The desired effect is to have both of the attributes present.
         *
         * @param {object} dst destination attributes (original DOM)
         * @param {object} src source attributes (from the directive template)
         */
        function mergeTemplateAttributes(dst, src) {
          var srcAttr = src.$attr,
            dstAttr = dst.$attr,
            $element = dst.$$element;

          // reapply the old attributes to the new element
          forEach(dst, function(value, key) {
            if (key.charAt(0) != '$') {
              if (src[key] && src[key] !== value) {
                value += (key === 'style' ? ';' : ' ') + src[key];
              }
              dst.$set(key, value, true, srcAttr[key]);
            }
          });

          // copy the new attributes on the old attrs object
          forEach(src, function(value, key) {
            if (key == 'class') {
              safeAddClass($element, value);
              dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
            } else if (key == 'style') {
              $element.attr('style', $element.attr('style') + ';' + value);
              dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
              // `dst` will never contain hasOwnProperty as DOM parser won't let it.
              // You will get an "InvalidCharacterError: DOM Exception 5" error if you
              // have an attribute like "has-own-property" or "data-has-own-property", etc.
            } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
              dst[key] = value;
              dstAttr[key] = srcAttr[key];
            }
          });
        }


        function compileTemplateUrl(directives, $compileNode, tAttrs,
                                    $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
          var linkQueue = [],
            afterTemplateNodeLinkFn,
            afterTemplateChildLinkFn,
            beforeTemplateCompileNode = $compileNode[0],
            origAsyncDirective = directives.shift(),
          // The fact that we have to copy and patch the directive seems wrong!
            derivedSyncDirective = extend({}, origAsyncDirective, {
              templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
            }),
            templateUrl = (isFunction(origAsyncDirective.templateUrl))
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl;

          $compileNode.empty();

          $http.get($sce.getTrustedResourceUrl(templateUrl), {cache: $templateCache}).
            success(function(content) {
              var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

              content = denormalizeTemplate(content);

              if (origAsyncDirective.replace) {
                if (jqLiteIsTextNode(content)) {
                  $template = [];
                } else {
                  $template = jqLite(trim(content));
                }
                compileNode = $template[0];

                if ($template.length != 1 || compileNode.nodeType !== 1) {
                  throw $compileMinErr('tplrt',
                    "Template for directive '{0}' must have exactly one root element. {1}",
                    origAsyncDirective.name, templateUrl);
                }

                tempTemplateAttrs = {$attr: {}};
                replaceWith($rootElement, $compileNode, compileNode);
                var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

                if (isObject(origAsyncDirective.scope)) {
                  markDirectivesAsIsolate(templateDirectives);
                }
                directives = templateDirectives.concat(directives);
                mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
              } else {
                compileNode = beforeTemplateCompileNode;
                $compileNode.html(content);
              }

              directives.unshift(derivedSyncDirective);

              afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
                childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
                previousCompileContext);
              forEach($rootElement, function(node, i) {
                if (node == compileNode) {
                  $rootElement[i] = $compileNode[0];
                }
              });
              afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);


              while(linkQueue.length) {
                var scope = linkQueue.shift(),
                  beforeTemplateLinkNode = linkQueue.shift(),
                  linkRootElement = linkQueue.shift(),
                  boundTranscludeFn = linkQueue.shift(),
                  linkNode = $compileNode[0];

                if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                  var oldClasses = beforeTemplateLinkNode.className;

                  if (!(previousCompileContext.hasElementTranscludeDirective &&
                    origAsyncDirective.replace)) {
                    // it was cloned therefore we have to clone as well.
                    linkNode = jqLiteClone(compileNode);
                  }

                  replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

                  // Copy in CSS classes from original node
                  safeAddClass(jqLite(linkNode), oldClasses);
                }
                if (afterTemplateNodeLinkFn.transclude) {
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude);
                } else {
                  childBoundTranscludeFn = boundTranscludeFn;
                }
                afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
                  childBoundTranscludeFn);
              }
              linkQueue = null;
            }).
            error(function(response, code, headers, config) {
              throw $compileMinErr('tpload', 'Failed to load template: {0}', config.url);
            });

          return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
            if (linkQueue) {
              linkQueue.push(scope);
              linkQueue.push(node);
              linkQueue.push(rootElement);
              linkQueue.push(boundTranscludeFn);
            } else {
              afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, boundTranscludeFn);
            }
          };
        }


        /**
         * Sorting function for bound directives.
         */
        function byPriority(a, b) {
          var diff = b.priority - a.priority;
          if (diff !== 0) return diff;
          if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
          return a.index - b.index;
        }


        function assertNoDuplicate(what, previousDirective, directive, element) {
          if (previousDirective) {
            throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}',
              previousDirective.name, directive.name, what, startingTag(element));
          }
        }


        function addTextInterpolateDirective(directives, text) {
          var interpolateFn = $interpolate(text, true);
          if (interpolateFn) {
            directives.push({
              priority: 0,
              compile: valueFn(function textInterpolateLinkFn(scope, node) {
                var parent = node.parent(),
                  bindings = parent.data('$binding') || [];
                bindings.push(interpolateFn);
                safeAddClass(parent.data('$binding', bindings), 'ng-binding');
                scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                  node[0].nodeValue = value;
                });
              })
            });
          }
        }


        function getTrustedContext(node, attrNormalizedName) {
          if (attrNormalizedName == "srcdoc") {
            return $sce.HTML;
          }
          var tag = nodeName_(node);
          // maction[xlink:href] can source SVG.  It's not limited to <maction>.
          if (attrNormalizedName == "xlinkHref" ||
            (tag == "FORM" && attrNormalizedName == "action") ||
            (tag != "IMG" && (attrNormalizedName == "src" ||
              attrNormalizedName == "ngSrc"))) {
            return $sce.RESOURCE_URL;
          }
        }


        function addAttrInterpolateDirective(node, directives, value, name) {
          var interpolateFn = $interpolate(value, true);

          // no interpolation found -> ignore
          if (!interpolateFn) return;


          if (name === "multiple" && nodeName_(node) === "SELECT") {
            throw $compileMinErr("selmulti",
              "Binding to the 'multiple' attribute is not supported. Element: {0}",
              startingTag(node));
          }

          directives.push({
            priority: 100,
            compile: function() {
              return {
                pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                  var $$observers = (attr.$$observers || (attr.$$observers = {}));

                  if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                    throw $compileMinErr('nodomevents',
                        "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
                        "ng- versions (such as ng-click instead of onclick) instead.");
                  }

                  // we need to interpolate again, in case the attribute value has been updated
                  // (e.g. by another directive's compile function)
                  interpolateFn = $interpolate(attr[name], true, getTrustedContext(node, name));

                  // if attribute was updated so that there is no interpolation going on we don't want to
                  // register any observers
                  if (!interpolateFn) return;

                  // TODO(i): this should likely be attr.$set(name, iterpolateFn(scope) so that we reset the
                  // actual attr value
                  attr[name] = interpolateFn(scope);
                  ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                  (attr.$$observers && attr.$$observers[name].$$scope || scope).
                    $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                      //special case for class attribute addition + removal
                      //so that class changes can tap into the animation
                      //hooks provided by the $animate service. Be sure to
                      //skip animations when the first digest occurs (when
                      //both the new and the old values are the same) since
                      //the CSS classes are the non-interpolated values
                      if(name === 'class' && newValue != oldValue) {
                        attr.$updateClass(newValue, oldValue);
                      } else {
                        attr.$set(name, newValue);
                      }
                    });
                }
              };
            }
          });
        }


        /**
         * This is a special jqLite.replaceWith, which can replace items which
         * have no parents, provided that the containing jqLite collection is provided.
         *
         * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
         *                               in the root of the tree.
         * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
         *                                  the shell, but replace its DOM node reference.
         * @param {Node} newNode The new DOM node.
         */
        function replaceWith($rootElement, elementsToRemove, newNode) {
          var firstElementToRemove = elementsToRemove[0],
            removeCount = elementsToRemove.length,
            parent = firstElementToRemove.parentNode,
            i, ii;

          if ($rootElement) {
            for(i = 0, ii = $rootElement.length; i < ii; i++) {
              if ($rootElement[i] == firstElementToRemove) {
                $rootElement[i++] = newNode;
                for (var j = i, j2 = j + removeCount - 1,
                       jj = $rootElement.length;
                     j < jj; j++, j2++) {
                  if (j2 < jj) {
                    $rootElement[j] = $rootElement[j2];
                  } else {
                    delete $rootElement[j];
                  }
                }
                $rootElement.length -= removeCount - 1;
                break;
              }
            }
          }

          if (parent) {
            parent.replaceChild(newNode, firstElementToRemove);
          }
          var fragment = document.createDocumentFragment();
          fragment.appendChild(firstElementToRemove);
          newNode[jqLite.expando] = firstElementToRemove[jqLite.expando];
          for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
            var element = elementsToRemove[k];
            jqLite(element).remove(); // must do this way to clean up expando
            fragment.appendChild(element);
            delete elementsToRemove[k];
          }

          elementsToRemove[0] = newNode;
          elementsToRemove.length = 1;
        }


        function cloneAndAnnotateFn(fn, annotation) {
          return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
        }
      }];
  }

  var PREFIX_REGEXP = /^(x[\:\-_]|data[\:\-_])/i;
  /**
   * Converts all accepted directives format into proper directive name.
   * All of these will become 'myDirective':
   *   my:Directive
   *   my-directive
   *   x-my-directive
   *   data-my:directive
   *
   * Also there is special case for Moz prefix starting with upper case letter.
   * @param name Name to normalize
   */
  function directiveNormalize(name) {
    return camelCase(name.replace(PREFIX_REGEXP, ''));
  }

  /**
   * @ngdoc type
   * @name $compile.directive.Attributes
   *
   * @description
   * A shared object between directive compile / linking functions which contains normalized DOM
   * element attributes. The values reflect current binding state `{{ }}`. The normalization is
   * needed since all of these are treated as equivalent in Angular:
   *
   * ```
   *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
   * ```
   */

  /**
   * @ngdoc property
   * @name $compile.directive.Attributes#$attr
   * @returns {object} A map of DOM element attribute names to the normalized name. This is
   *                   needed to do reverse lookup from normalized name back to actual name.
   */


  /**
   * @ngdoc method
   * @name $compile.directive.Attributes#$set
   * @kind function
   *
   * @description
   * Set DOM element attribute value.
   *
   *
   * @param {string} name Normalized element attribute name of the property to modify. The name is
   *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
   *          property to the original name.
   * @param {string} value Value to set the attribute to. The value can be an interpolated string.
   */



  /**
   * Closure compiler type information
   */

  function nodesetLinkingFn(
    /* angular.Scope */ scope,
    /* NodeList */ nodeList,
    /* Element */ rootElement,
    /* function(Function) */ boundTranscludeFn
    ){}

  function directiveLinkingFn(
    /* nodesetLinkingFn */ nodesetLinkingFn,
    /* angular.Scope */ scope,
    /* Node */ node,
    /* Element */ rootElement,
    /* function(Function) */ boundTranscludeFn
    ){}

  function tokenDifference(str1, str2) {
    var values = '',
      tokens1 = str1.split(/\s+/),
      tokens2 = str2.split(/\s+/);

    outer:
      for(var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for(var j = 0; j < tokens2.length; j++) {
          if(token == tokens2[j]) continue outer;
        }
        values += (values.length > 0 ? ' ' : '') + token;
      }
    return values;
  }

  /**
   * @ngdoc provider
   * @name $controllerProvider
   * @description
   * The {@link ng.$controller $controller service} is used by Angular to create new
   * controllers.
   *
   * This provider allows controller registration via the
   * {@link ng.$controllerProvider#register register} method.
   */
  function $ControllerProvider() {
    var controllers = {},
      CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;


    /**
     * @ngdoc method
     * @name $controllerProvider#register
     * @param {string|Object} name Controller name, or an object map of controllers where the keys are
     *    the names and the values are the constructors.
     * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
     *    annotations in the array notation).
     */
    this.register = function(name, constructor) {
      assertNotHasOwnProperty(name, 'controller');
      if (isObject(name)) {
        extend(controllers, name);
      } else {
        controllers[name] = constructor;
      }
    };


    this.$get = ['$injector', '$window', function($injector, $window) {

      /**
       * @ngdoc service
       * @name $controller
       * @requires $injector
       *
       * @param {Function|string} constructor If called with a function then it's considered to be the
       *    controller constructor function. Otherwise it's considered to be a string which is used
       *    to retrieve the controller constructor using the following steps:
       *
       *    * check if a controller with given name is registered via `$controllerProvider`
       *    * check if evaluating the string on the current scope returns a constructor
       *    * check `window[constructor]` on the global `window` object
       *
       * @param {Object} locals Injection locals for Controller.
       * @return {Object} Instance of given controller.
       *
       * @description
       * `$controller` service is responsible for instantiating controllers.
       *
       * It's just a simple call to {@link auto.$injector $injector}, but extracted into
       * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
       */
      return function(expression, locals) {
        var instance, match, constructor, identifier;

        if(isString(expression)) {
          match = expression.match(CNTRL_REG),
            constructor = match[1],
            identifier = match[3];
          expression = controllers.hasOwnProperty(constructor)
            ? controllers[constructor]
            : getter(locals.$scope, constructor, true) || getter($window, constructor, true);

          assertArgFn(expression, constructor, true);
        }

        instance = $injector.instantiate(expression, locals);

        if (identifier) {
          if (!(locals && typeof locals.$scope == 'object')) {
            throw minErr('$controller')('noscp',
              "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
                constructor || expression.name, identifier);
          }

          locals.$scope[identifier] = instance;
        }

        return instance;
      };
    }];
  }

  /**
   * @ngdoc service
   * @name $document
   * @requires $window
   *
   * @description
   * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
   *
   * @example
   <example>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <p>$document title: <b ng-bind="title"></b></p>
   <p>window.document title: <b ng-bind="windowTitle"></b></p>
   </div>
   </file>
   <file name="script.js">
   function MainCtrl($scope, $document) {
         $scope.title = $document[0].title;
         $scope.windowTitle = angular.element(window.document)[0].title;
       }
   </file>
   </example>
   */
  function $DocumentProvider(){
    this.$get = ['$window', function(window){
      return jqLite(window.document);
    }];
  }

  /**
   * @ngdoc service
   * @name $exceptionHandler
   * @requires ng.$log
   *
   * @description
   * Any uncaught exception in angular expressions is delegated to this service.
   * The default implementation simply delegates to `$log.error` which logs it into
   * the browser console.
   *
   * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
   * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
   *
   * ## Example:
   *
   * ```js
   *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function () {
 *     return function (exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
   * ```
   *
   * This example will override the normal action of `$exceptionHandler`, to make angular
   * exceptions fail hard when they happen, instead of just logging to the console.
   *
   * @param {Error} exception Exception associated with the error.
   * @param {string=} cause optional information about the context in which
   *       the error was thrown.
   *
   */
  function $ExceptionHandlerProvider() {
    this.$get = ['$log', function($log) {
      return function(exception, cause) {
        $log.error.apply($log, arguments);
      };
    }];
  }

  /**
   * Parse headers into key value object
   *
   * @param {string} headers Raw headers as a string
   * @returns {Object} Parsed headers as key value object
   */
  function parseHeaders(headers) {
    var parsed = {}, key, val, i;

    if (!headers) return parsed;

    forEach(headers.split('\n'), function(line) {
      i = line.indexOf(':');
      key = lowercase(trim(line.substr(0, i)));
      val = trim(line.substr(i + 1));

      if (key) {
        if (parsed[key]) {
          parsed[key] += ', ' + val;
        } else {
          parsed[key] = val;
        }
      }
    });

    return parsed;
  }


  /**
   * Returns a function that provides access to parsed headers.
   *
   * Headers are lazy parsed when first requested.
   * @see parseHeaders
   *
   * @param {(string|Object)} headers Headers to provide access to.
   * @returns {function(string=)} Returns a getter function which if called with:
   *
   *   - if called with single an argument returns a single header value or null
   *   - if called with no arguments returns an object containing all headers.
   */
  function headersGetter(headers) {
    var headersObj = isObject(headers) ? headers : undefined;

    return function(name) {
      if (!headersObj) headersObj =  parseHeaders(headers);

      if (name) {
        return headersObj[lowercase(name)] || null;
      }

      return headersObj;
    };
  }


  /**
   * Chain all given functions
   *
   * This function is used for both request and response transforming
   *
   * @param {*} data Data to transform.
   * @param {function(string=)} headers Http headers getter fn.
   * @param {(Function|Array.<Function>)} fns Function or an array of functions.
   * @returns {*} Transformed data.
   */
  function transformData(data, headers, fns) {
    if (isFunction(fns))
      return fns(data, headers);

    forEach(fns, function(fn) {
      data = fn(data, headers);
    });

    return data;
  }


  function isSuccess(status) {
    return 200 <= status && status < 300;
  }


  function $HttpProvider() {
    var JSON_START = /^\s*(\[|\{[^\{])/,
      JSON_END = /[\}\]]\s*$/,
      PROTECTION_PREFIX = /^\)\]\}',?\n/,
      CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': 'application/json;charset=utf-8'};

    var defaults = this.defaults = {
      // transform incoming response data
      transformResponse: [function(data) {
        if (isString(data)) {
          // strip json vulnerability protection prefix
          data = data.replace(PROTECTION_PREFIX, '');
          if (JSON_START.test(data) && JSON_END.test(data))
            data = fromJson(data);
        }
        return data;
      }],

      // transform outgoing request data
      transformRequest: [function(d) {
        return isObject(d) && !isFile(d) && !isBlob(d) ? toJson(d) : d;
      }],

      // default headers
      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        },
        post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
        put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
        patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
      },

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN'
    };

    /**
     * Are ordered by request, i.e. they are applied in the same order as the
     * array, on request, but reverse order, on response.
     */
    var interceptorFactories = this.interceptors = [];

    /**
     * For historical reasons, response interceptors are ordered by the order in which
     * they are applied to the response. (This is the opposite of interceptorFactories)
     */
    var responseInterceptorFactories = this.responseInterceptors = [];

    this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',
      function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {

        var defaultCache = $cacheFactory('$http');

        /**
         * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
         * The reversal is needed so that we can build up the interception chain around the
         * server request.
         */
        var reversedInterceptors = [];

        forEach(interceptorFactories, function(interceptorFactory) {
          reversedInterceptors.unshift(isString(interceptorFactory)
            ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
        });

        forEach(responseInterceptorFactories, function(interceptorFactory, index) {
          var responseFn = isString(interceptorFactory)
            ? $injector.get(interceptorFactory)
            : $injector.invoke(interceptorFactory);

          /**
           * Response interceptors go before "around" interceptors (no real reason, just
           * had to pick one.) But they are already reversed, so we can't use unshift, hence
           * the splice.
           */
          reversedInterceptors.splice(index, 0, {
            response: function(response) {
              return responseFn($q.when(response));
            },
            responseError: function(response) {
              return responseFn($q.reject(response));
            }
          });
        });


        /**
         * @ngdoc service
         * @kind function
         * @name $http
         * @requires ng.$httpBackend
         * @requires $cacheFactory
         * @requires $rootScope
         * @requires $q
         * @requires $injector
         *
         * @description
         * The `$http` service is a core Angular service that facilitates communication with the remote
         * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
         * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
         *
         * For unit testing applications that use `$http` service, see
         * {@link ngMock.$httpBackend $httpBackend mock}.
         *
         * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
         *
         * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
         * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
         * it is important to familiarize yourself with these APIs and the guarantees they provide.
         *
         *
         * # General usage
         * The `$http` service is a function which takes a single argument — a configuration object —
         * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
         * with two $http specific methods: `success` and `error`.
         *
         * ```js
         *   $http({method: 'GET', url: '/someUrl'}).
         *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
         *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
         * ```
         *
         * Since the returned value of calling the $http function is a `promise`, you can also use
         * the `then` method to register callbacks, and these callbacks will receive a single argument –
         * an object representing the response. See the API signature and type info below for more
         * details.
         *
         * A response status code between 200 and 299 is considered a success status and
         * will result in the success callback being called. Note that if the response is a redirect,
         * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
         * called for such responses.
         *
         * # Writing Unit Tests that use $http
         * When unit testing (using {@link ngMock ngMock}), it is necessary to call
         * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
         * request using trained responses.
         *
         * ```
         * $httpBackend.expectGET(...);
         * $http.get(...);
         * $httpBackend.flush();
         * ```
         *
         * # Shortcut methods
         *
         * Shortcut methods are also available. All shortcut methods require passing in the URL, and
         * request data must be passed in for POST/PUT requests.
         *
         * ```js
         *   $http.get('/someUrl').success(successCallback);
         *   $http.post('/someUrl', data).success(successCallback);
         * ```
         *
         * Complete list of shortcut methods:
         *
         * - {@link ng.$http#get $http.get}
         * - {@link ng.$http#head $http.head}
         * - {@link ng.$http#post $http.post}
         * - {@link ng.$http#put $http.put}
         * - {@link ng.$http#delete $http.delete}
         * - {@link ng.$http#jsonp $http.jsonp}
         *
         *
         * # Setting HTTP Headers
         *
         * The $http service will automatically add certain HTTP headers to all requests. These defaults
         * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
         * object, which currently contains this default configuration:
         *
         * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
         *   - `Accept: application/json, text/plain, * / *`
         * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
         *   - `Content-Type: application/json`
         * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
         *   - `Content-Type: application/json`
         *
         * To add or overwrite these defaults, simply add or remove a property from these configuration
         * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
         * with the lowercased HTTP method name as the key, e.g.
         * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.
         *
         * The defaults can also be set at runtime via the `$http.defaults` object in the same
         * fashion. For example:
         *
         * ```
         * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
     * });
         * ```
         *
         * In addition, you can supply a `headers` property in the config object passed when
         * calling `$http(config)`, which overrides the defaults without changing them globally.
         *
         *
         * # Transforming Requests and Responses
         *
         * Both requests and responses can be transformed using transform functions. By default, Angular
         * applies these transformations:
         *
         * Request transformations:
         *
         * - If the `data` property of the request configuration object contains an object, serialize it
         *   into JSON format.
         *
         * Response transformations:
         *
         *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
         *  - If JSON response is detected, deserialize it using a JSON parser.
         *
         * To globally augment or override the default transforms, modify the
         * `$httpProvider.defaults.transformRequest` and `$httpProvider.defaults.transformResponse`
         * properties. These properties are by default an array of transform functions, which allows you
         * to `push` or `unshift` a new transformation function into the transformation chain. You can
         * also decide to completely override any default transformations by assigning your
         * transformation functions to these properties directly without the array wrapper.  These defaults
         * are again available on the $http factory at run-time, which may be useful if you have run-time
         * services you wish to be involved in your transformations.
         *
         * Similarly, to locally override the request/response transforms, augment the
         * `transformRequest` and/or `transformResponse` properties of the configuration object passed
         * into `$http`.
         *
         *
         * # Caching
         *
         * To enable caching, set the request configuration `cache` property to `true` (to use default
         * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
         * When the cache is enabled, `$http` stores the response from the server in the specified
         * cache. The next time the same request is made, the response is served from the cache without
         * sending a request to the server.
         *
         * Note that even if the response is served from cache, delivery of the data is asynchronous in
         * the same way that real requests are.
         *
         * If there are multiple GET requests for the same URL that should be cached using the same
         * cache, but the cache is not populated yet, only one request to the server will be made and
         * the remaining requests will be fulfilled using the response from the first request.
         *
         * You can change the default cache to a new object (built with
         * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
         * {@link ng.$http#properties_defaults `$http.defaults.cache`} property. All requests who set
         * their `cache` property to `true` will now use this cache object.
         *
         * If you set the default cache to `false` then only requests that specify their own custom
         * cache object will be cached.
         *
         * # Interceptors
         *
         * Before you start creating interceptors, be sure to understand the
         * {@link ng.$q $q and deferred/promise APIs}.
         *
         * For purposes of global error handling, authentication, or any kind of synchronous or
         * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
         * able to intercept requests before they are handed to the server and
         * responses before they are handed over to the application code that
         * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
         *
         * The interceptors are service factories that are registered with the `$httpProvider` by
         * adding them to the `$httpProvider.interceptors` array. The factory is called and
         * injected with dependencies (if specified) and returns the interceptor.
         *
         * There are two kinds of interceptors (and two kinds of rejection interceptors):
         *
         *   * `request`: interceptors get called with a http `config` object. The function is free to
         *     modify the `config` object or create a new one. The function needs to return the `config`
         *     object directly, or a promise containing the `config` or a new `config` object.
         *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
         *     resolved with a rejection.
         *   * `response`: interceptors get called with http `response` object. The function is free to
         *     modify the `response` object or create a new one. The function needs to return the `response`
         *     object directly, or as a promise containing the `response` or a new `response` object.
         *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
         *     resolved with a rejection.
         *
         *
         * ```js
         *   // register the interceptor as a service
         *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
         *
         *   $httpProvider.interceptors.push('myHttpInterceptor');
         *
         *
         *   // alternatively, register the interceptor via an anonymous factory
         *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
         * ```
         *
         * # Response interceptors (DEPRECATED)
         *
         * Before you start creating interceptors, be sure to understand the
         * {@link ng.$q $q and deferred/promise APIs}.
         *
         * For purposes of global error handling, authentication or any kind of synchronous or
         * asynchronous preprocessing of received responses, it is desirable to be able to intercept
         * responses for http requests before they are handed over to the application code that
         * initiated these requests. The response interceptors leverage the {@link ng.$q
     * promise apis} to fulfil this need for both synchronous and asynchronous preprocessing.
         *
         * The interceptors are service factories that are registered with the $httpProvider by
         * adding them to the `$httpProvider.responseInterceptors` array. The factory is called and
         * injected with dependencies (if specified) and returns the interceptor  — a function that
         * takes a {@link ng.$q promise} and returns the original or a new promise.
         *
         * ```js
         *   // register the interceptor as a service
         *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       return promise.then(function(response) {
     *         // do something on success
     *         return response;
     *       }, function(response) {
     *         // do something on error
     *         if (canRecover(response)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(response);
     *       });
     *     }
     *   });
         *
         *   $httpProvider.responseInterceptors.push('myHttpInterceptor');
         *
         *
         *   // register the interceptor via an anonymous factory
         *   $httpProvider.responseInterceptors.push(function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       // same as above
     *     }
     *   });
         * ```
         *
         *
         * # Security Considerations
         *
         * When designing web applications, consider security threats from:
         *
         * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
         * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
         *
         * Both server and the client must cooperate in order to eliminate these threats. Angular comes
         * pre-configured with strategies that address these issues, but for this to work backend server
         * cooperation is required.
         *
         * ## JSON Vulnerability Protection
         *
         * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
         * allows third party website to turn your JSON resource URL into
         * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
         * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
         * Angular will automatically strip the prefix before processing it as JSON.
         *
         * For example if your server needs to return:
         * ```js
         * ['one','two']
         * ```
         *
         * which is vulnerable to attack, your server can return:
         * ```js
         * )]}',
         * ['one','two']
         * ```
         *
         * Angular will strip the prefix, before processing the JSON.
         *
         *
         * ## Cross Site Request Forgery (XSRF) Protection
         *
         * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
         * an unauthorized site can gain your user's private data. Angular provides a mechanism
         * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
         * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
         * JavaScript that runs on your domain could read the cookie, your server can be assured that
         * the XHR came from JavaScript running on your domain. The header will not be set for
         * cross-domain requests.
         *
         * To take advantage of this, your server needs to set a token in a JavaScript readable session
         * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
         * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
         * that only JavaScript running on your domain could have sent the request. The token must be
         * unique for each user and must be verifiable by the server (to prevent the JavaScript from
         * making up its own tokens). We recommend that the token is a digest of your site's
         * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography))
         * for added security.
         *
         * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
         * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
         * or the per-request config object.
         *
         *
         * @param {object} config Object describing the request to be made and how it should be
         *    processed. The object has following properties:
         *
         *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
         *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
         *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
         *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
         *      JSONified.
         *    - **data** – `{string|Object}` – Data to be sent as the request message data.
         *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
         *      HTTP headers to send to the server. If the return value of a function is null, the
         *      header will not be sent.
         *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
         *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
         *    - **transformRequest** –
         *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
         *      transform function or an array of such functions. The transform function takes the http
         *      request body and headers and returns its transformed (typically serialized) version.
         *    - **transformResponse** –
         *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
         *      transform function or an array of such functions. The transform function takes the http
         *      response body and headers and returns its transformed (typically deserialized) version.
         *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
         *      GET request, otherwise if a cache instance built with
         *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
         *      caching.
         *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
         *      that should abort the request when resolved.
         *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
         *      XHR object. See [requests with credentials]https://developer.mozilla.org/en/http_access_control#section_5
         *      for more information.
         *    - **responseType** - `{string}` - see
         *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
         *
         * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
         *   standard `then` method and two http specific methods: `success` and `error`. The `then`
         *   method takes two arguments a success and an error callback which will be called with a
         *   response object. The `success` and `error` methods take a single argument - a function that
         *   will be called when the request succeeds or fails respectively. The arguments passed into
         *   these functions are destructured representation of the response object passed into the
         *   `then` method. The response object has these properties:
         *
         *   - **data** – `{string|Object}` – The response body transformed with the transform
         *     functions.
         *   - **status** – `{number}` – HTTP status code of the response.
         *   - **headers** – `{function([headerName])}` – Header getter function.
         *   - **config** – `{Object}` – The configuration object that was used to generate the request.
         *   - **statusText** – `{string}` – HTTP status text of the response.
         *
         * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
         *   requests. This is primarily meant to be used for debugging purposes.
         *
         *
         * @example
         <example>
         <file name="index.html">
         <div ng-controller="FetchCtrl">
         <select ng-model="method">
         <option>GET</option>
         <option>JSONP</option>
         </select>
         <input type="text" ng-model="url" size="80"/>
         <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
         <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
         <button id="samplejsonpbtn"
         ng-click="updateModel('JSONP',
         'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
         Sample JSONP
         </button>
         <button id="invalidjsonpbtn"
         ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
         Invalid JSONP
         </button>
         <pre>http status code: {{status}}</pre>
         <pre>http response data: {{data}}</pre>
         </div>
         </file>
         <file name="script.js">
         function FetchCtrl($scope, $http, $templateCache) {
    $scope.method = 'GET';
    $scope.url = 'http-hello.html';

    $scope.fetch = function() {
      $scope.code = null;
      $scope.response = null;

      $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
        success(function(data, status) {
          $scope.status = status;
          $scope.data = data;
        }).
        error(function(data, status) {
          $scope.data = data || "Request failed";
          $scope.status = status;
      });
    };

    $scope.updateModel = function(method, url) {
      $scope.method = method;
      $scope.url = url;
    };
  }
         </file>
         <file name="http-hello.html">
         Hello, $http!
         </file>
         <file name="protractor.js" type="protractor">
         var status = element(by.binding('status'));
         var data = element(by.binding('data'));
         var fetchBtn = element(by.id('fetchbtn'));
         var sampleGetBtn = element(by.id('samplegetbtn'));
         var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
         var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

         it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

         it('should make a JSONP request to angularjs.org', function() {
    sampleJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Super Hero!/);
  });

         it('should make JSONP request to invalid URL and invoke the error handler',
         function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
         </file>
         </example>
         */
        function $http(requestConfig) {
          var config = {
            method: 'get',
            transformRequest: defaults.transformRequest,
            transformResponse: defaults.transformResponse
          };
          var headers = mergeHeaders(requestConfig);

          extend(config, requestConfig);
          config.headers = headers;
          config.method = uppercase(config.method);

          var xsrfValue = urlIsSameOrigin(config.url)
            ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]
            : undefined;
          if (xsrfValue) {
            headers[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
          }


          var serverRequest = function(config) {
            headers = config.headers;
            var reqData = transformData(config.data, headersGetter(headers), config.transformRequest);

            // strip content-type if data is undefined
            if (isUndefined(config.data)) {
              forEach(headers, function(value, header) {
                if (lowercase(header) === 'content-type') {
                  delete headers[header];
                }
              });
            }

            if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
              config.withCredentials = defaults.withCredentials;
            }

            // send request
            return sendReq(config, reqData, headers).then(transformResponse, transformResponse);
          };

          var chain = [serverRequest, undefined];
          var promise = $q.when(config);

          // apply interceptors
          forEach(reversedInterceptors, function(interceptor) {
            if (interceptor.request || interceptor.requestError) {
              chain.unshift(interceptor.request, interceptor.requestError);
            }
            if (interceptor.response || interceptor.responseError) {
              chain.push(interceptor.response, interceptor.responseError);
            }
          });

          while(chain.length) {
            var thenFn = chain.shift();
            var rejectFn = chain.shift();

            promise = promise.then(thenFn, rejectFn);
          }

          promise.success = function(fn) {
            promise.then(function(response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };

          promise.error = function(fn) {
            promise.then(null, function(response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };

          return promise;

          function transformResponse(response) {
            // make a copy since the response must be cacheable
            var resp = extend({}, response, {
              data: transformData(response.data, response.headers, config.transformResponse)
            });
            return (isSuccess(response.status))
              ? resp
              : $q.reject(resp);
          }

          function mergeHeaders(config) {
            var defHeaders = defaults.headers,
              reqHeaders = extend({}, config.headers),
              defHeaderName, lowercaseDefHeaderName, reqHeaderName;

            defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

            // execute if header value is function
            execHeaders(defHeaders);
            execHeaders(reqHeaders);

            // using for-in instead of forEach to avoid unecessary iteration after header has been found
            defaultHeadersIteration:
              for (defHeaderName in defHeaders) {
                lowercaseDefHeaderName = lowercase(defHeaderName);

                for (reqHeaderName in reqHeaders) {
                  if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                    continue defaultHeadersIteration;
                  }
                }

                reqHeaders[defHeaderName] = defHeaders[defHeaderName];
              }

            return reqHeaders;

            function execHeaders(headers) {
              var headerContent;

              forEach(headers, function(headerFn, header) {
                if (isFunction(headerFn)) {
                  headerContent = headerFn();
                  if (headerContent != null) {
                    headers[header] = headerContent;
                  } else {
                    delete headers[header];
                  }
                }
              });
            }
          }
        }

        $http.pendingRequests = [];

        /**
         * @ngdoc method
         * @name $http#get
         *
         * @description
         * Shortcut method to perform `GET` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */

        /**
         * @ngdoc method
         * @name $http#delete
         *
         * @description
         * Shortcut method to perform `DELETE` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */

        /**
         * @ngdoc method
         * @name $http#head
         *
         * @description
         * Shortcut method to perform `HEAD` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */

        /**
         * @ngdoc method
         * @name $http#jsonp
         *
         * @description
         * Shortcut method to perform `JSONP` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request.
         *                     Should contain `JSON_CALLBACK` string.
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */
        createShortMethods('get', 'delete', 'head', 'jsonp');

        /**
         * @ngdoc method
         * @name $http#post
         *
         * @description
         * Shortcut method to perform `POST` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {*} data Request content
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */

        /**
         * @ngdoc method
         * @name $http#put
         *
         * @description
         * Shortcut method to perform `PUT` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {*} data Request content
         * @param {Object=} config Optional configuration object
         * @returns {HttpPromise} Future object
         */
        createShortMethodsWithData('post', 'put');

        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
        $http.defaults = defaults;


        return $http;


        function createShortMethods(names) {
          forEach(arguments, function(name) {
            $http[name] = function(url, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url
              }));
            };
          });
        }


        function createShortMethodsWithData(name) {
          forEach(arguments, function(name) {
            $http[name] = function(url, data, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url,
                data: data
              }));
            };
          });
        }


        /**
         * Makes the request.
         *
         * !!! ACCESSES CLOSURE VARS:
         * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
         */
        function sendReq(config, reqData, reqHeaders) {
          var deferred = $q.defer(),
            promise = deferred.promise,
            cache,
            cachedResp,
            url = buildUrl(config.url, config.params);

          $http.pendingRequests.push(config);
          promise.then(removePendingReq, removePendingReq);


          if ((config.cache || defaults.cache) && config.cache !== false && config.method == 'GET') {
            cache = isObject(config.cache) ? config.cache
              : isObject(defaults.cache) ? defaults.cache
              : defaultCache;
          }

          if (cache) {
            cachedResp = cache.get(url);
            if (isDefined(cachedResp)) {
              if (cachedResp.then) {
                // cached request has already been sent, but there is no response yet
                cachedResp.then(removePendingReq, removePendingReq);
                return cachedResp;
              } else {
                // serving from cache
                if (isArray(cachedResp)) {
                  resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
                } else {
                  resolvePromise(cachedResp, 200, {}, 'OK');
                }
              }
            } else {
              // put the promise for the non-transformed response into cache as a placeholder
              cache.put(url, promise);
            }
          }

          // if we won't have the response in cache, send the request to the backend
          if (isUndefined(cachedResp)) {
            $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
              config.withCredentials, config.responseType);
          }

          return promise;


          /**
           * Callback registered to $httpBackend():
           *  - caches the response if desired
           *  - resolves the raw $http promise
           *  - calls $apply
           */
          function done(status, response, headersString, statusText) {
            if (cache) {
              if (isSuccess(status)) {
                cache.put(url, [status, response, parseHeaders(headersString), statusText]);
              } else {
                // remove promise from the cache
                cache.remove(url);
              }
            }

            resolvePromise(response, status, headersString, statusText);
            if (!$rootScope.$$phase) $rootScope.$apply();
          }


          /**
           * Resolves the raw $http promise.
           */
          function resolvePromise(response, status, headers, statusText) {
            // normalize internal statuses to 0
            status = Math.max(status, 0);

            (isSuccess(status) ? deferred.resolve : deferred.reject)({
              data: response,
              status: status,
              headers: headersGetter(headers),
              config: config,
              statusText : statusText
            });
          }


          function removePendingReq() {
            var idx = indexOf($http.pendingRequests, config);
            if (idx !== -1) $http.pendingRequests.splice(idx, 1);
          }
        }


        function buildUrl(url, params) {
          if (!params) return url;
          var parts = [];
          forEachSorted(params, function(value, key) {
            if (value === null || isUndefined(value)) return;
            if (!isArray(value)) value = [value];

            forEach(value, function(v) {
              if (isObject(v)) {
                v = toJson(v);
              }
              parts.push(encodeUriQuery(key) + '=' +
                encodeUriQuery(v));
            });
          });
          if(parts.length > 0) {
            url += ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');
          }
          return url;
        }


      }];
  }

  function createXhr(method) {
    //if IE and the method is not RFC2616 compliant, or if XMLHttpRequest
    //is not available, try getting an ActiveXObject. Otherwise, use XMLHttpRequest
    //if it is available
    if (msie <= 8 && (!method.match(/^(get|post|head|put|delete|options)$/i) ||
      !window.XMLHttpRequest)) {
      return new window.ActiveXObject("Microsoft.XMLHTTP");
    } else if (window.XMLHttpRequest) {
      return new window.XMLHttpRequest();
    }

    throw minErr('$httpBackend')('noxhr', "This browser does not support XMLHttpRequest.");
  }

  /**
   * @ngdoc service
   * @name $httpBackend
   * @requires $window
   * @requires $document
   *
   * @description
   * HTTP backend used by the {@link ng.$http service} that delegates to
   * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
   *
   * You should never need to use this service directly, instead use the higher-level abstractions:
   * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
   *
   * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
   */
  function $HttpBackendProvider() {
    this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {
      return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
    }];
  }

  function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
    var ABORTED = -1;

    // TODO(vojta): fix the signature
    return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
      var status;
      $browser.$$incOutstandingRequestCount();
      url = url || $browser.url();

      if (lowercase(method) == 'jsonp') {
        var callbackId = '_' + (callbacks.counter++).toString(36);
        callbacks[callbackId] = function(data) {
          callbacks[callbackId].data = data;
          callbacks[callbackId].called = true;
        };

        var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
          callbackId, function(status, text) {
            completeRequest(callback, status, callbacks[callbackId].data, "", text);
            callbacks[callbackId] = noop;
          });
      } else {

        var xhr = createXhr(method);

        xhr.open(method, url, true);
        forEach(headers, function(value, key) {
          if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
          }
        });

        // In IE6 and 7, this might be called synchronously when xhr.send below is called and the
        // response is in the cache. the promise api will ensure that to the app code the api is
        // always async
        xhr.onreadystatechange = function() {
          // onreadystatechange might get called multiple times with readyState === 4 on mobile webkit caused by
          // xhrs that are resolved while the app is in the background (see #5426).
          // since calling completeRequest sets the `xhr` variable to null, we just check if it's not null before
          // continuing
          //
          // we can't set xhr.onreadystatechange to undefined or delete it because that breaks IE8 (method=PATCH) and
          // Safari respectively.
          if (xhr && xhr.readyState == 4) {
            var responseHeaders = null,
              response = null;

            if(status !== ABORTED) {
              responseHeaders = xhr.getAllResponseHeaders();

              // responseText is the old-school way of retrieving response (supported by IE8 & 9)
              // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
              response = ('response' in xhr) ? xhr.response : xhr.responseText;
            }

            completeRequest(callback,
                status || xhr.status,
              response,
              responseHeaders,
                xhr.statusText || '');
          }
        };

        if (withCredentials) {
          xhr.withCredentials = true;
        }

        if (responseType) {
          try {
            xhr.responseType = responseType;
          } catch (e) {
            // WebKit added support for the json responseType value on 09/03/2013
            // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
            // known to throw when setting the value "json" as the response type. Other older
            // browsers implementing the responseType
            //
            // The json response type can be ignored if not supported, because JSON payloads are
            // parsed on the client-side regardless.
            if (responseType !== 'json') {
              throw e;
            }
          }
        }

        xhr.send(post || null);
      }

      if (timeout > 0) {
        var timeoutId = $browserDefer(timeoutRequest, timeout);
      } else if (timeout && timeout.then) {
        timeout.then(timeoutRequest);
      }


      function timeoutRequest() {
        status = ABORTED;
        jsonpDone && jsonpDone();
        xhr && xhr.abort();
      }

      function completeRequest(callback, status, response, headersString, statusText) {
        // cancel timeout and subsequent timeout promise resolution
        timeoutId && $browserDefer.cancel(timeoutId);
        jsonpDone = xhr = null;

        // fix status code when it is 0 (0 status is undocumented).
        // Occurs when accessing file resources or on Android 4.1 stock browser
        // while retrieving files from application cache.
        if (status === 0) {
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
        }

        // normalize IE bug (http://bugs.jquery.com/ticket/1450)
        status = status === 1223 ? 204 : status;
        statusText = statusText || '';

        callback(status, response, headersString, statusText);
        $browser.$$completeOutstandingRequest(noop);
      }
    };

    function jsonpReq(url, callbackId, done) {
      // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:
      // - fetches local scripts via XHR and evals them
      // - adds and immediately removes script elements from the document
      var script = rawDocument.createElement('script'), callback = null;
      script.type = "text/javascript";
      script.src = url;
      script.async = true;

      callback = function(event) {
        removeEventListenerFn(script, "load", callback);
        removeEventListenerFn(script, "error", callback);
        rawDocument.body.removeChild(script);
        script = null;
        var status = -1;
        var text = "unknown";

        if (event) {
          if (event.type === "load" && !callbacks[callbackId].called) {
            event = { type: "error" };
          }
          text = event.type;
          status = event.type === "error" ? 404 : 200;
        }

        if (done) {
          done(status, text);
        }
      };

      addEventListenerFn(script, "load", callback);
      addEventListenerFn(script, "error", callback);

      if (msie <= 8) {
        script.onreadystatechange = function() {
          if (isString(script.readyState) && /loaded|complete/.test(script.readyState)) {
            script.onreadystatechange = null;
            callback({
              type: 'load'
            });
          }
        };
      }

      rawDocument.body.appendChild(script);
      return callback;
    }
  }

  var $interpolateMinErr = minErr('$interpolate');

  /**
   * @ngdoc provider
   * @name $interpolateProvider
   * @kind function
   *
   * @description
   *
   * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
   *
   * @example
   <example module="customInterpolationApp">
   <file name="index.html">
   <script>
   var customInterpolationApp = angular.module('customInterpolationApp', []);

   customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


   customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
   </script>
   <div ng-app="App" ng-controller="DemoController as demo">
   //demo.label//
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
   </file>
   </example>
   */
  function $InterpolateProvider() {
    var startSymbol = '{{';
    var endSymbol = '}}';

    /**
     * @ngdoc method
     * @name $interpolateProvider#startSymbol
     * @description
     * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
     * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
     */
    this.startSymbol = function(value){
      if (value) {
        startSymbol = value;
        return this;
      } else {
        return startSymbol;
      }
    };

    /**
     * @ngdoc method
     * @name $interpolateProvider#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * @param {string=} value new value to set the ending symbol to.
     * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
     */
    this.endSymbol = function(value){
      if (value) {
        endSymbol = value;
        return this;
      } else {
        return endSymbol;
      }
    };


    this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
      var startSymbolLength = startSymbol.length,
        endSymbolLength = endSymbol.length;

      /**
       * @ngdoc service
       * @name $interpolate
       * @kind function
       *
       * @requires $parse
       * @requires $sce
       *
       * @description
       *
       * Compiles a string with markup into an interpolation function. This service is used by the
       * HTML {@link ng.$compile $compile} service for data binding. See
       * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
       * interpolation markup.
       *
       *
       * ```js
       *   var $interpolate = ...; // injected
       *   var exp = $interpolate('Hello {{name | uppercase}}!');
       *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
       * ```
       *
       *
       * @param {string} text The text with markup to interpolate.
       * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
       *    embedded expression in order to return an interpolation function. Strings with no
       *    embedded expression will return null for the interpolation function.
       * @param {string=} trustedContext when provided, the returned function passes the interpolated
       *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
       *    provides Strict Contextual Escaping for details.
       * @returns {function(context)} an interpolation function which is used to compute the
       *    interpolated string. The function has these parameters:
       *
       *    * `context`: an object against which any expressions embedded in the strings are evaluated
       *      against.
       *
       */
      function $interpolate(text, mustHaveExpression, trustedContext) {
        var startIndex,
          endIndex,
          index = 0,
          parts = [],
          length = text.length,
          hasInterpolation = false,
          fn,
          exp,
          concat = [];

        while(index < length) {
          if ( ((startIndex = text.indexOf(startSymbol, index)) != -1) &&
            ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) ) {
            (index != startIndex) && parts.push(text.substring(index, startIndex));
            parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex)));
            fn.exp = exp;
            index = endIndex + endSymbolLength;
            hasInterpolation = true;
          } else {
            // we did not find anything, so we have to add the remainder to the parts array
            (index != length) && parts.push(text.substring(index));
            index = length;
          }
        }

        if (!(length = parts.length)) {
          // we added, nothing, must have been an empty string.
          parts.push('');
          length = 1;
        }

        // Concatenating expressions makes it hard to reason about whether some combination of
        // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
        // single expression be used for iframe[src], object[src], etc., we ensure that the value
        // that's used is assigned or constructed by some JS code somewhere that is more testable or
        // make it obvious that you bound the value to some user controlled value.  This helps reduce
        // the load when auditing for XSS issues.
        if (trustedContext && parts.length > 1) {
          throw $interpolateMinErr('noconcat',
              "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
              "interpolations that concatenate multiple expressions when a trusted value is " +
              "required.  See http://docs.angularjs.org/api/ng.$sce", text);
        }

        if (!mustHaveExpression  || hasInterpolation) {
          concat.length = length;
          fn = function(context) {
            try {
              for(var i = 0, ii = length, part; i<ii; i++) {
                if (typeof (part = parts[i]) == 'function') {
                  part = part(context);
                  if (trustedContext) {
                    part = $sce.getTrusted(trustedContext, part);
                  } else {
                    part = $sce.valueOf(part);
                  }
                  if (part == null) { // null || undefined
                    part = '';
                  } else {
                    switch (typeof part) {
                      case 'string':
                      {
                        break;
                      }
                      case 'number':
                      {
                        part = '' + part;
                        break;
                      }
                      default:
                      {
                        part = toJson(part);
                      }
                    }
                  }
                }
                concat[i] = part;
              }
              return concat.join('');
            }
            catch(err) {
              var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
                err.toString());
              $exceptionHandler(newErr);
            }
          };
          fn.exp = text;
          fn.parts = parts;
          return fn;
        }
      }


      /**
       * @ngdoc method
       * @name $interpolate#startSymbol
       * @description
       * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol $interpolateProvider#startSymbol} to change
       * the symbol.
       *
       * @returns {string} start symbol.
       */
      $interpolate.startSymbol = function() {
        return startSymbol;
      };


      /**
       * @ngdoc method
       * @name $interpolate#endSymbol
       * @description
       * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
       *
       * Use {@link ng.$interpolateProvider#endSymbol $interpolateProvider#endSymbol} to change
       * the symbol.
       *
       * @returns {string} end symbol.
       */
      $interpolate.endSymbol = function() {
        return endSymbol;
      };

      return $interpolate;
    }];
  }

  function $IntervalProvider() {
    this.$get = ['$rootScope', '$window', '$q',
      function($rootScope,   $window,   $q) {
        var intervals = {};


        /**
         * @ngdoc service
         * @name $interval
         *
         * @description
         * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
         * milliseconds.
         *
         * The return value of registering an interval function is a promise. This promise will be
         * notified upon each tick of the interval, and will be resolved after `count` iterations, or
         * run indefinitely if `count` is not defined. The value of the notification will be the
         * number of iterations that have run.
         * To cancel an interval, call `$interval.cancel(promise)`.
         *
         * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
         * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
         * time.
         *
         * <div class="alert alert-warning">
         * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
         * with them.  In particular they are not automatically destroyed when a controller's scope or a
         * directive's element are destroyed.
         * You should take this into consideration and make sure to always cancel the interval at the
         * appropriate moment.  See the example below for more details on how and when to do this.
         * </div>
         *
         * @param {function()} fn A function that should be called repeatedly.
         * @param {number} delay Number of milliseconds between each function call.
         * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
         *   indefinitely.
         * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
         *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
         * @returns {promise} A promise which will be notified on each iteration.
         *
         * @example
         * <example module="time">
         *   <file name="index.html">
         *     <script>
         *       function Ctrl2($scope,$interval) {
      *         $scope.format = 'M/d/yy h:mm:ss a';
      *         $scope.blood_1 = 100;
      *         $scope.blood_2 = 120;
      *
      *         var stop;
      *         $scope.fight = function() {
      *           // Don't start a new fight if we are already fighting
      *           if ( angular.isDefined(stop) ) return;
      *
      *           stop = $interval(function() {
      *             if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *                 $scope.blood_1 = $scope.blood_1 - 3;
      *                 $scope.blood_2 = $scope.blood_2 - 4;
      *             } else {
      *                 $scope.stopFight();
      *             }
      *           }, 100);
      *         };
      *
      *         $scope.stopFight = function() {
      *           if (angular.isDefined(stop)) {
      *             $interval.cancel(stop);
      *             stop = undefined;
      *           }
      *         };
      *
      *         $scope.resetFight = function() {
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *         }
      *
      *         $scope.$on('$destroy', function() {
      *           // Make sure that the interval is destroyed too
      *           $scope.stopFight();
      *         });
      *       }
         *
         *       angular.module('time', [])
         *         // Register the 'myCurrentTime' directive factory method.
         *         // We inject $interval and dateFilter service since the factory method is DI.
         *         .directive('myCurrentTime', function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *             stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time ofter the DOM element was removed.
      *             element.bind('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         });
         *     </script>
         *
         *     <div>
         *       <div ng-controller="Ctrl2">
         *         Date format: <input ng-model="format"> <hr/>
         *         Current time is: <span my-current-time="format"></span>
         *         <hr/>
         *         Blood 1 : <font color='red'>{{blood_1}}</font>
         *         Blood 2 : <font color='red'>{{blood_2}}</font>
         *         <button type="button" data-ng-click="fight()">Fight</button>
         *         <button type="button" data-ng-click="stopFight()">StopFight</button>
         *         <button type="button" data-ng-click="resetFight()">resetFight</button>
         *       </div>
         *     </div>
         *
         *   </file>
         * </example>
         */
        function interval(fn, delay, count, invokeApply) {
          var setInterval = $window.setInterval,
            clearInterval = $window.clearInterval,
            deferred = $q.defer(),
            promise = deferred.promise,
            iteration = 0,
            skipApply = (isDefined(invokeApply) && !invokeApply);

          count = isDefined(count) ? count : 0;

          promise.then(null, null, fn);

          promise.$$intervalId = setInterval(function tick() {
            deferred.notify(iteration++);

            if (count > 0 && iteration >= count) {
              deferred.resolve(iteration);
              clearInterval(promise.$$intervalId);
              delete intervals[promise.$$intervalId];
            }

            if (!skipApply) $rootScope.$apply();

          }, delay);

          intervals[promise.$$intervalId] = deferred;

          return promise;
        }


        /**
         * @ngdoc method
         * @name $interval#cancel
         *
         * @description
         * Cancels a task associated with the `promise`.
         *
         * @param {promise} promise returned by the `$interval` function.
         * @returns {boolean} Returns `true` if the task was successfully canceled.
         */
        interval.cancel = function(promise) {
          if (promise && promise.$$intervalId in intervals) {
            intervals[promise.$$intervalId].reject('canceled');
            clearInterval(promise.$$intervalId);
            delete intervals[promise.$$intervalId];
            return true;
          }
          return false;
        };

        return interval;
      }];
  }

  /**
   * @ngdoc service
   * @name $locale
   *
   * @description
   * $locale service provides localization rules for various Angular components. As of right now the
   * only public api is:
   *
   * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
   */
  function $LocaleProvider(){
    this.$get = function() {
      return {
        id: 'en-us',

        NUMBER_FORMATS: {
          DECIMAL_SEP: '.',
          GROUP_SEP: ',',
          PATTERNS: [
            { // Decimal Pattern
              minInt: 1,
              minFrac: 0,
              maxFrac: 3,
              posPre: '',
              posSuf: '',
              negPre: '-',
              negSuf: '',
              gSize: 3,
              lgSize: 3
            },{ //Currency Pattern
              minInt: 1,
              minFrac: 2,
              maxFrac: 2,
              posPre: '\u00A4',
              posSuf: '',
              negPre: '(\u00A4',
              negSuf: ')',
              gSize: 3,
              lgSize: 3
            }
          ],
          CURRENCY_SYM: '$'
        },

        DATETIME_FORMATS: {
          MONTH:
            'January,February,March,April,May,June,July,August,September,October,November,December'
              .split(','),
          SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
          DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
          SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
          AMPMS: ['AM','PM'],
          medium: 'MMM d, y h:mm:ss a',
          short: 'M/d/yy h:mm a',
          fullDate: 'EEEE, MMMM d, y',
          longDate: 'MMMM d, y',
          mediumDate: 'MMM d, y',
          shortDate: 'M/d/yy',
          mediumTime: 'h:mm:ss a',
          shortTime: 'h:mm a'
        },

        pluralCat: function(num) {
          if (num === 1) {
            return 'one';
          }
          return 'other';
        }
      };
    };
  }

  var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
  var $locationMinErr = minErr('$location');


  /**
   * Encode path using encodeUriSegment, ignoring forward slashes
   *
   * @param {string} path Path to encode
   * @returns {string}
   */
  function encodePath(path) {
    var segments = path.split('/'),
      i = segments.length;

    while (i--) {
      segments[i] = encodeUriSegment(segments[i]);
    }

    return segments.join('/');
  }

  function parseAbsoluteUrl(absoluteUrl, locationObj, appBase) {
    var parsedUrl = urlResolve(absoluteUrl, appBase);

    locationObj.$$protocol = parsedUrl.protocol;
    locationObj.$$host = parsedUrl.hostname;
    locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
  }


  function parseAppUrl(relativeUrl, locationObj, appBase) {
    var prefixed = (relativeUrl.charAt(0) !== '/');
    if (prefixed) {
      relativeUrl = '/' + relativeUrl;
    }
    var match = urlResolve(relativeUrl, appBase);
    locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
      match.pathname.substring(1) : match.pathname);
    locationObj.$$search = parseKeyValue(match.search);
    locationObj.$$hash = decodeURIComponent(match.hash);

    // make sure path starts with '/';
    if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
      locationObj.$$path = '/' + locationObj.$$path;
    }
  }


  /**
   *
   * @param {string} begin
   * @param {string} whole
   * @returns {string} returns text from whole after begin or undefined if it does not begin with
   *                   expected string.
   */
  function beginsWith(begin, whole) {
    if (whole.indexOf(begin) === 0) {
      return whole.substr(begin.length);
    }
  }


  function stripHash(url) {
    var index = url.indexOf('#');
    return index == -1 ? url : url.substr(0, index);
  }


  function stripFile(url) {
    return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
  }

  /* return the server only (scheme://host:port) */
  function serverBase(url) {
    return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
  }


  /**
   * LocationHtml5Url represents an url
   * This object is exposed as $location service when HTML5 mode is enabled and supported
   *
   * @constructor
   * @param {string} appBase application base URL
   * @param {string} basePrefix url path prefix
   */
  function LocationHtml5Url(appBase, basePrefix) {
    this.$$html5 = true;
    basePrefix = basePrefix || '';
    var appBaseNoFile = stripFile(appBase);
    parseAbsoluteUrl(appBase, this, appBase);


    /**
     * Parse given html5 (regular) url string into properties
     * @param {string} newAbsoluteUrl HTML5 url
     * @private
     */
    this.$$parse = function(url) {
      var pathUrl = beginsWith(appBaseNoFile, url);
      if (!isString(pathUrl)) {
        throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
          appBaseNoFile);
      }

      parseAppUrl(pathUrl, this, appBase);

      if (!this.$$path) {
        this.$$path = '/';
      }

      this.$$compose();
    };

    /**
     * Compose url and update `absUrl` property
     * @private
     */
    this.$$compose = function() {
      var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
    };

    this.$$rewrite = function(url) {
      var appUrl, prevAppUrl;

      if ( (appUrl = beginsWith(appBase, url)) !== undefined ) {
        prevAppUrl = appUrl;
        if ( (appUrl = beginsWith(basePrefix, appUrl)) !== undefined ) {
          return appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
        } else {
          return appBase + prevAppUrl;
        }
      } else if ( (appUrl = beginsWith(appBaseNoFile, url)) !== undefined ) {
        return appBaseNoFile + appUrl;
      } else if (appBaseNoFile == url + '/') {
        return appBaseNoFile;
      }
    };
  }


  /**
   * LocationHashbangUrl represents url
   * This object is exposed as $location service when developer doesn't opt into html5 mode.
   * It also serves as the base class for html5 mode fallback on legacy browsers.
   *
   * @constructor
   * @param {string} appBase application base URL
   * @param {string} hashPrefix hashbang prefix
   */
  function LocationHashbangUrl(appBase, hashPrefix) {
    var appBaseNoFile = stripFile(appBase);

    parseAbsoluteUrl(appBase, this, appBase);


    /**
     * Parse given hashbang url into properties
     * @param {string} url Hashbang url
     * @private
     */
    this.$$parse = function(url) {
      var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
      var withoutHashUrl = withoutBaseUrl.charAt(0) == '#'
        ? beginsWith(hashPrefix, withoutBaseUrl)
        : (this.$$html5)
        ? withoutBaseUrl
        : '';

      if (!isString(withoutHashUrl)) {
        throw $locationMinErr('ihshprfx', 'Invalid url "{0}", missing hash prefix "{1}".', url,
          hashPrefix);
      }
      parseAppUrl(withoutHashUrl, this, appBase);

      this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

      this.$$compose();

      /*
       * In Windows, on an anchor node on documents loaded from
       * the filesystem, the browser will return a pathname
       * prefixed with the drive name ('/C:/path') when a
       * pathname without a drive is set:
       *  * a.setAttribute('href', '/foo')
       *   * a.pathname === '/C:/foo' //true
       *
       * Inside of Angular, we're always using pathnames that
       * do not include drive names for routing.
       */
      function removeWindowsDriveName (path, url, base) {
        /*
         Matches paths for file protocol on windows,
         such as /C:/foo/bar, and captures only /foo/bar.
         */
        var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

        var firstPathSegmentMatch;

        //Get the relative path from the input URL.
        if (url.indexOf(base) === 0) {
          url = url.replace(base, '');
        }

        // The input URL intentionally contains a first path segment that ends with a colon.
        if (windowsFilePathExp.exec(url)) {
          return path;
        }

        firstPathSegmentMatch = windowsFilePathExp.exec(path);
        return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
      }
    };

    /**
     * Compose hashbang url and update `absUrl` property
     * @private
     */
    this.$$compose = function() {
      var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
    };

    this.$$rewrite = function(url) {
      if(stripHash(appBase) == stripHash(url)) {
        return url;
      }
    };
  }


  /**
   * LocationHashbangUrl represents url
   * This object is exposed as $location service when html5 history api is enabled but the browser
   * does not support it.
   *
   * @constructor
   * @param {string} appBase application base URL
   * @param {string} hashPrefix hashbang prefix
   */
  function LocationHashbangInHtml5Url(appBase, hashPrefix) {
    this.$$html5 = true;
    LocationHashbangUrl.apply(this, arguments);

    var appBaseNoFile = stripFile(appBase);

    this.$$rewrite = function(url) {
      var appUrl;

      if ( appBase == stripHash(url) ) {
        return url;
      } else if ( (appUrl = beginsWith(appBaseNoFile, url)) ) {
        return appBase + hashPrefix + appUrl;
      } else if ( appBaseNoFile === url + '/') {
        return appBaseNoFile;
      }
    };

    this.$$compose = function() {
      var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
      this.$$absUrl = appBase + hashPrefix + this.$$url;
    };

  }


  LocationHashbangInHtml5Url.prototype =
    LocationHashbangUrl.prototype =
      LocationHtml5Url.prototype = {

        /**
         * Are we in html5 mode?
         * @private
         */
        $$html5: false,

        /**
         * Has any change been replacing ?
         * @private
         */
        $$replace: false,

        /**
         * @ngdoc method
         * @name $location#absUrl
         *
         * @description
         * This method is getter only.
         *
         * Return full url representation with all segments encoded according to rules specified in
         * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
         *
         * @return {string} full url
         */
        absUrl: locationGetter('$$absUrl'),

        /**
         * @ngdoc method
         * @name $location#url
         *
         * @description
         * This method is getter / setter.
         *
         * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
         *
         * Change path, search and hash, when called with parameter and return `$location`.
         *
         * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
         * @param {string=} replace The path that will be changed
         * @return {string} url
         */
        url: function(url, replace) {
          if (isUndefined(url))
            return this.$$url;

          var match = PATH_MATCH.exec(url);
          if (match[1]) this.path(decodeURIComponent(match[1]));
          if (match[2] || match[1]) this.search(match[3] || '');
          this.hash(match[5] || '', replace);

          return this;
        },

        /**
         * @ngdoc method
         * @name $location#protocol
         *
         * @description
         * This method is getter only.
         *
         * Return protocol of current url.
         *
         * @return {string} protocol of current url
         */
        protocol: locationGetter('$$protocol'),

        /**
         * @ngdoc method
         * @name $location#host
         *
         * @description
         * This method is getter only.
         *
         * Return host of current url.
         *
         * @return {string} host of current url.
         */
        host: locationGetter('$$host'),

        /**
         * @ngdoc method
         * @name $location#port
         *
         * @description
         * This method is getter only.
         *
         * Return port of current url.
         *
         * @return {Number} port
         */
        port: locationGetter('$$port'),

        /**
         * @ngdoc method
         * @name $location#path
         *
         * @description
         * This method is getter / setter.
         *
         * Return path of current url when called without any parameter.
         *
         * Change path when called with parameter and return `$location`.
         *
         * Note: Path should always begin with forward slash (/), this method will add the forward slash
         * if it is missing.
         *
         * @param {string=} path New path
         * @return {string} path
         */
        path: locationGetterSetter('$$path', function(path) {
          return path.charAt(0) == '/' ? path : '/' + path;
        }),

        /**
         * @ngdoc method
         * @name $location#search
         *
         * @description
         * This method is getter / setter.
         *
         * Return search part (as object) of current url when called without any parameter.
         *
         * Change search part when called with parameter and return `$location`.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var searchObject = $location.search();
         * // => {foo: 'bar', baz: 'xoxo'}
         *
         *
         * // set foo to 'yipee'
         * $location.search('foo', 'yipee');
         * // => $location
         * ```
         *
         * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
         * hash object.
         *
         * When called with a single argument the method acts as a setter, setting the `search` component
         * of `$location` to the specified value.
         *
         * If the argument is a hash object containing an array of values, these values will be encoded
         * as duplicate search parameters in the url.
         *
         * @param {(string|Array<string>)=} paramValue If `search` is a string, then `paramValue` will
         * override only a single search property.
         *
         * If `paramValue` is an array, it will override the property of the `search` component of
         * `$location` specified via the first argument.
         *
         * If `paramValue` is `null`, the property specified via the first argument will be deleted.
         *
         * @return {Object} If called with no arguments returns the parsed `search` object. If called with
         * one or more arguments returns `$location` object itself.
         */
        search: function(search, paramValue) {
          switch (arguments.length) {
            case 0:
              return this.$$search;
            case 1:
              if (isString(search)) {
                this.$$search = parseKeyValue(search);
              } else if (isObject(search)) {
                this.$$search = search;
              } else {
                throw $locationMinErr('isrcharg',
                  'The first argument of the `$location#search()` call must be a string or an object.');
              }
              break;
            default:
              if (isUndefined(paramValue) || paramValue === null) {
                delete this.$$search[search];
              } else {
                this.$$search[search] = paramValue;
              }
          }

          this.$$compose();
          return this;
        },

        /**
         * @ngdoc method
         * @name $location#hash
         *
         * @description
         * This method is getter / setter.
         *
         * Return hash fragment when called without any parameter.
         *
         * Change hash fragment when called with parameter and return `$location`.
         *
         * @param {string=} hash New hash fragment
         * @return {string} hash
         */
        hash: locationGetterSetter('$$hash', identity),

        /**
         * @ngdoc method
         * @name $location#replace
         *
         * @description
         * If called, all changes to $location during current `$digest` will be replacing current history
         * record, instead of adding new one.
         */
        replace: function() {
          this.$$replace = true;
          return this;
        }
      };

  function locationGetter(property) {
    return function() {
      return this[property];
    };
  }


  function locationGetterSetter(property, preprocess) {
    return function(value) {
      if (isUndefined(value))
        return this[property];

      this[property] = preprocess(value);
      this.$$compose();

      return this;
    };
  }


  /**
   * @ngdoc service
   * @name $location
   *
   * @requires $rootElement
   *
   * @description
   * The $location service parses the URL in the browser address bar (based on the
   * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
   * available to your application. Changes to the URL in the address bar are reflected into
   * $location service and changes to $location are reflected into the browser address bar.
   *
   * **The $location service:**
   *
   * - Exposes the current URL in the browser address bar, so you can
   *   - Watch and observe the URL.
   *   - Change the URL.
   * - Synchronizes the URL with the browser when the user
   *   - Changes the address bar.
   *   - Clicks the back or forward button (or clicks a History link).
   *   - Clicks on a link.
   * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
   *
   * For more information see {@link guide/$location Developer Guide: Using $location}
   */

  /**
   * @ngdoc provider
   * @name $locationProvider
   * @description
   * Use the `$locationProvider` to configure how the application deep linking paths are stored.
   */
  function $LocationProvider(){
    var hashPrefix = '',
      html5Mode = false;

    /**
     * @ngdoc property
     * @name $locationProvider#hashPrefix
     * @description
     * @param {string=} prefix Prefix for hash part (containing path and search)
     * @returns {*} current value if used as getter or itself (chaining) if used as setter
     */
    this.hashPrefix = function(prefix) {
      if (isDefined(prefix)) {
        hashPrefix = prefix;
        return this;
      } else {
        return hashPrefix;
      }
    };

    /**
     * @ngdoc property
     * @name $locationProvider#html5Mode
     * @description
     * @param {boolean=} mode Use HTML5 strategy if available.
     * @returns {*} current value if used as getter or itself (chaining) if used as setter
     */
    this.html5Mode = function(mode) {
      if (isDefined(mode)) {
        html5Mode = mode;
        return this;
      } else {
        return html5Mode;
      }
    };

    /**
     * @ngdoc event
     * @name $location#$locationChangeStart
     * @eventType broadcast on root scope
     * @description
     * Broadcasted before a URL will change. This change can be prevented by calling
     * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
     * details about event object. Upon successful change
     * {@link ng.$location#events_$locationChangeSuccess $locationChangeSuccess} is fired.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {string} newUrl New URL
     * @param {string=} oldUrl URL that was before it was changed.
     */

    /**
     * @ngdoc event
     * @name $location#$locationChangeSuccess
     * @eventType broadcast on root scope
     * @description
     * Broadcasted after a URL was changed.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {string} newUrl New URL
     * @param {string=} oldUrl URL that was before it was changed.
     */

    this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement',
      function( $rootScope,   $browser,   $sniffer,   $rootElement) {
        var $location,
          LocationMode,
          baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
          initialUrl = $browser.url(),
          appBase;

        if (html5Mode) {
          appBase = serverBase(initialUrl) + (baseHref || '/');
          LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
        } else {
          appBase = stripHash(initialUrl);
          LocationMode = LocationHashbangUrl;
        }
        $location = new LocationMode(appBase, '#' + hashPrefix);
        $location.$$parse($location.$$rewrite(initialUrl));

        $rootElement.on('click', function(event) {
          // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
          // currently we open nice url link and redirect then

          if (event.ctrlKey || event.metaKey || event.which == 2) return;

          var elm = jqLite(event.target);

          // traverse the DOM up to find first A tag
          while (lowercase(elm[0].nodeName) !== 'a') {
            // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
            if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
          }

          var absHref = elm.prop('href');

          if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
            // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
            // an animation.
            absHref = urlResolve(absHref.animVal).href;
          }

          // Make relative links work in HTML5 mode for legacy browsers (or at least IE8 & 9)
          // The href should be a regular url e.g. /link/somewhere or link/somewhere or ../somewhere or
          // somewhere#anchor or http://example.com/somewhere
          if (LocationMode === LocationHashbangInHtml5Url) {
            // get the actual href attribute - see
            // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
            var href = elm.attr('href') || elm.attr('xlink:href');

            if (href.indexOf('://') < 0) {         // Ignore absolute URLs
              var prefix = '#' + hashPrefix;
              if (href[0] == '/') {
                // absolute path - replace old path
                absHref = appBase + prefix + href;
              } else if (href[0] == '#') {
                // local anchor
                absHref = appBase + prefix + ($location.path() || '/') + href;
              } else {
                // relative path - join with current path
                var stack = $location.path().split("/"),
                  parts = href.split("/");
                for (var i=0; i<parts.length; i++) {
                  if (parts[i] == ".")
                    continue;
                  else if (parts[i] == "..")
                    stack.pop();
                  else if (parts[i].length)
                    stack.push(parts[i]);
                }
                absHref = appBase + prefix + stack.join('/');
              }
            }
          }

          var rewrittenUrl = $location.$$rewrite(absHref);

          if (absHref && !elm.attr('target') && rewrittenUrl && !event.isDefaultPrevented()) {
            event.preventDefault();
            if (rewrittenUrl != $browser.url()) {
              // update location manually
              $location.$$parse(rewrittenUrl);
              $rootScope.$apply();
              // hack to work around FF6 bug 684208 when scenario runner clicks on links
              window.angular['ff-684208-preventDefault'] = true;
            }
          }
        });


        // rewrite hashbang url <> html5 url
        if ($location.absUrl() != initialUrl) {
          $browser.url($location.absUrl(), true);
        }

        // update $location when $browser url changes
        $browser.onUrlChange(function(newUrl) {
          if ($location.absUrl() != newUrl) {
            $rootScope.$evalAsync(function() {
              var oldUrl = $location.absUrl();

              $location.$$parse(newUrl);
              if ($rootScope.$broadcast('$locationChangeStart', newUrl,
                oldUrl).defaultPrevented) {
                $location.$$parse(oldUrl);
                $browser.url(oldUrl);
              } else {
                afterLocationChange(oldUrl);
              }
            });
            if (!$rootScope.$$phase) $rootScope.$digest();
          }
        });

        // update browser
        var changeCounter = 0;
        $rootScope.$watch(function $locationWatch() {
          var oldUrl = $browser.url();
          var currentReplace = $location.$$replace;

          if (!changeCounter || oldUrl != $location.absUrl()) {
            changeCounter++;
            $rootScope.$evalAsync(function() {
              if ($rootScope.$broadcast('$locationChangeStart', $location.absUrl(), oldUrl).
                defaultPrevented) {
                $location.$$parse(oldUrl);
              } else {
                $browser.url($location.absUrl(), currentReplace);
                afterLocationChange(oldUrl);
              }
            });
          }
          $location.$$replace = false;

          return changeCounter;
        });

        return $location;

        function afterLocationChange(oldUrl) {
          $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl);
        }
      }];
  }

  /**
   * @ngdoc service
   * @name $log
   * @requires $window
   *
   * @description
   * Simple service for logging. Default implementation safely writes the message
   * into the browser's console (if present).
   *
   * The main purpose of this service is to simplify debugging and troubleshooting.
   *
   * The default is to log `debug` messages. You can use
   * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
   *
   * @example
   <example>
   <file name="script.js">
   function LogCtrl($scope, $log) {
         $scope.$log = $log;
         $scope.message = 'Hello World!';
       }
   </file>
   <file name="index.html">
   <div ng-controller="LogCtrl">
   <p>Reload this page with open console, enter text and hit the log button...</p>
   Message:
   <input type="text" ng-model="message"/>
   <button ng-click="$log.log(message)">log</button>
   <button ng-click="$log.warn(message)">warn</button>
   <button ng-click="$log.info(message)">info</button>
   <button ng-click="$log.error(message)">error</button>
   </div>
   </file>
   </example>
   */

  /**
   * @ngdoc provider
   * @name $logProvider
   * @description
   * Use the `$logProvider` to configure how the application logs messages
   */
  function $LogProvider(){
    var debug = true,
      self = this;

    /**
     * @ngdoc property
     * @name $logProvider#debugEnabled
     * @description
     * @param {boolean=} flag enable or disable debug level messages
     * @returns {*} current value if used as getter or itself (chaining) if used as setter
     */
    this.debugEnabled = function(flag) {
      if (isDefined(flag)) {
        debug = flag;
        return this;
      } else {
        return debug;
      }
    };

    this.$get = ['$window', function($window){
      return {
        /**
         * @ngdoc method
         * @name $log#log
         *
         * @description
         * Write a log message
         */
        log: consoleLog('log'),

        /**
         * @ngdoc method
         * @name $log#info
         *
         * @description
         * Write an information message
         */
        info: consoleLog('info'),

        /**
         * @ngdoc method
         * @name $log#warn
         *
         * @description
         * Write a warning message
         */
        warn: consoleLog('warn'),

        /**
         * @ngdoc method
         * @name $log#error
         *
         * @description
         * Write an error message
         */
        error: consoleLog('error'),

        /**
         * @ngdoc method
         * @name $log#debug
         *
         * @description
         * Write a debug message
         */
        debug: (function () {
          var fn = consoleLog('debug');

          return function() {
            if (debug) {
              fn.apply(self, arguments);
            }
          };
        }())
      };

      function formatError(arg) {
        if (arg instanceof Error) {
          if (arg.stack) {
            arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
              ? 'Error: ' + arg.message + '\n' + arg.stack
              : arg.stack;
          } else if (arg.sourceURL) {
            arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
          }
        }
        return arg;
      }

      function consoleLog(type) {
        var console = $window.console || {},
          logFn = console[type] || console.log || noop,
          hasApply = false;

        // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
        // The reason behind this is that console.log has type "object" in IE8...
        try {
          hasApply = !!logFn.apply;
        } catch (e) {}

        if (hasApply) {
          return function() {
            var args = [];
            forEach(arguments, function(arg) {
              args.push(formatError(arg));
            });
            return logFn.apply(console, args);
          };
        }

        // we are IE which either doesn't have window.console => this is noop and we do nothing,
        // or we are IE where console.log doesn't have apply so we log at least first 2 args
        return function(arg1, arg2) {
          logFn(arg1, arg2 == null ? '' : arg2);
        };
      }
    }];
  }

  var $parseMinErr = minErr('$parse');
  var promiseWarningCache = {};
  var promiseWarning;

// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are generally considered safe because these expressions only have direct
// access to $scope and locals. However, one can obtain the ability to execute arbitrary JS code by
// obtaining a reference to native JS functions such as the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor(alert("evil JS code"))
//
// We want to prevent this type of access. For the sake of performance, during the lexing phase we
// disallow any "dotted" access to any member named "constructor".
//
// For reflective calls (a[b]) we check that the value of the lookup is not the Function constructor
// while evaluating the expression, which is a stronger but more expensive test. Since reflective
// calls are expensive anyway, this is not such a big deal compared to static dereferencing.
//
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
// against the expression language, but not to prevent exploits that were enabled by exposing
// sensitive JavaScript or browser apis on Scope. Exposing such objects on a Scope is never a good
// practice and therefore we are not even trying to protect against interaction with an object
// explicitly exposed in this way.
//
// A developer could foil the name check by aliasing the Function constructor under a different
// name on the scope.
//
// In general, it is not possible to access a Window object from an angular expression unless a
// window or some DOM object that has a reference to window is published onto a Scope.

  function ensureSafeMemberName(name, fullExpression) {
    if (name === "constructor") {
      throw $parseMinErr('isecfld',
        'Referencing "constructor" field in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    }
    return name;
  }

  function ensureSafeObject(obj, fullExpression) {
    // nifty check if obj is Function that is fast and works across iframes and other contexts
    if (obj) {
      if (obj.constructor === obj) {
        throw $parseMinErr('isecfn',
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
      } else if (// isWindow(obj)
        obj.document && obj.location && obj.alert && obj.setInterval) {
        throw $parseMinErr('isecwindow',
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
      } else if (// isElement(obj)
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
        throw $parseMinErr('isecdom',
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
      }
    }
    return obj;
  }

  var OPERATORS = {
    /* jshint bitwise : false */
    'null':function(){return null;},
    'true':function(){return true;},
    'false':function(){return false;},
    undefined:noop,
    '+':function(self, locals, a,b){
      a=a(self, locals); b=b(self, locals);
      if (isDefined(a)) {
        if (isDefined(b)) {
          return a + b;
        }
        return a;
      }
      return isDefined(b)?b:undefined;},
    '-':function(self, locals, a,b){
      a=a(self, locals); b=b(self, locals);
      return (isDefined(a)?a:0)-(isDefined(b)?b:0);
    },
    '*':function(self, locals, a,b){return a(self, locals)*b(self, locals);},
    '/':function(self, locals, a,b){return a(self, locals)/b(self, locals);},
    '%':function(self, locals, a,b){return a(self, locals)%b(self, locals);},
    '^':function(self, locals, a,b){return a(self, locals)^b(self, locals);},
    '=':noop,
    '===':function(self, locals, a, b){return a(self, locals)===b(self, locals);},
    '!==':function(self, locals, a, b){return a(self, locals)!==b(self, locals);},
    '==':function(self, locals, a,b){return a(self, locals)==b(self, locals);},
    '!=':function(self, locals, a,b){return a(self, locals)!=b(self, locals);},
    '<':function(self, locals, a,b){return a(self, locals)<b(self, locals);},
    '>':function(self, locals, a,b){return a(self, locals)>b(self, locals);},
    '<=':function(self, locals, a,b){return a(self, locals)<=b(self, locals);},
    '>=':function(self, locals, a,b){return a(self, locals)>=b(self, locals);},
    '&&':function(self, locals, a,b){return a(self, locals)&&b(self, locals);},
    '||':function(self, locals, a,b){return a(self, locals)||b(self, locals);},
    '&':function(self, locals, a,b){return a(self, locals)&b(self, locals);},
//    '|':function(self, locals, a,b){return a|b;},
    '|':function(self, locals, a,b){return b(self, locals)(self, locals, a(self, locals));},
    '!':function(self, locals, a){return !a(self, locals);}
  };
  /* jshint bitwise: true */
  var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


/////////////////////////////////////////


  /**
   * @constructor
   */
  var Lexer = function (options) {
    this.options = options;
  };

  Lexer.prototype = {
    constructor: Lexer,

    lex: function (text) {
      this.text = text;

      this.index = 0;
      this.ch = undefined;
      this.lastCh = ':'; // can start regexp

      this.tokens = [];

      while (this.index < this.text.length) {
        this.ch = this.text.charAt(this.index);
        if (this.is('"\'')) {
          this.readString(this.ch);
        } else if (this.isNumber(this.ch) || this.is('.') && this.isNumber(this.peek())) {
          this.readNumber();
        } else if (this.isIdent(this.ch)) {
          this.readIdent();
        } else if (this.is('(){}[].,;:?')) {
          this.tokens.push({
            index: this.index,
            text: this.ch
          });
          this.index++;
        } else if (this.isWhitespace(this.ch)) {
          this.index++;
          continue;
        } else {
          var ch2 = this.ch + this.peek();
          var ch3 = ch2 + this.peek(2);
          var fn = OPERATORS[this.ch];
          var fn2 = OPERATORS[ch2];
          var fn3 = OPERATORS[ch3];
          if (fn3) {
            this.tokens.push({index: this.index, text: ch3, fn: fn3});
            this.index += 3;
          } else if (fn2) {
            this.tokens.push({index: this.index, text: ch2, fn: fn2});
            this.index += 2;
          } else if (fn) {
            this.tokens.push({
              index: this.index,
              text: this.ch,
              fn: fn
            });
            this.index += 1;
          } else {
            this.throwError('Unexpected next character ', this.index, this.index + 1);
          }
        }
        this.lastCh = this.ch;
      }
      return this.tokens;
    },

    is: function(chars) {
      return chars.indexOf(this.ch) !== -1;
    },

    was: function(chars) {
      return chars.indexOf(this.lastCh) !== -1;
    },

    peek: function(i) {
      var num = i || 1;
      return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
    },

    isNumber: function(ch) {
      return ('0' <= ch && ch <= '9');
    },

    isWhitespace: function(ch) {
      // IE treats non-breaking space as \u00A0
      return (ch === ' ' || ch === '\r' || ch === '\t' ||
        ch === '\n' || ch === '\v' || ch === '\u00A0');
    },

    isIdent: function(ch) {
      return ('a' <= ch && ch <= 'z' ||
        'A' <= ch && ch <= 'Z' ||
        '_' === ch || ch === '$');
    },

    isExpOperator: function(ch) {
      return (ch === '-' || ch === '+' || this.isNumber(ch));
    },

    throwError: function(error, start, end) {
      end = end || this.index;
      var colStr = (isDefined(start)
        ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
        : ' ' + end);
      throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
        error, colStr, this.text);
    },

    readNumber: function() {
      var number = '';
      var start = this.index;
      while (this.index < this.text.length) {
        var ch = lowercase(this.text.charAt(this.index));
        if (ch == '.' || this.isNumber(ch)) {
          number += ch;
        } else {
          var peekCh = this.peek();
          if (ch == 'e' && this.isExpOperator(peekCh)) {
            number += ch;
          } else if (this.isExpOperator(ch) &&
            peekCh && this.isNumber(peekCh) &&
            number.charAt(number.length - 1) == 'e') {
            number += ch;
          } else if (this.isExpOperator(ch) &&
            (!peekCh || !this.isNumber(peekCh)) &&
            number.charAt(number.length - 1) == 'e') {
            this.throwError('Invalid exponent');
          } else {
            break;
          }
        }
        this.index++;
      }
      number = 1 * number;
      this.tokens.push({
        index: start,
        text: number,
        literal: true,
        constant: true,
        fn: function() { return number; }
      });
    },

    readIdent: function() {
      var parser = this;

      var ident = '';
      var start = this.index;

      var lastDot, peekIndex, methodName, ch;

      while (this.index < this.text.length) {
        ch = this.text.charAt(this.index);
        if (ch === '.' || this.isIdent(ch) || this.isNumber(ch)) {
          if (ch === '.') lastDot = this.index;
          ident += ch;
        } else {
          break;
        }
        this.index++;
      }

      //check if this is not a method invocation and if it is back out to last dot
      if (lastDot) {
        peekIndex = this.index;
        while (peekIndex < this.text.length) {
          ch = this.text.charAt(peekIndex);
          if (ch === '(') {
            methodName = ident.substr(lastDot - start + 1);
            ident = ident.substr(0, lastDot - start);
            this.index = peekIndex;
            break;
          }
          if (this.isWhitespace(ch)) {
            peekIndex++;
          } else {
            break;
          }
        }
      }


      var token = {
        index: start,
        text: ident
      };

      // OPERATORS is our own object so we don't need to use special hasOwnPropertyFn
      if (OPERATORS.hasOwnProperty(ident)) {
        token.fn = OPERATORS[ident];
        token.literal = true;
        token.constant = true;
      } else {
        var getter = getterFn(ident, this.options, this.text);
        token.fn = extend(function(self, locals) {
          return (getter(self, locals));
        }, {
          assign: function(self, value) {
            return setter(self, ident, value, parser.text, parser.options);
          }
        });
      }

      this.tokens.push(token);

      if (methodName) {
        this.tokens.push({
          index:lastDot,
          text: '.'
        });
        this.tokens.push({
          index: lastDot + 1,
          text: methodName
        });
      }
    },

    readString: function(quote) {
      var start = this.index;
      this.index++;
      var string = '';
      var rawString = quote;
      var escape = false;
      while (this.index < this.text.length) {
        var ch = this.text.charAt(this.index);
        rawString += ch;
        if (escape) {
          if (ch === 'u') {
            var hex = this.text.substring(this.index + 1, this.index + 5);
            if (!hex.match(/[\da-f]{4}/i))
              this.throwError('Invalid unicode escape [\\u' + hex + ']');
            this.index += 4;
            string += String.fromCharCode(parseInt(hex, 16));
          } else {
            var rep = ESCAPE[ch];
            if (rep) {
              string += rep;
            } else {
              string += ch;
            }
          }
          escape = false;
        } else if (ch === '\\') {
          escape = true;
        } else if (ch === quote) {
          this.index++;
          this.tokens.push({
            index: start,
            text: rawString,
            string: string,
            literal: true,
            constant: true,
            fn: function() { return string; }
          });
          return;
        } else {
          string += ch;
        }
        this.index++;
      }
      this.throwError('Unterminated quote', start);
    }
  };


  /**
   * @constructor
   */
  var Parser = function (lexer, $filter, options) {
    this.lexer = lexer;
    this.$filter = $filter;
    this.options = options;
  };

  Parser.ZERO = extend(function () {
    return 0;
  }, {
    constant: true
  });

  Parser.prototype = {
    constructor: Parser,

    parse: function (text) {
      this.text = text;

      this.tokens = this.lexer.lex(text);

      var value = this.statements();

      if (this.tokens.length !== 0) {
        this.throwError('is an unexpected token', this.tokens[0]);
      }

      value.literal = !!value.literal;
      value.constant = !!value.constant;

      return value;
    },

    primary: function () {
      var primary;
      if (this.expect('(')) {
        primary = this.filterChain();
        this.consume(')');
      } else if (this.expect('[')) {
        primary = this.arrayDeclaration();
      } else if (this.expect('{')) {
        primary = this.object();
      } else {
        var token = this.expect();
        primary = token.fn;
        if (!primary) {
          this.throwError('not a primary expression', token);
        }
        primary.literal = !!token.literal;
        primary.constant = !!token.constant;
      }

      var next, context;
      while ((next = this.expect('(', '[', '.'))) {
        if (next.text === '(') {
          primary = this.functionCall(primary, context);
          context = null;
        } else if (next.text === '[') {
          context = primary;
          primary = this.objectIndex(primary);
        } else if (next.text === '.') {
          context = primary;
          primary = this.fieldAccess(primary);
        } else {
          this.throwError('IMPOSSIBLE');
        }
      }
      return primary;
    },

    throwError: function(msg, token) {
      throw $parseMinErr('syntax',
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
        token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
    },

    peekToken: function() {
      if (this.tokens.length === 0)
        throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
      return this.tokens[0];
    },

    peek: function(e1, e2, e3, e4) {
      if (this.tokens.length > 0) {
        var token = this.tokens[0];
        var t = token.text;
        if (t === e1 || t === e2 || t === e3 || t === e4 ||
          (!e1 && !e2 && !e3 && !e4)) {
          return token;
        }
      }
      return false;
    },

    expect: function(e1, e2, e3, e4){
      var token = this.peek(e1, e2, e3, e4);
      if (token) {
        this.tokens.shift();
        return token;
      }
      return false;
    },

    consume: function(e1){
      if (!this.expect(e1)) {
        this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
      }
    },

    unaryFn: function(fn, right) {
      return extend(function(self, locals) {
        return fn(self, locals, right);
      }, {
        constant:right.constant
      });
    },

    ternaryFn: function(left, middle, right){
      return extend(function(self, locals){
        return left(self, locals) ? middle(self, locals) : right(self, locals);
      }, {
        constant: left.constant && middle.constant && right.constant
      });
    },

    binaryFn: function(left, fn, right) {
      return extend(function(self, locals) {
        return fn(self, locals, left, right);
      }, {
        constant:left.constant && right.constant
      });
    },

    statements: function() {
      var statements = [];
      while (true) {
        if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
          statements.push(this.filterChain());
        if (!this.expect(';')) {
          // optimize for the common case where there is only one statement.
          // TODO(size): maybe we should not support multiple statements?
          return (statements.length === 1)
            ? statements[0]
            : function(self, locals) {
            var value;
            for (var i = 0; i < statements.length; i++) {
              var statement = statements[i];
              if (statement) {
                value = statement(self, locals);
              }
            }
            return value;
          };
        }
      }
    },

    filterChain: function() {
      var left = this.expression();
      var token;
      while (true) {
        if ((token = this.expect('|'))) {
          left = this.binaryFn(left, token.fn, this.filter());
        } else {
          return left;
        }
      }
    },

    filter: function() {
      var token = this.expect();
      var fn = this.$filter(token.text);
      var argsFn = [];
      while (true) {
        if ((token = this.expect(':'))) {
          argsFn.push(this.expression());
        } else {
          var fnInvoke = function(self, locals, input) {
            var args = [input];
            for (var i = 0; i < argsFn.length; i++) {
              args.push(argsFn[i](self, locals));
            }
            return fn.apply(self, args);
          };
          return function() {
            return fnInvoke;
          };
        }
      }
    },

    expression: function() {
      return this.assignment();
    },

    assignment: function() {
      var left = this.ternary();
      var right;
      var token;
      if ((token = this.expect('='))) {
        if (!left.assign) {
          this.throwError('implies assignment but [' +
            this.text.substring(0, token.index) + '] can not be assigned to', token);
        }
        right = this.ternary();
        return function(scope, locals) {
          return left.assign(scope, right(scope, locals), locals);
        };
      }
      return left;
    },

    ternary: function() {
      var left = this.logicalOR();
      var middle;
      var token;
      if ((token = this.expect('?'))) {
        middle = this.ternary();
        if ((token = this.expect(':'))) {
          return this.ternaryFn(left, middle, this.ternary());
        } else {
          this.throwError('expected :', token);
        }
      } else {
        return left;
      }
    },

    logicalOR: function() {
      var left = this.logicalAND();
      var token;
      while (true) {
        if ((token = this.expect('||'))) {
          left = this.binaryFn(left, token.fn, this.logicalAND());
        } else {
          return left;
        }
      }
    },

    logicalAND: function() {
      var left = this.equality();
      var token;
      if ((token = this.expect('&&'))) {
        left = this.binaryFn(left, token.fn, this.logicalAND());
      }
      return left;
    },

    equality: function() {
      var left = this.relational();
      var token;
      if ((token = this.expect('==','!=','===','!=='))) {
        left = this.binaryFn(left, token.fn, this.equality());
      }
      return left;
    },

    relational: function() {
      var left = this.additive();
      var token;
      if ((token = this.expect('<', '>', '<=', '>='))) {
        left = this.binaryFn(left, token.fn, this.relational());
      }
      return left;
    },

    additive: function() {
      var left = this.multiplicative();
      var token;
      while ((token = this.expect('+','-'))) {
        left = this.binaryFn(left, token.fn, this.multiplicative());
      }
      return left;
    },

    multiplicative: function() {
      var left = this.unary();
      var token;
      while ((token = this.expect('*','/','%'))) {
        left = this.binaryFn(left, token.fn, this.unary());
      }
      return left;
    },

    unary: function() {
      var token;
      if (this.expect('+')) {
        return this.primary();
      } else if ((token = this.expect('-'))) {
        return this.binaryFn(Parser.ZERO, token.fn, this.unary());
      } else if ((token = this.expect('!'))) {
        return this.unaryFn(token.fn, this.unary());
      } else {
        return this.primary();
      }
    },

    fieldAccess: function(object) {
      var parser = this;
      var field = this.expect().text;
      var getter = getterFn(field, this.options, this.text);

      return extend(function(scope, locals, self) {
        return getter(self || object(scope, locals));
      }, {
        assign: function(scope, value, locals) {
          return setter(object(scope, locals), field, value, parser.text, parser.options);
        }
      });
    },

    objectIndex: function(obj) {
      var parser = this;

      var indexFn = this.expression();
      this.consume(']');

      return extend(function(self, locals) {
        var o = obj(self, locals),
          i = indexFn(self, locals),
          v, p;

        if (!o) return undefined;
        v = ensureSafeObject(o[i], parser.text);
        if (v && v.then && parser.options.unwrapPromises) {
          p = v;
          if (!('$$v' in v)) {
            p.$$v = undefined;
            p.then(function(val) { p.$$v = val; });
          }
          v = v.$$v;
        }
        return v;
      }, {
        assign: function(self, value, locals) {
          var key = indexFn(self, locals);
          // prevent overwriting of Function.constructor which would break ensureSafeObject check
          var safe = ensureSafeObject(obj(self, locals), parser.text);
          return safe[key] = value;
        }
      });
    },

    functionCall: function(fn, contextGetter) {
      var argsFn = [];
      if (this.peekToken().text !== ')') {
        do {
          argsFn.push(this.expression());
        } while (this.expect(','));
      }
      this.consume(')');

      var parser = this;

      return function(scope, locals) {
        var args = [];
        var context = contextGetter ? contextGetter(scope, locals) : scope;

        for (var i = 0; i < argsFn.length; i++) {
          args.push(argsFn[i](scope, locals));
        }
        var fnPtr = fn(scope, locals, context) || noop;

        ensureSafeObject(context, parser.text);
        ensureSafeObject(fnPtr, parser.text);

        // IE stupidity! (IE doesn't have apply for some native functions)
        var v = fnPtr.apply
          ? fnPtr.apply(context, args)
          : fnPtr(args[0], args[1], args[2], args[3], args[4]);

        return ensureSafeObject(v, parser.text);
      };
    },

    // This is used with json array declaration
    arrayDeclaration: function () {
      var elementFns = [];
      var allConstant = true;
      if (this.peekToken().text !== ']') {
        do {
          if (this.peek(']')) {
            // Support trailing commas per ES5.1.
            break;
          }
          var elementFn = this.expression();
          elementFns.push(elementFn);
          if (!elementFn.constant) {
            allConstant = false;
          }
        } while (this.expect(','));
      }
      this.consume(']');

      return extend(function(self, locals) {
        var array = [];
        for (var i = 0; i < elementFns.length; i++) {
          array.push(elementFns[i](self, locals));
        }
        return array;
      }, {
        literal: true,
        constant: allConstant
      });
    },

    object: function () {
      var keyValues = [];
      var allConstant = true;
      if (this.peekToken().text !== '}') {
        do {
          if (this.peek('}')) {
            // Support trailing commas per ES5.1.
            break;
          }
          var token = this.expect(),
            key = token.string || token.text;
          this.consume(':');
          var value = this.expression();
          keyValues.push({key: key, value: value});
          if (!value.constant) {
            allConstant = false;
          }
        } while (this.expect(','));
      }
      this.consume('}');

      return extend(function(self, locals) {
        var object = {};
        for (var i = 0; i < keyValues.length; i++) {
          var keyValue = keyValues[i];
          object[keyValue.key] = keyValue.value(self, locals);
        }
        return object;
      }, {
        literal: true,
        constant: allConstant
      });
    }
  };


//////////////////////////////////////////////////
// Parser helper functions
//////////////////////////////////////////////////

  function setter(obj, path, setValue, fullExp, options) {
    //needed?
    options = options || {};

    var element = path.split('.'), key;
    for (var i = 0; element.length > 1; i++) {
      key = ensureSafeMemberName(element.shift(), fullExp);
      var propertyObj = obj[key];
      if (!propertyObj) {
        propertyObj = {};
        obj[key] = propertyObj;
      }
      obj = propertyObj;
      if (obj.then && options.unwrapPromises) {
        promiseWarning(fullExp);
        if (!("$$v" in obj)) {
          (function(promise) {
            promise.then(function(val) { promise.$$v = val; }); }
            )(obj);
        }
        if (obj.$$v === undefined) {
          obj.$$v = {};
        }
        obj = obj.$$v;
      }
    }
    key = ensureSafeMemberName(element.shift(), fullExp);
    obj[key] = setValue;
    return setValue;
  }

  var getterFnCache = {};

  /**
   * Implementation of the "Black Hole" variant from:
   * - http://jsperf.com/angularjs-parse-getter/4
   * - http://jsperf.com/path-evaluation-simplified/7
   */
  function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, options) {
    ensureSafeMemberName(key0, fullExp);
    ensureSafeMemberName(key1, fullExp);
    ensureSafeMemberName(key2, fullExp);
    ensureSafeMemberName(key3, fullExp);
    ensureSafeMemberName(key4, fullExp);

    return !options.unwrapPromises
      ? function cspSafeGetter(scope, locals) {
      var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope;

      if (pathVal == null) return pathVal;
      pathVal = pathVal[key0];

      if (!key1) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key1];

      if (!key2) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key2];

      if (!key3) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key3];

      if (!key4) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key4];

      return pathVal;
    }
      : function cspSafePromiseEnabledGetter(scope, locals) {
      var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope,
        promise;

      if (pathVal == null) return pathVal;

      pathVal = pathVal[key0];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!("$$v" in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function(val) { promise.$$v = val; });
        }
        pathVal = pathVal.$$v;
      }

      if (!key1) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key1];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!("$$v" in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function(val) { promise.$$v = val; });
        }
        pathVal = pathVal.$$v;
      }

      if (!key2) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key2];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!("$$v" in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function(val) { promise.$$v = val; });
        }
        pathVal = pathVal.$$v;
      }

      if (!key3) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key3];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!("$$v" in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function(val) { promise.$$v = val; });
        }
        pathVal = pathVal.$$v;
      }

      if (!key4) return pathVal;
      if (pathVal == null) return undefined;
      pathVal = pathVal[key4];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!("$$v" in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function(val) { promise.$$v = val; });
        }
        pathVal = pathVal.$$v;
      }
      return pathVal;
    };
  }

  function simpleGetterFn1(key0, fullExp) {
    ensureSafeMemberName(key0, fullExp);

    return function simpleGetterFn1(scope, locals) {
      if (scope == null) return undefined;
      return ((locals && locals.hasOwnProperty(key0)) ? locals : scope)[key0];
    };
  }

  function simpleGetterFn2(key0, key1, fullExp) {
    ensureSafeMemberName(key0, fullExp);
    ensureSafeMemberName(key1, fullExp);

    return function simpleGetterFn2(scope, locals) {
      if (scope == null) return undefined;
      scope = ((locals && locals.hasOwnProperty(key0)) ? locals : scope)[key0];
      return scope == null ? undefined : scope[key1];
    };
  }

  function getterFn(path, options, fullExp) {
    // Check whether the cache has this getter already.
    // We can use hasOwnProperty directly on the cache because we ensure,
    // see below, that the cache never stores a path called 'hasOwnProperty'
    if (getterFnCache.hasOwnProperty(path)) {
      return getterFnCache[path];
    }

    var pathKeys = path.split('.'),
      pathKeysLength = pathKeys.length,
      fn;

    // When we have only 1 or 2 tokens, use optimized special case closures.
    // http://jsperf.com/angularjs-parse-getter/6
    if (!options.unwrapPromises && pathKeysLength === 1) {
      fn = simpleGetterFn1(pathKeys[0], fullExp);
    } else if (!options.unwrapPromises && pathKeysLength === 2) {
      fn = simpleGetterFn2(pathKeys[0], pathKeys[1], fullExp);
    } else if (options.csp) {
      if (pathKeysLength < 6) {
        fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp,
          options);
      } else {
        fn = function(scope, locals) {
          var i = 0, val;
          do {
            val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++],
              pathKeys[i++], fullExp, options)(scope, locals);

            locals = undefined; // clear after first iteration
            scope = val;
          } while (i < pathKeysLength);
          return val;
        };
      }
    } else {
      var code = 'var p;\n';
      forEach(pathKeys, function(key, index) {
        ensureSafeMemberName(key, fullExp);
        code += 'if(s == null) return undefined;\n' +
          's='+ (index
          // we simply dereference 's' on any .dot notation
          ? 's'
          // but if we are first then we check locals first, and if so read it first
          : '((k&&k.hasOwnProperty("' + key + '"))?k:s)') + '["' + key + '"]' + ';\n' +
          (options.unwrapPromises
            ? 'if (s && s.then) {\n' +
            ' pw("' + fullExp.replace(/(["\r\n])/g, '\\$1') + '");\n' +
            ' if (!("$$v" in s)) {\n' +
            ' p=s;\n' +
            ' p.$$v = undefined;\n' +
            ' p.then(function(v) {p.$$v=v;});\n' +
            '}\n' +
            ' s=s.$$v\n' +
            '}\n'
            : '');
      });
      code += 'return s;';

      /* jshint -W054 */
      var evaledFnGetter = new Function('s', 'k', 'pw', code); // s=scope, k=locals, pw=promiseWarning
      /* jshint +W054 */
      evaledFnGetter.toString = valueFn(code);
      fn = options.unwrapPromises ? function(scope, locals) {
        return evaledFnGetter(scope, locals, promiseWarning);
      } : evaledFnGetter;
    }

    // Only cache the value if it's not going to mess up the cache object
    // This is more performant that using Object.prototype.hasOwnProperty.call
    if (path !== 'hasOwnProperty') {
      getterFnCache[path] = fn;
    }
    return fn;
  }

///////////////////////////////////

  /**
   * @ngdoc service
   * @name $parse
   * @kind function
   *
   * @description
   *
   * Converts Angular {@link guide/expression expression} into a function.
   *
   * ```js
   *   var getter = $parse('user.name');
   *   var setter = getter.assign;
   *   var context = {user:{name:'angular'}};
   *   var locals = {user:{name:'local'}};
   *
   *   expect(getter(context)).toEqual('angular');
   *   setter(context, 'newValue');
   *   expect(context.user.name).toEqual('newValue');
   *   expect(getter(context, locals)).toEqual('local');
   * ```
   *
   *
   * @param {string} expression String expression to compile.
   * @returns {function(context, locals)} a function which represents the compiled expression:
   *
   *    * `context` – `{object}` – an object against which any expressions embedded in the strings
   *      are evaluated against (typically a scope object).
   *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
   *      `context`.
   *
   *    The returned function also has the following properties:
   *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
   *        literal.
   *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
   *        constant literals.
   *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
   *        set to a function to change its value on the given context.
   *
   */


  /**
   * @ngdoc provider
   * @name $parseProvider
   * @kind function
   *
   * @description
   * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
   *  service.
   */
  function $ParseProvider() {
    var cache = {};

    var $parseOptions = {
      csp: false,
      unwrapPromises: false,
      logPromiseWarnings: true
    };


    /**
     * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
     *
     * @ngdoc method
     * @name $parseProvider#unwrapPromises
     * @description
     *
     * **This feature is deprecated, see deprecation notes below for more info**
     *
     * If set to true (default is false), $parse will unwrap promises automatically when a promise is
     * found at any part of the expression. In other words, if set to true, the expression will always
     * result in a non-promise value.
     *
     * While the promise is unresolved, it's treated as undefined, but once resolved and fulfilled,
     * the fulfillment value is used in place of the promise while evaluating the expression.
     *
     * **Deprecation notice**
     *
     * This is a feature that didn't prove to be wildly useful or popular, primarily because of the
     * dichotomy between data access in templates (accessed as raw values) and controller code
     * (accessed as promises).
     *
     * In most code we ended up resolving promises manually in controllers anyway and thus unifying
     * the model access there.
     *
     * Other downsides of automatic promise unwrapping:
     *
     * - when building components it's often desirable to receive the raw promises
     * - adds complexity and slows down expression evaluation
     * - makes expression code pre-generation unattractive due to the amount of code that needs to be
     *   generated
     * - makes IDE auto-completion and tool support hard
     *
     * **Warning Logs**
     *
     * If the unwrapping is enabled, Angular will log a warning about each expression that unwraps a
     * promise (to reduce the noise, each expression is logged only once). To disable this logging use
     * `$parseProvider.logPromiseWarnings(false)` api.
     *
     *
     * @param {boolean=} value New value.
     * @returns {boolean|self} Returns the current setting when used as getter and self if used as
     *                         setter.
     */
    this.unwrapPromises = function(value) {
      if (isDefined(value)) {
        $parseOptions.unwrapPromises = !!value;
        return this;
      } else {
        return $parseOptions.unwrapPromises;
      }
    };


    /**
     * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
     *
     * @ngdoc method
     * @name $parseProvider#logPromiseWarnings
     * @description
     *
     * Controls whether Angular should log a warning on any encounter of a promise in an expression.
     *
     * The default is set to `true`.
     *
     * This setting applies only if `$parseProvider.unwrapPromises` setting is set to true as well.
     *
     * @param {boolean=} value New value.
     * @returns {boolean|self} Returns the current setting when used as getter and self if used as
     *                         setter.
     */
    this.logPromiseWarnings = function(value) {
      if (isDefined(value)) {
        $parseOptions.logPromiseWarnings = value;
        return this;
      } else {
        return $parseOptions.logPromiseWarnings;
      }
    };


    this.$get = ['$filter', '$sniffer', '$log', function($filter, $sniffer, $log) {
      $parseOptions.csp = $sniffer.csp;

      promiseWarning = function promiseWarningFn(fullExp) {
        if (!$parseOptions.logPromiseWarnings || promiseWarningCache.hasOwnProperty(fullExp)) return;
        promiseWarningCache[fullExp] = true;
        $log.warn('[$parse] Promise found in the expression `' + fullExp + '`. ' +
          'Automatic unwrapping of promises in Angular expressions is deprecated.');
      };

      return function(exp) {
        var parsedExpression;

        switch (typeof exp) {
          case 'string':

            if (cache.hasOwnProperty(exp)) {
              return cache[exp];
            }

            var lexer = new Lexer($parseOptions);
            var parser = new Parser(lexer, $filter, $parseOptions);
            parsedExpression = parser.parse(exp);

            if (exp !== 'hasOwnProperty') {
              // Only cache the value if it's not going to mess up the cache object
              // This is more performant that using Object.prototype.hasOwnProperty.call
              cache[exp] = parsedExpression;
            }

            return parsedExpression;

          case 'function':
            return exp;

          default:
            return noop;
        }
      };
    }];
  }

  /**
   * @ngdoc service
   * @name $q
   * @requires $rootScope
   *
   * @description
   * A promise/deferred implementation inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
   *
   * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
   * interface for interacting with an object that represents the result of an action that is
   * performed asynchronously, and may or may not be finished at any given point in time.
   *
   * From the perspective of dealing with error handling, deferred and promise APIs are to
   * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
   *
   * ```js
   *   // for the purpose of this example let's assume that variables `$q`, `scope` and `okToGreet`
   *   // are available in the current lexical scope (they could have been injected or passed in).
   *
   *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       // since this fn executes async in a future turn of the event loop, we need to wrap
 *       // our code into an $apply call so that the model changes are properly observed.
 *       scope.$apply(function() {
 *         deferred.notify('About to greet ' + name + '.');
 *
 *         if (okToGreet(name)) {
 *           deferred.resolve('Hello, ' + name + '!');
 *         } else {
 *           deferred.reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       });
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
   *
   *   var promise = asyncGreet('Robin Hood');
   *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
   * ```
   *
   * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
   * comes in the way of guarantees that promise and deferred APIs make, see
   * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
   *
   * Additionally the promise api allows for composition that is very hard to do with the
   * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
   * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
   * section on serial or parallel joining of promises.
   *
   *
   * # The Deferred API
   *
   * A new instance of deferred is constructed by calling `$q.defer()`.
   *
   * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
   * that can be used for signaling the successful or unsuccessful completion, as well as the status
   * of the task.
   *
   * **Methods**
   *
   * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
   *   constructed via `$q.reject`, the promise will be rejected instead.
   * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
   *   resolving it with a rejection constructed via `$q.reject`.
   * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
   *   multiple times before the promise is either resolved or rejected.
   *
   * **Properties**
   *
   * - promise – `{Promise}` – promise object associated with this deferred.
   *
   *
   * # The Promise API
   *
   * A new promise instance is created when a deferred instance is created and can be retrieved by
   * calling `deferred.promise`.
   *
   * The purpose of the promise object is to allow for interested parties to get access to the result
   * of the deferred task when it completes.
   *
   * **Methods**
   *
   * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
   *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
   *   as soon as the result is available. The callbacks are called with a single argument: the result
   *   or rejection reason. Additionally, the notify callback may be called zero or more times to
   *   provide a progress indication, before the promise is resolved or rejected.
   *
   *   This method *returns a new promise* which is resolved or rejected via the return value of the
   *   `successCallback`, `errorCallback`. It also notifies via the return value of the
   *   `notifyCallback` method. The promise can not be resolved or rejected from the notifyCallback
   *   method.
   *
   * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
   *
   * - `finally(callback)` – allows you to observe either the fulfillment or rejection of a promise,
   *   but to do so without modifying the final value. This is useful to release resources or do some
   *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
   *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
   *   more information.
   *
   *   Because `finally` is a reserved word in JavaScript and reserved keywords are not supported as
   *   property names by ES3, you'll need to invoke the method like `promise['finally'](callback)` to
   *   make your code IE8 and Android 2.x compatible.
   *
   * # Chaining promises
   *
   * Because calling the `then` method of a promise returns a new derived promise, it is easily
   * possible to create a chain of promises:
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
   *
   *   // promiseB will be resolved immediately after promiseA is resolved and its value
   *   // will be the result of promiseA incremented by 1
   * ```
   *
   * It is possible to create chains of any length and since a promise can be resolved with another
   * promise (which will defer its resolution further), it is possible to pause/defer resolution of
   * the promises at any point in the chain. This makes it possible to implement powerful APIs like
   * $http's response interceptors.
   *
   *
   * # Differences between Kris Kowal's Q and $q
   *
   *  There are two main differences:
   *
   * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
   *   mechanism in angular, which means faster propagation of resolution or rejection into your
   *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
   * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
   *   all the important functionality needed for common async tasks.
   *
   *  # Testing
   *
   *  ```js
   *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
   *  ```
   */
  function $QProvider() {

    this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
      return qFactory(function(callback) {
        $rootScope.$evalAsync(callback);
      }, $exceptionHandler);
    }];
  }


  /**
   * Constructs a promise manager.
   *
   * @param {function(Function)} nextTick Function for executing functions in the next turn.
   * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
   *     debugging purposes.
   * @returns {object} Promise manager.
   */
  function qFactory(nextTick, exceptionHandler) {

    /**
     * @ngdoc method
     * @name $q#defer
     * @kind function
     *
     * @description
     * Creates a `Deferred` object which represents a task which will finish in the future.
     *
     * @returns {Deferred} Returns a new instance of deferred.
     */
    var defer = function() {
      var pending = [],
        value, deferred;

      deferred = {

        resolve: function(val) {
          if (pending) {
            var callbacks = pending;
            pending = undefined;
            value = ref(val);

            if (callbacks.length) {
              nextTick(function() {
                var callback;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  callback = callbacks[i];
                  value.then(callback[0], callback[1], callback[2]);
                }
              });
            }
          }
        },


        reject: function(reason) {
          deferred.resolve(createInternalRejectedPromise(reason));
        },


        notify: function(progress) {
          if (pending) {
            var callbacks = pending;

            if (pending.length) {
              nextTick(function() {
                var callback;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  callback = callbacks[i];
                  callback[2](progress);
                }
              });
            }
          }
        },


        promise: {
          then: function(callback, errback, progressback) {
            var result = defer();

            var wrappedCallback = function(value) {
              try {
                result.resolve((isFunction(callback) ? callback : defaultCallback)(value));
              } catch(e) {
                result.reject(e);
                exceptionHandler(e);
              }
            };

            var wrappedErrback = function(reason) {
              try {
                result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
              } catch(e) {
                result.reject(e);
                exceptionHandler(e);
              }
            };

            var wrappedProgressback = function(progress) {
              try {
                result.notify((isFunction(progressback) ? progressback : defaultCallback)(progress));
              } catch(e) {
                exceptionHandler(e);
              }
            };

            if (pending) {
              pending.push([wrappedCallback, wrappedErrback, wrappedProgressback]);
            } else {
              value.then(wrappedCallback, wrappedErrback, wrappedProgressback);
            }

            return result.promise;
          },

          "catch": function(callback) {
            return this.then(null, callback);
          },

          "finally": function(callback) {

            function makePromise(value, resolved) {
              var result = defer();
              if (resolved) {
                result.resolve(value);
              } else {
                result.reject(value);
              }
              return result.promise;
            }

            function handleCallback(value, isResolved) {
              var callbackOutput = null;
              try {
                callbackOutput = (callback ||defaultCallback)();
              } catch(e) {
                return makePromise(e, false);
              }
              if (callbackOutput && isFunction(callbackOutput.then)) {
                return callbackOutput.then(function() {
                  return makePromise(value, isResolved);
                }, function(error) {
                  return makePromise(error, false);
                });
              } else {
                return makePromise(value, isResolved);
              }
            }

            return this.then(function(value) {
              return handleCallback(value, true);
            }, function(error) {
              return handleCallback(error, false);
            });
          }
        }
      };

      return deferred;
    };


    var ref = function(value) {
      if (value && isFunction(value.then)) return value;
      return {
        then: function(callback) {
          var result = defer();
          nextTick(function() {
            result.resolve(callback(value));
          });
          return result.promise;
        }
      };
    };


    /**
     * @ngdoc method
     * @name $q#reject
     * @kind function
     *
     * @description
     * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
     * used to forward rejection in a chain of promises. If you are dealing with the last promise in
     * a promise chain, you don't need to worry about it.
     *
     * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
     * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
     * a promise error callback and you want to forward the error to the promise derived from the
     * current promise, you have to "rethrow" the error by returning a rejection constructed via
     * `reject`.
     *
     * ```js
     *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
     * ```
     *
     * @param {*} reason Constant, message, exception or an object representing the rejection reason.
     * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
     */
    var reject = function(reason) {
      var result = defer();
      result.reject(reason);
      return result.promise;
    };

    var createInternalRejectedPromise = function(reason) {
      return {
        then: function(callback, errback) {
          var result = defer();
          nextTick(function() {
            try {
              result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
            } catch(e) {
              result.reject(e);
              exceptionHandler(e);
            }
          });
          return result.promise;
        }
      };
    };


    /**
     * @ngdoc method
     * @name $q#when
     * @kind function
     *
     * @description
     * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
     * This is useful when you are dealing with an object that might or might not be a promise, or if
     * the promise comes from a source that can't be trusted.
     *
     * @param {*} value Value or a promise
     * @returns {Promise} Returns a promise of the passed value or promise
     */
    var when = function(value, callback, errback, progressback) {
      var result = defer(),
        done;

      var wrappedCallback = function(value) {
        try {
          return (isFunction(callback) ? callback : defaultCallback)(value);
        } catch (e) {
          exceptionHandler(e);
          return reject(e);
        }
      };

      var wrappedErrback = function(reason) {
        try {
          return (isFunction(errback) ? errback : defaultErrback)(reason);
        } catch (e) {
          exceptionHandler(e);
          return reject(e);
        }
      };

      var wrappedProgressback = function(progress) {
        try {
          return (isFunction(progressback) ? progressback : defaultCallback)(progress);
        } catch (e) {
          exceptionHandler(e);
        }
      };

      nextTick(function() {
        ref(value).then(function(value) {
          if (done) return;
          done = true;
          result.resolve(ref(value).then(wrappedCallback, wrappedErrback, wrappedProgressback));
        }, function(reason) {
          if (done) return;
          done = true;
          result.resolve(wrappedErrback(reason));
        }, function(progress) {
          if (done) return;
          result.notify(wrappedProgressback(progress));
        });
      });

      return result.promise;
    };


    function defaultCallback(value) {
      return value;
    }


    function defaultErrback(reason) {
      return reject(reason);
    }


    /**
     * @ngdoc method
     * @name $q#all
     * @kind function
     *
     * @description
     * Combines multiple promises into a single promise that is resolved when all of the input
     * promises are resolved.
     *
     * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
     * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
     *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
     *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
     *   with the same rejection value.
     */
    function all(promises) {
      var deferred = defer(),
        counter = 0,
        results = isArray(promises) ? [] : {};

      forEach(promises, function(promise, key) {
        counter++;
        ref(promise).then(function(value) {
          if (results.hasOwnProperty(key)) return;
          results[key] = value;
          if (!(--counter)) deferred.resolve(results);
        }, function(reason) {
          if (results.hasOwnProperty(key)) return;
          deferred.reject(reason);
        });
      });

      if (counter === 0) {
        deferred.resolve(results);
      }

      return deferred.promise;
    }

    return {
      defer: defer,
      reject: reject,
      when: when,
      all: all
    };
  }

  function $$RAFProvider(){ //rAF
    this.$get = ['$window', '$timeout', function($window, $timeout) {
      var requestAnimationFrame = $window.requestAnimationFrame ||
        $window.webkitRequestAnimationFrame ||
        $window.mozRequestAnimationFrame;

      var cancelAnimationFrame = $window.cancelAnimationFrame ||
        $window.webkitCancelAnimationFrame ||
        $window.mozCancelAnimationFrame ||
        $window.webkitCancelRequestAnimationFrame;

      var rafSupported = !!requestAnimationFrame;
      var raf = rafSupported
        ? function(fn) {
        var id = requestAnimationFrame(fn);
        return function() {
          cancelAnimationFrame(id);
        };
      }
        : function(fn) {
        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
        return function() {
          $timeout.cancel(timer);
        };
      };

      raf.supported = rafSupported;

      return raf;
    }];
  }

  /**
   * DESIGN NOTES
   *
   * The design decisions behind the scope are heavily favored for speed and memory consumption.
   *
   * The typical use of scope is to watch the expressions, which most of the time return the same
   * value as last time so we optimize the operation.
   *
   * Closures construction is expensive in terms of speed as well as memory:
   *   - No closures, instead use prototypical inheritance for API
   *   - Internal state needs to be stored on scope directly, which means that private state is
   *     exposed as $$____ properties
   *
   * Loop operations are optimized by using while(count--) { ... }
   *   - this means that in order to keep the same order of execution as addition we have to add
   *     items to the array at the beginning (unshift) instead of at the end (push)
   *
   * Child scopes are created and removed often
   *   - Using an array would be slow since inserts in middle are expensive so we use linked list
   *
   * There are few watches then a lot of observers. This is why you don't want the observer to be
   * implemented in the same way as watch. Watch requires return of initialization function which
   * are expensive to construct.
   */


  /**
   * @ngdoc provider
   * @name $rootScopeProvider
   * @description
   *
   * Provider for the $rootScope service.
   */

  /**
   * @ngdoc method
   * @name $rootScopeProvider#digestTtl
   * @description
   *
   * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
   * assuming that the model is unstable.
   *
   * The current default is 10 iterations.
   *
   * In complex applications it's possible that the dependencies between `$watch`s will result in
   * several digest iterations. However if an application needs more than the default 10 digest
   * iterations for its model to stabilize then you should investigate what is causing the model to
   * continuously change during the digest.
   *
   * Increasing the TTL could have performance implications, so you should not change it without
   * proper justification.
   *
   * @param {number} limit The number of digest iterations.
   */


  /**
   * @ngdoc service
   * @name $rootScope
   * @description
   *
   * Every application has a single root {@link ng.$rootScope.Scope scope}.
   * All other scopes are descendant scopes of the root scope. Scopes provide separation
   * between the model and the view, via a mechanism for watching the model for changes.
   * They also provide an event emission/broadcast and subscription facility. See the
   * {@link guide/scope developer guide on scopes}.
   */
  function $RootScopeProvider(){
    var TTL = 10;
    var $rootScopeMinErr = minErr('$rootScope');
    var lastDirtyWatch = null;

    this.digestTtl = function(value) {
      if (arguments.length) {
        TTL = value;
      }
      return TTL;
    };

    this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
      function( $injector,   $exceptionHandler,   $parse,   $browser) {

        /**
         * @ngdoc type
         * @name $rootScope.Scope
         *
         * @description
         * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
         * {@link auto.$injector $injector}. Child scopes are created using the
         * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
         * compiled HTML template is executed.)
         *
         * Here is a simple scope snippet to show how you can interact with the scope.
         * ```html
         * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
         * ```
         *
         * # Inheritance
         * A scope can inherit from a parent scope, as in this example:
         * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         child.name = "World";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
         * ```
         *
         *
         * @param {Object.<string, function()>=} providers Map of service factory which need to be
         *                                       provided for the current scope. Defaults to {@link ng}.
         * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
         *                              append/override services provided by `providers`. This is handy
         *                              when unit-testing and having the need to override a default
         *                              service.
         * @returns {Object} Newly created scope.
         *
         */
        function Scope() {
          this.$id = nextUid();
          this.$$phase = this.$parent = this.$$watchers =
            this.$$nextSibling = this.$$prevSibling =
              this.$$childHead = this.$$childTail = null;
          this['this'] = this.$root =  this;
          this.$$destroyed = false;
          this.$$asyncQueue = [];
          this.$$postDigestQueue = [];
          this.$$listeners = {};
          this.$$listenerCount = {};
          this.$$isolateBindings = {};
        }

        /**
         * @ngdoc property
         * @name $rootScope.Scope#$id
         * @returns {number} Unique scope ID (monotonically increasing alphanumeric sequence) useful for
         *   debugging.
         */


        Scope.prototype = {
          constructor: Scope,
          /**
           * @ngdoc method
           * @name $rootScope.Scope#$new
           * @kind function
           *
           * @description
           * Creates a new child {@link ng.$rootScope.Scope scope}.
           *
           * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} and
           * {@link ng.$rootScope.Scope#$digest $digest()} events. The scope can be removed from the
           * scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
           *
           * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
           * desired for the scope and its child scopes to be permanently detached from the parent and
           * thus stop participating in model change detection and listener notification by invoking.
           *
           * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
           *         parent scope. The scope is isolated, as it can not see parent scope properties.
           *         When creating widgets, it is useful for the widget to not accidentally read parent
           *         state.
           *
           * @returns {Object} The newly created child scope.
           *
           */
          $new: function(isolate) {
            var ChildScope,
              child;

            if (isolate) {
              child = new Scope();
              child.$root = this.$root;
              // ensure that there is just one async queue per $rootScope and its children
              child.$$asyncQueue = this.$$asyncQueue;
              child.$$postDigestQueue = this.$$postDigestQueue;
            } else {
              // Only create a child scope class if somebody asks for one,
              // but cache it to allow the VM to optimize lookups.
              if (!this.$$childScopeClass) {
                this.$$childScopeClass = function() {
                  this.$$watchers = this.$$nextSibling =
                    this.$$childHead = this.$$childTail = null;
                  this.$$listeners = {};
                  this.$$listenerCount = {};
                  this.$id = nextUid();
                  this.$$childScopeClass = null;
                };
                this.$$childScopeClass.prototype = this;
              }
              child = new this.$$childScopeClass();
            }
            child['this'] = child;
            child.$parent = this;
            child.$$prevSibling = this.$$childTail;
            if (this.$$childHead) {
              this.$$childTail.$$nextSibling = child;
              this.$$childTail = child;
            } else {
              this.$$childHead = this.$$childTail = child;
            }
            return child;
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$watch
           * @kind function
           *
           * @description
           * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
           *
           * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
       *   $digest()} and should return the value that will be watched. (Since
           *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the
           *   `watchExpression` can execute multiple times per
           *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)
           * - The `listener` is called only when the value from the current `watchExpression` and the
           *   previous call to `watchExpression` are not equal (with the exception of the initial run,
           *   see below). Inequality is determined according to reference inequality,
           *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
           *    via the `!==` Javascript operator, unless `objectEquality == true`
           *   (see next point)
           * - When `objectEquality == true`, inequality of the `watchExpression` is determined
           *   according to the {@link angular.equals} function. To save the value of the object for
           *   later comparison, the {@link angular.copy} function is used. This therefore means that
           *   watching complex objects will have adverse memory and performance implications.
           * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
           *   This is achieved by rerunning the watchers until no changes are detected. The rerun
           *   iteration limit is 10 to prevent an infinite loop deadlock.
           *
           *
           * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
           * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`
           * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a
           * change is detected, be prepared for multiple calls to your listener.)
           *
           * After a watcher is registered with the scope, the `listener` fn is called asynchronously
           * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
           * watcher. In rare cases, this is undesirable because the listener is called when the result
           * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
           * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
           * listener was called due to initialization.
           *
           * The example below contains an illustration of using a function as your $watch listener
           *
           *
           * # Example
           * ```js
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);



           // Using a listener function
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
           // This is the listener function
           function() { return food; },
           // This is the change handler
           function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

           * ```
           *
           *
           *
           * @param {(function()|string)} watchExpression Expression that is evaluated on each
           *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
           *    a call to the `listener`.
           *
           *    - `string`: Evaluated as {@link guide/expression expression}
           *    - `function(scope)`: called with current `scope` as a parameter.
           * @param {(function()|string)=} listener Callback called whenever the return value of
           *   the `watchExpression` changes.
           *
           *    - `string`: Evaluated as {@link guide/expression expression}
           *    - `function(newValue, oldValue, scope)`: called with current and previous values as
           *      parameters.
           *
           * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of
           *     comparing for reference equality.
           * @returns {function()} Returns a deregistration function for this listener.
           */
          $watch: function(watchExp, listener, objectEquality) {
            var scope = this,
              get = compileToFn(watchExp, 'watch'),
              array = scope.$$watchers,
              watcher = {
                fn: listener,
                last: initWatchVal,
                get: get,
                exp: watchExp,
                eq: !!objectEquality
              };

            lastDirtyWatch = null;

            // in the case user pass string, we need to compile it, do we really need this ?
            if (!isFunction(listener)) {
              var listenFn = compileToFn(listener || noop, 'listener');
              watcher.fn = function(newVal, oldVal, scope) {listenFn(scope);};
            }

            if (typeof watchExp == 'string' && get.constant) {
              var originalFn = watcher.fn;
              watcher.fn = function(newVal, oldVal, scope) {
                originalFn.call(this, newVal, oldVal, scope);
                arrayRemove(array, watcher);
              };
            }

            if (!array) {
              array = scope.$$watchers = [];
            }
            // we use unshift since we use a while loop in $digest for speed.
            // the while loop reads in reverse order.
            array.unshift(watcher);

            return function deregisterWatch() {
              arrayRemove(array, watcher);
              lastDirtyWatch = null;
            };
          },


          /**
           * @ngdoc method
           * @name $rootScope.Scope#$watchCollection
           * @kind function
           *
           * @description
           * Shallow watches the properties of an object and fires whenever any of the properties change
           * (for arrays, this implies watching the array items; for object maps, this implies watching
           * the properties). If a change is detected, the `listener` callback is fired.
           *
           * - The `obj` collection is observed via standard $watch operation and is examined on every
           *   call to $digest() to see if any items have been added, removed, or moved.
           * - The `listener` is called whenever anything within the `obj` has changed. Examples include
           *   adding, removing, and moving items belonging to an object or array.
           *
           *
           * # Example
           * ```js
           $scope.names = ['igor', 'matias', 'misko', 'james'];
           $scope.dataCount = 4;

           $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

           expect($scope.dataCount).toEqual(4);
           $scope.$digest();

           //still at 4 ... no changes
           expect($scope.dataCount).toEqual(4);

           $scope.names.pop();
           $scope.$digest();

           //now there's been a change
           expect($scope.dataCount).toEqual(3);
           * ```
           *
           *
           * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
           *    expression value should evaluate to an object or an array which is observed on each
           *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
           *    collection will trigger a call to the `listener`.
           *
           * @param {function(newCollection, oldCollection, scope)} listener a callback function called
           *    when a change is detected.
           *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
           *    - The `oldCollection` object is a copy of the former collection data.
           *      Due to performance considerations, the`oldCollection` value is computed only if the
           *      `listener` function declares two or more arguments.
           *    - The `scope` argument refers to the current scope.
           *
           * @returns {function()} Returns a de-registration function for this listener. When the
           *    de-registration function is executed, the internal watch operation is terminated.
           */
          $watchCollection: function(obj, listener) {
            var self = this;
            // the current value, updated on each dirty-check run
            var newValue;
            // a shallow copy of the newValue from the last dirty-check run,
            // updated to match newValue during dirty-check run
            var oldValue;
            // a shallow copy of the newValue from when the last change happened
            var veryOldValue;
            // only track veryOldValue if the listener is asking for it
            var trackVeryOldValue = (listener.length > 1);
            var changeDetected = 0;
            var objGetter = $parse(obj);
            var internalArray = [];
            var internalObject = {};
            var initRun = true;
            var oldLength = 0;

            function $watchCollectionWatch() {
              newValue = objGetter(self);
              var newLength, key;

              if (!isObject(newValue)) { // if primitive
                if (oldValue !== newValue) {
                  oldValue = newValue;
                  changeDetected++;
                }
              } else if (isArrayLike(newValue)) {
                if (oldValue !== internalArray) {
                  // we are transitioning from something which was not an array into array.
                  oldValue = internalArray;
                  oldLength = oldValue.length = 0;
                  changeDetected++;
                }

                newLength = newValue.length;

                if (oldLength !== newLength) {
                  // if lengths do not match we need to trigger change notification
                  changeDetected++;
                  oldValue.length = oldLength = newLength;
                }
                // copy the items to oldValue and look for changes.
                for (var i = 0; i < newLength; i++) {
                  var bothNaN = (oldValue[i] !== oldValue[i]) &&
                    (newValue[i] !== newValue[i]);
                  if (!bothNaN && (oldValue[i] !== newValue[i])) {
                    changeDetected++;
                    oldValue[i] = newValue[i];
                  }
                }
              } else {
                if (oldValue !== internalObject) {
                  // we are transitioning from something which was not an object into object.
                  oldValue = internalObject = {};
                  oldLength = 0;
                  changeDetected++;
                }
                // copy the items to oldValue and look for changes.
                newLength = 0;
                for (key in newValue) {
                  if (newValue.hasOwnProperty(key)) {
                    newLength++;
                    if (oldValue.hasOwnProperty(key)) {
                      if (oldValue[key] !== newValue[key]) {
                        changeDetected++;
                        oldValue[key] = newValue[key];
                      }
                    } else {
                      oldLength++;
                      oldValue[key] = newValue[key];
                      changeDetected++;
                    }
                  }
                }
                if (oldLength > newLength) {
                  // we used to have more keys, need to find them and destroy them.
                  changeDetected++;
                  for(key in oldValue) {
                    if (oldValue.hasOwnProperty(key) && !newValue.hasOwnProperty(key)) {
                      oldLength--;
                      delete oldValue[key];
                    }
                  }
                }
              }
              return changeDetected;
            }

            function $watchCollectionAction() {
              if (initRun) {
                initRun = false;
                listener(newValue, newValue, self);
              } else {
                listener(newValue, veryOldValue, self);
              }

              // make a copy for the next time a collection is changed
              if (trackVeryOldValue) {
                if (!isObject(newValue)) {
                  //primitive
                  veryOldValue = newValue;
                } else if (isArrayLike(newValue)) {
                  veryOldValue = new Array(newValue.length);
                  for (var i = 0; i < newValue.length; i++) {
                    veryOldValue[i] = newValue[i];
                  }
                } else { // if object
                  veryOldValue = {};
                  for (var key in newValue) {
                    if (hasOwnProperty.call(newValue, key)) {
                      veryOldValue[key] = newValue[key];
                    }
                  }
                }
              }
            }

            return this.$watch($watchCollectionWatch, $watchCollectionAction);
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$digest
           * @kind function
           *
           * @description
           * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
           * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
           * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
           * until no more listeners are firing. This means that it is possible to get into an infinite
           * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
           * iterations exceeds 10.
           *
           * Usually, you don't call `$digest()` directly in
           * {@link ng.directive:ngController controllers} or in
           * {@link ng.$compileProvider#directive directives}.
           * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
           * a {@link ng.$compileProvider#directive directives}), which will force a `$digest()`.
           *
           * If you want to be notified whenever `$digest()` is called,
           * you can register a `watchExpression` function with
           * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
           *
           * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
           *
           * # Example
           * ```js
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);
           * ```
           *
           */
          $digest: function() {
            var watch, value, last,
              watchers,
              asyncQueue = this.$$asyncQueue,
              postDigestQueue = this.$$postDigestQueue,
              length,
              dirty, ttl = TTL,
              next, current, target = this,
              watchLog = [],
              logIdx, logMsg, asyncTask;

            beginPhase('$digest');

            lastDirtyWatch = null;

            do { // "while dirty" loop
              dirty = false;
              current = target;

              while(asyncQueue.length) {
                try {
                  asyncTask = asyncQueue.shift();
                  asyncTask.scope.$eval(asyncTask.expression);
                } catch (e) {
                  clearPhase();
                  $exceptionHandler(e);
                }
                lastDirtyWatch = null;
              }

              traverseScopesLoop:
                do { // "traverse the scopes" loop
                  if ((watchers = current.$$watchers)) {
                    // process our watches
                    length = watchers.length;
                    while (length--) {
                      try {
                        watch = watchers[length];
                        // Most common watches are on primitives, in which case we can short
                        // circuit it with === operator, only when === fails do we use .equals
                        if (watch) {
                          if ((value = watch.get(current)) !== (last = watch.last) &&
                            !(watch.eq
                              ? equals(value, last)
                              : (typeof value == 'number' && typeof last == 'number'
                              && isNaN(value) && isNaN(last)))) {
                            dirty = true;
                            lastDirtyWatch = watch;
                            watch.last = watch.eq ? copy(value, null) : value;
                            watch.fn(value, ((last === initWatchVal) ? value : last), current);
                            if (ttl < 5) {
                              logIdx = 4 - ttl;
                              if (!watchLog[logIdx]) watchLog[logIdx] = [];
                              logMsg = (isFunction(watch.exp))
                                ? 'fn: ' + (watch.exp.name || watch.exp.toString())
                                : watch.exp;
                              logMsg += '; newVal: ' + toJson(value) + '; oldVal: ' + toJson(last);
                              watchLog[logIdx].push(logMsg);
                            }
                          } else if (watch === lastDirtyWatch) {
                            // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                            // have already been tested.
                            dirty = false;
                            break traverseScopesLoop;
                          }
                        }
                      } catch (e) {
                        clearPhase();
                        $exceptionHandler(e);
                      }
                    }
                  }

                  // Insanity Warning: scope depth-first traversal
                  // yes, this code is a bit crazy, but it works and we have tests to prove it!
                  // this piece should be kept in sync with the traversal in $broadcast
                  if (!(next = (current.$$childHead ||
                    (current !== target && current.$$nextSibling)))) {
                    while(current !== target && !(next = current.$$nextSibling)) {
                      current = current.$parent;
                    }
                  }
                } while ((current = next));

              // `break traverseScopesLoop;` takes us to here

              if((dirty || asyncQueue.length) && !(ttl--)) {
                clearPhase();
                throw $rootScopeMinErr('infdig',
                    '{0} $digest() iterations reached. Aborting!\n' +
                    'Watchers fired in the last 5 iterations: {1}',
                  TTL, toJson(watchLog));
              }

            } while (dirty || asyncQueue.length);

            clearPhase();

            while(postDigestQueue.length) {
              try {
                postDigestQueue.shift()();
              } catch (e) {
                $exceptionHandler(e);
              }
            }
          },


          /**
           * @ngdoc event
           * @name $rootScope.Scope#$destroy
           * @eventType broadcast on scope being destroyed
           *
           * @description
           * Broadcasted when a scope and its children are being destroyed.
           *
           * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
           * clean up DOM bindings before an element is removed from the DOM.
           */

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$destroy
           * @kind function
           *
           * @description
           * Removes the current scope (and all of its children) from the parent scope. Removal implies
           * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
           * propagate to the current scope and its children. Removal also implies that the current
           * scope is eligible for garbage collection.
           *
           * The `$destroy()` is usually used by directives such as
           * {@link ng.directive:ngRepeat ngRepeat} for managing the
           * unrolling of the loop.
           *
           * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
           * Application code can register a `$destroy` event handler that will give it a chance to
           * perform any necessary cleanup.
           *
           * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
           * clean up DOM bindings before an element is removed from the DOM.
           */
          $destroy: function() {
            // we can't destroy the root scope or a scope that has been already destroyed
            if (this.$$destroyed) return;
            var parent = this.$parent;

            this.$broadcast('$destroy');
            this.$$destroyed = true;
            if (this === $rootScope) return;

            forEach(this.$$listenerCount, bind(null, decrementListenerCount, this));

            // sever all the references to parent scopes (after this cleanup, the current scope should
            // not be retained by any of our references and should be eligible for garbage collection)
            if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
            if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
            if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
            if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;


            // All of the code below is bogus code that works around V8's memory leak via optimized code
            // and inline caches.
            //
            // see:
            // - https://code.google.com/p/v8/issues/detail?id=2073#c26
            // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
            // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

            this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
              this.$$childTail = this.$root = null;

            // don't reset these to null in case some async task tries to register a listener/watch/task
            this.$$listeners = {};
            this.$$watchers = this.$$asyncQueue = this.$$postDigestQueue = [];

            // prevent NPEs since these methods have references to properties we nulled out
            this.$destroy = this.$digest = this.$apply = noop;
            this.$on = this.$watch = function() { return noop; };
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$eval
           * @kind function
           *
           * @description
           * Executes the `expression` on the current scope and returns the result. Any exceptions in
           * the expression are propagated (uncaught). This is useful when evaluating Angular
           * expressions.
           *
           * # Example
           * ```js
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
           * ```
           *
           * @param {(string|function())=} expression An angular expression to be executed.
           *
           *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
           *    - `function(scope)`: execute the function with the current `scope` parameter.
           *
           * @param {(object)=} locals Local variables object, useful for overriding values in scope.
           * @returns {*} The result of evaluating the expression.
           */
          $eval: function(expr, locals) {
            return $parse(expr)(this, locals);
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$evalAsync
           * @kind function
           *
           * @description
           * Executes the expression on the current scope at a later point in time.
           *
           * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
           * that:
           *
           *   - it will execute after the function that scheduled the evaluation (preferably before DOM
           *     rendering).
           *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
           *     `expression` execution.
           *
           * Any exceptions from the execution of the expression are forwarded to the
           * {@link ng.$exceptionHandler $exceptionHandler} service.
           *
           * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
           * will be scheduled. However, it is encouraged to always call code that changes the model
           * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
           *
           * @param {(string|function())=} expression An angular expression to be executed.
           *
           *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
           *    - `function(scope)`: execute the function with the current `scope` parameter.
           *
           */
          $evalAsync: function(expr) {
            // if we are outside of an $digest loop and this is the first time we are scheduling async
            // task also schedule async auto-flush
            if (!$rootScope.$$phase && !$rootScope.$$asyncQueue.length) {
              $browser.defer(function() {
                if ($rootScope.$$asyncQueue.length) {
                  $rootScope.$digest();
                }
              });
            }

            this.$$asyncQueue.push({scope: this, expression: expr});
          },

          $$postDigest : function(fn) {
            this.$$postDigestQueue.push(fn);
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$apply
           * @kind function
           *
           * @description
           * `$apply()` is used to execute an expression in angular from outside of the angular
           * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
           * Because we are calling into the angular framework we need to perform proper scope life
           * cycle of {@link ng.$exceptionHandler exception handling},
           * {@link ng.$rootScope.Scope#$digest executing watches}.
           *
           * ## Life cycle
           *
           * # Pseudo-Code of `$apply()`
           * ```js
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
           * ```
           *
           *
           * Scope's `$apply()` method transitions through the following stages:
           *
           * 1. The {@link guide/expression expression} is executed using the
           *    {@link ng.$rootScope.Scope#$eval $eval()} method.
           * 2. Any exceptions from the execution of the expression are forwarded to the
           *    {@link ng.$exceptionHandler $exceptionHandler} service.
           * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
           *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
           *
           *
           * @param {(string|function())=} exp An angular expression to be executed.
           *
           *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
           *    - `function(scope)`: execute the function with current `scope` parameter.
           *
           * @returns {*} The result of evaluating the expression.
           */
          $apply: function(expr) {
            try {
              beginPhase('$apply');
              return this.$eval(expr);
            } catch (e) {
              $exceptionHandler(e);
            } finally {
              clearPhase();
              try {
                $rootScope.$digest();
              } catch (e) {
                $exceptionHandler(e);
                throw e;
              }
            }
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$on
           * @kind function
           *
           * @description
           * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
           * discussion of event life cycle.
           *
           * The event listener function format is: `function(event, args...)`. The `event` object
           * passed into the listener has the following attributes:
           *
           *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
           *     `$broadcast`-ed.
           *   - `currentScope` - `{Scope}`: the current scope which is handling the event.
           *   - `name` - `{string}`: name of the event.
           *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
           *     further event propagation (available only for events that were `$emit`-ed).
           *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
           *     to true.
           *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
           *
           * @param {string} name Event name to listen on.
           * @param {function(event, ...args)} listener Function to call when the event is emitted.
           * @returns {function()} Returns a deregistration function for this listener.
           */
          $on: function(name, listener) {
            var namedListeners = this.$$listeners[name];
            if (!namedListeners) {
              this.$$listeners[name] = namedListeners = [];
            }
            namedListeners.push(listener);

            var current = this;
            do {
              if (!current.$$listenerCount[name]) {
                current.$$listenerCount[name] = 0;
              }
              current.$$listenerCount[name]++;
            } while ((current = current.$parent));

            var self = this;
            return function() {
              namedListeners[indexOf(namedListeners, listener)] = null;
              decrementListenerCount(self, 1, name);
            };
          },


          /**
           * @ngdoc method
           * @name $rootScope.Scope#$emit
           * @kind function
           *
           * @description
           * Dispatches an event `name` upwards through the scope hierarchy notifying the
           * registered {@link ng.$rootScope.Scope#$on} listeners.
           *
           * The event life cycle starts at the scope on which `$emit` was called. All
           * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
           * notified. Afterwards, the event traverses upwards toward the root scope and calls all
           * registered listeners along the way. The event will stop propagating if one of the listeners
           * cancels it.
           *
           * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
           * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
           *
           * @param {string} name Event name to emit.
           * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
           * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
           */
          $emit: function(name, args) {
            var empty = [],
              namedListeners,
              scope = this,
              stopPropagation = false,
              event = {
                name: name,
                targetScope: scope,
                stopPropagation: function() {stopPropagation = true;},
                preventDefault: function() {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              },
              listenerArgs = concat([event], arguments, 1),
              i, length;

            do {
              namedListeners = scope.$$listeners[name] || empty;
              event.currentScope = scope;
              for (i=0, length=namedListeners.length; i<length; i++) {

                // if listeners were deregistered, defragment the array
                if (!namedListeners[i]) {
                  namedListeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }
                try {
                  //allow all listeners attached to the current scope to run
                  namedListeners[i].apply(null, listenerArgs);
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              //if any listener on the current scope stops propagation, prevent bubbling
              if (stopPropagation) return event;
              //traverse upwards
              scope = scope.$parent;
            } while (scope);

            return event;
          },


          /**
           * @ngdoc method
           * @name $rootScope.Scope#$broadcast
           * @kind function
           *
           * @description
           * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
           * registered {@link ng.$rootScope.Scope#$on} listeners.
           *
           * The event life cycle starts at the scope on which `$broadcast` was called. All
           * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
           * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
           * scope and calls all registered listeners along the way. The event cannot be canceled.
           *
           * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
           * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
           *
           * @param {string} name Event name to broadcast.
           * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
           * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
           */
          $broadcast: function(name, args) {
            var target = this,
              current = target,
              next = target,
              event = {
                name: name,
                targetScope: target,
                preventDefault: function() {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              },
              listenerArgs = concat([event], arguments, 1),
              listeners, i, length;

            //down while you can, then up and next sibling or up and next sibling until back at root
            while ((current = next)) {
              event.currentScope = current;
              listeners = current.$$listeners[name] || [];
              for (i=0, length = listeners.length; i<length; i++) {
                // if listeners were deregistered, defragment the array
                if (!listeners[i]) {
                  listeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }

                try {
                  listeners[i].apply(null, listenerArgs);
                } catch(e) {
                  $exceptionHandler(e);
                }
              }

              // Insanity Warning: scope depth-first traversal
              // yes, this code is a bit crazy, but it works and we have tests to prove it!
              // this piece should be kept in sync with the traversal in $digest
              // (though it differs due to having the extra check for $$listenerCount)
              if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
                (current !== target && current.$$nextSibling)))) {
                while(current !== target && !(next = current.$$nextSibling)) {
                  current = current.$parent;
                }
              }
            }

            return event;
          }
        };

        var $rootScope = new Scope();

        return $rootScope;


        function beginPhase(phase) {
          if ($rootScope.$$phase) {
            throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
          }

          $rootScope.$$phase = phase;
        }

        function clearPhase() {
          $rootScope.$$phase = null;
        }

        function compileToFn(exp, name) {
          var fn = $parse(exp);
          assertArgFn(fn, name);
          return fn;
        }

        function decrementListenerCount(current, count, name) {
          do {
            current.$$listenerCount[name] -= count;

            if (current.$$listenerCount[name] === 0) {
              delete current.$$listenerCount[name];
            }
          } while ((current = current.$parent));
        }

        /**
         * function used as an initial value for watchers.
         * because it's unique we can easily tell it apart from other values
         */
        function initWatchVal() {}
      }];
  }

  /**
   * @description
   * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
   */
  function $$SanitizeUriProvider() {
    var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
      imgSrcSanitizationWhitelist = /^\s*(https?|ftp|file):|data:image\//;

    /**
     * @description
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe
     * urls during a[href] sanitization.
     *
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.
     *
     * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
     * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
     *
     * @param {RegExp=} regexp New regexp to whitelist urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.aHrefSanitizationWhitelist = function(regexp) {
      if (isDefined(regexp)) {
        aHrefSanitizationWhitelist = regexp;
        return this;
      }
      return aHrefSanitizationWhitelist;
    };


    /**
     * @description
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe
     * urls during img[src] sanitization.
     *
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.
     *
     * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
     * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
     *
     * @param {RegExp=} regexp New regexp to whitelist urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.imgSrcSanitizationWhitelist = function(regexp) {
      if (isDefined(regexp)) {
        imgSrcSanitizationWhitelist = regexp;
        return this;
      }
      return imgSrcSanitizationWhitelist;
    };

    this.$get = function() {
      return function sanitizeUri(uri, isImage) {
        var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
        var normalizedVal;
        // NOTE: urlResolve() doesn't support IE < 8 so we don't sanitize for that case.
        if (!msie || msie >= 8 ) {
          normalizedVal = urlResolve(uri).href;
          if (normalizedVal !== '' && !normalizedVal.match(regex)) {
            return 'unsafe:'+normalizedVal;
          }
        }
        return uri;
      };
    };
  }

  var $sceMinErr = minErr('$sce');

  var SCE_CONTEXTS = {
    HTML: 'html',
    CSS: 'css',
    URL: 'url',
    // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
    // url.  (e.g. ng-include, script src, templateUrl)
    RESOURCE_URL: 'resourceUrl',
    JS: 'js'
  };

// Helper functions follow.

// Copied from:
// http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962
// Prereq: s is a string.
  function escapeForRegexp(s) {
    return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
      replace(/\x08/g, '\\x08');
  }


  function adjustMatcher(matcher) {
    if (matcher === 'self') {
      return matcher;
    } else if (isString(matcher)) {
      // Strings match exactly except for 2 wildcards - '*' and '**'.
      // '*' matches any character except those from the set ':/.?&'.
      // '**' matches any character (like .* in a RegExp).
      // More than 2 *'s raises an error as it's ill defined.
      if (matcher.indexOf('***') > -1) {
        throw $sceMinErr('iwcard',
          'Illegal sequence *** in string matcher.  String: {0}', matcher);
      }
      matcher = escapeForRegexp(matcher).
        replace('\\*\\*', '.*').
        replace('\\*', '[^:/.?&;]*');
      return new RegExp('^' + matcher + '$');
    } else if (isRegExp(matcher)) {
      // The only other type of matcher allowed is a Regexp.
      // Match entire URL / disallow partial matches.
      // Flags are reset (i.e. no global, ignoreCase or multiline)
      return new RegExp('^' + matcher.source + '$');
    } else {
      throw $sceMinErr('imatcher',
        'Matchers may only be "self", string patterns or RegExp objects');
    }
  }


  function adjustMatchers(matchers) {
    var adjustedMatchers = [];
    if (isDefined(matchers)) {
      forEach(matchers, function(matcher) {
        adjustedMatchers.push(adjustMatcher(matcher));
      });
    }
    return adjustedMatchers;
  }


  /**
   * @ngdoc service
   * @name $sceDelegate
   * @kind function
   *
   * @description
   *
   * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
   *
   * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
   * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
   * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
   * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
   * work because `$sce` delegates to `$sceDelegate` for these operations.
   *
   * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
   *
   * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
   * can override it completely to change the behavior of `$sce`, the common case would
   * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
   * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
   * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
    * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
   */

  /**
   * @ngdoc provider
   * @name $sceDelegateProvider
   * @description
   *
   * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
   * that the URLs used for sourcing Angular templates are safe.  Refer {@link
    * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
   * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
   *
   * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
   *
   * **Example**:  Consider the following case. <a name="example"></a>
   *
   * - your app is hosted at url `http://myapp.example.com/`
   * - but some of your templates are hosted on other domains you control such as
   *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
   * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
   *
   * Here is what a secure configuration for this scenario might look like:
   *
   * <pre class="prettyprint">
   *    angular.module('myApp', []).config(function($sceDelegateProvider) {
 *      $sceDelegateProvider.resourceUrlWhitelist([
 *        // Allow same origin resource loads.
 *        'self',
 *        // Allow loading from our assets domain.  Notice the difference between * and **.
 *        'http://srv*.assets.example.com/**']);
 *
 *      // The blacklist overrides the whitelist so the open redirect here is blocked.
 *      $sceDelegateProvider.resourceUrlBlacklist([
 *        'http://myapp.example.com/clickThru**']);
 *      });
   * </pre>
   */

  function $SceDelegateProvider() {
    this.SCE_CONTEXTS = SCE_CONTEXTS;

    // Resource URLs can also be trusted by policy.
    var resourceUrlWhitelist = ['self'],
      resourceUrlBlacklist = [];

    /**
     * @ngdoc method
     * @name $sceDelegateProvider#resourceUrlWhitelist
     * @kind function
     *
     * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
     *     provided.  This must be an array or null.  A snapshot of this array is used so further
     *     changes to the array are ignored.
     *
     *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
     *     allowed in this array.
     *
     *     Note: **an empty whitelist array will block all URLs**!
     *
     * @return {Array} the currently set whitelist array.
     *
     * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
     * same origin resource requests.
     *
     * @description
     * Sets/Gets the whitelist of trusted resource URLs.
     */
    this.resourceUrlWhitelist = function (value) {
      if (arguments.length) {
        resourceUrlWhitelist = adjustMatchers(value);
      }
      return resourceUrlWhitelist;
    };

    /**
     * @ngdoc method
     * @name $sceDelegateProvider#resourceUrlBlacklist
     * @kind function
     *
     * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
     *     provided.  This must be an array or null.  A snapshot of this array is used so further
     *     changes to the array are ignored.
     *
     *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
     *     allowed in this array.
     *
     *     The typical usage for the blacklist is to **block
     *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
     *     these would otherwise be trusted but actually return content from the redirected domain.
     *
     *     Finally, **the blacklist overrides the whitelist** and has the final say.
     *
     * @return {Array} the currently set blacklist array.
     *
     * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
     * is no blacklist.)
     *
     * @description
     * Sets/Gets the blacklist of trusted resource URLs.
     */

    this.resourceUrlBlacklist = function (value) {
      if (arguments.length) {
        resourceUrlBlacklist = adjustMatchers(value);
      }
      return resourceUrlBlacklist;
    };

    this.$get = ['$injector', function($injector) {

      var htmlSanitizer = function htmlSanitizer(html) {
        throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
      };

      if ($injector.has('$sanitize')) {
        htmlSanitizer = $injector.get('$sanitize');
      }


      function matchUrl(matcher, parsedUrl) {
        if (matcher === 'self') {
          return urlIsSameOrigin(parsedUrl);
        } else {
          // definitely a regex.  See adjustMatchers()
          return !!matcher.exec(parsedUrl.href);
        }
      }

      function isResourceUrlAllowedByPolicy(url) {
        var parsedUrl = urlResolve(url.toString());
        var i, n, allowed = false;
        // Ensure that at least one item from the whitelist allows this url.
        for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
          if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
            allowed = true;
            break;
          }
        }
        if (allowed) {
          // Ensure that no item from the blacklist blocked this url.
          for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
            if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
              allowed = false;
              break;
            }
          }
        }
        return allowed;
      }

      function generateHolderType(Base) {
        var holderType = function TrustedValueHolderType(trustedValue) {
          this.$$unwrapTrustedValue = function() {
            return trustedValue;
          };
        };
        if (Base) {
          holderType.prototype = new Base();
        }
        holderType.prototype.valueOf = function sceValueOf() {
          return this.$$unwrapTrustedValue();
        };
        holderType.prototype.toString = function sceToString() {
          return this.$$unwrapTrustedValue().toString();
        };
        return holderType;
      }

      var trustedValueHolderBase = generateHolderType(),
        byType = {};

      byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
      byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
      byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
      byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
      byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

      /**
       * @ngdoc method
       * @name $sceDelegate#trustAs
       *
       * @description
       * Returns an object that is trusted by angular for use in specified strict
       * contextual escaping contexts (such as ng-bind-html, ng-include, any src
       * attribute interpolation, any dom event binding attribute interpolation
       * such as for onclick,  etc.) that uses the provided value.
       * See {@link ng.$sce $sce} for enabling strict contextual escaping.
       *
       * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
       *   resourceUrl, html, js and css.
       * @param {*} value The value that that should be considered trusted/safe.
       * @returns {*} A value that can be used to stand in for the provided `value` in places
       * where Angular expects a $sce.trustAs() return value.
       */
      function trustAs(type, trustedValue) {
        var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
        if (!Constructor) {
          throw $sceMinErr('icontext',
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
            type, trustedValue);
        }
        if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
          return trustedValue;
        }
        // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
        // mutable objects, we ensure here that the value passed in is actually a string.
        if (typeof trustedValue !== 'string') {
          throw $sceMinErr('itype',
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
            type);
        }
        return new Constructor(trustedValue);
      }

      /**
       * @ngdoc method
       * @name $sceDelegate#valueOf
       *
       * @description
       * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
        * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
       *
       * If the passed parameter is not a value that had been returned by {@link
        * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
       *
       * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
       *      call or anything else.
       * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
       *     `value` unchanged.
       */
      function valueOf(maybeTrusted) {
        if (maybeTrusted instanceof trustedValueHolderBase) {
          return maybeTrusted.$$unwrapTrustedValue();
        } else {
          return maybeTrusted;
        }
      }

      /**
       * @ngdoc method
       * @name $sceDelegate#getTrusted
       *
       * @description
       * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
       * returns the originally supplied value if the queried context type is a supertype of the
       * created type.  If this condition isn't satisfied, throws an exception.
       *
       * @param {string} type The kind of context in which this value is to be used.
       * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
       * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
       */
      function getTrusted(type, maybeTrusted) {
        if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
          return maybeTrusted;
        }
        var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
        if (constructor && maybeTrusted instanceof constructor) {
          return maybeTrusted.$$unwrapTrustedValue();
        }
        // If we get here, then we may only take one of two actions.
        // 1. sanitize the value for the requested type, or
        // 2. throw an exception.
        if (type === SCE_CONTEXTS.RESOURCE_URL) {
          if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
            return maybeTrusted;
          } else {
            throw $sceMinErr('insecurl',
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
              maybeTrusted.toString());
          }
        } else if (type === SCE_CONTEXTS.HTML) {
          return htmlSanitizer(maybeTrusted);
        }
        throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
      }

      return { trustAs: trustAs,
        getTrusted: getTrusted,
        valueOf: valueOf };
    }];
  }


  /**
   * @ngdoc provider
   * @name $sceProvider
   * @description
   *
   * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
   * -   enable/disable Strict Contextual Escaping (SCE) in a module
   * -   override the default implementation with a custom delegate
   *
   * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
   */

  /* jshint maxlen: false*/

  /**
   * @ngdoc service
   * @name $sce
   * @kind function
   *
   * @description
   *
   * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
   *
   * # Strict Contextual Escaping
   *
   * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
   * contexts to result in a value that is marked as safe to use for that context.  One example of
   * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
   * to these contexts as privileged or SCE contexts.
   *
   * As of version 1.2, Angular ships with SCE enabled by default.
   *
   * Note:  When enabled (the default), IE8 in quirks mode is not supported.  In this mode, IE8 allows
   * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
   * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
   * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
   * to the top of your HTML document.
   *
   * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
   * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
   *
   * Here's an example of a binding in a privileged context:
   *
   * <pre class="prettyprint">
   *     <input ng-model="userHtml">
   *     <div ng-bind-html="userHtml">
   * </pre>
   *
   * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
   * disabled, this application allows the user to render arbitrary HTML into the DIV.
   * In a more realistic example, one may be rendering user comments, blog articles, etc. via
   * bindings.  (HTML is just one example of a context where rendering user controlled input creates
   * security vulnerabilities.)
   *
   * For the case of HTML, you might use a library, either on the client side, or on the server side,
   * to sanitize unsafe HTML before binding to the value and rendering it in the document.
   *
   * How would you ensure that every place that used these types of bindings was bound to a value that
   * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
   * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
   * properties/fields and forgot to update the binding to the sanitized value?
   *
   * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
   * determine that something explicitly says it's safe to use a value for binding in that
   * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
   * for those values that you can easily tell are safe - because they were received from your server,
   * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
   * allowing only the files in a specific directory to do this.  Ensuring that the internal API
   * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
   *
   * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
   * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
   * obtain values that will be accepted by SCE / privileged contexts.
   *
   *
   * ## How does it work?
   *
   * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
    * ng.$sce#parse $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
   * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
   *
   * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
    * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
   * simplified):
   *
   * <pre class="prettyprint">
   *   var ngBindHtmlDirective = ['$sce', function($sce) {
 *     return function(scope, element, attr) {
 *       scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *         element.html(value || '');
 *       });
 *     };
 *   }];
   * </pre>
   *
   * ## Impact on loading templates
   *
   * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
   * `templateUrl`'s specified by {@link guide/directive directives}.
   *
   * By default, Angular only loads templates from the same domain and protocol as the application
   * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
   * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
   *
   * *Please note*:
   * The browser's
   * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
   * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
   * policy apply in addition to this and may further restrict whether the template is successfully
   * loaded.  This means that without the right CORS policy, loading templates from a different domain
   * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
   * browsers.
   *
   * ## This feels like too much overhead for the developer?
   *
   * It's important to remember that SCE only applies to interpolation expressions.
   *
   * If your expressions are constant literals, they're automatically trusted and you don't need to
   * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
   * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
   *
   * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
   * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
   *
   * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
   * templates in `ng-include` from your application's domain without having to even know about SCE.
   * It blocks loading templates from other domains or loading templates over http from an https
   * served document.  You can change these by setting your own custom {@link
    * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
    * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
   *
   * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
   * application that's secure and can be audited to verify that with much more ease than bolting
   * security onto an application later.
   *
   * <a name="contexts"></a>
   * ## What trusted context types are supported?
   *
   * | Context             | Notes          |
   * |---------------------|----------------|
   * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
   * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
   * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
   * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
   * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
   *
   * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
   *
   *  Each element in these arrays must be one of the following:
   *
   *  - **'self'**
   *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
   *      domain** as the application document using the **same protocol**.
   *  - **String** (except the special value `'self'`)
   *    - The string is matched against the full *normalized / absolute URL* of the resource
   *      being tested (substring matches are not good enough.)
   *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
   *      match themselves.
   *    - `*`: matches zero or more occurrences of any character other than one of the following 6
   *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
   *      in a whitelist.
   *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
   *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
   *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
   *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
   *      http://foo.example.com/templates/**).
   *  - **RegExp** (*see caveat below*)
   *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
   *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
   *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
   *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
   *      small number of cases.  A `.` character in the regex used when matching the scheme or a
   *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
   *      is highly recommended to use the string patterns and only fall back to regular expressions
   *      if they as a last resort.
   *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
   *      matched against the **entire** *normalized / absolute URL* of the resource being tested
   *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
   *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
   *    - If you are generating your JavaScript from some other templating engine (not
   *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
   *      remember to escape your regular expression (and be aware that you might need more than
   *      one level of escaping depending on your templating engine and the way you interpolated
   *      the value.)  Do make use of your platform's escaping mechanism as it might be good
   *      enough before coding your own.  e.g. Ruby has
   *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
   *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
   *      Javascript lacks a similar built in function for escaping.  Take a look at Google
   *      Closure library's [goog.string.regExpEscape(s)](
   *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
   *
   * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
   *
   * ## Show me an example using SCE.
   *
   * @example
   <example module="mySceApp" deps="angular-sanitize.js">
   <file name="index.html">
   <div ng-controller="myAppController as myCtrl">
   <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
   <b>User comments</b><br>
   By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
   $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
   exploit.
   <div class="well">
   <div ng-repeat="userComment in myCtrl.userComments">
   <b>{{userComment.name}}</b>:
   <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
   <br>
   </div>
   </div>
   </div>
   </file>

   <file name="script.js">
   var mySceApp = angular.module('mySceApp', ['ngSanitize']);

   mySceApp.controller("myAppController", function myAppController($http, $templateCache, $sce) {
    var self = this;
    $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
      self.userComments = userComments;
    });
    self.explicitlyTrustedHtml = $sce.trustAsHtml(
        '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
        'sanitization.&quot;">Hover over this text.</span>');
  });
   </file>

   <file name="test_data.json">
   [
   { "name": "Alice",
    "htmlComment":
        "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
  },
   { "name": "Bob",
    "htmlComment": "<i>Yes!</i>  Am I the only other one?"
  }
   ]
   </file>

   <file name="protractor.js" type="protractor">
   describe('SCE doc demo', function() {
    it('should sanitize untrusted values', function() {
      expect(element(by.css('.htmlComment')).getInnerHtml())
          .toBe('<span>Is <i>anyone</i> reading this?</span>');
    });

    it('should NOT sanitize explicitly trusted values', function() {
      expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
          '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
          'sanitization.&quot;">Hover over this text.</span>');
    });
  });
   </file>
   </example>
   *
   *
   *
   * ## Can I disable SCE completely?
   *
   * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
   * for little coding overhead.  It will be much harder to take an SCE disabled application and
   * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
   * for cases where you have a lot of existing code that was written before SCE was introduced and
   * you're migrating them a module at a time.
   *
   * That said, here's how you can completely disable SCE:
   *
   * <pre class="prettyprint">
   *   angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *     // Completely disable SCE.  For demonstration purposes only!
 *     // Do not use in new projects.
 *     $sceProvider.enabled(false);
 *   });
   * </pre>
   *
   */
  /* jshint maxlen: 100 */

  function $SceProvider() {
    var enabled = true;

    /**
     * @ngdoc method
     * @name $sceProvider#enabled
     * @kind function
     *
     * @param {boolean=} value If provided, then enables/disables SCE.
     * @return {boolean} true if SCE is enabled, false otherwise.
     *
     * @description
     * Enables/disables SCE and returns the current value.
     */
    this.enabled = function (value) {
      if (arguments.length) {
        enabled = !!value;
      }
      return enabled;
    };


    /* Design notes on the default implementation for SCE.
     *
     * The API contract for the SCE delegate
     * -------------------------------------
     * The SCE delegate object must provide the following 3 methods:
     *
     * - trustAs(contextEnum, value)
     *     This method is used to tell the SCE service that the provided value is OK to use in the
     *     contexts specified by contextEnum.  It must return an object that will be accepted by
     *     getTrusted() for a compatible contextEnum and return this value.
     *
     * - valueOf(value)
     *     For values that were not produced by trustAs(), return them as is.  For values that were
     *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
     *     trustAs is wrapping the given values into some type, this operation unwraps it when given
     *     such a value.
     *
     * - getTrusted(contextEnum, value)
     *     This function should return the a value that is safe to use in the context specified by
     *     contextEnum or throw and exception otherwise.
     *
     * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
     * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
     * instance, an implementation could maintain a registry of all trusted objects by context.  In
     * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
     * return the same object passed in if it was found in the registry under a compatible context or
     * throw an exception otherwise.  An implementation might only wrap values some of the time based
     * on some criteria.  getTrusted() might return a value and not throw an exception for special
     * constants or objects even if not wrapped.  All such implementations fulfill this contract.
     *
     *
     * A note on the inheritance model for SCE contexts
     * ------------------------------------------------
     * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
     * is purely an implementation details.
     *
     * The contract is simply this:
     *
     *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
     *     will also succeed.
     *
     * Inheritance happens to capture this in a natural way.  In some future, we
     * may not use inheritance anymore.  That is OK because no code outside of
     * sce.js and sceSpecs.js would need to be aware of this detail.
     */

    this.$get = ['$parse', '$sniffer', '$sceDelegate', function(
      $parse,   $sniffer,   $sceDelegate) {
      // Prereq: Ensure that we're not running in IE8 quirks mode.  In that mode, IE allows
      // the "expression(javascript expression)" syntax which is insecure.
      if (enabled && $sniffer.msie && $sniffer.msieDocumentMode < 8) {
        throw $sceMinErr('iequirks',
            'Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks ' +
            'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
            'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
      }

      var sce = shallowCopy(SCE_CONTEXTS);

      /**
       * @ngdoc method
       * @name $sce#isEnabled
       * @kind function
       *
       * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
       * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
       *
       * @description
       * Returns a boolean indicating if SCE is enabled.
       */
      sce.isEnabled = function () {
        return enabled;
      };
      sce.trustAs = $sceDelegate.trustAs;
      sce.getTrusted = $sceDelegate.getTrusted;
      sce.valueOf = $sceDelegate.valueOf;

      if (!enabled) {
        sce.trustAs = sce.getTrusted = function(type, value) { return value; };
        sce.valueOf = identity;
      }

      /**
       * @ngdoc method
       * @name $sce#parse
       *
       * @description
       * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
        * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
       * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
       *
       * @param {string} type The kind of SCE context in which this result will be used.
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */
      sce.parseAs = function sceParseAs(type, expr) {
        var parsed = $parse(expr);
        if (parsed.literal && parsed.constant) {
          return parsed;
        } else {
          return function sceParseAsTrusted(self, locals) {
            return sce.getTrusted(type, parsed(self, locals));
          };
        }
      };

      /**
       * @ngdoc method
       * @name $sce#trustAs
       *
       * @description
       * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
       * returns an object that is trusted by angular for use in specified strict contextual
       * escaping contexts (such as ng-bind-html, ng-include, any src attribute
       * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
       * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
       * escaping.
       *
       * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
       *   resource_url, html, js and css.
       * @param {*} value The value that that should be considered trusted/safe.
       * @returns {*} A value that can be used to stand in for the provided `value` in places
       * where Angular expects a $sce.trustAs() return value.
       */

      /**
       * @ngdoc method
       * @name $sce#trustAsHtml
       *
       * @description
       * Shorthand method.  `$sce.trustAsHtml(value)` →
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
       *
       * @param {*} value The value to trustAs.
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
       *     only accept expressions that are either literal constants or are the
       *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
       */

      /**
       * @ngdoc method
       * @name $sce#trustAsUrl
       *
       * @description
       * Shorthand method.  `$sce.trustAsUrl(value)` →
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
       *
       * @param {*} value The value to trustAs.
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
       *     only accept expressions that are either literal constants or are the
       *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
       */

      /**
       * @ngdoc method
       * @name $sce#trustAsResourceUrl
       *
       * @description
       * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
       *
       * @param {*} value The value to trustAs.
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
       *     only accept expressions that are either literal constants or are the return
       *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
       */

      /**
       * @ngdoc method
       * @name $sce#trustAsJs
       *
       * @description
       * Shorthand method.  `$sce.trustAsJs(value)` →
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
       *
       * @param {*} value The value to trustAs.
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
       *     only accept expressions that are either literal constants or are the
       *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
       */

      /**
       * @ngdoc method
       * @name $sce#getTrusted
       *
       * @description
       * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
       * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
       * originally supplied value if the queried context type is a supertype of the created type.
       * If this condition isn't satisfied, throws an exception.
       *
       * @param {string} type The kind of context in which this value is to be used.
       * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
       *                         call.
       * @returns {*} The value the was originally provided to
       *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
       *              Otherwise, throws an exception.
       */

      /**
       * @ngdoc method
       * @name $sce#getTrustedHtml
       *
       * @description
       * Shorthand method.  `$sce.getTrustedHtml(value)` →
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
       *
       * @param {*} value The value to pass to `$sce.getTrusted`.
       * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
       */

      /**
       * @ngdoc method
       * @name $sce#getTrustedCss
       *
       * @description
       * Shorthand method.  `$sce.getTrustedCss(value)` →
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
       *
       * @param {*} value The value to pass to `$sce.getTrusted`.
       * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
       */

      /**
       * @ngdoc method
       * @name $sce#getTrustedUrl
       *
       * @description
       * Shorthand method.  `$sce.getTrustedUrl(value)` →
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
       *
       * @param {*} value The value to pass to `$sce.getTrusted`.
       * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
       */

      /**
       * @ngdoc method
       * @name $sce#getTrustedResourceUrl
       *
       * @description
       * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
       *
       * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
       * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
       */

      /**
       * @ngdoc method
       * @name $sce#getTrustedJs
       *
       * @description
       * Shorthand method.  `$sce.getTrustedJs(value)` →
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
       *
       * @param {*} value The value to pass to `$sce.getTrusted`.
       * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
       */

      /**
       * @ngdoc method
       * @name $sce#parseAsHtml
       *
       * @description
       * Shorthand method.  `$sce.parseAsHtml(expression string)` →
       *     {@link ng.$sce#parse `$sce.parseAs($sce.HTML, value)`}
       *
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */

      /**
       * @ngdoc method
       * @name $sce#parseAsCss
       *
       * @description
       * Shorthand method.  `$sce.parseAsCss(value)` →
       *     {@link ng.$sce#parse `$sce.parseAs($sce.CSS, value)`}
       *
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */

      /**
       * @ngdoc method
       * @name $sce#parseAsUrl
       *
       * @description
       * Shorthand method.  `$sce.parseAsUrl(value)` →
       *     {@link ng.$sce#parse `$sce.parseAs($sce.URL, value)`}
       *
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */

      /**
       * @ngdoc method
       * @name $sce#parseAsResourceUrl
       *
       * @description
       * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
       *     {@link ng.$sce#parse `$sce.parseAs($sce.RESOURCE_URL, value)`}
       *
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */

      /**
       * @ngdoc method
       * @name $sce#parseAsJs
       *
       * @description
       * Shorthand method.  `$sce.parseAsJs(value)` →
       *     {@link ng.$sce#parse `$sce.parseAs($sce.JS, value)`}
       *
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       */

      // Shorthand delegations.
      var parse = sce.parseAs,
        getTrusted = sce.getTrusted,
        trustAs = sce.trustAs;

      forEach(SCE_CONTEXTS, function (enumValue, name) {
        var lName = lowercase(name);
        sce[camelCase("parse_as_" + lName)] = function (expr) {
          return parse(enumValue, expr);
        };
        sce[camelCase("get_trusted_" + lName)] = function (value) {
          return getTrusted(enumValue, value);
        };
        sce[camelCase("trust_as_" + lName)] = function (value) {
          return trustAs(enumValue, value);
        };
      });

      return sce;
    }];
  }

  /**
   * !!! This is an undocumented "private" service !!!
   *
   * @name $sniffer
   * @requires $window
   * @requires $document
   *
   * @property {boolean} history Does the browser support html5 history api ?
   * @property {boolean} hashchange Does the browser support hashchange event ?
   * @property {boolean} transitions Does the browser support CSS transition events ?
   * @property {boolean} animations Does the browser support CSS animation events ?
   *
   * @description
   * This is very simple implementation of testing browser's features.
   */
  function $SnifferProvider() {
    this.$get = ['$window', '$document', function($window, $document) {
      var eventSupport = {},
        android =
          int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
        document = $document[0] || {},
        documentMode = document.documentMode,
        vendorPrefix,
        vendorRegex = /^(Moz|webkit|O|ms)(?=[A-Z])/,
        bodyStyle = document.body && document.body.style,
        transitions = false,
        animations = false,
        match;

      if (bodyStyle) {
        for(var prop in bodyStyle) {
          if(match = vendorRegex.exec(prop)) {
            vendorPrefix = match[0];
            vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
            break;
          }
        }

        if(!vendorPrefix) {
          vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
        }

        transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
        animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

        if (android && (!transitions||!animations)) {
          transitions = isString(document.body.style.webkitTransition);
          animations = isString(document.body.style.webkitAnimation);
        }
      }


      return {
        // Android has history.pushState, but it does not update location correctly
        // so let's not use the history API at all.
        // http://code.google.com/p/android/issues/detail?id=17471
        // https://github.com/angular/angular.js/issues/904

        // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
        // so let's not use the history API also
        // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
        // jshint -W018
        history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
        // jshint +W018
        hashchange: 'onhashchange' in $window &&
          // IE8 compatible mode lies
          (!documentMode || documentMode > 7),
        hasEvent: function(event) {
          // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
          // it. In particular the event is not fired when backspace or delete key are pressed or
          // when cut operation is performed.
          if (event == 'input' && msie == 9) return false;

          if (isUndefined(eventSupport[event])) {
            var divElm = document.createElement('div');
            eventSupport[event] = 'on' + event in divElm;
          }

          return eventSupport[event];
        },
        csp: csp(),
        vendorPrefix: vendorPrefix,
        transitions : transitions,
        animations : animations,
        android: android,
        msie : msie,
        msieDocumentMode: documentMode
      };
    }];
  }

  function $TimeoutProvider() {
    this.$get = ['$rootScope', '$browser', '$q', '$exceptionHandler',
      function($rootScope,   $browser,   $q,   $exceptionHandler) {
        var deferreds = {};


        /**
         * @ngdoc service
         * @name $timeout
         *
         * @description
         * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
         * block and delegates any exceptions to
         * {@link ng.$exceptionHandler $exceptionHandler} service.
         *
         * The return value of registering a timeout function is a promise, which will be resolved when
         * the timeout is reached and the timeout function is executed.
         *
         * To cancel a timeout request, call `$timeout.cancel(promise)`.
         *
         * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
         * synchronously flush the queue of deferred functions.
         *
         * @param {function()} fn A function, whose execution should be delayed.
         * @param {number=} [delay=0] Delay in milliseconds.
         * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
         *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
         * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
         *   promise will be resolved with is the return value of the `fn` function.
         *
         */
        function timeout(fn, delay, invokeApply) {
          var deferred = $q.defer(),
            promise = deferred.promise,
            skipApply = (isDefined(invokeApply) && !invokeApply),
            timeoutId;

          timeoutId = $browser.defer(function() {
            try {
              deferred.resolve(fn());
            } catch(e) {
              deferred.reject(e);
              $exceptionHandler(e);
            }
            finally {
              delete deferreds[promise.$$timeoutId];
            }

            if (!skipApply) $rootScope.$apply();
          }, delay);

          promise.$$timeoutId = timeoutId;
          deferreds[timeoutId] = deferred;

          return promise;
        }


        /**
         * @ngdoc method
         * @name $timeout#cancel
         *
         * @description
         * Cancels a task associated with the `promise`. As a result of this, the promise will be
         * resolved with a rejection.
         *
         * @param {Promise=} promise Promise returned by the `$timeout` function.
         * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
         *   canceled.
         */
        timeout.cancel = function(promise) {
          if (promise && promise.$$timeoutId in deferreds) {
            deferreds[promise.$$timeoutId].reject('canceled');
            delete deferreds[promise.$$timeoutId];
            return $browser.defer.cancel(promise.$$timeoutId);
          }
          return false;
        };

        return timeout;
      }];
  }

// NOTE:  The usage of window and document instead of $window and $document here is
// deliberate.  This service depends on the specific behavior of anchor nodes created by the
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
// doesn't know about mocked locations and resolves URLs to the real document - which is
// exactly the behavior needed here.  There is little value is mocking these out for this
// service.
  var urlParsingNode = document.createElement("a");
  var originUrl = urlResolve(window.location.href, true);


  /**
   *
   * Implementation Notes for non-IE browsers
   * ----------------------------------------
   * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
   * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
   * URL will be resolved into an absolute URL in the context of the application document.
   * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
   * properties are all populated to reflect the normalized URL.  This approach has wide
   * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
   * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
   *
   * Implementation Notes for IE
   * ---------------------------
   * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
   * browsers.  However, the parsed components will not be set if the URL assigned did not specify
   * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
   * work around that by performing the parsing in a 2nd step by taking a previously normalized
   * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
   * properties such as protocol, hostname, port, etc.
   *
   * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
   * uses the inner HTML approach to assign the URL as part of an HTML snippet -
   * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
   * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
   * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
   * method and IE < 8 is unsupported.
   *
   * References:
   *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
   *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
   *   http://url.spec.whatwg.org/#urlutils
   *   https://github.com/angular/angular.js/pull/2902
   *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
   *
   * @kind function
   * @param {string} url The URL to be parsed.
   * @description Normalizes and parses a URL.
   * @returns {object} Returns the normalized URL as a dictionary.
   *
   *   | member name   | Description    |
   *   |---------------|----------------|
   *   | href          | A normalized version of the provided URL if it was not an absolute URL |
   *   | protocol      | The protocol including the trailing colon                              |
   *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
   *   | search        | The search params, minus the question mark                             |
   *   | hash          | The hash string, minus the hash symbol
   *   | hostname      | The hostname
   *   | port          | The port, without ":"
   *   | pathname      | The pathname, beginning with "/"
   *
   */
  function urlResolve(url, base) {
    var href = url;

    if (msie) {
      // Normalize before parse.  Refer Implementation Notes on why this is
      // done in two steps on IE.
      urlParsingNode.setAttribute("href", href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href);

    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: (urlParsingNode.pathname.charAt(0) === '/')
        ? urlParsingNode.pathname
        : '/' + urlParsingNode.pathname
    };
  }

  /**
   * Parse a request URL and determine whether this is a same-origin request as the application document.
   *
   * @param {string|object} requestUrl The url of the request as a string that will be resolved
   * or a parsed URL object.
   * @returns {boolean} Whether the request is for the same origin as the application document.
   */
  function urlIsSameOrigin(requestUrl) {
    var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
    return (parsed.protocol === originUrl.protocol &&
      parsed.host === originUrl.host);
  }

  /**
   * @ngdoc service
   * @name $window
   *
   * @description
   * A reference to the browser's `window` object. While `window`
   * is globally available in JavaScript, it causes testability problems, because
   * it is a global variable. In angular we always refer to it through the
   * `$window` service, so it may be overridden, removed or mocked for testing.
   *
   * Expressions, like the one defined for the `ngClick` directive in the example
   * below, are evaluated with respect to the current scope.  Therefore, there is
   * no risk of inadvertently coding in a dependency on a global value in such an
   * expression.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope, $window) {
           $scope.greeting = 'Hello, World!';
           $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
           };
         }
   </script>
   <div ng-controller="Ctrl">
   <input type="text" ng-model="greeting" />
   <button ng-click="doGreeting(greeting)">ALERT</button>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
   </file>
   </example>
   */
  function $WindowProvider(){
    this.$get = valueFn(window);
  }

  /**
   * @ngdoc provider
   * @name $filterProvider
   * @description
   *
   * Filters are just functions which transform input to an output. However filters need to be
   * Dependency Injected. To achieve this a filter definition consists of a factory function which is
   * annotated with dependencies and is responsible for creating a filter function.
   *
   * ```js
   *   // Filter registration
   *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
   * ```
   *
   * The filter function is registered with the `$injector` under the filter name suffix with
   * `Filter`.
   *
   * ```js
   *   it('should be the same instance', inject(
   *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
   *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
   * ```
   *
   *
   * For more information about how angular filters work, and how to create your own filters, see
   * {@link guide/filter Filters} in the Angular Developer Guide.
   */
  /**
   * @ngdoc method
   * @name $filterProvider#register
   * @description
   * Register filter factory function.
   *
   * @param {String} name Name of the filter.
   * @param {Function} fn The filter factory function which is injectable.
   */


  /**
   * @ngdoc service
   * @name $filter
   * @kind function
   * @description
   * Filters are used for formatting data displayed to the user.
   *
   * The general syntax in templates is as follows:
   *
   *         {{ expression [| filter_name[:parameter_value] ... ] }}
   *
   * @param {String} name Name of the filter function to retrieve
   * @return {Function} the filter function
   * @example
   <example name="$filter" module="filterExample">
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <h3>{{ originalText }}</h3>
   <h3>{{ filteredText }}</h3>
   </div>
   </file>

   <file name="script.js">
   angular.module('filterExample', [])
   .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
   </file>
   </example>
   */
  $FilterProvider.$inject = ['$provide'];
  function $FilterProvider($provide) {
    var suffix = 'Filter';

    /**
     * @ngdoc method
     * @name $controllerProvider#register
     * @param {string|Object} name Name of the filter function, or an object map of filters where
     *    the keys are the filter names and the values are the filter factories.
     * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
     *    of the registered filter instances.
     */
    function register(name, factory) {
      if(isObject(name)) {
        var filters = {};
        forEach(name, function(filter, key) {
          filters[key] = register(key, filter);
        });
        return filters;
      } else {
        return $provide.factory(name + suffix, factory);
      }
    }
    this.register = register;

    this.$get = ['$injector', function($injector) {
      return function(name) {
        return $injector.get(name + suffix);
      };
    }];

    ////////////////////////////////////////

    /* global
     currencyFilter: false,
     dateFilter: false,
     filterFilter: false,
     jsonFilter: false,
     limitToFilter: false,
     lowercaseFilter: false,
     numberFilter: false,
     orderByFilter: false,
     uppercaseFilter: false,
     */

    register('currency', currencyFilter);
    register('date', dateFilter);
    register('filter', filterFilter);
    register('json', jsonFilter);
    register('limitTo', limitToFilter);
    register('lowercase', lowercaseFilter);
    register('number', numberFilter);
    register('orderBy', orderByFilter);
    register('uppercase', uppercaseFilter);
  }

  /**
   * @ngdoc filter
   * @name filter
   * @kind function
   *
   * @description
   * Selects a subset of items from `array` and returns it as a new array.
   *
   * @param {Array} array The source array.
   * @param {string|Object|function()} expression The predicate to be used for selecting items from
   *   `array`.
   *
   *   Can be one of:
   *
   *   - `string`: The string is evaluated as an expression and the resulting value is used for substring match against
   *     the contents of the `array`. All strings or objects with string properties in `array` that contain this string
   *     will be returned. The predicate can be negated by prefixing the string with `!`.
   *
   *   - `Object`: A pattern object can be used to filter specific properties on objects contained
   *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
   *     which have property `name` containing "M" and property `phone` containing "1". A special
   *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
   *     property of the object. That's equivalent to the simple substring match with a `string`
   *     as described above.
   *
   *   - `function(value)`: A predicate function can be used to write arbitrary filters. The function is
   *     called for each element of `array`. The final result is an array of those elements that
   *     the predicate returned true for.
   *
   * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
   *     determining if the expected value (from the filter expression) and actual value (from
   *     the object in the array) should be considered a match.
   *
   *   Can be one of:
   *
   *   - `function(actual, expected)`:
   *     The function will be given the object value and the predicate value to compare and
   *     should return true if the item should be included in filtered result.
   *
   *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(expected, actual)}`.
   *     this is essentially strict comparison of expected and actual.
   *
   *   - `false|undefined`: A short hand for a function which will look for a substring match in case
   *     insensitive way.
   *
   * @example
   <example>
   <file name="index.html">
   <div ng-init="friends = [{name:'John', phone:'555-1276'},
   {name:'Mary', phone:'800-BIG-MARY'},
   {name:'Mike', phone:'555-4321'},
   {name:'Adam', phone:'555-5678'},
   {name:'Julie', phone:'555-8765'},
   {name:'Juliette', phone:'555-5678'}]"></div>

   Search: <input ng-model="searchText">
   <table id="searchTextResults">
   <tr><th>Name</th><th>Phone</th></tr>
   <tr ng-repeat="friend in friends | filter:searchText">
   <td>{{friend.name}}</td>
   <td>{{friend.phone}}</td>
   </tr>
   </table>
   <hr>
   Any: <input ng-model="search.$"> <br>
   Name only <input ng-model="search.name"><br>
   Phone only <input ng-model="search.phone"><br>
   Equality <input type="checkbox" ng-model="strict"><br>
   <table id="searchObjResults">
   <tr><th>Name</th><th>Phone</th></tr>
   <tr ng-repeat="friendObj in friends | filter:search:strict">
   <td>{{friendObj.name}}</td>
   <td>{{friendObj.phone}}</td>
   </tr>
   </table>
   </file>
   <file name="protractor.js" type="protractor">
   var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

   it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

   it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
   it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
   </file>
   </example>
   */
  function filterFilter() {
    return function(array, expression, comparator) {
      if (!isArray(array)) return array;

      var comparatorType = typeof(comparator),
        predicates = [];

      predicates.check = function(value) {
        for (var j = 0; j < predicates.length; j++) {
          if(!predicates[j](value)) {
            return false;
          }
        }
        return true;
      };

      if (comparatorType !== 'function') {
        if (comparatorType === 'boolean' && comparator) {
          comparator = function(obj, text) {
            return angular.equals(obj, text);
          };
        } else {
          comparator = function(obj, text) {
            if (obj && text && typeof obj === 'object' && typeof text === 'object') {
              for (var objKey in obj) {
                if (objKey.charAt(0) !== '$' && hasOwnProperty.call(obj, objKey) &&
                  comparator(obj[objKey], text[objKey])) {
                  return true;
                }
              }
              return false;
            }
            text = (''+text).toLowerCase();
            return (''+obj).toLowerCase().indexOf(text) > -1;
          };
        }
      }

      var search = function(obj, text){
        if (typeof text == 'string' && text.charAt(0) === '!') {
          return !search(obj, text.substr(1));
        }
        switch (typeof obj) {
          case "boolean":
          case "number":
          case "string":
            return comparator(obj, text);
          case "object":
            switch (typeof text) {
              case "object":
                return comparator(obj, text);
              default:
                for ( var objKey in obj) {
                  if (objKey.charAt(0) !== '$' && search(obj[objKey], text)) {
                    return true;
                  }
                }
                break;
            }
            return false;
          case "array":
            for ( var i = 0; i < obj.length; i++) {
              if (search(obj[i], text)) {
                return true;
              }
            }
            return false;
          default:
            return false;
        }
      };
      switch (typeof expression) {
        case "boolean":
        case "number":
        case "string":
          // Set up expression object and fall through
          expression = {$:expression};
        // jshint -W086
        case "object":
          // jshint +W086
          for (var key in expression) {
            (function(path) {
              if (typeof expression[path] == 'undefined') return;
              predicates.push(function(value) {
                return search(path == '$' ? value : (value && value[path]), expression[path]);
              });
            })(key);
          }
          break;
        case 'function':
          predicates.push(expression);
          break;
        default:
          return array;
      }
      var filtered = [];
      for ( var j = 0; j < array.length; j++) {
        var value = array[j];
        if (predicates.check(value)) {
          filtered.push(value);
        }
      }
      return filtered;
    };
  }

  /**
   * @ngdoc filter
   * @name currency
   * @kind function
   *
   * @description
   * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
   * symbol for current locale is used.
   *
   * @param {number} amount Input to filter.
   * @param {string=} symbol Currency symbol or identifier to be displayed.
   * @returns {string} Formatted number.
   *
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.amount = 1234.56;
         }
   </script>
   <div ng-controller="Ctrl">
   <input type="number" ng-model="amount"> <br>
   default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
   custom currency identifier (USD$): <span>{{amount | currency:"USD$"}}</span>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.binding('amount | currency:"USD$"')).getText()).toBe('USD$1,234.56');
       });
   it('should update', function() {
         if (browser.params.browser == 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
         expect(element(by.binding('amount | currency:"USD$"')).getText()).toBe('(USD$1,234.00)');
       });
   </file>
   </example>
   */
  currencyFilter.$inject = ['$locale'];
  function currencyFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function(amount, currencySymbol){
      if (isUndefined(currencySymbol)) currencySymbol = formats.CURRENCY_SYM;
      return formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, 2).
        replace(/\u00A4/g, currencySymbol);
    };
  }

  /**
   * @ngdoc filter
   * @name number
   * @kind function
   *
   * @description
   * Formats a number as text.
   *
   * If the input is not a number an empty string is returned.
   *
   * @param {number|string} number Number to format.
   * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
   * If this is not provided then the fraction size is computed from the current locale's number
   * formatting pattern. In the case of the default locale, it will be 3.
   * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.val = 1234.56789;
         }
   </script>
   <div ng-controller="Ctrl">
   Enter number: <input ng-model='val'><br>
   Default formatting: <span id='number-default'>{{val | number}}</span><br>
   No fractions: <span>{{val | number:0}}</span><br>
   Negative number: <span>{{-val | number:4}}</span>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

   it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
   </file>
   </example>
   */


  numberFilter.$inject = ['$locale'];
  function numberFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function(number, fractionSize) {
      return formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
        fractionSize);
    };
  }

  var DECIMAL_SEP = '.';
  function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
    if (number == null || !isFinite(number) || isObject(number)) return '';

    var isNegative = number < 0;
    number = Math.abs(number);
    var numStr = number + '',
      formatedText = '',
      parts = [];

    var hasExponent = false;
    if (numStr.indexOf('e') !== -1) {
      var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
      if (match && match[2] == '-' && match[3] > fractionSize + 1) {
        numStr = '0';
      } else {
        formatedText = numStr;
        hasExponent = true;
      }
    }

    if (!hasExponent) {
      var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

      // determine fractionSize if it is not specified
      if (isUndefined(fractionSize)) {
        fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
      }

      var pow = Math.pow(10, fractionSize + 1);
      number = Math.floor(number * pow + 5) / pow;
      var fraction = ('' + number).split(DECIMAL_SEP);
      var whole = fraction[0];
      fraction = fraction[1] || '';

      var i, pos = 0,
        lgroup = pattern.lgSize,
        group = pattern.gSize;

      if (whole.length >= (lgroup + group)) {
        pos = whole.length - lgroup;
        for (i = 0; i < pos; i++) {
          if ((pos - i)%group === 0 && i !== 0) {
            formatedText += groupSep;
          }
          formatedText += whole.charAt(i);
        }
      }

      for (i = pos; i < whole.length; i++) {
        if ((whole.length - i)%lgroup === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }

      // format fraction part.
      while(fraction.length < fractionSize) {
        fraction += '0';
      }

      if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
    } else {

      if (fractionSize > 0 && number > -1 && number < 1) {
        formatedText = number.toFixed(fractionSize);
      }
    }

    parts.push(isNegative ? pattern.negPre : pattern.posPre);
    parts.push(formatedText);
    parts.push(isNegative ? pattern.negSuf : pattern.posSuf);
    return parts.join('');
  }

  function padNumber(num, digits, trim) {
    var neg = '';
    if (num < 0) {
      neg =  '-';
      num = -num;
    }
    num = '' + num;
    while(num.length < digits) num = '0' + num;
    if (trim)
      num = num.substr(num.length - digits);
    return neg + num;
  }


  function dateGetter(name, size, offset, trim) {
    offset = offset || 0;
    return function(date) {
      var value = date['get' + name]();
      if (offset > 0 || value > -offset)
        value += offset;
      if (value === 0 && offset == -12 ) value = 12;
      return padNumber(value, size, trim);
    };
  }

  function dateStrGetter(name, shortForm) {
    return function(date, formats) {
      var value = date['get' + name]();
      var get = uppercase(shortForm ? ('SHORT' + name) : name);

      return formats[get][value];
    };
  }

  function timeZoneGetter(date) {
    var zone = -1 * date.getTimezoneOffset();
    var paddedZone = (zone >= 0) ? "+" : "";

    paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
      padNumber(Math.abs(zone % 60), 2);

    return paddedZone;
  }

  function ampmGetter(date, formats) {
    return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
  }

  var DATE_FORMATS = {
    yyyy: dateGetter('FullYear', 4),
    yy: dateGetter('FullYear', 2, 0, true),
    y: dateGetter('FullYear', 1),
    MMMM: dateStrGetter('Month'),
    MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
    M: dateGetter('Month', 1, 1),
    dd: dateGetter('Date', 2),
    d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
    H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
    h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
    m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
    s: dateGetter('Seconds', 1),
    // while ISO 8601 requires fractions to be prefixed with `.` or `,`
    // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
    sss: dateGetter('Milliseconds', 3),
    EEEE: dateStrGetter('Day'),
    EEE: dateStrGetter('Day', true),
    a: ampmGetter,
    Z: timeZoneGetter
  };

  var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,
    NUMBER_STRING = /^\-?\d+$/;

  /**
   * @ngdoc filter
   * @name date
   * @kind function
   *
   * @description
   *   Formats `date` to a string based on the requested `format`.
   *
   *   `format` string can be composed of the following elements:
   *
   *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
   *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
   *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
   *   * `'MMMM'`: Month in year (January-December)
   *   * `'MMM'`: Month in year (Jan-Dec)
   *   * `'MM'`: Month in year, padded (01-12)
   *   * `'M'`: Month in year (1-12)
   *   * `'dd'`: Day in month, padded (01-31)
   *   * `'d'`: Day in month (1-31)
   *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
   *   * `'EEE'`: Day in Week, (Sun-Sat)
   *   * `'HH'`: Hour in day, padded (00-23)
   *   * `'H'`: Hour in day (0-23)
   *   * `'hh'`: Hour in am/pm, padded (01-12)
   *   * `'h'`: Hour in am/pm, (1-12)
   *   * `'mm'`: Minute in hour, padded (00-59)
   *   * `'m'`: Minute in hour (0-59)
   *   * `'ss'`: Second in minute, padded (00-59)
   *   * `'s'`: Second in minute (0-59)
   *   * `'.sss' or ',sss'`: Millisecond in second, padded (000-999)
   *   * `'a'`: am/pm marker
   *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
   *
   *   `format` string can also be one of the following predefined
   *   {@link guide/i18n localizable formats}:
   *
   *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
   *     (e.g. Sep 3, 2010 12:05:08 pm)
   *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)
   *   * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale
   *     (e.g. Friday, September 3, 2010)
   *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
   *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
   *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
   *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)
   *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)
   *
   *   `format` string can contain literal values. These need to be quoted with single quotes (e.g.
   *   `"h 'in the morning'"`). In order to output single quote, use two single quotes in a sequence
   *   (e.g. `"h 'o''clock'"`).
   *
   * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
   *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.SSSZ and its
   *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
   *    specified in the string input, the time is considered to be in the local timezone.
   * @param {string=} format Formatting rules (see Description). If not specified,
   *    `mediumDate` is used.
   * @returns {string} Formatted string or the input if input is not recognized as date/millis.
   *
   * @example
   <example>
   <file name="index.html">
   <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
   <span>{{1288323623006 | date:'medium'}}</span><br>
   <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
   <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
   <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
   <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
   </file>
   <file name="protractor.js" type="protractor">
   it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
   toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
   });
   </file>
   </example>
   */
  dateFilter.$inject = ['$locale'];
  function dateFilter($locale) {


    var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    // 1        2       3         4          5          6          7          8  9     10      11
    function jsonStringToDate(string) {
      var match;
      if (match = string.match(R_ISO8601_STR)) {
        var date = new Date(0),
          tzHour = 0,
          tzMin  = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours;

        if (match[9]) {
          tzHour = int(match[9] + match[10]);
          tzMin = int(match[9] + match[11]);
        }
        dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
        var h = int(match[4]||0) - tzHour;
        var m = int(match[5]||0) - tzMin;
        var s = int(match[6]||0);
        var ms = Math.round(parseFloat('0.' + (match[7]||0)) * 1000);
        timeSetter.call(date, h, m, s, ms);
        return date;
      }
      return string;
    }


    return function(date, format) {
      var text = '',
        parts = [],
        fn, match;

      format = format || 'mediumDate';
      format = $locale.DATETIME_FORMATS[format] || format;
      if (isString(date)) {
        if (NUMBER_STRING.test(date)) {
          date = int(date);
        } else {
          date = jsonStringToDate(date);
        }
      }

      if (isNumber(date)) {
        date = new Date(date);
      }

      if (!isDate(date)) {
        return date;
      }

      while(format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
          parts = concat(parts, match, 1);
          format = parts.pop();
        } else {
          parts.push(format);
          format = null;
        }
      }

      forEach(parts, function(value){
        fn = DATE_FORMATS[value];
        text += fn ? fn(date, $locale.DATETIME_FORMATS)
          : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
      });

      return text;
    };
  }


  /**
   * @ngdoc filter
   * @name json
   * @kind function
   *
   * @description
   *   Allows you to convert a JavaScript object into JSON string.
   *
   *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
   *   the binding is automatically converted to JSON.
   *
   * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
   * @returns {string} JSON string.
   *
   *
   * @example
   <example>
   <file name="index.html">
   <pre>{{ {'name':'value'} | json }}</pre>
   </file>
   <file name="protractor.js" type="protractor">
   it('should jsonify filtered objects', function() {
         expect(element(by.binding("{'name':'value'}")).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
       });
   </file>
   </example>
   *
   */
  function jsonFilter() {
    return function(object) {
      return toJson(object, true);
    };
  }


  /**
   * @ngdoc filter
   * @name lowercase
   * @kind function
   * @description
   * Converts string to lowercase.
   * @see angular.lowercase
   */
  var lowercaseFilter = valueFn(lowercase);


  /**
   * @ngdoc filter
   * @name uppercase
   * @kind function
   * @description
   * Converts string to uppercase.
   * @see angular.uppercase
   */
  var uppercaseFilter = valueFn(uppercase);

  /**
   * @ngdoc filter
   * @name limitTo
   * @kind function
   *
   * @description
   * Creates a new array or string containing only a specified number of elements. The elements
   * are taken from either the beginning or the end of the source array or string, as specified by
   * the value and sign (positive or negative) of `limit`.
   *
   * @param {Array|string} input Source array or string to be limited.
   * @param {string|number} limit The length of the returned array or string. If the `limit` number
   *     is positive, `limit` number of items from the beginning of the source array/string are copied.
   *     If the number is negative, `limit` number  of items from the end of the source array/string
   *     are copied. The `limit` will be trimmed if it exceeds `array.length`
   * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
   *     had less than `limit` elements.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.numbers = [1,2,3,4,5,6,7,8,9];
           $scope.letters = "abcdefghi";
           $scope.numLimit = 3;
           $scope.letterLimit = 3;
         }
   </script>
   <div ng-controller="Ctrl">
   Limit {{numbers}} to: <input type="integer" ng-model="numLimit">
   <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
   Limit {{letters}} to: <input type="integer" ng-model="letterLimit">
   <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   var numLimitInput = element(by.model('numLimit'));
   var letterLimitInput = element(by.model('letterLimit'));
   var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
   var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));

   it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
       });

   it('should update the output when -3 is entered', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('-3');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('-3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       });

   it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
       });
   </file>
   </example>
   */
  function limitToFilter(){
    return function(input, limit) {
      if (!isArray(input) && !isString(input)) return input;

      if (Math.abs(Number(limit)) === Infinity) {
        limit = Number(limit);
      } else {
        limit = int(limit);
      }

      if (isString(input)) {
        //NaN check on limit
        if (limit) {
          return limit >= 0 ? input.slice(0, limit) : input.slice(limit, input.length);
        } else {
          return "";
        }
      }

      var out = [],
        i, n;

      // if abs(limit) exceeds maximum length, trim it
      if (limit > input.length)
        limit = input.length;
      else if (limit < -input.length)
        limit = -input.length;

      if (limit > 0) {
        i = 0;
        n = limit;
      } else {
        i = input.length + limit;
        n = input.length;
      }

      for (; i<n; i++) {
        out.push(input[i]);
      }

      return out;
    };
  }

  /**
   * @ngdoc filter
   * @name orderBy
   * @kind function
   *
   * @description
   * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
   * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
   * correctly, make sure they are actually being saved as numbers and not strings.
   *
   * @param {Array} array The array to sort.
   * @param {function(*)|string|Array.<(function(*)|string)>} expression A predicate to be
   *    used by the comparator to determine the order of elements.
   *
   *    Can be one of:
   *
   *    - `function`: Getter function. The result of this function will be sorted using the
   *      `<`, `=`, `>` operator.
   *    - `string`: An Angular expression which evaluates to an object to order by, such as 'name'
   *      to sort by a property called 'name'. Optionally prefixed with `+` or `-` to control
   *      ascending or descending sort order (for example, +name or -name).
   *    - `Array`: An array of function or string predicates. The first predicate in the array
   *      is used for sorting, but when two items are equivalent, the next predicate is used.
   *
   * @param {boolean=} reverse Reverse the order of the array.
   * @returns {Array} Sorted copy of the source array.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.friends =
               [{name:'John', phone:'555-1212', age:10},
                {name:'Mary', phone:'555-9876', age:19},
                {name:'Mike', phone:'555-4321', age:21},
                {name:'Adam', phone:'555-5678', age:35},
                {name:'Julie', phone:'555-8765', age:29}]
           $scope.predicate = '-age';
         }
   </script>
   <div ng-controller="Ctrl">
   <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
   <hr/>
   [ <a href="" ng-click="predicate=''">unsorted</a> ]
   <table class="friend">
   <tr>
   <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
   (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
   <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
   <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
   </tr>
   <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
   <td>{{friend.name}}</td>
   <td>{{friend.phone}}</td>
   <td>{{friend.age}}</td>
   </tr>
   </table>
   </div>
   </file>
   </example>
   *
   * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
   * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
   * desired parameters.
   *
   * Example:
   *
   * @example
   <example>
   <file name="index.html">
   <div ng-controller="Ctrl">
   <table class="friend">
   <tr>
   <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
   (<a href="" ng-click="order('-name',false)">^</a>)</th>
   <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
   <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
   </tr>
   <tr ng-repeat="friend in friends">
   <td>{{friend.name}}</td>
   <td>{{friend.phone}}</td>
   <td>{{friend.age}}</td>
   </tr>
   </table>
   </div>
   </file>

   <file name="script.js">
   function Ctrl($scope, $filter) {
        var orderBy = $filter('orderBy');
        $scope.friends = [
          { name: 'John',    phone: '555-1212',    age: 10 },
          { name: 'Mary',    phone: '555-9876',    age: 19 },
          { name: 'Mike',    phone: '555-4321',    age: 21 },
          { name: 'Adam',    phone: '555-5678',    age: 35 },
          { name: 'Julie',   phone: '555-8765',    age: 29 }
        ];

        $scope.order = function(predicate, reverse) {
          $scope.friends = orderBy($scope.friends, predicate, reverse);
        };
        $scope.order('-age',false);
      }
   </file>
   </example>
   */
  orderByFilter.$inject = ['$parse'];
  function orderByFilter($parse){
    return function(array, sortPredicate, reverseOrder) {
      if (!isArray(array)) return array;
      if (!sortPredicate) return array;
      sortPredicate = isArray(sortPredicate) ? sortPredicate: [sortPredicate];
      sortPredicate = map(sortPredicate, function(predicate){
        var descending = false, get = predicate || identity;
        if (isString(predicate)) {
          if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
            descending = predicate.charAt(0) == '-';
            predicate = predicate.substring(1);
          }
          get = $parse(predicate);
          if (get.constant) {
            var key = get();
            return reverseComparator(function(a,b) {
              return compare(a[key], b[key]);
            }, descending);
          }
        }
        return reverseComparator(function(a,b){
          return compare(get(a),get(b));
        }, descending);
      });
      var arrayCopy = [];
      for ( var i = 0; i < array.length; i++) { arrayCopy.push(array[i]); }
      return arrayCopy.sort(reverseComparator(comparator, reverseOrder));

      function comparator(o1, o2){
        for ( var i = 0; i < sortPredicate.length; i++) {
          var comp = sortPredicate[i](o1, o2);
          if (comp !== 0) return comp;
        }
        return 0;
      }
      function reverseComparator(comp, descending) {
        return toBoolean(descending)
          ? function(a,b){return comp(b,a);}
          : comp;
      }
      function compare(v1, v2){
        var t1 = typeof v1;
        var t2 = typeof v2;
        if (t1 == t2) {
          if (t1 == "string") {
            v1 = v1.toLowerCase();
            v2 = v2.toLowerCase();
          }
          if (v1 === v2) return 0;
          return v1 < v2 ? -1 : 1;
        } else {
          return t1 < t2 ? -1 : 1;
        }
      }
    };
  }

  function ngDirective(directive) {
    if (isFunction(directive)) {
      directive = {
        link: directive
      };
    }
    directive.restrict = directive.restrict || 'AC';
    return valueFn(directive);
  }

  /**
   * @ngdoc directive
   * @name a
   * @restrict E
   *
   * @description
   * Modifies the default behavior of the html A tag so that the default action is prevented when
   * the href attribute is empty.
   *
   * This change permits the easy creation of action links with the `ngClick` directive
   * without changing the location or causing page reloads, e.g.:
   * `<a href="" ng-click="list.addItem()">Add Item</a>`
   */
  var htmlAnchorDirective = valueFn({
    restrict: 'E',
    compile: function(element, attr) {

      if (msie <= 8) {

        // turn <a href ng-click="..">link</a> into a stylable link in IE
        // but only if it doesn't have name attribute, in which case it's an anchor
        if (!attr.href && !attr.name) {
          attr.$set('href', '');
        }

        // add a comment node to anchors to workaround IE bug that causes element content to be reset
        // to new attribute content if attribute is updated with value containing @ and element also
        // contains value with @
        // see issue #1949
        element.append(document.createComment('IE fix'));
      }

      if (!attr.href && !attr.xlinkHref && !attr.name) {
        return function(scope, element) {
          // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
          var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
            'xlink:href' : 'href';
          element.on('click', function(event){
            // if we have no href url, then don't navigate anywhere.
            if (!element.attr(href)) {
              event.preventDefault();
            }
          });
        };
      }
    }
  });

  /**
   * @ngdoc directive
   * @name ngHref
   * @restrict A
   * @priority 99
   *
   * @description
   * Using Angular markup like `{{hash}}` in an href attribute will
   * make the link go to the wrong URL if the user clicks it before
   * Angular has a chance to replace the `{{hash}}` markup with its
   * value. Until Angular replaces the markup the link will be broken
   * and will most likely return a 404 error.
   *
   * The `ngHref` directive solves this problem.
   *
   * The wrong way to write it:
   * ```html
   * <a href="http://www.gravatar.com/avatar/{{hash}}"/>
   * ```
   *
   * The correct way to write it:
   * ```html
   * <a ng-href="http://www.gravatar.com/avatar/{{hash}}"/>
   * ```
   *
   * @element A
   * @param {template} ngHref any string which can contain `{{}}` markup.
   *
   * @example
   * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
   * in links and their different behaviors:
   <example>
   <file name="index.html">
   <input ng-model="value" /><br />
   <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
   <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
   <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
   <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
   <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
   <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
   </file>
   <file name="protractor.js" type="protractor">
   it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

   it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

   it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 1000, 'page should navigate to /123');
        });

   xit('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

   it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

   it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 1000, 'page should navigate to /6');
        });
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngSrc
   * @restrict A
   * @priority 99
   *
   * @description
   * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
   * work right: The browser will fetch from the URL with the literal
   * text `{{hash}}` until Angular replaces the expression inside
   * `{{hash}}`. The `ngSrc` directive solves this problem.
   *
   * The buggy way to write it:
   * ```html
   * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
   * ```
   *
   * The correct way to write it:
   * ```html
   * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
   * ```
   *
   * @element IMG
   * @param {template} ngSrc any string which can contain `{{}}` markup.
   */

  /**
   * @ngdoc directive
   * @name ngSrcset
   * @restrict A
   * @priority 99
   *
   * @description
   * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
   * work right: The browser will fetch from the URL with the literal
   * text `{{hash}}` until Angular replaces the expression inside
   * `{{hash}}`. The `ngSrcset` directive solves this problem.
   *
   * The buggy way to write it:
   * ```html
   * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
   * ```
   *
   * The correct way to write it:
   * ```html
   * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
   * ```
   *
   * @element IMG
   * @param {template} ngSrcset any string which can contain `{{}}` markup.
   */

  /**
   * @ngdoc directive
   * @name ngDisabled
   * @restrict A
   * @priority 100
   *
   * @description
   *
   * The following markup will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:
   * ```html
   * <div ng-init="scope = { isDisabled: false }">
   *  <button disabled="{{scope.isDisabled}}">Disabled</button>
   * </div>
   * ```
   *
   * The HTML specification does not require browsers to preserve the values of boolean attributes
   * such as disabled. (Their presence means true and their absence means false.)
   * If we put an Angular interpolation expression into such an attribute then the
   * binding information would be lost when the browser removes the attribute.
   * The `ngDisabled` directive solves this problem for the `disabled` attribute.
   * This complementary directive is not removed by the browser and so provides
   * a permanent reliable place to store the binding information.
   *
   * @example
   <example>
   <file name="index.html">
   Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
   <button ng-model="button" ng-disabled="checked">Button</button>
   </file>
   <file name="protractor.js" type="protractor">
   it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
   </file>
   </example>
   *
   * @element INPUT
   * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
   *     then special attribute "disabled" will be set on the element
   */


  /**
   * @ngdoc directive
   * @name ngChecked
   * @restrict A
   * @priority 100
   *
   * @description
   * The HTML specification does not require browsers to preserve the values of boolean attributes
   * such as checked. (Their presence means true and their absence means false.)
   * If we put an Angular interpolation expression into such an attribute then the
   * binding information would be lost when the browser removes the attribute.
   * The `ngChecked` directive solves this problem for the `checked` attribute.
   * This complementary directive is not removed by the browser and so provides
   * a permanent reliable place to store the binding information.
   * @example
   <example>
   <file name="index.html">
   Check me to check both: <input type="checkbox" ng-model="master"><br/>
   <input id="checkSlave" type="checkbox" ng-checked="master">
   </file>
   <file name="protractor.js" type="protractor">
   it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
   </file>
   </example>
   *
   * @element INPUT
   * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
   *     then special attribute "checked" will be set on the element
   */


  /**
   * @ngdoc directive
   * @name ngReadonly
   * @restrict A
   * @priority 100
   *
   * @description
   * The HTML specification does not require browsers to preserve the values of boolean attributes
   * such as readonly. (Their presence means true and their absence means false.)
   * If we put an Angular interpolation expression into such an attribute then the
   * binding information would be lost when the browser removes the attribute.
   * The `ngReadonly` directive solves this problem for the `readonly` attribute.
   * This complementary directive is not removed by the browser and so provides
   * a permanent reliable place to store the binding information.
   * @example
   <example>
   <file name="index.html">
   Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
   <input type="text" ng-readonly="checked" value="I'm Angular"/>
   </file>
   <file name="protractor.js" type="protractor">
   it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
   </file>
   </example>
   *
   * @element INPUT
   * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
   *     then special attribute "readonly" will be set on the element
   */


  /**
   * @ngdoc directive
   * @name ngSelected
   * @restrict A
   * @priority 100
   *
   * @description
   * The HTML specification does not require browsers to preserve the values of boolean attributes
   * such as selected. (Their presence means true and their absence means false.)
   * If we put an Angular interpolation expression into such an attribute then the
   * binding information would be lost when the browser removes the attribute.
   * The `ngSelected` directive solves this problem for the `selected` attribute.
   * This complementary directive is not removed by the browser and so provides
   * a permanent reliable place to store the binding information.
   *
   * @example
   <example>
   <file name="index.html">
   Check me to select: <input type="checkbox" ng-model="selected"><br/>
   <select>
   <option>Hello!</option>
   <option id="greet" ng-selected="selected">Greetings!</option>
   </select>
   </file>
   <file name="protractor.js" type="protractor">
   it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
   </file>
   </example>
   *
   * @element OPTION
   * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
   *     then special attribute "selected" will be set on the element
   */

  /**
   * @ngdoc directive
   * @name ngOpen
   * @restrict A
   * @priority 100
   *
   * @description
   * The HTML specification does not require browsers to preserve the values of boolean attributes
   * such as open. (Their presence means true and their absence means false.)
   * If we put an Angular interpolation expression into such an attribute then the
   * binding information would be lost when the browser removes the attribute.
   * The `ngOpen` directive solves this problem for the `open` attribute.
   * This complementary directive is not removed by the browser and so provides
   * a permanent reliable place to store the binding information.
   * @example
   <example>
   <file name="index.html">
   Check me check multiple: <input type="checkbox" ng-model="open"><br/>
   <details id="details" ng-open="open">
   <summary>Show/Hide me</summary>
   </details>
   </file>
   <file name="protractor.js" type="protractor">
   it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
   </file>
   </example>
   *
   * @element DETAILS
   * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
   *     then special attribute "open" will be set on the element
   */

  var ngAttributeAliasDirectives = {};


// boolean attrs are evaluated
  forEach(BOOLEAN_ATTR, function(propName, attrName) {
    // binding to multiple is not supported
    if (propName == "multiple") return;

    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function() {
      return {
        priority: 100,
        link: function(scope, element, attr) {
          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
            attr.$set(attrName, !!value);
          });
        }
      };
    };
  });


// ng-src, ng-srcset, ng-href are interpolated
  forEach(['src', 'srcset', 'href'], function(attrName) {
    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function() {
      return {
        priority: 99, // it needs to run after the attributes are interpolated
        link: function(scope, element, attr) {
          var propName = attrName,
            name = attrName;

          if (attrName === 'href' &&
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
            name = 'xlinkHref';
            attr.$attr[name] = 'xlink:href';
            propName = null;
          }

          attr.$observe(normalized, function(value) {
            if (!value)
              return;

            attr.$set(name, value);

            // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
            // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
            // to set the property as well to achieve the desired effect.
            // we use attr[attrName] value since $set can sanitize the url.
            if (msie && propName) element.prop(propName, attr[name]);
          });
        }
      };
    };
  });

  /* global -nullFormCtrl */
  var nullFormCtrl = {
    $addControl: noop,
    $removeControl: noop,
    $setValidity: noop,
    $setDirty: noop,
    $setPristine: noop
  };

  /**
   * @ngdoc type
   * @name form.FormController
   *
   * @property {boolean} $pristine True if user has not interacted with the form yet.
   * @property {boolean} $dirty True if user has already interacted with the form.
   * @property {boolean} $valid True if all of the containing forms and controls are valid.
   * @property {boolean} $invalid True if at least one containing control or form is invalid.
   *
   * @property {Object} $error Is an object hash, containing references to all invalid controls or
   *  forms, where:
   *
   *  - keys are validation tokens (error names),
   *  - values are arrays of controls or forms that are invalid for given error name.
   *
   *
   *  Built-in validation tokens:
   *
   *  - `email`
   *  - `max`
   *  - `maxlength`
   *  - `min`
   *  - `minlength`
   *  - `number`
   *  - `pattern`
   *  - `required`
   *  - `url`
   *
   * @description
   * `FormController` keeps track of all its controls and nested forms as well as the state of them,
   * such as being valid/invalid or dirty/pristine.
   *
   * Each {@link ng.directive:form form} directive creates an instance
   * of `FormController`.
   *
   */
//asks for $scope to fool the BC controller module
  FormController.$inject = ['$element', '$attrs', '$scope', '$animate'];
  function FormController(element, attrs, $scope, $animate) {
    var form = this,
      parentForm = element.parent().controller('form') || nullFormCtrl,
      invalidCount = 0, // used to easily determine if we are valid
      errors = form.$error = {},
      controls = [];

    // init state
    form.$name = attrs.name || attrs.ngForm;
    form.$dirty = false;
    form.$pristine = true;
    form.$valid = true;
    form.$invalid = false;

    parentForm.$addControl(form);

    // Setup initial state of the control
    element.addClass(PRISTINE_CLASS);
    toggleValidCss(true);

    // convenience method for easy toggling of classes
    function toggleValidCss(isValid, validationErrorKey) {
      validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
      $animate.removeClass(element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
      $animate.addClass(element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
    }

    /**
     * @ngdoc method
     * @name form.FormController#$addControl
     *
     * @description
     * Register a control with the form.
     *
     * Input elements using ngModelController do this automatically when they are linked.
     */
    form.$addControl = function(control) {
      // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
      // and not added to the scope.  Now we throw an error.
      assertNotHasOwnProperty(control.$name, 'input');
      controls.push(control);

      if (control.$name) {
        form[control.$name] = control;
      }
    };

    /**
     * @ngdoc method
     * @name form.FormController#$removeControl
     *
     * @description
     * Deregister a control from the form.
     *
     * Input elements using ngModelController do this automatically when they are destroyed.
     */
    form.$removeControl = function(control) {
      if (control.$name && form[control.$name] === control) {
        delete form[control.$name];
      }
      forEach(errors, function(queue, validationToken) {
        form.$setValidity(validationToken, true, control);
      });

      arrayRemove(controls, control);
    };

    /**
     * @ngdoc method
     * @name form.FormController#$setValidity
     *
     * @description
     * Sets the validity of a form control.
     *
     * This method will also propagate to parent forms.
     */
    form.$setValidity = function(validationToken, isValid, control) {
      var queue = errors[validationToken];

      if (isValid) {
        if (queue) {
          arrayRemove(queue, control);
          if (!queue.length) {
            invalidCount--;
            if (!invalidCount) {
              toggleValidCss(isValid);
              form.$valid = true;
              form.$invalid = false;
            }
            errors[validationToken] = false;
            toggleValidCss(true, validationToken);
            parentForm.$setValidity(validationToken, true, form);
          }
        }

      } else {
        if (!invalidCount) {
          toggleValidCss(isValid);
        }
        if (queue) {
          if (includes(queue, control)) return;
        } else {
          errors[validationToken] = queue = [];
          invalidCount++;
          toggleValidCss(false, validationToken);
          parentForm.$setValidity(validationToken, false, form);
        }
        queue.push(control);

        form.$valid = false;
        form.$invalid = true;
      }
    };

    /**
     * @ngdoc method
     * @name form.FormController#$setDirty
     *
     * @description
     * Sets the form to a dirty state.
     *
     * This method can be called to add the 'ng-dirty' class and set the form to a dirty
     * state (ng-dirty class). This method will also propagate to parent forms.
     */
    form.$setDirty = function() {
      $animate.removeClass(element, PRISTINE_CLASS);
      $animate.addClass(element, DIRTY_CLASS);
      form.$dirty = true;
      form.$pristine = false;
      parentForm.$setDirty();
    };

    /**
     * @ngdoc method
     * @name form.FormController#$setPristine
     *
     * @description
     * Sets the form to its pristine state.
     *
     * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
     * state (ng-pristine class). This method will also propagate to all the controls contained
     * in this form.
     *
     * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
     * saving or resetting it.
     */
    form.$setPristine = function () {
      $animate.removeClass(element, DIRTY_CLASS);
      $animate.addClass(element, PRISTINE_CLASS);
      form.$dirty = false;
      form.$pristine = true;
      forEach(controls, function(control) {
        control.$setPristine();
      });
    };
  }


  /**
   * @ngdoc directive
   * @name ngForm
   * @restrict EAC
   *
   * @description
   * Nestable alias of {@link ng.directive:form `form`} directive. HTML
   * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
   * sub-group of controls needs to be determined.
   *
   * Note: the purpose of `ngForm` is to group controls,
   * but not to be a replacement for the `<form>` tag with all of its capabilities
   * (e.g. posting to the server, ...).
   *
   * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
   *                       related scope, under this name.
   *
   */

  /**
   * @ngdoc directive
   * @name form
   * @restrict E
   *
   * @description
   * Directive that instantiates
   * {@link form.FormController FormController}.
   *
   * If the `name` attribute is specified, the form controller is published onto the current scope under
   * this name.
   *
   * # Alias: {@link ng.directive:ngForm `ngForm`}
   *
   * In Angular forms can be nested. This means that the outer form is valid when all of the child
   * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
   * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
   * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
   * using Angular validation directives in forms that are dynamically generated using the
   * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
   * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
   * `ngForm` directive and nest these in an outer `form` element.
   *
   *
   * # CSS classes
   *  - `ng-valid` is set if the form is valid.
   *  - `ng-invalid` is set if the form is invalid.
   *  - `ng-pristine` is set if the form is pristine.
   *  - `ng-dirty` is set if the form is dirty.
   *
   * Keep in mind that ngAnimate can detect each of these classes when added and removed.
   *
   *
   * # Submitting a form and preventing the default action
   *
   * Since the role of forms in client-side Angular applications is different than in classical
   * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
   * page reload that sends the data to the server. Instead some javascript logic should be triggered
   * to handle the form submission in an application-specific way.
   *
   * For this reason, Angular prevents the default action (form submission to the server) unless the
   * `<form>` element has an `action` attribute specified.
   *
   * You can use one of the following two ways to specify what javascript method should be called when
   * a form is submitted:
   *
   * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
   * - {@link ng.directive:ngClick ngClick} directive on the first
   *  button or input field of type submit (input[type=submit])
   *
   * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
   * or {@link ng.directive:ngClick ngClick} directives.
   * This is because of the following form submission rules in the HTML specification:
   *
   * - If a form has only one input field then hitting enter in this field triggers form submit
   * (`ngSubmit`)
   * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
   * doesn't trigger submit
   * - if a form has one or more input fields and one or more buttons or input[type=submit] then
   * hitting enter in any of the input fields will trigger the click handler on the *first* button or
   * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
   *
   * @param {string=} name Name of the form. If specified, the form controller will be published into
   *                       related scope, under this name.
   *
   * ## Animation Hooks
   *
   * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
   * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
   * other validations that are performed within the form. Animations in ngForm are similar to how
   * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
   * as JS animations.
   *
   * The following example shows a simple way to utilize CSS transitions to style a form element
   * that has been rendered as invalid after it has been validated:
   *
   * <pre>
   * //be sure to include ngAnimate as a module to hook into more
   * //advanced animations
   * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
   * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
   * </pre>
   *
   * @example
   <example deps="angular-animate.js" animations="true" fixBase="true">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.userType = 'guest';
         }
   </script>
   <style>
   .my-form {
          -webkit-transition:all linear 0.5s;
          transition:all linear 0.5s;
          background: transparent;
        }
   .my-form.ng-invalid {
          background: red;
        }
   </style>
   <form name="myForm" ng-controller="Ctrl" class="my-form">
   userType: <input name="input" ng-model="userType" required>
   <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
   <tt>userType = {{userType}}</tt><br>
   <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>
   <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>
   <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
   <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
   </form>
   </file>
   <file name="protractor.js" type="protractor">
   it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

   it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
   </file>
   </example>
   *
   */
  var formDirectiveFactory = function(isNgForm) {
    return ['$timeout', function($timeout) {
      var formDirective = {
        name: 'form',
        restrict: isNgForm ? 'EAC' : 'E',
        controller: FormController,
        compile: function() {
          return {
            pre: function(scope, formElement, attr, controller) {
              if (!attr.action) {
                // we can't use jq events because if a form is destroyed during submission the default
                // action is not prevented. see #1238
                //
                // IE 9 is not affected because it doesn't fire a submit event and try to do a full
                // page reload if the form was destroyed by submission of the form via a click handler
                // on a button in the form. Looks like an IE9 specific bug.
                var preventDefaultListener = function(event) {
                  event.preventDefault
                    ? event.preventDefault()
                    : event.returnValue = false; // IE
                };

                addEventListenerFn(formElement[0], 'submit', preventDefaultListener);

                // unregister the preventDefault listener so that we don't not leak memory but in a
                // way that will achieve the prevention of the default action.
                formElement.on('$destroy', function() {
                  $timeout(function() {
                    removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);
                  }, 0, false);
                });
              }

              var parentFormCtrl = formElement.parent().controller('form'),
                alias = attr.name || attr.ngForm;

              if (alias) {
                setter(scope, alias, controller, alias);
              }
              if (parentFormCtrl) {
                formElement.on('$destroy', function() {
                  parentFormCtrl.$removeControl(controller);
                  if (alias) {
                    setter(scope, alias, undefined, alias);
                  }
                  extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
                });
              }
            }
          };
        }
      };

      return formDirective;
    }];
  };

  var formDirective = formDirectiveFactory();
  var ngFormDirective = formDirectiveFactory(true);

  /* global

   -VALID_CLASS,
   -INVALID_CLASS,
   -PRISTINE_CLASS,
   -DIRTY_CLASS
   */

  var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
  var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\.[a-z0-9-]+)*$/i;
  var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;

  var inputType = {

    /**
     * @ngdoc input
     * @name input[text]
     *
     * @description
     * Standard HTML text input with angular data binding.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} required Adds `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
     *    minlength.
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
     *    maxlength.
     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
     *    patterns defined as scope expressions.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
     *
     * @example
     <example name="text-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.text = 'guest';
             $scope.word = /^\s*\w*\s*$/;
           }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     Single word: <input type="text" name="input" ng-model="text"
     ng-pattern="word" required ng-trim="false">
     <span class="error" ng-show="myForm.input.$error.required">
     Required!</span>
     <span class="error" ng-show="myForm.input.$error.pattern">
     Single word only!</span>

     <tt>text = {{text}}</tt><br/>
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
     </file>
     <file name="protractor.js" type="protractor">
     var text = element(by.binding('text'));
     var valid = element(by.binding('myForm.input.$valid'));
     var input = element(by.model('text'));

     it('should initialize to model', function() {
            expect(text.getText()).toContain('guest');
            expect(valid.getText()).toContain('true');
          });

     it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

     it('should be invalid if multi word', function() {
            input.clear();
            input.sendKeys('hello world');

            expect(valid.getText()).toContain('false');
          });
     </file>
     </example>
     */
    'text': textInputType,


    /**
     * @ngdoc input
     * @name input[number]
     *
     * @description
     * Text input with number validation and transformation. Sets the `number` validation
     * error if not a valid number.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
     *    minlength.
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
     *    maxlength.
     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
     *    patterns defined as scope expressions.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="number-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.value = 12;
           }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     Number: <input type="number" name="input" ng-model="value"
     min="0" max="99" required>
     <span class="error" ng-show="myForm.input.$error.required">
     Required!</span>
     <span class="error" ng-show="myForm.input.$error.number">
     Not valid number!</span>
     <tt>value = {{value}}</tt><br/>
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
     </file>
     <file name="protractor.js" type="protractor">
     var value = element(by.binding('value'));
     var valid = element(by.binding('myForm.input.$valid'));
     var input = element(by.model('value'));

     it('should initialize to model', function() {
            expect(value.getText()).toContain('12');
            expect(valid.getText()).toContain('true');
          });

     it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });

     it('should be invalid if over max', function() {
            input.clear();
            input.sendKeys('123');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });
     </file>
     </example>
     */
    'number': numberInputType,


    /**
     * @ngdoc input
     * @name input[url]
     *
     * @description
     * Text input with URL validation. Sets the `url` validation error key if the content is not a
     * valid URL.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
     *    minlength.
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
     *    maxlength.
     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
     *    patterns defined as scope expressions.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="url-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.text = 'http://google.com';
           }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     URL: <input type="url" name="input" ng-model="text" required>
     <span class="error" ng-show="myForm.input.$error.required">
     Required!</span>
     <span class="error" ng-show="myForm.input.$error.url">
     Not valid url!</span>
     <tt>text = {{text}}</tt><br/>
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
     </form>
     </file>
     <file name="protractor.js" type="protractor">
     var text = element(by.binding('text'));
     var valid = element(by.binding('myForm.input.$valid'));
     var input = element(by.model('text'));

     it('should initialize to model', function() {
            expect(text.getText()).toContain('http://google.com');
            expect(valid.getText()).toContain('true');
          });

     it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

     it('should be invalid if not url', function() {
            input.clear();
            input.sendKeys('box');

            expect(valid.getText()).toContain('false');
          });
     </file>
     </example>
     */
    'url': urlInputType,


    /**
     * @ngdoc input
     * @name input[email]
     *
     * @description
     * Text input with email validation. Sets the `email` validation error key if not a valid email
     * address.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
     *    minlength.
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
     *    maxlength.
     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
     *    patterns defined as scope expressions.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="email-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.text = 'me@example.com';
     }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     Email: <input type="email" name="input" ng-model="text" required>
     <span class="error" ng-show="myForm.input.$error.required">
     Required!</span>
     <span class="error" ng-show="myForm.input.$error.email">
     Not valid email!</span>
     <tt>text = {{text}}</tt><br/>
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
     </form>
     </file>
     <file name="protractor.js" type="protractor">
     var text = element(by.binding('text'));
     var valid = element(by.binding('myForm.input.$valid'));
     var input = element(by.model('text'));

     it('should initialize to model', function() {
            expect(text.getText()).toContain('me@example.com');
     expect(valid.getText()).toContain('true');
     });

     it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

     it('should be invalid if not email', function() {
            input.clear();
            input.sendKeys('xxx');

            expect(valid.getText()).toContain('false');
          });
     </file>
     </example>
     */
    'email': emailInputType,


    /**
     * @ngdoc input
     * @name input[radio]
     *
     * @description
     * HTML radio button.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string} value The value to which the expression should be set when selected.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     * @param {string} ngValue Angular expression which sets the value to which the expression should
     *    be set when selected.
     *
     * @example
     <example name="radio-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.color = 'blue';
             $scope.specialValue = {
               "id": "12345",
               "value": "green"
             };
           }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     <input type="radio" ng-model="color" value="red">  Red <br/>
     <input type="radio" ng-model="color" ng-value="specialValue"> Green <br/>
     <input type="radio" ng-model="color" value="blue"> Blue <br/>
     <tt>color = {{color | json}}</tt><br/>
     </form>
     Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
     </file>
     <file name="protractor.js" type="protractor">
     it('should change state', function() {
            var color = element(by.binding('color'));

            expect(color.getText()).toContain('blue');

            element.all(by.model('color')).get(0).click();

            expect(color.getText()).toContain('red');
          });
     </file>
     </example>
     */
    'radio': radioInputType,


    /**
     * @ngdoc input
     * @name input[checkbox]
     *
     * @description
     * HTML checkbox.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} ngTrueValue The value to which the expression should be set when selected.
     * @param {string=} ngFalseValue The value to which the expression should be set when not selected.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="checkbox-input-directive">
     <file name="index.html">
     <script>
     function Ctrl($scope) {
             $scope.value1 = true;
             $scope.value2 = 'YES'
           }
     </script>
     <form name="myForm" ng-controller="Ctrl">
     Value1: <input type="checkbox" ng-model="value1"> <br/>
     Value2: <input type="checkbox" ng-model="value2"
     ng-true-value="YES" ng-false-value="NO"> <br/>
     <tt>value1 = {{value1}}</tt><br/>
     <tt>value2 = {{value2}}</tt><br/>
     </form>
     </file>
     <file name="protractor.js" type="protractor">
     it('should change state', function() {
            var value1 = element(by.binding('value1'));
            var value2 = element(by.binding('value2'));

            expect(value1.getText()).toContain('true');
            expect(value2.getText()).toContain('YES');

            element(by.model('value1')).click();
            element(by.model('value2')).click();

            expect(value1.getText()).toContain('false');
            expect(value2.getText()).toContain('NO');
          });
     </file>
     </example>
     */
    'checkbox': checkboxInputType,

    'hidden': noop,
    'button': noop,
    'submit': noop,
    'reset': noop,
    'file': noop
  };

// A helper function to call $setValidity and return the value / undefined,
// a pattern that is repeated a lot in the input validation logic.
  function validate(ctrl, validatorName, validity, value){
    ctrl.$setValidity(validatorName, validity);
    return validity ? value : undefined;
  }


  function addNativeHtml5Validators(ctrl, validatorName, element) {
    var validity = element.prop('validity');
    if (isObject(validity)) {
      var validator = function(value) {
        // Don't overwrite previous validation, don't consider valueMissing to apply (ng-required can
        // perform the required validation)
        if (!ctrl.$error[validatorName] && (validity.badInput || validity.customError ||
          validity.typeMismatch) && !validity.valueMissing) {
          ctrl.$setValidity(validatorName, false);
          return;
        }
        return value;
      };
      ctrl.$parsers.push(validator);
    }
  }

  function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    var validity = element.prop('validity');
    var placeholder = element[0].placeholder, noevent = {};

    // In composition mode, users are still inputing intermediate text buffer,
    // hold the listener until composition is done.
    // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
    if (!$sniffer.android) {
      var composing = false;

      element.on('compositionstart', function(data) {
        composing = true;
      });

      element.on('compositionend', function() {
        composing = false;
        listener();
      });
    }

    var listener = function(ev) {
      if (composing) return;
      var value = element.val();

      // IE (11 and under) seem to emit an 'input' event if the placeholder value changes.
      // We don't want to dirty the value when this happens, so we abort here. Unfortunately,
      // IE also sends input events for other non-input-related things, (such as focusing on a
      // form control), so this change is not entirely enough to solve this.
      if (msie && (ev || noevent).type === 'input' && element[0].placeholder !== placeholder) {
        placeholder = element[0].placeholder;
        return;
      }

      // By default we will trim the value
      // If the attribute ng-trim exists we will avoid trimming
      // e.g. <input ng-model="foo" ng-trim="false">
      if (toBoolean(attr.ngTrim || 'T')) {
        value = trim(value);
      }

      if (ctrl.$viewValue !== value ||
        // If the value is still empty/falsy, and there is no `required` error, run validators
        // again. This enables HTML5 constraint validation errors to affect Angular validation
        // even when the first character entered causes an error.
        (validity && value === '' && !validity.valueMissing)) {
        if (scope.$$phase) {
          ctrl.$setViewValue(value);
        } else {
          scope.$apply(function() {
            ctrl.$setViewValue(value);
          });
        }
      }
    };

    // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
    // input event on backspace, delete or cut
    if ($sniffer.hasEvent('input')) {
      element.on('input', listener);
    } else {
      var timeout;

      var deferListener = function() {
        if (!timeout) {
          timeout = $browser.defer(function() {
            listener();
            timeout = null;
          });
        }
      };

      element.on('keydown', function(event) {
        var key = event.keyCode;

        // ignore
        //    command            modifiers                   arrows
        if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

        deferListener();
      });

      // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
      if ($sniffer.hasEvent('paste')) {
        element.on('paste cut', deferListener);
      }
    }

    // if user paste into input using mouse on older browser
    // or form autocomplete on newer browser, we need "change" event to catch it
    element.on('change', listener);

    ctrl.$render = function() {
      element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
    };

    // pattern validator
    var pattern = attr.ngPattern,
      patternValidator,
      match;

    if (pattern) {
      var validateRegex = function(regexp, value) {
        return validate(ctrl, 'pattern', ctrl.$isEmpty(value) || regexp.test(value), value);
      };
      match = pattern.match(/^\/(.*)\/([gim]*)$/);
      if (match) {
        pattern = new RegExp(match[1], match[2]);
        patternValidator = function(value) {
          return validateRegex(pattern, value);
        };
      } else {
        patternValidator = function(value) {
          var patternObj = scope.$eval(pattern);

          if (!patternObj || !patternObj.test) {
            throw minErr('ngPattern')('noregexp',
              'Expected {0} to be a RegExp but was {1}. Element: {2}', pattern,
              patternObj, startingTag(element));
          }
          return validateRegex(patternObj, value);
        };
      }

      ctrl.$formatters.push(patternValidator);
      ctrl.$parsers.push(patternValidator);
    }

    // min length validator
    if (attr.ngMinlength) {
      var minlength = int(attr.ngMinlength);
      var minLengthValidator = function(value) {
        return validate(ctrl, 'minlength', ctrl.$isEmpty(value) || value.length >= minlength, value);
      };

      ctrl.$parsers.push(minLengthValidator);
      ctrl.$formatters.push(minLengthValidator);
    }

    // max length validator
    if (attr.ngMaxlength) {
      var maxlength = int(attr.ngMaxlength);
      var maxLengthValidator = function(value) {
        return validate(ctrl, 'maxlength', ctrl.$isEmpty(value) || value.length <= maxlength, value);
      };

      ctrl.$parsers.push(maxLengthValidator);
      ctrl.$formatters.push(maxLengthValidator);
    }
  }

  function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);

    ctrl.$parsers.push(function(value) {
      var empty = ctrl.$isEmpty(value);
      if (empty || NUMBER_REGEXP.test(value)) {
        ctrl.$setValidity('number', true);
        return value === '' ? null : (empty ? value : parseFloat(value));
      } else {
        ctrl.$setValidity('number', false);
        return undefined;
      }
    });

    addNativeHtml5Validators(ctrl, 'number', element);

    ctrl.$formatters.push(function(value) {
      return ctrl.$isEmpty(value) ? '' : '' + value;
    });

    if (attr.min) {
      var minValidator = function(value) {
        var min = parseFloat(attr.min);
        return validate(ctrl, 'min', ctrl.$isEmpty(value) || value >= min, value);
      };

      ctrl.$parsers.push(minValidator);
      ctrl.$formatters.push(minValidator);
    }

    if (attr.max) {
      var maxValidator = function(value) {
        var max = parseFloat(attr.max);
        return validate(ctrl, 'max', ctrl.$isEmpty(value) || value <= max, value);
      };

      ctrl.$parsers.push(maxValidator);
      ctrl.$formatters.push(maxValidator);
    }

    ctrl.$formatters.push(function(value) {
      return validate(ctrl, 'number', ctrl.$isEmpty(value) || isNumber(value), value);
    });
  }

  function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);

    var urlValidator = function(value) {
      return validate(ctrl, 'url', ctrl.$isEmpty(value) || URL_REGEXP.test(value), value);
    };

    ctrl.$formatters.push(urlValidator);
    ctrl.$parsers.push(urlValidator);
  }

  function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);

    var emailValidator = function(value) {
      return validate(ctrl, 'email', ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value), value);
    };

    ctrl.$formatters.push(emailValidator);
    ctrl.$parsers.push(emailValidator);
  }

  function radioInputType(scope, element, attr, ctrl) {
    // make the name unique, if not defined
    if (isUndefined(attr.name)) {
      element.attr('name', nextUid());
    }

    element.on('click', function() {
      if (element[0].checked) {
        scope.$apply(function() {
          ctrl.$setViewValue(attr.value);
        });
      }
    });

    ctrl.$render = function() {
      var value = attr.value;
      element[0].checked = (value == ctrl.$viewValue);
    };

    attr.$observe('value', ctrl.$render);
  }

  function checkboxInputType(scope, element, attr, ctrl) {
    var trueValue = attr.ngTrueValue,
      falseValue = attr.ngFalseValue;

    if (!isString(trueValue)) trueValue = true;
    if (!isString(falseValue)) falseValue = false;

    element.on('click', function() {
      scope.$apply(function() {
        ctrl.$setViewValue(element[0].checked);
      });
    });

    ctrl.$render = function() {
      element[0].checked = ctrl.$viewValue;
    };

    // Override the standard `$isEmpty` because a value of `false` means empty in a checkbox.
    ctrl.$isEmpty = function(value) {
      return value !== trueValue;
    };

    ctrl.$formatters.push(function(value) {
      return value === trueValue;
    });

    ctrl.$parsers.push(function(value) {
      return value ? trueValue : falseValue;
    });
  }


  /**
   * @ngdoc directive
   * @name textarea
   * @restrict E
   *
   * @description
   * HTML textarea element control with angular data-binding. The data-binding and validation
   * properties of this element are exactly the same as those of the
   * {@link ng.directive:input input element}.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   */


  /**
   * @ngdoc directive
   * @name input
   * @restrict E
   *
   * @description
   * HTML input element control with angular data-binding. Input control follows HTML5 input types
   * and polyfills the HTML5 validation behavior for older browsers.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {boolean=} ngRequired Sets `required` attribute if set to true
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="input-directive">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.user = {name: 'guest', last: 'visitor'};
         }
   </script>
   <div ng-controller="Ctrl">
   <form name="myForm">
   User name: <input type="text" name="userName" ng-model="user.name" required>
   <span class="error" ng-show="myForm.userName.$error.required">
   Required!</span><br>
   Last name: <input type="text" name="lastName" ng-model="user.last"
   ng-minlength="3" ng-maxlength="10">
   <span class="error" ng-show="myForm.lastName.$error.minlength">
   Too short!</span>
   <span class="error" ng-show="myForm.lastName.$error.maxlength">
   Too long!</span><br>
   </form>
   <hr>
   <tt>user = {{user}}</tt><br/>
   <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
   <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
   <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
   <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
   <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
   <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
   <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
   <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   var user = element(by.binding('{{user}}'));
   var userNameValid = element(by.binding('myForm.userName.$valid'));
   var lastNameValid = element(by.binding('myForm.lastName.$valid'));
   var lastNameError = element(by.binding('myForm.lastName.$error'));
   var formValid = element(by.binding('myForm.$valid'));
   var userNameInput = element(by.model('user.name'));
   var userLastInput = element(by.model('user.last'));

   it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

   it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

   it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

   it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

   it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
   </file>
   </example>
   */
  var inputDirective = ['$browser', '$sniffer', function($browser, $sniffer) {
    return {
      restrict: 'E',
      require: '?ngModel',
      link: function(scope, element, attr, ctrl) {
        if (ctrl) {
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer,
            $browser);
        }
      }
    };
  }];

  var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty';

  /**
   * @ngdoc type
   * @name ngModel.NgModelController
   *
   * @property {string} $viewValue Actual string value in the view.
   * @property {*} $modelValue The value in the model, that the control is bound to.
   * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
   the control reads value from the DOM.  Each function is called, in turn, passing the value
   through to the next. The last return value is used to populate the model.
   Used to sanitize / convert the value as well as validation. For validation,
   the parsers should update the validity state using
   {@link ngModel.NgModelController#$setValidity $setValidity()},
   and return `undefined` for invalid values.

   *
   * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
   the model value changes. Each function is called, in turn, passing the value through to the
   next. Used to format / convert values for display in the control and validation.
   * ```js
   * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
   * ngModel.$formatters.push(formatter);
   * ```
   *
   * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
   *     view value has changed. It is called with no arguments, and its return value is ignored.
   *     This can be used in place of additional $watches against the model value.
   *
   * @property {Object} $error An object hash with all errors as keys.
   *
   * @property {boolean} $pristine True if user has not interacted with the control yet.
   * @property {boolean} $dirty True if user has already interacted with the control.
   * @property {boolean} $valid True if there is no error.
   * @property {boolean} $invalid True if at least one error on the control.
   *
   * @description
   *
   * `NgModelController` provides API for the `ng-model` directive. The controller contains
   * services for data-binding, validation, CSS updates, and value formatting and parsing. It
   * purposefully does not contain any logic which deals with DOM rendering or listening to
   * DOM events. Such DOM related logic should be provided by other directives which make use of
   * `NgModelController` for data-binding.
   *
   * ## Custom Control Example
   * This example shows how to use `NgModelController` with a custom control to achieve
   * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
   * collaborate together to achieve the desired result.
   *
   * Note that `contenteditable` is an HTML5 attribute, which tells the browser to let the element
   * contents be edited in place by the user.  This will not work on older browsers.
   *
   * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
   * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
   * However, as we are using `$sce` the model can still decide to to provide unsafe content if it marks
   * that content using the `$sce` service.
   *
   * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
   <file name="style.css">
   [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

   .ng-invalid {
        border: 1px solid red;
      }

   </file>
   <file name="script.js">
   angular.module('customControl', ['ngSanitize']).
   directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if(!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$apply(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
   </file>
   <file name="index.html">
   <form name="myForm">
   <div contenteditable
   name="myWidget" ng-model="userContent"
   strip-br="true"
   required>Change me!</div>
   <span ng-show="myForm.myWidget.$error.required">Required!</span>
   <hr>
   <textarea ng-model="userContent"></textarea>
   </form>
   </file>
   <file name="protractor.js" type="protractor">
   it('should data-bind and become invalid', function() {
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
   </file>
   * </example>
   *
   *
   */
  var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate) {
      this.$viewValue = Number.NaN;
      this.$modelValue = Number.NaN;
      this.$parsers = [];
      this.$formatters = [];
      this.$viewChangeListeners = [];
      this.$pristine = true;
      this.$dirty = false;
      this.$valid = true;
      this.$invalid = false;
      this.$name = $attr.name;

      var ngModelGet = $parse($attr.ngModel),
        ngModelSet = ngModelGet.assign;

      if (!ngModelSet) {
        throw minErr('ngModel')('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
          $attr.ngModel, startingTag($element));
      }

      /**
       * @ngdoc method
       * @name ngModel.NgModelController#$render
       *
       * @description
       * Called when the view needs to be updated. It is expected that the user of the ng-model
       * directive will implement this method.
       */
      this.$render = noop;

      /**
       * @ngdoc method
       * @name ngModel.NgModelController#$isEmpty
       *
       * @description
       * This is called when we need to determine if the value of the input is empty.
       *
       * For instance, the required directive does this to work out if the input has data or not.
       * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
       *
       * You can override this for input directives whose concept of being empty is different to the
       * default. The `checkboxInputType` directive does this because in its case a value of `false`
       * implies empty.
       *
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is empty.
       */
      this.$isEmpty = function(value) {
        return isUndefined(value) || value === '' || value === null || value !== value;
      };

      var parentForm = $element.inheritedData('$formController') || nullFormCtrl,
        invalidCount = 0, // used to easily determine if we are valid
        $error = this.$error = {}; // keep invalid keys here


      // Setup initial state of the control
      $element.addClass(PRISTINE_CLASS);
      toggleValidCss(true);

      // convenience method for easy toggling of classes
      function toggleValidCss(isValid, validationErrorKey) {
        validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
        $animate.removeClass($element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
        $animate.addClass($element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
      }

      /**
       * @ngdoc method
       * @name ngModel.NgModelController#$setValidity
       *
       * @description
       * Change the validity state, and notifies the form when the control changes validity. (i.e. it
       * does not notify form if given validator is already marked as invalid).
       *
       * This method should be called by validators - i.e. the parser or formatter functions.
       *
       * @param {string} validationErrorKey Name of the validator. the `validationErrorKey` will assign
       *        to `$error[validationErrorKey]=isValid` so that it is available for data-binding.
       *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
       *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
       *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
       * @param {boolean} isValid Whether the current state is valid (true) or invalid (false).
       */
      this.$setValidity = function(validationErrorKey, isValid) {
        // Purposeful use of ! here to cast isValid to boolean in case it is undefined
        // jshint -W018
        if ($error[validationErrorKey] === !isValid) return;
        // jshint +W018

        if (isValid) {
          if ($error[validationErrorKey]) invalidCount--;
          if (!invalidCount) {
            toggleValidCss(true);
            this.$valid = true;
            this.$invalid = false;
          }
        } else {
          toggleValidCss(false);
          this.$invalid = true;
          this.$valid = false;
          invalidCount++;
        }

        $error[validationErrorKey] = !isValid;
        toggleValidCss(isValid, validationErrorKey);

        parentForm.$setValidity(validationErrorKey, isValid, this);
      };

      /**
       * @ngdoc method
       * @name ngModel.NgModelController#$setPristine
       *
       * @description
       * Sets the control to its pristine state.
       *
       * This method can be called to remove the 'ng-dirty' class and set the control to its pristine
       * state (ng-pristine class).
       */
      this.$setPristine = function () {
        this.$dirty = false;
        this.$pristine = true;
        $animate.removeClass($element, DIRTY_CLASS);
        $animate.addClass($element, PRISTINE_CLASS);
      };

      /**
       * @ngdoc method
       * @name ngModel.NgModelController#$setViewValue
       *
       * @description
       * Update the view value.
       *
       * This method should be called when the view value changes, typically from within a DOM event handler.
       * For example {@link ng.directive:input input} and
       * {@link ng.directive:select select} directives call it.
       *
       * It will update the $viewValue, then pass this value through each of the functions in `$parsers`,
       * which includes any validators. The value that comes out of this `$parsers` pipeline, be applied to
       * `$modelValue` and the **expression** specified in the `ng-model` attribute.
       *
       * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
       *
       * Note that calling this function does not trigger a `$digest`.
       *
       * @param {string} value Value from the view.
       */
      this.$setViewValue = function(value) {
        this.$viewValue = value;

        // change to dirty
        if (this.$pristine) {
          this.$dirty = true;
          this.$pristine = false;
          $animate.removeClass($element, PRISTINE_CLASS);
          $animate.addClass($element, DIRTY_CLASS);
          parentForm.$setDirty();
        }

        forEach(this.$parsers, function(fn) {
          value = fn(value);
        });

        if (this.$modelValue !== value) {
          this.$modelValue = value;
          ngModelSet($scope, value);
          forEach(this.$viewChangeListeners, function(listener) {
            try {
              listener();
            } catch(e) {
              $exceptionHandler(e);
            }
          });
        }
      };

      // model -> value
      var ctrl = this;

      $scope.$watch(function ngModelWatch() {
        var value = ngModelGet($scope);

        // if scope model value and ngModel value are out of sync
        if (ctrl.$modelValue !== value) {

          var formatters = ctrl.$formatters,
            idx = formatters.length;

          ctrl.$modelValue = value;
          while(idx--) {
            value = formatters[idx](value);
          }

          if (ctrl.$viewValue !== value) {
            ctrl.$viewValue = value;
            ctrl.$render();
          }
        }

        return value;
      });
    }];


  /**
   * @ngdoc directive
   * @name ngModel
   *
   * @element input
   *
   * @description
   * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
   * property on the scope using {@link ngModel.NgModelController NgModelController},
   * which is created and exposed by this directive.
   *
   * `ngModel` is responsible for:
   *
   * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
   *   require.
   * - Providing validation behavior (i.e. required, number, email, url).
   * - Keeping the state of the control (valid/invalid, dirty/pristine, validation errors).
   * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`) including animations.
   * - Registering the control with its parent {@link ng.directive:form form}.
   *
   * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
   * current scope. If the property doesn't already exist on this scope, it will be created
   * implicitly and added to the scope.
   *
   * For best practices on using `ngModel`, see:
   *
   *  - [https://github.com/angular/angular.js/wiki/Understanding-Scopes]
   *
   * For basic examples, how to use `ngModel`, see:
   *
   *  - {@link ng.directive:input input}
   *    - {@link input[text] text}
   *    - {@link input[checkbox] checkbox}
   *    - {@link input[radio] radio}
   *    - {@link input[number] number}
   *    - {@link input[email] email}
   *    - {@link input[url] url}
   *  - {@link ng.directive:select select}
   *  - {@link ng.directive:textarea textarea}
   *
   * # CSS classes
   * The following CSS classes are added and removed on the associated input/select/textarea element
   * depending on the validity of the model.
   *
   *  - `ng-valid` is set if the model is valid.
   *  - `ng-invalid` is set if the model is invalid.
   *  - `ng-pristine` is set if the model is pristine.
   *  - `ng-dirty` is set if the model is dirty.
   *
   * Keep in mind that ngAnimate can detect each of these classes when added and removed.
   *
   * ## Animation Hooks
   *
   * Animations within models are triggered when any of the associated CSS classes are added and removed
   * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
   * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
   * The animations that are triggered within ngModel are similar to how they work in ngClass and
   * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
   *
   * The following example shows a simple way to utilize CSS transitions to style an input element
   * that has been rendered as invalid after it has been validated:
   *
   * <pre>
   * //be sure to include ngAnimate as a module to hook into more
   * //advanced animations
   * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
   * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
   * </pre>
   *
   * @example
   * <example deps="angular-animate.js" animations="true" fixBase="true">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
          $scope.val = '1';
        }
   </script>
   <style>
   .my-input {
           -webkit-transition:all linear 0.5s;
           transition:all linear 0.5s;
           background: transparent;
         }
   .my-input.ng-invalid {
           color:white;
           background: red;
         }
   </style>
   Update input to see transitions when valid/invalid.
   Integer is a valid value.
   <form name="testForm" ng-controller="Ctrl">
   <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input" />
   </form>
   </file>
   * </example>
   */
  var ngModelDirective = function() {
    return {
      require: ['ngModel', '^?form'],
      controller: NgModelController,
      link: function(scope, element, attr, ctrls) {
        // notify others, especially parent forms

        var modelCtrl = ctrls[0],
          formCtrl = ctrls[1] || nullFormCtrl;

        formCtrl.$addControl(modelCtrl);

        scope.$on('$destroy', function() {
          formCtrl.$removeControl(modelCtrl);
        });
      }
    };
  };


  /**
   * @ngdoc directive
   * @name ngChange
   *
   * @description
   * Evaluate the given expression when the user changes the input.
   * The expression is evaluated immediately, unlike the JavaScript onchange event
   * which only triggers at the end of a change (usually, when the user leaves the
   * form element or presses the return key).
   * The expression is not evaluated when the value change is coming from the model.
   *
   * Note, this directive requires `ngModel` to be present.
   *
   * @element input
   * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
   * in input value.
   *
   * @example
   * <example name="ngChange-directive">
   *   <file name="index.html">
   *     <script>
   *       function Controller($scope) {
 *         $scope.counter = 0;
 *         $scope.change = function() {
 *           $scope.counter++;
 *         };
 *       }
   *     </script>
   *     <div ng-controller="Controller">
   *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
   *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
   *       <label for="ng-change-example2">Confirmed</label><br />
   *       <tt>debug = {{confirmed}}</tt><br/>
   *       <tt>counter = {{counter}}</tt><br/>
   *     </div>
   *   </file>
   *   <file name="protractor.js" type="protractor">
   *     var counter = element(by.binding('counter'));
   *     var debug = element(by.binding('confirmed'));
   *
   *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
   *
   *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
   *   </file>
   * </example>
   */
  var ngChangeDirective = valueFn({
    require: 'ngModel',
    link: function(scope, element, attr, ctrl) {
      ctrl.$viewChangeListeners.push(function() {
        scope.$eval(attr.ngChange);
      });
    }
  });


  var requiredDirective = function() {
    return {
      require: '?ngModel',
      link: function(scope, elm, attr, ctrl) {
        if (!ctrl) return;
        attr.required = true; // force truthy in case we are on non input element

        var validator = function(value) {
          if (attr.required && ctrl.$isEmpty(value)) {
            ctrl.$setValidity('required', false);
            return;
          } else {
            ctrl.$setValidity('required', true);
            return value;
          }
        };

        ctrl.$formatters.push(validator);
        ctrl.$parsers.unshift(validator);

        attr.$observe('required', function() {
          validator(ctrl.$viewValue);
        });
      }
    };
  };


  /**
   * @ngdoc directive
   * @name ngList
   *
   * @description
   * Text input that converts between a delimited string and an array of strings. The delimiter
   * can be a fixed string (by default a comma) or a regular expression.
   *
   * @element input
   * @param {string=} ngList optional delimiter that should be used to split the value. If
   *   specified in form `/something/` then the value will be converted into a regular expression.
   *
   * @example
   <example name="ngList-directive">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.names = ['igor', 'misko', 'vojta'];
         }
   </script>
   <form name="myForm" ng-controller="Ctrl">
   List: <input name="namesInput" ng-model="names" ng-list required>
   <span class="error" ng-show="myForm.namesInput.$error.required">
   Required!</span>
   <br>
   <tt>names = {{names}}</tt><br/>
   <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
   <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
   <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
   <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
   </form>
   </file>
   <file name="protractor.js" type="protractor">
   var listInput = element(by.model('names'));
   var names = element(by.binding('{{names}}'));
   var valid = element(by.binding('myForm.namesInput.$valid'));
   var error = element(by.css('span.error'));

   it('should initialize to model', function() {
          expect(names.getText()).toContain('["igor","misko","vojta"]');
          expect(valid.getText()).toContain('true');
          expect(error.getCssValue('display')).toBe('none');
        });

   it('should be invalid if empty', function() {
          listInput.clear();
          listInput.sendKeys('');

          expect(names.getText()).toContain('');
          expect(valid.getText()).toContain('false');
          expect(error.getCssValue('display')).not.toBe('none');        });
   </file>
   </example>
   */
  var ngListDirective = function() {
    return {
      require: 'ngModel',
      link: function(scope, element, attr, ctrl) {
        var match = /\/(.*)\//.exec(attr.ngList),
          separator = match && new RegExp(match[1]) || attr.ngList || ',';

        var parse = function(viewValue) {
          // If the viewValue is invalid (say required but empty) it will be `undefined`
          if (isUndefined(viewValue)) return;

          var list = [];

          if (viewValue) {
            forEach(viewValue.split(separator), function(value) {
              if (value) list.push(trim(value));
            });
          }

          return list;
        };

        ctrl.$parsers.push(parse);
        ctrl.$formatters.push(function(value) {
          if (isArray(value)) {
            return value.join(', ');
          }

          return undefined;
        });

        // Override the standard $isEmpty because an empty array means the input is empty.
        ctrl.$isEmpty = function(value) {
          return !value || !value.length;
        };
      }
    };
  };


  var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
  /**
   * @ngdoc directive
   * @name ngValue
   *
   * @description
   * Binds the given expression to the value of `input[select]` or `input[radio]`, so
   * that when the element is selected, the `ngModel` of that element is set to the
   * bound value.
   *
   * `ngValue` is useful when dynamically generating lists of radio buttons using `ng-repeat`, as
   * shown below.
   *
   * @element input
   * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
   *   of the `input` element
   *
   * @example
   <example name="ngValue-directive">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
            $scope.names = ['pizza', 'unicorns', 'robots'];
            $scope.my = { favorite: 'unicorns' };
          }
   </script>
   <form ng-controller="Ctrl">
   <h2>Which is your favorite?</h2>
   <label ng-repeat="name in names" for="{{name}}">
   {{name}}
   <input type="radio"
   ng-model="my.favorite"
   ng-value="name"
   id="{{name}}"
   name="favorite">
   </label>
   <div>You chose {{my.favorite}}</div>
   </form>
   </file>
   <file name="protractor.js" type="protractor">
   var favorite = element(by.binding('my.favorite'));

   it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
   it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
   </file>
   </example>
   */
  var ngValueDirective = function() {
    return {
      priority: 100,
      compile: function(tpl, tplAttr) {
        if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
          return function ngValueConstantLink(scope, elm, attr) {
            attr.$set('value', scope.$eval(attr.ngValue));
          };
        } else {
          return function ngValueLink(scope, elm, attr) {
            scope.$watch(attr.ngValue, function valueWatchAction(value) {
              attr.$set('value', value);
            });
          };
        }
      }
    };
  };

  /**
   * @ngdoc directive
   * @name ngBind
   * @restrict AC
   *
   * @description
   * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
   * with the value of a given expression, and to update the text content when the value of that
   * expression changes.
   *
   * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
   * `{{ expression }}` which is similar but less verbose.
   *
   * It is preferable to use `ngBind` instead of `{{ expression }}` when a template is momentarily
   * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
   * element attribute, it makes the bindings invisible to the user while the page is loading.
   *
   * An alternative solution to this problem would be using the
   * {@link ng.directive:ngCloak ngCloak} directive.
   *
   *
   * @element ANY
   * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
   *
   * @example
   * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.name = 'Whirled';
         }
   </script>
   <div ng-controller="Ctrl">
   Enter name: <input type="text" ng-model="name"><br>
   Hello <span ng-bind="name"></span>!
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
   </file>
   </example>
   */
  var ngBindDirective = ngDirective(function(scope, element, attr) {
    element.addClass('ng-binding').data('$binding', attr.ngBind);
    scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
      // We are purposefully using == here rather than === because we want to
      // catch when value is "null or undefined"
      // jshint -W041
      element.text(value == undefined ? '' : value);
    });
  });


  /**
   * @ngdoc directive
   * @name ngBindTemplate
   *
   * @description
   * The `ngBindTemplate` directive specifies that the element
   * text content should be replaced with the interpolation of the template
   * in the `ngBindTemplate` attribute.
   * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
   * expressions. This directive is needed since some HTML elements
   * (such as TITLE and OPTION) cannot contain SPAN elements.
   *
   * @element ANY
   * @param {string} ngBindTemplate template of form
   *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
   *
   * @example
   * Try it here: enter text in text box and watch the greeting change.
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.salutation = 'Hello';
           $scope.name = 'World';
         }
   </script>
   <div ng-controller="Ctrl">
   Salutation: <input type="text" ng-model="salutation"><br>
   Name: <input type="text" ng-model="name"><br>
   <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
   </file>
   </example>
   */
  var ngBindTemplateDirective = ['$interpolate', function($interpolate) {
    return function(scope, element, attr) {
      // TODO: move this to scenario runner
      var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
      element.addClass('ng-binding').data('$binding', interpolateFn);
      attr.$observe('ngBindTemplate', function(value) {
        element.text(value);
      });
    };
  }];


  /**
   * @ngdoc directive
   * @name ngBindHtml
   *
   * @description
   * Creates a binding that will innerHTML the result of evaluating the `expression` into the current
   * element in a secure way.  By default, the innerHTML-ed content will be sanitized using the {@link
    * ngSanitize.$sanitize $sanitize} service.  To utilize this functionality, ensure that `$sanitize`
   * is available, for example, by including {@link ngSanitize} in your module's dependencies (not in
   * core Angular.)  You may also bypass sanitization for values you know are safe. To do so, bind to
   * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
   * under {@link ng.$sce#Example Strict Contextual Escaping (SCE)}.
   *
   * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
   * will have an exception (instead of an exploit.)
   *
   * @element ANY
   * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
   *
   * @example
   Try it here: enter text in text box and watch the greeting change.

   <example module="ngBindHtmlExample" deps="angular-sanitize.js">
   <file name="index.html">
   <div ng-controller="ngBindHtmlCtrl">
   <p ng-bind-html="myHTML"></p>
   </div>
   </file>

   <file name="script.js">
   angular.module('ngBindHtmlExample', ['ngSanitize'])

   .controller('ngBindHtmlCtrl', ['$scope', function ngBindHtmlCtrl($scope) {
         $scope.myHTML =
            'I am an <code>HTML</code>string with <a href="#">links!</a> and other <em>stuff</em>';
       }]);
   </file>

   <file name="protractor.js" type="protractor">
   it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
   </file>
   </example>
   */
  var ngBindHtmlDirective = ['$sce', '$parse', function($sce, $parse) {
    return function(scope, element, attr) {
      element.addClass('ng-binding').data('$binding', attr.ngBindHtml);

      var parsed = $parse(attr.ngBindHtml);
      function getStringValue() { return (parsed(scope) || '').toString(); }

      scope.$watch(getStringValue, function ngBindHtmlWatchAction(value) {
        element.html($sce.getTrustedHtml(parsed(scope)) || '');
      });
    };
  }];

  function classDirective(name, selector) {
    name = 'ngClass' + name;
    return ['$animate', function($animate) {
      return {
        restrict: 'AC',
        link: function(scope, element, attr) {
          var oldVal;

          scope.$watch(attr[name], ngClassWatchAction, true);

          attr.$observe('class', function(value) {
            ngClassWatchAction(scope.$eval(attr[name]));
          });


          if (name !== 'ngClass') {
            scope.$watch('$index', function($index, old$index) {
              // jshint bitwise: false
              var mod = $index & 1;
              if (mod !== (old$index & 1)) {
                var classes = arrayClasses(scope.$eval(attr[name]));
                mod === selector ?
                  addClasses(classes) :
                  removeClasses(classes);
              }
            });
          }

          function addClasses(classes) {
            var newClasses = digestClassCounts(classes, 1);
            attr.$addClass(newClasses);
          }

          function removeClasses(classes) {
            var newClasses = digestClassCounts(classes, -1);
            attr.$removeClass(newClasses);
          }

          function digestClassCounts (classes, count) {
            var classCounts = element.data('$classCounts') || {};
            var classesToUpdate = [];
            forEach(classes, function (className) {
              if (count > 0 || classCounts[className]) {
                classCounts[className] = (classCounts[className] || 0) + count;
                if (classCounts[className] === +(count > 0)) {
                  classesToUpdate.push(className);
                }
              }
            });
            element.data('$classCounts', classCounts);
            return classesToUpdate.join(' ');
          }

          function updateClasses (oldClasses, newClasses) {
            var toAdd = arrayDifference(newClasses, oldClasses);
            var toRemove = arrayDifference(oldClasses, newClasses);
            toRemove = digestClassCounts(toRemove, -1);
            toAdd = digestClassCounts(toAdd, 1);

            if (toAdd.length === 0) {
              $animate.removeClass(element, toRemove);
            } else if (toRemove.length === 0) {
              $animate.addClass(element, toAdd);
            } else {
              $animate.setClass(element, toAdd, toRemove);
            }
          }

          function ngClassWatchAction(newVal) {
            if (selector === true || scope.$index % 2 === selector) {
              var newClasses = arrayClasses(newVal || []);
              if (!oldVal) {
                addClasses(newClasses);
              } else if (!equals(newVal,oldVal)) {
                var oldClasses = arrayClasses(oldVal);
                updateClasses(oldClasses, newClasses);
              }
            }
            oldVal = shallowCopy(newVal);
          }
        }
      };

      function arrayDifference(tokens1, tokens2) {
        var values = [];

        outer:
          for(var i = 0; i < tokens1.length; i++) {
            var token = tokens1[i];
            for(var j = 0; j < tokens2.length; j++) {
              if(token == tokens2[j]) continue outer;
            }
            values.push(token);
          }
        return values;
      }

      function arrayClasses (classVal) {
        if (isArray(classVal)) {
          return classVal;
        } else if (isString(classVal)) {
          return classVal.split(' ');
        } else if (isObject(classVal)) {
          var classes = [], i = 0;
          forEach(classVal, function(v, k) {
            if (v) {
              classes = classes.concat(k.split(' '));
            }
          });
          return classes;
        }
        return classVal;
      }
    }];
  }

  /**
   * @ngdoc directive
   * @name ngClass
   * @restrict AC
   *
   * @description
   * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
   * an expression that represents all classes to be added.
   *
   * The directive operates in three different ways, depending on which of three types the expression
   * evaluates to:
   *
   * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
   * names.
   *
   * 2. If the expression evaluates to an array, each element of the array should be a string that is
   * one or more space-delimited class names.
   *
   * 3. If the expression evaluates to an object, then for each key-value pair of the
   * object with a truthy value the corresponding key is used as a class name.
   *
   * The directive won't add duplicate classes if a particular class was already set.
   *
   * When the expression changes, the previously added classes are removed and only then the
   * new classes are added.
   *
   * @animations
   * add - happens just before the class is applied to the element
   * remove - happens just before the class is removed from the element
   *
   * @element ANY
   * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
   *   of the evaluation can be a string representing space delimited class
   *   names, an array, or a map of class names to boolean values. In the case of a map, the
   *   names of the properties whose values are truthy will be added as css classes to the
   *   element.
   *
   * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
   <file name="index.html">
   <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
   <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>
   <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>
   <input type="checkbox" ng-model="error"> error (apply "red" class)
   <hr>
   <p ng-class="style">Using String Syntax</p>
   <input type="text" ng-model="style" placeholder="Type: bold strike red">
   <hr>
   <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
   <input ng-model="style1" placeholder="Type: bold, strike or red"><br>
   <input ng-model="style2" placeholder="Type: bold, strike or red"><br>
   <input ng-model="style3" placeholder="Type: bold, strike or red"><br>
   </file>
   <file name="style.css">
   .strike {
         text-decoration: line-through;
       }
   .bold {
           font-weight: bold;
       }
   .red {
           color: red;
       }
   </file>
   <file name="protractor.js" type="protractor">
   var ps = element.all(by.css('p'));

   it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/red/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/red/);
       });

   it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

   it('array example should have 3 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.last().getAttribute('class')).toBe('bold strike red');
       });
   </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
   <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
   <br>
   <span class="base-class" ng-class="myVar">Sample Text</span>
   </file>
   <file name="style.css">
   .base-class {
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

   .base-class.my-class {
         color: red;
         font-size:3em;
       }
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
   </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link ngAnimate.$animate#addclass $animate.addClass} and
   {@link ngAnimate.$animate#removeclass $animate.removeClass}.
   */
  var ngClassDirective = classDirective('', true);

  /**
   * @ngdoc directive
   * @name ngClassOdd
   * @restrict AC
   *
   * @description
   * The `ngClassOdd` and `ngClassEven` directives work exactly as
   * {@link ng.directive:ngClass ngClass}, except they work in
   * conjunction with `ngRepeat` and take effect only on odd (even) rows.
   *
   * This directive can be applied only within the scope of an
   * {@link ng.directive:ngRepeat ngRepeat}.
   *
   * @element ANY
   * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
   *   of the evaluation can be a string representing space delimited class names or an array.
   *
   * @example
   <example>
   <file name="index.html">
   <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
   <li ng-repeat="name in names">
   <span ng-class-odd="'odd'" ng-class-even="'even'">
   {{name}}
   </span>
   </li>
   </ol>
   </file>
   <file name="style.css">
   .odd {
         color: red;
       }
   .even {
         color: blue;
       }
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
   </file>
   </example>
   */
  var ngClassOddDirective = classDirective('Odd', 0);

  /**
   * @ngdoc directive
   * @name ngClassEven
   * @restrict AC
   *
   * @description
   * The `ngClassOdd` and `ngClassEven` directives work exactly as
   * {@link ng.directive:ngClass ngClass}, except they work in
   * conjunction with `ngRepeat` and take effect only on odd (even) rows.
   *
   * This directive can be applied only within the scope of an
   * {@link ng.directive:ngRepeat ngRepeat}.
   *
   * @element ANY
   * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
   *   result of the evaluation can be a string representing space delimited class names or an array.
   *
   * @example
   <example>
   <file name="index.html">
   <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
   <li ng-repeat="name in names">
   <span ng-class-odd="'odd'" ng-class-even="'even'">
   {{name}} &nbsp; &nbsp; &nbsp;
   </span>
   </li>
   </ol>
   </file>
   <file name="style.css">
   .odd {
         color: red;
       }
   .even {
         color: blue;
       }
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
   </file>
   </example>
   */
  var ngClassEvenDirective = classDirective('Even', 1);

  /**
   * @ngdoc directive
   * @name ngCloak
   * @restrict AC
   *
   * @description
   * The `ngCloak` directive is used to prevent the Angular html template from being briefly
   * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
   * directive to avoid the undesirable flicker effect caused by the html template display.
   *
   * The directive can be applied to the `<body>` element, but the preferred usage is to apply
   * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
   * of the browser view.
   *
   * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
   * `angular.min.js`.
   * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
   *
   * ```css
   * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
   * ```
   *
   * When this css rule is loaded by the browser, all html elements (including their children) that
   * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
   * during the compilation of the template it deletes the `ngCloak` element attribute, making
   * the compiled element visible.
   *
   * For the best result, the `angular.js` script must be loaded in the head section of the html
   * document; alternatively, the css rule above must be included in the external stylesheet of the
   * application.
   *
   * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they
   * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css
   * class `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.
   *
   * @element ANY
   *
   * @example
   <example>
   <file name="index.html">
   <div id="template1" ng-cloak>{{ 'hello' }}</div>
   <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
   </file>
   </example>
   *
   */
  var ngCloakDirective = ngDirective({
    compile: function(element, attr) {
      attr.$set('ngCloak', undefined);
      element.removeClass('ng-cloak');
    }
  });

  /**
   * @ngdoc directive
   * @name ngController
   *
   * @description
   * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
   * supports the principles behind the Model-View-Controller design pattern.
   *
   * MVC components in angular:
   *
   * * Model — The Model is scope properties; scopes are attached to the DOM where scope properties
   *   are accessed through bindings.
   * * View — The template (HTML with data bindings) that is rendered into the View.
   * * Controller — The `ngController` directive specifies a Controller class; the class contains business
   *   logic behind the application to decorate the scope with functions and values
   *
   * Note that you can also attach controllers to the DOM by declaring it in a route definition
   * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
   * again using `ng-controller` in the template itself.  This will cause the controller to be attached
   * and executed twice.
   *
   * @element ANY
   * @scope
   * @param {expression} ngController Name of a globally accessible constructor function or an
   *     {@link guide/expression expression} that on the current scope evaluates to a
   *     constructor function. The controller instance can be published into a scope property
   *     by specifying `as propertyName`.
   *
   * @example
   * Here is a simple form for editing user contact information. Adding, removing, clearing, and
   * greeting are methods declared on the controller (see source tab). These methods can
   * easily be called from the angular markup. Any changes to the data are automatically reflected
   * in the View without the need for a manual update.
   *
   * Two different declaration styles are included below:
   *
   * * one binds methods and properties directly onto the controller using `this`:
   * `ng-controller="SettingsController1 as settings"`
   * * one injects `$scope` into the controller:
   * `ng-controller="SettingsController2"`
   *
   * The second option is more common in the Angular community, and is generally used in boilerplates
   * and in this guide. However, there are advantages to binding properties directly to the controller
   * and avoiding scope.
   *
   * * Using `controller as` makes it obvious which controller you are accessing in the template when
   * multiple controllers apply to an element.
   * * If you are writing your controllers as classes you have easier access to the properties and
   * methods, which will appear on the scope, from inside the controller code.
   * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
   * inheritance masking primitives.
   *
   * This example demonstrates the `controller as` syntax.
   *
   * <example name="ngControllerAs">
   *   <file name="index.html">
   *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
   *      Name: <input type="text" ng-model="settings.name"/>
   *      [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
   *      Contact:
   *      <ul>
   *        <li ng-repeat="contact in settings.contacts">
   *          <select ng-model="contact.type">
   *             <option>phone</option>
   *             <option>email</option>
   *          </select>
   *          <input type="text" ng-model="contact.value"/>
   *          [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
   *          | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
   *        </li>
   *        <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
   *     </ul>
   *    </div>
   *   </file>
   *   <file name="app.js">
   *    function SettingsController1() {
 *      this.name = "John Smith";
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'} ];
   *    }
   *
   *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
   *
   *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
   *    };
   *
   *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
   *
   *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
   *   </file>
   *   <file name="protractor.js" type="protractor">
   *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.findElement(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.findElement(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.findElement(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.findElement(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
   *
   *       firstRepeat.findElement(by.linkText('clear')).click();
   *
   *       expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))
   *           .toBe('');
   *
   *       container.findElement(by.linkText('add')).click();
   *
   *       expect(container.findElement(by.repeater('contact in settings.contacts').row(2))
   *           .findElement(by.model('contact.value'))
   *           .getAttribute('value'))
   *           .toBe('yourname@example.org');
   *     });
   *   </file>
   * </example>
   *
   * This example demonstrates the "attach to `$scope`" style of controller.
   *
   * <example name="ngController">
   *  <file name="index.html">
   *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
   *     Name: <input type="text" ng-model="name"/>
   *     [ <a href="" ng-click="greet()">greet</a> ]<br/>
   *     Contact:
   *     <ul>
   *       <li ng-repeat="contact in contacts">
   *         <select ng-model="contact.type">
   *            <option>phone</option>
   *            <option>email</option>
   *         </select>
   *         <input type="text" ng-model="contact.value"/>
   *         [ <a href="" ng-click="clearContact(contact)">clear</a>
   *         | <a href="" ng-click="removeContact(contact)">X</a> ]
   *       </li>
   *       <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
   *    </ul>
   *   </div>
   *  </file>
   *  <file name="app.js">
   *   function SettingsController2($scope) {
 *     $scope.name = "John Smith";
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'} ];
   *
   *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
   *
   *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
   *     };
   *
   *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
   *
   *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
   *   }
   *  </file>
   *  <file name="protractor.js" type="protractor">
   *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.findElement(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.findElement(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.findElement(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.findElement(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
   *
   *      firstRepeat.findElement(by.linkText('clear')).click();
   *
   *      expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))
   *          .toBe('');
   *
   *      container.findElement(by.linkText('add')).click();
   *
   *      expect(container.findElement(by.repeater('contact in contacts').row(2))
   *          .findElement(by.model('contact.value'))
   *          .getAttribute('value'))
   *          .toBe('yourname@example.org');
   *    });
   *  </file>
   *</example>

   */
  var ngControllerDirective = [function() {
    return {
      scope: true,
      controller: '@',
      priority: 500
    };
  }];

  /**
   * @ngdoc directive
   * @name ngCsp
   *
   * @element html
   * @description
   * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
   *
   * This is necessary when developing things like Google Chrome Extensions.
   *
   * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
   * For us to be compatible, we just need to implement the "getterFn" in $parse without violating
   * any of these restrictions.
   *
   * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
   * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
   * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
   * be raised.
   *
   * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
   * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
   * To make those directives work in CSP mode, include the `angular-csp.css` manually.
   *
   * In order to use this feature put the `ngCsp` directive on the root element of the application.
   *
   * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
   *
   * @example
   * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
   <!doctype html>
   <html ng-app ng-csp>
   ...
   ...
   </html>
   ```
   */

// ngCsp is not implemented as a proper directive any more, because we need it be processed while we bootstrap
// the system (before $parse is instantiated), for this reason we just have a csp() fn that looks for ng-csp attribute
// anywhere in the current doc

  /**
   * @ngdoc directive
   * @name ngClick
   *
   * @description
   * The ngClick directive allows you to specify custom behavior when
   * an element is clicked.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
   * click. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-click="count = count + 1" ng-init="count=0">
   Increment
   </button>
   count: {{count}}
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
   </file>
   </example>
   */
  /*
   * A directive that allows creation of custom onclick handlers that are defined as angular
   * expressions and are compiled and executed within the current scope.
   *
   * Events that are handled via these handler are always configured not to propagate further.
   */
  var ngEventDirectives = {};
  forEach(
    'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
    function(name) {
      var directiveName = directiveNormalize('ng-' + name);
      ngEventDirectives[directiveName] = ['$parse', function($parse) {
        return {
          compile: function($element, attr) {
            var fn = $parse(attr[directiveName]);
            return function(scope, element, attr) {
              element.on(lowercase(name), function(event) {
                scope.$apply(function() {
                  fn(scope, {$event:event});
                });
              });
            };
          }
        };
      }];
    }
  );

  /**
   * @ngdoc directive
   * @name ngDblclick
   *
   * @description
   * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
   * a dblclick. (The Event object is available as `$event`)
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-dblclick="count = count + 1" ng-init="count=0">
   Increment (on double click)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngMousedown
   *
   * @description
   * The ngMousedown directive allows you to specify custom behavior on mousedown event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
   * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mousedown="count = count + 1" ng-init="count=0">
   Increment (on mouse down)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngMouseup
   *
   * @description
   * Specify custom behavior on mouseup event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
   * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mouseup="count = count + 1" ng-init="count=0">
   Increment (on mouse up)
   </button>
   count: {{count}}
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngMouseover
   *
   * @description
   * Specify custom behavior on mouseover event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
   * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mouseover="count = count + 1" ng-init="count=0">
   Increment (when mouse is over)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngMouseenter
   *
   * @description
   * Specify custom behavior on mouseenter event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
   * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mouseenter="count = count + 1" ng-init="count=0">
   Increment (when mouse enters)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngMouseleave
   *
   * @description
   * Specify custom behavior on mouseleave event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
   * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mouseleave="count = count + 1" ng-init="count=0">
   Increment (when mouse leaves)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngMousemove
   *
   * @description
   * Specify custom behavior on mousemove event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
   * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <button ng-mousemove="count = count + 1" ng-init="count=0">
   Increment (when mouse moves)
   </button>
   count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngKeydown
   *
   * @description
   * Specify custom behavior on keydown event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
   * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
   *
   * @example
   <example>
   <file name="index.html">
   <input ng-keydown="count = count + 1" ng-init="count=0">
   key down count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngKeyup
   *
   * @description
   * Specify custom behavior on keyup event.
   *
   * @element ANY
   * @priority 0
   * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
   * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
   *
   * @example
   <example>
   <file name="index.html">
   <p>Typing in the input box below updates the key count</p>
   <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

   <p>Typing in the input box below updates the keycode</p>
   <input ng-keyup="event=$event">
   <p>event keyCode: {{ event.keyCode }}</p>
   <p>event altKey: {{ event.altKey }}</p>
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngKeypress
   *
   * @description
   * Specify custom behavior on keypress event.
   *
   * @element ANY
   * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
   * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
   * and can be interrogated for keyCode, altKey, etc.)
   *
   * @example
   <example>
   <file name="index.html">
   <input ng-keypress="count = count + 1" ng-init="count=0">
   key press count: {{count}}
   </file>
   </example>
   */


  /**
   * @ngdoc directive
   * @name ngSubmit
   *
   * @description
   * Enables binding angular expressions to onsubmit events.
   *
   * Additionally it prevents the default action (which for form means sending the request to the
   * server and reloading the current page), but only if the form does not contain `action`,
   * `data-action`, or `x-action` attributes.
   *
   * @element form
   * @priority 0
   * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
   * ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
          $scope.list = [];
          $scope.text = 'hello';
          $scope.submit = function() {
            if ($scope.text) {
              $scope.list.push(this.text);
              $scope.text = '';
            }
          };
        }
   </script>
   <form ng-submit="submit()" ng-controller="Ctrl">
   Enter text and hit enter:
   <input type="text" ng-model="text" name="text" />
   <input type="submit" id="submit" value="Submit" />
   <pre>list={{list}}</pre>
   </form>
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.input('text')).getAttribute('value')).toBe('');
       });
   it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngFocus
   *
   * @description
   * Specify custom behavior on focus event.
   *
   * @element window, input, select, textarea, a
   * @priority 0
   * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
   * focus. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   * See {@link ng.directive:ngClick ngClick}
   */

  /**
   * @ngdoc directive
   * @name ngBlur
   *
   * @description
   * Specify custom behavior on blur event.
   *
   * @element window, input, select, textarea, a
   * @priority 0
   * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
   * blur. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   * See {@link ng.directive:ngClick ngClick}
   */

  /**
   * @ngdoc directive
   * @name ngCopy
   *
   * @description
   * Specify custom behavior on copy event.
   *
   * @element window, input, select, textarea, a
   * @priority 0
   * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
   * copy. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
   copied: {{copied}}
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngCut
   *
   * @description
   * Specify custom behavior on cut event.
   *
   * @element window, input, select, textarea, a
   * @priority 0
   * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
   * cut. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
   cut: {{cut}}
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngPaste
   *
   * @description
   * Specify custom behavior on paste event.
   *
   * @element window, input, select, textarea, a
   * @priority 0
   * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
   * paste. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   <example>
   <file name="index.html">
   <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
   pasted: {{paste}}
   </file>
   </example>
   */

  /**
   * @ngdoc directive
   * @name ngIf
   * @restrict A
   *
   * @description
   * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
   * {expression}. If the expression assigned to `ngIf` evaluates to a false
   * value then the element is removed from the DOM, otherwise a clone of the
   * element is reinserted into the DOM.
   *
   * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
   * element in the DOM rather than changing its visibility via the `display` css property.  A common
   * case when this difference is significant is when using css selectors that rely on an element's
   * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
   *
   * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
   * is created when the element is restored.  The scope created within `ngIf` inherits from
   * its parent scope using
   * [prototypal inheritance](https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance).
   * An important implication of this is if `ngModel` is used within `ngIf` to bind to
   * a javascript primitive defined in the parent scope. In this case any modifications made to the
   * variable within the child scope will override (hide) the value in the parent scope.
   *
   * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
   * is if an element's class attribute is directly modified after it's compiled, using something like
   * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
   * the added class will be lost because the original compiled state is used to regenerate the element.
   *
   * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
   * and `leave` effects.
   *
   * @animations
   * enter - happens just after the ngIf contents change and a new DOM element is created and injected into the ngIf container
   * leave - happens just before the ngIf contents are removed from the DOM
   *
   * @element ANY
   * @scope
   * @priority 600
   * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
   *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
   *     element is added to the DOM tree.
   *
   * @example
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
   Show when checked:
   <span ng-if="checked" class="animate-if">
   I'm removed when the checkbox is unchecked.
   </span>
   </file>
   <file name="animations.css">
   .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

   .animate-if.ng-enter, .animate-if.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

   .animate-if.ng-enter,
   .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

   .animate-if.ng-leave,
   .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
   </file>
   </example>
   */
  var ngIfDirective = ['$animate', function($animate) {
    return {
      transclude: 'element',
      priority: 600,
      terminal: true,
      restrict: 'A',
      $$tlb: true,
      link: function ($scope, $element, $attr, ctrl, $transclude) {
        var block, childScope, previousElements;
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

          if (toBoolean(value)) {
            if (!childScope) {
              childScope = $scope.$new();
              $transclude(childScope, function (clone) {
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block = {
                  clone: clone
                };
                $animate.enter(clone, $element.parent(), $element);
              });
            }
          } else {
            if(previousElements) {
              previousElements.remove();
              previousElements = null;
            }
            if(childScope) {
              childScope.$destroy();
              childScope = null;
            }
            if(block) {
              previousElements = getBlockElements(block.clone);
              $animate.leave(previousElements, function() {
                previousElements = null;
              });
              block = null;
            }
          }
        });
      }
    };
  }];

  /**
   * @ngdoc directive
   * @name ngInclude
   * @restrict ECA
   *
   * @description
   * Fetches, compiles and includes an external HTML fragment.
   *
   * By default, the template URL is restricted to the same domain and protocol as the
   * application document. This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
   * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
   * [wrap them](ng.$sce#trustAsResourceUrl) as trusted values. Refer to Angular's {@link
    * ng.$sce Strict Contextual Escaping}.
   *
   * In addition, the browser's
   * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
   * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
   * policy may further restrict whether the template is successfully loaded.
   * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
   * access on some browsers.
   *
   * @animations
   * enter - animation is used to bring new content into the browser.
   * leave - animation is used to animate existing content away.
   *
   * The enter and leave animation occur concurrently.
   *
   * @scope
   * @priority 400
   *
   * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
   *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
   * @param {string=} onload Expression to evaluate when a new partial is loaded.
   *
   * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
   *
   *                  - If the attribute is not set, disable scrolling.
   *                  - If the attribute is set without value, enable scrolling.
   *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
   *
   * @example
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   <div ng-controller="Ctrl">
   <select ng-model="template" ng-options="t.name for t in templates">
   <option value="">(blank)</option>
   </select>
   url of the template: <tt>{{template.url}}</tt>
   <hr/>
   <div class="slide-animate-container">
   <div class="slide-animate" ng-include="template.url"></div>
   </div>
   </div>
   </file>
   <file name="script.js">
   function Ctrl($scope) {
        $scope.templates =
          [ { name: 'template1.html', url: 'template1.html'},
            { name: 'template2.html', url: 'template2.html'} ];
        $scope.template = $scope.templates[0];
      }
   </file>
   <file name="template1.html">
   Content of template1.html
   </file>
   <file name="template2.html">
   Content of template2.html
   </file>
   <file name="animations.css">
   .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

   .slide-animate {
        padding:10px;
      }

   .slide-animate.ng-enter, .slide-animate.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

   .slide-animate.ng-enter {
        top:-50px;
      }
   .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

   .slide-animate.ng-leave {
        top:0;
      }
   .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
   </file>
   <file name="protractor.js" type="protractor">
   var templateSelect = element(by.model('template'));
   var includeElem = element(by.css('[ng-include]'));

   it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

   it('should load template2.html', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.element.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

   it('should change to blank', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.element.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
   </file>
   </example>
   */


  /**
   * @ngdoc event
   * @name ngInclude#$includeContentRequested
   * @eventType emit on the scope ngInclude was declared in
   * @description
   * Emitted every time the ngInclude content is requested.
   */


  /**
   * @ngdoc event
   * @name ngInclude#$includeContentLoaded
   * @eventType emit on the current ngInclude scope
   * @description
   * Emitted every time the ngInclude content is reloaded.
   */
  var ngIncludeDirective = ['$http', '$templateCache', '$anchorScroll', '$animate', '$sce',
    function($http,   $templateCache,   $anchorScroll,   $animate,   $sce) {
      return {
        restrict: 'ECA',
        priority: 400,
        terminal: true,
        transclude: 'element',
        controller: angular.noop,
        compile: function(element, attr) {
          var srcExp = attr.ngInclude || attr.src,
            onloadExp = attr.onload || '',
            autoScrollExp = attr.autoscroll;

          return function(scope, $element, $attr, ctrl, $transclude) {
            var changeCounter = 0,
              currentScope,
              previousElement,
              currentElement;

            var cleanupLastIncludeContent = function() {
              if(previousElement) {
                previousElement.remove();
                previousElement = null;
              }
              if(currentScope) {
                currentScope.$destroy();
                currentScope = null;
              }
              if(currentElement) {
                $animate.leave(currentElement, function() {
                  previousElement = null;
                });
                previousElement = currentElement;
                currentElement = null;
              }
            };

            scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
              var afterAnimation = function() {
                if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                  $anchorScroll();
                }
              };
              var thisChangeId = ++changeCounter;

              if (src) {
                $http.get(src, {cache: $templateCache}).success(function(response) {
                  if (thisChangeId !== changeCounter) return;
                  var newScope = scope.$new();
                  ctrl.template = response;

                  // Note: This will also link all children of ng-include that were contained in the original
                  // html. If that content contains controllers, ... they could pollute/change the scope.
                  // However, using ng-include on an element with additional content does not make sense...
                  // Note: We can't remove them in the cloneAttchFn of $transclude as that
                  // function is called before linking the content, which would apply child
                  // directives to non existing elements.
                  var clone = $transclude(newScope, function(clone) {
                    cleanupLastIncludeContent();
                    $animate.enter(clone, null, $element, afterAnimation);
                  });

                  currentScope = newScope;
                  currentElement = clone;

                  currentScope.$emit('$includeContentLoaded');
                  scope.$eval(onloadExp);
                }).error(function() {
                  if (thisChangeId === changeCounter) cleanupLastIncludeContent();
                });
                scope.$emit('$includeContentRequested');
              } else {
                cleanupLastIncludeContent();
                ctrl.template = null;
              }
            });
          };
        }
      };
    }];

// This directive is called during the $transclude call of the first `ngInclude` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngInclude
// is called.
  var ngIncludeFillContentDirective = ['$compile',
    function($compile) {
      return {
        restrict: 'ECA',
        priority: -400,
        require: 'ngInclude',
        link: function(scope, $element, $attr, ctrl) {
          $element.html(ctrl.template);
          $compile($element.contents())(scope);
        }
      };
    }];

  /**
   * @ngdoc directive
   * @name ngInit
   * @restrict AC
   *
   * @description
   * The `ngInit` directive allows you to evaluate an expression in the
   * current scope.
   *
   * <div class="alert alert-error">
   * The only appropriate use of `ngInit` is for aliasing special properties of
   * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
   * should use {@link guide/controller controllers} rather than `ngInit`
   * to initialize values on a scope.
   * </div>
   * <div class="alert alert-warning">
   * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
   * sure you have parenthesis for correct precedence:
   * <pre class="prettyprint">
   *   <div ng-init="test1 = (data | orderBy:'name')"></div>
   * </pre>
   * </div>
   *
   * @priority 450
   *
   * @element ANY
   * @param {expression} ngInit {@link guide/expression Expression} to eval.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
       $scope.list = [['a', 'b'], ['c', 'd']];
     }
   </script>
   <div ng-controller="Ctrl">
   <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
   <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
   <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
   </div>
   </div>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
   </file>
   </example>
   */
  var ngInitDirective = ngDirective({
    priority: 450,
    compile: function() {
      return {
        pre: function(scope, element, attrs) {
          scope.$eval(attrs.ngInit);
        }
      };
    }
  });

  /**
   * @ngdoc directive
   * @name ngNonBindable
   * @restrict AC
   * @priority 1000
   *
   * @description
   * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
   * DOM element. This is useful if the element contains what appears to be Angular directives and
   * bindings but which should be ignored by Angular. This could be the case if you have a site that
   * displays snippets of code, for instance.
   *
   * @element ANY
   *
   * @example
   * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
   * but the one wrapped in `ngNonBindable` is left alone.
   *
   * @example
   <example>
   <file name="index.html">
   <div>Normal: {{1 + 2}}</div>
   <div ng-non-bindable>Ignored: {{1 + 2}}</div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
   </file>
   </example>
   */
  var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

  /**
   * @ngdoc directive
   * @name ngPluralize
   * @restrict EA
   *
   * @description
   * `ngPluralize` is a directive that displays messages according to en-US localization rules.
   * These rules are bundled with angular.js, but can be overridden
   * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
   * by specifying the mappings between
   * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
   * and the strings to be displayed.
   *
   * # Plural categories and explicit number rules
   * There are two
   * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
   * in Angular's default en-US locale: "one" and "other".
   *
   * While a plural category may match many numbers (for example, in en-US locale, "other" can match
   * any number that is not 1), an explicit number rule can only match one number. For example, the
   * explicit number rule for "3" matches the number 3. There are examples of plural categories
   * and explicit number rules throughout the rest of this documentation.
   *
   * # Configuring ngPluralize
   * You configure ngPluralize by providing 2 attributes: `count` and `when`.
   * You can also provide an optional attribute, `offset`.
   *
   * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
   *
   * The `when` attribute specifies the mappings between plural categories and the actual
   * string to be displayed. The value of the attribute should be a JSON object.
   *
   * The following example shows how to configure ngPluralize:
   *
   * ```html
   * <ng-pluralize count="personCount"
   when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
   * </ng-pluralize>
   *```
   *
   * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
   * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
   * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
   * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
   * show "a dozen people are viewing".
   *
   * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
   * into pluralized strings. In the previous example, Angular will replace `{}` with
   * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
   * for <span ng-non-bindable>{{numberExpression}}</span>.
   *
   * # Configuring ngPluralize with offset
   * The `offset` attribute allows further customization of pluralized text, which can result in
   * a better user experience. For example, instead of the message "4 people are viewing this document",
   * you might display "John, Kate and 2 others are viewing this document".
   * The offset attribute allows you to offset a number by any desired value.
   * Let's take a look at an example:
   *
   * ```html
   * <ng-pluralize count="personCount" offset=2
   *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
   * </ng-pluralize>
   * ```
   *
   * Notice that we are still using two plural categories(one, other), but we added
   * three explicit number rules 0, 1 and 2.
   * When one person, perhaps John, views the document, "John is viewing" will be shown.
   * When three people view the document, no explicit number rule is found, so
   * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
   * In this case, plural category 'one' is matched and "John, Marry and one other person are viewing"
   * is shown.
   *
   * Note that when you specify offsets, you must provide explicit number rules for
   * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
   * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
   * plural categories "one" and "other".
   *
   * @param {string|expression} count The variable to be bound to.
   * @param {string} when The mapping between plural category to its corresponding strings.
   * @param {number=} offset Offset to deduct from the total number.
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function Ctrl($scope) {
            $scope.person1 = 'Igor';
            $scope.person2 = 'Misko';
            $scope.personCount = 1;
          }
   </script>
   <div ng-controller="Ctrl">
   Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
   Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
   Number of People:<input type="text" ng-model="personCount" value="1" /><br/>

   <!--- Example with simple pluralization rules for en locale --->
   Without Offset:
   <ng-pluralize count="personCount"
   when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
   </ng-pluralize><br>

   <!--- Example with offset --->
   With Offset(2):
   <ng-pluralize count="personCount" offset=2
   when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
   </ng-pluralize>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
   it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
   </file>
   </example>
   */
  var ngPluralizeDirective = ['$locale', '$interpolate', function($locale, $interpolate) {
    var BRACE = /{}/g;
    return {
      restrict: 'EA',
      link: function(scope, element, attr) {
        var numberExp = attr.count,
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
          offset = attr.offset || 0,
          whens = scope.$eval(whenExp) || {},
          whensExpFns = {},
          startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          isWhen = /^when(Minus)?(.+)$/;

        forEach(attr, function(expression, attributeName) {
          if (isWhen.test(attributeName)) {
            whens[lowercase(attributeName.replace('when', '').replace('Minus', '-'))] =
              element.attr(attr.$attr[attributeName]);
          }
        });
        forEach(whens, function(expression, key) {
          whensExpFns[key] =
            $interpolate(expression.replace(BRACE, startSymbol + numberExp + '-' +
              offset + endSymbol));
        });

        scope.$watch(function ngPluralizeWatch() {
          var value = parseFloat(scope.$eval(numberExp));

          if (!isNaN(value)) {
            //if explicit number rule such as 1, 2, 3... is defined, just use it. Otherwise,
            //check it against pluralization rules in $locale service
            if (!(value in whens)) value = $locale.pluralCat(value - offset);
            return whensExpFns[value](scope, element, true);
          } else {
            return '';
          }
        }, function ngPluralizeWatchAction(newVal) {
          element.text(newVal);
        });
      }
    };
  }];

  /**
   * @ngdoc directive
   * @name ngRepeat
   *
   * @description
   * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
   * instance gets its own scope, where the given loop variable is set to the current collection item,
   * and `$index` is set to the item index or key.
   *
   * Special properties are exposed on the local scope of each template instance, including:
   *
   * | Variable  | Type            | Details                                                                     |
   * |-----------|-----------------|-----------------------------------------------------------------------------|
   * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
   * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
   * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
   * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
   * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
   * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
   *
   * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
   * This may be useful when, for instance, nesting ngRepeats.
   *
   * # Special repeat start and end points
   * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
   * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
   * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
   * up to and including the ending HTML tag where **ng-repeat-end** is placed.
   *
   * The example below makes use of this feature:
   * ```html
   *   <header ng-repeat-start="item in items">
   *     Header {{ item }}
   *   </header>
   *   <div class="body">
   *     Body {{ item }}
   *   </div>
   *   <footer ng-repeat-end>
   *     Footer {{ item }}
   *   </footer>
   * ```
   *
   * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
   * ```html
   *   <header>
   *     Header A
   *   </header>
   *   <div class="body">
   *     Body A
   *   </div>
   *   <footer>
   *     Footer A
   *   </footer>
   *   <header>
   *     Header B
   *   </header>
   *   <div class="body">
   *     Body B
   *   </div>
   *   <footer>
   *     Footer B
   *   </footer>
   * ```
   *
   * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
   * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
   *
   * @animations
   * **.enter** - when a new item is added to the list or when an item is revealed after a filter
   *
   * **.leave** - when an item is removed from the list or when an item is filtered out
   *
   * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
   *
   * @element ANY
   * @scope
   * @priority 1000
   * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
   *   formats are currently supported:
   *
   *   * `variable in expression` – where variable is the user defined loop variable and `expression`
   *     is a scope expression giving the collection to enumerate.
   *
   *     For example: `album in artist.albums`.
   *
   *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
   *     and `expression` is the scope expression giving the collection to enumerate.
   *
   *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
   *
   *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function
   *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
   *     is specified the ng-repeat associates elements by identity in the collection. It is an error to have
   *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
   *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
   *     before specifying a tracking expression.
   *
   *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
   *     will be associated by item identity in the array.
   *
   *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
   *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
   *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
   *     element in the same way in the DOM.
   *
   *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
   *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
   *     property is same.
   *
   *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
   *     to items in conjunction with a tracking expression.
   *
   * @example
   * This example initializes the scope to a list of names and
   * then uses `ngRepeat` to display every person:
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   <div ng-init="friends = [
   {name:'John', age:25, gender:'boy'},
   {name:'Jessie', age:30, gender:'girl'},
   {name:'Johanna', age:28, gender:'girl'},
   {name:'Joy', age:15, gender:'girl'},
   {name:'Mary', age:28, gender:'girl'},
   {name:'Peter', age:95, gender:'boy'},
   {name:'Sebastian', age:50, gender:'boy'},
   {name:'Erika', age:27, gender:'girl'},
   {name:'Patrick', age:40, gender:'boy'},
   {name:'Samantha', age:60, gender:'girl'}
   ]">
   I have {{friends.length}} friends. They are:
   <input type="search" ng-model="q" placeholder="filter friends..." />
   <ul class="example-animate-container">
   <li class="animate-repeat" ng-repeat="friend in friends | filter:q">
   [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
   </li>
   </ul>
   </div>
   </file>
   <file name="animations.css">
   .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

   .animate-repeat {
        line-height:40px;
        list-style:none;
        box-sizing:border-box;
      }

   .animate-repeat.ng-move,
   .animate-repeat.ng-enter,
   .animate-repeat.ng-leave {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
      }

   .animate-repeat.ng-leave.ng-leave-active,
   .animate-repeat.ng-move,
   .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

   .animate-repeat.ng-leave,
   .animate-repeat.ng-move.ng-move-active,
   .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:40px;
      }
   </file>
   <file name="protractor.js" type="protractor">
   var friends = element.all(by.repeater('friend in friends'));

   it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

   it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
   </file>
   </example>
   */
  var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
    var NG_REMOVED = '$$NG_REMOVED';
    var ngRepeatMinErr = minErr('ngRepeat');
    return {
      transclude: 'element',
      priority: 1000,
      terminal: true,
      $$tlb: true,
      link: function($scope, $element, $attr, ctrl, $transclude){
        var expression = $attr.ngRepeat;
        var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),
          trackByExp, trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn,
          lhs, rhs, valueIdentifier, keyIdentifier,
          hashFnLocals = {$id: hashKey};

        if (!match) {
          throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);
        }

        lhs = match[1];
        rhs = match[2];
        trackByExp = match[3];

        if (trackByExp) {
          trackByExpGetter = $parse(trackByExp);
          trackByIdExpFn = function(key, value, index) {
            // assign key, value, and $index to the locals so that they can be used in hash functions
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
            hashFnLocals[valueIdentifier] = value;
            hashFnLocals.$index = index;
            return trackByExpGetter($scope, hashFnLocals);
          };
        } else {
          trackByIdArrayFn = function(key, value) {
            return hashKey(value);
          };
          trackByIdObjFn = function(key) {
            return key;
          };
        }

        match = lhs.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);
        if (!match) {
          throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);
        }
        valueIdentifier = match[3] || match[1];
        keyIdentifier = match[2];

        // Store a list of elements from previous run. This is a hash where key is the item from the
        // iterator, and the value is objects with following properties.
        //   - scope: bound scope
        //   - element: previous element.
        //   - index: position
        var lastBlockMap = {};

        //watch props
        $scope.$watchCollection(rhs, function ngRepeatAction(collection){
          var index, length,
            previousNode = $element[0],     // current position of the node
            nextNode,
          // Same as lastBlockMap but it has the current state. It will become the
          // lastBlockMap on the next iteration.
            nextBlockMap = {},
            arrayLength,
            childScope,
            key, value, // key/value of iteration
            trackById,
            trackByIdFn,
            collectionKeys,
            block,       // last object information {scope, element, id}
            nextBlockOrder = [],
            elementsToRemove;


          if (isArrayLike(collection)) {
            collectionKeys = collection;
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
          } else {
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
            // if object, extract keys, sort them and use to determine order of iteration over obj props
            collectionKeys = [];
            for (key in collection) {
              if (collection.hasOwnProperty(key) && key.charAt(0) != '$') {
                collectionKeys.push(key);
              }
            }
            collectionKeys.sort();
          }

          arrayLength = collectionKeys.length;

          // locate existing items
          length = nextBlockOrder.length = collectionKeys.length;
          for(index = 0; index < length; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            trackById = trackByIdFn(key, value, index);
            assertNotHasOwnProperty(trackById, '`track by` id');
            if(lastBlockMap.hasOwnProperty(trackById)) {
              block = lastBlockMap[trackById];
              delete lastBlockMap[trackById];
              nextBlockMap[trackById] = block;
              nextBlockOrder[index] = block;
            } else if (nextBlockMap.hasOwnProperty(trackById)) {
              // restore lastBlockMap
              forEach(nextBlockOrder, function(block) {
                if (block && block.scope) lastBlockMap[block.id] = block;
              });
              // This is a duplicate and we need to throw an error
              throw ngRepeatMinErr('dupes', "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}",
                expression,       trackById);
            } else {
              // new never before seen block
              nextBlockOrder[index] = { id: trackById };
              nextBlockMap[trackById] = false;
            }
          }

          // remove existing items
          for (key in lastBlockMap) {
            // lastBlockMap is our own object so we don't need to use special hasOwnPropertyFn
            if (lastBlockMap.hasOwnProperty(key)) {
              block = lastBlockMap[key];
              elementsToRemove = getBlockElements(block.clone);
              $animate.leave(elementsToRemove);
              forEach(elementsToRemove, function(element) { element[NG_REMOVED] = true; });
              block.scope.$destroy();
            }
          }

          // we are not using forEach for perf reasons (trying to avoid #call)
          for (index = 0, length = collectionKeys.length; index < length; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            block = nextBlockOrder[index];
            if (nextBlockOrder[index - 1]) previousNode = getBlockEnd(nextBlockOrder[index - 1]);

            if (block.scope) {
              // if we have already seen this object, then we need to reuse the
              // associated scope/element
              childScope = block.scope;

              nextNode = previousNode;
              do {
                nextNode = nextNode.nextSibling;
              } while(nextNode && nextNode[NG_REMOVED]);

              if (getBlockStart(block) != nextNode) {
                // existing item which got moved
                $animate.move(getBlockElements(block.clone), null, jqLite(previousNode));
              }
              previousNode = getBlockEnd(block);
            } else {
              // new item which we don't know about
              childScope = $scope.$new();
            }

            childScope[valueIdentifier] = value;
            if (keyIdentifier) childScope[keyIdentifier] = key;
            childScope.$index = index;
            childScope.$first = (index === 0);
            childScope.$last = (index === (arrayLength - 1));
            childScope.$middle = !(childScope.$first || childScope.$last);
            // jshint bitwise: false
            childScope.$odd = !(childScope.$even = (index&1) === 0);
            // jshint bitwise: true

            if (!block.scope) {
              $transclude(childScope, function(clone) {
                clone[clone.length++] = document.createComment(' end ngRepeat: ' + expression + ' ');
                $animate.enter(clone, null, jqLite(previousNode));
                previousNode = clone;
                block.scope = childScope;
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block.clone = clone;
                nextBlockMap[block.id] = block;
              });
            }
          }
          lastBlockMap = nextBlockMap;
        });
      }
    };

    function getBlockStart(block) {
      return block.clone[0];
    }

    function getBlockEnd(block) {
      return block.clone[block.clone.length - 1];
    }
  }];

  /**
   * @ngdoc directive
   * @name ngShow
   *
   * @description
   * The `ngShow` directive shows or hides the given HTML element based on the expression
   * provided to the ngShow attribute. The element is shown or hidden by removing or adding
   * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
   * in AngularJS and sets the display style to none (using an !important flag).
   * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
   *
   * ```html
   * <!-- when $scope.myValue is truthy (element is visible) -->
   * <div ng-show="myValue"></div>
   *
   * <!-- when $scope.myValue is falsy (element is hidden) -->
   * <div ng-show="myValue" class="ng-hide"></div>
   * ```
   *
   * When the ngShow expression evaluates to false then the ng-hide CSS class is added to the class attribute
   * on the element causing it to become hidden. When true, the ng-hide CSS class is removed
   * from the element causing the element not to appear hidden.
   *
   * <div class="alert alert-warning">
   * **Note:** Here is a list of values that ngShow will consider as a falsy value (case insensitive):<br />
   * "f" / "0" / "false" / "no" / "n" / "[]"
   * </div>
   *
   * ## Why is !important used?
   *
   * You may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector
   * can be easily overridden by heavier selectors. For example, something as simple
   * as changing the display style on a HTML list item would make hidden elements appear visible.
   * This also becomes a bigger issue when dealing with CSS frameworks.
   *
   * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
   * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
   * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
   *
   * ### Overriding .ng-hide
   *
   * By default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change
   * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
   * class in CSS:
   *
   * ```css
   * .ng-hide {
 *   //this is just another form of hiding an element
 *   display:block!important;
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
   * ```
   *
   * By default you don't need to override in CSS anything and the animations will work around the display style.
   *
   * ## A note about animations with ngShow
   *
   * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
   * is true and false. This system works like the animation system present with ngClass except that
   * you must also include the !important flag to override the display property
   * so that you can perform an animation when the element is hidden during the time of the animation.
   *
   * ```css
   * //
   * //a working example can be found at the bottom of this page
   * //
   * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 * }
   *
   * .my-element.ng-hide-add { ... }
   * .my-element.ng-hide-add.ng-hide-add-active { ... }
   * .my-element.ng-hide-remove { ... }
   * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
   * ```
   *
   * Keep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display
   * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
   *
   * @animations
   * addClass: .ng-hide - happens after the ngShow expression evaluates to a truthy value and the just before contents are set to visible
   * removeClass: .ng-hide - happens after the ngShow expression evaluates to a non truthy value and just before the contents are set to hidden
   *
   * @element ANY
   * @param {expression} ngShow If the {@link guide/expression expression} is truthy
   *     then the element is shown or hidden respectively.
   *
   * @example
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   Click me: <input type="checkbox" ng-model="checked"><br/>
   <div>
   Show:
   <div class="check-element animate-show" ng-show="checked">
   <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
   </div>
   </div>
   <div>
   Hide:
   <div class="check-element animate-show" ng-hide="checked">
   <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
   </div>
   </div>
   </file>
   <file name="glyphicons.css">
   @import url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);
   </file>
   <file name="animations.css">
   .animate-show {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

   .animate-show.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

   .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
   </file>
   <file name="protractor.js" type="protractor">
   var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
   var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

   it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
   </file>
   </example>
   */
  var ngShowDirective = ['$animate', function($animate) {
    return function(scope, element, attr) {
      scope.$watch(attr.ngShow, function ngShowWatchAction(value){
        $animate[toBoolean(value) ? 'removeClass' : 'addClass'](element, 'ng-hide');
      });
    };
  }];


  /**
   * @ngdoc directive
   * @name ngHide
   *
   * @description
   * The `ngHide` directive shows or hides the given HTML element based on the expression
   * provided to the ngHide attribute. The element is shown or hidden by removing or adding
   * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
   * in AngularJS and sets the display style to none (using an !important flag).
   * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
   *
   * ```html
   * <!-- when $scope.myValue is truthy (element is hidden) -->
   * <div ng-hide="myValue" class="ng-hide"></div>
   *
   * <!-- when $scope.myValue is falsy (element is visible) -->
   * <div ng-hide="myValue"></div>
   * ```
   *
   * When the ngHide expression evaluates to true then the .ng-hide CSS class is added to the class attribute
   * on the element causing it to become hidden. When false, the ng-hide CSS class is removed
   * from the element causing the element not to appear hidden.
   *
   * <div class="alert alert-warning">
   * **Note:** Here is a list of values that ngHide will consider as a falsy value (case insensitive):<br />
   * "f" / "0" / "false" / "no" / "n" / "[]"
   * </div>
   *
   * ## Why is !important used?
   *
   * You may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector
   * can be easily overridden by heavier selectors. For example, something as simple
   * as changing the display style on a HTML list item would make hidden elements appear visible.
   * This also becomes a bigger issue when dealing with CSS frameworks.
   *
   * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
   * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
   * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
   *
   * ### Overriding .ng-hide
   *
   * By default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change
   * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
   * class in CSS:
   *
   * ```css
   * .ng-hide {
 *   //this is just another form of hiding an element
 *   display:block!important;
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
   * ```
   *
   * By default you don't need to override in CSS anything and the animations will work around the display style.
   *
   * ## A note about animations with ngHide
   *
   * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
   * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
   * CSS class is added and removed for you instead of your own CSS class.
   *
   * ```css
   * //
   * //a working example can be found at the bottom of this page
   * //
   * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 * }
   *
   * .my-element.ng-hide-add { ... }
   * .my-element.ng-hide-add.ng-hide-add-active { ... }
   * .my-element.ng-hide-remove { ... }
   * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
   * ```
   *
   * Keep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display
   * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
   *
   * @animations
   * removeClass: .ng-hide - happens after the ngHide expression evaluates to a truthy value and just before the contents are set to hidden
   * addClass: .ng-hide - happens after the ngHide expression evaluates to a non truthy value and just before the contents are set to visible
   *
   * @element ANY
   * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
   *     the element is shown or hidden respectively.
   *
   * @example
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   Click me: <input type="checkbox" ng-model="checked"><br/>
   <div>
   Show:
   <div class="check-element animate-hide" ng-show="checked">
   <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
   </div>
   </div>
   <div>
   Hide:
   <div class="check-element animate-hide" ng-hide="checked">
   <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
   </div>
   </div>
   </file>
   <file name="glyphicons.css">
   @import url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);
   </file>
   <file name="animations.css">
   .animate-hide {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

   .animate-hide.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

   .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
   </file>
   <file name="protractor.js" type="protractor">
   var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
   var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

   it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
   </file>
   </example>
   */
  var ngHideDirective = ['$animate', function($animate) {
    return function(scope, element, attr) {
      scope.$watch(attr.ngHide, function ngHideWatchAction(value){
        $animate[toBoolean(value) ? 'addClass' : 'removeClass'](element, 'ng-hide');
      });
    };
  }];

  /**
   * @ngdoc directive
   * @name ngStyle
   * @restrict AC
   *
   * @description
   * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
   *
   * @element ANY
   * @param {expression} ngStyle
   *
   * {@link guide/expression Expression} which evals to an
   * object whose keys are CSS style names and values are corresponding values for those CSS
   * keys.
   *
   * Since some CSS style names are not valid keys for an object, they must be quoted.
   * See the 'background-color' style in the example below.
   *
   * @example
   <example>
   <file name="index.html">
   <input type="button" value="set color" ng-click="myStyle={color:'red'}">
   <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
   <input type="button" value="clear" ng-click="myStyle={}">
   <br/>
   <span ng-style="myStyle">Sample Text</span>
   <pre>myStyle={{myStyle}}</pre>
   </file>
   <file name="style.css">
   span {
         color: black;
       }
   </file>
   <file name="protractor.js" type="protractor">
   var colorSpan = element(by.css('span'));

   iit('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
   </file>
   </example>
   */
  var ngStyleDirective = ngDirective(function(scope, element, attr) {
    scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
      if (oldStyles && (newStyles !== oldStyles)) {
        forEach(oldStyles, function(val, style) { element.css(style, '');});
      }
      if (newStyles) element.css(newStyles);
    }, true);
  });

  /**
   * @ngdoc directive
   * @name ngSwitch
   * @restrict EA
   *
   * @description
   * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
   * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
   * as specified in the template.
   *
   * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
   * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
   * matches the value obtained from the evaluated expression. In other words, you define a container element
   * (where you place the directive), place an expression on the **`on="..."` attribute**
   * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
   * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
   * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
   * attribute is displayed.
   *
   * <div class="alert alert-info">
   * Be aware that the attribute values to match against cannot be expressions. They are interpreted
   * as literal string values to match against.
   * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
   * value of the expression `$scope.someVal`.
   * </div>

   * @animations
   * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
   * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
   *
   * @usage
   *
   * ```
   * <ANY ng-switch="expression">
   *   <ANY ng-switch-when="matchValue1">...</ANY>
   *   <ANY ng-switch-when="matchValue2">...</ANY>
   *   <ANY ng-switch-default>...</ANY>
   * </ANY>
   * ```
   *
   *
   * @scope
   * @priority 800
   * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.
   * On child elements add:
   *
   * * `ngSwitchWhen`: the case statement to match against. If match then this
   *   case will be displayed. If the same match appears multiple times, all the
   *   elements will be displayed.
   * * `ngSwitchDefault`: the default case when no other case match. If there
   *   are multiple default cases, all of them will be displayed when no other
   *   case match.
   *
   *
   * @example
   <example module="ngAnimate" deps="angular-animate.js" animations="true">
   <file name="index.html">
   <div ng-controller="Ctrl">
   <select ng-model="selection" ng-options="item for item in items">
   </select>
   <tt>selection={{selection}}</tt>
   <hr/>
   <div class="animate-switch-container"
   ng-switch on="selection">
   <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
   <div class="animate-switch" ng-switch-when="home">Home Span</div>
   <div class="animate-switch" ng-switch-default>default</div>
   </div>
   </div>
   </file>
   <file name="script.js">
   function Ctrl($scope) {
        $scope.items = ['settings', 'home', 'other'];
        $scope.selection = $scope.items[0];
      }
   </file>
   <file name="animations.css">
   .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

   .animate-switch {
        padding:10px;
      }

   .animate-switch.ng-animate {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

   .animate-switch.ng-leave.ng-leave-active,
   .animate-switch.ng-enter {
        top:-50px;
      }
   .animate-switch.ng-leave,
   .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
   </file>
   <file name="protractor.js" type="protractor">
   var switchElem = element(by.css('[ng-switch]'));
   var select = element(by.model('selection'));

   it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
   it('should change to home', function() {
        select.element.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
   it('should select default', function() {
        select.element.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
   </file>
   </example>
   */
  var ngSwitchDirective = ['$animate', function($animate) {
    return {
      restrict: 'EA',
      require: 'ngSwitch',

      // asks for $scope to fool the BC controller module
      controller: ['$scope', function ngSwitchController() {
        this.cases = {};
      }],
      link: function(scope, element, attr, ngSwitchController) {
        var watchExpr = attr.ngSwitch || attr.on,
          selectedTranscludes = [],
          selectedElements = [],
          previousElements = [],
          selectedScopes = [];

        scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
          var i, ii;
          for (i = 0, ii = previousElements.length; i < ii; ++i) {
            previousElements[i].remove();
          }
          previousElements.length = 0;

          for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
            var selected = selectedElements[i];
            selectedScopes[i].$destroy();
            previousElements[i] = selected;
            $animate.leave(selected, function() {
              previousElements.splice(i, 1);
            });
          }

          selectedElements.length = 0;
          selectedScopes.length = 0;

          if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
            scope.$eval(attr.change);
            forEach(selectedTranscludes, function(selectedTransclude) {
              var selectedScope = scope.$new();
              selectedScopes.push(selectedScope);
              selectedTransclude.transclude(selectedScope, function(caseElement) {
                var anchor = selectedTransclude.element;

                selectedElements.push(caseElement);
                $animate.enter(caseElement, anchor.parent(), anchor);
              });
            });
          }
        });
      }
    };
  }];

  var ngSwitchWhenDirective = ngDirective({
    transclude: 'element',
    priority: 800,
    require: '^ngSwitch',
    link: function(scope, element, attrs, ctrl, $transclude) {
      ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
      ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
    }
  });

  var ngSwitchDefaultDirective = ngDirective({
    transclude: 'element',
    priority: 800,
    require: '^ngSwitch',
    link: function(scope, element, attr, ctrl, $transclude) {
      ctrl.cases['?'] = (ctrl.cases['?'] || []);
      ctrl.cases['?'].push({ transclude: $transclude, element: element });
    }
  });

  /**
   * @ngdoc directive
   * @name ngTransclude
   * @restrict AC
   *
   * @description
   * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
   *
   * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
   *
   * @element ANY
   *
   * @example
   <example module="transclude">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }

   angular.module('transclude', [])
   .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
   template: '<div style="border: 1px solid black;">' +
   '<div style="background-color: gray">{{title}}</div>' +
   '<div ng-transclude></div>' +
   '</div>'
   };
   });
   </script>
   <div ng-controller="Ctrl">
   <input ng-model="title"><br>
   <textarea ng-model="text"></textarea> <br/>
   <pane title="{{title}}">{{text}}</pane>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should have transcluded', function() {
          var titleElement = element(by.model('title'));
          titleElement.clear();
          titleElement.sendKeys('TITLE');
          var textElement = element(by.model('text'));
          textElement.clear();
          textElement.sendKeys('TEXT');
          expect(element(by.binding('title')).getText()).toEqual('TITLE');
          expect(element(by.binding('text')).getText()).toEqual('TEXT');
        });
   </file>
   </example>
   *
   */
  var ngTranscludeDirective = ngDirective({
    link: function($scope, $element, $attrs, controller, $transclude) {
      if (!$transclude) {
        throw minErr('ngTransclude')('orphan',
            'Illegal use of ngTransclude directive in the template! ' +
            'No parent directive that requires a transclusion found. ' +
            'Element: {0}',
          startingTag($element));
      }

      $transclude(function(clone) {
        $element.empty();
        $element.append(clone);
      });
    }
  });

  /**
   * @ngdoc directive
   * @name script
   * @restrict E
   *
   * @description
   * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
   * template can be used by {@link ng.directive:ngInclude `ngInclude`},
   * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
   * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
   * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
   *
   * @param {string} type Must be set to `'text/ng-template'`.
   * @param {string} id Cache name of the template.
   *
   * @example
   <example>
   <file name="index.html">
   <script type="text/ng-template" id="/tpl.html">
   Content of the template.
   </script>

   <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
   <div id="tpl-content" ng-include src="currentTpl"></div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
   </file>
   </example>
   */
  var scriptDirective = ['$templateCache', function($templateCache) {
    return {
      restrict: 'E',
      terminal: true,
      compile: function(element, attr) {
        if (attr.type == 'text/ng-template') {
          var templateUrl = attr.id,
          // IE is not consistent, in scripts we have to read .text but in other nodes we have to read .textContent
            text = element[0].text;

          $templateCache.put(templateUrl, text);
        }
      }
    };
  }];

  var ngOptionsMinErr = minErr('ngOptions');
  /**
   * @ngdoc directive
   * @name select
   * @restrict E
   *
   * @description
   * HTML `SELECT` element with angular data-binding.
   *
   * # `ngOptions`
   *
   * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
   * elements for the `<select>` element using the array or object obtained by evaluating the
   * `ngOptions` comprehension_expression.
   *
   * When an item in the `<select>` menu is selected, the array element or object property
   * represented by the selected option will be bound to the model identified by the `ngModel`
   * directive.
   *
   * <div class="alert alert-warning">
   * **Note:** `ngModel` compares by reference, not value. This is important when binding to an
   * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).
   * </div>
   *
   * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
   * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
   * option. See example below for demonstration.
   *
   * <div class="alert alert-warning">
   * **Note:** `ngOptions` provides an iterator facility for the `<option>` element which should be used instead
   * of {@link ng.directive:ngRepeat ngRepeat} when you want the
   * `select` model to be bound to a non-string value. This is because an option element can only
   * be bound to string values at present.
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required The control is considered valid only if value is entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {comprehension_expression=} ngOptions in one of the following forms:
   *
   *   * for array data sources:
   *     * `label` **`for`** `value` **`in`** `array`
   *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
   *     * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`
   *     * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
   *   * for object data sources:
   *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
   *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
   *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
   *     * `select` **`as`** `label` **`group by`** `group`
   *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
   *
   * Where:
   *
   *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
   *   * `value`: local variable which will refer to each item in the `array` or each property value
   *      of `object` during iteration.
   *   * `key`: local variable which will refer to a property name in `object` during iteration.
   *   * `label`: The result of this expression will be the label for `<option>` element. The
   *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
   *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
   *      element. If not specified, `select` expression will default to `value`.
   *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
   *      DOM element.
   *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
   *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
   *     `value` variable (e.g. `value.propertyName`).
   *
   * @example
   <example>
   <file name="index.html">
   <script>
   function MyCntrl($scope) {
          $scope.colors = [
            {name:'black', shade:'dark'},
            {name:'white', shade:'light'},
            {name:'red', shade:'dark'},
            {name:'blue', shade:'dark'},
            {name:'yellow', shade:'light'}
          ];
          $scope.myColor = $scope.colors[2]; // red
        }
   </script>
   <div ng-controller="MyCntrl">
   <ul>
   <li ng-repeat="color in colors">
   Name: <input ng-model="color.name">
   [<a href ng-click="colors.splice($index, 1)">X</a>]
   </li>
   <li>
   [<a href ng-click="colors.push({})">add</a>]
   </li>
   </ul>
   <hr/>
   Color (null not allowed):
   <select ng-model="myColor" ng-options="color.name for color in colors"></select><br>

   Color (null allowed):
   <span  class="nullable">
   <select ng-model="myColor" ng-options="color.name for color in colors">
   <option value="">-- choose color --</option>
   </select>
   </span><br/>

   Color grouped by shade:
   <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
   </select><br/>


   Select <a href ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</a>.<br>
   <hr/>
   Currently selected: {{ {selected_color:myColor}  }}
   <div style="border:solid 1px black; height:20px"
   ng-style="{'background-color':myColor.name}">
   </div>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.select('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
   </file>
   </example>
   */

  var ngOptionsDirective = valueFn({ terminal: true });
// jshint maxlen: false
  var selectDirective = ['$compile', '$parse', function($compile,   $parse) {
    //000011111111110000000000022222222220000000000000000000003333333333000000000000004444444444444440000000005555555555555550000000666666666666666000000000000000777777777700000000000000000008888888888
    var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
      nullModelCtrl = {$setViewValue: noop};
// jshint maxlen: 100

    return {
      restrict: 'E',
      require: ['select', '?ngModel'],
      controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {
        var self = this,
          optionsMap = {},
          ngModelCtrl = nullModelCtrl,
          nullOption,
          unknownOption;


        self.databound = $attrs.ngModel;


        self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {
          ngModelCtrl = ngModelCtrl_;
          nullOption = nullOption_;
          unknownOption = unknownOption_;
        };


        self.addOption = function(value) {
          assertNotHasOwnProperty(value, '"option value"');
          optionsMap[value] = true;

          if (ngModelCtrl.$viewValue == value) {
            $element.val(value);
            if (unknownOption.parent()) unknownOption.remove();
          }
        };


        self.removeOption = function(value) {
          if (this.hasOption(value)) {
            delete optionsMap[value];
            if (ngModelCtrl.$viewValue == value) {
              this.renderUnknownOption(value);
            }
          }
        };


        self.renderUnknownOption = function(val) {
          var unknownVal = '? ' + hashKey(val) + ' ?';
          unknownOption.val(unknownVal);
          $element.prepend(unknownOption);
          $element.val(unknownVal);
          unknownOption.prop('selected', true); // needed for IE
        };


        self.hasOption = function(value) {
          return optionsMap.hasOwnProperty(value);
        };

        $scope.$on('$destroy', function() {
          // disable unknown option so that we don't do work when the whole select is being destroyed
          self.renderUnknownOption = noop;
        });
      }],

      link: function(scope, element, attr, ctrls) {
        // if ngModel is not defined, we don't need to do anything
        if (!ctrls[1]) return;

        var selectCtrl = ctrls[0],
          ngModelCtrl = ctrls[1],
          multiple = attr.multiple,
          optionsExp = attr.ngOptions,
          nullOption = false, // if false, user will not be able to select it (used by ngOptions)
          emptyOption,
        // we can't just jqLite('<option>') since jqLite is not smart enough
        // to create it in <select> and IE barfs otherwise.
          optionTemplate = jqLite(document.createElement('option')),
          optGroupTemplate =jqLite(document.createElement('optgroup')),
          unknownOption = optionTemplate.clone();

        // find "null" option
        for(var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
          if (children[i].value === '') {
            emptyOption = nullOption = children.eq(i);
            break;
          }
        }

        selectCtrl.init(ngModelCtrl, nullOption, unknownOption);

        // required validator
        if (multiple) {
          ngModelCtrl.$isEmpty = function(value) {
            return !value || value.length === 0;
          };
        }

        if (optionsExp) setupAsOptions(scope, element, ngModelCtrl);
        else if (multiple) setupAsMultiple(scope, element, ngModelCtrl);
        else setupAsSingle(scope, element, ngModelCtrl, selectCtrl);


        ////////////////////////////



        function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
          ngModelCtrl.$render = function() {
            var viewValue = ngModelCtrl.$viewValue;

            if (selectCtrl.hasOption(viewValue)) {
              if (unknownOption.parent()) unknownOption.remove();
              selectElement.val(viewValue);
              if (viewValue === '') emptyOption.prop('selected', true); // to make IE9 happy
            } else {
              if (isUndefined(viewValue) && emptyOption) {
                selectElement.val('');
              } else {
                selectCtrl.renderUnknownOption(viewValue);
              }
            }
          };

          selectElement.on('change', function() {
            scope.$apply(function() {
              if (unknownOption.parent()) unknownOption.remove();
              ngModelCtrl.$setViewValue(selectElement.val());
            });
          });
        }

        function setupAsMultiple(scope, selectElement, ctrl) {
          var lastView;
          ctrl.$render = function() {
            var items = new HashMap(ctrl.$viewValue);
            forEach(selectElement.find('option'), function(option) {
              option.selected = isDefined(items.get(option.value));
            });
          };

          // we have to do it on each watch since ngModel watches reference, but
          // we need to work of an array, so we need to see if anything was inserted/removed
          scope.$watch(function selectMultipleWatch() {
            if (!equals(lastView, ctrl.$viewValue)) {
              lastView = shallowCopy(ctrl.$viewValue);
              ctrl.$render();
            }
          });

          selectElement.on('change', function() {
            scope.$apply(function() {
              var array = [];
              forEach(selectElement.find('option'), function(option) {
                if (option.selected) {
                  array.push(option.value);
                }
              });
              ctrl.$setViewValue(array);
            });
          });
        }

        function setupAsOptions(scope, selectElement, ctrl) {
          var match;

          if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
            throw ngOptionsMinErr('iexp',
                "Expected expression in form of " +
                "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
                " but got '{0}'. Element: {1}",
              optionsExp, startingTag(selectElement));
          }

          var displayFn = $parse(match[2] || match[1]),
            valueName = match[4] || match[6],
            keyName = match[5],
            groupByFn = $parse(match[3] || ''),
            valueFn = $parse(match[2] ? match[1] : valueName),
            valuesFn = $parse(match[7]),
            track = match[8],
            trackFn = track ? $parse(match[8]) : null,
          // This is an array of array of existing option groups in DOM.
          // We try to reuse these if possible
          // - optionGroupsCache[0] is the options with no option group
          // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element
            optionGroupsCache = [[{element: selectElement, label:''}]];

          if (nullOption) {
            // compile the element since there might be bindings in it
            $compile(nullOption)(scope);

            // remove the class, which is added automatically because we recompile the element and it
            // becomes the compilation root
            nullOption.removeClass('ng-scope');

            // we need to remove it before calling selectElement.empty() because otherwise IE will
            // remove the label from the element. wtf?
            nullOption.remove();
          }

          // clear contents, we'll add what's needed based on the model
          selectElement.empty();

          selectElement.on('change', function() {
            scope.$apply(function() {
              var optionGroup,
                collection = valuesFn(scope) || [],
                locals = {},
                key, value, optionElement, index, groupIndex, length, groupLength, trackIndex;

              if (multiple) {
                value = [];
                for (groupIndex = 0, groupLength = optionGroupsCache.length;
                     groupIndex < groupLength;
                     groupIndex++) {
                  // list of options for that group. (first item has the parent)
                  optionGroup = optionGroupsCache[groupIndex];

                  for(index = 1, length = optionGroup.length; index < length; index++) {
                    if ((optionElement = optionGroup[index].element)[0].selected) {
                      key = optionElement.val();
                      if (keyName) locals[keyName] = key;
                      if (trackFn) {
                        for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                          locals[valueName] = collection[trackIndex];
                          if (trackFn(scope, locals) == key) break;
                        }
                      } else {
                        locals[valueName] = collection[key];
                      }
                      value.push(valueFn(scope, locals));
                    }
                  }
                }
              } else {
                key = selectElement.val();
                if (key == '?') {
                  value = undefined;
                } else if (key === ''){
                  value = null;
                } else {
                  if (trackFn) {
                    for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                      locals[valueName] = collection[trackIndex];
                      if (trackFn(scope, locals) == key) {
                        value = valueFn(scope, locals);
                        break;
                      }
                    }
                  } else {
                    locals[valueName] = collection[key];
                    if (keyName) locals[keyName] = key;
                    value = valueFn(scope, locals);
                  }
                }
                // Update the null option's selected property here so $render cleans it up correctly
                if (optionGroupsCache[0].length > 1) {
                  if (optionGroupsCache[0][1].id !== key) {
                    optionGroupsCache[0][1].selected = false;
                  }
                }
              }
              ctrl.$setViewValue(value);
            });
          });

          ctrl.$render = render;

          // TODO(vojta): can't we optimize this ?
          scope.$watch(render);

          function render() {
            // Temporary location for the option groups before we render them
            var optionGroups = {'':[]},
              optionGroupNames = [''],
              optionGroupName,
              optionGroup,
              option,
              existingParent, existingOptions, existingOption,
              modelValue = ctrl.$modelValue,
              values = valuesFn(scope) || [],
              keys = keyName ? sortedKeys(values) : values,
              key,
              groupLength, length,
              groupIndex, index,
              locals = {},
              selected,
              selectedSet = false, // nothing is selected yet
              lastElement,
              element,
              label;

            if (multiple) {
              if (trackFn && isArray(modelValue)) {
                selectedSet = new HashMap([]);
                for (var trackIndex = 0; trackIndex < modelValue.length; trackIndex++) {
                  locals[valueName] = modelValue[trackIndex];
                  selectedSet.put(trackFn(scope, locals), modelValue[trackIndex]);
                }
              } else {
                selectedSet = new HashMap(modelValue);
              }
            }

            // We now build up the list of options we need (we merge later)
            for (index = 0; length = keys.length, index < length; index++) {

              key = index;
              if (keyName) {
                key = keys[index];
                if ( key.charAt(0) === '$' ) continue;
                locals[keyName] = key;
              }

              locals[valueName] = values[key];

              optionGroupName = groupByFn(scope, locals) || '';
              if (!(optionGroup = optionGroups[optionGroupName])) {
                optionGroup = optionGroups[optionGroupName] = [];
                optionGroupNames.push(optionGroupName);
              }
              if (multiple) {
                selected = isDefined(
                  selectedSet.remove(trackFn ? trackFn(scope, locals) : valueFn(scope, locals))
                );
              } else {
                if (trackFn) {
                  var modelCast = {};
                  modelCast[valueName] = modelValue;
                  selected = trackFn(scope, modelCast) === trackFn(scope, locals);
                } else {
                  selected = modelValue === valueFn(scope, locals);
                }
                selectedSet = selectedSet || selected; // see if at least one item is selected
              }
              label = displayFn(scope, locals); // what will be seen by the user

              // doing displayFn(scope, locals) || '' overwrites zero values
              label = isDefined(label) ? label : '';
              optionGroup.push({
                // either the index into array or key from object
                id: trackFn ? trackFn(scope, locals) : (keyName ? keys[index] : index),
                label: label,
                selected: selected                   // determine if we should be selected
              });
            }
            if (!multiple) {
              if (nullOption || modelValue === null) {
                // insert null option if we have a placeholder, or the model is null
                optionGroups[''].unshift({id:'', label:'', selected:!selectedSet});
              } else if (!selectedSet) {
                // option could not be found, we have to insert the undefined item
                optionGroups[''].unshift({id:'?', label:'', selected:true});
              }
            }

            // Now we need to update the list of DOM nodes to match the optionGroups we computed above
            for (groupIndex = 0, groupLength = optionGroupNames.length;
                 groupIndex < groupLength;
                 groupIndex++) {
              // current option group name or '' if no group
              optionGroupName = optionGroupNames[groupIndex];

              // list of options for that group. (first item has the parent)
              optionGroup = optionGroups[optionGroupName];

              if (optionGroupsCache.length <= groupIndex) {
                // we need to grow the optionGroups
                existingParent = {
                  element: optGroupTemplate.clone().attr('label', optionGroupName),
                  label: optionGroup.label
                };
                existingOptions = [existingParent];
                optionGroupsCache.push(existingOptions);
                selectElement.append(existingParent.element);
              } else {
                existingOptions = optionGroupsCache[groupIndex];
                existingParent = existingOptions[0];  // either SELECT (no group) or OPTGROUP element

                // update the OPTGROUP label if not the same.
                if (existingParent.label != optionGroupName) {
                  existingParent.element.attr('label', existingParent.label = optionGroupName);
                }
              }

              lastElement = null;  // start at the beginning
              for(index = 0, length = optionGroup.length; index < length; index++) {
                option = optionGroup[index];
                if ((existingOption = existingOptions[index+1])) {
                  // reuse elements
                  lastElement = existingOption.element;
                  if (existingOption.label !== option.label) {
                    lastElement.text(existingOption.label = option.label);
                  }
                  if (existingOption.id !== option.id) {
                    lastElement.val(existingOption.id = option.id);
                  }
                  // lastElement.prop('selected') provided by jQuery has side-effects
                  if (existingOption.selected !== option.selected) {
                    lastElement.prop('selected', (existingOption.selected = option.selected));
                  }
                } else {
                  // grow elements

                  // if it's a null option
                  if (option.id === '' && nullOption) {
                    // put back the pre-compiled element
                    element = nullOption;
                  } else {
                    // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but
                    // in this version of jQuery on some browser the .text() returns a string
                    // rather then the element.
                    (element = optionTemplate.clone())
                      .val(option.id)
                      .attr('selected', option.selected)
                      .text(option.label);
                  }

                  existingOptions.push(existingOption = {
                    element: element,
                    label: option.label,
                    id: option.id,
                    selected: option.selected
                  });
                  if (lastElement) {
                    lastElement.after(element);
                  } else {
                    existingParent.element.append(element);
                  }
                  lastElement = element;
                }
              }
              // remove any excessive OPTIONs in a group
              index++; // increment since the existingOptions[0] is parent element not OPTION
              while(existingOptions.length > index) {
                existingOptions.pop().element.remove();
              }
            }
            // remove any excessive OPTGROUPs from select
            while(optionGroupsCache.length > groupIndex) {
              optionGroupsCache.pop()[0].element.remove();
            }
          }
        }
      }
    };
  }];

  var optionDirective = ['$interpolate', function($interpolate) {
    var nullSelectCtrl = {
      addOption: noop,
      removeOption: noop
    };

    return {
      restrict: 'E',
      priority: 100,
      compile: function(element, attr) {
        if (isUndefined(attr.value)) {
          var interpolateFn = $interpolate(element.text(), true);
          if (!interpolateFn) {
            attr.$set('value', element.text());
          }
        }

        return function (scope, element, attr) {
          var selectCtrlName = '$selectController',
            parent = element.parent(),
            selectCtrl = parent.data(selectCtrlName) ||
              parent.parent().data(selectCtrlName); // in case we are in optgroup

          if (selectCtrl && selectCtrl.databound) {
            // For some reason Opera defaults to true and if not overridden this messes up the repeater.
            // We don't want the view to drive the initialization of the model anyway.
            element.prop('selected', false);
          } else {
            selectCtrl = nullSelectCtrl;
          }

          if (interpolateFn) {
            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
              attr.$set('value', newVal);
              if (newVal !== oldVal) selectCtrl.removeOption(oldVal);
              selectCtrl.addOption(newVal);
            });
          } else {
            selectCtrl.addOption(attr.value);
          }

          element.on('$destroy', function() {
            selectCtrl.removeOption(attr.value);
          });
        };
      }
    };
  }];

  var styleDirective = valueFn({
    restrict: 'E',
    terminal: true
  });

  if (window.angular.bootstrap) {
    //AngularJS is already loaded, so we can return here...
    console.log('WARNING: Tried to load angular more than once.');
    return;
  }

  //try to bind to jquery now so that one can write angular.element().read()
  //but we will rebind on bootstrap again.
  bindJQuery();

  publishExternalAPI(angular);

  jqLite(document).ready(function() {
    angularInit(document, bootstrap);
  });

})(window, document);

!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}.ng-hide-add-active,.ng-hide-remove{display:block!important;}</style>');
/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/**
 * @license AngularJS v1.2.17
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

  /* jshint maxlen: false */

  /**
   * @ngdoc module
   * @name ngAnimate
   * @description
   *
   * # ngAnimate
   *
   * The `ngAnimate` module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.
   *
   *
   * <div doc-module-components="ngAnimate"></div>
   *
   * # Usage
   *
   * To see animations in action, all that is required is to define the appropriate CSS classes
   * or to register a JavaScript animation via the myModule.animation() function. The directives that support animation automatically are:
   * `ngRepeat`, `ngInclude`, `ngIf`, `ngSwitch`, `ngShow`, `ngHide`, `ngView` and `ngClass`. Custom directives can take advantage of animation
   * by using the `$animate` service.
   *
   * Below is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:
   *
   * | Directive                                                 | Supported Animations                               |
   * |---------------------------------------------------------- |----------------------------------------------------|
   * | {@link ng.directive:ngRepeat#usage_animations ngRepeat}         | enter, leave and move                              |
   * | {@link ngRoute.directive:ngView#usage_animations ngView}        | enter and leave                                    |
   * | {@link ng.directive:ngInclude#usage_animations ngInclude}       | enter and leave                                    |
   * | {@link ng.directive:ngSwitch#usage_animations ngSwitch}         | enter and leave                                    |
   * | {@link ng.directive:ngIf#usage_animations ngIf}                 | enter and leave                                    |
   * | {@link ng.directive:ngClass#usage_animations ngClass}           | add and remove                                     |
   * | {@link ng.directive:ngShow#usage_animations ngShow & ngHide}    | add and remove (the ng-hide class value)           |
   * | {@link ng.directive:form#usage_animations form}                 | add and remove (dirty, pristine, valid, invalid & all other validations)                |
   * | {@link ng.directive:ngModel#usage_animations ngModel}           | add and remove (dirty, pristine, valid, invalid & all other validations)                |
   *
   * You can find out more information about animations upon visiting each directive page.
   *
   * Below is an example of how to apply animations to a directive that supports animation hooks:
   *
   * ```html
   * <style type="text/css">
   * .slide.ng-enter, .slide.ng-leave {
 *   -webkit-transition:0.5s linear all;
 *   transition:0.5s linear all;
 * }
   *
   * .slide.ng-enter { }        /&#42; starting animations for enter &#42;/
   * .slide.ng-enter-active { } /&#42; terminal animations for enter &#42;/
   * .slide.ng-leave { }        /&#42; starting animations for leave &#42;/
   * .slide.ng-leave-active { } /&#42; terminal animations for leave &#42;/
   * </style>
   *
   * <!--
   * the animate service will automatically add .ng-enter and .ng-leave to the element
   * to trigger the CSS transition/animations
   * -->
   * <ANY class="slide" ng-include="..."></ANY>
   * ```
   *
   * Keep in mind that if an animation is running, any child elements cannot be animated until the parent element's
   * animation has completed.
   *
   * <h2>CSS-defined Animations</h2>
   * The animate service will automatically apply two CSS classes to the animated element and these two CSS classes
   * are designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported
   * and can be used to play along with this naming structure.
   *
   * The following code below demonstrates how to perform animations using **CSS transitions** with Angular:
   *
   * ```html
   * <style type="text/css">
   * /&#42;
   *  The animate class is apart of the element and the ng-enter class
   *  is attached to the element once the enter animation event is triggered
   * &#42;/
   * .reveal-animation.ng-enter {
 *  -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/
 *  transition: 1s linear all; /&#42; All other modern browsers and IE10+ &#42;/
 *
 *  /&#42; The animation preparation code &#42;/
 *  opacity: 0;
 * }
   *
   * /&#42;
   *  Keep in mind that you want to combine both CSS
   *  classes together to avoid any CSS-specificity
   *  conflicts
   * &#42;/
   * .reveal-animation.ng-enter.ng-enter-active {
 *  /&#42; The animation code itself &#42;/
 *  opacity: 1;
 * }
   * </style>
   *
   * <div class="view-container">
   *   <div ng-view class="reveal-animation"></div>
   * </div>
   * ```
   *
   * The following code below demonstrates how to perform animations using **CSS animations** with Angular:
   *
   * ```html
   * <style type="text/css">
   * .reveal-animation.ng-enter {
 *   -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/
 *   animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/
 * }
   * @-webkit-keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
   * @keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
   * </style>
   *
   * <div class="view-container">
   *   <div ng-view class="reveal-animation"></div>
   * </div>
   * ```
   *
   * Both CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.
   *
   * Upon DOM mutation, the event class is added first (something like `ng-enter`), then the browser prepares itself to add
   * the active class (in this case `ng-enter-active`) which then triggers the animation. The animation module will automatically
   * detect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be
   * removed from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end
   * immediately resulting in a DOM element that is at its final state. This final state is when the DOM element
   * has no CSS transition/animation classes applied to it.
   *
   * <h3>CSS Staggering Animations</h3>
   * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
   * curtain-like effect. The ngAnimate module, as of 1.2.0, supports staggering animations and the stagger effect can be
   * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
   * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
   * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
   *
   * ```css
   * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   -webkit-transition: 1s linear all;
 *   transition: 1s linear all;
 *   opacity:0;
 * }
   * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   -webkit-transition-delay: 0.1s;
 *   transition-delay: 0.1s;
 *
 *   /&#42; in case the stagger doesn't work then these two values
 *    must be set to 0 to avoid an accidental CSS inheritance &#42;/
 *   -webkit-transition-duration: 0s;
 *   transition-duration: 0s;
 * }
   * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
   * ```
   *
   * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
   * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
   * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
   * will also be reset if more than 10ms has passed after the last animation has been fired.
   *
   * The following code will issue the **ng-leave-stagger** event on the element provided:
   *
   * ```js
   * var kids = parent.children();
   *
   * $animate.leave(kids[0]); //stagger index=0
   * $animate.leave(kids[1]); //stagger index=1
   * $animate.leave(kids[2]); //stagger index=2
   * $animate.leave(kids[3]); //stagger index=3
   * $animate.leave(kids[4]); //stagger index=4
   *
   * $timeout(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 * }, 100, false);
   * ```
   *
   * Stagger animations are currently only supported within CSS-defined animations.
   *
   * <h2>JavaScript-defined Animations</h2>
   * In the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not
   * yet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.
   *
   * ```js
   * //!annotate="YourApp" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.
   * var ngModule = angular.module('YourApp', ['ngAnimate']);
   * ngModule.animation('.my-crazy-animation', function() {
 *   return {
 *     enter: function(element, done) {
 *       //run the animation here and call done when the animation is complete
 *       return function(cancelled) {
 *         //this (optional) function will be called when the animation
 *         //completes or when the animation is cancelled (the cancelled
 *         //flag will be set to true if cancelled).
 *       };
 *     },
 *     leave: function(element, done) { },
 *     move: function(element, done) { },
 *
 *     //animation that can be triggered before the class is added
 *     beforeAddClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is added
 *     addClass: function(element, className, done) { },
 *
 *     //animation that can be triggered before the class is removed
 *     beforeRemoveClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is removed
 *     removeClass: function(element, className, done) { }
 *   };
 * });
   * ```
   *
   * JavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run
   * a javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits
   * the element's CSS class attribute value and then run the matching animation event function (if found).
   * In other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function will
   * be executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).
   *
   * Within a JavaScript animation, an object containing various event callback animation functions is expected to be returned.
   * As explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run,
   * and the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation
   * or transition code that is defined via a stylesheet).
   *
   */

  angular.module('ngAnimate', ['ng'])

  /**
   * @ngdoc provider
   * @name $animateProvider
   * @description
   *
   * The `$animateProvider` allows developers to register JavaScript animation event handlers directly inside of a module.
   * When an animation is triggered, the $animate service will query the $animate service to find any animations that match
   * the provided name value.
   *
   * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
   *
   * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
   *
   */

    //this private service is only used within CSS-enabled animations
    //IE8 + IE9 do not support rAF natively, but that is fine since they
    //also don't support transitions and keyframes which means that the code
    //below will never be used by the two browsers.
    .factory('$$animateReflow', ['$$rAF', '$document', function($$rAF, $document) {
      var bod = $document[0].body;
      return function(fn) {
        //the returned function acts as the cancellation function
        return $$rAF(function() {
          //the line below will force the browser to perform a repaint
          //so that all the animated elements within the animation frame
          //will be properly updated and drawn on screen. This is
          //required to perform multi-class CSS based animations with
          //Firefox. DO NOT REMOVE THIS LINE.
          var a = bod.offsetWidth + 1;
          fn();
        });
      };
    }])

    .config(['$provide', '$animateProvider', function($provide, $animateProvider) {
      var noop = angular.noop;
      var forEach = angular.forEach;
      var selectors = $animateProvider.$$selectors;

      var ELEMENT_NODE = 1;
      var NG_ANIMATE_STATE = '$$ngAnimateState';
      var NG_ANIMATE_CLASS_NAME = 'ng-animate';
      var rootAnimateState = {running: true};

      function extractElementNode(element) {
        for(var i = 0; i < element.length; i++) {
          var elm = element[i];
          if(elm.nodeType == ELEMENT_NODE) {
            return elm;
          }
        }
      }

      function prepareElement(element) {
        return element && angular.element(element);
      }

      function stripCommentsFromElement(element) {
        return angular.element(extractElementNode(element));
      }

      function isMatchingElement(elm1, elm2) {
        return extractElementNode(elm1) == extractElementNode(elm2);
      }

      $provide.decorator('$animate', ['$delegate', '$injector', '$sniffer', '$rootElement', '$$asyncCallback', '$rootScope', '$document',
        function($delegate,   $injector,   $sniffer,   $rootElement,   $$asyncCallback,    $rootScope,   $document) {

          var globalAnimationCounter = 0;
          $rootElement.data(NG_ANIMATE_STATE, rootAnimateState);

          // disable animations during bootstrap, but once we bootstrapped, wait again
          // for another digest until enabling animations. The reason why we digest twice
          // is because all structural animations (enter, leave and move) all perform a
          // post digest operation before animating. If we only wait for a single digest
          // to pass then the structural animation would render its animation on page load.
          // (which is what we're trying to avoid when the application first boots up.)
          $rootScope.$$postDigest(function() {
            $rootScope.$$postDigest(function() {
              rootAnimateState.running = false;
            });
          });

          var classNameFilter = $animateProvider.classNameFilter();
          var isAnimatableClassName = !classNameFilter
            ? function() { return true; }
            : function(className) {
            return classNameFilter.test(className);
          };

          function lookup(name) {
            if (name) {
              var matches = [],
                flagMap = {},
                classes = name.substr(1).split('.');

              //the empty string value is the default animation
              //operation which performs CSS transition and keyframe
              //animations sniffing. This is always included for each
              //element animation procedure if the browser supports
              //transitions and/or keyframe animations. The default
              //animation is added to the top of the list to prevent
              //any previous animations from affecting the element styling
              //prior to the element being animated.
              if ($sniffer.transitions || $sniffer.animations) {
                matches.push($injector.get(selectors['']));
              }

              for(var i=0; i < classes.length; i++) {
                var klass = classes[i],
                  selectorFactoryName = selectors[klass];
                if(selectorFactoryName && !flagMap[klass]) {
                  matches.push($injector.get(selectorFactoryName));
                  flagMap[klass] = true;
                }
              }
              return matches;
            }
          }

          function animationRunner(element, animationEvent, className) {
            //transcluded directives may sometimes fire an animation using only comment nodes
            //best to catch this early on to prevent any animation operations from occurring
            var node = element[0];
            if(!node) {
              return;
            }

            var isSetClassOperation = animationEvent == 'setClass';
            var isClassBased = isSetClassOperation ||
              animationEvent == 'addClass' ||
              animationEvent == 'removeClass';

            var classNameAdd, classNameRemove;
            if(angular.isArray(className)) {
              classNameAdd = className[0];
              classNameRemove = className[1];
              className = classNameAdd + ' ' + classNameRemove;
            }

            var currentClassName = element.attr('class');
            var classes = currentClassName + ' ' + className;
            if(!isAnimatableClassName(classes)) {
              return;
            }

            var beforeComplete = noop,
              beforeCancel = [],
              before = [],
              afterComplete = noop,
              afterCancel = [],
              after = [];

            var animationLookup = (' ' + classes).replace(/\s+/g,'.');
            forEach(lookup(animationLookup), function(animationFactory) {
              var created = registerAnimation(animationFactory, animationEvent);
              if(!created && isSetClassOperation) {
                registerAnimation(animationFactory, 'addClass');
                registerAnimation(animationFactory, 'removeClass');
              }
            });

            function registerAnimation(animationFactory, event) {
              var afterFn = animationFactory[event];
              var beforeFn = animationFactory['before' + event.charAt(0).toUpperCase() + event.substr(1)];
              if(afterFn || beforeFn) {
                if(event == 'leave') {
                  beforeFn = afterFn;
                  //when set as null then animation knows to skip this phase
                  afterFn = null;
                }
                after.push({
                  event : event, fn : afterFn
                });
                before.push({
                  event : event, fn : beforeFn
                });
                return true;
              }
            }

            function run(fns, cancellations, allCompleteFn) {
              var animations = [];
              forEach(fns, function(animation) {
                animation.fn && animations.push(animation);
              });

              var count = 0;
              function afterAnimationComplete(index) {
                if(cancellations) {
                  (cancellations[index] || noop)();
                  if(++count < animations.length) return;
                  cancellations = null;
                }
                allCompleteFn();
              }

              //The code below adds directly to the array in order to work with
              //both sync and async animations. Sync animations are when the done()
              //operation is called right away. DO NOT REFACTOR!
              forEach(animations, function(animation, index) {
                var progress = function() {
                  afterAnimationComplete(index);
                };
                switch(animation.event) {
                  case 'setClass':
                    cancellations.push(animation.fn(element, classNameAdd, classNameRemove, progress));
                    break;
                  case 'addClass':
                    cancellations.push(animation.fn(element, classNameAdd || className,     progress));
                    break;
                  case 'removeClass':
                    cancellations.push(animation.fn(element, classNameRemove || className,  progress));
                    break;
                  default:
                    cancellations.push(animation.fn(element, progress));
                    break;
                }
              });

              if(cancellations && cancellations.length === 0) {
                allCompleteFn();
              }
            }

            return {
              node : node,
              event : animationEvent,
              className : className,
              isClassBased : isClassBased,
              isSetClassOperation : isSetClassOperation,
              before : function(allCompleteFn) {
                beforeComplete = allCompleteFn;
                run(before, beforeCancel, function() {
                  beforeComplete = noop;
                  allCompleteFn();
                });
              },
              after : function(allCompleteFn) {
                afterComplete = allCompleteFn;
                run(after, afterCancel, function() {
                  afterComplete = noop;
                  allCompleteFn();
                });
              },
              cancel : function() {
                if(beforeCancel) {
                  forEach(beforeCancel, function(cancelFn) {
                    (cancelFn || noop)(true);
                  });
                  beforeComplete(true);
                }
                if(afterCancel) {
                  forEach(afterCancel, function(cancelFn) {
                    (cancelFn || noop)(true);
                  });
                  afterComplete(true);
                }
              }
            };
          }

          /**
           * @ngdoc service
           * @name $animate
           * @kind function
           *
           * @description
           * The `$animate` service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations.
           * When any of these operations are run, the $animate service
           * will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object)
           * as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.
           *
           * The `$animate` service is used behind the scenes with pre-existing directives and animation with these directives
           * will work out of the box without any extra configuration.
           *
           * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
           *
           * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
           *
           */
          return {
            /**
             * @ngdoc method
             * @name $animate#enter
             * @kind function
             *
             * @description
             * Appends the element to the parentElement element that resides in the document and then runs the enter animation. Once
             * the animation is started, the following CSS classes will be present on the element for the duration of the animation:
             *
             * Below is a breakdown of each step that occurs during enter animation:
             *
             * | Animation Step                                                                               | What the element class attribute looks like |
             * |----------------------------------------------------------------------------------------------|---------------------------------------------|
             * | 1. $animate.enter(...) is called                                                             | class="my-animation"                        |
             * | 2. element is inserted into the parentElement element or beside the afterElement element     | class="my-animation"                        |
             * | 3. $animate runs any JavaScript-defined animations on the element                            | class="my-animation ng-animate"             |
             * | 4. the .ng-enter class is added to the element                                               | class="my-animation ng-animate ng-enter"    |
             * | 5. $animate scans the element styles to get the CSS transition/animation duration and delay  | class="my-animation ng-animate ng-enter"    |
             * | 6. $animate waits for 10ms (this performs a reflow)                                          | class="my-animation ng-animate ng-enter"    |
             * | 7. the .ng-enter-active and .ng-animate-active classes are added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active ng-enter ng-enter-active" |
             * | 8. $animate waits for X milliseconds for the animation to complete                           | class="my-animation ng-animate ng-animate-active ng-enter ng-enter-active" |
             * | 9. The animation ends and all generated CSS classes are removed from the element             | class="my-animation"                        |
             * | 10. The doneCallback() callback is fired (if provided)                                       | class="my-animation"                        |
             *
             * @param {DOMElement} element the element that will be the focus of the enter animation
             * @param {DOMElement} parentElement the parent element of the element that will be the focus of the enter animation
             * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the enter animation
             * @param {function()=} doneCallback the callback function that will be called once the animation is complete
             */
            enter : function(element, parentElement, afterElement, doneCallback) {
              element = angular.element(element);
              parentElement = prepareElement(parentElement);
              afterElement = prepareElement(afterElement);

              this.enabled(false, element);
              $delegate.enter(element, parentElement, afterElement);
              $rootScope.$$postDigest(function() {
                element = stripCommentsFromElement(element);
                performAnimation('enter', 'ng-enter', element, parentElement, afterElement, noop, doneCallback);
              });
            },

            /**
             * @ngdoc method
             * @name $animate#leave
             * @kind function
             *
             * @description
             * Runs the leave animation operation and, upon completion, removes the element from the DOM. Once
             * the animation is started, the following CSS classes will be added for the duration of the animation:
             *
             * Below is a breakdown of each step that occurs during leave animation:
             *
             * | Animation Step                                                                               | What the element class attribute looks like |
             * |----------------------------------------------------------------------------------------------|---------------------------------------------|
             * | 1. $animate.leave(...) is called                                                             | class="my-animation"                        |
             * | 2. $animate runs any JavaScript-defined animations on the element                            | class="my-animation ng-animate"             |
             * | 3. the .ng-leave class is added to the element                                               | class="my-animation ng-animate ng-leave"    |
             * | 4. $animate scans the element styles to get the CSS transition/animation duration and delay  | class="my-animation ng-animate ng-leave"    |
             * | 5. $animate waits for 10ms (this performs a reflow)                                          | class="my-animation ng-animate ng-leave"    |
             * | 6. the .ng-leave-active and .ng-animate-active classes is added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active ng-leave ng-leave-active" |
             * | 7. $animate waits for X milliseconds for the animation to complete                           | class="my-animation ng-animate ng-animate-active ng-leave ng-leave-active" |
             * | 8. The animation ends and all generated CSS classes are removed from the element             | class="my-animation"                        |
             * | 9. The element is removed from the DOM                                                       | ...                                         |
             * | 10. The doneCallback() callback is fired (if provided)                                       | ...                                         |
             *
             * @param {DOMElement} element the element that will be the focus of the leave animation
             * @param {function()=} doneCallback the callback function that will be called once the animation is complete
             */
            leave : function(element, doneCallback) {
              element = angular.element(element);
              cancelChildAnimations(element);
              this.enabled(false, element);
              $rootScope.$$postDigest(function() {
                performAnimation('leave', 'ng-leave', stripCommentsFromElement(element), null, null, function() {
                  $delegate.leave(element);
                }, doneCallback);
              });
            },

            /**
             * @ngdoc method
             * @name $animate#move
             * @kind function
             *
             * @description
             * Fires the move DOM operation. Just before the animation starts, the animate service will either append it into the parentElement container or
             * add the element directly after the afterElement element if present. Then the move animation will be run. Once
             * the animation is started, the following CSS classes will be added for the duration of the animation:
             *
             * Below is a breakdown of each step that occurs during move animation:
             *
             * | Animation Step                                                                               | What the element class attribute looks like |
             * |----------------------------------------------------------------------------------------------|---------------------------------------------|
             * | 1. $animate.move(...) is called                                                              | class="my-animation"                        |
             * | 2. element is moved into the parentElement element or beside the afterElement element        | class="my-animation"                        |
             * | 3. $animate runs any JavaScript-defined animations on the element                            | class="my-animation ng-animate"             |
             * | 4. the .ng-move class is added to the element                                                | class="my-animation ng-animate ng-move"     |
             * | 5. $animate scans the element styles to get the CSS transition/animation duration and delay  | class="my-animation ng-animate ng-move"     |
             * | 6. $animate waits for 10ms (this performs a reflow)                                          | class="my-animation ng-animate ng-move"     |
             * | 7. the .ng-move-active and .ng-animate-active classes is added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active ng-move ng-move-active" |
             * | 8. $animate waits for X milliseconds for the animation to complete                           | class="my-animation ng-animate ng-animate-active ng-move ng-move-active" |
             * | 9. The animation ends and all generated CSS classes are removed from the element             | class="my-animation"                        |
             * | 10. The doneCallback() callback is fired (if provided)                                       | class="my-animation"                        |
             *
             * @param {DOMElement} element the element that will be the focus of the move animation
             * @param {DOMElement} parentElement the parentElement element of the element that will be the focus of the move animation
             * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the move animation
             * @param {function()=} doneCallback the callback function that will be called once the animation is complete
             */
            move : function(element, parentElement, afterElement, doneCallback) {
              element = angular.element(element);
              parentElement = prepareElement(parentElement);
              afterElement = prepareElement(afterElement);

              cancelChildAnimations(element);
              this.enabled(false, element);
              $delegate.move(element, parentElement, afterElement);
              $rootScope.$$postDigest(function() {
                element = stripCommentsFromElement(element);
                performAnimation('move', 'ng-move', element, parentElement, afterElement, noop, doneCallback);
              });
            },

            /**
             * @ngdoc method
             * @name $animate#addClass
             *
             * @description
             * Triggers a custom animation event based off the className variable and then attaches the className value to the element as a CSS class.
             * Unlike the other animation methods, the animate service will suffix the className value with {@type -add} in order to provide
             * the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if no CSS transitions
             * or keyframes are defined on the -add or base CSS class).
             *
             * Below is a breakdown of each step that occurs during addClass animation:
             *
             * | Animation Step                                                                                 | What the element class attribute looks like |
             * |------------------------------------------------------------------------------------------------|---------------------------------------------|
             * | 1. $animate.addClass(element, 'super') is called                                               | class="my-animation"                        |
             * | 2. $animate runs any JavaScript-defined animations on the element                              | class="my-animation ng-animate"             |
             * | 3. the .super-add class are added to the element                                               | class="my-animation ng-animate super-add"   |
             * | 4. $animate scans the element styles to get the CSS transition/animation duration and delay    | class="my-animation ng-animate super-add"   |
             * | 5. $animate waits for 10ms (this performs a reflow)                                            | class="my-animation ng-animate super-add"   |
             * | 6. the .super, .super-add-active and .ng-animate-active classes are added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active super super-add super-add-active"          |
             * | 7. $animate waits for X milliseconds for the animation to complete                             | class="my-animation super super-add super-add-active"  |
             * | 8. The animation ends and all generated CSS classes are removed from the element               | class="my-animation super"                  |
             * | 9. The super class is kept on the element                                                      | class="my-animation super"                  |
             * | 10. The doneCallback() callback is fired (if provided)                                         | class="my-animation super"                  |
             *
             * @param {DOMElement} element the element that will be animated
             * @param {string} className the CSS class that will be added to the element and then animated
             * @param {function()=} doneCallback the callback function that will be called once the animation is complete
             */
            addClass : function(element, className, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('addClass', className, element, null, null, function() {
                $delegate.addClass(element, className);
              }, doneCallback);
            },

            /**
             * @ngdoc method
             * @name $animate#removeClass
             *
             * @description
             * Triggers a custom animation event based off the className variable and then removes the CSS class provided by the className value
             * from the element. Unlike the other animation methods, the animate service will suffix the className value with {@type -remove} in
             * order to provide the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if
             * no CSS transitions or keyframes are defined on the -remove or base CSS classes).
             *
             * Below is a breakdown of each step that occurs during removeClass animation:
             *
             * | Animation Step                                                                                | What the element class attribute looks like     |
             * |-----------------------------------------------------------------------------------------------|---------------------------------------------|
             * | 1. $animate.removeClass(element, 'super') is called                                           | class="my-animation super"                  |
             * | 2. $animate runs any JavaScript-defined animations on the element                             | class="my-animation super ng-animate"       |
             * | 3. the .super-remove class are added to the element                                           | class="my-animation super ng-animate super-remove"|
             * | 4. $animate scans the element styles to get the CSS transition/animation duration and delay   | class="my-animation super ng-animate super-remove"   |
             * | 5. $animate waits for 10ms (this performs a reflow)                                           | class="my-animation super ng-animate super-remove"   |
             * | 6. the .super-remove-active and .ng-animate-active classes are added and .super is removed (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active super-remove super-remove-active"          |
             * | 7. $animate waits for X milliseconds for the animation to complete                            | class="my-animation ng-animate ng-animate-active super-remove super-remove-active"   |
             * | 8. The animation ends and all generated CSS classes are removed from the element              | class="my-animation"                        |
             * | 9. The doneCallback() callback is fired (if provided)                                         | class="my-animation"                        |
             *
             *
             * @param {DOMElement} element the element that will be animated
             * @param {string} className the CSS class that will be animated and then removed from the element
             * @param {function()=} doneCallback the callback function that will be called once the animation is complete
             */
            removeClass : function(element, className, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('removeClass', className, element, null, null, function() {
                $delegate.removeClass(element, className);
              }, doneCallback);
            },

            /**
             *
             * @ngdoc function
             * @name $animate#setClass
             * @function
             * @description Adds and/or removes the given CSS classes to and from the element.
             * Once complete, the done() callback will be fired (if provided).
             * @param {DOMElement} element the element which will its CSS classes changed
             *   removed from it
             * @param {string} add the CSS classes which will be added to the element
             * @param {string} remove the CSS class which will be removed from the element
             * @param {Function=} done the callback function (if provided) that will be fired after the
             *   CSS classes have been set on the element
             */
            setClass : function(element, add, remove, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('setClass', [add, remove], element, null, null, function() {
                $delegate.setClass(element, add, remove);
              }, doneCallback);
            },

            /**
             * @ngdoc method
             * @name $animate#enabled
             * @kind function
             *
             * @param {boolean=} value If provided then set the animation on or off.
             * @param {DOMElement} element If provided then the element will be used to represent the enable/disable operation
             * @return {boolean} Current animation state.
             *
             * @description
             * Globally enables/disables animations.
             *
             */
            enabled : function(value, element) {
              switch(arguments.length) {
                case 2:
                  if(value) {
                    cleanup(element);
                  } else {
                    var data = element.data(NG_ANIMATE_STATE) || {};
                    data.disabled = true;
                    element.data(NG_ANIMATE_STATE, data);
                  }
                  break;

                case 1:
                  rootAnimateState.disabled = !value;
                  break;

                default:
                  value = !rootAnimateState.disabled;
                  break;
              }
              return !!value;
            }
          };

          /*
           all animations call this shared animation triggering function internally.
           The animationEvent variable refers to the JavaScript animation event that will be triggered
           and the className value is the name of the animation that will be applied within the
           CSS code. Element, parentElement and afterElement are provided DOM elements for the animation
           and the onComplete callback will be fired once the animation is fully complete.
           */
          function performAnimation(animationEvent, className, element, parentElement, afterElement, domOperation, doneCallback) {

            var runner = animationRunner(element, animationEvent, className);
            if(!runner) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              closeAnimation();
              return;
            }

            className = runner.className;
            var elementEvents = angular.element._data(runner.node);
            elementEvents = elementEvents && elementEvents.events;

            if (!parentElement) {
              parentElement = afterElement ? afterElement.parent() : element.parent();
            }

            var ngAnimateState  = element.data(NG_ANIMATE_STATE) || {};
            var runningAnimations     = ngAnimateState.active || {};
            var totalActiveAnimations = ngAnimateState.totalActive || 0;
            var lastAnimation         = ngAnimateState.last;

            //only allow animations if the currently running animation is not structural
            //or if there is no animation running at all
            var skipAnimations = runner.isClassBased ?
              ngAnimateState.disabled || (lastAnimation && !lastAnimation.isClassBased) :
              false;

            //skip the animation if animations are disabled, a parent is already being animated,
            //the element is not currently attached to the document body or then completely close
            //the animation if any matching animations are not found at all.
            //NOTE: IE8 + IE9 should close properly (run closeAnimation()) in case an animation was found.
            if (skipAnimations || animationsDisabled(element, parentElement)) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              closeAnimation();
              return;
            }

            var skipAnimation = false;
            if(totalActiveAnimations > 0) {
              var animationsToCancel = [];
              if(!runner.isClassBased) {
                if(animationEvent == 'leave' && runningAnimations['ng-leave']) {
                  skipAnimation = true;
                } else {
                  //cancel all animations when a structural animation takes place
                  for(var klass in runningAnimations) {
                    animationsToCancel.push(runningAnimations[klass]);
                    cleanup(element, klass);
                  }
                  runningAnimations = {};
                  totalActiveAnimations = 0;
                }
              } else if(lastAnimation.event == 'setClass') {
                animationsToCancel.push(lastAnimation);
                cleanup(element, className);
              }
              else if(runningAnimations[className]) {
                var current = runningAnimations[className];
                if(current.event == animationEvent) {
                  skipAnimation = true;
                } else {
                  animationsToCancel.push(current);
                  cleanup(element, className);
                }
              }

              if(animationsToCancel.length > 0) {
                forEach(animationsToCancel, function(operation) {
                  operation.cancel();
                });
              }
            }

            if(runner.isClassBased && !runner.isSetClassOperation && !skipAnimation) {
              skipAnimation = (animationEvent == 'addClass') == element.hasClass(className); //opposite of XOR
            }

            if(skipAnimation) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              fireDoneCallbackAsync();
              return;
            }

            if(animationEvent == 'leave') {
              //there's no need to ever remove the listener since the element
              //will be removed (destroyed) after the leave animation ends or
              //is cancelled midway
              element.one('$destroy', function(e) {
                var element = angular.element(this);
                var state = element.data(NG_ANIMATE_STATE);
                if(state) {
                  var activeLeaveAnimation = state.active['ng-leave'];
                  if(activeLeaveAnimation) {
                    activeLeaveAnimation.cancel();
                    cleanup(element, 'ng-leave');
                  }
                }
              });
            }

            //the ng-animate class does nothing, but it's here to allow for
            //parent animations to find and cancel child animations when needed
            element.addClass(NG_ANIMATE_CLASS_NAME);

            var localAnimationCount = globalAnimationCounter++;
            totalActiveAnimations++;
            runningAnimations[className] = runner;

            element.data(NG_ANIMATE_STATE, {
              last : runner,
              active : runningAnimations,
              index : localAnimationCount,
              totalActive : totalActiveAnimations
            });

            //first we run the before animations and when all of those are complete
            //then we perform the DOM operation and run the next set of animations
            fireBeforeCallbackAsync();
            runner.before(function(cancelled) {
              var data = element.data(NG_ANIMATE_STATE);
              cancelled = cancelled ||
                !data || !data.active[className] ||
                (runner.isClassBased && data.active[className].event != animationEvent);

              fireDOMOperation();
              if(cancelled === true) {
                closeAnimation();
              } else {
                fireAfterCallbackAsync();
                runner.after(closeAnimation);
              }
            });

            function fireDOMCallback(animationPhase) {
              var eventName = '$animate:' + animationPhase;
              if(elementEvents && elementEvents[eventName] && elementEvents[eventName].length > 0) {
                $$asyncCallback(function() {
                  element.triggerHandler(eventName, {
                    event : animationEvent,
                    className : className
                  });
                });
              }
            }

            function fireBeforeCallbackAsync() {
              fireDOMCallback('before');
            }

            function fireAfterCallbackAsync() {
              fireDOMCallback('after');
            }

            function fireDoneCallbackAsync() {
              fireDOMCallback('close');
              if(doneCallback) {
                $$asyncCallback(function() {
                  doneCallback();
                });
              }
            }

            //it is less complicated to use a flag than managing and canceling
            //timeouts containing multiple callbacks.
            function fireDOMOperation() {
              if(!fireDOMOperation.hasBeenRun) {
                fireDOMOperation.hasBeenRun = true;
                domOperation();
              }
            }

            function closeAnimation() {
              if(!closeAnimation.hasBeenRun) {
                closeAnimation.hasBeenRun = true;
                var data = element.data(NG_ANIMATE_STATE);
                if(data) {
                  /* only structural animations wait for reflow before removing an
                   animation, but class-based animations don't. An example of this
                   failing would be when a parent HTML tag has a ng-class attribute
                   causing ALL directives below to skip animations during the digest */
                  if(runner && runner.isClassBased) {
                    cleanup(element, className);
                  } else {
                    $$asyncCallback(function() {
                      var data = element.data(NG_ANIMATE_STATE) || {};
                      if(localAnimationCount == data.index) {
                        cleanup(element, className, animationEvent);
                      }
                    });
                    element.data(NG_ANIMATE_STATE, data);
                  }
                }
                fireDoneCallbackAsync();
              }
            }
          }

          function cancelChildAnimations(element) {
            var node = extractElementNode(element);
            if (node) {
              var nodes = angular.isFunction(node.getElementsByClassName) ?
                node.getElementsByClassName(NG_ANIMATE_CLASS_NAME) :
                node.querySelectorAll('.' + NG_ANIMATE_CLASS_NAME);
              forEach(nodes, function(element) {
                element = angular.element(element);
                var data = element.data(NG_ANIMATE_STATE);
                if(data && data.active) {
                  forEach(data.active, function(runner) {
                    runner.cancel();
                  });
                }
              });
            }
          }

          function cleanup(element, className) {
            if(isMatchingElement(element, $rootElement)) {
              if(!rootAnimateState.disabled) {
                rootAnimateState.running = false;
                rootAnimateState.structural = false;
              }
            } else if(className) {
              var data = element.data(NG_ANIMATE_STATE) || {};

              var removeAnimations = className === true;
              if(!removeAnimations && data.active && data.active[className]) {
                data.totalActive--;
                delete data.active[className];
              }

              if(removeAnimations || !data.totalActive) {
                element.removeClass(NG_ANIMATE_CLASS_NAME);
                element.removeData(NG_ANIMATE_STATE);
              }
            }
          }

          function animationsDisabled(element, parentElement) {
            if (rootAnimateState.disabled) return true;

            if(isMatchingElement(element, $rootElement)) {
              return rootAnimateState.disabled || rootAnimateState.running;
            }

            do {
              //the element did not reach the root element which means that it
              //is not apart of the DOM. Therefore there is no reason to do
              //any animations on it
              if(parentElement.length === 0) break;

              var isRoot = isMatchingElement(parentElement, $rootElement);
              var state = isRoot ? rootAnimateState : parentElement.data(NG_ANIMATE_STATE);
              var result = state && (!!state.disabled || state.running || state.totalActive > 0);
              if(isRoot || result) {
                return result;
              }

              if(isRoot) return true;
            }
            while(parentElement = parentElement.parent());

            return true;
          }
        }]);

      $animateProvider.register('', ['$window', '$sniffer', '$timeout', '$$animateReflow',
        function($window,   $sniffer,   $timeout,   $$animateReflow) {
          // Detect proper transitionend/animationend event names.
          var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

          // If unprefixed events are not supported but webkit-prefixed are, use the latter.
          // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
          // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
          // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
          // Register both events in case `window.onanimationend` is not supported because of that,
          // do the same for `transitionend` as Safari is likely to exhibit similar behavior.
          // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
          // therefore there is no reason to test anymore for other vendor prefixes: http://caniuse.com/#search=transition
          if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
            CSS_PREFIX = '-webkit-';
            TRANSITION_PROP = 'WebkitTransition';
            TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
          } else {
            TRANSITION_PROP = 'transition';
            TRANSITIONEND_EVENT = 'transitionend';
          }

          if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
            CSS_PREFIX = '-webkit-';
            ANIMATION_PROP = 'WebkitAnimation';
            ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
          } else {
            ANIMATION_PROP = 'animation';
            ANIMATIONEND_EVENT = 'animationend';
          }

          var DURATION_KEY = 'Duration';
          var PROPERTY_KEY = 'Property';
          var DELAY_KEY = 'Delay';
          var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
          var NG_ANIMATE_PARENT_KEY = '$$ngAnimateKey';
          var NG_ANIMATE_CSS_DATA_KEY = '$$ngAnimateCSS3Data';
          var NG_ANIMATE_BLOCK_CLASS_NAME = 'ng-animate-block-transitions';
          var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
          var CLOSING_TIME_BUFFER = 1.5;
          var ONE_SECOND = 1000;

          var lookupCache = {};
          var parentCounter = 0;
          var animationReflowQueue = [];
          var cancelAnimationReflow;
          function afterReflow(element, callback) {
            if(cancelAnimationReflow) {
              cancelAnimationReflow();
            }
            animationReflowQueue.push(callback);
            cancelAnimationReflow = $$animateReflow(function() {
              forEach(animationReflowQueue, function(fn) {
                fn();
              });

              animationReflowQueue = [];
              cancelAnimationReflow = null;
              lookupCache = {};
            });
          }

          var closingTimer = null;
          var closingTimestamp = 0;
          var animationElementQueue = [];
          function animationCloseHandler(element, totalTime) {
            var node = extractElementNode(element);
            element = angular.element(node);

            //this item will be garbage collected by the closing
            //animation timeout
            animationElementQueue.push(element);

            //but it may not need to cancel out the existing timeout
            //if the timestamp is less than the previous one
            var futureTimestamp = Date.now() + totalTime;
            if(futureTimestamp <= closingTimestamp) {
              return;
            }

            $timeout.cancel(closingTimer);

            closingTimestamp = futureTimestamp;
            closingTimer = $timeout(function() {
              closeAllAnimations(animationElementQueue);
              animationElementQueue = [];
            }, totalTime, false);
          }

          function closeAllAnimations(elements) {
            forEach(elements, function(element) {
              var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
              if(elementData) {
                (elementData.closeAnimationFn || noop)();
              }
            });
          }

          function getElementAnimationDetails(element, cacheKey) {
            var data = cacheKey ? lookupCache[cacheKey] : null;
            if(!data) {
              var transitionDuration = 0;
              var transitionDelay = 0;
              var animationDuration = 0;
              var animationDelay = 0;
              var transitionDelayStyle;
              var animationDelayStyle;
              var transitionDurationStyle;
              var transitionPropertyStyle;

              //we want all the styles defined before and after
              forEach(element, function(element) {
                if (element.nodeType == ELEMENT_NODE) {
                  var elementStyles = $window.getComputedStyle(element) || {};

                  transitionDurationStyle = elementStyles[TRANSITION_PROP + DURATION_KEY];

                  transitionDuration = Math.max(parseMaxTime(transitionDurationStyle), transitionDuration);

                  transitionPropertyStyle = elementStyles[TRANSITION_PROP + PROPERTY_KEY];

                  transitionDelayStyle = elementStyles[TRANSITION_PROP + DELAY_KEY];

                  transitionDelay  = Math.max(parseMaxTime(transitionDelayStyle), transitionDelay);

                  animationDelayStyle = elementStyles[ANIMATION_PROP + DELAY_KEY];

                  animationDelay   = Math.max(parseMaxTime(animationDelayStyle), animationDelay);

                  var aDuration  = parseMaxTime(elementStyles[ANIMATION_PROP + DURATION_KEY]);

                  if(aDuration > 0) {
                    aDuration *= parseInt(elementStyles[ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY], 10) || 1;
                  }

                  animationDuration = Math.max(aDuration, animationDuration);
                }
              });
              data = {
                total : 0,
                transitionPropertyStyle: transitionPropertyStyle,
                transitionDurationStyle: transitionDurationStyle,
                transitionDelayStyle: transitionDelayStyle,
                transitionDelay: transitionDelay,
                transitionDuration: transitionDuration,
                animationDelayStyle: animationDelayStyle,
                animationDelay: animationDelay,
                animationDuration: animationDuration
              };
              if(cacheKey) {
                lookupCache[cacheKey] = data;
              }
            }
            return data;
          }

          function parseMaxTime(str) {
            var maxValue = 0;
            var values = angular.isString(str) ?
              str.split(/\s*,\s*/) :
              [];
            forEach(values, function(value) {
              maxValue = Math.max(parseFloat(value) || 0, maxValue);
            });
            return maxValue;
          }

          function getCacheKey(element) {
            var parentElement = element.parent();
            var parentID = parentElement.data(NG_ANIMATE_PARENT_KEY);
            if(!parentID) {
              parentElement.data(NG_ANIMATE_PARENT_KEY, ++parentCounter);
              parentID = parentCounter;
            }
            return parentID + '-' + extractElementNode(element).getAttribute('class');
          }

          function animateSetup(animationEvent, element, className, calculationDecorator) {
            var cacheKey = getCacheKey(element);
            var eventCacheKey = cacheKey + ' ' + className;
            var itemIndex = lookupCache[eventCacheKey] ? ++lookupCache[eventCacheKey].total : 0;

            var stagger = {};
            if(itemIndex > 0) {
              var staggerClassName = className + '-stagger';
              var staggerCacheKey = cacheKey + ' ' + staggerClassName;
              var applyClasses = !lookupCache[staggerCacheKey];

              applyClasses && element.addClass(staggerClassName);

              stagger = getElementAnimationDetails(element, staggerCacheKey);

              applyClasses && element.removeClass(staggerClassName);
            }

            /* the animation itself may need to add/remove special CSS classes
             * before calculating the anmation styles */
            calculationDecorator = calculationDecorator ||
              function(fn) { return fn(); };

            element.addClass(className);

            var formerData = element.data(NG_ANIMATE_CSS_DATA_KEY) || {};

            var timings = calculationDecorator(function() {
              return getElementAnimationDetails(element, eventCacheKey);
            });

            var transitionDuration = timings.transitionDuration;
            var animationDuration = timings.animationDuration;
            if(transitionDuration === 0 && animationDuration === 0) {
              element.removeClass(className);
              return false;
            }

            element.data(NG_ANIMATE_CSS_DATA_KEY, {
              running : formerData.running || 0,
              itemIndex : itemIndex,
              stagger : stagger,
              timings : timings,
              closeAnimationFn : noop
            });

            //temporarily disable the transition so that the enter styles
            //don't animate twice (this is here to avoid a bug in Chrome/FF).
            var isCurrentlyAnimating = formerData.running > 0 || animationEvent == 'setClass';
            if(transitionDuration > 0) {
              blockTransitions(element, className, isCurrentlyAnimating);
            }

            //staggering keyframe animations work by adjusting the `animation-delay` CSS property
            //on the given element, however, the delay value can only calculated after the reflow
            //since by that time $animate knows how many elements are being animated. Therefore,
            //until the reflow occurs the element needs to be blocked (where the keyframe animation
            //is set to `none 0s`). This blocking mechanism should only be set for when a stagger
            //animation is detected and when the element item index is greater than 0.
            if(animationDuration > 0 && stagger.animationDelay > 0 && stagger.animationDuration === 0) {
              blockKeyframeAnimations(element);
            }

            return true;
          }

          function isStructuralAnimation(className) {
            return className == 'ng-enter' || className == 'ng-move' || className == 'ng-leave';
          }

          function blockTransitions(element, className, isAnimating) {
            if(isStructuralAnimation(className) || !isAnimating) {
              extractElementNode(element).style[TRANSITION_PROP + PROPERTY_KEY] = 'none';
            } else {
              element.addClass(NG_ANIMATE_BLOCK_CLASS_NAME);
            }
          }

          function blockKeyframeAnimations(element) {
            extractElementNode(element).style[ANIMATION_PROP] = 'none 0s';
          }

          function unblockTransitions(element, className) {
            var prop = TRANSITION_PROP + PROPERTY_KEY;
            var node = extractElementNode(element);
            if(node.style[prop] && node.style[prop].length > 0) {
              node.style[prop] = '';
            }
            element.removeClass(NG_ANIMATE_BLOCK_CLASS_NAME);
          }

          function unblockKeyframeAnimations(element) {
            var prop = ANIMATION_PROP;
            var node = extractElementNode(element);
            if(node.style[prop] && node.style[prop].length > 0) {
              node.style[prop] = '';
            }
          }

          function animateRun(animationEvent, element, className, activeAnimationComplete) {
            var node = extractElementNode(element);
            var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
            if(node.getAttribute('class').indexOf(className) == -1 || !elementData) {
              activeAnimationComplete();
              return;
            }

            var activeClassName = '';
            forEach(className.split(' '), function(klass, i) {
              activeClassName += (i > 0 ? ' ' : '') + klass + '-active';
            });

            var stagger = elementData.stagger;
            var timings = elementData.timings;
            var itemIndex = elementData.itemIndex;
            var maxDuration = Math.max(timings.transitionDuration, timings.animationDuration);
            var maxDelay = Math.max(timings.transitionDelay, timings.animationDelay);
            var maxDelayTime = maxDelay * ONE_SECOND;

            var startTime = Date.now();
            var css3AnimationEvents = ANIMATIONEND_EVENT + ' ' + TRANSITIONEND_EVENT;

            var style = '', appliedStyles = [];
            if(timings.transitionDuration > 0) {
              var propertyStyle = timings.transitionPropertyStyle;
              if(propertyStyle.indexOf('all') == -1) {
                style += CSS_PREFIX + 'transition-property: ' + propertyStyle + ';';
                style += CSS_PREFIX + 'transition-duration: ' + timings.transitionDurationStyle + ';';
                appliedStyles.push(CSS_PREFIX + 'transition-property');
                appliedStyles.push(CSS_PREFIX + 'transition-duration');
              }
            }

            if(itemIndex > 0) {
              if(stagger.transitionDelay > 0 && stagger.transitionDuration === 0) {
                var delayStyle = timings.transitionDelayStyle;
                style += CSS_PREFIX + 'transition-delay: ' +
                  prepareStaggerDelay(delayStyle, stagger.transitionDelay, itemIndex) + '; ';
                appliedStyles.push(CSS_PREFIX + 'transition-delay');
              }

              if(stagger.animationDelay > 0 && stagger.animationDuration === 0) {
                style += CSS_PREFIX + 'animation-delay: ' +
                  prepareStaggerDelay(timings.animationDelayStyle, stagger.animationDelay, itemIndex) + '; ';
                appliedStyles.push(CSS_PREFIX + 'animation-delay');
              }
            }

            if(appliedStyles.length > 0) {
              //the element being animated may sometimes contain comment nodes in
              //the jqLite object, so we're safe to use a single variable to house
              //the styles since there is always only one element being animated
              var oldStyle = node.getAttribute('style') || '';
              node.setAttribute('style', oldStyle + '; ' + style);
            }

            element.on(css3AnimationEvents, onAnimationProgress);
            element.addClass(activeClassName);
            elementData.closeAnimationFn = function() {
              onEnd();
              activeAnimationComplete();
            };

            var staggerTime       = itemIndex * (Math.max(stagger.animationDelay, stagger.transitionDelay) || 0);
            var animationTime     = (maxDelay + maxDuration) * CLOSING_TIME_BUFFER;
            var totalTime         = (staggerTime + animationTime) * ONE_SECOND;

            elementData.running++;
            animationCloseHandler(element, totalTime);
            return onEnd;

            // This will automatically be called by $animate so
            // there is no need to attach this internally to the
            // timeout done method.
            function onEnd(cancelled) {
              element.off(css3AnimationEvents, onAnimationProgress);
              element.removeClass(activeClassName);
              animateClose(element, className);
              var node = extractElementNode(element);
              for (var i in appliedStyles) {
                node.style.removeProperty(appliedStyles[i]);
              }
            }

            function onAnimationProgress(event) {
              event.stopPropagation();
              var ev = event.originalEvent || event;
              var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();

              /* Firefox (or possibly just Gecko) likes to not round values up
               * when a ms measurement is used for the animation */
              var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

              /* $manualTimeStamp is a mocked timeStamp value which is set
               * within browserTrigger(). This is only here so that tests can
               * mock animations properly. Real events fallback to event.timeStamp,
               * or, if they don't, then a timeStamp is automatically created for them.
               * We're checking to see if the timeStamp surpasses the expected delay,
               * but we're using elapsedTime instead of the timeStamp on the 2nd
               * pre-condition since animations sometimes close off early */
              if(Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
                activeAnimationComplete();
              }
            }
          }

          function prepareStaggerDelay(delayStyle, staggerDelay, index) {
            var style = '';
            forEach(delayStyle.split(','), function(val, i) {
              style += (i > 0 ? ',' : '') +
                (index * staggerDelay + parseInt(val, 10)) + 's';
            });
            return style;
          }

          function animateBefore(animationEvent, element, className, calculationDecorator) {
            if(animateSetup(animationEvent, element, className, calculationDecorator)) {
              return function(cancelled) {
                cancelled && animateClose(element, className);
              };
            }
          }

          function animateAfter(animationEvent, element, className, afterAnimationComplete) {
            if(element.data(NG_ANIMATE_CSS_DATA_KEY)) {
              return animateRun(animationEvent, element, className, afterAnimationComplete);
            } else {
              animateClose(element, className);
              afterAnimationComplete();
            }
          }

          function animate(animationEvent, element, className, animationComplete) {
            //If the animateSetup function doesn't bother returning a
            //cancellation function then it means that there is no animation
            //to perform at all
            var preReflowCancellation = animateBefore(animationEvent, element, className);
            if(!preReflowCancellation) {
              animationComplete();
              return;
            }

            //There are two cancellation functions: one is before the first
            //reflow animation and the second is during the active state
            //animation. The first function will take care of removing the
            //data from the element which will not make the 2nd animation
            //happen in the first place
            var cancel = preReflowCancellation;
            afterReflow(element, function() {
              unblockTransitions(element, className);
              unblockKeyframeAnimations(element);
              //once the reflow is complete then we point cancel to
              //the new cancellation function which will remove all of the
              //animation properties from the active animation
              cancel = animateAfter(animationEvent, element, className, animationComplete);
            });

            return function(cancelled) {
              (cancel || noop)(cancelled);
            };
          }

          function animateClose(element, className) {
            element.removeClass(className);
            var data = element.data(NG_ANIMATE_CSS_DATA_KEY);
            if(data) {
              if(data.running) {
                data.running--;
              }
              if(!data.running || data.running === 0) {
                element.removeData(NG_ANIMATE_CSS_DATA_KEY);
              }
            }
          }

          return {
            enter : function(element, animationCompleted) {
              return animate('enter', element, 'ng-enter', animationCompleted);
            },

            leave : function(element, animationCompleted) {
              return animate('leave', element, 'ng-leave', animationCompleted);
            },

            move : function(element, animationCompleted) {
              return animate('move', element, 'ng-move', animationCompleted);
            },

            beforeSetClass : function(element, add, remove, animationCompleted) {
              var className = suffixClasses(remove, '-remove') + ' ' +
                suffixClasses(add, '-add');
              var cancellationMethod = animateBefore('setClass', element, className, function(fn) {
                /* when classes are removed from an element then the transition style
                 * that is applied is the transition defined on the element without the
                 * CSS class being there. This is how CSS3 functions outside of ngAnimate.
                 * http://plnkr.co/edit/j8OzgTNxHTb4n3zLyjGW?p=preview */
                var klass = element.attr('class');
                element.removeClass(remove);
                element.addClass(add);
                var timings = fn();
                element.attr('class', klass);
                return timings;
              });

              if(cancellationMethod) {
                afterReflow(element, function() {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              animationCompleted();
            },

            beforeAddClass : function(element, className, animationCompleted) {
              var cancellationMethod = animateBefore('addClass', element, suffixClasses(className, '-add'), function(fn) {

                /* when a CSS class is added to an element then the transition style that
                 * is applied is the transition defined on the element when the CSS class
                 * is added at the time of the animation. This is how CSS3 functions
                 * outside of ngAnimate. */
                element.addClass(className);
                var timings = fn();
                element.removeClass(className);
                return timings;
              });

              if(cancellationMethod) {
                afterReflow(element, function() {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              animationCompleted();
            },

            setClass : function(element, add, remove, animationCompleted) {
              remove = suffixClasses(remove, '-remove');
              add = suffixClasses(add, '-add');
              var className = remove + ' ' + add;
              return animateAfter('setClass', element, className, animationCompleted);
            },

            addClass : function(element, className, animationCompleted) {
              return animateAfter('addClass', element, suffixClasses(className, '-add'), animationCompleted);
            },

            beforeRemoveClass : function(element, className, animationCompleted) {
              var cancellationMethod = animateBefore('removeClass', element, suffixClasses(className, '-remove'), function(fn) {
                /* when classes are removed from an element then the transition style
                 * that is applied is the transition defined on the element without the
                 * CSS class being there. This is how CSS3 functions outside of ngAnimate.
                 * http://plnkr.co/edit/j8OzgTNxHTb4n3zLyjGW?p=preview */
                var klass = element.attr('class');
                element.removeClass(className);
                var timings = fn();
                element.attr('class', klass);
                return timings;
              });

              if(cancellationMethod) {
                afterReflow(element, function() {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              animationCompleted();
            },

            removeClass : function(element, className, animationCompleted) {
              return animateAfter('removeClass', element, suffixClasses(className, '-remove'), animationCompleted);
            }
          };

          function suffixClasses(classes, suffix) {
            var className = '';
            classes = angular.isArray(classes) ? classes : classes.split(/\s+/);
            forEach(classes, function(klass, i) {
              if(klass && klass.length > 0) {
                className += (i > 0 ? ' ' : '') + klass + suffix;
              }
            });
            return className;
          }
        }]);
    }]);


})(window, window.angular);

/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/**
 * @license AngularJS v1.2.17
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

  var $sanitizeMinErr = angular.$$minErr('$sanitize');

  /**
   * @ngdoc module
   * @name ngSanitize
   * @description
   *
   * # ngSanitize
   *
   * The `ngSanitize` module provides functionality to sanitize HTML.
   *
   *
   * <div doc-module-components="ngSanitize"></div>
   *
   * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
   */

  /*
   * HTML Parser By Misko Hevery (misko@hevery.com)
   * based on:  HTML Parser By John Resig (ejohn.org)
   * Original code by Erik Arvidsson, Mozilla Public License
   * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
   *
   * // Use like so:
   * htmlParser(htmlString, {
   *     start: function(tag, attrs, unary) {},
   *     end: function(tag) {},
   *     chars: function(text) {},
   *     comment: function(text) {}
   * });
   *
   */


  /**
   * @ngdoc service
   * @name $sanitize
   * @kind function
   *
   * @description
   *   The input is sanitized by parsing the html into tokens. All safe tokens (from a whitelist) are
   *   then serialized back to properly escaped html string. This means that no unsafe input can make
   *   it into the returned string, however, since our parser is more strict than a typical browser
   *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a
   *   browser, won't make it through the sanitizer.
   *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and
   *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.
   *
   * @param {string} html Html input.
   * @returns {string} Sanitized html.
   *
   * @example
   <example module="ngSanitize" deps="angular-sanitize.js">
   <file name="index.html">
   <script>
   function Ctrl($scope, $sce) {
         $scope.snippet =
           '<p style="color:blue">an html\n' +
           '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
           'snippet</p>';
         $scope.deliberatelyTrustDangerousSnippet = function() {
           return $sce.trustAsHtml($scope.snippet);
         };
       }
   </script>
   <div ng-controller="Ctrl">
   Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
   <table>
   <tr>
   <td>Directive</td>
   <td>How</td>
   <td>Source</td>
   <td>Rendered</td>
   </tr>
   <tr id="bind-html-with-sanitize">
   <td>ng-bind-html</td>
   <td>Automatically uses $sanitize</td>
   <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
   <td><div ng-bind-html="snippet"></div></td>
   </tr>
   <tr id="bind-html-with-trust">
   <td>ng-bind-html</td>
   <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
   <td>
   <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
   &lt;/div&gt;</pre>
   </td>
   <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
   </tr>
   <tr id="bind-default">
   <td>ng-bind</td>
   <td>Automatically escapes</td>
   <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
   <td><div ng-bind="snippet"></div></td>
   </tr>
   </table>
   </div>
   </file>
   <file name="protractor.js" type="protractor">
   it('should sanitize the html snippet by default', function() {
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
     });

   it('should inline raw snippet if bound to a trusted value', function() {
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).
         toBe("<p style=\"color:blue\">an html\n" +
              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
              "snippet</p>");
     });

   it('should escape snippet without any filter', function() {
       expect(element(by.css('#bind-default div')).getInnerHtml()).
         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
              "snippet&lt;/p&gt;");
     });

   it('should update', function() {
       element(by.model('snippet')).clear();
       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('new <b>text</b>');
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(
         'new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(
         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
     });
   </file>
   </example>
   */
  function $SanitizeProvider() {
    this.$get = ['$$sanitizeUri', function($$sanitizeUri) {
      return function(html) {
        var buf = [];
        htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
          return !/^unsafe/.test($$sanitizeUri(uri, isImage));
        }));
        return buf.join('');
      };
    }];
  }

  function sanitizeText(chars) {
    var buf = [];
    var writer = htmlSanitizeWriter(buf, angular.noop);
    writer.chars(chars);
    return buf.join('');
  }


// Regular Expressions for parsing tags and attributes
  var START_TAG_REGEXP =
      /^<\s*([\w:-]+)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*>/,
    END_TAG_REGEXP = /^<\s*\/\s*([\w:-]+)[^>]*>/,
    ATTR_REGEXP = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,
    BEGIN_TAG_REGEXP = /^</,
    BEGING_END_TAGE_REGEXP = /^<\s*\//,
    COMMENT_REGEXP = /<!--(.*?)-->/g,
    DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i,
    CDATA_REGEXP = /<!\[CDATA\[(.*?)]]>/g,
    SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
  // Match everything outside of normal chars and " (quote character)
    NON_ALPHANUMERIC_REGEXP = /([^\#-~| |!])/g;


// Good source of info about elements and attributes
// http://dev.w3.org/html5/spec/Overview.html#semantics
// http://simon.html5.org/html-elements

// Safe Void Elements - HTML5
// http://dev.w3.org/html5/spec/Overview.html#void-elements
  var voidElements = makeMap("area,br,col,hr,img,wbr");

// Elements that you can, intentionally, leave open (and which close themselves)
// http://dev.w3.org/html5/spec/Overview.html#optional-tags
  var optionalEndTagBlockElements = makeMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
    optionalEndTagInlineElements = makeMap("rp,rt"),
    optionalEndTagElements = angular.extend({},
      optionalEndTagInlineElements,
      optionalEndTagBlockElements);

// Safe Block Elements - HTML5
  var blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap("address,article," +
    "aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," +
    "h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul"));

// Inline Elements - HTML5
  var inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap("a,abbr,acronym,b," +
    "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s," +
    "samp,small,span,strike,strong,sub,sup,time,tt,u,var"));


// Special Elements (can contain anything)
  var specialElements = makeMap("script,style");

  var validElements = angular.extend({},
    voidElements,
    blockElements,
    inlineElements,
    optionalEndTagElements);

//Attributes that have href and hence need to be sanitized
  var uriAttrs = makeMap("background,cite,href,longdesc,src,usemap");
  var validAttrs = angular.extend({}, uriAttrs, makeMap(
      'abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,'+
      'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,'+
      'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,'+
      'scope,scrolling,shape,size,span,start,summary,target,title,type,'+
      'valign,value,vspace,width'));

  function makeMap(str) {
    var obj = {}, items = str.split(','), i;
    for (i = 0; i < items.length; i++) obj[items[i]] = true;
    return obj;
  }


  /**
   * @example
   * htmlParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
   *
   * @param {string} html string
   * @param {object} handler
   */
  function htmlParser( html, handler ) {
    var index, chars, match, stack = [], last = html;
    stack.last = function() { return stack[ stack.length - 1 ]; };

    while ( html ) {
      chars = true;

      // Make sure we're not in a script or style element
      if ( !stack.last() || !specialElements[ stack.last() ] ) {

        // Comment
        if ( html.indexOf("<!--") === 0 ) {
          // comments containing -- are not allowed unless they terminate the comment
          index = html.indexOf("--", 4);

          if ( index >= 0 && html.lastIndexOf("-->", index) === index) {
            if (handler.comment) handler.comment( html.substring( 4, index ) );
            html = html.substring( index + 3 );
            chars = false;
          }
          // DOCTYPE
        } else if ( DOCTYPE_REGEXP.test(html) ) {
          match = html.match( DOCTYPE_REGEXP );

          if ( match ) {
            html = html.replace( match[0], '');
            chars = false;
          }
          // end tag
        } else if ( BEGING_END_TAGE_REGEXP.test(html) ) {
          match = html.match( END_TAG_REGEXP );

          if ( match ) {
            html = html.substring( match[0].length );
            match[0].replace( END_TAG_REGEXP, parseEndTag );
            chars = false;
          }

          // start tag
        } else if ( BEGIN_TAG_REGEXP.test(html) ) {
          match = html.match( START_TAG_REGEXP );

          if ( match ) {
            html = html.substring( match[0].length );
            match[0].replace( START_TAG_REGEXP, parseStartTag );
            chars = false;
          }
        }

        if ( chars ) {
          index = html.indexOf("<");

          var text = index < 0 ? html : html.substring( 0, index );
          html = index < 0 ? "" : html.substring( index );

          if (handler.chars) handler.chars( decodeEntities(text) );
        }

      } else {
        html = html.replace(new RegExp("(.*)<\\s*\\/\\s*" + stack.last() + "[^>]*>", 'i'),
          function(all, text){
            text = text.replace(COMMENT_REGEXP, "$1").replace(CDATA_REGEXP, "$1");

            if (handler.chars) handler.chars( decodeEntities(text) );

            return "";
          });

        parseEndTag( "", stack.last() );
      }

      if ( html == last ) {
        throw $sanitizeMinErr('badparse', "The sanitizer was unable to parse the following block " +
          "of html: {0}", html);
      }
      last = html;
    }

    // Clean up any remaining tags
    parseEndTag();

    function parseStartTag( tag, tagName, rest, unary ) {
      tagName = angular.lowercase(tagName);
      if ( blockElements[ tagName ] ) {
        while ( stack.last() && inlineElements[ stack.last() ] ) {
          parseEndTag( "", stack.last() );
        }
      }

      if ( optionalEndTagElements[ tagName ] && stack.last() == tagName ) {
        parseEndTag( "", tagName );
      }

      unary = voidElements[ tagName ] || !!unary;

      if ( !unary )
        stack.push( tagName );

      var attrs = {};

      rest.replace(ATTR_REGEXP,
        function(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {
          var value = doubleQuotedValue
            || singleQuotedValue
            || unquotedValue
            || '';

          attrs[name] = decodeEntities(value);
        });
      if (handler.start) handler.start( tagName, attrs, unary );
    }

    function parseEndTag( tag, tagName ) {
      var pos = 0, i;
      tagName = angular.lowercase(tagName);
      if ( tagName )
      // Find the closest opened tag of the same type
        for ( pos = stack.length - 1; pos >= 0; pos-- )
          if ( stack[ pos ] == tagName )
            break;

      if ( pos >= 0 ) {
        // Close all the open elements, up the stack
        for ( i = stack.length - 1; i >= pos; i-- )
          if (handler.end) handler.end( stack[ i ] );

        // Remove the open elements from the stack
        stack.length = pos;
      }
    }
  }

  var hiddenPre=document.createElement("pre");
  var spaceRe = /^(\s*)([\s\S]*?)(\s*)$/;
  /**
   * decodes all entities into regular string
   * @param value
   * @returns {string} A string with decoded entities.
   */
  function decodeEntities(value) {
    if (!value) { return ''; }

    // Note: IE8 does not preserve spaces at the start/end of innerHTML
    // so we must capture them and reattach them afterward
    var parts = spaceRe.exec(value);
    var spaceBefore = parts[1];
    var spaceAfter = parts[3];
    var content = parts[2];
    if (content) {
      hiddenPre.innerHTML=content.replace(/</g,"&lt;");
      // innerText depends on styling as it doesn't display hidden elements.
      // Therefore, it's better to use textContent not to cause unnecessary
      // reflows. However, IE<9 don't support textContent so the innerText
      // fallback is necessary.
      content = 'textContent' in hiddenPre ?
        hiddenPre.textContent : hiddenPre.innerText;
    }
    return spaceBefore + content + spaceAfter;
  }

  /**
   * Escapes all potentially dangerous characters, so that the
   * resulting string can be safely inserted into attribute or
   * element text.
   * @param value
   * @returns {string} escaped text
   */
  function encodeEntities(value) {
    return value.
      replace(/&/g, '&amp;').
      replace(SURROGATE_PAIR_REGEXP, function (value) {
        var hi = value.charCodeAt(0);
        var low = value.charCodeAt(1);
        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
      }).
      replace(NON_ALPHANUMERIC_REGEXP, function(value){
        return '&#' + value.charCodeAt(0) + ';';
      }).
      replace(/</g, '&lt;').
      replace(/>/g, '&gt;');
  }

  /**
   * create an HTML/XML writer which writes to buffer
   * @param {Array} buf use buf.jain('') to get out sanitized html string
   * @returns {object} in the form of {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * }
   */
  function htmlSanitizeWriter(buf, uriValidator){
    var ignore = false;
    var out = angular.bind(buf, buf.push);
    return {
      start: function(tag, attrs, unary){
        tag = angular.lowercase(tag);
        if (!ignore && specialElements[tag]) {
          ignore = tag;
        }
        if (!ignore && validElements[tag] === true) {
          out('<');
          out(tag);
          angular.forEach(attrs, function(value, key){
            var lkey=angular.lowercase(key);
            var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');
            if (validAttrs[lkey] === true &&
              (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
              out(' ');
              out(key);
              out('="');
              out(encodeEntities(value));
              out('"');
            }
          });
          out(unary ? '/>' : '>');
        }
      },
      end: function(tag){
        tag = angular.lowercase(tag);
        if (!ignore && validElements[tag] === true) {
          out('</');
          out(tag);
          out('>');
        }
        if (tag == ignore) {
          ignore = false;
        }
      },
      chars: function(chars){
        if (!ignore) {
          out(encodeEntities(chars));
        }
      }
    };
  }


// define ngSanitize module and register $sanitize service
  angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);

  /* global sanitizeText: false */

  /**
   * @ngdoc filter
   * @name linky
   * @kind function
   *
   * @description
   * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and
   * plain email address links.
   *
   * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
   *
   * @param {string} text Input text.
   * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.
   * @returns {string} Html-linkified text.
   *
   * @usage
   <span ng-bind-html="linky_expression | linky"></span>
   *
   * @example
   <example module="ngSanitize" deps="angular-sanitize.js">
   <file name="index.html">
   <script>
   function Ctrl($scope) {
           $scope.snippet =
             'Pretty text with some links:\n'+
             'http://angularjs.org/,\n'+
             'mailto:us@somewhere.org,\n'+
   'another@somewhere.org,\n'+
   'and one more: ftp://127.0.0.1/.';
   $scope.snippetWithTarget = 'http://angularjs.org/';
   }
   </script>
   <div ng-controller="Ctrl">
   Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
   <table>
   <tr>
   <td>Filter</td>
   <td>Source</td>
   <td>Rendered</td>
   </tr>
   <tr id="linky-filter">
   <td>linky filter</td>
   <td>
   <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
   </td>
   <td>
   <div ng-bind-html="snippet | linky"></div>
   </td>
   </tr>
   <tr id="linky-target">
   <td>linky target</td>
   <td>
   <pre>&lt;div ng-bind-html="snippetWithTarget | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
   </td>
   <td>
   <div ng-bind-html="snippetWithTarget | linky:'_blank'"></div>
   </td>
   </tr>
   <tr id="escaped-html">
   <td>no filter</td>
   <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
   <td><div ng-bind="snippet"></div></td>
   </tr>
   </table>
   </file>
   <file name="protractor.js" type="protractor">
   it('should linkify the snippet with urls', function() {
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
   'another@somewhere.org, and one more: ftp://127.0.0.1/.');
   expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
   });

   it('should not linkify snippet without the linky filter', function() {
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
   'another@somewhere.org, and one more: ftp://127.0.0.1/.');
   expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
   });

   it('should update', function() {
         element(by.model('snippet')).clear();
         element(by.model('snippet')).sendKeys('new http://link.');
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('new http://link.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
             .toBe('new http://link.');
       });

   it('should work with the target property', function() {
        expect(element(by.id('linky-target')).
            element(by.binding("snippetWithTarget | linky:'_blank'")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
       });
   </file>
   </example>
   */
  angular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {
    var LINKY_URL_REGEXP =
        /((ftp|https?):\/\/|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>]/,
      MAILTO_REGEXP = /^mailto:/;

    return function(text, target) {
      if (!text) return text;
      var match;
      var raw = text;
      var html = [];
      var url;
      var i;
      while ((match = raw.match(LINKY_URL_REGEXP))) {
        // We can not end in these as they are sometimes found at the end of the sentence
        url = match[0];
        // if we did not match ftp/http/mailto then assume mailto
        if (match[2] == match[3]) url = 'mailto:' + url;
        i = match.index;
        addText(raw.substr(0, i));
        addLink(url, match[0].replace(MAILTO_REGEXP, ''));
        raw = raw.substring(i + match[0].length);
      }
      addText(raw);
      return $sanitize(html.join(''));

      function addText(text) {
        if (!text) {
          return;
        }
        html.push(sanitizeText(text));
      }

      function addLink(url, text) {
        html.push('<a ');
        if (angular.isDefined(target)) {
          html.push('target="');
          html.push(target);
          html.push('" ');
        }
        html.push('href="');
        html.push(url);
        html.push('">');
        addText(text);
        html.push('</a>');
      }
    };
  }]);


})(window, window.angular);

/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/**
 * State-based routing for AngularJS
 * @version v0.2.10
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
  module.exports = 'ui.router';
}

(function (window, angular, undefined) {
  /*jshint globalstrict:true*/
  /*global angular:false*/
  'use strict';

  var isDefined = angular.isDefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy;

  function inherit(parent, extra) {
    return extend(new (extend(function() {}, { prototype: parent }))(), extra);
  }

  function merge(dst) {
    forEach(arguments, function(obj) {
      if (obj !== dst) {
        forEach(obj, function(value, key) {
          if (!dst.hasOwnProperty(key)) dst[key] = value;
        });
      }
    });
    return dst;
  }

  /**
   * Finds the common ancestor path between two states.
   *
   * @param {Object} first The first state.
   * @param {Object} second The second state.
   * @return {Array} Returns an array of state names in descending order, not including the root.
   */
  function ancestors(first, second) {
    var path = [];

    for (var n in first.path) {
      if (first.path[n] !== second.path[n]) break;
      path.push(first.path[n]);
    }
    return path;
  }

  /**
   * IE8-safe wrapper for `Object.keys()`.
   *
   * @param {Object} object A JavaScript object.
   * @return {Array} Returns the keys of the object as an array.
   */
  function keys(object) {
    if (Object.keys) {
      return Object.keys(object);
    }
    var result = [];

    angular.forEach(object, function(val, key) {
      result.push(key);
    });
    return result;
  }

  /**
   * IE8-safe wrapper for `Array.prototype.indexOf()`.
   *
   * @param {Array} array A JavaScript array.
   * @param {*} value A value to search the array for.
   * @return {Number} Returns the array index value of `value`, or `-1` if not present.
   */
  function arraySearch(array, value) {
    if (Array.prototype.indexOf) {
      return array.indexOf(value, Number(arguments[2]) || 0);
    }
    var len = array.length >>> 0, from = Number(arguments[2]) || 0;
    from = (from < 0) ? Math.ceil(from) : Math.floor(from);

    if (from < 0) from += len;

    for (; from < len; from++) {
      if (from in array && array[from] === value) return from;
    }
    return -1;
  }

  /**
   * Merges a set of parameters with all parameters inherited between the common parents of the
   * current state and a given destination state.
   *
   * @param {Object} currentParams The value of the current state parameters ($stateParams).
   * @param {Object} newParams The set of parameters which will be composited with inherited params.
   * @param {Object} $current Internal definition of object representing the current state.
   * @param {Object} $to Internal definition of object representing state to transition to.
   */
  function inheritParams(currentParams, newParams, $current, $to) {
    var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

    for (var i in parents) {
      if (!parents[i].params || !parents[i].params.length) continue;
      parentParams = parents[i].params;

      for (var j in parentParams) {
        if (arraySearch(inheritList, parentParams[j]) >= 0) continue;
        inheritList.push(parentParams[j]);
        inherited[parentParams[j]] = currentParams[parentParams[j]];
      }
    }
    return extend({}, inherited, newParams);
  }

  /**
   * Normalizes a set of values to string or `null`, filtering them by a list of keys.
   *
   * @param {Array} keys The list of keys to normalize/return.
   * @param {Object} values An object hash of values to normalize.
   * @return {Object} Returns an object hash of normalized string values.
   */
  function normalize(keys, values) {
    var normalized = {};

    forEach(keys, function (name) {
      var value = values[name];
      normalized[name] = (value != null) ? String(value) : null;
    });
    return normalized;
  }

  /**
   * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
   *
   * @param {Object} a The first object.
   * @param {Object} b The second object.
   * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
   *                     it defaults to the list of keys in `a`.
   * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
   */
  function equalForKeys(a, b, keys) {
    if (!keys) {
      keys = [];
      for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
    }

    for (var i=0; i<keys.length; i++) {
      var k = keys[i];
      if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
    }
    return true;
  }

  /**
   * Returns the subset of an object, based on a list of keys.
   *
   * @param {Array} keys
   * @param {Object} values
   * @return {Boolean} Returns a subset of `values`.
   */
  function filterByKeys(keys, values) {
    var filtered = {};

    forEach(keys, function (name) {
      filtered[name] = values[name];
    });
    return filtered;
  }
  /**
   * @ngdoc overview
   * @name ui.router.util
   *
   * @description
   * # ui.router.util sub-module
   *
   * This module is a dependency of other sub-modules. Do not include this module as a dependency
   * in your angular app (use {@link ui.router} module instead).
   *
   */
  angular.module('ui.router.util', ['ng']);

  /**
   * @ngdoc overview
   * @name ui.router.router
   *
   * @requires ui.router.util
   *
   * @description
   * # ui.router.router sub-module
   *
   * This module is a dependency of other sub-modules. Do not include this module as a dependency
   * in your angular app (use {@link ui.router} module instead).
   */
  angular.module('ui.router.router', ['ui.router.util']);

  /**
   * @ngdoc overview
   * @name ui.router.state
   *
   * @requires ui.router.router
   * @requires ui.router.util
   *
   * @description
   * # ui.router.state sub-module
   *
   * This module is a dependency of the main ui.router module. Do not include this module as a dependency
   * in your angular app (use {@link ui.router} module instead).
   *
   */
  angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

  /**
   * @ngdoc overview
   * @name ui.router
   *
   * @requires ui.router.state
   *
   * @description
   * # ui.router
   *
   * ## The main module for ui.router
   * There are several sub-modules included with the ui.router module, however only this module is needed
   * as a dependency within your angular app. The other modules are for organization purposes.
   *
   * The modules are:
   * * ui.router - the main "umbrella" module
   * * ui.router.router -
   *
   * *You'll need to include **only** this module as the dependency within your angular app.*
   *
   * <pre>
   * <!doctype html>
   * <html ng-app="myApp">
   * <head>
   *   <script src="js/angular.js"></script>
   *   <!-- Include the ui-router script -->
   *   <script src="js/angular-ui-router.min.js"></script>
   *   <script>
   *     // ...and add 'ui.router' as a dependency
   *     var myApp = angular.module('myApp', ['ui.router']);
   *   </script>
   * </head>
   * <body>
   * </body>
   * </html>
   * </pre>
   */
  angular.module('ui.router', ['ui.router.state']);

  angular.module('ui.router.compat', ['ui.router']);

  /**
   * @ngdoc object
   * @name ui.router.util.$resolve
   *
   * @requires $q
   * @requires $injector
   *
   * @description
   * Manages resolution of (acyclic) graphs of promises.
   */
  $Resolve.$inject = ['$q', '$injector'];
  function $Resolve(  $q,    $injector) {

    var VISIT_IN_PROGRESS = 1,
      VISIT_DONE = 2,
      NOTHING = {},
      NO_DEPENDENCIES = [],
      NO_LOCALS = NOTHING,
      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });


    /**
     * @ngdoc function
     * @name ui.router.util.$resolve#study
     * @methodOf ui.router.util.$resolve
     *
     * @description
     * Studies a set of invocables that are likely to be used multiple times.
     * <pre>
     * $resolve.study(invocables)(locals, parent, self)
     * </pre>
     * is equivalent to
     * <pre>
     * $resolve.resolve(invocables, locals, parent, self)
     * </pre>
     * but the former is more efficient (in fact `resolve` just calls `study`
     * internally).
     *
     * @param {object} invocables Invocable objects
     * @return {function} a function to pass in locals, parent and self
     */
    this.study = function (invocables) {
      if (!isObject(invocables)) throw new Error("'invocables' must be an object");

      // Perform a topological sort of invocables to build an ordered plan
      var plan = [], cycle = [], visited = {};
      function visit(value, key) {
        if (visited[key] === VISIT_DONE) return;

        cycle.push(key);
        if (visited[key] === VISIT_IN_PROGRESS) {
          cycle.splice(0, cycle.indexOf(key));
          throw new Error("Cyclic dependency: " + cycle.join(" -> "));
        }
        visited[key] = VISIT_IN_PROGRESS;

        if (isString(value)) {
          plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
        } else {
          var params = $injector.annotate(value);
          forEach(params, function (param) {
            if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
          });
          plan.push(key, value, params);
        }

        cycle.pop();
        visited[key] = VISIT_DONE;
      }
      forEach(invocables, visit);
      invocables = cycle = visited = null; // plan is all that's required

      function isResolve(value) {
        return isObject(value) && value.then && value.$$promises;
      }

      return function (locals, parent, self) {
        if (isResolve(locals) && self === undefined) {
          self = parent; parent = locals; locals = null;
        }
        if (!locals) locals = NO_LOCALS;
        else if (!isObject(locals)) {
          throw new Error("'locals' must be an object");
        }
        if (!parent) parent = NO_PARENT;
        else if (!isResolve(parent)) {
          throw new Error("'parent' must be a promise returned by $resolve.resolve()");
        }

        // To complete the overall resolution, we have to wait for the parent
        // promise and for the promise for each invokable in our plan.
        var resolution = $q.defer(),
          result = resolution.promise,
          promises = result.$$promises = {},
          values = extend({}, locals),
          wait = 1 + plan.length/3,
          merged = false;

        function done() {
          // Merge parent values we haven't got yet and publish our own $$values
          if (!--wait) {
            if (!merged) merge(values, parent.$$values);
            result.$$values = values;
            result.$$promises = true; // keep for isResolve()
            resolution.resolve(values);
          }
        }

        function fail(reason) {
          result.$$failure = reason;
          resolution.reject(reason);
        }

        // Short-circuit if parent has already failed
        if (isDefined(parent.$$failure)) {
          fail(parent.$$failure);
          return result;
        }

        // Merge parent values if the parent has already resolved, or merge
        // parent promises and wait if the parent resolve is still in progress.
        if (parent.$$values) {
          merged = merge(values, parent.$$values);
          done();
        } else {
          extend(promises, parent.$$promises);
          parent.then(done, fail);
        }

        // Process each invocable in the plan, but ignore any where a local of the same name exists.
        for (var i=0, ii=plan.length; i<ii; i+=3) {
          if (locals.hasOwnProperty(plan[i])) done();
          else invoke(plan[i], plan[i+1], plan[i+2]);
        }

        function invoke(key, invocable, params) {
          // Create a deferred for this invocation. Failures will propagate to the resolution as well.
          var invocation = $q.defer(), waitParams = 0;
          function onfailure(reason) {
            invocation.reject(reason);
            fail(reason);
          }
          // Wait for any parameter that we have a promise for (either from parent or from this
          // resolve; in that case study() will have made sure it's ordered before us in the plan).
          forEach(params, function (dep) {
            if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
              waitParams++;
              promises[dep].then(function (result) {
                values[dep] = result;
                if (!(--waitParams)) proceed();
              }, onfailure);
            }
          });
          if (!waitParams) proceed();
          function proceed() {
            if (isDefined(result.$$failure)) return;
            try {
              invocation.resolve($injector.invoke(invocable, self, values));
              invocation.promise.then(function (result) {
                values[key] = result;
                done();
              }, onfailure);
            } catch (e) {
              onfailure(e);
            }
          }
          // Publish promise synchronously; invocations further down in the plan may depend on it.
          promises[key] = invocation.promise;
        }

        return result;
      };
    };

    /**
     * @ngdoc function
     * @name ui.router.util.$resolve#resolve
     * @methodOf ui.router.util.$resolve
     *
     * @description
     * Resolves a set of invocables. An invocable is a function to be invoked via
     * `$injector.invoke()`, and can have an arbitrary number of dependencies.
     * An invocable can either return a value directly,
     * or a `$q` promise. If a promise is returned it will be resolved and the
     * resulting value will be used instead. Dependencies of invocables are resolved
     * (in this order of precedence)
     *
     * - from the specified `locals`
     * - from another invocable that is part of this `$resolve` call
     * - from an invocable that is inherited from a `parent` call to `$resolve`
     *   (or recursively
     * - from any ancestor `$resolve` of that parent).
     *
     * The return value of `$resolve` is a promise for an object that contains
     * (in this order of precedence)
     *
     * - any `locals` (if specified)
     * - the resolved return values of all injectables
     * - any values inherited from a `parent` call to `$resolve` (if specified)
     *
     * The promise will resolve after the `parent` promise (if any) and all promises
     * returned by injectables have been resolved. If any invocable
     * (or `$injector.invoke`) throws an exception, or if a promise returned by an
     * invocable is rejected, the `$resolve` promise is immediately rejected with the
     * same error. A rejection of a `parent` promise (if specified) will likewise be
     * propagated immediately. Once the `$resolve` promise has been rejected, no
     * further invocables will be called.
     *
     * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
     * to throw an error. As a special case, an injectable can depend on a parameter
     * with the same name as the injectable, which will be fulfilled from the `parent`
     * injectable of the same name. This allows inherited values to be decorated.
     * Note that in this case any other injectable in the same `$resolve` with the same
     * dependency would see the decorated value, not the inherited value.
     *
     * Note that missing dependencies -- unlike cyclic dependencies -- will cause an
     * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous)
     * exception.
     *
     * Invocables are invoked eagerly as soon as all dependencies are available.
     * This is true even for dependencies inherited from a `parent` call to `$resolve`.
     *
     * As a special case, an invocable can be a string, in which case it is taken to
     * be a service name to be passed to `$injector.get()`. This is supported primarily
     * for backwards-compatibility with the `resolve` property of `$routeProvider`
     * routes.
     *
     * @param {object} invocables functions to invoke or
     * `$injector` services to fetch.
     * @param {object} locals  values to make available to the injectables
     * @param {object} parent  a promise returned by another call to `$resolve`.
     * @param {object} self  the `this` for the invoked methods
     * @return {object} Promise for an object that contains the resolved return value
     * of all invocables, as well as any inherited and local values.
     */
    this.resolve = function (invocables, locals, parent, self) {
      return this.study(invocables)(locals, parent, self);
    };
  }

  angular.module('ui.router.util').service('$resolve', $Resolve);


  /**
   * @ngdoc object
   * @name ui.router.util.$templateFactory
   *
   * @requires $http
   * @requires $templateCache
   * @requires $injector
   *
   * @description
   * Service. Manages loading of templates.
   */
  $TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
  function $TemplateFactory(  $http,   $templateCache,   $injector) {

    /**
     * @ngdoc function
     * @name ui.router.util.$templateFactory#fromConfig
     * @methodOf ui.router.util.$templateFactory
     *
     * @description
     * Creates a template from a configuration object.
     *
     * @param {object} config Configuration object for which to load a template.
     * The following properties are search in the specified order, and the first one
     * that is defined is used to create the template:
     *
     * @param {string|object} config.template html string template or function to
     * load via {@link ui.router.util.$templateFactory#fromString fromString}.
     * @param {string|object} config.templateUrl url to load or a function returning
     * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
     * @param {Function} config.templateProvider function to invoke via
     * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
     * @param {object} params  Parameters to pass to the template function.
     * @param {object} locals Locals to pass to `invoke` if the template is loaded
     * via a `templateProvider`. Defaults to `{ params: params }`.
     *
     * @return {string|object}  The template html as a string, or a promise for
     * that string,or `null` if no template is configured.
     */
    this.fromConfig = function (config, params, locals) {
      return (
        isDefined(config.template) ? this.fromString(config.template, params) :
          isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
            isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
              null
        );
    };

    /**
     * @ngdoc function
     * @name ui.router.util.$templateFactory#fromString
     * @methodOf ui.router.util.$templateFactory
     *
     * @description
     * Creates a template from a string or a function returning a string.
     *
     * @param {string|object} template html template as a string or function that
     * returns an html template as a string.
     * @param {object} params Parameters to pass to the template function.
     *
     * @return {string|object} The template html as a string, or a promise for that
     * string.
     */
    this.fromString = function (template, params) {
      return isFunction(template) ? template(params) : template;
    };

    /**
     * @ngdoc function
     * @name ui.router.util.$templateFactory#fromUrl
     * @methodOf ui.router.util.$templateFactory
     *
     * @description
     * Loads a template from the a URL via `$http` and `$templateCache`.
     *
     * @param {string|Function} url url of the template to load, or a function
     * that returns a url.
     * @param {Object} params Parameters to pass to the url function.
     * @return {string|Promise.<string>} The template html as a string, or a promise
     * for that string.
     */
    this.fromUrl = function (url, params) {
      if (isFunction(url)) url = url(params);
      if (url == null) return null;
      else return $http
        .get(url, { cache: $templateCache })
        .then(function(response) { return response.data; });
    };

    /**
     * @ngdoc function
     * @name ui.router.util.$templateFactory#fromUrl
     * @methodOf ui.router.util.$templateFactory
     *
     * @description
     * Creates a template by invoking an injectable provider function.
     *
     * @param {Function} provider Function to invoke via `$injector.invoke`
     * @param {Object} params Parameters for the template.
     * @param {Object} locals Locals to pass to `invoke`. Defaults to
     * `{ params: params }`.
     * @return {string|Promise.<string>} The template html as a string, or a promise
     * for that string.
     */
    this.fromProvider = function (provider, params, locals) {
      return $injector.invoke(provider, null, locals || { params: params });
    };
  }

  angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

  /**
   * @ngdoc object
   * @name ui.router.util.type:UrlMatcher
   *
   * @description
   * Matches URLs against patterns and extracts named parameters from the path or the search
   * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
   * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
   * do not influence whether or not a URL is matched, but their values are passed through into
   * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
   *
   * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
   * syntax, which optionally allows a regular expression for the parameter to be specified:
   *
   * * `':'` name - colon placeholder
   * * `'*'` name - catch-all placeholder
   * * `'{' name '}'` - curly placeholder
   * * `'{' name ':' regexp '}'` - curly placeholder with regexp. Should the regexp itself contain
   *   curly braces, they must be in matched pairs or escaped with a backslash.
   *
   * Parameter names may contain only word characters (latin letters, digits, and underscore) and
   * must be unique within the pattern (across both path and search parameters). For colon
   * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
   * number of characters other than '/'. For catch-all placeholders the path parameter matches
   * any number of characters.
   *
   * Examples:
   *
   * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
   *   trailing slashes, and patterns have to match the entire path, not just a prefix.
   * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
   *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
   * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
   * * `'/user/{id:[^/]*}'` - Same as the previous example.
   * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
   *   parameter consists of 1 to 8 hex digits.
   * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
   *   path into the parameter 'path'.
   * * `'/files/*path'` - ditto.
   *
   * @param {string} pattern  the pattern to compile into a matcher.
   *
   * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
   *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
   *   non-null) will start with this prefix.
   *
   * @property {string} source  The pattern that was passed into the contructor
   *
   * @property {string} sourcePath  The path portion of the source property
   *
   * @property {string} sourceSearch  The search portion of the source property
   *
   * @property {string} regex  The constructed regex that will be used to match against the url when
   *   it is time to determine which url will match.
   *
   * @returns {Object}  New UrlMatcher object
   */
  function UrlMatcher(pattern) {

    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
    //   '*' name
    //   ':' name
    //   '{' name '}'
    //   '{' name ':' regexp '}'
    // The regular expression is somewhat complicated due to the need to allow curly braces
    // inside the regular expression. The placeholder regexp breaks down as follows:
    //    ([:*])(\w+)               classic placeholder ($1 / $2)
    //    \{(\w+)(?:\:( ... ))?\}   curly brace placeholder ($3) with optional regexp ... ($4)
    //    (?: ... | ... | ... )+    the regexp consists of any number of atoms, an atom being either
    //    [^{}\\]+                  - anything other than curly braces or backslash
    //    \\.                       - a backslash escape
    //    \{(?:[^{}\\]+|\\.)*\}     - a matched set of curly braces containing other atoms
    var placeholder = /([:*])(\w+)|\{(\w+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      names = {}, compiled = '^', last = 0, m,
      segments = this.segments = [],
      params = this.params = [];

    function addParameter(id) {
      if (!/^\w+(-+\w+)*$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
      if (names[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
      names[id] = true;
      params.push(id);
    }

    function quoteRegExp(string) {
      return string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
    }

    this.source = pattern;

    // Split into static segments separated by path parameter placeholders.
    // The number of segments is always 1 more than the number of parameters.
    var id, regexp, segment;
    while ((m = placeholder.exec(pattern))) {
      id = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
      regexp = m[4] || (m[1] == '*' ? '.*' : '[^/]*');
      segment = pattern.substring(last, m.index);
      if (segment.indexOf('?') >= 0) break; // we're into the search part
      compiled += quoteRegExp(segment) + '(' + regexp + ')';
      addParameter(id);
      segments.push(segment);
      last = placeholder.lastIndex;
    }
    segment = pattern.substring(last);

    // Find any search parameter names and remove them from the last segment
    var i = segment.indexOf('?');
    if (i >= 0) {
      var search = this.sourceSearch = segment.substring(i);
      segment = segment.substring(0, i);
      this.sourcePath = pattern.substring(0, last+i);

      // Allow parameters to be separated by '?' as well as '&' to make concat() easier
      forEach(search.substring(1).split(/[&?]/), addParameter);
    } else {
      this.sourcePath = pattern;
      this.sourceSearch = '';
    }

    compiled += quoteRegExp(segment) + '$';
    segments.push(segment);
    this.regexp = new RegExp(compiled);
    this.prefix = segments[0];
  }

  /**
   * @ngdoc function
   * @name ui.router.util.type:UrlMatcher#concat
   * @methodOf ui.router.util.type:UrlMatcher
   *
   * @description
   * Returns a new matcher for a pattern constructed by appending the path part and adding the
   * search parameters of the specified pattern to this pattern. The current pattern is not
   * modified. This can be understood as creating a pattern for URLs that are relative to (or
   * suffixes of) the current pattern.
   *
   * @example
   * The following two matchers are equivalent:
   * ```
   * new UrlMatcher('/user/{id}?q').concat('/details?date');
   * new UrlMatcher('/user/{id}/details?q&date');
   * ```
   *
   * @param {string} pattern  The pattern to append.
   * @returns {ui.router.util.type:UrlMatcher}  A matcher for the concatenated pattern.
   */
  UrlMatcher.prototype.concat = function (pattern) {
    // Because order of search parameters is irrelevant, we can add our own search
    // parameters to the end of the new pattern. Parse the new pattern by itself
    // and then join the bits together, but it's much easier to do this on a string level.
    return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch);
  };

  UrlMatcher.prototype.toString = function () {
    return this.source;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.type:UrlMatcher#exec
   * @methodOf ui.router.util.type:UrlMatcher
   *
   * @description
   * Tests the specified path against this matcher, and returns an object containing the captured
   * parameter values, or null if the path does not match. The returned object contains the values
   * of any search parameters that are mentioned in the pattern, but their value may be null if
   * they are not present in `searchParams`. This means that search parameters are always treated
   * as optional.
   *
   * @example
   * ```
   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', { x:'1', q:'hello' });
   * // returns { id:'bob', q:'hello', r:null }
   * ```
   *
   * @param {string} path  The URL path to match, e.g. `$location.path()`.
   * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
   * @returns {Object}  The captured parameter values.
   */
  UrlMatcher.prototype.exec = function (path, searchParams) {
    var m = this.regexp.exec(path);
    if (!m) return null;

    var params = this.params, nTotal = params.length,
      nPath = this.segments.length-1,
      values = {}, i;

    if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

    for (i=0; i<nPath; i++) values[params[i]] = m[i+1];
    for (/**/; i<nTotal; i++) values[params[i]] = searchParams[params[i]];

    return values;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.type:UrlMatcher#parameters
   * @methodOf ui.router.util.type:UrlMatcher
   *
   * @description
   * Returns the names of all path and search parameters of this pattern in an unspecified order.
   *
   * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
   *    pattern has no parameters, an empty array is returned.
   */
  UrlMatcher.prototype.parameters = function () {
    return this.params;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.type:UrlMatcher#format
   * @methodOf ui.router.util.type:UrlMatcher
   *
   * @description
   * Creates a URL that matches this pattern by substituting the specified values
   * for the path and search parameters. Null values for path parameters are
   * treated as empty strings.
   *
   * @example
   * ```
   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
   * // returns '/user/bob?q=yes'
   * ```
   *
   * @param {Object} values  the values to substitute for the parameters in this pattern.
   * @returns {string}  the formatted URL (path and optionally search part).
   */
  UrlMatcher.prototype.format = function (values) {
    var segments = this.segments, params = this.params;
    if (!values) return segments.join('');

    var nPath = segments.length-1, nTotal = params.length,
      result = segments[0], i, search, value;

    for (i=0; i<nPath; i++) {
      value = values[params[i]];
      // TODO: Maybe we should throw on null here? It's not really good style to use '' and null interchangeabley
      if (value != null) result += encodeURIComponent(value);
      result += segments[i+1];
    }
    for (/**/; i<nTotal; i++) {
      value = values[params[i]];
      if (value != null) {
        result += (search ? '&' : '?') + params[i] + '=' + encodeURIComponent(value);
        search = true;
      }
    }

    return result;
  };



  /**
   * @ngdoc object
   * @name ui.router.util.$urlMatcherFactory
   *
   * @description
   * Factory for {@link ui.router.util.type:UrlMatcher} instances. The factory is also available to providers
   * under the name `$urlMatcherFactoryProvider`.
   */
  function $UrlMatcherFactory() {

    /**
     * @ngdoc function
     * @name ui.router.util.$urlMatcherFactory#compile
     * @methodOf ui.router.util.$urlMatcherFactory
     *
     * @description
     * Creates a {@link ui.router.util.type:UrlMatcher} for the specified pattern.
     *
     * @param {string} pattern  The URL pattern.
     * @returns {ui.router.util.type:UrlMatcher}  The UrlMatcher.
     */
    this.compile = function (pattern) {
      return new UrlMatcher(pattern);
    };

    /**
     * @ngdoc function
     * @name ui.router.util.$urlMatcherFactory#isMatcher
     * @methodOf ui.router.util.$urlMatcherFactory
     *
     * @description
     * Returns true if the specified object is a UrlMatcher, or false otherwise.
     *
     * @param {Object} object  The object to perform the type check against.
     * @returns {Boolean}  Returns `true` if the object has the following functions: `exec`, `format`, and `concat`.
     */
    this.isMatcher = function (o) {
      return isObject(o) && isFunction(o.exec) && isFunction(o.format) && isFunction(o.concat);
    };

    /* No need to document $get, since it returns this */
    this.$get = function () {
      return this;
    };
  }

// Register as a provider so it's available to other providers
  angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider
   *
   * @requires ui.router.util.$urlMatcherFactoryProvider
   *
   * @description
   * `$urlRouterProvider` has the responsibility of watching `$location`.
   * When `$location` changes it runs through a list of rules one by one until a
   * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify
   * a url in a state configuration. All urls are compiled into a UrlMatcher object.
   *
   * There are several methods on `$urlRouterProvider` that make it useful to use directly
   * in your module config.
   */
  $UrlRouterProvider.$inject = ['$urlMatcherFactoryProvider'];
  function $UrlRouterProvider(  $urlMatcherFactory) {
    var rules = [],
      otherwise = null;

    // Returns a string that is a prefix of all strings matching the RegExp
    function regExpPrefix(re) {
      var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
      return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
    }

    // Interpolates matched values into a String.replace()-style pattern
    function interpolate(pattern, match) {
      return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
        return match[what === '$' ? 0 : Number(what)];
      });
    }

    /**
     * @ngdoc function
     * @name ui.router.router.$urlRouterProvider#rule
     * @methodOf ui.router.router.$urlRouterProvider
     *
     * @description
     * Defines rules that are used by `$urlRouterProvider to find matches for
     * specific URLs.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router.router']);
     *
     * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
     * </pre>
     *
     * @param {object} rule Handler function that takes `$injector` and `$location`
     * services as arguments. You can use them to return a valid path as a string.
     *
     * @return {object} $urlRouterProvider - $urlRouterProvider instance
     */
    this.rule =
      function (rule) {
        if (!isFunction(rule)) throw new Error("'rule' must be a function");
        rules.push(rule);
        return this;
      };

    /**
     * @ngdoc object
     * @name ui.router.router.$urlRouterProvider#otherwise
     * @methodOf ui.router.router.$urlRouterProvider
     *
     * @description
     * Defines a path that is used when an invalied route is requested.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router.router']);
     *
     * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     ...
   *   });
   * });
     * </pre>
     *
     * @param {string|object} rule The url path you want to redirect to or a function
     * rule that returns the url path. The function version is passed two params:
     * `$injector` and `$location` services.
     *
     * @return {object} $urlRouterProvider - $urlRouterProvider instance
     */
    this.otherwise =
      function (rule) {
        if (isString(rule)) {
          var redirect = rule;
          rule = function () { return redirect; };
        }
        else if (!isFunction(rule)) throw new Error("'rule' must be a function");
        otherwise = rule;
        return this;
      };


    function handleIfMatch($injector, handler, match) {
      if (!match) return false;
      var result = $injector.invoke(handler, handler, { $match: match });
      return isDefined(result) ? result : true;
    }

    /**
     * @ngdoc function
     * @name ui.router.router.$urlRouterProvider#when
     * @methodOf ui.router.router.$urlRouterProvider
     *
     * @description
     * Registers a handler for a given url matching. if handle is a string, it is
     * treated as a redirect, and is interpolated according to the syyntax of match
     * (i.e. like String.replace() for RegExp, or like a UrlMatcher pattern otherwise).
     *
     * If the handler is a function, it is injectable. It gets invoked if `$location`
     * matches. You have the option of inject the match object as `$match`.
     *
     * The handler can return
     *
     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
     *   will continue trying to find another one that matches.
     * - **string** which is treated as a redirect and passed to `$location.url()`
     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router.router']);
     *
     * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
     * </pre>
     *
     * @param {string|object} what The incoming path that you want to redirect.
     * @param {string|object} handler The path you want to redirect your user to.
     */
    this.when =
      function (what, handler) {
        var redirect, handlerIsString = isString(handler);
        if (isString(what)) what = $urlMatcherFactory.compile(what);

        if (!handlerIsString && !isFunction(handler) && !isArray(handler))
          throw new Error("invalid 'handler' in when()");

        var strategies = {
          matcher: function (what, handler) {
            if (handlerIsString) {
              redirect = $urlMatcherFactory.compile(handler);
              handler = ['$match', function ($match) { return redirect.format($match); }];
            }
            return extend(function ($injector, $location) {
              return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
            }, {
              prefix: isString(what.prefix) ? what.prefix : ''
            });
          },
          regex: function (what, handler) {
            if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

            if (handlerIsString) {
              redirect = handler;
              handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
            }
            return extend(function ($injector, $location) {
              return handleIfMatch($injector, handler, what.exec($location.path()));
            }, {
              prefix: regExpPrefix(what)
            });
          }
        };

        var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

        for (var n in check) {
          if (check[n]) {
            return this.rule(strategies[n](what, handler));
          }
        }

        throw new Error("invalid 'what' in when()");
      };

    /**
     * @ngdoc object
     * @name ui.router.router.$urlRouter
     *
     * @requires $location
     * @requires $rootScope
     * @requires $injector
     *
     * @description
     *
     */
    this.$get =
      [        '$location', '$rootScope', '$injector',
        function ($location,   $rootScope,   $injector) {
          // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
          function update(evt) {
            if (evt && evt.defaultPrevented) return;
            function check(rule) {
              var handled = rule($injector, $location);
              if (handled) {
                if (isString(handled)) $location.replace().url(handled);
                return true;
              }
              return false;
            }
            var n=rules.length, i;
            for (i=0; i<n; i++) {
              if (check(rules[i])) return;
            }
            // always check otherwise last to allow dynamic updates to the set of rules
            if (otherwise) check(otherwise);
          }

          $rootScope.$on('$locationChangeSuccess', update);

          return {
            /**
             * @ngdoc function
             * @name ui.router.router.$urlRouter#sync
             * @methodOf ui.router.router.$urlRouter
             *
             * @description
             * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
             * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
             * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
             * with the transition by calling `$urlRouter.sync()`.
             *
             * @example
             * <pre>
             * angular.module('app', ['ui.router']);
             *   .run(function($rootScope, $urlRouter) {
         *     $rootScope.$on('$locationChangeSuccess', function(evt) {
         *       // Halt state change from even starting
         *       evt.preventDefault();
         *       // Perform custom logic
         *       var meetsRequirement = ...
         *       // Continue with the update and state transition if logic allows
         *       if (meetsRequirement) $urlRouter.sync();
         *     });
         * });
             * </pre>
             */
            sync: function () {
              update();
            }
          };
        }];
  }

  angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

  /**
   * @ngdoc object
   * @name ui.router.state.$stateProvider
   *
   * @requires ui.router.router.$urlRouterProvider
   * @requires ui.router.util.$urlMatcherFactoryProvider
   * @requires $locationProvider
   *
   * @description
   * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
   * on state.
   *
   * A state corresponds to a "place" in the application in terms of the overall UI and
   * navigation. A state describes (via the controller / template / view properties) what
   * the UI looks like and does at that place.
   *
   * States often have things in common, and the primary way of factoring out these
   * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
   * nested states.
   *
   * The `$stateProvider` provides interfaces to declare these states for your app.
   */
  $StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider', '$locationProvider'];
  function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory,           $locationProvider) {

    var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

    // Builds state properties from definition passed to registerState()
    var stateBuilder = {

      // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
      // state.children = [];
      // if (parent) parent.children.push(state);
      parent: function(state) {
        if (isDefined(state.parent) && state.parent) return findState(state.parent);
        // regex matches any valid composite state name
        // would match "contact.list" but not "contacts"
        var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
        return compositeName ? findState(compositeName[1]) : root;
      },

      // inherit 'data' from parent and override by own values (if any)
      data: function(state) {
        if (state.parent && state.parent.data) {
          state.data = state.self.data = extend({}, state.parent.data, state.data);
        }
        return state.data;
      },

      // Build a URLMatcher if necessary, either via a relative or absolute URL
      url: function(state) {
        var url = state.url;

        if (isString(url)) {
          if (url.charAt(0) == '^') {
            return $urlMatcherFactory.compile(url.substring(1));
          }
          return (state.parent.navigable || root).url.concat(url);
        }

        if ($urlMatcherFactory.isMatcher(url) || url == null) {
          return url;
        }
        throw new Error("Invalid url '" + url + "' in state '" + state + "'");
      },

      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
      navigable: function(state) {
        return state.url ? state : (state.parent ? state.parent.navigable : null);
      },

      // Derive parameters for this state and ensure they're a super-set of parent's parameters
      params: function(state) {
        if (!state.params) {
          return state.url ? state.url.parameters() : state.parent.params;
        }
        if (!isArray(state.params)) throw new Error("Invalid params in state '" + state + "'");
        if (state.url) throw new Error("Both params and url specicified in state '" + state + "'");
        return state.params;
      },

      // If there is no explicit multi-view configuration, make one up so we don't have
      // to handle both cases in the view directive later. Note that having an explicit
      // 'views' property will mean the default unnamed view properties are ignored. This
      // is also a good time to resolve view names to absolute names, so everything is a
      // straight lookup at link time.
      views: function(state) {
        var views = {};

        forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
          if (name.indexOf('@') < 0) name += '@' + state.parent.name;
          views[name] = view;
        });
        return views;
      },

      ownParams: function(state) {
        if (!state.parent) {
          return state.params;
        }
        var paramNames = {}; forEach(state.params, function (p) { paramNames[p] = true; });

        forEach(state.parent.params, function (p) {
          if (!paramNames[p]) {
            throw new Error("Missing required parameter '" + p + "' in state '" + state.name + "'");
          }
          paramNames[p] = false;
        });
        var ownParams = [];

        forEach(paramNames, function (own, p) {
          if (own) ownParams.push(p);
        });
        return ownParams;
      },

      // Keep a full path from the root down to this state as this is needed for state activation.
      path: function(state) {
        return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
      },

      // Speed up $state.contains() as it's used a lot
      includes: function(state) {
        var includes = state.parent ? extend({}, state.parent.includes) : {};
        includes[state.name] = true;
        return includes;
      },

      $delegates: {}
    };

    function isRelative(stateName) {
      return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
    }

    function findState(stateOrName, base) {
      var isStr = isString(stateOrName),
        name  = isStr ? stateOrName : stateOrName.name,
        path  = isRelative(name);

      if (path) {
        if (!base) throw new Error("No reference point given for path '"  + name + "'");
        var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

        for (; i < pathLength; i++) {
          if (rel[i] === "" && i === 0) {
            current = base;
            continue;
          }
          if (rel[i] === "^") {
            if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
            current = current.parent;
            continue;
          }
          break;
        }
        rel = rel.slice(i).join(".");
        name = current.name + (current.name && rel ? "." : "") + rel;
      }
      var state = states[name];

      if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
        return state;
      }
      return undefined;
    }

    function queueState(parentName, state) {
      if (!queue[parentName]) {
        queue[parentName] = [];
      }
      queue[parentName].push(state);
    }

    function registerState(state) {
      // Wrap a new object around the state so we can store our private details easily.
      state = inherit(state, {
        self: state,
        resolve: state.resolve || {},
        toString: function() { return this.name; }
      });

      var name = state.name;
      if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
      if (states.hasOwnProperty(name)) throw new Error("State '" + name + "'' is already defined");

      // Get parent name
      var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
        : (isString(state.parent)) ? state.parent
        : '';

      // If parent is not registered yet, add state to queue and register later
      if (parentName && !states[parentName]) {
        return queueState(parentName, state.self);
      }

      for (var key in stateBuilder) {
        if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
      }
      states[name] = state;

      // Register the state in the global state list and with $urlRouter if necessary.
      if (!state[abstractKey] && state.url) {
        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
          if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
            $state.transitionTo(state, $match, { location: false });
          }
        }]);
      }

      // Register any queued children
      if (queue[name]) {
        for (var i = 0; i < queue[name].length; i++) {
          registerState(queue[name][i]);
        }
      }

      return state;
    }

    // Checks text to see if it looks like a glob.
    function isGlob (text) {
      return text.indexOf('*') > -1;
    }

    // Returns true if glob matches current $state name.
    function doesStateMatchGlob (glob) {
      var globSegments = glob.split('.'),
        segments = $state.$current.name.split('.');

      //match greedy starts
      if (globSegments[0] === '**') {
        segments = segments.slice(segments.indexOf(globSegments[1]));
        segments.unshift('**');
      }
      //match greedy ends
      if (globSegments[globSegments.length - 1] === '**') {
        segments.splice(segments.indexOf(globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
        segments.push('**');
      }

      if (globSegments.length != segments.length) {
        return false;
      }

      //match single stars
      for (var i = 0, l = globSegments.length; i < l; i++) {
        if (globSegments[i] === '*') {
          segments[i] = '*';
        }
      }

      return segments.join('') === globSegments.join('');
    }


    // Implicit root state that is always active
    root = registerState({
      name: '',
      url: '^',
      views: null,
      'abstract': true
    });
    root.navigable = null;


    /**
     * @ngdoc function
     * @name ui.router.state.$stateProvider#decorator
     * @methodOf ui.router.state.$stateProvider
     *
     * @description
     * Allows you to extend (carefully) or override (at your own peril) the
     * `stateBuilder` object used internally by `$stateProvider`. This can be used
     * to add custom functionality to ui-router, for example inferring templateUrl
     * based on the state name.
     *
     * When passing only a name, it returns the current (original or decorated) builder
     * function that matches `name`.
     *
     * The builder functions that can be decorated are listed below. Though not all
     * necessarily have a good use case for decoration, that is up to you to decide.
     *
     * In addition, users can attach custom decorators, which will generate new
     * properties within the state's internal definition. There is currently no clear
     * use-case for this beyond accessing internal states (i.e. $state.$current),
     * however, expect this to become increasingly relevant as we introduce additional
     * meta-programming features.
     *
     * **Warning**: Decorators should not be interdependent because the order of
     * execution of the builder functions in non-deterministic. Builder functions
     * should only be dependent on the state definition object and super function.
     *
     *
     * Existing builder functions and current return values:
     *
     * - **parent** `{object}` - returns the parent state object.
     * - **data** `{object}` - returns state data, including any inherited data that is not
     *   overridden by own values (if any).
     * - **url** `{object}` - returns a {link ui.router.util.type:UrlMatcher} or null.
     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is
     *   navigable).
     * - **params** `{object}` - returns an array of state params that are ensured to
     *   be a super-set of parent's params.
     * - **views** `{object}` - returns a views object where each key is an absolute view
     *   name (i.e. "viewName@stateName") and each value is the config object
     *   (template, controller) for the view. Even when you don't use the views object
     *   explicitly on a state config, one is still created for you internally.
     *   So by decorating this builder function you have access to decorating template
     *   and controller properties.
     * - **ownParams** `{object}` - returns an array of params that belong to the state,
     *   not including any params defined by ancestor states.
     * - **path** `{string}` - returns the full path from the root down to this state.
     *   Needed for state activation.
     * - **includes** `{object}` - returns an object that includes every state that
     *   would pass a '$state.includes()' test.
     *
     * @example
     * <pre>
     * // Override the internal 'views' builder with a function that takes the state
     * // definition, and a reference to the internal function being overridden:
     * $stateProvider.decorator('views', function ($state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(view, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
     *
     * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
     *
     * // ...
     *
     * $state.go('home');
     * // Auto-populates list and item views with /partials/home/contact/list.html,
     * // and /partials/home/contact/item.html, respectively.
     * </pre>
     *
     * @param {string} name The name of the builder function to decorate.
     * @param {object} func A function that is responsible for decorating the original
     * builder function. The function receives two parameters:
     *
     *   - `{object}` - state - The state config object.
     *   - `{object}` - super - The original builder function.
     *
     * @return {object} $stateProvider - $stateProvider instance
     */
    this.decorator = decorator;
    function decorator(name, func) {
      /*jshint validthis: true */
      if (isString(name) && !isDefined(func)) {
        return stateBuilder[name];
      }
      if (!isFunction(func) || !isString(name)) {
        return this;
      }
      if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
        stateBuilder.$delegates[name] = stateBuilder[name];
      }
      stateBuilder[name] = func;
      return this;
    }

    /**
     * @ngdoc function
     * @name ui.router.state.$stateProvider#state
     * @methodOf ui.router.state.$stateProvider
     *
     * @description
     * Registers a state configuration under a given state name. The stateConfig object
     * has the following acceptable properties.
     *
     * <a id='template'></a>
     *
     * - **`template`** - {string|function=} - html template as a string or a function that returns
     *   an html template as a string which should be used by the uiView directives. This property
     *   takes precedence over templateUrl.
     *
     *   If `template` is a function, it will be called with the following parameters:
     *
     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
     *     applying the current state
     *
     * <a id='templateUrl'></a>
     *
     * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html
     *   template that should be used by uiView.
     *
     *   If `templateUrl` is a function, it will be called with the following parameters:
     *
     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
     *     applying the current state
     *
     * <a id='templateProvider'></a>
     *
     * - **`templateProvider`** - {function=} - Provider function that returns HTML content
     *   string.
     *
     * <a id='controller'></a>
     *
     * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly
     *   related scope or the name of a registered controller if passed as a string.
     *
     * <a id='controllerProvider'></a>
     *
     * - **`controllerProvider`** - {function=} - Injectable provider function that returns
     *   the actual controller or string.
     *
     * <a id='controllerAs'></a>
     *
     * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be
     *   published to scope under the controllerAs name.
     *
     * <a id='resolve'></a>
     *
     * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which
     *   should be injected into the controller. If any of these dependencies are promises,
     *   the router will wait for them all to be resolved or one to be rejected before the
     *   controller is instantiated. If all the promises are resolved successfully, the values
     *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any
     *   of the promises are rejected the $stateChangeError event is fired. The map object is:
     *
     *   - key - {string}: name of dependency to be injected into controller
     *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,
     *     it is injected and return value it treated as dependency. If result is a promise, it is
     *     resolved before its value is injected into controller.
     *
     * <a id='url'></a>
     *
     * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or
     *   transitioned to, the `$stateParams` service will be populated with any
     *   parameters that were passed.
     *
     * <a id='params'></a>
     *
     * - **`params`** - {object=} - An array of parameter names or regular expressions. Only
     *   use this within a state if you are not using url. Otherwise you can specify your
     *   parameters within the url. When a state is navigated or transitioned to, the
     *   $stateParams service will be populated with any parameters that were passed.
     *
     * <a id='views'></a>
     *
     * - **`views`** - {object=} - Use the views property to set up multiple views or to target views
     *   manually/explicitly.
     *
     * <a id='abstract'></a>
     *
     * - **`abstract`** - {boolean=} - An abstract state will never be directly activated,
     *   but can provide inherited properties to its common children states.
     *
     * <a id='onEnter'></a>
     *
     * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way
     *   to trigger an action or dispatch an event, such as opening a dialog.
     *
     * <a id='onExit'></a>
     *
     * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to
     *   trigger an action or dispatch an event, such as opening a dialog.
     *
     * <a id='reloadOnSearch'></a>
     *
     * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state
     *   just because a search/query parameter has changed (via $location.search() or $location.hash()).
     *   Useful for when you'd like to modify $location.search() without triggering a reload.
     *
     * <a id='data'></a>
     *
     * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.
     *
     * @example
     * <pre>
     * // Some state name examples
     *
     * // stateName can be a single top-level name (must be unique).
     * $stateProvider.state("home", {});
     *
     * // Or it can be a nested state name. This state is a child of the
     * // above "home" state.
     * $stateProvider.state("home.newest", {});
     *
     * // Nest states as deeply as needed.
     * $stateProvider.state("home.newest.abc.xyz.inception", {});
     *
     * // state() returns $stateProvider, so you can chain state declarations.
     * $stateProvider
     *   .state("home", {})
     *   .state("about", {})
     *   .state("contacts", {});
     * </pre>
     *
     * @param {string} name A unique state name, e.g. "home", "about", "contacts".
     * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
     * @param {object} definition State configuration object.
     */
    this.state = state;
    function state(name, definition) {
      /*jshint validthis: true */
      if (isObject(name)) definition = name;
      else definition.name = name;
      registerState(definition);
      return this;
    }

    /**
     * @ngdoc object
     * @name ui.router.state.$state
     *
     * @requires $rootScope
     * @requires $q
     * @requires ui.router.state.$view
     * @requires $injector
     * @requires ui.router.util.$resolve
     * @requires ui.router.state.$stateParams
     *
     * @property {object} params A param object, e.g. {sectionId: section.id)}, that
     * you'd like to test against the current active state.
     * @property {object} current A reference to the state's config object. However
     * you passed it in. Useful for accessing custom data.
     * @property {object} transition Currently pending transition. A promise that'll
     * resolve or reject.
     *
     * @description
     * `$state` service is responsible for representing states as well as transitioning
     * between them. It also provides interfaces to ask for current state or even states
     * you're coming from.
     */
      // $urlRouter is injected just to ensure it gets instantiated
    this.$get = $get;
    $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$location', '$urlRouter', '$browser'];
    function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $location,   $urlRouter,   $browser) {

      var TransitionSuperseded = $q.reject(new Error('transition superseded'));
      var TransitionPrevented = $q.reject(new Error('transition prevented'));
      var TransitionAborted = $q.reject(new Error('transition aborted'));
      var TransitionFailed = $q.reject(new Error('transition failed'));
      var currentLocation = $location.url();
      var baseHref = $browser.baseHref();

      function syncUrl() {
        if ($location.url() !== currentLocation) {
          $location.url(currentLocation);
          $location.replace();
        }
      }

      root.locals = { resolve: null, globals: { $stateParams: {} } };
      $state = {
        params: {},
        current: root.self,
        $current: root,
        transition: null
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#reload
       * @methodOf ui.router.state.$state
       *
       * @description
       * A method that force reloads the current state. All resolves are re-resolved, events are not re-fired,
       * and controllers reinstantiated (bug with controllers reinstantiating right now, fixing soon).
       *
       * @example
       * <pre>
       * var app angular.module('app', ['ui.router']);
       *
       * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
       * </pre>
       *
       * `reload()` is just an alias for:
       * <pre>
       * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: false 
     * });
       * </pre>
       */
      $state.reload = function reload() {
        $state.transitionTo($state.current, $stateParams, { reload: true, inherit: false, notify: false });
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#go
       * @methodOf ui.router.state.$state
       *
       * @description
       * Convenience method for transitioning to a new state. `$state.go` calls
       * `$state.transitionTo` internally but automatically sets options to
       * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.
       * This allows you to easily use an absolute or relative to path and specify
       * only the parameters you'd like to update (while letting unspecified parameters
       * inherit from the currently active ancestor states).
       *
       * @example
       * <pre>
       * var app = angular.module('app', ['ui.router']);
       *
       * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
       * </pre>
       * <img src='../ngdoc_assets/StateGoExamples.png'/>
       *
       * @param {string} to Absolute state name or relative state path. Some examples:
       *
       * - `$state.go('contact.detail')` - will go to the `contact.detail` state
       * - `$state.go('^')` - will go to a parent state
       * - `$state.go('^.sibling')` - will go to a sibling state
       * - `$state.go('.child.grandchild')` - will go to grandchild state
       *
       * @param {object=} params A map of the parameters that will be sent to the state,
       * will populate $stateParams. Any parameters that are not specified will be inherited from currently
       * defined parameters. This allows, for example, going to a sibling state that shares parameters
       * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
       * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
       * will get you all current parameters, etc.
       * @param {object=} options Options object. The options are:
       *
       * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
       *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
       * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
       * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
       *    defines which state to be relative from.
       * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
       * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
       *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
       *    use this when you want to force a reload when *everything* is the same, including search params.
       *
       * @returns {promise} A promise representing the state of the new transition.
       *
       * Possible success values:
       *
       * - $state.current
       *
       * <br/>Possible rejection values:
       *
       * - 'transition superseded' - when a newer transition has been started after this one
       * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
       * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
       *   when a `$stateNotFound` `event.retry` promise errors.
       * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
       * - *resolve error* - when an error has occurred with a `resolve`
       *
       */
      $state.go = function go(to, params, options) {
        return this.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#transitionTo
       * @methodOf ui.router.state.$state
       *
       * @description
       * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
       * uses `transitionTo` internally. `$state.go` is recommended in most situations.
       *
       * @example
       * <pre>
       * var app = angular.module('app', ['ui.router']);
       *
       * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
       * </pre>
       *
       * @param {string} to State name.
       * @param {object=} toParams A map of the parameters that will be sent to the state,
       * will populate $stateParams.
       * @param {object=} options Options object. The options are:
       *
       * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
       *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
       * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
       * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),
       *    defines which state to be relative from.
       * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
       * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
       *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
       *    use this when you want to force a reload when *everything* is the same, including search params.
       *
       * @returns {promise} A promise representing the state of the new transition. See
       * {@link ui.router.state.$state#methods_go $state.go}.
       */
      $state.transitionTo = function transitionTo(to, toParams, options) {
        toParams = toParams || {};
        options = extend({
          location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
        }, options || {});

        var from = $state.$current, fromParams = $state.params, fromPath = from.path;
        var evt, toState = findState(to, options.relative);

        if (!isDefined(toState)) {
          // Broadcast not found event and abort the transition if prevented
          var redirect = { to: to, toParams: toParams, options: options };

          /**
           * @ngdoc event
           * @name ui.router.state.$state#$stateNotFound
           * @eventOf ui.router.state.$state
           * @eventType broadcast on root scope
           * @description
           * Fired when a requested state **cannot be found** using the provided state name during transition.
           * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
           * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
           * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
           * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
           *
           * @param {Object} event Event object.
           * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
           * @param {State} fromState Current state object.
           * @param {Object} fromParams Current state params.
           *
           * @example
           *
           * <pre>
           * // somewhere, assume lazy.state has not been defined
           * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
           *
           * // somewhere else
           * $scope.$on('$stateNotFound',
           * function(event, unfoundState, fromState, fromParams){
         *     console.log(unfoundState.to); // "lazy.state"
         *     console.log(unfoundState.toParams); // {a:1, b:2}
         *     console.log(unfoundState.options); // {inherit:false} + default options
         * })
           * </pre>
           */
          evt = $rootScope.$broadcast('$stateNotFound', redirect, from.self, fromParams);
          if (evt.defaultPrevented) {
            syncUrl();
            return TransitionAborted;
          }

          // Allow the handler to return a promise to defer state lookup retry
          if (evt.retry) {
            if (options.$retry) {
              syncUrl();
              return TransitionFailed;
            }
            var retryTransition = $state.transition = $q.when(evt.retry);
            retryTransition.then(function() {
              if (retryTransition !== $state.transition) return TransitionSuperseded;
              redirect.options.$retry = true;
              return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
            }, function() {
              return TransitionAborted;
            });
            syncUrl();
            return retryTransition;
          }

          // Always retry once if the $stateNotFound was not prevented
          // (handles either redirect changed or state lazy-definition)
          to = redirect.to;
          toParams = redirect.toParams;
          options = redirect.options;
          toState = findState(to, options.relative);
          if (!isDefined(toState)) {
            if (options.relative) throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
            throw new Error("No such state '" + to + "'");
          }
        }
        if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
        if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
        to = toState;

        var toPath = to.path;

        // Starting from the root of the path, keep all levels that haven't changed
        var keep, state, locals = root.locals, toLocals = [];
        for (keep = 0, state = toPath[keep];
             state && state === fromPath[keep] && equalForKeys(toParams, fromParams, state.ownParams) && !options.reload;
             keep++, state = toPath[keep]) {
          locals = toLocals[keep] = state.locals;
        }

        // If we're going to the same state and all locals are kept, we've got nothing to do.
        // But clear 'transition', as we still want to cancel any other pending transitions.
        // TODO: We may not want to bump 'transition' if we're called from a location change that we've initiated ourselves,
        // because we might accidentally abort a legitimate transition initiated from code?
        if (shouldTriggerReload(to, from, locals, options) ) {
          if ( to.self.reloadOnSearch !== false )
            syncUrl();
          $state.transition = null;
          return $q.when($state.current);
        }

        // Normalize/filter parameters before we pass them to event handlers etc.
        toParams = normalize(to.params, toParams || {});

        // Broadcast start event and cancel the transition if requested
        if (options.notify) {
          /**
           * @ngdoc event
           * @name ui.router.state.$state#$stateChangeStart
           * @eventOf ui.router.state.$state
           * @eventType broadcast on root scope
           * @description
           * Fired when the state transition **begins**. You can use `event.preventDefault()`
           * to prevent the transition from happening and then the transition promise will be
           * rejected with a `'transition prevented'` value.
           *
           * @param {Object} event Event object.
           * @param {State} toState The state being transitioned to.
           * @param {Object} toParams The params supplied to the `toState`.
           * @param {State} fromState The current state, pre-transition.
           * @param {Object} fromParams The params supplied to the `fromState`.
           *
           * @example
           *
           * <pre>
           * $rootScope.$on('$stateChangeStart',
           * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
           * </pre>
           */
          evt = $rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams);
          if (evt.defaultPrevented) {
            syncUrl();
            return TransitionPrevented;
          }
        }

        // Resolve locals for the remaining states, but don't update any global state just
        // yet -- if anything fails to resolve the current state needs to remain untouched.
        // We also set up an inheritance chain for the locals here. This allows the view directive
        // to quickly look up the correct definition for each view in the current state. Even
        // though we create the locals object itself outside resolveState(), it is initially
        // empty and gets filled asynchronously. We need to keep track of the promise for the
        // (fully resolved) current locals, and pass this down the chain.
        var resolved = $q.when(locals);
        for (var l=keep; l<toPath.length; l++, state=toPath[l]) {
          locals = toLocals[l] = inherit(locals);
          resolved = resolveState(state, toParams, state===to, resolved, locals);
        }

        // Once everything is resolved, we are ready to perform the actual transition
        // and return a promise for the new state. We also keep track of what the
        // current promise is, so that we can detect overlapping transitions and
        // keep only the outcome of the last transition.
        var transition = $state.transition = resolved.then(function () {
          var l, entering, exiting;

          if ($state.transition !== transition) return TransitionSuperseded;

          // Exit 'from' states not kept
          for (l=fromPath.length-1; l>=keep; l--) {
            exiting = fromPath[l];
            if (exiting.self.onExit) {
              $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
            }
            exiting.locals = null;
          }

          // Enter 'to' states not kept
          for (l=keep; l<toPath.length; l++) {
            entering = toPath[l];
            entering.locals = toLocals[l];
            if (entering.self.onEnter) {
              $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
            }
          }

          // Run it again, to catch any transitions in callbacks
          if ($state.transition !== transition) return TransitionSuperseded;

          // Update globals in $state
          $state.$current = to;
          $state.current = to.self;
          $state.params = toParams;
          copy($state.params, $stateParams);
          $state.transition = null;

          // Update $location
          var toNav = to.navigable;
          if (options.location && toNav) {
            $location.url(toNav.url.format(toNav.locals.globals.$stateParams));

            if (options.location === 'replace') {
              $location.replace();
            }
          }

          if (options.notify) {
            /**
             * @ngdoc event
             * @name ui.router.state.$state#$stateChangeSuccess
             * @eventOf ui.router.state.$state
             * @eventType broadcast on root scope
             * @description
             * Fired once the state transition is **complete**.
             *
             * @param {Object} event Event object.
             * @param {State} toState The state being transitioned to.
             * @param {Object} toParams The params supplied to the `toState`.
             * @param {State} fromState The current state, pre-transition.
             * @param {Object} fromParams The params supplied to the `fromState`.
             */
            $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
          }
          currentLocation = $location.url();

          return $state.current;
        }, function (error) {
          if ($state.transition !== transition) return TransitionSuperseded;

          $state.transition = null;
          /**
           * @ngdoc event
           * @name ui.router.state.$state#$stateChangeError
           * @eventOf ui.router.state.$state
           * @eventType broadcast on root scope
           * @description
           * Fired when an **error occurs** during transition. It's important to note that if you
           * have any errors in your resolve functions (javascript errors, non-existent services, etc)
           * they will not throw traditionally. You must listen for this $stateChangeError event to
           * catch **ALL** errors.
           *
           * @param {Object} event Event object.
           * @param {State} toState The state being transitioned to.
           * @param {Object} toParams The params supplied to the `toState`.
           * @param {State} fromState The current state, pre-transition.
           * @param {Object} fromParams The params supplied to the `fromState`.
           * @param {Error} error The resolve error object.
           */
          $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);
          syncUrl();

          return $q.reject(error);
        });

        return transition;
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#is
       * @methodOf ui.router.state.$state
       *
       * @description
       * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
       * but only checks for the full state name. If params is supplied then it will be
       * tested for strict equality against the current active params object, so all params
       * must match with none missing and no extras.
       *
       * @example
       * <pre>
       * $state.is('contact.details.item'); // returns true
       * $state.is(contactDetailItemStateObject); // returns true
       *
       * // everything else would return false
       * </pre>
       *
       * @param {string|object} stateName The state name or state object you'd like to check.
       * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
       * to test against the current active state.
       * @returns {boolean} Returns true if it is the state.
       */
      $state.is = function is(stateOrName, params) {
        var state = findState(stateOrName);

        if (!isDefined(state)) {
          return undefined;
        }

        if ($state.$current !== state) {
          return false;
        }

        return isDefined(params) && params !== null ? angular.equals($stateParams, params) : true;
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#includes
       * @methodOf ui.router.state.$state
       *
       * @description
       * A method to determine if the current active state is equal to or is the child of the
       * state stateName. If any params are passed then they will be tested for a match as well.
       * Not all the parameters need to be passed, just the ones you'd like to test for equality.
       *
       * @example
       * <pre>
       * $state.$current.name = 'contacts.details.item';
       *
       * $state.includes("contacts"); // returns true
       * $state.includes("contacts.details"); // returns true
       * $state.includes("contacts.details.item"); // returns true
       * $state.includes("contacts.list"); // returns false
       * $state.includes("about"); // returns false
       * </pre>
       *
       * @description
       * Basic globing patterns will also work.
       *
       * @example
       * <pre>
       * $state.$current.name = 'contacts.details.item.url';
       *
       * $state.includes("*.details.*.*"); // returns true
       * $state.includes("*.details.**"); // returns true
       * $state.includes("**.item.**"); // returns true
       * $state.includes("*.details.item.url"); // returns true
       * $state.includes("*.details.*.url"); // returns true
       * $state.includes("*.details.*"); // returns false
       * $state.includes("item.**"); // returns false
       * </pre>
       *
       * @param {string} stateOrName A partial name to be searched for within the current state name.
       * @param {object} params A param object, e.g. `{sectionId: section.id}`,
       * that you'd like to test against the current active state.
       * @returns {boolean} Returns true if it does include the state
       */

      $state.includes = function includes(stateOrName, params) {
        if (isString(stateOrName) && isGlob(stateOrName)) {
          if (doesStateMatchGlob(stateOrName)) {
            stateOrName = $state.$current.name;
          } else {
            return false;
          }
        }

        var state = findState(stateOrName);
        if (!isDefined(state)) {
          return undefined;
        }

        if (!isDefined($state.$current.includes[state.name])) {
          return false;
        }

        var validParams = true;
        angular.forEach(params, function(value, key) {
          if (!isDefined($stateParams[key]) || $stateParams[key] !== value) {
            validParams = false;
          }
        });
        return validParams;
      };


      /**
       * @ngdoc function
       * @name ui.router.state.$state#href
       * @methodOf ui.router.state.$state
       *
       * @description
       * A url generation method that returns the compiled url for the given state populated with the given params.
       *
       * @example
       * <pre>
       * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
       * </pre>
       *
       * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
       * @param {object=} params An object of parameter values to fill the state's required parameters.
       * @param {object=} options Options object. The options are:
       *
       * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
       *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
       *    ancestor with a valid url).
       * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
       * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
       *    defines which state to be relative from.
       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
       *
       * @returns {string} compiled state url
       */
      $state.href = function href(stateOrName, params, options) {
        options = extend({ lossy: true, inherit: false, absolute: false, relative: $state.$current }, options || {});
        var state = findState(stateOrName, options.relative);
        if (!isDefined(state)) return null;

        params = inheritParams($stateParams, params || {}, $state.$current, state);
        var nav = (state && options.lossy) ? state.navigable : state;
        var url = (nav && nav.url) ? nav.url.format(normalize(state.params, params || {})) : null;
        if (!$locationProvider.html5Mode() && url) {
          url = "#" + $locationProvider.hashPrefix() + url;
        }

        if (baseHref !== '/') {
          if ($locationProvider.html5Mode()) {
            url = baseHref.slice(0, -1) + url;
          } else if (options.absolute){
            url = baseHref.slice(1) + url;
          }
        }

        if (options.absolute && url) {
          url = $location.protocol() + '://' +
            $location.host() +
            ($location.port() == 80 || $location.port() == 443 ? '' : ':' + $location.port()) +
            (!$locationProvider.html5Mode() && url ? '/' : '') +
            url;
        }
        return url;
      };

      /**
       * @ngdoc function
       * @name ui.router.state.$state#get
       * @methodOf ui.router.state.$state
       *
       * @description
       * Returns the state configuration object for any specific state or all states.
       *
       * @param {string|object=} stateOrName If provided, will only get the config for
       * the requested state. If not provided, returns an array of ALL state configs.
       * @returns {object|array} State configuration object or array of all objects.
       */
      $state.get = function (stateOrName, context) {
        if (!isDefined(stateOrName)) {
          var list = [];
          forEach(states, function(state) { list.push(state.self); });
          return list;
        }
        var state = findState(stateOrName, context);
        return (state && state.self) ? state.self : null;
      };

      function resolveState(state, params, paramsAreFiltered, inherited, dst) {
        // Make a restricted $stateParams with only the parameters that apply to this state if
        // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
        // we also need $stateParams to be available for any $injector calls we make during the
        // dependency resolution process.
        var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params, params);
        var locals = { $stateParams: $stateParams };

        // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
        // We're also including $stateParams in this; that way the parameters are restricted
        // to the set that should be visible to the state, and are independent of when we update
        // the global $state and $stateParams values.
        dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
        var promises = [ dst.resolve.then(function (globals) {
          dst.globals = globals;
        }) ];
        if (inherited) promises.push(inherited);

        // Resolve template and dependencies for all views.
        forEach(state.views, function (view, name) {
          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
          injectables.$template = [ function () {
            return $view.load(name, { view: view, locals: locals, params: $stateParams, notify: false }) || '';
          }];

          promises.push($resolve.resolve(injectables, locals, dst.resolve, state).then(function (result) {
            // References to the controller (only instantiated at link time)
            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
              var injectLocals = angular.extend({}, injectables, locals);
              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
            } else {
              result.$$controller = view.controller;
            }
            // Provide access to the state itself for internal use
            result.$$state = state;
            result.$$controllerAs = view.controllerAs;
            dst[name] = result;
          }));
        });

        // Wait for all the promises and then return the activation object
        return $q.all(promises).then(function (values) {
          return dst;
        });
      }

      return $state;
    }

    function shouldTriggerReload(to, from, locals, options) {
      if ( to === from && ((locals === from.locals && !options.reload) || (to.self.reloadOnSearch === false)) ) {
        return true;
      }
    }
  }

  angular.module('ui.router.state')
    .value('$stateParams', {})
    .provider('$state', $StateProvider);


  $ViewProvider.$inject = [];
  function $ViewProvider() {

    this.$get = $get;
    /**
     * @ngdoc object
     * @name ui.router.state.$view
     *
     * @requires ui.router.util.$templateFactory
     * @requires $rootScope
     *
     * @description
     *
     */
    $get.$inject = ['$rootScope', '$templateFactory'];
    function $get(   $rootScope,   $templateFactory) {
      return {
        // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
        /**
         * @ngdoc function
         * @name ui.router.state.$view#load
         * @methodOf ui.router.state.$view
         *
         * @description
         *
         * @param {string} name name
         * @param {object} options option object.
         */
        load: function load(name, options) {
          var result, defaults = {
            template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
          };
          options = extend(defaults, options);

          if (options.view) {
            result = $templateFactory.fromConfig(options.view, options.params, options.locals);
          }
          if (result && options.notify) {
            /**
             * @ngdoc event
             * @name ui.router.state.$state#$viewContentLoading
             * @eventOf ui.router.state.$view
             * @eventType broadcast on root scope
             * @description
             *
             * Fired once the view **begins loading**, *before* the DOM is rendered.
             *
             * @param {Object} event Event object.
             * @param {Object} viewConfig The view config properties (template, controller, etc).
             *
             * @example
             *
             * <pre>
             * $scope.$on('$viewContentLoading',
             * function(event, viewConfig){
         *     // Access to all the view config properties.
         *     // and one special property 'targetView'
         *     // viewConfig.targetView
         * });
             * </pre>
             */
            $rootScope.$broadcast('$viewContentLoading', options);
          }
          return result;
        }
      };
    }
  }

  angular.module('ui.router.state').provider('$view', $ViewProvider);

  /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
   */
  function $ViewScrollProvider() {

    var useAnchorScroll = false;

    /**
     * @ngdoc function
     * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
     * @methodOf ui.router.state.$uiViewScrollProvider
     *
     * @description
     * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
     * scrolling based on the url anchor.
     */
    this.useAnchorScroll = function () {
      useAnchorScroll = true;
    };

    /**
     * @ngdoc object
     * @name ui.router.state.$uiViewScroll
     *
     * @requires $anchorScroll
     * @requires $timeout
     *
     * @description
     * When called with a jqLite element, it scrolls the element into view (after a
     * `$timeout` so the DOM has time to refresh).
     *
     * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
     * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
     */
    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
      if (useAnchorScroll) {
        return $anchorScroll;
      }

      return function ($element) {
        $timeout(function () {
          $element[0].scrollIntoView();
        }, 0, false);
      };
    }];
  }

  angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

  /**
   * @ngdoc directive
   * @name ui.router.state.directive:ui-view
   *
   * @requires ui.router.state.$state
   * @requires $compile
   * @requires $controller
   * @requires $injector
   * @requires ui.router.state.$uiViewScroll
   * @requires $document
   *
   * @restrict ECA
   *
   * @description
   * The ui-view directive tells $state where to place your templates.
   *
   * @param {string=} ui-view A view name. The name should be unique amongst the other views in the
   * same state. You can have views of the same name that live in different states.
   *
   * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
   * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
   * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
   * scroll ui-view elements into view when they are populated during a state activation.
   *
   * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
   * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
   *
   * @param {string=} onload Expression to evaluate whenever the view updates.
   *
   * @example
   * A view can be unnamed or named.
   * <pre>
   * <!-- Unnamed -->
   * <div ui-view></div>
   *
   * <!-- Named -->
   * <div ui-view="viewName"></div>
   * </pre>
   *
   * You can only have one unnamed view within any template (or root html). If you are only using a
   * single view and it is unnamed then you can populate it like so:
   * <pre>
   * <div ui-view></div>
   * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
   * </pre>
   *
   * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
   * config property, by name, in this case an empty name:
   * <pre>
   * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
   * </pre>
   *
   * But typically you'll only use the views property if you name your view or have more than one view
   * in the same template. There's not really a compelling reason to name a view if its the only one,
   * but you could if you wanted, like so:
   * <pre>
   * <div ui-view="main"></div>
   * </pre>
   * <pre>
   * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
   * </pre>
   *
   * Really though, you'll use views to set up multiple views:
   * <pre>
   * <div ui-view></div>
   * <div ui-view="chart"></div>
   * <div ui-view="data"></div>
   * </pre>
   *
   * <pre>
   * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
   * </pre>
   *
   * Examples for `autoscroll`:
   *
   * <pre>
   * <!-- If autoscroll present with no expression,
   *      then scroll ui-view into view -->
   * <ui-view autoscroll/>
   *
   * <!-- If autoscroll present with valid expression,
   *      then scroll ui-view into view if expression evaluates to true -->
   * <ui-view autoscroll='true'/>
   * <ui-view autoscroll='false'/>
   * <ui-view autoscroll='scopeVariable'/>
   * </pre>
   */
  $ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll'];
  function $ViewDirective(   $state,   $injector,   $uiViewScroll) {

    function getService() {
      return ($injector.has) ? function(service) {
        return $injector.has(service) ? $injector.get(service) : null;
      } : function(service) {
        try {
          return $injector.get(service);
        } catch (e) {
          return null;
        }
      };
    }

    var service = getService(),
      $animator = service('$animator'),
      $animate = service('$animate');

    // Returns a set of DOM manipulation functions based on which Angular version
    // it should use
    function getRenderer(attrs, scope) {
      var statics = function() {
        return {
          enter: function (element, target, cb) { target.after(element); cb(); },
          leave: function (element, cb) { element.remove(); cb(); }
        };
      };

      if ($animate) {
        return {
          enter: function(element, target, cb) { $animate.enter(element, null, target, cb); },
          leave: function(element, cb) { $animate.leave(element, cb); }
        };
      }

      if ($animator) {
        var animate = $animator && $animator(scope, attrs);

        return {
          enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
          leave: function(element, cb) { animate.leave(element); cb(); }
        };
      }

      return statics();
    }

    var directive = {
      restrict: 'ECA',
      terminal: true,
      priority: 400,
      transclude: 'element',
      compile: function (tElement, tAttrs, $transclude) {
        return function (scope, $element, attrs) {
          var previousEl, currentEl, currentScope, latestLocals,
            onloadExp     = attrs.onload || '',
            autoScrollExp = attrs.autoscroll,
            renderer      = getRenderer(attrs, scope);

          scope.$on('$stateChangeSuccess', function() {
            updateView(false);
          });
          scope.$on('$viewContentLoading', function() {
            updateView(false);
          });

          updateView(true);

          function cleanupLastView() {
            if (previousEl) {
              previousEl.remove();
              previousEl = null;
            }

            if (currentScope) {
              currentScope.$destroy();
              currentScope = null;
            }

            if (currentEl) {
              renderer.leave(currentEl, function() {
                previousEl = null;
              });

              previousEl = currentEl;
              currentEl = null;
            }
          }

          function updateView(firstTime) {
            var newScope        = scope.$new(),
              name            = currentEl && currentEl.data('$uiViewName'),
              previousLocals  = name && $state.$current && $state.$current.locals[name];

            if (!firstTime && previousLocals === latestLocals) return; // nothing to do

            var clone = $transclude(newScope, function(clone) {
              renderer.enter(clone, $element, function onUiViewEnter() {
                if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                  $uiViewScroll(clone);
                }
              });
              cleanupLastView();
            });

            latestLocals = $state.$current.locals[clone.data('$uiViewName')];

            currentEl = clone;
            currentScope = newScope;
            /**
             * @ngdoc event
             * @name ui.router.state.directive:ui-view#$viewContentLoaded
             * @eventOf ui.router.state.directive:ui-view
             * @eventType emits on ui-view directive scope
             * @description           *
             * Fired once the view is **loaded**, *after* the DOM is rendered.
             *
             * @param {Object} event Event object.
             */
            currentScope.$emit('$viewContentLoaded');
            currentScope.$eval(onloadExp);
          }
        };
      }
    };

    return directive;
  }

  $ViewDirectiveFill.$inject = ['$compile', '$controller', '$state'];
  function $ViewDirectiveFill ($compile, $controller, $state) {
    return {
      restrict: 'ECA',
      priority: -400,
      compile: function (tElement) {
        var initial = tElement.html();
        return function (scope, $element, attrs) {
          var name      = attrs.uiView || attrs.name || '',
            inherited = $element.inheritedData('$uiView');

          if (name.indexOf('@') < 0) {
            name = name + '@' + (inherited ? inherited.state.name : '');
          }

          $element.data('$uiViewName', name);

          var current = $state.$current,
            locals  = current && current.locals[name];

          if (! locals) {
            return;
          }

          $element.data('$uiView', { name: name, state: locals.$$state });
          $element.html(locals.$template ? locals.$template : initial);

          var link = $compile($element.contents());

          if (locals.$$controller) {
            locals.$scope = scope;
            var controller = $controller(locals.$$controller, locals);
            if (locals.$$controllerAs) {
              scope[locals.$$controllerAs] = controller;
            }
            $element.data('$ngControllerController', controller);
            $element.children().data('$ngControllerController', controller);
          }

          link(scope);
        };
      }
    };
  }

  angular.module('ui.router.state').directive('uiView', $ViewDirective);
  angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

  function parseStateRef(ref) {
    var parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
    if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
    return { state: parsed[1], paramExpr: parsed[3] || null };
  }

  function stateContext(el) {
    var stateData = el.parent().inheritedData('$uiView');

    if (stateData && stateData.state && stateData.state.name) {
      return stateData.state;
    }
  }

  /**
   * @ngdoc directive
   * @name ui.router.state.directive:ui-sref
   *
   * @requires ui.router.state.$state
   * @requires $timeout
   *
   * @restrict A
   *
   * @description
   * A directive that binds a link (`<a>` tag) to a state. If the state has an associated
   * URL, the directive will automatically generate & update the `href` attribute via
   * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking
   * the link will trigger a state transition with optional parameters.
   *
   * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
   * handled natively by the browser.
   *
   * You can also use relative state paths within ui-sref, just like the relative
   * paths passed to `$state.go()`. You just need to be aware that the path is relative
   * to the state that the link lives in, in other words the state that loaded the
   * template containing the link.
   *
   * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
   * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
   * and `reload`.
   *
   * @example
   * Here's an example of how you'd use ui-sref and how it would compile. If you have the
   * following template:
   * <pre>
   * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a>
   *
   * <ul>
   *     <li ng-repeat="contact in contacts">
   *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
   *     </li>
   * </ul>
   * </pre>
   *
   * Then the compiled html would be (assuming Html5Mode is off):
   * <pre>
   * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a>
   *
   * <ul>
   *     <li ng-repeat="contact in contacts">
   *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
   *     </li>
   *     <li ng-repeat="contact in contacts">
   *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
   *     </li>
   *     <li ng-repeat="contact in contacts">
   *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
   *     </li>
   * </ul>
   *
   * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
   * </pre>
   *
   * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
   * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
   */
  $StateRefDirective.$inject = ['$state', '$timeout'];
  function $StateRefDirective($state, $timeout) {
    var allowedOptions = ['location', 'inherit', 'reload'];

    return {
      restrict: 'A',
      require: '?^uiSrefActive',
      link: function(scope, element, attrs, uiSrefActive) {
        var ref = parseStateRef(attrs.uiSref);
        var params = null, url = null, base = stateContext(element) || $state.$current;
        var isForm = element[0].nodeName === "FORM";
        var attr = isForm ? "action" : "href", nav = true;

        var options = {
          relative: base
        };
        var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};
        angular.forEach(allowedOptions, function(option) {
          if (option in optionsOverride) {
            options[option] = optionsOverride[option];
          }
        });

        var update = function(newVal) {
          if (newVal) params = newVal;
          if (!nav) return;

          var newHref = $state.href(ref.state, params, options);

          if (uiSrefActive) {
            uiSrefActive.$$setStateInfo(ref.state, params);
          }
          if (!newHref) {
            nav = false;
            return false;
          }
          element[0][attr] = newHref;
        };

        if (ref.paramExpr) {
          scope.$watch(ref.paramExpr, function(newVal, oldVal) {
            if (newVal !== params) update(newVal);
          }, true);
          params = scope.$eval(ref.paramExpr);
        }
        update();

        if (isForm) return;

        element.bind("click", function(e) {
          var button = e.which || e.button;
          if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {
            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
            $timeout(function() {
              $state.go(ref.state, params, options);
            });
            e.preventDefault();
          }
        });
      }
    };
  }

  /**
   * @ngdoc directive
   * @name ui.router.state.directive:ui-sref-active
   *
   * @requires ui.router.state.$state
   * @requires ui.router.state.$stateParams
   * @requires $interpolate
   *
   * @restrict A
   *
   * @description
   * A directive working alongside ui-sref to add classes to an element when the
   * related ui-sref directive's state is active, and removing them when it is inactive.
   * The primary use-case is to simplify the special appearance of navigation menus
   * relying on `ui-sref`, by having the "active" state's menu button appear different,
   * distinguishing it from the inactive menu items.
   *
   * @example
   * Given the following template:
   * <pre>
   * <ul>
   *   <li ui-sref-active="active" class="item">
   *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
   *   </li>
   * </ul>
   * </pre>
   *
   * When the app state is "app.user", and contains the state parameter "user" with value "bilbobaggins",
   * the resulting HTML will appear as (note the 'active' class):
   * <pre>
   * <ul>
   *   <li ui-sref-active="active" class="item active">
   *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
   *   </li>
   * </ul>
   * </pre>
   *
   * The class name is interpolated **once** during the directives link time (any further changes to the
   * interpolated value are ignored).
   *
   * Multiple classes may be specified in a space-separated format:
   * <pre>
   * <ul>
   *   <li ui-sref-active='class1 class2 class3'>
   *     <a ui-sref="app.user">link</a>
   *   </li>
   * </ul>
   * </pre>
   */
  $StateActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
  function $StateActiveDirective($state, $stateParams, $interpolate) {
    return {
      restrict: "A",
      controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {
        var state, params, activeClass;

        // There probably isn't much point in $observing this
        activeClass = $interpolate($attrs.uiSrefActive || '', false)($scope);

        // Allow uiSref to communicate with uiSrefActive
        this.$$setStateInfo = function(newState, newParams) {
          state = $state.get(newState, stateContext($element));
          params = newParams;
          update();
        };

        $scope.$on('$stateChangeSuccess', update);

        // Update route state
        function update() {
          if ($state.$current.self === state && matchesParams()) {
            $element.addClass(activeClass);
          } else {
            $element.removeClass(activeClass);
          }
        }

        function matchesParams() {
          return !params || equalForKeys(params, $stateParams);
        }
      }]
    };
  }

  angular.module('ui.router.state')
    .directive('uiSref', $StateRefDirective)
    .directive('uiSrefActive', $StateActiveDirective);

  /**
   * @ngdoc filter
   * @name ui.router.state.filter:isState
   *
   * @requires ui.router.state.$state
   *
   * @description
   * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
   */
  $IsStateFilter.$inject = ['$state'];
  function $IsStateFilter($state) {
    return function(state) {
      return $state.is(state);
    };
  }

  /**
   * @ngdoc filter
   * @name ui.router.state.filter:includedByState
   *
   * @requires ui.router.state.$state
   *
   * @description
   * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
   */
  $IncludedByStateFilter.$inject = ['$state'];
  function $IncludedByStateFilter($state) {
    return function(state) {
      return $state.includes(state);
    };
  }

  angular.module('ui.router.state')
    .filter('isState', $IsStateFilter)
    .filter('includedByState', $IncludedByStateFilter);

  /*
   * @ngdoc object
   * @name ui.router.compat.$routeProvider
   *
   * @requires ui.router.state.$stateProvider
   * @requires ui.router.router.$urlRouterProvider
   *
   * @description
   * `$routeProvider` of the `ui.router.compat` module overwrites the existing
   * `routeProvider` from the core. This is done to provide compatibility between
   * the UI Router and the core router.
   *
   * It also provides a `when()` method to register routes that map to certain urls.
   * Behind the scenes it actually delegates either to 
   * {@link ui.router.router.$urlRouterProvider $urlRouterProvider} or to the 
   * {@link ui.router.state.$stateProvider $stateProvider} to postprocess the given 
   * router definition object.
   */
  $RouteProvider.$inject = ['$stateProvider', '$urlRouterProvider'];
  function $RouteProvider(  $stateProvider,    $urlRouterProvider) {

    var routes = [];

    onEnterRoute.$inject = ['$$state'];
    function onEnterRoute(   $$state) {
      /*jshint validthis: true */
      this.locals = $$state.locals.globals;
      this.params = this.locals.$stateParams;
    }

    function onExitRoute() {
      /*jshint validthis: true */
      this.locals = null;
      this.params = null;
    }

    this.when = when;
    /*
     * @ngdoc function
     * @name ui.router.compat.$routeProvider#when
     * @methodOf ui.router.compat.$routeProvider
     *
     * @description
     * Registers a route with a given route definition object. The route definition
     * object has the same interface the angular core route definition object has.
     * 
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router.compat']);
     *
     * app.config(function ($routeProvider) {
     *   $routeProvider.when('home', {
     *     controller: function () { ... },
     *     templateUrl: 'path/to/template'
     *   });
     * });
     * </pre>
     *
     * @param {string} url URL as string
     * @param {object} route Route definition object
     *
     * @return {object} $routeProvider - $routeProvider instance
     */
    function when(url, route) {
      /*jshint validthis: true */
      if (route.redirectTo != null) {
        // Redirect, configure directly on $urlRouterProvider
        var redirect = route.redirectTo, handler;
        if (isString(redirect)) {
          handler = redirect; // leave $urlRouterProvider to handle
        } else if (isFunction(redirect)) {
          // Adapt to $urlRouterProvider API
          handler = function (params, $location) {
            return redirect(params, $location.path(), $location.search());
          };
        } else {
          throw new Error("Invalid 'redirectTo' in when()");
        }
        $urlRouterProvider.when(url, handler);
      } else {
        // Regular route, configure as state
        $stateProvider.state(inherit(route, {
          parent: null,
          name: 'route:' + encodeURIComponent(url),
          url: url,
          onEnter: onEnterRoute,
          onExit: onExitRoute
        }));
      }
      routes.push(route);
      return this;
    }

    /*
     * @ngdoc object
     * @name ui.router.compat.$route
     *
     * @requires ui.router.state.$state
     * @requires $rootScope
     * @requires $routeParams
     *
     * @property {object} routes - Array of registered routes.
     * @property {object} params - Current route params as object.
     * @property {string} current - Name of the current route.
     *
     * @description
     * The `$route` service provides interfaces to access defined routes. It also let's
     * you access route params through `$routeParams` service, so you have fully
     * control over all the stuff you would actually get from angular's core `$route`
     * service.
     */
    this.$get = $get;
    $get.$inject = ['$state', '$rootScope', '$routeParams'];
    function $get(   $state,   $rootScope,   $routeParams) {

      var $route = {
        routes: routes,
        params: $routeParams,
        current: undefined
      };

      function stateAsRoute(state) {
        return (state.name !== '') ? state : undefined;
      }

      $rootScope.$on('$stateChangeStart', function (ev, to, toParams, from, fromParams) {
        $rootScope.$broadcast('$routeChangeStart', stateAsRoute(to), stateAsRoute(from));
      });

      $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
        $route.current = stateAsRoute(to);
        $rootScope.$broadcast('$routeChangeSuccess', stateAsRoute(to), stateAsRoute(from));
        copy(toParams, $route.params);
      });

      $rootScope.$on('$stateChangeError', function (ev, to, toParams, from, fromParams, error) {
        $rootScope.$broadcast('$routeChangeError', stateAsRoute(to), stateAsRoute(from), error);
      });

      return $route;
    }
  }

  angular.module('ui.router.compat')
    .provider('$route', $RouteProvider)
    .directive('ngView', $ViewDirective);
})(window, window.angular);
/*!
 * ionic.bundle.js is a concatenation of:
 * ionic.js, angular.js, angular-animate.js,
 * angular-sanitize.js, angular-ui-router.js,
 * and ionic-angular.js
 */

/*!
 * Copyright 2014 Drifty Co.
 * http://drifty.com/
 *
 * Ionic, v1.0.0-beta.11
 * A powerful HTML5 mobile app framework.
 * http://ionicframework.com/
 *
 * By @maxlynch, @benjsperry, @adamdbradley <3
 *
 * Licensed under the MIT license. Please see LICENSE for more information.
 *
 */

(function() {
  /*
   * deprecated.js
   * https://github.com/wearefractal/deprecated/
   * Copyright (c) 2014 Fractal <contact@wearefractal.com>
   * License MIT
   */
//Interval object
  var deprecated = {
    method: function(msg, log, fn) {
      var called = false;
      return function deprecatedMethod(){
        if (!called) {
          called = true;
          log(msg);
        }
        return fn.apply(this, arguments);
      };
    },

    field: function(msg, log, parent, field, val) {
      var called = false;
      var getter = function(){
        if (!called) {
          called = true;
          log(msg);
        }
        return val;
      };
      var setter = function(v) {
        if (!called) {
          called = true;
          log(msg);
        }
        val = v;
        return v;
      };
      Object.defineProperty(parent, field, {
        get: getter,
        set: setter,
        enumerable: true
      });
      return;
    }
  };


  var IonicModule = angular.module('ionic', ['ngAnimate', 'ngSanitize', 'ui.router']),
    extend = angular.extend,
    forEach = angular.forEach,
    isDefined = angular.isDefined,
    isString = angular.isString,
    jqLite = angular.element;


  /**
   * @ngdoc service
   * @name $ionicActionSheet
   * @module ionic
   * @description
   * The Action Sheet is a slide-up pane that lets the user choose from a set of options.
   * Dangerous options are highlighted in red and made obvious.
   *
   * There are easy ways to cancel out of the action sheet, such as tapping the backdrop or even
   * hitting escape on the keyboard for desktop testing.
   *
   * ![Action Sheet](http://ionicframework.com.s3.amazonaws.com/docs/controllers/actionSheet.gif)
   *
   * @usage
   * To trigger an Action Sheet in your code, use the $ionicActionSheet service in your angular controllers:
   *
   * ```js
   * angular.module('mySuperApp', ['ionic'])
   * .controller(function($scope, $ionicActionSheet, $timeout) {
 *
 *  // Triggered on a button click, or some other target
 *  $scope.show = function() {
 *
 *    // Show the action sheet
 *    var hideSheet = $ionicActionSheet.show({
 *      buttons: [
 *        { text: '<b>Share</b> This' },
 *        { text: 'Move' }
 *      ],
 *      destructiveText: 'Delete',
 *      titleText: 'Modify your album',
 *      cancelText: 'Cancel',
 *      cancel: function() {
          // add cancel code..
        },
 *      buttonClicked: function(index) {
 *        return true;
 *      }
 *    });
 *
 *    // For example's sake, hide the sheet after two seconds
 *    $timeout(function() {
 *      hideSheet();
 *    }, 2000);
 *
 *  };
 * });
   * ```
   *
   */
  IonicModule
    .factory('$ionicActionSheet', [
      '$rootScope',
      '$document',
      '$compile',
      '$animate',
      '$timeout',
      '$ionicTemplateLoader',
      '$ionicPlatform',
      function($rootScope, $document, $compile, $animate, $timeout, $ionicTemplateLoader, $ionicPlatform) {

        return {
          show: actionSheet
        };

        /**
         * @ngdoc method
         * @name $ionicActionSheet#show
         * @description
         * Load and return a new action sheet.
         *
         * A new isolated scope will be created for the
         * action sheet and the new element will be appended into the body.
         *
         * @param {object} options The options for this ActionSheet. Properties:
         *
         *  - `[Object]` `buttons` Which buttons to show.  Each button is an object with a `text` field.
         *  - `{string}` `titleText` The title to show on the action sheet.
         *  - `{string=}` `cancelText` the text for a 'cancel' button on the action sheet.
         *  - `{string=}` `destructiveText` The text for a 'danger' on the action sheet.
         *  - `{function=}` `cancel` Called if the cancel button is pressed, the backdrop is tapped or
         *     the hardware back button is pressed.
         *  - `{function=}` `buttonClicked` Called when one of the non-destructive buttons is clicked,
         *     with the index of the button that was clicked and the button object. Return true to close
         *     the action sheet, or false to keep it opened.
         *  - `{function=}` `destructiveButtonClicked` Called when the destructive button is clicked.
         *     Return true to close the action sheet, or false to keep it opened.
         *  -  `{boolean=}` `cancelOnStateChange` Whether to cancel the actionSheet when navigating
         *     to a new state.  Default true.
         *
         * @returns {function} `hideSheet` A function which, when called, hides & cancels the action sheet.
         */
        function actionSheet(opts) {
          var scope = $rootScope.$new(true);

          angular.extend(scope, {
            cancel: angular.noop,
            destructiveButtonClicked: angular.noop,
            buttonClicked: angular.noop,
            $deregisterBackButton: angular.noop,
            buttons: [],
            cancelOnStateChange: true
          }, opts || {});


          // Compile the template
          var element = scope.element = $compile('<ion-action-sheet buttons="buttons"></ion-action-sheet>')(scope);

          // Grab the sheet element for animation
          var sheetEl = jqLite(element[0].querySelector('.action-sheet-wrapper'));

          var stateChangeListenDone = scope.cancelOnStateChange ?
            $rootScope.$on('$stateChangeSuccess', function() { scope.cancel(); }) :
            angular.noop;

          // removes the actionSheet from the screen
          scope.removeSheet = function(done) {
            if (scope.removed) return;

            scope.removed = true;
            sheetEl.removeClass('action-sheet-up');
            $document[0].body.classList.remove('action-sheet-open');
            scope.$deregisterBackButton();
            stateChangeListenDone();

            $animate.removeClass(element, 'active', function() {
              scope.$destroy();
              element.remove();
              // scope.cancel.$scope is defined near the bottom
              scope.cancel.$scope = null;
              (done || angular.noop)();
            });
          };

          scope.showSheet = function(done) {
            if (scope.removed) return;

            $document[0].body.appendChild(element[0]);
            $document[0].body.classList.add('action-sheet-open');

            $animate.addClass(element, 'active', function() {
              if (scope.removed) return;
              (done || angular.noop)();
            });
            $timeout(function(){
              if (scope.removed) return;
              sheetEl.addClass('action-sheet-up');
            }, 20, false);
          };

          // registerBackButtonAction returns a callback to deregister the action
          scope.$deregisterBackButton = $ionicPlatform.registerBackButtonAction(
            function() {
              $timeout(scope.cancel);
            },
            PLATFORM_BACK_BUTTON_PRIORITY_ACTION_SHEET
          );

          // called when the user presses the cancel button
          scope.cancel = function() {
            // after the animation is out, call the cancel callback
            scope.removeSheet(opts.cancel);
          };

          scope.buttonClicked = function(index) {
            // Check if the button click event returned true, which means
            // we can close the action sheet
            if (opts.buttonClicked(index, opts.buttons[index]) === true) {
              scope.removeSheet();
            }
          };

          scope.destructiveButtonClicked = function() {
            // Check if the destructive button click event returned true, which means
            // we can close the action sheet
            if (opts.destructiveButtonClicked() === true) {
              scope.removeSheet();
            }
          };

          scope.showSheet();

          // Expose the scope on $ionicActionSheet's return value for the sake
          // of testing it.
          scope.cancel.$scope = scope;

          return scope.cancel;
        }
      }]);


  jqLite.prototype.addClass = function(cssClasses) {
    var x, y, cssClass, el, splitClasses, existingClasses;
    if (cssClasses && cssClasses != 'ng-scope' && cssClasses != 'ng-isolate-scope') {
      for(x=0; x<this.length; x++) {
        el = this[x];
        if(el.setAttribute) {

          if(cssClasses.indexOf(' ') < 0) {
            el.classList.add(cssClasses);
          } else {
            existingClasses = (' ' + (el.getAttribute('class') || '') + ' ')
              .replace(/[\n\t]/g, " ");
            splitClasses = cssClasses.split(' ');

            for (y=0; y<splitClasses.length; y++) {
              cssClass = splitClasses[y].trim();
              if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
                existingClasses += cssClass + ' ';
              }
            }
            el.setAttribute('class', existingClasses.trim());
          }
        }
      }
    }
    return this;
  };

  jqLite.prototype.removeClass = function(cssClasses) {
    var x, y, splitClasses, cssClass, el;
    if (cssClasses) {
      for(x=0; x<this.length; x++) {
        el = this[x];
        if(el.getAttribute) {
          if(cssClasses.indexOf(' ') < 0) {
            el.classList.remove(cssClasses);
          } else {
            splitClasses = cssClasses.split(' ');

            for (y=0; y<splitClasses.length; y++) {
              cssClass = splitClasses[y];
              el.setAttribute('class', (
                  (" " + (el.getAttribute('class') || '') + " ")
                    .replace(/[\n\t]/g, " ")
                    .replace(" " + cssClass.trim() + " ", " ")).trim()
              );
            }
          }
        }
      }
    }
    return this;
  };

  /**
   * @ngdoc service
   * @name $ionicBackdrop
   * @module ionic
   * @description
   * Shows and hides a backdrop over the UI.  Appears behind popups, loading,
   * and other overlays.
   *
   * Often, multiple UI components require a backdrop, but only one backdrop is
   * ever needed in the DOM at a time.
   *
   * Therefore, each component that requires the backdrop to be shown calls
   * `$ionicBackdrop.retain()` when it wants the backdrop, then `$ionicBackdrop.release()`
   * when it is done with the backdrop.
   *
   * For each time `retain` is called, the backdrop will be shown until `release` is called.
   *
   * For example, if `retain` is called three times, the backdrop will be shown until `release`
   * is called three times.
   *
   * @usage
   *
   * ```js
   * function MyController($scope, $ionicBackdrop, $timeout) {
 *   //Show a backdrop for one second
 *   $scope.action = function() {
 *     $ionicBackdrop.retain();
 *     $timeout(function() {
 *       $ionicBackdrop.release();
 *     }, 1000);
 *   };
 * }
   * ```
   */
  IonicModule
    .factory('$ionicBackdrop', [
      '$document', '$timeout',
      function($document, $timeout) {

        var el = jqLite('<div class="backdrop">');
        var backdropHolds = 0;

        $document[0].body.appendChild(el[0]);

        return {
          /**
           * @ngdoc method
           * @name $ionicBackdrop#retain
           * @description Retains the backdrop.
           */
          retain: retain,
          /**
           * @ngdoc method
           * @name $ionicBackdrop#release
           * @description
           * Releases the backdrop.
           */
          release: release,

          getElement: getElement,

          // exposed for testing
          _element: el
        };

        function retain() {
          if ( (++backdropHolds) === 1 ) {
            el.addClass('visible');
            ionic.requestAnimationFrame(function() {
              backdropHolds && el.addClass('active');
            });
          }
        }
        function release() {
          if ( (--backdropHolds) === 0 ) {
            el.removeClass('active');
            $timeout(function() {
              !backdropHolds && el.removeClass('visible');
            }, 400, false);
          }
        }

        function getElement() {
          return el;
        }

      }]);

  /**
   * @private
   */
  IonicModule
    .factory('$ionicBind', ['$parse', '$interpolate', function($parse, $interpolate) {
      var LOCAL_REGEXP = /^\s*([@=&])(\??)\s*(\w*)\s*$/;
      return function(scope, attrs, bindDefinition) {
        forEach(bindDefinition || {}, function (definition, scopeName) {
          //Adapted from angular.js $compile
          var match = definition.match(LOCAL_REGEXP) || [],
            attrName = match[3] || scopeName,
            mode = match[1], // @, =, or &
            parentGet,
            unwatch;

          switch(mode) {
            case '@':
              if (!attrs[attrName]) {
                return;
              }
              attrs.$observe(attrName, function(value) {
                scope[scopeName] = value;
              });
              // we trigger an interpolation to ensure
              // the value is there for use immediately
              if (attrs[attrName]) {
                scope[scopeName] = $interpolate(attrs[attrName])(scope);
              }
              break;

            case '=':
              if (!attrs[attrName]) {
                return;
              }
              unwatch = scope.$watch(attrs[attrName], function(value) {
                scope[scopeName] = value;
              });
              //Destroy parent scope watcher when this scope is destroyed
              scope.$on('$destroy', unwatch);
              break;

            case '&':
              /* jshint -W044 */
              if (attrs[attrName] && attrs[attrName].match(RegExp(scopeName + '\(.*?\)'))) {
                throw new Error('& expression binding "' + scopeName + '" looks like it will recursively call "' +
                  attrs[attrName] + '" and cause a stack overflow! Please choose a different scopeName.');
              }
              parentGet = $parse(attrs[attrName]);
              scope[scopeName] = function(locals) {
                return parentGet(scope, locals);
              };
              break;
          }
        });
      };
    }]);

  IonicModule
    .factory('$collectionDataSource', [
      '$cacheFactory',
      '$parse',
      '$rootScope',
      function($cacheFactory, $parse, $rootScope) {
        function hideWithTransform(element) {
          element.css(ionic.CSS.TRANSFORM, 'translate3d(-2000px,-2000px,0)');
        }

        function CollectionRepeatDataSource(options) {
          var self = this;
          this.scope = options.scope;
          this.transcludeFn = options.transcludeFn;
          this.transcludeParent = options.transcludeParent;
          this.element = options.element;

          this.keyExpr = options.keyExpr;
          this.listExpr = options.listExpr;
          this.trackByExpr = options.trackByExpr;

          this.heightGetter = options.heightGetter;
          this.widthGetter = options.widthGetter;

          this.dimensions = [];
          this.data = [];

          if (this.trackByExpr) {
            var trackByGetter = $parse(this.trackByExpr);
            var hashFnLocals = {$id: hashKey};
            this.itemHashGetter = function(index, value) {
              hashFnLocals[self.keyExpr] = value;
              hashFnLocals.$index = index;
              return trackByGetter(self.scope, hashFnLocals);
            };
          } else {
            this.itemHashGetter = function(index, value) {
              return hashKey(value);
            };
          }

          this.attachedItems = {};
          this.BACKUP_ITEMS_LENGTH = 10;
          this.backupItemsArray = [];
        }
        CollectionRepeatDataSource.prototype = {
          setup: function() {
            for (var i = 0; i < this.BACKUP_ITEMS_LENGTH; i++) {
              this.detachItem(this.createItem());
            }
          },
          destroy: function() {
            this.dimensions.length = 0;
            this.data = null;
            this.backupItemsArray.length = 0;
            this.attachedItems = {};
          },
          calculateDataDimensions: function() {
            var locals = {};
            this.dimensions = this.data.map(function(value, index) {
              locals[this.keyExpr] = value;
              locals.$index = index;
              return {
                width: this.widthGetter(this.scope, locals),
                height: this.heightGetter(this.scope, locals)
              };
            }, this);
            this.dimensions = this.beforeSiblings.concat(this.dimensions).concat(this.afterSiblings);
            this.dataStartIndex = this.beforeSiblings.length;
          },
          createItem: function() {
            var item = {};
            item.scope = this.scope.$new();

            this.transcludeFn(item.scope, function(clone) {
              clone.css('position', 'absolute');
              item.element = clone;
            });

            this.transcludeParent.append(item.element);

            return item;
          },
          getItem: function(hash) {
            if ( (item = this.attachedItems[hash]) ) {
              //do nothing, the item is good
            } else if ( (item = this.backupItemsArray.pop()) ) {
              reconnectScope(item.scope);
            } else {
              item = this.createItem();
            }
            return item;
          },
          attachItemAtIndex: function(index) {
            var value = this.data[index];

            if (index < this.dataStartIndex) {
              return this.beforeSiblings[index];
            } else if (index > this.data.length) {
              return this.afterSiblings[index - this.data.length - this.dataStartIndex];
            }

            var hash = this.itemHashGetter(index, value);
            var item = this.getItem(hash);

            if (item.scope.$index !== index || item.scope[this.keyExpr] !== value) {
              item.scope[this.keyExpr] = value;
              item.scope.$index = index;
              item.scope.$first = (index === 0);
              item.scope.$last = (index === (this.getLength() - 1));
              item.scope.$middle = !(item.scope.$first || item.scope.$last);
              item.scope.$odd = !(item.scope.$even = (index&1) === 0);

              //We changed the scope, so digest if needed
              if (!$rootScope.$$phase) {
                item.scope.$digest();
              }
            }

            item.hash = hash;
            this.attachedItems[hash] = item;

            return item;
          },
          destroyItem: function(item) {
            item.element.remove();
            item.scope.$destroy();
            item.scope = null;
            item.element = null;
          },
          detachItem: function(item) {
            delete this.attachedItems[item.hash];

            //If it's an outside item, only hide it. These items aren't part of collection
            //repeat's list, only sit outside
            if (item.isOutside) {
              hideWithTransform(item.element);

              // If we are at the limit of backup items, just get rid of the this element
            } else if (this.backupItemsArray.length >= this.BACKUP_ITEMS_LENGTH) {
              this.destroyItem(item);
              // Otherwise, add it to our backup items
            } else {
              this.backupItemsArray.push(item);
              hideWithTransform(item.element);
              //Don't .$destroy(), just stop watchers and events firing
              disconnectScope(item.scope);
            }

          },
          getLength: function() {
            return this.dimensions && this.dimensions.length || 0;
          },
          setData: function(value, beforeSiblings, afterSiblings) {
            this.data = value || [];
            this.beforeSiblings = beforeSiblings || [];
            this.afterSiblings = afterSiblings || [];
            this.calculateDataDimensions();

            this.afterSiblings.forEach(function(item) {
              item.element.css({position: 'absolute', top: '0', left: '0' });
              hideWithTransform(item.element);
            });
          },
        };

        return CollectionRepeatDataSource;
      }]);

  /**
   * Computes a hash of an 'obj'.
   * Hash of a:
   *  string is string
   *  number is number as string
   *  object is either result of calling $$hashKey function on the object or uniquely generated id,
   *         that is also assigned to the $$hashKey property of the object.
   *
   * @param obj
   * @returns {string} hash string such that the same input will have the same hash string.
   *         The resulting string key is in 'type:hashKey' format.
   */
  function hashKey(obj) {
    var objType = typeof obj,
      key;

    if (objType == 'object' && obj !== null) {
      if (typeof (key = obj.$$hashKey) == 'function') {
        // must invoke on object to keep the right this
        key = obj.$$hashKey();
      } else if (key === undefined) {
        key = obj.$$hashKey = ionic.Utils.nextUid();
      }
    } else {
      key = obj;
    }

    return objType + ':' + key;
  }

  function disconnectScope(scope) {
    if (scope.$root === scope) {
      return; // we can't disconnect the root node;
    }
    var parent = scope.$parent;
    scope.$$disconnected = true;
    // See Scope.$destroy
    if (parent.$$childHead === scope) {
      parent.$$childHead = scope.$$nextSibling;
    }
    if (parent.$$childTail === scope) {
      parent.$$childTail = scope.$$prevSibling;
    }
    if (scope.$$prevSibling) {
      scope.$$prevSibling.$$nextSibling = scope.$$nextSibling;
    }
    if (scope.$$nextSibling) {
      scope.$$nextSibling.$$prevSibling = scope.$$prevSibling;
    }
    scope.$$nextSibling = scope.$$prevSibling = null;
  }

  function reconnectScope(scope) {
    if (scope.$root === scope) {
      return; // we can't disconnect the root node;
    }
    if (!scope.$$disconnected) {
      return;
    }
    var parent = scope.$parent;
    scope.$$disconnected = false;
    // See Scope.$new for this logic...
    scope.$$prevSibling = parent.$$childTail;
    if (parent.$$childHead) {
      parent.$$childTail.$$nextSibling = scope;
      parent.$$childTail = scope;
    } else {
      parent.$$childHead = parent.$$childTail = scope;
    }
  }


  IonicModule
    .factory('$collectionRepeatManager', [
      '$rootScope',
      '$timeout',
      function($rootScope, $timeout) {
        /**
         * Vocabulary: "primary" and "secondary" size/direction/position mean
         * "y" and "x" for vertical scrolling, or "x" and "y" for horizontal scrolling.
         */
        function CollectionRepeatManager(options) {
          var self = this;
          this.dataSource = options.dataSource;
          this.element = options.element;
          this.scrollView = options.scrollView;

          this.isVertical = !!this.scrollView.options.scrollingY;
          this.renderedItems = {};
          this.dimensions = [];
          this.setCurrentIndex(0);

          //Override scrollview's render callback
          this.scrollView.__$callback = this.scrollView.__callback;
          this.scrollView.__callback = angular.bind(this, this.renderScroll);

          function getViewportSize() { return self.viewportSize; }
          //Set getters and setters to match whether this scrollview is vertical or not
          if (this.isVertical) {
            this.scrollView.options.getContentHeight = getViewportSize;

            this.scrollValue = function() {
              return this.scrollView.__scrollTop;
            };
            this.scrollMaxValue = function() {
              return this.scrollView.__maxScrollTop;
            };
            this.scrollSize = function() {
              return this.scrollView.__clientHeight;
            };
            this.secondaryScrollSize = function() {
              return this.scrollView.__clientWidth;
            };
            this.transformString = function(y, x) {
              return 'translate3d('+x+'px,'+y+'px,0)';
            };
            this.primaryDimension = function(dim) {
              return dim.height;
            };
            this.secondaryDimension = function(dim) {
              return dim.width;
            };
          } else {
            this.scrollView.options.getContentWidth = getViewportSize;

            this.scrollValue = function() {
              return this.scrollView.__scrollLeft;
            };
            this.scrollMaxValue = function() {
              return this.scrollView.__maxScrollLeft;
            };
            this.scrollSize = function() {
              return this.scrollView.__clientWidth;
            };
            this.secondaryScrollSize = function() {
              return this.scrollView.__clientHeight;
            };
            this.transformString = function(x, y) {
              return 'translate3d('+x+'px,'+y+'px,0)';
            };
            this.primaryDimension = function(dim) {
              return dim.width;
            };
            this.secondaryDimension = function(dim) {
              return dim.height;
            };
          }
        }

        CollectionRepeatManager.prototype = {
          destroy: function() {
            this.renderedItems = {};
            this.render = angular.noop;
            this.calculateDimensions = angular.noop;
            this.dimensions = [];
          },

          /*
           * Pre-calculate the position of all items in the data list.
           * Do this using the provided width and height (primarySize and secondarySize)
           * provided by the dataSource.
           */
          calculateDimensions: function() {
            /*
             * For the sake of explanations below, we're going to pretend we are scrolling
             * vertically: Items are laid out with primarySize being height,
             * secondarySize being width.
             */
            var primaryPos = 0;
            var secondaryPos = 0;
            var secondaryScrollSize = this.secondaryScrollSize();
            var previousItem;

            this.dataSource.beforeSiblings && this.dataSource.beforeSiblings.forEach(calculateSize, this);
            var beforeSize = primaryPos + (previousItem ? previousItem.primarySize : 0);

            primaryPos = secondaryPos = 0;
            previousItem = null;


            var dimensions = this.dataSource.dimensions.map(calculateSize, this);
            var totalSize = primaryPos + (previousItem ? previousItem.primarySize : 0);

            return {
              beforeSize: beforeSize,
              totalSize: totalSize,
              dimensions: dimensions
            };

            function calculateSize(dim) {

              //Each dimension is an object {width: Number, height: Number} provided by
              //the dataSource
              var rect = {
                //Get the height out of the dimension object
                primarySize: this.primaryDimension(dim),
                //Max out the item's width to the width of the scrollview
                secondarySize: Math.min(this.secondaryDimension(dim), secondaryScrollSize)
              };

              //If this isn't the first item
              if (previousItem) {
                //Move the item's x position over by the width of the previous item
                secondaryPos += previousItem.secondarySize;
                //If the y position is the same as the previous item and
                //the x position is bigger than the scroller's width
                if (previousItem.primaryPos === primaryPos &&
                  secondaryPos + rect.secondarySize > secondaryScrollSize) {
                  //Then go to the next row, with x position 0
                  secondaryPos = 0;
                  primaryPos += previousItem.primarySize;
                }
              }

              rect.primaryPos = primaryPos;
              rect.secondaryPos = secondaryPos;

              previousItem = rect;
              return rect;
            }
          },
          resize: function() {
            var result = this.calculateDimensions();
            this.dimensions = result.dimensions;
            this.viewportSize = result.totalSize;
            this.beforeSize = result.beforeSize;
            this.setCurrentIndex(0);
            this.render(true);
            if (!this.dataSource.backupItemsArray.length) {
              this.dataSource.setup();
            }
          },
          /*
           * setCurrentIndex sets the index in the list that matches the scroller's position.
           * Also save the position in the scroller for next and previous items (if they exist)
           */
          setCurrentIndex: function(index, height) {
            var currentPos = (this.dimensions[index] || {}).primaryPos || 0;
            this.currentIndex = index;

            this.hasPrevIndex = index > 0;
            if (this.hasPrevIndex) {
              this.previousPos = Math.max(
                  currentPos - this.dimensions[index - 1].primarySize,
                this.dimensions[index - 1].primaryPos
              );
            }
            this.hasNextIndex = index + 1 < this.dataSource.getLength();
            if (this.hasNextIndex) {
              this.nextPos = Math.min(
                  currentPos + this.dimensions[index + 1].primarySize,
                this.dimensions[index + 1].primaryPos
              );
            }
          },
          /**
           * override the scroller's render callback to check if we need to
           * re-render our collection
           */
          renderScroll: ionic.animationFrameThrottle(function(transformLeft, transformTop, zoom, wasResize) {
            if (this.isVertical) {
              this.renderIfNeeded(transformTop);
            } else {
              this.renderIfNeeded(transformLeft);
            }
            return this.scrollView.__$callback(transformLeft, transformTop, zoom, wasResize);
          }),
          renderIfNeeded: function(scrollPos) {
            if ((this.hasNextIndex && scrollPos >= this.nextPos) ||
              (this.hasPrevIndex && scrollPos < this.previousPos)) {
              // Math.abs(transformPos - this.lastRenderScrollValue) > 100) {
              this.render();
            }
          },
          /*
           * getIndexForScrollValue: Given the most recent data index and a new scrollValue,
           * find the data index that matches that scrollValue.
           *
           * Strategy (if we are scrolling down): keep going forward in the dimensions list,
           * starting at the given index, until an item with height matching the new scrollValue
           * is found.
           *
           * This is a while loop. In the worst case it will have to go through the whole list
           * (eg to scroll from top to bottom).  The most common case is to scroll
           * down 1-3 items at a time.
           *
           * While this is not as efficient as it could be, optimizing it gives no noticeable
           * benefit.  We would have to use a new memory-intensive data structure for dimensions
           * to fully optimize it.
           */
          getIndexForScrollValue: function(i, scrollValue) {
            var rect;
            //Scrolling up
            if (scrollValue <= this.dimensions[i].primaryPos) {
              while ( (rect = this.dimensions[i - 1]) && rect.primaryPos > scrollValue) {
                i--;
              }
              //Scrolling down
            } else {
              while ( (rect = this.dimensions[i + 1]) && rect.primaryPos < scrollValue) {
                i++;
              }
            }
            return i;
          },
          /*
           * render: Figure out the scroll position, the index matching it, and then tell
           * the data source to render the correct items into the DOM.
           */
          render: function(shouldRedrawAll) {
            var self = this;
            var i;
            var isOutOfBounds = ( this.currentIndex >= this.dataSource.getLength() );
            // We want to remove all the items and redraw everything if we're out of bounds
            // or a flag is passed in.
            if (isOutOfBounds || shouldRedrawAll) {
              for (i in this.renderedItems) {
                this.removeItem(i);
              }
              // Just don't render anything if we're out of bounds
              if (isOutOfBounds) return;
            }

            var rect;
            var scrollValue = this.scrollValue();
            // Scroll size = how many pixels are visible in the scroller at one time
            var scrollSize = this.scrollSize();
            // We take the current scroll value and add it to the scrollSize to get
            // what scrollValue the current visible scroll area ends at.
            var scrollSizeEnd = scrollSize + scrollValue;
            // Get the new start index for scrolling, based on the current scrollValue and
            // the most recent known index
            var startIndex = this.getIndexForScrollValue(this.currentIndex, scrollValue);

            // If we aren't on the first item, add one row of items before so that when the user is
            // scrolling up he sees the previous item
            var renderStartIndex = Math.max(startIndex - 1, 0);
            // Keep adding items to the 'extra row above' until we get to a new row.
            // This is for the case where there are multiple items on one row above
            // the current item; we want to keep adding items above until
            // a new row is reached.
            while (renderStartIndex > 0 &&
              (rect = this.dimensions[renderStartIndex]) &&
              rect.primaryPos === this.dimensions[startIndex - 1].primaryPos) {
              renderStartIndex--;
            }

            // Keep rendering items, adding them until we are past the end of the visible scroll area
            i = renderStartIndex;
            while ((rect = this.dimensions[i]) && (rect.primaryPos - rect.primarySize < scrollSizeEnd)) {
              doRender(i++);
            }
            //Add two more items at the end
            doRender(i++);
            doRender(i);
            var renderEndIndex = i;

            // Remove any items that were rendered and aren't visible anymore
            for (i in this.renderedItems) {
              if (i < renderStartIndex || i > renderEndIndex) {
                this.removeItem(i);
              }
            }

            this.setCurrentIndex(startIndex);

            function doRender(dataIndex) {
              var rect = self.dimensions[dataIndex];
              if (!rect) {

              }else if (dataIndex < self.dataSource.dataStartIndex) {
                // do nothing
              } else {
                self.renderItem(dataIndex, rect.primaryPos - self.beforeSize, rect.secondaryPos);
              }
            }
          },
          renderItem: function(dataIndex, primaryPos, secondaryPos) {
            // Attach an item, and set its transform position to the required value
            var item = this.dataSource.attachItemAtIndex(dataIndex);
            if (item && item.element) {
              if (item.primaryPos !== primaryPos || item.secondaryPos !== secondaryPos) {
                item.element.css(ionic.CSS.TRANSFORM, this.transformString(
                  primaryPos, secondaryPos
                ));
                item.primaryPos = primaryPos;
                item.secondaryPos = secondaryPos;
              }
              // Save the item in rendered items
              this.renderedItems[dataIndex] = item;
            } else {
              // If an item at this index doesn't exist anymore, be sure to delete
              // it from rendered items
              delete this.renderedItems[dataIndex];
            }
          },
          removeItem: function(dataIndex) {
            // Detach a given item
            var item = this.renderedItems[dataIndex];
            if (item) {
              item.primaryPos = item.secondaryPos = null;
              this.dataSource.detachItem(item);
              delete this.renderedItems[dataIndex];
            }
          }
        };

        var exceptions = {'renderScroll':1, 'renderIfNeeded':1};
        forEach(CollectionRepeatManager.prototype, function(method, key) {
          if (exceptions[key]) return;
          CollectionRepeatManager.prototype[key] = function() {
            void 0;
            return method.apply(this, arguments);
          };
        });

        return CollectionRepeatManager;
      }]);


  function delegateService(methodNames) {
    return ['$log', function($log) {
      var delegate = this;

      var instances = this._instances = [];
      this._registerInstance = function(instance, handle) {
        instance.$$delegateHandle = handle;
        instances.push(instance);

        return function deregister() {
          var index = instances.indexOf(instance);
          if (index !== -1) {
            instances.splice(index, 1);
          }
        };
      };

      this.$getByHandle = function(handle) {
        if (!handle) {
          return delegate;
        }
        return new InstanceForHandle(handle);
      };

      /*
       * Creates a new object that will have all the methodNames given,
       * and call them on the given the controller instance matching given
       * handle.
       * The reason we don't just let $getByHandle return the controller instance
       * itself is that the controller instance might not exist yet.
       *
       * We want people to be able to do
       * `var instance = $ionicScrollDelegate.$getByHandle('foo')` on controller
       * instantiation, but on controller instantiation a child directive
       * may not have been compiled yet!
       *
       * So this is our way of solving this problem: we create an object
       * that will only try to fetch the controller with given handle
       * once the methods are actually called.
       */
      function InstanceForHandle(handle) {
        this.handle = handle;
      }
      methodNames.forEach(function(methodName) {
        InstanceForHandle.prototype[methodName] = function() {
          var handle = this.handle;
          var args = arguments;
          var matchingInstancesFound = 0;
          var finalResult;
          var result;

          //This logic is repeated below; we could factor some of it out to a function
          //but don't because it lets this method be more performant (one loop versus 2)
          instances.forEach(function(instance) {
            if (instance.$$delegateHandle === handle) {
              matchingInstancesFound++;
              result = instance[methodName].apply(instance, args);
              //Only return the value from the first call
              if (matchingInstancesFound === 1) {
                finalResult = result;
              }
            }
          });

          if (!matchingInstancesFound) {
            return $log.warn(
                'Delegate for handle "'+this.handle+'" could not find a ' +
                'corresponding element with delegate-handle="'+this.handle+'"! ' +
                methodName + '() was not called!\n' +
                'Possible cause: If you are calling ' + methodName + '() immediately, and ' +
                'your element with delegate-handle="' + this.handle + '" is a child of your ' +
                'controller, then your element may not be compiled yet. Put a $timeout ' +
                'around your call to ' + methodName + '() and try again.'
            );
          }

          return finalResult;
        };
        delegate[methodName] = function() {
          var args = arguments;
          var finalResult;
          var result;

          //This logic is repeated above
          instances.forEach(function(instance, index) {
            result = instance[methodName].apply(instance, args);
            //Only return the value from the first call
            if (index === 0) {
              finalResult = result;
            }
          });

          return finalResult;
        };

        function callMethod(instancesToUse, methodName, args) {
          var finalResult;
          var result;
          instancesToUse.forEach(function(instance, index) {
            result = instance[methodName].apply(instance, args);
            //Make it so the first result is the one returned
            if (index === 0) {
              finalResult = result;
            }
          });
          return finalResult;
        }
      });
    }];
  }

  /**
   * @ngdoc service
   * @name $ionicGesture
   * @module ionic
   * @description An angular service exposing ionic
   * {@link ionic.utility:ionic.EventController}'s gestures.
   */
  IonicModule
    .factory('$ionicGesture', [function() {
      return {
        /**
         * @ngdoc method
         * @name $ionicGesture#on
         * @description Add an event listener for a gesture on an element. See {@link ionic.utility:ionic.EventController#onGesture}.
         * @param {string} eventType The gesture event to listen for.
         * @param {function(e)} callback The function to call when the gesture
         * happens.
         * @param {element} $element The angular element to listen for the event on.
         * @returns {ionic.Gesture} The gesture object (use this to remove the gesture later on).
         */
        on: function(eventType, cb, $element) {
          return window.ionic.onGesture(eventType, cb, $element[0]);
        },
        /**
         * @ngdoc method
         * @name $ionicGesture#off
         * @description Remove an event listener for a gesture on an element. See {@link ionic.utility:ionic.EventController#offGesture}.
         * @param {ionic.Gesture} gesture The gesture that should be removed.
         * @param {string} eventType The gesture event to remove the listener for.
         * @param {function(e)} callback The listener to remove.
         */
        off: function(gesture, eventType, cb) {
          return window.ionic.offGesture(gesture, eventType, cb);
        }
      };
    }]);


  var LOADING_TPL =
    '<div class="loading-container">' +
    '<div class="loading">' +
    '</div>' +
    '</div>';

  var LOADING_HIDE_DEPRECATED = '$ionicLoading instance.hide() has been deprecated. Use $ionicLoading.hide().';
  var LOADING_SHOW_DEPRECATED = '$ionicLoading instance.show() has been deprecated. Use $ionicLoading.show().';
  var LOADING_SET_DEPRECATED = '$ionicLoading instance.setContent() has been deprecated. Use $ionicLoading.show({ template: \'my content\' }).';

  /**
   * @ngdoc service
   * @name $ionicLoading
   * @module ionic
   * @description
   * An overlay that can be used to indicate activity while blocking user
   * interaction.
   *
   * @usage
   * ```js
   * angular.module('LoadingApp', ['ionic'])
   * .controller('LoadingCtrl', function($scope, $ionicLoading) {
 *   $scope.show = function() {
 *     $ionicLoading.show({
 *       template: 'Loading...'
 *     });
 *   };
 *   $scope.hide = function(){
 *     $ionicLoading.hide();
 *   };
 * });
   * ```
   */
  /**
   * @ngdoc object
   * @name $ionicLoadingConfig
   * @module ionic
   * @description
   * Set the default options to be passed to the {@link ionic.service:$ionicLoading} service.
   *
   * @usage
   * ```js
   * var app = angular.module('myApp', ['ionic'])
   * app.constant('$ionicLoadingConfig', {
 *   template: 'Default Loading Template...'
 * });
   * app.controller('AppCtrl', function($scope, $ionicLoading) {
 *   $scope.showLoading = function() {
 *     $ionicLoading.show(); //options default to values in $ionicLoadingConfig
 *   };
 * });
   * ```
   */
  IonicModule
    .constant('$ionicLoadingConfig', {
      template: '<i class="ion-loading-d"></i>'
    })
    .factory('$ionicLoading', [
      '$ionicLoadingConfig',
      '$document',
      '$ionicTemplateLoader',
      '$ionicBackdrop',
      '$timeout',
      '$q',
      '$log',
      '$compile',
      '$ionicPlatform',
      function($ionicLoadingConfig, $document, $ionicTemplateLoader, $ionicBackdrop, $timeout, $q, $log, $compile, $ionicPlatform) {

        var loaderInstance;
        //default values
        var deregisterBackAction = angular.noop;
        var loadingShowDelay = $q.when();

        return {
          /**
           * @ngdoc method
           * @name $ionicLoading#show
           * @description Shows a loading indicator. If the indicator is already shown,
           * it will set the options given and keep the indicator shown.
           * @param {object} opts The options for the loading indicator. Available properties:
           *  - `{string=}` `template` The html content of the indicator.
           *  - `{string=}` `templateUrl` The url of an html template to load as the content of the indicator.
           *  - `{boolean=}` `noBackdrop` Whether to hide the backdrop. By default it will be shown.
           *  - `{number=}` `delay` How many milliseconds to delay showing the indicator. By default there is no delay.
           *  - `{number=}` `duration` How many milliseconds to wait until automatically
           *  hiding the indicator. By default, the indicator will be shown until `.hide()` is called.
           */
          show: showLoader,
          /**
           * @ngdoc method
           * @name $ionicLoading#hide
           * @description Hides the loading indicator, if shown.
           */
          hide: hideLoader,
          /**
           * @private for testing
           */
          _getLoader: getLoader
        };

        function getLoader() {
          if (!loaderInstance) {
            loaderInstance = $ionicTemplateLoader.compile({
              template: LOADING_TPL,
              appendTo: $document[0].body
            })
              .then(function(loader) {
                var self = loader;

                loader.show = function(options) {
                  var templatePromise = options.templateUrl ?
                    $ionicTemplateLoader.load(options.templateUrl) :
                    //options.content: deprecated
                    $q.when(options.template || options.content || '');


                  if (!this.isShown) {
                    //options.showBackdrop: deprecated
                    this.hasBackdrop = !options.noBackdrop && options.showBackdrop !== false;
                    if (this.hasBackdrop) {
                      $ionicBackdrop.retain();
                      $ionicBackdrop.getElement().addClass('backdrop-loading');
                    }
                  }

                  if (options.duration) {
                    $timeout.cancel(this.durationTimeout);
                    this.durationTimeout = $timeout(
                      angular.bind(this, this.hide),
                      +options.duration
                    );
                  }

                  templatePromise.then(function(html) {
                    if (html) {
                      var loading = self.element.children();
                      loading.html(html);
                      $compile(loading.contents())(self.scope);
                    }

                    //Don't show until template changes
                    if (self.isShown) {
                      self.element.addClass('visible');
                      ionic.requestAnimationFrame(function() {
                        self.isShown && self.element.addClass('active');
                        $document[0].body.classList.add('loading-active');
                      });
                    }
                  });

                  this.isShown = true;
                };
                loader.hide = function() {
                  if (this.isShown) {
                    if (this.hasBackdrop) {
                      $ionicBackdrop.release();
                      $ionicBackdrop.getElement().removeClass('backdrop-loading');
                    }
                    self.element.removeClass('active');
                    $document[0].body.classList.remove('loading-active');
                    setTimeout(function() {
                      !self.isShown && self.element.removeClass('visible');
                    }, 200);
                  }
                  $timeout.cancel(this.durationTimeout);
                  this.isShown = false;
                };

                return loader;
              });
          }
          return loaderInstance;
        }

        function showLoader(options) {
          options = extend($ionicLoadingConfig || {}, options || {});
          var delay = options.delay || options.showDelay || 0;

          //If loading.show() was called previously, cancel it and show with our new options
          loadingShowDelay && $timeout.cancel(loadingShowDelay);
          loadingShowDelay = $timeout(angular.noop, delay);

          loadingShowDelay.then(getLoader).then(function(loader) {
            deregisterBackAction();
            //Disable hardware back button while loading
            deregisterBackAction = $ionicPlatform.registerBackButtonAction(
              angular.noop,
              PLATFORM_BACK_BUTTON_PRIORITY_LOADING
            );
            return loader.show(options);
          });

          return {
            hide: deprecated.method(LOADING_HIDE_DEPRECATED, $log.error, hideLoader),
            show: deprecated.method(LOADING_SHOW_DEPRECATED, $log.error, function() {
              showLoader(options);
            }),
            setContent: deprecated.method(LOADING_SET_DEPRECATED, $log.error, function(content) {
              getLoader().then(function(loader) {
                loader.show({ template: content });
              });
            })
          };
        }

        function hideLoader() {
          deregisterBackAction();
          $timeout.cancel(loadingShowDelay);
          getLoader().then(function(loader) {
            loader.hide();
          });
        }
      }]);

  /**
   * @ngdoc service
   * @name $ionicModal
   * @module ionic
   * @description
   *
   * Related: {@link ionic.controller:ionicModal ionicModal controller}.
   *
   * The Modal is a content pane that can go over the user's main view
   * temporarily.  Usually used for making a choice or editing an item.
   *
   * Put the content of the modal inside of an `<ion-modal-view>` element.
   *
   * Note: a modal will broadcast 'modal.shown', 'modal.hidden', and 'modal.removed' events from its originating
   * scope, passing in itself as an event argument. Both the modal.removed and modal.hidden events are
   * called when the modal is removed.
   *
   * @usage
   * ```html
   * <script id="my-modal.html" type="text/ng-template">
   *   <ion-modal-view>
   *     <ion-header-bar>
   *       <h1 class="title">My Modal title</h1>
   *     </ion-header-bar>
   *     <ion-content>
   *       Hello!
   *     </ion-content>
   *   </ion-modal-view>
   * </script>
   * ```
   * ```js
   * angular.module('testApp', ['ionic'])
   * .controller('MyController', function($scope, $ionicModal) {
 *   $ionicModal.fromTemplateUrl('my-modal.html', {
 *     scope: $scope,
 *     animation: 'slide-in-up'
 *   }).then(function(modal) {
 *     $scope.modal = modal;
 *   });
 *   $scope.openModal = function() {
 *     $scope.modal.show();
 *   };
 *   $scope.closeModal = function() {
 *     $scope.modal.hide();
 *   };
 *   //Cleanup the modal when we're done with it!
 *   $scope.$on('$destroy', function() {
 *     $scope.modal.remove();
 *   });
 *   // Execute action on hide modal
 *   $scope.$on('modal.hidden', function() {
 *     // Execute action
 *   });
 *   // Execute action on remove modal
 *   $scope.$on('modal.removed', function() {
 *     // Execute action
 *   });
 * });
   * ```
   */
  IonicModule
    .factory('$ionicModal', [
      '$rootScope',
      '$document',
      '$compile',
      '$timeout',
      '$ionicPlatform',
      '$ionicTemplateLoader',
      '$q',
      '$log',
      function($rootScope, $document, $compile, $timeout, $ionicPlatform, $ionicTemplateLoader, $q, $log) {

        /**
         * @ngdoc controller
         * @name ionicModal
         * @module ionic
         * @description
         * Instantiated by the {@link ionic.service:$ionicModal} service.
         *
         * Be sure to call [remove()](#remove) when you are done with each modal
         * to clean it up and avoid memory leaks.
         *
         * Note: a modal will broadcast 'modal.shown', 'modal.hidden', and 'modal.removed' events from its originating
         * scope, passing in itself as an event argument. Note: both modal.removed and modal.hidden are
         * called when the modal is removed.
         */
        var ModalView = ionic.views.Modal.inherit({
          /**
           * @ngdoc method
           * @name ionicModal#initialize
           * @description Creates a new modal controller instance.
           * @param {object} options An options object with the following properties:
           *  - `{object=}` `scope` The scope to be a child of.
           *    Default: creates a child of $rootScope.
           *  - `{string=}` `animation` The animation to show & hide with.
           *    Default: 'slide-in-up'
           *  - `{boolean=}` `focusFirstInput` Whether to autofocus the first input of
           *    the modal when shown.  Default: false.
           *  - `{boolean=}` `backdropClickToClose` Whether to close the modal on clicking the backdrop.
           *    Default: true.
           *  - `{boolean=}` `hardwareBackButtonClose` Whether the modal can be closed using the hardware
           *    back button on Android and similar devices.  Default: true.
           */
          initialize: function(opts) {
            ionic.views.Modal.prototype.initialize.call(this, opts);
            this.animation = opts.animation || 'slide-in-up';
          },

          /**
           * @ngdoc method
           * @name ionicModal#show
           * @description Show this modal instance.
           * @returns {promise} A promise which is resolved when the modal is finished animating in.
           */
          show: function(target) {
            var self = this;

            if(self.scope.$$destroyed) {
              $log.error('Cannot call ' +  self.viewType + '.show() after remove(). Please create a new ' +  self.viewType + ' instance.');
              return;
            }

            var modalEl = jqLite(self.modalEl);

            self.el.classList.remove('hide');
            $timeout(function(){
              $document[0].body.classList.add(self.viewType + '-open');
            }, 400);

            if(!self.el.parentElement) {
              modalEl.addClass(self.animation);
              $document[0].body.appendChild(self.el);
            }

            if(target && self.positionView) {
              self.positionView(target, modalEl);
            }

            modalEl.addClass('ng-enter active')
              .removeClass('ng-leave ng-leave-active');

            self._isShown = true;
            self._deregisterBackButton = $ionicPlatform.registerBackButtonAction(
              self.hardwareBackButtonClose ? angular.bind(self, self.hide) : angular.noop,
              PLATFORM_BACK_BUTTON_PRIORITY_MODAL
            );

            self._isOpenPromise = $q.defer();

            ionic.views.Modal.prototype.show.call(self);

            $timeout(function(){
              modalEl.addClass('ng-enter-active');
              ionic.trigger('resize');
              self.scope.$parent && self.scope.$parent.$broadcast(self.viewType + '.shown', self);
              self.el.classList.add('active');
            }, 20);

            return $timeout(function() {
              //After animating in, allow hide on backdrop click
              self.$el.on('click', function(e) {
                if (self.backdropClickToClose && e.target === self.el) {
                  self.hide();
                }
              });
            }, 400);
          },

          /**
           * @ngdoc method
           * @name ionicModal#hide
           * @description Hide this modal instance.
           * @returns {promise} A promise which is resolved when the modal is finished animating out.
           */
          hide: function() {
            var self = this;
            var modalEl = jqLite(self.modalEl);

            self.el.classList.remove('active');
            modalEl.addClass('ng-leave');

            $timeout(function(){
              modalEl.addClass('ng-leave-active')
                .removeClass('ng-enter ng-enter-active active');
            }, 20);

            self.$el.off('click');
            self._isShown = false;
            self.scope.$parent && self.scope.$parent.$broadcast(self.viewType + '.hidden', self);
            self._deregisterBackButton && self._deregisterBackButton();

            ionic.views.Modal.prototype.hide.call(self);

            return $timeout(function(){
              $document[0].body.classList.remove(self.viewType + '-open');
              self.el.classList.add('hide');
            }, self.hideDelay || 500);
          },

          /**
           * @ngdoc method
           * @name ionicModal#remove
           * @description Remove this modal instance from the DOM and clean up.
           * @returns {promise} A promise which is resolved when the modal is finished animating out.
           */
          remove: function() {
            var self = this;
            self.scope.$parent && self.scope.$parent.$broadcast(self.viewType + '.removed', self);

            return self.hide().then(function() {
              self.scope.$destroy();
              self.$el.remove();
            });
          },

          /**
           * @ngdoc method
           * @name ionicModal#isShown
           * @returns boolean Whether this modal is currently shown.
           */
          isShown: function() {
            return !!this._isShown;
          }
        });

        var createModal = function(templateString, options) {
          // Create a new scope for the modal
          var scope = options.scope && options.scope.$new() || $rootScope.$new(true);

          options.viewType = options.viewType || 'modal';

          extend(scope, {
            $hasHeader: false,
            $hasSubheader: false,
            $hasFooter: false,
            $hasSubfooter: false,
            $hasTabs: false,
            $hasTabsTop: false
          });

          // Compile the template
          var element = $compile('<ion-' + options.viewType + '>' + templateString + '</ion-' + options.viewType + '>')(scope);

          options.$el = element;
          options.el = element[0];
          options.modalEl = options.el.querySelector('.' + options.viewType);
          var modal = new ModalView(options);

          modal.scope = scope;

          // If this wasn't a defined scope, we can assign the viewType to the isolated scope
          // we created
          if(!options.scope) {
            scope[ options.viewType ] = modal;
          }

          return modal;
        };

        return {
          /**
           * @ngdoc method
           * @name $ionicModal#fromTemplate
           * @param {string} templateString The template string to use as the modal's
           * content.
           * @param {object} options Options to be passed {@link ionic.controller:ionicModal#initialize ionicModal#initialize} method.
           * @returns {object} An instance of an {@link ionic.controller:ionicModal}
           * controller.
           */
          fromTemplate: function(templateString, options) {
            var modal = createModal(templateString, options || {});
            return modal;
          },
          /**
           * @ngdoc method
           * @name $ionicModal#fromTemplateUrl
           * @param {string} templateUrl The url to load the template from.
           * @param {object} options Options to be passed {@link ionic.controller:ionicModal#initialize ionicModal#initialize} method.
           * options object.
           * @returns {promise} A promise that will be resolved with an instance of
           * an {@link ionic.controller:ionicModal} controller.
           */
          fromTemplateUrl: function(url, options, _) {
            var cb;
            //Deprecated: allow a callback as second parameter. Now we return a promise.
            if (angular.isFunction(options)) {
              cb = options;
              options = _;
            }
            return $ionicTemplateLoader.load(url).then(function(templateString) {
              var modal = createModal(templateString, options || {});
              cb && cb(modal);
              return modal;
            });
          }
        };
      }]);


  /**
   * @ngdoc service
   * @name $ionicNavBarDelegate
   * @module ionic
   * @description
   * Delegate for controlling the {@link ionic.directive:ionNavBar} directive.
   *
   * @usage
   *
   * ```html
   * <body ng-controller="MyCtrl">
   *   <ion-nav-bar>
   *     <button ng-click="setNavTitle('banana')">
   *       Set title to banana!
   *     </button>
   *   </ion-nav-bar>
   * </body>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicNavBarDelegate) {
 *   $scope.setNavTitle = function(title) {
 *     $ionicNavBarDelegate.setTitle(title);
 *   }
 * }
   * ```
   */
  IonicModule
    .service('$ionicNavBarDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#back
     * @description Goes back in the view history.
     * @param {DOMEvent=} event The event object (eg from a tap event)
     */
      'back',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#align
     * @description Aligns the title with the buttons in a given direction.
     * @param {string=} direction The direction to the align the title text towards.
     * Available: 'left', 'right', 'center'. Default: 'center'.
     */
      'align',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#showBackButton
     * @description
     * Set/get whether the {@link ionic.directive:ionNavBackButton} is shown
     * (if it exists).
     * @param {boolean=} show Whether to show the back button.
     * @returns {boolean} Whether the back button is shown.
     */
      'showBackButton',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#showBar
     * @description
     * Set/get whether the {@link ionic.directive:ionNavBar} is shown.
     * @param {boolean} show Whether to show the bar.
     * @returns {boolean} Whether the bar is shown.
     */
      'showBar',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#setTitle
     * @description
     * Set the title for the {@link ionic.directive:ionNavBar}.
     * @param {string} title The new title to show.
     */
      'setTitle',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#changeTitle
     * @description
     * Change the title, transitioning the new title in and the old one out in a given direction.
     * @param {string} title The new title to show.
     * @param {string} direction The direction to transition the new title in.
     * Available: 'forward', 'back'.
     */
      'changeTitle',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#getTitle
     * @returns {string} The current title of the navbar.
     */
      'getTitle',
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#getPreviousTitle
     * @returns {string} The previous title of the navbar.
     */
      'getPreviousTitle'
    /**
     * @ngdoc method
     * @name $ionicNavBarDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * navBars with delegate-handle matching the given handle.
     *
     * Example: `$ionicNavBarDelegate.$getByHandle('myHandle').setTitle('newTitle')`
     */
    ]));

  var PLATFORM_BACK_BUTTON_PRIORITY_VIEW = 100;
  var PLATFORM_BACK_BUTTON_PRIORITY_SIDE_MENU = 150;
  var PLATFORM_BACK_BUTTON_PRIORITY_MODAL = 200;
  var PLATFORM_BACK_BUTTON_PRIORITY_ACTION_SHEET = 300;
  var PLATFORM_BACK_BUTTON_PRIORITY_POPUP = 400;
  var PLATFORM_BACK_BUTTON_PRIORITY_LOADING = 500;

  function componentConfig(defaults) {
    defaults.$get = function() { return defaults; };
    return defaults;
  }

  IonicModule
    .constant('$ionicPlatformDefaults', {
      'ios': {
        '$ionicNavBarConfig': {
          transition: 'nav-title-slide-ios7',
          alignTitle: 'center',
          backButtonIcon: 'ion-ios7-arrow-back'
        },
        '$ionicNavViewConfig': {
          transition: 'slide-left-right-ios7'
        },
        '$ionicTabsConfig': {
          type: '',
          position: ''
        }
      },
      'android': {
        '$ionicNavBarConfig': {
          transition: 'nav-title-slide-ios7',
          alignTitle: 'center',
          backButtonIcon: 'ion-ios7-arrow-back'
        },
        '$ionicNavViewConfig': {
          transition: 'slide-left-right-ios7'
        },
        '$ionicTabsConfig': {
          type: 'tabs-striped',
          position: ''
        }
      }
    });


  IonicModule.config([
    '$ionicPlatformDefaults',

    '$injector',

    function($ionicPlatformDefaults, $injector) {
      var platform = ionic.Platform.platform();

      var applyConfig = function(platformDefaults) {
        forEach(platformDefaults, function(defaults, constantName) {
          extend($injector.get(constantName), defaults);
        });
      };

      switch(platform) {
        case 'ios':
          applyConfig($ionicPlatformDefaults.ios);
          break;
        case 'android':
          applyConfig($ionicPlatformDefaults.android);
          break;
      }
    }]);

  /**
   * @ngdoc service
   * @name $ionicPlatform
   * @module ionic
   * @description
   * An angular abstraction of {@link ionic.utility:ionic.Platform}.
   *
   * Used to detect the current platform, as well as do things like override the
   * Android back button in PhoneGap/Cordova.
   */
  IonicModule
    .provider('$ionicPlatform', function() {
      return {
        $get: ['$q', '$rootScope', function($q, $rootScope) {
          var self = {

            /**
             * @ngdoc method
             * @name $ionicPlatform#onHardwareBackButton
             * @description
             * Some platforms have a hardware back button, so this is one way to
             * bind to it.
             * @param {function} callback the callback to trigger when this event occurs
             */
            onHardwareBackButton: function(cb) {
              ionic.Platform.ready(function() {
                document.addEventListener('backbutton', cb, false);
              });
            },

            /**
             * @ngdoc method
             * @name $ionicPlatform#offHardwareBackButton
             * @description
             * Remove an event listener for the backbutton.
             * @param {function} callback The listener function that was
             * originally bound.
             */
            offHardwareBackButton: function(fn) {
              ionic.Platform.ready(function() {
                document.removeEventListener('backbutton', fn);
              });
            },

            /**
             * @ngdoc method
             * @name $ionicPlatform#registerBackButtonAction
             * @description
             * Register a hardware back button action. Only one action will execute
             * when the back button is clicked, so this method decides which of
             * the registered back button actions has the highest priority.
             *
             * For example, if an actionsheet is showing, the back button should
             * close the actionsheet, but it should not also go back a page view
             * or close a modal which may be open.
             *
             * @param {function} callback Called when the back button is pressed,
             * if this listener is the highest priority.
             * @param {number} priority Only the highest priority will execute.
             * @param {*=} actionId The id to assign this action. Default: a
             * random unique id.
             * @returns {function} A function that, when called, will deregister
             * this backButtonAction.
             */
            $backButtonActions: {},
            registerBackButtonAction: function(fn, priority, actionId) {

              if(!self._hasBackButtonHandler) {
                // add a back button listener if one hasn't been setup yet
                self.$backButtonActions = {};
                self.onHardwareBackButton(self.hardwareBackButtonClick);
                self._hasBackButtonHandler = true;
              }

              var action = {
                id: (actionId ? actionId : ionic.Utils.nextUid()),
                priority: (priority ? priority : 0),
                fn: fn
              };
              self.$backButtonActions[action.id] = action;

              // return a function to de-register this back button action
              return function() {
                delete self.$backButtonActions[action.id];
              };
            },

            /**
             * @private
             */
            hardwareBackButtonClick: function(e){
              // loop through all the registered back button actions
              // and only run the last one of the highest priority
              var priorityAction, actionId;
              for(actionId in self.$backButtonActions) {
                if(!priorityAction || self.$backButtonActions[actionId].priority >= priorityAction.priority) {
                  priorityAction = self.$backButtonActions[actionId];
                }
              }
              if(priorityAction) {
                priorityAction.fn(e);
                return priorityAction;
              }
            },

            is: function(type) {
              return ionic.Platform.is(type);
            },

            /**
             * @ngdoc method
             * @name $ionicPlatform#ready
             * @description
             * Trigger a callback once the device is ready,
             * or immediately if the device is already ready.
             * @param {function=} callback The function to call.
             * @returns {promise} A promise which is resolved when the device is ready.
             */
            ready: function(cb) {
              var q = $q.defer();

              ionic.Platform.ready(function(){
                q.resolve();
                cb && cb();
              });

              return q.promise;
            }
          };
          return self;
        }]
      };

    });


  /**
   * @ngdoc service
   * @name $ionicPopover
   * @module ionic
   * @description
   *
   * Related: {@link ionic.controller:ionicPopover ionicPopover controller}.
   *
   * The Popover is a view that floats above an app’s content. Popovers provide an
   * easy way to present or gather information from the user and are
   * commonly used in the following situations:
   *
   * - Show more info about the current view
   * - Select a commonly used tool or configuration
   * - Present a list of actions to perform inside one of your views
   *
   * Put the content of the popover inside of an `<ion-popover-view>` element.
   *
   * @usage
   * ```html
   * <p>
   *   <button ng-click="openPopover($event)">Open Popover</button>
   * </p>
   *
   * <script id="my-popover.html" type="text/ng-template">
   *   <ion-popover-view>
   *     <ion-header-bar>
   *       <h1 class="title">My Popover Title</h1>
   *     </ion-header-bar>
   *     <ion-content>
   *       Hello!
   *     </ion-content>
   *   </ion-popover-view>
   * </script>
   * ```
   * ```js
   * angular.module('testApp', ['ionic'])
   * .controller('MyController', function($scope, $ionicPopover) {
 *   $ionicPopover.fromTemplateUrl('my-popover.html', {
 *     scope: $scope,
 *   }).then(function(popover) {
 *     $scope.popover = popover;
 *   });
 *   $scope.openPopover = function($event) {
 *     $scope.popover.show($event);
 *   };
 *   $scope.closePopover = function() {
 *     $scope.popover.hide();
 *   };
 *   //Cleanup the popover when we're done with it!
 *   $scope.$on('$destroy', function() {
 *     $scope.popover.remove();
 *   });
 *   // Execute action on hide popover
 *   $scope.$on('popover.hidden', function() {
 *     // Execute action
 *   });
 *   // Execute action on remove popover
 *   $scope.$on('popover.removed', function() {
 *     // Execute action
 *   });
 * });
   * ```
   */


  IonicModule
    .factory('$ionicPopover', ['$ionicModal', '$ionicPosition', '$document',
      function($ionicModal, $ionicPosition, $document) {

        var POPOVER_BODY_PADDING = 6;

        var POPOVER_OPTIONS = {
          viewType: 'popover',
          hideDelay: 1,
          animation: 'none',
          positionView: positionView
        };

        function positionView(target, popoverEle) {
          var targetEle = angular.element(target.target || target);
          var buttonOffset = $ionicPosition.offset( targetEle );
          var popoverWidth = popoverEle.prop('offsetWidth');
          var bodyWidth = $document[0].body.clientWidth;
          var bodyHeight = $document[0].body.clientHeight;

          var popoverCSS = {
            top: buttonOffset.top + buttonOffset.height,
            left: buttonOffset.left + buttonOffset.width / 2 - popoverWidth / 2
          };

          if(popoverCSS.left < POPOVER_BODY_PADDING) {
            popoverCSS.left = POPOVER_BODY_PADDING;
          } else if(popoverCSS.left + popoverWidth + POPOVER_BODY_PADDING > bodyWidth) {
            popoverCSS.left = bodyWidth - popoverWidth - POPOVER_BODY_PADDING;
          }

          var arrowEle = popoverEle[0].querySelector('.popover-arrow');
          angular.element(arrowEle).css({
            left: (buttonOffset.left - popoverCSS.left) + (buttonOffset.width / 2) - (arrowEle.offsetWidth / 2) + 'px'
          });

          popoverEle.css({
            top: popoverCSS.top + 'px',
            left: popoverCSS.left + 'px',
            marginLeft: '0',
            opacity: '1'
          });

        }

        /**
         * @ngdoc controller
         * @name ionicPopover
         * @module ionic
         * @description
         * Instantiated by the {@link ionic.service:$ionicPopover} service.
         *
         * Be sure to call [remove()](#remove) when you are done with each popover
         * to clean it up and avoid memory leaks.
         *
         * Note: a popover will broadcast 'popover.shown', 'popover.hidden', and 'popover.removed' events from its originating
         * scope, passing in itself as an event argument. Both the popover.removed and popover.hidden events are
         * called when the popover is removed.
         */

        /**
         * @ngdoc method
         * @name ionicPopover#initialize
         * @description Creates a new popover controller instance.
         * @param {object} options An options object with the following properties:
         *  - `{object=}` `scope` The scope to be a child of.
         *    Default: creates a child of $rootScope.
         *  - `{boolean=}` `focusFirstInput` Whether to autofocus the first input of
         *    the popover when shown.  Default: false.
         *  - `{boolean=}` `backdropClickToClose` Whether to close the popover on clicking the backdrop.
         *    Default: true.
         *  - `{boolean=}` `hardwareBackButtonClose` Whether the popover can be closed using the hardware
         *    back button on Android and similar devices.  Default: true.
         */

        /**
         * @ngdoc method
         * @name ionicPopover#show
         * @description Show this popover instance.
         * @param {$event} $event The $event or target element which the popover should align
         * itself next to.
         * @returns {promise} A promise which is resolved when the popover is finished animating in.
         */

        /**
         * @ngdoc method
         * @name ionicPopover#hide
         * @description Hide this popover instance.
         * @returns {promise} A promise which is resolved when the popover is finished animating out.
         */

        /**
         * @ngdoc method
         * @name ionicPopover#remove
         * @description Remove this popover instance from the DOM and clean up.
         * @returns {promise} A promise which is resolved when the popover is finished animating out.
         */

        /**
         * @ngdoc method
         * @name ionicPopover#isShown
         * @returns boolean Whether this popover is currently shown.
         */

        return {
          /**
           * @ngdoc method
           * @name $ionicPopover#fromTemplate
           * @param {string} templateString The template string to use as the popovers's
           * content.
           * @param {object} options Options to be passed to the initialize method.
           * @returns {object} An instance of an {@link ionic.controller:ionicPopover}
           * controller ($ionicPopover is built on top of $ionicPopover).
           */
          fromTemplate: function(templateString, options) {
            return $ionicModal.fromTemplate(templateString, ionic.Utils.extend(options || {}, POPOVER_OPTIONS) );
          },
          /**
           * @ngdoc method
           * @name $ionicPopover#fromTemplateUrl
           * @param {string} templateUrl The url to load the template from.
           * @param {object} options Options to be passed to the initialize method.
           * @returns {promise} A promise that will be resolved with an instance of
           * an {@link ionic.controller:ionicPopover} controller ($ionicPopover is built on top of $ionicPopover).
           */
          fromTemplateUrl: function(url, options, _) {
            return $ionicModal.fromTemplateUrl(url, options, ionic.Utils.extend(options || {}, POPOVER_OPTIONS) );
          }
        };

      }]);


  var POPUP_TPL =
    '<div class="popup">' +
    '<div class="popup-head">' +
    '<h3 class="popup-title" ng-bind-html="title"></h3>' +
    '<h5 class="popup-sub-title" ng-bind-html="subTitle" ng-if="subTitle"></h5>' +
    '</div>' +
    '<div class="popup-body">' +
    '</div>' +
    '<div class="popup-buttons row">' +
    '<button ng-repeat="button in buttons" ng-click="$buttonTapped(button, $event)" class="button col" ng-class="button.type || \'button-default\'" ng-bind-html="button.text"></button>' +
    '</div>' +
    '</div>';

  /**
   * @ngdoc service
   * @name $ionicPopup
   * @module ionic
   * @restrict E
   * @codepen zkmhJ
   * @description
   *
   * The Ionic Popup service allows programmatically creating and showing popup
   * windows that require the user to respond in order to continue.
   *
   * The popup system has support for more flexible versions of the built in `alert()`, `prompt()`,
   * and `confirm()` functions that users are used to, in addition to allowing popups with completely
   * custom content and look.
   *
   * An input can be given an `autofocus` attribute so it automatically receives focus when
   * the popup first shows. However, depending on certain use-cases this can cause issues with
   * the tap/click system, which is why Ionic prefers using the `autofocus` attribute as
   * an opt-in feature and not the default.
   *
   * @usage
   * A few basic examples, see below for details about all of the options available.
   *
   * ```js
   *angular.module('mySuperApp', ['ionic'])
   *.controller('PopupCtrl',function($scope, $ionicPopup, $timeout) {
 *
 * // Triggered on a button click, or some other target
 * $scope.showPopup = function() {
 *   $scope.data = {}
 *
 *   // An elaborate, custom popup
 *   var myPopup = $ionicPopup.show({
 *     template: '<input type="password" ng-model="data.wifi">',
 *     title: 'Enter Wi-Fi Password',
 *     subTitle: 'Please use normal things',
 *     scope: $scope,
 *     buttons: [
 *       { text: 'Cancel' },
 *       {
 *         text: '<b>Save</b>',
 *         type: 'button-positive',
 *         onTap: function(e) {
 *           if (!$scope.data.wifi) {
 *             //don't allow the user to close unless he enters wifi password
 *             e.preventDefault();
 *           } else {
 *             return $scope.data.wifi;
 *           }
 *         }
 *       },
 *     ]
 *   });
 *   myPopup.then(function(res) {
 *     console.log('Tapped!', res);
 *   });
 *   $timeout(function() {
 *      myPopup.close(); //close the popup after 3 seconds for some reason
 *   }, 3000);
 *  };
 *  // A confirm dialog
 *  $scope.showConfirm = function() {
 *    var confirmPopup = $ionicPopup.confirm({
 *      title: 'Consume Ice Cream',
 *      template: 'Are you sure you want to eat this ice cream?'
 *    });
 *    confirmPopup.then(function(res) {
 *      if(res) {
 *        console.log('You are sure');
 *      } else {
 *        console.log('You are not sure');
 *      }
 *    });
 *  };
 *
 *  // An alert dialog
 *  $scope.showAlert = function() {
 *    var alertPopup = $ionicPopup.alert({
 *      title: 'Don\'t eat that!',
 *      template: 'It might taste good'
 *    });
 *    alertPopup.then(function(res) {
 *      console.log('Thank you for not eating my delicious ice cream cone');
 *    });
 *  };
 *});
   *```
   */

  IonicModule
    .factory('$ionicPopup', [
      '$ionicTemplateLoader',
      '$ionicBackdrop',
      '$q',
      '$timeout',
      '$rootScope',
      '$document',
      '$compile',
      '$ionicPlatform',
      function($ionicTemplateLoader, $ionicBackdrop, $q, $timeout, $rootScope, $document, $compile, $ionicPlatform) {
        //TODO allow this to be configured
        var config = {
          stackPushDelay: 50
        };
        var popupStack = [];
        var $ionicPopup = {
          /**
           * @ngdoc method
           * @description
           * Show a complex popup. This is the master show function for all popups.
           *
           * A complex popup has a `buttons` array, with each button having a `text` and `type`
           * field, in addition to an `onTap` function.  The `onTap` function, called when
           * the correspondingbutton on the popup is tapped, will by default close the popup
           * and resolve the popup promise with its return value.  If you wish to prevent the
           * default and keep the popup open on button tap, call `event.preventDefault()` on the
           * passed in tap event.  Details below.
           *
           * @name $ionicPopup#show
           * @param {object} options The options for the new popup, of the form:
           *
           * ```
           * {
     *   title: '', // String. The title of the popup.
     *   subTitle: '', // String (optional). The sub-title of the popup.
     *   template: '', // String (optional). The html template to place in the popup body.
     *   templateUrl: '', // String (optional). The URL of an html template to place in the popup   body.
     *   scope: null, // Scope (optional). A scope to link to the popup content.
     *   buttons: [{ //Array[Object] (optional). Buttons to place in the popup footer.
     *     text: 'Cancel',
     *     type: 'button-default',
     *     onTap: function(e) {
     *       // e.preventDefault() will stop the popup from closing when tapped.
     *       e.preventDefault();
     *     }
     *   }, {
     *     text: 'OK',
     *     type: 'button-positive',
     *     onTap: function(e) {
     *       // Returning a value will cause the promise to resolve with the given value.
     *       return scope.data.response;
     *     }
     *   }]
     * }
           * ```
           *
           * @returns {object} A promise which is resolved when the popup is closed. Has an additional
           * `close` function, which can be used to programmatically close the popup.
           */
          show: showPopup,

          /**
           * @ngdoc method
           * @name $ionicPopup#alert
           * @description Show a simple alert popup with a message and one button that the user can
           * tap to close the popup.
           *
           * @param {object} options The options for showing the alert, of the form:
           *
           * ```
           * {
     *   title: '', // String. The title of the popup.
     *   subTitle: '', // String (optional). The sub-title of the popup.
     *   template: '', // String (optional). The html template to place in the popup body.
     *   templateUrl: '', // String (optional). The URL of an html template to place in the popup   body.
     *   okText: '', // String (default: 'OK'). The text of the OK button.
     *   okType: '', // String (default: 'button-positive'). The type of the OK button.
     * }
           * ```
           *
           * @returns {object} A promise which is resolved when the popup is closed. Has one additional
           * function `close`, which can be called with any value to programmatically close the popup
           * with the given value.
           */
          alert: showAlert,

          /**
           * @ngdoc method
           * @name $ionicPopup#confirm
           * @description
           * Show a simple confirm popup with a Cancel and OK button.
           *
           * Resolves the promise with true if the user presses the OK button, and false if the
           * user presses the Cancel button.
           *
           * @param {object} options The options for showing the confirm popup, of the form:
           *
           * ```
           * {
     *   title: '', // String. The title of the popup.
     *   subTitle: '', // String (optional). The sub-title of the popup.
     *   template: '', // String (optional). The html template to place in the popup body.
     *   templateUrl: '', // String (optional). The URL of an html template to place in the popup   body.
     *   cancelText: '', // String (default: 'Cancel'). The text of the Cancel button.
     *   cancelType: '', // String (default: 'button-default'). The type of the Cancel button.
     *   okText: '', // String (default: 'OK'). The text of the OK button.
     *   okType: '', // String (default: 'button-positive'). The type of the OK button.
     * }
           * ```
           *
           * @returns {object} A promise which is resolved when the popup is closed. Has one additional
           * function `close`, which can be called with any value to programmatically close the popup
           * with the given value.
           */
          confirm: showConfirm,

          /**
           * @ngdoc method
           * @name $ionicPopup#prompt
           * @description Show a simple prompt popup, which has an input, OK button, and Cancel button.
           * Resolves the promise with the value of the input if the user presses OK, and with undefined
           * if the user presses Cancel.
           *
           * ```javascript
           *  $ionicPopup.prompt({
     *    title: 'Password Check',
     *    template: 'Enter your secret password',
     *    inputType: 'password',
     *    inputPlaceholder: 'Your password'
     *  }).then(function(res) {
     *    console.log('Your password is', res);
     *  });
           * ```
           * @param {object} options The options for showing the prompt popup, of the form:
           *
           * ```
           * {
     *   title: '', // String. The title of the popup.
     *   subTitle: '', // String (optional). The sub-title of the popup.
     *   template: '', // String (optional). The html template to place in the popup body.
     *   templateUrl: '', // String (optional). The URL of an html template to place in the popup   body.
     *   inputType: // String (default: 'text'). The type of input to use
     *   inputPlaceholder: // String (default: ''). A placeholder to use for the input.
     *   cancelText: // String (default: 'Cancel'. The text of the Cancel button.
     *   cancelType: // String (default: 'button-default'). The type of the Cancel button.
     *   okText: // String (default: 'OK'). The text of the OK button.
     *   okType: // String (default: 'button-positive'). The type of the OK button.
     * }
           * ```
           *
           * @returns {object} A promise which is resolved when the popup is closed. Has one additional
           * function `close`, which can be called with any value to programmatically close the popup
           * with the given value.
           */
          prompt: showPrompt,
          /**
           * @private for testing
           */
          _createPopup: createPopup,
          _popupStack: popupStack
        };

        return $ionicPopup;

        function createPopup(options) {
          options = extend({
            scope: null,
            title: '',
            buttons: [],
          }, options || {});

          var popupPromise = $ionicTemplateLoader.compile({
            template: POPUP_TPL,
            scope: options.scope && options.scope.$new(),
            appendTo: $document[0].body
          });
          var contentPromise = options.templateUrl ?
            $ionicTemplateLoader.load(options.templateUrl) :
            $q.when(options.template || options.content || '');

          return $q.all([popupPromise, contentPromise])
            .then(function(results) {
              var self = results[0];
              var content = results[1];
              var responseDeferred = $q.defer();

              self.responseDeferred = responseDeferred;

              //Can't ng-bind-html for popup-body because it can be insecure html
              //(eg an input in case of prompt)
              var body = jqLite(self.element[0].querySelector('.popup-body'));
              if (content) {
                body.html(content);
                $compile(body.contents())(self.scope);
              } else {
                body.remove();
              }

              extend(self.scope, {
                title: options.title,
                buttons: options.buttons,
                subTitle: options.subTitle,
                $buttonTapped: function(button, event) {
                  var result = (button.onTap || angular.noop)(event);
                  event = event.originalEvent || event; //jquery events

                  if (!event.defaultPrevented) {
                    responseDeferred.resolve(result);
                  }
                }
              });

              self.show = function() {
                if (self.isShown) return;

                self.isShown = true;
                ionic.requestAnimationFrame(function() {
                  //if hidden while waiting for raf, don't show
                  if (!self.isShown) return;

                  //if the popup is taller than the window, make the popup body scrollable
                  if(self.element[0].offsetHeight > window.innerHeight - 20){
                    self.element[0].style.height = window.innerHeight - 20+'px';
                    popupBody = self.element[0].querySelectorAll('.popup-body');
                    popupHead = self.element[0].querySelectorAll('.popup-head');
                    popupButtons = self.element[0].querySelectorAll('.popup-buttons');
                    self.element.addClass('popup-tall');
                    newHeight = window.innerHeight - popupHead[0].offsetHeight - popupButtons[0].offsetHeight -20;
                    popupBody[0].style.height =  newHeight + 'px';
                  }

                  self.element.removeClass('popup-hidden');
                  self.element.addClass('popup-showing active');
                  ionic.DomUtil.centerElementByMarginTwice(self.element[0]);
                  focusInput(self.element);
                });
              };
              self.hide = function(callback) {
                callback = callback || angular.noop;
                if (!self.isShown) return callback();

                self.isShown = false;
                self.element.removeClass('active');
                self.element.addClass('popup-hidden');
                $timeout(callback, 250);
              };
              self.remove = function() {
                if (self.removed) return;

                self.hide(function() {
                  self.element.remove();
                  self.scope.$destroy();
                });

                self.removed = true;
              };

              return self;
            });
        }

        function onHardwareBackButton(e) {
          popupStack[0] && popupStack[0].responseDeferred.resolve();
        }

        function showPopup(options) {
          var popupPromise = $ionicPopup._createPopup(options);
          var previousPopup = popupStack[0];

          if (previousPopup) {
            previousPopup.hide();
          }

          var resultPromise = $timeout(angular.noop, previousPopup ? config.stackPushDelay : 0)
            .then(function() { return popupPromise; })
            .then(function(popup) {
              if (!previousPopup) {
                //Add popup-open & backdrop if this is first popup
                document.body.classList.add('popup-open');
                $ionicBackdrop.retain();
                $ionicPopup._backButtonActionDone = $ionicPlatform.registerBackButtonAction(
                  onHardwareBackButton,
                  PLATFORM_BACK_BUTTON_PRIORITY_POPUP
                );
              }
              popupStack.unshift(popup);
              popup.show();

              //DEPRECATED: notify the promise with an object with a close method
              popup.responseDeferred.notify({
                close: resultPromise.close
              });

              return popup.responseDeferred.promise.then(function(result) {
                var index = popupStack.indexOf(popup);
                if (index !== -1) {
                  popupStack.splice(index, 1);
                }
                popup.remove();

                var previousPopup = popupStack[0];
                if (previousPopup) {
                  previousPopup.show();
                } else {
                  //Remove popup-open & backdrop if this is last popup
                  document.body.classList.remove('popup-open');
                  ($ionicPopup._backButtonActionDone || angular.noop)();
                }
                // always release the backdrop since it has an internal backdrop counter
                $ionicBackdrop.release();
                return result;
              });
            });

          function close(result) {
            popupPromise.then(function(popup) {
              if (!popup.removed) {
                popup.responseDeferred.resolve(result);
              }
            });
          }
          resultPromise.close = close;

          return resultPromise;
        }

        function focusInput(element) {
          var focusOn = element[0].querySelector('[autofocus]');
          if (focusOn) {
            focusOn.focus();
          }
        }

        function showAlert(opts) {
          return showPopup( extend({
            buttons: [{
              text: opts.okText || 'OK',
              type: opts.okType || 'button-positive',
              onTap: function(e) {
                return true;
              }
            }]
          }, opts || {}) );
        }

        function showConfirm(opts) {
          return showPopup( extend({
            buttons: [{
              text: opts.cancelText || 'Cancel' ,
              type: opts.cancelType || 'button-default',
              onTap: function(e) { return false; }
            }, {
              text: opts.okText || 'OK',
              type: opts.okType || 'button-positive',
              onTap: function(e) { return true; }
            }]
          }, opts || {}) );
        }

        function showPrompt(opts) {
          var scope = $rootScope.$new(true);
          scope.data = {};
          return showPopup( extend({
            template: '<input ng-model="data.response" type="' + (opts.inputType || 'text') +
              '" placeholder="' + (opts.inputPlaceholder || '') + '">',
            scope: scope,
            buttons: [{
              text: opts.cancelText || 'Cancel',
              type: opts.cancelType|| 'button-default',
              onTap: function(e) {}
            }, {
              text: opts.okText || 'OK',
              type: opts.okType || 'button-positive',
              onTap: function(e) {
                return scope.data.response || '';
              }
            }]
          }, opts || {}) );
        }
      }]);


  /**
   * @ngdoc service
   * @name $ionicPosition
   * @module ionic
   * @description
   * A set of utility methods that can be use to retrieve position of DOM elements.
   * It is meant to be used where we need to absolute-position DOM elements in
   * relation to other, existing elements (this is the case for tooltips, popovers, etc.).
   *
   * Adapted from [AngularUI Bootstrap](https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js),
   * ([license](https://github.com/angular-ui/bootstrap/blob/master/LICENSE))
   */
  IonicModule
    .factory('$ionicPosition', ['$document', '$window', function ($document, $window) {

      function getStyle(el, cssprop) {
        if (el.currentStyle) { //IE
          return el.currentStyle[cssprop];
        } else if ($window.getComputedStyle) {
          return $window.getComputedStyle(el)[cssprop];
        }
        // finally try and get inline style
        return el.style[cssprop];
      }

      /**
       * Checks if a given element is statically positioned
       * @param element - raw DOM element
       */
      function isStaticPositioned(element) {
        return (getStyle(element, 'position') || 'static' ) === 'static';
      }

      /**
       * returns the closest, non-statically positioned parentOffset of a given element
       * @param element
       */
      var parentOffsetEl = function (element) {
        var docDomEl = $document[0];
        var offsetParent = element.offsetParent || docDomEl;
        while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent) ) {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || docDomEl;
      };

      return {
        /**
         * @ngdoc method
         * @name $ionicPosition#position
         * @description Get the current coordinates of the element, relative to the offset parent.
         * Read-only equivalent of [jQuery's position function](http://api.jquery.com/position/).
         * @param {element} element The element to get the position of.
         * @returns {object} Returns an object containing the properties top, left, width and height.
         */
        position: function (element) {
          var elBCR = this.offset(element);
          var offsetParentBCR = { top: 0, left: 0 };
          var offsetParentEl = parentOffsetEl(element[0]);
          if (offsetParentEl != $document[0]) {
            offsetParentBCR = this.offset(angular.element(offsetParentEl));
            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
          }

          var boundingClientRect = element[0].getBoundingClientRect();
          return {
            width: boundingClientRect.width || element.prop('offsetWidth'),
            height: boundingClientRect.height || element.prop('offsetHeight'),
            top: elBCR.top - offsetParentBCR.top,
            left: elBCR.left - offsetParentBCR.left
          };
        },

        /**
         * @ngdoc method
         * @name $ionicPosition#offset
         * @description Get the current coordinates of the element, relative to the document.
         * Read-only equivalent of [jQuery's offset function](http://api.jquery.com/offset/).
         * @param {element} element The element to get the offset of.
         * @returns {object} Returns an object containing the properties top, left, width and height.
         */
        offset: function (element) {
          var boundingClientRect = element[0].getBoundingClientRect();
          return {
            width: boundingClientRect.width || element.prop('offsetWidth'),
            height: boundingClientRect.height || element.prop('offsetHeight'),
            top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
            left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
          };
        }

      };
    }]);


  /**
   * @ngdoc service
   * @name $ionicScrollDelegate
   * @module ionic
   * @description
   * Delegate for controlling scrollViews (created by
   * {@link ionic.directive:ionContent} and
   * {@link ionic.directive:ionScroll} directives).
   *
   * Methods called directly on the $ionicScrollDelegate service will control all scroll
   * views.  Use the {@link ionic.service:$ionicScrollDelegate#$getByHandle $getByHandle}
   * method to control specific scrollViews.
   *
   * @usage
   *
   * ```html
   * <body ng-controller="MainCtrl">
   *   <ion-content>
   *     <button ng-click="scrollTop()">Scroll to Top!</button>
   *   </ion-content>
   * </body>
   * ```
   * ```js
   * function MainCtrl($scope, $ionicScrollDelegate) {
 *   $scope.scrollTop = function() {
 *     $ionicScrollDelegate.scrollTop();
 *   };
 * }
   * ```
   *
   * Example of advanced usage, with two scroll areas using `delegate-handle`
   * for fine control.
   *
   * ```html
   * <body ng-controller="MainCtrl">
   *   <ion-content delegate-handle="mainScroll">
   *     <button ng-click="scrollMainToTop()">
   *       Scroll content to top!
   *     </button>
   *     <ion-scroll delegate-handle="small" style="height: 100px;">
   *       <button ng-click="scrollSmallToTop()">
   *         Scroll small area to top!
   *       </button>
   *     </ion-scroll>
   *   </ion-content>
   * </body>
   * ```
   * ```js
   * function MainCtrl($scope, $ionicScrollDelegate) {
 *   $scope.scrollMainToTop = function() {
 *     $ionicScrollDelegate.$getByHandle('mainScroll').scrollTop();
 *   };
 *   $scope.scrollSmallToTop = function() {
 *     $ionicScrollDelegate.$getByHandle('small').scrollTop();
 *   };
 * }
   * ```
   */
  IonicModule
    .service('$ionicScrollDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#resize
     * @description Tell the scrollView to recalculate the size of its container.
     */
      'resize',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#scrollTop
     * @param {boolean=} shouldAnimate Whether the scroll should animate.
     */
      'scrollTop',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#scrollBottom
     * @param {boolean=} shouldAnimate Whether the scroll should animate.
     */
      'scrollBottom',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#scrollTo
     * @param {number} left The x-value to scroll to.
     * @param {number} top The y-value to scroll to.
     * @param {boolean=} shouldAnimate Whether the scroll should animate.
     */
      'scrollTo',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#scrollBy
     * @param {number} left The x-offset to scroll by.
     * @param {number} top The y-offset to scroll by.
     * @param {boolean=} shouldAnimate Whether the scroll should animate.
     */
      'scrollBy',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#getScrollPosition
     * @returns {object} The scroll position of this view, with the following properties:
     *  - `{number}` `left` The distance the user has scrolled from the left (starts at 0).
     *  - `{number}` `top` The distance the user has scrolled from the top (starts at 0).
     */
      'getScrollPosition',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#anchorScroll
     * @description Tell the scrollView to scroll to the element with an id
     * matching window.location.hash.
     *
     * If no matching element is found, it will scroll to top.
     *
     * @param {boolean=} shouldAnimate Whether the scroll should animate.
     */
      'anchorScroll',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#getScrollView
     * @returns {object} The scrollView associated with this delegate.
     */
      'getScrollView',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#rememberScrollPosition
     * @description
     * Will make it so, when this scrollView is destroyed (user leaves the page),
     * the last scroll position the page was on will be saved, indexed by the
     * given id.
     *
     * Note: for pages associated with a view under an ion-nav-view,
     * rememberScrollPosition automatically saves their scroll.
     *
     * Related methods: scrollToRememberedPosition, forgetScrollPosition (below).
     *
     * In the following example, the scroll position of the ion-scroll element
     * will persist, even when the user changes the toggle switch.
     *
     * ```html
     * <ion-toggle ng-model="shouldShowScrollView"></ion-toggle>
     * <ion-scroll delegate-handle="myScroll" ng-if="shouldShowScrollView">
     *   <div ng-controller="ScrollCtrl">
     *     <ion-list>
     *       {% raw %}<ion-item ng-repeat="i in items">{{i}}</ion-item>{% endraw %}
     *     </ion-list>
     *   </div>
     * </ion-scroll>
     * ```
     * ```js
     * function ScrollCtrl($scope, $ionicScrollDelegate) {
   *   var delegate = $ionicScrollDelegate.$getByHandle('myScroll');
   *
   *   // Put any unique ID here.  The point of this is: every time the controller is recreated
   *   // we want to load the correct remembered scroll values.
   *   delegate.rememberScrollPosition('my-scroll-id');
   *   delegate.scrollToRememberedPosition();
   *   $scope.items = [];
   *   for (var i=0; i<100; i++) {
   *     $scope.items.push(i);
   *   }
   * }
     * ```
     *
     * @param {string} id The id to remember the scroll position of this
     * scrollView by.
     */
      'rememberScrollPosition',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#forgetScrollPosition
     * @description
     * Stop remembering the scroll position for this scrollView.
     */
      'forgetScrollPosition',
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#scrollToRememberedPosition
     * @description
     * If this scrollView has an id associated with its scroll position,
     * (through calling rememberScrollPosition), and that position is remembered,
     * load the position and scroll to it.
     * @param {boolean=} shouldAnimate Whether to animate the scroll.
     */
      'scrollToRememberedPosition'
    /**
     * @ngdoc method
     * @name $ionicScrollDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * scrollViews with `delegate-handle` matching the given handle.
     *
     * Example: `$ionicScrollDelegate.$getByHandle('my-handle').scrollTop();`
     */
    ]));


  /**
   * @ngdoc service
   * @name $ionicSideMenuDelegate
   * @module ionic
   *
   * @description
   * Delegate for controlling the {@link ionic.directive:ionSideMenus} directive.
   *
   * Methods called directly on the $ionicSideMenuDelegate service will control all side
   * menus.  Use the {@link ionic.service:$ionicSideMenuDelegate#$getByHandle $getByHandle}
   * method to control specific ionSideMenus instances.
   *
   * @usage
   *
   * ```html
   * <body ng-controller="MainCtrl">
   *   <ion-side-menus>
   *     <ion-side-menu-content>
   *       Content!
   *       <button ng-click="toggleLeftSideMenu()">
   *         Toggle Left Side Menu
   *       </button>
   *     </ion-side-menu-content>
   *     <ion-side-menu side="left">
   *       Left Menu!
   *     <ion-side-menu>
   *   </ion-side-menus>
   * </body>
   * ```
   * ```js
   * function MainCtrl($scope, $ionicSideMenuDelegate) {
 *   $scope.toggleLeftSideMenu = function() {
 *     $ionicSideMenuDelegate.toggleLeft();
 *   };
 * }
   * ```
   */
  IonicModule
    .service('$ionicSideMenuDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#toggleLeft
     * @description Toggle the left side menu (if it exists).
     * @param {boolean=} isOpen Whether to open or close the menu.
     * Default: Toggles the menu.
     */
      'toggleLeft',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#toggleRight
     * @description Toggle the right side menu (if it exists).
     * @param {boolean=} isOpen Whether to open or close the menu.
     * Default: Toggles the menu.
     */
      'toggleRight',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#getOpenRatio
     * @description Gets the ratio of open amount over menu width. For example, a
     * menu of width 100 that is opened by 50 pixels is 50% opened, and would return
     * a ratio of 0.5.
     *
     * @returns {float} 0 if nothing is open, between 0 and 1 if left menu is
     * opened/opening, and between 0 and -1 if right menu is opened/opening.
     */
      'getOpenRatio',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#isOpen
     * @returns {boolean} Whether either the left or right menu is currently opened.
     */
      'isOpen',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#isOpenLeft
     * @returns {boolean} Whether the left menu is currently opened.
     */
      'isOpenLeft',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#isOpenRight
     * @returns {boolean} Whether the right menu is currently opened.
     */
      'isOpenRight',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#canDragContent
     * @param {boolean=} canDrag Set whether the content can or cannot be dragged to open
     * side menus.
     * @returns {boolean} Whether the content can be dragged to open side menus.
     */
      'canDragContent',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#edgeDragThreshold
     * @param {boolean|number=} value Set whether the content drag can only start if it is below a certain threshold distance from the edge of the screen. Accepts three different values:
     *  - If a non-zero number is given, that many pixels is used as the maximum allowed distance from the edge that starts dragging the side menu.
     *  - If true is given, the default number of pixels (25) is used as the maximum allowed distance.
     *  - If false or 0 is given, the edge drag threshold is disabled, and dragging from anywhere on the content is allowed.
     * @returns {boolean} Whether the drag can start only from within the edge of screen threshold.
     */
      'edgeDragThreshold',
    /**
     * @ngdoc method
     * @name $ionicSideMenuDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * {@link ionic.directive:ionSideMenus} directives with `delegate-handle` matching
     * the given handle.
     *
     * Example: `$ionicSideMenuDelegate.$getByHandle('my-handle').toggleLeft();`
     */
    ]));


  /**
   * @ngdoc service
   * @name $ionicSlideBoxDelegate
   * @module ionic
   * @description
   * Delegate that controls the {@link ionic.directive:ionSlideBox} directive.
   *
   * Methods called directly on the $ionicSlideBoxDelegate service will control all slide boxes.  Use the {@link ionic.service:$ionicSlideBoxDelegate#$getByHandle $getByHandle}
   * method to control specific slide box instances.
   *
   * @usage
   *
   * ```html
   * <body ng-controller="MyCtrl">
   *   <ion-slide-box>
   *     <ion-slide>
   *       <div class="box blue">
   *         <button ng-click="nextSlide()">Next slide!</button>
   *       </div>
   *     </ion-slide>
   *     <ion-slide>
   *       <div class="box red">
   *         Slide 2!
   *       </div>
   *     </ion-slide>
   *   </ion-slide-box>
   * </body>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicSlideBoxDelegate) {
 *   $scope.nextSlide = function() {
 *     $ionicSlideBoxDelegate.next();
 *   }
 * }
   * ```
   */
  IonicModule
    .service('$ionicSlideBoxDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#update
     * @description
     * Update the slidebox (for example if using Angular with ng-repeat,
     * resize it for the elements inside).
     */
      'update',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#slide
     * @param {number} to The index to slide to.
     * @param {number=} speed The number of milliseconds for the change to take.
     */
      'slide',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#enableSlide
     * @param {boolean=} shouldEnable Whether to enable sliding the slidebox.
     * @returns {boolean} Whether sliding is enabled.
     */
      'enableSlide',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#previous
     * @description Go to the previous slide. Wraps around if at the beginning.
     */
      'previous',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#next
     * @description Go to the next slide. Wraps around if at the end.
     */
      'next',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#stop
     * @description Stop sliding. The slideBox will not move again until
     * explicitly told to do so.
     */
      'stop',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#start
     * @description Start sliding again if the slideBox was stopped.
     */
      'start',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#currentIndex
     * @returns number The index of the current slide.
     */
      'currentIndex',
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#slidesCount
     * @returns number The number of slides there are currently.
     */
      'slidesCount'
    /**
     * @ngdoc method
     * @name $ionicSlideBoxDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * {@link ionic.directive:ionSlideBox} directives with `delegate-handle` matching
     * the given handle.
     *
     * Example: `$ionicSlideBoxDelegate.$getByHandle('my-handle').stop();`
     */
    ]));


  /**
   * @ngdoc service
   * @name $ionicTabsDelegate
   * @module ionic
   *
   * @description
   * Delegate for controlling the {@link ionic.directive:ionTabs} directive.
   *
   * Methods called directly on the $ionicTabsDelegate service will control all ionTabs
   * directives. Use the {@link ionic.service:$ionicTabsDelegate#$getByHandle $getByHandle}
   * method to control specific ionTabs instances.
   *
   * @usage
   *
   * ```html
   * <body ng-controller="MyCtrl">
   *   <ion-tabs>
   *
   *     <ion-tab title="Tab 1">
   *       Hello tab 1!
   *       <button ng-click="selectTabWithIndex(1)">Select tab 2!</button>
   *     </ion-tab>
   *     <ion-tab title="Tab 2">Hello tab 2!</ion-tab>
   *
   *   </ion-tabs>
   * </body>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicTabsDelegate) {
 *   $scope.selectTabWithIndex = function(index) {
 *     $ionicTabsDelegate.select(index);
 *   }
 * }
   * ```
   */
  IonicModule
    .service('$ionicTabsDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicTabsDelegate#select
     * @description Select the tab matching the given index.
     *
     * @param {number} index Index of the tab to select.
     * @param {boolean=} shouldChangeHistory Whether this selection should load this tab's
     * view history (if it exists) and use it, or just load the default page.
     * Default false.
     * Hint: you probably want this to be true if you have an
     * {@link ionic.directive:ionNavView} inside your tab.
     */
      'select',
    /**
     * @ngdoc method
     * @name $ionicTabsDelegate#selectedIndex
     * @returns `number` The index of the selected tab, or -1.
     */
      'selectedIndex'
    /**
     * @ngdoc method
     * @name $ionicTabsDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * {@link ionic.directive:ionTabs} directives with `delegate-handle` matching
     * the given handle.
     *
     * Example: `$ionicTabsDelegate.$getByHandle('my-handle').select(0);`
     */
    ]));


  IonicModule
    .factory('$ionicTemplateLoader', [
      '$compile',
      '$controller',
      '$http',
      '$q',
      '$rootScope',
      '$templateCache',
      function($compile, $controller, $http, $q, $rootScope, $templateCache) {

        return {
          load: fetchTemplate,
          compile: loadAndCompile
        };

        function fetchTemplate(url) {
          return $http.get(url, {cache: $templateCache})
            .then(function(response) {
              return response.data && response.data.trim();
            });
        }

        function loadAndCompile(options) {
          options = extend({
            template: '',
            templateUrl: '',
            scope: null,
            controller: null,
            locals: {},
            appendTo: null
          }, options || {});

          var templatePromise = options.templateUrl ?
            this.load(options.templateUrl) :
            $q.when(options.template);

          return templatePromise.then(function(template) {
            var controller;
            var scope = options.scope || $rootScope.$new();

            //Incase template doesn't have just one root element, do this
            var element = jqLite('<div>').html(template).contents();

            if (options.controller) {
              controller = $controller(
                options.controller,
                extend(options.locals, {
                  $scope: scope
                })
              );
              element.children().data('$ngControllerController', controller);
            }
            if (options.appendTo) {
              jqLite(options.appendTo).append(element);
            }

            $compile(element)(scope);

            return {
              element: element,
              scope: scope
            };
          });
        }

      }]);

  /**
   * @private
   * TODO document
   */
  IonicModule
    .run([
      '$rootScope',
      '$state',
      '$location',
      '$document',
      '$animate',
      '$ionicPlatform',
      '$ionicViewService',
      function($rootScope, $state, $location, $document, $animate, $ionicPlatform, $ionicViewService) {

        // init the variables that keep track of the view history
        $rootScope.$viewHistory = {
          histories: { root: { historyId: 'root', parentHistoryId: null, stack: [], cursor: -1 } },
          views: {},
          backView: null,
          forwardView: null,
          currentView: null,
          disabledRegistrableTagNames: []
        };

        // set that these directives should not animate when transitioning
        // to it. Instead, the children <tab> directives would animate
        if ($ionicViewService.disableRegisterByTagName) {
          $ionicViewService.disableRegisterByTagName('ion-tabs');
          $ionicViewService.disableRegisterByTagName('ion-side-menus');
        }

        $rootScope.$on('viewState.changeHistory', function(e, data) {
          if(!data) return;

          var hist = (data.historyId ? $rootScope.$viewHistory.histories[ data.historyId ] : null );
          if(hist && hist.cursor > -1 && hist.cursor < hist.stack.length) {
            // the history they're going to already exists
            // go to it's last view in its stack
            var view = hist.stack[ hist.cursor ];
            return view.go(data);
          }

          // this history does not have a URL, but it does have a uiSref
          // figure out its URL from the uiSref
          if(!data.url && data.uiSref) {
            data.url = $state.href(data.uiSref);
          }

          if(data.url) {
            // don't let it start with a #, messes with $location.url()
            if(data.url.indexOf('#') === 0) {
              data.url = data.url.replace('#', '');
            }
            if(data.url !== $location.url()) {
              // we've got a good URL, ready GO!
              $location.url(data.url);
            }
          }
        });

        // Set the document title when a new view is shown
        $rootScope.$on('viewState.viewEnter', function(e, data) {
          if(data && data.title) {
            $document[0].title = data.title;
          }
        });

        // Triggered when devices with a hardware back button (Android) is clicked by the user
        // This is a Cordova/Phonegap platform specifc method
        function onHardwareBackButton(e) {
          if($rootScope.$viewHistory.backView) {
            // there is a back view, go to it
            $rootScope.$viewHistory.backView.go();
          } else {
            // there is no back view, so close the app instead
            ionic.Platform.exitApp();
          }
          e.preventDefault();
          return false;
        }
        $ionicPlatform.registerBackButtonAction(
          onHardwareBackButton,
          PLATFORM_BACK_BUTTON_PRIORITY_VIEW
        );

      }])

    .factory('$ionicViewService', [
      '$rootScope',
      '$state',
      '$location',
      '$window',
      '$injector',
      '$animate',
      '$ionicNavViewConfig',
      function($rootScope, $state, $location, $window, $injector, $animate, $ionicNavViewConfig) {

        var View = function(){};
        View.prototype.initialize = function(data) {
          if(data) {
            for(var name in data) this[name] = data[name];
            return this;
          }
          return null;
        };
        View.prototype.go = function() {

          if(this.stateName) {
            return $state.go(this.stateName, this.stateParams);
          }

          if(this.url && this.url !== $location.url()) {

            if($rootScope.$viewHistory.backView === this) {
              return $window.history.go(-1);
            } else if($rootScope.$viewHistory.forwardView === this) {
              return $window.history.go(1);
            }

            $location.url(this.url);
            return;
          }

          return null;
        };
        View.prototype.destroy = function() {
          if(this.scope) {
            this.scope.$destroy && this.scope.$destroy();
            this.scope = null;
          }
        };

        function createViewId(stateId) {
          return ionic.Utils.nextUid();
        }

        return {

          register: function(containerScope, element) {

            var viewHistory = $rootScope.$viewHistory,
              currentStateId = this.getCurrentStateId(),
              hist = this._getHistory(containerScope),
              currentView = viewHistory.currentView,
              backView = viewHistory.backView,
              forwardView = viewHistory.forwardView,
              nextViewOptions = this.nextViewOptions(),
              rsp = {
                viewId: null,
                navAction: null,
                navDirection: null,
                historyId: hist.historyId
              };

            if(element && !this.isTagNameRegistrable(element)) {
              // first check to see if this element can even be registered as a view.
              // Certain tags are only containers for views, but are not views themselves.
              // For example, the <ion-tabs> directive contains a <ion-tab> and the <ion-tab> is the
              // view, but the <ion-tabs> directive itself should not be registered as a view.
              rsp.navAction = 'disabledByTagName';
              return rsp;
            }

            if(currentView &&
              currentView.stateId === currentStateId &&
              currentView.historyId === hist.historyId) {
              // do nothing if its the same stateId in the same history
              rsp.navAction = 'noChange';
              return rsp;
            }

            if(viewHistory.forcedNav) {
              // we've previously set exactly what to do
              ionic.Utils.extend(rsp, viewHistory.forcedNav);
              $rootScope.$viewHistory.forcedNav = null;

            } else if(backView && backView.stateId === currentStateId) {
              // they went back one, set the old current view as a forward view
              rsp.viewId = backView.viewId;
              rsp.navAction = 'moveBack';
              rsp.viewId = backView.viewId;
              if(backView.historyId === currentView.historyId) {
                // went back in the same history
                rsp.navDirection = 'back';
              }

            } else if(forwardView && forwardView.stateId === currentStateId) {
              // they went to the forward one, set the forward view to no longer a forward view
              rsp.viewId = forwardView.viewId;
              rsp.navAction = 'moveForward';
              if(forwardView.historyId === currentView.historyId) {
                rsp.navDirection = 'forward';
              }

              var parentHistory = this._getParentHistoryObj(containerScope);
              if(forwardView.historyId && parentHistory.scope) {
                // if a history has already been created by the forward view then make sure it stays the same
                parentHistory.scope.$historyId = forwardView.historyId;
                rsp.historyId = forwardView.historyId;
              }

            } else if(currentView && currentView.historyId !== hist.historyId &&
              hist.cursor > -1 && hist.stack.length > 0 && hist.cursor < hist.stack.length &&
              hist.stack[hist.cursor].stateId === currentStateId) {
              // they just changed to a different history and the history already has views in it
              rsp.viewId = hist.stack[hist.cursor].viewId;
              rsp.navAction = 'moveBack';

            } else {

              // set a new unique viewId
              rsp.viewId = createViewId(currentStateId);

              if(currentView) {
                // set the forward view if there is a current view (ie: if its not the first view)
                currentView.forwardViewId = rsp.viewId;

                // its only moving forward if its in the same history
                if(hist.historyId === currentView.historyId) {
                  rsp.navDirection = 'forward';
                }
                rsp.navAction = 'newView';

                // check if there is a new forward view
                if(forwardView && currentView.stateId !== forwardView.stateId) {
                  // they navigated to a new view but the stack already has a forward view
                  // since its a new view remove any forwards that existed
                  var forwardsHistory = this._getHistoryById(forwardView.historyId);
                  if(forwardsHistory) {
                    // the forward has a history
                    for(var x=forwardsHistory.stack.length - 1; x >= forwardView.index; x--) {
                      // starting from the end destroy all forwards in this history from this point
                      forwardsHistory.stack[x].destroy();
                      forwardsHistory.stack.splice(x);
                    }
                  }
                }

              } else {
                // there's no current view, so this must be the initial view
                rsp.navAction = 'initialView';
              }

              // add the new view
              viewHistory.views[rsp.viewId] = this.createView({
                viewId: rsp.viewId,
                index: hist.stack.length,
                historyId: hist.historyId,
                backViewId: (currentView && currentView.viewId ? currentView.viewId : null),
                forwardViewId: null,
                stateId: currentStateId,
                stateName: this.getCurrentStateName(),
                stateParams: this.getCurrentStateParams(),
                url: $location.url(),
              });

              if (rsp.navAction == 'moveBack') {
                //moveBack(from, to);
                $rootScope.$emit('$viewHistory.viewBack', currentView.viewId, rsp.viewId);
              }

              // add the new view to this history's stack
              hist.stack.push(viewHistory.views[rsp.viewId]);
            }

            if(nextViewOptions) {
              if(nextViewOptions.disableAnimate) rsp.navDirection = null;
              if(nextViewOptions.disableBack) viewHistory.views[rsp.viewId].backViewId = null;
              this.nextViewOptions(null);
            }

            this.setNavViews(rsp.viewId);

            hist.cursor = viewHistory.currentView.index;

            return rsp;
          },

          setNavViews: function(viewId) {
            var viewHistory = $rootScope.$viewHistory;

            viewHistory.currentView = this._getViewById(viewId);
            viewHistory.backView = this._getBackView(viewHistory.currentView);
            viewHistory.forwardView = this._getForwardView(viewHistory.currentView);

            $rootScope.$broadcast('$viewHistory.historyChange', {
              showBack: (viewHistory.backView && viewHistory.backView.historyId === viewHistory.currentView.historyId)
            });
          },

          registerHistory: function(scope) {
            scope.$historyId = ionic.Utils.nextUid();
          },

          createView: function(data) {
            var newView = new View();
            return newView.initialize(data);
          },

          getCurrentView: function() {
            return $rootScope.$viewHistory.currentView;
          },

          getBackView: function() {
            return $rootScope.$viewHistory.backView;
          },

          getForwardView: function() {
            return $rootScope.$viewHistory.forwardView;
          },

          getNavDirection: function() {
            return $rootScope.$viewHistory.navDirection;
          },

          getCurrentStateName: function() {
            return ($state && $state.current ? $state.current.name : null);
          },

          isCurrentStateNavView: function(navView) {
            return ($state &&
              $state.current &&
              $state.current.views &&
              $state.current.views[navView] ? true : false);
          },

          getCurrentStateParams: function() {
            var rtn;
            if ($state && $state.params) {
              for(var key in $state.params) {
                if($state.params.hasOwnProperty(key)) {
                  rtn = rtn || {};
                  rtn[key] = $state.params[key];
                }
              }
            }
            return rtn;
          },

          getCurrentStateId: function() {
            var id;
            if($state && $state.current && $state.current.name) {
              id = $state.current.name;
              if($state.params) {
                for(var key in $state.params) {
                  if($state.params.hasOwnProperty(key) && $state.params[key]) {
                    id += "_" + key + "=" + $state.params[key];
                  }
                }
              }
              return id;
            }
            // if something goes wrong make sure its got a unique stateId
            return ionic.Utils.nextUid();
          },

          goToHistoryRoot: function(historyId) {
            if(historyId) {
              var hist = $rootScope.$viewHistory.histories[ historyId ];
              if(hist && hist.stack.length) {
                if($rootScope.$viewHistory.currentView && $rootScope.$viewHistory.currentView.viewId === hist.stack[0].viewId) {
                  return;
                }
                $rootScope.$viewHistory.forcedNav = {
                  viewId: hist.stack[0].viewId,
                  navAction: 'moveBack',
                  navDirection: 'back'
                };
                hist.stack[0].go();
              }
            }
          },

          _getViewById: function(viewId) {
            return (viewId ? $rootScope.$viewHistory.views[ viewId ] : null );
          },

          _getBackView: function(view) {
            return (view ? this._getViewById(view.backViewId) : null );
          },

          _getForwardView: function(view) {
            return (view ? this._getViewById(view.forwardViewId) : null );
          },

          _getHistoryById: function(historyId) {
            return (historyId ? $rootScope.$viewHistory.histories[ historyId ] : null );
          },

          _getHistory: function(scope) {
            var histObj = this._getParentHistoryObj(scope);

            if( !$rootScope.$viewHistory.histories[ histObj.historyId ] ) {
              // this history object exists in parent scope, but doesn't
              // exist in the history data yet
              $rootScope.$viewHistory.histories[ histObj.historyId ] = {
                historyId: histObj.historyId,
                parentHistoryId: this._getParentHistoryObj(histObj.scope.$parent).historyId,
                stack: [],
                cursor: -1
              };
            }

            return $rootScope.$viewHistory.histories[ histObj.historyId ];
          },

          _getParentHistoryObj: function(scope) {
            var parentScope = scope;
            while(parentScope) {
              if(parentScope.hasOwnProperty('$historyId')) {
                // this parent scope has a historyId
                return { historyId: parentScope.$historyId, scope: parentScope };
              }
              // nothing found keep climbing up
              parentScope = parentScope.$parent;
            }
            // no history for for the parent, use the root
            return { historyId: 'root', scope: $rootScope };
          },

          nextViewOptions: function(opts) {
            if(arguments.length) {
              this._nextOpts = opts;
            } else {
              return this._nextOpts;
            }
          },

          getRenderer: function(navViewElement, navViewAttrs, navViewScope) {
            var service = this;
            var registerData;
            var doAnimation;

            // climb up the DOM and see which animation classname to use, if any
            var animationClass = getParentAnimationClass(navViewElement[0]);

            function getParentAnimationClass(el) {
              var className = '';
              while(!className && el) {
                className = el.getAttribute('animation');
                el = el.parentElement;
              }

              // If they don't have an animation set explicitly, use the value in the config
              if(!className) {
                return $ionicNavViewConfig.transition;
              }

              return className;
            }

            function setAnimationClass() {
              // add the animation CSS class we're gonna use to transition between views
              if (animationClass) {
                navViewElement[0].classList.add(animationClass);
              }

              if(registerData.navDirection === 'back') {
                // animate like we're moving backward
                navViewElement[0].classList.add('reverse');
              } else {
                // defaults to animate forward
                // make sure the reverse class isn't already added
                navViewElement[0].classList.remove('reverse');
              }
            }

            return function(shouldAnimate) {

              return {

                enter: function(element) {

                  if(doAnimation && shouldAnimate) {
                    // enter with an animation
                    setAnimationClass();

                    element.addClass('ng-enter');
                    document.body.classList.add('disable-pointer-events');

                    $animate.enter(element, navViewElement, null, function() {
                      document.body.classList.remove('disable-pointer-events');
                      if (animationClass) {
                        navViewElement[0].classList.remove(animationClass);
                      }
                    });
                    return;
                  } else if(!doAnimation) {
                    document.body.classList.remove('disable-pointer-events');
                  }

                  // no animation
                  navViewElement.append(element);
                },

                leave: function() {
                  var element = navViewElement.contents();

                  if(doAnimation && shouldAnimate) {
                    // leave with an animation
                    setAnimationClass();

                    $animate.leave(element, function() {
                      element.remove();
                    });
                    return;
                  }

                  // no animation
                  element.remove();
                },

                register: function(element) {
                  // register a new view
                  registerData = service.register(navViewScope, element);
                  doAnimation = (animationClass !== null && registerData.navDirection !== null);
                  return registerData;
                }

              };
            };
          },

          disableRegisterByTagName: function(tagName) {
            // not every element should animate betwee transitions
            // For example, the <ion-tabs> directive should not animate when it enters,
            // but instead the <ion-tabs> directve would just show, and its children
            // <ion-tab> directives would do the animating, but <ion-tabs> itself is not a view
            $rootScope.$viewHistory.disabledRegistrableTagNames.push(tagName.toUpperCase());
          },

          isTagNameRegistrable: function(element) {
            // check if this element has a tagName (at its root, not recursively)
            // that shouldn't be animated, like <ion-tabs> or <ion-side-menu>
            var x, y, disabledTags = $rootScope.$viewHistory.disabledRegistrableTagNames;
            for(x=0; x<element.length; x++) {
              if(element[x].nodeType !== 1) continue;
              for(y=0; y<disabledTags.length; y++) {
                if(element[x].tagName === disabledTags[y]) {
                  return false;
                }
              }
            }
            return true;
          },

          clearHistory: function() {
            var
              histories = $rootScope.$viewHistory.histories,
              currentView = $rootScope.$viewHistory.currentView;

            if(histories) {
              for(var historyId in histories) {

                if(histories[historyId].stack) {
                  histories[historyId].stack = [];
                  histories[historyId].cursor = -1;
                }

                if(currentView && currentView.historyId === historyId) {
                  currentView.backViewId = null;
                  currentView.forwardViewId = null;
                  histories[historyId].stack.push(currentView);
                } else if(histories[historyId].destroy) {
                  histories[historyId].destroy();
                }

              }
            }

            for(var viewId in $rootScope.$viewHistory.views) {
              if(viewId !== currentView.viewId) {
                delete $rootScope.$viewHistory.views[viewId];
              }
            }

            if(currentView) {
              this.setNavViews(currentView.viewId);
            }
          }

        };

      }]);

  /**
   * @private
   */
  IonicModule.config([
    '$provide',
    function($provide) {
      function $LocationDecorator($location, $timeout) {

        $location.__hash = $location.hash;
        //Fix: when window.location.hash is set, the scrollable area
        //found nearest to body's scrollTop is set to scroll to an element
        //with that ID.
        $location.hash = function(value) {
          if (angular.isDefined(value)) {
            $timeout(function() {
              var scroll = document.querySelector('.scroll-content');
              if (scroll)
                scroll.scrollTop = 0;
            }, 0, false);
          }
          return $location.__hash(value);
        };

        return $location;
      }

      $provide.decorator('$location', ['$delegate', '$timeout', $LocationDecorator]);
    }]);


  /**
   * @ngdoc service
   * @name $ionicListDelegate
   * @module ionic
   *
   * @description
   * Delegate for controlling the {@link ionic.directive:ionList} directive.
   *
   * Methods called directly on the $ionicListDelegate service will control all lists.
   * Use the {@link ionic.service:$ionicListDelegate#$getByHandle $getByHandle}
   * method to control specific ionList instances.
   *
   * @usage
   *
   * ````html
   * <ion-content ng-controller="MyCtrl">
   *   <button class="button" ng-click="showDeleteButtons()"></button>
   *   <ion-list>
   *     <ion-item ng-repeat="i in items">>
   *       {% raw %}Hello, {{i}}!{% endraw %}
   *       <ion-delete-button class="ion-minus-circled"></ion-delete-button>
   *     </ion-item>
   *   </ion-list>
   * </ion-content>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicListDelegate) {
 *   $scope.showDeleteButtons = function() {
 *     $ionicListDelegate.showDelete(true);
 *   };
 * }
   * ```
   */
  IonicModule
    .service('$ionicListDelegate', delegateService([
    /**
     * @ngdoc method
     * @name $ionicListDelegate#showReorder
     * @param {boolean=} showReorder Set whether or not this list is showing its reorder buttons.
     * @returns {boolean} Whether the reorder buttons are shown.
     */
      'showReorder',
    /**
     * @ngdoc method
     * @name $ionicListDelegate#showDelete
     * @param {boolean=} showReorder Set whether or not this list is showing its delete buttons.
     * @returns {boolean} Whether the delete buttons are shown.
     */
      'showDelete',
    /**
     * @ngdoc method
     * @name $ionicListDelegate#canSwipeItems
     * @param {boolean=} showReorder Set whether or not this list is able to swipe to show
     * option buttons.
     * @returns {boolean} Whether the list is able to swipe to show option buttons.
     */
      'canSwipeItems',
    /**
     * @ngdoc method
     * @name $ionicListDelegate#closeOptionButtons
     * @description Closes any option buttons on the list that are swiped open.
     */
      'closeOptionButtons',
    /**
     * @ngdoc method
     * @name $ionicListDelegate#$getByHandle
     * @param {string} handle
     * @returns `delegateInstance` A delegate instance that controls only the
     * {@link ionic.directive:ionList} directives with `delegate-handle` matching
     * the given handle.
     *
     * Example: `$ionicListDelegate.$getByHandle('my-handle').showReorder(true);`
     */
    ]))

    .controller('$ionicList', [
      '$scope',
      '$attrs',
      '$parse',
      '$ionicListDelegate',
      function($scope, $attrs, $parse, $ionicListDelegate) {

        var isSwipeable = true;
        var isReorderShown = false;
        var isDeleteShown = false;

        var deregisterInstance = $ionicListDelegate._registerInstance(this, $attrs.delegateHandle);
        $scope.$on('$destroy', deregisterInstance);

        this.showReorder = function(show) {
          if (arguments.length) {
            isReorderShown = !!show;
          }
          return isReorderShown;
        };

        this.showDelete = function(show) {
          if (arguments.length) {
            isDeleteShown = !!show;
          }
          return isDeleteShown;
        };

        this.canSwipeItems = function(can) {
          if (arguments.length) {
            isSwipeable = !!can;
          }
          return isSwipeable;
        };

        this.closeOptionButtons = function() {
          this.listView && this.listView.clearDragEffects();
        };
      }]);

  IonicModule
    .controller('$ionicNavBar', [
      '$scope',
      '$element',
      '$attrs',
      '$ionicViewService',
      '$animate',
      '$compile',
      '$ionicNavBarDelegate',
      function($scope, $element, $attrs, $ionicViewService, $animate, $compile, $ionicNavBarDelegate) {
        //Let the parent know about our controller too so that children of
        //sibling content elements can know about us
        $element.parent().data('$ionNavBarController', this);

        var deregisterInstance = $ionicNavBarDelegate._registerInstance(this, $attrs.delegateHandle);

        $scope.$on('$destroy', deregisterInstance);

        var self = this;

        this.leftButtonsElement = jqLite(
          $element[0].querySelector('.buttons.left-buttons')
        );
        this.rightButtonsElement = jqLite(
          $element[0].querySelector('.buttons.right-buttons')
        );

        this.back = function() {
          var backView = $ionicViewService.getBackView();
          backView && backView.go();
          return false;
        };

        this.align = function(direction) {
          this._headerBarView.align(direction);
        };

        this.showBackButton = function(show) {
          if (arguments.length) {
            $scope.backButtonShown = !!show;
          }
          return !!($scope.hasBackButton && $scope.backButtonShown);
        };

        this.showBar = function(show) {
          if (arguments.length) {
            $scope.isInvisible = !show;
            $scope.$parent.$hasHeader = !!show;
          }
          return !$scope.isInvisible;
        };

        this.setTitle = function(title) {
          if ($scope.title === title) {
            return;
          }
          $scope.oldTitle = $scope.title;
          $scope.title = title || '';
        };

        this.changeTitle = function(title, direction) {
          if ($scope.title === title) {
            return false;
          }
          this.setTitle(title);
          $scope.isReverse = direction == 'back';
          $scope.shouldAnimate = !!direction;

          if (!$scope.shouldAnimate) {
            //We're done!
            this._headerBarView.align();
          } else {
            this._animateTitles();
          }
          return true;
        };

        this.getTitle = function() {
          return $scope.title || '';
        };

        this.getPreviousTitle = function() {
          return $scope.oldTitle || '';
        };

        /**
         * Exposed for testing
         */
        this._animateTitles = function() {
          var oldTitleEl, newTitleEl, currentTitles;

          //If we have any title right now
          //(or more than one, they could be transitioning on switch),
          //replace the first one with an oldTitle element
          currentTitles = $element[0].querySelectorAll('.title');
          if (currentTitles.length) {
            oldTitleEl = $compile('<h1 class="title" ng-bind-html="oldTitle"></h1>')($scope);
            jqLite(currentTitles[0]).replaceWith(oldTitleEl);
          }
          //Compile new title
          newTitleEl = $compile('<h1 class="title invisible" ng-bind-html="title"></h1>')($scope);

          //Animate in on next frame
          ionic.requestAnimationFrame(function() {

            oldTitleEl && $animate.leave(jqLite(oldTitleEl));

            var insert = oldTitleEl && jqLite(oldTitleEl) || null;
            $animate.enter(newTitleEl, $element, insert, function() {
              self._headerBarView.align();
            });

            //Cleanup any old titles leftover (besides the one we already did replaceWith on)
            forEach(currentTitles, function(el) {
              if (el && el.parentNode) {
                //Use .remove() to cleanup things like .data()
                jqLite(el).remove();
              }
            });

            //$apply so bindings fire
            $scope.$digest();

            //Stop flicker of new title on ios7
            ionic.requestAnimationFrame(function() {
              newTitleEl[0].classList.remove('invisible');
            });
          });
        };
      }]);


  /**
   * @private
   */
  IonicModule

    .factory('$$scrollValueCache', function() {
      return {};
    })

    .controller('$ionicScroll', [
      '$scope',
      'scrollViewOptions',
      '$timeout',
      '$window',
      '$$scrollValueCache',
      '$location',
      '$rootScope',
      '$document',
      '$ionicScrollDelegate',
      function($scope, scrollViewOptions, $timeout, $window, $$scrollValueCache, $location, $rootScope, $document, $ionicScrollDelegate) {

        var self = this;

        this._scrollViewOptions = scrollViewOptions; //for testing

        var element = this.element = scrollViewOptions.el;
        var $element = this.$element = jqLite(element);
        var scrollView = this.scrollView = new ionic.views.Scroll(scrollViewOptions);

        //Attach self to element as a controller so other directives can require this controller
        //through `require: '$ionicScroll'
        //Also attach to parent so that sibling elements can require this
        ($element.parent().length ? $element.parent() : $element)
          .data('$$ionicScrollController', this);

        var deregisterInstance = $ionicScrollDelegate._registerInstance(
          this, scrollViewOptions.delegateHandle
        );

        if (!angular.isDefined(scrollViewOptions.bouncing)) {
          ionic.Platform.ready(function() {
            scrollView.options.bouncing = true;

            if(ionic.Platform.isAndroid()) {
              // No bouncing by default on Android
              scrollView.options.bouncing = false;
              // Faster scroll decel
              scrollView.options.deceleration = 0.95;
            } else {
            }
          });
        }

        var resize = angular.bind(scrollView, scrollView.resize);
        ionic.on('resize', resize, $window);

        // set by rootScope listener if needed
        var backListenDone = angular.noop;

        $scope.$on('$destroy', function() {
          deregisterInstance();
          scrollView.__removeEventHandlers();
          ionic.off('resize', resize, $window);
          $window.removeEventListener('resize', resize);
          backListenDone();
          if (self._rememberScrollId) {
            $$scrollValueCache[self._rememberScrollId] = scrollView.getValues();
          }
        });

        $element.on('scroll', function(e) {
          var detail = (e.originalEvent || e).detail || {};
          $scope.$onScroll && $scope.$onScroll({
            event: e,
            scrollTop: detail.scrollTop || 0,
            scrollLeft: detail.scrollLeft || 0
          });
        });

        $scope.$on('$viewContentLoaded', function(e, historyData) {
          //only the top-most scroll area under a view should remember that view's
          //scroll position
          if (e.defaultPrevented) { return; }
          e.preventDefault();

          var viewId = historyData && historyData.viewId || $scope.$historyId;
          if (viewId) {
            $timeout(function() {
              self.rememberScrollPosition(viewId);
              self.scrollToRememberedPosition();

              backListenDone = $rootScope.$on('$viewHistory.viewBack', function(e, fromViewId, toViewId) {
                //When going back from this view, forget its saved scroll position
                if (viewId === fromViewId) {
                  self.forgetScrollPosition();
                }
              });
            }, 0, false);
          }
        });

        $timeout(function() {
          scrollView.run();
        });

        this._rememberScrollId = null;

        this.getScrollView = function() {
          return this.scrollView;
        };

        this.getScrollPosition = function() {
          return this.scrollView.getValues();
        };

        this.resize = function() {
          return $timeout(resize);
        };

        this.scrollTop = function(shouldAnimate) {
          this.resize().then(function() {
            scrollView.scrollTo(0, 0, !!shouldAnimate);
          });
        };

        this.scrollBottom = function(shouldAnimate) {
          this.resize().then(function() {
            var max = scrollView.getScrollMax();
            scrollView.scrollTo(max.left, max.top, !!shouldAnimate);
          });
        };

        this.scrollTo = function(left, top, shouldAnimate) {
          this.resize().then(function() {
            scrollView.scrollTo(left, top, !!shouldAnimate);
          });
        };

        this.scrollBy = function(left, top, shouldAnimate) {
          this.resize().then(function() {
            scrollView.scrollBy(left, top, !!shouldAnimate);
          });
        };

        this.anchorScroll = function(shouldAnimate) {
          this.resize().then(function() {
            var hash = $location.hash();
            var elm = hash && $document[0].getElementById(hash);
            if (!(hash && elm)) {
              scrollView.scrollTo(0,0, !!shouldAnimate);
              return;
            }
            var curElm = elm;
            var scrollLeft = 0, scrollTop = 0, levelsClimbed = 0;
            do {
              if(curElm !== null)scrollLeft += curElm.offsetLeft;
              if(curElm !== null)scrollTop += curElm.offsetTop;
              curElm = curElm.offsetParent;
              levelsClimbed++;
            } while (curElm.attributes != self.element.attributes && curElm.offsetParent);
            scrollView.scrollTo(scrollLeft, scrollTop, !!shouldAnimate);
          });
        };

        this.rememberScrollPosition = function(id) {
          if (!id) {
            throw new Error("Must supply an id to remember the scroll by!");
          }
          this._rememberScrollId = id;
        };
        this.forgetScrollPosition = function() {
          delete $$scrollValueCache[this._rememberScrollId];
          this._rememberScrollId = null;
        };
        this.scrollToRememberedPosition = function(shouldAnimate) {
          var values = $$scrollValueCache[this._rememberScrollId];
          if (values) {
            this.resize().then(function() {
              scrollView.scrollTo(+values.left, +values.top, shouldAnimate);
            });
          }
        };

        /**
         * @private
         */
        this._setRefresher = function(refresherScope, refresherElement) {
          var refresher = this.refresher = refresherElement;
          var refresherHeight = self.refresher.clientHeight || 0;
          scrollView.activatePullToRefresh(refresherHeight, function() {
            refresher.classList.add('active');
            refresherScope.$onPulling();
          }, function() {
            refresher.classList.remove('refreshing');
            refresher.classList.remove('active');
          }, function() {
            refresher.classList.add('refreshing');
            refresherScope.$onRefresh();
          });
        };
      }]);


  IonicModule
    .controller('$ionicSideMenus', [
      '$scope',
      '$attrs',
      '$ionicSideMenuDelegate',
      '$ionicPlatform',
      function($scope, $attrs, $ionicSideMenuDelegate, $ionicPlatform) {
        var self = this;
        extend(this, ionic.controllers.SideMenuController.prototype);

        this.$scope = $scope;

        ionic.controllers.SideMenuController.call(this, {
          left: { width: 275 },
          right: { width: 275 }
        });

        this.canDragContent = function(canDrag) {
          if (arguments.length) {
            $scope.dragContent = !!canDrag;
          }
          return $scope.dragContent;
        };

        this.edgeThreshold = 25;
        this.edgeThresholdEnabled = false;
        this.edgeDragThreshold = function(value) {
          if (arguments.length) {
            if (angular.isNumber(value) && value > 0) {
              this.edgeThreshold = value;
              this.edgeThresholdEnabled = true;
            } else {
              this.edgeThresholdEnabled = !!value;
            }
          }
          return this.edgeThresholdEnabled;
        };

        this.isDraggableTarget = function(e) {
          //Only restrict edge when sidemenu is closed and restriction is enabled
          var shouldOnlyAllowEdgeDrag = self.edgeThresholdEnabled && !self.isOpen();
          var startX = e.gesture.startEvent && e.gesture.startEvent.center &&
            e.gesture.startEvent.center.pageX;

          var dragIsWithinBounds = !shouldOnlyAllowEdgeDrag ||
            startX <= self.edgeThreshold ||
            startX >= self.content.offsetWidth - self.edgeThreshold;

          return ($scope.dragContent || self.isOpen()) &&
            dragIsWithinBounds &&
            !e.gesture.srcEvent.defaultPrevented &&
            !e.target.tagName.match(/input|textarea|select|object|embed/i) &&
            !e.target.isContentEditable &&
            !(e.target.dataset ? e.target.dataset.preventScroll : e.target.getAttribute('data-prevent-default') == 'true');
        };

        $scope.sideMenuContentTranslateX = 0;


        var deregisterBackButtonAction = angular.noop;
        var closeSideMenu = angular.bind(this, this.close);
        $scope.$watch(function() {
          return self.getOpenAmount() !== 0;
        }, function(isOpen) {
          deregisterBackButtonAction();
          if (isOpen) {
            deregisterBackButtonAction = $ionicPlatform.registerBackButtonAction(
              closeSideMenu,
              PLATFORM_BACK_BUTTON_PRIORITY_SIDE_MENU
            );
          }
        });

        var deregisterInstance = $ionicSideMenuDelegate._registerInstance(
          this, $attrs.delegateHandle
        );
        $scope.$on('$destroy', function() {
          deregisterInstance();
          deregisterBackButtonAction();
        });
      }]);

  IonicModule
    .controller('$ionicTab', [
      '$scope',
      '$ionicViewService',
      '$attrs',
      '$location',
      '$state',
      function($scope, $ionicViewService, $attrs, $location, $state) {
        this.$scope = $scope;

        //All of these exposed for testing
        this.hrefMatchesState = function() {
          return $attrs.href && $location.path().indexOf(
            $attrs.href.replace(/^#/, '').replace(/\/$/, '')
          ) === 0;
        };
        this.srefMatchesState = function() {
          return $attrs.uiSref && $state.includes( $attrs.uiSref.split('(')[0] );
        };
        this.navNameMatchesState = function() {
          return this.navViewName && $ionicViewService.isCurrentStateNavView(this.navViewName);
        };

        this.tabMatchesState = function() {
          return this.hrefMatchesState() || this.srefMatchesState() || this.navNameMatchesState();
        };
      }]);

  IonicModule
    .controller('$ionicTabs', [
      '$scope',
      '$ionicViewService',
      '$element',
      function($scope, $ionicViewService, $element) {
        var _selectedTab = null;
        var self = this;
        self.tabs = [];

        self.selectedIndex = function() {
          return self.tabs.indexOf(_selectedTab);
        };
        self.selectedTab = function() {
          return _selectedTab;
        };

        self.add = function(tab) {
          $ionicViewService.registerHistory(tab);
          self.tabs.push(tab);
          if(self.tabs.length === 1) {
            self.select(tab);
          }
        };

        self.remove = function(tab) {
          var tabIndex = self.tabs.indexOf(tab);
          if (tabIndex === -1) {
            return;
          }
          //Use a field like '$tabSelected' so developers won't accidentally set it in controllers etc
          if (tab.$tabSelected) {
            self.deselect(tab);
            //Try to select a new tab if we're removing a tab
            if (self.tabs.length === 1) {
              //do nothing if there are no other tabs to select
            } else {
              //Select previous tab if it's the last tab, else select next tab
              var newTabIndex = tabIndex === self.tabs.length - 1 ? tabIndex - 1 : tabIndex + 1;
              self.select(self.tabs[newTabIndex]);
            }
          }
          self.tabs.splice(tabIndex, 1);
        };

        self.deselect = function(tab) {
          if (tab.$tabSelected) {
            _selectedTab = null;
            tab.$tabSelected = false;
            (tab.onDeselect || angular.noop)();
          }
        };

        self.select = function(tab, shouldEmitEvent) {
          var tabIndex;
          if (angular.isNumber(tab)) {
            tabIndex = tab;
            tab = self.tabs[tabIndex];
          } else {
            tabIndex = self.tabs.indexOf(tab);
          }
          if (!tab || tabIndex == -1) {
            throw new Error('Cannot select tab "' + tabIndex + '"!');
          }

          if (_selectedTab && _selectedTab.$historyId == tab.$historyId) {
            if (shouldEmitEvent) {
              $ionicViewService.goToHistoryRoot(tab.$historyId);
            }
          } else {
            forEach(self.tabs, function(tab) {
              self.deselect(tab);
            });

            _selectedTab = tab;
            //Use a funny name like $tabSelected so the developer doesn't overwrite the var in a child scope
            tab.$tabSelected = true;
            (tab.onSelect || angular.noop)();

            if (shouldEmitEvent) {
              var viewData = {
                type: 'tab',
                tabIndex: tabIndex,
                historyId: tab.$historyId,
                navViewName: tab.navViewName,
                hasNavView: !!tab.navViewName,
                title: tab.title,
                //Skip the first character of href if it's #
                url: tab.href,
                uiSref: tab.uiSref
              };
              $scope.$emit('viewState.changeHistory', viewData);
            }
          }
        };
      }]);


  /*
   * We don't document the ionActionSheet directive, we instead document
   * the $ionicActionSheet service
   */
  IonicModule
    .directive('ionActionSheet', ['$document', function($document) {
      return {
        restrict: 'E',
        scope: true,
        replace: true,
        link: function($scope, $element){
          var keyUp = function(e) {
            if(e.which == 27) {
              $scope.cancel();
              $scope.$apply();
            }
          };

          var backdropClick = function(e) {
            if(e.target == $element[0]) {
              $scope.cancel();
              $scope.$apply();
            }
          };
          $scope.$on('$destroy', function() {
            $element.remove();
            $document.unbind('keyup', keyUp);
          });

          $document.bind('keyup', keyUp);
          $element.bind('click', backdropClick);
        },
        template: '<div class="action-sheet-backdrop">' +
          '<div class="action-sheet-wrapper">' +
          '<div class="action-sheet">' +
          '<div class="action-sheet-group">' +
          '<div class="action-sheet-title" ng-if="titleText" ng-bind-html="titleText"></div>' +
          '<button class="button" ng-click="buttonClicked($index)" ng-repeat="button in buttons" ng-bind-html="button.text"></button>' +
          '</div>' +
          '<div class="action-sheet-group" ng-if="destructiveText">' +
          '<button class="button destructive" ng-click="destructiveButtonClicked()" ng-bind-html="destructiveText"></button>' +
          '</div>' +
          '<div class="action-sheet-group" ng-if="cancelText">' +
          '<button class="button" ng-click="cancel()" ng-bind-html="cancelText"></button>' +
          '</div>' +
          '</div>' +
          '</div>' +
          '</div>'
      };
    }]);


  /**
   * @ngdoc directive
   * @name ionCheckbox
   * @module ionic
   * @restrict E
   * @codepen hqcju
   * @description
   * The checkbox is no different than the HTML checkbox input, except it's styled differently.
   *
   * The checkbox behaves like any [AngularJS checkbox](http://docs.angularjs.org/api/ng/input/input[checkbox]).
   *
   * @usage
   * ```html
   * <ion-checkbox ng-model="isChecked">Checkbox Label</ion-checkbox>
   * ```
   */

  IonicModule
    .directive('ionCheckbox', function() {
      return {
        restrict: 'E',
        replace: true,
        require: '?ngModel',
        transclude: true,
        template:
          '<label class="item item-checkbox">' +
          '<div class="checkbox checkbox-input-hidden disable-pointer-events">' +
          '<input type="checkbox">' +
          '<i class="checkbox-icon"></i>' +
          '</div>' +
          '<div class="item-content disable-pointer-events" ng-transclude></div>' +
          '</label>',
        compile: function(element, attr) {
          var input = element.find('input');
          forEach({
            'name': attr.name,
            'ng-value': attr.ngValue,
            'ng-model': attr.ngModel,
            'ng-checked': attr.ngChecked,
            'ng-disabled': attr.ngDisabled,
            'ng-true-value': attr.ngTrueValue,
            'ng-false-value': attr.ngFalseValue,
            'ng-change': attr.ngChange
          }, function(value, name) {
            if (isDefined(value)) {
              input.attr(name, value);
            }
          });
        }

      };
    });

  /**
   * @ngdoc directive
   * @module ionic
   * @name collectionRepeat
   * @restrict A
   * @codepen mFygh
   * @description
   * `collection-repeat` is a directive that allows you to render lists with
   * thousands of items in them, and experience little to no performance penalty.
   *
   * Demo:
   *
   * The directive renders onto the screen only the items that should be currently visible.
   * So if you have 1,000 items in your list but only ten fit on your screen,
   * collection-repeat will only render into the DOM the ten that are in the current
   * scroll position.
   *
   * Here are a few things to keep in mind while using collection-repeat:
   *
   * 1. The data supplied to collection-repeat must be an array.
   * 2. You must explicitly tell the directive what size your items will be in the DOM, using directive attributes.
   * Pixel amounts or percentages are allowed (see below).
   * 3. The elements rendered will be absolutely positioned: be sure to let your CSS work with
   * this (see below).
   * 4. Each collection-repeat list will take up all of its parent scrollView's space.
   * If you wish to have multiple lists on one page, put each list within its own
   * {@link ionic.directive:ionScroll ionScroll} container.
   * 5. You should not use the ng-show and ng-hide directives on your ion-content/ion-scroll elements that
   * have a collection-repeat inside.  ng-show and ng-hide apply the `display: none` css rule to the content's
   * style, causing the scrollView to read the width and height of the content as 0.  Resultingly,
   * collection-repeat will render elements that have just been un-hidden incorrectly.
   *
   *
   * @usage
   *
   * #### Basic Usage (single rows of items)
   *
   * Notice two things here: we use ng-style to set the height of the item to match
   * what the repeater thinks our item height is.  Additionally, we add a css rule
   * to make our item stretch to fit the full screen (since it will be absolutely
   * positioned).
   *
   * ```html
   * <ion-content ng-controller="ContentCtrl">
   *   <div class="list">
   *     <div class="item my-item"
   *       collection-repeat="item in items"
   *       collection-item-width="'100%'"
   *       collection-item-height="getItemHeight(item, $index)"
   *       ng-style="{height: getItemHeight(item, $index)}">
   *       {% raw %}{{item}}{% endraw %}
   *     </div>
   *   </div>
   * </div>
   * ```
   * ```js
   * function ContentCtrl($scope) {
 *   $scope.items = [];
 *   for (var i = 0; i < 1000; i++) {
 *     $scope.items.push('Item ' + i);
 *   }
 *
 *   $scope.getItemHeight = function(item, index) {
 *     //Make evenly indexed items be 10px taller, for the sake of example
 *     return (index % 2) === 0 ? 50 : 60;
 *   };
 * }
   * ```
   * ```css
   * .my-item {
 *   left: 0;
 *   right: 0;
 * }
   * ```
   *
   * #### Grid Usage (three items per row)
   *
   * ```html
   * <ion-content>
   *   <div class="item item-avatar my-image-item"
   *     collection-repeat="image in images"
   *     collection-item-width="'33%'"
   *     collection-item-height="'33%'">
   *     <img ng-src="{{image.src}}">
   *   </div>
   * </ion-content>
   * ```
   * Percentage of total visible list dimensions. This example shows a 3 by 3 matrix that fits on the screen (3 rows and 3 colums). Note that dimensions are used in the creation of the element and therefore a measurement of the item cannnot be used as an input dimension.
   * ```css
   * .my-image-item img {
 *   height: 33%;
 *   width: 33%;
 * }
   * ```
   *
   * @param {expression} collection-repeat The expression indicating how to enumerate a collection. These
   *   formats are currently supported:
   *
   *   * `variable in expression` – where variable is the user defined loop variable and `expression`
   *     is a scope expression giving the collection to enumerate.
   *
   *     For example: `album in artist.albums`.
   *
   *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function
   *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
   *     is specified the collection-repeat associates elements by identity in the collection. It is an error to have
   *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
   *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
   *     before specifying a tracking expression.
   *
   *     For example: `item in items` is equivalent to `item in items track by $id(item)'. This implies that the DOM elements
   *     will be associated by item identity in the array.
   *
   *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
   *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
   *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
   *     element in the same way in the DOM.
   *
   *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
   *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
   *     property is same.
   *
   *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
   *     to items in conjunction with a tracking expression.
   *
   * @param {expression} collection-item-width The width of the repeated element.  Can be a number (in pixels) or a percentage.
   * @param {expression} collection-item-height The height of the repeated element.  Can be a number (in pixels), or a percentage.
   *
   */
  var COLLECTION_REPEAT_SCROLLVIEW_XY_ERROR = "Cannot create a collection-repeat within a scrollView that is scrollable on both x and y axis.  Choose either x direction or y direction.";
  var COLLECTION_REPEAT_ATTR_HEIGHT_ERROR = "collection-repeat expected attribute collection-item-height to be a an expression that returns a number (in pixels) or percentage.";
  var COLLECTION_REPEAT_ATTR_WIDTH_ERROR = "collection-repeat expected attribute collection-item-width to be a an expression that returns a number (in pixels) or percentage.";
  var COLLECTION_REPEAT_ATTR_REPEAT_ERROR = "collection-repeat expected expression in form of '_item_ in _collection_[ track by _id_]' but got '%'";

  IonicModule
    .directive({
      ngSrc: collectionRepeatSrcDirective('ngSrc', 'src'),
      ngSrcset: collectionRepeatSrcDirective('ngSrcset', 'srcset'),
      ngHref: collectionRepeatSrcDirective('ngHref', 'href')
    })
    .directive('collectionRepeat', [
      '$collectionRepeatManager',
      '$collectionDataSource',
      '$parse',
      function($collectionRepeatManager, $collectionDataSource, $parse) {
        return {
          priority: 1000,
          transclude: 'element',
          terminal: true,
          $$tlb: true,
          require: '^$ionicScroll',
          controller: [function(){}],
          link: function($scope, $element, $attr, scrollCtrl, $transclude) {
            var wrap = jqLite('<div style="position:relative;">');
            $element.parent()[0].insertBefore(wrap[0], $element[0]);
            wrap.append($element);

            var scrollView = scrollCtrl.scrollView;
            if (scrollView.options.scrollingX && scrollView.options.scrollingY) {
              throw new Error(COLLECTION_REPEAT_SCROLLVIEW_XY_ERROR);
            }

            var isVertical = !!scrollView.options.scrollingY;
            if (isVertical && !$attr.collectionItemHeight) {
              throw new Error(COLLECTION_REPEAT_ATTR_HEIGHT_ERROR);
            } else if (!isVertical && !$attr.collectionItemWidth) {
              throw new Error(COLLECTION_REPEAT_ATTR_WIDTH_ERROR);
            }

            var heightParsed = $parse($attr.collectionItemHeight || '"100%"');
            var widthParsed = $parse($attr.collectionItemWidth || '"100%"');

            var heightGetter = function(scope, locals) {
              var result = heightParsed(scope, locals);
              if (isString(result) && result.indexOf('%') > -1) {
                return Math.floor(parseInt(result, 10) / 100 * scrollView.__clientHeight);
              }
              return result;
            };
            var widthGetter = function(scope, locals) {
              var result = widthParsed(scope, locals);
              if (isString(result) && result.indexOf('%') > -1) {
                return Math.floor(parseInt(result, 10) / 100 * scrollView.__clientWidth);
              }
              return result;
            };

            var match = $attr.collectionRepeat.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
            if (!match) {
              throw new Error(COLLECTION_REPEAT_ATTR_REPEAT_ERROR
                .replace('%', $attr.collectionRepeat));
            }
            var keyExpr = match[1];
            var listExpr = match[2];
            var trackByExpr = match[3];

            var dataSource = new $collectionDataSource({
              scope: $scope,
              transcludeFn: $transclude,
              transcludeParent: $element.parent(),
              keyExpr: keyExpr,
              listExpr: listExpr,
              trackByExpr: trackByExpr,
              heightGetter: heightGetter,
              widthGetter: widthGetter
            });
            var collectionRepeatManager = new $collectionRepeatManager({
              dataSource: dataSource,
              element: scrollCtrl.$element,
              scrollView: scrollCtrl.scrollView,
            });

            $scope.$watchCollection(listExpr, function(value) {
              if (value && !angular.isArray(value)) {
                throw new Error("collection-repeat expects an array to repeat over, but instead got '" + typeof value + "'.");
              }
              rerender(value);
            });

            var scrollViewContent = scrollCtrl.scrollView.__content;
            function rerender(value) {
              var beforeSiblings = [];
              var afterSiblings = [];
              var before = true;
              forEach(scrollViewContent.children, function(node, i) {
                if ( ionic.DomUtil.elementIsDescendant($element[0], node, scrollViewContent) ) {
                  before = false;
                } else {
                  var width = node.offsetWidth;
                  var height = node.offsetHeight;
                  if (width && height) {
                    var element = jqLite(node);
                    (before ? beforeSiblings : afterSiblings).push({
                      width: node.offsetWidth,
                      height: node.offsetHeight,
                      element: element,
                      scope: element.isolateScope() || element.scope(),
                      isOutside: true
                    });
                  }
                }
              });

              scrollView.resize();
              dataSource.setData(value, beforeSiblings, afterSiblings);
              collectionRepeatManager.resize();
            }
            function onWindowResize() {
              rerender($scope.$eval(listExpr));
            }

            ionic.on('resize', onWindowResize, window);

            $scope.$on('$destroy', function() {
              collectionRepeatManager.destroy();
              dataSource.destroy();
              ionic.off('resize', onWindowResize, window);
            });
          }
        };
      }]);

// Fix for #1674
// Problem: if an ngSrc or ngHref expression evaluates to a falsy value, it will
// not erase the previous truthy value of the href.
// In collectionRepeat, we re-use elements from before. So if the ngHref expression
// evaluates to truthy for item 1 and then falsy for item 2, if an element changes
// from representing item 1 to representing item 2, item 2 will still have
// item 1's href value.
// Solution:  erase the href or src attribute if ngHref/ngSrc are falsy.
  function collectionRepeatSrcDirective(ngAttrName, attrName) {
    return [function() {
      return {
        priority: '99', // it needs to run after the attributes are interpolated
        link: function(scope, element, attr, collectionRepeatCtrl) {
          if (!collectionRepeatCtrl) return;
          attr.$observe(ngAttrName, function(value) {
            element[0][attr] = '';
            setTimeout(function() {
              element[0][attr] = value;
            });
          });
        }
      };
    }];
  }

  /**
   * @ngdoc directive
   * @name ionContent
   * @module ionic
   * @delegate ionic.service:$ionicScrollDelegate
   * @restrict E
   *
   * @description
   * The ionContent directive provides an easy to use content area that can be configured
   * to use Ionic's custom Scroll View, or the built in overflow scrolling of the browser.
   *
   * While we recommend using the custom Scroll features in Ionic in most cases, sometimes
   * (for performance reasons) only the browser's native overflow scrolling will suffice,
   * and so we've made it easy to toggle between the Ionic scroll implementation and
   * overflow scrolling.
   *
   * You can implement pull-to-refresh with the {@link ionic.directive:ionRefresher}
   * directive, and infinite scrolling with the {@link ionic.directive:ionInfiniteScroll}
   * directive.
   *
   * Be aware that this directive gets its own child scope. If you do not understand why this
   * is important, you can read [https://docs.angularjs.org/guide/scope](https://docs.angularjs.org/guide/scope).
   *
   * @param {string=} delegate-handle The handle used to identify this scrollView
   * with {@link ionic.service:$ionicScrollDelegate}.
   * @param {string=} direction Which way to scroll. 'x' or 'y' or 'xy'. Default 'y'.
   * @param {boolean=} padding Whether to add padding to the content.
   * of the content.  Defaults to true on iOS, false on Android.
   * @param {boolean=} scroll Whether to allow scrolling of content.  Defaults to true.
   * @param {boolean=} overflow-scroll Whether to use overflow-scrolling instead of
   * Ionic scroll.
   * @param {boolean=} scrollbar-x Whether to show the horizontal scrollbar. Default true.
   * @param {boolean=} scrollbar-y Whether to show the vertical scrollbar. Default true.
   * @param {string=} start-y Initial vertical scroll position. Default 0.
   * of the content.  Defaults to true on iOS, false on Android.
   * @param {expression=} on-scroll Expression to evaluate when the content is scrolled.
   * @param {expression=} on-scroll-complete Expression to evaluate when a scroll action completes.
   * @param {boolean=} has-bouncing Whether to allow scrolling to bounce past the edges
   * of the content.  Defaults to true on iOS, false on Android.
   */
  IonicModule
    .directive('ionContent', [
      '$timeout',
      '$controller',
      '$ionicBind',
      function($timeout, $controller, $ionicBind) {
        return {
          restrict: 'E',
          require: '^?ionNavView',
          scope: true,
          priority: 800,
          compile: function(element, attr) {
            var innerElement;

            element.addClass('scroll-content ionic-scroll');

            if (attr.scroll != 'false') {
              //We cannot use normal transclude here because it breaks element.data()
              //inheritance on compile
              innerElement = jqLite('<div class="scroll"></div>');
              innerElement.append(element.contents());
              element.append(innerElement);
            } else {
              element.addClass('scroll-content-false');
            }

            return { pre: prelink };
            function prelink($scope, $element, $attr, navViewCtrl) {
              var parentScope = $scope.$parent;
              $scope.$watch(function() {
                return (parentScope.$hasHeader ? ' has-header' : '')  +
                  (parentScope.$hasSubheader ? ' has-subheader' : '') +
                  (parentScope.$hasFooter ? ' has-footer' : '') +
                  (parentScope.$hasSubfooter ? ' has-subfooter' : '') +
                  (parentScope.$hasTabs ? ' has-tabs' : '') +
                  (parentScope.$hasTabsTop ? ' has-tabs-top' : '');
              }, function(className, oldClassName) {
                $element.removeClass(oldClassName);
                $element.addClass(className);
              });

              //Only this ionContent should use these variables from parent scopes
              $scope.$hasHeader = $scope.$hasSubheader =
                $scope.$hasFooter = $scope.$hasSubfooter =
                  $scope.$hasTabs = $scope.$hasTabsTop =
                    false;
              $ionicBind($scope, $attr, {
                $onScroll: '&onScroll',
                $onScrollComplete: '&onScrollComplete',
                hasBouncing: '@',
                padding: '@',
                direction: '@',
                scrollbarX: '@',
                scrollbarY: '@',
                startX: '@',
                startY: '@',
                scrollEventInterval: '@'
              });
              $scope.direction = $scope.direction || 'y';

              if (angular.isDefined($attr.padding)) {
                $scope.$watch($attr.padding, function(newVal) {
                  (innerElement || $element).toggleClass('padding', !!newVal);
                });
              }

              if ($attr.scroll === "false") {
                //do nothing
              } else if(attr.overflowScroll === "true") {
                $element.addClass('overflow-scroll');
              } else {
                $controller('$ionicScroll', {
                  $scope: $scope,
                  scrollViewOptions: {
                    el: $element[0],
                    delegateHandle: attr.delegateHandle,
                    bouncing: $scope.$eval($scope.hasBouncing),
                    startX: $scope.$eval($scope.startX) || 0,
                    startY: $scope.$eval($scope.startY) || 0,
                    scrollbarX: $scope.$eval($scope.scrollbarX) !== false,
                    scrollbarY: $scope.$eval($scope.scrollbarY) !== false,
                    scrollingX: $scope.direction.indexOf('x') >= 0,
                    scrollingY: $scope.direction.indexOf('y') >= 0,
                    scrollEventInterval: parseInt($scope.scrollEventInterval, 10) || 10,
                    scrollingComplete: function() {
                      $scope.$onScrollComplete({
                        scrollTop: this.__scrollTop,
                        scrollLeft: this.__scrollLeft
                      });
                    }
                  }
                });
              }

            }
          }
        };
      }]);

  var GESTURE_DIRECTIVES = 'onHold onTap onTouch onRelease onDrag onDragUp onDragRight onDragDown onDragLeft onSwipe onSwipeUp onSwipeRight onSwipeDown onSwipeLeft'.split(' ');

  GESTURE_DIRECTIVES.forEach(function(name) {
    IonicModule.directive(name, gestureDirective(name));
  });


  /**
   * @ngdoc directive
   * @name onHold
   * @module ionic
   * @restrict A
   *
   * @description
   * Touch stays at the same location for 500ms.
   *
   * @usage
   * ```html
   * <button on-hold="onHold()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onTap
   * @module ionic
   * @restrict A
   *
   * @description
   * Quick touch at a location. If the duration of the touch goes
   * longer than 250ms it is no longer a tap gesture.
   *
   * @usage
   * ```html
   * <button on-tap="onTap()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onTouch
   * @module ionic
   * @restrict A
   *
   * @description
   * Called immediately when the user first begins a touch. This
   * gesture does not wait for a touchend/mouseup.
   *
   * @usage
   * ```html
   * <button on-touch="onTouch()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onRelease
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when the user ends a touch.
   *
   * @usage
   * ```html
   * <button on-release="onRelease()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onDrag
   * @module ionic
   * @restrict A
   *
   * @description
   * Move with one touch around on the page. Blocking the scrolling when
   * moving left and right is a good practice. When all the drag events are
   * blocking you disable scrolling on that area.
   *
   * @usage
   * ```html
   * <button on-drag="onDrag()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onDragUp
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when the element is dragged up.
   *
   * @usage
   * ```html
   * <button on-drag-up="onDragUp()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onDragRight
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when the element is dragged to the right.
   *
   * @usage
   * ```html
   * <button on-drag-right="onDragRight()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onDragDown
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when the element is dragged down.
   *
   * @usage
   * ```html
   * <button on-drag-down="onDragDown()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onDragLeft
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when the element is dragged to the left.
   *
   * @usage
   * ```html
   * <button on-drag-left="onDragLeft()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onSwipe
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when a moving touch has a high velocity in any direction.
   *
   * @usage
   * ```html
   * <button on-swipe="onSwipe()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onSwipeUp
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when a moving touch has a high velocity moving up.
   *
   * @usage
   * ```html
   * <button on-swipe-up="onSwipeUp()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onSwipeRight
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when a moving touch has a high velocity moving to the right.
   *
   * @usage
   * ```html
   * <button on-swipe-right="onSwipeRight()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onSwipeDown
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when a moving touch has a high velocity moving down.
   *
   * @usage
   * ```html
   * <button on-swipe-down="onSwipeDown()" class="button">Test</button>
   * ```
   */


  /**
   * @ngdoc directive
   * @name onSwipeLeft
   * @module ionic
   * @restrict A
   *
   * @description
   * Called when a moving touch has a high velocity moving to the left.
   *
   * @usage
   * ```html
   * <button on-swipe-left="onSwipeLeft()" class="button">Test</button>
   * ```
   */


  function gestureDirective(directiveName) {
    return ['$ionicGesture', '$parse', function($ionicGesture, $parse) {
      var eventType = directiveName.substr(2).toLowerCase();

      return function(scope, element, attr) {
        var fn = $parse( attr[directiveName] );

        var listener = function(ev) {
          scope.$apply(function() {
            fn(scope, {
              $event: ev
            });
          });
        };

        var gesture = $ionicGesture.on(eventType, listener, element);

        scope.$on('$destroy', function() {
          $ionicGesture.off(gesture, eventType, listener);
        });
      };
    }];
  }


  IonicModule
    .directive('ionNavBar', tapScrollToTopDirective())
    .directive('ionHeaderBar', tapScrollToTopDirective())

  /**
   * @ngdoc directive
   * @name ionHeaderBar
   * @module ionic
   * @restrict E
   *
   * @description
   * Adds a fixed header bar above some content.
   *
   * Can also be a subheader (lower down) if the 'bar-subheader' class is applied.
   * See [the header CSS docs](/docs/components/#subheader).
   *
   * Note: If you use ionHeaderBar in combination with ng-if, the surrounding content
   * will not align correctly.  This will be fixed soon.
   *
   * @param {string=} align-title Where to align the title.
   * Available: 'left', 'right', or 'center'.  Defaults to 'center'.
   * @param {boolean=} no-tap-scroll By default, the header bar will scroll the
   * content to the top when tapped.  Set no-tap-scroll to true to disable this
   * behavior.
   * Available: true or false.  Defaults to false.
   *
   * @usage
   * ```html
   * <ion-header-bar align-title="left" class="bar-positive">
   *   <div class="buttons">
   *     <button class="button" ng-click="doSomething()">Left Button</button>
   *   </div>
   *   <h1 class="title">Title!</h1>
   *   <div class="buttons">
   *     <button class="button">Right Button</button>
   *   </div>
   * </ion-header-bar>
   * <ion-content>
   *   Some content!
   * </ion-content>
   * ```
   */
    .directive('ionHeaderBar', headerFooterBarDirective(true))

  /**
   * @ngdoc directive
   * @name ionFooterBar
   * @module ionic
   * @restrict E
   *
   * @description
   * Adds a fixed footer bar below some content.
   *
   * Can also be a subfooter (higher up) if the 'bar-subfooter' class is applied.
   * See [the footer CSS docs](/docs/components/#footer).
   *
   * Note: If you use ionFooterBar in combination with ng-if, the surrounding content
   * will not align correctly.  This will be fixed soon.
   *
   * @param {string=} align-title Where to align the title.
   * Available: 'left', 'right', or 'center'.  Defaults to 'center'.
   *
   * @usage
   * ```html
   * <ion-content>
   *   Some content!
   * </ion-content>
   * <ion-footer-bar align-title="left" class="bar-assertive">
   *   <div class="buttons">
   *     <button class="button">Left Button</button>
   *   </div>
   *   <h1 class="title">Title!</h1>
   *   <div class="buttons" ng-click="doSomething()">
   *     <button class="button">Right Button</button>
   *   </div>
   * </ion-footer-bar>
   * ```
   */
    .directive('ionFooterBar', headerFooterBarDirective(false));

  function tapScrollToTopDirective() {
    return ['$ionicScrollDelegate', function($ionicScrollDelegate) {
      return {
        restrict: 'E',
        link: function($scope, $element, $attr) {
          if ($attr.noTapScroll == 'true') {
            return;
          }
          ionic.on('tap', onTap, $element[0]);
          $scope.$on('$destroy', function() {
            ionic.off('tap', onTap, $element[0]);
          });

          function onTap(e) {
            var depth = 3;
            var current = e.target;
            //Don't scroll to top in certain cases
            while (depth-- && current) {
              if (current.classList.contains('button') ||
                current.tagName.match(/input|textarea|select/i) ||
                current.isContentEditable) {
                return;
              }
              current = current.parentNode;
            }
            var touch = e.gesture && e.gesture.touches[0] || e.detail.touches[0];
            var bounds = $element[0].getBoundingClientRect();
            if (ionic.DomUtil.rectContains(
              touch.pageX, touch.pageY,
              bounds.left, bounds.top - 20,
                bounds.left + bounds.width, bounds.top + bounds.height
            )) {
              $ionicScrollDelegate.scrollTop(true);
            }
          }
        }
      };
    }];
  }

  function headerFooterBarDirective(isHeader) {
    return [function() {
      return {
        restrict: 'E',
        compile: function($element, $attr) {
          $element.addClass(isHeader ? 'bar bar-header' : 'bar bar-footer');
          var parent = $element[0].parentNode;
          if(parent.querySelector('.tabs-top'))$element.addClass('has-tabs-top');
          return { pre: prelink };
          function prelink($scope, $element, $attr) {
            var hb = new ionic.views.HeaderBar({
              el: $element[0],
              alignTitle: $attr.alignTitle || 'center'
            });

            var el = $element[0];

            if (isHeader) {
              $scope.$watch(function() { return el.className; }, function(value) {
                var isShown = value.indexOf('ng-hide') === -1;
                var isSubheader = value.indexOf('bar-subheader') !== -1;
                $scope.$hasHeader = isShown && !isSubheader;
                $scope.$hasSubheader = isShown && isSubheader;
              });
              $scope.$on('$destroy', function() {
                delete $scope.$hasHeader;
                delete $scope.$hasSubheader;
              });
            } else {
              $scope.$watch(function() { return el.className; }, function(value) {
                var isShown = value.indexOf('ng-hide') === -1;
                var isSubfooter = value.indexOf('bar-subfooter') !== -1;
                $scope.$hasFooter = isShown && !isSubfooter;
                $scope.$hasSubfooter = isShown && isSubfooter;
              });
              $scope.$on('$destroy', function() {
                delete $scope.$hasFooter;
                delete $scope.$hasSubfooter;
              });
              $scope.$watch('$hasTabs', function(val) {
                $element.toggleClass('has-tabs', !!val);
              });
            }
          }
        }
      };
    }];
  }

  /**
   * @ngdoc directive
   * @name ionInfiniteScroll
   * @module ionic
   * @parent ionic.directive:ionContent, ionic.directive:ionScroll
   * @restrict E
   *
   * @description
   * The ionInfiniteScroll directive allows you to call a function whenever
   * the user gets to the bottom of the page or near the bottom of the page.
   *
   * The expression you pass in for `on-infinite` is called when the user scrolls
   * greater than `distance` away from the bottom of the content.  Once `on-infinite`
   * is done loading new data, it should broadcast the `scroll.infiniteScrollComplete`
   * event from your controller (see below example).
   *
   * @param {expression} on-infinite What to call when the scroller reaches the
   * bottom.
   * @param {string=} distance The distance from the bottom that the scroll must
   * reach to trigger the on-infinite expression. Default: 1%.
   * @param {string=} icon The icon to show while loading. Default: 'ion-loading-d'.
   *
   * @usage
   * ```html
   * <ion-content ng-controller="MyController">
   *   <ion-infinite-scroll
   *     on-infinite="loadMore()"
   *     distance="1%">
   *   </ion-infinite-scroll>
   * </ion-content>
   * ```
   * ```js
   * function MyController($scope, $http) {
 *   $scope.items = [];
 *   $scope.loadMore = function() {
 *     $http.get('/more-items').success(function(items) {
 *       useItems(items);
 *       $scope.$broadcast('scroll.infiniteScrollComplete');
 *     });
 *   };
 *
 *   $scope.$on('stateChangeSuccess', function() {
 *     $scope.loadMore();
 *   });
 * }
   * ```
   *
   * An easy to way to stop infinite scroll once there is no more data to load
   * is to use angular's `ng-if` directive:
   *
   * ```html
   * <ion-infinite-scroll
   *   ng-if="moreDataCanBeLoaded()"
   *   icon="ion-loading-c"
   *   on-infinite="loadMoreData()">
   * </ion-infinite-scroll>
   * ```
   */
  IonicModule
    .directive('ionInfiniteScroll', ['$timeout', function($timeout) {
      function calculateMaxValue(distance, maximum, isPercent) {
        return isPercent ?
          maximum * (1 - parseFloat(distance,10) / 100) :
          maximum - parseFloat(distance, 10);
      }
      return {
        restrict: 'E',
        require: ['^$ionicScroll', 'ionInfiniteScroll'],
        template: '<i class="icon {{icon()}} icon-refreshing"></i>',
        scope: true,
        controller: ['$scope', '$attrs', function($scope, $attrs) {
          this.isLoading = false;
          this.scrollView = null; //given by link function
          this.getMaxScroll = function() {
            var distance = ($attrs.distance || '2.5%').trim();
            var isPercent = distance.indexOf('%') !== -1;
            var maxValues = this.scrollView.getScrollMax();
            return {
              left: this.scrollView.options.scrollingX ?
                calculateMaxValue(distance, maxValues.left, isPercent) :
                -1,
              top: this.scrollView.options.scrollingY ?
                calculateMaxValue(distance, maxValues.top, isPercent) :
                -1
            };
          };
        }],
        link: function($scope, $element, $attrs, ctrls) {
          var scrollCtrl = ctrls[0];
          var infiniteScrollCtrl = ctrls[1];
          var scrollView = infiniteScrollCtrl.scrollView = scrollCtrl.scrollView;

          $scope.icon = function() {
            return angular.isDefined($attrs.icon) ? $attrs.icon : 'ion-loading-d';
          };

          var onInfinite = function() {
            $element[0].classList.add('active');
            infiniteScrollCtrl.isLoading = true;
            $scope.$parent && $scope.$parent.$apply($attrs.onInfinite || '');
          };

          var finishInfiniteScroll = function() {
            $element[0].classList.remove('active');
            $timeout(function() {
              scrollView.resize();
              checkBounds();
            }, 0, false);
            infiniteScrollCtrl.isLoading = false;
          };

          $scope.$on('scroll.infiniteScrollComplete', function() {
            finishInfiniteScroll();
          });

          $scope.$on('$destroy', function() {
            scrollCtrl.$element.off('scroll', checkBounds);
          });

          var checkBounds = ionic.animationFrameThrottle(checkInfiniteBounds);

          //Check bounds on start, after scrollView is fully rendered
          setTimeout(checkBounds);
          scrollCtrl.$element.on('scroll', checkBounds);

          function checkInfiniteBounds() {
            if (infiniteScrollCtrl.isLoading) return;

            var scrollValues = scrollView.getValues();
            var maxScroll = infiniteScrollCtrl.getMaxScroll();

            if ((maxScroll.left !== -1 && scrollValues.left >= maxScroll.left) ||
              (maxScroll.top !== -1 && scrollValues.top >= maxScroll.top)) {
              onInfinite();
            }
          }
        }
      };
    }]);

  var ITEM_TPL_CONTENT_ANCHOR =
    '<a class="item-content" ng-href="{{$href()}}" target="{{$target()}}"></a>';
  var ITEM_TPL_CONTENT =
    '<div class="item-content"></div>';
  /**
   * @ngdoc directive
   * @name ionItem
   * @parent ionic.directive:ionList
   * @module ionic
   * @restrict E
   * Creates a list-item that can easily be swiped,
   * deleted, reordered, edited, and more.
   *
   * See {@link ionic.directive:ionList} for a complete example & explanation.
   *
   * Can be assigned any item class name. See the
   * [list CSS documentation](/docs/components/#list).
   *
   * @usage
   *
   * ```html
   * <ion-list>
   *   <ion-item>Hello!</ion-item>
   * </ion-list>
   * ```
   */
  IonicModule
    .directive('ionItem', [
      '$animate',
      '$compile',
      function($animate, $compile) {
        return {
          restrict: 'E',
          controller: ['$scope', '$element', function($scope, $element) {
            this.$scope = $scope;
            this.$element = $element;
          }],
          scope: true,
          compile: function($element, $attrs) {
            var isAnchor = angular.isDefined($attrs.href) ||
              angular.isDefined($attrs.ngHref) ||
              angular.isDefined($attrs.uiSref);
            var isComplexItem = isAnchor ||
              //Lame way of testing, but we have to know at compile what to do with the element
              /ion-(delete|option|reorder)-button/i.test($element.html());

            if (isComplexItem) {
              var innerElement = jqLite(isAnchor ? ITEM_TPL_CONTENT_ANCHOR : ITEM_TPL_CONTENT);
              innerElement.append($element.contents());

              $element.append(innerElement);
              $element.addClass('item item-complex');
            } else {
              $element.addClass('item');
            }

            return function link($scope, $element, $attrs) {
              $scope.$href = function() {
                return $attrs.href || $attrs.ngHref;
              };
              $scope.$target = function() {
                return $attrs.target || '_self';
              };
            };
          }
        };
      }]);


  var ITEM_TPL_DELETE_BUTTON =
    '<div class="item-left-edit item-delete enable-pointer-events">' +
    '</div>';
  /**
   * @ngdoc directive
   * @name ionDeleteButton
   * @parent ionic.directive:ionItem
   * @module ionic
   * @restrict E
   * Creates a delete button inside a list item, that is visible when the
   * {@link ionic.directive:ionList ionList parent's} `show-delete` evaluates to true or
   * `$ionicListDelegate.showDelete(true)` is called.
   *
   * Takes any ionicon as a class.
   *
   * See {@link ionic.directive:ionList} for a complete example & explanation.
   *
   * @usage
   *
   * ```html
   * <ion-list show-delete="shouldShowDelete">
   *   <ion-item>
   *     <ion-delete-button class="ion-minus-circled"></ion-delete-button>
   *     Hello, list item!
   *   </ion-item>
   * </ion-list>
   * <ion-toggle ng-model="shouldShowDelete">
   *   Show Delete?
   * </ion-toggle>
   * ```
   */
  IonicModule
    .directive('ionDeleteButton', ['$animate', function($animate) {
      return {
        restrict: 'E',
        require: ['^ionItem', '^?ionList'],
        //Run before anything else, so we can move it before other directives process
        //its location (eg ngIf relies on the location of the directive in the dom)
        priority: Number.MAX_VALUE,
        compile: function($element, $attr) {
          //Add the classes we need during the compile phase, so that they stay
          //even if something else like ngIf removes the element and re-addss it
          $attr.$set('class', ($attr['class'] || '') + ' button icon button-icon', true);
          return function($scope, $element, $attr, ctrls) {
            var itemCtrl = ctrls[0];
            var listCtrl = ctrls[1];
            var container = jqLite(ITEM_TPL_DELETE_BUTTON);
            container.append($element);
            itemCtrl.$element.append(container).addClass('item-left-editable');

            if (listCtrl && listCtrl.showDelete()) {
              container.addClass('visible active');
            }
          };
        }
      };
    }]);


  IonicModule
    .directive('itemFloatingLabel', function() {
      return {
        restrict: 'C',
        link: function(scope, element) {
          var el = element[0];
          var input = el.querySelector('input, textarea');
          var inputLabel = el.querySelector('.input-label');

          if ( !input || !inputLabel ) return;

          var onInput = function() {
            if ( input.value ) {
              inputLabel.classList.add('has-input');
            } else {
              inputLabel.classList.remove('has-input');
            }
          };

          input.addEventListener('input', onInput);

          var ngModelCtrl = angular.element(input).controller('ngModel');
          if ( ngModelCtrl ) {
            ngModelCtrl.$render = function() {
              input.value = ngModelCtrl.$viewValue || '';
              onInput();
            };
          }

          scope.$on('$destroy', function() {
            input.removeEventListener('input', onInput);
          });
        }
      };
    });

  var ITEM_TPL_OPTION_BUTTONS =
    '<div class="item-options invisible">' +
    '</div>';
  /**
   * @ngdoc directive
   * @name ionOptionButton
   * @parent ionic.directive:ionItem
   * @module ionic
   * @restrict E
   * Creates an option button inside a list item, that is visible when the item is swiped
   * to the left by the user.  Swiped open option buttons can be hidden with
   * {@link ionic.service:$ionicListDelegate#closeOptionButtons $ionicListDelegate#closeOptionButtons}.
   *
   * Can be assigned any button class.
   *
   * See {@link ionic.directive:ionList} for a complete example & explanation.
   *
   * @usage
   *
   * ```html
   * <ion-list>
   *   <ion-item>
   *     I love kittens!
   *     <ion-option-button class="button-positive">Share</ion-option-button>
   *     <ion-option-button class="button-assertive">Edit</ion-option-button>
   *   </ion-item>
   * </ion-list>
   * ```
   */
  IonicModule
    .directive('ionOptionButton', ['$compile', function($compile) {
      function stopPropagation(e) {
        e.stopPropagation();
      }
      return {
        restrict: 'E',
        require: '^ionItem',
        priority: Number.MAX_VALUE,
        compile: function($element, $attr) {
          $attr.$set('class', ($attr['class'] || '') + ' button', true);
          return function($scope, $element, $attr, itemCtrl) {
            if (!itemCtrl.optionsContainer) {
              itemCtrl.optionsContainer = jqLite(ITEM_TPL_OPTION_BUTTONS);
              itemCtrl.$element.append(itemCtrl.optionsContainer);
            }
            itemCtrl.optionsContainer.append($element);

            //Don't bubble click up to main .item
            $element.on('click', stopPropagation);
          };
        }
      };
    }]);

  var ITEM_TPL_REORDER_BUTTON =
    '<div data-prevent-scroll="true" class="item-right-edit item-reorder enable-pointer-events">' +
    '</div>';

  /**
   * @ngdoc directive
   * @name ionReorderButton
   * @parent ionic.directive:ionItem
   * @module ionic
   * @restrict E
   * Creates a reorder button inside a list item, that is visible when the
   * {@link ionic.directive:ionList ionList parent's} `show-reorder` evaluates to true or
   * `$ionicListDelegate.showReorder(true)` is called.
   *
   * Can be dragged to reorder items in the list. Takes any ionicon class.
   *
   * Note: Reordering works best when used with `ng-repeat`.  Be sure that all `ion-item` children of an `ion-list` are part of the same `ng-repeat` expression.
   *
   * When an item reorder is complete, the expression given in the `on-reorder` attribute is called. The `on-reorder` expression is given two locals that can be used: `$fromIndex` and `$toIndex`.  See below for an example.
   *
   * Look at {@link ionic.directive:ionList} for more examples.
   *
   * @usage
   *
   * ```html
   * <ion-list ng-controller="MyCtrl">
   *   <ion-item ng-repeat="item in items">
   *     Item {{item}}
   *     <ion-reorder-button class="ion-navicon"
   *                         on-reorder="moveItem(item, $fromIndex, $toIndex)">
   *     </ion-reorder>
   *   </ion-item>
   * </ion-list>
   * ```
   * ```js
   * function MyCtrl($scope) {
*   $scope.items = [1, 2, 3, 4];
*   $scope.moveItem = function(item, fromIndex, toIndex) {
*     //Move the item in the array
*     $scope.items.splice(fromIndex, 1);
*     $scope.items.splice(toIndex, 0, item);
*   };
* }
   * ```
   *
   * @param {expression=} on-reorder Expression to call when an item is reordered.
   * Parameters given: $fromIndex, $toIndex.
   */
  IonicModule
    .directive('ionReorderButton', ['$animate', '$parse', function($animate, $parse) {
      return {
        restrict: 'E',
        require: ['^ionItem', '^?ionList'],
        priority: Number.MAX_VALUE,
        compile: function($element, $attr) {
          $attr.$set('class', ($attr['class'] || '') + ' button icon button-icon', true);
          $element[0].setAttribute('data-prevent-scroll', true);
          return function($scope, $element, $attr, ctrls) {
            var itemCtrl = ctrls[0];
            var listCtrl = ctrls[1];
            var onReorderFn = $parse($attr.onReorder);

            $scope.$onReorder = function(oldIndex, newIndex) {
              onReorderFn($scope, {
                $fromIndex: oldIndex,
                $toIndex: newIndex
              });
            };

            var container = jqLite(ITEM_TPL_REORDER_BUTTON);
            container.append($element);
            itemCtrl.$element.append(container).addClass('item-right-editable');

            if (listCtrl && listCtrl.showReorder()) {
              container.addClass('visible active');
            }
          };
        }
      };
    }]);

  /**
   * @ngdoc directive
   * @name keyboardAttach
   * @module ionic
   * @restrict A
   *
   * @description
   * keyboard-attach is an attribute directive which will cause an element to float above
   * the keyboard when the keyboard shows. Currently only supports the
   * [ion-footer-bar]({{ page.versionHref }}/api/directive/ionFooterBar/) directive.
   *
   * ### Notes
   * - This directive requires the
   * [Ionic Keyboard Plugin](https://github.com/driftyco/ionic-plugins-keyboard).
   * - On Android not in fullscreen mode, i.e. you have
   *   `<preference name="Fullscreen" value="false" />` or no preference in your `config.xml` file,
   *   this directive is unnecessary since it is the default behavior.
   * - On iOS, if there is an input in your footer, you will need to set
   *   `cordova.plugins.Keyboard.disableScroll(true)`.
   *
   * @usage
   *
   * ```html
   *  <ion-footer-bar align-title="left" keyboard-attach class="bar-assertive">
   *    <h1 class="title">Title!</h1>
   *  </ion-footer-bar>
   * ```
   */

  IonicModule
    .directive('keyboardAttach', function() {
      return function(scope, element, attrs) {
        ionic.on('native.keyboardshow', onShow, window);
        ionic.on('native.keyboardhide', onHide, window);

        //deprecated
        ionic.on('native.showkeyboard', onShow, window);
        ionic.on('native.hidekeyboard', onHide, window);


        var scrollCtrl;

        function onShow(e) {
          if (ionic.Platform.isAndroid() && !ionic.Platform.isFullScreen) {
            return;
          }

          //for testing
          var keyboardHeight = e.keyboardHeight || e.detail.keyboardHeight;
          element.css('bottom', keyboardHeight + "px");
          scrollCtrl = element.controller('$ionicScroll');
          if ( scrollCtrl ) {
            scrollCtrl.scrollView.__container.style.bottom = keyboardHeight + keyboardAttachGetClientHeight(element[0]) + "px";
          }
        }

        function onHide() {
          if (ionic.Platform.isAndroid() && !ionic.Platform.isFullScreen) {
            return;
          }

          element.css('bottom', '');
          if ( scrollCtrl ) {
            scrollCtrl.scrollView.__container.style.bottom = '';
          }
        }

        scope.$on('$destroy', function() {
          ionic.off('native.keyboardshow', onShow, window);
          ionic.off('native.keyboardhide', onHide, window);

          //deprecated
          ionic.off('native.showkeyboard', onShow, window);
          ionic.off('native.hidekeyboard', onHide, window);
        });
      };
    });

  function keyboardAttachGetClientHeight(element) {
    return element.clientHeight;
  }

  /**
   * @ngdoc directive
   * @name ionList
   * @module ionic
   * @delegate ionic.service:$ionicListDelegate
   * @codepen JsHjf
   * @restrict E
   * @description
   * The List is a widely used interface element in almost any mobile app, and can include
   * content ranging from basic text all the way to buttons, toggles, icons, and thumbnails.
   *
   * Both the list, which contains items, and the list items themselves can be any HTML
   * element. The containing element requires the `list` class and each list item requires
   * the `item` class.
   *
   * However, using the ionList and ionItem directives make it easy to support various
   * interaction modes such as swipe to edit, drag to reorder, and removing items.
   *
   * Related: {@link ionic.directive:ionItem}, {@link ionic.directive:ionOptionButton}
   * {@link ionic.directive:ionReorderButton}, {@link ionic.directive:ionDeleteButton}, [`list CSS documentation`](/docs/components/#list).
   *
   * @usage
   *
   * Basic Usage:
   *
   * ```html
   * <ion-list>
   *   <ion-item ng-repeat="item in items">
   *     {% raw %}Hello, {{item}}!{% endraw %}
   *   </ion-item>
   * </ion-list>
   * ```
   *
   * Advanced Usage: Thumbnails, Delete buttons, Reordering, Swiping
   *
   * ```html
   * <ion-list ng-controller="MyCtrl"
   *           show-delete="shouldShowDelete"
   *           show-reorder="shouldShowReorder"
   *           can-swipe="listCanSwipe">
   *   <ion-item ng-repeat="item in items"
   *             class="item-thumbnail-left">
   *
   *     {% raw %}<img ng-src="{{item.img}}">
   *     <h2>{{item.title}}</h2>
   *     <p>{{item.description}}</p>{% endraw %}
   *     <ion-option-button class="button-positive"
   *                        ng-click="share(item)">
   *       Share
   *     </ion-option-button>
   *     <ion-option-button class="button-info"
   *                        ng-click="edit(item)">
   *       Edit
   *     </ion-option-button>
   *     <ion-delete-button class="ion-minus-circled"
   *                        ng-click="items.splice($index, 1)">
   *     </ion-delete-button>
   *     <ion-reorder-button class="ion-navicon"
   *                         on-reorder="reorderItem(item, $fromIndex, $toIndex)">
   *     </ion-reorder-button>
   *
   *   </ion-item>
   * </ion-list>
   * ```
   *
   * @param {string=} delegate-handle The handle used to identify this list with
   * {@link ionic.service:$ionicListDelegate}.
   * @param type {string=} The type of list to use (for example, list-inset for an inset list)
   * @param show-delete {boolean=} Whether the delete buttons for the items in the list are
   * currently shown or hidden.
   * @param show-reorder {boolean=} Whether the reorder buttons for the items in the list are
   * currently shown or hidden.
   * @param can-swipe {boolean=} Whether the items in the list are allowed to be swiped to reveal
   * option buttons. Default: true.
   */
  IonicModule
    .directive('ionList', [
      '$animate',
      '$timeout',
      function($animate, $timeout) {
        return {
          restrict: 'E',
          require: ['ionList', '^?$ionicScroll'],
          controller: '$ionicList',
          compile: function($element, $attr) {
            var listEl = jqLite('<div class="list">')
              .append( $element.contents() )
              .addClass($attr.type);
            $element.append(listEl);

            return function($scope, $element, $attrs, ctrls) {
              var listCtrl = ctrls[0];
              var scrollCtrl = ctrls[1];

              //Wait for child elements to render...
              $timeout(init);

              function init() {
                var listView = listCtrl.listView = new ionic.views.ListView({
                  el: $element[0],
                  listEl: $element.children()[0],
                  scrollEl: scrollCtrl && scrollCtrl.element,
                  scrollView: scrollCtrl && scrollCtrl.scrollView,
                  onReorder: function(el, oldIndex, newIndex) {
                    var itemScope = jqLite(el).scope();
                    if (itemScope && itemScope.$onReorder) {
                      //Make sure onReorder is called in apply cycle,
                      //but also make sure it has no conflicts by doing
                      //$evalAsync
                      $timeout(function() {
                        itemScope.$onReorder(oldIndex, newIndex);
                      });
                    }
                  },
                  canSwipe: function() {
                    return listCtrl.canSwipeItems();
                  }
                });

                if (isDefined($attr.canSwipe)) {
                  $scope.$watch('!!(' + $attr.canSwipe + ')', function(value) {
                    listCtrl.canSwipeItems(value);
                  });
                }
                if (isDefined($attr.showDelete)) {
                  $scope.$watch('!!(' + $attr.showDelete + ')', function(value) {
                    listCtrl.showDelete(value);
                  });
                }
                if (isDefined($attr.showReorder)) {
                  $scope.$watch('!!(' + $attr.showReorder + ')', function(value) {
                    listCtrl.showReorder(value);
                  });
                }

                $scope.$watch(function() {
                  return listCtrl.showDelete();
                }, function(isShown, wasShown) {
                  //Only use isShown=false if it was already shown
                  if (!isShown && !wasShown) { return; }

                  if (isShown) listCtrl.closeOptionButtons();
                  listCtrl.canSwipeItems(!isShown);

                  $element.children().toggleClass('list-left-editing', isShown);
                  $element.toggleClass('disable-pointer-events', isShown);

                  var deleteButton = jqLite($element[0].getElementsByClassName('item-delete'));
                  setButtonShown(deleteButton, listCtrl.showDelete);
                });

                $scope.$watch(function() {
                  return listCtrl.showReorder();
                }, function(isShown, wasShown) {
                  //Only use isShown=false if it was already shown
                  if (!isShown && !wasShown) { return; }

                  if (isShown) listCtrl.closeOptionButtons();
                  listCtrl.canSwipeItems(!isShown);

                  $element.children().toggleClass('list-right-editing', isShown);
                  $element.toggleClass('disable-pointer-events', isShown);

                  var reorderButton = jqLite($element[0].getElementsByClassName('item-reorder'));
                  setButtonShown(reorderButton, listCtrl.showReorder);
                });

                function setButtonShown(el, shown) {
                  shown() && el.addClass('visible') || el.removeClass('active');
                  ionic.requestAnimationFrame(function() {
                    shown() && el.addClass('active') || el.removeClass('invisible');
                  });
                }
              }

            };
          }
        };
      }]);

  /**
   * @ngdoc directive
   * @name menuClose
   * @module ionic
   * @restrict AC
   *
   * @description
   * Closes a side menu which is currently opened.
   *
   * @usage
   * Below is an example of a link within a side menu. Tapping this link would
   * automatically close the currently opened menu.
   *
   * ```html
   * <a menu-close href="#/home" class="item">Home</a>
   * ```
   */
  IonicModule
    .directive('menuClose', ['$ionicViewService', function($ionicViewService) {
      return {
        restrict: 'AC',
        require: '^ionSideMenus',
        link: function($scope, $element, $attr, sideMenuCtrl) {
          $element.bind('click', function(){
            sideMenuCtrl.close();
          });
        }
      };
    }]);

  /**
   * @ngdoc directive
   * @name menuToggle
   * @module ionic
   * @restrict AC
   *
   * @description
   * Toggle a side menu on the given side
   *
   * @usage
   * Below is an example of a link within a nav bar. Tapping this link would
   * automatically open the given side menu
   *
   * ```html
   * <ion-view>
   *   <ion-nav-buttons side="left">
   *    <button menu-toggle="left" class="button button-icon icon ion-navicon"></button>
   *   </ion-nav-buttons>
   *  ...
   * </ion-view>
   * ```
   */
  IonicModule
    .directive('menuToggle', ['$ionicViewService', function($ionicViewService) {
      return {
        restrict: 'AC',
        require: '^ionSideMenus',
        link: function($scope, $element, $attr, sideMenuCtrl) {
          var side = $attr.menuToggle || 'left';
          $element.bind('click', function(){
            if(side === 'left') {
              sideMenuCtrl.toggleLeft();
            } else if(side === 'right') {
              sideMenuCtrl.toggleRight();
            }
          });
        }
      };
    }]);


  /*
   * We don't document the ionModal directive, we instead document
   * the $ionicModal service
   */
  IonicModule
    .directive('ionModal', [function() {
      return {
        restrict: 'E',
        transclude: true,
        replace: true,
        controller: [function(){}],
        template: '<div class="modal-backdrop">' +
          '<div class="modal-wrapper" ng-transclude></div>' +
          '</div>'
      };
    }]);

  IonicModule
    .directive('ionModalView', function() {
      return {
        restrict: 'E',
        compile: function(element, attr) {
          element.addClass('modal');
        }
      };
    });

  /**
   * @ngdoc directive
   * @name ionNavBackButton
   * @module ionic
   * @restrict E
   * @parent ionNavBar
   * @description
   * Creates a back button inside an {@link ionic.directive:ionNavBar}.
   *
   * Will show up when the user is able to go back in the current navigation stack.
   *
   * By default, will go back when clicked.  If you wish for more advanced behavior, see the
   * examples below.
   *
   * @usage
   *
   * With default click action:
   *
   * ```html
   * <ion-nav-bar>
   *   <ion-nav-back-button class="button-clear">
   *     <i class="ion-arrow-left-c"></i> Back
   *   </ion-nav-back-button>
   * </ion-nav-bar>
   * ```
   *
   * With custom click action, using {@link ionic.service:$ionicNavBarDelegate}:
   *
   * ```html
   * <ion-nav-bar ng-controller="MyCtrl">
   *   <ion-nav-back-button class="button-clear"
   *     ng-click="goBack()">
   *     <i class="ion-arrow-left-c"></i> Back
   *   </ion-nav-back-button>
   * </ion-nav-bar>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicNavBarDelegate) {
 *   $scope.goBack = function() {
 *     $ionicNavBarDelegate.back();
 *   };
 * }
   * ```
   *
   * Displaying the previous title on the back button, again using
   * {@link ionic.service:$ionicNavBarDelegate}.
   *
   * ```html
   * <ion-nav-bar ng-controller="MyCtrl">
   *   <ion-nav-back-button class="button-icon">
   *     <i class="icon ion-arrow-left-c"></i>{% raw %}{{getPreviousTitle() || 'Back'}}{% endraw %}
   *   </ion-nav-back-button>
   * </ion-nav-bar>
   * ```
   * ```js
   * function MyCtrl($scope, $ionicNavBarDelegate) {
 *   $scope.getPreviousTitle = function() {
 *     return $ionicNavBarDelegate.getPreviousTitle();
 *   };
 * }
   * ```
   */
  IonicModule
    .directive('ionNavBackButton', [
      '$animate',
      '$rootScope',
      '$sanitize',
      '$ionicNavBarConfig',
      '$ionicNgClick',
      function($animate, $rootScope, $sanitize, $ionicNavBarConfig, $ionicNgClick) {
        var backIsShown = false;
        //If the current viewstate does not allow a back button,
        //always hide it.
        $rootScope.$on('$viewHistory.historyChange', function(e, data) {
          backIsShown = !!data.showBack;
        });
        return {
          restrict: 'E',
          require: '^ionNavBar',
          compile: function(tElement, tAttrs) {
            tElement.addClass('button back-button ng-hide');

            var hasIconChild = !!(tElement.html() || '').match(/class=.*?ion-/);

            return function($scope, $element, $attr, navBarCtrl) {

              // Add a default back button icon based on the nav config, unless one is set
              if (!hasIconChild && $element[0].className.indexOf('ion-') === -1) {
                $element.addClass($ionicNavBarConfig.backButtonIcon);
              }

              //Default to ngClick going back, but don't override a custom one
              if (!isDefined($attr.ngClick)) {
                $ionicNgClick($scope, $element, navBarCtrl.back);
              }

              //Make sure both that a backButton is allowed in the first place,
              //and that it is shown by the current view.
              $scope.$watch(function() {
                if(isDefined($attr.fromTitle)) {
                  $element[0].innerHTML = '<span class="back-button-title">' + $sanitize($scope.oldTitle) + '</span>';
                }
                return !!(backIsShown && $scope.backButtonShown);
              }, ionic.animationFrameThrottle(function(show) {
                if (show) $animate.removeClass($element, 'ng-hide');
                else $animate.addClass($element, 'ng-hide');
              }));
            };
          }
        };
      }]);


  IonicModule.constant('$ionicNavBarConfig', {
    transition: 'nav-title-slide-ios7',
    alignTitle: 'center',
    backButtonIcon: 'ion-ios7-arrow-back'
  });

  /**
   * @ngdoc directive
   * @name ionNavBar
   * @module ionic
   * @delegate ionic.service:$ionicNavBarDelegate
   * @restrict E
   *
   * @description
   * If we have an {@link ionic.directive:ionNavView} directive, we can also create an
   * `<ion-nav-bar>`, which will create a topbar that updates as the application state changes.
   *
   * We can add a back button by putting an {@link ionic.directive:ionNavBackButton} inside.
   *
   * We can add buttons depending on the currently visible view using
   * {@link ionic.directive:ionNavButtons}.
   *
   * Add an [animation class](/docs/components#animations) to the element via the
   * `animation` attribute to enable animated changing of titles
   * (recommended: 'nav-title-slide-ios7').
   *
   * Note that the ion-nav-bar element will only work correctly if your content has an
   * ionView around it.
   *
   * @usage
   *
   * ```html
   * <body ng-app="starter">
   *   <!-- The nav bar that will be updated as we navigate -->
   *   <ion-nav-bar class="bar-positive" animation="nav-title-slide-ios7">
   *   </ion-nav-bar>
   *
   *   <!-- where the initial view template will be rendered -->
   *   <ion-nav-view>
   *     <ion-view>
   *       <ion-content>Hello!</ion-content>
   *     </ion-view>
   *   </ion-nav-view>
   * </body>
   * ```
   *
   * @param {string=} delegate-handle The handle used to identify this navBar
   * with {@link ionic.service:$ionicNavBarDelegate}.
   * @param align-title {string=} Where to align the title of the navbar.
   * Available: 'left', 'right', 'center'. Defaults to 'center'.
   * @param {boolean=} no-tap-scroll By default, the navbar will scroll the content
   * to the top when tapped.  Set no-tap-scroll to true to disable this behavior.
   *
   * </table><br/>
   *
   * ### Alternative Usage
   *
   * Alternatively, you may put ion-nav-bar inside of each individual view's ion-view element.
   * This will allow you to have the whole navbar, not just its contents, transition every view change.
   *
   * This is similar to using a header bar inside your ion-view, except it will have all the power of a navbar.
   *
   * If you do this, simply put nav buttons inside the navbar itself; do not use `<ion-nav-buttons>`.
   *
   *
   * ```html
   * <ion-view title="myTitle">
   *   <ion-nav-bar class="bar-positive">
   *     <ion-nav-back-button>
   *       Back
   *     </ion-nav-back-button>
   *     <div class="buttons right-buttons">
   *       <button class="button">
   *         Right Button
   *       </button>
   *     </div>
   *   </ion-nav-bar>
   * </ion-view>
   * ```
   */
  IonicModule
    .directive('ionNavBar', [
      '$ionicViewService',
      '$rootScope',
      '$animate',
      '$compile',
      '$ionicNavBarConfig',
      function($ionicViewService, $rootScope, $animate, $compile, $ionicNavBarConfig) {

        return {
          restrict: 'E',
          controller: '$ionicNavBar',
          scope: true,
          compile: function(tElement, tAttrs) {
            //We cannot transclude here because it breaks element.data() inheritance on compile
            tElement
              .addClass('bar bar-header nav-bar')
              .append(
                '<div class="buttons left-buttons"> ' +
                '</div>' +
                '<h1 ng-bind-html="title" class="title"></h1>' +
                '<div class="buttons right-buttons"> ' +
                '</div>'
            );

            if (isDefined(tAttrs.animation)) {
              tElement.addClass(tAttrs.animation);
            } else {
              tElement.addClass($ionicNavBarConfig.transition);
            }

            return { pre: prelink };
            function prelink($scope, $element, $attr, navBarCtrl) {
              navBarCtrl._headerBarView = new ionic.views.HeaderBar({
                el: $element[0],
                alignTitle: $attr.alignTitle || $ionicNavBarConfig.alignTitle || 'center'
              });

              //defaults
              $scope.backButtonShown = false;
              $scope.shouldAnimate = true;
              $scope.isReverse = false;
              $scope.isInvisible = true;

              $scope.$on('$destroy', function() {
                $scope.$parent.$hasHeader = false;
              });

              $scope.$watch(function() {
                return ($scope.isReverse ? ' reverse' : '') +
                  ($scope.isInvisible ? ' invisible' : '') +
                  (!$scope.shouldAnimate ? ' no-animation' : '');
              }, function(className, oldClassName) {
                $element.removeClass(oldClassName);
                $element.addClass(className);
              });

            }
          }
        };
      }]);


  /**
   * @ngdoc directive
   * @name ionNavButtons
   * @module ionic
   * @restrict E
   * @parent ionNavView
   *
   * @description
   * Use ionNavButtons to set the buttons on your {@link ionic.directive:ionNavBar}
   * from within an {@link ionic.directive:ionView}.
   *
   * Any buttons you declare will be placed onto the navbar's corresponding side,
   * and then destroyed when the user leaves their parent view.
   *
   * @usage
   * ```html
   * <ion-nav-bar>
   * </ion-nav-bar>
   * <ion-nav-view>
   *   <ion-view>
   *     <ion-nav-buttons side="left">
   *       <button class="button" ng-click="doSomething()">
   *         I'm a button on the left of the navbar!
   *       </button>
   *     </ion-nav-buttons>
   *     <ion-content>
   *       Some super content here!
   *     </ion-content>
   *   </ion-view>
   * </ion-nav-view>
   * ```
   *
   * @param {string} side The side to place the buttons on in the parent
   * {@link ionic.directive:ionNavBar}. Available: 'left' or 'right'.
   */
  IonicModule
    .directive('ionNavButtons', ['$compile', '$animate', function($compile, $animate) {
      return {
        require: '^ionNavBar',
        restrict: 'E',
        compile: function($element, $attrs) {
          var content = $element.contents().remove();
          return function($scope, $element, $attrs, navBarCtrl) {
            var navElement = $attrs.side === 'right' ?
              navBarCtrl.rightButtonsElement :
              navBarCtrl.leftButtonsElement;

            //Put all of our inside buttons into their own span,
            //so we can remove them all when this element dies -
            //even if the buttons have changed through an ng-repeat or the like,
            //we just remove their div parent and they are gone.
            var buttons = jqLite('<span>').append(content);

            //Compile buttons inside content so they have access to everything
            //something inside content does (eg parent ionicScroll)
            $element.append(buttons);
            $compile(buttons)($scope);

            //Append buttons to navbar
            ionic.requestAnimationFrame(function() {
              //If the scope is destroyed before raf runs, be sure not to enter
              if (!$scope.$$destroyed) {
                $animate.enter(buttons, navElement);
              }
            });

            //When our ion-nav-buttons container is destroyed,
            //destroy everything in the navbar
            $scope.$on('$destroy', function() {
              $animate.leave(buttons);
            });

            // The original element is just a completely empty <ion-nav-buttons> element.
            // make it invisible just to be sure it doesn't change any layout
            $element.css('display', 'none');
          };
        }
      };
    }]);


  /**
   * @ngdoc directive
   * @name navClear
   * @module ionic
   * @restrict AC
   *
   * @description
   * nav-clear is an attribute directive which should be used with an element that changes
   * the view on click, for example an `<a href>` or a `<button ui-sref>`.
   *
   * nav-clear will cause the given element, when clicked, to disable the next view transition.
   * This directive is useful, for example, for links within a sideMenu.
   *
   * @usage
   * Below is a link in a side menu, with the nav-clear directive added to it.
   * Tapping this link will disable any animations that would normally occur
   * between views.
   *
   * ```html
   * <a nav-clear menu-close href="#/home" class="item">Home</a>
   * ```
   */
  IonicModule
    .directive('navClear', [
      '$ionicViewService',
      '$state',
      '$location',
      '$window',
      '$rootScope',
      function($ionicViewService, $location, $state, $window, $rootScope) {
        $rootScope.$on('$stateChangeError', function() {
          $ionicViewService.nextViewOptions(null);
        });
        return {
          priority: 100,
          restrict: 'AC',
          compile: function($element) {
            return { pre: prelink };
            function prelink($scope, $element, $attrs) {
              var unregisterListener;
              function listenForStateChange() {
                unregisterListener = $scope.$on('$stateChangeStart', function() {
                  $ionicViewService.nextViewOptions({
                    disableAnimate: true,
                    disableBack: true
                  });
                  unregisterListener();
                });
                $window.setTimeout(unregisterListener, 300);
              }

              $element.on('click', listenForStateChange);
            }
          }
        };
      }]);

  IonicModule.constant('$ionicNavViewConfig', {
    transition: 'slide-left-right-ios7'
  });

  /**
   * @ngdoc directive
   * @name ionNavView
   * @module ionic
   * @restrict E
   * @codepen odqCz
   *
   * @description
   * As a user navigates throughout your app, Ionic is able to keep track of their
   * navigation history. By knowing their history, transitions between views
   * correctly slide either left or right, or no transition at all. An additional
   * benefit to Ionic's navigation system is its ability to manage multiple
   * histories.
   *
   * Ionic uses the AngularUI Router module so app interfaces can be organized
   * into various "states". Like Angular's core $route service, URLs can be used
   * to control the views. However, the AngularUI Router provides a more powerful
   * state manager in that states are bound to named, nested, and parallel views,
   * allowing more than one template to be rendered on the same page.
   * Additionally, each state is not required to be bound to a URL, and data can
   * be pushed to each state which allows much flexibility.
   *
   * The ionNavView directive is used to render templates in your application. Each template
   * is part of a state. States are usually mapped to a url, and are defined programatically
   * using angular-ui-router (see [their docs](https://github.com/angular-ui/ui-router/wiki),
   * and remember to replace ui-view with ion-nav-view in examples).
   *
   * @usage
   * In this example, we will create a navigation view that contains our different states for the app.
   *
   * To do this, in our markup we use ionNavView top level directive. To display a header bar we use
   * the {@link ionic.directive:ionNavBar} directive that updates as we navigate through the
   * navigation stack.
   *
   * You can use any [animation class](/docs/components#animation) on the navView's `animation` attribute
   * to have its pages animate.
   *
   * Recommended for page transitions: 'slide-left-right', 'slide-left-right-ios7', 'slide-in-up'.
   *
   * ```html
   * <ion-nav-bar></ion-nav-bar>
   * <ion-nav-view animation="slide-left-right">
   *   <!-- Center content -->
   * </ion-nav-view>
   * ```
   *
   * Next, we need to setup our states that will be rendered.
   *
   * ```js
   * var app = angular.module('myApp', ['ionic']);
   * app.config(function($stateProvider) {
 *   $stateProvider
 *   .state('index', {
 *     url: '/',
 *     templateUrl: 'home.html'
 *   })
 *   .state('music', {
 *     url: '/music',
 *     templateUrl: 'music.html'
 *   });
 * });
   * ```
   * Then on app start, $stateProvider will look at the url, see it matches the index state,
   * and then try to load home.html into the `<ion-nav-view>`.
   *
   * Pages are loaded by the URLs given. One simple way to create templates in Angular is to put
   * them directly into your HTML file and use the `<script type="text/ng-template">` syntax.
   * So here is one way to put home.html into our app:
   *
   * ```html
   * <script id="home" type="text/ng-template">
   *   <!-- The title of the ion-view will be shown on the navbar -->
   *   <ion-view title="'Home'">
   *     <ion-content ng-controller="HomeCtrl">
   *       <!-- The content of the page -->
   *       <a href="#/music">Go to music page!</a>
   *     </ion-content>
   *   </ion-view>
   * </script>
   * ```
   *
   * This is good to do because the template will be cached for very fast loading, instead of
   * having to fetch them from the network.
   *
   * Please visit [AngularUI Router's docs](https://github.com/angular-ui/ui-router/wiki) for
   * more info. Below is a great video by the AngularUI Router guys that may help to explain
   * how it all works:
   *
   * <iframe width="560" height="315" src="//www.youtube.com/embed/dqJRoh8MnBo"
   * frameborder="0" allowfullscreen></iframe>
   *
   * @param {string=} name A view name. The name should be unique amongst the other views in the
   * same state. You can have views of the same name that live in different states. For more
   * information, see ui-router's [ui-view documentation](http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.directive:ui-view).
   */
  IonicModule
    .directive('ionNavView', [
      '$ionicViewService',
      '$state',
      '$compile',
      '$controller',
      '$animate',
      function( $ionicViewService,   $state,   $compile,   $controller,   $animate) {
        // IONIC's fork of Angular UI Router, v0.2.7
        // the navView handles registering views in the history, which animation to use, and which
        var viewIsUpdating = false;

        var directive = {
          restrict: 'E',
          terminal: true,
          priority: 2000,
          transclude: true,
          controller: function(){},
          compile: function (element, attr, transclude) {
            return function(scope, element, attr, navViewCtrl) {
              var viewScope, viewLocals,
                name = attr[directive.name] || attr.name || '',
                onloadExp = attr.onload || '',
                initialView = transclude(scope);

              // Put back the compiled initial view
              element.append(initialView);

              // Find the details of the parent view directive (if any) and use it
              // to derive our own qualified view name, then hang our own details
              // off the DOM so child directives can find it.
              var parent = element.parent().inheritedData('$uiView');
              if (name.indexOf('@') < 0) name  = name + '@' + ((parent && parent.state) ? parent.state.name : '');
              var view = { name: name, state: null };
              element.data('$uiView', view);

              var eventHook = function() {
                if (viewIsUpdating) return;
                viewIsUpdating = true;

                try { updateView(true); } catch (e) {
                  viewIsUpdating = false;
                  throw e;
                }
                viewIsUpdating = false;
              };

              scope.$on('$stateChangeSuccess', eventHook);
              // scope.$on('$viewContentLoading', eventHook);
              updateView(false);

              function updateView(doAnimate) {
                //===false because $animate.enabled() is a noop without angular-animate included
                if ($animate.enabled() === false) {
                  doAnimate = false;
                }

                var locals = $state.$current && $state.$current.locals[name];
                if (locals === viewLocals) return; // nothing to do
                var renderer = $ionicViewService.getRenderer(element, attr, scope);

                // Destroy previous view scope
                if (viewScope) {
                  viewScope.$destroy();
                  viewScope = null;
                }

                if (!locals) {
                  viewLocals = null;
                  view.state = null;

                  // Restore the initial view
                  return element.append(initialView);
                }

                var newElement = jqLite('<div></div>').html(locals.$template).contents();
                var viewRegisterData = renderer().register(newElement);

                // Remove existing content
                renderer(doAnimate).leave();

                viewLocals = locals;
                view.state = locals.$$state;

                renderer(doAnimate).enter(newElement);

                var link = $compile(newElement);
                viewScope = scope.$new();

                viewScope.$navDirection = viewRegisterData.navDirection;

                if (locals.$$controller) {
                  locals.$scope = viewScope;
                  var controller = $controller(locals.$$controller, locals);
                  element.children().data('$ngControllerController', controller);
                }
                link(viewScope);

                var viewHistoryData = $ionicViewService._getViewById(viewRegisterData.viewId) || {};
                viewScope.$broadcast('$viewContentLoaded', viewHistoryData);

                if (onloadExp) viewScope.$eval(onloadExp);

                newElement = null;
              }
            };
          }
        };
        return directive;
      }]);


  IonicModule

    .config(['$provide', function($provide) {
      $provide.decorator('ngClickDirective', ['$delegate', function($delegate) {
        // drop the default ngClick directive
        $delegate.shift();
        return $delegate;
      }]);
    }])

  /**
   * @private
   */
    .factory('$ionicNgClick', ['$parse', function($parse) {
      return function(scope, element, clickExpr) {
        var clickHandler = angular.isFunction(clickExpr) ?
          clickExpr :
          $parse(clickExpr);

        element.on('click', function(event) {
          scope.$apply(function() {
            clickHandler(scope, {$event: (event)});
          });
        });

        // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
        // something else nearby.
        element.onclick = function(event) { };
      };
    }])

    .directive('ngClick', ['$ionicNgClick', function($ionicNgClick) {
      return function(scope, element, attr) {
        $ionicNgClick(scope, element, attr.ngClick);
      };
    }])

    .directive('ionStopEvent', function () {
      return {
        restrict: 'A',
        link: function (scope, element, attr) {
          element.bind(attr.ionStopEvent, eventStopPropagation);
        }
      };
    });
  function eventStopPropagation(e) {
    e.stopPropagation();
  }


  /**
   * @ngdoc directive
   * @name ionPane
   * @module ionic
   * @restrict E
   *
   * @description A simple container that fits content, with no side effects.  Adds the 'pane' class to the element.
   */
  IonicModule
    .directive('ionPane', function() {
      return {
        restrict: 'E',
        link: function(scope, element, attr) {
          element.addClass('pane');
        }
      };
    });

  /*
   * We don't document the ionPopover directive, we instead document
   * the $ionicPopover service
   */
  IonicModule
    .directive('ionPopover', [function() {
      return {
        restrict: 'E',
        transclude: true,
        replace: true,
        controller: [function(){}],
        template: '<div class="popover-backdrop">' +
          '<div class="popover-wrapper" ng-transclude></div>' +
          '</div>'
      };
    }]);

  IonicModule
    .directive('ionPopoverView', function() {
      return {
        restrict: 'E',
        compile: function(element) {
          element.append( angular.element('<div class="popover-arrow"></div>') );
          element.addClass('popover');
        }
      };
    });

  /**
   * @ngdoc directive
   * @name ionRadio
   * @module ionic
   * @restrict E
   * @codepen saoBG
   * @description
   * The radio directive is no different than the HTML radio input, except it's styled differently.
   *
   * Radio behaves like any [AngularJS radio](http://docs.angularjs.org/api/ng/input/input[radio]).
   *
   * @usage
   * ```html
   * <ion-radio ng-model="choice" ng-value="'A'">Choose A</ion-radio>
   * <ion-radio ng-model="choice" ng-value="'B'">Choose B</ion-radio>
   * <ion-radio ng-model="choice" ng-value="'C'">Choose C</ion-radio>
   * ```
   */
  IonicModule
    .directive('ionRadio', function() {
      return {
        restrict: 'E',
        replace: true,
        require: '?ngModel',
        transclude: true,
        template:
          '<label class="item item-radio">' +
          '<input type="radio" name="radio-group">' +
          '<div class="item-content disable-pointer-events" ng-transclude></div>' +
          '<i class="radio-icon disable-pointer-events icon ion-checkmark"></i>' +
          '</label>',

        compile: function(element, attr) {
          if(attr.icon) element.children().eq(2).removeClass('ion-checkmark').addClass(attr.icon);
          var input = element.find('input');
          forEach({
            'name': attr.name,
            'value': attr.value,
            'disabled': attr.disabled,
            'ng-value': attr.ngValue,
            'ng-model': attr.ngModel,
            'ng-disabled': attr.ngDisabled,
            'ng-change': attr.ngChange
          }, function(value, name) {
            if (isDefined(value)) {
              input.attr(name, value);
            }
          });

          return function(scope, element, attr) {
            scope.getValue = function() {
              return scope.ngValue || attr.value;
            };
          };
        }
      };
    });


  /**
   * @ngdoc directive
   * @name ionRefresher
   * @module ionic
   * @restrict E
   * @parent ionic.directive:ionContent, ionic.directive:ionScroll
   * @description
   * Allows you to add pull-to-refresh to a scrollView.
   *
   * Place it as the first child of your {@link ionic.directive:ionContent} or
   * {@link ionic.directive:ionScroll} element.
   *
   * When refreshing is complete, $broadcast the 'scroll.refreshComplete' event
   * from your controller.
   *
   * @usage
   *
   * ```html
   * <ion-content ng-controller="MyController">
   *   <ion-refresher
   *     pulling-text="Pull to refresh..."
   *     on-refresh="doRefresh()">
   *   </ion-refresher>
   *   <ion-list>
   *     <ion-item ng-repeat="item in items"></ion-item>
   *   </ion-list>
   * </ion-content>
   * ```
   * ```js
   * angular.module('testApp', ['ionic'])
   * .controller('MyController', function($scope, $http) {
 *   $scope.items = [1,2,3];
 *   $scope.doRefresh = function() {
 *     $http.get('/new-items')
 *      .success(function(newItems) {
 *        $scope.items = newItems;
 *      })
 *      .finally(function() {
 *        // Stop the ion-refresher from spinning
 *        $scope.$broadcast('scroll.refreshComplete');
 *      });
 *   };
 * });
   * ```
   *
   * @param {expression=} on-refresh Called when the user pulls down enough and lets go
   * of the refresher.
   * @param {expression=} on-pulling Called when the user starts to pull down
   * on the refresher.
   * @param {string=} pulling-icon The icon to display while the user is pulling down.
   * Default: 'ion-arrow-down-c'.
   * @param {string=} pulling-text The text to display while the user is pulling down.
   * @param {string=} refreshing-icon The icon to display after user lets go of the
   * refresher.
   * @param {string=} refreshing-text The text to display after the user lets go of
   * the refresher.
   *
   */
  IonicModule
    .directive('ionRefresher', ['$ionicBind', function($ionicBind) {
      return {
        restrict: 'E',
        replace: true,
        require: '^$ionicScroll',
        template:
          '<div class="scroll-refresher">' +
          '<div class="ionic-refresher-content" ' +
          'ng-class="{\'ionic-refresher-with-text\': pullingText || refreshingText}">' +
          '<div class="icon-pulling">' +
          '<i class="icon {{pullingIcon}}"></i>' +
          '</div>' +
          '<div class="text-pulling" ng-bind-html="pullingText"></div>' +
          '<i class="icon {{refreshingIcon}} icon-refreshing"></i>' +
          '<div class="text-refreshing" ng-bind-html="refreshingText"></div>' +
          '</div>' +
          '</div>',
        compile: function($element, $attrs) {
          if (angular.isUndefined($attrs.pullingIcon)) {
            $attrs.$set('pullingIcon', 'ion-arrow-down-c');
          }
          if (angular.isUndefined($attrs.refreshingIcon)) {
            $attrs.$set('refreshingIcon', 'ion-loading-d');
          }
          return function($scope, $element, $attrs, scrollCtrl) {
            $ionicBind($scope, $attrs, {
              pullingIcon: '@',
              pullingText: '@',
              refreshingIcon: '@',
              refreshingText: '@',
              $onRefresh: '&onRefresh',
              $onPulling: '&onPulling'
            });

            scrollCtrl._setRefresher($scope, $element[0]);
            $scope.$on('scroll.refreshComplete', function() {
              $scope.$evalAsync(function() {
                $element[0].classList.remove('active');
                scrollCtrl.scrollView.finishPullToRefresh();
              });
            });
          };
        }
      };
    }]);

  /**
   * @ngdoc directive
   * @name ionScroll
   * @module ionic
   * @delegate ionic.service:$ionicScrollDelegate
   * @codepen mwFuh
   * @restrict E
   *
   * @description
   * Creates a scrollable container for all content inside.
   *
   * @usage
   *
   * Basic usage:
   *
   * ```html
   * <ion-scroll zooming="true" direction="xy" style="width: 500px; height: 500px">
   *   <div style="width: 5000px; height: 5000px; background: url('https://upload.wikimedia.org/wikipedia/commons/a/ad/Europe_geological_map-en.jpg') repeat"></div>
   *  </ion-scroll>
   * ```
   *
   * Note that it's important to set the height of the scroll box as well as the height of the inner
   * content to enable scrolling. This makes it possible to have full control over scrollable areas.
   *
   * If you'd just like to have a center content scrolling area, use {@link ionic.directive:ionContent} instead.
   *
   * @param {string=} delegate-handle The handle used to identify this scrollView
   * with {@link ionic.service:$ionicScrollDelegate}.
   * @param {string=} direction Which way to scroll. 'x' or 'y' or 'xy'. Default 'y'.
   * @param {boolean=} paging Whether to scroll with paging.
   * @param {expression=} on-refresh Called on pull-to-refresh, triggered by an {@link ionic.directive:ionRefresher}.
   * @param {expression=} on-scroll Called whenever the user scrolls.
   * @param {boolean=} scrollbar-x Whether to show the horizontal scrollbar. Default true.
   * @param {boolean=} scrollbar-y Whether to show the vertical scrollbar. Default true.
   * @param {boolean=} zooming Whether to support pinch-to-zoom
   * @param {integer=} min-zoom The smallest zoom amount allowed (default is 0.5)
   * @param {integer=} max-zoom The largest zoom amount allowed (default is 3)
   * @param {boolean=} has-bouncing Whether to allow scrolling to bounce past the edges
   * of the content.  Defaults to true on iOS, false on Android.
   */
  IonicModule
    .directive('ionScroll', [
      '$timeout',
      '$controller',
      '$ionicBind',
      function($timeout, $controller, $ionicBind) {
        return {
          restrict: 'E',
          scope: true,
          controller: function() {},
          compile: function(element, attr) {
            element.addClass('scroll-view ionic-scroll');

            //We cannot transclude here because it breaks element.data() inheritance on compile
            var innerElement = jqLite('<div class="scroll"></div>');
            innerElement.append(element.contents());
            element.append(innerElement);

            return { pre: prelink };
            function prelink($scope, $element, $attr) {
              var scrollView, scrollCtrl;

              $ionicBind($scope, $attr, {
                direction: '@',
                paging: '@',
                $onScroll: '&onScroll',
                scroll: '@',
                scrollbarX: '@',
                scrollbarY: '@',
                zooming: '@',
                minZoom: '@',
                maxZoom: '@'
              });
              $scope.direction = $scope.direction || 'y';

              if (angular.isDefined($attr.padding)) {
                $scope.$watch($attr.padding, function(newVal) {
                  innerElement.toggleClass('padding', !!newVal);
                });
              }
              if($scope.$eval($scope.paging) === true) {
                innerElement.addClass('scroll-paging');
              }

              if(!$scope.direction) { $scope.direction = 'y'; }
              var isPaging = $scope.$eval($scope.paging) === true;

              var scrollViewOptions= {
                el: $element[0],
                delegateHandle: $attr.delegateHandle,
                bouncing: $scope.$eval($attr.hasBouncing),
                paging: isPaging,
                scrollbarX: $scope.$eval($scope.scrollbarX) !== false,
                scrollbarY: $scope.$eval($scope.scrollbarY) !== false,
                scrollingX: $scope.direction.indexOf('x') >= 0,
                scrollingY: $scope.direction.indexOf('y') >= 0,
                zooming: $scope.$eval($scope.zooming) === true,
                maxZoom: $scope.$eval($scope.maxZoom) || 3,
                minZoom: $scope.$eval($scope.minZoom) || 0.5
              };
              if (isPaging) {
                scrollViewOptions.speedMultiplier = 0.8;
                scrollViewOptions.bouncing = false;
              }

              scrollCtrl = $controller('$ionicScroll', {
                $scope: $scope,
                scrollViewOptions: scrollViewOptions
              });
              scrollView = $scope.$parent.scrollView = scrollCtrl.scrollView;
            }
          }
        };
      }]);

  /**
   * @ngdoc directive
   * @name ionSideMenu
   * @module ionic
   * @restrict E
   * @parent ionic.directive:ionSideMenus
   *
   * @description
   * A container for a side menu, sibling to an {@link ionic.directive:ionSideMenuContent} directive.
   *
   * @usage
   * ```html
   * <ion-side-menu
   *   side="left"
   *   width="myWidthValue + 20"
   *   is-enabled="shouldLeftSideMenuBeEnabled()">
   * </ion-side-menu>
   * ```
   * For a complete side menu example, see the
   * {@link ionic.directive:ionSideMenus} documentation.
   *
   * @param {string} side Which side the side menu is currently on.  Allowed values: 'left' or 'right'.
   * @param {boolean=} is-enabled Whether this side menu is enabled.
   * @param {number=} width How many pixels wide the side menu should be.  Defaults to 275.
   */
  IonicModule
    .directive('ionSideMenu', function() {
      return {
        restrict: 'E',
        require: '^ionSideMenus',
        scope: true,
        compile: function(element, attr) {
          angular.isUndefined(attr.isEnabled) && attr.$set('isEnabled', 'true');
          angular.isUndefined(attr.width) && attr.$set('width', '275');

          element.addClass('menu menu-' + attr.side);

          return function($scope, $element, $attr, sideMenuCtrl) {
            $scope.side = $attr.side || 'left';

            var sideMenu = sideMenuCtrl[$scope.side] = new ionic.views.SideMenu({
              width: 275,
              el: $element[0],
              isEnabled: true
            });

            $scope.$watch($attr.width, function(val) {
              var numberVal = +val;
              if (numberVal && numberVal == val) {
                sideMenu.setWidth(+val);
              }
            });
            $scope.$watch($attr.isEnabled, function(val) {
              sideMenu.setIsEnabled(!!val);
            });
          };
        }
      };
    });


  /**
   * @ngdoc directive
   * @name ionSideMenuContent
   * @module ionic
   * @restrict E
   * @parent ionic.directive:ionSideMenus
   *
   * @description
   * A container for the main visible content, sibling to one or more
   * {@link ionic.directive:ionSideMenu} directives.
   *
   * @usage
   * ```html
   * <ion-side-menu-content
   *   edge-drag-threshold="true"
   *   drag-content="true">
   * </ion-side-menu-content>
   * ```
   * For a complete side menu example, see the
   * {@link ionic.directive:ionSideMenus} documentation.
   *
   * @param {boolean=} drag-content Whether the content can be dragged. Default true.
   * @param {boolean|number=} edge-drag-threshold Whether the content drag can only start if it is below a certain threshold distance from the edge of the screen.  Default false. Accepts three types of values:
   *  - If a non-zero number is given, that many pixels is used as the maximum allowed distance from the edge that starts dragging the side menu.
   *  - If true is given, the default number of pixels (25) is used as the maximum allowed distance.
   *  - If false or 0 is given, the edge drag threshold is disabled, and dragging from anywhere on the content is allowed.
   *
   */
  IonicModule
    .directive('ionSideMenuContent', [
      '$timeout',
      '$ionicGesture',
      function($timeout, $ionicGesture) {

        return {
          restrict: 'EA', //DEPRECATED 'A'
          require: '^ionSideMenus',
          scope: true,
          compile: function(element, attr) {
            return { pre: prelink };
            function prelink($scope, $element, $attr, sideMenuCtrl) {

              $element.addClass('menu-content pane');

              if (isDefined(attr.dragContent)) {
                $scope.$watch(attr.dragContent, function(value) {
                  sideMenuCtrl.canDragContent(value);
                });
              } else {
                sideMenuCtrl.canDragContent(true);
              }

              if (isDefined(attr.edgeDragThreshold)) {
                $scope.$watch(attr.edgeDragThreshold, function(value) {
                  sideMenuCtrl.edgeDragThreshold(value);
                });
              }

              var defaultPrevented = false;
              var isDragging = false;

              // Listen for taps on the content to close the menu
              function contentTap(e) {
                if(sideMenuCtrl.getOpenAmount() !== 0) {
                  sideMenuCtrl.close();
                  e.gesture.srcEvent.preventDefault();
                }
              }
              ionic.on('tap', contentTap, $element[0]);

              var dragFn = function(e) {
                if(defaultPrevented || !sideMenuCtrl.isDraggableTarget(e)) return;
                isDragging = true;
                sideMenuCtrl._handleDrag(e);
                e.gesture.srcEvent.preventDefault();
              };

              var dragVertFn = function(e) {
                if(isDragging) {
                  e.gesture.srcEvent.preventDefault();
                }
              };

              //var dragGesture = Gesture.on('drag', dragFn, $element);
              var dragRightGesture = $ionicGesture.on('dragright', dragFn, $element);
              var dragLeftGesture = $ionicGesture.on('dragleft', dragFn, $element);
              var dragUpGesture = $ionicGesture.on('dragup', dragVertFn, $element);
              var dragDownGesture = $ionicGesture.on('dragdown', dragVertFn, $element);

              var dragReleaseFn = function(e) {
                isDragging = false;
                if(!defaultPrevented) {
                  sideMenuCtrl._endDrag(e);
                }
                defaultPrevented = false;
              };

              var releaseGesture = $ionicGesture.on('release', dragReleaseFn, $element);

              sideMenuCtrl.setContent({
                element: element[0],
                onDrag: function(e) {},
                endDrag: function(e) {},
                getTranslateX: function() {
                  return $scope.sideMenuContentTranslateX || 0;
                },
                setTranslateX: ionic.animationFrameThrottle(function(amount) {
                  $element[0].style[ionic.CSS.TRANSFORM] = 'translate3d(' + amount + 'px, 0, 0)';
                  $timeout(function() {
                    $scope.sideMenuContentTranslateX = amount;
                  });
                }),
                enableAnimation: function() {
                  //this.el.classList.add(this.animateClass);
                  $scope.animationEnabled = true;
                  $element[0].classList.add('menu-animated');
                },
                disableAnimation: function() {
                  //this.el.classList.remove(this.animateClass);
                  $scope.animationEnabled = false;
                  $element[0].classList.remove('menu-animated');
                }
              });

              // Cleanup
              $scope.$on('$destroy', function() {
                $ionicGesture.off(dragLeftGesture, 'dragleft', dragFn);
                $ionicGesture.off(dragRightGesture, 'dragright', dragFn);
                $ionicGesture.off(dragUpGesture, 'dragup', dragFn);
                $ionicGesture.off(dragDownGesture, 'dragdown', dragFn);
                $ionicGesture.off(releaseGesture, 'release', dragReleaseFn);
                ionic.off('tap', contentTap, $element[0]);
              });
            }
          }
        };
      }]);

  IonicModule

  /**
   * @ngdoc directive
   * @name ionSideMenus
   * @module ionic
   * @delegate ionic.service:$ionicSideMenuDelegate
   * @restrict E
   *
   * @description
   * A container element for side menu(s) and the main content. Allows the left
   * and/or right side menu to be toggled by dragging the main content area side
   * to side.
   *
   * To automatically close an opened menu you can add the {@link ionic.directive:menuClose}
   * attribute directive. Including the `menu-close` attribute is usually added to
   * links and buttons within `ion-side-menu` content, so that when the element is
   * clicked then the opened side menu will automatically close.
   *
   * ![Side Menu](http://ionicframework.com.s3.amazonaws.com/docs/controllers/sidemenu.gif)
   *
   * For more information on side menus, check out:
   *
   * - {@link ionic.directive:ionSideMenuContent}
   * - {@link ionic.directive:ionSideMenu}
   * - {@link ionic.directive:menuClose}
   *
   * @usage
   * To use side menus, add an `<ion-side-menus>` parent element,
   * an `<ion-side-menu-content>` for the center content,
   * and one or more `<ion-side-menu>` directives.
   *
   * ```html
   * <ion-side-menus>
   *   <!-- Center content -->
   *   <ion-side-menu-content ng-controller="ContentController">
   *   </ion-side-menu-content>
   *
   *   <!-- Left menu -->
   *   <ion-side-menu side="left">
   *   </ion-side-menu>
   *
   *   <!-- Right menu -->
   *   <ion-side-menu side="right">
   *   </ion-side-menu>
   * </ion-side-menus>
   * ```
   * ```js
   * function ContentController($scope, $ionicSideMenuDelegate) {
 *   $scope.toggleLeft = function() {
 *     $ionicSideMenuDelegate.toggleLeft();
 *   };
 * }
   * ```
   *
   * @param {string=} delegate-handle The handle used to identify this side menu
   * with {@link ionic.service:$ionicSideMenuDelegate}.
   *
   */
    .directive('ionSideMenus', ['$document', function($document) {
      return {
        restrict: 'ECA',
        controller: '$ionicSideMenus',
        compile: function(element, attr) {
          attr.$set('class', (attr['class'] || '') + ' view');

          return function($scope) {
            $scope.$on('$destroy', function(){
              $document[0].body.classList.remove('menu-open');
            });

          };
        }
      };
    }]);


  /**
   * @ngdoc directive
   * @name ionSlideBox
   * @module ionic
   * @delegate ionic.service:$ionicSlideBoxDelegate
   * @restrict E
   * @description
   * The Slide Box is a multi-page container where each page can be swiped or dragged between:
   *
   * ![SlideBox](http://ionicframework.com.s3.amazonaws.com/docs/controllers/slideBox.gif)
   *
   * @usage
   * ```html
   * <ion-slide-box on-slide-changed="slideHasChanged($index)">
   *   <ion-slide>
   *     <div class="box blue"><h1>BLUE</h1></div>
   *   </ion-slide>
   *   <ion-slide>
   *     <div class="box yellow"><h1>YELLOW</h1></div>
   *   </ion-slide>
   *   <ion-slide>
   *     <div class="box pink"><h1>PINK</h1></div>
   *   </ion-slide>
   * </ion-slide-box>
   * ```
   *
   * @param {string=} delegate-handle The handle used to identify this slideBox
   * with {@link ionic.service:$ionicSlideBoxDelegate}.
   * @param {boolean=} does-continue Whether the slide box should loop.
   * @param {boolean=} auto-play Whether the slide box should automatically slide. Default true if does-continue is true.
   * @param {number=} slide-interval How many milliseconds to wait to change slides (if does-continue is true). Defaults to 4000.
   * @param {boolean=} show-pager Whether a pager should be shown for this slide box.
   * @param {expression=} pager-click Expression to call when a pager is clicked (if show-pager is true). Is passed the 'index' variable.
   * @param {expression=} on-slide-changed Expression called whenever the slide is changed.  Is passed an '$index' variable.
   * @param {expression=} active-slide Model to bind the current slide to.
   */
  IonicModule
    .directive('ionSlideBox', [
      '$timeout',
      '$compile',
      '$ionicSlideBoxDelegate',
      function($timeout, $compile, $ionicSlideBoxDelegate) {
        return {
          restrict: 'E',
          replace: true,
          transclude: true,
          scope: {
            autoPlay: '=',
            doesContinue: '@',
            slideInterval: '@',
            showPager: '@',
            pagerClick: '&',
            disableScroll: '@',
            onSlideChanged: '&',
            activeSlide: '=?'
          },
          controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {
            var _this = this;

            var continuous = $scope.$eval($scope.doesContinue) === true;
            var shouldAutoPlay = isDefined($attrs.autoPlay) ? !!$scope.autoPlay : false;
            var slideInterval = shouldAutoPlay ? $scope.$eval($scope.slideInterval) || 4000 : 0;

            var slider = new ionic.views.Slider({
              el: $element[0],
              auto: slideInterval,
              continuous: continuous,
              startSlide: $scope.activeSlide,
              slidesChanged: function() {
                $scope.currentSlide = slider.currentIndex();

                // Try to trigger a digest
                $timeout(function() {});
              },
              callback: function(slideIndex) {
                $scope.currentSlide = slideIndex;
                $scope.onSlideChanged({ index: $scope.currentSlide, $index: $scope.currentSlide});
                $scope.$parent.$broadcast('slideBox.slideChanged', slideIndex);
                $scope.activeSlide = slideIndex;
                // Try to trigger a digest
                $timeout(function() {});
              }
            });

            slider.enableSlide($scope.$eval($attrs.disableScroll) !== true);

            $scope.$watch('activeSlide', function(nv) {
              if(angular.isDefined(nv)){
                slider.slide(nv);
              }
            });

            $scope.$on('slideBox.nextSlide', function() {
              slider.next();
            });

            $scope.$on('slideBox.prevSlide', function() {
              slider.prev();
            });

            $scope.$on('slideBox.setSlide', function(e, index) {
              slider.slide(index);
            });

            //Exposed for testing
            this.__slider = slider;

            var deregisterInstance = $ionicSlideBoxDelegate._registerInstance(slider, $attrs.delegateHandle);
            $scope.$on('$destroy', deregisterInstance);

            this.slidesCount = function() {
              return slider.slidesCount();
            };

            this.onPagerClick = function(index) {
              void 0;
              $scope.pagerClick({index: index});
            };

            $timeout(function() {
              slider.load();
            });
          }],
          template: '<div class="slider">' +
            '<div class="slider-slides" ng-transclude>' +
            '</div>' +
            '</div>',

          link: function($scope, $element, $attr, slideBoxCtrl) {
            // If the pager should show, append it to the slide box
            if($scope.$eval($scope.showPager) !== false) {
              var childScope = $scope.$new();
              var pager = jqLite('<ion-pager></ion-pager>');
              $element.append(pager);
              $compile(pager)(childScope);
            }
          }
        };
      }])
    .directive('ionSlide', function() {
      return {
        restrict: 'E',
        require: '^ionSlideBox',
        compile: function(element, attr) {
          element.addClass('slider-slide');
          return function($scope, $element, $attr) {
          };
        },
      };
    })

    .directive('ionPager', function() {
      return {
        restrict: 'E',
        replace: true,
        require: '^ionSlideBox',
        template: '<div class="slider-pager"><span class="slider-pager-page" ng-repeat="slide in numSlides() track by $index" ng-class="{active: $index == currentSlide}" ng-click="pagerClick($index)"><i class="icon ion-record"></i></span></div>',
        link: function($scope, $element, $attr, slideBox) {
          var selectPage = function(index) {
            var children = $element[0].children;
            var length = children.length;
            for(var i = 0; i < length; i++) {
              if(i == index) {
                children[i].classList.add('active');
              } else {
                children[i].classList.remove('active');
              }
            }
          };

          $scope.pagerClick = function(index) {
            slideBox.onPagerClick(index);
          };

          $scope.numSlides = function() {
            return new Array(slideBox.slidesCount());
          };

          $scope.$watch('currentSlide', function(v) {
            selectPage(v);
          });
        }
      };

    });

  IonicModule.constant('$ionicTabConfig', {
    type: ''
  });

  /**
   * @ngdoc directive
   * @name ionTab
   * @module ionic
   * @restrict E
   * @parent ionic.directive:ionTabs
   *
   * @description
   * Contains a tab's content.  The content only exists while the given tab is selected.
   *
   * Each ionTab has its own view history.
   *
   * @usage
   * ```html
   * <ion-tab
   *   title="Tab!"
   *   icon="my-icon"
   *   href="#/tab/tab-link"
   *   on-select="onTabSelected()"
   *   on-deselect="onTabDeselected()">
   * </ion-tab>
   * ```
   * For a complete, working tab bar example, see the {@link ionic.directive:ionTabs} documentation.
   *
   * @param {string} title The title of the tab.
   * @param {string=} href The link that this tab will navigate to when tapped.
   * @param {string=} icon The icon of the tab. If given, this will become the default for icon-on and icon-off.
   * @param {string=} icon-on The icon of the tab while it is selected.
   * @param {string=} icon-off The icon of the tab while it is not selected.
   * @param {expression=} badge The badge to put on this tab (usually a number).
   * @param {expression=} badge-style The style of badge to put on this tab (eg tabs-positive).
   * @param {expression=} on-select Called when this tab is selected.
   * @param {expression=} on-deselect Called when this tab is deselected.
   * @param {expression=} ng-click By default, the tab will be selected on click. If ngClick is set, it will not.  You can explicitly switch tabs using {@link ionic.service:$ionicTabsDelegate#select $ionicTabsDelegate.select()}.
   */
  IonicModule
    .directive('ionTab', [
      '$rootScope',
      '$animate',
      '$ionicBind',
      '$compile',
      function($rootScope, $animate, $ionicBind, $compile) {

        //Returns ' key="value"' if value exists
        function attrStr(k,v) {
          return angular.isDefined(v) ? ' ' + k + '="' + v + '"' : '';
        }
        return {
          restrict: 'E',
          require: ['^ionTabs', 'ionTab'],
          replace: true,
          controller: '$ionicTab',
          scope: true,
          compile: function(element, attr) {

            //We create the tabNavTemplate in the compile phase so that the
            //attributes we pass down won't be interpolated yet - we want
            //to pass down the 'raw' versions of the attributes
            var tabNavTemplate = '<ion-tab-nav' +
              attrStr('ng-click', attr.ngClick) +
              attrStr('title', attr.title) +
              attrStr('icon', attr.icon) +
              attrStr('icon-on', attr.iconOn) +
              attrStr('icon-off', attr.iconOff) +
              attrStr('badge', attr.badge) +
              attrStr('badge-style', attr.badgeStyle) +
              attrStr('hidden', attr.hidden) +
              attrStr('class', attr['class']) +
              '></ion-tab-nav>';

            //Remove the contents of the element so we can compile them later, if tab is selected
            //We don't use regular transclusion because it breaks element inheritance
            var tabContent = jqLite('<div class="pane">')
              .append( element.contents().remove() );

            return function link($scope, $element, $attr, ctrls) {
              var childScope;
              var childElement;
              var tabsCtrl = ctrls[0];
              var tabCtrl = ctrls[1];

              var navView = tabContent[0].querySelector('ion-nav-view') ||
                tabContent[0].querySelector('data-ion-nav-view');
              var navViewName = navView && navView.getAttribute('name');

              $ionicBind($scope, $attr, {
                animate: '=',
                onSelect: '&',
                onDeselect: '&',
                title: '@',
                uiSref: '@',
                href: '@',
              });

              tabsCtrl.add($scope);
              $scope.$on('$destroy', function() {
                tabsCtrl.remove($scope);
                tabNavElement.isolateScope().$destroy();
                tabNavElement.remove();
              });

              //Remove title attribute so browser-tooltip does not apear
              $element[0].removeAttribute('title');

              if (navViewName) {
                tabCtrl.navViewName = navViewName;
              }
              $scope.$on('$stateChangeSuccess', selectIfMatchesState);
              selectIfMatchesState();
              function selectIfMatchesState() {
                if (tabCtrl.tabMatchesState()) {
                  tabsCtrl.select($scope);
                }
              }

              var tabNavElement = jqLite(tabNavTemplate);
              tabNavElement.data('$ionTabsController', tabsCtrl);
              tabNavElement.data('$ionTabController', tabCtrl);
              tabsCtrl.$tabsElement.append($compile(tabNavElement)($scope));

              $scope.$watch('$tabSelected', function(value) {
                childScope && childScope.$destroy();
                childScope = null;
                childElement && $animate.leave(childElement);
                childElement = null;
                if (value) {
                  childScope = $scope.$new();
                  childElement = tabContent.clone();
                  $animate.enter(childElement, tabsCtrl.$element);
                  $compile(childElement)(childScope);
                }
              });

            };
          }
        };
      }]);

  IonicModule
    .directive('ionTabNav', [function() {
      return {
        restrict: 'E',
        replace: true,
        require: ['^ionTabs', '^ionTab'],
        template:
          '<a ng-class="{\'tab-item-active\': isTabActive(), \'has-badge\':badge, \'tab-hidden\':isHidden()}" ' +
          ' class="tab-item">' +
          '<span class="badge {{badgeStyle}}" ng-if="badge">{{badge}}</span>' +
          '<i class="icon {{getIconOn()}}" ng-if="getIconOn() && isTabActive()"></i>' +
          '<i class="icon {{getIconOff()}}" ng-if="getIconOff() && !isTabActive()"></i>' +
          '<span class="tab-title" ng-bind-html="title"></span>' +
          '</a>',
        scope: {
          title: '@',
          icon: '@',
          iconOn: '@',
          iconOff: '@',
          badge: '=',
          hidden: '@',
          badgeStyle: '@',
          'class': '@'
        },
        compile: function(element, attr, transclude) {
          return function link($scope, $element, $attrs, ctrls) {
            var tabsCtrl = ctrls[0],
              tabCtrl = ctrls[1];

            //Remove title attribute so browser-tooltip does not apear
            $element[0].removeAttribute('title');

            $scope.selectTab = function(e) {
              e.preventDefault();
              tabsCtrl.select(tabCtrl.$scope, true);
            };
            if (!$attrs.ngClick) {
              $element.on('click', function(event) {
                $scope.$apply(function() {
                  $scope.selectTab(event);
                });
              });
            }

            $scope.isHidden = function() {
              if($attrs.hidden === 'true' || $attrs.hidden === true)return true;
              return false;
            };

            $scope.getIconOn = function() {
              return $scope.iconOn || $scope.icon;
            };
            $scope.getIconOff = function() {
              return $scope.iconOff || $scope.icon;
            };

            $scope.isTabActive = function() {
              return tabsCtrl.selectedTab() === tabCtrl.$scope;
            };
          };
        }
      };
    }]);

  IonicModule.constant('$ionicTabsConfig', {
    position: '',
    type: ''
  });

  /**
   * @ngdoc directive
   * @name ionTabs
   * @module ionic
   * @delegate ionic.service:$ionicTabsDelegate
   * @restrict E
   * @codepen KbrzJ
   *
   * @description
   * Powers a multi-tabbed interface with a Tab Bar and a set of "pages" that can be tabbed
   * through.
   *
   * Assign any [tabs class](/docs/components#tabs) or
   * [animation class](/docs/components#animation) to the element to define
   * its look and feel.
   *
   * See the {@link ionic.directive:ionTab} directive's documentation for more details on
   * individual tabs.
   *
   * Note: do not place ion-tabs inside of an ion-content element; it has been known to cause a
   * certain CSS bug.
   *
   * @usage
   * ```html
   * <ion-tabs class="tabs-positive tabs-icon-only">
   *
   *   <ion-tab title="Home" icon-on="ion-ios7-filing" icon-off="ion-ios7-filing-outline">
   *     <!-- Tab 1 content -->
   *   </ion-tab>
   *
   *   <ion-tab title="About" icon-on="ion-ios7-clock" icon-off="ion-ios7-clock-outline">
   *     <!-- Tab 2 content -->
   *   </ion-tab>
   *
   *   <ion-tab title="Settings" icon-on="ion-ios7-gear" icon-off="ion-ios7-gear-outline">
   *     <!-- Tab 3 content -->
   *   </ion-tab>
   *
   * </ion-tabs>
   * ```
   *
   * @param {string=} delegate-handle The handle used to identify these tabs
   * with {@link ionic.service:$ionicTabsDelegate}.
   */

  IonicModule
    .directive('ionTabs', [
      '$ionicViewService',
      '$ionicTabsDelegate',
      '$ionicTabsConfig',
      function($ionicViewService, $ionicTabsDelegate, $ionicTabsConfig) {
        return {
          restrict: 'E',
          scope: true,
          controller: '$ionicTabs',
          compile: function(element, attr) {
            element.addClass('view');
            //We cannot use regular transclude here because it breaks element.data()
            //inheritance on compile
            var innerElement = jqLite('<div class="tabs"></div>');
            innerElement.append(element.contents());
            element.append(innerElement);
            element.addClass($ionicTabsConfig.position);
            element.addClass($ionicTabsConfig.type);

            return { pre: prelink };
            function prelink($scope, $element, $attr, tabsCtrl) {
              var deregisterInstance = $ionicTabsDelegate._registerInstance(
                tabsCtrl, $attr.delegateHandle
              );

              $scope.$on('$destroy', deregisterInstance);

              tabsCtrl.$scope = $scope;
              tabsCtrl.$element = $element;
              tabsCtrl.$tabsElement = jqLite($element[0].querySelector('.tabs'));

              var el = $element[0];
              $scope.$watch(function() { return el.className; }, function(value) {
                var isTabsTop = value.indexOf('tabs-top') !== -1;
                var isHidden = value.indexOf('tabs-item-hide') !== -1;
                $scope.$hasTabs = !isTabsTop && !isHidden;
                $scope.$hasTabsTop = isTabsTop && !isHidden;
              });
              $scope.$on('$destroy', function() {
                delete $scope.$hasTabs;
                delete $scope.$hasTabsTop;
              });
            }
          }
        };
      }]);

  /**
   * @ngdoc directive
   * @name ionToggle
   * @module ionic
   * @codepen tfAzj
   * @restrict E
   *
   * @description
   * A toggle is an animated switch which binds a given model to a boolean.
   *
   * Allows dragging of the switch's nub.
   *
   * The toggle behaves like any [AngularJS checkbox](http://docs.angularjs.org/api/ng/input/input[checkbox]) otherwise.
   *
   * @param toggle-class {string=} Sets the CSS class on the inner `label.toggle` element created by the directive.
   *
   * @usage
   * Below is an example of a toggle directive which is wired up to the `airplaneMode` model
   * and has the `toggle-calm` CSS class assigned to the inner element.
   *
   * ```html
   * <ion-toggle ng-model="airplaneMode" toggle-class="toggle-calm">Airplane Mode</ion-toggle>
   * ```
   */
  IonicModule
    .directive('ionToggle', [
      '$ionicGesture',
      '$timeout',
      function($ionicGesture, $timeout) {

        return {
          restrict: 'E',
          replace: true,
          require: '?ngModel',
          transclude: true,
          template:
            '<div class="item item-toggle">' +
            '<div ng-transclude></div>' +
            '<label class="toggle">' +
            '<input type="checkbox">' +
            '<div class="track">' +
            '<div class="handle"></div>' +
            '</div>' +
            '</label>' +
            '</div>',

          compile: function(element, attr) {
            var input = element.find('input');
            forEach({
              'name': attr.name,
              'ng-value': attr.ngValue,
              'ng-model': attr.ngModel,
              'ng-checked': attr.ngChecked,
              'ng-disabled': attr.ngDisabled,
              'ng-true-value': attr.ngTrueValue,
              'ng-false-value': attr.ngFalseValue,
              'ng-change': attr.ngChange
            }, function(value, name) {
              if (isDefined(value)) {
                input.attr(name, value);
              }
            });

            if(attr.toggleClass) {
              element[0].getElementsByTagName('label')[0].classList.add(attr.toggleClass);
            }

            return function($scope, $element, $attr) {
              var el, checkbox, track, handle;

              el = $element[0].getElementsByTagName('label')[0];
              checkbox = el.children[0];
              track = el.children[1];
              handle = track.children[0];

              var ngModelController = jqLite(checkbox).controller('ngModel');

              $scope.toggle = new ionic.views.Toggle({
                el: el,
                track: track,
                checkbox: checkbox,
                handle: handle,
                onChange: function() {
                  if(checkbox.checked) {
                    ngModelController.$setViewValue(true);
                  } else {
                    ngModelController.$setViewValue(false);
                  }
                  $scope.$apply();
                }
              });

              $scope.$on('$destroy', function() {
                $scope.toggle.destroy();
              });
            };
          }

        };
      }]);

  /**
   * @ngdoc directive
   * @name ionView
   * @module ionic
   * @restrict E
   * @parent ionNavView
   *
   * @description
   * A container for content, used to tell a parent {@link ionic.directive:ionNavBar}
   * about the current view.
   *
   * @usage
   * Below is an example where our page will load with a navbar containing "My Page" as the title.
   *
   * ```html
   * <ion-nav-bar></ion-nav-bar>
   * <ion-nav-view class="slide-left-right">
   *   <ion-view title="My Page">
   *     <ion-content>
   *       Hello!
   *     </ion-content>
   *   </ion-view>
   * </ion-nav-view>
   * ```
   *
   * @param {string=} title The title to display on the parent {@link ionic.directive:ionNavBar}.
   * @param {boolean=} hide-back-button Whether to hide the back button on the parent
   * {@link ionic.directive:ionNavBar} by default.
   * @param {boolean=} hide-nav-bar Whether to hide the parent
   * {@link ionic.directive:ionNavBar} by default.
   */
  IonicModule
    .directive('ionView', ['$ionicViewService', '$rootScope', '$animate',
      function( $ionicViewService,   $rootScope,   $animate) {
        return {
          restrict: 'EA',
          priority: 1000,
          require: ['^?ionNavBar', '^?ionModal'],
          compile: function(tElement, tAttrs, transclude) {
            tElement.addClass('pane');
            tElement[0].removeAttribute('title');

            return function link($scope, $element, $attr, ctrls) {
              var navBarCtrl = ctrls[0];
              var modalCtrl = ctrls[1];

              //Don't use the ionView if we're inside a modal or there's no navbar
              if (!navBarCtrl || modalCtrl) {
                return;
              }

              if (angular.isDefined($attr.title)) {

                var initialTitle = $attr.title;
                navBarCtrl.changeTitle(initialTitle, $scope.$navDirection);

                // watch for changes in the title, don't set initial value as changeTitle does that
                $attr.$observe('title', function(val, oldVal) {
                  navBarCtrl.setTitle(val);
                });
              }

              var hideBackAttr = angular.isDefined($attr.hideBackButton) ?
                $attr.hideBackButton :
                'false';
              $scope.$watch(hideBackAttr, function(value) {
                // Should we hide a back button when this tab is shown
                navBarCtrl.showBackButton(!value);
              });

              var hideNavAttr = angular.isDefined($attr.hideNavBar) ?
                $attr.hideNavBar :
                'false';
              $scope.$watch(hideNavAttr, function(value) {
                // Should the nav bar be hidden for this view or not?
                navBarCtrl.showBar(!value);
              });

            };
          }
        };
      }]);

})();",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 18:59:35 GMT",
                    "Content-Length": "1569910",
                    "Date": "Fri, 07 Nov 2014 19:00:04 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}