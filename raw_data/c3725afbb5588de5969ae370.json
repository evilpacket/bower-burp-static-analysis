{
    "url": "http://localhost:9999/edina/fieldtrip-sync/src/www/js/pcapi.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location</b> and written to <b>$()</b> via the following statement:<ul><li>$(location).attr('href',data.url);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/edina/fieldtrip-sync/src/www/js/pcapi.js",
                "path": "/edina/fieldtrip-sync/src/www/js/pcapi.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9lZGluYS9maWVsZHRyaXAtc3luYy9zcmMvd3d3L2pzL3BjYXBpLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMjc5MTkNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMDA6MTQ6NTkgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDAwOjE0OjU5IEdNVA0KDQovKgpDb3B5cmlnaHQgKGMpIDIwMTQsIEVESU5BLgpBbGwgcmlnaHRzIHJlc2VydmVkLgoKUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwKYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OgoKMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzCiAgIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgoyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMKICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yCiAgIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uCjMuIEFsbCBhZHZlcnRpc2luZyBtYXRlcmlhbHMgbWVudGlvbmluZyBmZWF0dXJlcyBvciB1c2Ugb2YgdGhpcyBzb2Z0d2FyZSBtdXN0CiAgIGRpc3BsYXkgdGhlIGZvbGxvd2luZyBhY2tub3dsZWRnZW1lbnQ6IFRoaXMgcHJvZHVjdCBpbmNsdWRlcyBzb2Z0d2FyZQogICBkZXZlbG9wZWQgYnkgdGhlIEVESU5BLgo0LiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBFRElOQSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8KICAgZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3IKICAgd3JpdHRlbiBwZXJtaXNzaW9uLgoKVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBFRElOQSAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQKV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YKTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQKU0hBTEwgRURJTkEgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLApPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRgpTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MKSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsClNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZCk9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSApEQU1BR0UuCiovCgoidXNlIHN0cmljdCI7CgovKioKICogaW50ZXJmYWNlIGZvciB0aGUgUENBUEkKICovCmRlZmluZShbJ3V0aWxzJ10sIGZ1bmN0aW9uKHV0aWxzKXsKCiAgICAvKioKICAgICAqIFVuc2V0IHVzZXIgbG9naW4gaWQuCiAgICAgKi8KICAgIHZhciBjbGVhckNsb3VkTG9naW4gPSBmdW5jdGlvbigpewogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjbG91ZC11c2VyJywgSlNPTi5zdHJpbmdpZnkoeydpZCc6IHVuZGVmaW5lZH0pKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBMb2dpbiB0byBjbG91ZCBwcm92aWRlci4KICAgICAqIEBwYXJhbiBwcm92aWRlciBUaGUgcHJvdmlkZXIgdHlwZS4KICAgICAqIEBwYXJhbSBjYWxsYmFjayBGdW5jdGlvbiBjYWxsZWQgYWZ0ZXIgbG9naW4gYXR0ZW1wdC4KICAgICAqIEBwYXJhbSBjYnJvd3NlciBGdW5jdGlvbiB0byBhbGxvdyBjYWxsZXIgcmVxdWlyZXMgYWNjZXNzIHRvIGNoaWxkYnJvd3Nlci4KICAgICAqLwogICAgdmFyIGRvTG9naW4gPSBmdW5jdGlvbihwcm92aWRlciwgY2FsbGJhY2ssIGNicm93c2VyKXsKICAgICAgICB2YXIgbG9naW5VcmwgPSBfdGhpcy5nZXRDbG91ZFByb3ZpZGVyVXJsKCkgKyAnL2F1dGgvJyArIHByb3ZpZGVyOwogICAgICAgIGlmIChwcm92aWRlciA9PT0gJ2xvY2FsJykgewogICAgICAgICAgICBkb0xvZ2luTG9jYWwoY2FsbGJhY2ssIGNicm93c2VyLCBsb2dpblVybCk7CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAgIGRvTG9naW5Ecm9wQm94KGNhbGxiYWNrLCBjYnJvd3NlciwgbG9naW5VcmwpOwogICAgICAgIH0KICAgIH07CgogICAgLyoqCiAgICAgKiBMb2dpbiB0byBhIGxvY2FsIGNsb3VkIHByb3ZpZGVyLgogICAgICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIGNhbGxlZCBhZnRlciBsb2dpbiBhdHRlbXB0LgogICAgICogQHBhcmFtIGxvZ2luVXJsCiAgICAgKi8KICAgIHZhciBkb0xvZ2luTG9jYWwgPSBmdW5jdGlvbihjYWxsYmFjaywgY2Jyb3dzZXIsIGxvZ2luVXJsKXsKICAgICAgICB2YXIgcG9sbFRpbWVyLAogICAgICAgICAgICBwb2xsVGltZXJDb3VudCA9IDAsCiAgICAgICAgICAgIHBvbGxJbnRlcnZhbCA9IDMwMDAsCiAgICAgICAgICAgIHBvbGxGb3JNYXggPSA1ICogNjAgKiAxMDAwOyAvL21pbgogICAgICAgIHZhciBwb2xsVXJsID0gbG9naW5Vcmw7CiAgICAgICAgY29uc29sZS5kZWJ1ZygnTG9naW4gd2l0aDogJyArIHBvbGxVcmwpOwogICAgICAgIHZhciBjYiA9IHdpbmRvdy5vcGVuKHBvbGxVcmwsICdfYmxhbmsnLCAnbG9jYXRpb249bm8nKTsKCgogICAgICAgIC8vIGNsb3NlIGNoaWxkIGJyb3dzZXIKICAgICAgICB2YXIgY2xvc2VDYiA9IGZ1bmN0aW9uKHVzZXJJZCl7CiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTsKICAgICAgICAgICAgY2FsbGJhY2sodXNlcklkKTsKICAgICAgICB9OwoKICAgICAgICBjb25zb2xlLmRlYnVnKCdQb2xsOiAnICsgcG9sbFVybCk7CiAgICAgICAgcG9sbFRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXsKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogcG9sbFVybCwKICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDAsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihwb2xsRGF0YSl7CiAgICAgICAgICAgICAgICAgICAgcG9sbFRpbWVyQ291bnQgKz0gcG9sbEludGVydmFsOwoKICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgaHRtbCByZXNwb25zZXMgKGxpa2UgdGhlIHJlZGlyZWN0aW9uIGZyb20gU2hpYmJvbGV0aCkKICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YocG9sbERhdGEpID09PSAnb2JqZWN0Jyl7CiAgICAgICAgICAgICAgICAgICAgICBpZihwb2xsRGF0YS5zdGF0ZSA9PT0gMSB8fCBwb2xsVGltZXJDb3VudCA+IHBvbGxGb3JNYXgpewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbG91ZFVzZXJJZDsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZihwb2xsRGF0YS5zdGF0ZSA9PT0gMSApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG91ZFVzZXJJZCA9IHBvbGxEYXRhLnVzZXJpZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0Q2xvdWRMb2dpbihjbG91ZFVzZXJJZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIGNiLmNsb3NlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VDYihjbG91ZFVzZXJJZCk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcil7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiUHJvYmxlbSBwb2xsaW5nIGFwaTogIiArIGVycm9yLnN0YXR1c1RleHQpOwogICAgICAgICAgICAgICAgICAgIGNsb3NlQ2IoKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0pOwogICAgICAgIH0sIHBvbGxJbnRlcnZhbCk7CgogICAgICAgIGlmKGNicm93c2VyKXsKICAgICAgICAgICAgLy8gY2FsbGVyIG1heSB3YW50IGFjY2VzcyB0byBjaGlsZCBicm93c2VyIHJlZmVyZW5jZQogICAgICAgICAgICBjYnJvd3NlcihjYik7CiAgICAgICAgfQogICAgfTsKCiAgICAvKioKICAgICAqIExvZ2luIHRvIGRyb3Bib3guCiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgRnVuY3Rpb24gY2FsbGVkIGFmdGVyIGxvZ2luIGF0dGVtcHQuCiAgICAgKiBAcGFyYW0gY2Jyb3dzZXIgRnVuY3Rpb24gdG8gYWxsb3cgY2FsbGVyIHJlcXVpcmVzIGFjY2VzcyB0byBjaGlsZGJyb3dzZXIuCiAgICAgKiBAcGFyYW0gbG9naW5VcmwKICAgICAqLwogICAgdmFyIGRvTG9naW5Ecm9wQm94ID0gZnVuY3Rpb24oY2FsbGJhY2ssIGNicm93c2VyLCBsb2dpblVybCl7CiAgICAgICAgdmFyIHBvbGxUaW1lciwgcG9sbFRpbWVyQ291bnQgPSAwLCBwb2xsSW50ZXJ2YWwgPSAzMDAwLCBwb2xsRm9yTWF4ID0gNSAqIDYwICogMTAwMDsgLy9taW4KCiAgICAgICAgdmFyIHVzZXJJZCA9IGdldENsb3VkTG9naW5JZCgpOwogICAgICAgIGlmKHVzZXJJZCAhPT0gdW5kZWZpbmVkKXsKICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygiZ290IGEgdXNlciBpZDogIiArIHVzZXJJZCk7CiAgICAgICAgICAgIGxvZ2luVXJsICs9ICcvJyArIHVzZXJJZDsKICAgICAgICB9CgogICAgICAgIC8vIGNsZWFyIHVzZXIgaWQKICAgICAgICBjbGVhckNsb3VkTG9naW4oKTsKICAgICAgICBjb25zb2xlLmRlYnVnKCdMb2dpbiB3aXRoOiAnICsgbG9naW5VcmwgKyAnP2FzeW5jPXRydWUnKTsKCiAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgdXJsOiBsb2dpblVybCArICc/YXN5bmM9dHJ1ZScsCiAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDAsCiAgICAgICAgICAgIGNhY2hlOiBmYWxzZSwKICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSl7CiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJSZWRpcmVjdCB0bzogIiArIGRhdGEudXJsKTsKICAgICAgICAgICAgICAgIHZhciBjbG91ZFVzZXJJZCA9IGRhdGEudXNlcmlkOwoKICAgICAgICAgICAgICAgIC8vIGNsb3NlIGNoaWxkIGJyb3dzZXIKICAgICAgICAgICAgICAgIHZhciBjbG9zZUNiID0gZnVuY3Rpb24odXNlcklkKXsKICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHBvbGxUaW1lcik7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodXNlcklkKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgLy8gb3BlbiBkcm9wYm94IGxvZ2luIGluIGNoaWxkIGJyb3dzZXIKICAgICAgICAgICAgICAgIHZhciBjYiA9IHdpbmRvdy5vcGVuKGRhdGEudXJsLCAnX2JsYW5rJywgJ2xvY2F0aW9uPW5vJyk7CiAgICAgICAgICAgICAgICAvL2NiLmFkZEV2ZW50TGlzdGVuZXIoJ2V4aXQnLCBjbG9zZUNiKTsKCiAgICAgICAgICAgICAgICB2YXIgcG9sbFVybCA9IGxvZ2luVXJsICsgJy8nICsgY2xvdWRVc2VySWQgKyAnP2FzeW5jPXRydWUnOwogICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnUG9sbDogJyArIHBvbGxVcmwpOwogICAgICAgICAgICAgICAgcG9sbFRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHBvbGxVcmwsCiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHBvbGxEYXRhKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbGxUaW1lckNvdW50ICs9IHBvbGxJbnRlcnZhbDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihwb2xsRGF0YS5zdGF0ZSA9PT0gMSB8fCBwb2xsVGltZXJDb3VudCA+IHBvbGxGb3JNYXgpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBvbGxEYXRhLnN0YXRlID09PSAxICl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldENsb3VkTG9naW4oY2xvdWRVc2VySWQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYi5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlQ2IoY2xvdWRVc2VySWQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oZXJyb3IpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiUHJvYmxlbSBwb2xsaW5nIGFwaTogIiArIGVycm9yLnN0YXR1c1RleHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VDYih7InN0YXR1cyI6IC0xLCAibXNnIjogIlByb2JsZW0gcG9sbGluZyBhcGkifSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSwgcG9sbEludGVydmFsKTsKCiAgICAgICAgICAgICAgICBpZihjYnJvd3Nlcil7CiAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGVyIG1heSB3YW50IGFjY2VzcyB0byBjaGlsZCBicm93c2VyIHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgIGNicm93c2VyKGNiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGpxWEhSLCB0ZXh0U3RhdHVzKXsKICAgICAgICAgICAgICAgIHZhciBtc2c7CiAgICAgICAgICAgICAgICBpZih0ZXh0U3RhdHVzID09PSB1bmRlZmluZWQpewogICAgICAgICAgICAgICAgICAgIHRleHRTdGF0dXMgPSAnIFVuc3BlY2lmaWVkIEVycm9yLic7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmKHRleHRTdGF0dXMgPT09ICJ0aW1lb3V0IikgewogICAgICAgICAgICAgICAgICAgIG1zZyA9ICJVbmFibGUgdG8gbG9naW4sIHBsZWFzZSBlbmFibGUgZGF0YSBjb25uZWN0aW9uLiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgIG1zZyA9ICJQcm9ibGVtIHdpdGggbG9naW46ICIgKyB0ZXh0U3RhdHVzOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNhbGxiYWNrKHsic3RhdHVzIjogLTEsICJtc2ciOiBtc2d9KTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfTsKCiAgICAvKioKICAgICAqIEdldCB0aGUgY2xvdWQgbG9naW4gZnJvbSBsb2NhbCBzdG9yYWdlLgogICAgICovCiAgICB2YXIgZ2V0Q2xvdWRMb2dpbiA9IGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGxvZ2luID0gbnVsbDsKICAgICAgICB2YXIgdXNlciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjbG91ZC11c2VyJyk7CiAgICAgICAgaWYodXNlcil7CiAgICAgICAgICAgIGxvZ2luID0gSlNPTi5wYXJzZSh1c2VyKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBsb2dpbjsKICAgIH07CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIGNsb3VkIGxvZ2luIGlkIGZyb20gbG9jYWwgc3RvcmFnZS4KICAgICAqLwogICAgdmFyIGdldENsb3VkTG9naW5JZCA9IGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGlkOwogICAgICAgIHZhciBsb2dpbiA9IGdldENsb3VkTG9naW4oKTsKICAgICAgICBpZih0eXBlb2YobG9naW4pID09PSAnb2JqZWN0Jyl7CiAgICAgICAgICAgIGlkID0gbG9naW4uaWQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gaWQ7CiAgICB9OwoKICAgIC8qKgogICAgICogZnVuY3Rpb24gZm9yIGZpbmRpbmcgdGggZXh0ZW5zaW9uIG9mIGEgc3RyaW5nCiAgICAgKiBAcGFyYW0gc3RyaW5nCiAgICAgKiBAc3VmZml4CiAgICAgKiBAcmV0dXJucyB0cnVlL2ZhbHNlIGlmIHN1ZmZpeCBhZ2dyZWVzIHdpdGggc3RyaW5nIGV4dGVuc2lvbgogICAgICovCiAgICB2YXIgZW5kc1dpdGggPSBmdW5jdGlvbihzdHIsIHN1ZmZpeCkgewogICAgICAgIHJldHVybiBzdHIuaW5kZXhPZihzdWZmaXgsIHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKSAhPT0gLTE7CiAgICB9OwoKICAgIHZhciBfdGhpcyA9IHsKCiAgICAgICAgLyoqCiAgICAgICAgICogSW5pdGlhbGl6ZSBwY2FwaSBvYmplY3QKICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucy51cmwgdXJsIG9mIHRoZSBQQ0FQSQogICAgICAgICAqIEBwYXJhbSBvcHRpb25zLnZlcnNpb24gdmVyc2lvbiBudW1iZXIgb2YgUENBUEkKICAgICAgICAgKi8KICAgICAgICBpbml0OiBmdW5jdGlvbihvcHRpb25zKXsKICAgICAgICAgICAgdGhpcy5iYXNlVXJsID0gb3B0aW9ucy51cmw7CiAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IG9wdGlvbnMudmVyc2lvbjsKICAgICAgICAgICAgdGhpcy5jbG91ZFByb3ZpZGVyVXJsID0gb3B0aW9ucy51cmwgKyAiLyIgKyBvcHRpb25zLnZlcnNpb24gKyAiL3BjYXBpIjsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBmdW5jdGlvbiBmb3IgYnVpbGRpbmcgdGhlIG1haW4gdXJscwogICAgICAgICAqIDxkb21haW4+Lzx2ZXJzaW9uPi9wY2FwaS88cmVjb3Jkcy9lZGl0b3JzPi88cHJvdmlkZXI+Lzx1c2VyaWQ+Ly4uLgogICAgICAgICAqIEBwYXJhbSByZW1vdGVEaXIgdGhlIHJlbW90ZSBkaXIgd2hpY2ggaXMgZWl0aGVyIHJlY29yZHMgb3IgZWRpdG9ycwogICAgICAgICAqIEBpdGVtIHRoZSBmb2xkZXIvZmlsZSBpbnNpZGUgdGhlIHJlY29yZHMvZWRpdG9ycyBmb2xkZXIKICAgICAgICAgKiBAcmV0dXJucyB1cmwKICAgICAgICAgKi8KICAgICAgICBidWlsZFVybCA6IGZ1bmN0aW9uKHJlbW90ZURpciwgaXRlbSl7CiAgICAgICAgICAgIHZhciB1c2VySWQgPSBnZXRDbG91ZExvZ2luSWQoKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRVc2VyVXJsKHVzZXJJZCwgcmVtb3RlRGlyLCBpdGVtKTsKICAgICAgICB9LAoKCiAgICAgICAgYnVpbGRVc2VyVXJsOiBmdW5jdGlvbih1c2VySWQsIGNhdGVnb3J5LCBwYXRoKXsKICAgICAgICAgICAgcGF0aCA9IHBhdGggfHwgJyc7CgogICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDbG91ZFByb3ZpZGVyVXJsKCkgKyAnLycgKyBjYXRlZ29yeSArICcvJyArCiAgICAgICAgICAgICAgICAgICB0aGlzLmdldFByb3ZpZGVyKCkgKyAnLycgKyB1c2VySWQgKyAnLycgKyBwYXRoOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIGZ1bmN0aW9uIGZvciBidWlsZGluZyB0aGUgbWFpbiB1cmxzCiAgICAgICAgICogPGRvbWFpbj4vPHZlcnNpb24+L3BjYXBpL2ZzLzxwcm92aWRlcj4vPHVzZXJpZD4vPGZvbGRlcj4vCiAgICAgICAgICogQHBhcmFtIHJlbW90ZURpciB0aGUgcmVtb3RlIGRpcgogICAgICAgICAqIEBpdGVtIHRoZSBmb2xkZXIvZmlsZSBpbnNpZGUgdGhlIHJlbW90ZURpciBmb2xkZXIKICAgICAgICAgKiBAcmV0dXJucyB1cmwKICAgICAgICAgKi8KICAgICAgICBidWlsZEZTVXJsIDogZnVuY3Rpb24ocmVtb3RlRGlyLCBpdGVtKXsKICAgICAgICAgICAgdmFyIHVzZXJJZCA9IGdldENsb3VkTG9naW5JZCgpOwogICAgICAgICAgICBpZiAodXNlcklkID09PSAibG9jYWwiKSB7CiAgICAgICAgICAgICAgICB1c2VySWQgPSAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgdXNlcklkID0gIi8iK3VzZXJJZDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDbG91ZFByb3ZpZGVyVXJsKCkgKyAnL2ZzLycgKwogICAgICAgICAgICAgICAgdGhpcy5nZXRQcm92aWRlcigpICsgdXNlcklkICsnLycrcmVtb3RlRGlyKycvJytpdGVtOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIGxvZ2dlZCBpbgogICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBmdW5jdGlvbiBhZnRlciBjaGVja2luZyB0aGUgbG9naW4gc3RhdHVzCiAgICAgICAgICovCiAgICAgICAgY2hlY2tMb2dpbjogZnVuY3Rpb24oY2FsbGJhY2spewogICAgICAgICAgICBpZighdGhpcy51c2VySWQpewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coImNoZWNrIGlmIHVzZXIgaXMgbG9nZ2VkIGluIik7CiAgICAgICAgICAgICAgICB2YXIgdXNlciA9IGdldENsb3VkTG9naW4oKTsKICAgICAgICAgICAgICAgIGlmKHVzZXIgIT09IG51bGwgJiYgdXNlci5pZCl7CiAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IHRoaXMuZ2V0Q2xvdWRQcm92aWRlclVybCgpICsgJy9hdXRoLycrdGhpcy5nZXRQcm92aWRlcigpOwogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyLmlkICE9PSAibG9jYWwiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAnLycrdXNlci5pZDsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoIkNoZWNrIHVzZXIgd2l0aDogIiArIHVybCk7CiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAogICAgICAgICAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICQucHJveHkoZnVuY3Rpb24oZGF0YSl7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdGF0ZSA9PT0gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDbG91ZExvZ2luKHVzZXIuaWQsIHVzZXIuY3Vyc29yKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyksCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihqcVhIUiwgc3RhdHVzLCBlcnJvcil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSwgZXJyb3IpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoIk5vIHVzZXIgc2Vzc2lvbiBzYXZlZCIpOwogICAgICAgICAgICAgICAgICAgIHRoaXMubG9nb3V0Q2xvdWQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy51c2VySWQpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogRGVsZXRlIGEgcmVjb3JkfGVkaXRvciBvbiB0aGUgY2xvdWQKICAgICAgICAgKiBAcGFyYW0gcmVtb3RlRGlyIHJlbW90ZSBkaXJlY3RvcnkgW3JlY29yZHN8ZWRpdG9yc10KICAgICAgICAgKiBAcGFyYW0gaXRlbSwgY291bGQgYmUgZWl0aGVyIGVkaXRvciBvciByZWNvcmQKICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgZnVuY3Rpb24gYWZ0ZXIgZmV0Y2hpbmcgdGhlIGl0ZW1zCiAgICAgICAgICovCiAgICAgICAgZGVsZXRlSXRlbTogZnVuY3Rpb24ocmVtb3RlRGlyLCBpdGVtLCBjYWxsYmFjayl7CiAgICAgICAgICAgIHZhciB1cmwgPSB0aGlzLmJ1aWxkVXJsKHJlbW90ZURpciwgIiIpOwoKICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygiRGVsZXRlIGl0ZW0gZnJvbSAiK3JlbW90ZURpcisiIHdpdGggIiArIHVybCk7CiAgICAgICAgICAgIGlmKHJlbW90ZURpciA9PT0gInJlY29yZHMiKXsKICAgICAgICAgICAgICAgIHVybCA9IHVybCtpdGVtLm5hbWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZihyZW1vdGVEaXIgPT09ICJlZGl0b3JzIil7CiAgICAgICAgICAgICAgICB1cmwgPSB1cmwraXRlbSsiLmVkdHIiOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdHlwZTogIkRFTEVURSIsCiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsCiAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpewogICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuZXJyb3IgPT0gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSwgZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihqcVhIUiwgc3RhdHVzLCBlcnJvcil7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiUHJvYmxlbSB3aXRoICIgKyB1cmwgKyAiIDogc3RhdHVzPSIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzICsgIiA6ICIgKyBlcnJvcik7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKCiAgICAgICAgLyoqCiAgICAgICAgICogVHJpZ2dlciBpbnRlcm5hbCByZWNvcmQgZXhwb3J0IGludG8gdGhlIGRhdGFiYXNlCiAgICAgICAgICogQHBhcmFtIHJlY29yZE5hbWUgTmFtZSBvZiB0aGUgcmVjb3JkIHRvIGV4cG9ydAogICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBmdW5jdGlvbiBhZnRlciBmZXRjaGluZyB0aGUgaXRlbXMKICAgICAgICAgKi8KICAgICAgICBleHBvcnRSZWNvcmQ6IGZ1bmN0aW9uKHVzZXJJZCwgcmVjb3JkTmFtZSwgY2FsbGJhY2spewoKICAgICAgICAgICAgdmFyIHVybCA9IHRoaXMuYnVpbGRVc2VyVXJsKHVzZXJJZCwgInJlY29yZHMiLCByZWNvcmROYW1lKTsKCiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgICAgICB1cmw6IHVybCArICc/b2djX3N5bmM9dHJ1ZScsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKXsKICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmVycm9yID09IDEpewogICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5kb0NhbGxiYWNrKGNhbGxiYWNrLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmRvQ2FsbGJhY2soY2FsbGJhY2ssIHRydWUsIGRhdGEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oanFYSFIsIHN0YXR1cywgZXJyb3IpewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIlByb2JsZW0gd2l0aCAiICsgdXJsICsgIiA6IHN0YXR1cz0iICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyArICIgOiAiICsgZXJyb3IpOwogICAgICAgICAgICAgICAgICAgIHV0aWxzLmRvQ2FsbGJhY2soY2FsbGJhY2ssIGZhbHNlKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0QW5vbnltb3VzVXNlcklkOiB1dGlscy5nZXRBbm9ueW1vdXNVc2VySWQsCgogICAgICAgIC8qKgogICAgICAgICAqIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBhc3NldHMgdXJscwogICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBmdW5jdGlvbgogICAgICAgICAqLwogICAgICAgIGdldEFzc2V0czogZnVuY3Rpb24oY2FsbGJhY2spewogICAgICAgICAgICB0aGlzLmdldEl0ZW1zKCJyZWNvcmRzIiwgImFzc2V0cy9pbWFnZXMiLCB7ImZybXQiOiAidXJsIn0sIGZ1bmN0aW9uKHN1Y2Nlc3MsIGRhdGEpewogICAgICAgICAgICAgICAgY2FsbGJhY2soc3VjY2VzcywgZGF0YSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEByZXR1cm4gVGhlIFVSTCB0byB0aGUgY2xvdWQgcHJvdmlkZXIuCiAgICAgICAgICovCiAgICAgICAgZ2V0Q2xvdWRQcm92aWRlclVybDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb3VkUHJvdmlkZXJVcmw7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogRmV0Y2ggYWxsIHRoZSBpdGVtcyBvbiB0aGUgY2xvdWQKICAgICAgICAgKiBAcGFyYW0gcmVtb3RlRGlyIHJlbW90ZSBkaXJlY3RvcnkKICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgZnVuY3Rpb24gYWZ0ZXIgZmV0Y2hpbmcgdGhlIGl0ZW1zCiAgICAgICAgICovCiAgICAgICAgZ2V0RlNJdGVtczogZnVuY3Rpb24ocmVtb3RlRGlyLCBjYWxsYmFjayl7CiAgICAgICAgICAgIHZhciB1cmwgPSB0aGlzLmJ1aWxkRlNVcmwocmVtb3RlRGlyLCAiIik7CgogICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJHZXQgaXRlbXMgb2YgIityZW1vdGVEaXIrIiB3aXRoICIgKyB1cmwpOwoKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIiwKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSl7CiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5lcnJvciA9PSAxKXsKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGpxWEhSLCBzdGF0dXMsIGVycm9yKXsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJQcm9ibGVtIHdpdGggIiArIHVybCArICIgOiBzdGF0dXM9IiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgKyAiIDogIiArIGVycm9yKTsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlCiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEZldGNoIGFuIGl0ZW0gb24gdGhlIGNsb3VkCiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMucmVtb3RlRGlyIHJlbW90ZSBkaXJlY3RvcnkKICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucy5pdGVtIHRoZSBmaWxlCiAgICAgICAgICogQHBhcmFtIGNhbGxiYWNrIGZ1bmN0aW9uIGFmdGVyIGZldGNoaW5nIHRoZSBpdGVtcwogICAgICAgICAqLwogICAgICAgIGdldEZTSXRlbTogZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spewogICAgICAgICAgICB2YXIgdXJsID0gdGhpcy5idWlsZEZTVXJsKG9wdGlvbnMucmVtb3RlRGlyLCBvcHRpb25zLml0ZW0pOwogICAgICAgICAgICBpZihvcHRpb25zLnVzZXJJZCl7CiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmJ1aWxkVXNlclVybChvcHRpb25zLnVzZXJJZCwgb3B0aW9ucy5yZW1vdGVEaXIsIG9wdGlvbnMuaXRlbSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoIkdldCBpdGVtICIrb3B0aW9ucy5pdGVtKyIgb2YgIitvcHRpb25zLnJlbW90ZURpcisiIHdpdGggIiArIHVybCk7CgogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKXsKICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmVycm9yID09IDEpewogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUsIGRhdGEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oanFYSFIsIHN0YXR1cywgZXJyb3IpewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIlByb2JsZW0gd2l0aCAiICsgdXJsICsgIiA6IHN0YXR1cz0iICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyArICIgOiAiICsgZXJyb3IpOwogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogRmV0Y2ggYWxsIHRoZSByZWNvcmRzfGVkaXRvcnMgb24gdGhlIGNsb3VkCiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMucmVtb3RlRGlyIHJlbW90ZSBkaXJlY3RvcnkgW3JlY29yZHN8ZWRpdG9yc10KICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucy5pdGVtIGdldCBhIGZpbGUgZnJvbSBQQ0FQSQogICAgICAgICAqIEBwYXJhbSBvcHRpb25zLmRhdGFUeXBlIG9mIHRoZSBpdGVtIChqc29uLCBodG1sLCB0eHQpCiAgICAgICAgICogQHBhcmFtIGNhbGxiYWNrIGZ1bmN0aW9uIGFmdGVyIGZldGNoaW5nIHRoZSBpdGVtcwogICAgICAgICAqLwogICAgICAgIGdldEl0ZW06IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKXsKICAgICAgICAgICAgdmFyIHVybCA9IHRoaXMuYnVpbGRVcmwob3B0aW9ucy5yZW1vdGVEaXIsIG9wdGlvbnMuaXRlbSk7CgogICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJHZXQgaXRlbSAiK29wdGlvbnMuaXRlbSsiIG9mICIrb3B0aW9ucy5yZW1vdGVEaXIrIiB3aXRoICIgKyB1cmwgKyAiIGFuZCBkYXRhVHlwZSAiICsgb3B0aW9ucy5kYXRhVHlwZSk7CgogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgICAgICAgICBkYXRhVHlwZTogb3B0aW9ucy5kYXRhVHlwZSwKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSl7CiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5lcnJvciA9PSAxKXsKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGpxWEhSLCBzdGF0dXMsIGVycm9yKXsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJQcm9ibGVtIHdpdGggIiArIHVybCArICIgOiBzdGF0dXM9IiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgKyAiIDogIiArIGVycm9yKTsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlCiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEZldGNoIGFsbCB0aGUgcmVjb3Jkc3xlZGl0b3JzIG9uIHRoZSBjbG91ZAogICAgICAgICAqIEBwYXJhbSBvcHRpb25zLnJlbW90ZURpciByZW1vdGUgZGlyZWN0b3J5IFtyZWNvcmRzfGVkaXRvcnNdCiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMuZXh0cmFzIHBhdGggZm9yIHVybAogICAgICAgICAqIEBwYW1hbSBvcHRpb25zLmZpbHRlcnMgZmlsdGVyIGZvciByZWNvcmRzCiAgICAgICAgICogQHBhcmFtIGNhbGxiYWNrIGZ1bmN0aW9uIGFmdGVyIGZldGNoaW5nIHRoZSBpdGVtcwogICAgICAgICAqLwogICAgICAgIGdldEl0ZW1zOiBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjayl7CiAgICAgICAgICAgIHZhciB1cmwgPSB0aGlzLmJ1aWxkVXJsKG9wdGlvbnMucmVtb3RlRGlyLCBvcHRpb25zLmV4dHJhcyk7CgogICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJHZXQgaXRlbXMgb2YgIitvcHRpb25zLnJlbW90ZURpcisiIHdpdGggIiArIHVybCk7CiAgICAgICAgICAgIC8vaWYgaXQncyB1bmRlZmluZWQgbWFrZSBpdCBlbXB0eSBvYmplY3QgaW4gb3JkZXIgbm90IHRvIGJyZWFrIGl0CiAgICAgICAgICAgIGlmKG9wdGlvbnMuZmlsdGVycyA9PT0gdW5kZWZpbmVkKXsKICAgICAgICAgICAgICAgIG9wdGlvbnMuZmlsdGVycyA9IHt9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhvcHRpb25zLmZpbHRlcnMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICBkYXRhOiBvcHRpb25zLmZpbHRlcnMsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKXsKICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmVycm9yID09IDEpewogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUsIGRhdGEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oanFYSFIsIHN0YXR1cywgZXJyb3IpewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIlByb2JsZW0gd2l0aCAiICsgdXJsICsgIiA6IHN0YXR1cz0iICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyArICIgOiAiICsgZXJyb3IpOwogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogZnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIHVybC4gSXQncyBuZWVkZWQKICAgICAgICAgKiBmb3IgdGhlIHN5bmNocm9ub3VzIGxvZ2luLgogICAgICAgICAqIEByZXR1cm5zIG9iamVjdCB3aXRoIGtleSwgdmFsdWVzIG9mIHRoZSB1cmwgcGFyYW1ldGVycwogICAgICAgICAqLwogICAgICAgIGdldFBhcmFtZXRlcnM6IGZ1bmN0aW9uICgpewogICAgICAgICAgICB2YXIgcXVlcnkgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKTsKICAgICAgICAgICAgdmFyIHF1ZXJ5U3RyaW5nID0ge307CiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBxdWVyeS5zcGxpdCgiJiIpOwogICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxwYXJhbXMubGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICAgdmFyIHBhaXIgPSBwYXJhbXNbaV0uc3BsaXQoIj0iKTsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcXVlcnlTdHJpbmdbcGFpclswXV0gPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgcXVlcnlTdHJpbmdbcGFpclswXV0gPSBwYWlyWzFdOwogICAgICAgICAgICAgICAgICAgIC8vIElmIHNlY29uZCBlbnRyeSB3aXRoIHRoaXMgbmFtZQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcXVlcnlTdHJpbmdbcGFpclswXV0gPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IFsgcXVlcnlTdHJpbmdbcGFpclswXV0sIHBhaXJbMV0gXTsKICAgICAgICAgICAgICAgICAgICBxdWVyeVN0cmluZ1twYWlyWzBdXSA9IGFycjsKICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGlyZCBvciBsYXRlciBlbnRyeSB3aXRoIHRoaXMgbmFtZQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBxdWVyeVN0cmluZ1twYWlyWzBdXS5wdXNoKHBhaXJbMV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBxdWVyeVN0cmluZzsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBHZXQgYWxsIHByb3ZpZGVycyBQQ0FQSSBzdXBwb3J0cwogICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBmdW5jdGlvbiBhZnRlciBmZXRjaGluZyB0aGUgcHJvdmlkZXJzCiAgICAgICAgICovCiAgICAgICAgZ2V0UHJvdmlkZXJzOiBmdW5jdGlvbihjYWxsYmFjayl7CiAgICAgICAgICAgIHZhciB1cmwgPSB0aGlzLmdldENsb3VkUHJvdmlkZXJVcmwoKSsiL2F1dGgvcHJvdmlkZXJzIjsKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIiwKICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZQogICAgICAgICAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEpewogICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSwgZGF0YSk7CiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKGpxWEhSLCBzdGF0dXMsIGVycm9yKXsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIlByb2JsZW0gd2l0aCAiICsgdXJsICsgIiA6IHN0YXR1cz0iICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyArICIgOiAiICsgZXJyb3IpOwogICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBmdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgcHJvdmlkZXIgdGhhdCB0aGUgdXNlciBoYXMgc2VsZWN0ZWQgZm9yIFBDQVBJCiAgICAgICAgICogQHJldHVybnMgdGhlIHByb3ZpZGVyIGZyb20KICAgICAgICAgKi8KICAgICAgICBnZXRQcm92aWRlcjogZnVuY3Rpb24oKXsKICAgICAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjbG91ZC1wcm92aWRlcicpIHx8ICdsb2NhbCc7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHJldHVybiBUaGUgY2xvdWQgbG9naW4gdXNlci4KICAgICAgICAgKiAgIGlkIC0gY2xvdWQgdXNlciBpZAogICAgICAgICAqICAgY3Vyc29yIC0gY3Vyc29yIG9mIGxhc3Qgc3luYy4KICAgICAgICAgKi8KICAgICAgICBnZXRVc2VyOiBmdW5jdGlvbigpewogICAgICAgICAgICByZXR1cm4gdGhpcy51c2VyOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSB1c2VyaWQKICAgICAgICAgKiBAcmV0dXJucyB0aGUgdXNlcklkIGZvciBQQ0FQSQogICAgICAgICAqLwogICAgICAgIGdldFVzZXJJZDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIGlkID0gZ2V0Q2xvdWRMb2dpbklkKCk7CiAgICAgICAgICAgIHJldHVybiBpZDsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBMb2dpbiB0byBjbG91ZCBwcm92aWRlciBhc3luY2hyb25vdXNseQogICAgICAgICAqLwogICAgICAgIGxvZ2luQXN5bmNDbG91ZDogZnVuY3Rpb24ocHJvdmlkZXIsIGNiLCBjYnJvd3Nlcil7CiAgICAgICAgICAgIGRvTG9naW4ocHJvdmlkZXIsIGNiLCBjYnJvd3Nlcik7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogZnVuY3Rpb24gZm9yIGxvZ2luZyBpbiBQQ0FQSSBzeW5jaHJvbm91c2x5CiAgICAgICAgICovCiAgICAgICAgbG9naW5DbG91ZDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgaWYoISgidWlkIiBpbiB0aGlzLmdldFBhcmFtZXRlcnMoKSkpewogICAgICAgICAgICAgICAgdmFyIGxvZ2luVXJsID0gdGhpcy5nZXRDbG91ZFByb3ZpZGVyVXJsKCkgKyAnL2F1dGgvJyt0aGlzLmdldFByb3ZpZGVyKCkrIj9jYWxsYmFjaz0iKyQobG9jYXRpb24pLmF0dHIoJ2hyZWYnKTsKICAgICAgICAgICAgICAgICQuZ2V0SlNPTihsb2dpblVybCwgZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICAgICAgICAgICQobG9jYXRpb24pLmF0dHIoJ2hyZWYnLGRhdGEudXJsKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogTG9nb3V0IGZyb20gY2xvdWQgcHJvdmlkZXIuCiAgICAgICAgICovCiAgICAgICAgbG9nb3V0Q2xvdWQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGNsZWFyQ2xvdWRMb2dpbigpOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIFBvc3QgYSByZWNvcmR8ZWRpdG9yIG9uIHRoZSBjbG91ZAogICAgICAgICAqIEBwYXJhbSByZW1vdGVEaXIgcmVtb3RlIGRpcmVjdG9yeSBbcmVjb3Jkc3xlZGl0b3JzXQogICAgICAgICAqIEBwYXJhbSBpdGVtLCBjb3VsZCBiZSBlaXRoZXIgZWRpdG9yIG9yIHJlY29yZAogICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBmdW5jdGlvbiBhZnRlciBmZXRjaGluZyB0aGUgaXRlbXMKICAgICAgICAgKi8KICAgICAgICBzYXZlSXRlbTogZnVuY3Rpb24odXNlcklkLCByZW1vdGVEaXIsIGl0ZW0sIGNhbGxiYWNrKXsKCiAgICAgICAgICAgIHZhciB1cmwsIGRhdGE7CiAgICAgICAgICAgIGlmKHJlbW90ZURpciA9PT0gInJlY29yZHMiKXsKICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeShpdGVtLCB1bmRlZmluZWQsIDIpOwogICAgICAgICAgICAgICAgdXJsID0gdGhpcy5idWlsZFVzZXJVcmwodXNlcklkLCByZW1vdGVEaXIsIGl0ZW0ubmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZihyZW1vdGVEaXIgPT09ICJlZGl0b3JzIil7CiAgICAgICAgICAgICAgICBkYXRhID0gaXRlbS5lZGl0b3Iuam9pbigiIik7CiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmJ1aWxkVXNlclVybCh1c2VySWQsIHJlbW90ZURpciwgaXRlbS5uYW1lKyIuZWR0ciIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJQb3N0IGl0ZW0gdG8gIityZW1vdGVEaXIrIiB3aXRoICIgKyB1cmwpOwoKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlLAogICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpewogICAgICAgICAgICAgICAgICAgIGlmKHJlcy5lcnJvciA9PT0gMCl7CiAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlLCByZXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhyZXMubXNnKTsKICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGpxWEhSLCBzdGF0dXMsIGVycm9yKXsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJQcm9ibGVtIHdpdGggIiArIHVybCArICIgOiBzdGF0dXM9IiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgKyAiIDogIiArIGVycm9yKTsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIFN0b3JlIGNsb3VkIHVzZXIgaWQgaW4gbG9jYWwgc3RvcmFnZS4KICAgICAgICAgKi8KICAgICAgICBzZXRDbG91ZExvZ2luOiBmdW5jdGlvbih1c2VySWQsIGN1cnNvcil7CiAgICAgICAgICAgIHRoaXMudXNlciA9IHsKICAgICAgICAgICAgICAgICdpZCc6IHVzZXJJZCwKICAgICAgICAgICAgICAgICdjdXJzb3InOiBjdXJzb3IKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjbG91ZC11c2VyJywgSlNPTi5zdHJpbmdpZnkodGhpcy51c2VyKSk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogU2V0IHRoZSBjbG91ZCBwcm92aWRlciBVUkwuCiAgICAgICAgICogQHBhcmFtIHJvb3QgVGhlIFNlcnZlciBVUkwgcm9vdC4KICAgICAgICAgKi8KICAgICAgICBzZXRDbG91ZFByb3ZpZGVyVXJsOiBmdW5jdGlvbih1cmwpewogICAgICAgICAgICB0aGlzLmNsb3VkUHJvdmlkZXJVcmwgPSB1cmwgKyAiLyIgKyB0aGlzLnZlcnNpb24gKyAiL3BjYXBpIjsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBmdW5jdGlvbiBmb3Igc2V0dGluZyB0aGUgcHJvdmlkZXIgb2YgUENBUEkgaW4gdGhlIGxvY2FsU3RvcmFnZQogICAgICAgICAqIEBwYXJhbSBwcm92aWRlcgogICAgICAgICAqLwogICAgICAgIHNldFByb3ZpZGVyOiBmdW5jdGlvbihwcm92aWRlcil7CiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjbG91ZC1wcm92aWRlcicsIHByb3ZpZGVyKTsKICAgICAgICAgICAgLy90aGlzLnByb3ZpZGVyID0gcHJvdmlkZXI7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogZnVuY3Rpb24gZm9yIHNldHRpbmcgdXAgdGhlIHVzZXJJZCB3aGljaCBjb21lcyBmcm9tIFBDQVBJCiAgICAgICAgICogQHBhcmFtIHVzZXJJZAogICAgICAgICAqLwogICAgICAgIHNldFVzZXJJZDogZnVuY3Rpb24odXNlcklkKXsKICAgICAgICAgICAgdGhpcy51c2VySWQgPSB1c2VySWQ7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogVXBkYXRlIGEgcmVjb3JkfGVkaXRvciBvbiB0aGUgY2xvdWQKICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZW1vdGVEaXIgcmVtb3RlIGRpcmVjdG9yeSBbcmVjb3Jkc3xlZGl0b3JzXQogICAgICAgICAqIEBwYXJhbSBvcHRpb25zLml0ZW0sIGNvdWxkIGJlIGVpdGhlciBlZGl0b3Igb3IgcmVjb3JkCiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMuZmlsZSBmb3IgcmVjb3JkcyB3ZSBuZWVkIHRvIGtub3cgd2hpY2ggc3BlY2lmaWMgZmlsZSB0byB1cGRhdGUKICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgZnVuY3Rpb24gYWZ0ZXIgZmV0Y2hpbmcgdGhlIGl0ZW1zCiAgICAgICAgICovCiAgICAgICAgdXBkYXRlSXRlbTogZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spewoKICAgICAgICAgICAgdmFyIHVybCA9IHRoaXMuYnVpbGRVcmwob3B0aW9ucy5yZW1vdGVEaXIsICIiKTsKCiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoIlBVVCBpdGVtIHRvICIrb3B0aW9ucy5yZW1vdGVEaXIrIiB3aXRoICIgKyB1cmwpOwogICAgICAgICAgICB2YXIgZGF0YTsKICAgICAgICAgICAgaWYob3B0aW9ucy5yZW1vdGVEaXIgPT09ICJyZWNvcmRzIil7CiAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5pdGVtLCB1bmRlZmluZWQsIDIpOwogICAgICAgICAgICAgICAgdXJsID0gdXJsICsgb3B0aW9ucy5pdGVtLm5hbWUrIi8iICsgb3B0aW9ucy5maWxlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYob3B0aW9ucy5yZW1vdGVEaXIgPT09ICJlZGl0b3JzIil7CiAgICAgICAgICAgICAgICBkYXRhID0gb3B0aW9ucy5pdGVtLmVkaXRvcjsKICAgICAgICAgICAgICAgIHVybCA9IHVybCArIG9wdGlvbnMuaXRlbS5uYW1lKyIuZWR0ciI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB0eXBlOiAiUFVUIiwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsCiAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpewogICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuZXJyb3IgPT0gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSwgZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihqcVhIUiwgc3RhdHVzLCBlcnJvcil7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiUHJvYmxlbSB3aXRoICIgKyB1cmwgKyAiIDogc3RhdHVzPSIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzICsgIiA6ICIgKyBlcnJvcik7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBmdW5jdGlvbiBmb3IgdXBsb2FkaW5nIGEgZmlsZQogICAgICAgICAqIEBwYXJhbSBvcHRpb25zLnJlbW90ZURpcgogICAgICAgICAqIEBwYXJhbSBvcHRpb25zLmZpbGVuYW1lCiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMuZmlsZQogICAgICAgICAqLwogICAgICAgIHVwbG9hZEZpbGU6IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKXsKCiAgICAgICAgICAgIHZhciB1cmwgPSB0aGlzLmJ1aWxkRlNVcmwob3B0aW9ucy5yZW1vdGVEaXIsIG9wdGlvbnMuZmlsZW5hbWUpOwoKICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygiVXBsb2FkIGl0ZW0gIitvcHRpb25zLmZpbGUubmFtZSsiIHRvICIrb3B0aW9ucy5yZW1vdGVEaXIrIiB3aXRoICIgKyB1cmwpOwoKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKHJlcXVlc3QpIHsKICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoIlgtUGFyc2UtQXBwbGljYXRpb24tSWQiLCAnTVktQVBQLUlEJyk7CiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCJYLVBhcnNlLVJFU1QtQVBJLUtleSIsICdNWS1SRVNULUFQSS1JRCcpOwogICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1UeXBlIiwgb3B0aW9ucy5maWxlLnR5cGUpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgZGF0YTogb3B0aW9ucy5maWxlLAogICAgICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLAogICAgICAgICAgICAgICAgY29udGVudFR5cGU6IGZhbHNlLAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUsIGRhdGEpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IGpRdWVyeS5wYXJzZUpTT04oZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UsIG9iai5lcnJvcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIF90aGlzOwoKfSk7",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 00:14:59 GMT",
                    "Content-Length": "27919",
                    "Date": "Fri, 07 Nov 2014 00:14:59 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}