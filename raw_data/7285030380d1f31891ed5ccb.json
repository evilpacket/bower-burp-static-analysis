{
    "url": "http://localhost:9999/distri/observable/draft/old/doc/logical/o2/Dom.html",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>window.location.pathname</b> and written to <b>document.write()</b> via the following statements:<ul><li>var loc = window.location.protocol + '//' + window.location.hostname + window.location.pathname;</li><li>loc = loc.split('\\\\');</li><li>loc = loc.join('/');</li><li>loc = loc.split('/');</li><li>loc = loc.join('/');</li><li>document.write(\"&lt;base href='\" + loc + \"'&gt;&lt;/base&gt;\");</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/distri/observable/draft/old/doc/logical/o2/Dom.html",
                "path": "/distri/observable/draft/old/doc/logical/o2/Dom.html",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9kaXN0cmkvb2JzZXJ2YWJsZS9kcmFmdC9vbGQvZG9jL2xvZ2ljYWwvbzIvRG9tLmh0bWwgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "HTTP/1.1 200 OK
Content-Length: 688377
Accept-Ranges: bytes
Content-Type: text/html; charset=utf-8
Date: Fri, 07 Nov 2014 21:13:33 GMT
Last-Modified: Fri, 07 Nov 2014 19:55:51 GMT

 <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
    <head>
        <title>o2.js</title>
        <META http-equiv="Content-Type" content="text/html; charset=UTF-8">        
        <script>

			(function()
			{
			    var loc = window.location.protocol + '//' + window.location.hostname + window.location.pathname;
                loc = loc.split('\\');
                loc = loc.join('/');					    
			    loc = loc.split('/');
			    loc.pop();
			    loc = loc.join('/');
			    loc += '/' + '../../';
			
			    document.write("<base href='" + loc + "'></base>");
			})();
         
        </script>

        <link rel="stylesheet" type="text/css" href="jgdoc.css">
        <link rel="stylesheet" type="text/css" href="theme.css">
        	    <script type="text/javascript" src="navTree.js"></script>
	    <script type="text/javascript" src="jgdoc.js"></script>
	</head>
    <body>
        <div class="startup" id="startup">
            <div class="banner" id="banner">
                <h1 class="projectName">
	               <a href="http://o2js.com/">o2.js</a>   
                </h1>
                <div class="bar">
	                 version 0.25.a.0001369602378
	            </div>
	         </div>
             <div class="content" id="docContent">
                  <div class="block">
                        <div id="searchBlock">
			                <div class="search" >
			                    <div class="searchLabel">Search:</div>
			                    <div class="searchBlock" style="height:100%">
					                <input id="jgsSearchString" type="text" size="60" class="jgdSearchString"/>
					                <div id="jgsSearchPanel" class="jgsSearchPanel" style="display:none">
						                <div  class="jgdSearchRect" >
						                    <div id="jgsSearchResults">
						                        Loading....
						                    </div>
						                </div>
					                   <div id="jgsInfo" class="jgsInfo" >No selection</div>
                                    </div>
                                 </div>
			                </div>
		                </div>
		                <div id="docScroll" class="docScroll">
		                    <div>
			                    <hr/>
						        <div>
						        						        		<H2>
        <span class="objType">Class</span> o2.Dom
    </H2>
    

    <hr/>
    <!-- description -->
    <div>
       <code>
            <span class="modifiers">static</span>
            <span class="objType">class</span> 
            <b>o2.Dom</b>
       </code>
    </div>
                <div class="comment">A cross-browser <strong>DOM</strong> manipulation helper.

 </div>
                                            <span class="definedIn">Defined in </span>
        <a href="physical/dom/module-constants.html">dom.constants</a>
        <hr/> 
    <p />
    
            	
                                
                    
    
                    
            
                <div class="summaryTable function">
            <div class="summaryTableHeader">
                <span class="objType">Function</span> Summary
            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___activateAlternateStylesheet"><span class="elementName">activateAlternateStylesheet</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 title)
            </div>          
                <div class="summaryItemDesc">
        <p>Activates the <strong>alternate style sheet</strong> with the given
 <code>title</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.activateAlternateStylesheet('alternateTheme');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___addClass"><span class="elementName">addClass</span></a>
                (<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
            </div>          
                <div class="summaryItemDesc">
        <p>Add a class to the given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addClass('container', 'active');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___addCssRules"><span class="elementName">addCssRules</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Adds the CSS rules given in the <strong>cssText</strong> parameter
 to the document.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addCssRules(
      'div.warning { background-color:#c00; color:#fff };'
 );
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___addStyle"><span class="elementName">addStyle</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 style)
            </div>          
                <div class="summaryItemDesc">
        <p>Adds style attributes to a <code>DOM</code> node.</p>

 <p>Note that adding and removing style attributes to a
 <strong>DOM</strong>
 not is considered "bad practice". Do not use inline styles to modify the
 view;
 assign <strong>className</strong>'s instead of <strong>style</strong>
 values.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addStyle('container', {color : '#bada55'})
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___append"><span class="elementName">append</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmChild, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmParent)
            </div>          
                <div class="summaryItemDesc">
        <p>Appends the element to the bottom of its parent.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var child = o2.$('childNode');
 var parent = o2.$('parentNode');
 o2.Dom.append(child, parent);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___compactField"><span class="elementName">compactField</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 field)
            </div>          
                <div class="summaryItemDesc">
        <p>Trims a given field, and returns the compacted value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.compactField('txtInput');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___create"><span class="elementName">create</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___createElement">o2.Dom.createElement</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___createClassNameRegExp"><span class="elementName">createClassNameRegExp</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
            </div>          
                <div class="summaryItemDesc">
        <p>Creates a regular expression that will match a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var reg = o2.Dom.createClassNameRegExp('testClass');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___createDocumentFragment"><span class="elementName">createDocumentFragment</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 html)
            </div>          
                <div class="summaryItemDesc">
        <p>Creates a <strong>Document Fragment</strong> from an
 <strong>HTML</strong> <code>String</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var frag = o2.Dom.createDocumentFragment('[div]test[/div]');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___createElement"><span class="elementName">createElement</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 name, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 attributes)
            </div>          
                <div class="summaryItemDesc">
        <p>Creates an element with given name and attributes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var el = o2.Dom.createElement(
      'div',
      {className : 'active', style : 'font-weight : bold'}
 );
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___empty"><span class="elementName">empty</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
            </div>          
                <div class="summaryItemDesc">
        <p>An <strong>alias</strong> to <a href="logical/o2/Dom.html#___removeChildren">o2.Dom.removeChildren</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getAttribute"><span class="elementName">getAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the attribute of a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var uid = o2.Dom.getAttribute('container', 'data-user-id');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenByAttributeUntil"><span class="elementName">getChildrenByAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element until a given node (exclusive).</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByAttributeUntil('container',
      'data-user-id', '42', o2.$('stopper'), 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenByClass"><span class="elementName">getChildrenByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element having a specific class.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByClass('container', 'active', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenByClassUntil"><span class="elementName">getChildrenByClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element having a specific class, and until
 (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByClassUntil('container', 'active',
      o2.$('stopper'), 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenUntil"><span class="elementName">getChildrenUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element until
 (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenUntil('container', o2.$('stopper'), 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithAttribute"><span class="elementName">getChildrenWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithAttribute('container', 'data-user-id',
 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithAttributeUntil"><span class="elementName">getChildrenWithAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element with a given attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithAttributeUntil('content',
      'data-user-id', o2.$('stopper'), 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithClass"><span class="elementName">getChildrenWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithClassUntil"><span class="elementName">getChildrenWithClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element with a "class" attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithClassUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithId"><span class="elementName">getChildrenWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element with an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithIdUntil"><span class="elementName">getChildrenWithIdUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element with an "id" attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithIdUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getCss"><span class="elementName">getCss</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___getStyle">o2.Dom.getStyle</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getDimension"><span class="elementName">getDimension</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the dimension of the given element in the form
 <code>{width: w, height: h}</code>, where <strong>w</strong> and
 <strong>h</strong> are in pixels.

 <p><strong>Usage example:</strong></p>

 <pre>
 var dimensions = o2.Dom.getDimension('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getDocumentDimension"><span class="elementName">getDocumentDimension</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the dimension of the document in the form <code>{width: w,
 height: h}</code>. If the visible (i.e. <code>clientHeight</code>) is
 greater than the document's height returns the height of the visible
 area as the height portion.

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportInfo = o2.Dom.getDocumentDimension();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getDocumentHeight"><span class="elementName">getDocumentHeight</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the total height of the document in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportHeight = o2.Dom.getDocumentHeight();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getDocumentWidth"><span class="elementName">getDocumentWidth</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the total width of the document in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportWidth = o2.Dom.getDocumentWidth();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElements"><span class="elementName">getElements</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElements('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElementsByAttribute"><span class="elementName">getElementsByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>, filtering
 the nodes having a given attribute equals to a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElementsByClass"><span class="elementName">getElementsByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a given <strong>CSS</strong> <strong>class</strong> name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElementsWithAttribute"><span class="elementName">getElementsWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElementsWithClass"><span class="elementName">getElementsWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a '<strong>class</strong>" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElementsWithId"><span class="elementName">getElementsWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 an '<strong>id</strong>" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirst"><span class="elementName">getFirst</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirst('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstByAttribute"><span class="elementName">getFirstByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node, and
 having an attibute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstByClass"><span class="elementName">getFirstByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChild"><span class="elementName">getFirstChild</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChild('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChildByAttribute"><span class="elementName">getFirstChildByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChildByClass"><span class="elementName">getFirstChildByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node, and
 having a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChildWithAttribute"><span class="elementName">getFirstChildWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChildWithClass"><span class="elementName">getFirstChildWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChildWithId"><span class="elementName">getFirstChildWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstWithAttribute"><span class="elementName">getFirstWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstWithClass"><span class="elementName">getFirstWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstWithId"><span class="elementName">getFirstWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getHeight"><span class="elementName">getHeight</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the <strong>height</strong> of the given element, in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var containerHeight = o2.Dom.getHeight('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getHtml"><span class="elementName">getHtml</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the <strong>HTML</strong> of a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var html = o2.Dom.getHtml('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLast"><span class="elementName">getLast</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLast('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastByAttribute"><span class="elementName">getLastByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node, and
 has an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastByClass"><span class="elementName">getLastByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node, and
 has a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChild"><span class="elementName">getLastChild</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChild('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChildByAttribute"><span class="elementName">getLastChildByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChildByClass"><span class="elementName">getLastChildByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChildWithAttribute"><span class="elementName">getLastChildWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChildWithClass"><span class="elementName">getLastChildWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChildWithId"><span class="elementName">getLastChildWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastWithAttribute"><span class="elementName">getLastWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node, and
 has a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastWithClass"><span class="elementName">getLastWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node, and
 has a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastWithId"><span class="elementName">getLastWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node, and
 has an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNext"><span class="elementName">getNext</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the next sibling of the element, that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNext('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAll"><span class="elementName">getNextAll</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAll('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllByAttribute"><span class="elementName">getNextAllByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllByAttributeUntil"><span class="elementName">getNextAllByAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an attribute with a given value, until (but not included
 to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByAttributeUntil('content', 'data-id', '42',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllByClass"><span class="elementName">getNextAllByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllByClassUntil"><span class="elementName">getNextAllByClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given <strong>CSS</strong> class name, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllUntil"><span class="elementName">getNextAllUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, until (but not included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithAttribute"><span class="elementName">getNextAllWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithAttributeUntil"><span class="elementName">getNextAllWithAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithClass"><span class="elementName">getNextAllWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithClassUntil"><span class="elementName">getNextAllWithClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a "class" attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithClassUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithId"><span class="elementName">getNextAllWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithIdUntil"><span class="elementName">getNextAllWithIdUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an "id" attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithIdUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextByAttribute"><span class="elementName">getNextByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the next sibling of the element, that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextByAttribute('content', 'data-id', '42', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextByClass"><span class="elementName">getNextByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextByClass('content', 'selected', 'li');
 </pre>

 <p>Gets the next sibling of the element, that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextWithAttribute"><span class="elementName">getNextWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the next sibling of the element, that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextWithClass"><span class="elementName">getNextWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the next sibling of the element, that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextWithId"><span class="elementName">getNextWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the next sibling of the element, that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNth"><span class="elementName">getNth</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNth('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthByAttribute"><span class="elementName">getNthByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthByAttribute('content', 'data-id', '42', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthByClass"><span class="elementName">getNthByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given <strong>CSS</strong>
 class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthByAttribute('content', 'selected', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChild"><span class="elementName">getNthChild</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChild('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChildByAttribute"><span class="elementName">getNthChildByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element, having
 a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildByAttribute('content', 'data-id', '42', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChildByClass"><span class="elementName">getNthChildByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element, having a
 given attribute with a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildByClass('content', 'selected', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChildWithAttribute"><span class="elementName">getNthChildWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithAttribute('content', 'data-id', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChildWithClass"><span class="elementName">getNthChildWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithClass('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChildWithId"><span class="elementName">getNthChildWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithId('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNext"><span class="elementName">getNthNext</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNext('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNextByAttribute"><span class="elementName">getNthNextByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextByAttribute('content', 'data-id', '42', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNextByClass"><span class="elementName">getNthNextByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextByClass('content', 'selected', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNextWithAttribute"><span class="elementName">getNthNextWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithAttribute('content', 'data-id', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNextWithClass"><span class="elementName">getNthNextWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithClass('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNextWithId"><span class="elementName">getNthNextWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithId('content', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having an "id" attribute defined.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParent"><span class="elementName">getNthParent</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> parent node of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParent('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParentByAttribute"><span class="elementName">getNthParentByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentByAttribute('content', 'data-id', '42',
      42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> parent node of an element, having a given
 attribute with a given value.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParentByClass"><span class="elementName">getNthParentByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> parent node of an element, having a given
 class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentByClass('content', 'selected', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParentWithAttribute"><span class="elementName">getNthParentWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> parent node of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithAttribute('content', 'data-id', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParentWithClass"><span class="elementName">getNthParentWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> parent node of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithClass('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParentWithId"><span class="elementName">getNthParentWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> parent node of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithId('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrev"><span class="elementName">getNthPrev</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrev('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrevByAttribute"><span class="elementName">getNthPrevByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevByAttribute('content', 'data-id', '42',
      42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrevByClass"><span class="elementName">getNthPrevByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevByClass('content', 'selected', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrevWithAttribute"><span class="elementName">getNthPrevWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithAttribute('content', 'data-id', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrevWithClass"><span class="elementName">getNthPrevWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithClass('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrevWithId"><span class="elementName">getNthPrevWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithId('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthWithAttribute"><span class="elementName">getNthWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithAttribute('content', 'data-id', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given attribute defined.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthWithClass"><span class="elementName">getNthWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithClass('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthWithId"><span class="elementName">getNthWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithId('content', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having an "id" attribute defined.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getObjectScrollOffset"><span class="elementName">getObjectScrollOffset</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the <strong>DOM</strong> object's scroll offset.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var offsets = o2.Dom.getObjectScrollOfset('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getOffset"><span class="elementName">getOffset</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
            </div>          
                <div class="summaryItemDesc">
        //          *
//          * <p>Gets the left and top offset of a given element.</p>
//          *
//          *    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getOffsetLeft"><span class="elementName">getOffsetLeft</span></a>()
            </div>
        <div class="summaryItemDesc">
        //      *
//      * <p>An alias to <code>o2.Dom.getOffset(obj).left</code>.</p>
//      *
//      *    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getOffsetTop"><span class="elementName">getOffsetTop</span></a>()
            </div>
        <div class="summaryItemDesc">
        //      *
//      * <p>An alias to <code>o2.Dom.getOffset(obj).top</code>.</p>
//      *
//      *    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParent"><span class="elementName">getParent</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParent('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentByAttribute"><span class="elementName">getParentByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element, having an attribute with a
 given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentByAttribute('content', 'data-id', '42', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentByClass"><span class="elementName">getParentByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element, having a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentWithAttribute"><span class="elementName">getParentWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithAttribute('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentWithClass"><span class="elementName">getParentWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentWithId"><span class="elementName">getParentWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParents"><span class="elementName">getParents</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParents('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsByAttribute"><span class="elementName">getParentsByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given attribute
 with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsByAttributeUntil"><span class="elementName">getParentsByAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given attribute
 with a given value, until (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByAttributeUntil('content', 'data-id', '42',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsByClass"><span class="elementName">getParentsByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsByClassUntil"><span class="elementName">getParentsByClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given
 <strong>CSS</strong> class name, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsUntil"><span class="elementName">getParentsUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithAttribute"><span class="elementName">getParentsWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithAttributeUntil"><span class="elementName">getParentsWithAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithClass"><span class="elementName">getParentsWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithClassUntil"><span class="elementName">getParentsWithClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a "class"
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithClass('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithId"><span class="elementName">getParentsWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithIdUntil"><span class="elementName">getParentsWithIdUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having an "id"
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithIdUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrev"><span class="elementName">getPrev</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrev('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAll"><span class="elementName">getPrevAll</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAll('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllByAttribute"><span class="elementName">getPrevAllByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllByAttributeUntil"><span class="elementName">getPrevAllByAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute with a given value, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByAttributeUntil('content', 'data-id',
      '42', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllByClass"><span class="elementName">getPrevAllByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllByClassUntil"><span class="elementName">getPrevAllByClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given <strong>CSS</strong> class name, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllUntil"><span class="elementName">getPrevAllUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 until (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithAttribute"><span class="elementName">getPrevAllWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithAttributeUntil"><span class="elementName">getPrevAllWithAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithClass"><span class="elementName">getPrevAllWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithClassUntil"><span class="elementName">getPrevAllWithClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a "class" attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithClassUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithId"><span class="elementName">getPrevAllWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithIdUntil"><span class="elementName">getPrevAllWithIdUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having an "id" attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithIdUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevByAttribute"><span class="elementName">getPrevByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node,
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevByAttribute('content', 'data-id', '42', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevByClass"><span class="elementName">getPrevByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevWithAttribute"><span class="elementName">getPrevWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevWithClass"><span class="elementName">getPrevWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevWithId"><span class="elementName">getPrevWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node,
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithId('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getScrollOffset"><span class="elementName">getScrollOffset</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___getObjectScrollOffset">o2.Dom.getObjectScrollOffset</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblings"><span class="elementName">getSiblings</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblings('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsByAttribute"><span class="elementName">getSiblingsByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given attribute equals
 a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsByAttributeUntil"><span class="elementName">getSiblingsByAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given attribute equals
 a given value, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByAttributeUntil('content', 'data-id',
      '42', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsByClass"><span class="elementName">getSiblingsByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsByClassUntil"><span class="elementName">getSiblingsByClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given class name,
 until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsUntil"><span class="elementName">getSiblingsUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element until (but not included to) a
 specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithAttribute"><span class="elementName">getSiblingsWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithAttribute('content', 'dada-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithAttributeUntil"><span class="elementName">getSiblingsWithAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given attribute
 defined, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithClass"><span class="elementName">getSiblingsWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having "class" attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithClassUntil"><span class="elementName">getSiblingsWithClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a "class" attribute
 defined, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithClassUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithId"><span class="elementName">getSiblingsWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having an "id" attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithIdUntil"><span class="elementName">getSiblingsWithIdUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithIdUntil('content', 'stopper', 'li');
 </pre>

 <p>Gets the siblings of the element, having an "id" attribute
 defined, until (but not included to) a specific node.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getStyle"><span class="elementName">getStyle</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 cssProperty, <span class="type">Boolean</span>
 isNoForce)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the <strong>style</strong> of a given property of
 the element.</p>
 <p>Tries to parse the <code>currentStyle</code>, if available;
 otherwise tries to calculate the style using
 <code>window.getComputedStyle</code>;
 gets <code>obj.style</code> if everything else fails.

 <p>Note that adding and removing style attributes to a
 <strong>DOM</strong> not is considered "bad practice". Do not use
 inline styles to modify the view;
 assign <strong>className</strong>'s instead of <strong>style</strong>
 values.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var color = o2.Dom.getStyle('container', 'color');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getText"><span class="elementName">getText</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the textual content of the given node, replacing entities
 like <code>& amp;</code> with it's corresponding character
 counterpart (<strong>&</strong> in this example).</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var txt = o2.Dom.getText('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getViewportInfo"><span class="elementName">getViewportInfo</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the viewport information in the form
 <code>{scrollTop : #, scrollLeft: #, width: #, height: #}</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var details = o2.Dom.getViewportInfo();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getWidth"><span class="elementName">getWidth</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the <strong>width</strong> of the given element, in pixels.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getWindowInnerDimension"><span class="elementName">getWindowInnerDimension</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the dimension of the visible area of the browser in the form
 <code>{width: w, height: h}</code>.

 <p><strong>Usage example:</strong></p>

 <pre>
 var windowDimensions = o2.Dom.getWindowInnerDimension();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getWindowInnerHeight"><span class="elementName">getWindowInnerHeight</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the inner height of the visible area.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var innerHeight = o2.Dom.getWindowInnerHeight();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getWindowInnerWidth"><span class="elementName">getWindowInnerWidth</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the inner width of the visible area.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var innerWidth = o2.Dom.getWindowInnerWidth();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getWindowScrollOffset"><span class="elementName">getWindowScrollOffset</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the <strong>window</strong>'s scroll offset.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var offsets = o2.Dom.getWindowScrollOffset();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___hasClass"><span class="elementName">hasClass</span></a>
                (<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether an <strong>element</strong> has the given
 <strong>className</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 if (o2.Dom.hasClass('container', 'active')) {
      doStuff();
 }
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___hide"><span class="elementName">hide</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Hides the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.hide('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___insertAfter"><span class="elementName">insertAfter</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmNewNode, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmRefNode)
            </div>          
                <div class="summaryItemDesc">
        <p>Adds the node after the reference node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var ref = o2.$('ref');
 var new = o2.$('new');
 o2.Dom.insertAfter(new, ref);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___insertBefore"><span class="elementName">insertBefore</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmNewNode, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmRefNode)
            </div>          
                <div class="summaryItemDesc">
        <p>Adds the node before the reference node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var ref = o2.$('ref');
 var new = o2.$('new');
 o2.Dom.insertBefore(new, ref);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isChild"><span class="elementName">isChild</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is the child of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isChild = o2.Dom.isChild('child', 'parent');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isDocument"><span class="elementName">isDocument</span></a>
                (<span class="type">DOMNode</span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether the given node is a <code>document</code> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isDocument = o2.Dom.isDocument(currentNode);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isElement"><span class="elementName">isElement</span></a>
                (<span class="type">DOMNode</span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether the given node is an <strong>element</strong>
 node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isElement = o2.Dom.isElement(currentNode);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isNext"><span class="elementName">isNext</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is a sibling after
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isNext = o2.Dom.isNext('itemId', 'refId');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isParent"><span class="elementName">isParent</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is a parent of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isParent('itemId', 'refId');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isParentOrSelf"><span class="elementName">isParentOrSelf</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is parent of
 <strong>ref</strong>, or it's the <strong>ref</strong> itself.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isParentOrSelf('itemId', 'refId');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isPrev"><span class="elementName">isPrev</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is a sibling before
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isPrev('itemId', 'refId');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isSibling"><span class="elementName">isSibling</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is a sibling of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isSibling = o2.Dom.isSibling('itemId', 'refId');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isVisible"><span class="elementName">isVisible</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether the <strong>DOM</strong> node is visible.</p>
 <p>Note that being visible does not necessarily mean being available
 inside the <strong>viewport</strong>.</p>
 <p>If a <strong>DOM</strong> node has <code>display == 'none'</code>
 or <code>visibility == 'hidden'</code> <strong>CSS</strong> properties,
 then it's regarded as "invisible", otherwise it is considered to be
 "visible".</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isContainerVisible = o2.Dom.isVisible('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___loadCss"><span class="elementName">loadCss</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 src, <span class="type">Function</span>
 successCallback)
            </div>          
                <div class="summaryItemDesc">
        <p>Asynchronously loads a <strong>CSS</strong> file with a given
 <strong>src</strong>.</p>
 <p>Cross-domain loading is also okay: The <strong>CSS</strong> file does
 not have to be in the same domain as the web page.</p>

 <p>The success and failure callbacks is a somewhat hacky way of handling
 <strong>CSS</strong> load events. In deed, detecting <strong>CSS</strong>
 load is not an easy task, and it's not necessary most of the time.</p>
 <p>Though it may get handy to prevent the Flash of Unstyled Content
 (FOUC) issues.</p>
 <p>A more robust way of handling load callbacks is polling
 the property of a test element (such as the background color), that
 you know that the loaded <strong>CSS</strong> will change for sure.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadCss('http://cdn.example.com/theme.css', function() {
      handleSuccess();
 });
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___loadImage"><span class="elementName">loadImage</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 url, <span class="type">Function</span>
 successCallback)
            </div>          
                <div class="summaryItemDesc">
        <p>Tries to load the image into a <strong>JavaScript</strong>
 <code>Image</code> object; then triggers
 <strong>successCallback</strong> or
 <strong>failureCallback</strong> depending on
 the result of the load attempt.</p>

 <p>This function can be used for pre-loading or post-loading images.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadImage('http//asset.example.com/spinner.png', function() {
      handleSuccess();
 });
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___loadScript"><span class="elementName">loadScript</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 src, <span class="type">Function</span>
 callback)
            </div>          
                <div class="summaryItemDesc">
        <p>Asynchronously loads a <strong>script</strong> with a given
 <strong>src</strong>.</p>

 <p>Cross-domain loading is also okay: The <strong>script</strong> does
 not have to be in the same domain as the web page.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadImage('http//asset.example.com/script.js', function() {
      handleSuccess();
 });
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___prepend"><span class="elementName">prepend</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmChild, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmParent)
            </div>          
                <div class="summaryItemDesc">
        <p>Prepends the element to the top of its parent.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var child = o2.$('ChildContainer');
 var parent = o2.$('MasterContainer');
 o2.Dom.prepend(child, parent);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___preventMultipleSubmit"><span class="elementName">preventMultipleSubmit</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 form)
            </div>          
                <div class="summaryItemDesc">
        <p>Prevents the form to re-submit itself when the submit button
 is pressed more than once.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.preventMultipleSubmit('actionForm');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___ready"><span class="elementName">ready</span></a>
                (<span class="type">Function</span>
 delegate)
            </div>          
                <div class="summaryItemDesc">
        <p>Fires when the <code>HTML DOM</code> is ready.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.ready(function() {
      doInitializaton();
 });
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___remove"><span class="elementName">remove</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
            </div>          
                <div class="summaryItemDesc">
        <p>Removes the element from the <strong>DOM</strong> flow.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.remove('navigation');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___removeChildren"><span class="elementName">removeChildren</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
            </div>          
                <div class="summaryItemDesc">
        <p>Removes all the children of the element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeChildren('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___removeClass"><span class="elementName">removeClass</span></a>
                (<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
            </div>          
                <div class="summaryItemDesc">
        <p>Removes a <strong>class</strong> name from the given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeClass('container', 'active');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___removeEmpty"><span class="elementName">removeEmpty</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An <strong>alias</strong> to
 <a href="logical/o2/Dom.html#___removeEmptyTextNodes">o2.Dom.removeEmptyTextNodes</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___removeEmptyTextNodes"><span class="elementName">removeEmptyTextNodes</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
            </div>          
                <div class="summaryItemDesc">
        <p>Removes empty text nodes from the element.</p>
 <p>Note that this removal is not recursive; only the first-level empty
 child nodes of the element will be removed.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeEmptyTextNodes('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___removeNode"><span class="elementName">removeNode</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An <strong>alias</strong> to <a href="logical/o2/Dom.html#___remove">o2.Dom.remove</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___replace"><span class="elementName">replace</span></a>
                (<span class="type"></span>
 elmTarget, <span class="type"></span>
 elmToReplace)
            </div>          
                <div class="summaryItemDesc">
        <p>Replaces one node with another.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.replace('firstContainer', 'secondContainer');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollObjectToBottom"><span class="elementName">scrollObjectToBottom</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Scrolls an element to bottom.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollObjectToBottom('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollObjectToTop"><span class="elementName">scrollObjectToTop</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Scrolls an element to top.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollObjectToTop('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollTo"><span class="elementName">scrollTo</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollToObject"><span class="elementName">scrollToObject</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollWindowToBottom"><span class="elementName">scrollWindowToBottom</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollWindowToBottom();
 </pre>

 <p>Scrolls window to bottom.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollWindowToObject"><span class="elementName">scrollWindowToObject</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollWindowToTop"><span class="elementName">scrollWindowToTop</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollWindowToTop();
 </pre>

 <p>Scrolls window to top.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setAttribute"><span class="elementName">setAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value)
            </div>          
                <div class="summaryItemDesc">
        <p>Sets the attribute of the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setAttribute('container', 'data-user-id', '123');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setCss"><span class="elementName">setCss</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setDimension"><span class="elementName">setDimension</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 dimension)
            </div>          
                <div class="summaryItemDesc">
        <p>Sets the dimension of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setDimension('container', {width: 400, height: 200});
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setHeight"><span class="elementName">setHeight</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type">Integer</span>
 height)
            </div>          
                <div class="summaryItemDesc">
        <p>Sets the <strong>height</strong> of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setHeight('container', 300);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setHtml"><span class="elementName">setHtml</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
            </div>          
                <div class="summaryItemDesc">
        <p>Simply sets the <code>innerHTML</code> of the element.

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setHtml('container', '[h1]hello[/h1]');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setStyle"><span class="elementName">setStyle</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setWidth"><span class="elementName">setWidth</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type">Integer</span>
 width)
            </div>          
                <div class="summaryItemDesc">
        <p>Sets the <strong>width</strong> of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setWidth('container', 500);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___show"><span class="elementName">show</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
            </div>          
                <div class="summaryItemDesc">
        <p>Shows the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.show('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___toggleClass"><span class="elementName">toggleClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c, <span class="type">Boolean</span>
 state)
            </div>          
                <div class="summaryItemDesc">
        <p>Toggles the <strong>CSS</strong> <code>className</code> of a given
 element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.toggleClass('container', 'active');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___toggleVisibility"><span class="elementName">toggleVisibility</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Boolean</span>
 state)
            </div>          
                <div class="summaryItemDesc">
        <p>Toggles the visibility of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.toggleVisibility('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___trimField"><span class="elementName">trimField</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 field)
            </div>          
                <div class="summaryItemDesc">
        <p>Trims a given field, and returns the trimmed value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.trimField('txtInput');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___unwrap"><span class="elementName">unwrap</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmTarget)
            </div>          
                <div class="summaryItemDesc">
        <p>This is like <a href="logical/o2/Dom.html#___wrap">o2.Dom.wrap</a> in reverse.</p>
 <p>Moves all the elements inside the container to the container's
 position and removes the container from the <strong>DOM</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.unwrap('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">public static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___wrap"><span class="elementName">wrap</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmTarget, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmWrapper)
            </div>          
                <div class="summaryItemDesc">
        <p>Puts the target element into the wrapper element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var wrapper = o2.$('wrapper');
 var target = o2.$('content');
 o2.Dom.wrap(target, wrapper);
 </pre>    </div>  
                            </div>
                </div>
        <p/>
                
                    <!-- ============== Details coming here =================== -->
    	    	    	    	            <div class="details function">
            <h2 class="sectionHeader">Function Details</h2>
                                                                    <h3>
        <a name="___activateAlternateStylesheet">
            <span class="objType">function</span>
            <span class="objName">activateAlternateStylesheet</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    activateAlternateStylesheet(<span class="type"><a href="logical/o2/String.html">String</a></span>
 title)
                </code> 
            </div>          
                <div class="comment">
        <p>Activates the <strong>alternate style sheet</strong> with the given
 <code>title</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.activateAlternateStylesheet('alternateTheme');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            title        </code>
         - the <code>title</code> of the <strong>alternate
 style sheet</strong> to activate.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___addClass">
            <span class="objType">function</span>
            <span class="objName">addClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    addClass(<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
                </code> 
            </div>          
                <div class="comment">
        <p>Add a class to the given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addClass('container', 'active');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            el        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            c        </code>
         - the <strong>className</strong> to add.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___addCssRules">
            <span class="objType">function</span>
            <span class="objName">addCssRules</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    addCssRules()
                </code>
            </div>    
        <div class="comment">
        <p>Adds the CSS rules given in the <strong>cssText</strong> parameter
 to the document.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addCssRules(
      'div.warning { background-color:#c00; color:#fff };'
 );
 </pre>

     </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___addStyle">
            <span class="objType">function</span>
            <span class="objName">addStyle</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    addStyle(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 style)
                </code> 
            </div>          
                <div class="comment">
        <p>Adds style attributes to a <code>DOM</code> node.</p>

 <p>Note that adding and removing style attributes to a
 <strong>DOM</strong>
 not is considered "bad practice". Do not use inline styles to modify the
 view;
 assign <strong>className</strong>'s instead of <strong>style</strong>
 values.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addStyle('container', {color : '#bada55'})
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the current <code>DOM</code> node, or the
 <strong>id</strong> of that node, to add styles to.            </div>   
                                                <div class="param paddedDetails">
        <code>
            style        </code>
         - styles in the form <code>{style1:value1,
 style2:value2}</code>.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___append">
            <span class="objType">function</span>
            <span class="objName">append</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    append(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmChild, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmParent)
                </code> 
            </div>          
                <div class="comment">
        <p>Appends the element to the bottom of its parent.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var child = o2.$('childNode');
 var parent = o2.$('parentNode');
 o2.Dom.append(child, parent);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmChild        </code>
         - the child node, or the <strong>id</strong> of
 the node to append.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmParent        </code>
         - the parent container, or the
 <strong>id</strong> of the container.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___compactField">
            <span class="objType">function</span>
            <span class="objName">compactField</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    compactField(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 field)
                </code> 
            </div>          
                <div class="comment">
        <p>Trims a given field, and returns the compacted value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.compactField('txtInput');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            field        </code>
         - the field to be compacted, or its
 <strong>id</strong>.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             field's compacted value; or <code>null</code> if the field
 does not exist.

 	            	        </div>
        </div>      
                            <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/String.html#___compact">o2.String.compact</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___create">
            <span class="objType">function</span>
            <span class="objName">create</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    create()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___createElement">o2.Dom.createElement</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___createElement">o2.Dom.createElement</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___createClassNameRegExp">
            <span class="objType">function</span>
            <span class="objName">createClassNameRegExp</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    createClassNameRegExp(<span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
                </code> 
            </div>          
                <div class="comment">
        <p>Creates a regular expression that will match a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var reg = o2.Dom.createClassNameRegExp('testClass');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            c        </code>
         - The name of the class.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             a <code>RegExp</code> that matches the given class name.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___createDocumentFragment">
            <span class="objType">function</span>
            <span class="objName">createDocumentFragment</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    createDocumentFragment(<span class="type"><a href="logical/o2/String.html">String</a></span>
 html)
                </code> 
            </div>          
                <div class="comment">
        <p>Creates a <strong>Document Fragment</strong> from an
 <strong>HTML</strong> <code>String</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var frag = o2.Dom.createDocumentFragment('[div]test[/div]');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            html        </code>
         - the <strong>HTML</strong> to create a fragment
 from.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             {HTMLDocumentFragment} - the generated <code>document</code>
 fragment.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___createElement">
            <span class="objType">function</span>
            <span class="objName">createElement</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    createElement(<span class="type"><a href="logical/o2/String.html">String</a></span>
 name, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 attributes)
                </code> 
            </div>          
                <div class="comment">
        <p>Creates an element with given name and attributes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var el = o2.Dom.createElement(
      'div',
      {className : 'active', style : 'font-weight : bold'}
 );
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - the node name of the element (i.e. 'div', 'a').            </div>   
                                                <div class="param paddedDetails">
        <code>
            attributes        </code>
         - an associative array in the form
 <code>{att1:value1, att2:value2}</code>.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the created element.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___empty">
            <span class="objType">function</span>
            <span class="objName">empty</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    empty(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
                </code> 
            </div>          
                <div class="comment">
        <p>An <strong>alias</strong> to <a href="logical/o2/Dom.html#___removeChildren">o2.Dom.removeChildren</a>.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it to process.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___getAttribute">
            <span class="objType">function</span>
            <span class="objName">getAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the attribute of a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var uid = o2.Dom.getAttribute('container', 'data-user-id');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the node, or the <strong>id</strong> of the
 node, to get the attribute of.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the attribute to gather.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the value of the attribute if found; <code>null</code>
 otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenByAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenByAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenByAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element until a given node (exclusive).</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByAttributeUntil('container',
      'data-user-id', '42', o2.$('stopper'), 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenByClass">
            <span class="objType">function</span>
            <span class="objName">getChildrenByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element having a specific class.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByClass('container', 'active', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to
 <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
         	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenByClassUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenByClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenByClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element having a specific class, and until
 (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByClassUntil('container', 'active',
      o2.$('stopper'), 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element until
 (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenUntil('container', o2.$('stopper'), 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithAttribute('container', 'data-user-id',
 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element with a given attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithAttributeUntil('content',
      'data-user-id', o2.$('stopper'), 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithClass">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithClassUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element with a "class" attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithClassUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithId">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element with an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithIdUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithIdUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithIdUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element with an "id" attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithIdUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getCss">
            <span class="objType">function</span>
            <span class="objName">getCss</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getCss()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___getStyle">o2.Dom.getStyle</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___getStyle">o2.Dom.getStyle</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___getDimension">
            <span class="objType">function</span>
            <span class="objName">getDimension</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getDimension(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the dimension of the given element in the form
 <code>{width: w, height: h}</code>, where <strong>w</strong> and
 <strong>h</strong> are in pixels.

 <p><strong>Usage example:</strong></p>

 <pre>
 var dimensions = o2.Dom.getDimension('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the dimension of the <strong>DOMNode</strong> in the form
 <code>{width: w, height: h}</code>.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getDocumentDimension">
            <span class="objType">function</span>
            <span class="objName">getDocumentDimension</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getDocumentDimension()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the dimension of the document in the form <code>{width: w,
 height: h}</code>. If the visible (i.e. <code>clientHeight</code>) is
 greater than the document's height returns the height of the visible
 area as the height portion.

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportInfo = o2.Dom.getDocumentDimension();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the dimension of the document in the form <code>{width: w,
 height: h}</code>.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getDocumentHeight">
            <span class="objType">function</span>
            <span class="objName">getDocumentHeight</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getDocumentHeight()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the total height of the document in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportHeight = o2.Dom.getDocumentHeight();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the document's height.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getDocumentWidth">
            <span class="objType">function</span>
            <span class="objName">getDocumentWidth</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getDocumentWidth()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the total width of the document in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportWidth = o2.Dom.getDocumentWidth();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the document's width.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElements">
            <span class="objType">function</span>
            <span class="objName">getElements</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElements(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElements('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElementsByAttribute">
            <span class="objType">function</span>
            <span class="objName">getElementsByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElementsByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>, filtering
 the nodes having a given attribute equals to a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 HTML <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElementsByClass">
            <span class="objType">function</span>
            <span class="objName">getElementsByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElementsByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a given <strong>CSS</strong> <strong>class</strong> name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElementsWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getElementsWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElementsWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElementsWithClass">
            <span class="objType">function</span>
            <span class="objName">getElementsWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElementsWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a '<strong>class</strong>" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElementsWithId">
            <span class="objType">function</span>
            <span class="objName">getElementsWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElementsWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 an '<strong>id</strong>" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirst">
            <span class="objType">function</span>
            <span class="objName">getFirst</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirst(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirst('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstByAttribute">
            <span class="objType">function</span>
            <span class="objName">getFirstByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node, and
 having an attibute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstByClass">
            <span class="objType">function</span>
            <span class="objName">getFirstByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChild">
            <span class="objType">function</span>
            <span class="objName">getFirstChild</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChild(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChild('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChildByAttribute">
            <span class="objType">function</span>
            <span class="objName">getFirstChildByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChildByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChildByClass">
            <span class="objType">function</span>
            <span class="objName">getFirstChildByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChildByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node, and
 having a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChildWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getFirstChildWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChildWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChildWithClass">
            <span class="objType">function</span>
            <span class="objName">getFirstChildWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChildWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChildWithId">
            <span class="objType">function</span>
            <span class="objName">getFirstChildWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChildWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getFirstWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstWithClass">
            <span class="objType">function</span>
            <span class="objName">getFirstWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstWithId">
            <span class="objType">function</span>
            <span class="objName">getFirstWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getHeight">
            <span class="objType">function</span>
            <span class="objName">getHeight</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getHeight(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the <strong>height</strong> of the given element, in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var containerHeight = o2.Dom.getHeight('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the height of the element, in pixels.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getHtml">
            <span class="objType">function</span>
            <span class="objName">getHtml</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getHtml(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the <strong>HTML</strong> of a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var html = o2.Dom.getHtml('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the <strong>DOM</strong> node or its
 <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the <code>innerHTML</code> of the given node, if it exists;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLast">
            <span class="objType">function</span>
            <span class="objName">getLast</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLast(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLast('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastByAttribute">
            <span class="objType">function</span>
            <span class="objName">getLastByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node, and
 has an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastByClass">
            <span class="objType">function</span>
            <span class="objName">getLastByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node, and
 has a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChild">
            <span class="objType">function</span>
            <span class="objName">getLastChild</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChild(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChild('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChildByAttribute">
            <span class="objType">function</span>
            <span class="objName">getLastChildByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChildByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChildByClass">
            <span class="objType">function</span>
            <span class="objName">getLastChildByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChildByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChildWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getLastChildWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChildWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChildWithClass">
            <span class="objType">function</span>
            <span class="objName">getLastChildWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChildWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChildWithId">
            <span class="objType">function</span>
            <span class="objName">getLastChildWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChildWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getLastWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node, and
 has a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastWithClass">
            <span class="objType">function</span>
            <span class="objName">getLastWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node, and
 has a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastWithId">
            <span class="objType">function</span>
            <span class="objName">getLastWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node, and
 has an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNext">
            <span class="objType">function</span>
            <span class="objName">getNext</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNext(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the next sibling of the element, that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNext('content', 'li');
 </pre>


     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAll">
            <span class="objType">function</span>
            <span class="objName">getNextAll</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAll(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAll('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNextAllByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllByAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllByAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllByAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an attribute with a given value, until (but not included
 to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByAttributeUntil('content', 'data-id', '42',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllByClass">
            <span class="objType">function</span>
            <span class="objName">getNextAllByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllByClassUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllByClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllByClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given <strong>CSS</strong> class name, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, until (but not included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithClass">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithClassUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a "class" attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithClassUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithId">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithIdUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithIdUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithIdUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an "id" attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithIdUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNextByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the next sibling of the element, that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextByAttribute('content', 'data-id', '42', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextByClass">
            <span class="objType">function</span>
            <span class="objName">getNextByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextByClass('content', 'selected', 'li');
 </pre>

 <p>Gets the next sibling of the element, that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNextWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the next sibling of the element, that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextWithClass">
            <span class="objType">function</span>
            <span class="objName">getNextWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the next sibling of the element, that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextWithId">
            <span class="objType">function</span>
            <span class="objName">getNextWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the next sibling of the element, that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNth">
            <span class="objType">function</span>
            <span class="objName">getNth</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNth(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNth('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthByAttribute('content', 'data-id', '42', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthByClass">
            <span class="objType">function</span>
            <span class="objName">getNthByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given <strong>CSS</strong>
 class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthByAttribute('content', 'selected', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChild">
            <span class="objType">function</span>
            <span class="objName">getNthChild</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChild(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChild('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChildByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthChildByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChildByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element, having
 a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildByAttribute('content', 'data-id', '42', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChildByClass">
            <span class="objType">function</span>
            <span class="objName">getNthChildByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChildByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element, having a
 given attribute with a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildByClass('content', 'selected', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChildWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthChildWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChildWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithAttribute('content', 'data-id', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChildWithClass">
            <span class="objType">function</span>
            <span class="objName">getNthChildWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChildWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithClass('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChildWithId">
            <span class="objType">function</span>
            <span class="objName">getNthChildWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChildWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithId('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNext">
            <span class="objType">function</span>
            <span class="objName">getNthNext</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNext(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNext('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNextByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthNextByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNextByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextByAttribute('content', 'data-id', '42', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNextByClass">
            <span class="objType">function</span>
            <span class="objName">getNthNextByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNextByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextByClass('content', 'selected', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNextWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthNextWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNextWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithAttribute('content', 'data-id', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNextWithClass">
            <span class="objType">function</span>
            <span class="objName">getNthNextWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNextWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithClass('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNextWithId">
            <span class="objType">function</span>
            <span class="objName">getNthNextWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNextWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithId('content', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having an "id" attribute defined.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParent">
            <span class="objType">function</span>
            <span class="objName">getNthParent</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParent(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> parent node of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParent('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParentByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthParentByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParentByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentByAttribute('content', 'data-id', '42',
      42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> parent node of an element, having a given
 attribute with a given value.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParentByClass">
            <span class="objType">function</span>
            <span class="objName">getNthParentByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParentByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> parent node of an element, having a given
 class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentByClass('content', 'selected', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParentWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthParentWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParentWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> parent node of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithAttribute('content', 'data-id', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParentWithClass">
            <span class="objType">function</span>
            <span class="objName">getNthParentWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParentWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> parent node of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithClass('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParentWithId">
            <span class="objType">function</span>
            <span class="objName">getNthParentWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParentWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> parent node of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithId('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrev">
            <span class="objType">function</span>
            <span class="objName">getNthPrev</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrev(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrev('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrevByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthPrevByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrevByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevByAttribute('content', 'data-id', '42',
      42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrevByClass">
            <span class="objType">function</span>
            <span class="objName">getNthPrevByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrevByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevByClass('content', 'selected', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrevWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthPrevWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrevWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithAttribute('content', 'data-id', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrevWithClass">
            <span class="objType">function</span>
            <span class="objName">getNthPrevWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrevWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithClass('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrevWithId">
            <span class="objType">function</span>
            <span class="objName">getNthPrevWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrevWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithId('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the
 given criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithAttribute('content', 'data-id', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given attribute defined.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthWithClass">
            <span class="objType">function</span>
            <span class="objName">getNthWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithClass('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthWithId">
            <span class="objType">function</span>
            <span class="objName">getNthWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithId('content', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having an "id" attribute defined.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getObjectScrollOffset">
            <span class="objType">function</span>
            <span class="objName">getObjectScrollOffset</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getObjectScrollOffset(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the <strong>DOM</strong> object's scroll offset.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var offsets = o2.Dom.getObjectScrollOfset('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOM</strong> node to check, or its
 <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the the <strong>DOM</strong> object's scroll offset in the form
 <code>{left: l, top: t}</code>.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getOffset">
            <span class="objType">function</span>
            <span class="objName">getOffset</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getOffset(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
                </code> 
            </div>          
                <div class="comment">
        //          *
//          * <p>Gets the left and top offset of a given element.</p>
//          *
//          *

//          *     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            e        </code>
         - the element, or the id of the element, to get
//          * the offsets of.
//          *
//          *            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the offset from the top-left corner of the viewport,
//          * in the form <code>{left: l, top: t}</code>.
//          	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getOffsetLeft">
            <span class="objType">function</span>
            <span class="objName">getOffsetLeft</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getOffsetLeft()
                </code>
            </div>    
        <div class="comment">
        //      *
//      * <p>An alias to <code>o2.Dom.getOffset(obj).left</code>.</p>
//      *
//      *

//      *     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___getOffset">o2.Dom.getOffset</a>
//</div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___getOffsetTop">
            <span class="objType">function</span>
            <span class="objName">getOffsetTop</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getOffsetTop()
                </code>
            </div>    
        <div class="comment">
        //      *
//      * <p>An alias to <code>o2.Dom.getOffset(obj).top</code>.</p>
//      *
//      *

//      *     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___getOffset">o2.Dom.getOffset</a>
//</div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___getParent">
            <span class="objType">function</span>
            <span class="objName">getParent</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParent(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParent('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentByAttribute">
            <span class="objType">function</span>
            <span class="objName">getParentByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element, having an attribute with a
 given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentByAttribute('content', 'data-id', '42', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentByClass">
            <span class="objType">function</span>
            <span class="objName">getParentByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element, having a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getParentWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithAttribute('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentWithClass">
            <span class="objType">function</span>
            <span class="objName">getParentWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentWithId">
            <span class="objType">function</span>
            <span class="objName">getParentWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParents">
            <span class="objType">function</span>
            <span class="objName">getParents</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParents(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParents('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsByAttribute">
            <span class="objType">function</span>
            <span class="objName">getParentsByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given attribute
 with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsByAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsByAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsByAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given attribute
 with a given value, until (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByAttributeUntil('content', 'data-id', '42',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> node that the traversal
 will be made until, or its <code>String</code> id,            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsByClass">
            <span class="objType">function</span>
            <span class="objName">getParentsByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsByClassUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsByClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsByClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given
 <strong>CSS</strong> class name, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getParentsWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsWithAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithClass">
            <span class="objType">function</span>
            <span class="objName">getParentsWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithClassUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsWithClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a "class"
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithClass('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithId">
            <span class="objType">function</span>
            <span class="objName">getParentsWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithIdUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsWithIdUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithIdUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having an "id"
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithIdUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrev">
            <span class="objType">function</span>
            <span class="objName">getPrev</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrev(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrev('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAll">
            <span class="objType">function</span>
            <span class="objName">getPrevAll</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAll(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAll('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllByAttribute">
            <span class="objType">function</span>
            <span class="objName">getPrevAllByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllByAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllByAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllByAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute with a given value, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByAttributeUntil('content', 'data-id',
      '42', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllByClass">
            <span class="objType">function</span>
            <span class="objName">getPrevAllByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllByClassUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllByClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllByClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given <strong>CSS</strong> class name, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 until (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithClass">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithClassUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a "class" attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithClassUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithId">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithIdUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithIdUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithIdUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having an "id" attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithIdUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevByAttribute">
            <span class="objType">function</span>
            <span class="objName">getPrevByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node,
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevByAttribute('content', 'data-id', '42', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - i the value of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevByClass">
            <span class="objType">function</span>
            <span class="objName">getPrevByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getPrevWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevWithClass">
            <span class="objType">function</span>
            <span class="objName">getPrevWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevWithId">
            <span class="objType">function</span>
            <span class="objName">getPrevWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node,
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithId('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getScrollOffset">
            <span class="objType">function</span>
            <span class="objName">getScrollOffset</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getScrollOffset()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___getObjectScrollOffset">o2.Dom.getObjectScrollOffset</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___getObjectScrollOffset">o2.Dom.getObjectScrollOffset</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblings">
            <span class="objType">function</span>
            <span class="objName">getSiblings</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblings(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblings('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsByAttribute">
            <span class="objType">function</span>
            <span class="objName">getSiblingsByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given attribute equals
 a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsByAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsByAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsByAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given attribute equals
 a given value, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByAttributeUntil('content', 'data-id',
      '42', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsByClass">
            <span class="objType">function</span>
            <span class="objName">getSiblingsByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsByClassUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsByClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsByClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given class name,
 until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element until (but not included to) a
 specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithAttribute('content', 'dada-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given attribute
 defined, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithClass">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having "class" attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithClassUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a "class" attribute
 defined, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithClassUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithId">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having an "id" attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithIdUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithIdUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithIdUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithIdUntil('content', 'stopper', 'li');
 </pre>

 <p>Gets the siblings of the element, having an "id" attribute
 defined, until (but not included to) a specific node.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getStyle">
            <span class="objType">function</span>
            <span class="objName">getStyle</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getStyle(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 cssProperty, <span class="type">Boolean</span>
 isNoForce)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the <strong>style</strong> of a given property of
 the element.</p>
 <p>Tries to parse the <code>currentStyle</code>, if available;
 otherwise tries to calculate the style using
 <code>window.getComputedStyle</code>;
 gets <code>obj.style</code> if everything else fails.

 <p>Note that adding and removing style attributes to a
 <strong>DOM</strong> not is considered "bad practice". Do not use
 inline styles to modify the view;
 assign <strong>className</strong>'s instead of <strong>style</strong>
 values.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var color = o2.Dom.getStyle('container', 'color');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element, or the <strong>id</strong> of it,
 to check.            </div>   
                                                <div class="param paddedDetails">
        <code>
            cssProperty        </code>
         - the css property either
 <strong>dash-separated</strong>
 or <strong>camelCased</strong> (i.e.: 'border-color' or
 'borderColor')            </div>   
                                                <div class="param paddedDetails">
        <code>
            isNoForce        </code>
         - (optional; defaults to
 <code>false</code>)
 if <code>true</code> inherited values from the CSS files will also be
 parsed, otherwise, only inline styles will be parsed.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the calculated <strong>style</strong> value.
         	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getText">
            <span class="objType">function</span>
            <span class="objName">getText</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getText(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the textual content of the given node, replacing entities
 like <code>& amp;</code> with it's corresponding character
 counterpart (<strong>&</strong> in this example).</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var txt = o2.Dom.getText('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the <strong>DOM</strong> node or its
 <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the textual content of the given node.
         	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getViewportInfo">
            <span class="objType">function</span>
            <span class="objName">getViewportInfo</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getViewportInfo()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the viewport information in the form
 <code>{scrollTop : #, scrollLeft: #, width: #, height: #}</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var details = o2.Dom.getViewportInfo();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the viewport information.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getWidth">
            <span class="objType">function</span>
            <span class="objName">getWidth</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getWidth(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the <strong>width</strong> of the given element, in pixels.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.

 <p><strong>Usage example:</strong></p>

 <pre>
 var elementWidth = o2.Dom.getWidth('container');
 </pre>            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the width of the element, in pixels.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getWindowInnerDimension">
            <span class="objType">function</span>
            <span class="objName">getWindowInnerDimension</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getWindowInnerDimension()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the dimension of the visible area of the browser in the form
 <code>{width: w, height: h}</code>.

 <p><strong>Usage example:</strong></p>

 <pre>
 var windowDimensions = o2.Dom.getWindowInnerDimension();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the dimension of the visible area of the browser in the form
 <code>{width: w, height: h}</code>.
         	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getWindowInnerHeight">
            <span class="objType">function</span>
            <span class="objName">getWindowInnerHeight</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getWindowInnerHeight()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the inner height of the visible area.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var innerHeight = o2.Dom.getWindowInnerHeight();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the inner height of the window in pixels.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getWindowInnerWidth">
            <span class="objType">function</span>
            <span class="objName">getWindowInnerWidth</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getWindowInnerWidth()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the inner width of the visible area.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var innerWidth = o2.Dom.getWindowInnerWidth();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the inner width of the window in pixels.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getWindowScrollOffset">
            <span class="objType">function</span>
            <span class="objName">getWindowScrollOffset</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getWindowScrollOffset()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the <strong>window</strong>'s scroll offset.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var offsets = o2.Dom.getWindowScrollOffset();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the the <strong>window</strong>'s scroll offset in the form
 <code>{left: l, top: t}</code>.
         	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___hasClass">
            <span class="objType">function</span>
            <span class="objName">hasClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    hasClass(<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether an <strong>element</strong> has the given
 <strong>className</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 if (o2.Dom.hasClass('container', 'active')) {
      doStuff();
 }
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            el        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            c        </code>
         - the <strong>className</strong> to test.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>el</strong> has the
 <code>className</code> <strong>c</strong>, <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___hide">
            <span class="objType">function</span>
            <span class="objName">hide</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    hide(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Hides the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.hide('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOM</strong> node, or the
 <strong>id</strong> to hide.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___insertAfter">
            <span class="objType">function</span>
            <span class="objName">insertAfter</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    insertAfter(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmNewNode, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmRefNode)
                </code> 
            </div>          
                <div class="comment">
        <p>Adds the node after the reference node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var ref = o2.$('ref');
 var new = o2.$('new');
 o2.Dom.insertAfter(new, ref);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmNewNode        </code>
         - the DOM node, or the <strong>id</strong> of
 the node, to insert after.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmRefNode        </code>
         - the reference node, or the
 <strong>id</strong> of the node.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___insertBefore">
            <span class="objType">function</span>
            <span class="objName">insertBefore</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    insertBefore(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmNewNode, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmRefNode)
                </code> 
            </div>          
                <div class="comment">
        <p>Adds the node before the reference node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var ref = o2.$('ref');
 var new = o2.$('new');
 o2.Dom.insertBefore(new, ref);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmNewNode        </code>
         - the node, or the <strong>id</strong> of the
 node, to insert before.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmRefNode        </code>
         - the reference, or the <strong>id</strong>
 of the node.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___isChild">
            <span class="objType">function</span>
            <span class="objName">isChild</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isChild(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is the child of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isChild = o2.Dom.isChild('child', 'parent');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a child of
 <strong>ref</strong>; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isDocument">
            <span class="objType">function</span>
            <span class="objName">isDocument</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isDocument(<span class="type">DOMNode</span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether the given node is a <code>document</code> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isDocument = o2.Dom.isDocument(currentNode);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>node</strong> to test.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if the <strong>node</strong> is the
 <code>document</code> element; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isElement">
            <span class="objType">function</span>
            <span class="objName">isElement</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isElement(<span class="type">DOMNode</span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether the given node is an <strong>element</strong>
 node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isElement = o2.Dom.isElement(currentNode);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>node</strong> to test.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if the <strong>node</strong> is an
 <strong>element</strong> node; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isNext">
            <span class="objType">function</span>
            <span class="objName">isNext</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isNext(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is a sibling after
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isNext = o2.Dom.isNext('itemId', 'refId');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a sibling after
 <strong>ref</strong>; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isParent">
            <span class="objType">function</span>
            <span class="objName">isParent</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isParent(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is a parent of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isParent('itemId', 'refId');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a parent of
 <strong>ref</strong>; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isParentOrSelf">
            <span class="objType">function</span>
            <span class="objName">isParentOrSelf</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isParentOrSelf(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is parent of
 <strong>ref</strong>, or it's the <strong>ref</strong> itself.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isParentOrSelf('itemId', 'refId');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a parent of
 <strong>ref</strong>, or the node itself; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isPrev">
            <span class="objType">function</span>
            <span class="objName">isPrev</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isPrev(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is a sibling before
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isPrev('itemId', 'refId');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a sibling before
 <strong>ref</strong>; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isSibling">
            <span class="objType">function</span>
            <span class="objName">isSibling</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isSibling(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is a sibling of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isSibling = o2.Dom.isSibling('itemId', 'refId');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a sibling of
 <strong>ref</strong>; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isVisible">
            <span class="objType">function</span>
            <span class="objName">isVisible</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isVisible(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether the <strong>DOM</strong> node is visible.</p>
 <p>Note that being visible does not necessarily mean being available
 inside the <strong>viewport</strong>.</p>
 <p>If a <strong>DOM</strong> node has <code>display == 'none'</code>
 or <code>visibility == 'hidden'</code> <strong>CSS</strong> properties,
 then it's regarded as "invisible", otherwise it is considered to be
 "visible".</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isContainerVisible = o2.Dom.isVisible('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOM</strong> element, or the
 <strong>id</strong> of it, to test.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if the element is visible, <code>false</code>
 otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___loadCss">
            <span class="objType">function</span>
            <span class="objName">loadCss</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    loadCss(<span class="type"><a href="logical/o2/String.html">String</a></span>
 src, <span class="type">Function</span>
 successCallback)
                </code> 
            </div>          
                <div class="comment">
        <p>Asynchronously loads a <strong>CSS</strong> file with a given
 <strong>src</strong>.</p>
 <p>Cross-domain loading is also okay: The <strong>CSS</strong> file does
 not have to be in the same domain as the web page.</p>

 <p>The success and failure callbacks is a somewhat hacky way of handling
 <strong>CSS</strong> load events. In deed, detecting <strong>CSS</strong>
 load is not an easy task, and it's not necessary most of the time.</p>
 <p>Though it may get handy to prevent the Flash of Unstyled Content
 (FOUC) issues.</p>
 <p>A more robust way of handling load callbacks is polling
 the property of a test element (such as the background color), that
 you know that the loaded <strong>CSS</strong> will change for sure.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadCss('http://cdn.example.com/theme.css', function() {
      handleSuccess();
 });
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            src        </code>
         - the source <strong>URL</strong> of the
 <strong>css</strong> file.            </div>   
                                                <div class="param paddedDetails">
        <code>
            successCallback        </code>
         - the callback to execute when the load
 operation completes.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___loadImage">
            <span class="objType">function</span>
            <span class="objName">loadImage</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    loadImage(<span class="type"><a href="logical/o2/String.html">String</a></span>
 url, <span class="type">Function</span>
 successCallback)
                </code> 
            </div>          
                <div class="comment">
        <p>Tries to load the image into a <strong>JavaScript</strong>
 <code>Image</code> object; then triggers
 <strong>successCallback</strong> or
 <strong>failureCallback</strong> depending on
 the result of the load attempt.</p>

 <p>This function can be used for pre-loading or post-loading images.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadImage('http//asset.example.com/spinner.png', function() {
      handleSuccess();
 });
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            url        </code>
         - the <strong>URL</strong> of the
 <strong>image</strong>.            </div>   
                                                <div class="param paddedDetails">
        <code>
            successCallback        </code>
         - gets called when the
 <strong>image</strong> is loaded successfully.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___loadScript">
            <span class="objType">function</span>
            <span class="objName">loadScript</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    loadScript(<span class="type"><a href="logical/o2/String.html">String</a></span>
 src, <span class="type">Function</span>
 callback)
                </code> 
            </div>          
                <div class="comment">
        <p>Asynchronously loads a <strong>script</strong> with a given
 <strong>src</strong>.</p>

 <p>Cross-domain loading is also okay: The <strong>script</strong> does
 not have to be in the same domain as the web page.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadImage('http//asset.example.com/script.js', function() {
      handleSuccess();
 });
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            src        </code>
         - the source <strong>URL</strong> of the
 <strong>script</strong>.            </div>   
                                                <div class="param paddedDetails">
        <code>
            callback        </code>
         - the callback to execute when the load
 operation completes.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___prepend">
            <span class="objType">function</span>
            <span class="objName">prepend</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    prepend(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmChild, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmParent)
                </code> 
            </div>          
                <div class="comment">
        <p>Prepends the element to the top of its parent.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var child = o2.$('ChildContainer');
 var parent = o2.$('MasterContainer');
 o2.Dom.prepend(child, parent);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmChild        </code>
         - the child node, or the id of the node to
 prepend.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmParent        </code>
         - the parent container, or the id of the
 container.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___preventMultipleSubmit">
            <span class="objType">function</span>
            <span class="objName">preventMultipleSubmit</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    preventMultipleSubmit(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 form)
                </code> 
            </div>          
                <div class="comment">
        <p>Prevents the form to re-submit itself when the submit button
 is pressed more than once.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.preventMultipleSubmit('actionForm');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            form        </code>
         - A <strong>DOM</strong> reference to the form
 object or its <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___ready">
            <span class="objType">function</span>
            <span class="objName">ready</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    ready(<span class="type">Function</span>
 delegate)
                </code> 
            </div>          
                <div class="comment">
        <p>Fires when the <code>HTML DOM</code> is ready.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.ready(function() {
      doInitializaton();
 });
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            delegate        </code>
         - the callback that's called when the DOM is
 ready.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___remove">
            <span class="objType">function</span>
            <span class="objName">remove</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    remove(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
                </code> 
            </div>          
                <div class="comment">
        <p>Removes the element from the <strong>DOM</strong> flow.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.remove('navigation');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            e        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it, to remove.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the removed node.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___removeChildren">
            <span class="objType">function</span>
            <span class="objName">removeChildren</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    removeChildren(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
                </code> 
            </div>          
                <div class="comment">
        <p>Removes all the children of the element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeChildren('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            e        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it to process.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___removeClass">
            <span class="objType">function</span>
            <span class="objName">removeClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    removeClass(<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
                </code> 
            </div>          
                <div class="comment">
        <p>Removes a <strong>class</strong> name from the given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeClass('container', 'active');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            el        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            c        </code>
         - the className to remove.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___removeEmpty">
            <span class="objType">function</span>
            <span class="objName">removeEmpty</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    removeEmpty()
                </code>
            </div>    
        <div class="comment">
        <p>An <strong>alias</strong> to
 <a href="logical/o2/Dom.html#___removeEmptyTextNodes">o2.Dom.removeEmptyTextNodes</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___removeEmptyTextNodes">o2.Dom.removeEmptyTextNodes</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___removeEmptyTextNodes">
            <span class="objType">function</span>
            <span class="objName">removeEmptyTextNodes</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    removeEmptyTextNodes(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
                </code> 
            </div>          
                <div class="comment">
        <p>Removes empty text nodes from the element.</p>
 <p>Note that this removal is not recursive; only the first-level empty
 child nodes of the element will be removed.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeEmptyTextNodes('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            e        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it to process.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___removeNode">
            <span class="objType">function</span>
            <span class="objName">removeNode</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    removeNode()
                </code>
            </div>    
        <div class="comment">
        <p>An <strong>alias</strong> to <a href="logical/o2/Dom.html#___remove">o2.Dom.remove</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___remove">o2.Dom.remove</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___replace">
            <span class="objType">function</span>
            <span class="objName">replace</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    replace(<span class="type"></span>
 elmTarget, <span class="type"></span>
 elmToReplace)
                </code> 
            </div>          
                <div class="comment">
        <p>Replaces one node with another.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.replace('firstContainer', 'secondContainer');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmTarget        </code>
         - the target node or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmToReplace        </code>
         - the replacement node or its <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___scrollObjectToBottom">
            <span class="objType">function</span>
            <span class="objName">scrollObjectToBottom</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollObjectToBottom(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Scrolls an element to bottom.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollObjectToBottom('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the element, or the <strong>id</strong> of it, to
 scroll.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___scrollObjectToTop">
            <span class="objType">function</span>
            <span class="objName">scrollObjectToTop</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollObjectToTop(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Scrolls an element to top.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollObjectToTop('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the element, or the <strong>id</strong> of the
 element, to scroll.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___scrollTo">
            <span class="objType">function</span>
            <span class="objName">scrollTo</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollTo()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___scrollToObject">
            <span class="objType">function</span>
            <span class="objName">scrollToObject</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollToObject()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___scrollWindowToBottom">
            <span class="objType">function</span>
            <span class="objName">scrollWindowToBottom</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollWindowToBottom()
                </code>
            </div>    
        <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollWindowToBottom();
 </pre>

 <p>Scrolls window to bottom.</p>

     </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___scrollWindowToObject">
            <span class="objType">function</span>
            <span class="objName">scrollWindowToObject</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollWindowToObject()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___scrollWindowToTop">
            <span class="objType">function</span>
            <span class="objName">scrollWindowToTop</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollWindowToTop()
                </code>
            </div>    
        <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollWindowToTop();
 </pre>

 <p>Scrolls window to top.</p>

     </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___setAttribute">
            <span class="objType">function</span>
            <span class="objName">setAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value)
                </code> 
            </div>          
                <div class="comment">
        <p>Sets the attribute of the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setAttribute('container', 'data-user-id', '123');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the object or the <code>String</code> id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___setCss">
            <span class="objType">function</span>
            <span class="objName">setCss</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setCss()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___setDimension">
            <span class="objType">function</span>
            <span class="objName">setDimension</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setDimension(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 dimension)
                </code> 
            </div>          
                <div class="comment">
        <p>Sets the dimension of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setDimension('container', {width: 400, height: 200});
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            dimension        </code>
         - the new dimension in the form
 <code>{width: w, height: h}</code>.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___setHeight">
            <span class="objType">function</span>
            <span class="objName">setHeight</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setHeight(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type">Integer</span>
 height)
                </code> 
            </div>          
                <div class="comment">
        <p>Sets the <strong>height</strong> of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setHeight('container', 300);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            height        </code>
         - the new height in pixels.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___setHtml">
            <span class="objType">function</span>
            <span class="objName">setHtml</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setHtml(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
                </code> 
            </div>          
                <div class="comment">
        <p>Simply sets the <code>innerHTML</code> of the element.

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setHtml('container', '[h1]hello[/h1]');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - The <strong>DOM</strong> element to set the
 <strong>HTML</strong> of, or its <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___setStyle">
            <span class="objType">function</span>
            <span class="objName">setStyle</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setStyle()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___setWidth">
            <span class="objType">function</span>
            <span class="objName">setWidth</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setWidth(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type">Integer</span>
 width)
                </code> 
            </div>          
                <div class="comment">
        <p>Sets the <strong>width</strong> of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setWidth('container', 500);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            width        </code>
         - the new width in pixels.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___show">
            <span class="objType">function</span>
            <span class="objName">show</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    show(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
                </code> 
            </div>          
                <div class="comment">
        <p>Shows the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.show('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the <strong>DOM</strong> node, or the
 <strong>id</strong> of it, to show.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___toggleClass">
            <span class="objType">function</span>
            <span class="objName">toggleClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    toggleClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c, <span class="type">Boolean</span>
 state)
                </code> 
            </div>          
                <div class="comment">
        <p>Toggles the <strong>CSS</strong> <code>className</code> of a given
 element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.toggleClass('container', 'active');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            el        </code>
         - the <strong>DOM</strong> element to toggle or its
 <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            c        </code>
         - the class name to toggle.            </div>   
                                                <div class="param paddedDetails">
        <code>
            state        </code>
         - (Optional, defaults to <code>undefined</code>),
 if <code>true</code> add class <strong>c</strong> to
 <strong>el</strong>, if <code>true</code> removes class
 <strong>c</strong> from <strong>el</strong>. If the parameter is not
 given, the class is toggled (i.e. added if the class does not exist,
 and removed if the class exists).            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___toggleVisibility">
            <span class="objType">function</span>
            <span class="objName">toggleVisibility</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    toggleVisibility(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Boolean</span>
 state)
                </code> 
            </div>          
                <div class="comment">
        <p>Toggles the visibility of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.toggleVisibility('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - a <strong>DOM</strong> reference or its
 <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            state        </code>
         - (Optional, defaults to <code>undefined</code>)
 if <code>true</code>, show the item; if <code>false</code> hides the
 item; if <code>undefined</code> simply toggles the visibility of the
 item.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___trimField">
            <span class="objType">function</span>
            <span class="objName">trimField</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    trimField(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 field)
                </code> 
            </div>          
                <div class="comment">
        <p>Trims a given field, and returns the trimmed value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.trimField('txtInput');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            field        </code>
         - the field to be trimmed, or its
 <strong>id</strong>.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             field's trimmed value; or <code>null</code> if the field
 does not exist.

 	            	        </div>
        </div>      
                            <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/String.html#___trim">o2.String.trim</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___unwrap">
            <span class="objType">function</span>
            <span class="objName">unwrap</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    unwrap(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmTarget)
                </code> 
            </div>          
                <div class="comment">
        <p>This is like <a href="logical/o2/Dom.html#___wrap">o2.Dom.wrap</a> in reverse.</p>
 <p>Moves all the elements inside the container to the container's
 position and removes the container from the <strong>DOM</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.unwrap('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmTarget        </code>
         - the target node or its <code>String</code> id
 to unwrap.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___wrap">
            <span class="objType">function</span>
            <span class="objName">wrap</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">public static</span>
                    <span class="type"></span>
                    wrap(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmTarget, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmWrapper)
                </code> 
            </div>          
                <div class="comment">
        <p>Puts the target element into the wrapper element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var wrapper = o2.$('wrapper');
 var target = o2.$('content');
 o2.Dom.wrap(target, wrapper);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmTarget        </code>
         - the node to wrap or its <code>String</code>
 id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmWrapper        </code>
         - the wrapper node to its <code>String</code>
 id.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the wrapped node.
     	            	        </div>
        </div>      
                                                <hr/>       
                                    </div>
    	    	                                    						        </div>
        		          </div>			                    
		                </div>
        	       </div>
             </div>
             <div class="navigation" id="navigation">
    <ul class="navContent">
        <li>
            <div class="navTree">
                <h2 onclick="jgdoc.NavPanel.clicked(event)">
                    <a href="javascript:jgdoc.NavPanel.dummy()">Navigation</a>
                </h2>
                <ul class="navContent2">
                    <li>
                        <div>
                            <a class="openAll" href="javascript:jgdoc.NavTree.onOpenAll()">Open All</a>
                            <a class="closeAll" href="javascript:jgdoc.NavTree.onCloseAll()">Close All</a>
                        </div>
                        <div>
                            <ul id = "content" class="contents">
                                Loading...
                            </ul>
                        </div>
                    </li>
                </ul>
            </div>
        </li>
    </ul>
    <ul class="navContent closed">
        <li>
            <div class="fileTree">
                <h2 onclick="jgdoc.NavPanel.clicked(event)">
                    <a href="javascript:jgdoc.NavPanel.dummy()">Files</a>
                </h2>
                <ul class="navContent2">
                    <li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <div>
                                <a href="physical/file-o2/dom/collide.js.html">o2.dom.collide.js</a>
                            </div>                              
                                                                                                                                                                <div>
                                <a href="physical/file-o2/dom/coordinate.js.html">o2.dom.coordinate.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                                                                                                                                <div>
                                <a href="physical/file-o2/dom/range.js.html">o2.dom.range.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                                                                                                                                <div>
                                <a href="physical/file-o2/dom/traverse/core.js.html">o2.dom.traverse.core.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/ends.js.html">o2.dom.traverse.ends.js</a>
                            </div>                              
                                                                                                                                                                <div>
                                <a href="physical/file-o2/dom/traverse/next.js.html">o2.dom.traverse.next.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/nth.js.html">o2.dom.traverse.nth.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/parent.js.html">o2.dom.traverse.parent.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/parents.js.html">o2.dom.traverse.parents.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/prev.js.html">o2.dom.traverse.prev.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/siblings.js.html">o2.dom.traverse.siblings.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/validate.js.html">o2.dom.traverse.validate.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                        <div>
                                <a href="physical/file-o2/event/custom.js.html">o2.event.custom.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                        <div>
                                <a href="physical/file-o2/jsonpcontroller/core.js.html">o2.jsonpcontroller.core.js</a>
                            </div>                              
                                                                                                                                                                                                                    <div>
                                <a href="physical/file-o2/meta/production.js.html">o2.meta.production.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                                                                                                                                                                                    <div>
                                <a href="physical/file-o2/nodejs/footer.js.html">o2.nodejs.footer.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/nodejs/header.js.html">o2.nodejs.header.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                </li>
                </ul>
            </div>
        </li>       
    </ul>
    <ul class="navContent closed">
        <li>
            <div class="moduleTree">
                <h2 onclick="jgdoc.NavPanel.clicked(event)">
                    <a href="javascript:jgdoc.NavPanel.dummy()">Modules</a>
                </h2>
                <ul class="navContent2">
                    <li>
                                                    <div>
                                <a href="physical/ajax/module-core.html">ajax.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/ajax/module-extend.html">ajax.extend</a>
                            </div>                              
                                                    <div>
                                <a href="physical/ajaxcontroller/module-core.html">ajaxcontroller.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/ajaxstate/module-core.html">ajaxstate.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/collection/module-core.html">collection.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/module-convert.html">convert</a>
                            </div>                              
                                                    <div>
                                <a href="physical/cookie/module-core.html">cookie.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/module-core.html">core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/core/module-meta.html">core.meta</a>
                            </div>                              
                                                    <div>
                                <a href="physical/date/module-core.html">date.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/debugger/module-core.html">debugger.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-class.html">dom.class</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-constants.html">dom.constants</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-core.html">dom.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-dimension.html">dom.dimension</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-form.html">dom.form</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-load.html">dom.load</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-modify.html">dom.modify</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-ready.html">dom.ready</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-scroll.html">dom.scroll</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-style.html">dom.style</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-traverse.html">dom.traverse</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/traverse/module-child.html">dom.traverse.child</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/traverse/module-children.html">dom.traverse.children</a>
                            </div>                              
                                                    <div>
                                <a href="physical/module-effect.html">effect</a>
                            </div>                              
                                                    <div>
                                <a href="physical/event/module-constants.html">event.constants</a>
                            </div>                              
                                                    <div>
                                <a href="physical/event/module-core.html">event.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/event/module-extend.html">event.extend</a>
                            </div>                              
                                                    <div>
                                <a href="physical/module-extend.html">extend</a>
                            </div>                              
                                                    <div>
                                <a href="physical/jsonp/module-core.html">jsonp.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/jsonpstate/module-core.html">jsonpstate.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-core.html">method.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-event.html">method.event</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-inherit.html">method.inherit</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-repeat.html">method.repeat</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-timer.html">method.timer</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-transpose.html">method.transpose</a>
                            </div>                              
                                                    <div>
                                <a href="physical/object/module-core.html">object.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/querystring/module-core.html">querystring.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/sortdelegate/module-core.html">sortdelegate.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/string/module-core.html">string.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/string/module-encode.html">string.encode</a>
                            </div>                              
                                                    <div>
                                <a href="physical/string/module-strip.html">string.strip</a>
                            </div>                              
                                                    <div>
                                <a href="physical/string/module-transform.html">string.transform</a>
                            </div>                              
                                                    <div>
                                <a href="physical/supports/module-core.html">supports.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/template/module-core.html">template.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/timer/module-core.html">timer.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/try/module-core.html">try.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/unit/module-core.html">unit.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/validation/module-core.html">validation.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/validation/module-regexp.html">validation.regexp</a>
                            </div>                              
                                            </li>
                </ul>
            </div>
        </li>       
    </ul>
</div>  
    
		</div>	
	</body>
    <script type="text/javascript">
        jgdoc.Searcher.start();
        jgdoc.NavTree.initialize("o2.Dom");
    </script>			
	<script type="text/javascript" src="jsindex.js">
    </script>
</html>
",
                "body": " <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
    <head>
        <title>o2.js</title>
        <META http-equiv="Content-Type" content="text/html; charset=UTF-8">        
        <script>

			(function()
			{
			    var loc = window.location.protocol + '//' + window.location.hostname + window.location.pathname;
                loc = loc.split('\\');
                loc = loc.join('/');					    
			    loc = loc.split('/');
			    loc.pop();
			    loc = loc.join('/');
			    loc += '/' + '../../';
			
			    document.write("<base href='" + loc + "'></base>");
			})();
         
        </script>

        <link rel="stylesheet" type="text/css" href="jgdoc.css">
        <link rel="stylesheet" type="text/css" href="theme.css">
        	    <script type="text/javascript" src="navTree.js"></script>
	    <script type="text/javascript" src="jgdoc.js"></script>
	</head>
    <body>
        <div class="startup" id="startup">
            <div class="banner" id="banner">
                <h1 class="projectName">
	               <a href="http://o2js.com/">o2.js</a>   
                </h1>
                <div class="bar">
	                 version 0.25.a.0001369602378
	            </div>
	         </div>
             <div class="content" id="docContent">
                  <div class="block">
                        <div id="searchBlock">
			                <div class="search" >
			                    <div class="searchLabel">Search:</div>
			                    <div class="searchBlock" style="height:100%">
					                <input id="jgsSearchString" type="text" size="60" class="jgdSearchString"/>
					                <div id="jgsSearchPanel" class="jgsSearchPanel" style="display:none">
						                <div  class="jgdSearchRect" >
						                    <div id="jgsSearchResults">
						                        Loading....
						                    </div>
						                </div>
					                   <div id="jgsInfo" class="jgsInfo" >No selection</div>
                                    </div>
                                 </div>
			                </div>
		                </div>
		                <div id="docScroll" class="docScroll">
		                    <div>
			                    <hr/>
						        <div>
						        						        		<H2>
        <span class="objType">Class</span> o2.Dom
    </H2>
    

    <hr/>
    <!-- description -->
    <div>
       <code>
            <span class="modifiers">static</span>
            <span class="objType">class</span> 
            <b>o2.Dom</b>
       </code>
    </div>
                <div class="comment">A cross-browser <strong>DOM</strong> manipulation helper.

 </div>
                                            <span class="definedIn">Defined in </span>
        <a href="physical/dom/module-constants.html">dom.constants</a>
        <hr/> 
    <p />
    
            	
                                
                    
    
                    
            
                <div class="summaryTable function">
            <div class="summaryTableHeader">
                <span class="objType">Function</span> Summary
            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___activateAlternateStylesheet"><span class="elementName">activateAlternateStylesheet</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 title)
            </div>          
                <div class="summaryItemDesc">
        <p>Activates the <strong>alternate style sheet</strong> with the given
 <code>title</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.activateAlternateStylesheet('alternateTheme');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___addClass"><span class="elementName">addClass</span></a>
                (<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
            </div>          
                <div class="summaryItemDesc">
        <p>Add a class to the given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addClass('container', 'active');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___addCssRules"><span class="elementName">addCssRules</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Adds the CSS rules given in the <strong>cssText</strong> parameter
 to the document.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addCssRules(
      'div.warning { background-color:#c00; color:#fff };'
 );
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___addStyle"><span class="elementName">addStyle</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 style)
            </div>          
                <div class="summaryItemDesc">
        <p>Adds style attributes to a <code>DOM</code> node.</p>

 <p>Note that adding and removing style attributes to a
 <strong>DOM</strong>
 not is considered "bad practice". Do not use inline styles to modify the
 view;
 assign <strong>className</strong>'s instead of <strong>style</strong>
 values.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addStyle('container', {color : '#bada55'})
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___append"><span class="elementName">append</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmChild, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmParent)
            </div>          
                <div class="summaryItemDesc">
        <p>Appends the element to the bottom of its parent.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var child = o2.$('childNode');
 var parent = o2.$('parentNode');
 o2.Dom.append(child, parent);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___compactField"><span class="elementName">compactField</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 field)
            </div>          
                <div class="summaryItemDesc">
        <p>Trims a given field, and returns the compacted value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.compactField('txtInput');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___create"><span class="elementName">create</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___createElement">o2.Dom.createElement</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___createClassNameRegExp"><span class="elementName">createClassNameRegExp</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
            </div>          
                <div class="summaryItemDesc">
        <p>Creates a regular expression that will match a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var reg = o2.Dom.createClassNameRegExp('testClass');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___createDocumentFragment"><span class="elementName">createDocumentFragment</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 html)
            </div>          
                <div class="summaryItemDesc">
        <p>Creates a <strong>Document Fragment</strong> from an
 <strong>HTML</strong> <code>String</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var frag = o2.Dom.createDocumentFragment('[div]test[/div]');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___createElement"><span class="elementName">createElement</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 name, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 attributes)
            </div>          
                <div class="summaryItemDesc">
        <p>Creates an element with given name and attributes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var el = o2.Dom.createElement(
      'div',
      {className : 'active', style : 'font-weight : bold'}
 );
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___empty"><span class="elementName">empty</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
            </div>          
                <div class="summaryItemDesc">
        <p>An <strong>alias</strong> to <a href="logical/o2/Dom.html#___removeChildren">o2.Dom.removeChildren</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getAttribute"><span class="elementName">getAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the attribute of a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var uid = o2.Dom.getAttribute('container', 'data-user-id');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenByAttributeUntil"><span class="elementName">getChildrenByAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element until a given node (exclusive).</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByAttributeUntil('container',
      'data-user-id', '42', o2.$('stopper'), 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenByClass"><span class="elementName">getChildrenByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element having a specific class.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByClass('container', 'active', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenByClassUntil"><span class="elementName">getChildrenByClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element having a specific class, and until
 (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByClassUntil('container', 'active',
      o2.$('stopper'), 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenUntil"><span class="elementName">getChildrenUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element until
 (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenUntil('container', o2.$('stopper'), 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithAttribute"><span class="elementName">getChildrenWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithAttribute('container', 'data-user-id',
 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithAttributeUntil"><span class="elementName">getChildrenWithAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element with a given attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithAttributeUntil('content',
      'data-user-id', o2.$('stopper'), 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithClass"><span class="elementName">getChildrenWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithClassUntil"><span class="elementName">getChildrenWithClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element with a "class" attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithClassUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithId"><span class="elementName">getChildrenWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element with an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getChildrenWithIdUntil"><span class="elementName">getChildrenWithIdUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the children of the element with an "id" attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithIdUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getCss"><span class="elementName">getCss</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___getStyle">o2.Dom.getStyle</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getDimension"><span class="elementName">getDimension</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the dimension of the given element in the form
 <code>{width: w, height: h}</code>, where <strong>w</strong> and
 <strong>h</strong> are in pixels.

 <p><strong>Usage example:</strong></p>

 <pre>
 var dimensions = o2.Dom.getDimension('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getDocumentDimension"><span class="elementName">getDocumentDimension</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the dimension of the document in the form <code>{width: w,
 height: h}</code>. If the visible (i.e. <code>clientHeight</code>) is
 greater than the document's height returns the height of the visible
 area as the height portion.

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportInfo = o2.Dom.getDocumentDimension();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getDocumentHeight"><span class="elementName">getDocumentHeight</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the total height of the document in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportHeight = o2.Dom.getDocumentHeight();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getDocumentWidth"><span class="elementName">getDocumentWidth</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the total width of the document in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportWidth = o2.Dom.getDocumentWidth();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElements"><span class="elementName">getElements</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElements('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElementsByAttribute"><span class="elementName">getElementsByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>, filtering
 the nodes having a given attribute equals to a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElementsByClass"><span class="elementName">getElementsByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a given <strong>CSS</strong> <strong>class</strong> name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElementsWithAttribute"><span class="elementName">getElementsWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElementsWithClass"><span class="elementName">getElementsWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a '<strong>class</strong>" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getElementsWithId"><span class="elementName">getElementsWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 an '<strong>id</strong>" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirst"><span class="elementName">getFirst</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirst('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstByAttribute"><span class="elementName">getFirstByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node, and
 having an attibute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstByClass"><span class="elementName">getFirstByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChild"><span class="elementName">getFirstChild</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChild('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChildByAttribute"><span class="elementName">getFirstChildByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChildByClass"><span class="elementName">getFirstChildByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node, and
 having a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChildWithAttribute"><span class="elementName">getFirstChildWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChildWithClass"><span class="elementName">getFirstChildWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstChildWithId"><span class="elementName">getFirstChildWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first child of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstWithAttribute"><span class="elementName">getFirstWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstWithClass"><span class="elementName">getFirstWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getFirstWithId"><span class="elementName">getFirstWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the first sibling of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getHeight"><span class="elementName">getHeight</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the <strong>height</strong> of the given element, in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var containerHeight = o2.Dom.getHeight('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getHtml"><span class="elementName">getHtml</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the <strong>HTML</strong> of a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var html = o2.Dom.getHtml('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLast"><span class="elementName">getLast</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLast('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastByAttribute"><span class="elementName">getLastByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node, and
 has an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastByClass"><span class="elementName">getLastByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node, and
 has a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChild"><span class="elementName">getLastChild</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChild('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChildByAttribute"><span class="elementName">getLastChildByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChildByClass"><span class="elementName">getLastChildByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChildWithAttribute"><span class="elementName">getLastChildWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChildWithClass"><span class="elementName">getLastChildWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastChildWithId"><span class="elementName">getLastChildWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last child of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastWithAttribute"><span class="elementName">getLastWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node, and
 has a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastWithClass"><span class="elementName">getLastWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node, and
 has a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getLastWithId"><span class="elementName">getLastWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the last sibling of the element that's not a text node, and
 has an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNext"><span class="elementName">getNext</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the next sibling of the element, that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNext('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAll"><span class="elementName">getNextAll</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAll('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllByAttribute"><span class="elementName">getNextAllByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllByAttributeUntil"><span class="elementName">getNextAllByAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an attribute with a given value, until (but not included
 to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByAttributeUntil('content', 'data-id', '42',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllByClass"><span class="elementName">getNextAllByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllByClassUntil"><span class="elementName">getNextAllByClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given <strong>CSS</strong> class name, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllUntil"><span class="elementName">getNextAllUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, until (but not included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithAttribute"><span class="elementName">getNextAllWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithAttributeUntil"><span class="elementName">getNextAllWithAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithClass"><span class="elementName">getNextAllWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithClassUntil"><span class="elementName">getNextAllWithClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a "class" attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithClassUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithId"><span class="elementName">getNextAllWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextAllWithIdUntil"><span class="elementName">getNextAllWithIdUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an "id" attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithIdUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextByAttribute"><span class="elementName">getNextByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the next sibling of the element, that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextByAttribute('content', 'data-id', '42', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextByClass"><span class="elementName">getNextByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextByClass('content', 'selected', 'li');
 </pre>

 <p>Gets the next sibling of the element, that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextWithAttribute"><span class="elementName">getNextWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the next sibling of the element, that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextWithClass"><span class="elementName">getNextWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the next sibling of the element, that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNextWithId"><span class="elementName">getNextWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the next sibling of the element, that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNth"><span class="elementName">getNth</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNth('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthByAttribute"><span class="elementName">getNthByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthByAttribute('content', 'data-id', '42', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthByClass"><span class="elementName">getNthByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given <strong>CSS</strong>
 class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthByAttribute('content', 'selected', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChild"><span class="elementName">getNthChild</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChild('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChildByAttribute"><span class="elementName">getNthChildByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element, having
 a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildByAttribute('content', 'data-id', '42', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChildByClass"><span class="elementName">getNthChildByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element, having a
 given attribute with a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildByClass('content', 'selected', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChildWithAttribute"><span class="elementName">getNthChildWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithAttribute('content', 'data-id', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChildWithClass"><span class="elementName">getNthChildWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithClass('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthChildWithId"><span class="elementName">getNthChildWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithId('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNext"><span class="elementName">getNthNext</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNext('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNextByAttribute"><span class="elementName">getNthNextByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextByAttribute('content', 'data-id', '42', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNextByClass"><span class="elementName">getNthNextByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextByClass('content', 'selected', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNextWithAttribute"><span class="elementName">getNthNextWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithAttribute('content', 'data-id', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNextWithClass"><span class="elementName">getNthNextWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithClass('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthNextWithId"><span class="elementName">getNthNextWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithId('content', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having an "id" attribute defined.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParent"><span class="elementName">getNthParent</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> parent node of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParent('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParentByAttribute"><span class="elementName">getNthParentByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentByAttribute('content', 'data-id', '42',
      42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> parent node of an element, having a given
 attribute with a given value.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParentByClass"><span class="elementName">getNthParentByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> parent node of an element, having a given
 class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentByClass('content', 'selected', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParentWithAttribute"><span class="elementName">getNthParentWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> parent node of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithAttribute('content', 'data-id', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParentWithClass"><span class="elementName">getNthParentWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> parent node of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithClass('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthParentWithId"><span class="elementName">getNthParentWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> parent node of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithId('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrev"><span class="elementName">getNthPrev</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrev('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrevByAttribute"><span class="elementName">getNthPrevByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevByAttribute('content', 'data-id', '42',
      42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrevByClass"><span class="elementName">getNthPrevByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevByClass('content', 'selected', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrevWithAttribute"><span class="elementName">getNthPrevWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithAttribute('content', 'data-id', 42);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrevWithClass"><span class="elementName">getNthPrevWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithClass('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthPrevWithId"><span class="elementName">getNthPrevWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithId('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthWithAttribute"><span class="elementName">getNthWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithAttribute('content', 'data-id', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given attribute defined.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthWithClass"><span class="elementName">getNthWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithClass('content', 42, 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getNthWithId"><span class="elementName">getNthWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithId('content', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having an "id" attribute defined.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getObjectScrollOffset"><span class="elementName">getObjectScrollOffset</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the <strong>DOM</strong> object's scroll offset.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var offsets = o2.Dom.getObjectScrollOfset('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getOffset"><span class="elementName">getOffset</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
            </div>          
                <div class="summaryItemDesc">
        //          *
//          * <p>Gets the left and top offset of a given element.</p>
//          *
//          *    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getOffsetLeft"><span class="elementName">getOffsetLeft</span></a>()
            </div>
        <div class="summaryItemDesc">
        //      *
//      * <p>An alias to <code>o2.Dom.getOffset(obj).left</code>.</p>
//      *
//      *    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getOffsetTop"><span class="elementName">getOffsetTop</span></a>()
            </div>
        <div class="summaryItemDesc">
        //      *
//      * <p>An alias to <code>o2.Dom.getOffset(obj).top</code>.</p>
//      *
//      *    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParent"><span class="elementName">getParent</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParent('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentByAttribute"><span class="elementName">getParentByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element, having an attribute with a
 given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentByAttribute('content', 'data-id', '42', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentByClass"><span class="elementName">getParentByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element, having a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentWithAttribute"><span class="elementName">getParentWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithAttribute('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentWithClass"><span class="elementName">getParentWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentWithId"><span class="elementName">getParentWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the parent node of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParents"><span class="elementName">getParents</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParents('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsByAttribute"><span class="elementName">getParentsByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given attribute
 with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsByAttributeUntil"><span class="elementName">getParentsByAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given attribute
 with a given value, until (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByAttributeUntil('content', 'data-id', '42',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsByClass"><span class="elementName">getParentsByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsByClassUntil"><span class="elementName">getParentsByClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given
 <strong>CSS</strong> class name, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsUntil"><span class="elementName">getParentsUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithAttribute"><span class="elementName">getParentsWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithAttributeUntil"><span class="elementName">getParentsWithAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a given
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithClass"><span class="elementName">getParentsWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithClassUntil"><span class="elementName">getParentsWithClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having a "class"
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithClass('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithId"><span class="elementName">getParentsWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getParentsWithIdUntil"><span class="elementName">getParentsWithIdUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all the parent nodes of an element, having an "id"
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithIdUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrev"><span class="elementName">getPrev</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrev('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAll"><span class="elementName">getPrevAll</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAll('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllByAttribute"><span class="elementName">getPrevAllByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllByAttributeUntil"><span class="elementName">getPrevAllByAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute with a given value, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByAttributeUntil('content', 'data-id',
      '42', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllByClass"><span class="elementName">getPrevAllByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllByClassUntil"><span class="elementName">getPrevAllByClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given <strong>CSS</strong> class name, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllUntil"><span class="elementName">getPrevAllUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 until (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithAttribute"><span class="elementName">getPrevAllWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithAttributeUntil"><span class="elementName">getPrevAllWithAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithClass"><span class="elementName">getPrevAllWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithClassUntil"><span class="elementName">getPrevAllWithClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a "class" attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithClassUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithId"><span class="elementName">getPrevAllWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevAllWithIdUntil"><span class="elementName">getPrevAllWithIdUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having an "id" attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithIdUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevByAttribute"><span class="elementName">getPrevByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node,
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevByAttribute('content', 'data-id', '42', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevByClass"><span class="elementName">getPrevByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevWithAttribute"><span class="elementName">getPrevWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithAttribute('content', 'data-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevWithClass"><span class="elementName">getPrevWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getPrevWithId"><span class="elementName">getPrevWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the previous sibling of an element that's not a text node,
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithId('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getScrollOffset"><span class="elementName">getScrollOffset</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___getObjectScrollOffset">o2.Dom.getObjectScrollOffset</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblings"><span class="elementName">getSiblings</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblings('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsByAttribute"><span class="elementName">getSiblingsByAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given attribute equals
 a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByAttribute('content', 'data-id', '42');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsByAttributeUntil"><span class="elementName">getSiblingsByAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given attribute equals
 a given value, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByAttributeUntil('content', 'data-id',
      '42', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsByClass"><span class="elementName">getSiblingsByClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByClass('content', 'selected', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsByClassUntil"><span class="elementName">getSiblingsByClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given class name,
 until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsUntil"><span class="elementName">getSiblingsUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element until (but not included to) a
 specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithAttribute"><span class="elementName">getSiblingsWithAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithAttribute('content', 'dada-id', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithAttributeUntil"><span class="elementName">getSiblingsWithAttributeUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a given attribute
 defined, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithClass"><span class="elementName">getSiblingsWithClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having "class" attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithClass('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithClassUntil"><span class="elementName">getSiblingsWithClassUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having a "class" attribute
 defined, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithClassUntil('content', 'stopper', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithId"><span class="elementName">getSiblingsWithId</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the siblings of the element, having an "id" attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithId('content', 'li');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getSiblingsWithIdUntil"><span class="elementName">getSiblingsWithIdUntil</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
            </div>          
                <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithIdUntil('content', 'stopper', 'li');
 </pre>

 <p>Gets the siblings of the element, having an "id" attribute
 defined, until (but not included to) a specific node.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getStyle"><span class="elementName">getStyle</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 cssProperty, <span class="type">Boolean</span>
 isNoForce)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the <strong>style</strong> of a given property of
 the element.</p>
 <p>Tries to parse the <code>currentStyle</code>, if available;
 otherwise tries to calculate the style using
 <code>window.getComputedStyle</code>;
 gets <code>obj.style</code> if everything else fails.

 <p>Note that adding and removing style attributes to a
 <strong>DOM</strong> not is considered "bad practice". Do not use
 inline styles to modify the view;
 assign <strong>className</strong>'s instead of <strong>style</strong>
 values.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var color = o2.Dom.getStyle('container', 'color');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getText"><span class="elementName">getText</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the textual content of the given node, replacing entities
 like <code>& amp;</code> with it's corresponding character
 counterpart (<strong>&</strong> in this example).</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var txt = o2.Dom.getText('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getViewportInfo"><span class="elementName">getViewportInfo</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the viewport information in the form
 <code>{scrollTop : #, scrollLeft: #, width: #, height: #}</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var details = o2.Dom.getViewportInfo();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getWidth"><span class="elementName">getWidth</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Gets the <strong>width</strong> of the given element, in pixels.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getWindowInnerDimension"><span class="elementName">getWindowInnerDimension</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the dimension of the visible area of the browser in the form
 <code>{width: w, height: h}</code>.

 <p><strong>Usage example:</strong></p>

 <pre>
 var windowDimensions = o2.Dom.getWindowInnerDimension();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getWindowInnerHeight"><span class="elementName">getWindowInnerHeight</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the inner height of the visible area.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var innerHeight = o2.Dom.getWindowInnerHeight();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getWindowInnerWidth"><span class="elementName">getWindowInnerWidth</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the inner width of the visible area.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var innerWidth = o2.Dom.getWindowInnerWidth();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___getWindowScrollOffset"><span class="elementName">getWindowScrollOffset</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>Gets the <strong>window</strong>'s scroll offset.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var offsets = o2.Dom.getWindowScrollOffset();
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___hasClass"><span class="elementName">hasClass</span></a>
                (<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether an <strong>element</strong> has the given
 <strong>className</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 if (o2.Dom.hasClass('container', 'active')) {
      doStuff();
 }
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___hide"><span class="elementName">hide</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Hides the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.hide('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___insertAfter"><span class="elementName">insertAfter</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmNewNode, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmRefNode)
            </div>          
                <div class="summaryItemDesc">
        <p>Adds the node after the reference node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var ref = o2.$('ref');
 var new = o2.$('new');
 o2.Dom.insertAfter(new, ref);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___insertBefore"><span class="elementName">insertBefore</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmNewNode, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmRefNode)
            </div>          
                <div class="summaryItemDesc">
        <p>Adds the node before the reference node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var ref = o2.$('ref');
 var new = o2.$('new');
 o2.Dom.insertBefore(new, ref);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isChild"><span class="elementName">isChild</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is the child of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isChild = o2.Dom.isChild('child', 'parent');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isDocument"><span class="elementName">isDocument</span></a>
                (<span class="type">DOMNode</span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether the given node is a <code>document</code> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isDocument = o2.Dom.isDocument(currentNode);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isElement"><span class="elementName">isElement</span></a>
                (<span class="type">DOMNode</span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether the given node is an <strong>element</strong>
 node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isElement = o2.Dom.isElement(currentNode);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isNext"><span class="elementName">isNext</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is a sibling after
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isNext = o2.Dom.isNext('itemId', 'refId');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isParent"><span class="elementName">isParent</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is a parent of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isParent('itemId', 'refId');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isParentOrSelf"><span class="elementName">isParentOrSelf</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is parent of
 <strong>ref</strong>, or it's the <strong>ref</strong> itself.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isParentOrSelf('itemId', 'refId');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isPrev"><span class="elementName">isPrev</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is a sibling before
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isPrev('itemId', 'refId');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isSibling"><span class="elementName">isSibling</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether <strong>elm</strong> is a sibling of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isSibling = o2.Dom.isSibling('itemId', 'refId');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___isVisible"><span class="elementName">isVisible</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Checks whether the <strong>DOM</strong> node is visible.</p>
 <p>Note that being visible does not necessarily mean being available
 inside the <strong>viewport</strong>.</p>
 <p>If a <strong>DOM</strong> node has <code>display == 'none'</code>
 or <code>visibility == 'hidden'</code> <strong>CSS</strong> properties,
 then it's regarded as "invisible", otherwise it is considered to be
 "visible".</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isContainerVisible = o2.Dom.isVisible('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___loadCss"><span class="elementName">loadCss</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 src, <span class="type">Function</span>
 successCallback)
            </div>          
                <div class="summaryItemDesc">
        <p>Asynchronously loads a <strong>CSS</strong> file with a given
 <strong>src</strong>.</p>
 <p>Cross-domain loading is also okay: The <strong>CSS</strong> file does
 not have to be in the same domain as the web page.</p>

 <p>The success and failure callbacks is a somewhat hacky way of handling
 <strong>CSS</strong> load events. In deed, detecting <strong>CSS</strong>
 load is not an easy task, and it's not necessary most of the time.</p>
 <p>Though it may get handy to prevent the Flash of Unstyled Content
 (FOUC) issues.</p>
 <p>A more robust way of handling load callbacks is polling
 the property of a test element (such as the background color), that
 you know that the loaded <strong>CSS</strong> will change for sure.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadCss('http://cdn.example.com/theme.css', function() {
      handleSuccess();
 });
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___loadImage"><span class="elementName">loadImage</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 url, <span class="type">Function</span>
 successCallback)
            </div>          
                <div class="summaryItemDesc">
        <p>Tries to load the image into a <strong>JavaScript</strong>
 <code>Image</code> object; then triggers
 <strong>successCallback</strong> or
 <strong>failureCallback</strong> depending on
 the result of the load attempt.</p>

 <p>This function can be used for pre-loading or post-loading images.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadImage('http//asset.example.com/spinner.png', function() {
      handleSuccess();
 });
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___loadScript"><span class="elementName">loadScript</span></a>
                (<span class="type"><a href="logical/o2/String.html">String</a></span>
 src, <span class="type">Function</span>
 callback)
            </div>          
                <div class="summaryItemDesc">
        <p>Asynchronously loads a <strong>script</strong> with a given
 <strong>src</strong>.</p>

 <p>Cross-domain loading is also okay: The <strong>script</strong> does
 not have to be in the same domain as the web page.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadImage('http//asset.example.com/script.js', function() {
      handleSuccess();
 });
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___prepend"><span class="elementName">prepend</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmChild, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmParent)
            </div>          
                <div class="summaryItemDesc">
        <p>Prepends the element to the top of its parent.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var child = o2.$('ChildContainer');
 var parent = o2.$('MasterContainer');
 o2.Dom.prepend(child, parent);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___preventMultipleSubmit"><span class="elementName">preventMultipleSubmit</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 form)
            </div>          
                <div class="summaryItemDesc">
        <p>Prevents the form to re-submit itself when the submit button
 is pressed more than once.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.preventMultipleSubmit('actionForm');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___ready"><span class="elementName">ready</span></a>
                (<span class="type">Function</span>
 delegate)
            </div>          
                <div class="summaryItemDesc">
        <p>Fires when the <code>HTML DOM</code> is ready.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.ready(function() {
      doInitializaton();
 });
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___remove"><span class="elementName">remove</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
            </div>          
                <div class="summaryItemDesc">
        <p>Removes the element from the <strong>DOM</strong> flow.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.remove('navigation');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___removeChildren"><span class="elementName">removeChildren</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
            </div>          
                <div class="summaryItemDesc">
        <p>Removes all the children of the element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeChildren('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___removeClass"><span class="elementName">removeClass</span></a>
                (<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
            </div>          
                <div class="summaryItemDesc">
        <p>Removes a <strong>class</strong> name from the given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeClass('container', 'active');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___removeEmpty"><span class="elementName">removeEmpty</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An <strong>alias</strong> to
 <a href="logical/o2/Dom.html#___removeEmptyTextNodes">o2.Dom.removeEmptyTextNodes</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___removeEmptyTextNodes"><span class="elementName">removeEmptyTextNodes</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
            </div>          
                <div class="summaryItemDesc">
        <p>Removes empty text nodes from the element.</p>
 <p>Note that this removal is not recursive; only the first-level empty
 child nodes of the element will be removed.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeEmptyTextNodes('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___removeNode"><span class="elementName">removeNode</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An <strong>alias</strong> to <a href="logical/o2/Dom.html#___remove">o2.Dom.remove</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___replace"><span class="elementName">replace</span></a>
                (<span class="type"></span>
 elmTarget, <span class="type"></span>
 elmToReplace)
            </div>          
                <div class="summaryItemDesc">
        <p>Replaces one node with another.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.replace('firstContainer', 'secondContainer');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollObjectToBottom"><span class="elementName">scrollObjectToBottom</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Scrolls an element to bottom.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollObjectToBottom('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollObjectToTop"><span class="elementName">scrollObjectToTop</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
            </div>          
                <div class="summaryItemDesc">
        <p>Scrolls an element to top.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollObjectToTop('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollTo"><span class="elementName">scrollTo</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollToObject"><span class="elementName">scrollToObject</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollWindowToBottom"><span class="elementName">scrollWindowToBottom</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollWindowToBottom();
 </pre>

 <p>Scrolls window to bottom.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollWindowToObject"><span class="elementName">scrollWindowToObject</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___scrollWindowToTop"><span class="elementName">scrollWindowToTop</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollWindowToTop();
 </pre>

 <p>Scrolls window to top.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setAttribute"><span class="elementName">setAttribute</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value)
            </div>          
                <div class="summaryItemDesc">
        <p>Sets the attribute of the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setAttribute('container', 'data-user-id', '123');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setCss"><span class="elementName">setCss</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setDimension"><span class="elementName">setDimension</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 dimension)
            </div>          
                <div class="summaryItemDesc">
        <p>Sets the dimension of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setDimension('container', {width: 400, height: 200});
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setHeight"><span class="elementName">setHeight</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type">Integer</span>
 height)
            </div>          
                <div class="summaryItemDesc">
        <p>Sets the <strong>height</strong> of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setHeight('container', 300);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setHtml"><span class="elementName">setHtml</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
            </div>          
                <div class="summaryItemDesc">
        <p>Simply sets the <code>innerHTML</code> of the element.

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setHtml('container', '[h1]hello[/h1]');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                           <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setStyle"><span class="elementName">setStyle</span></a>()
            </div>
        <div class="summaryItemDesc">
        <p>An alias to <a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a>.</p>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___setWidth"><span class="elementName">setWidth</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type">Integer</span>
 width)
            </div>          
                <div class="summaryItemDesc">
        <p>Sets the <strong>width</strong> of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setWidth('container', 500);
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___show"><span class="elementName">show</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
            </div>          
                <div class="summaryItemDesc">
        <p>Shows the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.show('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___toggleClass"><span class="elementName">toggleClass</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c, <span class="type">Boolean</span>
 state)
            </div>          
                <div class="summaryItemDesc">
        <p>Toggles the <strong>CSS</strong> <code>className</code> of a given
 element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.toggleClass('container', 'active');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___toggleVisibility"><span class="elementName">toggleVisibility</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Boolean</span>
 state)
            </div>          
                <div class="summaryItemDesc">
        <p>Toggles the visibility of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.toggleVisibility('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___trimField"><span class="elementName">trimField</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 field)
            </div>          
                <div class="summaryItemDesc">
        <p>Trims a given field, and returns the trimmed value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.trimField('txtInput');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___unwrap"><span class="elementName">unwrap</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmTarget)
            </div>          
                <div class="summaryItemDesc">
        <p>This is like <a href="logical/o2/Dom.html#___wrap">o2.Dom.wrap</a> in reverse.</p>
 <p>Moves all the elements inside the container to the container's
 position and removes the container from the <strong>DOM</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.unwrap('container');
 </pre>    </div>  
                            </div>
                    <div class="summaryItem">
                                                                    <div class="summaryItemDef">
                <span class="modifiers">public static</span>
                <span class="type"></span>
                <a href="logical/o2/Dom.html#___wrap"><span class="elementName">wrap</span></a>
                (<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmTarget, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmWrapper)
            </div>          
                <div class="summaryItemDesc">
        <p>Puts the target element into the wrapper element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var wrapper = o2.$('wrapper');
 var target = o2.$('content');
 o2.Dom.wrap(target, wrapper);
 </pre>    </div>  
                            </div>
                </div>
        <p/>
                
                    <!-- ============== Details coming here =================== -->
    	    	    	    	            <div class="details function">
            <h2 class="sectionHeader">Function Details</h2>
                                                                    <h3>
        <a name="___activateAlternateStylesheet">
            <span class="objType">function</span>
            <span class="objName">activateAlternateStylesheet</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    activateAlternateStylesheet(<span class="type"><a href="logical/o2/String.html">String</a></span>
 title)
                </code> 
            </div>          
                <div class="comment">
        <p>Activates the <strong>alternate style sheet</strong> with the given
 <code>title</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.activateAlternateStylesheet('alternateTheme');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            title        </code>
         - the <code>title</code> of the <strong>alternate
 style sheet</strong> to activate.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___addClass">
            <span class="objType">function</span>
            <span class="objName">addClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    addClass(<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
                </code> 
            </div>          
                <div class="comment">
        <p>Add a class to the given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addClass('container', 'active');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            el        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            c        </code>
         - the <strong>className</strong> to add.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___addCssRules">
            <span class="objType">function</span>
            <span class="objName">addCssRules</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    addCssRules()
                </code>
            </div>    
        <div class="comment">
        <p>Adds the CSS rules given in the <strong>cssText</strong> parameter
 to the document.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addCssRules(
      'div.warning { background-color:#c00; color:#fff };'
 );
 </pre>

     </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___addStyle">
            <span class="objType">function</span>
            <span class="objName">addStyle</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    addStyle(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 style)
                </code> 
            </div>          
                <div class="comment">
        <p>Adds style attributes to a <code>DOM</code> node.</p>

 <p>Note that adding and removing style attributes to a
 <strong>DOM</strong>
 not is considered "bad practice". Do not use inline styles to modify the
 view;
 assign <strong>className</strong>'s instead of <strong>style</strong>
 values.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.addStyle('container', {color : '#bada55'})
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the current <code>DOM</code> node, or the
 <strong>id</strong> of that node, to add styles to.            </div>   
                                                <div class="param paddedDetails">
        <code>
            style        </code>
         - styles in the form <code>{style1:value1,
 style2:value2}</code>.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___append">
            <span class="objType">function</span>
            <span class="objName">append</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    append(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmChild, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmParent)
                </code> 
            </div>          
                <div class="comment">
        <p>Appends the element to the bottom of its parent.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var child = o2.$('childNode');
 var parent = o2.$('parentNode');
 o2.Dom.append(child, parent);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmChild        </code>
         - the child node, or the <strong>id</strong> of
 the node to append.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmParent        </code>
         - the parent container, or the
 <strong>id</strong> of the container.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___compactField">
            <span class="objType">function</span>
            <span class="objName">compactField</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    compactField(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 field)
                </code> 
            </div>          
                <div class="comment">
        <p>Trims a given field, and returns the compacted value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.compactField('txtInput');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            field        </code>
         - the field to be compacted, or its
 <strong>id</strong>.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             field's compacted value; or <code>null</code> if the field
 does not exist.

 	            	        </div>
        </div>      
                            <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/String.html#___compact">o2.String.compact</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___create">
            <span class="objType">function</span>
            <span class="objName">create</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    create()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___createElement">o2.Dom.createElement</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___createElement">o2.Dom.createElement</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___createClassNameRegExp">
            <span class="objType">function</span>
            <span class="objName">createClassNameRegExp</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    createClassNameRegExp(<span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
                </code> 
            </div>          
                <div class="comment">
        <p>Creates a regular expression that will match a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var reg = o2.Dom.createClassNameRegExp('testClass');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            c        </code>
         - The name of the class.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             a <code>RegExp</code> that matches the given class name.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___createDocumentFragment">
            <span class="objType">function</span>
            <span class="objName">createDocumentFragment</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    createDocumentFragment(<span class="type"><a href="logical/o2/String.html">String</a></span>
 html)
                </code> 
            </div>          
                <div class="comment">
        <p>Creates a <strong>Document Fragment</strong> from an
 <strong>HTML</strong> <code>String</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var frag = o2.Dom.createDocumentFragment('[div]test[/div]');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            html        </code>
         - the <strong>HTML</strong> to create a fragment
 from.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             {HTMLDocumentFragment} - the generated <code>document</code>
 fragment.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___createElement">
            <span class="objType">function</span>
            <span class="objName">createElement</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    createElement(<span class="type"><a href="logical/o2/String.html">String</a></span>
 name, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 attributes)
                </code> 
            </div>          
                <div class="comment">
        <p>Creates an element with given name and attributes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var el = o2.Dom.createElement(
      'div',
      {className : 'active', style : 'font-weight : bold'}
 );
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - the node name of the element (i.e. 'div', 'a').            </div>   
                                                <div class="param paddedDetails">
        <code>
            attributes        </code>
         - an associative array in the form
 <code>{att1:value1, att2:value2}</code>.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the created element.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___empty">
            <span class="objType">function</span>
            <span class="objName">empty</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    empty(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
                </code> 
            </div>          
                <div class="comment">
        <p>An <strong>alias</strong> to <a href="logical/o2/Dom.html#___removeChildren">o2.Dom.removeChildren</a>.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it to process.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___getAttribute">
            <span class="objType">function</span>
            <span class="objName">getAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the attribute of a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var uid = o2.Dom.getAttribute('container', 'data-user-id');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the node, or the <strong>id</strong> of the
 node, to get the attribute of.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the attribute to gather.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the value of the attribute if found; <code>null</code>
 otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenByAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenByAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenByAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element until a given node (exclusive).</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByAttributeUntil('container',
      'data-user-id', '42', o2.$('stopper'), 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenByClass">
            <span class="objType">function</span>
            <span class="objName">getChildrenByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element having a specific class.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByClass('container', 'active', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to
 <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
         	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenByClassUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenByClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenByClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element having a specific class, and until
 (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenByClassUntil('container', 'active',
      o2.$('stopper'), 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element until
 (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenUntil('container', o2.$('stopper'), 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithAttribute('container', 'data-user-id',
 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element with a given attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithAttributeUntil('content',
      'data-user-id', o2.$('stopper'), 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithClass">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithClassUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element with a "class" attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithClassUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithId">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element with an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getChildrenWithIdUntil">
            <span class="objType">function</span>
            <span class="objName">getChildrenWithIdUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getChildrenWithIdUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the children of the element with an "id" attribute defined,
 and until (but not included to) a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getChildrenWithIdUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getCss">
            <span class="objType">function</span>
            <span class="objName">getCss</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getCss()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___getStyle">o2.Dom.getStyle</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___getStyle">o2.Dom.getStyle</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___getDimension">
            <span class="objType">function</span>
            <span class="objName">getDimension</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getDimension(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the dimension of the given element in the form
 <code>{width: w, height: h}</code>, where <strong>w</strong> and
 <strong>h</strong> are in pixels.

 <p><strong>Usage example:</strong></p>

 <pre>
 var dimensions = o2.Dom.getDimension('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the dimension of the <strong>DOMNode</strong> in the form
 <code>{width: w, height: h}</code>.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getDocumentDimension">
            <span class="objType">function</span>
            <span class="objName">getDocumentDimension</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getDocumentDimension()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the dimension of the document in the form <code>{width: w,
 height: h}</code>. If the visible (i.e. <code>clientHeight</code>) is
 greater than the document's height returns the height of the visible
 area as the height portion.

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportInfo = o2.Dom.getDocumentDimension();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the dimension of the document in the form <code>{width: w,
 height: h}</code>.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getDocumentHeight">
            <span class="objType">function</span>
            <span class="objName">getDocumentHeight</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getDocumentHeight()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the total height of the document in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportHeight = o2.Dom.getDocumentHeight();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the document's height.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getDocumentWidth">
            <span class="objType">function</span>
            <span class="objName">getDocumentWidth</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getDocumentWidth()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the total width of the document in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var viewportWidth = o2.Dom.getDocumentWidth();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the document's width.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElements">
            <span class="objType">function</span>
            <span class="objName">getElements</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElements(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElements('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElementsByAttribute">
            <span class="objType">function</span>
            <span class="objName">getElementsByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElementsByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>, filtering
 the nodes having a given attribute equals to a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 HTML <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElementsByClass">
            <span class="objType">function</span>
            <span class="objName">getElementsByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElementsByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a given <strong>CSS</strong> <strong>class</strong> name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElementsWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getElementsWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElementsWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElementsWithClass">
            <span class="objType">function</span>
            <span class="objName">getElementsWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElementsWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 a '<strong>class</strong>" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getElementsWithId">
            <span class="objType">function</span>
            <span class="objName">getElementsWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getElementsWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all of the elements of the node <strong>elm</strong>, having
 an '<strong>id</strong>" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getElementsWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirst">
            <span class="objType">function</span>
            <span class="objName">getFirst</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirst(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirst('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstByAttribute">
            <span class="objType">function</span>
            <span class="objName">getFirstByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node, and
 having an attibute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstByClass">
            <span class="objType">function</span>
            <span class="objName">getFirstByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChild">
            <span class="objType">function</span>
            <span class="objName">getFirstChild</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChild(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChild('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChildByAttribute">
            <span class="objType">function</span>
            <span class="objName">getFirstChildByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChildByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChildByClass">
            <span class="objType">function</span>
            <span class="objName">getFirstChildByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChildByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node, and
 having a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChildWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getFirstChildWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChildWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChildWithClass">
            <span class="objType">function</span>
            <span class="objName">getFirstChildWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChildWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstChildWithId">
            <span class="objType">function</span>
            <span class="objName">getFirstChildWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstChildWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first child of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstChildWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getFirstWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstWithClass">
            <span class="objType">function</span>
            <span class="objName">getFirstWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getFirstWithId">
            <span class="objType">function</span>
            <span class="objName">getFirstWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getFirstWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the first sibling of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getFirstWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getHeight">
            <span class="objType">function</span>
            <span class="objName">getHeight</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getHeight(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the <strong>height</strong> of the given element, in pixels.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var containerHeight = o2.Dom.getHeight('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the height of the element, in pixels.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getHtml">
            <span class="objType">function</span>
            <span class="objName">getHtml</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getHtml(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the <strong>HTML</strong> of a given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var html = o2.Dom.getHtml('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the <strong>DOM</strong> node or its
 <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the <code>innerHTML</code> of the given node, if it exists;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLast">
            <span class="objType">function</span>
            <span class="objName">getLast</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLast(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLast('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastByAttribute">
            <span class="objType">function</span>
            <span class="objName">getLastByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node, and
 has an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastByClass">
            <span class="objType">function</span>
            <span class="objName">getLastByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node, and
 has a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChild">
            <span class="objType">function</span>
            <span class="objName">getLastChild</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChild(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChild('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChildByAttribute">
            <span class="objType">function</span>
            <span class="objName">getLastChildByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChildByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChildByClass">
            <span class="objType">function</span>
            <span class="objName">getLastChildByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChildByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChildWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getLastChildWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChildWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChildWithClass">
            <span class="objType">function</span>
            <span class="objName">getLastChildWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChildWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastChildWithId">
            <span class="objType">function</span>
            <span class="objName">getLastChildWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastChildWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last child of the element that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastChildWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last child available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getLastWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node, and
 has a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastWithClass">
            <span class="objType">function</span>
            <span class="objName">getLastWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node, and
 has a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getLastWithId">
            <span class="objType">function</span>
            <span class="objName">getLastWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getLastWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the last sibling of the element that's not a text node, and
 has an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getLastWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the last sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNext">
            <span class="objType">function</span>
            <span class="objName">getNext</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNext(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the next sibling of the element, that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNext('content', 'li');
 </pre>


     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAll">
            <span class="objType">function</span>
            <span class="objName">getNextAll</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAll(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAll('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNextAllByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllByAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllByAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllByAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an attribute with a given value, until (but not included
 to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByAttributeUntil('content', 'data-id', '42',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllByClass">
            <span class="objType">function</span>
            <span class="objName">getNextAllByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllByClassUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllByClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllByClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given <strong>CSS</strong> class name, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, until (but not included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a given attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithClass">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithClassUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having a "class" attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithClassUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithId">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextAllWithIdUntil">
            <span class="objType">function</span>
            <span class="objName">getNextAllWithIdUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextAllWithIdUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the following siblings of the element that are not text
 nodes, having an "id" attribute defined, until (but not
 included to) a given <strong>DOM</strong> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextAllWithIdUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNextByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the next sibling of the element, that's not a text node, and
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextByAttribute('content', 'data-id', '42', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextByClass">
            <span class="objType">function</span>
            <span class="objName">getNextByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextByClass('content', 'selected', 'li');
 </pre>

 <p>Gets the next sibling of the element, that's not a text node, and
 having a given <strong>CSS</strong> class name.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNextWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the next sibling of the element, that's not a text node, and
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextWithClass">
            <span class="objType">function</span>
            <span class="objName">getNextWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the next sibling of the element, that's not a text node, and
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNextWithId">
            <span class="objType">function</span>
            <span class="objName">getNextWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNextWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the next sibling of the element, that's not a text node, and
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNextWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the next sibling available with the given criteria, if found;
 <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNth">
            <span class="objType">function</span>
            <span class="objName">getNth</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNth(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNth('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthByAttribute('content', 'data-id', '42', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthByClass">
            <span class="objType">function</span>
            <span class="objName">getNthByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given <strong>CSS</strong>
 class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthByAttribute('content', 'selected', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChild">
            <span class="objType">function</span>
            <span class="objName">getNthChild</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChild(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChild('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChildByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthChildByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChildByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element, having
 a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildByAttribute('content', 'data-id', '42', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChildByClass">
            <span class="objType">function</span>
            <span class="objName">getNthChildByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChildByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element, having a
 given attribute with a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildByClass('content', 'selected', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChildWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthChildWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChildWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithAttribute('content', 'data-id', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChildWithClass">
            <span class="objType">function</span>
            <span class="objName">getNthChildWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChildWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithClass('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthChildWithId">
            <span class="objType">function</span>
            <span class="objName">getNthChildWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthChildWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node child of an element,
 with a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthChildWithId('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> child available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNext">
            <span class="objType">function</span>
            <span class="objName">getNthNext</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNext(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNext('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNextByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthNextByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNextByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextByAttribute('content', 'data-id', '42', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNextByClass">
            <span class="objType">function</span>
            <span class="objName">getNthNextByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNextByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextByClass('content', 'selected', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNextWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthNextWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNextWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithAttribute('content', 'data-id', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNextWithClass">
            <span class="objType">function</span>
            <span class="objName">getNthNextWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNextWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithClass('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthNextWithId">
            <span class="objType">function</span>
            <span class="objName">getNthNextWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthNextWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthNextWithId('content', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
 having an "id" attribute defined.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> next sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParent">
            <span class="objType">function</span>
            <span class="objName">getNthParent</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParent(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> parent node of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParent('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParentByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthParentByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParentByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentByAttribute('content', 'data-id', '42',
      42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> parent node of an element, having a given
 attribute with a given value.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParentByClass">
            <span class="objType">function</span>
            <span class="objName">getNthParentByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParentByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> parent node of an element, having a given
 class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentByClass('content', 'selected', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParentWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthParentWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParentWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> parent node of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithAttribute('content', 'data-id', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParentWithClass">
            <span class="objType">function</span>
            <span class="objName">getNthParentWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParentWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> parent node of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithClass('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthParentWithId">
            <span class="objType">function</span>
            <span class="objName">getNthParentWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthParentWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> parent node of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthParentWithId('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrev">
            <span class="objType">function</span>
            <span class="objName">getNthPrev</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrev(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrev('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrevByAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthPrevByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrevByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevByAttribute('content', 'data-id', '42',
      42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrevByClass">
            <span class="objType">function</span>
            <span class="objName">getNthPrevByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrevByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevByClass('content', 'selected', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrevWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthPrevWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrevWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithAttribute('content', 'data-id', 42);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrevWithClass">
            <span class="objType">function</span>
            <span class="objName">getNthPrevWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrevWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithClass('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the given
 criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthPrevWithId">
            <span class="objType">function</span>
            <span class="objName">getNthPrevWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthPrevWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> previous sibling of an element that's not a
 text node, having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthPrevWithId('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> previous sibling available with the
 given criteria, if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getNthWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithAttribute('content', 'data-id', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a given attribute defined.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthWithClass">
            <span class="objType">function</span>
            <span class="objName">getNthWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithClass('content', 42, 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getNthWithId">
            <span class="objType">function</span>
            <span class="objName">getNthWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getNthWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Integer</span>
 n, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getNthWithId('content', 42, 'li');
 </pre>

 <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
 from the first sibling, having an "id" attribute defined.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            n        </code>
         - the element index.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the n<sup>th</sup> sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getObjectScrollOffset">
            <span class="objType">function</span>
            <span class="objName">getObjectScrollOffset</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getObjectScrollOffset(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the <strong>DOM</strong> object's scroll offset.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var offsets = o2.Dom.getObjectScrollOfset('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOM</strong> node to check, or its
 <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the the <strong>DOM</strong> object's scroll offset in the form
 <code>{left: l, top: t}</code>.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getOffset">
            <span class="objType">function</span>
            <span class="objName">getOffset</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getOffset(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
                </code> 
            </div>          
                <div class="comment">
        //          *
//          * <p>Gets the left and top offset of a given element.</p>
//          *
//          *

//          *     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            e        </code>
         - the element, or the id of the element, to get
//          * the offsets of.
//          *
//          *            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the offset from the top-left corner of the viewport,
//          * in the form <code>{left: l, top: t}</code>.
//          	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getOffsetLeft">
            <span class="objType">function</span>
            <span class="objName">getOffsetLeft</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getOffsetLeft()
                </code>
            </div>    
        <div class="comment">
        //      *
//      * <p>An alias to <code>o2.Dom.getOffset(obj).left</code>.</p>
//      *
//      *

//      *     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___getOffset">o2.Dom.getOffset</a>
//</div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___getOffsetTop">
            <span class="objType">function</span>
            <span class="objName">getOffsetTop</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getOffsetTop()
                </code>
            </div>    
        <div class="comment">
        //      *
//      * <p>An alias to <code>o2.Dom.getOffset(obj).top</code>.</p>
//      *
//      *

//      *     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___getOffset">o2.Dom.getOffset</a>
//</div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___getParent">
            <span class="objType">function</span>
            <span class="objName">getParent</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParent(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParent('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentByAttribute">
            <span class="objType">function</span>
            <span class="objName">getParentByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element, having an attribute with a
 given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentByAttribute('content', 'data-id', '42', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentByClass">
            <span class="objType">function</span>
            <span class="objName">getParentByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element, having a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getParentWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithAttribute('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentWithClass">
            <span class="objType">function</span>
            <span class="objName">getParentWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentWithId">
            <span class="objType">function</span>
            <span class="objName">getParentWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the parent node of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getParentWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first parent available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParents">
            <span class="objType">function</span>
            <span class="objName">getParents</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParents(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParents('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsByAttribute">
            <span class="objType">function</span>
            <span class="objName">getParentsByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given attribute
 with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsByAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsByAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsByAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given attribute
 with a given value, until (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByAttributeUntil('content', 'data-id', '42',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> node that the traversal
 will be made until, or its <code>String</code> id,            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsByClass">
            <span class="objType">function</span>
            <span class="objName">getParentsByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given
 <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsByClassUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsByClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsByClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given
 <strong>CSS</strong> class name, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getParentsWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsWithAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a given
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithClass">
            <span class="objType">function</span>
            <span class="objName">getParentsWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a "class"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithClassUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsWithClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having a "class"
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithClass('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithId">
            <span class="objType">function</span>
            <span class="objName">getParentsWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having an "id"
 attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getParentsWithIdUntil">
            <span class="objType">function</span>
            <span class="objName">getParentsWithIdUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getParentsWithIdUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all the parent nodes of an element, having an "id"
 attribute defined, until (but not included to) a
 given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getParentsWithIdUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrev">
            <span class="objType">function</span>
            <span class="objName">getPrev</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrev(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrev('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAll">
            <span class="objType">function</span>
            <span class="objName">getPrevAll</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAll(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAll('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllByAttribute">
            <span class="objType">function</span>
            <span class="objName">getPrevAllByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllByAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllByAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllByAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute with a given value, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByAttributeUntil('content', 'data-id',
      '42', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllByClass">
            <span class="objType">function</span>
            <span class="objName">getPrevAllByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllByClassUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllByClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllByClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given <strong>CSS</strong> class name, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 until (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a given attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithClass">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithClassUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having a "class" attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithClassUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithId">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevAllWithIdUntil">
            <span class="objType">function</span>
            <span class="objName">getPrevAllWithIdUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevAllWithIdUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets all previous sibling of an element, that are not text nodes,
 having an "id" attribute defined, until
 (but not included to) a given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getPrevAllWithIdUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevByAttribute">
            <span class="objType">function</span>
            <span class="objName">getPrevByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node,
 having an attribute with a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevByAttribute('content', 'data-id', '42', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - i the value of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevByClass">
            <span class="objType">function</span>
            <span class="objName">getPrevByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 className, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node,
 having a given <strong>CSS</strong> class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            className        </code>
         - the <strong>CSS</strong> class name.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getPrevWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node,
 having a given attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithAttribute('content', 'data-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevWithClass">
            <span class="objType">function</span>
            <span class="objName">getPrevWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node,
 having a "class" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getPrevWithId">
            <span class="objType">function</span>
            <span class="objName">getPrevWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getPrevWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the previous sibling of an element that's not a text node,
 having an "id" attribute defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var item = o2.Dom.getPrevWithId('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the first previous sibling available with the given criteria,
 if found; <code>null</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getScrollOffset">
            <span class="objType">function</span>
            <span class="objName">getScrollOffset</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getScrollOffset()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___getObjectScrollOffset">o2.Dom.getObjectScrollOffset</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___getObjectScrollOffset">o2.Dom.getObjectScrollOffset</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblings">
            <span class="objType">function</span>
            <span class="objName">getSiblings</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblings(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblings('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsByAttribute">
            <span class="objType">function</span>
            <span class="objName">getSiblingsByAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsByAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given attribute equals
 a given value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByAttribute('content', 'data-id', '42');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsByAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsByAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsByAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given attribute equals
 a given value, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByAttributeUntil('content', 'data-id',
      '42', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsByClass">
            <span class="objType">function</span>
            <span class="objName">getSiblingsByClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsByClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given class name.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByClass('content', 'selected', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsByClassUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsByClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsByClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given class name,
 until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsByClassUntil('content', 'selected',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element until (but not included to) a
 specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithAttribute">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithAttribute('content', 'dada-id', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithAttributeUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithAttributeUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithAttributeUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a given attribute
 defined, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithAttributeUntil('content', 'data-id',
      'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute to filter.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithClass">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having "class" attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithClass('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithClassUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithClassUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithClassUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having a "class" attribute
 defined, until (but not included to) a specific node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithClassUntil('content', 'stopper', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithId">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithId</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithId(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the siblings of the element, having an "id" attribute
 defined.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithId('content', 'li');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getSiblingsWithIdUntil">
            <span class="objType">function</span>
            <span class="objName">getSiblingsWithIdUntil</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getSiblingsWithIdUntil(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 until, <span class="type"><a href="logical/o2/String.html">String</a></span>
 name)
                </code> 
            </div>          
                <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 var items = o2.Dom.getSiblingsWithIdUntil('content', 'stopper', 'li');
 </pre>

 <p>Gets the siblings of the element, having an "id" attribute
 defined, until (but not included to) a specific node.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element reference, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            until        </code>
         - the <strong>DOM</strong> to search until (but
 not included to), or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            name        </code>
         - (Optional; defaults to <code>undefined</code>),
 if true, only the results with that <strong>node name</strong> (i.e.
 <strong>HTML</strong> <strong>Tag Name</strong>) are selected.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             an <code>Array</code> of nodes, if found; and empty
 <code>Array</code> if nothing is found.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getStyle">
            <span class="objType">function</span>
            <span class="objName">getStyle</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getStyle(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 cssProperty, <span class="type">Boolean</span>
 isNoForce)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the <strong>style</strong> of a given property of
 the element.</p>
 <p>Tries to parse the <code>currentStyle</code>, if available;
 otherwise tries to calculate the style using
 <code>window.getComputedStyle</code>;
 gets <code>obj.style</code> if everything else fails.

 <p>Note that adding and removing style attributes to a
 <strong>DOM</strong> not is considered "bad practice". Do not use
 inline styles to modify the view;
 assign <strong>className</strong>'s instead of <strong>style</strong>
 values.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var color = o2.Dom.getStyle('container', 'color');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the element, or the <strong>id</strong> of it,
 to check.            </div>   
                                                <div class="param paddedDetails">
        <code>
            cssProperty        </code>
         - the css property either
 <strong>dash-separated</strong>
 or <strong>camelCased</strong> (i.e.: 'border-color' or
 'borderColor')            </div>   
                                                <div class="param paddedDetails">
        <code>
            isNoForce        </code>
         - (optional; defaults to
 <code>false</code>)
 if <code>true</code> inherited values from the CSS files will also be
 parsed, otherwise, only inline styles will be parsed.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the calculated <strong>style</strong> value.
         	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getText">
            <span class="objType">function</span>
            <span class="objName">getText</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getText(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the textual content of the given node, replacing entities
 like <code>& amp;</code> with it's corresponding character
 counterpart (<strong>&</strong> in this example).</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var txt = o2.Dom.getText('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the <strong>DOM</strong> node or its
 <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the textual content of the given node.
         	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getViewportInfo">
            <span class="objType">function</span>
            <span class="objName">getViewportInfo</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getViewportInfo()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the viewport information in the form
 <code>{scrollTop : #, scrollLeft: #, width: #, height: #}</code>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var details = o2.Dom.getViewportInfo();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the viewport information.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getWidth">
            <span class="objType">function</span>
            <span class="objName">getWidth</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getWidth(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Gets the <strong>width</strong> of the given element, in pixels.</p>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.

 <p><strong>Usage example:</strong></p>

 <pre>
 var elementWidth = o2.Dom.getWidth('container');
 </pre>            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the width of the element, in pixels.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getWindowInnerDimension">
            <span class="objType">function</span>
            <span class="objName">getWindowInnerDimension</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getWindowInnerDimension()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the dimension of the visible area of the browser in the form
 <code>{width: w, height: h}</code>.

 <p><strong>Usage example:</strong></p>

 <pre>
 var windowDimensions = o2.Dom.getWindowInnerDimension();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the dimension of the visible area of the browser in the form
 <code>{width: w, height: h}</code>.
         	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getWindowInnerHeight">
            <span class="objType">function</span>
            <span class="objName">getWindowInnerHeight</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getWindowInnerHeight()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the inner height of the visible area.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var innerHeight = o2.Dom.getWindowInnerHeight();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the inner height of the window in pixels.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getWindowInnerWidth">
            <span class="objType">function</span>
            <span class="objName">getWindowInnerWidth</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getWindowInnerWidth()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the inner width of the visible area.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var innerWidth = o2.Dom.getWindowInnerWidth();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the inner width of the window in pixels.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___getWindowScrollOffset">
            <span class="objType">function</span>
            <span class="objName">getWindowScrollOffset</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    getWindowScrollOffset()
                </code>
            </div>    
        <div class="comment">
        <p>Gets the <strong>window</strong>'s scroll offset.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var offsets = o2.Dom.getWindowScrollOffset();
 </pre>

     </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the the <strong>window</strong>'s scroll offset in the form
 <code>{left: l, top: t}</code>.
         	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___hasClass">
            <span class="objType">function</span>
            <span class="objName">hasClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    hasClass(<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether an <strong>element</strong> has the given
 <strong>className</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 if (o2.Dom.hasClass('container', 'active')) {
      doStuff();
 }
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            el        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            c        </code>
         - the <strong>className</strong> to test.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>el</strong> has the
 <code>className</code> <strong>c</strong>, <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___hide">
            <span class="objType">function</span>
            <span class="objName">hide</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    hide(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Hides the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.hide('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOM</strong> node, or the
 <strong>id</strong> to hide.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___insertAfter">
            <span class="objType">function</span>
            <span class="objName">insertAfter</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    insertAfter(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmNewNode, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmRefNode)
                </code> 
            </div>          
                <div class="comment">
        <p>Adds the node after the reference node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var ref = o2.$('ref');
 var new = o2.$('new');
 o2.Dom.insertAfter(new, ref);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmNewNode        </code>
         - the DOM node, or the <strong>id</strong> of
 the node, to insert after.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmRefNode        </code>
         - the reference node, or the
 <strong>id</strong> of the node.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___insertBefore">
            <span class="objType">function</span>
            <span class="objName">insertBefore</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    insertBefore(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmNewNode, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmRefNode)
                </code> 
            </div>          
                <div class="comment">
        <p>Adds the node before the reference node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var ref = o2.$('ref');
 var new = o2.$('new');
 o2.Dom.insertBefore(new, ref);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmNewNode        </code>
         - the node, or the <strong>id</strong> of the
 node, to insert before.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmRefNode        </code>
         - the reference, or the <strong>id</strong>
 of the node.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___isChild">
            <span class="objType">function</span>
            <span class="objName">isChild</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isChild(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is the child of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isChild = o2.Dom.isChild('child', 'parent');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a child of
 <strong>ref</strong>; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isDocument">
            <span class="objType">function</span>
            <span class="objName">isDocument</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isDocument(<span class="type">DOMNode</span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether the given node is a <code>document</code> node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isDocument = o2.Dom.isDocument(currentNode);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>node</strong> to test.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if the <strong>node</strong> is the
 <code>document</code> element; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isElement">
            <span class="objType">function</span>
            <span class="objName">isElement</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isElement(<span class="type">DOMNode</span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether the given node is an <strong>element</strong>
 node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isElement = o2.Dom.isElement(currentNode);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>node</strong> to test.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if the <strong>node</strong> is an
 <strong>element</strong> node; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isNext">
            <span class="objType">function</span>
            <span class="objName">isNext</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isNext(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is a sibling after
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isNext = o2.Dom.isNext('itemId', 'refId');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a sibling after
 <strong>ref</strong>; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isParent">
            <span class="objType">function</span>
            <span class="objName">isParent</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isParent(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is a parent of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isParent('itemId', 'refId');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a parent of
 <strong>ref</strong>; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isParentOrSelf">
            <span class="objType">function</span>
            <span class="objName">isParentOrSelf</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isParentOrSelf(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is parent of
 <strong>ref</strong>, or it's the <strong>ref</strong> itself.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isParentOrSelf('itemId', 'refId');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a parent of
 <strong>ref</strong>, or the node itself; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isPrev">
            <span class="objType">function</span>
            <span class="objName">isPrev</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isPrev(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is a sibling before
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isParent = o2.Dom.isPrev('itemId', 'refId');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a sibling before
 <strong>ref</strong>; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isSibling">
            <span class="objType">function</span>
            <span class="objName">isSibling</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isSibling(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 ref)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether <strong>elm</strong> is a sibling of
 <strong>ref</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isSibling = o2.Dom.isSibling('itemId', 'refId');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the source element, or a <code>String</code>
 id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            ref        </code>
         - the reference element, or a <code>String</code>
 id of it.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if <strong>elm</strong> is a sibling of
 <strong>ref</strong>; <code>false</code> otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___isVisible">
            <span class="objType">function</span>
            <span class="objName">isVisible</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    isVisible(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Checks whether the <strong>DOM</strong> node is visible.</p>
 <p>Note that being visible does not necessarily mean being available
 inside the <strong>viewport</strong>.</p>
 <p>If a <strong>DOM</strong> node has <code>display == 'none'</code>
 or <code>visibility == 'hidden'</code> <strong>CSS</strong> properties,
 then it's regarded as "invisible", otherwise it is considered to be
 "visible".</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var isContainerVisible = o2.Dom.isVisible('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOM</strong> element, or the
 <strong>id</strong> of it, to test.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             <code>true</code> if the element is visible, <code>false</code>
 otherwise.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___loadCss">
            <span class="objType">function</span>
            <span class="objName">loadCss</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    loadCss(<span class="type"><a href="logical/o2/String.html">String</a></span>
 src, <span class="type">Function</span>
 successCallback)
                </code> 
            </div>          
                <div class="comment">
        <p>Asynchronously loads a <strong>CSS</strong> file with a given
 <strong>src</strong>.</p>
 <p>Cross-domain loading is also okay: The <strong>CSS</strong> file does
 not have to be in the same domain as the web page.</p>

 <p>The success and failure callbacks is a somewhat hacky way of handling
 <strong>CSS</strong> load events. In deed, detecting <strong>CSS</strong>
 load is not an easy task, and it's not necessary most of the time.</p>
 <p>Though it may get handy to prevent the Flash of Unstyled Content
 (FOUC) issues.</p>
 <p>A more robust way of handling load callbacks is polling
 the property of a test element (such as the background color), that
 you know that the loaded <strong>CSS</strong> will change for sure.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadCss('http://cdn.example.com/theme.css', function() {
      handleSuccess();
 });
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            src        </code>
         - the source <strong>URL</strong> of the
 <strong>css</strong> file.            </div>   
                                                <div class="param paddedDetails">
        <code>
            successCallback        </code>
         - the callback to execute when the load
 operation completes.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___loadImage">
            <span class="objType">function</span>
            <span class="objName">loadImage</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    loadImage(<span class="type"><a href="logical/o2/String.html">String</a></span>
 url, <span class="type">Function</span>
 successCallback)
                </code> 
            </div>          
                <div class="comment">
        <p>Tries to load the image into a <strong>JavaScript</strong>
 <code>Image</code> object; then triggers
 <strong>successCallback</strong> or
 <strong>failureCallback</strong> depending on
 the result of the load attempt.</p>

 <p>This function can be used for pre-loading or post-loading images.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadImage('http//asset.example.com/spinner.png', function() {
      handleSuccess();
 });
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            url        </code>
         - the <strong>URL</strong> of the
 <strong>image</strong>.            </div>   
                                                <div class="param paddedDetails">
        <code>
            successCallback        </code>
         - gets called when the
 <strong>image</strong> is loaded successfully.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___loadScript">
            <span class="objType">function</span>
            <span class="objName">loadScript</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    loadScript(<span class="type"><a href="logical/o2/String.html">String</a></span>
 src, <span class="type">Function</span>
 callback)
                </code> 
            </div>          
                <div class="comment">
        <p>Asynchronously loads a <strong>script</strong> with a given
 <strong>src</strong>.</p>

 <p>Cross-domain loading is also okay: The <strong>script</strong> does
 not have to be in the same domain as the web page.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.loadImage('http//asset.example.com/script.js', function() {
      handleSuccess();
 });
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            src        </code>
         - the source <strong>URL</strong> of the
 <strong>script</strong>.            </div>   
                                                <div class="param paddedDetails">
        <code>
            callback        </code>
         - the callback to execute when the load
 operation completes.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___prepend">
            <span class="objType">function</span>
            <span class="objName">prepend</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    prepend(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmChild, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmParent)
                </code> 
            </div>          
                <div class="comment">
        <p>Prepends the element to the top of its parent.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var child = o2.$('ChildContainer');
 var parent = o2.$('MasterContainer');
 o2.Dom.prepend(child, parent);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmChild        </code>
         - the child node, or the id of the node to
 prepend.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmParent        </code>
         - the parent container, or the id of the
 container.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___preventMultipleSubmit">
            <span class="objType">function</span>
            <span class="objName">preventMultipleSubmit</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    preventMultipleSubmit(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 form)
                </code> 
            </div>          
                <div class="comment">
        <p>Prevents the form to re-submit itself when the submit button
 is pressed more than once.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.preventMultipleSubmit('actionForm');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            form        </code>
         - A <strong>DOM</strong> reference to the form
 object or its <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___ready">
            <span class="objType">function</span>
            <span class="objName">ready</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    ready(<span class="type">Function</span>
 delegate)
                </code> 
            </div>          
                <div class="comment">
        <p>Fires when the <code>HTML DOM</code> is ready.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.ready(function() {
      doInitializaton();
 });
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            delegate        </code>
         - the callback that's called when the DOM is
 ready.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___remove">
            <span class="objType">function</span>
            <span class="objName">remove</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    remove(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
                </code> 
            </div>          
                <div class="comment">
        <p>Removes the element from the <strong>DOM</strong> flow.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.remove('navigation');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            e        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it, to remove.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the removed node.
     	            	        </div>
        </div>      
                                                <hr/>       
                                                                                    <h3>
        <a name="___removeChildren">
            <span class="objType">function</span>
            <span class="objName">removeChildren</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    removeChildren(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
                </code> 
            </div>          
                <div class="comment">
        <p>Removes all the children of the element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeChildren('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            e        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it to process.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___removeClass">
            <span class="objType">function</span>
            <span class="objName">removeClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    removeClass(<span class="type">DomNode</span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c)
                </code> 
            </div>          
                <div class="comment">
        <p>Removes a <strong>class</strong> name from the given node.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeClass('container', 'active');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            el        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            c        </code>
         - the className to remove.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___removeEmpty">
            <span class="objType">function</span>
            <span class="objName">removeEmpty</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    removeEmpty()
                </code>
            </div>    
        <div class="comment">
        <p>An <strong>alias</strong> to
 <a href="logical/o2/Dom.html#___removeEmptyTextNodes">o2.Dom.removeEmptyTextNodes</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___removeEmptyTextNodes">o2.Dom.removeEmptyTextNodes</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___removeEmptyTextNodes">
            <span class="objType">function</span>
            <span class="objName">removeEmptyTextNodes</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    removeEmptyTextNodes(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 e)
                </code> 
            </div>          
                <div class="comment">
        <p>Removes empty text nodes from the element.</p>
 <p>Note that this removal is not recursive; only the first-level empty
 child nodes of the element will be removed.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.removeEmptyTextNodes('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            e        </code>
         - either the <strong>element</strong>, or the
 <strong>id</strong> of it to process.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___removeNode">
            <span class="objType">function</span>
            <span class="objName">removeNode</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    removeNode()
                </code>
            </div>    
        <div class="comment">
        <p>An <strong>alias</strong> to <a href="logical/o2/Dom.html#___remove">o2.Dom.remove</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___remove">o2.Dom.remove</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___replace">
            <span class="objType">function</span>
            <span class="objName">replace</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    replace(<span class="type"></span>
 elmTarget, <span class="type"></span>
 elmToReplace)
                </code> 
            </div>          
                <div class="comment">
        <p>Replaces one node with another.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.replace('firstContainer', 'secondContainer');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmTarget        </code>
         - the target node or its <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmToReplace        </code>
         - the replacement node or its <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___scrollObjectToBottom">
            <span class="objType">function</span>
            <span class="objName">scrollObjectToBottom</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollObjectToBottom(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Scrolls an element to bottom.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollObjectToBottom('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the element, or the <strong>id</strong> of it, to
 scroll.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___scrollObjectToTop">
            <span class="objType">function</span>
            <span class="objName">scrollObjectToTop</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollObjectToTop(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj)
                </code> 
            </div>          
                <div class="comment">
        <p>Scrolls an element to top.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollObjectToTop('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the element, or the <strong>id</strong> of the
 element, to scroll.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___scrollTo">
            <span class="objType">function</span>
            <span class="objName">scrollTo</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollTo()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___scrollToObject">
            <span class="objType">function</span>
            <span class="objName">scrollToObject</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollToObject()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___scrollWindowToBottom">
            <span class="objType">function</span>
            <span class="objName">scrollWindowToBottom</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollWindowToBottom()
                </code>
            </div>    
        <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollWindowToBottom();
 </pre>

 <p>Scrolls window to bottom.</p>

     </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___scrollWindowToObject">
            <span class="objType">function</span>
            <span class="objName">scrollWindowToObject</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollWindowToObject()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___scrollWindowToObject">o2.Dom.scrollWindowToObject</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___scrollWindowToTop">
            <span class="objType">function</span>
            <span class="objName">scrollWindowToTop</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    scrollWindowToTop()
                </code>
            </div>    
        <div class="comment">
        <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.scrollWindowToTop();
 </pre>

 <p>Scrolls window to top.</p>

     </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___setAttribute">
            <span class="objType">function</span>
            <span class="objName">setAttribute</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setAttribute(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type"><a href="logical/o2/String.html">String</a></span>
 attribute, <span class="type"><a href="logical/o2/String.html">String</a></span>
 value)
                </code> 
            </div>          
                <div class="comment">
        <p>Sets the attribute of the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setAttribute('container', 'data-user-id', '123');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the object or the <code>String</code> id of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            attribute        </code>
         - the name of the attribute.            </div>   
                                                <div class="param paddedDetails">
        <code>
            value        </code>
         - the value of the attribute.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___setCss">
            <span class="objType">function</span>
            <span class="objName">setCss</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setCss()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___setDimension">
            <span class="objType">function</span>
            <span class="objName">setDimension</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setDimension(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 dimension)
                </code> 
            </div>          
                <div class="comment">
        <p>Sets the dimension of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setDimension('container', {width: 400, height: 200});
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            dimension        </code>
         - the new dimension in the form
 <code>{width: w, height: h}</code>.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___setHeight">
            <span class="objType">function</span>
            <span class="objName">setHeight</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setHeight(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type">Integer</span>
 height)
                </code> 
            </div>          
                <div class="comment">
        <p>Sets the <strong>height</strong> of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setHeight('container', 300);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            height        </code>
         - the new height in pixels.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___setHtml">
            <span class="objType">function</span>
            <span class="objName">setHtml</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setHtml(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
                </code> 
            </div>          
                <div class="comment">
        <p>Simply sets the <code>innerHTML</code> of the element.

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setHtml('container', '[h1]hello[/h1]');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - The <strong>DOM</strong> element to set the
 <strong>HTML</strong> of, or its <code>String</code> id.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___setStyle">
            <span class="objType">function</span>
            <span class="objName">setStyle</span>            
        </a> 
    </h3>
                <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setStyle()
                </code>
            </div>    
        <div class="comment">
        <p>An alias to <a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a>.</p>

     </div>
                                <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/Dom.html#___addStyle">o2.Dom.addStyle</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___setWidth">
            <span class="objType">function</span>
            <span class="objName">setWidth</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    setWidth(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 obj, <span class="type">Integer</span>
 width)
                </code> 
            </div>          
                <div class="comment">
        <p>Sets the <strong>width</strong> of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.setWidth('container', 500);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            obj        </code>
         - the <strong>DOMNode</strong> to get the dimension
 of, or the <code>String</code> <strong>id</strong> of it.            </div>   
                                                <div class="param paddedDetails">
        <code>
            width        </code>
         - the new width in pixels.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___show">
            <span class="objType">function</span>
            <span class="objName">show</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    show(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm)
                </code> 
            </div>          
                <div class="comment">
        <p>Shows the given object.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.show('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - the <strong>DOM</strong> node, or the
 <strong>id</strong> of it, to show.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___toggleClass">
            <span class="objType">function</span>
            <span class="objName">toggleClass</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    toggleClass(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 el, <span class="type"><a href="logical/o2/String.html">String</a></span>
 c, <span class="type">Boolean</span>
 state)
                </code> 
            </div>          
                <div class="comment">
        <p>Toggles the <strong>CSS</strong> <code>className</code> of a given
 element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.toggleClass('container', 'active');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            el        </code>
         - the <strong>DOM</strong> element to toggle or its
 <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            c        </code>
         - the class name to toggle.            </div>   
                                                <div class="param paddedDetails">
        <code>
            state        </code>
         - (Optional, defaults to <code>undefined</code>),
 if <code>true</code> add class <strong>c</strong> to
 <strong>el</strong>, if <code>true</code> removes class
 <strong>c</strong> from <strong>el</strong>. If the parameter is not
 given, the class is toggled (i.e. added if the class does not exist,
 and removed if the class exists).            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___toggleVisibility">
            <span class="objType">function</span>
            <span class="objName">toggleVisibility</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    toggleVisibility(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elm, <span class="type">Boolean</span>
 state)
                </code> 
            </div>          
                <div class="comment">
        <p>Toggles the visibility of the given element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.toggleVisibility('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elm        </code>
         - a <strong>DOM</strong> reference or its
 <code>String</code> id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            state        </code>
         - (Optional, defaults to <code>undefined</code>)
 if <code>true</code>, show the item; if <code>false</code> hides the
 item; if <code>undefined</code> simply toggles the visibility of the
 item.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___trimField">
            <span class="objType">function</span>
            <span class="objName">trimField</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    trimField(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 field)
                </code> 
            </div>          
                <div class="comment">
        <p>Trims a given field, and returns the trimmed value.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.trimField('txtInput');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            field        </code>
         - the field to be trimmed, or its
 <strong>id</strong>.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             field's trimmed value; or <code>null</code> if the field
 does not exist.

 	            	        </div>
        </div>      
                            <div class="seealso">
            <span class="descSection">See also:</span>
                            <div class="paddedDetails"><a href="logical/o2/String.html#___trim">o2.String.trim</a></div>
                    </div>      
                                <hr/>       
                                                                                    <h3>
        <a name="___unwrap">
            <span class="objType">function</span>
            <span class="objName">unwrap</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">static</span>
                    <span class="type"></span>
                    unwrap(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmTarget)
                </code> 
            </div>          
                <div class="comment">
        <p>This is like <a href="logical/o2/Dom.html#___wrap">o2.Dom.wrap</a> in reverse.</p>
 <p>Moves all the elements inside the container to the container's
 position and removes the container from the <strong>DOM</strong>.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 o2.Dom.unwrap('container');
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmTarget        </code>
         - the target node or its <code>String</code> id
 to unwrap.            </div>   
                                        </div>
                </div>
                    </div>
                                                    <hr/>       
                                                                                    <h3>
        <a name="___wrap">
            <span class="objType">function</span>
            <span class="objName">wrap</span>            
        </a> 
    </h3>
                        <div>
                <code>
                    <span class="modifiers">public static</span>
                    <span class="type"></span>
                    wrap(<span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmTarget, <span class="type"><a href="logical/o2/Object.html">Object</a></span>
 elmWrapper)
                </code> 
            </div>          
                <div class="comment">
        <p>Puts the target element into the wrapper element.</p>

 <p><strong>Usage example:</strong></p>

 <pre>
 var wrapper = o2.$('wrapper');
 var target = o2.$('content');
 o2.Dom.wrap(target, wrapper);
 </pre>

     </div>
        	<div class="parameters">
        <span class="descSection">Parameters:</span><br/>
                            <div>
                    <div class="paramset"></div>
                    <div>
                                                <div class="param paddedDetails">
        <code>
            elmTarget        </code>
         - the node to wrap or its <code>String</code>
 id.            </div>   
                                                <div class="param paddedDetails">
        <code>
            elmWrapper        </code>
         - the wrapper node to its <code>String</code>
 id.            </div>   
                                        </div>
                </div>
                    </div>
            	<div class="returns">
	        <span class="descSection">Returns:</span><br/>
	        <div class="paddedDetails">
	            	             the wrapped node.
     	            	        </div>
        </div>      
                                                <hr/>       
                                    </div>
    	    	                                    						        </div>
        		          </div>			                    
		                </div>
        	       </div>
             </div>
             <div class="navigation" id="navigation">
    <ul class="navContent">
        <li>
            <div class="navTree">
                <h2 onclick="jgdoc.NavPanel.clicked(event)">
                    <a href="javascript:jgdoc.NavPanel.dummy()">Navigation</a>
                </h2>
                <ul class="navContent2">
                    <li>
                        <div>
                            <a class="openAll" href="javascript:jgdoc.NavTree.onOpenAll()">Open All</a>
                            <a class="closeAll" href="javascript:jgdoc.NavTree.onCloseAll()">Close All</a>
                        </div>
                        <div>
                            <ul id = "content" class="contents">
                                Loading...
                            </ul>
                        </div>
                    </li>
                </ul>
            </div>
        </li>
    </ul>
    <ul class="navContent closed">
        <li>
            <div class="fileTree">
                <h2 onclick="jgdoc.NavPanel.clicked(event)">
                    <a href="javascript:jgdoc.NavPanel.dummy()">Files</a>
                </h2>
                <ul class="navContent2">
                    <li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <div>
                                <a href="physical/file-o2/dom/collide.js.html">o2.dom.collide.js</a>
                            </div>                              
                                                                                                                                                                <div>
                                <a href="physical/file-o2/dom/coordinate.js.html">o2.dom.coordinate.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                                                                                                                                <div>
                                <a href="physical/file-o2/dom/range.js.html">o2.dom.range.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                                                                                                                                <div>
                                <a href="physical/file-o2/dom/traverse/core.js.html">o2.dom.traverse.core.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/ends.js.html">o2.dom.traverse.ends.js</a>
                            </div>                              
                                                                                                                                                                <div>
                                <a href="physical/file-o2/dom/traverse/next.js.html">o2.dom.traverse.next.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/nth.js.html">o2.dom.traverse.nth.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/parent.js.html">o2.dom.traverse.parent.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/parents.js.html">o2.dom.traverse.parents.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/prev.js.html">o2.dom.traverse.prev.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/siblings.js.html">o2.dom.traverse.siblings.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/dom/traverse/validate.js.html">o2.dom.traverse.validate.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                        <div>
                                <a href="physical/file-o2/event/custom.js.html">o2.event.custom.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                        <div>
                                <a href="physical/file-o2/jsonpcontroller/core.js.html">o2.jsonpcontroller.core.js</a>
                            </div>                              
                                                                                                                                                                                                                    <div>
                                <a href="physical/file-o2/meta/production.js.html">o2.meta.production.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                                                                                                                                                                                    <div>
                                <a href="physical/file-o2/nodejs/footer.js.html">o2.nodejs.footer.js</a>
                            </div>                              
                                                                                                            <div>
                                <a href="physical/file-o2/nodejs/header.js.html">o2.nodejs.header.js</a>
                            </div>                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                </li>
                </ul>
            </div>
        </li>       
    </ul>
    <ul class="navContent closed">
        <li>
            <div class="moduleTree">
                <h2 onclick="jgdoc.NavPanel.clicked(event)">
                    <a href="javascript:jgdoc.NavPanel.dummy()">Modules</a>
                </h2>
                <ul class="navContent2">
                    <li>
                                                    <div>
                                <a href="physical/ajax/module-core.html">ajax.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/ajax/module-extend.html">ajax.extend</a>
                            </div>                              
                                                    <div>
                                <a href="physical/ajaxcontroller/module-core.html">ajaxcontroller.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/ajaxstate/module-core.html">ajaxstate.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/collection/module-core.html">collection.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/module-convert.html">convert</a>
                            </div>                              
                                                    <div>
                                <a href="physical/cookie/module-core.html">cookie.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/module-core.html">core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/core/module-meta.html">core.meta</a>
                            </div>                              
                                                    <div>
                                <a href="physical/date/module-core.html">date.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/debugger/module-core.html">debugger.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-class.html">dom.class</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-constants.html">dom.constants</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-core.html">dom.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-dimension.html">dom.dimension</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-form.html">dom.form</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-load.html">dom.load</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-modify.html">dom.modify</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-ready.html">dom.ready</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-scroll.html">dom.scroll</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-style.html">dom.style</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/module-traverse.html">dom.traverse</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/traverse/module-child.html">dom.traverse.child</a>
                            </div>                              
                                                    <div>
                                <a href="physical/dom/traverse/module-children.html">dom.traverse.children</a>
                            </div>                              
                                                    <div>
                                <a href="physical/module-effect.html">effect</a>
                            </div>                              
                                                    <div>
                                <a href="physical/event/module-constants.html">event.constants</a>
                            </div>                              
                                                    <div>
                                <a href="physical/event/module-core.html">event.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/event/module-extend.html">event.extend</a>
                            </div>                              
                                                    <div>
                                <a href="physical/module-extend.html">extend</a>
                            </div>                              
                                                    <div>
                                <a href="physical/jsonp/module-core.html">jsonp.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/jsonpstate/module-core.html">jsonpstate.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-core.html">method.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-event.html">method.event</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-inherit.html">method.inherit</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-repeat.html">method.repeat</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-timer.html">method.timer</a>
                            </div>                              
                                                    <div>
                                <a href="physical/method/module-transpose.html">method.transpose</a>
                            </div>                              
                                                    <div>
                                <a href="physical/object/module-core.html">object.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/querystring/module-core.html">querystring.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/sortdelegate/module-core.html">sortdelegate.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/string/module-core.html">string.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/string/module-encode.html">string.encode</a>
                            </div>                              
                                                    <div>
                                <a href="physical/string/module-strip.html">string.strip</a>
                            </div>                              
                                                    <div>
                                <a href="physical/string/module-transform.html">string.transform</a>
                            </div>                              
                                                    <div>
                                <a href="physical/supports/module-core.html">supports.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/template/module-core.html">template.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/timer/module-core.html">timer.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/try/module-core.html">try.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/unit/module-core.html">unit.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/validation/module-core.html">validation.core</a>
                            </div>                              
                                                    <div>
                                <a href="physical/validation/module-regexp.html">validation.regexp</a>
                            </div>                              
                                            </li>
                </ul>
            </div>
        </li>       
    </ul>
</div>  
    
		</div>	
	</body>
    <script type="text/javascript">
        jgdoc.Searcher.start();
        jgdoc.NavTree.initialize("o2.Dom");
    </script>			
	<script type="text/javascript" src="jsindex.js">
    </script>
</html>
",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 19:55:51 GMT",
                    "Content-Length": "688377",
                    "Date": "Fri, 07 Nov 2014 21:13:33 GMT",
                    "Content-Type": "text/html; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "HTML",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}