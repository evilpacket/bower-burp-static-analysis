{
    "url": "http://localhost:9999/jcoglan/sylvester/node_modules/jsclass/min/console.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Denial of service (DOM-based)",
    "issueType": 5246208,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based denial of service vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and passes this data to a problematic platform API in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a denial of service condition on the user's computer when the relevant API is invoked. Depending on the nature of the API, the invocation may cause the user's computer to consume excessive amounts of CPU or disk space.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based denial of service vulnerabilities is not to dynamically pass data into problematic platform APIs that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from causing a denial of service condition. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe.",
    "issueDetail": "The application may be vulnerable to DOM-based denial of service. Data is read from <b>window.location.href</b> and written to <b>the RegExp() constructor</b> via the following statement:<ul><li>var b=new RegExp(window.location.href.replace(/(\\/[^\\/]+)/g,'($1)?')+'/?','g');</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/jcoglan/sylvester/node_modules/jsclass/min/console.js",
                "path": "/jcoglan/sylvester/node_modules/jsclass/min/console.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9qY29nbGFuL3N5bHZlc3Rlci9ub2RlX21vZHVsZXMvanNjbGFzcy9taW4vY29uc29sZS5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNTQxOQ0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KRGF0ZTogU2F0LCAwOCBOb3YgMjAxNCAxNToxNDowMSBHTVQNCkxhc3QtTW9kaWZpZWQ6IFNhdCwgMDggTm92IDIwMTQgMTU6MTQ6MDEgR01UDQoNCkpTLkNvbnNvbGU9bmV3IEpTLk1vZHVsZSgnQ29uc29sZScse2V4dGVuZDp7bmFtZU9mOmZ1bmN0aW9uKGEsYil7dmFyIGM9W10sZixoLGQsZztpZihKUy5pc1R5cGUoYSxBcnJheSkpe2ZvcihmPTAsaD1hLmxlbmd0aDtmPGg7ZisrKWMucHVzaCh0aGlzLm5hbWVPZihhW2ZdKSk7cmV0dXJuIGN9aWYoYS5kaXNwbGF5TmFtZSlyZXR1cm4gYS5kaXNwbGF5TmFtZTtkPVt7bmFtZTpudWxsLG86Ynx8SlMuRU5WfV07Zz0wO3doaWxlKHR5cGVvZiBkPT09J29iamVjdCcmJmc8dGhpcy5NQVhfREVQVEgpe2crPTE7ZD10aGlzLmRlc2NlbmQoZCxhKX1pZih0eXBlb2YgZD09J3N0cmluZycpe2Q9ZC5yZXBsYWNlKC9cLnByb3RvdHlwZVwuL2csJyMnKTthLmRpc3BsYXlOYW1lPWQ7aWYoYS5fX21ldGFfXylhLl9fbWV0YV9fLmRpc3BsYXlOYW1lPWQrJy5fX21ldGFfXyd9cmV0dXJuIGEuZGlzcGxheU5hbWV9LGRlc2NlbmQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz1bXSxmPWEubGVuZ3RoLGg9ZixkLGcsaTt3aGlsZShoLS0pe2c9YVtoXTtpZihKUy5pc1R5cGUoZy5vLEFycmF5KSljb250aW51ZTtpPWcubmFtZT9nLm5hbWUrJy4nOicnO2ZvcihkIGluIGcubyl7aWYoYiYmZy5vW2RdPT09YilyZXR1cm4gaStkO2MucHVzaCh7bmFtZTppK2QsbzpnLm9bZF19KX19cmV0dXJuIGN9LE1BWF9ERVBUSDo0LGNvbnZlcnQ6ZnVuY3Rpb24oYixjKXtpZihiPT09bnVsbHx8Yj09PXVuZGVmaW5lZClyZXR1cm4gU3RyaW5nKGIpO3ZhciBmPUpTLkVudW1lcmFibGUsYz1jfHxbXSxoO2lmKEpTLmluZGV4T2YoYyxiKT49MClyZXR1cm4nI2NpcmN1bGFyJztpZihiIGluc3RhbmNlb2YgRXJyb3Ipe3JldHVybih0eXBlb2YgYi5tZXNzYWdlPT09J3N0cmluZycmJiFiLm1lc3NhZ2UpP2IubmFtZTpiLm5hbWUrKGIubWVzc2FnZT8nOiAnK2IubWVzc2FnZTonJyl9aWYoYiBpbnN0YW5jZW9mIEFycmF5KXtjLnB1c2goYik7aD1uZXcgZi5Db2xsZWN0aW9uKGIpLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5jb252ZXJ0KGEsYyl9LHRoaXMpLmpvaW4oJywgJyk7Yy5wb3AoKTtyZXR1cm4gaD8nWyAnK2grJyBdJzonW10nfWlmKGIgaW5zdGFuY2VvZiBTdHJpbmd8fHR5cGVvZiBiPT09J3N0cmluZycpcmV0dXJuJyInK2IrJyInO2lmKGIgaW5zdGFuY2VvZiBGdW5jdGlvbilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHwoYi50b1N0cmluZygpLm1hdGNoKC9eXHMqZnVuY3Rpb24gKFteXChdKylcKC8pfHxbXSlbMV18fCcjZnVuY3Rpb24nO2lmKGIgaW5zdGFuY2VvZiBEYXRlKXJldHVybiBiLnRvR01UU3RyaW5nKCk7aWYoYi50b1N0cmluZyYmYi50b1N0cmluZyE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcmJiFiLnRvU3RyaW5nLl9fdHJhY2VkX18pcmV0dXJuIGIudG9TdHJpbmcoKTtpZihiLm5vZGVUeXBlIT09dW5kZWZpbmVkKXJldHVybiBiLnRvU3RyaW5nKCk7Yy5wdXNoKGIpO2g9bmV3IGYuQ29sbGVjdGlvbihmLm9iamVjdEtleXMoYixmYWxzZSkuc29ydCgpKS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuY29udmVydChhLGMpKyc6ICcrdGhpcy5jb252ZXJ0KGJbYV0sYyl9LHRoaXMpLmpvaW4oJywgJyk7Yy5wb3AoKTtyZXR1cm4gaD8neyAnK2grJyB9Jzone30nfSxmaWx0ZXJCYWNrdHJhY2U6ZnVuY3Rpb24oYSl7aWYodGhpcy5CUk9XU0VSKXt2YXIgYj1uZXcgUmVnRXhwKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoLyhcL1teXC9dKykvZywnKCQxKT8nKSsnLz8nLCdnJyk7cmV0dXJuIGEucmVwbGFjZShiLCcnKX1lbHNlIGlmKHRoaXMuUkhJTk8pe3ZhciBiPWphdmEubGFuZy5TeXN0ZW0uZ2V0UHJvcGVydHkoJ3VzZXIuZGlyJykrJy8nO3JldHVybiBhLnJlcGxhY2UobmV3IFJlZ0V4cChiLCdnJyksJycpfWVsc2UgaWYodGhpcy5OT0RFKXt2YXIgYj1wcm9jZXNzLmN3ZCgpKycvJztyZXR1cm4gYS5yZXBsYWNlKG5ldyBSZWdFeHAoYiwnZycpLCcnKX1lbHNlIGlmKHR5cGVvZiB2ZXJzaW9uPT09J2Z1bmN0aW9uJyYmdmVyc2lvbigpPjEwMCl7cmV0dXJuJyd9ZWxzZXtyZXR1cm4gYX19LEFOU0lfQ1NJOlN0cmluZy5mcm9tQ2hhckNvZGUoMHgxQikrJ1snLE1BWF9CVUZGRVJfTEVOR1RIOjc4LEJST1dTRVI6KHR5cGVvZiB3aW5kb3chPT0ndW5kZWZpbmVkJyksTk9ERToodHlwZW9mIHByb2Nlc3M9PT0nb2JqZWN0JyksUkhJTk86KHR5cGVvZiBqYXZhIT09J3VuZGVmaW5lZCcmJnR5cGVvZiBqYXZhLmxhbmchPT0ndW5kZWZpbmVkJyksV0lORE9aRToodHlwZW9mIHdpbmRvdyE9PSd1bmRlZmluZWQnfHx0eXBlb2YgV1NjcmlwdCE9PSd1bmRlZmluZWQnKSxXU0g6KHR5cGVvZiBXU2NyaXB0IT09J3VuZGVmaW5lZCcpLGNvbG9yaW5nOmZ1bmN0aW9uKCl7cmV0dXJuISh0aGlzLkJST1dTRVImJiF3aW5kb3cucnVudGltZSkmJiF0aGlzLldJTkRPWkV9LF9fYnVmZmVyX186JycsX19mb3JtYXRfXzonJyxFU0NBUEVfQ09ERVM6e3Jlc2V0OjAsYm9sZDoxLG5vcm1hbDoyMix1bmRlcmxpbmU6NCxub2xpbmU6MjQsYmxpbms6NSxub2JsaW5rOjI1LGJsYWNrOjMwLGJnYmxhY2s6NDAscmVkOjMxLGJncmVkOjQxLGdyZWVuOjMyLGJnZ3JlZW46NDIseWVsbG93OjMzLGJneWVsbG93OjQzLGJsdWU6MzQsYmdibHVlOjQ0LG1hZ2VudGE6MzUsYmdtYWdlbnRhOjQ1LGN5YW46MzYsYmdjeWFuOjQ2LHdoaXRlOjM3LGJnd2hpdGU6NDcsbm9jb2xvcjozOSxiZ25vY29sb3I6NDl9LGVzY2FwZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5BTlNJX0NTSSthfSxyZXBlYXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz0nJzt3aGlsZShiLS0pYys9YTtyZXR1cm4gY30scGFkOmZ1bmN0aW9uKGEsYil7YT0oYT09PXVuZGVmaW5lZD8nJzphKS50b1N0cmluZygpO3JldHVybiBhK3RoaXMucmVwZWF0KCcgJyxiLWEubGVuZ3RoKX0sZmx1c2hGb3JtYXQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9fZm9ybWF0X187dGhpcy5fX2Zvcm1hdF9fPScnO3JldHVybiBhfSxvdXRwdXQ6ZnVuY3Rpb24oYSxiKXt3aGlsZShhLmxlbmd0aD4wKXt2YXIgYz10aGlzLl9fYnVmZmVyX18ubGVuZ3RoLGY9dGhpcy5CUk9XU0VSPzEwMDA6dGhpcy5NQVhfQlVGRkVSX0xFTkdUSCxoPShjPjAmJnRoaXMuY29sb3JpbmcoKSksZD1oP3RoaXMuZXNjYXBlKCcxRicpK3RoaXMuZXNjYXBlKChjKzEpKydHJyk6JycsZz1hLnN1YnN0cigwLGYtYyk7dGhpcy5fX2J1ZmZlcl9fKz1nO2lmKHRoaXMuY29sb3JpbmcoKSl0aGlzLndyaXRlVG9TdGRvdXQoZCt0aGlzLmZsdXNoRm9ybWF0KCkrZyk7ZWxzZSBpZih0aGlzLl9fYnVmZmVyX18ubGVuZ3RoPT09Zil0aGlzLndyaXRlVG9TdGRvdXQodGhpcy5fX2J1ZmZlcl9fKTtpZih0aGlzLl9fYnVmZmVyX18ubGVuZ3RoPT09Zil0aGlzLl9fYnVmZmVyX189Jyc7YT1hLnN1YnN0cihmLWMpfWlmKCFiKXtpZihhPT09JycmJiF0aGlzLl9fYnVmZmVyX18pdGhpcy53cml0ZVRvU3Rkb3V0KHRoaXMuZmx1c2hGb3JtYXQoKSsnJyk7aWYoIXRoaXMuY29sb3JpbmcoKSYmdGhpcy5fX2J1ZmZlcl9fKXRoaXMud3JpdGVUb1N0ZG91dCh0aGlzLl9fYnVmZmVyX18pO3RoaXMuX19idWZmZXJfXz0nJ319LHdyaXRlVG9TdGRvdXQ6ZnVuY3Rpb24oYSl7aWYodGhpcy5CUk9XU0VSJiZ3aW5kb3cucnVudGltZSlyZXR1cm4gd2luZG93LnJ1bnRpbWUudHJhY2UoYSk7aWYodGhpcy5OT0RFKXJldHVybiBjb25zb2xlLndhcm4oYSk7aWYodGhpcy5SSElOTylyZXR1cm4gamF2YS5sYW5nLlN5c3RlbS5vdXQucHJpbnRsbihhKTtpZih0aGlzLldTSClyZXR1cm4gV1NjcmlwdC5FY2hvKGEpO2lmKHR5cGVvZiBjb25zb2xlIT09J3VuZGVmaW5lZCcpcmV0dXJuIGNvbnNvbGUubG9nKGEpO2lmKHR5cGVvZiBhbGVydD09PSdmdW5jdGlvbicpcmV0dXJuIGFsZXJ0KGEpO2lmKHR5cGVvZiBwcmludD09PSdmdW5jdGlvbicpcmV0dXJuIHByaW50KGEpfX0sY29uc29sZUZvcm1hdDpmdW5jdGlvbigpe2lmKCFKUy5Db25zb2xlLmNvbG9yaW5nKCkpcmV0dXJuO3RoaXMucmVzZXQoKTt2YXIgYT1hcmd1bWVudHMubGVuZ3RoO3doaWxlKGEtLSl0aGlzW2FyZ3VtZW50c1thXV0oKX0scHV0czpmdW5jdGlvbihhKXthPShhPT09dW5kZWZpbmVkPycnOmEpLnRvU3RyaW5nKCk7dmFyIGI9SlMuQ29uc29sZTtpZihiLk5PREV8fGIuUkhJTk8pe2Iud3JpdGVUb1N0ZG91dChiLmZsdXNoRm9ybWF0KCkrYSk7Yi5fX3ByaW50X189ZmFsc2V9ZWxzZXtiLm91dHB1dChhLGZhbHNlKX19LHByaW50OmZ1bmN0aW9uKGEpe2E9KGE9PT11bmRlZmluZWQ/Jyc6YSkudG9TdHJpbmcoKTt2YXIgYj1KUy5Db25zb2xlLGM7aWYoYi5OT0RFKXt0cnl7Yz1yZXF1aXJlKCd1dGlsJyl9Y2F0Y2goZSl7Yz1yZXF1aXJlKCdzeXMnKX1jLnByaW50KGIuZmx1c2hGb3JtYXQoKSthKTtiLl9fcHJpbnRfXz10cnVlfWVsc2UgaWYoYi5SSElOTyl7amF2YS5sYW5nLlN5c3RlbS5vdXQucHJpbnQoYi5mbHVzaEZvcm1hdCgpK2EpO2IuX19wcmludF9fPXRydWV9ZWxzZXtiLm91dHB1dChhLHRydWUpfX0scHJpbnRUYWJsZTpmdW5jdGlvbihkLGcpe3ZhciBpPVtdLGQ9W1snTWV0aG9kJywnQ2FsbHMnXV0uY29uY2F0KGQpLG09SlMuQ29uc29sZSxrPWQubGVuZ3RoLGosbjt3aGlsZShrLS0pe2o9ZFtrXS5sZW5ndGg7d2hpbGUoai0tKXtpW2pdPWlbal18fDA7bj0oZFtrXVtqXT09PXVuZGVmaW5lZD8nJzpkW2tdW2pdKS50b1N0cmluZygpO2lbal09TWF0aC5tYXgobi5sZW5ndGgsaVtqXSl9fXZhciBsPScrJyxqPWkubGVuZ3RoO3doaWxlKGotLSlsPScrJyttLnJlcGVhdCgnLScsaVtqXSsyKStsO2w9JyAgJytsO3RoaXMucmVzZXQoKTt0aGlzLnB1dHMoKTt0aGlzLnB1dHMobCk7dmFyIG89ZnVuY3Rpb24oYSxiKXt2YXIgYz1kW2FdO3RoaXMucmVzZXQoKTt0aGlzLnByaW50KCcgICcpO2Zvcih2YXIgZj0wLGg9Yy5sZW5ndGg7ZjxoO2YrKyl7dGhpcy5yZXNldCgpO3RoaXMucHJpbnQoJ3wnKTt0aGlzLmNvbnNvbGVGb3JtYXQuYXBwbHkodGhpcyxiKTt0aGlzLnByaW50KCcgJyttLnBhZChjW2ZdLGlbZl0pKycgJyl9dGhpcy5yZXNldCgpO3RoaXMucHV0cygnfCcpfTtvLmNhbGwodGhpcywwLFsnYm9sZCddKTt0aGlzLnJlc2V0KCk7dGhpcy5wdXRzKGwpO2Zvcih2YXIgaz0xLHA9ZC5sZW5ndGg7azxwO2srKyl7dmFyIHE9Zz9nKGRba10sayk6W107by5jYWxsKHRoaXMsayxxKX10aGlzLnJlc2V0KCk7dGhpcy5wdXRzKGwpfX0pOyhmdW5jdGlvbigpe3ZhciBjPUpTLkNvbnNvbGU7Zm9yKHZhciBmIGluIGMuRVNDQVBFX0NPREVTKShmdW5jdGlvbihiKXtjLmRlZmluZShiLGZ1bmN0aW9uKCl7aWYoIUpTLkNvbnNvbGUuY29sb3JpbmcoKSlyZXR1cm47dmFyIGE9Yy5FU0NBUEVfQ09ERVNbYl07Yy5fX2Zvcm1hdF9fKz1jLmVzY2FwZShhKydtJyl9KX0pKGYpO2MuZXh0ZW5kKGMpfSkoKTsKLy9AIHNvdXJjZU1hcHBpbmdVUkw9Y29uc29sZS5qcy5tYXA=",
                "body": "SlMuQ29uc29sZT1uZXcgSlMuTW9kdWxlKCdDb25zb2xlJyx7ZXh0ZW5kOntuYW1lT2Y6ZnVuY3Rpb24oYSxiKXt2YXIgYz1bXSxmLGgsZCxnO2lmKEpTLmlzVHlwZShhLEFycmF5KSl7Zm9yKGY9MCxoPWEubGVuZ3RoO2Y8aDtmKyspYy5wdXNoKHRoaXMubmFtZU9mKGFbZl0pKTtyZXR1cm4gY31pZihhLmRpc3BsYXlOYW1lKXJldHVybiBhLmRpc3BsYXlOYW1lO2Q9W3tuYW1lOm51bGwsbzpifHxKUy5FTlZ9XTtnPTA7d2hpbGUodHlwZW9mIGQ9PT0nb2JqZWN0JyYmZzx0aGlzLk1BWF9ERVBUSCl7Zys9MTtkPXRoaXMuZGVzY2VuZChkLGEpfWlmKHR5cGVvZiBkPT0nc3RyaW5nJyl7ZD1kLnJlcGxhY2UoL1wucHJvdG90eXBlXC4vZywnIycpO2EuZGlzcGxheU5hbWU9ZDtpZihhLl9fbWV0YV9fKWEuX19tZXRhX18uZGlzcGxheU5hbWU9ZCsnLl9fbWV0YV9fJ31yZXR1cm4gYS5kaXNwbGF5TmFtZX0sZGVzY2VuZDpmdW5jdGlvbihhLGIpe3ZhciBjPVtdLGY9YS5sZW5ndGgsaD1mLGQsZyxpO3doaWxlKGgtLSl7Zz1hW2hdO2lmKEpTLmlzVHlwZShnLm8sQXJyYXkpKWNvbnRpbnVlO2k9Zy5uYW1lP2cubmFtZSsnLic6Jyc7Zm9yKGQgaW4gZy5vKXtpZihiJiZnLm9bZF09PT1iKXJldHVybiBpK2Q7Yy5wdXNoKHtuYW1lOmkrZCxvOmcub1tkXX0pfX1yZXR1cm4gY30sTUFYX0RFUFRIOjQsY29udmVydDpmdW5jdGlvbihiLGMpe2lmKGI9PT1udWxsfHxiPT09dW5kZWZpbmVkKXJldHVybiBTdHJpbmcoYik7dmFyIGY9SlMuRW51bWVyYWJsZSxjPWN8fFtdLGg7aWYoSlMuaW5kZXhPZihjLGIpPj0wKXJldHVybicjY2lyY3VsYXInO2lmKGIgaW5zdGFuY2VvZiBFcnJvcil7cmV0dXJuKHR5cGVvZiBiLm1lc3NhZ2U9PT0nc3RyaW5nJyYmIWIubWVzc2FnZSk/Yi5uYW1lOmIubmFtZSsoYi5tZXNzYWdlPyc6ICcrYi5tZXNzYWdlOicnKX1pZihiIGluc3RhbmNlb2YgQXJyYXkpe2MucHVzaChiKTtoPW5ldyBmLkNvbGxlY3Rpb24oYikubWFwKGZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmNvbnZlcnQoYSxjKX0sdGhpcykuam9pbignLCAnKTtjLnBvcCgpO3JldHVybiBoPydbICcraCsnIF0nOidbXSd9aWYoYiBpbnN0YW5jZW9mIFN0cmluZ3x8dHlwZW9mIGI9PT0nc3RyaW5nJylyZXR1cm4nIicrYisnIic7aWYoYiBpbnN0YW5jZW9mIEZ1bmN0aW9uKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fChiLnRvU3RyaW5nKCkubWF0Y2goL15ccypmdW5jdGlvbiAoW15cKF0rKVwoLyl8fFtdKVsxXXx8JyNmdW5jdGlvbic7aWYoYiBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIGIudG9HTVRTdHJpbmcoKTtpZihiLnRvU3RyaW5nJiZiLnRvU3RyaW5nIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyYmIWIudG9TdHJpbmcuX190cmFjZWRfXylyZXR1cm4gYi50b1N0cmluZygpO2lmKGIubm9kZVR5cGUhPT11bmRlZmluZWQpcmV0dXJuIGIudG9TdHJpbmcoKTtjLnB1c2goYik7aD1uZXcgZi5Db2xsZWN0aW9uKGYub2JqZWN0S2V5cyhiLGZhbHNlKS5zb3J0KCkpLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5jb252ZXJ0KGEsYykrJzogJyt0aGlzLmNvbnZlcnQoYlthXSxjKX0sdGhpcykuam9pbignLCAnKTtjLnBvcCgpO3JldHVybiBoPyd7ICcraCsnIH0nOid7fSd9LGZpbHRlckJhY2t0cmFjZTpmdW5jdGlvbihhKXtpZih0aGlzLkJST1dTRVIpe3ZhciBiPW5ldyBSZWdFeHAod2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgvKFwvW15cL10rKS9nLCcoJDEpPycpKycvPycsJ2cnKTtyZXR1cm4gYS5yZXBsYWNlKGIsJycpfWVsc2UgaWYodGhpcy5SSElOTyl7dmFyIGI9amF2YS5sYW5nLlN5c3RlbS5nZXRQcm9wZXJ0eSgndXNlci5kaXInKSsnLyc7cmV0dXJuIGEucmVwbGFjZShuZXcgUmVnRXhwKGIsJ2cnKSwnJyl9ZWxzZSBpZih0aGlzLk5PREUpe3ZhciBiPXByb2Nlc3MuY3dkKCkrJy8nO3JldHVybiBhLnJlcGxhY2UobmV3IFJlZ0V4cChiLCdnJyksJycpfWVsc2UgaWYodHlwZW9mIHZlcnNpb249PT0nZnVuY3Rpb24nJiZ2ZXJzaW9uKCk+MTAwKXtyZXR1cm4nJ31lbHNle3JldHVybiBhfX0sQU5TSV9DU0k6U3RyaW5nLmZyb21DaGFyQ29kZSgweDFCKSsnWycsTUFYX0JVRkZFUl9MRU5HVEg6NzgsQlJPV1NFUjoodHlwZW9mIHdpbmRvdyE9PSd1bmRlZmluZWQnKSxOT0RFOih0eXBlb2YgcHJvY2Vzcz09PSdvYmplY3QnKSxSSElOTzoodHlwZW9mIGphdmEhPT0ndW5kZWZpbmVkJyYmdHlwZW9mIGphdmEubGFuZyE9PSd1bmRlZmluZWQnKSxXSU5ET1pFOih0eXBlb2Ygd2luZG93IT09J3VuZGVmaW5lZCd8fHR5cGVvZiBXU2NyaXB0IT09J3VuZGVmaW5lZCcpLFdTSDoodHlwZW9mIFdTY3JpcHQhPT0ndW5kZWZpbmVkJyksY29sb3Jpbmc6ZnVuY3Rpb24oKXtyZXR1cm4hKHRoaXMuQlJPV1NFUiYmIXdpbmRvdy5ydW50aW1lKSYmIXRoaXMuV0lORE9aRX0sX19idWZmZXJfXzonJyxfX2Zvcm1hdF9fOicnLEVTQ0FQRV9DT0RFUzp7cmVzZXQ6MCxib2xkOjEsbm9ybWFsOjIyLHVuZGVybGluZTo0LG5vbGluZToyNCxibGluazo1LG5vYmxpbms6MjUsYmxhY2s6MzAsYmdibGFjazo0MCxyZWQ6MzEsYmdyZWQ6NDEsZ3JlZW46MzIsYmdncmVlbjo0Mix5ZWxsb3c6MzMsYmd5ZWxsb3c6NDMsYmx1ZTozNCxiZ2JsdWU6NDQsbWFnZW50YTozNSxiZ21hZ2VudGE6NDUsY3lhbjozNixiZ2N5YW46NDYsd2hpdGU6MzcsYmd3aGl0ZTo0Nyxub2NvbG9yOjM5LGJnbm9jb2xvcjo0OX0sZXNjYXBlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLkFOU0lfQ1NJK2F9LHJlcGVhdDpmdW5jdGlvbihhLGIpe3ZhciBjPScnO3doaWxlKGItLSljKz1hO3JldHVybiBjfSxwYWQ6ZnVuY3Rpb24oYSxiKXthPShhPT09dW5kZWZpbmVkPycnOmEpLnRvU3RyaW5nKCk7cmV0dXJuIGErdGhpcy5yZXBlYXQoJyAnLGItYS5sZW5ndGgpfSxmbHVzaEZvcm1hdDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX19mb3JtYXRfXzt0aGlzLl9fZm9ybWF0X189Jyc7cmV0dXJuIGF9LG91dHB1dDpmdW5jdGlvbihhLGIpe3doaWxlKGEubGVuZ3RoPjApe3ZhciBjPXRoaXMuX19idWZmZXJfXy5sZW5ndGgsZj10aGlzLkJST1dTRVI/MTAwMDp0aGlzLk1BWF9CVUZGRVJfTEVOR1RILGg9KGM+MCYmdGhpcy5jb2xvcmluZygpKSxkPWg/dGhpcy5lc2NhcGUoJzFGJykrdGhpcy5lc2NhcGUoKGMrMSkrJ0cnKTonJyxnPWEuc3Vic3RyKDAsZi1jKTt0aGlzLl9fYnVmZmVyX18rPWc7aWYodGhpcy5jb2xvcmluZygpKXRoaXMud3JpdGVUb1N0ZG91dChkK3RoaXMuZmx1c2hGb3JtYXQoKStnKTtlbHNlIGlmKHRoaXMuX19idWZmZXJfXy5sZW5ndGg9PT1mKXRoaXMud3JpdGVUb1N0ZG91dCh0aGlzLl9fYnVmZmVyX18pO2lmKHRoaXMuX19idWZmZXJfXy5sZW5ndGg9PT1mKXRoaXMuX19idWZmZXJfXz0nJzthPWEuc3Vic3RyKGYtYyl9aWYoIWIpe2lmKGE9PT0nJyYmIXRoaXMuX19idWZmZXJfXyl0aGlzLndyaXRlVG9TdGRvdXQodGhpcy5mbHVzaEZvcm1hdCgpKycnKTtpZighdGhpcy5jb2xvcmluZygpJiZ0aGlzLl9fYnVmZmVyX18pdGhpcy53cml0ZVRvU3Rkb3V0KHRoaXMuX19idWZmZXJfXyk7dGhpcy5fX2J1ZmZlcl9fPScnfX0sd3JpdGVUb1N0ZG91dDpmdW5jdGlvbihhKXtpZih0aGlzLkJST1dTRVImJndpbmRvdy5ydW50aW1lKXJldHVybiB3aW5kb3cucnVudGltZS50cmFjZShhKTtpZih0aGlzLk5PREUpcmV0dXJuIGNvbnNvbGUud2FybihhKTtpZih0aGlzLlJISU5PKXJldHVybiBqYXZhLmxhbmcuU3lzdGVtLm91dC5wcmludGxuKGEpO2lmKHRoaXMuV1NIKXJldHVybiBXU2NyaXB0LkVjaG8oYSk7aWYodHlwZW9mIGNvbnNvbGUhPT0ndW5kZWZpbmVkJylyZXR1cm4gY29uc29sZS5sb2coYSk7aWYodHlwZW9mIGFsZXJ0PT09J2Z1bmN0aW9uJylyZXR1cm4gYWxlcnQoYSk7aWYodHlwZW9mIHByaW50PT09J2Z1bmN0aW9uJylyZXR1cm4gcHJpbnQoYSl9fSxjb25zb2xlRm9ybWF0OmZ1bmN0aW9uKCl7aWYoIUpTLkNvbnNvbGUuY29sb3JpbmcoKSlyZXR1cm47dGhpcy5yZXNldCgpO3ZhciBhPWFyZ3VtZW50cy5sZW5ndGg7d2hpbGUoYS0tKXRoaXNbYXJndW1lbnRzW2FdXSgpfSxwdXRzOmZ1bmN0aW9uKGEpe2E9KGE9PT11bmRlZmluZWQ/Jyc6YSkudG9TdHJpbmcoKTt2YXIgYj1KUy5Db25zb2xlO2lmKGIuTk9ERXx8Yi5SSElOTyl7Yi53cml0ZVRvU3Rkb3V0KGIuZmx1c2hGb3JtYXQoKSthKTtiLl9fcHJpbnRfXz1mYWxzZX1lbHNle2Iub3V0cHV0KGEsZmFsc2UpfX0scHJpbnQ6ZnVuY3Rpb24oYSl7YT0oYT09PXVuZGVmaW5lZD8nJzphKS50b1N0cmluZygpO3ZhciBiPUpTLkNvbnNvbGUsYztpZihiLk5PREUpe3RyeXtjPXJlcXVpcmUoJ3V0aWwnKX1jYXRjaChlKXtjPXJlcXVpcmUoJ3N5cycpfWMucHJpbnQoYi5mbHVzaEZvcm1hdCgpK2EpO2IuX19wcmludF9fPXRydWV9ZWxzZSBpZihiLlJISU5PKXtqYXZhLmxhbmcuU3lzdGVtLm91dC5wcmludChiLmZsdXNoRm9ybWF0KCkrYSk7Yi5fX3ByaW50X189dHJ1ZX1lbHNle2Iub3V0cHV0KGEsdHJ1ZSl9fSxwcmludFRhYmxlOmZ1bmN0aW9uKGQsZyl7dmFyIGk9W10sZD1bWydNZXRob2QnLCdDYWxscyddXS5jb25jYXQoZCksbT1KUy5Db25zb2xlLGs9ZC5sZW5ndGgsaixuO3doaWxlKGstLSl7aj1kW2tdLmxlbmd0aDt3aGlsZShqLS0pe2lbal09aVtqXXx8MDtuPShkW2tdW2pdPT09dW5kZWZpbmVkPycnOmRba11bal0pLnRvU3RyaW5nKCk7aVtqXT1NYXRoLm1heChuLmxlbmd0aCxpW2pdKX19dmFyIGw9JysnLGo9aS5sZW5ndGg7d2hpbGUoai0tKWw9JysnK20ucmVwZWF0KCctJyxpW2pdKzIpK2w7bD0nICAnK2w7dGhpcy5yZXNldCgpO3RoaXMucHV0cygpO3RoaXMucHV0cyhsKTt2YXIgbz1mdW5jdGlvbihhLGIpe3ZhciBjPWRbYV07dGhpcy5yZXNldCgpO3RoaXMucHJpbnQoJyAgJyk7Zm9yKHZhciBmPTAsaD1jLmxlbmd0aDtmPGg7ZisrKXt0aGlzLnJlc2V0KCk7dGhpcy5wcmludCgnfCcpO3RoaXMuY29uc29sZUZvcm1hdC5hcHBseSh0aGlzLGIpO3RoaXMucHJpbnQoJyAnK20ucGFkKGNbZl0saVtmXSkrJyAnKX10aGlzLnJlc2V0KCk7dGhpcy5wdXRzKCd8Jyl9O28uY2FsbCh0aGlzLDAsWydib2xkJ10pO3RoaXMucmVzZXQoKTt0aGlzLnB1dHMobCk7Zm9yKHZhciBrPTEscD1kLmxlbmd0aDtrPHA7aysrKXt2YXIgcT1nP2coZFtrXSxrKTpbXTtvLmNhbGwodGhpcyxrLHEpfXRoaXMucmVzZXQoKTt0aGlzLnB1dHMobCl9fSk7KGZ1bmN0aW9uKCl7dmFyIGM9SlMuQ29uc29sZTtmb3IodmFyIGYgaW4gYy5FU0NBUEVfQ09ERVMpKGZ1bmN0aW9uKGIpe2MuZGVmaW5lKGIsZnVuY3Rpb24oKXtpZighSlMuQ29uc29sZS5jb2xvcmluZygpKXJldHVybjt2YXIgYT1jLkVTQ0FQRV9DT0RFU1tiXTtjLl9fZm9ybWF0X18rPWMuZXNjYXBlKGErJ20nKX0pfSkoZik7Yy5leHRlbmQoYyl9KSgpOwovL0Agc291cmNlTWFwcGluZ1VSTD1jb25zb2xlLmpzLm1hcA==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 15:14:01 GMT",
                    "Content-Length": "5419",
                    "Date": "Sat, 08 Nov 2014 15:14:01 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}