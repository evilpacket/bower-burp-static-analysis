{
    "url": "http://localhost:9999/v0lkan/o2.js/reports/coverage/amd/jscoverage.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.search</b> and written to <b>window.open()</b> via the following statements:<ul><li>jscoverage_initTabContents(location.search);</li><li>queryString = queryString.substring(1);</li><li>parameters = queryString.split(/&amp;|;/);</li><li>parameter = parameters[i];</li><li>value = decodeURIComponent(parameter.substr(index + 1));</li><li>windowURL = value;</li><li>window.open(windowURL);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/v0lkan/o2.js/reports/coverage/amd/jscoverage.js",
                "path": "/v0lkan/o2.js/reports/coverage/amd/jscoverage.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC92MGxrYW4vbzIuanMvcmVwb3J0cy9jb3ZlcmFnZS9hbWQvanNjb3ZlcmFnZS5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "ZnVuY3Rpb24gQnJhbmNoRGF0YSgpIHsNCiAgICB0aGlzLnBvc2l0aW9uID0gLTE7DQogICAgdGhpcy5ub2RlTGVuZ3RoID0gLTE7DQogICAgdGhpcy5zcmMgPSBudWxsOw0KICAgIHRoaXMuZXZhbEZhbHNlID0gMDsNCiAgICB0aGlzLmV2YWxUcnVlID0gMDsNCg0KICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBub2RlTGVuZ3RoLCBzcmMpIHsNCiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uOw0KICAgICAgICB0aGlzLm5vZGVMZW5ndGggPSBub2RlTGVuZ3RoOw0KICAgICAgICB0aGlzLnNyYyA9IHNyYzsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgdGhpcy5yYW5Db25kaXRpb24gPSBmdW5jdGlvbihyZXN1bHQpIHsNCiAgICAgICAgaWYgKHJlc3VsdCkNCiAgICAgICAgICAgIHRoaXMuZXZhbFRydWUrKzsNCiAgICAgICAgZWxzZQ0KICAgICAgICAgICAgdGhpcy5ldmFsRmFsc2UrKzsNCiAgICB9Ow0KDQogICAgdGhpcy5wYXRoc0NvdmVyZWQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgdmFyIHBhdGhzID0gMDsNCiAgICAgICAgaWYgKHRoaXMuZXZhbFRydWUgPiAwKQ0KICAgICAgICAgIHBhdGhzKys7DQogICAgICAgIGlmICh0aGlzLmV2YWxGYWxzZSA+IDApDQogICAgICAgICAgcGF0aHMrKzsNCiAgICAgICAgcmV0dXJuIHBhdGhzOw0KICAgIH07DQoNCiAgICB0aGlzLmNvdmVyZWQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZXZhbFRydWUgPiAwICYmIHRoaXMuZXZhbEZhbHNlID4gMDsNCiAgICB9Ow0KDQogICAgdGhpcy50b0pTT04gPSBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuICd7InBvc2l0aW9uIjonICsgdGhpcy5wb3NpdGlvbg0KICAgICAgICAgICAgKyAnLCJub2RlTGVuZ3RoIjonICsgdGhpcy5ub2RlTGVuZ3RoDQogICAgICAgICAgICArICcsInNyYyI6JyArIGpzY292ZXJhZ2VfcXVvdGUodGhpcy5zcmMpDQogICAgICAgICAgICArICcsImV2YWxGYWxzZSI6JyArIHRoaXMuZXZhbEZhbHNlDQogICAgICAgICAgICArICcsImV2YWxUcnVlIjonICsgdGhpcy5ldmFsVHJ1ZSArICd9JzsNCiAgICB9Ow0KDQogICAgdGhpcy5tZXNzYWdlID0gZnVuY3Rpb24oKSB7DQogICAgICAgIGlmICh0aGlzLmV2YWxUcnVlID09PSAwICYmIHRoaXMuZXZhbEZhbHNlID09PSAwKQ0KICAgICAgICAgICAgcmV0dXJuICdDb25kaXRpb24gbmV2ZXIgZXZhbHVhdGVkICAgICAgICAgOlx0JyArIHRoaXMuc3JjOw0KICAgICAgICBlbHNlIGlmICh0aGlzLmV2YWxUcnVlID09PSAwKQ0KICAgICAgICAgICAgcmV0dXJuICdDb25kaXRpb24gbmV2ZXIgZXZhbHVhdGVkIHRvIHRydWUgOlx0JyArIHRoaXMuc3JjOw0KICAgICAgICBlbHNlIGlmICh0aGlzLmV2YWxGYWxzZSA9PT0gMCkNCiAgICAgICAgICAgIHJldHVybiAnQ29uZGl0aW9uIG5ldmVyIGV2YWx1YXRlZCB0byBmYWxzZTpcdCcgKyB0aGlzLnNyYzsNCiAgICAgICAgZWxzZQ0KICAgICAgICAgICAgcmV0dXJuICdDb25kaXRpb24gY292ZXJlZCc7DQogICAgfTsNCn0NCg0KQnJhbmNoRGF0YS5mcm9tSnNvbiA9IGZ1bmN0aW9uKGpzb25TdHJpbmcpIHsNCiAgICB2YXIganNvbiA9IGV2YWwoJygnICsganNvblN0cmluZyArICcpJyk7DQogICAgdmFyIGJyYW5jaERhdGEgPSBuZXcgQnJhbmNoRGF0YSgpOw0KICAgIGJyYW5jaERhdGEuaW5pdChqc29uLnBvc2l0aW9uLCBqc29uLm5vZGVMZW5ndGgsIGpzb24uc3JjKTsNCiAgICBicmFuY2hEYXRhLmV2YWxGYWxzZSA9IGpzb24uZXZhbEZhbHNlOw0KICAgIGJyYW5jaERhdGEuZXZhbFRydWUgPSBqc29uLmV2YWxUcnVlOw0KICAgIHJldHVybiBicmFuY2hEYXRhOw0KfTsNCg0KQnJhbmNoRGF0YS5mcm9tSnNvbk9iamVjdCA9IGZ1bmN0aW9uKGpzb24pIHsNCiAgICB2YXIgYnJhbmNoRGF0YSA9IG5ldyBCcmFuY2hEYXRhKCk7DQogICAgYnJhbmNoRGF0YS5pbml0KGpzb24ucG9zaXRpb24sIGpzb24ubm9kZUxlbmd0aCwganNvbi5zcmMpOw0KICAgIGJyYW5jaERhdGEuZXZhbEZhbHNlID0ganNvbi5ldmFsRmFsc2U7DQogICAgYnJhbmNoRGF0YS5ldmFsVHJ1ZSA9IGpzb24uZXZhbFRydWU7DQogICAgcmV0dXJuIGJyYW5jaERhdGE7DQp9Ow0KDQpmdW5jdGlvbiBidWlsZEJyYW5jaE1lc3NhZ2UoY29uZGl0aW9ucykgew0KICAgIHZhciBtZXNzYWdlID0gJ1RoZSBmb2xsb3dpbmcgd2FzIG5vdCBjb3ZlcmVkOic7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25kaXRpb25zLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIGlmIChjb25kaXRpb25zW2ldICE9PSB1bmRlZmluZWQgJiYgY29uZGl0aW9uc1tpXSAhPT0gbnVsbCAmJiAhY29uZGl0aW9uc1tpXS5jb3ZlcmVkKCkpDQogICAgICAgICAgbWVzc2FnZSArPSAnXG4tICcrIGNvbmRpdGlvbnNbaV0ubWVzc2FnZSgpOw0KICAgIH0NCiAgICByZXR1cm4gbWVzc2FnZTsNCn07DQoNCmZ1bmN0aW9uIGNvbnZlcnRCcmFuY2hEYXRhQ29uZGl0aW9uQXJyYXlUb0pTT04oYnJhbmNoRGF0YUNvbmRpdGlvbkFycmF5KSB7DQogICAgdmFyIGFycmF5ID0gW107DQogICAgdmFyIGxlbmd0aCA9IGJyYW5jaERhdGFDb25kaXRpb25BcnJheS5sZW5ndGg7DQogICAgZm9yICh2YXIgY29uZGl0aW9uID0gMDsgY29uZGl0aW9uIDwgbGVuZ3RoOyBjb25kaXRpb24rKykgew0KICAgICAgICB2YXIgYnJhbmNoRGF0YU9iamVjdCA9IGJyYW5jaERhdGFDb25kaXRpb25BcnJheVtjb25kaXRpb25dOw0KICAgICAgICBpZiAoYnJhbmNoRGF0YU9iamVjdCA9PT0gdW5kZWZpbmVkIHx8IGJyYW5jaERhdGFPYmplY3QgPT09IG51bGwpIHsNCiAgICAgICAgICAgIHZhbHVlID0gJ251bGwnOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdmFsdWUgPSBicmFuY2hEYXRhT2JqZWN0LnRvSlNPTigpOw0KICAgICAgICB9DQogICAgICAgIGFycmF5LnB1c2godmFsdWUpOw0KICAgIH0NCiAgICByZXR1cm4gJ1snICsgYXJyYXkuam9pbignLCcpICsgJ10nOw0KfQ0KDQpmdW5jdGlvbiBjb252ZXJ0QnJhbmNoRGF0YUxpbmVzVG9KU09OKGJyYW5jaERhdGEpIHsNCiAgICBpZiAoYnJhbmNoRGF0YSA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgIHJldHVybiAne30nDQogICAgfQ0KICAgIHZhciBqc29uID0gJyc7DQogICAgZm9yICh2YXIgbGluZSBpbiBicmFuY2hEYXRhKSB7DQogICAgICAgIGlmIChpc05hTihsaW5lKSkNCiAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICBpZiAoanNvbiAhPT0gJycpDQogICAgICAgICAgICBqc29uICs9ICcsJw0KICAgICAgICBqc29uICs9ICciJyArIGxpbmUgKyAnIjonICsgY29udmVydEJyYW5jaERhdGFDb25kaXRpb25BcnJheVRvSlNPTihicmFuY2hEYXRhW2xpbmVdKTsNCiAgICB9DQogICAgcmV0dXJuICd7JyArIGpzb24gKyAnfSc7DQp9DQoNCmZ1bmN0aW9uIGNvbnZlcnRCcmFuY2hEYXRhTGluZXNGcm9tSlNPTihqc29uT2JqZWN0KSB7DQogICAgaWYgKGpzb25PYmplY3QgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICByZXR1cm4ge307DQogICAgfQ0KICAgIGZvciAodmFyIGxpbmUgaW4ganNvbk9iamVjdCkgew0KICAgICAgICB2YXIgYnJhbmNoRGF0YUpTT04gPSBqc29uT2JqZWN0W2xpbmVdOw0KICAgICAgICBpZiAoYnJhbmNoRGF0YUpTT04gIT09IG51bGwpIHsNCiAgICAgICAgICAgIGZvciAodmFyIGNvbmRpdGlvbkluZGV4ID0gMDsgY29uZGl0aW9uSW5kZXggPCBicmFuY2hEYXRhSlNPTi5sZW5ndGg7IGNvbmRpdGlvbkluZGV4ICsrKSB7DQogICAgICAgICAgICAgICAgdmFyIGNvbmRpdGlvbiA9IGJyYW5jaERhdGFKU09OW2NvbmRpdGlvbkluZGV4XTsNCiAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uICE9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIGJyYW5jaERhdGFKU09OW2NvbmRpdGlvbkluZGV4XSA9IEJyYW5jaERhdGEuZnJvbUpzb25PYmplY3QoY29uZGl0aW9uKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIGpzb25PYmplY3Q7DQp9DQpmdW5jdGlvbiBqc2NvdmVyYWdlX3F1b3RlKHMpIHsNCiAgICByZXR1cm4gJyInICsgcy5yZXBsYWNlKC9bXHUwMDAwLVx1MDAxZiJcXFx1MDA3Zi1cdWZmZmZdL2csIGZ1bmN0aW9uIChjKSB7DQogICAgICAgIHN3aXRjaCAoYykgew0KICAgICAgICAgICAgY2FzZSAnXGInOg0KICAgICAgICAgICAgICAgIHJldHVybiAnXFxiJzsNCiAgICAgICAgICAgIGNhc2UgJ1xmJzoNCiAgICAgICAgICAgICAgICByZXR1cm4gJ1xcZic7DQogICAgICAgICAgICBjYXNlICdcbic6DQogICAgICAgICAgICAgICAgcmV0dXJuICdcXG4nOw0KICAgICAgICAgICAgY2FzZSAnXHInOg0KICAgICAgICAgICAgICAgIHJldHVybiAnXFxyJzsNCiAgICAgICAgICAgIGNhc2UgJ1x0JzoNCiAgICAgICAgICAgICAgICByZXR1cm4gJ1xcdCc7DQogICAgICAgICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgdGhpcw0KICAgICAgICAgICAgLyoNCiAgICAgICAgICAgICBjYXNlICdcdic6DQogICAgICAgICAgICAgcmV0dXJuICdcXHYnOw0KICAgICAgICAgICAgICovDQogICAgICAgICAgICBjYXNlICciJzoNCiAgICAgICAgICAgICAgICByZXR1cm4gJ1xcIic7DQogICAgICAgICAgICBjYXNlICdcXCc6DQogICAgICAgICAgICAgICAgcmV0dXJuICdcXFxcJzsNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgcmV0dXJuICdcXHUnICsganNjb3ZlcmFnZV9wYWQoYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSk7DQogICAgICAgIH0NCiAgICB9KSArICciJzsNCn0NCg0KZnVuY3Rpb24gZ2V0QXJyYXlKU09OKGNvdmVyYWdlKSB7DQogICAgdmFyIGFycmF5ID0gW107DQogICAgaWYgKGNvdmVyYWdlID09PSB1bmRlZmluZWQpDQogICAgICAgIHJldHVybiBhcnJheTsNCg0KICAgIHZhciBsZW5ndGggPSBjb3ZlcmFnZS5sZW5ndGg7DQogICAgZm9yICh2YXIgbGluZSA9IDA7IGxpbmUgPCBsZW5ndGg7IGxpbmUrKykgew0KICAgICAgICB2YXIgdmFsdWUgPSBjb3ZlcmFnZVtsaW5lXTsNCiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHsNCiAgICAgICAgICAgIHZhbHVlID0gJ251bGwnOw0KICAgICAgICB9DQogICAgICAgIGFycmF5LnB1c2godmFsdWUpOw0KICAgIH0NCiAgICByZXR1cm4gYXJyYXk7DQp9DQoNCmZ1bmN0aW9uIGpzY292ZXJhZ2Vfc2VyaWFsaXplQ292ZXJhZ2VUb0pTT04oKSB7DQogICAgdmFyIGpzb24gPSBbXTsNCiAgICBmb3IgKHZhciBmaWxlIGluIF8kanNjb3ZlcmFnZSkgew0KICAgICAgICB2YXIgbGluZUFycmF5ID0gZ2V0QXJyYXlKU09OKF8kanNjb3ZlcmFnZVtmaWxlXS5saW5lRGF0YSk7DQogICAgICAgIHZhciBmbkFycmF5ID0gZ2V0QXJyYXlKU09OKF8kanNjb3ZlcmFnZVtmaWxlXS5mdW5jdGlvbkRhdGEpOw0KDQogICAgICAgIGpzb24ucHVzaChqc2NvdmVyYWdlX3F1b3RlKGZpbGUpICsgJzp7ImxpbmVEYXRhIjpbJyArIGxpbmVBcnJheS5qb2luKCcsJykgKyAnXSwiZnVuY3Rpb25EYXRhIjpbJyArIGZuQXJyYXkuam9pbignLCcpICsgJ10sImJyYW5jaERhdGEiOicgKyBjb252ZXJ0QnJhbmNoRGF0YUxpbmVzVG9KU09OKF8kanNjb3ZlcmFnZVtmaWxlXS5icmFuY2hEYXRhKSArICd9Jyk7DQogICAgfQ0KICAgIHJldHVybiAneycgKyBqc29uLmpvaW4oJywnKSArICd9JzsNCn0NCg0KZnVuY3Rpb24ganNjb3ZlcmFnZV9wYXJzZUNvdmVyYWdlSlNPTihkYXRhKSB7DQogICAgdmFyIHJlc3VsdCA9IHt9Ow0KICAgIHZhciBqc29uID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsNCiAgICB2YXIgZmlsZTsNCiAgICBmb3IgKGZpbGUgaW4ganNvbikgew0KICAgICAgICB2YXIgZmlsZUNvdmVyYWdlID0ganNvbltmaWxlXTsNCiAgICAgICAgcmVzdWx0W2ZpbGVdID0ge307DQogICAgICAgIHJlc3VsdFtmaWxlXS5saW5lRGF0YSA9IGZpbGVDb3ZlcmFnZS5saW5lRGF0YTsNCiAgICAgICAgcmVzdWx0W2ZpbGVdLmZ1bmN0aW9uRGF0YSA9IGZpbGVDb3ZlcmFnZS5mdW5jdGlvbkRhdGE7DQogICAgICAgIHJlc3VsdFtmaWxlXS5icmFuY2hEYXRhID0gY29udmVydEJyYW5jaERhdGFMaW5lc0Zyb21KU09OKGZpbGVDb3ZlcmFnZS5icmFuY2hEYXRhKTsNCiAgICB9DQogICAgcmV0dXJuIHJlc3VsdDsNCn0NCg0KZnVuY3Rpb24ganNjb3ZlcmFnZV9wYWQocykgew0KICAgIHJldHVybiAnMDAwMCcuc3Vic3RyKHMubGVuZ3RoKSArIHM7DQp9DQoNCmZ1bmN0aW9uIGpzY292ZXJhZ2VfaHRtbF9lc2NhcGUocykgew0KICAgIHJldHVybiBzLnJlcGxhY2UoL1s8PlwmXCJcJ10vZywgZnVuY3Rpb24gKGMpIHsNCiAgICAgICAgcmV0dXJuICcmIycgKyBjLmNoYXJDb2RlQXQoMCkgKyAnOyc7DQogICAgfSk7DQp9DQovKg0KICAgIGpzY292ZXJhZ2UuanMgLSBjb2RlIGNvdmVyYWdlIGZvciBKYXZhU2NyaXB0DQogICAgQ29weXJpZ2h0IChDKSAyMDA3LCAyMDA4LCAyMDA5LCAyMDEwIHNpbGljb25mb3Jrcy5jb20NCg0KICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5DQogICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkNCiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAyIG9mIHRoZSBMaWNlbnNlLCBvcg0KICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uDQoNCiAgICBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwNCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZg0KICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUNCiAgICBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLg0KDQogICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcNCiAgICB3aXRoIHRoaXMgcHJvZ3JhbTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBJbmMuLA0KICAgIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0EuDQoqLw0KDQovKioNCkluaXRpYWxpemVzIHRoZSBfJGpzY292ZXJhZ2Ugb2JqZWN0IGluIGEgd2luZG93LiAgVGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0DQpmdW5jdGlvbiBjYWxsZWQgaW4gdGhlIHBhZ2UuDQpAcGFyYW0gIHcgIHRoaXMgc2hvdWxkIGFsd2F5cyBiZSB0aGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QNCiovDQpmdW5jdGlvbiBqc2NvdmVyYWdlX2luaXQodykgew0KICB0cnkgew0KICAgIC8vIGluIFNhZmFyaSwgImltcG9ydCIgaXMgYSBzeW50YXggZXJyb3INCiAgICBDb21wb25lbnRzLnV0aWxzWydpbXBvcnQnXSgncmVzb3VyY2U6Ly9hcHAvbW9kdWxlcy9qc2NvdmVyYWdlLmpzbScpOw0KICAgIGpzY292ZXJhZ2VfaXNJbnZlcnRlZE1vZGUgPSB0cnVlOw0KICAgIHJldHVybjsNCiAgfQ0KICBjYXRjaCAoZSkge30NCg0KICAvLyBjaGVjayBpZiB3ZSBhcmUgaW4gaW52ZXJ0ZWQgbW9kZQ0KICBpZiAody5vcGVuZXIpIHsNCiAgICB0cnkgew0KICAgICAgaWYgKHcub3BlbmVyLnRvcC5fJGpzY292ZXJhZ2UpIHsNCiAgICAgICAganNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSA9IHRydWU7DQogICAgICAgIGlmICghIHcuXyRqc2NvdmVyYWdlKSB7DQogICAgICAgICAgdy5fJGpzY292ZXJhZ2UgPSB3Lm9wZW5lci50b3AuXyRqc2NvdmVyYWdlOw0KICAgICAgICB9DQogICAgICB9DQogICAgICBlbHNlIHsNCiAgICAgICAganNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSA9IGZhbHNlOw0KICAgICAgfQ0KICAgIH0NCiAgICBjYXRjaCAoZSkgew0KICAgICAgdHJ5IHsNCiAgICAgICAgaWYgKHcub3BlbmVyLl8kanNjb3ZlcmFnZSkgew0KICAgICAgICAgIGpzY292ZXJhZ2VfaXNJbnZlcnRlZE1vZGUgPSB0cnVlOw0KICAgICAgICAgIGlmICghIHcuXyRqc2NvdmVyYWdlKSB7DQogICAgICAgICAgICB3Ll8kanNjb3ZlcmFnZSA9IHcub3BlbmVyLl8kanNjb3ZlcmFnZTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAganNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSA9IGZhbHNlOw0KICAgICAgICB9DQogICAgICB9DQogICAgICBjYXRjaCAoZTIpIHsNCiAgICAgICAganNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSA9IGZhbHNlOw0KICAgICAgfQ0KICAgIH0NCiAgfQ0KICBlbHNlIHsNCiAgICBqc2NvdmVyYWdlX2lzSW52ZXJ0ZWRNb2RlID0gZmFsc2U7DQogIH0NCg0KICBpZiAoISBqc2NvdmVyYWdlX2lzSW52ZXJ0ZWRNb2RlKSB7DQogICAgaWYgKCEgdy5fJGpzY292ZXJhZ2UpIHsNCiAgICAgIHcuXyRqc2NvdmVyYWdlID0ge307DQogICAgfQ0KICB9DQp9DQoNCnZhciBqc2NvdmVyYWdlX2N1cnJlbnRGaWxlID0gbnVsbDsNCnZhciBqc2NvdmVyYWdlX2N1cnJlbnRMaW5lID0gbnVsbDsNCg0KdmFyIGpzY292ZXJhZ2VfaW5MZW5ndGh5T3BlcmF0aW9uID0gZmFsc2U7DQoNCi8qDQpQb3NzaWJsZSBzdGF0ZXM6DQoJCQlpc0ludmVydGVkTW9kZQlpc1NlcnZlcglpc1JlcG9ydAl0YWJzDQpub3JtYWwJCQlmYWxzZQkJZmFsc2UJCWZhbHNlCQlCcm93c2VyDQppbnZlcnRlZAkJdHJ1ZQkJZmFsc2UJCWZhbHNlDQpzZXJ2ZXIsIG5vcm1hbAkJZmFsc2UJCXRydWUJCWZhbHNlCQlCcm93c2VyLCBTdG9yZQ0Kc2VydmVyLCBpbnZlcnRlZAl0cnVlCQl0cnVlCQlmYWxzZQkJU3RvcmUNCnJlcG9ydAkJCWZhbHNlCQlmYWxzZQkJdHJ1ZQ0KKi8NCnZhciBqc2NvdmVyYWdlX2lzSW52ZXJ0ZWRNb2RlID0gZmFsc2U7DQp2YXIganNjb3ZlcmFnZV9pc1NlcnZlciA9IGZhbHNlOw0KdmFyIGpzY292ZXJhZ2VfaXNSZXBvcnQgPSBmYWxzZTsNCg0KanNjb3ZlcmFnZV9pbml0KHdpbmRvdyk7DQoNCmZ1bmN0aW9uIGpzY292ZXJhZ2VfY3JlYXRlUmVxdWVzdCgpIHsNCiAgLy8gTm90ZSB0aGF0IHRoZSBJRTcgWE1MSHR0cFJlcXVlc3QgZG9lcyBub3Qgc3VwcG9ydCBmaWxlIFVSTCdzLg0KICAvLyBodHRwOi8veGhhYi5ibG9nc3BvdC5jb20vMjAwNi8xMS9pZTctc3VwcG9ydC1mb3IteG1saHR0cHJlcXVlc3QuaHRtbA0KICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vaWUvYXJjaGl2ZS8yMDA2LzEyLzA2L2ZpbGUtdXJpcy1pbi13aW5kb3dzLmFzcHgNCi8vI0pTQ09WRVJBR0VfSUYNCiAgaWYgKHdpbmRvdy5BY3RpdmVYT2JqZWN0KSB7DQogICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCJNaWNyb3NvZnQuWE1MSFRUUCIpOw0KICB9DQogIGVsc2Ugew0KICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTsNCiAgfQ0KfQ0KDQovLyBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2ZpbmRwb3MuaHRtbA0KZnVuY3Rpb24ganNjb3ZlcmFnZV9maW5kUG9zKG9iaikgew0KICB2YXIgcmVzdWx0ID0gMDsNCiAgZG8gew0KICAgIHJlc3VsdCArPSBvYmoub2Zmc2V0VG9wOw0KICAgIG9iaiA9IG9iai5vZmZzZXRQYXJlbnQ7DQogIH0NCiAgd2hpbGUgKG9iaik7DQogIHJldHVybiByZXN1bHQ7DQp9DQoNCi8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvdmlld3BvcnQvY29tcGF0aWJpbGl0eS5odG1sDQpmdW5jdGlvbiBqc2NvdmVyYWdlX2dldFZpZXdwb3J0SGVpZ2h0KCkgew0KLy8jSlNDT1ZFUkFHRV9JRiAvTVNJRS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KQ0KICBpZiAoc2VsZi5pbm5lckhlaWdodCkgew0KICAgIC8vIGFsbCBleGNlcHQgRXhwbG9yZXINCiAgICByZXR1cm4gc2VsZi5pbm5lckhlaWdodDsNCiAgfQ0KICBlbHNlIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCkgew0KICAgIC8vIEV4cGxvcmVyIDYgU3RyaWN0IE1vZGUNCiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDsNCiAgfQ0KICBlbHNlIGlmIChkb2N1bWVudC5ib2R5KSB7DQogICAgLy8gb3RoZXIgRXhwbG9yZXJzDQogICAgcmV0dXJuIGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0Ow0KICB9DQogIGVsc2Ugew0KICAgIHRocm93ICJDb3VsZG4ndCBjYWxjdWxhdGUgdmlld3BvcnQgaGVpZ2h0IjsNCiAgfQ0KLy8jSlNDT1ZFUkFHRV9FTkRJRg0KfQ0KDQovKioNCkluZGljYXRlcyB2aXN1YWxseSB0aGF0IGEgbGVuZ3RoeSBvcGVyYXRpb24gaGFzIGJlZ3VuLiAgVGhlIHByb2dyZXNzIGJhciBpcw0KZGlzcGxheWVkLCBhbmQgdGhlIGN1cnNvciBpcyBjaGFuZ2VkIHRvIGJ1c3kgKG9uIGJyb3dzZXJzIHdoaWNoIHN1cHBvcnQgdGhpcykuDQoqLw0KZnVuY3Rpb24ganNjb3ZlcmFnZV9iZWdpbkxlbmd0aHlPcGVyYXRpb24oKSB7DQogIGpzY292ZXJhZ2VfaW5MZW5ndGh5T3BlcmF0aW9uID0gdHJ1ZTsNCg0KICB2YXIgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NCYXInKTsNCiAgcHJvZ3Jlc3NCYXIuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJzsNCiAgUHJvZ3Jlc3NCYXIuc2V0UGVyY2VudGFnZShwcm9ncmVzc0JhciwgMCk7DQogIHZhciBwcm9ncmVzc0xhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzTGFiZWwnKTsNCiAgcHJvZ3Jlc3NMYWJlbC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnOw0KDQogIC8qIGJsYWNrbGlzdCBidWdneSBicm93c2VycyAqLw0KLy8jSlNDT1ZFUkFHRV9JRg0KICBpZiAoISAvT3BlcmF8V2ViS2l0Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7DQogICAgLyoNCiAgICBDaGFuZ2UgdGhlIGN1cnNvciBzdHlsZSBvZiBlYWNoIGVsZW1lbnQuICBOb3RlIHRoYXQgY2hhbmdpbmcgdGhlIGNsYXNzIG9mIHRoZQ0KICAgIGVsZW1lbnQgKHRvIG9uZSB3aXRoIGEgYnVzeSBjdXJzb3IpIGlzIGJ1Z2d5IGluIElFLg0KICAgICovDQogICAgdmFyIHRhYnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFicycpLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKTsNCiAgICB2YXIgaTsNCiAgICBmb3IgKGkgPSAwOyBpIDwgdGFicy5sZW5ndGg7IGkrKykgew0KICAgICAgdGFicy5pdGVtKGkpLnN0eWxlLmN1cnNvciA9ICd3YWl0JzsNCiAgICB9DQogIH0NCn0NCg0KLyoqDQpSZW1vdmVzIHRoZSBwcm9ncmVzcyBiYXIgYW5kIGJ1c3kgY3Vyc29yLg0KKi8NCmZ1bmN0aW9uIGpzY292ZXJhZ2VfZW5kTGVuZ3RoeU9wZXJhdGlvbigpIHsNCiAgdmFyIHByb2dyZXNzQmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzQmFyJyk7DQogIFByb2dyZXNzQmFyLnNldFBlcmNlbnRhZ2UocHJvZ3Jlc3NCYXIsIDEwMCk7DQogIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7DQogICAganNjb3ZlcmFnZV9pbkxlbmd0aHlPcGVyYXRpb24gPSBmYWxzZTsNCiAgICBwcm9ncmVzc0Jhci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7DQogICAgdmFyIHByb2dyZXNzTGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NMYWJlbCcpOw0KICAgIC8vcHJvZ3Jlc3NMYWJlbC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7DQogICAgcHJvZ3Jlc3NMYWJlbC5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9ImZhZGVUb0JhY2tncm91bmQiPkRvbmU8L3NwYW4+JzsNCg0KICAgIHZhciB0YWJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYnMnKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2Jyk7DQogICAgdmFyIGk7DQogICAgZm9yIChpID0gMDsgaSA8IHRhYnMubGVuZ3RoOyBpKyspIHsNCiAgICAgIHRhYnMuaXRlbShpKS5zdHlsZS5jdXJzb3IgPSAnJzsNCiAgICB9DQogIH0sIDUwKTsNCn0NCg0KZnVuY3Rpb24ganNjb3ZlcmFnZV9zZXRTaXplKCkgew0KLy8jSlNDT1ZFUkFHRV9JRiAvTVNJRS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KQ0KICB2YXIgdmlld3BvcnRIZWlnaHQgPSBqc2NvdmVyYWdlX2dldFZpZXdwb3J0SGVpZ2h0KCk7DQoNCiAgLyoNCiAgYm9yZGVyLXRvcC13aWR0aDogICAgIDFweA0KICBwYWRkaW5nLXRvcDogICAgICAgICAxMHB4DQogIHBhZGRpbmctYm90dG9tOiAgICAgIDEwcHgNCiAgYm9yZGVyLWJvdHRvbS13aWR0aDogIDFweA0KICBtYXJnaW4tYm90dG9tOiAgICAgICAxMHB4DQogICAgICAgICAgICAgICAgICAgICAgIC0tLS0NCiAgICAgICAgICAgICAgICAgICAgICAgMzJweA0KICAqLw0KICB2YXIgdGFiUGFnZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFiUGFnZXMnKTsNCiAgdmFyIHRhYlBhZ2VIZWlnaHQgPSAodmlld3BvcnRIZWlnaHQgLSBqc2NvdmVyYWdlX2ZpbmRQb3ModGFiUGFnZXMpIC0gMzIpICsgJ3B4JzsNCiAgdmFyIG5vZGVMaXN0ID0gdGFiUGFnZXMuY2hpbGROb2RlczsNCiAgdmFyIGxlbmd0aCA9IG5vZGVMaXN0Lmxlbmd0aDsNCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgew0KICAgIHZhciBub2RlID0gbm9kZUxpc3QuaXRlbShpKTsNCiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gMSkgew0KICAgICAgY29udGludWU7DQogICAgfQ0KICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gdGFiUGFnZUhlaWdodDsNCiAgfQ0KDQogIHZhciBpZnJhbWVEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWZyYW1lRGl2Jyk7DQogIC8vIG1heSBub3QgZXhpc3QgaWYgd2UgaGF2ZSByZW1vdmVkIHRoZSBmaXJzdCB0YWINCiAgaWYgKGlmcmFtZURpdikgew0KICAgIGlmcmFtZURpdi5zdHlsZS5oZWlnaHQgPSAodmlld3BvcnRIZWlnaHQgLSBqc2NvdmVyYWdlX2ZpbmRQb3MoaWZyYW1lRGl2KSAtIDIxKSArICdweCc7DQogIH0NCg0KICB2YXIgc3VtbWFyeURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdW1tYXJ5RGl2Jyk7DQogIHN1bW1hcnlEaXYuc3R5bGUuaGVpZ2h0ID0gKHZpZXdwb3J0SGVpZ2h0IC0ganNjb3ZlcmFnZV9maW5kUG9zKHN1bW1hcnlEaXYpIC0gMjEpICsgJ3B4JzsNCg0KICB2YXIgc291cmNlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZURpdicpOw0KICBzb3VyY2VEaXYuc3R5bGUuaGVpZ2h0ID0gKHZpZXdwb3J0SGVpZ2h0IC0ganNjb3ZlcmFnZV9maW5kUG9zKHNvdXJjZURpdikgLSAyMSkgKyAncHgnOw0KDQogIHZhciBzdG9yZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9yZURpdicpOw0KICBpZiAoc3RvcmVEaXYpIHsNCiAgICBzdG9yZURpdi5zdHlsZS5oZWlnaHQgPSAodmlld3BvcnRIZWlnaHQgLSBqc2NvdmVyYWdlX2ZpbmRQb3Moc3RvcmVEaXYpIC0gMjEpICsgJ3B4JzsNCiAgfQ0KLy8jSlNDT1ZFUkFHRV9FTkRJRg0KfQ0KDQovKioNClJldHVybnMgdGhlIGJvb2xlYW4gdmFsdWUgb2YgYSBzdHJpbmcuICBWYWx1ZXMgJ2ZhbHNlJywgJ2YnLCAnbm8nLCAnbicsICdvZmYnLA0KYW5kICcwJyAodXBwZXIgb3IgbG93ZXIgY2FzZSkgYXJlIGZhbHNlLg0KQHBhcmFtICBzICB0aGUgc3RyaW5nDQpAcmV0dXJuICBhIGJvb2xlYW4gdmFsdWUNCiovDQpmdW5jdGlvbiBqc2NvdmVyYWdlX2dldEJvb2xlYW5WYWx1ZShzKSB7DQogIHMgPSBzLnRvTG93ZXJDYXNlKCk7DQogIGlmIChzID09PSAnZmFsc2UnIHx8IHMgPT09ICdmJyB8fCBzID09PSAnbm8nIHx8IHMgPT09ICduJyB8fCBzID09PSAnb2ZmJyB8fCBzID09PSAnMCcpIHsNCiAgICByZXR1cm4gZmFsc2U7DQogIH0NCiAgcmV0dXJuIHRydWU7DQp9DQoNCmZ1bmN0aW9uIGpzY292ZXJhZ2VfcmVtb3ZlVGFiKGlkKSB7DQogIHZhciB0YWIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCArICdUYWInKTsNCiAgaWYodGFiKXsNCiAgICAgIHRhYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhYik7DQogIH0NCiAgdmFyIHRhYlBhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCArICdUYWJQYWdlJyk7DQogIGlmKHRhYlBhZ2Upew0KICAgICAgdGFiUGFnZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhYlBhZ2UpOw0KICB9DQp9DQoNCmZ1bmN0aW9uIGpzY292ZXJhZ2VfaXNWYWxpZFVSTCh1cmwpIHsNCiAgLy8gUkZDIDM5ODYNCiAgdmFyIG1hdGNoZXMgPSAvXigoW146XC8/I10rKTopPyhcL1wvKFteXC8/I10qKSk/KFtePyNdKikoXD8oW14jXSopKT8oIyguKikpPy8uZXhlYyh1cmwpOw0KICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkgew0KICAgIHJldHVybiBmYWxzZTsNCiAgfQ0KICB2YXIgc2NoZW1lID0gbWF0Y2hlc1sxXTsNCiAgaWYgKHR5cGVvZiBzY2hlbWUgPT09ICdzdHJpbmcnKSB7DQogICAgc2NoZW1lID0gc2NoZW1lLnRvTG93ZXJDYXNlKCk7DQogICAgcmV0dXJuIHNjaGVtZSA9PT0gJycgfHwgc2NoZW1lID09PSAnZmlsZTonIHx8IHNjaGVtZSA9PT0gJ2h0dHA6JyB8fCBzY2hlbWUgPT09ICdodHRwczonOw0KICB9DQogIHJldHVybiB0cnVlOw0KfQ0KDQovKioNCkluaXRpYWxpemVzIHRoZSBjb250ZW50cyBvZiB0aGUgdGFicy4gIFRoaXMgc2V0cyB0aGUgaW5pdGlhbCB2YWx1ZXMgb2YgdGhlDQppbnB1dCBmaWVsZCBhbmQgaWZyYW1lIGluIHRoZSAiQnJvd3NlciIgdGFiIGFuZCB0aGUgY2hlY2tib3ggaW4gdGhlICJTdW1tYXJ5Ig0KdGFiLg0KQHBhcmFtICBxdWVyeVN0cmluZyAgdGhpcyBzaG91bGQgYWx3YXlzIGJlIGxvY2F0aW9uLnNlYXJjaA0KKi8NCmZ1bmN0aW9uIGpzY292ZXJhZ2VfaW5pdFRhYkNvbnRlbnRzKHF1ZXJ5U3RyaW5nKSB7DQogIHZhciBzaG93TWlzc2luZ0NvbHVtbiA9IGZhbHNlOw0KICB2YXIgdXJsID0gbnVsbDsNCiAgdmFyIHdpbmRvd1VSTCA9IG51bGw7DQogIHZhciBwYXJhbWV0ZXJzLCBwYXJhbWV0ZXIsIGksIGluZGV4LCBuYW1lLCB2YWx1ZTsNCiAgaWYgKHF1ZXJ5U3RyaW5nLmxlbmd0aCA+IDApIHsNCiAgICAvLyBjaG9wIG9mZiB0aGUgcXVlc3Rpb24gbWFyaw0KICAgIHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmcuc3Vic3RyaW5nKDEpOw0KICAgIHBhcmFtZXRlcnMgPSBxdWVyeVN0cmluZy5zcGxpdCgvJnw7Lyk7DQogICAgZm9yIChpID0gMDsgaSA8IHBhcmFtZXRlcnMubGVuZ3RoOyBpKyspIHsNCiAgICAgIHBhcmFtZXRlciA9IHBhcmFtZXRlcnNbaV07DQogICAgICBpbmRleCA9IHBhcmFtZXRlci5pbmRleE9mKCc9Jyk7DQogICAgICBpZiAoaW5kZXggPT09IC0xKSB7DQogICAgICAgIC8vIHN0aWxsIHdvcmtzIHdpdGggb2xkIHN5bnRheA0KICAgICAgICB1cmwgPSBkZWNvZGVVUklDb21wb25lbnQocGFyYW1ldGVyKTsNCiAgICAgIH0NCiAgICAgIGVsc2Ugew0KICAgICAgICBuYW1lID0gcGFyYW1ldGVyLnN1YnN0cigwLCBpbmRleCk7DQogICAgICAgIHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtZXRlci5zdWJzdHIoaW5kZXggKyAxKSk7DQogICAgICAgIGlmIChuYW1lID09PSAnbWlzc2luZycgfHwgbmFtZSA9PT0gJ20nKSB7DQogICAgICAgICAgc2hvd01pc3NpbmdDb2x1bW4gPSBqc2NvdmVyYWdlX2dldEJvb2xlYW5WYWx1ZSh2YWx1ZSk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ3VybCcgfHwgbmFtZSA9PT0gJ3UnIHx8IG5hbWUgPT09ICdmcmFtZScgfHwgbmFtZSA9PT0gJ2YnKSB7DQogICAgICAgICAgdXJsID0gdmFsdWU7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ3dpbmRvdycgfHwgbmFtZSA9PT0gJ3cnKSB7DQogICAgICAgICAgd2luZG93VVJMID0gdmFsdWU7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICB2YXIgY2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hlY2tib3gnKTsNCiAgY2hlY2tib3guY2hlY2tlZCA9IHNob3dNaXNzaW5nQ29sdW1uOw0KICBpZiAoc2hvd01pc3NpbmdDb2x1bW4pIHsNCiAgICBqc2NvdmVyYWdlX2FwcGVuZE1pc3NpbmdDb2x1bW4oKTsNCiAgfQ0KDQogIHZhciBpc1ZhbGlkVVJMID0gZnVuY3Rpb24gKHVybCkgew0KICAgIHZhciByZXN1bHQgPSBqc2NvdmVyYWdlX2lzVmFsaWRVUkwodXJsKTsNCiAgICBpZiAoISByZXN1bHQpIHsNCiAgICAgIGFsZXJ0KCdJbnZhbGlkIFVSTDogJyArIHVybCk7DQogICAgfQ0KICAgIHJldHVybiByZXN1bHQ7DQogIH07DQoNCiAgaWYgKHVybCAhPT0gbnVsbCAmJiBpc1ZhbGlkVVJMKHVybCkpIHsNCiAgICAvLyB0aGlzIHdpbGwgYXV0b21hdGljYWxseSBwcm9wYWdhdGUgdG8gdGhlIGlucHV0IGZpZWxkDQogICAgZnJhbWVzWzBdLmxvY2F0aW9uID0gdXJsOw0KICB9DQogIGVsc2UgaWYgKHdpbmRvd1VSTCAhPT0gbnVsbCAmJiBpc1ZhbGlkVVJMKHdpbmRvd1VSTCkpIHsNCiAgICB3aW5kb3cub3Blbih3aW5kb3dVUkwpOw0KICB9DQoNCiAgLy8gaWYgdGhlIGJyb3dzZXIgdGFiIGlzIGFic2VudCwgd2UgaGF2ZSB0byBpbml0aWFsaXplIHRoZSBzdW1tYXJ5IHRhYg0KICBpZiAoISBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnJvd3NlclRhYicpKSB7DQogICAganNjb3ZlcmFnZV9yZWNhbGN1bGF0ZVN1bW1hcnlUYWIoKTsNCiAgfQ0KfQ0KDQpmdW5jdGlvbiBqc2NvdmVyYWdlX2JvZHlfbG9hZCgpIHsNCiAgdmFyIHByb2dyZXNzQmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzQmFyJyk7DQogIFByb2dyZXNzQmFyLmluaXQocHJvZ3Jlc3NCYXIpOw0KDQogIGZ1bmN0aW9uIHJlcG9ydEVycm9yKGUpIHsNCiAgICBqc2NvdmVyYWdlX2VuZExlbmd0aHlPcGVyYXRpb24oKTsNCiAgICB2YXIgc3VtbWFyeVRocm9iYmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1bW1hcnlUaHJvYmJlcicpOw0KICAgIHN1bW1hcnlUaHJvYmJlci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7DQogICAgdmFyIGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdW1tYXJ5RXJyb3JEaXYnKTsNCiAgICBkaXYuaW5uZXJIVE1MID0gJ0Vycm9yOiAnICsgZTsNCiAgfQ0KDQogIGlmIChqc2NvdmVyYWdlX2lzUmVwb3J0KSB7DQogICAganNjb3ZlcmFnZV9iZWdpbkxlbmd0aHlPcGVyYXRpb24oKTsNCiAgICB2YXIgc3VtbWFyeVRocm9iYmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1bW1hcnlUaHJvYmJlcicpOw0KICAgIHN1bW1hcnlUaHJvYmJlci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnOw0KICAgIHZhciByZXF1ZXN0ID0ganNjb3ZlcmFnZV9jcmVhdGVSZXF1ZXN0KCk7DQogICAgdHJ5IHsNCiAgICAgIHJlcXVlc3Qub3BlbignR0VUJywgJ2pzY292ZXJhZ2UuanNvbicsIHRydWUpOw0KICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkgew0KICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDIwMCkgew0KICAgICAgICAgICAgICB0aHJvdyByZXF1ZXN0LnN0YXR1czsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IHJlcXVlc3QucmVzcG9uc2VUZXh0Ow0KICAgICAgICAgICAgaWYgKHJlc3BvbnNlID09PSAnJykgew0KICAgICAgICAgICAgICB0aHJvdyA0MDQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBfJGpzY292ZXJhZ2UgPSBqc2NvdmVyYWdlX3BhcnNlQ292ZXJhZ2VKU09OKHJlc3BvbnNlKTsNCiAgICAgICAgICAgIGpzY292ZXJhZ2VfcmVjYWxjdWxhdGVTdW1tYXJ5VGFiKCk7DQogICAgICAgICAgICBzdW1tYXJ5VGhyb2JiZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOw0KICAgICAgICAgIH0NCiAgICAgICAgICBjYXRjaCAoZSkgew0KICAgICAgICAgICAgcmVwb3J0RXJyb3IoZSk7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9Ow0KICAgICAgcmVxdWVzdC5zZW5kKG51bGwpOw0KICAgIH0NCiAgICBjYXRjaCAoZSkgew0KICAgICAgcmVwb3J0RXJyb3IoZSk7DQogICAgfQ0KDQogICAganNjb3ZlcmFnZV9yZW1vdmVUYWIoJ2Jyb3dzZXInKTsNCiAgICBqc2NvdmVyYWdlX3JlbW92ZVRhYignc3RvcmUnKTsNCiAgfQ0KICBlbHNlIHsNCiAgICBpZiAoanNjb3ZlcmFnZV9pc0ludmVydGVkTW9kZSkgew0KICAgICAganNjb3ZlcmFnZV9yZW1vdmVUYWIoJ2Jyb3dzZXInKTsNCiAgICB9DQoNCiAgICBpZiAoISBqc2NvdmVyYWdlX2lzU2VydmVyKSB7DQogICAgICBqc2NvdmVyYWdlX3JlbW92ZVRhYignc3RvcmUnKTsNCiAgICB9DQogIH0NCg0KICBqc2NvdmVyYWdlX2luaXRUYWJDb250cm9sKCk7DQoNCiAganNjb3ZlcmFnZV9pbml0VGFiQ29udGVudHMobG9jYXRpb24uc2VhcmNoKTsNCn0NCg0KZnVuY3Rpb24ganNjb3ZlcmFnZV9ib2R5X3Jlc2l6ZSgpIHsNCiAgaWYgKC9NU0lFLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7DQogICAganNjb3ZlcmFnZV9zZXRTaXplKCk7DQogIH0NCn0NCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vIHRhYiAxDQoNCmZ1bmN0aW9uIGpzY292ZXJhZ2VfdXBkYXRlQnJvd3NlcigpIHsNCiAgdmFyIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImxvY2F0aW9uIik7DQogIGZyYW1lc1swXS5sb2NhdGlvbiA9IGlucHV0LnZhbHVlOw0KfQ0KDQpmdW5jdGlvbiBqc2NvdmVyYWdlX29wZW5XaW5kb3coKSB7DQogIHZhciBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2NhdGlvbiIpOw0KICB2YXIgdXJsID0gaW5wdXQudmFsdWU7DQogIHdpbmRvdy5vcGVuKHVybCwnanNjb3ZlcmFnZV93aW5kb3cnKTsNCn0NCg0KZnVuY3Rpb24ganNjb3ZlcmFnZV9pbnB1dF9rZXlwcmVzcyhlKSB7DQogIGlmIChlLmtleUNvZGUgPT09IDEzKSB7DQogICAgaWYgKGUuc2hpZnRLZXkpIHsNCiAgICAgIGpzY292ZXJhZ2Vfb3BlbldpbmRvdygpOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgIGpzY292ZXJhZ2VfdXBkYXRlQnJvd3NlcigpOw0KICAgIH0NCiAgfQ0KfQ0KDQpmdW5jdGlvbiBqc2NvdmVyYWdlX29wZW5JbkZyYW1lQnV0dG9uX2NsaWNrKCkgew0KICBqc2NvdmVyYWdlX3VwZGF0ZUJyb3dzZXIoKTsNCn0NCg0KZnVuY3Rpb24ganNjb3ZlcmFnZV9vcGVuSW5XaW5kb3dCdXR0b25fY2xpY2soKSB7DQogIGpzY292ZXJhZ2Vfb3BlbldpbmRvdygpOw0KfQ0KDQpmdW5jdGlvbiBqc2NvdmVyYWdlX2Jyb3dzZXJfbG9hZCgpIHsNCiAgLyogdXBkYXRlIHRoZSBpbnB1dCBib3ggKi8NCiAgdmFyIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImxvY2F0aW9uIik7DQoNCiAgLyogc29tZXRpbWVzIElFIHNlZW1zIHRvIGZpcmUgdGhpcyBhZnRlciB0aGUgdGFiIGhhcyBiZWVuIHJlbW92ZWQgKi8NCiAgaWYgKGlucHV0KSB7DQogICAgaW5wdXQudmFsdWUgPSBmcmFtZXNbMF0ubG9jYXRpb247DQogIH0NCn0NCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vIHRhYiAyDQoNCmZ1bmN0aW9uIGpzY292ZXJhZ2VfY3JlYXRlSGFuZGxlcihmaWxlLCBsaW5lKSB7DQogIHJldHVybiBmdW5jdGlvbiAoKSB7DQogICAganNjb3ZlcmFnZV9nZXQoZmlsZSwgbGluZSk7DQogICAgcmV0dXJuIGZhbHNlOw0KICB9Ow0KfQ0KDQpmdW5jdGlvbiBqc2NvdmVyYWdlX2NyZWF0ZUxpbmsoZmlsZSwgbGluZSkgew0KICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsNCiAgbGluay5ocmVmID0gJyMnK2ZpbGU7DQogIGxpbmsub25jbGljayA9IGpzY292ZXJhZ2VfY3JlYXRlSGFuZGxlcihmaWxlLCBsaW5lKTsNCg0KICB2YXIgdGV4dDsNCiAgaWYgKGxpbmUpIHsNCiAgICB0ZXh0ID0gbGluZS50b1N0cmluZygpOw0KICB9DQogIGVsc2Ugew0KICAgIHRleHQgPSBmaWxlOw0KICB9DQoNCiAgbGluay5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSk7DQoNCiAgcmV0dXJuIGxpbms7DQp9DQoNCnZhciBzb3J0T3JkZXIgPSAwOw0KdmFyIHNvcnRDb2x1bW4gPSAnQ292ZXJhZ2UnOw0KdmFyIHNvcnRSZU9yZGVyID0gdHJ1ZTsNCnZhciBzb3J0ZWRGaWxlcyA9IG51bGw7DQoNCmZ1bmN0aW9uIGpzY292ZXJhZ2VfcmVjYWxjdWxhdGVTdW1tYXJ5VGFiQnkodHlwZSkgew0KICBzb3J0UmVPcmRlciA9IHRydWU7DQogIGlmIChzb3J0Q29sdW1uICE9PSB0eXBlKQ0KICAgIHNvcnRPcmRlciA9IDE7DQogIHNvcnRDb2x1bW4gPSB0eXBlOw0KICBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU3VtbWFyeVRhYihudWxsKTsNCn0NCg0KZnVuY3Rpb24ganNjb3ZlcmFnZV9yZWNhbGN1bGF0ZVN1bW1hcnlUYWIoY2MpIHsNCiAgdmFyIGNoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoZWNrYm94Jyk7DQogIHZhciBzaG93TWlzc2luZ0NvbHVtbiA9IGNoZWNrYm94LmNoZWNrZWQ7DQoNCiAgaWYgKCEgY2MpIHsNCiAgICBjYyA9IHdpbmRvdy5fJGpzY292ZXJhZ2U7DQogIH0NCiAgaWYgKCEgY2MpIHsNCi8vI0pTQ09WRVJBR0VfSUYgMA0KICAgIHRocm93ICJObyBjb3ZlcmFnZSBpbmZvcm1hdGlvbiBmb3VuZC4iOw0KLy8jSlNDT1ZFUkFHRV9FTkRJRg0KICB9DQoNCiAgdmFyIHRvdGFscyA9IHsgZmlsZXM6MCwgc3RhdGVtZW50czowLCBleGVjdXRlZDowLCBicmFuY2hlczowLCBicmFuY2hlc19jb3ZlcmVkOjAgLCBmdW5jdGlvbnM6MCwgZnVuY3Rpb25zX2NvdmVyZWQ6MCB9Ow0KDQogIHZhciBmaWxlOw0KICB2YXIgZmlsZXMgPSBbXTsNCiAgZm9yIChmaWxlIGluIGNjKSB7DQogICAgZmlsZXMucHVzaChmaWxlKTsNCiAgfQ0KICBpZiAoZmlsZXMubGVuZ3RoID09PSAwKQ0KICAgIHJldHVybjsNCg0KICBpZiAoc29ydFJlT3JkZXIgfHwgZmlsZXMubGVuZ3RoICE9IHNvcnRlZEZpbGVzLmxlbmd0aCkgew0KICAgIHNvcnRlZEZpbGVzID0gZ2V0RmlsZXNTb3J0ZWRCeUNvdmVyYWdlKGZpbGVzKTsNCiAgICBzb3J0T3JkZXIrKzsNCiAgICBzb3J0UmVPcmRlciA9IGZhbHNlOw0KICB9DQogIGZpbGVzID0gc29ydGVkRmlsZXM7DQoNCiAgdmFyIHRib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN1bW1hcnlUYm9keSIpOw0KICB3aGlsZSAodGJvZHkuaGFzQ2hpbGROb2RlcygpKSB7DQogICAgdGJvZHkucmVtb3ZlQ2hpbGQodGJvZHkuZmlyc3RDaGlsZCk7DQogIH0NCg0KDQogIHZhciByb3dDb3VudGVyID0gMDsNCiAgZm9yICh2YXIgZiA9IDA7IGYgPCBmaWxlcy5sZW5ndGg7IGYrKykgew0KICAgIGZpbGUgPSBmaWxlc1tmXTsNCiAgICB2YXIgbGluZU51bWJlcjsNCiAgICB2YXIgbnVtX3N0YXRlbWVudHMgPSAwOw0KICAgIHZhciBudW1fZXhlY3V0ZWQgPSAwOw0KICAgIHZhciBtaXNzaW5nID0gW107DQogICAgdmFyIGZpbGVDQyA9IGNjW2ZpbGVdLmxpbmVEYXRhOw0KICAgIHZhciBsZW5ndGggPSBmaWxlQ0MubGVuZ3RoOw0KICAgIHZhciBjdXJyZW50Q29uZGl0aW9uYWxFbmQgPSAwOw0KICAgIHZhciBjb25kaXRpb25hbHMgPSBudWxsOw0KICAgIGlmIChmaWxlQ0MuY29uZGl0aW9uYWxzKSB7DQogICAgICBjb25kaXRpb25hbHMgPSBmaWxlQ0MuY29uZGl0aW9uYWxzOw0KICAgIH0NCiAgICBmb3IgKGxpbmVOdW1iZXIgPSAwOyBsaW5lTnVtYmVyIDwgbGVuZ3RoOyBsaW5lTnVtYmVyKyspIHsNCiAgICAgIHZhciBuID0gZmlsZUNDW2xpbmVOdW1iZXJdOw0KDQogICAgICBpZiAobGluZU51bWJlciA9PT0gY3VycmVudENvbmRpdGlvbmFsRW5kKSB7DQogICAgICAgIGN1cnJlbnRDb25kaXRpb25hbEVuZCA9IDA7DQogICAgICB9DQogICAgICBlbHNlIGlmIChjdXJyZW50Q29uZGl0aW9uYWxFbmQgPT09IDAgJiYgY29uZGl0aW9uYWxzICYmIGNvbmRpdGlvbmFsc1tsaW5lTnVtYmVyXSkgew0KICAgICAgICBjdXJyZW50Q29uZGl0aW9uYWxFbmQgPSBjb25kaXRpb25hbHNbbGluZU51bWJlcl07DQogICAgICB9DQoNCiAgICAgIGlmIChjdXJyZW50Q29uZGl0aW9uYWxFbmQgIT09IDApIHsNCiAgICAgICAgY29udGludWU7DQogICAgICB9DQoNCiAgICAgIGlmIChuID09PSB1bmRlZmluZWQgfHwgbiA9PT0gbnVsbCkgew0KICAgICAgICBjb250aW51ZTsNCiAgICAgIH0NCg0KICAgICAgaWYgKG4gPT09IDApIHsNCiAgICAgICAgbWlzc2luZy5wdXNoKGxpbmVOdW1iZXIpOw0KICAgICAgfQ0KICAgICAgZWxzZSB7DQogICAgICAgIG51bV9leGVjdXRlZCsrOw0KICAgICAgfQ0KICAgICAgbnVtX3N0YXRlbWVudHMrKzsNCiAgICB9DQoNCiAgICB2YXIgcGVyY2VudGFnZSA9ICggbnVtX3N0YXRlbWVudHMgPT09IDAgPyAwIDogcGFyc2VJbnQoMTAwICogbnVtX2V4ZWN1dGVkIC8gbnVtX3N0YXRlbWVudHMpICk7DQoNCiAgICB2YXIgbnVtX2Z1bmN0aW9ucyA9IDA7DQogICAgdmFyIG51bV9leGVjdXRlZF9mdW5jdGlvbnMgPSAwOw0KICAgIHZhciBmaWxlRnVuY3Rpb25DQyA9IGNjW2ZpbGVdLmZ1bmN0aW9uRGF0YTsNCiAgICBpZiAoZmlsZUZ1bmN0aW9uQ0MpIHsNCiAgICAgICAgbnVtX2Z1bmN0aW9ucyArPSBmaWxlRnVuY3Rpb25DQy5sZW5ndGg7DQogICAgICAgIGZvciAodmFyIGZuTnVtYmVyID0gMDsgZm5OdW1iZXIgPCBmaWxlRnVuY3Rpb25DQy5sZW5ndGg7IGZuTnVtYmVyKyspIHsNCiAgICAgICAgICAgIHZhciBmbkhpdHMgPSBmaWxlRnVuY3Rpb25DQ1tmbk51bWJlcl07DQogICAgICAgICAgICBpZiAoZm5IaXRzICE9PSB1bmRlZmluZWQgJiYgZm5IaXRzICE9PSBudWxsICYmIGZuSGl0cyA+IDApDQogICAgICAgICAgICAgICAgbnVtX2V4ZWN1dGVkX2Z1bmN0aW9ucysrOw0KICAgICAgICB9DQogICAgfQ0KICAgIHZhciBwZXJjZW50YWdlRm4gPSAoIG51bV9mdW5jdGlvbnMgPT09IDAgPyAwIDogcGFyc2VJbnQoMTAwICogbnVtX2V4ZWN1dGVkX2Z1bmN0aW9ucyAvIG51bV9mdW5jdGlvbnMpKTsNCg0KICAgIHZhciBudW1fYnJhbmNoZXMgPSAwOw0KICAgIHZhciBudW1fZXhlY3V0ZWRfYnJhbmNoZXMgPSAwOw0KICAgIHZhciBmaWxlQnJhbmNoQ0MgPSBjY1tmaWxlXS5icmFuY2hEYXRhOw0KICAgIGlmIChmaWxlQnJhbmNoQ0MpIHsNCiAgICAgICAgZm9yICh2YXIgbGluZU51bWJlciBpbiBmaWxlQnJhbmNoQ0MpIHsNCiAgICAgICAgICB2YXIgY29uZGl0aW9ucyA9IGZpbGVCcmFuY2hDQ1tsaW5lTnVtYmVyXTsNCiAgICAgICAgICB2YXIgY292ZXJlZCA9IHVuZGVmaW5lZDsNCiAgICAgICAgICBpZiAoY29uZGl0aW9ucyAhPT0gdW5kZWZpbmVkICYmIGNvbmRpdGlvbnMgIT09IG51bGwgJiYgY29uZGl0aW9ucy5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgY292ZXJlZCA9IHRydWU7DQogICAgICAgICAgICAgIGZvciAodmFyIGNvbmRpdGlvbkluZGV4ID0gMDsgY29uZGl0aW9uSW5kZXggPCBjb25kaXRpb25zLmxlbmd0aDsgY29uZGl0aW9uSW5kZXgrKykgew0KICAgICAgICAgICAgICAgICAgdmFyIGJyYW5jaERhdGEgPSBmaWxlQnJhbmNoQ0NbbGluZU51bWJlcl1bY29uZGl0aW9uSW5kZXhdOw0KICAgICAgICAgICAgICAgICAgaWYgKGJyYW5jaERhdGEgPT09IHVuZGVmaW5lZCB8fCBicmFuY2hEYXRhID09PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgICAgICAgIG51bV9icmFuY2hlcyArPSAyOw0KICAgICAgICAgICAgICAgICAgbnVtX2V4ZWN1dGVkX2JyYW5jaGVzICs9IGJyYW5jaERhdGEucGF0aHNDb3ZlcmVkKCk7DQogICAgICAgICAgICAgICAgICBpZiAoIWJyYW5jaERhdGEuY292ZXJlZCgpKSB7DQogICAgICAgICAgICAgICAgICAgICAgY292ZXJlZCA9IGZhbHNlOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHZhciBwZXJjZW50YWdlQnJhbmNoID0gKCBudW1fYnJhbmNoZXMgPT09IDAgPyAwIDogcGFyc2VJbnQoMTAwICogbnVtX2V4ZWN1dGVkX2JyYW5jaGVzIC8gbnVtX2JyYW5jaGVzKSk7DQogICAgfQ0KDQoNCiAgICB2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidHIiKTsNCiAgICByb3cuY2xhc3NOYW1lID0gKCByb3dDb3VudGVyKysgJSAyID09IDAgPyAib2RkIiA6ICJldmVuIiApOw0KDQogICAgdmFyIGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZCIpOw0KICAgIHJvdy5pZCA9ICJyb3ctIitmaWxlOw0KICAgIGNlbGwuY2xhc3NOYW1lID0gJ2xlZnRDb2x1bW4nOw0KICAgIHZhciBsaW5rID0ganNjb3ZlcmFnZV9jcmVhdGVMaW5rKGZpbGUpOw0KICAgIGNlbGwuYXBwZW5kQ2hpbGQobGluayk7DQoNCiAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7DQoNCiAgICBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGQiKTsNCiAgICBjZWxsLmNsYXNzTmFtZSA9ICdudW1lcmljJzsNCiAgICBjZWxsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG51bV9zdGF0ZW1lbnRzKSk7DQogICAgcm93LmFwcGVuZENoaWxkKGNlbGwpOw0KDQogICAgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRkIik7DQogICAgY2VsbC5jbGFzc05hbWUgPSAnbnVtZXJpYyc7DQogICAgY2VsbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShudW1fZXhlY3V0ZWQpKTsNCiAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7DQoNCiAgICBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGQiKTsNCiAgICBjZWxsLmNsYXNzTmFtZSA9ICdudW1lcmljJzsNCiAgICBjZWxsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG51bV9icmFuY2hlcykpOw0KICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsKTsNCg0KICAgIGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZCIpOw0KICAgIGNlbGwuY2xhc3NOYW1lID0gJ251bWVyaWMnOw0KICAgIGNlbGwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobnVtX2V4ZWN1dGVkX2JyYW5jaGVzKSk7DQogICAgcm93LmFwcGVuZENoaWxkKGNlbGwpOw0KDQogICAgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRkIik7DQogICAgY2VsbC5jbGFzc05hbWUgPSAnbnVtZXJpYyc7DQogICAgY2VsbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShudW1fZnVuY3Rpb25zKSk7DQogICAgcm93LmFwcGVuZENoaWxkKGNlbGwpOw0KDQogICAgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRkIik7DQogICAgY2VsbC5jbGFzc05hbWUgPSAnbnVtZXJpYyc7DQogICAgY2VsbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShudW1fZXhlY3V0ZWRfZnVuY3Rpb25zKSk7DQogICAgcm93LmFwcGVuZENoaWxkKGNlbGwpOw0KDQogICAgLy8gbmV3IGNvdmVyYWdlIHRkIGNvbnRhaW5pbmcgYSBiYXIgZ3JhcGgNCiAgICBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGQiKTsNCiAgICBjZWxsLmNsYXNzTmFtZSA9ICdjb3ZlcmFnZSc7DQogICAgdmFyIHBjdEdyYXBoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IiksDQogICAgICAgIGNvdmVyZWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwNCiAgICAgICAgcGN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpOw0KICAgIHBjdEdyYXBoLmNsYXNzTmFtZSA9ICJwY3RHcmFwaCI7DQogICAgaWYoIG51bV9zdGF0ZW1lbnRzID09PSAwICkgew0KICAgICAgICBjb3ZlcmVkLmNsYXNzTmFtZSA9ICJza2lwcGVkIjsNCiAgICAgICAgcGN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJOL0EiKSk7DQogICAgfSBlbHNlIHsNCiAgICAgICAgY292ZXJlZC5jbGFzc05hbWUgPSAiY292ZXJlZCI7DQogICAgICAgIGNvdmVyZWQuc3R5bGUud2lkdGggPSBwZXJjZW50YWdlICsgInB4IjsNCiAgICAgICAgcGN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHBlcmNlbnRhZ2UgKyAnJScpKTsNCiAgICB9DQogICAgcGN0LmNsYXNzTmFtZSA9ICJwY3QiOw0KICAgIHBjdEdyYXBoLmFwcGVuZENoaWxkKGNvdmVyZWQpOw0KICAgIGNlbGwuYXBwZW5kQ2hpbGQocGN0R3JhcGgpOw0KICAgIGNlbGwuYXBwZW5kQ2hpbGQocGN0KTsNCiAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7DQoNCiAgICAvLyBuZXcgY292ZXJhZ2UgdGQgY29udGFpbmluZyBhIGJyYW5jaCBiYXIgZ3JhcGgNCiAgICBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGQiKTsNCiAgICBjZWxsLmNsYXNzTmFtZSA9ICdjb3ZlcmFnZSc7DQogICAgcGN0R3JhcGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwNCiAgICAgICAgY292ZXJlZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLA0KICAgICAgICBwY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7DQogICAgcGN0R3JhcGguY2xhc3NOYW1lID0gInBjdEdyYXBoIjsNCiAgICBpZihmaWxlQnJhbmNoQ0MgPT09IHVuZGVmaW5lZCB8fCBudW1fYnJhbmNoZXMgPT09IDAgKSB7DQogICAgICAgIGNvdmVyZWQuY2xhc3NOYW1lID0gInNraXBwZWQiOw0KICAgICAgICBwY3QuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIk4vQSIpKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICBjb3ZlcmVkLmNsYXNzTmFtZSA9ICJjb3ZlcmVkIjsNCiAgICAgICAgY292ZXJlZC5zdHlsZS53aWR0aCA9IHBlcmNlbnRhZ2VCcmFuY2ggKyAicHgiOw0KICAgICAgICBwY3QuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocGVyY2VudGFnZUJyYW5jaCArICclJykpOw0KICAgIH0NCiAgICBwY3QuY2xhc3NOYW1lID0gInBjdCI7DQogICAgcGN0R3JhcGguYXBwZW5kQ2hpbGQoY292ZXJlZCk7DQogICAgY2VsbC5hcHBlbmRDaGlsZChwY3RHcmFwaCk7DQogICAgY2VsbC5hcHBlbmRDaGlsZChwY3QpOw0KICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsKTsNCg0KICAgIC8vIG5ldyBjb3ZlcmFnZSB0ZCBjb250YWluaW5nIGEgZnVuY3Rpb24gYmFyIGdyYXBoDQogICAgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRkIik7DQogICAgY2VsbC5jbGFzc05hbWUgPSAnY292ZXJhZ2UnOw0KICAgIHBjdEdyYXBoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IiksDQogICAgICAgIGNvdmVyZWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwNCiAgICAgICAgcGN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpOw0KICAgIHBjdEdyYXBoLmNsYXNzTmFtZSA9ICJwY3RHcmFwaCI7DQogICAgaWYoZmlsZUZ1bmN0aW9uQ0MgPT09IHVuZGVmaW5lZCB8fCBudW1fZnVuY3Rpb25zID09PSAwICkgew0KICAgICAgICBjb3ZlcmVkLmNsYXNzTmFtZSA9ICJza2lwcGVkIjsNCiAgICAgICAgcGN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJOL0EiKSk7DQogICAgfSBlbHNlIHsNCiAgICAgICAgY292ZXJlZC5jbGFzc05hbWUgPSAiY292ZXJlZCI7DQogICAgICAgIGNvdmVyZWQuc3R5bGUud2lkdGggPSBwZXJjZW50YWdlRm4gKyAicHgiOw0KICAgICAgICBwY3QuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocGVyY2VudGFnZUZuICsgJyUnKSk7DQogICAgfQ0KICAgIHBjdC5jbGFzc05hbWUgPSAicGN0IjsNCiAgICBwY3RHcmFwaC5hcHBlbmRDaGlsZChjb3ZlcmVkKTsNCiAgICBjZWxsLmFwcGVuZENoaWxkKHBjdEdyYXBoKTsNCiAgICBjZWxsLmFwcGVuZENoaWxkKHBjdCk7DQogICAgcm93LmFwcGVuZENoaWxkKGNlbGwpOw0KDQogICAgaWYgKHNob3dNaXNzaW5nQ29sdW1uKSB7DQogICAgICBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGQiKTsNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWlzc2luZy5sZW5ndGg7IGkrKykgew0KICAgICAgICBpZiAoaSAhPT0gMCkgew0KICAgICAgICAgIGNlbGwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIiwgIikpOw0KICAgICAgICB9DQogICAgICAgIGxpbmsgPSBqc2NvdmVyYWdlX2NyZWF0ZUxpbmsoZmlsZSwgbWlzc2luZ1tpXSk7DQoNCiAgICAgICAgLy8gZ3JvdXAgY29udGlndW91cyBtaXNzaW5nIGxpbmVzOyBlLmcuLCAxMCwgMTEsIDEyIC0+IDEwLTEyDQogICAgICAgIHZhciBqLCBzdGFydCA9IG1pc3NpbmdbaV07DQogICAgICAgIGZvciAoOzspIHsNCiAgICAgICAgICBqID0gMTsNCiAgICAgICAgICB3aGlsZSAoaSArIGogPCBtaXNzaW5nLmxlbmd0aCAmJiBtaXNzaW5nW2kgKyBqXSA9PSBtaXNzaW5nW2ldICsgaikgew0KICAgICAgICAgICAgaisrOw0KICAgICAgICAgIH0NCiAgICAgICAgICB2YXIgbmV4dG1pc3NpbmcgPSBtaXNzaW5nW2kgKyBqXSwgY3VyID0gbWlzc2luZ1tpXSArIGo7DQogICAgICAgICAgaWYgKGlzTmFOKG5leHRtaXNzaW5nKSkgew0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgfQ0KICAgICAgICAgIHdoaWxlIChjdXIgPCBuZXh0bWlzc2luZyAmJiAhIGZpbGVDQ1tjdXJdKSB7DQogICAgICAgICAgICBjdXIrKzsNCiAgICAgICAgICB9DQogICAgICAgICAgaWYgKGN1ciA8IG5leHRtaXNzaW5nIHx8IGN1ciA+PSBsZW5ndGgpIHsNCiAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgIH0NCiAgICAgICAgICBpICs9IGo7DQogICAgICAgIH0NCiAgICAgICAgaWYgKHN0YXJ0ICE9IG1pc3NpbmdbaV0gfHwgaiA+IDEpIHsNCiAgICAgICAgICBpICs9IGogLSAxOw0KICAgICAgICAgIGxpbmsuaW5uZXJIVE1MICs9ICItIiArIG1pc3NpbmdbaV07DQogICAgICAgIH0NCg0KICAgICAgICBjZWxsLmFwcGVuZENoaWxkKGxpbmspOw0KICAgICAgfQ0KICAgICAgcm93LmFwcGVuZENoaWxkKGNlbGwpOw0KICAgIH0NCg0KICAgIHRib2R5LmFwcGVuZENoaWxkKHJvdyk7DQoNCiAgICB0b3RhbHNbJ2ZpbGVzJ10gKys7DQogICAgdG90YWxzWydzdGF0ZW1lbnRzJ10gKz0gbnVtX3N0YXRlbWVudHM7DQogICAgdG90YWxzWydleGVjdXRlZCddICs9IG51bV9leGVjdXRlZDsNCiAgICB0b3RhbHNbJ2JyYW5jaGVzJ10gKz0gbnVtX2JyYW5jaGVzOw0KICAgIHRvdGFsc1snYnJhbmNoZXNfY292ZXJlZCddICs9IG51bV9leGVjdXRlZF9icmFuY2hlczsNCiAgICB0b3RhbHNbJ2Z1bmN0aW9ucyddICs9IG51bV9mdW5jdGlvbnM7DQogICAgdG90YWxzWydmdW5jdGlvbnNfY292ZXJlZCddICs9IG51bV9leGVjdXRlZF9mdW5jdGlvbnM7DQoNCiAgICAvLyB3cml0ZSB0b3RhbHMgZGF0YSBpbnRvIHN1bW1hcnlUb3RhbHMgcm93DQogICAgdmFyIHRyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN1bW1hcnlUb3RhbHMiKTsNCiAgICBpZiAodHIpIHsNCiAgICAgICAgdmFyIHRkcyA9IHRyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJ0ZCIpOw0KICAgICAgICB0ZHNbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNwYW4iKVsxXS5maXJzdENoaWxkLm5vZGVWYWx1ZSA9IHRvdGFsc1snZmlsZXMnXTsNCiAgICAgICAgdGRzWzFdLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdG90YWxzWydzdGF0ZW1lbnRzJ107DQogICAgICAgIHRkc1syXS5maXJzdENoaWxkLm5vZGVWYWx1ZSA9IHRvdGFsc1snZXhlY3V0ZWQnXTsNCiAgICAgICAgdGRzWzNdLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdG90YWxzWydicmFuY2hlcyddOw0KICAgICAgICB0ZHNbNF0uZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSB0b3RhbHNbJ2JyYW5jaGVzX2NvdmVyZWQnXTsNCiAgICAgICAgdGRzWzVdLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdG90YWxzWydmdW5jdGlvbnMnXTsNCiAgICAgICAgdGRzWzZdLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdG90YWxzWydmdW5jdGlvbnNfY292ZXJlZCddOw0KDQogICAgICAgIHZhciBjb3ZlcmFnZSA9IHBhcnNlSW50KDEwMCAqIHRvdGFsc1snZXhlY3V0ZWQnXSAvIHRvdGFsc1snc3RhdGVtZW50cyddKTsNCiAgICAgICAgaWYoIGlzTmFOKCBjb3ZlcmFnZSApICkgew0KICAgICAgICAgICAgY292ZXJhZ2UgPSAwOw0KICAgICAgICB9DQogICAgICAgIHRkc1s3XS5nZXRFbGVtZW50c0J5VGFnTmFtZSgic3BhbiIpWzBdLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gY292ZXJhZ2UgKyAnJSc7DQogICAgICAgIHRkc1s3XS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZGl2IilbMV0uc3R5bGUud2lkdGggPSBjb3ZlcmFnZSArICdweCc7DQoNCiAgICAgICAgY292ZXJhZ2UgPSAwOw0KICAgICAgICBpZiAoZmlsZUJyYW5jaENDICE9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIGNvdmVyYWdlID0gcGFyc2VJbnQoMTAwICogdG90YWxzWydicmFuY2hlc19jb3ZlcmVkJ10gLyB0b3RhbHNbJ2JyYW5jaGVzJ10pOw0KICAgICAgICAgICAgaWYoIGlzTmFOKCBjb3ZlcmFnZSApICkgew0KICAgICAgICAgICAgICAgIGNvdmVyYWdlID0gMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICB0ZHNbOF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNwYW4iKVswXS5maXJzdENoaWxkLm5vZGVWYWx1ZSA9IGNvdmVyYWdlICsgJyUnOw0KICAgICAgICB0ZHNbOF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoImRpdiIpWzFdLnN0eWxlLndpZHRoID0gY292ZXJhZ2UgKyAncHgnOw0KDQogICAgICAgIGNvdmVyYWdlID0gMDsNCiAgICAgICAgaWYgKGZpbGVGdW5jdGlvbkNDICE9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIGNvdmVyYWdlID0gcGFyc2VJbnQoMTAwICogdG90YWxzWydmdW5jdGlvbnNfY292ZXJlZCddIC8gdG90YWxzWydmdW5jdGlvbnMnXSk7DQogICAgICAgICAgICBpZiggaXNOYU4oIGNvdmVyYWdlICkgKSB7DQogICAgICAgICAgICAgICAgY292ZXJhZ2UgPSAwOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHRkc1s5XS5nZXRFbGVtZW50c0J5VGFnTmFtZSgic3BhbiIpWzBdLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gY292ZXJhZ2UgKyAnJSc7DQogICAgICAgIHRkc1s5XS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZGl2IilbMV0uc3R5bGUud2lkdGggPSBjb3ZlcmFnZSArICdweCc7DQogICAgfQ0KDQogIH0NCiAganNjb3ZlcmFnZV9lbmRMZW5ndGh5T3BlcmF0aW9uKCk7DQp9DQoNCmZ1bmN0aW9uIGdldEZpbGVzU29ydGVkQnlDb3ZlcmFnZShmaWxlc0luKSB7DQogIHZhciB0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdW1tYXJ5VGJvZHkiKTsNCiAgaWYgKHRib2R5LmNoaWxkcmVuLmxlbmd0aCA8IDIpIHsNCiAgICBzb3J0T3JkZXI9MTsNCiAgICByZXR1cm4gZmlsZXNJbjsNCiAgfQ0KICB2YXIgZmlsZXMgPSBbXTsNCiAgZm9yICh2YXIgaT0wO2k8dGJvZHkuY2hpbGRyZW4ubGVuZ3RoO2krKykgew0KICAgIGZpbGVzW2ldID0ge307DQogIAlmaWxlc1tpXS5maWxlID0gdGJvZHkuY2hpbGRyZW5baV0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MOw0KICAJZmlsZXNbaV0ucGVyYyA9IHBhcnNlSW50KHRib2R5LmNoaWxkcmVuW2ldLmNoaWxkcmVuWzddLmNoaWxkcmVuWzFdLmlubmVySFRNTCwgMTApOw0KICAJZmlsZXNbaV0uYnJQZXJjID0gcGFyc2VJbnQodGJvZHkuY2hpbGRyZW5baV0uY2hpbGRyZW5bOF0uY2hpbGRyZW5bMV0uaW5uZXJIVE1MLCAxMCk7DQogIAlmaWxlc1tpXS5mblBlcmMgPSBwYXJzZUludCh0Ym9keS5jaGlsZHJlbltpXS5jaGlsZHJlbls5XS5jaGlsZHJlblsxXS5pbm5lckhUTUwsIDEwKTsNCiAgICBpZiAoaXNOYU4oZmlsZXNbaV0uYnJQZXJjKSkNCiAgICAgIGZpbGVzW2ldLmJyUGVyYyA9IC0xOw0KICAgIGlmIChpc05hTihmaWxlc1tpXS5mblBlcmMpKQ0KICAgICAgZmlsZXNbaV0uZm5QZXJjID0gLTE7DQogIH0NCg0KICBpZiAoc29ydE9yZGVyJTM9PT0xKSB7DQogICAgaWYgKHNvcnRDb2x1bW4gPT0gJ0NvdmVyYWdlJykNCiAgICAgIGZpbGVzLnNvcnQoZnVuY3Rpb24oZmlsZTEsZmlsZTIpIHtyZXR1cm4gZmlsZTEucGVyYy1maWxlMi5wZXJjfSk7DQogICAgZWxzZSBpZiAoc29ydENvbHVtbiA9PSAnQnJhbmNoJykNCiAgICAgIGZpbGVzLnNvcnQoZnVuY3Rpb24oZmlsZTEsZmlsZTIpIHtyZXR1cm4gZmlsZTEuYnJQZXJjLWZpbGUyLmJyUGVyY30pOw0KICAgIGVsc2UgaWYgKHNvcnRDb2x1bW4gPT0gJ0Z1bmN0aW9uJykNCiAgICAgIGZpbGVzLnNvcnQoZnVuY3Rpb24oZmlsZTEsZmlsZTIpIHtyZXR1cm4gZmlsZTEuZm5QZXJjLWZpbGUyLmZuUGVyY30pOw0KICAgIGVsc2UNCiAgICAgIGZpbGVzLnNvcnQoZnVuY3Rpb24oZmlsZTEsZmlsZTIpIHtyZXR1cm4gZmlsZTEuZmlsZT49ZmlsZTIuZmlsZX0pOw0KICB9IGVsc2UgaWYgKHNvcnRPcmRlciUzPT09Mikgew0KICAgICBpZiAoc29ydENvbHVtbiA9PSAnQ292ZXJhZ2UnKQ0KICAgICAgZmlsZXMuc29ydChmdW5jdGlvbihmaWxlMSxmaWxlMikge3JldHVybiBmaWxlMi5wZXJjLWZpbGUxLnBlcmN9KTsNCiAgICAgZWxzZSBpZiAoc29ydENvbHVtbiA9PSAnQnJhbmNoJykNCiAgICAgICBmaWxlcy5zb3J0KGZ1bmN0aW9uKGZpbGUxLGZpbGUyKSB7cmV0dXJuIGZpbGUyLmJyUGVyYy1maWxlMS5iclBlcmN9KTsNCiAgICAgZWxzZSBpZiAoc29ydENvbHVtbiA9PSAnRnVuY3Rpb24nKQ0KICAgICAgIGZpbGVzLnNvcnQoZnVuY3Rpb24oZmlsZTEsZmlsZTIpIHtyZXR1cm4gZmlsZTIuZm5QZXJjLWZpbGUxLmZuUGVyY30pOw0KICAgICBlbHNlDQogICAgICAgZmlsZXMuc29ydChmdW5jdGlvbihmaWxlMSxmaWxlMikge3JldHVybiBmaWxlMi5maWxlPj1maWxlMS5maWxlfSk7DQogIH0gZWxzZSB7DQogICAgICByZXR1cm4gZmlsZXNJbi5zb3J0KCk7DQogIH0NCiAgdmFyIHJlc3VsdCA9IFtdOw0KICBmb3IgKHZhciBpPTA7aTxmaWxlcy5sZW5ndGg7aSsrKSB7DQogICAgcmVzdWx0W2ldID0gZmlsZXNbaV0uZmlsZTsNCiAgfQ0KICByZXR1cm4gcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBqc2NvdmVyYWdlX2FwcGVuZE1pc3NpbmdDb2x1bW4oKSB7DQogIHZhciBoZWFkZXJSb3cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGVhZGVyUm93Jyk7DQogIHZhciBtaXNzaW5nSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTsNCiAgbWlzc2luZ0hlYWRlci5pZCA9ICdtaXNzaW5nSGVhZGVyJzsNCiAgbWlzc2luZ0hlYWRlci5pbm5lckhUTUwgPSAnPGFiYnIgdGl0bGU9Ikxpc3Qgb2Ygc3RhdGVtZW50cyBtaXNzZWQgZHVyaW5nIGV4ZWN1dGlvbiI+TWlzc2luZzwvYWJicj4nOw0KICBoZWFkZXJSb3cuYXBwZW5kQ2hpbGQobWlzc2luZ0hlYWRlcik7DQogIHZhciBzdW1tYXJ5VG90YWxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1bW1hcnlUb3RhbHMnKTsNCiAgdmFyIGVtcHR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTsNCiAgZW1wdHkuaWQgPSAnbWlzc2luZ0NlbGwnOw0KICBzdW1tYXJ5VG90YWxzLmFwcGVuZENoaWxkKGVtcHR5KTsNCn0NCg0KZnVuY3Rpb24ganNjb3ZlcmFnZV9yZW1vdmVNaXNzaW5nQ29sdW1uKCkgew0KICB2YXIgbWlzc2luZ05vZGU7DQogIG1pc3NpbmdOb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pc3NpbmdIZWFkZXInKTsNCiAgbWlzc2luZ05vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtaXNzaW5nTm9kZSk7DQogIG1pc3NpbmdOb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pc3NpbmdDZWxsJyk7DQogIG1pc3NpbmdOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobWlzc2luZ05vZGUpOw0KfQ0KDQpmdW5jdGlvbiBqc2NvdmVyYWdlX2NoZWNrYm94X2NsaWNrKCkgew0KICBpZiAoanNjb3ZlcmFnZV9pbkxlbmd0aHlPcGVyYXRpb24pIHsNCiAgICByZXR1cm4gZmFsc2U7DQogIH0NCiAganNjb3ZlcmFnZV9iZWdpbkxlbmd0aHlPcGVyYXRpb24oKTsNCiAgdmFyIGNoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoZWNrYm94Jyk7DQogIHZhciBzaG93TWlzc2luZ0NvbHVtbiA9IGNoZWNrYm94LmNoZWNrZWQ7DQogIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7DQogICAgaWYgKHNob3dNaXNzaW5nQ29sdW1uKSB7DQogICAgICBqc2NvdmVyYWdlX2FwcGVuZE1pc3NpbmdDb2x1bW4oKTsNCiAgICB9DQogICAgZWxzZSB7DQogICAgICBqc2NvdmVyYWdlX3JlbW92ZU1pc3NpbmdDb2x1bW4oKTsNCiAgICB9DQogICAganNjb3ZlcmFnZV9yZWNhbGN1bGF0ZVN1bW1hcnlUYWIoKTsNCiAgfSwgNTApOw0KICByZXR1cm4gdHJ1ZTsNCn0NCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vIHRhYiAzDQoNCmZ1bmN0aW9uIGpzY292ZXJhZ2VfbWFrZVRhYmxlKGxpbmVzKSB7DQogIHZhciBjb3ZlcmFnZSA9IF8kanNjb3ZlcmFnZVtqc2NvdmVyYWdlX2N1cnJlbnRGaWxlXS5saW5lRGF0YTsNCiAgdmFyIGJyYW5jaERhdGEgPSBfJGpzY292ZXJhZ2VbanNjb3ZlcmFnZV9jdXJyZW50RmlsZV0uYnJhbmNoRGF0YTsNCg0KICAvLyB0aGlzIGNhbiBoYXBwZW4gaWYgdGhlcmUgaXMgYW4gZXJyb3IgaW4gdGhlIG9yaWdpbmFsIEphdmFTY3JpcHQgZmlsZQ0KICBpZiAoISBsaW5lcykgew0KICAgIGxpbmVzID0gW107DQogIH0NCg0KICB2YXIgcm93cyA9IFsnPHRhYmxlIGlkPSJzb3VyY2VUYWJsZSI+J107DQogIHZhciBpID0gMDsNCiAgdmFyIHByb2dyZXNzQmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzQmFyJyk7DQogIHZhciB0YWJsZUhUTUw7DQogIHZhciBjdXJyZW50Q29uZGl0aW9uYWxFbmQgPSAwOw0KDQogIGZ1bmN0aW9uIGpvaW5UYWJsZVJvd3MoKSB7DQogICAgdGFibGVIVE1MID0gcm93cy5qb2luKCcnKTsNCiAgICBQcm9ncmVzc0Jhci5zZXRQZXJjZW50YWdlKHByb2dyZXNzQmFyLCA2MCk7DQogICAgLyoNCiAgICBUaGlzIG1heSBiZSBhIGxvbmcgZGVsYXksIHNvIHNldCBhIHRpbWVvdXQgb2YgMTAwIG1zIHRvIG1ha2Ugc3VyZSB0aGUNCiAgICBkaXNwbGF5IGlzIHVwZGF0ZWQuDQogICAgKi8NCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge2FwcGVuZFRhYmxlKGpzY292ZXJhZ2VfY3VycmVudEZpbGUpO30sIDEwMCk7DQogIH0NCg0KICBmdW5jdGlvbiBhcHBlbmRUYWJsZShqc2NvdmVyYWdlX2N1cnJlbnRGaWxlKSB7DQogICAgdmFyIHNvdXJjZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2VEaXYnKTsNCiAgICBzb3VyY2VEaXYuaW5uZXJIVE1MID0gdGFibGVIVE1MOw0KICAgIFByb2dyZXNzQmFyLnNldFBlcmNlbnRhZ2UocHJvZ3Jlc3NCYXIsIDgwKTsNCiAgICBzZXRUaW1lb3V0KGpzY292ZXJhZ2Vfc2Nyb2xsVG9MaW5lLCAwKTsNCiAgfQ0KDQogIHdoaWxlIChpIDwgbGluZXMubGVuZ3RoKSB7DQogICAgdmFyIGxpbmVOdW1iZXIgPSBpICsgMTsNCg0KICAgIGlmIChsaW5lTnVtYmVyID09PSBjdXJyZW50Q29uZGl0aW9uYWxFbmQpIHsNCiAgICAgIGN1cnJlbnRDb25kaXRpb25hbEVuZCA9IDA7DQogICAgfQ0KICAgIGVsc2UgaWYgKGN1cnJlbnRDb25kaXRpb25hbEVuZCA9PT0gMCAmJiBjb3ZlcmFnZS5jb25kaXRpb25hbHMgJiYgY292ZXJhZ2UuY29uZGl0aW9uYWxzW2xpbmVOdW1iZXJdKSB7DQogICAgICBjdXJyZW50Q29uZGl0aW9uYWxFbmQgPSBjb3ZlcmFnZS5jb25kaXRpb25hbHNbbGluZU51bWJlcl07DQogICAgfQ0KDQogICAgdmFyIHJvdyA9ICc8dHI+JzsNCiAgICByb3cgKz0gJzx0ZCBjbGFzcz0ibnVtZXJpYyI+JyArIGxpbmVOdW1iZXIgKyAnPC90ZD4nOw0KICAgIHZhciB0aW1lc0V4ZWN1dGVkID0gY292ZXJhZ2VbbGluZU51bWJlcl07DQogICAgaWYgKHRpbWVzRXhlY3V0ZWQgIT09IHVuZGVmaW5lZCAmJiB0aW1lc0V4ZWN1dGVkICE9PSBudWxsKSB7DQogICAgICBpZiAoY3VycmVudENvbmRpdGlvbmFsRW5kICE9PSAwKSB7DQogICAgICAgIHJvdyArPSAnPHRkIGNsYXNzPSJ5IG51bWVyaWMiPic7DQogICAgICB9DQogICAgICBlbHNlIGlmICh0aW1lc0V4ZWN1dGVkID09PSAwKSB7DQogICAgICAgIHJvdyArPSAnPHRkIGNsYXNzPSJyIG51bWVyaWMiIGlkPSJsaW5lLScgKyBsaW5lTnVtYmVyICsgJyI+JzsNCiAgICAgIH0NCiAgICAgIGVsc2Ugew0KICAgICAgICByb3cgKz0gJzx0ZCBjbGFzcz0iZyBudW1lcmljIj4nOw0KICAgICAgfQ0KICAgICAgcm93ICs9IHRpbWVzRXhlY3V0ZWQ7DQogICAgICByb3cgKz0gJzwvdGQ+JzsNCiAgICB9DQogICAgZWxzZSB7DQogICAgICByb3cgKz0gJzx0ZD48L3RkPic7DQogICAgfQ0KDQogICAgbGluZU51bWJlciA9ICcnICsgbGluZU51bWJlcjsNCiAgICBpZiAoYnJhbmNoRGF0YSAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgIHZhciBicmFuY2hDbGFzcyA9ICcnOw0KICAgICAgICB2YXIgYnJhbmNoVGV4dCA9ICcmIzE2MDsnOw0KICAgICAgICBpZiAoYnJhbmNoRGF0YVtsaW5lTnVtYmVyXSAhPT0gdW5kZWZpbmVkICYmIGJyYW5jaERhdGFbbGluZU51bWJlcl0gIT09IG51bGwpIHsNCiAgICAgICAgICAgIGJyYW5jaENsYXNzID0gJ2cnOw0KICAgICAgICAgICAgZm9yICh2YXIgY29uZGl0aW9uSW5kZXggPSAwOyBjb25kaXRpb25JbmRleCA8IGJyYW5jaERhdGFbbGluZU51bWJlcl0ubGVuZ3RoOyBjb25kaXRpb25JbmRleCsrKSB7DQogICAgICAgICAgICAgICAgaWYgKGJyYW5jaERhdGFbbGluZU51bWJlcl1bY29uZGl0aW9uSW5kZXhdICE9PSB1bmRlZmluZWQgJiYgYnJhbmNoRGF0YVtsaW5lTnVtYmVyXVtjb25kaXRpb25JbmRleF0gIT09IG51bGwgJiYgIWJyYW5jaERhdGFbbGluZU51bWJlcl1bY29uZGl0aW9uSW5kZXhdLmNvdmVyZWQoKSkgew0KICAgICAgICAgICAgICAgICAgICBicmFuY2hDbGFzcyA9ICdyJzsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0NCiAgICAgICAgaWYgKGJyYW5jaENsYXNzID09PSAncicpIHsNCiAgICAgICAgICAgIGJyYW5jaFRleHQgPSAnPGEgaHJlZj0iIyIgb25jbGljaz0iYWxlcnQoYnVpbGRCcmFuY2hNZXNzYWdlKF8kanNjb3ZlcmFnZVtcJycranNjb3ZlcmFnZV9jdXJyZW50RmlsZSsnXCddLmJyYW5jaERhdGFbXCcnK2xpbmVOdW1iZXIrJ1wnXSkpOyI+aW5mbzwvYT4nOw0KICAgICAgICB9DQogICAgICAgIHJvdyArPSAnPHRkIGNsYXNzPSJudW1lcmljICcrYnJhbmNoQ2xhc3MrJyI+PHByZT4nICsgYnJhbmNoVGV4dCArICc8L3ByZT48L3RkPic7DQogICAgfQ0KDQogICAgcm93ICs9ICc8dGQ+PHByZT4nICsgbGluZXNbaV0gKyAnPC9wcmU+PC90ZD4nOw0KICAgIHJvdyArPSAnPC90cj4nOw0KICAgIHJvdyArPSAnXG4nOw0KICAgIHJvd3NbbGluZU51bWJlcl0gPSByb3c7DQogICAgaSsrOw0KICB9DQogIHJvd3NbaSArIDFdID0gJzwvdGFibGU+JzsNCiAgUHJvZ3Jlc3NCYXIuc2V0UGVyY2VudGFnZShwcm9ncmVzc0JhciwgNDApOw0KICBzZXRUaW1lb3V0KGpvaW5UYWJsZVJvd3MsIDApOw0KfQ0KDQpmdW5jdGlvbiBqc2NvdmVyYWdlX3Njcm9sbFRvTGluZSgpIHsNCiAganNjb3ZlcmFnZV9zZWxlY3RUYWIoJ3NvdXJjZVRhYicpOw0KICBpZiAoISB3aW5kb3cuanNjb3ZlcmFnZV9jdXJyZW50TGluZSkgew0KICAgIGpzY292ZXJhZ2VfZW5kTGVuZ3RoeU9wZXJhdGlvbigpOw0KICAgIHJldHVybjsNCiAgfQ0KICB2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZURpdicpOw0KICBpZiAoanNjb3ZlcmFnZV9jdXJyZW50TGluZSA9PT0gMSkgew0KICAgIGRpdi5zY3JvbGxUb3AgPSAwOw0KICB9DQogIGVsc2Ugew0KICAgIHZhciBjZWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmUtJyArIGpzY292ZXJhZ2VfY3VycmVudExpbmUpOw0KDQogICAgLy8gdGhpcyBtaWdodCBub3QgYmUgdGhlcmUgaWYgdGhlcmUgaXMgYW4gZXJyb3IgaW4gdGhlIG9yaWdpbmFsIEphdmFTY3JpcHQNCiAgICBpZiAoY2VsbCkgew0KICAgICAgdmFyIGRpdk9mZnNldCA9IGpzY292ZXJhZ2VfZmluZFBvcyhkaXYpOw0KICAgICAgdmFyIGNlbGxPZmZzZXQgPSBqc2NvdmVyYWdlX2ZpbmRQb3MoY2VsbCk7DQogICAgICBkaXYuc2Nyb2xsVG9wID0gY2VsbE9mZnNldCAtIGRpdk9mZnNldDsNCiAgICB9DQogIH0NCiAganNjb3ZlcmFnZV9jdXJyZW50TGluZSA9IDA7DQogIGpzY292ZXJhZ2VfZW5kTGVuZ3RoeU9wZXJhdGlvbigpOw0KfQ0KDQovKioNCkxvYWRzIHRoZSBnaXZlbiBmaWxlIChhbmQgb3B0aW9uYWwgbGluZSkgaW4gdGhlIHNvdXJjZSB0YWIuDQoqLw0KZnVuY3Rpb24ganNjb3ZlcmFnZV9nZXQoZmlsZSwgbGluZSkgew0KICBpZiAoanNjb3ZlcmFnZV9pbkxlbmd0aHlPcGVyYXRpb24pIHsNCiAgICByZXR1cm47DQogIH0NCiAganNjb3ZlcmFnZV9iZWdpbkxlbmd0aHlPcGVyYXRpb24oKTsNCiAgc2V0VGltZW91dChmdW5jdGlvbigpIHsNCiAgICB2YXIgc291cmNlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZURpdicpOw0KICAgIHNvdXJjZURpdi5pbm5lckhUTUwgPSAnJzsNCiAgICBqc2NvdmVyYWdlX3NlbGVjdFRhYignc291cmNlVGFiJyk7DQogICAgaWYgKGZpbGUgPT09IGpzY292ZXJhZ2VfY3VycmVudEZpbGUpIHsNCiAgICAgIGpzY292ZXJhZ2VfY3VycmVudExpbmUgPSBsaW5lOw0KICAgICAganNjb3ZlcmFnZV9yZWNhbGN1bGF0ZVNvdXJjZVRhYigpOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgIGlmIChqc2NvdmVyYWdlX2N1cnJlbnRGaWxlID09PSBudWxsKSB7DQogICAgICAgIHZhciB0YWIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlVGFiJyk7DQogICAgICAgIHRhYi5jbGFzc05hbWUgPSAnJzsNCiAgICAgICAgdGFiLm9uY2xpY2sgPSBqc2NvdmVyYWdlX3RhYl9jbGljazsNCiAgICAgIH0NCiAgICAgIGpzY292ZXJhZ2VfY3VycmVudEZpbGUgPSBmaWxlOw0KICAgICAganNjb3ZlcmFnZV9jdXJyZW50TGluZSA9IGxpbmUgfHwgMTsgIC8vIHdoZW4gY2hhbmdpbmcgdGhlIHNvdXJjZSwgYWx3YXlzIHNjcm9sbCB0byB0b3ANCiAgICAgIHZhciBmaWxlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGVEaXYnKTsNCiAgICAgIGZpbGVEaXYuaW5uZXJIVE1MID0ganNjb3ZlcmFnZV9jdXJyZW50RmlsZTsNCiAgICAgIGpzY292ZXJhZ2VfcmVjYWxjdWxhdGVTb3VyY2VUYWIoKTsNCiAgICAgIHJldHVybjsNCiAgICB9DQogIH0sIDUwKTsNCn0NCg0KLyoqDQpDYWxjdWxhdGVzIGNvdmVyYWdlIHN0YXRpc3RpY3MgZm9yIHRoZSBjdXJyZW50IHNvdXJjZSBmaWxlLg0KKi8NCmZ1bmN0aW9uIGpzY292ZXJhZ2VfcmVjYWxjdWxhdGVTb3VyY2VUYWIoKSB7DQogIGlmICghIGpzY292ZXJhZ2VfY3VycmVudEZpbGUpIHsNCiAgICBqc2NvdmVyYWdlX2VuZExlbmd0aHlPcGVyYXRpb24oKTsNCiAgICByZXR1cm47DQogIH0NCiAgdmFyIHByb2dyZXNzTGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NMYWJlbCcpOw0KICBwcm9ncmVzc0xhYmVsLmlubmVySFRNTCA9ICdDYWxjdWxhdGluZyBjb3ZlcmFnZSAuLi4nOw0KICB2YXIgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NCYXInKTsNCiAgUHJvZ3Jlc3NCYXIuc2V0UGVyY2VudGFnZShwcm9ncmVzc0JhciwgMjApOw0KICB2YXIgcmVxdWVzdCA9IGpzY292ZXJhZ2VfY3JlYXRlUmVxdWVzdCgpOw0KICB0cnkgew0KICAgIHZhciByZWxhdGl2ZVVybCA9IGpzY292ZXJhZ2VfY3VycmVudEZpbGU7DQogICAgaWYgKHJlbGF0aXZlVXJsLmNoYXJBdCgwKSAhPT0gJy8nKQ0KICAgICAgcmVsYXRpdmVVcmwgPSAnLycgKyByZWxhdGl2ZVVybDsNCiAgICBpZiAoIWpzY292ZXJhZ2VfaXNTZXJ2ZXIpDQogICAgICByZWxhdGl2ZVVybCA9ICdvcmlnaW5hbC1zcmMnICsgcmVsYXRpdmVVcmw7DQogICAgcmVxdWVzdC5vcGVuKCdHRVQnLCByZWxhdGl2ZVVybCwgdHJ1ZSk7DQogICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCJOb0luc3RydW1lbnQiLCAidHJ1ZSIpOw0KICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlID09PSA0KSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAyMDApIHsNCiAgICAgICAgICAgIHRocm93IHJlcXVlc3Quc3RhdHVzOw0KICAgICAgICAgIH0NCiAgICAgICAgICB2YXIgcmVzcG9uc2UgPSByZXF1ZXN0LnJlc3BvbnNlVGV4dDsNCiAgICAgICAgICB2YXIgZGlzcGxheVNvdXJjZSA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICB2YXIgbGluZXMgPSByZXNwb25zZS5zcGxpdCgvXG4vKTsNCiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykNCiAgICAgICAgICAgICAgICAgIGxpbmVzW2ldID0ganNjb3ZlcmFnZV9odG1sX2VzY2FwZShsaW5lc1tpXSk7DQogICAgICAgICAgICAgIGpzY292ZXJhZ2VfbWFrZVRhYmxlKGxpbmVzKTsNCiAgICAgICAgICB9DQogICAgICAgICAgc2V0VGltZW91dChkaXNwbGF5U291cmNlLCAwKTsNCiAgICAgICAgICBzdW1tYXJ5VGhyb2JiZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOw0KICAgICAgICB9DQogICAgICAgIGNhdGNoIChlKSB7DQogICAgICAgICAgcmVwb3J0RXJyb3IoZSk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9Ow0KICAgIHJlcXVlc3Quc2VuZChudWxsKTsNCiAgfQ0KICBjYXRjaCAoZSkgew0KICAgIHJlcG9ydEVycm9yKGUpOw0KICB9DQp9DQoNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyB0YWJzDQoNCi8qKg0KSW5pdGlhbGl6ZXMgdGhlIHRhYiBjb250cm9sLiAgVGhpcyBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCB3aGVuIHRoZSBkb2N1bWVudCBpcw0KbG9hZGVkLg0KKi8NCmZ1bmN0aW9uIGpzY292ZXJhZ2VfaW5pdFRhYkNvbnRyb2woKSB7DQogIHZhciB0YWJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYnMnKTsNCiAgdmFyIGk7DQogIHZhciBjaGlsZDsNCiAgdmFyIHRhYk51bSA9IDA7DQogIGZvciAoaSA9IDA7IGkgPCB0YWJzLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHsNCiAgICBjaGlsZCA9IHRhYnMuY2hpbGROb2Rlcy5pdGVtKGkpOw0KICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgew0KICAgICAgaWYgKGNoaWxkLmNsYXNzTmFtZSAhPT0gJ2Rpc2FibGVkJykgew0KICAgICAgICBjaGlsZC5vbmNsaWNrID0ganNjb3ZlcmFnZV90YWJfY2xpY2s7DQogICAgICB9DQogICAgICB0YWJOdW0rKzsNCiAgICB9DQogIH0NCiAganNjb3ZlcmFnZV9zZWxlY3RUYWIoMCk7DQp9DQoNCi8qKg0KU2VsZWN0cyBhIHRhYi4NCkBwYXJhbSAgdGFiICB0aGUgaW50ZWdlciBpbmRleCBvZiB0aGUgdGFiICgwLCAxLCAyLCBvciAzKQ0KICAgICAgICAgICAgIE9SDQogICAgICAgICAgICAgdGhlIElEIG9mIHRoZSB0YWIgZWxlbWVudA0KICAgICAgICAgICAgIE9SDQogICAgICAgICAgICAgdGhlIHRhYiBlbGVtZW50IGl0c2VsZg0KKi8NCmZ1bmN0aW9uIGpzY292ZXJhZ2Vfc2VsZWN0VGFiKHRhYikgew0KICBpZiAodHlwZW9mIHRhYiAhPT0gJ251bWJlcicpIHsNCiAgICB0YWIgPSBqc2NvdmVyYWdlX3RhYkluZGV4T2YodGFiKTsNCiAgfQ0KICB2YXIgdGFicyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJzJyk7DQogIHZhciB0YWJQYWdlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJQYWdlcycpOw0KICB2YXIgbm9kZUxpc3Q7DQogIHZhciB0YWJOdW07DQogIHZhciBpOw0KICB2YXIgbm9kZTsNCg0KICBub2RlTGlzdCA9IHRhYnMuY2hpbGROb2RlczsNCiAgdGFiTnVtID0gMDsNCiAgZm9yIChpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7DQogICAgbm9kZSA9IG5vZGVMaXN0Lml0ZW0oaSk7DQogICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IDEpIHsNCiAgICAgIGNvbnRpbnVlOw0KICAgIH0NCg0KICAgIGlmIChub2RlLmNsYXNzTmFtZSAhPT0gJ2Rpc2FibGVkJykgew0KICAgICAgaWYgKHRhYk51bSA9PT0gdGFiKSB7DQogICAgICAgIG5vZGUuY2xhc3NOYW1lID0gJ3NlbGVjdGVkJzsNCiAgICAgIH0NCiAgICAgIGVsc2Ugew0KICAgICAgICBub2RlLmNsYXNzTmFtZSA9ICcnOw0KICAgICAgfQ0KICAgIH0NCiAgICB0YWJOdW0rKzsNCiAgfQ0KDQogIG5vZGVMaXN0ID0gdGFiUGFnZXMuY2hpbGROb2RlczsNCiAgdGFiTnVtID0gMDsNCiAgZm9yIChpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7DQogICAgbm9kZSA9IG5vZGVMaXN0Lml0ZW0oaSk7DQogICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IDEpIHsNCiAgICAgIGNvbnRpbnVlOw0KICAgIH0NCg0KICAgIGlmICh0YWJOdW0gPT09IHRhYikgew0KICAgICAgbm9kZS5jbGFzc05hbWUgPSAnc2VsZWN0ZWQgVGFiUGFnZSc7DQogICAgfQ0KICAgIGVsc2Ugew0KICAgICAgbm9kZS5jbGFzc05hbWUgPSAnVGFiUGFnZSc7DQogICAgfQ0KICAgIHRhYk51bSsrOw0KICB9DQp9DQoNCi8qKg0KUmV0dXJucyBhbiBpbnRlZ2VyICgwLCAxLCAyLCBvciAzKSByZXByZXNlbnRpbmcgdGhlIGluZGV4IG9mIGEgZ2l2ZW4gdGFiLg0KQHBhcmFtICB0YWIgIHRoZSBJRCBvZiB0aGUgdGFiIGVsZW1lbnQNCiAgICAgICAgICAgICBPUg0KICAgICAgICAgICAgIHRoZSB0YWIgZWxlbWVudCBpdHNlbGYNCiovDQpmdW5jdGlvbiBqc2NvdmVyYWdlX3RhYkluZGV4T2YodGFiKSB7DQogIGlmICh0eXBlb2YgdGFiID09PSAnc3RyaW5nJykgew0KICAgIHRhYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYik7DQogIH0NCiAgdmFyIHRhYnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFicycpOw0KICB2YXIgaTsNCiAgdmFyIGNoaWxkOw0KICB2YXIgdGFiTnVtID0gMDsNCiAgZm9yIChpID0gMDsgaSA8IHRhYnMuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgew0KICAgIGNoaWxkID0gdGFicy5jaGlsZE5vZGVzLml0ZW0oaSk7DQogICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7DQogICAgICBpZiAoY2hpbGQgPT09IHRhYikgew0KICAgICAgICByZXR1cm4gdGFiTnVtOw0KICAgICAgfQ0KICAgICAgdGFiTnVtKys7DQogICAgfQ0KICB9DQovLyNKU0NPVkVSQUdFX0lGIDANCiAgdGhyb3cgIlRhYiBub3QgZm91bmQiOw0KLy8jSlNDT1ZFUkFHRV9FTkRJRg0KfQ0KDQpmdW5jdGlvbiBqc2NvdmVyYWdlX3RhYl9jbGljayhlKSB7DQogIGlmIChqc2NvdmVyYWdlX2luTGVuZ3RoeU9wZXJhdGlvbikgew0KICAgIHJldHVybjsNCiAgfQ0KICB2YXIgdGFyZ2V0Ow0KLy8jSlNDT1ZFUkFHRV9JRg0KICBpZiAoZSkgew0KICAgIHRhcmdldCA9IGUudGFyZ2V0Ow0KICB9DQogIGVsc2UgaWYgKHdpbmRvdy5ldmVudCkgew0KICAgIC8vIElFDQogICAgdGFyZ2V0ID0gd2luZG93LmV2ZW50LnNyY0VsZW1lbnQ7DQogIH0NCiAgaWYgKHRhcmdldC5jbGFzc05hbWUgPT09ICdzZWxlY3RlZCcpIHsNCiAgICByZXR1cm47DQogIH0NCiAganNjb3ZlcmFnZV9iZWdpbkxlbmd0aHlPcGVyYXRpb24oKTsNCiAgc2V0VGltZW91dChmdW5jdGlvbigpIHsNCiAgICBpZiAodGFyZ2V0LmlkID09PSAnc3VtbWFyeVRhYicpIHsNCiAgICAgIHZhciB0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdW1tYXJ5VGJvZHkiKTsNCiAgICAgIHdoaWxlICh0Ym9keS5oYXNDaGlsZE5vZGVzKCkpIHsNCiAgICAgICAgdGJvZHkucmVtb3ZlQ2hpbGQodGJvZHkuZmlyc3RDaGlsZCk7DQogICAgICB9DQogICAgfQ0KICAgIGVsc2UgaWYgKHRhcmdldC5pZCA9PT0gJ3NvdXJjZVRhYicpIHsNCiAgICAgIHZhciBzb3VyY2VEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlRGl2Jyk7DQogICAgICBzb3VyY2VEaXYuaW5uZXJIVE1MID0gJyc7DQogICAgfQ0KICAgIGpzY292ZXJhZ2Vfc2VsZWN0VGFiKHRhcmdldCk7DQogICAgaWYgKHRhcmdldC5pZCA9PT0gJ3N1bW1hcnlUYWInKSB7DQogICAgICBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU3VtbWFyeVRhYigpOw0KICAgIH0NCiAgICBlbHNlIGlmICh0YXJnZXQuaWQgPT09ICdzb3VyY2VUYWInKSB7DQogICAgICBqc2NvdmVyYWdlX3JlY2FsY3VsYXRlU291cmNlVGFiKCk7DQogICAgfQ0KICAgIGVsc2Ugew0KICAgICAganNjb3ZlcmFnZV9lbmRMZW5ndGh5T3BlcmF0aW9uKCk7DQogICAgfQ0KICB9LCA1MCk7DQp9DQoNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyBwcm9ncmVzcyBiYXINCg0KdmFyIFByb2dyZXNzQmFyID0gew0KICBpbml0OiBmdW5jdGlvbihlbGVtZW50KSB7DQogICAgZWxlbWVudC5fcGVyY2VudGFnZSA9IDA7DQoNCiAgICAvKiBkb2luZyB0aGlzIHZpYSBKYXZhU2NyaXB0IGNyYXNoZXMgU2FmYXJpICovDQovKg0KICAgIHZhciBwY3RHcmFwaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOw0KICAgIHBjdEdyYXBoLmNsYXNzTmFtZSA9ICdwY3RHcmFwaCc7DQogICAgZWxlbWVudC5hcHBlbmRDaGlsZChwY3RHcmFwaCk7DQogICAgdmFyIGNvdmVyZWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsNCiAgICBjb3ZlcmVkLmNsYXNzTmFtZSA9ICdjb3ZlcmVkJzsNCiAgICBwY3RHcmFwaC5hcHBlbmRDaGlsZChjb3ZlcmVkKTsNCiAgICB2YXIgcGN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOw0KICAgIHBjdC5jbGFzc05hbWUgPSAncGN0JzsNCiAgICBlbGVtZW50LmFwcGVuZENoaWxkKHBjdCk7DQoqLw0KDQogICAgUHJvZ3Jlc3NCYXIuX3VwZGF0ZShlbGVtZW50KTsNCiAgfSwNCiAgc2V0UGVyY2VudGFnZTogZnVuY3Rpb24oZWxlbWVudCwgcGVyY2VudGFnZSkgew0KICAgIGVsZW1lbnQuX3BlcmNlbnRhZ2UgPSBwZXJjZW50YWdlOw0KICAgIFByb2dyZXNzQmFyLl91cGRhdGUoZWxlbWVudCk7DQogIH0sDQogIF91cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsNCiAgICB2YXIgcGN0R3JhcGggPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKS5pdGVtKDApOw0KICAgIHZhciBjb3ZlcmVkID0gcGN0R3JhcGguZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpLml0ZW0oMCk7DQogICAgdmFyIHBjdCA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NwYW4nKS5pdGVtKDApOw0KICAgIHBjdC5pbm5lckhUTUwgPSBlbGVtZW50Ll9wZXJjZW50YWdlLnRvU3RyaW5nKCkgKyAnJSc7DQogICAgY292ZXJlZC5zdHlsZS53aWR0aCA9IGVsZW1lbnQuX3BlcmNlbnRhZ2UgKyAncHgnOw0KICB9DQp9Ow0KDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLy8gcmVwb3J0cw0KDQpmdW5jdGlvbiBqc2NvdmVyYWdlX3N0b3JlQnV0dG9uX2NsaWNrKCkgew0KICBpZiAoanNjb3ZlcmFnZV9pbkxlbmd0aHlPcGVyYXRpb24pIHsNCiAgICByZXR1cm47DQogIH0NCg0KICBqc2NvdmVyYWdlX2JlZ2luTGVuZ3RoeU9wZXJhdGlvbigpOw0KICB2YXIgaW1nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3JlSW1nJyk7DQogIGltZy5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnOw0KDQogIHZhciByZXF1ZXN0ID0ganNjb3ZlcmFnZV9jcmVhdGVSZXF1ZXN0KCk7DQogIHJlcXVlc3Qub3BlbignUE9TVCcsICcvanNjb3ZlcmFnZS1zdG9yZScsIHRydWUpOw0KICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkgew0KICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQpIHsNCiAgICAgIHZhciBtZXNzYWdlOw0KICAgICAgdHJ5IHsNCiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDIwMSAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMjA0KSB7DQogICAgICAgICAgdGhyb3cgcmVxdWVzdC5zdGF0dXM7DQogICAgICAgIH0NCiAgICAgICAgbWVzc2FnZSA9IHJlcXVlc3QucmVzcG9uc2VUZXh0Ow0KICAgICAgfQ0KICAgICAgY2F0Y2ggKGUpIHsNCiAgICAgICAgaWYgKGUudG9TdHJpbmcoKS5zZWFyY2goL15cZHszfSQvKSA9PT0gMCkgew0KICAgICAgICAgIG1lc3NhZ2UgPSBlICsgJzogJyArIHJlcXVlc3QucmVzcG9uc2VUZXh0Ow0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgIG1lc3NhZ2UgPSAnQ291bGQgbm90IGNvbm5lY3QgdG8gc2VydmVyOiAnICsgZTsNCiAgICAgICAgfQ0KICAgICAgfQ0KDQogICAgICBqc2NvdmVyYWdlX2VuZExlbmd0aHlPcGVyYXRpb24oKTsNCiAgICAgIHZhciBpbWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RvcmVJbWcnKTsNCiAgICAgIGltZy5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7DQoNCiAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RvcmVEaXYnKTsNCiAgICAgIGRpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXcgRGF0ZSgpICsgJzogJyArIG1lc3NhZ2UpKTsNCiAgICAgIGRpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKTsNCiAgICB9DQogIH07DQogIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTsNCiAgcmVxdWVzdC5zZW5kKGpzY292ZXJhZ2Vfc2VyaWFsaXplQ292ZXJhZ2VUb0pTT04oKSk7DQp9DQoNCmZ1bmN0aW9uIGpzY292ZXJhZ2Vfc3RvcEJ1dHRvbl9jbGljaygpIHsNCiAgaWYgKGpzY292ZXJhZ2VfaW5MZW5ndGh5T3BlcmF0aW9uKSB7DQogICAgcmV0dXJuOw0KICB9DQoNCiAganNjb3ZlcmFnZV9iZWdpbkxlbmd0aHlPcGVyYXRpb24oKTsNCiAgdmFyIGltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9yZUltZycpOw0KICBpbWcuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJzsNCg0KICB2YXIgcmVxdWVzdCA9IGpzY292ZXJhZ2VfY3JlYXRlUmVxdWVzdCgpOw0KICByZXF1ZXN0Lm9wZW4oJ0dFVCcsICcvc3RvcCcsIHRydWUpOw0KICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkgew0KICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQpIHsNCiAgICAgIHZhciBtZXNzYWdlOw0KICAgICAgdHJ5IHsNCiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDIwMSAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMjA0KSB7DQogICAgICAgICAgdGhyb3cgcmVxdWVzdC5zdGF0dXM7DQogICAgICAgIH0NCiAgICAgICAgbWVzc2FnZSA9IHJlcXVlc3QucmVzcG9uc2VUZXh0Ow0KICAgICAgfQ0KICAgICAgY2F0Y2ggKGUpIHsNCiAgICAgICAgaWYgKGUudG9TdHJpbmcoKS5zZWFyY2goL15cZHszfSQvKSA9PT0gMCkgew0KICAgICAgICAgIG1lc3NhZ2UgPSBlICsgJzogJyArIHJlcXVlc3QucmVzcG9uc2VUZXh0Ow0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgIG1lc3NhZ2UgPSAnQ291bGQgbm90IGNvbm5lY3QgdG8gc2VydmVyOiAnICsgZTsNCiAgICAgICAgfQ0KICAgICAgfQ0KDQogICAgICBqc2NvdmVyYWdlX2VuZExlbmd0aHlPcGVyYXRpb24oKTsNCiAgICAgIHZhciBpbWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RvcmVJbWcnKTsNCiAgICAgIGltZy5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7DQoNCiAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RvcmVEaXYnKTsNCiAgICAgIGRpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXcgRGF0ZSgpICsgJzogJyArIG1lc3NhZ2UpKTsNCiAgICAgIGRpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKTsNCiAgICB9DQogIH07DQogIHJlcXVlc3Quc2VuZCgpOw0KfQ0KCmpzY292ZXJhZ2VfaXNSZXBvcnQgPSB0cnVlOw==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 21:13:49 GMT",
                    "Content-Length": "48010",
                    "Date": "Fri, 07 Nov 2014 21:14:00 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}