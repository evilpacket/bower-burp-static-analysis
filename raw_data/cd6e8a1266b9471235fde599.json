{
    "url": "http://localhost:9999/nbubna/store/dist/app.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Client-side JSON injection (DOM-based)",
    "issueType": 2098032,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based JSON injection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and incorporates this into a string that is parsed as a JSON data structure and then processed by the application. An attacker may be able to use this behavior to construct a URL which, if visited by another application user, will cause arbitrary JSON data to be processed. Depending on the purpose for which this data is used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based JSON injection vulnerabilities is not to parse as JSON any string containing data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the JSON structure in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the JSON when it is parsed.",
    "issueDetail": "The application may be vulnerable to DOM-based client-side JSON injection. Data is read from <b>document.cookie</b> and written to <b>JSON.parse()</b> via the following statements:<ul><li>var date = new Date(),                 key = 'store.local',                 items = {},                 cookies = document.cookie.split(';');</li><li>var c = cookies[i];</li><li>c = c.substring(1, c.length);</li><li>items = JSON.parse(c.substring(key.length+1));</li></ul>Because the data originates from a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability. ",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/nbubna/store/dist/app.js",
                "path": "/nbubna/store/dist/app.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9uYnVibmEvc3RvcmUvZGlzdC9hcHAuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMjk0ODANCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IFNhdCwgMDggTm92IDIwMTQgMTQ6NTI6MTIgR01UDQpMYXN0LU1vZGlmaWVkOiBTYXQsIDA4IE5vdiAyMDE0IDE0OjUyOjEyIEdNVA0KDQo7KGZ1bmN0aW9uKCl7CgovKioKICogUmVxdWlyZSB0aGUgZ2l2ZW4gcGF0aC4KICoKICogQHBhcmFtIHtTdHJpbmd9IHBhdGgKICogQHJldHVybiB7T2JqZWN0fSBleHBvcnRzCiAqIEBhcGkgcHVibGljCiAqLwoKZnVuY3Rpb24gcmVxdWlyZShwYXRoLCBwYXJlbnQsIG9yaWcpIHsKICB2YXIgcmVzb2x2ZWQgPSByZXF1aXJlLnJlc29sdmUocGF0aCk7CgogIC8vIGxvb2t1cCBmYWlsZWQKICBpZiAobnVsbCA9PSByZXNvbHZlZCkgewogICAgb3JpZyA9IG9yaWcgfHwgcGF0aDsKICAgIHBhcmVudCA9IHBhcmVudCB8fCAncm9vdCc7CiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdGYWlsZWQgdG8gcmVxdWlyZSAiJyArIG9yaWcgKyAnIiBmcm9tICInICsgcGFyZW50ICsgJyInKTsKICAgIGVyci5wYXRoID0gb3JpZzsKICAgIGVyci5wYXJlbnQgPSBwYXJlbnQ7CiAgICBlcnIucmVxdWlyZSA9IHRydWU7CiAgICB0aHJvdyBlcnI7CiAgfQoKICB2YXIgbW9kdWxlID0gcmVxdWlyZS5tb2R1bGVzW3Jlc29sdmVkXTsKCiAgLy8gcGVyZm9ybSByZWFsIHJlcXVpcmUoKQogIC8vIGJ5IGludm9raW5nIHRoZSBtb2R1bGUncwogIC8vIHJlZ2lzdGVyZWQgZnVuY3Rpb24KICBpZiAoIW1vZHVsZS5leHBvcnRzKSB7CiAgICBtb2R1bGUuZXhwb3J0cyA9IHt9OwogICAgbW9kdWxlLmNsaWVudCA9IG1vZHVsZS5jb21wb25lbnQgPSB0cnVlOwogICAgbW9kdWxlLmNhbGwodGhpcywgbW9kdWxlLmV4cG9ydHMsIHJlcXVpcmUucmVsYXRpdmUocmVzb2x2ZWQpLCBtb2R1bGUpOwogIH0KCiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzOwp9CgovKioKICogUmVnaXN0ZXJlZCBtb2R1bGVzLgogKi8KCnJlcXVpcmUubW9kdWxlcyA9IHt9OwoKLyoqCiAqIFJlZ2lzdGVyZWQgYWxpYXNlcy4KICovCgpyZXF1aXJlLmFsaWFzZXMgPSB7fTsKCi8qKgogKiBSZXNvbHZlIGBwYXRoYC4KICoKICogTG9va3VwOgogKgogKiAgIC0gUEFUSC9pbmRleC5qcwogKiAgIC0gUEFUSC5qcwogKiAgIC0gUEFUSAogKgogKiBAcGFyYW0ge1N0cmluZ30gcGF0aAogKiBAcmV0dXJuIHtTdHJpbmd9IHBhdGggb3IgbnVsbAogKiBAYXBpIHByaXZhdGUKICovCgpyZXF1aXJlLnJlc29sdmUgPSBmdW5jdGlvbihwYXRoKSB7CiAgaWYgKHBhdGguY2hhckF0KDApID09PSAnLycpIHBhdGggPSBwYXRoLnNsaWNlKDEpOwoKICB2YXIgcGF0aHMgPSBbCiAgICBwYXRoLAogICAgcGF0aCArICcuanMnLAogICAgcGF0aCArICcuanNvbicsCiAgICBwYXRoICsgJy9pbmRleC5qcycsCiAgICBwYXRoICsgJy9pbmRleC5qc29uJwogIF07CgogIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBwYXRoID0gcGF0aHNbaV07CiAgICBpZiAocmVxdWlyZS5tb2R1bGVzLmhhc093blByb3BlcnR5KHBhdGgpKSByZXR1cm4gcGF0aDsKICAgIGlmIChyZXF1aXJlLmFsaWFzZXMuaGFzT3duUHJvcGVydHkocGF0aCkpIHJldHVybiByZXF1aXJlLmFsaWFzZXNbcGF0aF07CiAgfQp9OwoKLyoqCiAqIE5vcm1hbGl6ZSBgcGF0aGAgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcGF0aC4KICoKICogQHBhcmFtIHtTdHJpbmd9IGN1cnIKICogQHBhcmFtIHtTdHJpbmd9IHBhdGgKICogQHJldHVybiB7U3RyaW5nfQogKiBAYXBpIHByaXZhdGUKICovCgpyZXF1aXJlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKGN1cnIsIHBhdGgpIHsKICB2YXIgc2VncyA9IFtdOwoKICBpZiAoJy4nICE9IHBhdGguY2hhckF0KDApKSByZXR1cm4gcGF0aDsKCiAgY3VyciA9IGN1cnIuc3BsaXQoJy8nKTsKICBwYXRoID0gcGF0aC5zcGxpdCgnLycpOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyArK2kpIHsKICAgIGlmICgnLi4nID09IHBhdGhbaV0pIHsKICAgICAgY3Vyci5wb3AoKTsKICAgIH0gZWxzZSBpZiAoJy4nICE9IHBhdGhbaV0gJiYgJycgIT0gcGF0aFtpXSkgewogICAgICBzZWdzLnB1c2gocGF0aFtpXSk7CiAgICB9CiAgfQoKICByZXR1cm4gY3Vyci5jb25jYXQoc2Vncykuam9pbignLycpOwp9OwoKLyoqCiAqIFJlZ2lzdGVyIG1vZHVsZSBhdCBgcGF0aGAgd2l0aCBjYWxsYmFjayBgZGVmaW5pdGlvbmAuCiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoCiAqIEBwYXJhbSB7RnVuY3Rpb259IGRlZmluaXRpb24KICogQGFwaSBwcml2YXRlCiAqLwoKcmVxdWlyZS5yZWdpc3RlciA9IGZ1bmN0aW9uKHBhdGgsIGRlZmluaXRpb24pIHsKICByZXF1aXJlLm1vZHVsZXNbcGF0aF0gPSBkZWZpbml0aW9uOwp9OwoKLyoqCiAqIEFsaWFzIGEgbW9kdWxlIGRlZmluaXRpb24uCiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBmcm9tCiAqIEBwYXJhbSB7U3RyaW5nfSB0bwogKiBAYXBpIHByaXZhdGUKICovCgpyZXF1aXJlLmFsaWFzID0gZnVuY3Rpb24oZnJvbSwgdG8pIHsKICBpZiAoIXJlcXVpcmUubW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShmcm9tKSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gYWxpYXMgIicgKyBmcm9tICsgJyIsIGl0IGRvZXMgbm90IGV4aXN0Jyk7CiAgfQogIHJlcXVpcmUuYWxpYXNlc1t0b10gPSBmcm9tOwp9OwoKLyoqCiAqIFJldHVybiBhIHJlcXVpcmUgZnVuY3Rpb24gcmVsYXRpdmUgdG8gdGhlIGBwYXJlbnRgIHBhdGguCiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBwYXJlbnQKICogQHJldHVybiB7RnVuY3Rpb259CiAqIEBhcGkgcHJpdmF0ZQogKi8KCnJlcXVpcmUucmVsYXRpdmUgPSBmdW5jdGlvbihwYXJlbnQpIHsKICB2YXIgcCA9IHJlcXVpcmUubm9ybWFsaXplKHBhcmVudCwgJy4uJyk7CgogIC8qKgogICAqIGxhc3RJbmRleE9mIGhlbHBlci4KICAgKi8KCiAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyLCBvYmopIHsKICAgIHZhciBpID0gYXJyLmxlbmd0aDsKICAgIHdoaWxlIChpLS0pIHsKICAgICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTsKICAgIH0KICAgIHJldHVybiAtMTsKICB9CgogIC8qKgogICAqIFRoZSByZWxhdGl2ZSByZXF1aXJlKCkgaXRzZWxmLgogICAqLwoKICBmdW5jdGlvbiBsb2NhbFJlcXVpcmUocGF0aCkgewogICAgdmFyIHJlc29sdmVkID0gbG9jYWxSZXF1aXJlLnJlc29sdmUocGF0aCk7CiAgICByZXR1cm4gcmVxdWlyZShyZXNvbHZlZCwgcGFyZW50LCBwYXRoKTsKICB9CgogIC8qKgogICAqIFJlc29sdmUgcmVsYXRpdmUgdG8gdGhlIHBhcmVudC4KICAgKi8KCiAgbG9jYWxSZXF1aXJlLnJlc29sdmUgPSBmdW5jdGlvbihwYXRoKSB7CiAgICB2YXIgYyA9IHBhdGguY2hhckF0KDApOwogICAgaWYgKCcvJyA9PSBjKSByZXR1cm4gcGF0aC5zbGljZSgxKTsKICAgIGlmICgnLicgPT0gYykgcmV0dXJuIHJlcXVpcmUubm9ybWFsaXplKHAsIHBhdGgpOwoKICAgIC8vIHJlc29sdmUgZGVwcyBieSByZXR1cm5pbmcKICAgIC8vIHRoZSBkZXAgaW4gdGhlIG5lYXJlc3QgImRlcHMiCiAgICAvLyBkaXJlY3RvcnkKICAgIHZhciBzZWdzID0gcGFyZW50LnNwbGl0KCcvJyk7CiAgICB2YXIgaSA9IGxhc3RJbmRleE9mKHNlZ3MsICdkZXBzJykgKyAxOwogICAgaWYgKCFpKSBpID0gMDsKICAgIHBhdGggPSBzZWdzLnNsaWNlKDAsIGkgKyAxKS5qb2luKCcvJykgKyAnL2RlcHMvJyArIHBhdGg7CiAgICByZXR1cm4gcGF0aDsKICB9OwoKICAvKioKICAgKiBDaGVjayBpZiBtb2R1bGUgaXMgZGVmaW5lZCBhdCBgcGF0aGAuCiAgICovCgogIGxvY2FsUmVxdWlyZS5leGlzdHMgPSBmdW5jdGlvbihwYXRoKSB7CiAgICByZXR1cm4gcmVxdWlyZS5tb2R1bGVzLmhhc093blByb3BlcnR5KGxvY2FsUmVxdWlyZS5yZXNvbHZlKHBhdGgpKTsKICB9OwoKICByZXR1cm4gbG9jYWxSZXF1aXJlOwp9OwpyZXF1aXJlLnJlZ2lzdGVyKCJzdG9yZS9kaXN0L3N0b3JlMi5qcyIsIGZ1bmN0aW9uKGV4cG9ydHMsIHJlcXVpcmUsIG1vZHVsZSl7Ci8qISBzdG9yZTIgLSB2Mi4xLjYgLSAyMDE0LTA0LTA4CiogQ29weXJpZ2h0IChjKSAyMDE0IE5hdGhhbiBCdWJuYTsgTGljZW5zZWQgTUlULCBHUEwgKi8KOyhmdW5jdGlvbih3aW5kb3csIGRlZmluZSkgewogICAgdmFyIF8gPSB7CiAgICAgICAgdmVyc2lvbjogIjIuMS42IiwKICAgICAgICBhcmVhczoge30sCiAgICAgICAgYXBpczoge30sCgogICAgICAgIC8vIHV0aWxpdGllcwogICAgICAgIGluaGVyaXQ6IGZ1bmN0aW9uKGFwaSwgbykgewogICAgICAgICAgICBmb3IgKHZhciBwIGluIGFwaSkgewogICAgICAgICAgICAgICAgaWYgKCFvLmhhc093blByb3BlcnR5KHApKSB7CiAgICAgICAgICAgICAgICAgICAgb1twXSA9IGFwaVtwXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbzsKICAgICAgICB9LAogICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24oZCkgewogICAgICAgICAgICByZXR1cm4gZCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBkID09PSAiZnVuY3Rpb24iID8gZCsnJyA6IEpTT04uc3RyaW5naWZ5KGQpOwogICAgICAgIH0sCiAgICAgICAgcGFyc2U6IGZ1bmN0aW9uKHMpIHsKICAgICAgICAgICAgLy8gaWYgaXQgZG9lc24ndCBwYXJzZSwgcmV0dXJuIGFzIGlzCiAgICAgICAgICAgIHRyeXsgcmV0dXJuIEpTT04ucGFyc2Uocyk7IH1jYXRjaChlKXsgcmV0dXJuIHM7IH0KICAgICAgICB9LAoKICAgICAgICAvLyBleHRlbnNpb24gaG9va3MKICAgICAgICBmbjogZnVuY3Rpb24obmFtZSwgZm4pIHsKICAgICAgICAgICAgXy5zdG9yZUFQSVtuYW1lXSA9IGZuOwogICAgICAgICAgICBmb3IgKHZhciBhcGkgaW4gXy5hcGlzKSB7CiAgICAgICAgICAgICAgICBfLmFwaXNbYXBpXVtuYW1lXSA9IGZuOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBnZXQ6IGZ1bmN0aW9uKGFyZWEsIGtleSl7IHJldHVybiBhcmVhLmdldEl0ZW0oa2V5KTsgfSwKICAgICAgICBzZXQ6IGZ1bmN0aW9uKGFyZWEsIGtleSwgc3RyaW5nKXsgYXJlYS5zZXRJdGVtKGtleSwgc3RyaW5nKTsgfSwKICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGFyZWEsIGtleSl7IGFyZWEucmVtb3ZlSXRlbShrZXkpOyB9LAogICAgICAgIGtleTogZnVuY3Rpb24oYXJlYSwgaSl7IHJldHVybiBhcmVhLmtleShpKTsgfSwKICAgICAgICBsZW5ndGg6IGZ1bmN0aW9uKGFyZWEpeyByZXR1cm4gYXJlYS5sZW5ndGg7IH0sCiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uKGFyZWEpeyBhcmVhLmNsZWFyKCk7IH0sCgogICAgICAgIC8vIGNvcmUgZnVuY3Rpb25zCiAgICAgICAgU3RvcmU6IGZ1bmN0aW9uKGlkLCBhcmVhLCBuYW1lc3BhY2UpIHsKICAgICAgICAgICAgdmFyIHN0b3JlID0gXy5pbmhlcml0KF8uc3RvcmVBUEksIGZ1bmN0aW9uKGtleSwgZGF0YSwgb3ZlcndyaXRlKSB7CiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCl7IHJldHVybiBzdG9yZS5nZXRBbGwoKTsgfQogICAgICAgICAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCl7IHJldHVybiBzdG9yZS5zZXQoa2V5LCBkYXRhLCBvdmVyd3JpdGUpOyB9CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gInN0cmluZyIpeyByZXR1cm4gc3RvcmUuZ2V0KGtleSk7IH0KICAgICAgICAgICAgICAgIGlmICgha2V5KXsgcmV0dXJuIHN0b3JlLmNsZWFyKCk7IH0KICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZS5zZXRBbGwoa2V5LCBkYXRhKTsvLyBvdmVyd3JpdGU9ZGF0YSwgZGF0YT1rZXkKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHN0b3JlLl9pZCA9IGlkOwogICAgICAgICAgICBzdG9yZS5fYXJlYSA9IGFyZWEgfHwgXy5pbmhlcml0KF8uc3RvcmFnZUFQSSwgeyBpdGVtczoge30sIG5hbWU6ICdmYWtlJyB9KTsKICAgICAgICAgICAgc3RvcmUuX25zID0gbmFtZXNwYWNlIHx8ICcnOwogICAgICAgICAgICBpZiAoIV8uYXJlYXNbaWRdKSB7CiAgICAgICAgICAgICAgICBfLmFyZWFzW2lkXSA9IHN0b3JlLl9hcmVhOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghXy5hcGlzW3N0b3JlLl9ucytzdG9yZS5faWRdKSB7CiAgICAgICAgICAgICAgICBfLmFwaXNbc3RvcmUuX25zK3N0b3JlLl9pZF0gPSBzdG9yZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc3RvcmU7CiAgICAgICAgfSwKICAgICAgICBzdG9yZUFQSTogewogICAgICAgICAgICAvLyBhZG1pbiBmdW5jdGlvbnMKICAgICAgICAgICAgYXJlYTogZnVuY3Rpb24oaWQsIGFyZWEpIHsKICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRoaXNbaWRdOwogICAgICAgICAgICAgICAgaWYgKCFzdG9yZSB8fCAhc3RvcmUuYXJlYSkgewogICAgICAgICAgICAgICAgICAgIHN0b3JlID0gXy5TdG9yZShpZCwgYXJlYSwgdGhpcy5fbnMpOy8vbmV3IGFyZWEtc3BlY2lmaWMgYXBpIGluIHRoaXMgbmFtZXNwYWNlCiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzW2lkXSl7IHRoaXNbaWRdID0gc3RvcmU7IH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbmFtZXNwYWNlOiBmdW5jdGlvbihuYW1lc3BhY2UsIG5vU2Vzc2lvbikgewogICAgICAgICAgICAgICAgaWYgKCFuYW1lc3BhY2UpewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ucyA/IHRoaXMuX25zLnN1YnN0cmluZygwLHRoaXMuX25zLmxlbmd0aC0xKSA6ICcnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIG5zID0gbmFtZXNwYWNlLCBzdG9yZSA9IHRoaXNbbnNdOwogICAgICAgICAgICAgICAgaWYgKCFzdG9yZSB8fCAhc3RvcmUubmFtZXNwYWNlKSB7CiAgICAgICAgICAgICAgICAgICAgc3RvcmUgPSBfLlN0b3JlKHRoaXMuX2lkLCB0aGlzLl9hcmVhLCB0aGlzLl9ucytucysnLicpOy8vbmV3IG5hbWVzcGFjZWQgYXBpCiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzW25zXSl7IHRoaXNbbnNdID0gc3RvcmU7IH0KICAgICAgICAgICAgICAgICAgICBpZiAoIW5vU2Vzc2lvbil7IHN0b3JlLmFyZWEoJ3Nlc3Npb24nLCBfLmFyZWFzLnNlc3Npb24pOyB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlzRmFrZTogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuX2FyZWEubmFtZSA9PT0gJ2Zha2UnOyB9LAogICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJ3N0b3JlJysodGhpcy5fbnM/Jy4nK3RoaXMubmFtZXNwYWNlKCk6JycpKydbJyt0aGlzLl9pZCsnXSc7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvLyBzdG9yYWdlIGZ1bmN0aW9ucwogICAgICAgICAgICBoYXM6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FyZWEuaGFzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FyZWEuaGFzKHRoaXMuX2luKGtleSkpOy8vZXh0ZW5zaW9uIGhvb2sKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAhISh0aGlzLl9pbihrZXkpIGluIHRoaXMuX2FyZWEpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzaXplOiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5rZXlzKCkubGVuZ3RoOyB9LAogICAgICAgICAgICBlYWNoOiBmdW5jdGlvbihmbiwgYW5kKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTAsIG09Xy5sZW5ndGgodGhpcy5fYXJlYSk7IGk8bTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuX291dChfLmtleSh0aGlzLl9hcmVhLCBpKSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmbi5jYWxsKHRoaXMsIGtleSwgYW5kIHx8IHRoaXMuZ2V0KGtleSkpID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKG0gPiBfLmxlbmd0aCh0aGlzLl9hcmVhKSkgeyBtLS07IGktLTsgfS8vIGluIGNhc2Ugb2YgcmVtb3ZlSXRlbQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGFuZCB8fCB0aGlzOwogICAgICAgICAgICB9LAogICAgICAgICAgICBrZXlzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaywgbGlzdCl7IGxpc3QucHVzaChrKTsgfSwgW10pOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSwgYWx0KSB7CiAgICAgICAgICAgICAgICB2YXIgcyA9IF8uZ2V0KHRoaXMuX2FyZWEsIHRoaXMuX2luKGtleSkpOwogICAgICAgICAgICAgICAgcmV0dXJuIHMgIT09IG51bGwgPyBfLnBhcnNlKHMpIDogYWx0IHx8IHM7Ly8gc3VwcG9ydCBhbHQgZm9yIGVhc3kgZGVmYXVsdCBtZ210CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldEFsbDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGssIGFsbCl7IGFsbFtrXSA9IHRoaXMuZ2V0KGspOyB9LCB7fSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNldDogZnVuY3Rpb24oa2V5LCBkYXRhLCBvdmVyd3JpdGUpIHsKICAgICAgICAgICAgICAgIHZhciBkID0gdGhpcy5nZXQoa2V5KTsKICAgICAgICAgICAgICAgIGlmIChkICE9IG51bGwgJiYgb3ZlcndyaXRlID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIF8uc2V0KHRoaXMuX2FyZWEsIHRoaXMuX2luKGtleSksIF8uc3RyaW5naWZ5KGRhdGEpLCBvdmVyd3JpdGUpIHx8IGQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNldEFsbDogZnVuY3Rpb24oZGF0YSwgb3ZlcndyaXRlKSB7CiAgICAgICAgICAgICAgICB2YXIgY2hhbmdlZCwgdmFsOwogICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICB2YWwgPSBkYXRhW2tleV07CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0KGtleSwgdmFsLCBvdmVyd3JpdGUpICE9PSB2YWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuZ2V0KGtleSk7CiAgICAgICAgICAgICAgICBfLnJlbW92ZSh0aGlzLl9hcmVhLCB0aGlzLl9pbihrZXkpKTsKICAgICAgICAgICAgICAgIHJldHVybiBkOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjbGVhcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX25zKSB7CiAgICAgICAgICAgICAgICAgICAgXy5jbGVhcih0aGlzLl9hcmVhKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGspeyBfLnJlbW92ZSh0aGlzLl9hcmVhLCB0aGlzLl9pbihrKSk7IH0sIDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsZWFyQWxsOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciBhcmVhID0gdGhpcy5fYXJlYTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGlkIGluIF8uYXJlYXMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoXy5hcmVhcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJlYSA9IF8uYXJlYXNbaWRdOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5fYXJlYSA9IGFyZWE7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIGludGVybmFsIHVzZSBmdW5jdGlvbnMKICAgICAgICAgICAgX2luOiBmdW5jdGlvbihrKSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGsgIT09ICJzdHJpbmciKXsgayA9IF8uc3RyaW5naWZ5KGspOyB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbnMgPyB0aGlzLl9ucyArIGsgOiBrOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfb3V0OiBmdW5jdGlvbihrKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbnMgPwogICAgICAgICAgICAgICAgICAgIGsgJiYgay5pbmRleE9mKHRoaXMuX25zKSA9PT0gMCA/CiAgICAgICAgICAgICAgICAgICAgICAgIGsuc3Vic3RyaW5nKHRoaXMuX25zLmxlbmd0aCkgOgogICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQgOiAvLyBzbyBlYWNoKCkga25vd3MgdG8gc2tpcCBpdAogICAgICAgICAgICAgICAgICAgIGs7CiAgICAgICAgICAgIH0KICAgICAgICB9LC8vIGVuZCBfLnN0b3JlQVBJCiAgICAgICAgc3RvcmFnZUFQSTogewogICAgICAgICAgICBsZW5ndGg6IDAsCiAgICAgICAgICAgIGhhczogZnVuY3Rpb24oayl7IHJldHVybiB0aGlzLml0ZW1zLmhhc093blByb3BlcnR5KGspOyB9LAogICAgICAgICAgICBrZXk6IGZ1bmN0aW9uKGkpIHsKICAgICAgICAgICAgICAgIHZhciBjID0gMDsKICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5pdGVtcyl7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGspICYmIGkgPT09IGMrKykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNldEl0ZW06IGZ1bmN0aW9uKGssIHYpIHsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5oYXMoaykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmxlbmd0aCsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5pdGVtc1trXSA9IHY7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlbW92ZUl0ZW06IGZ1bmN0aW9uKGspIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrKSkgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLml0ZW1zW2tdOwogICAgICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoLS07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldEl0ZW06IGZ1bmN0aW9uKGspeyByZXR1cm4gdGhpcy5oYXMoaykgPyB0aGlzLml0ZW1zW2tdIDogbnVsbDsgfSwKICAgICAgICAgICAgY2xlYXI6IGZ1bmN0aW9uKCl7IGZvciAodmFyIGsgaW4gdGhpcy5saXN0KXsgdGhpcy5yZW1vdmVJdGVtKGspOyB9IH0sCiAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5sZW5ndGgrJyBpdGVtcyBpbiAnK3RoaXMubmFtZSsnU3RvcmFnZSc7IH0KICAgICAgICB9Ly8gZW5kIF8uc3RvcmFnZUFQSQogICAgfTsKCiAgICAvLyBzZXR1cCB0aGUgcHJpbWFyeSBzdG9yZSBmbgogICAgaWYgKHdpbmRvdy5zdG9yZSl7IF8uY29uZmxpY3QgPSB3aW5kb3cuc3RvcmU7IH0KICAgIHZhciBzdG9yZSA9CiAgICAgICAgLy8gc2FmZWx5IHNldCB0aGlzIHVwICh0aHJvd3MgZXJyb3IgaW4gSUUxMC8zMmJpdCBtb2RlIGZvciBsb2NhbCBmaWxlcykKICAgICAgICBfLlN0b3JlKCJsb2NhbCIsIChmdW5jdGlvbigpe3RyeXsgcmV0dXJuIGxvY2FsU3RvcmFnZTsgfWNhdGNoKGUpe319KSgpKTsKICAgIHN0b3JlLmxvY2FsID0gc3RvcmU7Ly8gZm9yIGNvbXBsZXRlbmVzcwogICAgc3RvcmUuXyA9IF87Ly8gZm9yIGV4dGVuZGVycyBhbmQgZGVidWdnZXJzLi4uCiAgICAvLyBzYWZlbHkgc2V0dXAgc3RvcmUuc2Vzc2lvbiAodGhyb3dzIGV4Y2VwdGlvbiBpbiBGRiBmb3IgZmlsZTovLy8gdXJscykKICAgIHN0b3JlLmFyZWEoInNlc3Npb24iLCAoZnVuY3Rpb24oKXt0cnl7IHJldHVybiBzZXNzaW9uU3RvcmFnZTsgfWNhdGNoKGUpe319KSgpKTsKCiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBkZWZpbmUoZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gc3RvcmU7CiAgICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7CiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBzdG9yZTsKICAgIH0gZWxzZSB7CiAgICAgICAgd2luZG93LnN0b3JlID0gc3RvcmU7CiAgICB9Cgp9KSh3aW5kb3csIHdpbmRvdy5kZWZpbmUpOwoKfSk7CnJlcXVpcmUucmVnaXN0ZXIoInN0b3JlL3NyYy9zdG9yZS5vbi5qcyIsIGZ1bmN0aW9uKGV4cG9ydHMsIHJlcXVpcmUsIG1vZHVsZSl7Ci8qKgogKiBDb3B5cmlnaHQgKGMpIDIwMTMgRVNIQSBSZXNlYXJjaAogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgYW5kIEdQTCBsaWNlbnNlczoKICogICBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAogKiAgIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwuaHRtbAogKgogKiBNYWtlcyBpdCBlYXN5IHRvIHdhdGNoIGZvciBzdG9yYWdlIGV2ZW50cyBieSBlbmhhbmNpbmcgdGhlIGV2ZW50cyBhbmQKICogYWxsb3dpbmcgYmluZGluZyB0byBwYXJ0aWN1bGFyIGtleXMgYW5kL29yIG5hbWVzcGFjZXMuCiAqCiAqIC8vIGxpc3RlbiB0byBwYXJ0aWN1bGFyIGtleSBzdG9yYWdlIGV2ZW50cyAoeWVzLCB0aGlzIGlzIG5hbWVzcGFjZSBzZW5zaXRpdmUpCiAqIHN0b3JlLm9uKCdmb28nLCBmdW5jdGlvbiBsaXN0ZW5Ub0ZvbyhlKXsgY29uc29sZS5sb2coJ2ZvbyB3YXMgY2hhbmdlZDonLCBlKTsgfSk7CiAqIHN0b3JlLm9mZignZm9vJywgbGlzdGVuVG9Gb28pOwogKgogKiAvLyBsaXN0ZW4gdG8gYWxsIHN0b3JhZ2UgZXZlbnRzIChhbHNvIG5hbWVzcGFjZSBzZW5zaXRpdmUpCiAqIHN0b3JlLm9uKGZ1bmN0aW9uIHN0b3JhZ2VFdmVudChlKXsgY29uc29sZS5sb2coJ3dlYiBzdG9yYWdlOicsIGUpOyB9KTsKICogc3RvcmUub2ZmKHN0b3JhZ2VFdmVudCk7CiAqIAogKiBTdGF0dXM6IEJFVEEgLSB1c2VmdWwsIGlmIHlvdSBhcmVuJ3QgdXNpbmcgSUU4IG9yIHdvcnNlCiAqLwo7KGZ1bmN0aW9uKHdpbmRvdywgXykgewoKICAgIF8ub24gPSBmdW5jdGlvbihrZXksIGZuKSB7CiAgICAgICAgaWYgKCFmbikgeyBmbiA9IGtleTsga2V5ID0gJyc7IH0vLyBubyBrZXkgPT09IGFsbCBrZXlzCiAgICAgICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgICB2YXIgayA9IHRoaXMuX291dChlLmtleSk7Ly8gdW5kZWZpbmVkIGlmIGtleSBpcyBub3QgaW4gdGhlIG5hbWVzcGFjZQogICAgICAgICAgICBpZiAoKGsgJiYgKCFrZXkgfHwgayA9PT0ga2V5KSkgJiYgLy8gbWF0Y2gga2V5IGlmIGxpc3RlbmVyIGhhcyBvbmUKICAgICAgICAgICAgICAgICghZS5zdG9yYWdlQXJlYSB8fCBlLnN0b3JhZ2VBcmVhID09PSB0aGlzLl9hcmVhKSkgey8vIG1hdGNoIGFyZWEsIGlmIGF2YWlsYWJsZQogICAgICAgICAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgXy5ldmVudC5jYWxsKHRoaXMsIGssIGUpKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInN0b3JhZ2UiLCBmbltrZXkrJy1saXN0ZW5lciddPWxpc3RlbmVyLCBmYWxzZSk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwoKICAgIF8ub2ZmID0gZnVuY3Rpb24oa2V5LCBmbikgewogICAgICAgIGlmICghZm4pIHsgZm4gPSBrZXk7IGtleSA9ICcnOyB9Ly8gbm8ga2V5ID09PSBhbGwga2V5cwogICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJzdG9yYWdlIiwgZm5ba2V5KyctbGlzdGVuZXInXSk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwoKICAgIF8ub25jZSA9IGZ1bmN0aW9uKGtleSwgZm4pIHsKICAgICAgICBpZiAoIWZuKSB7IGZuID0ga2V5OyBrZXkgPSAnJzsgfQogICAgICAgIHZhciBzID0gdGhpcywgbGlzdGVuZXI7CiAgICAgICAgcmV0dXJuIHMub24oa2V5LCBsaXN0ZW5lciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBzLm9mZihrZXksIGxpc3RlbmVyKTsKICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIF8uZXZlbnQgPSBmdW5jdGlvbihrLCBlKSB7CiAgICAgICAgdmFyIGV2ZW50ID0gewogICAgICAgICAgICBrZXk6IGssCiAgICAgICAgICAgIG5hbWVzcGFjZTogdGhpcy5uYW1lc3BhY2UoKSwKICAgICAgICAgICAgbmV3VmFsdWU6IF8ucGFyc2UoZS5uZXdWYWx1ZSksCiAgICAgICAgICAgIG9sZFZhbHVlOiBfLnBhcnNlKGUub2xkVmFsdWUpLAogICAgICAgICAgICB1cmw6IGUudXJsIHx8IGUudXJpLAogICAgICAgICAgICBzdG9yYWdlQXJlYTogZS5zdG9yYWdlQXJlYSwKICAgICAgICAgICAgc291cmNlOiBlLnNvdXJjZSwKICAgICAgICAgICAgdGltZVN0YW1wOiBlLnRpbWVTdGFtcCwKICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZQogICAgICAgIH07CiAgICAgICAgaWYgKF8uY2FjaGUpIHsKICAgICAgICAgICAgdmFyIG1pbiA9IF8uZXhwaXJlcyhlLm5ld1ZhbHVlIHx8IGUub2xkVmFsdWUpOwogICAgICAgICAgICBpZiAobWluKSB7CiAgICAgICAgICAgICAgICBldmVudC5leHBpcmVzID0gXy53aGVuKG1pbik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGV2ZW50OwogICAgfTsKCiAgICAvLyBzdG9yZTIgcG9saWN5IGlzIHRvIG5vdCB0aHJvdyBlcnJvcnMgb24gb2xkIGJyb3dzZXJzCiAgICB2YXIgb2xkID0gIXdpbmRvdy5hZGRFdmVudExpc3RlbmVyID8gZnVuY3Rpb24oKXt9IDogbnVsbDsKICAgIF8uZm4oJ29uJywgb2xkIHx8IF8ub24pOwogICAgXy5mbignb2ZmJywgb2xkIHx8IF8ub2ZmKTsKICAgIF8uZm4oJ29uY2UnLCBvbGQgfHwgXy5vbmNlKTsKCn0pKHdpbmRvdywgd2luZG93LnN0b3JlLl8pOwoKfSk7CnJlcXVpcmUucmVnaXN0ZXIoInN0b3JlL3NyYy9zdG9yZS5jYWNoZS5qcyIsIGZ1bmN0aW9uKGV4cG9ydHMsIHJlcXVpcmUsIG1vZHVsZSl7Ci8qKgogKiBDb3B5cmlnaHQgKGMpIDIwMTMgRVNIQSBSZXNlYXJjaAogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgYW5kIEdQTCBsaWNlbnNlczoKICogICBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAogKiAgIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwuaHRtbAogKgogKiBBbGxvd3MgdXNlIG9mIHRoZSAnb3ZlcndyaXRlJyBwYXJhbSBvbiBzZXQgY2FsbHMgdG8gZ2l2ZSBhbiBlbmZvcmNlZCBleHBpcmF0aW9uIGRhdGUKICogd2l0aG91dCBicmVha2luZyBleGlzdGluZyAnb3ZlcndyaXRlJyBmdW5jdGlvbmFsaXR5LgogKgogKiBTdGF0dXM6IEJFVEEgLSB1c2VmdWwsIG5lZWRzIHRlc3RpbmcKICovCjsoZnVuY3Rpb24oXykgewogICAgdmFyIHByZWZpeCA9ICdleHBAJywKICAgICAgICBzdWZmaXggPSAnOycsCiAgICAgICAgcGFyc2UgPSBfLnBhcnNlLAogICAgICAgIF9nZXQgPSBfLmdldCwKICAgICAgICBfc2V0ID0gXy5zZXQ7CiAgICBfLnBhcnNlID0gZnVuY3Rpb24ocykgewogICAgICAgIGlmIChzICYmIHMuaW5kZXhPZihwcmVmaXgpID09PSAwKSB7CiAgICAgICAgICAgIHMgPSBzLnN1YnN0cmluZyhzLmluZGV4T2Yoc3VmZml4KSsxKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBhcnNlKHMpOwogICAgfTsKICAgIF8uZXhwaXJlcyA9IGZ1bmN0aW9uKHMpIHsKICAgICAgICBpZiAocyAmJiBzLmluZGV4T2YocHJlZml4KSA9PT0gMCkgewogICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQocy5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCwgcy5pbmRleE9mKHN1ZmZpeCkpLCAxMCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH07CiAgICBfLndoZW4gPSBmdW5jdGlvbihtaW4pIHsvLyBpZiBtaW4sIHJldHVybiBtaW4tPmRhdGUsIGVsc2UgZGF0ZS0+bWluCiAgICAgICAgdmFyIG5vdyA9IE1hdGguZmxvb3IoKG5ldyBEYXRlKCkuZ2V0VGltZSgpKS82MDAwMCk7CiAgICAgICAgcmV0dXJuIG1pbiA/IG5ldyBEYXRlKChub3crbWluKSo2MDAwMCkgOiBub3c7CiAgICB9OwogICAgXy5jYWNoZSA9IGZ1bmN0aW9uKGFyZWEsIGtleSkgewogICAgICAgIHZhciBzID0gX2dldChhcmVhLCBrZXkpLAogICAgICAgICAgICBtaW4gPSBfLmV4cGlyZXMocyk7CiAgICAgICAgaWYgKG1pbiAmJiBfLndoZW4oKSA+PSBtaW4pIHsKICAgICAgICAgICAgcmV0dXJuIGFyZWEucmVtb3ZlSXRlbShrZXkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gczsKICAgIH07CiAgICBfLmdldCA9IGZ1bmN0aW9uKGFyZWEsIGtleSkgewogICAgICAgIHZhciBzID0gXy5jYWNoZShhcmVhLCBrZXkpOwogICAgICAgIHJldHVybiBzID09PSB1bmRlZmluZWQgPyBudWxsIDogczsKICAgIH07CiAgICBfLnNldCA9IGZ1bmN0aW9uKGFyZWEsIGtleSwgc3RyaW5nLCBtaW4pIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAobWluKSB7CiAgICAgICAgICAgICAgICBzdHJpbmcgPSBwcmVmaXggKyAoXy53aGVuKCkrbWluKSArIHN1ZmZpeCArIHN0cmluZzsKICAgICAgICAgICAgfQogICAgICAgICAgICBfc2V0KGFyZWEsIGtleSwgc3RyaW5nKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdRVU9UQV9FWENFRURFRF9FUlInIHx8IGUubmFtZSA9PT0gJ05TX0VSUk9SX0RPTV9RVU9UQV9SRUFDSEVEJykgewogICAgICAgICAgICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MCxtPWFyZWEubGVuZ3RoOyBpPG07IGkrKykgewogICAgICAgICAgICAgICAgICAgIGlmIChfLmNhY2hlKGFyZWEsIGtleSkgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfLnNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQogICAgfTsKfSkod2luZG93LnN0b3JlLl8sIHVuZGVmaW5lZCk7Cn0pOwpyZXF1aXJlLnJlZ2lzdGVyKCJzdG9yZS9zcmMvc3RvcmUubWVhc3VyZS5qcyIsIGZ1bmN0aW9uKGV4cG9ydHMsIHJlcXVpcmUsIG1vZHVsZSl7Ci8qKgogKiBDb3B5cmlnaHQgKGMpIDIwMTMgRVNIQSBSZXNlYXJjaAogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgYW5kIEdQTCBsaWNlbnNlczoKICogICBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAogKiAgIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwuaHRtbAogKgogKiBzdG9yZS5yZW1haW5pbmdTcGFjZSgpOy8vIHJldHVybnMgcmVtYWluaW5nU3BhY2UgdmFsdWUgKGlmIGJyb3dzZXIgc3VwcG9ydHMgaXQpCiAqIHN0b3JlLmNoYXJzVXNlZCgpOy8vIHJldHVybnMgbGVuZ3RoIG9mIGFsbCBkYXRhIHdoZW4gc3RyaW5naWZpZWQKICogc3RvcmUuY2hhcnNMZWZ0KFt0cnVlXSk7Ly8gdGVzdHMgaG93IG1hbnkgbW9yZSBjaGFycyB3ZSBjYW4gZml0IChjcmFzaCB0aHJlYXQhKQogKiBzdG9yZS5jaGFyc1RvdGFsKFt0cnVlXSk7Ly8gY2hhcnNVc2VkICsgY2hhcnNMZWZ0LCBkdWguCiAqCiAqIFRPRE86IGJ5dGUvc3RyaW5nIGNvbnZlcnNpb25zCiAqCiAqIFN0YXR1czogQUxQSEEgLSBjaGFuZ2luZyBBUEkgKmFuZCogY3Jhc2ggdGhyZWF0cyA6KQogKi8KOyhmdW5jdGlvbihzdG9yZSwgXykgewoKICAgIF8uZm4oJ3JlbWFpbmluZ1NwYWNlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2FyZWEucmVtYWluaW5nU3BhY2U7CiAgICB9KTsKICAgIF8uZm4oJ2NoYXJzVXNlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBfLnN0cmluZ2lmeSh0aGlzLmdldEFsbCgpKS5sZW5ndGggLSAyOwogICAgfSk7CiAgICBfLmZuKCdjaGFyc0xlZnQnLCBmdW5jdGlvbih0ZXN0KSB7CiAgICAgICAgaWYgKHRoaXMuaXNGYWtlKCkpeyByZXR1cm47IH0KICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICB0ZXN0ID0gd2luZG93LmNvbmZpcm0oJ0NhbGxpbmcgc3RvcmUuY2hhcnNMZWZ0KCkgbWF5IGNyYXNoIHNvbWUgYnJvd3NlcnMhJyk7CiAgICAgICAgfQogICAgICAgIGlmICh0ZXN0KSB7CiAgICAgICAgICAgIHZhciBzID0gJ3MgJywgYWRkID0gczsKICAgICAgICAgICAgLy8gZ3JvdyBhZGQgZm9yIHNwZWVkCiAgICAgICAgICAgIHdoaWxlIChwdXQoc3RvcmUuX2FyZWEsIHMpKSB7CiAgICAgICAgICAgICAgICBzICs9IGFkZDsKICAgICAgICAgICAgICAgIGlmIChhZGQubGVuZ3RoIDwgNTAwMDApIHsKICAgICAgICAgICAgICAgICAgICBhZGQgPSBzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIHNocmluayBhZGQgZm9yIGFjY3VyYWN5CiAgICAgICAgICAgIHdoaWxlIChhZGQubGVuZ3RoID4gMikgewogICAgICAgICAgICAgICAgcyA9IHMuc3Vic3RyaW5nKDAsIHMubGVuZ3RoIC0gKGFkZC5sZW5ndGgvMikpOwogICAgICAgICAgICAgICAgd2hpbGUgKHB1dChzdG9yZS5fYXJlYSwgcykpIHsKICAgICAgICAgICAgICAgICAgICBzICs9IGFkZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGFkZCA9IGFkZC5zdWJzdHJpbmcoYWRkLmxlbmd0aC8yKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfLnJlbW92ZShzdG9yZS5fYXJlYSwgIl9fdGVzdF9fIik7CiAgICAgICAgICAgIHJldHVybiBzLmxlbmd0aCArIDg7CiAgICAgICAgfQogICAgfSk7CiAgICBfLmZuKCdjaGFyc1RvdGFsJywgZnVuY3Rpb24odGVzdCkgewogICAgICAgIHJldHVybiBzdG9yZS5jaGFyc1VzZWQoKSArIHN0b3JlLmNoYXJzTGVmdCh0ZXN0KTsKICAgIH0pOwoKICAgIGZ1bmN0aW9uIHB1dChhcmVhLCBzKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgYXJlYS5zZXRJdGVtKCJfX3Rlc3RfXyIsIHMpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgfQoKfSkod2luZG93LnN0b3JlLCB3aW5kb3cuc3RvcmUuXyk7Cn0pOwpyZXF1aXJlLnJlZ2lzdGVyKCJzdG9yZS9zcmMvc3RvcmUub2xkLmpzIiwgZnVuY3Rpb24oZXhwb3J0cywgcmVxdWlyZSwgbW9kdWxlKXsKLyoqCiAqIENvcHlyaWdodCAoYykgMjAxMyBFU0hBIFJlc2VhcmNoCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzOgogKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCiAqICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC5odG1sCiAqCiAqIElmIGZha2UgKG5vbi1wZXJzaXN0ZW50KSBzdG9yYWdlIGZvciB1c2VycyBzdHVjayBpbiB0aGUgZGFyayBhZ2VzIAogKiBkb2VzIG5vdCBzYXRpc2Z5IHlvdSwgdGhpcyB3aWxsIHJlcGxhY2UgaXQgd2l0aCB0aGUgYSByZWFzb25hYmxlIGltaXRhdG9yIGZvciB0aGVpcgogKiBwYXRoZXRpYywgaW5jb21wZXRlbnQgYnJvd3Nlci4gIE5vdGUgdGhhdCB0aGUgc2Vzc2lvbiByZXBsYWNlbWVudCBoZXJlIGlzIHBvdGVudGlhbGx5CiAqIGluc2VjdXJlIGFzIGl0IHVzZXMgd2luZG93Lm5hbWUgd2l0aG91dCBhbnkgZmFuY3kgcHJvdGVjdGlvbnMuCiAqCiAqIFN0YXR1czogQkVUQSAtIHVuc3VwcG9ydGVkLCB1c2VmdWwsIG5lZWRzIHRlc3RpbmcgJiByZWZpbmluZwogKi8KOyhmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCBzdG9yZSwgXykgewoKICAgIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBpdGVtcywgdXBkYXRlKSB7CiAgICAgICAgdmFyIGxlbmd0aCA9IDA7CiAgICAgICAgZm9yICh2YXIgayBpbiBpdGVtcykgewogICAgICAgICAgICBpZiAoaXRlbXMuaGFzT3duUHJvcGVydHkoaykpIHsKICAgICAgICAgICAgICAgIGxlbmd0aCsrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciBhcmVhID0gXy5pbmhlcml0KF8uc3RvcmFnZUFQSSwgeyBpdGVtczppdGVtcywgbGVuZ3RoOmxlbmd0aCwgbmFtZTpuYW1lIH0pOwogICAgICAgIGlmICh1cGRhdGUpIHsKICAgICAgICAgICAgYWRkVXBkYXRlRm4oYXJlYSwgJ3NldEl0ZW0nLCB1cGRhdGUpOwogICAgICAgICAgICBhZGRVcGRhdGVGbihhcmVhLCAncmVtb3ZlSXRlbScsIHVwZGF0ZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhcmVhOwogICAgfQogICAgZnVuY3Rpb24gYWRkVXBkYXRlRm4oYXJlYSwgbmFtZSwgdXBkYXRlKSB7CiAgICAgICAgdmFyIG9sZCA9IGFyZWFbbmFtZV07CiAgICAgICAgYXJlYVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgcmV0ID0gb2xkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIHVwZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgIH07CiAgICB9CgogICAgaWYgKHN0b3JlLmlzRmFrZSgpKSB7CiAgICAgICAgdmFyIGFyZWE7CgogICAgICAgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYWRkQmVoYXZpb3IpIHsvLyBJRSB1c2VyRGF0YQogICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwKICAgICAgICAgICAgICAgIHNuID0gJ2xvY2FsU3RvcmFnZScsCiAgICAgICAgICAgICAgICBib2R5ID0gZG9jdW1lbnQuYm9keSwKICAgICAgICAgICAgICAgIHdyYXAgPSBmdW5jdGlvbiB3cmFwKGZuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKGVsKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWwuYWRkQmVoYXZpb3IoJyNkZWZhdWx0I3VzZXJEYXRhJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmxvYWQoc24pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0ID0gZm4uYXBwbHkoc3RvcmUuX2FyZWEsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnNhdmUoc24pOwogICAgICAgICAgICAgICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKGVsKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGhhcyA9IGZ1bmN0aW9uIGhhcyhrZXkpewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoa2V5KSAhPT0gbnVsbDsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBVc2VyRGF0YVN0b3JhZ2UgPSBmdW5jdGlvbiBVc2VyRGF0YVN0b3JhZ2UoKXt9OwoKICAgICAgICAgICAgVXNlckRhdGFTdG9yYWdlLnByb3RvdHlwZSA9IHsKICAgICAgICAgICAgICAgIGxlbmd0aDogKHdyYXAoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWwuWE1MRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmF0dHJpYnV0ZXMubGVuZ3RoOwogICAgICAgICAgICAgICAgfSkpKCksCiAgICAgICAgICAgICAgICBoYXM6IHdyYXAoaGFzKSwKICAgICAgICAgICAgICAgIGtleTogd3JhcChmdW5jdGlvbihpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsLlhNTERvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRyaWJ1dGVzW2ldOwogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBzZXRJdGVtOiB3cmFwKGZ1bmN0aW9uKGssIHYpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIWhhcyhrKSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxlbmd0aCsrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoaywgdik7CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIHJlbW92ZUl0ZW06IHdyYXAoZnVuY3Rpb24oaykgewogICAgICAgICAgICAgICAgICAgIGlmIChoYXMoaykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGspOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxlbmd0aC0tOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgZ2V0SXRlbTogd3JhcChmdW5jdGlvbihrKXsgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShrKTsgfSksCiAgICAgICAgICAgICAgICBjbGVhcjogd3JhcChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYWxsID0gZWwuWE1MRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmF0dHJpYnV0ZXM7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wLCBhOyAhIShhID0gYWxsW2ldKTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShhLm5hbWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0aGlzLmxlbmd0aCA9IDA7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9OwogICAgICAgICAgICBhcmVhID0gbmV3IFVzZXJEYXRhU3RvcmFnZSgpOwoKICAgICAgICB9IGVsc2UgaWYgKCdnbG9iYWxTdG9yYWdlJyBpbiB3aW5kb3cgJiYgd2luZG93Lmdsb2JhbFN0b3JhZ2UpIHsvLyBGRiBnbG9iYWxTdG9yYWdlCiAgICAgICAgICAgIGFyZWEgPSBjcmVhdGUoJ2dsb2JhbCcsIHdpbmRvdy5nbG9iYWxTdG9yYWdlW3dpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZV0pOwoKICAgICAgICB9IGVsc2Ugey8vIGNvb2tpZQogICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCksCiAgICAgICAgICAgICAgICBrZXkgPSAnc3RvcmUubG9jYWwnLAogICAgICAgICAgICAgICAgaXRlbXMgPSB7fSwKICAgICAgICAgICAgICAgIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTsKICAgICAgICAgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpKyg1KjM2NSoyNCo2MCo2MCoxMDAwKSk7Ly81IHllYXJzIG91dAogICAgICAgICAgICBkYXRlID0gZGF0ZS50b0dNVFN0cmluZygpOwogICAgICAgICAgICBmb3IgKHZhciBpPTAsbT1jb29raWVzLmxlbmd0aDsgaTxtOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBjID0gY29va2llc1tpXTsKICAgICAgICAgICAgICAgIHdoaWxlIChjLmNoYXJBdCgwKSA9PT0gJyAnKSB7CiAgICAgICAgICAgICAgICAgICAgYyA9IGMuc3Vic3RyaW5nKDEsIGMubGVuZ3RoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChjLmluZGV4T2Yoa2V5KSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gSlNPTi5wYXJzZShjLnN1YnN0cmluZyhrZXkubGVuZ3RoKzEpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBhcmVhID0gY3JlYXRlKCdjb29raWUnLCBpdGVtcywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBrZXkrIj0iK0pTT04uc3RyaW5naWZ5KHRoaXMuaXRlbXMpKyI7IGV4cGlyZXM9IitkYXRlKyI7IHBhdGg9LyI7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy8gcmVwbGFjZSBsb2NhbCdzIGZha2Ugc3RvcmFnZQogICAgICAgIHN0b3JlLl9hcmVhID0gXy5hcmVhcy5sb2NhbCA9IGFyZWE7CiAgICB9CgogICAgaWYgKHN0b3JlLnNlc3Npb24uaXNGYWtlKCkpIHsKICAgICAgICB2YXIgc0l0ZW1zID0gd2luZG93Lm5hbWUgPyBKU09OLnBhcnNlKHdpbmRvdy5uYW1lKVtkb2N1bWVudC5kb21haW5dfHx7fSA6IHt9OwogICAgICAgIHN0b3JlLnNlc3Npb24uX2FyZWEgPSBfLmFyZWFzLnNlc3Npb24gPQogICAgICAgICAgICBjcmVhdGUoJ3dpbmRvd05hbWUnLCBzSXRlbXMsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIG8gPSB7fTsKICAgICAgICAgICAgICAgIG9bZG9jdW1lbnQuZG9tYWluXSA9IHRoaXMuaXRlbXM7CiAgICAgICAgICAgICAgICB3aW5kb3cubmFtZSA9IEpTT04uc3RyaW5naWZ5KG8pOwogICAgICAgICAgICB9KTsKICAgIH0KCn0pKHdpbmRvdywgZG9jdW1lbnQsIHdpbmRvdy5zdG9yZSwgd2luZG93LnN0b3JlLl8pOwoKfSk7CnJlcXVpcmUucmVnaXN0ZXIoInN0b3JlL3NyYy9zdG9yZS5vdmVyZmxvdy5qcyIsIGZ1bmN0aW9uKGV4cG9ydHMsIHJlcXVpcmUsIG1vZHVsZSl7Ci8qKgogKiBDb3B5cmlnaHQgKGMpIDIwMTMgRVNIQSBSZXNlYXJjaAogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgYW5kIEdQTCBsaWNlbnNlczoKICogICBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAogKiAgIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwuaHRtbAogKgogKiBXaGVuIHF1b3RhIGlzIHJlYWNoZWQgb24gYSBzdG9yYWdlIGFyZWEsIHRoaXMgc2hpZnRzIGluY29taW5nIHZhbHVlcyB0byAKICogZmFrZSBzdG9yYWdlLCBzbyB0aGV5IGxhc3Qgb25seSBhcyBsb25nIGFzIHRoZSBwYWdlIGRvZXMuIFRoaXMgaXMgdXNlZnVsCiAqIGJlY2F1c2UgaXQgaXMgbW9yZSBidXJkZW5zb21lIGZvciBsb2NhbFN0b3JhZ2UgdG8gcmVjb3ZlciBmcm9tIHF1b3RhIGVycm9ycwogKiB0aGFuIGluY29tcGxldGUgY2FjaGVzLiBJbiBvdGhlciB3b3JkcywgaXQgaXMgd2lzZXIgdG8gcmVseSBvbiBzdG9yZS5qcwogKiBuZXZlciBjb21wbGFpbmluZyB0aGFuIG5ldmVyIG1pc3NpbmcgZGF0YS4gWW91IHNob3VsZCBhbHJlYWR5IGJlIGNoZWNraW5nCiAqIHRoZSBpbnRlZ3JpdHkgb2YgY2FjaGVkIGRhdGEgb24gZXZlcnkgcGFnZSBsb2FkLiBBbHNvIG5vdGUgdGhhdCBxdW90YSBlcnJvcnMKICogYXJlIHRocm93biBieSBTYWZhcmkgZm9yICpldmVyeSogc2V0SXRlbSB3aGVuIHVzZXIgaXMgaW4gcHJpdmF0ZSBicm93c2luZyBtb2RlLgogKiBodHRwOi8vc3Bpbi5hdG9taWNvYmplY3QuY29tLzIwMTMvMDEvMjMvaW9zLXByaXZhdGUtYnJvd3NpbmctbG9jYWxzdG9yYWdlLwogKgogKiBTdGF0dXM6IEJFVEEKICovCjsoZnVuY3Rpb24oc3RvcmUsIF8pIHsKICAgIHZhciBfc2V0ID0gXy5zZXQsCiAgICAgICAgX2dldCA9IF8uZ2V0LAogICAgICAgIF9yZW1vdmUgPSBfLnJlbW92ZSwKICAgICAgICBfa2V5ID0gXy5rZXksCiAgICAgICAgX2xlbmd0aCA9IF8ubGVuZ3RoLAogICAgICAgIF9jbGVhciA9IF8uY2xlYXI7CgogICAgXy5vdmVyZmxvdyA9IGZ1bmN0aW9uKGFyZWEsIGNyZWF0ZSkgewogICAgICAgIHZhciBuYW1lID0gYXJlYSA9PT0gXy5hcmVhcy5sb2NhbCA/ICcrbG9jYWwrJyA6CiAgICAgICAgICAgICAgICAgICBhcmVhID09PSBfLmFyZWFzLnNlc3Npb24gPyAnK3Nlc3Npb24rJyA6IGZhbHNlOwogICAgICAgIGlmIChuYW1lKSB7CiAgICAgICAgICAgIHZhciBvdmVyZmxvdyA9IF8uYXJlYXNbbmFtZV07CiAgICAgICAgICAgIGlmIChjcmVhdGUgJiYgIW92ZXJmbG93KSB7CiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IHN0b3JlLmFyZWEobmFtZSkuX2FyZWE7Ly8gYXJlYSgpIGNvcGllcyB0byBfLmFyZWFzCiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3JlYXRlID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgZGVsZXRlIF8uYXJlYXNbbmFtZV07CiAgICAgICAgICAgICAgICBkZWxldGUgc3RvcmVbbmFtZV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG92ZXJmbG93OwogICAgICAgIH0KICAgIH07CiAgICBfLnNldCA9IGZ1bmN0aW9uKGFyZWEsIGtleSwgc3RyaW5nKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgX3NldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1FVT1RBX0VYQ0VFREVEX0VSUicgfHwKICAgICAgICAgICAgICAgIGUubmFtZSA9PT0gJ05TX0VSUk9SX0RPTV9RVU9UQV9SRUFDSEVEJyB8fAogICAgICAgICAgICAgICAgZS50b1N0cmluZygpLmluZGV4T2YoIlFVT1RBX0VYQ0VFREVEX0VSUiIpICE9PSAtMSB8fAogICAgICAgICAgICAgICAgZS50b1N0cmluZygpLmluZGV4T2YoIlF1b3RhRXhjZWVkZWRFcnJvciIpICE9PSAtMSkgewogICAgICAgICAgICAgICAgLy8gdGhlIGUudG9TdHJpbmcgaXMgbmVlZGVkIGZvciBJRTkgLyBJRTEwLCBjb3MgbmFtZSBpcyBlbXB0eSB0aGVyZQogICAgICAgICAgICAgICAgcmV0dXJuIF8uc2V0KF8ub3ZlcmZsb3coYXJlYSwgdHJ1ZSksIGtleSwgc3RyaW5nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aHJvdyBlOwogICAgICAgIH0KICAgIH07CiAgICBfLmdldCA9IGZ1bmN0aW9uKGFyZWEsIGtleSkgewogICAgICAgIHZhciBvdmVyZmxvdyA9IF8ub3ZlcmZsb3coYXJlYSk7CiAgICAgICAgcmV0dXJuIChvdmVyZmxvdyAmJiBfZ2V0LmNhbGwodGhpcywgb3ZlcmZsb3csIGtleSkpIHx8CiAgICAgICAgICAgIF9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgICBfLnJlbW92ZSA9IGZ1bmN0aW9uKGFyZWEsIGtleSkgewogICAgICAgIHZhciBvdmVyZmxvdyA9IF8ub3ZlcmZsb3coYXJlYSk7CiAgICAgICAgaWYgKG92ZXJmbG93KXsgX3JlbW92ZS5jYWxsKHRoaXMsIG92ZXJmbG93LCBrZXkpOyB9CiAgICAgICAgX3JlbW92ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICAgIF8ua2V5ID0gZnVuY3Rpb24oYXJlYSwgaSkgewogICAgICAgIHZhciBvdmVyZmxvdyA9IF8ub3ZlcmZsb3coYXJlYSk7CiAgICAgICAgaWYgKG92ZXJmbG93KSB7CiAgICAgICAgICAgIHZhciBsID0gX2xlbmd0aC5jYWxsKHRoaXMsIGFyZWEpOwogICAgICAgICAgICBpZiAoaSA+PSBsKSB7CiAgICAgICAgICAgICAgICBpID0gaSAtIGw7Ly8gbWFrZSBpIG92ZXJmbG93LXJlbGF0aXZlCiAgICAgICAgICAgICAgICBmb3IgKHZhciBqPTAsIG09X2xlbmd0aC5jYWxsKHRoaXMsIG92ZXJmbG93KTsgajxtOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PT0gaSkgey8vIGogaXMgb3ZlcmZsb3cgaW5kZXgKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9rZXkuY2FsbCh0aGlzLCBvdmVyZmxvdywgaik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBfa2V5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwogICAgXy5sZW5ndGggPSBmdW5jdGlvbihhcmVhKSB7CiAgICAgICAgdmFyIGxlbmd0aCA9IF9sZW5ndGgoYXJlYSksCiAgICAgICAgICAgIG92ZXJmbG93ID0gXy5vdmVyZmxvdyhhcmVhKTsKICAgICAgICByZXR1cm4gb3ZlcmZsb3cgPyBsZW5ndGggKyBfbGVuZ3RoKG92ZXJmbG93KSA6IGxlbmd0aDsKICAgIH07CiAgICBfLmNsZWFyID0gZnVuY3Rpb24oYXJlYSkgewogICAgICAgIF8ub3ZlcmZsb3coYXJlYSwgZmFsc2UpOwogICAgICAgIF9jbGVhci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKCn0pKHdpbmRvdy5zdG9yZSwgd2luZG93LnN0b3JlLl8pOwoKfSk7CnJlcXVpcmUucmVnaXN0ZXIoInN0b3JlL3NyYy9zdG9yZS5xdW90YS5qcyIsIGZ1bmN0aW9uKGV4cG9ydHMsIHJlcXVpcmUsIG1vZHVsZSl7Ci8qKgogKiBDb3B5cmlnaHQgKGMpIDIwMTMgRVNIQSBSZXNlYXJjaAogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgYW5kIEdQTCBsaWNlbnNlczoKICogICBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAogKiAgIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwuaHRtbAogKgogKiBCaW5kIGhhbmRsZXJzIHRvIHF1b3RhIGVycm9yczoKICogICBzdG9yZS5xdW90YShmdW5jdGlvbihlLCBhcmVhLCBrZXksIHN0cikgewogKiAgICAgIGNvbnNvbGUubG9nKGUsIGFyZWEsIGtleSwgc3RyKTsKICogICB9KTsKICogSWYgYSBoYW5kbGVyIHJldHVybnMgdHJ1ZSBvdGhlciBoYW5kbGVycyBhcmUgbm90IGNhbGxlZCBhbmQKICogdGhlIGVycm9yIGlzIHN1cHByZXNzZWQuCiAqCiAqIFRoaW5rIHF1b3RhIGVycm9ycyB3aWxsIG5ldmVyIGhhcHBlbiB0byB5b3U/IFRoaW5rIGFnYWluOgogKiBodHRwOi8vc3Bpbi5hdG9taWNvYmplY3QuY29tLzIwMTMvMDEvMjMvaW9zLXByaXZhdGUtYnJvd3NpbmctbG9jYWxzdG9yYWdlLwogKiAodGhpcyBhZmZlY3RzIHNlc3Npb25TdG9yYWdlIHRvbykKICoKICogU3RhdHVzOiBBTFBIQSAtIEFQSSBjb3VsZCB1c2UgdW5iaW5kIGZlYXR1cmUKICovCjsoZnVuY3Rpb24oc3RvcmUsIF8pIHsKCiAgICBzdG9yZS5xdW90YSA9IGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgc3RvcmUucXVvdGEuZm5zLnB1c2goZm4pOwogICAgfTsKICAgIHN0b3JlLnF1b3RhLmZucyA9IFtdOwoKICAgIHZhciBfc2V0ID0gXy5zZXQ7CiAgICBfLnNldCA9IGZ1bmN0aW9uKGFyZWEsIGtleSwgc3RyKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgX3NldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1FVT1RBX0VYQ0VFREVEX0VSUicgfHwKICAgICAgICAgICAgICAgIGUubmFtZSA9PT0gJ05TX0VSUk9SX0RPTV9RVU9UQV9SRUFDSEVEJykgewogICAgICAgICAgICAgICAgdmFyIGZucyA9IHN0b3JlLnF1b3RhLmZuczsKICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MCxtPWZucy5sZW5ndGg7IGk8bTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRydWUgPT09IGZuc1tpXS5jYWxsKHRoaXMsIGUsIGFyZWEsIGtleSwgc3RyKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQogICAgfTsKCn0pKHdpbmRvdy5zdG9yZSwgd2luZG93LnN0b3JlLl8pOwp9KTsKcmVxdWlyZS5hbGlhcygic3RvcmUvZGlzdC9zdG9yZTIuanMiLCAic3RvcmUvaW5kZXguanMiKTsKCmlmICh0eXBlb2YgZXhwb3J0cyA9PSAib2JqZWN0IikgewogIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgic3RvcmUiKTsKfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewogIGRlZmluZShmdW5jdGlvbigpeyByZXR1cm4gcmVxdWlyZSgic3RvcmUiKTsgfSk7Cn0gZWxzZSB7CiAgdGhpc1sic3RvcmUiXSA9IHJlcXVpcmUoInN0b3JlIik7Cn19KSgpOw==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 14:52:12 GMT",
                    "Content-Length": "29480",
                    "Date": "Sat, 08 Nov 2014 14:52:12 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}